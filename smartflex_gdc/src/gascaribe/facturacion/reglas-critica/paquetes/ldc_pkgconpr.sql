create or replace PACKAGE LDC_PKGCONPR AS 
    
    CSBOBTECOPS CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'LDC - OBTECOPS - Obtener Consumo Promedio Subcategor?a';

    
    CSBOBTECOPP CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'OBTECOPP - Obtener Consumo Promedio Individual de los ?ltimos meses parametrizados';

    
    CSBCALCCOPN CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'CALCCOPN - Calcular el consumo promedio Individual de los ?ltimos N per?odos';

    
    CSBCALCCPEN CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'CALCCPEN - Calcular el consumo promedio estacional de los ?ltimos N per?odos';

    
    CSBOBTEESCI CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'OBTEESCI - Obtener Estimaci?n Consumo por Carga Instalada';

    
    CSBOBTECOAF CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'OBTECOAF - Obtener Consumo Aforado';

    
    CSBOBTEENCF CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'OBTEENCF - Obtener En?simo Consumo Facturado Anterior';

    
    CSBOBTECOFA CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'OBTECOFA - Obtener consumo facturado anterior';

    
    CSBOBTECOAP CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'OBTECOAP - Obtener consumo de alumbrado p?blico';

    
    CSBAJUSDIUS  CONSTANT CONSSESU.COSSFUFA%TYPE:=
    'AJUSDIUS - Ajuste por D?as de Uso del Servicio';
    
    
    CSBESTACONS CONSTANT CONSSESU.COSSFUFA%TYPE:=
    'ESTACONS - Establecer Consumo Manualmente';

    
    CSBOBTECAND CONSTANT CONSSESU.COSSFUFA%TYPE :=
    'OBTECAND - Obtener Consumo Aforado por N?mero de D?as';
    
    CSBSEPARATION_INFO_ADI CONSTANT VARCHAR2(2) := '-';

    
    
    
    
    
    
    
    
    

    
    FUNCTION FSBVERSION  RETURN VARCHAR2;
    
    
    
    
    
    PROCEDURE ESTABLISHCONSUMPTION
    (
        INUCONSUMPTION  IN  CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );
    
    
    
    
    
    PROCEDURE GETAVERAGECONSOFSUBCAT
    (
        ISBLOCTOKEN     IN  GE_GEOGRA_LOCA_TYPE.TOKEN%TYPE,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );
    
    
    
    
    
    PROCEDURE GETAVERAGECONSOFSUBCAT_
    (
        IRCPRODUCT          IN  SERVSUSC%ROWTYPE,
        INUCONSTYPE         IN  TIPOCONS.TCONCODI%TYPE,
        IRCCONSPERIOD       IN  PERICOSE%ROWTYPE,
        ISBLOCTOKEN         IN  GE_GEOGRA_LOCA_TYPE.TOKEN%TYPE,
        ONUCONSUMPTION      OUT CONSSESU.COSSCOCA%TYPE
    );
    
    
    
    
    
    
    PROCEDURE  GETINDIVIDAVERAGECONS
    (
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );
    
    
    
    
    
    
    PROCEDURE  CALCINDIVIDAVERAGECONS
    (
        INUNUMPERIODS   IN  NUMBER,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );
    
    
    
    
    
    
    PROCEDURE CALCINDIVIDAVERAGECONS_
    (
        INUPRODUCT              IN  CONSSESU.COSSSESU%TYPE,
        INUCONSUMPTIONTYPE      IN  CONSSESU.COSSTCON%TYPE,
        INUCONSUMPTIONPERIOD    IN  CONSSESU.COSSPECS%TYPE,
        INUPERIODSTOCONSIDER    IN  NUMBER,
        ISBINCLUDECURRPERIOD    IN  VARCHAR2,
        ONUAVERAGECONSUMPTION   OUT CONSSESU.COSSCOCA%TYPE
    );
    
    
    
    
    
    
    PROCEDURE GETCONSBYINSTALLEDLOAD
    (
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );
    
    
    
    
    
    PROCEDURE GETCONSBYINSTALLEDLOAD_
    (
        IRCPRODUCT          IN  SERVSUSC%ROWTYPE,
        ONUCONSBYINSTLOAD   OUT CONSSESU.COSSCOCA%TYPE
    );

    
    
    
    
    PROCEDURE GETNTHPREVCONSUMPTION
    (
        INUNUMPERIODS   IN  NUMBER,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );

    
    
    
    
    FUNCTION FNUGETNTHPREVCONS
    (
        INUPRODUCTID            IN  SERVSUSC.SESUNUSE%TYPE,
        INUCONSUMPTIONTYPE      IN  TIPOCONS.TCONCODI%TYPE,
        INUCONSUMPTIONPERIOD    IN  PERICOSE.PECSCONS%TYPE,
        INUPERIODSTOCONSIDER    IN  NUMBER
    )
    RETURN CONSSESU.COSSCOCA%TYPE;

    
    
    
    
    PROCEDURE GETESTABLISHEDCONS
    (
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );
    
    
    
    
    
    PROCEDURE GETPREVIOUSCONSUMPTION
    (
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );
    
    
    FUNCTION FSBGETESTABLISHCONSTYPE
    RETURN AFORSESU.AFSSTIAF%TYPE;
    
    
    PROCEDURE ASSIGNCONSUPTION
    (
        ISBCONSUMPTIONSOURCE IN CONSSESU.COSSFUFA%TYPE
    );
    
    
    PROCEDURE CALCPARTIALCONSUMPTION
    (
        IRCCURRENTREADING       IN  LECTELME%ROWTYPE,
        IRCCURRENTPERIOD        IN  PERICOSE%ROWTYPE,
        INUCONSUMPTION          IN  CONSSESU.COSSCOCA%TYPE,
        ONUPARTIALCONSUMPTION   OUT CONSSESU.COSSCOCA%TYPE,
        ONUCONSUMPTIONDAYS      OUT CONSSESU.COSSDICO%TYPE
    );

    
    PROCEDURE REGISTERSELECTIVECONS
    (
        IRCCONSUMPTION          IN OUT NOCOPY CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION,
        ISBCONSUMPTIONSOURCE    IN CONSSESU.COSSFUFA%TYPE
    );
    
    
    
    
    
    PROCEDURE GENPUBLICPOWERCONS
    (
        INUCOMPONENTTYPE     IN  COMPSESU.CMSSTCOM%TYPE,
        INUCOMPONENTSERV     IN  COMPSESU.CMSSCLSE%TYPE,
        ONUCONSUMPTION       OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION      OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD      OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );
    
    
    
    
    
    
    PROCEDURE CALCSEASONAVERAGECONS
    (
        INUNUMPERIODS   IN  NUMBER,
        INUPERIODTYPE   IN  CM_TIPOPEES.TIPECODI%TYPE,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );
    
    
    
    
    
    PROCEDURE CALCSEASONAVERAGECONS_
    (
        INUPRODUCT              IN  CONSSESU.COSSSESU%TYPE,
        INUCONSUMPTIONTYPE      IN  CONSSESU.COSSTCON%TYPE,
        IRCCONSUMPTIONPERIOD    IN  PERICOSE%ROWTYPE,
        INUPERIODTYPE           IN  CM_TIPOPEES.TIPECODI%TYPE,
        INUPERIODSTOCONSIDER    IN  NUMBER,
        ISBINCLUDECURRPERIOD    IN  VARCHAR2,
        ONUAVERAGECONSUMPTION   OUT CONSSESU.COSSCOCA%TYPE
    );
    
    
    
    
    
    PROCEDURE ADJUSTCONSBYDAYSOFUSE
    (
        ISBCONSUMPTIONSOURCE IN CONSSESU.COSSFUFA%TYPE
    );
    
    
    
    
    
    PROCEDURE GETDAILYESTABLICONS
    (
        INUCONSUMPDAYS  IN  NUMBER,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );

    
    
    
    
    FUNCTION FNUCALCINDIVIDAVGCONS
    (
        INUPRODUCT              IN  CONSSESU.COSSSESU%TYPE,
        INUCONSUMPTIONTYPE      IN  CONSSESU.COSSTCON%TYPE,
        INUCONSUMPTIONPERIOD    IN  CONSSESU.COSSPECS%TYPE,
        INUPERIODSTOCONSIDER    IN  NUMBER,
        ISBINCLUDECURRPERIOD    IN  VARCHAR2
    )
    RETURN CONSSESU.COSSCOCA%TYPE;


    
    
    
    
    FUNCTION FNUINFOAVGCONSOFSUBCAT
    (
        ISBLOCTOKEN IN  GE_GEOGRA_LOCA_TYPE.TOKEN%TYPE
    )
    RETURN CONSSESU.COSSCOCA%TYPE;

    
    
    
    
    
    FUNCTION FNUINFOINDIVIDAVERAGECONS
    RETURN CONSSESU.COSSCOCA%TYPE;
    
    
    PROCEDURE BREAKPREVREADRECOVERY
    (
        IRCCONSUMPTION          IN  CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION,
        ISBCONSUMPTIONSOURCE    IN CONSSESU.COSSFUFA%TYPE
    );

    
    PROCEDURE SETMAXRECVALUE
    (
        INUVALUE    IN  NUMBER
    );
    
    
    PROCEDURE SETDIRECTCONSUMPTION
    (
        INUCONSUMPTION  IN  CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    );

END LDC_PKGCONPR;
/
create or replace PACKAGE BODY LDC_PKGCONPR AS
    




































































































    
    
    
    TYPE TYTBTCONACTIVA IS TABLE OF TICOACRE.TCARREAC%TYPE INDEX BY BINARY_INTEGER;
    GTBTCONACTIVA   TYTBTCONACTIVA;
    
    TYPE TYTBBREAKUPCONS IS TABLE OF CM_BCMEASCONSUMPTIONS.TYRCCONSBASICDATA INDEX BY BINARY_INTEGER;

    
    
    
    
    CSBVERSION          CONSTANT VARCHAR2(10) := 'SAO428214';
    CNUNO_CONSUMPTION   CONSTANT NUMBER       := -1;

    
    
    
    SBERRMSG            GE_ERROR_LOG.DESCRIPTION%TYPE;
    
    
    GNUMAX_REC_ALLOWED  NUMBER;

    
    
    
    PROCEDURE REGISTERSELECTIVECONS_
    (
        IRCCONSUMPTION          IN OUT NOCOPY CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION,
        ISBCONSUMPTIONSOURCE    IN CONSSESU.COSSFUFA%TYPE
    );

    

















    FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
        
        RETURN (CSBVERSION);
    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
            RAISE;
    END FSBVERSION;
    
    





















    PROCEDURE STD
    (
        ISBMSG   IN VARCHAR2,
        INULEVEL IN PLS_INTEGER DEFAULT 30
    )
    IS
    BEGIN

        $IF $$DEBUG $THEN
            UT_TRACE.TRACE(ISBMSG, INULEVEL);
            TD(ISBMSG);
        $ELSE
            NULL;
        $END

    END STD;
    
    
    






























    PROCEDURE GETDAILYESTABLICONS
    (
        INUCONSUMPDAYS  IN  NUMBER,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS

        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;

        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;
        NUCOSSCOCA          CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;
        NUDAYS              NUMBER;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.GetDailyEstabliCons',90);
        STD('OBTECAND - Obtener Consumo Aforado por N?mero de D?as');

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );

          
        NUDAYS:=  INUCONSUMPDAYS;

        
        NUCOSSCOCA :=
        PKBCAFORSESU.FNUGETGAUGECONSUMPTION
        (
            RCPRODUCT.SESUNUSE,
            RCACTIVERULE.RMVCTICO,
            TRUNC(RCCONSUMPTIONPERIOD.PECSFECI),
            TRUNC(RCCONSUMPTIONPERIOD.PECSFECF)
        );
        STD('Daily Cauge Consumption : ' || NUCOSSCOCA);

        
        IF(INUCONSUMPDAYS IS NULL) THEN
            
            STD('-- Getting Period Days --');
            NUDAYS:= (TRUNC(RCCONSUMPTIONPERIOD.PECSFECF) - TRUNC(RCCONSUMPTIONPERIOD.PECSFECI))+1;
            STD('Days: ' || NUDAYS);
        END IF;

        
        NUCOSSCOCA:=  NUCOSSCOCA * NUDAYS;

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,    
            RCCONSUMPTIONPERIOD, 
            NUCOSSCOCA,          
            ONUCONSUMPTION,      
            NUCONSUMPTIONDAYS    
        );

        
        ONUCONSUMPTION  := NVL(ONUCONSUMPTION, CNUNO_CONSUMPTION);
        OSBCALCFUNCTION := CSBOBTECAND;
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_AFORADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSUMPTIONPERIOD.PECSCONS; 
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := ONUCONSUMPTION;               
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         
        RCCONSUMPTIONREG.SBADITIONALINFO        := NUDAYS;                       

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,CSBOBTECAND);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END GETDAILYESTABLICONS;

    



















    PROCEDURE ESTABLISHCONSUMPTION
    (
        INUCONSUMPTION  IN  CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSPERIOD        PERICOSE%ROWTYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;
        NUESTIMATECONSUMP   CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.EstablishConsumption',90);

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSPERIOD
        );

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,       
            RCCONSPERIOD,           
            INUCONSUMPTION,         
            NUESTIMATECONSUMP,      
            NUCONSUMPTIONDAYS       
        );

        
        OSBCALCFUNCTION := CSBESTACONS;
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSPERIOD.PECSCONS;        
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := NUESTIMATECONSUMP;            
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,CSBESTACONS);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END ESTABLISHCONSUMPTION;


    



















    PROCEDURE SETDIRECTCONSUMPTION
    (
        INUCONSUMPTION  IN  CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSPERIOD        PERICOSE%ROWTYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;
        NUESTIMATECONSUMP   CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.SetDirectConsumption',90);

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSPERIOD
        );

        NUCONSUMPTIONDAYS := TRUNC(RCCONSPERIOD.PECSFECF) -
                            TRUNC(RCCONSPERIOD.PECSFECI) + 1;

        
        OSBCALCFUNCTION := CSBESTACONS;
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSPERIOD.PECSCONS;        
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := INUCONSUMPTION;                  
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,CSBESTACONS);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END SETDIRECTCONSUMPTION;

    






















    PROCEDURE GETAVERAGECONSOFSUBCAT_
    (
        IRCPRODUCT          IN  SERVSUSC%ROWTYPE,
        INUCONSTYPE         IN  TIPOCONS.TCONCODI%TYPE,
        IRCCONSPERIOD       IN  PERICOSE%ROWTYPE,
        ISBLOCTOKEN         IN  GE_GEOGRA_LOCA_TYPE.TOKEN%TYPE,
        ONUCONSUMPTION      OUT CONSSESU.COSSCOCA%TYPE
    )
    IS
        NUYEAR              COPRSUCA.CPSCANCO%TYPE;
        NUMONTH             COPRSUCA.CPSCMECO%TYPE;
        NUDAYS              NUMBER;
        NUGEOGLOCATION      GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        NUADDRESSID         AB_ADDRESS.ADDRESS_ID%TYPE;
        NUCONSUMPTION       CONSSESU.COSSCOCA%TYPE;
        NUTOTALCONS         COPRSUCA.CPSCCOTO%TYPE; --
        NUTOTALPROD         COPRSUCA.CPSCPROD%TYPE; --

         CURSOR CUPROMECONSUMO IS
        SELECT  SUM(CPSCCOTO) ,
                  SUM(CPSCPROD)             
            FROM LDC_COPRSUCA            
           WHERE cpsccate = ircproduct.sesucate
             AND cpscsuca = ircproduct.sesusuca
             AND cpscubge = nugeoglocation
             AND TO_DATE ('01/'||CPSCMECO||'/'||CPSCANCO , 'DD/MM/YYYY') <
                 TO_DATE ('01/'||NUMONTH||'/'||NUYEAR , 'DD/MM/YYYY')
             GROUP BY CPSCMECO, CPSCANCO
             ORDER BY TO_DATE ('01/'||CPSCMECO||'/'||CPSCANCO , 'DD/MM/YYYY') DESC;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.GetAverageConsOfSubCat_',90);

        
        IF(ISBLOCTOKEN IS NULL) THEN
            STD('Obtiene ubicaci?n geogr?fica del producto');
            
            CM_BOCOPRSUCA.GETLASTCONSBYPROD
            (
                IRCPRODUCT,
                IRCCONSPERIOD,
                INUCONSTYPE,
                ONUCONSUMPTION
            );
            RETURN;
        END IF;

        STD('Obtiene ubicaci?n geogr?fica del token');
        
        CM_BOCOPRSUCA.GETPERIODMONTH
        (
           IRCCONSPERIOD.PECSFECI,
           IRCCONSPERIOD.PECSFECF,
           NUYEAR,
           NUMONTH,
           NUDAYS
        );

        
        NUADDRESSID:=   DAPR_PRODUCT.FNUGETADDRESS_ID(IRCPRODUCT.SESUNUSE);

        
        NUGEOGLOCATION:=
        GE_BOGEOGRA_LOCATION.FNUGETGEO_LOCABYADDRESS
        (
            NUADDRESSID,
            ISBLOCTOKEN
        );

        BEGIN
          IF CUPROMECONSUMO%ISOPEN THEN
             CLOSE CUPROMECONSUMO;
          END IF;
          OPEN CUPROMECONSUMO;
          FETCH CUPROMECONSUMO INTO nutotalcons, nutotalprod;
          CLOSE CUPROMECONSUMO;
        EXCEPTION
          WHEN OTHERS THEN
             nutotalcons := 0;
             nutotalprod := 0;
        END;

        onuconsumption := round(nullif(nutotalcons,0) / nullif(nutotalprod,0), 3);
        
       /* CM_BOCOPRSUCA.GETLASTCONSBYLOC
        (
            NUGEOGLOCATION,
            NUYEAR,
            NUMONTH,
            IRCPRODUCT.SESUCATE,
            IRCPRODUCT.SESUSUCA,
            INUCONSTYPE,
            ONUCONSUMPTION
        );*/

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END GETAVERAGECONSOFSUBCAT_;


    
































    PROCEDURE GETAVERAGECONSOFSUBCAT
    (
        ISBLOCTOKEN     IN  GE_GEOGRA_LOCA_TYPE.TOKEN%TYPE,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSPERIOD        PERICOSE%ROWTYPE;

        NUCONSUMPTION       CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.GetAverageConsOfSubCat',90);
        STD('OBTECOPS - Obtener Consumo Promedio Subcategor?a');

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSPERIOD
        );
        
         ut_trace.trace('LDC_PKGCONPR.GETAVERAGECONSOFSUBCAT Prod['  ||RCPRODUCT.SESUNUSE   ||'] ConsType['||RCACTIVERULE.RMVCTICO||'] '||
            'Period['||RCCONSPERIOD.PECSCONS||']  ISBLOCTOKEN['||ISBLOCTOKEN||']', 10);
        STD('Prod['  ||RCPRODUCT.SESUNUSE   ||'] ConsType['||RCACTIVERULE.RMVCTICO||'] '||
            'Period['||RCCONSPERIOD.PECSCONS||']  ['||ISBLOCTOKEN||']');

        
        GETAVERAGECONSOFSUBCAT_
        (
           RCPRODUCT,
           RCACTIVERULE.RMVCTICO,
           RCCONSPERIOD,
           nvl(ISBLOCTOKEN, 'LOC'),
           NUCONSUMPTION
        );

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,       
            RCCONSPERIOD,           
            NUCONSUMPTION,          
            ONUCONSUMPTION,         
            NUCONSUMPTIONDAYS       
        );

        
        ONUCONSUMPTION  := NVL(ONUCONSUMPTION, CNUNO_CONSUMPTION);
        OSBCALCFUNCTION := CSBOBTECOPS;
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSPERIOD.PECSCONS;        
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := ONUCONSUMPTION;               
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         
        RCCONSUMPTIONREG.SBADITIONALINFO        := ISBLOCTOKEN;                  

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,CSBOBTECOPS);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
          
    END GETAVERAGECONSOFSUBCAT;
    
    


























    PROCEDURE GETINDIVIDAVERAGECONS
    (
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;

        NUCONSUMPTION       CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.GetIndividAverageCons',90);
        STD('OBTECOPP - Obtener Consumo Promedio Individual de los ?ltimos meses parametrizados');

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );
        STD('Prod['      ||RCPRODUCT.SESUNUSE          ||
            '] ConsType['||RCACTIVERULE.RMVCTICO       ||
            '] Period['  ||RCCONSUMPTIONPERIOD.PECSCONS||'] ');
        
        
        NUCONSUMPTION :=
        PKBCHICOPRPM.GETLASTAVGCONBYPRODUCT
        (
            RCPRODUCT.SESUNUSE,
            RCACTIVERULE.RMVCTICO,
            RCCONSUMPTIONPERIOD.PECSCONS
        );

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,    
            RCCONSUMPTIONPERIOD, 
            NUCONSUMPTION,       
            ONUCONSUMPTION,      
            NUCONSUMPTIONDAYS    
        );

        
        ONUCONSUMPTION  := NVL(ONUCONSUMPTION, CNUNO_CONSUMPTION);
        OSBCALCFUNCTION := CSBOBTECOPP;
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSUMPTIONPERIOD.PECSCONS; 
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := ONUCONSUMPTION;               
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,CSBOBTECOPP);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETINDIVIDAVERAGECONS;
    
    

























    PROCEDURE CALCINDIVIDAVERAGECONS
    (
        INUNUMPERIODS   IN  NUMBER,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;
        
        NUINDIVIDUALCONS    CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;
        
    BEGIN
        STD('BEGIN CM_BOEstimateServices.CalcIndividAverageCons',90);
        STD('CALCCOPN - Calcular el consumo promedio Individual de los ?ltimos N per?odos');

        
        IF ( INUNUMPERIODS IS NULL OR INUNUMPERIODS <= 0) THEN
        
            ONUCONSUMPTION  := CNUNO_CONSUMPTION;
            OSBCALCFUNCTION := SUBSTR(CSBCALCCOPN||' [N='||INUNUMPERIODS||']',1,100);
            ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;
            RETURN;
        
        END IF;

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );

        
        CALCINDIVIDAVERAGECONS_
        (
            RCPRODUCT.SESUNUSE,                             
            RCACTIVERULE.RMVCTICO,                          
            RCCONSUMPTIONPERIOD.PECSCONS,                   
            INUNUMPERIODS,                                  
            CM_BCMEASCONSUMPTIONS.CSBDONOT_INCLUDE_CURR_PER,
            NUINDIVIDUALCONS                                
        );

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,    
            RCCONSUMPTIONPERIOD, 
            NUINDIVIDUALCONS,    
            ONUCONSUMPTION,      
            NUCONSUMPTIONDAYS    
        );

        
        ONUCONSUMPTION  := NVL(ONUCONSUMPTION, CNUNO_CONSUMPTION);
        OSBCALCFUNCTION := SUBSTR(CSBCALCCOPN||' [N='||INUNUMPERIODS||']',1,100);
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSUMPTIONPERIOD.PECSCONS; 
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := ONUCONSUMPTION;               
        RCCONSUMPTIONREG.SBADITIONALINFO        := INUNUMPERIODS;                
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,OSBCALCFUNCTION);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END CALCINDIVIDAVERAGECONS;
    
    
    


































    PROCEDURE CALCSEASONAVERAGECONS
    (
        INUNUMPERIODS   IN  NUMBER,
        INUPERIODTYPE   IN  CM_TIPOPEES.TIPECODI%TYPE,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;

        NUINDIVIDUALCONS    CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;
        
        SBADITIONALINFO     VARCHAR2(100);

    BEGIN
        STD('BEGIN CM_BOEstimateServices.CalcSeasonAverageCons',90);
        STD('CALCCPEN - Calcular el consumo promedio Estacional de los ?ltimos N per?odos');

        
        IF ( INUNUMPERIODS IS NULL OR INUNUMPERIODS <= 0) THEN
        
            ONUCONSUMPTION  := CNUNO_CONSUMPTION;
            OSBCALCFUNCTION := SUBSTR(CSBCALCCOPN||' [N='||INUNUMPERIODS||']',1,100);
            ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;
            RETURN;
        
        END IF;

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );
        
        
        
        
        IF ( INUPERIODTYPE IS NULL) THEN

            
            CALCINDIVIDAVERAGECONS_
            (
                RCPRODUCT.SESUNUSE,                             
                RCACTIVERULE.RMVCTICO,                          
                RCCONSUMPTIONPERIOD.PECSCONS,                   
                INUNUMPERIODS,                                  
                CM_BCMEASCONSUMPTIONS.CSBDONOT_INCLUDE_CURR_PER,
                NUINDIVIDUALCONS                                
            );

            OSBCALCFUNCTION := SUBSTR(CSBCALCCOPN||' [N='||INUNUMPERIODS||']',1,100);
            SBADITIONALINFO := INUNUMPERIODS;

        ELSE
            
            CALCSEASONAVERAGECONS_
            (
                RCPRODUCT.SESUNUSE,                                 
                RCACTIVERULE.RMVCTICO,                              
                RCCONSUMPTIONPERIOD,                                
                INUPERIODTYPE,                                      
                INUNUMPERIODS,                                      
                CM_BCMEASCONSUMPTIONS.CSBDONOT_INCLUDE_CURR_PER,    
                NUINDIVIDUALCONS                                    
            );
            
            
            OSBCALCFUNCTION := SUBSTR(CSBCALCCPEN||' [N='||INUNUMPERIODS||']',1,100);
            SBADITIONALINFO := INUNUMPERIODS || CSBSEPARATION_INFO_ADI ||INUPERIODTYPE;
        
        END IF;
        
        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,    
            RCCONSUMPTIONPERIOD, 
            NUINDIVIDUALCONS,    
            ONUCONSUMPTION,      
            NUCONSUMPTIONDAYS    
        );

        
        ONUCONSUMPTION  := NVL(ONUCONSUMPTION, CNUNO_CONSUMPTION);
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSUMPTIONPERIOD.PECSCONS; 
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := ONUCONSUMPTION;               
        RCCONSUMPTIONREG.SBADITIONALINFO        := SBADITIONALINFO;                
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,OSBCALCFUNCTION);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END CALCSEASONAVERAGECONS;
    

    






















































    PROCEDURE CALCSEASONAVERAGECONS_
    (
        INUPRODUCT              IN  CONSSESU.COSSSESU%TYPE,
        INUCONSUMPTIONTYPE      IN  CONSSESU.COSSTCON%TYPE,
        IRCCONSUMPTIONPERIOD    IN  PERICOSE%ROWTYPE,
        INUPERIODTYPE           IN  CM_TIPOPEES.TIPECODI%TYPE,
        INUPERIODSTOCONSIDER    IN  NUMBER,
        ISBINCLUDECURRPERIOD    IN  VARCHAR2,
        ONUAVERAGECONSUMPTION   OUT CONSSESU.COSSCOCA%TYPE
    )
    IS
        
        
        
        TBSEASONALCONS      CM_BCMEASCONSUMPTIONS.TYTBSEASONCONS;
        NUIDX               NUMBER;
        NUCONSIDX           NUMBER;
        NUTOTALCONSUMPTION  NUMBER;
        SBSEASONALPERIOD    VARCHAR2(2);
        SBINSEASONPERIOD    VARCHAR2(1);

        
        
        NUVALIDPERIODSBYMETHOD  NUMBER;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.CalcSeasonAverageCons_',90);

        
        
        
        SBSEASONALPERIOD:= CM_BOMEASCONSUMPTIONS.FSBSEASONPERIODFLAG
        (
            INUPERIODTYPE,
            IRCCONSUMPTIONPERIOD
        );

        
        
        
        
        

        IF (SBSEASONALPERIOD IS NOT NULL) THEN

            SBINSEASONPERIOD:= CM_BCMEASCONSUMPTIONS.CSBINSIDE_SEASON_CONS_ONLY;
        ELSE
        
            SBINSEASONPERIOD:= CM_BCMEASCONSUMPTIONS.CSBOUTSIDE_SEASON_CONS_ONLY;
        END IF;
        
        STD('Current Period IS Seasonal: ' || '['||SBINSEASONPERIOD|| ']');
        
        
        
        
        CM_BCMEASCONSUMPTIONS.GETPRODSEASONCONSUMP
        (
            INUPRODUCT,                                      
            INUCONSUMPTIONTYPE,                              
            IRCCONSUMPTIONPERIOD.PECSCONS,                   
            INUPERIODTYPE,                                   
            SBINSEASONPERIOD,                                
            ISBINCLUDECURRPERIOD,                            
            INUPERIODSTOCONSIDER+1,                          
            TBSEASONALCONS                                   
        );

        NUIDX                 := 0;
        NUTOTALCONSUMPTION    := 0;
        ONUAVERAGECONSUMPTION := NULL;
        NUCONSIDX             := TBSEASONALCONS.FIRST;
        NUVALIDPERIODSBYMETHOD:= 0;


        
        
        
        LOOP
            EXIT WHEN ( NUIDX = INUPERIODSTOCONSIDER         OR
                        NOT TBSEASONALCONS.EXISTS(NUCONSIDX) OR
                        NUCONSIDX IS NULL );

            STD('Per ['||TBSEASONALCONS(NUCONSIDX).NUCONSUMPTIONPERIOD||'] Con['
                       ||TBSEASONALCONS(NUCONSIDX).NUCONSUMPTION      ||']' );


            IF ( TBSEASONALCONS(NUCONSIDX).SBAVGVALIDCONS = PKCONSTANTE.SI ) THEN
            
                STD('Valid');
                NUTOTALCONSUMPTION     := NUTOTALCONSUMPTION +
                TBSEASONALCONS(NUCONSIDX).NUCONSUMPTION;

                NUVALIDPERIODSBYMETHOD := NUVALIDPERIODSBYMETHOD + 1;
            ELSE
                STD('Skipped');
            
            END IF;


            NUCONSIDX := TBSEASONALCONS.NEXT(NUCONSIDX);
            NUIDX     := NUIDX + 1;
        END LOOP;

        
        
        
        IF ( NUVALIDPERIODSBYMETHOD != 0 ) THEN
        
            ONUAVERAGECONSUMPTION := NUTOTALCONSUMPTION / NUVALIDPERIODSBYMETHOD;
        
        END IF;
        STD('Average ['||ONUAVERAGECONSUMPTION||']');

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END CALCSEASONAVERAGECONS_;
    
    

    





















































    PROCEDURE CALCINDIVIDAVERAGECONS_
    (
        INUPRODUCT              IN  CONSSESU.COSSSESU%TYPE,
        INUCONSUMPTIONTYPE      IN  CONSSESU.COSSTCON%TYPE,
        INUCONSUMPTIONPERIOD    IN  CONSSESU.COSSPECS%TYPE,
        INUPERIODSTOCONSIDER    IN  NUMBER,
        ISBINCLUDECURRPERIOD    IN  VARCHAR2,
        ONUAVERAGECONSUMPTION   OUT CONSSESU.COSSCOCA%TYPE
    )
    IS
        
        
        
        TBCONSUMPTIONS          CM_BCMEASCONSUMPTIONS.TYTBCONSUMPTIONS;
        NUIDX                   NUMBER;
        NUCONSIDX               NUMBER;
        NUTOTALCONSUMPTION      NUMBER;
        
        
        
        NUVALIDPERIODSBYMETHOD  NUMBER;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.CalcIndividAverageCons_',90);

        
        
        
        CM_BCMEASCONSUMPTIONS.GETPRODCONSUMPTIONS
        (
            INUPRODUCT,                                     
            INUCONSUMPTIONTYPE,                             
            INUCONSUMPTIONPERIOD,                           
            ISBINCLUDECURRPERIOD,                           
            INUPERIODSTOCONSIDER+1,                         
            TBCONSUMPTIONS                                  
        );

        NUIDX                 := 0;
        NUTOTALCONSUMPTION    := 0;
        ONUAVERAGECONSUMPTION := NULL;
        NUCONSIDX             := TBCONSUMPTIONS.FIRST;
        NUVALIDPERIODSBYMETHOD:= 0;


        
        
        
        LOOP
            EXIT WHEN ( NUIDX = INUPERIODSTOCONSIDER         OR
                        NOT TBCONSUMPTIONS.EXISTS(NUCONSIDX) OR
                        NUCONSIDX IS NULL );

            STD('Per ['||TBCONSUMPTIONS(NUCONSIDX).NUCONSUMPTIONPERIOD||'] Con['
                       ||TBCONSUMPTIONS(NUCONSIDX).NUCONSUMPTION      ||']' );


            IF ( TBCONSUMPTIONS(NUCONSIDX).SBAVGVALIDCONS = PKCONSTANTE.SI ) THEN
            
                STD('Valid');
                NUTOTALCONSUMPTION     := NUTOTALCONSUMPTION +
                TBCONSUMPTIONS(NUCONSIDX).NUCONSUMPTION;

                NUVALIDPERIODSBYMETHOD := NUVALIDPERIODSBYMETHOD + 1;
            ELSE
                STD('Skipped');
            
            END IF;


            NUCONSIDX := TBCONSUMPTIONS.NEXT(NUCONSIDX);
            NUIDX     := NUIDX + 1;
        END LOOP;

        
        
        
        IF ( NUVALIDPERIODSBYMETHOD != 0 ) THEN
        
            ONUAVERAGECONSUMPTION := NUTOTALCONSUMPTION / NUVALIDPERIODSBYMETHOD;
        
        END IF;
        STD('Average ['||ONUAVERAGECONSUMPTION||']');

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END CALCINDIVIDAVERAGECONS_;

   




















    PROCEDURE  GETCONSBYINSTALLEDLOAD
    (
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;

        NULOADCONSUMPTION   CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;
        
    BEGIN
        STD('BEGIN CM_BOEstimateServices.GetConsByInstalledLoad',90);
        STD('OBTEESCI - Obtener Estimaci?n Consumo por Carga Instalada');

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );

        
        GETCONSBYINSTALLEDLOAD_
        (
            RCPRODUCT,         
            NULOADCONSUMPTION  
        );

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,    
            RCCONSUMPTIONPERIOD, 
            NULOADCONSUMPTION,   
            ONUCONSUMPTION,      
            NUCONSUMPTIONDAYS    
        );

        
        ONUCONSUMPTION  := NVL(ONUCONSUMPTION, CNUNO_CONSUMPTION);
        OSBCALCFUNCTION := CSBOBTEESCI;
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSUMPTIONPERIOD.PECSCONS; 
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := ONUCONSUMPTION;               
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,CSBOBTEESCI);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETCONSBYINSTALLEDLOAD;
    
    
























    PROCEDURE  GETCONSBYINSTALLEDLOAD_
    (
        IRCPRODUCT          IN  SERVSUSC%ROWTYPE,
        ONUCONSBYINSTLOAD   OUT CONSSESU.COSSCOCA%TYPE
    )
    IS
        
        
        
        NUFACTOR    FAUTSUCA.FUSCFACT%TYPE;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.GetConsByInstalledLoad_',90);
        ONUCONSBYINSTLOAD := NULL;

        
        
        
        
        NUFACTOR :=
        PKBCFAUTSUCA.FNUUSEFACTOR
        (
            IRCPRODUCT.SESUSUCA,
            IRCPRODUCT.SESUCATE,
            IRCPRODUCT.SESUSERV
        );

        
        
        
        
        
        IF ( IRCPRODUCT.SESUCAIN IS NOT NULL AND NUFACTOR IS NOT NULL ) THEN
        
            ONUCONSBYINSTLOAD := (NVL (IRCPRODUCT.SESUCAIN, 0) * NVL (NUFACTOR, 0) * 720 );
            STD('Consumo Carga Instalada: '||ONUCONSBYINSTLOAD||' Carga instalada: '||
                IRCPRODUCT.SESUCAIN ||' Factor = ' || NUFACTOR );
        ELSE
            STD('Falta Condiguraci?n. Carga instalada ['||
             IRCPRODUCT.SESUCAIN||'] Factor ['||NUFACTOR||']');
        
        END IF;

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END GETCONSBYINSTALLEDLOAD_;
    
   
























    PROCEDURE GETESTABLISHEDCONS
    (
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;

        NUCOSSCOCA          CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;
        
    BEGIN
        STD('BEGIN CM_BOEstimateServices.GetEstablishedCons',90);
        STD('OBTECOAF - Obtener Consumo Aforado');

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );

        
        NUCOSSCOCA :=
        PKBCAFORSESU.FNUGETGAUGECONSUMPTION
        (
            RCPRODUCT.SESUNUSE,
            RCACTIVERULE.RMVCTICO,
            TRUNC(RCCONSUMPTIONPERIOD.PECSFECI),
            TRUNC(RCCONSUMPTIONPERIOD.PECSFECF)
        );

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,    
            RCCONSUMPTIONPERIOD, 
            NUCOSSCOCA,          
            ONUCONSUMPTION,      
            NUCONSUMPTIONDAYS    
        );

        
        ONUCONSUMPTION  := NVL(ONUCONSUMPTION, CNUNO_CONSUMPTION);
        OSBCALCFUNCTION := CSBOBTECOAF;
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_AFORADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSUMPTIONPERIOD.PECSCONS; 
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := ONUCONSUMPTION;               
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         


        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,CSBOBTECOAF);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END GETESTABLISHEDCONS;

   





















    PROCEDURE GETNTHPREVCONSUMPTION
    (
        INUNUMPERIODS   IN  NUMBER,
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;

        NUN_PREVIOUSCONS    CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.GetNthPrevConsumption',90);
        STD('OBTEENCF - Obtener En?simo Consumo Facturado Anterior');

        
        IF ( INUNUMPERIODS IS NULL OR INUNUMPERIODS <= 0) THEN
        
            ONUCONSUMPTION  := CNUNO_CONSUMPTION;
            OSBCALCFUNCTION := SUBSTR(CSBOBTEENCF||' [N='||INUNUMPERIODS||']',1,100);
            ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;
            RETURN;
        
        END IF;

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );

        
        NUN_PREVIOUSCONS := FNUGETNTHPREVCONS  
        (
            RCPRODUCT.SESUNUSE,                
            RCACTIVERULE.RMVCTICO,             
            RCCONSUMPTIONPERIOD.PECSCONS,      
            INUNUMPERIODS                      
        );

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,    
            RCCONSUMPTIONPERIOD, 
            NUN_PREVIOUSCONS,    
            ONUCONSUMPTION,      
            NUCONSUMPTIONDAYS    
        );

        
        ONUCONSUMPTION  := NVL(ONUCONSUMPTION, CNUNO_CONSUMPTION);
        OSBCALCFUNCTION := SUBSTR(CSBOBTEENCF||' [N='||INUNUMPERIODS||']',1,100);
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSUMPTIONPERIOD.PECSCONS; 
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := ONUCONSUMPTION;               
        RCCONSUMPTIONREG.SBADITIONALINFO        := INUNUMPERIODS;                
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         


        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,OSBCALCFUNCTION);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETNTHPREVCONSUMPTION;
    
    

























    FUNCTION FNUGETNTHPREVCONS
    (
        INUPRODUCTID            IN  SERVSUSC.SESUNUSE%TYPE,
        INUCONSUMPTIONTYPE      IN  TIPOCONS.TCONCODI%TYPE,
        INUCONSUMPTIONPERIOD    IN  PERICOSE.PECSCONS%TYPE,
        INUPERIODSTOCONSIDER    IN  NUMBER
    )
    RETURN CONSSESU.COSSCOCA%TYPE
    IS
        
        
        
        NUCONSUMPTION           CONSSESU.COSSCOCA%TYPE;
        
        TBCONSUMPTIONS          CM_BCMEASCONSUMPTIONS.TYTBCONSUMPTIONS;
        NUIDX                   NUMBER;
        NUPERIODCOUNT           NUMBER;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.fnuGetNthPrevCons',90);

        
        CM_BCMEASCONSUMPTIONS.GETPRODCONSUMPTIONS
        (
            INUPRODUCTID,                                   
            INUCONSUMPTIONTYPE,                             
            INUCONSUMPTIONPERIOD,                           
            CM_BCMEASCONSUMPTIONS.CSBDONOT_INCLUDE_CURR_PER,
            INUPERIODSTOCONSIDER+1,                         
            TBCONSUMPTIONS                                  
        );

        NUIDX         := TBCONSUMPTIONS.FIRST;
        NUPERIODCOUNT := 1;

        
        
        
        IF ( NUIDX IS NOT NULL ) THEN
        
            LOOP
                EXIT WHEN ( NUPERIODCOUNT = INUPERIODSTOCONSIDER OR NUIDX IS NULL );

                NUPERIODCOUNT := NUPERIODCOUNT + 1;
                NUIDX         := TBCONSUMPTIONS.NEXT( NUIDX );

            END LOOP;
        
        END IF;

        
        
        
        IF ( NUPERIODCOUNT != INUPERIODSTOCONSIDER OR
             NUIDX IS NULL ) THEN
        
            STD('No hay consumo para el ['||INUPERIODSTOCONSIDER||'] per?odo.');
            NUCONSUMPTION := NULL;
        ELSE
            NUCONSUMPTION := TBCONSUMPTIONS( NUIDX ).NUCONSUMPTION;
        
        END IF;

        RETURN NUCONSUMPTION;
    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
            RAISE;
    END FNUGETNTHPREVCONS;
    
   




















    PROCEDURE GETPREVIOUSCONSUMPTION
    (
        ONUCONSUMPTION  OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;

        NUPREVIOUS_CONS     CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS   CONSSESU.COSSDICO%TYPE;
        RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.GetPreviousConsumption',90);
        STD('OBTECOFA - Obtener consumo facturado anterior');

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );

        
        NUPREVIOUS_CONS := FNUGETNTHPREVCONS 
        (
            RCPRODUCT.SESUNUSE,              
            RCACTIVERULE.RMVCTICO,           
            RCCONSUMPTIONPERIOD.PECSCONS,    
            1                                
        );

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,    
            RCCONSUMPTIONPERIOD, 
            NUPREVIOUS_CONS,     
            ONUCONSUMPTION,      
            NUCONSUMPTIONDAYS    
        );

        
        ONUCONSUMPTION  := NVL(ONUCONSUMPTION, CNUNO_CONSUMPTION);
        OSBCALCFUNCTION := CSBOBTECOFA;
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        RCCONSUMPTIONREG.NUPRODUCT              := RCPRODUCT.SESUNUSE;           
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := RCACTIVERULE.RMVCTICO;        
        RCCONSUMPTIONREG.NUMEASUREELEMENT       := RCCURRENTREADING.LEEMELME;    
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := RCCONSUMPTIONPERIOD.PECSCONS; 
        RCCONSUMPTIONREG.NUCALCMETHOD           := ONUCONSUMMETHOD;              
        RCCONSUMPTIONREG.SBCALCFUNC             := OSBCALCFUNCTION;              
        RCCONSUMPTIONREG.NURULEID               := RCACTIVERULE.RMVCCONS;        
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := NUCONSUMPTIONDAYS;            
        RCCONSUMPTIONREG.NUQUALIFICATION        := NULL;                         
        RCCONSUMPTIONREG.NUCONSUMPTION          := ONUCONSUMPTION;               
        RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                         

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,CSBOBTECOFA);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETPREVIOUSCONSUMPTION;
    
   

















    FUNCTION FSBGETESTABLISHCONSTYPE
    RETURN AFORSESU.AFSSTIAF%TYPE
    IS
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;
        SBGAUGETYPE         AFORSESU.AFSSTIAF%TYPE;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.fsbGetEstablishConsType',90);

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );
        
        STD('Prod['      ||RCPRODUCT.SESUNUSE          ||
        '] ConsType['||RCACTIVERULE.RMVCTICO       ||
        '] Period['  ||RCCONSUMPTIONPERIOD.PECSCONS||'] ');
        
        
        SBGAUGETYPE :=
        PKBCAFORSESU.FSBGETGAUGETYPE
        (
            RCPRODUCT.SESUNUSE,
            RCACTIVERULE.RMVCTICO
        );

        STD('Tipo Aforo: '||SBGAUGETYPE);
        RETURN  SBGAUGETYPE;
    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
            RAISE;
    END FSBGETESTABLISHCONSTYPE;
    
    

































    PROCEDURE GENPUBLICPOWERCONS
    (
        INUCOMPONENTTYPE     IN  COMPSESU.CMSSTCOM%TYPE,
        INUCOMPONENTSERV     IN  COMPSESU.CMSSCLSE%TYPE,
        ONUCONSUMPTION       OUT NOCOPY CONSSESU.COSSCOCA%TYPE,
        OSBCALCFUNCTION      OUT NOCOPY CONSSESU.COSSFUFA%TYPE,
        ONUCONSUMMETHOD      OUT NOCOPY CONSSESU.COSSMECC%TYPE
    )
    AS
        
        
        
        RCCURRENTREADING        LECTELME%ROWTYPE;
        RCORDER                 DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT               SERVSUSC%ROWTYPE;
        NUACTIVITY              REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE            REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD     PERICOSE%ROWTYPE;
        NUVLRAFORODIA           AFORSESU.AFSSCAAF%TYPE;
        TBCOMPONENTS            PKBCCOMPSESU.TYTBCOMPDIASACT;
        NUCOMPINDEX             NUMBER;
        NUPUBLICPOWCONS         CONSSESU.COSSCOCA%TYPE;
        NUPARTIALCONSUMPTION    CONSSESU.COSSCOCA%TYPE;
        NUCONSUMPTIONDAYS       CONSSESU.COSSDICO%TYPE;
        RCCONSUMPTIONREG        CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.GenPublicPowerCons',90);

        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );

        
        
        
        NUVLRAFORODIA:=
        PKBCAFORSESU.FNUGETGAUGECONSUMPTION
        (
            RCPRODUCT.SESUNUSE,
            RCACTIVERULE.RMVCTICO,
            RCCONSUMPTIONPERIOD.PECSFECI,
            RCCONSUMPTIONPERIOD.PECSFECF
        );
        STD('Aforo por d?a ['||NUVLRAFORODIA|| ']');

        
        
        
        
        
        PKBCCOMPSESU.GETENABLETIMEBYCOMP
        (
            RCPRODUCT.SESUNUSE,
            INUCOMPONENTTYPE,
            INUCOMPONENTSERV,
            RCCONSUMPTIONPERIOD.PECSFECI,
            RCCONSUMPTIONPERIOD.PECSFECF,
            TBCOMPONENTS
        );

        STD('Cantidad de Componentes ['||TBCOMPONENTS.COUNT|| ']');

        
        NUCOMPINDEX := TBCOMPONENTS.FIRST ;
        NUPUBLICPOWCONS:= 0;

        LOOP
            EXIT WHEN NUCOMPINDEX IS NULL ;
            
            
            
            
            
            NUPUBLICPOWCONS := TBCOMPONENTS(NUCOMPINDEX).NUCMSSCANT*NUVLRAFORODIA*
                               TBCOMPONENTS(NUCOMPINDEX).NUDIAS + NUPUBLICPOWCONS;

            NUCOMPINDEX := TBCOMPONENTS.NEXT (NUCOMPINDEX) ;
        END LOOP;

        
        CALCPARTIALCONSUMPTION
        (
            RCCURRENTREADING,
            RCCONSUMPTIONPERIOD,
            NUPUBLICPOWCONS,
            NUPARTIALCONSUMPTION,
            NUCONSUMPTIONDAYS
        );

        ONUCONSUMPTION  := NUPUBLICPOWCONS;
        OSBCALCFUNCTION := CSBOBTECOAP;
        ONUCONSUMMETHOD := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO;

        
        RCCONSUMPTIONREG.NUPRODUCT             := RCPRODUCT.SESUNUSE;
        RCCONSUMPTIONREG.NUCONSUMPTIONTYPE     := RCACTIVERULE.RMVCTICO;
        RCCONSUMPTIONREG.NUMEASUREELEMENT      := RCCURRENTREADING.LEEMELME;
        RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD   := RCCONSUMPTIONPERIOD.PECSCONS;
        RCCONSUMPTIONREG.NUCALCMETHOD          := ONUCONSUMMETHOD;
        RCCONSUMPTIONREG.SBCALCFUNC            := OSBCALCFUNCTION;
        RCCONSUMPTIONREG.NURULEID              := RCACTIVERULE.RMVCIDRE;
        RCCONSUMPTIONREG.NUCONSUMPTIONDAYS     := NUCONSUMPTIONDAYS;
        RCCONSUMPTIONREG.NUQUALIFICATION       := NULL;
        RCCONSUMPTIONREG.NUCONSUMPTION         := ONUCONSUMPTION;

        
        REGISTERSELECTIVECONS(RCCONSUMPTIONREG,OSBCALCFUNCTION);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END GENPUBLICPOWERCONS;


   


















    PROCEDURE ASSIGNCONSUPTION
    (
        ISBCONSUMPTIONSOURCE IN CONSSESU.COSSFUFA%TYPE
    )
    IS
    BEGIN
        STD('BEGIN CM_BOEstimateServices.AssignConsuption',90);

        CM_BOCONSUMPTIONENGINE.SETCONSUMPTIONSOURCE(ISBCONSUMPTIONSOURCE);

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END ASSIGNCONSUPTION;
    
    
































    PROCEDURE CALCPARTIALCONSUMPTION
    (
        IRCCURRENTREADING       IN  LECTELME%ROWTYPE,
        IRCCURRENTPERIOD        IN  PERICOSE%ROWTYPE,
        INUCONSUMPTION          IN  CONSSESU.COSSCOCA%TYPE,
        ONUPARTIALCONSUMPTION   OUT CONSSESU.COSSCOCA%TYPE,
        ONUCONSUMPTIONDAYS      OUT CONSSESU.COSSDICO%TYPE
    )
    IS
        
        
        
        NUCURRENTPERDAYS        NUMBER;
        NUCONSPERDAY            NUMBER;
        DTINITIALCONSDATE       LECTELME.LEEMFELE%TYPE;
        
        
        RCLASTVALIDREADING      CM_TYOBREADINGS;
        RCPREVIOUSREADING       CM_TYOBREADINGS;
        NUDAYSSINCELVR          NUMBER;
        NUDAYSSINCEPREVREAD     NUMBER;


    BEGIN
        STD('BEGIN CM_BOEstimateServices.CalcPartialConsumption',90);
        STD('-- Calc Partial Consumption. Base['||INUCONSUMPTION||']--');

        NUCURRENTPERDAYS := TRUNC(IRCCURRENTPERIOD.PECSFECF) -
                            TRUNC(IRCCURRENTPERIOD.PECSFECI) + 1;
                            
        
        
        
        
        IF ( IRCCURRENTREADING.LEEMCONS IS NULL ) THEN
        
            STD('No Reading Available. Full Period Estimation');
            ONUPARTIALCONSUMPTION := INUCONSUMPTION;
            ONUCONSUMPTIONDAYS    := NUCURRENTPERDAYS;

            STD('C['||ONUPARTIALCONSUMPTION||'] D['||ONUCONSUMPTIONDAYS||']');
            RETURN;
        
        END IF;


        
        
        
        CM_BOMEASCONSUMPTIONS.CHECKFORMISSINGREADS(IRCCURRENTREADING);
        CM_BOMEASCONSUMPTIONS.GETPRODREADINGSINFO
        (
            IRCCURRENTREADING,          
            RCLASTVALIDREADING,         
            RCPREVIOUSREADING,          
            NUDAYSSINCELVR,             
            NUDAYSSINCEPREVREAD         
        );

        
        NUCONSPERDAY := INUCONSUMPTION / NUCURRENTPERDAYS;
        
        IF NUDAYSSINCEPREVREAD > 999 THEN
            ONUCONSUMPTIONDAYS := 999;
        ELSE
            ONUCONSUMPTIONDAYS := NUDAYSSINCEPREVREAD;
        END IF;
        
        ONUPARTIALCONSUMPTION := NUCONSPERDAY * ONUCONSUMPTIONDAYS;


        STD('CurrPerDays['||NUCURRENTPERDAYS||'] PartialDays['||ONUCONSUMPTIONDAYS||'] PartialCONS['||ONUPARTIALCONSUMPTION||']');
    EXCEPTION
        WHEN ZERO_DIVIDE THEN
            STD('CalcPartialConsumption: Error! Divisi?n por Cero.');
            ONUCONSUMPTIONDAYS    := NULL;
            ONUPARTIALCONSUMPTION := NULL;
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END CALCPARTIALCONSUMPTION;

    























    PROCEDURE REGISTERSELECTIVECONS
    (
        IRCCONSUMPTION          IN OUT NOCOPY CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION,
        ISBCONSUMPTIONSOURCE    IN CONSSESU.COSSFUFA%TYPE
    )
    IS
    BEGIN
        STD('BEGIN CM_BOEstimateServices.RegisterSelectiveCons',90);

        
        
        
        IF ( IRCCONSUMPTION.NUCONSUMPTION < 0 OR
             IRCCONSUMPTION.NUCONSUMPTION IS NULL ) THEN
        
            STD('Trash! No consumption registered');
            RETURN;
        
        END IF;
        
        
        
        
        
        BREAKPREVREADRECOVERY(IRCCONSUMPTION,ISBCONSUMPTIONSOURCE);


        
        
        
        REGISTERSELECTIVECONS_
        (
            IRCCONSUMPTION,         
            ISBCONSUMPTIONSOURCE    
        );

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END REGISTERSELECTIVECONS;
    
    




















    PROCEDURE REGISTERSELECTIVECONS_
    (
        IRCCONSUMPTION          IN OUT NOCOPY CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION,
        ISBCONSUMPTIONSOURCE    IN CONSSESU.COSSFUFA%TYPE
    )
    IS
    BEGIN
        STD('BEGIN CM_BOEstimateServices.RegisterSelectiveCons_',90);

        
        
        
        IF ( CM_BOTICOACRE.FBOISREACTIVE( IRCCONSUMPTION.NUCONSUMPTIONTYPE) ) THEN
        
            
            IRCCONSUMPTION.SBREGISTERMODE    :=
            CM_BOCONSUMPTIONENGINE.CSBREADINGONLY_REGISTER;
        ELSE
            
            IRCCONSUMPTION.SBREGISTERMODE    :=
            CM_BOCONSUMPTIONENGINE.CSBNORMAL_REGISTER;
        
        END IF;

        
        
        
        CM_BOCONSUMPTIONENGINE.REGISTERCONSUMPTION
        (
            IRCCONSUMPTION,      
            ISBCONSUMPTIONSOURCE 
        );

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END REGISTERSELECTIVECONS_;


    

























    PROCEDURE ADJUSTCONSBYDAYSOFUSE
    (
        ISBCONSUMPTIONSOURCE IN CONSSESU.COSSFUFA%TYPE
    )
    IS
        
        
        
        RCCURRENTREADING        LECTELME%ROWTYPE;
        RCORDER                 DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT               SERVSUSC%ROWTYPE;
        NUACTIVITY              REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE            REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD     PERICOSE%ROWTYPE;
        RCORDECRIT              CM_ORDECRIT%ROWTYPE;

        TBCONSUMPTIONS          CM_BOCONSUMPTIONENGINE.TYTBUPLOADEDCONS;
        NUIDX                   NUMBER;

        RCPRODUCTINFO           DAPR_PRODUCT.STYPR_PRODUCT;
        RCCURRENTPERIOD         PERICOSE%ROWTYPE;
        NUDAYSOFSERVICEUSE      NUMBER;
        NUPERIODDAYS            NUMBER;

        
        
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        PROCEDURE ADJUSTCONSUMPTION
        IS
            
            
            
            NUADJCONSUMPTION    NUMBER;
            RCCONSUMPTION       CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;

        BEGIN
            STD('BEGIN CM_BOEstimateServices.AdjustConsByDaysofUse.AdjustConsumption',90);
            STD('Use of Service['||NUDAYSOFSERVICEUSE * 100 / NUPERIODDAYS ||'%]');

            NUADJCONSUMPTION := NUDAYSOFSERVICEUSE * TBCONSUMPTIONS(NUIDX).NUCONSUMPTION /
                                NUPERIODDAYS;

            RCCONSUMPTION                 := TBCONSUMPTIONS(NUIDX);
            RCCONSUMPTION.SBCALCFUNC      := CSBAJUSDIUS||' (D?as '||NUDAYSOFSERVICEUSE||')';
            RCCONSUMPTION.NUCONSUMPTION   := NUADJCONSUMPTION;                                   

            
            CM_BOCONSUMPTIONENGINE.REGISTERCONSUMPTION(RCCONSUMPTION, ISBCONSUMPTIONSOURCE);

        EXCEPTION
            WHEN ZERO_DIVIDE THEN
                STD('''Error! El per?odo de consumo tiene cero d?as.''');
            WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                RAISE;
            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

        END ADJUSTCONSUMPTION;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.AdjustConsByDaysofUse',90);
        STD('-------------------------------------------');
        STD('-- Ajuste Consumos por D?as de Ocupaci?n --');
        STD('-------------------------------------------');

        
        CM_BOCONSUMPTIONENGINE.SIMULATIONSETDOWNCONS (ISBCONSUMPTIONSOURCE);

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,   
            RCORDER,            
            RCPRODUCT,          
            NUACTIVITY,         
            RCACTIVERULE,       
            RCCONSUMPTIONPERIOD 
        );


        
        
        
        TBCONSUMPTIONS :=
        CM_BOCONSUMPTIONENGINE.FTBGETREGCONSMEMORYDATA(ISBCONSUMPTIONSOURCE);
        STD('Source ['||ISBCONSUMPTIONSOURCE||'] Total Regs.['||TBCONSUMPTIONS.COUNT||']');


        NUIDX := TBCONSUMPTIONS.FIRST;
        LOOP
            EXIT WHEN ( NUIDX IS NULL );
            STD('-- * * Processing ['||NUIDX                            ||
                '] Sesu['    ||TBCONSUMPTIONS(NUIDX).NUPRODUCT          ||
                '] Cons['    ||TBCONSUMPTIONS(NUIDX).NUCONSUMPTION      ||
                '] Peri['    ||TBCONSUMPTIONS(NUIDX).NUCONSUMPTIONPERIOD||'] * * --');

            RCPRODUCTINFO :=
            DAPR_PRODUCT.FRCGETRECORD(TBCONSUMPTIONS(NUIDX).NUPRODUCT);

            RCCURRENTPERIOD :=
            PKTBLPERICOSE.FRCGETRECORD(TBCONSUMPTIONS(NUIDX).NUCONSUMPTIONPERIOD);

            NUDAYSOFSERVICEUSE :=
            AB_BOPREMISE.FNUOCCUPIEDDAYS
            (
                RCPRODUCTINFO.ADDRESS_ID,        
                AB_BOCONSTANTS.CSBOCCUPIED,      
                TRUNC(RCCURRENTPERIOD.PECSFECI), 
                TRUNC(RCCURRENTPERIOD.PECSFECF)  
            );

            NUPERIODDAYS := ( TRUNC(RCCURRENTPERIOD.PECSFECF) - TRUNC(RCCURRENTPERIOD.PECSFECI) ) + 1;
            STD('Days of Use['  ||NUDAYSOFSERVICEUSE||'] Period Days['||NUPERIODDAYS||']');

            
            
            
            
            IF ( NUDAYSOFSERVICEUSE < NUPERIODDAYS ) THEN
            
                
                
                
                
                ADJUSTCONSUMPTION;
            ELSE
                STD('No Adjust Needed!!');
            
            END IF;

            NUIDX := TBCONSUMPTIONS.NEXT( NUIDX );
        END LOOP;

        
        CM_BOCONSUMPTIONENGINE.ROLLBACKSIMULATION;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            CM_BOCONSUMPTIONENGINE.ROLLBACKSIMULATION;
            RAISE;
        WHEN OTHERS THEN
            
            CM_BOCONSUMPTIONENGINE.ROLLBACKSIMULATION;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

    END ADJUSTCONSBYDAYSOFUSE;

    























    FUNCTION FNUCALCINDIVIDAVGCONS
    (
        INUPRODUCT              IN  CONSSESU.COSSSESU%TYPE,
        INUCONSUMPTIONTYPE      IN  CONSSESU.COSSTCON%TYPE,
        INUCONSUMPTIONPERIOD    IN  CONSSESU.COSSPECS%TYPE,
        INUPERIODSTOCONSIDER    IN  NUMBER,
        ISBINCLUDECURRPERIOD    IN  VARCHAR2
    )
    RETURN CONSSESU.COSSCOCA%TYPE
    IS
        
        
        
        NUAVERAGECONSUMPTION    CONSSESU.COSSCOCA%TYPE;
        
    BEGIN
        STD('BEGIN CM_BOEstimateServices.fnuCalcIndividAvgCons',90);
        STD('Calculando consumo promedio...');
        
        CALCINDIVIDAVERAGECONS_
        (
            INUPRODUCT,             
            INUCONSUMPTIONTYPE,     
            INUCONSUMPTIONPERIOD,   
            INUPERIODSTOCONSIDER,   
            ISBINCLUDECURRPERIOD,   
            NUAVERAGECONSUMPTION    
        );

        STD('Consumo promedio ['||NUAVERAGECONSUMPTION||']');
        RETURN NUAVERAGECONSUMPTION;
    
    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
          
    END FNUCALCINDIVIDAVGCONS;

    



















    FUNCTION FNUINFOAVGCONSOFSUBCAT
    (
        ISBLOCTOKEN IN  GE_GEOGRA_LOCA_TYPE.TOKEN%TYPE
    )
    RETURN CONSSESU.COSSCOCA%TYPE
    IS
        
        
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSPERIOD        PERICOSE%ROWTYPE;

        
        NUAVGCONSUMPTION    CONSSESU.COSSCOCA%TYPE;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.fnuInfoAvgConsOfSubCat',90);
        STD('------------------------------------------');
        STD('-- INFO - Consumo Promedio Subcategor?a --');
        STD('------------------------------------------');

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSPERIOD
        );
        STD('Prod['      ||RCPRODUCT.SESUNUSE   ||
            '] ConsType['||RCACTIVERULE.RMVCTICO||
            '] Period['  ||RCCONSPERIOD.PECSCONS||
            '] Token ['  ||ISBLOCTOKEN          ||']');


        
        GETAVERAGECONSOFSUBCAT_
        (
           RCPRODUCT,               
           RCACTIVERULE.RMVCTICO,   
           RCCONSPERIOD,            
           ISBLOCTOKEN,             
           NUAVGCONSUMPTION         
        );

        STD('Average Consumption ['||NUAVGCONSUMPTION||']');
        RETURN NUAVGCONSUMPTION;

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END FNUINFOAVGCONSOFSUBCAT;

    




















    FUNCTION FNUINFOINDIVIDAVERAGECONS
    RETURN CONSSESU.COSSCOCA%TYPE
    IS
        
        
        
        RCCURRENTREADING    LECTELME%ROWTYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCPRODUCT           SERVSUSC%ROWTYPE;
        NUACTIVITY          REMEVACO.RMVCACTI%TYPE;
        RCACTIVERULE        REMEVACO%ROWTYPE;
        RCCONSUMPTIONPERIOD PERICOSE%ROWTYPE;

        
        NUINDAVGCONSUMPTION CONSSESU.COSSCOCA%TYPE;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.fnuInfoIndividAverageCons',90);
        STD('----------------------------------------------------------------------------');
        STD('-- INFO - Consumo Promedio Individual de los ?ltimos meses parametrizados --');
        STD('----------------------------------------------------------------------------');

        
        CM_BOCONSUMPTIONENGINE.GETENGINEMEMORYDATA
        (
            RCCURRENTREADING,
            RCORDER,
            RCPRODUCT,
            NUACTIVITY,
            RCACTIVERULE,
            RCCONSUMPTIONPERIOD
        );
        STD('Prod['      ||RCPRODUCT.SESUNUSE          ||
            '] ConsType['||RCACTIVERULE.RMVCTICO       ||
            '] Period['  ||RCCONSUMPTIONPERIOD.PECSCONS||']');

        
        NUINDAVGCONSUMPTION :=
        PKBCHICOPRPM.GETLASTAVGCONBYPRODUCT
        (
            RCPRODUCT.SESUNUSE,
            RCACTIVERULE.RMVCTICO,
            RCCONSUMPTIONPERIOD.PECSCONS
        );
        
        STD('Individual Average Consumption ['||NUINDAVGCONSUMPTION||']');
        RETURN NUINDAVGCONSUMPTION;
    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
          
    END FNUINFOINDIVIDAVERAGECONS;

    





























































    PROCEDURE BREAKPREVREADRECOVERY
    (
        IRCCONSUMPTION          IN  CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION,
        ISBCONSUMPTIONSOURCE    IN CONSSESU.COSSFUFA%TYPE
    )
    IS
        
        
        
        RCASSOCIATEDREADING     LECTELME%ROWTYPE;

        
        
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        PROCEDURE SAVECONSUMPTION
        (
            IRCBREAKREADING IN  LECTELME%ROWTYPE,
            ITBBREAKINGCONS IN  TYTBBREAKUPCONS,
            INUACTIVERULE   IN  REMEVACO.RMVCCONS%TYPE,
            ISBBREAKSOURCE  IN  CONSSESU.COSSFUFA%TYPE
        )
        IS
            
            
            
            RCCONSUMPTIONREG    CM_BOCONSUMPTIONENGINE.TYRCCONSUMPTION;
            NUIDX               BINARY_INTEGER;

        BEGIN
            STD('BEGIN CM_BOEstimateServices.BreakPrevReadRecovery.SaveConsumption',90);
            STD('Registering Consumptions...');


            NUIDX := ITBBREAKINGCONS.LAST;
            LOOP
                EXIT WHEN ( NUIDX IS NULL );


                RCCONSUMPTIONREG.NUPRODUCT              := IRCBREAKREADING.LEEMSESU;             
                RCCONSUMPTIONREG.NUCONSUMPTIONTYPE      := IRCBREAKREADING.LEEMTCON;             
                RCCONSUMPTIONREG.NUMEASUREELEMENT       := IRCBREAKREADING.LEEMELME;             

                RCCONSUMPTIONREG.NUCONSUMPTIONPERIOD    := ITBBREAKINGCONS(NUIDX).COSSPECS;      
                RCCONSUMPTIONREG.NUCALCMETHOD           := ITBBREAKINGCONS(NUIDX).PREV_COSSMECC; 
                RCCONSUMPTIONREG.SBCALCFUNC             := ITBBREAKINGCONS(NUIDX).PREV_COSSFUFA; 
                RCCONSUMPTIONREG.NUCONSUMPTIONDAYS      := ITBBREAKINGCONS(NUIDX).PREV_COSSDICO; 
                RCCONSUMPTIONREG.NUQUALIFICATION        := ITBBREAKINGCONS(NUIDX).PREV_COSSCAVC; 
                RCCONSUMPTIONREG.NUCONSUMPTION          := ITBBREAKINGCONS(NUIDX).PREV_COSSCOCA; 

                RCCONSUMPTIONREG.NURULEID               := INUACTIVERULE;                        
                RCCONSUMPTIONREG.SBREGISTERMODE         := NULL;                                 


                
                STD('Registering for period ['||ITBBREAKINGCONS(NUIDX).COSSPECS||']');
                REGISTERSELECTIVECONS_(RCCONSUMPTIONREG,ISBBREAKSOURCE);


                NUIDX := ITBBREAKINGCONS.PRIOR( NUIDX );
            END LOOP;

        EXCEPTION
            WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
              RAISE;
            WHEN OTHERS THEN
              PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
              RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

        END SAVECONSUMPTION;


        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        PROCEDURE BREAKRECOVERYPROCESS
        (
            IRCBREAKREADING       IN  LECTELME%ROWTYPE,
            INUACTIVERULE         IN  REMEVACO.RMVCCONS%TYPE,
            ISBCONSUMPTIONSOURCE  IN  CONSSESU.COSSFUFA%TYPE
        )
        IS
            
            
            
            RCCONSUMPTIONINFO       CM_BCMEASCONSUMPTIONS.TYRCCONSBASICDATA;
            RCPERIODINFO            CM_BCMEASCONSUMPTIONS.TYRCPERIODS;
            NUIDX                   BINARY_INTEGER;

            TBCONSUMPTIONS          TYTBBREAKUPCONS;

        BEGIN
            STD('BEGIN CM_BOEstimateServices.BreakPrevReadRecovery.BreakRecoveryProcess',90);

            
            
            
            TBCONSUMPTIONS.DELETE;
            CM_BCMEASCONSUMPTIONS.GETCURRPREVCONSINFO
            (
                IRCBREAKREADING.LEEMSESU,  
                IRCBREAKREADING.LEEMPECS,  
                IRCBREAKREADING.LEEMELME,  
                IRCBREAKREADING.LEEMTCON,  
                RCCONSUMPTIONINFO          
            );
            STD('Curent: Mecc['||RCCONSUMPTIONINFO.CURR_COSSMECC||
                '] Fufa ['||RCCONSUMPTIONINFO.CURR_COSSFUFA     ||']');

            
            
            
            
            
            IF ( RCCONSUMPTIONINFO.CURR_COSSMECC IS NULL                                         OR
                 RCCONSUMPTIONINFO.CURR_COSSMECC != CM_BOCONSTANTS.CNUBIL_MECC_DIF_LECTURA       OR
                 INSTR(RCCONSUMPTIONINFO.CURR_COSSFUFA,CM_BOCALCCONSUMPSERVS.CSBCALCCOLA,1) > 0  OR
                 INSTR(RCCONSUMPTIONINFO.CURR_COSSFUFA,CM_BOCALCCONSUMPSERVS.CSBCONSLAFC,1) > 0 ) THEN
            
                STD('Current Cons did not Recover. No break up needed!');
                RETURN;
            
            END IF;


            
            RCPERIODINFO :=
            CM_BOMEASCONSUMPTIONS.FRCGETPERIODINFORMATION
            (
                IRCBREAKREADING.LEEMSESU,  
                IRCBREAKREADING.LEEMTCON,  
                IRCBREAKREADING.LEEMPECS   
            );


            STD('Max Periods['||GNUMAX_REC_ALLOWED||']');

            NUIDX := 1;
            LOOP
                
                IF ( NUIDX > GNUMAX_REC_ALLOWED ) THEN
                
                    STD('Maximum Allowed Periods Reached! EXIT!');
                    EXIT;
                
                END IF;

                
                IF ( RCPERIODINFO.NUPRIOR_PERIOD IS NULL ) THEN
                
                    STD('No previous Period. EXIT!');
                    EXIT;
                
                END IF;

                
                RCPERIODINFO :=
                CM_BOMEASCONSUMPTIONS.FRCGETPERIODINFORMATION
                (
                    IRCBREAKREADING.LEEMSESU,   
                    IRCBREAKREADING.LEEMTCON,   
                    RCPERIODINFO.NUPRIOR_PERIOD 
                );

                STD('''Loop -> Period ['||RCPERIODINFO.NUCURRENT_PERIOD||
                    '] Prev['           ||RCPERIODINFO.NUPRIOR_PERIOD  ||']''');

                
                CM_BCMEASCONSUMPTIONS.GETCURRPREVCONSINFO
                (
                    IRCBREAKREADING.LEEMSESU,      
                    RCPERIODINFO.NUCURRENT_PERIOD, 
                    IRCBREAKREADING.LEEMELME,      
                    IRCBREAKREADING.LEEMTCON,      
                    RCCONSUMPTIONINFO              
                );

                STD('Curr Mecc['||RCCONSUMPTIONINFO.CURR_COSSMECC||
                 '] Prev Mecc[' ||RCCONSUMPTIONINFO.PREV_COSSMECC||']');

                
                IF ( RCCONSUMPTIONINFO.CURR_COSSMECC =
                        CM_BOCONSTANTS.CNUBIL_MECC_DIF_LECTURA ) THEN

                    STD('A new Reading-Dif found on period ['||
                    RCPERIODINFO.NUCURRENT_PERIOD||'] EXIT!');
                    EXIT;
                END IF;

                IF ( RCCONSUMPTIONINFO.PREV_COSSMECC IS NULL ) THEN
                
                    
                    
                    
                    
                    
                    
                    
                    STD('Second Last Consumption does not exist. Creating cero consumption!');
                    RCCONSUMPTIONINFO.PREV_COSSMECC := CM_BOCONSTANTS.CNUBIL_MECC_ESTIMADO; 
                    RCCONSUMPTIONINFO.PREV_COSSFUFA := CSBESTACONS;                         
                    RCCONSUMPTIONINFO.PREV_COSSDICO := RCCONSUMPTIONINFO.CURR_COSSDICO;     
                    RCCONSUMPTIONINFO.PREV_COSSCAVC := NULL;                                
                    RCCONSUMPTIONINFO.PREV_COSSCOCA := 0;                                   
                
                END IF;

                
                
                
                IF ( RCCONSUMPTIONINFO.CURR_COSSMECC =
                     CM_BOCONSTANTS.CNUBIL_MECC_RECUPERADO ) THEN
                
                    STD('Breaking Recovery for period ['||RCPERIODINFO.NUCURRENT_PERIOD||']');
                    TBCONSUMPTIONS(NUIDX) := RCCONSUMPTIONINFO;
                ELSE
                    STD('Disregarding period ['||RCPERIODINFO.NUCURRENT_PERIOD||']');
                
                END IF;

                
                NUIDX := NUIDX + 1;

            END LOOP;


            
            
            
            
            SAVECONSUMPTION
            (
                IRCBREAKREADING,        
                TBCONSUMPTIONS,         
                INUACTIVERULE,          
                ISBCONSUMPTIONSOURCE    
            );

        EXCEPTION
            WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
              RAISE;
            WHEN OTHERS THEN
              PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
              RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

        END BREAKRECOVERYPROCESS;

    BEGIN
        STD('BEGIN CM_BOEstimateServices.BreakPrevReadRecovery',90);
        STD('-------------------------------------------');
        STD('-- Breaking Up previous reading Recovery --');
        STD('-------------------------------------------');

        STD('-- -- Processing Consumption  Prod['||IRCCONSUMPTION.NUPRODUCT          ||
            '] Ctype['                           ||IRCCONSUMPTION.NUCONSUMPTIONTYPE  ||
            '] Elme['                            ||IRCCONSUMPTION.NUMEASUREELEMENT   ||
            '] Per['                             ||IRCCONSUMPTION.NUCONSUMPTIONPERIOD||
            '] -- --');

        RCASSOCIATEDREADING :=
        CM_BCMEASCONSUMPTIONS.FRCGETLASTREADCURRPER
        (
            IRCCONSUMPTION.NUPRODUCT,          
            IRCCONSUMPTION.NUCONSUMPTIONTYPE,  
            IRCCONSUMPTION.NUMEASUREELEMENT,   
            IRCCONSUMPTION.NUCONSUMPTIONPERIOD 
        );
        STD('Reading['||RCASSOCIATEDREADING.LEEMCONS||']'||
            ' Period['||RCASSOCIATEDREADING.LEEMPECS||']');

        
        
        
        
        IF ( RCASSOCIATEDREADING.LEEMCONS IS NULL ) THEN
        
            STD('No break up needed!');
            RETURN;
        
        END IF;

        
        BREAKRECOVERYPROCESS
        (
            RCASSOCIATEDREADING,     
            IRCCONSUMPTION.NURULEID, 
            ISBCONSUMPTIONSOURCE     
        );

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END BREAKPREVREADRECOVERY;

    



















    PROCEDURE SETMAXRECVALUE
    (
        INUVALUE    IN  NUMBER
    )
    IS
    BEGIN
        STD('BEGIN CM_BOEstimateServices.SetMaxRecValue',90);

        GNUMAX_REC_ALLOWED := INUVALUE;
        STD('New Max Recovery Value ['||GNUMAX_REC_ALLOWED||']');

    EXCEPTION
        WHEN LOGIN_DENIED OR  PKCONSTANTE.EXERROR_LEVEL2 THEN
          RAISE;
        WHEN OTHERS THEN
          PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
          RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END SETMAXRECVALUE;

BEGIN

    GNUMAX_REC_ALLOWED := CM_BOCONSTANTS.CNUBIL_RECOVERY_OLD_PRODUCTS;



END LDC_PKGCONPR;
/