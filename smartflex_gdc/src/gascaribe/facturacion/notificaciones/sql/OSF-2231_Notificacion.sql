/***********************************************************
ELABORADO POR:  Juan Gabriel Catuche Giron
EMPRESA:        MVM Ingenieria de Software
FECHA:          Enero 2024 
JIRA:           OSF-2231

Configura notificación para alertar consumos promedidos por política consumo cero Ref OSF-2190

    
    Archivo de entrada 
    ===================
    NA       
    
    Archivo de Salida 
    ===================
    NA
    
    --Modificaciones    
    Fecha           Autor           Descripción
    21/01/2024      jcatuchemvm     OSF-2231: Creación
    
***********************************************************/
declare
    
    csbPlantilla    constant varchar2(200) := 'PLANTILLA_SINLECT_PROMEDIADO';
    csbSentencia    constant varchar2(200) := 'SENTENCIA_CONTRATO';
    csbNotificacion constant varchar2(200) := 'NOTIF_SINLECT_CONSUMO_PROMEDIO';
    
    clsource        clob;
    clxsl           clob; 
    nuSeqXSL        number;
    nuSeqSent       number;
    nuSeqNot        number;
    nuRowCount      number;
    sbComentario    varchar2(2000);
    
    nuerror         number;
    sberror         varchar2(2000);
    raise_continuar exception;
    
    cursor cuPlantilla is
    select * from ge_xsl_template 
    where description = csbPlantilla; 
    
    rcPlantilla     cuPlantilla%rowtype;
    
    cursor cuSentencia is
    select * from ge_statement 
    where name = csbSentencia;
    
    rcSentencia     cuSentencia%rowtype;
    
    cursor cuNotificacion is
    select * from ge_notification
    where description = csbNotificacion;
    
    rcNotificacion  cuNotificacion%rowtype;
    
    cursor cuNotiSentencia (inuSentencia in number,  inuNotificacion in number) is
    select * from ge_notifi_statement
    where statement_id = inuSentencia
    and notification_id = inuNotificacion;
    
    rcNotiSentencia cuNotiSentencia%rowtype;
    
    Procedure pcierraCursor
    IS
    BEGIN
    
        IF(cuPlantilla%isopen) then
            close cuPlantilla;
        END IF;
        
        IF(cuSentencia%isopen) then
            close cuSentencia;
        END IF;
        
        IF(cuNotificacion%isopen) then
            close cuNotificacion;
        END IF;
        
        IF(cuNotiSentencia%isopen) then
            close cuNotiSentencia;
        END IF;
        
        
    end pcierraCursor;

    
begin
    clsource   := '«SIMPLE ELEMENT=SENTENCIA_CONTRATO|NAME=PLANTILLA_CONSUMOCERO»El contrato «CONTRATO» se facturó por promedio por Política de consumo cero Ene-2024.«/SIMPLE»';
    clxsl       := 
    '<?xml version=''1.0'' encoding=''ISO8859_1'' ?>
<!--
  *************************************************************************
  * This file was automatically generated by
  * XSL Generator (XG) version 1.0.
  * (c) Open International Systems Corp, Cali, 2001.
  *
  * !!!!!!!!!!!!!!!!!!!!!!!!!!!! DO NOT MODIFY !!!!!!!!!!!!!!!!!!!!!!!!!!!!
  *
  * Author: Gustavo Cardona Ramirez, OpenFlexIS 5.0 Project.
  *************************************************************************
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"> 
<xsl:output method="text"/>
<!-- ######################################### -->
<!-- TEMPLATE MAIN                             -->
<!-- ######################################### -->
<xsl:template match="/"><xsl:for-each select="/DATAPACKET/SENTENCIA_CONTRATO[last()]">
	<xsl:call-template name="PLANTILLA_CONSUMOCERO"/>
</xsl:for-each>
</xsl:template>
<!-- ######################################### -->
<!-- TEMPLATE TO REGISTRO SIMPLE               -->
<!-- ######################################### -->
<xsl:template name="PLANTILLA_CONSUMOCERO">El contrato <xsl:value-of select="CONTRATO[text()]"/> se factur&#243; por promedio por Pol&#237;tica de consumo cero Ene&#45;2024.</xsl:template>
</xsl:stylesheet> ';

    pcierraCursor;
    
    dbms_output.put_line('Gestión de plantilla');
    begin
        rcPlantilla := null;
        open cuPlantilla;
        fetch cuPlantilla into rcPlantilla;
        close cuPlantilla;
        
        if rcPlantilla.xsl_template_id is null then
            nuSeqXSL := null;
            nuSeqXSL  := SEQ_GE_XSL_TEMPLATE.NEXTVAL;
            insert into ge_xsl_template(xsl_template_id,description,template_source,template_xsl,generation_type)
            values (nuSeqXSL,csbPlantilla,clsource,clxsl,'T');
            
            nuRowcount := sql%rowcount;
            if nuRowcount > 0 then
                dbms_output.put_line('->Plantilla '||csbPlantilla||' insertada');
            else
                sbComentario := 'Error en inserción de plantilla. '||sqlerrm;
                raise raise_continuar;
            end if;
        else
            update ge_xsl_template
            set template_source = clsource, template_xsl = clxsl
            where xsl_template_id = rcPlantilla.xsl_template_id;
            
            nuRowcount := sql%rowcount;
            if nuRowcount > 0 then
                dbms_output.put_line('->Plantilla '||csbPlantilla||' actualizada');
                nuSeqXSL := rcPlantilla.xsl_template_id;
            else
                sbComentario := 'Error en actualización de plantilla. '||sqlerrm;
                raise raise_continuar;
            end if;
            
        end if;
        
    exception
        when raise_continuar then
            raise;
        when others then
            pkg_error.setError;
            pkg_error.getError(nuError,sbError);
            sbComentario := 'Error desconocido en gestión de plantilla. '||sbError;
            raise raise_continuar;
    end;
    
    dbms_output.put_line('Gestión de Sentencia');
    begin
        rcSentencia := null;
        open cuSentencia;
        fetch cuSentencia into rcSentencia;
        close cuSentencia;
        
        if rcSentencia.statement_id is null then
            nuSeqSent := null;
            nuSeqSent  := SEQ_GE_STATEMENT.NEXTVAL;
            insert into ge_statement(statement_id,module_id,description,statement,name)
            values (nuSeqSent,16,'Código de contrato','SELECT :SUBSCRIBER_ID CONTRATO FROM DUAL',csbSentencia);
            
            nuRowcount := sql%rowcount;
            if nuRowcount > 0 then
                dbms_output.put_line('->Sentencia '||csbSentencia||' insertada');
            else
                sbComentario := 'Error en inserción de sentencia. '||sqlerrm;
                raise raise_continuar;
            end if;
        else
            update ge_statement
            set description = 'Código de contrato', statement = 'SELECT :SUBSCRIBER_ID CONTRATO FROM DUAL'
            where statement_id = rcSentencia.statement_id;
            
            nuRowcount := sql%rowcount;
            if nuRowcount > 0 then
                dbms_output.put_line('->Sentencia '||csbSentencia||' actualizada');
                nuSeqSent := rcSentencia.statement_id;
            else
                sbComentario := 'Error en actualización de sentencia. '||sqlerrm;
                raise raise_continuar;
            end if;            
        end if;
    
    exception
        when raise_continuar then
            raise;
        when others then
            pkg_error.setError;
            pkg_error.getError(nuError,sbError);
            sbComentario := 'Error desconocido en gestión de sentencia. '||sbError;
            raise raise_continuar;
    end;
        
    dbms_output.put_line('Gestión de Notificación');
    begin
        rcNotificacion := null;
        open cuNotificacion;
        fetch cuNotificacion into rcNotificacion;
        close cuNotificacion;
        
        if rcNotificacion.notification_id is null then
            nuSeqNot := null;
            nuSeqNot  := SEQ_GE_NOTIFICATION.NEXTVAL;
            insert into ge_notification(notification_id,notification_type_id,xsl_template_id,description,format_type,execution_mode,report_log,parameters,attempt_number,origin_module_id,target_module_id,notification_class_id)
            values (nuSeqNot,52,nuSeqXSL,csbNotificacion,'T','L','Y','ENTITY_ID=3203',1,16,16,52);
            
            nuRowcount := sql%rowcount;
            if nuRowcount > 0 then
                dbms_output.put_line('->Notificación '||csbNotificacion||' insertada');
            else
                sbComentario := 'Error en inserción de notificación. '||sqlerrm;
                raise raise_continuar;
            end if;
        else
            update ge_notification
            set notification_type_id = 52, xsl_template_id = nuSeqXSL,format_type = 'T',execution_mode = 'L',report_log = 'Y',parameters = 'ENTITY_ID=3203',attempt_number = 1,origin_module_id = 16,target_module_id = 16, notification_class_id = 52
            where notification_id = rcNotificacion.notification_id;
            
            nuRowcount := sql%rowcount;
            if nuRowcount > 0 then
                dbms_output.put_line('->Notificación '||csbNotificacion||' actualizada');
                nuSeqNot := rcNotificacion.notification_id;
            else
                sbComentario := 'Error en actualización de notificación. '||sqlerrm;
                raise raise_continuar;
            end if;            
        end if;
    exception
        when raise_continuar then
            raise;
        when others then
            pkg_error.setError;
            pkg_error.getError(nuError,sbError);
            sbComentario := 'Error desconocido en gestión de notificación. '||sbError;
            raise raise_continuar;
    end;
        
    dbms_output.put_line('Gestión de Sentencia por notificación');
    begin
        rcNotiSentencia := null;
        open cuNotiSentencia(nuSeqSent,nuSeqNot);
        fetch cuNotiSentencia into rcNotiSentencia;
        close cuNotiSentencia;
        
        if rcNotiSentencia.notification_id is null then
            insert into ge_notifi_statement(statement_id,notification_id,sentences_type,exe_sequence)
            values (nuSeqSent,nuSeqNot,'S',1);
            
            nuRowcount := sql%rowcount;
            if nuRowcount > 0 then
                dbms_output.put_line('->Sentencia por notificación '||csbNotificacion||' insertada');
            else
                sbComentario := 'Error en inserción de sentencia por notificación. '||sqlerrm;
                raise raise_continuar;
            end if;
        else
            update ge_notifi_statement
            set sentences_type = 'S', exe_sequence = 1
            where statement_id = nuSeqSent and notification_id = nuSeqNot;
            
            nuRowcount := sql%rowcount;
            if nuRowcount > 0 then
                dbms_output.put_line('->Sentencia por notificación '||csbNotificacion||' actualizada');
                nuSeqNot := rcNotiSentencia.notification_id;
            else
                sbComentario := 'Error en actualización de sentencia por notificación. '||sqlerrm;
                raise raise_continuar;
            end if;            
        end if;
    exception
        when raise_continuar then
            raise;
        when others then
            pkg_error.setError;
            pkg_error.getError(nuError,sbError);
            sbComentario := 'Error desconocido en gestión de sentencia por notificación. '||sbError;
            raise raise_continuar;
    end;
    
    commit;

exception
    when raise_continuar then
        rollback;
        dbms_output.put_line(sbComentario);
end;
/
