BEGIN
	

    MERGE INTO OPEN.LDC_PROCEDIMIENTO_OBJ A USING
    (SELECT
    10376 as TASK_TYPE_ID,
    NULL as CAUSAL_ID,
    UPPER('prcRegisExencionCobro') as PROCEDIMIENTO,
    'REGISTRA EXENCIÓN DE COBRO EN FACTURA' as DESCRIPCION,
    1 as ORDEN_EJEC,
    'S' as ACTIVO
    FROM DUAL) B
    ON (A.TASK_TYPE_ID = B.TASK_TYPE_ID)
    WHEN NOT MATCHED THEN 
    INSERT (
    TASK_TYPE_ID, CAUSAL_ID, PROCEDIMIENTO, DESCRIPCION, ORDEN_EJEC, 
    ACTIVO)
    VALUES (
    B.TASK_TYPE_ID, B.CAUSAL_ID, B.PROCEDIMIENTO, B.DESCRIPCION, B.ORDEN_EJEC, 
    B.ACTIVO)
    WHEN MATCHED THEN
    UPDATE SET 
    A.CAUSAL_ID = B.CAUSAL_ID,
    A.PROCEDIMIENTO = B.PROCEDIMIENTO,
    A.DESCRIPCION = B.DESCRIPCION,
    A.ORDEN_EJEC = B.ORDEN_EJEC,
    A.ACTIVO = B.ACTIVO;


    MERGE INTO OPEN.LDC_PROCEDIMIENTO_OBJ A USING
    (SELECT
    10388 as TASK_TYPE_ID,
    NULL as CAUSAL_ID,
    UPPER('prcRegisExencionCobro') as PROCEDIMIENTO,
    'REGISTRA EXENCIÓN DE COBRO EN FACTURA' as DESCRIPCION,
    1 as ORDEN_EJEC,
    'S' as ACTIVO
    FROM DUAL) B
    ON (A.TASK_TYPE_ID = B.TASK_TYPE_ID)
    WHEN NOT MATCHED THEN 
    INSERT (
    TASK_TYPE_ID, CAUSAL_ID, PROCEDIMIENTO, DESCRIPCION, ORDEN_EJEC, 
    ACTIVO)
    VALUES (
    B.TASK_TYPE_ID, B.CAUSAL_ID, B.PROCEDIMIENTO, B.DESCRIPCION, B.ORDEN_EJEC, 
    B.ACTIVO)
    WHEN MATCHED THEN
    UPDATE SET 
    A.CAUSAL_ID = B.CAUSAL_ID,
    A.PROCEDIMIENTO = B.PROCEDIMIENTO,
    A.DESCRIPCION = B.DESCRIPCION,
    A.ORDEN_EJEC = B.ORDEN_EJEC,
    A.ACTIVO = B.ACTIVO;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || sqlerrm);
END;
/