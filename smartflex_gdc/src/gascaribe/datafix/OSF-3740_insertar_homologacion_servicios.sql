declare
 nuConta  NUMBER;
 
 CURSOR cuExiste(fsbObjeto VARCHAR2) IS
  SELECT COUNT(1)
  FROM HOMOLOGACION_SERVICIOS
  WHERE SERVICIO_ORIGEN = fsbObjeto; 
  
BEGIN

OPEN cuExiste(	'PKTBLFACTURA.FRCGETRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FRCGETRECORD'	,	'Obtiene el registro'	,	'ADM_PERSON'	,	'PKG_FACTURA.FRCOBTREGISTRO'	,	'Obtiene el registro',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FBLEXISTE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FBLEXISTE'	,	' Retorna verdadero si existe el registro'	,	'ADM_PERSON'	,	'PKG_FACTURA.FBLEXISTE'	,	' Retorna verdadero si existe el registro',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.ACCKEY'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.ACCKEY'	,	' Levanta excepción si el registro NO existe'	,	'ADM_PERSON'	,	'PKG_FACTURA.PRVALEXISTE'	,	' Levanta excepción si el registro NO existe',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTSUSC'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTSUSC'	,	' Obtiene el valor de la columna FACTSUSC'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTSUSC'	,	' Obtiene el valor de la columna FACTSUSC',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTPEFA'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTPEFA'	,	' Obtiene el valor de la columna FACTPEFA'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTPEFA'	,	' Obtiene el valor de la columna FACTPEFA',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTDEPA'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTDEPA'	,	' Obtiene el valor de la columna FACTDEPA'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTDEPA'	,	' Obtiene el valor de la columna FACTDEPA',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTLOCA'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTLOCA'	,	' Obtiene el valor de la columna FACTLOCA'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTLOCA'	,	' Obtiene el valor de la columna FACTLOCA',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTVAAP'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTVAAP'	,	' Obtiene el valor de la columna FACTVAAP'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTVAAP'	,	' Obtiene el valor de la columna FACTVAAP',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FDTGETFACTFEGE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FDTGETFACTFEGE'	,	' Obtiene el valor de la columna FACTFEGE'	,	'ADM_PERSON'	,	'PKG_FACTURA.FDTOBTFACTFEGE'	,	' Obtiene el valor de la columna FACTFEGE',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FSBGETFACTTERM'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FSBGETFACTTERM'	,	' Obtiene el valor de la columna FACTTERM'	,	'ADM_PERSON'	,	'PKG_FACTURA.FSBOBTFACTTERM'	,	' Obtiene el valor de la columna FACTTERM',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTUSUA'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTUSUA'	,	' Obtiene el valor de la columna FACTUSUA'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTUSUA'	,	' Obtiene el valor de la columna FACTUSUA',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTPROG'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTPROG'	,	' Obtiene el valor de la columna FACTPROG'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTPROG'	,	' Obtiene el valor de la columna FACTPROG',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTCONS'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTCONS'	,	' Obtiene el valor de la columna FACTCONS'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTCONS'	,	' Obtiene el valor de la columna FACTCONS',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTNUFI'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTNUFI'	,	' Obtiene el valor de la columna FACTNUFI'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTNUFI'	,	' Obtiene el valor de la columna FACTNUFI',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTCONF'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTCONF'	,	' Obtiene el valor de la columna FACTCONF'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTCONF'	,	' Obtiene el valor de la columna FACTCONF',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FSBGETFACTPREF'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FSBGETFACTPREF'	,	' Obtiene el valor de la columna FACTPREF'	,	'ADM_PERSON'	,	'PKG_FACTURA.FSBOBTFACTPREF'	,	' Obtiene el valor de la columna FACTPREF',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTCOAE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTCOAE'	,	' Obtiene el valor de la columna FACTCOAE'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTCOAE'	,	' Obtiene el valor de la columna FACTCOAE',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FDTGETFACTVCAE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FDTGETFACTVCAE'	,	' Obtiene el valor de la columna FACTVCAE'	,	'ADM_PERSON'	,	'PKG_FACTURA.FDTOBTFACTVCAE'	,	' Obtiene el valor de la columna FACTVCAE',NULL); END IF;	
OPEN cuExiste(	'PKTBLFACTURA.FNUGETFACTDICO'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLFACTURA.FNUGETFACTDICO'	,	' Obtiene el valor de la columna FACTDICO'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTFACTDICO'	,	' Obtiene el valor de la columna FACTDICO',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETPACKAGE_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETPACKAGE_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTPACKAGE_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETFINANCING_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETFINANCING_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTFINANCING_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETREQUEST_TYPE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETREQUEST_TYPE'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTREQUEST_TYPE'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETFINANCING_PLAN_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETFINANCING_PLAN_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTFINANCING_PLAN_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETCOMPUTE_METHOD_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETCOMPUTE_METHOD_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTCOMPUTE_METHOD_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETINTEREST_RATE_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETINTEREST_RATE_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTINTEREST_RATE_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FDTGETFIRST_PAY_DATE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FDTGETFIRST_PAY_DATE'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFDTOBTFIRST_PAY_DATE'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETINITIAL_PAYMENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETINITIAL_PAYMENT'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTINITIAL_PAYMENT'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETPERCENT_TO_FINANCE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETPERCENT_TO_FINANCE'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTPERCENT_TO_FINANCE'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETSPREAD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETSPREAD'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTSPREAD'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETQUOTAS_NUMBER'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETQUOTAS_NUMBER'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTQUOTAS_NUMBER'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETQUOTA_VALUE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETQUOTA_VALUE'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTQUOTA_VALUE'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETTAX_FINANCING_ONE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETTAX_FINANCING_ONE'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTTAX_FINANCING_ONE'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETVALUE_TO_FINANCE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETVALUE_TO_FINANCE'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTVALUE_TO_FINANCE'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETDOCUMENT_SUPPORT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETDOCUMENT_SUPPORT'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTDOCUMENT_SUPPORT'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETWAIT_BY_SIGN'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETWAIT_BY_SIGN'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTWAIT_BY_SIGN'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETWAIT_BY_PAYMENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETWAIT_BY_PAYMENT'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTWAIT_BY_PAYMENT'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETCOUPON_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETCOUPON_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTCOUPON_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETWARRANTY_DOCUMENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETWARRANTY_DOCUMENT'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTWARRANTY_DOCUMENT'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FDTGETINIT_PAY_EXPIRATION'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FDTGETINIT_PAY_EXPIRATION'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFDTOBTINIT_PAY_EXPIRATION'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETINTEREST_PERCENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETINTEREST_PERCENT'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTINTEREST_PERCENT'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETSIGNED'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETSIGNED'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTSIGNED'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FDTGETSIGNED_DATE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FDTGETSIGNED_DATE'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFDTOBTSIGNED_DATE'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FNUGETSUBSCRIPTION_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FNUGETSUBSCRIPTION_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFNUOBTSUBSCRIPTION_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETSIGN_FUNCTIONARY'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETSIGN_FUNCTIONARY'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTSIGN_FUNCTIONARY'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETSIGN_TERMINAL'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETSIGN_TERMINAL'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTSIGN_TERMINAL'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETRECORD_FUNCTIONARY'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETRECORD_FUNCTIONARY'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTRECORD_FUNCTIONARY'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FDTGETRECORD_DATE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FDTGETRECORD_DATE'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFDTOBTRECORD_DATE'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETRECORD_TERMINAL'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETRECORD_TERMINAL'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTRECORD_TERMINAL'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETRECORD_PROGRAM'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETRECORD_PROGRAM'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTRECORD_PROGRAM'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FSBGETONLY_EXPIRED_ACC'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FSBGETONLY_EXPIRED_ACC'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFSBOBTONLY_EXPIRED_ACC'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDPACKAGE_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDPACKAGE_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACPACKAGE_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDFINANCING_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDFINANCING_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACFINANCING_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDREQUEST_TYPE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDREQUEST_TYPE'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACREQUEST_TYPE'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDFINANCING_PLAN_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDFINANCING_PLAN_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACFINANCING_PLAN_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDCOMPUTE_METHOD_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDCOMPUTE_METHOD_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACCOMPUTE_METHOD_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDINTEREST_RATE_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDINTEREST_RATE_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACINTEREST_RATE_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDFIRST_PAY_DATE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDFIRST_PAY_DATE'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACFIRST_PAY_DATE'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDINITIAL_PAYMENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDINITIAL_PAYMENT'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACINITIAL_PAYMENT'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDPERCENT_TO_FINANCE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDPERCENT_TO_FINANCE'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACPERCENT_TO_FINANCE'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDSPREAD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDSPREAD'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACSPREAD'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDQUOTAS_NUMBER'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDQUOTAS_NUMBER'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACQUOTAS_NUMBER'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDQUOTA_VALUE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDQUOTA_VALUE'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACQUOTA_VALUE'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDTAX_FINANCING_ONE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDTAX_FINANCING_ONE'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACTAX_FINANCING_ONE'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDVALUE_TO_FINANCE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDVALUE_TO_FINANCE'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACVALUE_TO_FINANCE'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDDOCUMENT_SUPPORT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDDOCUMENT_SUPPORT'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACDOCUMENT_SUPPORT'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDWAIT_BY_SIGN'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDWAIT_BY_SIGN'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACWAIT_BY_SIGN'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDWAIT_BY_PAYMENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDWAIT_BY_PAYMENT'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACWAIT_BY_PAYMENT'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDCOUPON_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDCOUPON_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACCOUPON_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDWARRANTY_DOCUMENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDWARRANTY_DOCUMENT'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACWARRANTY_DOCUMENT'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDINIT_PAY_EXPIRATION'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDINIT_PAY_EXPIRATION'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACINIT_PAY_EXPIRATION'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDINTEREST_PERCENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDINTEREST_PERCENT'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACINTEREST_PERCENT'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDSIGNED'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDSIGNED'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACSIGNED'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDSIGNED_DATE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDSIGNED_DATE'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACSIGNED_DATE'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDSUBSCRIPTION_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDSUBSCRIPTION_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACSUBSCRIPTION_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDSIGN_FUNCTIONARY'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDSIGN_FUNCTIONARY'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACSIGN_FUNCTIONARY'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDSIGN_TERMINAL'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDSIGN_TERMINAL'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACSIGN_TERMINAL'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDRECORD_FUNCTIONARY'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDRECORD_FUNCTIONARY'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACRECORD_FUNCTIONARY'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDRECORD_DATE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDRECORD_DATE'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACRECORD_DATE'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDRECORD_TERMINAL'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDRECORD_TERMINAL'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACRECORD_TERMINAL'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDRECORD_PROGRAM'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDRECORD_PROGRAM'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACRECORD_PROGRAM'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.UPDONLY_EXPIRED_ACC'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.UPDONLY_EXPIRED_ACC'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUEST.PRACONLY_EXPIRED_ACC'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FRCGETRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FRCGETRECORD'	,	'Obtiene el registro y el rowid'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFRCOBTREGISTRORID'	,	'Obtiene el registro y el rowid',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.FBLEXISTE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.FBLEXISTE'	,	' Retorna verdadero si existe el registro'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTFBLEXISTE'	,	' Retorna verdadero si existe el registro',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.ACCKEY'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.ACCKEY'	,	' Levanta excepción si el registro NO existe'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTPRVALEXISTE'	,	' Levanta excepción si el registro NO existe',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.INSRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.INSRECORD'	,	' Inserta un registro'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTPRINSREGISTRO'	,	' Inserta un registro',NULL); END IF;	
OPEN cuExiste(	'DACC_FINANCING_REQUEST.DELRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DACC_FINANCING_REQUEST.DELRECORD'	,	' Borra un registro'	,	'ADM_PERSON'	,	'PKG_CC_FINANCING_REQUESTPRBORREGISTRO'	,	' Borra un registro',NULL); END IF;	
OPEN cuExiste(	'PKBCFACTURA.FNUGETLASTBILLBYSUSC'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKBCFACTURA.FNUGETLASTBILLBYSUSC'	,	'Obtiene la ultima factura de acuerdo a la fecha de generación para el contrato'	,	'ADM_PERSON'	,	'PKG_FACTURA.FNUOBTULTFACTURACONTRATO'	,	'Obtiene la ultima factura de acuerdo a la fecha de generación para el contrato',NULL); END IF;	
OPEN cuExiste(	'RC_BCPAYMENTQUERIES.FNUGETGREATPRIORBILLABLEPROD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'RC_BCPAYMENTQUERIES.FNUGETGREATPRIORBILLABLEPROD'	,	'Obtiene el producto facturable por prioridad de recaudo'	,	'ADM_PERSON'	,	'PKG_BOGESTION_PAGOS.PRCOBTPRODFACTURABLE'	,	'Obtiene el producto facturable por prioridad de recaudo',NULL); END IF;	
OPEN cuExiste(	'PKBCACCOUNTS.FNUGETSUSCRIPTION'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKBCACCOUNTS.FNUGETSUSCRIPTION'	,	'Obtiene el contrato de una cuenta de cobro'	,	'ADM_PERSON'	,	'PKG_BCFACTURACION.PRCOBTCONTRATOCUENTA'	,	'Obtiene el contrato de una cuenta de cobro',NULL); END IF;	
OPEN cuExiste(	'MO_BOWF_PACK_INTERFAC.FBLACTIVITYEXIST'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'MO_BOWF_PACK_INTERFAC.FBLACTIVITYEXIST'	,	'Valida que el flujo se encuentre en la actividad y el estado dados como parametro'	,	'ADM_PERSON'	,	'PKG_FLUJOS.FBLVALACTIVIDADFLUJO'	,	'Valida que el flujo se encuentre en la actividad y el estado dados como parametro',NULL); END IF;	
OPEN cuExiste(	'FA_BOPOLITICAREDONDEO.VALIDAPOLITICACONT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'FA_BOPOLITICAREDONDEO.VALIDAPOLITICACONT'	,	'Valida politica de redondeo por contrato'	,	'ADM_PERSON'	,	'PKG_BOGESTION_FACTURACION.PRCVALPOLIREDONDEOCONTRATO'	,	'Valida politica de redondeo por contrato',NULL); END IF;	
OPEN cuExiste(	'PKBCCUENCUAG.COPYGROUPINFOBYCOUPON'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKBCCUENCUAG.COPYGROUPINFOBYCOUPON'	,	'Inserta datos en entidad CUENCUAG'	,	'ADM_PERSON'	,	'PKG_BOGESTION_PAGOS.PRCREGISTRACUENTACUPONAG'	,	'Inserta datos en entidad CUENCUAG',NULL); END IF;	
OPEN cuExiste(	'RC_BCPAYMENTQUERIES.FNUGETGREATPRIORBILLABLEPROD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'RC_BCPAYMENTQUERIES.FNUGETGREATPRIORBILLABLEPROD'	,	'OBTIENE UN PRODUCTO FACTURABLE POR PRIORIDAD DE RECAUDO PARA EL CONTRATO'	,	'ADM_PERSON'	,	'PKG_CUPON.FNUOBTCUPONPORDOCUMENTO'	,	'OBTIENE UN PRODUCTO FACTURABLE POR PRIORIDAD DE RECAUDO PARA EL CONTRATO',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FSBGETPAYMENT_METHOD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FSBGETPAYMENT_METHOD'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FSBOBTPAYMENT_METHOD'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FNUGETPROCCONS'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FNUGETPROCCONS'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FNUOBTPROCCONS'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FNUGETPACKAGE_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FNUGETPACKAGE_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FNUOBTPACKAGE_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FSBGETREQUIRE_SIGNING'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FSBGETREQUIRE_SIGNING'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FSBOBTREQUIRE_SIGNING'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FSBGETREQUIRE_PAYMENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FSBGETREQUIRE_PAYMENT'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FSBOBTREQUIRE_PAYMENT'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FNUGETCOUPON_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FNUGETCOUPON_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FNUOBTCOUPON_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FSBGETSIGNED'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FSBGETSIGNED'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FSBOBTSIGNED'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FSBGETSIGN_TERMINAL'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FSBGETSIGN_TERMINAL'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FSBOBTSIGN_TERMINAL'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FDTGETSIGN_DATE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FDTGETSIGN_DATE'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FDTOBTSIGN_DATE'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FNUGETPERSON_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FNUGETPERSON_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FNUOBTPERSON_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FNUGETPAYM_AGREEM_PLAN_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FNUGETPAYM_AGREEM_PLAN_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FNUOBTPAYM_AGREEM_PLAN_ID'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDPAYMENT_METHOD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDPAYMENT_METHOD'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACPAYMENT_METHOD'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDPROCCONS'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDPROCCONS'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACPROCCONS'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDPACKAGE_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDPACKAGE_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACPACKAGE_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDREQUIRE_SIGNING'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDREQUIRE_SIGNING'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACREQUIRE_SIGNING'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDREQUIRE_PAYMENT'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDREQUIRE_PAYMENT'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACREQUIRE_PAYMENT'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDCOUPON_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDCOUPON_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACCOUPON_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDSIGNED'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDSIGNED'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACSIGNED'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDSIGN_TERMINAL'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDSIGN_TERMINAL'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACSIGN_TERMINAL'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDSIGN_DATE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDSIGN_DATE'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACSIGN_DATE'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDPERSON_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDPERSON_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACPERSON_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDPAYM_AGREEM_PLAN_ID'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDPAYM_AGREEM_PLAN_ID'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACPAYM_AGREEM_PLAN_ID'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FRCGETRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FRCGETRECORD'	,	'Obtiene registro'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FRCOBTREGISTRO'	,	'Obtiene registro',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.FBLEXISTE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.FBLEXISTE'	,	'Valida si existe'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.FBLEXISTE'	,	'Valida si existe',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.PRVALEXISTE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.PRVALEXISTE'	,	'Valida si existe y genera excepcion'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRVALEXISTE'	,	'Valida si existe y genera excepcion',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.INSRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.INSRECORD'	,	'inserta un registro'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRINSREGISTRO'	,	'inserta un registro',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.DELRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.DELRECORD'	,	'Borra registro'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRBORREGISTRO'	,	'Borra registro',NULL); END IF;	
OPEN cuExiste(	'DAGC_DEBT_NEGOTIATION.UPDRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'DAGC_DEBT_NEGOTIATION.UPDRECORD'	,	'Actualiza registro'	,	'ADM_PERSON'	,	'PKG_GC_DEBT_NEGOTIATION.PRACTREGISTRO'	,	'Actualiza registro',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.FNUGETCUPOVALO'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.FNUGETCUPOVALO'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CUPON.FNUOBTCUPOVALO'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.FDTGETCUPOFECH'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.FDTGETCUPOFECH'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CUPON.FDTOBTCUPOFECH'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.FSBGETCUPOPROG'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.FSBGETCUPOPROG'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CUPON.FSBOBTCUPOPROG'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.FNUGETCUPOCUPA'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.FNUGETCUPOCUPA'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CUPON.FNUOBTCUPOCUPA'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.FNUGETCUPOSUSC'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.FNUGETCUPOSUSC'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CUPON.FNUOBTCUPOSUSC'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.FSBGETCUPOFLPA'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.FSBGETCUPOFLPA'	,	'Obtiene el valor de la columna a partir del ID de tabla'	,	'ADM_PERSON'	,	'PKG_CUPON.FSBOBTCUPOFLPA'	,	'Obtiene el valor de la columna a partir del ID de tabla',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDCUPONUME'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDCUPONUME'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACCUPONUME'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDCUPOTIPO'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDCUPOTIPO'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACCUPOTIPO'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDCUPODOCU'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDCUPODOCU'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACCUPODOCU'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDCUPOVALO'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDCUPOVALO'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACCUPOVALO'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDCUPOFECH'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDCUPOFECH'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACCUPOFECH'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDCUPOPROG'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDCUPOPROG'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACCUPOPROG'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDCUPOCUPA'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDCUPOCUPA'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACCUPOCUPA'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDCUPOSUSC'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDCUPOSUSC'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACCUPOSUSC'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDCUPOFLPA'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDCUPOFLPA'	,	'Actualiza el valor de la columna con el ID'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACCUPOFLPA'	,	'Actualiza el valor de la columna con el ID',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.FRCGETRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.FRCGETRECORD'	,	'Obtiene registro'	,	'ADM_PERSON'	,	'PKG_CUPON.FRCOBTREGISTRO'	,	'Obtiene registro',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.FBLEXISTE'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.FBLEXISTE'	,	'Valida si existe'	,	'ADM_PERSON'	,	'PKG_CUPON.FBLEXISTE'	,	'Valida si existe',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.ACCKEY'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.ACCKEY'	,	'Valida si existe y genera excepcion'	,	'ADM_PERSON'	,	'PKG_CUPON.PRVALEXISTE'	,	'Valida si existe y genera excepcion',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.INSRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.INSRECORD'	,	'inserta un registro'	,	'ADM_PERSON'	,	'PKG_CUPON.PRINSREGISTRO'	,	'inserta un registro',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.DELRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.DELRECORD'	,	'Borra registro'	,	'ADM_PERSON'	,	'PKG_CUPON.PRBORREGISTRO'	,	'Borra registro',NULL); END IF;	
OPEN cuExiste(	'PKTBLCUPON.UPDRECORD'	); FETCH cuExiste INTO nuConta; CLOSE cuExiste; IF nuConta = 0 THEN	insert into homologacion_servicios values(	'OPEN'	,	'PKTBLCUPON.UPDRECORD'	,	'Actualiza registro'	,	'ADM_PERSON'	,	'PKG_CUPON.PRACTREGISTRO'	,	'Actualiza registro',NULL); END IF;	

commit;  
end;
/
