CREATE OR REPLACE PACKAGE adm_person.PKTBLLDC_RESOGURE IS
    /***************************************************************
    Propiedad intelectual de Sincecomp Ltda.
    
    Unidad	     : 
    Descripcion	 : 
    
    Parametro	    Descripcion
    ============	==============================
    
    Historia de Modificaciones
    Fecha   	           Autor            Modificacion
    ====================   =========        ====================
    17/06/2024              PAcosta         OSF-2780: Cambio de esquema ADM_PERSON                              
    ****************************************************************/   
    
   CURSOR CUFA_RESOGURE( ISBREGRRESO IN LDC_RESOGURE.resolucion%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE) IS
SELECT *
        FROM LDC_RESOGURE
        WHERE  resolucion = isbRegrreso
      and localidad = (select geograp_location_id from ab_address where address_id = ISBREGRADDR );
   TYPE TYREGRRESO IS TABLE OF FA_RESOGURE.REGRRESO%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYREGRFEIN IS TABLE OF FA_RESOGURE.REGRFEIN%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBFA_RESOGURE IS RECORD
    (
      REGRRESO TYREGRRESO,
      REGRFEIN TYREGRFEIN
    );
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   FUNCTION FSBGETMESSAGEDESCRIPTION( INUMENSCODI IN NUMBER )
    RETURN VARCHAR2;
   PROCEDURE INSRECORD( IRCRECORD IN LDC_RESOGURE%ROWTYPE );
   PROCEDURE INSRECORDS( IRCTBRECORD IN OUT NOCOPY TYTBFA_RESOGURE );
   PROCEDURE INSFOREACHCOLUMN( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, IDTREGRFEIN IN FA_RESOGURE.REGRFEIN%TYPE );
   PROCEDURE INSFOREACHCOLUMNBULK( ISBREGRRESO IN OUT NOCOPY TYREGRRESO, IDTREGRFEIN IN OUT NOCOPY TYREGRFEIN );
   PROCEDURE CLEARMEMORY;
   PROCEDURE DELRECORD( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE );
   PROCEDURE UPRECORD( IRCRECORD IN FA_RESOGURE%ROWTYPE );
   PROCEDURE DELRECORDS( ISBREGRRESO IN OUT NOCOPY TYREGRRESO, ISBREGRADDR IN ab_address.address_id%TYPE );
   FUNCTION FBLEXIST( ISBREGRRESO IN LDC_RESOGURE.resolucion%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN BOOLEAN;
   FUNCTION FRCGETRECORD(ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE,  INUCACHE IN NUMBER := 1)
    RETURN LDC_RESOGURE%ROWTYPE;
   PROCEDURE ACCKEY(  ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE, INUCACHE IN NUMBER := 1 );
   PROCEDURE VALIDATEDUPVALUES( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, INUCACHE IN NUMBER := 1 );
   PROCEDURE UPDREGRFEIN( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, IDTREGRFEIN$ IN FA_RESOGURE.REGRFEIN%TYPE );
   FUNCTION FSBGETREGRRESO( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN FA_RESOGURE.REGRRESO%TYPE;
   FUNCTION FDTGETREGRFEIN(ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE, INUCACHE IN NUMBER := 1)
    RETURN FA_RESOGURE.REGRFEIN%TYPE;
END PKTBLLDC_RESOGURE;
/
CREATE OR REPLACE PACKAGE BODY adm_person.PKTBLLDC_RESOGURE IS
   RCFA_RESOGURE CUFA_RESOGURE%ROWTYPE;
   RCRECORDNULL LDC_RESOGURE%ROWTYPE;
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'CA200-1196';
   CACHE CONSTANT NUMBER := 1;
   CNURECORD_NO_EXISTE CONSTANT NUMBER( 1 ) := 1;
   CNURECORD_YA_EXISTE CONSTANT NUMBER( 1 ) := 2;
   CBSTABLE CONSTANT VARCHAR2( 30 ) := 'LDC_RESOGURE';
   CNUGEENTITYID CONSTANT VARCHAR2( 30 ) := 3630;
   FUNCTION FSBGETMESSAGEDESCRIPTION( INUMENSCODI IN NUMBER )
    RETURN VARCHAR2
    IS
      SBMESSAGE VARCHAR2( 32000 );
      SBTABLEDESCRIPTION VARCHAR2( 32000 );
    BEGIN
      IF ( CNUGEENTITYID > 0 AND DAGE_ENTITY.FBLEXIST( CNUGEENTITYID ) ) THEN
         SBTABLEDESCRIPTION := DAGE_ENTITY.FSBGETDISPLAY_NAME( CNUGEENTITYID );
      END IF;
      SBMESSAGE := DAGE_MESSAGE.FSBGETDESCRIPTION( INUMENSCODI );
      IF SBTABLEDESCRIPTION IS NULL THEN
         SBMESSAGE := REPLACE( SBMESSAGE, '%s1', CBSTABLE );
       ELSE
         SBMESSAGE := REPLACE( SBMESSAGE, '%s1', '(' || CBSTABLE || ' - ' || SBTABLEDESCRIPTION || ')' );
      END IF;
      RETURN SBMESSAGE;
   END FSBGETMESSAGEDESCRIPTION;
   FUNCTION FBLINMEMORY( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE )
    RETURN BOOLEAN
    IS
    locali ab_address.geograp_location_id%type;
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.fblInMemory' );
      begin
        select geograp_location_id into locali from ab_address where address_id = ISBREGRADDR;
      exception
        when others then
          RETURN ( FALSE );
      end;
      IF ( RCFA_RESOGURE.resolucion = ISBREGRRESO and RCFA_RESOGURE.LOCALIDAD = locali ) THEN
         PKERRORS.POP;
         RETURN ( TRUE );
      END IF;
      PKERRORS.POP;
      RETURN ( FALSE );
   END FBLINMEMORY;
   PROCEDURE LOADRECORD( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE,  ISBREGRADDR IN ab_address.address_id%TYPE)
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.LoadRecord' );
      IF CUFA_RESOGURE%ISOPEN THEN
         CLOSE CUFA_RESOGURE;
      END IF;
      OPEN CUFA_RESOGURE( ISBREGRRESO, ISBREGRADDR );
      FETCH CUFA_RESOGURE
         INTO RCFA_RESOGURE;
      IF ( CUFA_RESOGURE%NOTFOUND ) THEN
         CLOSE CUFA_RESOGURE;
         PKERRORS.POP;
         RCFA_RESOGURE := RCRECORDNULL;
         RETURN;
      END IF;
      CLOSE CUFA_RESOGURE;
      PKERRORS.POP;
   END LOADRECORD;
   PROCEDURE LOAD( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE,   ISBREGRADDR IN ab_address.address_id%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.Load' );
      LOADRECORD( ISBREGRRESO, ISBREGRADDR );
      IF ( RCFA_RESOGURE.resolucion IS NULL ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END LOAD;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END FSBVERSION;
   PROCEDURE ACCKEY( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE, INUCACHE IN NUMBER := 1 )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.AccKey' );
      IF ( INUCACHE = CACHE ) THEN
         IF ( FBLINMEMORY( ISBREGRRESO,ISBREGRADDR ) ) THEN
            PKERRORS.POP;
            RETURN;
         END IF;
      END IF;
      LOAD( ISBREGRRESO, ISBREGRADDR );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END ACCKEY;
   PROCEDURE CLEARMEMORY
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.ClearMemory' );
      RCFA_RESOGURE := RCRECORDNULL;
      PKERRORS.POP;
   END CLEARMEMORY;
   PROCEDURE DELRECORD( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.DelRecord' );
      DELETE LDC_RESOGURE
    WHERE
           resolucion=isbRegrreso
      and localidad = (select geograp_location_id from ab_address where address_id = ISBREGRADDR );
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END DELRECORD;
   PROCEDURE DELRECORDS( ISBREGRRESO IN OUT NOCOPY TYREGRRESO , ISBREGRADDR IN ab_address.address_id%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.DelRecords' );
      FORALL INDX IN ISBREGRRESO.FIRST..ISBREGRRESO.LAST
         DELETE LDC_RESOGURE
    WHERE
            resolucion = isbRegrreso(indx)
      and localidad = (select geograp_location_id from ab_address where address_id = ISBREGRADDR );
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END DELRECORDS;
   PROCEDURE INSFOREACHCOLUMN( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, IDTREGRFEIN IN FA_RESOGURE.REGRFEIN%TYPE )
    IS
      RCRECORD LDC_RESOGURE%ROWTYPE;
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.InsForEachColumn' );
      RCRECORD.resolucion := ISBREGRRESO;
      RCRECORD.ini_vigencia := IDTREGRFEIN;
      --INSRECORD( RCRECORD);
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END INSFOREACHCOLUMN;
   PROCEDURE INSFOREACHCOLUMNBULK( ISBREGRRESO IN OUT NOCOPY TYREGRRESO, IDTREGRFEIN IN OUT NOCOPY TYREGRFEIN )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.InsForEachColumnBulk' );
      --FORALL INDX IN ISBREGRRESO.FIRST..ISBREGRRESO.LAST
    /*     INSERT INTO LDC_RESOGURE
    (
      codigo,
      resolucion  ,
      tipo        ,
      ini_vigencia,
      localidad   ,
      observacion
    )
    VALUES
    (
      isbRegrcodi(indx),
      idtRegrreso(indx),
      idtRegrtipo(indx),
      idtRegrfein(indx),
      idtRegrloca(indx),
      idtRegrobse(indx)
    );*/
    null;
      PKERRORS.POP;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETBSSERROR( CNURECORD_YA_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_YA_EXISTE ) );
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END INSFOREACHCOLUMNBULK;
   PROCEDURE INSRECORD( IRCRECORD IN LDC_RESOGURE%ROWTYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.InsRecord' );
   /*   INSERT INTO LDC_RESOGURE
    (
      codigo,
      resolucion  ,
      tipo        ,
      ini_vigencia,
      localidad   ,
      observacion
    )
    VALUES
    (
      isbRegrcodi(indx),
      idtRegrreso(indx),
      idtRegrtipo(indx),
      idtRegrfein(indx),
      idtRegrloca(indx),
      idtRegrobse(indx)
    );*/
      PKERRORS.POP;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETBSSERROR( CNURECORD_YA_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_YA_EXISTE ) );
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END INSRECORD;
   PROCEDURE INSRECORDS( IRCTBRECORD IN OUT NOCOPY TYTBFA_RESOGURE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.InsRecords' );
    /*  FORALL INDX IN IRCTBRECORD.REGRRESO.FIRST..IRCTBRECORD.REGRRESO.LAST
         INSERT INTO LDC_RESOGURE
    (
      codigo,
      resolucion  ,
      tipo        ,
      ini_vigencia,
      localidad   ,
      observacion
    )
    VALUES
    (
      isbRegrcodi(indx),
      idtRegrreso(indx),
      idtRegrtipo(indx),
      idtRegrfein(indx),
      idtRegrloca(indx),
      idtRegrobse(indx)
    );*/
      PKERRORS.POP;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETBSSERROR( CNURECORD_YA_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_YA_EXISTE ) );
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END INSRECORDS;
   PROCEDURE UPRECORD( IRCRECORD IN FA_RESOGURE%ROWTYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.UpRecord' );
      UPDATE Fa_Resogure
    SET
        Regrfein = ircRecord.Regrfein
    WHERE  Regrreso = ircRecord.Regrreso;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPRECORD;
   PROCEDURE VALIDATEDUPVALUES( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, INUCACHE IN NUMBER := 1 )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.ValidateDupValues' );
      IF ( FBLEXIST( ISBREGRRESO, INUCACHE ) ) THEN
         ERRORS.SETBSSERROR( CNURECORD_YA_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_YA_EXISTE ) );
         RAISE LOGIN_DENIED;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END VALIDATEDUPVALUES;
   FUNCTION FBLEXIST( ISBREGRRESO IN LDC_RESOGURE.resolucion%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN BOOLEAN
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.fblExist' );
      IF ( INUCACHE = CACHE ) THEN
         IF ( FBLINMEMORY( ISBREGRRESO,ISBREGRADDR ) ) THEN
            PKERRORS.POP;
            RETURN ( TRUE );
         END IF;
      END IF;
      LOADRECORD( ISBREGRRESO, ISBREGRADDR );
      IF ( RCFA_RESOGURE.resolucion IS NULL ) THEN
         PKERRORS.POP;
         RETURN ( FALSE );
      END IF;
      PKERRORS.POP;
      RETURN ( TRUE );
   END FBLEXIST;
   FUNCTION FRCGETRECORD( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE,  INUCACHE IN NUMBER := 1 )
    RETURN LDC_RESOGURE%ROWTYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.frcGetRecord' );
      ACCKEY( ISBREGRRESO, ISBREGRADDR, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCFA_RESOGURE );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FRCGETRECORD;
   PROCEDURE UPDREGRFEIN( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, IDTREGRFEIN$ IN FA_RESOGURE.REGRFEIN%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.UpdRegrfein' );
      UPDATE Fa_Resogure
		SET
			Regrfein = idtRegrfein$
		WHERE  Regrreso = isbRegrreso;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDREGRFEIN;
   FUNCTION FSBGETREGRRESO( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN FA_RESOGURE.REGRRESO%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.fsbGetRegrreso' );
      ACCKEY( ISBREGRRESO, ISBREGRADDR, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCFA_RESOGURE.resolucion );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FSBGETREGRRESO;
   FUNCTION FDTGETREGRFEIN( ISBREGRRESO IN FA_RESOGURE.REGRRESO%TYPE, ISBREGRADDR IN ab_address.address_id%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN FA_RESOGURE.REGRFEIN%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblFa_Resogure.fdtGetRegrfein' );
      ACCKEY( ISBREGRRESO, ISBREGRADDR, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCFA_RESOGURE.ini_vigencia );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FDTGETREGRFEIN;
END PKTBLLDC_RESOGURE;
/
PROMPT Otorgando permisos de ejecucion a PKTBLLDC_RESOGURE
BEGIN
    pkg_utilidades.praplicarpermisos('PKTBLLDC_RESOGURE', 'ADM_PERSON');
END;
/