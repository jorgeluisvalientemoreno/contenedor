CREATE OR REPLACE PACKAGE      adm_person.LDC_AB_BOADDRESSCHANGE
IS
    /***************************************************************
    Propiedad intelectual de Sincecomp Ltda.
    
    Unidad	     : LDC_AB_BOADDRESSCHANGE
    Descripcion	 : 
    
    Parametro	    Descripcion
    ============	==============================
    
    Historia de Modificaciones
    Fecha   	           Autor            Modificacion
    ====================   =========        ====================
    19/06/2024              PAcosta         OSF-2845: Cambio de esquema ADM_PERSON                              
    ****************************************************************/       
    
   TYPE TYGETPROCADDRESSCHANGE IS RECORD
    (
      ADDRESS_CHANGE_ID AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE,
      NUOLDPARSERID AB_ADDRESS.ADDRESS_ID%TYPE,
      NUNEWPARSERID AB_ADDRESS.ADDRESS_ID%TYPE,
      SBNEWADDRESS AB_ADDRESS.ADDRESS%TYPE
    );
   TYPE TYRFGETPROCADDRESSCHANGE IS REF CURSOR
    RETURN TYGETPROCADDRESSCHANGE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   PROCEDURE UPDADDRESS( INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE, INUOLDPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE INSADDRESSCHANGELOG( INUOLDPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUCHANGESTATUS IN AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE );
   PROCEDURE UPDTOENDOFCHANGE;
   PROCEDURE ADDRCHANGEINPRODUCTS;
   PROCEDURE ADDRCHANGEINMOTIVES;
   PROCEDURE ADDRCHANGEININFRASTRUCTURE;
   --PROCEDURE ADDRESSCHANGE( INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEWGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, INUNEWNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, INUCONSECUTIVE IN AB_PREMISE.CONSECUTIVE%TYPE, ONUNEWADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE ADDRESSCHANGE
    (
        INUOLDADDRESSID         IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        ISBNEWADDRESS           IN  AB_ADDRESS.ADDRESS%TYPE,
        INUNEWGEOLOCATIONID     IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        INUNEWNEIGHBORHOODID    IN  AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE,
        INUCONSECUTIVE          IN  AB_PREMISE.CONSECUTIVE%TYPE,
        ONUNEWADDRESSID         OUT AB_ADDRESS.ADDRESS_ID%TYPE,
        ONUFATHERADDID          OUT AB_ADDRESS.ADDRESS_ID%TYPE
    );
   ---
   PROCEDURE ADDRESSCHANGEID( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBOLDADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUOLDADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ONUNEWADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ISBISURBAN IN VARCHAR2 := NULL );
   PROCEDURE ADDRESSCHANGEBYID( INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   FUNCTION ARETHEREPENDREQUEST( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN;
   PROCEDURE INDUPDTOENDOFCHANGE( INUADDRESSCHANGEID IN AB_MODULE_CHANGER.ADDRESS_CHANGE_ID%TYPE );
   PROCEDURE PROCESSNREGISTERINDADDRCHANGE;
   PROCEDURE GETADDCHANGEBYOLDADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUADDRESSCHANGEID OUT AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE, ONUNEWADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE INDADDRCHANGE( INUGEOGRALOCATIONID IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE, ISBOLDADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUOLDNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, INUNEWNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ISBISURBAN IN VARCHAR2 := NULL );
   PROCEDURE ADDRCHANGEINCUSTOMERCARE;
   PROCEDURE ADDRCHANGEINGENERAL;
   PROCEDURE ADDRCHANGEINORDERS;
   PROCEDURE ADDRCHANGEINBILLING;
   PROCEDURE ADDRESSTEXTCORRECTION( INUADDRESID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBNEWADDRESSTEXT IN AB_ADDRESS.ADDRESS%TYPE, ONUMSG OUT NUMBER );
   FUNCTION FBLISBASICADDRESS( ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN BOOLEAN;
   PROCEDURE VALADDRESSCHANGE( INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEWGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, INUNEWNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, INUCONSECUTIVE IN AB_PREMISE.CONSECUTIVE%TYPE );

END LDC_AB_BOADDRESSCHANGE;
/
CREATE OR REPLACE PACKAGE BODY      adm_person.LDC_AB_BOADDRESSCHANGE
IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO237947';
   NUTHREE_MODULES CONSTANT NUMBER := 3;
   NUAPPLICATION_ERROR CONSTANT NUMBER := -20001;
   NUALREADY_CHANGED CONSTANT NUMBER := 2481;
   CNUADDRESS_EXIST_IN_PREMISE CONSTANT NUMBER := 10537;
   CSBADDRESS_ID CONSTANT VARCHAR2( 16 ) := 'ADDRESS_ID';
   CNUDUP_ALTERN_ADDRESS CONSTANT NUMBER := 10532;
   CNUDUP_MAIN_ADDRESS CONSTANT NUMBER := 10458;
   CNUARE_THERE_PEND_REQUEST CONSTANT NUMBER := 10534;
   CNUNOTI_PROD CONSTANT NUMBER := 12000;
   CNUDIFFGEOGRAPLOCATION CONSTANT NUMBER := 1802;
   CNUNOT_CHANGING_ADDRESS CONSTANT NUMBER := 2603;
   CSBWORK_INSTANCE CONSTANT VARCHAR2( 30 ) := 'WORK_INSTANCE';
   CNUCHAGEADDRESSSUCCESS CONSTANT NUMBER( 10 ) := 113002;
   CNUCHAGEADDRESSNODEPEN CONSTANT NUMBER( 10 ) := 113003;
   CNUADDRINOTHERESTATE CONSTANT NUMBER( 10 ) := 118200;
   CNUERR901739 CONSTANT NUMBER( 10 ) := 901739;
   CNUERR17564 CONSTANT NUMBER( 10 ) := 17564;
   CSBAB_CHANGE_NEW CONSTANT VARCHAR2( 30 ) := 'AB_CHANGE_NEW';
   CSBAB_CH_IN_PROCESS CONSTANT VARCHAR2( 30 ) := 'AB_CH_IN_PROCESS';
   CSBAB_CH_WITH_REQUEST CONSTANT VARCHAR2( 30 ) := 'AB_CH_WITH_REQUEST';
   CSBAB_CHANGE_END CONSTANT VARCHAR2( 30 ) := 'AB_CHANGE_END';
   CSBAB_CHANGE_WITH_ERROR CONSTANT VARCHAR2( 30 ) := 'AB_CHANGE_WITH_ERROR';
   CSBAB_CHANGE_MODULES CONSTANT VARCHAR2( 30 ) := 'AB_CHANGE_MODULES';
   CSBMOTIVE_MANAGE_MODULE CONSTANT VARCHAR2( 30 ) := 'MOTIVE_MANAGE_MODULE';
   CSBPRODUCT_MODULE CONSTANT VARCHAR2( 30 ) := 'PRODUCT_MODULE';
   CSBAB_VAL_ADDR_MOTIVES CONSTANT VARCHAR2( 30 ) := 'AB_VAL_ADDR_MOTIVES';
   CSBAB_UP_ADDR_PRODUCTS CONSTANT VARCHAR2( 30 ) := 'AB_UP_ADDR_PRODUCTS';
   CSBAB_UP_ADDR_MOTIVES CONSTANT VARCHAR2( 30 ) := 'AB_UP_ADDR_MOTIVES';
   CSBAB_UP_ADDR_MOTI_COMP CONSTANT VARCHAR2( 30 ) := 'AB_UP_ADDR_MOTI_COMP';
   CSBINFRAESTRUCT_MODULE CONSTANT VARCHAR2( 30 ) := 'INFRAESTRUCT_MODULE';
   CSBAB_UP_ADDR_INFRAST CONSTANT VARCHAR2( 30 ) := 'AB_UP_ADDR_INFRAST';
   CSBCUSTOMER_CARE_MODULE CONSTANT VARCHAR2( 30 ) := 'CUSTOMER_CARE_MODULE';
   CSBAB_CH_AUTO_DEPEND CONSTANT VARCHAR2( 30 ) := 'AB_CH_AUTO_DEPEND';
   CSBAB_UPD_PRD_NOTIFI CONSTANT VARCHAR2( 30 ) := 'AB_UPD_PRD_NOTIFI';
   CSBAB_UP_ADDR_CUSTCARE CONSTANT VARCHAR2( 30 ) := 'AB_UP_ADDR_CUSTCARE';
   CSBGENERAL_MODULE CONSTANT VARCHAR2( 30 ) := 'GENERAL_MODULE';
   CSBAB_UP_ADDR_GENERAL CONSTANT VARCHAR2( 30 ) := 'AB_UP_ADDR_SUBS_DATA';
   CSBORDERS_MODULE CONSTANT VARCHAR2( 30 ) := 'ORDERS_MODULE';
   CSBAB_UP_ADDR_ORDERS CONSTANT VARCHAR2( 30 ) := 'AB_UP_ADDR_ORDERS';
   CSBBILLING_MODULE CONSTANT VARCHAR2( 30 ) := 'BILLING_MODULE';
   CSBAB_UP_ADDR_BILLING CONSTANT VARCHAR2( 30 ) := 'AB_UP_ADDR_BILLING';
   CSBAB_UP_ADDR_MOTI_RELAT CONSTANT VARCHAR2( 30 ) := 'AB_UP_ADDR_MOTI_RELA';
   CSBVALID_ADDRESS CONSTANT VARCHAR2( 30 ) := 'VALID_ADDRESS';
   EXCONTINUE EXCEPTION;
   CSBADDRESSOLD CONSTANT VARCHAR2( 25 ) := 'Direccion Actual';
   CSBADDRESSNEW CONSTANT VARCHAR2( 25 ) := 'Direccion Nueva';
   CSBGEOLOCATION CONSTANT VARCHAR2( 25 ) := 'Ubicacion Geografica';
   CSBNEIGH CONSTANT VARCHAR2( 25 ) := 'Barrio';
   CSBASINGGEOLOC CONSTANT VARCHAR2( 50 ) := 'La Ubicacion Geografica ingresada ';
   CSBCONSECUTIVE CONSTANT VARCHAR2( 50 ) := 'Consecutivo de Ruta';
   CNUNULL_VALUE CONSTANT NUMBER := 7352;
   CNUVALNEIGH CONSTANT NUMBER := 120091;
   CNUGEOLOCAEXIST CONSTANT NUMBER := 120092;
   CNUADDRESSNOEXIST CONSTANT NUMBER := 17565;
   CNUNEIBYGEOLOC CONSTANT NUMBER := 4101;
   CNUISFORCE CONSTANT NUMBER := 4414;
   CNUASSINGLEVEL CONSTANT NUMBER := 1316;
   CNUMAXLENGHT CONSTANT NUMBER := 7221;
   CNUVALGELONEIGB CONSTANT NUMBER := 9882;
   CNUVALGELOLOCA CONSTANT NUMBER := 10281;
   CSBYES CONSTANT VARCHAR2( 3 ) := GE_BOCONSTANTS.CSBYES;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE GETADDCHANGEBYOLDADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUADDRESSCHANGEID OUT AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE, ONUNEWADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      CURSOR CUNEWADDRESSID IS
SELECT address_change_id, new_address_id
        FROM ab_address_change ab_adch
        WHERE ab_adch.old_address_id = inuAddressId;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF CUNEWADDRESSID%ISOPEN THEN
            CLOSE CUNEWADDRESSID;
         END IF;
      END;
    BEGIN
      OPEN CUNEWADDRESSID;
      FETCH CUNEWADDRESSID
         INTO ONUADDRESSCHANGEID, ONUNEWADDRESSID;
      IF CUNEWADDRESSID%NOTFOUND THEN
         CLOSE CUNEWADDRESSID;
         ERRORS.SETERROR( CNUNOT_CHANGING_ADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      CLOSE CUNEWADDRESSID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETADDCHANGEBYOLDADDR;
   PROCEDURE UPDADDRESSCOUNTERS( INUOLDPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      NUINSTALLEDLINES AB_ADDRESS.INSTALLED_LINES%TYPE;
      NUINSTALLEDAIRLINES AB_ADDRESS.INSTALLED_AIR_LINES%TYPE;
      NUTRANSACTLINES AB_ADDRESS.TRANSACT_LINES%TYPE;
      NUTRANSACTAIRLINES AB_ADDRESS.TRANSACT_AIR_LINES%TYPE;
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
    BEGIN
      IF NVL( INUOLDPARSERID, 0 ) = 0 OR NVL( INUNEWPARSERID, 0 ) = 0 THEN
         RETURN;
      END IF;
      NUINSTALLEDLINES := NVL( DAAB_ADDRESS.FNUGETINSTALLED_LINES( INUOLDPARSERID ), 0 );
      NUINSTALLEDAIRLINES := NVL( DAAB_ADDRESS.FNUGETINSTALLED_AIR_LINES( INUOLDPARSERID ), 0 );
      NUTRANSACTLINES := NVL( DAAB_ADDRESS.FNUGETTRANSACT_LINES( INUOLDPARSERID ), 0 );
      NUTRANSACTAIRLINES := NVL( DAAB_ADDRESS.FNUGETTRANSACT_AIR_LINES( INUOLDPARSERID ), 0 );
      NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUOLDPARSERID );
      NUINSTALLEDLINES := NUINSTALLEDLINES + NVL( DAAB_ADDRESS.FNUGETINSTALLED_LINES( INUNEWPARSERID ), 0 );
      NUINSTALLEDAIRLINES := NUINSTALLEDAIRLINES + NVL( DAAB_ADDRESS.FNUGETINSTALLED_AIR_LINES( INUNEWPARSERID ), 0 );
      NUTRANSACTLINES := NUTRANSACTLINES + NVL( DAAB_ADDRESS.FNUGETTRANSACT_LINES( INUNEWPARSERID ), 0 );
      NUTRANSACTAIRLINES := NUTRANSACTAIRLINES + NVL( DAAB_ADDRESS.FNUGETTRANSACT_AIR_LINES( INUNEWPARSERID ), 0 );
      DAAB_ADDRESS.UPDINSTALLED_LINES( INUNEWPARSERID, NUINSTALLEDLINES );
      DAAB_ADDRESS.UPDINSTALLED_AIR_LINES( INUNEWPARSERID, NUINSTALLEDAIRLINES );
      DAAB_ADDRESS.UPDTRANSACT_LINES( INUNEWPARSERID, NUTRANSACTLINES );
      DAAB_ADDRESS.UPDTRANSACT_AIR_LINES( INUNEWPARSERID, NUTRANSACTLINES );
      DAAB_ADDRESS.UPDESTATE_NUMBER( INUNEWPARSERID, NUESTATENUMBER );
      DAAB_ADDRESS.UPDINSTALLED_LINES( INUOLDPARSERID, 0 );
      DAAB_ADDRESS.UPDINSTALLED_AIR_LINES( INUOLDPARSERID, 0 );
      DAAB_ADDRESS.UPDTRANSACT_LINES( INUOLDPARSERID, 0 );
      DAAB_ADDRESS.UPDTRANSACT_AIR_LINES( INUOLDPARSERID, 0 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDADDRESSCOUNTERS;
   PROCEDURE INSADDRESSCHANGELOG( INUOLDPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUCHANGESTATUS IN AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE )
    IS
      RCABADDRESSCHANGE DAAB_ADDRESS_CHANGE.STYAB_ADDRESS_CHANGE;
      SBOLDADDRESS AB_ADDRESS_CHANGE.OLD_ADDRESS%TYPE;
      SBNEWADDRESS AB_ADDRESS_CHANGE.NEW_ADDRESS%TYPE;
    BEGIN
      SBOLDADDRESS := DAAB_ADDRESS.FSBGETADDRESS( INUOLDPARSERID );
      SBNEWADDRESS := DAAB_ADDRESS.FSBGETADDRESS( INUNEWPARSERID );
      RCABADDRESSCHANGE.ADDRESS_CHANGE_ID := AB_BOSEQUENCE.FNUNEXTADDRESS_CHANGE;
      RCABADDRESSCHANGE.OLD_ADDRESS_ID := INUOLDPARSERID;
      RCABADDRESSCHANGE.NEW_ADDRESS_ID := INUNEWPARSERID;
      RCABADDRESSCHANGE.CHANGE_STATUS_ID := INUCHANGESTATUS;
      RCABADDRESSCHANGE.CHANGE_DATE := SYSDATE;
      RCABADDRESSCHANGE.USER_NAME := USER;
      RCABADDRESSCHANGE.TERMINAL := SYS_CONTEXT( 'USERENV', 'TERMINAL' );
      RCABADDRESSCHANGE.OLD_ADDRESS := SBOLDADDRESS;
      RCABADDRESSCHANGE.NEW_ADDRESS := SBNEWADDRESS;
      DAAB_ADDRESS_CHANGE.INSRECORD( RCABADDRESSCHANGE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSADDRESSCHANGELOG;
   PROCEDURE GETFORCHANGEINMODULE( IORFGETPROCADDRESSCHANGE IN OUT TYRFGETPROCADDRESSCHANGE )
    IS
      NUCHANGEEND AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      NUCHANGEEND := GE_BOPARAMETER.FNUGET( CSBAB_CHANGE_END );
      OPEN IORFGETPROCADDRESSCHANGE FOR SELECT ab_adch.address_change_id,
               ab_adch.old_address_id,
               ab_adch.new_address_id,
               ab_addr.address
        FROM ab_address_change   ab_adch,
             ab_address          ab_addr
        WHERE ab_adch.old_address_id = ab_addr.address_id
        AND   ab_adch.change_status_id <> nuChangeEnd
        AND   ab_addr.active = GE_BOConstants.csbNO;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETFORCHANGEINMODULE;
   PROCEDURE UPDTOENDOFCHANGE
    IS
      NUINPROCESSSTATUS AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      NUCHANGEEND AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      CURSOR CUGETFORENDOFCHANGE( INUSTATUS IN AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE, INUCHANGEMODULES IN NUMBER ) IS
SELECT ab_moch.address_change_id,
               count(ab_moch.address_change_id) nuAllModules
        FROM ab_address_change ab_adch,
            ab_module_changer ab_moch
        WHERE ab_adch.address_change_id = ab_moch.address_change_id
        AND ab_adch.change_status_id = inuStatus
        GROUP BY ab_moch.address_change_id
        HAVING count(ab_moch.address_change_id) = inuChangeModules;
      NUDELADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUNEWADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUCHANGEMODULES NUMBER;
    BEGIN
      NUCHANGEMODULES := 10;
      NUINPROCESSSTATUS := GE_BOPARAMETER.FNUGET( CSBAB_CH_IN_PROCESS );
      NUCHANGEEND := GE_BOPARAMETER.FNUGET( CSBAB_CHANGE_END );
      FOR RCADDRCHANGE IN CUGETFORENDOFCHANGE( NUINPROCESSSTATUS, NUCHANGEMODULES )
       LOOP
         DAAB_ADDRESS_CHANGE.UPDCHANGE_STATUS_ID( RCADDRCHANGE.ADDRESS_CHANGE_ID, NUCHANGEEND );
         NUDELADDRESSID := DAAB_ADDRESS_CHANGE.FNUGETOLD_ADDRESS_ID( RCADDRCHANGE.ADDRESS_CHANGE_ID );
         NUNEWADDRESSID := DAAB_ADDRESS_CHANGE.FNUGETNEW_ADDRESS_ID( RCADDRCHANGE.ADDRESS_CHANGE_ID );
         DAAB_ADDRESS_CHANGE.UPDOLD_ADDRESS_ID( RCADDRCHANGE.ADDRESS_CHANGE_ID, NUNEWADDRESSID );
         DAAB_ADDRESS.DELRECORD( NUDELADDRESSID );
         COMMIT;
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF CUGETFORENDOFCHANGE%ISOPEN THEN
            CLOSE CUGETFORENDOFCHANGE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF CUGETFORENDOFCHANGE%ISOPEN THEN
            CLOSE CUGETFORENDOFCHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDTOENDOFCHANGE;
   PROCEDURE INDUPDTOENDOFCHANGE( INUADDRESSCHANGEID IN AB_MODULE_CHANGER.ADDRESS_CHANGE_ID%TYPE )
    IS
      NUINPROCESSSTATUS AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      NUCHANGEEND AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      CURSOR CUGETFORENDOFCHANGE( INUSTATUS IN AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE, INUCHANGEMODULES IN NUMBER ) IS
SELECT ab_moch.address_change_id,
               count(ab_moch.address_change_id) nuAllModules
        FROM ab_address_change ab_adch,
            ab_module_changer ab_moch
        WHERE ab_adch.address_change_id = ab_moch.address_change_id
        AND ab_adch.address_change_id = inuAddressChangeId
        AND ab_adch.change_status_id = inuStatus
        GROUP BY ab_moch.address_change_id
        HAVING count(ab_moch.address_change_id) = inuChangeModules;
      RCADDRCHANGE CUGETFORENDOFCHANGE%ROWTYPE;
      NUCHANGEMODULES NUMBER;
    BEGIN
      NUCHANGEMODULES := GE_BOPARAMETER.FNUGET( CSBAB_CHANGE_MODULES );
      NUINPROCESSSTATUS := GE_BOPARAMETER.FNUGET( CSBAB_CH_IN_PROCESS );
      NUCHANGEEND := GE_BOPARAMETER.FNUGET( CSBAB_CHANGE_END );
      OPEN CUGETFORENDOFCHANGE( NUINPROCESSSTATUS, NUCHANGEMODULES );
      FETCH CUGETFORENDOFCHANGE
         INTO RCADDRCHANGE;
      IF CUGETFORENDOFCHANGE%FOUND THEN
         DAAB_ADDRESS_CHANGE.UPDCHANGE_STATUS_ID( INUADDRESSCHANGEID, NUCHANGEEND );
      END IF;
      CLOSE CUGETFORENDOFCHANGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF CUGETFORENDOFCHANGE%ISOPEN THEN
            CLOSE CUGETFORENDOFCHANGE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF CUGETFORENDOFCHANGE%ISOPEN THEN
            CLOSE CUGETFORENDOFCHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INDUPDTOENDOFCHANGE;
   PROCEDURE SETERRORSTATUS( INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE, INUERRORCODE IN NUMBER, ISBERRORMESSAGE IN VARCHAR2 )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      DAAB_ADDRESS_CHANGE.UPDERROR_CODE( INUADDRESSCHANGEID, INUERRORCODE, 0 );
      DAAB_ADDRESS_CHANGE.UPDERROR_MESSAGE( INUADDRESSCHANGEID, ISBERRORMESSAGE, 0 );
      NUWITH_ERROR := GE_BOPARAMETER.FNUGET( CSBAB_CHANGE_WITH_ERROR );
      DAAB_ADDRESS_CHANGE.UPDCHANGE_STATUS_ID( INUADDRESSCHANGEID, NUWITH_ERROR, 0 );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETERRORSTATUS;
   FUNCTION FBLISPOSSIBLELOCKCHANGE( INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE )
    RETURN BOOLEAN
    IS
      CURSOR CU_LOCKCHANGE( NUADDRESSCHANGE IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE ) IS
SELECT 'x'
            FROM   ab_address_change
            WHERE  address_change_id = nuAddressChange
            FOR UPDATE NOWAIT;
      EX_ORDERBUSY EXCEPTION;
      PRAGMA EXCEPTION_INIT( EX_ORDERBUSY, -54 );
      NUERRORCODE NUMBER( 10 );
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE;
    BEGIN
      OPEN CU_LOCKCHANGE( INUADDRESSCHANGEID );
      CLOSE CU_LOCKCHANGE;
      RETURN TRUE;
    EXCEPTION
      WHEN EX_ORDERBUSY THEN
         IF ( CU_LOCKCHANGE%ISOPEN ) THEN
            CLOSE CU_LOCKCHANGE;
         END IF;
         RETURN FALSE;
      WHEN OTHERS THEN
         IF ( CU_LOCKCHANGE%ISOPEN ) THEN
            CLOSE CU_LOCKCHANGE;
         END IF;
         RETURN FALSE;
   END FBLISPOSSIBLELOCKCHANGE;
   FUNCTION FBLISALREADYPROCESSED( INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE, INUMODULEID IN AB_MODULE_CHANGER.MODULE_ID%TYPE )
    RETURN BOOLEAN
    IS
      NUERRORCODE NUMBER( 10 );
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE;
    BEGIN
      IF DAAB_MODULE_CHANGER.FBLEXIST( INUADDRESSCHANGEID, INUMODULEID ) THEN
         RETURN TRUE;
       ELSE
         RETURN FALSE;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RETURN FALSE;
      WHEN OTHERS THEN
         RETURN FALSE;
   END FBLISALREADYPROCESSED;
   FUNCTION ARETHEREPENDREQUEST( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN
    IS
      NUOBJVALMOTIVES GE_OBJECT.OBJECT_ID%TYPE;
      SBMOTIVEVALIDATION GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 2000 );
      NUERRORCODE NUMBER;
      NURESULT NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
    BEGIN
      NUOBJVALMOTIVES := GE_BOPARAMETER.FNUGET( CSBAB_VAL_ADDR_MOTIVES );
      SBMOTIVEVALIDATION := DAGE_OBJECT.FSBGETNAME_( NUOBJVALMOTIVES );
      MO_BOADDRESS.EXISTSADDRESS( INUADDRESSID, NURESULT );
      IF NVL( NURESULT, 0 ) = GE_BOCONSTANTS.CNUSUCCESS THEN
         RETURN FALSE;
       ELSE
         RETURN TRUE;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ARETHEREPENDREQUEST;
   PROCEDURE VALCHANGEPENDINGREQUEST( INUOLDPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE )
    IS
      NUIN_PROCESS AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      NUWITH_REQUEST AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
    BEGIN
      IF NOT ARETHEREPENDREQUEST( INUOLDPARSERID ) THEN
         NUIN_PROCESS := GE_BOPARAMETER.FNUGET( CSBAB_CH_IN_PROCESS );
         DAAB_ADDRESS_CHANGE.UPDCHANGE_STATUS_ID( INUADDRESSCHANGEID, NUIN_PROCESS );
       ELSE
         NUWITH_REQUEST := GE_BOPARAMETER.FNUGET( CSBAB_CH_WITH_REQUEST );
         DAAB_ADDRESS_CHANGE.UPDCHANGE_STATUS_ID( INUADDRESSCHANGEID, NUWITH_REQUEST );
         COMMIT;
         RAISE EXCONTINUE;
      END IF;
      DAAB_ADDRESS_CHANGE.UPDERROR_CODE( INUADDRESSCHANGEID, NULL );
      DAAB_ADDRESS_CHANGE.UPDERROR_MESSAGE( INUADDRESSCHANGEID, NULL );
    EXCEPTION
      WHEN EXCONTINUE THEN
         RAISE EXCONTINUE;
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK TO A;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
         RAISE EXCONTINUE;
      WHEN OTHERS THEN
         ROLLBACK TO A;
         ERRORS.SETERROR;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
         RAISE EXCONTINUE;
   END VALCHANGEPENDINGREQUEST;
   PROCEDURE VALINDCHANGEPENDREQUEST( INUOLDPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE )
    IS
      NUIN_PROCESS AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      NUWITH_REQUEST AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      IF NOT ARETHEREPENDREQUEST( INUOLDPARSERID ) THEN
         NUIN_PROCESS := GE_BOPARAMETER.FNUGET( CSBAB_CH_IN_PROCESS );
         DAAB_ADDRESS_CHANGE.UPDCHANGE_STATUS_ID( INUADDRESSCHANGEID, NUIN_PROCESS );
       ELSE
         NUWITH_REQUEST := GE_BOPARAMETER.FNUGET( CSBAB_CH_WITH_REQUEST );
         DAAB_ADDRESS_CHANGE.UPDCHANGE_STATUS_ID( INUADDRESSCHANGEID, NUWITH_REQUEST );
      END IF;
      DAAB_ADDRESS_CHANGE.UPDERROR_CODE( INUADDRESSCHANGEID, NULL );
      DAAB_ADDRESS_CHANGE.UPDERROR_MESSAGE( INUADDRESSCHANGEID, NULL );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         ROLLBACK;
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         ROLLBACK;
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
   END VALINDCHANGEPENDREQUEST;
   PROCEDURE PRODADDRCHANGEBYADDRESS( INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE, INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      SBNEWADDRESS AB_ADDRESS.ADDRESS%TYPE;
      SBISMAIN AB_ADDRESS.IS_MAIN%TYPE;
      SBSAMECATEGORY AB_ADDRESS.IS_MAIN%TYPE;
      NUPRODUCTMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDPRODUCTS GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      SBINSTANCE VARCHAR2( 64 );
      NULOGID NUMBER;
      NUMOTIVESMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      NUTARGETMODULE NUMBER;
    BEGIN
      NUPRODUCTMODULE := GE_BOPARAMETER.FNUGET( CSBPRODUCT_MODULE );
      NUOBJUPDPRODUCTS := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_PRODUCTS );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDPRODUCTS );
      IF FBLISALREADYPROCESSED( INUADDRESSCHANGEID, NUPRODUCTMODULE ) THEN
         RETURN;
      END IF;
      VALINDCHANGEPENDREQUEST( INUOLDADDRESSID, INUADDRESSCHANGEID );
      NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
      SBNEWADDRESS := DAAB_ADDRESS.FSBGETADDRESS( INUNEWADDRESSID );
      SBISMAIN := DAAB_ADDRESS.FSBGETIS_MAIN( INUNEWADDRESSID );
      IF SBISMAIN = GE_BOCONSTANTS.CSBYES THEN
         SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
       ELSE
         SBSAMECATEGORY := GE_BOCONSTANTS.CSBYES;
      END IF;
      PR_BSPRODUCT.UPDATEADDRESS( INUOLDADDRESSID, INUNEWADDRESSID, SBNEWADDRESS, SBSAMECATEGORY, NUERRORCODE, SBERRORMESSAGE );
      IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
         ROLLBACK;
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
       ELSE
         NUMOTIVESMODULE := GE_BOPARAMETER.FNUGET( CSBMOTIVE_MANAGE_MODULE );
         NUTARGETMODULE := GE_BOPARAMETER.FNUGET( CSBCUSTOMER_CARE_MODULE );
         GE_BONOTIFICATION.SETATTRIBUTE( SBINSTANCE, CSBADDRESS_ID, INUNEWADDRESSID );
         GE_BONOTIFICATION.SENDNOTIFY( CNUNOTI_PROD, NUMOTIVESMODULE, SBINSTANCE, NUTARGETMODULE, NULOGID, NUERRORCODE, SBERRORMESSAGE );
         IF NVL( NUERRORCODE, 0 ) != GE_BOCONSTANTS.CNUSUCCESS THEN
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         RCMODULECHANGER.ADDRESS_CHANGE_ID := INUADDRESSCHANGEID;
         RCMODULECHANGER.MODULE_ID := NUPRODUCTMODULE;
         DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
   END PRODADDRCHANGEBYADDRESS;
   PROCEDURE ADDRCHANGEPRODCOUNTERS( INUOLDPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBSAMECATEGORY IN VARCHAR2 )
    IS
      NUPRODUCTMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDPRODUCTS GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      SBINSTANCE VARCHAR2( 64 );
      NULOGID NUMBER;
      NUMOTIVESMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      NUTARGETMODULE NUMBER;
    BEGIN
      IF GE_BOPARAMETER.FSBGET( CSBAB_UPD_PRD_NOTIFI ) = GE_BOCONSTANTS.CSBNO THEN
         RETURN;
      END IF;
      UPDADDRESSCOUNTERS( INUOLDPARSERID, INUNEWPARSERID );
      NUPRODUCTMODULE := GE_BOPARAMETER.FNUGET( CSBPRODUCT_MODULE );
      NUOBJUPDPRODUCTS := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_PRODUCTS );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDPRODUCTS );
      IF ARETHEREPENDREQUEST( INUOLDPARSERID ) THEN
         ERRORS.SETERROR( CNUARE_THERE_PEND_REQUEST );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
      PR_BSPRODUCT.UPDATEADDRESS( INUOLDPARSERID, INUNEWPARSERID, ISBNEWADDRESS, ISBSAMECATEGORY, NUERRORCODE, SBERRORMESSAGE );
      IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
         RAISE EX.CONTROLLED_ERROR;
       ELSE
         NUMOTIVESMODULE := GE_BOPARAMETER.FNUGET( CSBMOTIVE_MANAGE_MODULE );
         NUTARGETMODULE := GE_BOPARAMETER.FNUGET( CSBCUSTOMER_CARE_MODULE );
         GE_BONOTIFICATION.SETATTRIBUTE( SBINSTANCE, CSBADDRESS_ID, INUNEWPARSERID );
         GE_BONOTIFICATION.SENDNOTIFY( CNUNOTI_PROD, NUMOTIVESMODULE, SBINSTANCE, NUTARGETMODULE, NULOGID, NUERRORCODE, SBERRORMESSAGE );
         IF NVL( NUERRORCODE, 0 ) != GE_BOCONSTANTS.CNUSUCCESS THEN
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRCHANGEPRODCOUNTERS;
   PROCEDURE ADDRCHANGEINPRODUCTS
    IS
      RFGETPROCADDRESSCHANGE TYRFGETPROCADDRESSCHANGE;
      RCGETPROCADDRESSCHANGE TYGETPROCADDRESSCHANGE;
      SBSAMECATEGORY AB_ADDRESS.IS_MAIN%TYPE;
      SBISMAIN AB_ADDRESS.IS_MAIN%TYPE;
      NUPRODUCTMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDPRODUCTS GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      SBINSTANCE VARCHAR2( 64 );
      NULOGID NUMBER;
      NUMOTIVESMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      NUTARGETMODULE NUMBER;
    BEGIN
      NUPRODUCTMODULE := GE_BOPARAMETER.FNUGET( CSBPRODUCT_MODULE );
      NUOBJUPDPRODUCTS := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_PRODUCTS );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDPRODUCTS );
      GETFORCHANGEINMODULE( RFGETPROCADDRESSCHANGE );
      FETCH RFGETPROCADDRESSCHANGE
         INTO RCGETPROCADDRESSCHANGE;
      WHILE RFGETPROCADDRESSCHANGE%FOUND
       LOOP
         BEGIN
            SAVEPOINT A;
            IF NOT FBLISPOSSIBLELOCKCHANGE( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID ) THEN
               RAISE EXCONTINUE;
            END IF;
            IF FBLISALREADYPROCESSED( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUPRODUCTMODULE ) THEN
               ROLLBACK TO A;
               RAISE EXCONTINUE;
            END IF;
            VALCHANGEPENDINGREQUEST( RCGETPROCADDRESSCHANGE.NUOLDPARSERID, RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID );
            NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
            SBISMAIN := DAAB_ADDRESS.FSBGETIS_MAIN( RCGETPROCADDRESSCHANGE.NUNEWPARSERID );
            IF SBISMAIN = GE_BOCONSTANTS.CSBYES THEN
               SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
             ELSE
               SBSAMECATEGORY := GE_BOCONSTANTS.CSBYES;
            END IF;
            SBPLBLOCK := 'BEGIN ' || SBPROCESS || '(:inuOldParserId , :inuNewParserId, :isbNewAddress,' || ':sbSameCategory, :onuErrCode,:osbErrMess); END;';
            EXECUTE IMMEDIATE ( SBPLBLOCK )
                              USING IN RCGETPROCADDRESSCHANGE.NUOLDPARSERID, IN RCGETPROCADDRESSCHANGE.NUNEWPARSERID, IN RCGETPROCADDRESSCHANGE.SBNEWADDRESS, IN SBSAMECATEGORY, OUT NUERRORCODE, OUT SBERRORMESSAGE;
            IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
               ROLLBACK TO A;
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
             ELSE
               NUMOTIVESMODULE := GE_BOPARAMETER.FNUGET( CSBMOTIVE_MANAGE_MODULE );
               NUTARGETMODULE := GE_BOPARAMETER.FNUGET( CSBCUSTOMER_CARE_MODULE );
               GE_BONOTIFICATION.SETATTRIBUTE( SBINSTANCE, CSBADDRESS_ID, RCGETPROCADDRESSCHANGE.NUNEWPARSERID );
               GE_BONOTIFICATION.SENDNOTIFY( CNUNOTI_PROD, NUMOTIVESMODULE, SBINSTANCE, NUTARGETMODULE, NULOGID, NUERRORCODE, SBERRORMESSAGE );
               IF NVL( NUERRORCODE, 0 ) != GE_BOCONSTANTS.CNUSUCCESS THEN
                  RAISE EX.CONTROLLED_ERROR;
               END IF;
               RCMODULECHANGER.ADDRESS_CHANGE_ID := RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID;
               RCMODULECHANGER.MODULE_ID := NUPRODUCTMODULE;
               DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
               COMMIT;
            END IF;
          EXCEPTION
            WHEN EXCONTINUE THEN
               NULL;
            WHEN EX.CONTROLLED_ERROR THEN
               ROLLBACK TO A;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
            WHEN OTHERS THEN
               ROLLBACK TO A;
               ERRORS.SETERROR;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
         END;
         FETCH RFGETPROCADDRESSCHANGE
            INTO RCGETPROCADDRESSCHANGE;
      END LOOP;
      CLOSE RFGETPROCADDRESSCHANGE;
      UPDTOENDOFCHANGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRCHANGEINPRODUCTS;
   PROCEDURE MOTIADDRCHANGEBYADDRESS( INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE, INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      SBNEWADDRESS AB_ADDRESS.ADDRESS%TYPE;
      NUMOTIVESMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDMOTIVES GE_OBJECT.OBJECT_ID%TYPE;
      NUOBJUPDMOTICOMP GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBCOMPPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      NUERRORCODECOMP NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      NUMOTIVESMODULE := GE_BOPARAMETER.FNUGET( CSBMOTIVE_MANAGE_MODULE );
      NUOBJUPDMOTIVES := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_MOTIVES );
      NUOBJUPDMOTICOMP := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_MOTI_COMP );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDMOTIVES );
      SBCOMPPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDMOTICOMP );
      IF FBLISALREADYPROCESSED( INUADDRESSCHANGEID, NUMOTIVESMODULE ) THEN
         RETURN;
      END IF;
      VALINDCHANGEPENDREQUEST( INUOLDADDRESSID, INUADDRESSCHANGEID );
      NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
      SBNEWADDRESS := DAAB_ADDRESS.FSBGETADDRESS( INUNEWADDRESSID );
      MO_BOADDRESS.CHANGEADDRESDATA( INUOLDADDRESSID, INUNEWADDRESSID, SBNEWADDRESS );
      NUERRORCODECOMP := GE_BOCONSTANTS.CNUSUCCESS;
      MO_BOADDRESS.CHANGEADDRESDATACOMP( INUOLDADDRESSID, INUNEWADDRESSID, SBNEWADDRESS );
      RCMODULECHANGER.ADDRESS_CHANGE_ID := INUADDRESSCHANGEID;
      RCMODULECHANGER.MODULE_ID := NUMOTIVESMODULE;
      DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
   END MOTIADDRCHANGEBYADDRESS;
   PROCEDURE ADDRCHANGEINMOTIVES
    IS
      RFGETPROCADDRESSCHANGE TYRFGETPROCADDRESSCHANGE;
      RCGETPROCADDRESSCHANGE TYGETPROCADDRESSCHANGE;
      NUMOTIVESMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDMOTIVES GE_OBJECT.OBJECT_ID%TYPE;
      NUOBJUPDMOTICOMP GE_OBJECT.OBJECT_ID%TYPE;
      NUOBJUPDMOTIRELA GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBCOMPPROCESS GE_OBJECT.NAME_%TYPE;
      SBRELAPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      NUERRORCODECOMP NUMBER;
      NUERRORCODERELA NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      NUMOTIVESMODULE := GE_BOPARAMETER.FNUGET( CSBMOTIVE_MANAGE_MODULE );
      NUOBJUPDMOTIVES := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_MOTIVES );
      NUOBJUPDMOTICOMP := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_MOTI_COMP );
      NUOBJUPDMOTIRELA := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_MOTI_RELAT );
      SBRELAPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDMOTIRELA );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDMOTIVES );
      SBCOMPPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDMOTICOMP );
      GETFORCHANGEINMODULE( RFGETPROCADDRESSCHANGE );
      FETCH RFGETPROCADDRESSCHANGE
         INTO RCGETPROCADDRESSCHANGE;
      WHILE RFGETPROCADDRESSCHANGE%FOUND
       LOOP
         BEGIN
            SAVEPOINT A;
            IF NOT FBLISPOSSIBLELOCKCHANGE( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID ) THEN
               RAISE EXCONTINUE;
            END IF;
            IF FBLISALREADYPROCESSED( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUMOTIVESMODULE ) THEN
               ROLLBACK TO A;
               RAISE EXCONTINUE;
            END IF;
            VALCHANGEPENDINGREQUEST( RCGETPROCADDRESSCHANGE.NUOLDPARSERID, RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID );
            NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
            SBPLBLOCK := 'BEGIN ' || SBPROCESS || '(:inuParserAddresIdOld , :inuParserAddresIdNew, :isbAddress,' || ':onuErrorCode,:osbErrorMess); END;';
            EXECUTE IMMEDIATE ( SBPLBLOCK )
                              USING IN RCGETPROCADDRESSCHANGE.NUOLDPARSERID, IN RCGETPROCADDRESSCHANGE.NUNEWPARSERID, IN RCGETPROCADDRESSCHANGE.SBNEWADDRESS, OUT NUERRORCODE, OUT SBERRORMESSAGE;
            NUERRORCODECOMP := GE_BOCONSTANTS.CNUSUCCESS;
            SBPLBLOCK := 'BEGIN ' || SBCOMPPROCESS || '(:inuParserAddresIdOld , :inuParserAddresIdNew, :isbAddress,' || ':onuErrorCode,:osbErrorMess); END;';
            EXECUTE IMMEDIATE ( SBPLBLOCK )
                              USING IN RCGETPROCADDRESSCHANGE.NUOLDPARSERID, IN RCGETPROCADDRESSCHANGE.NUNEWPARSERID, IN RCGETPROCADDRESSCHANGE.SBNEWADDRESS, OUT NUERRORCODECOMP, OUT SBERRORMESSAGE;
            NUERRORCODERELA := GE_BOCONSTANTS.CNUSUCCESS;
            SBPLBLOCK := 'BEGIN ' || SBRELAPROCESS || '(:inuParserAddresIdOld , :inuParserAddresIdNew, :isbAddress,' || ':onuErrorCode,:osbErrorMess); END;';
            EXECUTE IMMEDIATE ( SBPLBLOCK )
                              USING IN RCGETPROCADDRESSCHANGE.NUOLDPARSERID, IN RCGETPROCADDRESSCHANGE.NUNEWPARSERID, IN RCGETPROCADDRESSCHANGE.SBNEWADDRESS, OUT NUERRORCODERELA, OUT SBERRORMESSAGE;
            IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS OR NUERRORCODECOMP != GE_BOCONSTANTS.CNUSUCCESS THEN
               ROLLBACK TO A;
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
             ELSE
               RCMODULECHANGER.ADDRESS_CHANGE_ID := RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID;
               RCMODULECHANGER.MODULE_ID := NUMOTIVESMODULE;
               DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
               COMMIT;
            END IF;
          EXCEPTION
            WHEN EXCONTINUE THEN
               NULL;
            WHEN EX.CONTROLLED_ERROR THEN
               ROLLBACK TO A;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
            WHEN OTHERS THEN
               ROLLBACK TO A;
               ERRORS.SETERROR;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
         END;
         FETCH RFGETPROCADDRESSCHANGE
            INTO RCGETPROCADDRESSCHANGE;
      END LOOP;
      CLOSE RFGETPROCADDRESSCHANGE;
      UPDTOENDOFCHANGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRCHANGEINMOTIVES;
   PROCEDURE INFRADDRCHANGEBYADDRESS( INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE, INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      SBNEWADDRESS AB_ADDRESS.ADDRESS%TYPE;
      NUINFRASTRUCTUREMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDINFRAST GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      NUINFRASTRUCTUREMODULE := GE_BOPARAMETER.FNUGET( CSBINFRAESTRUCT_MODULE );
      NUOBJUPDINFRAST := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_INFRAST );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDINFRAST );
      IF FBLISALREADYPROCESSED( INUADDRESSCHANGEID, NUINFRASTRUCTUREMODULE ) THEN
         RETURN;
      END IF;
      VALINDCHANGEPENDREQUEST( INUOLDADDRESSID, INUADDRESSCHANGEID );
      NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
      SBNEWADDRESS := DAAB_ADDRESS.FSBGETADDRESS( INUNEWADDRESSID );
      IF_BOELEMENT.UPDATEELEMENTADDRESS( INUOLDADDRESSID, INUNEWADDRESSID, SBNEWADDRESS );
      RCMODULECHANGER.ADDRESS_CHANGE_ID := INUADDRESSCHANGEID;
      RCMODULECHANGER.MODULE_ID := NUINFRASTRUCTUREMODULE;
      DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         SETERRORSTATUS( INUADDRESSCHANGEID, NUERRORCODE, SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
   END INFRADDRCHANGEBYADDRESS;
   PROCEDURE ADDRCHANGEININFRASTRUCTURE
    IS
      RFGETPROCADDRESSCHANGE TYRFGETPROCADDRESSCHANGE;
      RCGETPROCADDRESSCHANGE TYGETPROCADDRESSCHANGE;
      NUINFRASTRUCTUREMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDINFRAST GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      NUINFRASTRUCTUREMODULE := GE_BOPARAMETER.FNUGET( CSBINFRAESTRUCT_MODULE );
      NUOBJUPDINFRAST := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_INFRAST );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDINFRAST );
      GETFORCHANGEINMODULE( RFGETPROCADDRESSCHANGE );
      FETCH RFGETPROCADDRESSCHANGE
         INTO RCGETPROCADDRESSCHANGE;
      WHILE RFGETPROCADDRESSCHANGE%FOUND
       LOOP
         BEGIN
            SAVEPOINT A;
            IF NOT FBLISPOSSIBLELOCKCHANGE( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID ) THEN
               RAISE EXCONTINUE;
            END IF;
            IF FBLISALREADYPROCESSED( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUINFRASTRUCTUREMODULE ) THEN
               ROLLBACK TO A;
               RAISE EXCONTINUE;
            END IF;
            VALCHANGEPENDINGREQUEST( RCGETPROCADDRESSCHANGE.NUOLDPARSERID, RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID );
            NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
            SBPLBLOCK := 'BEGIN ' || SBPROCESS || '(:inuOldParserId , :inuNewParserId, :isbNewAddress,' || ':onuErrorCode,:osbErrorMessage); END;';
            EXECUTE IMMEDIATE ( SBPLBLOCK )
                              USING IN RCGETPROCADDRESSCHANGE.NUOLDPARSERID, IN RCGETPROCADDRESSCHANGE.NUNEWPARSERID, IN RCGETPROCADDRESSCHANGE.SBNEWADDRESS, OUT NUERRORCODE, OUT SBERRORMESSAGE;
            IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
               ROLLBACK TO A;
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
             ELSE
               RCMODULECHANGER.ADDRESS_CHANGE_ID := RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID;
               RCMODULECHANGER.MODULE_ID := NUINFRASTRUCTUREMODULE;
               DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
               COMMIT;
            END IF;
          EXCEPTION
            WHEN EXCONTINUE THEN
               NULL;
            WHEN EX.CONTROLLED_ERROR THEN
               ROLLBACK TO A;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
            WHEN OTHERS THEN
               ROLLBACK TO A;
               ERRORS.SETERROR;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
         END;
         FETCH RFGETPROCADDRESSCHANGE
            INTO RCGETPROCADDRESSCHANGE;
      END LOOP;
      CLOSE RFGETPROCADDRESSCHANGE;
      UPDTOENDOFCHANGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRCHANGEININFRASTRUCTURE;
   FUNCTION FBLALREADYCHANGED( INUOLDPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN
    IS
      CURSOR CUADDRESSCHANGE IS
SELECT 'x'
        FROM ab_address_change
        WHERE old_address_id = inuOldParserId
        AND rownum=1;
      SBDUMMY VARCHAR2( 1 );
    BEGIN
      OPEN CUADDRESSCHANGE;
      FETCH CUADDRESSCHANGE
         INTO SBDUMMY;
      IF CUADDRESSCHANGE%NOTFOUND THEN
         CLOSE CUADDRESSCHANGE;
         RETURN FALSE;
      END IF;
      CLOSE CUADDRESSCHANGE;
      RETURN TRUE;
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLALREADYCHANGED;
   FUNCTION ADDRESSEXISTSINPREMISE( INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE, ISBADDRESSPARSED IN AB_ADDRESS.ADDRESS_PARSED%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN
    IS
      CURSOR CUADDRESS IS
SELECT address_id FROM ab_address
        WHERE estate_number = inuEstateNumber
        AND address_parsed = isbAddressParsed;
    BEGIN
      OPEN CUADDRESS;
      FETCH CUADDRESS
         INTO ONUADDRESSID;
      IF CUADDRESS%FOUND THEN
         CLOSE CUADDRESS;
         RETURN TRUE;
       ELSE
         CLOSE CUADDRESS;
         RETURN FALSE;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
         IF CUADDRESS%ISOPEN THEN
            CLOSE CUADDRESS;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRESSEXISTSINPREMISE;
   PROCEDURE UPNEWADDRESS( NUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, NUNEWADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, NUESTATENUM IN AB_ADDRESS.ESTATE_NUMBER%TYPE, SBCHANGECATEGORY IN VARCHAR2 )
    IS
      NUINITSTATUSCHANGE AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
      SBISMAIN AB_ADDRESS.IS_MAIN%TYPE;
    BEGIN
      SBISMAIN := DAAB_ADDRESS.FSBGETIS_MAIN( NUOLDADDRESSID );
      DAAB_ADDRESS.UPDESTATE_NUMBER( NUNEWADDRESSID, NUESTATENUM );
      IF SBCHANGECATEGORY = GE_BOCONSTANTS.CSBYES THEN
         DAAB_ADDRESS.UPDIS_MAIN( NUNEWADDRESSID, SBISMAIN );
         IF SBISMAIN = GE_BOCONSTANTS.CSBYES THEN
            DAAB_ADDRESS.UPDIS_MAIN( NUOLDADDRESSID, GE_BOCONSTANTS.CSBNO );
         END IF;
      END IF;
      NUINITSTATUSCHANGE := GE_BOPARAMETER.FNUGET( CSBAB_CHANGE_NEW );
      INSADDRESSCHANGELOG( NUOLDADDRESSID, NUNEWADDRESSID, NUINITSTATUSCHANGE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPNEWADDRESS;
   FUNCTION FBLVALIDATENEIGHEXIST( INUNEWNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, INUGEOGRAPLOCATIONID IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESS OUT VARCHAR2 )
    RETURN BOOLEAN
    IS
      NUNEIGHID GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
      SBNEIGHDESC GE_GEOGRA_LOCATION.DESCRIPTION%TYPE;
      RFNEIGHBYGEOLOC CONSTANTS.TYREFCURSOR;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddressChange.fblValidateNeighExist', 2 );
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAPLOCATIONID );
      IF INUNEWNEIGHBORTHOODID IS NOT NULL THEN
         GE_BCGEOGRA_LOCATION.GETNEIGHBORHOODSBYFATHER( INUGEOGRAPLOCATIONID, RFNEIGHBYGEOLOC );
         LOOP
            FETCH RFNEIGHBYGEOLOC
               INTO NUNEIGHID, SBNEIGHDESC;
            EXIT WHEN RFNEIGHBYGEOLOC%NOTFOUND;
            IF NUNEIGHID = INUNEWNEIGHBORTHOODID THEN
               RETURN TRUE;
            END IF;
         END LOOP;
         UT_TRACE.TRACE( 'End AB_BOAddressChange.fblValidateNeighExist', 2 );
         ONUERRORCODE := -999;
         OSBERRORMESS := 'El barrio [' || INUNEWNEIGHBORTHOODID || '] no pertenece a la ubicacion geografica[' || INUGEOGRAPLOCATIONID || ']';
         RETURN FALSE;
      END IF;
      UT_TRACE.TRACE( 'End AB_BOAddressChange.fblValidateNeighExist', 2 );
      RETURN TRUE;
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESS );
         RETURN FALSE;
   END FBLVALIDATENEIGHEXIST;
   PROCEDURE UPDATEPREMISE( INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUOLDPREMISE IN AB_PREMISE.PREMISE_ID%TYPE, ISBOLDVERIFIED IN AB_ADDRESS.VERIFIED%TYPE )
    IS
      RCNEWPREMISE DAAB_PREMISE.STYAB_PREMISE;
      RCOLDPREMISE DAAB_PREMISE.STYAB_PREMISE;
      RCNEWINFOPREMISE DAAB_INFO_PREMISE.STYAB_INFO_PREMISE;
      RCOLDINFOPREMISE DAAB_INFO_PREMISE.STYAB_INFO_PREMISE;
      NUNEWINFOPREMISEID AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE;
      NUOLDINFOPREMISEID AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE;
      RFREFCURSOR CONSTANTS.TYREFCURSOR;
      TBNEWPREINST DAAB_PREDIO_TIPO_INST.TYTBAB_PREDIO_TIPO_INST;
      TBOLDPREINST DAAB_PREDIO_TIPO_INST.TYTBAB_PREDIO_TIPO_INST;
      RCPRETIPOINST DAAB_PREDIO_TIPO_INST.STYAB_PREDIO_TIPO_INST;
      BLPRETIPOINS BOOLEAN;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddressChange.updatePremise ', 4 );
      DAAB_PREMISE.GETRECORD( INUOLDPREMISE, RCOLDPREMISE );
      DAAB_PREMISE.GETRECORD( DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUNEWADDRESSID ), RCNEWPREMISE );
      RCNEWPREMISE.PREMISE_TYPE_ID := RCOLDPREMISE.PREMISE_TYPE_ID;
      RCNEWPREMISE.ZIP_CODE_ID := RCOLDPREMISE.ZIP_CODE_ID;
      RCNEWPREMISE.OWNER := RCOLDPREMISE.OWNER;
      RCNEWPREMISE.HOUSE_AMOUNT := RCOLDPREMISE.HOUSE_AMOUNT;
      RCNEWPREMISE.ROOMS_AMOUNT := RCOLDPREMISE.ROOMS_AMOUNT;
      RCNEWPREMISE.FLOORS_AMOUNT := RCOLDPREMISE.FLOORS_AMOUNT;
      RCNEWPREMISE.OFICCES_AMOUNT := RCOLDPREMISE.OFICCES_AMOUNT;
      RCNEWPREMISE.BLOCKS_AMOUNT := RCOLDPREMISE.BLOCKS_AMOUNT;
      RCNEWPREMISE.APARTAMENTS_AMOUNT := RCOLDPREMISE.APARTAMENTS_AMOUNT;
      RCNEWPREMISE.LOCALS_AMOUNT := RCOLDPREMISE.LOCALS_AMOUNT;
      RCNEWPREMISE.FLOOR_NUMBER := RCOLDPREMISE.FLOOR_NUMBER;
      RCNEWPREMISE.APARTAMENT_NUMBER := RCOLDPREMISE.APARTAMENT_NUMBER;
      RCNEWPREMISE.SERVANTS_PASSAGE := RCOLDPREMISE.SERVANTS_PASSAGE;
      RCNEWPREMISE.SETBACK_BUILDING := RCOLDPREMISE.SETBACK_BUILDING;
      RCNEWPREMISE.PREMISE_STATUS_ID := RCOLDPREMISE.PREMISE_STATUS_ID;
      RCNEWPREMISE.SALEDATE := RCOLDPREMISE.SALEDATE;
      RCNEWPREMISE.COOWNERSHIP_RATIO := RCOLDPREMISE.COOWNERSHIP_RATIO;
      DAAB_PREMISE.UPDRECORD( RCNEWPREMISE );
      IF ( ISBOLDVERIFIED != CSBYES ) THEN
         AB_BCADDRESSCHANGE.UPDPREMISELOG( RCOLDPREMISE.PREMISE_ID, RCNEWPREMISE.PREMISE_ID );
       ELSE
         IF ( RCNEWPREMISE.PREMISE_STATUS_ID IS NOT NULL ) THEN
            AB_BOPREMISE.UPDPREMISESTATUS( INUNEWADDRESSID, RCNEWPREMISE.PREMISE_STATUS_ID );
         END IF;
      END IF;
      NUOLDINFOPREMISEID := AB_BOPREMISE.FNUGETIDINFOPREMISE( RCOLDPREMISE.PREMISE_ID, FALSE );
      IF NUOLDINFOPREMISEID IS NOT NULL THEN
         IF ( ISBOLDVERIFIED != CSBYES ) THEN
            DAAB_INFO_PREMISE.GETRECORD( NUOLDINFOPREMISEID, RCOLDINFOPREMISE );
            RCNEWINFOPREMISE := RCOLDINFOPREMISE;
            RCNEWINFOPREMISE.INFO_PREMISE_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE( 'ab_info_premise', 'seq_ab_info_premise_187754' );
            RCNEWINFOPREMISE.PREMISE_ID := RCNEWPREMISE.PREMISE_ID;
            DAAB_INFO_PREMISE.INSRECORD( RCNEWINFOPREMISE );
          ELSE
            DAAB_INFO_PREMISE.UPDPREMISE_ID( NUOLDINFOPREMISEID, RCNEWPREMISE.PREMISE_ID );
         END IF;
      END IF;
      AB_BOREGISTROPREDIO.OBTPREDIOSPORINST( INUOLDADDRESSID, RFREFCURSOR );
      FETCH RFREFCURSOR
         BULK COLLECT INTO TBOLDPREINST;
      CLOSE RFREFCURSOR;
      IF TBOLDPREINST.FIRST IS NOT NULL THEN
         FOR XOLDPREINST IN TBOLDPREINST.FIRST..TBOLDPREINST.LAST
          LOOP
            DAAB_PREDIO_TIPO_INST.GETRECORD( TBOLDPREINST( XOLDPREINST ).ID_PREDIO_TIPO_INST, RCPRETIPOINST );
            RCPRETIPOINST.ID_PREDIO_TIPO_INST := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE( 'ab_predio_tipo_inst', 'seq_ab_predio_tipo_inst' );
            RCPRETIPOINST.ID_PREDIO := RCNEWPREMISE.PREMISE_ID;
            DAAB_PREDIO_TIPO_INST.INSRECORD( RCPRETIPOINST );
            RCPRETIPOINST := NULL;
            IF ( ISBOLDVERIFIED != CSBYES ) THEN
               DAAB_PREDIO_TIPO_INST.DELRECORD( TBOLDPREINST( XOLDPREINST ).ID_PREDIO_TIPO_INST );
            END IF;
         END LOOP;
      END IF;
      UT_TRACE.TRACE( 'END AB_BOAddressChange.updatePremise', 4 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddressChange.updatePremise', 4 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddressChange.updatePremise', 4 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDATEPREMISE;

    /**************************************************************************
    Propiedad Intelectual de PETI

    Funcion     : ADDRESSCHANGE
    Descripcion : Procedimiento

    Historia de Modificaciones
      Fecha               Autor                Modificacion
    =========           =========          ====================
    25-10-2014        oparra.Team659        Creacion
    **************************************************************************/
    PROCEDURE ADDRESSCHANGE
    (
        INUOLDADDRESSID         IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        ISBNEWADDRESS           IN  AB_ADDRESS.ADDRESS%TYPE,
        INUNEWGEOLOCATIONID     IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        INUNEWNEIGHBORHOODID    IN  AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE,
        INUCONSECUTIVE          IN  AB_PREMISE.CONSECUTIVE%TYPE,
        ONUNEWADDRESSID         OUT AB_ADDRESS.ADDRESS_ID%TYPE,
        ONUFATHERADDID          OUT AB_ADDRESS.ADDRESS_ID%TYPE
    )
    IS
      RCOLDADDRESS      DAAB_ADDRESS.STYAB_ADDRESS;
      NUNEWADDRESSID    AB_ADDRESS.ADDRESS_ID%TYPE;
      SBNEWADDRPARSED   AB_ADDRESS.ADDRESS_PARSED%TYPE;
      RCDIRPARSEADA     AB_BOPARSER.TYRCDIRPARSEADA;
      NUPREMISEID       AB_PREMISE.PREMISE_ID%TYPE;
      NUERROR           NUMBER;
      SBERROR           VARCHAR2( 10000 );

    BEGIN

      UT_TRACE.TRACE( 'Inicia AB_BOAddressChange.AddressChange' || CHR( 10 ) || 'Direccion Actual: ' || INUOLDADDRESSID || CHR( 10 ) || 'Direccion Nueva: ' || ISBNEWADDRESS || CHR( 10 ) || 'Ubicacion Geografica: ' || INUNEWGEOLOCATIONID || CHR( 10 ) || 'Barrio: ' || INUNEWNEIGHBORHOODID || CHR( 10 ) || 'Consecutivo: ' || INUCONSECUTIVE, 4 );

      DAAB_ADDRESS.GETRECORD( INUOLDADDRESSID, RCOLDADDRESS );
      NUNEWADDRESSID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBNEWADDRESS, INUNEWGEOLOCATIONID, NUERROR, SBERROR );

      IF NUNEWADDRESSID != -1 THEN
         UT_TRACE.TRACE( 'La direccion nueva existe : ' || NUNEWADDRESSID, 5 );

         IF INUOLDADDRESSID = NUNEWADDRESSID THEN
            ERRORS.SETERROR( CNUERR17564 );
            RAISE EX.CONTROLLED_ERROR;
         END IF;

         IF DAAB_ADDRESS.FSBGETIS_MAIN( NUNEWADDRESSID, 0 ) != CSBYES THEN
            ERRORS.SETERROR( CNUERR901739, ISBNEWADDRESS );
            RAISE EX.CONTROLLED_ERROR;
         END IF;

         AB_BCADDRESSCHANGE.UPDASOCIADDRESS
         (
            INUOLDADDRESSID,
            NUNEWADDRESSID,
            ISBNEWADDRESS,
            INUNEWGEOLOCATIONID,
            DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUNEWADDRESSID, 0 )
          );
         UT_TRACE.TRACE( 'La direccion [' || INUOLDADDRESSID || '] ha sido reemplazada por la direccion existente [' || NUNEWADDRESSID || ']', 5 );

      ELSE
         UT_TRACE.TRACE( 'La direccion nueva NO existe', 5 );

         IF ( ( AB_BOADDRESS.FBLISFATHERADDRESS( INUOLDADDRESSID ) ) OR
            ( RCOLDADDRESS.GEOGRAP_LOCATION_ID != INUNEWGEOLOCATIONID ) ) THEN

            -- llama a paquete modificado
            LDC_AB_BOADDRESSPARSER.CREAACTUALIZADIRECCION
            (
                INUNEWGEOLOCATIONID,
                ISBNEWADDRESS,
                INUNEWNEIGHBORHOODID,
                RCOLDADDRESS.IS_URBAN,
                NUNEWADDRESSID,
                SBNEWADDRPARSED,
                ONUFATHERADDID
            );

            AB_BCADDRESSCHANGE.UPDASOCIADDRESS
            (
                INUOLDADDRESSID,
                NUNEWADDRESSID,
                ISBNEWADDRESS,
                INUNEWGEOLOCATIONID,
                DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUNEWADDRESSID, 0 )
            );

            UPDATEPREMISE( INUOLDADDRESSID, NUNEWADDRESSID, RCOLDADDRESS.ESTATE_NUMBER, RCOLDADDRESS.VERIFIED );

            IF ( RCOLDADDRESS.VERIFIED != CSBYES ) THEN
               DAAB_ADDRESS.DELRECORD( RCOLDADDRESS.ADDRESS_ID );
               AB_BCADDRESSCHANGE.UPDASOCIPREMISE( RCOLDADDRESS.ESTATE_NUMBER, DAAB_ADDRESS.FNUGETESTATE_NUMBER( NUNEWADDRESSID, 0 ) );
               DAAB_PREMISE.DELRECORD( RCOLDADDRESS.ESTATE_NUMBER );
            END IF;
            UT_TRACE.TRACE( 'La direccion [' || INUOLDADDRESSID || '] ha sido reemplazada por la nueva direccion [' || NUNEWADDRESSID || ']', 5 );

         ELSE
            UT_TRACE.TRACE( 'La direccion actual NO tiene direcciones hijas y se actualiza', 5 );

            RCOLDADDRESS.ADDRESS            := ISBNEWADDRESS;
            RCOLDADDRESS.ADDRESS_PARSED     := ISBNEWADDRESS;
            RCOLDADDRESS.FATHER_ADDRESS_ID  := NULL;
            RCOLDADDRESS.IS_VALID           := GE_BOCONSTANTS.CSBNO;

            IF INUNEWNEIGHBORHOODID IS NOT NULL THEN
               RCOLDADDRESS.NEIGHBORTHOOD_ID := INUNEWNEIGHBORHOODID;
            END IF;

            AB_BOPARSER.COMPLETAREGISDIR( RCOLDADDRESS.GEOGRAP_LOCATION_ID, RCOLDADDRESS.IS_URBAN, RCOLDADDRESS.ADDRESS_ID, RCDIRPARSEADA, RCOLDADDRESS );
            DAAB_ADDRESS.UPDRECORD( RCOLDADDRESS );

            -- Se llama paquete modificado
            LDC_AB_BOADDRESSPARSER.CREAACTUALIZADIRECCION
            (
                RCOLDADDRESS.GEOGRAP_LOCATION_ID,
                ISBNEWADDRESS,
                RCOLDADDRESS.NEIGHBORTHOOD_ID,
                RCOLDADDRESS.IS_URBAN,
                NUNEWADDRESSID,
                SBNEWADDRPARSED,
                ONUFATHERADDID
            );

            AB_BCADDRESSCHANGE.UPDASOCIADDRESS
            (
                INUOLDADDRESSID,
                NUNEWADDRESSID,
                ISBNEWADDRESS,
                INUNEWGEOLOCATIONID,
                DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUNEWADDRESSID, 0 )
            );

            UT_TRACE.TRACE( 'La direccion actual [' || RCOLDADDRESS.ADDRESS_ID || '] a sido actualizada: ' || NUNEWADDRESSID || ' - ' || INUOLDADDRESSID, 5 );
         END IF;

         IF INUCONSECUTIVE IS NOT NULL THEN
            NUPREMISEID := DAAB_ADDRESS.FNUGETESTATE_NUMBER( NUNEWADDRESSID );
            DAAB_PREMISE.UPDCONSECUTIVE( NUPREMISEID, INUCONSECUTIVE );
         END IF;
      END IF;

      ONUNEWADDRESSID := NUNEWADDRESSID;
      UT_TRACE.TRACE( 'END AB_BOAddressChange.AddressChange', 4 );

    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddressChange.AddressChange', 4 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddressChange.AddressChange', 4 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRESSCHANGE;
   --------

   PROCEDURE INDADDRESSCHANGE( INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, IBLVALMAINADDRES IN BOOLEAN, ISBISURBAN IN VARCHAR2 := NULL )
    IS
      NUNEWPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBADDRESS AB_ADDRESS.ADDRESS%TYPE;
      SBNEWADDRPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUGEOLOCATIONID AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
      NUERR GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRM GE_MESSAGE.DESCRIPTION%TYPE;
      SBISMAIN AB_ADDRESS.IS_MAIN%TYPE;
      NUNEWMAINPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBSAMECATEGORY VARCHAR2( 1 );
      NUZIPCODE NUMBER;
    BEGIN
      NUERR := GE_BOCONSTANTS.CNUSUCCESS;
      DAAB_ADDRESS.ACCKEY( INUOLDADDRESSID );
      IF FBLALREADYCHANGED( INUOLDADDRESSID ) THEN
         ERRORS.SETERROR( NUALREADY_CHANGED );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUGEOLOCATIONID := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( INUOLDADDRESSID );
      NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUOLDADDRESSID );
      SBISMAIN := DAAB_ADDRESS.FSBGETIS_MAIN( INUOLDADDRESSID );
      IF SBISMAIN = GE_BOCONSTANTS.CSBYES THEN
         NUNEWPARSERID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBNEWADDRESS, NUGEOLOCATIONID, NUERR, SBERRM );
         UT_JAVA.VALIDATEERROR( NUERR, SBERRM );
         IF NUNEWPARSERID = -1 THEN
            NUNEWPARSERID := AB_BOSEQUENCE.FNUNEXTADDRESS;
            AB_BOADDRESSPARSER.INSERTADDRESS( ISBNEWADDRESS, NUGEOLOCATIONID, NUNEWPARSERID, INUNEIGHBORHOODID, SBNEWADDRPARSED, NUERR, SBERRM, ISBISURBAN );
            UT_JAVA.VALIDATEERROR( NUERR, SBERRM );
            DAAB_ADDRESS.UPDZIP_CODE_ID( NUNEWPARSERID, NUZIPCODE );
            UPNEWADDRESS( INUOLDADDRESSID, NUNEWPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
            SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
            ADDRCHANGEPRODCOUNTERS( INUOLDADDRESSID, NUNEWPARSERID, ISBNEWADDRESS, SBSAMECATEGORY );
            RETURN;
         END IF;
         SBNEWADDRPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUNEWPARSERID );
         IF AB_BOADDRESS.FBLARETHEREMAINADDR( NUGEOLOCATIONID, SBNEWADDRPARSED, NUNEWMAINPARSERID ) THEN
            IF IBLVALMAINADDRES THEN
               ERRORS.SETERROR( CNUDUP_MAIN_ADDRESS );
               RAISE EX.CONTROLLED_ERROR;
             ELSE
               UPNEWADDRESS( INUOLDADDRESSID, NUNEWMAINPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
               SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
               ADDRCHANGEPRODCOUNTERS( INUOLDADDRESSID, NUNEWMAINPARSERID, ISBNEWADDRESS, SBSAMECATEGORY );
               RETURN;
            END IF;
         END IF;
         IF ADDRESSEXISTSINPREMISE( NUESTATENUMBER, SBNEWADDRPARSED, NUNEWPARSERID ) THEN
            UPNEWADDRESS( INUOLDADDRESSID, NUNEWPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
            SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( NUNEWPARSERID );
            SBISMAIN := DAAB_ADDRESS.FSBGETIS_MAIN( NUNEWPARSERID );
            IF SBISMAIN = GE_BOCONSTANTS.CSBYES THEN
               SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
             ELSE
               SBSAMECATEGORY := GE_BOCONSTANTS.CSBYES;
            END IF;
            ADDRCHANGEPRODCOUNTERS( INUOLDADDRESSID, NUNEWPARSERID, SBADDRESS, SBSAMECATEGORY );
            RETURN;
         END IF;
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUADDRINOTHERESTATE, SBNEWADDRPARSED );
      END IF;
      NUNEWPARSERID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBNEWADDRESS, NUGEOLOCATIONID, NUERR, SBERRM );
      UT_JAVA.VALIDATEERROR( NUERR, SBERRM );
      IF NUNEWPARSERID = -1 THEN
         NUNEWPARSERID := AB_BOSEQUENCE.FNUNEXTADDRESS;
         AB_BOADDRESSPARSER.INSERTADDRESS( ISBNEWADDRESS, NUGEOLOCATIONID, NUNEWPARSERID, INUNEIGHBORHOODID, SBNEWADDRPARSED, NUERR, SBERRM, ISBISURBAN );
         UT_JAVA.VALIDATEERROR( NUERR, SBERRM );
         DAAB_ADDRESS.UPDZIP_CODE_ID( NUNEWPARSERID, NUZIPCODE );
         UPNEWADDRESS( INUOLDADDRESSID, NUNEWPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
         SBSAMECATEGORY := GE_BOCONSTANTS.CSBYES;
         ADDRCHANGEPRODCOUNTERS( INUOLDADDRESSID, NUNEWPARSERID, ISBNEWADDRESS, SBSAMECATEGORY );
         RETURN;
      END IF;
      SBNEWADDRPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUNEWPARSERID );
      IF AB_BOADDRESS.FBLARETHEREMAINADDR( NUGEOLOCATIONID, SBNEWADDRPARSED, NUNEWMAINPARSERID ) THEN
         IF IBLVALMAINADDRES THEN
            ERRORS.SETERROR( CNUDUP_MAIN_ADDRESS );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            UPNEWADDRESS( INUOLDADDRESSID, NUNEWMAINPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
            SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
            ADDRCHANGEPRODCOUNTERS( INUOLDADDRESSID, NUNEWMAINPARSERID, ISBNEWADDRESS, SBSAMECATEGORY );
            RETURN;
         END IF;
      END IF;
      SBNEWADDRPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUNEWPARSERID );
      IF ADDRESSEXISTSINPREMISE( NUESTATENUMBER, SBNEWADDRPARSED, NUNEWPARSERID ) THEN
         UPNEWADDRESS( INUOLDADDRESSID, NUNEWPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBNO );
         SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( NUNEWPARSERID );
         SBISMAIN := DAAB_ADDRESS.FSBGETIS_MAIN( NUNEWPARSERID );
         IF SBISMAIN = GE_BOCONSTANTS.CSBYES THEN
            SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
          ELSE
            SBSAMECATEGORY := GE_BOCONSTANTS.CSBYES;
         END IF;
         ADDRCHANGEPRODCOUNTERS( INUOLDADDRESSID, NUNEWPARSERID, SBADDRESS, SBSAMECATEGORY );
         RETURN;
      END IF;
      GE_BOERRORS.SETERRORCODEARGUMENT( CNUADDRINOTHERESTATE, SBNEWADDRPARSED );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INDADDRESSCHANGE;
   PROCEDURE ADDRESSCHANGEID( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBOLDADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUOLDADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ONUNEWADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ISBISURBAN IN VARCHAR2 := NULL )
    IS
      NUOLDPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUNEWPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUOLDMAINID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBNEWADDRPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      SBADDRESS AB_ADDRESS.ADDRESS%TYPE;
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
      NUERR GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRM GE_MESSAGE.DESCRIPTION%TYPE;
      SBISMAIN AB_ADDRESS.IS_MAIN%TYPE;
      SBSAMECATEGORY VARCHAR2( 1 );
      NUZIPCODE NUMBER;
    BEGIN
      NUERR := GE_BOCONSTANTS.CNUSUCCESS;
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
      AB_BOPARSERWRAP.CHECKIFADDRESSNOTEXISTSINDB( INUGEOLOCATIONID, ISBOLDADDRESS, NUOLDPARSERID );
      IF FBLALREADYCHANGED( NUOLDPARSERID ) THEN
         ERRORS.SETERROR( NUALREADY_CHANGED );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( NUOLDPARSERID );
      SBISMAIN := DAAB_ADDRESS.FSBGETIS_MAIN( NUOLDPARSERID );
      IF SBISMAIN = GE_BOCONSTANTS.CSBYES THEN
         NUNEWPARSERID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBNEWADDRESS, INUGEOLOCATIONID, NUERR, SBERRM );
         UT_JAVA.VALIDATEERROR( NUERR, SBERRM );
         IF NUNEWPARSERID = -1 THEN
            NUNEWPARSERID := AB_BOSEQUENCE.FNUNEXTADDRESS;
            AB_BOADDRESSPARSER.INSERTADDRESS( ISBNEWADDRESS, INUGEOLOCATIONID, NUNEWPARSERID, INUNEIGHBORHOODID, SBNEWADDRPARSED, NUERR, SBERRM, ISBISURBAN );
            UT_JAVA.VALIDATEERROR( NUERR, SBERRM );
            DAAB_ADDRESS.UPDZIP_CODE_ID( NUNEWPARSERID, NUZIPCODE );
            UPNEWADDRESS( NUOLDPARSERID, NUNEWPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
            SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
            ADDRCHANGEPRODCOUNTERS( NUOLDPARSERID, NUNEWPARSERID, ISBNEWADDRESS, SBSAMECATEGORY );
            ONUOLDADDRESSID := NUOLDPARSERID;
            ONUNEWADDRESSID := NUNEWPARSERID;
            RETURN;
         END IF;
         SBNEWADDRPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUNEWPARSERID );
         IF AB_BOADDRESS.FBLARETHEREMAINADDR( INUGEOLOCATIONID, SBNEWADDRPARSED, NUOLDMAINID ) THEN
            ERRORS.SETERROR( CNUDUP_MAIN_ADDRESS );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         SBNEWADDRPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUNEWPARSERID );
         IF ADDRESSEXISTSINPREMISE( NUESTATENUMBER, SBNEWADDRPARSED, NUNEWPARSERID ) THEN
            UPNEWADDRESS( NUOLDPARSERID, NUNEWPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
            SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( NUNEWPARSERID );
            SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
            ADDRCHANGEPRODCOUNTERS( NUOLDPARSERID, NUNEWPARSERID, SBADDRESS, SBSAMECATEGORY );
            ONUOLDADDRESSID := NUOLDPARSERID;
            ONUNEWADDRESSID := NUNEWPARSERID;
            RETURN;
         END IF;
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUADDRINOTHERESTATE, SBNEWADDRPARSED );
      END IF;
      NUNEWPARSERID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBNEWADDRESS, INUGEOLOCATIONID, NUERR, SBERRM );
      UT_JAVA.VALIDATEERROR( NUERR, SBERRM );
      IF NUNEWPARSERID = -1 THEN
         NUNEWPARSERID := AB_BOSEQUENCE.FNUNEXTADDRESS;
         AB_BOADDRESSPARSER.INSERTADDRESS( ISBNEWADDRESS, INUGEOLOCATIONID, NUNEWPARSERID, INUNEIGHBORHOODID, SBNEWADDRPARSED, NUERR, SBERRM, ISBISURBAN );
         UT_JAVA.VALIDATEERROR( NUERR, SBERRM );
         DAAB_ADDRESS.UPDZIP_CODE_ID( NUNEWPARSERID, NUZIPCODE );
         UPNEWADDRESS( NUOLDPARSERID, NUNEWPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
         SBSAMECATEGORY := GE_BOCONSTANTS.CSBYES;
         ADDRCHANGEPRODCOUNTERS( NUOLDPARSERID, NUNEWPARSERID, ISBNEWADDRESS, SBSAMECATEGORY );
         ONUOLDADDRESSID := NUOLDPARSERID;
         ONUNEWADDRESSID := NUNEWPARSERID;
         RETURN;
      END IF;
      SBNEWADDRPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUNEWPARSERID );
      IF AB_BOADDRESS.FBLARETHEREMAINADDR( INUGEOLOCATIONID, SBNEWADDRPARSED, NUOLDMAINID ) THEN
         ERRORS.SETERROR( CNUDUP_MAIN_ADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      SBNEWADDRPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUNEWPARSERID );
      IF ADDRESSEXISTSINPREMISE( NUESTATENUMBER, SBNEWADDRPARSED, NUNEWPARSERID ) THEN
         UPNEWADDRESS( NUOLDPARSERID, NUNEWPARSERID, NUESTATENUMBER, GE_BOCONSTANTS.CSBNO );
         SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( NUNEWPARSERID );
         SBISMAIN := DAAB_ADDRESS.FSBGETIS_MAIN( NUNEWPARSERID );
         IF SBISMAIN = GE_BOCONSTANTS.CSBYES THEN
            SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
          ELSE
            SBSAMECATEGORY := GE_BOCONSTANTS.CSBYES;
         END IF;
         SBSAMECATEGORY := GE_BOCONSTANTS.CSBYES;
         ADDRCHANGEPRODCOUNTERS( NUOLDPARSERID, NUNEWPARSERID, SBADDRESS, SBSAMECATEGORY );
         ONUOLDADDRESSID := NUOLDPARSERID;
         ONUNEWADDRESSID := NUNEWPARSERID;
         RETURN;
      END IF;
      GE_BOERRORS.SETERRORCODEARGUMENT( CNUADDRINOTHERESTATE, SBNEWADDRPARSED );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRESSCHANGEID;
   PROCEDURE ADDRESSCHANGEBYID( INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      SBNEWADDRPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      SBADDRESS AB_ADDRESS.ADDRESS%TYPE;
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
      NUGEOLOCATIONID AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
      NUERR GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRM GE_MESSAGE.DESCRIPTION%TYPE;
      SBISMAIN AB_ADDRESS.IS_MAIN%TYPE;
      NUADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBSAMECATEGORY VARCHAR2( 1 );
    BEGIN
      NUERR := GE_BOCONSTANTS.CNUSUCCESS;
      DAAB_ADDRESS.ACCKEY( INUOLDADDRESSID );
      DAAB_ADDRESS.ACCKEY( INUNEWADDRESSID );
      NUGEOLOCATIONID := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( INUOLDADDRESSID );
      IF FBLALREADYCHANGED( INUOLDADDRESSID ) THEN
         ERRORS.SETERROR( NUALREADY_CHANGED );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUOLDADDRESSID );
      SBISMAIN := DAAB_ADDRESS.FSBGETIS_MAIN( INUOLDADDRESSID );
      SBNEWADDRPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( INUNEWADDRESSID );
      IF SBISMAIN = GE_BOCONSTANTS.CSBYES THEN
         IF AB_BOADDRESS.FBLARETHEREMAINADDR( NUGEOLOCATIONID, SBNEWADDRPARSED, NUADDRESSID ) THEN
            ERRORS.SETERROR( CNUDUP_MAIN_ADDRESS );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF ADDRESSEXISTSINPREMISE( NUESTATENUMBER, SBNEWADDRPARSED, NUADDRESSID ) THEN
            UPNEWADDRESS( INUOLDADDRESSID, NUADDRESSID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
            SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( NUADDRESSID );
            SBSAMECATEGORY := GE_BOCONSTANTS.CSBNO;
            ADDRCHANGEPRODCOUNTERS( INUOLDADDRESSID, NUADDRESSID, SBADDRESS, SBSAMECATEGORY );
            RETURN;
         END IF;
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUADDRINOTHERESTATE, SBNEWADDRPARSED );
      END IF;
      IF AB_BOADDRESS.FBLARETHEREMAINADDR( NUGEOLOCATIONID, SBNEWADDRPARSED, NUADDRESSID ) THEN
         ERRORS.SETERROR( CNUDUP_MAIN_ADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UPNEWADDRESS( INUOLDADDRESSID, INUNEWADDRESSID, NUESTATENUMBER, GE_BOCONSTANTS.CSBYES );
      SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( INUNEWADDRESSID );
      SBSAMECATEGORY := GE_BOCONSTANTS.CSBYES;
      ADDRCHANGEPRODCOUNTERS( INUOLDADDRESSID, INUNEWADDRESSID, SBADDRESS, SBSAMECATEGORY );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRESSCHANGEBYID;
   PROCEDURE UPDADDRESS( INUADDRESSCHANGEID IN AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE, INUOLDPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
    BEGIN
      IF NVL( INUOLDPARSERID, 0 ) = 0 OR NVL( INUNEWPARSERID, 0 ) = 0 THEN
         RETURN;
      END IF;
      UPDADDRESSCOUNTERS( INUOLDPARSERID, INUNEWPARSERID );
      IF ( GE_BOPARAMETER.FSBGET( CSBAB_CH_AUTO_DEPEND ) = GE_BOCONSTANTS.CSBYES ) THEN
         PRODADDRCHANGEBYADDRESS( INUADDRESSCHANGEID, INUOLDPARSERID, INUNEWPARSERID );
         MOTIADDRCHANGEBYADDRESS( INUADDRESSCHANGEID, INUOLDPARSERID, INUNEWPARSERID );
         INFRADDRCHANGEBYADDRESS( INUADDRESSCHANGEID, INUOLDPARSERID, INUNEWPARSERID );
         INDUPDTOENDOFCHANGE( INUADDRESSCHANGEID );
         DAAB_ADDRESS.DELRECORD( INUOLDPARSERID );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDADDRESS;
   PROCEDURE PROCESSNREGISTERINDADDRCHANGE
    IS
      NUOLDADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUNEWADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBOLDADDRESS GE_BOINSTANCECONTROL.STYSBVALUE;
      SBNEWADDRESS_ID GE_BOINSTANCECONTROL.STYSBVALUE;
      NUOLDGEOGRAP_LOCATION_ID AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
      NUNEWGEOGRAP_LOCATION_ID AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
      NUNEWNEIGHBORTHOOD_ID AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
      SBNEWADDRESS AB_ADDRESS.ADDRESS%TYPE;
      NUADDRESSCHANGEID AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE;
      NUDUMMYADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBNEWADDRISURBAN AB_ADDRESS.IS_URBAN%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicia proceso AB_BOAddressChange.AddressChange', 4 );
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( CSBWORK_INSTANCE, '', 'AB_ADDRESS', 'ADDRESS_ID', SBOLDADDRESS );
      SBNEWADDRESS_ID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'AB_ADDRESS', 'ADDRESS' );
      NUOLDADDRESSID := TO_NUMBER( SBOLDADDRESS );
      NUNEWADDRESSID := TO_NUMBER( SBNEWADDRESS_ID );
      NUOLDGEOGRAP_LOCATION_ID := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( NUOLDADDRESSID );
      NUNEWGEOGRAP_LOCATION_ID := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( NUNEWADDRESSID );
      NUNEWNEIGHBORTHOOD_ID := DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUNEWADDRESSID );
      SBNEWADDRISURBAN := DAAB_ADDRESS.FSBGETIS_URBAN( NUNEWADDRESSID );
      IF NUOLDGEOGRAP_LOCATION_ID != NUNEWGEOGRAP_LOCATION_ID THEN
         ERRORS.SETERROR( CNUDIFFGEOGRAPLOCATION );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      SBNEWADDRESS := DAAB_ADDRESS.FSBGETADDRESS( NUNEWADDRESSID );
      NUNEWNEIGHBORTHOOD_ID := DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUNEWADDRESSID );
      AB_BCADDRESSCHANGE.UPDASOCIADDRESS( NUOLDADDRESSID, NUNEWADDRESSID, SBNEWADDRESS, NUNEWGEOGRAP_LOCATION_ID, NUNEWNEIGHBORTHOOD_ID );
      UT_TRACE.TRACE( 'La direccion [' || NUOLDADDRESSID || '] ha sido reemplazada por la nueva direccion [' || NUNEWADDRESSID || ']', 5 );
      UT_TRACE.TRACE( 'Termina proceso AB_BOAddressChange.AddressChange', 4 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddressChange.ProcessNRegisterIndAddrChange', 4 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddressChange.ProcessNRegisterIndAddrChange', 4 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PROCESSNREGISTERINDADDRCHANGE;
   PROCEDURE ENCAPSULATEDINDADDRESSCHANGE( INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, IBLVALMAINADDRES IN BOOLEAN := TRUE, ISBISURBAN IN VARCHAR2 := NULL )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      LDC_AB_BOADDRESSCHANGE.INDADDRESSCHANGE( INUOLDADDRESSID, ISBNEWADDRESS, INUNEIGHBORHOODID, IBLVALMAINADDRES, ISBISURBAN );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INDADDRCHANGE( INUGEOGRALOCATIONID IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE, ISBOLDADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUOLDNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, INUNEWNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ISBISURBAN IN VARCHAR2 := NULL )
    IS
      NUOLDPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUADDRESSCHANGEID AB_ADDRESS_CHANGE.ADDRESS_CHANGE_ID%TYPE;
      NUNEWADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
      AB_BOPARSERWRAP.CHECKIFADDRESSNOTEXISTSINDB( INUGEOGRALOCATIONID, ISBOLDADDRESS, NUOLDPARSERID );
      UT_TRACE.TRACE( 'Id Direccion Actual:[' || NUOLDPARSERID || ']', 3 );
      LDC_AB_BOADDRESSCHANGE.ENCAPSULATEDINDADDRESSCHANGE( NUOLDPARSERID, ISBNEWADDRESS, INUNEWNEIGHBORHOODID, GE_BOCONSTANTS.GETFALSE, ISBISURBAN );
      GETADDCHANGEBYOLDADDR( NUOLDPARSERID, NUADDRESSCHANGEID, NUNEWADDRESSID );
      IF ( GE_BOPARAMETER.FSBGET( CSBAB_CH_AUTO_DEPEND ) = GE_BOCONSTANTS.CSBYES ) THEN
         PRODADDRCHANGEBYADDRESS( NUADDRESSCHANGEID, NUOLDPARSERID, NUNEWADDRESSID );
         MOTIADDRCHANGEBYADDRESS( NUADDRESSCHANGEID, NUOLDPARSERID, NUNEWADDRESSID );
         INFRADDRCHANGEBYADDRESS( NUADDRESSCHANGEID, NUOLDPARSERID, NUNEWADDRESSID );
         INDUPDTOENDOFCHANGE( NUADDRESSCHANGEID );
      END IF;
      ONUADDRESSID := NUNEWADDRESSID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INDADDRCHANGE;
   PROCEDURE ADDRCHANGEINCUSTOMERCARE
    IS
      RFGETPROCADDRESSCHANGE TYRFGETPROCADDRESSCHANGE;
      RCGETPROCADDRESSCHANGE TYGETPROCADDRESSCHANGE;
      NUCUSTOMERCAREMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDCUSTCARE GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      NUCUSTOMERCAREMODULE := GE_BOPARAMETER.FNUGET( CSBCUSTOMER_CARE_MODULE );
      NUOBJUPDCUSTCARE := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_CUSTCARE );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDCUSTCARE );
      GETFORCHANGEINMODULE( RFGETPROCADDRESSCHANGE );
      FETCH RFGETPROCADDRESSCHANGE
         INTO RCGETPROCADDRESSCHANGE;
      WHILE RFGETPROCADDRESSCHANGE%FOUND
       LOOP
         BEGIN
            SAVEPOINT A;
            IF NOT FBLISPOSSIBLELOCKCHANGE( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID ) THEN
               RAISE EXCONTINUE;
            END IF;
            IF FBLISALREADYPROCESSED( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUCUSTOMERCAREMODULE ) THEN
               ROLLBACK TO A;
               RAISE EXCONTINUE;
            END IF;
            VALCHANGEPENDINGREQUEST( RCGETPROCADDRESSCHANGE.NUOLDPARSERID, RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID );
            NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
            SBPLBLOCK := 'BEGIN ' || SBPROCESS || '(:inuOldParserId , :inuNewParserId, :isbNewAddress,' || ':onuErrorCode,:osbErrorMessage); END;';
            EXECUTE IMMEDIATE ( SBPLBLOCK )
                              USING IN RCGETPROCADDRESSCHANGE.NUOLDPARSERID, IN RCGETPROCADDRESSCHANGE.NUNEWPARSERID, IN RCGETPROCADDRESSCHANGE.SBNEWADDRESS, OUT NUERRORCODE, OUT SBERRORMESSAGE;
            IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
               ROLLBACK TO A;
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
             ELSE
               RCMODULECHANGER.ADDRESS_CHANGE_ID := RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID;
               RCMODULECHANGER.MODULE_ID := NUCUSTOMERCAREMODULE;
               DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
               COMMIT;
            END IF;
          EXCEPTION
            WHEN EXCONTINUE THEN
               NULL;
            WHEN EX.CONTROLLED_ERROR THEN
               ROLLBACK TO A;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
            WHEN OTHERS THEN
               ROLLBACK TO A;
               ERRORS.SETERROR;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
         END;
         FETCH RFGETPROCADDRESSCHANGE
            INTO RCGETPROCADDRESSCHANGE;
      END LOOP;
      CLOSE RFGETPROCADDRESSCHANGE;
      UPDTOENDOFCHANGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRCHANGEINCUSTOMERCARE;
   PROCEDURE ADDRCHANGEINGENERAL
    IS
      RFGETPROCADDRESSCHANGE TYRFGETPROCADDRESSCHANGE;
      RCGETPROCADDRESSCHANGE TYGETPROCADDRESSCHANGE;
      NUGENERALMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDGENERAL GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      NUGENERALMODULE := GE_BOPARAMETER.FNUGET( CSBGENERAL_MODULE );
      NUOBJUPDGENERAL := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_GENERAL );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDGENERAL );
      GETFORCHANGEINMODULE( RFGETPROCADDRESSCHANGE );
      FETCH RFGETPROCADDRESSCHANGE
         INTO RCGETPROCADDRESSCHANGE;
      WHILE RFGETPROCADDRESSCHANGE%FOUND
       LOOP
         BEGIN
            SAVEPOINT A;
            IF NOT FBLISPOSSIBLELOCKCHANGE( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID ) THEN
               RAISE EXCONTINUE;
            END IF;
            IF FBLISALREADYPROCESSED( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUGENERALMODULE ) THEN
               ROLLBACK TO A;
               RAISE EXCONTINUE;
            END IF;
            VALCHANGEPENDINGREQUEST( RCGETPROCADDRESSCHANGE.NUOLDPARSERID, RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID );
            NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
            SBPLBLOCK := 'BEGIN ' || SBPROCESS || '(:inuOldParserId , :inuNewParserId, :isbNewAddress,' || ':onuErrorCode,:osbErrorMessage); END;';
            EXECUTE IMMEDIATE ( SBPLBLOCK )
                              USING IN RCGETPROCADDRESSCHANGE.NUOLDPARSERID, IN RCGETPROCADDRESSCHANGE.NUNEWPARSERID, IN RCGETPROCADDRESSCHANGE.SBNEWADDRESS, OUT NUERRORCODE, OUT SBERRORMESSAGE;
            IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
               ROLLBACK TO A;
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
             ELSE
               RCMODULECHANGER.ADDRESS_CHANGE_ID := RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID;
               RCMODULECHANGER.MODULE_ID := NUGENERALMODULE;
               DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
               COMMIT;
            END IF;
          EXCEPTION
            WHEN EXCONTINUE THEN
               NULL;
            WHEN EX.CONTROLLED_ERROR THEN
               ROLLBACK TO A;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
            WHEN OTHERS THEN
               ROLLBACK TO A;
               ERRORS.SETERROR;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
         END;
         FETCH RFGETPROCADDRESSCHANGE
            INTO RCGETPROCADDRESSCHANGE;
      END LOOP;
      CLOSE RFGETPROCADDRESSCHANGE;
      UPDTOENDOFCHANGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRCHANGEINGENERAL;
   PROCEDURE ADDRCHANGEINORDERS
    IS
      RFGETPROCADDRESSCHANGE TYRFGETPROCADDRESSCHANGE;
      RCGETPROCADDRESSCHANGE TYGETPROCADDRESSCHANGE;
      NUORDERSMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDORDERS GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      NUORDERSMODULE := GE_BOPARAMETER.FNUGET( CSBORDERS_MODULE );
      NUOBJUPDORDERS := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_ORDERS );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDORDERS );
      GETFORCHANGEINMODULE( RFGETPROCADDRESSCHANGE );
      FETCH RFGETPROCADDRESSCHANGE
         INTO RCGETPROCADDRESSCHANGE;
      WHILE RFGETPROCADDRESSCHANGE%FOUND
       LOOP
         BEGIN
            SAVEPOINT A;
            IF NOT FBLISPOSSIBLELOCKCHANGE( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID ) THEN
               RAISE EXCONTINUE;
            END IF;
            IF FBLISALREADYPROCESSED( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUORDERSMODULE ) THEN
               ROLLBACK TO A;
               RAISE EXCONTINUE;
            END IF;
            VALCHANGEPENDINGREQUEST( RCGETPROCADDRESSCHANGE.NUOLDPARSERID, RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID );
            NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
            SBPLBLOCK := 'BEGIN ' || SBPROCESS || '(:inuOldParserId , :inuNewParserId, :isbNewAddress,' || ':onuErrorCode,:osbErrorMessage); END;';
            EXECUTE IMMEDIATE ( SBPLBLOCK )
                              USING IN RCGETPROCADDRESSCHANGE.NUOLDPARSERID, IN RCGETPROCADDRESSCHANGE.NUNEWPARSERID, IN RCGETPROCADDRESSCHANGE.SBNEWADDRESS, OUT NUERRORCODE, OUT SBERRORMESSAGE;
            IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
               ROLLBACK TO A;
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
             ELSE
               RCMODULECHANGER.ADDRESS_CHANGE_ID := RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID;
               RCMODULECHANGER.MODULE_ID := NUORDERSMODULE;
               DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
               COMMIT;
            END IF;
          EXCEPTION
            WHEN EXCONTINUE THEN
               NULL;
            WHEN EX.CONTROLLED_ERROR THEN
               ROLLBACK TO A;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
            WHEN OTHERS THEN
               ROLLBACK TO A;
               ERRORS.SETERROR;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
         END;
         FETCH RFGETPROCADDRESSCHANGE
            INTO RCGETPROCADDRESSCHANGE;
      END LOOP;
      CLOSE RFGETPROCADDRESSCHANGE;
      UPDTOENDOFCHANGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRCHANGEINORDERS;
   PROCEDURE ADDRCHANGEINBILLING
    IS
      RFGETPROCADDRESSCHANGE TYRFGETPROCADDRESSCHANGE;
      RCGETPROCADDRESSCHANGE TYGETPROCADDRESSCHANGE;
      NUBILLINGMODULE AB_MODULE_CHANGER.MODULE_ID%TYPE;
      RCMODULECHANGER DAAB_MODULE_CHANGER.STYAB_MODULE_CHANGER;
      NUOBJUPDBILLING GE_OBJECT.OBJECT_ID%TYPE;
      SBPROCESS GE_OBJECT.NAME_%TYPE;
      SBPLBLOCK VARCHAR2( 256 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUWITH_ERROR AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE;
    BEGIN
      NUBILLINGMODULE := GE_BOPARAMETER.FNUGET( CSBBILLING_MODULE );
      NUOBJUPDBILLING := GE_BOPARAMETER.FNUGET( CSBAB_UP_ADDR_BILLING );
      SBPROCESS := DAGE_OBJECT.FSBGETNAME_( NUOBJUPDBILLING );
      GETFORCHANGEINMODULE( RFGETPROCADDRESSCHANGE );
      FETCH RFGETPROCADDRESSCHANGE
         INTO RCGETPROCADDRESSCHANGE;
      WHILE RFGETPROCADDRESSCHANGE%FOUND
       LOOP
         BEGIN
            SAVEPOINT A;
            IF NOT FBLISPOSSIBLELOCKCHANGE( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID ) THEN
               RAISE EXCONTINUE;
            END IF;
            IF FBLISALREADYPROCESSED( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUBILLINGMODULE ) THEN
               ROLLBACK TO A;
               RAISE EXCONTINUE;
            END IF;
            VALCHANGEPENDINGREQUEST( RCGETPROCADDRESSCHANGE.NUOLDPARSERID, RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID );
            NUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
            SBPLBLOCK := 'BEGIN ' || SBPROCESS || '(:inuOldParserId , :inuNewParserId, :isbNewAddress,' || ':onuErrorCode,:osbErrorMessage); END;';
            EXECUTE IMMEDIATE ( SBPLBLOCK )
                              USING IN RCGETPROCADDRESSCHANGE.NUOLDPARSERID, IN RCGETPROCADDRESSCHANGE.NUNEWPARSERID, IN RCGETPROCADDRESSCHANGE.SBNEWADDRESS, OUT NUERRORCODE, OUT SBERRORMESSAGE;
            IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
               ROLLBACK TO A;
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
             ELSE
               RCMODULECHANGER.ADDRESS_CHANGE_ID := RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID;
               RCMODULECHANGER.MODULE_ID := NUBILLINGMODULE;
               DAAB_MODULE_CHANGER.INSRECORD( RCMODULECHANGER );
               COMMIT;
            END IF;
          EXCEPTION
            WHEN EXCONTINUE THEN
               NULL;
            WHEN EX.CONTROLLED_ERROR THEN
               ROLLBACK TO A;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
            WHEN OTHERS THEN
               ROLLBACK TO A;
               ERRORS.SETERROR;
               ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
               SETERRORSTATUS( RCGETPROCADDRESSCHANGE.ADDRESS_CHANGE_ID, NUERRORCODE, SBERRORMESSAGE );
         END;
         FETCH RFGETPROCADDRESSCHANGE
            INTO RCGETPROCADDRESSCHANGE;
      END LOOP;
      CLOSE RFGETPROCADDRESSCHANGE;
      UPDTOENDOFCHANGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF RFGETPROCADDRESSCHANGE%ISOPEN THEN
            CLOSE RFGETPROCADDRESSCHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRCHANGEINBILLING;
   FUNCTION FBLISBASICADDRESS( ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN BOOLEAN
    IS
      SBTOKENCASA VARCHAR2( 5 );
      SBHOUSE VARCHAR2( 50 );
      SBCOMPLEMENT VARCHAR2( 300 );
      SBDIRCOMPLEMENT VARCHAR2( 300 );
      BLISBASIC BOOLEAN;
    BEGIN
      SBTOKENCASA := GE_BOPARAMETER.FSBGET( 'TOKEN_CASA' );
      SBDIRCOMPLEMENT := TRIM( SUBSTR( ISBADDRESS, INSTR( ISBADDRESS, SBTOKENCASA, -1, 1 ) + 1, 999 ) );
      SBHOUSE := TRIM( SUBSTR( SBDIRCOMPLEMENT, 1, INSTR( SBDIRCOMPLEMENT, ' ' ) ) );
      SBCOMPLEMENT := TRIM( SUBSTR( SBDIRCOMPLEMENT, INSTR( SBDIRCOMPLEMENT, ' ' ) + 1, 999 ) );
      SBDIRCOMPLEMENT := SBHOUSE || ' ' || SBCOMPLEMENT;
      BLISBASIC := INSTR( SBDIRCOMPLEMENT, ' ', 1, 2 ) = 0;
      RETURN BLISBASIC;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLISBASICADDRESS;
   PROCEDURE ADDRESSTEXTCORRECTION( INUADDRESID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBNEWADDRESSTEXT IN AB_ADDRESS.ADDRESS%TYPE, ONUMSG OUT NUMBER )
    IS
      CNUOK CONSTANT NUMBER := 1169;
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      RCCHILDADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      ONUADDRESSID NUMBER;
      OSBADDRESSPARSED VARCHAR2( 200 );
      ORCADDRESSPARSED AB_BOPARSER.TYRCDIRPARSEADA;
      SBPREVADDRESSPARSED VARCHAR2( 300 );
      ORCCHILDADDRESSPAR AB_BOPARSER.TYRCDIRPARSEADA;
      SBERRMSG VARCHAR2( 300 );
    BEGIN
      UT_TRACE.TRACE( 'Inicio AB_BOAddressChange.AddressTextCorrection: ' || ISBNEWADDRESSTEXT, 1 );
      RCADDRESS := DAAB_ADDRESS.FRCGETRECORD( INUADDRESID );
      SBPREVADDRESSPARSED := RCADDRESS.ADDRESS_PARSED;
      AB_BOPARSER.VALIDATERURALADDRESS( ISBNEWADDRESSTEXT, RCADDRESS.GEOGRAP_LOCATION_ID, RCADDRESS.IS_URBAN, RCADDRESS.IS_VALID, ORCADDRESSPARSED );
      RCADDRESS.ADDRESS_PARSED := ORCADDRESSPARSED.SBDIRPARSEADA;
      RCADDRESS.ADDRESS := ORCADDRESSPARSED.SBDIRPARSEADA;
      IF RCADDRESS.ADDRESS IS NULL THEN
         RCADDRESS.ADDRESS_PARSED := ORCADDRESSPARSED.SBDIRFMTOLIBRE;
         RCADDRESS.ADDRESS := ORCADDRESSPARSED.SBDIRFMTOLIBRE;
      END IF;
      AB_BOPARSER.COMPLETAREGISDIR( RCADDRESS.GEOGRAP_LOCATION_ID, RCADDRESS.IS_URBAN, RCADDRESS.ADDRESS_ID, ORCADDRESSPARSED, RCADDRESS );
      DAAB_ADDRESS.UPDRECORD( RCADDRESS );
      FOR RCCHILD IN AB_BCADDRESS.CUCHILDADDRESS( RCADDRESS.ADDRESS_ID )
       LOOP
         RCCHILD.ADDRESS_PARSED := REPLACE( RCCHILD.ADDRESS_PARSED, SBPREVADDRESSPARSED, RCADDRESS.ADDRESS_PARSED );
         AB_BOPARSER.VALIDATERURALADDRESS( RCCHILD.ADDRESS_PARSED, RCCHILD.GEOGRAP_LOCATION_ID, RCCHILD.IS_URBAN, RCCHILDADDRESS.IS_VALID, ORCCHILDADDRESSPAR );
         RCCHILDADDRESS.ADDRESS_PARSED := ORCCHILDADDRESSPAR.SBDIRPARSEADA;
         RCCHILDADDRESS.ADDRESS := ORCCHILDADDRESSPAR.SBDIRPARSEADA;
         IF RCCHILDADDRESS.ADDRESS IS NULL THEN
            RCCHILDADDRESS.ADDRESS_PARSED := ORCCHILDADDRESSPAR.SBDIRFMTOLIBRE;
            RCCHILDADDRESS.ADDRESS := ORCCHILDADDRESSPAR.SBDIRFMTOLIBRE;
         END IF;
         RCCHILDADDRESS.FATHER_ADDRESS_ID := RCCHILD.FATHER_ADDRESS_ID;
         RCCHILDADDRESS.ESTATE_NUMBER := RCCHILD.ESTATE_NUMBER;
         RCCHILDADDRESS.PREVIOUS_VALUE := RCCHILD.PREVIOUS_VALUE;
         RCCHILDADDRESS.ACTIVE := RCCHILD.ACTIVE;
         AB_BOPARSER.COMPLETAREGISDIR( RCCHILD.GEOGRAP_LOCATION_ID, RCCHILD.IS_URBAN, RCCHILD.ADDRESS_ID, ORCCHILDADDRESSPAR, RCCHILDADDRESS );
         DAAB_ADDRESS.UPDRECORD( RCCHILDADDRESS );
      END LOOP;
      ONUMSG := CNUOK;
      UT_TRACE.TRACE( 'END AB_BOAddressChange.AddressTextCorrection', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRESSTEXTCORRECTION;
   PROCEDURE VALADDRESSCHANGE( INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBNEWADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEWGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, INUNEWNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, INUCONSECUTIVE IN AB_PREMISE.CONSECUTIVE%TYPE )
    IS
      SBUBIHIJAS VARCHAR2( 32000 );
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddressChange.ValAddressChange ' || CHR( 10 ) || 'Direccion Actual: ' || INUOLDADDRESSID || CHR( 10 ) || 'Direccion Nueva: ' || ISBNEWADDRESS || CHR( 10 ) || 'Ubicacion Geografica: ' || INUNEWGEOLOCATIONID || CHR( 10 ) || 'Barrio: ' || INUNEWNEIGHBORHOODID || CHR( 10 ) || 'Consecutivo: ' || INUCONSECUTIVE, 4 );
      IF INUOLDADDRESSID IS NULL THEN
         ERRORS.SETERROR( CNUNULL_VALUE, CSBADDRESSOLD );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF LENGTH( INUOLDADDRESSID ) > 15 THEN
         ERRORS.SETERROR( CNUMAXLENGHT, CSBADDRESSOLD );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF NOT DAAB_ADDRESS.FBLEXIST( INUOLDADDRESSID ) THEN
         ERRORS.SETERROR( CNUADDRESSNOEXIST, INUOLDADDRESSID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ISBNEWADDRESS IS NULL THEN
         ERRORS.SETERROR( CNUNULL_VALUE, CSBADDRESSNEW );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF LENGTH( ISBNEWADDRESS ) > 200 THEN
         ERRORS.SETERROR( CNUMAXLENGHT, CSBADDRESSNEW );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF INUNEWGEOLOCATIONID IS NULL THEN
         ERRORS.SETERROR( CNUNULL_VALUE, CSBGEOLOCATION );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF LENGTH( INUNEWGEOLOCATIONID ) > 6 THEN
         ERRORS.SETERROR( CNUMAXLENGHT, CSBGEOLOCATION );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF NOT DAGE_GEOGRA_LOCATION.FBLEXIST( INUNEWGEOLOCATIONID ) THEN
         ERRORS.SETERROR( CNUGEOLOCAEXIST, INUNEWGEOLOCATIONID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF DAGE_GEOGRA_LOCATION.FSBGETASSIGN_LEVEL( INUNEWGEOLOCATIONID ) = GE_BOCONSTANTS.GETNO THEN
         ERRORS.SETERROR( CNUASSINGLEVEL, CSBASINGGEOLOC );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF DAGE_GEOGRA_LOCATION.FNUGETGEOG_LOCA_AREA_TYPE( INUNEWGEOLOCATIONID ) != AB_BOCONSTANTS.FNUOBTTIPOUBICACIONLOC THEN
         ERRORS.SETERROR( CNUVALGELOLOCA, INUNEWGEOLOCATIONID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'Valido el barrio: ' || INUNEWNEIGHBORHOODID, 4 );
      IF INUNEWNEIGHBORHOODID IS NOT NULL THEN
         IF LENGTH( INUNEWNEIGHBORHOODID ) > 6 THEN
            ERRORS.SETERROR( CNUMAXLENGHT, CSBNEIGH );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF NOT DAGE_GEOGRA_LOCATION.FBLEXIST( INUNEWNEIGHBORHOODID ) THEN
            ERRORS.SETERROR( CNUVALNEIGH, INUNEWNEIGHBORHOODID );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF DAGE_GEOGRA_LOCATION.FNUGETGEOG_LOCA_AREA_TYPE( INUNEWNEIGHBORHOODID ) != AB_BOCONSTANTS.FNUOBTTIPOUBICACIONBARRIO THEN
            ERRORS.SETERROR( CNUVALGELONEIGB );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF INUNEWGEOLOCATIONID IS NOT NULL THEN
            IF ( NOT GE_BOGEOGRA_LOCATION.FBLISFATHERGEOLOCATION( INUNEWNEIGHBORHOODID, INUNEWGEOLOCATIONID, AB_BOCONSTANTS.CSBTOKEN_LOCALIDAD ) ) THEN
               ERRORS.SETERROR( CNUNEIBYGEOLOC, ' ' || INUNEWNEIGHBORHOODID || '|' || INUNEWGEOLOCATIONID );
               RAISE EX.CONTROLLED_ERROR;
            END IF;
         END IF;
      END IF;
      IF INUCONSECUTIVE IS NOT NULL THEN
         IF LENGTH( INUNEWGEOLOCATIONID ) > 10 THEN
            ERRORS.SETERROR( CNUMAXLENGHT, CSBCONSECUTIVE );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
      UT_TRACE.TRACE( 'END AB_BOAddressChange.ValAddressChange', 4 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddressChange.ValAddressChange', 4 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddressChange.ValAddressChange', 4 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALADDRESSCHANGE;

END LDC_AB_BOADDRESSCHANGE;
/
PROMPT Otorgando permisos de ejecucion a LDC_AB_BOADDRESSCHANGE
BEGIN
    pkg_utilidades.praplicarpermisos('LDC_AB_BOADDRESSCHANGE', 'ADM_PERSON');
END;
/