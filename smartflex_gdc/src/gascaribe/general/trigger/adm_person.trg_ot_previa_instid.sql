CREATE OR REPLACE TRIGGER ADM_PERSON.TRG_OT_PREVIA_INSTID
BEFORE INSERT OR UPDATE ON OR_ORDER_ACTIVITY
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  NUCOMERCIAL_PLAN NUMBER(15) := NULL;
  FLAG NUMBER := 0;
BEGIN
/* Se crea trigger para pasar el valor de INSTANCE_ID a COMMENT_
 en OR_ORDER_ACTIVITY cuando se trata de un 10500 y un
 plan comercial 41
*/
  IF :NEW.TASK_TYPE_ID IS NULL THEN
    RETURN;
  END IF;

  IF :NEW.INSTANCE_ID IS NULL THEN
    RETURN;
  END IF;

  IF :NEW.INSTANCE_ID IS NULL AND :NEW.COMMENT_ IS NOT NULL THEN
    RETURN;
  END IF;

  IF :NEW.TASK_TYPE_ID <> 10500 THEN
    RETURN;
  END IF;

  SELECT COUNT(1) INTO FLAG
  FROM OPEN.LD_PARAMETER_INNOVA
  WHERE PARAMETER_ID = 'TRG_OT_PREVIA_INSTID'
    AND ACTIVE = 'Y' ;

  IF FLAG <> 1 THEN
    RETURN;
  END IF;

  BEGIN
    SELECT COMMERCIAL_PLAN_ID
    INTO NUCOMERCIAL_PLAN
    FROM OPEN.PR_PRODUCT PR
    WHERE PR.PRODUCT_ID = :NEW.PRODUCT_ID ;

  EXCEPTION
    WHEN no_data_found THEN
      RETURN;
  END;

  IF NUCOMERCIAL_PLAN IS NULL THEN
    RETURN;
  ELSIF NUCOMERCIAL_PLAN <> 41 THEN
    RETURN;
  END IF;

  MERGE INTO LDCBI_INSTANCE dest
  USING ( SELECT :NEW.ORDER_ACTIVITY_ID AS ID_ FROM DUAL ) src
  ON ( dest.ORDER_ACTIVITY_ID = src.ID_ )
  WHEN NOT MATCHED THEN INSERT ( ORDER_ACTIVITY_ID, INSTANCE_ID )
  VALUES ( :NEW.ORDER_ACTIVITY_ID, :NEW.INSTANCE_ID );

  :NEW.COMMENT_ := TO_CHAR(:NEW.INSTANCE_ID);
  :NEW.INSTANCE_ID := NULL;
END;
/
