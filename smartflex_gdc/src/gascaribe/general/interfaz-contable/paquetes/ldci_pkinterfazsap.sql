CREATE OR REPLACE PACKAGE ldci_pkinterfazsap
IS
/************************************************************************
   PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
   FUNCION   : ldci_pkinterfazsap
   AUTOR     : Heiber Barco
   FECHA     : 02-08-2013
   DESCRIPCION  : Tiquete:
                  Paquete que maneja la logica de la interfaz contable para SAP.
  Parametros de Entrada

  Parametros de Salida

  Historia de Modificaciones
  Autor    Fecha         Descripcion

  carlosr@arqs.co 01/02/2016
  Se modifican los m?todos fnuInterfazIngreso y fnuInterfazIngresoRO

  cgonzalez  01-ago-2014 Se crean las funciones fvaGetCECO fvaGetOIEST
                         para obtener el Centro de Costo y Orden Estadistica

  cgonzalez  12-ago-2014 Se crean las funciones fnuLDCI_INCOLIQUPROV
                         para armar el registro contable de la provision
                         de Costos/Gasto/Ingresos generados de esos Costo/
                         Gasto

  orestrepo	23-Mar_2015 Se realizan ajustes a la funcion fnuDistriImpuesto
						que realiza la distribuci?n de los impuestos para la
						interfaz de ingreso de GDO , donde se tiene en cuenta
						los ingresos por constructoras que son excluidos por
						el proceso se Servicios Cumplidos (ingresos provisionados)

  orestrepo	15-Abril_2015  - Aranda 6207
					 *Se realiza la creaci?n del metodo fnuInterfazReclaCartera_B
						 el cual se encarga de generar la informaci?n de la interfaz de reclasificaci?n
						 de cartera, basado en la foto de cartera, y donde se pueden excluir
						 estados de corte.

						Se crean los siguientes parametros en la tabla LDCI_CARASEWE:
						*PavaModeloInterfaz : Modelo A Base en Ic_Movimien (Hechos), Modelo B Basado en Ic_cartcoco (Foto Cartera).
						*PavaEstacor_exclu : Estados a Excluir (96,110).

  oparra     25-05-2015  - Aranda 7100
  cgonzalez  10-08-2015  - Aranda 6749
                           Modificaci?n en la agrupaci?n de Fechas en Interfaz de Control Reintegro y
                           limite de 999 Documentos. Modificacion Cantidad de documentos
                           en Interfaz de Ingresos.
                           se crea metodo fnuSplitDocClas:
                           encargada de dividir en Documentos para los
                           clasificadores contable que supere los 999 registros en la interfaz de ingresos

                           Se modifica el cursor que obtiene la informacion de
                           brilla para las demas gaseras, tomando la logica de la compa?ia GDO.
  cgonzalez  18-08-2015    SAO 327681 Se adicciona el tipo de trabajo en incoliqu
                           metodo <<fnuLDCI_INCOLIQUPROV>>

  cgonzalezv 27-08-2015    ARANDA: 4212 Parametrizacion Items de anticipo y reportar el numero
                          de anticipo en el campo asignacion.

  cgonzalezv   18-09-2015  Aranda 6744: Reportar como Fecha Contable en L2
                           la fecha de proceso o grabacion del pago
                           Y SAO 337642  Recaudos Fuera de Fechas Ultimo
                           de del mes debe contabilzar como LC (fuera de fechas del
                           periodo contable)y no como L2
                           (Recaudo dentro del periodo contable)

 cgonzalezv  24/09/2015    SAO 340428 MOdificacion de las funciones fnuGeneDocuSapActa
                           fnuGeneDocuSapActaRO cursor cuLDCI_INCOLIQU, para soportar
                           la clave contable por Devolucion de Fondo de Garantia
   Dcardona 06-Oct-2015    SAO: 338943
                           Se cambia la variable que se env?a en el detalle de interfaz
                           para que se env?e la variable TXTPOSCN de ldci_incoliqu en lugar
                           de la variable vaMensInte de enrada de la funci?n para las funciones
                           fnuGeneDocuSapReclaCarteraRO y fnuGeneDocuSapReclaCartera
 cgonzalezv 22/10/2015     ARA 6746: Creaci?n de Par?metros para valor l?mite.
                           Objetos Modificados:
                           fnuInterfazRecaudo
                           fnuInterfazRecaudoRO
                           InterfazReintegro
                           InterfazReintegroRO
                           fnuInterfazIngreso
                           fnuInterfazIngresoRO
                           fnuInterfazAutoretencion
                           fnuInterfazAutoretencionRO
                           fnuInterfazProvIngresoRO
                           fnuInterfazProvCartera
                           fnuInterfazProvCarteraRO
                           fnuInterfazReclaCartera
                           fnuInterfazReclaCarteraRO
                           fnuInterfazProvConsumo
                           fnuInterfazProvConsumoRO
                           fnuAjusteInterContable

 cgonzalezv 30/10/2015     SAO 340484: Cambio de tipo de documento para la interfaz
                           de provision consumo NO regulado LC por L5C
heiberb     10-11-2015     SAO 350458 se realiza el cambio de tipo de dato a la variable
                           vaNitAnticipo ajustandolo al tama?o del campo de la tabla
                           ldci_detaintesap.Asignacn%type;
 FCastro    15-11-FNUGENEDOCUSAPACTARO     200-86. Se envia correo notificando que se envio la interfaz o
                          si hubo errores en el proceso.

 Ludycom     20-10-2017   CA-200-1300 y CA-200-1301
                          Se corrige la generacion de trama de actas de comision para que a las cuentas de retencion
                          le envie la base, tipo de indicador e indicador de retencion.

 Horbart     21-10-2018   CA-200-2158 - Se asignan en la trama las condiciones de pago del contratista de acuerdo al
                          contrato y se asigna como fecha para pago la de radicacion de la factura en OnBase.

 Horbath     25/11/2019   CA-0000239  - Se modifica la interfaz de ingresos para que omita los clasificadores
                          de Brilla Y Cardif, la funcion a modificar es la FnuInterfazIngresoRO

 Horbath     27/01/2020   CA-0000288  - Se modifica la interfaz de ingresos para que lleve el valor de las ventas
                          de FNB a cada proveedor, se omite la unidad operativa de 2512 CARDIF de la funcion
                          fnuDatosVentaBrillaRO.

 Horbath     24/04/2020   CA-0000398  - Se modifica la interfaz de ingresos, funcion fnuInterfazIngresoRO,
                          para que reporte el NIT 9994 al clasificador 2 de Brilla, actualmente hay movimiento que envia al
                          NIT 9999, esto es un error.
                          Se modifica la interfaz de Control Reintegro, funcion fnuInterfazReintegroRO,  para corregir la
                          validacion del cuadre del movimiento el tipomovi 65 debe ser con signo CR para que cuadre.

 Edmlar      07/07/2020   CA-460 - Se ajusta la base del IVA de acuerdo al IVA calculado, esto por la nueva version de SAP
                          que valida que la base sea la del valor del IVA. Adionalmente se envia en NULL el campo INDIIVA
                          cuando la cuenta es de gasto '5%' o de costo '7%'
                           
 Horbath     16/11/2020   CA-0000557 -  Se modifica la interfaz de recaudo, funcion FnuInterfazRecaudoRO, para reportar el 
                          NIT de Promigas cuando el tipo de producto es igual a 7056 y la cuenta contable igual a 2905900000

   Edmlar   09/04/2024    OSF-2546
                          Se modifica el Cursor cuInformacion para incluir la consulta de las anulacion de FNB y poder aplicar la logica de
                          las ventas BRILLA, buscar el NIT del aliado de acuerdo a la solicitud que aparece en el campor CARGDOSO.
                          Se debe modificar la configuracion de registros contables para que en el clasificador de BRILLA se omita la causal 1 en
                          el comprobante de notas por concepto.                          

*********************************************************************************/
  nuIndice                 number := 0;
  nuEncabezado             number := 0;
  nuDetalle                number := 0;
  nuIncoliqu               number := 0;
  nuComodin                number := 0;
  vaComodin                varchar2(4);
  nuSeqICLINUDO            LDCI_INCOLIQU.ICLINUDO%TYPE;
  sbErrorInterfaz         varchar2(2000);
  vaGRLEDGER               varchar2(20);   --Campo Ledger de la interfaz
  vaCODINTINGRESOS         varchar2(2);   --Codigo interfaz de ingresos
  vaCODINTAUTORETE         varchar2(2);   --Codigo interfaz de ingresos
  vaCODINTINTERFAZ         varchar2(3);    --Codigo de interfaz
  vaSOCIEDAD               varchar2(20);   --Campo Sociedad de la interfaz
  vaCURRENCY               varchar2(20);   --Campo moneda de la interfaz
  vaCLAVE40                ldci_claveconta.clavcodi%type; --Codigo de la clave de contabilizacion 40 - Debe
  vaCLAVE50                ldci_claveconta.clavcodi%type; --Codigo de la clave de contabilizacion 50 - Haber
  vaCTA1422020200          ldci_cuentacontable.cuctcodi%type; --Codigo cuenta contable autoretencion
  vaCTA2436950200          ldci_cuentacontable.cuctcodi%type; --Codigo cuenta contable autoretencion
  nuCODDOCUINTEINGRSAP     LDCI_TIPODOCO.TIDCCODI%type; --Tipo documento para interfaz de ingresos
  nuCODDOCUINTAUTRETSAP    LDCI_TIPODOCO.TIDCCODI%type; --Tipo documento autoretencion para sap
  vaMensError              varchar2(4000); --Variable para el manejo de errores
  Error                    EXCEPTION;      --Manejo de exception para el paquete
  CODDOCUINTECOSTSAP       LDCI_TIPODOCO.TIDCCODI%type; --Tipo documento para interfaz de costos
  nuCODDOCUINTPROVICARTERA LDCI_TIPODOCO.TIDCCODI%type; -- Tipo de documento provision de cartera
  vaCODINTPROVICARTE       varchar2(2); --Codigo Interno de provision de cartera de sap
  nuCODCAUSACARGOPRO       causcarg.cacacodi%type; --Codigo causa cargo provision de cartera
  vaCODINTPROVCONS         varchar2(2); --Codigo interno provision consumo
  nuCODDOCUINTPROVCONS     LDCI_TIPODOCO.TIDCCODI%type; --Codigo interno provision consumo de sap
  nuCODCAUSCARGINGRESO     causcarg.cacacodi%type; --Causa cargo ingresos
  nuPefaano                perifact.pefaano%type; --A?o periodo de facturacion
  nuPefames                perifact.pefames%type; --Mes periodo de facturacion
  nuCODCAUSCARGANULACION   causcarg.cacacodi%type; --Codigo causa cargo anulacion
  vaCODCLAVECUECOB         varchar2(2); -- Codigo de la clave de cuenta por cobrar
  vaCODINTRECCAR           varchar2(2); -- Codigo interno reclasificacion cartera
  nuCODDOCUINTRECCAR       LDCI_TIPODOCO.TIDCCODI%type; -- Codigo interno de reclasificacion cartera
  vaCUENTAIVA              varchar2(20); --Cuenta contable de Iva
  vaCUENTACOSTRED          varchar2(20); --Cuenta contable de Iva
  nuCODCAUSCARGCART_SAP    number(2);
  nuCODDOCUINTERECASAP     number(2);
  nuCodinterfaz            NUMBER :=0;  --codigo interfaz para la condicion de pago
  nuCodigonterfaz          NUMBER :=0;  --codigo de interfaz para mostrar al terminar el proceso
  vaCTA1422020400          ldci_cuentacontable.cuctcodi%type; --Codigo cuenta contable autoretencion CREE
  vaFactura                ge_acta.EXTERN_INVOICE_NUM%TYPE;
  vaActa                   LDCI_INCOLIQU.reffactr%TYPE;
  vaCentBen                LDCI_INCOLIQU.centrobe%TYPE;
  vaNit                    LDCI_INCOLIQU.clavref1%TYPE;
  vaNitAnti                LDCI_INCOLIQU.clavref1%TYPE;
  vaCODPAGO                LDCI_INCOLIQU.condpago%TYPE;
  vaCuentaParticu          ldci_cuentacontable.cuctcodi%TYPE;
  vaNit_Materiales         LDCI_INCOLIQU.clavref1%TYPE;--codigo nit para interfaz materiales
  vaTipoInterfaz           LDCI_INCOLIQU.iclitido%TYPE;--codigo tipo Interfaz
  vaClasiIva               ldci_cuenclasifi.cuencontabl%TYPE;--codigo clasificador para no tomar el IVA
  vaClasitem23             ldci_cuenclasifi.cuencontabl%TYPE;--codigo clasificador del item para costos
  vaAjustaInte             ldci_cuenclasifi.cuencontabl%TYPE;--Variable para control el ajuste del peso
  nuanoprovi               LDCI_DETAPROVCOSTO.ano%TYPE;--Variable para control el ajuste del peso
  numesprovi               LDCI_DETAPROVCOSTO.mes%TYPE;--Variable para control el ajuste del peso
  nuDetalleProv                number := 0;
  vaCategoria              VARCHAR2(2);--variable para la categoria de costos
  GRUPOPROVCARBRILLA       VARCHAR2(300);
  GRUPOPROVCARBKIT         VARCHAR2(300);
  vaInterInversion         varchar2(2000);--Variable para las actas de inversion
  vaItemsReteIva           varchar2(2000);--Variable para los items de reteiva
  vaIva                    VARCHAR2(20);--variable para identificar el valor de iva
  vaAiu                    VARCHAR2(20);--variable para identificar el valor de aiu
  vaReteIva                VARCHAR2(20); --variable para reteiva.
  vaMaterialIva            VARCHAR2(20);--variable para validar el iva del material
  vaMaterialAct            VARCHAR2(20);--variable para validar el activo
  vaClasiIvaRec            ldci_cuenclasifi.cuencontabl%TYPE;--codigo clasificador para no tomar el IVA
  vaMultas                 VARCHAR2(2000);--variable para las multas
  vaSigno                  VARCHAR2(2); --variable para guardar el signo de los registros.
  vaActaFact               VARCHAR2(1);--variable para el signo
  vaTIPOINTERFAZRECAUDO    VARCHAR2(3);-- Tipo Interfaz recaudo L2 o LC
  Vadiferen                varchar2(2);
  vaFlagUPD                varchar2(2);
	vaModeloInterfaz VARCHAR2(300);
  --<<
  -- Dcardona
  -- 28/07/2014
  -- Variables
  -->>
  vaNITReca                LDCI_INCOLIQU.clavref1%TYPE;       --nit para interfaz de recaudos
  vaCtaNoFin               ldci_cuentacontable.cuctcodi%type; --cuenta parametro para validar la cuenta nofin en recaudos
  caCtaBanco               ldci_cuentacontable.cuctcodi%type; --cuenta parametro para validar la cuenta banco en recaudos
  vacuentaIvaIFRS          VARCHAR2(20);                      -- Variable de cuenta IVA
  vaClasiActivos           VARCHAR2(2000);                    -- Variable para los clasificadores de activos
  nuContrato               ge_contrato.id_contrato%TYPE;      -- Contrato
  nuFechaprocesa           date; -- fecha control reintegro

 --<<
 -- cgonzalez 10-08-2015
 -- Funcion encargada de dividir en Documentos para los
 -- clasificadores contable que supere los 999 registros
 -->>
 function fnuSplitDocClas(nuCodTrama in ldci_detaintesap.cod_interfazldc%TYPE)
                          return number;


  FUNCTION FSBVERSION RETURN VARCHAR2;

  PROCEDURE validaLDCIGINT;
  PROCEDURE validaLDCIGINTMES;
  function fnuValidaCtaBanco (nuCOD_CLASIFCONTA   in ldci_encaintesap.COD_CLASIFCONTA%type,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE)
  return number;

  function fnuSeq_ldci_incoliqu
  return number;

  function fnuINSELDCI_INCOLIQU
  return number;

  function fnuGeneldci_encaintesap(nuCOD_INTERFAZLDC   in ldci_encaintesap.COD_INTERFAZLDC%type,
                                nuNUM_DOCUMENTOSAP  in ldci_encaintesap.NUM_DOCUMENTOSAP%type,
                                vaCOD_CENTROBENEF   in ldci_encaintesap.COD_CENTROBENEF%type,
                                nuCOD_CLASIFCONTA   in ldci_encaintesap.COD_CLASIFCONTA%type,
                                dtFECHDCTO          in ldci_encaintesap.FECHDCTO%type,
                                dtFECHCONT          in ldci_encaintesap.FECHCONT%type,
                                vaGRLEDGER          in ldci_encaintesap.GRLEDGER%type,
                                vaREFERENC          in ldci_encaintesap.REFERENC%type,
                                vaTXTCABEC          in ldci_encaintesap.TXTCABEC%type,
                                vaCLASEDOC          in ldci_encaintesap.CLASEDOC%type,
                                vaSOCIEDAD          in ldci_encaintesap.SOCIEDAD%type,
                                vaCURRENCY          in ldci_encaintesap.CURRENCY%type,
                                nuIDENTIFICADOR     in number)
  return number;

  function fnuLDCI_DETAINTESAP(nuCOD_INTERFAZLDC in LDCI_DETAINTESAP.COD_INTERFAZLDC%type,
                            nuNUM_DOCUMENTOSAP in LDCI_DETAINTESAP.NUM_DOCUMENTOSAP%type,
                            vaCLAVCONT in LDCI_DETAINTESAP.CLAVCONT%type,
                            vaCLASECTA in LDCI_DETAINTESAP.CLASECTA%type,
                            vaINDICCME in LDCI_DETAINTESAP.INDICCME%type,
                            nuIMPOMTRX in LDCI_DETAINTESAP.IMPOMTRX%type,
                            nuIMPOMSOC in LDCI_DETAINTESAP.IMPOMSOC%type,
                            vaINDICIVA in LDCI_DETAINTESAP.INDICIVA%type,
                            nuCONDPAGO in LDCI_DETAINTESAP.CONDPAGO%type,
                            dtFECHBASE in LDCI_DETAINTESAP.FECHBASE%type,
                            vaREFFACTR in LDCI_DETAINTESAP.REFFACTR%type,
                            nuBASEIMPT in LDCI_DETAINTESAP.BASEIMPT%type,
                            vaCENTROCO in LDCI_DETAINTESAP.CENTROCO%type,
                            vaORDENINT in LDCI_DETAINTESAP.ORDENINT%type,
                            nuCANTIDAD in LDCI_DETAINTESAP.CANTIDAD%type,
                            vaASIGNACN in LDCI_DETAINTESAP.ASIGNACN%type,
                            vaTXTPOSCN in LDCI_DETAINTESAP.TXTPOSCN%type,
                            vaCENTROBE in LDCI_DETAINTESAP.CENTROBE%type,
                            vaSEGMENTO in LDCI_DETAINTESAP.SEGMENTO%type,
                            vaOBJCOSTO in LDCI_DETAINTESAP.OBJCOSTO%type,
                            vaCLAVREF1 in LDCI_DETAINTESAP.CLAVREF1%type,
                            vaCLAVREF2 in LDCI_DETAINTESAP.CLAVREF2%type,
                            vaCLAVREF3 in LDCI_DETAINTESAP.CLAVREF3%type,
                            vaSOCIEDGL in LDCI_DETAINTESAP.SOCIEDGL%type,
                            nuMATERIAL in LDCI_DETAINTESAP.MATERIAL%type,
                            vaTIPORETC in LDCI_DETAINTESAP.TIPORETC%type,
                            vaINDRETEC in LDCI_DETAINTESAP.INDRETEC%type,
                            nuBASERETC in LDCI_DETAINTESAP.BASERETC%type,
                            dtFECHVALOR in LDCI_DETAINTESAP.FECHVALOR%type,
                            vaCTADIV    in LDCI_DETAINTESAP.CTADIV%type,
                            nuCOD_CENTROBENEF in LDCI_DETAINTESAP.COD_CENTROBENEF%type,
                            nuCOD_CLASIFCONTA  in LDCI_DETAINTESAP.COD_CLASIFCONTA%type,
                            nuIDENTIFICADOR in number)
  return number;

  function fnuGeneLDCI_RECLACARTINTESAP(vaTipoInterfaz IN LDCI_RECLACARTNTESAP.TIPOINTERFAZ%TYPE,
                            nuano       in LDCI_RECLACARTNTESAP.ANIO%TYPE,
                            numes       in LDCI_RECLACARTNTESAP.MES%TYPE,
                            nuCOD_INTERFAZLDC in LDCI_DETAINTESAP.COD_INTERFAZLDC%type,
                            nuNUM_DOCUMENTOSAP in LDCI_DETAINTESAP.NUM_DOCUMENTOSAP%type,
                            vaCLAVCONT in LDCI_DETAINTESAP.CLAVCONT%type,
                            vaCLASECTA in LDCI_DETAINTESAP.CLASECTA%type,
                            vaINDICCME in LDCI_DETAINTESAP.INDICCME%type,
                            nuIMPOMTRX in LDCI_DETAINTESAP.IMPOMTRX%type,
                            nuIMPOMSOC in LDCI_DETAINTESAP.IMPOMSOC%type,
                            vaINDICIVA in LDCI_DETAINTESAP.INDICIVA%type,
                            nuCONDPAGO in LDCI_DETAINTESAP.CONDPAGO%type,
                            dtFECHBASE in LDCI_DETAINTESAP.FECHBASE%type,
                            vaREFFACTR in LDCI_DETAINTESAP.REFFACTR%type,
                            nuBASEIMPT in LDCI_DETAINTESAP.BASEIMPT%type,
                            vaCENTROCO in LDCI_DETAINTESAP.CENTROCO%type,
                            vaORDENINT in LDCI_DETAINTESAP.ORDENINT%type,
                            nuCANTIDAD in LDCI_DETAINTESAP.CANTIDAD%type,
                            vaASIGNACN in LDCI_DETAINTESAP.ASIGNACN%type,
                            vaTXTPOSCN in LDCI_DETAINTESAP.TXTPOSCN%type,
                            vaCENTROBE in LDCI_DETAINTESAP.CENTROBE%type,
                            vaSEGMENTO in LDCI_DETAINTESAP.SEGMENTO%type,
                            vaOBJCOSTO in LDCI_DETAINTESAP.OBJCOSTO%type,
                            vaCLAVREF1 in LDCI_DETAINTESAP.CLAVREF1%type,
                            vaCLAVREF2 in LDCI_DETAINTESAP.CLAVREF2%type,
                            vaCLAVREF3 in LDCI_DETAINTESAP.CLAVREF3%type,
                            vaSOCIEDGL in LDCI_DETAINTESAP.SOCIEDGL%type,
                            nuMATERIAL in LDCI_DETAINTESAP.MATERIAL%type,
                            vaTIPORETC in LDCI_DETAINTESAP.TIPORETC%type,
                            vaINDRETEC in LDCI_DETAINTESAP.INDRETEC%type,
                            nuBASERETC in LDCI_DETAINTESAP.BASERETC%type,
                            dtFECHVALOR in LDCI_DETAINTESAP.FECHVALOR%type,
                            vaCTADIV    in LDCI_DETAINTESAP.CTADIV%type,
                            nuCOD_CENTROBENEF in LDCI_DETAINTESAP.COD_CENTROBENEF%type,
                            nuCOD_CLASIFCONTA  in LDCI_DETAINTESAP.COD_CLASIFCONTA%type)
  return number;

  function fnuINSEINTESAP
  return number;


  function fnuINSEINTESAPCARTE
  return number;

  function fnuLDCI_INCOLIQU(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME IN VARCHAR2,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA IN VARCHAR2,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                        nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        nuASIGNACN IN LDCI_INCOLIQU.ASIGNACN%TYPE,
                        nuCLAVREF1 IN LDCI_INCOLIQU.CLAVREF1%TYPE,
                        sbCLAVREF3 IN LDCI_INCOLIQU.CLAVREF3%TYPE,
                        nuCUPON IN LDCI_INCOLIQU.CUPON%TYPE,
                        nuCentBen IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        nuOrdenInt IN ic_decoreco.dcrcinad%TYPE,
                        nuSegmento IN ic_decoreco.dcrcinad%TYPE,
                        nuBASEIMPT IN LDCI_INCOLIQU.BASEIMPT%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%TYPE,
                        sbLEDGERS IN LDCI_INCOLIQU.LEDGERS%type,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE  )
  return number;

  function fnuLDCI_INCOLIQU_PAGOS(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME IN VARCHAR2,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA IN VARCHAR2,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                        nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        nuASIGNACN IN LDCI_INCOLIQU.ASIGNACN%TYPE,
                        nuCLAVREF1 IN LDCI_INCOLIQU.CLAVREF1%TYPE,
                        sbCLAVREF3 IN LDCI_INCOLIQU.CLAVREF3%TYPE,
                        nuCUPON IN LDCI_INCOLIQU.CUPON%TYPE,
                        nuCentBen IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        nuOrdenInt IN ic_decoreco.dcrcinad%TYPE,
                        nuSegmento IN ic_decoreco.dcrcinad%TYPE,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante in LDCI_INCOLIQU.comprobante%type,
                        sbLEDGERS IN LDCI_INCOLIQU.LEDGERS%type  )
return number;

  FUNCTION fnuLDCI_INCOLIQU_PROVCARTERA(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME  VARCHAR2,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA  VARCHAR2,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaCbene IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        vaCcosto IN LDCI_INCOLIQU.centroco%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        sbSegmento VARCHAR2,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%TYPE,
                        sbLEDGERS IN LDCI_INCOLIQU.LEDGERS%type,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE)
  return number;

  FUNCTION fnuLDCI_INCOLIQU_RECLACARTERA(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME  VARCHAR2,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA  VARCHAR2,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaCbene IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        vaCcosto IN LDCI_INCOLIQU.centroco%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        sbSegmento VARCHAR2,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%type,
                        sbLEDGERS IN LDCI_INCOLIQU.LEDGERS%type)
  return number;

  FUNCTION fnuLDCI_INCOLIQU_RECLACARTERO(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME  VARCHAR2,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA  VARCHAR2,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaCbene IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        vaCcosto IN LDCI_INCOLIQU.centroco%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        sbSegmento VARCHAR2,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%type,
                        sbLEDGERS IN LDCI_INCOLIQU.LEDGERS%type)
  return number;

  function fnuGeneDocuSap(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2)
  return number;

  function fnuGeneDocuSapRein(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2)
  return number;

  function fnuGeneDocuSapReinFe(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2)
  return number;

  function fnuGeneDocuSapProvCartera  (vaTipoInterfaz LDCI_PROVINTESAP.TIPOINTERFAZ%TYPE,
                              nuano       in LDCI_PROVINTESAP.ANIO%TYPE,
                              numes       in LDCI_PROVINTESAP.MES%TYPE,
                              nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                              vaMensInte   in varchar2)
  return number;


  function fnuGeneDocuSap_Pro_cartera(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2)
  return number;

  function fnuGeneDocuSap_Autoreten(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
  return number;

  function fnuGeneDocuSap_PAGOS(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2,
                          sbTipoInterfaz    in ldci_tipointerfaz.tipointerfaz%type)
  return number;

  function fnuValidaCuentaMayor(ivacuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%type)
  return number;

  FUNCTION fvaGetClaveConta (nucuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN ic_decoreco.dcrcsign%TYPE,
                             ovaCTCAICME  OUT LDCI_CTACADMI.CTCAICME%TYPE,
                             ovaCTCAINIV  OUT LDCI_CTACADMI.CTCAINIV%TYPE)
  return VARCHAR;

  FUNCTION fvaGetClaveContaIngreso (
                             nuClasificador IN LDCI_CTACADMI.CTACLCO%TYPE,
                             nucuctcodi   IN LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN ic_decoreco.dcrcsign%TYPE,
                             nuPorcen     IN LDCI_CTACADMI.CTCPORC%TYPE,
                             ovaCTCAICME  OUT LDCI_CTACADMI.CTCAICME%TYPE,
                             ovaCTCAINIV  OUT LDCI_CTACADMI.CTCAINIV%TYPE)
  return VARCHAR;

  FUNCTION fvaGetClaveContaPagos (
                             nuClasificador IN LDCI_CTACADMI.CTACLCO%TYPE,
                             nucuctcodi   IN LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN ic_decoreco.dcrcsign%TYPE,
                             nuPorcen     IN LDCI_CTACADMI.CTCPORC%TYPE)
  return VARCHAR;

function fvaGetTipoDocu (nutimocodi   in ic_tipomovi.timocodi%TYPE)
return VARCHAR;

function fnuInterfazIngreso(sbTipoInterfaz   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                            nuAnio NUMBER,
                            nuMes NUMBER)
return number;

--<<
-- Dcardona
-- 28/07/2014
-->>
FUNCTION fnuInterfazIngresoRO(sbTipoInterfaz   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                              nuAnio NUMBER,
                              nuMes NUMBER)
RETURN NUMBER;

--<<
-- Dcardona
-- 28/07/2014
-->>
FUNCTION fnuInterfazProvIngresoRO(idaFecha_Inicio    DATE,
                                  idaFecha_Fin       DATE)
RETURN NUMBER;

function fnuInterfazAutoretencion(nutimocodi   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                            nuAnio NUMBER,
                            nuMes NUMBER)
return number;

--<<
-- Dcardona
-- 28/07/2014
-->>
FUNCTION fnuInterfazAutoretencionRO(nutimocodi IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                    nuAnio     NUMBER,
                                    nuMes      NUMBER)
RETURN NUMBER;

function fnuInterfazProvCartera(nutimocodi   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                            nuAnio NUMBER,
                            nuMes NUMBER)
return number;

--<<
-- Dcardona
-- 29/07/2014
-->>
FUNCTION fnuInterfazProvCarteraRO(nutimocodi   IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                  nuAnio       NUMBER,
                                  nuMes        NUMBER)
RETURN NUMBER;

function fnuInterfazProvConsumo(nutimocodi   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                              daFecha_Inicio DATE,
                              daFecha_Fin DATE,nuAnio NUMBER,nuMes Number)

return number;

--<<
-- Dcardona
-- 29/07/2014
-->>
FUNCTION fnuInterfazProvConsumoRO(nutimocodi     IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                  daFecha_Inicio DATE,
                                  daFecha_Fin    DATE,nuAnio NUMBER,nuMes Number)

RETURN NUMBER;

function fnuInterfazRecaudo(sbTIPOINTERFAZ   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                              daFecha_Inicio DATE,
                              daFecha_Fin DATE)
return number;

--<<
-- Dcardona
-- 23/07/2014
-->>
FUNCTION fnuInterfazRecaudoRO(sbTipointerfaz IN ldci_tipointerfaz.tipointerfaz%TYPE,
                              daFecha_Inicio DATE,
                              daFecha_Fin    DATE)
RETURN NUMBER;

function fnuInterfazReintegro(nutimocodi   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                              daFecha_Inicio DATE,
                              daFecha_Fin DATE)
return number;

--<<
-- Dcardona
-- 23/07/2014
-->>
FUNCTION fnuInterfazReintegroRO(nutimocodi     IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                daFecha_Inicio DATE,
                                daFecha_Fin    DATE)
RETURN NUMBER;

FUNCTION fnuInterfazContableAnioMes(nuInIntSAP   in VARCHAR2,
                              Anio Number,
                              Mes Number)
  return number;

  --<<
  -- Dcardona
  -- 29/07/2014
  -->>
  FUNCTION fnuInterfazContableAnioMesRO(nuInIntSAP   IN VARCHAR2,
                                        Anio         NUMBER,
                                        Mes          NUMBER)
  RETURN NUMBER;

function fnuInterfazContableFechas(nuInIntSAP   in VARCHAR2,
                               daFecha_Inicio DATE,
                               daFecha_Fin DATE)
return number;

  --<<
  -- Dcardona
  -- 29/07/2014
  -->>
  FUNCTION fnuInterfazContableFechasRO(nuInIntSAP     IN VARCHAR2,
                                       daFecha_Inicio DATE,
                                       daFecha_Fin    DATE)
  RETURN NUMBER;

FUNCTION fnuCtaDiver(sbClavCont IN ldci_claveconta.clavcodi%TYPE)
RETURN VARCHAR2;

function fvaGetCecoCuen (ivacuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                         ivacentrobenef IN LDCI_CENTROBENEF.cebecodi%TYPE)
return VARCHAR2;

function fvaGetCebe (inuceloloca   in LDCI_CENTBENELOCA.celoloca%TYPE)
return VARCHAR2;

FUNCTION fvaGetCebeNew (inuceloloca   in LDCI_CENTBENELOCA.celoloca%TYPE,
                       inucatecodi   IN LDCI_CENTBENELOCA.celocate%TYPE)
return VARCHAR2;

--<<
-- Dcardona
-- 28/07/2014
-->>
FUNCTION fvaGetCebeNoCat(inuceloloca   IN ldci_centbenelocal.celoloca%TYPE)
RETURN VARCHAR2;

function fvaGetData (inuPosicion             IN      NUMBER,
                     ivaString               IN      VARCHAR2,
                     ivaSeparate             IN      VARCHAR2)
return VARCHAR2;

function fvaGetOI(inuCatecodi            in   categori.catecodi%TYPE,
                  inuClcrclco            in   IC_CLASCORE.clcrclco%TYPE)
return VARCHAR2;


FUNCTION fvaGetOIGen
  (
        inuCatecodi     in categori.catecodi%TYPE,
        inuClcrclco     in IC_CLASCORE.clcrclco%TYPE,
        inuCiclo        in ciclo.ciclcodi%type
  )
  return VARCHAR2;

FUNCTION fvaValidaGetOI
  (
        inuTipoProd     in servicio.servcodi%type,
        inuCatecodi     in categori.catecodi%TYPE,
        inuClcrclco     in ic_clascore.clcrclco%TYPE,
        inuCiclo        in ciclo.ciclcodi%type
  )
  RETURN VARCHAR2;


function fvaGetDescripNit (inubannnnit   in LDCI_BANCONIT.bannnnit%TYPE)
return VARCHAR2;


function fvaGetClasCont (nuCons   in NUMBER)
return NUMBER;

function fvaGetRegAnioMes (nuAnio   in NUMBER,
                         nuMes in NUMBER,
                         sbTipInter in VARCHAR2)
return NUMBER;

function fvaGetRegFecha (daFechaFin   in Date,
                         vaTipInter in VARCHAR2)
return NUMBER;

function fvaGetCodTipInter (sbDesInterfaz VARCHAR2)
return NUMBER;

Function fvaGetSegmento(Cebe number)
Return VARCHAR2;

function fnuGeneDocuSapActa(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
return number;

  --<<
  -- Dcardona
  -- 04/10/2014
  -->>
  FUNCTION fnuGeneDocuSapActaRO(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
  RETURN NUMBER;

  --<<
  -- Dcardona
  -- 31/07/2014
  -->>
  FUNCTION fnuGeneDocuSapReclaCarteraRO(vaTipoInterfaz    ldci_reclacartntesap.tipointerfaz%TYPE,
                                        nuano          IN ldci_reclacartntesap.anio%TYPE,
                                        numes          IN ldci_reclacartntesap.mes%TYPE,
                                        nuIclinudo     IN ldci_incoliqu.iclinudo%TYPE,
                                        vaMensInte     IN VARCHAR2)
  RETURN NUMBER;

function fnuGeneDocuSapProv(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
return number;

function fnuGetDivergente(sbClavCont   VARCHAR2)
return VARCHAR2;

function fnuGetNitGenerico(sbClasContable  NUMBER)
return VARCHAR2;

FUNCTION fnuActualizaReca (nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
return NUMBER;

   function fnuLDCI_INCOLIQUACTA(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME IN VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA IN VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                        nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%type)
  return number;

  --<<
  -- Dcardona
  -- 28/07/2014
  -->>
  FUNCTION fnuLDCI_INCOLIQUACTACOSTO( nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                                      nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                                      dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                                      vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                                      vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                                      dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                                      nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                                      vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                                      vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                                      vaINDICCME  VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                                      nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                                      nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                                      vaINDICIVA  VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                                      nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                                      vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                                      vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                                      vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                                      vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                                      vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                                      vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                                      vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                                      nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                                      nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                                      vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                                      --<<
                                      -- CA-376
                                      vaCECO     in LDCI_INCOLIQU.CENTROCO%type,
                                      -->>                                      
                                      dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                                      nuComprobante IN LDCI_INCOLIQU.comprobante%type)
  RETURN NUMBER;

  FUNCTION fvaGetOICos (inudeparta  in ldci_cencoubgtra.ccbgdpto%TYPE,
                        inulocalid  IN ldci_cencoubgtra.ccbgloca%TYPE,
                        inutipotra  IN ldci_cencoubgtra.ccbgtitr%TYPE,
                        inuitem     IN ldci_cencoubgtra.ccbgitem%TYPE,
                        ovacecost   OUT ldci_cencoubgtra.ccbgceco%TYPE,
                        ovaordein   OUT ldci_cencoubgtra.ccbgorin%TYPE)
  return NUMBER;

  --<<
  -- Dcardona
  -- 28/07/2014
  -->>
  FUNCTION fvaGetOICECO(inudeparta  in ldci_cencoubgtra.ccbgdpto%TYPE,
                        inulocalid  IN ldci_cencoubgtra.ccbgloca%TYPE,
                        inutipotra  IN ldci_cencoubgtra.ccbgtitr%TYPE,
                        ovacecost   OUT ldci_cencoubgtra.ccbgceco%TYPE,
                        ovaordein   OUT ldci_cencoubgtra.ccbgorin%TYPE)
  RETURN NUMBER;

  FUNCTION fvaGetCuenTipoContrato (inuidtipocontr IN ldci_ctatipcontr.idtipocontr%TYPE)
  RETURN VARCHAR;

    FUNCTION fnuGetTipoContrato (inuidcontr IN ge_contrato.id_contrato%TYPE)
   return NUMBER;

  FUNCTION  fnuValidaCuenta (ivacutacontable ldci_cuentacontable.cuctcodi%TYPE)
  RETURN  NUMBER;

  function fnuAjusteInterCont(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%TYPE)
  return NUMBER;

  function fnuAjusteInterContRO(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%TYPE)
  return NUMBER;

--Ara 6746: Se agrega los parametros de entrada Tipo de documento y Valor limite de ajuste
function fnuAjusteInterContable(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%TYPE,
                                vaICLITIDO   IN LDCI_INCOLIQU.iclitido%TYPE,
                                nuVlrAjust   IN NUMBER)
return NUMBER;

function fnuTipoIntRecaudo(sbFechagen   in LDC_CIERCOME.CICOFECH%TYPE,
tipoRecaudo OUT LDCI_TIPODOCO.TIDCCODI%TYPE)
return NUMBER;

function fnuRangoFechas(inuAnio NUMBER,
                        inuMes NUMBER,
                        otFechainic OUT DATE,
                        otFechaFin OUT DATE)
return NUMBER;

FUNCTION fvaGetFechaCierre(nuAnio in NUMBER,
                             nuMes in NUMBER,
                             daFechaIni  OUT DATE,
                             daFechaFin  OUT DATE)
return NUMBER;

FUNCTION fnuRegistraInterfaz(vaLDCODINTERF  in LDCI_REGISTRAINTERFAZ.LDCODINTERF%type,
                daLDFECHCONTA in LDCI_REGISTRAINTERFAZ.LDFECHCONTA%type,
                vaLDFLAGCONTABI in LDCI_REGISTRAINTERFAZ.LDFLAGCONTABI%type,
                vaLDTIPOINTERFAZ in LDCI_REGISTRAINTERFAZ.LDTIPOINTERFAZ%type)
return NUMBER;

FUNCTION fnuRegistraInterfazAnioMes(vaLDCODINTERF  in LDCI_REGISTRAINTERFAZ.LDCODINTERF%type,
                daANIO in LDCI_REGISTRAINTERFAZ.LDANOCONTABI%type,
                daMES in LDCI_REGISTRAINTERFAZ.LDMESCONTAB%type,
                vaLDFLAGCONTABI in LDCI_REGISTRAINTERFAZ.LDFLAGCONTABI%type,
                vaLDTIPOINTERFAZ in LDCI_REGISTRAINTERFAZ.LDTIPOINTERFAZ%type)
return NUMBER;

FUNCTION fnuGetLocalidad(vaDcrcinad in ic_decoreco.DCRCINAD%type,inVanuLocalidad OUT VARCHAR2)
return NUMBER;

FUNCTION fnuGetLocalidadBansucu(vaBanco in varchar2,vaSucursal in varchar2,inVanuLocalidad OUT VARCHAR2)
return NUMBER;

function fnuInterfazReclaCartera(nutimocodi   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                            nuAnio NUMBER,
                            nuMes NUMBER)
return number;



--<<
-- Dcardona
-- 29/07/2014
-->>
FUNCTION fnuInterfazReclaCarteraRO(nutimocodi   IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                   nuAnio       NUMBER,
                                   nuMes        NUMBER)
RETURN NUMBER;

FUNCTION fnuGeneDocuSap_INGRESOS(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2,
                          CtaIva in varchar2,
                          sbtipointerfaz in varchar2)
return number;

FUNCTION fnuldci_detaprovcosto(nuCOD_INTERFAZLDC in LDCI_DETAPROVCOSTO.COD_INTERFAZLDC%type,
                            nuNUM_DOCUMENTOSAP in LDCI_DETAPROVCOSTO.NUM_DOCUMENTOSAP%type,
                            vaCLAVCONT  in LDCI_DETAPROVCOSTO.CLAVCONT%type,
                            vaCLASECTA  in LDCI_DETAPROVCOSTO.CLASECTA%type,
                            vaINDICCME  in LDCI_DETAPROVCOSTO.INDICCME%type,
                            nuIMPOMTRX  in LDCI_DETAPROVCOSTO.IMPOMTRX%type,
                            nuIMPOMSOC  in LDCI_DETAPROVCOSTO.IMPOMSOC%type,
                            vaINDICIVA  in LDCI_DETAPROVCOSTO.INDICIVA%type,
                            nuCONDPAGO  in LDCI_DETAPROVCOSTO.CONDPAGO%type,
                            dtFECHBASE  in LDCI_DETAPROVCOSTO.FECHBASE%type,
                            vaREFFACTR  in LDCI_DETAPROVCOSTO.REFFACTR%type,
                            nuBASEIMPT  in LDCI_DETAPROVCOSTO.BASEIMPT%type,
                            vaCENTROCO  in LDCI_DETAPROVCOSTO.CENTROCO%type,
                            vaORDENINT  in LDCI_DETAPROVCOSTO.ORDENINT%type,
                            nuCANTIDAD  in LDCI_DETAPROVCOSTO.CANTIDAD%type,
                            vaASIGNACN  in LDCI_DETAPROVCOSTO.ASIGNACN%type,
                            vaTXTPOSCN  in LDCI_DETAPROVCOSTO.TXTPOSCN%type,
                            vaCENTROBE  in LDCI_DETAPROVCOSTO.CENTROBE%type,
                            vaSEGMENTO  in LDCI_DETAPROVCOSTO.SEGMENTO%type,
                            vaOBJCOSTO  in LDCI_DETAPROVCOSTO.OBJCOSTO%type,
                            vaCLAVREF1  in LDCI_DETAPROVCOSTO.CLAVREF1%type,
                            vaCLAVREF2  in LDCI_DETAPROVCOSTO.CLAVREF2%type,
                            vaCLAVREF3  in LDCI_DETAPROVCOSTO.CLAVREF3%type,
                            vaSOCIEDGL  in LDCI_DETAPROVCOSTO.SOCIEDGL%type,
                            nuMATERIAL  in LDCI_DETAPROVCOSTO.MATERIAL%type,
                            vaTIPORETC  in LDCI_DETAPROVCOSTO.TIPORETC%type,
                            vaINDRETEC  in LDCI_DETAPROVCOSTO.INDRETEC%type,
                            nuBASERETC  in LDCI_DETAPROVCOSTO.BASERETC%type,
                            dtFECHVALOR in LDCI_DETAPROVCOSTO.FECHVALOR%type,
                            vaCTADIV    in LDCI_DETAPROVCOSTO.CTADIV%type,
                            nuCOD_CENTROBENEF in LDCI_DETAPROVCOSTO.COD_CENTROBENEF%type,
                            nuCOD_CLASIFCONTA  in LDCI_DETAPROVCOSTO.COD_CLASIFCONTA%TYPE,
                            nuano       in LDCI_DETAPROVCOSTO.ano%TYPE,
                            numes       in LDCI_DETAPROVCOSTO.mes%TYPE)
RETURN NUMBER;

function fnuGeneDocuSapMat(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
return number;

function fnuValidaCampo(vaDato  varchar2)
return NUMBER;

FUNCTION fvaGetGrupoProvCarte (nuClasificador  in IC_CLASCONT.CLCOCODI%TYPE)
--                               vaDesProv  OUT LDCI_DETAINTESAP.txtposcn%TYPE)
return NUMBER;

function fnuGeneDocuSapReclaCartera  (vaTipoInterfaz LDCI_RECLACARTNTESAP.TIPOINTERFAZ%TYPE,
                            nuano       in LDCI_RECLACARTNTESAP.ANIO%TYPE,
                            numes       in LDCI_RECLACARTNTESAP.MES%TYPE,
                            nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                            vaMensInte   in varchar2)
return number;

 FUNCTION funRevReclaCart(nuAnio  IN LDCI_RECLACARTNTESAP.ANIO%TYPE,
                          numes  IN LDCI_RECLACARTNTESAP.MES%TYPE
                          )
  RETURN NUMBER;

  --<<
  -- Dcardona
  -- 01/08/2014
  -->>
  FUNCTION funRevReclaCartRO(nuAnio  IN ldci_reclacartntesap.anio%TYPE,
                             numes   IN ldci_reclacartntesap.mes%TYPE)
  RETURN NUMBER;


  PROCEDURE validaLDCIREVCLACART;--validaLDCIGINT;

     function fnuLDCI_INCOLIQUMAT(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        --vaCOD_CENTROBENEF in LDCI_INCOLIQU.COD_CENTROBENEF%type,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME IN VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA IN VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                        --vaCONDPAGO IN LDCI_INCOLIQU.CONDPAGO%TYPE,
                        --dtFECHBASE IN LDCI_INCOLIQU.FECHBASE%TYPE,
                        --vaREFFACTR IN LDCI_INCOLIQU.REFFACTR%TYPE,
                        --nuBASEIMPT IN LDCI_INCOLIQU.BASEIMPT%TYPE,
                        --vaCENTROCO IN LDCI_INCOLIQU.CENTROCO%TYPE,
                        --vaORDENINT IN LDCI_INCOLIQU.ORDENINT%TYPE,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        --vaASIGNACN IN LDCI_INCOLIQU.ASIGNACN%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        --vaCENTROBE IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        --vaSEGMENTO IN LDCI_INCOLIQU.SEGMENTO%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        --vaCLAVREF1 IN LDCI_INCOLIQU.CLAVREF1%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        --vaCLAVREF3 IN LDCI_INCOLIQU.CLAVREF3%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                        nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        --dtFECHVALOR in LDCI_INCOLIQU.FECHVALOR%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%type)
  return number;

  --<<
  -- Dcardona
  -- 01/08/2014
  -->>
  FUNCTION fnuLDCI_INCOLIQUMATRO(nuICLITIDO        IN ldci_incoliqu.iclitido%TYPE,
                                 nuICLINUDO        IN ldci_incoliqu.iclinudo%TYPE,
                                 dtICLIFECH        IN ldci_incoliqu.iclifech%TYPE,
                                 vaICLIUSUA        IN ldci_incoliqu.icliusua%TYPE,
                                 vaICLITERM        IN ldci_incoliqu.icliterm%TYPE,
                                 dtICLIFECR        IN ldci_incoliqu.iclifecr%TYPE,
                                 nuCOD_CLASIFCONTA IN ldci_incoliqu.cod_clasifconta%type,
                                 vaCLAVCONT        IN ldci_incoliqu.clavcont%TYPE,
                                 vaCLASECTA        IN ldci_incoliqu.clasecta%TYPE,
                                 vaINDICCME        VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                                 nuIMPOMTRX        IN ldci_incoliqu.impomtrx%TYPE,
                                 nuIMPOMSOC        IN ldci_incoliqu.impomsoc%TYPE,
                                 vaINDICIVA        VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                                 nuCANTIDAD        IN ldci_incoliqu.cantidad%TYPE,
                                 vaTXTPOSCN        IN ldci_incoliqu.txtposcn%TYPE,
                                 vaOBJCOSTO        IN ldci_incoliqu.objcosto%TYPE,
                                 vaCLAVREF2        IN ldci_incoliqu.clavref2%TYPE,
                                 vaSOCIEDGL        IN ldci_incoliqu.sociedgl%TYPE,
                                 vaMATERIAL        IN ldci_incoliqu.material%TYPE,
                                 vaTIPORETC        IN ldci_incoliqu.tiporetc%TYPE,
                                 vaINDRETEC        IN ldci_incoliqu.indretec%TYPE,
                                 nuBASERETC        IN ldci_incoliqu.baseretc%TYPE,
                                 nuNUSEINSE        IN ldci_incoliqu.nuseinse%TYPE,
                                 vaCTADIV          IN ldci_incoliqu.ctadiv%TYPE,
                                 dcrcinad          IN ic_decoreco.dcrcinad%TYPE,
                                 nuComprobante     IN ldci_incoliqu.comprobante%TYPE)
  RETURN NUMBER;

  FUNCTION fnuDatosVentaBrilla(inuPackage_id  IN mo_packages.package_id%type)
  RETURN VARCHAR2;

  FUNCTION fnuDatosVentaBrillaRO(inuPackage_id  IN mo_packages.package_id%type)
  RETURN VARCHAR2;

  FUNCTION fvaGetNaturaleza (ivaclave LDCI_INCOLIQU.clavcont%TYPE)
  RETURN VARCHAR;

  FUNCTION fvaGetClaveConta (nucuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN ic_decoreco.dcrcsign%TYPE)
  return VARCHAR;


   FUNCTION fnuDistriImpuesto(nutimocodi IN VARCHAR2,
    nuSeqICLINUDO IN NUMBER,
    vaSOCIEDAD IN VARCHAR2,
    daFechaIni     IN   factura.factfege%type,
    daFechaFin     IN   factura.factfege%type
)
    RETURN NUMBER;

    --<<
    -- Dcardona
    -- 18/09/2014
    -->>
    FUNCTION fnuDistriImpuestoRO(nutimocodi    IN VARCHAR2,
                                 nuSeqICLINUDO IN NUMBER,
                                 vaSOCIEDAD    IN VARCHAR2,
                                 idtFechIni    IN factura.factfege%type,
                                 idtFechFin    IN factura.factfege%TYPE)
    RETURN NUMBER;

  FUNCTION fvaGetActivo (inudeparta  in ldci_actiubgttra.acbgdpto%TYPE,
                        inulocalid  IN ldci_actiubgttra.acbgloca%TYPE,
                        inutipotra  IN ldci_actiubgttra.acbgtitr%TYPE,
                        ovaactiv   OUT ldci_actiubgttra.acbgacti%TYPE,
                        ovasubnum   OUT ldci_actiubgttra.acbgsubn%TYPE,
                        ovaordein   OUT ldci_actiubgttra.acbgorin%TYPE)
  return NUMBER;

  --<<
  -- Dcardona
  -- 09/10/2014
  -->>
  FUNCTION fvaGetActivoRO(inudeparta  in ldci_actiubgttra.acbgdpto%TYPE,
                          inulocalid  IN ldci_actiubgttra.acbgloca%TYPE,
                          inutipotra  IN ldci_actiubgttra.acbgtitr%TYPE,
                          ivaActivo   IN /*OUT*/ ldci_actiubgttra.acbgacti%TYPE,
                          ovasubnum   OUT ldci_actiubgttra.acbgsubn%TYPE,
                          ovaordein   OUT ldci_actiubgttra.acbgorin%TYPE)
  RETURN NUMBER;

  FUNCTION fvaGetClaveContaCu (nucuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN IC_DECORECO.dcrcsign%TYPE)
  return VARCHAR;

  FUNCTION fvaGetNitDetallado (nucuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                               nuClasificador  in IC_CLASCONT.CLCOCODI%TYPE)
  return VARCHAR;

  FUNCTION fvaGetCECO(inudeparta  IN ldci_cencoubgtra.ccbgdpto%TYPE,
                      inulocalid  IN ldci_cencoubgtra.ccbgloca%TYPE,
                      inutipotra  IN ldci_cencoubgtra.ccbgtitr%TYPE)
  RETURN VARCHAR2;

  FUNCTION fvaGetOIEST(inudeparta  IN ldci_cencoubgtra.ccbgdpto%TYPE,
                       inulocalid  IN ldci_cencoubgtra.ccbgloca%TYPE,
                       inutipotra  IN ldci_cencoubgtra.ccbgtitr%TYPE)
  RETURN VARCHAR2;

  FUNCTION fnuLDCI_INCOLIQUPROV ( vaICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                                  nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                                  dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                                  vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                                  vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                                  dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                                  vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                                  vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                                  vaINDICCME IN LDCI_INCOLIQU.INDICCME%TYPE,
                                  nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%type,
                                  nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                                  vaINDICIVA IN LDCI_INCOLIQU.INDICIVA%TYPE,
                                  vaCONDPAGO IN LDCI_INCOLIQU.CONDPAGO%TYPE,
                                  dtFECHBASE IN LDCI_INCOLIQU.FECHBASE%TYPE,
                                  vaREFFACTR IN LDCI_INCOLIQU.REFFACTR%TYPE,
                                  nuBASEIMPT IN LDCI_INCOLIQU.BASEIMPT%TYPE,
                                  vaORDENINT IN LDCI_INCOLIQU.ORDENINT%TYPE,
                                  nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                                  vaASIGNACN IN LDCI_INCOLIQU.ASIGNACN%TYPE,
                                  vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%type,
                                  vaCENTROBE IN LDCI_INCOLIQU.CENTROBE%TYPE,
                                  vaSEGMENTO IN LDCI_INCOLIQU.SEGMENTO%TYPE,
                                  vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                                  vaCLAVREF1 IN LDCI_INCOLIQU.CLAVREF1%TYPE,
                                  vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                                  vaCLAVREF3 IN LDCI_INCOLIQU.CLAVREF3%TYPE,
                                  vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                                  vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                                  vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                                  vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%type,
                                  vaBASERETC IN LDCI_INCOLIQU.BASERETC%type,
                                  nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                                  vaCOD_CENTROBENEF IN LDCI_INCOLIQU.COD_CENTROBENEF%type,
                                  nuCOD_CLASIFCONTA IN LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                                  dtFECHVALOR       IN LDCI_INCOLIQU.FECHVALOR%type,
                                  vaCTADIV          IN LDCI_INCOLIQU.CTADIV%type,
                                  vaCENTROCO        IN LDCI_INCOLIQU.CENTROCO%type,
                                  nuCOMPROBANTE     IN LDCI_INCOLIQU.COMPROBANTE%type,
                                  vaLEDGERS         IN LDCI_INCOLIQU.LEDGERS%TYPE,
                                  vatipotrab        IN LDCI_INCOLIQU.TIPOTRAB%TYPE)
  RETURN NUMBER;

  PROCEDURE valFeFotoProCos;
  PROCEDURE valIntProvCost;

function fnuInterfazReclaCartera_B(vaTIPINTINTERFAZ   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                            nuAnio NUMBER,
                            nuMes NUMBER)
return number;
END ldci_pkinterfazsap;
/
CREATE OR REPLACE PACKAGE BODY ldci_pkinterfazsap
IS
/************************************************************************
   PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
   FUNCION   : ldci_pkinterfazsap
   AUTOR     : Heiber Barco
   FECHA     : 02-08-2013
   DESCRIPCION  : Tiquete:
                  Paquete que maneja la logica de la interfaz contable para SAP.
  Parametros de Entrada

  Parametros de Salida

  Historia de Modificaciones
  Autor    Fecha       Descripcion

  carlosr@arqs.co 01/02/2016
  Se modifican los m?todos fnuInterfazIngreso y fnuInterfazIngresoRO

    cdominguez 21-03-2014   Se modifica el paquete para adicionar el campo comprobante
    en la tabla LDCI_INCOLIQU, se adiciona el campo identificador en las tablas
    ldci_encaintesap, LDCI_DETAINTESAP.
    cdominguez 06-05-2014 3343_4 se elimina valor por default para los metodos
    que hacen graban en incoliqu

    cdominguez 02-07-2014 Se adiciona soportes de generacion de la interfaz   nb bnnn
    recaudos y control reintegro. Se modifica asignaci?n de segmento en la interfaz
    de reclasificaci?n cartera

  cgonzalezv  10-08-2015  - Aranda 6749
              Modificaci?n en la agrupaci?n de Fechas en Interfaz de Control Reintegro y
              limite de 999 Documentos. Modificacion Cantidad de documentos
              en Interfaz de Ingresos.
              se crea metodo fnuSplitDocClas
              Encargada de dividir en Documentos para los
              clasificadores contable que supere los 999 registros en la interfaz de ingresos

                Se modifica el cursor que obtiene la informacion de
                brilla para las demas gaseras, tomando la logica de la compa?ia GDO.
   cgonzalezv  18-08-2015 SAO 327681 Se adicciona el tipo de trabajo en incoliqu
               metodo <<fnuLDCI_INCOLIQUPROV>>

   cgonzalezv   27-08-2015  ARANDA: 4212 Parametrizacion Items de anticipo y reportar el numero
                de anticipo en el campo asignacion.

   cgonzalezv   18-09-2015  Aranda 6744: Reportar como Fecha Contable en L2
                la fecha de proceso o grabacion del pago
                Y SAO 337642  Recaudos Fuera de Fechas Ultimo
                de del mes debe contabilzar como LC (fuera de fechas del
                periodo contable)y no como L2
                (Recaudo dentro del periodo contable).

   cgonzalezv  24/09/2015  SAO 340428 MOdificacion de las funciones fnuGeneDocuSapActa
                           fnuGeneDocuSapActaRO cursor cuLDCI_INCOLIQU, para soportar
                           la clave contable por Devolucion de Fondo de Garantia
   Dcardona 06-Oct-2015    SAO: 338943
                           Se cambia la variable que se env?a en el detalle de interfaz
                           para que se env?e la variable TXTPOSCN de ldci_incoliqu en lugar
                           de la variable vaMensInte de enrada de la funci?n para las funciones
                           fnuGeneDocuSapReclaCarteraRO y fnuGeneDocuSapReclaCartera
 cgonzalezv 22/10/2015     ARA 6746: Creaci?n de Par?metros para valor l?mite en proceso
                           de Ajuste Debito vs Credito.
                           Objetos Modificados:
                           fnuInterfazRecaudo
                           fnuInterfazRecaudoRO
                           InterfazReintegro
                           InterfazReintegroRO
                           fnuInterfazIngreso
                           fnuInterfazIngresoRO
                           fnuInterfazAutoretencion
                           fnuInterfazAutoretencionRO
                           fnuInterfazProvIngresoRO
                           fnuInterfazProvCartera
                           fnuInterfazProvCarteraRO
                           fnuInterfazReclaCartera
                           fnuInterfazReclaCarteraRO
                           fnuInterfazProvConsumo
                           fnuInterfazProvConsumoRO
                           fnuAjusteInterContable

 cgonzalezv 30/10/2015     SAO 340484: Cambio de tipo de documento para la interfaz
                           de provision consumo NO regulado LC por L5C
 heiberb     10-11-2015   SAO 350458 se realiza el cambio de tipo de dato a la variable
                          vaNitAnticipo ajustandolo al tama?o del campo de la tabla
                          ldci_detaintesap.Asignacn%type;
 FCastro    15-11-FNUGENEDOCUSAPACTARO     200-86. Se envia correo notificando que se envio la interfaz o
                          si hubo errores en el proceso.

 Ludycom     20-10-2017   CA-200-1300 y CA-200-1301
                          Se corrige la generacion de trama de actas de comision para que a las cuentas de retencion
                          le envie la base, tipo de indicador e indicador de retencion.

 Horbart     21-10-2018   CA-200-2158 - Se asignan en la trama las condiciones de pago del contratista de acuerdo al
                          contrato y se asigna como fecha para pago la de radicacion de la factura en OnBase.

 Horbath     25/11/2019   CA-0000239  - Se modifica la interfaz de ingresos para que omita los clasificadores
                          de Brilla Y Cardif, la funcion a modificar es la FnuInterfazIngresoRO

 Horbath     27/01/2020   CA-0000288  - Se modifica la interfaz de ingresos para que lleve el valor de las ventas
                          de FNB a cada proveedor, se omite la unidad operativa de 2512 CARDIF de la funcion
                          fnuDatosVentaBrillaRO.

 Horbath     24/04/2020   CA-0000398  - Se modifica la interfaz de ingresos, funcion fnuInterfazIngresoRO,
                          para que reporte el NIT 9994 al clasificador 2 de Brilla, actualmente hay movimiento que envia al
                          NIT 9999, esto es un error.
                          Se modifica la interfaz de Control Reintegro, funcion fnuInterfazReintegroRO,  para corregir la
                          validacion del cuadre del movimiento el tipomovi 65 debe ser con signo CR para que cuadre.

 Edmlar      07/07/2020   CA-460 - Se ajusta la base del IVA de acuerdo al IVA calculado, esto por la nueva version de SAP
                          que valida que la base sea la del valor del IVA. Adionalmente se envia en NULL el campo INDIIVA
                          cuando la cuenta es de gasto '5%' o de costo '7%'

 Horbath     16/11/2020   CA-0000557 -  Se modifica la interfaz de recaudo, funcion FnuInterfazRecaudoRO, para reportar el 
                          NIT de Promigas cuando el tipo de producto es igual a 7056 y la cuenta contable igual a 2905900000

 Horbath     21/06/2021   CA-0000376 Distribucion del costo de generacion de factura y reparto de factura, entre GAS y FNB.
                          Porcentaje Generacion FNB 10%
                          Porcentaje Reparto FNB 14%
                          Se modifica la funcion fnuLDCI_INCOLIQUACTACOSTO. Se incluye el CECO como parametro, para validar 
                          si viene NULL o trae informacion, si trae es el CECO para FNB, si no debe buscarlo porque
                          es GAS.

  Edmlar     03/05/2023   OSF-1073 Se corrige la funcion FnuInterfazIngresoRO, se cambia la funcionalidad de la busqueda de parametros
                          para sea mas eficiente la ejecucion, al mismo tiempo se excluye del proceso de ventas Brilla los clasificadores
                          que se esten configurados en un parametro, se afina la consulta para mejor el rendimiento del proceso en general.
 diana.montes 22/01/2024  OSF-2196: Se modifica  la funcion <fnuLDCI_INCOLIQUMATRO>
                          
  Edmlar     09/04/2024   OSF-2546
                          Se modifica el Cursor cuInformacion para incluir la consulta de las anulacion de FNB y poder aplicar la logica de
                          las ventas BRILLA, buscar el NIT del aliado de acuerdo a la solicitud que aparece en el campor CARGDOSO.
                          Se debe modificar la configuracion de registros contables para que en el clasificador de BRILLA se omita la causal 1 en
                          el comprobante de notas por concepto.                          

************************************************************************/
  --<<
  --Definicion de variables  paquete
  -->>
      cnuLimite       CONSTANT number := 1000;

   csbVERSION      CONSTANT VARCHAR2(10) := 'OSF-2196';

   --<<
   --Declaracion de tipos
   -->
   type tyldci_encaintesap IS TABLE OF ldci_encaintesap%ROWTYPE INDEX BY BINARY_INTEGER;
   vtyldci_encaintesap tyldci_encaintesap;

   type tyLDCI_DETAINTESAP IS TABLE OF LDCI_DETAINTESAP%ROWTYPE INDEX BY BINARY_INTEGER;
   vtyLDCI_DETAINTESAP tyLDCI_DETAINTESAP;

   type tyLDCI_RECLACARTNTESAP IS TABLE OF LDCI_RECLACARTNTESAP%ROWTYPE INDEX BY BINARY_INTEGER;
   vtyLDCI_RECLACARTNTESAP tyLDCI_RECLACARTNTESAP;

   type tyldci_detaprovcosto IS TABLE OF LDCI_DETAPROVCOSTO%ROWTYPE INDEX BY BINARY_INTEGER;
   vtyldci_detaprovcosto tyldci_detaprovcosto;

   type tyLDCI_INCOLIQU IS TABLE OF LDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
   vtyLDCI_INCOLIQU tyLDCI_INCOLIQU;
   vtyLDCI_INCOLIQU_PAGOS tyLDCI_INCOLIQU;

    type tyCentroBeneficio IS TABLE OF number INDEX BY VARCHAR2(250);
    tbCentroBeneficio tyCentroBeneficio;

    type tyOrdenInterna IS TABLE OF varchar2(250) INDEX BY VARCHAR2(250);
    tbOrdenInterna tyOrdenInterna;

    TYPE tyENCABEZADO IS TABLE OF NUMBER INDEX BY VARCHAR2(250);
    tbENCABEZADO tyENCABEZADO;
    sbIndice varchar2(250);

    TYPE tyPorcentaje IS TABLE OF number INDEX BY BINARY_INTEGER;
    tbPorcentaje tyPorcentaje;

    vaInstanceGe         VARCHAR2(2000);--guarda la instancia
    vaNombre_contratista ge_contratista.nombre_contratista%type; -- Nombre de Contratista
    vaIdentification     ge_subscriber.identification%type;      -- Identificacion del contratista

    vaEnviaIntefReinSAP  VARCHAR2(1); --Parametro para el control de envio de Interfaces de Control Reintegro a SAP
    vaEnviaIntefRecaSAP  VARCHAR2(1); --Parametro para el control de envio de Interfaces de Recaudos a SAP
    vaEnviaIntefazSAP    VARCHAR2(1); --Parametro para el control de envio de Interfaces a SAP

    osbErrorMessage VARCHAR2(2000);

    nuErrorCode    number;
    sender   varchar2(2000) := dald_parameter.fsbgetvalue_chain('LDC_SMTP_SENDER');
    sbE_MAIL  varchar2(2000);
    sbAsunto varchar2(2000);
    sbMensaje varchar2(2000);
    sbSentencia varchar2(2000);
    sbLEDGERS ldci_tipointerfaz.ledgers%type;

    rcDocumentos ldci_ProcesosInterfazSap.tyrcDocumentos;

  csbNivelTraza         CONSTANT NUMBER(2)    := pkg_traza.fnuNivelTrzDef;

  -- Constantes para el control de la traza
  csbSP_NAME            CONSTANT VARCHAR2(100):= $$PLSQL_UNIT ||'.';
    --------------------------------------------
    -- Funciones y Procedimientos PRIVADAS DEL PAQUETE
    --------------------------------------------


   FUNCTION fnuSplitDocClas(nuCodTrama in ldci_detaintesap.cod_interfazldc%TYPE)
   RETURN NUMBER
   IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuSplitDocClas
     AUTOR     : Carlos Humberto Gonzalez V
     FECHA     : 10-08-2015
     DESCRIPCION  : Aranda: 6749
                    Funcion encargada de dividir en Documentos para los
                    clasificadores contable que supere los 999 registros

    Parametros de Entrada
                            nuCodTrama: Numero o Codigo de trama generada
    Parametros de Salida
                            -1: Si rertorna error la dividir la trama
                             0: Trama Dividida exitosamente.
    Historia de Modificaciones
    Autor    Fecha       Descripcion
   Spacheco  23/08/2018   se modifica funcion para identificar comprobante en ldci_encaintesap
  ************************************************************************/
  --<<
  -- Seleccion de documento contable con mas de 998 registros
  -->>
  CURSOR cuTrama
      IS
  SELECT num_documentosap,identificador,Count(*)
    FROM ldci_detaintesap
   WHERE cod_interfazldc = nuCodTrama --- nuCodTrama
   GROUP BY num_documentosap,identificador
  HAVING Count(*) > 998 ;

  --<<
  -- Seleccion de Registros contables por CEBE y Clasificador Contable e Identificador
  -->>
  CURSOR cuDoc (nuDocu IN ldci_detaintesap.num_documentosap%TYPE,
                nuId   IN ldci_detaintesap.identificador%TYPE)
      IS
  SELECT num_documentosap,centrobe,identificador,COUNT(*) cantregcebe
    FROM ldci_detaintesap
   WHERE cod_interfazldc  =  nuCodTrama
     AND num_documentosap =  nuDocu
     AND identificador    =  nuId
   GROUP BY num_documentosap,centrobe,identificador
   ORDER BY centrobe;


    CURSOR cuCantDoc (nuDocu IN ldci_detaintesap.num_documentosap%TYPE,
                      nuId   IN ldci_detaintesap.identificador%TYPE)
      IS
  SELECT Count(*)
    FROM ldci_detaintesap
   WHERE cod_interfazldc  =  nuCodTrama
     AND num_documentosap =  nuDocu
     AND identificador    =  nuId;


  nucantRegis   NUMBER:=0; -- Cantidad de registros procesados por CEBE y Documento
  nuIdDocNuev   NUMBER:=0; -- Nuevo documento contable
  nuContador    NUMBER:=0; -- Contador de regitros contables por documento y CEBE
  nuCantRegdoc  NUMBER:=0; -- Valor para la validacion de registros procesados, si es mayor que CERO(0) genera error
  nuDocumento   NUMBER:=0; -- Numero del documento contable
  nuIdentific   NUMBER:=0; -- Numero Identificador del detalle y encabezado


  BEGIN

  --<<
  -- Seleccion de documento contable con mas de 998 registros
  -->>
  FOR rc_cuTrama IN cuTrama LOOP

      --Inicializa Cantidad de Registros agrupados por CEBE y Documento
      nuContador   := 0;
      nucantRegis  := 0;

      -- Obtiene el documento contable por CEBE
      FOR rc_cuDoc IN cuDoc(rc_cuTrama.Num_Documentosap,rc_cuTrama.Identificador) LOOP

          -- Cantidad de Registros por CEBE
          nucantRegis := nucantRegis + rc_cuDoc.cantregcebe;

          --<<
          -- ENCABEZADO
          -->>
          -- Valida si es el primer registro o mas de 998 registros
          IF (nuContador = 0) OR (nucantRegis > 998 )  THEN


              -- Nuevo encabezado: clasificador * 1000 +1..+2..+3...
              nuContador  := nuContador + 1;
              nuIdDocNuev := rc_cuDoc.Num_Documentosap * 1000 + nuContador;

             --caso 200-1460 se cambia insercion TXTCABEC por TXTCABEC||'-'||nuIdDocNuev
             -- Documento Inicial - Primer Documento a Dividir
             INSERT INTO OPEN.ldci_encaintesap
             SELECT cod_interfazldc,
                    nuIdDocNuev,
                    fechdcto, fechcont, grledger, referenc,
                    txtcabec||'-'||nuIdDocNuev, clasedoc, sociedad, currency,
                    cod_centrobenef,
                    cod_grupoconce,
                    cod_clasifconta,
                    identificador
               FROM open.ldci_encaintesap
              WHERE cod_interfazldc  = nuCodTrama
                AND num_documentosap = rc_cuDoc.num_documentosap
                AND identificador    = rc_cuDoc.Identificador;

              --se inicializa el contador de registros si esta a tope
              IF (nucantRegis > 998 ) THEN
                  nucantRegis := rc_cuDoc.cantregcebe;
              END IF;

           END IF; -- fin encabezado

           --<<
           -- ARMADO DEL DETALLE
           -->>
           UPDATE ldci_detaintesap
              SET num_documentosap = nuIdDocNuev
            WHERE num_documentosap = rc_cuDoc.num_documentosap
              AND centrobe         = rc_cuDoc.centrobe
              AND identificador    = rc_cuDoc.Identificador
              AND cod_interfazldc  = nuCodTrama;


       END LOOP;-- Final dividir un documento

       nuDocumento := rc_cuTrama.num_documentosap;
       nuIdentific := rc_cuTrama.Identificador;

       -- Valida si no quedaron documentos por CEBE por dividir
       OPEN cuCantDoc(nuDocumento,nuIdentific);
      FETCH cuCantDoc INTO nuCantRegdoc;
      CLOSE cuCantDoc;

      -- Si no procesaron todos los registros del documento
      IF nuCantRegdoc > 0 THEN
         RAISE ERROR;
      ELSE

         DELETE ldci_detaintesap
          WHERE cod_interfazldc  = nuCodTrama
            AND num_documentosap = nuDocumento
            AND identificador    = nuIdentific;

         DELETE ldci_encaintesap
          WHERE cod_interfazldc  = nuCodTrama
            AND num_documentosap = nuDocumento
            AND identificador    = nuIdentific;

      END IF;


  END LOOP; -- Cantidad de documentos a dividir
  RETURN(0);

  EXCEPTION
  WHEN ERROR THEN
       ldci_pkinterfazsap.vaMensError :=  '[fnuSplitDocClas] - No se puede dividir el documento. '||nuDocumento||' Id '||nuIdentific;
       LDCI_pkTrazaInterfaces.pRegiMensaje(nuCodTrama,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuCodTrama,USER,USERENV('TERMINAL'));
       return(-1);

  WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError :=  '[fnuSplitDocClas] - No se realizo el proceso de dividir documento '||SQLERRM||' '||DBMS_UTILITY.format_error_backtrace;
       ldci_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCodintinterfaz,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       RETURN(-1);

  END fnuSplitDocClas;
----------------------


    /**************************************************************
    Propiedad intelectual de GDO (c) 2014.
    Unidad      :  FSBVERSION
    Descripcion :  Obtiene la version del paquete

    Autor       :  <Nombre del desarrollador que creo el procedimiento>
    Fecha       :  DD-MM-YYYY
    Parametros  :  Ninguno

    Historia de Modificaciones
    Fecha        Autor              Modificacion
    =========    =========          ====================
    DD-MM-YYYY   Autor<SAONNNN>     Descripcion de la modificacion
    ***************************************************************/
    FUNCTION FSBVERSION
        RETURN VARCHAR2
        IS
        BEGIN
            return CSBVERSION;
    END FSBVERSION;

  /*******************************************************************************
     Propiedad intelectual de Gases de Occidenes.

     Nombre         :  validaLDCIGINT
     Descripcion    :  Forma para validar generacion Interfaz Contable
     Autor          :  Oscar Eduardo Restrepo
     Fecha          :  22 Noviembre de 2013
     Parametros         Descripcion
     ============    ===================


     Historia de Modificaciones
     Fecha             Autor                 Modificacion
     =========       =========          ====================
   /*******************************************************************************/
   PROCEDURE validaLDCIGINT
   IS
      cnunull_attribute  CONSTANT NUMBER := 2126;
      sbpefafimo         ge_boinstancecontrol.stysbvalue;
      sbpefaffmo         ge_boinstancecontrol.stysbvalue;
      sbTipoInterfaz     ge_boinstancecontrol.stysbvalue;
      SBDIAS             GE_BOINSTANCECONTROL.STYSBVALUE;
      nuidprogproc       ge_process_schedule.process_schedule_id%TYPE;
      sbparametros       ge_process_schedule.parameters_%TYPE;
      sbcadconexion      VARCHAR2 (2000);
      sbusuario          VARCHAR2 (2000);
      sbpass             VARCHAR2 (2000);
      sbinstancia        VARCHAR2 (2000);
      dtfechaini         DATE;
      dtfechafin         DATE;
      nuDias_Retraso     NUMBER;

      RCPROGRAMACION    DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
      SBFRECUENCIA      GE_PROCESS_SCHEDULE.FREQUENCY%TYPE;
      SBERRMSG	  GE_ERROR_LOG.DESCRIPTION%TYPE;

   BEGIN

    --<<Se realiza la asignacion de los valores de los campos a las variables definidas>>--
    sbpefafimo :=
            ge_boinstancecontrol.fsbgetfieldvalue ('LDCI_PROCMONI', 'PRMOFEIN');

    sbpefaffmo :=
            ge_boinstancecontrol.fsbgetfieldvalue ('LDCI_PROCMONI', 'PRMOFEFI');
    sbTipoInterfaz :=
            ge_boinstancecontrol.fsbgetfieldvalue  ('LDCI_TIPOINTERFAZ', 'TIPOINTERFAZ');

    SBDIAS := ge_boInstanceControl.fsbGetFieldValue ('LDCI_ENCAINTESAP', 'NUM_DOCUMENTOSAP');

    --<<VAlida los parametros del reporte que no esten en Nullo-->>
    IF (sbTipoInterfaz IS NULL) THEN
        ERRORS.seterror (cnunull_attribute, 'Debe Indicar Tipo Interfaz ');
        RAISE ex.controlled_error;
    END IF;

    --<<VAlida los parametros del reporte -->>
    IF (sbTipoInterfaz NOT IN ('L2','LA','L5') AND SBDIAS IS NOT NULL ) THEN
        ERRORS.seterror (1260, 'Fechas validas. Existe inconsistencia en los criterios ingresados [Dias de retraso] No se permite para ese tipo de interfaz ['||sbTipoInterfaz||']');
        PKERRORS.CHANGEMESSAGE('%2','L2');
        PKERRORS.CHANGEMESSAGE('%3','L3');
        RAISE ex.controlled_error;
    END IF;

    nuDias_Retraso    := UT_CONVERT.FNUCHARTONUMBER(SBDIAS);

    -- Obtiene la programacion en memoria
    nuidprogproc := ge_boschedule.fnugetscheduleinmemory;

    RCPROGRAMACION := DAGE_PROCESS_SCHEDULE.FRCGETRECORD(nuidprogproc);

    SBFRECUENCIA:= RCPROGRAMACION.FREQUENCY;


    IF (sbpefafimo IS NOT NULL AND sbpefaffmo IS NULL) THEN

        PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,5487);
        PKERRORS.CHANGEMESSAGE('%1','Fecha Final');
        RAISE LOGIN_DENIED;

    END IF;


    IF (sbpefafimo IS NULL AND sbpefaffmo IS NOT NULL) THEN

        PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,5487);
        PKERRORS.CHANGEMESSAGE('%1','Fecha Inicial');
        RAISE LOGIN_DENIED;

    END IF;


    IF (sbpefafimo IS NOT NULL AND sbpefaffmo IS NOT NULL) THEN
        IF (nuDias_Retraso IS NOT NULL) THEN
           PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,5488);
           PKERRORS.CHANGEMESSAGE('%1','Ingreso');
           PKERRORS.CHANGEMESSAGE('%2','no debe');
           RAISE LOGIN_DENIED;
        END IF;
    END IF;


    IF (sbpefafimo IS NULL AND sbpefaffmo IS NULL) THEN
        IF (nuDias_Retraso IS NULL) THEN
            PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,5488);
            PKERRORS.CHANGEMESSAGE('%1','No ingreso');
            PKERRORS.CHANGEMESSAGE('%2','debe');
            RAISE LOGIN_DENIED;
        END IF;
    END IF;

    IF (SBFRECUENCIA NOT IN (GE_BOSCHEDULE.CSBSOLOUNAVEZ,GE_BOSCHEDULE.CSBDIARIO)) THEN
        PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,13641);
        RAISE LOGIN_DENIED;
    END IF;


    IF (SBFRECUENCIA = GE_BOSCHEDULE.CSBDIARIO)THEN
        IF (sbpefafimo IS NOT NULL AND sbpefaffmo IS NOT NULL) THEN
            PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,13661);
            RAISE LOGIN_DENIED;
        END IF;

        IF (nuDias_Retraso IS NULL) THEN
            PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,5488);
            PKERRORS.CHANGEMESSAGE('%1','No Ingreso');
            PKERRORS.CHANGEMESSAGE('%2','debe');
            RAISE LOGIN_DENIED;
        END IF;

        IF ( nuDias_Retraso < 0 ) THEN
            PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,13623);
            PKERRORS.CHANGEMESSAGE('%s1','Dias Retraso');
            RAISE LOGIN_DENIED;
        END IF;

        sbpefafimo  := TRUNC(SYSDATE-nuDias_Retraso);
        sbpefaffmo  := TRUNC(SYSDATE-nuDias_Retraso);

    END IF;


    IF (SBFRECUENCIA = GE_BOSCHEDULE.CSBSOLOUNAVEZ)THEN

        IF (sbpefafimo IS NULL AND sbpefaffmo IS NULL) THEN
            PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,13622);
            RAISE LOGIN_DENIED;
        END IF;


        IF (nuDias_Retraso IS NOT NULL) THEN
           PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION,PKCONSTANTE.CSBMOD_INT,5488);
           PKERRORS.CHANGEMESSAGE('%1','Ingreso');
           PKERRORS.CHANGEMESSAGE('%2','no debe');
           RAISE LOGIN_DENIED;
        END IF;

    END IF;

    dtfechaini  := UT_DATE.FDTDATEWITHFORMAT(sbpefafimo);
    dtfechafin  := UT_DATE.FDTDATEWITHFORMAT(sbpefaffmo);

    PKGENERALSERVICES.VALDATERANGE
    (
        sbpefafimo,
        dtfechafin
    );

      -- se obtiene parametros
      sbparametros := dage_process_schedule.fsbgetparameters_ (nuidprogproc);
      ge_bodatabaseconnection.getconnectionstring (sbusuario,
                                                   sbpass,
                                                   sbinstancia
                                                  );

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	   PKERRORS.POP;
    	   RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN

    	   PKERRORS.POP;
    	   RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	   PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	   PKERRORS.POP;
    	   RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

   END validaLDCIGINT;

   PROCEDURE validaLDCIGINTMES
   IS
      cnunull_attribute   CONSTANT NUMBER := 2126;
      nuerror             NUMBER;
      nuAnio              ge_boinstancecontrol.stysbvalue;
      nuMes               ge_boinstancecontrol.stysbvalue;
      sbTipoInterfaz      ge_boinstancecontrol.stysbvalue;
      nuNumActa           ge_boinstancecontrol.stysbvalue;
      nuidprogproc        ge_process_schedule.process_schedule_id%TYPE;
      sbparametros        ge_process_schedule.parameters_%TYPE;
      sbcadconexion       VARCHAR2 (2000);
      sbusuario           VARCHAR2 (2000);
      sbpass              VARCHAR2 (2000);
      sbinstancia         VARCHAR2 (2000);
      sbcadconexencr      VARCHAR2 (2000);
      csbllave            CONSTANT VARCHAR2 (20)  := '10101000101011';
      dtfechaini          DATE;
      dtfechafin          DATE;
      nucantidad          NUMBER;
      nucantidadceor      NUMBER;

   BEGIN
   null;
      --<<VAlida los parametros del reporte que no esten en Nullo-->>
      IF (cnunull_attribute IS NULL)
      THEN
         nuerror := 1;
      END IF;

      --<<Se realiza la asignacion de los valores de los campos a las variables definidas>>--
      nuAnio :=
                ge_boinstancecontrol.fsbgetfieldvalue ('LDCI_PERIPROGINTE', 'ANO');

      nuMes :=
                ge_boinstancecontrol.fsbgetfieldvalue ('LDCI_PERIPROGINTE', 'MES');
      sbTipoInterfaz :=
                ge_boinstancecontrol.fsbgetfieldvalue  ('LDCI_TIPOINTERFAZ', 'TIPOINTERFAZ');

     --<<VAlida los parametros del reporte que no esten en Nullo-->>
      IF (sbTipoInterfaz IS NULL)
      THEN
         ERRORS.seterror (cnunull_attribute, 'Debe Indicar Tipo Interfaz ');
         RAISE ex.controlled_error;
      END IF;

      --<<VAlida los parametros del reporte que no esten en Nullo-->>
      IF (nuAnio IS NULL)
      THEN
         ERRORS.seterror (cnunull_attribute, 'A?o');
         RAISE ex.controlled_error;
      END IF;

      IF (nuMes IS NULL)
      THEN
         ERRORS.seterror (cnunull_attribute, 'Mes');
         RAISE ex.controlled_error;
      END IF;

      IF (nuAnio < 1999)
      THEN
         gi_boerrors.seterrorcodeargument
                   (2741,
                    'El A?o es invalido'
                   );
         RAISE ex.controlled_error;
      END IF;

      IF (nuMes < 1 or nuMes>12)
      THEN
         gi_boerrors.seterrorcodeargument
                   (2741,
                    'El Mes es invalido'
                   );
         RAISE ex.controlled_error;
      END IF;

      -- Obtiene la programacion en memoria
      nuidprogproc := ge_boschedule.fnugetscheduleinmemory;
      -- se obtiene parametros
      sbparametros := dage_process_schedule.fsbgetparameters_ (nuidprogproc);
      ge_bodatabaseconnection.getconnectionstring (sbusuario,
                                                   sbpass,
                                                   sbinstancia
                                                  );
   END validaLDCIGINTMES;


  FUNCTION fnuSeq_ldci_incoliqu
      RETURN NUMBER
      /************************************************************************
         PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
         FUNCION   : fnuSeq_ldci_incoliqu
         AUTOR     : Heiber Barco
         FECHA     : 02-08-2013
         DESCRIPCION  : Tiquete:
                        funcion que se encarga de obtener la secuencia para la
                        interfaz
        Parametros de Entrada
        Parametros de Salida
        Historia de Modificaciones
        Autor    Fecha       Descripcion
      ************************************************************************/
      IS
      nuSeqincoliqu   number := 0;
      BEGIN
      --<<
      --Se obtiene el valor de la secuencia
      -->>
      SELECT seq_ldci_incoliqu.nextval INTO nuSeqincoliqu FROM dual;
      RETURN(nuSeqincoliqu);
      EXCEPTION
      WHEN OTHERS THEN
          RETURN(-1);
  END fnuSeq_ldci_incoliqu;

  FUNCTION fvaGetClaveContaIngreso (
                             nuClasificador IN LDCI_CTACADMI.CTACLCO%TYPE,
                             nucuctcodi   IN LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN ic_decoreco.dcrcsign%TYPE,
                             nuPorcen     IN LDCI_CTACADMI.CTCPORC%TYPE,
                             ovaCTCAICME  OUT LDCI_CTACADMI.CTCAICME%TYPE,
                             ovaCTCAINIV  OUT LDCI_CTACADMI.CTCAINIV%TYPE)
  return VARCHAR
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetClaveContaIngreso
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la clave apartir de la cuenta

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuGetClave IS
    SELECT *
      FROM LDCI_CTACADMI
      WHERE CTCACODI = nucuctcodi
      AND CTACLCO = nuClasificador
      AND ROWNUM = 1;


   ovaClave LDCI_CTACADMI.ctcaclcr%TYPE;

   rgcuGetClave cuGetClave%ROWTYPE;

  begin

  OPEN cuGetClave;
  FETCH cuGetClave INTO rgcuGetClave;
  CLOSE cuGetClave;
  ovaCTCAICME:=rgcuGetClave.CTCAICME;
  ovaCTCAINIV:=rgcuGetClave.CTCAINIV;


     IF vaSigno = 'C' THEN

     ovaClave := rgcuGetClave.CTCACLCR;

     ELSIF vaSigno = 'D' THEN

     ovaClave := rgcuGetClave.CTCACLDB;


     END IF;

     IF (ovaClave IS NULL)   THEN
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveContaIngreso] - No se pudo obtener la clave para el clasificador  '||nuClasificador||' y la cuenta '||nucuctcodi||'Valide la configuracion en LDCI_CTACADMI '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       RAISE ERROR;
     END IF;
     RETURN ovaClave;
  exception
  when ERROR then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveContaIngreso] - No se pudo obtener la clave. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveContaIngreso] - No se pudo obtener la clave. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  end fvaGetClaveContaIngreso;

FUNCTION fnuGetCupon(nuNewCupon cupon.cuponume%TYPE) return number
IS
    nuCupon NUMBER := 0;

    CURSOR cuReemplCupon IS
    SELECT CUPOCUPA Cupon_Reemp
    FROM open.CUPON, open.pagos
    WHERE CUPOCUPA IS NOT NULL
    and PAGOCUPO = cuponume
    AND PAGOCUPO = nuNewCupon;

BEGIN

    OPEN cuReemplCupon;
    FETCH cuReemplCupon INTO nuCupon;
    CLOSE cuReemplCupon;

    IF nuCupon = 0  THEN
        nuCupon := nuNewCupon;
    END IF;

    RETURN nuCupon;

EXCEPTION
    when others then
    ldci_pkinterfazsap.vaMensError :=  '[fnuGetCupon] - No se puede obtener cupon de Reemplazo. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
END fnuGetCupon;


FUNCTION fsbGetLedgers
    (sbCOD_INTERFAZLDC   in ldci_TIPOINTERFAZ.TIPOINTERFAZ%type,
     nuComprobante in ldci_TIPOINTERFAZ.COD_COMPROBANTE%type
     )
return ldci_tipointerfaz.ledgers%type IS
    sbLEDGERS ldci_tipointerfaz.ledgers%type :='-';
begin
    sbSentencia := 'select ledgers FROM LDCI_TIPOINTERFAZ WHERE tipointerfaz = :1 and cod_comprobante = :1 ';
    execute immediate sbSentencia INTO sbLEDGERS using sbCOD_INTERFAZLDC, nuComprobante;
    return sbLEDGERS;
EXCEPTION
    when others then
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbCOD_INTERFAZLDC,sbSentencia||' Obtiene Tipo interfaz :['||sbCOD_INTERFAZLDC||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbCOD_INTERFAZLDC,USER,USERENV('TERMINAL'));
    return sbLEDGERS;
END fsbGetLedgers;


  FUNCTION fnuGeneldci_encaintesap(nuCOD_INTERFAZLDC   in ldci_encaintesap.COD_INTERFAZLDC%type,
                                nuNUM_DOCUMENTOSAP  in ldci_encaintesap.NUM_DOCUMENTOSAP%type,
                                vaCOD_CENTROBENEF   in ldci_encaintesap.COD_CENTROBENEF%type,
                                nuCOD_CLASIFCONTA    in ldci_encaintesap.COD_CLASIFCONTA%type,
                                dtFECHDCTO          in ldci_encaintesap.FECHDCTO%type,
                                dtFECHCONT          in ldci_encaintesap.FECHCONT%type,
                                vaGRLEDGER          in ldci_encaintesap.GRLEDGER%type,
                                vaREFERENC          in ldci_encaintesap.REFERENC%type,
                                vaTXTCABEC          in ldci_encaintesap.TXTCABEC%type,
                                vaCLASEDOC          in ldci_encaintesap.CLASEDOC%type,
                                vaSOCIEDAD          in ldci_encaintesap.SOCIEDAD%type,
                                vaCURRENCY          in ldci_encaintesap.CURRENCY%type,
                                nuIDENTIFICADOR     in number)
      RETURN NUMBER
      /************************************************************************
         PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
         FUNCION   : fnuGeneldci_encaintesap
         AUTOR     : Heiber Barco
         FECHA     : 02-08-2013
         DESCRIPCION  : Tiquete:
                        funcion que se encarga de insertar el encabezado de la tabla
                        de interfaz para SAP.
        Parametros de Entrada
        Parametros de Salida
        Historia de Modificaciones
        Autor    Fecha       Descripcion
      ************************************************************************/
      IS
      BEGIN
      --<<
      --Insercion de los datos en la tabla plsql delete encabezado para SAP
      -->>
        IF (vtyldci_encaintesap.count = 0) THEN

            ldci_pkinterfazsap.nuEncabezado := 1;
        ELSE

            ldci_pkinterfazsap.nuEncabezado := ldci_pkinterfazsap.nuEncabezado + 1;

        END IF;

        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).IDENTIFICADOR := nuIdentificador;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).COD_INTERFAZLDC := nuCOD_INTERFAZLDC;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).NUM_DOCUMENTOSAP := nuNUM_DOCUMENTOSAP;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).COD_CENTROBENEF := vaCOD_CENTROBENEF;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).COD_CLASIFCONTA := NUCOD_CLASIFCONTA;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).FECHDCTO := dtFECHDCTO;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).FECHCONT := dtFECHCONT;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).GRLEDGER := vaGRLEDGER;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).REFERENC := vaREFERENC;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).TXTCABEC := vaTXTCABEC;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).CLASEDOC := vaCLASEDOC;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).SOCIEDAD := vaSOCIEDAD;
        vtyldci_encaintesap(ldci_pkinterfazsap.nuEncabezado).CURRENCY := vaCURRENCY;

      RETURN(0);
    EXCEPTION
    WHEN OTHERS THEN
     ldci_pkinterfazsap.vaMensError :=  '[fnuGeneldci_encaintesap] - No pudo insertar el registro del encabezado '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
     LDCI_pkTrazaInterfaces.pRegiMensaje(nuCOD_INTERFAZLDC,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuCOD_INTERFAZLDC,USER,USERENV('TERMINAL'));
     return(-1);
  END fnuGeneldci_encaintesap;

  function fnuGeneLDCI_RECLACARTINTESAP(vaTipoInterfaz IN LDCI_RECLACARTNTESAP.TIPOINTERFAZ%TYPE,
                            nuano       in LDCI_RECLACARTNTESAP.ANIO%TYPE,
                            numes       in LDCI_RECLACARTNTESAP.MES%TYPE,
                            nuCOD_INTERFAZLDC in LDCI_DETAINTESAP.COD_INTERFAZLDC%type,
                            nuNUM_DOCUMENTOSAP in LDCI_DETAINTESAP.NUM_DOCUMENTOSAP%type,
                            vaCLAVCONT  in LDCI_DETAINTESAP.CLAVCONT%type,
                            vaCLASECTA  in LDCI_DETAINTESAP.CLASECTA%type,
                            vaINDICCME  in LDCI_DETAINTESAP.INDICCME%type,
                            nuIMPOMTRX  in LDCI_DETAINTESAP.IMPOMTRX%type,
                            nuIMPOMSOC  in LDCI_DETAINTESAP.IMPOMSOC%type,
                            vaINDICIVA  in LDCI_DETAINTESAP.INDICIVA%type,
                            nuCONDPAGO  in LDCI_DETAINTESAP.CONDPAGO%type,
                            dtFECHBASE  in LDCI_DETAINTESAP.FECHBASE%type,
                            vaREFFACTR  in LDCI_DETAINTESAP.REFFACTR%type,
                            nuBASEIMPT  in LDCI_DETAINTESAP.BASEIMPT%type,
                            vaCENTROCO  in LDCI_DETAINTESAP.CENTROCO%type,
                            vaORDENINT  in LDCI_DETAINTESAP.ORDENINT%type,
                            nuCANTIDAD  in LDCI_DETAINTESAP.CANTIDAD%type,
                            vaASIGNACN  in LDCI_DETAINTESAP.ASIGNACN%type,
                            vaTXTPOSCN  in LDCI_DETAINTESAP.TXTPOSCN%type,
                            vaCENTROBE  in LDCI_DETAINTESAP.CENTROBE%type,
                            vaSEGMENTO  in LDCI_DETAINTESAP.SEGMENTO%type,
                            vaOBJCOSTO  in LDCI_DETAINTESAP.OBJCOSTO%type,
                            vaCLAVREF1  in LDCI_DETAINTESAP.CLAVREF1%type,
                            vaCLAVREF2  in LDCI_DETAINTESAP.CLAVREF2%type,
                            vaCLAVREF3  in LDCI_DETAINTESAP.CLAVREF3%type,
                            vaSOCIEDGL  in LDCI_DETAINTESAP.SOCIEDGL%type,
                            nuMATERIAL  in LDCI_DETAINTESAP.MATERIAL%type,
                            vaTIPORETC  in LDCI_DETAINTESAP.TIPORETC%type,
                            vaINDRETEC  in LDCI_DETAINTESAP.INDRETEC%type,
                            nuBASERETC  in LDCI_DETAINTESAP.BASERETC%type,
                            dtFECHVALOR in LDCI_DETAINTESAP.FECHVALOR%type,
                            vaCTADIV    in LDCI_DETAINTESAP.CTADIV%type,
                            nuCOD_CENTROBENEF in LDCI_DETAINTESAP.COD_CENTROBENEF%type,
                            nuCOD_CLASIFCONTA  in LDCI_DETAINTESAP.COD_CLASIFCONTA%type)
    RETURN NUMBER
    IS
    /************************************************************************
       PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
       FUNCION   : fnuGeneLDCI_RECLACARTINTESAP
       AUTOR     : Heiber Barco
       FECHA     : 02-08-2013
       DESCRIPCION  : Tiquete:
                      funcion que se encarga de insertar el detalle de la tabla
                      de interfaz para SAP.
      Parametros de Entrada
      Parametros de Salida
      Historia de Modificaciones
      Autor    Fecha       Descripcion
    ************************************************************************/
    BEGIN

    --<<
    --Insercion de los registros del detalle de la interfaz
    -->>
      IF (vtyLDCI_RECLACARTNTESAP.count = 0) THEN

          ldci_pkinterfazsap.nuDetalle := 1;
      ELSE

          ldci_pkinterfazsap.nuDetalle := ldci_pkinterfazsap.nuDetalle + 1;
       END IF;

      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).TIPOINTERFAZ := vaTipoInterfaz;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).ANIO := nuano;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).MES := numes;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).COD_INTERFAZLDC := nuCOD_INTERFAZLDC;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).NUM_DOCUMENTOSAP := nuNUM_DOCUMENTOSAP;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CLAVCONT := vaCLAVCONT;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CLASECTA := vaCLASECTA;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).INDICCME := vaINDICCME;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).IMPOMTRX := nuIMPOMTRX;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).IMPOMSOC := nuIMPOMSOC;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).INDICIVA := vaINDICIVA;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CONDPAGO := nuCONDPAGO;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).FECHBASE := dtFECHBASE;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).REFFACTR := vaREFFACTR;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).BASEIMPT := nuBASEIMPT;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CENTROCO := vaCENTROCO;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).ORDENINT := vaORDENINT;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CANTIDAD := nuCANTIDAD;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).ASIGNACN := vaASIGNACN;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).TXTPOSCN := vaTXTPOSCN;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CENTROBE := vaCENTROBE;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).SEGMENTO := vaSEGMENTO;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).OBJCOSTO := vaOBJCOSTO;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CLAVREF1 := vaCLAVREF1;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CLAVREF2 := vaCLAVREF2;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CLAVREF3 := vaCLAVREF3;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).SOCIEDGL := vaSOCIEDGL;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).MATERIAL := nuMATERIAL;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).TIPORETC := vaTIPORETC;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).INDRETEC := vaINDRETEC;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).BASERETC := nuBASERETC;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).FECHVALOR := dtFECHVALOR;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).CTADIV := vaCTADIV;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).COD_CENTROBENEF := nuCOD_CENTROBENEF;
      vtyLDCI_RECLACARTNTESAP(ldci_pkinterfazsap.nuDetalle).COD_CLASIFCONTA  := nuCOD_CLASIFCONTA;

    RETURN(0);
    EXCEPTION
    WHEN OTHERS THEN
      ldci_pkinterfazsap.vaMensError :=  '[fnuGeneLDCI_RECLACARTINTESAP] - No pudo crear la estructura vtyLDCI_RECLACARTNTESAP. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
      LDCI_pkTrazaInterfaces.pRegiMensaje(nuCOD_INTERFAZLDC,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuCOD_INTERFAZLDC,USER,USERENV('TERMINAL'));
      RETURN(-1);
  END fnuGeneLDCI_RECLACARTINTESAP;

  FUNCTION fnuLDCI_DETAINTESAP(nuCOD_INTERFAZLDC in LDCI_DETAINTESAP.COD_INTERFAZLDC%type,
                            nuNUM_DOCUMENTOSAP in LDCI_DETAINTESAP.NUM_DOCUMENTOSAP%type,
                            vaCLAVCONT  in LDCI_DETAINTESAP.CLAVCONT%type,
                            vaCLASECTA  in LDCI_DETAINTESAP.CLASECTA%type,
                            vaINDICCME  in LDCI_DETAINTESAP.INDICCME%type,
                            nuIMPOMTRX  in LDCI_DETAINTESAP.IMPOMTRX%type,
                            nuIMPOMSOC  in LDCI_DETAINTESAP.IMPOMSOC%type,
                            vaINDICIVA  in LDCI_DETAINTESAP.INDICIVA%type,
                            nuCONDPAGO  in LDCI_DETAINTESAP.CONDPAGO%type,
                            dtFECHBASE  in LDCI_DETAINTESAP.FECHBASE%type,
                            vaREFFACTR  in LDCI_DETAINTESAP.REFFACTR%type,
                            nuBASEIMPT  in LDCI_DETAINTESAP.BASEIMPT%type,
                            vaCENTROCO  in LDCI_DETAINTESAP.CENTROCO%type,
                            vaORDENINT  in LDCI_DETAINTESAP.ORDENINT%type,
                            nuCANTIDAD  in LDCI_DETAINTESAP.CANTIDAD%type,
                            vaASIGNACN  in LDCI_DETAINTESAP.ASIGNACN%type,
                            vaTXTPOSCN  in LDCI_DETAINTESAP.TXTPOSCN%type,
                            vaCENTROBE  in LDCI_DETAINTESAP.CENTROBE%type,
                            vaSEGMENTO  in LDCI_DETAINTESAP.SEGMENTO%type,
                            vaOBJCOSTO  in LDCI_DETAINTESAP.OBJCOSTO%type,
                            vaCLAVREF1  in LDCI_DETAINTESAP.CLAVREF1%type,
                            vaCLAVREF2  in LDCI_DETAINTESAP.CLAVREF2%type,
                            vaCLAVREF3  in LDCI_DETAINTESAP.CLAVREF3%type,
                            vaSOCIEDGL  in LDCI_DETAINTESAP.SOCIEDGL%type,
                            nuMATERIAL  in LDCI_DETAINTESAP.MATERIAL%type,
                            vaTIPORETC  in LDCI_DETAINTESAP.TIPORETC%type,
                            vaINDRETEC  in LDCI_DETAINTESAP.INDRETEC%type,
                            nuBASERETC  in LDCI_DETAINTESAP.BASERETC%type,
                            dtFECHVALOR in LDCI_DETAINTESAP.FECHVALOR%type,
                            vaCTADIV    in LDCI_DETAINTESAP.CTADIV%type,
                            nuCOD_CENTROBENEF in LDCI_DETAINTESAP.COD_CENTROBENEF%type,
                            nuCOD_CLASIFCONTA  in LDCI_DETAINTESAP.COD_CLASIFCONTA%type,
                            nuIDENTIFICADOR in number)
    RETURN NUMBER
    IS
    /************************************************************************
       PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
       FUNCION   : fnuLDCI_DETAINTESAP
       AUTOR     : Heiber Barco
       FECHA     : 02-08-2013
       DESCRIPCION  : Tiquete:
                      funcion que se encarga de insertar el detalle de la tabla
                      de interfaz para SAP.
      Parametros de Entrada
      Parametros de Salida
      Historia de Modificaciones
      Autor    Fecha       Descripcion
    ************************************************************************/
    BEGIN

        --<<
        --Insercion de los registros del detalle de la interfaz
        -->>
        IF (vtyLDCI_DETAINTESAP.count = 0) THEN
          ldci_pkinterfazsap.nuDetalle := 1;
        ELSE
          ldci_pkinterfazsap.nuDetalle := ldci_pkinterfazsap.nuDetalle + 1;
        END IF;

        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).Identificador := nuIdentificador;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).COD_INTERFAZLDC := nuCOD_INTERFAZLDC;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).NUM_DOCUMENTOSAP := nuNUM_DOCUMENTOSAP;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CLAVCONT := vaCLAVCONT;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CLASECTA := vaCLASECTA;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).INDICCME := vaINDICCME;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).IMPOMTRX := nuIMPOMTRX;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).IMPOMSOC := nuIMPOMSOC;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).INDICIVA := vaINDICIVA;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).BASEIMPT := nuBASEIMPT;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CONDPAGO := nuCONDPAGO;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).FECHBASE := dtFECHBASE;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).REFFACTR := vaREFFACTR;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CENTROCO := vaCENTROCO;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).ORDENINT := vaORDENINT;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CANTIDAD := nuCANTIDAD;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).ASIGNACN := vaASIGNACN;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).TXTPOSCN := vaTXTPOSCN;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CENTROBE := vaCENTROBE;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).SEGMENTO := vaSEGMENTO;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).OBJCOSTO := vaOBJCOSTO;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CLAVREF1 := vaCLAVREF1;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CLAVREF2 := vaCLAVREF2;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CLAVREF3 := vaCLAVREF3;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).SOCIEDGL := vaSOCIEDGL;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).MATERIAL := nuMATERIAL;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).TIPORETC := vaTIPORETC;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).INDRETEC := vaINDRETEC;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).BASERETC := nuBASERETC;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).FECHVALOR := dtFECHVALOR;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).CTADIV := vaCTADIV;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).COD_CENTROBENEF := nuCOD_CENTROBENEF;
        vtyLDCI_DETAINTESAP(ldci_pkinterfazsap.nuDetalle).COD_CLASIFCONTA  := nuCOD_CLASIFCONTA;

        RETURN(0);
    EXCEPTION
    WHEN OTHERS THEN
      ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_DETAINTESAP] - No pudo crear la estructura vtyLDCI_DETAINTESAP. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
      LDCI_pkTrazaInterfaces.pRegiMensaje(nuCOD_INTERFAZLDC,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuCOD_INTERFAZLDC,USER,USERENV('TERMINAL'));
      RETURN(-1);
  END fnuLDCI_DETAINTESAP;

FUNCTION fnuINSEINTESAPCARTE
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuINSEINTESAPCARTE
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  begin

   --<<
   --Insercion delete detalle de a provision para la foto
   -->>
   FORALL y IN INDICES OF vtyLDCI_RECLACARTNTESAP
   INSERT INTO LDCI_RECLACARTNTESAP VALUES vtyLDCI_RECLACARTNTESAP(y);
   -- Asienta registros
   commit;

   vtyLDCI_RECLACARTNTESAP.delete;

   return(0);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuINSEINTESAPCARTE] - No se pudo insertar en LDCI_RECLACARTNTESAP. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  END fnuINSEINTESAPCARTE;


  FUNCTION fnuINSEINTESAP
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuINSEINTESAP
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  begin

   --<<
   --Insercion de los encabezados
   -->>
   FORALL y IN INDICES OF vtyldci_encaintesap
   INSERT INTO ldci_encaintesap VALUES vtyldci_encaintesap(y);

   --<<
   --Insercion delete detalle
   -->>
   FORALL j IN INDICES OF vtyLDCI_DETAINTESAP
   INSERT INTO LDCI_DETAINTESAP VALUES vtyLDCI_DETAINTESAP(j);
   -- Asienta registros
   commit;

   vtyldci_encaintesap.delete;
   vtyLDCI_DETAINTESAP.delete;

   return(0);

  exception
  when others then
  dbms_output.put_Line(sqlerrm);
       ldci_pkinterfazsap.vaMensError :=  '[fnuINSEINTESAP] - No se pudieron almacenar los registros {LDCI_ENCAINTESAP/LDCI_DETAINTESAP} . '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  END fnuINSEINTESAP;

    FUNCTION fnuINSELDCI_INCOLIQU
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuINSELDCI_INCOLIQU
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    tabla LDCI_INCOLIQU
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  begin

   --<<
   --Insercion de los encabezados
   -->>
   FORALL y IN vtyLDCI_INCOLIQU.First..vtyLDCI_INCOLIQU.Last
   INSERT INTO LDCI_INCOLIQU VALUES vtyLDCI_INCOLIQU(y);
   --commit;
   vtyLDCI_INCOLIQU.delete;

   return(0);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuINSELDCI_INCOLIQU] - No se pudieron almacenar los registros tabla LDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuINSELDCI_INCOLIQU;

  FUNCTION fnuLDCI_INCOLIQU_RECLACARTERA(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME  VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA  VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaCbene IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        vaCcosto IN LDCI_INCOLIQU.centroco%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        sbSegmento VARCHAR2,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%type,
                        sbLEDGERS IN LDCI_INCOLIQU.LEDGERS%type)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQU_RECLACARTERA
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/

  nuCentBen NUMBER;
  sbOrdInt VARCHAR2(100);
  nuCategoria NUMBER;
  sbDescripcionNit VARCHAR2(200);
  daFECHBASE date;
  sbEsDivergente VARCHAR2(2);
  nuNIT VARCHAR2(100);
  vaDesInterFaz VARCHAR2(100);
  nuClasificador NUMBER;
  nuTipoServicio NUMBER;
  nuCiclo        ciclo.ciclcodi%type;

  BEGIN
    --<<
    --Se Obtiene la Categoria con Base en la Localidad
    -->>
    nuCategoria 	:=Nvl(ldci_pkinterfazsap.fvaGetData(5,dcrcinad,'|'),NULL);
    nuCentBen		:=vaCbene;
	  nuTipoServicio 	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
	  nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|'),NULL);
    -- Aranda 7100
	if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
		sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
	else
		sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
	end if;

    nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),fnuGetNitGenerico(nuCOD_CLASIFCONTA)),null);
    IF (nuNIT IS NULL) THEN
      LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLITIDO,'Interfaz ['||nuICLINUDO||'] No se puede obtener el NIT Generico del clasificador  :['||nuCOD_CLASIFCONTA||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
      return -1;
    END IF;

    nuNIT:=replace(nuNIT,'-','');
    sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

    sbEsDivergente:=fnuGetDivergente(vaCLAVCONT);


    if(nuCentBen=0) then
      LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLITIDO,'Interfaz ['||nuICLINUDO||'] No se puede obtener el Centro de Beneficio para la localidad  :['||ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|')||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    end if;

    IF(nuTipoServicio =7055 OR nuTipoServicio = 7056) THEN --BRILLA
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_BRILLA', nuNIT, osbErrorMessage);
        vaDesInterFaz:='PROV_BRILLA';
        nuClasificador := 3;
    ELSIF(nuTipoServicio =7052) THEN --KIT
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_KIT', nuNIT, osbErrorMessage);
        vaDesInterFaz:='PROV_KIT';
        nuClasificador := 2;
    ELSE                  --OTRO
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_GENERAL', nuNIT, osbErrorMessage);
        vaDesInterFaz:='PROV ';
        nuClasificador := 1;
    END IF;

    if (vtyLDCI_INCOLIQU.count = 0) then
        ldci_pkinterfazsap.nuIncoliqu := 1;
    ELSE
        ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
    END IF;

    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH := dtICLIFECH;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO := nuICLITIDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO := nuICLINUDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA := vaICLIUSUA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM := vaICLITERM;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR := dtICLIFECR;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF := nuCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA := nuClasificador;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT := vaCLAVCONT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA := vaCLASECTA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN := nuNIT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 := nuNIT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 := sbDescripcionNit;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV   := '';
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME := vaINDICCME;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX := nuIMPOMTRX;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC := nuIMPOMSOC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA := vaINDICIVA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO := Nvl(ldci_pkinterfazsap.fvaGetData(27,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE := trunc(sysdate);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := ldci_pkinterfazsap.fvaGetData(42,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO := vaCcosto;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT := NULL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD := nuCANTIDAD;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN := vaTXTPOSCN;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 := vaCLAVREF2;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE := nuCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO := sbSegmento;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO := vaOBJCOSTO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL := vaSOCIEDGL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL := vaMATERIAL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC := vaTIPORETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC := '';
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC := '';
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE := nuNUSEINSE;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR :=TRUNC(sysdate);
    --<<
    --Campos que se obtienen desde el campo vtyDatIngresos(i).dcrcinad
    -->>
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNINEGO:=Nvl(ldci_pkinterfazsap.fvaGetData(1,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IDENTIFI:=Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITTERCE:=nuNIT;--Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CATEGORI:=nuCategoria;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUBCATEG:=ldci_pkinterfazsap.fvaGetData(6,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCRECA:=Nvl(ldci_pkinterfazsap.fvaGetData(7,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCTRAN:=Nvl(ldci_pkinterfazsap.fvaGetData(8,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EDADEUDA:=Nvl(ldci_pkinterfazsap.fvaGetData(9,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOSERV:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NIPRESTA:=Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOCART:=Nvl(ldci_pkinterfazsap.fvaGetData(12,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONCILIA:=Nvl(ldci_pkinterfazsap.fvaGetData(13,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DOCSOPOR:=Nvl(ldci_pkinterfazsap.fvaGetData(14,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG1:=ldci_pkinterfazsap.fvaGetData(15,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG2:=ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG3:=ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG4:=ldci_pkinterfazsap.fvaGetData(18,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG5:=ldci_pkinterfazsap.fvaGetData(19,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ANIO:=ldci_pkinterfazsap.fvaGetData(20,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MES:=ldci_pkinterfazsap.fvaGetData(21,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRSERV:=ldci_pkinterfazsap.fvaGetData(22,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRRECA:=ldci_pkinterfazsap.fvaGetData(23,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CICLFACT:=ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRFACT:=ldci_pkinterfazsap.fvaGetData(25,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRCICL:=ldci_pkinterfazsap.fvaGetData(26,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLDOCPAG:=ldci_pkinterfazsap.fvaGetData(28,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUCBANC:=ldci_pkinterfazsap.fvaGetData(29,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNIDCONS:=ldci_pkinterfazsap.fvaGetData(31,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DIASPROV:=ldci_pkinterfazsap.fvaGetData(32,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANRE:=ldci_pkinterfazsap.fvaGetData(34,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPBANRE:=ldci_pkinterfazsap.fvaGetData(35,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANTR:=ldci_pkinterfazsap.fvaGetData(36,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CUPON:=Nvl(ldci_pkinterfazsap.fvaGetData(37,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITCAJER:=ldci_pkinterfazsap.fvaGetData(38,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB:=Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CAULEGAL:=Nvl(ldci_pkinterfazsap.fvaGetData(41,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).PROYECTO:=Nvl(ldci_pkinterfazsap.fvaGetData(43,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPUNIOP:=Nvl(ldci_pkinterfazsap.fvaGetData(44,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ENTCONCI:=Nvl(ldci_pkinterfazsap.fvaGetData(45,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE:= nuComprobante;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS:= sbLEDGERS;

    return(0);
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQU_RECLACARTERA] - No se pudo almacenar en la estrucura vtyLDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
      -- LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLITIDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLITIDO,USER,USERENV('TERMINAL'));
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuLDCI_INCOLIQU_RECLACARTERA;

  FUNCTION fnuLDCI_INCOLIQU_RECLACARTERO(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME  VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA  VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaCbene IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        vaCcosto IN LDCI_INCOLIQU.centroco%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        sbSegmento VARCHAR2,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%type,
                        sbLEDGERS IN LDCI_INCOLIQU.LEDGERS%type)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQU_RECLACARTERA
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/

  nuCentBen NUMBER;
  sbOrdInt VARCHAR2(100);
  nuCategoria NUMBER;
  sbDescripcionNit VARCHAR2(200);
  daFECHBASE date;
  sbEsDivergente VARCHAR2(2);
  nuNIT VARCHAR2(100);
  vaDesInterFaz VARCHAR2(100);
  nuClasificador NUMBER;
  nuTipoServicio NUMBER;
  nuCiclo		 ciclo.ciclcodi%type;

  BEGIN
    --<<
    --Se Obtiene la Categoria con Base en la Localidad
    -->>
    nuCategoria 	:=Nvl(ldci_pkinterfazsap.fvaGetData(5,dcrcinad,'|'),NULL);
    nuCentBen		:=vaCbene;
	nuTipoServicio	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
	nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|'),NULL);
    -- Aranda 7100
	if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
		sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
	else
		sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
	end if;

    nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),fnuGetNitGenerico(nuCOD_CLASIFCONTA)),null);
   -- IF (nuNIT IS NULL) THEN
    --  LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLITIDO,'Interfaz ['||nuICLINUDO||'] No se puede obtener el NIT Generico del clasificador  :['||nuCOD_CLASIFCONTA||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
   --   return -1;
   -- END IF;

    nuNIT:=replace(nuNIT,'-','');
    sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

    sbEsDivergente:=fnuGetDivergente(vaCLAVCONT);


    if(nuCentBen=0) then
      LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLITIDO,'Interfaz ['||nuICLINUDO||'] No se puede obtener el Centro de Beneficio para la localidad  :['||ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|')||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    end if;

    IF(nuTipoServicio =7055 OR nuTipoServicio = 7056) THEN --BRILLA
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_BRILLA', nuNIT, osbErrorMessage);
        vaDesInterFaz:='PROV_BRILLA';
        nuClasificador := 3;
    ELSIF(nuTipoServicio =7052) THEN --KIT
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_KIT', nuNIT, osbErrorMessage);
        vaDesInterFaz:='PROV_KIT';
        nuClasificador := 2;
    ELSE                  --OTRO
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_GENERAL', nuNIT, osbErrorMessage);
        vaDesInterFaz:='PROV ';
        nuClasificador := 1;
    END IF;

    sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

    if (vtyLDCI_INCOLIQU.count = 0) then
        ldci_pkinterfazsap.nuIncoliqu := 1;
    ELSE
        ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
    END IF;

    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH := dtICLIFECH;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO := nuICLITIDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO := nuICLINUDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA := vaICLIUSUA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM := vaICLITERM;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR := dtICLIFECR;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF := nuCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA := nuClasificador;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT := vaCLAVCONT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA := vaCLASECTA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN := nuNIT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 := nuNIT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 := sbDescripcionNit;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV   := '';
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME := vaINDICCME;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX := nuIMPOMTRX;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC := nuIMPOMSOC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA := vaINDICIVA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO := Nvl(ldci_pkinterfazsap.fvaGetData(27,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE := trunc(sysdate);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := ldci_pkinterfazsap.fvaGetData(42,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO := vaCcosto;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT := NULL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD := nuCANTIDAD;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN := vaTXTPOSCN;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 := vaCLAVREF2;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE := nuCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO := sbSegmento;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO := vaOBJCOSTO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL := vaSOCIEDGL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL := vaMATERIAL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC := vaTIPORETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC := '';
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC := '';
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE := nuNUSEINSE;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR :=TRUNC(sysdate);
    --<<
    --Campos que se obtienen desde el campo vtyDatIngresos(i).dcrcinad
    -->>
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNINEGO:=Nvl(ldci_pkinterfazsap.fvaGetData(1,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IDENTIFI:=Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITTERCE:=nuNIT;--Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CATEGORI:=nuCategoria;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUBCATEG:=ldci_pkinterfazsap.fvaGetData(6,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCRECA:=Nvl(ldci_pkinterfazsap.fvaGetData(7,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCTRAN:=Nvl(ldci_pkinterfazsap.fvaGetData(8,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EDADEUDA:=Nvl(ldci_pkinterfazsap.fvaGetData(9,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOSERV:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NIPRESTA:=Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOCART:=Nvl(ldci_pkinterfazsap.fvaGetData(12,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONCILIA:=Nvl(ldci_pkinterfazsap.fvaGetData(13,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DOCSOPOR:=Nvl(ldci_pkinterfazsap.fvaGetData(14,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG1:=ldci_pkinterfazsap.fvaGetData(15,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG2:=ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG3:=ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG4:=ldci_pkinterfazsap.fvaGetData(18,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG5:=ldci_pkinterfazsap.fvaGetData(19,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ANIO:=ldci_pkinterfazsap.fvaGetData(20,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MES:=ldci_pkinterfazsap.fvaGetData(21,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRSERV:=ldci_pkinterfazsap.fvaGetData(22,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRRECA:=ldci_pkinterfazsap.fvaGetData(23,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CICLFACT:=ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRFACT:=ldci_pkinterfazsap.fvaGetData(25,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRCICL:=ldci_pkinterfazsap.fvaGetData(26,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLDOCPAG:=ldci_pkinterfazsap.fvaGetData(28,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUCBANC:=ldci_pkinterfazsap.fvaGetData(29,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNIDCONS:=ldci_pkinterfazsap.fvaGetData(31,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DIASPROV:=ldci_pkinterfazsap.fvaGetData(32,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANRE:=ldci_pkinterfazsap.fvaGetData(34,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPBANRE:=ldci_pkinterfazsap.fvaGetData(35,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANTR:=ldci_pkinterfazsap.fvaGetData(36,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CUPON:=Nvl(ldci_pkinterfazsap.fvaGetData(37,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITCAJER:=ldci_pkinterfazsap.fvaGetData(38,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB:=Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CAULEGAL:=Nvl(ldci_pkinterfazsap.fvaGetData(41,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).PROYECTO:=Nvl(ldci_pkinterfazsap.fvaGetData(43,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPUNIOP:=Nvl(ldci_pkinterfazsap.fvaGetData(44,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ENTCONCI:=Nvl(ldci_pkinterfazsap.fvaGetData(45,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE:= nuComprobante;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS:= sbLEDGERS;

    return(0);
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQU_RECLACARTERA] - No se pudo almacenar en la estrucura vtyLDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
      -- LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLITIDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLITIDO,USER,USERENV('TERMINAL'));
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuLDCI_INCOLIQU_RECLACARTERO;

  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQU
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  function fnuLDCI_INCOLIQU(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME IN VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA IN VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                        nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        nuASIGNACN IN LDCI_INCOLIQU.ASIGNACN%TYPE,
                        nuCLAVREF1 IN LDCI_INCOLIQU.CLAVREF1%TYPE,
                        sbCLAVREF3 IN LDCI_INCOLIQU.CLAVREF3%TYPE,
                        nuCUPON IN LDCI_INCOLIQU.CUPON%TYPE,
                        nuCentBen IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        nuOrdenInt IN ic_decoreco.dcrcinad%TYPE,
                        nuSegmento IN ic_decoreco.dcrcinad%TYPE,
                        nuBASEIMPT IN LDCI_INCOLIQU.BASEIMPT%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%TYPE,
                        sbLedgers   IN LDCI_INCOLIQU.ledgers%TYPE,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE  )
return number
  is
  sbOrdInt VARCHAR2(100);
  nuCategoria NUMBER;
  sbSegmento VARCHAR2(200);
  sbDescripcionNit VARCHAR2(200);
  daFECHBASE date;
  sbEsDivergente VARCHAR2(2);
  nuNIT VARCHAR2(100);
  BEGIN
   sbOrdInt:= nuOrdenInt;
   sbSegmento:= nuSegmento;

    if (vtyLDCI_INCOLIQU.count = 0) then
        ldci_pkinterfazsap.nuIncoliqu := 1;
    ELSE
        ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
    END IF;

    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO := nuICLITIDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO := nuICLINUDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH := dtICLIFECH;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA := vaICLIUSUA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM := vaICLITERM;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR := dtICLIFECR;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF := nuCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA := nuCOD_CLASIFCONTA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT := vaCLAVCONT;

    /*Cambio para estandarizar la entrada*/
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA := vaCLASECTA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN := nuASIGNACN;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 := nuCLAVREF1;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 := sbCLAVREF3;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV   := vaCTADIV;

    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME := vaINDICCME;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX := nuIMPOMTRX;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC := nuIMPOMSOC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA := vaINDICIVA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO := Nvl(ldci_pkinterfazsap.fvaGetData(27,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE := trunc(dtICLIFECH);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := ldci_pkinterfazsap.fvaGetData(42,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := null;--trunc(REPLACE(ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|'),'.',','));
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO := fvaGetCecoCuen(vaCLASECTA,nuCentBen);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT := sbOrdInt;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD := nuCANTIDAD;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN := vaTXTPOSCN;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE := nuCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL := vaSOCIEDGL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO := sbSegmento;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO := vaOBJCOSTO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 := vaCLAVREF2;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL := vaMATERIAL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC := vaTIPORETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC := vaINDRETEC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC := nuBASERETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE := nuNUSEINSE;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR :=TRUNC(dtICLIFECH);
    --<<
    --Campos que se obtienen desde el campo vtyDatIngresos(i).dcrcinad
    -->>
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNINEGO:=Nvl(ldci_pkinterfazsap.fvaGetData(1,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IDENTIFI:=Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITTERCE:=nuNIT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CATEGORI:=nuCategoria;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUBCATEG:=ldci_pkinterfazsap.fvaGetData(6,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCRECA:=Nvl(ldci_pkinterfazsap.fvaGetData(7,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCTRAN:=Nvl(ldci_pkinterfazsap.fvaGetData(8,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EDADEUDA:=Nvl(ldci_pkinterfazsap.fvaGetData(9,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOSERV:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NIPRESTA:=Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOCART:=Nvl(ldci_pkinterfazsap.fvaGetData(12,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONCILIA:=Nvl(ldci_pkinterfazsap.fvaGetData(13,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DOCSOPOR:=Nvl(ldci_pkinterfazsap.fvaGetData(14,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG1:=ldci_pkinterfazsap.fvaGetData(15,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG2:=ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG3:=ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG4:=ldci_pkinterfazsap.fvaGetData(18,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG5:=ldci_pkinterfazsap.fvaGetData(19,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ANIO:=ldci_pkinterfazsap.fvaGetData(20,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MES:=ldci_pkinterfazsap.fvaGetData(21,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRSERV:=ldci_pkinterfazsap.fvaGetData(22,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRRECA:=ldci_pkinterfazsap.fvaGetData(23,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CICLFACT:=ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRFACT:=ldci_pkinterfazsap.fvaGetData(25,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRCICL:=ldci_pkinterfazsap.fvaGetData(26,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLDOCPAG:=ldci_pkinterfazsap.fvaGetData(28,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUCBANC:=ldci_pkinterfazsap.fvaGetData(29,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNIDCONS:=ldci_pkinterfazsap.fvaGetData(31,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DIASPROV:=ldci_pkinterfazsap.fvaGetData(32,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANRE:=ldci_pkinterfazsap.fvaGetData(34,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPBANRE:=ldci_pkinterfazsap.fvaGetData(35,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANTR:=ldci_pkinterfazsap.fvaGetData(36,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CUPON:=nuCUPON;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITCAJER:=ldci_pkinterfazsap.fvaGetData(38,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB:=Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CAULEGAL:=Nvl(ldci_pkinterfazsap.fvaGetData(41,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).PROYECTO:=Nvl(ldci_pkinterfazsap.fvaGetData(43,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPUNIOP:=Nvl(ldci_pkinterfazsap.fvaGetData(44,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ENTCONCI:=Nvl(ldci_pkinterfazsap.fvaGetData(45,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE := nuComprobante;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS := sbLedgers;


  return(0);
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQU] - No se pudo almacenar en la estructura vtyLDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuLDCI_INCOLIQU;

  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQU
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    Dcardona 15/01/2015  Aranda: 5980
                         Se cambia la asignaci?n del campo FECHBASE de SYSDATE a la fecha
                         del parametro de ingreso, para que dicha fecha dependa de la gasera
                         donde se est? ejecutando el proceso (SYSDATE para GDO y la fecha de
                         grabaci?n de los pagos para las dem?s gaseras)
  ************************************************************************/
  function fnuLDCI_INCOLIQU_PAGOS(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME IN VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA IN VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                        nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        nuASIGNACN IN LDCI_INCOLIQU.ASIGNACN%TYPE,
                        nuCLAVREF1 IN LDCI_INCOLIQU.CLAVREF1%TYPE,
                        sbCLAVREF3 IN LDCI_INCOLIQU.CLAVREF3%TYPE,
                        nuCUPON IN LDCI_INCOLIQU.CUPON%TYPE,
                        nuCentBen IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        nuOrdenInt IN ic_decoreco.dcrcinad%TYPE,
                        nuSegmento IN ic_decoreco.dcrcinad%TYPE,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante in LDCI_INCOLIQU.comprobante%type,
                        sbLEDGERS   in LDCI_INCOLIQU.LEDGERS%type  )
    return number
IS
  sbOrdInt VARCHAR2(100);
  nuCategoria NUMBER;
  sbSegmento VARCHAR2(200);
  sbDescripcionNit VARCHAR2(200);
  daFECHBASE date;
  sbEsDivergente VARCHAR2(2);
  nuNIT VARCHAR2(100);
  BEGIN
       sbOrdInt:= nuOrdenInt;
       sbSegmento:= nuSegmento;

        if (vtyLDCI_INCOLIQU.count = 0) then
          ldci_pkinterfazsap.nuIncoliqu := 1;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := '';
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := '';
        ELSE
          ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := ldci_pkinterfazsap.fvaGetData(42,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');
        END IF;

        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO := nuICLITIDO;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO := nuICLINUDO;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH := dtICLIFECH;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA := vaICLIUSUA;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM := vaICLITERM;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR := dtICLIFECR;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF := nuCentBen;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA := nuCOD_CLASIFCONTA;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT := vaCLAVCONT;

        /*Cambio para estandarizar la entrada*/
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA := vaCLASECTA;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN := nuASIGNACN;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 := nuCLAVREF1;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 := sbCLAVREF3;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV   := vaCTADIV;

        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME := vaINDICCME;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX := nuIMPOMTRX;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC := nuIMPOMSOC;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA := vaINDICIVA;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO := null;--Nvl(ldci_pkinterfazsap.fvaGetData(27,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE := dtICLIFECR; -- Dcardona: Aranda 5980 - 15/01/2015 - Se cambia Sysdate por la fecha del parametro de ingreso
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO := fvaGetCecoCuen(vaCLASECTA,nuCentBen);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE := nuCentBen;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT := null;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD := nuCANTIDAD;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN := vaTXTPOSCN;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO := sbSegmento;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO := vaOBJCOSTO;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 := null;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL := vaSOCIEDGL;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL := vaMATERIAL;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC := vaTIPORETC;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC := vaINDRETEC;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC := nuBASERETC;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE := nuNUSEINSE;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR :=dtICLIFECH;
        --<<
        --Campos que se obtienen desde el campo vtyDatIngresos(i).dcrcinad
        -->>
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNINEGO:='';--Nvl(ldci_pkinterfazsap.fvaGetData(1,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IDENTIFI:='';--Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITTERCE:=nuNIT;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CATEGORI:=nuCategoria;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUBCATEG:=ldci_pkinterfazsap.fvaGetData(6,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCRECA:=Nvl(ldci_pkinterfazsap.fvaGetData(7,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCTRAN:=Nvl(ldci_pkinterfazsap.fvaGetData(8,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EDADEUDA:='';--Nvl(ldci_pkinterfazsap.fvaGetData(9,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOSERV:='';--Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NIPRESTA:=Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOCART:='';--Nvl(ldci_pkinterfazsap.fvaGetData(12,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONCILIA:='';--Nvl(ldci_pkinterfazsap.fvaGetData(13,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DOCSOPOR:=Nvl(ldci_pkinterfazsap.fvaGetData(14,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG1:='';--ldci_pkinterfazsap.fvaGetData(15,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG2:='';--ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG3:=ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG4:='';--ldci_pkinterfazsap.fvaGetData(18,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG5:='';--ldci_pkinterfazsap.fvaGetData(19,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ANIO:='';--ldci_pkinterfazsap.fvaGetData(20,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MES:='';--ldci_pkinterfazsap.fvaGetData(21,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRSERV:='';--ldci_pkinterfazsap.fvaGetData(22,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRRECA:='';--ldci_pkinterfazsap.fvaGetData(23,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CICLFACT:='';--ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRFACT:='';--ldci_pkinterfazsap.fvaGetData(25,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRCICL:='';--ldci_pkinterfazsap.fvaGetData(26,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLDOCPAG:='';--ldci_pkinterfazsap.fvaGetData(28,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUCBANC:='';--ldci_pkinterfazsap.fvaGetData(29,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNIDCONS:='';--ldci_pkinterfazsap.fvaGetData(31,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DIASPROV:='';--ldci_pkinterfazsap.fvaGetData(32,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANRE:=ldci_pkinterfazsap.fvaGetData(34,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPBANRE:=ldci_pkinterfazsap.fvaGetData(35,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANTR:=ldci_pkinterfazsap.fvaGetData(36,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CUPON:=nuCUPON;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITCAJER:='';--ldci_pkinterfazsap.fvaGetData(38,dcrcinad,'|');
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB:='';--Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASITEM:='';--Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CAULEGAL:='';--Nvl(ldci_pkinterfazsap.fvaGetData(41,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).PROYECTO:='';--Nvl(ldci_pkinterfazsap.fvaGetData(43,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPUNIOP:='';--Nvl(ldci_pkinterfazsap.fvaGetData(44,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ENTCONCI:=Nvl(ldci_pkinterfazsap.fvaGetData(45,dcrcinad,'|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ITEM:='';--Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL);
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE:= nuComprobante;
        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS:= sbLEDGERS;


  return(0);
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQU_PAGOS] - No se pudo almacenar en la estrucura vtyLDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuLDCI_INCOLIQU_PAGOS;


  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSapProvCartera
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  FUNCTION  fnuGeneDocuSapProvCartera(vaTipoInterfaz LDCI_PROVINTESAP.TIPOINTERFAZ%TYPE,
                            nuano       in LDCI_PROVINTESAP.ANIO%TYPE,
                            numes       in LDCI_PROVINTESAP.MES%TYPE,
                            nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                            vaMensInte   in varchar2)
  return number
  IS

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
     CURSOR cuAGRUPACION is
         SELECT COD_CLASIFCONTA,txtposcn, ledgers
         FROM LDCI_INCOLIQU
         WHERE iclinudo = nuICLINUDO
         GROUP BY COD_CLASIFCONTA,txtposcn, ledgers;
       /*
     cursor cuAGRUPACION
     is
     select COD_CENTROBENEF, COD_GRUPOCONCE from ldc_incoliqu
      where iclinudo = nuICLINUDO
     GROUP BY COD_CENTROBENEF, COD_GRUPOCONCE;
     */
     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
     CURSOR cuLDCI_INCOLIQU(nuCOD_CLASIFCONTA   in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
		sbledgers in LDCI_INCOLIQU.ledgers%type) IS
     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, round(SUM(BASEIMPT)) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV,round(sum(IMPOMTRX)) IMPOMTRX,
            round(sum(IMPOMSOC)) IMPOMSOC, ledgers
       FROM LDCI_INCOLIQU
      WHERE ICLINUDO = nuICLINUDO
        AND COD_CLASIFCONTA = nuCOD_CLASIFCONTA
        AND ledgers = sbledgers
     GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV, ledgers
      ORDER BY CENTROBE,IMPOMTRX;


     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     vaClave     LDCI_INCOLIQU.CLAVCONT%TYPE;
     p NUMBER := 0;
     nuLimite NUMBER:= 800;
     nuIdentificador number;

  begin

    --<<
    --seleccion de datos de la agrupacion
    -->>
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;

    nuIndEnca := nuIndEnca + 1;

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop
        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        --pkregidepu.pRegiMensaje('nuICLINUDO',nuICLINUDO||'-'||nuIndEnca,'XML');
        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>

        OPEN cuLDCI_INCOLIQU(vtycuAGRUPACION(j).cod_clasifconta, vtycuAGRUPACION(j).ledgers);
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        sbIndice := vtycuLDCI_INCOLIQU(j).COD_CLASIFCONTA||','||vtycuLDCI_INCOLIQU(j).ledgers;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            nuIdentificador := seq_ldci_encaintesap.nextval;
            tbENCABEZADO(sbIndice) := nuIdentificador;
        END if;

        --<<
        --Saca los detalles de la interfaz por grupo por concepto
        -->>
        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP
            p := p + 1;
          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
            -- Asigna la llave identificador para el detalle
            sbIndice := vtycuLDCI_INCOLIQU(j).cod_clasifconta||','||vtycuLDCI_INCOLIQU(j).ledgers;
            nuIdentificador := tbENCABEZADO(sbIndice);

          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    vtycuLDCI_INCOLIQU(i).TXTPOSCN,
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>
          IF (nuRet <> 0) THEN
              LDCI_pkTrazaInterfaces.pRegiMensaje(vaTipoInterfaz,'No se puede ejecutar fnuLDCI_DETAINTESAP :['||vaTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTipoInterfaz,USER,USERENV('TERMINAL'));
              RAISE ERROR;
          END IF;

          IF (p = nuLimite) THEN
                  IF (vtycuLDCI_INCOLIQU(i).CENTROBE = vtycuLDCI_INCOLIQU(i+1).CENTROBE) THEN
                      nuLimite :=nuLimite+1;
                      ELSE

                        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                            nuIndEnca,
                                            null,
                                            vtycuAGRUPACION(j).cod_clasifconta,
                                            TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                            TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                            vtycuAGRUPACION(j).ledgers,
                                            vtycuAGRUPACION(j).txtposcn||'-'||nuICLINUDO,
                                            vtycuAGRUPACION(j).txtposcn||'-'||nuICLINUDO,
                                            ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                            ldci_pkinterfazsap.vaSOCIEDAD,
                                            ldci_pkinterfazsap.vaCURRENCY,
                                            nuIdentificador);

                        -- Asigna nuevo identificador de encabezao
                        sbIndice := vtycuAGRUPACION(j).COD_CLASIFCONTA||','||vtycuAGRUPACION(j).ledgers;
                        nuIdentificador := seq_ldci_encaintesap.nextval;
                        tbENCABEZADO(sbIndice) := nuIdentificador;
                    --<<
                    --Se lanza la Exepcion
                    -->>
                    if (nuRet <> 0) then
                        raise Error;
                    end if;
            p :=0;
            nuIndEnca := nuIndEnca + 1;
            END IF;
          END IF;

        END LOOP;

        IF (p > 0) THEN

                nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                    nuIndEnca,
                                    null,
                                    vtycuAGRUPACION(j).cod_clasifconta,
                                    TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                    TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                    vtycuAGRUPACION(j).ledgers,
                                    vtycuAGRUPACION(j).txtposcn||'-'||nuICLINUDO,
                                    vtycuAGRUPACION(j).txtposcn||'-'||nuICLINUDO,
                                    ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                    ldci_pkinterfazsap.vaSOCIEDAD,
                                    ldci_pkinterfazsap.vaCURRENCY,
                                    nuIdentificador);

                    -- Asigna nuevo identificador de encabezao
                    sbIndice := vtycuAGRUPACION(j).COD_CLASIFCONTA||','||vtycuAGRUPACION(j).ledgers;
                    nuIdentificador := seq_ldci_encaintesap.nextval;
                    tbENCABEZADO(sbIndice) := nuIdentificador;
                   dbms_output.put_Line('2. Cambio de encabezado '||nuIdentificador);
                --<<
                --Se lanza la Exepcion
                -->>
                if (nuRet <> 0) then
                    raise Error;
                end if;
        p :=0;
        nuIndEnca := nuIndEnca + 1;
        END IF;

        vtycuLDCI_INCOLIQU.delete;

        END LOOP;
    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapProvCartera] - Error generando Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapProvCartera] - Error generando Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
    END  fnuGeneDocuSapProvCartera;


  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSap_Pro_cartera
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  FUNCTION fnuGeneDocuSap_Pro_cartera(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2)
  return number
  IS

     --<<
     --Seleccion de datos del resumen de la interfaz de Reclasificacion Cartea
     -->>
     CURSOR cuLDCI_INCOLIQU IS
     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(FECHBASE) FECHBASE, REFFACTR, round(SUM(BASEIMPT)) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(FECHVALOR) FECHVALOR, CTADIV,round(sum(IMPOMTRX)) IMPOMTRX,
            round(sum(IMPOMSOC)) IMPOMSOC, ledgers
       FROM LDCI_INCOLIQU
      WHERE ICLINUDO = nuICLINUDO
     GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(FECHBASE), REFFACTR,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(FECHVALOR), CTADIV, ledgers
      ORDER BY COD_CENTROBENEF, IMPOMTRX;

     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     contador NUMBER := 0;
     indice NUMBER := 1;
     nuRet NUMBER;
     vaCODINTINTERFAZ VARCHAR2(20);
     vaSOCIEDAD VARCHAR2(20);
     vaCURRENCY VARCHAR2(20);
     vaClave     LDCI_INCOLIQU.CLAVCONT%TYPE;
     nuIdentificador number;
     nuLimite number := 998;
  begin

        vaCODINTINTERFAZ:='L4';
        vaSOCIEDAD:='GDOC';
        vaCURRENCY:='COP';

        vtycuLDCI_INCOLIQU.delete;

        OPEN cuLDCI_INCOLIQU;
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        sbIndice := 1;
        nuIdentificador := seq_ldci_encaintesap.nextval;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            tbENCABEZADO(sbIndice) := nuIdentificador;
            dbms_output.put_Line('Llave '||sbIndice||' '||nuIdentificador);
        END if;

        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP
            contador := contador+1;

          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    indice,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    vtycuLDCI_INCOLIQU(i).TXTPOSCN,
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>
          IF (nuRet <> 0) THEN
              LDCI_pkTrazaInterfaces.pRegiMensaje(vaCODINTINTERFAZ,'Error en ejecutar ldci_pkinterfazsap.fnuLDCI_DETAINTESAP :['||vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
              --RAISE ERROR;
          END IF;

            IF(contador = nuLimite) then --Cuando se llega a 998 Registros, se hace el cambio


                /*Se crea el dato del encabezado*/
                --<<
                --Insercion de datos en la tabla vtyldci_encaintesap
                -->>
                -- Busca el ID asignado para el encabezado
                nuRet := ldci_pkinterfazsap.fnuGeneldci_encaintesap(nuICLINUDO,
                                                indice,
                                                null,
                                                nuICLINUDO,
                                                TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                                TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                                vtycuLDCI_INCOLIQU(i).ledgers,
                                                vaMensInte||'-'||nuICLINUDO,
                                                vaMensInte||'-'||nuICLINUDO,
                                                vaCODINTINTERFAZ,
                                                vaSOCIEDAD,
                                                vaCURRENCY,
                                                nuIdentificador);

                nuIdentificador := seq_ldci_encaintesap.nextval;
                dbms_output.put_Line('se genero una llave nueva :'||nuIdentificador);
                --<<
                --Se lanza la Exepcion
                -->>
                if (nuRet <> 0) then
                    LDCI_pkTrazaInterfaces.pRegiMensaje(vaCODINTINTERFAZ,'Error encabezado',vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    --raise Error;
                end if;

                contador := 0;
                indice := indice+1;

            END IF;

        END LOOP;

       IF (contador > 1) then

          /*Se crea el dato del encabezado Para el ultimo grupo, cuando el bloque no es en cantidad exacta */
            --<<
            --Insercion de datos en la tabla vtyldci_encaintesap
            -->>
            -- identificador es el mismo del encabezado
            nuRet := ldci_pkinterfazsap.fnuGeneldci_encaintesap(nuICLINUDO,
                                            indice,
                                            null,
                                            nuICLINUDO,
                                            TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                            TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                            vtycuLDCI_INCOLIQU(vtycuLDCI_INCOLIQU.last).ledgers,
                                            vaMensInte||'-'||nuICLINUDO,
                                            vaMensInte||'-'||nuICLINUDO,
                                            vaCODINTINTERFAZ,
                                            vaSOCIEDAD,
                                            vaCURRENCY,
                                            nuIdentificador);

            --<<
            --Se lanza la Exepcion
            -->>
           if (nuRet <> 0) then
               LDCI_pkTrazaInterfaces.pRegiMensaje(vaCODINTINTERFAZ,'Error generando encabezado / fnuGeneDocuSap_Pro_cartera',vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                raise Error;
           end if;

       end if;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;

    IF (nuRet <> 0) THEN
      RAISE ERROR;
    END IF;

   -- Asienta registros
    commit;

    --<<
    --Borrado de la tabla
    -->>
    vtycuLDCI_INCOLIQU.DELETE;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap_Pro_cartera] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuLDCI_INCOLIQU.DELETE;
         dbms_output.put_Line(sqlerrm);
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap_Pro_cartera] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
    END fnuGeneDocuSap_Pro_cartera;


  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSap_Autoreten
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
     Samuel Pacheco      08/08/2018    CASO 200-1406: La variable NuIndEnca sera concatenada en el servicio
                                                     del encabezado (fnuGeneldci_encaintesap) y
                                                     detalle (ldci_pkinterfazsap.fnuLDCI_DETAINTESAP)

  ************************************************************************/
  FUNCTION fnuGeneDocuSap_Autoreten(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
  return number
  IS

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
     CURSOR cuAGRUPACION is
         SELECT txtposcn, comprobante
         FROM LDCI_INCOLIQU
         WHERE iclinudo = nuICLINUDO
         GROUP BY txtposcn, comprobante;
       /*
     cursor cuAGRUPACION
     is
     select COD_CENTROBENEF, COD_GRUPOCONCE from ldc_incoliqu
      where iclinudo = nuICLINUDO
     GROUP BY COD_CENTROBENEF, COD_GRUPOCONCE;
     */
     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
     CURSOR cuLDCI_INCOLIQU(nuTXTPOSCN   in LDCI_INCOLIQU.TXTPOSCN%type) IS
       SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(FECHBASE) FECHBASE, REFFACTR, SUM(BASEIMPT) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, round(Sum(BASERETC)) BASERETC,
            COD_CENTROBENEF,  Trunc(FECHVALOR) FECHVALOR, CTADIV,
            round(sum(IMPOMTRX)) IMPOMTRX,
            round(sum(IMPOMSOC)) IMPOMSOC
       FROM LDCI_INCOLIQU
      WHERE ICLINUDO = nuICLINUDO
        AND TXTPOSCN = nuTXTPOSCN
       GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(FECHBASE), REFFACTR,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC,
            COD_CENTROBENEF,  Trunc(FECHVALOR), CTADIV
      ORDER BY CLASECTA, CLAVCONT;



     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     nuIdentificador number;

  begin

    --<<
    --seleccion de datos de la agrupacion
    -->>
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop

        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        nuIndEnca := nuIndEnca + 1;
        nuIdentificador := seq_ldci_encaintesap.nextval;
        --pkregidepu.pRegiMensaje('nuICLINUDO',nuICLINUDO||'-'||nuIndEnca,'XML');
        -- Obtiene Libro
        sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtycuAGRUPACION(j).comprobante);

        --<<
        --Insercion de datos en la tabla vtyldci_encaintesap
        -->>
        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                        nuIndEnca,
                                        null,
                                        -1,
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        sbLEDGERS,
                                        vtycuAGRUPACION(j).txtposcn||'-'||nuICLINUDO||'-'||nuIndEnca,
                                        vtycuAGRUPACION(j).txtposcn||'-'||nuICLINUDO||'-'||nuIndEnca,
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        ldci_pkinterfazsap.vaCURRENCY,
                                        nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>
       if (nuRet <> 0) then
            raise Error;
        end if;

        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>
        OPEN cuLDCI_INCOLIQU(vtycuAGRUPACION(j).txtposcn);
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        --<<
        --Saca los detalles de la interfaz por grupo por concepto
        -->>
        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP

          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    vtycuLDCI_INCOLIQU(i).TXTPOSCN||'-'||nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    -1,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>
          IF (nuRet <> 0) THEN
              RAISE ERROR;
          END IF;

        END LOOP;

        --<<
        --Borrado de la tabla en memoria de ldc_incoliqu
        -->>
        vtycuLDCI_INCOLIQU.delete;

    END LOOP;

    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
       RAISE ERROR;
    END IF;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap_Autoreten] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap_Autoreten] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
  END fnuGeneDocuSap_Autoreten;

  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSap
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  FUNCTION fnuGeneDocuSap(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2)
  return number
  IS

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
     CURSOR cuAGRUPACION is
         SELECT COD_CLASIFCONTA, ledgers
         FROM LDCI_INCOLIQU
         WHERE iclinudo = nuICLINUDO
         GROUP BY COD_CLASIFCONTA , ledgers;
       /*
     cursor cuAGRUPACION
     is
     select COD_CENTROBENEF, COD_GRUPOCONCE from ldc_incoliqu
      where iclinudo = nuICLINUDO
     GROUP BY COD_CENTROBENEF, COD_GRUPOCONCE;
     */
     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
     CURSOR cuLDCI_INCOLIQU(nuCOD_CLASIFCONTA   in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
     sbledgers in LDCI_INCOLIQU.ledgers%type) IS
     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, round(SUM(BASEIMPT)) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV,round(sum(IMPOMTRX)) IMPOMTRX,
            round(sum(IMPOMSOC)) IMPOMSOC, ledgers
       FROM LDCI_INCOLIQU
      WHERE ICLINUDO = nuICLINUDO
        AND COD_CLASIFCONTA = nuCOD_CLASIFCONTA
        AND ledgers = sbledgers
     GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV, ledgers, docsopor
      ORDER BY COD_CENTROBENEF, COD_CLASIFCONTA;


     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     nuIdentificador number;

  begin

    --<<
    --seleccion de datos de la agrupacion
    -->>
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop

        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        nuIndEnca := nuIndEnca + 1;

        sbIndice := vtycuAGRUPACION(j).COD_CLASIFCONTA||','||vtycuAGRUPACION(j).ledgers;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            nuIdentificador := seq_ldci_encaintesap.nextval;
            tbENCABEZADO(sbIndice) := nuIdentificador;
        END if;


        --<<
        --Insercion de datos en la tabla vtyldci_encaintesap
        -->>
        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                        nuIndEnca,
                                        null,
                                        vtycuAGRUPACION(j).cod_clasifconta,
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        vtycuAGRUPACION(j).ledgers,
                                        vaMensInte||'-'||nuICLINUDO,
                                        vaMensInte||'-'||nuICLINUDO,
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        ldci_pkinterfazsap.vaCURRENCY,
                                        nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>
       if (nuRet <> 0) then
            raise Error;
        end if;

        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>
        OPEN cuLDCI_INCOLIQU(vtycuAGRUPACION(j).cod_clasifconta, vtycuAGRUPACION(j).ledgers);
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        --<<
        --Saca los detalles de la interfaz por grupo por concepto
        -->>
        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP

          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
            -- Asigna la llave para el detalle
            sbIndice := vtycuLDCI_INCOLIQU(i).cod_clasifconta||','||vtycuLDCI_INCOLIQU(i).ledgers;
            nuIdentificador := tbENCABEZADO(sbIndice);

          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    vtycuLDCI_INCOLIQU(i).TXTPOSCN,
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>
          IF (nuRet <> 0) THEN
              RAISE ERROR;
          END IF;

        END LOOP;

        --<<
        --Borrado de la tabla en memoria de ldc_incoliqu
        -->>
        vtycuLDCI_INCOLIQU.delete;

    END LOOP;

    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
       RAISE ERROR;
    END IF;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
    END fnuGeneDocuSap;

  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSapRein
     AUTOR     : Heiber Barco
     FECHA     : 24-02-2014
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor                 Fecha       Descripcion
    Samuel Pacheco      08/08/2018    CASO 200-1406: La variable NuIndEnca sera concatenada en el servicio
                                                     del encabezado (fnuGeneldci_encaintesap) y
                                                     detalle (ldci_pkinterfazsap.fnuLDCI_DETAINTESAP)
  ************************************************************************/
  FUNCTION fnuGeneDocuSapRein(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2)
  return number
  IS

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
     CURSOR cuAGRUPACION is
         SELECT COD_CLASIFCONTA, ledgers
         FROM LDCI_INCOLIQU
         WHERE iclinudo = nuICLINUDO
         GROUP BY COD_CLASIFCONTA , ledgers;
       /*
     cursor cuAGRUPACION
     is
     select COD_CENTROBENEF, COD_GRUPOCONCE from ldc_incoliqu
      where iclinudo = nuICLINUDO
     GROUP BY COD_CENTROBENEF, COD_GRUPOCONCE;
     */
     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
     CURSOR cuLDCI_INCOLIQU(nuCOD_CLASIFCONTA   in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
     sbledgers in LDCI_INCOLIQU.ledgers%type) IS
     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, round(SUM(BASEIMPT)) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV,round(sum(IMPOMTRX)) IMPOMTRX,
            round(sum(IMPOMSOC)) IMPOMSOC, ledgers
       FROM LDCI_INCOLIQU
      WHERE ICLINUDO = nuICLINUDO
        AND COD_CLASIFCONTA = nuCOD_CLASIFCONTA
        AND ledgers = sbledgers
     GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV, ledgers, docsopor
      ORDER BY COD_CENTROBENEF, COD_CLASIFCONTA;


     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     nuIdentificador number;

  begin

    --<<
    --seleccion de datos de la agrupacion
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Ingresa al genedocusaprein ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'abre cursor 1 genedocusaprein ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop

        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'abre cursor 2 genedocusaprein ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        nuIndEnca := nuIndEnca + 1;

        sbIndice := vtycuAGRUPACION(j).COD_CLASIFCONTA||','||vtycuAGRUPACION(j).ledgers;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            nuIdentificador := seq_ldci_encaintesap.nextval;
            tbENCABEZADO(sbIndice) := nuIdentificador;
        END if;


        --<<
        --Insercion de datos en la tabla vtyldci_encaintesap
        -->>
        /*CASO 200-1406
        Antes
              vaMensInte||'-'||nuICLINUDO,
              vaMensInte||'-'||nuICLINUDO,
        Despues
              vaMensInte||'-'||nuICLINUDO||'-'||nuIndEnca,
              vaMensInte||'-'||nuICLINUDO||'-'||nuIndEnca,
        -------------------*/

        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                        nuIndEnca,
                                        null,
                                        vtycuAGRUPACION(j).cod_clasifconta,
                                        TO_CHAR(ldci_pkinterfazsap.nuFechaprocesa, 'DDMMYYYY'),
                                        TO_CHAR(ldci_pkinterfazsap.nuFechaprocesa, 'DDMMYYYY'),
                                        vtycuAGRUPACION(j).ledgers,
                                        vaMensInte||'-'||nuICLINUDO||'-'||nuIndEnca,
                                        vaMensInte||'-'||nuICLINUDO||'-'||nuIndEnca,
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        ldci_pkinterfazsap.vaCURRENCY,
                                        nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>
       if (nuRet <> 0) then
            raise Error;
        end if;

        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>
        OPEN cuLDCI_INCOLIQU(vtycuAGRUPACION(j).cod_clasifconta, vtycuAGRUPACION(j).ledgers);
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        --<<
        --Saca los detalles de la interfaz por grupo por concepto
        -->>
        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP

          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
            -- Asigna la llave para el detalle
            sbIndice := vtycuLDCI_INCOLIQU(i).cod_clasifconta||','||vtycuLDCI_INCOLIQU(i).ledgers;
            nuIdentificador := tbENCABEZADO(sbIndice);

          /*CASO 200-1406
          Antes
                 vtycuLDCI_INCOLIQU(i).TXTPOSCN,
          Despues
                 vtycuLDCI_INCOLIQU(i).TXTPOSCN||'-'||nuIndEnca,
          -------------------*/
          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    vtycuLDCI_INCOLIQU(i).TXTPOSCN||'-'||nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>
          IF (nuRet <> 0) THEN
              RAISE ERROR;
          END IF;

        END LOOP;

        --<<
        --Borrado de la tabla en memoria de ldc_incoliqu
        -->>
        vtycuLDCI_INCOLIQU.delete;

    END LOOP;

    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
       RAISE ERROR;
    END IF;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
    END fnuGeneDocuSapRein;


/************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSapReinFe
     AUTOR     : Heiber Barco
     FECHA     : 26-02-2014
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz
                    y encabezado por fecha
    Parametros de Entrada

    Parametros de Salida


  Historia de Modificaciones
    Autor                 Fecha       Descripcion
    Samuel Pacheco      23/08/2018    CASO 200-1406: La variable NuIndEnca sera concatenada en el servicio
                                                     del encabezado (fnuGeneldci_encaintesap) y
                                                     detalle (ldci_pkinterfazsap.fnuLDCI_DETAINTESAP)

  ************************************************************************/
  FUNCTION fnuGeneDocuSapReinFe(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2)
  return number
  IS

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
     CURSOR cuAGRUPACION is
         SELECT COD_CLASIFCONTA, ledgers, trunc(FECHVALOR)FECHVALOR
         FROM LDCI_INCOLIQU
         WHERE iclinudo = nuICLINUDO
         GROUP BY COD_CLASIFCONTA , ledgers, trunc(FECHVALOR);
       /*
     cursor cuAGRUPACION
     is
     select COD_CENTROBENEF, COD_GRUPOCONCE from ldc_incoliqu
      where iclinudo = nuICLINUDO
     GROUP BY COD_CENTROBENEF, COD_GRUPOCONCE;
     */
     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
     CURSOR cuLDCI_INCOLIQU(nuCOD_CLASIFCONTA   in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
     sbledgers in LDCI_INCOLIQU.ledgers%type, daFechaValor in LDCI_INCOLIQU.FECHVALOR%type) IS
     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, round(SUM(BASEIMPT)) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV,round(sum(IMPOMTRX)) IMPOMTRX,
            round(sum(IMPOMSOC)) IMPOMSOC, ledgers
       FROM LDCI_INCOLIQU
      WHERE ICLINUDO = nuICLINUDO
        AND COD_CLASIFCONTA = nuCOD_CLASIFCONTA
        AND ledgers = sbledgers
        and trunc(FECHVALOR) = daFechaValor
     GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV, ledgers, docsopor
      ORDER BY COD_CENTROBENEF, COD_CLASIFCONTA;


     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     nuIdentificador number;

  begin

    --<<
    --seleccion de datos de la agrupacion
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Ingresa al genedocusaprein ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'abre cursor 1 genedocusaprein ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop

        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'abre cursor 2 genedocusaprein ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        nuIndEnca := nuIndEnca + 1;

        sbIndice := vtycuAGRUPACION(j).COD_CLASIFCONTA||','||vtycuAGRUPACION(j).ledgers||','||vtycuAGRUPACION(j).FECHVALOR;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            nuIdentificador := seq_ldci_encaintesap.nextval;
            tbENCABEZADO(sbIndice) := nuIdentificador;
        END if;


        --<<
        --Insercion de datos en la tabla vtyldci_encaintesap
        -->>
        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                        nuIndEnca,
                                        null,
                                        vtycuAGRUPACION(j).cod_clasifconta,
                                        TO_CHAR(vtycuAGRUPACION(j).FECHVALOR, 'DDMMYYYY'),
                                        TO_CHAR(ldci_pkinterfazsap.nuFechaprocesa, 'DDMMYYYY'),
                                        vtycuAGRUPACION(j).ledgers,
                                        vaMensInte||'-'||nuICLINUDO ||'-'||nuIndEnca,--200-1406
                                        vaMensInte||'-'||nuICLINUDO ||'-'||nuIndEnca,--200-1406
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        ldci_pkinterfazsap.vaCURRENCY,
                                        nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>
       if (nuRet <> 0) then
            raise Error;
        end if;

        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>
        OPEN cuLDCI_INCOLIQU(vtycuAGRUPACION(j).cod_clasifconta, vtycuAGRUPACION(j).ledgers, vtycuAGRUPACION(j).FECHVALOR);
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        --<<
        --Saca los detalles de la interfaz por grupo por concepto
        -->>
        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP

          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
            -- Asigna la llave para el detalle
            sbIndice := vtycuLDCI_INCOLIQU(i).cod_clasifconta||','||vtycuLDCI_INCOLIQU(i).ledgers||','||vtycuLDCI_INCOLIQU(i).FECHVALOR;
            nuIdentificador := tbENCABEZADO(sbIndice);

          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    vtycuLDCI_INCOLIQU(i).TXTPOSCN ||'-'||nuIndEnca,--200-1406
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>
          IF (nuRet <> 0) THEN
              RAISE ERROR;
          END IF;

        END LOOP;

        --<<
        --Borrado de la tabla en memoria de ldc_incoliqu
        -->>
        vtycuLDCI_INCOLIQU.delete;

    END LOOP;

    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
       RAISE ERROR;
    END IF;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapReinFe] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapReinFe] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
    END fnuGeneDocuSapReinFe;

  FUNCTION  fnuGeneDocuSapReclaCartera(vaTipoInterfaz LDCI_RECLACARTNTESAP.TIPOINTERFAZ%TYPE,
                            nuano       in LDCI_RECLACARTNTESAP.ANIO%TYPE,
                            numes       in LDCI_RECLACARTNTESAP.MES%TYPE,
                            nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                            vaMensInte   in varchar2)
  return number
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSapReclaCartera
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha        Descripcion
    -------- -----------  -------------------------------------------------
    Dcardona 06-Oct-2015  SAO: 338943
                          Se cambia la variable que se env?a en el detalle de interfaz
                          para que se env?e la variable TXTPOSCN de ldci_incoliqu en lugar
                          de la variable vaMensInte de enrada de la funci?n
    cgonzalezv 30/10/2015 SAO 340484: Cambio de tipo de documento para la interfaz
                          de provision consumo NO regulado LC por L5C

  ************************************************************************/
  IS

     --<<
     --Seleccion de datos del resumen de la interfaz de Reclasificacion Cartea
     -->>
     CURSOR cuLDCI_INCOLIQU IS
     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(FECHBASE) FECHBASE, REFFACTR, round(SUM(BASEIMPT)) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(FECHVALOR) FECHVALOR, CTADIV,round(sum(IMPOMTRX)) IMPOMTRX,
            round(sum(IMPOMSOC)) IMPOMSOC, ledgers
       FROM LDCI_INCOLIQU
      WHERE ICLINUDO = nuICLINUDO
     GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(FECHBASE), REFFACTR,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(FECHVALOR), CTADIV, ledgers
      ORDER BY COD_CENTROBENEF, IMPOMTRX;

     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     contador NUMBER := 0;
     indice NUMBER := 1;
     nuRet NUMBER;
     vaCODINTINTERFAZ VARCHAR2(20);
     vaSOCIEDAD VARCHAR2(20);
     vaCURRENCY VARCHAR2(20);
     vaClave     LDCI_INCOLIQU.CLAVCONT%TYPE;
     nuLimite number := 998;
     nuIdentificador number;

  begin

        --Cuando la interfaz es una Provision de CEOGAS, en caso contratio queda el tipo de interfas que llega
        -- sao 340484: Cambio tipo documento de LC por L5C
        IF (vaTipoInterfaz <> 'L5C') THEN
            vaCODINTINTERFAZ := vaTipoInterfaz;
        ELSE
            vaCODINTINTERFAZ := 'L5';
        END IF;

        vaSOCIEDAD := 'GDOC';
        vaCURRENCY := 'COP';

        vtycuLDCI_INCOLIQU.delete;

        --<<
        --Se Realiza el borrado de los datos cada vez que se genera la provision, para
        --evitar duplicidad de la informaci?n
        -->>
        DELETE FROM LDCI_RECLACARTNTESAP a
        WHERE a.anio = nuano
        AND a.mes = numes
        AND a.tipointerfaz = vaTipoInterfaz;
        -- Asienta registros
        COMMIT;


        OPEN cuLDCI_INCOLIQU;
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        sbIndice := 1;
        nuIdentificador := seq_ldci_encaintesap.nextval;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            tbENCABEZADO(sbIndice) := nuIdentificador;
            dbms_output.put_Line('Llave '||sbIndice||' '||nuIdentificador);
        END if;

        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP
            contador := contador+1;
            --<<
            --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
            -->>
            nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    indice,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    null,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    null,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    vtycuLDCI_INCOLIQU(i).TXTPOSCN,  -- Dcardona: [06-10-2015] SAO 338943 - Se cambia la variable actual por el texto de INCOLIQU
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO, --Cambio 6207
                                                    null,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    nulL,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA,
                                                    nuIdentificador);

            --<<
            --Se lanza la Exepcion
            -->>
            IF (nuRet <> 0) THEN
              LDCI_pkTrazaInterfaces.pRegiMensaje(vaTipoInterfaz,'No se puede ejecutar fnuLDCI_DETAINTESAP :['||vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
              --RAISE ERROR;
            END IF;

            --<<
            --Se Hace Cambio de Claves para la Reversion de la provision en el proximo mes
            -->>
            IF (vtycuLDCI_INCOLIQU(i).CLAVCONT='40') THEN
                 vaClave:='50';
              ELSE
                 vaClave:='40';
            END IF;

            --<<
            --Generacion de los detalles de la interfaz en la tabla LDCI_RECLACARTNTESAP
            -->>
            IF ( instr(vtycuLDCI_INCOLIQU(i).IMPOMTRX,'PCON_R') = 0 ) then
                nuRet := ldci_pkinterfazsap.fnuGeneLDCI_RECLACARTINTESAP(vaTipoInterfaz,
                                                        nuano,
                                                        numes,
                                                        nuICLINUDO,
                                                        indice,
                                                        vaClave,
                                                        vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                        null,
                                                        vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                        vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                        vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                        vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                        null,
                                                        vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                        vtycuLDCI_INCOLIQU(i).TXTPOSCN,  -- Dcardona: [06-10-2015] SAO 338943 - Se cambia la variable actual por el texto de INCOLIQU
                                                        vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                        vtycuLDCI_INCOLIQU(i).SEGMENTO, --Cambio 6207
                                                        null,
                                                        vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                        vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                        vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                        vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                        vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                        vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA
                                                        );
                END if;

            --<<
            --Se lanza la Exepcion
            -->>
            IF (nuRet <> 0) THEN
              LDCI_pkTrazaInterfaces.pRegiMensaje(vaCODINTINTERFAZ,'No se puede ejecutar fnuGeneLDCI_RECLACARTINTESAP :['||vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
              --RAISE ERROR;
            END IF;

            IF( contador = nuLimite) then --Cuando se llega a 998 Registros, se hace el cambio


                /*Se crea el dato del encabezado*/
                --<<
                --Insercion de datos en la tabla vtyldci_encaintesap
                -->>
                nuRet := ldci_pkinterfazsap.fnuGeneldci_encaintesap(nuICLINUDO,
                                                    indice,
                                                    null,
                                                    nuICLINUDO,
                                                    TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                                    TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                                    vtycuLDCI_INCOLIQU(i).ledgers,
                                                    vaMensInte||'-'||nuICLINUDO,
                                                    vaMensInte||'-'||nuICLINUDO,
                                                    vaCODINTINTERFAZ,
                                                    vaSOCIEDAD,
                                                    vaCURRENCY,
                                                    nuIdentificador);
                nuIdentificador := seq_ldci_encaintesap.nextval;

                --<<
                --Se lanza la Exepcion
                -->>
                if (nuRet <> 0) then
                   LDCI_pkTrazaInterfaces.pRegiMensaje(vaCODINTINTERFAZ,'No se puede ejecutar fnuGeneldci_encaintesap: ',vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    --raise Error;
                end if;

                contador := 0;
                indice := indice+1;
            END IF;
        END LOOP;

       IF (contador>1) then
          /*Se crea el dato del encabezado Para el ultimo grupo, cuando el bloque no es en cantidad exacta*/

            -- identificador es el mismo del encabezado
            nuRet := ldci_pkinterfazsap.fnuGeneldci_encaintesap(nuICLINUDO,
                        indice,
                        null,
                        nuICLINUDO,
                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                        vtycuLDCI_INCOLIQU(vtycuLDCI_INCOLIQU.last).ledgers,
                        vaMensInte||'-'||nuICLINUDO,
                        vaMensInte||'-'||nuICLINUDO,
                        vaCODINTINTERFAZ,
                        vaSOCIEDAD,
                        vaCURRENCY,
                        nuIdentificador);

            --<<
            --Se lanza la Exepcion
            -->>
            if (nuRet <> 0) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(vaCODINTINTERFAZ,'No se puede ejecutar fnuGeneldci_encaintesap: ',vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                raise Error;
            end if;

       end if;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;

    IF (nuRet <> 0) THEN
      RAISE ERROR;
    END IF;

    nuRet := ldci_pkinterfazsap.fnuINSEINTESAPCARTE;
    IF (nuRet <> 0) THEN
      RAISE ERROR;
    END IF;

    -- Asienta registros
    commit;
    --<<
    --Borrado de la tabla
    -->>
    vtycuLDCI_INCOLIQU.DELETE;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapReclaCartera] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapReclaCartera] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
    END  fnuGeneDocuSapReclaCartera;


  FUNCTION fnuGeneDocuSapReclaCarteraRO(vaTipoInterfaz    ldci_reclacartntesap.tipointerfaz%TYPE,
                                        nuano          IN ldci_reclacartntesap.anio%TYPE,
                                        numes          IN ldci_reclacartntesap.mes%TYPE,
                                        nuIclinudo     IN ldci_incoliqu.iclinudo%TYPE,
                                        vaMensInte     IN VARCHAR2)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSapReclaCarteraRO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 31-07-2014
     DESCRIPCION  : Copia del m?todo fnuGeneDocuSapReclaCartera
                    funcion que se encarga de armar el resumen de la interfaz

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor                 Fecha        Descripcion
    --------            -----------  -------------------------------------------------
    Dcardona            06-Oct-2015  SAO: 338943 Se cambia la variable que se env?a en el detalle de interfaz
                                      para que se env?e la variable TXTPOSCN de ldci_incoliqu en lugar
                                      de la variable vaMensInte de enrada de la funci?n
    cgonzalezv          30/10/2015    SAO 340484: Cambio de tipo de documento para la interfaz
                                                  de provision consumo NO regulado LC por L5C
    Samuel Pacheco      08/08/2018    CASO 200-1406: La variable NuIndEnca sera concatenada en el servicio
                                                     del encabezado (fnuGeneldci_encaintesap) y
                                                     detalle (ldci_pkinterfazsap.fnuLDCI_DETAINTESAP)

  ************************************************************************/
  RETURN NUMBER
  IS

    --<<
    --Seleccion de datos del resumen de la interfaz de Reclasificacion Cartea
    -->>
    CURSOR cuLdci_incoliqu
    IS
    SELECT clavcont, clasecta, indiccme, indiciva, condpago, TRUNC(fechbase) fechbase, reffactr,
           Round(SUM(baseimpt)) baseimpt, centroco, ordenint, cantidad, asignacn, txtposcn, centrobe,
           segmento, objcosto, clavref1, clavref2, clavref3, sociedgl, material, tiporetc, indretec,
           baseretc, cod_centrobenef, cod_clasifconta, TRUNC(fechvalor) fechvalor, ctadiv,
           Round(SUM(impomtrx)) impomtrx, Round(SUM(impomsoc)) impomsoc, ledgers
      FROM ldci_incoliqu
     WHERE iclinudo = nuIclinudo
     GROUP BY clavcont, clasecta, indiccme, indiciva, condpago, TRUNC(fechbase), reffactr,
              centroco, ordenint, cantidad, asignacn, txtposcn, centrobe, segmento, objcosto,
              clavref1, clavref2, clavref3, sociedgl, material, tiporetc, indretec, baseretc,
              cod_centrobenef, cod_clasifconta, TRUNC(fechvalor), ctadiv, ledgers
     ORDER BY cod_centrobenef, impomtrx;

    TYPE tycuLdci_incoliqu IS TABLE OF cuLdci_incoliqu%ROWTYPE INDEX BY BINARY_INTEGER;
    vtycuLdci_incoliqu tycuLdci_incoliqu;

    --<<
    -- Variables
    -->>
    contador           NUMBER := 0;
    indice             NUMBER := 1;
    nuRet              NUMBER;
    vaClave            LDCI_INCOLIQU.CLAVCONT%TYPE;
    nuLimite           NUMBER := 998;
    nuIdentificador    NUMBER;

  BEGIN

    --Cuando la interfaz es una Provision de CEOGAS, en caso contratio queda el tipo de interfas que llega
    -- sao 340484: Cambio tipo documento de LC por L5C
    IF (vaTipoInterfaz <> 'L5C') THEN
        vaCODINTINTERFAZ := vaTipoInterfaz;
    ELSE
        vaCODINTINTERFAZ := 'L5';
    END IF;

    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);

    vtycuLDCI_INCOLIQU.delete;

    --<<
    --Se Realiza el borrado de los datos cada vez que se genera la provision, para
    --evitar duplicidad de la informaci?n
    -->>
    DELETE FROM LDCI_RECLACARTNTESAP a
     WHERE a.anio = nuano
       AND a.mes  = numes
       AND a.tipointerfaz = vaTipoInterfaz;
    -- Asienta registros
    COMMIT;


    OPEN cuLDCI_INCOLIQU;
    FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
    CLOSE cuLDCI_INCOLIQU;

    sbIndice := 1;
    nuIdentificador := seq_ldci_encaintesap.nextval;
    -- Busca el ID asignado para el encabezado
    if NOT tbENCABEZADO.exists(sbIndice) then
        tbENCABEZADO(sbIndice) := nuIdentificador;
        dbms_output.put_Line('Llave '||sbIndice||' '||nuIdentificador);
    END if;

    FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP
        contador := contador+1;
        --<<
        --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
        -->>
        /*CASO 200-1406
        Antes
               vtycuLDCI_INCOLIQU(i).TXTPOSCN, -- Dcardona: [06-10-2015] SAO 338943 - Se cambia la variable actual por el texto de INCOLIQU
        Despues
               vtycuLDCI_INCOLIQU(i).TXTPOSCN||'-'||indice, -- Dcardona: [06-10-2015] SAO 338943 - Se cambia la variable actual por el texto de INCOLIQU
        -------------------*/
        nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                indice,
                                                vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                null,
                                                vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                null,
                                                null,
                                                null,
                                                null,
                                                null,
                                                vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                null,
                                                vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                vtycuLDCI_INCOLIQU(i).TXTPOSCN||'-'||indice, -- Dcardona: [06-10-2015] SAO 338943 - Se cambia la variable actual por el texto de INCOLIQU
                                                vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                null,
                                                null,
                                                vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                null,
                                                null,
                                                null,
                                                null,
                                                null,
                                                nulL,
                                                vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA,
                                                nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>
        IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaTipoInterfaz,'No se puede ejecutar fnuLDCI_DETAINTESAP :['||vaTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTipoInterfaz,USER,USERENV('TERMINAL'));
          --RAISE ERROR;
        END IF;

        --<<
        --Se Hace Cambio de Claves para la Reversion de la provision en el proximo mes
        -->>
        IF (vtycuLDCI_INCOLIQU(i).CLAVCONT='40') THEN
             vaClave:='50';
          ELSE
             vaClave:='40';
        END IF;

        --<<
        --Generacion de los detalles de la interfaz en la tabla LDCI_RECLACARTNTESAP
        -->>
        IF ( instr(vtycuLDCI_INCOLIQU(i).IMPOMTRX,'PCON_R') = 0 ) then
            nuRet := ldci_pkinterfazsap.fnuGeneLDCI_RECLACARTINTESAP(vaTipoInterfaz,
                                                    nuano,
                                                    numes,
                                                    nuICLINUDO,
                                                    indice,
                                                    vaClave,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    null,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    null,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    vtycuLDCI_INCOLIQU(i).TXTPOSCN, -- Dcardona: [06-10-2015] SAO 338943 - Se cambia la variable actual por el texto de INCOLIQU
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    null,
                                                    null,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA
                                                    );
            END if;

        --<<
        --Se lanza la Exepcion
        -->>
        IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaTipoInterfaz,'No se puede ejecutar fnuGeneLDCI_RECLACARTINTESAP :['||vaTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTipoInterfaz,USER,USERENV('TERMINAL'));
          --RAISE ERROR;
        END IF;

        IF( contador = nuLimite) then --Cuando se llega a 998 Registros, se hace el cambio


            /*Se crea el dato del encabezado*/
            --<<
            --Insercion de datos en la tabla vtyldci_encaintesap
            -->>
            /*CASO 200-1406
            Antes
                  vaMensInte||'-'||nuICLINUDO,
                  vaMensInte||'-'||nuICLINUDO,
            Despues
                  vaMensInte||'-'||nuICLINUDO||'-'||indice,
                  vaMensInte||'-'||nuICLINUDO||'-'||indice,
            -------------------*/
            nuRet := ldci_pkinterfazsap.fnuGeneldci_encaintesap(nuICLINUDO,
                                                indice,
                                                null,
                                                nuICLINUDO,
                                                TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                                TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                                vtycuLDCI_INCOLIQU(i).ledgers,
                                                vaMensInte||'-'||nuICLINUDO||'-'||indice,
                                                vaMensInte||'-'||nuICLINUDO||'-'||indice,
                                                vaCODINTINTERFAZ,
                                                ldci_pkinterfazsap.vaSOCIEDAD,
                                                ldci_pkinterfazsap.vaCURRENCY,
                                                nuIdentificador);
            nuIdentificador := seq_ldci_encaintesap.nextval;

            --<<
            --Se lanza la Exepcion
            -->>
            if (nuRet <> 0) then
               LDCI_pkTrazaInterfaces.pRegiMensaje(vaTipoInterfaz,'No se puede ejecutar fnuGeneldci_encaintesap: ',vaTipoInterfaz,USER,USERENV('TERMINAL'));
                --raise Error;
            end if;

            contador := 0;
            indice := indice+1;
        END IF;
    END LOOP;

    IF (contador>1) then
      /*Se crea el dato del encabezado Para el ultimo grupo, cuando el bloque no es en cantidad exacta*/

        -- identificador es el mismo del encabezado
        /*CASO 200-1406
        Antes
              vaMensInte||'-'||nuICLINUDO,
              vaMensInte||'-'||nuICLINUDO,
        Despues
              vaMensInte||'-'||nuICLINUDO||'-'||indice,
              vaMensInte||'-'||nuICLINUDO||'-'||indice,
        -------------------*/

        nuRet := ldci_pkinterfazsap.fnuGeneldci_encaintesap(nuICLINUDO,
                    indice,
                    null,
                    nuICLINUDO,
                    TO_CHAR(SYSDATE, 'DDMMYYYY'),
                    TO_CHAR(SYSDATE, 'DDMMYYYY'),
                    vtycuLDCI_INCOLIQU(vtycuLDCI_INCOLIQU.last).ledgers,
                    vaMensInte||'-'||nuICLINUDO||'-'||indice,
                    vaMensInte||'-'||nuICLINUDO||'-'||indice,
                    vaCODINTINTERFAZ,
                    ldci_pkinterfazsap.vaSOCIEDAD,
                    ldci_pkinterfazsap.vaCURRENCY,
                    nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>
        if (nuRet <> 0) then
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaTipoInterfaz,'No se puede ejecutar fnuGeneldci_encaintesap: ',vaTipoInterfaz,USER,USERENV('TERMINAL'));
            raise Error;
        end if;

    end if;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;

    IF (nuRet <> 0) THEN
      RAISE ERROR;
    END IF;

    nuRet := ldci_pkinterfazsap.fnuINSEINTESAPCARTE;
    IF (nuRet <> 0) THEN
      RAISE ERROR;
    END IF;

    -- Asienta registros
    commit;
    --<<
    --Borrado de la tabla
    -->>
    vtycuLDCI_INCOLIQU.DELETE;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapReclaCarteraRO] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(vaTipoInterfaz,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapReclaCarteraRO] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(vaTipoInterfaz,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
    END  fnuGeneDocuSapReclaCarteraRO;

  FUNCTION fnuGeneDocuSap_INGRESOS(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2,
                          CtaIva in varchar2,
                          sbtipointerfaz in varchar2)
  return number
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSap_INGRESOS
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor                 Fecha       Descripcion
    Samuel Pacheco      08/08/2018    CASO 200-1406: La variable NuIndEnca sera concatenada en el servicio
                                                     del encabezado (fnuGeneldci_encaintesap) y
                                                     detalle (ldci_pkinterfazsap.fnuLDCI_DETAINTESAP)
  ************************************************************************/
  IS

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
   CURSOR cuAGRUPACIONENCABEZADO is
       SELECT CLASI_IVA, ledgers FROM (
         SELECT A.COD_CLASIFCONTA CLASI_IVA, ledgers
         FROM LDCI_INCOLIQU A
         WHERE iclinudo = nuICLINUDO)
         GROUP BY CLASI_IVA, ledgers;

     TYPE tycuAGRUPACIONENCABEZADO IS TABLE OF cuAGRUPACIONENCABEZADO%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACIONENCABEZADO tycuAGRUPACIONENCABEZADO;

     CURSOR cuAGRUPACION is
         SELECT COD_CLASIFCONTA,A.COD_CLASIFCONTA CLASI_IVA, ledgers
         FROM LDCI_INCOLIQU A
         WHERE iclinudo = nuICLINUDO
         GROUP BY COD_CLASIFCONTA, ledgers;

     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
     CURSOR cuLDCI_INCOLIQU(nuCOD_CLASIFCONTA   in LDCI_INCOLIQU.COD_CLASIFCONTA%type ,
                            sbledgers in LDCI_INCOLIQU.ledgers%type) IS
      SELECT CLASI_IVA COD_CLASIFCONTA,CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, round(SUM(BASEIMPT)) BASEIMPT,
                 CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                 CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
                 COD_CENTROBENEF,  FECHVALOR, CTADIV,round(sum(IMPOMTRX) )IMPOMTRX,
                 round(sum(IMPOMSOC)) IMPOMSOC
          FROM (
          SELECT A.COD_CLASIFCONTA CLASI_IVA,
            A.*
            FROM LDCI_INCOLIQU A
            WHERE ICLINUDO =  nuICLINUDO
            AND COD_CLASIFCONTA =nuCOD_CLASIFCONTA
            AND ledgers = sbledgers
            )
          GROUP BY CLASI_IVA ,CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
              CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
              CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
              COD_CENTROBENEF,  FECHVALOR, CTADIV
          ORDER BY COD_CENTROBENEF ;

     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     nuIdentificador number;

  begin

    /*Genera encabezados por cada Clasificador que agrupo*/
    OPEN cuAGRUPACIONENCABEZADO;
    FETCH cuAGRUPACIONENCABEZADO BULK COLLECT INTO vtycuAGRUPACIONENCABEZADO;
    CLOSE cuAGRUPACIONENCABEZADO;

    FOR j IN vtycuAGRUPACIONENCABEZADO.first..vtycuAGRUPACIONENCABEZADO.last loop
        IF(vtycuAGRUPACIONENCABEZADO.COUNT>0) THEN
        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        --nuIndEnca := nuIndEnca + 1;
        nuIndEnca := vtycuAGRUPACIONENCABEZADO(j).CLASI_IVA ;

        sbIndice := vtycuAGRUPACIONENCABEZADO(j).CLASI_IVA||','||vtycuAGRUPACIONENCABEZADO(j).ledgers;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            nuIdentificador := seq_ldci_encaintesap.nextval;
            tbENCABEZADO(sbIndice) := nuIdentificador;
        END if;

        /*CASO 200-1406
        Antes
              vaMensInte||'-'||nuICLINUDO,
              vaMensInte||'-'||nuICLINUDO,
        Despues
              vaMensInte||'-'||nuICLINUDO||'-'||nuIndEnca,
              vaMensInte||'-'||nuICLINUDO||'-'||nuIndEnca,
        -------------------*/
        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                        nuIndEnca,
                                        null,
                                        vtycuAGRUPACIONENCABEZADO(j).CLASI_IVA,
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
																				vtycuAGRUPACIONENCABEZADO(j).ledgers,
                                        vaMensInte||'-'||nuICLINUDO||'-'||nuIndEnca,
                                        vaMensInte||'-'||nuICLINUDO||'-'||nuIndEnca,
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        ldci_pkinterfazsap.vaCURRENCY,
                                        nuIdentificador);
        --<<
        --Se lanza la Exepcion
        -->>
       if (nuRet <> 0) then
            LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error en la ejecuci?n de fnuGeneldci_encaintesap: ['||nuICLINUDO||']'||sbSentencia||' '||vtycuAGRUPACIONENCABEZADO(j).ledgers,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbtipointerfaz,USER,USERENV('TERMINAL'));
            raise Error;
        end if;
       END IF;
    END LOOP;

    --<<
    --seleccion de datos de la agrupacion
    -->>
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop

        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>
        OPEN cuLDCI_INCOLIQU(vtycuAGRUPACION(j).cod_clasifconta, vtycuAGRUPACION(j).ledgers);
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        IF(vtycuLDCI_INCOLIQU.COUNT>0) THEN

        -- Asigna la llave para el detalle
        sbIndice := vtycuAGRUPACION(j).cod_clasifconta||','||vtycuAGRUPACION(j).ledgers;
        nuIdentificador := tbENCABEZADO(sbIndice);

        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        --nuIndEnca := nuIndEnca + 1;
        nuIndEnca := vtycuAGRUPACION(j).CLASI_IVA ;
        --pkregidepu.pRegiMensaje('nuICLINUDO',nuICLINUDO||'-'||nuIndEnca,'XML');

        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP
          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    vaMensInte||'-'||nuICLINUDO||'-'||nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    vtycuLDCI_INCOLIQU(i).COD_CLASIFCONTA,
                                                    nuIdentificador);
          --<<
          --Se lanza la Exepcion
          -->>
          IF (nuRet <> 0) THEN
              LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error en la ejecuci?n de fnuLDCI_DETAINTESAP :['||nuICLINUDO||'] '||vtycuLDCI_INCOLIQU(i).CLAVCONT,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbtipointerfaz,USER,USERENV('TERMINAL'));
              RAISE ERROR;
          END IF;

        END LOOP;

        --<<
        --Borrado de la tabla en memoria de ldc_incoliqu
        -->>
        vtycuLDCI_INCOLIQU.delete;
        END IF;

    END LOOP;

    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;
    vtycuAGRUPACIONENCABEZADO.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;

    IF (nuRet <> 0) THEN
       RAISE ERROR;
    END IF;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap_INGRESOS] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap_INGRESOS] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
   END fnuGeneDocuSap_INGRESOS;


  FUNCTION fnuGeneDocuSap_PAGOS(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type,
                          vaMensInte   in varchar2,
                          sbTipoInterfaz    in ldci_tipointerfaz.tipointerfaz%type)
  return number
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSap_PAGOS
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor                       Fecha           Descripcion
    Oscar Restrepo		15/12/2014	Aranda 4255 : Modificaci?n en la agrupaci?n para que los recaudos sean
                                                agrupados por la fecha real del pago, en el cursor cuAGRUPACION se adiciona
                                                el campo FECHVALOR.
                                                En el cursor cuLDCI_INCOLIQU se adiciona el campo inFECHVALOR
    Dcardona          15/02/2015  Aranda: 5980
                                  Se ajusta para que en el encabezado de la interfaz no se env?e SYSDATE sino la fecha base de
                                  la tabla INCOLIQU, de tal forma que en GDO se env?e SYSDATE y en las dem?s gaseras se env?e
                                  la fecha de grabaci?n de los pagos que se est?n procesando.
    Samuel Pacheco    08/08/2018  CASO 200-1406: La variable NuIndEnca sera concatenada en el servicio
                                                 del encabezado (fnuGeneldci_encaintesap) y
                                                 detalle (ldci_pkinterfazsap.fnuLDCI_DETAINTESAP)
  **************************************************************************************************************/
  IS
     CURSOR cuAGRUPACION
     IS
     SELECT NITBANRE,FECHVALOR, COUNT(*) CANT-- Aranda 4255
     FROM (SELECT NITBANRE, CUPON,FECHVALOR
             FROM LDCI_INCOLIQU
             WHERE ICLINUDO = nuICLINUDO

             GROUP BY NITBANRE,FECHVALOR, CUPON-- Aranda 4255
            )
     GROUP BY NITBANRE,FECHVALOR ;-- Aranda 4255

     vaGrupo VARCHAR2(100);
     nuCanGrupo NUMBER:=0;
     nuCanCupon NUMBER:=0;
     nuValCupon number;

     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
     CURSOR cuLDCI_INCOLIQU(nuNITBANRE   in LDCI_INCOLIQU.NITBANRE%type,
                            nuInicio     number,
                            nuFinal      NUMBER,
                            inFECHVALOR varchar2)-- Aranda 4255
     IS
     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, SUM(BASEIMPT) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
            COD_CENTROBENEF,  trunc(FECHVALOR) FECHVALOR, CTADIV,sum(IMPOMTRX) IMPOMTRX,
            sum(IMPOMSOC) IMPOMSOC ,comprobante
            FROM (SELECT DENSE_RANK() OVER (ORDER BY CUPON) AGRUPADOR, CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, round(SUM(BASEIMPT)) BASEIMPT,
                          CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                          CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
                          COD_CENTROBENEF,  trunc(FECHVALOR) FECHVALOR, CTADIV,round(sum(IMPOMTRX)) IMPOMTRX,
                          round(sum(IMPOMSOC)) IMPOMSOC,comprobante
                     FROM LDCI_INCOLIQU
                    WHERE ICLINUDO = nuICLINUDO
                      AND NITBANRE = nuNITBANRE
                      AND FECHVALOR = inFECHVALOR -- Aranda 4255
                   GROUP BY CUPON, CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
                          CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                          CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
                          COD_CENTROBENEF,  trunc(FECHVALOR), CTADIV,comprobante)
      WHERE AGRUPADOR >= nuInicio
        AND AGRUPADOR <= nuFinal
      GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
               CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
               CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
               COD_CENTROBENEF,  trunc(FECHVALOR), CTADIV,comprobante;

     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     nuInicio    number := 1;
     nuFinal     number := 0;
     nuDocu      integer := 0;
     vaGeneEnca  varchar2(1) := 'S';
    nuRepeticion integer :=1;
    nuIdentificador number;

  begin

    --<<
    --seleccion de datos de la agrupacion
    -->>
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;

    --<<
    --Seleccion de grupos para generacion de documentos grupado por Nit de entidad de Recaudo
    -->>

    FOR w IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop


        nuInicio := 1;
        nuFinal  := 1;

        --<<
        --Cantidad de documentos a generar por entidad
        -->>
        nuDocu := trunc(vtycuAGRUPACION(w).Cant/50) + 1;
        vaGeneEnca := 'S';

        FOR J IN 1..nuDocu LOOP

           vaGeneEnca := 'S';
           -- Genera Identificador por cada encabezado
           nuIdentificador := seq_ldci_encaintesap.nextval;

           nuFinal := j * 50;
           vtycuLDCI_INCOLIQU.delete;

           OPEN cuLDCI_INCOLIQU(vtycuAGRUPACION(w).NITBANRE, nuInicio, nuFinal,vtycuAGRUPACION(w).FECHVALOR); -- Aranda 4255
           FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
           CLOSE cuLDCI_INCOLIQU;

           nuInicio := j * 50 + 1;

           IF (vtycuLDCI_INCOLIQU.COUNT > 0) THEN

               FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP
                     --<<
                     --Genera el encabezado por cada lote de documentos
                     -->>
                     IF (vaGeneEnca = 'S') THEN

                        -- Obtiene Libro
                        sbLEDGERS := fsbGetLedgers(sbTipoInterfaz , vtycuLDCI_INCOLIQU(i).comprobante);

                        /*CASO 200-1406
                        Antes
                               vaMensInte||'-'||nuICLINUDO,
                               vaMensInte||'-'||nuICLINUDO,
                        Despues
                               vaMensInte||'-'||nuICLINUDO||'-'||(nuRepeticion + J),
                               vaMensInte||'-'||nuICLINUDO||'-'||(nuRepeticion + J),
                        -------------------*/

                        nuRet := ldci_pkinterfazsap.fnuGeneldci_encaintesap(nuICLINUDO,
                                                         nuRepeticion + J,
                                                         null,
                                                         nuRepeticion + J,
                                                         vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                         vtycuLDCI_INCOLIQU(i).FECHBASE, -- cgonzalezv: Ara 6744 Fecha de grabacion del pago para todas las gaseras
                                                         sbLEDGERS,
                                                         vaMensInte||'-'||nuICLINUDO||'-'||(nuRepeticion + J),
                                                         vaMensInte||'-'||nuICLINUDO||'-'||(nuRepeticion + J),
                                                         ldci_pkinterfazsap.vaTIPOINTERFAZRECAUDO ,
                                                         ldci_pkinterfazsap.vaSOCIEDAD,
                                                         ldci_pkinterfazsap.vaCURRENCY,
                                                         nuIdentificador);

                        vaGeneEnca := 'N';

                        if (nuRet <> 0) then
                            ldci_pkinterfazsap.vaMensError :=  'Error ejecutando fnuGeneldci_encaintesap '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
                            LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
                            raise Error;
                        end if;

                    END IF;
                    --<<
                    --Genera la informacion del detalle de cada interfaz
                    -->>
                    /*CASO 200-1406
                    Antes
                           vaMensInte||'-'||nuICLINUDO,
                    Despues
                           vaMensInte||'-'||nuICLINUDO||'-'||(nuRepeticion + j),
                    -------------------*/

                    nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                              nuRepeticion + j,
                                              vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                              vtycuLDCI_INCOLIQU(i).CLASECTA,
                                              vtycuLDCI_INCOLIQU(i).INDICCME,
                                              vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                              vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                              vtycuLDCI_INCOLIQU(i).INDICIVA,
                                              vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                              vtycuLDCI_INCOLIQU(i).FECHBASE,
                                              vtycuLDCI_INCOLIQU(i).REFFACTR,
                                              vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                              vtycuLDCI_INCOLIQU(i).CENTROCO,
                                              vtycuLDCI_INCOLIQU(i).ORDENINT,
                                              vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                              vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                              vaMensInte||'-'||nuICLINUDO||'-'||(nuRepeticion + j),
                                              vtycuLDCI_INCOLIQU(i).CENTROBE,
                                              vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                              vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                              vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                              vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                              vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                              vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                              vtycuLDCI_INCOLIQU(i).MATERIAL,
                                              vtycuLDCI_INCOLIQU(i).TIPORETC,
                                              vtycuLDCI_INCOLIQU(i).INDRETEC,
                                              vtycuLDCI_INCOLIQU(i).BASERETC,
                                              vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                              vtycuLDCI_INCOLIQU(i).CTADIV,
                                              vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                              -1,
                                              nuIdentificador);
                    --<<
                    --Se lanza la Excepcion
                    -->>
                    IF (nuRet <> 0) THEN
                        ldci_pkinterfazsap.vaMensError :=  'Error ejecutando fnuLDCI_DETAINTESAP '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
                        LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
                        RAISE ERROR;
                    END IF;
                END LOOP;
          END IF;

      END LOOP;
      nuRepeticion := nuRepeticion + 1000;
    END LOOP;

    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>

    dbms_output.put_Line('Inicia llenado de tablas LDCI_DETAINTESAP y ldci_encaintesap: '||nuICLINUDO);

    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;


    IF (nuRet <> 0) THEN
        ldci_pkinterfazsap.vaMensError :=  'Error ejecutando fnuINSEINTESAP '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       RAISE ERROR;
    END IF;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap_PAGOS] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSap_PAGOS] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
    END fnuGeneDocuSap_PAGOS;

  FUNCTION fnuValidaCuentaMayor (ivacuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%type)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuValidaCuentaMayor
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de validar que la cuenta registrada este registrada
                    en SAP.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuValidaCuenta IS
    SELECT Count(*)
      FROM LDCI_CUENTACONTABLE
     WHERE cuctcodi = ivacuctcodi;

   nuCantidad NUMBER;

  begin

  OPEN cuValidaCuenta;
  FETCH cuValidaCuenta INTO nuCantidad;
  CLOSE cuValidaCuenta;

     IF nuCantidad > 0 THEN

     return(0);

     ELSE

     return(-1);

     END IF;

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuValidaCuentaMayor] - No se pudo validar la cuenta: '||ivacuctcodi||'  '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return(-1);
  end fnuValidaCuentaMayor;

function fnuInterfazAutoretencion(nutimocodi in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                                nuAnio NUMBER,
                                nuMes NUMBER)
RETURN NUMBER
IS
/************************************************************************
 PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
 FUNCION   : fnuInterfazAutoretencion
 AUTOR     : Oscar Restrepo
 FECHA     : 02-11-2013
 DESCRIPCION  : Tiquete:
                funcion que se encarga de armar obtener la informacion de la interfaz
                de Ingreso en SAP.

Parametros de Entrada :
                      -nutimocodi Tipo de interfaz := 'L3'
                      -nuMes Mes para generaci?n de la Interfaz
                      -nuAnio A?o para generaci?n de la Interfaz

Parametros de Salida

Historia de Modificaciones
Autor    Fecha       Descripcion

************************************************************************/

    nuCantidad NUMBER;
    daFecha_Inicio DATE;
    daFecha_Fin DATE;

    CURSOR cuInformacion IS
        SELECT   nutimocodi DocumentoSAP,
                 (select distinct a.rcccpopa from ic_recoclco a where clcrcons=a.rcccclcr and a.rccccuco=dcrccuco) porcent,
                 dcrccons,
                 dcrcecrc,
                 dcrccorc,
                 dcrccuco cuenta,
                 dcrcsign signos,
                 Sum(dcrcvalo) valor,
                 dcrcinad,
                 dcrcfecr,
                 dcrcclcr,
                 dcrcusua,
                 dcrcterm,
                 dcrcprog,
                 dcrcsist,
                 clcrclco clasificador,
                 clcodesc,
                 corccoco Comprobante ,
                 (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                 corctido TipoComprobante,
                 (select tccodesc from ic_ticocont
                      where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                 ) DescTipoComprobante,
                 ecrcfech
    FROM           ic_encoreco
    JOIN           ic_decoreco on (ecrccons = dcrcecrc)
    JOIN           ic_confreco on (dcrccorc = corccons )
    JOIN           ic_clascore on (clcrcons = dcrcclcr)
    JOIN           ic_clascont on (clcrclco=clcocodi)
    WHERE          ecrccoco in (SELECT COD_COMPROBANTE from LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ =nutimocodi)
    AND            ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin
    GROUP BY       clcrcons,
                 dcrccons,
                 dcrcecrc,
                 dcrccorc,
                 dcrccuco,
                 dcrcsign,
                 dcrcinad,
                 dcrcfecr,
                 dcrcclcr,
                 dcrcusua,
                 dcrcterm,
                 dcrcprog,
                 dcrcsist,
                 clcrclco,
                 clcodesc,
                 corccoco ,
                 ecrccoco,
                 corctido,
                 ecrccoco,
                 ecrcfech;


    TYPE tyDatIngresos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyDatIngresos tyDatIngresos;

    --<<
    --definicion de variables
    -->>
    nuRet          NUMBER;
    nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
    vaClave        ldci_claveconta.clavcodi%TYPE;
    iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
    iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
    nuCentBen NUMBER;
    sbOrdInt VARCHAR2(100);
    nuCategoria NUMBER;
    sbSegmento VARCHAR2(200);
    sbDescripcionNit VARCHAR2(200);
    daFECHBASE date;
    sbEsDivergente VARCHAR2(2);
    nuNIT VARCHAR2(100);
    nuCLASECTA number;
    nuASIGNACN number;
    nuCLAVREF1 number;
    sbCLAVREF3  VARCHAR2(100);
    nuCTADIV   number;
    nuCOD_CLASIFCONTA VARCHAR2(100);
    nuLocalidad NUMBER;
    centaerror NUMBER:=0;
    nuError NUMBER:=0;
    nuNitGenRetencion NUMBER;
    vaTXTDes VARCHAR2(200);
    sbInformacion VARCHAR2(2000);
    nuVlrAjuste   NUMBER; -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

BEGIN
    ldci_pkinterfazsap.vaCODINTINTERFAZ:='L3';
    ldci_pkinterfazsap.vaSOCIEDAD:='GDOC';
    ldci_pkinterfazsap.vaCURRENCY:='COP';

    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NITGENAUTORETEN', nuNitGenRetencion, osbErrorMessage);

    --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L3_Limite', nuVlrAjuste, osbErrorMessage);

    --<<
    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ejecutar fnuInterfazAutoretencion interfaz: '||nutimocodi||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        raise Error;
     END IF;

    --<<
    --Se valida la existencia de las fechas de cierre comercial y se obtienen las fecha de inicio
    --y final del periodo
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetFechaCierre(nuAnio,nuMes,daFecha_Inicio,daFecha_Fin);

     IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede obtener Fechas para cierre comercial en el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide la tabla LDC_CIERCOME',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
            raise Error;
     END IF;
     --<<
     --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
     -->>
     OPEN cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Registros a Procesar ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Interfaz  Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatIngresos
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatIngresos.first IS null);

        --<<
        --Se evalua que la consulta contenga registros, en caso contratio retorna -1
        -->>
        IF (vtyDatIngresos.count > 0) THEN
           --<<
           --Obtencion numero de documento
           -->>
           FOR i IN vtyDatIngresos.First..vtyDatIngresos.Last LOOP

              sbInformacion := vtyDatIngresos(i).dcrccons||';'||vtyDatIngresos(i).cuenta||';'||vtyDatIngresos(i).comprobante||';'||vtyDatIngresos(i).clasificador||';'||vtyDatIngresos(i).dcrcinad;
              vaTXTDes := vtyDatIngresos(i).DescComprobante;
              vaClave := NULL;

              --<<
              --obtiene la clave contable a partir de la cuenta
              -->>
              vaClave := fvaGetClaveContaIngreso(vtyDatIngresos(i).clasificador,vtyDatIngresos(i).cuenta, vtyDatIngresos(i).signos,vtyDatIngresos(i).porcent, iovactcaicme, iovactcainiv);

              --<<
              --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
              -->>
              if (vaClave is null or vaClave<0) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede obtener la clave contable para la Interfaz ['||vaTXTDes|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatIngresos(i).TipoComprobante||'] Comprobante ['||vtyDatIngresos(i).Comprobante||'] Clasificador ['||vtyDatIngresos(i).clasificador|| '] Cuenta  ['||vtyDatIngresos(i).cuenta||'] Signo ['||vtyDatIngresos(i).signos||'] Porcentaje '||vtyDatIngresos(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                centaerror:=centaerror+1;
              end if;

              --<<
              --Se Obtiene la Categoria Y  la localidad
              -->>
              if vtyDatIngresos(i).dcrcinad = '|||||||||||||||||||||||||||||||||||||||||||||' then
                nuLocalidad := 18;
                nuCategoria := 1;
              else
                nuLocalidad :=ldci_pkinterfazsap.fvaGetData(17,vtyDatIngresos(i).dcrcinad,'|');
                nuCategoria :=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatIngresos(i).dcrcinad,'|'),NULL);
              END if;

              nuCOD_CLASIFCONTA:=vtyDatIngresos(i).clasificador;

              if vtyDatIngresos(i).dcrcinad = '|||||||||||||||||||||||||||||||||||||||||||||' then
                nuNIT:= nuNitGenRetencion;
              else
                nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(2,vtyDatIngresos(i).dcrcinad,'|'),fnuGetNitGenerico(nuCOD_CLASIFCONTA)),null);
              END if;


              nuNIT:=replace(nuNIT,'-','');
              sbDescripcionNit := ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
              sbEsDivergente:=fnuGetDivergente(vaClave);

              sbOrdInt:=null;

                if NOT tbCentroBeneficio.exists(nuLocalidad||nuCategoria) then
                    nuCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebeNew(nuLocalidad,nuCategoria),NULL);
                    -- Cache para almacenar los diferentes centros de beneficio
                    tbCentroBeneficio(nuLocalidad||nuCategoria) :=  nuCentBen;
                else
                    nuCentBen:= tbCentroBeneficio(nuLocalidad||nuCategoria);
                END if;

                if(nuCentBen = 0 or nuCentBen is null) then
                  sbSegmento:='N/A';
                  LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,vaTXTDes||' Interfaz [ '||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Centro de Beneficio para la Localidad  :['||nuLocalidad||'] Con Categoria ['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                  centaerror:=centaerror+1;
                else
                  sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
                end if;

                  nuCLASECTA := vtyDatIngresos(i).cuenta;
                  nuASIGNACN := nuNitGenRetencion;
                  nuCLAVREF1 := nuNitGenRetencion;
                  sbCLAVREF3 := ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
                  nuCTADIV   := null;

                -- Obtiene el Ledger
                sbLEDGERS := fsbGetLedgers(nutimocodi, vtyDatIngresos(i).comprobante);
                    --<<
                    --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                    -->>
                  nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(nutimocodi,
                              ldci_pkinterfazsap.nuSeqICLINUDO,
                              TRUNC(sysdate),
                              user,
                              'SERVER',
                              TRUNC(sysdate),
                              nuCOD_CLASIFCONTA,
                              vaClave,
                              nuCLASECTA,
                              iovactcaicme,
                              vtyDatIngresos(i).VALOR,
                              vtyDatIngresos(i).VALOR,
                              iovactcainiv,
                              null,
                              vaTXTDes ||' '||ldci_pkinterfazsap.nuSeqICLINUDO,
                              null,
                              null,
                              ldci_pkinterfazsap.vaSOCIEDAD,
                              null,
                              null,
                              null,
                              null,
                              i,
                              nuCTADIV,
                              nuASIGNACN,
                              nuCLAVREF1,
                              sbCLAVREF3,
                              '',
                              nuCentBen,
                              sbOrdInt,
                              sbSegmento,
                              NULL,
                              vtyDatIngresos(i).comprobante,
                              sbLEDGERS,
                              vtyDatIngresos(i).dcrcinad);

              --<<
              --Se lanza la Exepcion sin la funcion no se ejecuto con exito
              -->>
              IF (nuRet <> 0) THEN
                  LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede obtener la informacion fnuInterfazAutoretencion :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
                  RAISE ERROR;
              END IF;

           END LOOP;
        ELSE
             --LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'La consulta no tiene resultados para la interfaz :['||nutimocodi||'] con el rango de fechas :['||Fecha_Inicio||'] , ['||Fecha_Fin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
             return 1;
        END IF;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

        --<<
        --Se lanza la Exepcion sin la funcion no se ejecuto con exito
        -->>
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        /*<< Se libera el objeto utilizado para la obtencion de la informacion de Ingresos >> */
        vtyDatIngresos.delete;

    END loop;

    close cuInformacion;

    --<<
    --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
    -->>
    vtyDatIngresos.delete;

   --<<
   --Cuando falta al menos un centro de beneficio se aborta el resto del proceso
   -->>
   IF (centaerror>0) THEN
    -- Retorna con error, se registro en log
    RETURN -1;
   END IF;

   -- Asienta registros
   commit;

     --<<
     --Genera la informacion de los documentos para SAP de la interfaz de INGRESOS
     -->>
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaCuentaIva',vaCUENTAIVA, osbErrorMessage);
    nuRet := ldci_pkinterfazsap.fnuGeneDocuSap_Autoreten(ldci_pkinterfazsap.nuSeqICLINUDO);

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
     IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuGeneDocuSap_Autoreten :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
          RAISE ERROR;
     END IF;

     --<<
      --Se valida para corregir el descuadre por cada documento
      -->>
      nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,ldci_pkinterfazsap.vaCODINTINTERFAZ,nuVlrAjuste);
      IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
          RAISE ERROR;
      END IF;

     --<<
     --Si es satifactorio todo el proceso, se realiza el envio a SAP
     --Procedimiento Hector Dominguez
     -->>
    IF (vaEnviaIntefazSAP = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Se genero con exito en interfaz ingresos - L3 AUTORETENCION ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
   --<<
   ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
   -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S',nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede Registrar la interfaz fnuRegistraInterfazAnioMes :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

     return(0);

EXCEPTION
WHEN TOO_MANY_ROWS THEN
   ldci_pkinterfazsap.vaMensError := '[fnuInterfazAutoretencion] - Validar la Configuracion de Registo, tiene mas porcentajes de los esperados para el calculo. '||sbInformacion||' '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
   LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error fnuInterfazAutoretencion :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
   return(-1);
WHEN OTHERS THEN
   ldci_pkinterfazsap.vaMensError := '[fnuInterfazAutoretencion] - No se pudo validar la cuenta. '||sbInformacion||' '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
   LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error fnuInterfazAutoretencion :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
   return(-1);
end fnuInterfazAutoretencion;

FUNCTION fnuInterfazAutoretencionRO(nutimocodi IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                    nuAnio     NUMBER,
                                    nuMes      NUMBER)
RETURN NUMBER
IS
/************************************************************************
 PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
 FUNCION   : fnuInterfazAutoretencionRO
 AUTOR     : Diego Andr?s Cardona Garc?a
 FECHA     : 28-07-2014
 DESCRIPCION  : Copia del m?todo fnuInterfazAutoretencion.
                Funcion que se encarga de armar obtener la informacion de la interfaz
                de Ingreso en SAP.

Parametros de Entrada :
  nutimocodi  Tipo de interfaz := 'L3'
  nuMes       Mes para generaci?n de la Interfaz
  nuAnio      A?o para generaci?n de la Interfaz

Parametros de Salida

Historia de Modificaciones
Autor    Fecha       Descripcion

************************************************************************/

    nuCantidad NUMBER;
    daFecha_Inicio DATE;
    daFecha_Fin DATE;

    CURSOR cuInformacion IS
        SELECT   nutimocodi DocumentoSAP,
                 (select distinct a.rcccpopa from ic_recoclco a where clcrcons=a.rcccclcr and a.rccccuco=dcrccuco) porcent,
                 dcrccons,
                 dcrcecrc,
                 dcrccorc,
                 dcrccuco cuenta,
                 dcrcsign signos,
                 Sum(dcrcvalo) valor,
                 dcrcinad,
                 dcrcfecr,
                 dcrcclcr,
                 dcrcusua,
                 dcrcterm,
                 dcrcprog,
                 dcrcsist,
                 clcrclco clasificador,
                 clcodesc,
                 corccoco Comprobante ,
                 (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                 corctido TipoComprobante,
                 (select tccodesc from ic_ticocont
                      where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                 ) DescTipoComprobante,
                 ecrcfech
    FROM           ic_encoreco
    JOIN           ic_decoreco on (ecrccons = dcrcecrc)
    JOIN           ic_confreco on (dcrccorc = corccons )
    JOIN           ic_clascore on (clcrcons = dcrcclcr)
    JOIN           ic_clascont on (clcrclco=clcocodi)
    WHERE          ecrccoco in (SELECT COD_COMPROBANTE from LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ =nutimocodi)
    AND            ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin
    GROUP BY       clcrcons,
                 dcrccons,
                 dcrcecrc,
                 dcrccorc,
                 dcrccuco,
                 dcrcsign,
                 dcrcinad,
                 dcrcfecr,
                 dcrcclcr,
                 dcrcusua,
                 dcrcterm,
                 dcrcprog,
                 dcrcsist,
                 clcrclco,
                 clcodesc,
                 corccoco ,
                 ecrccoco,
                 corctido,
                 ecrccoco,
                 ecrcfech;


    TYPE tyDatIngresos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyDatIngresos tyDatIngresos;

    --<<
    --definicion de variables
    -->>
    nuRet          NUMBER;
    nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
    vaClave        ldci_claveconta.clavcodi%TYPE;
    iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
    iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
    nuCentBen NUMBER;
    sbOrdInt VARCHAR2(100);
    nuCategoria NUMBER;
    sbSegmento VARCHAR2(200);
    sbDescripcionNit VARCHAR2(200);
    daFECHBASE date;
    sbEsDivergente VARCHAR2(2);
    nuNIT VARCHAR2(100);
    nuCLASECTA number;
    nuASIGNACN number;
    nuCLAVREF1 number;
    sbCLAVREF3  VARCHAR2(100);
    nuCTADIV   number;
    nuCOD_CLASIFCONTA VARCHAR2(100);
    nuLocalidad NUMBER;
    centaerror NUMBER:=0;
    nuError NUMBER:=0;
    nuNitGenRetencion NUMBER;
    vaTXTDes VARCHAR2(200);
    sbInformacion varchar2(2000);
    vaEnviaInterfazAU    VARCHAR2(1); --Parametro para el control de envio de Interfaces a SAP
    nuVlrAjuste   NUMBER; -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

    --<< CA 200-1301
    -- Ludycom 20-10-2017
    --
    nuBAseretL3  NUMBER;

BEGIN

    ldci_pkinterfazsap.vaCodintinterfaz := nutimocodi;
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);

    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'NITGENAUTORETEN', nuNitGenRetencion, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'ENVIAINTERFAZAU', vaEnviaInterfazAU, osbErrorMessage);

    --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L3_Limite', nuVlrAjuste, osbErrorMessage);

    --<<
    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ejecutar fnuInterfazAutoretencionRO interfaz: '||nutimocodi||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        raise Error;
     END IF;

    --<<
    --Se valida la existencia de las fechas de cierre comercial y se obtienen las fecha de inicio
    --y final del periodo
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetFechaCierre(nuAnio,nuMes,daFecha_Inicio,daFecha_Fin);

     IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede obtener Fechas para cierre comercial en el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide la tabla LDC_CIERCOME',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
            raise Error;
     END IF;
     --<<
     --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
     -->>
     OPEN cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Registros a Procesar ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Interfaz  Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatIngresos
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatIngresos.first IS null);

        --<<
        --Se evalua que la consulta contenga registros, en caso contratio retorna -1
        -->>
        IF (vtyDatIngresos.count > 0) THEN
           --<<
           --Obtencion numero de documento
           -->>
           FOR i IN vtyDatIngresos.First..vtyDatIngresos.Last LOOP

              sbInformacion := vtyDatIngresos(i).dcrccons||';'||vtyDatIngresos(i).cuenta||';'||vtyDatIngresos(i).comprobante||';'||vtyDatIngresos(i).clasificador||';'||vtyDatIngresos(i).dcrcinad;
              vaTXTDes := vtyDatIngresos(i).DescComprobante;
              vaClave := NULL;

              --<<
              --obtiene la clave contable a partir de la cuenta
              -->>
              vaClave := fvaGetClaveContaIngreso(-1 ,vtyDatIngresos(i).cuenta, vtyDatIngresos(i).signos,vtyDatIngresos(i).porcent, iovactcaicme, iovactcainiv);

              --<<
              --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
              -->>
              if (vaClave is null or vaClave<0) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede obtener la clave contable para la Interfaz ['||vaTXTDes|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatIngresos(i).TipoComprobante||'] Comprobante ['||vtyDatIngresos(i).Comprobante||'] Clasificador ['||vtyDatIngresos(i).clasificador|| '] Cuenta  ['||vtyDatIngresos(i).cuenta||'] Signo ['||vtyDatIngresos(i).signos||'] Porcentaje '||vtyDatIngresos(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                centaerror:=centaerror+1;
              end if;

              --<<
              --Se Obtiene la Categoria Y  la localidad
              -->>
              if vtyDatIngresos(i).dcrcinad = '|||||||||||||||||||||||||||||||||||||||||||||' then
                nuLocalidad := 18;
                nuCategoria := 1;
              else
                nuLocalidad :=ldci_pkinterfazsap.fvaGetData(17,vtyDatIngresos(i).dcrcinad,'|');
                nuCategoria :=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatIngresos(i).dcrcinad,'|'),NULL);
              END if;

              nuCOD_CLASIFCONTA:=vtyDatIngresos(i).clasificador;

/*
              if vtyDatIngresos(i).dcrcinad = '|||||||||||||||||||||||||||||||||||||||||||||' then
                nuNIT:= nuNitGenRetencion;
              else
                nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(2,vtyDatIngresos(i).dcrcinad,'|'),fnuGetNitGenerico(nuCOD_CLASIFCONTA)),null);
              END if;


              nuNIT:=replace(nuNIT,'-','');

              sbDescripcionNit := ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
*/
              sbEsDivergente:=fnuGetDivergente(vaClave);

              sbOrdInt:=null;

                if NOT tbCentroBeneficio.exists(nuLocalidad) then
                    nuCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebeNoCat(nuLocalidad),NULL);
                    -- Cache para almacenar los diferentes centros de beneficio
                    tbCentroBeneficio(nuLocalidad) :=  nuCentBen;
                else
                    nuCentBen:= tbCentroBeneficio(nuLocalidad);
                END if;

                if(nuCentBen = 0 or nuCentBen is null) then
                  sbSegmento:='N/A';
                  LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,vaTXTDes||' Interfaz [ '||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Centro de Beneficio para la Localidad  :['||nuLocalidad||'] Con Categoria ['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                  centaerror:=centaerror+1;
                else
                  sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
                end if;

                  nuCLASECTA := vtyDatIngresos(i).cuenta;
                  nuASIGNACN := nuNitGenRetencion;
                  nuCLAVREF1 := nuNitGenRetencion;
                  sbCLAVREF3 := ldci_pkinterfazsap.fvaGetDescripNit(nuNitGenRetencion);
                  nuCTADIV   := null;

                -- Obtiene el Ledger
                sbLEDGERS := fsbGetLedgers(nutimocodi, vtyDatIngresos(i).comprobante);
                --
                --<< CA 200-1301
                -- Ludycom 20-10-2017
                --
                nuBAseretL3 := 0;
                IF nuCLASECTA like '243695%' THEN
                  nuBAseretL3 := vtyDatIngresos(i).VALOR / (vtyDatIngresos(i).porcent/100);
                END IF;
                --
                -->>

                --<<
                --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                -->>
                  nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(nutimocodi,
                              ldci_pkinterfazsap.nuSeqICLINUDO,
                              TRUNC(sysdate),
                              user,
                              'SERVER',
                              TRUNC(sysdate),
                              nuCOD_CLASIFCONTA,
                              vaClave,
                              nuCLASECTA,
                              iovactcaicme,
                              vtyDatIngresos(i).VALOR,
                              vtyDatIngresos(i).VALOR,
                              iovactcainiv,
                              null,
                              vaTXTDes ||' '||ldci_pkinterfazsap.nuSeqICLINUDO,
                              null,
                              null,
                              ldci_pkinterfazsap.vaSOCIEDAD,
                              null,
                              null,
                              null,
                              --<< CA 200-1301
                              -- Ludycom 20-10-2017
                              --
                              --null,
                              nuBAseretL3,
                              -->>
                              i,
                              nuCTADIV,
                              nuASIGNACN,
                              nuCLAVREF1,
                              sbCLAVREF3,
                              '',
                              nuCentBen,
                              sbOrdInt,
                              sbSegmento,
                              NULL,
                              vtyDatIngresos(i).comprobante,
                              sbLEDGERS,
                              vtyDatIngresos(i).dcrcinad);

              --<<
              --Se lanza la Exepcion sin la funcion no se ejecuto con exito
              -->>
              IF (nuRet <> 0) THEN
                  LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede obtener la informacion fnuInterfazAutoretencionRO :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
                  RAISE ERROR;
              END IF;

           END LOOP;
        ELSE
             --LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'La consulta no tiene resultados para la interfaz :['||nutimocodi||'] con el rango de fechas :['||Fecha_Inicio||'] , ['||Fecha_Fin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
             return 1;
        END IF;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

        --<<
        --Se lanza la Exepcion sin la funcion no se ejecuto con exito
        -->>
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        /*<< Se libera el objeto utilizado para la obtencion de la informacion de Ingresos >> */
        --vtyDatIngresos.delete;

    END loop;

    close cuInformacion;
/*
    if vtyDatIngresos.count = 0 then
         LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede obtener la informacion fnuInterfazAutoretencionRO :['||nutimocodi||'para el anno:['||nuAnio||'] Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
         return 1;
    END IF;
*/
    --<<
    --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
    -->>
    vtyDatIngresos.delete;

   --<<
   --Cuando falta al menos un centro de beneficio se aborta el resto del proceso
   -->>
   IF (centaerror>0) THEN
    -- Retorna con error, se registro en log
    RETURN -1;
   END IF;

   -- Asienta registros
   commit;

     --<<
     --Genera la informacion de los documentos para SAP de la interfaz de INGRESOS
     -->>
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaCuentaIva',vaCUENTAIVA, osbErrorMessage);
    nuRet := ldci_pkinterfazsap.fnuGeneDocuSap_Autoreten(ldci_pkinterfazsap.nuSeqICLINUDO);

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
     IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuGeneDocuSap_Autoreten :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
          RAISE ERROR;
     END IF;

     --<<
      --Se valida para corregir el descuadre por cada documento
      -->>
      nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,nutimocodi,nuVlrAjuste);
      IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
          RAISE ERROR;
      END IF;

     --<<
     --Si es satifactorio todo el proceso, se realiza el envio a SAP
     --Procedimiento Hector Dominguez
     -->>
    IF (vaEnviaInterfazAU = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Se genero con exito en interfaz ingresos - L3 AUTORETENCION ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
   --<<
   ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
   -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S',nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede Registrar la interfaz fnuRegistraInterfazAnioMes :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

     return(0);

EXCEPTION
WHEN TOO_MANY_ROWS THEN
   ldci_pkinterfazsap.vaMensError := '[fnuInterfazAutoretencionRO] - Validar la Configuracion de Registo, tiene mas porcentajes de los esperados para el calculo. '||sbInformacion||' '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
   LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error fnuInterfazAutoretencionRO :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
   return(-1);
WHEN OTHERS THEN
   ldci_pkinterfazsap.vaMensError := '[fnuInterfazAutoretencionRO] - No se pudo validar la cuenta. '||sbInformacion||' '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
   LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error fnuInterfazAutoretencionRO :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
   return(-1);
end fnuInterfazAutoretencionRO;


  FUNCTION fnuInterfazIngreso(sbTipoInterfaz   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                              nuAnio NUMBER,
                              nuMes NUMBER)
  RETURN NUMBER
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazIngreso
     AUTOR     : Oscar Restrepo
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar obtener la informacion de la interfaz
                    de Ingreso en SAP.

    Parametros de Entrada :
                          -nutimocodi Tipo de interfaz := 'L1'
                          -nuMes Mes para generaci?n de la Interfaz
                          -nuAnio A?o para generaci?n de la Interfaz

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion

    carlosr@arqs.co     200-735     01/02/2016
    Se modifica el cursor cuInformaci?n para agregarle un nuevo SQL el cual
    obtiene la informaci?n de cargos. Adem?s en el SQL de notas se excluye la
    informaci?n del nuevo comprobante que se configure COMPROBANTE_NOTAS_FNB ya
    que esta informaci?n ser? obtenida por el nuevo SQL

  ************************************************************************/

   nuCantidad NUMBER;
   daFecha_Inicio DATE;
   daFecha_Fin DATE;
   vaCtaCambio VARCHAR2(200) ;

      CURSOR cuInformacion (sbTipoInterfaz in varchar2, sbVentaBrilla in varchar2) IS
                SELECT
                         100 porcent,
                         dcrccons,
                         dcrcecrc,
                         dcrccorc,
                         dcrccuco cuenta,
                         dcrcsign signos,
                         dcrcvalo valor,
                         dcrcinad,
                         dcrcfecr,
                         dcrcclcr,
                         dcrcusua,
                         dcrcterm,
                         dcrcprog,
                         dcrcsist,
                         clcrclco clasificador,
                         clcodesc,
                         corccoco Comprobante ,
                         (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                         corctido TipoComprobante,
                         (select tccodesc from ic_ticocont
                              where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                         ) DescTipoComprobante,
                         ecrcfech
                         , ledgers
                FROM           ic_encoreco
                JOIN           ic_decoreco on (ecrccons = dcrcecrc)
                JOIN           ic_confreco on (dcrccorc = corccons )
                JOIN           ic_clascore on (clcrcons = dcrcclcr)
                JOIN           ic_clascont on (clcrclco=clcocodi)
                JOIN           LDCI_TIPOINTERFAZ on ( corccoco = COD_COMPROBANTE AND TIPOINTERFAZ  = sbTipoInterfaz)
                WHERE           ecrcfech >= daFecha_Inicio
                AND             ecrcfech <=  daFecha_Fin /*Fecha diaria, con la cual se generan los documentos*/
                AND             clcrclco NOT IN (2,104,106)
    UNION ALL
    /*AS Y SA CLASIFICADORES 104 Y 106 ARANDA 5017*/
    SELECT              100 porcent,
                         dcrccons,
                         dcrcecrc,
                         dcrccorc,
                         dcrccuco cuenta,
                         dcrcsign signos,
                         dcrcvalo valor,
                         dcrcinad,
                         dcrcfecr,
                         dcrcclcr,
                         dcrcusua,
                         dcrcterm,
                         dcrcprog,
                         dcrcsist,
                         clcrclco clasificador,
                         clcodesc,
                         corccoco Comprobante ,
                         (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                         corctido TipoComprobante,
                         (select tccodesc from ic_ticocont
                              where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                         ) DescTipoComprobante,
                         ecrcfech
                         , ledgers
                FROM           ic_encoreco
                JOIN           ic_decoreco on (ecrccons = dcrcecrc)
                JOIN           ic_confreco on (dcrccorc = corccons )
                JOIN           ic_clascore on (clcrcons = dcrcclcr)
                JOIN           ic_clascont on (clcrclco=clcocodi)
                JOIN           LDCI_TIPOINTERFAZ on ( corccoco = COD_COMPROBANTE AND TIPOINTERFAZ  = sbTipoInterfaz)
                WHERE   ecrcfech >= daFecha_Inicio
                AND     ecrcfech <=  daFecha_Fin /*Fecha diaria, con la cual se generan los documentos*/
                AND     clcrclco IN (104,106)
                AND     ((corctido = 73 AND CORCTIMO <> 16) OR (corctido = 71 AND CORCTIMO <> 1) )
    UNION ALL
    /*NOTAS BRILLA*/
    SELECT              100 porcent,
                         dcrccons,
                         dcrcecrc,
                         dcrccorc,
                         dcrccuco cuenta,
                         dcrcsign signos,
                         dcrcvalo valor,
                         dcrcinad,
                         dcrcfecr,
                         dcrcclcr,
                         dcrcusua,
                         dcrcterm,
                         dcrcprog,
                         dcrcsist,
                         clcrclco clasificador,
                         clcodesc,
                         corccoco Comprobante ,
                         (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                         corctido TipoComprobante,
                         (select tccodesc from ic_ticocont
                              where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                         ) DescTipoComprobante,
                         ecrcfech
                         , ledgers
                FROM           ic_encoreco
                JOIN           ic_decoreco on (ecrccons = dcrcecrc)
                JOIN           ic_confreco on (dcrccorc = corccons )
                JOIN           ic_clascore on (clcrcons = dcrcclcr)
                JOIN           ic_clascont on (clcrclco=clcocodi)
                JOIN           LDCI_TIPOINTERFAZ on ( corccoco = COD_COMPROBANTE AND TIPOINTERFAZ  = sbTipoInterfaz)
                WHERE   ecrcfech >= daFecha_Inicio
                AND     ecrcfech <=  daFecha_Fin /*Fecha diaria, con la cual se generan los documentos*/
                AND     clcrclco = 2
                AND     (corctido = 73 OR (corctido = 71 AND CORCTIMO <> 1) )  ---Se debe tener en cuenta que las Notas no estan en Registros.
				--<<
                -- Dcardona: Aranda 5041
                -- 09/02/2016
                -- se exluye el comprobante de ingresos brilla por notas
                -->>
                AND     corccoco NOT IN (SELECT casevalo FROM OPEN.LDCI_CARASEWE WHERE casecodi = 'COMPROBANTE_NOTAS_FNB')
    UNION ALL
    /*VENTA BRILLA*/
    select
           m.porc_participa,
           null dcrccons,
           null dcrcecrc,
           null dcrccorc,
           m.cuenta_contable cuenta,
           m.naturaleza signos,
           sum(CARGVALO) VALOR,
           '|'||
           ldci_pkinterfazsap.fnuDatosVentaBrilla(substr(cargdoso,4))||
           '|||'||cc.cucoCATE||'||||||||||||'||
           (SELECT  unique b.geograp_location_id
              FROM pr_product a , ab_address b
             WHERE a.address_id = b.address_id
               and a.product_id = cc.cuconuse)
               ||'|||||||||||||||||||||||||||||' ||substr(cargdoso,4)
           dcrcinad,
           c.cargfecr dcrcfecr,
           null dcrcclcr,
           'OPEN' dcrcusua,
           'NO TERMINAL' dcrcterm,
           null dcrcprog,
           null dcrcsist,
           concclco Clasificador,
           m.DESC_CLASCONT,
           COMPROBANTE,
           DES_COMPROBANTE,
           COD_TIPCOMPROBANTE,
           DESC_TIPCOMPROBANTE,
           c.cargfecr fecha
           , (SELECT ledgers from LDCI_TIPOINTERFAZ WHERE LDCI_TIPOINTERFAZ.COD_COMPROBANTE = COMPROBANTE AND TIPOINTERFAZ = sbTipoInterfaz) ledgers
    from open.cargos c,
         open.CONCEPTO CO,
         open.CUENCOBR cc,
         (SELECT NATURALEZA,CUENTA_CONTABLE,COMPROBANTE,DES_COMPROBANTE,COD_TIPCOMPROBANTE,DESC_TIPCOMPROBANTE,PORC_PARTICIPA, COD_CLASCONT,DESC_CLASCONT
                FROM (
                  SELECT
                        A.COCOCODI COMPROBANTE,
                        A.COCODESC DES_COMPROBANTE,
                        B.TCCOCODI COD_TIPCOMPROBANTE,
                        B.TCCODESC DESC_TIPCOMPROBANTE,
                        d.tidccodi COD_TIPODOCUMENTO,
                        D.TIDCDESC DESC_TIPODOCUMENTO,
                        F.CLCRCONS,
                        G.CLCOCODI COD_CLASCONT,
                        G.CLCODESC DESC_CLASCONT,
                        I.RCCCPOPA PORC_PARTICIPA,
                        i.rcccnatu NATURALEZA,
                        I.rccccuco CUENTA_CONTABLE
                  FROM  OPEN.IC_COMPCONT A,    OPEN.IC_TICOCONT B,      OPEN.IC_CONFRECO C ,
                            OPEN.IC_TIPODOCO D ,    OPEN.IC_TIPOMOVI E ,      OPEN.IC_CLASCORE F ,
                            OPEN.IC_CLASCONT G,     OPEN.IC_RECOCLCO I
                  WHERE
                        ( A.COCOCODI in
                            ( SELECT TO_NUMBER(COLUMN_VALUE)
                                FROM TABLE
                                (open.LDC_BOUTILITIES.SPLITSTRINGS(sbVentaBrilla,',') ) )
                        )
                        AND A.COCOTCCO=B.TCCOCODI
                        and  C.CORCCOCO = A.COCOCODI
                        AND F.CLCRCORC =C.CORCCONS
                        AND C.CORCTIDO=D.TIDCCODI
                        AND C.CORCTIMO=E.TIMOCODI
                        AND F.CLCRCONS=I.RCCCCLCR
                        AND F.CLCRCLCO=G.CLCOCODI
                        AND  d.tidccodi=71
                        AND CORCTIMO = 1
                        )) m
    WHERE cc.cucocodi = c.cargcuco
      and c.CARGCONC = CO.CONCCODI
      and m.cod_clascont = concclco
      and c.cargcaca = 19
      and c.cargtipr in ('A')
      and c.cargsign in ('DB')
      AND c.cargfecr >=  daFecha_Inicio
      AND c.cargfecr <=  daFecha_Fin
    group by m.porc_participa,
           m.cuenta_contable,
           m.naturaleza,
           CARGCONC,
           concclco,
           m.DESC_CLASCONT,
           COMPROBANTE,substr(cargdoso,4),c.cargfecr,
           DES_COMPROBANTE,
           COD_TIPCOMPROBANTE,
           DESC_TIPCOMPROBANTE , CC.CUCOCATE ,cc.cuconuse

	UNION ALL
	--<<
    -- Dcardona: Aranda 5041
    -- 09/02/2016
    -- NOTAS POR VENTA BRILLA
    -->>
    SELECT
           m.porc_participa,
           null dcrccons,
           null dcrcecrc,
           null dcrccorc,
           m.cuenta_contable cuenta,
           m.naturaleza signos,
           sum(CARGVALO) VALOR,
           '|'||
           ldci_pkinterfazsap.fnuDatosVentaBrilla(REPLACE(SUBSTR(no.notaobse,INSTR(no.notaobse,'[')+1),']'))||
           '|||'||cc.cucoCATE||'||||||||||||'||
           (SELECT  unique b.geograp_location_id
              FROM pr_product a , ab_address b
             WHERE a.address_id = b.address_id
               and a.product_id = cc.cuconuse)
               ||'|||||||||||||||||||||||||||||' ||REPLACE(SUBSTR(no.notaobse,INSTR(no.notaobse,'[')+1),']')
           dcrcinad,
           ca.cargfecr dcrcfecr,
           null dcrcclcr,
           'OPEN' dcrcusua,
           'NO TERMINAL' dcrcterm,
           null dcrcprog,
           null dcrcsist,
           concclco Clasificador,
           m.DESC_CLASCONT,
           COMPROBANTE,
           DES_COMPROBANTE,
           COD_TIPCOMPROBANTE,
           DESC_TIPCOMPROBANTE,
           ca.cargfecr fecha
           , (SELECT ledgers from LDCI_TIPOINTERFAZ WHERE LDCI_TIPOINTERFAZ.COD_COMPROBANTE = COMPROBANTE AND TIPOINTERFAZ = 'L1') ledgers
    from open.cargos ca,
         open.CONCEPTO CO,
         open.CUENCOBR cc,
         OPEN.notas no,
         (SELECT NATURALEZA,CUENTA_CONTABLE,COMPROBANTE,DES_COMPROBANTE,COD_TIPCOMPROBANTE,DESC_TIPCOMPROBANTE,PORC_PARTICIPA, COD_CLASCONT,DESC_CLASCONT
                FROM (
                  SELECT
                        A.COCOCODI COMPROBANTE,
                        A.COCODESC DES_COMPROBANTE,
                        B.TCCOCODI COD_TIPCOMPROBANTE,
                        B.TCCODESC DESC_TIPCOMPROBANTE,
                        d.tidccodi COD_TIPODOCUMENTO,
                        D.TIDCDESC DESC_TIPODOCUMENTO,
                        F.CLCRCONS,
                        G.CLCOCODI COD_CLASCONT,
                        G.CLCODESC DESC_CLASCONT,
                        I.RCCCPOPA PORC_PARTICIPA,
                        i.rcccnatu NATURALEZA,
                        I.rccccuco CUENTA_CONTABLE
                  FROM  OPEN.IC_COMPCONT A,     OPEN.IC_TICOCONT B,      OPEN.IC_CONFRECO C ,
                        OPEN.IC_TIPODOCO D ,    OPEN.IC_TIPOMOVI E ,      OPEN.IC_CLASCORE F ,
                        OPEN.IC_CLASCONT G,     OPEN.IC_RECOCLCO I
                  WHERE
                        ( A.COCOCODI in ( SELECT casevalo FROM OPEN.LDCI_CARASEWE WHERE casecodi = 'COMPROBANTE_NOTAS_FNB' )    -- parametro del nuevo comprobante  de ventas brilla por notas
                        )
                        AND A.COCOTCCO=  B.TCCOCODI
                        and C.CORCCOCO = A.COCOCODI
                        AND F.CLCRCORC = C.CORCCONS
                        AND C.CORCTIDO = D.TIDCCODI
                        AND C.CORCTIMO = E.TIMOCODI
                        AND F.CLCRCONS = I.RCCCCLCR
                        AND F.CLCRCLCO = G.CLCOCODI
                        AND d.tidccodi = 73   -- notas
                        AND F.clcrclco = 2
                        AND CORCTIMO   = 16   -- Notas por concepto
                        )) m
    WHERE cc.cucocodi = ca.cargcuco
      and ca.cargconc = co.conccodi
      and m.cod_clascont = concclco
      and ca.cargcaca = 19
      and ca.cargtipr  in ('P')
      AND CO.concclco = 2
      AND no.notanume = ca.cargcodo
      AND ca.cargfecr >=  daFecha_Inicio
      AND ca.cargfecr <=  daFecha_Fin
    group by m.porc_participa,
           m.cuenta_contable,
           m.naturaleza,
           CARGCONC,
           concclco,
           m.DESC_CLASCONT,
           COMPROBANTE,substr(cargdoso,4),ca.cargfecr,
           no.notaobse,
           DES_COMPROBANTE,
           COD_TIPCOMPROBANTE,
           DESC_TIPCOMPROBANTE , CC.CUCOCATE ,cc.cuconuse;

      TYPE tyDatIngresos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
      vtyDatIngresos tyDatIngresos;
      --<<
      --definicion de variables
      -->>
      nuRet          NUMBER;
      nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
      vaClave        ldci_claveconta.clavcodi%TYPE;
      iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
      iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
      nuCentBen NUMBER;
      sbOrdInt VARCHAR2(100);
      nuCategoria NUMBER;
      sbSegmento VARCHAR2(200);
      sbDescripcionNit VARCHAR2(200);
      daFECHBASE date;
      daFechaContab date;
      sbEsDivergente VARCHAR2(2);
      nuNIT VARCHAR2(100);
      nuCLASECTA number;
      nuASIGNACN number;
      nuCLAVREF1 number;
      sbCLAVREF3  VARCHAR2(100);
      nuCTADIV   number;
      nuCOD_CLASIFCONTA VARCHAR2(100);
      nuLocalidad NUMBER;
      centaerror NUMBER:=0;
      nuError NUMBER:=0;
      nuProcesado NUMBER:=0;
      sbVentaBrilla varchar2(250);
      nuCuenta NUMBER := 0;
	  nuTipoServicio NUMBER;
	  nuCiclo        ciclo.ciclcodi%type;

      CURSOR cuParametros (vaCadena IN VARCHAR2,vaParametro IN VARCHAR2) IS
             SELECT INSTR(vaCadena,vaParametro) CANT FROM DUAL ; --Aranda 5017

    nuVlrAjuste   NUMBER; -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

  BEGIN

    ldci_pkinterfazsap.vaCODINTINTERFAZ:='L1';
    ldci_pkinterfazsap.vaSOCIEDAD:='GDOC';
    ldci_pkinterfazsap.vaCURRENCY:='COP';

    /*Se Atiende el Aranda 5017 Parametro para identificar los cambio de Cebe por el Cebe Generico --Recuperaci?n de Cartera*/
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PavaCtaCambio',vaCtaCambio, osbErrorMessage);

    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'IC_VENTA_BRILLA', sbVentaBrilla, osbErrorMessage);

    --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L1_Limite', nuVlrAjuste, osbErrorMessage);

    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,sbTipoInterfaz);
    IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Generar interfaz '||sbTipoInterfaz||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
            raise Error;
     END IF;

    --<<
    --Se valida la existencia de las fechas de cierre comercial y se obtienen las fecha de inicio
    --y final del periodo
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetFechaCierre(nuAnio,nuMes,daFecha_Inicio,daFecha_Fin);

    -- Formatea las fechas
    daFecha_Inicio := to_date(substr(to_char(daFecha_Inicio),1,10)||' 00:00:00','dd/mm/yyyy hh24:mi:ss');
    daFecha_Fin := to_date(substr(to_char(daFecha_Fin),1,10)||' 23:59:59','dd/mm/yyyy hh24:mi:ss');

    dbms_output.put_Line('Inicio - Fin '||daFecha_Inicio||'  '||daFecha_Fin);

    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede obtener Fechas para cierre comercial en el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide la tabla LDC_CIERCOME',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

     LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Inicia el proceso de Consulta para  el A?o :['||nuAnio||'] y mes ['||nuMes||'] Parametro: Venta Brilla ['||sbVentaBrilla||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
     --<<
     --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
     -->>
   ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
   LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,sbTipoInterfaz||' Inicia Interfaz de Ingresos : Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    OPEN  cuInformacion (sbTipoInterfaz, sbVentaBrilla);
    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatIngresos
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatIngresos.first IS null);

        -- Procesa ingresos
        if vtyDatIngresos.count > 0 then


           FOR i IN vtyDatIngresos.First..vtyDatIngresos.Last LOOP

              vaClave := NULL;

              --<<
              --obtiene la clave contable a partir de la cuenta
              -->>
              vaClave := fvaGetClaveContaIngreso(vtyDatIngresos(i).clasificador,vtyDatIngresos(i).cuenta, vtyDatIngresos(i).signos,vtyDatIngresos(i).porcent, iovactcaicme, iovactcainiv);

              --<<
              --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
              -->>
              if (vaClave is null or vaClave < 0) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatIngresos(i).TipoComprobante||'] Comprobante ['||vtyDatIngresos(i).Comprobante||'] Clasificador ['||vtyDatIngresos(i).clasificador|| '] Cuenta  ['||vtyDatIngresos(i).cuenta||'] Signo ['||vtyDatIngresos(i).signos||'] Porcentaje '||vtyDatIngresos(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                nuError := -1;
              end if;

              --<<
              --Se Obtiene la Categoria Y  la localida
              -->>
              nuLocalidad 		:=ldci_pkinterfazsap.fvaGetData(17,vtyDatIngresos(i).dcrcinad,'|');
              nuCategoria 		:=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatIngresos(i).dcrcinad,'|'),NULL);
							nuTipoServicio	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,vtyDatIngresos(i).dcrcinad,'|'),NULL);
							nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,vtyDatIngresos(i).dcrcinad,'|'),NULL);
              nuCOD_CLASIFCONTA:=vtyDatIngresos(i).clasificador;

              nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(2,vtyDatIngresos(i).dcrcinad,'|'),fvaGetNitDetallado(vtyDatIngresos(i).cuenta,nuCOD_CLASIFCONTA)),null);
              nuNIT:=replace(nuNIT,'-','');
              sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
              sbEsDivergente:=fnuGetDivergente(vaClave);

    				-- Aranda 7100
										if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
											sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
										else
											sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
										end if;

                    if(sbOrdInt=-1) then
                        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener la Orden Interna  para el Clasificador Contable:['||nuCOD_CLASIFCONTA||'] Con la Categoria :['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        sbOrdInt:=null;
                    end if;


              IF (vtyDatIngresos(i).cuenta NOT LIKE '4%') THEN   --Aranda 6207
                            sbOrdInt:=null;
							else
														sbOrdInt := sbOrdInt;
              END IF;

            if NOT tbCentroBeneficio.exists(nuLocalidad||nuCategoria) then
                nuCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebeNew(nuLocalidad,nuCategoria),NULL);
                -- Cache para almacenar los diferentes centros de beneficio
                tbCentroBeneficio(nuLocalidad||nuCategoria) :=  nuCentBen;
            else
                nuCentBen:= tbCentroBeneficio(nuLocalidad||nuCategoria);
            END if;

            if(nuCentBen = 0 or nuCentBen is null) then
              sbSegmento:='N/A';
              LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,' Interfaz [ '||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Centro de Beneficio para la Localidad  :['||nuLocalidad||'] Con Categoria ['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
              centaerror:=centaerror+1;
            else
              sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
            end if;

              IF (sbEsDivergente='S') THEN --Si la cuenta es Divergente
                  nuCLASECTA := nuNIT;
                  nuASIGNACN := nuNIT;
                  nuCLAVREF1 := nuNIT;
                  sbCLAVREF3 := sbDescripcionNit;
                  nuCTADIV   := vtyDatIngresos(i).cuenta;
              ELSE  --Si la cuenta No es Divergente
                  nuCLASECTA := vtyDatIngresos(i).cuenta;
                  nuASIGNACN := nuNIT;
                  nuCLAVREF1 := nuNIT;
                  sbCLAVREF3 := sbDescripcionNit;
                  nuCTADIV   := '';
              END IF;

              daFechaContab := daFecha_Fin +1;

                -- Obtiene el Ledger
                sbLEDGERS := fsbGetLedgers(sbTipoInterfaz, vtyDatIngresos(i).comprobante);

                /*Arnda 5017, en el cursor se leen las cuentas que deben cambiarse de Cebe por Generico*/
                OPEN cuParametros (','||vaCtaCambio||',',','||vtyDatIngresos(i).cuenta||',');
                FETCH cuParametros INTO nuCuenta;
                CLOSE cuParametros;

                IF(nuCuenta > 0) then --La cuenta Se debe Cambiar de Cebe'
                  IF (SubStr(nuCentBen,1,2)=11) THEN  --Si el Cebe es 11 se Cambia por el Generico 1900
                    nuCentBen := 1900;
                  ELSE                                   --Si el Cebe es Diferente 11 se Cambia por el Generico 1990
                    nuCentBen := 1990;
                  END IF;
                END IF;

                --<<
                --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                -->>
              nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(sbTipoInterfaz,
                                                  ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  trunc(daFechaContab),
                                                  user,
                                                  'SERVER',
                                                  TRUNC(sysdate),
                                                  nuCOD_CLASIFCONTA,
                                                  vaClave,
                                                  nuCLASECTA,
                                                  iovactcaicme,
                                                  vtyDatIngresos(i).VALOR,
                                                  vtyDatIngresos(i).VALOR,
                                                  iovactcainiv,
                                                  null,
                                                  'INGRESOS '||ldci_pkinterfazsap.nuSeqICLINUDO||'-'||ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  null,
                                                  null,
                                                  ldci_pkinterfazsap.vaSOCIEDAD,
                                                  null,
                                                  null,
                                                  null,
                                                  null,
                                                  i,
                                                  nuCTADIV,
                                                  nuASIGNACN,
                                                  nuCLAVREF1,
                                                  sbCLAVREF3,
                                                  '',
                                                  nuCentBen,
                                                  sbOrdInt,
                                                  sbSegmento,
                                                  NULL,
                                                  vtyDatIngresos(i).comprobante,
                                                  sbLEDGERS,
                                                  vtyDatIngresos(i).dcrcinad);

              --<<
              --Se lanza la Exepcion sin la funcion no se ejecuto con exito
              -->>
              IF (nuRet <> 0) THEN
                  LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ejecutar fnuLDCI_INCOLIQU :['||sbTipoInterfaz||'] '||
                    vtyDatIngresos(i).dcrccons||' '||vtyDatIngresos(i).cuenta||' '||vtyDatIngresos(i).dcrcinad,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
                  RAISE ERROR;
              END IF;
            END LOOP;
        END if;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Ejecutando fnuINSELDCI_INCOLIQU :['||sbTipoInterfaz||'] <'||vtyDatIngresos.count||'> <'||nuProcesado||'>',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
         --<<
         --Se lanza la Exepcion sin la funcion no se ejecuto con exito
         -->>
         IF (nuRet <> 0) THEN
                LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ejecutar fnuINSELDCI_INCOLIQU :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
                Rollback;
                raise Error;
         END IF;

        nuProcesado := nuProcesado + vtyDatIngresos.count;
        /*<< Se libera el objeto utilizado para la obtencion de la informacion de Ingresos >> */
        vtyDatIngresos.delete;
    END loop;

    close cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Finaliza proceso de consulta informacion procesado ['||nuProcesado||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    /*<< Se libera el objeto utilizado para la obtencion de la informacion de Ingresos >> */
    vtyDatIngresos.delete;

    --Cuando no existe Orden Interna para lmenos un Clasificador
    IF (nuError <> 0) THEN
        Rollback;
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'vaClave is null or vaClave < 0 ['|| ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Cuando falta al menos un centro de beneficio se aborta el resto del proceso
    -->>
    IF ( centaerror > 0) THEN
        Rollback;
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede obtener el Centro de Beneficio para la Localidad ['|| ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Se inserta la informacion del impuesto
    -->>
    commit;

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Insertando en Impuesto :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
    nuRet := ldci_pkinterfazsap.fnuDistriImpuesto (sbTipoInterfaz,ldci_pkinterfazsap.nuSeqICLINUDO,ldci_pkinterfazsap.vaSOCIEDAD,daFecha_Inicio,daFecha_Fin);
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Fin Inserta en Impuesto :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    --<<
    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
    -->>
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ldci_pkinterfazsap.fnuDistriImpuesto :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

    -- Asienta valores de ldci_incoliqu
    commit;
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Guarda en ldci_incoliqu :['||sbTipoInterfaz||'] nudo['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

     --<<
     --Genera la informacion de los documentos para SAP de la interfaz de INGRESOS
     -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Iniciando fnuGeneDocuSap_INGRESOS... :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaCuentaIva',vaCUENTAIVA, osbErrorMessage);

    dbms_output.put_Line(ldci_pkinterfazsap.nuSeqICLINUDO||'|'||'INGRESOS'||'|'||vaCUENTAIVA||'|'||sbTipoInterfaz);

    nuRet := ldci_pkinterfazsap.fnuGeneDocuSap_INGRESOS(ldci_pkinterfazsap.nuSeqICLINUDO, 'INGRESOS',vaCUENTAIVA,sbTipoInterfaz);

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'...Fin fnuGeneDocuSap_INGRESOS :['||sbTipoInterfaz||'] '||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
     IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ldci_pkinterfazsap.fnuGeneDocuSap_INGRESOS :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
          RAISE ERROR;
     END IF;

     --<<
      --Se valida para corregir el descuadre por cada documento
      -->>
      LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Iniciando fnuAjusteInterContable... :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
      nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,sbTipoInterfaz,nuVlrAjuste);
      LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'...Finalizando fnuAjusteInterContable :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

      IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
          RAISE ERROR;
      END IF;
     -- Asienta registros
     commit;

     --<<
     -- Valida si la trama Generada por Documento e Identificador no supere los 998 Registros.
     -- Se realiza despues de la confirmacion para validar si por algun motivo diferente al
     -- contemplado en la trama no se pueda Dividir. Y poder hacer Ajuste Manual.
     -->>
     nuRet := fnusplitdocclas(nucodtrama => ldci_pkinterfazsap.nuSeqICLINUDO);

     IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Error al Dividir Documento ldci_pkinterfazsap.fnusplitdocclas :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
          RAISE ERROR;
      END IF;
      COMMIT;

     --<<
     --Si es satifactorio todo el proceso, se realiza el envio a SAP
     --Procedimiento Hector Dominguez
     -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Iniciando proEnviaDocContable :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
    IF (vaEnviaIntefazSAP = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Se genero con exito en interfaz ingresos - L1 Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S',sbTipoInterfaz);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz fnuRegistraInterfazAnioMes :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    return(0);

    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuInterfazIngreso] - Validar la Configuracion de Registo, tiene mas porcentajes de los esperados para el calculo. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Error fnuInterfazIngreso Valores Repetidos:['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
       return(-1);
    WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuInterfazIngreso] - '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Error fnuInterfazIngreso Otros Errores :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
       dbms_output.put_Line(sqlerrm);
       return(-1);
    END fnuInterfazIngreso;


  FUNCTION fnuInterfazIngresoRO(sbTipoInterfaz   IN LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                                nuAnio           NUMBER,
                                nuMes            NUMBER)
  RETURN NUMBER
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazIngresoRO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 28-07-2014
     DESCRIPCION  : Copia del m?todo fnuInterfazIngreso
                    funcion que se encarga de armar obtener la informacion de la interfaz
                    de Ingreso en SAP.

    Parametros de Entrada :
      nutimocodi  Tipo de interfaz := 'L1'
      nuMes       Mes para generaci?n de la Interfaz
      nuAnio      A?o para generaci?n de la Interfaz

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion

    carlosr@arqs.co     200-735     01/02/2016
    Se modifica el cursor cuInformaci?n para agregarle un nuevo SQL el cual
    obtiene la informaci?n de cargos. Adem?s en el SQL de notas se excluye la
    informaci?n del nuevo comprobante que se configure COMPROBANTE_NOTAS_FNB ya
    que esta informaci?n ser? obtenida por el nuevo SQL

    H.T     27-01-2020   CA-288, se modifica para controlar el NIT reportado en las ventas
                         Brilla y el clasificador CARDIF

    H.T     24/04/2020    CA-0000398  - Se modifica la interfaz de ingresos, funcion fnuInterfazIngresoRO,
                          para que reporte el NIT 9994 al clasificador 2 de Brilla, actualmente hay movimiento que envia al
                          NIT 9999, esto es un error.

    Edmlar  03/05/2023    OSF-1073 Se corrige la funcion FnuInterfazIngresoRO, se cambia la funcionalidad de la busqueda de parametros
                          para sea mas eficiente la ejecucion, al mismo tiempo se excluye del proceso de ventas Brilla los clasificadores
                          que se esten configurados en un parametro, se afina la consulta para mejor el rendimiento del proceso en general.

   Edmlar   09/04/2024    OSF-2546
                          Se modifica el Cursor cuInformacion para incluir la consulta de las anulacion de FNB y poder aplicar la logica de
                          las ventas BRILLA, buscar el NIT del aliado de acuerdo a la solicitud que aparece en el campor CARGDOSO.
                          Se debe modificar la configuracion de registros contables para que en el clasificador de BRILLA se omita la causal 1 en
                          el comprobante de notas por concepto.                           

  ************************************************************************/

   nuCantidad NUMBER;
   daFecha_Inicio DATE;
   daFecha_Fin DATE;
   vaClasBrilla         ldci_carasewe.casevalo%TYPE; -- Clasificadores Brilla para ingresos
   --<< CA-288
   vaClasCardif         ldci_carasewe.casevalo%TYPE; -- Clasificadores Cardif para ingresos
   --<< OSF-1073
   vaClasNoCa19         ldci_carasewe.casevalo%TYPE; -- Clasificadores a Excluir con causal 19  
   vaCompnotas          ldci_carasewe.casevalo%TYPE; -- Comprobantes de notas FNB
   -->>
      CURSOR cuInformacion (sbTipoInterfaz in varchar2, sbVentaBrilla in varchar2) IS
                SELECT
                         100 porcent,
                         dcrccons,
                         dcrcecrc,
                         dcrccorc,
                         dcrccuco cuenta,
                         dcrcsign signos,
                         dcrcvalo valor,
                         dcrcinad,
                         dcrcfecr,
                         dcrcclcr,
                         dcrcusua,
                         dcrcterm,
                         dcrcprog,
                         dcrcsist,
                         clcrclco clasificador,
                         clcodesc,
                         corccoco Comprobante ,
                         (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                         corctido TipoComprobante,
                         (select tccodesc from ic_ticocont
                              where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                         ) DescTipoComprobante,
                         ecrcfech
                         , ledgers
                FROM           ic_encoreco
                JOIN           ic_decoreco on (ecrccons = dcrcecrc)
                JOIN           ic_confreco on (dcrccorc = corccons )
                JOIN           ic_clascore on (clcrcons = dcrcclcr)
                JOIN           ic_clascont on (clcrclco=clcocodi)
                JOIN           LDCI_TIPOINTERFAZ on ( corccoco = COD_COMPROBANTE AND TIPOINTERFAZ  = sbTipoInterfaz)
                WHERE           ecrcfech >= daFecha_Inicio
                AND             ecrcfech <=  daFecha_Fin /*Fecha diaria, con la cual se generan los documentos*/
                AND             clcrclco NOT IN  ( SELECT to_number(regexp_substr(
                                                                                  vaClasBrilla,
                                                                                  '[^,]+',
                                                                                  1,
                                                                                  LEVEL
                                                                                 )
                                                                   ) AS ClasBrilla
                                                     FROM dual
                                                   CONNECT BY regexp_substr(vaClasBrilla, '[^,]+', 1, LEVEL) IS NOT NULL 
                                                 )
    UNION ALL
    /* NOTAS BRILLA SIN ANULACIONES - CAUSAL != 1 */
    SELECT              100 porcent,
                         dcrccons,
                         dcrcecrc,
                         dcrccorc,
                         dcrccuco cuenta,
                         dcrcsign signos,
                         dcrcvalo valor,
                         dcrcinad,
                         dcrcfecr,
                         dcrcclcr,
                         dcrcusua,
                         dcrcterm,
                         dcrcprog,
                         dcrcsist,
                         clcrclco clasificador,
                         clcodesc,
                         corccoco Comprobante ,
                         (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                         corctido TipoComprobante,
                         (select tccodesc from ic_ticocont
                              where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                         ) DescTipoComprobante,
                         ecrcfech
                         , ledgers
                FROM     ic_encoreco
                JOIN     ic_decoreco on (ecrccons = dcrcecrc)
                JOIN     ic_confreco on (dcrccorc = corccons )
                JOIN     ic_clascore on (clcrcons = dcrcclcr)
                JOIN     ic_clascont on (clcrclco=clcocodi)
                JOIN     LDCI_TIPOINTERFAZ on ( corccoco = COD_COMPROBANTE AND TIPOINTERFAZ  = sbTipoInterfaz)
                WHERE   ecrcfech >= daFecha_Inicio
                AND     ecrcfech <=  daFecha_Fin /*Fecha diaria, con la cual se generan los documentos*/
                AND     clcrclco IN  ( SELECT to_number(regexp_substr( 
                                                                       vaClasBrilla,
                                                                       '[^,]+',
                                                                       1,
                                                                       LEVEL
                                                                     )
                                                       ) AS ClasBrilla
                                              FROM dual
                                           CONNECT BY regexp_substr(vaClasBrilla, '[^,]+', 1, LEVEL) IS NOT NULL 
                                     )
                AND     (corctido = 73 OR (corctido = 71 AND CORCTIMO <> 1) )
                -- se exluye el comprobante de ingresos brilla por notas
                AND     corccoco NOT IN ( SELECT to_number(regexp_substr(
                                                                         vaCompnotas,
                                                                         '[^,]+',
                                                                         1,
                                                                         LEVEL
                                                                        )
                                                          ) AS Compnotas
                                            FROM dual
                                          CONNECT BY regexp_substr(vaCompnotas, '[^,]+', 1, LEVEL) IS NOT NULL 
                                        )
                -->>
    UNION ALL
    --
    -- NOTAS DE ANULACION POR VENTA BRILLA - CAUSAL = 1
    -- OSF-2546
    -->>
    SELECT
            m.porc_participa,
            null dcrccons,
            null dcrcecrc,
            null dcrccorc,
            m.cuenta_contable cuenta,
            CASE
              WHEN m.naturaleza = 'D' THEN 'C'
              WHEN m.naturaleza = 'C' THEN 'D'
            END signos,
            sum(CARGVALO) VALOR,
            -- DCRCINAD
            '|'||
            Decode(
                   concclco, 
                   ( SELECT to_number(regexp_substr(
                                                   vaClasCardif,
                                                   '[^,]+',
                                                   1,
                                                   LEVEL
                                                  )
                                    ) AS vaClasCardif
                       FROM dual
                    CONNECT BY regexp_substr(vaClasCardif, '[^,]+', 1, LEVEL) IS NOT NULL
                   ),
                   NUll,
                   ldci_pkinterfazsap.fnuDatosVentaBrillaRO(substr(cargdoso,4))
                  )|| -- Nit del aliado
            -->>
            '|||'||cc.cucoCATE||'||||||||||||'||
            (SELECT  unique b.geograp_location_id
            FROM pr_product a , ab_address b
            WHERE a.address_id = b.address_id
            and a.product_id = cc.cuconuse)
            ||'|||||||||||||||||||||||||||||' ||REPLACE(SUBSTR(no.notaobse,INSTR(no.notaobse,'[')+1),']')
            dcrcinad,
            ca.cargfecr dcrcfecr,
            null dcrcclcr,
            'OPEN' dcrcusua,
            'NO TERMINAL' dcrcterm,
            null dcrcprog,
            null dcrcsist,
            concclco Clasificador,
            m.DESC_CLASCONT,
            COMPROBANTE,
            DES_COMPROBANTE,
            COD_TIPCOMPROBANTE,
            DESC_TIPCOMPROBANTE,
            ca.cargfecr fecha
            , (SELECT ledgers from LDCI_TIPOINTERFAZ WHERE LDCI_TIPOINTERFAZ.COD_COMPROBANTE = COMPROBANTE AND TIPOINTERFAZ = 'L1') ledgers
            from open.cargos ca,
            open.CONCEPTO CO,
            open.CUENCOBR cc,
            OPEN.notas no,
    (SELECT NATURALEZA,CUENTA_CONTABLE,COMPROBANTE,DES_COMPROBANTE,COD_TIPCOMPROBANTE,DESC_TIPCOMPROBANTE,PORC_PARTICIPA, COD_CLASCONT,DESC_CLASCONT
    FROM (
           SELECT
                  A.COCOCODI COMPROBANTE,
                  A.COCODESC DES_COMPROBANTE,
                  B.TCCOCODI COD_TIPCOMPROBANTE,
                  B.TCCODESC DESC_TIPCOMPROBANTE,
                  d.tidccodi COD_TIPODOCUMENTO,
                  D.TIDCDESC DESC_TIPODOCUMENTO,
                  F.CLCRCONS,
                  G.CLCOCODI COD_CLASCONT,
                  G.CLCODESC DESC_CLASCONT,
                  I.RCCCPOPA PORC_PARTICIPA,
                  i.rcccnatu NATURALEZA,
                  I.rccccuco CUENTA_CONTABLE
            FROM  OPEN.IC_COMPCONT A,     OPEN.IC_TICOCONT B,      OPEN.IC_CONFRECO C,
                  OPEN.IC_TIPODOCO D,     OPEN.IC_TIPOMOVI E,      OPEN.IC_CLASCORE F,
                  OPEN.IC_CLASCONT G,     OPEN.IC_RECOCLCO I
            WHERE
                  ( A.COCOCODI in  ( SELECT to_number(regexp_substr(
                                                                   vaCompnotas,
                                                                   '[^,]+',
                                                                   1,
                                                                   LEVEL
                                                                  )
                                                    ) AS Compnotas
                                       FROM dual
                                    CONNECT BY regexp_substr(vaCompnotas, '[^,]+', 1, LEVEL) IS NOT NULL
                                   )
                  )
                  AND A.COCOTCCO=  B.TCCOCODI
                  and C.CORCCOCO = A.COCOCODI
                  AND F.CLCRCORC = C.CORCCONS
                  AND C.CORCTIDO = D.TIDCCODI
                  AND C.CORCTIMO = E.TIMOCODI
                  AND F.CLCRCONS = I.RCCCCLCR
                  AND F.CLCRCLCO = G.CLCOCODI
                  AND d.tidccodi = 73   -- notas
                  AND F.clcrclco IN ( SELECT to_number(regexp_substr(
                                                                     vaClasBrilla,
                                                                     '[^,]+',
                                                                     1,
                                                                     LEVEL
                                                                    )
                                                      ) AS ClasBrilla
                                        FROM dual
                                     CONNECT BY regexp_substr(vaClasBrilla, '[^,]+', 1, LEVEL) IS NOT NULL
                                    )
                  -->>
                  AND CORCTIMO   = 16   -- Notas por concepto
            )) m
    WHERE cc.cucocodi = ca.cargcuco
    and ca.cargconc = co.conccodi
    and m.cod_clascont = concclco
    and ca.cargcaca = 1 -- Anulaciones
    and ca.cargtipr  in ('P')
    AND no.notanume = ca.cargcodo
    AND ca.cargfecr >=  daFecha_Inicio
    AND ca.cargfecr <=  daFecha_Fin
    group by m.porc_participa, m.cuenta_contable, m.naturaleza, CARGCONC, concclco, m.DESC_CLASCONT, COMPROBANTE,substr(cargdoso,4),ca.cargfecr,
    no.notaobse, DES_COMPROBANTE, COD_TIPCOMPROBANTE, DESC_TIPCOMPROBANTE , CC.CUCOCATE ,cc.cuconuse
    --
    --
    UNION ALL
    /*VENTA BRILLA*/
    -- chg: Se deja la logica de GDO
    SELECT m.porc_participa,
           null dcrccons,
           null dcrcecrc,
           null dcrccorc,
           m.cuenta_contable cuenta,
           m.naturaleza signos,
           sum(CARGVALO) VALOR,
           '|'||
           --<< CA-288
           --ldci_pkinterfazsap.fnuDatosVentaBrillaRO(substr(cargdoso,4))||
           Decode(concclco, ( SELECT to_number(regexp_substr( 
                                                              vaClasCardif,
                                                              '[^,]+',
                                                              1,
                                                              LEVEL
                                                            )
                                              ) AS ClasCardif
                                FROM dual
                              CONNECT BY regexp_substr(vaClasCardif, '[^,]+', 1, LEVEL) IS NOT NULL 
                            ),
                            NULL,
                            ldci_pkinterfazsap.fnuDatosVentaBrillaRO(substr(cargdoso,4))
                 )||
           -->>
           '|||'||cc.cucoCATE||'||||||||||||'||
           (SELECT  unique b.geograp_location_id
              FROM pr_product a , ab_address b
             WHERE a.address_id = b.address_id
               and a.product_id = cc.cuconuse)
               ||'|||||||||||||||||||||||||||||' ||substr(cargdoso,4)
           dcrcinad,
           c.cargfecr dcrcfecr,
           null dcrcclcr,
           'OPEN' dcrcusua,
           'NO TERMINAL' dcrcterm,
           null dcrcprog,
           null dcrcsist,
           concclco Clasificador,
           m.DESC_CLASCONT,
           COMPROBANTE,
           DES_COMPROBANTE,
           COD_TIPCOMPROBANTE,
           DESC_TIPCOMPROBANTE,
           c.cargfecr fecha,
           (SELECT ledgers from LDCI_TIPOINTERFAZ WHERE LDCI_TIPOINTERFAZ.COD_COMPROBANTE = COMPROBANTE AND TIPOINTERFAZ = 'L1') ledgers
    from open.cargos c,
         open.CONCEPTO CO,
         open.CUENCOBR cc,
         (SELECT NATURALEZA,CUENTA_CONTABLE,COMPROBANTE,DES_COMPROBANTE,COD_TIPCOMPROBANTE,DESC_TIPCOMPROBANTE,PORC_PARTICIPA, COD_CLASCONT,DESC_CLASCONT
                FROM (
                  SELECT
                        A.COCOCODI COMPROBANTE,
                        A.COCODESC DES_COMPROBANTE,
                        B.TCCOCODI COD_TIPCOMPROBANTE,
                        B.TCCODESC DESC_TIPCOMPROBANTE,
                        d.tidccodi COD_TIPODOCUMENTO,
                        D.TIDCDESC DESC_TIPODOCUMENTO,
                        F.CLCRCONS,
                        G.CLCOCODI COD_CLASCONT,
                        G.CLCODESC DESC_CLASCONT,
                        I.RCCCPOPA PORC_PARTICIPA,
                        i.rcccnatu NATURALEZA,
                        I.rccccuco CUENTA_CONTABLE
                  FROM  OPEN.IC_COMPCONT A,    OPEN.IC_TICOCONT B,      OPEN.IC_CONFRECO C ,
                            OPEN.IC_TIPODOCO D ,    OPEN.IC_TIPOMOVI E ,      OPEN.IC_CLASCORE F ,
                            OPEN.IC_CLASCONT G,     OPEN.IC_RECOCLCO I
                  WHERE
                        ( A.COCOCODI in  ( SELECT to_number(regexp_substr( sbVentaBrilla,
                                                                           '[^,]+',
                                                                           1,
                                                                           LEVEL
                                                                         )
                                                           ) AS VentaBrilla
                                             FROM dual
                                           CONNECT BY regexp_substr(sbVentaBrilla, '[^,]+', 1, LEVEL) IS NOT NULL 
                                         )
                        )
                        AND A.COCOTCCO=B.TCCOCODI
                        and  C.CORCCOCO = A.COCOCODI
                        AND F.CLCRCORC =C.CORCCONS
                        AND C.CORCTIDO=D.TIDCCODI
                        AND C.CORCTIMO=E.TIMOCODI
                        AND F.CLCRCONS=I.RCCCCLCR
                        AND F.CLCRCLCO=G.CLCOCODI
                        AND  d.tidccodi=71
                        AND CORCTIMO = 1
                        )) m
    WHERE cc.cucocodi = c.cargcuco
      and c.CARGCONC = CO.CONCCODI
      and m.cod_clascont = concclco
      --<< OSF-1073
      and m.cod_clascont not in  ( SELECT to_number(regexp_substr(vaClasNoCa19,
                                                                  '[^,]+',
                                                                  1,
                                                                  LEVEL
                                                                 )
                                                   ) AS ClasNoCa19
                                     FROM dual
                                   CONNECT BY regexp_substr(vaClasNoCa19, '[^,]+', 1, LEVEL) IS NOT NULL 
                                 )
      -->>
      and c.cargcaca = 19
      and c.cargtipr in ('A')
      and c.cargsign in ('DB')
      AND c.cargfecr >=  daFecha_Inicio
      AND c.cargfecr <=  daFecha_Fin
    group by m.porc_participa,
           m.cuenta_contable,
           m.naturaleza,
           CARGCONC,
           concclco,
           m.DESC_CLASCONT,
           COMPROBANTE,substr(cargdoso,4),c.cargfecr,
           DES_COMPROBANTE,
           COD_TIPCOMPROBANTE,
           DESC_TIPCOMPROBANTE , CC.CUCOCATE ,cc.cuconuse

	UNION ALL
    --<<
    -- Dcardona: Aranda 5041
    -- 09/02/2016
    -- NOTAS POR VENTA BRILLA
    -->>
    SELECT
           m.porc_participa,
           null dcrccons,
           null dcrcecrc,
           null dcrccorc,
           m.cuenta_contable cuenta,
           m.naturaleza signos,
           sum(CARGVALO) VALOR,
           '|'||
           --<< OSF-1073
           --ldci_pkinterfazsap.fnuDatosVentaBrillaRO(REPLACE(SUBSTR(no.notaobse,INSTR(no.notaobse,'[')+1),']'))||
           Decode(concclco, ( SELECT to_number(regexp_substr( 
                                                              vaClasCardif,
                                                              '[^,]+',
                                                              1,
                                                              LEVEL
                                                            )
                                              ) AS ClasCardif
                                FROM dual
                              CONNECT BY regexp_substr(vaClasCardif, '[^,]+', 1, LEVEL) IS NOT NULL 
                            ),
                            NULL,
                            ldci_pkinterfazsap.fnuDatosVentaBrillaRo(REPLACE(SUBSTR(no.notaobse,INSTR(no.notaobse,'[')+1),']'))
                 )||
           -->>
           '|||'||cc.cucoCATE||'||||||||||||'||
           (SELECT  unique b.geograp_location_id
              FROM pr_product a , ab_address b
             WHERE a.address_id = b.address_id
               and a.product_id = cc.cuconuse)
               ||'|||||||||||||||||||||||||||||' ||REPLACE(SUBSTR(no.notaobse,INSTR(no.notaobse,'[')+1),']')
           dcrcinad,
           ca.cargfecr dcrcfecr,
           null dcrcclcr,
           'OPEN' dcrcusua,
           'NO TERMINAL' dcrcterm,
           null dcrcprog,
           null dcrcsist,
           concclco Clasificador,
           m.DESC_CLASCONT,
           COMPROBANTE,
           DES_COMPROBANTE,
           COD_TIPCOMPROBANTE,
           DESC_TIPCOMPROBANTE,
           ca.cargfecr fecha
           , (SELECT ledgers from LDCI_TIPOINTERFAZ WHERE LDCI_TIPOINTERFAZ.COD_COMPROBANTE = COMPROBANTE AND TIPOINTERFAZ = 'L1') ledgers
    from open.cargos ca,
         open.CONCEPTO CO,
         open.CUENCOBR cc,
         OPEN.notas no,
         (SELECT NATURALEZA,CUENTA_CONTABLE,COMPROBANTE,DES_COMPROBANTE,COD_TIPCOMPROBANTE,DESC_TIPCOMPROBANTE,PORC_PARTICIPA, COD_CLASCONT,DESC_CLASCONT
                FROM (
                  SELECT
                        A.COCOCODI COMPROBANTE,
                        A.COCODESC DES_COMPROBANTE,
                        B.TCCOCODI COD_TIPCOMPROBANTE,
                        B.TCCODESC DESC_TIPCOMPROBANTE,
                        d.tidccodi COD_TIPODOCUMENTO,
                        D.TIDCDESC DESC_TIPODOCUMENTO,
                        F.CLCRCONS,
                        G.CLCOCODI COD_CLASCONT,
                        G.CLCODESC DESC_CLASCONT,
                        I.RCCCPOPA PORC_PARTICIPA,
                        i.rcccnatu NATURALEZA,
                        I.rccccuco CUENTA_CONTABLE
                  FROM  OPEN.IC_COMPCONT A,     OPEN.IC_TICOCONT B,      OPEN.IC_CONFRECO C ,
                        OPEN.IC_TIPODOCO D ,    OPEN.IC_TIPOMOVI E ,      OPEN.IC_CLASCORE F ,
                        OPEN.IC_CLASCONT G,     OPEN.IC_RECOCLCO I
                  WHERE
                        ( A.COCOCODI in ( SELECT to_number(regexp_substr(
                                                                         vaCompnotas,
                                                                         '[^,]+',
                                                                         1,
                                                                         LEVEL
                                                                        )
                                                          ) AS Compnotas
                                            FROM dual
                                          CONNECT BY regexp_substr(vaCompnotas, '[^,]+', 1, LEVEL) IS NOT NULL 
                                        )
                        )
                        AND A.COCOTCCO=  B.TCCOCODI
                        and C.CORCCOCO = A.COCOCODI
                        AND F.CLCRCORC = C.CORCCONS
                        AND C.CORCTIDO = D.TIDCCODI
                        AND C.CORCTIMO = E.TIMOCODI
                        AND F.CLCRCONS = I.RCCCCLCR
                        AND F.CLCRCLCO = G.CLCOCODI
                        AND d.tidccodi = 73   -- notas
                        --<< CA-0000239
                        --AND F.clcrclco = vaClasBrilla -- Parametro Clasificador de Brilla nuevo
                        AND F.clcrclco IN ( SELECT to_number(regexp_substr(
                                                                           vaClasBrilla,
                                                                           '[^,]+',
                                                                           1,
                                                                           LEVEL
                                                                          )
                                                            ) AS ClasBrilla
                                              FROM dual
                                           CONNECT BY regexp_substr(vaClasBrilla, '[^,]+', 1, LEVEL) IS NOT NULL 
                                          )
                        -->>
                        AND CORCTIMO   = 16   -- Notas por concepto
                        )) m
    WHERE cc.cucocodi = ca.cargcuco
      and ca.cargconc = co.conccodi
      and m.cod_clascont = concclco
      and ca.cargcaca = 19
      and ca.cargtipr  in ('P')
      --AND CO.concclco IN (SELECT TO_NUMBER(COLUMN_VALUE)
      --                      FROM TABLE
      --                      (open.LDC_BOUTILITIES.SPLITSTRINGS(vaClasBrilla,',') ) )
      -->>
      AND no.notanume = ca.cargcodo
      AND ca.cargfecr >=  daFecha_Inicio
      AND ca.cargfecr <=  daFecha_Fin
    group by m.porc_participa,
           m.cuenta_contable,
           m.naturaleza,
           CARGCONC,
           concclco,
           m.DESC_CLASCONT,
           COMPROBANTE,substr(cargdoso,4),ca.cargfecr,
           no.notaobse,
           DES_COMPROBANTE,
           COD_TIPCOMPROBANTE,
           DESC_TIPCOMPROBANTE , CC.CUCOCATE ,cc.cuconuse;



      TYPE tyDatIngresos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
      vtyDatIngresos tyDatIngresos;
      --<<
      --definicion de variables
      -->>
      nuRet          NUMBER;
      nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
      vaClave        ldci_claveconta.clavcodi%TYPE;
      iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
      iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
      nuCentBen NUMBER;
      sbOrdInt VARCHAR2(100);
      nuCategoria NUMBER;
      sbSegmento VARCHAR2(200);
      sbDescripcionNit VARCHAR2(200);
      daFECHBASE date;
      daFechaContab date;
      sbEsDivergente VARCHAR2(2);
      nuNIT VARCHAR2(100);
      nuCLASECTA number;
      nuASIGNACN number;
      nuCLAVREF1 number;
      sbCLAVREF3  VARCHAR2(100);
      nuCTADIV   number;
      nuCOD_CLASIFCONTA VARCHAR2(100);
      nuLocalidad NUMBER;
      centaerror NUMBER:=0;
      nuError NUMBER:=0;
      nuProcesado NUMBER:=0;
      sbVentaBrilla varchar2(250);
      vaEnviaInterfazIN    VARCHAR2(1);                 -- Parametro para el control de envio de Interfaces a SAP
      vaDistriIVA          VARCHAR2(1);                 -- Indica si se realiza distribucion del IVA
	  nuTipoServicio NUMBER;
	  nuCiclo        ciclo.ciclcodi%type;

    nuVlrAjuste   NUMBER; -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

  BEGIN

    ldci_pkinterfazsap.vaCODINTINTERFAZ := sbTipoInterfaz;
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'IC_VENTA_BRILLA', sbVentaBrilla, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'ENVIAINTERFAZIN', vaEnviaInterfazIN, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'DISTRIVAINGRESOS', vaDistriIVA, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'CLASCONT_BRILLA_INGRESOS', vaClasBrilla, osbErrorMessage);

    --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L1_Limite', nuVlrAjuste, osbErrorMessage);

    --<< CA-288
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CLASIFICADOR_CARDIF', vaClasCardif, osbErrorMessage);
    -->> 

    --<< OSF-1073  
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'EXCLUYE_CLASIF_CON_CAUSAL_19', vaClasNoCa19, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'COMPROBANTE_NOTAS_FNB', vaCompnotas, osbErrorMessage);
    -->>

    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,sbTipoInterfaz);
    IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Generar interfaz '||sbTipoInterfaz||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
            raise Error;
    END IF;

    --<<
    --Se valida la existencia de las fechas de cierre comercial y se obtienen las fecha de inicio
    --y final del periodo
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetFechaCierre(nuAnio,nuMes,daFecha_Inicio,daFecha_Fin);

    -- Formatea las fechas
    daFecha_Inicio := to_date(substr(to_char(daFecha_Inicio),1,10)||' 00:00:00','dd/mm/yyyy hh24:mi:ss');
    daFecha_Fin := to_date(substr(to_char(daFecha_Fin),1,10)||' 23:59:59','dd/mm/yyyy hh24:mi:ss');

    dbms_output.put_Line('Inicio - Fin '||daFecha_Inicio||'  '||daFecha_Fin);

    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede obtener Fechas para cierre comercial en el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide la tabla LDC_CIERCOME',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

     LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Inicia el proceso de Consulta para  el A?o :['||nuAnio||'] y mes ['||nuMes||'] Parametro: Venta Brilla ['||sbVentaBrilla||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
     --<<
     --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
     -->>
   ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
   LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,sbTipoInterfaz||' Inicia Interfaz de Ingresos : Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    OPEN  cuInformacion (sbTipoInterfaz, sbVentaBrilla);
    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatIngresos
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatIngresos.first IS null);

        -- Procesa ingresos
        if vtyDatIngresos.count > 0 then


           FOR i IN vtyDatIngresos.First..vtyDatIngresos.Last LOOP

              vaClave  := NULL;
              sbOrdInt := NULL;

              --<<
              --obtiene la clave contable a partir de la cuenta
              -->>
              vaClave := fvaGetClaveContaIngreso(vtyDatIngresos(i).clasificador,vtyDatIngresos(i).cuenta, vtyDatIngresos(i).signos,vtyDatIngresos(i).porcent, iovactcaicme, iovactcainiv);

              --<<
              --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
              -->>
              if (vaClave is null or vaClave < 0) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatIngresos(i).TipoComprobante||'] Comprobante ['||vtyDatIngresos(i).Comprobante||'] Clasificador ['||vtyDatIngresos(i).clasificador|| '] Cuenta  ['||vtyDatIngresos(i).cuenta||'] Signo ['||vtyDatIngresos(i).signos||'] Porcentaje '||vtyDatIngresos(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                nuError := -1;
              end if;

              --<<
              --Se Obtiene la Categoria Y  la localida
              -->>
              nuLocalidad 		:=ldci_pkinterfazsap.fvaGetData(17,vtyDatIngresos(i).dcrcinad,'|');
              nuCategoria 		:=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatIngresos(i).dcrcinad,'|'),NULL);
			  nuTipoServicio	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,vtyDatIngresos(i).dcrcinad,'|'),NULL);
			  nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,vtyDatIngresos(i).dcrcinad,'|'),NULL);
              nuCOD_CLASIFCONTA	:=vtyDatIngresos(i).clasificador;

              nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(2,vtyDatIngresos(i).dcrcinad,'|'),fvaGetNitDetallado(vtyDatIngresos(i).cuenta,nuCOD_CLASIFCONTA)),null);
              nuNIT:=replace(nuNIT,'-','');
              sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
              sbEsDivergente:=fnuGetDivergente(vaClave);

              --<<
              -- Si la cuenta inicia en 4 [Ingresos]
              -->>
              IF (vtyDatIngresos(i).cuenta LIKE '4%') THEN

									-- Aranda 7100
									if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
										sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
									else
										sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
									end if;

                  if(sbOrdInt=-1) THEN
                      LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener la Orden Interna  para el Clasificador Contable:['||nuCOD_CLASIFCONTA||'] Con la Categoria :['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                      sbOrdInt:=NULL;
                  END IF;

              END IF;

            if NOT tbCentroBeneficio.exists(nuLocalidad) then
                nuCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebeNoCat(nuLocalidad),NULL);
                -- Cache para almacenar los diferentes centros de beneficio
                tbCentroBeneficio(nuLocalidad) :=  nuCentBen;
            else
                nuCentBen:= tbCentroBeneficio(nuLocalidad);
            END if;

            if(nuCentBen = 0 or nuCentBen is null) then
              sbSegmento:='N/A';
              LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,' Interfaz [ '||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Centro de Beneficio para la Localidad  :['||nuLocalidad||'] Con Categoria ['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
              centaerror:=centaerror+1;
            else
              sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
            end if;

              IF (sbEsDivergente='S') THEN --Si la cuenta es Divergente
                  nuCLASECTA := nuNIT;
                  nuASIGNACN := nuNIT;
                  nuCLAVREF1 := nuNIT;
                  sbCLAVREF3 := sbDescripcionNit;
                  nuCTADIV   := vtyDatIngresos(i).cuenta;
              ELSE  --Si la cuenta No es Divergente
                  nuCLASECTA := vtyDatIngresos(i).cuenta;
                  nuASIGNACN := nuNIT;
                  nuCLAVREF1 := nuNIT;
                  sbCLAVREF3 := sbDescripcionNit;
                  nuCTADIV   := '';
              END IF;

              daFechaContab := daFecha_Fin +1;

                -- Obtiene el Ledger
                sbLEDGERS := fsbGetLedgers(sbTipoInterfaz, vtyDatIngresos(i).comprobante);

                --<<
                --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                -->>
              nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(sbTipoInterfaz,
                                                  ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  trunc(daFechaContab),
                                                  user,
                                                  'SERVER',
                                                  TRUNC(sysdate),
                                                  nuCOD_CLASIFCONTA,
                                                  vaClave,
                                                  nuCLASECTA,
                                                  iovactcaicme,
                                                  vtyDatIngresos(i).VALOR,
                                                  vtyDatIngresos(i).VALOR,
                                                  iovactcainiv,
                                                  null,
                                                  'INGRESOS '||ldci_pkinterfazsap.nuSeqICLINUDO||'-'||ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  null,
                                                  null,
                                                  ldci_pkinterfazsap.vaSOCIEDAD,
                                                  null,
                                                  null,
                                                  null,
                                                  null,
                                                  i,
                                                  nuCTADIV,
                                                  nuASIGNACN,
                                                  nuCLAVREF1,
                                                  sbCLAVREF3,
                                                  '',
                                                  nuCentBen,
                                                  sbOrdInt,
                                                  sbSegmento,
                                                  NULL,
                                                  vtyDatIngresos(i).comprobante,
                                                  sbLEDGERS,
                                                  vtyDatIngresos(i).dcrcinad);

              --<<
              --Se lanza la Exepcion sin la funcion no se ejecuto con exito
              -->>
              IF (nuRet <> 0) THEN
                  LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ejecutar fnuLDCI_INCOLIQU :['||sbTipoInterfaz||'] '||
                    vtyDatIngresos(i).dcrccons||' '||vtyDatIngresos(i).cuenta||' '||vtyDatIngresos(i).dcrcinad,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
                  RAISE ERROR;
              END IF;
            END LOOP;
        END if;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Ejecutando fnuINSELDCI_INCOLIQU :['||sbTipoInterfaz||'] <'||vtyDatIngresos.count||'> <'||nuProcesado||'>',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
        --LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'...Fin Insercion en Incoliqu :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
         --<<
         --Se lanza la Exepcion sin la funcion no se ejecuto con exito
         -->>
         IF (nuRet <> 0) THEN
                LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ejecutar fnuINSELDCI_INCOLIQU :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
                Rollback;
                raise Error;
         END IF;

        nuProcesado := nuProcesado + vtyDatIngresos.count;
        /*<< Se libera el objeto utilizado para la obtencion de la informacion de Ingresos >> */
        --vtyDatIngresos.delete;
    END loop;

    close cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Finaliza proceso de consulta informacion procesado ['||nuProcesado||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    /*<< Se libera el objeto utilizado para la obtencion de la informacion de Ingresos >> */
    vtyDatIngresos.delete;

    --Cuando no existe Orden Interna para lmenos un Clasificador
    IF (nuError <> 0) THEN
        Rollback;
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'vaClave is null or vaClave < 0 ['|| ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Cuando falta al menos un centro de beneficio se aborta el resto del proceso
    -->>
    IF ( centaerror > 0) THEN
        Rollback;
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede obtener el Centro de Beneficio para la Localidad ['|| ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Se inserta la informacion del impuesto
    -->>
    commit;

    --<<
    -- Se verfica el par?metro de distribucion de IVA
    -->>
    IF (vaDistriIVA = 'S') THEN

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Insertando en Impuesto :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        nuRet := ldci_pkinterfazsap.fnuDistriImpuestoRO (sbTipoInterfaz,ldci_pkinterfazsap.nuSeqICLINUDO,ldci_pkinterfazsap.vaSOCIEDAD,daFecha_Inicio,daFecha_Fin);
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Fin Inserta en Impuesto :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

        --<<
        --Se lanza la Exepcion sin la funcion no se ejecuto con exito
        -->>
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ldci_pkinterfazsap.fnuDistriImpuestoRO :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

    END IF;

    -- Asienta valores de ldci_incoliqu
    commit;
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Guarda en ldci_incoliqu :['||sbTipoInterfaz||'] nudo['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

     --<<
     --Genera la informacion de los documentos para SAP de la interfaz de INGRESOS
     -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Iniciando fnuGeneDocuSap_INGRESOS... :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaCuentaIva',vaCUENTAIVA, osbErrorMessage);

    dbms_output.put_Line(ldci_pkinterfazsap.nuSeqICLINUDO||'|'||'INGRESOS'||'|'||vaCUENTAIVA||'|'||sbTipoInterfaz);

    nuRet := ldci_pkinterfazsap.fnuGeneDocuSap_INGRESOS(ldci_pkinterfazsap.nuSeqICLINUDO, 'INGRESOS',vaCUENTAIVA,sbTipoInterfaz);

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'...Fin fnuGeneDocuSap_INGRESOS :['||sbTipoInterfaz||'] '||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
     IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ldci_pkinterfazsap.fnuGeneDocuSap_INGRESOS :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
          RAISE ERROR;
     END IF;

     --<<
      --Se valida para corregir el descuadre por cada documento
      -->>
      LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Iniciando fnuAjusteInterContable... :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
      nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,sbTipoInterfaz,nuVlrAjuste); -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr
      LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'...Finalizando fnuAjusteInterContable :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

      IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
          RAISE ERROR;
      END IF;
     -- Asienta registros
     commit;

     --<<
     -- Valida si la trama Generada por Documento e Identificador no supere los 998 Registros.
     -- Se realiza despues de la confirmacion para validar si por algun motivo diferente al
     -- contemplado en la trama no se pueda Dividir. Y poder hacer Ajuste Manual.
     -->>
     nuRet := fnusplitdocclas(nucodtrama => ldci_pkinterfazsap.nuSeqICLINUDO);

     IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Error al Dividir Documento ldci_pkinterfazsap.fnusplitdocclas :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
          RAISE ERROR;
      END IF;
      COMMIT;


     --<<
     --Si es satifactorio todo el proceso, se realiza el envio a SAP
     --Procedimiento Hector Dominguez
     -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Iniciando proEnviaDocContable :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
    IF (vaEnviaInterfazIN = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Se genero con exito en interfaz ingresos - L1 Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S',sbTipoInterfaz);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz fnuRegistraInterfazAnioMes :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    return(0);

    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuInterfazIngresoRO] - Validar la Configuracion de Registo, tiene mas porcentajes de los esperados para el calculo. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Error fnuInterfazIngresoRO Valores Repetidos:['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
       return(-1);
    WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuInterfazIngresoRO] - '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Error fnuInterfazIngresoRO Otros Errores :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
       dbms_output.put_Line(sqlerrm);
       return(-1);
    END fnuInterfazIngresoRO;

  FUNCTION fnuInterfazProvIngresoRO(idaFecha_Inicio    DATE,
                                    idaFecha_Fin       DATE)
  RETURN NUMBER
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazProvIngresoRO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 23-09-2014
     DESCRIPCION  : Copia del m?todo fnuInterfazIngresoRO
                    funcion que se encarga de armar obtener la informacion de la interfaz
                    de todos los Ingresos en SAP (a excepcion de consumo).

    Parametros de Entrada :
      nutimocodi  Tipo de interfaz := 'LI'
      nuMes       Mes para generaci?n de la Interfaz
      nuAnio      A?o para generaci?n de la Interfaz

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion

  ************************************************************************/

      --<<
      -- Variables
      -->>
      nuRet             NUMBER;
      vaClave           ldci_claveconta.clavcodi%TYPE;
      iovactcaicme      LDCI_CTACADMI.ctcaicme%TYPE;
      iovactcainiv      LDCI_CTACADMI.ctcainiv%TYPE;
      nuCentBen         NUMBER;
      nuCategoria       NUMBER;
      sbSegmento        VARCHAR2(200);
      sbDescripcionNit  VARCHAR2(200);
      daFechaContab     DATE;
      sbEsDivergente    VARCHAR2(2);
      nuNIT             VARCHAR2(100);
      nuCLASECTA        number;
      nuASIGNACN        number;
      nuCLAVREF1        number;
      sbCLAVREF3        VARCHAR2(100);
      nuCTADIV          number;
      nuCOD_CLASIFCONTA VARCHAR2(100);
      nuLocalidad       NUMBER;
      centaerror        NUMBER:=0;
      nuError           NUMBER:=0;
      nuProcesado       NUMBER:=0;
      sbTipoInterfaz    ldci_tipointerfaz.tipointerfaz%TYPE;
      daFecha_Inicio    DATE;
      daFecha_Fin       DATE;
      vaEnviaInterfazPI VARCHAR2(1); --Parametro para el control de envio de Interfaces a SAP
      sbOrdInt          VARCHAR2(100);
	    nuTipoServicio 	NUMBER;
	    nuCiclo        	ciclo.ciclcodi%type;

      CURSOR cuInformacion (vaTipoInterfaz in VARCHAR2)
      IS
      SELECT 100 porcent,
             dcrccons,
             dcrcecrc,
             dcrccorc,
             dcrccuco cuenta,
             dcrcsign signos,
             dcrcvalo valor,
             dcrcinad,
             dcrcfecr,
             dcrcclcr,
             dcrcusua,
             dcrcterm,
             dcrcprog,
             dcrcsist,
             clcrclco clasificador,
             clcodesc,
             corccoco Comprobante ,
             (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
             corctido TipoComprobante,
             (select tccodesc from ic_ticocont
                  where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
             ) DescTipoComprobante,
             ecrcfech
             , ledgers
        FROM ic_encoreco
        JOIN ic_decoreco on (ecrccons = dcrcecrc)
        JOIN ic_confreco on (dcrccorc = corccons )
        JOIN ic_clascore on (clcrcons = dcrcclcr)
        JOIN ic_clascont on (clcrclco=clcocodi)
        JOIN LDCI_TIPOINTERFAZ on ( corccoco = COD_COMPROBANTE AND TIPOINTERFAZ  = vaTipoInterfaz)
       WHERE ecrcfech >= daFecha_Inicio
         AND ecrcfech <=  daFecha_Fin; /*Fecha diaria, con la cual se generan los documentos*/

      TYPE tyDatIngresos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
      vtyDatIngresos tyDatIngresos;

      nuVlrAjuste   NUMBER; -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

  BEGIN

    sbTipoInterfaz := 'LI';
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'ENVIAINTERFAZPI', vaEnviaInterfazPI, osbErrorMessage);

    --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'LI_Limite', nuVlrAjuste, osbErrorMessage);

    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegFecha(trunc(daFecha_Inicio),sbTipoInterfaz);
    IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Generar interfaz '||sbTipoInterfaz||' para la fecha :['||trunc(daFecha_Inicio)||']. Valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
            raise Error;
    END IF;

    -- Formatea las fechas
    daFecha_Inicio := to_date(substr(to_char(idaFecha_Inicio),1,10)||' 00:00:00','dd/mm/yyyy hh24:mi:ss');
    daFecha_Fin := to_date(substr(to_char(idaFecha_Fin),1,10)||' 23:59:59','dd/mm/yyyy hh24:mi:ss');

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Inicia el proceso',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    --<<
    --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
    -->>
    ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,sbTipoInterfaz||' Inicia Interfaz de Provisi?n de Ingresos : Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    OPEN  cuInformacion (sbTipoInterfaz);
    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatIngresos
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatIngresos.first IS null);

        -- Procesa ingresos
        if vtyDatIngresos.count > 0 then


           FOR i IN vtyDatIngresos.First..vtyDatIngresos.Last LOOP

              vaClave  := NULL;
              sbOrdInt := NULL;

              --<<
              --obtiene la clave contable a partir de la cuenta
              -->>
              vaClave := fvaGetClaveContaIngreso(vtyDatIngresos(i).clasificador,vtyDatIngresos(i).cuenta, vtyDatIngresos(i).signos,vtyDatIngresos(i).porcent, iovactcaicme, iovactcainiv);

              --<<
              --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
              -->>
              if (vaClave is null or vaClave < 0) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatIngresos(i).TipoComprobante||'] Comprobante ['||vtyDatIngresos(i).Comprobante||'] Clasificador ['||vtyDatIngresos(i).clasificador|| '] Cuenta  ['||vtyDatIngresos(i).cuenta||'] Signo ['||vtyDatIngresos(i).signos||'] Porcentaje '||vtyDatIngresos(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
                nuError := -1;
              end if;

              --<<
              --Se Obtiene la Categoria Y  la localida
              -->>
              nuLocalidad 		:=ldci_pkinterfazsap.fvaGetData(17,vtyDatIngresos(i).dcrcinad,'|');
              nuCategoria 		:=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatIngresos(i).dcrcinad,'|'),NULL);
			  nuTipoServicio	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,vtyDatIngresos(i).dcrcinad,'|'),NULL);
			  nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,vtyDatIngresos(i).dcrcinad,'|'),NULL);
              nuCOD_CLASIFCONTA:=vtyDatIngresos(i).clasificador;

              nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(2,vtyDatIngresos(i).dcrcinad,'|'),fvaGetNitDetallado(vtyDatIngresos(i).cuenta,nuCOD_CLASIFCONTA)),null);
              nuNIT:=replace(nuNIT,'-','');
              sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
              sbEsDivergente:=fnuGetDivergente(vaClave);

              --<<
              -- Si la cuenta inicia en 4 [Ingresos]
              -->>
              IF (vtyDatIngresos(i).cuenta LIKE '4%') THEN

										-- Aranda 7100
										if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
											sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
										else
											sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
										end if;

                    IF(sbOrdInt=-1) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener la Orden Interna  para el Clasificador Contable:['||nuCOD_CLASIFCONTA||'] Con la Categoria :['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        sbOrdInt:=NULL;
                    END IF;

              END IF;

            if NOT tbCentroBeneficio.exists(nuLocalidad) then
                nuCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebeNoCat(nuLocalidad),NULL);
                -- Cache para almacenar los diferentes centros de beneficio
                tbCentroBeneficio(nuLocalidad) :=  nuCentBen;
            else
                nuCentBen:= tbCentroBeneficio(nuLocalidad);
            END if;

            if(nuCentBen = 0 or nuCentBen is null) then
              sbSegmento:='N/A';
              LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,' Interfaz [ '||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Centro de Beneficio para la Localidad  :['||nuLocalidad||'] Con Categoria ['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
              centaerror:=centaerror+1;
            else
              sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
            end if;

              IF (sbEsDivergente='S') THEN --Si la cuenta es Divergente
                  nuCLASECTA := nuNIT;
                  nuASIGNACN := nuNIT;
                  nuCLAVREF1 := nuNIT;
                  sbCLAVREF3 := sbDescripcionNit;
                  nuCTADIV   := vtyDatIngresos(i).cuenta;
              ELSE  --Si la cuenta No es Divergente
                  nuCLASECTA := vtyDatIngresos(i).cuenta;
                  nuASIGNACN := nuNIT;
                  nuCLAVREF1 := nuNIT;
                  sbCLAVREF3 := sbDescripcionNit;
                  nuCTADIV   := '';
              END IF;

              daFechaContab := daFecha_Fin +1;

              -- Obtiene el Ledger
              sbLEDGERS := fsbGetLedgers(sbTipoInterfaz, vtyDatIngresos(i).comprobante);

              --<<
              --Inserta los datos en la tabla vtyLDCI_INCOLIQU
              -->>
              nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(sbTipoInterfaz,
                                                  ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  trunc(daFechaContab),
                                                  user,
                                                  'SERVER',
                                                  TRUNC(sysdate),
                                                  nuCOD_CLASIFCONTA,
                                                  vaClave,
                                                  nuCLASECTA,
                                                  iovactcaicme,
                                                  vtyDatIngresos(i).VALOR,
                                                  vtyDatIngresos(i).VALOR,
                                                  iovactcainiv,
                                                  null,
                                                  'INGRESOS '||ldci_pkinterfazsap.nuSeqICLINUDO||'-'||ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  null,
                                                  null,
                                                  ldci_pkinterfazsap.vaSOCIEDAD,
                                                  null,
                                                  null,
                                                  null,
                                                  null,
                                                  i,
                                                  nuCTADIV,
                                                  nuASIGNACN,
                                                  nuCLAVREF1,
                                                  sbCLAVREF3,
                                                  '',
                                                  nuCentBen,
                                                  sbOrdInt,
                                                  sbSegmento,
                                                  NULL,
                                                  vtyDatIngresos(i).comprobante,
                                                  sbLEDGERS,
                                                  vtyDatIngresos(i).dcrcinad);

              --<<
              --Se lanza la Exepcion sin la funcion no se ejecuto con exito
              -->>
              IF (nuRet <> 0) THEN
                  LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ejecutar fnuLDCI_INCOLIQU :['||sbTipoInterfaz||'] '||
                    vtyDatIngresos(i).dcrccons||' '||vtyDatIngresos(i).cuenta||' '||vtyDatIngresos(i).dcrcinad,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
                  RAISE ERROR;
              END IF;
            END LOOP;
        END if;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Ejecutando fnuINSELDCI_INCOLIQU :['||sbTipoInterfaz||'] <'||vtyDatIngresos.count||'> <'||nuProcesado||'>',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
        --LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'...Fin Insercion en Incoliqu :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
         --<<
         --Se lanza la Exepcion sin la funcion no se ejecuto con exito
         -->>
         IF (nuRet <> 0) THEN
                LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ejecutar fnuINSELDCI_INCOLIQU :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
                Rollback;
                raise Error;
         END IF;

        nuProcesado := nuProcesado + vtyDatIngresos.count;
        /*<< Se libera el objeto utilizado para la obtencion de la informacion de Ingresos >> */
        --vtyDatIngresos.delete;
    END loop;

    close cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Finaliza proceso de consulta informacion procesado ['||nuProcesado||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    /*<< Se libera el objeto utilizado para la obtencion de la informacion de Ingresos >> */
    vtyDatIngresos.delete;

    --<<
    --Cuando falta al menos un centro de beneficio se aborta el resto del proceso
    -->>
    IF ( centaerror > 0) THEN
        Rollback;
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede obtener el Centro de Beneficio para la Localidad ['|| ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Se inserta la informacion del impuesto
    -->>
    commit;

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Guarda en ldci_incoliqu :['||sbTipoInterfaz||'] nudo['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

     --<<
     --Genera la informacion de los documentos para SAP de la interfaz de INGRESOS
     -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Iniciando fnuGeneDocuSap_INGRESOS... :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaCuentaIva',vaCUENTAIVA, osbErrorMessage);

    dbms_output.put_Line(ldci_pkinterfazsap.nuSeqICLINUDO||'|'||'INGRESOS'||'|'||vaCUENTAIVA||'|'||sbTipoInterfaz);

    nuRet := ldci_pkinterfazsap.fnuGeneDocuSap_INGRESOS(ldci_pkinterfazsap.nuSeqICLINUDO, 'INGRESOS',vaCUENTAIVA,sbTipoInterfaz);

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'...Fin fnuGeneDocuSap_INGRESOS :['||sbTipoInterfaz||'] '||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
     IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ldci_pkinterfazsap.fnuGeneDocuSap_INGRESOS :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          RAISE ERROR;
     END IF;

     --<<
      --Se valida para corregir el descuadre por cada documento
      -->>
      LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Iniciando fnuAjusteInterContable... :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
      nuRet := ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,sbTipoInterfaz,nuVlrAjuste); -- 23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
      LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'...Finalizando fnuAjusteInterContable :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

      IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
          RAISE ERROR;
      END IF;

      --<<
      -- Se actualiza le encabezado de la interfaz para que SAP la reciba como Provision (L5)
      -->>
      UPDATE ldci_encaintesap l
         SET l.clasedoc = 'L5'
       WHERE l.cod_interfazldc = ldci_pkinterfazsap.nuSeqICLINUDO;

     -- Asienta registros
     commit;

     --<<
     --Si es satifactorio todo el proceso, se realiza el envio a SAP
     --Procedimiento Hector Dominguez
     -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Iniciando proEnviaDocContable :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
    IF (vaEnviaInterfazPI = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Se genero con exito la interfaz de provisi?n de ingresos - LI Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));

    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfaz(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio,'S',sbTIPOINTERFAZ);

    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||sbTipoInterfaz||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    return(0);

    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuInterfazProvIngresoRO] - Validar la Configuracion de Registo, tiene mas porcentajes de los esperados para el calculo. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Error fnuInterfazProvIngresoRO Valores Repetidos:['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
       return(-1);
    WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuInterfazProvIngresoRO] - '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(sbTipoInterfaz,'Error fnuInterfazProvIngresoRO Otros Errores :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTipoInterfaz,USER,USERENV('TERMINAL'));
       dbms_output.put_Line(sqlerrm);
       return(-1);

    END fnuInterfazProvIngresoRO;


  FUNCTION fnuInterfazProvCartera (nutimocodi   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                            nuAnio NUMBER,
                            nuMes NUMBER)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazProvCartera
     AUTOR     : Oscar Restrepo
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar obtener la informacion de la interfaz
                    de Provision de Cartera en SAP.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion

  ************************************************************************/

   nuCantidad NUMBER;
   daFecha_Inicio DATE;
   daFecha_Fin DATE;

   CURSOR cuInformacion IS
    SELECT * FROM (
      SELECT
                     nutimocodi DocumentoSAP,
               Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL) TipoServ,
               ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|') nuLocalidad,
               ldci_pkinterfazsap.fvaGetData(5,dcrcinad,'|') nuCategoria,
               ldci_pkinterfazsap.fvaGetCebeNew(ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),ldci_pkinterfazsap.fvaGetData(5,dcrcinad,'|')) nuCentBen,
                     (select distinct a.rcccpopa from ic_recoclco a where clcrcons=a.rcccclcr and a.rccccuco=dcrccuco) porcent,
                     dcrccons,
                     dcrcecrc,
                     dcrccorc,
                     dcrccuco cuenta,
                     dcrcsign signos,
                     dcrcvalo valor,
                     dcrcinad,
                     dcrcfecr,
                     dcrcclcr,
                     dcrcusua,
                     dcrcterm,
                     dcrcprog,
                     dcrcsist,
                     clcrclco clasificador,
                     clcodesc,
                     corccoco Comprobante ,
                     (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                     corctido TipoComprobante,
                     (select tccodesc from ic_ticocont
                          where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                     ) DescTipoComprobante,
                     ecrcfech
        FROM       ic_encoreco
        JOIN       ic_decoreco on (ecrccons = dcrcecrc)
        JOIN       ic_confreco on (dcrccorc = corccons )
        JOIN       ic_clascore on (clcrcons = dcrcclcr)
        JOIN       ic_clascont on (clcrclco=clcocodi)
        WHERE      ecrccoco in (SELECT COD_COMPROBANTE from LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ =nutimocodi)
        AND        ecrcfech >= daFecha_Inicio
        and        ecrcfech <= daFecha_Fin)
        ORDER BY valor , nuCentBen
          ;

  TYPE tyDatProvCart IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyDatProvCart tyDatProvCart;

     --<<
     --definicion de variables
     -->>
     nuRet          NUMBER;
     nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
     vaClave        ldci_claveconta.clavcodi%TYPE;
     iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
     iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
     daFechaGen DATE;
     vaCod_centrocosto    ldci_costcebecuen.cecocodi%type;
     vaCod_centrobenef    ldci_costcebecuen.cecocebe%TYPE;
     nuLocalidad NUMBER;
     nuCategoria NUMBER;
     nuCentBen NUMBER;
     sbSegmento VARCHAR2(50);
     nuError NUMBER:=0;
     vaDesInterFaz VARCHAR2(200);

     nuVlrAjuste   NUMBER; -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

BEGIN
    ldci_pkinterfazsap.vaCODINTINTERFAZ:='L4';
    ldci_pkinterfazsap.vaSOCIEDAD:='GDOC';
    ldci_pkinterfazsap.vaCURRENCY:='COP';

    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CLAVE40', vaclave40, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CLAVE50', vaclave50, osbErrorMessage);

    --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L4_Limite', nuVlrAjuste, osbErrorMessage);

    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede Generar interfaz '||nutimocodi||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        raise Error;
     END IF;

    --<<
    --Fechas para La provision de consumo del mes enviado, obtiene el ultimo dia del mes
    -->>
    nuRet := ldci_pkinterfazsap.fnuRangoFechas(nuAnio,nuMes,daFecha_Inicio,daFecha_Fin);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la informacion Provision Cartera para el A?o :['||nuPefaano||'] y Mes ['||nuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
    -->>
    OPEN cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Registros a Procesar ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia Interfaz de Provision Cartera : Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatProvCart
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatProvCart.first IS null);

        --<<
        --Se evalua que la consulta contenga registros, en caso contratio retorna -1
        -->>
        IF (vtyDatProvCart.count > 0) THEN
            --<<
            --Obtencion delete numero de documento
            -->>

            FOR i IN vtyDatProvCart.First..vtyDatProvCart.Last LOOP
                nuCentBen := NULL;
                vaCod_centrocosto := NULL;
                vaClave := NULL;
                nuCategoria := NULL;
                nuLocalidad := NULL;

                IF (trunc(vtyDatProvCart(i).VALOR) > 0) THEN
                    daFechaGen := vtyDatProvCart(i).ecrcfech;
                    --<<
                    --obtiene la clave contable a partir de la cuenta
                    -->>
                    vaClave := fvaGetClaveContaIngreso(vtyDatProvCart(i).clasificador,vtyDatProvCart(i).cuenta, vtyDatProvCart(i).signos,vtyDatProvCart(i).porcent, iovactcaicme, iovactcainiv);

                    --<<
                    --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
                    -->>
                    if (vaClave is null or vaClave<0) then
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatProvCart(i).TipoComprobante||'] Comprobante ['||vtyDatProvCart(i).Comprobante||'] Clasificador ['||vtyDatProvCart(i).clasificador|| '] Cuenta  ['||vtyDatProvCart(i).cuenta||'] Signo ['||vtyDatProvCart(i).signos||'] Porcentaje '||vtyDatProvCart(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=1;
                    end if;
                    --<<
                    --Obtencion del Centro de Beneficio
                    -->>
                      nuLocalidad :=ldci_pkinterfazsap.fvaGetData(17,vtyDatProvCart(i).dcrcinad,'|');
                      nuCategoria :=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatProvCart(i).dcrcinad,'|'),NULL);
                      nuCentBen := ldci_pkinterfazsap.fvaGetCebeNew(nuLocalidad,nuCategoria);

                    --<<
                    --Procesamiento clave 50
                    -->>
                    sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
                    if (vtyDatProvCart(i).cuenta like '5%' or
                        vtyDatProvCart(i).cuenta like '7%') then
                        vaCod_centrocosto:=ldci_pkinterfazsap.fvaGetCecoCuen(vtyDatProvCart(i).cuenta,nuCentBen);
                        --<<
                        --Obtencion del centro de costo
                        -->>
                        if (vaCod_centrocosto IS NULL) then
                            vaCod_centrobenef := nuCentBen;
                        else
                            --vaCod_centrobenef := null;
                              vaCod_centrobenef := substr(vaCod_centrocosto,1,4);
                        end if;
                    else
                        vaCod_centrobenef:=nuCentBen;
                    end if;

                    IF (vaCod_centrocosto IS NULL AND vaCod_centrobenef IS NULL) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Para la Localidad ['||nuLocalidad||'] Con Categoria ['||nuCategoria||'] No existe Centro de Costo o Centro de Beneficio.',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=1;
                    END IF;

                    -- Obtiene el Ledger
                    sbLEDGERS := fsbGetLedgers(nutimocodi, vtyDatProvCart(i).comprobante);

                    --<<
                    --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                    -->>
                    --NULL;
                    nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_PROVCARTERA(nutimocodi,
                                          ldci_pkinterfazsap.nuSeqICLINUDO,
                                          TRUNC(sysdate),
                                          user,
                                          'SERVER',
                                          TRUNC(sysdate),
                                          vtyDatProvCart(i).clasificador,
                                          vaClave,
                                          vtyDatProvCart(i).cuenta,
                                          iovactcaicme,
                                          vtyDatProvCart(i).VALOR,
                                          vtyDatProvCart(i).VALOR,
                                          iovactcainiv,
                                          null,
                                          '-'||ldci_pkinterfazsap.nuSeqICLINUDO,
                                          null,
                                          null,
                                          'GDOC',
                                          null,
                                          null,
                                          vaCod_centrobenef,
                                          vaCod_centrocosto,
                                          i,
                                          ldci_pkinterfazsap.fnuCtaDiver(vaClave),
                                          sbSegmento,
                                          vtyDatProvCart(i).comprobante,
                                          sbLEDGERS,
                                          vtyDatProvCart(i).dcrcinad);

                    --<<
                    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
                    -->>
                    IF (nuRet <> 0) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ejecutar fnuInterfazProvCartera - fnuLDCI_INCOLIQU_PROVCARTERA :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
                        RAISE ERROR;
                    END IF;
                END if;
            END loop;
        END IF; --VALORES MAYORES QUE 0

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
        --<<
        --Se lanza la Excepcion sin la funcion no se ejecuto con exito
        -->>
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        vtyDatProvCart.delete;
    END LOOP;

    CLOSE cuInformacion;

    --<<
    --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
    -->>
    vtyDatProvCart.delete;

    IF (nuError<>0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error validando centro de beneficio :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
      RETURN -1; --Cuando existen errores con el Centro de Beneficion
    END IF;

   -- Asienta registros
    commit;

    --<<
    --Genera la informacion de los documentos para SAP de la interfaz de Provision Cartera
    -->>
    nuRet := ldci_pkinterfazsap.fnuGeneDocuSapProvCartera(ldci_pkinterfazsap.vaCODINTINTERFAZ,nuAnio,nuMes,ldci_pkinterfazsap.nuSeqICLINUDO, 'PROVCAR');
    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuGeneDocuSapProvCartera :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ejecutar fnuINSEINTESAP:['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;
    --<<
    --Se valida para corregir el descuadre por cada documento
    -->>
    nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,nutimocodi,nuVlrAjuste); --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Si es satifactorio todo el proceso, se realiza el envio a SAP
    --Procedimiento Hector Dominguez
    -->>
    IF (vaEnviaIntefazSAP = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Se genero con exito en interfaz Provision Cartera - Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfaz(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Fin,'S',nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    return(0);

EXCEPTION
WHEN OTHERS THEN
   ldci_pkinterfazsap.vaMensError := '[fnuInterfazProvCartera] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
   LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error fnuInterfazProvCartera :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
   return(-1);
END fnuInterfazProvCartera;


  FUNCTION fnuInterfazProvCarteraRO(nutimocodi   IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                    nuAnio       NUMBER,
                                    nuMes NUMBER)
  RETURN NUMBER
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazProvCarteraRO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 29-07-2014
     DESCRIPCION  : Copia del m?todo fnuInterfazProvCartera
                    Funcion que se encarga de armar obtener la informacion de la interfaz
                    de Provision de Cartera en SAP.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    -------- ----------- -------------------------------------------------
  ************************************************************************/

   nuCantidad NUMBER;
   daFecha_Inicio DATE;
   daFecha_Fin DATE;

   CURSOR cuInformacion IS
    SELECT * FROM (
      SELECT
                     nutimocodi DocumentoSAP,
               Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL) TipoServ,
               ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|') nuLocalidad,
               ldci_pkinterfazsap.fvaGetData(5,dcrcinad,'|') nuCategoria,
               ldci_pkinterfazsap.fvaGetCebeNoCat(ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|')) nuCentBen,
                     (select distinct a.rcccpopa from ic_recoclco a where clcrcons=a.rcccclcr and a.rccccuco=dcrccuco) porcent,
                     dcrccons,
                     dcrcecrc,
                     dcrccorc,
                     dcrccuco cuenta,
                     dcrcsign signos,
                     dcrcvalo valor,
                     dcrcinad,
                     dcrcfecr,
                     dcrcclcr,
                     dcrcusua,
                     dcrcterm,
                     dcrcprog,
                     dcrcsist,
                     clcrclco clasificador,
                     clcodesc,
                     corccoco Comprobante ,
                     (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                     corctido TipoComprobante,
                     (select tccodesc from ic_ticocont
                          where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                     ) DescTipoComprobante,
                     ecrcfech
        FROM       ic_encoreco
        JOIN       ic_decoreco on (ecrccons = dcrcecrc)
        JOIN       ic_confreco on (dcrccorc = corccons )
        JOIN       ic_clascore on (clcrcons = dcrcclcr)
        JOIN       ic_clascont on (clcrclco=clcocodi)
        WHERE      ecrccoco in (SELECT COD_COMPROBANTE from LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ =nutimocodi)
        AND        ecrcfech >= daFecha_Inicio
        and        ecrcfech <= daFecha_Fin)
        ORDER BY valor , nuCentBen
          ;

  TYPE tyDatProvCart IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyDatProvCart tyDatProvCart;

     --<<
     --definicion de variables
     -->>
     nuRet          NUMBER;
     nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
     vaClave        ldci_claveconta.clavcodi%TYPE;
     iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
     iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
     daFechaGen DATE;
     vaCod_centrocosto    ldci_costcebecuen.cecocodi%type;
     vaCod_centrobenef    ldci_costcebecuen.cecocebe%TYPE;
     nuLocalidad NUMBER;
     nuCentBen NUMBER;
     sbSegmento VARCHAR2(50);
     nuError NUMBER:=0;
     vaDesInterFaz VARCHAR2(200);
     vaEnviaInterfazPC    VARCHAR2(1); --Parametro para el control de envio de Interfaces a SAP

     nuVlrAjuste   NUMBER; -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

BEGIN

    ldci_pkinterfazsap.vaCodintinterfaz := nutimocodi;

    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'CLAVE40', vaclave40, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'CLAVE50', vaclave50, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'ENVIAINTERFAZPC', vaEnviaInterfazPC, osbErrorMessage);

    -- 23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L4_Limite', nuVlrAjuste, osbErrorMessage);


    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede Generar interfaz '||nutimocodi||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        raise Error;
     END IF;

    --<<
    --Fechas para La provision de consumo del mes enviado, obtiene el ultimo dia del mes
    -->>
    nuRet := ldci_pkinterfazsap.fnuRangoFechas(nuAnio,nuMes,daFecha_Inicio,daFecha_Fin);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la informacion Provision Cartera para el A?o :['||nuPefaano||'] y Mes ['||nuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
    -->>
    OPEN cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Registros a Procesar ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia Interfaz de Provision Cartera : Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatProvCart
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatProvCart.first IS null);

        --<<
        --Se evalua que la consulta contenga registros, en caso contratio retorna -1
        -->>
        IF (vtyDatProvCart.count > 0) THEN
            --<<
            --Obtencion delete numero de documento
            -->>

            FOR i IN vtyDatProvCart.First..vtyDatProvCart.Last LOOP
                nuCentBen := NULL;
                vaCod_centrocosto := NULL;
                vaClave := NULL;
                nuLocalidad := NULL;

                IF (trunc(vtyDatProvCart(i).VALOR) > 0) THEN
                    daFechaGen := vtyDatProvCart(i).ecrcfech;
                    --<<
                    --obtiene la clave contable a partir de la cuenta
                    -->>
                    vaClave := fvaGetClaveContaIngreso(vtyDatProvCart(i).clasificador,vtyDatProvCart(i).cuenta, vtyDatProvCart(i).signos,vtyDatProvCart(i).porcent, iovactcaicme, iovactcainiv);

                    --<<
                    --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
                    -->>
                    if (vaClave is null or vaClave<0) then
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatProvCart(i).TipoComprobante||'] Comprobante ['||vtyDatProvCart(i).Comprobante||'] Clasificador ['||vtyDatProvCart(i).clasificador|| '] Cuenta  ['||vtyDatProvCart(i).cuenta||'] Signo ['||vtyDatProvCart(i).signos||'] Porcentaje '||vtyDatProvCart(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=1;
                    end if;
                    --<<
                    --Obtencion del Centro de Beneficio
                    -->>
                      nuLocalidad :=ldci_pkinterfazsap.fvaGetData(17,vtyDatProvCart(i).dcrcinad,'|');
                      nuCentBen := ldci_pkinterfazsap.fvaGetCebeNoCat(nuLocalidad);

                    --<<
                    --Procesamiento clave 50
                    -->>
                    sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
                    if (vtyDatProvCart(i).cuenta like '5%' or
                        vtyDatProvCart(i).cuenta like '7%') then
                        vaCod_centrocosto:=ldci_pkinterfazsap.fvaGetCecoCuen(vtyDatProvCart(i).cuenta,nuCentBen);
                        --<<
                        --Obtencion del centro de costo
                        -->>
                        if (vaCod_centrocosto IS NULL) then
                            vaCod_centrobenef := nuCentBen;
                            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se encuentra CECO para la cuenta :['||vtyDatProvCart(i).cuenta||' el CEBE ' ||nuCentBen||' '||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
                        end if;
                        vaCod_centrobenef := nuCentBen;
                    else
                        vaCod_centrobenef:=nuCentBen;
                    end if;

                    IF (vaCod_centrocosto IS NULL AND vaCod_centrobenef IS NULL) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Para la Localidad ['||nuLocalidad||'] No existe Centro de Costo o Centro de Beneficio.',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=1;
                    END IF;

                    -- Obtiene el Ledger
                    sbLEDGERS := fsbGetLedgers(nutimocodi, vtyDatProvCart(i).comprobante);

                    --<<
                    --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                    -->>
                    --NULL;
                    nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_PROVCARTERA(nutimocodi,
                                          ldci_pkinterfazsap.nuSeqICLINUDO,
                                          TRUNC(sysdate),
                                          user,
                                          'SERVER',
                                          TRUNC(sysdate),
                                          vtyDatProvCart(i).clasificador,
                                          vaClave,
                                          vtyDatProvCart(i).cuenta,
                                          iovactcaicme,
                                          vtyDatProvCart(i).VALOR,
                                          vtyDatProvCart(i).VALOR,
                                          iovactcainiv,
                                          null,
                                          '-'||ldci_pkinterfazsap.nuSeqICLINUDO,
                                          null,
                                          null,
                                          ldci_pkinterfazsap.vaSOCIEDAD,
                                          null,
                                          null,
                                          vaCod_centrobenef,
                                          vaCod_centrocosto,
                                          i,
                                          ldci_pkinterfazsap.fnuCtaDiver(vaClave),
                                          sbSegmento,
                                          vtyDatProvCart(i).comprobante,
                                          sbLEDGERS,
                                          vtyDatProvCart(i).dcrcinad);

                    --<<
                    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
                    -->>
                    IF (nuRet <> 0) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ejecutar fnuInterfazProvCarteraRO - fnuLDCI_INCOLIQU_PROVCARTERA :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
                        RAISE ERROR;
                    END IF;
                END if;
            END loop;
        END IF; --VALORES MAYORES QUE 0

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
        --<<
        --Se lanza la Excepcion sin la funcion no se ejecuto con exito
        -->>
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

    END LOOP;

    CLOSE cuInformacion;

    --<<
    --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
    -->>
    vtyDatProvCart.delete;
    --end if;
    IF (nuError<>0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error validando centro de beneficio :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
      RETURN -1; --Cuando existen errores con el Centro de Beneficion
    END IF;

   -- Asienta registros
    commit;

    --<<
    --Genera la informacion de los documentos para SAP de la interfaz de Provision Cartera
    -->>
    nuRet := ldci_pkinterfazsap.fnuGeneDocuSapProvCartera(ldci_pkinterfazsap.vaCODINTINTERFAZ,nuAnio,nuMes,ldci_pkinterfazsap.nuSeqICLINUDO, 'PROVCAR');
    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuGeneDocuSapProvCartera :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ejecutar fnuINSEINTESAP:['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;
    --<<
    --Se valida para corregir el descuadre por cada documento
    -->>
    nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,nutimocodi,nuVlrAjuste); -- 23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Si es satifactorio todo el proceso, se realiza el envio a SAP
    --Procedimiento Hector Dominguez
    -->>
    IF (vaEnviaInterfazPC = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Se genero con exito en interfaz Provision Cartera - Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfaz(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Fin,'S',nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    return(0);

EXCEPTION
WHEN OTHERS THEN
   ldci_pkinterfazsap.vaMensError := '[fnuInterfazProvCarteraRO] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
   LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error fnuInterfazProvCarteraRO :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
   return(-1);
END fnuInterfazProvCarteraRO;

FUNCTION fnuInterfazReclaCartera_B (vaTIPINTINTERFAZ   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                            nuAnio NUMBER,
                            nuMes NUMBER)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazReclaCartera_B
     AUTOR     : Oscar Restrepo
     FECHA     : 15-05-2015
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar obtener la informacion de la interfaz
                    de REclasificacion de Cartera en SAP desde la foto de cartera.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  edmlar   31-05-2016    CA-100-10632 Se modifica el llamado de la funcion fnuGeneDocuSapReclaCartera
                         por fnuGeneDocuSapReclaCarteraRO.. Este caso hace referencia al CA 300-4247,
                         pero se unifica con el CA-100-10632.

  ************************************************************************/
		vaEstacor_exclu VARCHAR2(200) ;
		vaSOCIEDAD VARCHAR2(200) ;
		vaCURRENCY VARCHAR2(200) ;
		nuSeqICLINUDO NUMBER ;
		sbSentencia varchar2(2000);
		vaFechCorte VARCHAR2(25);
		vaCadena VARCHAR2(3000);
		nuclasi NUMBER;
		vaSigno VARCHAR2(3);
		vaCod_centrocosto    ldci_costcebecuen.cecocodi%type;
		sbLEDGERS ldci_tipointerfaz.ledgers%type;
		nuRet          NUMBER;
		nuNIT number ;
		sbDescripcionNit VARCHAR2(50);
		sbOrdInt VARCHAR2(100);
		vaEnviaIntefazSAP    VARCHAR2(1); --Parametro para el control de envio de Interfaces a SAP
		osbErrorMessage VARCHAR2(2000);
		Error   EXCEPTION;      --Manejo de exception para el paquete
		cnuLimite       CONSTANT number := 1000;
		nuclave VARCHAR2(100);

	CURSOR cuCtaCartera (innuclasi NUMBER) IS
			SELECT
						 --NVL(open.ldci_pkinterfazsap.fvaGetClaveContaPagos(COD_CLASCONT,CTA_CONTABLE,NATURA,100),0) CLAVE,
						 NATURA,
						 COD_COMPROBANTE,
						 COD_CLASCONT,
						 CTA_CONTABLE,
						 PORC_PARTICIPA,
						 VALOR,
						 (VALOR * (PORC_PARTICIPA/100)) VALOR_PORCENTAJE
			FROM
			(SELECT UNIQUE
						 COD_COMPROBANTE,
						 COD_CLASCONT,NATURA,
						 CTA_CONTABLE_CR,
						 CTA_CONTABLE_DB,
						 CASE WHEN CTA_CONTABLE_CR IS NULL THEN CTA_CONTABLE_DB ELSE CTA_CONTABLE_CR END CTA_CONTABLE,
						 PORC_PARTICIPA,
						 100 VALOR
			 FROM (
				SELECT
							 A.COCOCODI COD_COMPROBANTE,
							 G.CLCOCODI COD_CLASCONT,I.RCCCNATU NATURA,
							 decode (I.RCCCNATU,'D',I.RCCCCUCO) CTA_CONTABLE_DB,
							 decode (I.RCCCNATU,'C',I.RCCCCUCO) CTA_CONTABLE_CR,
							 I.RCCCPOPA PORC_PARTICIPA
				FROM  OPEN.IC_COMPCONT A, OPEN.IC_TICOCONT B, OPEN.IC_CONFRECO C, OPEN.IC_TIPODOCO D,
							OPEN.IC_TIPOMOVI E ,OPEN.IC_CLASCORE F, OPEN.IC_CLASCONT G, OPEN.IC_RECOCLCO I, IC_CRCORECO J
				WHERE
							B.TCCOCODI in (SELECT cod_tipocomp from LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ = vaTIPINTINTERFAZ ) AND           --TIPO COMPROBANTE RECLASIFICACION
							E.TIMOCODI = 59 AND          --TIPO MOVIMIENTO CARTERA
							J.CCRCCLCR(+)=F.CLCRCONS AND
							A.COCOCODI=C.CORCCOCO AND
							C.CORCTIDO=D.TIDCCODI AND
							C.CORCTIMO=E.TIMOCODI AND
							C.CORCCONS=F.CLCRCORC AND
							F.CLCRCLCO=G.CLCOCODI AND
							F.CLCRCONS=I.RCCCCLCR AND
							A.COCOTCCO=B.TCCOCODI
							)
			) CUENTAS_INGRESO
			WHERE CUENTAS_INGRESO.COD_CLASCONT = innuclasi;

	TYPE tyDatcuCtaCartera IS TABLE OF cuCtaCartera%ROWTYPE INDEX BY BINARY_INTEGER;
	vtyDatcuCtaCartera tyDatcuCtaCartera;


	CURSOR cuFechacorte IS
		select trunc(cicofech) fechacorte
			 from open.ldc_ciercome
				where cicoano = nuAnio
				and cicomes = nuMes;

		CURSOR cuReclacart (invaFechCorte VARCHAR2, invaEstacor_exclu VARCHAR2) IS
				select
					CACCSERV TIPOSERV,
					open.ldci_pkinterfazsap.fvaGetSegmento(open.ldci_pkinterfazsap.fvaGetCebeNew(GEOGRAP_LOCATION_ID,SESUCATE)) SEGMENTO,
					open.ldci_pkinterfazsap.fvaGetCebeNew(GEOGRAP_LOCATION_ID,SESUCATE) CEBE,
					GEOGRAP_LOCATION_ID LOCALIDAD,
					SESUCATE CATEGORIA,
					caccconc COD_CONCEPTO, CLCOCODI COD_CLASIFICADOR,CLCODESC DESC_CLASIFICADOR,
					SUM(CACCSAPE)  CACCSAPE,
					sesucicl CICLO
					from open.ic_cartcoco, OPEN.SERVSUSC,OPEN.PR_PRODUCT PR , OPEN.AB_ADDRESS AD, OPEN.CONCEPTO, OPEN.IC_CLASCONT
						where caccfege = invaFechCorte
							and caccplca = 'L'
							and caccesco not in (SELECT column_value FROM TABLE(open.ldc_boutilities.SPLITstrings(invaEstacor_exclu,',')))
							and caccnuse = sesunuse
							AND caccnuse = PR.PRODUCT_ID
							AND PR.ADDRESS_ID = AD.ADDRESS_ID
							AND CACCCONC = CONCCODI
							AND CONCCLCO = CLCOCODI
						GROUP BY GEOGRAP_LOCATION_ID , CACCSERV,SESUCATE ,caccconc, CLCOCODI, CLCODESC, sesucicl;

	TYPE tyDatcuReclacart IS TABLE OF cuReclacart%ROWTYPE INDEX BY BINARY_INTEGER;
	vtyDatcuReclacart tyDatcuReclacart;

  TYPE tyDatCartLargo IS TABLE OF cuReclacart%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyDatCartLargo tyDatCartLargo;

		FUNCTION fsbGetLedgers
				(sbCOD_INTERFAZLDC   in ldci_TIPOINTERFAZ.TIPOINTERFAZ%type,
				 nuComprobante in ldci_TIPOINTERFAZ.COD_COMPROBANTE%type
				 )
		return ldci_tipointerfaz.ledgers%type IS
				sbLEDGERS ldci_tipointerfaz.ledgers%type :='-';
		begin
				sbSentencia := 'select ledgers FROM LDCI_TIPOINTERFAZ WHERE tipointerfaz = :1 and cod_comprobante = :1 ';
				execute immediate sbSentencia INTO sbLEDGERS using sbCOD_INTERFAZLDC, nuComprobante;
				return sbLEDGERS;
		EXCEPTION
				when others then
				LDCI_pkTrazaInterfaces.pRegiMensaje(sbCOD_INTERFAZLDC,sbSentencia||' Obtiene Tipo interfaz :['||sbCOD_INTERFAZLDC||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbCOD_INTERFAZLDC,USER,USERENV('TERMINAL'));
				return sbLEDGERS;
		END fsbGetLedgers;

  BEGIN

	OPEN cuFechacorte;
	FETCH cuFechacorte INTO vaFechCorte;
	CLOSE cuFechacorte;

   ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', vaSOCIEDAD, osbErrorMessage);
   ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'CURRENCY', vaCURRENCY, osbErrorMessage);
	 ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'PavaEstacor_exclu', vaEstacor_exclu, osbErrorMessage);


	IF vaFechCorte IS NULL THEN
		LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'No hay Fecha de Corte para el a?o ['||nuAnio ||'] y mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
	ELSE
		LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'La Fecha de Corte para el a?o ['||nuAnio ||'] y mes ['||nuMes||'] es :'||vaFechCorte||' Inicia '||sysdate,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));

		OPEN cuReclacart (vaFechCorte, vaEstacor_exclu);
				nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
				LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'Interfaz para el a?o ['||nuAnio ||'] y mes ['||nuMes||'] Numero :'||nuSeqICLINUDO||' Inicia '||sysdate,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));

		LOOP FETCH cuReclacart BULK COLLECT INTO  vtyDatcuReclacart
		LIMIT cnuLimite;
		        -- Se sale cuando no haya mas ingresos por procesar
       exit when (cuReclacart%NOTFOUND is null) OR
                  (vtyDatcuReclacart.first IS null);


  	IF (vtyDatcuReclacart.count > 0) THEN

				FOR i IN vtyDatcuReclacart.First..vtyDatcuReclacart.Last LOOP

							OPEN cuCtaCartera (vtyDatcuReclacart(i).COD_CLASIFICADOR);
							FETCH cuCtaCartera BULK COLLECT INTO  vtyDatcuCtaCartera;
							CLOSE cuCtaCartera;

							IF (vtyDatcuCtaCartera.count > 0) THEN

								FOR j IN vtyDatcuCtaCartera.First..vtyDatcuCtaCartera.Last LOOP

											vaCod_centrocosto:=nvl(ldci_pkinterfazsap.fvaGetCecoCuen(vtyDatcuCtaCartera(j).CTA_CONTABLE, vtyDatcuReclacart(i).CEBE),null);

											IF (vaCod_centrocosto IS NULL) THEN
													--LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'EL vaCod_centrocosto ES NULL '||'PARA LA CTA_CONTABLE '||vtyDatcuCtaCartera(j).CTA_CONTABLE||' Y CEBE '||vtyDatcuReclacart(i).CEBE,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
													NULL;
											END IF;

											sbLEDGERS := nvl(fsbGetLedgers(vaTIPINTINTERFAZ, vtyDatcuCtaCartera(j).COD_COMPROBANTE),null);
											IF (sbLEDGERS IS NULL) THEN
													LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'EL sbLEDGERS ES NULL '||'PARA EL TIPO DE INTERFAZ '||vaTIPINTINTERFAZ||' Y COMPROBANTE '||vtyDatcuCtaCartera(j).COD_COMPROBANTE,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

									    nuNIT:= Nvl(open.ldci_pkinterfazsap.fnuGetNitGenerico(vtyDatcuReclacart(i).COD_CLASIFICADOR),null);

											IF (nuNIT IS NULL) THEN
													LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'Interfaz ['||nuSeqICLINUDO||'] No se puede obtener el NIT Generico del clasificador  :['||vtyDatcuReclacart(i).COD_CLASIFICADOR||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuNIT:=replace(nuNIT,'-','');
											sbDescripcionNit := open.ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

											IF (vtyDatcuCtaCartera(j).CTA_CONTABLE LIKE '4%') THEN
											        -- Aranda 7100:
													if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
														sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(vtyDatcuReclacart(i).TIPOSERV,vtyDatcuReclacart(i).CATEGORIA,vtyDatcuReclacart(i).COD_CLASIFICADOR,vtyDatcuReclacart(i).CICLO);
													else
														sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(vtyDatcuReclacart(i).CATEGORIA,vtyDatcuReclacart(i).COD_CLASIFICADOR);
													end if;

													if(sbOrdInt=-1) then
														  LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'Interfaz ['||nuSeqICLINUDO||'] No se puede obtener la Orden Interna  para el Clasificador Contable:['||vtyDatcuReclacart(i).COD_CLASIFICADOR||'] Con la Categoria :['||vtyDatcuReclacart(i).CATEGORIA||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
														  sbOrdInt:=null;
													end if;
											ELSE
													sbOrdInt:=null;
											END IF;



											nuclave := NVL(open.ldci_pkinterfazsap.fvaGetClaveContaPagos(vtyDatcuReclacart(i).COD_CLASIFICADOR,vtyDatcuCtaCartera(j).CTA_CONTABLE,vtyDatcuCtaCartera(j).NATURA,100),0);


											nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU( vaTIPINTINTERFAZ,
																	nuSeqICLINUDO,
																	to_char(to_date(vaFechCorte)+1),
																	user,
																	'SERVER',
																	to_char(to_date(vaFechCorte)+1),
																	vtyDatcuReclacart(i).COD_CLASIFICADOR,
																	nuclave,
																	vtyDatcuCtaCartera(j).CTA_CONTABLE,
																	null,
																	vtyDatcuReclacart(i).CACCSAPE,
																	vtyDatcuReclacart(i).CACCSAPE,
																	null,
																	null,
																	'RECLCART '||nuSeqICLINUDO,
																	null,
																	null,
																	vaSOCIEDAD,
																	null,
																	null,
																	null,
																	null,
																	to_char(j),
																	open.ldci_pkinterfazsap.fnuCtaDiver(nuclave),
																	nuNIT,
																	nuNIT,
																	sbDescripcionNit,
																	'',
																	vtyDatcuReclacart(i).CEBE,
																	sbOrdInt,
																	vtyDatcuReclacart(i).SEGMENTO,
																	null,
																	vtyDatcuCtaCartera(j).COD_COMPROBANTE,
																	sbLEDGERS,
																	null);


									 IF (nuRet <> 0) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'3_Otros Errores para el a?o ['||nuAnio ||'] y mes ['||nuMes||']'||sqlerrm||DBMS_UTILITY.format_error_backtrace,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
									 END IF;
								END LOOP;
							ELSE
											 LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'El Clasificador  ['||vtyDatcuReclacart(i).COD_CLASIFICADOR||'] No esta en el comprobante de Reclasificaci?n de Cartera',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
							END IF;
				END LOOP;
  	ELSE
			LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'No hay informacion de Cartera para La Fecha de Corte del a?o ['||nuAnio ||'] y mes ['||nuMes||'] es :'||vaFechCorte,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
			return -1;
  	END IF;
        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>


         nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;



        vtyDatCartLargo.delete;
				-- Asienta registros
				commit;

		end loop;
		CLOSE cuReclacart;

				    --<<
						--Se lanza la Exepcion sin la funcion no se ejecuto con exito
						-->>
						IF (nuRet <> 0) THEN
								LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||vaTIPINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
								raise Error;
						END IF;
						--<<
						--Genera la informacion de los documentos para SAP de la interfaz de Provision Cartera
						-->>

            --<<
            -- Edmundo E. Lara -- 31/05/2016  CA = 100-10632
            --
						--nuRet := ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera(vaTIPINTINTERFAZ,
            nuRet := ldci_pkinterfazsap.fnuGeneDocuSapReclaCarteraRO(vaTIPINTINTERFAZ,
            -->>
																															 nuAnio,
																															 nuMes,
																															 nuSeqICLINUDO,
																															 'RECLCART');

						--<<
						--Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
						-->>
						IF (nuRet <> 0) THEN
							LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera :['||vaTIPINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
							RAISE ERROR;
							NULL;
						END IF;


						--<<
						--Si es satifactorio todo el proceso, se realiza el envio a SAP
						--Procedimiento Hector Dominguez
						-->>
						IF (vaEnviaIntefazSAP = 'S') THEN
								ldci_pkintercontablemesa.proEnviaDocContable(nuSeqICLINUDO);
						END IF;

						LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,
						'Se genero con exito en interfaz Reclasificacion Cartera  ['||nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));

						--<<
						---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
						-->>
						nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(nuSeqICLINUDO,nuAnio,nuMes,'S','L6');
						IF (nuRet <> 0) THEN
								LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||vaTIPINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
								RAISE ERROR;
						END IF;
		END IF;
    return(0);

EXCEPTION
  WHEN ERROR then
	   LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'Error fnuInterfazReclaCartera :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
	   LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'No se Puede Generar la interfaz :['||vaTIPINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
		 return(-1);
	WHEN TOO_MANY_ROWS THEN
     LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'Error fnuInterfazReclaCartera :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
  	 LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'1_Registros Dobles para el a?o ['||nuAnio ||'] y mes ['||nuMes||']'||sqlerrm||DBMS_UTILITY.format_error_backtrace,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
		 LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'1_Cadena...'||vaCadena||'-'||vaCod_centrocosto,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
	   return(-1);
	WHEN OTHERS THEN
     LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'Error fnuInterfazReclaCartera :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
		 LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'2_Otros Errores para el a?o ['||nuAnio ||'] y mes ['||nuMes||']'||sqlerrm||DBMS_UTILITY.format_error_backtrace,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
		 LDCI_pkTrazaInterfaces.pRegiMensaje(vaTIPINTINTERFAZ,'2_Cadena...'||vaCadena||'-'||vaCod_centrocosto,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaTIPINTINTERFAZ,USER,USERENV('TERMINAL'));
     return(-1);
END fnuInterfazReclaCartera_B;




FUNCTION fnuInterfazReclaCartera (nutimocodi   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                            nuAnio NUMBER,
                            nuMes NUMBER)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazReclaCartera
     AUTOR     : Oscar Restrepo
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar obtener la informacion de la interfaz
                    de REclasificacion de Cartera en SAP.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion

  ************************************************************************/

   nuCantidad NUMBER;
   daFecha_Inicio DATE;
   daFecha_Fin DATE;

   CURSOR cuInformacion
   IS
   SELECT DocumentoSAP, clasificador, cuenta, signos, cebe, porcent, Comprobante, sum(valor) valor
   from (
      SELECT         nutimocodi DocumentoSAP,
                     (select distinct a.rcccpopa from ic_recoclco a where clcrcons=a.rcccclcr and a.rccccuco=dcrccuco) porcent,
                     dcrccons,
                     dcrcecrc,
                     dcrccorc,
                     dcrccuco cuenta,
                     dcrcsign signos,
                     dcrcvalo valor,
                     dcrcinad,
                     dcrcfecr,
                     dcrcclcr,
                     dcrcusua,
                     dcrcterm,
                     dcrcprog,
                     dcrcsist,
                     clcrclco clasificador,
                     clcodesc,
                     corccoco Comprobante ,
                     (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                     corctido TipoComprobante,
                     (select tccodesc from ic_ticocont
                          where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                     ) DescTipoComprobante,
                     ecrcfech,
                     ldci_pkinterfazsap.fvaGetCebeNew(ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                                      Nvl(ldci_pkinterfazsap.fvaGetData(5,dcrcinad,'|'),NULL)) cebe

        FROM       ic_encoreco
        JOIN       ic_decoreco on (ecrccons = dcrcecrc)
        JOIN       ic_confreco on (dcrccorc = corccons )
        JOIN       ic_clascore on (clcrcons = dcrcclcr)
        JOIN       ic_clascont on (clcrclco=clcocodi)
        WHERE      ecrccoco in (SELECT COD_COMPROBANTE from LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ = nutimocodi)
        AND        ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin)
        --AND        ecrcfech BETWEEN daFecha_Fin and daFecha_Fin)
    group by DocumentoSAP, clasificador, cuenta, signos, cebe, porcent, Comprobante;/*Fecha diaria, con la cual se generan los documentos*/

  TYPE tyDatCartLargo IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyDatCartLargo tyDatCartLargo;

     --<<
     --definicion de variables
     -->>
     nuRet          NUMBER;
     nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
     vaClave        ldci_claveconta.clavcodi%TYPE;
     iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
     iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
     daFechaGen DATE;
     vaCod_centrocosto    ldci_costcebecuen.cecocodi%type;
     vaCod_centrobenef    ldci_costcebecuen.cecocebe%TYPE;
     nuCentBen NUMBER;
     nuCategoria NUMBER;
     nuLocalidad NUMBER;
     sbSegmento varchar2(50);
     nuError NUMBER;

     nuVlrAjuste   NUMBER; -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

  BEGIN
        ldci_pkinterfazsap.vaCODINTINTERFAZ:='L6';
        ldci_pkinterfazsap.vaSOCIEDAD:='GDOC';
        ldci_pkinterfazsap.vaCURRENCY:='COP';

        --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L6_Limite', nuVlrAjuste, osbErrorMessage);

        --<<
        --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
        -->>
        nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,'L6R');
        IF (nuRet <> 0) THEN
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Generar interfaz '||ldci_pkinterfazsap.vaCODINTINTERFAZ||'R para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                raise Error;
        END IF;

        --<<
        --Se valida la existencia de las fechas de cierre comercial y se obtienen las fecha de inicio
        --y final del periodo
        -->>
        nuRet := ldci_pkinterfazsap.fvaGetFechaCierre(nuAnio,nuMes,daFecha_Inicio,daFecha_Fin);

         IF (nuRet <> 0) THEN
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener Fechas para cierre comercial en el a?o :['||nuAnio||'] y mes ['||nuMes||'] valide la tabla LDC_CIERCOME',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                raise Error;
         END IF;

      vtyDatCartLargo.delete;

    --<<
    --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
    -->>
    OPEN cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Registros a Procesar ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia Interfaz de Provision Cartera : Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));


    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatCartLargo
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatCartLargo.first IS null);
        ------------
        --<<
        --Se evalua que la consulta contenga registros, en caso contratio retorna -1
        -->>
        IF (vtyDatCartLargo.count > 0) THEN

            FOR i IN vtyDatCartLargo.First..vtyDatCartLargo.Last LOOP

                IF Trunc(vtyDatCartLargo(i).VALOR) > 0 THEN

                    nuCentBen:=NULL;
                    vaCod_centrocosto:=NULL;
                    vaClave:=NULL;

                    nuCentBen := vtyDatCartLargo(i).cebe;

                    if(nuCentBen = 0 OR nuCentBen IS NULL) then
                        sbSegmento:='N/A';
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Centro de Beneficio para la localidad  :['||nuCentBen||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                    else
                        sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
                    end if;

                    vaCod_centrocosto:=ldci_pkinterfazsap.fvaGetCecoCuen(vtyDatCartLargo(i).cuenta, nuCentBen);

                    --<<
                    --obtiene la clave contable a partir de la cuenta
                    -->>
                    vaClave := fvaGetClaveContaIngreso(vtyDatCartLargo(i).clasificador,
                                                 vtyDatCartLargo(i).cuenta,
                                                 vtyDatCartLargo(i).signos,
                                                 vtyDatCartLargo(i).porcent,
                                                 iovactcaicme,
                                                 iovactcainiv);

                    --<<
                    --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
                    -->>
                    if (vaClave is null or vaClave < 0) then
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] Clasificador ['||vtyDatCartLargo(i).clasificador|| '] Cuenta  ['||vtyDatCartLargo(i).cuenta||'] Signo ['||vtyDatCartLargo(i).signos||'] Porcentaje '||vtyDatCartLargo(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                    end if;

                    -- Obtiene el Ledger
                    sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtyDatCartLargo(i).comprobante);

                    --<<
                    --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                    -->>
                    nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_RECLACARTERA(vtyDatCartLargo(i).DocumentoSAP,
                                                  ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  TRUNC(sysdate),
                                                  user,
                                                  'SERVER',
                                                  TRUNC(sysdate),
                                                  vtyDatCartLargo(i).clasificador,
                                                  vaClave,
                                                  vtyDatCartLargo(i).cuenta,
                                                  iovactcaicme,
                                                  vtyDatCartLargo(i).VALOR,
                                                  vtyDatCartLargo(i).VALOR,
                                                  iovactcainiv,
                                                  null,
                                                  'RECLCART'||ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  null,
                                                  null,
                                                  'GDOC',
                                                  null,
                                                  null,
                                                  nuCentBen,
                                                  vaCod_centrocosto,
                                                  i,
                                                  ldci_pkinterfazsap.fnuCtaDiver(vaClave),
                                                  sbSegmento,
                                                  null,
                                                  vtyDatCartLargo(i).comprobante,
                                                  sbLedgers);

                    --<<
                    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
                    -->>
                    IF (nuRet <> 0) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ejecutar fnuLDCI_INCOLIQU_RECLACARTERA :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        RAISE ERROR;
                    END IF;

                END IF; -- se valida valor mayor a 0

            END LOOP;
        END IF;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
         nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

        vtyDatCartLargo.delete;
    END loop;

    close cuInformacion;

    IF (nuError <> 0) THEN
        RAISE ERROR;
    END IF;
    --<<
    --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
    -->>
    vtyDatCartLargo.delete;

   -- Asienta registros
   commit;

    --<<
    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
    -->>
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;
    --<<
    --Genera la informacion de los documentos para SAP de la interfaz de Provision Cartera
    -->>

    nuRet := fnuGeneDocuSapReclaCartera(ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                                       nuAnio,
                                                       nuMes,
                                                       ldci_pkinterfazsap.nuSeqICLINUDO, 'RECLCART');

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
    IF (nuRet <> 0) THEN
      LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
      RAISE ERROR;
    END IF;

    --<<
    --Se valida para corregir el descuadre por cada documento
    -->>
    nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,ldci_pkinterfazsap.vaCODINTINTERFAZ,nuVlrAjuste); --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Si es satifactorio todo el proceso, se realiza el envio a SAP
    --Procedimiento Hector Dominguez
    -->>
    IF (vaEnviaIntefazSAP = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Se genero con exito en interfaz Reclasificacion Cartera  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S','L6R');
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    return(0);

EXCEPTION
WHEN OTHERS THEN
    ldci_pkinterfazsap.vaMensError := '[fnuInterfazReclaCartera] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error fnuInterfazReclaCartera :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    return(-1);
END fnuInterfazReclaCartera;


  FUNCTION fnuInterfazReclaCarteraRO(nutimocodi   IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                     nuAnio       NUMBER,
                                     nuMes        NUMBER)
  RETURN NUMBER
  IS
  /************************************************************************
   PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
   FUNCION   : fnuInterfazReclaCarteraRO
   AUTOR     : Diego Andr?s Cardona Garc?a
   FECHA     : 29-07-2014
   DESCRIPCION  : Copia del m?todo fnuInterfazReclaCartera
                  Funcion que se encarga de armar obtener la informacion de la interfaz
                  de REclasificacion de Cartera en SAP.

    Parametros de Entrada

    Parametros de Salida

   Historia de Modificaciones
   Autor    Fecha       Descripcion
   -------- ----------- --------------------------------------------------
  ************************************************************************/

   nuCantidad NUMBER;
   daFecha_Inicio DATE;
   daFecha_Fin DATE;

   CURSOR cuInformacion
   IS
   SELECT DocumentoSAP, clasificador, cuenta, signos, cebe, porcent, Comprobante, sum(valor) valor
   from (
      SELECT         nutimocodi DocumentoSAP,
                     (select distinct a.rcccpopa from ic_recoclco a where clcrcons=a.rcccclcr and a.rccccuco=dcrccuco) porcent,
                     dcrccons,
                     dcrcecrc,
                     dcrccorc,
                     dcrccuco cuenta,
                     dcrcsign signos,
                     dcrcvalo valor,
                     dcrcinad,
                     dcrcfecr,
                     dcrcclcr,
                     dcrcusua,
                     dcrcterm,
                     dcrcprog,
                     dcrcsist,
                     clcrclco clasificador,
                     clcodesc,
                     corccoco Comprobante ,
                     (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                     corctido TipoComprobante,
                     (select tccodesc from ic_ticocont
                          where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                     ) DescTipoComprobante,
                     ecrcfech,
                     ldci_pkinterfazsap.fvaGetCebeNoCat(ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|')) cebe

        FROM       ic_encoreco
        JOIN       ic_decoreco on (ecrccons = dcrcecrc)
        JOIN       ic_confreco on (dcrccorc = corccons )
        JOIN       ic_clascore on (clcrcons = dcrcclcr)
        JOIN       ic_clascont on (clcrclco=clcocodi)
        WHERE      ecrccoco in (SELECT COD_COMPROBANTE from LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ = nutimocodi)
        AND        ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin)
        --AND        ecrcfech BETWEEN daFecha_Fin and daFecha_Fin)
    group by DocumentoSAP, clasificador, cuenta, signos, cebe, porcent, Comprobante;/*Fecha diaria, con la cual se generan los documentos*/

  TYPE tyDatCartLargo IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyDatCartLargo tyDatCartLargo;

     --<<
     --definicion de variables
     -->>
     nuRet          NUMBER;
     nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
     vaClave        ldci_claveconta.clavcodi%TYPE;
     iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
     iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
     daFechaGen DATE;
     vaCod_centrocosto    ldci_costcebecuen.cecocodi%type;
     vaCod_centrobenef    ldci_costcebecuen.cecocebe%TYPE;
     nuCentBen NUMBER;
     nuCategoria NUMBER;
     nuLocalidad NUMBER;
     sbSegmento varchar2(50);
     nuError NUMBER;
     vaEnviaInterfazRC    VARCHAR2(1); --Parametro para el control de envio de Interfaces a SAP

     nuVlrAjuste   NUMBER; -- 23/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

  BEGIN
        ldci_pkinterfazsap.vaCODINTINTERFAZ := nutimocodi;
        ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
        ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);
        ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'ENVIAINTERFAZRC', vaEnviaInterfazRC, osbErrorMessage);

        --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L6_Limite', nuVlrAjuste, osbErrorMessage);

        --<<
        --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
        -->>
        nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,'L6');
        IF (nuRet <> 0) THEN
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Generar interfaz '||ldci_pkinterfazsap.vaCODINTINTERFAZ||'R para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                raise Error;
        END IF;

        --<<
        --Se valida la existencia de las fechas de cierre comercial y se obtienen las fecha de inicio
        --y final del periodo
        -->>
        nuRet := ldci_pkinterfazsap.fvaGetFechaCierre(nuAnio,nuMes,daFecha_Inicio,daFecha_Fin);

         IF (nuRet <> 0) THEN
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener Fechas para cierre comercial en el a?o :['||nuAnio||'] y mes ['||nuMes||'] valide la tabla LDC_CIERCOME',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                raise Error;
         END IF;

      vtyDatCartLargo.delete;

    --<<
    --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
    -->>
    OPEN cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Registros a Procesar ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia Interfaz de Reclasificacion Cartera : Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));


    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatCartLargo
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatCartLargo.first IS null);
        ------------
        --<<
        --Se evalua que la consulta contenga registros, en caso contratio retorna -1
        -->>
        IF (vtyDatCartLargo.count > 0) THEN

            FOR i IN vtyDatCartLargo.First..vtyDatCartLargo.Last LOOP

                IF Trunc(vtyDatCartLargo(i).VALOR) > 0 THEN

                    nuCentBen:=NULL;
                    vaCod_centrocosto:=NULL;
                    vaClave:=NULL;

                    nuCentBen := vtyDatCartLargo(i).cebe;

                    if(nuCentBen = 0 OR nuCentBen IS NULL) then
                        sbSegmento:='N/A';
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Centro de Beneficio para la localidad  :['||nuCentBen||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                    else
                        sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
                    end if;

                    vaCod_centrocosto:=ldci_pkinterfazsap.fvaGetCecoCuen(vtyDatCartLargo(i).cuenta, nuCentBen);

                    --<<
                    --obtiene la clave contable a partir de la cuenta
                    -->>
                    vaClave := fvaGetClaveContaIngreso(-1,
                                                 vtyDatCartLargo(i).cuenta,
                                                 vtyDatCartLargo(i).signos,
                                                 vtyDatCartLargo(i).porcent,
                                                 iovactcaicme,
                                                 iovactcainiv);

                    --<<
                    --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
                    -->>
                    if (vaClave is null or vaClave < 0) then
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] Clasificador ['||vtyDatCartLargo(i).clasificador|| '] Cuenta  ['||vtyDatCartLargo(i).cuenta||'] Signo ['||vtyDatCartLargo(i).signos||'] Porcentaje '||vtyDatCartLargo(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                    end if;

                    -- Obtiene el Ledger
                    sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtyDatCartLargo(i).comprobante);

                    --<<
                    --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                    -->>
                    nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_RECLACARTERO(vtyDatCartLargo(i).DocumentoSAP,
                                                  ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  TRUNC(sysdate),
                                                  user,
                                                  'SERVER',
                                                  TRUNC(sysdate),
                                                  vtyDatCartLargo(i).clasificador,
                                                  vaClave,
                                                  vtyDatCartLargo(i).cuenta,
                                                  iovactcaicme,
                                                  vtyDatCartLargo(i).VALOR,
                                                  vtyDatCartLargo(i).VALOR,
                                                  iovactcainiv,
                                                  null,
                                                  'RECLCART'||ldci_pkinterfazsap.nuSeqICLINUDO,
                                                  null,
                                                  null,
                                                  ldci_pkinterfazsap.vaSOCIEDAD,
                                                  null,
                                                  null,
                                                  nuCentBen,
                                                  vaCod_centrocosto,
                                                  i,
                                                  ldci_pkinterfazsap.fnuCtaDiver(vaClave),
                                                  sbSegmento,
                                                  null,
                                                  vtyDatCartLargo(i).comprobante,
                                                  sbLedgers);

                    --<<
                    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
                    -->>
                    IF (nuRet <> 0) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ejecutar fnuLDCI_INCOLIQU_RECLACARTERA :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        RAISE ERROR;
                    END IF;

                END IF; -- se valida valor mayor a 0

            END LOOP;
        END IF;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
         nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

    END loop;

    close cuInformacion;

    IF (nuError <> 0) THEN
        RAISE ERROR;
    END IF;
    --<<
    --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
    -->>
    vtyDatCartLargo.delete;

   -- Asienta registros
   commit;

    --<<
    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
    -->>
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;
    --<<
    --Genera la informacion de los documentos para SAP de la interfaz de Provision Cartera
    -->>

    nuRet := fnuGeneDocuSapReclaCarteraRO(ldci_pkinterfazsap.vaCODINTINTERFAZ, nuAnio, nuMes,
                                          ldci_pkinterfazsap.nuSeqICLINUDO, 'RECLCART-'||ldci_pkinterfazsap.nuSeqICLINUDO);

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
    IF (nuRet <> 0) THEN
      LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuGeneDocuSapReclaCarteraRO:['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
      RAISE ERROR;
    END IF;

    --<<
    --Se valida para corregir el descuadre por cada documento
    -->>
    nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,ldci_pkinterfazsap.vaCODINTINTERFAZ,nuVlrAjuste); --23-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Si es satifactorio todo el proceso, se realiza el envio a SAP
    --Procedimiento Hector Dominguez
    -->>
    IF (vaEnviaInterfazRC = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Se genero con exito en interfaz Reclasificacion Cartera  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S',ldci_pkinterfazsap.vaCODINTINTERFAZ);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    return(0);

EXCEPTION
WHEN OTHERS THEN
    ldci_pkinterfazsap.vaMensError := '[fnuInterfazReclaCarteraRO] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error fnuInterfazReclaCarteraRO :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    return(-1);
END fnuInterfazReclaCarteraRO;

FUNCTION fnuInterfazRecaudo ( sbTIPOINTERFAZ in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                               daFecha_Inicio DATE,
                               daFecha_Fin DATE)
  RETURN NUMBER
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazRecaudo
     AUTOR     : Oscar Eduardo Restrepo
     FECHA     : 28-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la informacion de la interfaz
                    de recaudos en SAP.

    Parametros de Entrada
                          - nutimocodi Tipo de Interfaz 'L2'
                          - Fecha_Inicio Fecha inicial
                          - Fecha_Fin Fecha Final

    Parametros de Salida

    Historia de Modificaciones
    Autor       Fecha       Descripcion
    cgonzalezv  18-09-2015  Aranda 6744: Reportar como Fecha Contable en L2
                            la fecha de proceso o grabacion del pago
  ************************************************************************/
   nuCantidad NUMBER;

   CURSOR cuInformacion ( sbTipoInterfaz in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type) IS
        SELECT substr(B.FechaPago,LENGTH(B.FechaPago)-1,2)||'/'||
               substr(B.FechaPago,LENGTH(B.FechaPago)-3,2)||'/'||
               substr(B.FechaPago,1,4) FechaPago,
          B.dcrcfecr,
          B.porcent,
          B.dcrcecrc,
          B.dcrccorc,
          B.cuenta,
          B.dcrcinad,
          B.dcrcusua,
          B.dcrcterm,
          B.dcrcprog,
          B.dcrcsist,
          B.clasificador,
          B.Comprobante,
          B.TipoComprobante,
          B.ecrcfech,
          SUM(B.valor) valor
        FROM
          (SELECT
            (SELECT DISTINCT a.rcccpopa
            FROM ic_recoclco a
            WHERE clcrcons=a.rcccclcr
            AND a.rccccuco=dcrccuco
            ) porcent,
            dcrcecrc,
            dcrccorc,
            dcrccuco cuenta,
            dcrcsign signo,
            SUM(DECODE(dcrcsign,'D',dcrcvalo,-dcrcvalo)) valor,
            dcrcinad,
            TRUNC(dcrcfecr) dcrcfecr,
            dcrcusua,
            dcrcterm,
            dcrcprog,
            dcrcsist,
            DECODE(ldci_pkinterfazsap.fnuValidaCtaBanco(clcrclco,dcrccuco),0,-1,clcrclco) clasificador,
            corccoco Comprobante ,
            corctido TipoComprobante,
            TRUNC(ecrcfech) ecrcfech,
            ldci_pkinterfazsap.fvaGetData(30,dcrcinad,'|') FechaPago
          FROM ic_encoreco
          JOIN ic_decoreco
          ON (ecrccons = dcrcecrc)
          JOIN ic_confreco
          ON (dcrccorc = corccons )
          JOIN ic_clascore
          ON (clcrcons = dcrcclcr)
          JOIN ic_clascont
          ON (clcrclco    =clcocodi)
          WHERE ecrccoco IN
            (SELECT COD_COMPROBANTE FROM LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ = sbTipoInterfaz
            )
          AND        ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin
          GROUP BY dcrcecrc,
            dcrccorc,
            dcrccuco,
            dcrcsign,
            dcrcinad,
            TRUNC(dcrcfecr),
            dcrcusua,
            dcrcterm,
            dcrcprog,
            dcrcsist,
            clcrclco,
            corccoco,
            corctido,
            TRUNC(ecrcfech),
            clcrcons
          ) B
        GROUP BY B.porcent,
          B.dcrcecrc,
          B.dcrccorc,
          B.cuenta,
          B.dcrcinad,
          B.dcrcfecr,
          B.dcrcusua,
          B.dcrcterm,
          B.dcrcprog,
          B.dcrcsist,
          B.clasificador,
          B.Comprobante,
          B.TipoComprobante,
          B.ecrcfech,
          B.FechaPago;

        /*Fecha diaria, con la cual se generan los documentos*/
        TYPE tyDatInrecaudos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
        vtyDatInrecaudos tyDatInrecaudos;

        /*Cursor para obtener tipo de comprobante*/
        CURSOR cuTipoComprobante (sbTipo ldci_tipointerfaz.tipointerfaz%type) IS
            SELECT cod_tipocomp
            FROM ldci_tipointerfaz
            WHERE tipointerfaz = sbTipo
            AND rownum = 1;

        /*Cursor para obtener e indicador de Anticipos*/
        cursor cuIndicadorCme (invaCuenta varchar2, innuClasif NUMBER)
            is
              select ctcaicme
               from open.ldci_ctacadmi
                where ctcacodi = invaCuenta
                 and ctaclco = innuClasif;

        --<<
        --definicion de variables
        -->>
        nuRet          NUMBER;
        nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
        vaClave        ldci_claveconta.clavcodi%TYPE;
        iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
        iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
        daFechaGen DATE;
        nuResultado NUMBER;
        nuCentBen NUMBER;
        sbOrdInt VARCHAR2(100);
        nuCategoria NUMBER;
        sbSegmento VARCHAR2(200);
        sbDescripcionNit VARCHAR2(200);
        sbEsDivergente VARCHAR2(2);
        nuNIT VARCHAR2(100);
        nuCLASECTA number;
        nuASIGNACN number;
        nuCLAVREF1 number;
        sbCLAVREF3  VARCHAR2(100);
        nuCTADIV   number;
        nuCOD_CLASIFCONTA VARCHAR2(100);
        nuTipoEntidad NUMBER;
        vaClaveContaDivergen VARCHAR2(2);
        vaClaveContaDiver11 VARCHAR2(2);
        nuEntidadFinan NUMBER;
        nuEntidadNoFinan NUMBER;
        vaTXTPOSCN VARCHAR2(2000);
        nuCUPON  LDCI_INCOLIQU.CUPON%TYPE;
        inVanuLocalidad VARCHAR2(100);
        nuValor1 NUMBER;
        nuValor2 NUMBER;
        vaSigno VARCHAR2(2);
        nuError NUMBER:=0;
        nuCantRegistros NUMBER;
        nuEjecutado NUMBER := 0;
        ClavAntCrPag VARCHAR2(100);
        ClavAntDrPag VARCHAR2(100);
        vaCentBen            VARCHAR2(100);
        nuCuponReem     cupon.cuponume%TYPE;
        nucod_tipocomp ldci_tipointerfaz.cod_tipocomp%type;
		    nuTipoServicio NUMBER;
		    nuCiclo ciclo.ciclcodi%type;

        nuVlrAjuste   NUMBER; -- 26/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr
    BEGIN

        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaClaveContaDivergen',vaClaveContaDivergen, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaClaveContaDiver11', vaClaveContaDiver11, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'nuEntidadFinan', nuEntidadFinan, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'nuEntidadNoFinan', nuEntidadNoFinan, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'ClavAntCrPag', ClavAntCrPag, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'ClavAntDrPag', ClavAntDrPag, osbErrorMessage);

        --26-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L2_Limite', nuVlrAjuste, osbErrorMessage);


        tbPorcentaje.delete;

        ldci_pkinterfazsap.vaCODINTINTERFAZ:='L2';
        ldci_pkinterfazsap.vaSOCIEDAD:='GDOC';
        ldci_pkinterfazsap.vaCURRENCY:='COP';

        IF (daFecha_Fin<>daFecha_Inicio) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'La interfaz de recaudo solo se debe procesar para una fecha, no se admiten rangos de fecha para la Fecha Inicial :['||daFecha_Inicio||'] Fecha Final ['||daFecha_Fin||'] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        --<<
        --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
        -->>
        nuRet := ldci_pkinterfazsap.fvaGetRegFecha(trunc(daFecha_Inicio),sbTIPOINTERFAZ);
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'No se puede Generar interfaz '||sbTIPOINTERFAZ||' para la Fecha  :['||daFecha_Fin||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        nuResultado := ldci_pkinterfazsap.fnuTipoIntRecaudo(daFecha_Inicio,nuTipo);
        IF (nuResultado < 0 or nuTipo is null) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Falla en interfaz Recaudo - '||sbTIPOINTERFAZ||' Valide la tabla LDCI_PERIPROGINTE',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
            return -1;
        END IF;

        -- Se adiciona la asignacion de la varible global para almacenar si la interfaz debe ser L2 o LC
        ldci_pkinterfazsap.vaTIPOINTERFAZRECAUDO := nuTipo;

        -- Busca el tipo de comprobante
        open cuTipoComprobante(ldci_pkinterfazsap.vaTIPOINTERFAZRECAUDO);
        fetch cuTipoComprobante INTO nucod_tipocomp;
        close cuTipoComprobante;

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Inicia Validacion de Interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
        -- Validaciones previas de la interfaz.
        nuRet := ldci_ProcesosInterfazSap.ValidaInterfazRecaudo(daFecha_Inicio,nucod_tipocomp);
        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Finaliza Validacion de Interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));

        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
        -->>
        OPEN cuInformacion(sbTIPOINTERFAZ);

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Inicia Registros a Procesar ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
        ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
        vaTXTPOSCN:= 'RECAUDO '||ldci_pkinterfazsap.nuSeqICLINUDO;

        LOOP
            FETCH cuInformacion
                BULK COLLECT INTO vtyDatInrecaudos
                LIMIT cnuLimite;
            -- Se sale cuando no haya mas ingresos por procesar
            exit when (cuInformacion%NOTFOUND is null) OR
                      (vtyDatInrecaudos.first IS null);

            --<<
            --Se evalua que la consulta contenga registros, en caso contratio retorna -1
            -->>
            --nuCantRegistros:=vtyDatInrecaudos.count;
            --LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Total Registros a Procesar '||nuCantRegistros,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

            IF (vtyDatInrecaudos.count > 0) THEN
             --<<
             --Obtencion delete numero de documento
             -->>

             FOR i IN vtyDatInrecaudos.First..vtyDatInrecaudos.Last LOOP
                IF(trunc(vtyDatInrecaudos(i).valor)=0) THEN
                  NULL;
                ELSE
                vaClave := NULL;
                IF (vtyDatInrecaudos(i).valor<0) THEN
                  vaSigno:='C';
                ELSE
                  vaSigno:='D';
                END IF;
                --<<
                --obtiene la clave contable a partir de la cuenta
                -->>
                vaClave:=fvaGetClaveContaPagos(vtyDatInrecaudos(i).clasificador,vtyDatInrecaudos(i).cuenta,vaSigno,100) ;

                /*Se adiciona este bloque para obtener el indicador cuando la funcion de la clave es la de Pagos*/
                open cuIndicadorCme(vtyDatInrecaudos(i).cuenta,vtyDatInrecaudos(i).clasificador);
                fetch cuIndicadorCme into iovactcaicme;
                close cuIndicadorCme;

                 /*Cuando es anticipo se garantiza que la clave es la de ancicipos*/
                 IF (iovactcaicme = 'A') THEN
                    IF vaSigno = 'C' THEN
                       vaClave := ClavAntCrPag;
                    ELSIF vaSigno = 'D' THEN
                       vaClave := ClavAntDrPag;
                     END IF;
                 END IF;
                --Si la clave contable , no esta  para el clasificador, es nulla y se almacena en el log, pero se continua con la generaci?n.

                if (vaClave is null or vaClave=-1 ) then
                    vaClave := fvaGetClaveContaIngreso(-1,
                                                 vtyDatInrecaudos(i).cuenta,
                                                 vaSigno,
                                                 vtyDatInrecaudos(i).porcent,
                                                 iovactcaicme,
                                                 iovactcainiv);
                    if (vaClave is null or vaClave=-1 ) then--if (vaClave is null) then
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatInrecaudos(i).TipoComprobante||'] Comprobante ['||vtyDatInrecaudos(i).Comprobante||'] Clasificador ['||vtyDatInrecaudos(i).clasificador|| '] Cuenta  ['||vtyDatInrecaudos(i).cuenta||'] Signo ['||vaSigno||'] Porcentaje '||vtyDatInrecaudos(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                    end if;
                end if;
                daFechaGen:=vtyDatInrecaudos(i).ecrcfech;

                nuCOD_CLASIFCONTA:=vtyDatInrecaudos(i).clasificador;
                --<<
                --Se Obtiene la Categoria con Base en la Localidad
                -->>
                nuCategoria 	:=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
				nuTipoServicio	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
				nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
                  --Se envia el banco y la Sucursal
                nuRet:= fnuGetLocalidadBansucu(ldci_pkinterfazsap.fvaGetData(7,vtyDatInrecaudos(i).dcrcinad,'|'),
                            ldci_pkinterfazsap.fvaGetData(29,vtyDatInrecaudos(i).dcrcinad,'|'),
                            inVanuLocalidad);
                IF (nuRet <> 0) THEN
                    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Error ejecutando fnuGetLocalidadBansucu (7,29):'||vtyDatInrecaudos(i).dcrcinad||' <> '||to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    --RAISE ERROR;
                END IF;

                inVanuLocalidad := Nvl(ldci_pkinterfazsap.fvaGetData(17,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);

                if NOT tbCentroBeneficio.exists(inVanuLocalidad||nuCategoria) then
                  nuCentBen:=nvl(fvaGetCebeNew(inVanuLocalidad,nuCategoria),0);
                  -- Cache para almacenar los diferentes centros de beneficio
                  tbCentroBeneficio(inVanuLocalidad||nuCategoria) :=  nuCentBen;
                else
                    nuCentBen := tbCentroBeneficio(inVanuLocalidad||nuCategoria);
                END if;

              if (nuCentBen = 0 or nuCentBen is null) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                                  'Interfaz [' || ldci_pkinterfazsap.nuSeqICLINUDO ||
                                                  '] No se puede obtener el Centro de Beneficio para la localidad  :[' ||
                                                  ldci_pkinterfazsap.fvaGetData(17, vtyDatInrecaudos(i).dcrcinad,'|')||']',
                                                  to_char(SYSTIMESTAMP, 'HH24:MI:SS.FF'),
                                                  ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                                  USER,
                                                  USERENV('TERMINAL'));
                LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CEBE_GENERAL', vaCentBen, osbErrorMessage);
                nuCentBen := TO_NUMBER(vaCentBen);
                sbSegmento := nvl(fvaGetSegmento(nuCentBen), 0);
              else
                  sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
              end if;

			-- Aranda 7100
			if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
				sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
			else
				sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
			end if;

            nuTipoEntidad:=nvl(ldci_pkinterfazsap.fvaGetData(35,vtyDatInrecaudos(i).dcrcinad,'|'),0);--1 Entidad Financiera, 2 No Financiera
            sbEsDivergente:=fnuGetDivergente(vaClave);

            if(sbOrdInt=-1) then
                sbOrdInt:=null;
            end if;

                IF(nuTipoEntidad = nuEntidadNoFinan) THEN --Entidad No Financiera
                    IF (sbEsDivergente='S') THEN --Si la cuenta es Divergente
                       IF (vtyDatInrecaudos(i).cuenta LIKE '1110%' OR vtyDatInrecaudos(i).cuenta LIKE '147065%' ) THEN
                          --Nit del Banco Recaudador
                          nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|'),fnuGetNitGenerico(nuCOD_CLASIFCONTA)),null);
                          nuNIT:=replace(nuNIT,'-','');
                          sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
                       ELSE
                          --Nit Generico del Clasificador Contable
                          IF (nuCOD_CLASIFCONTA = -1) THEN
                            nuNIT := 9999;
                          ELSE
                            nuNIT:=fnuGetNitGenerico(nuCOD_CLASIFCONTA);
                          END IF;
                       END IF;

                      nuNIT:=replace(nuNIT,'-','');
                      sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

                       IF (nuNIT IS NULL or sbDescripcionNit IS NULL) THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Nit o la Descripcion para   :['||nuNIT||'] Clasificador ['||nuCOD_CLASIFCONTA||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                            nuError:=-1;
                       END IF;

                        vaClave := vaClave;
                        nuCLASECTA := nuNIT;
                        nuASIGNACN := nuNIT;
                        nuCLAVREF1 := nuNIT;
                        sbCLAVREF3 := sbDescripcionNit;
                        nuCTADIV   := vtyDatInrecaudos(i).cuenta;
                        vaTXTPOSCN := vaTXTPOSCN;
                        nuCUPON:='';
                    ELSE
                        IF (nuCOD_CLASIFCONTA = -1) THEN
                            nuNIT := 9999;
                        ELSE
                            nuNIT:=fnuGetNitGenerico(nuCOD_CLASIFCONTA);
                        END IF;

                        nuNIT:=replace(nuNIT,'-','');
                        sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

                       IF (nuNIT IS NULL or sbDescripcionNit IS NULL) THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Nit o la Descripcion para  Clasificador :['||nuCOD_CLASIFCONTA,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                            nuError:=-1;
                       END IF;

                        vaClave := vaClave;
                        nuCLASECTA := vtyDatInrecaudos(i).cuenta;
                        nuASIGNACN := nuNIT;
                        nuCLAVREF1 := nuNIT;
                        sbCLAVREF3 := sbDescripcionNit;
                        nuCTADIV   := '';
                        nuCUPON:='';
                        vaTXTPOSCN := vaTXTPOSCN;

                  END IF;
                ELSE IF(nuTipoEntidad=nuEntidadFinan) THEN --Entidad Financiera
                       IF (vtyDatInrecaudos(i).cuenta LIKE '1110%' OR vtyDatInrecaudos(i).cuenta LIKE '147065%' ) THEN
                          --Nit del Banco Recaudador
                          nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|'),fnuGetNitGenerico(nuCOD_CLASIFCONTA)),null);
                          nuNIT:=replace(nuNIT,'-','');
                          sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
                          nuASIGNACN :=NVL(fvaGetData(37,vtyDatInrecaudos(i).dcrcinad,'|'), nuNIT);
                          -- Cupon reemplazo
                          nuCuponReem :=  nuASIGNACN;
                          nuASIGNACN := fnuGetCupon(nuCuponReem);

                    ELSE
                        --Nit Generico del Clasificador Contable
                        IF (nuCOD_CLASIFCONTA = -1) THEN
                            nuNIT := 9999;
                        ELSE
                            nuNIT:=ldci_pkinterfazsap.fnuGetNitGenerico(nuCOD_CLASIFCONTA);
                        END IF;
                        nuASIGNACN :=nuNIT;
                    END IF;

                    nuNIT:=replace(nuNIT,'-','');
                    sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

                   IF (nuNIT IS NULL or sbDescripcionNit IS NULL) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Nit o la Descripcion para   :['||nuNIT,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                   END IF;

                    vaClave := vaClave;
                    nuCLAVREF1 := nuNIT;
                    sbCLAVREF3 := sbDescripcionNit;

                    IF (sbEsDivergente='S') THEN --Si la cuenta es Divergente
                        nuCTADIV   := vtyDatInrecaudos(i).cuenta;
                        nuCLASECTA := nuNIT;
                    ELSE
                        nuCTADIV   := '';
                        nuCLASECTA := vtyDatInrecaudos(i).cuenta;
                    END IF;

                    nuCUPON:=Nvl(ldci_pkinterfazsap.fvaGetData(37,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
                    -- Cupon reemplazo
                    nuCuponReem :=  nuCUPON;
                    nuCUPON := fnuGetCupon(nuCuponReem);

                    vaTXTPOSCN := vaTXTPOSCN;

                END IF;
            END IF;
                --<<
                --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                   -->>
                IF (vtyDatInrecaudos(i).FechaPago IS NULL) THEN
                    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener fecha de aplicacion del pago, valide la configuracion del registro Contable  :['||ldci_pkinterfazsap.fvaGetData(30,vtyDatInrecaudos(i).dcrcinad,'|'),to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    nuError:= -1;
                END IF;

                -- Obtiene el Ledger
                sbLEDGERS := fsbGetLedgers(nuTipo, vtyDatInrecaudos(i).comprobante);

                nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_PAGOS(nuTipo,
                                                    ldci_pkinterfazsap.nuSeqICLINUDO,
                                                    vtyDatInrecaudos(i).FechaPago, ---Debe ser la fecha del Pago
                                                    user,
                                                    'SERVER',
                                                    daFecha_Inicio, --Aranda 6744: Reportar como Fecha Contable la fecha de proceso o grabacion del pago
                                                    nuCOD_CLASIFCONTA,
                                                    vaClave,
                                                    nuCLASECTA,
                                                    iovactcaicme,
                                                    ABS(vtyDatInrecaudos(i).VALOR),
                                                    ABS(vtyDatInrecaudos(i).VALOR),
                                                    iovactcainiv,
                                                    null,
                                                    vaTXTPOSCN,
                                                    null,
                                                    null,
                                                    ldci_pkinterfazsap.vaSOCIEDAD,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    i,
                                                    nuCTADIV,
                                                    nuASIGNACN,
                                                    nuCLAVREF1,
                                                    sbCLAVREF3,
                                                    nuCUPON,
                                                    nuCentBen,
                                                    sbOrdInt,
                                                    sbSegmento,
                                                    vtyDatInrecaudos(i).dcrcinad,
                                                    vtyDatInrecaudos(i).Comprobante,
                                                    sbLedgers);

                --<<
                --Se lanza la Exepcion sin la funcion no se ejecuto con exito
                -->>
                IF (nuRet <> 0) THEN
                    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ejecutar fnuLDCI_INCOLIQU_PAGOS :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    RAISE ERROR;
                END IF;

               END IF;

             END LOOP;
            ELSE
               LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'No se puede obtener la informacion fnuInterfazRecaudo :['||sbTIPOINTERFAZ||'] para el rango de Fechas:['||daFecha_Inicio||'] - ['||daFecha_Fin||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
               return 1;
            END IF;
            nuEjecutado := nuEjecutado + vtyDatInrecaudos.count;

            --<<
            --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
            -->>
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuINSELDCI_INCOLIQU] INSERTANDO EN LDCI_INCOLIQU:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
            --<<
            --Se lanza la Exepcion sin la funcion no se ejecuto con exito
            -->>
            IF (nuRet <> 0) THEN
                  LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ejecutar ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
                  raise Error;
            END IF;

            -- Elimina tabla temporal
            vtyDatInrecaudos.delete;

        END loop;
        CLOSE cuInformacion;

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Total Registros procesados: '||nuEjecutado,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));

        IF (nuError <>0) THEN
            RETURN -1;
        END IF;
        --<<
        --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
        -->>
        vtyDatInrecaudos.delete;

        -- Asienta registros
        commit;

        --<<
        --Genera la informacion de los documentos para SAP de la interfaz de INGRESOS
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuGeneDocuSap_PAGOS] GENERANDO EN  TRAMA SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        nuRet := ldci_pkinterfazsap.fnuGeneDocuSap_PAGOS(ldci_pkinterfazsap.nuSeqICLINUDO, 'RECAUDO',sbTIPOINTERFAZ);

        --<<
        --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
        -->>
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuGeneDocuSap_PAGOS :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            RAISE ERROR;
        END IF;

        --<<
        --Se valida para corregir el descuadre por cada documento
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuAjusteInterContable] VALIDANDO AJUSTES...:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,nuTipo,nuVlrAjuste);

        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            RAISE ERROR;
        END IF;

        --<<
        --Si es satifactorio todo el proceso, se realiza el envio a SAP
        --Procedimiento Hector Dominguez
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[proEnviaDocContable] Enviando a SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));

        IF (vaEnviaIntefRecaSAP = 'S') THEN
            ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
        END IF;

        --<<
        ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuRegistraInterfaz] Registrando Envio a SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        nuRet :=ldci_pkinterfazsap.fnuRegistraInterfaz(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio,'S',sbTIPOINTERFAZ);
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            RAISE ERROR;
        END IF;

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Inicia soportes de generacion de la interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
        -- soportes de generacion de la interfaz.
        ldci_ProcesosInterfazSap.ReporteRecaudoHERC (ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio);
        ldci_ProcesosInterfazSap.ReporteTramaRecaudo(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio);

        rcDocumentos := ldci_ProcesosInterfazSap.NumeroDocumentos(ldci_pkinterfazsap.nuSeqICLINUDO);

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Finaliza soportes de generacion de la interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.vaCODINTINTERFAZ||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Porcentaje ejecutado :[100%]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

        return(0);

    EXCEPTION
         WHEN OTHERS THEN
             ldci_pkinterfazsap.vaMensError :=  '[fnuInterfazRecaudo] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
             return(-1);
   END fnuInterfazRecaudo;


  FUNCTION fnuInterfazRecaudoRO(sbTipointerfaz IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                daFecha_Inicio DATE,
                                daFecha_Fin    DATE)
  RETURN NUMBER
  IS
  /************************************************************************
   PROPIEDAD INTELECTUAL DE EFIGAS S.A E.S.P
   FUNCION   : fnuInterfazRecaudoRO
   AUTOR     : Diego Andr?s Cardona Garc?a
   FECHA     : 23-07-2014
   DESCRIPCION  : Copia del m?todo fnuInterfazRecaudo.
                  Funcion que se encarga de obtener la informacion de la
                  interfaz de recaudos en SAP para las gaseras (Surtigas, Efigas
                  y Gases del Caribe)

   Parametros de Entrada
    - nutimocodi    Tipo de Interfaz 'L2'
    - Fecha_Inicio  Fecha inicial
    - Fecha_Fin     Fecha Final

   Parametros de Salida

   Historia de Modificaciones
   Autor    Fecha       Descripcion
   -------- ----------- --------------------------------------------------
   Dcardona 15/01/2015  Aranda: 5980
                        Se cambia el env?o de SYSDATE en la creaci?n de INCOLIQU por
                        la fecha inicial del par?metro de ingreso (fecha de grabaci?n de los pagos)

   Horbath  16/11/2020  CA-0000557 -  Se modifica la interfaz de recaudo, funcion FnuInterfazRecaudoRO, para reportar el 
                        NIT de Promigas cuando el tipo de producto es igual a 7056 y la cuenta contable igual a 2905900000
                          
  ************************************************************************/
   nuCantidad NUMBER;

   CURSOR cuInformacion ( sbTipoInterfaz in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type) IS
        SELECT substr(B.FechaPago,LENGTH(B.FechaPago)-1,2)||'/'||
               substr(B.FechaPago,LENGTH(B.FechaPago)-3,2)||'/'||
               substr(B.FechaPago,1,4) FechaPago,
          B.dcrcfecr,
          B.porcent,
          B.dcrcecrc,
          B.dcrccorc,
          B.cuenta,
          B.dcrcinad,
          B.dcrcusua,
          B.dcrcterm,
          B.dcrcprog,
          B.dcrcsist,
          B.clasificador,
          B.Comprobante,
          B.TipoComprobante,
          B.ecrcfech,
          SUM(B.valor) valor
        FROM
          (SELECT
            (SELECT DISTINCT a.rcccpopa
            FROM ic_recoclco a
            WHERE clcrcons=a.rcccclcr
            AND a.rccccuco=dcrccuco
            ) porcent,
            dcrcecrc,
            dcrccorc,
            dcrccuco cuenta,
            dcrcsign signo,
            SUM(DECODE(dcrcsign,'D',dcrcvalo,-dcrcvalo)) valor,
            dcrcinad,
            TRUNC(dcrcfecr) dcrcfecr,
            dcrcusua,
            dcrcterm,
            dcrcprog,
            dcrcsist,
            DECODE(ldci_pkinterfazsap.fnuValidaCtaBanco(clcrclco,dcrccuco),0,-1,clcrclco) clasificador,
            corccoco Comprobante ,
            corctido TipoComprobante,
            TRUNC(ecrcfech) ecrcfech,
            ldci_pkinterfazsap.fvaGetData(30,dcrcinad,'|') FechaPago
            
          FROM ic_encoreco
          JOIN ic_decoreco
          ON (ecrccons = dcrcecrc)
          JOIN ic_confreco
          ON (dcrccorc = corccons )
          JOIN ic_clascore
          ON (clcrcons = dcrcclcr)
          JOIN ic_clascont
          ON (clcrclco    =clcocodi)
          WHERE ecrccoco IN
            (SELECT COD_COMPROBANTE FROM LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ = sbTipoInterfaz
            )
          AND        ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin
          GROUP BY dcrcecrc,
            dcrccorc,
            dcrccuco,
            dcrcsign,
            dcrcinad,
            TRUNC(dcrcfecr),
            dcrcusua,
            dcrcterm,
            dcrcprog,
            dcrcsist,
            clcrclco,
            corccoco,
            corctido,
            TRUNC(ecrcfech),
            clcrcons
          ) B
        GROUP BY B.porcent,
          B.dcrcecrc,
          B.dcrccorc,
          B.cuenta,
          B.dcrcinad,
          B.dcrcfecr,
          B.dcrcusua,
          B.dcrcterm,
          B.dcrcprog,
          B.dcrcsist,
          B.clasificador,
          B.Comprobante,
          B.TipoComprobante,
          B.ecrcfech,
          B.FechaPago;

        /*Fecha diaria, con la cual se generan los documentos*/
        TYPE tyDatInrecaudos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
        vtyDatInrecaudos tyDatInrecaudos;

        /*Cursor para obtener tipo de comprobante*/
        CURSOR cuTipoComprobante (sbTipo ldci_tipointerfaz.tipointerfaz%type) IS
            SELECT cod_tipocomp
            FROM ldci_tipointerfaz
            WHERE tipointerfaz = sbTipo
            AND rownum = 1;

        /*Cursor para obtener e indicador de Anticipos*/
        cursor cuIndicadorCme (invaCuenta varchar2, innuClasif NUMBER)
            is
              select ctcaicme
               from open.ldci_ctacadmi
                where ctcacodi = invaCuenta
                 and ctaclco = innuClasif;

        --<<
        --definicion de variables
        -->>
        nuRet          NUMBER;
        nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
        vaClave        ldci_claveconta.clavcodi%TYPE;
        iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
        iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
        daFechaGen DATE;
        nuResultado NUMBER;
        nuCentBen NUMBER;
        sbOrdInt VARCHAR2(100);
        nuCategoria NUMBER;
        sbSegmento VARCHAR2(200);
        sbDescripcionNit VARCHAR2(200);
        sbEsDivergente VARCHAR2(2);
        nuNIT VARCHAR2(100);
        nuCLASECTA number;
        nuASIGNACN number;
        nuCLAVREF1 number;
        sbCLAVREF3  VARCHAR2(100);
        nuCTADIV   number;
        nuCOD_CLASIFCONTA VARCHAR2(100);
        nuTipoEntidad NUMBER;
        vaClaveContaDivergen VARCHAR2(2);
        vaClaveContaDiver11 VARCHAR2(2);
        nuEntidadFinan NUMBER;
        nuEntidadNoFinan NUMBER;
        vaTXTPOSCN VARCHAR2(2000);
        nuCUPON  LDCI_INCOLIQU.CUPON%TYPE;
        inVanuLocalidad VARCHAR2(100);
        nuValor1 NUMBER;
        nuValor2 NUMBER;
        vaSigno VARCHAR2(2);
        nuError NUMBER:=0;
        nuCantRegistros NUMBER;
        nuEjecutado NUMBER := 0;
        ClavAntCrPag VARCHAR2(100);
        ClavAntDrPag VARCHAR2(100);
        vaCentBen            VARCHAR2(100);
        nuCuponReem     cupon.cuponume%TYPE;
        nucod_tipocomp ldci_tipointerfaz.cod_tipocomp%type;
		    nuTipoServicio NUMBER;
		    nuCiclo        ciclo.ciclcodi%type;

        nuVlrAjuste   NUMBER; -- 26/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

        --<<
        -- CA-557
        csbEntrega557   open.ldc_versionentrega.codigo_caso%type:='0000557';
        sbAplica557     varchar2(1):='N';
        vsbtipoproduct  ldci_carasewe.casevalo%type;
        vsbctapromigas  ldci_carasewe.casevalo%type;
        vsbnitpromigas  ldci_carasewe.casevalo%type;
        vsbtipoprodcur  varchar2(4);
        -- 557
        -->>

    BEGIN

        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaClaveContaDivergen',vaClaveContaDivergen, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaClaveContaDiver11', vaClaveContaDiver11, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'nuEntidadFinan', nuEntidadFinan, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'nuEntidadNoFinan', nuEntidadNoFinan, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'ClavAntCrPag', ClavAntCrPag, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'ClavAntDrPag', ClavAntDrPag, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'ENVIAINTEFRECASAP', ldci_pkinterfazsap.vaEnviaIntefRecaSAP, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'FLAGUPDINTREC', ldci_pkinterfazsap.vaFlagUPD, osbErrorMessage);

        tbPorcentaje.delete;

        ldci_pkinterfazsap.vaCODINTINTERFAZ := sbTIPOINTERFAZ;
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);

      --<<
      --Dcardona
      -- se adicionan parametros para resolver el 9999, 147065 y 1110 quemados en el paquete para recaudos.
      -->>
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'NITGENER', ldci_pkinterfazsap.vaNITReca, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CTANOFIN', ldci_pkinterfazsap.vaCtaNoFin, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CTABANCO', ldci_pkinterfazsap.caCtaBanco, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'VALIDADIFE', ldci_pkinterfazsap.Vadiferen, osbErrorMessage);

        -- 26-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L2_Limite', nuVlrAjuste, osbErrorMessage);

        --<<
        -- CA-557
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'TIPO_PRODUCTO_FNB_PROMIGAS', vsbtipoproduct, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CUENTA_BRILLA_PROMIGAS', vsbctapromigas, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_PROMIGAS', vsbnitpromigas, osbErrorMessage);
        -- 557
        -->>

        IF (daFecha_Fin<>daFecha_Inicio) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'La interfaz de recaudo solo se debe procesar para una fecha, no se admiten rangos de fecha para la Fecha Inicial :['||daFecha_Inicio||'] Fecha Final ['||daFecha_Fin||'] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        --<<
        -- CA-557
        if fblaplicaentregaxcaso(csbEntrega557) then
          sbAplica557 :='S';
        else
          sbAplica557 :='N';
        end if;
        -- 557
        -->>
        
        
        --<<
        --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
        -->>
        nuRet := ldci_pkinterfazsap.fvaGetRegFecha(trunc(daFecha_Inicio),sbTIPOINTERFAZ);
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'No se puede Generar interfaz '||sbTIPOINTERFAZ||' para la Fecha  :['||daFecha_Fin||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        nuResultado := ldci_pkinterfazsap.fnuTipoIntRecaudo(daFecha_Inicio,nuTipo);
        IF (nuResultado < 0 or nuTipo is null) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Falla en interfaz Recaudo - '||sbTIPOINTERFAZ||' Valide la tabla LDCI_PERIPROGINTE',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
            return -1;
        END IF;

        -- Se adiciona la asignacion de la varible global para almacenar si la interfaz debe ser L2 o LC
        ldci_pkinterfazsap.vaTIPOINTERFAZRECAUDO := nuTipo;

        -- Busca el tipo de comprobante
        open cuTipoComprobante(ldci_pkinterfazsap.vaTIPOINTERFAZRECAUDO);
        fetch cuTipoComprobante INTO nucod_tipocomp;
        close cuTipoComprobante;

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Inicia Validacion de Interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
        -- Validaciones previas de la interfaz.
        -- VERIFICAR CON EL DESARROLLO DE LOS DE ARQS EN CALI
        nuRet := ldci_ProcesosInterfazSap.ValidaInterfazRecaudoRO(daFecha_Inicio,nucod_tipocomp);

        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'No se pueden Generar soportes '||sbTIPOINTERFAZ||' para la Fecha  :['||daFecha_Fin||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        IF (ldci_pkinterfazsap.Vadiferen = 'S') then

        nuRet := ldci_ProcesosInterfazSap.fnuValidaHR(daFecha_Inicio,nucod_tipocomp);

         IF (nuRet <> 0) THEN
             LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'No se puede Generar interfaz  por diferencias '||sbTIPOINTERFAZ||' para la Fecha  :['||daFecha_Fin||'] valide las diferencias en los soportes generados [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
             raise Error;
         END IF;

        END IF;

        --LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Finaliza Validacion de Interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));

        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
        -->>
        OPEN cuInformacion(sbTIPOINTERFAZ);

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Inicia Registros a Procesar ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
        ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
        vaTXTPOSCN:= 'RECAUDO '||ldci_pkinterfazsap.nuSeqICLINUDO;

        LOOP
            FETCH cuInformacion
                BULK COLLECT INTO vtyDatInrecaudos
                LIMIT cnuLimite;
            -- Se sale cuando no haya mas ingresos por procesar
            exit when (cuInformacion%NOTFOUND is null) OR
                      (vtyDatInrecaudos.first IS null);

            --<<
            --Se evalua que la consulta contenga registros, en caso contratio retorna -1
            -->>
            --nuCantRegistros:=vtyDatInrecaudos.count;
            --LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Total Registros a Procesar '||nuCantRegistros,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

            IF (vtyDatInrecaudos.count > 0) THEN
             --<<
             --Obtencion delete numero de documento
             -->>

             FOR i IN vtyDatInrecaudos.First..vtyDatInrecaudos.Last LOOP
                IF(trunc(vtyDatInrecaudos(i).valor)=0) THEN
                  NULL;
                ELSE
                vaClave := NULL;
                IF (vtyDatInrecaudos(i).valor<0) THEN
                  vaSigno:='C';
                ELSE
                  vaSigno:='D';
                END IF;
                --<<
                --obtiene la clave contable a partir de la cuenta
                -->>
                vaClave:=fvaGetClaveContaPagos(vtyDatInrecaudos(i).clasificador,vtyDatInrecaudos(i).cuenta,vaSigno,100) ;

                /*Se adiciona este bloque para obtener el indicador cuando la funcion de la clave es la de Pagos*/
                open cuIndicadorCme(vtyDatInrecaudos(i).cuenta,vtyDatInrecaudos(i).clasificador);
                fetch cuIndicadorCme into iovactcaicme;
                close cuIndicadorCme;

                 /*Cuando es anticipo se garantiza que la clave es la de ancicipos*/
                 IF (iovactcaicme = 'A') THEN
                    IF vaSigno = 'C' THEN
                       vaClave := ClavAntCrPag;
                    ELSIF vaSigno = 'D' THEN
                       vaClave := ClavAntDrPag;
                     END IF;
                 END IF;
                --Si la clave contable , no esta  para el clasificador, es nulla y se almacena en el log, pero se continua con la generaci?n.

                if (vaClave is null or vaClave=-1 ) then
                    vaClave := fvaGetClaveContaIngreso(-1,
                                                 vtyDatInrecaudos(i).cuenta,
                                                 vaSigno,
                                                 vtyDatInrecaudos(i).porcent,
                                                 iovactcaicme,
                                                 iovactcainiv);
                    if (vaClave is null or vaClave=-1 ) then--if (vaClave is null) then
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatInrecaudos(i).TipoComprobante||'] Comprobante ['||vtyDatInrecaudos(i).Comprobante||'] Clasificador ['||vtyDatInrecaudos(i).clasificador|| '] Cuenta  ['||vtyDatInrecaudos(i).cuenta||'] Signo ['||vaSigno||'] Porcentaje '||vtyDatInrecaudos(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                    end if;
                end if;
                daFechaGen:=vtyDatInrecaudos(i).ecrcfech;

                nuCOD_CLASIFCONTA:=vtyDatInrecaudos(i).clasificador;
                --<<
                --Se Obtiene la Categoria con Base en la Localidad
                -->>
                nuCategoria 	:=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
				nuTipoServicio	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
				nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
                  --Se envia el banco y la Sucursal
                nuRet:= fnuGetLocalidadBansucu(ldci_pkinterfazsap.fvaGetData(7,vtyDatInrecaudos(i).dcrcinad,'|'),
                            ldci_pkinterfazsap.fvaGetData(29,vtyDatInrecaudos(i).dcrcinad,'|'),
                            inVanuLocalidad);
                IF (nuRet <> 0) THEN
                    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Error ejecutando fnuGetLocalidadBansucu (7,29):'||vtyDatInrecaudos(i).dcrcinad||' <> '||to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    --RAISE ERROR;
                END IF;

                inVanuLocalidad := Nvl(ldci_pkinterfazsap.fvaGetData(17,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);

                if NOT tbCentroBeneficio.exists(inVanuLocalidad) then
                  nuCentBen:=nvl(fvaGetCebeNoCat(inVanuLocalidad),0);
                  -- Cache para almacenar los diferentes centros de beneficio
                  tbCentroBeneficio(inVanuLocalidad) :=  nuCentBen;
                else
                    nuCentBen := tbCentroBeneficio(inVanuLocalidad);
                END if;

              if (nuCentBen = 0 or nuCentBen is null) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                                  'Interfaz [' || ldci_pkinterfazsap.nuSeqICLINUDO ||
                                                  '] No se puede obtener el Centro de Beneficio para la localidad  :[' ||
                                                  ldci_pkinterfazsap.fvaGetData(17, vtyDatInrecaudos(i).dcrcinad,'|')||']',
                                                  to_char(SYSTIMESTAMP, 'HH24:MI:SS.FF'),
                                                  ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                                  USER,
                                                  USERENV('TERMINAL'));
                LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CEBE_GENERAL', vaCentBen, osbErrorMessage);
                nuCentBen := TO_NUMBER(vaCentBen);
                sbSegmento := nvl(fvaGetSegmento(nuCentBen), 0);
              else
                  sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
              end if;

			-- Aranda 7100
			if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
				sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
			else
				sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
			end if;

            nuTipoEntidad:=nvl(ldci_pkinterfazsap.fvaGetData(35,vtyDatInrecaudos(i).dcrcinad,'|'),0);--1 Entidad Financiera, 2 No Financiera
            sbEsDivergente:=fnuGetDivergente(vaClave);

            if(sbOrdInt=-1) then
                sbOrdInt:=null;
            end if;
            --<< CA-557
            vsbtipoprodcur := NVL(LDCI_PKINTERFAZSAP.FVAGETDATA(10,vtyDatInrecaudos(i).DCRCINAD,'|'),0);                         
             -->>
                IF(nuTipoEntidad = nuEntidadNoFinan) THEN --Entidad No Financiera
                    IF (sbEsDivergente='S') THEN --Si la cuenta es Divergente
                       IF (vtyDatInrecaudos(i).cuenta LIKE '%'||ldci_pkinterfazsap.caCtaBanco||'%' OR vtyDatInrecaudos(i).cuenta LIKE '%'||ldci_pkinterfazsap.vaCtaNoFin||'%' ) THEN
                          --Nit del Banco Recaudador
                          nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|'),fnuGetNitGenerico(nuCOD_CLASIFCONTA)),null);
                          nuNIT:=replace(nuNIT,'-','');
                          sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
                       ELSE
                         -- <<
                         -- CA-557

                         IF sbAplica557 = 'N' OR 
                           ( sbAplica557 = 'S' AND vsbtipoprodcur != vsbtipoproduct AND 
                             vtyDatInrecaudos(i).cuenta != vsbctapromigas ) THEN
                             
                              --Nit Generico del Clasificador Contable
                              IF (nuCOD_CLASIFCONTA = -1) THEN
                                nuNIT := ldci_pkinterfazsap.vaNITReca;
                              ELSE
                                nuNIT:=fnuGetNitGenerico(nuCOD_CLASIFCONTA);
                              END IF;
                              
                         ELSE -- CA-557

                           IF vsbtipoprodcur = vsbtipoproduct AND vtyDatInrecaudos(i).cuenta = vsbctapromigas THEN
                              nuNIT := vsbnitpromigas;
                           END IF;
                         END IF;
                       END IF;

                      nuNIT:=replace(nuNIT,'-','');
                      sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

                       IF (nuNIT IS NULL or sbDescripcionNit IS NULL) THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Nit o la Descripcion para   :['||nuNIT||'] Clasificador ['||nuCOD_CLASIFCONTA||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                            nuError:=-1;
                       END IF;

                        vaClave    := vaClave;
                        nuCLASECTA := nuNIT;
                        nuASIGNACN := nuNIT;
                        nuCLAVREF1 := nuNIT;
                        sbCLAVREF3 := sbDescripcionNit;
                        nuCTADIV   := vtyDatInrecaudos(i).cuenta;
                        vaTXTPOSCN := vaTXTPOSCN;
                        nuCUPON    := '';
                    ELSE
                        IF (nuCOD_CLASIFCONTA = -1) THEN
                            nuNIT := ldci_pkinterfazsap.vaNITReca;
                        ELSE
                            nuNIT:=fnuGetNitGenerico(nuCOD_CLASIFCONTA);
                        END IF;

                        nuNIT:=replace(nuNIT,'-','');
                        sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

                       IF (nuNIT IS NULL or sbDescripcionNit IS NULL) THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Nit o la Descripcion para  Clasificador :['||nuCOD_CLASIFCONTA||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                            nuError:=-1;
                       END IF;

                        vaClave := vaClave;
                        nuCLASECTA := vtyDatInrecaudos(i).cuenta;
                        nuASIGNACN := nuNIT;
                        nuCLAVREF1 := nuNIT;
                        sbCLAVREF3 := sbDescripcionNit;
                        nuCTADIV   := '';
                        nuCUPON:='';
                        vaTXTPOSCN := vaTXTPOSCN;

                  END IF;
                ELSE IF(nuTipoEntidad=nuEntidadFinan) THEN --Entidad Financiera
                       IF (vtyDatInrecaudos(i).cuenta LIKE ldci_pkinterfazsap.caCtaBanco OR vtyDatInrecaudos(i).cuenta LIKE ldci_pkinterfazsap.vaCtaNoFin ) THEN
                          --Nit del Banco Recaudador
                          nuNIT:=Nvl(Nvl(ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|'),fnuGetNitGenerico(nuCOD_CLASIFCONTA)),null);
                          nuNIT:=replace(nuNIT,'-','');
                          sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);
                          nuASIGNACN :=NVL(fvaGetData(37,vtyDatInrecaudos(i).dcrcinad,'|'), nuNIT);
                          -- Cupon reemplazo
                          nuCuponReem :=  nuASIGNACN;
                          nuASIGNACN := fnuGetCupon(nuCuponReem);

                    ELSE
                        --Nit Generico del Clasificador Contable
                        IF (nuCOD_CLASIFCONTA = -1) THEN
                            nuNIT := ldci_pkinterfazsap.vaNITReca;
                        ELSE
                            nuNIT:=ldci_pkinterfazsap.fnuGetNitGenerico(nuCOD_CLASIFCONTA);
                        END IF;
                        nuASIGNACN :=nuNIT;
                        
                    END IF;

                    nuNIT:=replace(nuNIT,'-','');
                    sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

                   IF (nuNIT IS NULL or sbDescripcionNit IS NULL) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Nit o la Descripcion para   :['||nuNIT,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                   END IF;

                    vaClave := vaClave;
                    nuCLAVREF1 := nuNIT;
                    sbCLAVREF3 := sbDescripcionNit;

                    IF (sbEsDivergente='S') THEN --Si la cuenta es Divergente
                        nuCTADIV   := vtyDatInrecaudos(i).cuenta;
                        nuCLASECTA := nuNIT;                               
                        -- <<

                        -- CA-557
                        IF sbAplica557 = 'S' AND 
                           vsbtipoprodcur = vsbtipoproduct AND
                           vtyDatInrecaudos(i).cuenta = vsbctapromigas THEN
                           
                              nuCLASECTA := vsbnitpromigas;
                              nuASIGNACN := vsbnitpromigas;
                              nuCLAVREF1 := vsbnitpromigas;
                              sbCLAVREF3 := ldci_pkinterfazsap.fvaGetDescripNit(vsbnitpromigas);                              
                              
                        END IF;

                        -->>
                    ELSE
                        nuCTADIV   := '';
                        nuCLASECTA := vtyDatInrecaudos(i).cuenta;
                    END IF;

                    nuCUPON:=Nvl(ldci_pkinterfazsap.fvaGetData(37,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
                    -- Cupon reemplazo
                    nuCuponReem :=  nuCUPON;
                    nuCUPON := fnuGetCupon(nuCuponReem);

                    vaTXTPOSCN := vaTXTPOSCN;

                END IF;
            END IF;
                --<<
                --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                   -->>
                IF (vtyDatInrecaudos(i).FechaPago IS NULL) THEN
                    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener fecha de aplicacion del pago, valide la configuracion del registro Contable  :['||ldci_pkinterfazsap.fvaGetData(30,vtyDatInrecaudos(i).dcrcinad,'|'),to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    nuError:= -1;
                END IF;

                -- Obtiene el Ledger
                sbLEDGERS := fsbGetLedgers(nuTipo, vtyDatInrecaudos(i).comprobante);

                nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_PAGOS(nuTipo,
                                                    ldci_pkinterfazsap.nuSeqICLINUDO,
                                                    vtyDatInrecaudos(i).FechaPago, ---Debe ser la fecha del Pago
                                                    user,
                                                    'SERVER',
                                                    daFecha_Inicio, -- Dcardona: Aranda 5980 - 15/01/2015 - Se cambia el SYSDATE por la fecha del par?metro de ingreso (fecha de grabaci?n de los pagos)
                                                    nuCOD_CLASIFCONTA,
                                                    vaClave,
                                                    nuCLASECTA,
                                                    iovactcaicme,
                                                    ABS(vtyDatInrecaudos(i).VALOR),
                                                    ABS(vtyDatInrecaudos(i).VALOR),
                                                    iovactcainiv,
                                                    null,
                                                    vaTXTPOSCN,
                                                    null,
                                                    null,
                                                    ldci_pkinterfazsap.vaSOCIEDAD,
                                                    null,
                                                    null,
                                                    null,
                                                    null,
                                                    i,
                                                    nuCTADIV,
                                                    nuASIGNACN,
                                                    nuCLAVREF1,
                                                    sbCLAVREF3,
                                                    nuCUPON,
                                                    nuCentBen,
                                                    sbOrdInt,
                                                    sbSegmento,
                                                    vtyDatInrecaudos(i).dcrcinad,
                                                    vtyDatInrecaudos(i).Comprobante,
                                                    sbLedgers);

                --<<
                --Se lanza la Exepcion sin la funcion no se ejecuto con exito
                -->>
                IF (nuRet <> 0) THEN
                    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ejecutar fnuLDCI_INCOLIQU_PAGOS :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    RAISE ERROR;
                END IF;

               END IF;

             END LOOP;
            ELSE
               LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'No se puede obtener la informacion fnuInterfazRecaudoRO :['||sbTIPOINTERFAZ||'] para el rango de Fechas:['||daFecha_Inicio||'] - ['||daFecha_Fin||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
               return 1;
            END IF;
            nuEjecutado := nuEjecutado + vtyDatInrecaudos.count;

            --<<
            --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
            -->>
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuINSELDCI_INCOLIQU] INSERTANDO EN LDCI_INCOLIQU:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
            --<<
            --Se lanza la Exepcion sin la funcion no se ejecuto con exito
            -->>
            IF (nuRet <> 0) THEN
                  LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ejecutar ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
                  raise Error;
            END IF;

            -- Elimina tabla temporal
            --vtyDatInrecaudos.delete;

        END loop;
        CLOSE cuInformacion;

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Total Registros procesados: '||nuEjecutado,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));

        IF (nuError <>0) THEN
            RETURN -1;
        END IF;
        --<<
        --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
        -->>
        vtyDatInrecaudos.delete;

        -- Asienta registros
        commit;

        --<<
        --Genera la informacion de los documentos para SAP de la interfaz de INGRESOS
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuGeneDocuSap_PAGOS] GENERANDO EN  TRAMA SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        nuRet := ldci_pkinterfazsap.fnuGeneDocuSap_PAGOS(ldci_pkinterfazsap.nuSeqICLINUDO, 'RECAUDO',sbTIPOINTERFAZ);

        --<<
        --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
        -->>
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuGeneDocuSap_PAGOS :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            RAISE ERROR;
        END IF;

        --<<
        --Se valida para corregir el descuadre por cada documento
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuAjusteInterContable] VALIDANDO AJUSTES...:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,ldci_pkinterfazsap.vaTIPOINTERFAZRECAUDO,nuVlrAjuste);
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            RAISE ERROR;
        END IF;

        IF (ldci_pkinterfazsap.vaFlagUPD = 'S') THEN
            nuRet :=ldci_pkinterfazsap.fnuActualizaReca(ldci_pkinterfazsap.nuSeqICLINUDO);
        END IF;

        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede generar el ldci_pkinterfazsap.fnuActualizaReca :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            RAISE ERROR;
        END IF;

        --<<
        --Si es satifactorio todo el proceso, se realiza el envio a SAP
        --Procedimiento Hector Dominguez
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[proEnviaDocContable] Enviando a SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));

        IF (ldci_pkinterfazsap.vaEnviaIntefRecaSAP = 'S') THEN
            ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
        END IF;

        --<<
        ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuRegistraInterfaz] Registrando Envio a SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        nuRet :=ldci_pkinterfazsap.fnuRegistraInterfaz(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio,'S',sbTIPOINTERFAZ);
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            RAISE ERROR;
        END IF;

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Inicia soportes de generacion de la interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
        -- soportes de generacion de la interfaz.
        ldci_ProcesosInterfazSap.ReporteRecaudoHERC (ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio);
        ldci_ProcesosInterfazSap.ReporteTramaRecaudo(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio);

        LDCI_pkTrazaInterfaces.pRegiMensaje(sbTIPOINTERFAZ,'Finaliza soportes de generacion de la interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbTIPOINTERFAZ,USER,USERENV('TERMINAL'));
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.vaCODINTINTERFAZ||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Porcentaje ejecutado :[100%]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

        return(0);

    EXCEPTION
         WHEN OTHERS THEN
             ldci_pkinterfazsap.vaMensError :=  '[fnuInterfazRecaudoRO] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
             return(-1);
   END fnuInterfazRecaudoRO;

   FUNCTION fnuActualizaReca (nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
      return NUMBER
        is

      BEGIN

        UPDATE ldci_encaintesap
          SET  clasedoc = (SELECT casevalo FROM ldci_carasewe WHERE casecodi = 'DOCRECSTG')
          WHERE cod_interfazldc = nuICLINUDO;
        COMMIT;
        RETURN (0);

      exception
        when others then
             ldci_pkInterfazSAP.vaMensError :=  '[fnuActualizaReca] - No se pudo actualizar el tipo documento '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
             LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkInterfazSAP.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
             return(-1);
   end fnuActualizaReca;


  FUNCTION fnuInterfazReintegro (nutimocodi   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                                daFecha_Inicio DATE,
                                daFecha_Fin DATE)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazReintegro
     AUTOR     : Oscar Eduardo Restrepo
     FECHA     : 28-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar obtener la informacion de la interfaz
                    de recaudos en SAP.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    					Fecha       Descripcion
    Oscar Restrepo		10/12/2014	Aranda 5656 : Modificaci?n para permitir que se acredite el banco y se debite
                                                la cuenta 1470900500 (Se crea Variable vaCtapuenteCart, que almacena el parametro
                                                CuentaPteCartera) por cheque devuelto tipo de movimiento de Cheque devuelto.

    cgonzalezv        13-08-2015  Aranda 6744 :
                                  Se cambia el SYSDATE por la fecha del parametro de ingreso
                                  (fecha de grabacion de los pagos "daFecha_Inicio" )
  ************************************************************************/
   nuCantidad NUMBER;

   CURSOR cuInformacion IS
        SELECT substr(B.FechaPago,LENGTH(B.FechaPago)-1,2)||'/'||
               substr(B.FechaPago,LENGTH(B.FechaPago)-3,2)||'/'||
               substr(B.FechaPago,1,4) FechaPago,
          B.dcrcfecr,
          B.porcent,
          B.dcrcecrc,
          B.dcrccorc,
          B.cuenta,
          signo,
          B.dcrcinad,
          B.dcrcusua,
          B.dcrcterm,
          B.dcrcprog,
          B.dcrcsist,
          B.clasificador,
          B.Comprobante,
          B.TipoComprobante,
          corctimo,
          B.ecrcfech,
          SUM(B.valor) valor
        FROM
          (SELECT
            (SELECT DISTINCT a.rcccpopa
            FROM ic_recoclco a
            WHERE clcrcons=a.rcccclcr
            AND a.rccccuco=dcrccuco
            ) porcent,
            dcrcecrc,
            dcrccorc,
            dcrccuco cuenta,
            dcrcsign signo,
            SUM(DECODE(dcrcsign,'D',dcrcvalo,-dcrcvalo)) valor,
            dcrcinad,
            TRUNC(dcrcfecr) dcrcfecr,
            dcrcusua,
            dcrcterm,
            dcrcprog,
            dcrcsist,
            DECODE(ldci_pkinterfazsap.fnuValidaCtaBanco(clcrclco,dcrccuco),0,-1,clcrclco) clasificador,
            corccoco Comprobante ,
            corctido TipoComprobante,
            corctimo,
            TRUNC(ecrcfech) ecrcfech,
            ldci_pkinterfazsap.fvaGetData(30,dcrcinad,'|') FechaPago
          FROM ic_encoreco
          JOIN ic_decoreco
          ON (ecrccons = dcrcecrc)
          JOIN ic_confreco
          ON (dcrccorc = corccons )
          JOIN ic_clascore
          ON (clcrcons = dcrcclcr)
          JOIN ic_clascont
          ON (clcrclco    =clcocodi)
          WHERE ecrccoco IN
            (SELECT COD_COMPROBANTE FROM LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ =ldci_pkinterfazsap.vaCODINTINTERFAZ
            )
          AND        ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin
          GROUP BY dcrcecrc,
            dcrccorc,
            dcrccuco,
            dcrcsign,
            dcrcinad,
            TRUNC(dcrcfecr),
            dcrcusua,
            dcrcterm,
            dcrcprog,
            dcrcsist,
            clcrclco,
            corccoco,
            corctido,
            corctimo,
            TRUNC(ecrcfech),
            clcrcons
          ) B
        GROUP BY B.porcent,
          B.dcrcecrc,
          B.dcrccorc,
          B.cuenta,
          signo,
          B.dcrcinad,
          B.dcrcfecr,
          B.dcrcusua,
          B.dcrcterm,
          B.dcrcprog,
          B.dcrcsist,
          B.clasificador,
          B.Comprobante,
          B.TipoComprobante,
          corctimo,
          B.ecrcfech,
          B.FechaPago;

        /*Cursor para obtener tipo de comprobante*/
        CURSOR cuTipoComprobante (sbTipo ldci_tipointerfaz.tipointerfaz%type) IS
            SELECT cod_tipocomp
            FROM ldci_tipointerfaz
            WHERE tipointerfaz = sbTipo
            AND rownum = 1;

        -- Tipo de dato para guardar informaci?n
        TYPE tyDatInrecaudos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
        vtyDatInrecaudos tyDatInrecaudos;

        /*ARANDA 5656 :Cursor para obtener localidad del producto al cual se le anula el cheque devuelto*/
        CURSOR cuObtLocCheque (dtMovifeco DATE,nuBanco NUMBER,nuValor NUMBER ) IS
        SELECT b.geograp_location_id LOCALIDAD--,chdefere FECHA,chdevach VALOR,
          --CRCDCUPO CUPON,CARGNUSE PRODUCTO,CUPOSUSC CONTRATO, NOREBANC BANCO,NORECUBA CUENTA
          FROM
            OPEN.CHEQDEVU,OPEN.CURECHDE,OPEN.NOVERECA,OPEN.CUPON,OPEN.CARGOS ,
            OPEN.ab_address b , OPEN.pr_product p, OPEN.ge_geogra_location  g
          WHERE
          Trunc(CHDEFERE) = dtMovifeco
          AND NOREBANC = nuBanco
          AND chdevach = nuValor
          AND CHDERADI = CRCDCHDE
          AND CHDENORE = NORECONS
          AND CRCDCUPO = CUPONUME
          AND CARGCODO = CUPONUME
          AND CARGSIGN = 'PA'
          AND b.address_id = p.address_id
          AND g.geograp_location_id = b.geograp_location_id
          AND  p.product_id = cargnuse;


        --<<
        --definicion de variables
        -->>
        nuRet          NUMBER;
        nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
        vaClave        ldci_claveconta.clavcodi%TYPE;
        iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
        iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
        daFechaGen DATE;
        nuResultado NUMBER;
        nuCentBen NUMBER;
        sbOrdInt VARCHAR2(100);
        nuCategoria NUMBER;
        sbSegmento VARCHAR2(200);
        sbDescripcionNit VARCHAR2(200);
        sbEsDivergente VARCHAR2(2);
        nuNIT VARCHAR2(100);
        nuCLASECTA number;
        nuASIGNACN number;
        nuCLAVREF1 number;
        sbCLAVREF3  VARCHAR2(100);
        nuCTADIV   number;
        nuCOD_CLASIFCONTA VARCHAR2(100);
        nuTipoEntidad NUMBER;
        vaClaveContaDivergen VARCHAR2(2);
        vaClaveContaDiver11 VARCHAR2(2);
        nuEntidadFinan NUMBER;
        nuEntidadNoFinan NUMBER;
        vaTXTPOSCN VARCHAR2(2000);
        nuCUPON  LDCI_INCOLIQU.CUPON%TYPE;
        inVanuLocalidad VARCHAR2(100);
        nuValor1 NUMBER;
        nuValor2 NUMBER;
        vaSigno VARCHAR2(2);
        nuError NUMBER:=0;
        nuCantRegistros NUMBER := 0;
        nuEjecutado NUMBER := 0;
        NITGENREINTEGRO NUMBER;
        NITGENERICO NUMBER;
        CODCLAVECUECOB VARCHAR2(20);
        nuLocalidad VARCHAR2(100);
        nucod_tipocomp ldci_tipointerfaz.cod_tipocomp%type;
			  vaCtapuenteCart VARCHAR2(100); --Aranda 5656
        vaGrupaReinSAP varchar2(2);-- Aranda 6744

        nuVlrAjuste   NUMBER; -- 26/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

   BEGIN

    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaClaveContaDiver11',vaClaveContaDiver11, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CLAVE40', vaclave40, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CODCLAVECUECOB', CODCLAVECUECOB, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NITGENREINTEGRO', NITGENREINTEGRO, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CuentaPteCartera', vaCtapuenteCart, osbErrorMessage); --Aranda 5656
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_GENERAL', NITGENERICO, osbErrorMessage); --Aranda 5656
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'AGRUPAREIN', vaGrupaReinSAP, osbErrorMessage); -- Aranda 6744

    -- 26-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'LA_Limite', nuVlrAjuste, osbErrorMessage);

    -- Aranda 6744
    nuFechaprocesa := daFecha_Inicio;

    IF (daFecha_Fin<>daFecha_Inicio) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'La interfaz de Control Reintegro solo se debe procesar para una fecha, no se admiten rangos de fecha '||' para la Fecha Inicial :['||daFecha_Inicio||'] Fecha Final ['||daFecha_Fin||'] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;
    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegFecha(trunc(daFecha_Inicio),nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede Generar interfaz '||nutimocodi||' para la Fecha  :['||daFecha_Fin||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

    ldci_pkinterfazsap.vaCODINTINTERFAZ:='LA';
    ldci_pkinterfazsap.vaSOCIEDAD:='GDOC';
    ldci_pkinterfazsap.vaCURRENCY:='COP';
    nuTipo := ldci_pkinterfazsap.vaCODINTINTERFAZ;


    -- Busca el tipo de comprobante
    open cuTipoComprobante(ldci_pkinterfazsap.vaCODINTINTERFAZ);
    fetch cuTipoComprobante INTO nucod_tipocomp;
    close cuTipoComprobante;

    ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Validacion de Interfaz_ ['||TO_CHAR(ldci_pkinterfazsap.nuSeqICLINUDO)||'] fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.nuSeqICLINUDO,USER,USERENV('TERMINAL'));
    -- Validaciones previas de la interfaz.
    nuRet := ldci_ProcesosInterfazSap.ValidaInterfazControlReinte(daFecha_Inicio,nucod_tipocomp);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error al procesar ldci_ProcesosInterfazSap.ValidaInterfazControlReinte No se puede Generar interfaz '||nutimocodi||' para la Fecha  :['||daFecha_Fin||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,' Finaliza Validacion de Interfaz_ fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.nuSeqICLINUDO,USER,USERENV('TERMINAL'));
    --<<
    --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
    -->>
    OPEN cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Registros a procesar: ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    vaTXTPOSCN:= 'REINTEGRO'||ldci_pkinterfazsap.nuSeqICLINUDO;

    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatInrecaudos
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatInrecaudos.first IS null);

        IF (vtyDatInrecaudos.count > 0) THEN
            --<<
            --Obtencion delete numero de documento
            -->>

            FOR i IN vtyDatInrecaudos.First..vtyDatInrecaudos.Last LOOP

                IF(trunc(vtyDatInrecaudos(i).valor)=0) THEN
                    NULL;
                ELSE
                    vaClave := NULL;
                    --<<
                    --obtiene la clave contable a partir de la cuenta
                    -->>
                    --vaClave:=fvaGetClaveContaPagos(vtyDatInrecaudos(i).clasificador,vtyDatInrecaudos(i).cuenta,vaSigno,100) ;
                    IF (vtyDatInrecaudos(i).cuenta LIKE '1110%') THEN --Si es la cuenta de bancos
                        vaClave := vaclave40;
                        nuCLASECTA := vtyDatInrecaudos(i).cuenta;
                        nuASIGNACN := ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|');
                        nuCLAVREF1 := nuASIGNACN;
                        sbDescripcionNit :=fvaGetDescripNit(nuASIGNACN);
                        sbCLAVREF3 := sbDescripcionNit;
                        nuCTADIV   := '';
                        nuCUPON:='';
                        vaTXTPOSCN := vaTXTPOSCN;
                        nuRet :=fnuGetLocalidad(ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|'),nuLocalidad);
                        nuCentBen:=fvaGetCebeNew(nuLocalidad,1);
                    ELSE IF (vtyDatInrecaudos(i).cuenta LIKE '147065%') THEN
												--Si es la cuenta es de Entidad no Financiera
                        vaClave := CODCLAVECUECOB;
                        nuCLASECTA := ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|');
                        nuASIGNACN := ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|');
                        nuCLAVREF1 := nuASIGNACN;
                        sbDescripcionNit :=fvaGetDescripNit(nuASIGNACN);
                        sbCLAVREF3 := sbDescripcionNit;
                        nuCTADIV   := vtyDatInrecaudos(i).cuenta;
                        nuCUPON:='';
                        vaTXTPOSCN := vaTXTPOSCN;
                        nuCentBen:=NITGENREINTEGRO;
                    ELSE IF (vtyDatInrecaudos(i).cuenta like vaCtapuenteCart) THEN --Aranda 5656
                        vaClave := CODCLAVECUECOB;
                        nuCLASECTA := vtyDatInrecaudos(i).cuenta;
                        nuASIGNACN := NITGENERICO;
                        nuCLAVREF1 := NITGENERICO;
                        sbDescripcionNit :=fvaGetDescripNit(NITGENERICO);
                        sbCLAVREF3 := NITGENERICO;
                        nuCTADIV   := '';
                        nuCUPON:='';
                        vaTXTPOSCN := vaTXTPOSCN;
                    ELSE
                        vaClave := -1;
                    END IF;
                    END IF;
                END IF;

                if (vtyDatInrecaudos(i).corctimo = 65 or vtyDatInrecaudos(i).corctimo = 66) then --Aranda 5656
                   vaClave := -1;
                   IF ( vtyDatInrecaudos(i).corctimo = 66) THEN
                        nuLocalidad := NULL;
                        OPEN cuObtLocCheque (vtyDatInrecaudos(i).ecrcfech,
                                             ldci_pkinterfazsap.fvaGetData(8,vtyDatInrecaudos(i).dcrcinad,'|'),
                                             ABS(vtyDatInrecaudos(i).VALOR) );
                        FETCH cuObtLocCheque INTO nuLocalidad;
                        CLOSE cuObtLocCheque;

                        IF (nuLocalidad IS NULL) THEN
                          nuLocalidad := 18;
                        END IF;
                        nuCentBen:=fvaGetCebeNew(nuLocalidad,1);
                    END IF;
                END if;

                sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
                --Si la clave contable , no esta es para el clasificador, es nulla y se almacena en el log, pero se continua con la generaci?n.
                if (vaClave is null or vaClave=-1 ) then
                    vaClave := fvaGetClaveContaIngreso(-1,vtyDatInrecaudos(i).cuenta, vtyDatInrecaudos(i).Signo,vtyDatInrecaudos(i).porcent, iovactcaicme, iovactcainiv);
                    if (vaClave is null or vaClave=-1 ) then--if (vaClave is null) then
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatInrecaudos(i).TipoComprobante||'] Comprobante ['||vtyDatInrecaudos(i).Comprobante||'] Valide la cuenta contable ['||vtyDatInrecaudos(i).cuenta|| '] Cuenta  ['||vtyDatInrecaudos(i).cuenta||'] en la configuracion del comprobante ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                    end if;
                end if;
                daFechaGen:=vtyDatInrecaudos(i).ecrcfech;

                nuCOD_CLASIFCONTA:=-1;
                --<<
                --Se Obtiene la Categoria con Base en la Localidad
                -->>
                nuCategoria :=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
                --nuCentBen:=nvl(fvaGetCebeNew(inVanuLocalidad,nuCategoria),0);
                sbOrdInt:=null;
                nuTipoEntidad:=nvl(ldci_pkinterfazsap.fvaGetData(35,vtyDatInrecaudos(i).dcrcinad,'|'),0);--1 Entidad Financiera, 2 No Financiera

                --<<
                --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                -->>
                IF (vtyDatInrecaudos(i).FechaPago IS NULL) THEN
                    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener fecha de aplicacion del pago, valide la configuracion del registro Contable  :['||ldci_pkinterfazsap.fvaGetData(30,vtyDatInrecaudos(i).dcrcinad,'|'),to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    nuError:=-1;
                END IF;

                -- Obtiene el Ledger
                sbLEDGERS := fsbGetLedgers(nutimocodi, vtyDatInrecaudos(i).comprobante);

                nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_PAGOS(nutimocodi,
                                                ldci_pkinterfazsap.nuSeqICLINUDO,
                                                vtyDatInrecaudos(i).FechaPago,
                                                user,
                                                'SERVER',
                                                daFecha_Inicio, -- cgonzalez: Aranda 6744 - 13/08/2015 - Se cambia el SYSDATE por la fecha del parametro de ingreso (fecha de grabacion de los pagos)
                                                nuCOD_CLASIFCONTA,
                                                vaClave,
                                                nuCLASECTA,
                                                iovactcaicme,
                                                ABS(vtyDatInrecaudos(i).VALOR),
                                                ABS(vtyDatInrecaudos(i).VALOR),
                                                iovactcainiv,
                                                null,
                                                vaTXTPOSCN,
                                                null,
                                                null,
                                                ldci_pkinterfazsap.vaSOCIEDAD,
                                                null,
                                                null,
                                                null,
                                                null,
                                                i,
                                                nuCTADIV,
                                                nuASIGNACN,
                                                nuCLAVREF1,
                                                sbCLAVREF3,
                                                nuCUPON,
                                                nuCentBen,
                                                sbOrdInt,
                                                sbSegmento,
                                                vtyDatInrecaudos(i).dcrcinad,
                                                vtyDatInrecaudos(i).comprobante,
                                                sbLedgers);

                    --<<
                    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
                    -->>
                    IF (nuRet <> 0) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la informacion fnuInterfazReintegro :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        RAISE ERROR;
                    END IF;

                END IF;
            END LOOP;
        ELSE
					LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No Hay Registros a Procesar :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
				END IF;
        nuEjecutado := nuEjecutado + vtyDatInrecaudos.count;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuINSELDCI_INCOLIQU] INSERTANDO EN  INCOLIQU:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
        --<<
        --Se lanza la Exepcion sin la funcion no se ejecuto con exito
        -->>
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        vtyDatInrecaudos.delete;
    END loop;

    CLOSE cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Total Registros procesados: '||nuEjecutado,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

    IF (nuError <>0) THEN
        RETURN -1; --Cuando existen errores
    END IF;
    --<<
    --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
    -->>
    vtyDatInrecaudos.delete;

    -- Asienta registros
    commit;

    --<<
    --Genera la informacion de los documentos para SAP de la interfaz de INGRESOS
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuGeneDocuSap] GENERANDO EN  TRAMA SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));

    --Cgonzalez: Aranda 6744 se agrega la funcionalidad de crear documento por fecha de transaccion
    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'antes del Ingresa al genedocusaprein '||nuEjecutado,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    IF (vaGrupaReinSAP = 'S') THEN


    nuRet := ldci_pkinterfazsap.fnuGeneDocuSapReinfe(ldci_pkinterfazsap.nuSeqICLINUDO, 'REINTEGRO');

    else

    nuRet := ldci_pkinterfazsap.fnuGeneDocuSapRein(ldci_pkinterfazsap.nuSeqICLINUDO, 'REINTEGRO');

    END IF;
    --
    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuGeneDocuSap :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Se valida para corregir el descuadre por cada documento
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuAjusteInterContable] VALIDANDO AJUSTES...:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
    nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,nuTipo,nuVlrAjuste);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Si es satifactorio todo el proceso, se realiza el envio a SAP
    --Procedimiento Hector Dominguez
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[proEnviaDocContable] Enviando a SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));

    IF (vaEnviaIntefReinSAP = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuRegistraInterfaz] Registrando Envio a SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfaz(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Fin,'S',nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.vaCODINTINTERFAZ||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Porcentaje ejecutado :[100%]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia soportes de generacion de la interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    -- soportes de generacion de la interfaz
    ldci_ProcesosInterfazSap.ReporteControlReinteHERC (ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio);
    ldci_ProcesosInterfazSap.ReporteTramaReintegro(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio);

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Finaliza soportes de generacion de la interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.vaCODINTINTERFAZ||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Porcentaje ejecutado :[100%]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    return(0);

EXCEPTION
WHEN OTHERS THEN
     ldci_pkinterfazsap.vaMensError :=  '[fnuInterfazReintegro] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
		 LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
     return(-1);
   END fnuInterfazReintegro;

  FUNCTION fnuInterfazReintegroRO(nutimocodi     IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                  daFecha_Inicio DATE,
                                  daFecha_Fin    DATE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazReintegroRO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 24-07-2014
     DESCRIPCION  : Copia de la funcion fnuInterfazReintegro para Efigas,
                    Surtigas y Gases del Caribe.
                    Funcion que se encarga de armar obtener la informacion de la
                    interfaz de recaudos en SAP.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    -------- ----------- ------------------------------------------------
    Dcardona 21/01/2015  Aranda: XXXX
                         Se austa para que se env?e como fecha de contabilizaci?n
                         la fecha de los documentos a procesar, que ingresa como par?metro
                         en lugar del SYSDATE
  ************************************************************************/
  RETURN NUMBER
  IS

   nuCantidad NUMBER;

   CURSOR cuInformacion IS
        SELECT substr(B.FechaPago,LENGTH(B.FechaPago)-1,2)||'/'||
               substr(B.FechaPago,LENGTH(B.FechaPago)-3,2)||'/'||
               substr(B.FechaPago,1,4) FechaPago,
          B.dcrcfecr,
          B.porcent,
          B.dcrcecrc,
          B.dcrccorc,
          B.cuenta,
          signo,
          B.dcrcinad,
          B.dcrcusua,
          B.dcrcterm,
          B.dcrcprog,
          B.dcrcsist,
          B.clasificador,
          B.Comprobante,
          B.TipoComprobante,
          corctimo,
          B.ecrcfech,
          SUM(B.valor) valor
        FROM
          (SELECT
            (SELECT DISTINCT a.rcccpopa
            FROM ic_recoclco a
            WHERE clcrcons=a.rcccclcr
            AND a.rccccuco=dcrccuco
            ) porcent,
            dcrcecrc,
            dcrccorc,
            dcrccuco cuenta,
            dcrcsign signo,
            SUM(DECODE(dcrcsign,'D',dcrcvalo,-dcrcvalo)) valor,
            dcrcinad,
            TRUNC(dcrcfecr) dcrcfecr,
            dcrcusua,
            dcrcterm,
            dcrcprog,
            dcrcsist,
            DECODE(ldci_pkinterfazsap.fnuValidaCtaBanco(clcrclco,dcrccuco),0,-1,clcrclco) clasificador,
            corccoco Comprobante ,
            corctido TipoComprobante,
            corctimo,
            TRUNC(ecrcfech) ecrcfech,
            ldci_pkinterfazsap.fvaGetData(30,dcrcinad,'|') FechaPago
          FROM ic_encoreco
          JOIN ic_decoreco
          ON (ecrccons = dcrcecrc)
          JOIN ic_confreco
          ON (dcrccorc = corccons )
          JOIN ic_clascore
          ON (clcrcons = dcrcclcr)
          JOIN ic_clascont
          ON (clcrclco    =clcocodi)
          WHERE ecrccoco IN
            (SELECT COD_COMPROBANTE FROM LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ =ldci_pkinterfazsap.vaCODINTINTERFAZ
            )
          AND        ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin
          GROUP BY dcrcecrc,
            dcrccorc,
            dcrccuco,
            dcrcsign,
            dcrcinad,
            TRUNC(dcrcfecr),
            dcrcusua,
            dcrcterm,
            dcrcprog,
            dcrcsist,
            clcrclco,
            corccoco,
            corctido,
            corctimo,
            TRUNC(ecrcfech),
            clcrcons
          ) B
        GROUP BY B.porcent,
          B.dcrcecrc,
          B.dcrccorc,
          B.cuenta,
          signo,
          B.dcrcinad,
          B.dcrcfecr,
          B.dcrcusua,
          B.dcrcterm,
          B.dcrcprog,
          B.dcrcsist,
          B.clasificador,
          B.Comprobante,
          B.TipoComprobante,
          corctimo,
          B.ecrcfech,
          B.FechaPago;

        /*Cursor para obtener tipo de comprobante*/
        CURSOR cuTipoComprobante (sbTipo ldci_tipointerfaz.tipointerfaz%type) IS
            SELECT cod_tipocomp
            FROM ldci_tipointerfaz
            WHERE tipointerfaz = sbTipo
            AND rownum = 1;

        --<<
        -- Dcardona:
        -- 08-01-2015
        -- Se obtiene el nit de la entidad
        -->>
        CURSOR cuBancNit (nuBanco  banco.banccodi%TYPE)
        IS
        SELECT bancnit
          FROM banco
         WHERE banccodi = nuBanco;

        -- Tipo de dato para guardar informaci?n
        TYPE tyDatInrecaudos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
        vtyDatInrecaudos tyDatInrecaudos;

        --<<
        --definicion de variables
        -->>
        nuRet          NUMBER;
        nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
        vaClave        ldci_claveconta.clavcodi%TYPE;
        iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
        iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
        daFechaGen DATE;
        nuResultado NUMBER;
        nuCentBen NUMBER;
        sbOrdInt VARCHAR2(100);
        nuCategoria NUMBER;
        sbSegmento VARCHAR2(200);
        sbDescripcionNit VARCHAR2(200);
        sbEsDivergente VARCHAR2(2);
        nuNIT VARCHAR2(100);
        nuCLASECTA number;
        nuASIGNACN number;
        nuCLAVREF1 number;
        sbCLAVREF3  VARCHAR2(100);
        nuCTADIV   number;
        nuCOD_CLASIFCONTA VARCHAR2(100);
        nuTipoEntidad NUMBER;
        vaClaveContaDivergen VARCHAR2(2);
        vaClaveContaDiver11 VARCHAR2(2);
        nuEntidadFinan NUMBER;
        nuEntidadNoFinan NUMBER;
        vaTXTPOSCN VARCHAR2(2000);
        nuCUPON  LDCI_INCOLIQU.CUPON%TYPE;
        inVanuLocalidad VARCHAR2(100);
        nuValor1 NUMBER;
        nuValor2 NUMBER;
        vaSigno VARCHAR2(2);
        nuError NUMBER:=0;
        nuCantRegistros NUMBER := 0;
        nuEjecutado NUMBER := 0;
        NITGENREINTEGRO NUMBER;
        CODCLAVECUECOB VARCHAR2(20);
        nuLocalidad VARCHAR2(100);
        nucod_tipocomp ldci_tipointerfaz.cod_tipocomp%type;
        vaGrupaReinSAP varchar2(2);

        nuVlrAjuste   NUMBER; -- 26/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr
   BEGIN

    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'vaClaveContaDiver11',vaClaveContaDiver11, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CLAVE40', vaclave40, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CODCLAVECUECOB', CODCLAVECUECOB, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NITGENREINTEGRO', NITGENREINTEGRO, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'AGRUPAREIN', vaGrupaReinSAP, osbErrorMessage);
    -- <<
    -- CA-200-2006
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'VALIDADIFELA', ldci_pkinterfazsap.Vadiferen, osbErrorMessage);
    --
    -- >>

    -- 26-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'LA_Limite', nuVlrAjuste, osbErrorMessage);

    nuFechaprocesa := daFecha_Inicio;
    IF (daFecha_Fin<>daFecha_Inicio) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'La interfaz de Control Reintegro solo se debe procesar para una fecha, no se admiten rangos de fecha '||' para la Fecha Inicial :['||daFecha_Inicio||'] Fecha Final ['||daFecha_Fin||'] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;
    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegFecha(trunc(daFecha_Inicio),nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede Generar interfaz '||nutimocodi||' para la Fecha  :['||daFecha_Fin||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

    ldci_pkinterfazsap.vaCODINTINTERFAZ:=nutimocodi;
    nuTipo :=nutimocodi;

    -- Busca el tipo de comprobante
    open cuTipoComprobante(ldci_pkinterfazsap.vaCODINTINTERFAZ);
    fetch cuTipoComprobante INTO nucod_tipocomp;
    close cuTipoComprobante;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Validacion de Interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.nuSeqICLINUDO,USER,USERENV('TERMINAL'));
    -- Validaciones previas de la interfaz.
    -- VALIDAR CON INGENIEROS ARQS CALI
    nuRet := ldci_ProcesosInterfazSap.ValidaInterfazControlReinte(daFecha_Inicio,nucod_tipocomp);

    --<<
    -- CA-200-2006
    --
    IF (ldci_pkinterfazsap.Vadiferen = 'S') then

        nuRet := ldci_ProcesosInterfazSap.fnuValidaHR_LA(daFecha_Inicio,nucod_tipocomp);

        IF (nuRet <> 0) THEN
             LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se puede Generar interfaz por diferencias '||nutimocodi||' para la Fecha  :['||daFecha_Fin||'] valide las diferencias en los soportes generados [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
             raise Error;
        END IF;

    END IF;

    --
    -->>

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Finaliza Validacion de Interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.nuSeqICLINUDO,USER,USERENV('TERMINAL'));

    --<<
    --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
    -->>
    OPEN cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Inicia Registros a procesar: ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
    vaTXTPOSCN:= 'REINTEGRO'||ldci_pkinterfazsap.nuSeqICLINUDO;

    LOOP
        FETCH cuInformacion
            BULK COLLECT INTO vtyDatInrecaudos
            LIMIT cnuLimite;
        -- Se sale cuando no haya mas ingresos por procesar
        exit when (cuInformacion%NOTFOUND is null) OR
                  (vtyDatInrecaudos.first IS null);

        IF (vtyDatInrecaudos.count > 0) THEN
            --<<
            --Obtencion delete numero de documento
            -->>

            FOR i IN vtyDatInrecaudos.First..vtyDatInrecaudos.Last LOOP

                IF(trunc(vtyDatInrecaudos(i).valor)=0) THEN
                    NULL;
                ELSE

                    --<<
                    -- Dcardona
                    -- 07-01-2015
                    -- Se inicializan las variables que se envian a la trama
                    -->>
                    vaClave          := NULL;
                    nuCLASECTA       := NULL;
                    nuASIGNACN       := NULL;
                    nuCLAVREF1       := NULL;
                    sbDescripcionNit := NULL;
                    sbCLAVREF3       := NULL;
                    nuCTADIV         := NULL;
                    nuCUPON          := NULL;
                    nuCentBen        := NULL;

                    --<<
                    --obtiene la clave contable a partir de la cuenta
                    -->>
                    --vaClave:=fvaGetClaveContaPagos(vtyDatInrecaudos(i).clasificador,vtyDatInrecaudos(i).cuenta,vaSigno,100) ;
                    IF (vtyDatInrecaudos(i).cuenta LIKE '1110%') THEN --Si es la cuenta de bancos

                        vaClave := vaclave40;
                        nuCLASECTA := vtyDatInrecaudos(i).cuenta;
                        nuASIGNACN := ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|');
                        --<<
                        -- Dcardona
                        -- 08-01-2015
                        -- Se valida que el nit no sea NULO
                        -->>
                        IF (nuASIGNACN IS NULL) THEN

                           OPEN cuBancNit(Nvl(ldci_pkinterfazsap.fvaGetData(45,vtyDatInrecaudos(i).dcrcinad,'|'),NULL));
                           FETCH cuBancNit INTO nuASIGNACN;
                           CLOSE cuBancNit;

                        END IF;

                        nuCLAVREF1 := nuASIGNACN;
                        sbDescripcionNit :=fvaGetDescripNit(nuASIGNACN);
                        sbCLAVREF3 := sbDescripcionNit;
                        nuCTADIV   := '';
                        nuCUPON:='';
                        vaTXTPOSCN := vaTXTPOSCN;
                        nuRet :=fnuGetLocalidad(nuASIGNACN,nuLocalidad);
                        nuCentBen:=fvaGetCebeNoCat(nuLocalidad);

                        --<<
                        -- Se valida que el centro de beneficio exista
                        -->>
                        IF (nuCentBen IS NULL OR nuCentBen = 0) THEN

                           LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi, 'Interfaz [' || ldci_pkinterfazsap.nuSeqICLINUDO ||
                                                               '] No se puede obtener el Centro de Beneficio para la localidad  :[' ||
                                                               nuLocalidad||']', to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),
                                                               nutimocodi, USER, USERENV('TERMINAL'));
                           nuError:=-1;

                        END IF;

                    ELSIF (vtyDatInrecaudos(i).cuenta LIKE '1470%') THEN --Si es la cuenta es de Entidad no Financiera

                        vaClave := CODCLAVECUECOB;
                        nuASIGNACN := ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|');
                        --<<
                        -- Dcardona
                        -- 08-01-2015
                        -- Se valida que el nit no sea NULO
                        -->>
                        IF (nuASIGNACN IS NULL) THEN

                           OPEN cuBancNit(Nvl(ldci_pkinterfazsap.fvaGetData(45,vtyDatInrecaudos(i).dcrcinad,'|'),NULL));
                           FETCH cuBancNit INTO nuASIGNACN;
                           CLOSE cuBancNit;

                        END IF;

                        nuCLASECTA := nuASIGNACN;
                        nuCLAVREF1 := nuASIGNACN;
                        sbDescripcionNit :=fvaGetDescripNit(nuASIGNACN);
                        sbCLAVREF3 := sbDescripcionNit;
                        nuCTADIV   := vtyDatInrecaudos(i).cuenta;
                        nuCUPON:='';
                        vaTXTPOSCN := vaTXTPOSCN;
                        nuCentBen:=NITGENREINTEGRO;

                    --<<
                    -- Dcardona:
                    -- 07-01-2015
                    -- De lo contrario si es otra cuanta diferente a bancos y no financieras
                    -->>
                    ELSE

                        vaClave := fvaGetClaveContaIngreso(-1,vtyDatInrecaudos(i).cuenta, vtyDatInrecaudos(i).Signo,vtyDatInrecaudos(i).porcent, iovactcaicme, iovactcainiv);

                        --<<
                        -- Si la clave es -1 o nula
                        -->>
                        IF (vaClave IS NULL OR vaClave=-1 ) THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatInrecaudos(i).TipoComprobante||'] Comprobante ['||vtyDatInrecaudos(i).Comprobante||'] Valide la cuenta contable ['||vtyDatInrecaudos(i).cuenta|| '] Cuenta  ['||vtyDatInrecaudos(i).cuenta||'] en la configuracion del comprobante ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                            nuError:=-1;
                        END IF;

                        nuCLASECTA := vtyDatInrecaudos(i).cuenta;
                        nuASIGNACN := ldci_pkinterfazsap.fvaGetData(34,vtyDatInrecaudos(i).dcrcinad,'|');
                        --<<
                        -- Dcardona
                        -- 08-01-2015
                        -- Se valida que el nit no sea NULO
                        -->>
                        IF (nuASIGNACN IS NULL) THEN

                           OPEN cuBancNit(Nvl(ldci_pkinterfazsap.fvaGetData(45,vtyDatInrecaudos(i).dcrcinad,'|'),NULL));
                           FETCH cuBancNit INTO nuASIGNACN;
                           CLOSE cuBancNit;

                        END IF;

                        nuCLAVREF1 := nuASIGNACN;
                        sbDescripcionNit :=fvaGetDescripNit(nuASIGNACN);
                        sbCLAVREF3 := sbDescripcionNit;
                        nuCTADIV   := '';
                        nuCUPON:='';
                        vaTXTPOSCN := vaTXTPOSCN;
                        nuRet :=fnuGetLocalidad(nuASIGNACN,nuLocalidad);
                        nuCentBen:=fvaGetCebeNoCat(nuLocalidad);

                        --<<
                        -- Se valida que el centro de beneficio exista
                        -->>
                        IF (nuCentBen IS NULL OR nuCentBen = 0) THEN

                           LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi, 'Interfaz [' || ldci_pkinterfazsap.nuSeqICLINUDO ||
                                                               '] No se puede obtener el Centro de Beneficio para la localidad  :[' ||
                                                               nuLocalidad||']', to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),
                                                               nutimocodi, USER, USERENV('TERMINAL'));
                           nuError:=-1;

                        END IF;

                    END IF;

                if vtyDatInrecaudos(i).corctimo = 65 then
                   vaClave := -1;
                END if;

                sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
                --Si la clave contable , no esta es para el clasificador, es nulla y se almacena en el log, pero se continua con la generaci?n.
                if (vaClave is null or vaClave=-1 ) then
                    vaClave := fvaGetClaveContaIngreso(-1,vtyDatInrecaudos(i).cuenta, vtyDatInrecaudos(i).Signo,vtyDatInrecaudos(i).porcent, iovactcaicme, iovactcainiv);
                    if (vaClave is null or vaClave=-1 ) then--if (vaClave is null) then
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatInrecaudos(i).TipoComprobante||'] Comprobante ['||vtyDatInrecaudos(i).Comprobante||'] Valide la cuenta contable ['||vtyDatInrecaudos(i).cuenta|| '] Cuenta  ['||vtyDatInrecaudos(i).cuenta||'] en la configuracion del comprobante ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        nuError:=-1;
                    end if;
                end if;
                daFechaGen:=vtyDatInrecaudos(i).ecrcfech;

                nuCOD_CLASIFCONTA:=-1;
                --<<
                --Se Obtiene la Categoria con Base en la Localidad
                -->>
                nuCategoria :=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatInrecaudos(i).dcrcinad,'|'),NULL);
                --nuCentBen:=nvl(fvaGetCebeNew(inVanuLocalidad,nuCategoria),0);
                sbOrdInt:=null;
                nuTipoEntidad:=nvl(ldci_pkinterfazsap.fvaGetData(35,vtyDatInrecaudos(i).dcrcinad,'|'),0);--1 Entidad Financiera, 2 No Financiera

                --<<
                --Inserta los datos en la tabla vtyLDCI_INCOLIQU
                -->>
                IF (vtyDatInrecaudos(i).FechaPago IS NULL) THEN
                    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener fecha de aplicacion del pago, valide la configuracion del registro Contable  :['||ldci_pkinterfazsap.fvaGetData(30,vtyDatInrecaudos(i).dcrcinad,'|'),to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    nuError:=-1;
                END IF;

                -- Obtiene el Ledger
                sbLEDGERS := fsbGetLedgers(nutimocodi, vtyDatInrecaudos(i).comprobante);

                nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_PAGOS(nutimocodi,
                                                ldci_pkinterfazsap.nuSeqICLINUDO,
                                                vtyDatInrecaudos(i).FechaPago,
                                                user,
                                                'SERVER',
                                                daFecha_Inicio, -- Dcardona: Aranda XXXX - 20/01/2015 - Se cambia el SYSDATE por la fecha del par?metro de ingreso (fecha de grabaci?n de los pagos)
                                                nuCOD_CLASIFCONTA,
                                                vaClave,
                                                nuCLASECTA,
                                                iovactcaicme,
                                                ABS(vtyDatInrecaudos(i).VALOR),
                                                ABS(vtyDatInrecaudos(i).VALOR),
                                                iovactcainiv,
                                                null,
                                                vaTXTPOSCN,
                                                null,
                                                null,
                                                ldci_pkinterfazsap.vaSOCIEDAD,
                                                null,
                                                null,
                                                null,
                                                null,
                                                i,
                                                nuCTADIV,
                                                nuASIGNACN,
                                                nuCLAVREF1,
                                                sbCLAVREF3,
                                                nuCUPON,
                                                nuCentBen,
                                                sbOrdInt,
                                                sbSegmento,
                                                vtyDatInrecaudos(i).dcrcinad,
                                                vtyDatInrecaudos(i).comprobante,
                                                sbLedgers);

                    --<<
                    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
                    -->>
                    IF (nuRet <> 0) THEN
                        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la informacion fnuInterfazReintegroRO :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                        RAISE ERROR;
                    END IF;

                END IF;
            END LOOP;
        END IF;
        nuEjecutado := nuEjecutado + vtyDatInrecaudos.count;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuINSELDCI_INCOLIQU] INSERTANDO EN  INCOLIQU:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
        --<<
        --Se lanza la Exepcion sin la funcion no se ejecuto con exito
        -->>
        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
            raise Error;
        END IF;

        vtyDatInrecaudos.delete;
    END loop;

    CLOSE cuInformacion;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Total Registros procesados: '||nuEjecutado,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

    IF (nuError <>0) THEN
    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Existen Errores '||nuEjecutado,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        RETURN -1; --Cuando existen errores
    END IF;
    --<<
    --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
    -->>
    vtyDatInrecaudos.delete;
    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'hace commit '||nuEjecutado,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    -- Asienta registros
    commit;

    --<<
    --Genera la informacion de los documentos para SAP de la interfaz de INGRESOS
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'antes del Ingresa al genedocusaprein '||nuEjecutado,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    IF (vaGrupaReinSAP = 'S') THEN


    nuRet := ldci_pkinterfazsap.fnuGeneDocuSapReinfe(ldci_pkinterfazsap.nuSeqICLINUDO, 'REINTEGRO');

    else

    nuRet := ldci_pkinterfazsap.fnuGeneDocuSapRein(ldci_pkinterfazsap.nuSeqICLINUDO, 'REINTEGRO');

    END IF;
    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuGeneDocuSap :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Se valida para corregir el descuadre por cada documento
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuAjusteInterContable] VALIDANDO AJUSTES...:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
    nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,nuTipo,nuVlrAjuste);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Si es satifactorio todo el proceso, se realiza el envio a SAP
    --Procedimiento Hector Dominguez
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[proEnviaDocContable] Enviando a SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));

    IF (vaEnviaIntefReinSAP = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'[fnuRegistraInterfaz] Registrando Envio a SAP:['||nuTipo||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfaz(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Fin,'S',nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nuTipo,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||nuTipo||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuTipo,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.vaCODINTINTERFAZ||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Porcentaje ejecutado :[100%]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia soportes de generacion de la interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    -- soportes de generacion de la interfaz
    ldci_ProcesosInterfazSap.ReporteControlReinteHERC (ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio);
    ldci_ProcesosInterfazSap.ReporteTramaReintegro(ldci_pkinterfazsap.nuSeqICLINUDO,daFecha_Inicio);

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Finaliza soportes de generacion de la interfaz fecha ['||daFecha_Inicio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.vaCODINTINTERFAZ||'] Numero ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Porcentaje ejecutado :[100%]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    return(0);

EXCEPTION
WHEN OTHERS THEN
     ldci_pkinterfazsap.vaMensError :=  '[fnuInterfazReintegroRO] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
     return(-1);
   END fnuInterfazReintegroRO;

   FUNCTION fnuInterfazProvConsumo (nutimocodi   in LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type,
                            daFecha_Inicio DATE,
                            daFecha_Fin DATE,nuAnio NUMBER,nuMes Number)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazProvConsumo
     AUTOR     : Oscar Restrepo
     FECHA     : 20-10-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar obtener la informacion de la interfaz
                    de Provision de Consumo en SAP.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion

  ************************************************************************/

   nuCantidad NUMBER;

   daFecha_InicioAnt DATE;
   daFecha_FinAnt DATE;


   CURSOR cuInformacion (daFecha_Inicio DATE, daFecha_Fin DATE) IS
      SELECT         nutimocodi DocumentoSAP,
                     (select distinct a.rcccpopa from ic_recoclco a where clcrcons=a.rcccclcr and a.rccccuco=dcrccuco) porcent,
                     dcrccons,
                     dcrcecrc,
                     dcrccorc,
                     dcrccuco cuenta,
                     dcrcsign signos,
                     dcrcvalo valor,
                     dcrcinad,
                     dcrcfecr,
                     dcrcclcr,
                     dcrcusua,
                     dcrcterm,
                     dcrcprog,
                     dcrcsist,
                     clcrclco clasificador,
                     clcodesc,
                     corccoco Comprobante ,
                     (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                     corctido TipoComprobante,
                     (select tccodesc from ic_ticocont
                          where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                     ) DescTipoComprobante,
                     ecrcfech
        FROM       ic_encoreco
        JOIN       ic_decoreco on (ecrccons = dcrcecrc)
        JOIN       ic_confreco on (dcrccorc = corccons )
        JOIN       ic_clascore on (clcrcons = dcrcclcr)
        JOIN       ic_clascont on (clcrclco=clcocodi)
        WHERE      ecrccoco in (SELECT COD_COMPROBANTE from LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ =nutimocodi)
        AND        ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin ;
        /*Fecha diaria, con la cual se generan los documentos, esta fecha es la fecha con la cual se procesaron los
        registros contables para el comprobante de Provision Consumo*/



  TYPE tyDatIngresos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyDatIngresos tyDatIngresos;

   CURSOR cuInformacionRev (nuMesAnt NUMBER,nuAnoAnt NUMBER, nuComprobante NUMBER) IS
      SELECT
              ANIO,
              MES,
              CLAVCONT,
              CLASECTA,
              INDICCME,
              IMPOMTRX,
              IMPOMSOC,
              INDICIVA,
              CONDPAGO,
              FECHBASE,
              REFFACTR,
              BASEIMPT,
              CENTROCO,
              ORDENINT,
              CANTIDAD,
              ASIGNACN,
              TXTPOSCN,
              CENTROBE,
              SEGMENTO,
              OBJCOSTO,
              CLAVREF1,
              CLAVREF2,
              CLAVREF3,
              SOCIEDGL,
              MATERIAL,
              TIPORETC,
              INDRETEC,
              BASERETC,
              FECHVALOR,
              CTADIV,
              COD_CENTROBENEF,
              COD_CLASIFCONTA,
              nuComprobante comprobante
     FROM LDCI_RECLACARTNTESAP
     WHERE
              ANIO = nuAnoAnt
              AND  MES = nuMesAnt
              AND tipointerfaz = 'L5C'    -- sao 340484: Cambio tipo documento de LC por L5C
              AND CLAVREF2 IS NOT NULL;   -- Este cambio no se incluyo en la entrega [Incluir]

  TYPE tyDatcuInformacionRev IS TABLE OF cuInformacionRev%ROWTYPE INDEX BY BINARY_INTEGER;
    vtycuInformacionRev tyDatcuInformacionRev;

     --<<
     --definicion de variables
     -->>
     nuRet          NUMBER;
     nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
     vaClave        ldci_claveconta.clavcodi%TYPE;
     iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
     iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
     daFechaGen DATE;

     nuCentBen NUMBER;
     sbOrdInt VARCHAR2(100);
     nuCategoria NUMBER;
     sbSegmento VARCHAR2(200);
     sbDescripcionNit VARCHAR2(200);
     nuNIT VARCHAR2(100);
     nuCOD_CLASIFCONTA VARCHAR2(100);

     nuAnoAnt       NUMBER;
     nuMesAnt       NUMBER;
     daFechAnt      DATE;
     TipInterRevProvision LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
     nuLocalidad NUMBER;
     centaerror NUMBER:=0;
     nuError NUMBER:=0;
     nuComprobanteRev number;
	   nuTipoServicio NUMBER;
	   nuCiclo        ciclo.ciclcodi%type;

     nuVlrAjuste   NUMBER; -- 26/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

  BEGIN

    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'TipInterRevProvision',TipInterRevProvision, osbErrorMessage);

    ldci_pkinterfazsap.vaCODINTINTERFAZ:='L5';
    ldci_pkinterfazsap.vaSOCIEDAD:='GDOC';
    ldci_pkinterfazsap.vaCURRENCY:='COP';

    -- 26-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L5_Limite', nuVlrAjuste, osbErrorMessage);

    /********** PROVISION CONSUMO *******/

    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,nutimocodi);
    IF (nuRet <> 0) THEN
        sbErrorInterfaz := 'No se puede Generar interfaz '||ldci_pkinterfazsap.vaCODINTINTERFAZ||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]';
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,sbErrorInterfaz,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

    --<<
    --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
    --Provision de Consumo
    -->>
    OPEN cuInformacion(daFecha_Inicio,daFecha_Fin);
    FETCH cuInformacion BULK COLLECT INTO vtyDatIngresos;
    CLOSE cuInformacion;

    --<<
    --Se evalua que la consulta contenga registros, en caso contratio retorna -1
    -->>
    IF (vtyDatIngresos.count > 0) THEN
         --<<
       --Obtencion delete numero de documento
       -->>
       ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia Interfaz  Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

       nuComprobanteRev := vtyDatIngresos(vtyDatIngresos.first).comprobante;

       FOR i IN vtyDatIngresos.First..vtyDatIngresos.Last LOOP
          vaClave := NULL;
           --<<
          --obtiene la clave contable a partir de la cuenta
          -->>
          vaClave := fvaGetClaveContaIngreso(vtyDatIngresos(i).clasificador,vtyDatIngresos(i).cuenta, vtyDatIngresos(i).signos,vtyDatIngresos(i).porcent, iovactcaicme, iovactcainiv);
          --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
          if (vaClave is null) then
              LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatIngresos(i).TipoComprobante||'] Comprobante ['||vtyDatIngresos(i).Comprobante||'] Clasificador ['||vtyDatIngresos(i).clasificador|| '] Cuenta  ['||vtyDatIngresos(i).cuenta||'] Signo ['||vtyDatIngresos(i).signos||'] Porcentaje '||vtyDatIngresos(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
              centaerror:=centaerror+1;
          end if;

          daFechaGen:=vtyDatIngresos(i).ecrcfech;

          nuLocalidad 		:=ldci_pkinterfazsap.fvaGetData(17,vtyDatIngresos(i).dcrcinad,'|');
          nuCategoria 		:=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatIngresos(i).dcrcinad,'|'),NULL);
		  nuTipoServicio	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,vtyDatIngresos(i).dcrcinad,'|'),NULL);
		  nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,vtyDatIngresos(i).dcrcinad,'|'),NULL);

        if NOT tbCentroBeneficio.exists(nuLocalidad||nuCategoria) then
            nuCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebeNew(nuLocalidad,nuCategoria),NULL);
            -- Cache para almacenar los diferentes centros de beneficio
            tbCentroBeneficio(nuLocalidad||nuCategoria) :=  nuCentBen;
        else
            nuCentBen:= tbCentroBeneficio(nuLocalidad||nuCategoria);
        END if;

        if(nuCentBen = 0 or nuCentBen is null) then
          sbSegmento:='N/A';
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,' Interfaz [ '||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Centro de Beneficio para la Localidad  :['||nuLocalidad||'] Con Categoria ['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          centaerror:=centaerror+1;
        else
          sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
        end if;

          nuCOD_CLASIFCONTA:=vtyDatIngresos(i).clasificador;
          nuNIT:=Nvl(fnuGetNitGenerico(nuCOD_CLASIFCONTA),null);
          nuNIT:=replace(nuNIT,'-','');
          sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);

						-- Aranda 7100
						if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
							sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
						else
							sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
						end if;

            if(sbOrdInt=-1) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener la Orden Interna  para el Clasificador Contable:['||nuCOD_CLASIFCONTA||'] Con la Categoria :['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                sbOrdInt:=null;
                centaerror:=centaerror+1;
            end if;

            -- Obtiene el Ledger
            sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtyDatIngresos(i).comprobante);

            --<<
            --Inserta los datos en la tabla vtyLDCI_INCOLIQU
            -->>
          nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                              ldci_pkinterfazsap.nuSeqICLINUDO,
                                              TRUNC(sysdate),
                                              user,
                                              'SERVER',
                                              TRUNC(sysdate),
                                              vtyDatIngresos(i).clasificador,
                                              vaClave,
                                              vtyDatIngresos(i).cuenta,
                                              iovactcaicme,
                                              vtyDatIngresos(i).VALOR,
                                              vtyDatIngresos(i).VALOR,
                                              iovactcainiv,
                                              null,
                                              'PCON_1 '||ldci_pkinterfazsap.nuSeqICLINUDO,
                                              null,
                                              nuCategoria,
                                              'GDOC',
                                              null,
                                              null,
                                              null,
                                              null,
                                              i,
                                              ldci_pkinterfazsap.fnuCtaDiver(vaClave),
                                              nuNIT,--asigna
                                              nuNIT,--clv1
                                              '',
                                              '',
                                              nuCentBen,--cebe
                                              sbOrdInt,--Orden
                                              sbSegmento,--Segmento
                                              NULL,
                                              vtyDatIngresos(i).comprobante,
                                              sbLedgers,
                                              vtyDatIngresos(i).dcrcinad);

          --<<
          --Se lanza la Exepcion sin la funcion no se ejecuto con exito
          -->>
          IF (nuRet <> 0) THEN
              sbErrorInterfaz := 'No se puede obtener la informacion fnuLDCI_INCOLIQU :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']';
              LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,sbErrorInterfaz,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
              RAISE ERROR;
          END IF;
       END LOOP;


        --<<
        --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
        -->>
        vtyDatIngresos.delete;

        --<<
        --Cuando falta al menos un centro de beneficio se aborta el resto del proceso
        -->>
        IF (centaerror>0) THEN
            sbErrorInterfaz := 'Hubo errores en la generacion de la Interfaz. Revise el Log de la tabla LDCI_LOGSPROC';
            RETURN -1;
        END IF;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
         nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

        -- Asienta registros
        commit;

        vtyLDCI_INCOLIQU.delete;

        --Reversion de la provision del mes anterior

        --Se obtiene el A?o y el mes anterior, es decir el que se va a revertir
        IF nuMes = 1 THEN
            nuMesAnt := 12;
            nuAnoAnt := nuAnio - 1;
        ELSE
            nuAnoAnt := nuAnio;
            nuMesAnt := nuMes - 1;
        END IF;

        OPEN cuInformacionRev (nuMesAnt,nuAnoAnt, nuComprobanteRev);
        FETCH cuInformacionRev BULK COLLECT INTO vtycuInformacionRev;
        CLOSE cuInformacionRev;

    IF (vtycuInformacionRev.count > 0) THEN

      FOR i IN vtycuInformacionRev.First..vtycuInformacionRev.Last LOOP

            -- Obtiene el Ledger
            sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtycuInformacionRev(i).comprobante);

          nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.nuSeqICLINUDO,
                                        TRUNC(sysdate),
                                        user,
                                        'SERVER',
                                        TRUNC(sysdate),
                                        vtycuInformacionRev(i).COD_CLASIFCONTA,
                                        vtycuInformacionRev(i).CLAVCONT,
                                        vtycuInformacionRev(i).CLASECTA,
                                        vtycuInformacionRev(i).INDICCME,
                                        vtycuInformacionRev(i).IMPOMTRX,
                                        vtycuInformacionRev(i).IMPOMSOC,
                                        vtycuInformacionRev(i).INDICIVA,
                                        null,
                                        'PCON_R '||ldci_pkinterfazsap.nuSeqICLINUDO,
                                        null,
                                        null,
                                        'GDOC',
                                        null,
                                        null,
                                        null,
                                        null,
                                        i,
                                        vtycuInformacionRev(i).CTADIV,
                                        vtycuInformacionRev(i).ASIGNACN,--asigna
                                        vtycuInformacionRev(i).ASIGNACN,--clv1
                                        '',
                                        '',
                                        vtycuInformacionRev(i).CENTROBE,--cebe
                                        vtycuInformacionRev(i).ORDENINT,--Orden
                                        vtycuInformacionRev(i).SEGMENTO,--Segmento
                                        NULL,
                                        vtycuInformacionRev(i).comprobante,
                                        sbLedgers,
                                        null);

      END LOOP;
         nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

        -- Asienta registros
        commit;
        vtyLDCI_INCOLIQU.delete;

      END IF;
         --<<
         --Se lanza la Exepcion sin la funcion no se ejecuto con exito
         -->>
         IF (nuRet <> 0) THEN
                sbErrorInterfaz := 'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']';
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,sbErrorInterfaz,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                raise Error;
         END IF;
    ELSE
         sbErrorInterfaz := 'La consulta no tiene resultados para la interfaz Provision de Consumos :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||'] con el rango de fechas :['||daFecha_Inicio||'] , ['||daFecha_Fin||']';
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,sbErrorInterfaz,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
         return -1;
    END IF;


    /*Despues de -Generar la informacion de Amos Procesos se realiza la generacion de Encabezado, Detalle y Envio de la Interfaz*/

     --<<
     --Genera la informacion de los documentos para SAP de la interfaz de PCON, Se define el tipo de Interfaz LC
     --para la provision de CEOGAS pero internamente en SmartFlex, pero en realidad es una L5
     -->>
    nuRet := fnuGeneDocuSapReclaCartera(nutimocodi,nuAnio,nuMes,
                                ldci_pkinterfazsap.nuSeqICLINUDO, 'PCON');

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
     IF (nuRet <> 0) THEN
          sbErrorInterfaz := 'No se puede ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']';
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,sbErrorInterfaz,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          RAISE ERROR;
     END IF;

     --<<
      --Se valida para corregir el descuadre por cada documento
      -->>
      nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,ldci_pkinterfazsap.vaCODINTINTERFAZ,nuVlrAjuste);
      IF (nuRet <> 0) THEN
          sbErrorInterfaz := 'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']';
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,sbErrorInterfaz,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          RAISE ERROR;
      END IF;

     --<<
     --Si es satifactorio todo el proceso, se realiza el envio a SAP
     --Procedimiento Hector Dominguez
     -->>
    IF (vaEnviaIntefazSAP = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S',nutimocodi);
    IF (nuRet <> 0) THEN
        sbErrorInterfaz := 'No se puede Registrar la interfaz fnuRegistraInterfaz :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']';
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,sbErrorInterfaz,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Se genero con exito en interfaz Provision Consumo ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    return(0);

    EXCEPTION
    WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuInterfazProvConsumo] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       sbErrorInterfaz := ldci_pkinterfazsap.vaMensError;
       LDCI_pkTrazaInterfaces.pRegiMensaje('L5','Error fnuInterfazProvConsumo :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'INGRESOS',USER,USERENV('TERMINAL'));
       return(-1);
    END fnuInterfazProvConsumo;


  FUNCTION fnuInterfazProvConsumoRO(nutimocodi     IN ldci_tipointerfaz.tipointerfaz%TYPE,
                                    daFecha_Inicio DATE,
                                    daFecha_Fin    DATE,
                                    nuAnio         NUMBER,
                                    nuMes          NUMBER)
  RETURN NUMBER
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuInterfazProvConsumoRO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 29-07-2014
     DESCRIPCION  : Copia del m?todo fnuInterfazProvConsumo.
                    Funcion que se encarga de armar obtener la informacion
                    de la interfaz de Provision de Consumo en SAP.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    -------- ----------- -------------------------------------------------
  ************************************************************************/

   nuCantidad NUMBER;

   daFecha_InicioAnt DATE;
   daFecha_FinAnt DATE;

   CURSOR cuInformacion (daFecha_Inicio DATE, daFecha_Fin DATE) IS
      SELECT         nutimocodi DocumentoSAP,
                     (select distinct a.rcccpopa from ic_recoclco a where clcrcons=a.rcccclcr and a.rccccuco=dcrccuco) porcent,
                     dcrccons,
                     dcrcecrc,
                     dcrccorc,
                     dcrccuco cuenta,
                     dcrcsign signos,
                     dcrcvalo valor,
                     dcrcinad,
                     dcrcfecr,
                     dcrcclcr,
                     dcrcusua,
                     dcrcterm,
                     dcrcprog,
                     dcrcsist,
                     clcrclco clasificador,
                     clcodesc,
                     corccoco Comprobante ,
                     (select cocodesc from ic_compcont where cococodi=ecrccoco) DescComprobante,
                     corctido TipoComprobante,
                     (select tccodesc from ic_ticocont
                          where tccocodi =  (select distinct cocotcco from ic_compcont where cococodi=ecrccoco)
                     ) DescTipoComprobante,
                     ecrcfech
        FROM       ic_encoreco
        JOIN       ic_decoreco on (ecrccons = dcrcecrc)
        JOIN       ic_confreco on (dcrccorc = corccons )
        JOIN       ic_clascore on (clcrcons = dcrcclcr)
        JOIN       ic_clascont on (clcrclco=clcocodi)
        WHERE      ecrccoco in (SELECT COD_COMPROBANTE from LDCI_TIPOINTERFAZ WHERE TIPOINTERFAZ =nutimocodi)
        AND        ecrcfech BETWEEN daFecha_Inicio and daFecha_Fin ;
        /*Fecha diaria, con la cual se generan los documentos, esta fecha es la fecha con la cual se procesaron los
        registros contables para el comprobante de Provision Consumo*/



  TYPE tyDatIngresos IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyDatIngresos tyDatIngresos;

   CURSOR cuInformacionRev (nuMesAnt NUMBER,nuAnoAnt NUMBER, nuComprobante NUMBER) IS
      SELECT
              ANIO,
              MES,
              CLAVCONT,
              CLASECTA,
              INDICCME,
              IMPOMTRX,
              IMPOMSOC,
              INDICIVA,
              CONDPAGO,
              FECHBASE,
              REFFACTR,
              BASEIMPT,
              CENTROCO,
              ORDENINT,
              CANTIDAD,
              ASIGNACN,
              TXTPOSCN,
              CENTROBE,
              SEGMENTO,
              OBJCOSTO,
              CLAVREF1,
              CLAVREF2,
              CLAVREF3,
              SOCIEDGL,
              MATERIAL,
              TIPORETC,
              INDRETEC,
              BASERETC,
              FECHVALOR,
              CTADIV,
              COD_CENTROBENEF,
              COD_CLASIFCONTA,
              nuComprobante comprobante
     FROM LDCI_RECLACARTNTESAP
     WHERE
              ANIO = nuAnoAnt
              AND  MES = nuMesAnt
              AND tipointerfaz = nutimocodi
              AND CLAVREF2 IS NOT NULL;   --Este cambio no se incluyo en la entrega [Incluir]

  TYPE tyDatcuInformacionRev IS TABLE OF cuInformacionRev%ROWTYPE INDEX BY BINARY_INTEGER;
    vtycuInformacionRev tyDatcuInformacionRev;

     --<<
     --definicion de variables
     -->>
     nuRet          NUMBER;
     nuTipo         LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
     vaClave        ldci_claveconta.clavcodi%TYPE;
     iovactcaicme    LDCI_CTACADMI.ctcaicme%TYPE;
     iovactcainiv    LDCI_CTACADMI.ctcainiv%TYPE;
     daFechaGen DATE;

     nuCentBen NUMBER;
     sbOrdInt VARCHAR2(100);
     nuCategoria NUMBER;
     sbSegmento VARCHAR2(200);
     sbDescripcionNit VARCHAR2(200);
     nuNIT VARCHAR2(100);
     nuCOD_CLASIFCONTA VARCHAR2(100);

     nuAnoAnt       NUMBER;
     nuMesAnt       NUMBER;
     daFechAnt      DATE;
     TipInterRevProvision LDCI_TIPOINTERFAZ.TIPOINTERFAZ%type;
     nuLocalidad NUMBER;
     centaerror NUMBER:=0;
     nuError NUMBER:=0;
     nuComprobanteRev number;
     vaEnviaInterfazPF    VARCHAR2(1); --Parametro para el control de envio de Interfaces a SAP
	   nuTipoServicio NUMBER;
	   nuCiclo        ciclo.ciclcodi%type;

     nuVlrAjuste   NUMBER; -- 26/10/2015 cgonzalezv Ara 6746, valor maximo de ajuste en db vs cr

  BEGIN

    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'TipInterRevProvision',TipInterRevProvision, osbErrorMessage);

    ldci_pkinterfazsap.vaCODINTINTERFAZ := nutimocodi;
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'ENVIAINTERFAZPF', vaEnviaInterfazPF, osbErrorMessage);

    -- 26-10-2015 cgonzalezv ARA 6746: valor limite de ajuste en la trama
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'L5_Limite', nuVlrAjuste, osbErrorMessage);

    /********** PROVISION CONSUMO *******/

    --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Generar interfaz '||ldci_pkinterfazsap.vaCODINTINTERFAZ||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

    --<<
    --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP
    --Provision de Consumo
    -->>
    OPEN cuInformacion(daFecha_Inicio,daFecha_Fin);
    FETCH cuInformacion BULK COLLECT INTO vtyDatIngresos;
    CLOSE cuInformacion;

    --<<
    --Se evalua que la consulta contenga registros, en caso contratio retorna -1
    -->>
    IF (vtyDatIngresos.count > 0) THEN
         --<<
       --Obtencion delete numero de documento
       -->>
       ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia Interfaz  Numero  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

       nuComprobanteRev := vtyDatIngresos(vtyDatIngresos.first).comprobante;

       FOR i IN vtyDatIngresos.First..vtyDatIngresos.Last LOOP
          vaClave := NULL;
           --<<
          --obtiene la clave contable a partir de la cuenta
          -->>
          vaClave := fvaGetClaveContaIngreso(-1,vtyDatIngresos(i).cuenta, vtyDatIngresos(i).signos,vtyDatIngresos(i).porcent, iovactcaicme, iovactcainiv);
          --Si la clave contable es nulla se almacena en el log, pero se continua con la generaci?n.
          if (vaClave is NULL OR vaClave = '-1') then
              LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la clave contable para la Interfaz ['|| ldci_pkinterfazsap.nuSeqICLINUDO||'] TipoComprobante ['||vtyDatIngresos(i).TipoComprobante||'] Comprobante ['||vtyDatIngresos(i).Comprobante||'] Clasificador ['||vtyDatIngresos(i).clasificador|| '] Cuenta  ['||vtyDatIngresos(i).cuenta||'] Signo ['||vtyDatIngresos(i).signos||'] Porcentaje '||vtyDatIngresos(i).porcent,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
              centaerror:=centaerror+1;
          end if;

          daFechaGen:=vtyDatIngresos(i).ecrcfech;

          nuLocalidad 		:=ldci_pkinterfazsap.fvaGetData(17,vtyDatIngresos(i).dcrcinad,'|');
          nuCategoria 		:=Nvl(ldci_pkinterfazsap.fvaGetData(5,vtyDatIngresos(i).dcrcinad,'|'),NULL);
		  nuTipoServicio	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,vtyDatIngresos(i).dcrcinad,'|'),NULL);
		  nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,vtyDatIngresos(i).dcrcinad,'|'),NULL);

        if NOT tbCentroBeneficio.exists(nuLocalidad) then
            nuCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebeNoCat(nuLocalidad),NULL);
            -- Cache para almacenar los diferentes centros de beneficio
            tbCentroBeneficio(nuLocalidad) :=  nuCentBen;
        else
            nuCentBen:= tbCentroBeneficio(nuLocalidad);
        END if;

        if(nuCentBen = 0 or nuCentBen is null) then
          sbSegmento:='N/A';
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,' Interfaz [ '||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener el Centro de Beneficio para la Localidad  :['||nuLocalidad||'] Con Categoria ['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          centaerror:=centaerror+1;
        else
          sbSegmento:=nvl(fvaGetSegmento(nuCentBen),0);
        end if;

          nuCOD_CLASIFCONTA:=vtyDatIngresos(i).clasificador;
          nuNIT:=Nvl(fnuGetNitGenerico(nuCOD_CLASIFCONTA),null);
          nuNIT:=replace(nuNIT,'-','');
          sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);


						-- Aranda 7100
						if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
							sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
						else
							sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
						end if;

            if(sbOrdInt=-1) then
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] No se puede obtener la Orden Interna  para el Clasificador Contable:['||nuCOD_CLASIFCONTA||'] Con la Categoria :['||nuCategoria||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                sbOrdInt:=null;
                centaerror:=centaerror+1;
            end if;

            -- Obtiene el Ledger
            sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtyDatIngresos(i).comprobante);

            --<<
            --Inserta los datos en la tabla vtyLDCI_INCOLIQU
            -->>
          nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                              ldci_pkinterfazsap.nuSeqICLINUDO,
                                              TRUNC(sysdate),
                                              user,
                                              'SERVER',
                                              TRUNC(sysdate),
                                              vtyDatIngresos(i).clasificador,
                                              vaClave,
                                              vtyDatIngresos(i).cuenta,
                                              iovactcaicme,
                                              vtyDatIngresos(i).VALOR,
                                              vtyDatIngresos(i).VALOR,
                                              iovactcainiv,
                                              null,
                                              'PCON_1 '||ldci_pkinterfazsap.nuSeqICLINUDO,
                                              null,
                                              nuCategoria,
                                              ldci_pkinterfazsap.vaSOCIEDAD,
                                              null,
                                              null,
                                              null,
                                              null,
                                              i,
                                              ldci_pkinterfazsap.fnuCtaDiver(vaClave),
                                              nuNIT,--asigna
                                              nuNIT,--clv1
                                              sbDescripcionNit,
                                              '',
                                              nuCentBen,--cebe
                                              sbOrdInt,--Orden
                                              sbSegmento,--Segmento
                                              NULL,
                                              vtyDatIngresos(i).comprobante,
                                              sbLedgers,
                                              vtyDatIngresos(i).dcrcinad);

          --<<
          --Se lanza la Exepcion sin la funcion no se ejecuto con exito
          -->>
          IF (nuRet <> 0) THEN
              LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede obtener la informacion fnuLDCI_INCOLIQU :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
              RAISE ERROR;
          END IF;
       END LOOP;


        --<<
        --Se libera el objeto utilizado para la obtencion de la informacion de Ingresos
        -->>
        vtyDatIngresos.delete;
        --end if;

        --<<
        --Cuando falta al menos un centro de beneficio se aborta el resto del proceso
        -->>
        IF (centaerror>0) THEN
            RETURN -1;
        END IF;

        --<<
        --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
        -->>
         nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

        -- Asienta registros
        commit;

        vtyLDCI_INCOLIQU.delete;

        --Reversion de la provision del mes anterior

        --Se obtiene el A?o y el mes anterior, es decir el que se va a revertir
        IF nuMes = 1 THEN
            nuMesAnt := 12;
            nuAnoAnt := nuAnio - 1;
        ELSE
            nuAnoAnt := nuAnio;
            nuMesAnt := nuMes - 1;
        END IF;

        OPEN cuInformacionRev (nuMesAnt,nuAnoAnt, nuComprobanteRev);
        FETCH cuInformacionRev BULK COLLECT INTO vtycuInformacionRev;
        CLOSE cuInformacionRev;

    IF (vtycuInformacionRev.count > 0) THEN

      FOR i IN vtycuInformacionRev.First..vtycuInformacionRev.Last LOOP

            -- Obtiene el Ledger
            sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtycuInformacionRev(i).comprobante);

          nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.nuSeqICLINUDO,
                                        TRUNC(sysdate),
                                        user,
                                        'SERVER',
                                        TRUNC(sysdate),
                                        vtycuInformacionRev(i).COD_CLASIFCONTA,
                                        vtycuInformacionRev(i).CLAVCONT,
                                        vtycuInformacionRev(i).CLASECTA,
                                        vtycuInformacionRev(i).INDICCME,
                                        vtycuInformacionRev(i).IMPOMTRX,
                                        vtycuInformacionRev(i).IMPOMSOC,
                                        vtycuInformacionRev(i).INDICIVA,
                                        null,
                                        'PCON_R '||ldci_pkinterfazsap.nuSeqICLINUDO,
                                        null,
                                        null,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        null,
                                        null,
                                        null,
                                        null,
                                        i,
                                        vtycuInformacionRev(i).CTADIV,
                                        vtycuInformacionRev(i).ASIGNACN,--asigna
                                        vtycuInformacionRev(i).ASIGNACN,--clv1
                                        vtycuInformacionRev(i).CLAVREF3,
                                        '',
                                        vtycuInformacionRev(i).CENTROBE,--cebe
                                        vtycuInformacionRev(i).ORDENINT,--Orden
                                        vtycuInformacionRev(i).SEGMENTO,--Segmento
                                        NULL,
                                        vtycuInformacionRev(i).comprobante,
                                        sbLedgers,
                                        null);

      END LOOP;
         nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

        -- Asienta registros
        commit;
        vtyLDCI_INCOLIQU.delete;

      END IF;
         --<<
         --Se lanza la Exepcion sin la funcion no se ejecuto con exito
         -->>
         IF (nuRet <> 0) THEN
                LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                raise Error;
         END IF;
    ELSE
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'La consulta no tiene resultados para la interfaz Provision de Consumos :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||'] con el rango de fechas :['||daFecha_Inicio||'] , ['||daFecha_Fin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
         return -1;
    END IF;


    /*Despues de -Generar la informacion de Amos Procesos se realiza la generacion de Encabezado, Detalle y Envio de la Interfaz*/

     --<<
     --Genera la informacion de los documentos para SAP de la interfaz de PCON, Se define el tipo de Interfaz LC
     --para la provision de CEOGAS pero internamente en SmartFlex, pero en realidad es una L5
     -->>
    nuRet := fnuGeneDocuSapReclaCarteraRO(nutimocodi,nuAnio,nuMes,
                                ldci_pkinterfazsap.nuSeqICLINUDO, 'PCON-'||ldci_pkinterfazsap.nuSeqICLINUDO);

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
     IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          RAISE ERROR;
     END IF;

     --<<
      --Se valida para corregir el descuadre por cada documento
      -->>
      nuRet :=ldci_pkinterfazsap.fnuAjusteInterContable(ldci_pkinterfazsap.nuSeqICLINUDO,ldci_pkinterfazsap.vaCODINTINTERFAZ,nuVlrAjuste);
      IF (nuRet <> 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuAjusteInterContable :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          RAISE ERROR;
      END IF;

     --<<
     --Si es satifactorio todo el proceso, se realiza el envio a SAP
     --Procedimiento Hector Dominguez
     -->>
    IF (vaEnviaInterfazPF = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;

    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S',nutimocodi);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Se genero con exito en interfaz Provision Consumo ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||nuAnio||'] y Mes ['||nuMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    return(0);

    EXCEPTION
    WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuInterfazProvConsumoRO] - No se pudo validar la cuenta. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje('L5','Error fnuInterfazProvConsumoRO :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'INGRESOS',USER,USERENV('TERMINAL'));
       return(-1);
    END fnuInterfazProvConsumoRO;


--1) Cuerpo del procedimiento para generacion de interfaz contable
FUNCTION fnuInterfazContableAnioMes (nuInIntSAP   in VARCHAR2,
                            Anio Number,
                            Mes Number)
return number
IS
nuTipoInt NUMBER;
sbDescripcion VARCHAR2(200);
nuResultado NUMBER;
nuResultado_1 NUMBER;
nuResultado_2 NUMBER;
vaPrograma  VARCHAR2(300);
osbErrorMessage  VARCHAR2(2000);
vaModeloInterfaz VARCHAR2(300);
nuErrMail        number;

BEGIN
dbms_output.put_line('nuInIntSAP '||nuInIntSAP);

      --<<
      --Se Valida que exista configuraci?n para la interfaz suministrada
      -->>
      nuTipoInt := ldci_pkinterfazsap.fvaGetCodTipInter(nuInIntSAP);
      dbms_output.put_line('nuTipoInt '||nuTipoInt);
      --<<
      --Cuando el tipo es nulo o no existe configuraci?n
      -->>
      IF (nuTipoInt = -1) THEN
          vaPrograma := '00';
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Fin Proceso para :['||nuInIntSAP||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          LDCI_pkTrazaInterfaces.pRegiMensaje(nuInIntSAP,'No existe Configuracion de comprobantes  para la interfaz  :['||nuInIntSAP||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
          return -1; --Indica que no fue satisfactoria la ejecuci?n con los parametro
      END IF;

      CASE nuInIntSAP

            WHEN  'L1' THEN --              INTERFAZ DE INGRESOS
                    vaPrograma  :=  nuInIntSAP;
                    --<<
                    --Se realiza la validacion por que la intefaz no permite fechas, solo a?o y Mes
                    -->>
                    nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Anio));
                    nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Mes));

                    IF (nuResultado_1 < 0 or nuResultado_2  < 0) THEN
                      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por A?o y Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));                      return -1;
                    END IF;
                    nuResultado_1 := null;
                    nuResultado_2 := null;

                    LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz de Ingresos  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
                    nuResultado := ldci_pkinterfazsap.fnuInterfazIngreso (nuInIntSAP,Anio,Mes);

                    IF (nuResultado < 0) THEN
                          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ingresos - L1',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
                          return -1;
                    ELSE
                        IF (nuResultado = 1)  THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz ingresos - L1 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
                            return -1;
                        ELSE
                          -- envia correo notificando el envio de la interfaz a SAP
                          ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
                        END IF;
                    END IF;

                    dbms_output.put_line('INTERFAZ '||nuInIntSAP||' OK'); RETURN 0;

            WHEN  'L3' THEN --              INTERFAZ DE AUTORETENCION (INCLUYE AUTORETENCION Y CREE)
                    vaPrograma  :=  nuInIntSAP;
                    --<<
                    --Se realiza la validacion por que la intefaz no permite fechas, solo a?o y Mes
                    -->>
                    nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Anio));
                    nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Mes));

                    IF (nuResultado_1 < 0 or nuResultado_2  < 0) THEN
                      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por A?o y Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));                      return -1;
                    END IF;
                    nuResultado_1 := null;
                    nuResultado_2 := null;

                   nuResultado := ldci_pkinterfazsap.fnuInterfazAutoretencion (nuInIntSAP,Anio,Mes);

                    IF (nuResultado < 0) THEN
                          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Autoretencion - L3',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
                          return -1;
                    ELSE
                        IF (nuResultado = 1)  THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Autoretencion - L3 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
                            return -1;
                        ELSE
                          -- envia correo notificando el envio fr la interfaz a SAP
                          ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
                        END IF;
                    END IF;

                    dbms_output.put_line('INTERFAZ '||nuInIntSAP||' OK'); RETURN 0;

           WHEN  'L4' THEN --              INTERFAZ DE PROVISION CARTERA
                    vaPrograma  :=  nuInIntSAP;

                    --<<
                    --Se realiza la validacion por que la intefaz no permite fechas, solo a?o y Mes
                    -->>
                    nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Anio));
                    nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Mes));

                    IF (nuResultado_1 < 0 or nuResultado_2  < 0) THEN
                      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por A?o y Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));                      return -1;
                    END IF;
                    nuResultado_1 := null;
                    nuResultado_2 := null;

                    nuResultado := ldci_pkinterfazsap.fnuInterfazProvCartera (vaPrograma,Anio,Mes);

                    IF (nuResultado < 0) THEN
                          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Provision Cartera - L4',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
                          return -1;
                    ELSE
                        IF (nuResultado = 1)  THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Provision Cartera - L4 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
                            return -1;
                        ELSE
                           -- envia correo notificando el envio fr la interfaz a SAP
                          ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
                        END IF;
                    END IF;
                    dbms_output.put_line('INTERFAZ '||nuInIntSAP||' OK'); RETURN 0;


           WHEN  'L6' THEN --    INTERFAZ DE RECLASIFICACION CARTERA

                    vaPrograma  :=  nuInIntSAP;

                    --<<
                    --Se realiza la validacion por que la intefaz no permite fechas, solo a?o y Mes
                    -->>
                    nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Anio));
                    nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Mes));

                    IF (nuResultado_1 < 0 or nuResultado_2  < 0) THEN
                      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por A?o y Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));                      return -1;
                    END IF;

                    nuResultado_1 := null;
                    nuResultado_2 := null;

										/*ARANDA 6207
										Se adiciona la validaci?n para identificar que modelo aplica para la interfaz contable
										*/
										ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'PavaModeloInterfaz', vaModeloInterfaz, osbErrorMessage);
										IF (vaModeloInterfaz IS NULL) THEN
											LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'El parametro vaModeloInterfaz esta NULL, se debe indicar el Tipo de Modelo, A, B',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
											ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
                      return -1;
										END IF;

										IF ( UPPER(vaModeloInterfaz) = 'A') THEN
											nuResultado := ldci_pkinterfazsap.fnuInterfazReclaCartera (vaPrograma,Anio,Mes);
										ELSE
											nuResultado := ldci_pkinterfazsap.fnuInterfazReclaCartera_B (vaPrograma,Anio,Mes);
										END IF;

                    IF (nuResultado < 0) THEN
                          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Reclasificacion de Cartera - L6',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
                          return -1;
                    ELSE
                        IF (nuResultado = 1)  THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz de Reclasificacion Cartera - L6 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
                            return -1;
                        ELSE
                            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Reclasificacion de Cartera - L6 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                            -- envia correo notificando el envio fr la interfaz a SAP
                            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
                        END IF;
                    END IF;

                    dbms_output.put_line('INTERFAZ '||nuInIntSAP||' OK'); RETURN 0;
      ELSE
      LDCI_pkTrazaInterfaces.pRegiMensaje(nuInIntSAP,'Interfaz '||nuInIntSAP||' No Se genera por A?o-Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
      dbms_output.put_line('Interfaz '||nuInIntSAP|| ' No Se genera por A?o-Mes');
      ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
      return -1;
      END CASE;
return 0;

END fnuInterfazContableAnioMes;

  FUNCTION fnuInterfazContableAnioMesRO(nuInIntSAP   IN VARCHAR2,
                                        Anio         NUMBER,
                                        Mes          NUMBER)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE EFIGAS SA E.S.P
     FUNCION   : fnuInterfazContableAnioMesRO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 29-07-2014
     DESCRIPCION  : Copia del m?todo fnuInterfazContableAnioMes.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    -------- ----------- -------------------------------------------------
  ************************************************************************/
  RETURN NUMBER
  IS

    --<<
    -- Variables
    -->>
    nuTipoInt NUMBER;
    sbDescripcion VARCHAR2(200);
    nuResultado NUMBER;
    nuResultado_1 NUMBER;
    nuResultado_2 NUMBER;
    vaPrograma  VARCHAR2(300);
		osbErrorMessage  VARCHAR2(2000);
    vaModeloInterfaz VARCHAR2(300);
    nuErrMail        number;

  BEGIN

    --<<
    --Se Valida que exista configuraci?n para la interfaz suministrada
    -->>
    nuTipoInt := ldci_pkinterfazsap.fvaGetCodTipInter(nuInIntSAP);

    --<<
    --Cuando el tipo es nulo o no existe configuraci?n
    -->>
    IF (nuTipoInt = -1) THEN

      vaPrograma := '00';
      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Fin Proceso para :['||nuInIntSAP||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
      LDCI_pkTrazaInterfaces.pRegiMensaje(nuInIntSAP,'No existe Configuracion de comprobantes  para la interfaz  :['||nuInIntSAP||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
      ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
      RETURN -1; --Indica que no fue satisfactoria la ejecuci?n con los parametro

    END IF;

    CASE nuInIntSAP

      WHEN 'L1' THEN      -- INTERFAZ DE INGRESOS

        vaPrograma  :=  nuInIntSAP;

        --<<
        --Se realiza la validacion por que la intefaz no permite fechas, solo a?o y Mes
        -->>
        nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Anio));
        nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Mes));

        IF (nuResultado_1 < 0 or nuResultado_2  < 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por A?o y Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
          RETURN -1;
        END IF;

        nuResultado_1 := null;
        nuResultado_2 := null;

        LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz de Ingresos  ['||ldci_pkinterfazsap.nuSeqICLINUDO||'] Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        nuResultado := ldci_pkinterfazsap.fnuInterfazIngresoRO(nuInIntSAP,Anio,Mes);

        IF (nuResultado < 0) THEN

          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ingresos - L1',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
          RETURN -1;

        ELSE

          IF (nuResultado = 1)  THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz ingresos - L1 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
            RETURN -1;
          ELSE
            -- envia correo notificando el envio fr la interfaz a SAP
            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
          END IF;

        END IF;

      WHEN 'L3' THEN      -- INTERFAZ DE AUTORETENCION (INCLUYE AUTORETENCION Y CREE)

        vaPrograma  :=  nuInIntSAP;

        --<<
        --Se realiza la validacion por que la intefaz no permite fechas, solo a?o y Mes
        -->>
        nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Anio));
        nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Mes));

        IF (nuResultado_1 < 0 or nuResultado_2  < 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por A?o y Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
          RETURN -1;
        END IF;

        nuResultado_1 := null;
        nuResultado_2 := null;

        nuResultado := ldci_pkinterfazsap.fnuInterfazAutoretencionRO(nuInIntSAP,Anio,Mes);

        IF (nuResultado < 0) THEN

          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Autoretencion - L3',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
          RETURN -1;

        ELSE

          IF (nuResultado = 1)  THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Autoretencion - L3 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
            RETURN -1;
          ELSE
            -- envia correo notificando el envio fr la interfaz a SAP
            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
          END IF;

        END IF;

      WHEN 'L4' THEN      -- INTERFAZ DE PROVISION CARTERA

        vaPrograma  :=  nuInIntSAP;

        --<<
        --Se realiza la validacion por que la intefaz no permite fechas, solo a?o y Mes
        -->>
        nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Anio));
        nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Mes));

        IF (nuResultado_1 < 0 or nuResultado_2  < 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por A?o y Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
          RETURN -1;
        END IF;

        nuResultado_1 := null;
        nuResultado_2 := null;

        nuResultado := ldci_pkinterfazsap.fnuInterfazProvCarteraRO(vaPrograma,Anio,Mes);

        IF (nuResultado < 0) THEN

          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Provision Cartera - L4',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
          RETURN -1;

        ELSE

          IF (nuResultado = 1)  THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Provision Cartera - L4 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
            RETURN -1;
          ELSE
            -- envia correo notificando el envio de la interfaz a SAP
            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
          END IF;

        END IF;

      WHEN 'L6' THEN      -- INTERFAZ DE RECLASIFICACION CARTERA

        vaPrograma  :=  nuInIntSAP;

        --<<
        --Se realiza la validacion por que la intefaz no permite fechas, solo a?o y Mes
        -->>
        nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Anio));
        nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(Mes));

        IF (nuResultado_1 < 0 or nuResultado_2  < 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por A?o y Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
          RETURN -1;
        END IF;

        nuResultado_1 := null;
        nuResultado_2 := null;

        /*ARANDA 6207
        Se adiciona la validaci?n para identificar que modelo aplica para la interfaz contable
        */
        ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'PavaModeloInterfaz', vaModeloInterfaz, osbErrorMessage);

        IF (vaModeloInterfaz IS NULL) THEN
						LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'El parametro vaModeloInterfaz esta NULL, se debe indicar el Tipo de Modelo, A, B',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
						ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
            return -1;
        END IF;

        IF ( UPPER(vaModeloInterfaz) = 'A') THEN
						nuResultado := ldci_pkinterfazsap.fnuInterfazReclaCarteraRO(vaPrograma,Anio,Mes);
        ELSE
						nuResultado := ldci_pkinterfazsap.fnuInterfazReclaCartera_B (vaPrograma,Anio,Mes);
        END IF;


        IF (nuResultado < 0) THEN

          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Reclasificacion de Cartera - L6',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
          RETURN -1;

        ELSE

          IF (nuResultado = 1)  THEN
              LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz de Reclasificacion Cartera - L6 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
              ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
              RETURN -1;
          ELSE
              -- envia correo notificando el envio de la interfaz a SAP
              ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
              LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Reclasificacion de Cartera - L6 Para el A?o ['||Anio||'] y Mes ['||Mes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          END IF;

        END IF;

      ELSE

        LDCI_pkTrazaInterfaces.pRegiMensaje(nuInIntSAP,'Interfaz '||nuInIntSAP||' No Se genera por A?o-Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
        dbms_output.put_line('Interfaz '||nuInIntSAP|| ' No Se genera por A?o-Mes');
        ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('M',nuInIntSAP,null,null,Anio,Mes,sender,nuErrMail);
        RETURN -1;

    END CASE;

    RETURN 0;

  END fnuInterfazContableAnioMesRO;


FUNCTION fnuInterfazContableFechas(nuInIntSAP   in VARCHAR2,
                               daFecha_Inicio DATE,
                               daFecha_Fin DATE)
/********************************************************************************************
     Modificacion
     cgonzalezv 30/10/2015     SAO 340484: Cambio de tipo de documento para la interfaz
                               de provision consumo NO regulado LC por L5C
*********************************************************************************************/

    return number
    IS
    nuTipoInt NUMBER;
    sbDescripcion VARCHAR2(200);
    nuResultado NUMBER;
    vaPrograma  VARCHAR2(300);
    inuPefaano NUMBER;
    inuPefames NUMBER;
    nuResultado_1 NUMBER;
    nuResultado_2 NUMBER;
    nuErrMail        number;

   BEGIN

          --<<
          --Se Valida que exista configuraci?n para la interfaz suministrada
          -->>
          nuTipoInt :=  ldci_pkinterfazsap.fvaGetCodTipInter(nuInIntSAP);

          --<<
          --Cuando el tipo es nulo o no existe configuraci?n
          -->>
          IF (nuTipoInt = -1) THEN
              vaPrograma  :=  '00';
              LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Fin Proceso para :['||nuInIntSAP||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
              ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
              return -1; --Indica que no fue satisfactoria la ejecuci?n con los parametro
          END IF;

          CASE nuInIntSAP

                WHEN  'L5' THEN --              INTERFAZ DE PROVISION CONSUMO
                        vaPrograma  :=  nuInIntSAP;

                    --<<
                    --Se realiza la validacion por que la intefaz debe ser por fechas
                    -->>
                    inuPefaano := To_Number(TO_CHAR(daFecha_Fin,'YYYY'));
                    inuPefames := To_Number(TO_CHAR(daFecha_Fin,'MM'));
                    nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Inicio));
                    nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Fin));


                    IF (nuResultado_1 <>  -1 or nuResultado_2 <>  -1) THEN
                      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por Fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                      ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                      return -1;
                    END IF;

                    LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz de Provision Consumo - L5  : '||vaPrograma,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));

                        nuResultado := ldci_pkinterfazsap.fnuInterfazProvConsumo (vaPrograma,daFecha_Inicio,daFecha_Fin,inuPefaano,inuPefames);

                        IF (nuResultado < 0) THEN
                              LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Provision Consumo - L5',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                              ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                              return -1;
                            ELSE
                              IF (nuResultado = 1)  THEN
                                LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Provision Consumo - L5 Para el A?o ['||inuPefaano||'] y Mes ['||inuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                                ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                                return -1;
                              ELSE
                                LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Provision Consumo - L5 Para el A?o ['||inuPefaano||'] y Mes ['||inuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                                -- envia correo notificando el envio de la interfaz a SAP
                                ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
                            END IF;
                        END IF;

               dbms_output.put_line('INTERFAZ '||nuInIntSAP||' OK'); RETURN 0;
               -- sao 340484: Cambio tipo documento de LC por L5C
               WHEN  'L5C' THEN --              INTERFAZ DE PROVISION CONSUMO CEOGAS
                        vaPrograma  :=  nuInIntSAP;

                    --<<
                    --Se realiza la validacion por que la intefaz debe ser por fechas
                    -->>

                    inuPefaano := To_Number(TO_CHAR(daFecha_Fin,'YYYY'));
                    inuPefames := To_Number(TO_CHAR(daFecha_Fin,'MM'));
                    nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Inicio));
                    nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Fin));


                    IF (nuResultado_1 <>  -1 or nuResultado_2 <>  -1) THEN
                      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por Fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                      ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                      return -1;
                    END IF;

                    LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz de Provision Consumo CEOGAS- L5  : '||vaPrograma,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));

                        nuResultado := ldci_pkinterfazsap.fnuInterfazProvConsumo (vaPrograma,daFecha_Inicio,daFecha_Fin,inuPefaano,inuPefames);

                        IF (nuResultado < 0) THEN
                              LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Provision Consumo - L5',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                              ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                              return -1;
                            ELSE
                              IF (nuResultado = 1)  THEN
                                ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                                LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Provision Consumo - L5 Para el A?o ['||inuPefaano||'] y Mes ['||inuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                                return -1;
                            ELSE
                                LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Provision Consumo - L5 Para el A?o ['||inuPefaano||'] y Mes ['||inuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                                -- envia correo notificando el envio de la interfaz a SAP
                                ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
                            END IF;
                        END IF;

               dbms_output.put_line('INTERFAZ '||nuInIntSAP||' OK'); RETURN 0;



               WHEN  'L2' THEN --             INTERFAZ DE RECAUDO
                    vaPrograma  :=  nuInIntSAP;

                    --<<
                    --Se realiza la validacion por que la intefaz debe ser por fechas
                    -->>
                    nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Inicio));
                    nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Fin));

                    IF (nuResultado_1 <>  -1 or nuResultado_2 <>  -1) THEN
                      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por Fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                      ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                      return -1;
                    END IF;
                    nuResultado_1 :=   null;
                    nuResultado_2 :=   null;

                    LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz de Recaudo  : '||vaPrograma,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                    nuResultado := ldci_pkinterfazsap.fnuInterfazRecaudo (vaPrograma,daFecha_Inicio,daFecha_Fin);
                    IF (nuResultado <  0) THEN
                          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Recaudo - L2 ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                          return -1;
                        ELSE
                        IF (nuResultado = 1)  THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Recaudo - L2 Entre ['||daFecha_Inicio||' y '||daFecha_Fin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                            return -1;
                        ELSE
                            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Recaudo - L2',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                            -- envia correo notificando el envio de la interfaz a SAP
                            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
                        END IF;
                    END IF;

                        dbms_output.put_line('INTERFAZ '||nuInIntSAP||' OK'); RETURN 0;
               WHEN  'LA' THEN --            INTERFAZ DE CONTROL REINTEGRO
                    vaPrograma  :=  nuInIntSAP;
                    --<<
                    --Se realiza la validacion por que la intefaz debe ser por fechas
                    -->>
                    nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Inicio));
                    nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Fin));
                    IF (nuResultado_1 <>  -1 or nuResultado_2 <>  -1) THEN
                      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por Fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                      ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                      return -1;
                    END IF;
                    nuResultado_1 := null;
                    nuResultado_2 := null;

                    LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz Control Reintegro  : '||vaPrograma,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                    nuResultado := ldci_pkinterfazsap.fnuInterfazReintegro (vaPrograma,daFecha_Inicio,daFecha_Fin);
                    IF (nuResultado < 0) THEN
                          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Control Reintegro - LA',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                          return -1;
                    ELSE
                        IF (nuResultado = 1)  THEN
                            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Control Reintegro - LA Entre ['||daFecha_Inicio||' y '||daFecha_Fin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
                            return -1;
                        ELSE
                            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Control Reintegro - LA',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
                            -- envia correo notificando el envio de la interfaz a SAP
                            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
                        END IF;
                    END IF;

                        dbms_output.put_line('INTERFAZ '||nuInIntSAP||' OK'); RETURN 0;
          ELSE
              LDCI_pkTrazaInterfaces.pRegiMensaje(nuInIntSAP,'Interfaz '||nuInIntSAP||' No Se genera por A?o-Mes',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
              dbms_output.put_line('Interfaz '||nuInIntSAP|| ' No Se genera por Fechas');
              ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
              return -1;
          END CASE;

    return 0;
END fnuInterfazContableFechas;

  FUNCTION fnuInterfazContableFechasRO(nuInIntSAP     IN VARCHAR2,
                                       daFecha_Inicio DATE,
                                       daFecha_Fin    DATE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE EFIGAS SA E.S.P
     FUNCION   : fnuInterfazContableFechasRO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 29-07-2014
     DESCRIPCION  : Copia del m?todo fnuInterfazContableFechas.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor      Fecha       Descripcion
    --------   ----------- -------------------------------------------------
    cgonzalezv 30/10/2015  SAO 340484: Cambio de tipo de documento para la interfaz
                           de provision consumo NO regulado LC por L5C

 ************************************************************************/
  RETURN NUMBER
  IS

    --<<
    --Variables
    -->>
    nuTipoInt NUMBER;
    sbDescripcion VARCHAR2(200);
    nuResultado NUMBER;
    vaPrograma  VARCHAR2(300);
    inuPefaano NUMBER;
    inuPefames NUMBER;
    nuResultado_1 NUMBER;
    nuResultado_2 NUMBER;
    nuErrMail        number;

  BEGIN

    --<<
    --Se Valida que exista configuraci?n para la interfaz suministrada
    -->>
    nuTipoInt :=  ldci_pkinterfazsap.fvaGetCodTipInter(nuInIntSAP);

    --<<
    --Cuando el tipo es nulo o no existe configuraci?n
    -->>
    IF (nuTipoInt = -1) THEN
      vaPrograma  :=  '00';
      LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Fin Proceso para :['||nuInIntSAP||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
      ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
      RETURN -1; --Indica que no fue satisfactoria la ejecuci?n con los parametro
    END IF;

    CASE nuInIntSAP

      WHEN 'L5' THEN      -- INTERFAZ DE PROVISION CONSUMO

        vaPrograma  :=  nuInIntSAP;

        --<<
        --Se realiza la validacion por que la intefaz debe ser por fechas
        -->>
        inuPefaano := To_Number(TO_CHAR(daFecha_Fin,'YYYY'));
        inuPefames := To_Number(TO_CHAR(daFecha_Fin,'MM'));
        nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Inicio));
        nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Fin));

        IF (nuResultado_1 <>  -1 or nuResultado_2 <>  -1) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por Fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;
        END IF;

        LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz de Provision Consumo - L5  : '||vaPrograma,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));

        nuResultado := ldci_pkinterfazsap.fnuInterfazProvConsumoRO(vaPrograma,daFecha_Inicio,daFecha_Fin,inuPefaano,inuPefames);

        IF (nuResultado < 0) THEN

          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Provision Consumo - L5',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;

        ELSE

          IF (nuResultado = 1)  THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Provision Consumo - L5 Para el A?o ['||inuPefaano||'] y Mes ['||inuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
            RETURN -1;
          ELSE
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Provision Consumo - L5 Para el A?o ['||inuPefaano||'] y Mes ['||inuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            -- envia correo notificando el envio de la interfaz a SAP
            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
          END IF;

        END IF;

      -- sao 340484: Cambio tipo documento de LC por L5C
      WHEN 'L5C' THEN      -- INTERFAZ DE PROVISION CONSUMO CEOGAS

        vaPrograma  :=  nuInIntSAP;

        --<<
        --Se realiza la validacion por que la intefaz debe ser por fechas
        -->>
        inuPefaano := To_Number(TO_CHAR(daFecha_Fin,'YYYY'));
        inuPefames := To_Number(TO_CHAR(daFecha_Fin,'MM'));
        nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Inicio));
        nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Fin));

        IF (nuResultado_1 <>  -1 or nuResultado_2 <>  -1) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por Fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;
        END IF;

        LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz de Provision Consumo CEOGAS- L5  : '||vaPrograma,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
        nuResultado := ldci_pkinterfazsap.fnuInterfazProvConsumoRO(vaPrograma,daFecha_Inicio,daFecha_Fin,inuPefaano,inuPefames);

        IF (nuResultado < 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Provision Consumo - L5',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;
        ELSE

          IF (nuResultado = 1)  THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Provision Consumo - L5 Para el A?o ['||inuPefaano||'] y Mes ['||inuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
            RETURN -1;
          ELSE
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Provision Consumo - L5 Para el A?o ['||inuPefaano||'] y Mes ['||inuPefames||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            -- envia correo notificando el envio de la interfaz a SAP
            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
          END IF;

        END IF;

      WHEN 'L2' THEN      -- INTERFAZ DE RECAUDO

        vaPrograma  :=  nuInIntSAP;

        --<<
        --Se realiza la validacion por que la intefaz debe ser por fechas
        -->>
        nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Inicio));
        nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Fin));

        IF (nuResultado_1 <>  -1 or nuResultado_2 <>  -1) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por Fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;
        END IF;

        nuResultado_1 :=   NULL;
        nuResultado_2 :=   NULL;

        LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz de Recaudo  : '||vaPrograma,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
        nuResultado := ldci_pkinterfazsap.fnuInterfazRecaudoRO(vaPrograma,daFecha_Inicio,daFecha_Fin);

        IF (nuResultado <  0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Recaudo - L2 ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;
        ELSE

          IF (nuResultado = 1)  THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Recaudo - L2 Entre ['||daFecha_Inicio||' y '||daFecha_Fin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
            RETURN -1;
          ELSE
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Recaudo - L2',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            -- envia correo notificando el envio de la interfaz a SAP
            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
          END IF;

        END IF;

      WHEN 'LA' THEN      -- INTERFAZ DE CONTROL REINTEGRO

        vaPrograma  :=  nuInIntSAP;

        --<<
        --Se realiza la validacion por que la intefaz debe ser por fechas
        -->>
        nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Inicio));
        nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Fin));

        IF (nuResultado_1 <>  -1 or nuResultado_2 <>  -1) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por Fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;
        END IF;

        nuResultado_1 := null;
        nuResultado_2 := null;

        LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz Control Reintegro  : '||vaPrograma,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
        nuResultado := ldci_pkinterfazsap.fnuInterfazReintegroRO(vaPrograma,daFecha_Inicio,daFecha_Fin);

        IF (nuResultado < 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz Control Reintegro - LA',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;
        ELSE

          IF (nuResultado = 1)  THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz Control Reintegro - LA Entre ['||daFecha_Inicio||' y '||daFecha_Fin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
            RETURN -1;
          ELSE
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz Control Reintegro - LA',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            -- envia correo notificando el envio de la interfaz a SAP
            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
          END IF;

        END IF;

      WHEN 'LI' THEN      -- INTERFAZ DE PROVISION DE INGRESOS

        vaPrograma  :=  nuInIntSAP;

        --<<
        --Se realiza la validacion por que la intefaz debe ser por fechas
        -->>
        nuResultado_1 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Inicio));
        nuResultado_2 := ldci_pkinterfazsap.fnuValidaCampo(to_char(daFecha_Fin));

        IF (nuResultado_1 <>  -1 or nuResultado_2 <>  -1) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz ['|| vaPrograma||'] Se debe Generar por Fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;
        END IF;

        nuResultado_1 := null;
        nuResultado_2 := null;

        LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Inicia Interfaz de Provision de Ingresos [LI]: '||vaPrograma,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
        nuResultado := ldci_pkinterfazsap.fnuInterfazProvIngresoRO(daFecha_Inicio,daFecha_Fin);

        IF (nuResultado < 0) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Falla en interfaz de Provision de Ingresos - LI',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
          ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
          RETURN -1;
        ELSE

          IF (nuResultado = 1)  THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'No hay registros en interfaz de Provision de Ingresos - LI Entre ['||daFecha_Inicio||' y '||daFecha_Fin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
            RETURN -1;
          ELSE
            LDCI_pkTrazaInterfaces.pRegiMensaje(vaPrograma,'Se genero con exito en interfaz de Provision de Ingresos - LI',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
            -- envia correo notificando el envio de la interfaz a SAP
            ldci_ProcesosInterfazSap.proGenMailInterfaz (ldci_pkinterfazsap.nuSeqICLINUDO,nuInIntSAP,sender,nuErrMail);
          END IF;

        END IF;

      ELSE

        LDCI_pkTrazaInterfaces.pRegiMensaje(nuInIntSAP,'Interfaz '||nuInIntSAP||' No Se genera por fechas',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaPrograma,USER,USERENV('TERMINAL'));
        dbms_output.put_line('Interfaz '||nuInIntSAP|| ' No Se genera por Fechas');
        ldci_ProcesosInterfazSap.proGenMailErrorInterfaz('F',nuInIntSAP,daFecha_Inicio,daFecha_Fin,null,null,sender,nuErrMail);
        RETURN -1;

    END CASE;

    RETURN 0;

  END fnuInterfazContableFechasRO;

  FUNCTION fvaGetClaveContaPagos (
                             nuClasificador IN LDCI_CTACADMI.CTACLCO%TYPE,
                             nucuctcodi   IN LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN ic_decoreco.dcrcsign%TYPE,
                             nuPorcen     IN LDCI_CTACADMI.CTCPORC%TYPE)
  return VARCHAR
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetClaveContaPagos
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la clave apartir de la cuenta

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuGetClave IS
    SELECT *
      FROM LDCI_CTACADMI
      WHERE CTCACODI = nucuctcodi
      AND CTACLCO = nuClasificador
      AND CTCPORC = nuPorcen;

   ovaClave LDCI_CTACADMI.ctcaclcr%TYPE;

   rgcuGetClave cuGetClave%ROWTYPE;

  begin

  OPEN cuGetClave;
  FETCH cuGetClave INTO rgcuGetClave;
  CLOSE cuGetClave;


     IF vaSigno = 'C' THEN

     ovaClave := rgcuGetClave.CTCACLCR;

     ELSIF vaSigno = 'D' THEN

     ovaClave := rgcuGetClave.CTCACLDB;


     END IF;

     IF (ovaClave IS NULL)   THEN
       IF (nuClasificador<>-1) THEN
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveContaPagos] - No se pudo obtener la clave para el clasificador  '||nuClasificador||' y la cuenta '||nucuctcodi||' Se buscara con Clasificador -1'||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       ovaClave:= fvaGetClaveContaPagos (-1,nucuctcodi,vaSigno,nuPorcen);
       ELSE
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveContaPagos] - No se pudo obtener la clave para el clasificador  '||nuClasificador||' y la cuenta '||nucuctcodi||'Valide la configuracion en LDCI_CTACADMI '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       RAISE ERROR;
     END IF;
    END IF;
     RETURN ovaClave;

  exception
  when ERROR then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveContaPagos] - No se pudo obtener la clave. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveContaPagos] - No se pudo obtener la clave. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  end fvaGetClaveContaPagos;



  FUNCTION fvaGetClaveConta (nucuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN ic_decoreco.dcrcsign%TYPE,
                             ovaCTCAICME  OUT LDCI_CTACADMI.CTCAICME%TYPE,
                             ovaCTCAINIV  OUT LDCI_CTACADMI.CTCAINIV%TYPE)
  return VARCHAR
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetClaveConta
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la clave apartir de la cuenta

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuGetClave IS
    SELECT *
      FROM LDCI_CTACADMI
      WHERE ctcacodi = nucuctcodi;


   ovaClave LDCI_CTACADMI.ctcaclcr%TYPE;

   rgcuGetClave cuGetClave%ROWTYPE;

  begin

  OPEN cuGetClave;
  FETCH cuGetClave INTO rgcuGetClave;
  CLOSE cuGetClave;
  ovaCTCAICME:=rgcuGetClave.CTCAICME;
  ovaCTCAINIV:=rgcuGetClave.CTCAINIV;

     IF vaSigno = 'C' THEN

     ovaClave := rgcuGetClave.CTCACLCR;

     ELSIF vaSigno = 'D' THEN

     ovaClave := rgcuGetClave.CTCACLDB;


     END IF;

     RETURN ovaClave;
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveConta] - No se pudo obtener la clave. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  end fvaGetClaveConta;

  FUNCTION fvaGetTipoDocu (nutimocodi   in ic_tipomovi.timocodi%TYPE)
  return VARCHAR
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetTipoDocu
     AUTOR     : Heiber Barco
     FECHA     : 05-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener tipo documento con el tipo de movimiento.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuGetTipoDocu IS
    SELECT *
      FROM LDCI_TIPMOVINTERFAZ
     WHERE tiinmovi = nutimocodi;

   ovaTipo LDCI_TIPODOCO.tidccodi%TYPE;

   rgcuGetTipoDocu cuGetTipoDocu%ROWTYPE;

  begin

  OPEN cuGetTipoDocu;
  FETCH cuGetTipoDocu INTO rgcuGetTipoDocu;
  CLOSE cuGetTipoDocu;

     ovaTipo := rgcuGetTipoDocu.TIINDOC ;

     RETURN ovaTipo;
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetTipoDocu] - No se pudo obtener el tipo documento. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  end fvaGetTipoDocu;

  FUNCTION fnuCtaDiver(sbClavCont IN ldci_claveconta.clavcodi%TYPE)
  /*****************************************************************************
  PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
  FUNCION      : fnuCtaDiver
  AUTOR        : Heiber Barco
  EMPRESA      : ArquitecSoft S.A.S
  FECHA        : 05-08-2013
  DESCRIPCION  : Funcion para Obtener si la clave de contabilizacion reporta
                 cuenta divergente.

  Parametros de Entrada

  Parametros de Salida

  Historia de Modificaciones
  Autor    Fecha       Descripcion
  *****************************************************************************/
  RETURN VARCHAR2 IS

    sbRetorn VARCHAR2(1);

    CURSOR cuCtaDiverg
        IS
    SELECT DECODE(l.clavtire, 'D', 'S', 'K', 'S', 'N') clavtire
      FROM ldci_claveconta l
     WHERE l.clavcodi = sbClavCont;

    BEGIN

    sbRetorn := 'N';

    FOR rgcuCtaDiverg IN cuCtaDiverg LOOP

        sbRetorn:= rgcuCtaDiverg.clavtire;

    END LOOP;

    RETURN(sbRetorn);

  END fnuCtaDiver;

  FUNCTION fvaGetCecoCuen (ivacuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                           ivacentrobenef IN LDCI_CENTROBENEF.cebecodi%TYPE)
  return VARCHAR2
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetCecoCuen
     AUTOR     : Heiber Barco
     FECHA     : 06-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener el ceco apartir de la cuenta y el
                    centro de beneficio.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuGetCeco IS
    SELECT *
      FROM LDCI_COSTCEBECUEN
     WHERE cecocuco = ivacuctcodi
       AND cecocebe = ivacentrobenef;


   rgcuGetCeco cuGetCeco%ROWTYPE;
   vaCeco LDCI_COSTCEBECUEN.cecocodi%TYPE;

  begin

  OPEN cuGetCeco;
  FETCH cuGetCeco INTO rgcuGetCeco;
  CLOSE cuGetCeco;

   vaCeco := rgcuGetCeco.cecocodi;

     RETURN vaCeco;
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetCecoCuen] - No se pudo obtener el centro de costo. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  end fvaGetCecoCuen;

  FUNCTION fvaGetCebe (inuceloloca   in LDCI_CENTBENELOCA.celoloca%TYPE)
  return VARCHAR2
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetCebe
     AUTOR     : Heiber Barco
     FECHA     : 06-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener el centro de beneficio apartir de localidad.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuGetCeBE IS
    SELECT *
      FROM LDCI_CENTBENELOCA
     WHERE celoloca = inuceloloca;


   rgcuGetCeBE cuGetCeBE%ROWTYPE;
   vaCeBe LDCI_CENTBENELOCA.celocebe%TYPE;

  begin

  OPEN cuGetCeBE;
  FETCH cuGetCeBE INTO rgcuGetCeBE;
  CLOSE cuGetCeBE;

   vaCeBe := rgcuGetCeBE.celocebe;

     RETURN vaCeBe;
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetCebe] - No se pudo obtener el CEBE. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return('-1');
  end fvaGetCebe;


  FUNCTION fvaGetData (inuPosicion             IN      NUMBER,
                       ivaString               IN      VARCHAR2,
                       ivaSeparate             IN      VARCHAR2)
  return VARCHAR2
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetData
     AUTOR     : Heiber Barco
     FECHA     : 06-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener el dato de la tabla ic_decoreco
                    apartir de la posicion del dato que se quiera sacar.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
   vaStringFound VARCHAR2(200);

  begin
     IF (INSTR(ivaString,ivaSeparate) > 0) AND  (inuPosicion          > 0) THEN
         IF inuPosicion  = 1 THEN
            vaStringFound := SUBSTR(ivaString, 0, INSTR(ivaString,ivaSeparate,1,1)-1);
         ELSE
             IF (INSTR(ivaString,ivaSeparate,1,inuPosicion -1) > 0) AND
                (INSTR(ivaString,ivaSeparate,1,inuPosicion )   > 0) THEN
                vaStringFound := SUBSTR(ivaString, INSTR(ivaString,ivaSeparate,1,inuPosicion -1)+1,
                                                   (INSTR(ivaString,ivaSeparate,1,inuPosicion )-1 -
                                                   INSTR(ivaString,ivaSeparate,1,inuPosicion -1)));
           ELSIF
              (INSTR(ivaString,ivaSeparate,1,inuPosicion -1) > 0) AND
              (INSTR(ivaString,ivaSeparate,1,inuPosicion )   = 0) THEN
              vaStringFound := SUBSTR(ivaString, INSTR(ivaString,ivaSeparate,1,inuPosicion -1)+1,
                                                (LENGTH(ivaString) -
                                                 INSTR(ivaString,ivaSeparate,1,inuPosicion -1)));
           END IF;
         END IF;
      END IF;

    RETURN vaStringFound;

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetData] - No se pudo obtener el dato. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return('-1');
  end fvaGetData;


  FUNCTION fvaGetOI
  (
        inuCatecodi     in categori.catecodi%TYPE,
        inuClcrclco     in IC_CLASCORE.clcrclco%TYPE
  )
  return VARCHAR2
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetOI
     AUTOR     : Heiber Barco
     FECHA     : 06-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la orden interna por clasificador por categoria

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  IS
     cursor cuOrdenInterna
     is
     select * from ldci_clascontcateoi
     where clcocate = inuCatecodi
       AND clcocodi = inuClcrclco;

     rgldci_clasconcateoi   LDCI_CLASCONTCATEOI%rowtype;

  BEGIN

     open cuOrdenInterna;
     fetch cuOrdenInterna into rgldci_clasconcateoi;
     if (cuOrdenInterna%notfound) then
         return(-1);
     end if;
     close cuOrdenInterna;

     return(rgldci_clasconcateoi.clcoorin);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetOI] - No se pudo obtener La Orden Interna. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  END fvaGetOI;


  /************************************************************************
     PROPIEDAD INTELECTUAL PETI
     FUNCION   : fvaGetOIGen
     AUTOR     : Oscar Parra
     FECHA     : 25-05-2015
     DESCRIPCION:  funcion que se encarga de obtener la orden interna por
                   clasificador por categoria por ciclo, para los productos de tipo
                   de servicion generioo

    Parametros de Entrada
    inuCatecodi     categoria
    inuClcrclco     clasificador contable
    inuCiclo        Ciclo

    Historia de Modificaciones
    Fecha               Autor             Descripcion
    25/05/2015     oparra.Aranda 7100     1. Creacion
  ************************************************************************/
  FUNCTION fvaGetOIGen
  (
        inuCatecodi     in categori.catecodi%TYPE,
        inuClcrclco     in IC_CLASCORE.clcrclco%TYPE,
        inuCiclo        in ciclo.ciclcodi%type
  )
  RETURN VARCHAR2
  IS
     cursor cuOrdenInterna
     is
         select *
         from ldci_oiprdgenerico
         where clcocate = inuCatecodi
           AND clcocodi = inuClcrclco
           and clcciclo = inuCiclo;

     rgldci_oiprdgenerico   ldci_oiprdgenerico%rowtype;

  BEGIN

     open cuOrdenInterna;
     fetch cuOrdenInterna into rgldci_oiprdgenerico;
     if (cuOrdenInterna%notfound) then
         return(-1);
     end if;
     close cuOrdenInterna;

     return(rgldci_oiprdgenerico.clcoorin);

  EXCEPTION
    when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetOIGen] - No se pudo obtener La Orden Interna. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);

  END fvaGetOIGen;


  /************************************************************************
     PROPIEDAD INTELECTUAL PETI
     FUNCION   : fvaValidaGetOI
     AUTOR     : Oscar Parra
     FECHA     : 25-05-2015
     DESCRIPCION:  funcion que se encarga de obtener la orden interna, valida el
                   tipo del producto, si es "6121 - Generico" llama la funcion
                   fvaGetOIGen y sino llama la funcion fvaGetOI

    Parametros de Entrada
    inuTipoProd     tipo de producto
    inuCatecodi     categoria
    inuClcrclco     clasificador contable
    inuCiclo        Ciclo

    Historia de Modificaciones
    Fecha               Autor             Descripcion
    25/05/2015     oparra.Aranda 7100     1. Creacion
  ************************************************************************/
  FUNCTION fvaValidaGetOI
  (
        inuTipoProd     in servicio.servcodi%type,
        inuCatecodi     in categori.catecodi%TYPE,
        inuClcrclco     in ic_clascore.clcrclco%TYPE,
        inuCiclo        in ciclo.ciclcodi%type
  )
  RETURN VARCHAR2
  IS
     sbOrdenInterna     ldci_ordeninterna.codi_ordeinterna%type;

  BEGIN

    IF (inuTipoProd IS NOT NULL) THEN

        if (inuTipoProd = dald_parameter.fnugetNumeric_Value('COD_PRO_GEN')) then
            sbOrdenInterna  := fvaGetOIGen(inuCatecodi,inuClcrclco,inuCiclo);
        else
            sbOrdenInterna  := fvaGetOI(inuCatecodi,inuClcrclco);
        end if;
    END IF;

    return sbOrdenInterna;

  EXCEPTION
    when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaValidaGetOI] - No se pudo obtener La Orden Interna. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);

  END fvaValidaGetOI;


  FUNCTION fvaGetDescripNit (inubannnnit   in LDCI_BANCONIT.bannnnit%TYPE)
  return VARCHAR2
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetDescripNit
     AUTOR     : Heiber Barco
     FECHA     : 06-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la descripcion del nit.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    heiberb  18-02-2015  se quita el hint para que la consulta tome el index de la tabla.
  ************************************************************************/
  CURSOR cuGetDescripcion IS
    --<<
    --heiberb 18-02-2015 se quita el hint para que la consulta tome el index de la tabla.
    -->>
    --/*+ index(LDCI_BANCONIT,PK_LDCI_BANCONIT)*/
    SELECT bannnomb
      FROM LDCI_BANCONIT
     WHERE bannnnit = inubannnnit;


   rgcuGetDescripcion cuGetDescripcion%ROWTYPE;
   vaDescripcion LDCI_BANCONIT.bannnomb%TYPE;

  begin

  OPEN cuGetDescripcion;
  FETCH cuGetDescripcion INTO rgcuGetDescripcion;
  CLOSE cuGetDescripcion;

   vaDescripcion := rgcuGetDescripcion.bannnomb;

     RETURN vaDescripcion;
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetDescripNit] - No se pudo obtener la Descripcion del NIT. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return('-1');
  end fvaGetDescripNit;

  FUNCTION fvaGetClasCont (nuCons   in NUMBER)
  return NUMBER
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetClasCont
     AUTOR     : Oscar Restrepo
     FECHA     : 14-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener el clasificador contable.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
    nuClasCont NUMBER;

    CURSOR cuClasCont IS
      SELECT Nvl(CLCOCODI,null)  CLCOCODI
        FROM ic_decoreco,IC_CONFRECO,IC_CLASCORE,IC_CLASCONT
        WHERE DCRCCONS=CORCCONS
        AND CLCRCORC=CORCCONS
        AND CLCRCLCO=CLCOCODI
        AND DCRCCONS=nuCons;

  begin

      OPEN cuClasCont;
      FETCH cuClasCont INTO nuClasCont;
      CLOSE cuClasCont;

      RETURN nuClasCont;

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClasCont] - No se pudo obtener el clasificador Contable. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  end fvaGetClasCont;


  FUNCTION fvaGetCodTipInter (sbDesInterfaz VARCHAR2)
  return NUMBER
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetCodTipInter
     AUTOR     : Oscar Restrepo
     FECHA     : 23-09-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de Validar si existe configuraci?n para Tipo de Interfaz,
                    la configuracion se realiza en la forma LDCITIPINTERF y queda almacenada en la
                    tabla LDCI_TIPOINTERFAZ.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
    sbCodInterfaz NUMBER:=0;
    sbMensage VARCHAR2(200);

    CURSOR cuObtCod IS
      SELECT COUNT(*) TOTALREG
        FROM LDCI_TIPOINTERFAZ
          WHERE TIPOINTERFAZ = sbDesInterfaz;
  BEGIN

      --<<
      --Si el Tipo de interfaz que llega a la funci?n es Nullo
      -->>
      IF sbDesInterfaz IS NULL THEN
         --dbms_output.put_line('Here_2 :'||sbDesInterfaz);
         sbMensage:='[fvaGetCodTipInter] - Tipo de Interfaz  Nulo, valide en la forma LDTPDOCO. ';
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error fvaGetCodTipInter :['||sbMensage,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
         RETURN -1;
      ELSE

          OPEN cuObtCod;
          FETCH cuObtCod INTO sbCodInterfaz;
          CLOSE cuObtCod;

          IF (sbCodInterfaz=0) THEN
              --dbms_output.put_line('Here_3 :'||sbDesInterfaz);
              sbMensage:='[fvaGetCodTipInter] - Tipo de Interfaz :['||sbDesInterfaz||'] no tiene configuraci?n de Comprobante y Tipo de comprobante , ir a la forma LDCITIPINTERF. ';
              LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error fvaGetCodTipInter :['||sbMensage,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
              RETURN -1;
          ELSE
              --dbms_output.put_line('Here_4 :'||sbDesInterfaz);
              dbms_output.put_line('Cantidad Registros Retorno [Configuracion Interfaz LDCI_PROCMONI]:'||sbCodInterfaz);
              RETURN sbCodInterfaz;
          END IF;

      END IF;
      EXCEPTION
      WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetCodTipInter] - No existe configuraci?n para el tipo de Interfaz. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(sbDesInterfaz,'Error fvaGetCodTipInter :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),sbDesInterfaz,USER,USERENV('TERMINAL'));
       RETURN -1;

  END fvaGetCodTipInter;

Function fvaGetSegmento(Cebe number)
  Return VARCHAR2
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetSegmento
     AUTOR     : Oscar Restrepo
     FECHA     : 23-09-2013
     DESCRIPCION  : Funcion que se encarga de obtener el Segmento
                    configurado en la tabla LDCI_CENTROBENEF.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/

   -- cursor para obtener la informacion del tipo de comprobante contable
    CURSOR cuSegmento(nuCebe VARCHAR2) IS
    select CEBESEGM from LDCI_CENTROBENEF WHERE CEBECODI=nuCebe;

    sbSegmentortn VARCHAR2(200);
    sbCebe VARCHAR2(100);
  BEGIN

        sbCebe:=TO_CHAR(Cebe);

        OPEN cuSegmento(sbCebe);
        FETCH cuSegmento INTO sbSegmentortn;
        CLOSE cuSegmento;

        return NVL(sbSegmentortn,0);
  EXCEPTION
    WHEN ERROR THEN
        return '';
  end fvaGetSegmento;

function fnuGetNitGenerico(sbClasContable  NUMBER)
return VARCHAR2
IS
    /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGetNitGenerico
     AUTOR     : Oscar Restrepo
     FECHA     : 16-10-2013
     DESCRIPCION  : Funcion que se encarga de obtener el Nit Generico
                    de un clasificador contable.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  sbDivertenge VARCHAR2(2);
  nuNitRt VARCHAR2(40);

  CURSOR cuObtNit IS
    SELECT NIT_GENERICO FROM ldci_clnitgen WHERE id_clascont=sbClasContable;
BEGIN

    OPEN cuObtNit;
    FETCH cuObtNit INTO nuNitRt;
    CLOSE cuObtNit;

    return nuNitRt;

END fnuGetNitGenerico;


function fnuGetDivergente(sbClavCont   VARCHAR2)
return VARCHAR2
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGetDivergente
     AUTOR     : Oscar Restrepo
     FECHA     : 16-10-2013
     DESCRIPCION  : Funcion que se encarga de validar si una clave contable
                    es o no divergente,configurado en la tabla LDCI_CLAVECONTA.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  sbDivertenge VARCHAR2(2);

   CURSOR cuDivergente IS
    SELECT DECODE(l.clavtire, 'D', 'S', 'K', 'S', 'N') clavtire
      FROM ldcI_claveconta l
      WHERE l.clavcodi = sbClavCont;
  BEGIN

    OPEN cuDivergente;
    FETCH cuDivergente INTO sbDivertenge;
    CLOSE cuDivergente;
    RETURN  sbDivertenge;
  END fnuGetDivergente;

FUNCTION fnuGeneDocuSapActa(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
  return number
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSap
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz de actas
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor       Fecha         Descripcion
    cgonzalezv  24/09/2015    SAO 340428 MOdificacion de las funciones fnuGeneDocuSapActa
                              fnuGeneDocuSapActaRO cursor cuLDCI_INCOLIQU, para soportar
                              la clave contable por Devolucion de Fondo de Garantia

  ************************************************************************/
  IS

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
     CURSOR cuAGRUPACION is
         SELECT ICLINUDO, comprobante
         FROM LDCI_INCOLIQU
         WHERE iclinudo = nuICLINUDO
         GROUP BY ICLINUDO , comprobante;

     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
    CURSOR cuLDCI_INCOLIQU IS
    SELECT * FROM (
    (SELECT  Decode(INDICCME, NULL, Decode(Nvl(fvaGetClaveConta(CLASECTA, Decode(Sign(Round(sum(IMPOMTRX))), 1, 'D', -1, 'C')),0), 0,  fvaGetClaveConta(CTADIV, Decode(Sign(Round(sum(IMPOMTRX))), 1, 'D', -1, 'C')),
            fvaGetClaveConta(CLASECTA, Decode(Sign(Round(sum(IMPOMTRX))), 1, 'D', -1, 'C'))), clavcont) CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, Round(sum(BASEIMPT)) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, Abs(Round(sum(BASERETC))) BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV,
            Abs(Round(sum(IMPOMTRX))) IMPOMTRX,
            Abs(Round(sum(IMPOMSOC))) IMPOMSOC
    FROM(
    SELECT CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(SYSDATE) FECHBASE, REFFACTR, ((BASEIMPT)) BASEIMPT,
                CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, ((BASERETC)) BASERETC,
                COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(SYSDATE) FECHVALOR, CTADIV,
                clavcont, --sao 340428
                Decode(ldci_pkinterfazsap.fvaGetNaturaleza(CLAVCONT), 'S', ((IMPOMTRX)), 'H', ((-Abs(IMPOMTRX)))) IMPOMTRX,
                Decode(ldci_pkinterfazsap.fvaGetNaturaleza(CLAVCONT), 'S', ((IMPOMSOC)), 'H', ((-Abs(IMPOMSOC)))) IMPOMSOC
           FROM LDCI_INCOLIQU
          WHERE ICLINUDO = nuICLINUDO
            AND ldci_pkinterfazsap.vaActaFact <> ldci_pkinterfazactas.vaTipoActa
            AND round(IMPOMTRX) <> 0
          ORDER BY COD_CENTROBENEF)
    GROUP BY    CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
                CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC,
                COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV, CLAVCONT)
    UNION ALL

         SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, SYSDATE FECHBASE, REFFACTR, Abs(Round(Sum(BASEIMPT))) BASEIMPT,
                CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, Abs(Round(Sum(BASERETC))) BASERETC,
                COD_CENTROBENEF, COD_CLASIFCONTA, SYSDATE FECHVALOR, CTADIV,Abs(Round(sum(IMPOMTRX))) IMPOMTRX,
                Abs(Round(sum(IMPOMSOC))) IMPOMSOC
           FROM LDCI_INCOLIQU
          WHERE ICLINUDO = nuICLINUDO
            AND ldci_pkinterfazsap.vaActaFact = ldci_pkinterfazactas.vaTipoActa
            AND round(IMPOMTRX) <> 0
         GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, REFFACTR,
                CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC,
                COD_CENTROBENEF, COD_CLASIFCONTA, CTADIV
          ORDER BY COD_CENTROBENEF)
          WHERE IMPOMTRX <> 0;

     --<<
     -- Cursor para obtener la fecha de factura del acta
     -->>
     CURSOR cuFeFaActa(nuId_acta     ge_acta.id_acta%TYPE)
     IS
     SELECT trunc(extern_pay_date)
       FROM ge_acta
      WHERE id_acta = nuId_acta;

     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     nuIdentificador number;
     daFeFaActa      DATE;           -- Fecha de Factura del acta

  begin

    --<<
    --seleccion de datos de la agrupacion
    -->>
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop

        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        nuIndEnca := nuIndEnca + 1;
        sbIndice := vtycuAGRUPACION(j).ICLINUDO;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            nuIdentificador := seq_ldci_encaintesap.nextval;
            tbENCABEZADO(sbIndice) := nuIdentificador;
        END if;

       -- Obtiene Libro
        sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtycuAGRUPACION(j).comprobante);

        --<<
        -- Se obtiene la fecha de factura del acta
        -->>
        OPEN cuFeFaActa(ldci_pkinterfazsap.vaActa);
        FETCH cuFeFaActa INTO daFeFaActa;
        CLOSE cuFeFaActa;

        --<<
        --Insercion de datos en la tabla vtyldci_encaintesap
        -->>
        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                        nuIndEnca,
                                        null,
                                        null,
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        daFeFaActa,
                                        sbLEDGERS,
                                        ldci_pkinterfazsap.vaFactura,
                                        'ACTA-'||ldci_pkinterfazsap.vaActa,
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        ldci_pkinterfazsap.vaCURRENCY,
                                        nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>

       if (nuRet <> 0) then
            raise Error;
        end if;


        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>
        OPEN cuLDCI_INCOLIQU;
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        --<<
        --Saca los detalles de la interfaz por grupo por concepto
        -->>
        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP

          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    'ACTA-'||ldci_pkinterfazsap.vaActa,
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    -1,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>

          IF (nuRet <> 0) THEN
          Dbms_Output.Put_Line('termina detalle con cuenta '||vtycuLDCI_INCOLIQU(i).CLASECTA);
              RAISE ERROR;
          END IF;

        END LOOP;

        --<<
        --Borrado de la tabla en memoria de ldc_incoliqu
        -->>
        vtycuLDCI_INCOLIQU.delete;

    END LOOP;

    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
       RAISE ERROR;
    END IF;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapActa] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         dbms_output.put_line('Error fnuGeneDocuSapActa :['||ldci_pkinterfazsap.vaMensError);
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapActa] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         dbms_output.put_line('Error fnuGeneDocuSapActa :['||ldci_pkinterfazsap.vaMensError);
         return(-1);
    END fnuGeneDocuSapActa;

FUNCTION fnuGeneDocuSapActaRO(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
  return number
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSap
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 04-11-2014
     DESCRIPCION  : Copia de fnuGeneDocuSapActa
                    funcion que se encarga de armar el resumen de la interfaz de actas
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    -------- ----------- ------------------------------------------------
    Dcardona 21/01/2015  Aranda: XXXX
                         Se cambian las fechas de la interfaz para que en lugar de
                         la fecha actual (SYSDATE) ponga la fecha de factura del acta

    cgonzalezv  24/09/2015    SAO 340428 MOdificacion de las funciones fnuGeneDocuSapActa
                              fnuGeneDocuSapActaRO cursor cuLDCI_INCOLIQU, para soportar
                              la clave contable por Devolucion de Fondo de Garantia

                19/05/2017    CA-200-774
                              Se corrige el curso cuLDCI_INCOLIQU de tal manera que cuando sean
                              cuentas de reteica, haga un neteo por cuenta, cebe, tiporet e indicador
                              con el fin de que se genere un registro ?nico por los campos anteriores.
    Horbart     12/09/2018    CA-200-2006
                              Netear las cuentas de retencion y de Reteiva, enviar un solo registro a SAP.

    Horbart     21/10/2018   CA-200-2158 - Se asignan en la trama las condiciones de pago del contratista de acuerdo al
                             contrato y se asigna como fecha para inicio de pago la de radicacion de la factura en OnBase.
                             Esto aplica solo para GDCA.

    Edmlar      07/07/2020   CA-460 Se ajusta la base del IVA de acuerdo al valor del IVA, esto por la nueva version de SAP
                             que valida que la base sea la del valor del IVA generado.

  ************************************************************************/
  IS


     --<< CA-0000460
     VnuIva       number := 0;
     -->>

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
     CURSOR cuAGRUPACION is
         SELECT ICLINUDO, comprobante, ASIGNACN, REFFACTR, condpago
         FROM LDCI_INCOLIQU
         WHERE iclinudo = nuICLINUDO
         GROUP BY ICLINUDO , comprobante, ASIGNACN, REFFACTR, condpago;

     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
    CURSOR cuLDCI_INCOLIQU IS

    --<< CA-200-774 19/05/2017
    /*
    SELECT * FROM (
    (SELECT  Decode(INDICCME, NULL, Decode(Nvl(fvaGetClaveConta(CLASECTA, Decode(Sign(Round(sum(IMPOMTRX))), 1, 'D', -1, 'C', 0, 'C')),0), 0,  fvaGetClaveConta(CTADIV, Decode(Sign(Round(sum(IMPOMTRX))), 1, 'D', -1, 'C', 0, 'C')),
            fvaGetClaveConta(CLASECTA, Decode(Sign(Round(sum(IMPOMTRX))), 1, 'D', -1, 'C', 0, 'C'))), clavcont) CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, Round(sum(BASEIMPT)) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, Abs(Round(sum(BASERETC))) BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV,
            Abs(Round(sum(IMPOMTRX))) IMPOMTRX,
            Abs(Round(sum(IMPOMSOC))) IMPOMSOC
    FROM(
    SELECT CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(SYSDATE) FECHBASE, REFFACTR, ((BASEIMPT)) BASEIMPT,
                CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, ((BASERETC)) BASERETC,
                COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(SYSDATE) FECHVALOR, CTADIV,
                clavcont, -- SAO 340428
                Decode(ldci_pkinterfazsap.fvaGetNaturaleza(CLAVCONT), 'S', ((IMPOMTRX)), 'H', ((-Abs(IMPOMTRX)))) IMPOMTRX,
                Decode(ldci_pkinterfazsap.fvaGetNaturaleza(CLAVCONT), 'S', ((IMPOMSOC)), 'H', ((-Abs(IMPOMSOC)))) IMPOMSOC
           FROM LDCI_INCOLIQU
          WHERE ICLINUDO = nuICLINUDO
            AND ldci_pkinterfazsap.vaActaFact <> ldci_pkinterfazactas.vaTipoActa
            AND round(IMPOMTRX) <> 0
          ORDER BY COD_CENTROBENEF)
    GROUP BY    CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
                CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC,
                COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV, CLAVCONT )
    UNION ALL

         SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, SYSDATE FECHBASE, REFFACTR, Abs(Round(Sum(BASEIMPT))) BASEIMPT,
                CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, Abs(Round(Sum(BASERETC))) BASERETC,
                COD_CENTROBENEF, COD_CLASIFCONTA, SYSDATE FECHVALOR, CTADIV,Abs(Round(sum(IMPOMTRX))) IMPOMTRX,
                Abs(Round(sum(IMPOMSOC))) IMPOMSOC
           FROM LDCI_INCOLIQU
          WHERE ICLINUDO = nuICLINUDO
            AND ldci_pkinterfazsap.vaActaFact = ldci_pkinterfazactas.vaTipoActa
            AND round(IMPOMTRX) <> 0
         GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, REFFACTR,
                CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC,
                COD_CENTROBENEF, COD_CLASIFCONTA, CTADIV
          ORDER BY COD_CENTROBENEF)
          WHERE IMPOMTRX <> 0;
     */

        SELECT CLAVCONT, CLASECTA, INDICCME, /*INDICIVA,*/ CONDPAGO, FECHBASE, REFFACTR,
               --<< CA-0000460
               -- Quitamos los indicadores de IVA de las cuentas de gastos, costo y activos.
               CASE
                 WHEN SUBSTR(CLASECTA,1,1) In 
                                       (SELECT (COLUMN_VALUE)
                                          FROM TABLE (open.LDC_BOUTILITIES.SPLITSTRINGS( 
                                                                      (SELECT casevalo 
                                                                         FROM OPEN.LDCI_CARASEWE 
                                                                        WHERE casecodi = 'CTAS_INDI_IVA_MAYOR_VALOR'),',') ) )-- Ctas Indi IVA mayor Valor.
                   THEN
                     NULL
                   ELSE
                     INDICIVA
               END INDICIVA,
               -- Ajustamos la nade del IVA Calculado
               CASE
                 WHEN NVL(BASEIMPT,0) != 0 then
                    Abs(round((IMPOMTRX/(VnuIva/100))))
               END BASEIMPT,
               -->>
               CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
               CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
               COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV,
               IMPOMTRX,
               IMPOMSOC
          FROM (
                --
                SELECT  Decode(INDICCME, NULL, Decode(Nvl(open.ldci_pkinterfazsap.fvaGetClaveConta(CLASECTA, Decode(Sign(Round(sum(IMPOMTRX))), 1, 'D', -1, 'C', 0, 'C')),0), 0,  open.ldci_pkinterfazsap.fvaGetClaveConta(CTADIV, Decode(Sign(Round(sum(IMPOMTRX))), 1, 'D', -1, 'C', 0, 'C')),
                        open.ldci_pkinterfazsap.fvaGetClaveConta(CLASECTA, Decode(Sign(Round(sum(IMPOMTRX))), 1, 'D', -1, 'C', 0, 'C'))), clavcont) CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR,
                        Round(sum(BASEIMPT)) BASEIMPT,
                        CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                        CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, Abs(Round(sum(BASERETC))) BASERETC,
                        COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV,
                        Abs(Round(sum(IMPOMTRX))) IMPOMTRX,
                        Abs(Round(sum(IMPOMSOC))) IMPOMSOC
                   FROM (
                          SELECT CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(SYSDATE) FECHBASE, REFFACTR, BASEIMPT,
                                 CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                                 CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC,
                                 COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(SYSDATE) FECHVALOR, CTADIV,
                                 DECODE(SIGN(Round(IMPOMTRX)),-1,'50','40') clavcont,
                                 --clavcont, -- SAO 340428
                                 IMPOMTRX,
                                 IMPOMSOC
                            FROM
                                 (
                                  SELECT CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(SYSDATE) FECHBASE, REFFACTR, (sum(BASEIMPT)) BASEIMPT,
                                              CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                                              CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, (SUM(BASERETC)) BASERETC,
                                              COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(SYSDATE) FECHVALOR, CTADIV,
                                              --clavcont, -- SAO 340428
                                              sum(Decode(open.ldci_pkinterfazsap.fvaGetNaturaleza(CLAVCONT), 'S', ((IMPOMTRX)), 'H', ((-Abs(IMPOMTRX))))) IMPOMTRX,
                                              sum(Decode(open.ldci_pkinterfazsap.fvaGetNaturaleza(CLAVCONT), 'S', ((IMPOMSOC)), 'H', ((-Abs(IMPOMSOC))))) IMPOMSOC
                                         FROM LDCI_INCOLIQU
                                        WHERE ICLINUDO = nuICLINUDO
                                          AND open.ldci_pkinterfazsap.vaActaFact <> open.ldci_pkinterfazactas.vaTipoActa
                                          --<< CA-200-2006
                                          --AND clasecta like '2437014%'
                                          AND (
                                                clasecta like '2437014%'
                                             OR
                                                clasecta in (SELECT cuctcodi
                                                               FROM OPEN.ldci_cuentacontable c
                                                              WHERE ',' || (SELECT casevalo
                                                                              FROM OPEN.ldci_carasewe
                                                                             WHERE casecodi = 'CTA_RETENCION_IVA') || ',' LIKE '%,' || cuctcodi || ',%')
                                              )
                                          AND round(IMPOMTRX) <> 0
                                        GROUP BY CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(SYSDATE), REFFACTR,
                                                 CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                                                 CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, --((BASERETC)),
                                                 COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(SYSDATE), CTADIV
                                        ORDER BY COD_CENTROBENEF
                                 )
                          --
                          UNION ALL
                          --
                          SELECT CLASECTA, INDICCME, INDICIVA, CONDPAGO, Trunc(SYSDATE) FECHBASE, REFFACTR, (BASEIMPT) BASEIMPT,
                                      CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                                      CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, (BASERETC) BASERETC,
                                      COD_CENTROBENEF, COD_CLASIFCONTA, Trunc(SYSDATE) FECHVALOR, CTADIV,
                                      clavcont, -- SAO 340428
                                      (Decode(open.ldci_pkinterfazsap.fvaGetNaturaleza(CLAVCONT), 'S', ((IMPOMTRX)), 'H', ((-Abs(IMPOMTRX))))) IMPOMTRX,
                                      (Decode(open.ldci_pkinterfazsap.fvaGetNaturaleza(CLAVCONT), 'S', ((IMPOMSOC)), 'H', ((-Abs(IMPOMSOC))))) IMPOMSOC
                                 FROM LDCI_INCOLIQU
                                WHERE ICLINUDO = nuICLINUDO
                                  AND open.ldci_pkinterfazsap.vaActaFact <> open.ldci_pkinterfazactas.vaTipoActa
                                  --<< CA-200-2006
                                  --AND clasecta NOT LIKE '2437014%'
                                  AND clasecta NOT LIKE '2437014%'
                                  AND clasecta NOT IN (SELECT cuctcodi
                                                           FROM OPEN.ldci_cuentacontable c
                                                          WHERE ',' || (SELECT casevalo
                                                                          FROM OPEN.ldci_carasewe
                                                                         WHERE casecodi = 'CTA_RETENCION_IVA') || ',' LIKE '%,' || cuctcodi || ',%')
                                  -->>
                                  AND round(IMPOMTRX) <> 0
                        --
                        )
                GROUP BY CLASECTA, INDICCME, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                         CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, COD_CENTROBENEF, COD_CLASIFCONTA, FECHVALOR, CTADIV, CLAVCONT
                --
                UNION ALL

                     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, SYSDATE FECHBASE, REFFACTR, Abs(Round(Sum(BASEIMPT))) BASEIMPT,
                            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, Abs(Round(Sum(BASERETC))) BASERETC,
                            COD_CENTROBENEF, COD_CLASIFCONTA, SYSDATE FECHVALOR, CTADIV,Abs(Round(sum(IMPOMTRX))) IMPOMTRX,
                            Abs(Round(sum(IMPOMSOC))) IMPOMSOC
                       FROM LDCI_INCOLIQU
                      WHERE ICLINUDO = nuICLINUDO
                        AND open.ldci_pkinterfazsap.vaActaFact = open.ldci_pkinterfazactas.vaTipoActa
                        AND round(IMPOMTRX) <> 0
                     GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, REFFACTR,
                            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
                            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC,
                            COD_CENTROBENEF, COD_CLASIFCONTA, CTADIV
                      ORDER BY COD_CENTROBENEF
                  )
                  WHERE IMPOMTRX <> 0;


     -- END CA-200-774
     -->>

     --<<
     -- Cursor para obtener la fecha de factura del acta
     -->>
     CURSOR cuFeFaActa(nuId_acta     ge_acta.id_acta%TYPE)
     IS
     SELECT trunc(extern_pay_date)
       FROM ge_acta
      WHERE id_acta = nuId_acta;

      --<< CA-200-2158
      --

      -- Fecha Radicado como fecha de Factura
      CURSOR CURADICADO (VaNit  ldc_radicado_facturas.nit_provedor%type,
                         nuFact ldc_radicado_facturas.num_factura%type)
      IS
      SELECT R.FECHA_RADICADO
        FROM LDC_RADICADO_FACTURAS R
       WHERE R.NIT_PROVEDOR = vanit
         AND r.num_factura  = nuFact;

      -- Condiciones de Pago
      CURSOR CuCond_Pago (nuCont LDC_CONT_PLAN_COND.CONTRACT_ID%type)
      IS
      SELECT substr(cp.plan_name,1,4)
        FROM LDC_CONT_PLAN_COND cp
       WHERE cp.contract_id = nucont;

      -- Cursor para obterner el nit de la LDC que ejecuta el proceso.
      --
      CURSOR cuSistema
      IS
      SELECT s.sistnitc
        FROM sistema s;

      vsbnit     sistema.sistnitc%type;
      VsbNitLdc  ldci_carasewe.casevalo%type;
      Vnucodpago ldci_detaintesap.condpago%type;
      daFeFaRadi DATE;           -- Fecha de Radicado de Factura

      -- END CA-200-2158
      -->>

     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     nuIdentificador number;
     daFeFaActa      DATE;           -- Fecha de Factura del acta


  begin

    --<< CA = 200-2158
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'VAL_NIT_SERV_CUMP_GDCA', VsbNitLdc, osbErrorMessage);
    -->>

    --<< CA - 0000460
    VnuIva := dald_parameter.fnuGetNumeric_Value('COD_VALOR_IVA',null);
    -->>

    --<<
    --seleccion de datos de la agrupacion
    -->>
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop

        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        nuIndEnca := nuIndEnca + 1;
        sbIndice := vtycuAGRUPACION(j).ICLINUDO;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            nuIdentificador := seq_ldci_encaintesap.nextval;
            tbENCABEZADO(sbIndice) := nuIdentificador;
        END if;

       -- Obtiene Libro
        sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtycuAGRUPACION(j).comprobante);

        --<<
        -- Se obtiene la fecha de factura del acta
        -->>

        OPEN cuFeFaActa(ldci_pkinterfazsap.vaActa);
        FETCH cuFeFaActa INTO daFeFaActa;
        CLOSE cuFeFaActa;

        --<
        -- CA-200-2158
        --

        OPEN cuSistema;
        FETCH cuSistema INTO vsbnit;
        CLOSE cuSistema;

        IF TRIM(vsbnit) = TRIM(VsbNitLdc) THEN
          -- Fecha Factura recibo de factura
          OPEN CURADICADO(vtycuAGRUPACION(j).ASIGNACN, vtycuAGRUPACION(j).REFFACTR);
          FETCH CURADICADO INTO daFeFaRadi;
          IF CURADICADO%NOTFOUND then
            daFeFaRadi := daFeFaActa; -- Fecha Asignacion de Factura
          END IF;
          CLOSE CURADICADO;

          -- Dias de Pago
          OPEN CuCond_Pago(ldci_pkinterfazsap.nuContrato);
          FETCH CuCond_Pago INTO Vnucodpago;
          IF CuCond_Pago%NOTFOUND then
            Vnucodpago := vtycuAGRUPACION(j).CONDPAGO;
          END IF;
          CLOSE CuCond_Pago;

        ELSE
          -- Efigas
          Vnucodpago := vtycuAGRUPACION(j).CONDPAGO;
          daFeFaRadi := daFeFaActa;

        END IF;

        -- CA-200-2158
        -->>


        --<<
        --Insercion de datos en la tabla vtyldci_encaintesap
        -->>
        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                        nuIndEnca,
                                        null,
                                        null,
                                        -- <<
                                        -- CA-200-2158
                                        --daFeFaActa, -- Dcardona: 21/01/2015 - Aranda: XXXX - Se cambia Sysdate por la fecha de la factura
                                        daFeFaRadi,
                                        -- End CA-200-2158
                                        -- >>
                                        daFeFaActa, -- Dcardona: 21/01/2015 - Aranda: XXXX - Se cambia Sysdate por la fecha de la factura
                                        sbLEDGERS,
                                        ldci_pkinterfazsap.vaFactura,
                                        'A-'||ldci_pkinterfazsap.vaActa||
                                        '-C-'||ldci_pkinterfazsap.nuContrato||
                                        '-F-'||ldci_pkinterfazsap.vaFactura,
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        ldci_pkinterfazsap.vaCURRENCY,
                                        nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>

       if (nuRet <> 0) then
            raise Error;
        end if;


        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>
        OPEN cuLDCI_INCOLIQU;
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        --<<
        --Saca los detalles de la interfaz por grupo por concepto
        -->>
        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP

          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
          --
          --insert into tabla_log (c1,c2,c3) values('1',Vnucodpago,sysdate);
        commit;

          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    Vnucodpago, -- CA-200-2158 vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    -- <<
                                                    -- CA-200-2158
                                                    --daFeFaActa, -- Dcardona: 21/01/2015 - Aranda: XXXX - Se cambia Sysdate por la fecha de la factura
                                                    daFeFaRadi,
                                                    -- End CA-200-2158
                                                    -- >>
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    'A-'||ldci_pkinterfazsap.vaActa||
                                                    '-C-'||ldci_pkinterfazsap.nuContrato||
                                                    '-F-'||ldci_pkinterfazsap.vaFactura,
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    daFeFaActa, -- Dcardona: 21/01/2015 - Aranda: XXXX - Se cambia SYSDATE por la fecha de la factura del acta
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    -1,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>

          IF (nuRet <> 0) THEN
          Dbms_Output.Put_Line('termina detalle con cuenta '||vtycuLDCI_INCOLIQU(i).CLASECTA);
              RAISE ERROR;
          END IF;

        END LOOP;

        --<<
        --Borrado de la tabla en memoria de ldc_incoliqu
        -->>
        vtycuLDCI_INCOLIQU.delete;

    END LOOP;

    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
       RAISE ERROR;
    END IF;

    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapActaRO] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         dbms_output.put_line('Error fnuGeneDocuSapActaRO :['||ldci_pkinterfazsap.vaMensError);
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapActaRO] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         dbms_output.put_line('Error fnuGeneDocuSapActaRO :['||ldci_pkinterfazsap.vaMensError);
         return(-1);
    END fnuGeneDocuSapActaRO;

function fnuAjusteInterContable(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%TYPE,
                                vaICLITIDO   IN LDCI_INCOLIQU.iclitido%TYPE,
                                nuVlrAjust   IN NUMBER)
RETURN NUMBER
/************************************************************************
   PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
   FUNCION   : fnuAjusteInterContable
   AUTOR     : Oscar Restrepo
   FECHA     : 24-10-2013
   DESCRIPCION  : PETI
                  funcion que se encarga de hacer ajuste al peso en la interfaz contable

  Parametros de Entrada
                nuICLINUDO : Consecutivo de la trama SAP
                vaICLITIDO : Tipo de Documento Contable
                nuVlrAjust : Valor maximo de ajuste en diferencia de Debitos vs Creditos

  Parametros de Salida

  Historia de Modificaciones
  Autor       Fecha       Descripcion
  cgonzalezv  23/10/2015  Ara 6746: Se agrega los parametros de entrada
                          Tipo de documento y Valor limite de ajuste
************************************************************************/
IS
   CURSOR cuValidaDocumento IS
    select sum(decode(l.clavoper, 'S', d.impomtrx, 'H', -d.impomtrx)) valor, d.num_documentosap
      from LDCI_DETAINTESAP d, ldci_claveconta l
     where cod_interfazldc = nuICLINUDO
       and l.clavcodi = d.clavcont
  group by d.num_documentosap
  HAVING sum(decode(l.clavoper, 'S', d.impomtrx, 'H', -d.impomtrx)) <> 0;


  CURSOR cuObtieneRegistro(inuDocumento LDCI_DETAINTESAP.num_documentosap%TYPE,
                           ivaclavcont LDCI_DETAINTESAP.clavcont%TYPE) IS
   select * from
   (select *
      from LDCI_DETAINTESAP d
     where cod_interfazldc = nuICLINUDO
       and d.num_documentosap = inuDocumento
       and d.clavcont = ivaclavcont
--       and d.clasecta like '14%'
  order by impomtrx ASC)
  where rownum = 1;

vaclave40 ldci_claveconta.clavcodi%TYPE;
vaclave50 ldci_claveconta.clavcodi%TYPE;
vaClaveDef ldci_claveconta.clavcodi%TYPE;
nuComodin NUMBER;
vaComodin VARCHAR2(2000);
nuCantidadP NUMBER;

boExisDife BOOLEAN; -- 27-10-2015 cgonzalezv  ARA6746: variable para identificar si hay diferencia en db vs cr en la trama


recuObtieneRegistro  cuObtieneRegistro%ROWTYPE;

BEGIN

  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CLAVE40', vaclave40, osbErrorMessage);
  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'CLAVE50', vaclave50, osbErrorMessage);

  -- Ara 6746 reporta diferencia de DB vs CR, que superan al valor permitido
  boExisDife := FALSE;
  LDCI_pkTrazaInterfaces.pRegiMensaje(vaICLITIDO,'Inicia validacion de ajuste, maximo permitido:['||nuVlrAjust||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaICLITIDO,USER,USERENV('TERMINAL'));
  nuCantidadP := 0;
  FOR rc_cuValidaDocumento IN cuValidaDocumento LOOP
      boExisDife := TRUE; --existe diferencia
      IF ABS(rc_cuValidaDocumento.valor) > nuVlrAjust THEN

         --Traza por el valor de diferencia
         nuCantidadP := nuCantidadP + 1;
         LDCI_pkTrazaInterfaces.pRegiMensaje(vaICLITIDO,'Error al presentar diferencias DB vs CR en documento contable:['||rc_cuValidaDocumento.num_documentosap||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaICLITIDO,USER,USERENV('TERMINAL'));
         LDCI_pkTrazaInterfaces.pRegiMensaje(vaICLITIDO,'Diferencia de ['||rc_cuValidaDocumento.valor||'] supera al Valor permitido de ajuste: ['||nuVlrAjust||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),vaICLITIDO,USER,USERENV('TERMINAL'));
   END IF;

  -- cgonzalezv Ara 6746: Si el valor de ajuste es mayor al permitido, retornando error y finalizando el proceso
  IF nuCantidadP > 0 THEN
     RETURN(-1);
  END IF;
  END LOOP;

  -- Proceso de Ajuste
  IF boExisDife THEN
     FOR rgcuValidaDocumento IN cuValidaDocumento LOOP

          IF (rgcuValidaDocumento.valor > 0 ) THEN
                  vaClaveDef := vaclave50;
              ELSE

              vaClaveDef := vaclave40;
          END IF;

          OPEN cuObtieneRegistro(rgcuValidaDocumento.num_documentosap, vaClaveDef);
          FETCH cuObtieneRegistro INTO recuObtieneRegistro;
          CLOSE cuObtieneRegistro;

          UPDATE LDCI_DETAINTESAP SET (impomtrx) = impomtrx + (Abs(rgcuValidaDocumento.valor)),
                  (impomsoc) = impomsoc + (Abs(rgcuValidaDocumento.valor))
            WHERE cod_interfazldc = nuICLINUDO
              and num_documentosap = rgcuValidaDocumento.num_documentosap
              and clavcont = vaClaveDef
              and clasecta = recuObtieneRegistro.clasecta
              AND IMPOMTRX = recuObtieneRegistro.impomtrx
              AND ROWNUM = 1;

            UPDATE LDCI_INCOLIQU SET (impomtrx) = impomtrx+ (Abs(rgcuValidaDocumento.valor)),
                  (impomsoc) = impomsoc+ (Abs(rgcuValidaDocumento.valor))
            WHERE iclinudo = nuICLINUDO
              and clavcont = vaClaveDef
              and clasecta like '14%'
              AND IMPOMTRX = recuObtieneRegistro.impomtrx
              AND centrobe = recuObtieneRegistro.centrobe
              AND ROWNUM = 1;
        -- Asienta registros
        COMMIT;

   END LOOP;
 END IF;
RETURN 0;

EXCEPTION
WHEN OTHERS THEN
RETURN(-1);
END fnuAjusteInterContable;

function fnuTipoIntRecaudo(sbFechagen   in LDC_CIERCOME.CICOFECH%TYPE,
tipoRecaudo OUT LDCI_TIPODOCO.TIDCCODI%TYPE)
return NUMBER
/************************************************************************
   PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
   FUNCION   : fnuTipoIntRecaudo
   AUTOR     : Oscar Restrepo
   FECHA     : 24-10-2013
   DESCRIPCION  : PETI
                  funcion que se encarga de obtener el tipo de interfaz para recaudo
                  se requiere que en la tabla LDC_CIERCOME, este configuradas las fechas
                  de cierre comercial

  Parametros de Entrada

  Parametros de Salida

  Historia de Modificaciones
  Autor       Fecha       Descripcion
  cgonzalezv  21/09/2015  Ara6744/Sao337642:
                          Se quita el aumento de un dia a la fecha de
                          grabacion del pago, para que el ultimo dia se
                          reporte como LC y no Como L2, Se compara la
                          fecha de grabacion del pago si esta dentro del
                          periodo contable y si es el caso se reporta como
                          L2.
                          Se modifica el metodo para que solo sea comparado
                          con las fechas del cierre comercial (Se modifica la
                          logica de la funcion)
************************************************************************/
 is

          --<<
          -- Cursor para obtener la fecha de cierre para el Anio y mes
          -- de grabacion del los pagos
          -->>
          CURSOR fechacierre (ano NUMBER, mes NUMBER)
                IS
            SELECT TRUNC(cicofein), TRUNC(cicofech)
              FROM ldc_ciercome
             WHERE cicoano  = ano
               AND cicomes = mes;


          dtFechaGrab date;
          dtFechaIniCierr date;
          dtFechaFinCierr date;
          nuAno NUMBER;
          nuMes NUMBER;
          ntFechac EXCEPTION;
    BEGIN

        dtFechaGrab:=TRUNC(sbFechagen);

        nuAno:=to_number(to_char(dtFechaGrab,'YYYY'));
        nuMes:=to_number(to_char(dtFechaGrab,'MM'));

        OPEN fechaCierre(nuAno,nuMes);
        FETCH fechaCierre INTO  dtFechaIniCierr,dtFechaFinCierr;
        CLOSE fechaCierre;

        --Las fechas del cierre deben exister para el anio y mes a procesar
        IF(dtFechaIniCierr IS NULL OR dtFechaFinCierr IS NULL) THEN
            RAISE ntFechac;
        END IF;

        --<<
        -- Valida el tipo de interfaz (L2/LC),  tomando la fecha de grabacion del pago
        -- Comparada con las fechas de Cierre Comercial
        -->>
        IF(dtFechaGrab >=dtFechaIniCierr AND dtFechaGrab<=dtFechaFinCierr) THEN
              -- Recaudo Normal entres las fechas del cierre
              tipoRecaudo:='L2';
          ELSE
              -- Recaudo Fuera de fechas del cierre comercial
              tipoRecaudo:='LC';
        END IF;
        return 0;
    EXCEPTION
    WHEN ntFechac THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error interfaz Recaudos - '||ldci_pkinterfazsap.vaCODINTINTERFAZ||' No de identifica un rango de fechas que contenga  ['||dtFechaGrab||'] - No hay Fecha de cierre',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error interfaz Recaudos - '||ldci_pkinterfazsap.vaCODINTINTERFAZ||' Fecha no valida '||dtFechaGrab,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
end fnuTipoIntRecaudo;

function fnuRangoFechas(inuAnio NUMBER,
                        inuMes NUMBER,
                        otFechainic OUT DATE,
                        otFechaFin OUT DATE)
return NUMBER
/************************************************************************
   PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
   FUNCION   : fnuRangoFechas
   AUTOR     : Oscar Restrepo
   FECHA     : 24-10-2013
   DESCRIPCION  : PETI
                  funcion que se encarga de obtener Rango de fechas calendario
                  para un mes y a?o especificado.

  Parametros de Entrada

  Parametros de Salida

  Historia de Modificaciones
  Autor    Fecha       Descripcion
************************************************************************/
 is
 CURSOR ultimodiaMes(indtFechaGrab DATE) IS
  select trunc(last_day(to_date(indtFechaGrab))) ultimo_dia
     from dual;

      ntFechac exception;
      FechaInic DATE;
      FechaFin DATE;

BEGIN

    FechaInic:= to_Date('01/'||inuMes||'/'||inuAnio);

    OPEN ultimodiaMes (FechaInic);
    FETCH ultimodiaMes INTO FechaFin;
    CLOSE ultimodiaMes;

    IF (FechaInic is not null and FechaFin is not  null) THEN
        otFechainic:=FechaInic;
        otFechaFin:=FechaFin;
    ELSE
        raise  ntFechac;
    END IF;
    RETURN 0;
    EXCEPTION
    WHEN ntFechac THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error No se puede obtener Rango de Fechas [fnuRangoFechas]- '||ldci_pkinterfazsap.vaCODINTINTERFAZ||' Mes  ['||inuMes||' A?o ['||inuAnio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error No se puede obtener Rango de Fechas [fnuRangoFechas] - '||ldci_pkinterfazsap.vaCODINTINTERFAZ||' Mes  ['||inuMes||' A?o ['||inuAnio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
END fnuRangoFechas;


FUNCTION fvaGetFechaCierre (nuAnio   in NUMBER,
                              nuMes in NUMBER,
                             daFechaIni  OUT DATE,
                             daFechaFin  OUT DATE)
  return NUMBER
/************************************************************************
   PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
   FUNCION   : fvaGetFechaCierre
   AUTOR     : Oscar Restrepo
   FECHA     : 01-11-2013
   DESCRIPCION  : PETI
                  funcion que se encarga de obtener Rango de fechas de cierre
                  contable para un mes y a?o especificado.

  Parametros de Entrada

  Parametros de Salida

  Historia de Modificaciones
  Autor    Fecha       Descripcion
************************************************************************/
 IS

  Cursor CuValda(nuAnio Number,nuMes NUMBER) IS
    SELECT b.cicofein FechaIni,b.cicofech FechaFin
      FROM ldc_ciercome B
        WHERE
          B.CICOANO= nuAnio AND
          B.CICOMES=nuMes;

  TYPE tyResultado IS TABLE OF CuValda%ROWTYPE INDEX BY BINARY_INTEGER;

  vtyResultado tyResultado;

begin

      OPEN CuValda(nuAnio,nuMes);
      FETCH CuValda BULK COLLECT INTO vtyResultado;
      CLOSE CuValda;

      IF (vtyResultado.count > 0) THEN
          FOR i IN vtyResultado.First..vtyResultado.Last LOOP
          daFechaIni:=to_char(vtyResultado(i).FechaIni);
          daFechaFin:=to_char(vtyResultado(i).FechaFin);
          END LOOP;
      ELSE
            LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'fvaGetFechaCierre No se puede obtener Fechas para cierre comercial en el a?o :['||nuAnio||'] y mes ['||nuMes||'] valide la tabla LDC_CIERCOME',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
            RETURN -1;
      END IF;
    RETURN 0;
    EXCEPTION
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'fvaGetFechaCierre Error No se puede obtener Rango de Fechas [fvaGetFechaCierre] - '||ldci_pkinterfazsap.vaCODINTINTERFAZ||' Mes  ['||nuMes||' A?o ['||nuAnio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
  END fvaGetFechaCierre;

 function fvaGetRegAnioMes (nuAnio   in NUMBER,
                         nuMes in NUMBER,
                         sbTipInter in VARCHAR2)
  return NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetRegInter
     AUTOR     : Oscar Restrepo
     FECHA     : 01-11-2013
     DESCRIPCION  : PETI
                    funcion que se encarga de validar si una interfaz ya se envio
                    a SAP para un mes y a?o especificado.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  IS

  nuCantidad NUMBER;

  CURSOR cuRegistraInterfaz IS
    SELECT count(*) VALOR
      FROM LDCI_REGISTRAINTERFAZ
        WHERE
          LDANOCONTABI=nuAnio AND
          LDMESCONTAB=nuMes AND
          LDFLAGCONTABI='S' AND
          LDTIPOINTERFAZ=sbTipInter;

BEGIN

   OPEN cuRegistraInterfaz;
   FETCH cuRegistraInterfaz INTO nuCantidad;
   CLOSE cuRegistraInterfaz;

    IF (nuCantidad=0) THEN
        RETURN 0; --Si no se ha enviado a SAP la interfaz para ese a?o y mes.
    ELSE
        RETURN 1; --Si ya se envio a SAP la interfaz para ese a?o y mes.
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Ya exste una interfaz enviada a SAP [fvaGetRegInter] Tipo - '||ldci_pkinterfazsap.vaCODINTINTERFAZ||'para el  Mes  ['||nuMes||'y el  A?o ['||nuAnio||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
END fvaGetRegAnioMes;


  FUNCTION fvaGetRegFecha (daFechaFin   in Date,
                         vaTipInter in VARCHAR2)

  return NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetRegInter
     AUTOR     : Oscar Restrepo
     FECHA     : 01-11-2013
     DESCRIPCION  : PETI
                    funcion que se encarga de validar si una interfaz ya se envio
                    a SAP para un mes y a?o especificado.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  IS

  nuCantidad NUMBER;

  CURSOR cuRegistraInterfaz IS
    SELECT count(*) VALOR
      FROM LDCI_REGISTRAINTERFAZ
        WHERE
          TRUNC(ldfechconta)=daFechaFin AND
          LDFLAGCONTABI='S' AND
          LDTIPOINTERFAZ=vaTipInter;

BEGIN

   OPEN cuRegistraInterfaz;
   FETCH cuRegistraInterfaz INTO nuCantidad;
   CLOSE cuRegistraInterfaz;

    IF (nuCantidad=0) THEN
        RETURN 0; --Si no se ha enviado a SAP la interfaz para ese a?o y mes.
    ELSE
        RETURN 1; --Si ya se envio a SAP la interfaz para ese a?o y mes.
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Ya exste una interfaz enviada a SAP [fvaGetRegInter] Tipo - '||ldci_pkinterfazsap.vaCODINTINTERFAZ||'para la fecha  ['||daFechaFin,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
END fvaGetRegFecha;


FUNCTION fnuRegistraInterfaz(vaLDCODINTERF  in LDCI_REGISTRAINTERFAZ.LDCODINTERF%type,
                daLDFECHCONTA in LDCI_REGISTRAINTERFAZ.LDFECHCONTA%type,
                vaLDFLAGCONTABI in LDCI_REGISTRAINTERFAZ.LDFLAGCONTABI%type,
                vaLDTIPOINTERFAZ in LDCI_REGISTRAINTERFAZ.LDTIPOINTERFAZ%type)
  return NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuRegistraInterfaz
     AUTOR     : Oscar Restrepo
     FECHA     : 01-11-2013
     DESCRIPCION  : PETI
                    funcion que se encarga registrar el  envio de una interfaz
                    a SAP para un mes y a?o especificado.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  IS
  nuLDANOCONTABI LDCI_REGISTRAINTERFAZ.LDANOCONTABI%type;
  nuLDMESCONTAB  LDCI_REGISTRAINTERFAZ.LDMESCONTAB%type;
BEGIN

  nuLDANOCONTABI :=TO_CHAR(daLDFECHCONTA,'YYYY');
  nuLDMESCONTAB :=TO_CHAR(daLDFECHCONTA,'MM');

    INSERT INTO LDCI_REGISTRAINTERFAZ (LDCODINTERF,LDANOCONTABI,LDMESCONTAB,LDFECHCONTA, LDFLAGCONTABI, LDTIPOINTERFAZ,FECHAUPDATE)
    VALUES (vaLDCODINTERF,nuLDANOCONTABI,nuLDMESCONTAB,daLDFECHCONTA,vaLDFLAGCONTABI,vaLDTIPOINTERFAZ,SYSDATE);
    -- Asienta registros
    COMMIT;

  RETURN 0;
  EXCEPTION
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Ya exste una interfaz enviada a SAP [fvaGetRegInter] Tipo - '||ldci_pkinterfazsap.vaCODINTINTERFAZ||'para la fecha  ['||daLDFECHCONTA,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
END fnuRegistraInterfaz;

FUNCTION fnuRegistraInterfazAnioMes(vaLDCODINTERF  in LDCI_REGISTRAINTERFAZ.LDCODINTERF%type,
                daANIO in LDCI_REGISTRAINTERFAZ.LDANOCONTABI%type,
                daMES in LDCI_REGISTRAINTERFAZ.LDMESCONTAB%type,
                vaLDFLAGCONTABI in LDCI_REGISTRAINTERFAZ.LDFLAGCONTABI%type,
                vaLDTIPOINTERFAZ in LDCI_REGISTRAINTERFAZ.LDTIPOINTERFAZ%type)
  return NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuRegistraInterfazAnioMes
     AUTOR     : Oscar Restrepo
     FECHA     : 01-12-2013
     DESCRIPCION  : PETI
                    funcion que se encarga registrar el  envio de una interfaz
                    a SAP para un mes y a?o especificado.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  IS
BEGIN

    INSERT INTO LDCI_REGISTRAINTERFAZ (LDCODINTERF,LDANOCONTABI,LDMESCONTAB,LDFECHCONTA, LDFLAGCONTABI, LDTIPOINTERFAZ,FECHAUPDATE)
    VALUES (vaLDCODINTERF,daANIO,daMES,SYSDATE,vaLDFLAGCONTABI,vaLDTIPOINTERFAZ,SYSDATE);
    -- Asienta registros
    COMMIT;

  RETURN 0;
  EXCEPTION
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Ya exste una interfaz enviada a SAP [fvaGetRegInter] Tipo - '||ldci_pkinterfazsap.vaCODINTINTERFAZ||'para el A?o  ['||daANIO||'] Mes :['||daMes||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
END fnuRegistraInterfazAnioMes;


FUNCTION fnuGetLocalidadBansucu(vaBanco in varchar2,vaSucursal in varchar2,inVanuLocalidad OUT VARCHAR2)
  return NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGetLocalidadBansucu
     AUTOR     : Oscar Restrepo
     FECHA     : 01-11-2013
     DESCRIPCION  : PETI
                    funcion que se encarga de obtener la localida para
                    el El NIT del Banco de Transacci?n, en la interfaz
                    de control Reintegro.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  IS
   CURSOR cuobtLocalidad
    IS
      select to_char(NVL(geograp_location_id,null)) localidad
        from SUCUBANC,AB_ADDRESS
          where ltrim(rtrim(SUBABANC))=ltrim(rtrim(vaBanco)) and ltrim(rtrim(SUBACODI))=ltrim(rtrim(vaSucursal))
             and SUCUBANC.SUBAADID=ADDRESS_ID;

    vaNitRec Varchar2(200);
    vaLocalidad Varchar2(200);
BEGIN


          OPEN cuobtLocalidad ;
          FETCH cuobtLocalidad INTO vaLocalidad;
          CLOSE cuobtLocalidad;

          IF (vaLocalidad is null) THEN
               LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'El Banco de Transacci?n ['||vaBanco||'] con la sucursal ['||vaSucursal||'] No tiene Localidad, Validar en las tablas : suscripc, ge_subscriber',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
               return -1;
          ELSE
              inVanuLocalidad :=vaLocalidad;
              return 0;
          END IF;

  EXCEPTION
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error obteniendo la localidad [fnuGetLocalidad] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
END fnuGetLocalidadBansucu;


FUNCTION fnuGetLocalidad(vaDcrcinad in ic_decoreco.DCRCINAD%type, inVanuLocalidad OUT VARCHAR2)
  return NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGetLocalidad
     AUTOR     : Oscar Restrepo
     FECHA     : 01-11-2013
     DESCRIPCION  : PETI
                    funcion que se encarga de obtener la localida para
                    el El NIT del Banco de Transacci?n, en la interfaz
                    de control Reintegro.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  IS
   CURSOR cuobtLocalidad (nuNit Varchar2)
    IS


    SELECT to_char(NVL(geograp_location_id,null)) local FROM ab_address WHERE address_id
    IN (SELECT ADDRESS_ID FROM ge_subscriber where identification=nuNit);

    vaNitRec Varchar2(200);
    vaLocalidad Varchar2(200);
BEGIN
vaNitRec:=null;
vaLocalidad:=null;

        vaNitRec:=vaDcrcinad;
        IF (vaNitRec is null) THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No tiene El NIT del Banco de Transacci?n (Campo 34 DCRCINAD)',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        return -1;
        ELSE

          OPEN cuobtLocalidad (vaNitRec);
          FETCH cuobtLocalidad INTO vaLocalidad;
          CLOSE cuobtLocalidad;

          IF (vaLocalidad is null) THEN
               LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'El NIT del Banco de Transacci?n ['||vaNitRec||'] No tiene Localidad, Validar en las tablas : suscripc, ge_subscriber',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
               return -1;
          ELSE
              inVanuLocalidad :=vaLocalidad;
              return 0;
          END IF;

        END IF;
  EXCEPTION
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error obteniendo la localidad [fnuGetLocalidad] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
END fnuGetLocalidad;

function fnuValidaCtaBanco (nuCOD_CLASIFCONTA   in ldci_encaintesap.COD_CLASIFCONTA%type,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE)
return number
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuValidaCtaBanco
     AUTOR     : Oscar Restrepo
     FECHA     : 01-11-2013
     DESCRIPCION  : PETI
                    funcion que se encarga de validar si una cuenta es de banco
                    esto se hace si la cuenta esta en latabla ldci_ctacadmin
                    y tiene clasificador -1

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  IS
   CURSOR cuValidaCtaBanco
    IS
    select NVL(count(*),0) cant from ldci_ctacadmi
      where CTCACODI=vaCLASECTA and ctaclco=-1;

nuCantidad NUMBER;
BEGIN

          OPEN cuValidaCtaBanco;
          FETCH cuValidaCtaBanco INTO nuCantidad;
          CLOSE cuValidaCtaBanco;

          IF (nuCantidad =0) THEN
               return nuCOD_CLASIFCONTA;
          ELSE
               return 0;
          END IF;

  EXCEPTION
    WHEN OTHERS THEN
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Error obteniendo la localidad [fnuGetLocalidad] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
          return -1;
END fnuValidaCtaBanco;


FUNCTION fnuLDCI_INCOLIQUACTA(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME  VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA  VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                        nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%type)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQUACTA
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor       Fecha       Descripcion
    cgonzalezv  27-08-2014  Se crea el parametro ASIGNITANTICIPO para
                            determinar si en el campo asignacion va el nuemro del anticipo o el NIT
                            segun el criterio de cada Distribuidora
  ************************************************************************/
  sbLEDGERS LDCI_INCOLIQU.LEDGERS%type;
  vaCentBen ldci_centrobenef.cebecodi%TYPE;
  sbOrdInt VARCHAR2(100);
  nuCategoria NUMBER;
  sbDescripcionNit VARCHAR2(200);
  fbFECHBASE date;
  sbEsDivergente VARCHAR2(2);
  vaOrdenInterna LDCI_CENCOUBGTRA.ccbgorin%TYPE;
  vaCentroCosto LDCI_CENCOUBGTRA.ccbgceco%TYPE;
  nuNIT VARCHAR2(100);
  nuRes NUMBER;
  nuValorImpt NUMBER;
  nuValorImptIva NUMBER;
  sbSegmento  ldci_centrobenef.cebesegm%TYPE;
  vaOrdenIntact LDCI_ACTIUBGTTRA.acbgorin%TYPE;
  vaActivo LDCI_ACTIUBGTTRA.acbgacti%TYPE;
  vaSubnumero LDCI_ACTIUBGTTRA.acbgsubn%TYPE;
  vaCLASECTACTI ldci_incoliqu.clasecta%TYPE;
  vaOrEsta ldci_incoliqu.ordenint%TYPE;
  vaCTADIVDef ldci_incoliqu.clasecta%TYPE;
  VaClaveDef  ldci_incoliqu.clavcont%TYPE;

  --<<
  --aranda 4212
  osbErrorMessage      VARCHAR2(2000); -- Variable de error requerida para obtener el valor de un parametro
  vaplicareglanticipo  VARCHAR2(1);    -- Variable requerida para obtener si aplica o no la regla S/N
  vaNitAnticipo        VARCHAR2(10);   -- Variable requerida para almacenar el NIT o Codigo del Anticipo
  --

  BEGIN
        sbLEDGERS := fsbGetLedgers(nuICLITIDO, nuComprobante);
        vaCentBen := ldci_pkinterfazsap.vaCentBen;

        -- 27-08-2015 Aranda 4212 cgonzalev se crea el parametro ASIGNITANTICIPO para
        -- determinar si en el campo asignacion va el nuemro del anticipo o el NIT
        -- segun el criterio de cada Distribuidora
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'ASIGNITANTICIPO', vaplicareglanticipo, osbErrorMessage);

        --<<
        --Se Obtiene la Categoria con Base en la Localidad
        -->>
       -- nuCategoria :=Nvl(ldci_pkinterfazsap.fvaGetData(5,dcrcinad,'|'),NULL);
        IF vaCentBen IS NULL  THEN
            vaCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebenew(ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'), -1),0);
        END IF;

        --<<
        --se adiciona la validacion para el tema de IFRS
        -->>
        IF (ldci_pkinterfazsap.nuCODDOCUINTEINGRSAP = ldci_pkinterfazsap.vaInterInversion AND Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL) <> 23) THEN
            Dbms_Output.Put_Line('el acta es de tipo '||nuICLITIDO);
            Dbms_Output.Put_Line('el parametro es de tipo '||ldci_pkinterfazsap.vaInterInversion);
            --sbOrdInt:=ldci_pkinterfazactas.fvaGetOICos(nuCategoria,nuCentBen);

            nuRes:=ldci_pkinterfazsap.fvaGetActivo(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                               Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL),vaActivo, vaSubnumero,vaOrdenIntact);


            vaCLASECTACTI := vaActivo||'-'||vaSubnumero;
            vaOrEsta := vaOrdenIntact;
            vaCTADIVDef := vaCLASECTA;
            VaClaveDef := ldci_pkinterfazsap.fvaGetClaveContaCu(vaCLASECTA,ldci_pkinterfazsap.vaSigno);
        ELSE
            --sbOrdInt:=ldci_pkinterfazactas.fvaGetOICos(nuCategoria,nuCentBen);
            nuRes:=ldci_pkinterfazsap.fvaGetOICos(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                               Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL), Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL),
                                               vaCentroCosto,vaOrdenInterna);
            vaCLASECTACTI := vaCLASECTA;
            vaOrEsta := vaOrdenInterna;
            VaClaveDef := vaCLAVCONT;
            vaCTADIVDef := vaCTADIV;
        END IF;

        sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(ldci_pkinterfazsap.vaNit);

        --aranda 4212, valida si aplica en en campo asigancion el numero de anticipo
        vaNitAnticipo := NULL;

        IF vaplicareglanticipo = 'S' AND ldci_pkinterfazsap.vaNitAnti IS NOT NULL THEN
           -- Codigo de anticipo
           vaNitAnticipo := ldci_pkinterfazsap.vaNitAnti;

        ELSE
           -- NIT contratista
           vaNitAnticipo := ldci_pkinterfazsap.vaNit;

        END IF;
        --

        nuValorImpt := 0;
        nuValorImptIva := 0;

        IF vaINDRETEC IS NOT NULL THEN
            IF ',' || ldci_pkinterfazsap.vaItemsReteIva || ',' LIKE '%,' || ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|') || ',%'  THEN
                IF ldci_pkinterfazsap.vaSigno = 'D' THEN
                    nuValorImpt := round(nuIMPOMTRX/(To_Number(ldci_pkinterfazsap.vaReteIva)/100)) *-1;
                ELSE
                    nuValorImpt := round(nuIMPOMTRX/(To_Number(ldci_pkinterfazsap.vaReteIva)/100));
                END IF;
            ELSE
                IF ldci_pkinterfazsap.vaSigno = 'D'  THEN
                    nuValorImpt := To_Number(ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|'))*-1;
                ELSE
                    nuValorImpt := To_Number(ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|'));
                END IF;
            END IF;
        ELSE
          nuValorImpt := NULL;
        END IF;

      IF ldci_pkinterfazsap.fvaGetData(47,dcrcinad,'|') = 'IVA' AND SubStr(vaCLASECTA,0,2) = '24' THEN
          nuValorImptIva := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');
      END IF;

     sbSegmento:=nvl(fvaGetSegmento(vaCentBen),0);

    if (vtyLDCI_INCOLIQU.count = 0) then
        ldci_pkinterfazsap.nuIncoliqu := 1;
    ELSE
        ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
    END IF;


    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO := nuICLITIDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO := nuICLINUDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH := dtICLIFECH;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA := vaICLIUSUA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM := vaICLITERM;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR := dtICLIFECR;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF := vaCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA := nuCOD_CLASIFCONTA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT := VaClaveDef;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA := vaCLASECTACTI;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN := vaNitAnticipo; --Aranda 4212 cgonzalezv NIT o Codigo de Anticipo
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 := ldci_pkinterfazsap.vaNit;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 := sbDescripcionNit;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV   := vaCTADIVDef;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME := vaINDICCME;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX := nuIMPOMTRX;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC := nuIMPOMSOC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA := vaINDICIVA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO := ldci_pkinterfazsap.vaCODPAGO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE := trunc(sysdate);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := ldci_pkinterfazsap.vaFactura;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := Trunc(nuValorImptIva);--ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO := vaCentroCosto;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT := vaOrEsta;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD := nuCANTIDAD;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN := vaTXTPOSCN;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE := vaCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO := sbSegmento;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO := vaOBJCOSTO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 := vaCLAVREF2;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL := vaSOCIEDGL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL := vaMATERIAL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC := vaTIPORETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC := vaINDRETEC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC := nuValorImpt ;--nuBASERETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE := nuNUSEINSE;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR :=TRUNC(sysdate);
    --<<
    --Campos que se obtienen desde el campo vtyDatIngresos(i).dcrcinad
    -->>
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNINEGO:=Nvl(ldci_pkinterfazsap.fvaGetData(1,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IDENTIFI:=Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITTERCE:=nuNIT;--Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CATEGORI:=nuCategoria;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUBCATEG:=ldci_pkinterfazsap.fvaGetData(6,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCRECA:=Nvl(ldci_pkinterfazsap.fvaGetData(7,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCTRAN:=Nvl(ldci_pkinterfazsap.fvaGetData(8,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EDADEUDA:=Nvl(ldci_pkinterfazsap.fvaGetData(9,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOSERV:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NIPRESTA:=Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOCART:=Nvl(ldci_pkinterfazsap.fvaGetData(12,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONCILIA:=Nvl(ldci_pkinterfazsap.fvaGetData(13,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DOCSOPOR:=Nvl(ldci_pkinterfazsap.fvaGetData(14,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG1:=ldci_pkinterfazsap.fvaGetData(15,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG2:=ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG3:=ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG4:=ldci_pkinterfazsap.fvaGetData(18,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG5:=ldci_pkinterfazsap.fvaGetData(19,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ANIO:=ldci_pkinterfazsap.fvaGetData(20,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MES:=ldci_pkinterfazsap.fvaGetData(21,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRSERV:=ldci_pkinterfazsap.fvaGetData(22,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRRECA:=ldci_pkinterfazsap.fvaGetData(23,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CICLFACT:=ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRFACT:=ldci_pkinterfazsap.fvaGetData(25,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRCICL:=ldci_pkinterfazsap.fvaGetData(26,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLDOCPAG:=ldci_pkinterfazsap.fvaGetData(28,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUCBANC:=ldci_pkinterfazsap.fvaGetData(29,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNIDCONS:=ldci_pkinterfazsap.fvaGetData(31,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DIASPROV:=ldci_pkinterfazsap.fvaGetData(32,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANRE:=ldci_pkinterfazsap.fvaGetData(34,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPBANRE:=ldci_pkinterfazsap.fvaGetData(35,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANTR:=ldci_pkinterfazsap.fvaGetData(36,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CUPON:=Nvl(ldci_pkinterfazsap.fvaGetData(37,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITCAJER:=ldci_pkinterfazsap.fvaGetData(38,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB:=Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CAULEGAL:=Nvl(ldci_pkinterfazsap.fvaGetData(41,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).PROYECTO:=Nvl(ldci_pkinterfazsap.fvaGetData(43,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPUNIOP:=Nvl(ldci_pkinterfazsap.fvaGetData(44,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ENTCONCI:=Nvl(ldci_pkinterfazsap.fvaGetData(45,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE:= nuComprobante;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS:= sbLEDGERS;

  return(0);
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQU] - No se pudieron almacenar los registros en la tabla LDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuLDCI_INCOLIQUACTA;

  FUNCTION fnuLDCI_INCOLIQUACTACOSTO( nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                                      nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                                      dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                                      vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                                      vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                                      dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                                      nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                                      vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                                      vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                                      vaINDICCME  VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                                      nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                                      nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                                      vaINDICIVA  VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                                      nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                                      vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                                      vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                                      vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                                      vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                                      vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                                      vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                                      vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                                      nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                                      nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                                      vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                                      vaCECO     in LDCI_INCOLIQU.CENTROCO%type,
                                      dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                                      nuComprobante IN LDCI_INCOLIQU.comprobante%type)
  RETURN NUMBER
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQUACTACOSTO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 01-07-2014
     DESCRIPCION  : Copia de la funci?n: fnuLDCI_INCOLIQUACTA

                    Funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor       Fecha       Descripcion
    cgonzalezv  28-08-2014  Se crea el parametro ASIGNITANTICIPO para
                            determinar si en el campo asignacion va el nuemro del anticipo o el NIT
                            segun el criterio de cada Distribuidora
    heiberb     10-11-2015  SAO 350458 se realiza el cambio de tipo de dato a la variable
                            vaNitAnticipo ajustandolo al tama?o del campo de la tabla
                            ldci_detaintesap.Asignacn%type;
    Horbath     21-06-2021  CA-376 Distribucion del costo de generacion de factura y reparto de factura, 
                            entre GAS y FNB.
                            Porcentaje Generacion FNB 10%
                            Porcentaje Reparto FNB 14%
                            En esta funcion se incluye el CECO como parametro, para validar si viene NULL 
                            o trae informacion, si trae es el CECO para FNB, si no debe buscarlo porque
                            es GAS.                            
  ************************************************************************/
  sbLEDGERS LDCI_INCOLIQU.LEDGERS%type;
  vaCentBen ldci_centrobenef.cebecodi%TYPE;
  sbOrdInt VARCHAR2(100);
  nuCategoria NUMBER;
  sbDescripcionNit VARCHAR2(200);
  fbFECHBASE date;
  sbEsDivergente VARCHAR2(2);
  vaOrdenInterna LDCI_CENCOUBGTRA.ccbgorin%TYPE;
  vaCentroCosto LDCI_CENCOUBGTRA.ccbgceco%TYPE;
  nuNIT VARCHAR2(100);
  nuRes NUMBER;
  nuValorImpt NUMBER;
  nuValorImptIva NUMBER;
  sbSegmento  ldci_centrobenef.cebesegm%TYPE;
  vaOrdenIntact LDCI_ACTIUBGTTRA.acbgorin%TYPE;
  vaActivo LDCI_ACTIUBGTTRA.acbgacti%TYPE;
  vaSubnumero LDCI_ACTIUBGTTRA.acbgsubn%TYPE;
  vaCLASECTACTI ldci_incoliqu.clasecta%TYPE;
  vaOrEsta ldci_incoliqu.ordenint%TYPE;
  vaCTADIVDef ldci_incoliqu.clasecta%TYPE;
  VaClaveDef  ldci_incoliqu.clavcont%TYPE;

  -- Variables
  -->>
  nuClasiCodi   ic_clascott.clctclco%TYPE;    -- Clasificador contable
  vaNomAtrAct   VARCHAR2(200);                -- Nombre del atributo de activos en las ordenes de trabajo

  --<<
  -- Cursor para obtener el activo asociado como dato adicional a la orden de trabajo
  -->>
  CURSOR cuActivo(nuOrdetrab  or_order.order_id%TYPE)
  IS
  SELECT orv.value_1
    FROM or_requ_data_value orv
   WHERE orv.name_1   = vaNomAtrAct
     AND orv.order_id = nuOrdetrab;

   --<< CA 200-1301
   -- Ludycom 20-10-2017
   -- Cursor para obtener la base de las retenciones para las actas de comision.
   -->>
   Cursor CuIngresoRet IS
    SELECT (SUM(gd.valor_total)) valor
     FROM ge_detalle_acta gd, ge_items gi, OR_ORDER OT, ge_acta ga, ge_contrato gc, ge_contratista gco, ge_subscriber gs
    WHERE gd.id_acta = to_number(substr(vaTXTPOSCN,6,6))
      AND gd.id_items = gi.items_id
      AND OT.order_id = GD.ID_ORDEN
      AND gd.id_acta = ga.id_acta
      AND ga.id_contrato = gc.id_contrato
      AND gc.id_contratista = gco.id_contratista
      AND gs.subscriber_id = gco.SUBSCRIBER_ID
      AND gi.item_classif_id not in (SELECT item_classif_id
                                       FROM ge_item_classif
                                      WHERE ',' || ldci_pkinterfazsap.vaClasitem23 || ',' LIKE
                                             '%,' || item_classif_id || ',%')
      AND ldci_pkinterfazactas.fvaGetClasifi(ot.task_type_id)
          NOT IN (SELECT clcocodi FROM ic_clascont
                   WHERE ',' || ldci_pkinterfazsap.vaClasiIvaRec || ',' LIKE '%,' || clcocodi || ',%')
      AND gd.valor_total <> 0
      AND ga.id_tipo_acta = 2; -- Comisiones FNB
      --
      VaBaseFNB   ldci_incoliqu.baseretc%TYPE;
      -->>


  --<<
  --aranda 4212
  osbErrorMessage      VARCHAR2(2000); -- Variable de error requerida para obtener el valor de un parametro
  vaplicareglanticipo  VARCHAR2(1);    -- Variable requerida para obtener si aplica o no la regla S/N
-->>
--heiberb     10-11-2015   SAO 350458 se realiza el cambio de tipo de dato a la variable
--                          vaNitAnticipo ajustandolo al tama?o del campo de la tabla
--                          ldci_detaintesap.Asignacn%type;
--<<
  vaNitAnticipo        ldci_detaintesap.asignacn%type;   -- Variable requerida para almacenar el NIT o Codigo del Anticipo
  --

  BEGIN

    --<<
    -- Dcardona:
    -- 08/07/2014
    -- Se agrega el nuevo par?metro de clasificadores de activos
    -->>
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CLASIACTIVOS', ldci_pkinterfazsap.vaClasiActivos, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'NOMB_ATRIB_ACTIVO_OT', vaNomAtrAct, osbErrorMessage);

        sbLEDGERS := fsbGetLedgers(nuICLITIDO, nuComprobante);
        vaCentBen := ldci_pkinterfazsap.vaCentBen;

        -- 27-08-2015 Aranda 4212 cgonzalev se crea el parametro ASIGNITANTICIPO para
        -- determinar si en el campo asignacion va el nuemro del anticipo o el NIT
        -- segun el criterio de cada Distribuidora
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'ASIGNITANTICIPO', vaplicareglanticipo, osbErrorMessage);
        --<<
        -- Dcardona:
        -- 01/07/2014
        -- Se cambia le llamado de la funci?n fvaGetCebeNew por fvaGetCebeNoCat, la cual no solicita categor?a
        -->>
        IF vaCentBen IS NULL  THEN
            vaCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebeNoCat(ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|')),0);
        END IF;

        --<<
        -- Dcardona:
        -- 09/07/2014
        -- Se obtiene el clasificador a partir del tipo de trabajo
        -->>
        nuClasiCodi := ldci_pkinterfazactas.fvaGetClasifi(Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL));

        --<<
        -- Se obtiene el activo a partir de la orden de trabajo
        -->>
        OPEN cuActivo(ldci_pkinterfazsap.fvaGetData(50,dcrcinad,'|'));
        FETCH cuActivo INTO vaActivo;
        CLOSE cuActivo;

        --<<
        --se adiciona la validacion para el tema de IFRS
        -->>
        IF (','||ldci_pkinterfazSap.vaClasiActivos||',' LIKE '%,' ||nuClasiCodi|| ',%'
            AND Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL) <> 23) THEN

            Dbms_Output.Put_Line('el acta es de tipo '||nuICLITIDO);
            Dbms_Output.Put_Line('el parametro es de tipo '||ldci_pkinterfazsap.vaInterInversion);

            --<<
            --heiberb - 05-03-2015 -- se ajusta para que cuando no tenga el activo de la OT lo traiga de la configuracion maestra
            -->>

            if vaActivo is null then

            nuRes:=ldci_pkinterfazsap.fvaGetActivo(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                               Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL),vaActivo, vaSubnumero,vaOrdenIntact);

            else

            nuRes:=ldci_pkinterfazsap.fvaGetActivoRO(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                               Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL),vaActivo, vaSubnumero,vaOrdenIntact);

            end if;


            vaCLASECTACTI := vaActivo||'-'||vaSubnumero;
            vaOrEsta := vaOrdenIntact;
            vaCTADIVDef := vaCLASECTA;
            VaClaveDef := ldci_pkinterfazsap.fvaGetClaveContaCu(vaCLASECTA,ldci_pkinterfazsap.vaSigno);
            vaCentroCosto  := NULL;
            vaOrdenInterna := NULL;

        ELSIF (','||ldci_pkinterfazSap.vaClasiActivos||',' LIKE '%,' ||nuClasiCodi|| ',%'
            AND Nvl(ldci_pkinterfazsap.fvaGetData(47,dcrcinad,'|'),null) = 'IVA') THEN

            if ldci_pkinterfazsap.vacuentaIvaIFRS is null then

              if vaActivo is null then

              nuRes:=ldci_pkinterfazsap.fvaGetActivo(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                                 Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL),vaActivo, vaSubnumero,vaOrdenIntact);
              else

              nuRes:=ldci_pkinterfazsap.fvaGetActivoRO(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                               Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL),vaActivo, vaSubnumero,vaOrdenIntact);

              end if;

              vaCLASECTACTI := vaActivo||'-'||vaSubnumero;
              vaOrEsta := vaOrdenIntact;
              vaCTADIVDef := vaCLASECTA;
              VaClaveDef := ldci_pkinterfazsap.fvaGetClaveContaCu(vaCLASECTA,ldci_pkinterfazsap.vaSigno);
              vaCentroCosto  := NULL;
              vaOrdenInterna := NULL;

            else

              vaCLASECTACTI := vaCLASECTA;
              vaOrEsta := vaOrdenInterna;
              VaClaveDef := vaCLAVCONT;
              vaCTADIVDef := vaCTADIV;
              vaCentroCosto  := NULL;
              vaOrdenInterna := NULL;

            end if;

        ELSIF (','||ldci_pkinterfazSap.vaClasiActivos||',' NOT LIKE '%,' ||nuClasiCodi|| ',%'
            AND Nvl(ldci_pkinterfazsap.fvaGetData(47,dcrcinad,'|'),null) = 'IVA') THEN
            --<<
            -- Dcardona:
            -- 01/07/2014
            -- Se diferencia de la funci?n original porque en lugar de fvaGetOICos se invoca el m?todo fvaGetOICECO
            -- que no solicita Item
            -->>
            
            -- <<
            -- CA-376
            --
            If vaCECO IS NULL Then
              nuRes:=ldci_pkinterfazsap.fvaGetOICECO(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                                     Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL), vaCentroCosto, vaOrdenInterna);
            Else
              vaCentroCosto := vaCECO;
            END IF;
            -- CA-376
            -->>
            
            vaCLASECTACTI := vaCLASECTA;
            vaOrEsta := vaOrdenInterna;
            VaClaveDef := vaCLAVCONT;
            vaCTADIVDef := vaCTADIV;


         ELSIF (','||ldci_pkinterfazSap.vaClasiActivos||',' NOT LIKE '%,' ||nuClasiCodi|| ',%'
            AND Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL) <> 23) THEN
            --<<
            -- Dcardona:
            -- 01/07/2014
            -- Se diferencia de la funci?n original porque en lugar de fvaGetOICos se invoca el m?todo fvaGetOICECO
            -- que no solicita Item
            -->>
            
            --<<
            -- CA-376
            If vaCECO IS NULL Then
              nuRes:=ldci_pkinterfazsap.fvaGetOICECO(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                                     Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL), vaCentroCosto, vaOrdenInterna);
            ELSE
              vaCentroCosto := vaCECO;
            END IF;
            -- CA-376
            -->>              
            vaCLASECTACTI := vaCLASECTA;
            vaOrEsta := vaOrdenInterna;
            VaClaveDef := vaCLAVCONT;
            vaCTADIVDef := vaCTADIV;

        else
            --<<
            -- Dcardona:
            -- 01/07/2014
            -- Se diferencia de la funci?n original porque en lugar de fvaGetOICos se invoca el m?todo fvaGetOICECO
            -- que no solicita Item
            -->>
            vaCLASECTACTI := vaCLASECTA;
            vaOrEsta := vaOrdenInterna;
            VaClaveDef := vaCLAVCONT;
            vaCTADIVDef := vaCTADIV;
            vaCentroCosto  := NULL;
            vaOrdenInterna := NULL;

        END IF;

        sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(ldci_pkinterfazsap.vaNit);

        --aranda 4212, valida si aplica en en campo asigancion el numero de anticipo
        vaNitAnticipo := NULL;

        IF vaplicareglanticipo = 'S' AND ldci_pkinterfazsap.vaNitAnti IS NOT NULL THEN
           -- Codigo de anticipo
           vaNitAnticipo := ldci_pkinterfazsap.vaNitAnti;

        ELSE
           -- NIT contratista
           vaNitAnticipo := ldci_pkinterfazsap.vaNit;

        END IF;
        --


        nuValorImpt := 0;
        nuValorImptIva := 0;

        IF vaINDRETEC IS NOT NULL THEN
            IF ',' || ldci_pkinterfazsap.vaItemsReteIva || ',' LIKE '%,' || ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|') || ',%'  THEN
                IF ldci_pkinterfazsap.vaSigno = 'D' THEN
                    nuValorImpt := round(nuIMPOMTRX/(To_Number(ldci_pkinterfazsap.vaReteIva)/100)) *-1;
                ELSE
                    nuValorImpt := round(nuIMPOMTRX/(To_Number(ldci_pkinterfazsap.vaReteIva)/100));
                END IF;
            ELSE

                IF ldci_pkinterfazsap.vaSigno = 'D'  THEN
                    nuValorImpt := To_Number(ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|'))*-1;
                ELSE
                    nuValorImpt := To_Number(ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|'));
                END IF;

                --<<
                -- CA - 200-1301
                -- Ludycom 20-10-2017
                --
                IF vaCLASECTA in ('2436950100','2436950200') AND nvl(nuValorImpt, 0) = 0 THEN
                    --
                    -- Se obtiene el activo a partir de la orden de trabajo
                    --
                    OPEN CuIngresoRet;
                    FETCH CuIngresoRet INTO VaBaseFNB;
                    CLOSE CuIngresoRet;
                    --
                    nuValorImpt := VaBaseFNB;
                    --
                END IF;
                --
                -->>
            END IF;
        ELSE
          nuValorImpt := NULL;
        END IF;

      IF ldci_pkinterfazsap.fvaGetData(47,dcrcinad,'|') = 'IVA' AND SubStr(vaCLASECTA,0,2) = '24' THEN
          nuValorImptIva := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');
      END IF;

     sbSegmento:=nvl(fvaGetSegmento(vaCentBen),0);

    if (vtyLDCI_INCOLIQU.count = 0) then
        ldci_pkinterfazsap.nuIncoliqu := 1;
    ELSE
        ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
    END IF;


    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO := nuICLITIDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO := nuICLINUDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH := dtICLIFECH;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA := vaICLIUSUA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM := vaICLITERM;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR := dtICLIFECR;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF := vaCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA := nuCOD_CLASIFCONTA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT := VaClaveDef;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA := vaCLASECTACTI;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN := vaNitAnticipo; --Aranda 4212 cgonzalezv NIT o Codigo de Anticipo
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 := ldci_pkinterfazsap.vaNit;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 := sbDescripcionNit;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV   := vaCTADIVDef;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME := vaINDICCME;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX := nuIMPOMTRX;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC := nuIMPOMSOC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA := vaINDICIVA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO := ldci_pkinterfazsap.vaCODPAGO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE := trunc(sysdate);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := ldci_pkinterfazsap.vaFactura;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := Trunc(nuValorImptIva);--ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO := vaCentroCosto;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT := vaOrEsta;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD := nuCANTIDAD;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN := vaTXTPOSCN;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE := vaCentBen;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO := sbSegmento;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO := vaOBJCOSTO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 := vaCLAVREF2;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL := vaSOCIEDGL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL := vaMATERIAL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC := vaTIPORETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC := vaINDRETEC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC := nuValorImpt ;--nuBASERETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE := nuNUSEINSE;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR :=TRUNC(sysdate);
    --<<
    --Campos que se obtienen desde el campo vtyDatIngresos(i).dcrcinad
    -->>
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNINEGO:=Nvl(ldci_pkinterfazsap.fvaGetData(1,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IDENTIFI:=Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITTERCE:=nuNIT;--Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CATEGORI:=nuCategoria;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUBCATEG:=ldci_pkinterfazsap.fvaGetData(6,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCRECA:=Nvl(ldci_pkinterfazsap.fvaGetData(7,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCTRAN:=Nvl(ldci_pkinterfazsap.fvaGetData(8,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EDADEUDA:=Nvl(ldci_pkinterfazsap.fvaGetData(9,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOSERV:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NIPRESTA:=Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOCART:=Nvl(ldci_pkinterfazsap.fvaGetData(12,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONCILIA:=Nvl(ldci_pkinterfazsap.fvaGetData(13,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DOCSOPOR:=Nvl(ldci_pkinterfazsap.fvaGetData(14,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG1:=ldci_pkinterfazsap.fvaGetData(15,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG2:=ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG3:=ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG4:=ldci_pkinterfazsap.fvaGetData(18,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG5:=ldci_pkinterfazsap.fvaGetData(19,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ANIO:=ldci_pkinterfazsap.fvaGetData(20,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MES:=ldci_pkinterfazsap.fvaGetData(21,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRSERV:=ldci_pkinterfazsap.fvaGetData(22,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRRECA:=ldci_pkinterfazsap.fvaGetData(23,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CICLFACT:=ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRFACT:=ldci_pkinterfazsap.fvaGetData(25,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRCICL:=ldci_pkinterfazsap.fvaGetData(26,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLDOCPAG:=ldci_pkinterfazsap.fvaGetData(28,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUCBANC:=ldci_pkinterfazsap.fvaGetData(29,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNIDCONS:=ldci_pkinterfazsap.fvaGetData(31,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DIASPROV:=ldci_pkinterfazsap.fvaGetData(32,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANRE:=ldci_pkinterfazsap.fvaGetData(34,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPBANRE:=ldci_pkinterfazsap.fvaGetData(35,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANTR:=ldci_pkinterfazsap.fvaGetData(36,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CUPON:=Nvl(ldci_pkinterfazsap.fvaGetData(37,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITCAJER:=ldci_pkinterfazsap.fvaGetData(38,dcrcinad,'|');
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB:=Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CAULEGAL:=Nvl(ldci_pkinterfazsap.fvaGetData(41,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).PROYECTO:=Nvl(ldci_pkinterfazsap.fvaGetData(43,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPUNIOP:=Nvl(ldci_pkinterfazsap.fvaGetData(44,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ENTCONCI:=Nvl(ldci_pkinterfazsap.fvaGetData(45,dcrcinad,'|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL);
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE:= nuComprobante;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS:= sbLEDGERS;

  return(0);
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQUACTACOSTO] - No se pudieron almacenar los registros en la tabla LDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuLDCI_INCOLIQUACTACOSTO;

  FUNCTION fnuLDCI_INCOLIQU_PROVCARTERA(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME  VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA  VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaCbene IN LDCI_INCOLIQU.CENTROBE%TYPE,
                        vaCcosto IN LDCI_INCOLIQU.centroco%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        sbSegmento VARCHAR2,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%TYPE,
                        sbLEDGERS   in LDCI_INCOLIQU.LEDGERS%type,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE)
  return number
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQU_PROVCARTERA
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/

  nuCentBen NUMBER;
  sbOrdInt VARCHAR2(100);
  nuCategoria NUMBER;
  sbDescripcionNit VARCHAR2(200);
  daFECHBASE date;
  sbEsDivergente VARCHAR2(2);
  nuNIT VARCHAR2(100);
  vaDesInterFaz VARCHAR2(100);
  nuClasificador NUMBER;
  nuTipoServicio NUMBER;
  nuCiclo        ciclo.ciclcodi%type;

  BEGIN


        --<<
        --Se Obtiene la Categoria con Base en la Localidad
        -->>
        nuCategoria 	:=Nvl(ldci_pkinterfazsap.fvaGetData(5,dcrcinad,'|'),NULL);
        nuCentBen		:=vaCbene;
		nuTipoServicio 	:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
		nuCiclo			:=Nvl(ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|'),NULL);

		-- Aranda 7100
		if pktblsistema.fsbgetsistnitc(99) = dald_parameter.fsbgetvalue_chain('LDC_ORDEN_INTERNA_PROD_GENE') then
			sbOrdInt	:=ldci_pkinterfazsap.fvaValidaGetOI(nuTipoServicio,nuCategoria,nuCOD_CLASIFCONTA,nuCiclo);
		else
			sbOrdInt	:=ldci_pkinterfazsap.fvaGetOI(nuCategoria,nuCOD_CLASIFCONTA);
		end if;

        sbEsDivergente:=fnuGetDivergente(vaCLAVCONT);


        if(nuCentBen=0) then
          LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Interfaz ['||nuICLINUDO||'] No se puede obtener el Centro de Beneficio para la localidad  :['||ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|')||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        end if;

                 --<<
                 --Se agrupan los clasificadores para distinguir la interfaz
                 -->>
                 IF(nuTipoServicio =7055 OR nuTipoServicio = 7056) THEN --BRILLA
                    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_BRILLA', nuNIT, osbErrorMessage);
                    vaDesInterFaz:='PROV_BRILLA';
                    nuClasificador := 3;
                 ELSIF(nuTipoServicio =7052) THEN --KIT
                    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_KIT', nuNIT, osbErrorMessage);
                    vaDesInterFaz:='PROV_KIT';
                    nuClasificador := 2;
                   ELSE                  --OTRO
                      LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'NIT_GENERAL', nuNIT, osbErrorMessage);
                      vaDesInterFaz:='PROV ';
                      nuClasificador := 1;
                 END IF;
                 --Clasificadores Contables que estan en cada Grupo
                 --BRILLA ,2,58,60,
                 --KIT ,9,57,65,

                 --El resultado del clasificador que agrupa es _
                 --BRILLA = 3
                 --KIT = 2
                 --OTRO = 1


                  nuNIT:=replace(nuNIT,'-','');
                  sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(nuNIT);


      IF (vtyLDCI_INCOLIQU.count = 0) then
          ldci_pkinterfazsap.nuIncoliqu := 1;
      ELSE
          ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
      END IF;

      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO := nuICLITIDO;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO := nuICLINUDO;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH := dtICLIFECH;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA := vaICLIUSUA;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM := vaICLITERM;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR := dtICLIFECR;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF := nuCentBen;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA := nuClasificador;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT := vaCLAVCONT;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA := vaCLASECTA;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN := nuNIT;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 := nuNIT;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 := sbDescripcionNit;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV   := '';
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME := vaINDICCME;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX := nuIMPOMTRX;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC := nuIMPOMSOC;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA := vaINDICIVA;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO := Nvl(ldci_pkinterfazsap.fvaGetData(27,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE := trunc(sysdate);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := ldci_pkinterfazsap.fvaGetData(42,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO := vaCcosto;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT := NULL;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD := nuCANTIDAD;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN := vaDesInterFaz||vaTXTPOSCN;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE := nuCentBen;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO := sbSegmento;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO := vaOBJCOSTO;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 := vaCLAVREF2;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL := vaSOCIEDGL;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL := vaMATERIAL;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC := vaTIPORETC;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC := '';
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC := '';
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE := nuNUSEINSE;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR :=TRUNC(sysdate);
      --<<
      --Campos que se obtienen desde el campo vtyDatIngresos(i).dcrcinad
      -->>
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNINEGO:=Nvl(ldci_pkinterfazsap.fvaGetData(1,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IDENTIFI:=Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITTERCE:=nuNIT;--Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CATEGORI:=nuCategoria;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUBCATEG:=ldci_pkinterfazsap.fvaGetData(6,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCRECA:=Nvl(ldci_pkinterfazsap.fvaGetData(7,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCTRAN:=Nvl(ldci_pkinterfazsap.fvaGetData(8,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EDADEUDA:=Nvl(ldci_pkinterfazsap.fvaGetData(9,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOSERV:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NIPRESTA:=Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOCART:=Nvl(ldci_pkinterfazsap.fvaGetData(12,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONCILIA:=Nvl(ldci_pkinterfazsap.fvaGetData(13,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DOCSOPOR:=Nvl(ldci_pkinterfazsap.fvaGetData(14,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG1:=ldci_pkinterfazsap.fvaGetData(15,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG2:=ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG3:=ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG4:=ldci_pkinterfazsap.fvaGetData(18,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG5:=ldci_pkinterfazsap.fvaGetData(19,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ANIO:=ldci_pkinterfazsap.fvaGetData(20,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MES:=ldci_pkinterfazsap.fvaGetData(21,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRSERV:=ldci_pkinterfazsap.fvaGetData(22,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRRECA:=ldci_pkinterfazsap.fvaGetData(23,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CICLFACT:=ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRFACT:=ldci_pkinterfazsap.fvaGetData(25,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRCICL:=ldci_pkinterfazsap.fvaGetData(26,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLDOCPAG:=ldci_pkinterfazsap.fvaGetData(28,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUCBANC:=ldci_pkinterfazsap.fvaGetData(29,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNIDCONS:=ldci_pkinterfazsap.fvaGetData(31,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DIASPROV:=ldci_pkinterfazsap.fvaGetData(32,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANRE:=ldci_pkinterfazsap.fvaGetData(34,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPBANRE:=ldci_pkinterfazsap.fvaGetData(35,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANTR:=ldci_pkinterfazsap.fvaGetData(36,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CUPON:=Nvl(ldci_pkinterfazsap.fvaGetData(37,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITCAJER:=ldci_pkinterfazsap.fvaGetData(38,dcrcinad,'|');
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB:=Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CAULEGAL:=Nvl(ldci_pkinterfazsap.fvaGetData(41,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).PROYECTO:=Nvl(ldci_pkinterfazsap.fvaGetData(43,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPUNIOP:=Nvl(ldci_pkinterfazsap.fvaGetData(44,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ENTCONCI:=Nvl(ldci_pkinterfazsap.fvaGetData(45,dcrcinad,'|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL);
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE := nuComprobante;
      vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS := sbLEDGERS;

  return(0);
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQU_PROVCARTERA] - No se pudieron almacenar los registros en la tabla LDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuLDCI_INCOLIQU_PROVCARTERA;

/*FUNCTION fvaGetCebeNew (inuceloloca   in LDCI_CENTBENELOCA.celoloca%TYPE,
                       inucatecodi   IN LDCI_CENTBENELOCA.celocate%TYPE)
  return VARCHAR2
  is
  \************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetCebe
     AUTOR     : Heiber Barco
     FECHA     : 06-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener el centro de beneficio apartir de localidad.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************\
  CURSOR cuGetCeBE IS
   SELECT celocebe
      FROM LDCI_CENTBENELOCA, ldci_centrobenef
     WHERE celoloca = inuceloloca
       AND celocate = Decode(inucatecodi, -1, 1, inucatecodi)
       AND cebecodi = celocebe;



   vaCeBe LDCI_CENTBENELOCA.celocebe%TYPE;

  begin

  OPEN cuGetCeBE;
  FETCH cuGetCeBE INTO vaCeBe;
  CLOSE cuGetCeBE;


     RETURN vaCeBe;
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetCebe] - No se pudo obtener el CEBE. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return('-1');
  end fvaGetCebeNew;
*/

FUNCTION fvaGetCebeNew (inuceloloca   in LDCI_CENTBENELOCA.celoloca%TYPE,
                       inucatecodi   IN LDCI_CENTBENELOCA.celocate%TYPE)
  return VARCHAR2
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetCebe
     AUTOR     : Heiber Barco
     FECHA     : 06-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener el centro de beneficio apartir de localidad.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuGetCeBE IS
   SELECT celocebe
      FROM LDCI_CENTBENELOCA, ldci_centrobenef
     WHERE celoloca = inuceloloca
       AND celocate = Decode(inucatecodi, -1, 1, inucatecodi)
       AND cebecodi = celocebe;

  CURSOR cuGetCeBENC IS
   SELECT celocebe
      FROM LDCI_CENTBENELOCAL, ldci_centrobenef
     WHERE celoloca = inuceloloca
       AND cebecodi = celocebe;

  cursor cuSistema is
   select sistnitc from sistema;

   vaCeBe LDCI_CENTBENELOCA.celocebe%TYPE;
   vaCeBeNC LDCI_CENTBENELOCA.celocebe%TYPE;
   vaCeBeDef LDCI_CENTBENELOCA.celocebe%TYPE;
   osbErrorMessage varchar2(2000);
   vaNit  varchar2(2000);
   vaNitP  varchar2(2000);

  begin

  ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'NITGDO', vaNitP, osbErrorMessage);

  OPEN cuGetCeBE;
  FETCH cuGetCeBE INTO vaCeBe;
  CLOSE cuGetCeBE;

  OPEN cuGetCeBENC;
  FETCH cuGetCeBENC INTO vaCeBeNC;
  CLOSE cuGetCeBENC;

  open cuSistema;
  fetch cuSistema into vaNit;
  close cuSistema;

  if vaNitP <> vaNit then

     vaCeBeDef := vaCeBeNC;

  else

     vaCeBeDef := vaCeBe;

  end if;

   RETURN vaCeBeDef;

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetCebe] - No se pudo obtener el CEBE. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return('-1');
  end fvaGetCebeNew;

  FUNCTION fvaGetCebeNoCat(inuceloloca   IN ldci_centbenelocal.celoloca%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetCebeNoCat
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 01-07-2014
     DESCRIPCION  : Copia de la funcion fvaGetCebeNew pero sin categor?a.
                    Funcion que se encarga de obtener el centro de beneficio apartir de localidad.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  RETURN VARCHAR2
  IS

    CURSOR cuGetCeBE
    IS
    SELECT celocebe
      FROM ldci_centbenelocal
     WHERE celoloca = inuceloloca;

    vaCeBe ldci_centbenelocal.celocebe%TYPE;

  BEGIN

    OPEN cuGetCeBE;
    FETCH cuGetCeBE INTO vaCeBe;
    CLOSE cuGetCeBE;

    RETURN vaCeBe;

  EXCEPTION
  WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetCebeNoCat] - No se pudo obtener el CEBE. '||SQLERRM||' '||DBMS_UTILITY.format_error_backtrace;
       ldci_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCodintinterfaz,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return('-1');
  END fvaGetCebeNoCat;

  FUNCTION fvaGetOICos (inudeparta  in ldci_cencoubgtra.ccbgdpto%TYPE,
                        inulocalid  IN ldci_cencoubgtra.ccbgloca%TYPE,
                        inutipotra  IN ldci_cencoubgtra.ccbgtitr%TYPE,
                        inuitem     IN ldci_cencoubgtra.ccbgitem%TYPE,
                        ovacecost   OUT ldci_cencoubgtra.ccbgceco%TYPE,
                        ovaordein   OUT ldci_cencoubgtra.ccbgorin%TYPE)
  return NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetOICos
     AUTOR     : Heiber Barco
     FECHA     : 17-10-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la orden interna y ceco
                    por localidad, item y tipo de trabajo

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/

  is
     cursor cuOrdenInterna
     is
     select * from LDCI_CENCOUBGTRA
     where ccbgdpto = inudeparta
       AND ccbgloca = inulocalid
       AND ccbgtitr = inutipotra
       AND ccbgitem = inuitem;

     rgLDCI_CENCOUBGTRA   LDCI_CENCOUBGTRA%rowtype;

  begin

     open cuOrdenInterna;
     fetch cuOrdenInterna into rgLDCI_CENCOUBGTRA;
     close cuOrdenInterna;

     ovacecost := rgLDCI_CENCOUBGTRA.ccbgceco;
     ovaordein := rgLDCI_CENCOUBGTRA.ccbgorin;

     return(0);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetOICos] - No se pudo obtener La Orden Interna. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fvaGetOICos;


  FUNCTION fvaGetOICECO(inudeparta  IN ldci_cencoubgtra.ccbgdpto%TYPE,
                        inulocalid  IN ldci_cencoubgtra.ccbgloca%TYPE,
                        inutipotra  IN ldci_cencoubgtra.ccbgtitr%TYPE,
                        ovacecost   OUT ldci_cencoubgtra.ccbgceco%TYPE,
                        ovaordein   OUT ldci_cencoubgtra.ccbgorin%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetOICECO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 17-10-2014
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la orden interna y ceco
                    por localidad y tipo de trabajo

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  RETURN NUMBER
  IS

     CURSOR cuOrdenInterna
     IS
     SELECT * FROM ldci_cecoubigetra
     WHERE ccbgdpto = inudeparta
       AND ccbgloca = inulocalid
       AND ccbgtitr = inutipotra;

     rgLdci_cecoubigetra   Ldci_cecoubigetra%ROWTYPE;

  BEGIN

     OPEN cuOrdenInterna;
     FETCH cuOrdenInterna INTO rgLDCI_CECOUBIGETRA;
     CLOSE cuOrdenInterna;

     ovacecost := rgLDCI_CECOUBIGETRA.ccbgceco;
     ovaordein := rgLDCI_CECOUBIGETRA.ccbgorin;

     RETURN(0);

  EXCEPTION
  WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetOICECO] - No se pudo obtener La Orden Interna. '||SQLERRM||' '||DBMS_UTILITY.format_error_backtrace;
       ldci_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCodintinterfaz,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       RETURN(-1);
  END fvaGetOICECO;


  FUNCTION fvaGetCuenTipoContrato (inuidtipocontr IN ldci_ctatipcontr.idtipocontr%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetCuenTipoContrato
     AUTOR     : Heiber Barco
     FECHA     : 17-10-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la cuenta por pagar

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  return VARCHAR
  is
     cursor cuCuentaPagar
     is
     select * from LDCI_CTATIPCONTR
     where idtipocontr = inuidtipocontr;

     rgcuCuentaPagar   LDCI_CTATIPCONTR%rowtype;
     vaCuenta          LDCI_CTACADMI.ctcacodi%TYPE;
  begin

     open cuCuentaPagar;
     fetch cuCuentaPagar into rgcuCuentaPagar;
     close cuCuentaPagar;

     vaCuenta := rgcuCuentaPagar.ctapagar;

     return(vaCuenta);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetCuenTipoContrato] - No se pudo obtener La cuenta por pagar '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return('-1');
  end fvaGetCuenTipoContrato;

  FUNCTION fnuGetTipoContrato (inuidcontr IN ge_contrato.id_contrato%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetTipoContrato
     AUTOR     : Heiber Barco
     FECHA     : 17-10-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener el tipo de contrato

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  return NUMBER
  is
     cursor cuContrato
     is
     select * from ge_contrato
     where id_contrato = inuidcontr;

     rgcuContrato   ge_contrato%rowtype;
     nuidtipocontrat ge_contrato.id_tipo_contrato%TYPE;
  begin

     open cuContrato;
     fetch cuContrato into rgcuContrato;
     close cuContrato;

     nuidtipocontrat := rgcuContrato.id_tipo_contrato;

     return(nuidtipocontrat);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuGetCuenTipoContrato] - No se pudo obtener La cuenta por pagar '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuGetTipoContrato;

  FUNCTION  fnuValidaCuenta (ivacutacontable ldci_cuentacontable.cuctcodi%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuValidaCuenta
     AUTOR     : Heiber Barco
     FECHA     : 17-10-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de validar la cuenta

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  return NUMBER
  is
     cursor cuCuentas
     is
     select * from ldci_cuentacontable
     where cuctcodi = ivacutacontable;

     rgcuCuentas   ldci_cuentacontable%rowtype;
  BEGIN
           ldci_pkinterfazsap.vaMensError :=  '[fnuValidaCuenta] - Valida La cuenta '||ivacutacontable;
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.nuCODDOCUINTEINGRSAP,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));

     open cuCuentas;
     fetch cuCuentas into rgcuCuentas;


     if (cuCuentas%notfound) then

         ldci_pkinterfazsap.vaMensError :=  '[fnuValidaCuenta] - No Existe La cuenta '||ivacutacontable;
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.nuCODDOCUINTEINGRSAP,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
         close cuCuentas;
         return(-1);
     end if;

     close cuCuentas;

     return(0);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuValidaCuenta] - No se pudo obtener La cuenta '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.nuCODDOCUINTEINGRSAP,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuValidaCuenta;

function fnuAjusteInterCont(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%TYPE)
return NUMBER
/************************************************************************
   PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
   FUNCION   : fnuAjusteInterCont
   AUTOR     : Oscar Restrepo
   FECHA     : 24-10-2013
   DESCRIPCION  : PETI
                  funcion que se encarga de hacer ajuste al peso en la interfaz contable

  Parametros de Entrada

  Parametros de Salida

  Historia de Modificaciones
  Autor    Fecha       Descripcion
************************************************************************/

is
   CURSOR cuValidaDocumento IS
    select sum(decode(l.clavoper, 'S', d.impomtrx, 'H', -d.impomtrx)) valor, d.num_documentosap num_documentosap
      from LDCI_DETAINTESAP d, ldci_claveconta l
     where cod_interfazldc = nuICLINUDO
       and l.clavcodi = d.clavcont
  group by d.num_documentosap
  HAVING sum(decode(l.clavoper, 'S', d.impomtrx, 'H', -d.impomtrx)) <> 0;

  CURSOR cuObtieneRegistro (vaclave LDCI_DETAINTESAP.clavcont%TYPE,
                            inudocumentosap LDCI_DETAINTESAP.num_documentosap%type)IS
    SELECT *
      FROM LDCI_DETAINTESAP
      WHERE cod_interfazldc = nuICLINUDO
        AND clavcont in (vaclave, '70', '75')
        AND num_documentosap = inudocumentosap
        AND ROWNUM = 1;

  CURSOR cuObtieneRegistroIn (vaclave LDCI_DETAINTESAP.clavcont%TYPE,
                              inuimpomtrx LDCI_DETAINTESAP.impomtrx%TYPE,
                              ivacebe LDCI_DETAINTESAP.centrobe%TYPE)IS
    SELECT *
      FROM LDCI_INCOLIQU
      WHERE iclinudo = nuICLINUDO
        AND clavcont in (vaclave, '70', '75')
       -- AND impomtrx = inuimpomtrx
        AND centrobe = ivacebe
        AND ROWNUM = 1;


vaclave40 ldci_claveconta.clavcodi%TYPE;
vaclave50 ldci_claveconta.clavcodi%TYPE;
vaClaveDef ldci_claveconta.clavcodi%TYPE;
vaCuentaSob ldci_cuentacontable.cuctcodi%TYPE;
valormax VARCHAR2(2000);
nuValor   LDCI_INCOLIQU.impomtrx%TYPE;

nuComodin NUMBER;
vaComodin VARCHAR2(2000);
nuCantidadP NUMBER;
recuObtieneRegistro  cuObtieneRegistro%ROWTYPE;
recuObtieneRegistroIn  cuObtieneRegistroIn%ROWTYPE;

begin

  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CLAVE40', vaclave40, osbErrorMessage);
  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CLAVE50', vaclave50, osbErrorMessage);
  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CUENTASOBRANTE', vaCuentaSob, osbErrorMessage);
  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'NUMAXINTERPESOS', valormax, osbErrorMessage);

 nuValor :=  To_Number(valormax);

   FOR rgcuValidaDocumento IN cuValidaDocumento LOOP

    IF (nuValor >= Abs(rgcuValidaDocumento.valor)) THEN
         ldci_pkinterfazsap.vaMensError :=  '[fnuAjusteInterCont] - Requiere Ajuste por '||rgcuValidaDocumento.valor;
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.nuCODDOCUINTEINGRSAP,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));

        IF (rgcuValidaDocumento.valor > 0) THEN

        vaClaveDef := vaclave50;

        ELSE

        vaClaveDef := vaclave40;

        END IF;

        OPEN cuObtieneRegistro(vaClaveDef, rgcuValidaDocumento.num_documentosap);
        FETCH cuObtieneRegistro INTO recuObtieneRegistro;
        CLOSE cuObtieneRegistro;

        OPEN cuObtieneRegistroIn(vaClaveDef, recuObtieneRegistro.impomtrx, recuObtieneRegistro.centrobe);
        FETCH cuObtieneRegistroIn INTO recuObtieneRegistroIn;
        CLOSE cuObtieneRegistroIn;

        INSERT INTO LDCI_DETAINTESAP
        (cod_interfazldc, num_documentosap, clavcont, clasecta, indiccme, impomtrx, impomsoc, indiciva,
        condpago, fechbase, reffactr, baseimpt, centroco, ordenint, cantidad, asignacn, txtposcn,
        centrobe, segmento, objcosto, clavref1, clavref2, clavref3, sociedgl, material, tiporetc,
        indretec, baseretc, fechvalor, ctadiv, cod_centrobenef, cod_clasifconta, identificador)
        VALUES(nuICLINUDO, recuObtieneRegistro.NUM_DOCUMENTOSAP,
        vaClaveDef, vaCuentaSob, null,
        Abs(rgcuValidaDocumento.valor), Abs(rgcuValidaDocumento.valor), 'A0',
        recuObtieneRegistro.condpago, recuObtieneRegistro.FECHBASE, recuObtieneRegistro.REFFACTR,
        0, null, null,
        recuObtieneRegistro.CANTIDAD, recuObtieneRegistro.asignacn, recuObtieneRegistro.txtposcn,
        recuObtieneRegistro.centrobe, recuObtieneRegistro.segmento, recuObtieneRegistro.objcosto,
        recuObtieneRegistro.clavref1, recuObtieneRegistro.clavref2, recuObtieneRegistro.clavref3,
        recuObtieneRegistro.SOCIEDGL, recuObtieneRegistro.MATERIAL, null,
        null, 0, recuObtieneRegistro.FECHVALOR,
        null, recuObtieneRegistro.COD_CENTROBENEF,
        recuObtieneRegistro.COD_CLASIFCONTA,recuObtieneRegistro.identificador);

        INSERT INTO LDCI_INCOLIQU (iclitido, iclinudo, iclifech, icliusua, icliterm, iclifecr, clavcont, clasecta, indiccme, impomtrx, impomsoc, indiciva, condpago, fechbase,
        reffactr, baseimpt, ordenint, cantidad, asignacn, txtposcn, centrobe, segmento, objcosto, clavref1, clavref2, clavref3, sociedgl, material, tiporetc, indretec, baseretc,
        nuseinse, cod_centrobenef, cod_clasifconta, fechvalor, ctadiv, uninego, identifi, centroco, nitterce, categori, subcateg, bancreca, banctran, edadeuda, tiposerv, nipresta,
        tipocart, concilia, docsopor, ubigeog1, ubigeog2, ubigeog3, ubigeog4, ubigeog5, anio, mes, emprserv, emprreca, ciclfact, emprfact, emprcicl, cldocpag, sucbanc, unidcons,
        diasprov, nitbanre, tipbanre, nitbantr, cupon, nitcajer, tipotrab, clasitem, caulegal, proyecto, tipuniop, entconci, item, comprobante)
        VALUES(recuObtieneRegistroIn.ICLITIDO, nuICLINUDO, recuObtieneRegistroIn.ICLIFECH,
        recuObtieneRegistroIn.ICLIUSUA, recuObtieneRegistroIn.ICLITERM, recuObtieneRegistroIn.ICLIFECR,
        vaClaveDef, vaCuentaSob, null,
        Abs(rgcuValidaDocumento.valor), Abs(rgcuValidaDocumento.valor), 'A0',
        recuObtieneRegistroIn.condpago, recuObtieneRegistroIn.FECHBASE, recuObtieneRegistroIn.REFFACTR,
        0, null, null,
        recuObtieneRegistroIn.ASIGNACN, recuObtieneRegistroIn.TXTPOSCN,
        recuObtieneRegistroIn.CENTROBE, recuObtieneRegistroIn.SEGMENTO, null,
        recuObtieneRegistroIn.clavref1, null, recuObtieneRegistroIn.clavref3,
        null, null, null,
        null, 0, 1,
        recuObtieneRegistroIn.COD_CENTROBENEF, recuObtieneRegistroIn.COD_CLASIFCONTA,
        recuObtieneRegistroIn.FECHVALOR, recuObtieneRegistroIn.CTADIV,recuObtieneRegistroIn.UNINEGO,
        recuObtieneRegistroIn.IDENTIFI,recuObtieneRegistroIn.CENTROCO,recuObtieneRegistroIn.NITTERCE,
        recuObtieneRegistroIn.CATEGORI,recuObtieneRegistroIn.SUBCATEG,
        recuObtieneRegistroIn.BANCRECA,recuObtieneRegistroIn.BANCTRAN,recuObtieneRegistroIn.EDADEUDA,
        recuObtieneRegistroIn.TIPOSERV,recuObtieneRegistroIn.NIPRESTA,recuObtieneRegistroIn.TIPOCART,
        recuObtieneRegistroIn.CONCILIA,recuObtieneRegistroIn.DOCSOPOR,recuObtieneRegistroIn.UBIGEOG1,
        recuObtieneRegistroIn.UBIGEOG2,recuObtieneRegistroIn.UBIGEOG3,recuObtieneRegistroIn.UBIGEOG4,
        recuObtieneRegistroIn.UBIGEOG5,recuObtieneRegistroIn.ANIO,recuObtieneRegistroIn.MES,
        recuObtieneRegistroIn.EMPRSERV,recuObtieneRegistroIn.EMPRRECA,recuObtieneRegistroIn.CICLFACT,
        recuObtieneRegistroIn.EMPRFACT,recuObtieneRegistroIn.EMPRCICL,recuObtieneRegistroIn.CLDOCPAG,
        recuObtieneRegistroIn.SUCBANC,recuObtieneRegistroIn.UNIDCONS,recuObtieneRegistroIn.DIASPROV,
        recuObtieneRegistroIn.NITBANRE,recuObtieneRegistroIn.TIPBANRE,recuObtieneRegistroIn.NITBANTR,
        recuObtieneRegistroIn.CUPON,recuObtieneRegistroIn.NITCAJER,recuObtieneRegistroIn.TIPOTRAB,
        recuObtieneRegistroIn.CLASITEM,recuObtieneRegistroIn.CAULEGAL,recuObtieneRegistroIn.PROYECTO,
        recuObtieneRegistroIn.TIPUNIOP,recuObtieneRegistroIn.ENTCONCI,recuObtieneRegistroIn.ITEM,
        recuObtieneRegistroIn.COMPROBANTE);
    -- Asienta registros
    COMMIT;

    END IF;

   END LOOP;

return 0;

exception
when others THEN
ldci_pkinterfazsap.vaMensError :=  '[fnuAjusteInterCont] - No se pudo ajustar el documento '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
     return(-1);
end fnuAjusteInterCont;


function fnuAjusteInterContRO(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%TYPE)
return NUMBER
/************************************************************************
   PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
   FUNCION   : fnuAjusteInterCont
   AUTOR     : Oscar Restrepo
   FECHA     : 24-10-2013
   DESCRIPCION  : PETI
                  funcion que se encarga de hacer ajuste al peso en la interfaz contable

  Parametros de Entrada

  Parametros de Salida

  Historia de Modificaciones
  Autor    Fecha       Descripcion
************************************************************************/

is
   CURSOR cuValidaDocumento IS
    select sum(decode(l.clavoper, 'S', d.impomtrx, 'H', -d.impomtrx)) valor, d.num_documentosap num_documentosap
      from LDCI_DETAINTESAP d, ldci_claveconta l
     where cod_interfazldc = nuICLINUDO
       and l.clavcodi = d.clavcont
  group by d.num_documentosap
  HAVING sum(decode(l.clavoper, 'S', d.impomtrx, 'H', -d.impomtrx)) <> 0;

  CURSOR cuObtieneRegistro (vaclave LDCI_DETAINTESAP.clavcont%TYPE,
                            inudocumentosap LDCI_DETAINTESAP.num_documentosap%type)IS
    SELECT *
      FROM LDCI_DETAINTESAP
      WHERE cod_interfazldc = nuICLINUDO
       -- AND clavcont in (vaclave, '70', '75')
        AND num_documentosap = inudocumentosap
        AND ROWNUM = 1;

  CURSOR cuObtieneRegistroIn (vaclave LDCI_DETAINTESAP.clavcont%TYPE,
                              inuimpomtrx LDCI_DETAINTESAP.impomtrx%TYPE,
                              ivacebe LDCI_DETAINTESAP.centrobe%TYPE)IS
    SELECT *
      FROM LDCI_INCOLIQU
      WHERE iclinudo = nuICLINUDO
     --   AND clavcont in (vaclave, '70', '75')
       -- AND impomtrx = inuimpomtrx
        AND centrobe = ivacebe
        AND ROWNUM = 1;


vaclave40 ldci_claveconta.clavcodi%TYPE;
vaclave50 ldci_claveconta.clavcodi%TYPE;
vaClaveDef ldci_claveconta.clavcodi%TYPE;
vaCuentaSob ldci_cuentacontable.cuctcodi%TYPE;
valormax VARCHAR2(2000);
nuValor   LDCI_INCOLIQU.impomtrx%TYPE;

nuComodin NUMBER;
vaComodin VARCHAR2(2000);
nuCantidadP NUMBER;
recuObtieneRegistro  cuObtieneRegistro%ROWTYPE;
recuObtieneRegistroIn  cuObtieneRegistroIn%ROWTYPE;

begin

  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CLAVE40', vaclave40, osbErrorMessage);
  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CLAVE50', vaclave50, osbErrorMessage);
  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CUENTASOBRANTE', vaCuentaSob, osbErrorMessage);
  LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'NUMAXINTERPESOS', valormax, osbErrorMessage);

 nuValor :=  To_Number(valormax);

   FOR rgcuValidaDocumento IN cuValidaDocumento LOOP

    IF (nuValor >= Abs(rgcuValidaDocumento.valor)) THEN
         ldci_pkinterfazsap.vaMensError :=  '[fnuAjusteInterCont] - Requiere Ajuste por '||rgcuValidaDocumento.valor;
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.nuCODDOCUINTEINGRSAP,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));

        IF (rgcuValidaDocumento.valor > 0) THEN

        vaClaveDef := vaclave50;

        ELSE

        vaClaveDef := vaclave40;

        END IF;

        OPEN cuObtieneRegistro(vaClaveDef, rgcuValidaDocumento.num_documentosap);
        FETCH cuObtieneRegistro INTO recuObtieneRegistro;
        CLOSE cuObtieneRegistro;

        OPEN cuObtieneRegistroIn(vaClaveDef, recuObtieneRegistro.impomtrx, recuObtieneRegistro.centrobe);
        FETCH cuObtieneRegistroIn INTO recuObtieneRegistroIn;
        CLOSE cuObtieneRegistroIn;

        INSERT INTO LDCI_DETAINTESAP
        (cod_interfazldc, num_documentosap, clavcont, clasecta, indiccme, impomtrx, impomsoc, indiciva,
        condpago, fechbase, reffactr, baseimpt, centroco, ordenint, cantidad, asignacn, txtposcn,
        centrobe, segmento, objcosto, clavref1, clavref2, clavref3, sociedgl, material, tiporetc,
        indretec, baseretc, fechvalor, ctadiv, cod_centrobenef, cod_clasifconta, identificador)
        VALUES(nuICLINUDO, recuObtieneRegistro.NUM_DOCUMENTOSAP,
        vaClaveDef, vaCuentaSob, null,
        Abs(rgcuValidaDocumento.valor), Abs(rgcuValidaDocumento.valor), 'A0',
        recuObtieneRegistro.condpago, recuObtieneRegistro.FECHBASE, recuObtieneRegistro.REFFACTR,
        0, null, null,
        recuObtieneRegistro.CANTIDAD, recuObtieneRegistro.asignacn, recuObtieneRegistro.txtposcn,
        recuObtieneRegistro.centrobe, recuObtieneRegistro.segmento, recuObtieneRegistro.objcosto,
        recuObtieneRegistro.clavref1, recuObtieneRegistro.clavref2, recuObtieneRegistro.clavref3,
        recuObtieneRegistro.SOCIEDGL, recuObtieneRegistro.MATERIAL, null,
        null, 0, recuObtieneRegistro.FECHVALOR,
        null, recuObtieneRegistro.COD_CENTROBENEF,
        recuObtieneRegistro.COD_CLASIFCONTA,recuObtieneRegistro.identificador);

        INSERT INTO LDCI_INCOLIQU (iclitido, iclinudo, iclifech, icliusua, icliterm, iclifecr, clavcont, clasecta, indiccme, impomtrx, impomsoc, indiciva, condpago, fechbase,
        reffactr, baseimpt, ordenint, cantidad, asignacn, txtposcn, centrobe, segmento, objcosto, clavref1, clavref2, clavref3, sociedgl, material, tiporetc, indretec, baseretc,
        nuseinse, cod_centrobenef, cod_clasifconta, fechvalor, ctadiv, uninego, identifi, centroco, nitterce, categori, subcateg, bancreca, banctran, edadeuda, tiposerv, nipresta,
        tipocart, concilia, docsopor, ubigeog1, ubigeog2, ubigeog3, ubigeog4, ubigeog5, anio, mes, emprserv, emprreca, ciclfact, emprfact, emprcicl, cldocpag, sucbanc, unidcons,
        diasprov, nitbanre, tipbanre, nitbantr, cupon, nitcajer, tipotrab, clasitem, caulegal, proyecto, tipuniop, entconci, item, comprobante)
        VALUES(recuObtieneRegistroIn.ICLITIDO, nuICLINUDO, recuObtieneRegistroIn.ICLIFECH,
        recuObtieneRegistroIn.ICLIUSUA, recuObtieneRegistroIn.ICLITERM, recuObtieneRegistroIn.ICLIFECR,
        vaClaveDef, vaCuentaSob, null,
        Abs(rgcuValidaDocumento.valor), Abs(rgcuValidaDocumento.valor), 'A0',
        recuObtieneRegistroIn.condpago, recuObtieneRegistroIn.FECHBASE, recuObtieneRegistroIn.REFFACTR,
        0, null, null,
        recuObtieneRegistroIn.ASIGNACN, recuObtieneRegistroIn.TXTPOSCN,
        recuObtieneRegistroIn.CENTROBE, recuObtieneRegistroIn.SEGMENTO, null,
        recuObtieneRegistroIn.clavref1, null, recuObtieneRegistroIn.clavref3,
        null, null, null,
        null, 0, 1,
        recuObtieneRegistroIn.COD_CENTROBENEF, recuObtieneRegistroIn.COD_CLASIFCONTA,
        recuObtieneRegistroIn.FECHVALOR, recuObtieneRegistroIn.CTADIV,recuObtieneRegistroIn.UNINEGO,
        recuObtieneRegistroIn.IDENTIFI,recuObtieneRegistroIn.CENTROCO,recuObtieneRegistroIn.NITTERCE,
        recuObtieneRegistroIn.CATEGORI,recuObtieneRegistroIn.SUBCATEG,
        recuObtieneRegistroIn.BANCRECA,recuObtieneRegistroIn.BANCTRAN,recuObtieneRegistroIn.EDADEUDA,
        recuObtieneRegistroIn.TIPOSERV,recuObtieneRegistroIn.NIPRESTA,recuObtieneRegistroIn.TIPOCART,
        recuObtieneRegistroIn.CONCILIA,recuObtieneRegistroIn.DOCSOPOR,recuObtieneRegistroIn.UBIGEOG1,
        recuObtieneRegistroIn.UBIGEOG2,recuObtieneRegistroIn.UBIGEOG3,recuObtieneRegistroIn.UBIGEOG4,
        recuObtieneRegistroIn.UBIGEOG5,recuObtieneRegistroIn.ANIO,recuObtieneRegistroIn.MES,
        recuObtieneRegistroIn.EMPRSERV,recuObtieneRegistroIn.EMPRRECA,recuObtieneRegistroIn.CICLFACT,
        recuObtieneRegistroIn.EMPRFACT,recuObtieneRegistroIn.EMPRCICL,recuObtieneRegistroIn.CLDOCPAG,
        recuObtieneRegistroIn.SUCBANC,recuObtieneRegistroIn.UNIDCONS,recuObtieneRegistroIn.DIASPROV,
        recuObtieneRegistroIn.NITBANRE,recuObtieneRegistroIn.TIPBANRE,recuObtieneRegistroIn.NITBANTR,
        recuObtieneRegistroIn.CUPON,recuObtieneRegistroIn.NITCAJER,recuObtieneRegistroIn.TIPOTRAB,
        recuObtieneRegistroIn.CLASITEM,recuObtieneRegistroIn.CAULEGAL,recuObtieneRegistroIn.PROYECTO,
        recuObtieneRegistroIn.TIPUNIOP,recuObtieneRegistroIn.ENTCONCI,recuObtieneRegistroIn.ITEM,
        recuObtieneRegistroIn.COMPROBANTE);
    -- Asienta registros
    COMMIT;

    END IF;

   END LOOP;

return 0;

exception
when others THEN
ldci_pkinterfazsap.vaMensError :=  '[fnuAjusteInterCont] - No se pudo ajustar el documento '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
     return(-1);
end fnuAjusteInterContRO;

FUNCTION fnuGeneDocuSapProv(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
  return number
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSapProv
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz de actas
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    cgonzalezv 23-11-2014  Metodo: fnuGeneDocuSapProv, Se modifica el valor del texto Encabezado
                           creando Por una varable global que Identifique si es
                           Provision o Reversion
  ************************************************************************/
  IS

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
     CURSOR cuAGRUPACION is
         SELECT ICLINUDO, comprobante
         FROM LDCI_INCOLIQU
         WHERE iclinudo = nuICLINUDO
         GROUP BY ICLINUDO, comprobante;

     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
     CURSOR cuLDCI_INCOLIQU IS
     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, SYSDATE FECHBASE, REFFACTR, Sum(BASEIMPT) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, round(Sum(BASERETC)) BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, SYSDATE FECHVALOR, CTADIV,round(sum(IMPOMTRX)) IMPOMTRX,
            round(sum(IMPOMSOC)) IMPOMSOC
       FROM LDCI_INCOLIQU
      WHERE ICLINUDO = nuICLINUDO
     GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, REFFACTR,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC,
            COD_CENTROBENEF, COD_CLASIFCONTA, CTADIV
      ORDER BY COD_CENTROBENEF;


     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     vaClave     LDCI_DETAPROVCOSTO.clavcont%TYPE := '0';
     nuIdentificador number;

  begin

    --<<
    --seleccion de datos de la agrupacion
    -->>
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop

        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        nuIndEnca := nuIndEnca + 1;
        sbIndice := vtycuAGRUPACION(j).ICLINUDO;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            nuIdentificador := seq_ldci_encaintesap.nextval;
            tbENCABEZADO(sbIndice) := nuIdentificador;
        END if;

       -- Obtiene Libro
       -- sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtycuAGRUPACION(j).comprobante);

        --<<
        --Insercion de datos en la tabla vtyldci_encaintesap
        -->>
        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                        nuIndEnca,
                                        null,
                                        null,
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        ldci_pkinterfazsap.vaGRLEDGER,
                                        nuICLINUDO,
                                        ldci_pkinterfazactas.gvProvRevCosto||'-'||nuICLINUDO,
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        ldci_pkinterfazsap.vaCURRENCY,
                                        nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>

       if (nuRet <> 0) then
            raise Error;
        end if;


        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>
        OPEN cuLDCI_INCOLIQU;
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        --<<
        --Saca los detalles de la interfaz por grupo por concepto
        -->>
        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP

          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    'INTERFAZ-'||nuICLINUDO,
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    -1,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>

          IF (nuRet <> 0) THEN

              RAISE ERROR;
          END IF;

         nuRet := ldci_pkinterfazsap.fnuldci_detaprovcosto(nuICLINUDO,
                                                nuIndEnca,
                                                vaClave,
                                                vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                vtycuLDCI_INCOLIQU(i).INDICCME,
                                                vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                'INTERFAZ-'||nuICLINUDO,
                                                vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                vtycuLDCI_INCOLIQU(i).BASERETC,
                                                vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                vtycuLDCI_INCOLIQU(i).CTADIV,
                                                vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                -1,
                                                ldci_pkinterfazsap.nuanoprovi,
                                                ldci_pkinterfazsap.numesprovi);
          --<<
          --Se lanza la Exepcion
          -->>

          IF (nuRet <> 0) THEN
              RAISE ERROR;
          END IF;


        END LOOP;

        --<<
        --Borrado de la tabla en memoria de ldc_incoliqu
        -->>
        vtycuLDCI_INCOLIQU.delete;

    END LOOP;
    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
       RAISE ERROR;
    END IF;


    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapProv] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         dbms_output.put_line('Error fnuGeneDocuSapProv :['||ldci_pkinterfazsap.vaMensError);
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapProv] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         dbms_output.put_line('Error fnuGeneDocuSapProv :['||ldci_pkinterfazsap.vaMensError);
         return(-1);
    END fnuGeneDocuSapProv;


FUNCTION fnuldci_detaprovcosto(NUCOD_INTERFAZLDC IN LDCI_DETAPROVCOSTO.COD_INTERFAZLDC%TYPE,
                            NUNUM_DOCUMENTOSAP IN LDCI_DETAPROVCOSTO.NUM_DOCUMENTOSAP%TYPE,
                            VACLAVCONT  IN LDCI_DETAPROVCOSTO.CLAVCONT%TYPE,
                            VACLASECTA  IN LDCI_DETAPROVCOSTO.CLASECTA%TYPE,
                            VAINDICCME  IN LDCI_DETAPROVCOSTO.INDICCME%TYPE,
                            NUIMPOMTRX  IN LDCI_DETAPROVCOSTO.IMPOMTRX%TYPE,
                            NUIMPOMSOC  IN LDCI_DETAPROVCOSTO.IMPOMSOC%TYPE,
                            VAINDICIVA  IN LDCI_DETAPROVCOSTO.INDICIVA%TYPE,
                            NUCONDPAGO  IN LDCI_DETAPROVCOSTO.CONDPAGO%TYPE,
                            DTFECHBASE  IN LDCI_DETAPROVCOSTO.FECHBASE%TYPE,
                            VAREFFACTR  IN LDCI_DETAPROVCOSTO.REFFACTR%TYPE,
                            NUBASEIMPT  IN LDCI_DETAPROVCOSTO.BASEIMPT%TYPE,
                            VACENTROCO  IN LDCI_DETAPROVCOSTO.CENTROCO%TYPE,
                            VAORDENINT  IN LDCI_DETAPROVCOSTO.ORDENINT%TYPE,
                            NUCANTIDAD  IN LDCI_DETAPROVCOSTO.CANTIDAD%TYPE,
                            VAASIGNACN  IN LDCI_DETAPROVCOSTO.ASIGNACN%TYPE,
                            VATXTPOSCN  IN LDCI_DETAPROVCOSTO.TXTPOSCN%TYPE,
                            VACENTROBE  IN LDCI_DETAPROVCOSTO.CENTROBE%TYPE,
                            VASEGMENTO  IN LDCI_DETAPROVCOSTO.SEGMENTO%TYPE,
                            VAOBJCOSTO  IN LDCI_DETAPROVCOSTO.OBJCOSTO%TYPE,
                            VACLAVREF1  IN LDCI_DETAPROVCOSTO.CLAVREF1%TYPE,
                            VACLAVREF2  IN LDCI_DETAPROVCOSTO.CLAVREF2%TYPE,
                            VACLAVREF3  IN LDCI_DETAPROVCOSTO.CLAVREF3%TYPE,
                            VASOCIEDGL  IN LDCI_DETAPROVCOSTO.SOCIEDGL%TYPE,
                            NUMATERIAL  IN LDCI_DETAPROVCOSTO.MATERIAL%TYPE,
                            VATIPORETC  IN LDCI_DETAPROVCOSTO.TIPORETC%TYPE,
                            VAINDRETEC  IN LDCI_DETAPROVCOSTO.INDRETEC%TYPE,
                            NUBASERETC  IN LDCI_DETAPROVCOSTO.BASERETC%TYPE,
                            DTFECHVALOR IN LDCI_DETAPROVCOSTO.FECHVALOR%TYPE,
                            VACTADIV    IN LDCI_DETAPROVCOSTO.CTADIV%TYPE,
                            NUCOD_CENTROBENEF IN LDCI_DETAPROVCOSTO.COD_CENTROBENEF%TYPE,
                            NUCOD_CLASIFCONTA  IN LDCI_DETAPROVCOSTO.COD_CLASIFCONTA%TYPE,
                            NUANO       IN LDCI_DETAPROVCOSTO.ANO%TYPE,
                            NUMES       IN LDCI_DETAPROVCOSTO.MES%TYPE)
    RETURN NUMBER
    IS
    /************************************************************************
       PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
       FUNCION   : FNULDCI_DETAINTESAP
       AUTOR     : HEIBER BARCO
       FECHA     : 02-08-2013
       DESCRIPCION  : TIQUETE:
                      FUNCION QUE SE ENCARGA DE INSERTAR EL DETALLE DE LA TABLA
                      DE INTERFAZ PARA SAP.
      PARAMETROS DE ENTRADA
      PARAMETROS DE SALIDA
      HISTORIA DE MODIFICACIONES
      AUTOR    FECHA       DESCRIPCION
    ************************************************************************/
    BEGIN

    --<<
    --INSERCION DE LOS REGISTROS DEL DETALLE DE LA INTERFAZ
    -->>

      INSERT INTO LDCI_DETAPROVCOSTO (COD_INTERFAZLDC, NUM_DOCUMENTOSAP, CLAVCONT, CLASECTA,
      INDICCME, IMPOMTRX, IMPOMSOC, INDICIVA, CONDPAGO, FECHBASE, REFFACTR, BASEIMPT, CENTROCO,
      ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO, CLAVREF1, CLAVREF2,
      CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, BASERETC, FECHVALOR, CTADIV, COD_CENTROBENEF,
      COD_CLASIFCONTA, ANO, MES)
      VALUES(NUCOD_INTERFAZLDC, NUNUM_DOCUMENTOSAP, VACLAVCONT,VACLASECTA,VAINDICCME,NUIMPOMTRX,NUIMPOMSOC,VAINDICIVA,
      NUCONDPAGO,DTFECHBASE,VAREFFACTR,NUBASEIMPT,VACENTROCO,VAORDENINT,NUCANTIDAD,VAASIGNACN,VATXTPOSCN,VACENTROBE,
      VASEGMENTO,VAOBJCOSTO,VACLAVREF1,VACLAVREF2,VACLAVREF3,VASOCIEDGL,NUMATERIAL,VATIPORETC,VAINDRETEC,NUBASERETC,DTFECHVALOR,
      VACTADIV,NUCOD_CENTROBENEF,NUCOD_CLASIFCONTA,NUANO,NUMES);

       RETURN(0);
    EXCEPTION
    WHEN OTHERS THEN
      ldci_pkinterfazsap.VAMENSERROR :=  '[FNULDCI_DETAINTESAP] - NO PUDO INSERTAR EL REGISTRO DEL DETALLE DE LA PROVISION. '||SQLERRM||' '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      LDCI_PKTRAZAINTERFACES.PREGIMENSAJE(NUCOD_INTERFAZLDC,ldci_pkinterfazsap.VAMENSERROR,TO_CHAR(SYSTIMESTAMP,'HH24:MI:SS.FF'),NUCOD_INTERFAZLDC,USER,USERENV('TERMINAL'));
      RETURN(-1);
  END FNULDCI_DETAPROVCOSTO;

FUNCTION fnuGeneDocuSapMat(nuICLINUDO   in LDCI_INCOLIQU.ICLINUDO%type)
  return number
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuGeneDocuSapMat
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de armar el resumen de la interfaz de actas
    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
        Samuel Pacheco      08/08/2018    CASO 200-1406: La variable NuIndEnca sera concatenada en el servicio
                                                     del encabezado (fnuGeneldci_encaintesap) y
                                                     detalle (ldci_pkinterfazsap.fnuLDCI_DETAINTESAP)

  ************************************************************************/
  IS

     --<<
     --Obtencion de los grupos para generar los documentos para sap
     -->>
     CURSOR cuAGRUPACION is
         SELECT ICLINUDO, comprobante
         FROM LDCI_INCOLIQU
         WHERE iclinudo = nuICLINUDO
         GROUP BY ICLINUDO, comprobante;

     TYPE tycuAGRUPACION IS TABLE OF cuAGRUPACION%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuAGRUPACION tycuAGRUPACION;

     --<<
     --Seleccion de datos del resumen de la interfaz de ingresos
     -->>
     CURSOR cuLDCI_INCOLIQU IS
     SELECT CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, SYSDATE FECHBASE, REFFACTR, Trunc(Sum(BASEIMPT)) BASEIMPT,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC, Trunc(Sum(BASERETC)) BASERETC,
            COD_CENTROBENEF, COD_CLASIFCONTA, SYSDATE FECHVALOR, CTADIV,Trunc(sum(IMPOMTRX)) IMPOMTRX,
            Trunc(sum(IMPOMSOC)) IMPOMSOC
       FROM LDCI_INCOLIQU
      WHERE ICLINUDO = nuICLINUDO
     GROUP BY CLAVCONT, CLASECTA, INDICCME, INDICIVA, CONDPAGO, REFFACTR,
            CENTROCO, ORDENINT, CANTIDAD, ASIGNACN, TXTPOSCN, CENTROBE, SEGMENTO, OBJCOSTO,
            CLAVREF1, CLAVREF2, CLAVREF3, SOCIEDGL, MATERIAL, TIPORETC, INDRETEC,
            COD_CENTROBENEF, COD_CLASIFCONTA, CTADIV
      ORDER BY COD_CENTROBENEF;


     TYPE tycuLDCI_INCOLIQU IS TABLE OF cuLDCI_INCOLIQU%ROWTYPE INDEX BY BINARY_INTEGER;
     vtycuLDCI_INCOLIQU tycuLDCI_INCOLIQU;

     nuIndEnca   number := 0;
     nuIndDeta   number := 0;
     nuCodInLdc  number := 0;
     nuRet       number := 0;
     nuIdentificador number;

  begin

    --<<
    --seleccion de datos de la agrupacion
    -->>
    OPEN cuAGRUPACION;
    FETCH cuAGRUPACION BULK COLLECT INTO vtycuAGRUPACION;
    CLOSE cuAGRUPACION;

    --<<
    --Seleccion de grupos para generacion de documentos
    FOR j IN vtycuAGRUPACION.first..vtycuAGRUPACION.last loop

        --<<
        --Insercion encabezado delete detalle de la interfaz
        -->>
        nuIndEnca := nuIndEnca + 1;
        sbIndice := vtycuAGRUPACION(j).ICLINUDO;
        -- Busca el ID asignado para el encabezado
        if NOT tbENCABEZADO.exists(sbIndice) then
            nuIdentificador := seq_ldci_encaintesap.nextval;
            tbENCABEZADO(sbIndice) := nuIdentificador;
        END if;

       -- Obtiene Libro
        sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, vtycuAGRUPACION(j).comprobante);

        --<<
        --Insercion de datos en la tabla vtyldci_encaintesap
        -->>
        nuRet := fnuGeneldci_encaintesap(nuICLINUDO,
                                        nuIndEnca,
                                        null,
                                        null,
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        TO_CHAR(SYSDATE, 'DDMMYYYY'),
                                        sbLEDGERS,
                                        'MATERIALES-'||nuICLINUDO||'-'||nuIndEnca,--200-1406
                                        'MATERIALES-'||nuICLINUDO||'-'||nuIndEnca,--200-1406
                                        ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                        ldci_pkinterfazsap.vaSOCIEDAD,
                                        ldci_pkinterfazsap.vaCURRENCY,
                                        nuIdentificador);

        --<<
        --Se lanza la Exepcion
        -->>

       if (nuRet <> 0) then
            raise Error;
        end if;


        --<<
        --Seleccion de datos para generar la informacion de los registros contables segun elmodelo de SAP,
        --se envia Clasificador contable
        -->>
        OPEN cuLDCI_INCOLIQU;
        FETCH cuLDCI_INCOLIQU BULK COLLECT INTO vtycuLDCI_INCOLIQU;
        CLOSE cuLDCI_INCOLIQU;

        --<<
        --Saca los detalles de la interfaz por grupo por concepto
        -->>
        FOR i IN vtycuLDCI_INCOLIQU.First..vtycuLDCI_INCOLIQU.Last LOOP

          --<<
          --Generacion de los detalles de la interfaz en la tabla vtyLDCI_DETAINTESAP
          -->>
          nuRet := ldci_pkinterfazsap.fnuLDCI_DETAINTESAP(nuICLINUDO,
                                                    nuIndEnca,
                                                    vtycuLDCI_INCOLIQU(i).CLAVCONT,
                                                    vtycuLDCI_INCOLIQU(i).CLASECTA,
                                                    vtycuLDCI_INCOLIQU(i).INDICCME,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMTRX,
                                                    vtycuLDCI_INCOLIQU(i).IMPOMSOC,
                                                    vtycuLDCI_INCOLIQU(i).INDICIVA,
                                                    vtycuLDCI_INCOLIQU(i).CONDPAGO,
                                                    vtycuLDCI_INCOLIQU(i).FECHBASE,
                                                    vtycuLDCI_INCOLIQU(i).REFFACTR,
                                                    vtycuLDCI_INCOLIQU(i).BASEIMPT,
                                                    vtycuLDCI_INCOLIQU(i).CENTROCO,
                                                    vtycuLDCI_INCOLIQU(i).ORDENINT,
                                                    vtycuLDCI_INCOLIQU(i).CANTIDAD,
                                                    vtycuLDCI_INCOLIQU(i).ASIGNACN,
                                                    'INTERFAZ-'||nuICLINUDO||'-'||nuIndEnca,--200-1460
                                                    vtycuLDCI_INCOLIQU(i).CENTROBE,
                                                    vtycuLDCI_INCOLIQU(i).SEGMENTO,
                                                    vtycuLDCI_INCOLIQU(i).OBJCOSTO,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF1,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF2,
                                                    vtycuLDCI_INCOLIQU(i).CLAVREF3,
                                                    vtycuLDCI_INCOLIQU(i).SOCIEDGL,
                                                    vtycuLDCI_INCOLIQU(i).MATERIAL,
                                                    vtycuLDCI_INCOLIQU(i).TIPORETC,
                                                    vtycuLDCI_INCOLIQU(i).INDRETEC,
                                                    vtycuLDCI_INCOLIQU(i).BASERETC,
                                                    vtycuLDCI_INCOLIQU(i).FECHVALOR,
                                                    vtycuLDCI_INCOLIQU(i).CTADIV,
                                                    vtycuLDCI_INCOLIQU(i).COD_CENTROBENEF,
                                                    -1,
                                                    nuIdentificador);

          --<<
          --Se lanza la Exepcion
          -->>

          IF (nuRet <> 0) THEN

              RAISE ERROR;
          END IF;

        END LOOP;

        --<<
        --Borrado de la tabla en memoria de ldc_incoliqu
        -->>
        vtycuLDCI_INCOLIQU.delete;

    END LOOP;
    --<<
    --Borrado de la tabla de agrupacion
    -->>
    vtycuAGRUPACION.delete;
    vtycuLDCI_INCOLIQU.DELETE;

    --<<
    --Llena los datos con las tablas temporales que se crearon en memoria
    --en as tablas LDCI_DETAINTESAP y ldci_encaintesap
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSEINTESAP;
    IF (nuRet <> 0) THEN
       RAISE ERROR;
    END IF;


    return(0);
    EXCEPTION
      WHEN ERROR THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapMat] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         dbms_output.put_line('Error fnuGeneDocuSapMat :['||ldci_pkinterfazsap.vaMensError);
         return(-1);
      WHEN OTHERS THEN
         vtycuAGRUPACION.delete;
         vtycuLDCI_INCOLIQU.DELETE;
         ldci_pkinterfazsap.vaMensError :=  '[fnuGeneDocuSapMat] - No se pudo generar Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(nuICLINUDO,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nuICLINUDO,USER,USERENV('TERMINAL'));
         dbms_output.put_line('Error fnuGeneDocuSapMat :['||ldci_pkinterfazsap.vaMensError);
         return(-1);
    END fnuGeneDocuSapMat;

FUNCTION fnuValidaCampo(vaDato  varchar2)
RETURN NUMBER
    IS
    /************************************************************************
       PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
       FUNCION   : fnuValidaCampo
       AUTOR     : Oscar Restrepo
       FECHA     : 05-12-2013
       DESCRIPCION  : TIQUETE:
                      FUNCION QUE SE ENCARGA DE VALIDAR SI EL CAMPO ES NUMERO O NO
      PARAMETROS DE ENTRADA
      PARAMETROS DE SALIDA
      HISTORIA DE MODIFICACIONES
      AUTOR    FECHA       DESCRIPCION
    ************************************************************************/
    CURSOR cuValidaCampo IS
      select  CASE WHEN LENGTH(TRIM(TRANSLATE(vaDato, ' +-.0123456789', ' '))) IS NULL THEN 'NUMERO' ELSE 'TEXTO' END
      FROM dual;

    RESULTADO VARCHAR2(100);
    BEGIN
      IF (vaDato IS NULL) THEN
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'[fnuValidaCampo] No se ha suminstrado valor para el campo a validar ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
         RETURN -1;
      END IF;

      OPEN cuValidaCampo;
      FETCH cuValidaCampo INTO RESULTADO;
      CLOSE cuValidaCampo;

      IF  (RESULTADO='TEXTO') THEN
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'[fnuValidaCampo] El valor Suministrado es una fecha',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
         RETURN -1;
      ELSE
         RETURN 0;
      END IF;

end fnuValidaCampo;

function fvaGetGrupoProvCarte (nuClasificador  in IC_CLASCONT.CLCOCODI%TYPE)
--                               vaDesProv  OUT LDCI_DETAINTESAP.txtposcn%TYPE)
return NUMBER
    IS
    /************************************************************************
       PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
       FUNCION   : fvaGetGrupoProvCarte
       AUTOR     : Oscar Restrepo
       FECHA     : 09-12-2013
       DESCRIPCION  : TIQUETE:
                      FUNCION QUE SE ENCARGA DE VALIDAR EL GRUPO AL QUE PERTENECE
                      EL CLASIFICADOR PARA LA INTERFAZ DE PROVISION CARTERA
      PARAMETROS DE ENTRADA
      PARAMETROS DE SALIDA
      HISTORIA DE MODIFICACIONES
      AUTOR    FECHA       DESCRIPCION
    ************************************************************************/

vaKit VARCHAR2(200);
vaBrilla VARCHAR2(200);
nuCantBrilla NUMBER;
nuCantKit NUMBER;

CURSOR cuBrilla
    IS
    SELECT COUNT(*) TOTAL FROM ic_clascont
      WHERE  ','||GRUPOPROVCARBRILLA|| ',' LIKE '%,' ||nuClasificador|| ',%';

CURSOR cuKit
    IS
    SELECT COUNT(*) TOTAL FROM ic_clascont
      WHERE  ','||GRUPOPROVCARBKIT|| ',' LIKE '%,' ||nuClasificador|| ',%';

BEGIN
        --<<
        -- Se obtienen los valores de los parametros para los grupos de Brilla y Kit
        -->>
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'GRUPOPROVCARBRILLA',GRUPOPROVCARBRILLA, osbErrorMessage);
        LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'GRUPOPROVCARBKIT',GRUPOPROVCARBKIT, osbErrorMessage);

        --<<
        --Se evalua si el clasificador es de Brilla
        -->>
        OPEN cuBrilla;
        FETCH cuBrilla INTO nuCantBrilla;
        CLOSE cuBrilla;

        --<<
        --Se evalua si el clasificador es de Kit
        -->>
        OPEN cuKit;
        FETCH cuKit INTO nuCantKit;
        CLOSE cuKit;


         IF  (nuCantKit>0 OR nuCantBrilla>0) THEN
                 IF (nuCantBrilla>0) THEN
--                    vaDesProv:='PROV_BRILLA';
                    return 3;
                 ELSE
--                    vaDesProv:='PROV_KIT';
                    return 2;
                 END IF;
             ELSE
--                   vaDesProv:='PROV ';
                   return 1;
             END IF;

end fvaGetGrupoProvCarte;

 FUNCTION funRevReclaCart(nuAnio  IN LDCI_RECLACARTNTESAP.ANIO%TYPE,
                          numes  IN LDCI_RECLACARTNTESAP.MES%TYPE
                          )
  RETURN NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : funRevReclaCart
     AUTOR     : Manuel Mejia
     FECHA     : 02-12-2014
     DESCRIPCION  : Tiquete:

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  IS

  nuAnoAnt NUMBER;
  nuMesAnt NUMBER;
  vaTipointEnv VARCHAR2(3); --Tipo de Interfaz Enviada L6D (Reversion)
  vaTipointInte VARCHAR2(3);--Tipo Interfaz Contabilizada L6
  nuRet NUMBER;
  vaCODINTINTERFAZ VARCHAR2(3);
  nuComprobante number := 0;

  Error EXCEPTION;      --Manejo de exception para el paquete

  CURSOR cuComprobante (sbTipoInterfaz in varchar2) IS
  SELECT cod_comprobante
  FROM ldci_tipointerfaz
  WHERE tipointerfaz = sbTipoInterfaz;

  CURSOR cuInformacion IS
    SELECT * FROM LDCI_RECLACARTNTESAP
      WHERE anio = nuAnoAnt
      AND mes = nuMesAnt
      AND  TIPOINTERFAZ = 'L6'
      ORDER BY NUM_DOCUMENTOSAP,CENTROBE,IMPOMTRX;


  TYPE tyReclCartLargo IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyReclCartLargo tyReclCartLargo;
  BEGIN

    --Se recibe el a?o y el mes en que se va a revertir en contabilidad

    vaCODINTINTERFAZ :='L6';
    ldci_pkinterfazsap.vaCODINTINTERFAZ:='L6';
    ldci_pkinterfazsap.vaSOCIEDAD:='GDOC';
    ldci_pkinterfazsap.vaCURRENCY:='COP';

    --Tipo de Interfaz
    vaTipointEnv := 'L6D';

    -- Obtiene valor del numero de comprobante configurado para L6
    nuComprobante := 0;
    open cuComprobante(vaCODINTINTERFAZ);
    fetch cuComprobante INTO nuComprobante;
    close cuComprobante;

      --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,vaTipointEnv);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Generar interfaz '||vaTipointEnv||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
    Dbms_Output.Put_Line('Ya se Revirtio la Reclasificacion de A?o: ['||nuAnio||'_'||nuMes||']');
            RAISE Error;
    END IF;

    --Se obtiene el A?o y el mes anterior, es decir el que se va a revertir
    IF nuMes = 1 THEN
        nuMesAnt := 12;
        nuAnoAnt := nuAnio - 1;
    ELSE
        nuAnoAnt := nuAnio;
        nuMesAnt := nuMes - 1;
    END IF;

    OPEN cuInformacion;
    FETCH cuInformacion BULK COLLECT INTO vtyReclCartLargo;
    CLOSE cuInformacion;

    IF (vtyReclCartLargo.Count > 0) THEN
       --<<
       --Obtencion delete numero de documento
       -->>
       ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;

       dbms_output.put_line('REVERSION CARTERA NUMERO :'||ldci_pkinterfazsap.nuSeqICLINUDO);
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia Interfaz  ['||vaTipointEnv||'] numero :['||ldci_pkinterfazsap.nuSeqICLINUDO||'] para el A?o :['||nuAnio||'] y mes ['||nuMes||'] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

       --Dbms_Output.Put_Line(vaTipointEnv||' Se va a reversar la Reclasiciacion del A?o :['||nuAnoAnt||'] y Mes ['||nuMesAnt||'] Con el numero de Interfaz ['||nuSeqICLINUDO||']');
       FOR i IN vtyReclCartLargo.First..vtyReclCartLargo.Last LOOP

            -- Obtiene el Ledger
            sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, nuComprobante);

            nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_RECLACARTERA(ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                      ldci_pkinterfazsap.nuSeqICLINUDO,
                                      TRUNC(sysdate),
                                      user,
                                      'SERVER',
                                      TRUNC(sysdate),
                                      vtyReclCartLargo(i).cod_clasifconta,
                                      vtyReclCartLargo(i).clavcont,
                                      vtyReclCartLargo(i).clasecta,
                                      NULL,
                                      vtyReclCartLargo(i).impomtrx,
                                      vtyReclCartLargo(i).impomsoc,
                                      NULL,
                                      null,
                                      'REV_RECLCART'||ldci_pkinterfazsap.nuSeqICLINUDO,
                                      null,
                                      null,
                                      'GDOC',
                                      null,
                                      null,
                                      vtyReclCartLargo(i).centrobe,
                                      '',--vtyReclCartLargo(i).centrobe,
                                      i,
                                      vtyReclCartLargo(i).ctadiv,
                                      vtyReclCartLargo(i).segmento,
                                      null,
                                      nuComprobante,
                                      sbLedgers);


       END LOOP;

       --Dbms_Output.Put_Line('Finaliza Proceso de reversar la Reclasiciacion del A?o :['||nuAnoAnt||'] y Mes ['||nuMesAnt||']');

    ELSE
     LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No hay Datos para Revertir en el A?o :['||nuAnoAnt||'] y Mes ['||nuMesAnt||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

      --Dbms_Output.Put_Line('No hay Datos para Revertir en el A?o :['||nuAnoAnt||'] y Mes ['||nuMesAnt||']');
         RAISE Error;
    END IF;

    vtyReclCartLargo.DELETE;

    --<<
    --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

    -- Asienta registros
    commit;

    --<<
    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
    -->>
    IF (nuRet <> 0) THEN
      ---Dbms_Output.Put_Line('No se puede insertar en Incoliqu');
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

    --<<
    --Genera la informacion de los documentos para SAP de la interfaz de Provision Cartera
    -->>

    nuRet := ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera(ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                                               nuAnio,
                                                               nuMes,
                                                               ldci_pkinterfazsap.nuSeqICLINUDO, 'REV_RECLCART');

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
    IF (nuRet <> 0) THEN
      Dbms_Output.Put_Line('No se puede ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera');
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Si es satifactorio todo el proceso, se realiza el envio a SAP
    --Procedimiento Hector Dominguez
    -->>
    IF (vaEnviaIntefazSAP = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;
    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S',vaTipointEnv);

    IF (nuRet <> 0) THEN
    --Dbms_Output.Put_Line('No se puede Registrar la interfaz fnuRegistraInterfaz');
      LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
      RAISE ERROR;
    END IF;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Finaliza Con Exitos la Generacion de la Interfaz Interfaz  ['||vaTipointEnv||'] numero :['||ldci_pkinterfazsap.nuSeqICLINUDO||'] para el A?o :['||nuAnio||'] y mes ['||nuMes||'] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

    RETURN(0);
    EXCEPTION
      WHEN ERROR THEN
         ldci_pkinterfazsap.vaMensError :=  '[funRevReclaCart] - No se pudo Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.nuSeqICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         ldci_pkinterfazsap.vaMensError :=  '[funRevReclaCart] - No se pudo Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.nuSeqICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
    END  funRevReclaCart;


  FUNCTION funRevReclaCartRO(nuAnio  IN ldci_reclacartntesap.anio%TYPE,
                             numes   IN ldci_reclacartntesap.mes%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : funRevReclaCartRO
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 01-08-2014
     DESCRIPCION  : Copia del m?todo funRevReclaCart.
                    Reversi?n de Reclasificaci?n de Cartera.

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    -------- ----------- -------------------------------------------------
  ************************************************************************/
  RETURN NUMBER
  IS

    nuAnoAnt             NUMBER;
    nuMesAnt             NUMBER;
    vaTipointEnv         VARCHAR2(3); -- Tipo de Interfaz Enviada L6D (Reversion)
    vaTipointInte        VARCHAR2(3); -- Tipo Interfaz Contabilizada L6
    nuRet                NUMBER;
    vaCODINTINTERFAZ     VARCHAR2(3);
    nuComprobante        NUMBER := 0;
    Error                EXCEPTION;   -- Manejo de exception para el paquete
    vaEnviaInterfazRC    VARCHAR2(1); --Parametro para el control de envio de Interfaces a SAP

    CURSOR cuComprobante (sbTipoInterfaz in varchar2)
    IS
    SELECT cod_comprobante
      FROM ldci_tipointerfaz
     WHERE tipointerfaz = sbTipoInterfaz;

    CURSOR cuInformacion
    IS
    SELECT *
      FROM ldci_reclacartntesap
     WHERE anio = nuAnoAnt
       AND mes = nuMesAnt
       AND TIPOINTERFAZ = 'L6'
     ORDER BY num_documentosap,centrobe,impomtrx;


    TYPE tyReclCartLargo IS TABLE OF cuInformacion%ROWTYPE INDEX BY BINARY_INTEGER;
    vtyReclCartLargo tyReclCartLargo;

  BEGIN

    --Se recibe el a?o y el mes en que se va a revertir en contabilidad
    vaCODINTINTERFAZ :='L6';
    ldci_pkinterfazsap.vaCODINTINTERFAZ:='L6';
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'SOCIEDAD', ldci_pkinterfazsap.vaSOCIEDAD, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_COSTOS', 'CURRENCY', ldci_pkinterfazsap.vaCURRENCY, osbErrorMessage);
    ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'ENVIAINTERFAZRC', vaEnviaInterfazRC, osbErrorMessage);

    --Tipo de Interfaz
    vaTipointEnv := 'L6R';

    -- Obtiene valor del numero de comprobante configurado para L6
    nuComprobante := 0;
    OPEN cuComprobante(vaCODINTINTERFAZ);
    FETCH cuComprobante INTO nuComprobante;
    CLOSE cuComprobante;

      --<<
    --Se valida que aun no este enviada la interfaz para los paramatros de ingreso enviada a SAP
    -->>
    nuRet := ldci_pkinterfazsap.fvaGetRegAnioMes(nuAnio,nuMes,vaTipointEnv);
    IF (nuRet <> 0) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Generar interfaz '||vaTipointEnv||' para el A?o :['||nuAnio||'] y mes ['||nuMes||'] valide que no esta enviada aun a SAP [tabla LDCI_REGISTRAINTERFAZ]',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        Dbms_Output.Put_Line('Ya se Revirtio la Reclasificacion de A?o: ['||nuAnio||'_'||nuMes||']');
        RAISE Error;
    END IF;

    --Se obtiene el A?o y el mes anterior, es decir el que se va a revertir
    IF nuMes = 1 THEN
        nuMesAnt := 12;
        nuAnoAnt := nuAnio - 1;
    ELSE
        nuAnoAnt := nuAnio;
        nuMesAnt := nuMes - 1;
    END IF;

    OPEN cuInformacion;
    FETCH cuInformacion BULK COLLECT INTO vtyReclCartLargo;
    CLOSE cuInformacion;

    IF (vtyReclCartLargo.Count > 0) THEN
       --<<
       --Obtencion delete numero de documento
       -->>
       ldci_pkinterfazsap.nuSeqICLINUDO := ldci_pkinterfazsap.fnuSeq_ldci_incoliqu;

       dbms_output.put_line('REVERSION CARTERA NUMERO :'||ldci_pkinterfazsap.nuSeqICLINUDO);
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Inicia Interfaz  ['||vaTipointEnv||'] numero :['||ldci_pkinterfazsap.nuSeqICLINUDO||'] para el A?o :['||nuAnio||'] y mes ['||nuMes||'] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

       --Dbms_Output.Put_Line(vaTipointEnv||' Se va a reversar la Reclasiciacion del A?o :['||nuAnoAnt||'] y Mes ['||nuMesAnt||'] Con el numero de Interfaz ['||nuSeqICLINUDO||']');
       FOR i IN vtyReclCartLargo.First..vtyReclCartLargo.Last LOOP

            -- Obtiene el Ledger
            sbLEDGERS := fsbGetLedgers(ldci_pkinterfazsap.vaCODINTINTERFAZ, nuComprobante);

            nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU_RECLACARTERO(ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                      ldci_pkinterfazsap.nuSeqICLINUDO,
                                      TRUNC(sysdate),
                                      user,
                                      'SERVER',
                                      TRUNC(sysdate),
                                      vtyReclCartLargo(i).cod_clasifconta,
                                      vtyReclCartLargo(i).clavcont,
                                      vtyReclCartLargo(i).clasecta,
                                      NULL,
                                      vtyReclCartLargo(i).impomtrx,
                                      vtyReclCartLargo(i).impomsoc,
                                      NULL,
                                      null,
                                      'REV_RECLCART'||ldci_pkinterfazsap.nuSeqICLINUDO,
                                      null,
                                      null,
                                      ldci_pkinterfazsap.vaSOCIEDAD,
                                      null,
                                      null,
                                      vtyReclCartLargo(i).centrobe,
                                      '',--vtyReclCartLargo(i).centrobe,
                                      i,
                                      vtyReclCartLargo(i).ctadiv,
                                      vtyReclCartLargo(i).segmento,
                                      null,
                                      nuComprobante,
                                      sbLedgers);


       END LOOP;

       --Dbms_Output.Put_Line('Finaliza Proceso de reversar la Reclasiciacion del A?o :['||nuAnoAnt||'] y Mes ['||nuMesAnt||']');

    ELSE
     LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No hay Datos para Revertir en el A?o :['||nuAnoAnt||'] y Mes ['||nuMesAnt||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));

      --Dbms_Output.Put_Line('No hay Datos para Revertir en el A?o :['||nuAnoAnt||'] y Mes ['||nuMesAnt||']');
         RAISE Error;
    END IF;

    vtyReclCartLargo.DELETE;

    --<<
    --Se insertan los datos desde vtyLDCI_INCOLIQU en LDCI_INCOLIQU
    -->>
    nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;

    -- Asienta registros
    commit;

    --<<
    --Se lanza la Exepcion sin la funcion no se ejecuto con exito
    -->>
    IF (nuRet <> 0) THEN
      ---Dbms_Output.Put_Line('No se puede insertar en Incoliqu');
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        raise Error;
    END IF;

    --<<
    --Genera la informacion de los documentos para SAP de la interfaz de Provision Cartera
    -->>

    nuRet := ldci_pkinterfazsap.fnuGeneDocuSapReclaCarteraRO(ldci_pkinterfazsap.vaCODINTINTERFAZ,
                                                               nuAnio,
                                                               nuMes,
                                                               ldci_pkinterfazsap.nuSeqICLINUDO,
                                                               'REV_RECLCART-'||ldci_pkinterfazsap.nuSeqICLINUDO);

    --<<
    --Se lanza la exepcion si no se puede generar el DETAINTESAP o el ENCAINTESAP
    -->>
    IF (nuRet <> 0) THEN
      Dbms_Output.Put_Line('No se puede ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera');
        LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede ldci_pkinterfazsap.fnuGeneDocuSapReclaCartera :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
        RAISE ERROR;
    END IF;

    --<<
    --Si es satifactorio todo el proceso, se realiza el envio a SAP
    --Procedimiento Hector Dominguez
    -->>
    IF (vaEnviaInterfazRC = 'S') THEN
        ldci_pkintercontablemesa.proEnviaDocContable(ldci_pkinterfazsap.nuSeqICLINUDO);
    END IF;
    --<<
    ---Se realiza la insercion en la tabla que tiene el historico de interfaces enviadas a SAP
    -->>
    nuRet :=ldci_pkinterfazsap.fnuRegistraInterfazAnioMes(ldci_pkinterfazsap.nuSeqICLINUDO,nuAnio,nuMes,'S',vaTipointEnv);

    IF (nuRet <> 0) THEN
    --Dbms_Output.Put_Line('No se puede Registrar la interfaz fnuRegistraInterfaz');
      LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'No se puede Registrar la interfaz fnuRegistraInterfaz :['||ldci_pkinterfazsap.vaCODINTINTERFAZ||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
      RAISE ERROR;
    END IF;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'Finaliza Con Exitos la Generacion de la Interfaz Interfaz  ['||vaTipointEnv||'] numero :['||ldci_pkinterfazsap.nuSeqICLINUDO||'] para el A?o :['||nuAnio||'] y mes ['||nuMes||'] ',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));


    RETURN(0);

  EXCEPTION
      WHEN ERROR THEN
         ldci_pkinterfazsap.vaMensError :=  '[funRevReclaCartRO] - No se pudo Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.nuSeqICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);
      WHEN OTHERS THEN
         ldci_pkinterfazsap.vaMensError :=  '[funRevReclaCartRO] - No se pudo Encabezado. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
         LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.nuSeqICLINUDO,USER,USERENV('TERMINAL'));
         return(-1);

  END  funRevReclaCartRO;

    /*******************************************************************************
     Propiedad intelectual de Gases de Occidenes.

     Nombre         :  validaLDCIREVCLACART
     Descripcion    :  Forma para validar la forma LDCIREVCLACART
     Autor          :  Oscar Eduardo Restrepo
     Fecha          :  22 Noviembre de 2013
     Parametros         Descripcion
     ============    ===================


     Historia de Modificaciones
     Fecha             Autor                 Modificacion
     =========       =========          ====================
   /*******************************************************************************/
   PROCEDURE validaLDCIREVCLACART
   IS
      cnunull_attribute   CONSTANT NUMBER := 2126;
      nuerror                      NUMBER;

      nuAnio ge_boInstanceControl.stysbValue;
      nuMes ge_boInstanceControl.stysbValue;

   BEGIN

      --<<VAlida los parametros del reporte que no esten en Nullo-->>
      IF (cnunull_attribute IS NULL)
      THEN
         nuerror := 1;
      END IF;

      --<<Se realiza la asignacion de los valores de los campos a las variables definidas>>--
      nuAnio := ge_boInstanceControl.fsbGetFieldValue ('LDCI_DETAPROVCOSTO', 'ANO');
      nuMes := ge_boInstanceControl.fsbGetFieldValue ('LDCI_DETAPROVCOSTO', 'MES');

     --<<VAlida los parametros del reporte que no esten en Nullo-->>
      IF (nuAnio IS NULL)
      THEN
         ERRORS.seterror (cnunull_attribute, 'A?o');
         RAISE ex.controlled_error;
      END IF;

      IF (nuMes IS NULL)
      THEN
         ERRORS.seterror (cnunull_attribute, 'Mes');
         RAISE ex.controlled_error;
      END IF;

      IF (nuAnio < 1999)
      THEN
         gi_boerrors.seterrorcodeargument
                   (2741,
                    'El A?o es invalido'
                   );
         RAISE ex.controlled_error;
      END IF;

      IF (nuMes < 1 or nuMes>12)
      THEN
         gi_boerrors.seterrorcodeargument
                   (2741,
                    'El Mes es invalido'
                   );
         RAISE ex.controlled_error;
      END IF;

   END validaLDCIREVCLACART;

  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQUMAT
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
FUNCTION fnuLDCI_INCOLIQUMAT(nuICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                        nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                        dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                        vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                        vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                        dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                        nuCOD_CLASIFCONTA in LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                        vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                        vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                        vaINDICCME  VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                        nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%TYPE,
                        nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                        vaINDICIVA  VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                        nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                        vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%TYPE,
                        vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                        vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                        vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                        vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                        vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                        vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%TYPE,
                        nuBASERETC IN LDCI_INCOLIQU.BASERETC%TYPE,
                        nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                        vaCTADIV   in LDCI_INCOLIQU.CTADIV%type,
                        dcrcinad IN ic_decoreco.dcrcinad%TYPE,
                        nuComprobante IN LDCI_INCOLIQU.comprobante%type)
  return number
  is
  vaCentBen ldci_centrobenef.cebecodi%TYPE;
  sbOrdInt VARCHAR2(100);
  nuCategoria NUMBER;
  sbDescripcionNit VARCHAR2(200);
  fbFECHBASE date;
  sbEsDivergente VARCHAR2(2);
  vaOrdenInterna LDCI_CENCOUBGTRA.ccbgorin%TYPE;
  vaCentroCosto LDCI_CENCOUBGTRA.ccbgceco%TYPE;
  nuNIT VARCHAR2(100);
  nuRes NUMBER;
  nuValorImpt NUMBER;
  nuValorImptIva NUMBER;
  sbSegmento  ldci_centrobenef.cebesegm%TYPE;
  --<<
  -- Edmundo E. Lara -- 31/05/2016  CA = 100-10632
  --
  vaNomAtrAct       VARCHAR2(200);  -- Nombre del atributo de activos en las ordenes de trabajo
  osbErrorMessage   VARCHAR2(2000); -- Variable de error requerida para obtener el valor de un parametro

  BEGIN

        vaCentBen := ldci_pkinterfazsap.vaCentBen;
        --<<
        --Se Obtiene la Categoria con Base en la Localidad
        -->>
       -- nuCategoria :=Nvl(ldci_pkinterfazsap.fvaGetData(5,dcrcinad,'|'),NULL);
        IF vaCentBen IS NULL  THEN
        vaCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebe(ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|')),0);

        END IF;

        IF ldci_pkinterfazsap.vaMaterialAct IS NULL AND ldci_pkinterfazsap.vaMaterialIva IS NULL THEN

        --sbOrdInt:=ldci_pkinterfazactas.fvaGetOICos(nuCategoria,nuCentBen);
        nuRes:=ldci_pkinterfazsap.fvaGetOICos(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                           Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL), Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL),
                                           vaCentroCosto,vaOrdenInterna);

        --vaCentBen := ldci_pkinterfazsap.vaCentBen;
        END IF;

        IF vaCentroCosto = -1 THEN
        vaCentroCosto := NULL;
        END IF;

        sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(ldci_pkinterfazsap.vaNit);

       -- sbEsDivergente:=ldci_pkinterfazsap.fnuGetDivergente(vaCLAVCONT);

        nuValorImpt := 0;
        nuValorImptIva := 0;

          IF vaINDRETEC IS NOT NULL THEN

            IF ',' || ldci_pkinterfazsap.vaItemsReteIva || ',' LIKE '%,' || ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|') || ',%'  THEN

              nuValorImpt := round(ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|')*To_Number(ldci_pkinterfazsap.vaIva)/100);

            ELSE

              nuValorImpt := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');

            END IF;

          ELSE

          nuValorImpt := NULL;

          END IF;

          IF ldci_pkinterfazsap.fvaGetData(47,dcrcinad,'|') = 'IVA' AND SubStr(vaCLASECTA,0,2) = '24' THEN

          nuValorImptIva := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');

          END IF;

         sbSegmento:=nvl(fvaGetSegmento(vaCentBen),0);

        if (vtyLDCI_INCOLIQU.count = 0) then
            ldci_pkinterfazsap.nuIncoliqu := 1;
        ELSE
            ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
        END IF;

          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO := nuICLITIDO;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO := nuICLINUDO;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH := dtICLIFECH;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA := vaICLIUSUA;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM := vaICLITERM;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR := dtICLIFECR;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF := vaCentBen;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA := nuCOD_CLASIFCONTA;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT := vaCLAVCONT;


          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA := vaCLASECTA;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN := ldci_pkinterfazsap.vaNit;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 := ldci_pkinterfazsap.vaNit;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 := sbDescripcionNit;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV   := vaCTADIV;

          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME := vaINDICCME;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX := nuIMPOMTRX;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC := nuIMPOMSOC;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA := vaINDICIVA;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO := ldci_pkinterfazsap.vaCODPAGO;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE := trunc(sysdate);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := ldci_pkinterfazsap.vaFactura;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := Trunc(nuValorImptIva);--ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO := vaCentroCosto;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT := vaOrdenInterna;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD := nuCANTIDAD;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN := vaTXTPOSCN;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE := vaCentBen;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO := sbSegmento;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO := vaOBJCOSTO;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 := vaCLAVREF2;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL := vaSOCIEDGL;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL := vaMATERIAL;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC := vaTIPORETC;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC := vaINDRETEC;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC := Trunc(nuValorImpt) ;--nuBASERETC;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE := nuNUSEINSE;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR :=TRUNC(sysdate);
          --<<
          --Campos que se obtienen desde el campo vtyDatIngresos(i).dcrcinad
          -->>
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNINEGO:=Nvl(ldci_pkinterfazsap.fvaGetData(1,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IDENTIFI:=Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITTERCE:=nuNIT;--Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CATEGORI:=nuCategoria;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUBCATEG:=ldci_pkinterfazsap.fvaGetData(6,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCRECA:=Nvl(ldci_pkinterfazsap.fvaGetData(7,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCTRAN:=Nvl(ldci_pkinterfazsap.fvaGetData(8,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EDADEUDA:=Nvl(ldci_pkinterfazsap.fvaGetData(9,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOSERV:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NIPRESTA:=Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOCART:=Nvl(ldci_pkinterfazsap.fvaGetData(12,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONCILIA:=Nvl(ldci_pkinterfazsap.fvaGetData(13,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DOCSOPOR:=Nvl(ldci_pkinterfazsap.fvaGetData(14,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG1:=ldci_pkinterfazsap.fvaGetData(15,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG2:=ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG3:=ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG4:=ldci_pkinterfazsap.fvaGetData(18,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG5:=ldci_pkinterfazsap.fvaGetData(19,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ANIO:=ldci_pkinterfazsap.fvaGetData(20,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MES:=ldci_pkinterfazsap.fvaGetData(21,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRSERV:=ldci_pkinterfazsap.fvaGetData(22,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRRECA:=ldci_pkinterfazsap.fvaGetData(23,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CICLFACT:=ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRFACT:=ldci_pkinterfazsap.fvaGetData(25,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRCICL:=ldci_pkinterfazsap.fvaGetData(26,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLDOCPAG:=ldci_pkinterfazsap.fvaGetData(28,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUCBANC:=ldci_pkinterfazsap.fvaGetData(29,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNIDCONS:=ldci_pkinterfazsap.fvaGetData(31,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DIASPROV:=ldci_pkinterfazsap.fvaGetData(32,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANRE:=ldci_pkinterfazsap.fvaGetData(34,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPBANRE:=ldci_pkinterfazsap.fvaGetData(35,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANTR:=ldci_pkinterfazsap.fvaGetData(36,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CUPON:=Nvl(ldci_pkinterfazsap.fvaGetData(37,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITCAJER:=ldci_pkinterfazsap.fvaGetData(38,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB:=Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CAULEGAL:=Nvl(ldci_pkinterfazsap.fvaGetData(41,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).PROYECTO:=Nvl(ldci_pkinterfazsap.fvaGetData(43,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPUNIOP:=Nvl(ldci_pkinterfazsap.fvaGetData(44,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ENTCONCI:=Nvl(ldci_pkinterfazsap.fvaGetData(45,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE := nuComprobante;

        -- Obtiene Libro
        sbLEDGERS := fsbGetLedgers(nuICLITIDO, nuComprobante);

        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS := sbLEDGERS;

  return(0);
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQUMAT] - No se pudieron almacenar los registros en la tabla LDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fnuLDCI_INCOLIQUMAT;

  FUNCTION fnuLDCI_INCOLIQUMATRO(nuICLITIDO        IN ldci_incoliqu.iclitido%TYPE,
                                 nuICLINUDO        IN ldci_incoliqu.iclinudo%TYPE,
                                 dtICLIFECH        IN ldci_incoliqu.iclifech%TYPE,
                                 vaICLIUSUA        IN ldci_incoliqu.icliusua%TYPE,
                                 vaICLITERM        IN ldci_incoliqu.icliterm%TYPE,
                                 dtICLIFECR        IN ldci_incoliqu.iclifecr%TYPE,
                                 nuCOD_CLASIFCONTA IN ldci_incoliqu.cod_clasifconta%type,
                                 vaCLAVCONT        IN ldci_incoliqu.clavcont%TYPE,
                                 vaCLASECTA        IN ldci_incoliqu.clasecta%TYPE,
                                 vaINDICCME        VARCHAR2,--LDCI_INCOLIQU.INDICCME%TYPE,
                                 nuIMPOMTRX        IN ldci_incoliqu.impomtrx%TYPE,
                                 nuIMPOMSOC        IN ldci_incoliqu.impomsoc%TYPE,
                                 vaINDICIVA        VARCHAR2,--LDCI_INCOLIQU.INDICIVA%TYPE,
                                 nuCANTIDAD        IN ldci_incoliqu.cantidad%TYPE,
                                 vaTXTPOSCN        IN ldci_incoliqu.txtposcn%TYPE,
                                 vaOBJCOSTO        IN ldci_incoliqu.objcosto%TYPE,
                                 vaCLAVREF2        IN ldci_incoliqu.clavref2%TYPE,
                                 vaSOCIEDGL        IN ldci_incoliqu.sociedgl%TYPE,
                                 vaMATERIAL        IN ldci_incoliqu.material%TYPE,
                                 vaTIPORETC        IN ldci_incoliqu.tiporetc%TYPE,
                                 vaINDRETEC        IN ldci_incoliqu.indretec%TYPE,
                                 nuBASERETC        IN ldci_incoliqu.baseretc%TYPE,
                                 nuNUSEINSE        IN ldci_incoliqu.nuseinse%TYPE,
                                 vaCTADIV          IN ldci_incoliqu.ctadiv%TYPE,
                                 dcrcinad          IN ic_decoreco.dcrcinad%TYPE,
                                 nuComprobante     IN ldci_incoliqu.comprobante%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQUMATRO  
     AUTOR     : Diego Andr?s Cardona Garc?a
     FECHA     : 01-08-2014
     DESCRIPCION  : Copia del m?todo fnuLDCI_INCOLIQUMAT
                    Funcion que se encarga de volver persistente los datos de la
                    interfaz al modelo de SAP

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor           Fecha       Descripcion
    DIANA.MONTES    22/01/2024  OSF-2196: se incluye validacion sobre vaActivo si es o no nulo para 
                                obtener el activo de configuracion.
  ************************************************************************/
  RETURN NUMBER
  IS

    vaCentBen ldci_centrobenef.cebecodi%TYPE;
    nuCategoria NUMBER;
    sbDescripcionNit VARCHAR2(200);
    vaOrdenInterna LDCI_CENCOUBGTRA.ccbgorin%TYPE;
    vaCentroCosto LDCI_CENCOUBGTRA.ccbgceco%TYPE;
    nuNIT VARCHAR2(100);
    nuRes NUMBER;
    nuValorImpt NUMBER;
    nuValorImptIva NUMBER;
    sbSegmento  ldci_centrobenef.cebesegm%TYPE;
    nuClasiCodi   ic_clascott.clctclco%TYPE;      -- Clasificador contable
    vaActivo      LDCI_ACTIUBGTTRA.acbgacti%TYPE; -- Activo
    vaSubnumero   LDCI_ACTIUBGTTRA.acbgsubn%TYPE; -- Subnumero del activo
    vaCuentaDiv   ldci_incoliqu.ctadiv%TYPE;      -- Cuenta divergente
    vaCuenta      ldci_incoliqu.clasecta%TYPE;    -- Cuenta

    --<<
    -- Edmundo E. Lara -- 31/05/2016  CA = 100-10632
    --
    vaNomAtrAct       VARCHAR2(200);  -- Nombre del atributo de activos en las ordenes de trabajo
    vaNitGdca         VARCHAR2(20);   -- Nit Gasera, para buscar el activo a reportar.
    vaNitSistemas     VARCHAR2(20);   -- Nit Gasera que ejecuta el proceso y se compara con VanitLdcs.
    osbErrorMessage   VARCHAR2(2000); -- Variable de error requerida para obtener el valor de un parametro    vaCuenta      ldci_incoliqu.clasecta%TYPE;    -- Cuenta
    csbMetodo  VARCHAR2(70) := csbSP_NAME||'fnuLDCI_INCOLIQUMATRO';
    nuError		NUMBER;
    sbError		VARCHAR2(2000);
    --
    -- Cursor para obtener el activo asociado como dato adicional a la orden de trabajo
    --
    CURSOR cuActivo(nuOrdetrab  or_order.order_id%TYPE)
    IS
    SELECT orv.value_1
      FROM or_requ_data_value orv
     WHERE orv.name_1   = vaNomAtrAct
       AND orv.order_id = nuOrdetrab;
    --
    CURSOR CuSistema
    IS
    select s.sistnitc
      from open.sistema s;
    -->>

  BEGIN
    
    pkg_traza.trace(csbMetodo, pkg_traza.cnuNivelTrzDef, pkg_traza.csbINICIO);
    --<<
    -- Edmundo E. Lara -- 31/05/2016  CA = 100-10632
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'NOMB_ATRIB_ACTIVO_OT', vaNomAtrAct, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'VAL_NIT_SERV_CUMP_GDCA', vaNitGdca, osbErrorMessage);
    -->>

    --<<
    -- Se obtiene el par?metro de clasificadores de activos
    -->>
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_COSTOS', 'CLASIACTIVOS', ldci_pkinterfazsap.vaClasiActivos, osbErrorMessage);

    --<<
    -- Se setean las variables de cuenta y cuenta divergente
    -->>
    vaCuenta    := vaCLASECTA;
    vaCuentaDiv := vaCTADIV;

        vaCentBen := ldci_pkinterfazsap.vaCentBen;
        --<<
        --Se Obtiene la Categoria con Base en la Localidad
        -->>
        IF vaCentBen IS NULL  THEN

          vaCentBen:=nvl(ldci_pkinterfazsap.fvaGetCebeNoCat(ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|')),0);

          IF (vaCentBen IS NULL OR vaCentBen = 0) THEN

             ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQUMATRO] - No se pudo obtener el centro beneficio de la localidad ['||ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|')||']';
             LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));

          END IF;

        END IF;

        --<<
        -- Se obtiene el clasificador a partir del tipo de trabajo
        -->>
        nuClasiCodi := ldci_pkinterfazactas.fvaGetClasifi(Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL));

        IF ldci_pkinterfazsap.vaMaterialAct IS NULL AND ldci_pkinterfazsap.vaMaterialIva IS NULL THEN

          --<<
          -- Se valida si pertenece al clasificador de activos
          -->>
          IF (','||ldci_pkinterfazSap.vaClasiActivos||',' LIKE '%,' ||nuClasiCodi|| ',%') THEN
            --<<
            -- Edmundo E. Lara -- 31/05/2016  CA = 100-10632
            --
            -- Se obtiene el Nit de la Gasera que esta ejecutando el proceso, esta accion se
            -- realiza para saber que metodo se debe ejecutar, ya que para GDCA se debe buscar
            -- el activo de los datos adicionales de OT y para EFIGAS se trae de la configaricion
            -- que se tiene.
            --
            OPEN CuSistema;
            FETCH CuSistema INTO vaNitSistemas;
            CLOSE CuSistema;
            --
            If vaNitGdca = vaNitSistemas then
                --
                -- Se obtiene el activo a partir de la orden de trabajo para GDCA
                -- se utiliza el metodo ldci_pkinterfazsap.fvaGetActivoRO
                --
                OPEN cuActivo(ldci_pkinterfazsap.fvaGetData(50,dcrcinad,'|'));
                FETCH cuActivo INTO vaActivo;
                CLOSE cuActivo;
                
                
                if vaActivo is null then

                    nuRes:=ldci_pkinterfazsap.fvaGetActivo(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                           Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL),vaActivo, vaSubnumero,vaOrdenInterna);

                else

                    nuRes:=ldci_pkinterfazsap.fvaGetActivoRO(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                            Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL),vaActivo, vaSubnumero,vaOrdenInterna);

                end if;
                
            Else
                -- Se obtiene el activo de la configuracion para EFIGAS
                nuRes:=ldci_pkinterfazsap.fvaGetActivo(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                                       Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL),vaActivo, vaSubnumero,vaOrdenInterna);
                --
            End If;
            --
            -->>

            --<<
            -- Se setea la cuenta que ya trae como cuenta divergente
            -->>
            vaCuentaDiv := vaCLASECTA;

            --<<
            -- Se setea el activo como cuenta
            -->>
            vaCuenta   := vaActivo||'-'||vaSubnumero;

          ELSE

            nuRes:=ldci_pkinterfazsap.fvaGetOICECO(ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|'), ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|'),
                                                   Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL), vaCentroCosto, vaOrdenInterna);

          END IF;
        
        END IF;

        IF vaCentroCosto = -1 THEN
        vaCentroCosto := NULL;
        END IF;

        sbDescripcionNit :=ldci_pkinterfazsap.fvaGetDescripNit(ldci_pkinterfazsap.vaNit);

        nuValorImpt := 0;
        nuValorImptIva := 0;

          IF vaINDRETEC IS NOT NULL THEN

            IF ',' || ldci_pkinterfazsap.vaItemsReteIva || ',' LIKE '%,' || ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|') || ',%'  THEN

              nuValorImpt := round(ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|')*To_Number(ldci_pkinterfazsap.vaIva)/100);

            ELSE

              nuValorImpt := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');

            END IF;

          ELSE

          nuValorImpt := NULL;

          END IF;

          IF ldci_pkinterfazsap.fvaGetData(47,dcrcinad,'|') = 'IVA' AND SubStr(vaCLASECTA,0,2) = '24' THEN

          nuValorImptIva := ldci_pkinterfazsap.fvaGetData(33,dcrcinad,'|');

          END IF;

         sbSegmento:=nvl(fvaGetSegmento(vaCentBen),0);

        if (vtyLDCI_INCOLIQU.count = 0) then
            ldci_pkinterfazsap.nuIncoliqu := 1;
        ELSE
            ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
        END IF;

          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO := nuICLITIDO;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO := nuICLINUDO;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH := dtICLIFECH;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA := vaICLIUSUA;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM := vaICLITERM;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR := dtICLIFECR;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF := vaCentBen;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA := nuCOD_CLASIFCONTA;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT := vaCLAVCONT;


          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA := vaCuenta;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN := ldci_pkinterfazsap.vaNit;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 := ldci_pkinterfazsap.vaNit;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 := sbDescripcionNit;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV   := vaCuentaDiv;

          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME := vaINDICCME;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX := nuIMPOMTRX;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC := nuIMPOMSOC;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA := vaINDICIVA;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO := ldci_pkinterfazsap.vaCODPAGO;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE := trunc(sysdate);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR := ldci_pkinterfazsap.vaFactura;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT := Trunc(nuValorImptIva);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO := vaCentroCosto;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT := vaOrdenInterna;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD := nuCANTIDAD;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN := vaTXTPOSCN;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE := vaCentBen;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO := sbSegmento;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO := vaOBJCOSTO;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 := vaCLAVREF2;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL := vaSOCIEDGL;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL := vaMATERIAL;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC := vaTIPORETC;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC := vaINDRETEC;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC := Trunc(nuValorImpt) ;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE := nuNUSEINSE;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR :=TRUNC(sysdate);
          --<<
          --Campos que se obtienen desde el campo vtyDatIngresos(i).dcrcinad
          -->>
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNINEGO:=Nvl(ldci_pkinterfazsap.fvaGetData(1,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IDENTIFI:=Nvl(ldci_pkinterfazsap.fvaGetData(2,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITTERCE:=nuNIT;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CATEGORI:=nuCategoria;
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUBCATEG:=ldci_pkinterfazsap.fvaGetData(6,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCRECA:=Nvl(ldci_pkinterfazsap.fvaGetData(7,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BANCTRAN:=Nvl(ldci_pkinterfazsap.fvaGetData(8,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EDADEUDA:=Nvl(ldci_pkinterfazsap.fvaGetData(9,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOSERV:=Nvl(ldci_pkinterfazsap.fvaGetData(10,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NIPRESTA:=Nvl(ldci_pkinterfazsap.fvaGetData(11,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOCART:=Nvl(ldci_pkinterfazsap.fvaGetData(12,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONCILIA:=Nvl(ldci_pkinterfazsap.fvaGetData(13,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DOCSOPOR:=Nvl(ldci_pkinterfazsap.fvaGetData(14,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG1:=ldci_pkinterfazsap.fvaGetData(15,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG2:=ldci_pkinterfazsap.fvaGetData(16,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG3:=ldci_pkinterfazsap.fvaGetData(17,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG4:=ldci_pkinterfazsap.fvaGetData(18,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UBIGEOG5:=ldci_pkinterfazsap.fvaGetData(19,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ANIO:=ldci_pkinterfazsap.fvaGetData(20,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MES:=ldci_pkinterfazsap.fvaGetData(21,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRSERV:=ldci_pkinterfazsap.fvaGetData(22,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRRECA:=ldci_pkinterfazsap.fvaGetData(23,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CICLFACT:=ldci_pkinterfazsap.fvaGetData(24,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRFACT:=ldci_pkinterfazsap.fvaGetData(25,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).EMPRCICL:=ldci_pkinterfazsap.fvaGetData(26,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLDOCPAG:=ldci_pkinterfazsap.fvaGetData(28,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SUCBANC:=ldci_pkinterfazsap.fvaGetData(29,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).UNIDCONS:=ldci_pkinterfazsap.fvaGetData(31,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).DIASPROV:=ldci_pkinterfazsap.fvaGetData(32,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANRE:=ldci_pkinterfazsap.fvaGetData(34,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPBANRE:=ldci_pkinterfazsap.fvaGetData(35,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITBANTR:=ldci_pkinterfazsap.fvaGetData(36,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CUPON:=Nvl(ldci_pkinterfazsap.fvaGetData(37,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NITCAJER:=ldci_pkinterfazsap.fvaGetData(38,dcrcinad,'|');
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB:=Nvl(ldci_pkinterfazsap.fvaGetData(39,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(40,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CAULEGAL:=Nvl(ldci_pkinterfazsap.fvaGetData(41,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).PROYECTO:=Nvl(ldci_pkinterfazsap.fvaGetData(43,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPUNIOP:=Nvl(ldci_pkinterfazsap.fvaGetData(44,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ENTCONCI:=Nvl(ldci_pkinterfazsap.fvaGetData(45,dcrcinad,'|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ITEM:=Nvl(ldci_pkinterfazsap.fvaGetData(46,dcrcinad, '|'),NULL);
          vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE := nuComprobante;

        -- Obtiene Libro
        sbLEDGERS := fsbGetLedgers(nuICLITIDO, nuComprobante);

        vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS := sbLEDGERS;
        pkg_traza.trace(csbMetodo, pkg_traza.cnuNivelTrzDef, pkg_traza.csbFIN);
  return(0);
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQUMATRO] - No se pudieron almacenar los registros en la tabla LDCI_INCOLIQU. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       pkg_Error.setError;
       pkg_Error.getError(nuError, sbError);
       pkg_traza.trace('sbError: ' || sbError, csbNivelTraza);
       pkg_traza.trace(csbMetodo, csbNivelTraza, pkg_traza.csbFIN_ERR);
       return(-1);
  end fnuLDCI_INCOLIQUMATRO;


FUNCTION fnuDatosVentaBrilla(inuPackage_id IN mo_packages.package_id%type)
  RETURN VARCHAR2
  IS
   CURSOR cuDatosVentaBrilla
  IS
  select (SELECT gc.nombre_contratista FROM open.ge_contratista gc
            WHERE gc.id_contratista = ge.id_contratista) nombre_vendedor
         ,(SELECT sb.identification FROM open.ge_contratista gc, open.GE_SUBSCRIBER sb
            WHERE gc.subscriber_id = sb.subscriber_id
              AND gc.id_contratista = ge.id_contratista) nit_vendedor
    from open.or_order o, open.OR_OPERATING_UNIT ou, open.ge_contratista ge, open.mo_packages mp, open.or_order_activity a
    where o.operating_unit_id = ou.operating_unit_id
      and ou.contractor_id = ge.id_contratista
      AND a.package_id = mp.package_id
      AND o.order_id = a.order_id
      and o.task_type_id = 10144
      AND o.order_status_id = open.dald_parameter.fnuGetNumeric_Value('COD_ORDER_STATUS')
      and mp.package_id = inuPackage_id;

  BEGIN

      ldci_pkinterfazsap.vaNombre_contratista := NULL;
      ldci_pkinterfazsap.vaIdentification     := NULL;

      --<<
      --Obtencion de los datos de la venta de brilla
      -->>
      open cuDatosVentaBrilla;
      fetch cuDatosVentaBrilla into ldci_pkinterfazsap.vaNombre_contratista, ldci_pkinterfazsap.vaIdentification;
      IF (cuDatosVentaBrilla%NOTFOUND) THEN
          ldci_pkinterfazsap.vaIdentification := '9994';
          ldci_pkinterfazsap.vaNombre_contratista := NULL;
      END IF;
      close cuDatosVentaBrilla;
      RETURN(ldci_pkinterfazsap.vaIdentification);
  EXCEPTION
  WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuDatosVentaBrilla] - No se pudo obtener el contratista que vendio. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,TRUNC(SYSDATE)||'Error fnuDatosVentaBrilla :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'L1',USER,USERENV('TERMINAL'));
       ldci_pkinterfazsap.vaNombre_contratista := NULL;
       ldci_pkinterfazsap.vaIdentification     := NULL;
       RETURN(-1);
  END fnuDatosVentaBrilla;

FUNCTION fnuDatosVentaBrillaRO(inuPackage_id IN mo_packages.package_id%type)
--                               , inuClasifi_id In ic_clascont.clcocodi%type)
  RETURN VARCHAR2
  IS

   --< CA-288
   osbErrorMessage VARCHAR2(2000);
   sbuniopecardif  ldci_carasewe.casevalo%TYPE;  -- 'UNIDAD_OPERATIVA_CARDIF'
   -->>

   CURSOR cuDatosVentaBrilla
  IS
  select (SELECT gc.nombre_contratista FROM open.ge_contratista gc
            WHERE gc.id_contratista = ge.id_contratista) nombre_vendedor
         ,(SELECT sb.identification FROM open.ge_contratista gc, open.GE_SUBSCRIBER sb
            WHERE gc.subscriber_id = sb.subscriber_id
              AND gc.id_contratista = ge.id_contratista) nit_vendedor
    from open.or_order o, open.OR_OPERATING_UNIT ou, open.ge_contratista ge, open.mo_packages mp, open.or_order_activity a
    where o.operating_unit_id = ou.operating_unit_id
      and ou.contractor_id = ge.id_contratista
      AND a.package_id = mp.package_id
      AND o.order_id = a.order_id
      and o.task_type_id = 10144
      AND o.order_status_id = open.dald_parameter.fnuGetNumeric_Value('COD_ORDER_STATUS')
      --<< CA-288
      --   Se omite la unidad operativa de CARDIF para que tome el NIT del proveedor que hizo la venta
      AND o.operating_unit_id NOT IN (SELECT TO_NUMBER(COLUMN_VALUE)
                                        FROM TABLE
                                      (open.LDC_BOUTILITIES.SPLITSTRINGS(sbuniopecardif,',')) ) --
      -->>
      and mp.package_id = inuPackage_id;

      CURSOR cuNit IS
        SELECT casevalo
          FROM ldci_carasewe
         WHERE casecodi = 'NIT_GENERAL';

   NITGENE         VARCHAR2(2000);

  BEGIN
      --<< CA-288
      --   Buscamos unidad operativa de CARDIF para omitarla en las ventas de BRILLA y traiga el
      --   NIT del proveedor que hizo la venta.
      LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'UNIDAD_OPERATIVA_CARDIF', sbuniopecardif, osbErrorMessage);
      -->>

      --
      ldci_pkinterfazsap.vaNombre_contratista := NULL;
      ldci_pkinterfazsap.vaIdentification     := NULL;

      --<<
      --Obtencion de los datos de la venta de brilla
      -->>
      /*
      -- << CA-398
      OPEN cuNit;
      FETCH cuNit INTO NITGENE;
      CLOSE cuNit;
      */

      open cuDatosVentaBrilla;
      fetch cuDatosVentaBrilla into ldci_pkinterfazsap.vaNombre_contratista, ldci_pkinterfazsap.vaIdentification;
      IF (cuDatosVentaBrilla%NOTFOUND) THEN
         --<< CA-398
         -- Retornamos el nit Generico del clasificador, 2 = Brilla, en este caso
         ldci_pkinterfazsap.vaIdentification := ldci_pkinterfazsap.fnuGetNitGenerico(2);
         --ldci_pkinterfazsap.vaIdentification := NITGENE;
         -- CA-398
         -- >>
         ldci_pkinterfazsap.vaNombre_contratista := NULL;
      END IF;
      close cuDatosVentaBrilla;
      RETURN(ldci_pkinterfazsap.vaIdentification);
  EXCEPTION
  WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError := '[fnuDatosVentaBrilla] - No se pudo obtener el contratista que vendio. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,TRUNC(SYSDATE)||'Error fnuDatosVentaBrilla :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'L1',USER,USERENV('TERMINAL'));
       ldci_pkinterfazsap.vaNombre_contratista := NULL;
       ldci_pkinterfazsap.vaIdentification     := NULL;
       RETURN(-1);
  END fnuDatosVentaBrillaRO;


  FUNCTION fvaGetClaveConta (nucuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN ic_decoreco.dcrcsign%TYPE)
  return VARCHAR
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetClaveConta
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la clave apartir de la cuenta

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuGetClave IS
    SELECT *
      FROM LDCI_CTACADMI
      WHERE ctcacodi = nucuctcodi;


   ovaClave LDCI_CTACADMI.ctcaclcr%TYPE;

   rgcuGetClave cuGetClave%ROWTYPE;

  begin

  OPEN cuGetClave;
  FETCH cuGetClave INTO rgcuGetClave;
  CLOSE cuGetClave;

     IF vaSigno = 'C' THEN

     ovaClave := rgcuGetClave.CTCACLCR;

     ELSIF vaSigno = 'D' THEN

     ovaClave := rgcuGetClave.CTCACLDB;


     END IF;

     RETURN ovaClave;
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveConta] - No se pudo obtener la clave. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  end fvaGetClaveConta;


  FUNCTION fvaGetNaturaleza (ivaclave LDCI_INCOLIQU.clavcont%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetNaturaleza
     AUTOR     : Heiber Barco
     FECHA     : 07-03-2014
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de la naturaleza de la clave

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  return VARCHAR
  is
     cursor cuClave
     is
     select clavoper
     from ldci_claveconta
     where clavcodi = ivaclave;


     vaOpera          ldci_claveconta.clavoper%TYPE;
  begin

     open cuClave;
     fetch cuClave into vaOpera;
     close cuClave;

     return(vaOpera);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetNaturaleza] - No se pudo obtener La naturaleza de la clave '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.nuCODDOCUINTEINGRSAP,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.nuCODDOCUINTEINGRSAP,USER,USERENV('TERMINAL'));
       return('-1');
end fvaGetNaturaleza;


FUNCTION fnuDistriImpuesto ( nutimocodi IN VARCHAR2,
        nuSeqICLINUDO IN NUMBER,
        vaSOCIEDAD IN VARCHAR2,
        daFechaIni     IN   factura.factfege%type,
        daFechaFin     IN   factura.factfege%type
    )
/************************************************************************
  Historia de Modificaciones
  Autor    Fecha         Descripcion
  orestrepo	23-Mar_2015 Se realizan ajustes a la funcion fnuDistriImpuesto
						que realiza la distribuci?n de los impuestos para la
						interfaz de ingreso de GDO , donde se tiene en cuenta
						los ingresos por constructoras que son excluidos por
						el proceso se Servicios Cumplidos (ingresos provisionados)

************************************************************************/

RETURN NUMBER
IS
        sbLEDGERS VARCHAR2(100):='TL';
        vaMesaje VARCHAR2(100);
        nuComprobante number := 25;

        nuRet NUMBER := NULL;
        sbOrdInt number;
        vaCtaImp VARCHAR2(100) := '2445020000';
        vaNaturacart VARCHAR2(100) := 'D';
        vaNaturaImpt VARCHAR2(100) := 'C';
        nuSecuenciaLocal  NUMBER;
        nuNIT VARCHAR2(100);

        /*Obtener Valores de los parametros*/
        vaClasOrden VARCHAR2(200) ;
        vaCtaOrdDB VARCHAR2(200) ;
        vaCtaOrdCR VARCHAR2(200) ;
        vaCtacart137 VARCHAR2(200) ;
        vaCtacart287 VARCHAR2(200) ;
        vaCtaIva VARCHAR2(200) ;
        nuClasIvaRed VARCHAR2(200) ;
        nuClasIvapleno VARCHAR2(200) ;
        nuConcIvapleno NUMBER ;
        nuconcIvaRed NUMBER ;
        vaClave  VARCHAR2(100);
        ovaCTCAICME VARCHAR2(100);
        ovaCTCAINIV VARCHAR2(100);
        vaTmpsigno VARCHAR2(100);
        nuCantidad NUMBER :=0;
        nuPorc NUMBER :=0;
        ERROR_P EXCEPTION;
        ERROR_DATOS EXCEPTION;

        nuerconcep NUMBER;
        nuerconimpto NUMBER;
        nuValor  NUMBER;
        vaerrfec VARCHAR2(200);
        vaerrprod VARCHAR2(200);


          /*Se obtienen los % de Impuestos en una fecha para un concepto*/
            CURSOR cuPorcIVA (indaFecha IN VARCHAR2,inTipoProd IN NUMBER,inconcep IN NUMBER) IS
                SELECT CO.COTCSERV,CO.COTCCONC,To_Number(((1*RA.RAVPPORC)/100))  PORC
	                FROM open.TA_CONFTACO CO, Open.TA_TARICOPR TA,OPEN.TA_VIGETACP VI, OPEN.TA_RANGVITP RA
	                WHERE cotcconc in (137,287)
	                AND cotccons = tacpcotc
	                AND tacpcons = vitptacp
	                AND vitpcons = ravpvitp
	                AND indaFecha between TRUNC(VI.VITPFEIN) AND TRUNC(VI.VITPFEFI)
	                AND CO.COTCSERV = inTipoProd
	                AND CO.COTCCONC = inconcep
                GROUP BY RA.RAVPPORC,CO.COTCCONC,CO.COTCSERV;

          TYPE tyDatcuPorcIVA IS TABLE OF cuPorcIVA%ROWTYPE INDEX BY BINARY_INTEGER;
          vtyDatcuPorcIVA tyDatcuPorcIVA;


          /*Validaci?n de Clasificadores que van a cuentas de Orden*/
          CURSOR cuParametros (vaCadena IN VARCHAR2,vaParametro IN VARCHAR2) IS
            SELECT INSTR(vaCadena,vaParametro) CANT FROM DUAL ;

        /*Se Obtienen los cargos Base para la distribuci?n de los impuestos*/
        /*FACTURACION*/
          CURSOR cuImptFacConcepto IS
            SELECT
            'FACTURA' TIPODOC,
            MOVISERV,
            To_Char(MOVIFECO) FECHA,
            TIPO,
            CLASIF_IMPTO,
            clcocodi clas_base,
            clcodesc desc_clas_base,
            CONC_BASE,
            DESC_CONC_BASE,
            CONC_IMPT,
            DESC_CONC_IMPT,
            MOVISIGN,
            open.ldci_pkinterfazsap.fvaGetSegmento(CEBE) SEGMENTO,
            CEBE,
            Round(Sum(MOVIVALO)) MOVIVALO
          FROM
          (
                  SELECT
                        'BASE' TIPO,
                        Decode(cod_clasificador,nuClasIvaRed,((base.movivalo-(base.movivalo/1.07))*(16/100)),(base.movivalo*(16/100))) impuesto_orig,
                        cod_clasificador CLASIF_IMPTO,
                        concbali.conc_base,
                        concbali.desc_conc_base,
                        concbali.conc_impt,
                        concbali.desc_conc_impt,
                        open.ldci_pkinterfazsap.fvaGetCebeNew(MOVIUBG3,MOVICATE) CEBE,
                        MOVICATE CATEGORIA,MOVIUBG3 LOCALIDAD,
                        base.*
                  FROM
                      (
                          SELECT MOVISERV,MOVIFECO, MOVICONC,MOVICACA, MOVISIGN,MOVICATE,MOVIUBG3, MOVIVALO--Decode(MOVISIGN,'C',-MOVIVALO,MOVIVALO) MOVIVALO
                            FROM OPEN.IC_MOVIMIEN
                              WHERE
                              (movitido, movinudo, movifeco)
                              in
                              ( SELECT dogetido, dogenudo, dogefemo
                                  FROM OPEN.ic_docugene
                                  WHERE dogetido = 71
                                  AND dogefemo between daFechaIni
                                  AND daFechaFin
                              )
                              AND MOVITIMO = 1
                              AND MOVITIHE = 'F'
                              AND (
                                    MOVICACA NOT IN (5,6,20,23,35,50,56,51,46)
                                    OR
                                    (MOVICACA IN (51,20) AND MOVICONC IN (select unique conccoin  from open.concepto where conccoin > 0))
                                  )

                      ) base,
                      (--Conceptos Base de Impuestos
                          SELECT
                          coblcoba conc_base,OPEN.pktblconcepto.fsbgetconcdesc(coblcoba) desc_conc_base,
                          coblconc conc_impt,OPEN.pktblconcepto.fsbgetconcdesc(coblconc) desc_conc_impt
                          FROM OPEN.concbali
                      ) concbali  ,
                      (select CONCCODI concepto, CONCCLCO cod_clasificador
                                                from open.concepto
                                                  left join open.ic_clascont on (CONCCLCO=clcocodi)
                                                  where CONCCLCO IN (nuClasIvaRed,nuClasIvapleno)
                    ) clasificador
                      WHERE base.moviconc =  concbali. conc_base
                      AND conc_impt =  concepto
            ), OPEN.concepto,OPEN.ic_clascont
            WHERE CONC_BASE = conccodi
            AND concclco = clcocodi
            GROUP BY TIPO,clcocodi,clcodesc,MOVIFECO,
            MOVISERV,
            CLASIF_IMPTO,
            CONC_BASE,
            DESC_CONC_BASE,
            CONC_IMPT,
            DESC_CONC_IMPT,
            MOVISIGN,
            CEBE
        UNION
        --NOTAS
            SELECT
            'NOTA' TIPODOC,
            MOVISERV,
            To_Char(MOVIFECO) FECHA,
            TIPO,
            CLASIF_IMPTO,
            clcocodi clas_base,
            clcodesc desc_clas_base,
            CONC_BASE,
            DESC_CONC_BASE,
            CONC_IMPT,
            DESC_CONC_IMPT,
            MOVISIGN,
            open.ldci_pkinterfazsap.fvaGetSegmento(CEBE) SEGMENTO,
            CEBE,
            Round(Sum(MOVIVALO)) MOVIVALO
          FROM
          (
                  SELECT
                        'BASE' TIPO,
                        Decode(cod_clasificador,nuClasIvaRed,((base.movivalo-(base.movivalo/1.07))*(16/100)),(base.movivalo*(16/100))) impuesto_orig,
                        cod_clasificador CLASIF_IMPTO,
                        concbali.conc_base,
                        concbali.desc_conc_base,
                        concbali.conc_impt,
                        concbali.desc_conc_impt,
                        open.ldci_pkinterfazsap.fvaGetCebeNew(MOVIUBG3,MOVICATE) CEBE,
                        MOVICATE CATEGORIA,MOVIUBG3 LOCALIDAD,
                        base.*
                  FROM
                      (
                          SELECT MOVISERV,MOVIFECO, MOVICONC,MOVICACA, MOVISIGN,MOVICATE,MOVIUBG3, MOVIVALO--Decode(MOVISIGN,'C',-MOVIVALO,MOVIVALO) MOVIVALO
                            FROM OPEN.IC_MOVIMIEN
                              WHERE
                              (movitido, movinudo, movifeco)
                              in
                              ( SELECT dogetido, dogenudo, dogefemo
                                  FROM OPEN.ic_docugene
                                  WHERE dogetido = 73
                                  AND dogefemo between daFechaIni
                                  AND daFechaFin
                              )
                              AND MOVITIMO = 16
                              AND MOVITIHE IS NULL
                              AND (
                                    MOVICACA  IN (1,3,4,21,53)
                                    OR
                                    (MOVICACA IN (51,20) AND MOVICONC IN (select unique conccoin  from open.concepto where conccoin > 0))
                                  )
                      ) base,
                      (--Conceptos Base de Impuestos

                          SELECT
                          coblcoba conc_base,OPEN.pktblconcepto.fsbgetconcdesc(coblcoba) desc_conc_base,
                          coblconc conc_impt,OPEN.pktblconcepto.fsbgetconcdesc(coblconc) desc_conc_impt
                          FROM OPEN.concbali
                      ) concbali  ,
                      (select CONCCODI concepto, CONCCLCO cod_clasificador
                                                from open.concepto
                                                  left join open.ic_clascont on (CONCCLCO=clcocodi)
                                                  where CONCCLCO IN (nuClasIvaRed,nuClasIvapleno)

                    ) clasificador
                      WHERE base.moviconc =  concbali. conc_base
                      AND conc_impt =  concepto
            ), OPEN.concepto,OPEN.ic_clascont
            WHERE CONC_BASE = conccodi
            AND concclco = clcocodi
            GROUP BY TIPO,clcocodi,clcodesc,MOVIFECO,
            MOVISERV,
            CLASIF_IMPTO,
            CONC_BASE,
            DESC_CONC_BASE,
            CONC_IMPT,
            DESC_CONC_IMPT,
            MOVISIGN,
            CEBE
        UNION
        SELECT
            'SC' TIPODOC,
            MOVISERV,
            To_Char(MOVIFECO) FECHA,
            TIPO,
            CLASIF_IMPTO,
            clcocodi clas_base,
            clcodesc desc_clas_base,
            CONC_BASE,
            DESC_CONC_BASE,
            CONC_IMPT,
            DESC_CONC_IMPT,
            MOVISIGN,
            open.ldci_pkinterfazsap.fvaGetSegmento(CEBE) SEGMENTO,
            CEBE,
            Round(Sum(MOVIVALO)) MOVIVALO
          FROM
          (
                  SELECT
                        'BASE' TIPO,
                        Decode(cod_clasificador,nuClasIvaRed,((base.movivalo-(base.movivalo/1.07))*(16/100)),(base.movivalo*(16/100))) impuesto_orig,
                        cod_clasificador CLASIF_IMPTO,
                        concbali.conc_base,
                        concbali.desc_conc_base,
                        concbali.conc_impt,
                        concbali.desc_conc_impt,
                        open.ldci_pkinterfazsap.fvaGetCebeNew(MOVIUBG3,MOVICATE) CEBE,
                        MOVICATE CATEGORIA,MOVIUBG3 LOCALIDAD,
                        base.*
                  FROM
                      (
                          SELECT MOVISERV,MOVIFECO, MOVICONC,MOVICACA, MOVISIGN,MOVICATE,MOVIUBG3, MOVIVALO--Decode(MOVISIGN,'C',-MOVIVALO,MOVIVALO) MOVIVALO
                            FROM OPEN.IC_MOVIMIEN
                              WHERE
                              (movitido, movinudo, movifeco)
                              in
                              ( SELECT dogetido, dogenudo, dogefemo
                                  FROM OPEN.ic_docugene
                                  WHERE dogetido IN (71,73)
                                  AND dogefemo between daFechaIni
                                  AND daFechaFin
                              )
                              AND MOVITIMO IN (1,16)
                              AND MOVITIHE = 'SC'
                              AND MOVICACA  IN (1,3,4,41,53)
                              AND MOVISERV <> 6121

                      ) base,
                      (/*Conceptos Base de Impuestos*/
                          SELECT
                          coblcoba conc_base,OPEN.pktblconcepto.fsbgetconcdesc(coblcoba) desc_conc_base,
                          coblconc conc_impt,OPEN.pktblconcepto.fsbgetconcdesc(coblconc) desc_conc_impt
                          FROM OPEN.concbali
                      ) concbali  ,
                      (select CONCCODI concepto, CONCCLCO cod_clasificador
                                                from open.concepto
                                                  left join open.ic_clascont on (CONCCLCO=clcocodi)
                                                  where CONCCLCO IN (nuClasIvaRed,nuClasIvapleno)
                    ) clasificador
                      WHERE base.moviconc =  concbali. conc_base
                      AND conc_impt =  concepto
            ), OPEN.concepto,OPEN.ic_clascont
            WHERE CONC_BASE = conccodi
            AND concclco = clcocodi
            GROUP BY TIPO,clcocodi,clcodesc,MOVIFECO,
            MOVISERV,
            CLASIF_IMPTO,
            CONC_BASE,
            DESC_CONC_BASE,
            CONC_IMPT,
            DESC_CONC_IMPT,
            MOVISIGN,
            CEBE;

          TYPE tyDatcuImptFacConcepto IS TABLE OF cuImptFacConcepto%ROWTYPE INDEX BY BINARY_INTEGER;
          vtyDatcuImptFacConcepto tyDatcuImptFacConcepto;


      BEGIN

			/*Se Obtienen los parametros para la distribuci?n de los impuestos*/
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PavaClasOrden',vaClasOrden, osbErrorMessage);
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PavaCtaOrdDB',vaCtaOrdDB, osbErrorMessage);
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PavaCtaOrdCR',vaCtaOrdCR, osbErrorMessage);
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PavaCtacart137',vaCtacart137, osbErrorMessage);
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PavaCtacart287',vaCtacart287, osbErrorMessage);
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PavaCtaIva',vaCtaIva, osbErrorMessage);
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PanuClasIvaRed',nuClasIvaRed, osbErrorMessage);
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PanuClasIvapleno',nuClasIvapleno, osbErrorMessage);
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PanuConcIvapleno',nuConcIvapleno, osbErrorMessage);
			LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'PanuconcIvaRed',nuconcIvaRed, osbErrorMessage);


			/*Se Obtienen los datos Base para el calculo del Impuesto*/
       /*     OPEN cuImptFacConcepto;
            FETCH cuImptFacConcepto BULK COLLECT INTO vtyDatcuImptFacConcepto;
            CLOSE cuImptFacConcepto;
*/
 OPEN cuImptFacConcepto;
 LOOP
 FETCH cuImptFacConcepto BULK COLLECT INTO vtyDatcuImptFacConcepto
 LIMIT cnuLimite;
 exit when (cuImptFacConcepto%NOTFOUND is null) OR (vtyDatcuImptFacConcepto.first IS null);

            IF (vtyDatcuImptFacConcepto.count = 0) THEN
                        RAISE ERROR_DATOS;
            END IF;

			--Dbms_Output.Put_Line('segmento|CEBE|tipodoc|producto|Tipodecuentas|fecha|clasimpto|concimpto|clasificador|concbase|signo|clave|cuenta|vlrbase|porcen|impuesto_cursor');

			FOR j IN vtyDatcuImptFacConcepto.first..vtyDatcuImptFacConcepto.last LOOP

				/*Se identifican los Clasificadores que deberian ir a cuentas de Orden*/
                OPEN cuParametros (','||vaClasOrden||',',','||vtyDatcuImptFacConcepto(j).clas_base||',');
                FETCH cuParametros INTO nuCantidad;
                CLOSE cuParametros;

                nuSecuenciaLocal := nuSecuenciaLocal+1;
                nunit := OPEN.ldci_pkinterfazsap.fnuGetNitGenerico(vtyDatcuImptFacConcepto(j).clas_base);

				/*Se identifican los datos de los Impuestos Calculados*/
                OPEN cuPorcIVA(vtyDatcuImptFacConcepto(j).FECHA,vtyDatcuImptFacConcepto(j).MOVISERV,vtyDatcuImptFacConcepto(j).CONC_IMPT);
                FETCH cuPorcIVA BULK COLLECT INTO vtyDatcuPorcIVA;
                CLOSE cuPorcIVA;

                nuerconimpto := vtyDatcuImptFacConcepto(j).CONC_IMPT;
                nuerconcep := vtyDatcuImptFacConcepto(j).CONC_BASE;
                vaerrfec := vtyDatcuImptFacConcepto(j).FECHA;
                vaerrprod := vtyDatcuImptFacConcepto(j).MOVISERV;
                nuValor := vtyDatcuImptFacConcepto(j).MOVIVALO;

                IF (vtyDatcuPorcIVA.count = 0) THEN
                              nuPorc := 0;
							--RAISE ERROR_P;
                ELSE

				/*Se identifica el Porcentaje con el que se calcula el impuesto*/
					FOR i IN vtyDatcuPorcIVA.first..vtyDatcuPorcIVA.last LOOP
                          IF(vtyDatcuPorcIVA(i).COTCCONC = vtyDatcuImptFacConcepto(j).CONC_IMPT) THEN
                             nuPorc := vtyDatcuPorcIVA(i).PORC;
                          END IF;
					END LOOP;
                END IF;

				/*Se Identifica los datos que son base, si corresponden a Servicios Cumplidos*/
					IF (vtyDatcuImptFacConcepto(j).TIPODOC = 'SC') THEN
							IF (vtyDatcuImptFacConcepto(j).MOVISIGN = 'D') THEN
									vaTmpsigno := 'C';
							ELSE
									vaTmpsigno := 'D';
							END IF;

								vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaOrdDB,vaTmpsigno,100,ovaCTCAICME,ovaCTCAINIV);
								IF (vaClave IS NULL) THEN
 						            LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaOrdDB,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
								END IF;

							/*Si los registros de la Base son del concepto de Impuesto Pleno*/
							IF (vtyDatcuImptFacConcepto(j).CLASIF_IMPTO = nuConcIvapleno) THEN
								nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																					nutimocodi,
																					nuSeqICLINUDO,
																					TRUNC(sysdate),
																					user,
																					'SERVER',
																					TRUNC(sysdate),
																					vtyDatcuImptFacConcepto(j).clas_base,
																					vaClave,
																					vaCtaOrdDB,
																					NULL,
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					NULL,
																					NULL,
																					'INGRESOS '||nuSeqICLINUDO,
																					NULL,
																					NULL,
																					vaSOCIEDAD,
																					NULL,
																					NULL,
																					NULL,
																					NULL,
																					nuSecuenciaLocal,
																					NULL,
																					nunit,
																					nunit,
																					OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																					'',
																					vtyDatcuImptFacConcepto(j).CEBE,
																					sbOrdInt,
																					vtyDatcuImptFacConcepto(j).SEGMENTO,
																					vtyDatcuImptFacConcepto(j).MOVIVALO,
																					nuComprobante,
																					sbLEDGERS,
																					NULL);

								vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaOrdCR,vtyDatcuImptFacConcepto(j).MOVISIGN,100,ovaCTCAICME,ovaCTCAINIV);
								IF (vaClave IS NULL) THEN
 						            LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaOrdCR,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
								END IF;
								nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																					nutimocodi,
																					nuSeqICLINUDO,
																					TRUNC(sysdate),
																					user,
																					'SERVER',
																					TRUNC(sysdate),
																					vtyDatcuImptFacConcepto(j).clas_base,
																					vaClave,
																					vaCtaOrdCR,
																					NULL,
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					NULL,
																					NULL,
																					'INGRESOS '||nuSeqICLINUDO,
																					NULL,
																					NULL,
																					vaSOCIEDAD,
																					NULL,
																					NULL,
																					NULL,
																					NULL,
																					nuSecuenciaLocal,
																					NULL,
																					nunit,
																					nunit,
																					OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																					'',
																					vtyDatcuImptFacConcepto(j).CEBE,
																					sbOrdInt,
																					vtyDatcuImptFacConcepto(j).SEGMENTO,
																					vtyDatcuImptFacConcepto(j).MOVIVALO,
																					nuComprobante,
																					sbLEDGERS,
		                                                                            NULL);
								vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtacart137,vtyDatcuImptFacConcepto(j).MOVISIGN,100,ovaCTCAICME,ovaCTCAINIV);
								IF (vaClave IS NULL) THEN
								    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtacart137,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
								END IF;

								nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																					nutimocodi,
																					nuSeqICLINUDO,
																					TRUNC(sysdate),
																					user,
																					'SERVER',
																					TRUNC(sysdate),
																					vtyDatcuImptFacConcepto(j).clas_base,
																					vaClave,
																					vaCtacart137,
																					NULL,
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					NULL,
																					NULL,
																					'INGRESOS '||nuSeqICLINUDO,
																					NULL,
																					NULL,
																					vaSOCIEDAD,
																					NULL,
																					NULL,
																					NULL,
																					NULL,
																					nuSecuenciaLocal,
																					NULL,
																					nunit,
																					nunit,
																					OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																					'',
																					vtyDatcuImptFacConcepto(j).CEBE,
																					sbOrdInt,
																					vtyDatcuImptFacConcepto(j).SEGMENTO,
																					vtyDatcuImptFacConcepto(j).MOVIVALO,
																					nuComprobante,
																					sbLEDGERS,
																					NULL);

								IF (vtyDatcuImptFacConcepto(j).MOVISIGN = 'D') THEN
									vaTmpsigno := 'C';
								ELSE
									vaTmpsigno := 'D';
								END IF;

								vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaIva,vaTmpsigno,100,ovaCTCAICME,ovaCTCAINIV);
								IF (vaClave IS NULL) THEN
								    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaIva,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
								END IF;

								nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																					nutimocodi,
																					nuSeqICLINUDO,
																					TRUNC(sysdate),
																					user,
																					'SERVER',
																					TRUNC(sysdate),
																					vtyDatcuImptFacConcepto(j).clas_base,
																					vaClave,
																					vaCtaIva,
																					NULL,
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					NULL,
																					NULL,
																					'INGRESOS '||nuSeqICLINUDO,
																					NULL,
																					NULL,
																					vaSOCIEDAD,
																					NULL,
																					NULL,
																					NULL,
																					NULL,
																					nuSecuenciaLocal,
																					NULL,
																					nunit,
																					nunit,
																					OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																					'',
																					vtyDatcuImptFacConcepto(j).CEBE,
																					sbOrdInt,
																					vtyDatcuImptFacConcepto(j).SEGMENTO,
																					vtyDatcuImptFacConcepto(j).MOVIVALO,
																					nuComprobante,
																					sbLEDGERS,
																					NULL);


							ELSE /*Cuando la Base es del concepto de Impuesto de Red*/

								IF (vtyDatcuImptFacConcepto(j).MOVISIGN = 'D') THEN
									vaTmpsigno := 'C';
								ELSE
									vaTmpsigno := 'D';
								END IF;

								vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaOrdDB,vaTmpsigno,100,ovaCTCAICME,ovaCTCAINIV);
								IF (vaClave IS NULL) THEN
								    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaOrdDB,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
								END IF;

								nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																					nutimocodi,
																					nuSeqICLINUDO,
																					TRUNC(sysdate),
																					user,
																					'SERVER',
																					TRUNC(sysdate),
																					vtyDatcuImptFacConcepto(j).clas_base,
																					vaClave,
																					vaCtaOrdDB,
																					NULL,
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					NULL,
																					NULL,
																					'INGRESOS '||nuSeqICLINUDO,
																					NULL,
																					NULL,
																					vaSOCIEDAD,
																					NULL,
																					NULL,
																					NULL,
																					NULL,
																					nuSecuenciaLocal,
																					NULL,
																					nunit,
																					nunit,
																					OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																					'',
																					vtyDatcuImptFacConcepto(j).CEBE,
																					sbOrdInt,
																					vtyDatcuImptFacConcepto(j).SEGMENTO,
																					vtyDatcuImptFacConcepto(j).MOVIVALO,
																					nuComprobante,
																					sbLEDGERS,
																					NULL);


								vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaOrdCR,vtyDatcuImptFacConcepto(j).MOVISIGN,100,ovaCTCAICME,ovaCTCAINIV);
								IF (vaClave IS NULL) THEN
									LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaOrdCR,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
								END IF;

								nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																					nutimocodi,
																					nuSeqICLINUDO,
																					TRUNC(sysdate),
																					user,
																					'SERVER',
																					TRUNC(sysdate),
																					vtyDatcuImptFacConcepto(j).clas_base,
																					vaClave,
																					vaCtaOrdCR,
																					NULL,
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					NULL,
																					NULL,
																					'INGRESOS '||nuSeqICLINUDO,
																					NULL,
																					NULL,
																					vaSOCIEDAD,
																					NULL,
																					NULL,
																					NULL,
																					NULL,
																					nuSecuenciaLocal,
																					NULL,
																					nunit,
																					nunit,
																					OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																					'',
																					vtyDatcuImptFacConcepto(j).CEBE,
																					sbOrdInt,
																					vtyDatcuImptFacConcepto(j).SEGMENTO,
																					vtyDatcuImptFacConcepto(j).MOVIVALO,
																					nuComprobante,
																					sbLEDGERS,
																					NULL);

								vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtacart287,vtyDatcuImptFacConcepto(j).MOVISIGN,100,ovaCTCAICME,ovaCTCAINIV);
								IF (vaClave IS NULL) THEN
									LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtacart287,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
								END IF;

								nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																					nutimocodi,
																					nuSeqICLINUDO,
																					TRUNC(sysdate),
																					user,
																					'SERVER',
																					TRUNC(sysdate),
																					vtyDatcuImptFacConcepto(j).clas_base,
																					vaClave,
																					vaCtacart287,
																					NULL,
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					NULL,
																					NULL,
																					'INGRESOS '||nuSeqICLINUDO,
																					NULL,
																					NULL,
																					vaSOCIEDAD,
																					NULL,
																					NULL,
																					NULL,
																					NULL,
																					nuSecuenciaLocal,
																					NULL,
																					nunit,
																					nunit,
																					OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																					'',
																					vtyDatcuImptFacConcepto(j).CEBE,
																					sbOrdInt,
																					vtyDatcuImptFacConcepto(j).SEGMENTO,
																					vtyDatcuImptFacConcepto(j).MOVIVALO,
																					nuComprobante,
																					sbLEDGERS,
																					NULL);

								IF (vtyDatcuImptFacConcepto(j).MOVISIGN = 'D') THEN
									vaTmpsigno := 'C';
								ELSE
									vaTmpsigno := 'D';
								END IF;

								vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaOrdDB,vaTmpsigno,100,ovaCTCAICME,ovaCTCAINIV);
								IF (vaClave IS NULL) THEN
									LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaIva,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
								END IF;

								nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																					nutimocodi,
																					nuSeqICLINUDO,
																					TRUNC(sysdate),
																					user,
																					'SERVER',
																					TRUNC(sysdate),
																					vtyDatcuImptFacConcepto(j).clas_base,
																					vaClave,
																					vaCtaIva,
																					NULL,
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																					NULL,
																					NULL,
																					'INGRESOS '||nuSeqICLINUDO,
																					NULL,
																					NULL,
																					vaSOCIEDAD,
																					NULL,
																					NULL,
																					NULL,
																					NULL,
																					nuSecuenciaLocal,
																					NULL,
																					nunit,
																					nunit,
																					OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																					'',
																					vtyDatcuImptFacConcepto(j).CEBE,
																					sbOrdInt,
																					vtyDatcuImptFacConcepto(j).SEGMENTO,
																					vtyDatcuImptFacConcepto(j).MOVIVALO,
																					nuComprobante,
																					sbLEDGERS,
																					NULL);


								END IF ; --Fin impuestos SC

					ELSE IF ( nuCantidad )>0  THEN /*Clasificadores que deben ir a cuentas de orden y lo de Constructoras que va al Ingreso*/
								IF (vtyDatcuImptFacConcepto(j).MOVISERV = 6121)	THEN
									IF (vtyDatcuImptFacConcepto(j).CLASIF_IMPTO = nuConcIvapleno) THEN  --Si es del concepto de Impuesto Pleno
											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtacart137,vtyDatcuImptFacConcepto(j).MOVISIGN,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtacart137,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																								nutimocodi,
																								nuSeqICLINUDO,
																								TRUNC(sysdate),
																								user,
																								'SERVER',
																								TRUNC(sysdate),
																								vtyDatcuImptFacConcepto(j).clas_base,
																								vaClave,
																								vaCtacart137,
																								NULL,
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								NULL,
																								NULL,
																								'INGRESOS '||nuSeqICLINUDO,
																								NULL,
																								NULL,
																								vaSOCIEDAD,
																								NULL,
																								NULL,
																								NULL,
																								NULL,
																								nuSecuenciaLocal,
																								NULL,
																								nunit,
																								nunit,
																								OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																								'',
																								vtyDatcuImptFacConcepto(j).CEBE,
																								sbOrdInt,
																								vtyDatcuImptFacConcepto(j).SEGMENTO,
																								vtyDatcuImptFacConcepto(j).MOVIVALO,
																								nuComprobante,
																								sbLEDGERS,
																								NULL);

											IF (vtyDatcuImptFacConcepto(j).MOVISIGN = 'D') THEN
												vaTmpsigno := 'C';
											ELSE
												vaTmpsigno := 'D';
											END IF;

											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaIva,vaTmpsigno,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaIva,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																								nutimocodi,
																								nuSeqICLINUDO,
																								TRUNC(sysdate),
																								user,
																								'SERVER',
																								TRUNC(sysdate),
																								vtyDatcuImptFacConcepto(j).clas_base,
																								vaClave,
																								vaCtaIva,
																								NULL,
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								NULL,
																								NULL,
																								'INGRESOS '||nuSeqICLINUDO,
																								NULL,
																								NULL,
																								vaSOCIEDAD,
																								NULL,
																								NULL,
																								NULL,
																								NULL,
																								nuSecuenciaLocal,
																								NULL,
																								nunit,
																								nunit,
																								OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																								'',
																								vtyDatcuImptFacConcepto(j).CEBE,
																								sbOrdInt,
																								vtyDatcuImptFacConcepto(j).SEGMENTO,
																								vtyDatcuImptFacConcepto(j).MOVIVALO,
																								nuComprobante,
																								sbLEDGERS,
																								NULL);
									ELSE

											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtacart287,vtyDatcuImptFacConcepto(j).MOVISIGN,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtacart287,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																								nutimocodi,
																								nuSeqICLINUDO,
																								TRUNC(sysdate),
																								user,
																								'SERVER',
																								TRUNC(sysdate),
																								vtyDatcuImptFacConcepto(j).clas_base,
																								vaClave,
																								vaCtacart287,
																								NULL,
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								NULL,
																								NULL,
																								'INGRESOS '||nuSeqICLINUDO,
																								NULL,
																								NULL,
																								vaSOCIEDAD,
																								NULL,
																								NULL,
																								NULL,
																								NULL,
																								nuSecuenciaLocal,
																								NULL,
																								nunit,
																								nunit,
																								OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																								'',
																								vtyDatcuImptFacConcepto(j).CEBE,
																								sbOrdInt,
																								vtyDatcuImptFacConcepto(j).SEGMENTO,
																								vtyDatcuImptFacConcepto(j).MOVIVALO,
																								nuComprobante,
																								sbLEDGERS,
																								NULL);

											IF (vtyDatcuImptFacConcepto(j).MOVISIGN = 'D') THEN
												vaTmpsigno := 'C';
											ELSE
												vaTmpsigno := 'D';
											END IF;

											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaIva,vaTmpsigno,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaIva,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																								nutimocodi,
																								nuSeqICLINUDO,
																								TRUNC(sysdate),
																								user,
																								'SERVER',
																								TRUNC(sysdate),
																								vtyDatcuImptFacConcepto(j).clas_base,
																								vaClave,
																								vaCtaIva,
																								NULL,
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								NULL,
																								NULL,
																								'INGRESOS '||nuSeqICLINUDO,
																								NULL,
																								NULL,
																								vaSOCIEDAD,
																								NULL,
																								NULL,
																								NULL,
																								NULL,
																								nuSecuenciaLocal,
																								NULL,
																								nunit,
																								nunit,
																								OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																								'',
																								vtyDatcuImptFacConcepto(j).CEBE,
																								sbOrdInt,
																								vtyDatcuImptFacConcepto(j).SEGMENTO,
																								vtyDatcuImptFacConcepto(j).MOVIVALO,
																								nuComprobante,
																								sbLEDGERS,
																								NULL);

									END IF;

								ELSE
											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaOrdDB,vtyDatcuImptFacConcepto(j).MOVISIGN,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaOrdDB,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																							nutimocodi,
																							nuSeqICLINUDO,
																							TRUNC(sysdate),
																							user,
																							'SERVER',
																							TRUNC(sysdate),
																							vtyDatcuImptFacConcepto(j).clas_base,
																							vaClave,
																							vaCtaOrdDB,
																							NULL,
																							To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																							To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																							NULL,
																							NULL,
																							'INGRESOS '||nuSeqICLINUDO,
																							NULL,
																							NULL,
																							vaSOCIEDAD,
																							NULL,
																							NULL,
																							NULL,
																							NULL,
																							nuSecuenciaLocal,
																							NULL,
																							nunit,
																							nunit,
																							OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																							'',
																							vtyDatcuImptFacConcepto(j).CEBE,
																							sbOrdInt,
																							vtyDatcuImptFacConcepto(j).SEGMENTO,
																							vtyDatcuImptFacConcepto(j).MOVIVALO,
																							nuComprobante,
																							sbLEDGERS,
																							NULL);


											IF (vtyDatcuImptFacConcepto(j).MOVISIGN = 'D') THEN
												vaTmpsigno := 'C';
											ELSE
												vaTmpsigno := 'D';
											END IF;

											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaOrdCR,vaTmpsigno,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaOrdCR,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																							nutimocodi,
																							nuSeqICLINUDO,
																							TRUNC(sysdate),
																							user,
																							'SERVER',
																							TRUNC(sysdate),
																							vtyDatcuImptFacConcepto(j).clas_base,
																							vaClave,
																							vaCtaOrdCR,
																							NULL,
																							To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																							To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																							NULL,
																							NULL,
																							'INGRESOS '||nuSeqICLINUDO,
																							NULL,
																							NULL,
																							vaSOCIEDAD,
																							NULL,
																							NULL,
																							NULL,
																							NULL,
																							nuSecuenciaLocal,
																							NULL,
																							nunit,
																							nunit,
																							OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																							'',
																							vtyDatcuImptFacConcepto(j).CEBE,
																							sbOrdInt,
																							vtyDatcuImptFacConcepto(j).SEGMENTO,
																							vtyDatcuImptFacConcepto(j).MOVIVALO,
																							nuComprobante,
																							sbLEDGERS,
																							NULL);
								END IF; --Fin Validaci?n producto 6121
					ELSE/*Clasificadores que deben ir a cuentas de cartera e impuesto*/

									IF (vtyDatcuImptFacConcepto(j).CLASIF_IMPTO = nuConcIvapleno) THEN  --Si es del concepto de Impuesto Pleno
											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtacart137,vtyDatcuImptFacConcepto(j).MOVISIGN,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtacart137,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																								nutimocodi,
																								nuSeqICLINUDO,
																								TRUNC(sysdate),
																								user,
																								'SERVER',
																								TRUNC(sysdate),
																								vtyDatcuImptFacConcepto(j).clas_base,
																								vaClave,
																								vaCtacart137,
																								NULL,
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								NULL,
																								NULL,
																								'INGRESOS '||nuSeqICLINUDO,
																								NULL,
																								NULL,
																								vaSOCIEDAD,
																								NULL,
																								NULL,
																								NULL,
																								NULL,
																								nuSecuenciaLocal,
																								NULL,
																								nunit,
																								nunit,
																								OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																								'',
																								vtyDatcuImptFacConcepto(j).CEBE,
																								sbOrdInt,
																								vtyDatcuImptFacConcepto(j).SEGMENTO,
																								vtyDatcuImptFacConcepto(j).MOVIVALO,
																								nuComprobante,
																								sbLEDGERS,
																								NULL);

											IF (vtyDatcuImptFacConcepto(j).MOVISIGN = 'D') THEN
												vaTmpsigno := 'C';
											ELSE
												vaTmpsigno := 'D';
											END IF;

											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaIva,vaTmpsigno,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaIva,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																								nutimocodi,
																								nuSeqICLINUDO,
																								TRUNC(sysdate),
																								user,
																								'SERVER',
																								TRUNC(sysdate),
																								vtyDatcuImptFacConcepto(j).clas_base,
																								vaClave,
																								vaCtaIva,
																								NULL,
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								NULL,
																								NULL,
																								'INGRESOS '||nuSeqICLINUDO,
																								NULL,
																								NULL,
																								vaSOCIEDAD,
																								NULL,
																								NULL,
																								NULL,
																								NULL,
																								nuSecuenciaLocal,
																								NULL,
																								nunit,
																								nunit,
																								OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																								'',
																								vtyDatcuImptFacConcepto(j).CEBE,
																								sbOrdInt,
																								vtyDatcuImptFacConcepto(j).SEGMENTO,
																								vtyDatcuImptFacConcepto(j).MOVIVALO,
																								nuComprobante,
																								sbLEDGERS,
																								NULL);


									ELSE--Si es del concepto de Impuesto de la Red

											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtacart287,vtyDatcuImptFacConcepto(j).MOVISIGN,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtacart287,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																								nutimocodi,
																								nuSeqICLINUDO,
																								TRUNC(sysdate),
																								user,
																								'SERVER',
																								TRUNC(sysdate),
																								vtyDatcuImptFacConcepto(j).clas_base,
																								vaClave,
																								vaCtacart287,
																								NULL,
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								NULL,
																								NULL,
																								'INGRESOS '||nuSeqICLINUDO,
																								NULL,
																								NULL,
																								vaSOCIEDAD,
																								NULL,
																								NULL,
																								NULL,
																								NULL,
																								nuSecuenciaLocal,
																								NULL,
																								nunit,
																								nunit,
																								OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																								'',
																								vtyDatcuImptFacConcepto(j).CEBE,
																								sbOrdInt,
																								vtyDatcuImptFacConcepto(j).SEGMENTO,
																								vtyDatcuImptFacConcepto(j).MOVIVALO,
																								nuComprobante,
																								sbLEDGERS,
																								NULL);


											IF (vtyDatcuImptFacConcepto(j).MOVISIGN = 'D') THEN
												vaTmpsigno := 'C';
											ELSE
												vaTmpsigno := 'D';
											END IF;

											vaClave := OPEN.ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImptFacConcepto(j).clas_base,vaCtaIva,vaTmpsigno,100,ovaCTCAICME,ovaCTCAINIV);
											IF (vaClave IS NULL) THEN
												LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'NO HAY CLAVE PARA CLASIFICADOR '||vtyDatcuImptFacConcepto(j).clas_base||' CUENTA '||vaCtaIva,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),ldci_pkinterfazsap.vaCODINTINTERFAZ,USER,USERENV('TERMINAL'));
											END IF;

											nuRet := open.ldci_pkinterfazsap.fnuLDCI_INCOLIQU(
																								nutimocodi,
																								nuSeqICLINUDO,
																								TRUNC(sysdate),
																								user,
																								'SERVER',
																								TRUNC(sysdate),
																								vtyDatcuImptFacConcepto(j).clas_base,
																								vaClave,
																								vaCtaIva,
																								NULL,
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								To_Char(Round(vtyDatcuImptFacConcepto(j).MOVIVALO*nuPorc)),
																								NULL,
																								NULL,
																								'INGRESOS '||nuSeqICLINUDO,
																								NULL,
																								NULL,
																								vaSOCIEDAD,
																								NULL,
																								NULL,
																								NULL,
																								NULL,
																								nuSecuenciaLocal,
																								NULL,
																								nunit,
																								nunit,
																								OPEN.ldci_pkinterfazsap.fvaGetDescripNit(nunit),
																								'',
																								vtyDatcuImptFacConcepto(j).CEBE,
																								sbOrdInt,
																								vtyDatcuImptFacConcepto(j).SEGMENTO,
																								vtyDatcuImptFacConcepto(j).MOVIVALO,
																								nuComprobante,
																								sbLEDGERS,
																								NULL);
									END IF; -- Fin clasif Cuenta Ingreso
					END IF;
					END IF;
                vtyDatcuPorcIVA.DELETE;

			END LOOP;

            COMMIT;
            nuRet := OPEN.ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
            COMMIT;
            vtyDatcuPorcIVA.delete;
            vtyDatcuImptFacConcepto.delete;
END LOOP;
CLOSE cuImptFacConcepto;

            RETURN 0;

EXCEPTION
    WHEN OTHERS THEN
    ldci_pkinterfazsap.vaMensError := vaMesaje||' [fnuDistriImpuesto] - No se pudo obtener la informacion del impuesto. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'L1-Error fnuDistriImpuesto :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'L1',USER,USERENV('TERMINAL'));
    RETURN(-1);
END fnuDistriImpuesto;

-- DCARDONA
FUNCTION fnuDistriImpuestoRO ( nutimocodi IN VARCHAR2,
        nuSeqICLINUDO IN NUMBER,
        vaSOCIEDAD IN VARCHAR2,
        idtFechIni     IN   factura.factfege%type,
        idtFechFin     IN   factura.factfege%type
    )
RETURN NUMBER
IS

    vaMesaje VARCHAR2(100);
    nuSecuenciaLocal  NUMBER;
    nuComprobante number := 25;

		sbLEDGERS LDCI_INCOLIQU.LEDGERS%type;
    ovaCTCAICME  VARCHAR2(100);
    ovaCTCAINIV  VARCHAR2(100);
    vaClave  VARCHAR2(100);
    nuRet NUMBER := NULL;
    sbOrdInt number;
    vaCtaImp VARCHAR2(100) := '2445020000';
    vaNaturacart VARCHAR2(100) := 'D';
    vaNaturaImpt VARCHAR2(100) := 'C';
	  nuNIT VARCHAR2(100);

  CURSOR maximoNumero IS
    SELECT MAX(NUSEINSE) NUMERO
    FROM OPEN.LDCI_INCOLIQU
      WHERE ICLINUDO = nuSeqICLINUDO;


	/*Cuentas Clasificador*/
    CURSOR cuCuentas (nuClasificador number)
    IS
      SELECT
      unique
             COD_CLASCONT,
             DESC_CLASCONT,
             NATURA,
             CTA_CONTABLE
       FROM (
        SELECT A.COCOCODI COMP,
               G.CLCOCODI COD_CLASCONT,
               G.CLCODESC DESC_CLASCONT,
               I.RCCCNATU NATURA,
               I.RCCCCUCO CTA_CONTABLE
        FROM  OPEN.IC_COMPCONT A, OPEN.IC_TICOCONT B, OPEN.IC_CONFRECO C , OPEN.IC_TIPODOCO D ,
              OPEN.IC_TIPOMOVI E ,OPEN.IC_CLASCORE F , OPEN.IC_CLASCONT G,OPEN.IC_RECOCLCO I
        WHERE
            G.CLCOCODI = nuClasificador AND
            ROWNUM =1 AND
            I.RCCCCUCO NOT LIKE '8%' AND
            I.RCCCNATU = 'D' AND
            B.TCCOCODI = 1 AND
            D.TIDCCODI = 71 AND
            E.TIMOCODI = 1 AND
            A.COCOCODI=C.CORCCOCO AND
            C.CORCTIDO=D.TIDCCODI AND
            C.CORCTIMO=E.TIMOCODI AND
            C.CORCCONS=F.CLCRCORC AND
            F.CLCRCLCO=G.CLCOCODI AND
            F.CLCRCONS=I.RCCCCLCR (+) AND
            A.COCOTCCO=B.TCCOCODI)
      ORDER BY 1,2,4
      ;

    rgcuCuentas      cuCuentas%rowtype;
    blCarga boolean;
    nuFecha1 number;
    nuFecha2 number;
    dtFechaPivIni date;
    dtFechaPivFin date;

    /* ******************************************** */
    -- CURSOR 1
    /*IVA SERVICIOS CUMPLIDOS*/
    CURSOR cuImpuesto1 (daFecha_Inicio DATE,daFecha_Fin DATE) IS
    select ldci_pkinterfazsap.fvaGetCebeNoCat(ID_LOCALIDAD) Cebe,CATEGORIA,concclco,sum(base) base,sum(impuesto) impuesto
    from
    (
    select Localidad.ID_LOCALIDAD,Localidad.CATEGORIA,base.concclco,sum(base.cargvalo) base,sum(impu.cargvalo) impuesto from
    (select cargcuco, cargnuse, concclco, sum(decode(cargsign,'DB',cargvalo,'CR',-cargvalo)) cargvalo, sum(decode(cargsign,'DB',cargvabl,'CR',-cargvabl)) cargvabl
    from (
    select cargcuco, cargnuse, cargsign, decode(concclco,10,19,concclco) concclco, cargvalo, cargvabl
    from open.cargos, open.concepto
    where (cargcuco, cargnuse) IN (select unique c.cargcuco, c.cargnuse
       from open.cargos c,  (select UNIQUE A.PRODUCT_ID, conectados.hcecfech fech_cambesta
             from open.or_order o,
               open.mo_packages mp,
               open.or_order_activity a,
               (select hcecnuse, hcecfech from open.hicaesco
                where hcecfech >= daFecha_Inicio
                and hcecfech <= daFecha_Fin
                and hcececac = 1
                and hcececan = 96
                and hcecserv = 7014
                --and hcecnuse in (70269976, 70297857)
                ) conectados
            where o.order_id = a.order_id
             AND a.package_id = mp.package_id
             and mp.package_type_id IN (271, 100229, 329, 323)
             AND O.TASK_TYPE_ID IN (12149, 12151, 12154, 12150, 12152, 12153)
             --and o.order_id = 5557915
             AND A.PRODUCT_ID = conectados.hcecnuse) estacone
        where c.cargtipr = 'A'
         and c.cargsign in ('DB','CR')
         and substr(c.cargdoso,0,2) = 'PP'
         and c.cargnuse = estacone.PRODUCT_ID
         and c.cargconc = 287
         and c.cargcuco > 0)
    and cargconc = conccodi
    and cargtipr = 'A'
    and cargvalo = cargvabl
    AND (EXISTS (SELECT 'X'
          FROM open.concbali, open.concepto
         WHERE coblconc = conccodi
          and coblcoba = cargconc
          and concticl = 4) or cargconc = 613))
    group by cargcuco, cargnuse, concclco) base,
    (select cargcuco, cargnuse, concclco, sum(decode(cargsign,'DB',cargvalo,'CR',-cargvalo)) cargvalo, sum(decode(cargsign,'DB',cargvabl,'CR',-cargvabl)) cargvabl
    from (
    select cargcuco, cargnuse, cargsign, decode(concclco,10,19,concclco) concclco, cargvalo, cargvabl
    from open.cargos, open.concepto
    where (cargcuco, cargnuse) IN (select unique c.cargcuco, c.cargnuse
           from open.cargos c, (select UNIQUE A.PRODUCT_ID, conectados.hcecfech fech_cambesta
                  from open.or_order o,
                    open.mo_packages mp,
                    open.or_order_activity a,
                    (select hcecnuse, hcecfech from open.hicaesco
                    where hcecfech >= daFecha_Inicio
                    and hcecfech <= daFecha_Fin
                     and hcececac = 1
                     and hcececan = 96
                     and hcecserv = 7014
                     --and hcecnuse in (70269976, 70297857)
                     ) conectados
                 where o.order_id = a.order_id
                  AND a.package_id = mp.package_id
                  and mp.package_type_id IN (271, 100229, 329, 323)
                  AND O.TASK_TYPE_ID IN (12149, 12151, 12154, 12150, 12152, 12153)
                  --and o.order_id = 5557915
                  AND A.PRODUCT_ID = conectados.hcecnuse) estacone
            where c.cargtipr = 'A'
             and c.cargsign in ('DB','CR')
             and substr(c.cargdoso,0,2) = 'PP'
             and c.cargnuse = estacone.PRODUCT_ID
             and c.cargconc = 287
             and c.cargcuco > 0)
    and cargconc = conccodi
    and cargtipr = 'A'
    and cargconc = 287
    )
    group by cargcuco, cargnuse, concclco) impu,
    (
       SELECT p.product_id , b.geograp_location_id ID_LOCALIDAD,P.category_id CATEGORIA FROM  OPEN.ab_address b , pr_product p, OPEN.ge_geogra_location  g
       WHERE b.address_id = p.address_id
       AND g.geograp_location_id = b.geograp_location_id

    ) Localidad
    where base.cargcuco = impu.cargcuco
    and base.cargnuse = impu.cargnuse
    and base.cargvabl = impu.cargvabl
    and Localidad.product_id = base.cargnuse
    group by base.concclco,Localidad.ID_LOCALIDAD,Localidad.CATEGORIA
    )
    group by ID_LOCALIDAD,CATEGORIA,concclco;

-- CURSOR 2
    /*IVA SERVICIOS CUMPLIDOS CONSTRUCTORAS*/
    CURSOR cuImpuesto2 (daFecha_Inicio DATE,daFecha_Fin DATE) IS
    select ldci_pkinterfazsap.fvaGetCebeNoCat(ID_LOCALIDAD) Cebe,CATEGORIA,concclco,sum(base) base,sum(impuesto) impuesto
    from
    (
    select Localidad.ID_LOCALIDAD,Localidad.CATEGORIA,base.concclco,sum(base.cargvalo) base,sum(impu.cargvalo) impuesto from
    (
    select cargcuco, cargnuse, concclco, sum(decode(cargsign,'DB',cargvalo,'CR',-cargvalo)) cargvalo, 0 cargvabl
    from
    (
    select cargcuco, cargnuse, cargsign, decode(concclco,10,19,concclco) concclco, cargvalo, cargvabl
    from open.cargos, open.concepto
    where (cargcuco, cargnuse, cargcodo) IN (select c.cargcuco, c.cargnuse, estacone.order_id
                 from open.cargos c, (select o.order_id order_id, A.PRODUCT_ID, conectados.hcecfech fech_cambesta
                            from open.or_order o,
                              open.mo_packages mp,
                              open.or_order_activity a,
                              (select hcecnuse, hcecfech from open.hicaesco
                               where hcecfech >= daFecha_Inicio
                               and hcecfech <= daFecha_Fin
                               and hcececac = 1
                               and hcececan = 96
                               and hcecserv = 7014
                               --and hcecnuse in (70310108)
                               ) conectados
                           where o.order_id = a.order_id
                            AND a.package_id = mp.package_id
                            and mp.package_type_id IN (271, 100229, 329, 323)
                            AND O.TASK_TYPE_ID IN (12149, 12151, 12154, 12150, 12152, 12153)
                            --and o.order_id = 5557915
                            AND A.PRODUCT_ID = conectados.hcecnuse) estacone
                                        where c.cargtipr = 'A'
                                        and c.cargsign in ('DB','CR')
                                        and substr(c.cargdoso,0,2) = 'PP'
                                        and c.cargcodo = estacone.order_id
                                        and c.cargcuco > 0 )
    and cargconc = conccodi
    and cargtipr = 'A'
    --and cargcuco = 1031967322
    AND (EXISTS (SELECT 'X'
          FROM open.concbali, open.concepto
         WHERE coblconc = conccodi
          and coblcoba = cargconc
          and concticl = 4) or cargconc = 613))
    group by cargcuco, cargnuse, concclco
    ) base,
    (
    select cargcuco, cargnuse, concclco, sum(decode(cargsign,'DB',cargvalo,'CR',-cargvalo)) cargvalo, sum(decode(cargsign,'DB',cargvabl,'CR',-cargvabl)) cargvabl
    from
    (
    select cargcuco, cargnuse, cargsign, decode(concclco,10,19,concclco) concclco, cargvalo, cargvabl
    from open.cargos, open.concepto
    where (cargcuco, cargnuse) IN (select unique c.cargcuco, c.cargnuse
                 from open.cargos c, (select o.order_id order_id, A.PRODUCT_ID, conectados.hcecfech fech_cambesta
                     from open.or_order o,
                       open.mo_packages mp,
                       open.or_order_activity a,
                       (select hcecnuse, hcecfech from open.hicaesco
                       where hcecfech >= daFecha_Inicio
                        and hcecfech <= daFecha_Fin
                        and hcececac = 1
                        and hcececan = 96
                        and hcecserv = 7014
                        --and hcecnuse in (70310108)
                        ) conectados
                    where o.order_id = a.order_id
                     AND a.package_id = mp.package_id
                     and mp.package_type_id IN (271, 100229, 329, 323)
                     AND O.TASK_TYPE_ID IN (12149, 12151, 12154, 12150, 12152, 12153)
                     --and o.order_id = 5557915
                     AND A.PRODUCT_ID = conectados.hcecnuse) estacone
               where c.cargtipr = 'A'
                and c.cargsign in ('DB','CR')
                and substr(c.cargdoso,0,2) = 'PP'
                and c.cargcodo = estacone.order_id
                and c.cargcuco > 0 )
    and cargconc = conccodi
    and cargtipr = 'A'
    and cargconc = 287
    )
    group by cargcuco, cargnuse, concclco) impu,
    (
       SELECT p.product_id , b.geograp_location_id ID_LOCALIDAD,P.category_id CATEGORIA FROM  OPEN.ab_address b , pr_product p, OPEN.ge_geogra_location  g
       WHERE b.address_id = p.address_id
       AND g.geograp_location_id = b.geograp_location_id

    ) Localidad

    where base.cargcuco = impu.cargcuco
    and base.cargnuse = impu.cargnuse
    and base.cargvalo = impu.cargvabl
    and Localidad.product_id = base.cargnuse
    group by base.concclco,Localidad.ID_LOCALIDAD,Localidad.CATEGORIA
    )
    group by ID_LOCALIDAD,CATEGORIA,concclco;

-- CURSOR 3
    /*Otros Impuestos*/
    CURSOR cuImpuesto3 (daFecha_Inicio DATE,daFecha_Fin DATE) IS
    select ldci_pkinterfazsap.fvaGetCebeNoCat(ID_LOCALIDAD) Cebe,CATEGORIA,concclco,sum(base) base,sum(impuesto) impuesto
    from
    (
    /*Otros Impuestos*/
    select Localidad.ID_LOCALIDAD,Localidad.CATEGORIA,base.concclco,sum(base.cargvalo) base,sum(impu.cargvalo) impuesto from
      (
       select cargcuco, cargnuse, concclco, cargconc, sum(cargvalo) cargvalo, sum(cargvabl) cargvabl
        from (
            select TIPO, cargcuco, cargnuse, concclco, cargconc, cargcaca, cargvalo, cargvabl
             from
               (
                 select case when (cargconc in (select unique CONCCOIN from open.concepto where CONCCOIN > 0)) then 'INTE' ELSE 'OTRO' END TIPO,
                     cargcuco, cargnuse, decode(concclco,100,103,concclco) concclco, decode(cargconc,286,282,cargconc) cargconc, cargcaca,
                     sum(decode(cargsign,'DB',cargvalo,'CR',-cargvalo)) cargvalo, sum(decode(cargsign,'DB',cargvabl,'CR',-cargvabl)) cargvabl
                 from open.cargos, open.cuencobr, open.factura, open.concepto
                 where factura.factcodi  = cuencobr.cucofact
                    and cuencobr.cucocodi = cargos.cargcuco
                    and cargos.cargconc = concepto.conccodi
                    and factfege >= daFecha_Inicio
                    AND factfege <= daFecha_Fin
                    and cargtipr = 'A'
                    and substr(cargdoso,0,2) <> 'DF'
                    and (EXISTS (SELECT 'X' FROM open.concbali, open.concepto
                           WHERE coblconc = conccodi
                           and coblcoba = cargconc
                           and concticl = 4) or cargconc = 613)
                 group by cargcuco, cargnuse, concclco, cargconc, cargcaca
               )
             where tipo = 'INTE'
             and cargcaca <> 20
            union all
            select TIPO, cargcuco, cargnuse, concclco, cargconc, cargcaca, cargvalo cargvalo, cargvabl cargvabl
             from
               (
                select case when (cargconc in (select unique CONCCOIN from open.concepto where CONCCOIN > 0)) then 'INTE' ELSE 'OTRO' END TIPO,
                 cargcuco, cargnuse, decode(concclco,100,103,concclco) concclco, decode(cargconc,286,282,cargconc) cargconc, cargcaca,
                 sum(decode(cargsign,'DB',cargvalo,'CR',-cargvalo)) cargvalo, sum(decode(cargsign,'DB',cargvabl,'CR',-cargvabl)) cargvabl
                from open.cargos, open.cuencobr, open.factura, open.concepto
                where factura.factcodi  = cuencobr.cucofact
                and cuencobr.cucocodi = cargos.cargcuco
                and cargos.cargconc = concepto.conccodi
                and factfege >= daFecha_Inicio
                AND factfege <= daFecha_Fin
                and cargtipr = 'A'
                and substr(cargdoso,0,2) <> 'DF'
                and (EXISTS (SELECT 'X' FROM open.concbali, open.concepto
                       WHERE coblconc = conccodi
                       and coblcoba = cargconc
                       and concticl = 4) or cargconc = 613)
                       group by cargcuco, cargnuse, concclco, cargconc, cargcaca
               )
             where tipo = 'OTRO'
             and cargcaca <> 51
           )
        group by cargcuco, cargnuse, concclco, cargconc
      ) base,
      (select cargcuco, cargnuse, cargcaca, concclco, sum(decode(cargsign,'DB',cargvalo,'CR',-cargvalo)) cargvalo,
          sum(decode(cargsign,'DB',cargvabl,'CR',-cargvabl)) cargvabl
        from open.cargos, open.cuencobr, open.factura, open.concepto
        where factura.factcodi  = cuencobr.cucofact
        and cuencobr.cucocodi = cargos.cargcuco
        and cargos.cargconc = concepto.conccodi
        and factfege >= daFecha_Inicio
        AND factfege <= daFecha_Fin
        and cargtipr = 'A'
        and cargconc in (287, 137)
        group by cargcuco, cargnuse, cargcaca, concclco
      ) impu,
      (
       SELECT p.product_id , b.geograp_location_id ID_LOCALIDAD,P.category_id CATEGORIA FROM  OPEN.ab_address b , pr_product p, OPEN.ge_geogra_location  g
       WHERE b.address_id = p.address_id
       AND g.geograp_location_id = b.geograp_location_id

      ) Localidad
      where base.cargcuco(+) = impu.cargcuco
      and base.cargnuse(+) = impu.cargnuse
      and base.cargvalo = impu.cargvabl
      and Localidad.product_id = base.cargnuse
      group by base.concclco,Localidad.ID_LOCALIDAD,Localidad.CATEGORIA
    )
    group by ID_LOCALIDAD,CATEGORIA,concclco;

/* ******************************************** */

    TYPE tyDatcuImpuesto IS TABLE OF cuImpuesto1%ROWTYPE INDEX BY BINARY_INTEGER;
    MasvtyDatcuImpuesto tyDatcuImpuesto;
    vtyDatcuImpuesto tyDatcuImpuesto;

    PROCEDURE carga (vtyDatcuImpuesto in tyDatcuImpuesto ) IS
    BEGIN
    FOR I IN vtyDatcuImpuesto.FIRST..vtyDatcuImpuesto.LAST LOOP

        --LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Fila ['||I||'] Impuestos... :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

        OPEN cuCuentas(vtyDatcuImpuesto(I).concclco) ;
    	FETCH cuCuentas INTO rgcuCuentas;
    	CLOSE cuCuentas;

        /*Se deben obtener los datos del clasificador, enviar la cuenta de cartera y la cuenta de impuesto al Incoliqu*/

        nunit := ldci_pkinterfazsap.fnuGetNitGenerico(vtyDatcuImpuesto(I).concclco);

        IF (nunit is null) THEN
            dbms_output.put_line(' El Clasificador '||vtyDatcuImpuesto(I).concclco||' No tiene nit Generico');
            nuRet := 0;
        end if;

        nuSecuenciaLocal := nuSecuenciaLocal+1;

        /*Se obtiene la clave para la cuenta de Cartera*/
        vaClave := ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImpuesto(I).concclco,rgcuCuentas.CTA_CONTABLE,vaNaturacart,100,ovaCTCAICME,ovaCTCAINIV);

        sbOrdInt:= null;

    	nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(nutimocodi,      -->>Llegan
                        nuSeqICLINUDO,   -->>Llegan
                        TRUNC(sysdate),
                        user,
                        'SERVER',
                        TRUNC(sysdate),
                        vtyDatcuImpuesto(I).concclco,  -->>Llega
                        vaClave,            -->>Llega
                        rgcuCuentas.CTA_CONTABLE,         -->>Llega
                        null,
                        vtyDatcuImpuesto(I).impuesto , --Llega
                        vtyDatcuImpuesto(I).impuesto , --Llega
                        null,
                        null,
                        'INGRESOS '||nuSeqICLINUDO,
                        null,
                        null,
                        vaSOCIEDAD, --Llega
                        null,
                        null,
                        null,
                        null,
                        nuSecuenciaLocal,                  -->>Valor Maximo Campo Inseccion
                        null,
                        nunit,
                        nunit,
                        ldci_pkinterfazsap.fvaGetDescripNit(nunit),
                        '',
                        vtyDatcuImpuesto(I).cebe,                  -->>Llega
                        sbOrdInt,                   -->>Llega
                        nvl(ldci_pkinterfazsap.fvaGetSegmento(vtyDatcuImpuesto(I).cebe),0),  -->>Llega Cebe
                        vtyDatcuImpuesto(I).base,
                        nuComprobante,
                        sbLEDGERS,
                        Null);

        IF (nuRet <> 0) THEN
            dbms_output.put_line(' Error 1');
            nuRet := 0;
        end if;

        nuSecuenciaLocal := nuSecuenciaLocal+1;

        /*Se obtiene la clave para la cuenta de Impuestos*/
        vaClave := ldci_pkinterfazsap.fvaGetClaveContaIngreso (vtyDatcuImpuesto(I).concclco,vaCtaImp,vaNaturaImpt,100,ovaCTCAICME,ovaCTCAINIV);

        sbOrdInt:= null;

        nuRet := ldci_pkinterfazsap.fnuLDCI_INCOLIQU(nutimocodi,      -->>Llegan
                                        nuSeqICLINUDO,   -->>Llegan
                                        TRUNC(sysdate),
                                        user,
                                        'SERVER',
                                        TRUNC(sysdate),
                                        vtyDatcuImpuesto(I).concclco,  -->>Llega
                                        vaClave,            -->>Llega
                                        vaCtaImp,         -->>Llega
                                        null,
                                        vtyDatcuImpuesto(I).impuesto , --Llega
                                        vtyDatcuImpuesto(I).impuesto , --Llega
                                        null,
                                        null,
                                        'INGRESOS '||nuSeqICLINUDO,
                                        null,
                                        null,
                                        vaSOCIEDAD, --Llega
                                        null,
                                        null,
                                        null,
                                        null,
                                        nuSecuenciaLocal,                  -->>Valor Maximo Campo Inseccion
                                        null,
                                        nunit,
                                        nunit,
                                        ldci_pkinterfazsap.fvaGetDescripNit(nunit),
                                        '',
                                        vtyDatcuImpuesto(I).cebe,                  -->>Llega
                                        sbOrdInt,                   -->>Llega
                                        nvl(ldci_pkinterfazsap.fvaGetSegmento(vtyDatcuImpuesto(I).cebe),0),  -->>Llega Cebe
                                        vtyDatcuImpuesto(I).base,
                                        nuComprobante,
                                        sbLEDGERS,
                                        Null);

        IF (nuRet <> 0) THEN
            dbms_output.put_line(' Error 1');
            nuRet := 0;
        end if;

    END LOOP;

    END carga;

BEGIN

    sbLEDGERS := 'TL';

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Antes maximoNumero... :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

    OPEN maximoNumero;
    FETCH maximoNumero INTO nuSecuenciaLocal;
    CLOSE maximoNumero;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Despues maximoNumero... :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));


    /* ************************************** */
    -- CURSOR 1
    MasvtyDatcuImpuesto.delete;
    blCarga := FALSE;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Cursor 1 fechas... :['||idtFechIni||']'||'['||idtFechFin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

    OPEN cuImpuesto1(idtFechIni,idtFechFin);
    FETCH cuImpuesto1 BULK COLLECT INTO MasvtyDatcuImpuesto;
    CLOSE cuImpuesto1;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Cursor 1_Total Registros ... :['||MasvtyDatcuImpuesto.count||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

    IF (MasvtyDatcuImpuesto.count < 1) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No hay Registros a Para impuestos... :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    else
        blCarga := TRUE;
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Cursor 1 Total Registros ... :['||MasvtyDatcuImpuesto.count||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        carga(MasvtyDatcuImpuesto);
    END IF;

    /* **********************************  */
    -- CURSOR 2
        MasvtyDatcuImpuesto.delete;
    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Cursor 2 fechas... :['||idtFechIni||']'||'['||idtFechFin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

    OPEN cuImpuesto2(idtFechIni,idtFechFin);
    FETCH cuImpuesto2 BULK COLLECT INTO MasvtyDatcuImpuesto;
    CLOSE cuImpuesto2;

    LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Cursor 2_Total Registros ... :['||MasvtyDatcuImpuesto.count||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

    IF (MasvtyDatcuImpuesto.count < 1) THEN
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No hay Registros a Para impuestos... :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    else
        blCarga := TRUE;
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Cursor 2 Total Registros ... :['||MasvtyDatcuImpuesto.count||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        carga(MasvtyDatcuImpuesto);
    END IF;

    /* ************************************** */
    -- CURSOR 3
    nuFecha1 := to_char(idtFechIni,'J');
    nuFecha2 := to_char(idtFechFin,'J');

    for nuDia in nuFecha1 .. nuFecha2 loop

        -- Formatea las fechas
        dtFechaPivIni := TO_CHAR(TO_DATE(nuDia, 'J'), 'DD-MM-YYYY HH24:MI:SS');
        dtFechaPivFin := to_date(substr(to_char(dtFechaPivIni),1,10)||' 23:59:59','dd/mm/yyyy hh24:mi:ss');
        MasvtyDatcuImpuesto.delete;
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Cursor 3 fechas... :['||dtFechaPivIni||']'||'['||dtFechaPivFin||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

        OPEN cuImpuesto3(dtFechaPivIni,dtFechaPivFin);
        FETCH cuImpuesto3 BULK COLLECT INTO MasvtyDatcuImpuesto;
        CLOSE cuImpuesto3;

        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Cursor 3_Total Registros ... :['||MasvtyDatcuImpuesto.count||'] Fecha: '||dtFechaPivIni,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));

        IF (MasvtyDatcuImpuesto.count < 1) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No hay Registros a Para impuestos... :['||nutimocodi||'] Fecha: '||dtFechaPivIni,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        else
            blCarga := TRUE;
            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Cursor 3 Total Registros ... :['||MasvtyDatcuImpuesto.count||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
            carga(MasvtyDatcuImpuesto);
        END IF;

    END loop;

    /* **************************************** */

    if blCarga then
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Insertando en Incoliqu Global... :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        nuRet := ldci_pkinterfazsap.fnuINSELDCI_INCOLIQU;
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Finalizado en Incoliqu Global... :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
        -- Asienta registros
        commit;

        IF (nuRet <> 0) THEN
            LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'Error Insertando en Incoliqu ... :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
            nuRet := 0;
        end if;
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'...Fin Insercion en Incoliqu :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    else
        LDCI_pkTrazaInterfaces.pRegiMensaje(nutimocodi,'No se Inserto en Incoliqu Impuestos ... :['||nutimocodi||']',to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),nutimocodi,USER,USERENV('TERMINAL'));
    END if;

    MasvtyDatcuImpuesto.delete;

    RETURN(0);

EXCEPTION
    WHEN OTHERS THEN
    ldci_pkinterfazsap.vaMensError := vaMesaje||' [fnuDistriImpuestoRO] - No se pudo obtener la informacion del impuesto. '||sqlerrm||DBMS_UTILITY.format_error_backtrace;
    LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,'L1-Error fnuDistriImpuestoRO :['||ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'L1',USER,USERENV('TERMINAL'));
    dbms_output.put_line(ldci_pkinterfazsap.vaMensError);
    RETURN(-1);
END fnuDistriImpuestoRO;


  FUNCTION fvaGetActivo (inudeparta  in ldci_actiubgttra.acbgdpto%TYPE,
                        inulocalid  IN ldci_actiubgttra.acbgloca%TYPE,
                        inutipotra  IN ldci_actiubgttra.acbgtitr%TYPE,
                        ovaactiv   OUT ldci_actiubgttra.acbgacti%TYPE,
                        ovasubnum   OUT ldci_actiubgttra.acbgsubn%TYPE,
                        ovaordein   OUT ldci_actiubgttra.acbgorin%TYPE)
  return NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetActivo
     AUTOR     : Heiber Barco
     FECHA     : 25-03-2014
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la orden interna numero de activo

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/

  is
     cursor cuActivos
     is
     select * from ldci_actiubgttra
     where ACBGDPTO = inudeparta
       AND ACBGLOCA = inulocalid
       AND ACBGTITR = inutipotra
       and rownum = 1;

     rgLDCI_ACTIUBGTTRA   ldci_actiubgttra%rowtype;

  begin

     open cuActivos;
     fetch cuActivos into rgLDCI_ACTIUBGTTRA;
     close cuActivos;

     ovaactiv := rgLDCI_ACTIUBGTTRA.acbgacti;
     ovasubnum := rgLDCI_ACTIUBGTTRA.acbgsubn;
     ovaordein := rgLDCI_ACTIUBGTTRA.acbgorin;

     return(0);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetActivo] - No se pudo obtener el activo. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fvaGetActivo;

  FUNCTION fvaGetActivoRO(inudeparta  in ldci_actiubgttra.acbgdpto%TYPE,
                          inulocalid  IN ldci_actiubgttra.acbgloca%TYPE,
                          inutipotra  IN ldci_actiubgttra.acbgtitr%TYPE,
                          ivaActivo   IN /*OUT*/ ldci_actiubgttra.acbgacti%TYPE,
                          ovasubnum   OUT ldci_actiubgttra.acbgsubn%TYPE,
                          ovaordein   OUT ldci_actiubgttra.acbgorin%TYPE)
  RETURN NUMBER
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetActivoRO
     AUTOR     : Heiber Barco
     FECHA     : 25-03-2014
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la orden interna con
                    base en el numero de activo, la localidad y el trabajo

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
    Jorge Valiente       17/11/2015      Cambio 8900: Modificacion del paremtro ivaActivo para que pueda
                                                      ser utilizado como IN y no como OUT.
                                                      Yaque actualmente esta como parametro de salida lo que
                                                      impide de forma adecuada realizar la consulta apropiada
                                                      en el cursor cuActivos.
                                                      Por solciitud y analisis realizadao pro la ing. Diana Saltarin se
                                                      debera cambio de OUT a IN en el paremtro ivaActivo
  ************************************************************************/

  IS
     CURSOR cuActivos
     IS
     SELECT *
       FROM ldci_actiubgttra
      WHERE acbgdpto = inudeparta
        AND acbgloca = inulocalid
        AND acbgtitr = inutipotra
        AND acbgacti = ivaActivo;

     rgLDCI_ACTIUBGTTRA   ldci_actiubgttra%rowtype;

  begin

     open cuActivos;
     fetch cuActivos into rgLDCI_ACTIUBGTTRA;
     close cuActivos;

     ovasubnum := rgLDCI_ACTIUBGTTRA.acbgsubn;
     ovaordein := rgLDCI_ACTIUBGTTRA.acbgorin;

     return(0);

  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetActivoRO] - No se pudo obtener el activo. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       LDCI_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCODINTINTERFAZ,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       return(-1);
  end fvaGetActivoRO;

  FUNCTION fvaGetClaveContaCu (nucuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                             vaSigno      IN IC_DECORECO.dcrcsign%TYPE)
  return VARCHAR
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetClaveContaCu
     AUTOR     : Heiber Barco
     FECHA     : 02-08-2013
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la clave apartir de la cuenta

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  CURSOR cuGetClave IS
    SELECT *
      FROM LDCI_CTACADMI
      WHERE ctcacodi = nucuctcodi;


   ovaClave LDCI_CTACADMI.ctcaclcr%TYPE;

   rgcuGetClave cuGetClave%ROWTYPE;

  begin

  OPEN cuGetClave;
  FETCH cuGetClave INTO rgcuGetClave;
  CLOSE cuGetClave;

     IF vaSigno = 'C' THEN

     ovaClave := rgcuGetClave.CTCACLCR;

     ELSIF vaSigno = 'D' THEN

     ovaClave := rgcuGetClave.CTCACLDB;


     END IF;

     RETURN ovaClave;
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetClaveContaCu] - No se pudo obtener la clave. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
       return('-1');
  end fvaGetClaveContaCu;

    FUNCTION fvaGetNitDetallado (nucuctcodi   in LDCI_CUENTACONTABLE.cuctcodi%TYPE,
                               nuClasificador  in IC_CLASCONT.CLCOCODI%TYPE)
  return VARCHAR
  is
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fvaGetNitDetallado
     AUTOR     : Oscar Restrepo
     FECHA     : 22-07-2014
     DESCRIPCION  : Tiquete: 4213
                    funcion que se encarga de obtener el Nit con base en el Clasificador y la Cuenta Contable

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
		CURSOR cuNitDetallado IS
		SELECT cod_nit FROM OPEN.LDCI_NITCTACLAS
			WHERE cod_ctacontable = nucuctcodi
				AND cod_clas = nuClasificador;

		vaNitDetallado VARCHAR2(99) := NULL;

	begin

			OPEN cuNitDetallado;
			FETCH cuNitDetallado INTO vaNitDetallado;
			CLOSE cuNitDetallado;

			IF vaNitDetallado IS NULL THEN
				--Se debe retornar el nit Generico del clasificador
				vaNitDetallado := ldci_pkinterfazsap.fnuGetNitGenerico(nuClasificador);
				IF vaNitDetallado IS NULL THEN
					ldci_pkinterfazsap.vaMensError :=  '[fvaGetNitDetallado] - No hay Nit Generico Para el Clasificador  '||nuClasificador||' y/o Con la Cuenta '||nucuctcodi||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
					--	dbms_output.put_line('[fvaGetNitDetallado] - No hay Nit Generico Para el Clasificador  '||nuClasificador||' y/o Con la Cuenta '||nucuctcodi);
				END IF;
			END IF;

     RETURN vaNitDetallado;
  exception
  when others then
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetNitDetallado] - Error Generando Nit. '||sqlerrm||' '||DBMS_UTILITY.format_error_backtrace;
			 --dbms_output.put_line('[fvaGetNitDetallado] - No hay Nit Generico Para el Clasificador  '||nuClasificador);
       return('-1');
 END fvaGetNitDetallado;

  FUNCTION fvaGetCECO(inudeparta  IN ldci_cencoubgtra.ccbgdpto%TYPE,
                      inulocalid  IN ldci_cencoubgtra.ccbgloca%TYPE,
                      inutipotra  IN ldci_cencoubgtra.ccbgtitr%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL PETI
     FUNCION   : fvaGetOICECO
     AUTOR     : Carlos Humberto Gonzalez V
     FECHA     : 01-ago-2014
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener el centro de costo
                    por localidad y tipo de trabajo

    Parametros de Entrada
    inudeparta Departamento
    inulocalid Localidad
    inutipotra Tipo de Trabajo

    Parametros de Salida
    ovacecosto Centro de Costo

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  RETURN VARCHAR2
  IS


     CURSOR cuOrdenInterna
     IS
     SELECT * FROM ldci_cecoubigetra
     WHERE ccbgdpto = inudeparta
       AND ccbgloca = inulocalid
       AND ccbgtitr = inutipotra;

     rgLdci_cecoubigetra   Ldci_cecoubigetra%ROWTYPE;
     ovacecosto            ldci_centrocosto.cecocodi%TYPE;

  BEGIN

     OPEN cuOrdenInterna;
     FETCH cuOrdenInterna INTO rgLDCI_CECOUBIGETRA;
     CLOSE cuOrdenInterna;

     ovacecosto := rgLDCI_CECOUBIGETRA.ccbgceco;


     RETURN(ovacecosto);

  EXCEPTION
  WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetOICECO] - No se pudo obtener La Orden Interna. '||SQLERRM||' '||DBMS_UTILITY.format_error_backtrace;
       ldci_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCodintinterfaz,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       RETURN(-1);
  END fvaGetCECO;

  ---

    --
  FUNCTION fvaGetOIEST(inudeparta  IN ldci_cencoubgtra.ccbgdpto%TYPE,
                       inulocalid  IN ldci_cencoubgtra.ccbgloca%TYPE,
                       inutipotra  IN ldci_cencoubgtra.ccbgtitr%TYPE)
  /************************************************************************
     PROPIEDAD INTELECTUAL PETI
     FUNCION   : fvaGetOICECO
     AUTOR     : Carlos Humberto Gonzalez V
     FECHA     : 01-ago-2014
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de obtener la orden interna
                    por localidad y tipo de trabajo

    Parametros de Entrada
    inudeparta Departamento
    inulocalid Localidad
    inutipotra Tipo de Trabajo

    Parametros de Salida
    ovacecosto Centro de Costo

    Historia de Modificaciones
    Autor    Fecha       Descripcion
  ************************************************************************/
  RETURN VARCHAR2
  IS


     CURSOR cuOrdenInterna
     IS
     SELECT * FROM ldci_cecoubigetra
     WHERE ccbgdpto = inudeparta
       AND ccbgloca = inulocalid
       AND ccbgtitr = inutipotra;

     rgLdci_cecoubigetra   Ldci_cecoubigetra%ROWTYPE;
     ovaOiEst              Ldci_cecoubigetra.Ccbgorin%TYPE;

  BEGIN

     OPEN cuOrdenInterna;
     FETCH cuOrdenInterna INTO rgLDCI_CECOUBIGETRA;
     CLOSE cuOrdenInterna;

     ovaOiEst := rgLDCI_CECOUBIGETRA.Ccbgorin;


     RETURN(ovaOiEst);

  EXCEPTION
  WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError :=  '[fvaGetOICECO] - No se pudo obtener La Orden Interna. '||SQLERRM||' '||DBMS_UTILITY.format_error_backtrace;
       ldci_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCodintinterfaz,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       RETURN(-1);
  END fvaGetOIEST;

  FUNCTION fnuLDCI_INCOLIQUPROV ( vaICLITIDO IN LDCI_INCOLIQU.ICLITIDO%TYPE,
                                  nuICLINUDO IN LDCI_INCOLIQU.ICLINUDO%TYPE,
                                  dtICLIFECH IN LDCI_INCOLIQU.ICLIFECH%TYPE,
                                  vaICLIUSUA IN LDCI_INCOLIQU.ICLIUSUA%TYPE,
                                  vaICLITERM IN LDCI_INCOLIQU.ICLITERM%TYPE,
                                  dtICLIFECR IN LDCI_INCOLIQU.ICLIFECR%TYPE,
                                  vaCLAVCONT IN LDCI_INCOLIQU.CLAVCONT%TYPE,
                                  vaCLASECTA IN LDCI_INCOLIQU.CLASECTA%TYPE,
                                  vaINDICCME IN LDCI_INCOLIQU.INDICCME%TYPE,
                                  nuIMPOMTRX IN LDCI_INCOLIQU.IMPOMTRX%type,
                                  nuIMPOMSOC IN LDCI_INCOLIQU.IMPOMSOC%TYPE,
                                  vaINDICIVA IN LDCI_INCOLIQU.INDICIVA%TYPE,
                                  vaCONDPAGO IN LDCI_INCOLIQU.CONDPAGO%TYPE,
                                  dtFECHBASE IN LDCI_INCOLIQU.FECHBASE%TYPE,
                                  vaREFFACTR IN LDCI_INCOLIQU.REFFACTR%TYPE,
                                  nuBASEIMPT IN LDCI_INCOLIQU.BASEIMPT%TYPE,
                                  vaORDENINT IN LDCI_INCOLIQU.ORDENINT%TYPE,
                                  nuCANTIDAD IN LDCI_INCOLIQU.CANTIDAD%TYPE,
                                  vaASIGNACN IN LDCI_INCOLIQU.ASIGNACN%TYPE,
                                  vaTXTPOSCN IN LDCI_INCOLIQU.TXTPOSCN%type,
                                  vaCENTROBE IN LDCI_INCOLIQU.CENTROBE%TYPE,
                                  vaSEGMENTO IN LDCI_INCOLIQU.SEGMENTO%TYPE,
                                  vaOBJCOSTO IN LDCI_INCOLIQU.OBJCOSTO%TYPE,
                                  vaCLAVREF1 IN LDCI_INCOLIQU.CLAVREF1%TYPE,
                                  vaCLAVREF2 IN LDCI_INCOLIQU.CLAVREF2%TYPE,
                                  vaCLAVREF3 IN LDCI_INCOLIQU.CLAVREF3%TYPE,
                                  vaSOCIEDGL IN LDCI_INCOLIQU.SOCIEDGL%TYPE,
                                  vaMATERIAL IN LDCI_INCOLIQU.MATERIAL%TYPE,
                                  vaTIPORETC IN LDCI_INCOLIQU.TIPORETC%TYPE,
                                  vaINDRETEC IN LDCI_INCOLIQU.INDRETEC%type,
                                  vaBASERETC IN LDCI_INCOLIQU.BASERETC%type,
                                  nuNUSEINSE IN LDCI_INCOLIQU.NUSEINSE%type,
                                  vaCOD_CENTROBENEF IN LDCI_INCOLIQU.COD_CENTROBENEF%type,
                                  nuCOD_CLASIFCONTA IN LDCI_INCOLIQU.COD_CLASIFCONTA%type,
                                  dtFECHVALOR       IN LDCI_INCOLIQU.FECHVALOR%type,
                                  vaCTADIV          IN LDCI_INCOLIQU.CTADIV%type,
                                  vaCENTROCO        IN LDCI_INCOLIQU.CENTROCO%type,
                                  nuCOMPROBANTE     IN LDCI_INCOLIQU.COMPROBANTE%type,
                                  vaLEDGERS         IN LDCI_INCOLIQU.LEDGERS%TYPE,
                                  vatipotrab        IN LDCI_INCOLIQU.TIPOTRAB%TYPE)
  RETURN NUMBER
  IS
  /************************************************************************
     PROPIEDAD INTELECTUAL DE GASES DE OCCIDENTE S.A E.S.P
     FUNCION   : fnuLDCI_INCOLIQUPROV
     AUTOR     : Carlos Humberto Gonzalez
     FECHA     : 12-08-2014
     DESCRIPCION  : Tiquete:
                    funcion que se encarga de volver persistente los datos de la
                    interfaz en la tabla intermadia LDCI_INCOLIQU

    Parametros de Entrada

    Parametros de Salida

    Historia de Modificaciones
    Autor       Fecha       Descripcion
    cgonzalezv  21-08-2015  SAO 327681 Se adicciona el tipo de trabajo en incoliqu
  ************************************************************************/

  sbOrdInt VARCHAR2(100);
  nuCategoria NUMBER;
  sbSegmento VARCHAR2(200);
  sbDescripcionNit VARCHAR2(200);
  daFECHBASE date;
  sbEsDivergente VARCHAR2(2);
  nuNIT VARCHAR2(100);
  sbSegmento VARCHAR2(20);

  BEGIN
 --  sbOrdInt:= nuOrdenInt;
   --sbSegmento:= nuSegmento;

    if (vtyLDCI_INCOLIQU.count = 0) then
        ldci_pkinterfazsap.nuIncoliqu := 1;
    ELSE
        ldci_pkinterfazsap.nuIncoliqu := ldci_pkinterfazsap.nuIncoliqu + 1;
    END IF;

    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITIDO :=vaICLITIDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLINUDO :=nuICLINUDO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECH :=dtICLIFECH;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIUSUA :=vaICLIUSUA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLITERM :=vaICLITERM;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ICLIFECR :=dtICLIFECR;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVCONT :=vaCLAVCONT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLASECTA :=vaCLASECTA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICCME :=vaINDICCME;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMTRX :=nuIMPOMTRX;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).IMPOMSOC :=nuIMPOMSOC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDICIVA :=vaINDICIVA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CONDPAGO :=vaCONDPAGO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHBASE :=dtFECHBASE;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).REFFACTR :=vaREFFACTR;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASEIMPT :=nuBASEIMPT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ORDENINT :=vaORDENINT;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CANTIDAD :=nuCANTIDAD;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).ASIGNACN :=vaASIGNACN;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TXTPOSCN :=vaTXTPOSCN;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROBE :=vaCENTROBE;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SEGMENTO :=vaSEGMENTO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).OBJCOSTO :=vaOBJCOSTO;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF1 :=vaCLAVREF1;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF2 :=vaCLAVREF2;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CLAVREF3 :=vaCLAVREF3;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).SOCIEDGL :=vaSOCIEDGL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).MATERIAL :=vaMATERIAL;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPORETC :=vaTIPORETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).INDRETEC :=vaINDRETEC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).BASERETC :=vaBASERETC;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).NUSEINSE :=nuNUSEINSE;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CENTROBENEF :=vaCOD_CENTROBENEF;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COD_CLASIFCONTA :=nuCOD_CLASIFCONTA;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).FECHVALOR       :=dtFECHVALOR      ;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CTADIV          :=vaCTADIV         ;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).CENTROCO        :=vaCENTROCO       ;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).COMPROBANTE     :=nuCOMPROBANTE    ;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).LEDGERS         :=vaLEDGERS        ;
    vtyLDCI_INCOLIQU(ldci_pkinterfazsap.nuIncoliqu).TIPOTRAB        :=vatipotrab       ;


  RETURN(0);

  EXCEPTION
  WHEN OTHERS THEN
       ldci_pkinterfazsap.vaMensError :=  '[fnuLDCI_INCOLIQUPROV] - No se insertaron registros en LDCI_INCOLIQU. '||SQLERRM||' '||DBMS_UTILITY.format_error_backtrace;
       ldci_pkTrazaInterfaces.pRegiMensaje(ldci_pkinterfazsap.vaCodintinterfaz,ldci_pkinterfazsap.vaMensError,to_char(SYSTIMESTAMP,'HH24:MI:SS.FF'),'00',USER,USERENV('TERMINAL'));
       RETURN(-1);

  END fnuLDCI_INCOLIQUPROV;

   PROCEDURE valFeFotoProCos
   IS
    /*******************************************************************************
     Propiedad intelectual de Gases de Occidenes.

     Nombre         :  valFeFotoProCos
     Descripcion    :  Forma para validar un rango de fechas para
                       la foto de provisi?n de costos
     Autor          :  Diego Andr?s Cardona
     Fecha          :  29 Septiembre de 2014
     Parametros         Descripcion
     ============    ===================


     Historia de Modificaciones
     Fecha             Autor                 Modificacion
     =========       =========          ====================
   /*******************************************************************************/
      cnunull_attribute   CONSTANT NUMBER                             := 2126;
      nuerror                      NUMBER;
      sbpefafimo                   ge_boinstancecontrol.stysbvalue;
      sbpefaffmo                   ge_boinstancecontrol.stysbvalue;
      nuidprogproc                 open.ge_process_schedule.process_schedule_id%TYPE;
      sbparametros                 open.ge_process_schedule.parameters_%TYPE;
      csbllave            CONSTANT VARCHAR2 (20)          := '10101000101011';
      dtfechaini                   DATE;
      dtfechafin                   DATE;
      nucantidad                   NUMBER;
      nucantidadceor               NUMBER;
      nuActa                       ldci_actacont.idacta%TYPE;

   BEGIN

      --<<VAlida los parametros del reporte que no esten en Nullo-->>
      IF (cnunull_attribute IS NULL)
      THEN
         nuerror := 1;
      END IF;

      --<<Se realiza la asignacion de los valores de los campos a las variables definidas>>--
      sbpefafimo := ge_boinstancecontrol.fsbgetfieldvalue ('LDC_CIERCOME', 'CICOFEIN');
      sbpefaffmo := ge_boinstancecontrol.fsbgetfieldvalue ('LDC_CIERCOME', 'CICOFECH');

      --<<
      -- Valida fechas
      -->>
      dtfechaini := TRUNC (TO_DATE (sbpefafimo, ut_date.fsbdate_format));
      dtfechafin := TRUNC (TO_DATE (sbpefaffmo, ut_date.fsbdate_format)) + (1 - (1 / 24 / 60 / 60));

      --<<Se realiza validacion de Fecha Inicial y Fecha Final>>--
      IF (dtfechafin < dtfechaini)
      THEN
         gi_boerrors.seterrorcodeargument
                   (2741,
                    'La fecha Final no puede ser inferior a la fecha Inicial'
                   );
         RAISE ex.controlled_error;
      END IF;
      -- Obtiene la programacion en memoria
      nuidprogproc := ge_boschedule.fnugetscheduleinmemory;
      -- se obtiene parametros
      sbparametros := dage_process_schedule.fsbgetparameters_ (nuidprogproc);

   END valFeFotoProCos;

   PROCEDURE valIntProvCost
   IS
    /*******************************************************************************
     Propiedad intelectual de Gases de Occidenes.

     Nombre         :  valIntProvCost
     Descripcion    :  Procedimiento para validar un a?o y mes para la provisi?n de costos
     Autor          :  Diego Andr?s Cardona Garc?a
     Fecha          :  30 Septiembre de 2014
     Parametros         Descripcion
     ============    ===================


     Historia de Modificaciones
     Fecha             Autor                 Modificacion
     =========       =========          ====================
   /*******************************************************************************/
      cnunull_attribute   CONSTANT NUMBER := 2126;
      nuerror             NUMBER;
      nuAnio              ge_boinstancecontrol.stysbvalue;
      nuMes               ge_boinstancecontrol.stysbvalue;
      sbTipoInterfaz      ge_boinstancecontrol.stysbvalue;
      nuNumActa           ge_boinstancecontrol.stysbvalue;
      nuidprogproc        ge_process_schedule.process_schedule_id%TYPE;
      sbparametros        ge_process_schedule.parameters_%TYPE;
      sbcadconexion       VARCHAR2 (2000);
      sbusuario           VARCHAR2 (2000);
      sbpass              VARCHAR2 (2000);
      sbinstancia         VARCHAR2 (2000);
      sbcadconexencr      VARCHAR2 (2000);
      csbllave            CONSTANT VARCHAR2 (20)  := '10101000101011';
      dtfechaini          DATE;
      dtfechafin          DATE;
      nucantidad          NUMBER;
      nucantidadceor      NUMBER;

   BEGIN

      --<<VAlida los parametros del reporte que no esten en Nullo-->>
      IF (cnunull_attribute IS NULL)
      THEN
         nuerror := 1;
      END IF;

      --<<Se realiza la asignacion de los valores de los campos a las variables definidas>>--
      nuAnio := ge_boinstancecontrol.fsbgetfieldvalue ('LDC_CIERCOME', 'CICOANO');
      nuMes  := ge_boinstancecontrol.fsbgetfieldvalue ('LDC_CIERCOME', 'CICOMES');

      --<<VAlida los parametros del reporte que no esten en Nullo-->>
      IF (nuAnio IS NULL)
      THEN
         ERRORS.seterror (cnunull_attribute, 'A?o');
         RAISE ex.controlled_error;
      END IF;

      IF (nuMes IS NULL)
      THEN
         ERRORS.seterror (cnunull_attribute, 'Mes');
         RAISE ex.controlled_error;
      END IF;

      IF (nuAnio < 1999) THEN
         gi_boerrors.seterrorcodeargument(2741, 'El A?o es invalido');
         RAISE ex.controlled_error;
      END IF;

      IF (nuMes < 1 or nuMes>12) THEN
         gi_boerrors.seterrorcodeargument(2741, 'El Mes es invalido');
         RAISE ex.controlled_error;
      END IF;

      -- Obtiene la programacion en memoria
      nuidprogproc := ge_boschedule.fnugetscheduleinmemory;
      -- se obtiene parametros
      sbparametros := dage_process_schedule.fsbgetparameters_ (nuidprogproc);
/*
      ge_bodatabaseconnection.getconnectionstring (sbusuario,
                                                   sbpass,
                                                   sbinstancia
                                                  );
*/
   END valIntProvCost;
BEGIN
    --execute immediate 'alter session set sql_trace true';
    --execute immediate 'alter session set timed_statistics=true';

    -- obtiene parametro para enviar a SAP
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'EnviaIntefReinSAP', vaEnviaIntefReinSAP, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'EnviaIntefRecaSAP', vaEnviaIntefRecaSAP, osbErrorMessage);
    LDCI_PKWEBSERVUTILS.proCaraServWeb('WS_INTER_CONTABLE', 'ENVIAINTEFAZSAP', vaEnviaIntefazSAP, osbErrorMessage);

    --ldci_pkwebservutils.proCaraServWeb('WS_INTER_CONTABLE', 'CorreoReporte', sbE_MAIL, osbErrorMessage);
    ldci_pkinterfazsap.vaSOCIEDAD:='GDOC';
    ldci_pkinterfazsap.vaCURRENCY:='COP';

END ldci_pkinterfazsap;
/