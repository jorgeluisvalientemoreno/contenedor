SET DEFINE OFF;

DECLARE

    SBOBSERVACION  PERSONALIZACIONES.HOMOLOGACION_SERVICIOS.OBSERVACION%TYPE;
    

BEGIN

    SBOBSERVACION := NULL;
    SBOBSERVACION :=  SBOBSERVACION ||  '-- Sugerencia de uso' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  'DECLARE' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   sbproceso  VARCHAR2(100) := ' || '''' || 'nombreproceso' || '''' || '||' ||'TO_CHAR(SYSDATE,' || '''' || 'DDMMYYYYHH24MISS' || '''' || ');' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   nuerror     NUMBER;' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   sberror      VARCHAR2(4000);' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  'BEGIN' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   pkg_estaproc.practualizaestaproc(isbproceso => sbproceso);' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   EXCEPTION' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   WHEN pkg_Error.CONTROLLED_ERROR THEN' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_Error.getError( nuerror,sberror);' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_estaproc.practualizaestaproc( sbproceso, ' || '''' || 'Error ' || '''' || ', sberror  );' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   WHEN OTHERS THEN' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_error.seterror;' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_error.geterror(nuerror, sberror  );' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_estaproc.practualizaestaproc( sbproceso, ' || '''' || 'Error ' || '''' || ', sberror  );' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  'END;';

    MERGE INTO PERSONALIZACIONES.HOMOLOGACION_SERVICIOS A USING
     (SELECT
      'OPEN' as ESQUEMA_ORIGEN,
      'LDC_PROACTUALIZAESTAPROG' as SERVICIO_ORIGEN,
      'ACTUALIZA UN REGISTRO EN LDC_OSF_ESTAPROC' as DESCRIPCION_ORIGEN,
      'PERSONALIZACIONES' as ESQUEMA_DESTINO,
      'PKG_ESTAPROC.PRACTUALIZAESTAPROC' as SERVICIO_DESTINO,
      'ACTUALIZA UN REGISTRO EN ESTAPROC' as DESCRIPCION_DESTINO,
      SBOBSERVACION as OBSERVACION
      FROM DUAL) B
    ON (A.ESQUEMA_ORIGEN = B.ESQUEMA_ORIGEN and A.SERVICIO_ORIGEN = B.SERVICIO_ORIGEN)
    WHEN NOT MATCHED THEN 
    INSERT (
      ESQUEMA_ORIGEN, SERVICIO_ORIGEN, DESCRIPCION_ORIGEN, ESQUEMA_DESTINO, SERVICIO_DESTINO, 
      DESCRIPCION_DESTINO, OBSERVACION)
    VALUES (
      B.ESQUEMA_ORIGEN, B.SERVICIO_ORIGEN, B.DESCRIPCION_ORIGEN, B.ESQUEMA_DESTINO, B.SERVICIO_DESTINO, 
      B.DESCRIPCION_DESTINO, B.OBSERVACION)
    WHEN MATCHED THEN
    UPDATE SET 
      A.DESCRIPCION_ORIGEN = B.DESCRIPCION_ORIGEN,
      A.ESQUEMA_DESTINO = B.ESQUEMA_DESTINO,
      A.SERVICIO_DESTINO = B.SERVICIO_DESTINO,
      A.DESCRIPCION_DESTINO = B.DESCRIPCION_DESTINO,
      A.OBSERVACION = B.OBSERVACION;
      
    SBOBSERVACION := NULL;
    SBOBSERVACION :=  SBOBSERVACION ||  '-- Sugerencia de uso' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  'DECLARE' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   sbproceso  VARCHAR2(100) := ' || '''' || 'nombreproceso' || '''' || '||' ||'TO_CHAR(SYSDATE,' || '''' || 'DDMMYYYYHH24MISS' || '''' || ');' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   nutotareg NUMBER;' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   nuerror     NUMBER;' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   sberror      VARCHAR2(4000);' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  'BEGIN' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   nutotareg  := funcionobttotalreg;' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   pkg_estaproc.prinsertaestaproc( sbproceso , nutotareg);' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   EXCEPTION' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   WHEN pkg_Error.CONTROLLED_ERROR THEN' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_Error.getError( nuerror,sberror);' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_estaproc.practualizaestaproc( sbproceso, ' || '''' || 'Error ' || '''' || ', sberror  );' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '   WHEN OTHERS THEN' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_error.seterror;' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_error.geterror(nuerror, sberror  );' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  '       pkg_estaproc.practualizaestaproc( sbproceso, ' || '''' || 'Error ' || '''' || ', sberror  );' || CHR(13);
    SBOBSERVACION :=  SBOBSERVACION ||  'END;';
      

    MERGE INTO PERSONALIZACIONES.HOMOLOGACION_SERVICIOS A USING
     (SELECT
      'OPEN' as ESQUEMA_ORIGEN,
      'LDC_PROINSERTAESTAPROG' as SERVICIO_ORIGEN,
      'INSERTA REGISTRO EN LDC_OS_ESTAPROC' as DESCRIPCION_ORIGEN,
      'PERSONALIZACIONES' as ESQUEMA_DESTINO,
      'PKG_ESTAPROC.PRINSERTAESTAPROC' as SERVICIO_DESTINO,
      'INSERTA REGISTRO EN ESTAPROC' as DESCRIPCION_DESTINO,
      SBOBSERVACION as OBSERVACION
      FROM DUAL) B
    ON (A.ESQUEMA_ORIGEN = B.ESQUEMA_ORIGEN and A.SERVICIO_ORIGEN = B.SERVICIO_ORIGEN)
    WHEN NOT MATCHED THEN 
    INSERT (
      ESQUEMA_ORIGEN, SERVICIO_ORIGEN, DESCRIPCION_ORIGEN, ESQUEMA_DESTINO, SERVICIO_DESTINO, 
      DESCRIPCION_DESTINO, OBSERVACION)
    VALUES (
      B.ESQUEMA_ORIGEN, B.SERVICIO_ORIGEN, B.DESCRIPCION_ORIGEN, B.ESQUEMA_DESTINO, B.SERVICIO_DESTINO, 
      B.DESCRIPCION_DESTINO, B.OBSERVACION)
    WHEN MATCHED THEN
    UPDATE SET 
      A.DESCRIPCION_ORIGEN = B.DESCRIPCION_ORIGEN,
      A.ESQUEMA_DESTINO = B.ESQUEMA_DESTINO,
      A.SERVICIO_DESTINO = B.SERVICIO_DESTINO,
      A.DESCRIPCION_DESTINO = B.DESCRIPCION_DESTINO,
      A.OBSERVACION = B.OBSERVACION;

    COMMIT;

END;
/