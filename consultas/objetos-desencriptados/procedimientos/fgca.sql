
CREATE OR REPLACE PROCEDURE FGCA( INUSCHEDULE IN NUMBER )
 IS
   NUTHREADS NUMBER;
   NULOGPROCESS GE_LOG_PROCESS.LOG_PROCESS_ID%TYPE;
   RCREPORTES REPORTES%ROWTYPE;
   CSBTRACE_PATH CONSTANT PARAMETR.PAMECODI%TYPE := 'RUTA_TRAZA';
   SBCONNSTRINGENC VARCHAR2( 500 ) := NULL;
   SBCONNSTRING VARCHAR2( 500 ) := NULL;
   SBRUTA VARCHAR2( 300 ) := NULL;
   SBFECHA VARCHAR2( 100 ) := NULL;
   SBCOMANDO VARCHAR2( 500 );
   SBSISTREPO VARCHAR2( 1000 );
   SBFORMATO VARCHAR2( 100 );
   SBFECHAGENERACION VARCHAR2( 100 );
   SBFECHACONTABILIZACION VARCHAR2( 100 );
   DTFECHA VARCHAR2( 100 );
   NUREPONUME REPORTES.REPONUME%TYPE;
   NUPERIFACT PERIFACT.PEFACODI%TYPE;
   NUPEFACICL PERIFACT.PEFACICL%TYPE;
   RCPROGRAMACION DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
   SBPARAMETROS GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE;
   NUPOSSERV NUMBER;
   NUPOSFIN NUMBER;
   NUTIPOPROD SERVICIO.SERVCODI%TYPE;
   RCESPRSEPE ESPRSEPE%ROWTYPE;
   NUEPSPNUTO NUMBER;
   NUEPSPNUPR NUMBER;
   NUNUEVAPROG GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE;
   TBSCHEDETAILS DAGE_PROC_SCHE_DETAIL.TYTBGE_PROC_SCHE_DETAIL;
   BOCONTINUA BOOLEAN := TRUE;
   RCPROCEJEC PROCEJEC%ROWTYPE;
   PROCEDURE OBTIENEPARAMETROS( ISBPARAMETROS IN VARCHAR2, OSBCONEXION OUT VARCHAR2, ONUPERIODO OUT PERIFACT.PEFACODI%TYPE, ONUCICLO OUT PERIFACT.PEFACICL%TYPE )
    IS
      NUPOSPARAM NUMBER;
      TBSTR UT_STRING.TYTB_STRING;
    BEGIN
      TBSTR.DELETE;
      UT_STRING.EXTSTRING( ISBPARAMETROS, '|', TBSTR );
      FOR I IN 1..TBSTR.COUNT
       LOOP
         NUPOSPARAM := INSTR( TBSTR( I ), 'PEFACODI=' );
         IF NUPOSPARAM != 0 THEN
            ONUPERIODO := SUBSTR( TBSTR( I ), NUPOSPARAM + 9, LENGTH( TBSTR( I ) ) );
         END IF;
         NUPOSPARAM := INSTR( TBSTR( I ), 'PEFACICL=' );
         IF NUPOSPARAM != 0 THEN
            ONUCICLO := SUBSTR( TBSTR( I ), NUPOSPARAM + 9, LENGTH( TBSTR( I ) ) );
         END IF;
      END LOOP;
      NUPOSPARAM := INSTR( ISBPARAMETROS, 'CON=' );
      IF NUPOSPARAM != 0 THEN
         OSBCONEXION := SUBSTR( ISBPARAMETROS, NUPOSPARAM + 4, LENGTH( ISBPARAMETROS ) - ( NUPOSPARAM + 4 ) );
      END IF;
   END;
   PROCEDURE PRINSSERVTOPROCINREPO( INUSERVICIO IN SERVICIO.SERVCODI%TYPE, INUPERIFACT IN PERIFACT.PEFACODI%TYPE, IONUIDREPORTE IN OUT NUMBER )
    IS
      SBMODO ESPRSEPE.EPSPESTA%TYPE;
      SBTABLA ESPRSEPE.EPSPTABL%TYPE;
      SBINCO ESPRSEPE.EPSPINPR%TYPE;
      SBIDULTIMA ESPRSEPE.EPSPIDPR%TYPE;
      SBTITULOREPO MENSAJE.MENSDESC%TYPE;
    BEGIN
      SBTITULOREPO := PKTBLMENSAJE.FSBGETDESCRIPTION( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, 13117 );
      PKBOPROCCTRLBYSERVICEMGR.GETEXECMODEBYSERV( INUSERVICIO, INUPERIFACT, PKBILLCONST.PROG_FGCA, SBMODO, SBTABLA, SBINCO, SBIDULTIMA );
      PKBOPROCCTRLBYSERVICEMGR.INSSERVTOPROCINREPOINCO( INUSERVICIO, SBMODO, SBTABLA, SBINCO, SBIDULTIMA, SBTITULOREPO, IONUIDREPORTE );
   END PRINSSERVTOPROCINREPO;
   PROCEDURE SIMAUTHOSRV( INUPERIFACT IN PERIFACT.PEFACODI%TYPE, INUPERICICL IN PERIFACT.PEFACICL%TYPE, IONUIDREPORTE IN OUT NUMBER )
    IS
      SBMODO ESPRSEPE.EPSPESTA%TYPE;
      SBTABLA ESPRSEPE.EPSPTABL%TYPE;
      SBINCO ESPRSEPE.EPSPINPR%TYPE;
      SBIDULTIMA ESPRSEPE.EPSPIDPR%TYPE;
      SBTITULOREPO MENSAJE.MENSDESC%TYPE;
      TBSERVLIQ PKTBLSERVICIO.TYSERVCODI;
    BEGIN
      PKBCSERVTOLIQUIDATE.GETSERVTOLIQARR( INUPERICICL, TBSERVLIQ );
      SBTITULOREPO := PKTBLMENSAJE.FSBGETDESCRIPTION( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, 13117 );
      SBMODO := 'A';
      SBTABLA := 'SERVSUSC';
      SBINCO := 'N';
      SBIDULTIMA := '-';
      PKBOPROCCTRLBYSERVICEMGR.INSSERVTOPROCINREPOINCO( TBSERVLIQ( 1 ), SBMODO, SBTABLA, SBINCO, SBIDULTIMA, SBTITULOREPO, IONUIDREPORTE );
      PKBCESPRSEPE.UPSTATEDATA( TBSERVLIQ( 1 ), INUPERIFACT, PKBILLCONST.PROG_FGCA, PKBOPROCCTRLBYSERVICEMGR.FSBGETBLOCKSTATE, PKSESSIONMGR.FSBGETPROCSESSION, NULL );
   END SIMAUTHOSRV;
 BEGIN
   NUTHREADS := DAPARAMETR.FNUGETPAMENUME( 'NRO_PROCESOS_PARALELO' );
   GE_BOSCHEDULE.ADDLOGTOSCHEDULEPROCESS( INUSCHEDULE, NUTHREADS, NULOGPROCESS );
   RCPROGRAMACION := DAGE_PROCESS_SCHEDULE.FRCGETRECORD( INUSCHEDULE );
   SBPARAMETROS := RCPROGRAMACION.PARAMETERS_;
   OBTIENEPARAMETROS( SBPARAMETROS, SBCONNSTRINGENC, NUPERIFACT, NUPEFACICL );
   BEGIN
      PKCONFPROCESSCONTROLMGR.VALIDATEPROCESS( NUPERIFACT, NUPEFACICL, 'FGCA', PKCONSTANTE.NULLNUM );
    EXCEPTION
      WHEN OTHERS THEN
         GE_BOSCHEDULE.REPROGRAMPROCESS( INUSCHEDULE, SYSDATE + ( 1 / 24 ), NUNUEVAPROG );
         BOCONTINUA := FALSE;
   END;
   IF ( BOCONTINUA ) THEN
      RCPROCEJEC := PKEXECUTEDPROCESSMGR.FRCGETRECORD( PKBILLCONST.PROG_FGCA, NUPERIFACT );
      IF ( RCPROCEJEC.PREJIDPR IS NULL ) THEN
         PKEXECUTEDPROCESSMGR.ADDRECORD( NUPERIFACT, PKBILLCONST.PROG_FGCA, '-', -1, NULL );
         COMMIT;
      END IF;
      GE_BCPROC_SCHE_DETAIL.GETSCHEDULEDETAILS( INUSCHEDULE, TBSCHEDETAILS );
      FOR I IN TBSCHEDETAILS.FIRST..TBSCHEDETAILS.LAST
       LOOP
         NUPOSSERV := INSTR( TBSCHEDETAILS( I ).PARAMETER, 'SERVCODI=' ) + 9;
         NUPOSFIN := INSTR( TBSCHEDETAILS( I ).PARAMETER, '|', 1, 2 );
         NUTIPOPROD := SUBSTR( TBSCHEDETAILS( I ).PARAMETER, NUPOSSERV, NUPOSFIN - NUPOSSERV );
         IF NUTIPOPROD = PKCONSTANTE.NULLNUM THEN
            SIMAUTHOSRV( NUPERIFACT, NUPEFACICL, NUREPONUME );
          ELSE
            IF ( PKBCESPRSEPE.FBLEXIST( NUTIPOPROD, NUPERIFACT, PKBILLCONST.PROG_FGCA ) ) THEN
               PKBCESPRSEPE.GETRECORD( NUTIPOPROD, NUPERIFACT, PKBILLCONST.PROG_FGCA, RCESPRSEPE );
               NUEPSPNUTO := RCESPRSEPE.EPSPNUTO;
               NUEPSPNUPR := RCESPRSEPE.EPSPNUPR;
             ELSE
               NUEPSPNUTO := PKBCSERVSUSC.FNUCOUNTSUBSERVTOPROCESS( NUPEFACICL, NUTIPOPROD );
               NUEPSPNUPR := 0;
            END IF;
            PRINSSERVTOPROCINREPO( NUTIPOPROD, NUPERIFACT, NUREPONUME );
            IF ( PKBCESPRSEPE.FBLEXIST( NUTIPOPROD, NUPERIFACT, PKBILLCONST.PROG_FGCA ) ) THEN
               PKBCESPRSEPE.UPSTATEDATA( NUTIPOPROD, NUPERIFACT, PKBILLCONST.PROG_FGCA, PKBOPROCCTRLBYSERVICEMGR.FSBGETBLOCKSTATE, PKSESSIONMGR.FSBGETPROCSESSION, NULL );
             ELSE
               PKBOPROCCTRLBYSERVICEMGR.REGSERVICEPROCESSSTAT( NUPERIFACT, NUTIPOPROD, PKBILLCONST.PROG_FGCA, NUEPSPNUTO );
            END IF;
         END IF;
      END LOOP;
      SBRUTA := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE( CSBTRACE_PATH );
      SBRUTA := RTRIM( LTRIM( SBRUTA ) );
      IF ( SBRUTA IS NULL ) THEN
         SBRUTA := '/tmp';
      END IF;
      SBFECHA := TO_CHAR( SYSDATE, 'DDMMYYYYHH24MISS' );
      SBCONNSTRING := RTRIM( FA_UIPROCESOSFACT.FSBDESENCRIPTACADENA( SBCONNSTRINGENC ) );
      SBSISTREPO := SBRUTA;
      SBFORMATO := FSBFMTODATE;
      SBFECHAGENERACION := TO_CHAR( SYSDATE, SBFORMATO );
      SBFECHAGENERACION := '"' || SBFECHAGENERACION || '"';
      SBFECHACONTABILIZACION := TO_CHAR( SYSDATE, SBFORMATO );
      SBFECHACONTABILIZACION := '"' || SBFECHACONTABILIZACION || '"';
      DTFECHA := TO_CHAR( SYSDATE, 'DDMMYYYYHHMISS' );
      SBCOMANDO := 'fgca ' || SBCONNSTRING || ' ' || TO_CHAR( NUPEFACICL ) || ' ' || TO_CHAR( NUPERIFACT ) || ' ' || NUREPONUME || ' ' || SBFECHAGENERACION || ' ' || INUSCHEDULE || ' ' || '> ' || SBRUTA || '/FGCA_' || INUSCHEDULE || '_' || TO_CHAR( NUPERIFACT ) || '_' || DTFECHA || '.trc' || ' 2>' || CHR( 38 ) || '1 ' || CHR( 38 );
      LLAMASIST( SBCOMANDO );
      PKGENERALSERVICES.COMMITTRANSACTION;
   END IF;
END;
/


