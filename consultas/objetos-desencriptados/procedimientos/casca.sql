
CREATE OR REPLACE PROCEDURE CASCA( INUSCHEDULE IN NUMBER )
 IS
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   SBPRCACONS GE_BOINSTANCECONTROL.STYSBVALUE;
   SBFRECUENCIA GE_PROCESS_SCHEDULE.FREQUENCY%TYPE;
   CSBPROCESO CONSTANT VARCHAR( 5 ) := 'casca';
   SBCONEXION VARCHAR2( 100 );
   SBPARAMETROS VARCHAR2( 1000 );
   PROCEDURE GETPARAMETERS
    IS
      RCPROGRAMACION DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
    BEGIN
      PKERRORS.PUSH( 'CASCA.GetParameters' );
      GE_BOSCHEDULE.INSTANCESCHEDULE( INUSCHEDULE );
      RCPROGRAMACION := DAGE_PROCESS_SCHEDULE.FRCGETRECORD( INUSCHEDULE );
      SBPRCACONS := UT_STRING.GETPARAMETERVALUE( RCPROGRAMACION.PARAMETERS_, 'PRCACONS', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
      SBCONEXION := UT_STRING.GETPARAMETERVALUE( RCPROGRAMACION.PARAMETERS_, 'CONEX', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
      SBFRECUENCIA := RCPROGRAMACION.FREQUENCY;
      SBCONEXION := BI_BOSERVICIOSDOTNET.FSBCODIFICARCONTRASENA( SBCONEXION, FALSE );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         PKERRORS.POP;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETPARAMETERS;
   PROCEDURE CONCATPARAMETERS
    IS
    BEGIN
      PKERRORS.PUSH( 'CASCA.ConcatParameters' );
      SBPARAMETROS := SBFRECUENCIA || ' ' || SBPRCACONS;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         PKERRORS.POP;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CONCATPARAMETERS;
 BEGIN
   PKERRORS.PUSH( 'CASCA' );
   GETPARAMETERS;
   CONCATPARAMETERS;
   BI_BOSERVICIOSDOTNET.INVOCARPROC( CSBPROCESO, SBCONEXION, SBPARAMETROS );
   PKERRORS.POP;
 EXCEPTION
   WHEN LOGIN_DENIED THEN
      PKERRORS.POP;
      RAISE LOGIN_DENIED;
   WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
      PKERRORS.POP;
      RAISE PKCONSTANTE.EXERROR_LEVEL2;
   WHEN OTHERS THEN
      PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
      PKERRORS.POP;
      RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END;
/


