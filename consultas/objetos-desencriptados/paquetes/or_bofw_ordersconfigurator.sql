PACKAGE OR_BOFW_OrdersConfigurator IS
























































































































































































































































































































	

	

	

    FUNCTION FSBVERSION  RETURN VARCHAR2;

    FUNCTION FNUTIMEDISPLACEMENT
    (
        INUOPERATINGSECTID IN OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE
    )
    RETURN NUMBER;

    



























    PROCEDURE GETOPERATINGSECTORS
    (
        INUOPERSECID            IN  OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE,
        ISBDESCRIPTION          IN  OR_OPERATING_SECTOR.DESCRIPTION%TYPE,
        INUOPERASECCLASSIFID    IN  OR_OPERATING_SECTOR.OPERA_SEC_CLASSIF_ID%TYPE,
        ISBISZONE               IN  VARCHAR2,
        INUFATHEROPERSECTID     IN  OR_OPERATING_SECTOR.OPER_SEC_FATHER_ID%TYPE,
        INUZONEID               IN  OR_OPERATING_SECTOR.OPERATING_ZONE_ID%TYPE,
        OCUDATACURSOR           OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETOPERATINGUNIT
    (
        INUOPERATINGUNIT IN     NUMBER,
        OCUDATACURSOR    OUT    CONSTANTS.TYREFCURSOR
    );

    



    PROCEDURE GETOPERATINGUNITS
    (
        ISBNAME             IN      OR_OPERATING_UNIT.NAME%TYPE,
        INUOPERUNITID       IN      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUFATHEROPERUNIT   IN      OR_OPERATING_UNIT.FATHER_OPER_UNIT_ID%TYPE,
        INUCLASSIFID        IN      OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID%TYPE,
        ISBADDRESS          IN      OR_OPERATING_UNIT.ADDRESS%TYPE,
        ISBPHONENUMBER      IN      OR_OPERATING_UNIT.PHONE_NUMBER%TYPE,
        ISBEMAIL            IN      OR_OPERATING_UNIT.E_MAIL%TYPE,
        ISBFAXNUMBER        IN      OR_OPERATING_UNIT.FAX_NUMBER%TYPE,
        ISBPERSONNAME       IN      GE_PERSON.NAME_%TYPE,
        INUOPERZONEID       IN      OR_OPERATING_UNIT.OPERATING_ZONE_ID%TYPE,
        ISBASSIGNTYPE       IN      OR_OPERATING_UNIT.ASSIGN_TYPE%TYPE,
        INUADMINBASE        IN      GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
        INUCONTRATORID      IN      GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUCENTROOP         IN      GE_CENTRO_OPERATIVO.ID_CENTRO_OPERATIVO%TYPE,
        OCUDATACURSOR       OUT     CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETOPERUNITSBYBASEADMIN
    (
        INUOPERSECTOR IN NUMBER,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETBASEADMINBYOPERUNIT
    (
        INUOPERUNIT     IN NUMBER,
        ONUBASEADMIN    OUT NUMBER
    );

    PROCEDURE GETTASKTYPE
    (
        INUTASKTYPEID IN    NUMBER,
        OCUDATACURSOR OUT   CONSTANTS.TYREFCURSOR
    );

    


























    PROCEDURE GETTASKTYPES
    (
        INUTASKTYPEID       IN      OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ISBSHORTNAME        IN      OR_TASK_TYPE.SHORT_NAME%TYPE,
        INUTASKTYPECLASSIF  IN      OR_TASK_TYPE.TASK_TYPE_CLASSIF%TYPE,
        ISBDESCRIPTION      IN      OR_TASK_TYPE.DESCRIPTION%TYPE,
        OCUDATACURSOR       OUT     CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPESBYOPERUNIT
    (
        INUOPERUNIT   IN  NUMBER,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    );

    



    PROCEDURE GETITEM
    (
        INUITEMID     IN    NUMBER,
        OCUDATACURSOR OUT   CONSTANTS.TYREFCURSOR
    );

    



    PROCEDURE GETITEMS
    (
        INUITEMSID              IN      GE_ITEMS.ITEMS_ID%TYPE,
        ISBDESCRIPTION          IN      GE_ITEMS.DESCRIPTION%TYPE,
        INUITEMCLASSIFCLASSIF   IN      GE_ITEMS.ITEM_CLASSIF_ID%TYPE,
        INUTIPOITEM             IN      GE_ITEMS.ID_ITEMS_TIPO%TYPE,
        ISBCODE                 IN      GE_ITEMS.CODE%TYPE,
        OCUDATACURSOR           OUT     CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETITEMSBYTASKTYPE
    (
        INUTASKTYPE   IN  NUMBER,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPEBYITEM
    (
        INUITEMID        IN  NUMBER,
        ONUTASKTYPE      OUT NUMBER
    );

    FUNCTION FSBTIMEAMOUNTFORMAT
    (
        INUAMOUNT      IN NUMBER,
    	IBLTWENTY_FOUR IN BOOLEAN DEFAULT FALSE
    ) RETURN VARCHAR2;

    




    PROCEDURE GETOPERUNITITEM
    (
        INUITEMID  IN  OR_OPE_UNI_ITEM_BALA.ITEMS_ID%TYPE,
        ORFRESULT  OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETOPERUNITBYOUITEM
    (
        INUROWID       IN  ROWID,
        ONUOPERUNITID  OUT OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    );

    PROCEDURE GETOUITEMBYOPERUNIT
    (
        INUOPERUNITID IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETOPERUNITPERSON
    (
        INUPERSONID  IN  OR_OPER_UNIT_PERSONS.PERSON_ID%TYPE,
        ORFRESULT    OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETOPERUNITBYOUPERSON
    (
        INUROWID       IN  ROWID,
        ONUOPERUNITID  OUT OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    );

    PROCEDURE GETOUPERSONBYOPERUNIT
    (
        INUOPERUNITID IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETOPERUNITCOMMENT
    (
        INUCOMMTYP      IN  OR_OPER_UNIT_COMMENT.COMMENT_TYPE_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETOPERUNITBYOUCOMMENT
    (
        INUROWID       IN  ROWID,
        ONUOPERUNITID  OUT OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    );

    PROCEDURE GETOUCOMMENTBYOPERUNIT
    (
        INUOPERUNITID IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPEACTIVITY
    (
        INUACTIVITY     IN  OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPEBYTTACTIVITY
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    );

    PROCEDURE GETTTACTIVITYBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPECAUSAL
    (
        INUCAUSALID     IN  OR_TASK_TYPE_CAUSAL.CAUSAL_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPEBYTTCAUSAL
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    );

    PROCEDURE GETTTCAUSALBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPECOMMENTTYPE
    (
        INUCOMMTYPEID   IN  OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPEBYTTCOMMENTTYPE
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    );

    PROCEDURE GETTTCOMMENTBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPENUMERATOR
    (
        INUNUMCONID     IN  OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPEBYTTNUMERATOR
    (
        INUNUMCONID    IN  OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID%TYPE,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    );

    PROCEDURE GETTTNUMERATORBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPEBYOPERSECTOR
    (
        INUOPERSECTORID IN  OR_OPSE_OPUNT_TSKTYP.OPERATING_SECTOR_ID%TYPE,
        ONUTASKTYPEID   OUT OR_OPSE_OPUNT_TSKTYP.TASK_TYPE_ID%TYPE
    );

    PROCEDURE GETTASKTYPEREGORD
    (
        INUCAUSALID   IN  OR_ORDER_REGEN.CAUSAL_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPEBYTTREGORD
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    );

    PROCEDURE GETTTREGORDBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );


    PROCEDURE GETTASKTYPEBYTTADDDATA
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    );

    PROCEDURE GETTTADDDATABYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );

    















    PROCEDURE GETASSOCIATEDITEM
    (
        ISBASSOCITEM IN VARCHAR2,
        ORFRESULT    OUT CONSTANTS.TYREFCURSOR
    );

    
















    PROCEDURE GETASSOCIATEDITEMSBYITEM
    (
        INUITEMS_ID IN GE_ITEMS.ITEMS_ID%TYPE,
        ORFRESULT   OUT CONSTANTS.TYREFCURSOR
    );

    















    PROCEDURE GETITEMBYASSOCIATEDITEM
    (
        ISBASSOCITEM IN VARCHAR2,
        ONUITEMS_ID  OUT GE_ITEMS.ITEMS_ID%TYPE
    );

    



























    PROCEDURE GETITEMSERIADO
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    );

    





































    PROCEDURE GETITEMSSERIADOS
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        INUITEMSID           IN  GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        INUIDITEMSTIPO       IN  GE_ITEMS_TIPO.ID_ITEMS_TIPO%TYPE,
        INUOPERATINGUNIT     IN  GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE,
        ISBSERIE             IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        ISBESTADOTECNICO     IN  GE_ITEMS_SERIADO.ESTADO_TECNICO%TYPE,
        INUIDITEMSESTADOINV  IN  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        ISBPROPIEDAD         IN  GE_ITEMS_SERIADO.PROPIEDAD%TYPE,
        INUNUMEROSERVICIO    IN  GE_EMPAQUETAMIENTO.NUMERO_SERVICIO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    );

    



























    PROCEDURE ITEMSSERIADOSPORITEM
    (
        INUITEMS_ID IN  GE_ITEMS.ITEMS_ID%TYPE,
        ORFRESULT   OUT CONSTANTS.TYREFCURSOR
    );

    



















    PROCEDURE ITEMPORITEMSERIADOS
    (
        INUITEMSERIADO      IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMS_ID         OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE
    );

    






















    PROCEDURE GETITEMSERIADOATTRIBUTES
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_SERIADO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    );

    




















    PROCEDURE GETITEMSERIADOATTRIBUTE
    (
        INUIDITEMSTIPOATVAL IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL%TYPE,
        ORFRESULT           OUT CONSTANTS.TYREFCURSOR
    );

    



















    PROCEDURE ITEMSERIADOSPORATTRIBUTE
    (
        INUIDITEMSTIPOATVAL IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL%TYPE,
        ONUIDITEMSSERIADO   OUT GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_SERIADO%TYPE
    );

    
    



















    PROCEDURE GETITEMATTRIBUTES
    (
        INUIDITEM           IN  GE_ITEMS.ITEMS_ID%TYPE,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    );

    




















    PROCEDURE GETITEMATTRIBUTE
    (
        INUIDITEMSTIPOATT       IN  GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    );

    


















    PROCEDURE ITEMPORATTRIBUTE
    (
        INUIDITEMSTIPOATT   IN  GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE,
        ONUIDITEMS          OUT GE_ITEMS.ITEMS_ID%TYPE
    );
    
    
    





















    PROCEDURE GETOPERATINGSECTORBYZONE
    (
        INUZONE       IN NUMBER,
        OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
    );
    
    
    
    



















    PROCEDURE GETZONE
    (
        INUZONE       IN  OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE,
        OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
    );
    
    
    
    
    PROCEDURE GETZONES
    (
        INUZONE           IN  OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE,
        ISBDESCRIPTION    IN  OR_OPERATING_ZONE.DESCRIPTION%TYPE,
        INUCLASIFF        IN  OR_OPERATING_ZONE.ZONE_CLASSIF_ID%TYPE,
        ISBMANAGEROUTE    IN  OR_OPERATING_ZONE.MANAGE_ROUTE%TYPE,
        OCUDATACURSOR     OUT CONSTANTS.TYREFCURSOR
    );

    



















    PROCEDURE GETZONEBYBASEADMIN
    (
        INUBASE       IN  GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
        OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
    );
    
    

















    PROCEDURE GETBASEADMINBYZONE
    (
        INUZONE             IN  OR_ZONA_BASE_ADM.OPERATING_ZONE_ID%TYPE,
        ONUBASE             OUT OR_ZONA_BASE_ADM.ID_BASE_ADMINISTRA%TYPE
    );

    














    PROCEDURE GETEXEPACTBYUNIT
    (
        INUUNIDAD       IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        OCUDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    );
    
    






















    PROCEDURE ITEMSSERIALBYITEMBAL
    (
        ISBOPEUNIITEMBALID      IN  VARCHAR2,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETACTCOMMTYPE
    (
        INUITEMSCOMMTYPE    IN  GE_ITEMS_COMMTYPE.ITEMS_COMMTYPE_ID%TYPE,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    );

    




    PROCEDURE GETACTIVITYCOMMTYPES
    (
        INUITEMID       IN  NUMBER,
        OCUDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    );

    

















    PROCEDURE GETITEMSGROUP
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    );
    

    

















    PROCEDURE GETITEMSGROUPSCHILD
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    );
    

    

















    PROCEDURE GETITEMGROUPFATHER
    (
        INUITEMSERIADOCHILD     IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMSERIADOFATHER    OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE
    );
    
    
    
    
    PROCEDURE GETROUTESBYZONE
    (
        INUZONEID       IN NUMBER,
        OCUDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    );

    
    
    
    PROCEDURE GETROUTE
    (
        INUROUTEID       IN  OR_ROUTE.ROUTE_ID%TYPE,
        OCUDATACURSOR    OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETOPERUNITSBYPROJECT
    (
        INUPROJECT    IN  PM_PROJECT.PROJECT_ID%TYPE,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    );
    
    




    PROCEDURE GETTRAZABILITY
    (
        INUSERIALITEMID IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUCURSOR       OUT CONSTANTS.TYREFCURSOR
    );
    
    





    PROCEDURE GETMOVEHISTORY
    (
        INUMOVEHISTORY  IN  OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE,
        OCUCURSOR       OUT CONSTANTS.TYREFCURSOR
    );

    





    PROCEDURE GETMOVEHISTORYBYSERIALITEM
    (
        INUSERIALITEM   IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUCURSOR       OUT CONSTANTS.TYREFCURSOR
    );

    





    PROCEDURE GETSERIALITEMBYMOVEHISTORY
    (
        INUMOVEHISTORY  IN  OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE,
        ONUSERIALITEM   OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    );

    






    PROCEDURE GETACTIVHISTORYBYSERIALITEM
    (
        INUSERIALITEM   IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUCURSOR       OUT CONSTANTS.TYREFCURSOR
    );

    



    PROCEDURE GETITEMSBYMOVE
    (
        INUMOVEID     IN  OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    );

    



    PROCEDURE GETMOVEBYITEM
    (
        INUITEMID           IN  GE_ITEMS.ITEMS_ID%TYPE,
        ONUUNIITEMBALAMOVID OUT OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE
    );

    PROCEDURE GETACTIVITY
    (
        INUITEMID     IN    NUMBER,
        OCUDATACURSOR OUT   CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETACTIVITIES
    (
        INUITEMSID              IN      GE_ITEMS.ITEMS_ID%TYPE,
        ISBDESCRIPTION          IN      GE_ITEMS.DESCRIPTION%TYPE,
        INUITEMCLASSIFCLASSIF   IN      GE_ITEMS.ITEM_CLASSIF_ID%TYPE,
        ISBNOVELTY              IN      VARCHAR2,
        OCUDATACURSOR           OUT     CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETACTIVITIESBYTASKTYPE
    (
        INUTASKTYPE   IN  NUMBER,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    );
    

    PROCEDURE GETMATERIAL
    (
        INUITEMID     IN    NUMBER,
        OCUDATACURSOR OUT   CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETMATERIALS
    (
        INUITEMSID              IN      GE_ITEMS.ITEMS_ID%TYPE,
        ISBDESCRIPTION          IN      GE_ITEMS.DESCRIPTION%TYPE,
        INUITEMCLASSIFCLASSIF   IN      GE_ITEMS.ITEM_CLASSIF_ID%TYPE,
        INUTIPOITEM             IN      GE_ITEMS.ID_ITEMS_TIPO%TYPE,
        ISBCODE                 IN      GE_ITEMS.CODE%TYPE,
        OCUDATACURSOR           OUT     CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETMATERIALSBYTASKTYPE
    (
        INUTASKTYPE   IN  NUMBER,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETACTIVITYATTR
    (
        INUITEMID     IN    NUMBER,
        OCUDATACURSOR OUT   CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETATTRBYACTIVITY
    (
        INUITEMID     IN    NUMBER,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETOPERATINGSECTOR
    (
        INUOPERATINGSECTOR IN   NUMBER,
        OCUDATACURSOR      OUT  CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETTASKTYPEADDDATA
    (
        INUATTSETLID  IN  OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    );
    
    





    FUNCTION FRFPATTERNITEMSBYUNIT
    RETURN CONSTANTS.TYREFCURSOR;
    
        





    FUNCTION FRFCERTITEMSBYUNIT
    RETURN CONSTANTS.TYREFCURSOR;
    
    




    PROCEDURE CHANGEUNITPATTERN
    (
        INUITEMSERIADOID    IN OR_ITEM_PATTERN.ID_ITEMS_SERIADO%TYPE,
        INUREGISTRO         IN NUMBER,
        INUREGISTROS        IN NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORMSG         OUT VARCHAR2
    );

END OR_BOFW_ORDERSCONFIGURATOR;
/

PACKAGE BODY OR_BOFW_OrdersConfigurator IS























































































































































































































































































































	
    CSBVERSION                CONSTANT VARCHAR2(20) := 'SAO302401';

    
    CSBFW_OR_OPERATING_UNIT   CONSTANT GE_ENTITY.NAME_%TYPE := 'FW_OR_OPERATING_UNIT';
    CSBGE_FW_BASE_ADM         CONSTANT GE_ENTITY.NAME_%TYPE := 'GE_FW_BASE_ADM';



    SBATTRIBUTES        GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    TBATTRIBUTES        CC_TYTBATTRIBUTE;

    SBGLOBALFROM    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    SBGLOBALWHERE   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    SBATTRITEMSGRPS     GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    TBATTRITEMSGRPS     CC_TYTBATTRIBUTE;
    
    CSBYES  VARCHAR(2) := 'Si';
    CSBNO   VARCHAR(2) := 'No';


	
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;






    FUNCTION FNUTIMEDISPLACEMENT
    (
        INUOPERATINGSECTID IN OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE
    )
    RETURN NUMBER IS
    BEGIN
        IF (DAOR_OPERATING_ZONE.FBLEXIST(INUOPERATINGSECTID)) THEN
            RETURN DAOR_OPERATING_ZONE.FNUGETTIME_DISPLACEMENT(INUOPERATINGSECTID);
        ELSE
            RETURN NULL;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE FILLOPERATINGSECTORATTRIBUTES
    IS
    BEGIN

        SBATTRIBUTES := '';
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_SECTOR.OPERATING_SECTOR_ID',
                'ID_SECTOR_OPERATIVO',  CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES,TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_SECTOR.DESCRIPTION',
                'DESCRIPTION',          CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
                
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_OPERA_SEC_CLASSIF.OPERA_SEC_CLASSIF_ID, null, null,
             GE_OPERA_SEC_CLASSIF.OPERA_SEC_CLASSIF_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_OPERA_SEC_CLASSIF.DESCRIPTION)',
            'CLASSIFICATION',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);
            
        CC_BOBOSSUTIL.ADDATTRIBUTE (':PARENT_ID',
                'PARENT_ID',            CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
                


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

PROCEDURE GETOPERATINGSECTORS
(
    INUOPERSECID            IN  OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE,
    ISBDESCRIPTION          IN  OR_OPERATING_SECTOR.DESCRIPTION%TYPE,
    INUOPERASECCLASSIFID    IN  OR_OPERATING_SECTOR.OPERA_SEC_CLASSIF_ID%TYPE,
    ISBISZONE               IN  VARCHAR2,
    INUFATHEROPERSECTID     IN  OR_OPERATING_SECTOR.OPER_SEC_FATHER_ID%TYPE,
    INUZONEID               IN  OR_OPERATING_SECTOR.OPERATING_ZONE_ID%TYPE,
    OCUDATACURSOR           OUT CONSTANTS.TYREFCURSOR
)

IS
SBDESCRIPTION           OR_OPERATING_SECTOR.DESCRIPTION%TYPE;
NUOPERSECID             OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE;
NUOPERASECCLASSIFID     OR_OPERATING_SECTOR.OPERA_SEC_CLASSIF_ID%TYPE;
SBISZONE                VARCHAR2(1);
NUFATHEROPERSECTID      OR_OPERATING_SECTOR.OPER_SEC_FATHER_ID%TYPE;
NUZONEID                OR_OPERATING_SECTOR.OPERATING_ZONE_ID%TYPE;

SBWHERE  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
SBFROM   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

BEGIN

    SBDESCRIPTION       := TRIM (UPPER(NVL(ISBDESCRIPTION, CC_BOCONSTANTS.CSBNULLSTRING )));
    NUOPERSECID         := NVL(INUOPERSECID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    NUOPERASECCLASSIFID := NVL(INUOPERASECCLASSIFID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    NUFATHEROPERSECTID  := NVL(INUFATHEROPERSECTID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    NUZONEID            := NVL(INUZONEID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );

    FILLOPERATINGSECTORATTRIBUTES;

    SBWHERE := NULL;

    
    IF SBDESCRIPTION != CC_BOCONSTANTS.CSBNULLSTRING THEN
        SBWHERE := SBWHERE ||'upper(OR_OPERATING_SECTOR.DESCRIPTION) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:Description)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| SBDESCRIPTION ||CHR(39)||' = :Description'||CHR(10)||'and ';
    END IF;

    
    IF NUOPERSECID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_SECTOR.OPERATING_SECTOR_ID = :OPERATING_SECTOR_ID'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUOPERSECID ||CHR(39)||' = :OPERATING_SECTOR_ID'||CHR(10)||'and ';
    END IF;

    
    IF NUOPERASECCLASSIFID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_SECTOR.OPERA_SEC_CLASSIF_ID = :OPERA_SEC_CLASSIF_ID'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUOPERASECCLASSIFID ||CHR(39)||' = :OPERA_SEC_CLASSIF_ID'||CHR(10)||'and ';
    END IF;

    IF ISBISZONE IS NOT NULL THEN
        IF ISBISZONE = CC_BOCONSTANTS.CSBSI THEN
            SBWHERE := SBWHERE ||'OR_OPERATING_SECTOR.OPER_SEC_FATHER_ID IS null'||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||'OR_OPERATING_SECTOR.OPER_SEC_FATHER_ID IS NOT null'||CHR(10)||'and ';
        END IF;
    END IF;

    IF NUFATHEROPERSECTID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_SECTOR.OPER_SEC_FATHER_ID = :OPER_SEC_FATHER_ID'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUFATHEROPERSECTID ||CHR(39)||' = :OPER_SEC_FATHER_ID'||CHR(10)||'and ';
    END IF;

    IF NUZONEID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN

        SBFROM  := ', GE_SECTOROPE_ZONA';
        SBWHERE := SBWHERE ||'GE_SECTOROPE_ZONA.ID_ZONA_OPERATIVA = :OPERATING_ZONE_ID'||CHR(10)||
            'AND GE_SECTOROPE_ZONA.ID_SECTOR_OPERATIVO = OR_OPERATING_SECTOR.OPERATING_SECTOR_ID '||CHR(10);
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUZONEID ||CHR(39)||' = :OPERATING_ZONE_ID'||CHR(10);
    END IF;

    SBSQL := 'SELECT '|| SBATTRIBUTES ||CHR(10)||
             '  FROM '||CHR(10)||
             '        OR_OPERATING_SECTOR, GE_OPERA_SEC_CLASSIF'||SBFROM||CHR(10)||
             ' WHERE  OR_OPERATING_SECTOR.OPERA_SEC_CLASSIF_ID = GE_OPERA_SEC_CLASSIF.OPERA_SEC_CLASSIF_ID  AND '||CHR(10)||
             '       '|| SBWHERE;

    OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, SBDESCRIPTION, NUOPERSECID, NUOPERASECCLASSIFID, NUFATHEROPERSECTID, NUZONEID;
    
    UT_TRACE.TRACE('sbSql ['||SBSQL||' ]', 2 );

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



    
























    PROCEDURE FILLOPERATINGUNITATTRIBUTES
    IS
    BEGIN
        UT_TRACE.TRACE('I FillOperatingUnitAttributes',1);
        SBATTRIBUTES := '';

      	CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.OPERATING_UNIT_ID',    'OPERATING_UNIT_ID',     CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES, TRUE);
    	CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.OPER_UNIT_CODE',       'OPER_UNIT_CODE',        CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.NAME',                 'NAME',                  CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID, null, null,
             OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID ||'||CHR(39)||' - '||CHR(39)||
            '||OR_OPER_UNIT_CLASSIF.Description)',
            'OPER_UNIT_CLASSIF_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.ASSO_OPER_UNIT, null, null,
             OR_OPERATING_UNIT.ASSO_OPER_UNIT ||'||CHR(39)||' - '||CHR(39)||
            '||ASSO_OPERATING_UNIT.Name)',
            'ASSO_OPER_UNIT',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode( OR_OPERATING_UNIT.UNIT_TYPE_ID, null, null,
             OR_OPERATING_UNIT.UNIT_TYPE_ID ||'||CHR(39)||' - '||CHR(39)||
            '|| DAGE_TIPO_UNIDAD.fsbGetDescripcion(OR_OPERATING_UNIT.UNIT_TYPE_ID) )',
            'UNIT_TYPE_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode( OR_OPERATING_UNIT.CONTRACTOR_ID , null, null,
             OR_OPERATING_UNIT.CONTRACTOR_ID ||'||CHR(39)||' - '||CHR(39)||
            '|| DAGE_Contratista.fsbGetNombre_Contratista(OR_OPERATING_UNIT.CONTRACTOR_ID))',
            'CONTRACTOR_ID',CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode( OR_OPERATING_UNIT.STARTING_ADDRESS, null, null,
             DAAB_Address.fsbGetAddress_Parsed(OR_OPERATING_UNIT.STARTING_ADDRESS))',
            'STARTING_ADDRESS',CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

         
         






        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.PERSON_IN_CHARGE, null, null,
             OR_OPERATING_UNIT.PERSON_IN_CHARGE ||'||CHR(39)||' - '||CHR(39)||
            '||GE_PERSON.Name_)',
            'PERSON_IN_CHARGE',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.EVAL_LAST_DATE',       'EVAL_LAST_DATE',        CC_BOBOSSUTIL.CNUDATE,     SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.SUBSCRIBER_ID, null, null,
               DAGE_IDENTIFICA_TYPE.FSBGETDESCRIPTION(DAGE_SUBSCRIBER.FNUGETIDENT_TYPE_ID(OR_OPERATING_UNIT.SUBSCRIBER_ID))||'||CHR(39)||' - '||CHR(39)||
                '||DAGE_SUBSCRIBER.FSBGETIDENTIFICATION(OR_OPERATING_UNIT.SUBSCRIBER_ID))',
            'SUBSCRIBER_ID', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.VEHICLE_NUMBER_PLATE', 'VEHICLE_NUMBER_PLATE',  CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.OPER_UNIT_STATUS_ID, null, null,
             OR_OPERATING_UNIT.OPER_UNIT_STATUS_ID ||'||CHR(39)||' - '||CHR(39)||
            '||OR_OPER_UNIT_STATUS.Description)',
            'OPER_UNIT_STATUS_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.VALID_FOR_ASSIGN,''Y'',''Si'',''No'')','VALID_FOR_ASSIGN', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.GEN_ADMIN_ORDER,''Y'',''Si'',''No'')','GEN_ADMIN_ORDER', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.NOTIFICABLE,''Y'',''Si'',''No'')',    'NOTIFICABLE',     CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        
        





        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.ADMIN_BASE_ID, null, null,
             OR_OPERATING_UNIT.ADMIN_BASE_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_BASE_ADMINISTRA.Descripcion)',
         'ADMIN_BASE_ID',  CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.OPERATING_ZONE_ID, null, null,
             OR_OPERATING_UNIT.OPERATING_ZONE_ID ||'||CHR(39)||' - '||CHR(39)||
            '||OR_OPERATING_ZONE.description)',
         'OPERATING_ZONE_ID',  CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.ASSIGN_TYPE, '
            ||CHR(39)||'S'||CHR(39)||', '||CHR(39)||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_S')||CHR(39)||', '
            ||CHR(39)||'C'||CHR(39)||', '||CHR(39)||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_C')||CHR(39)||', '
            ||CHR(39)||'N'||CHR(39)||', '||CHR(39)||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_N')||CHR(39)||','
            ||CHR(39)||'R'||CHR(39)||', '||CHR(39)||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_R')||CHR(39)||')',
            'ASSIGN_TYPE',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.ASSIGN_CAPACITY',    'ASSIGN_CAPACITY',                  CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.USED_ASSIGN_CAP',    'USED_ASSIGN_CAP',                  CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.AIU_VALUE_UTIL',       'AIU_VALUE_UTIL',        CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.AIU_VALUE_ADMIN',      'AIU_VALUE_ADMIN',       CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.AIU_VALUE_UNEXPECTED', 'AIU_VALUE_UNEXPECTED',  CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.PASSWORD_REQUIRED,''Y'',''Si'',''No'')',    'PASSWORD_REQUIRED',     CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.ADDRESS',              'ADDRESS',               CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.PHONE_NUMBER',         'PHONE_NUMBER',          CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.FAX_NUMBER',           'FAX_NUMBER',            CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.BEEPER',               'BEEPER',                CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);


        
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.WORK_DAYS,''L'',''H�biles'',''N'',''No H�biles'',''B'',''Ambos'','''')','WORK_DAYS',CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.UNASSIGNABLE,''Y'',''Si'',''No'')','UNASSIGNABLE',CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        

        
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.OUT_BASE_PREP_TIME','OUT_BASE_PREP_TIME',CC_BOBOSSUTIL.CNUNUMBER , SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.SNACK_TIME','SNACK_TIME',CC_BOBOSSUTIL.CNUNUMBER , SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.RET_BASE_PREP_TIME','RET_BASE_PREP_TIME',CC_BOBOSSUTIL.CNUNUMBER , SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.ADD_VALUE_ORDER','ADD_VALUE_ORDER',CC_BOBOSSUTIL.CNUDECIMAL , SBATTRIBUTES, TBATTRIBUTES);
        

        
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.ITEM_REQ_FRECUENCY','ITEM_REQ_FRECUENCY',CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.NEXT_ITEM_REQUEST','NEXT_ITEM_REQUEST',CC_BOBOSSUTIL.CNUDATE, SBATTRIBUTES, TBATTRIBUTES);
        

        
        IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
            CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_PHONE_PIN.PIN',       'PIN',        CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);
        END IF;

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.E_MAIL',               'E_MAIL',                CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (':parent_id',                             'parent_id',             CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        
        SBGLOBALFROM := 'OR_OPERATING_UNIT, '||CHR(10)||
                        'OR_OPER_UNIT_CLASSIF, '||CHR(10)||
                        'OR_OPERATING_UNIT ASSO_OPERATING_UNIT, '||CHR(10)||
                        'OR_OPERATING_UNIT FATHER_OPERATING_UNIT, '||CHR(10)||
                        'GE_PERSON, '||CHR(10)||
                        'OR_OPER_UNIT_STATUS, '||CHR(10)||
                        'GE_CENTRO_OPERATIVO, '||CHR(10)||
                        'GE_BASE_ADMINISTRA, '||CHR(10)||
                        'OR_OPERATING_ZONE '||CHR(10);
                        
        SBGLOBALWHERE := 'OR_OPER_UNIT_CLASSIF.oper_unit_classif_id = OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID '||CHR(10)||
                         'AND ASSO_OPERATING_UNIT.operating_unit_id(+) = OR_OPERATING_UNIT.ASSO_OPER_UNIT '||CHR(10)||
                         'AND FATHER_OPERATING_UNIT.operating_unit_id(+) = OR_OPERATING_UNIT.FATHER_OPER_UNIT_ID '||CHR(10)||
                         'AND GE_PERSON.person_id(+) = OR_OPERATING_UNIT.PERSON_IN_CHARGE '||CHR(10)||
                         'AND OR_OPER_UNIT_STATUS.oper_unit_status_id = OR_OPERATING_UNIT.OPER_UNIT_STATUS_ID '||CHR(10)||
                         'AND GE_CENTRO_OPERATIVO.id_centro_operativo(+) = OR_OPERATING_UNIT.OPERATING_CENTER_ID '||CHR(10)||
                         'AND GE_BASE_ADMINISTRA.id_base_administra(+) = OR_OPERATING_UNIT.ADMIN_BASE_ID '||CHR(10)||
                         'AND OR_OPERATING_ZONE.operating_zone_id(+) = OR_OPERATING_UNIT.OPERATING_ZONE_ID '||CHR(10);

        UT_TRACE.TRACE('sbAttributes := '||SBATTRIBUTES,1);
        UT_TRACE.TRACE('sbGlobalFrom := '||SBGLOBALFROM,1);
        UT_TRACE.TRACE('sbGlobalWhere := '||SBGLOBALWHERE,1);
        UT_TRACE.TRACE('F FillOperatingUnitAttributes',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

PROCEDURE GETOPERATINGUNIT
(
    INUOPERATINGUNIT IN NUMBER,
    OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
)
IS

SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

BEGIN
UT_TRACE.TRACE('GetOperatingUnit',1);
    FILLOPERATINGUNITATTRIBUTES;

    SBSQL := 'select '|| SBATTRIBUTES ||CHR(10)||
             'from /*+ OR_BOFW_OrdersConfigurator.GetOperatingUnit SAO182383 */ '||CHR(10)||
             SBGLOBALFROM;

    
    IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
        SBSQL := SBSQL||', GE_PHONE_PIN'||CHR(10);
    END IF;

    SBSQL := SBSQL||'where '||SBGLOBALWHERE||CHR(10)||
                    'AND OR_OPERATING_UNIT.OPERATING_UNIT_ID = :nuOperUnit'||CHR(10);

    
    IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
        SBSQL := SBSQL||' AND GE_PHONE_PIN.phone_pin_id(+) = OR_OPERATING_UNIT.phone_number';
    END IF;

    UT_TRACE.TRACE(SBSQL,10);

    OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUOPERATINGUNIT;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




    
    

    







































PROCEDURE GETOPERATINGUNITS
(
    ISBNAME             IN      OR_OPERATING_UNIT.NAME%TYPE,
    INUOPERUNITID       IN      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
    INUFATHEROPERUNIT   IN      OR_OPERATING_UNIT.FATHER_OPER_UNIT_ID%TYPE,
    INUCLASSIFID        IN      OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID%TYPE,
    ISBADDRESS          IN      OR_OPERATING_UNIT.ADDRESS%TYPE,
    ISBPHONENUMBER      IN      OR_OPERATING_UNIT.PHONE_NUMBER%TYPE,
    ISBEMAIL            IN      OR_OPERATING_UNIT.E_MAIL%TYPE,
    ISBFAXNUMBER        IN      OR_OPERATING_UNIT.FAX_NUMBER%TYPE,
    ISBPERSONNAME       IN      GE_PERSON.NAME_%TYPE,
    INUOPERZONEID       IN      OR_OPERATING_UNIT.OPERATING_ZONE_ID%TYPE,
    ISBASSIGNTYPE       IN      OR_OPERATING_UNIT.ASSIGN_TYPE%TYPE,
    INUADMINBASE        IN      GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
    INUCONTRATORID      IN      GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
    INUCENTROOP         IN      GE_CENTRO_OPERATIVO.ID_CENTRO_OPERATIVO%TYPE,
    OCUDATACURSOR       OUT     CONSTANTS.TYREFCURSOR
)
IS

    SBNAME                  OR_OPERATING_UNIT.NAME%TYPE;
    NUOPERUNITID            OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
    NUFATHEROPERUNIT        OR_OPERATING_UNIT.FATHER_OPER_UNIT_ID%TYPE;
    NUCLASSIFID             OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID%TYPE;
    SBADDRESS               OR_OPERATING_UNIT.ADDRESS%TYPE;
    SBPHONENUMBER           OR_OPERATING_UNIT.PHONE_NUMBER%TYPE;
    SBEMAIL                 OR_OPERATING_UNIT.E_MAIL%TYPE;
    SBFAXNUMBER             OR_OPERATING_UNIT.FAX_NUMBER%TYPE;
    SBPERSONNAME            GE_PERSON.NAME_%TYPE;
    NUOPERZONEID            OR_OPERATING_UNIT.OPERATING_ZONE_ID%TYPE;
    SBASSIGNTYPE            OR_OPERATING_UNIT.ASSIGN_TYPE%TYPE;
    NUADMINBASE             OR_OPERATING_UNIT.ADMIN_BASE_ID%TYPE;
    NUCONTRATORID           OR_OPERATING_UNIT.CONTRACTOR_ID%TYPE;
    NUCENTROOP              GE_CENTRO_OPERATIVO.ID_CENTRO_OPERATIVO%TYPE;
    
    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    SBWHERE  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
BEGIN
    UT_TRACE.TRACE('OR_BOFW_OrdersConfigurator.GetOperatingUnits',1);
    SBNAME             := TRIM (UPPER(NVL(ISBNAME, CC_BOCONSTANTS.CSBNULLSTRING )));
    NUOPERUNITID       := NVL(INUOPERUNITID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    NUFATHEROPERUNIT   := NVL(INUFATHEROPERUNIT, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    NUCLASSIFID        := NVL(INUCLASSIFID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    SBADDRESS          := TRIM (UPPER(NVL(ISBADDRESS, CC_BOCONSTANTS.CSBNULLSTRING )));
    SBPHONENUMBER      := TRIM (UPPER(NVL(ISBPHONENUMBER, CC_BOCONSTANTS.CSBNULLSTRING )));
    SBEMAIL            := TRIM (UPPER(NVL(ISBEMAIL, CC_BOCONSTANTS.CSBNULLSTRING )));
    SBFAXNUMBER        := TRIM (UPPER(NVL(ISBFAXNUMBER, CC_BOCONSTANTS.CSBNULLSTRING )));
    SBPERSONNAME       := TRIM (UPPER(NVL(ISBPERSONNAME, CC_BOCONSTANTS.CSBNULLSTRING )));
    NUOPERZONEID       := NVL(INUOPERZONEID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    SBASSIGNTYPE       := TRIM (UPPER(NVL(ISBASSIGNTYPE, CC_BOCONSTANTS.CSBAPPLICATIONNULL )));
    NUADMINBASE        := NVL(INUADMINBASE, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    NUCONTRATORID      := NVL(INUCONTRATORID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    NUCENTROOP         := NVL(INUCENTROOP, CC_BOCONSTANTS.CNUAPPLICATIONNULL );


    FILLOPERATINGUNITATTRIBUTES;

    SBWHERE := NULL;
    
    SBWHERE := SBGLOBALWHERE||'AND ';
    
    
    CT_BOCONTRSECURITY.LOADSECURITYSETTINGS(CT_BOCONSTANTS.CSBSEC_INFO_TYPE_WORK_UDT);
    IF (CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE) THEN
          
          SBWHERE := SBWHERE ||'CT_BOContrSecurity.fnuCanManageWorkUnit(or_operating_unit.operating_unit_id)=1'||CHR(10)||'and ';
          UT_TRACE.TRACE( 'carg� unidades ['||CT_BCCONTRSECURITY.TBWORKUNITS.COUNT || ']',1);
    END IF;

    IF SBNAME != CC_BOCONSTANTS.CSBNULLSTRING THEN
        SBWHERE := SBWHERE ||'upper(OR_OPERATING_UNIT.NAME) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:NAME)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| SBNAME ||CHR(39)||' = :NAME'||CHR(10)||'and ';
    END IF;

    IF NUOPERUNITID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_UNIT.operating_unit_id = :operating_unit_id'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUOPERUNITID ||CHR(39)||' = :operating_unit_id'||CHR(10)||'and ';
    END IF;

    IF NUFATHEROPERUNIT != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_UNIT.father_oper_unit_id = :father_oper_unit_id'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUFATHEROPERUNIT ||CHR(39)||' = :father_oper_unit_id'||CHR(10)||'and ';
    END IF;

    IF NUCLASSIFID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_UNIT.oper_unit_classif_id = :oper_unit_classif_id'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUCLASSIFID ||CHR(39)||' = :oper_unit_classif_id'||CHR(10)||'and ';
    END IF;

    IF SBADDRESS != CC_BOCONSTANTS.CSBNULLSTRING THEN
        SBWHERE := SBWHERE ||'upper(OR_OPERATING_UNIT.address) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:address)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| SBADDRESS ||CHR(39)||' = :address'||CHR(10)||'and ';
    END IF;

    IF SBPHONENUMBER != CC_BOCONSTANTS.CSBNULLSTRING THEN
        SBWHERE := SBWHERE ||'upper(OR_OPERATING_UNIT.phone_number) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:phone_number)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| SBPHONENUMBER ||CHR(39)||' = :phone_number'||CHR(10)||'and ';
    END IF;

    IF SBEMAIL != CC_BOCONSTANTS.CSBNULLSTRING THEN
        SBWHERE := SBWHERE ||'upper(OR_OPERATING_UNIT.e_mail) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:e_mail)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| SBEMAIL ||CHR(39)||' = :e_mail'||CHR(10)||'and ';
    END IF;

    IF SBFAXNUMBER != CC_BOCONSTANTS.CSBNULLSTRING THEN
        SBWHERE := SBWHERE ||'upper(OR_OPERATING_UNIT.fax_number) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:fax_number)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| SBFAXNUMBER ||CHR(39)||' = :fax_number'||CHR(10)||'and ';
    END IF;

    IF NUOPERZONEID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_UNIT.operating_zone_id = :operating_zone_id'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUOPERZONEID ||CHR(39)||' = :operating_zone_id'||CHR(10)||'and ';
    END IF;

    IF SBASSIGNTYPE != CC_BOCONSTANTS.CSBAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_UNIT.assign_type = :assign_type'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| SBASSIGNTYPE ||CHR(39)||' = :assign_type'||CHR(10)||'and ';
    END IF;

    
    IF NUADMINBASE != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_UNIT.admin_base_id = :nuAdminBase'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUADMINBASE ||CHR(39)||' = :nuAdminBase'||CHR(10)||'and ';
    END IF;

    
    IF NUCONTRATORID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_UNIT.contractor_id = :nuContratorId'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUCONTRATORID ||CHR(39)||' = :nuContratorId'||CHR(10)||'and ';
    END IF;
    
    
    IF NUCENTROOP != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_UNIT.operating_center_id = :nuCentroOp'||CHR(10);
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUCENTROOP ||CHR(39)||' = :nuCentroOp'||CHR(10);
    END IF;
    
    
    IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
        SBWHERE := SBWHERE||' AND '||'GE_PHONE_PIN.phone_pin_id(+) = OR_OPERATING_UNIT.phone_number';
    END IF;


    
    IF (CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_AUX_ROLE) THEN
          
          UT_TRACE.TRACE(SBSQL,15);
          UT_TRACE.TRACE('Auxiliar de contratos con acceso denegado!',15);
          SBSQL := GE_BCENTITYMGR.FSBEMPTYSKELETONSQL(CSBFW_OR_OPERATING_UNIT);
          OPEN OCUDATACURSOR FOR SBSQL;
          
    ELSE
        IF SBPERSONNAME != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBSQL := 'select '|| SBATTRIBUTES ||CHR(10)||
                     'from /*+ OR_BOFW_OrdersConfigurator.GetOperatingUnits (1/2) SAO182383 */ '||
                     SBGLOBALFROM||
                     ', (select distinct OR_OPER_UNIT_PERSONS.operating_unit_id '||
                     '   from OR_OPER_UNIT_PERSONS, GE_PERSON '||
                     '   where OR_OPER_UNIT_PERSONS.person_id = GE_PERSON.person_id '||
                     '   AND upper(GE_PERSON.name_) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:person_name)||'||CHR(39)||'%'||CHR(39)||CHR(10)||
                     '  ) per'||CHR(10);
            
            IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
                SBSQL := SBSQL||','||'GE_PHONE_PIN'||CHR(10);
            END IF;

            SBSQL := SBSQL||
                     'where '|| SBWHERE ||CHR(10)||
                     'AND OR_OPERATING_UNIT.operating_unit_id = per.operating_unit_id '||CHR(10)||
                     'order by 2';

            UT_TRACE.TRACE(SBSQL,15);
            OPEN OCUDATACURSOR FOR SBSQL USING
                CC_BOBOSSUTIL.CNUNULL,
                SBPERSONNAME,
                SBNAME,
                NUOPERUNITID,
                NUFATHEROPERUNIT,
                NUCLASSIFID,
                SBADDRESS,
                SBPHONENUMBER,
                SBEMAIL,
                SBFAXNUMBER,
                NUOPERZONEID,
                SBASSIGNTYPE,
                NUADMINBASE,
                NUCONTRATORID,
                NUCENTROOP;
        ELSE
            SBSQL := 'select '|| SBATTRIBUTES ||CHR(10)||
                     'from /*+ OR_BOFW_OrdersConfigurator.GetOperatingUnits (2/2) SAO182383 */ '||CHR(10)||
                     SBGLOBALFROM;

            
            IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
                SBSQL := SBSQL||','||'GE_PHONE_PIN'||CHR(10);
            END IF;

            SBSQL := SBSQL||
                     'where '|| SBWHERE ||CHR(10)||
                     'order by 2';

            UT_TRACE.TRACE(SBSQL,15);

            OPEN OCUDATACURSOR FOR SBSQL USING
                CC_BOBOSSUTIL.CNUNULL,
                SBNAME,
                NUOPERUNITID,
                NUFATHEROPERUNIT,
                NUCLASSIFID,
                SBADDRESS,
                SBPHONENUMBER,
                SBEMAIL,
                SBFAXNUMBER,
                NUOPERZONEID,
                SBASSIGNTYPE,
                NUADMINBASE,
                NUCONTRATORID,
                NUCENTROOP;

        END IF;
    
    END IF;
    
    
    

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




    
















    PROCEDURE GETOPERUNITSBYBASEADMIN
    (
        INUOPERSECTOR IN NUMBER,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        FILLOPERATINGUNITATTRIBUTES;

        
        CT_BOCONTRSECURITY.LOADSECURITYSETTINGS(CT_BOCONSTANTS.CSBSEC_INFO_TYPE_WORK_UDT);

        
        IF (CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_AUX_ROLE) THEN
        
             
             SBSQL := GE_BCENTITYMGR.FSBEMPTYSKELETONSQL(CSBGE_FW_BASE_ADM);
             UT_TRACE.TRACE('OR_BOFW_OrdersConfigurator.GetOperUnitsByBaseAdmin -> Auxiliar de contratos con acceso denegado!',15);
             OPEN OCUCURSOR FOR SBSQL;
              
        ELSE

            IF INUOPERSECTOR IS NULL THEN
                SBSQL := 'select '||SBATTRIBUTES ||CHR(10)||
                'from /*+ OR_BOFW_OrdersConfigurator.GetOperUnitsByBaseAdmin(1/2) SAO182383 */ '||CHR(10)||
                SBGLOBALFROM;

                
                IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
                    SBSQL := SBSQL||', GE_PHONE_PIN'||CHR(10);
                END IF;

                SBSQL := SBSQL||'where '||SBGLOBALWHERE||' AND OR_OPERATING_UNIT.operating_sector_id != OR_OPERATING_UNIT.operating_sector_id AND CT_BOContrSecurity.fnuCanManageWorkUnit(or_operating_unit.operating_unit_id)=1';

                
                IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
                    SBSQL := SBSQL||' AND GE_PHONE_PIN.phone_pin_id(+) = OR_OPERATING_UNIT.phone_number';
                END IF;

                OPEN OCUCURSOR FOR SBSQL USING INUOPERSECTOR;
            ELSE
                SBSQL := 'select '||SBATTRIBUTES ||CHR(10)||
                         'from /*+ OR_BOFW_OrdersConfigurator.GetOperUnitsByBaseAdmin(2/2) SAO182383 */ '||CHR(10)||
                         SBGLOBALFROM||CHR(10);

                
                IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
                    SBSQL := SBSQL||', GE_PHONE_PIN'||CHR(10);
                END IF;

                SBSQL := SBSQL||'where '||SBGLOBALWHERE||' AND OR_OPERATING_UNIT.admin_base_id = :operating_sector_id AND CT_BOContrSecurity.fnuCanManageWorkUnit(or_operating_unit.operating_unit_id)=1';

                
                IF GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') THEN
                    SBSQL := SBSQL||' AND GE_PHONE_PIN.phone_pin_id(+) = OR_OPERATING_UNIT.phone_number';
                END IF;

                OPEN OCUCURSOR FOR SBSQL USING INUOPERSECTOR, INUOPERSECTOR;
            END IF;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    PROCEDURE GETBASEADMINBYOPERUNIT
    (
        INUOPERUNIT     IN      NUMBER,
        ONUBASEADMIN    OUT     NUMBER
    )
    IS
        NUPERSONID      GE_PERSON.PERSON_ID%TYPE;
    BEGIN

        NUPERSONID      := GE_BOPERSONAL.FNUGETPERSONID;
        ONUBASEADMIN    := NULL;

        
        
        IF ( (OR_BCOPERUNITPERSON.FSBEXISTUNIOPERBYPERS (NUPERSONID) IS NULL) OR
             (OR_BCOPERUNITPERSON.EXISTOPERUNITINPERSON(INUOPERUNIT, NUPERSONID)) )
        THEN
            ONUBASEADMIN := DAOR_OPERATING_UNIT.FNUGETADMIN_BASE_ID(INUOPERUNIT);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETBASEADMINBYOPERUNIT;








    














    PROCEDURE FILLTASKTYPEATTRIBUTES

    IS

    BEGIN

        SBATTRIBUTES := '';

      	CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_TASK_TYPE.TASK_TYPE_ID',             'TASK_TYPE_ID',             CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES, TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_TASK_TYPE.DESCRIPTION',              'DESCRIPTION',              CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_TASK_TYPE.SHORT_NAME',               'SHORT_NAME',               CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.IS_ANULL,''Y'',''Si'',''No'')',                 'IS_ANULL',                 CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.TRY_AUTOM_ASSIGMENT,''Y'',''Si'',''No'')',      'TRY_AUTOM_ASSIGMENT',      CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.UPD_ITEMS_ALLOWED,''Y'',''Si'',''No'')',      'UPD_ITEMS_ALLOWED',      CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.USES_OPER_SECTOR,''Y'',''Si'',''No'')',         'USES_OPER_SECTOR',         CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.WORK_DAYS,''B'',''Si'',''No'')','WORK_DAYS',CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_TASK_TYPE.TASK_TYPE_CLASSIF, null, null,
             OR_TASK_TYPE.TASK_TYPE_CLASSIF ||'||CHR(39)||' - '||CHR(39)||
            '||DAGE_TASK_CLASS.fsbGetDescription(OR_TASK_TYPE.TASK_TYPE_CLASSIF))',
            'TASK_TYPE_CLASSIF',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.ADD_ITEMS_ALLOWED,''Y'',''Si'',''No'')',        'ADD_ITEMS_ALLOWED',        CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.ADD_NET_ALLOWED,''Y'',''Si'',''No'')',          'ADD_NET_ALLOWED',          CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.COMMENT_REQUIRED,''Y'',''Si'',''No'')',         'COMMENT_REQUIRED',         CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_TASK_TYPE.WARRANTY_PERIOD',          'WARRANTY_PERIOD',          CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_TASK_TYPE.CONCEPT, null, null,
             OR_TASK_TYPE.CONCEPT ||'||CHR(39)||' - '||CHR(39)||
            '||PKTBLCONCEPTO.fsbGetDescription(OR_TASK_TYPE.CONCEPT))',
            'CONCEPT',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.SOLD_ENGINEERING_SER,''Y'',''Si'',''No'')',     'SOLD_ENGINEERING_SER',     CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);


        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_TASK_TYPE.PRIORITY',                 'PRIORITY',                 CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.NODAL_CHANGE,''Y'',''Si'',''No'')',             'NODAL_CHANGE',             CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.ARRANGED_HOUR_ALLOWED,''Y'',''Si'',''No'')',    'ARRANGED_HOUR_ALLOWED',    CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_TASK_TYPE.OBJECT_ID, null, null,
             OR_TASK_TYPE.OBJECT_ID ||'||CHR(39)||' - '||CHR(39)||
            '||DAGE_OBJECT.fsbGetName_(OR_TASK_TYPE.OBJECT_ID))',
            'OBJECT_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);


        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_TASK_TYPE.TASK_TYPE_GROUP_ID, null, null,
             OR_TASK_TYPE.TASK_TYPE_GROUP_ID ||'||CHR(39)||' - '||CHR(39)||
            '||DAOR_TASK_TYPE_GROUP.fsbGetDescription(OR_TASK_TYPE.TASK_TYPE_GROUP_ID))',
            'TASK_TYPE_GROUP_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);
            
         CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_TASK_TYPE.USE_, '
            ||CHR(39)||'IC'||CHR(39)||', '||CHR(39)||'Instalaci�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'MC'||CHR(39)||', '||CHR(39)||'Mantenimiento en Cliente'||CHR(39)||', '
            ||CHR(39)||'IR'||CHR(39)||', '||CHR(39)||'Intalaci�n de Red'||CHR(39)||', '
            ||CHR(39)||'MR'||CHR(39)||', '||CHR(39)||'Mantenimiento de Red'||CHR(39)||', '
            ||CHR(39)||'RC'||CHR(39)||', '||CHR(39)||'Retiro en Cliente'||CHR(39)||', '
            ||CHR(39)||'RR'||CHR(39)||', '||CHR(39)||'Retiro en Red'||CHR(39)||')',
            'USE_',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.COMPROMISE_CRM,''Y'',''Si'',''No'')',     'COMPROMISE_CRM',     CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.NOTIFICABLE,''Y'',''Si'',''No'')',             'NOTIFICABLE',             CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_TASK_TYPE.GEN_ADMIN_ORDER,''Y'',''Si'',''No'')',     'GEN_ADMIN_ORDER',             CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('(SELECT ED_CONFEXME.COEMCODI||'||CHR(39)||' - '||CHR(39)||
                                    '||ED_CONFEXME.COEMDESC FROM ED_CONFEXME WHERE ED_CONFEXME.COEMCODI = PRINT_FORMAT_ID)',
                                    'PRINT_FORMAT_ID',
                                    CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        
        CC_BOBOSSUTIL.ADDATTRIBUTE('(SELECT GE_NOTIFICATION.DESCRIPTION '||
                                   'FROM OR_NOTIF_TIPO_TRABA,GE_NOTIFICATION '||
                                   'WHERE ID_NOTIFICACION = NOTIFICATION_ID '||
                                   'AND ID_TIPO_TRABAJO = OR_TASK_TYPE.TASK_TYPE_ID) ', 'NOTIF_TIPO_TRABA',CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        
        CC_BOBOSSUTIL.ADDATTRIBUTE('(SELECT ORDERS_PER_PAGE FROM OR_NOTIF_TIPO_TRABA WHERE ID_TIPO_TRABAJO = OR_TASK_TYPE.TASK_TYPE_ID)', 'ORDERS_PER_PAGE',CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);


	    CC_BOBOSSUTIL.ADDATTRIBUTE (':parent_id',  'parent_id', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

PROCEDURE GETTASKTYPE
(
    INUTASKTYPEID IN NUMBER,
    OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
)
IS

SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

BEGIN
    FILLTASKTYPEATTRIBUTES;

    SBSQL := 'select '|| SBATTRIBUTES ||' from OR_TASK_TYPE where OR_TASK_TYPE.TASK_TYPE_ID = :nuTaskType';

    OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUTASKTYPEID;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETTASKTYPES
(
    INUTASKTYPEID       IN      OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
    ISBSHORTNAME        IN      OR_TASK_TYPE.SHORT_NAME%TYPE,
    INUTASKTYPECLASSIF  IN      OR_TASK_TYPE.TASK_TYPE_CLASSIF%TYPE,
    ISBDESCRIPTION      IN      OR_TASK_TYPE.DESCRIPTION%TYPE,
    OCUDATACURSOR       OUT     CONSTANTS.TYREFCURSOR
)
IS
    NUTASKTYPEID       OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
    SBSHORTNAME        OR_TASK_TYPE.SHORT_NAME%TYPE;
    SBDESCRIPTION      OR_TASK_TYPE.DESCRIPTION%TYPE;
    NUTASKTYPECLASSIF  OR_TASK_TYPE.TASK_TYPE_CLASSIF%TYPE;

    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    SBWHERE  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
BEGIN


    SBSHORTNAME        := TRIM (UPPER(NVL(ISBSHORTNAME, CC_BOCONSTANTS.CSBNULLSTRING )));
    SBDESCRIPTION      := TRIM (UPPER(NVL(ISBDESCRIPTION, CC_BOCONSTANTS.CSBNULLSTRING )));
    NUTASKTYPECLASSIF  := NVL(INUTASKTYPECLASSIF, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
    NUTASKTYPEID       := NVL(INUTASKTYPEID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );

    UT_TRACE.TRACE('***** ShortName '||ISBSHORTNAME||' - '||SBSHORTNAME);
    UT_TRACE.TRACE('***** TaskTypeClassif '||INUTASKTYPECLASSIF||' - '||NUTASKTYPECLASSIF);
    UT_TRACE.TRACE('***** TasktypeId '||INUTASKTYPEID||' - '||NUTASKTYPEID);

    FILLTASKTYPEATTRIBUTES;

    SBWHERE := NULL;


    IF SBSHORTNAME != CC_BOCONSTANTS.CSBNULLSTRING THEN
        SBWHERE := SBWHERE ||'upper(OR_TASK_TYPE.short_name) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:short_name)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| SBSHORTNAME ||CHR(39)||' = :short_name'||CHR(10)||'and ';
    END IF;

    IF SBDESCRIPTION != CC_BOCONSTANTS.CSBNULLSTRING THEN
        SBWHERE := SBWHERE ||'upper(OR_TASK_TYPE.description) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:description)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| SBDESCRIPTION ||CHR(39)||' = :description'||CHR(10)||'and ';
    END IF;

    IF NUTASKTYPECLASSIF != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_TASK_TYPE.task_type_classif = :task_type_classif'||CHR(10)||'and ';
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUTASKTYPECLASSIF ||CHR(39)||' = :task_type_classif'||CHR(10)||'and ';
    END IF;

    
    IF NUTASKTYPEID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_TASK_TYPE.task_type_id = :task_type_id'||CHR(10);
    ELSE
        SBWHERE := SBWHERE ||CHR(39)|| NUTASKTYPEID ||CHR(39)||' = :task_type_id'||CHR(10);
    END IF;

    SBSQL := 'select '|| SBATTRIBUTES ||CHR(10)||
               'from OR_TASK_TYPE'||CHR(10)||
              'where '|| SBWHERE;

    UT_TRACE.TRACE(SBSQL);

    OPEN OCUDATACURSOR FOR SBSQL USING
        CC_BOBOSSUTIL.CNUNULL,
        SBSHORTNAME,
        SBDESCRIPTION,
        NUTASKTYPECLASSIF,
        NUTASKTYPEID;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

PROCEDURE GETTASKTYPESBYOPERUNIT
(
    INUOPERUNIT   IN  NUMBER,
    OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
)
IS

SBSQL GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

BEGIN
    FILLTASKTYPEATTRIBUTES;

    IF INUOPERUNIT IS NULL THEN
        SBSQL := 'select '||SBATTRIBUTES ||CHR(10)||
        'from OR_TASK_TYPE, OR_OPE_UNI_TASK_TYPE '||CHR(10)||
        'where OR_TASK_TYPE.task_type_id != OR_TASK_TYPE.task_type_id';

        OPEN OCUCURSOR FOR SBSQL USING INUOPERUNIT;
    ELSE
        SBSQL := 'select '||SBATTRIBUTES ||CHR(10)||
        'from OR_TASK_TYPE, OR_OPE_UNI_TASK_TYPE '||CHR(10)||
        'where OR_OPE_UNI_TASK_TYPE.operating_unit_id = :operating_unit_id and'||CHR(10)
        ||'OR_TASK_TYPE.task_type_id = OR_OPE_UNI_TASK_TYPE.task_type_id';

        OPEN OCUCURSOR FOR SBSQL USING INUOPERUNIT, INUOPERUNIT;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;








    






















    PROCEDURE FILLITEMATTRIBUTES
    IS
        
        NUADMINACTIVCLASSIF  GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE := OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF;
        
        NUITEMSCLASSACTIVITY GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE := OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY;
    BEGIN

        SBATTRIBUTES := '';

      	CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.ITEMS_ID',             'ITEMS_ID',             CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES, TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.DESCRIPTION',          'DESCRIPTION',          CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.CODE',                 'CODE',                 CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.ITEM_CLASSIF_ID, null, null,
             GE_ITEMS.ITEM_CLASSIF_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_ITEM_CLASSIF.Description)',
            'ITEM_CLASSIF_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.MEASURE_UNIT_ID, null, null,
             GE_ITEMS.MEASURE_UNIT_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_MEASURE_UNIT.Description)',
            'MEASURE_UNIT_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.TECH_CARD_ITEM_ID, null, null,
             GE_ITEMS.TECH_CARD_ITEM_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_TECH_CARD_ITEM.Description)',
            'TECH_CARD_ITEM_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.CONCEPT, null, null,
             GE_ITEMS.CONCEPT ||'||CHR(39)||' - '||CHR(39)||
            '||CONCEPTO.concdesc)',
            'CONCEPT',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.ID_ITEMS_TIPO, null, null,
             GE_ITEMS.ID_ITEMS_TIPO ||'||CHR(39)||' - '||CHR(39)||
            '||ge_items_tipo.Descripcion)',
            'ID_ITEMS_TIPO',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.OBJECT_ID, null, null,
             GE_ITEMS.OBJECT_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_OBJECT.Name_)',
            'OBJECT_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.USE_, '
            ||CHR(39)||'I' ||CHR(39)||', '||CHR(39)||'Instalaci�n'||CHR(39)||', '
            ||CHR(39)||'W' ||CHR(39)||', '||CHR(39)||'Retiro'||CHR(39)||', '
            ||CHR(39)||'IC'||CHR(39)||', '||CHR(39)||'Instalaci�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'MC'||CHR(39)||', '||CHR(39)||'Mantenimiento en Cliente'||CHR(39)||', '
            ||CHR(39)||'IR'||CHR(39)||', '||CHR(39)||'Intalaci�n de Red'||CHR(39)||', '
            ||CHR(39)||'MR'||CHR(39)||', '||CHR(39)||'Mantenimiento de Red'||CHR(39)||', '
            ||CHR(39)||'RC'||CHR(39)||', '||CHR(39)||'Retiro en Cliente'||CHR(39)||', '
            ||CHR(39)||'RR'||CHR(39)||', '||CHR(39)||'Retiro en Red'||CHR(39)||', '
            ||CHR(39)||'D' ||CHR(39)||', '||CHR(39)||'Diagn�stico'||CHR(39)||', '
            ||CHR(39)||'CR'||CHR(39)||', '||CHR(39)||'Revisi�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'CF' ||CHR(39)||', '||CHR(39)||'Reparaci�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'CW' ||CHR(39)||', '||CHR(39)||'Trabajo en Cliente'||CHR(39)||')',
            'USE_',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);


        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.ELEMENT_TYPE_ID, null, null,
             GE_ITEMS.ELEMENT_TYPE_ID ||'||CHR(39)||' - '||CHR(39)||
            '||IF_ELEMENT_TYPE.Description)',
            'ELEMENT_TYPE_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);


        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.ELEMENT_CLASS_ID',     'ELEMENT_CLASS_ID',     CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.STANDARD_TIME',        'STANDARD_TIME',        CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.WARRANTY_DAYS',        'WARRANTY_DAYS',        CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
           'decode(GE_ITEMS.RECOVERY, '
           || CHR(39) || 'Y'  || CHR(39) || ', '
           || CHR(39) || 'Si' || CHR(39) || ', '
           || 'null'  || ', '
           || CHR(39) || 'No' || CHR(39) || ', '
           || CHR(39) || 'N'  || CHR(39) || ', '
           || CHR(39) || 'No' || CHR(39) || ')',
           'RECOVERY', CC_BOBOSSUTIL.CNUVARCHAR2,
           SBATTRIBUTES, TBATTRIBUTES);
           
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.RECOVERY_ITEM_ID, null, null,
             GE_ITEMS.RECOVERY_ITEM_ID ||'||CHR(39)||' - '||CHR(39)||
            '||RECOVERY_ITEM.Description)',
            'RECOVERY_ITEM_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA, null, null,
             GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA ||'||CHR(39)||' - '||CHR(39)||
            '||GE_ITEMS_GAMA.Descripcion)',
            'ID_ITEMS_GAMA',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
           'decode(GE_ITEMS.SHARED, '
           || CHR(39) || 'Y'  || CHR(39) || ', '
           || CHR(39) || 'Si' || CHR(39) || ', '
           || CHR(39) || 'N'  || CHR(39) || ', '
           || CHR(39) || 'No' || CHR(39) || ')',
           'SHARED', CC_BOBOSSUTIL.CNUVARCHAR2,
           SBATTRIBUTES, TBATTRIBUTES);
      
	    CC_BOBOSSUTIL.ADDATTRIBUTE (':parent_id',                    'parent_id',            CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
	    
	    SBGLOBALFROM :=   'GE_ITEMS, '||CHR(10)||
                        'GE_ITEM_CLASSIF, '||CHR(10)||
                        'GE_MEASURE_UNIT, '||CHR(10)||
                        'GE_TECH_CARD_ITEM, '||CHR(10)||
                        'CONCEPTO, '||CHR(10)||
                        'ge_items_tipo, '||CHR(10)||
                        'GE_OBJECT, '||CHR(10)||
                        'IF_ELEMENT_TYPE, '||CHR(10)||
                        'GE_ITEMS RECOVERY_ITEM, '||CHR(10)||
                        'GE_ITEMS_GAMA_ITEM, '||CHR(10)||
                        'GE_ITEMS_GAMA '||CHR(10);
                        
	    SBGLOBALWHERE := ' GE_ITEM_CLASSIF.item_classif_id = GE_ITEMS.ITEM_CLASSIF_ID '||CHR(10)||
                         'AND GE_ITEMS.ITEM_CLASSIF_ID NOT IN ('||NUADMINACTIVCLASSIF||','||NUITEMSCLASSACTIVITY||')'||CHR(10)||
                         'AND GE_MEASURE_UNIT.measure_unit_id = GE_ITEMS.MEASURE_UNIT_ID '||CHR(10)||
                         'AND GE_TECH_CARD_ITEM.tech_card_item_id(+) = GE_ITEMS.TECH_CARD_ITEM_ID '||CHR(10)||
                         'AND CONCEPTO.conccodi(+) = GE_ITEMS.CONCEPT '||CHR(10)||
                         'AND ge_items_tipo.id_items_tipo(+) = GE_ITEMS.ID_ITEMS_TIPO '||CHR(10)||
                         'AND GE_OBJECT.object_id(+) = GE_ITEMS.OBJECT_ID '||CHR(10)||
                         'AND IF_ELEMENT_TYPE.element_type_id(+) = GE_ITEMS.ELEMENT_TYPE_ID '||CHR(10)||
                         'AND RECOVERY_ITEM.items_id(+) = GE_ITEMS.RECOVERY_ITEM_ID '||CHR(10)||
                         'AND GE_ITEMS_GAMA_ITEM.ITEMS_ID(+) = GE_ITEMS.ITEMS_ID '||CHR(10)||
                         'AND GE_ITEMS_GAMA.id_items_gama(+) = GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA ';


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLITEMATTRIBUTES;

    

















    PROCEDURE GETITEM
    (
        INUITEMID     IN    NUMBER,
        OCUDATACURSOR OUT   CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        FILLITEMATTRIBUTES;

        SBSQL := 'SELECT '|| SBATTRIBUTES ||CHR(10)||
                 'FROM /*+ OR_BOFW_OrdersConfigurator.GetItem SAO182383 */ '||CHR(10)||
                 SBGLOBALFROM||
                 'WHERE '|| SBGLOBALWHERE||
                  'AND GE_ITEMS.ITEMS_ID = :nuItem'
                  ;

        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUITEMID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEM;


    




























    PROCEDURE GETITEMS
    (
        INUITEMSID              IN      GE_ITEMS.ITEMS_ID%TYPE,
        ISBDESCRIPTION          IN      GE_ITEMS.DESCRIPTION%TYPE,
        INUITEMCLASSIFCLASSIF   IN      GE_ITEMS.ITEM_CLASSIF_ID%TYPE,
        INUTIPOITEM             IN      GE_ITEMS.ID_ITEMS_TIPO%TYPE,
        ISBCODE                 IN      GE_ITEMS.CODE%TYPE,
        OCUDATACURSOR           OUT     CONSTANTS.TYREFCURSOR
    )
    IS

        SBDESCRIPTION          GE_ITEMS.DESCRIPTION%TYPE;
        NUITEMCLASSIFCLASSIF   GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
        NUITEMSID              GE_ITEMS.ITEMS_ID%TYPE;
        NUTIPOITEM             GE_ITEMS.ID_ITEMS_TIPO%TYPE;
        SBCODE                  GE_ITEMS.CODE%TYPE;

        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBWHERE  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        SBDESCRIPTION         := TRIM (UPPER(NVL(ISBDESCRIPTION, CC_BOCONSTANTS.CSBNULLSTRING )));
        NUITEMCLASSIFCLASSIF  := NVL(INUITEMCLASSIFCLASSIF, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUITEMSID             := NVL(INUITEMSID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUTIPOITEM            := NVL(INUTIPOITEM, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        SBCODE                := TRIM(UPPER(NVL(ISBCODE, CC_BOCONSTANTS.CSBNULLSTRING )));

        FILLITEMATTRIBUTES;

        SBWHERE := NULL;

        SBWHERE := SBGLOBALWHERE||' AND ';
        IF SBDESCRIPTION != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBWHERE := SBWHERE ||'upper(GE_ITEMS.description) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:description)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| SBDESCRIPTION ||CHR(39)||' = :description'||CHR(10)||'and ';
        END IF;

        IF NUITEMCLASSIFCLASSIF != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'GE_ITEMS.item_classif_id = :item_classif_id'||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUITEMCLASSIFCLASSIF ||CHR(39)||' = :item_classif_id'||CHR(10)||'and ';
        END IF;
        
        IF NUITEMSID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'GE_ITEMS.items_id = :items_id'||CHR(10)||' AND ' ;
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUITEMSID ||CHR(39)||' = :items_id'||CHR(10)||' AND ';
        END IF;
        
        IF NUTIPOITEM != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'GE_ITEMS.ID_ITEMS_TIPO = :tipo_items_id'||CHR(10)||' AND ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUTIPOITEM ||CHR(39)||' = :tipo_items_id'||CHR(10)||' AND ';
        END IF;

        IF SBCODE != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBWHERE := SBWHERE ||'upper(GE_ITEMS.CODE) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:code)||'||CHR(39)||'%'||CHR(39)||CHR(10);
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| SBCODE ||CHR(39)||' = :code'||CHR(10);
        END IF;
        
            SBSQL := 'SELECT '|| SBATTRIBUTES ||CHR(10)||
             '  FROM '||CHR(10)|| SBGLOBALFROM || CHR(10)||
             '        /*+ OR_BOFW_OrdersConfigurator.GetItems */'||CHR(10)||
             ' WHERE '||SBWHERE;

        OPEN OCUDATACURSOR FOR SBSQL USING
            CC_BOBOSSUTIL.CNUNULL,
            SBDESCRIPTION,
            NUITEMCLASSIFCLASSIF,
            NUITEMSID,
            NUTIPOITEM,
            SBCODE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMS;
    


    















    PROCEDURE FILLACTIVITIESATTRIBUTES
    IS
        
        NUADMINACTIVCLASSIF  GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE := OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF;
        
        NUITEMSCLASSACTIVITY GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE := OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY;
    BEGIN

        SBATTRIBUTES := '';


      	CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.ITEMS_ID',             'ITEMS_ID',             CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES, TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.DESCRIPTION',          'DESCRIPTION',          CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.ITEM_CLASSIF_ID, null, null,
             GE_ITEMS.ITEM_CLASSIF_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_ITEM_CLASSIF.Description)',
            'ITEM_CLASSIF_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.MEASURE_UNIT_ID, null, null,
             GE_ITEMS.MEASURE_UNIT_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_MEASURE_UNIT.Description)',
            'MEASURE_UNIT_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);


        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.CONCEPT, null, null,
             GE_ITEMS.CONCEPT ||'||CHR(39)||' - '||CHR(39)||
            '||CONCEPTO.concdesc)',
            'CONCEPT',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);
            
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            '(Select CONCEPTO.conccodi ||'||CHR(39)||' - '||CHR(39)||
            '||CONCEPTO.concdesc FROM CONCEPTO WHERE CONCEPTO.conccodi = ge_items.discount_concept)',
            'DISCOUNTCONCEPT',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.OBJECT_ID, null, null,
             GE_ITEMS.OBJECT_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_OBJECT.Name_)',
            'OBJECT_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.USE_, '
            ||CHR(39)||'I' ||CHR(39)||', '||CHR(39)||'Instalaci�n'||CHR(39)||', '
            ||CHR(39)||'W' ||CHR(39)||', '||CHR(39)||'Retiro'||CHR(39)||', '
            ||CHR(39)||'IC'||CHR(39)||', '||CHR(39)||'Instalaci�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'MC'||CHR(39)||', '||CHR(39)||'Mantenimiento en Cliente'||CHR(39)||', '
            ||CHR(39)||'IR'||CHR(39)||', '||CHR(39)||'Intalaci�n de Red'||CHR(39)||', '
            ||CHR(39)||'MR'||CHR(39)||', '||CHR(39)||'Mantenimiento de Red'||CHR(39)||', '
            ||CHR(39)||'RC'||CHR(39)||', '||CHR(39)||'Retiro en Cliente'||CHR(39)||', '
            ||CHR(39)||'RR'||CHR(39)||', '||CHR(39)||'Retiro en Red'||CHR(39)||', '
            ||CHR(39)||'D' ||CHR(39)||', '||CHR(39)||'Diagn�stico'||CHR(39)||', '
            ||CHR(39)||'CR'||CHR(39)||', '||CHR(39)||'Revisi�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'CF' ||CHR(39)||', '||CHR(39)||'Reparaci�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'CW' ||CHR(39)||', '||CHR(39)||'Trabajo en Cliente'||CHR(39)||')',
            'USE_',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);


        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.STANDARD_TIME',        'STANDARD_TIME',        CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.WARRANTY_DAYS',        'WARRANTY_DAYS',        CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);

      
      CC_BOBOSSUTIL.ADDATTRIBUTE (' DECODE(CT_ITEM_NOVELTY.ITEMS_ID,NULL,''No'',''Si'') ', 'IS_NOVELTY',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);
      CC_BOBOSSUTIL.ADDATTRIBUTE (' CT_ITEM_NOVELTY.COMMENT_ ', 'COMMENT_',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

      

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_ACTIVIDAD.ACTIVID_COMPENSACION, null, null,
             OR_ACTIVIDAD.ACTIVID_COMPENSACION ||'||CHR(39)||' - '||CHR(39)||
            '||GE_ITEMS.DESCRIPTION)',
            'ACTIVID_COMPENSACION',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_ACTIVIDAD.OBJETO_COMPENSACION, null, null,
             OR_ACTIVIDAD.OBJETO_COMPENSACION ||'||CHR(39)||' - '||CHR(39)||
            '||GE_OBJECT.Name_ )',
            'OBJETO_COMPENSACION',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_ACTIVIDAD.CANTIDAD_DEFECTO ',    'CANTIDAD_DEFECTO',   CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_ACTIVIDAD.TIEMPO_VIDA ',         'TIEMPO_VIDA',        CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_ACTIVIDAD.PRIORIDAD_DESPACHO ',  'PRIORIDAD_DESPACHO', CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_ACTIVIDAD.ACTIVA ',              'ACTIVA',             CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_ACTIVIDAD.PRIORIDAD ',           'PRIORIDAD',          CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (':parent_id',                        'parent_id',          CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);

	    SBGLOBALFROM :=   'GE_ITEMS, '||CHR(10)||
                        'GE_ITEM_CLASSIF, '||CHR(10)||
                        'GE_MEASURE_UNIT, '||CHR(10)||
                        'CONCEPTO, '||CHR(10)||
                        'GE_OBJECT, '||CHR(10)||
                        'CT_ITEM_NOVELTY, '||CHR(10)||
                        'OR_ACTIVIDAD'||CHR(10);

	    SBGLOBALWHERE := ' GE_ITEM_CLASSIF.item_classif_id = GE_ITEMS.ITEM_CLASSIF_ID '||CHR(10)||
                         'AND GE_MEASURE_UNIT.measure_unit_id = GE_ITEMS.MEASURE_UNIT_ID '||CHR(10)||
                         'AND CONCEPTO.conccodi(+) = GE_ITEMS.CONCEPT '||CHR(10)||
                         'AND GE_OBJECT.object_id(+) = GE_ITEMS.OBJECT_ID '||CHR(10)||
                         'AND GE_ITEMS.ITEM_CLASSIF_ID IN ('||NUADMINACTIVCLASSIF||','||NUITEMSCLASSACTIVITY||')'||CHR(10)||
                         'AND OR_ACTIVIDAD.ID_ACTIVIDAD(+) = GE_ITEMS.ITEMS_ID '||CHR(10);


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLACTIVITIESATTRIBUTES;

    
















    PROCEDURE GETACTIVITY
    (
        INUITEMID     IN    NUMBER,
        OCUDATACURSOR OUT   CONSTANTS.TYREFCURSOR
    )
    IS
    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        FILLACTIVITIESATTRIBUTES;

        SBSQL := 'SELECT '||CHR(10)||
                  SBATTRIBUTES ||CHR(10)||
                 'FROM '||CHR(10)||SBGLOBALFROM||CHR(10)||
                 '/*+ OR_BOFW_OrdersConfigurator.GetActivity */'||CHR(10)||
                 'WHERE '|| SBGLOBALWHERE||
                 'AND CT_ITEM_NOVELTY.ITEMS_ID(+)= GE_ITEMS.ITEMS_ID'||CHR(10)||
                 'AND GE_ITEMS.ITEMS_ID = :nuItem';

        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUITEMID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTIVITY;

    





















    PROCEDURE GETACTIVITIES
    (
        INUITEMSID              IN      GE_ITEMS.ITEMS_ID%TYPE,
        ISBDESCRIPTION          IN      GE_ITEMS.DESCRIPTION%TYPE,
        INUITEMCLASSIFCLASSIF   IN      GE_ITEMS.ITEM_CLASSIF_ID%TYPE,
        ISBNOVELTY              IN      VARCHAR2,
        OCUDATACURSOR           OUT     CONSTANTS.TYREFCURSOR
    )
    IS

        SBDESCRIPTION          GE_ITEMS.DESCRIPTION%TYPE;
        NUITEMCLASSIFCLASSIF   GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
        NUITEMSID              GE_ITEMS.ITEMS_ID%TYPE;

        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBWHERE  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        SBDESCRIPTION         := TRIM (UPPER(NVL(ISBDESCRIPTION, CC_BOCONSTANTS.CSBNULLSTRING )));
        NUITEMCLASSIFCLASSIF  := NVL(INUITEMCLASSIFCLASSIF, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUITEMSID             := NVL(INUITEMSID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );

        FILLACTIVITIESATTRIBUTES;

        SBWHERE := NULL;

        SBWHERE := SBGLOBALWHERE||' AND ';

        IF SBDESCRIPTION != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBWHERE := SBWHERE ||'upper(GE_ITEMS.description) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:description)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| SBDESCRIPTION ||CHR(39)||' = :description'||CHR(10)||'and ';
        END IF;

        IF NUITEMCLASSIFCLASSIF != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'GE_ITEMS.item_classif_id = :item_classif_id'||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUITEMCLASSIFCLASSIF ||CHR(39)||' = :item_classif_id'||CHR(10)||'and ';
        END IF;

        
        IF NUITEMSID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'GE_ITEMS.items_id = :items_id'||CHR(10)||' AND ' ;
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUITEMSID ||CHR(39)||' = :items_id'||CHR(10)||' AND ';
        END IF;

        UT_TRACE.TRACE('Inicia Item Novedad', 10);
        
         IF (ISBNOVELTY = GE_BOCONSTANTS.CSBYES) THEN
            SBSQL := 'select '|| SBATTRIBUTES ||CHR(10)||
                     'from '||CHR(10)|| SBGLOBALFROM||CHR(10)||
                     ' /*+ OR_BOFW_OrdersConfigurator.GetActivities  */'||CHR(10)||
                     'where '|| SBWHERE||CHR(10)||
                     'GE_ITEMS.ITEMS_ID = CT_ITEM_NOVELTY.ITEMS_ID';

         ELSIF(ISBNOVELTY = GE_BOCONSTANTS.CSBNO) THEN
            SBSQL := 'select '|| SBATTRIBUTES ||CHR(10)||
                     'from '||CHR(10)|| SBGLOBALFROM||CHR(10)||
                     ' /*+ OR_BOFW_OrdersConfigurator.GetActivities  */'||CHR(10)||
                     'where '|| SBWHERE||CHR(10)||
                     'GE_ITEMS.ITEMS_ID  = CT_ITEM_NOVELTY.items_id (+)'||CHR(10)||
                     'AND not exists (select null FROM CT_ITEM_NOVELTY h WHERE h.items_id = GE_ITEMS.ITEMS_ID)';

         ELSIF (ISBNOVELTY IS NULL) THEN
            SBSQL := 'select '|| SBATTRIBUTES ||CHR(10)||
                     'from '||CHR(10)|| SBGLOBALFROM||CHR(10)||
                     ' /*+ OR_BOFW_OrdersConfigurator.GetActivities  */' ||CHR(10)||
                     'where '|| SBWHERE||CHR(10)||
                     'GE_ITEMS.ITEMS_ID = CT_ITEM_NOVELTY.ITEMS_ID (+)';
         END IF;

        OPEN OCUDATACURSOR FOR SBSQL USING
            CC_BOBOSSUTIL.CNUNULL,
            SBDESCRIPTION,
            NUITEMCLASSIFCLASSIF,
            NUITEMSID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTIVITIES;
    
    















   PROCEDURE FILLACTIVITYATTRFIELDS
    IS
    BEGIN
        SBATTRIBUTES := '';

        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_ATTRIBUTES.items_id','ID', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES, TRUE);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.ATTRIBUTE_1_ID, null, null,
         GE_ITEMS_ATTRIBUTES.ATTRIBUTE_1_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GE_ATTRIBUTES_1.DISPLAY_NAME)',
        'ATTRIBUTE_1_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.INIT_EXPRESSION_1_ID, null, null,
         GE_ITEMS_ATTRIBUTES.INIT_EXPRESSION_1_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GR_CONFIG_EXPRESSION_INI_1.DESCRIPTION)',
        'init_expression_1_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.VALID_EXPRESSION_1_ID, null, null,
         GE_ITEMS_ATTRIBUTES.VALID_EXPRESSION_1_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GR_CONFIG_EXPRESSION_VAL_1.DESCRIPTION)',
        'valid_expression_1_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.STATEMENT_1_ID, null, null,
         GE_ITEMS_ATTRIBUTES.STATEMENT_1_ID ||'||CHR(39)||' - '||CHR(39)||
        '|| GE_STATEMENT_1.DESCRIPTION)',
        'statement_1_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.COMPONENT_1_ID, null, null,
         GE_ITEMS_ATTRIBUTES.COMPONENT_1_ID ||'||CHR(39)||' - '||CHR(39)||
        '|| ge_boconfigactivity.fsbgetComponentDesc(GE_ITEMS_ATTRIBUTES.COMPONENT_1_ID))',
        'component_1_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.ATTRIBUTE_2_ID, null, null,
         GE_ITEMS_ATTRIBUTES.ATTRIBUTE_2_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GE_ATTRIBUTES_2.DISPLAY_NAME)',
        'ATTRIBUTE_2_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.INIT_EXPRESSION_2_ID, null, null,
         GE_ITEMS_ATTRIBUTES.INIT_EXPRESSION_2_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GR_CONFIG_EXPRESSION_INI_2.DESCRIPTION)',
        'init_expression_2_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.VALID_EXPRESSION_2_ID, null, null,
         GE_ITEMS_ATTRIBUTES.VALID_EXPRESSION_2_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GR_CONFIG_EXPRESSION_VAL_2.DESCRIPTION)',
        'valid_expression_2_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.STATEMENT_2_ID, null, null,
         GE_ITEMS_ATTRIBUTES.STATEMENT_2_ID ||'||CHR(39)||' - '||CHR(39)||
        '|| GE_STATEMENT_2.DESCRIPTION)',
        'statement_2_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.COMPONENT_2_ID, null, null,
         GE_ITEMS_ATTRIBUTES.COMPONENT_2_ID ||'||CHR(39)||' - '||CHR(39)||
        '|| ge_boconfigactivity.fsbgetComponentDesc(GE_ITEMS_ATTRIBUTES.COMPONENT_2_ID))',
        'component_2_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.ATTRIBUTE_3_ID, null, null,
         GE_ITEMS_ATTRIBUTES.ATTRIBUTE_3_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GE_ATTRIBUTES_3.DISPLAY_NAME)',
        'ATTRIBUTE_3_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.INIT_EXPRESSION_3_ID, null, null,
         GE_ITEMS_ATTRIBUTES.INIT_EXPRESSION_3_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GR_CONFIG_EXPRESSION_INI_3.DESCRIPTION)',
        'init_expression_3_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.VALID_EXPRESSION_3_ID, null, null,
         GE_ITEMS_ATTRIBUTES.VALID_EXPRESSION_3_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GR_CONFIG_EXPRESSION_VAL_3.DESCRIPTION)',
        'valid_expression_3_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.STATEMENT_3_ID, null, null,
         GE_ITEMS_ATTRIBUTES.STATEMENT_3_ID ||'||CHR(39)||' - '||CHR(39)||
        '|| GE_STATEMENT_3.DESCRIPTION)',
        'statement_3_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.COMPONENT_3_ID, null, null,
         GE_ITEMS_ATTRIBUTES.COMPONENT_3_ID ||'||CHR(39)||' - '||CHR(39)||
        '|| ge_boconfigactivity.fsbgetComponentDesc(GE_ITEMS_ATTRIBUTES.COMPONENT_3_ID))',
        'component_3_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);
        
       CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.ATTRIBUTE_4_ID, null, null,
         GE_ITEMS_ATTRIBUTES.ATTRIBUTE_4_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GE_ATTRIBUTES_4.DISPLAY_NAME)',
        'ATTRIBUTE_4_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.INIT_EXPRESSION_4_ID, null, null,
         GE_ITEMS_ATTRIBUTES.INIT_EXPRESSION_4_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GR_CONFIG_EXPRESSION_INI_4.DESCRIPTION)',
        'init_expression_4_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.VALID_EXPRESSION_4_ID, null, null,
         GE_ITEMS_ATTRIBUTES.VALID_EXPRESSION_4_ID ||'||CHR(39)||' - '||CHR(39)||
        '||GR_CONFIG_EXPRESSION_VAL_4.DESCRIPTION)',
        'valid_expression_4_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.STATEMENT_4_ID, null, null,
         GE_ITEMS_ATTRIBUTES.STATEMENT_4_ID ||'||CHR(39)||' - '||CHR(39)||
        '|| GE_STATEMENT_4.DESCRIPTION)',
        'statement_4_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);
        
         CC_BOBOSSUTIL.ADDATTRIBUTE (
        'decode(GE_ITEMS_ATTRIBUTES.COMPONENT_4_ID, null, null,
         GE_ITEMS_ATTRIBUTES.COMPONENT_4_ID ||'||CHR(39)||' - '||CHR(39)||
        '|| ge_boconfigactivity.fsbgetComponentDesc(GE_ITEMS_ATTRIBUTES.COMPONENT_4_ID))',
        'component_4_id',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (':PARENT_ID', 'PARENT_ID', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);


        SBGLOBALFROM := 'GE_ITEMS_ATTRIBUTES, '||CHR(10)||
                        'GE_ATTRIBUTES GE_ATTRIBUTES_1, '||CHR(10)||
                        'GR_CONFIG_EXPRESSION GR_CONFIG_EXPRESSION_INI_1, '||CHR(10)||
                        'GR_CONFIG_EXPRESSION GR_CONFIG_EXPRESSION_VAL_1, '||CHR(10)||
                        'GE_STATEMENT GE_STATEMENT_1, '||CHR(10)||
                        'GE_ATTRIBUTES GE_ATTRIBUTES_2, '||CHR(10)||
                        'GR_CONFIG_EXPRESSION GR_CONFIG_EXPRESSION_INI_2, '||CHR(10)||
                        'GR_CONFIG_EXPRESSION GR_CONFIG_EXPRESSION_VAL_2, '||CHR(10)||
                        'GE_STATEMENT GE_STATEMENT_2, '||CHR(10)||
                        'GE_ATTRIBUTES GE_ATTRIBUTES_3, '||CHR(10)||
                        'GR_CONFIG_EXPRESSION GR_CONFIG_EXPRESSION_INI_3, '||CHR(10)||
                        'GR_CONFIG_EXPRESSION GR_CONFIG_EXPRESSION_VAL_3, '||CHR(10)||
                        'GE_STATEMENT GE_STATEMENT_3, '||CHR(10)||
                        'GE_ATTRIBUTES GE_ATTRIBUTES_4, '||CHR(10)||
                        'GR_CONFIG_EXPRESSION GR_CONFIG_EXPRESSION_INI_4, '||CHR(10)||
                        'GR_CONFIG_EXPRESSION GR_CONFIG_EXPRESSION_VAL_4, '||CHR(10)||
                        'GE_STATEMENT GE_STATEMENT_4'||CHR(10);

	    SBGLOBALWHERE := 'GE_ITEMS_ATTRIBUTES.attribute_1_id = GE_ATTRIBUTES_1.attribute_id(+) '||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.init_expression_1_id = GR_CONFIG_EXPRESSION_INI_1.config_expression_id(+)'||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.valid_expression_1_id =  GR_CONFIG_EXPRESSION_VAL_1.config_expression_id(+)'||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.statement_1_id = GE_STATEMENT_1.statement_id(+) '||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.attribute_2_id = GE_ATTRIBUTES_2.attribute_id(+) '||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.init_expression_2_id = GR_CONFIG_EXPRESSION_INI_2.config_expression_id(+)'||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.valid_expression_2_id =  GR_CONFIG_EXPRESSION_VAL_2.config_expression_id(+)'||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.statement_2_id = GE_STATEMENT_2.statement_id(+) '||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.attribute_3_id = GE_ATTRIBUTES_3.attribute_id(+) '||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.init_expression_3_id = GR_CONFIG_EXPRESSION_INI_3.config_expression_id(+)'||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.valid_expression_3_id =  GR_CONFIG_EXPRESSION_VAL_3.config_expression_id(+)'||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.statement_3_id = GE_STATEMENT_3.statement_id(+) '||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.attribute_4_id = GE_ATTRIBUTES_4.attribute_id(+) '||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.init_expression_4_id = GR_CONFIG_EXPRESSION_INI_4.config_expression_id(+)'||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.valid_expression_4_id =  GR_CONFIG_EXPRESSION_VAL_4.config_expression_id(+)'||CHR(10)||
                         'AND GE_ITEMS_ATTRIBUTES.statement_4_id = GE_STATEMENT_4.statement_id(+) '||CHR(10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLACTIVITYATTRFIELDS;

    
















    PROCEDURE GETACTIVITYATTR
    (
        INUITEMID     IN    NUMBER,
        OCUDATACURSOR OUT   CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        FILLACTIVITYATTRFIELDS;

        SBSQL := 'SELECT '|| SBATTRIBUTES ||CHR(10)||
                 'FROM '||CHR(10)||SBGLOBALFROM||CHR(10)||
                 '/*+ OR_BOFW_OrdersConfigurator.GetActivityAttr */'||CHR(10)||
                 'WHERE '|| SBGLOBALWHERE||CHR(10)||
                 'AND GE_ITEMS_ATTRIBUTES.ITEMS_ID = :nuItem';

        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUITEMID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTIVITYATTR;

    
















    PROCEDURE GETATTRBYACTIVITY
    (
        INUITEMID     IN    NUMBER,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN

        FILLACTIVITYATTRFIELDS;

        IF INUITEMID IS NULL THEN
            SBSQL := 'select '||SBATTRIBUTES||CHR(10)||
            'from /*+ OR_BOFW_OrdersConfigurator.GetAttrByActivity (1/2) */ '||CHR(10)||
            SBGLOBALFROM||
            'where '||SBGLOBALWHERE||
            'AND GE_ITEMS_ATTRIBUTES.ITEMS_ID != GE_ITEMS_ATTRIBUTES.ITEMS_ID';

            OPEN OCUCURSOR FOR SBSQL USING INUITEMID;
        ELSE
            SBSQL := 'SELECT '|| SBATTRIBUTES ||CHR(10)||
                     'FROM '||CHR(10)||SBGLOBALFROM||CHR(10)||
                     '/*+ OR_BOFW_OrdersConfigurator.GetActivityAttr */'||CHR(10)||
                     'WHERE '|| SBGLOBALWHERE||CHR(10)||
                     'AND GE_ITEMS_ATTRIBUTES.ITEMS_ID = :nuItem';

            OPEN OCUCURSOR FOR SBSQL USING INUITEMID ,INUITEMID;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETATTRBYACTIVITY;


    
















    PROCEDURE GETITEMSBYTASKTYPE
    (
        INUTASKTYPE   IN  NUMBER,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN

        FILLITEMATTRIBUTES;

        IF INUTASKTYPE IS NULL THEN
            SBSQL := 'select '||SBATTRIBUTES||CHR(10)||
            'from /*+ OR_BOFW_OrdersConfigurator.GetItemsByTaskType (1/2) SAO182383 */ '||CHR(10)||
            SBGLOBALFROM||
            'where '||SBGLOBALWHERE||
            'AND GE_ITEMS.items_id != GE_ITEMS.items_id';

            OPEN OCUCURSOR FOR SBSQL USING INUTASKTYPE;
        ELSE
            SBSQL := 'select '||SBATTRIBUTES ||CHR(10)||
            'from /*+ OR_BOFW_OrdersConfigurator.GetItemsByTaskType (2/2) SAO182383 */ '||CHR(10)||
            SBGLOBALFROM||
            ', OR_TASK_TYPES_ITEMS '||CHR(10)||
            'where '||SBGLOBALWHERE||
            'AND OR_TASK_TYPES_ITEMS.task_type_id = :task_type_id '||CHR(10)||
            'AND OR_TASK_TYPES_ITEMS.items_id = GE_ITEMS.items_id';

            OPEN OCUCURSOR FOR SBSQL USING INUTASKTYPE, INUTASKTYPE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMSBYTASKTYPE;
    


   














    PROCEDURE FILLMATERIALATTRIBUTES
    IS
        
        NUADMINACTIVCLASSIF  GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE := OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF;
        
        NUITEMSCLASSACTIVITY   GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE := OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY;
        
        CNUITEMCLASSSERIALTOOL GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE := OR_BOCONSTANTS.CNUITEM_CLASS_SERIAL_TOOL;
        
        CNUCLASIFICACIONEQUIPO GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE := GE_BOITEMSCONSTANTS.CNUCLASIFICACION_EQUIPO;
    BEGIN

        SBATTRIBUTES := '';


      	CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.ITEMS_ID',             'ITEMS_ID',             CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES, TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.DESCRIPTION',          'DESCRIPTION',          CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.CODE',                 'CODE',                 CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.ITEM_CLASSIF_ID, null, null,
             GE_ITEMS.ITEM_CLASSIF_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_ITEM_CLASSIF.Description)',
            'ITEM_CLASSIF_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.MEASURE_UNIT_ID, null, null,
             GE_ITEMS.MEASURE_UNIT_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_MEASURE_UNIT.Description)',
            'MEASURE_UNIT_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.TECH_CARD_ITEM_ID, null, null,
             GE_ITEMS.TECH_CARD_ITEM_ID ||'||CHR(39)||' - '||CHR(39)||
            '||GE_TECH_CARD_ITEM.Description)',
            'TECH_CARD_ITEM_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.CONCEPT, null, null,
             GE_ITEMS.CONCEPT ||'||CHR(39)||' - '||CHR(39)||
            '||CONCEPTO.concdesc)',
            'CONCEPT',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);


        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.USE_, '
            ||CHR(39)||'I' ||CHR(39)||', '||CHR(39)||'Instalaci�n'||CHR(39)||', '
            ||CHR(39)||'W' ||CHR(39)||', '||CHR(39)||'Retiro'||CHR(39)||', '
            ||CHR(39)||'IC'||CHR(39)||', '||CHR(39)||'Instalaci�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'MC'||CHR(39)||', '||CHR(39)||'Mantenimiento en Cliente'||CHR(39)||', '
            ||CHR(39)||'IR'||CHR(39)||', '||CHR(39)||'Intalaci�n de Red'||CHR(39)||', '
            ||CHR(39)||'MR'||CHR(39)||', '||CHR(39)||'Mantenimiento de Red'||CHR(39)||', '
            ||CHR(39)||'RC'||CHR(39)||', '||CHR(39)||'Retiro en Cliente'||CHR(39)||', '
            ||CHR(39)||'RR'||CHR(39)||', '||CHR(39)||'Retiro en Red'||CHR(39)||', '
            ||CHR(39)||'D' ||CHR(39)||', '||CHR(39)||'Diagn�stico'||CHR(39)||', '
            ||CHR(39)||'CR'||CHR(39)||', '||CHR(39)||'Revisi�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'CF' ||CHR(39)||', '||CHR(39)||'Reparaci�n en Cliente'||CHR(39)||', '
            ||CHR(39)||'CW' ||CHR(39)||', '||CHR(39)||'Trabajo en Cliente'||CHR(39)||')',
            'USE_',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.STANDARD_TIME',        'STANDARD_TIME',        CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS.WARRANTY_DAYS',        'WARRANTY_DAYS',        CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
           'decode(GE_ITEMS.RECOVERY, '
           || CHR(39) || 'Y'  || CHR(39) || ', '
           || CHR(39) || 'Si' || CHR(39) || ', '
           || 'null'  || ', '
           || CHR(39) || 'No' || CHR(39) || ', '
           || CHR(39) || 'N'  || CHR(39) || ', '
           || CHR(39) || 'No' || CHR(39) || ')',
           'RECOVERY', CC_BOBOSSUTIL.CNUVARCHAR2,
           SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(GE_ITEMS.RECOVERY_ITEM_ID, null, null,
             GE_ITEMS.RECOVERY_ITEM_ID ||'||CHR(39)||' - '||CHR(39)||
            '||RECOVERY_ITEM.Description)',
            'RECOVERY_ITEM_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
           'decode(GE_ITEMS.SHARED, '
           || CHR(39) || 'Y'  || CHR(39) || ', '
           || CHR(39) || 'Si' || CHR(39) || ', '
           || CHR(39) || 'N'  || CHR(39) || ', '
           || CHR(39) || 'No' || CHR(39) || ')',
           'SHARED', CC_BOBOSSUTIL.CNUVARCHAR2,
           SBATTRIBUTES, TBATTRIBUTES);
      

	    CC_BOBOSSUTIL.ADDATTRIBUTE (':parent_id',                    'parent_id',            CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);

	    SBGLOBALFROM :=   'GE_ITEMS, '||CHR(10)||
                        'GE_ITEM_CLASSIF, '||CHR(10)||
                        'GE_MEASURE_UNIT, '||CHR(10)||
                        'GE_TECH_CARD_ITEM, '||CHR(10)||
                        'CONCEPTO, '||CHR(10)||
                        'GE_ITEMS RECOVERY_ITEM '||CHR(10);



	    SBGLOBALWHERE := ' GE_ITEM_CLASSIF.item_classif_id = GE_ITEMS.ITEM_CLASSIF_ID '||CHR(10)||
                 	     'AND GE_ITEMS.ITEM_CLASSIF_ID NOT IN ('||NUADMINACTIVCLASSIF||','||NUITEMSCLASSACTIVITY||','||CNUITEMCLASSSERIALTOOL||','||CNUCLASIFICACIONEQUIPO||' )'||CHR(10)||
                         'AND GE_MEASURE_UNIT.measure_unit_id = GE_ITEMS.MEASURE_UNIT_ID '||CHR(10)||
                         'AND GE_TECH_CARD_ITEM.tech_card_item_id(+) = GE_ITEMS.TECH_CARD_ITEM_ID '||CHR(10)||
                         'AND CONCEPTO.conccodi(+) = GE_ITEMS.CONCEPT '||CHR(10)||
                         'AND RECOVERY_ITEM.items_id(+) = GE_ITEMS.RECOVERY_ITEM_ID ';

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLMATERIALATTRIBUTES;

    
















    PROCEDURE GETMATERIAL
    (
        INUITEMID     IN    NUMBER,
        OCUDATACURSOR OUT   CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        FILLMATERIALATTRIBUTES;

        SBSQL := 'SELECT '|| SBATTRIBUTES ||CHR(10)||
                 'FROM /*+ OR_BOFW_OrdersConfigurator.GetMaterial */ '||CHR(10)||
                 SBGLOBALFROM||
                 'WHERE '|| SBGLOBALWHERE||CHR(10)||
                 'AND GE_ITEMS.ITEMS_ID = :nuItem';

        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUITEMID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETMATERIAL;
    
    




















    PROCEDURE GETMATERIALS
    (
        INUITEMSID              IN      GE_ITEMS.ITEMS_ID%TYPE,
        ISBDESCRIPTION          IN      GE_ITEMS.DESCRIPTION%TYPE,
        INUITEMCLASSIFCLASSIF   IN      GE_ITEMS.ITEM_CLASSIF_ID%TYPE,
        INUTIPOITEM             IN      GE_ITEMS.ID_ITEMS_TIPO%TYPE,
        ISBCODE                 IN      GE_ITEMS.CODE%TYPE,
        OCUDATACURSOR           OUT     CONSTANTS.TYREFCURSOR
    )
    IS

        SBDESCRIPTION          GE_ITEMS.DESCRIPTION%TYPE;
        NUITEMCLASSIFCLASSIF   GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
        NUITEMSID              GE_ITEMS.ITEMS_ID%TYPE;
        NUTIPOITEM             GE_ITEMS.ID_ITEMS_TIPO%TYPE;
        SBCODE                  GE_ITEMS.CODE%TYPE;

        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBWHERE  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        SBDESCRIPTION         := TRIM (UPPER(NVL(ISBDESCRIPTION, CC_BOCONSTANTS.CSBNULLSTRING )));
        NUITEMCLASSIFCLASSIF  := NVL(INUITEMCLASSIFCLASSIF, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUITEMSID             := NVL(INUITEMSID, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUTIPOITEM            := NVL(INUTIPOITEM, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        SBCODE                := TRIM(UPPER(NVL(ISBCODE, CC_BOCONSTANTS.CSBNULLSTRING )));

        FILLMATERIALATTRIBUTES;

        SBWHERE := NULL;

        SBWHERE := SBGLOBALWHERE||' AND ';
        IF SBDESCRIPTION != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBWHERE := SBWHERE ||'upper(GE_ITEMS.description) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:description)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| SBDESCRIPTION ||CHR(39)||' = :description'||CHR(10)||'and ';
        END IF;

        IF NUITEMCLASSIFCLASSIF != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'GE_ITEMS.item_classif_id = :item_classif_id'||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUITEMCLASSIFCLASSIF ||CHR(39)||' = :item_classif_id'||CHR(10)||'and ';
        END IF;

        
        IF NUITEMSID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'GE_ITEMS.items_id = :items_id'||CHR(10)||' AND ' ;
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUITEMSID ||CHR(39)||' = :items_id'||CHR(10)||' AND ';
        END IF;
        
        IF NUTIPOITEM != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'GE_ITEMS.ID_ITEMS_TIPO = :tipo_items_id'||CHR(10)||' AND ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUTIPOITEM ||CHR(39)||' = :tipo_items_id'||CHR(10)||' AND ';
        END IF;

        IF SBCODE != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBWHERE := SBWHERE ||'upper(GE_ITEMS.CODE) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:code)||'||CHR(39)||'%'||CHR(39)||CHR(10);
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| SBCODE ||CHR(39)||' = :code'||CHR(10);
        END IF;

            SBSQL := 'SELECT '|| SBATTRIBUTES ||CHR(10)||
             '  FROM '||CHR(10)|| SBGLOBALFROM || CHR(10)||
             '        /*+ OR_BOFW_OrdersConfigurator.GetMaterials */'||CHR(10)||
             ' WHERE '||SBWHERE;

        OPEN OCUDATACURSOR FOR SBSQL USING
            CC_BOBOSSUTIL.CNUNULL,
            SBDESCRIPTION,
            NUITEMCLASSIFCLASSIF,
            NUITEMSID,
            NUTIPOITEM,
            SBCODE;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETMATERIALS;

    


PROCEDURE GETTASKTYPEBYITEM
(
    INUITEMID        IN  NUMBER,
    ONUTASKTYPE      OUT NUMBER
)
IS
    RFTASKTYPESITEMS    CONSTANTS.TYREFCURSOR;
    RCTASKTYPESITEMS    DAOR_TASK_TYPES_ITEMS.STYOR_TASK_TYPES_ITEMS;
BEGIN

    IF INUITEMID IS NULL THEN
        ONUTASKTYPE := NULL;
        RETURN;
    END IF;

    RFTASKTYPESITEMS := DAOR_TASK_TYPES_ITEMS.FRFGETRECORDS('ITEMS_ID = '||INUITEMID);

    FETCH RFTASKTYPESITEMS INTO RCTASKTYPESITEMS;

    ONUTASKTYPE :=  RCTASKTYPESITEMS.TASK_TYPE_ID;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        ONUTASKTYPE := NULL;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



















PROCEDURE GETACTIVITIESBYTASKTYPE
(
    INUTASKTYPE   IN  NUMBER,
    OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
)
IS

SBSQL GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

BEGIN

    FILLACTIVITIESATTRIBUTES;

    IF INUTASKTYPE IS NULL THEN
        SBSQL := 'select '||SBATTRIBUTES||CHR(10)||
        'from /*+ OR_BOFW_OrdersConfigurator.GetActivitiesByTaskType SAO195615 (1/2) */ '||CHR(10)||
        SBGLOBALFROM||
        'where '||SBGLOBALWHERE||
        'AND CT_ITEM_NOVELTY.items_id(+) = GE_ITEMS.items_id';

        OPEN OCUCURSOR FOR SBSQL USING INUTASKTYPE;
    ELSE
        SBSQL := 'select '||SBATTRIBUTES ||CHR(10)||
        'from /*+ OR_BOFW_OrdersConfigurator.GetActivitiesByTaskType SAO195615 (2/2) */ '||CHR(10)||
        SBGLOBALFROM||
        ', OR_TASK_TYPES_ITEMS '||CHR(10)||
        'where '||SBGLOBALWHERE||
        'AND CT_ITEM_NOVELTY.items_id(+) = GE_ITEMS.items_id '||CHR(10)||
        'AND OR_TASK_TYPES_ITEMS.task_type_id = :task_type_id '||CHR(10)||
        'AND OR_TASK_TYPES_ITEMS.items_id = GE_ITEMS.items_id';

        OPEN OCUCURSOR FOR SBSQL USING INUTASKTYPE, INUTASKTYPE;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END GETACTIVITIESBYTASKTYPE;



PROCEDURE GETMATERIALSBYTASKTYPE
(
    INUTASKTYPE   IN  NUMBER,
    OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
)
IS

SBSQL GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

BEGIN

    FILLMATERIALATTRIBUTES;

    IF INUTASKTYPE IS NULL THEN
        SBSQL := 'select '||SBATTRIBUTES||CHR(10)||
        'from /*+ OR_BOFW_OrdersConfigurator.GetMaterialsByTaskType (1/2) */ '||CHR(10)||
        SBGLOBALFROM||
        'where '||SBGLOBALWHERE||
        'AND GE_ITEMS.items_id != GE_ITEMS.items_id';

        OPEN OCUCURSOR FOR SBSQL USING INUTASKTYPE;
    ELSE
        SBSQL := 'select '||SBATTRIBUTES ||CHR(10)||
        'from /*+ OR_BOFW_OrdersConfigurator.GetMaterialsByTaskType (2/2) */ '||CHR(10)||
        SBGLOBALFROM||
        ', OR_TASK_TYPES_ITEMS '||CHR(10)||
        'where '||SBGLOBALWHERE||
        'AND OR_TASK_TYPES_ITEMS.task_type_id = :task_type_id '||CHR(10)||
        'AND OR_TASK_TYPES_ITEMS.items_id = GE_ITEMS.items_id';

        OPEN OCUCURSOR FOR SBSQL USING INUTASKTYPE, INUTASKTYPE;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END GETMATERIALSBYTASKTYPE;


    
















    PROCEDURE GETITEMSBYMOVE
    (
        INUMOVEID     IN  OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        UT_TRACE.TRACE('inicio GetItemsByMove ',1);

        FILLITEMATTRIBUTES;

        IF INUMOVEID IS NULL THEN
            SBSQL := 'select '||SBATTRIBUTES||CHR(10)||
            'from /*+ OR_BOFW_OrdersConfigurator.GetItemsByMove (1/2) */ '||CHR(10)||
            SBGLOBALFROM||
            'where '||SBGLOBALWHERE||
            'AND or_uni_item_bala_mov.uni_item_bala_mov_id != or_uni_item_bala_mov.uni_item_bala_mov_id';

            OPEN OCUCURSOR FOR SBSQL USING INUMOVEID;
        ELSE
            SBSQL := 'select '||SBATTRIBUTES ||CHR(10)||
            'from /*+ OR_BOFW_OrdersConfigurator.GetItemsByMove(2/2)  */ '||CHR(10)||
            SBGLOBALFROM||
            ', OR_UNI_ITEM_BALA_MOV '||CHR(10)||
            'where '||SBGLOBALWHERE||
            'AND OR_UNI_ITEM_BALA_MOV.uni_item_bala_mov_id = :uni_item_bala_mov_id '||CHR(10)||
            'AND OR_UNI_ITEM_BALA_MOV.items_id = GE_ITEMS.items_id';

            OPEN OCUCURSOR FOR SBSQL USING INUMOVEID, INUMOVEID;
        END IF;
        UT_TRACE.TRACE('fin GetItemsByMove ',1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GetItemsByMove ',1);
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('others GetItemsByMove ',1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMSBYMOVE;

    
















    PROCEDURE GETMOVEBYITEM
    (
        INUITEMID           IN  GE_ITEMS.ITEMS_ID%TYPE,
        ONUUNIITEMBALAMOVID OUT OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE
    )
    IS
        RFMOVEITEMS    CONSTANTS.TYREFCURSOR;
        RCMOVEITEMS    DAOR_UNI_ITEM_BALA_MOV.STYOR_UNI_ITEM_BALA_MOV;
    BEGIN

        IF INUITEMID IS NULL THEN
            ONUUNIITEMBALAMOVID := NULL;
            RETURN;
        END IF;

        RFMOVEITEMS := DAOR_UNI_ITEM_BALA_MOV.FRFGETRECORDS('ITEMS_ID = '||INUITEMID);

        FETCH RFMOVEITEMS INTO RCMOVEITEMS;

        ONUUNIITEMBALAMOVID :=  RCMOVEITEMS.UNI_ITEM_BALA_MOV_ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ONUUNIITEMBALAMOVID := NULL;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETMOVEBYITEM;



    PROCEDURE PRTIMEAMOUNTFORMAT
    (
        INUAMOUNT       IN  NUMBER,
        OSBTIME         OUT VARCHAR2,
        IBLTWENTY_FOUR  IN  BOOLEAN DEFAULT FALSE
    )
    IS
        NUAMOUNT    NUMBER(10,4);
        SBHOR       VARCHAR(10);
        SBMIN       VARCHAR(10);
        SBSEG       VARCHAR(10);
        CNUZERO     CONSTANT VARCHAR2(100) := '0';
        CNUMESSAGE  CONSTANT NUMBER := 5280;
        CNUOUTRANGE CONSTANT NUMBER := 1440;
        CNUSIXTY    CONSTANT NUMBER := 60;
        CNUTEN      CONSTANT NUMBER := 10;
        OUT_RANGE   EXCEPTION;
    BEGIN
        IF(IBLTWENTY_FOUR AND INUAMOUNT > CNUOUTRANGE)THEN
            RAISE OUT_RANGE;
        END IF;
        NUAMOUNT := ROUND(INUAMOUNT,2);
        SBHOR := TO_CHAR(TRUNC(NUAMOUNT/CNUSIXTY,0));
        IF (TO_NUMBER(SBHOR)< CNUTEN )THEN
            SBHOR := CNUZERO||CNUZERO||CNUZERO||SBHOR;
        ELSE
            IF (TO_NUMBER(SBHOR)< 100 )THEN
                SBHOR := CNUZERO||CNUZERO||SBHOR;
            ELSE
                IF (TO_NUMBER(SBHOR)< 1000 )THEN
                    SBHOR := CNUZERO||SBHOR;
                END IF;
            END IF;
        END IF;
        NUAMOUNT := NUAMOUNT - (TO_NUMBER(SBHOR)*CNUSIXTY);
        SBMIN := TO_CHAR(TRUNC(NUAMOUNT,0));
        IF (TO_NUMBER(SBMIN)< CNUTEN )THEN
            SBMIN := CNUZERO||SBMIN;
        END IF;
        NUAMOUNT := NUAMOUNT - TRUNC(NUAMOUNT,0);
        NUAMOUNT := NUAMOUNT * CNUSIXTY;
        SBSEG := TO_CHAR(TRUNC(NUAMOUNT,0));
        IF (TO_NUMBER(SBSEG)< CNUTEN )THEN
            SBSEG := CNUZERO||SBSEG;
        END IF;
        OSBTIME := SBHOR||':'||SBMIN||':'||SBSEG;
    EXCEPTION
        WHEN OUT_RANGE THEN
            ERRORS.SETERROR(CNUMESSAGE);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FSBTIMEAMOUNTFORMAT
    (
        INUAMOUNT      IN NUMBER,
    	IBLTWENTY_FOUR IN BOOLEAN DEFAULT FALSE
    ) RETURN VARCHAR2
    IS
        SBTIME VARCHAR(11);
    BEGIN
        IF (INUAMOUNT IS NULL) THEN
            SBTIME := '';
            RETURN(SBTIME);
        END IF;
        PRTIMEAMOUNTFORMAT(INUAMOUNT,
           		           SBTIME,
		      	           IBLTWENTY_FOUR);
        RETURN(SBTIME);
    END;




    






















    PROCEDURE GETOPERUNITITEM
    (
        INUITEMID  IN  OR_OPE_UNI_ITEM_BALA.ITEMS_ID%TYPE,
        ORFRESULT OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_OPE_UNI_ITEM_BALA.ROWID,
                   OR_OPE_UNI_ITEM_BALA.ITEMS_ID,
                   GE_ITEMS.CODE||' - '||GE_ITEMS.DESCRIPTION ITEM_DESCRIPTION,
                   OR_OPE_UNI_ITEM_BALA.QUOTA,
                   OR_OPE_UNI_ITEM_BALA.OCCACIONAL_QUOTA,
                   OR_OPE_UNI_ITEM_BALA.BALANCE,
                   OR_OPE_UNI_ITEM_BALA.TOTAL_COSTS,
                   GE_ITEM_CLASSIF.COST_METHOD,
                   CC_BOBOSSUTIL.CNUNULL PARENT_ID
            FROM OR_OPE_UNI_ITEM_BALA,
                 GE_ITEMS,
                 GE_ITEM_CLASSIF /*+ OR_BOFW_OrdersConfigurator.GetOperUnitItem*/
            WHERE OR_OPE_UNI_ITEM_BALA.ITEMS_ID = INUITEMID
              AND OR_OPE_UNI_ITEM_BALA.ITEMS_ID = GE_ITEMS.ITEMS_ID
              AND GE_ITEMS.ITEM_CLASSIF_ID = GE_ITEM_CLASSIF.ITEM_CLASSIF_ID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETOPERUNITBYOUITEM
    (
        INUROWID       IN  ROWID,
        ONUOPERUNITID  OUT OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    )
    IS
    BEGIN
        IF (INUROWID IS NULL) THEN
             ONUOPERUNITID := NULL;
             RETURN;
        END IF;

        SELECT OR_OPE_UNI_ITEM_BALA.OPERATING_UNIT_ID
        INTO ONUOPERUNITID
        FROM OR_OPE_UNI_ITEM_BALA
        WHERE ROWID = INUROWID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETOUITEMBYOPERUNIT
    (
        INUOPERUNITID IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_OPE_UNI_ITEM_BALA.ROWID,
                   OR_OPE_UNI_ITEM_BALA.ITEMS_ID,
                   GE_ITEMS.DESCRIPTION ITEM_DESCRIPTION,
                   OR_OPE_UNI_ITEM_BALA.QUOTA,
                   OR_OPE_UNI_ITEM_BALA.OCCACIONAL_QUOTA,
                   OR_OPE_UNI_ITEM_BALA.BALANCE,
                   OR_OPE_UNI_ITEM_BALA.TOTAL_COSTS,
                   GE_ITEM_CLASSIF.COST_METHOD,
                   INUOPERUNITID PARENT_ID
            FROM OR_OPE_UNI_ITEM_BALA,
                 GE_ITEMS,
                 GE_ITEM_CLASSIF
            WHERE OR_OPE_UNI_ITEM_BALA.OPERATING_UNIT_ID = INUOPERUNITID
              AND OR_OPE_UNI_ITEM_BALA.ITEMS_ID = GE_ITEMS.ITEMS_ID
              AND GE_ITEMS.ITEM_CLASSIF_ID = GE_ITEM_CLASSIF.ITEM_CLASSIF_ID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;




    
    PROCEDURE GETOPERUNITPERSON
    (
        INUPERSONID  IN  OR_OPER_UNIT_PERSONS.PERSON_ID%TYPE,
        ORFRESULT    OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_OPER_UNIT_PERSONS.ROWID,
                   OR_OPER_UNIT_PERSONS.PERSON_ID,
                   GE_PERSON.NAME_,
                   CC_BOBOSSUTIL.CNUNULL PARENT_ID
            FROM OR_OPER_UNIT_PERSONS,
                 GE_PERSON
            WHERE OR_OPER_UNIT_PERSONS.PERSON_ID = GE_PERSON.PERSON_ID
              AND OR_OPER_UNIT_PERSONS.PERSON_ID = INUPERSONID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETOPERUNITBYOUPERSON
    (
        INUROWID       IN  ROWID,
        ONUOPERUNITID  OUT OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    )
    IS
    BEGIN
        IF (INUROWID IS NULL) THEN
             ONUOPERUNITID := NULL;
             RETURN;
        END IF;

        SELECT OR_OPER_UNIT_PERSONS.OPERATING_UNIT_ID
        INTO ONUOPERUNITID
        FROM OR_OPER_UNIT_PERSONS
        WHERE ROWID = INUROWID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETOUPERSONBYOPERUNIT
    (
        INUOPERUNITID IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_OPER_UNIT_PERSONS.ROWID,
                   OR_OPER_UNIT_PERSONS.PERSON_ID,
                   GE_PERSON.NAME_,
                   INUOPERUNITID PARENT_ID
            FROM OR_OPER_UNIT_PERSONS,
                 GE_PERSON
            WHERE OR_OPER_UNIT_PERSONS.PERSON_ID = GE_PERSON.PERSON_ID
              AND OR_OPER_UNIT_PERSONS.OPERATING_UNIT_ID = INUOPERUNITID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;




    
    PROCEDURE GETOPERUNITCOMMENT
    (
        INUCOMMTYP      IN  OR_OPER_UNIT_COMMENT.COMMENT_TYPE_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_OPER_UNIT_COMMENT.ROWID,
                   OR_OPER_UNIT_COMMENT.COMMENT_TYPE_ID ||' - '||
                   DAGE_COMMENT_TYPE.FSBGETDESCRIPTION(OR_OPER_UNIT_COMMENT.COMMENT_TYPE_ID) COMMENT_TYPE,
                   OR_OPER_UNIT_COMMENT.COMMENTS,
                   OR_OPER_UNIT_COMMENT.COMMENT_DATE,
                   OR_OPER_UNIT_COMMENT.USER_ID,
                   OR_OPER_UNIT_COMMENT.TERMINAL,
                   CC_BOBOSSUTIL.CNUNULL PARENT_ID
            FROM OR_OPER_UNIT_COMMENT
            WHERE OR_OPER_UNIT_COMMENT.COMMENT_TYPE_ID = INUCOMMTYP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETOPERUNITBYOUCOMMENT
    (
        INUROWID       IN  ROWID,
        ONUOPERUNITID  OUT OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    )
    IS
    BEGIN
        IF (INUROWID IS NULL) THEN
             ONUOPERUNITID := NULL;
             RETURN;
        END IF;

        SELECT OR_OPER_UNIT_COMMENT.OPERATING_UNIT_ID
        INTO ONUOPERUNITID
        FROM OR_OPER_UNIT_COMMENT
        WHERE ROWID = INUROWID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETOUCOMMENTBYOPERUNIT
    (
        INUOPERUNITID IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_OPER_UNIT_COMMENT.ROWID,
                   OR_OPER_UNIT_COMMENT.COMMENT_TYPE_ID ||' - '||
                   DAGE_COMMENT_TYPE.FSBGETDESCRIPTION(OR_OPER_UNIT_COMMENT.COMMENT_TYPE_ID) COMMENT_TYPE,
                   OR_OPER_UNIT_COMMENT.COMMENTS,
                   OR_OPER_UNIT_COMMENT.COMMENT_DATE,
                   OR_OPER_UNIT_COMMENT.USER_ID,
                   OR_OPER_UNIT_COMMENT.TERMINAL,
                   INUOPERUNITID PARENT_ID
            FROM OR_OPER_UNIT_COMMENT
            WHERE OR_OPER_UNIT_COMMENT.OPERATING_UNIT_ID = INUOPERUNITID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;




    
    PROCEDURE GETTASKTYPEACTIVITY
    (
        INUACTIVITY     IN  OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUACTIVITYPAR      NUMBER;
    BEGIN
        NUACTIVITYPAR := GE_BOPARAMETER.FNUGET('ACTIVITY');
        OPEN ORFRESULT FOR
            SELECT OR_TASK_TYPES_ITEMS.ROWID,
                   OR_TASK_TYPES_ITEMS.ITEMS_ID,
                   GE_ITEMS.DESCRIPTION,
                   OR_TASK_TYPES_ITEMS.DISPLAY_ORDER,
                   DECODE(OR_TASK_TYPES_ITEMS.IS_LEGALIZE_VISIBLE,'Y','Si','No') IS_LEGALIZE_VISIBLE,
                   OR_TASK_TYPES_ITEMS.ITEM_AMOUNT,
                   CC_BOBOSSUTIL.CNUNULL PARENT_ID
            FROM OR_TASK_TYPES_ITEMS,
                 GE_ITEMS
            WHERE OR_TASK_TYPES_ITEMS.ITEMS_ID = INUACTIVITY
              AND GE_ITEMS.ITEMS_ID = OR_TASK_TYPES_ITEMS.ITEMS_ID
              AND GE_ITEMS.ITEM_CLASSIF_ID = NUACTIVITYPAR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTASKTYPEBYTTACTIVITY
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    IS
    BEGIN
        IF (INUROWID IS NULL) THEN
             ONUTASKTYPEID := NULL;
             RETURN;
        END IF;

        SELECT OR_TASK_TYPES_ITEMS.TASK_TYPE_ID
        INTO ONUTASKTYPEID
        FROM OR_TASK_TYPES_ITEMS
        WHERE ROWID = INUROWID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTTACTIVITYBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUACTIVITYPAR      NUMBER;
    BEGIN
        NUACTIVITYPAR := GE_BOPARAMETER.FNUGET('ACTIVITY');
        OPEN ORFRESULT FOR
            SELECT OR_TASK_TYPES_ITEMS.ROWID,
                   OR_TASK_TYPES_ITEMS.ITEMS_ID,
                   GE_ITEMS.DESCRIPTION,
                   OR_TASK_TYPES_ITEMS.DISPLAY_ORDER,
                   DECODE(OR_TASK_TYPES_ITEMS.IS_LEGALIZE_VISIBLE,'Y','Si','No') IS_LEGALIZE_VISIBLE,
                   OR_TASK_TYPES_ITEMS.ITEM_AMOUNT,
                   INUTASKTYPEID PARENT_ID
            FROM OR_TASK_TYPES_ITEMS,
                 GE_ITEMS
            WHERE OR_TASK_TYPES_ITEMS.TASK_TYPE_ID = INUTASKTYPEID
              AND GE_ITEMS.ITEMS_ID = OR_TASK_TYPES_ITEMS.ITEMS_ID
              AND GE_ITEMS.ITEM_CLASSIF_ID = NUACTIVITYPAR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;




    
    PROCEDURE GETTASKTYPECAUSAL
    (
        INUCAUSALID     IN  OR_TASK_TYPE_CAUSAL.CAUSAL_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_TASK_TYPE_CAUSAL.ROWID,
                   OR_TASK_TYPE_CAUSAL.CAUSAL_ID,
                   DAGE_CAUSAL.FSBGETDESCRIPTION(OR_TASK_TYPE_CAUSAL.CAUSAL_ID) DESCRIPTION,
                   CC_BOBOSSUTIL.CNUNULL PARENT_ID
            FROM OR_TASK_TYPE_CAUSAL
            WHERE OR_TASK_TYPE_CAUSAL.CAUSAL_ID = INUCAUSALID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTASKTYPEBYTTCAUSAL
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    IS
    BEGIN
        IF (INUROWID IS NULL) THEN
             ONUTASKTYPEID := NULL;
             RETURN;
        END IF;

        SELECT OR_TASK_TYPE_CAUSAL.TASK_TYPE_ID
        INTO ONUTASKTYPEID
        FROM OR_TASK_TYPE_CAUSAL
        WHERE ROWID = INUROWID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTTCAUSALBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_TASK_TYPE_CAUSAL.ROWID,
                   OR_TASK_TYPE_CAUSAL.CAUSAL_ID,
                   DAGE_CAUSAL.FSBGETDESCRIPTION(OR_TASK_TYPE_CAUSAL.CAUSAL_ID) DESCRIPTION,
                   INUTASKTYPEID PARENT_ID
            FROM OR_TASK_TYPE_CAUSAL
            WHERE OR_TASK_TYPE_CAUSAL.TASK_TYPE_ID = INUTASKTYPEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;




    
    PROCEDURE GETTASKTYPECOMMENTTYPE
    (
        INUCOMMTYPEID   IN  OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_TASK_TYPE_COMMENT.ROWID,
                   OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID,
                   DAGE_COMMENT_TYPE.FSBGETDESCRIPTION(OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID) DESCRIPTION,
                   DECODE
                   (
                        DAGE_COMMENT_TYPE.FSBGETCATEGORY(OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID),
                        'E',
                        'Empresa',
                        'C',
                        'Cliente',
                        NULL
                   ) CATEGORY_,
                   CC_BOBOSSUTIL.CNUNULL PARENT_ID
            FROM OR_TASK_TYPE_COMMENT
            WHERE OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID = INUCOMMTYPEID;
            
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTASKTYPEBYTTCOMMENTTYPE
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    IS
    BEGIN
        IF (INUROWID IS NULL) THEN
             ONUTASKTYPEID := NULL;
             RETURN;
        END IF;

        SELECT OR_TASK_TYPE_COMMENT.TASK_TYPE_ID
        INTO ONUTASKTYPEID
        FROM OR_TASK_TYPE_COMMENT
        WHERE ROWID = INUROWID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTTCOMMENTBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_TASK_TYPE_COMMENT.ROWID,
                   OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID,
                   DAGE_COMMENT_TYPE.FSBGETDESCRIPTION(OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID) DESCRIPTION,
                   DECODE
                   (
                        DAGE_COMMENT_TYPE.FSBGETCATEGORY(OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID),
                        'E',
                        'Empresa',
                        'C',
                        'Cliente',
                        NULL
                   ) CATEGORY_,
                   INUTASKTYPEID PARENT_ID
            FROM OR_TASK_TYPE_COMMENT
            WHERE OR_TASK_TYPE_COMMENT.TASK_TYPE_ID = INUTASKTYPEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;




    




    
    PROCEDURE GETTASKTYPENUMERATOR
    (
        INUNUMCONID     IN  OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID%TYPE,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID,
                   OR_NUMCON_TASKTYPE.NUMERATOR_CONFIG_ID || ' - ' || GE_NUMER_CONFIG_SET.DESCRIPTION DESCRIPTION,
                   GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID || ' - ' || GE_ATTRIBUTES_SET.DESCRIPTION GROUP_ATTRIBUTE,
                   CC_BOBOSSUTIL.CNUNULL PARENT_ID
            FROM OR_NUMCON_TASKTYPE,
                 GE_NUMER_CONFIG_SET,
                 GE_ATTRIBUTES_SET
            WHERE OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID = INUNUMCONID
              AND GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID = GE_NUMER_CONFIG_SET.ATTRIBUTE_SET_ID
              AND OR_NUMCON_TASKTYPE.NUMERATOR_CONFIG_ID = GE_NUMER_CONFIG_SET.NUMERATOR_CONFIG_ID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTASKTYPEBYTTNUMERATOR
    (
        INUNUMCONID    IN  OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID%TYPE,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    IS
    BEGIN
        IF (INUNUMCONID IS NULL) THEN
             ONUTASKTYPEID := NULL;
             RETURN;
        END IF;

        SELECT OR_NUMCON_TASKTYPE.TASK_TYPE_ID
        INTO ONUTASKTYPEID
        FROM OR_NUMCON_TASKTYPE
        WHERE OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID = INUNUMCONID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTTNUMERATORBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID,
                   OR_NUMCON_TASKTYPE.NUMERATOR_CONFIG_ID || ' - ' || GE_NUMER_CONFIG_SET.DESCRIPTION DESCRIPTION,
                   GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID || ' - ' || GE_ATTRIBUTES_SET.DESCRIPTION GROUP_ATTRIBUTE,
                   INUTASKTYPEID PARENT_ID
            FROM OR_NUMCON_TASKTYPE,
                 GE_NUMER_CONFIG_SET,
                 GE_ATTRIBUTES_SET
            WHERE OR_NUMCON_TASKTYPE.TASK_TYPE_ID = INUTASKTYPEID
              AND GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID = GE_NUMER_CONFIG_SET.ATTRIBUTE_SET_ID
              AND OR_NUMCON_TASKTYPE.NUMERATOR_CONFIG_ID = GE_NUMER_CONFIG_SET.NUMERATOR_CONFIG_ID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;





    
    PROCEDURE GETTASKTYPEBYOPERSECTOR
    (
        INUOPERSECTORID IN  OR_OPSE_OPUNT_TSKTYP.OPERATING_SECTOR_ID%TYPE,
        ONUTASKTYPEID   OUT OR_OPSE_OPUNT_TSKTYP.TASK_TYPE_ID%TYPE
    )
    IS
        CURSOR CUOPERSECTOR
        (
            NUOPERSECTORID OR_OPSE_OPUNT_TSKTYP.OPERATING_SECTOR_ID%TYPE
        )
        IS
            SELECT OR_OPSE_OPUNT_TSKTYP.TASK_TYPE_ID
            FROM OR_OPSE_OPUNT_TSKTYP
            WHERE OR_OPSE_OPUNT_TSKTYP.OPERATING_SECTOR_ID = NUOPERSECTORID;
    BEGIN
        IF (INUOPERSECTORID IS NULL) THEN
             ONUTASKTYPEID := NULL;
             RETURN;
        END IF;

        OPEN CUOPERSECTOR (INUOPERSECTORID);

        IF (CUOPERSECTOR%NOTFOUND) THEN
            ONUTASKTYPEID := NULL;
            RETURN;
        END IF;

        FETCH CUOPERSECTOR INTO ONUTASKTYPEID;

        CLOSE CUOPERSECTOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUOPERSECTOR%ISOPEN) THEN
                CLOSE CUOPERSECTOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUOPERSECTOR%ISOPEN) THEN
                CLOSE CUOPERSECTOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;





    
    PROCEDURE GETTASKTYPEREGORD
    (
        INUCAUSALID   IN  OR_ORDER_REGEN.CAUSAL_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_ORDER_REGEN.ROWID,
                   OR_ORDER_REGEN.CAUSAL_ID ||' - '|| DAGE_CAUSAL.FSBGETDESCRIPTION(OR_ORDER_REGEN.CAUSAL_ID) CAUSAL_ID,
                   OR_ORDER_REGEN.REGEN_TASK_TYPE_ID ||' - '|| DAOR_TASK_TYPE.FSBGETDESCRIPTION(OR_ORDER_REGEN.REGEN_TASK_TYPE_ID) REGEN_TASK_TYPE_ID,
                   CC_BOBOSSUTIL.CNUNULL PARENT_ID
            FROM OR_ORDER_REGEN
            WHERE OR_ORDER_REGEN.CAUSAL_ID  = INUCAUSALID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTASKTYPEBYTTREGORD
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    IS
    BEGIN
        IF (INUROWID IS NULL) THEN
             ONUTASKTYPEID := NULL;
             RETURN;
        END IF;

        SELECT OR_ORDER_REGEN.TASK_TYPE_ID
        INTO ONUTASKTYPEID
        FROM OR_ORDER_REGEN
        WHERE ROWID = INUROWID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTTREGORDBYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_ORDER_REGEN.ROWID,
                   OR_ORDER_REGEN.CAUSAL_ID ||' - '|| DAGE_CAUSAL.FSBGETDESCRIPTION(OR_ORDER_REGEN.CAUSAL_ID) CAUSAL_ID,
                   OR_ORDER_REGEN.REGEN_TASK_TYPE_ID ||' - '|| DAOR_TASK_TYPE.FSBGETDESCRIPTION(OR_ORDER_REGEN.REGEN_TASK_TYPE_ID) REGEN_TASK_TYPE_ID,
                   INUTASKTYPEID PARENT_ID
            FROM OR_ORDER_REGEN
            WHERE OR_ORDER_REGEN.TASK_TYPE_ID = INUTASKTYPEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;




     
    PROCEDURE GETTASKTYPEADDDATA
    (
        INUATTSETLID  IN  OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT
                /*+ index(or_tasktype_add_data PK_OR_TASKTYPE_ADD_DATA) */
                   OR_TASKTYPE_ADD_DATA.ROWID,
                   OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID ||' - '|| DAGE_ATTRIBUTES_SET.FSBGETDESCRIPTION(OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID) ATTRIBUTE_SET_ID,
                   DECODE(OR_TASKTYPE_ADD_DATA.USE_,'Q','Consulta','B','Ambos','C','Cumplida','I','Incumplida',NULL) USE_,
                   OR_TASKTYPE_ADD_DATA.ORDER_ ORDER_,
                   DECODE(OR_TASKTYPE_ADD_DATA.ACTIVE,'Y','Si','N','No') ACTIVE,
                   CC_BOBOSSUTIL.CNUNULL PARENT_ID
            /*+ OR_BOFW_OrdersConfigurator.GetTaskTypeAddData SAO193261 */
            FROM OR_TASKTYPE_ADD_DATA
            WHERE OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID  = INUATTSETLID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    PROCEDURE GETTASKTYPEBYTTADDDATA
    (
        INUROWID       IN  ROWID,
        ONUTASKTYPEID  OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    IS
    BEGIN
        IF (INUROWID IS NULL) THEN
             ONUTASKTYPEID := NULL;
             RETURN;
        END IF;

        SELECT OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID
        INTO ONUTASKTYPEID
        FROM OR_TASKTYPE_ADD_DATA
        WHERE ROWID = INUROWID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTTADDDATABYTASKTYPE
    (
        INUTASKTYPEID IN  OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID%TYPE,
        ORFRESULT     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFRESULT FOR
            SELECT OR_TASKTYPE_ADD_DATA.ROWID,
                   OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID ||' - '|| DAGE_ATTRIBUTES_SET.FSBGETDESCRIPTION(OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID) ATTRIBUTE_SET_ID,
                   DECODE(OR_TASKTYPE_ADD_DATA.USE_,'Q','Consulta','B','Ambos','C','Cumplida','I','Incumplida',NULL) USE_,
                   OR_TASKTYPE_ADD_DATA.ORDER_ ORDER_,
                   DECODE(OR_TASKTYPE_ADD_DATA.ACTIVE,'Y','Si','N','No') ACTIVE,
                   INUTASKTYPEID PARENT_ID
            FROM OR_TASKTYPE_ADD_DATA
            WHERE OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID = INUTASKTYPEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;





    


















    FUNCTION FILLASSOCIATEDITEMATTRIB
    RETURN GE_BOUTILITIES.STYSTATEMENT
    IS
        SBATTRIBUTES GE_BOUTILITIES.STYSTATEMENT;

    BEGIN
        GE_BOUTILITIES.ADDATTRIBUTE('ge_item_composition.item_compound_id
            || ''-'' || ge_item_composition.item_to_compose_id',
            'ASSOC_ITEM_ID', SBATTRIBUTES);

        GE_BOUTILITIES.ADDATTRIBUTE('ge_item_composition.item_to_compose_id',
            'ITEMS_ID', SBATTRIBUTES);

        GE_BOUTILITIES.ADDATTRIBUTE('DAGE_ITEMS.fsbGetCode('||
            'ge_item_composition.item_to_compose_id) ||'||CHR(39)||' - '||CHR(39)||'||'||
            'ge_bobasicdataservices.fsbGetDescItem(ge_item_composition.item_to_compose_id)',
            'DESCRIPTION', SBATTRIBUTES);

        GE_BOUTILITIES.ADDATTRIBUTE('ge_item_composition.item_amount',
            'ITEM_AMOUNT', SBATTRIBUTES);

        GE_BOUTILITIES.ADDATTRIBUTE('ge_item_composition.update_date',
            'UPDATE_DATE', SBATTRIBUTES);

        GE_BOUTILITIES.ADDATTRIBUTE('ge_item_composition.user_id',
            'USER_ID', SBATTRIBUTES);

        GE_BOUTILITIES.ADDATTRIBUTE('ge_item_composition.terminal',
            'TERMINAL', SBATTRIBUTES);

        GE_BOUTILITIES.ADDATTRIBUTE(':parent_id',
            'PARENT_ID', SBATTRIBUTES);

        RETURN SBATTRIBUTES ;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FILLASSOCIATEDITEMATTRIB;

    
    PROCEDURE GETASSOCIATEDITEM
    (
        ISBASSOCITEM IN VARCHAR2,
        ORFRESULT    OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUITEM_COMPOUND   GE_ITEM_COMPOSITION.ITEM_COMPOUND_ID%TYPE;
        NUITEM_TO_COMPOSE GE_ITEM_COMPOSITION.ITEM_TO_COMPOSE_ID%TYPE;
        SBSQL             GE_BOUTILITIES.STYSTATEMENT;

    BEGIN
        IF ISBASSOCITEM LIKE '%-%' THEN
            NUITEM_COMPOUND   := UT_STRING.EXTSTRFIELD(ISBASSOCITEM, '-', 1);
            NUITEM_TO_COMPOSE := UT_STRING.EXTSTRFIELD(ISBASSOCITEM, '-', 2);
        END IF;

        SBSQL := '
            SELECT ' || FILLASSOCIATEDITEMATTRIB || '
            FROM ge_item_composition
            WHERE item_compound_id = :inuItem_compound
                AND item_to_compose_id = :inuItem_to_compose' ;

        UT_TRACE.TRACE(SBSQL, 10);

        OPEN ORFRESULT FOR SBSQL
            USING NUITEM_COMPOUND, NUITEM_COMPOUND, NUITEM_TO_COMPOSE ;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETASSOCIATEDITEM;

    
    PROCEDURE GETASSOCIATEDITEMSBYITEM
    (
        INUITEMS_ID IN GE_ITEMS.ITEMS_ID%TYPE,
        ORFRESULT   OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL GE_BOUTILITIES.STYSTATEMENT;

    BEGIN
        SBSQL := '
            SELECT ' || FILLASSOCIATEDITEMATTRIB || '
            FROM ge_item_composition
            WHERE item_compound_id = :inuItem_compound' ;

        OPEN ORFRESULT FOR SBSQL
            USING INUITEMS_ID, INUITEMS_ID ;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETASSOCIATEDITEMSBYITEM;

    
    PROCEDURE GETITEMBYASSOCIATEDITEM
    (
        ISBASSOCITEM IN VARCHAR2,
        ONUITEMS_ID  OUT GE_ITEMS.ITEMS_ID%TYPE
    )
    IS
    BEGIN
        ONUITEMS_ID := UT_STRING.EXTSTRFIELD(ISBASSOCITEM, '-', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETITEMBYASSOCIATEDITEM;

    









































    PROCEDURE FILLITEMSSERIADOSATTRIBUTES
    IS
    BEGIN
        SBATTRIBUTES := '';

        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_SERIADO.ID_ITEMS_SERIADO','ID_ITEMS_SERIADO', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES, TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE (
                                    'decode(GE_ITEMS_SERIADO.ITEMS_ID, null, null,
                                          DAGE_ITEMS.fsbGetCode(GE_ITEMS_SERIADO.ITEMS_ID) ||'||CHR(39)||' - '||CHR(39)||
                                          '||DAGE_ITEMS.fsbGetDescription(GE_ITEMS_SERIADO.ITEMS_ID))',
                                    'ITEMS_ID', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES
                                   );
        CC_BOBOSSUTIL.ADDATTRIBUTE (
                                    'decode(GE_ITEMS.ID_ITEMS_TIPO,null,null,
                                            GE_ITEMS.ID_ITEMS_TIPO ||'||CHR(39)||' - '||CHR(39)||
                                            '||DAGE_ITEMS_TIPO.fsbGetDescripcion(GE_ITEMS.ID_ITEMS_TIPO))',
                                    'ID_ITEMS_TIPO', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES
                                   );
        CC_BOBOSSUTIL.ADDATTRIBUTE (
                                    'GE_ITEMS.ITEM_CLASSIF_ID ||'||CHR(39)||' - '||CHR(39)||
                                          '||DAGE_ITEM_CLASSIF.fsbGetDescription(GE_ITEMS.ITEM_CLASSIF_ID)',
                                    'ID_ITEMS_CLASIF', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES
                                   );
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_SERIADO.SERIE', 'SERIE', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (
                                    'decode(GE_ITEMS_SERIADO.ESTADO_TECNICO, '
                                        ||CHR(39)||'N'||CHR(39)||', '||CHR(39)||'Nuevo'||CHR(39)||', '
                                        ||CHR(39)||'R'||CHR(39)||', '||CHR(39)||'Reacondicionado'||CHR(39)||', '
                                        ||CHR(39)||'D'||CHR(39)||', '||CHR(39)||'Da�ado'||CHR(39)||')',
                                    'ESTADO_TECNICO', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES
                                   );
        CC_BOBOSSUTIL.ADDATTRIBUTE (
                                    'decode(GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV, null, null,
                                          GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV ||'||CHR(39)||' - '||CHR(39)||
                                          '||DAGE_ITEMS_ESTADO_INV.fsbGetDescripcion(GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV))',
                                    'ID_ITEMS_ESTADO_INV', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES
                                   );
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_SERIADO.COSTO', 'COSTO', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_SERIADO.SUBSIDIO', 'SUBSIDIO', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (
                                    'decode(GE_ITEMS_SERIADO.PROPIEDAD, '
                                        ||CHR(39)||'E'||CHR(39)||', '||CHR(39)||'Empresa'||CHR(39)||', '
                                        ||CHR(39)||'T'||CHR(39)||', '||CHR(39)||'Tercero'||CHR(39)||', '
                                        ||CHR(39)||'C'||CHR(39)||', '||CHR(39)||'Cliente'||CHR(39)||', '
                                        ||CHR(39)||'V'||CHR(39)||', '||CHR(39)||'Vendido al cliente'||CHR(39)||')',
                                    'PROPIEDAD', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES
                                   );
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_SERIADO.FECHA_INGRESO', 'FECHA_INGRESO', CC_BOBOSSUTIL.CNUDATE, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_SERIADO.FECHA_SALIDA', 'FECHA_SALIDA', CC_BOBOSSUTIL.CNUDATE, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_SERIADO.FECHA_REACON', 'FECHA_REACON', CC_BOBOSSUTIL.CNUDATE, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(GE_ITEMS_SERIADO.FECHA_GARANTIA, null,(SELECT /*+ INDEX (ge_item_warranty IDX_GE_ITEM_WARRANTY01)*/ max(ge_item_warranty.final_warranty_date) FROM ge_item_warranty WHERE ge_item_warranty.serie = GE_ITEMS_SERIADO.Serie AND ge_item_warranty.is_active = '''||GE_BOCONSTANTS.CSBYES||''' ), GE_ITEMS_SERIADO.FECHA_GARANTIA)', 'FECHA_GARANTIA', CC_BOBOSSUTIL.CNUDATE, SBATTRIBUTES, TBATTRIBUTES );
        CC_BOBOSSUTIL.ADDATTRIBUTE (
                                    'decode(GE_ITEMS_SERIADO.OPERATING_UNIT_ID, null, null,
                                          GE_ITEMS_SERIADO.OPERATING_UNIT_ID ||'||CHR(39)||' - '||CHR(39)||
                                          '||DAOR_Operating_Unit.fsbGetName(GE_ITEMS_SERIADO.OPERATING_UNIT_ID))',
                                    'OPERATING_UNIT_ID', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES
                                   );
        CC_BOBOSSUTIL.ADDATTRIBUTE ('(select NUMERO_SERVICIO FROM GE_EMPAQUETAMIENTO WHERE GE_EMPAQUETAMIENTO.id_items_seriado = GE_ITEMS_SERIADO.id_items_seriado )','NUMERO_SERVICIO', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('(select VALID_UNTIL FROM OR_ITEM_PATTERN WHERE OR_ITEM_PATTERN.id_items_seriado = ge_items_seriado.id_items_seriado AND OR_ITEM_PATTERN.valid_until >= trunc(sysdate))', 'VALID_UNTIL', CC_BOBOSSUTIL.CNUDATE, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('(select b.SERIE FROM GE_ASSO_SERIAL_ITEMS a, GE_ITEMS_SERIADO b WHERE a.SERIAL_ITEMS_ID = b.id_items_seriado AND a.asso_serial_items_id = GE_ITEMS_SERIADO.id_items_seriado )','SERIAL_ITEMS', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (
                                    'decode(GE_ITEMS_SERIADO.SUBSCRIBER_ID, null, null,
                                        DAGE_subscriber.fsbGetIdentification(GE_ITEMS_SERIADO.SUBSCRIBER_ID))',
                                    'SUBSCRIBER_ID', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES
                                   );

        CC_BOBOSSUTIL.ADDATTRIBUTE (
                                    'decode(GE_BOItemsSeriado.fsbIsPattern(GE_ITEMS_SERIADO.ID_ITEMS_SERIADO), '||CHR(39)||'Y'||CHR(39)||', '||CHR(39)||'Si'||CHR(39)||', '||CHR(39)||'No'||CHR(39)||')',
                                    'IS_PATTERN', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES
                                   );

        CC_BOBOSSUTIL.ADDATTRIBUTE (':Parent_Id', 'PARENT_ID', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FILLITEMSSERIADOSATTRIBUTES;

    
    PROCEDURE GETITEMSERIADO
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        FILLITEMSSERIADOSATTRIBUTES;

        SBSQL := 'SELECT '|| SBATTRIBUTES ||
                 ' FROM GE_ITEMS_SERIADO,
                        GE_ITEMS,
                        GE_ITEMS_TIPO,
                        OR_ITEM_PATTERN
                 WHERE  GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
                 AND    GE_ITEMS.ID_ITEMS_TIPO = GE_ITEMS_TIPO.ID_ITEMS_TIPO
                 AND    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = OR_ITEM_PATTERN.ID_ITEMS_SERIADO(+)
                 AND    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = :nuitem';

        OPEN OCUDATACURSOR FOR SBSQL USING
            CC_BOBOSSUTIL.CNUNULL, INUIDITEMSSERIADO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETITEMSSERIADOS
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        INUITEMSID           IN  GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        INUIDITEMSTIPO       IN  GE_ITEMS_TIPO.ID_ITEMS_TIPO%TYPE,
        INUOPERATINGUNIT     IN  GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE,
        ISBSERIE             IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        ISBESTADOTECNICO     IN  GE_ITEMS_SERIADO.ESTADO_TECNICO%TYPE,
        INUIDITEMSESTADOINV  IN  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        ISBPROPIEDAD         IN  GE_ITEMS_SERIADO.PROPIEDAD%TYPE,
        INUNUMEROSERVICIO    IN  GE_EMPAQUETAMIENTO.NUMERO_SERVICIO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUIDITEMSSERIADO    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        NUITEMSID           GE_ITEMS_SERIADO.ITEMS_ID%TYPE;
        NUIDITEMSTIPO       GE_ITEMS_TIPO.ID_ITEMS_TIPO%TYPE;
        NUOPERATINGUNIT     GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE;
        SBSERIE             GE_ITEMS_SERIADO.SERIE%TYPE;
        SBESTADOTECNICO     GE_ITEMS_SERIADO.ESTADO_TECNICO%TYPE;
        NUIDITEMSESTADOINV  NUMBER;
        SBPROPIEDAD         GE_ITEMS_SERIADO.PROPIEDAD%TYPE;
        NUNUMEROSERVICIO    GE_EMPAQUETAMIENTO.NUMERO_SERVICIO%TYPE;

        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBWHERE  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBHINT  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN

        NUIDITEMSSERIADO   := NVL(INUIDITEMSSERIADO,CC_BOCONSTANTS.CNUAPPLICATIONNULL);
        NUITEMSID          := NVL(INUITEMSID,CC_BOCONSTANTS.CNUAPPLICATIONNULL);
        NUIDITEMSTIPO      := NVL(INUIDITEMSTIPO,CC_BOCONSTANTS.CNUAPPLICATIONNULL);
        NUOPERATINGUNIT    := NVL(INUOPERATINGUNIT,CC_BOCONSTANTS.CNUAPPLICATIONNULL);
        SBSERIE            := TRIM(UPPER(NVL(ISBSERIE,CC_BOCONSTANTS.CSBNULLSTRING)));
        SBESTADOTECNICO    := TRIM(UPPER(NVL(ISBESTADOTECNICO,CC_BOCONSTANTS.CSBAPPLICATIONNULL)));
        NUIDITEMSESTADOINV := NVL(INUIDITEMSESTADOINV, CC_BOCONSTANTS.CNUAPPLICATIONNULL);
        SBPROPIEDAD        := TRIM(UPPER(NVL(ISBPROPIEDAD,CC_BOCONSTANTS.CSBAPPLICATIONNULL)));
        NUNUMEROSERVICIO   := NVL(INUNUMEROSERVICIO,CC_BOCONSTANTS.CSBNULLSTRING);

        FILLITEMSSERIADOSATTRIBUTES;

        SBWHERE := NULL;
        SBHINT := NULL;

        SBHINT := SBHINT ||'/*+  ORDERED '||CHR(10)||'          INDEX(GE_ITEMS_TIPO PK_GE_ITEMS_TIPO) '||CHR(10);

        IF NUIDITEMSSERIADO != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBHINT := SBHINT ||'            INDEX(GE_ITEMS_SERIADO PK_GE_ITEMS_SERIADO)'||CHR(10);
            SBWHERE := SBWHERE ||'GE_ITEMS_SERIADO.Id_Items_Seriado = :Id_Items_Seriado'||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUIDITEMSSERIADO ||CHR(39)||' = :Id_Items_Seriado'||CHR(10)||'and ';
        END IF;

        IF SBSERIE != CC_BOCONSTANTS.CSBNULLSTRING THEN
            IF(NUIDITEMSSERIADO = CC_BOCONSTANTS.CNUAPPLICATIONNULL) THEN
                SBHINT := SBHINT ||'            INDEX(GE_ITEMS_SERIADO UNQ_SERIE)' ||CHR(10);
            END IF;
            SBWHERE := SBWHERE ||'GE_ITEMS_SERIADO.Serie LIKE '||CHR(39)||'%'||CHR(39)||'||:Serie||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| SBSERIE ||CHR(39)||' = :Serie'||CHR(10)||'and ';
        END IF;

        IF NUITEMSID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            IF(     NUIDITEMSSERIADO = CC_BOCONSTANTS.CNUAPPLICATIONNULL
                AND
                    SBSERIE = CC_BOCONSTANTS.CSBNULLSTRING) THEN
                SBHINT := SBHINT ||'            INDEX(GE_ITEMS_SERIADO IDX_GE_ITEMS_SERIADO_01)' ||CHR(10);
            END IF;
            SBWHERE := SBWHERE ||'GE_ITEMS_SERIADO.Items_Id = :Items_Id'||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUITEMSID ||CHR(39)||' = :Items_Id'||CHR(10)||'and ';
        END IF;

        IF NUIDITEMSTIPO != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBHINT := SBHINT ||'            INDEX(GE_ITEMS IX_GE_ITEMS13)' ||CHR(10);
            SBWHERE := SBWHERE ||'GE_ITEMS.id_items_tipo = :id_items_tipo'||CHR(10)||'and ';
        ELSE
            SBHINT := SBHINT ||'            INDEX(GE_ITEMS PK_GE_ITEMS)' ||CHR(10);
            SBWHERE := SBWHERE ||CHR(39)|| NUIDITEMSTIPO ||CHR(39)||' = :id_items_tipo'||CHR(10)||'and ';
        END IF;

        IF NUOPERATINGUNIT != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            IF(     NUIDITEMSSERIADO = CC_BOCONSTANTS.CNUAPPLICATIONNULL
                AND
                    NUITEMSID = CC_BOCONSTANTS.CNUAPPLICATIONNULL
                AND
                    SBSERIE = CC_BOCONSTANTS.CSBNULLSTRING) THEN
                SBHINT := SBHINT ||'            INDEX(GE_ITEMS_SERIADO IDX_GE_ITEMS_SERIADO_02)' ||CHR(10);
            END IF;
            SBWHERE := SBWHERE ||'GE_ITEMS_SERIADO.Operating_Unit_Id = :Operating_Unit_Id'||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUOPERATINGUNIT ||CHR(39)||' = :Operating_Unit_Id'||CHR(10)||'and ';
        END IF;

        IF SBESTADOTECNICO != CC_BOCONSTANTS.CSBAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'upper(GE_ITEMS_SERIADO.Estado_Tecnico) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:Estado_Tecnico)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| SBESTADOTECNICO ||CHR(39)||' = :Estado_Tecnico'||CHR(10)||'and ';
        END IF;

        IF NUIDITEMSESTADOINV != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            IF(     NUIDITEMSSERIADO = CC_BOCONSTANTS.CNUAPPLICATIONNULL
                AND
                    NUITEMSID = CC_BOCONSTANTS.CNUAPPLICATIONNULL
                AND
                    SBSERIE = CC_BOCONSTANTS.CSBNULLSTRING) THEN
                SBHINT := SBHINT ||'            INDEX(GE_ITEMS_SERIADO IX_GE_ITEMS_SERIADO05)' ||CHR(10);
            END IF;
            SBWHERE := SBWHERE ||'GE_ITEMS_SERIADO.Id_Items_Estado_inv = :Id_Items_Estado_inv'||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUIDITEMSESTADOINV ||CHR(39)||' = :Id_Items_Estado_inv'||CHR(10)||'and ';
        END IF;

        IF SBPROPIEDAD != CC_BOCONSTANTS.CSBAPPLICATIONNULL THEN
            SBWHERE := SBWHERE ||'upper(GE_ITEMS_SERIADO.Propiedad) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:Propiedad)||'||CHR(39)||'%'||CHR(39)||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| SBPROPIEDAD ||CHR(39)||' = :Propiedad'||CHR(10)||'and ';
        END IF;

        IF NUNUMEROSERVICIO != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBWHERE := SBWHERE ||' exists ( SELECT /*+ INDEX(ge_empaquetamiento IDX_GE_EMPAQUETAMIENTO_02) */ '||CHR(39)||'x'||CHR(39)||' FROM ge_empaquetamiento '||CHR(10)||
                                '          WHERE ge_items_seriado.id_items_seriado = ge_empaquetamiento.id_items_seriado '||CHR(10)||
                                '          AND ge_empaquetamiento.numero_servicio LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:Numero_Servicio)||'||CHR(39)||'%'||CHR(39)||' ) '||CHR(10)||'and ';
        ELSE
            SBWHERE := SBWHERE ||CHR(39)|| NUNUMEROSERVICIO ||CHR(39)||' = :Numero_Servicio'||CHR(10)||'and ';
        END IF;

        SBHINT := SBHINT ||'        */'||CHR(10);
        SBWHERE := SBWHERE ||'GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID'||CHR(10)||
                             'AND GE_ITEMS.ID_ITEMS_TIPO = GE_ITEMS_TIPO.ID_ITEMS_TIPO'||CHR(10)||
                             'AND GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = OR_ITEM_PATTERN.ID_ITEMS_SERIADO(+)';

        SBSQL := 'SELECT '||SBHINT||CHR(10)|| SBATTRIBUTES ||CHR(10)||
                 'FROM GE_ITEMS_SERIADO,
                       GE_ITEMS,
                       GE_ITEMS_TIPO,
                       OR_ITEM_PATTERN '||CHR(10)||
                 'WHERE '|| SBWHERE;

        
        UT_TRACE.TRACE(SBSQL,20);
        
        OPEN OCUDATACURSOR FOR SBSQL USING
            CC_BOBOSSUTIL.CNUNULL,
            NUIDITEMSSERIADO,
            SBSERIE,
            NUITEMSID,
            NUIDITEMSTIPO,
            NUOPERATINGUNIT,
            SBESTADOTECNICO,
            NUIDITEMSESTADOINV,
            SBPROPIEDAD,
            NUNUMEROSERVICIO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETITEMSSERIADOS;

    
    PROCEDURE ITEMSSERIADOSPORITEM
    (
        INUITEMS_ID IN  GE_ITEMS.ITEMS_ID%TYPE,
        ORFRESULT   OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        FILLITEMSSERIADOSATTRIBUTES;

        SBSQL := '
            SELECT ' || SBATTRIBUTES || '
            FROM    GE_ITEMS_SERIADO,
                    GE_ITEMS,
                    GE_ITEMS_TIPO,
                    OR_ITEM_PATTERN
            WHERE   GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
            AND     GE_ITEMS.ID_ITEMS_TIPO = GE_ITEMS_TIPO.ID_ITEMS_TIPO
            AND     GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = OR_ITEM_PATTERN.ID_ITEMS_SERIADO(+)
            AND     GE_ITEMS_SERIADO.ITEMS_ID = :inuItems_id';

        OPEN ORFRESULT FOR SBSQL USING INUITEMS_ID, INUITEMS_ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    
    PROCEDURE ITEMPORITEMSERIADOS
    (
        INUITEMSERIADO      IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMS_ID         OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE
    )
    IS
    BEGIN
        ONUITEMS_ID := DAGE_ITEMS_SERIADO.FNUGETITEMS_ID(INUITEMSERIADO);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    
    PROCEDURE FILLATTRIBUTESFIELDS
    IS
    BEGIN
        SBATTRIBUTES := '';

        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME','ID', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES, TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ENTITY_ATTRIBUTES.DISPLAY_NAME', 'DISPLAY_NAME', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_TIPO_AT_VAL.VALOR', 'VALOR', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (':PARENT_ID', 'PARENT_ID', CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FILLATTRIBUTESFIELDS;
    
    

    
    PROCEDURE GETITEMSERIADOATTRIBUTES
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_SERIADO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        FILLATTRIBUTESFIELDS;
        SBSQL := ' SELECT ' || SBATTRIBUTES || '
                     FROM  ge_items_tipo_at_val,
                        (  SELECT  ge_items_tipo_atr.id_items_tipo_atr,
                                   ge_items_tipo_atr.entity_attribute_id,
                                   ge_items_tipo_atr.posicion
                             FROM  ge_items_tipo_atr,
                                   ge_items,
                                   ge_items_seriado,
                                   ge_entity_attributes
                            WHERE  ge_items_tipo_atr.id_items_tipo = ge_items.id_items_tipo
                              AND  ge_entity_attributes.entity_attribute_id  = ge_items_tipo_atr.entity_attribute_id
                              AND  ge_items.items_id = ge_items_seriado.items_id
                              AND  ge_items_seriado.id_items_seriado = :inuItemSeriado
                        )  items_tipo_atr,
                           ge_entity_attributes
                    WHERE  items_tipo_atr.entity_attribute_id = ge_entity_attributes.entity_attribute_id
                      AND  items_tipo_atr.id_items_tipo_atr = ge_items_tipo_at_val.id_items_tipo_atr (+)
                      AND  ge_items_tipo_at_val.id_items_seriado (+) = :inuItemSeriado';


        OPEN OCUDATACURSOR FOR SBSQL USING INUIDITEMSSERIADO, INUIDITEMSSERIADO, INUIDITEMSSERIADO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    
    PROCEDURE GETITEMSERIADOATTRIBUTE
    (
        INUIDITEMSTIPOATVAL IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL%TYPE,
        ORFRESULT           OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN
        FILLATTRIBUTESFIELDS;

        SBSQL := 'SELECT ' || SBATTRIBUTES || '
                FROM    GE_ENTITY_ATTRIBUTES,
                        GE_ITEMS_TIPO_ATR,
                        GE_ITEMS_TIPO_AT_VAL
                WHERE   GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID = GE_ITEMS_TIPO_ATR.ENTITY_ATTRIBUTE_ID
                AND     GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR = GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_ATR
                AND     GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL = :nuIdItemsTipoAtVal';

        OPEN ORFRESULT FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUIDITEMSTIPOATVAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE ITEMSERIADOSPORATTRIBUTE
    (
        INUIDITEMSTIPOATVAL IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL%TYPE,
        ONUIDITEMSSERIADO   OUT GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_SERIADO%TYPE
    )
    IS
    BEGIN
        ONUIDITEMSSERIADO := DAGE_ITEMS_TIPO_AT_VAL.FNUGETID_ITEMS_SERIADO(INUIDITEMSTIPOATVAL);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    
    PROCEDURE FILLATTRIBUTESITEMS
    IS
    BEGIN
        SBATTRIBUTES := '';

        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR',  'ID_ITEMS_TIPO_ATR',CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES, TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ENTITY_ATTRIBUTES.DISPLAY_NAME',    'DISPLAY_NAME',     CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME',  'TECHNICAL_NAME',   CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ATTRIBUTES_TYPE.DESCRIPTION',       'DESCRIPTION',      CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ENTITY_ATTRIBUTES.SCALE',           'SCALE',            CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ENTITY_ATTRIBUTES.LENGTH',          'LENGTH',           CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ENTITY_ATTRIBUTES.PRECISION',       'PRECISION',        CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('GE_ITEMS_TIPO_ATR.POSICION',           'POSICION',         CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (':PARENT_ID',      'PARENT_ID',        CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FILLATTRIBUTESITEMS;

    
    PROCEDURE GETITEMATTRIBUTES
    (
        INUIDITEM           IN  GE_ITEMS.ITEMS_ID%TYPE,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN
        FILLATTRIBUTESITEMS;

        SBSQL := ' SELECT ' || SBATTRIBUTES || '
                    FROM GE_ITEMS_TIPO_ATR, GE_ENTITY_ATTRIBUTES, GE_ATTRIBUTES_TYPE, GE_ITEMS
                   WHERE GE_ITEMS_TIPO_ATR.ENTITY_ATTRIBUTE_ID = GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID
                     AND GE_ATTRIBUTES_TYPE.ATTRIBUTE_TYPE_ID = GE_ENTITY_ATTRIBUTES.ATTRIBUTE_TYPE_ID
                     AND GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO = GE_ITEMS.ID_ITEMS_TIPO
                     AND GE_ITEMS.ITEMS_ID = :nuItem
                   ORDER BY GE_ITEMS_TIPO_ATR.POSICION';

        OPEN OCUDATACURSOR FOR SBSQL USING INUIDITEM, INUIDITEM;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;
    

    
    PROCEDURE GETITEMATTRIBUTE
    (
        INUIDITEMSTIPOATT       IN  GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN
        FILLATTRIBUTESITEMS;

        UT_TRACE.TRACE('GetItemAttribute. inuIdItemsTipoAtt: ['||INUIDITEMSTIPOATT||']', 4);

        SBSQL := ' SELECT ' || SBATTRIBUTES || '
                    FROM GE_ITEMS_TIPO_ATR, GE_ENTITY_ATTRIBUTES, GE_ATTRIBUTES_TYPE
                   WHERE GE_ITEMS_TIPO_ATR.ENTITY_ATTRIBUTE_ID = GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID
                     AND GE_ATTRIBUTES_TYPE.ATTRIBUTE_TYPE_ID = GE_ENTITY_ATTRIBUTES.ATTRIBUTE_TYPE_ID
                     AND GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR = :nuIdItemsTipoAtt';

        OPEN ORFRESULT FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUIDITEMSTIPOATT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    
    PROCEDURE ITEMPORATTRIBUTE
    (
        INUIDITEMSTIPOATT   IN  GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE,
        ONUIDITEMS          OUT GE_ITEMS.ITEMS_ID%TYPE
    )
    IS
        CURSOR  CUITEMS IS
        SELECT  GE_ITEMS.ITEMS_ID
          FROM  GE_ITEMS, GE_ITEMS_TIPO_ATR
         WHERE  GE_ITEMS.ID_ITEMS_TIPO = GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO
           AND  GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR = INUIDITEMSTIPOATT
           AND  ROWNUM = 1;

    BEGIN
        IF (CUITEMS%ISOPEN) THEN
            CLOSE CUITEMS;
        END IF;

        OPEN CUITEMS;
        FETCH CUITEMS INTO ONUIDITEMS;
        CLOSE CUITEMS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUITEMS%ISOPEN) THEN
                CLOSE CUITEMS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUITEMS%ISOPEN) THEN
                CLOSE CUITEMS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    PROCEDURE GETOPERATINGSECTORBYZONE
    (
        INUZONE       IN NUMBER,
        OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        FILLOPERATINGSECTORATTRIBUTES;

        SBSQL := 'SELECT '|| SBATTRIBUTES ||CHR(10)||
                 '  FROM '||CHR(10)||
                 '        OR_OPERATING_SECTOR,'||CHR(10)||
                 '        GE_SECTOROPE_ZONA,'||CHR(10)||
                 '        GE_OPERA_SEC_CLASSIF'||CHR(10)||
                 ' WHERE '||CHR(10)||
                 '        GE_SECTOROPE_ZONA.ID_SECTOR_OPERATIVO = OR_OPERATING_SECTOR.OPERATING_SECTOR_ID'||CHR(10)||
                 '        AND OR_OPERATING_SECTOR.OPERA_SEC_CLASSIF_ID = GE_OPERA_SEC_CLASSIF.OPERA_SEC_CLASSIF_ID'||CHR(10)||
                 '        AND GE_SECTOROPE_ZONA.ID_ZONA_OPERATIVA = :NUOPERSEC ';

        UT_TRACE.TRACE(SBSQL);

        OPEN OCUDATACURSOR FOR SBSQL USING INUZONE, INUZONE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


 
















    PROCEDURE FILLZONESATTRIBUTES
    IS
        SBCLASIFZONE                GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        SBATTRIBUTES := '';
        SBCLASIFZONE := 'OR_BOOperating_Zone.getZoneClas(OR_OPERATING_ZONE.OPERATING_ZONE_ID)';
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_ZONE.OPERATING_ZONE_ID','OPERATING_ZONE_ID',
                                    CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES,TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_ZONE.DESCRIPTION','DESCRIPTION',
                                    CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_ZONE.TIME_DISPLACEMENT','TIME_DISPLACEMENT',
                                    CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (SBCLASIFZONE,'ZONE_CLASSIF_ID',CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_ZONE.MANAGE_ROUTE,'''||GE_BOCONSTANTS.CSBYES||''','''||CSBYES||''','''||CSBNO||''')','MANAGE_ROUTE',
                                    CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (':PARENT_ID','PARENT_ID',CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLZONESATTRIBUTES;
    
    
PROCEDURE GETZONE
(
    INUZONE       IN  OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE,
    OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
)
IS

SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

BEGIN
    FILLZONESATTRIBUTES;

    SBSQL := 'select '|| SBATTRIBUTES ||' from OR_OPERATING_ZONE where OR_OPERATING_ZONE.OPERATING_ZONE_ID = :inuZone';

    UT_TRACE.TRACE(SBSQL,10);

    OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUZONE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




























PROCEDURE GETZONES
(
    INUZONE           IN  OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE,
    ISBDESCRIPTION    IN  OR_OPERATING_ZONE.DESCRIPTION%TYPE,
    INUCLASIFF        IN  OR_OPERATING_ZONE.ZONE_CLASSIF_ID%TYPE,
    ISBMANAGEROUTE    IN  OR_OPERATING_ZONE.MANAGE_ROUTE%TYPE,
    OCUDATACURSOR     OUT CONSTANTS.TYREFCURSOR
)
IS

    SBSQL           GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    SBWHERE         GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    NUZONE          OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE;
    SBDESCRIPTION   OR_OPERATING_ZONE.DESCRIPTION%TYPE;
    NUCLASSIF       OR_OPERATING_ZONE.ZONE_CLASSIF_ID%TYPE;
    SBMANAGEROUTE   OR_OPERATING_ZONE.MANAGE_ROUTE%TYPE;
    NUPERSONID      GE_PERSON.PERSON_ID%TYPE;

BEGIN

    NUZONE            := NVL(INUZONE,CC_BOCONSTANTS.CNUAPPLICATIONNULL);
    SBDESCRIPTION     := TRIM (UPPER(NVL(ISBDESCRIPTION, CC_BOCONSTANTS.CSBNULLSTRING )));
    NUCLASSIF         := NVL(INUCLASIFF,CC_BOCONSTANTS.CNUAPPLICATIONNULL);
    SBMANAGEROUTE     := NVL(ISBMANAGEROUTE,CC_BOCONSTANTS.CSBAPPLICATIONNULL);
    SBDESCRIPTION     := CC_BOBOSSUTIL.FSBFIXCRITERION(SBDESCRIPTION);
    SBWHERE           := '';
    NUPERSONID        := GE_BOPERSONAL.FNUGETPERSONID;
    
    IF NUZONE != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        SBWHERE := SBWHERE ||'OR_OPERATING_ZONE.OPERATING_ZONE_ID = '||NUZONE ||CHR(10);
    END IF;
    
    IF SBDESCRIPTION != CC_BOCONSTANTS.CSBNULLSTRING THEN
        IF SBWHERE IS NOT NULL THEN
            SBWHERE := SBWHERE ||' AND ';
        END IF;
        SBWHERE := SBWHERE || ' upper(OR_OPERATING_ZONE.DESCRIPTION) like ''%'|| SBDESCRIPTION || '%''' ||CHR(10);
    END IF;
    
    IF NUCLASSIF != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
        IF SBWHERE IS NOT NULL THEN
            SBWHERE := SBWHERE ||' AND ';
        END IF;
        SBWHERE := SBWHERE || ' OR_OPERATING_ZONE.ZONE_CLASSIF_ID = '|| NUCLASSIF ||CHR(10);
    END IF;
    
    IF SBMANAGEROUTE != CC_BOCONSTANTS.CSBAPPLICATIONNULL THEN
        IF SBWHERE IS NOT NULL THEN
            SBWHERE := SBWHERE ||' AND ';
        END IF;
        SBWHERE := SBWHERE || ' OR_OPERATING_ZONE.MANAGE_ROUTE = '''||SBMANAGEROUTE||''''||CHR(10);
    END IF;


    FILLZONESATTRIBUTES;

    SBSQL := 'SELECT '|| SBATTRIBUTES   || CHR(10) ||
             '  FROM OR_OPERATING_ZONE '|| CHR(10) ||
             ' WHERE '||SBWHERE;
             
    IF OR_BCOPERUNITPERSON.FSBEXISTUNIOPERBYPERS(NUPERSONID) IS NOT NULL THEN
    
        SBSQL := SBSQL                                          || CHR(10) ||
                ' AND OR_OPERATING_ZONE.OPERATING_ZONE_ID IN '  || CHR(10) ||
                '('                                             || CHR(10) ||
                'SELECT /*+ index(OR_operating_unit PK_OR_OPERATING_UNIT)*/' || CHR(10) ||
                '           or_zona_base_adm.operating_zone_id' || CHR(10) ||
                'FROM       or_operating_unit,'                 || CHR(10) ||
                '           or_oper_unit_persons,'              || CHR(10) ||
                '           or_zona_base_adm'                   || CHR(10) ||
                'WHERE      or_zona_base_adm.id_base_administra = or_operating_unit.admin_base_id' || CHR(10) ||
                'AND        or_operating_unit.operating_unit_id = or_oper_unit_persons.operating_unit_id' || CHR(10) ||
                'AND        or_oper_unit_persons.person_id = ' || NUPERSONID || CHR(10) ||
                ')';

    END IF;
    
    SBSQL :=  SBSQL                         || CHR(10) ||
              'Union '                      || CHR(10) ||
              'SELECT   '|| SBATTRIBUTES    || CHR(10) ||
              'FROM     or_operating_zone'  || CHR(10) ||
              'WHERE NOT EXISTS'            || CHR(10) ||
              '('                           || CHR(10) ||
              'SELECT   or_zona_base_adm.operating_zone_id' || CHR(10) ||
              'FROM     or_zona_base_adm'   || CHR(10) ||
              'WHERE    or_zona_base_adm.operating_zone_id = or_operating_zone.operating_zone_id' || CHR(10) ||
              ')'    || CHR(10) ||
              'AND ' || CHR(10) || SBWHERE;


    UT_TRACE.TRACE('SQL: '||SBSQL,10);

    OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL,CC_BOBOSSUTIL.CNUNULL;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETZONEBYBASEADMIN
(
    INUBASE       IN  GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
    OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
)
IS

SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

BEGIN
    FILLZONESATTRIBUTES;

    SBSQL := 'SELECT '|| SBATTRIBUTES ||CHR(10)||
             '  FROM OR_OPERATING_ZONE,'||CHR(10)||
             '       OR_ZONA_BASE_ADM '||CHR(10)||
             ' WHERE OR_OPERATING_ZONE.OPERATING_ZONE_ID = OR_ZONA_BASE_ADM.OPERATING_ZONE_ID '||CHR(10)||
             '   AND OR_ZONA_BASE_ADM.ID_BASE_ADMINISTRA = :inuBase  ';

    UT_TRACE.TRACE(SBSQL,10);

    OPEN OCUDATACURSOR FOR SBSQL USING INUBASE, INUBASE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

    




















    PROCEDURE GETBASEADMINBYZONE
    (
        INUZONE             IN  OR_ZONA_BASE_ADM.OPERATING_ZONE_ID%TYPE,
        ONUBASE             OUT OR_ZONA_BASE_ADM.ID_BASE_ADMINISTRA%TYPE
    )
    IS
        NUPERSONID      GE_PERSON.PERSON_ID%TYPE;
        
        CURSOR CUGETBASEADMIN IS
            SELECT  A.ID_BASE_ADMINISTRA
              FROM  OR_ZONA_BASE_ADM A
             WHERE  A.OPERATING_ZONE_ID = INUZONE
               AND  NOT EXISTS
                            (
                                SELECT  /*+ index(or_zona_base_adm IDX_OR_ZONA_BASE_ADM_02) */
                                       'X'
                                 FROM  OR_ZONA_BASE_ADM
                                WHERE  OR_ZONA_BASE_ADM.OPERATING_ZONE_ID  =  INUZONE
                                  AND  OR_ZONA_BASE_ADM.ID_BASE_ADMINISTRA <> A.ID_BASE_ADMINISTRA
                            )
                    AND EXISTS
                            (
                                    SELECT  /*+ ordered*/
                                            'X'
                                    FROM    OR_OPER_UNIT_PERSONS,
                                            OR_OPERATING_UNIT
                                    WHERE   OR_OPER_UNIT_PERSONS.OPERATING_UNIT_ID = OR_OPERATING_UNIT.OPERATING_UNIT_ID
                                    AND     OR_OPER_UNIT_PERSONS.PERSON_ID = NUPERSONID
                                    AND     OR_OPERATING_UNIT.ADMIN_BASE_ID = A.ID_BASE_ADMINISTRA
                            );

    BEGIN
        NUPERSONID := GE_BOPERSONAL.FNUGETPERSONID;
        ONUBASE := NULL;
        FOR RCBASEADMIN IN CUGETBASEADMIN LOOP
            ONUBASE := RCBASEADMIN.ID_BASE_ADMINISTRA;
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    



    PROCEDURE GETEXEPACTBYUNIT
    (
        INUUNIDAD       IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        OCUDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        UT_TRACE.TRACE('inuUnidad := '||INUUNIDAD);

        OPEN OCUDATACURSOR FOR
            SELECT  GE_ITEMS.ITEMS_ID,
                    GE_ITEMS.DESCRIPTION
            FROM    GE_ITEMS, OR_EXCEP_ACT_UNITRAB
            WHERE   GE_ITEMS.ITEMS_ID = OR_EXCEP_ACT_UNITRAB.ID_ACTIVIDAD
            AND     OR_EXCEP_ACT_UNITRAB.ID_UNIDAD_OPERATIVA = INUUNIDAD;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETEXEPACTBYUNIT;
    
    






















    PROCEDURE ITEMSSERIALBYITEMBAL
    (
        ISBOPEUNIITEMBALID      IN  VARCHAR2,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                       GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        RCOR_OPE_UNI_ITEM_BALA      DAOR_OPE_UNI_ITEM_BALA.STYOR_OPE_UNI_ITEM_BALA;
        NUITEMID                    OR_OPE_UNI_ITEM_BALA.ITEMS_ID%TYPE;
        NUOPERATINGUNITID           OR_OPE_UNI_ITEM_BALA.OPERATING_UNIT_ID%TYPE;
    BEGIN
        IF (ISBOPEUNIITEMBALID IS NOT NULL) THEN
            DAOR_OPE_UNI_ITEM_BALA.ACCKEYBYROWID(ISBOPEUNIITEMBALID);
            RCOR_OPE_UNI_ITEM_BALA := DAOR_OPE_UNI_ITEM_BALA.FRCGETRCDATA;
            NUITEMID := RCOR_OPE_UNI_ITEM_BALA.ITEMS_ID;
            NUOPERATINGUNITID := RCOR_OPE_UNI_ITEM_BALA.OPERATING_UNIT_ID;
        END IF;

        FILLITEMSSERIADOSATTRIBUTES;

        SBSQL := '
            SELECT ' || SBATTRIBUTES || '
            FROM    GE_ITEMS_SERIADO,
                    GE_ITEMS,
                    GE_ITEMS_TIPO,
                    OR_ITEM_PATTERN
            WHERE   GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
            AND     GE_ITEMS.ID_ITEMS_TIPO = GE_ITEMS_TIPO.ID_ITEMS_TIPO
            AND     GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = OR_ITEM_PATTERN.ID_ITEMS_SERIADO(+)
            AND     GE_ITEMS_SERIADO.ITEMS_ID = :nuItemId
            AND     GE_ITEMS_SERIADO.OPERATING_UNIT_ID = :nuOperatingUnitId';

        OPEN ORFRESULT FOR SBSQL USING ISBOPEUNIITEMBALID, NUITEMID, NUOPERATINGUNITID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    

















    PROCEDURE GETACTCOMMTYPE
    (
        INUITEMSCOMMTYPE    IN  GE_ITEMS_COMMTYPE.ITEMS_COMMTYPE_ID%TYPE,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OPEN OCUDATACURSOR FOR
                 SELECT GE_ITEMS_COMMTYPE.ITEMS_COMMTYPE_ID ITEMS_COMMTYPE_ID,
                        DECODE(GE_ITEMS_COMMTYPE.COMMENT_TYPE_ID,NULL,NULL, GE_ITEMS_COMMTYPE.COMMENT_TYPE_ID ||' - '||DAGE_COMMENT_TYPE.FSBGETDESCRIPTION(GE_ITEMS_COMMTYPE.COMMENT_TYPE_ID)) COMMENT_TYPE_ID,
                        DECODE(GE_COMMENT_TYPE.COMMENT_CLASS_ID,NULL,NULL, GE_COMMENT_TYPE.COMMENT_CLASS_ID ||' - '||DAGE_COMMENT_CLASS.FSBGETDESCRIPTION(GE_COMMENT_TYPE.COMMENT_CLASS_ID)) COMMENT_CLASS_ID,
                        NULL PARENT_ID
                 FROM GE_ITEMS_COMMTYPE, GE_COMMENT_TYPE
                 WHERE GE_COMMENT_TYPE.COMMENT_TYPE_ID = GE_ITEMS_COMMTYPE.COMMENT_TYPE_ID
                 AND GE_ITEMS_COMMTYPE.ITEMS_COMMTYPE_ID = INUITEMSCOMMTYPE;
                 
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




















    PROCEDURE GETACTIVITYCOMMTYPES
    (
        INUITEMID       IN  NUMBER,
        OCUDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OPEN OCUDATACURSOR FOR
         SELECT GE_ITEMS_COMMTYPE.ITEMS_COMMTYPE_ID ITEMS_COMMTYPE_ID,
                        DECODE(GE_ITEMS_COMMTYPE.COMMENT_TYPE_ID,NULL,NULL, GE_ITEMS_COMMTYPE.COMMENT_TYPE_ID ||' - '||DAGE_COMMENT_TYPE.FSBGETDESCRIPTION(GE_ITEMS_COMMTYPE.COMMENT_TYPE_ID)) COMMENT_TYPE_ID,
                        DECODE(GE_COMMENT_TYPE.COMMENT_CLASS_ID,NULL,NULL, GE_COMMENT_TYPE.COMMENT_CLASS_ID ||' - '||DAGE_COMMENT_CLASS.FSBGETDESCRIPTION(GE_COMMENT_TYPE.COMMENT_CLASS_ID)) COMMENT_CLASS_ID,
                        INUITEMID PARENT_ID
         FROM GE_ITEMS_COMMTYPE, GE_COMMENT_TYPE, OR_TASK_TYPES_ITEMS
         WHERE GE_COMMENT_TYPE.COMMENT_TYPE_ID = GE_ITEMS_COMMTYPE.COMMENT_TYPE_ID
         AND GE_ITEMS_COMMTYPE.ITEMS_ID = OR_TASK_TYPES_ITEMS.ITEMS_ID
         AND OR_TASK_TYPES_ITEMS.ITEMS_ID  = INUITEMID;
         


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    





    
















    PROCEDURE FILLITEMSSERIADOSGROUPS
    IS
    BEGIN
        SBATTRITEMSGRPS := '';

        CC_BOBOSSUTIL.ADDATTRIBUTE('GE_ITEMS_SERIADO.id_items_seriado','id_items_seriado', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRITEMSGRPS, TBATTRITEMSGRPS, TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE('GE_ITEMS_SERIADO.SERIE','SERIE', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRITEMSGRPS, TBATTRITEMSGRPS);
        CC_BOBOSSUTIL.ADDATTRIBUTE('dage_items.fsbGetCode(ge_items_seriado.items_id) || '' - '' ||ge_items.description ','items', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRITEMSGRPS, TBATTRITEMSGRPS);
        CC_BOBOSSUTIL.ADDATTRIBUTE('(ge_items_tipo.id_items_tipo || '' - ''|| ge_items_tipo.descripcion)','tipo_items', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRITEMSGRPS, TBATTRITEMSGRPS);
        CC_BOBOSSUTIL.ADDATTRIBUTE('(ge_items_estado_inv.id_items_estado_inv|| '' - ''|| ge_items_estado_inv.descripcion)','estado_inventario', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRITEMSGRPS, TBATTRITEMSGRPS);
        CC_BOBOSSUTIL.ADDATTRIBUTE(':PARENT_ID', 'PARENT_ID', CC_BOBOSSUTIL.CNUNUMBER, SBATTRITEMSGRPS, TBATTRITEMSGRPS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FILLITEMSSERIADOSGROUPS;





    

















    PROCEDURE GETITEMSGROUP
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    )
    IS
        
        SBSQL                       GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO OR_BOFW_OrdersConfigurator.GetItemsGroup',20);
        FILLITEMSSERIADOSGROUPS;
        
        SBSQL := 'SELECT '|| SBATTRITEMSGRPS ||
                 ' FROM GE_ITEMS_SERIADO,
                        GE_ITEMS,
                        GE_ITEMS_TIPO,
                        GE_ITEMS_ESTADO_INV
                 WHERE  GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
                 AND    GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV
                 AND    GE_ITEMS.ID_ITEMS_TIPO = GE_ITEMS_TIPO.ID_ITEMS_TIPO
                 AND    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = :inuIdItemsSeriado';


        OPEN OCUDATACURSOR FOR SBSQL USING
            CC_BOBOSSUTIL.CNUNULL, INUIDITEMSSERIADO;

        UT_TRACE.TRACE('FIN OR_BOFW_OrdersConfigurator.GetItemsGroup',20);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMSGROUP;
    
    























    PROCEDURE GETITEMSGROUPSCHILD
    (
        INUIDITEMSSERIADO    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUDATACURSOR        OUT CONSTANTS.TYREFCURSOR
    )
    IS
        
        SBSQL               GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        NUITEMSTIPO         GE_ITEMS_TIPO.ID_ITEMS_TIPO%TYPE;

        CURSOR CUTYPEITEMS
        IS
            SELECT GE_ITEMS.ID_ITEMS_TIPO
            FROM GE_ITEMS, GE_ITEMS_SERIADO
            WHERE GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
            AND GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = INUIDITEMSSERIADO;
        
        PROCEDURE CLOSETYPITEMS IS BEGIN
            IF CUTYPEITEMS%ISOPEN THEN CLOSE CUTYPEITEMS; END IF;
        END;
        
    BEGIN
        
        UT_TRACE.TRACE('INICIO OR_BOFW_OrdersConfigurator.GetItemsGroupsChild',20);
        
        FILLITEMSSERIADOSGROUPS;

        CLOSETYPITEMS;
        
        OPEN CUTYPEITEMS;
        FETCH CUTYPEITEMS INTO NUITEMSTIPO;
        CLOSE CUTYPEITEMS;
        
        IF (NUITEMSTIPO = GE_BOITEMSCONSTANTS.CNUGROUP_TYPEITEMS) THEN
            
            SBSQL := ' SELECT '|| SBATTRITEMSGRPS || CHR(10)||
                     ' FROM GE_ITEMS_GROUP, ' || CHR(10)||
                     '      GE_ITEMS_SERIADO, ' || CHR(10)||
                     '      GE_ITEMS, ' || CHR(10)||
                     '      GE_ITEMS_TIPO, ' || CHR(10)||
                     '      GE_ITEMS_ESTADO_INV ' || CHR(10)||
                     ' WHERE 1=1 ' || CHR(10)||
                     ' AND GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID ' || CHR(10)||
                     ' AND GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV' || CHR(10)||
                     ' AND GE_ITEMS.ID_ITEMS_TIPO = GE_ITEMS_TIPO.ID_ITEMS_TIPO' || CHR(10)||
                     ' AND GE_ITEMS_GROUP.ID_ITEMS_SERIADO = GE_ITEMS_SERIADO.ID_ITEMS_SERIADO' || CHR(10)||
                     ' AND GE_ITEMS_GROUP.ID_ITEMS_SER_GROUP = :INUITEMSSERIADO';
        ELSE
            
            SBSQL := ' SELECT '|| SBATTRITEMSGRPS || CHR(10)||
                     ' FROM GE_ITEMS_GROUP, ' || CHR(10)||
                     '      GE_ITEMS_SERIADO, ' || CHR(10)||
                     '      GE_ITEMS, ' || CHR(10)||
                     '      GE_ITEMS_TIPO, ' || CHR(10)||
                     '      GE_ITEMS_ESTADO_INV ' || CHR(10)||
                     ' WHERE 1=1 ' || CHR(10)||
                     ' AND GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID ' || CHR(10)||
                     ' AND GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV' || CHR(10)||
                     ' AND GE_ITEMS.ID_ITEMS_TIPO = GE_ITEMS_TIPO.ID_ITEMS_TIPO' || CHR(10)||
                     ' AND GE_ITEMS_GROUP.ID_ITEMS_SER_GROUP = GE_ITEMS_SERIADO.ID_ITEMS_SERIADO' || CHR(10)||
                     ' AND GE_ITEMS_GROUP.ID_ITEMS_SERIADO = :INUITEMSSERIADO';
        END IF;
        
        UT_TRACE.TRACE(SBSQL,10);
        
        OPEN OCUDATACURSOR FOR SBSQL
        USING INUIDITEMSSERIADO, INUIDITEMSSERIADO;


        UT_TRACE.TRACE('FIN OR_BOFW_OrdersConfigurator.GetItemsGroupsChild',20);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSETYPITEMS;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSETYPITEMS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMSGROUPSCHILD;


    

















    PROCEDURE GETITEMGROUPFATHER
    (
        INUITEMSERIADOCHILD     IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMSERIADOFATHER    OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE
    )
    IS
        NUITEMSTIPO         GE_ITEMS_TIPO.ID_ITEMS_TIPO%TYPE;

        CURSOR CUTYPEITEMS
        IS
            SELECT GE_ITEMS.ID_ITEMS_TIPO
            FROM GE_ITEMS, GE_ITEMS_SERIADO
            WHERE GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
            AND GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = INUITEMSERIADOCHILD;

        PROCEDURE CLOSETYPITEMS IS BEGIN
            IF CUTYPEITEMS%ISOPEN THEN CLOSE CUTYPEITEMS; END IF;
        END;

   BEGIN
        
        UT_TRACE.TRACE('INICIO OR_BOFW_OrdersConfigurator.GetItemGroupFather',20);
        CLOSETYPITEMS;

        OPEN CUTYPEITEMS;
        FETCH CUTYPEITEMS INTO NUITEMSTIPO;
        CLOSE CUTYPEITEMS;
        
        IF (NUITEMSTIPO = GE_BOITEMSCONSTANTS.CNUGROUP_TYPEITEMS) THEN
           SELECT GE_ITEMS_GROUP.ID_ITEMS_SERIADO
           INTO ONUITEMSERIADOFATHER
           FROM GE_ITEMS_GROUP
           WHERE GE_ITEMS_GROUP.ID_ITEMS_SER_GROUP = INUITEMSERIADOCHILD;
        ELSE
           SELECT GE_ITEMS_GROUP.ID_ITEMS_SER_GROUP
           INTO ONUITEMSERIADOFATHER
           FROM GE_ITEMS_GROUP
           WHERE GE_ITEMS_GROUP.ID_ITEMS_SERIADO = INUITEMSERIADOCHILD;
        END IF;
        
        UT_TRACE.TRACE('FIN OR_BOFW_OrdersConfigurator.GetItemGroupFather',20);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSETYPITEMS;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSETYPITEMS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMGROUPFATHER;
    
    















    PROCEDURE FILLROUTEATTRIBUTES
    IS
    BEGIN

        SBATTRIBUTES := '';
        CC_BOBOSSUTIL.ADDATTRIBUTE ('or_route.route_id','route_id', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES,TRUE);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('or_route.name','name', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (':parent_id','parent_id',CC_BOBOSSUTIL.CNUNUMBER,SBATTRIBUTES, TBATTRIBUTES);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLROUTEATTRIBUTES;


    
















    PROCEDURE GETROUTESBYZONE
    (
        INUZONEID       IN NUMBER,
        OCUDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        UT_TRACE.TRACE('[INICIO] OR_BOFW_OrdersConfigurator.GetRoutesByZone',10);
        
        FILLROUTEATTRIBUTES;

        SBSQL := 'SELECT /*+ use_nl(or_route)
                      index(or_route_zone ux_or_route_zone01)
                      index(or_route pk_or_route)
                      ordered */'||CHR(10)||
                      SBATTRIBUTES||CHR(10)||
                 ' FROM or_route, or_route_zone '||CHR(10)||
                 '/* Ubicaci�n: OR_BOFW_OrdersConfigurator.GetRoutesByZone */'||CHR(10)||
                 ' WHERE or_route.route_id = or_route_zone.route_id '||CHR(10)||
                 ' AND or_route_zone.operating_zone_id = :nuOperZoneId ';

        UT_TRACE.TRACE('SQL: '||SBSQL);

        OPEN OCUDATACURSOR FOR SBSQL USING INUZONEID, INUZONEID;
        UT_TRACE.TRACE('[FIN] OR_BOFW_OrdersConfigurator.GetRoutesByZone',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETROUTESBYZONE;


    

















    PROCEDURE GETROUTE
    (
        INUROUTEID       IN  OR_ROUTE.ROUTE_ID%TYPE,
        OCUDATACURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN
        FILLROUTEATTRIBUTES;

        SBSQL := ' SELECT '|| SBATTRIBUTES ||CHR(10)||
                 ' FROM or_route '||CHR(10)||
                 ' WHERE or_route.route_id = :inuRouteId ';

        UT_TRACE.TRACE(SBSQL,10);

        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUROUTEID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETROUTE;
    
    
    
    
    
    
    
    
    
    
    
    


















    PROCEDURE GETOPERUNITSBYPROJECT
    (
        INUPROJECT    IN  PM_PROJECT.PROJECT_ID%TYPE,
        OCUCURSOR     OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN
    
        FILLOPERATINGUNITATTRIBUTES;

        SBSQL := 'SELECT /*+ ordered */ '||CHR(10)||
            SBATTRIBUTES||CHR(10)||
            'FROM /*+ OR_BOFW_OrdersConfigurator.GetOperUnitsByProject SAO182383 */ '||CHR(10)||
            ' pm_unit_by_project, '||CHR(10)||
            SBGLOBALFROM;

        
        IF ( GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') ) THEN
            SBSQL := SBSQL||', GE_PHONE_PIN'||CHR(10);
        END IF;

        SBSQL := SBSQL||CHR(10)||'WHERE '||SBGLOBALWHERE||' AND pm_unit_by_project.project_id = :inuProject AND or_operating_unit.operating_unit_id = pm_unit_by_project.operating_unit_id';

        
        IF ( GE_BOENTITY.ISTABLEEXISTING('GE_PHONE_PIN') ) THEN
            SBSQL := SBSQL||' AND ge_phone_pin.phone_pin_id(+) = or_operating_unit.phone_number';
        END IF;
        

        OPEN OCUCURSOR FOR SBSQL USING INUPROJECT, INUPROJECT;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPERUNITSBYPROJECT;
    





















    PROCEDURE GETTRAZABILITY
    (
        INUSERIALITEMID IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOFW_OrdersConfigurator.GetTrazability', 3);

        OPEN OCUCURSOR FOR
            SELECT /*+ index(or_item_pattern PK_OR_ITEM_PATTERN)  */
                   TRACKING, INUSERIALITEMID PARENT_ID
            FROM   /*+ OR_BOFW_OrdersConfigurator.GetTrazability */ OR_ITEM_PATTERN
            WHERE  ID_ITEMS_SERIADO = INUSERIALITEMID
                AND VALID_UNTIL >= TRUNC(SYSDATE);
                
        UT_TRACE.TRACE('FIN OR_BOFW_OrdersConfigurator.GetTrazability', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR OR_BOFW_OrdersConfigurator.GetTrazability', 3);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS OR_BOFW_OrdersConfigurator.GetTrazability', 3);
            RAISE EX.CONTROLLED_ERROR;
    END GETTRAZABILITY;
    
        














    PROCEDURE FILLMOVESHISTORYATTRIBUTES
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN OR_BOFW_OrdersConfigurator.FillMovesHistoryAttributes', 3);

        SBATTRIBUTES := '';
        CC_BOBOSSUTIL.ADDATTRIBUTE('or_uni_item_bala_mov.uni_item_bala_mov_id','uni_item_bala_mov_id',CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES, TRUE);

        CC_BOBOSSUTIL.ADDATTRIBUTE('ge_items_documento.fecha','fecha',CC_BOBOSSUTIL.CNUDATE, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE(
                                    'or_uni_item_bala_mov.operating_unit_id||'||CHR(39)||' - '||CHR(39)||'||or_bobasicdataservices.fsbGetDescOperatingUnit(or_uni_item_bala_mov.operating_unit_id)',
                                    'operating_unit_id',
                                    CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES
                                    );
        CC_BOBOSSUTIL.ADDATTRIBUTE(
                                    'CASE ge_items_documento.document_type_id
                                        WHEN 118 then ge_items_documento.documento_externo
                                        ELSE null
                                    END',
                                    'order_id',
                                    CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES
                                    );
        CC_BOBOSSUTIL.ADDATTRIBUTE(
                                    'or_uni_item_bala_mov.item_moveme_caus_id||'||CHR(39)||' - '||CHR(39)||'||or_item_moveme_caus.description',
                                    'causa',
                                    CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES
                                    );
        CC_BOBOSSUTIL.ADDATTRIBUTE(
                                    'CASE movement_type
                                        WHEN '||CHR(39)||'I'||CHR(39)||' THEN '||CHR(39)||'I - Aumenta'||CHR(39)||'
                                        WHEN '||CHR(39)||'D'||CHR(39)||' THEN '||CHR(39)||'D - Disminuye'||CHR(39)||'
                                        WHEN '||CHR(39)||'N'||CHR(39)||' THEN '||CHR(39)||'N - Neutro'||CHR(39)||'
                                        ELSE movement_type||'||CHR(39)||' - '||CHR(39)||'
                                    END',
                                    'movement_type',
                                    CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES
                                    );
        CC_BOBOSSUTIL.ADDATTRIBUTE(
                                    'or_uni_item_bala_mov.target_oper_unit_id||'||CHR(39)||' - '||CHR(39)||'|| or_bobasicdataservices.fsbGetDescOperatingUnit(or_uni_item_bala_mov.target_oper_unit_id)',
                                    'target_oper_unit_id',
                                    CC_BOBOSSUTIL.CNUNUMBER, SBATTRIBUTES, TBATTRIBUTES
                                    );
        CC_BOBOSSUTIL.ADDATTRIBUTE (':parent_id','parent_id',CC_BOBOSSUTIL.CNUNUMBER,SBATTRIBUTES, TBATTRIBUTES);

        UT_TRACE.TRACE('END OR_BOFW_OrdersConfigurator.FillMovesHistoryAttributes', 3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR OR_BOFW_OrdersConfigurator.FillMovesHistoryAttributes', 3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS OR_BOFW_OrdersConfigurator.FillMovesHistoryAttributes', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLMOVESHISTORYATTRIBUTES;

    

















    PROCEDURE GETMOVEHISTORY
    (
        INUMOVEHISTORY  IN  OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE,
        OCUCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        UT_TRACE.TRACE('BEGIN OR_BOFW_OrdersConfigurator.GetMoveHistory', 3);
        UT_TRACE.TRACE('inuMoveHistory ['||INUMOVEHISTORY||']', 3);

        FILLMOVESHISTORYATTRIBUTES;

        SBSQL := 'SELECT '||CHR(10)||
            SBATTRIBUTES||CHR(10)||
            ' FROM /*+ OR_BOFW_OrdersConfigurator.GetMoveHistory*/ '||CHR(10)||
            '       or_uni_item_bala_mov, ge_items_documento, or_item_moveme_caus '||CHR(10)||
            ' WHERE ge_items_documento.id_items_documento = or_uni_item_bala_mov.id_items_documento'||CHR(10)||
            '   AND or_uni_item_bala_mov.item_moveme_caus_id = or_item_moveme_caus.item_moveme_caus_id'||CHR(10)||
            '   AND or_uni_item_bala_mov.uni_item_bala_mov_id = :inuMoveHistory';

        UT_TRACE.TRACE(SBSQL,2);
        OPEN OCUCURSOR FOR SBSQL USING INUMOVEHISTORY, INUMOVEHISTORY;

        UT_TRACE.TRACE('END OR_BOFW_OrdersConfigurator.GetMoveHistory', 3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR OR_BOFW_OrdersConfigurator.GetMoveHistory', 3);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS OR_BOFW_OrdersConfigurator.GetMoveHistory', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETMOVEHISTORY;

    

















    PROCEDURE GETMOVEHISTORYBYSERIALITEM
    (
        INUSERIALITEM   IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        UT_TRACE.TRACE('BEGIN OR_BOFW_OrdersConfigurator.GetMoveHistoryBySerialItem', 3);
        UT_TRACE.TRACE('inuSerialItem ['||INUSERIALITEM||']', 3);

        FILLMOVESHISTORYATTRIBUTES;

        SBSQL := 'SELECT /*+ index(or_uni_item_bala_mov IDX_OR_UNI_ITEM_BALA_MOV_02)
                            index(ge_items_documento PK_GE_ITEMS_DOCUMENTO) */ '||CHR(10)||
            SBATTRIBUTES||CHR(10)||
            ' FROM /*+ OR_BOFW_OrdersConfigurator.GetMoveHistoryBySerialItem*/ '||CHR(10)||
            '       or_uni_item_bala_mov, ge_items_documento, or_item_moveme_caus '||CHR(10)||
            ' WHERE ge_items_documento.id_items_documento = or_uni_item_bala_mov.id_items_documento'||CHR(10)||
            '   AND or_uni_item_bala_mov.item_moveme_caus_id = or_item_moveme_caus.item_moveme_caus_id'||CHR(10)||
            '   AND or_uni_item_bala_mov.id_items_seriado = :inuSerialItem';

        UT_TRACE.TRACE(SBSQL,2);
        OPEN OCUCURSOR FOR SBSQL USING INUSERIALITEM, INUSERIALITEM;

        UT_TRACE.TRACE('END OR_BOFW_OrdersConfigurator.GetMoveHistoryBySerialItem', 3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR OR_BOFW_OrdersConfigurator.GetMoveHistoryBySerialItem', 3);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS OR_BOFW_OrdersConfigurator.GetMoveHistoryBySerialItem', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETMOVEHISTORYBYSERIALITEM;


    

















    PROCEDURE GETSERIALITEMBYMOVEHISTORY
    (
        INUMOVEHISTORY  IN  OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE,
        ONUSERIALITEM   OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN OR_BOFW_OrdersConfigurator.GetSerialItemByMoveHistory', 3);
        UT_TRACE.TRACE('inuMoveHistory ['||INUMOVEHISTORY||']', 3);

        ONUSERIALITEM := DAOR_UNI_ITEM_BALA_MOV.FNUGETID_ITEMS_SERIADO(INUMOVEHISTORY);

        UT_TRACE.TRACE('onuSerialItem ['||ONUSERIALITEM||']', 3);
        UT_TRACE.TRACE('END OR_BOFW_OrdersConfigurator.GetSerialItemByMoveHistory', 3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR OR_BOFW_OrdersConfigurator.GetSerialItemByMoveHistory', 3);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS OR_BOFW_OrdersConfigurator.GetSerialItemByMoveHistory', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSERIALITEMBYMOVEHISTORY;


    



















    PROCEDURE GETACTIVHISTORYBYSERIALITEM
    (
        INUSERIALITEM   IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OCUCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        CNUORDER_STAT_CLOSED    NUMBER := OR_BOCONSTANTS.CNUORDER_STAT_CLOSED;
        CNUITEM_SERIADO_TABLE   NUMBER := GE_BOENTITY.FNUGETENTITY_ID('GE_ITEMS_SERIADO');
    BEGIN

        UT_TRACE.TRACE('BEGIN OR_BOFW_OrdersConfigurator.GetActivHistoryBySerialItem', 3);
        UT_TRACE.TRACE('inuSerialItem ['||INUSERIALITEM||']', 3);

        OPEN OCUCURSOR FOR SELECT  /*+ index (OR_order_activity IDX_OR_ORDER_ACTIVITY16)
                            index (or_order PK_OR_ORDER)*/
                            OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID,
                            OR_ORDER_ACTIVITY.SERIAL_ITEMS_ID,
                            OR_ORDER.EXEC_ESTIMATE_DATE,
                            OR_ORDER_ACTIVITY.ACTIVITY_ID || ' - '|| GE_BOBASICDATASERVICES.FSBGETDESCANYITEM(OR_ORDER_ACTIVITY.ACTIVITY_ID) ACTIVITY_ID,
                            OR_ORDER.ORDER_ID,
                            OR_ORDER.OPERATING_UNIT_ID||' - '|| OR_BOBASICDATASERVICES.FSBGETDESCOPERATINGUNIT(OR_ORDER.OPERATING_UNIT_ID) OPERATING_UNIT_ID,
                            OR_ORDER.CAUSAL_ID||' - '|| GE_BOBASICDATASERVICES.FSBGETDESCCAUSAL(OR_ORDER.CAUSAL_ID) CAUSAL_ID,
                            INUSERIALITEM PARENT_ID
                    FROM    OR_ORDER_ACTIVITY,
                            OR_ORDER
                    WHERE   OR_ORDER_ACTIVITY.ORDER_ID = OR_ORDER.ORDER_ID
                    AND     OR_ORDER.ORDER_STATUS_ID = CNUORDER_STAT_CLOSED
                    AND     OR_ORDER_ACTIVITY.SERIAL_ITEMS_ID = INUSERIALITEM

                    UNION

                    SELECT  OR_ORDER_ITEMS.ORDER_ACTIVITY_ID,
                            OR_ORDER_ITEMS.SERIAL_ITEMS_ID,
                            OR_ORDER.EXEC_ESTIMATE_DATE,
                            OR_ORDER_ACTIVITY.ACTIVITY_ID || ' - '|| GE_BOBASICDATASERVICES.FSBGETDESCANYITEM(OR_ORDER_ACTIVITY.ACTIVITY_ID) ACTIVITY_ID,
                            OR_ORDER.ORDER_ID,
                            OR_ORDER.OPERATING_UNIT_ID||' - '|| OR_BOBASICDATASERVICES.FSBGETDESCOPERATINGUNIT(OR_ORDER.OPERATING_UNIT_ID) OPERATING_UNIT_ID,
                            OR_ORDER.CAUSAL_ID||' - '|| GE_BOBASICDATASERVICES.FSBGETDESCCAUSAL(OR_ORDER.CAUSAL_ID) CAUSAL_ID,
                            INUSERIALITEM PARENT_ID
                    FROM    OR_ORDER_ITEMS,
                            OR_ORDER,
                            OR_ORDER_ACTIVITY
                    WHERE   OR_ORDER_ITEMS.ORDER_ID = OR_ORDER.ORDER_ID
                    AND     OR_ORDER_ITEMS.ORDER_ACTIVITY_ID = OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID
                    AND     OR_ORDER.ORDER_STATUS_ID = CNUORDER_STAT_CLOSED
                    AND     OR_ORDER_ITEMS.SERIAL_ITEMS_ID = INUSERIALITEM

                    UNION

                    SELECT  /*+ index (if_maintenance IDX_IF_MAINTENANCE02)
                                index (or_order PK_OR_ORDER) */
                            IF_MAINTENANCE.ORDER_ACTIVITY_ID,
                            IF_MAINTENANCE.EXTERNAL_ID,
                            IF_MAINTENANCE.EXPECTED_EXEC_DATE,
                            IF_MAINTENANCE.ACTIVITY_ID || ' - '|| GE_BOBASICDATASERVICES.FSBGETDESCANYITEM(IF_MAINTENANCE.ACTIVITY_ID) ACTIVITY_ID,
                            OR_ORDER.ORDER_ID,
                            OR_ORDER.OPERATING_UNIT_ID||' - '|| OR_BOBASICDATASERVICES.FSBGETDESCOPERATINGUNIT(OR_ORDER.OPERATING_UNIT_ID) OPERATING_UNIT_ID,
                            NULL CAUSAL_ID,
                            INUSERIALITEM PARENT_ID
                    FROM    IF_MAINTENANCE,
                            OR_ORDER
                    WHERE   IF_MAINTENANCE.ENTITY_ID = CNUITEM_SERIADO_TABLE
                    AND     IF_MAINTENANCE.ORDER_ID = OR_ORDER.ORDER_ID (+)
                    AND     IF_MAINTENANCE.MAINTENANCE_STATUS IN (1, 2, 7)
                    AND     IF_MAINTENANCE.EXTERNAL_ID = INUSERIALITEM;


        UT_TRACE.TRACE('END OR_BOFW_OrdersConfigurator.GetActivHistoryBySerialItem', 3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR OR_BOFW_OrdersConfigurator.GetActivHistoryBySerialItem', 3);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS OR_BOFW_OrdersConfigurator.GetActivHistoryBySerialItem', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTIVHISTORYBYSERIALITEM;
    
    


















    PROCEDURE GETOPERATINGSECTOR
    (
        INUOPERATINGSECTOR IN NUMBER,
        OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
    )
    IS

    SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

    BEGIN

        OPEN OCUDATACURSOR FOR
            SELECT  /*+ INDEX(OR_OPERATING_SECTOR PK_OR_OPERATING_SECTOR)
                        INDEX(GE_OPERA_SEC_CLASSIF PK_GE_OPERA_SEC_CLASSIF)
                     */
                OR_OPERATING_SECTOR.OPERATING_SECTOR_ID ID_SECTOR_OPERATIVO,
                OR_OPERATING_SECTOR.DESCRIPTION DESCRIPTION,
                DECODE(GE_OPERA_SEC_CLASSIF.OPERA_SEC_CLASSIF_ID, NULL, NULL,
                 GE_OPERA_SEC_CLASSIF.OPERA_SEC_CLASSIF_ID ||' - '||GE_OPERA_SEC_CLASSIF.DESCRIPTION) CLASSIFICATION
                    FROM OR_OPERATING_SECTOR, GE_OPERA_SEC_CLASSIF
                    /*+ OR_BOFW_OrdersConfigurator.GetOperatingSector SAO194140 */
                    WHERE   OR_OPERATING_SECTOR.OPERATING_SECTOR_ID  = INUOPERATINGSECTOR
                    AND     OR_OPERATING_SECTOR.OPERA_SEC_CLASSIF_ID = GE_OPERA_SEC_CLASSIF.OPERA_SEC_CLASSIF_ID;

        UT_TRACE.TRACE('inuOperatingSector:['||TO_CHAR(INUOPERATINGSECTOR)||']',15);
        UT_TRACE.TRACE(SBSQL,15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPERATINGSECTOR;

    
    














    FUNCTION FRFPATTERNITEMSBYUNIT
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CNUNULL_ATTRIBUTE   CONSTANT NUMBER := 2126;
        SBOPERATING_UNIT_ID GE_BOINSTANCECONTROL.STYSBVALUE;
        RFRESULT            CONSTANTS.TYREFCURSOR;
    BEGIN
    
        SBOPERATING_UNIT_ID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('OR_OPERATING_UNIT', 'OPERATING_UNIT_ID');

        
        IF (SBOPERATING_UNIT_ID IS NULL) THEN
            ERRORS.SETERROR (CNUNULL_ATTRIBUTE, 'Unidad');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        RFRESULT := OR_BCLABORDERS.FRFPATTERNITEMSBYUNIT(SBOPERATING_UNIT_ID);
        
        RETURN RFRESULT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFPATTERNITEMSBYUNIT;
    
    














    FUNCTION FRFCERTITEMSBYUNIT
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CNUNULL_ATTRIBUTE   CONSTANT NUMBER := 2126;
        SBOPERATING_UNIT_ID GE_BOINSTANCECONTROL.STYSBVALUE;
        RFRESULT            CONSTANTS.TYREFCURSOR;
    BEGIN
    
        SBOPERATING_UNIT_ID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('OR_OPERATING_UNIT', 'OPERATING_UNIT_ID');

        
        IF (SBOPERATING_UNIT_ID IS NULL) THEN
            ERRORS.SETERROR (CNUNULL_ATTRIBUTE, 'Unidad');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        RFRESULT := OR_BCLABORDERS.FRFCERTITEMSBYUNIT(SBOPERATING_UNIT_ID);

        RETURN RFRESULT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFCERTITEMSBYUNIT;
    

    

















    PROCEDURE CHANGEUNITPATTERN
    (
        INUITEMSERIADOID    IN OR_ITEM_PATTERN.ID_ITEMS_SERIADO%TYPE,
        INUREGISTRO         IN NUMBER,
        INUREGISTROS        IN NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORMSG         OUT VARCHAR2
    )
    IS
        CNUNULL_ATTRIBUTE CONSTANT NUMBER := 2126;

        SBOPERATING_UNIT_ID GE_BOINSTANCECONTROL.STYSBVALUE;

        NUOPERATINGUNITUPD OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        NUOPERUNITPATTERN   OR_ITEM_PATTERN.OPERATING_UNIT_ID%TYPE;

    BEGIN

        
        SBOPERATING_UNIT_ID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('OR_OPERATING_UNIT', 'OPERATING_UNIT_ID');

        
        IF (SBOPERATING_UNIT_ID IS NULL) THEN
            ERRORS.SETERROR (CNUNULL_ATTRIBUTE, 'Unidad');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        NUOPERUNITPATTERN := DAOR_ITEM_PATTERN.FNUGETOPERATING_UNIT_ID(INUITEMSERIADOID);
        
        
        
        IF  NUOPERUNITPATTERN IS NULL OR NUOPERUNITPATTERN <> SBOPERATING_UNIT_ID THEN
            NUOPERATINGUNITUPD := TO_NUMBER(SBOPERATING_UNIT_ID);
        ELSE
        
            NUOPERATINGUNITUPD := NULL;
        END IF;

        DAOR_ITEM_PATTERN.UPDOPERATING_UNIT_ID(INUITEMSERIADOID, NUOPERATINGUNITUPD );
        
        COMMIT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END CHANGEUNITPATTERN;
        


END OR_BOFW_ORDERSCONFIGURATOR;