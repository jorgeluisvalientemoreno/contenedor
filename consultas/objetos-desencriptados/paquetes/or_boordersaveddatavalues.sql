CREATE OR REPLACE PACKAGE BODY OR_BOORDERSAVEDDATAVALUES IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO87044';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE UPADITIONALDATA( INUORDERID IN NUMBER, INUATTRIBUTESETID IN NUMBER, ISBATTRIBUTENAME IN VARCHAR2, ISBATTRIBUTEVALUE IN VARCHAR2 )
    IS
      SBORDERADDDATA OR_ORDER.SAVED_DATA_VALUES%TYPE;
      SBORDERADDDATAFINAL OR_ORDER.SAVED_DATA_VALUES%TYPE;
      SBORDERADDDATAONE OR_ORDER.SAVED_DATA_VALUES%TYPE;
      BLEXIST BOOLEAN := FALSE;
      CNUTWO CONSTANT NUMBER( 1 ) := 2;
      TBSTRING UT_STRING.TYTB_STRING;
      OTBPARAMETER UT_STRING.TYTB_STRPARAMETERS;
      NUCOUNTER NUMBER;
    BEGIN
      UT_TRACE.TRACE( '[OR_BOOrderSavedDataValues.UpAditionalData] INCIO', 2 );
      IF OR_BOORDERATTRIBUTESET.FBLHASAUTOMATICRETRIEVE( INUATTRIBUTESETID ) THEN
         RETURN;
      END IF;
      SBORDERADDDATA := DAOR_ORDER.FSBGETSAVED_DATA_VALUES( INUORDERID );
      IF INSTR( SBORDERADDDATA, CHR( 13 ) || CHR( 10 ) ) > 0 THEN
         SBORDERADDDATA := REPLACE( SBORDERADDDATA, CHR( 13 ) || CHR( 10 ), CHR( 10 ) );
      END IF;
      UT_STRING.EXTSTRING( SBORDERADDDATA, CHR( 10 ), TBSTRING );
      NUCOUNTER := NVL( TBSTRING.COUNT, 0 );
      IF NUCOUNTER = 1 THEN
         SBORDERADDDATAONE := TBSTRING( 1 );
         SBORDERADDDATA := NULL;
       ELSIF NUCOUNTER = CNUTWO THEN
         SBORDERADDDATAONE := TBSTRING( 1 );
         SBORDERADDDATA := TBSTRING( 2 );
       ELSE
         SBORDERADDDATA := NULL;
         SBORDERADDDATAONE := NULL;
      END IF;
      UT_STRING.EXTPARAMETERS( SBORDERADDDATA, ';', '=', OTBPARAMETER );
      UT_TRACE.TRACE( 'Datos extraido:[' || SBORDERADDDATA || ']', 3 );
      UT_TRACE.TRACE( 'Número de registros entrada:' || OTBPARAMETER.COUNT );
      FOR NUCOUNTER IN 1..OTBPARAMETER.COUNT
       LOOP
         UT_TRACE.TRACE( 'nuCounter:' || NUCOUNTER );
         IF OTBPARAMETER.EXISTS( NUCOUNTER ) THEN
            IF ( ISBATTRIBUTENAME = OTBPARAMETER( NUCOUNTER ).SBPARAMETER ) THEN
               OTBPARAMETER( NUCOUNTER ).SBVALUE := ISBATTRIBUTEVALUE;
               BLEXIST := TRUE;
            END IF;
         END IF;
      END LOOP;
      IF NOT BLEXIST THEN
         NUCOUNTER := OTBPARAMETER.COUNT + 1;
         OTBPARAMETER( NUCOUNTER ).SBPARAMETER := ISBATTRIBUTENAME;
         OTBPARAMETER( NUCOUNTER ).SBVALUE := ISBATTRIBUTEVALUE;
         UT_TRACE.TRACE( 'Atributo no existe campo:[' || OTBPARAMETER( NUCOUNTER ).SBPARAMETER || ']', 3 );
         UT_TRACE.TRACE( 'Atributo no existe valor:[' || OTBPARAMETER( NUCOUNTER ).SBVALUE || ']', 3 );
      END IF;
      NUCOUNTER := 0;
      SBORDERADDDATA := NULL;
      UT_TRACE.TRACE( 'Número de registros salida:' || OTBPARAMETER.COUNT );
      FOR NUCOUNTER IN 1..OTBPARAMETER.COUNT
       LOOP
         IF OTBPARAMETER.EXISTS( NUCOUNTER ) THEN
            SBORDERADDDATA := SBORDERADDDATA || OTBPARAMETER( NUCOUNTER ).SBPARAMETER || '=' || OTBPARAMETER( NUCOUNTER ).SBVALUE || ';';
         END IF;
      END LOOP;
      SBORDERADDDATA := SUBSTR( SBORDERADDDATA, 0, LENGTH( SBORDERADDDATA ) - 1 );
      SBORDERADDDATAFINAL := SBORDERADDDATAONE || CHR( 10 ) || SBORDERADDDATA;
      DAOR_ORDER.UPDSAVED_DATA_VALUES( INUORDERID, SBORDERADDDATAFINAL );
      TBSTRING.DELETE;
      OTBPARAMETER.DELETE;
      UT_TRACE.TRACE( '[OR_BOOrderSavedDataValues.UpAditionalData] FIN:' || SBORDERADDDATAFINAL );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDDATAVALUES( INUORDERID IN NUMBER )
    IS
      SBORDERADDDATA OR_ORDER.SAVED_DATA_VALUES%TYPE;
      TBSTRING UT_STRING.TYTB_STRING;
      OTBPARAMETER UT_STRING.TYTB_STRPARAMETERS;
      NUCOUNTER NUMBER;
      CURSOR CUOR_TEMP_DATA( NUORDER_ID IN OR_TEMP_DATA_VALUES.ORDER_ID%TYPE, SBATTNAME IN OR_TEMP_DATA_VALUES.ATTRIBUTE_NAME%TYPE ) IS
SELECT  or_temp_data_values.*,
                    or_temp_data_values.rowid
            from or_temp_data_values
            where or_temp_data_values.order_id = nuOrder_id
            AND or_temp_data_values.attribute_name = sbAttName
            order by or_temp_data_values.consecutive ASC;
    BEGIN
      UT_TRACE.TRACE( '[OR_BOOrderSavedDataValues.UpdDataValues] INCIO', 2 );
      SBORDERADDDATA := DAOR_ORDER.FSBGETSAVED_DATA_VALUES( INUORDERID );
      IF SBORDERADDDATA IS NULL THEN
         RETURN;
      END IF;
      IF INSTR( SBORDERADDDATA, CHR( 13 ) || CHR( 10 ) ) > 0 THEN
         SBORDERADDDATA := REPLACE( SBORDERADDDATA, CHR( 13 ) || CHR( 10 ), CHR( 10 ) );
      END IF;
      UT_STRING.EXTSTRING( SBORDERADDDATA, CHR( 10 ), TBSTRING );
      NUCOUNTER := NVL( TBSTRING.COUNT, 0 );
      IF NUCOUNTER > 1 THEN
         SBORDERADDDATA := TBSTRING( 2 );
       ELSE
         RETURN;
      END IF;
      UT_STRING.EXTPARAMETERS( SBORDERADDDATA, ';', '=', OTBPARAMETER );
      UT_TRACE.TRACE( 'Datos extraido:[' || SBORDERADDDATA || ']', 3 );
      UT_TRACE.TRACE( 'Número de registros entrada:' || OTBPARAMETER.COUNT );
      FOR NUCOUNTER IN 1..OTBPARAMETER.COUNT
       LOOP
         IF OTBPARAMETER.EXISTS( NUCOUNTER ) THEN
            FOR RCQUERY IN CUOR_TEMP_DATA( INUORDERID, OTBPARAMETER( NUCOUNTER ).SBPARAMETER )
             LOOP
               IF NOT OR_BOORDERATTRIBUTESET.FBLHASAUTOMATICRETRIEVE( RCQUERY.ATTRIBUTE_SET_ID ) THEN
                  UPDATE or_temp_data_values
                           SET data_value = otbParameter(nuCounter).sbValue
                         WHERE ORDER_id = inuOrderId
                           AND attribute_set_id = rcQuery.attribute_set_id
                           AND attribute_name = otbParameter(nuCounter).sbParameter;
               END IF;
            END LOOP;
         END IF;
      END LOOP;
      TBSTRING.DELETE;
      OTBPARAMETER.DELETE;
      UT_TRACE.TRACE( '[OR_BOOrderSavedDataValues.UpdDataValues] FIN:' );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETORDERDATAFROMSTRING( INUORDERID IN NUMBER, ONUPERSONID OUT NUMBER, ONUTASKTYPEID OUT NUMBER, ODTEXECSTIMDATA OUT DATE, ONUCAUSALID OUT NUMBER, ODTMAXDATETOLEG OUT DATE )
    IS
      RCORDER DAOR_ORDER.STYOR_ORDER;
      SBORDERDATA VARCHAR2( 2000 );
      SBORDERADDDATA OR_ORDER.SAVED_DATA_VALUES%TYPE;
      TBSTRING UT_STRING.TYTB_STRING;
      OTBPARAMETER UT_STRING.TYTB_STRING;
      NUCOUNTER NUMBER;
    BEGIN
      UT_TRACE.TRACE( '[GetOrderDataFromString] INCIO', 2 );
      SBORDERADDDATA := DAOR_ORDER.FSBGETSAVED_DATA_VALUES( INUORDERID );
      IF SBORDERADDDATA IS NULL THEN
         RETURN;
      END IF;
      IF INSTR( SBORDERADDDATA, CHR( 13 ) || CHR( 10 ) ) > 0 THEN
         SBORDERADDDATA := REPLACE( SBORDERADDDATA, CHR( 13 ) || CHR( 10 ), CHR( 10 ) );
      END IF;
      UT_STRING.EXTSTRING( SBORDERADDDATA, CHR( 10 ), TBSTRING );
      NUCOUNTER := NVL( TBSTRING.COUNT, 0 );
      IF NUCOUNTER > 0 THEN
         SBORDERADDDATA := TBSTRING( 1 );
       ELSE
         RETURN;
      END IF;
      UT_STRING.EXTSTRING( SBORDERADDDATA, ';', OTBPARAMETER );
      UT_TRACE.TRACE( 'Datos extraido:[' || SBORDERADDDATA || ']', 3 );
      UT_TRACE.TRACE( 'Número de registros entrada:' || OTBPARAMETER.COUNT );
      IF OTBPARAMETER.EXISTS( 1 ) THEN
         ONUPERSONID := OTBPARAMETER( 1 );
      END IF;
      IF OTBPARAMETER.EXISTS( 2 ) THEN
         ONUTASKTYPEID := OTBPARAMETER( 2 );
      END IF;
      IF OTBPARAMETER.EXISTS( 3 ) THEN
         ODTEXECSTIMDATA := TO_DATE( OTBPARAMETER( 3 ), UT_DATE.FSBDATE_FORMAT );
      END IF;
      IF OTBPARAMETER.EXISTS( 4 ) THEN
         ONUCAUSALID := OTBPARAMETER( 4 );
      END IF;
      IF OTBPARAMETER.EXISTS( 5 ) THEN
         ODTMAXDATETOLEG := TO_DATE( OTBPARAMETER( 5 ), UT_DATE.FSBDATE_FORMAT );
      END IF;
      UT_TRACE.TRACE( '[GetOrderDataFromString] FIN:' );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBGETORDERVALUES( INUORDER IN OR_ORDER.ORDER_ID%TYPE, INUPERSONID IN OR_TEMP_ORDER_TO_LEG.PERSON_ID%TYPE, INUTASKTYPEID IN OR_ORDER.REAL_TASK_TYPE_ID%TYPE, IDTEXECESTIMATEDATE IN OR_ORDER.EXEC_ESTIMATE_DATE%TYPE, INUCAUSALID IN OR_ORDER.CAUSAL_ID%TYPE, INUMAXDATETOLEGALIZE IN OR_ORDER.MAX_DATE_TO_LEGALIZE%TYPE )
    RETURN VARCHAR2
    IS
      SBDATA OR_ORDER.SAVED_DATA_VALUES%TYPE;
    BEGIN
      UT_TRACE.TRACE( '[fsbGetOrderValues] INICIO inuOrder:' || INUORDER, 3 );
      SBDATA := INUPERSONID || ';' || INUTASKTYPEID || ';' || TO_CHAR( IDTEXECESTIMATEDATE, UT_DATE.FSBDATE_FORMAT ) || ';' || INUCAUSALID || ';' || TO_CHAR( INUMAXDATETOLEGALIZE, UT_DATE.FSBDATE_FORMAT );
      UT_TRACE.TRACE( 'sbData := ' || SBDATA );
      UT_TRACE.TRACE( '[fsbGetOrderValues]FIN sbData:' || SBDATA, 3 );
      RETURN ( SBDATA );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBGETDATAVALUES( INUORDER IN NUMBER, INUCAUSAL IN NUMBER )
    RETURN VARCHAR2
    IS
      TBATRIBUTESSET OR_BOORDERATTRIBUTESET.TYTBATTSETTASTYPACTION;
      RCORDERS DAOR_ORDER.STYOR_ORDER;
      NUACTION GE_ACTION_MODULE.ACTION_ID%TYPE;
      TBATTRIBUTEVALUE OR_BOORDERATTRIBUTESET.TYTBATTRNAME_VALUE;
      SBADDITIONALDATA VARCHAR2( 4000 );
      NUINDEX BINARY_INTEGER;
      NUAUXIDX BINARY_INTEGER;
    BEGIN
      UT_TRACE.TRACE( 'fsbGetDataValues inuOrder:' || INUORDER || '] inuCausal:' || INUCAUSAL || ']' );
      SBADDITIONALDATA := NULL;
      DAOR_ORDER.ACCKEY( INUORDER );
      RCORDERS := DAOR_ORDER.FRCGETRECORD( INUORDER );
      NUACTION := OR_BOLEGALIZEORDER.FNUGETACTIONFORCAUSAL( INUCAUSAL, RCORDERS.ORDER_ID );
      UT_TRACE.TRACE( 'nuAction :' || NUACTION || ']' );
      IF ( TBATRIBUTESSET.COUNT != 0 ) THEN
         NUINDEX := TBATRIBUTESSET.FIRST;
         LOOP
            OR_BOORDERATTRIBUTESET.GETTBATTRNAMEVALUFROMTEMPTAB( RCORDERS.ORDER_ID, TBATRIBUTESSET( NUINDEX ).ATTRIBUTESET, TBATTRIBUTEVALUE );
            IF ( TBATTRIBUTEVALUE.COUNT != 0 AND NOT OR_BOORDERATTRIBUTESET.FBLHASAUTOMATICRETRIEVE( TBATRIBUTESSET( NUINDEX ).ATTRIBUTESET ) ) THEN
               NUAUXIDX := TBATTRIBUTEVALUE.FIRST;
               LOOP
                  SBADDITIONALDATA := SBADDITIONALDATA || TBATTRIBUTEVALUE( NUAUXIDX ).NAME || '=' || TBATTRIBUTEVALUE( NUAUXIDX ).VALUE || ';';
                  EXIT WHEN ( NUAUXIDX = TBATTRIBUTEVALUE.LAST );
                  NUAUXIDX := TBATTRIBUTEVALUE.NEXT( NUAUXIDX );
               END LOOP;
            END IF;
            EXIT WHEN ( NUINDEX = TBATRIBUTESSET.LAST );
            NUINDEX := TBATRIBUTESSET.NEXT( NUINDEX );
         END LOOP;
         SBADDITIONALDATA := SUBSTR( SBADDITIONALDATA, 0, LENGTH( SBADDITIONALDATA ) - 1 );
      END IF;
      RETURN ( SBADDITIONALDATA );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( OR_BCORDER.CUORDERSTATUS%ISOPEN ) THEN
            CLOSE OR_BCORDER.CUORDERSTATUS;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( OR_BCORDER.CUORDERSTATUS%ISOPEN ) THEN
            CLOSE OR_BCORDER.CUORDERSTATUS;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SAVETEMPDATA( INUORDERID IN OR_ORDER.ORDER_ID%TYPE, INUPERSONID IN OR_TEMP_ORDER_TO_LEG.PERSON_ID%TYPE, INUTASKTYPEID IN OR_ORDER.REAL_TASK_TYPE_ID%TYPE, IDTEXECESTIMATEDATE IN OR_ORDER.EXEC_ESTIMATE_DATE%TYPE, INUCAUSALID IN OR_ORDER.CAUSAL_ID%TYPE, INUMAXDATETOLEGALIZE IN OR_ORDER.MAX_DATE_TO_LEGALIZE%TYPE )
    IS
      RCORDER DAOR_ORDER.STYOR_ORDER;
      SBDATA VARCHAR2( 1000 );
    BEGIN
      UT_TRACE.TRACE( 'SaveTempData inuOrder:' || INUORDERID || '] inuCausal:' || INUCAUSALID || ']' );
      OR_BCITEMS.PROCESSITEMINSERTED( INUORDERID );
      RCORDER := DAOR_ORDER.FRCGETRECORD( INUORDERID );
      RCORDER.SAVED_DATA_VALUES := FSBGETORDERVALUES( INUORDERID, INUPERSONID, INUTASKTYPEID, IDTEXECESTIMATEDATE, INUCAUSALID, INUMAXDATETOLEGALIZE );
      RCORDER.SAVED_DATA_VALUES := RCORDER.SAVED_DATA_VALUES || CHR( 10 );
      RCORDER.SAVED_DATA_VALUES := RCORDER.SAVED_DATA_VALUES || FSBGETDATAVALUES( INUORDERID, INUCAUSALID );
      RCORDER.SAVED_DATA_VALUES := RCORDER.SAVED_DATA_VALUES || SBDATA;
      UT_TRACE.TRACE( 'Antes de SaveTempData' );
      DAOR_ORDER.UPDRECORD( RCORDER );
      UT_TRACE.TRACE( 'SaveTempData Termina Ok' );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLEXISTETEMPDATA( INUORDERID IN OR_ORDER.ORDER_ID%TYPE )
    RETURN BOOLEAN
    IS
      SBSAVEDDATAVALUES OR_ORDER.SAVED_DATA_VALUES%TYPE;
      BLRETURN BOOLEAN := FALSE;
    BEGIN
      UT_TRACE.TRACE( 'fblExisteTempData inuOrder:' || INUORDERID, 3 );
      SBSAVEDDATAVALUES := DAOR_ORDER.FSBGETSAVED_DATA_VALUES( INUORDERID );
      IF SBSAVEDDATAVALUES IS NOT NULL THEN
         BLRETURN := TRUE;
       ELSE
         BLRETURN := FALSE;
      END IF;
      UT_TRACE.TRACE( 'fblExisteTempData Termina Ok' );
      RETURN BLRETURN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SAVEITEMS( INUORDERID IN OR_ORDER.ORDER_ID%TYPE )
    IS
      RCORDER DAOR_ORDER.STYOR_ORDER;
      SBDATA VARCHAR2( 1000 );
      SBSAVEDDATAVALUES OR_ORDER.SAVED_DATA_VALUES%TYPE;
    BEGIN
      SBSAVEDDATAVALUES := DAOR_ORDER.FSBGETSAVED_DATA_VALUES( INUORDERID );
      IF SBSAVEDDATAVALUES IS NULL THEN
         SBSAVEDDATAVALUES := '' || CHR( 10 );
         DAOR_ORDER.UPDSAVED_DATA_VALUES( INUORDERID, SBSAVEDDATAVALUES );
      END IF;
      OR_BCITEMS.PROCESSITEMINSERTED( INUORDERID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETORDERDATA( INUORDERID IN NUMBER, INUPOSITION IN NUMBER )
    RETURN VARCHAR2
    IS
      SBORDERADDDATA OR_ORDER.SAVED_DATA_VALUES%TYPE;
      TBSTRING UT_STRING.TYTB_STRING;
      OTBPARAMETER UT_STRING.TYTB_STRING;
      NUCOUNTER NUMBER;
      SBRETURN VARCHAR2( 1000 );
    BEGIN
      UT_TRACE.TRACE( '[fnuGetOrderData] INCIO', 2 );
      SBORDERADDDATA := DAOR_ORDER.FSBGETSAVED_DATA_VALUES( INUORDERID );
      IF SBORDERADDDATA IS NULL THEN
         RETURN NULL;
      END IF;
      IF INSTR( SBORDERADDDATA, CHR( 13 ) || CHR( 10 ) ) > 0 THEN
         SBORDERADDDATA := REPLACE( SBORDERADDDATA, CHR( 13 ) || CHR( 10 ), CHR( 10 ) );
      END IF;
      UT_STRING.EXTSTRING( SBORDERADDDATA, CHR( 10 ), TBSTRING );
      NUCOUNTER := NVL( TBSTRING.COUNT, 0 );
      IF NUCOUNTER > 0 THEN
         SBORDERADDDATA := TBSTRING( 1 );
       ELSE
         RETURN NULL;
      END IF;
      UT_STRING.EXTSTRING( SBORDERADDDATA, ';', OTBPARAMETER );
      UT_TRACE.TRACE( 'Datos extraido:[' || SBORDERADDDATA || ']', 3 );
      UT_TRACE.TRACE( 'Número de registros entrada:' || OTBPARAMETER.COUNT );
      IF OTBPARAMETER.EXISTS( INUPOSITION ) THEN
         SBRETURN := OTBPARAMETER( INUPOSITION );
      END IF;
      UT_TRACE.TRACE( '[fnuGetOrderData] FIN:' );
      RETURN SBRETURN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETPERSONID( INUORDERID IN NUMBER )
    RETURN NUMBER
    IS
    BEGIN
      RETURN FNUGETORDERDATA( INUORDERID, 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETTASKTYPEID( INUORDERID IN NUMBER )
    RETURN NUMBER
    IS
    BEGIN
      RETURN FNUGETORDERDATA( INUORDERID, 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FDTGETEXECSTIMDATA( INUORDERID IN NUMBER )
    RETURN DATE
    IS
    BEGIN
      RETURN TO_DATE( FNUGETORDERDATA( INUORDERID, 3 ), UT_DATE.FSBDATE_FORMAT );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETCAUSALID( INUORDERID IN NUMBER )
    RETURN NUMBER
    IS
    BEGIN
      RETURN FNUGETORDERDATA( INUORDERID, 4 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FDTGETMAXDATETOLEG( INUORDERID IN NUMBER )
    RETURN DATE
    IS
    BEGIN
      RETURN TO_DATE( FNUGETORDERDATA( INUORDERID, 5 ), UT_DATE.FSBDATE_FORMAT );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END OR_BOORDERSAVEDDATAVALUES;
/


