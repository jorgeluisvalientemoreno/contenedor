
CREATE OR REPLACE PACKAGE AU_BOAUDPOLSHEDULE IS
   SCHEDULED_ACTIVE CONSTANT NUMBER( 2 ) := 1;
   PROCEDURE SETAUDPOLSCHEDULEID( INUVALUE IN AU_AUD_POL_SCHEDULE.AUD_POL_SCHEDULE_ID%TYPE );
   PROCEDURE SETAUDPOLICYID( INUVALUE IN AU_AUD_POL_SCHEDULE.AUDIT_POLICY_ID%TYPE );
   PROCEDURE SETINITIALDATE( IDTVALUE IN AU_AUD_POL_SCHEDULE.INITIAL_DATE%TYPE );
   PROCEDURE SETINITIALTIME( IDTVALUE IN AU_AUD_POL_SCHEDULE.INITIAL_TIME%TYPE );
   PROCEDURE SETFINALDATE( IDTVALUE IN AU_AUD_POL_SCHEDULE.FINAL_DATE%TYPE );
   PROCEDURE SETFINALTIME( IDTVALUE IN AU_AUD_POL_SCHEDULE.FINAL_TIME%TYPE );
   PROCEDURE ADDSHEDULE;
   PROCEDURE SETRECORD( SHEDULEROW IN DAAU_AUD_POL_SCHEDULE.STYAU_AUD_POL_SCHEDULE );
   PROCEDURE DELETEBYCODE;
   FUNCTION GETNEXTID
    RETURN NUMBER;
   FUNCTION GETAUDPOLSCHEDULEBYID
    RETURN DAAU_AUD_POL_SCHEDULE.STYAU_AUD_POL_SCHEDULE;
   PROCEDURE UPDATESCHEDULE( SCHEDULE IN DAAU_AUD_POL_SCHEDULE.STYAU_AUD_POL_SCHEDULE );
   PROCEDURE VALIDATEINITIALDATE( IDTINITIALDATE IN DATE );
   PROCEDURE VALIDATEINITIALTIME( IDTINITIALTIME IN DATE );
   PROCEDURE VALIDATEFINALDATE( IDTFINALDATE IN DATE, IDTINITIALDATE IN DATE := NULL );
   PROCEDURE VALIDATEFINALTIME( IDTFINALTIME IN DATE, IDTINITIALTIME IN DATE := NULL );
   PROCEDURE VALIDATEINITIALTOTALDATE( IDTINITIALDATE IN DATE, IDTINITIALTIME IN DATE );
   PROCEDURE VALIDATEFINALDATE( IDTFINALDATE IN DATE, IDTFINALTIME IN DATE, IDTINITIALDATE IN DATE, IDTINITIALTIME IN DATE );
   FUNCTION ISACTIVE( INUPOLICYID IN AU_AUD_POL_SCHEDULE.AUDIT_POLICY_ID%TYPE )
    RETURN NUMBER;
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
END;
/


CREATE OR REPLACE PACKAGE BODY AU_BOAUDPOLSHEDULE IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO94215';
   RCRECORD DAAU_AUD_POL_SCHEDULE.STYAU_AUD_POL_SCHEDULE;
   PROCEDURE SETAUDPOLSCHEDULEID( INUVALUE IN AU_AUD_POL_SCHEDULE.AUD_POL_SCHEDULE_ID%TYPE )
    IS
    BEGIN
      RCRECORD.AUD_POL_SCHEDULE_ID := INUVALUE;
   END;
   PROCEDURE SETAUDPOLICYID( INUVALUE IN AU_AUD_POL_SCHEDULE.AUDIT_POLICY_ID%TYPE )
    IS
    BEGIN
      RCRECORD.AUDIT_POLICY_ID := INUVALUE;
   END;
   PROCEDURE SETINITIALDATE( IDTVALUE IN AU_AUD_POL_SCHEDULE.INITIAL_DATE%TYPE )
    IS
    BEGIN
      RCRECORD.INITIAL_DATE := IDTVALUE;
   END;
   PROCEDURE SETINITIALTIME( IDTVALUE IN AU_AUD_POL_SCHEDULE.INITIAL_TIME%TYPE )
    IS
    BEGIN
      RCRECORD.INITIAL_TIME := IDTVALUE;
   END;
   PROCEDURE SETFINALDATE( IDTVALUE IN AU_AUD_POL_SCHEDULE.FINAL_DATE%TYPE )
    IS
    BEGIN
      RCRECORD.FINAL_DATE := IDTVALUE;
   END;
   PROCEDURE SETFINALTIME( IDTVALUE IN AU_AUD_POL_SCHEDULE.FINAL_TIME%TYPE )
    IS
    BEGIN
      RCRECORD.FINAL_TIME := IDTVALUE;
   END;
   PROCEDURE SETRECORD( SHEDULEROW IN DAAU_AUD_POL_SCHEDULE.STYAU_AUD_POL_SCHEDULE )
    IS
    BEGIN
      RCRECORD := SHEDULEROW;
   END;
   PROCEDURE ADDSHEDULE
    IS
    BEGIN
      DAAU_AUD_POL_SCHEDULE.INSRECORD( RCRECORD );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELETEBYCODE
    IS
    BEGIN
      DAAU_AUD_POL_SCHEDULE.DELRECORD( RCRECORD.AUD_POL_SCHEDULE_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION GETNEXTID
    RETURN NUMBER
    IS
      NUMAX NUMBER;
    BEGIN
      SELECT nvl(MAX(AUD_POL_SCHEDULE_ID),0)
        	INTO nuMax
            FROM AU_AUD_POL_SCHEDULE ;
      IF ( NUMAX = 0 ) THEN
         NUMAX := 1;
       ELSE
         NUMAX := NUMAX + 1;
      END IF;
      RETURN NUMAX;
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION GETAUDPOLSCHEDULEBYID
    RETURN DAAU_AUD_POL_SCHEDULE.STYAU_AUD_POL_SCHEDULE
    IS
    BEGIN
      RETURN DAAU_AUD_POL_SCHEDULE.FRCGETRECORD( RCRECORD.AUD_POL_SCHEDULE_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDATESCHEDULE( SCHEDULE IN DAAU_AUD_POL_SCHEDULE.STYAU_AUD_POL_SCHEDULE )
    IS
    BEGIN
      DAAU_AUD_POL_SCHEDULE.UPDRECORD( SCHEDULE );
   END;
   PROCEDURE VALIDATEINITIALDATE( IDTINITIALDATE IN DATE )
    IS
    BEGIN
      IF ( IDTINITIALDATE IS NULL ) THEN
         ERRORS.SETERROR( AU_BOERRORCONSTANTS.CNUERR2540 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
   END;
   PROCEDURE VALIDATEINITIALTIME( IDTINITIALTIME IN DATE )
    IS
    BEGIN
      IF ( IDTINITIALTIME IS NULL ) THEN
         ERRORS.SETERROR( AU_BOERRORCONSTANTS.CNUERR2569 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
   END;
   PROCEDURE VALIDATEFINALDATE( IDTFINALDATE IN DATE, IDTINITIALDATE IN DATE := NULL )
    IS
    BEGIN
      IF ( IDTFINALDATE IS NULL ) THEN
         ERRORS.SETERROR( AU_BOERRORCONSTANTS.CNUERR2557 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( IDTINITIALDATE IS NOT NULL ) THEN
         IF ( IDTFINALDATE <= IDTINITIALDATE ) THEN
            ERRORS.SETERROR( 1584 );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
   END;
   PROCEDURE VALIDATEFINALDATE( IDTFINALDATE IN DATE, IDTFINALTIME IN DATE, IDTINITIALDATE IN DATE, IDTINITIALTIME IN DATE )
    IS
    BEGIN
      VALIDATEFINALDATE( UT_DATE.GETDATEBYDATEANDTIME( IDTFINALDATE, IDTFINALTIME ), UT_DATE.GETDATEBYDATEANDTIME( IDTINITIALDATE, IDTINITIALTIME ) );
   END;
   PROCEDURE VALIDATEFINALTIME( IDTFINALTIME IN DATE, IDTINITIALTIME IN DATE := NULL )
    IS
    BEGIN
      IF ( IDTFINALTIME IS NULL ) THEN
         ERRORS.SETERROR( AU_BOERRORCONSTANTS.CNUERR2570 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( IDTINITIALTIME IS NOT NULL ) THEN
         IF ( IDTFINALTIME < IDTINITIALTIME ) THEN
            ERRORS.SETERROR( AU_BOERRORCONSTANTS.CNUERR2573 );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
   END;
   PROCEDURE VALIDATEINITIALTOTALDATE( IDTINITIALDATE IN DATE, IDTINITIALTIME IN DATE )
    IS
    BEGIN
      IF ( UT_DATE.GETDATEBYDATEANDTIME( IDTINITIALDATE, IDTINITIALTIME ) < SYSDATE ) THEN
         ERRORS.SETERROR( AU_BOERRORCONSTANTS.CNUERR3300 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
   END;
   FUNCTION ISACTIVE( INUPOLICYID IN AU_AUD_POL_SCHEDULE.AUDIT_POLICY_ID%TYPE )
    RETURN NUMBER
    IS
      NUEXISTE VARCHAR2( 10 );
    BEGIN
      NUEXISTE := 0;
      SELECT 1
        INTO nuExiste
        FROM au_aud_pol_schedule
        WHERE audit_policy_id = inuPolicyId
        AND sysdate between initial_time AND final_time;
      RETURN NUEXISTE;
    EXCEPTION
      WHEN OTHERS THEN
         RETURN 0;
   END;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
END;
/


