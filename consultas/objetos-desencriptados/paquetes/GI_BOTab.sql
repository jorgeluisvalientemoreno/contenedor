PACKAGE BODY GI_BOTab
IS






























































    
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO198875';

    CNUPRODUCTEXECUTABLETY  CONSTANT NUMBER := 11;
    CNUPACKAGEEXECUTABLETY  CONSTANT NUMBER := 3;
    CNUDOTNETEXECUTABLETY   CONSTANT NUMBER := 7;
    CNUEXECUTABLEEXECEXEC   CONSTANT NUMBER := 8;
    CNUCONTEXTMENUEXECTY    CONSTANT NUMBER := 15;
    CNUSTANDALONEPROCEXEC   CONSTANT NUMBER := 14;
    CNUVALIDOPTIONID        CONSTANT NUMBER := -1;
    
    

	
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
	
    












    FUNCTION GETEXECUTABLE (ISBNAME IN SA_EXECUTABLE.NAME%TYPE) RETURN NUMBER
    IS
        NUEXECUTABLEID NUMBER:=NULL;
    BEGIN
        NUEXECUTABLEID := SA_BOEXECUTABLE.FNUGETEXECUTABLEIDBYNAME(ISBNAME, FALSE);
        RETURN  NUEXECUTABLEID;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END;
	
    
    
    
    FUNCTION FSBISVALIDOPTION
    (
       INUEXECUTABLEID    IN  NUMBER
    )
    RETURN VARCHAR2
    IS
        NUERRORCODE     NUMBER;
        SBERRORMESSAGE  VARCHAR2(2000);

    BEGIN

         IF (INUEXECUTABLEID IS NULL) THEN
            RETURN GE_BOCONSTANTS.CSBNO;
         END IF;
         
         SA_BSEXECUTABLEMGR.ISENABLEDTOEXECUTEBYID(INUEXECUTABLEID, NUERRORCODE, SBERRORMESSAGE);

         IF (NUERRORCODE = GE_BOCONSTANTS.CNUSUCCESS ) THEN
            RETURN GE_BOCONSTANTS.CSBYES;
         END IF;

         RETURN GE_BOCONSTANTS.CSBNO;

    	EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    FUNCTION GEPACKAGETYPEIDBYTAGNAME (
                                        ISBTAG_NAME         IN MO_PACKAGES.TAG_NAME%TYPE
                                      )
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
	IS
        NUEXECUTABLEID   SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
	BEGIN
        NUEXECUTABLEID := GETEXECUTABLE(ISBTAG_NAME);
        
        IF NUEXECUTABLEID IS NOT NULL AND DASA_EXECUTABLE.FNUGETEXECUTABLE_TYPE_ID(NUEXECUTABLEID) = CNUPACKAGEEXECUTABLETY THEN
            RETURN PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(ISBTAG_NAME);
        END IF;

        RETURN NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    
    FUNCTION GEPRODUCTTYPEIDBYTAGNAME (
                                        ISBTAG_NAME         IN MO_PACKAGES.TAG_NAME%TYPE
                                      )
    RETURN SERVICIO.SERVCODI%TYPE
	IS
        NUEXECUTABLEID   SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
	BEGIN
        NUEXECUTABLEID := GETEXECUTABLE(ISBTAG_NAME);

        IF NUEXECUTABLEID IS NOT NULL AND DASA_EXECUTABLE.FNUGETEXECUTABLE_TYPE_ID(NUEXECUTABLEID) = CNUPRODUCTEXECUTABLETY THEN
            RETURN PS_BOPRODUCTTYPE.FNUGETPRODUCTTYPEBYTAGNAME(ISBTAG_NAME);
        END IF;
        RETURN NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    














    FUNCTION FSBISSTATUSVALIDNORMAL (
        INUTABID        IN  SA_TAB_OPTION_STATUS.TAB_ID%TYPE,
        INUSTATUSID     IN  SA_TAB_OPTION_STATUS.STATUS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUVALIDSTATUS      SA_TAB_OPTION_STATUS.TAB_OPTION_STATUS_ID%TYPE;
        NUANYSTATUS        NUMBER;

        
        CURSOR CUOPTIONVALIDSTATUS
        IS
         SELECT TAB_OPTION_STATUS_ID
         FROM SA_TAB_OPTION_STATUS
         WHERE TAB_ID = INUTABID
         AND STATUS_ID = INUSTATUSID;

        
        CURSOR CUANYSTATUS
        IS
         SELECT COUNT(TAB_OPTION_STATUS_ID)
         FROM SA_TAB_OPTION_STATUS
         WHERE TAB_ID = INUTABID;


    BEGIN
        UT_TRACE.TRACE('fsbIsStatusValidNormal inuTabId{'||INUTABID||'} inuStatusId{'||INUSTATUSID||'}',1 );
        OPEN CUOPTIONVALIDSTATUS;
         FETCH CUOPTIONVALIDSTATUS INTO  NUVALIDSTATUS;
        CLOSE CUOPTIONVALIDSTATUS;

        OPEN CUANYSTATUS;
         FETCH CUANYSTATUS INTO  NUANYSTATUS;
        CLOSE CUANYSTATUS;

        IF (INUTABID = CNUVALIDOPTIONID) THEN
            RETURN 'Y';
        ELSE
            IF (NUANYSTATUS = GE_BOCONSTANTS.CNUNULLNUM) THEN
                RETURN 'Y';
            ELSE
                IF (NUVALIDSTATUS IS NOT NULL) THEN
                    RETURN 'Y';
                ELSE
                    RETURN 'N';
                END IF;
            END IF;
        END IF;

	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    













    
    FUNCTION FSBISSTATUSVALIDINVERSE (
        INUTABID        IN  SA_TAB_OPTION_STATUS.TAB_ID%TYPE,
        INUSTATUSID     IN  SA_TAB_OPTION_STATUS.STATUS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUVALIDSTATUS      SA_TAB_OPTION_STATUS.TAB_OPTION_STATUS_ID%TYPE;
    
        
        CURSOR CUOPTIONVALIDSTATUS
        IS
         SELECT TAB_OPTION_STATUS_ID
         FROM SA_TAB_OPTION_STATUS
         WHERE TAB_ID = INUTABID
         AND STATUS_ID = INUSTATUSID;
    BEGIN
        UT_TRACE.TRACE('fsbIsStatusValidInverse inuTabId{'||INUTABID||'} inuStatusId{'||INUSTATUSID||'}',1 );
        OPEN CUOPTIONVALIDSTATUS;
        FETCH CUOPTIONVALIDSTATUS INTO  NUVALIDSTATUS;
        CLOSE CUOPTIONVALIDSTATUS;
        IF ( NUVALIDSTATUS IS NULL ) THEN
            RETURN 'Y';
        ELSE
            RETURN 'N';
        END IF;
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    
    FUNCTION FSBISSTATUSVALID (
        INUTABID        IN  SA_TAB_OPTION_STATUS.TAB_ID%TYPE,
        INUSTATUSID     IN  SA_TAB_OPTION_STATUS.STATUS_ID%TYPE,
        IBLSTTUSLOGIC   IN BOOLEAN
    )
    RETURN VARCHAR2
    IS
    BEGIN
        UT_TRACE.TRACE('fsbIsStatusValid inuTabId{'||INUTABID||'} inuStatusId{'||INUSTATUSID||'}',1 );
        
        IF ( IBLSTTUSLOGIC ) THEN
            RETURN FSBISSTATUSVALIDNORMAL( INUTABID, INUSTATUSID );
        ELSE
            RETURN FSBISSTATUSVALIDINVERSE( INUTABID, INUSTATUSID );
        END IF;

	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    




















    PROCEDURE INSERTTEMPRECORD (
                                    INUPACKAGETYPEID        IN  VARCHAR2,
                                    ISBDESCRIPTION          IN  VARCHAR2,
                                    INUCLASSREGISTERID      IN  PS_PACKAGE_TYPE.CLASS_REGISTER_ID%TYPE,
                                    INUEXECUTABLEID         IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                                    INUPRODUCTTYPEID        IN  SERVICIO.SERVCODI%TYPE,
                                    INUEXECUTABLETYPEID     IN  SA_EXECUTABLE.EXECUTABLE_TYPE_ID%TYPE,
                                    INUPARENTEXECUTABLEID   IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                                    INUENTITYID             IN  GE_ENTITY.ENTITY_ID%TYPE,
                                    ISBFORMTYPE             IN  VARCHAR2,
                                    ISBEXPRESSIONNAME       IN  VARCHAR2,
                                    INUSEQUENCE             IN  NUMBER DEFAULT 0
                               )
    IS
        SBSTRING    VARCHAR2(2000):= NULL;
        SBEXENAME   VARCHAR2(2000):= NULL;
    BEGIN
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'PACKAGE_TYPE_ID',INUPACKAGETYPEID);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'DESCRIPTION',ISBDESCRIPTION);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'CLASS_REGISTER_ID',INUCLASSREGISTERID);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'EXECUTABLE_ID',INUEXECUTABLEID);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'PRODUCT_TYPE_ID',INUPRODUCTTYPEID);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'EXECUTABLE_TYPE_ID',INUEXECUTABLETYPEID);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'PARENT_EXECUTABLE_ID',INUPARENTEXECUTABLEID);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'ENTITY_ID',INUENTITYID);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'FORM_TYPE',ISBFORMTYPE);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'EXPRESSION_NAME',ISBEXPRESSIONNAME);
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'SEQUENCE',INUSEQUENCE);
        IF (INUEXECUTABLEID IS NOT NULL AND DASA_EXECUTABLE.FBLEXIST(INUEXECUTABLEID)) THEN
            SBEXENAME := DASA_EXECUTABLE.FSBGETNAME (INUEXECUTABLEID);
        END IF;
        CC_BOCNFQUERIES.SETDATACOLUMN(SBSTRING,'EXECUTABLE_NAME',SBEXENAME);
        CC_BOCNFQUERIES.INSTEMPRECORD(SBSTRING);
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    










    FUNCTION FRCGETDATA
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CUREF    CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN CUREF FOR
        SELECT  UT_STRING.GETPARAMETERVALUE(WORK_STRING,'PACKAGE_TYPE_ID','|')     PACKAGE_TYPE_ID,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'DESCRIPTION','|')         DESCRIPTION,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'CLASS_REGISTER_ID','|')   CLASS_REGISTER_ID,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'EXECUTABLE_ID','|')       EXECUTABLE_ID,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'PRODUCT_TYPE_ID','|')     PRODUCT_TYPE_ID,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'EXECUTABLE_TYPE_ID','|')  EXECUTABLE_TYPE_ID,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'PARENT_EXECUTABLE_ID','|')  PARENT_EXECUTABLE_ID,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'ENTITY_ID','|')  ENTITY_ID,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'FORM_TYPE','|')  FORM_TYPE,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'EXPRESSION_NAME','|')  EXPRESSION_NAME,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'SEQUENCE','|')  SEQUENCE,
                UT_STRING.GETPARAMETERVALUE(WORK_STRING,'EXECUTABLE_NAME','|')  EXECUTABLE_NAME
        FROM   GE_TMP_SELECT
        ORDER BY 2;
        
        RETURN CUREF;
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    





























    PROCEDURE GETOPTIONS    (
                                INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE, 
                                ISBOBJECT       IN VARCHAR2,                         
                                ISBVALUE1       IN VARCHAR2,
                                ISBVALUE2       IN VARCHAR2,
                                INULEVEL        IN NUMBER,
                                INUSTATUS       IN NUMBER,
                                IBLSTTUSLOGIC   IN BOOLEAN DEFAULT TRUE         
                            )
    IS
    
        NUEXECUTABLE           SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
        NUEXECUTABLETYPE       SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
        SBAPLICATION           SA_EXECUTABLE.NAME%TYPE;
        SBDESCRIPTION          SA_EXECUTABLE.DESCRIPTION%TYPE;
        NUPARENTEXECUTABLEID   SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
        NUENTITYID             GE_ENTITY.ENTITY_ID%TYPE;
        NUEXECUTABLETYPEID     SA_EXECUTABLE.EXECUTABLE_TYPE_ID%TYPE;
        NUPACKAGETYPEID        PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
        NUCLASSREGISTERID      PS_PACKAGE_TYPE.CLASS_REGISTER_ID%TYPE;
        NUPRODUCTTYPE          SERVICIO.SERVCODI%TYPE;
        SBACTIVE               PS_PACKAGE_TYPE.ACTIVE%TYPE;
        SBEXPRESSIONNAME       VARCHAR2(2000) := NULL;
        NUOBJECT_ID            NUMBER;
        NUSEQUENCE             NUMBER;
        
	BEGIN

        
        DELETE GE_TMP_SELECT;

        SBAPLICATION := DASA_EXECUTABLE.FSBGETNAME(INUEXECUTABLEID);

        FOR RCPROCESSBYAPPLICATION IN SA_BCTAB.CUPROCESSBYAPPLICATION(SBAPLICATION,ISBOBJECT, ISBVALUE1, ISBVALUE2, INULEVEL) LOOP
            NUEXECUTABLE := GETEXECUTABLE(RCPROCESSBYAPPLICATION.EXECUTABLE);
            NUEXECUTABLETYPE := GETEXECUTABLE(RCPROCESSBYAPPLICATION.TYPE);

            IF  NUEXECUTABLE IS NOT NULL THEN
                NUCLASSREGISTERID       := NULL;
                SBACTIVE                := GE_BOCONSTANTS.CSBYES;
                NUEXECUTABLETYPEID      := DASA_EXECUTABLE.FNUGETEXECUTABLE_TYPE_ID(NUEXECUTABLE);
                NUPARENTEXECUTABLEID    := DASA_EXECUTABLE.FNUGETPARENT_EXECUTABLE_ID(NUEXECUTABLE);
                NUPACKAGETYPEID         := GEPACKAGETYPEIDBYTAGNAME(RCPROCESSBYAPPLICATION.PROCESS_NAME);
                NUPRODUCTTYPE           := GEPRODUCTTYPEIDBYTAGNAME(RCPROCESSBYAPPLICATION.TYPE);
                NUENTITYID              := NULL;
                NUSEQUENCE              := RCPROCESSBYAPPLICATION.SEQUENCE;
                
                
                IF (NUPACKAGETYPEID IS NOT NULL) THEN
                    NUENTITYID := GI_BOFRAMEWORKCONSTANTS.CNUENTITYPS_PACKAGE_TYPE;
                    NUCLASSREGISTERID := DAPS_PACKAGE_TYPE.FNUGETCLASS_REGISTER_ID(NUPACKAGETYPEID);
                    SBACTIVE := DAPS_PACKAGE_TYPE.FSBGETACTIVE(NUPACKAGETYPEID);
                END IF;

                
                IF (NUPARENTEXECUTABLEID= GI_BOFRAMEWORKCONSTANTS.CNUPROFWEXECUTABLE  AND
                    NUEXECUTABLETYPEID =  GI_BOFRAMEWORKCONSTANTS.CNUGROUPEDAPPLICATIONTYPE) THEN
                    NUENTITYID := GI_BOFRAMEWORKCONSTANTS.CNUENTITYEXECUTABLE;
                END IF;


                IF NUPACKAGETYPEID IS NOT NULL THEN
                    SBDESCRIPTION := DAPS_PACKAGE_TYPE.FSBGETDESCRIPTION(NUPACKAGETYPEID);
                ELSE
                    SBDESCRIPTION := DASA_EXECUTABLE.FSBGETDESCRIPTION(NUEXECUTABLE);
                END IF;
                IF (NUPACKAGETYPEID IS NOT NULL AND NUPRODUCTTYPE IS NOT NULL AND RCPROCESSBYAPPLICATION.PROCESS_NAME = 'P_VENTA') THEN
                    SBDESCRIPTION := DAPS_PACKAGE_TYPE.FSBGETDESCRIPTION(NUPACKAGETYPEID)||'-'||
                                     PKTBLSERVICIO.FSBGETDESCRIPTION(NUPRODUCTTYPE);
                END IF;

                IF FSBISVALIDOPTION(NUEXECUTABLE) = GE_BOCONSTANTS.CSBYES AND (
                   FSBISVALIDOPTION(NUEXECUTABLETYPE) = GE_BOCONSTANTS.CSBYES OR RCPROCESSBYAPPLICATION.TYPE IS NULL) AND
                   FSBISSTATUSVALID(RCPROCESSBYAPPLICATION.TAB_ID,INUSTATUS, IBLSTTUSLOGIC) = GE_BOCONSTANTS.CSBYES THEN

                    IF SBACTIVE = GE_BOCONSTANTS.CSBYES THEN
                        
                        IF NUEXECUTABLETYPEID IN (CNUDOTNETEXECUTABLETY, CNUEXECUTABLEEXECEXEC) AND NUPACKAGETYPEID IS NULL THEN
                           NUPACKAGETYPEID := NUEXECUTABLE;
                        END IF;
                        
                        
                        SBEXPRESSIONNAME:= NULL;
                        IF NUEXECUTABLETYPEID IN (CNUSTANDALONEPROCEXEC) AND NUPACKAGETYPEID IS NULL THEN
                           NUPACKAGETYPEID := NUEXECUTABLE;
                           IF DASA_EXECUTABLE.FBLEXIST(NUEXECUTABLE) THEN
                              NUOBJECT_ID := SA_BCTABOBJECT.FNUGETOBJECTIDBYNAME(DASA_EXECUTABLE.FSBGETNAME(NUEXECUTABLE));
                              SBEXPRESSIONNAME := DAGE_OBJECT.FSBGETNAME_(NUOBJECT_ID);
                           END IF;
                        END IF;

                        
                        IF (NUPARENTEXECUTABLEID = GI_BOFRAMEWORKCONSTANTS.CNUPROFWEXECUTABLE ) THEN
                            NUPRODUCTTYPE := NULL;
                        END IF;

                        IF (NUEXECUTABLETYPEID != CNUCONTEXTMENUEXECTY) THEN
                            INSERTTEMPRECORD( NUPACKAGETYPEID,
                                            SBDESCRIPTION,
                                            NUCLASSREGISTERID,
                                             NUEXECUTABLE,
                                             NUPRODUCTTYPE,
                                             NUEXECUTABLETYPEID,
                                             NUPARENTEXECUTABLEID,
                                             NUENTITYID,
                                             NULL,
                                             SBEXPRESSIONNAME,
                                             NUSEQUENCE
                                            );
                        END IF;
                    END IF;
                END IF;
            END IF;
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
	PROCEDURE GETADITIONALAPPOPTION
    (
       ISBOBJECT       IN VARCHAR2
    )
    IS
        TBOBJECTS   UT_STRING.TYTB_STRING;
        NUINDEX     BINARY_INTEGER;

    BEGIN

        IF SA_BOTAB.TBOBJECTSBYTAB.EXISTS(ISBOBJECT) THEN
            UT_STRING.EXTSTRING(SA_BOTAB.TBOBJECTSBYTAB(ISBOBJECT).OBJECTS_ID, ',', TBOBJECTS);

            NUINDEX := TBOBJECTS.FIRST;
            LOOP
                INSERTTEMPRECORD(   TBOBJECTS(NUINDEX),
                                    DAGE_OBJECT.FSBGETDESCRIPTION(TBOBJECTS(NUINDEX)),
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    GI_BOFRAMEWORKCONSTANTS.CNUENTITYEXECUTABLE,
                                    'A',
                                    DAGE_OBJECT.FSBGETNAME_(TBOBJECTS(NUINDEX))
                                );

                EXIT WHEN (NUINDEX = TBOBJECTS.LAST);
                NUINDEX := TBOBJECTS.NEXT(NUINDEX);
            END LOOP;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETADITIONALAPPOPTION;
    
    
    
    
	PROCEDURE GETPROCESSBYAPPLICATION (
                                        INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE, 
                                        ISBOBJECT       IN VARCHAR2,                         
                                        ISBVALUE        IN VARCHAR2,
                                        OCUREF         OUT CONSTANTS.TYREFCURSOR
                                      )
    IS
        TBOBJECTS   UT_STRING.TYTB_STRING;
        NUINDEX     BINARY_INTEGER;

    BEGIN

        GETPROCESSBYAPPLICATION(INUEXECUTABLEID,ISBOBJECT,ISBVALUE,NULL,NULL,OCUREF);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
	PROCEDURE GETPROCESSBYAPPLICATION (
                                        INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE, 
                                        ISBOBJECT       IN VARCHAR2,                         
                                        ISBVALUE        IN VARCHAR2,
                                        ISBPRODUCTTYPETAG    IN SERVICIO.SERVTXML%TYPE DEFAULT NULL,
                                        ISBCOMPONENTTYPETAG  IN PS_COMPONENT_TYPE.TAG_NAME%TYPE DEFAULT NULL,
                                        OCUREF         OUT CONSTANTS.TYREFCURSOR
                                      )
    IS
        TBOBJECTS   UT_STRING.TYTB_STRING;
        NUINDEX     BINARY_INTEGER;

    BEGIN

        UT_TRACE.TRACE('GetProcessByApplication inuExecutableId{'||INUEXECUTABLEID||'} isbObject{'||ISBOBJECT||'} isbValue{'||ISBVALUE||'}',2 );
        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,ISBPRODUCTTYPETAG,ISBCOMPONENTTYPETAG,1,0);
        GETADITIONALAPPOPTION(ISBOBJECT);
        OCUREF:=FRCGETDATA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    PROCEDURE GETOPTIONSPACKAGE (
                                    INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                                    ISBOBJECT       IN VARCHAR2,
                                    INUPACKAGEID    IN VARCHAR2,
                                    OCUREF         OUT CONSTANTS.TYREFCURSOR
                                )
    IS
        SBPACKAGETYPETAG       PS_PACKAGE_TYPE.TAG_NAME%TYPE;
        NUPACKAGETYPEID        PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
        NUPAQSTATUS            MO_PACKAGES.MOTIVE_STATUS_ID%TYPE;
    BEGIN

        NUPACKAGETYPEID     := DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID(TO_NUMBER(INUPACKAGEID));
        SBPACKAGETYPETAG    := DAPS_PACKAGE_TYPE.FSBGETTAG_NAME(NUPACKAGETYPEID);
        NUPAQSTATUS         := DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID);
        
        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,SBPACKAGETYPETAG,NULL,1,NUPAQSTATUS);

        FOR RCPACKAGEFORMS IN SA_BCTAB.CUPACKAGEFORMS(NUPACKAGETYPEID) LOOP
            IF FSBISVALIDOPTION(INUEXECUTABLEID) = GE_BOCONSTANTS.CSBYES THEN
                INSERTTEMPRECORD(   RCPACKAGEFORMS.PACKAGE_TYPE_ID,
                                    RCPACKAGEFORMS.DESCRIPTION,
                                    RCPACKAGEFORMS.CLASS_REGISTER_ID,
                                    RCPACKAGEFORMS.EXECUTABLE_ID,
                                    NULL,
                                    RCPACKAGEFORMS.EXECUTABLE_TYPE_ID,
                                    RCPACKAGEFORMS.PARENT_EXECUTABLE_ID,
                                    RCPACKAGEFORMS.ENTITY_ID,
                                    RCPACKAGEFORMS.FORM_TYPE,
                                    RCPACKAGEFORMS.EXPRESSION_NAME
                                );
            END IF;
        END LOOP;

        OCUREF:=FRCGETDATA;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
    
    
    PROCEDURE GETOPTIONSMOTIVE (
                                    INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                                    ISBOBJECT       IN VARCHAR2,
                                    INUMOTIVEID     IN VARCHAR2,
                                    OCUREF         OUT CONSTANTS.TYREFCURSOR
                               )
    IS
        NUPRODUCTMOTIVEID   PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        SBPRODUCTMOTIVETAG  PS_PRODUCT_MOTIVE.TAG_NAME%TYPE;
        NUMOTSTATUS         MO_MOTIVE.MOTIVE_STATUS_ID%TYPE;
    BEGIN
        NUPRODUCTMOTIVEID  := DAMO_MOTIVE.FNUGETPRODUCT_MOTIVE_ID(TO_NUMBER(INUMOTIVEID));
        SBPRODUCTMOTIVETAG := DAPS_PRODUCT_MOTIVE.FSBGETTAG_NAME(NUPRODUCTMOTIVEID);
        NUMOTSTATUS        := DAMO_MOTIVE.FNUGETMOTIVE_STATUS_ID(TO_NUMBER(INUMOTIVEID));
        
        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,SBPRODUCTMOTIVETAG,NULL,1,NUMOTSTATUS);
        
        FOR RCPRODMOTIVEFORMS IN SA_BCTAB.CUPRODMOTIVEFORMS(NUPRODUCTMOTIVEID) LOOP
            IF FSBISVALIDOPTION(INUEXECUTABLEID) = GE_BOCONSTANTS.CSBYES THEN
                INSERTTEMPRECORD(   RCPRODMOTIVEFORMS.PACKAGE_TYPE_ID,
                                    RCPRODMOTIVEFORMS.DESCRIPTION,
                                    RCPRODMOTIVEFORMS.CLASS_REGISTER_ID,
                                    RCPRODMOTIVEFORMS.EXECUTABLE_ID,
                                    NULL,
                                    RCPRODMOTIVEFORMS.EXECUTABLE_TYPE_ID,
                                    RCPRODMOTIVEFORMS.PARENT_EXECUTABLE_ID,
                                    RCPRODMOTIVEFORMS.ENTITY_ID,
                                    RCPRODMOTIVEFORMS.FORM_TYPE,
                                    RCPRODMOTIVEFORMS.EXPRESSION_NAME
                                );
            END IF;
        END LOOP;
        
        OCUREF:=FRCGETDATA;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    
    PROCEDURE GETOPTIONSMOTIVECOMPONENT (
                                            INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                                            ISBOBJECT       IN VARCHAR2,
                                            INUCOMPONENTID  IN VARCHAR2,
                                            OCUREF         OUT CONSTANTS.TYREFCURSOR
                                        )
    IS
        NUPRODMOTIVECOMPID  PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE;
        SBPRODMOTIVECOMPTAG PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        NUCOMPONENTSTATUS   MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
    BEGIN
        NUPRODMOTIVECOMPID  := DAMO_COMPONENT.FNUGETPROD_MOTIVE_COMP_ID(TO_NUMBER(INUCOMPONENTID));
        SBPRODMOTIVECOMPTAG := DAPS_PROD_MOTIVE_COMP.FSBGETTAG_NAME(NUPRODMOTIVECOMPID);
        NUCOMPONENTSTATUS   := DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(TO_NUMBER(INUCOMPONENTID));
        
        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,SBPRODMOTIVECOMPTAG,NULL,1,NUCOMPONENTSTATUS);

        FOR RCPRODMOTIVEFORMS IN SA_BCTAB.CUPRODCOMPONENTFORMS(NUPRODMOTIVECOMPID) LOOP
            IF FSBISVALIDOPTION(INUEXECUTABLEID) = GE_BOCONSTANTS.CSBYES THEN
                INSERTTEMPRECORD(   RCPRODMOTIVEFORMS.PACKAGE_TYPE_ID,
                                    RCPRODMOTIVEFORMS.DESCRIPTION,
                                    RCPRODMOTIVEFORMS.CLASS_REGISTER_ID,
                                    RCPRODMOTIVEFORMS.EXECUTABLE_ID,
                                    NULL,
                                    RCPRODMOTIVEFORMS.EXECUTABLE_TYPE_ID,
                                    RCPRODMOTIVEFORMS.PARENT_EXECUTABLE_ID,
                                    RCPRODMOTIVEFORMS.ENTITY_ID,
                                    RCPRODMOTIVEFORMS.FORM_TYPE,
                                    RCPRODMOTIVEFORMS.EXPRESSION_NAME
                                );
            END IF;
        END LOOP;

        OCUREF:=FRCGETDATA;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    PROCEDURE GETOPTIONSPRODUCT (
                                    INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                                    ISBOBJECT       IN VARCHAR2,
                                    INUPRODUCTID    IN VARCHAR2,
                                    OCUREF         OUT CONSTANTS.TYREFCURSOR
                                )
    IS
        NUTYPEPRODUCTID     SERVICIO.SERVCODI%TYPE;
        SBTYPEPRODUCTTAG    SERVICIO.SERVTXML%TYPE;
        NUPRODUCTSTATUSID   PR_PRODUCT.PRODUCT_STATUS_ID%TYPE;
        SBNAMEEXE           SA_EXECUTABLE.NAME%TYPE;
    BEGIN
        NUTYPEPRODUCTID     := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(TO_NUMBER(INUPRODUCTID));
        SBTYPEPRODUCTTAG    := PKTBLSERVICIO.FSBGETTAG_NAME(NUTYPEPRODUCTID);
        NUPRODUCTSTATUSID   := DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(TO_NUMBER(INUPRODUCTID));
        SBNAMEEXE           := DASA_EXECUTABLE.FSBGETNAME(INUEXECUTABLEID);
        
        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,SBTYPEPRODUCTTAG,NULL,1,NUPRODUCTSTATUSID);

        FOR RCPRODMOTIVEFORMS IN SA_BCTAB.CUPRODUCTFORMS(NUTYPEPRODUCTID, SBNAMEEXE ) LOOP
            IF FSBISVALIDOPTION(INUEXECUTABLEID) = GE_BOCONSTANTS.CSBYES THEN
                INSERTTEMPRECORD(   RCPRODMOTIVEFORMS.PACKAGE_TYPE_ID,
                                    RCPRODMOTIVEFORMS.DESCRIPTION,
                                    RCPRODMOTIVEFORMS.CLASS_REGISTER_ID,
                                    RCPRODMOTIVEFORMS.EXECUTABLE_ID,
                                    RCPRODMOTIVEFORMS.PRODUCT_TYPE_ID,
                                    RCPRODMOTIVEFORMS.EXECUTABLE_TYPE_ID,
                                    RCPRODMOTIVEFORMS.PARENT_EXECUTABLE_ID,
                                    RCPRODMOTIVEFORMS.ENTITY_ID,
                                    RCPRODMOTIVEFORMS.FORM_TYPE,
                                    RCPRODMOTIVEFORMS.EXPRESSION_NAME
                                );
            END IF;
        END LOOP;
        
        
        NUTYPEPRODUCTID := PS_BOPRODUCTTYPE.FNUGETGENERICO;
        FOR RCPRODMOTIVEFORMS IN SA_BCTAB.CUPRODUCTFORMS(NUTYPEPRODUCTID, SBNAMEEXE) LOOP
            IF FSBISVALIDOPTION(INUEXECUTABLEID) = GE_BOCONSTANTS.CSBYES THEN
                INSERTTEMPRECORD(   RCPRODMOTIVEFORMS.PACKAGE_TYPE_ID,
                                    RCPRODMOTIVEFORMS.DESCRIPTION,
                                    RCPRODMOTIVEFORMS.CLASS_REGISTER_ID,
                                    RCPRODMOTIVEFORMS.EXECUTABLE_ID,
                                    RCPRODMOTIVEFORMS.PRODUCT_TYPE_ID,
                                    RCPRODMOTIVEFORMS.EXECUTABLE_TYPE_ID,
                                    RCPRODMOTIVEFORMS.PARENT_EXECUTABLE_ID,
                                    RCPRODMOTIVEFORMS.ENTITY_ID,
                                    RCPRODMOTIVEFORMS.FORM_TYPE,
                                    RCPRODMOTIVEFORMS.EXPRESSION_NAME
                                );
            END IF;
        END LOOP;

        OCUREF:=FRCGETDATA;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    PROCEDURE GETOPTIONSPRODUCTCOMPONENT (
                                            INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                                            ISBOBJECT       IN VARCHAR2,
                                            INUCOMPONENTID  IN VARCHAR2,
                                            OCUREF         OUT CONSTANTS.TYREFCURSOR
                                         )
    IS
        NUCOMPONENTTYPEID   PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
        SBCOMPONENTTYPETAG  PS_COMPONENT_TYPE.TAG_NAME%TYPE;
        SBPRODUCTTYPETAG    SERVICIO.SERVTXML%TYPE;
        NUCOMPONENTSTATUS   PR_COMPONENT.COMPONENT_STATUS_ID%TYPE;
        SBNAMEEXE           SA_EXECUTABLE.NAME%TYPE;
    BEGIN
        NUCOMPONENTTYPEID  := DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID(TO_NUMBER(INUCOMPONENTID));
        SBCOMPONENTTYPETAG := DAPS_COMPONENT_TYPE.FSBGETTAG_NAME(NUCOMPONENTTYPEID);
        NUCOMPONENTSTATUS  := DAPR_COMPONENT.FNUGETCOMPONENT_STATUS_ID(INUCOMPONENTID);
        SBPRODUCTTYPETAG   := PKTBLSERVICIO.FSBGETTAG_NAME(DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(DAPR_COMPONENT.FNUGETPRODUCT_ID(INUCOMPONENTID)));
        SBNAMEEXE           := DASA_EXECUTABLE.FSBGETNAME(INUEXECUTABLEID);

        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,SBCOMPONENTTYPETAG,SBPRODUCTTYPETAG,2,NUCOMPONENTSTATUS);

        FOR RCPRODMOTIVEFORMS IN SA_BCTAB.CUCOMPONENTFORMS(NUCOMPONENTTYPEID,SBNAMEEXE) LOOP
          IF FSBISVALIDOPTION(INUEXECUTABLEID) = GE_BOCONSTANTS.CSBYES THEN
              INSERTTEMPRECORD( RCPRODMOTIVEFORMS.PACKAGE_TYPE_ID,
                                RCPRODMOTIVEFORMS.DESCRIPTION,
                                RCPRODMOTIVEFORMS.CLASS_REGISTER_ID,
                                RCPRODMOTIVEFORMS.EXECUTABLE_ID,
                                RCPRODMOTIVEFORMS.PRODUCT_TYPE_ID,
                                RCPRODMOTIVEFORMS.EXECUTABLE_TYPE_ID,
                                RCPRODMOTIVEFORMS.PARENT_EXECUTABLE_ID,
                                RCPRODMOTIVEFORMS.ENTITY_ID,
                                RCPRODMOTIVEFORMS.FORM_TYPE,
                                RCPRODMOTIVEFORMS.EXPRESSION_NAME
                              );
          END IF;
        END LOOP;

        OCUREF:=FRCGETDATA;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    
    PROCEDURE GETOPTIONSORDERS (
                                    INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                                    ISBOBJECT       IN VARCHAR2,
                                    ISBORDERID      IN VARCHAR2,
                                    OCUREF          OUT CONSTANTS.TYREFCURSOR
                                )
    IS

        NUORDERSTATUSID     OR_ORDER.ORDER_STATUS_ID%TYPE;

    BEGIN

        NUORDERSTATUSID   := DAOR_ORDER.FNUGETORDER_STATUS_ID(TO_NUMBER(ISBORDERID));
        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,NULL,NULL,1,NUORDERSTATUSID);
        GETADITIONALAPPOPTION(ISBOBJECT);
        OCUREF:=FRCGETDATA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPTIONSORDERS;

    
    PROCEDURE GETOPTIONSADDRESS
    (
        INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ISBOBJECT       IN VARCHAR2,
        ISBADDRESSID    IN VARCHAR2,
        OCUREF          OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBIS_MAIN AB_ADDRESS.IS_MAIN%TYPE;
        NUADDRESSSTATUS NUMBER(1);

    BEGIN
        SBIS_MAIN := DAAB_ADDRESS.FSBGETIS_MAIN(ISBADDRESSID);
        IF SBIS_MAIN = GE_BOCONSTANTS.CSBYES THEN
            NUADDRESSSTATUS := 0;
        ELSE
            NUADDRESSSTATUS := 1;
        END IF;

        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,NULL,NULL,1,NUADDRESSSTATUS);
        GETADITIONALAPPOPTION(ISBOBJECT);
        OCUREF:=FRCGETDATA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPTIONSADDRESS;
    
    
    PROCEDURE GETCONTEXTMENUOPTIONS
        (
            ISBAPPLICATIONNAME IN SA_TAB.APLICA_EXECUTABLE%TYPE,
            OCUREF              OUT CONSTANTS.TYREFCURSOR
        )
    IS
          SBSELECT   VARCHAR2(1000);
    BEGIN
          GI_BCTAB.GETCONTEXTMENUOPTIONS(ISBAPPLICATIONNAME, OCUREF);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCONTEXTMENUOPTIONS;
    

    PROCEDURE GETOPTIONSSUBSCRIBER
    (
        INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ISBOBJECT       IN VARCHAR2,
        ISBSUBSCRIBERID IN VARCHAR2,
        OCUREF          OUT CONSTANTS.TYREFCURSOR
    )
    IS

        NUSUBSCRIBERSTATUSID    GE_SUBSCRIBER.SUBS_STATUS_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('getOptionsSubscriber',1 );
        NUSUBSCRIBERSTATUSID   := DAGE_SUBSCRIBER.FNUGETSUBS_STATUS_ID(TO_NUMBER(ISBSUBSCRIBERID));
        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,NULL,NULL,1,NUSUBSCRIBERSTATUSID,FALSE );
        GETADITIONALAPPOPTION(ISBOBJECT);
        OCUREF:=FRCGETDATA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPTIONSSUBSCRIBER;
	
    PROCEDURE GETOPTIONINFLUENCE (
                                    INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                                    ISBOBJECT       IN VARCHAR2,
                                    ISBINFLUENCEID  IN VARCHAR2,
                                    OCUREF          OUT CONSTANTS.TYREFCURSOR
                                 )
    IS
        SBINFLUENCETYPE IM_ADDR_INFLUENCE.INFLUENCE_TYPE_ID%TYPE;
        NUSTATUS    NUMBER;
    BEGIN
        UT_TRACE.TRACE('getOptionInfluence',10 );
        SBINFLUENCETYPE   := DAIM_ADDR_INFLUENCE.FSBGETINFLUENCE_TYPE_ID(TO_NUMBER(ISBINFLUENCEID));
        IF SBINFLUENCETYPE = IM_BOCONSTANTS.CSBADDRESSINFTYPE THEN
            NUSTATUS := 1;
        ELSIF SBINFLUENCETYPE = IM_BOCONSTANTS.CSBWAYINFTYPE THEN
            NUSTATUS := 2;
        ELSIF SBINFLUENCETYPE = IM_BOCONSTANTS.CSBGEOGRAINFTYPE THEN
            NUSTATUS := 3;
        ELSE
            NUSTATUS := 4;
        END IF;
        
        GETOPTIONS(INUEXECUTABLEID,ISBOBJECT,NULL,NULL,1,NUSTATUS);
        GETADITIONALAPPOPTION(ISBOBJECT);
        OCUREF:=FRCGETDATA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETCONTEXTMENUSECURITY
    (
        ISBAPPLICATIONNAME IN SA_TAB.APLICA_EXECUTABLE%TYPE,
        ORFCONTEXTMENU       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
    
        ORFCONTEXTMENU := GI_BCTAB.FRFGETCONTEXTMENUSECURITY(ISBAPPLICATIONNAME);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETPROCESSCONDITION (
                INUEXECUTABLEID     IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                ISBOBJECT           IN VARCHAR2,
                ISBCOLUMNS          IN VARCHAR2,
                ISBROWDATA          IN VARCHAR2,
                ONUCOUNTFILTER      OUT NUMBER,
                OCUREF              OUT CONSTANTS.TYREFCURSOR
                )
    IS
        SBAPPLICATION            SA_EXECUTABLE.NAME%TYPE;
        NUCOUNTADDCOND          NUMBER;
        NUCOUNTPROCESSCOND      NUMBER;
    BEGIN
        UT_TRACE.TRACE('-- Empezando GetProcessCondition inuExecutableId{'||INUEXECUTABLEID||'} isbObject{'||ISBOBJECT||'}',45 );
        
        UT_TRACE.TRACE('-- Se lanza el proceso que obtiene los procesos por filtro',45 );
        GETOPTIONSCONDITION(INUEXECUTABLEID,ISBOBJECT, ISBCOLUMNS, ISBROWDATA);
        
        UT_TRACE.TRACE('-- Se lanza el proceso que obtiene los datos adicionales por filtro',45 );
        GETADITIONALAPPOPTION(ISBOBJECT, ISBCOLUMNS, ISBROWDATA);

        SBAPPLICATION := DASA_EXECUTABLE.FSBGETNAME(INUEXECUTABLEID);
        UT_TRACE.TRACE('-- Nombre del ejecutable que lanzo el proceso ' || SBAPPLICATION, 45 );

        
        NUCOUNTPROCESSCOND := SA_BCTAB.FNUGETNUMBERCONDITION(SBAPPLICATION, ISBOBJECT );
        UT_TRACE.TRACE('-- La cantidad de procesos con filtro son ' || NUCOUNTPROCESSCOND, 45 );
        
        
        NUCOUNTADDCOND :=   SA_BCTABOBJECT.FNUGETNUMBERCONDITION(ISBOBJECT);
        UT_TRACE.TRACE('-- La cantidad de datos adicionales con filtro son ' || NUCOUNTADDCOND, 45 );
        
        ONUCOUNTFILTER := NUCOUNTPROCESSCOND + NUCOUNTADDCOND;
        
        OCUREF:=FRCGETDATA;
        
        UT_TRACE.TRACE('Terminando GetProcessCondition inuExecutableId{'||INUEXECUTABLEID||'} isbObject{'||ISBOBJECT||'}',45 );
        
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;

            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

   END;


    PROCEDURE GETOPTIONSCONDITION    (
                INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
                ISBOBJECT       IN VARCHAR2,
                ISBCOLUMNS          IN VARCHAR2,
                ISBROWDATA          IN VARCHAR2
    )
    IS

        NUEXECUTABLE           SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
        SBAPLICATION           SA_EXECUTABLE.NAME%TYPE;
        SBDESCRIPTION          SA_EXECUTABLE.DESCRIPTION%TYPE;
        NUPARENTEXECUTABLEID   SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
        NUENTITYID             GE_ENTITY.ENTITY_ID%TYPE;
        NUEXECUTABLETYPEID     SA_EXECUTABLE.EXECUTABLE_TYPE_ID%TYPE;
        NUPACKAGETYPEID        PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
        NUCLASSREGISTERID      PS_PACKAGE_TYPE.CLASS_REGISTER_ID%TYPE;
        SBACTIVE               PS_PACKAGE_TYPE.ACTIVE%TYPE;
        SBEXPRESSIONNAME       VARCHAR2(2000) := NULL;
        NUOBJECT_ID            NUMBER;
        NUSEQUENCE             NUMBER;
        SBCONTINUE             BOOLEAN;

	BEGIN
         UT_TRACE.TRACE(' Iniciando GI_BOTab.getOptionsCondition',45);

        
        DELETE GE_TMP_SELECT;

        SBAPLICATION := DASA_EXECUTABLE.FSBGETNAME(INUEXECUTABLEID);

        FOR RCPROCESSBYAPPLICATION IN SA_BCTAB.CUPROCESSBYTABNAME(SBAPLICATION,ISBOBJECT) LOOP

            UT_TRACE.TRACE('nuExecutable := getExecutable( ' || RCPROCESSBYAPPLICATION.EXECUTABLE || ')',25);
            NUEXECUTABLE := GETEXECUTABLE(RCPROCESSBYAPPLICATION.EXECUTABLE);

            IF  NUEXECUTABLE IS NOT NULL THEN

                NUCLASSREGISTERID       := NULL;
                SBACTIVE                := GE_BOCONSTANTS.CSBYES;
                NUEXECUTABLETYPEID      := DASA_EXECUTABLE.FNUGETEXECUTABLE_TYPE_ID(NUEXECUTABLE);
                NUPARENTEXECUTABLEID    := DASA_EXECUTABLE.FNUGETPARENT_EXECUTABLE_ID(NUEXECUTABLE);
                NUPACKAGETYPEID         := GEPACKAGETYPEIDBYTAGNAME(RCPROCESSBYAPPLICATION.PROCESS_NAME);
                NUENTITYID              := NULL;
                NUSEQUENCE              := RCPROCESSBYAPPLICATION.SEQUENCE;


                
                IF (NUPACKAGETYPEID IS NOT NULL) THEN
                    NUENTITYID := GI_BOFRAMEWORKCONSTANTS.CNUENTITYPS_PACKAGE_TYPE;
                    NUCLASSREGISTERID := DAPS_PACKAGE_TYPE.FNUGETCLASS_REGISTER_ID(NUPACKAGETYPEID);
                    SBACTIVE := DAPS_PACKAGE_TYPE.FSBGETACTIVE(NUPACKAGETYPEID);
                END IF;

                
                IF (NUPARENTEXECUTABLEID= GI_BOFRAMEWORKCONSTANTS.CNUPROFWEXECUTABLE  AND
                    NUEXECUTABLETYPEID =  GI_BOFRAMEWORKCONSTANTS.CNUGROUPEDAPPLICATIONTYPE) THEN
                    NUENTITYID := GI_BOFRAMEWORKCONSTANTS.CNUENTITYEXECUTABLE;
                END IF;


                IF NUPACKAGETYPEID IS NOT NULL THEN
                    SBDESCRIPTION := DAPS_PACKAGE_TYPE.FSBGETDESCRIPTION(NUPACKAGETYPEID);
                ELSE
                    SBDESCRIPTION := DASA_EXECUTABLE.FSBGETDESCRIPTION(NUEXECUTABLE);
                END IF;

                UT_TRACE.TRACE('Valida el proceso con el filtro' || RCPROCESSBYAPPLICATION.CONDITION,25);
                SBCONTINUE := FGETVALIDATECONDITION(RCPROCESSBYAPPLICATION.CONDITION, ISBCOLUMNS, ISBROWDATA );

                IF ( FSBISVALIDOPTION(NUEXECUTABLE) = GE_BOCONSTANTS.CSBYES ) THEN
                    IF ( SBCONTINUE ) THEN

                        IF SBACTIVE = GE_BOCONSTANTS.CSBYES THEN

                            
                            IF NUEXECUTABLETYPEID IN (CNUDOTNETEXECUTABLETY, CNUEXECUTABLEEXECEXEC) AND NUPACKAGETYPEID IS NULL THEN
                                NUPACKAGETYPEID := NUEXECUTABLE;
                            END IF;

                            
                            SBEXPRESSIONNAME:= NULL;
                            IF NUEXECUTABLETYPEID IN (CNUSTANDALONEPROCEXEC) AND NUPACKAGETYPEID IS NULL THEN
                                NUPACKAGETYPEID := NUEXECUTABLE;

                                IF DASA_EXECUTABLE.FBLEXIST(NUEXECUTABLE) THEN
                                    NUOBJECT_ID := SA_BCTABOBJECT.FNUGETOBJECTIDBYNAME(DASA_EXECUTABLE.FSBGETNAME(NUEXECUTABLE));
                                    SBEXPRESSIONNAME := DAGE_OBJECT.FSBGETNAME_(NUOBJECT_ID);
                                END IF;
                            END IF;

                            
                            IF (NUEXECUTABLETYPEID != CNUCONTEXTMENUEXECTY) THEN

                                INSERTTEMPRECORD( NUPACKAGETYPEID,
                                            SBDESCRIPTION,
                                            NUCLASSREGISTERID,
                                             NUEXECUTABLE,
                                             NULL,
                                             NUEXECUTABLETYPEID,
                                             NUPARENTEXECUTABLEID,
                                             NUENTITYID,
                                             NULL,
                                             SBEXPRESSIONNAME,
                                             NUSEQUENCE
                                            );
                            END IF;
                        END IF;
                    END IF;
                ELSE
                    UT_TRACE.TRACE('No cuenta con permisos para visualizar el proceso',25);
                END IF;
            ELSE
                UT_TRACE.TRACE('No existe un Ejecutable con el nombre ' || RCPROCESSBYAPPLICATION.EXECUTABLE,25);
            END IF;
        END LOOP;

        UT_TRACE.TRACE(' Finalizando GI_BOTab.getOptionsCondition',45);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;




	PROCEDURE GETADITIONALAPPOPTION
    (
        ISBOBJECT       IN VARCHAR2,
        ISBCOLUMNS      IN VARCHAR2,
        ISBROWDATA      IN VARCHAR2
    )
    IS
        NUEXECUTABLE    SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE(' Iniciando GI_BOTab.GetAditionalAppOption',45);
        FOR TBADDITIONALDATA IN SA_BCTABOBJECT.CUADDITIONALDATA(ISBOBJECT) LOOP

            UT_TRACE.TRACE('Valida la condici�n para el dato adicional ' || TBADDITIONALDATA.EXECUTABLE_NAME ,25);
            IF ( TBADDITIONALDATA.CONDITION IS NULL OR
                    FGETVALIDATECONDITION(TBADDITIONALDATA.CONDITION, ISBCOLUMNS, ISBROWDATA) ) THEN

                NUEXECUTABLE := GETEXECUTABLE(TBADDITIONALDATA.EXECUTABLE_NAME);


                UT_TRACE.TRACE('Valida los permisos de visualizaci�n del dato adicional ' || TBADDITIONALDATA.EXECUTABLE_NAME ,25);
                IF ( FSBISVALIDOPTION(NUEXECUTABLE) = GE_BOCONSTANTS.CSBYES ) THEN
                    UT_TRACE.TRACE('Es posible visualizar el dato adicional ' || TBADDITIONALDATA.EXECUTABLE_NAME ,25);
                    INSERTTEMPRECORD(   TBADDITIONALDATA.OBJECT_ID,
                                        DASA_EXECUTABLE.FSBGETDESCRIPTION(NUEXECUTABLE), 
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        GI_BOFRAMEWORKCONSTANTS.CNUENTITYEXECUTABLE,
                                        'A',
                                        DAGE_OBJECT.FSBGETNAME_(TBADDITIONALDATA.OBJECT_ID)
                                    );
                END IF;

            END IF;

        END LOOP;
        UT_TRACE.TRACE(' Finalizando GI_BOTab.GetAditionalAppOption',45);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETADITIONALAPPOPTION;



    FUNCTION CONVERTSQL
    (
        ISBSQL              IN VARCHAR2,
        ISBCOLUMNS          IN VARCHAR2,
        ISBROWDATA          IN VARCHAR2
    ) RETURN VARCHAR2
    IS
      TBCOLUMNS     UT_STRING.TYTB_STRING;
      TBROWS        UT_STRING.TYTB_STRING;
      SBSQL         VARCHAR(4000);
    BEGIN
    
     UT_TRACE.TRACE(' Iniciando GI_BOTab.convertSQL',45);

      IF ( ISBSQL IS NOT NULL ) THEN

        UT_STRING.EXTSTRING (UPPER(ISBCOLUMNS),  '|',  TBCOLUMNS);
        UT_STRING.EXTSTRING (UPPER(ISBROWDATA),  '|',  TBROWS);

        SBSQL := UPPER(ISBSQL);

        FOR V_COUNTER IN 1 .. TBCOLUMNS.COUNT LOOP

            IF TBCOLUMNS.EXISTS (V_COUNTER) THEN
                SBSQL := UT_STRING.STRREPLACE( SBSQL, ':' || TBCOLUMNS(V_COUNTER) || ':', '''' || TBROWS(V_COUNTER) || '''');
            END IF;

        END LOOP;

        UT_TRACE.TRACE(' Finalizando GI_BOTab.convertSQL',45);
        RETURN SBSQL;
      END IF;

      UT_TRACE.TRACE(' Finalizando GI_BOTab.convertSQL',45);
      RETURN NULL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;


    FUNCTION FGETVALIDATECONDITION
    (
        ISBSQL              IN VARCHAR2,
        ISBCOLUMNS          IN VARCHAR2,
        ISBROWDATA          IN VARCHAR2
    ) RETURN BOOLEAN
    IS
        SBWHERE         VARCHAR(4000);
        BOFINE          BOOLEAN;
        SBSQL           VARCHAR(4000);
        OCUDATACURSOR   CONSTANTS.TYREFCURSOR;
        NUVALUE         INTEGER;
    BEGIN

        UT_TRACE.TRACE('Iniciando fgetValidateCondition',25);
        SBWHERE := CONVERTSQL(ISBSQL, ISBCOLUMNS, ISBROWDATA);

        UT_TRACE.TRACE('Valida la condici�n ' || SBWHERE,25);
        IF ( SBWHERE IS NOT NULL ) THEN
            SBSQL := 'SELECT 1 FROM dual WHERE ' || SBWHERE;

            OPEN OCUDATACURSOR FOR SBSQL;
            FETCH OCUDATACURSOR INTO  NUVALUE;

            IF ( OCUDATACURSOR%NOTFOUND ) THEN
                UT_TRACE.TRACE('La condici�n no es valida' ,25);
                BOFINE := FALSE;
            ELSE
                UT_TRACE.TRACE('La condici�n es valida' ,25);
                BOFINE := TRUE;
            END IF;

            CLOSE OCUDATACURSOR;

            RETURN BOFINE;
        END IF;

        UT_TRACE.TRACE('No contiene condici�n' ,25);
        RETURN TRUE;

    EXCEPTION
        WHEN OTHERS THEN
        UT_TRACE.TRACE('Error en la definci�n de la consulta ' || ISBSQL,45);
            RETURN FALSE;
    END;

END GI_BOTAB;