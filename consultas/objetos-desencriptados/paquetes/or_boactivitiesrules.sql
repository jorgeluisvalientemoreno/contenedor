PACKAGE BODY Or_boActivitiesRules
IS






























































































	
    CSBVERSION      CONSTANT VARCHAR2(1024) := 'SAO202522';
    
    CNUERROR_INV_STATUS GE_MESSAGE.MESSAGE_ID%TYPE  := 143787;
    CNUERROR_CUOTA_SUP  GE_MESSAGE.MESSAGE_ID%TYPE  := 901051;

    
    CNUERR_EQUIPCOMP    GE_MESSAGE.MESSAGE_ID%TYPE := 117001;

    
    CNUERR13751     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 13751;

    
    
    GNUCOMPONENTPRRET       PR_COMPONENT.COMPONENT_ID%TYPE := NULL;
    
	
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    FUNCTION  FNUGETINITWORKSDATE
    (
        INUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBDATE                  VARCHAR2(1024);
        RCMOTIVE                DAMO_MOTIVE.STYMO_MOTIVE;

    BEGIN
        UT_TRACE.TRACE('Inicia fnuGetInitWorksDate Motivo['||INUMOTIVEID||']',10);

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        
        IF (RCMOTIVE.PROVISIONAL_FLAG = GE_BOCONSTANTS.CSBYES ) THEN
              SBDATE := UT_DATE.FSBSTR_DATE(RCMOTIVE.PROV_INITIAL_DATE);
        ELSE
              SBDATE := UT_DATE.FSBSTR_SYSDATE;
        END IF;


        
        UT_TRACE.TRACE('Fecha ['||SBDATE||']',11);
        RETURN  SBDATE;
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE INISERVNUMBFROMMOT
	IS
		
		NUORDERACTIVITY       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
		NUCOMPONENTID         OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
		SBSERVICENUMBER       MO_COMPONENT.SERVICE_NUMBER%TYPE;
		NUELEMENTID           OR_ORDER_ACTIVITY.ELEMENT_ID%TYPE;
		
	BEGIN

		NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
		NUCOMPONENTID   := DAOR_ORDER_ACTIVITY.FNUGETCOMPONENT_ID(NUORDERACTIVITY);
        UT_TRACE.TRACE(' nuComponentId [ '||NUCOMPONENTID||' ] nuOrderActivity ['||NUORDERACTIVITY||' ]',10);
        SBSERVICENUMBER := DAMO_COMPONENT.FSBGETSERVICE_NUMBER(NUCOMPONENTID);
        NUELEMENTID := IF_BOELEMENTQUERY.FNUGETELEMENTID(IF_BOCONSTANTS.CNUNUMBERELEMENT ,SBSERVICENUMBER);
        DAOR_ORDER_ACTIVITY.UPDELEMENT_ID(NUORDERACTIVITY,NUELEMENTID);
        
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NUELEMENTID);
		
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    PROCEDURE INISERVNUMBFROMPROD
	IS
		
		NUORDERACTIVITY       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
		NUCOMPONENTID         OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
		SBSERVICENUMBER       MO_COMPONENT.SERVICE_NUMBER%TYPE;
		NUELEMENTID           OR_ORDER_ACTIVITY.ELEMENT_ID%TYPE;
        NUPRODUCTID           OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
        NUPRODCOMPONENT       MO_COMPONENT.COMPONENT_ID_PROD%TYPE;
        
	BEGIN

        UT_TRACE.TRACE('INICIO - Or_boActivitiesRules.IniServNumbFromProd',12);

		NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUCOMPONENTID   := DAOR_ORDER_ACTIVITY.FNUGETCOMPONENT_ID(NUORDERACTIVITY);

        IF NUCOMPONENTID IS NOT NULL THEN
            NUPRODCOMPONENT := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(NUCOMPONENTID);
        END IF;
        
		IF (NUPRODCOMPONENT IS NULL) THEN
          NUPRODUCTID       := DAOR_ORDER_ACTIVITY.FNUGETPRODUCT_ID(NUORDERACTIVITY);
          SBSERVICENUMBER   := DAPR_PRODUCT.FSBGETSERVICE_NUMBER(NUPRODUCTID,0);
        ELSE
          SBSERVICENUMBER   := DAPR_COMPONENT.FSBGETSERVICE_NUMBER(NUPRODCOMPONENT);
        END IF;
        
        NUELEMENTID := IF_BOELEMENTQUERY.FNUGETELEMENTID(IF_BOCONSTANTS.CNUNUMBERELEMENT ,SBSERVICENUMBER);

        DAOR_ORDER_ACTIVITY.UPDELEMENT_ID(NUORDERACTIVITY,NUELEMENTID);
        
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NUELEMENTID);
        
        UT_TRACE.TRACE('FIN - Or_boActivitiesRules.IniServNumbFromProd',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE INIEQTCODEFROMPROD
    IS
        NUORDERACTIVITY     OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUMOTIVEID          OR_ORDER_ACTIVITY.MOTIVE_ID%TYPE;
    BEGIN

        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        
        NUMOTIVEID := DAOR_ORDER_ACTIVITY.FNUGETMOTIVE_ID(NUORDERACTIVITY);

        UT_TRACE.TRACE('Or_boActivitiesRules.IniEqtCodeFromProd nuMotiveId['||NUMOTIVEID||']',3);

        FOR RCELEMENTOS IN MO_BCNETWORKELEMENT.CUNETWORKELEMOPERBYMOTICOMP
                                    (
                                        NUMOTIVEID,
                                        PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEQUIPO,
                                        IM_BOCONSTANTS.CNUCATEGORYWITHDRAW
                                    )
        LOOP

            GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(RCELEMENTOS.ELEMENT_ID);
            
        END LOOP;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    

















    PROCEDURE INIBILLINGCICLE
    IS
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;
        NUMOTIVEID      MO_MOTIVE.MOTIVE_ID%TYPE;
        NUSUBSID        MO_MOTIVE.SUBSCRIPTION_ID%TYPE;
        NUCICLEID       CICLO.CICLCODI%TYPE;

        ONUERRORCODE    GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        OSBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
        NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    BEGIN
    
        UT_TRACE.TRACE('Inicia Or_boActivitiesRules.IniBillingCicle',10);

        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        UT_TRACE.TRACE(' nuOrderActivity ['||NUORDERACTIVITY||']',11);

        
        NUMOTIVEID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
        NUPACKAGEID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPACKAGE;
        IF NUMOTIVEID IS NULL THEN
            NUMOTIVEID := MO_BOPACKAGES.FNUGETMAINMOTIVE(NUPACKAGEID);
        END IF;

        UT_TRACE.TRACE('Motivo ['||NUMOTIVEID||']',11);

        
        DAMO_MOTIVE.ACCKEY(NUMOTIVEID);

        
        NUSUBSID := DAMO_MOTIVE.FNUGETSUBSCRIPTION_ID(NUMOTIVEID);

        
        IF NUSUBSID IS NOT NULL THEN
        
            PKSUBSCRIBER.GETBILLINGCYCLE(NUSUBSID,NUCICLEID,ONUERRORCODE,OSBERRORMESSAGE);
            IF ONUERRORCODE <> PKCONSTANTE.EXITO THEN
                ERRORS.SETERROR(ONUERRORCODE,OSBERRORMESSAGE);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        
        END IF;

        
        IF NUCICLEID IS NULL THEN
           NUCICLEID := -1;
        END IF;

        
        UT_TRACE.TRACE('Ciclo ['||NUCICLEID||']',11);

        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NUCICLEID);
        
        UT_TRACE.TRACE('Fin Or_boActivitiesRules.IniBillingCicle',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

























    PROCEDURE VALBILLINGCICLE
    IS
        RCORDERACTIVITY DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;
        NUSUBSCRIPTION  MO_MOTIVE.SUBSCRIPTION_ID%TYPE;
        NUMOTIVEID      MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCICLE         CICLO.CICLCODI%TYPE;
        NUCICLEID       CICLO.CICLCODI%TYPE;
        NUERROR         GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBERROR         GE_ERROR_LOG.DESCRIPTION%TYPE;
        NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        
        ERROR_3337              CONSTANT NUMBER(4) :=  3337;
        ERROR_1521              CONSTANT NUMBER(4) :=  1521;
        
    BEGIN
    
        UT_TRACE.TRACE('Inicia Or_boActivitiesRules.valBillingCicle',10);
        
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        NUCICLEID := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('CICLE_ID' ,NUORDERACTIVITY);

        IF NUCICLEID IS NULL THEN
            UT_TRACE.TRACE('El ciclo de facturaciï¿½n es nulo se retorna ... ',11);
            RETURN;
        END IF;

        UT_TRACE.TRACE('nuOrderActivity ['||NUORDERACTIVITY||'] ciclo nuevo ['||NUCICLEID||']',11);

        
        RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD( NUORDERACTIVITY );
        
        
        IF (RCORDERACTIVITY.MOTIVE_ID IS NOT NULL) THEN
        
            NUMOTIVEID  := RCORDERACTIVITY.MOTIVE_ID;
        ELSE
            
            IF (RCORDERACTIVITY.PACKAGE_ID IS NOT NULL) THEN
            
                NUPACKAGEID := RCORDERACTIVITY.PACKAGE_ID;
                
                NUMOTIVEID  := MO_BOPACKAGES.FRCGETINITIALMOTIVE(NUPACKAGEID, FALSE).MOTIVE_ID;
            
            END IF;
        
        END IF;

        
        IF ( NUMOTIVEID IS NOT NULL ) THEN
        
            
            NUSUBSCRIPTION := DAMO_MOTIVE.FNUGETSUBSCRIPTION_ID( NUMOTIVEID );
        
        END IF;

        UT_TRACE.TRACE('Paquete['||NUPACKAGEID||'] Motivo ['||NUMOTIVEID||'] Contrato ['||NUSUBSCRIPTION||']',11);

        
        IF ( NUSUBSCRIPTION IS NOT NULL ) THEN
        
            
            PKSUBSCRIBER.GETBILLINGCYCLE(NUSUBSCRIPTION,NUCICLE,NUERROR,SBERROR);
            GW_BOERRORS.CHECKERROR(NUERROR,SBERROR);
            UT_TRACE.TRACE('Ciclo anterior ['||NUCICLE||']',11);

            
            IF ( NUCICLEID <> NUCICLE ) THEN
            
                ERRORS.SETERROR(ERROR_1521,NUCICLE||'|'||NUCICLEID);
                RAISE EX.CONTROLLED_ERROR;
            
            END IF;
            
            
            IF ( NUCICLEID = -1 ) THEN
            
                ERRORS.SETERROR(ERROR_3337);
                RAISE EX.CONTROLLED_ERROR;
            
            END IF;

            
            DACICLO.ACCKEY(NUCICLEID);

            
            IF ( PKTBLSUSCRIPC.FBLEXIST(NUSUBSCRIPTION) ) THEN
            
                PKSUBSCRIBER.UPDCYCLESUBSCRIBER(NUSUBSCRIPTION,NUCICLEID,NUERROR,SBERROR);
                GW_BOERRORS.CHECKERROR(NUERROR,SBERROR);
                UT_TRACE.TRACE('Cambio BSS',11);
            
            END IF;
        
        END IF;
        
        UT_TRACE.TRACE('Fin Or_boActivitiesRules.valBillingCicle',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE VALCONSUPTIONCICLE
    IS

        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUPACKAGEID         OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE;
        NUOPERSECTOR        NUMBER;
        NUMOTIVEID          OR_ORDER_ACTIVITY.MOTIVE_ID%TYPE;
    BEGIN
    
        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUPACKAGEID:= DAOR_ORDER_ACTIVITY.FNUGETPACKAGE_ID(NUORDERACTIVITYID);

        NUOPERSECTOR := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('COMSUMPTION_CICLE',NUORDERACTIVITYID);
        
        NUMOTIVEID:=MO_BOPACKAGES.FNUGETFIRSTMOTIVE(NUPACKAGEID);
        UT_TRACE.TRACE('Id del motivo ['||NUMOTIVEID||'] nuOperSector ['||NUOPERSECTOR||']');

        VALBILLINGCICLE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE INICOMMENT
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUCOMPONENTID       OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
        SBCOMMENT           MO_DATA_CONNECTION.COMMENT_%TYPE;
        SBDATACONTABLE      VARCHAR2(100);
        SBCOMMENTFIELD      VARCHAR2(100);

    BEGIN
        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUCOMPONENTID       := DAOR_ORDER_ACTIVITY.FNUGETCOMPONENT_ID(NUORDERACTIVITYID);
        SBDATACONTABLE := 'MO_DATA_CONNECTION';
        SBCOMMENTFIELD := 'COMMENT_';
        GE_BOINT_MOTIVES.GETCOMPONENTDATAHANDLENOERROR(NUCOMPONENTID, SBDATACONTABLE, SBCOMMENTFIELD, SBCOMMENT, NULL);
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(SBCOMMENT);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
    	WHEN OTHERS THEN
    	ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE INIQUANTITY
    IS
        SBQUANTITY          VARCHAR2(4000);
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUCOMPONENTID       OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
        SBDATACONTABLE      VARCHAR2(100);
        SBQUANTITYFIELD     VARCHAR2(100);

    BEGIN
        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUCOMPONENTID       := DAOR_ORDER_ACTIVITY.FNUGETCOMPONENT_ID(NUORDERACTIVITYID);
        
        SBDATACONTABLE  := 'MO_DATA_CONNECTION';
        SBQUANTITYFIELD := 'QUANTITY';
        GE_BOINT_MOTIVES.GETCOMPONENTDATAHANDLENOERROR(NUCOMPONENTID, SBDATACONTABLE, SBQUANTITYFIELD, SBQUANTITY, NULL);
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(SBQUANTITY);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
    	WHEN OTHERS THEN
    	ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE INIMAINIPADDRESS
    IS
        NUMAINIP                OR_ORDER_ITEMS.ELEMENT_ID%TYPE;
        SBCODEMAINIP            OR_ORDER_ITEMS.ELEMENT_CODE%TYPE;
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        INUCOMPONENTBLOCKIP     OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
        
    BEGIN
        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        INUCOMPONENTBLOCKIP := DAOR_ORDER_ACTIVITY.FNUGETCOMPONENT_ID(NUORDERACTIVITYID);
        
        OPEN  IM_BCIPADDRESS.CUCOMPDIRIP(INUCOMPONENTBLOCKIP);
        FETCH IM_BCIPADDRESS.CUCOMPDIRIP INTO NUMAINIP;
        CLOSE IM_BCIPADDRESS.CUCOMPDIRIP;
        UT_TRACE.TRACE('Direcciones Ip Principal: '||NUMAINIP, 10);

        IF (NUMAINIP IS NOT NULL) THEN
            SBCODEMAINIP := DAIF_ASSIGNABLE.FSBGETCODE(NUMAINIP);

            
            
            DAIF_ASSIGNABLE.UPDOCCUPATION_STATUS_ID(NUMAINIP, IF_BOCONSTANTS.CNUFREESTATUS);
            
            UT_TRACE.TRACE(' Code de la direcciï¿½n IP '||SBCODEMAINIP,10);
            GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NUMAINIP);

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE INITWORKSBEGINDATE
    IS
        SBDATE                  VARCHAR2(1024);
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    BEGIN

        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        UT_TRACE.TRACE('Inicia Or_boActivitiesRules.InitWorksBeginDate nuOrderActivityId ['||NUORDERACTIVITYID||']',10);
        
        NUMOTIVEID := DAOR_ORDER_ACTIVITY.FNUGETMOTIVE_ID(NUORDERACTIVITYID);

        
        UT_TRACE.TRACE('nuMotiveId ['||NUMOTIVEID||']',11);
        SBDATE := FNUGETINITWORKSDATE(NUMOTIVEID);

        
        UT_TRACE.TRACE('Fecha ['||SBDATE||']',11);
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(SBDATE);

        UT_TRACE.TRACE('Finaliza Or_boActivitiesRules.InitWorksBeginDate',10);
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE VALWORKSBEGINDATE
    IS
        SBDATE                  VARCHAR2(1024);
        SBDATEOLD               VARCHAR2(1024);
        SBATTRIBUTE             VARCHAR2(1024);
        SBDESCRIPTION           GE_ATTRIBUTES.DISPLAY_NAME%TYPE;
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        RCMOTIVE                DAMO_MOTIVE.STYMO_MOTIVE;
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        ERROR_5400              CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 5400;
    BEGIN

        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        UT_TRACE.TRACE('Inicia Or_boActivitiesRules.ValWorksBeginDate nuOrderActivityId ['||NUORDERACTIVITYID||']',10);

        
        NUMOTIVEID := DAOR_ORDER_ACTIVITY.FNUGETMOTIVE_ID(NUORDERACTIVITYID);

        
        UT_TRACE.TRACE('nuMotiveId ['||NUMOTIVEID||']',11);
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(NUMOTIVEID);


        
        SBDATE := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('Fecha' ,NUORDERACTIVITYID);

        UT_TRACE.TRACE('Fecha ['||SBDATE||']',11);

        
        IF (RCMOTIVE.PROVISIONAL_FLAG = GE_BOCONSTANTS.CSBYES ) THEN
              
              SBDATEOLD := FNUGETINITWORKSDATE(NUMOTIVEID);

              
              IF(SBDATE <> SBDATEOLD) THEN
                    SBDESCRIPTION := DAGE_ATTRIBUTES.FSBGETDISPLAY_NAME(SBATTRIBUTE);
                    ERRORS.SETERROR(ERROR_5400,
                                    SBDATEOLD||'|'||SBDESCRIPTION||'|'||SBDATE);
                    RAISE EX.CONTROLLED_ERROR;
              END IF;

        END IF;

        
        IF(SBDATE IS NOT NULL) THEN
            UT_TRACE.TRACE('Actualiza en motivo',11);

            
            GE_BOGENERALUTIL.VALIDDATEMAXQUEUEDELAY(SBDATE);

            
            DAMO_MOTIVE.UPDPROV_INITIAL_DATE(NUMOTIVEID,
                                             TO_DATE(SBDATE,UT_DATE.FSBDATE_FORMAT));
        END IF;

        UT_TRACE.TRACE('Finaliza Or_boActivitiesRules.ValWorksBeginDate',10);
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE INITCHARGE
    IS
        SBRESULT VARCHAR2(4000);
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        SBDATAUTILITIES         VARCHAR2(100);
        SBCHARGE                VARCHAR2(100);
    BEGIN

        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        UT_TRACE.TRACE('Inicia Or_boActivitiesRules.ValWorksBeginDate nuOrderActivityId ['||NUORDERACTIVITYID||']',10);

        
        NUMOTIVEID := DAOR_ORDER_ACTIVITY.FNUGETMOTIVE_ID(NUORDERACTIVITYID);
        SBDATAUTILITIES := 'MO_DATA_UTILITIES';
        SBCHARGE := 'CHARGE';
        GE_BOINT_MOTIVES.GETMOTIVEDATAHANDLENOERROR(NUMOTIVEID, SBDATAUTILITIES, SBCHARGE, SBRESULT, NULL);
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(SBRESULT);
        
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE VALCHARGE
    IS
        SBATTRIBUTE VARCHAR2(4000);
        SBVALUE VARCHAR2(4000);
        NUCHARGE    NUMBER;
    BEGIN
    
        GE_BOINSTANCE.GETINSTANCE(SBATTRIBUTE, SBVALUE);
        NUCHARGE:=UT_CONVERT.FNUCHARTONUMBER(SBVALUE);
        IF ( NUCHARGE <= 0 )
        THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(9512, SBATTRIBUTE);
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE INISCORING
    IS
        NUPACKAGEID     NUMBER;
        NULASTSCORING   NUMBER;
    BEGIN
        NUPACKAGEID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPACKAGE;
        NULASTSCORING := CC_BOSCORINGCOMPUTE.FNULASTSCORINGVALUE(NUPACKAGEID);
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NULASTSCORING);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE VALIDDATEMAXQUEUEDELAY
	IS
		
		SBDATE VARCHAR2(100);
		NUORDERACTIVITY      OR_ORDER_ACTIVITY.ORIGIN_ACTIVITY_ID%TYPE;
	BEGIN
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        SBDATE := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('ACTIVATION_DATE' ,NUORDERACTIVITY);

        GE_BOGENERALUTIL.VALIDDATEMAXQUEUEDELAY(SBDATE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE INIWITHRETIREELEID
    (
        INUELEMENTTYPEID    IN  IF_ELEMENT_TYPE.ELEMENT_TYPE_ID%TYPE
    )
    IS
        NUELEMENTID           IF_NODE.ID%TYPE;
        NUELEMENTCODE         IF_NODE.CODE%TYPE;
        NUORDERACTIVITYID     OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUPRODUCTID           OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
        
    BEGIN
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUPRODUCTID := DAOR_ORDER_ACTIVITY.FNUGETPRODUCT_ID (NUORDERACTIVITYID);

        PR_BONETWORK_ELEM_OPER.GETELEMIDANDCODEBYPROD
        (
            NUPRODUCTID,
            NULL ,
            INUELEMENTTYPEID ,
            NUELEMENTID     ,
            NUELEMENTCODE
        );
        
        UT_TRACE.TRACE('nuElementId ['||NUPRODUCTID||' - '||INUELEMENTTYPEID||' - ' ||NUELEMENTID||']',10);
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NUELEMENTID);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE INICLASSSERVICE
    IS
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUCOMPONENTID           MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCLASSSERVICEID        PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE;

    BEGIN
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUCOMPONENTID := DAOR_ORDER_ACTIVITY.FNUGETCOMPONENT_ID (NUORDERACTIVITYID);

        IF DAMO_COMPONENT.FBLEXIST(NUCOMPONENTID) THEN
            NUCLASSSERVICEID := DAMO_COMPONENT.FNUGETCLASS_SERVICE_ID (NUCOMPONENTID);
            UT_TRACE.TRACE('nuClassServiceId ['||NUCLASSSERVICEID||']',10);
            GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NUCLASSSERVICEID);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE INITINSTALLADDRESS
    IS
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        RCMOADDRESS             DAMO_ADDRESS.STYMO_ADDRESS;
    BEGIN
        UT_TRACE.TRACE('Inicia metodo Or_boActivitiesRules.initInstallAddress',12);

        
        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        NUMOTIVEID := DAOR_ORDER_ACTIVITY.FNUGETMOTIVE_ID(NUORDERACTIVITYID);
        
        RCMOADDRESS:=MO_BOADDRESS.FRCADDRESSBYTYPE(NUMOTIVEID,PR_BOPARAMETER.FNUGETMAINADDRESSTYPE);

        
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(RCMOADDRESS.PARSER_ADDRESS_ID);

        UT_TRACE.TRACE('Finaliza metodo Or_boActivitiesRules.initInstallAddress',12);

    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE INITVALUETODEBIT
    IS
        SBRESULT VARCHAR2(4000);
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUVALUETODEBIT          MO_MOTIVE.VALUE_TO_DEBIT%TYPE;

    BEGIN

        UT_TRACE.TRACE('Inicia metodo Or_boActivitiesRules.initValueToDebit',12);

        
        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        NUMOTIVEID := DAOR_ORDER_ACTIVITY.FNUGETMOTIVE_ID(NUORDERACTIVITYID);
        
        NUVALUETODEBIT:=MO_BOMOTIVE.FNUGETVALUETODEBIT(NUMOTIVEID);
        
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NUVALUETODEBIT);

        UT_TRACE.TRACE('Finaliza metodo Or_boActivitiesRules.initValueToDebit',12);

    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE VALVALUETODEBIT
    IS
        SBATTRIBUTE       VARCHAR2(4000);
        SBVALUE           VARCHAR2(4000);
        NUVALUETODEBIT    NUMBER;
    BEGIN
        UT_TRACE.TRACE('Inicia metodo Or_boActivitiesRules.valValueToDebit',12);
        
        GE_BOINSTANCE.GETINSTANCE(SBATTRIBUTE, SBVALUE);
        NUVALUETODEBIT:=UT_CONVERT.FNUCHARTONUMBER(SBVALUE);
        IF ( NUVALUETODEBIT <= 0 )
        THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(9512, SBATTRIBUTE);
        END IF;

        UT_TRACE.TRACE('Inicia metodo Or_boActivitiesRules.valValueToDebit',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    


























    PROCEDURE VALITEMTORETIRE
    (
        ISBSERIE            IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        INUCOMPONENTID      IN  MO_COMPONENT.COMPONENT_ID%TYPE,
        ONUITEMSERIADOID    OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMTIPOID       OUT GE_ITEMS.ID_ITEMS_TIPO%TYPE,
        INUPRODUCTID        IN  OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE DEFAULT NULL,
        IBLVALIDPRODUCT     IN  BOOLEAN DEFAULT TRUE
    )
    IS
        RCITEMSERIADO   DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
        TBITEMSERCAP    DAGE_ITEM_SERIADO_CAP.TYTBGE_ITEM_SERIADO_CAP;
        TBCOMPEQUIP     DAPR_COMPONENT.TYTBCOMPONENT_ID;
        NUPRCOMPONENT   MO_COMPONENT.COMPONENT_ID_PROD%TYPE;
    BEGIN
        UT_TRACE.TRACE('   or_bolegalizeactivities.valItemToRetire: '||ISBSERIE, 15);
        GE_BOITEMSSERIADO.GETITEMSERBYSERIE(ISBSERIE, RCITEMSERIADO);

        IF RCITEMSERIADO.ID_ITEMS_SERIADO IS NULL THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(143751, ISBSERIE);
        END IF;
        
        IF (RCITEMSERIADO.ID_ITEMS_ESTADO_INV NOT IN
            (GE_BOITEMSCONSTANTS.CNUSTATUS_ENUSO, GE_BOITEMSCONSTANTS.CNUSTATUS_POR_RECUPERAR )) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_INV_STATUS, ''|| DAGE_ITEMS_ESTADO_INV.FSBGETDESCRIPCION(RCITEMSERIADO.ID_ITEMS_ESTADO_INV,0)||'|'||ISBSERIE);
        END IF;
        
        UT_TRACE.TRACE('   inuComponentId: '||INUCOMPONENTID, 15);

        IF (IBLVALIDPRODUCT) THEN
            
            
            IF ( NOT INUCOMPONENTID IS NULL ) THEN
                
                NUPRCOMPONENT := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(INUCOMPONENTID);
                UT_TRACE.TRACE('   nuPrComponent: '||NUPRCOMPONENT, 15);
                IF (NUPRCOMPONENT IS NOT NULL) THEN
                    IF NVL(DAPR_COMPONENT.FSBGETSERVICE_NUMBER(NUPRCOMPONENT, 0), '-') != ISBSERIE THEN
                        GE_BOERRORS.SETERRORCODEARGUMENT(16982, ISBSERIE||'|'||INUCOMPONENTID);
                    END IF;
                ELSE
                    IF NVL(DAMO_COMPONENT.FSBGETSERVICE_NUMBER(INUCOMPONENTID, 0), '-') != ISBSERIE THEN
                        GE_BOERRORS.SETERRORCODEARGUMENT(16982, ISBSERIE||'|'||INUCOMPONENTID);
                    END IF;
                END IF;
            ELSE
                UT_TRACE.TRACE('   inuProductId: '||INUPRODUCTID, 15);
                
                
                
                IF (NOT INUPRODUCTID IS NULL) THEN
                    
                    TBCOMPEQUIP := PR_BCCOMPONENT.FTBCOMPPRODNUMSERV(INUPRODUCTID, ISBSERIE);
                    IF ( TBCOMPEQUIP.COUNT = 0) THEN
                        GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_EQUIPCOMP, ISBSERIE);
                    END IF;

                    GNUCOMPONENTPRRET := TBCOMPEQUIP(1);
                    UT_TRACE.TRACE('Serie: ['||ISBSERIE||'] - Componente: ['||GNUCOMPONENTPRRET||']', 16);
                END IF;
            END IF;
        END IF;

        ONUITEMSERIADOID  := RCITEMSERIADO.ID_ITEMS_SERIADO;
        ONUITEMTIPOID     := DAGE_ITEMS.FNUGETID_ITEMS_TIPO(RCITEMSERIADO.ITEMS_ID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALITEMTORETIRE;
    
    














    PROCEDURE VALSERIETORETIRE
    IS
        NUCURRACTIVITY      OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUCOMPONENTID       OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
        
        SBCURRATTRIBUTE     VARCHAR2(100);
        SBCURRVALUE         VARCHAR2(4000);

        NUITEMSERIADOID    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        NUITEMTIPOID       GE_ITEMS.ID_ITEMS_TIPO%TYPE;
    BEGIN
    
        UT_TRACE.TRACE('INICIA or_boactivitiesrules.ValSerieToRetire', 14);
        NUCURRACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        
        NUCOMPONENTID   := DAOR_ORDER_ACTIVITY.FNUGETCOMPONENT_ID(NUCURRACTIVITY);

        UT_TRACE.TRACE('nuCurrActivity: '||NUCURRACTIVITY||', nuComponentId: '||NUCOMPONENTID, 15);

        GE_BOINSTANCE.GETINSTANCE(SBCURRATTRIBUTE, SBCURRVALUE);
        
        UT_TRACE.TRACE('sbCurrAttribute: '||SBCURRATTRIBUTE||', sbCurrValue: '||SBCURRVALUE,15);
        
        VALITEMTORETIRE(SBCURRVALUE, NUCOMPONENTID, NUITEMSERIADOID, NUITEMTIPOID);
        
        UT_TRACE.TRACE('FIN or_boactivitiesrules.ValSerieToRetire', 14);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    






























    PROCEDURE VALITEMTOINSTALL
    (
        ISBSERIE            IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        INUOPERATINGUNIT    IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUPRODUCTTYPEID    IN  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        ONUITEMSERIADOID    OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMTIPOID       OUT GE_ITEMS.ID_ITEMS_TIPO%TYPE
    )
    IS
        NUITEMSTIPO     GE_ITEMS.ID_ITEMS_TIPO%TYPE;
        NUOPEUNIMOV     OR_OPERATING_UNIT.ASSO_OPER_UNIT%TYPE;

        RCITEMSERIADO   DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
        TBITEMSERCAP    DAGE_ITEM_SERIADO_CAP.TYTBGE_ITEM_SERIADO_CAP;
        RCWITHACTIVITY  DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;

        BLVALINVENTARY  BOOLEAN := TRUE;
        
        
        
        CSBNOTFOUND_ITEMCAP GE_MESSAGE.MESSAGE_ID%TYPE := 18023;
        CSBINV_CAPACITY     GE_MESSAGE.MESSAGE_ID%TYPE := 18027;
        CSBINV_INVENT       GE_MESSAGE.MESSAGE_ID%TYPE := 16983;
    BEGIN

        UT_TRACE.TRACE('INICIO Or_boActivitiesRules.valItemToInstall', 2 );
        GE_BOITEMSSERIADO.GETITEMSERBYSERIE(ISBSERIE, RCITEMSERIADO);
        
        IF RCITEMSERIADO.ID_ITEMS_SERIADO IS NULL THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(143751, ISBSERIE);
        END IF;

        UT_TRACE.TRACE('rcItemSeriado.id_items_estado_inv: '||RCITEMSERIADO.ID_ITEMS_ESTADO_INV, 2 );
        IF (RCITEMSERIADO.ID_ITEMS_ESTADO_INV NOT IN
            (GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE, GE_BOITEMSCONSTANTS.CNUSTATUS_ENUSO, GE_BOITEMSCONSTANTS.CNUSTATUS_POR_RECUPERAR) ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_INV_STATUS, ''||DAGE_ITEMS_ESTADO_INV.FSBGETDESCRIPCION(RCITEMSERIADO.ID_ITEMS_ESTADO_INV,0)||'|'||ISBSERIE);
        END IF;

        IF DAGE_ITEMS.FSBGETSHARED(RCITEMSERIADO.ITEMS_ID) = GE_BOCONSTANTS.CSBYES THEN
        
            TBITEMSERCAP := GE_BCITEMCAPACITY.FTBGETCAPSSERBYITEM(
                                                        RCITEMSERIADO.ID_ITEMS_SERIADO,
                                                        INUPRODUCTTYPEID );
            IF TBITEMSERCAP.COUNT  < 1 THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(
                                            CSBNOTFOUND_ITEMCAP,
                                            RCITEMSERIADO.SERIE||'|'||
                                            PKTBLSERVICIO.FSBGETDESCRIPTION(INUPRODUCTTYPEID) );
            END IF;

            IF TBITEMSERCAP(TBITEMSERCAP.FIRST).CAPACITY_OCCUPIED >= TBITEMSERCAP(TBITEMSERCAP.FIRST).CAPACITY_TOTAL THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(
                                            CSBINV_CAPACITY,
                                            RCITEMSERIADO.SERIE||'|'||
                                            PKTBLSERVICIO.FSBGETDESCRIPTION(INUPRODUCTTYPEID) );
            END IF;
             
        ELSIF (RCITEMSERIADO.ID_ITEMS_ESTADO_INV = GE_BOITEMSCONSTANTS.CNUSTATUS_ENUSO) THEN
            
            RCWITHACTIVITY := OR_BOORDER.FRCGETWITHDRAWALACT(ISBSERIE);
            UT_TRACE.TRACE('rcWithActivity.order_activity_id '||RCWITHACTIVITY.ORDER_ACTIVITY_ID, 2 );
            IF (RCWITHACTIVITY.ORDER_ACTIVITY_ID IS NULL) THEN
                
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_INV_STATUS, ''||DAGE_ITEMS_ESTADO_INV.FSBGETDESCRIPCION(RCITEMSERIADO.ID_ITEMS_ESTADO_INV,0)||'|'||ISBSERIE);
            ELSE
                BLVALINVENTARY := FALSE;
            END IF;
            
        
        
        ELSIF ( RCITEMSERIADO.ID_ITEMS_ESTADO_INV = GE_BOITEMSCONSTANTS.CNUSTATUS_POR_RECUPERAR) THEN
            UT_TRACE.TRACE('rcItemSeriado.id_items_estado_inv '||RCITEMSERIADO.ID_ITEMS_ESTADO_INV||' no se valida inventario', 2 );
            BLVALINVENTARY := FALSE;
        END IF;

        NUOPEUNIMOV   := NVL(DAOR_OPERATING_UNIT.FNUGETASSO_OPER_UNIT(INUOPERATINGUNIT), INUOPERATINGUNIT);
        UT_TRACE.TRACE('nuOpeUniMov '||NUOPEUNIMOV||'. rcItemSeriado.operating_unit_id '||RCITEMSERIADO.OPERATING_UNIT_ID, 2 );
        
        IF (NUOPEUNIMOV != RCITEMSERIADO.OPERATING_UNIT_ID AND BLVALINVENTARY) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CSBINV_INVENT, ISBSERIE||'|'||NUOPEUNIMOV||'-'||DAOR_OPERATING_UNIT.FSBGETNAME(NUOPEUNIMOV,0) );
        END IF;

        ONUITEMSERIADOID  := RCITEMSERIADO.ID_ITEMS_SERIADO;
        ONUITEMTIPOID     := DAGE_ITEMS.FNUGETID_ITEMS_TIPO(RCITEMSERIADO.ITEMS_ID);
        
        UT_TRACE.TRACE('FIN Or_boActivitiesRules.valItemToInstall', 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALITEMTOINSTALL;

    





















    PROCEDURE VALSERIETOINSTALL
    IS
        NUCURRACTIVITY      OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUORDERID           OR_ORDER.ORDER_ID%TYPE;
        NUOPERATINGUNIT     OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        
        SBCURRATTRIBUTE     VARCHAR2(100);
        SBCURRVALUE         VARCHAR2(4000);
        
        NUITEMSERIADOID    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        NUITEMTIPOID       GE_ITEMS.ID_ITEMS_TIPO%TYPE;
        
        NUADDRESSID        OR_ORDER_ACTIVITY.ADDRESS_ID%TYPE;
        NUSUBSCRIBERID     OR_ORDER_ACTIVITY.SUBSCRIBER_ID%TYPE;
        NUCOMPPRODID       OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
        NUCOMPONENTTYPEID  PR_COMPONENT.COMPONENT_TYPE_ID%TYPE;
        NUCLASSSERVICEID   PR_COMPONENT.CLASS_SERVICE_ID%TYPE;
        NUPRODUCTID        OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
        NUPRODUCTTYPEID    PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('Inicia or_boactivitiesrules.ValSerieToInstall',14);
        
        NUCURRACTIVITY      := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUORDERID           := DAOR_ORDER_ACTIVITY.FNUGETORDER_ID(NUCURRACTIVITY);
        NUOPERATINGUNIT     := DAOR_ORDER.FNUGETOPERATING_UNIT_ID(NUORDERID);
        UT_TRACE.TRACE('nuCurrActivity: '||NUCURRACTIVITY||', nuOrderId: '||NUORDERID||', nuOperatingUnit: '||NUOPERATINGUNIT, 15);

        OR_BCORDERACTIVITIES.GETPRODINFOBYACT(
                                        NUCURRACTIVITY,
                                        NUADDRESSID,
                                        NUSUBSCRIBERID,
                                        NUCOMPPRODID,
                                        NUCOMPONENTTYPEID,
                                        NUCLASSSERVICEID,
                                        NUPRODUCTID,
                                        NUPRODUCTTYPEID
                                        );

        
        IF NUCOMPPRODID IS NULL THEN
            UT_TRACE.TRACE('gnuComponentPrRet: ['||GNUCOMPONENTPRRET||']', 16);
            OR_BCORDERACTIVITIES.GETPRODINFOBYACTPR(
                                        NUCURRACTIVITY,
                                        GNUCOMPONENTPRRET,
                                        NUADDRESSID,
                                        NUSUBSCRIBERID,
                                        NUCOMPPRODID,
                                        NUCOMPONENTTYPEID,
                                        NUCLASSSERVICEID,
                                        NUPRODUCTID,
                                        NUPRODUCTTYPEID
                                        );
        END IF;

        
        IF NUCOMPPRODID IS NULL THEN
            GE_BOERRORS.SETERRORCODE(20482);
        END IF;
        
        GE_BOINSTANCE.GETINSTANCE(SBCURRATTRIBUTE, SBCURRVALUE);
        UT_TRACE.TRACE('sbCurrAttribute: '||SBCURRATTRIBUTE||', sbCurrValue: '||SBCURRVALUE,15);
        VALITEMTOINSTALL(SBCURRVALUE, NUOPERATINGUNIT,NUPRODUCTTYPEID, NUITEMSERIADOID, NUITEMTIPOID);

        UT_TRACE.TRACE('fin or_boactivitiesrules.ValSerieToInstall',14);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALSERIETOINSTALL;

    














    PROCEDURE INIITEMSERIADO
    IS
        NUCURRACTIVITY      OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        RFCURSOR            CONSTANTS.TYREFCURSOR;
        SBSERIE             GE_ITEMS_SERIADO.SERIE%TYPE;
        SBQUERY             VARCHAR2(4000) :=
                   'SELECT  or_equipment_legaliz.Serie
                      FROM  or_equipment_legaliz
                     WHERE  or_equipment_legaliz.order_activity_id = :nuOrderActivityId';
    BEGIN
    
        IF RFCURSOR%ISOPEN THEN
            CLOSE RFCURSOR;
        END IF;
    
        NUCURRACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        OPEN RFCURSOR FOR SBQUERY
            USING NUCURRACTIVITY;

        FETCH RFCURSOR INTO SBSERIE;
        
        IF RFCURSOR%ISOPEN THEN
            CLOSE RFCURSOR;
        END IF;

        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(SBSERIE);

    EXCEPTION
        WHEN OTHERS THEN
            IF RFCURSOR%ISOPEN THEN
                CLOSE RFCURSOR;
            END IF;
    END;
    
    


























    PROCEDURE VALITEMSERIADO
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERATINGUNIT    IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUCURRACTIVITY     IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        ISBSERIE            IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        ONUIDITEMSERIADO    OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMTIPOID       OUT GE_ITEMS.ID_ITEMS_TIPO%TYPE,
        OSBDESCRIPTION      OUT GE_ITEMS.DESCRIPTION%TYPE,
        ISBATTRIBUTE        IN  GE_ATTRIBUTES.NAME_ATTRIBUTE%TYPE DEFAULT '',
        INUCOMPONENTID      IN  MO_COMPONENT.COMPONENT_ID%TYPE DEFAULT NULL
    )
    IS
        NUADDRESSID        OR_ORDER_ACTIVITY.ADDRESS_ID%TYPE;
        NUSUBSCRIBERID     OR_ORDER_ACTIVITY.SUBSCRIBER_ID%TYPE;
        NUCOMPPRODID       OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
        NUCOMPONENTTYPEID  PR_COMPONENT.COMPONENT_TYPE_ID%TYPE;
        NUCLASSSERVICEID   PR_COMPONENT.CLASS_SERVICE_ID%TYPE;
        NUPRODUCTID        OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
        NUPRODUCTTYPEID    PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;
        NUITEMSID          GE_ITEMS.ITEMS_ID%TYPE;
        NUITEMSGAMAID      GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA%TYPE ;
        NUIDPRCOMPONENT    PR_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPITEMSID      GE_ITEMS.ITEMS_ID%TYPE;
        NUCOMPITEMSGAMAID  GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA%TYPE ;
        NUCOMPITEMSTIPOID  GE_ITEMS.ID_ITEMS_TIPO%TYPE;
        
    BEGIN
    
        IF(INUCOMPONENTID IS NOT NULL) THEN
            NUCOMPPRODID := INUCOMPONENTID;
            
            NUIDPRCOMPONENT := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(NUCOMPPRODID);
            
            IF(NUIDPRCOMPONENT IS NULL) THEN
                GE_BOERRORS.SETERRORCODE(CNUERR13751);
            END IF;

            
            NUPRODUCTTYPEID := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(DAPR_COMPONENT.FNUGETPRODUCT_ID(NUIDPRCOMPONENT));
            
            UT_TRACE.TRACE('Componente de motivo: '||NUCOMPPRODID||' Componente de producto: '||NUIDPRCOMPONENT||' nuProductTypeId: '||NUPRODUCTTYPEID, 15);
        ELSE
            OR_BCORDERACTIVITIES.GETPRODINFOBYACT(
                                        INUCURRACTIVITY,
                                        NUADDRESSID,
                                        NUSUBSCRIBERID,
                                        NUCOMPPRODID,
                                        NUCOMPONENTTYPEID,
                                        NUCLASSSERVICEID,
                                        NUPRODUCTID,
                                        NUPRODUCTTYPEID
                                        );

            
            IF NUCOMPPRODID IS NULL THEN
                UT_TRACE.TRACE('gnuComponentPrRet: ['||GNUCOMPONENTPRRET||']', 16);
                OR_BCORDERACTIVITIES.GETPRODINFOBYACTPR(
                                        INUCURRACTIVITY,
                                        GNUCOMPONENTPRRET,
                                        NUADDRESSID,
                                        NUSUBSCRIBERID,
                                        NUCOMPPRODID,
                                        NUCOMPONENTTYPEID,
                                        NUCLASSSERVICEID,
                                        NUPRODUCTID,
                                        NUPRODUCTTYPEID
                                        );
            END IF;

            
            IF NUCOMPPRODID IS NULL THEN
                GE_BOERRORS.SETERRORCODE(20482);
            END IF;
        END IF;
                                        
        
        VALITEMTOINSTALL(ISBSERIE, INUOPERATINGUNIT, NUPRODUCTTYPEID, ONUIDITEMSERIADO, ONUITEMTIPOID);
        
        
        
        IF(ISBATTRIBUTE = OR_BOCONSTANTS.CSBSERIALITEMINSTALL) THEN
            NUITEMSID := DAGE_ITEMS_SERIADO.FNUGETITEMS_ID(ONUIDITEMSERIADO);
            OSBDESCRIPTION := DAGE_ITEMS.FSBGETDESCRIPTION(NUITEMSID);
        
            
            NUCOMPITEMSID := DAPS_CLASS_SERVICE.FNUGETITEM_ID(NUCLASSSERVICEID,0);
            NUCOMPITEMSTIPOID := DAGE_ITEMS.FNUGETID_ITEMS_TIPO(NUCOMPITEMSID,0);

            IF ONUITEMTIPOID != NVL(NUCOMPITEMSTIPOID,-1) THEN
                
                GE_BOERRORS.SETERRORCODEARGUMENT(20202,''||DAGE_ITEMS_TIPO.FSBGETDESCRIPCION(ONUITEMTIPOID,0));
            END IF;
        

            
            GE_BCITEMS_GAMA_ITEM.GETITEMGAMABYITEM(NUITEMSID, NUITEMSGAMAID);

            
            GE_BCITEMS_GAMA_ITEM.GETITEMGAMABYITEM(NUCOMPITEMSID, NUCOMPITEMSGAMAID);

            
            IF (NVL(NUITEMSGAMAID,-1) != NUCOMPITEMSGAMAID ) THEN
                
                GE_BOERRORS.SETERRORCODEARGUMENT(20203,ISBSERIE);
            END IF;
        END IF;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALITEMSERIADO;
    
    















    FUNCTION FNUGETCOMPEQUIP
    RETURN PR_COMPONENT.COMPONENT_ID%TYPE
    IS
    BEGIN
        RETURN GNUCOMPONENTPRRET;
    END;
    
    
















    FUNCTION FNUGETACTIFROMORDERACT
    (
        
        INUORDERACTIVITY    IN    OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE

    )RETURN OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE
    IS
    
        
        PROCEDURE VALIDATEDATA
        (
            
            INUORDERACTIVITY    IN    OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE
        )
        IS
        BEGIN
        
            
            IF (INUORDERACTIVITY IS NULL) THEN
                ERRORS.SETERROR(119562,'Cï¿½digo de la actividad de ï¿½rdenes');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            DAOR_ORDER_ACTIVITY.ACCKEY(INUORDERACTIVITY);
        

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;
    
    BEGIN
    
        UT_TRACE.TRACE('Inicia or_boactivitiesrules.fnuGetActiFromOrderActi Actividad de ï¿½rdenes['||INUORDERACTIVITY||']',14);
        
        
        VALIDATEDATA(INUORDERACTIVITY);
        
        UT_TRACE.TRACE('Fin or_boactivitiesrules.fnuGetActiFromOrderActi',14);
        
        
        RETURN DAOR_ORDER_ACTIVITY.FNUGETACTIVITY_ID (INUORDERACTIVITY);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
















    PROCEDURE INITNUMBEROFPAYMENTS
    IS
        NUQUOTASNUMBER   CC_SALES_FINANC_COND.QUOTAS_NUMBER%TYPE;
    BEGIN
    
        UT_TRACE.TRACE('INICIO: Or_boActivitiesRules.InitNumberOfPayments',14);

        
        DAMO_PACKAGES.ACCKEY(OR_BOLEGALIZEACTIVITIES.FNUGETCURRPACKAGE);
        
        
        IF  (DACC_SALES_FINANC_COND.FBLEXIST(OR_BOLEGALIZEACTIVITIES.FNUGETCURRPACKAGE)) THEN
        
            
            NUQUOTASNUMBER   := DACC_SALES_FINANC_COND.FNUGETQUOTAS_NUMBER(OR_BOLEGALIZEACTIVITIES.FNUGETCURRPACKAGE);
        
        END IF;

        
        GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(TO_CHAR(NUQUOTASNUMBER));

        UT_TRACE.TRACE('FIN: Or_boActivitiesRules.InitNumberOfPayments',14);
    
    EXCEPTION
    
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('LOGIN_DENIED: Or_boActivitiesRules.InitNumberOfPayments',14);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS: Or_boActivitiesRules.InitNumberOfPayments',14);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    
    END INITNUMBEROFPAYMENTS;

    































    PROCEDURE VALNUMBEROFPAYMENTS
    IS
        RCFINANCINGPLAN     PLANDIFE%ROWTYPE;

        SBATTRIBUTE         VARCHAR2(4000);
        SBVALUE             VARCHAR2(4000);
        
        RCORDERACTIVITY     OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES;
    BEGIN
    
        UT_TRACE.TRACE('INICIO: Or_boActivitiesRules.ValNumberOfPayments ',14);

        
        GE_BOINSTANCE.GETINSTANCE(SBATTRIBUTE, SBVALUE);
        
        
        IF  (SBVALUE IS NULL) THEN
        
            RETURN;
        
        END IF;

        
        OR_BOLEGALIZEACTIVITIES.GETACTIVITYRECORD(RCORDERACTIVITY);

        
        DAMO_PACKAGES.ACCKEY(RCORDERACTIVITY.NUPACKAGEID);

        
        IF  (DACC_SALES_FINANC_COND.FBLEXIST(OR_BOLEGALIZEACTIVITIES.FNUGETCURRPACKAGE)) THEN
        
            
            RCFINANCINGPLAN := PKTBLPLANDIFE.FRCGETRECORD(DACC_SALES_FINANC_COND.FNUGETFINANCING_PLAN_ID(OR_BOLEGALIZEACTIVITIES.FNUGETCURRPACKAGE), PKCONSTANTE.NOCACHE);
        
        ELSE

            
            IF  (RCORDERACTIVITY.NUPRODUCTID IS NULL) THEN

                
                IF  (RCORDERACTIVITY.NUMOTIVEID IS NOT NULL) THEN

                    
                    RCORDERACTIVITY.NUPRODUCTID := DAMO_MOTIVE.FNUGETPRODUCT_ID(RCORDERACTIVITY.NUMOTIVEID);

                END IF;

            END IF;

            
            IF  (RCORDERACTIVITY.NUSUBSCRIPTIONID IS NULL) THEN

                
                IF  (RCORDERACTIVITY.NUPRODUCTID IS NOT NULL) THEN

                    
                    RCORDERACTIVITY.NUSUBSCRIPTIONID := DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(RCORDERACTIVITY.NUPRODUCTID);

                
                ELSIF (RCORDERACTIVITY.NUMOTIVEID IS NOT NULL) THEN

                    
                    RCORDERACTIVITY.NUSUBSCRIPTIONID    := DAMO_MOTIVE.FNUGETSUBSCRIPTION_ID(RCORDERACTIVITY.NUMOTIVEID);

                END IF;

            END IF;

            
            RCFINANCINGPLAN := CC_BOFINANCING.FRCBESTFINANCINGPLAN
            (
                INUSUBSCRIPTIONID=>RCORDERACTIVITY.NUSUBSCRIPTIONID,
                INUPRODUCTID=>RCORDERACTIVITY.NUPRODUCTID
            );
        
        
        END IF;
        
        
        IF  (RCFINANCINGPLAN.PLDICODI IS NOT NULL) THEN
            PKDEFERREDPLANMGR.VALQUOTASNUMBER(RCFINANCINGPLAN.PLDICODI, SBVALUE);
        END IF;

        UT_TRACE.TRACE('FIN: Or_boActivitiesRules.ValNumberOfPayments ',14);
    
    EXCEPTION
    
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('LOGIN_DENIED: Or_boActivitiesRules.ValNumberOfPayments ',14);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS: Or_boActivitiesRules.ValNumberOfPayments ',14);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    
    END VALNUMBEROFPAYMENTS;

END OR_BOACTIVITIESRULES;