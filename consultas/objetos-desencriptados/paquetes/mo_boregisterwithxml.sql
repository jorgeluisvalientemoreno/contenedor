PACKAGE BODY MO_BORegisterWithXml AS
    
    
    
    
    CSBVERSION          CONSTANT VARCHAR2(250)  := 'SAO306566';
    
    CNUJAVAERROR        CONSTANT NUMBER := 4512;

    CSBGLOBALINSTANCE   CONSTANT GE_BOINSTANCECONTROL.STYSBNAME := GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE;
    CSBGLOBALENTITY     CONSTANT GE_BOINSTANCECONTROL.STYSBNAME := GE_BOINSTANCECONSTANTS.CSBGLOBAL_ENTITY;
    
    CNUMESSPROCESSING   CONSTANT NUMBER := 10010;
    
    CSBFILE_SEPARATOR   CONSTANT VARCHAR2(1) := '/';

    
    BLISREGISTERXML     BOOLEAN := FALSE;
    
    TYPE TYTBVARCHAR2 IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


    


























    
    PROCEDURE REGISTERREQUEST
        (
        IDMDOCUMENT             IN XMLDOM.DOMDOCUMENT,
        ONUPACKAGEID            OUT NOCOPY MO_PACKAGES.PACKAGE_ID%TYPE,
        OSBREQUESTIDEXTERN      OUT NOCOPY GE_BOINSTANCECONTROL.STYSBVALUE
        )
    IS
        NUATTRIBUTE         PLS_INTEGER;
        SBPACKAGEID         GE_BOINSTANCECONTROL.STYSBVALUE;
        NUINDEXINS  GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        UT_TRACE.TRACE('Inicia m?todo MO_BORegisterWithXml.registerRequest',6);

        
        BLISREGISTERXML := TRUE;

        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;

        UT_TRACE.TRACE('Instancia apuntador DOM',5);
        
        IN_BOINSTANCEGENERAL.SETEXECWITHDOM(IDMDOCUMENT.ID,NULL);

        
        MO_BOREGISTERCONTROLLER.DEFAULTPROCESSEJECUTION;

        
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION(MO_BOUNCOMPOSITIONCONSTANTS.CNULOAD_GUI,FALSE);

        

        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION(MO_BOUNCOMPOSITIONCONSTANTS.CNUVALIDATE_REQUIRED_INSTANCES,FALSE);

        
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION(MO_BOUNCOMPOSITIONCONSTANTS.CNUREGISTER_BATCH,FALSE);
        
          
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION(MO_BOUNCOMPOSITIONCONSTANTS.CNUATTR_PROCESS_EXPRESSION,FALSE);

        
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUREPLICATE,FALSE);

        
        MO_BOREGISTERCONTROLLER.REGISTRY(TRUE);

        
        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('PACKAGE_ID',SBPACKAGEID);
        UT_TRACE.TRACE('Paquete:['||SBPACKAGEID||']',6);
        ONUPACKAGEID := TO_NUMBER(SBPACKAGEID);

        
        IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(CSBGLOBALINSTANCE, NULL, CSBGLOBALENTITY, 'REQUEST_ID_EXTERN', NUINDEXINS)) THEN
            
            GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('REQUEST_ID_EXTERN',OSBREQUESTIDEXTERN);
        END IF;
        UT_TRACE.TRACE('Id Solicitud Externa:['||OSBREQUESTIDEXTERN||']',6);

        
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;

        
        BLISREGISTERXML := FALSE;
        
        UT_TRACE.TRACE('Finaliza m?todo MO_BORegisterWithXml.registerRequest',6);
        
    EXCEPTION
    	  WHEN EX.CONTROLLED_ERROR THEN

            
            BLISREGISTERXML := FALSE;
        
            
            IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(CSBGLOBALINSTANCE, NULL, CSBGLOBALENTITY, 'REQUEST_ID_EXTERN', NUINDEXINS)) THEN
                GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('REQUEST_ID_EXTERN',OSBREQUESTIDEXTERN);
            END IF;
            GE_BOINSTANCECONTROL.DSPLYALLATTRIBUTESTACK;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
    	  WHEN OTHERS THEN

            
            BLISREGISTERXML := FALSE;
        
            
            IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(CSBGLOBALINSTANCE, NULL, CSBGLOBALENTITY, 'REQUEST_ID_EXTERN', NUINDEXINS)) THEN
                GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('REQUEST_ID_EXTERN',OSBREQUESTIDEXTERN);
            END IF;
            GE_BOINSTANCECONTROL.DSPLYALLATTRIBUTESTACK;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE REGISTERREQUESTBYXML
        (
        ISBREQUESTXML       IN  VARCHAR2,
        ONUPACKAGEID        OUT MO_PACKAGES.PACKAGE_ID%TYPE
        )
    IS
        DMDOCUMENT          XMLDOM.DOMDOCUMENT;
        SBREQUESTIDEXTERN   GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BORegisterWithXml.RegisterRequestByXML',5);
        
        DMDOCUMENT := UT_XMLPARSE.PARSE(ISBREQUESTXML);

        
        REGISTERREQUEST(DMDOCUMENT, ONUPACKAGEID, SBREQUESTIDEXTERN);
        
        
        IF ( NOT XMLDOM.ISNULL(DMDOCUMENT) ) THEN
        
            XMLDOM.FREEDOCUMENT(DMDOCUMENT);
        
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BORegisterWithXml.RegisterRequestByXML',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( NOT XMLDOM.ISNULL(DMDOCUMENT) ) THEN
                XMLDOM.FREEDOCUMENT(DMDOCUMENT);
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( NOT XMLDOM.ISNULL(DMDOCUMENT) ) THEN
                XMLDOM.FREEDOCUMENT(DMDOCUMENT);
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FBLISREGISTERXML RETURN BOOLEAN
    IS
    BEGIN
        RETURN BLISREGISTERXML;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE SETISREGISTERXML
    (
        IBLISREGISTERXML    IN    BOOLEAN
    )
    IS
    BEGIN
        BLISREGISTERXML := IBLISREGISTERXML;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

END MO_BOREGISTERWITHXML;