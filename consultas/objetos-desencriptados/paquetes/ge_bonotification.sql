PACKAGE BODY GE_BONotification AS















































































    
    
    

    CSBVERSION   CONSTANT VARCHAR2(20)            := 'SAO207720';
    
    

    
    
    CNUERROREXECJAVA    CONSTANT NUMBER(4) := 2326;

    CNUORIGININVALID    CONSTANT NUMBER(4) := 2381; 
    CNUNOTIFICATIONNULL CONSTANT NUMBER(4) := 2141;  
    CNUORIGINNULL       CONSTANT NUMBER(4) := 2146; 
    CNUEXTERNALNULL     CONSTANT NUMBER(4) := 2148; 
    CNUMAXLENGTHSTRING  CONSTANT NUMBER(4) := 4000; 
                                                    
    CNULENGTHSTRINGOUT  CONSTANT NUMBER(4) := 2221; 
    CNUNULLTRANSFORM    CONSTANT NUMBER(4) := 3286; 
    CNUNULLSELECT       CONSTANT NUMBER(4) := 2000; 
    
    
                
    CNUERRORSTATEMENT  CONSTANT NUMBER(4) := 1696;

    CSBPREFIXNUMBER         CONSTANT VARCHAR2(2) := 'NU'; 
    CSBPREFIXVARCHAR        CONSTANT VARCHAR2(2) := 'SB'; 
    CSBPREFIXDATE           CONSTANT VARCHAR2(2) := 'DT'; 

    CSBNEWSELECT            CONSTANT VARCHAR2(10):= 'NEW SELECT';
    CSBNEWRECORD            CONSTANT VARCHAR2(10):= 'NEW RECORD';
    CSBENTER                CONSTANT VARCHAR2(1) := CHR(10);

    CSBAMPERSAND   CONSTANT VARCHAR2(1) := CHR(38);
    CSBAMP         CONSTANT VARCHAR2(10) := CHR(38)||'amp;';
    CSBLESSTHAN    CONSTANT VARCHAR2(10) := '<';
    CSBLT          CONSTANT VARCHAR2(10) := CHR(38)||'lt;';
    CSBGREATERTHAN CONSTANT VARCHAR2(10) := '>';
    CSBGT          CONSTANT VARCHAR2(10) := CHR(38)||'gt;';
    
    CSBSMS_PLATFORM     CONSTANT VARCHAR2(20) := 'SMS_PLATFORM';
    CSBMNEMONIC_SMS     CONSTANT VARCHAR2(20) := 'MNEMONIC_ALERT_SMS';
    CSBPUSH_PLATAFORM   CONSTANT VARCHAR2(20) := 'PUSH_PLATFORM';    
    CSBMNEMONIC_PUSH    CONSTANT VARCHAR2(20) := 'MNEMONIC_ALERT_PUSH';
    CSBORDERID          CONSTANT VARCHAR2(50) := 'ORDER_ID';
    CSBOPERUNIT         CONSTANT VARCHAR2(50) := 'OPERATING_UNIT_ID';
    CSBPERSONID         CONSTANT VARCHAR2(50) := 'PERSON_ID';
    CSBNOTIFTYPE        CONSTANT VARCHAR2(50) := 'NOTIFICATION_TYPE_ID';
    CSBEXCLU_PERS       CONSTANT VARCHAR2(50) := 'EXCLUDED_PERSONS';
    CSBFIELD            CONSTANT VARCHAR2(50) := 'FIELD';

    
    EXERRMAXLENGTH          EXCEPTION;
    
    
    
    CNUERR_NOT_DATA_MAIL CONSTANT NUMBER(3) := 477;
    
    
    

    
    
    
    
    NUPRIORITY NUMBER(4) := NULL;
    
    CNUMETADATA              NUMBER(5) := 1;
    BLVALID_INPUT            BOOLEAN   := TRUE;

    
    RCNOTIFICATION_LOG  DAGE_NOTIFICATION_LOG.STYGE_NOTIFICATION_LOG;

    RCBCNOTIFICATION    GE_BCNOTIFICATION.TYRCNOTIFICATION;
    TBBCNOTIFICATION    GE_BCNOTIFICATION.TYTBNOTIFICATION;

    
    
    


    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
    
        RETURN CSBVERSION;
    
    END;

    PROCEDURE SETPRIORITY
    (
       INUPRIORITY IN NUMBER
    )
    IS
    BEGIN
        NUPRIORITY := INUPRIORITY;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETPRIORITY
    (
       ONUPRIORITY OUT NUMBER
    )
    IS
    BEGIN
        ONUPRIORITY := NUPRIORITY;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE VALIDATEERROR
    (
       INUERRCODE IN NUMBER,
       ISBERRMSG  IN VARCHAR2,
       ISBMETODO  IN  VARCHAR2 DEFAULT NULL
    )
    IS
       NUERRORCODE NUMBER;
       SBERROR VARCHAR2(4000);
    BEGIN
        NUERRORCODE := NVL(INUERRCODE,0);
        
        IF NUERRORCODE = CONSTANTS.CNUSUCCESS THEN
           RETURN;
        END IF;
        
        ERRORS.GETERROR(NUERRORCODE,SBERROR);
        
        
        
        ERRORS.SETERROR(CNUERROREXECJAVA,RCBCNOTIFICATION.NOTIFICATION_ID||'|'||
                        ISBMETODO||'|'||'['||NUERRORCODE||' '||SBERROR||'] ['||
                        INUERRCODE||' '||ISBERRMSG||']');
        RAISE EX.CONTROLLED_ERROR;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION SETINSTANCE
    (
       ISBATTRIBUTE IN VARCHAR2,
       ISBVALUE     IN VARCHAR2
    )
    RETURN GE_BOINSTANCE.TYTBINSTANCE
    IS
        TBTMPSELECT GE_BOINSTANCE.TYTBINSTANCE;
    BEGIN
        GE_BOINSTANCE.SETATTRIBUTE
        (
           TBTMPSELECT, NULL, ISBATTRIBUTE,NULL, ISBVALUE, NULL, NULL
        );
        RETURN TBTMPSELECT;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    
    PROCEDURE SETOUTPUTCLOB
    (
       OCLOUTPUT    IN OUT CLOB,
       ISBATTRIBUTE IN     VARCHAR2,
       ISBVALUE     IN     VARCHAR2,
       IONUPOSITION IN OUT NUMBER
    )
    IS
       SBATTRIBUTE VARCHAR2(50) := ISBATTRIBUTE;
       BLPRINT     BOOLEAN := TRUE;
       NUPOSITION  NUMBER;
    BEGIN
       BLPRINT := TRUE;
       
       IF ISBATTRIBUTE = CSBNEWSELECT THEN
          OCLOUTPUT := UT_LOB.CREATECLOB(ISBVALUE,IONUPOSITION,OCLOUTPUT);
          OCLOUTPUT := UT_LOB.CREATECLOB(CSBENTER,IONUPOSITION,OCLOUTPUT);
          BLPRINT := FALSE;
       END IF;

       IF ISBATTRIBUTE = CSBNEWRECORD THEN
          OCLOUTPUT := UT_LOB.CREATECLOB(ISBVALUE,IONUPOSITION,OCLOUTPUT);
          BLPRINT := FALSE;
       END IF;

       IF BLPRINT THEN
          OCLOUTPUT :=  UT_LOB.CREATECLOB(UPPER(SBATTRIBUTE),IONUPOSITION,OCLOUTPUT);
          OCLOUTPUT :=  UT_LOB.CREATECLOB(GE_BOCONSTANTS.CSBEQUAL,IONUPOSITION,OCLOUTPUT);
          OCLOUTPUT :=  UT_LOB.CREATECLOB(ISBVALUE,IONUPOSITION,OCLOUTPUT);
          OCLOUTPUT :=  UT_LOB.CREATECLOB(GE_BOCONSTANTS.CSBSEMICOLON,IONUPOSITION,OCLOUTPUT);
       END IF;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE SETOUTPUT
    (
       OSBOUTPUT    IN OUT VARCHAR2,
       ISBATTRIBUTE IN     VARCHAR2,
       ISBVALUE     IN     VARCHAR2
    )
    IS
       SBATTRIBUTE VARCHAR2(50) := ISBATTRIBUTE;
       BLPRINT     BOOLEAN := TRUE;
    BEGIN
        BLPRINT := TRUE;
        IF ISBATTRIBUTE = CSBNEWSELECT THEN
           OSBOUTPUT := OSBOUTPUT||ISBVALUE||CSBENTER;
           BLPRINT := FALSE;
        END IF;

        IF ISBATTRIBUTE = CSBNEWRECORD THEN
           OSBOUTPUT := OSBOUTPUT||ISBVALUE;
           BLPRINT := FALSE;
        END IF;

        IF BLPRINT THEN
           OSBOUTPUT := OSBOUTPUT||
                        UPPER(SBATTRIBUTE)||
                        GE_BOCONSTANTS.CSBEQUAL||
                        ISBVALUE||GE_BOCONSTANTS.CSBSEMICOLON;
        END IF;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    FUNCTION CUTPREFIX (ISBINPUT IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
       IF SUBSTR(ISBINPUT,1,2) IN (CSBPREFIXNUMBER, CSBPREFIXVARCHAR, CSBPREFIXDATE)
       THEN
          RETURN SUBSTR(ISBINPUT,3,LENGTH(ISBINPUT));
       END IF;
       RETURN ISBINPUT;
    END;


    PROCEDURE DELETETABLENOTIFICATION
    IS
    BEGIN
        TBBCNOTIFICATION.DELETE;
    END;


    PROCEDURE DELETETABLENOTIFICATION
    (
    INUNOTIFICATION_ID    IN   GE_NOTIFICATION.NOTIFICATION_ID%TYPE
    ) IS
    BEGIN
       IF TBBCNOTIFICATION.EXISTS(INUNOTIFICATION_ID) THEN
            TBBCNOTIFICATION.DELETE(INUNOTIFICATION_ID);
        END IF;
    END;



    FUNCTION CUTALLPREFIX (ISBINPUT IN VARCHAR2) RETURN VARCHAR2
    IS
       SBCADENA    VARCHAR2(4000);
       TBPARAMETER UT_STRING.TYTB_STRING;
    BEGIN
       SBCADENA := ISBINPUT;

       UT_STRING.EXTSTRING(ISBINPUT, GE_BOCONSTANTS.CSBSEMICOLON, TBPARAMETER);

       SBCADENA := NULL;

       FOR NUINDICE IN TBPARAMETER.FIRST..TBPARAMETER.LAST LOOP
           SBCADENA := SBCADENA || CUTPREFIX(TBPARAMETER(NUINDICE));
       END LOOP;

       RETURN SBCADENA;
    END;


    PROCEDURE EXISTSTATEMENTXSL (ISBSTATEMENNAME GE_STATEMENT.NAME%TYPE)
    IS
       NUPOSITION PLS_INTEGER;
    BEGIN
        NUPOSITION := DBMS_LOB.INSTR(
                                    RCBCNOTIFICATION.TEMPLATE_XSL,
                                    ISBSTATEMENNAME,
                                    1,
                                    1
                                    );
        IF NUPOSITION = 0 THEN
            
            ERRORS.SETERROR(CNUNULLSELECT,ISBSTATEMENNAME||'|'||RCBCNOTIFICATION.XSL_TEMPLATE_ID); 
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE GETNOTISTATEMENT
    (
       INUNOTIFICATION_ID    IN   GE_NOTIFICATION.NOTIFICATION_ID%TYPE
    )
    IS
    BEGIN
       


       
      OPEN GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT
                              (
                                 INUNOTIFICATION_ID,
                                 GE_BOCONSTANTS.CSBSENT_TYPE_SELE
                               );








    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETNOTISTATEMENTOFCONF
    (
       INUNOTIFICATION_ID    IN   GE_NOTIFICATION.NOTIFICATION_ID%TYPE
    )
    IS
    BEGIN

       


        OPEN GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT
                               (
                                 INUNOTIFICATION_ID,
                                 GE_BOCONSTANTS.CSBSENT_TYPE_CONF
                               );
                               







    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE CREATECONTEXTXML
    (
       OTYQUERYCTX         OUT UT_XMLQUERY.STYCTXQUERY
    )
    IS
       NUINDICE    PLS_INTEGER := 1;
       RCSTATEMENT DAGE_STATEMENT.STYGE_STATEMENT;
       RCNOTISTATE GE_NOTIFI_STATEMENT%ROWTYPE;
    BEGIN
       LOOP
           FETCH GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT INTO RCNOTISTATE;
           EXIT WHEN GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%NOTFOUND;

           DAGE_STATEMENT.GETRECORD(RCNOTISTATE.STATEMENT_ID, RCSTATEMENT);

           
           EXISTSTATEMENTXSL(RCSTATEMENT.NAME);

           

           OTYQUERYCTX(NUINDICE) := UT_XMLQUERY.NEWCONTEXT
                                    (
                                      RCSTATEMENT.STATEMENT,
                                      CNUMETADATA,
                                      RCSTATEMENT.NAME
                                    );

           NUINDICE := NUINDICE +1 ;
       END LOOP;
       CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            RAISE;

       WHEN OTHERS THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE BINDVALUESXML
    (
       ISBINPUT    IN VARCHAR2,
       ITYQUERYCTX IN UT_XMLQUERY.STYCTXQUERY
    )
    IS
       TBPARAMETER UT_STRING.TYTB_STRPARAMETERS;
    BEGIN
       UT_STRING.EXTPARAMETERS
       (
          ISBINPUT,
          GE_BOCONSTANTS.CSBSEMICOLON,
          GE_BOCONSTANTS.CSBEQUAL,
          TBPARAMETER
       );

       
       IF TBPARAMETER.COUNT <= 0 THEN
        RETURN;
       END IF;
       
       FOR NUCONTEXT IN 1..ITYQUERYCTX.COUNT LOOP 
           FOR NUINDEX IN TBPARAMETER.FIRST..TBPARAMETER.LAST LOOP 

               UT_XMLQUERY.SETBINDVALUE
               (
                  ITYQUERYCTX(NUCONTEXT),
                  CUTPREFIX(TBPARAMETER(NUINDEX).SBPARAMETER),
                  TBPARAMETER(NUINDEX).SBVALUE
               );
            END LOOP;
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END;



    FUNCTION GETXML(ITYQUERYCTX IN UT_XMLQUERY.STYCTXQUERY)  RETURN CLOB IS
        CLQUERY CLOB;
        NUERROR NUMBER(5);
        SBERROR VARCHAR2(2000);
    BEGIN
        CLQUERY := UT_XMLQUERY.GETXML(NUERROR,SBERROR); 
        VALIDATEERROR(NUERROR, SBERROR,'UT_XMLQUERY.GETXML');

        RETURN CLQUERY;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE;

        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END;



    
    PROCEDURE PROCESSSTATEMENT
    (
       ISBINPUT             IN VARCHAR2,
       OTYTBSELECT          IN OUT NOCOPY GE_BOINSTANCE.TYTBINSTANCE
    )
    IS
       NUCURSOR    NUMBER(20);
       BLEXITO     BOOLEAN;
       REGTABLAS   GE_BOSTATEMENT.DESCSELECT;
       TBINSTANCE  GE_BOINSTANCE.TYTBINSTANCE;
       TBTMPSELECT GE_BOINSTANCE.TYTBINSTANCE;
       RCNOTISTATE GE_NOTIFI_STATEMENT%ROWTYPE;
       RCSTATEMENT DAGE_STATEMENT.STYGE_STATEMENT;
    BEGIN

       GE_BOINSTANCE.STRDEFAULTTOINSTANCE(ISBINPUT,TBINSTANCE);

       LOOP
           FETCH GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT INTO RCNOTISTATE;

            
           DAGE_STATEMENT.GETRECORD(RCNOTISTATE.STATEMENT_ID, RCSTATEMENT);

           EXIT WHEN GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%NOTFOUND;
           
           GE_BOSTATEMENT.OPENSTATEMENT(
                                        TBINSTANCE, RCNOTISTATE.STATEMENT_ID,
                                        REGTABLAS, NUCURSOR
                                       );
            
            TBTMPSELECT := SETINSTANCE(CSBNEWSELECT,RCSTATEMENT.NAME);
            
            OTYTBSELECT := GE_BOINSTANCE.COPYINSTANCE
                            (
                               OTYTBSELECT,
                               TBTMPSELECT
                            );

            
            GE_BOINSTANCE.DELETETABLE(TBTMPSELECT);

           
           LOOP
               BLEXITO := GE_BOSTATEMENT.FETCHSTATEMENT(
                                                         NUCURSOR,
                                                         REGTABLAS,
                                                         TBTMPSELECT
                                                        );
               EXIT WHEN NOT BLEXITO;
               
               OTYTBSELECT := GE_BOINSTANCE.COPYINSTANCE(OTYTBSELECT,TBTMPSELECT);
               
               TBTMPSELECT := SETINSTANCE(CSBNEWRECORD,CSBENTER);
               
               
               OTYTBSELECT := GE_BOINSTANCE.COPYINSTANCE
                              (
                                 OTYTBSELECT,
                                 TBTMPSELECT
                              );
           END LOOP;
           
           GE_BOSTATEMENT.CLOSESTATEMENT(NUCURSOR);
        END LOOP;
        
        
        CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;

        
        FOR N IN OTYTBSELECT.FIRST .. OTYTBSELECT.LAST LOOP
            OTYTBSELECT(N).VALUE_ := REPLACE(OTYTBSELECT(N).VALUE_, CSBAMPERSAND, CSBAMP);
            OTYTBSELECT(N).VALUE_ := REPLACE(OTYTBSELECT(N).VALUE_, CSBLESSTHAN, CSBLT);
            OTYTBSELECT(N).VALUE_ := REPLACE(OTYTBSELECT(N).VALUE_, CSBGREATERTHAN, CSBGT);
        END LOOP;

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            RAISE;

       WHEN OTHERS THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;













    
    PROCEDURE PROCESSSTATEMENTWITHOUTTRANS
    (
       ISBINPUT             IN VARCHAR2,
       OTYTBSELECT          IN OUT NOCOPY GE_BOINSTANCE.TYTBINSTANCE
    )
    IS
       NUCURSOR    NUMBER(20);
       BLEXITO     BOOLEAN;
       REGTABLAS   GE_BOSTATEMENT.DESCSELECT;
       TBINSTANCE  GE_BOINSTANCE.TYTBINSTANCE;
       TBTMPSELECT GE_BOINSTANCE.TYTBINSTANCE;
       RCNOTISTATE GE_NOTIFI_STATEMENT%ROWTYPE;
       RCSTATEMENT DAGE_STATEMENT.STYGE_STATEMENT;
       NUINDICE INTEGER;

    BEGIN
        GE_BOINSTANCE.STRDEFAULTTOINSTANCE(ISBINPUT,TBINSTANCE);














        BLEXITO := TRUE;
        LOOP
            FETCH GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT INTO RCNOTISTATE;

            
            DAGE_STATEMENT.GETRECORD(RCNOTISTATE.STATEMENT_ID, RCSTATEMENT);

            EXIT WHEN GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%NOTFOUND;

            GE_BOSTATEMENT.OPENSTATEMENT(
                                        TBINSTANCE, RCNOTISTATE.STATEMENT_ID,
                                        REGTABLAS, NUCURSOR
                                       );
            
            GE_BOINSTANCE.DELETETABLE(TBTMPSELECT);

           
            BLEXITO := GE_BOSTATEMENT.FETCHSTATEMENT(
                                                        NUCURSOR,
                                                        REGTABLAS,
                                                        TBTMPSELECT
                                                        );

            
            IF  BLEXITO THEN
                OTYTBSELECT := GE_BOINSTANCE.COPYINSTANCE(OTYTBSELECT,TBTMPSELECT);
            ELSE
                ERRORS.SETERROR(CNUERRORSTATEMENT, RCNOTISTATE.NOTIFICATION_ID||'|'||RCNOTISTATE.STATEMENT_ID);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            GE_BOSTATEMENT.CLOSESTATEMENT(NUCURSOR);


        END LOOP;
        
        CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
        
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            RAISE;

       WHEN OTHERS THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE GETNOTIFICATION
    (
       INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       INUORIGIN_MODULE    IN GE_MODULE.MODULE_ID%TYPE
    )
    IS
    BEGIN

       
       IF NOT TBBCNOTIFICATION.EXISTS(INUNOTIFICATION_ID) THEN
          TBBCNOTIFICATION(INUNOTIFICATION_ID) :=
               GE_BCNOTIFICATION.GETNOTIFICATION(INUNOTIFICATION_ID);
       END IF;

       
       RCBCNOTIFICATION := TBBCNOTIFICATION(INUNOTIFICATION_ID);


       RCNOTIFICATION_LOG.NOTIFICATION_ID      := RCBCNOTIFICATION.NOTIFICATION_ID;
       RCNOTIFICATION_LOG.TARGET_MODULE_ID     := RCBCNOTIFICATION.TARGET_MODULE_ID;
       RCNOTIFICATION_LOG.NOTIFICATION_TYPE_ID := RCBCNOTIFICATION.NOTIFICATION_TYPE_ID;
       RCNOTIFICATION_LOG.PARAMETERS           := RCBCNOTIFICATION.PARAMETERS;

       IF INUORIGIN_MODULE <> RCBCNOTIFICATION.ORIGIN_MODULE_ID THEN
          ERRORS.SETERROR(CNUORIGININVALID,INUORIGIN_MODULE||'|'||INUNOTIFICATION_ID);
          RAISE EX.CONTROLLED_ERROR;
       END IF;

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE INITIALIZELOG
    (
       INUNOTIFICATION_ID IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       INUORIGIN_MODULE   IN GE_MODULE.MODULE_ID%TYPE,
       INUEXTERNAL_ID     IN GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE,
       ISBINPUT           IN GE_NOTIFICATION_LOG.INPUT_DATA%TYPE
    )
    IS
    BEGIN

       
       RCNOTIFICATION_LOG.NOTIFICATION_LOG_ID   := NULL;

       RCNOTIFICATION_LOG.EXTERNAL_ID           := INUEXTERNAL_ID;
       RCNOTIFICATION_LOG.DATE_                 := SYSDATE;
       RCNOTIFICATION_LOG.STATUS                := CSBSTATUS_RE;
       RCNOTIFICATION_LOG.PARAMETERS            := NULL;
       RCNOTIFICATION_LOG.OUTPUT                := CSBOUTPUT;
       RCNOTIFICATION_LOG.OUTPUT_TEXT           := NULL;
       RCNOTIFICATION_LOG.OUTPUT_CLOB           := EMPTY_CLOB;
       RCNOTIFICATION_LOG.OUTPUT_BLOB           := EMPTY_BLOB;
       RCNOTIFICATION_LOG.ATTEMPT_NUMBER        := 1;
       RCNOTIFICATION_LOG.ATTEMPT_DATE          := SYSDATE;
       RCNOTIFICATION_LOG.ATTEMPT_NEXT          := SYSDATE + CNUNEXT_ATTEMPT_NUMBER;
       RCNOTIFICATION_LOG.INPUT_DATA            := ISBINPUT;
       RCNOTIFICATION_LOG.ORIGIN_MODULE_ID      := INUORIGIN_MODULE;
       RCNOTIFICATION_LOG.ERROR_CODE            := GE_BOCONSTANTS.CNUSUCCESS;
       RCNOTIFICATION_LOG.ERROR_MESSAGE         := GE_BOCONSTANTS.CSBNOMESSAGE;

       

       GETNOTIFICATION(INUNOTIFICATION_ID, INUORIGIN_MODULE);
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    



    FUNCTION FORMATOUTPUTCLOB
    (
       ITYTBINSTANCE IN GE_BOINSTANCE.TYTBINSTANCE
    )
    RETURN CLOB
    IS
       CLCADENA CLOB;
       NUPOSITION NUMBER := 1;
    BEGIN
       FOR NUINDICE IN ITYTBINSTANCE.FIRST..ITYTBINSTANCE.LAST LOOP
        SETOUTPUTCLOB
           (
              CLCADENA,
              ITYTBINSTANCE(NUINDICE).NAME_ATTRIBUTE,
              ITYTBINSTANCE(NUINDICE).VALUE_,
              NUPOSITION
           );
       END LOOP;

       RETURN CLCADENA;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;












    
    FUNCTION FORMATOUTPUTCLOBWITHOUTTRANS
    (
       ITYTBINSTANCE IN GE_BOINSTANCE.TYTBINSTANCE,
       INUXSL_TEMPLATE_ID   IN GE_NOTIFICATION.XSL_TEMPLATE_ID%TYPE
    )
    RETURN CLOB
    IS
       CLCADENA CLOB; 
       NUPOSITION NUMBER := 1;
       CLTEMPLATE CLOB := EMPTY_CLOB();
       SBTEMPLATE VARCHAR2(32767) := NULL;
       SBTAB VARCHAR2(200);
       CLTEMPLATE_END CLOB := EMPTY_CLOB();
       NUPOS NUMBER := 1;
    BEGIN
    
    CLTEMPLATE := DAGE_XSL_TEMPLATE.FCLGETTEMPLATE_XSL(INUXSL_TEMPLATE_ID);
    SBTEMPLATE := UT_LOB.GETVARCHAR2(CLTEMPLATE);

       IF ITYTBINSTANCE.COUNT = 0 THEN
            RETURN CLTEMPLATE_END;
       END IF;

       FOR NUINDICE IN ITYTBINSTANCE.FIRST..ITYTBINSTANCE.LAST LOOP
        SETOUTPUTCLOB
           (
              CLCADENA,
              ITYTBINSTANCE(NUINDICE).NAME_ATTRIBUTE,
              ITYTBINSTANCE(NUINDICE).VALUE_,
              NUPOSITION
           );

          SBTAB := '�'||ITYTBINSTANCE(NUINDICE).NAME_ATTRIBUTE||'�';
          SBTEMPLATE := REPLACE(SBTEMPLATE, SBTAB, ITYTBINSTANCE(NUINDICE).VALUE_);

       END LOOP;

       CLTEMPLATE_END := UT_LOB.CREATECLOB(SBTEMPLATE, NUPOS, CLTEMPLATE_END);
       
       RETURN CLTEMPLATE_END;

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;













    
    FUNCTION FORMATOUTPUTWITHOUTTRANS
    (
       ITYTBINSTANCE IN GE_BOINSTANCE.TYTBINSTANCE,
       INUXSL_TEMPLATE_ID   IN GE_NOTIFICATION.XSL_TEMPLATE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
       SBCADENA VARCHAR2(4000);
       NULONGITUD NUMBER(5);
       CLTEMPLATE CLOB := EMPTY_CLOB();
       SBTEMPLATE VARCHAR2(4000) := NULL;
       SBTAB VARCHAR2(200);
    BEGIN

        CLTEMPLATE := DAGE_XSL_TEMPLATE.FCLGETTEMPLATE_XSL(INUXSL_TEMPLATE_ID);
        SBTEMPLATE := UT_LOB.GETVARCHAR2(CLTEMPLATE);

        IF ITYTBINSTANCE.COUNT = 0 THEN
            RETURN SBTEMPLATE;
        END IF;

        FOR NUINDICE IN ITYTBINSTANCE.FIRST..ITYTBINSTANCE.LAST
        LOOP
            
            NULONGITUD := NVL(LENGTH(SBCADENA), 0) +
                        NVL(LENGTH(ITYTBINSTANCE(NUINDICE).NAME_ATTRIBUTE), 0) +
                        NVL(LENGTH(ITYTBINSTANCE(NUINDICE).VALUE_), 0) + 2;
            IF NULONGITUD > CNUMAXLENGTHSTRING THEN
                RAISE EXERRMAXLENGTH;
            END IF;

            SETOUTPUT
            (
              SBCADENA,
              ITYTBINSTANCE(NUINDICE).NAME_ATTRIBUTE,
              ITYTBINSTANCE(NUINDICE).VALUE_
            );

            SBTAB := '�'||ITYTBINSTANCE(NUINDICE).NAME_ATTRIBUTE||'�';
            SBTEMPLATE := REPLACE(SBTEMPLATE, SBTAB, ITYTBINSTANCE(NUINDICE).VALUE_);

            END LOOP;

            RETURN SBTEMPLATE;

    EXCEPTION
        WHEN EXERRMAXLENGTH THEN
            
            ERRORS.SETERROR(CNULENGTHSTRINGOUT);
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    



    FUNCTION FORMATOUTPUT
    (
       ITYTBINSTANCE IN GE_BOINSTANCE.TYTBINSTANCE
    )
    RETURN VARCHAR2
    IS
       SBCADENA VARCHAR2(4000);
       NULONGITUD NUMBER(5);
    BEGIN
       FOR NUINDICE IN ITYTBINSTANCE.FIRST..ITYTBINSTANCE.LAST
       LOOP
          
          NULONGITUD := NVL(LENGTH(SBCADENA), 0) +
                        NVL(LENGTH(ITYTBINSTANCE(NUINDICE).NAME_ATTRIBUTE), 0) +
                        NVL(LENGTH(ITYTBINSTANCE(NUINDICE).VALUE_), 0) + 2;
                        
          IF NULONGITUD > CNUMAXLENGTHSTRING THEN
             RAISE EXERRMAXLENGTH;
          END IF;
        
          SETOUTPUT
          (
              SBCADENA,
              ITYTBINSTANCE(NUINDICE).NAME_ATTRIBUTE,
              ITYTBINSTANCE(NUINDICE).VALUE_
          );
       END LOOP;

       RETURN SBCADENA;
    EXCEPTION
        WHEN EXERRMAXLENGTH THEN
            
            ERRORS.SETERROR(CNULENGTHSTRINGOUT);
            RAISE;
            
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE EXECTRANSFORMATIONXSL
    (
       OCLTRANSFORMA OUT NOCOPY CLOB
    )
    IS
       CLQUERYXML          CLOB;
       TYQUERYCTX          UT_XMLQUERY.STYCTXQUERY;
       TYRFNOTIFISTATEMENT CONSTANTS.TYREFCURSOR;
       NUERROR             NUMBER(5);
       SBERROR             VARCHAR2(2000);
    BEGIN

       GENERAXML(RCBCNOTIFICATION.NOTIFICATION_ID, RCNOTIFICATION_LOG.INPUT_DATA, CLQUERYXML);
       
       OCLTRANSFORMA := UT_XSLTRANSFORM.GENERATE
                       (
                          CLQUERYXML,
                          RCBCNOTIFICATION.TEMPLATE_XSL,
                          NUERROR,
                          SBERROR
                       );

        
        VALIDATEERROR(NUERROR, SBERROR,'UT_XSLTRANSFORM.GENERATE');

        IF UT_LOB.BLLOBCLOB_ISNULL(OCLTRANSFORMA) THEN
            ERRORS.SETERROR(CNUNULLTRANSFORM); 
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
    PROCEDURE TRYTRANSFORMTOCLOB
    (
       OCLTRANSFOMA  OUT NOCOPY CLOB
    ) IS

       TYTBSELECT          GE_BOINSTANCE.TYTBINSTANCE;
    BEGIN

       
       GETNOTISTATEMENT(RCBCNOTIFICATION.NOTIFICATION_ID);

       

       PROCESSSTATEMENT(RCNOTIFICATION_LOG.INPUT_DATA, TYTBSELECT);

       OCLTRANSFOMA := FORMATOUTPUTCLOB(TYTBSELECT); 
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;















    
    PROCEDURE TRYTRANSFORMTOCLOBWITHOUTTRANS
    (
       OCLTRANSFOMA  OUT NOCOPY CLOB
    ) IS
       TYRFNOTIFISTATEMENT CONSTANTS.TYREFCURSOR;
       TYTBSELECT          GE_BOINSTANCE.TYTBINSTANCE;
       NUINDICE INTEGER;
    BEGIN

       
       GETNOTISTATEMENT(RCBCNOTIFICATION.NOTIFICATION_ID);

       
       PROCESSSTATEMENTWITHOUTTRANS(RCNOTIFICATION_LOG.INPUT_DATA, TYTBSELECT);

      IF RCBCNOTIFICATION.XSL_TEMPLATE_ID IS  NULL THEN
        OCLTRANSFOMA := FORMATOUTPUTCLOB(TYTBSELECT); 
      ELSE
        OCLTRANSFOMA := FORMATOUTPUTCLOBWITHOUTTRANS(TYTBSELECT, RCBCNOTIFICATION.XSL_TEMPLATE_ID); 
      END IF;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
    PROCEDURE EXECTRANSFORMATIONTEXT
    (
       OSBTRANSFOMA  OUT NOCOPY VARCHAR2
    ) IS
       TYRFNOTIFISTATEMENT CONSTANTS.TYREFCURSOR;
       TYTBSELECT          GE_BOINSTANCE.TYTBINSTANCE;
    BEGIN

       
       GETNOTISTATEMENT(RCBCNOTIFICATION.NOTIFICATION_ID);

       
       PROCESSSTATEMENT(RCNOTIFICATION_LOG.INPUT_DATA, TYTBSELECT);

       OSBTRANSFOMA := FORMATOUTPUT(TYTBSELECT); 
    EXCEPTION
       
       WHEN EXERRMAXLENGTH THEN
            RAISE;
            
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
            
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

















    PROCEDURE EXECTRANSFORMATEXTWITHOUTTRANS
    (
       OSBTRANSFOMA  OUT NOCOPY VARCHAR2
    ) IS
       TYRFNOTIFISTATEMENT CONSTANTS.TYREFCURSOR;
       TYTBSELECT          GE_BOINSTANCE.TYTBINSTANCE;
    BEGIN

       
       GETNOTISTATEMENT(RCBCNOTIFICATION.NOTIFICATION_ID);

       
       PROCESSSTATEMENTWITHOUTTRANS(RCNOTIFICATION_LOG.INPUT_DATA, TYTBSELECT);

      IF RCBCNOTIFICATION.XSL_TEMPLATE_ID IS  NULL THEN
        OSBTRANSFOMA := FORMATOUTPUT(TYTBSELECT); 
      ELSE
        OSBTRANSFOMA := FORMATOUTPUTWITHOUTTRANS(TYTBSELECT, RCBCNOTIFICATION.XSL_TEMPLATE_ID); 
      END IF;

    EXCEPTION
       
       WHEN EXERRMAXLENGTH THEN
            RAISE;

       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE SAVELOG
    (
       INUERRCODE IN NUMBER,
       ISBERRMSG  IN VARCHAR2,
       ONULOG_ID  OUT NUMBER
    ) IS
    BEGIN
        
        IF NOT BLVALID_INPUT THEN
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
       IF INUERRCODE = GE_BCNOTIFICATION.CNUINVALID_NOTIFICATION THEN
            RAISE EX.CONTROLLED_ERROR;
       END IF;

       
       IF RCBCNOTIFICATION.REPORT_LOG = GE_BOCONSTANTS.CSBNO THEN
          
          


          NULL;
       END IF;

       RCNOTIFICATION_LOG.ERROR_CODE    := INUERRCODE;
       RCNOTIFICATION_LOG.ERROR_MESSAGE := ISBERRMSG;
       
       
       RCNOTIFICATION_LOG.INPUT_DATA := REPLACE(RCNOTIFICATION_LOG.INPUT_DATA,'%61\'' ,'=');--doble comilla para ver bien
       RCNOTIFICATION_LOG.INPUT_DATA := REPLACE(RCNOTIFICATION_LOG.INPUT_DATA,'%59\'',';');--doble comilla para ver bien
       RCNOTIFICATION_LOG.INPUT_DATA := REPLACE(RCNOTIFICATION_LOG.INPUT_DATA,'%37\'','%'); --doble comilla para ver bien

       IF RCNOTIFICATION_LOG.NOTIFICATION_LOG_ID IS NULL THEN
           RCNOTIFICATION_LOG.NOTIFICATION_LOG_ID := GE_BOSEQUENCE.NEXTGE_NOTIFICATION_LOG;
           DAGE_NOTIFICATION_LOG.INSRECORD(RCNOTIFICATION_LOG);
       ELSE
           DAGE_NOTIFICATION_LOG.UPDRECORD(RCNOTIFICATION_LOG);
       END IF;

       ONULOG_ID := RCNOTIFICATION_LOG.NOTIFICATION_LOG_ID;
        

















       
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    


























    PROCEDURE PROCESSSTATEMENTMAIL
    (
       ISBINPUT             IN VARCHAR2
    )
    IS
       NUCURSOR    NUMBER(20);
       BLEXITO     BOOLEAN;
       REGTABLAS   GE_BOSTATEMENT.DESCSELECT;
       TBINSTANCE  GE_BOINSTANCE.TYTBINSTANCE;
       TBTMPSELECT GE_BOINSTANCE.TYTBINSTANCE;
       RCNOTISTATE GE_NOTIFI_STATEMENT%ROWTYPE;
       RCSTATEMENT DAGE_STATEMENT.STYGE_STATEMENT;
       RETYTBINSTANCE GE_BOINSTANCE.TYRCINSTANCE;
       BLFETCH BOOLEAN := FALSE;

    BEGIN

       UT_TRACE.TRACE('GE_BONOTIFICATION.ProcessStatementMail entra ',6);
       GE_BOINSTANCE.STRDEFAULTTOINSTANCE(ISBINPUT,TBINSTANCE);

       FETCH GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT INTO RCNOTISTATE;

        
       DAGE_STATEMENT.GETRECORD(RCNOTISTATE.STATEMENT_ID, RCSTATEMENT);

       GE_BOSTATEMENT.OPENSTATEMENT(
                                    TBINSTANCE, RCNOTISTATE.STATEMENT_ID,
                                    REGTABLAS, NUCURSOR
                                   );
        

        TBTMPSELECT := SETINSTANCE(CSBNEWSELECT,RCSTATEMENT.NAME);

        
        GE_BOINSTANCE.DELETETABLE(TBTMPSELECT);

       
       LOOP
           
           BLEXITO := GE_BOSTATEMENT.FETCHSTATEMENT( NUCURSOR,
                                                     REGTABLAS,
                                                     TBTMPSELECT
                                                    );

           EXIT WHEN NOT BLEXITO;
           
           
           BLFETCH := TRUE;
           
           
           GE_BONOTIFICATIONMAIL.SENDMAIL(RCNOTIFICATION_LOG,
                                          TBTMPSELECT,
                                          RCNOTISTATE.STATEMENT_ID,
                                          RCBCNOTIFICATION.NOTIFICATION_ID
                                          );
       END LOOP;

       
       IF NOT BLFETCH THEN
            ERRORS.SETERROR(CNUERR_NOT_DATA_MAIL,
                            RCNOTISTATE.STATEMENT_ID||'|'||
                            RCBCNOTIFICATION.NOTIFICATION_ID);
            RAISE EX.CONTROLLED_ERROR;
       END IF;

       
       GE_BOSTATEMENT.CLOSESTATEMENT(NUCURSOR);

        
       CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
       
       UT_TRACE.TRACE('GE_BONOTIFICATION.ProcessStatementMail fin ',6);

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            RAISE;

       WHEN OTHERS THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    






















    PROCEDURE PROCESSSTATEMENTFILE
    (
       ISBINPUT             IN VARCHAR2
    )
    IS
       NUCURSOR    NUMBER(20);
       BLEXITO     BOOLEAN;
       REGTABLAS   GE_BOSTATEMENT.DESCSELECT;
       TBINSTANCE  GE_BOINSTANCE.TYTBINSTANCE;
       TBTMPSELECT GE_BOINSTANCE.TYTBINSTANCE;
       RCNOTISTATE GE_NOTIFI_STATEMENT%ROWTYPE;
       RCSTATEMENT DAGE_STATEMENT.STYGE_STATEMENT;
       RETYTBINSTANCE GE_BOINSTANCE.TYRCINSTANCE;
       BLFETCH BOOLEAN := FALSE;

    BEGIN

       UT_TRACE.TRACE('GE_BONOTIFICATION.ProcessStatementFile entra ',6);
       
       GE_BOINSTANCE.STRDEFAULTTOINSTANCE(ISBINPUT,TBINSTANCE);

       FETCH GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT INTO RCNOTISTATE;

        
       DAGE_STATEMENT.GETRECORD(RCNOTISTATE.STATEMENT_ID, RCSTATEMENT);

       GE_BOSTATEMENT.OPENSTATEMENT(
                                    TBINSTANCE, RCNOTISTATE.STATEMENT_ID,
                                    REGTABLAS, NUCURSOR
                                   );
        
        TBTMPSELECT := SETINSTANCE(CSBNEWSELECT,RCSTATEMENT.NAME);
        
        
        
        GE_BOINSTANCE.DELETETABLE(TBTMPSELECT);

       
       LOOP
           
           BLEXITO := GE_BOSTATEMENT.FETCHSTATEMENT( NUCURSOR,
                                                     REGTABLAS,
                                                     TBTMPSELECT
                                                    );

           EXIT WHEN NOT BLEXITO;

           
           BLFETCH := TRUE;

           
           
           GE_BONOTIFICATIONFILE.SENDFILE(RCNOTIFICATION_LOG,
                                          TBTMPSELECT,
                                          RCNOTISTATE.STATEMENT_ID,
                                          RCBCNOTIFICATION.NOTIFICATION_ID
                                          );
       END LOOP;

       
       IF NOT BLFETCH THEN
            ERRORS.SETERROR(CNUERR_NOT_DATA_MAIL,
                            RCNOTISTATE.STATEMENT_ID||'|'||
                            RCBCNOTIFICATION.NOTIFICATION_ID);
            RAISE EX.CONTROLLED_ERROR;
       END IF;


       
       GE_BOSTATEMENT.CLOSESTATEMENT(NUCURSOR);

        
       CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
       
       UT_TRACE.TRACE('GE_BONOTIFICATION.ProcessStatementFile fin ',6);

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            RAISE;

       WHEN OTHERS THEN
            IF GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT%ISOPEN THEN
                CLOSE GE_BCNOTIFI_STATEMENT.CUNOTIFISTATEMENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
    END;

    















    FUNCTION FBLEXISTNOTFINMESGALERT
    (
        INUNOTIFID  IN  GE_NOTIFICATION.NOTIFICATION_ID%TYPE

    ) RETURN BOOLEAN
    IS
        
        
        SBVARIABLE  VARCHAR2(2);
        
        CURSOR CUNOTIFBYMESGALER
        (
            INUNOTIFICATIONID   NUMBER
        )
        IS
            SELECT 'X'
            FROM GE_MESG_ALERT
            WHERE GE_MESG_ALERT.NOTIFICATION_ID = INUNOTIFICATIONID;
        
    BEGIN
        
        UT_TRACE.TRACE('INICIO Ge_boNotification.fblExistNotfInMesgAlert',10);
        
        IF CUNOTIFBYMESGALER%ISOPEN THEN CLOSE CUNOTIFBYMESGALER; END IF;
        
        OPEN CUNOTIFBYMESGALER(INUNOTIFID);
        FETCH CUNOTIFBYMESGALER INTO SBVARIABLE;

        IF CUNOTIFBYMESGALER%NOTFOUND THEN
            CLOSE CUNOTIFBYMESGALER;
            RETURN FALSE;
        END IF;

        CLOSE CUNOTIFBYMESGALER;

        RETURN TRUE;
        
        UT_TRACE.TRACE('FIN Ge_boNotification.fblExistNotfInMesgAlert',10);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUNOTIFBYMESGALER%ISOPEN THEN CLOSE CUNOTIFBYMESGALER; END IF;
            RAISE;
        WHEN OTHERS THEN
            IF CUNOTIFBYMESGALER%ISOPEN THEN CLOSE CUNOTIFBYMESGALER; END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTNOTFINMESGALERT;


    


















    PROCEDURE GETDATAOFINPUT
    (
        ITBINSTANCE     IN  GE_BOINSTANCE.TYTBINSTANCE,
        ONUORDERID      OUT NUMBER,
        ONUOPERUNITID   OUT NUMBER,
        ONUPERSONID     OUT NUMBER,
        ONUNOTITYPEID   OUT NUMBER,
        OSBPERSEXCLUD   OUT VARCHAR2,
        OSBFIELD        OUT VARCHAR2
    )
    IS
        
        NUINDICE        NUMBER;
    BEGIN
        
        
        IF (ITBINSTANCE.FIRST IS NOT NULL) THEN
            NUINDICE := ITBINSTANCE.FIRST;

            LOOP
                
                IF (ITBINSTANCE(NUINDICE).NAME_ATTRIBUTE = CSBORDERID ) THEN
                    ONUORDERID := ITBINSTANCE(NUINDICE).VALUE_;
                END IF;
                
                IF (ITBINSTANCE(NUINDICE).NAME_ATTRIBUTE = CSBOPERUNIT ) THEN
                    ONUOPERUNITID := ITBINSTANCE(NUINDICE).VALUE_;
                END IF;
                
                IF (ITBINSTANCE(NUINDICE).NAME_ATTRIBUTE = CSBPERSONID ) THEN
                    ONUPERSONID := ITBINSTANCE(NUINDICE).VALUE_;
                END IF;
                
                IF (ITBINSTANCE(NUINDICE).NAME_ATTRIBUTE = CSBNOTIFTYPE ) THEN
                    ONUNOTITYPEID := ITBINSTANCE(NUINDICE).VALUE_;
                END IF;
                
                
                IF (ITBINSTANCE(NUINDICE).NAME_ATTRIBUTE = CSBEXCLU_PERS ) THEN
                    OSBPERSEXCLUD := ITBINSTANCE(NUINDICE).VALUE_;
                END IF;

                 
                IF (ITBINSTANCE(NUINDICE).NAME_ATTRIBUTE = CSBFIELD ) THEN
                    OSBFIELD := ITBINSTANCE(NUINDICE).VALUE_;
                END IF;
                
                NUINDICE := ITBINSTANCE.NEXT(NUINDICE);
                EXIT WHEN NUINDICE IS NULL;
                
            END LOOP;
        END IF;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETDATAOFINPUT;


    





















    PROCEDURE SENDNOTIFEMAIL
    (
        INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
        ISBMESSAGENOTF      IN GE_NOTIFICATION_LOG.OUTPUT_TEXT%TYPE
    )
    IS
        
        SBREMITENTE     VARCHAR2(2000)   := GE_BOPARAMETER.FSBGET('NOTIF_MAIL_FROM');
        SBMAIL          VARCHAR2(100);

        TBINSTANCE      GE_BOINSTANCE.TYTBINSTANCE;
        TBDATAMAIL      GE_BOINSTANCE.TYTBINSTANCE;
        
        NUORDERID       NUMBER;
        NUOPERUNITID    NUMBER;
        NUPERSONID      NUMBER;
        NUNOTIFTYPE     NUMBER;
        SBPERSEXCLUD    VARCHAR2(4000);
        SBFIELD         VARCHAR2(4000);
        
        CSBATTR_PERSON   CONSTANT VARCHAR2(30) := 'Persona';
        CSBATTR_OPERUNIT CONSTANT VARCHAR2(30) := 'Unidad de Trabajo';

    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BONotification.sendNotifEmail',20);

        
        GE_BOINSTANCE.STRDEFAULTTOINSTANCE(RCNOTIFICATION_LOG.INPUT_DATA,TBINSTANCE);

        
        GETDATAOFINPUT( TBINSTANCE,NUORDERID,NUOPERUNITID,NUPERSONID,NUNOTIFTYPE,SBPERSEXCLUD,SBFIELD);

        IF(SBFIELD IS NOT NULL) THEN
            SBMAIL := SBFIELD;
        ELSIF (NUPERSONID IS NOT NULL) THEN
            SBMAIL := DAGE_PERSON.FSBGETE_MAIL(NUPERSONID,0);
            IF (SBMAIL IS NULL) THEN
                ERRORS.SETERROR(18342, CSBATTR_PERSON || ' |'|| NUPERSONID || ' - '||DAGE_PERSON.FSBGETNAME_(NUPERSONID,0));
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        ELSIF(NUOPERUNITID IS NOT NULL) THEN
            SBMAIL := DAOR_OPERATING_UNIT.FSBGETE_MAIL(NUOPERUNITID,0);
            IF (SBMAIL IS NULL) THEN
                ERRORS.SETERROR(18342, CSBATTR_OPERUNIT || ' |'|| NUOPERUNITID);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        
        TBDATAMAIL(1).VALUE_ := SBREMITENTE; 
        TBDATAMAIL(2).VALUE_ := SBMAIL; 
        TBDATAMAIL(3).VALUE_ := ''; 
        TBDATAMAIL(4).VALUE_ := 'Notificaci�n Automatica de alertas';  
        TBDATAMAIL(5).VALUE_ := 'text/plain'; 
        TBDATAMAIL(6).VALUE_ := ISBMESSAGENOTF; 
        TBDATAMAIL(7).VALUE_ := 'txt';

        
        TBDATAMAIL(1).NAME_ATTRIBUTE := 'FROM_MAIL'; 
        TBDATAMAIL(2).NAME_ATTRIBUTE := 'TO_MAIL'; 
        TBDATAMAIL(3).NAME_ATTRIBUTE := 'CC_MAIL'; 
        TBDATAMAIL(4).NAME_ATTRIBUTE := 'SUBJECT_MAIL';  
        TBDATAMAIL(5).NAME_ATTRIBUTE := 'CONTENT_TYPE_MAIL'; 
        TBDATAMAIL(6).NAME_ATTRIBUTE := 'MESSAGE_MAIL'; 
        TBDATAMAIL(7).NAME_ATTRIBUTE := 'FORMAT_ATTACHMENT';

        GE_BONOTIFICATIONMAIL.SENDMAIL( RCNOTIFICATION_LOG,
                                        TBDATAMAIL,
                                        NULL,
                                        RCBCNOTIFICATION.NOTIFICATION_ID
                                      );
                                      
        UT_TRACE.TRACE('FIN GE_BONotification.sendNotifEmail',20);

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SENDNOTIFEMAIL;


    




































    PROCEDURE SENDMAIL
    IS
       TYRFNOTIFISTATEMENT CONSTANTS.TYREFCURSOR;
       TYTBSELECT          GE_BOINSTANCE.TYTBINSTANCE;
       
       NUCLASSNOTIFID      GE_NOTIFICATION_CLASS.NOTIFICATION_CLASS_ID%TYPE;
       
    BEGIN

        UT_TRACE.TRACE('GE_BONotification.SendMAIL inicio',6);

        
        

        
        NUCLASSNOTIFID := DAGE_NOTIFICATION.FNUGETNOTIFICATION_CLASS_ID
                            (
                                RCBCNOTIFICATION.NOTIFICATION_ID
                            );
                            
        
        
        
        IF (  NUCLASSNOTIFID = GE_BOCONSTANTS.CNUCLASSNOTIFOFENTITY AND
              FBLEXISTNOTFINMESGALERT(RCBCNOTIFICATION.NOTIFICATION_ID)
            ) THEN
	        SENDNOTIFEMAIL( RCBCNOTIFICATION.NOTIFICATION_ID,
                            RCNOTIFICATION_LOG.OUTPUT_TEXT
                         );
            RETURN;
        END IF;
        

        
        GE_BCNOTIFI_STATEMENT.VALNOTISTATBYCONFI(RCBCNOTIFICATION.NOTIFICATION_ID);

        
        GETNOTISTATEMENTOFCONF(RCBCNOTIFICATION.NOTIFICATION_ID);

        
        PROCESSSTATEMENTMAIL(RCNOTIFICATION_LOG.INPUT_DATA); 

        UT_TRACE.TRACE('GE_BONotification.SendMAIL fin',6);

    EXCEPTION
       
       WHEN EXERRMAXLENGTH THEN
            RAISE;
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    



























    PROCEDURE SENDFILE
    IS
       TYRFNOTIFISTATEMENT CONSTANTS.TYREFCURSOR;
       TYTBSELECT          GE_BOINSTANCE.TYTBINSTANCE;
    BEGIN

        UT_TRACE.TRACE('GE_BONotification.SendFILE inicio',6);

        
        GE_BCNOTIFI_STATEMENT.VALNOTISTATBYCONFI(RCBCNOTIFICATION.NOTIFICATION_ID);

        
        GETNOTISTATEMENTOFCONF(RCBCNOTIFICATION.NOTIFICATION_ID);

        
        PROCESSSTATEMENTFILE(RCNOTIFICATION_LOG.INPUT_DATA); 

        UT_TRACE.TRACE('GE_BONotification.SendFILE fin',6);

    EXCEPTION
       
       WHEN EXERRMAXLENGTH THEN
            RAISE;
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    






















    PROCEDURE SENDNOTIFSMS
    (
        INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
        ISBMESSAGENOTF      IN GE_NOTIFICATION_LOG.OUTPUT_TEXT%TYPE,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        
        SBSWITCH            VARCHAR2(50) := GE_BOPARAMETER.FSBGET(CSBSMS_PLATFORM);
        SBMNEMONIC          VARCHAR2(400) := GE_BOPARAMETER.FSBGET(CSBMNEMONIC_SMS);
        SBDATA              VARCHAR2(2000);
        TBINSTANCE          GE_BOINSTANCE.TYTBINSTANCE;
        NUORDERID           NUMBER;
        NUOPERUNITID        NUMBER;
        NUPERSONID          NUMBER;
        NUNOTIFTYPE         NUMBER;
        SBPERSEXCLUD        VARCHAR2(4000);
        SBFIELD             VARCHAR2(4000);

        SBPHONE             VARCHAR2(60);
        CSBPHONENAME        VARCHAR2(50) := 'PHONE_NUMBER';

        NUEVENTTYPE         SM_EVENTS_CONF.EVENTS_CONF_ID%TYPE;
        CLADDITIODATA       CLOB;
        CLADDDATAANSWER     CLOB;
        NUERRORCODE         NUMBER;
        SBERRORMESSAGE      VARCHAR2(1000);


    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BONotification.sendNotifSMS',20);

        
        NUERRORCODE    := GE_BOCONSTANTS.CNUSUCCESS;
        SBERRORMESSAGE := GE_BOCONSTANTS.CSBNOMESSAGE;

        
        GE_BOINSTANCE.STRDEFAULTTOINSTANCE(RCNOTIFICATION_LOG.INPUT_DATA,TBINSTANCE);

        
        GETDATAOFINPUT( TBINSTANCE,
                        NUORDERID,
                        NUOPERUNITID,
                        NUPERSONID,
                        NUNOTIFTYPE,
                        SBPERSEXCLUD,
                        SBFIELD
                        );

        
        IF (SBFIELD IS NOT NULL) THEN
            SBPHONE := SBFIELD;
        ELSIF (NUPERSONID IS NOT NULL) THEN

            SBPHONE := DAGE_PERSON.FSBGETPHONE_NUMBER(NUPERSONID,0);
        ELSIF (NUOPERUNITID IS NOT NULL) THEN
            SBPHONE := DAOR_OPERATING_UNIT.FSBGETPHONE_NUMBER(NUOPERUNITID,0);
        END IF;
        
        IF GE_BOCONSTANTS.CSBPROV_ONLINE_NOTIF = GE_BOCONSTANTS.CSBYES THEN
            
            NUEVENTTYPE := GE_BOPARAMETER.FNUGET(GE_BOCONSTANTS.CSBEVENT_SEND_SMS);
            
            
            CLADDITIODATA := '<additionaldata>'||CHR(10)||
                             '<'||CSBORDERID||'>'||TO_CHAR(NUORDERID)||'</'||CSBORDERID||'>'||CHR(10)||
                             '<'||CSBOPERUNIT||'>'||TO_CHAR(NUOPERUNITID)||'</'||CSBOPERUNIT||'>'||CHR(10)||
                             '<'||CSBPERSONID||'>'||TO_CHAR(NUPERSONID)||'</'||CSBPERSONID||'>'||CHR(10)||
                             '<'||CSBPHONENAME||'>'||SBPHONE||'</'||CSBPHONENAME||'>'||CHR(10)||
                             '<MessageNotif>'||ISBMESSAGENOTF||'</MessageNotif>'||CHR(10)||
                             '</additionaldata>';

            SM_BOEVENTS.CALLSERVERNEM
            (
                NUEVENTTYPE,
                NULL,NULL,NULL,NULL,NULL,NULL,NULL,
                SM_BOCONSTANT.CSBOBJECT_NOTIFALERT,
                CLADDITIODATA,
                CLADDDATAANSWER,
                NUERRORCODE,
                SBERRORMESSAGE,
                IDTCHANGEDATE
            );
            
            
            IF (NUERRORCODE <> GE_BOCONSTANTS.CNUSUCCESS ) THEN
                ERRORS.SETERROR(NUERRORCODE);
                ERRORS.SETMESSAGE(SBERRORMESSAGE);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        ELSE
            
            
            
            SBDATA :=  CSBORDERID || '='||TO_CHAR(NUORDERID)||CHR(10)
                    || CSBOPERUNIT || '='||TO_CHAR(NUOPERUNITID)||CHR(10)
                    || CSBPERSONID || '='||TO_CHAR(NUPERSONID)||CHR(10)
                    || CSBPHONENAME|| '='||SBPHONE||CHR(10)
                    || 'INITIAL MESSAGE' || CHR(10)
                    || ISBMESSAGENOTF   || CHR(10)
                    || 'FINAL MENSSAGE' || CHR(10);

            
            SM_BOSERVICEMEDIATION.INSERTINTERFACE
            (
                SBSWITCH,
                SBMNEMONIC,
                SBDATA,
                NULL,
                NULL
            );
            
        END IF;
        
        UT_TRACE.TRACE('FIN GE_BONotification.sendNotifSMS',20);
        
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SENDNOTIFSMS;
    
    

















    PROCEDURE SENDNOTIFPOPUP
    (
        INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
        ISBMESSAGENOTF      IN GE_NOTIFICATION_LOG.OUTPUT_TEXT%TYPE
    )
    IS
        
        TBINSTANCE          GE_BOINSTANCE.TYTBINSTANCE;
        NUORDERID           NUMBER;
        NUOPERUNITID        NUMBER;
        NUPERSONID          NUMBER;
        NUNOTIFTYPE         NUMBER;
        SBPERSEXCLUD        VARCHAR2(4000);
        SBFIELD             VARCHAR2(4000);
        
        NUUSERID            NUMBER;
        SBMASK              SA_USER.MASK%TYPE;
        SBNOMBREALERTA      VARCHAR2(2000);
        CSBPERALERPOPUP     CONSTANT VARCHAR2(50) := 'PRE_NAME_ALERT_POPUP';
        CSBPREXNAMEALERT    CONSTANT VARCHAR2(2000) := GE_BOPARAMETER.FSBGET(CSBPERALERPOPUP);
        CNUDISPAUNICLS      CONSTANT NUMBER := GE_BOPARAMETER.FNUGET('OR_DISPATCH_UNITCLAS');
        CNUDISPASUVCLS      CONSTANT NUMBER := GE_BOPARAMETER.FNUGET('OR_SUP_DISP_UNITCLAS');

        NUNUMEPIPE          NUMBER;
        TBOPERUNITPER       DAOR_OPER_UNIT_PERSONS.TYTBOR_OPER_UNIT_PERSONS;
        NUCLASSOPERUNIT     NUMBER;
        SBCONDITION         VARCHAR2(2000);

        
        PROCEDURE SENDALERT IS
            
            PRAGMA AUTONOMOUS_TRANSACTION;
        BEGIN
            
            UT_ALERT.SIGNAL(SBNOMBREALERTA,ISBMESSAGENOTF);
            COMMIT;
            DBMS_LOCK.SLEEP(0.3);
        END;

    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BONotification.sendNotifPopUp',20);

        
        GE_BOINSTANCE.STRDEFAULTTOINSTANCE(RCNOTIFICATION_LOG.INPUT_DATA,TBINSTANCE);

        
        GETDATAOFINPUT( TBINSTANCE,
                        NUORDERID,
                        NUOPERUNITID,
                        NUPERSONID,
                        NUNOTIFTYPE,
                        SBPERSEXCLUD,
                        SBFIELD
                        );

         IF (SBFIELD IS NOT NULL) THEN
            NUUSERID := DAGE_PERSON.FNUGETUSER_ID(SBFIELD);
            
            
            SBNOMBREALERTA := CSBPREXNAMEALERT || TO_CHAR(NUUSERID);
            
            SENDALERT;
            
            

            
            
            
        
        ELSIF (NUPERSONID IS NOT NULL) THEN

            NUUSERID := DAGE_PERSON.FNUGETUSER_ID(NUPERSONID);
            
            
            SBNOMBREALERTA := CSBPREXNAMEALERT || TO_CHAR(NUUSERID);
            
            SENDALERT;
            
            

            
            
            
        ELSIF(NUOPERUNITID IS NOT NULL) THEN
            
            
            







            
            
            NUCLASSOPERUNIT := DAOR_OPERATING_UNIT.FNUGETOPER_UNIT_CLASSIF_ID(NUOPERUNITID);
            

                SBCONDITION := 'OPERATING_UNIT_ID = '||TO_CHAR(NUOPERUNITID);

                IF SBPERSEXCLUD IS NOT NULL THEN
                    SBCONDITION := SBCONDITION||' AND PERSON_ID NOT IN ('||SBPERSEXCLUD||')';
                END IF;

                DAOR_OPER_UNIT_PERSONS.GETRECORDS(SBCONDITION, TBOPERUNITPER);

                IF (TBOPERUNITPER.COUNT > 0) THEN
                    
                    FOR N IN TBOPERUNITPER.FIRST .. TBOPERUNITPER.LAST LOOP
                        NUUSERID := DAGE_PERSON.FNUGETUSER_ID(TBOPERUNITPER(N).PERSON_ID,0);

                        IF (NUUSERID IS NOT NULL) THEN
                            
                            
                            
                            
                            
                            SBNOMBREALERTA := CSBPREXNAMEALERT || TO_CHAR(NUUSERID);
                            SENDALERT;
                            
                            
                            











                        END IF;
                    END LOOP;
                END IF;
            
        END IF;

        UT_TRACE.TRACE('FIN GE_BONotification.sendNotifPopUp',20);
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SENDNOTIFPOPUP;
    
    






















    PROCEDURE SENDNOTIFPUSH
    (
        INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
        ISBMESSAGENOTF      IN GE_NOTIFICATION_LOG.OUTPUT_TEXT%TYPE,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        
        SBSWITCH        VARCHAR2(50) := GE_BOPARAMETER.FSBGET(CSBPUSH_PLATAFORM);
        SBMNEMONIC      VARCHAR2(400) := GE_BOPARAMETER.FSBGET(CSBMNEMONIC_PUSH);
        SBDATA          VARCHAR2(2000);
        TBINSTANCE      GE_BOINSTANCE.TYTBINSTANCE;
        NUORDERID       NUMBER;
        NUOPERUNITID    NUMBER;
        NUPERSONID      NUMBER;
        NUNOTIFTYPE     NUMBER;
        SBPERSEXCLUD    VARCHAR2(4000);
        SBPHONE         VARCHAR2(60);
        CSBPHONENAME    VARCHAR2(50) := 'PHONE_NUMBER';
        SBFIELD         VARCHAR2(4000);

        NUEVENTTYPE         SM_EVENTS_CONF.EVENTS_CONF_ID%TYPE;
        CLADDITIODATA       CLOB;
        CLADDDATAANSWER     CLOB;
        NUERRORCODE         NUMBER;
        SBERRORMESSAGE      VARCHAR2(1000);


    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BONotification.sendNotifPush',20);

        
        GE_BOINSTANCE.STRDEFAULTTOINSTANCE(RCNOTIFICATION_LOG.INPUT_DATA,TBINSTANCE);

        
        GETDATAOFINPUT( TBINSTANCE,
                        NUORDERID,
                        NUOPERUNITID,
                        NUPERSONID,
                        NUNOTIFTYPE,
                        SBPERSEXCLUD,
                        SBFIELD
                        );

        
        
        
        
        IF (SBFIELD IS NOT NULL) THEN
            SBPHONE := SBFIELD;
        ELSIF (NUPERSONID IS NOT NULL) THEN

            SBPHONE := DAGE_PERSON.FSBGETPHONE_NUMBER(NUPERSONID,0);
        ELSIF (NUOPERUNITID IS NOT NULL) THEN
            SBPHONE := DAOR_OPERATING_UNIT.FSBGETPHONE_NUMBER(NUOPERUNITID,0);
        END IF;

        IF GE_BOCONSTANTS.CSBPROV_ONLINE_NOTIF = GE_BOCONSTANTS.CSBYES THEN
            

            
            NUEVENTTYPE := GE_BOPARAMETER.FNUGET(GE_BOCONSTANTS.CSBEVENT_SEND_PUSH);

            
            CLADDITIODATA := '<additionaldata>'||CHR(10)||
                             '<'||CSBORDERID||'>'||TO_CHAR(NUORDERID)||'</'||CSBORDERID||'>'||CHR(10)||
                             '<'||CSBOPERUNIT||'>'||TO_CHAR(NUOPERUNITID)||'</'||CSBOPERUNIT||'>'||CHR(10)||
                             '<'||CSBPERSONID||'>'||TO_CHAR(NUPERSONID)||'</'||CSBPERSONID||'>'||CHR(10)||
                             '<'||CSBPHONENAME||'>'||SBPHONE||'</'||CSBPHONENAME||'>'||CHR(10)||
                             '<MessageNotif>'||ISBMESSAGENOTF||'</MessageNotif>'||CHR(10)||
                             '</additionaldata>';

            SM_BOEVENTS.CALLSERVERNEM
            (
                NUEVENTTYPE,
                NULL,NULL,NULL,NULL,NULL,NULL,NULL,
                SM_BOCONSTANT.CSBOBJECT_NOTIFALERT,
                CLADDITIODATA,
                CLADDDATAANSWER,
                NUERRORCODE,
                SBERRORMESSAGE,
                IDTCHANGEDATE
            );

            
            IF (NUERRORCODE <> GE_BOCONSTANTS.CNUSUCCESS ) THEN
                ERRORS.SETERROR(NUERRORCODE);
                ERRORS.SETMESSAGE(SBERRORMESSAGE);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
        ELSE
            

            
            SBDATA :=  CSBORDERID || '='||TO_CHAR(NUORDERID)||CHR(10)
                    || CSBOPERUNIT || '='||TO_CHAR(NUOPERUNITID)||CHR(10)
                    || CSBPERSONID || '='||TO_CHAR(NUPERSONID)||CHR(10)
                    || CSBPHONENAME|| '='||SBPHONE||CHR(10)
                    || 'INITIAL MESSAGE' || CHR(10)
                    || ISBMESSAGENOTF   || CHR(10)
                    || 'FINAL MENSSAGE' || CHR(10);


            
            SM_BOSERVICEMEDIATION.INSERTINTERFACE
            (
                SBSWITCH,
                SBMNEMONIC,
                SBDATA,
                NULL,
                NULL
            );
            
        END IF;

        UT_TRACE.TRACE('FIN GE_BONotification.sendNotifPush',20);

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SENDNOTIFPUSH;
    
    



    PROCEDURE SENDCLOB
    (
       INUNOTIFICATION_ID      IN  GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       ISBNOTIFICATION_TYPE_ID IN  GE_NOTIFICATION.NOTIFICATION_TYPE_ID%TYPE,
       INUEXTERNAL_ID          IN  GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE,
       ICLOUTPUT_CLOB          IN  GE_NOTIFICATION_LOG.OUTPUT_CLOB%TYPE,
       INUPRIORITY             IN  NUMBER
    )
    IS
    BEGIN
       UT_TRACE.TRACE('GE_BONOTIFICATION.SendClob:', 6);
       
       IF ISBNOTIFICATION_TYPE_ID = CNUSENDQUEUE OR
          ISBNOTIFICATION_TYPE_ID = CNUWITHOUTTRANS THEN 
            GE_BONOTIFICATIONQUEUE.SENDQUEUE
            (
              ICLOUTPUT_CLOB,
              INUNOTIFICATION_ID,
              INUEXTERNAL_ID,
              INUPRIORITY
            );
       ELSIF ISBNOTIFICATION_TYPE_ID = CNUSENDMAIL THEN    
            SENDMAIL;
       ELSIF ISBNOTIFICATION_TYPE_ID = CNUSENDPRINT THEN 
             GE_BONOTIFICATIONPRINT.SENDPRINT;
       ELSIF ISBNOTIFICATION_TYPE_ID = CNUSENDFILE THEN 
            SENDFILE;
       END IF;
       
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RCNOTIFICATION_LOG.STATUS := CSBSTATUS_ES;
            RAISE;

       WHEN OTHERS THEN
            RCNOTIFICATION_LOG.STATUS := CSBSTATUS_ES;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    















    PROCEDURE SENDTEXT
    (
       INUNOTIFICATION_ID      IN  GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       ISBNOTIFICATION_TYPE_ID IN  GE_NOTIFICATION.NOTIFICATION_TYPE_ID%TYPE,
       INUEXTERNAL_ID          IN  GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE,
       ISBOUTPUT_TEXT          IN  GE_NOTIFICATION_LOG.OUTPUT_TEXT%TYPE,
       INUPRIORITY             IN  NUMBER,
       IDTCHANGEDATE           IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
     )
    IS
    BEGIN
        UT_TRACE.TRACE('GE_BONOTIFICATION.SendText:', 6);

       IF ISBNOTIFICATION_TYPE_ID = CNUSENDQUEUE OR
          ISBNOTIFICATION_TYPE_ID = CNUWITHOUTTRANS THEN 
            GE_BONOTIFICATIONQUEUE.SENDQUEUE
            (
               ISBOUTPUT_TEXT,
               INUNOTIFICATION_ID,
               INUEXTERNAL_ID,
               INUPRIORITY
            );
        ELSIF ISBNOTIFICATION_TYPE_ID = CNUACTIONMODULE THEN  
            GE_BONOTIFICATIONBYACTION.EXECUTEACTION(ISBOUTPUT_TEXT);
        ELSIF ISBNOTIFICATION_TYPE_ID = CNUSENDMAIL THEN    
            SENDMAIL;
        ELSIF  ISBNOTIFICATION_TYPE_ID = CNUSENDPRINT THEN 
            GE_BONOTIFICATIONPRINT.SENDPRINT;
        ELSIF ISBNOTIFICATION_TYPE_ID = CNUSENDFILE THEN 
             SENDFILE;
        ELSIF ISBNOTIFICATION_TYPE_ID = GE_BOCONSTANTS.CNUTYPENOTIFSMS THEN 
            SENDNOTIFSMS(INUNOTIFICATION_ID, ISBOUTPUT_TEXT,IDTCHANGEDATE);
        ELSIF ISBNOTIFICATION_TYPE_ID = GE_BOCONSTANTS.CNUTYPENOTIFPOPUP THEN 
            SENDNOTIFPOPUP(INUNOTIFICATION_ID, ISBOUTPUT_TEXT);
        ELSIF ISBNOTIFICATION_TYPE_ID = GE_BOCONSTANTS.CNUTYPENOTIFPUSH THEN 
            SENDNOTIFPUSH(INUNOTIFICATION_ID, ISBOUTPUT_TEXT,IDTCHANGEDATE);
        END IF;

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RCNOTIFICATION_LOG.STATUS := CSBSTATUS_ES;
            RAISE;

       WHEN OTHERS THEN
            RCNOTIFICATION_LOG.STATUS := CSBSTATUS_ES;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE TRYSETVARCHAR2 ( ICLTRANSFORM IN CLOB)
    IS
       CLCLOB CLOB := ICLTRANSFORM;
    BEGIN
        RCNOTIFICATION_LOG.OUTPUT_TEXT := UT_LOB.GETVARCHAR2(CLCLOB);
        
        RCBCNOTIFICATION.FORMAT_TYPE := CSBTYPE_TEXT;
        
        RCNOTIFICATION_LOG.OUTPUT_CLOB := EMPTY_CLOB;
    EXCEPTION
        WHEN OTHERS THEN
        
          RCBCNOTIFICATION.FORMAT_TYPE := CSBTYPE_CLOB;
    END;



    FUNCTION PROCESS RETURN BOOLEAN
    IS
       BLSUCCESSFUL BOOLEAN := FALSE;
    BEGIN
       




       IF RCBCNOTIFICATION.EXECUTION_MODE <> CSBEXECUTION_LINE_MODE THEN
          RETURN BLSUCCESSFUL;
       END IF;

        
        
        IF RCBCNOTIFICATION.NOTIFICATION_TYPE_ID = CNUWITHOUTTRANS OR
           RCBCNOTIFICATION.NOTIFICATION_TYPE_ID = CNUACTIONMODULE
        THEN
            BEGIN

                EXECTRANSFORMATEXTWITHOUTTRANS(RCNOTIFICATION_LOG.OUTPUT_TEXT);
                
                RCBCNOTIFICATION.FORMAT_TYPE := CSBTYPE_TEXT;
            EXCEPTION
                
                
                WHEN EXERRMAXLENGTH THEN
                    TRYTRANSFORMTOCLOBWITHOUTTRANS(RCNOTIFICATION_LOG.OUTPUT_CLOB);
                    
                    RCBCNOTIFICATION.FORMAT_TYPE := CSBTYPE_CLOB;

                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;

                WHEN OTHERS THEN
                    RAISE EX.CONTROLLED_ERROR;
            END;
            RCNOTIFICATION_LOG.OUTPUT := RCBCNOTIFICATION.FORMAT_TYPE;
            BLSUCCESSFUL := TRUE;
            RETURN BLSUCCESSFUL;
        END IF;


       
       IF RCBCNOTIFICATION.XSL_TEMPLATE_ID IS NULL THEN  
       
            


           BEGIN
                EXECTRANSFORMATIONTEXT(RCNOTIFICATION_LOG.OUTPUT_TEXT);
                
                RCBCNOTIFICATION.FORMAT_TYPE := CSBTYPE_TEXT;
           EXCEPTION
                
                
                WHEN EXERRMAXLENGTH THEN
                    TRYTRANSFORMTOCLOB(RCNOTIFICATION_LOG.OUTPUT_CLOB);
                    
                    RCBCNOTIFICATION.FORMAT_TYPE := CSBTYPE_CLOB;
                WHEN OTHERS THEN
                    RAISE EX.CONTROLLED_ERROR;
           END;
            
       ELSE 
          EXECTRANSFORMATIONXSL(RCNOTIFICATION_LOG.OUTPUT_CLOB);
          
          TRYSETVARCHAR2(RCNOTIFICATION_LOG.OUTPUT_CLOB);
       END IF;

       RCNOTIFICATION_LOG.OUTPUT := RCBCNOTIFICATION.FORMAT_TYPE;
       BLSUCCESSFUL := TRUE;
       RETURN BLSUCCESSFUL;

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RCNOTIFICATION_LOG.STATUS := CSBSTATUS_ET;
            RAISE;

       WHEN OTHERS THEN
            RCNOTIFICATION_LOG.STATUS := CSBSTATUS_ET;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    PROCEDURE VALIDATEPARAMETERS
    (
       INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       INUORIGIN_MODULE    IN GE_MODULE.MODULE_ID%TYPE,
       INUEXTERNAL_ID      IN GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE
    )
    IS
    BEGIN
       BLVALID_INPUT := TRUE;

       IF INUNOTIFICATION_ID IS NULL THEN
          ERRORS.SETERROR(CNUNOTIFICATIONNULL);  
          RAISE EX.CONTROLLED_ERROR;
       END IF;

       IF INUORIGIN_MODULE IS NULL THEN
          ERRORS.SETERROR(CNUORIGINNULL); 
          RAISE EX.CONTROLLED_ERROR;
       END IF;

       IF INUEXTERNAL_ID IS NULL THEN
          ERRORS.SETERROR(CNUEXTERNALNULL); 
          RAISE EX.CONTROLLED_ERROR;
       END IF;

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            BLVALID_INPUT := FALSE;
            RAISE;

       WHEN OTHERS THEN
            BLVALID_INPUT := FALSE;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;




    PROCEDURE SETATTRIBUTE
    (
       OSBSTRING    IN OUT VARCHAR2,
       ISBATTRIBUTE IN     VARCHAR2,
       ISBVALUE     IN     VARCHAR2,
       IBOSTR       IN     BOOLEAN DEFAULT TRUE
    )
    IS
       SBATTRIBUTE VARCHAR2(50)   := ISBATTRIBUTE;
       SBVALUE     VARCHAR2(4000) := ISBVALUE;
    BEGIN

        IF LENGTH(OSBSTRING) != 0 THEN
            OSBSTRING := OSBSTRING||GE_BOCONSTANTS.CSBSEMICOLON;
        END IF;

        IF IBOSTR THEN
            SBATTRIBUTE := CSBPREFIXVARCHAR||SBATTRIBUTE;
        END IF;

        SBVALUE := REPLACE(SBVALUE,'%','%37\');
        SBVALUE := REPLACE(SBVALUE,';','%59\');
        SBVALUE := REPLACE(SBVALUE,'=','%61\');

        OSBSTRING := OSBSTRING||UPPER(SBATTRIBUTE)||GE_BOCONSTANTS.CSBEQUAL||SBVALUE;

    END;



    PROCEDURE SETATTRIBUTE
    (
       OSBSTRING    IN OUT VARCHAR2,
       ISBATTRIBUTE IN     VARCHAR2,
       DTVALUE      IN     DATE
    )
    IS
    BEGIN
       SETATTRIBUTE(OSBSTRING, CSBPREFIXDATE||ISBATTRIBUTE, UT_DATE.FSBSTR_DATE(DTVALUE), FALSE);
    END;



    PROCEDURE SETATTRIBUTE
    (
       OSBSTRING    IN OUT VARCHAR2,
       ISBATTRIBUTE IN     VARCHAR2,
       NUVALUE      IN     NUMBER
    )
    IS
    BEGIN
       SETATTRIBUTE(OSBSTRING, CSBPREFIXNUMBER||ISBATTRIBUTE, TO_CHAR(NUVALUE), FALSE);
    END;



    PROCEDURE SENDNOTIFY
    (
       INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       INUORIGIN_MODULE    IN GE_MODULE.MODULE_ID%TYPE,
       ISBINPUT            IN VARCHAR2,
       INUEXTERNAL_ID      IN GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE,
       ONUNOTIFICA_LOG     OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE,
       ONUERRORCODE        OUT NUMBER,
       OSBERRORTEXT        OUT VARCHAR2
    )
    IS

    BEGIN
       ONUNOTIFICA_LOG := NULL;
       ONUERRORCODE    := GE_BOCONSTANTS.CNUSUCCESS;
       OSBERRORTEXT    := GE_BOCONSTANTS.CSBNOMESSAGE;

       VALIDATEPARAMETERS(INUNOTIFICATION_ID, INUORIGIN_MODULE, INUEXTERNAL_ID);

       INITIALIZELOG
       (
          INUNOTIFICATION_ID,
          INUORIGIN_MODULE,
          INUEXTERNAL_ID,
          ISBINPUT
       );


       IF PROCESS THEN
          IF RCBCNOTIFICATION.FORMAT_TYPE = CSBTYPE_CLOB THEN
             SENDCLOB
             (
                RCBCNOTIFICATION.NOTIFICATION_ID,
                RCBCNOTIFICATION.NOTIFICATION_TYPE_ID,
                RCNOTIFICATION_LOG.EXTERNAL_ID,
                RCNOTIFICATION_LOG.OUTPUT_CLOB,
                NUPRIORITY
               );
          ELSE
               SENDTEXT
               (
                RCBCNOTIFICATION.NOTIFICATION_ID,
                RCBCNOTIFICATION.NOTIFICATION_TYPE_ID,
                RCNOTIFICATION_LOG.EXTERNAL_ID,
                RCNOTIFICATION_LOG.OUTPUT_TEXT,
                NUPRIORITY
               );
          END IF;
          RCNOTIFICATION_LOG.STATUS := CSBSTATUS_SE; 
       END IF;

       SAVELOG(ONUERRORCODE, OSBERRORTEXT, ONUNOTIFICA_LOG);

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR  THEN
            DELETETABLENOTIFICATION(INUNOTIFICATION_ID);
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
            SAVELOG(ONUERRORCODE, OSBERRORTEXT, ONUNOTIFICA_LOG);

       WHEN OTHERS THEN
            DELETETABLENOTIFICATION(INUNOTIFICATION_ID);
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
            SAVELOG(ONUERRORCODE, OSBERRORTEXT, ONUNOTIFICA_LOG);
    END;
    
    PROCEDURE SENDNOTIFYWITHPRIORITY
    (
       INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       INUORIGIN_MODULE    IN GE_MODULE.MODULE_ID%TYPE,
       ISBINPUT            IN VARCHAR2,
       INUEXTERNAL_ID      IN GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE,
       INUPRIORITY         IN NUMBER,
       ONUNOTIFICA_LOG     OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE,
       ONUERRORCODE        OUT NUMBER,
       OSBERRORTEXT        OUT VARCHAR2
    )
    IS

    BEGIN

        SETPRIORITY(INUPRIORITY);

        SENDNOTIFY
        (
           INUNOTIFICATION_ID,
           INUORIGIN_MODULE,
           ISBINPUT,
           INUEXTERNAL_ID,
           ONUNOTIFICA_LOG,
           ONUERRORCODE,
           OSBERRORTEXT
        );

        SETPRIORITY(NULL);

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR  THEN
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
    END;



    PROCEDURE SETNOTIFICATION
    (
       INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE
    )
    IS
    BEGIN
       RCBCNOTIFICATION := GE_BCNOTIFICATION.GETNOTIFICATION(INUNOTIFICATION_ID);
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GENERAXML
    (
        INUNOTIFICATION_ID   IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
        ISBINPUTDATA         IN GE_NOTIFICATION_LOG.INPUT_DATA%TYPE,
        OCLXML  OUT NOCOPY CLOB
    ) IS
        TYRFNOTIFISTATEMENT CONSTANTS.TYREFCURSOR;
        TYTBSELECT GE_BOINSTANCE.TYTBINSTANCE;
        RCINSTANCE GE_BOINSTANCE.TYRCINSTANCE;
        NUINDICE NUMBER;

        SBBLOCK  VARCHAR2(100);
        BLINITBLOCK BOOLEAN;
        SBXML   VARCHAR2(32767);
        NULENGTHCLOB NUMBER;

    BEGIN

        
        GETNOTISTATEMENT(INUNOTIFICATION_ID);

        
        PROCESSSTATEMENT(ISBINPUTDATA, TYTBSELECT);

        
        NULENGTHCLOB := 1;

        SBXML := '<?xml version="1.0" encoding="ISO8859_1" ?>'||CHR(13);
        SBXML := SBXML || '<!-- Generated BY XMLQuery - Copyright (c) Open International Systems Corp.-->'||CHR(13);
        SBXML := SBXML || '<DATAPACKET Version="3.0">'||CHR(13);
        NUINDICE :=    TYTBSELECT.FIRST;
        SBBLOCK := NULL;
        BLINITBLOCK := FALSE;

        LOOP
            RCINSTANCE :=   TYTBSELECT(NUINDICE);
            IF ( RCINSTANCE.NAME_ATTRIBUTE = 'NEW SELECT') THEN
                IF ( BLINITBLOCK ) THEN
                    SBXML := SBXML || '    </'||SBBLOCK||'>'||CHR(13);
                END IF;
                SBXML := SBXML || '    <'||RCINSTANCE.VALUE_||'>'||CHR(13);
                SBBLOCK := RCINSTANCE.VALUE_;
                BLINITBLOCK := TRUE;
            ELSIF ( RCINSTANCE.NAME_ATTRIBUTE = 'NEW RECORD') AND BLINITBLOCK THEN
                SBXML := SBXML || '    </'||SBBLOCK||'>'||CHR(13);
                BLINITBLOCK := FALSE;
            ELSIF ( RCINSTANCE.NAME_ATTRIBUTE = 'NEW RECORD' AND  NOT BLINITBLOCK ) THEN
                NULL;
            ELSE
                IF ( RCINSTANCE.NAME_ATTRIBUTE != 'NEW RECORD' AND  NOT BLINITBLOCK ) THEN
                    SBXML := SBXML || '    <'||SBBLOCK||'>'||CHR(13);
                    BLINITBLOCK := TRUE;
                END IF;
                SBXML := SBXML || '<'||RCINSTANCE.NAME_ATTRIBUTE||'>'||RCINSTANCE.VALUE_||'</'||RCINSTANCE.NAME_ATTRIBUTE||'>'||CHR(13);
            END IF;
            EXIT WHEN NUINDICE =  TYTBSELECT.LAST;

            IF ( LENGTH(SBXML) > 30000 ) THEN

                OCLXML := UT_LOB.CREATECLOB
                (
                    SBXML,
                    NULENGTHCLOB,
                    OCLXML
                );
                SBXML := NULL;
            END IF;

            NUINDICE := TYTBSELECT.NEXT(NUINDICE);
        END LOOP;

        IF ( BLINITBLOCK ) THEN
            SBXML := SBXML || '    </'||SBBLOCK||'>'||CHR(13);
            BLINITBLOCK := FALSE;
        END IF;

        SBXML := SBXML ||'</DATAPACKET>'||CHR(13);
        OCLXML := UT_LOB.CREATECLOB
        (
            SBXML,
            NULENGTHCLOB,
            OCLXML
        );
        SBXML := NULL;

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETNOTIFICATIONS
    (
      ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
      
      GE_BCNOTIFICATION.GETNOTIFICATIONS(ORFREFCURSOR);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE GETXSLTRANSFORMATION
    (
       INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       INUORIGIN_MODULE    IN GE_MODULE.MODULE_ID%TYPE,
       ISBINPUT            IN VARCHAR2,
       OSBFORMATTYPE       OUT GE_NOTIFICATION.FORMAT_TYPE%TYPE,
       OSBOUTPUTTEXT       OUT GE_NOTIFICATION_LOG.OUTPUT_TEXT%TYPE,
       OSBOUTPUTTCLOB      IN OUT GE_NOTIFICATION_LOG.OUTPUT_CLOB%TYPE
    )
    IS
        NUEXTERNAL_ID      GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE := 1;
    BEGIN

       VALIDATEPARAMETERS(INUNOTIFICATION_ID, INUORIGIN_MODULE, NUEXTERNAL_ID);

       INITIALIZELOG
       (
          INUNOTIFICATION_ID,
          INUORIGIN_MODULE,
          NUEXTERNAL_ID,
          ISBINPUT
       );

       IF PROCESS THEN
          OSBFORMATTYPE := RCBCNOTIFICATION.FORMAT_TYPE;
          IF RCBCNOTIFICATION.FORMAT_TYPE = CSBTYPE_CLOB THEN
                OSBOUTPUTTCLOB := RCNOTIFICATION_LOG.OUTPUT_CLOB;
          ELSE
                OSBOUTPUTTEXT := RCNOTIFICATION_LOG.OUTPUT_TEXT;
          END IF;
       END IF;
       
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




























    PROCEDURE SENDNOTIFYWITHOUTPROCESS
    (
       INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       INUNOTIFICATIONTYPE IN GE_NOTIFICATION.NOTIFICATION_TYPE_ID%TYPE,
       INUORIGIN_MODULE    IN GE_MODULE.MODULE_ID%TYPE,
       ISBINPUT            IN VARCHAR2,
       INUEXTERNAL_ID      IN GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE,
       ISBMESSAGENOTF      IN GE_NOTIFICATION_LOG.OUTPUT_TEXT%TYPE,
       ONUNOTIFICA_LOG     OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE,
       ONUERRORCODE        OUT NUMBER,
       OSBERRORTEXT        OUT VARCHAR2,
       IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL,
       ICLMESSAGENOTF      IN GE_NOTIFICATION_LOG.OUTPUT_CLOB%TYPE DEFAULT EMPTY_CLOB
    )
    IS
       NULENGTHCLOB        NUMBER;
    BEGIN
        UT_TRACE.TRACE('INICIO SendNotifyWithOutProcess Normal');
       ONUNOTIFICA_LOG := NULL;
       ONUERRORCODE    := GE_BOCONSTANTS.CNUSUCCESS;
       OSBERRORTEXT    := GE_BOCONSTANTS.CSBNOMESSAGE;

       VALIDATEPARAMETERS(INUNOTIFICATION_ID, INUORIGIN_MODULE, INUEXTERNAL_ID);

       INITIALIZELOG
       (
          INUNOTIFICATION_ID,
          INUORIGIN_MODULE,
          INUEXTERNAL_ID,
          ISBINPUT
       );

       RCNOTIFICATION_LOG.OUTPUT_TEXT := ISBMESSAGENOTF;
       RCNOTIFICATION_LOG.OUTPUT_CLOB := ICLMESSAGENOTF;

       
       RCNOTIFICATION_LOG.NOTIFICATION_TYPE_ID := INUNOTIFICATIONTYPE;
       RCBCNOTIFICATION.NOTIFICATION_TYPE_ID := INUNOTIFICATIONTYPE;

       NULENGTHCLOB := DBMS_LOB.GETLENGTH(ICLMESSAGENOTF);
       IF NULENGTHCLOB > 32767 THEN
            
             UT_TRACE.TRACE('IS CLOB');
            RCNOTIFICATION_LOG.OUTPUT := CSBTYPE_CLOB;
            SENDCLOB
            (
             RCBCNOTIFICATION.NOTIFICATION_ID,
             RCBCNOTIFICATION.NOTIFICATION_TYPE_ID,
             RCNOTIFICATION_LOG.EXTERNAL_ID,
             RCNOTIFICATION_LOG.OUTPUT_CLOB,
             NUPRIORITY
            );
       ELSE
            IF NULENGTHCLOB > 0 THEN
                
                UT_TRACE.TRACE('IS CLOB');
                RCNOTIFICATION_LOG.OUTPUT := CSBTYPE_CLOB;
                SENDCLOB
                (
                 RCBCNOTIFICATION.NOTIFICATION_ID,
                 RCBCNOTIFICATION.NOTIFICATION_TYPE_ID,
                 RCNOTIFICATION_LOG.EXTERNAL_ID,
                 RCNOTIFICATION_LOG.OUTPUT_CLOB,
                 NUPRIORITY
                );
            ELSE
                
                UT_TRACE.TRACE('IS text');
                RCNOTIFICATION_LOG.OUTPUT := CSBTYPE_TEXT;
                SENDTEXT
                (
                 RCBCNOTIFICATION.NOTIFICATION_ID,
                 RCBCNOTIFICATION.NOTIFICATION_TYPE_ID,
                 RCNOTIFICATION_LOG.EXTERNAL_ID,
                 RCNOTIFICATION_LOG.OUTPUT_TEXT,
                 NUPRIORITY,
                 IDTCHANGEDATE
                );
            END IF;
        END IF;

       RCNOTIFICATION_LOG.STATUS := CSBSTATUS_SE; 


       SAVELOG(ONUERRORCODE, OSBERRORTEXT, ONUNOTIFICA_LOG);

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR  THEN
            DELETETABLENOTIFICATION(INUNOTIFICATION_ID);
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
            SAVELOG(ONUERRORCODE, OSBERRORTEXT, ONUNOTIFICA_LOG);

       WHEN OTHERS THEN
            DELETETABLENOTIFICATION(INUNOTIFICATION_ID);
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
            SAVELOG(ONUERRORCODE, OSBERRORTEXT, ONUNOTIFICA_LOG);
    END;
    
    


























    PROCEDURE SENDNOTIFYWITHOUTPROCESS
    (
       INUNOTIFICATION_ID  IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
       INUNOTIFICATIONTYPE IN GE_NOTIFICATION.NOTIFICATION_TYPE_ID%TYPE,
       INUORIGIN_MODULE    IN GE_MODULE.MODULE_ID%TYPE,
       ISBINPUT            IN VARCHAR2,
       INUEXTERNAL_ID      IN GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE,
       ICLMESSAGE      IN GE_NOTIFICATION_LOG.OUTPUT_CLOB%TYPE,
       ONUNOTIFICA_LOG     OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE,
       ONUERRORCODE        OUT NUMBER,
       OSBERRORTEXT        OUT VARCHAR2,
       IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL,
       ISBMESSAGENOTF      IN VARCHAR2 DEFAULT NULL 
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO SendNotifyWithOutProcess Sobrecarga');
        SENDNOTIFYWITHOUTPROCESS(
           INUNOTIFICATION_ID,
           INUNOTIFICATIONTYPE,
           INUORIGIN_MODULE,
           ISBINPUT,
           INUEXTERNAL_ID,
           NULL,
           ONUNOTIFICA_LOG,
           ONUERRORCODE,
           OSBERRORTEXT,
           IDTCHANGEDATE,
           ICLMESSAGE
        );
        UT_TRACE.TRACE('FIN SendNotifyWithOutProcess Sobrecarga');
    END SENDNOTIFYWITHOUTPROCESS;
    
    















    PROCEDURE REGISTERTONOTIFY
    (
        INUNOTIFICATION_ID IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
        INUORIGIN_MODULE   IN GE_MODULE.MODULE_ID%TYPE,
        ISBINPUT           IN VARCHAR2,
        INUEXTERNAL_ID     IN GE_NOTIFICATION_LOG.EXTERNAL_ID%TYPE,
        ONUNOTIFICA_LOG    OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE,
        ONUERRORCODE       OUT NUMBER,
        OSBERRORTEXT       OUT VARCHAR2
    )
    IS
    BEGIN
       ONUNOTIFICA_LOG := NULL;
       RCNOTIFICATION_LOG := NULL;
       ONUERRORCODE    := GE_BOCONSTANTS.CNUSUCCESS;
       OSBERRORTEXT    := GE_BOCONSTANTS.CSBNOMESSAGE;

       VALIDATEPARAMETERS(INUNOTIFICATION_ID, INUORIGIN_MODULE, INUEXTERNAL_ID);


       INITIALIZELOG
       (
          INUNOTIFICATION_ID,
          INUORIGIN_MODULE,
          INUEXTERNAL_ID,
          ISBINPUT
       );

       SAVELOG(ONUERRORCODE, OSBERRORTEXT, ONUNOTIFICA_LOG);

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR  THEN
            DELETETABLENOTIFICATION(INUNOTIFICATION_ID);
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
            SAVELOG(ONUERRORCODE, OSBERRORTEXT, ONUNOTIFICA_LOG);

       WHEN OTHERS THEN
            DELETETABLENOTIFICATION(INUNOTIFICATION_ID);
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
            SAVELOG(ONUERRORCODE, OSBERRORTEXT, ONUNOTIFICA_LOG);
    END;
    
    



















    PROCEDURE SENDREGNOTIFYJOB
    IS
        NUERRORCODE     NUMBER;
        SBERRORTEXT     VARCHAR2(4000);
        RCNOTIFICATION  DAGE_NOTIFICATION_LOG.STYGE_NOTIFICATION_LOG;
        RFNOTIFICATIONS CONSTANTS.TYREFCURSOR;
        
        NUNOTIFICA_LOG  GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;

    BEGIN
         
         GE_BCNOTIFICATION.GETNOTIFWHITOUTSEND(RFNOTIFICATIONS);

        
         LOOP
            FETCH RFNOTIFICATIONS INTO RCNOTIFICATION ;
            EXIT WHEN RFNOTIFICATIONS%NOTFOUND;
              BEGIN
                
                SETNOTIFICATION(RCNOTIFICATION.NOTIFICATION_ID);

                
                RCNOTIFICATION_LOG := RCNOTIFICATION;

                IF PROCESS THEN
                    IF RCBCNOTIFICATION.FORMAT_TYPE = CSBTYPE_CLOB THEN
                        SENDCLOB
                        (
                            RCBCNOTIFICATION.NOTIFICATION_ID,
                            RCBCNOTIFICATION.NOTIFICATION_TYPE_ID,
                            RCNOTIFICATION_LOG.EXTERNAL_ID,
                            RCNOTIFICATION_LOG.OUTPUT_CLOB,
                            NUPRIORITY
                        );
                    ELSE
                        SENDTEXT
                        (
                            RCBCNOTIFICATION.NOTIFICATION_ID,
                            RCBCNOTIFICATION.NOTIFICATION_TYPE_ID,
                            RCNOTIFICATION_LOG.EXTERNAL_ID,
                            RCNOTIFICATION_LOG.OUTPUT_TEXT,
                            NUPRIORITY
                        );
                    END IF;

                    RCNOTIFICATION_LOG.STATUS := CSBSTATUS_SE; 

                END IF;

                SAVELOG(NUERRORCODE, SBERRORTEXT, NUNOTIFICA_LOG);
                
            EXCEPTION
                WHEN EX.CONTROLLED_ERROR  THEN
                    DELETETABLENOTIFICATION(RCBCNOTIFICATION.NOTIFICATION_ID);
                    ERRORS.GETERROR(NUERRORCODE, SBERRORTEXT);
                    SAVELOG(NUERRORCODE, SBERRORTEXT, NUNOTIFICA_LOG);

                WHEN OTHERS THEN
                    DELETETABLENOTIFICATION(RCBCNOTIFICATION.NOTIFICATION_ID);
                    ERRORS.SETERROR;
                    ERRORS.GETERROR(NUERRORCODE, SBERRORTEXT);
                    SAVELOG(NUERRORCODE, SBERRORTEXT, NUNOTIFICA_LOG);
            END;

        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

END GE_BONOTIFICATION;