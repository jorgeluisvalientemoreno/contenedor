PACKAGE BODY GE_BCItemsSeriado
IS
































































































































    
    
    
    
    CSBVERSION          CONSTANT VARCHAR2(20) := 'SAO378757';
    
    CNUSERIE_NOT_EXISTS         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 5206;
    CNUNO_ITEM_TIPO_CONF        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 16362;
    CNUNO_ITEM_ATR_CONF         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 16382;

    
	 
    TYPE TYCACHEATRTIPOITEM IS RECORD
    (
        ID_ITEMS_TIPO_ATR    GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE
    );
    
    TYPE TYREGATRTIPOITEM IS RECORD
    (
        TECHNICAL_NAME       GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE,
        ID_ITEMS_TIPO_ATR    GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE
    );

    
    TYPE TYCACHEVALATRTIPOITEM IS RECORD
    (
        ID_ITEMS_TIPO_AT_VAL GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL%TYPE,
        VALOR                GE_ITEMS_TIPO_AT_VAL.VALOR%TYPE
    );
    
    TYPE TYREGVALATRTIPOITEM IS RECORD
    (
        ID_ITEMS_TIPO_AT_VAL GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL%TYPE,
        VALOR                GE_ITEMS_TIPO_AT_VAL.VALOR%TYPE,
        ID_ITEMS_TIPO_ATR    GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_ATR%TYPE
    );

    
    
    TYPE TYTBCACHEATRTIPOITEM    IS TABLE OF TYCACHEATRTIPOITEM    INDEX BY VARCHAR2(35);
    
    TYPE TYTBREGATRTIPOITEM      IS TABLE OF TYREGATRTIPOITEM      INDEX BY PLS_INTEGER;

    
    TYPE TYTBCACHEVALATRTIPOITEM IS TABLE OF TYCACHEVALATRTIPOITEM INDEX BY VARCHAR2(26);
    
    TYPE TYTBREGVALATRTIPOITEM   IS TABLE OF TYREGVALATRTIPOITEM   INDEX BY PLS_INTEGER;

    
    
    TBCACHEATRTIPOITEM    GE_BCITEMSSERIADO.TYTBCACHEATRTIPOITEM;

    
    TBCACHEVALATRTIPOITEM GE_BCITEMSSERIADO.TYTBCACHEVALATRTIPOITEM;

    
    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    























	PROCEDURE GETIDBYSERIE
    (
        ISBSERIE            IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        ONUIDITEMSERIADO    OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
	IS
        CURSOR CUGETITEMSERIADO
        IS
        SELECT ID_ITEMS_SERIADO
            FROM GE_ITEMS_SERIADO
            WHERE SERIE = UPPER(ISBSERIE);
        
	BEGIN
        ONUIDITEMSERIADO := NULL;
        
        FOR RG IN CUGETITEMSERIADO LOOP
            ONUIDITEMSERIADO := RG.ID_ITEMS_SERIADO;
        END LOOP;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETIDBYSERIE;
    
    























    PROCEDURE OBTENERITEMSVALIDOS
    (
        INUPERSONA          IN  GE_PERSON.PERSON_ID%TYPE,
        ISBESTADOTECNICO    IN  GE_ITEMS_SERIADO.ESTADO_TECNICO%TYPE,
        INUESTADOINV        IN  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        INUTIPOITEM         IN  GE_ITEMS.ID_ITEMS_TIPO%TYPE,
        OCURFVALIDITEMS     OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN

        OPEN OCURFVALIDITEMS FOR
        SELECT S.ID_ITEMS_SERIADO ID, S.SERIE DESCRIPTION
            FROM GE_ITEMS I, GE_ITEMS_SERIADO S, OR_OPER_UNIT_PERSONS P
            WHERE   P.OPERATING_UNIT_ID  = S.OPERATING_UNIT_ID
                AND P.PERSON_ID = INUPERSONA
                AND S.ESTADO_TECNICO = ISBESTADOTECNICO
                AND S.ID_ITEMS_ESTADO_INV = INUESTADOINV
                AND S.ITEMS_ID = I.ITEMS_ID
                AND I.ID_ITEMS_TIPO = INUTIPOITEM;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFVALIDITEMS);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFVALIDITEMS);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTENERITEMSVALIDOS;


    


























    PROCEDURE GETATRIBUTEVALUE
    (
        INUIDITEMSTIPOATRIB IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_ATR%TYPE,
        INUIDITEMSERIADO    IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_SERIADO%TYPE,
        ONUIDATRIBUTEVALUE  OUT GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL%TYPE,
        OSBVALOR            OUT GE_ITEMS_TIPO_AT_VAL.VALOR%TYPE
    )
    IS
        TBREGVALATRTIPOITEM GE_BCITEMSSERIADO.TYTBREGVALATRTIPOITEM;
        SBINDEX             VARCHAR2(26) := INUIDITEMSTIPOATRIB || '_' || INUIDITEMSERIADO;

        CURSOR CUGETATRIBUTEVALUE
        IS
            SELECT GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL,
                   GE_ITEMS_TIPO_AT_VAL.VALOR,
                   GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_ATR
            FROM   GE_ITEMS_TIPO_AT_VAL
            WHERE  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_SERIADO = INUIDITEMSERIADO;
    BEGIN
        ONUIDATRIBUTEVALUE  := NULL;
        OSBVALOR            := NULL;

        
        IF (TBCACHEVALATRTIPOITEM.EXISTS(SBINDEX)) THEN
            ONUIDATRIBUTEVALUE := TBCACHEVALATRTIPOITEM(SBINDEX).ID_ITEMS_TIPO_AT_VAL;
            OSBVALOR           := TBCACHEVALATRTIPOITEM(SBINDEX).VALOR;
            RETURN;
        END IF;

        
        OPEN CUGETATRIBUTEVALUE;
        FETCH CUGETATRIBUTEVALUE
            BULK COLLECT INTO TBREGVALATRTIPOITEM;
        CLOSE CUGETATRIBUTEVALUE;

        
        IF (TBREGVALATRTIPOITEM.COUNT = 0) THEN
            RETURN;
        END IF;

        
        FOR I IN TBREGVALATRTIPOITEM.FIRST..TBREGVALATRTIPOITEM.LAST LOOP
            SBINDEX := TBREGVALATRTIPOITEM(I).ID_ITEMS_TIPO_ATR||'_'||INUIDITEMSERIADO;
            TBCACHEVALATRTIPOITEM(SBINDEX).ID_ITEMS_TIPO_AT_VAL := TBREGVALATRTIPOITEM(I).ID_ITEMS_TIPO_AT_VAL;
            TBCACHEVALATRTIPOITEM(SBINDEX).VALOR                := TBREGVALATRTIPOITEM(I).VALOR;

            
            IF (TBREGVALATRTIPOITEM(I).ID_ITEMS_TIPO_ATR = INUIDITEMSTIPOATRIB) THEN
                ONUIDATRIBUTEVALUE := TBREGVALATRTIPOITEM(I).ID_ITEMS_TIPO_AT_VAL;
                OSBVALOR           := TBREGVALATRTIPOITEM(I).VALOR;
            END IF;
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUGETATRIBUTEVALUE%ISOPEN) THEN
                CLOSE CUGETATRIBUTEVALUE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUGETATRIBUTEVALUE%ISOPEN) THEN
                CLOSE CUGETATRIBUTEVALUE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETATRIBUTEVALUE;
    
    
    



















    PROCEDURE DELALLATTRIBUTES
    (
        INUIDITEMSSERIADO IN GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    IS
    BEGIN
        DELETE FROM GE_ITEMS_TIPO_AT_VAL
            WHERE ID_ITEMS_SERIADO = INUIDITEMSSERIADO;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    




















    FUNCTION FTBITEMSSERIADOATTVAL
    (
        INUIDITEMSSERIADO       IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN TYTBITEMSTIPOATVAL
    IS
        TBITEMSSERIADOATTVAL        TYTBITEMSTIPOATVAL;
    BEGIN
        TBITEMSSERIADOATTVAL.DELETE;
        IF CUITEMSTIPOATVAL%ISOPEN THEN
            CLOSE CUITEMSTIPOATVAL;
        END IF;

        OPEN CUITEMSTIPOATVAL(INUIDITEMSSERIADO);
        FETCH CUITEMSTIPOATVAL BULK COLLECT INTO TBITEMSSERIADOATTVAL;
        CLOSE CUITEMSTIPOATVAL;

        RETURN TBITEMSSERIADOATTVAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUITEMSTIPOATVAL%ISOPEN THEN
                CLOSE CUITEMSTIPOATVAL;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUITEMSTIPOATVAL%ISOPEN THEN
                CLOSE CUITEMSTIPOATVAL;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END;
     
     




















    FUNCTION FTBITEMSSERALLATTVAL
    (
        INUIDITEMSSERIADO       IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN TYTBITEMSTIPOATVAL
    IS
        TBITEMSSERIADOATTVAL        TYTBITEMSTIPOATVAL;
    BEGIN
        TBITEMSSERIADOATTVAL.DELETE;
        IF CUITEMSALLATTVAL%ISOPEN THEN
            CLOSE CUITEMSALLATTVAL;
        END IF;

        OPEN CUITEMSALLATTVAL(INUIDITEMSSERIADO);
        FETCH CUITEMSALLATTVAL BULK COLLECT INTO TBITEMSSERIADOATTVAL;
        CLOSE CUITEMSALLATTVAL;

        RETURN TBITEMSSERIADOATTVAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUITEMSALLATTVAL%ISOPEN THEN
                CLOSE CUITEMSALLATTVAL;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUITEMSALLATTVAL%ISOPEN THEN
                CLOSE CUITEMSALLATTVAL;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END FTBITEMSSERALLATTVAL;

    
    



























    FUNCTION FBLVALITEMFORSEL
    (
        ISBSERIE         IN      GE_ITEMS_SERIADO.SERIE%TYPE,
        INUVENDEDOR      IN      OR_OPER_UNIT_PERSONS.PERSON_ID%TYPE
    )RETURN BOOLEAN
    IS
        NUCOUNT         NUMBER;
    BEGIN

        SELECT  COUNT (ID_ITEMS_SERIADO)
        INTO NUCOUNT
        FROM
        (
            SELECT  /*+ index(ge_items_seriado UNQ_SERIE)
                        index(or_oper_unit_persons PK_OR_OPER_UNIT_PERSONS) */
                    ID_ITEMS_SERIADO
            FROM    GE_ITEMS_SERIADO,
                    OR_OPER_UNIT_PERSONS
            /*+ GE_BCItemsSeriado.fblValItemForSel */
            WHERE   GE_ITEMS_SERIADO.SERIE = ISBSERIE
            AND     OR_OPER_UNIT_PERSONS.PERSON_ID = INUVENDEDOR
            AND     GE_ITEMS_SERIADO.OPERATING_UNIT_ID = OR_OPER_UNIT_PERSONS.OPERATING_UNIT_ID
            AND     GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE
            AND ROWNUM = 1
            UNION
            SELECT ID_ITEMS_SERIADO
            FROM GE_ITEMS_SERIADO,
                (
                    SELECT
                         /*+ index(or_oper_unit_persons IDX_OR_OPER_UNIT_PERSONS_01)
                             index(OR_operating_unit PK_OR_OPERATING_UNIT)
                         */
                         ASSO_OPER_UNIT
                    FROM OR_OPERATING_UNIT,OR_OPER_UNIT_PERSONS
                    WHERE     OR_OPER_UNIT_PERSONS.PERSON_ID = INUVENDEDOR
                    AND OR_OPER_UNIT_PERSONS.OPERATING_UNIT_ID = OR_OPERATING_UNIT.OPERATING_UNIT_ID
                )  ALMACEN
            WHERE   GE_ITEMS_SERIADO.SERIE = ISBSERIE
            AND     GE_ITEMS_SERIADO.OPERATING_UNIT_ID = ALMACEN.ASSO_OPER_UNIT
            AND     GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE
            AND ROWNUM = 1
        );
        UT_TRACE.TRACE('GE_BCItemsSeriado.fblValItemForSel nuCount:'||NUCOUNT, 5);
        
        RETURN NUCOUNT = 0;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLVALITEMFORSEL;
    
    





















    FUNCTION FBLITEMBLACKLIST
    (
        ISBSERIE         IN      GE_ITEMS_SERIADO.SERIE%TYPE
    )RETURN BOOLEAN
    IS
        NUCOUNT         NUMBER;
    BEGIN
        SELECT  COUNT(1)
        INTO    NUCOUNT
        FROM    GE_LISTA_NEGRA
        WHERE   GE_LISTA_NEGRA.SERIE = UPPER(ISBSERIE);

        RETURN NOT(NUCOUNT = 0);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLITEMBLACKLIST;
    
    




















    FUNCTION FBLVALIDATEITEM
    (
        ISBSERIE         IN      GE_ITEMS_SERIADO.SERIE%TYPE
    )RETURN BOOLEAN
    IS
        NUCOUNT         NUMBER;
    BEGIN

        SELECT  COUNT(GE_ITEMS_SERIADO.ID_ITEMS_SERIADO)
        INTO    NUCOUNT
        FROM    GE_ITEMS_SERIADO
        WHERE   GE_ITEMS_SERIADO.SERIE = ISBSERIE
        AND     GE_ITEMS_SERIADO.ESTADO_TECNICO <> GE_BOITEMSCONSTANTS.CSBSTATUS_DAMAGE
        AND     GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE;

        RETURN NUCOUNT = 0;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLVALIDATEITEM;
    
    




    PROCEDURE RETURNITEMINFOLOCK
    (
        ISBSERIE            IN      GE_ITEMS_SERIADO.SERIE%TYPE,
        ONUIDITEMSSERIADO   OUT     GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUOPERATINGUNITID  OUT     GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE,
        ONUITEMID           OUT     GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        ONUPROPERTY         OUT     GE_ITEMS_SERIADO.PROPIEDAD%TYPE
    )
    IS
    BEGIN

        SELECT  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
                GE_ITEMS_SERIADO.OPERATING_UNIT_ID,
                GE_ITEMS_SERIADO.ITEMS_ID,
                GE_ITEMS_SERIADO.PROPIEDAD
        INTO    ONUIDITEMSSERIADO,
                ONUOPERATINGUNITID,
                ONUITEMID,
                ONUPROPERTY
        FROM    GE_ITEMS_SERIADO
        WHERE   GE_ITEMS_SERIADO.SERIE = ISBSERIE
        FOR UPDATE SKIP LOCKED ;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RETURNITEMINFOLOCK;
    
    




















    PROCEDURE UPDITEMSINVSTATE
    (
        ISBSERIE            IN      GE_ITEMS_SERIADO.SERIE%TYPE,
        INUNEWSTATE         IN      GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE
    )
    IS
    BEGIN

        
        UPDATE  GE_ITEMS_SERIADO
        SET     ID_ITEMS_ESTADO_INV = INUNEWSTATE
        WHERE   SERIE = ISBSERIE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDITEMSINVSTATE;


    























































    FUNCTION FRFGETITEMSFROMUNITBYITEM
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUITEMSID              IN  GE_ITEMS.ITEMS_ID%TYPE,
        IBOCENTROREPARACION     IN  BOOLEAN DEFAULT FALSE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFCURSOR    CONSTANTS.TYREFCURSOR;
        NUNEWSTATUS  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE := 1.1;
    BEGIN
    
    IF (NOT IBOCENTROREPARACION) THEN
       UT_TRACE.TRACE('-- GE_BCItemsSeriado.frfGetItemsFromUnitByItem: NO centro reparacion', 6);
       
       
       IF (DAOR_OPERATING_UNIT.FNUGETOPER_UNIT_CLASSIF_ID(INUOPERATINGUNITID,0) =
                    GE_BOITEMSCONSTANTS.CNUUNID_OP_CENTRO_REPARA ) THEN
            NUNEWSTATUS :=  GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA;
       END IF;
       
       OPEN RFCURSOR FOR
            SELECT  /*+ index(ge_items_seriado idx_ge_items_seriado_01) */
                    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
                    GE_ITEMS_SERIADO.ITEMS_ID,
                    GE_ITEMS_SERIADO.SERIE,
                    GE_ITEMS_SERIADO.ESTADO_TECNICO,
                    GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV,
                    GE_ITEMS_SERIADO.OPERATING_UNIT_ID,
                    GE_ITEMS_SERIADO.COSTO,
                    GE_ITEMS_ESTADO_INV.DESCRIPCION     DESC_ITEMS_ESTADO_INV
              FROM  GE_ITEMS_SERIADO,
                    GE_ITEMS_ESTADO_INV
                    /*+ GE_BCItemsSeriado.frfGetItemsFromUnitByItem SAO181893 */
             WHERE  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV
               AND  NVL(GE_ITEMS_SERIADO.OPERATING_UNIT_ID, 0) = NVL(INUOPERATINGUNITID, 0)
               AND  GE_ITEMS_SERIADO.ITEMS_ID = INUITEMSID
               AND  (GE_ITEMS_SERIADO.PROPIEDAD <> GE_BOITEMSCONSTANTS.CSBTRAIDO_CLIENTE
                     OR GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV IN (NUNEWSTATUS, GE_BOITEMSCONSTANTS.CNUSTATUS_EN_AISLAMIENTO,
                        GE_BOITEMSCONSTANTS.CNUSTATUS_CHATARRA)
                    )
               AND  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV
                IN  ( GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPGARANTIA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPSEGURO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPSATISFACCION,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPUPGRADE,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_DADO_BAJA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_DANNADO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_EN_AISLAMIENTO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_OBSOLETO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_CHATARRA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_POR_RECUPERAR
                    )
                
                AND GE_BOEMPAQUETAEQUIPOS.FSBVALIDAREMPAQUETADO(GE_ITEMS_SERIADO.SERIE,GE_ITEMS_SERIADO.ID_ITEMS_SERIADO) = GE_BOCONSTANTS.CSBNO;

                    
    ELSE
       UT_TRACE.TRACE('-- GE_BCItemsSeriado.frfGetItemsFromUnitByItem: ES centro reparacion', 6);
        IF (DAOR_OPERATING_UNIT.FNUGETOPER_UNIT_CLASSIF_ID(INUOPERATINGUNITID) <>
                    GE_BOITEMSCONSTANTS.CNUUNID_OP_CENTRO_REPARA ) THEN
            NUNEWSTATUS :=  GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA;
        END IF;
       
       OPEN RFCURSOR FOR
            SELECT  /*+ index(ge_items_seriado IDX_GE_ITEMS_SERIADO_01)
                        index(ge_items_estado_inv PK_GE_ITEMS_ESTADO_INV) */
                    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
                    GE_ITEMS_SERIADO.ITEMS_ID,
                    GE_ITEMS_SERIADO.SERIE,
                    GE_ITEMS_SERIADO.ESTADO_TECNICO,
                    GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV,
                    GE_ITEMS_SERIADO.OPERATING_UNIT_ID,
                    GE_ITEMS_SERIADO.COSTO,
                    GE_ITEMS_ESTADO_INV.DESCRIPCION     DESC_ITEMS_ESTADO_INV
              FROM  GE_ITEMS_SERIADO,
                    GE_ITEMS_ESTADO_INV
                    /*+ GE_BCItemsSeriado.frfGetItemsFromUnitByItem */
             WHERE  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV
               AND  NVL(GE_ITEMS_SERIADO.OPERATING_UNIT_ID, 0) = NVL(INUOPERATINGUNITID, 0)
               AND  GE_ITEMS_SERIADO.ITEMS_ID = INUITEMSID
               AND  (GE_ITEMS_SERIADO.PROPIEDAD <> GE_BOITEMSCONSTANTS.CSBTRAIDO_CLIENTE
                     OR GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV IN (NUNEWSTATUS, GE_BOITEMSCONSTANTS.CNUSTATUS_EN_AISLAMIENTO)
                    )
               AND  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV
                IN  ( GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPGARANTIA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPSEGURO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPSATISFACCION,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPUPGRADE,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO,
                      NUNEWSTATUS
                     );
    END IF;

    RETURN RFCURSOR;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETITEMSFROMUNITBYITEM;

    



























    FUNCTION FNUGETITEMSFROMUNITBYSERIE
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBSERIE                IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        IBOCENTROREPARACION     IN  BOOLEAN DEFAULT FALSE
    )
    RETURN GE_ITEMS_SERIADO.ITEMS_ID%TYPE
    IS
        NUITEM      GE_ITEMS_SERIADO.ITEMS_ID%TYPE;
        
        CURSOR CUCURSORNOCENTRO IS
            SELECT  GE_ITEMS_SERIADO.ITEMS_ID
              FROM  GE_ITEMS_SERIADO
             WHERE  NVL(GE_ITEMS_SERIADO.OPERATING_UNIT_ID, 0) = NVL(INUOPERATINGUNITID, 0)
               AND  GE_ITEMS_SERIADO.PROPIEDAD <> GE_BOITEMSCONSTANTS.CSBTRAIDO_CLIENTE
               AND  GE_ITEMS_SERIADO.SERIE = ISBSERIE
               AND  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV
                IN  ( GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPGARANTIA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPSEGURO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPSATISFACCION,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPUPGRADE,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_DADO_BAJA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_DANNADO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_EN_AISLAMIENTO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_OBSOLETO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_CHATARRA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_POR_RECUPERAR
                    );
                    
        CURSOR CUCURSORSICENTRO IS
            SELECT  GE_ITEMS_SERIADO.ITEMS_ID
              FROM  GE_ITEMS_SERIADO
             WHERE  NVL(GE_ITEMS_SERIADO.OPERATING_UNIT_ID, 0) = NVL(INUOPERATINGUNITID, 0)
               AND  GE_ITEMS_SERIADO.SERIE = ISBSERIE
               AND  GE_ITEMS_SERIADO.PROPIEDAD <> GE_BOITEMSCONSTANTS.CSBTRAIDO_CLIENTE
               AND  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV
                IN  ( GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPGARANTIA,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPSEGURO,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPSATISFACCION,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPUPGRADE,
                      GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO
                    );

    BEGIN
    IF (NOT IBOCENTROREPARACION) THEN
        UT_TRACE.TRACE('-- fnuGetItemsFromUnitBySerie: NO centro reparacion', 6);

        IF (CUCURSORNOCENTRO%ISOPEN) THEN
            CLOSE CUCURSORNOCENTRO;
        END IF;
        OPEN CUCURSORNOCENTRO;
        FETCH CUCURSORNOCENTRO INTO NUITEM;
        CLOSE CUCURSORNOCENTRO;
    ELSE
        UT_TRACE.TRACE('-- fnuGetItemsFromUnitBySerie: ES centro reparacion', 6);

        IF (CUCURSORSICENTRO%ISOPEN) THEN
            CLOSE CUCURSORSICENTRO;
        END IF;
        OPEN CUCURSORSICENTRO;
        FETCH CUCURSORSICENTRO INTO NUITEM;
        CLOSE CUCURSORSICENTRO;
    END IF;

    RETURN NUITEM;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUCURSORNOCENTRO%ISOPEN) THEN
                CLOSE CUCURSORNOCENTRO;
            END IF;
            IF (CUCURSORSICENTRO%ISOPEN) THEN
                CLOSE CUCURSORSICENTRO;
            END IF;

            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (CUCURSORNOCENTRO%ISOPEN) THEN
                CLOSE CUCURSORNOCENTRO;
            END IF;
            IF (CUCURSORSICENTRO%ISOPEN) THEN
                CLOSE CUCURSORSICENTRO;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END;

        





















    FUNCTION FRFGETITEMSFROMUNITBYSTATUS
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBESTADOTECNICO        IN  GE_ITEMS_SERIADO.ESTADO_TECNICO%TYPE,
        INUITEMSESTADOINV       IN  GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFCURSOR    CONSTANTS.TYREFCURSOR;
    BEGIN
       OPEN RFCURSOR FOR
            SELECT  *
              FROM  GE_ITEMS_SERIADO
             WHERE  GE_ITEMS_SERIADO.OPERATING_UNIT_ID = INUOPERATINGUNITID
               AND  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = NVL(INUITEMSESTADOINV, GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV)
               AND  GE_ITEMS_SERIADO.ESTADO_TECNICO = NVL(ISBESTADOTECNICO, GE_ITEMS_SERIADO.ESTADO_TECNICO);

       RETURN RFCURSOR;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    





















    PROCEDURE GETITEMSINVSTATUS
    (
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        
        OPEN ORFDATACURSOR FOR
                SELECT  ID_ITEMS_ESTADO_INV ID,
                        DESCRIPCION DESCRIPTION
                FROM    GE_ITEMS_ESTADO_INV;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMSINVSTATUS;
    
    FUNCTION FBLLOOK
    (
        INUSERIALITEM   IN GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN BOOLEAN
    IS
        RCGE_ITEMS_SERIADO DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BCItemsSeriado.fblLook',7);
        UT_TRACE.TRACE('Item Seriado['||INUSERIALITEM||']',7);

        
        DAGE_ITEMS_SERIADO.LOCKBYPK(INUSERIALITEM, RCGE_ITEMS_SERIADO);

        UT_TRACE.TRACE('Finaliza GE_BCItemsSeriado.fblLook',7);

        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN FALSE;
    END FBLLOOK;
    
    

    FUNCTION FBLLOOKBYSERIAL
    (
        ISBSERIAL       IN GE_ITEMS_SERIADO.SERIE%TYPE
    )
    RETURN BOOLEAN
    IS
        NUSERIALITEM     GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BCItemsSeriado.fblLookBySerial',7);
        UT_TRACE.TRACE('Serie['||ISBSERIAL||']',7);

        
        GE_BCITEMSSERIADO.GETIDBYSERIE(ISBSERIAL, NUSERIALITEM);

        IF (NUSERIALITEM IS NULL) THEN
            ERRORS.SETERROR(CNUSERIE_NOT_EXISTS, ISBSERIAL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Finaliza GE_BCItemsSeriado.fblLookBySerial',7);

        
        RETURN FBLLOOK(NUSERIALITEM);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLLOOKBYSERIAL;

    



    FUNCTION FRFGETITEMSTYPE
    RETURN   CONSTANTS.TYREFCURSOR
    IS
        
        RFCUSOR     CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('Inicio: [GE_BCItemsSeriado.frfGetItemsType]',15);
        
        IF RFCUSOR%ISOPEN THEN
            CLOSE RFCUSOR;
        END IF;
        
        OPEN
            RFCUSOR
        FOR
            SELECT      GE_ITEMS_TIPO.ID_ITEMS_TIPO ID,
                        GE_ITEMS_TIPO.DESCRIPCION DESCRIPTION
                FROM    GE_ITEMS_TIPO;

    	UT_TRACE.TRACE('Fin: [GE_BCItemsSeriado.frfGetItemsType]',15);
        RETURN RFCUSOR;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( RFCUSOR%ISOPEN ) THEN
                CLOSE RFCUSOR;
            END IF;
        	RAISE;
        WHEN OTHERS THEN
            IF ( RFCUSOR%ISOPEN ) THEN
                CLOSE RFCUSOR;
            END IF;
        	ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETITEMSTYPE;
    
    



    FUNCTION FRFGETITEMSSTATUS
    RETURN   CONSTANTS.TYREFCURSOR
    IS
        
        RFCUSOR     CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('Inicio: [GE_BCItemsSeriado.frfGetItemsStatus]',15);
        
        IF RFCUSOR%ISOPEN THEN
            CLOSE RFCUSOR;
        END IF;
        
        OPEN
            RFCUSOR
        FOR
            SELECT      GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV ID,
                        GE_ITEMS_ESTADO_INV.DESCRIPCION DESCRIPTION
                FROM    GE_ITEMS_ESTADO_INV;

    	UT_TRACE.TRACE('Fin: [GE_BCItemsSeriado.frfGetItemsStatus]',15);
        RETURN RFCUSOR;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( RFCUSOR%ISOPEN ) THEN
                CLOSE RFCUSOR;
            END IF;
        	RAISE;
        WHEN OTHERS THEN
            IF ( RFCUSOR%ISOPEN ) THEN
                CLOSE RFCUSOR;
            END IF;
        	ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETITEMSSTATUS;

    



















    FUNCTION FNUGETIDATTRIBUTE
    (
        INUIDITEMSTIPO      IN  GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO%TYPE,
        ISBTECHNICALNAME    IN  GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE,
        IBLSHOWERR          IN  BOOLEAN DEFAULT TRUE
    )
    RETURN GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE
    IS
        NUIDITEMSTIPOATTR GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE;
        TBREGATRTIPOITEM  GE_BCITEMSSERIADO.TYTBREGATRTIPOITEM;
        SBINDEX           VARCHAR2(35) := INUIDITEMSTIPO || '_' || ISBTECHNICALNAME;

        CURSOR CUCURSOR
        IS
            SELECT GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME,
                   GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR
            FROM   GE_ITEMS_TIPO_ATR,
                   GE_ENTITY_ATTRIBUTES
            WHERE  GE_ITEMS_TIPO_ATR.ENTITY_ATTRIBUTE_ID = GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID
              AND  GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO = INUIDITEMSTIPO;
    BEGIN
        UT_TRACE.TRACE('Inicio: [GE_BCItemsSeriado.fnuGetIdAttribute]',15);
        
        IF (TBCACHEATRTIPOITEM.EXISTS(SBINDEX)) THEN
            NUIDITEMSTIPOATTR := TBCACHEATRTIPOITEM(SBINDEX).ID_ITEMS_TIPO_ATR;
            RETURN NUIDITEMSTIPOATTR;
        END IF;

        
        OPEN CUCURSOR;
        FETCH CUCURSOR
            BULK COLLECT INTO TBREGATRTIPOITEM;
        CLOSE CUCURSOR;

        
        IF (TBREGATRTIPOITEM.COUNT = 0) THEN
            ERRORS.SETERROR(CNUNO_ITEM_TIPO_CONF,
                            INUIDITEMSTIPO);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        FOR I IN TBREGATRTIPOITEM.FIRST..TBREGATRTIPOITEM.LAST LOOP
            SBINDEX := INUIDITEMSTIPO||'_'||TBREGATRTIPOITEM(I).TECHNICAL_NAME;
            TBCACHEATRTIPOITEM(SBINDEX).ID_ITEMS_TIPO_ATR := TBREGATRTIPOITEM(I).ID_ITEMS_TIPO_ATR;

            
            IF (TBREGATRTIPOITEM(I).TECHNICAL_NAME = ISBTECHNICALNAME) THEN
                NUIDITEMSTIPOATTR := TBREGATRTIPOITEM(I).ID_ITEMS_TIPO_ATR;
            END IF;
        END LOOP;

        
        IF (NUIDITEMSTIPOATTR IS NULL AND IBLSHOWERR) THEN
            ERRORS.SETERROR(CNUNO_ITEM_ATR_CONF,
                            INUIDITEMSTIPO||'|'||ISBTECHNICALNAME);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fin: [GE_BCItemsSeriado.fnuGetIdAttribute]. nuIdItemsTipoAttr: '||TO_CHAR(NUIDITEMSTIPOATTR),10);
        RETURN NUIDITEMSTIPOATTR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUCURSOR%ISOPEN) THEN
                CLOSE CUCURSOR;
            END IF;
        	   RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUCURSOR%ISOPEN) THEN
                CLOSE CUCURSOR;
            END IF;
           	ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETIDATTRIBUTE;

    




    FUNCTION FSBGETATTRIBUTEVALUE
    (
        INUIDITEMSTIPOATRIB IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_ATR%TYPE,
        INUIDITEMSERIADO    IN  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_SERIADO%TYPE
    )
    RETURN GE_ITEMS_TIPO_AT_VAL.VALOR%TYPE
    IS
        NUIDATRIBUTEVALUE  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL%TYPE;
        SBVALOR            GE_ITEMS_TIPO_AT_VAL.VALOR%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio: [GE_BCItemsSeriado.fsbGetAttributeValue]',15);

        GETATRIBUTEVALUE(INUIDITEMSTIPOATRIB,
                         INUIDITEMSERIADO,
                         NUIDATRIBUTEVALUE,
                         SBVALOR);

        UT_TRACE.TRACE('Fin: [GE_BCItemsSeriado.fsbGetAttributeValue]',15);
        RETURN SBVALOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	   RETURN NULL;
        WHEN OTHERS THEN
            RETURN NULL;
    END FSBGETATTRIBUTEVALUE;

    




    FUNCTION FRFGETTOOLSBYOPEUNI
    (
        INUOPERATINGUNITID IN GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        NUSTATE_CONNECTION             GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE;
        SBSTATE_CONNECTION    CONSTANT GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE := 'STATE_CONNECTION';
        NULAST_CONNECTION              GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE;
        SBLAST_CONNECTION     CONSTANT GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE := 'LAST_CONNECTION';
        CNUDEVICE_MOVIL_ITEM  CONSTANT GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO%TYPE := 7;
        
        RFCUSOR     CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('Inicio: [GE_BCItemsSeriado.frfGetToolsByOpeUni]',15);

        
        
        NUSTATE_CONNECTION := GE_BCITEMSSERIADO.FNUGETIDATTRIBUTE(CNUDEVICE_MOVIL_ITEM,
                                                                  SBSTATE_CONNECTION);

        
        
        NULAST_CONNECTION  := GE_BCITEMSSERIADO.FNUGETIDATTRIBUTE(CNUDEVICE_MOVIL_ITEM,
                                                                  SBLAST_CONNECTION);

        
        IF RFCUSOR%ISOPEN THEN
            CLOSE RFCUSOR;
        END IF;
        
        OPEN
            RFCUSOR
        FOR
            SELECT GE_ITEMS.ITEMS_ID,
                   GE_ITEMS.DESCRIPTION,
                   GE_ITEMS_SERIADO.SERIE,
                   GE_BCITEMSSERIADO.FSBGETATTRIBUTEVALUE(NUSTATE_CONNECTION,
                                                          GE_ITEMS_SERIADO.ID_ITEMS_SERIADO) STATE_CONNECTION,
                   GE_BCITEMSSERIADO.FSBGETATTRIBUTEVALUE(NULAST_CONNECTION,
                                                          GE_ITEMS_SERIADO.ID_ITEMS_SERIADO) LAST_CONNECTION
            FROM   GE_ITEMS_SERIADO,
                   GE_ITEMS
            WHERE  GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
              AND  GE_ITEMS_SERIADO.OPERATING_UNIT_ID = INUOPERATINGUNITID
              AND  GE_ITEMS.ID_ITEMS_TIPO = CNUDEVICE_MOVIL_ITEM;

    	  UT_TRACE.TRACE('Fin: [GE_BCItemsSeriado.frfGetToolsByOpeUni]',15);
        RETURN RFCUSOR;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (RFCUSOR%ISOPEN) THEN
                CLOSE RFCUSOR;
            END IF;
         	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (RFCUSOR%ISOPEN) THEN
                CLOSE RFCUSOR;
            END IF;
        	   ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETTOOLSBYOPEUNI;
    
    


















    PROCEDURE GETITEMSSERIADOBYSERIE
    (
        ISBSERIE       IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        OTBITEMSSERIADOBYSERI   OUT TYTBITEMSSERIADOBYSERI
    )
    IS
        CURSOR CUITEMSSERIADOBYSERI IS
            SELECT  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
                    GE_ITEMS_SERIADO.ITEMS_ID,
                    GE_ITEMS.ID_ITEMS_TIPO,
                    GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA
              FROM  GE_ITEMS_SERIADO,
                    GE_ITEMS,
                    GE_ITEMS_GAMA_ITEM
             WHERE  GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
               AND  GE_ITEMS.ITEMS_ID = GE_ITEMS_GAMA_ITEM.ITEMS_ID(+)
               AND  GE_ITEMS_SERIADO.SERIE = ISBSERIE;

    BEGIN
        OTBITEMSSERIADOBYSERI.DELETE;
        IF CUITEMSSERIADOBYSERI%ISOPEN THEN
            CLOSE CUITEMSSERIADOBYSERI;
        END IF;

        OPEN CUITEMSSERIADOBYSERI;
        FETCH CUITEMSSERIADOBYSERI BULK COLLECT INTO OTBITEMSSERIADOBYSERI;
        CLOSE CUITEMSSERIADOBYSERI;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUITEMSSERIADOBYSERI%ISOPEN THEN
                CLOSE CUITEMSSERIADOBYSERI;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUITEMSSERIADOBYSERI%ISOPEN THEN
                CLOSE CUITEMSSERIADOBYSERI;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END GETITEMSSERIADOBYSERIE;
     
    




    FUNCTION FSBVALEXISTITEMSERIADOCAP
    (
        INUITEMSERIADOID    IN  GE_ITEM_SERIADO_CAP.ID_ITEMS_SERIADO%TYPE
    )
    RETURN VARCHAR2
    IS
        CURSOR CUVALITEMSERIADOCAP
        IS
            SELECT  1
            FROM    GE_ITEM_SERIADO_CAP
            WHERE   ID_ITEMS_SERIADO = INUITEMSERIADOID
            AND     ROWNUM = 1;

        NUITEMSERIADOCANT   NUMBER;
        CSBRETURN           VARCHAR2(1);

    BEGIN

        NUITEMSERIADOCANT := 0;
        CSBRETURN := OR_BOCONSTANTS.CSBNO;

        IF( CUVALITEMSERIADOCAP%ISOPEN) THEN
            CLOSE CUVALITEMSERIADOCAP;
        END IF;

        OPEN CUVALITEMSERIADOCAP;
        FETCH CUVALITEMSERIADOCAP INTO NUITEMSERIADOCANT;
        CLOSE CUVALITEMSERIADOCAP;
        
        IF(NUITEMSERIADOCANT = 1)THEN
            CSBRETURN := OR_BOCONSTANTS.CSBSI;
        END IF;

        RETURN CSBRETURN;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF( CUVALITEMSERIADOCAP%ISOPEN) THEN
                CLOSE CUVALITEMSERIADOCAP;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF( CUVALITEMSERIADOCAP%ISOPEN) THEN
                CLOSE CUVALITEMSERIADOCAP;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END;

    



    FUNCTION FRFGETITEMSSERIADOBYSERIE
    (
        ISBSERIE        IN      GE_ITEMS_SERIADO.SERIE%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR IS
        RFRESULT CONSTANTS.TYREFCURSOR;
    BEGIN

        OPEN RFRESULT FOR
            SELECT  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
                    GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV,
                    GE_ITEMS_SERIADO.OPERATING_UNIT_ID,
                    GE_ITEMS_SERIADO.ITEMS_ID,
                    GE_ITEMS.DESCRIPTION,
                    GE_ITEMS.ID_ITEMS_TIPO
              FROM  GE_ITEMS_SERIADO,
                    GE_ITEMS
             WHERE  GE_ITEMS_SERIADO.ITEMS_ID =
                    GE_ITEMS.ITEMS_ID
               AND  GE_ITEMS_SERIADO.SERIE = ISBSERIE;


        RETURN RFRESULT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    











    FUNCTION FSBVALITEMBYSERITEM
    (
        INUITEMID        IN      GE_ITEMS_SERIADO.ITEMS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        CURSOR CUEXISTS
        IS
            SELECT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO
            FROM   GE_ITEMS_SERIADO
            WHERE  GE_ITEMS_SERIADO.ITEMS_ID = INUITEMID
        ;
        SBRESULT VARCHAR2(1);
    BEGIN
        FOR RC IN CUEXISTS LOOP
            SBRESULT := GE_BOCONSTANTS.CSBYES;
        END LOOP;

        RETURN NVL(SBRESULT,GE_BOCONSTANTS.CSBNO);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION FBLVALITEMBYOPERUNIT
    (
        ISBSERIE          IN      GE_ITEMS_SERIADO.SERIE%TYPE,
        INBODEGAID        IN      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    )RETURN BOOLEAN
    IS
        NUCOUNT         NUMBER;
    BEGIN

        SELECT  COUNT (ID_ITEMS_SERIADO)
        INTO NUCOUNT
        FROM
        (
            SELECT ID_ITEMS_SERIADO
            FROM    GE_ITEMS_SERIADO
            WHERE   GE_ITEMS_SERIADO.SERIE = ISBSERIE
            AND     GE_ITEMS_SERIADO.OPERATING_UNIT_ID = INBODEGAID
            AND ROWNUM = 1
            UNION
            SELECT ID_ITEMS_SERIADO
            FROM GE_ITEMS_SERIADO,
                (
                    SELECT ASSO_OPER_UNIT
                    FROM OR_OPERATING_UNIT 
                    WHERE     
                    OR_OPERATING_UNIT.OPERATING_UNIT_ID = INBODEGAID
                )  ALMACEN
            WHERE   GE_ITEMS_SERIADO.SERIE = ISBSERIE
            AND     GE_ITEMS_SERIADO.OPERATING_UNIT_ID = ALMACEN.ASSO_OPER_UNIT
            AND ROWNUM = 1
        );
        UT_TRACE.TRACE('GE_BCItemsSeriado.fblValItemForSel nuCount:'||NUCOUNT, 5);

        RETURN NUCOUNT = 0;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLVALITEMBYOPERUNIT;
    

    













    FUNCTION FBLHASCAPACITY(
        INUIDITEMSERIADO IN GE_ITEM_SERIADO_CAP.ID_ITEMS_SERIADO%TYPE
    )
    RETURN BOOLEAN
    IS
        RFREFCURSOR CONSTANTS.TYREFCURSOR;
        SBHASITEMS  VARCHAR2(1);
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BCItemsSeriado.fblHasCapacity inuIdItemSeriado: '||INUIDITEMSERIADO,15);

        OPEN RFREFCURSOR FOR
            SELECT  'x'
            FROM    GE_ITEM_SERIADO_CAP
            WHERE   GE_ITEM_SERIADO_CAP.ID_ITEMS_SERIADO = INUIDITEMSERIADO
            AND     ROWNUM = 1;

        FETCH RFREFCURSOR INTO SBHASITEMS;
        CLOSE RFREFCURSOR;

        UT_TRACE.TRACE('Finaliza GE_BCItemsSeriado.fblHasCapacity',15);

        IF (SBHASITEMS IS NULL) THEN
            RETURN FALSE;
        ELSE
            RETURN TRUE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            IF (RFREFCURSOR%ISOPEN)THEN
                CLOSE RFREFCURSOR;
            END IF;
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            IF (RFREFCURSOR%ISOPEN)THEN
                CLOSE RFREFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLHASCAPACITY;

    




















    FUNCTION FRFGETITSERBYSERVNUMB
    (
        ISBSERVICENUMBER    IN  PR_PRODUCT.SERVICE_NUMBER%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFCURSOR            CONSTANTS.TYREFCURSOR;
        CNUTIPOCOMPONESIM   CONSTANT NUMBER(5) := 116;
    BEGIN

        OPEN RFCURSOR FOR
            SELECT /*+ index (pr_product IDX_PRODUCT_1)
                       index (pr_component IDX_PR_COMPONENT_2)
                       index (ge_items_seriado UNQ_SERIE)
                       index (ge_items PK_GE_ITEMS)
                   */
                   PR_COMPONENT.PRODUCT_ID          PRODUCT_ID,
                   GE_ITEMS_SERIADO.SERIE           SERIE,
                   GE_ITEMS.DESCRIPTION             ITEM_DESCRIPTION,
                   PR_COMPONENT.SERVICE_DATE        CREATION_DATE,
                   PR_COMPONENT.COMPONENT_STATUS_ID COMPONENT_STATUS_ID,
                   (SELECT PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID
                      FROM PR_COMP_SUSPENSION
                     WHERE PR_COMP_SUSPENSION.ACTIVE = GE_BOCONSTANTS.CSBYES
                       AND PR_COMP_SUSPENSION.COMPONENT_ID = PR_COMPONENT.COMPONENT_ID
                       AND ROWNUM = 1) SUSPENSION_TYPE_ID,
                   GE_BOITEMSSERIADO.FSBGETITEMSSERIADOATTVALS(
                                         GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
                                         GE_BOCONSTANTS.CSBYES,
                                         GE_BOCONSTANTS.CSBYES) ATTRIBUTES
            FROM   PR_PRODUCT,
                   PR_COMPONENT,
                   PS_PRODUCT_STATUS,
                   GE_ITEMS_SERIADO,
                   GE_ITEMS
            WHERE  GE_ITEMS.ITEMS_ID = GE_ITEMS_SERIADO.ITEMS_ID
              AND  GE_ITEMS_SERIADO.SERIE = PR_COMPONENT.SERVICE_NUMBER
              AND  PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES
              AND  PS_PRODUCT_STATUS.PRODUCT_STATUS_ID = PR_COMPONENT.COMPONENT_STATUS_ID
              AND  PR_COMPONENT.COMPONENT_TYPE_ID IN (
                       GE_BORECLAMOITEMS.CNUTIPOCOMPONEEQUIPO,
                       CNUTIPOCOMPONESIM
                    )
              AND  PR_COMPONENT.PRODUCT_ID = PR_PRODUCT.PRODUCT_ID
              AND  PR_PRODUCT.SERVICE_NUMBER = ISBSERVICENUMBER;

    RETURN RFCURSOR;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETITSERBYSERVNUMB;
    
    
















    FUNCTION FSBISINOPERUNIT
    (
        ISBSERIE        IN  GE_ITEMS_SERIADO.SERIE%TYPE
    )
    RETURN VARCHAR2
    IS
        NUSERIALITEMID   GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        CURSOR CUSERIALITEMS
        (
            ISBSERIE        IN  GE_ITEMS_SERIADO.SERIE%TYPE
        )
        IS
            SELECT  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO
            FROM    GE_ITEMS_SERIADO
            WHERE   GE_ITEMS_SERIADO.SERIE = ISBSERIE
            AND     GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV NOT IN (
                                                                    GE_BOITEMSCONSTANTS.CNUSTATUS_DADO_BAJA,
                                                                    GE_BOITEMSCONSTANTS.CNUSTATUS_ENUSO,
                                                                    GE_BOITEMSCONSTANTS.CNUSTATUS_CHATARRA,
                                                                    GE_BOITEMSCONSTANTS.CNUSTATUS_POR_RECUPERAR
                                                                );
    BEGIN
        OPEN CUSERIALITEMS(ISBSERIE);
        FETCH CUSERIALITEMS INTO NUSERIALITEMID;
        IF (CUSERIALITEMS%NOTFOUND) THEN
            CLOSE CUSERIALITEMS;
            RETURN GE_BOCONSTANTS.CSBNO;
        END IF;
        
        CLOSE CUSERIALITEMS;

        RETURN GE_BOCONSTANTS.CSBYES;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUSERIALITEMS%ISOPEN THEN
                CLOSE CUSERIALITEMS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUSERIALITEMS%ISOPEN THEN
                CLOSE CUSERIALITEMS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBISINOPERUNIT;
    
    
    













    FUNCTION FSBCLIENTITEM
    (
        ISBSERIE        IN  GE_ITEMS_SERIADO.SERIE%TYPE
    )
    RETURN VARCHAR2
    IS
        NUSERIALITEMID   GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        CURSOR CUCLIENTITEM
        (
            ISBSERIE        IN  GE_ITEMS_SERIADO.SERIE%TYPE
        )
        IS
            SELECT  /*+ index(ge_items_seriado UNQ_SERIE) */
                    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO
            FROM    GE_ITEMS_SERIADO
                    /*+ GE_BCItemsSeriado.fsbClientItem */
            WHERE   GE_ITEMS_SERIADO.SERIE = ISBSERIE
            AND     GE_ITEMS_SERIADO.PROPIEDAD IN  (
                                                        GE_BOITEMSCONSTANTS.CSBTRAIDO_CLIENTE,
                                                        GE_BOITEMSCONSTANTS.CSBVENDIDO_CLIENTE
                                                    );
    BEGIN
        OPEN CUCLIENTITEM(ISBSERIE);
        FETCH CUCLIENTITEM INTO NUSERIALITEMID;
        IF (CUCLIENTITEM%NOTFOUND) THEN
            CLOSE CUCLIENTITEM;
            RETURN GE_BOCONSTANTS.CSBNO;
        END IF;

        CLOSE CUCLIENTITEM;

        RETURN GE_BOCONSTANTS.CSBYES;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUCLIENTITEM%ISOPEN THEN
                CLOSE CUCLIENTITEM;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUCLIENTITEM%ISOPEN THEN
                CLOSE CUCLIENTITEM;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBCLIENTITEM;
    
    
    

















    PROCEDURE UPDPROPERTYSTATUS
    (
        INUSERIALITEMID IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        INUSTATUS       IN  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        ISBPROPERTY     IN  GE_ITEMS_SERIADO.PROPIEDAD%TYPE,
        INUCLIENT       IN  GE_ITEMS_SERIADO.SUBSCRIBER_ID%TYPE
    )
    IS

    BEGIN
        UPDATE  GE_ITEMS_SERIADO
        SET     GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = INUSTATUS,
                GE_ITEMS_SERIADO.PROPIEDAD = ISBPROPERTY,
                GE_ITEMS_SERIADO.SUBSCRIBER_ID = INUCLIENT
        WHERE   GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = INUSERIALITEMID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDPROPERTYSTATUS;
    
    

    




















    FUNCTION FTBGETSERIALITEMBYITEM
    (
        INUITEM     IN  GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        NUPIVOT     IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN  DAGE_ITEMS_SERIADO.TYTBID_ITEMS_SERIADO
    IS
        TBSERIALITEM    DAGE_ITEMS_SERIADO.TYTBID_ITEMS_SERIADO;
        CURSOR CUSERIALITEM IS
            SELECT  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO
            FROM    GE_ITEMS_SERIADO
            WHERE   GE_ITEMS_SERIADO.ITEMS_ID = INUITEM
            AND     GE_ITEMS_SERIADO.ID_ITEMS_SERIADO > NVL(NUPIVOT,GE_ITEMS_SERIADO.ID_ITEMS_SERIADO-1)
            ORDER BY GE_ITEMS_SERIADO.ID_ITEMS_SERIADO;
            
    BEGIN
    
        OPEN CUSERIALITEM;
        FETCH CUSERIALITEM BULK COLLECT INTO TBSERIALITEM LIMIT 100;
        CLOSE CUSERIALITEM;

        RETURN TBSERIALITEM;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUSERIALITEM%ISOPEN ) THEN
                CLOSE CUSERIALITEM;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF ( CUSERIALITEM%ISOPEN ) THEN
                CLOSE CUSERIALITEM;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETSERIALITEMBYITEM;
    
    
    
    



















    FUNCTION FNUGETPRODUCTIDBYSERIALITEM
    (
        INUSERIALITEM   IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN  PR_COMPONENT.PRODUCT_ID%TYPE
    IS
        CSBYES CONSTANT VARCHAR2(1) := GE_BOCONSTANTS.CSBYES;
        CURSOR CUPRODUCTBYSERIALITEM IS
            SELECT  PR_COMPONENT.PRODUCT_ID
            FROM    PR_COMPONENT,
                    PS_PRODUCT_STATUS,
                    PS_CLASS_SERVICE,
                    GE_ITEMS,
                    GE_ITEMS ITEM_REQUERIDO,
                    GE_ITEMS_SERIADO
            WHERE   GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = INUSERIALITEM
            AND     GE_ITEMS.ITEMS_ID = GE_ITEMS_SERIADO.ITEMS_ID
            AND     PR_COMPONENT.SERVICE_NUMBER = GE_ITEMS_SERIADO.SERIE
            AND     PS_PRODUCT_STATUS.PRODUCT_STATUS_ID = PR_COMPONENT.COMPONENT_STATUS_ID
            AND     PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT = CSBYES
            AND     PS_CLASS_SERVICE.CLASS_SERVICE_ID = PR_COMPONENT.CLASS_SERVICE_ID
            AND     ITEM_REQUERIDO.ITEMS_ID = PS_CLASS_SERVICE.ITEM_ID
            AND     GE_ITEMS.ID_ITEMS_TIPO = ITEM_REQUERIDO.ID_ITEMS_TIPO
            AND     ROWNUM <= 1;
            
    BEGIN

        FOR RCPRODUCT IN CUPRODUCTBYSERIALITEM LOOP
        
            RETURN  RCPRODUCT.PRODUCT_ID;
        END LOOP;

        RETURN NULL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPRODUCTIDBYSERIALITEM;
    
    


















    FUNCTION FRFGETITEMBYPRODANDTYP
    (
        INUPRODUCTID    IN  PR_COMPONENT.PRODUCT_ID%TYPE,
        INUITEMTYPEID   IN  GE_ITEMS.ID_ITEMS_TIPO%TYPE
    )
    RETURN  CONSTANTS.TYREFCURSOR
    IS
        CUITEMS CONSTANTS.TYREFCURSOR;
    BEGIN
    
        UT_TRACE.TRACE('[INICIO] GE_BCItemsSeriado.frfGetItemByProdAndTyp '||
            'inuProductId:['||INUPRODUCTID||']'||
            'inuItemTypeId:['||INUITEMTYPEID||']',15);

        OPEN CUITEMS FOR
            SELECT  /*+
                        leading(pr_component)
                        use_nl(pr_component ps_product_status)
                        use_nl(pr_component ps_class_service)
                        use_nl(pr_component ge_items_seriado)
                        use_nl(ps_class_service item_requerido)
                        use_nl(item_requerido ge_items)
                        use_nl(ge_items ge_items_seriado)
                    */
                    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO NUSERIALITEMID,
                    GE_ITEMS_SERIADO.SERIE SBSERIE,
                    GE_ITEMS_SERIADO.ITEMS_ID NUITEMID,
                    GE_ITEMS_SERIADO.ESTADO_TECNICO NUTECHSTATUS,
                    GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV NUINVSTATUS
            FROM    
                    PR_COMPONENT,
                    PS_PRODUCT_STATUS,
                    PS_CLASS_SERVICE,
                    GE_ITEMS,
                    GE_ITEMS ITEM_REQUERIDO,
                    GE_ITEMS_SERIADO
            WHERE   PR_COMPONENT.PRODUCT_ID = INUPRODUCTID
            AND     PS_CLASS_SERVICE.CLASS_SERVICE_ID = PR_COMPONENT.CLASS_SERVICE_ID
            AND     ITEM_REQUERIDO.ITEMS_ID = PS_CLASS_SERVICE.ITEM_ID
            AND     GE_ITEMS.ID_ITEMS_TIPO = ITEM_REQUERIDO.ID_ITEMS_TIPO
            AND     GE_ITEMS.ID_ITEMS_TIPO = INUITEMTYPEID
            AND     GE_ITEMS_SERIADO.SERIE = PR_COMPONENT.SERVICE_NUMBER
            AND     GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
            AND     PS_PRODUCT_STATUS.PRODUCT_STATUS_ID = PR_COMPONENT.COMPONENT_STATUS_ID
            AND     PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES;

        UT_TRACE.TRACE('[FIN] GE_BCItemsSeriado.frfGetItemByProdAndTyp',15);

        RETURN CUITEMS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] GE_BCItemsSeriado.frfGetItemByProdAndTyp',15);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[OTHERS] GE_BCItemsSeriado.frfGetItemByProdAndTyp',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
   END FRFGETITEMBYPRODANDTYP;
   
   
   










    PROCEDURE DELORDODCACHE
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BCItemsSeriado.DelOrdodCache',20);

        TBCACHEVALATRTIPOITEM.DELETE;
        TBCACHEATRTIPOITEM.DELETE;

        UT_TRACE.TRACE('FIN GE_BCItemsSeriado.DelOrdodCache',20);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BCItemsSeriado.DelOrdodCache',20);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BCItemsSeriado.DelOrdodCache',20);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELORDODCACHE;
    

    












    FUNCTION FRCSERIALITEMBYSERIE
    (
        ISBSERIE        IN  GE_ITEMS_SERIADO.SERIE%TYPE
    )
    RETURN DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO
    IS
        RCSERIALITEM    DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
        CURSOR CUSERIALITEM
        (
            ISBSERIE        IN  GE_ITEMS_SERIADO.SERIE%TYPE
        )
        IS
        SELECT /*+ index (GE_items_seriado UNQ_SERIE)*/
		    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
		    GE_ITEMS_SERIADO.ITEMS_ID,
		    GE_ITEMS_SERIADO.SERIE,
		    GE_ITEMS_SERIADO.ESTADO_TECNICO,
		    GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV,
		    GE_ITEMS_SERIADO.COSTO,
		    GE_ITEMS_SERIADO.SUBSIDIO,
		    GE_ITEMS_SERIADO.PROPIEDAD,
		    GE_ITEMS_SERIADO.FECHA_INGRESO,
		    GE_ITEMS_SERIADO.FECHA_SALIDA,
		    GE_ITEMS_SERIADO.FECHA_REACON,
		    GE_ITEMS_SERIADO.FECHA_BAJA,
		    GE_ITEMS_SERIADO.FECHA_GARANTIA,
		    GE_ITEMS_SERIADO.OPERATING_UNIT_ID,
		    GE_ITEMS_SERIADO.NUMERO_SERVICIO,
		    GE_ITEMS_SERIADO.SUBSCRIBER_ID,
		    GE_ITEMS_SERIADO.ROWID
		FROM GE_ITEMS_SERIADO
        
		WHERE GE_ITEMS_SERIADO.SERIE = ISBSERIE;
    BEGIN
        UT_TRACE.TRACE('Inicio GE_BCItemsSeriado.frcSerialItemBySerie',10);
        IF CUSERIALITEM%ISOPEN THEN
            CLOSE CUSERIALITEM;
        END IF;
            
        OPEN CUSERIALITEM(ISBSERIE);
        FETCH CUSERIALITEM INTO RCSERIALITEM;
        CLOSE CUSERIALITEM;
        UT_TRACE.TRACE('Fin GE_BCItemsSeriado.frcSerialItemBySerie',10);
        RETURN RCSERIALITEM;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BCItemsSeriado.frcSerialItemBySerie',10);
            IF CUSERIALITEM%ISOPEN THEN
                CLOSE CUSERIALITEM;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BCItemsSeriado.frcSerialItemBySerie',10);
            IF CUSERIALITEM%ISOPEN THEN
                CLOSE CUSERIALITEM;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRCSERIALITEMBYSERIE;
    
    

















    FUNCTION FNUGETIDATTBYITEMSTIPOSEQ
    (
        INUIDITEMSTIPO IN GE_ITEMS_TIPO.ID_ITEMS_TIPO%TYPE,
        INUPOSITION    IN GE_ITEMS_TIPO_ATR.POSICION%TYPE
    )
    RETURN GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE
    IS
        CURSOR CUGETID
        IS
            SELECT /*+ index (ge_items_tipo_atr IDX_GE_ITEMS_TIPO_ATR_01)*/ GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR
            FROM GE_ITEMS_TIPO_ATR
            WHERE GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO = INUIDITEMSTIPO
                AND GE_ITEMS_TIPO_ATR.POSICION = INUPOSITION
            ;

        NUIDITEMSTIPOATR GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE;
        
    BEGIN

        IF (CUGETID%ISOPEN) THEN
            CLOSE CUGETID;
        END IF;

        OPEN CUGETID;
        FETCH CUGETID INTO NUIDITEMSTIPOATR;
        CLOSE CUGETID;

        RETURN NUIDITEMSTIPOATR;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUGETID%ISOPEN) THEN
                CLOSE CUGETID;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUGETID%ISOPEN) THEN
                CLOSE CUGETID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETIDATTBYITEMSTIPOSEQ;


    
















    FUNCTION FTBGETSERIALITEMDATA
    (
        ISBSERIE IN GE_ITEMS_SERIADO.SERIE%TYPE
    )
    RETURN TYTBSERIALITEMDATA
    IS
        TBRESULTS TYTBSERIALITEMDATA;
        NUINDEX   BINARY_INTEGER;
    BEGIN

        IF (CUSERIALITEMDATA%ISOPEN) THEN
            CLOSE CUSERIALITEMDATA;
        END IF;

        TBRESULTS.DELETE;

        OPEN CUSERIALITEMDATA(ISBSERIE);
        FETCH CUSERIALITEMDATA BULK COLLECT INTO TBRESULTS;
        CLOSE CUSERIALITEMDATA;

        RETURN TBRESULTS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUSERIALITEMDATA%ISOPEN) THEN
                CLOSE CUSERIALITEMDATA;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUSERIALITEMDATA%ISOPEN) THEN
                CLOSE CUSERIALITEMDATA;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETSERIALITEMDATA;
    
    

















    FUNCTION FSBVALITEMUSESTATE
    (
        INUITEMSERIADOID    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )RETURN VARCHAR2
    IS
    BEGIN
    
        
        DAGE_ITEMS_SERIADO.ACCKEY(INUITEMSERIADOID);
        
        
        IF (DAGE_ITEMS_SERIADO.FNUGETID_ITEMS_ESTADO_INV(INUITEMSERIADOID) = GE_BOITEMSCONSTANTS.CNUSTATUS_ENUSO) THEN
            RETURN OR_BOCONSTANTS.CSBSI;
        ELSE
            RETURN OR_BOCONSTANTS.CSBNO;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBVALITEMUSESTATE;
    
    

















   FUNCTION FSBVALITEMALLOWEQUIP
    (
        INUITEMID   IN GE_ITEMS.ITEMS_ID%TYPE,
        INUEQUIP    IN GE_ITEMS.ITEMS_ID%TYPE
    )RETURN VARCHAR2
    IS
    
        NUGAMAITEM  GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA%TYPE;
        NUGAMAEQUIP GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA%TYPE;
    
    BEGIN

        UT_TRACE.TRACE('-- INICIO GE_BCItemsSeriado.fsbValItemAllowEquip',10);
        
        
        GE_BCITEMS_GAMA_ITEM.GETITEMGAMABYITEM(INUITEMID, NUGAMAITEM);
        
        
        GE_BCITEMS_GAMA_ITEM.GETITEMGAMABYITEM(INUEQUIP, NUGAMAEQUIP);
        
        
        
        IF (NUGAMAITEM IS NOT NULL AND NUGAMAITEM = NUGAMAEQUIP) THEN
            UT_TRACE.TRACE('-- FIN GE_BCItemsSeriado.fsbValItemAllowEquip',10);
            RETURN GE_BOCONSTANTS.CSBYES;
        ELSE
            UT_TRACE.TRACE('-- FIN GE_BCItemsSeriado.fsbValItemAllowEquip',10);
            RETURN GE_BOCONSTANTS.CSBNO;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBVALITEMALLOWEQUIP;
    
    
        
























    PROCEDURE GETITEMSTATEBYSERIE
    (
        NUSERIALITEMID  IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ORFCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        
        UT_TRACE.TRACE('BEGIN GE_BCItemsSeriado.GetItemStateBySerie ['||NUSERIALITEMID||']',1);

        OPEN ORFCURSOR FOR SELECT
            /*+
                ordered
                index(ge_items_seriado PK_GE_ITEMS_SERIADO)
                index(ge_items PK_GE_ITEMS)
                use_nl(ge_items_seriado ge_items)
                index(ge_items_estado_inv PK_GE_ITEMS_ESTADO_INV)
                use_nl(ge_items_seriado ge_items_estado_inv)
                index(or_oper_unit_persons PK_OR_OPER_UNIT_PERSONS)
            */
            GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
            GE_ITEMS_SERIADO.ITEMS_ID,
            GE_ITEMS.ITEMS_ID||' - '||GE_ITEMS.DESCRIPTION ITEMDESC,
            GE_ITEMS_SERIADO.SERIE,
            GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV,
            GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV||' - '||GE_ITEMS_ESTADO_INV.DESCRIPCION ITEMSTATUSDESC,
            GE_ITEMS_SERIADO.OPERATING_UNIT_ID
        FROM    GE_ITEMS_SERIADO,
                GE_ITEMS,
                GE_ITEMS_ESTADO_INV,
                OR_OPER_UNIT_PERSONS
        /*+ GE_BCItemsSeriado.GetItemStateBySerie SAO159297 */
        WHERE   GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = NUSERIALITEMID
            AND GE_ITEMS.ITEMS_ID = GE_ITEMS_SERIADO.ITEMS_ID
            AND GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV = GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV
            AND GE_ITEMS_SERIADO.OPERATING_UNIT_ID = OR_OPER_UNIT_PERSONS.OPERATING_UNIT_ID
            AND OR_OPER_UNIT_PERSONS.PERSON_ID = GE_BOPERSONAL.FNUGETPERSONID;

        UT_TRACE.TRACE('END GE_BCItemsSeriado.GetItemStateBySerie',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BCItemsSeriado.GetItemStateBySerie',1);
            IF ORFCURSOR%ISOPEN THEN
                CLOSE ORFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BCItemsSeriado.GetItemStateBySerie',1);
            IF ORFCURSOR%ISOPEN THEN
                CLOSE ORFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    



















  
    PROCEDURE GETMAINTAINSSEALNOTASSOITEM
      (
        NUSERIALITEMID  IN  GE_ASSO_SERIAL_ITEMS.ASSO_SERIAL_ITEMS_ID%TYPE,
        ORFCURSOR         OUT CONSTANTS.TYREFCURSOR
      ) IS
      
      BEGIN
      
        
        UT_TRACE.TRACE('BEGIN GE_BCItemsSeriado.GetMaintainsSealNotAssoItem ['||NUSERIALITEMID||']',1);

        OPEN ORFCURSOR FOR 
             SELECT 
                       A.ASSO_SERIAL_ITEMS_ID
            /*+   GE_BCITEMSSERIADO.GetMaintainsSealNotAssoItem  SAO179521 */         
            FROM GE_ASSO_SERIAL_ITEMS A 
            WHERE A.SERIAL_ITEMS_ID = NUSERIALITEMID;
      
        
          UT_TRACE.TRACE('END GE_BCItemsSeriado.GetMaintainsSealNotAssoItem',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BCItemsSeriado.MaintainsSealNotAssoItem',1);
            IF ORFCURSOR%ISOPEN THEN
                CLOSE ORFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BCItemsSeriado.MaintainsSealNotAssoItem',1);
            IF ORFCURSOR%ISOPEN THEN
                CLOSE ORFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;   
      END GETMAINTAINSSEALNOTASSOITEM;
    
    
















    PROCEDURE GETVALIDBYATTRANDITEM
    (
        INUITEMID       IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUATTRIBUTEID  IN  GE_ATTR_GAMMA_VALUE.ID_ITEMS_TIPO_ATR%TYPE,
        ORFVALIDVALUES  OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN

      OPEN  ORFVALIDVALUES FOR
      SELECT  /*+ use_nl(ge_items_gama_item GE_ATTR_GAMMA_VALUE)
                    index(ge_items_gama_item UX_GE_ITEMS_GAMA_ITEM02)
                    index(GE_ATTR_GAMMA_VALUE ID_ITEMS_TIPO_ATR) */
                GE_ATTR_GAMMA_VALUE.ID_ATTR_GAMMA_VALUE ID,
                GE_ATTR_GAMMA_VALUE.PERMITED_VALUE DESCRIPTION
        /*+ GE_BCItemAdmin.getValidByAttrAndItem   SAO180680 */
        FROM    GE_ITEMS_GAMA_ITEM, GE_ATTR_GAMMA_VALUE
            WHERE GE_ITEMS_GAMA_ITEM.ITEMS_ID = INUITEMID
                AND NVL(GE_ATTR_GAMMA_VALUE.ID_GAMMA, GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA) =  GE_ITEMS_GAMA_ITEM.ID_ITEMS_GAMA
                AND GE_ATTR_GAMMA_VALUE.ID_ITEMS_TIPO_ATR = INUATTRIBUTEID
                ORDER BY ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETVALIDBYATTRANDITEM;
    


    















    PROCEDURE GETSEALLOCATIONS
    (
        INUITEMSID      IN  GE_ITEMS.ITEMS_ID%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUITEMSTIPOATRID    GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_ATR%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIA [GE_BCItemsSeriado.getSealLocations]',10);

        NUITEMSTIPOATRID := GE_BCITEMSSERIADO.FNUGETIDATTRIBUTE(
                                                    GE_BOITEMSCONSTANTS.CNUTYPE_SEAL ,
                                                    GE_BOITEMSCONSTANTS.CSBSEALATTRIBUTETECHNICALNAME);

        GETVALIDBYATTRANDITEM(INUITEMSID , NUITEMSTIPOATRID, ORFDATACURSOR);


        UT_TRACE.TRACE('FIN [GE_BCItemsSeriado.getSealLocations]',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSEALLOCATIONS;
    

    

















    FUNCTION FRFGETORDERACTBYSERIALITEM
    (
        INUACTIVITYID   IN OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE,
        INUSERIALITEMID IN GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFORDERACTIVITIES   CONSTANTS.TYREFCURSOR;
        CSBFINISHSTATUS     VARCHAR2(1) := OR_BOCONSTANTS.CSBFINISHSTATUS;
    BEGIN
        UT_TRACE.TRACE('BEGIN [GE_BCItemsSeriado.frfGetOrderActBySerialItem]',3);
        
        OPEN RFORDERACTIVITIES FOR SELECT /*+ index(or_order_activity IDX_OR_ORDER_ACTIVITY_16)*/
                                          OR_ORDER_ACTIVITY.*, ROWID
                                   FROM   OR_ORDER_ACTIVITY
                                          /*+ GE_BCItemsSeriado.frfGetOrderActBySerialItem*/
                                   WHERE  SERIAL_ITEMS_ID = INUSERIALITEMID
                                     AND  ACTIVITY_ID = INUACTIVITYID
                                     AND  STATUS <> CSBFINISHSTATUS;

        UT_TRACE.TRACE('END   [GE_BCItemsSeriado.frfGetOrderActBySerialItem]',3);
        RETURN RFORDERACTIVITIES;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR [GE_BCItemsSeriado.frfGetOrderActBySerialItem]',3);
            IF RFORDERACTIVITIES%ISOPEN THEN
                CLOSE RFORDERACTIVITIES;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS [GE_BCItemsSeriado.frfGetOrderActBySerialItem]',3);
            IF RFORDERACTIVITIES%ISOPEN THEN
                CLOSE RFORDERACTIVITIES;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    


















    FUNCTION FRFGETITEMDATABYID
    (
        INUSERIALITEMID IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFSERIALITEM    CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BCItemsSeriado.frfGetItemDataById ['||INUSERIALITEMID||']',2);

        OPEN RFSERIALITEM FOR SELECT /*+ index(ge_items_seriado PK_GE_ITEMS_SERIADO) */
                                     *
                              FROM   GE_ITEMS_SERIADO
                                     /*+ GE_BCItemsSeriado.frfGetItemDataById */
                              WHERE  ID_ITEMS_SERIADO = INUSERIALITEMID;

        UT_TRACE.TRACE('END GE_BCItemsSeriado.frfGetItemDataById',2);
        RETURN RFSERIALITEM;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF RFSERIALITEM%ISOPEN THEN
                CLOSE RFSERIALITEM;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF RFSERIALITEM%ISOPEN THEN
                CLOSE RFSERIALITEM;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    



















    FUNCTION FRFGETALLITEMATTVAL
    (
        INUSERIALITEMID       IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFALLITEMATTVAL    CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BCItemsSeriado.frfGetAllItemAttVal ['||INUSERIALITEMID||']',3);
        
        OPEN RFALLITEMATTVAL FOR SELECT  /*+ index(ge_items_tipo_at_val IDX_GE_ITEMS_TIPO_AT_VAL_01) */
                                A.ID_ITEMS_TIPO_ATR,
                                A.ENTITY_ATTRIBUTE_ID,
                                A.POSICION,
                                A.REQUERIDO,
                                A.ENTITY_ID,
                                A.ATTRIBUTE_TYPE_ID,
                                A.TECHNICAL_NAME,
                                A.DISPLAY_NAME,
                                A.DEFAULT_VALUE,
                                A.LENGTH,
                                A.PRECISION,
                                A.SCALE,
                                A.IS_CHECK_BOX,
                                A.CHECKED_VALUE,
                                A.UNCHECKED_VALUE,
                                A.REGLA_INICIO,
                                A.REGLA_VALIDACION,
                                GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL ID_ITEMS_TIPO_AT_VAL,
                                GE_ITEMS_TIPO_AT_VAL.VALOR                VALOR
                         FROM   (
                                SELECT  /*+ index(ge_items_seriado PK_GE_ITEMS_SERIADO)
                                            index(ge_items PK_GE_ITEMS)
                                            index(ge_items_tipo_atr IDX_GE_ITEMS_TIPO_ATR_01)
                                            index(ge_entity_attributes PK_GE_ENTITY_ATTRIBUTES)*/
                                        GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
                                        GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR,
                                        GE_ITEMS_TIPO_ATR.ENTITY_ATTRIBUTE_ID,
                                        GE_ITEMS_TIPO_ATR.POSICION,
                                        GE_ITEMS_TIPO_ATR.REQUERIDO,
                                        GE_ENTITY_ATTRIBUTES.ENTITY_ID,
                                        GE_ENTITY_ATTRIBUTES.ATTRIBUTE_TYPE_ID,
                                        GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME,
                                        GE_ENTITY_ATTRIBUTES.DISPLAY_NAME,
                                        GE_ENTITY_ATTRIBUTES.DEFAULT_VALUE,
                                        GE_ENTITY_ATTRIBUTES.LENGTH,
                                        GE_ENTITY_ATTRIBUTES.PRECISION,
                                        GE_ENTITY_ATTRIBUTES.SCALE,
                                        GE_ENTITY_ATTRIBUTES.IS_CHECK_BOX,
                                        GE_ENTITY_ATTRIBUTES.CHECKED_VALUE,
                                        GE_ENTITY_ATTRIBUTES.UNCHECKED_VALUE,
                                        GE_ITEMS_TIPO_ATR.REGLA_INICIO,
                                        GE_ITEMS_TIPO_ATR.REGLA_VALIDACION
                                  FROM  GE_ITEMS_SERIADO,
                                        GE_ITEMS,
                                        GE_ITEMS_TIPO_ATR,
                                        GE_ENTITY_ATTRIBUTES
                                 WHERE  GE_ITEMS_TIPO_ATR.ENTITY_ATTRIBUTE_ID  = GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID
                                   AND  GE_ITEMS.ID_ITEMS_TIPO                 = GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO
                                   AND  GE_ITEMS_SERIADO.ITEMS_ID              = GE_ITEMS.ITEMS_ID
                                   AND  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO      = INUSERIALITEMID
                                 ) A,
                                 GE_ITEMS_TIPO_AT_VAL
                                 /*+ GE_BCItemsSeriado.frfGetAllItemAttVal */
                         WHERE   GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_ATR(+) = A.ID_ITEMS_TIPO_ATR
                           AND   GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_SERIADO(+) = A.ID_ITEMS_SERIADO
                        ORDER BY A.POSICION;
        
        UT_TRACE.TRACE('END GE_BCItemsSeriado.frfGetAllItemAttVal',3);
        RETURN RFALLITEMATTVAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF RFALLITEMATTVAL%ISOPEN THEN
                CLOSE RFALLITEMATTVAL;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF RFALLITEMATTVAL%ISOPEN THEN
                CLOSE RFALLITEMATTVAL;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END FRFGETALLITEMATTVAL;
     
     


















    FUNCTION FNUGETITEMTYPEBYIDSERIE
    (
        INUSERIALITEMID       IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    ) RETURN GE_ITEMS.ID_ITEMS_TIPO%TYPE
    IS
        
        NUITEMSID       GE_ITEMS.ITEMS_ID%TYPE;
        NUITEMTYPEID    GE_ITEMS_TIPO.ID_ITEMS_TIPO%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BCItemsSeriado.fnugetItemTypeByIdSerie. inuSerialItemId: '||TO_CHAR(INUSERIALITEMID), 2 );
        
        
        IF(INUSERIALITEMID IS NOT NULL) THEN
            
            NUITEMSID := DAGE_ITEMS_SERIADO.FNUGETITEMS_ID(INUSERIALITEMID, 0);
            
            
            IF (NUITEMSID IS NOT NULL) THEN
                
                RETURN DAGE_ITEMS.FNUGETID_ITEMS_TIPO(NUITEMSID, 0);
            ELSE
                UT_TRACE.TRACE('FIN GE_BCItemsSeriado.fnugetItemTypeByIdSerie. El ?tem es nulo', 2 );
                RETURN NULL;
            END IF;
        ELSE
            UT_TRACE.TRACE('FIN GE_BCItemsSeriado.fnugetItemTypeByIdSerie. Elequipo seriado es nulo', 2 );
            RETURN NULL;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETITEMTYPEBYIDSERIE;

END GE_BCITEMSSERIADO;