CREATE OR REPLACE PACKAGE BODY DAGE_ITEMS_DOCUMENTO IS
   CNURECORD_NOT_EXIST CONSTANT NUMBER( 1 ) := 1;
   CNURECORD_ALREADY_EXIST CONSTANT NUMBER( 1 ) := 2;
   CNUAPPTABLEBUSSY CONSTANT NUMBER( 4 ) := 6951;
   CNUINS_PK_NULL CONSTANT NUMBER( 4 ) := 1682;
   CNURECORD_HAVE_CHILDREN CONSTANT NUMBER( 4 ) := -2292;
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO175100';
   CSBTABLEPARAMETER CONSTANT VARCHAR2( 30 ) := 'GE_ITEMS_DOCUMENTO';
   CNUGEENTITYID CONSTANT VARCHAR2( 30 ) := 2605;
   CURSOR CULOCKRCBYPK( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE ) IS
SELECT GE_items_documento.*,GE_items_documento.rowid 
		FROM GE_items_documento
		WHERE  Id_Items_Documento = inuId_Items_Documento
		FOR UPDATE NOWAIT;
   CURSOR CULOCKRCBYROWID( IRIROWID IN VARCHAR2 ) IS
SELECT GE_items_documento.*,GE_items_documento.rowid 
		FROM GE_items_documento
		WHERE 
			rowId = irirowid
		FOR UPDATE NOWAIT;
   TYPE TYRFGE_ITEMS_DOCUMENTO IS REF CURSOR;
   RCRECOFTAB TYRCGE_ITEMS_DOCUMENTO;
   RCDATA CURECORD%ROWTYPE;
   BLDAO_USE_CACHE BOOLEAN := NULL;
   FUNCTION FSBGETMESSAGEDESCRIPTION
    RETURN VARCHAR2
    IS
      SBTABLEDESCRIPTION VARCHAR2( 32000 );
    BEGIN
      IF ( CNUGEENTITYID > 0 AND DAGE_ENTITY.FBLEXIST( CNUGEENTITYID ) ) THEN
         SBTABLEDESCRIPTION := DAGE_ENTITY.FSBGETDISPLAY_NAME( CNUGEENTITYID );
       ELSE
         SBTABLEDESCRIPTION := CSBTABLEPARAMETER;
      END IF;
      RETURN SBTABLEDESCRIPTION;
   END;
   PROCEDURE GETDAO_USE_CACHE
    IS
    BEGIN
      IF ( BLDAO_USE_CACHE IS NULL ) THEN
         BLDAO_USE_CACHE := GE_BOPARAMETER.FSBGET( 'DAO_USE_CACHE' ) = 'Y';
      END IF;
   END;
   FUNCTION FSBPRIMARYKEY( RCI IN STYGE_ITEMS_DOCUMENTO := RCDATA )
    RETURN VARCHAR2
    IS
      SBPK VARCHAR2( 500 );
    BEGIN
      SBPK := '[';
      SBPK := SBPK || UT_CONVERT.FSBTOCHAR( RCI.ID_ITEMS_DOCUMENTO );
      SBPK := SBPK || ']';
      RETURN SBPK;
   END;
   PROCEDURE LOCKBYPK( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, ORCGE_ITEMS_DOCUMENTO OUT STYGE_ITEMS_DOCUMENTO )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      OPEN CULOCKRCBYPK( INUID_ITEMS_DOCUMENTO );
      FETCH CULOCKRCBYPK
         INTO ORCGE_ITEMS_DOCUMENTO;
      IF CULOCKRCBYPK%NOTFOUND THEN
         CLOSE CULOCKRCBYPK;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CULOCKRCBYPK;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RESOURCE_BUSY THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         ERRORS.SETERROR( CNUAPPTABLEBUSSY, FSBPRIMARYKEY( RCERROR ) || '|' || FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         RAISE;
   END;
   PROCEDURE LOCKBYROWID( IRIROWID IN VARCHAR2, ORCGE_ITEMS_DOCUMENTO OUT STYGE_ITEMS_DOCUMENTO )
    IS
    BEGIN
      OPEN CULOCKRCBYROWID( IRIROWID );
      FETCH CULOCKRCBYROWID
         INTO ORCGE_ITEMS_DOCUMENTO;
      IF CULOCKRCBYROWID%NOTFOUND THEN
         CLOSE CULOCKRCBYROWID;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CULOCKRCBYROWID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF CULOCKRCBYROWID%ISOPEN THEN
            CLOSE CULOCKRCBYROWID;
         END IF;
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RESOURCE_BUSY THEN
         IF CULOCKRCBYROWID%ISOPEN THEN
            CLOSE CULOCKRCBYROWID;
         END IF;
         ERRORS.SETERROR( CNUAPPTABLEBUSSY, 'rowid=[' || IRIROWID || ']|' || FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF CULOCKRCBYROWID%ISOPEN THEN
            CLOSE CULOCKRCBYROWID;
         END IF;
         RAISE;
   END;
   PROCEDURE DELRECORDOFTABLES( ITBGE_ITEMS_DOCUMENTO IN OUT NOCOPY TYTBGE_ITEMS_DOCUMENTO )
    IS
    BEGIN
      RCRECOFTAB.ID_ITEMS_DOCUMENTO.DELETE;
      RCRECOFTAB.DOCUMENT_TYPE_ID.DELETE;
      RCRECOFTAB.DOCUMENTO_EXTERNO.DELETE;
      RCRECOFTAB.FECHA.DELETE;
      RCRECOFTAB.ESTADO.DELETE;
      RCRECOFTAB.OPERATING_UNIT_ID.DELETE;
      RCRECOFTAB.DESTINO_OPER_UNI_ID.DELETE;
      RCRECOFTAB.TERMINAL_ID.DELETE;
      RCRECOFTAB.USER_ID.DELETE;
      RCRECOFTAB.COMENTARIO.DELETE;
      RCRECOFTAB.CAUSAL_ID.DELETE;
      RCRECOFTAB.DELIVERY_DATE.DELETE;
      RCRECOFTAB.PACKAGE_ID.DELETE;
      RCRECOFTAB.ROW_ID.DELETE;
   END;
   PROCEDURE FILLRECORDOFTABLES( ITBGE_ITEMS_DOCUMENTO IN OUT NOCOPY TYTBGE_ITEMS_DOCUMENTO, OBLUSEROWID OUT BOOLEAN )
    IS
    BEGIN
      DELRECORDOFTABLES( ITBGE_ITEMS_DOCUMENTO );
      FOR N IN ITBGE_ITEMS_DOCUMENTO.FIRST..ITBGE_ITEMS_DOCUMENTO.LAST
       LOOP
         RCRECOFTAB.ID_ITEMS_DOCUMENTO( N ) := ITBGE_ITEMS_DOCUMENTO( N ).ID_ITEMS_DOCUMENTO;
         RCRECOFTAB.DOCUMENT_TYPE_ID( N ) := ITBGE_ITEMS_DOCUMENTO( N ).DOCUMENT_TYPE_ID;
         RCRECOFTAB.DOCUMENTO_EXTERNO( N ) := ITBGE_ITEMS_DOCUMENTO( N ).DOCUMENTO_EXTERNO;
         RCRECOFTAB.FECHA( N ) := ITBGE_ITEMS_DOCUMENTO( N ).FECHA;
         RCRECOFTAB.ESTADO( N ) := ITBGE_ITEMS_DOCUMENTO( N ).ESTADO;
         RCRECOFTAB.OPERATING_UNIT_ID( N ) := ITBGE_ITEMS_DOCUMENTO( N ).OPERATING_UNIT_ID;
         RCRECOFTAB.DESTINO_OPER_UNI_ID( N ) := ITBGE_ITEMS_DOCUMENTO( N ).DESTINO_OPER_UNI_ID;
         RCRECOFTAB.TERMINAL_ID( N ) := ITBGE_ITEMS_DOCUMENTO( N ).TERMINAL_ID;
         RCRECOFTAB.USER_ID( N ) := ITBGE_ITEMS_DOCUMENTO( N ).USER_ID;
         RCRECOFTAB.COMENTARIO( N ) := ITBGE_ITEMS_DOCUMENTO( N ).COMENTARIO;
         RCRECOFTAB.CAUSAL_ID( N ) := ITBGE_ITEMS_DOCUMENTO( N ).CAUSAL_ID;
         RCRECOFTAB.DELIVERY_DATE( N ) := ITBGE_ITEMS_DOCUMENTO( N ).DELIVERY_DATE;
         RCRECOFTAB.PACKAGE_ID( N ) := ITBGE_ITEMS_DOCUMENTO( N ).PACKAGE_ID;
         RCRECOFTAB.ROW_ID( N ) := ITBGE_ITEMS_DOCUMENTO( N ).ROWID;
         OBLUSEROWID := RCRECOFTAB.ROW_ID( N ) IS NOT NULL;
      END LOOP;
   END;
   PROCEDURE LOAD( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE )
    IS
      RCRECORDNULL CURECORD%ROWTYPE;
    BEGIN
      IF CURECORD%ISOPEN THEN
         CLOSE CURECORD;
      END IF;
      OPEN CURECORD( INUID_ITEMS_DOCUMENTO );
      FETCH CURECORD
         INTO RCDATA;
      IF CURECORD%NOTFOUND THEN
         CLOSE CURECORD;
         RCDATA := RCRECORDNULL;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CURECORD;
   END;
   PROCEDURE LOADBYROWID( IRIROWID IN VARCHAR2 )
    IS
      RCRECORDNULL CURECORDBYROWID%ROWTYPE;
    BEGIN
      IF CURECORDBYROWID%ISOPEN THEN
         CLOSE CURECORDBYROWID;
      END IF;
      OPEN CURECORDBYROWID( IRIROWID );
      FETCH CURECORDBYROWID
         INTO RCDATA;
      IF CURECORDBYROWID%NOTFOUND THEN
         CLOSE CURECORDBYROWID;
         RCDATA := RCRECORDNULL;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CURECORDBYROWID;
   END;
   FUNCTION FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      IF ( INUID_ITEMS_DOCUMENTO = RCDATA.ID_ITEMS_DOCUMENTO ) THEN
         RETURN ( TRUE );
      END IF;
      RETURN ( FALSE );
   END;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE CLEARMEMORY
    IS
      RCRECORDNULL CURECORD%ROWTYPE;
    BEGIN
      RCDATA := RCRECORDNULL;
   END;
   FUNCTION FBLEXIST( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( TRUE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN ( FALSE );
   END;
   PROCEDURE ACCKEY( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      LOAD( INUID_ITEMS_DOCUMENTO );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ACCKEYBYROWID( IRIROWID IN ROWID )
    IS
    BEGIN
      LOADBYROWID( IRIROWID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VALDUPLICATE( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE )
    IS
    BEGIN
      LOAD( INUID_ITEMS_DOCUMENTO );
      ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY );
      RAISE EX.CONTROLLED_ERROR;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
   END;
   PROCEDURE GETRECORD( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, ORCRECORD OUT NOCOPY STYGE_ITEMS_DOCUMENTO )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      LOAD( INUID_ITEMS_DOCUMENTO );
      ORCRECORD := RCDATA;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETRECORD( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE )
    RETURN STYGE_ITEMS_DOCUMENTO
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETRCDATA( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE )
    RETURN STYGE_ITEMS_DOCUMENTO
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETRCDATA
    RETURN STYGE_ITEMS_DOCUMENTO
    IS
    BEGIN
      RETURN ( RCDATA );
   END;
   PROCEDURE GETRECORDS( ISBQUERY IN VARCHAR2, OTBRESULT OUT NOCOPY TYTBGE_ITEMS_DOCUMENTO )
    IS
      RFGE_ITEMS_DOCUMENTO TYRFGE_ITEMS_DOCUMENTO;
      N NUMBER( 4 ) := 1;
      SBFULLQUERY VARCHAR2( 32000 ) := 'SELECT 
		            GE_items_documento.Id_Items_Documento,
		            GE_items_documento.Document_Type_Id,
		            GE_items_documento.Documento_Externo,
		            GE_items_documento.Fecha,
		            GE_items_documento.Estado,
		            GE_items_documento.Operating_Unit_Id,
		            GE_items_documento.Destino_Oper_Uni_Id,
		            GE_items_documento.Terminal_Id,
		            GE_items_documento.User_Id,
		            GE_items_documento.Comentario,
		            GE_items_documento.Causal_Id,
		            GE_items_documento.Delivery_Date,
		            GE_items_documento.Package_Id,
		            GE_items_documento.rowid
                FROM GE_items_documento';
      NUMAXTBRECORDS NUMBER( 5 ) := GE_BOPARAMETER.FNUGET( 'MAXREGSQUERY' );
    BEGIN
      OTBRESULT.DELETE;
      IF ISBQUERY IS NOT NULL AND LENGTH( ISBQUERY ) > 0 THEN
         SBFULLQUERY := SBFULLQUERY || ' WHERE ' || ISBQUERY;
      END IF;
      OPEN RFGE_ITEMS_DOCUMENTO
           FOR SBFULLQUERY;
      FETCH RFGE_ITEMS_DOCUMENTO
         BULK COLLECT INTO OTBRESULT;
      CLOSE RFGE_ITEMS_DOCUMENTO;
      IF OTBRESULT.COUNT = 0 THEN
         RAISE NO_DATA_FOUND;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRFGETRECORDS( ISBCRITERIA IN VARCHAR2 := NULL, IBLLOCK IN BOOLEAN := FALSE )
    RETURN TYREFCURSOR
    IS
      RFQUERY TYREFCURSOR;
      SBSQL VARCHAR2( 32000 ) := 'select 
		            GE_items_documento.Id_Items_Documento,
		            GE_items_documento.Document_Type_Id,
		            GE_items_documento.Documento_Externo,
		            GE_items_documento.Fecha,
		            GE_items_documento.Estado,
		            GE_items_documento.Operating_Unit_Id,
		            GE_items_documento.Destino_Oper_Uni_Id,
		            GE_items_documento.Terminal_Id,
		            GE_items_documento.User_Id,
		            GE_items_documento.Comentario,
		            GE_items_documento.Causal_Id,
		            GE_items_documento.Delivery_Date,
		            GE_items_documento.Package_Id,
		            GE_items_documento.rowid
                FROM GE_items_documento';
    BEGIN
      IF ISBCRITERIA IS NOT NULL THEN
         SBSQL := SBSQL || ' where ' || ISBCRITERIA;
      END IF;
      IF IBLLOCK THEN
         SBSQL := SBSQL || ' for update nowait';
      END IF;
      OPEN RFQUERY
           FOR SBSQL;
      RETURN ( RFQUERY );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSRECORD( IRCGE_ITEMS_DOCUMENTO IN STYGE_ITEMS_DOCUMENTO )
    IS
      RIROWID VARCHAR2( 200 );
    BEGIN
      INSRECORD( IRCGE_ITEMS_DOCUMENTO, RIROWID );
   END;
   PROCEDURE INSRECORD( IRCGE_ITEMS_DOCUMENTO IN STYGE_ITEMS_DOCUMENTO, ORIROWID OUT VARCHAR2 )
    IS
    BEGIN
      IF IRCGE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO IS NULL THEN
         ERRORS.SETERROR( CNUINS_PK_NULL, FSBGETMESSAGEDESCRIPTION || '|Id_Items_Documento' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      INSERT into GE_items_documento
		(
			Id_Items_Documento,
			Document_Type_Id,
			Documento_Externo,
			Fecha,
			Estado,
			Operating_Unit_Id,
			Destino_Oper_Uni_Id,
			Terminal_Id,
			User_Id,
			Comentario,
			Causal_Id,
			Delivery_Date,
			Package_Id
		)
		values
		(
			ircGE_items_documento.Id_Items_Documento,
			ircGE_items_documento.Document_Type_Id,
			ircGE_items_documento.Documento_Externo,
			ircGE_items_documento.Fecha,
			ircGE_items_documento.Estado,
			ircGE_items_documento.Operating_Unit_Id,
			ircGE_items_documento.Destino_Oper_Uni_Id,
			ircGE_items_documento.Terminal_Id,
			ircGE_items_documento.User_Id,
			ircGE_items_documento.Comentario,
			ircGE_items_documento.Causal_Id,
			ircGE_items_documento.Delivery_Date,
			ircGE_items_documento.Package_Id
		)
            returning
			rowid
		into
			orirowid;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( IRCGE_ITEMS_DOCUMENTO ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSRECORDS( IOTBGE_ITEMS_DOCUMENTO IN OUT NOCOPY TYTBGE_ITEMS_DOCUMENTO )
    IS
      BLUSEROWID BOOLEAN;
    BEGIN
      FILLRECORDOFTABLES( IOTBGE_ITEMS_DOCUMENTO, BLUSEROWID );
      FORALL N IN IOTBGE_ITEMS_DOCUMENTO.FIRST..IOTBGE_ITEMS_DOCUMENTO.LAST
         INSERT into GE_items_documento
			(
				Id_Items_Documento,
				Document_Type_Id,
				Documento_Externo,
				Fecha,
				Estado,
				Operating_Unit_Id,
				Destino_Oper_Uni_Id,
				Terminal_Id,
				User_Id,
				Comentario,
				Causal_Id,
				Delivery_Date,
				Package_Id
			)
			values
			(
				rcRecOfTab.Id_Items_Documento(n),
				rcRecOfTab.Document_Type_Id(n),
				rcRecOfTab.Documento_Externo(n),
				rcRecOfTab.Fecha(n),
				rcRecOfTab.Estado(n),
				rcRecOfTab.Operating_Unit_Id(n),
				rcRecOfTab.Destino_Oper_Uni_Id(n),
				rcRecOfTab.Terminal_Id(n),
				rcRecOfTab.User_Id(n),
				rcRecOfTab.Comentario(n),
				rcRecOfTab.Causal_Id(n),
				rcRecOfTab.Delivery_Date(n),
				rcRecOfTab.Package_Id(n)
			);
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELRECORD( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INULOCK IN NUMBER := 1 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      DELETE
		from GE_items_documento
		where
       		Id_Items_Documento=inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RECORD_HAVE_CHILDREN THEN
         ERRORS.SETERROR( CNURECORD_HAVE_CHILDREN, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELBYROWID( IRIROWID IN ROWID, INULOCK IN NUMBER := 1 )
    IS
      RCRECORDNULL CURECORD%ROWTYPE;
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      IF INULOCK = 1 THEN
         LOCKBYROWID( IRIROWID, RCDATA );
      END IF;
      DELETE
		from GE_items_documento
		where
			rowid = iriRowID
		returning
			Id_Items_Documento
		into
			rcError.Id_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      IF RCDATA.ROWID = IRIROWID THEN
         RCDATA := RCRECORDNULL;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RECORD_HAVE_CHILDREN THEN
         ERRORS.SETERROR( CNURECORD_HAVE_CHILDREN, FSBGETMESSAGEDESCRIPTION || ' ' || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELRECORDS( IOTBGE_ITEMS_DOCUMENTO IN OUT NOCOPY TYTBGE_ITEMS_DOCUMENTO, INULOCK IN NUMBER := 1 )
    IS
      BLUSEROWID BOOLEAN;
      RCAUX STYGE_ITEMS_DOCUMENTO;
    BEGIN
      FILLRECORDOFTABLES( IOTBGE_ITEMS_DOCUMENTO, BLUSEROWID );
      IF ( BLUSEROWID ) THEN
         IF INULOCK = 1 THEN
            FOR N IN IOTBGE_ITEMS_DOCUMENTO.FIRST..IOTBGE_ITEMS_DOCUMENTO.LAST
             LOOP
               LOCKBYROWID( RCRECOFTAB.ROW_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBGE_ITEMS_DOCUMENTO.FIRST..IOTBGE_ITEMS_DOCUMENTO.LAST
            DELETE
				from GE_items_documento
				where
					rowid = rcRecOfTab.row_id(n);
       ELSE
         IF INULOCK = 1 THEN
            FOR N IN IOTBGE_ITEMS_DOCUMENTO.FIRST..IOTBGE_ITEMS_DOCUMENTO.LAST
             LOOP
               LOCKBYPK( RCRECOFTAB.ID_ITEMS_DOCUMENTO( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBGE_ITEMS_DOCUMENTO.FIRST..IOTBGE_ITEMS_DOCUMENTO.LAST
            DELETE
				from GE_items_documento
				where
		         	Id_Items_Documento = rcRecOfTab.Id_Items_Documento(n);
      END IF;
    EXCEPTION
      WHEN EX.RECORD_HAVE_CHILDREN THEN
         ERRORS.SETERROR( CNURECORD_HAVE_CHILDREN, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDRECORD( IRCGE_ITEMS_DOCUMENTO IN STYGE_ITEMS_DOCUMENTO, INULOCK IN NUMBER := 0 )
    IS
      NUID_ITEMS_DOCUMENTO GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE;
    BEGIN
      IF IRCGE_ITEMS_DOCUMENTO.ROWID IS NOT NULL THEN
         IF INULOCK = 1 THEN
            LOCKBYROWID( IRCGE_ITEMS_DOCUMENTO.ROWID, RCDATA );
         END IF;
         UPDATE GE_items_documento
			set
				Document_Type_Id = ircGE_items_documento.Document_Type_Id,
				Documento_Externo = ircGE_items_documento.Documento_Externo,
				Fecha = ircGE_items_documento.Fecha,
				Estado = ircGE_items_documento.Estado,
				Operating_Unit_Id = ircGE_items_documento.Operating_Unit_Id,
				Destino_Oper_Uni_Id = ircGE_items_documento.Destino_Oper_Uni_Id,
				Terminal_Id = ircGE_items_documento.Terminal_Id,
				User_Id = ircGE_items_documento.User_Id,
				Comentario = ircGE_items_documento.Comentario,
				Causal_Id = ircGE_items_documento.Causal_Id,
				Delivery_Date = ircGE_items_documento.Delivery_Date,
				Package_Id = ircGE_items_documento.Package_Id
			where
				rowid = ircGE_items_documento.rowid
			returning
				Id_Items_Documento
			into
				nuId_Items_Documento;
       ELSE
         IF INULOCK = 1 THEN
            LOCKBYPK( IRCGE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO, RCDATA );
         END IF;
         UPDATE GE_items_documento
			set
				Document_Type_Id = ircGE_items_documento.Document_Type_Id,
				Documento_Externo = ircGE_items_documento.Documento_Externo,
				Fecha = ircGE_items_documento.Fecha,
				Estado = ircGE_items_documento.Estado,
				Operating_Unit_Id = ircGE_items_documento.Operating_Unit_Id,
				Destino_Oper_Uni_Id = ircGE_items_documento.Destino_Oper_Uni_Id,
				Terminal_Id = ircGE_items_documento.Terminal_Id,
				User_Id = ircGE_items_documento.User_Id,
				Comentario = ircGE_items_documento.Comentario,
				Causal_Id = ircGE_items_documento.Causal_Id,
				Delivery_Date = ircGE_items_documento.Delivery_Date,
				Package_Id = ircGE_items_documento.Package_Id
			where
				Id_Items_Documento = ircGE_items_documento.Id_Items_Documento
			returning
				Id_Items_Documento
			into
				nuId_Items_Documento;
      END IF;
      IF NUID_ITEMS_DOCUMENTO IS NULL THEN
         RAISE NO_DATA_FOUND;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || FSBPRIMARYKEY( IRCGE_ITEMS_DOCUMENTO ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDRECORDS( IOTBGE_ITEMS_DOCUMENTO IN OUT NOCOPY TYTBGE_ITEMS_DOCUMENTO, INULOCK IN NUMBER := 1 )
    IS
      BLUSEROWID BOOLEAN;
      RCAUX STYGE_ITEMS_DOCUMENTO;
    BEGIN
      FILLRECORDOFTABLES( IOTBGE_ITEMS_DOCUMENTO, BLUSEROWID );
      IF BLUSEROWID THEN
         IF INULOCK = 1 THEN
            FOR N IN IOTBGE_ITEMS_DOCUMENTO.FIRST..IOTBGE_ITEMS_DOCUMENTO.LAST
             LOOP
               LOCKBYROWID( RCRECOFTAB.ROW_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBGE_ITEMS_DOCUMENTO.FIRST..IOTBGE_ITEMS_DOCUMENTO.LAST
            UPDATE GE_items_documento
				set
					Document_Type_Id = rcRecOfTab.Document_Type_Id(n),
					Documento_Externo = rcRecOfTab.Documento_Externo(n),
					Fecha = rcRecOfTab.Fecha(n),
					Estado = rcRecOfTab.Estado(n),
					Operating_Unit_Id = rcRecOfTab.Operating_Unit_Id(n),
					Destino_Oper_Uni_Id = rcRecOfTab.Destino_Oper_Uni_Id(n),
					Terminal_Id = rcRecOfTab.Terminal_Id(n),
					User_Id = rcRecOfTab.User_Id(n),
					Comentario = rcRecOfTab.Comentario(n),
					Causal_Id = rcRecOfTab.Causal_Id(n),
					Delivery_Date = rcRecOfTab.Delivery_Date(n),
					Package_Id = rcRecOfTab.Package_Id(n)
				where
					rowid =  rcRecOfTab.row_id(n);
       ELSE
         IF INULOCK = 1 THEN
            FOR N IN IOTBGE_ITEMS_DOCUMENTO.FIRST..IOTBGE_ITEMS_DOCUMENTO.LAST
             LOOP
               LOCKBYPK( RCRECOFTAB.ID_ITEMS_DOCUMENTO( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBGE_ITEMS_DOCUMENTO.FIRST..IOTBGE_ITEMS_DOCUMENTO.LAST
            UPDATE GE_items_documento
				SET
					Document_Type_Id = rcRecOfTab.Document_Type_Id(n),
					Documento_Externo = rcRecOfTab.Documento_Externo(n),
					Fecha = rcRecOfTab.Fecha(n),
					Estado = rcRecOfTab.Estado(n),
					Operating_Unit_Id = rcRecOfTab.Operating_Unit_Id(n),
					Destino_Oper_Uni_Id = rcRecOfTab.Destino_Oper_Uni_Id(n),
					Terminal_Id = rcRecOfTab.Terminal_Id(n),
					User_Id = rcRecOfTab.User_Id(n),
					Comentario = rcRecOfTab.Comentario(n),
					Causal_Id = rcRecOfTab.Causal_Id(n),
					Delivery_Date = rcRecOfTab.Delivery_Date(n),
					Package_Id = rcRecOfTab.Package_Id(n)
				where
					Id_Items_Documento = rcRecOfTab.Id_Items_Documento(n)
;
      END IF;
   END;
   PROCEDURE UPDDOCUMENT_TYPE_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INUDOCUMENT_TYPE_ID$ IN GE_ITEMS_DOCUMENTO.DOCUMENT_TYPE_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Document_Type_Id = inuDocument_Type_Id$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.DOCUMENT_TYPE_ID := INUDOCUMENT_TYPE_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDDOCUMENTO_EXTERNO( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, ISBDOCUMENTO_EXTERNO$ IN GE_ITEMS_DOCUMENTO.DOCUMENTO_EXTERNO%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Documento_Externo = isbDocumento_Externo$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.DOCUMENTO_EXTERNO := ISBDOCUMENTO_EXTERNO$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDFECHA( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, IDTFECHA$ IN GE_ITEMS_DOCUMENTO.FECHA%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Fecha = idtFecha$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.FECHA := IDTFECHA$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDESTADO( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, ISBESTADO$ IN GE_ITEMS_DOCUMENTO.ESTADO%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Estado = isbEstado$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.ESTADO := ISBESTADO$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDOPERATING_UNIT_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INUOPERATING_UNIT_ID$ IN GE_ITEMS_DOCUMENTO.OPERATING_UNIT_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Operating_Unit_Id = inuOperating_Unit_Id$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.OPERATING_UNIT_ID := INUOPERATING_UNIT_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDDESTINO_OPER_UNI_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INUDESTINO_OPER_UNI_ID$ IN GE_ITEMS_DOCUMENTO.DESTINO_OPER_UNI_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Destino_Oper_Uni_Id = inuDestino_Oper_Uni_Id$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.DESTINO_OPER_UNI_ID := INUDESTINO_OPER_UNI_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDTERMINAL_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, ISBTERMINAL_ID$ IN GE_ITEMS_DOCUMENTO.TERMINAL_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Terminal_Id = isbTerminal_Id$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.TERMINAL_ID := ISBTERMINAL_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDUSER_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INUUSER_ID$ IN GE_ITEMS_DOCUMENTO.USER_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			User_Id = inuUser_Id$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.USER_ID := INUUSER_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDCOMENTARIO( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, ISBCOMENTARIO$ IN GE_ITEMS_DOCUMENTO.COMENTARIO%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Comentario = isbComentario$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.COMENTARIO := ISBCOMENTARIO$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDCAUSAL_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INUCAUSAL_ID$ IN GE_ITEMS_DOCUMENTO.CAUSAL_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Causal_Id = inuCausal_Id$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.CAUSAL_ID := INUCAUSAL_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDDELIVERY_DATE( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, IDTDELIVERY_DATE$ IN GE_ITEMS_DOCUMENTO.DELIVERY_DATE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Delivery_Date = idtDelivery_Date$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.DELIVERY_DATE := IDTDELIVERY_DATE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDPACKAGE_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INUPACKAGE_ID$ IN GE_ITEMS_DOCUMENTO.PACKAGE_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUID_ITEMS_DOCUMENTO, RCDATA );
      END IF;
      UPDATE GE_items_documento
		set
			Package_Id = inuPackage_Id$
		where
			Id_Items_Documento = inuId_Items_Documento;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.PACKAGE_ID := INUPACKAGE_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETID_ITEMS_DOCUMENTO( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.ID_ITEMS_DOCUMENTO );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.ID_ITEMS_DOCUMENTO );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETDOCUMENT_TYPE_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.DOCUMENT_TYPE_ID%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.DOCUMENT_TYPE_ID );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.DOCUMENT_TYPE_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETDOCUMENTO_EXTERNO( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.DOCUMENTO_EXTERNO%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.DOCUMENTO_EXTERNO );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.DOCUMENTO_EXTERNO );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FDTGETFECHA( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.FECHA%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.FECHA );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.FECHA );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETESTADO( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.ESTADO%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.ESTADO );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.ESTADO );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETOPERATING_UNIT_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.OPERATING_UNIT_ID%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.OPERATING_UNIT_ID );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.OPERATING_UNIT_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETDESTINO_OPER_UNI_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.DESTINO_OPER_UNI_ID%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.DESTINO_OPER_UNI_ID );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.DESTINO_OPER_UNI_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETTERMINAL_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.TERMINAL_ID%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.TERMINAL_ID );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.TERMINAL_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETUSER_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.USER_ID%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.USER_ID );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.USER_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETCOMENTARIO( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.COMENTARIO%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.COMENTARIO );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.COMENTARIO );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETCAUSAL_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.CAUSAL_ID%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.CAUSAL_ID );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.CAUSAL_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FDTGETDELIVERY_DATE( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.DELIVERY_DATE%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.DELIVERY_DATE );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.DELIVERY_DATE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETPACKAGE_ID( INUID_ITEMS_DOCUMENTO IN GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN GE_ITEMS_DOCUMENTO.PACKAGE_ID%TYPE
    IS
      RCERROR STYGE_ITEMS_DOCUMENTO;
    BEGIN
      RCERROR.ID_ITEMS_DOCUMENTO := INUID_ITEMS_DOCUMENTO;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUID_ITEMS_DOCUMENTO ) THEN
         RETURN ( RCDATA.PACKAGE_ID );
      END IF;
      LOAD( INUID_ITEMS_DOCUMENTO );
      RETURN ( RCDATA.PACKAGE_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   PROCEDURE SETUSECACHE( IBLUSECACHE IN BOOLEAN )
    IS
    BEGIN
      BLDAO_USE_CACHE := IBLUSECACHE;
   END;
 BEGIN
   GETDAO_USE_CACHE;
END DAGE_ITEMS_DOCUMENTO;
/


