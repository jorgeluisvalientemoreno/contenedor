

PACKAGE BODY MO_BOMotiveActionUtil AS
    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO201706';

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    













    FUNCTION FBOCURRSTATISVALID
    (
        INUACTIONID         IN PS_MOTIVE_ACTION.ACTION_ID%TYPE,
        INUCURRENTSTATUSID  IN PS_MOTIVE_ACTION.CURRENT_STATUS_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        RCMOTIVEACTION  DAPS_MOTIVE_ACTION.STYPS_MOTIVE_ACTION;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BOMotiveActionUtil.fboCurrStatIsValid['||INUACTIONID||']['||INUCURRENTSTATUSID||']',12);
        
        OPEN    PS_BCMOTIVE_ACTION.CUMOTIVEACTION(INUACTIONID, INUCURRENTSTATUSID);
        FETCH   PS_BCMOTIVE_ACTION.CUMOTIVEACTION INTO RCMOTIVEACTION;
        CLOSE   PS_BCMOTIVE_ACTION.CUMOTIVEACTION;

        UT_TRACE.TRACE('End MO_BOMotiveActionUtil.fboCurrStatIsValid['||RCMOTIVEACTION.MOTIVE_ACTION_ID||']',12);
        
        RETURN  RCMOTIVEACTION.MOTIVE_ACTION_ID IS NOT NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (PS_BCMOTIVE_ACTION.CUMOTIVEACTION%ISOPEN) THEN
                CLOSE PS_BCMOTIVE_ACTION.CUMOTIVEACTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCMOTIVE_ACTION.CUMOTIVEACTION%ISOPEN) THEN
                CLOSE PS_BCMOTIVE_ACTION.CUMOTIVEACTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOCURRSTATISVALID;

    FUNCTION FBLCURRSTATISVALIDGENPACK
    (
        INUACTIONID         IN PS_MOTIVE_ACTION.ACTION_ID%TYPE,
        INUCURRENTSTATUSID  IN PS_MOTIVE_ACTION.CURRENT_STATUS_ID%TYPE,
        INUENTITYVALUE      IN PS_MOTIVE_ACTION.MOTI_ENTITY_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN BOOLEAN
    IS
    BEGIN
        RETURN MO_BOMOTIVEACTIONUTIL.FBOCURRSTATISVALID(INUACTIONID, INUCURRENTSTATUSID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLCURRSTATISVALIDGENPACK;
    
    FUNCTION FBLCURRSTATISVALIDGENMOT
    (
        INUACTIONID         IN PS_MOTIVE_ACTION.ACTION_ID%TYPE,
        INUCURRENTSTATUSID  IN PS_MOTIVE_ACTION.CURRENT_STATUS_ID%TYPE,
        INUENTITYVALUE      IN PS_MOTIVE_ACTION.MOTI_ENTITY_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN BOOLEAN
    IS
    BEGIN
        RETURN MO_BOMOTIVEACTIONUTIL.FBOCURRSTATISVALID(INUACTIONID, INUCURRENTSTATUSID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLCURRSTATISVALIDGENMOT;

    FUNCTION FBLCURRSTATISVALIDGENCOMP
    (
        INUACTIONID         IN PS_MOTIVE_ACTION.ACTION_ID%TYPE,
        INUCURRENTSTATUSID  IN PS_MOTIVE_ACTION.CURRENT_STATUS_ID%TYPE,
        INUENTITYVALUE      IN PS_MOTIVE_ACTION.MOTI_ENTITY_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN BOOLEAN
    IS
    BEGIN
        RETURN MO_BOMOTIVEACTIONUTIL.FBOCURRSTATISVALID(INUACTIONID, INUCURRENTSTATUSID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLCURRSTATISVALIDGENCOMP;

    PROCEDURE VALIDATEACTIONFORMOT
    (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUMOTIVESTATUSID   IN MO_MOTIVE.MOTIVE_STATUS_ID%TYPE,
        INUACTIONID         IN GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUPRODUCTMOTIVEID  IN PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE DEFAULT NULL
    )
    IS
        EXERRINVALACTFORSTATMOT EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOMotiveActionUtil.ValidateActionForMot',12);
        
        
        IF NOT MO_BOMOTIVEACTIONUTIL.FBOCURRSTATISVALID(INUACTIONID, INUMOTIVESTATUSID) THEN
            RAISE EXERRINVALACTFORSTATMOT;
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOMotiveActionUtil.ValidateActionForMot',12);
    EXCEPTION
        WHEN EXERRINVALACTFORSTATMOT THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRINVALACTFORSTATMOT,
                TO_CHAR(INUACTIONID) || '|' || TO_CHAR(INUMOTIVEID)
                );
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEACTIONFORMOT;

    PROCEDURE VALIDATEACTIONFORCOMP
    (
        INUCOMPONENTID      IN MO_COMPONENT.COMPONENT_ID%TYPE,
        INUMOTIVESTATUSID   IN MO_COMPONENT.MOTIVE_STATUS_ID%TYPE,
        INUACTIONID         IN GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUPRODMOTIVECOMPID IN PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE DEFAULT NULL
    )
    IS
        EXERRINVALACTFORSTATCOMP    EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BOMotiveActionUtil.ValidateActionForComp',12);
        
        
        IF NOT MO_BOMOTIVEACTIONUTIL.FBOCURRSTATISVALID(INUACTIONID, INUMOTIVESTATUSID) THEN
            RAISE EXERRINVALACTFORSTATCOMP;
        END IF;
        
        UT_TRACE.TRACE('End MO_BOMotiveActionUtil.ValidateActionForComp',12);
    EXCEPTION
        WHEN EXERRINVALACTFORSTATCOMP THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRINVALACTFORSTATCOMP,
                TO_CHAR(INUACTIONID) || '|' || TO_CHAR(INUCOMPONENTID)
                );
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEACTIONFORCOMP;

    PROCEDURE VALIDATEACTIONFORPACK
    (
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVESTATUSID   IN MO_PACKAGES. MOTIVE_STATUS_ID%TYPE,
        INUACTIONID         IN GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUPACKAGETYPEID    IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE DEFAULT NULL
    )
    IS
        EXERRINVALACTFORSTATPACK    EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BOMotiveActionUtil.ValidateActionForPack',12);
        
        
        IF NOT MO_BOMOTIVEACTIONUTIL.FBOCURRSTATISVALID(INUACTIONID, INUMOTIVESTATUSID) THEN
            RAISE EXERRINVALACTFORSTATPACK;
        END IF;
        
        UT_TRACE.TRACE('End MO_BOMotiveActionUtil.ValidateActionForPack',12);
    EXCEPTION
        WHEN EXERRINVALACTFORSTATPACK THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRINVALACTFORSTATPACK,
                TO_CHAR(INUACTIONID) || '|' ||
                TO_CHAR(INUPACKAGEID)
                );
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEACTIONFORPACK;

    PROCEDURE EXECTRANSTATUSFORMOT
    (
        INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUACTIONID IN GE_ACTION_MODULE.ACTION_ID%TYPE
    )
    IS
        SBINSTANCE          GE_BOINSTANCECONTROL.STYSBNAME := MO_BOUNCOMPOSITIONCONSTANTS.CSBMOTIVE_INSTANCE;
        NURELATIONSTATUS    PS_MOTIVE_ACTION.MOTI_STATUS_RELATION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BOMotiveActionUtil.ExecTranStatusForMot['||INUMOTIVEID||']['||INUACTIONID||']',4);

        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;

        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(SBINSTANCE);

        
        GE_BOINSTANCECONTROL.LOADENTITYOLDVALUESID(SBINSTANCE, NULL, MO_BOCONSTANTS.CSBMO_MOTIVE, INUMOTIVEID);

        
        MO_BOACTIONCONTROLLER.MOTIVESTATUS(INUACTIONID,NURELATIONSTATUS);

        
        GE_BOINSTANCECONTROL.UPDATEENTITY(SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_MOTIVE);

        
        GE_BOINSTANCECONTROL.CLEARENTITY(SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_MOTIVE);

        
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
        
        UT_TRACE.TRACE('End MO_BOMotiveActionUtil.ExecTranStatusForMot',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END EXECTRANSTATUSFORMOT;

    PROCEDURE EXECTRANSTATUSFORCOMP
    (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE,
        INUACTIONID     IN GE_ACTION_MODULE.ACTION_ID%TYPE
    )
    IS
        SBINSTANCE          GE_BOINSTANCECONTROL.STYSBNAME := MO_BOUNCOMPOSITIONCONSTANTS.CSBMOTIVE_INSTANCE;
        NURELATIONSTATUS    PS_MOTIVE_ACTION.MOTI_STATUS_RELATION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BOMotiveActionUtil.ExecTranStatusForComp['||INUCOMPONENTID||']['||INUACTIONID||']',4);

        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
        
        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(SBINSTANCE);

        
        GE_BOINSTANCECONTROL.LOADENTITYOLDVALUESID(SBINSTANCE, NULL, MO_BOCONSTANTS.CSBMO_COMPONENT, INUCOMPONENTID);

        
        MO_BOACTIONCONTROLLER.COMPONENTSTATUS(INUACTIONID, NURELATIONSTATUS);

        
        GE_BOINSTANCECONTROL.UPDATEENTITY(SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_COMPONENT);

        
        GE_BOINSTANCECONTROL.CLEARENTITY(SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_COMPONENT);

        
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
        
        UT_TRACE.TRACE('End MO_BOMotiveActionUtil.ExecTranStatusForComp',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END EXECTRANSTATUSFORCOMP;

    PROCEDURE EXECTRANSTATUSFORPACK
    (
        INUPACKAGEID    IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUACTIONID     IN GE_ACTION_MODULE.ACTION_ID%TYPE
    )
    IS
        SBINSTANCE          GE_BOINSTANCECONTROL.STYSBNAME := MO_BOUNCOMPOSITIONCONSTANTS.CSBMOTIVE_INSTANCE;
        NURELATIONSTATUS    PS_MOTIVE_ACTION.MOTI_STATUS_RELATION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BOMotiveActionUtil.ExecTranStatusForPack['||INUPACKAGEID||']['||INUACTIONID||']',4);

        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;

        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(SBINSTANCE);

        
        GE_BOINSTANCECONTROL.LOADENTITYOLDVALUESID(SBINSTANCE, NULL, MO_BOCONSTANTS.CSBMO_PACKAGES, INUPACKAGEID);

        
        MO_BOACTIONCONTROLLER.PACKAGESTATUS(INUACTIONID, NURELATIONSTATUS);

        
        GE_BOINSTANCECONTROL.UPDATEENTITY(SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_PACKAGES);

        
        GE_BOINSTANCECONTROL.CLEARENTITY(SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_PACKAGES);

        
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
        
        UT_TRACE.TRACE('End MO_BOMotiveActionUtil.ExecTranStatusForPack',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END EXECTRANSTATUSFORPACK;

    PROCEDURE EXECTRANSTATUSFORREQU
    (
        INUPACKAGEID         IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUACTIONID          IN GE_ACTION_MODULE.ACTION_ID%TYPE
    )
    IS
    BEGIN

        UT_TRACE.TRACE('Inicia MO_BOMotiveActionUtil.ExecTranStatusForRequ. Paquete:['||INUPACKAGEID||']',7);
        DAMO_PACKAGES.ACCKEY(INUPACKAGEID);
        FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESBYPACKAGE(INUPACKAGEID) LOOP
            FOR RCMOCOMPONENT IN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(RCMOTIVE.MOTIVE_ID) LOOP
                IF DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(RCMOCOMPONENT.MOTIVE_STATUS_ID)   = GE_BOCONSTANTS.CSBNO THEN
                    UT_TRACE.TRACE('    Ejecuta transici�n de estados para el componente:['||RCMOCOMPONENT.COMPONENT_ID||']',15);
                    MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCMOCOMPONENT.COMPONENT_ID,INUACTIONID);
                END IF;
            END LOOP;
            IF DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(RCMOTIVE.MOTIVE_STATUS_ID)   = GE_BOCONSTANTS.CSBNO THEN
                UT_TRACE.TRACE('    Ejecuta transici�n de estados para el motivo:['||RCMOTIVE.MOTIVE_ID||']',15);
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCMOTIVE.MOTIVE_ID,INUACTIONID);
            END IF;
        END LOOP;
        IF DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID))   = GE_BOCONSTANTS.CSBNO THEN
            UT_TRACE.TRACE('    Ejecuta transici�n de estados para el paquete:['||INUPACKAGEID||']',15);
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(INUPACKAGEID,INUACTIONID);
        END IF;
        UT_TRACE.TRACE('Finaliza MO_BOMotiveActionUtil.ExecTranStatusForRequ',7);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('    ex.CONTROLLED_ERROR ==> MO_BOMotiveActionUtil.ExecTranStatusForRequ',15);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('    others ==> MO_BOMotiveActionUtil.ExecTranStatusForRequ',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END EXECTRANSTATUSFORREQU;
END MO_BOMOTIVEACTIONUTIL;