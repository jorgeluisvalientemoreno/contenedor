PACKAGE BODY Or_BoOrderActivities
IS












































































































































	
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO382955';

    CNUERR_114718  CONSTANT NUMBER(6) := 114718;
    
    
    CNUGROUPBYBASEADD  GE_OBJECT.OBJECT_ID%TYPE := 48910;

    
    CNUERR_6368     CONSTANT NUMBER(4) := 6368;
    CNUERR_8681     CONSTANT NUMBER(4) := 8681;
    CNUERR_901164   CONSTANT NUMBER(6) := 901164;
    CNUERR_20442    CONSTANT NUMBER(5) := 20442;
    CNUERR_119343   CONSTANT NUMBER(6) := 119343;
    CNUERR_8671     CONSTANT NUMBER(4) := 8671;
    CNUERR_901187   CONSTANT NUMBER(6) := 901187;
    
    
    CNUERR_20543    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE :=20543;
    
    CNUERR_900907    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE :=900907;
    
    
    CNUERR_901273    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE :=901273;
    
    
    CNUACTION_REGISTER CONSTANT GE_ACTION_MODULE.ACTION_ID%TYPE := 100;

    BLISLOADED  BOOLEAN := FALSE;

    TBACTIVITIESCONF    OR_BCORDERACTIVITIES.TYTBACTIVITIESCONF;

    
	
    

    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    FUNCTION FNUACTIVITYTYPE RETURN NUMBER IS
    BEGIN RETURN CNUACTIVITYTYPE; END;

    
































    PROCEDURE UPDATEADDRESSINFO
    (
        IRCORDERACTIVITY  IN     DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY,
        INUTASKTYPEID     IN     OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        IORCORDER         IN OUT DAOR_ORDER.STYOR_ORDER
    )
    IS
        
        NUADDRESSID     AB_ADDRESS.ADDRESS_ID%TYPE;

        NUTASKTYPECLASIF GE_TASK_CLASS.TASK_CLASS_ID%TYPE;

        BLGROUPBYBASEADDRESS  BOOLEAN := FALSE;
    BEGIN

        IF( IRCORDERACTIVITY.ADDRESS_ID IS NULL ) THEN
            
            RETURN;
        END IF;

        IF ( TBACTIVITIESCONF(IRCORDERACTIVITY.ACTIVITY_ID).NUOBJECTID = CNUGROUPBYBASEADD ) THEN
            NUADDRESSID := AB_BOADDRESS.FNUBASEADDRBYCHILD(IRCORDERACTIVITY.ADDRESS_ID);
            BLGROUPBYBASEADDRESS := TRUE;
        ELSE
            NUADDRESSID := IRCORDERACTIVITY.ADDRESS_ID;
        END IF;

        IORCORDER.EXTERNAL_ADDRESS_ID := NUADDRESSID;

        

        IF (    (IORCORDER.ROUTE_ID IS NULL)
            AND (IORCORDER.CONSECUTIVE IS NULL)) THEN
            
            NUTASKTYPECLASIF := DAOR_TASK_TYPE.FNUGETTASK_TYPE_CLASSIF(INUTASKTYPEID);
            
            
            OR_BOROUTEPREMISE.GETROUTECONSFROMADDRESS(
                NUADDRESSID,
                INUTASKTYPEID,
                NUTASKTYPECLASIF,
                BLGROUPBYBASEADDRESS,
                IORCORDER.ROUTE_ID,
                IORCORDER.CONSECUTIVE
            );

        END IF;

        IORCORDER.SHAPE := DAAB_ADDRESS.FSGGETSHAPE(NUADDRESSID);
        OR_BCORDER.GETADDCOORDFORORDER(NUADDRESSID, IORCORDER.X, IORCORDER.Y);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEADDRESSINFO;

    


























    PROCEDURE CREATEORDERBYACTIVITY
    (
        INUTASKTYPEID       IN  OR_ORDER.TASK_TYPE_ID%TYPE,
        INUPRIORITY         IN  OR_ORDER.PRIORITY%TYPE,
        IORCORDERACTIVITY   IN  DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY,
        INUROUTEID          IN  OR_ROUTE.ROUTE_ID%TYPE,                   
        INUROUTECONSECUTIVE IN  AB_PREMISE.CONSECUTIVE%TYPE,              
        ONUORDERID          OUT OR_ORDER.ORDER_ID%TYPE
    )
    IS

        RCORORDER               DAOR_ORDER.STYOR_ORDER;
        NUPRIORITY              OR_ORDER.PRIORITY%TYPE := NULL;
        DTEXECPRODMAXIDATE      DATE;
        DTINSTALLPOSSIBDATE     DATE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO or_boorderactivities.CreateOrderByActivity',20);
        
        RCORORDER.ROUTE_ID    := INUROUTEID;
        RCORORDER.CONSECUTIVE := INUROUTECONSECUTIVE;
        
        UPDATEADDRESSINFO(IORCORDERACTIVITY,INUTASKTYPEID, RCORORDER);

        
        OR_BOORDERDATA.INSERTORDERDATA
        (
            INUTASKTYPEID,
            INUPRIORITY,
            IORCORDERACTIVITY,
            ONUORDERID,
            RCORORDER
        );

        
        OR_BOEXTERNDATA.INSERTEXTERNDATA
        (
            IORCORDERACTIVITY,
            RCORORDER,
            DTEXECPRODMAXIDATE,
            DTINSTALLPOSSIBDATE,
            NUPRIORITY
        );
        
        IF NUPRIORITY IS NOT NULL THEN
            DAOR_ORDER.UPDPRIORITY(RCORORDER.ORDER_ID,NUPRIORITY);
        END IF;
        
        OR_BOWORKFLOWDATA.INSERTWORKFLOWDATA
        (
            IORCORDERACTIVITY.INSTANCE_ID,
            RCORORDER,
            DTEXECPRODMAXIDATE,
            DTINSTALLPOSSIBDATE
        );
        
        UT_TRACE.TRACE('FIN or_boorderactivities.CreateOrderByActivity',20);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEORDERBYACTIVITY;


    












    PROCEDURE EXECGROUPOBJECT
    (
        IRCORDERACTIVITY    IN  DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY,
        INUROUTEID          IN OR_ROUTE.ROUTE_ID%TYPE DEFAULT NULL,                 
        INUROUTECONSECUTIVE IN AB_PREMISE.CONSECUTIVE%TYPE DEFAULT NULL,            
        ISBGROUPASSIGN      IN GE_PRIORITY.GROUP_ASSIGN_ACTIV%TYPE,
        IONUORDERID         IN OUT OR_ORDER.ORDER_ID%TYPE
    )
    IS

    BEGIN
        UT_TRACE.TRACE('INICIO or_boorderactivities.execGroupObject',20);

        IF (NOT TBACTIVITIESCONF.EXISTS(IRCORDERACTIVITY.ACTIVITY_ID)) THEN
            RETURN;
        END IF;

        IF TBACTIVITIESCONF(IRCORDERACTIVITY.ACTIVITY_ID).NUOBJECTNAME IS NOT NULL THEN

            
            OR_BOGROUPORDERACTIVITIES.SETORDERACTIVITY(IRCORDERACTIVITY);
            
            OR_BOGROUPORDERACTIVITIES.SETROUTE(INUROUTEID,
                                               INUROUTECONSECUTIVE);

            UT_TRACE.TRACE('Or_BoOrderActivities Agrupa- ', 15);
            EXECUTE IMMEDIATE 'begin '||TBACTIVITIESCONF(IRCORDERACTIVITY.ACTIVITY_ID).NUOBJECTNAME||'('||CHR(10)||
                                ':inuTaskTypeId,'||CHR(10)||
                                ':sbGroupAssign,'||CHR(10)||
                                ':ionuOrderId); END;'
            USING
                              IN  TBACTIVITIESCONF(IRCORDERACTIVITY.ACTIVITY_ID).NUTASKTYPEID,
                              IN  ISBGROUPASSIGN,
                              OUT IONUORDERID;
            UT_TRACE.TRACE('Or_BcOrderActivities ionuOrderId (Nueva Orden)->'||IONUORDERID, 15);
            UT_TRACE.TRACE('Or_BcOrderActivities.CreateActivity -> FindExecObject', 15);
        END IF;


        UT_TRACE.TRACE('FIN or_boorderactivities.execGroupObject',20);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END EXECGROUPOBJECT;

    














































































































    PROCEDURE CREATEACTIVITY
    (
        INUITEMSID          IN GE_ITEMS.ITEMS_ID%TYPE,
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUCOMPONENTID      IN MO_COMPONENT.COMPONENT_ID%TYPE,
        INUINSTANCEID       IN WF_INSTANCE.INSTANCE_ID%TYPE,
        INUADDRESSID        IN AB_ADDRESS.ADDRESS_ID%TYPE,
        INUELEMENTID        IN IF_NODE.ID%TYPE,
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUSUBSCRIPTIONID   IN SUSCRIPC.SUSCCODI%TYPE,
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUOPERSECTORID     IN OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE,
        INUOPERUNITID       IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTEXECESTIMDATE    IN OR_ORDER_ACTIVITY.EXEC_ESTIMATE_DATE%TYPE,
        INUPROCESSID        IN GE_PROCESS.PROCESS_ID%TYPE,
        ISBCOMMENT          IN OR_ORDER_ACTIVITY.COMMENT_%TYPE,
        IBLPROCESSORDER     IN BOOLEAN, 
        INUPRIORITYID       IN GE_PRIORITY.PRIORITY_ID%TYPE DEFAULT NULL,
        IONUORDERID         IN OUT OR_ORDER.ORDER_ID%TYPE,
        IONUORDERACTIVITYID IN OUT OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUORDERTEMPLATEID  IN PM_ORDER_TEMPLATE.ORDER_TEMPLATE_ID%TYPE DEFAULT NULL,
        ISBCOMPENSATE       IN VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBYES,
        INUCONSECUTIVE      IN OR_ORDER_ACTIVITY.CONSECUTIVE%TYPE DEFAULT NULL,     
        INUROUTEID          IN OR_ROUTE.ROUTE_ID%TYPE DEFAULT NULL,                 
        INUROUTECONSECUTIVE IN AB_PREMISE.CONSECUTIVE%TYPE DEFAULT NULL,            
        INULEGALIZETRYTIMES IN OR_ORDER_ACTIVITY.LEGALIZE_TRY_TIMES%TYPE DEFAULT 0,
        ISBTAGNAME          IN OR_ORDER_ACTIVITY.WF_TAG_NAME%TYPE DEFAULT NULL,
        IBLISACTTOGROUP     IN BOOLEAN DEFAULT TRUE,
        INUREFVALUE         IN OR_ORDER_ACTIVITY.VALUE_REFERENCE%TYPE DEFAULT NULL,  
        INUACTIONID         IN GE_ACTION_MODULE.ACTION_ID%TYPE DEFAULT NULL
    )
    IS
    
        NUINDEX NUMBER;
        RCORDERACTIVITY  DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        RCORDER          DAOR_ORDER.STYOR_ORDER;
        SBGROUPASSIGN    GE_PRIORITY.GROUP_ASSIGN_ACTIV%TYPE;

        NUADDRESSID      AB_ADDRESS.ADDRESS_ID%TYPE;

        NUX              OR_ORDER.X%TYPE;
        NUY              OR_ORDER.Y%TYPE;
        BLMODIFIED       BOOLEAN := FALSE;
        
        
        NUPROCESSID         OR_ORDER_ACTIVITY.PROCESS_ID%TYPE := INUPROCESSID;
        
        NUELEMENTTYPEID     IF_ELEMENT_CLASS.ELEMENT_TYPE_ID%TYPE;
        
        NUCLASSID           IF_ELEMENT_CLASS.CLASS_ID%TYPE;
        
        NUACTBYELEMTYPE     OR_ACT_BY_ELE_TYPE.ACT_BY_ELE_TYPE_ID%TYPE;
        NUOPERATINUNIT      OR_ORDER.OPERATING_UNIT_ID%TYPE;
        SBORDERASSTYPE      OR_ORDER.ASSIGNED_WITH%TYPE;
        SBOPERUNITASSTYPE   OR_OPERATING_UNIT.ASSIGN_TYPE%TYPE;
        NUACTIVITYTIME      NUMBER;
        NUTOTALUSEDCAPACITY NUMBER;
        
        NUACTIONID          GE_ACTION_MODULE.ACTION_ID%TYPE;
    BEGIN
        
        CHARGEACTIVCONFIG;

        NUINDEX := TBACTIVITIESCONF.FIRST;
        
        UT_TRACE.TRACE('nuIndex:'||NUINDEX||' : '||INUITEMSID, 15);

        IF (INUPRIORITYID IS NULL) THEN
            SBGROUPASSIGN := 'N';
        ELSE
            SBGROUPASSIGN := NVL(DAGE_PRIORITY.FSBGETGROUP_ASSIGN_ACTIV(INUPRIORITYID),'N');
        END IF;
        
        
        IF IONUORDERACTIVITYID IS NOT NULL THEN
            RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(IONUORDERACTIVITYID);
        END IF;
        
        
        
        IF ( INUELEMENTID IS NOT NULL ) THEN
        
            IF ( DAIF_NODE.FBLEXIST(INUELEMENTID) ) THEN
                
                NUELEMENTTYPEID  := DAIF_NODE.FNUGETELEMENT_TYPE_ID(INUELEMENTID);
                NUCLASSID        := DAIF_NODE.FNUGETCLASS_ID(INUELEMENTID);
            ELSIF ( DAIF_ASSIGNABLE.FBLEXIST(INUELEMENTID) ) THEN
                
                NUELEMENTTYPEID  := DAIF_ASSIGNABLE.FNUGETELEMENT_TYPE_ID(INUELEMENTID);
                NUCLASSID        := DAIF_ASSIGNABLE.FNUGETCLASS_ID(INUELEMENTID);
            END IF;
            
            NUACTBYELEMTYPE := OR_BCACTBYELETYPE.FNUMAINTENANCECONF(NUELEMENTTYPEID,NUCLASSID,INUITEMSID);
            IF ( NUACTBYELEMTYPE IS NOT NULL ) THEN
                
                NUPROCESSID := OR_BOCONSTANTS.CNUPROCESS_PREVENT_MAINT;
            END IF;
        END IF;
        
        RCORDERACTIVITY.SUBSCRIBER_ID       := INUSUBSCRIBERID;
        RCORDERACTIVITY.SUBSCRIPTION_ID     := INUSUBSCRIPTIONID;
        RCORDERACTIVITY.PRODUCT_ID          := INUPRODUCTID;
        RCORDERACTIVITY.PACKAGE_ID          := INUPACKAGEID;
        RCORDERACTIVITY.MOTIVE_ID           := INUMOTIVEID;
        RCORDERACTIVITY.COMPONENT_ID        := INUCOMPONENTID;
        RCORDERACTIVITY.INSTANCE_ID         := INUINSTANCEID;
        RCORDERACTIVITY.ADDRESS_ID          := INUADDRESSID;
        RCORDERACTIVITY.ELEMENT_ID          := INUELEMENTID;
        RCORDERACTIVITY.OPERATING_SECTOR_ID := INUOPERSECTORID;
        RCORDERACTIVITY.OPERATING_UNIT_ID   := INUOPERUNITID;
        RCORDERACTIVITY.EXEC_ESTIMATE_DATE  := IDTEXECESTIMDATE;
        RCORDERACTIVITY.PROCESS_ID          := NUPROCESSID;
        RCORDERACTIVITY.ACTIVITY_ID         := INUITEMSID;
        RCORDERACTIVITY.COMMENT_            := ISBCOMMENT;
        RCORDERACTIVITY.STATUS              := OR_BOORDERACTIVITIES.CSBREGISTERSTATUS;
        RCORDERACTIVITY.TASK_TYPE_ID        := TBACTIVITIESCONF(INUITEMSID).NUTASKTYPEID;
        RCORDERACTIVITY.REGISTER_DATE       := SYSDATE;
        RCORDERACTIVITY.ORDER_TEMPLATE_ID   := INUORDERTEMPLATEID;
        RCORDERACTIVITY.CONSECUTIVE         := INUCONSECUTIVE;
        UT_TRACE.TRACE('inuLegalizeTryTimes ['||INULEGALIZETRYTIMES||']',15);
        RCORDERACTIVITY.LEGALIZE_TRY_TIMES  := INULEGALIZETRYTIMES;
        RCORDERACTIVITY.WF_TAG_NAME         := NVL(ISBTAGNAME, RCORDERACTIVITY.WF_TAG_NAME);
        RCORDERACTIVITY.VALUE_REFERENCE     := INUREFVALUE;

        
        
        IF (IONUORDERID IS NULL AND IBLISACTTOGROUP) THEN
            EXECGROUPOBJECT
            (
                RCORDERACTIVITY,
                INUROUTEID,                 
                INUROUTECONSECUTIVE,            
                SBGROUPASSIGN,
                IONUORDERID
            );
        END IF;

        IF IONUORDERID IS NULL THEN

            UT_TRACE.TRACE('Or_BcOrderActivities.CreateOrderByActivity=>'||INUITEMSID, 15);
            
            RCORDERACTIVITY.OPERATING_SECTOR_ID := NULL;
            RCORDERACTIVITY.OPERATING_UNIT_ID   := NULL;

            
            CREATEORDERBYACTIVITY
            (
                TBACTIVITIESCONF(INUITEMSID).NUTASKTYPEID,
                TBACTIVITIESCONF(INUITEMSID).NUPRIORITY,
                RCORDERACTIVITY,
                INUROUTEID,
                INUROUTECONSECUTIVE,
                IONUORDERID
            );
            
            RCORDERACTIVITY.ORDER_ID    := IONUORDERID;

            UT_TRACE.TRACE('Or_BcOrderActivities.InsertOrderActivity=>'||IONUORDERID, 15);
            
            INSORUPDORDERACTIVIT
            (
                INUITEMSID,
                IONUORDERID,
                RCORDERACTIVITY,
                IONUORDERACTIVITYID
            );
            
            IF NVL(IBLPROCESSORDER, TRUE) THEN
                UT_TRACE.TRACE('OR_BOProcessOrder.ProcessOrder', 15);
                OR_BOPROCESSORDER.PROCESSORDER(
                    IONUORDERID,
                    NULL,
                    INUOPERUNITID,
                    IDTEXECESTIMDATE,
                    TRUE);
                    
                
                GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT( DAOR_ORDER.FRCGETRECORD(IONUORDERID), NULL);
            END IF;

            
            RCORDER := DAOR_ORDER.FRCGETRECORD(IONUORDERID);
            
            IF (RCORDER.OPERATING_SECTOR_ID IS NULL) THEN
                
                RCORDER.OPERATING_SECTOR_ID := OR_BOORDEROPERATSECTOR.FNUSECTORBYORDERID(RCORDER.ORDER_ID);
                
                DAOR_ORDER.UPDRECORD(RCORDER);
            END IF;
            
            
            OR_BCORDERSTATCHANG.INSRECORD(IONUORDERID,
                                          CNUACTION_REGISTER,
                                          OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED,
                                          OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED);

        ELSE
            UT_TRACE.TRACE('--La orden existe: Or_BcOrderActivities ionuOrderId ->'||IONUORDERID, 15);
            
            RCORDERACTIVITY.ORDER_ID    := IONUORDERID;
            
            
            IF DAOR_ORDER.FNUGETORDER_STATUS_ID(RCORDERACTIVITY.ORDER_ID)
                = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING
            THEN
                RCORDERACTIVITY.STATUS := CSBASSIGNEDSTATUS;
            END IF;
            
            
            NUOPERATINUNIT := DAOR_ORDER.FNUGETOPERATING_UNIT_ID(IONUORDERID);
            IF (NUOPERATINUNIT IS NOT NULL) THEN  
                
                SBORDERASSTYPE := DAOR_ORDER.FSBGETASSIGNED_WITH(IONUORDERID);
                
                SBOPERUNITASSTYPE := DAOR_OPERATING_UNIT.FSBGETASSIGN_TYPE(NUOPERATINUNIT);
                
                IF (SBORDERASSTYPE = OR_BCORDEROPERATINGUNIT.CSBASSIGN_CAPACITY AND
                    SBOPERUNITASSTYPE = OR_BCORDEROPERATINGUNIT.CSBASSIGN_CAPACITY) THEN
                    
                    IF (OR_BCGENORDINSPECC.FBLESORDENINSP(IONUORDERID)) THEN
                        NUACTIVITYTIME := NVL(DAOR_ACT_INSP_POR_ACT.FNUGETTIEMPO_INSPECCION(INUITEMSID)/60,0);
                    ELSE
                        NUACTIVITYTIME := NVL(DAGE_ITEMS.FNUGETSTANDARD_TIME(INUITEMSID)/60,0);
                    END IF;
                    UT_TRACE.TRACE('Tiempo de la actividad: '||NUACTIVITYTIME,5);
                    NUTOTALUSEDCAPACITY := DAOR_OPERATING_UNIT.FNUGETUSED_ASSIGN_CAP(NUOPERATINUNIT)+ NUACTIVITYTIME;
                    DAOR_OPERATING_UNIT.UPDUSED_ASSIGN_CAP(NUOPERATINUNIT,NUTOTALUSEDCAPACITY);
                    UT_TRACE.TRACE('Actividad agrupada. Actualiza capacidad a: '||NUTOTALUSEDCAPACITY,5);
                END IF;
            END IF;
            
            UT_TRACE.TRACE('Exist-Or_BcOrderActivities.InsertOrderActivity=>'||IONUORDERID, 15);
            
            INSORUPDORDERACTIVIT
            (
                INUITEMSID,
                IONUORDERID,
                RCORDERACTIVITY,
                IONUORDERACTIVITYID
            );
            
            RCORDER := DAOR_ORDER.FRCGETRECORD(IONUORDERID);
            
            
            IF ((RCORDER.EXTERNAL_ADDRESS_ID IS NULL) AND (RCORDERACTIVITY.ADDRESS_ID IS NOT NULL)) THEN
                UPDATEADDRESSINFO(RCORDERACTIVITY,TBACTIVITIESCONF(INUITEMSID).NUTASKTYPEID, RCORDER);
                BLMODIFIED := TRUE;
            END IF;
            
            IF (RCORDER.SUBSCRIBER_ID IS NULL AND RCORDERACTIVITY.SUBSCRIBER_ID IS NOT NULL) THEN
                RCORDER.SUBSCRIBER_ID := RCORDERACTIVITY.SUBSCRIBER_ID;
                BLMODIFIED := TRUE;
            END IF;

            
            IF (BLMODIFIED AND (SBUPDATEORDER <> GE_BOCONSTANTS.CSBNO)) THEN
                DAOR_ORDER.UPDRECORD(RCORDER);
            END IF;
            
        END IF;
        
        
        IF (DAOR_ORDER.FDTGETEXEC_ESTIMATE_DATE(IONUORDERID) IS NULL AND (SBUPDATEORDER <> GE_BOCONSTANTS.CSBNO)) THEN
            DAOR_ORDER.UPDEXEC_ESTIMATE_DATE(IONUORDERID,IDTEXECESTIMDATE);
        END IF;
        
        
        IF (ISBCOMPENSATE = GE_BOCONSTANTS.CSBYES ) THEN
            OR_BOCOMPENSACIONACTIVIDADES.COMPENSARACTIVORDEN
            (
                RCORDERACTIVITY.ORDER_ID,
                RCORDERACTIVITY.ORDER_ACTIVITY_ID
            );
            
            
            IONUORDERID := NVL(RCORDERACTIVITY.ORDER_ID,IONUORDERID);

        END IF;

        NUACTIONID := NVL(INUACTIONID, RCORDERACTIVITY.ACTION_ID);
        IF ((NUACTIONID IS NOT NULL) AND
            (NUACTIONID = OR_BOCONSTANTS.FNUGETLOCK_ORDER_ACTION)) THEN
            OR_BOFWLOCKORDER.LOCKORDER(
                IONUORDERID,
                OR_BOCONSTANTS.CNUGENERALTYPE,
                NULL,
                FALSE,
                TRUE
            );
        END IF;

        
        IONUORDERACTIVITYID := RCORDERACTIVITY.ORDER_ACTIVITY_ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEACTIVITY;

    









































    PROCEDURE UPDATEACTIVITY
    (
        IRCORDERACTIVITY    IN  DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY,
        INUITEMSID          IN  OR_ORDER_ITEMS.ITEMS_ID%TYPE,
        IONUORDERID         IN  OUT OR_ORDER.ORDER_ID%TYPE,
        IBLPROCESSORDER     IN  BOOLEAN DEFAULT TRUE,
        IBLGROUPORDER       IN  BOOLEAN DEFAULT TRUE
    )
    IS
        RCORDERACTIVITY    DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        NUORDERITEMSID     OR_ORDER_ACTIVITY.ORDER_ITEM_ID%TYPE;
        RCORORDERITEMS     DAOR_ORDER_ITEMS.STYOR_ORDER_ITEMS;
        RCORDER            DAOR_ORDER.STYOR_ORDER;
        BLCREATEORDER      BOOLEAN := FALSE;
        RCTMPORDER         DAOR_ORDER.STYOR_ORDER;
        RCOPERUNIT         DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;
        NUUSEDTIME         OR_OPERATING_UNIT.USED_ASSIGN_CAP%TYPE;
        NUACTIVITYTIME     OR_OPERATING_UNIT.USED_ASSIGN_CAP%TYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO or_boorderactivities.updateActivity',20);

        
        CHARGEACTIVCONFIG;
        
        RCORDERACTIVITY := IRCORDERACTIVITY;
        IF IONUORDERID IS NULL THEN
            
            
            IF (   (IRCORDERACTIVITY.ORDER_ID IS NOT NULL)
                AND DAOR_ORDER.FBLEXIST(IRCORDERACTIVITY.ORDER_ID)) THEN
                DAOR_ORDER.GETRECORD(IRCORDERACTIVITY.ORDER_ID,
                                     RCORDER);
            END IF;
            
            RCORDERACTIVITY.ORDER_ID := NULL;
            
            IF IBLGROUPORDER THEN
                
                EXECGROUPOBJECT
                (
                    RCORDERACTIVITY,
                    RCORDER.ROUTE_ID,    
                    RCORDER.CONSECUTIVE, 
                    OR_BOCONSTANTS.CSBNO,
                    IONUORDERID
                );
            END IF;
            
            
            IF IONUORDERID IS NULL THEN
                
                CREATEORDERBYACTIVITY
                (
                    TBACTIVITIESCONF(INUITEMSID).NUTASKTYPEID,
                    TBACTIVITIESCONF(INUITEMSID).NUPRIORITY,
                    IRCORDERACTIVITY,
                    RCORDER.ROUTE_ID,    
                    RCORDER.CONSECUTIVE, 
                    IONUORDERID
                );

                BLCREATEORDER := TRUE;
            END IF;
        END IF;
        
        
        IF (RCORDERACTIVITY.ORDER_ID IS NOT NULL) THEN
            RCTMPORDER := DAOR_ORDER.FRCGETRECORD(RCORDERACTIVITY.ORDER_ID);
            
            
            IF (RCTMPORDER.ORDER_STATUS_ID IN
                (OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING ) AND
                (RCTMPORDER.ASSIGNED_WITH = OR_BCORDEROPERATINGUNIT.CSBASSIGN_CAPACITY) AND
                (RCTMPORDER.OPERATING_UNIT_ID  IS NOT NULL)) THEN

                RCOPERUNIT := DAOR_OPERATING_UNIT.FRCGETRECORD(RCTMPORDER.OPERATING_UNIT_ID);
                NUACTIVITYTIME := NVL(DAGE_ITEMS.FNUGETSTANDARD_TIME(RCORDERACTIVITY.ACTIVITY_ID)/60, 0);
                
                
                IF RCOPERUNIT.USED_ASSIGN_CAP > NUACTIVITYTIME THEN
                    NUUSEDTIME := RCOPERUNIT.USED_ASSIGN_CAP - NUACTIVITYTIME;
                ELSE
                    NUUSEDTIME := 0;
                END IF;
                
                DAOR_OPERATING_UNIT.UPDUSED_ASSIGN_CAP(RCTMPORDER.OPERATING_UNIT_ID,NUUSEDTIME);

            END IF;
        END IF;

        
        RCORDERACTIVITY.ORDER_ID := IONUORDERID;

        IF (IBLPROCESSORDER) THEN
            RCORDERACTIVITY.STATUS := OR_BOORDERACTIVITIES.CSBREGISTERSTATUS;
        END IF;

        DAOR_ORDER_ACTIVITY.UPDRECORD(RCORDERACTIVITY);
        
        IF (BLCREATEORDER AND IBLPROCESSORDER)  THEN
            
            OR_BOPROCESSORDER.PROCESSORDER(IONUORDERID);
        ELSE
            RCTMPORDER := DAOR_ORDER.FRCGETRECORD(IONUORDERID);
            
            IF (RCTMPORDER.ORDER_STATUS_ID IN
                (OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING ) AND
                (RCTMPORDER.ASSIGNED_WITH = OR_BCORDEROPERATINGUNIT.CSBASSIGN_CAPACITY) AND
                (RCTMPORDER.OPERATING_UNIT_ID  IS NOT NULL)) THEN

                RCOPERUNIT := DAOR_OPERATING_UNIT.FRCGETRECORD(RCTMPORDER.OPERATING_UNIT_ID);
                
                IF (NUACTIVITYTIME IS NULL) THEN
                    NUACTIVITYTIME := NVL(DAGE_ITEMS.FNUGETSTANDARD_TIME(RCORDERACTIVITY.ACTIVITY_ID)/60, 0);
                END IF;

                
                NUUSEDTIME := RCOPERUNIT.USED_ASSIGN_CAP + NUACTIVITYTIME;
                IF RCOPERUNIT.ASSIGN_CAPACITY   < NUUSEDTIME THEN
                    NUUSEDTIME := RCOPERUNIT.ASSIGN_CAPACITY;
                END IF;

                DAOR_OPERATING_UNIT.UPDUSED_ASSIGN_CAP(RCTMPORDER.OPERATING_UNIT_ID,NUUSEDTIME);

            END IF;
        END IF;
        
        
        IF RCORDERACTIVITY.ORDER_ITEM_ID IS NULL THEN
            
            NUORDERITEMSID := OR_BOSEQUENCES.FNUNEXTOR_ORDER_ITEMS;
            RCORORDERITEMS.ORDER_ITEMS_ID := NUORDERITEMSID;
            RCORORDERITEMS.ORDER_ID := IONUORDERID;
            RCORORDERITEMS.ITEMS_ID := INUITEMSID;
            RCORORDERITEMS.ASSIGNED_ITEM_AMOUNT := 1;
            RCORORDERITEMS.LEGAL_ITEM_AMOUNT := 0;
            RCORORDERITEMS.TOTAL_PRICE := 0;
            RCORORDERITEMS.VALUE := 0;

            DAOR_ORDER_ITEMS.INSRECORD(RCORORDERITEMS);
            RCORDERACTIVITY.ORDER_ITEM_ID := NUORDERITEMSID;
            
        ELSE
            DAOR_ORDER_ITEMS.UPDORDER_ID(IRCORDERACTIVITY.ORDER_ITEM_ID, IONUORDERID);
        END IF;

        
        IF DAOR_ORDER.FNUGETORDER_STATUS_ID(RCORDERACTIVITY.ORDER_ID)
            = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING
        THEN
            RCORDERACTIVITY.STATUS := CSBASSIGNEDSTATUS;
        END IF;
    
        DAOR_ORDER_ACTIVITY.UPDRECORD(RCORDERACTIVITY);
        
         
        IF (BLCREATEORDER AND IBLPROCESSORDER) THEN
        
            
            
            GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT( DAOR_ORDER.FRCGETRECORD(IONUORDERID), NULL);
        END IF;

        UT_TRACE.TRACE('FIN or_boorderactivities.updateActivity',20);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEACTIVITY;

    FUNCTION FNUGETBASECOMPBYORDER
    (
        INUORDERACTIVITYID      OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE
    ) RETURN OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE
    IS
        RCORDERACTIVITY     DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        
    BEGIN
        RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(INUORDERACTIVITYID);
        
        IF RCORDERACTIVITY.COMPONENT_ID IS NOT NULL THEN
            RETURN RCORDERACTIVITY.COMPONENT_ID;
        END IF;

        IF RCORDERACTIVITY.MOTIVE_ID IS NOT NULL THEN
            FOR RCCOMPONENT IN MO_BCCOMPONENT.CUMAINCOMPONENTS(RCORDERACTIVITY.MOTIVE_ID) LOOP
                RETURN RCCOMPONENT.COMPONENT_ID;
            END LOOP;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    FUNCTION FSBGETHAVEOTHEPACKINGROUP
    (
        INUPACKAGEID      OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE
    ) RETURN VARCHAR2

    IS
        NUINDEX             BINARY_INTEGER;
        TBORDERID           DAOR_ORDER_ACTIVITY.TYTBORDER_ID;

    BEGIN

        TBORDERID.DELETE;
        OR_BCORDERACTIVITIES.GETACTIVPENDBYPACK(INUPACKAGEID,TBORDERID);
        IF TBORDERID.COUNT > 0 THEN
            NUINDEX := TBORDERID.FIRST;
            LOOP
                IF OR_BCORDERACTIVITIES.FNUGETCOUNTORDERACTIVITIES(TBORDERID(NUINDEX),INUPACKAGEID) > 0 THEN
                    RETURN GE_BOCONSTANTS.CSBYES;
                END IF;
                EXIT WHEN NUINDEX = TBORDERID.LAST;
                NUINDEX := TBORDERID.NEXT(NUINDEX);
            END LOOP;
        END IF;
       RETURN GE_BOCONSTANTS.CSBNO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETHAVEOTHEPACKINGROUP;

    
    





















    PROCEDURE ADDACTIVITYTOORDER
    (
        INUORDERID             IN OR_ORDER.ORDER_ID%TYPE,
        IRCORDER_ACTIVITY       IN DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY,
        ONUORDER_ACTIVITY_ID    OUT OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE
    )
    IS
        RCORDER_ACTIVITY        DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;

    BEGIN
        
        IF NOT OR_BOORDERACTIVITIES.FBLVALIDADDACTIVITYTOORDER (INUORDERID)  THEN
            ERRORS.SETERROR(CNUERR_114718, INUORDERID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        RCORDER_ACTIVITY := IRCORDER_ACTIVITY;
        RCORDER_ACTIVITY.STATUS  := OR_BOORDERACTIVITIES.CSBREGISTERSTATUS;
        
        
        IF DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDERID)
            = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING
        THEN
            RCORDER_ACTIVITY.STATUS := CSBASSIGNEDSTATUS;
        END IF;

        
        INSORUPDORDERACTIVIT
           (RCORDER_ACTIVITY.ACTIVITY_ID,
            INUORDERID, RCORDER_ACTIVITY,
            ONUORDER_ACTIVITY_ID
           );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END ADDACTIVITYTOORDER;

    


















    FUNCTION FBLVALIDADDACTIVITYTOORDER
    (
        INUORDERID       IN OR_ORDER.ORDER_ID%TYPE,
        INUORDERSTATUSID  IN OR_ORDER.ORDER_STATUS_ID%TYPE DEFAULT NULL
    ) RETURN BOOLEAN
    IS
        NUORDERSTATUSID  OR_ORDER.ORDER_STATUS_ID%TYPE;
    BEGIN

        NUORDERSTATUSID :=  INUORDERSTATUSID;

        
        IF NUORDERSTATUSID IS NULL THEN
            NUORDERSTATUSID := DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDERID);
        END IF;
        
        IF  DAOR_ORDER_STATUS.FSBGETIS_FINAL_STATUS(NUORDERSTATUSID) = GE_BOCONSTANTS.CSBYES THEN
            RETURN FALSE;
        END IF;

        
        IF OR_BOPARAMETER.FSBGETGROUP_ASSIGN_ORDER = GE_BOCONSTANTS.CSBNO AND   NUORDERSTATUSID =
           GE_BOPARAMETER.FNUGET(OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING) THEN
            RETURN FALSE;
        END IF;

        RETURN TRUE;

        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FBLVALIDADDACTIVITYTOORDER;

    



































    FUNCTION FBLISUNIQUEPRODUCTDAMAGE (
                                        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
                                        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
                                        OBLCONTINUE    OUT  BOOLEAN,
                                        ONUPACKAGEID   OUT  MO_PACKAGES.PACKAGE_ID%TYPE
                                      )
    RETURN BOOLEAN
    IS
        TBORDERACTIVITIES   OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
        RCACTIVITY          OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES;
        BLHAVEDAMACTIVITIES BOOLEAN := FALSE;
        BLALLDAMACTIVITIES  BOOLEAN := TRUE;
        NUINDEX             BINARY_INTEGER;

    BEGIN
        UT_TRACE.TRACE('Or_BoOrderActivities.fblIsUniqueProductDamage',2);

        
        OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER(INUORDERID, TBORDERACTIVITIES);
        
        
        
        NUINDEX := TBORDERACTIVITIES.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            RCACTIVITY := TBORDERACTIVITIES(NUINDEX);
            IF (NVL(RCACTIVITY.NUPROCESSID, -1) <> OR_BOLEGALIZEACTIVITIES.CNUPROCESSACTAPOYO) THEN
                IF RCACTIVITY.NUACTIVITYID NOT IN (GE_BOITEMSCONSTANTS.CNUFINANCEACTIVITY,
                                                   GE_BOITEMSCONSTANTS.CNUDISTRIBUTEACTIVITY,
                                                   GE_BOITEMSCONSTANTS.CNUCREDITACTIVITY,
                                                   GE_BOITEMSCONSTANTS.CNUEXCHANGENSIACTIVITY
                                                   ) THEN
                    
                    IF NVL(RCACTIVITY.NUPROCESSID, -1) = OR_BOCONSTANTS.CNUPROCESS_DAMAGES
                        AND RCACTIVITY.NUPRODUCTID IS NOT NULL
                    THEN
                        BLHAVEDAMACTIVITIES := TRUE;
                    ELSE
                        BLALLDAMACTIVITIES := FALSE;
                    END IF;

                    
                    IF INUPRODUCTID = RCACTIVITY.NUPRODUCTID THEN
                        ONUPACKAGEID := RCACTIVITY.NUPACKAGEID;
                    END IF;
                END IF;
            END IF;

            NUINDEX := TBORDERACTIVITIES.NEXT(NUINDEX);
        END LOOP;

        
        
        IF NOT BLHAVEDAMACTIVITIES THEN
            UT_TRACE.TRACE('Ninguna actividad era de da�os, continua con el proceso',5);
            OBLCONTINUE := TRUE;
            ONUPACKAGEID := NULL;
            RETURN FALSE;
        END IF;
        
        
        
        IF BLALLDAMACTIVITIES THEN
            UT_TRACE.TRACE('Todas las actividades eran de da�os, valida da�o y continua con el proceso',5);
            OBLCONTINUE := TRUE;
            RETURN TRUE;
        END IF;
        
        
        
        IF NOT BLALLDAMACTIVITIES THEN
            UT_TRACE.TRACE('Alguna actividades eran de da�os y  otras no, NO continua con el proceso',5);
            OBLCONTINUE := FALSE;
            ONUPACKAGEID := NULL;
            RETURN FALSE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FBLISUNIQUEPRODUCTDAMAGE;
    
    



    PROCEDURE GETACTIVITIESBYORDER
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        ORFACTIVITIES       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        
        DAOR_ORDER.ACCKEY(INUORDERID);

        
        ORFACTIVITIES := OR_BCORDERACTIVITIES.FRFGETACTIVITIESBYORDER(INUORDERID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    PROCEDURE GETDATASUBSCRIBER
    (
         INUORDERID    IN  OR_ORDER.ORDER_ID%TYPE,
         ORFREFCURSOR  OUT CONSTANTS.TYREFCURSOR
    )
    IS
         NUSUBSCRIBER_ID  OR_ORDER.SUBSCRIBER_ID%TYPE;
         NUADDRESS_ID     GE_SUBSCRIBER.ADDRESS_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('INICIO - Or_BoOrderActivities.GetDataSubscriber',10);
        UT_TRACE.TRACE('Orden: '||INUORDERID,11);
        IF INUORDERID IS NOT NULL THEN

            NUSUBSCRIBER_ID := DAOR_ORDER.FNUGETSUBSCRIBER_ID(INUORDERID);
            NUADDRESS_ID := DAOR_ORDER.FNUGETEXTERNAL_ADDRESS_ID(INUORDERID);

            ORFREFCURSOR := OR_BCORDERACTIVITIES.FRFGETDATASUBSCRIBER(NUSUBSCRIBER_ID,NUADDRESS_ID);
        END IF;

        UT_TRACE.TRACE('FIN - Or_BoOrderActivities.GetDataSubscriber',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR - Or_BoOrderActivities.GetDataSubscriber',10);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFREFCURSOR);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - Or_BoOrderActivities.GetDataSubscriber',10);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFREFCURSOR);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETDATASUBSCRIBER;

    




































    PROCEDURE   CREATEACTIVITYPROJ
    (
        INUACTIVITYID       IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUADDRESSID        IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUELEMENTID        IN  IF_NODE.ID%TYPE,
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        ISBCOMMENT          IN  OR_ORDER_ACTIVITY.COMMENT_%TYPE,
        INUORDERTEMPLATEID  IN  PM_ORDER_TEMPLATE.ORDER_TEMPLATE_ID%TYPE,
        INUPRIORITYID       IN  PM_PROJECT.PRIORITY_ID%TYPE,
        ONUORDERID          OUT OR_ORDER.ORDER_ID%TYPE,
        ONUORDERACTIVITYID  OUT OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE
    )
    IS
        RCACTIVITY          DAGE_ITEMS.STYGE_ITEMS;
        NUADDRESSID         AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Or_BoOrderActivities.CreateActivityProj',15);

        RCACTIVITY := DAGE_ITEMS.FRCGETRECORD(INUACTIVITYID);

        
        IF ( DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(RCACTIVITY.ITEMS_ID) = OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF) THEN
            OR_BOADMINORDER.CREATEORDER
            (
                INUACTIVITYID,
                INUORDERID,
                NULL,
                INUSUBSCRIBERID,
                INUORDERTEMPLATEID,
                ISBCOMMENT,
                INUPRIORITYID,
                ONUORDERID,
                ONUORDERACTIVITYID
            );
        ELSE

            IF ( INUADDRESSID IS NULL AND INUELEMENTID IS NOT NULL  ) THEN
                
                NUADDRESSID := DAIF_NODE.FNUGETADDRESS_ID(INUELEMENTID,0);
            ELSE
                NUADDRESSID := INUADDRESSID;
            END IF;

        
            OR_BOORDERACTIVITIES.CREATEACTIVITY
            (
                RCACTIVITY.ITEMS_ID,     
                NULL,                    
                NULL,                    
                NULL,                    
                NULL,                    
                NUADDRESSID,             
                INUELEMENTID,            
                INUSUBSCRIBERID,         
                NULL,                    
                NULL,                    
                NULL,                    
                NULL,                    
                NULL,                    
                NULL,                    
                ISBCOMMENT,              
                GE_BOCONSTANTS.GETFALSE,  
                NULL,                    
                ONUORDERID,              
                ONUORDERACTIVITYID,      
                INUORDERTEMPLATEID,       
                NULL, 
                NULL, 
                NULL, 
                NULL, 
                0 
            );

            
            
            DAOR_ORDER.UPDPRIORITY(ONUORDERID, INUPRIORITYID);

            UT_TRACE.TRACE('nuOrderId '||ONUORDERID||' nuOrderActivityId '||ONUORDERACTIVITYID,15);

        END IF;

        UT_TRACE.TRACE('Finaliza Or_BoOrderActivities.CreateActivityProj',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    




    PROCEDURE DELETEACTIVITY
    (
        IDITEMSID   IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    IS
    BEGIN
        
        
        OR_BCORDERACTIVITIES.DELETEACTIVITY(IDITEMSID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    































    PROCEDURE INSORUPDORDERACTIVIT
    (
        INUITEMSID          IN GE_ITEMS.ITEMS_ID%TYPE,
        INUORDERID          IN OR_ORDER.ORDER_ID%TYPE,
        IORCORDERACTIVITY   IN OUT NOCOPY DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY,
        IONUORDERACTIVID    IN OUT OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE
    )
    IS

        NUORDERITEMSID      OR_ORDER_ITEMS.ORDER_ITEMS_ID%TYPE;
        RCORORDERITEMS      DAOR_ORDER_ITEMS.STYOR_ORDER_ITEMS;
        RCOREXTERNSYSTEMID  DAOR_EXTERN_SYSTEMS_ID.STYOR_EXTERN_SYSTEMS_ID;
        BLCHANGEEXTERNDATA  BOOLEAN := FALSE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        TBFINALADMINACT     OR_BOPROCESSORDER.TYTBACTIVIDADREGEN;
        RCORDERACTIVITIES   OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES;
        NULEGALAMOUNT       OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE := 0;
        BLINSERTITEM        BOOLEAN := FALSE;
        
    BEGIN

        UT_TRACE.TRACE('[INICIO] Or_BoOrderActivities.InsOrUpdOrderActivit order_item_Id:['||IORCORDERACTIVITY.ORDER_ITEM_ID||']',15);

        IF ( IORCORDERACTIVITY.ORDER_ITEM_ID IS NULL ) THEN
            NUORDERITEMSID := OR_BOSEQUENCES.FNUNEXTOR_ORDER_ITEMS;

            RCORORDERITEMS.ORDER_ITEMS_ID := NUORDERITEMSID;
            RCORORDERITEMS.ORDER_ID := INUORDERID;
            RCORORDERITEMS.ITEMS_ID := INUITEMSID;
            RCORORDERITEMS.ASSIGNED_ITEM_AMOUNT := 1;
            RCORORDERITEMS.LEGAL_ITEM_AMOUNT := 0;
            RCORORDERITEMS.TOTAL_PRICE := 0;
            RCORORDERITEMS.VALUE := 0;

            DAOR_ORDER_ITEMS.INSRECORD(RCORORDERITEMS);

            IORCORDERACTIVITY.ORDER_ITEM_ID := NUORDERITEMSID;
            BLINSERTITEM := TRUE;
        END IF;
        
        IF (IONUORDERACTIVID IS NULL) THEN
            IORCORDERACTIVITY.ORDER_ACTIVITY_ID := OR_BOSEQUENCES.FNUNEXTOR_ORDER_ACTIVITY;

            DAOR_ORDER_ACTIVITY.INSRECORD(IORCORDERACTIVITY);
            BLINSERTITEM := TRUE;
        ELSE
            DAOR_ORDER_ACTIVITY.UPDRECORD(IORCORDERACTIVITY);
        END IF;

        IF ( BLINSERTITEM AND IORCORDERACTIVITY.ORDER_ID IS NOT NULL ) THEN
           DAOR_ORDER.GETRECORD(IORCORDERACTIVITY.ORDER_ID,RCORDER);
           
           IF ( IORCORDERACTIVITY.ORDER_ITEM_ID IS NOT NULL ) THEN
                NULEGALAMOUNT := DAOR_ORDER_ITEMS.FNUGETLEGAL_ITEM_AMOUNT(IORCORDERACTIVITY.ORDER_ITEM_ID,0);
           END IF;
           
           OR_BOPROCESSORDER.GETADMINACTIVITIES
           (
                IORCORDERACTIVITY.ACTIVITY_ID,
                NULEGALAMOUNT,
                NULL,
                OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED,
                TBFINALADMINACT
           );

           IF( TBFINALADMINACT.COUNT > 0 ) THEN
               OR_BOPROCESSORDER.GENADMINACTIVITIES
               (
                    TBFINALADMINACT,
                    RCORDER.ORDER_ID,
                    RCORDER.OPERATING_UNIT_ID
               );
           END IF;
        END IF;

        
        IF ( DAOR_EXTERN_SYSTEMS_ID.FBLEXIST(INUORDERID) ) THEN
            DAOR_EXTERN_SYSTEMS_ID.GETRECORD(INUORDERID,RCOREXTERNSYSTEMID);
            IF ( NVL(IORCORDERACTIVITY.ADDRESS_ID,-1) <>  NVL(RCOREXTERNSYSTEMID.ADDRESS_ID,-1)
                AND RCOREXTERNSYSTEMID.ADDRESS_ID IS NOT NULL ) THEN
                RCOREXTERNSYSTEMID.ADDRESS_ID := NULL;
                BLCHANGEEXTERNDATA := TRUE;
            END IF;
            IF ( NVL(IORCORDERACTIVITY.PACKAGE_ID,-1) <>  NVL(RCOREXTERNSYSTEMID.PACKAGE_ID,-1)
                AND RCOREXTERNSYSTEMID.PACKAGE_ID IS NOT NULL ) THEN
                RCOREXTERNSYSTEMID.PACKAGE_ID := NULL;
                BLCHANGEEXTERNDATA := TRUE;
            END IF;
            IF ( NVL(IORCORDERACTIVITY.SUBSCRIPTION_ID,-1) <>  NVL(RCOREXTERNSYSTEMID.SUBSCRIPTION_ID,-1)
                AND RCOREXTERNSYSTEMID.SUBSCRIPTION_ID IS NOT NULL ) THEN
                RCOREXTERNSYSTEMID.SUBSCRIPTION_ID := NULL;
                BLCHANGEEXTERNDATA := TRUE;
            END IF;
            IF ( NVL(IORCORDERACTIVITY.SUBSCRIBER_ID,-1) <>  NVL(RCOREXTERNSYSTEMID.SUBSCRIBER_ID,-1)
                AND RCOREXTERNSYSTEMID.SUBSCRIBER_ID IS NOT NULL ) THEN
                RCOREXTERNSYSTEMID.SUBSCRIBER_ID := NULL;
                RCOREXTERNSYSTEMID.SUBSCRIBER_NAME := NULL;
                BLCHANGEEXTERNDATA := TRUE;
            END IF;
            IF ( NVL(IORCORDERACTIVITY.PRODUCT_ID,-1) <>  NVL(RCOREXTERNSYSTEMID.PRODUCT_ID,-1)
                AND RCOREXTERNSYSTEMID.PRODUCT_ID IS NOT NULL ) THEN
                RCOREXTERNSYSTEMID.PRODUCT_ID := NULL;
                BLCHANGEEXTERNDATA := TRUE;
            END IF;
            IF ( BLCHANGEEXTERNDATA ) THEN
                DAOR_EXTERN_SYSTEMS_ID.UPDRECORD(RCOREXTERNSYSTEMID);
            END IF;
        END IF;

        IONUORDERACTIVID := IORCORDERACTIVITY.ORDER_ACTIVITY_ID ;

        UT_TRACE.TRACE('[FIN] Or_BoOrderActivities.InsOrUpdOrderActivit order_activity_id:['||IONUORDERACTIVID||']',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] Or_BoOrderActivities.InsOrUpdOrderActivit order_activity_id:['||IONUORDERACTIVID||']',15);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS ERROR] Or_BoOrderActivities.InsOrUpdOrderActivit order_activity_id:['||IONUORDERACTIVID||']',15);
            RAISE EX.CONTROLLED_ERROR;
    END INSORUPDORDERACTIVIT;
    
    













    PROCEDURE CHARGEACTIVCONFIG
    IS

    BEGIN
        IF(NOT BLISLOADED) THEN
        OR_BCORDERACTIVITIES.GETCONFIG(TBACTIVITIESCONF);
        BLISLOADED := TRUE;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            BLISLOADED := FALSE;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            BLISLOADED := FALSE;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHARGEACTIVCONFIG;
    
    




    PROCEDURE GETACTBYORDERANDSTATUS
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        ORFACTIVITIES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
    
        ORFACTIVITIES := OR_BCORDERACTIVITIES.FRFGETACTBYORDERANDSTATUS(INUORDERID);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFACTIVITIES);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFACTIVITIES);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    




    PROCEDURE CREATEEQUIVALENTACTIVITY
    (
         INUORIGINTASKTYPEID        IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
         INUORIGINORDERACTIVITYID   IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
         INUORDERID                 IN  OR_ORDER.ORDER_ID%TYPE,
         INUNEWTASKTYPEID           IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
         INUACTIVITYTOCREATE        IN  GE_ITEMS.ITEMS_ID%TYPE,
         ONUCREATEDORDERACTID       OUT OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE
    )
    IS
        RCORDERACTIVITY         DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        NUFIRSTORDERACTIVITY    OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUITEMID                GE_ITEMS.ITEMS_ID%TYPE;
        SBDESCRIPTION           GE_ITEMS.DESCRIPTION%TYPE;
        RFORDERACTIVITY         CONSTANTS.TYREFCURSOR;
        NUORDERID               OR_ORDER.ORDER_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('INICIA - or_boorderactivities.CreateEquivalentActivity ',15);
        
        UT_TRACE.TRACE('inuOriginTaskTypeId ['||INUORIGINTASKTYPEID||'] - inuOriginOrderActivityId ['||INUORIGINORDERACTIVITYID||'] - inuOrderId ['||INUORDERID||'] - inuNewTaskTypeId ['||INUNEWTASKTYPEID||'] - inuActivityToCreate ['||INUACTIVITYTOCREATE||']',15);

        NUORDERID := INUORDERID;

        
        UT_TRACE.TRACE('-- Actualiza el tipo de trabajo de la orden ',15);
        DAOR_ORDER.UPDTASK_TYPE_ID(NUORDERID, INUNEWTASKTYPEID);

        IF(INUORIGINORDERACTIVITYID IS NOT NULL) THEN
            
            UT_TRACE.TRACE('-- Obtiene el record de la actividad origen ['||INUORIGINORDERACTIVITYID||']',15);
            RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(INUORIGINORDERACTIVITYID);
        ELSE
            RFORDERACTIVITY := OR_BCORDERACTIVITIES.FRFGETACTBYORDERANDSTATUS(NUORDERID);
            FETCH RFORDERACTIVITY INTO NUITEMID, SBDESCRIPTION, NUFIRSTORDERACTIVITY;
            CLOSE RFORDERACTIVITY;
            UT_TRACE.TRACE('Obtiene la primera actividad - nuFirstOrderActivity['||NUFIRSTORDERACTIVITY||']',15);
            RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(NUFIRSTORDERACTIVITY);
        END IF;

            OR_BOORDERACTIVITIES.CREATEACTIVITY
            (
                INUACTIVITYTOCREATE,
                RCORDERACTIVITY.PACKAGE_ID,
                RCORDERACTIVITY.MOTIVE_ID,
                RCORDERACTIVITY.COMPONENT_ID,
                RCORDERACTIVITY.INSTANCE_ID,
                RCORDERACTIVITY.ADDRESS_ID,
                RCORDERACTIVITY.ELEMENT_ID,
                RCORDERACTIVITY.SUBSCRIBER_ID,
                RCORDERACTIVITY.SUBSCRIPTION_ID,
                RCORDERACTIVITY.PRODUCT_ID,
                RCORDERACTIVITY.OPERATING_SECTOR_ID,
                RCORDERACTIVITY.OPERATING_UNIT_ID,
                RCORDERACTIVITY.EXEC_ESTIMATE_DATE,
                RCORDERACTIVITY.PROCESS_ID,
                RCORDERACTIVITY.COMMENT_,
                FALSE,                              
                NULL,
                NUORDERID,
                ONUCREATEDORDERACTID,               
                RCORDERACTIVITY.ORDER_TEMPLATE_ID,
                GE_BOCONSTANTS.CSBYES,
                RCORDERACTIVITY.CONSECUTIVE,        
                NULL,                               
                NULL,                               
                RCORDERACTIVITY.LEGALIZE_TRY_TIMES
            );

            DAOR_ORDER_ACTIVITY.UPDORIGIN_ACTIVITY_ID(ONUCREATEDORDERACTID, RCORDERACTIVITY.ORDER_ACTIVITY_ID);

            IF(INUORIGINORDERACTIVITYID IS NOT NULL)THEN
                
                OR_BOANULLORDER.ANULLORDERACTIVITY
                (
                    INUORIGINORDERACTIVITYID
                );
            END IF;

            UT_TRACE.TRACE('FIN  - or_boorderactivities.CreateEquivalentActivity - Actividad creada ['||ONUCREATEDORDERACTID||']',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFORDERACTIVITY);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFORDERACTIVITY);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    




    PROCEDURE CHANGETSKTYPACTIVITIESORDER
    (
         INUORIGINTASKTYPEID        IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
         INUORIGINORDERACTIVITYID   IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
         INUORDERID                 IN  OUT OR_ORDER.ORDER_ID%TYPE,
         INUNEWTASKTYPEID           IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
         INUACTIVITYTOCREATE        IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    IS
        ONUCREATEDORDERACTID    OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('inuOriginTaskTypeId ['||INUORIGINTASKTYPEID||']',15);
        UT_TRACE.TRACE('inuOriginOrderActivityId ['||INUORIGINORDERACTIVITYID||']',15);
        UT_TRACE.TRACE('inuOrderId ['||INUORDERID||']',15);
        UT_TRACE.TRACE('inuNewTaskTypeId ['||INUNEWTASKTYPEID||']',15);
        UT_TRACE.TRACE('inuActivityToCreate ['||INUACTIVITYTOCREATE||']',15);

        
        DAOR_TASK_TYPE.ACCKEY(INUNEWTASKTYPEID);
        
        
        IF( NOT DAGE_ITEMS.FBLEXIST(INUACTIVITYTOCREATE))THEN
            
            GE_BOERRORS.SETERRORCODE(CNUERR_119343); 
        END IF;
        
        
        IF( INUORIGINORDERACTIVITYID IS NOT NULL AND
            DAOR_ORDER_ACTIVITY.FNUGETORDER_ID(INUORIGINORDERACTIVITYID) <>  INUORDERID) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_20442, INUORIGINORDERACTIVITYID||'|'||INUORDERID);
        END IF;

        
        DAOR_TASK_TYPES_ITEMS.ACCKEY(INUNEWTASKTYPEID, INUACTIVITYTOCREATE);
        
        IF(NVL(INUORIGINTASKTYPEID, DAOR_ORDER.FNUGETTASK_TYPE_ID(INUORDERID) ) = INUNEWTASKTYPEID)THEN
            
            GE_BOERRORS.SETERRORCODE(CNUERR_8671);
        END IF;

        CREATEEQUIVALENTACTIVITY
        (
             INUORIGINTASKTYPEID        ,
             INUORIGINORDERACTIVITYID   ,
             INUORDERID                 ,
             INUNEWTASKTYPEID           ,
             INUACTIVITYTOCREATE        ,
             ONUCREATEDORDERACTID
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




    PROCEDURE READXMLEXCHANGETASKTYPE
    (
        ISBXML  IN  GE_BOUTILITIES.STYSTATEMENT
    )
    IS

        NULENGTH                NUMBER;
        SBORDERVALUE            GE_BOUTILITIES.STYSTATEMENT;
        SBNEWTASKTYPE           GE_BOUTILITIES.STYSTATEMENT;
        SBNODEVALUE             GE_BOUTILITIES.STYSTATEMENT;
        SBNODERELVALUE          GE_BOUTILITIES.STYSTATEMENT;
        XMLDOCUMENT             XMLDOM.DOMDOCUMENT;
        LSTACTIVITIES           XMLDOM.DOMNODELIST;
        
        NUTASKTYPE              OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
        NUEXCHANGETASKTYPEID    OR_EXCHANGE_TASKTYPE.EXCHANGE_TASKTYPE_ID%TYPE;
        RCORDER                 DAOR_ORDER.STYOR_ORDER;
        ONUCREATEDORDERACTID    OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;

    
        PROCEDURE LOADXMLDATA
        (
            ISBXMLBUFFER    IN      VARCHAR2
        )
        IS
        BEGIN
            
            UT_XMLUTILITIES.LOADXMLDATA(ISBXML);

        EXCEPTION
            WHEN OTHERS THEN
                GE_BOERRORS.SETERRORCODE(CNUERR_6368);
        END;
    
        PROCEDURE VALIDATEORDERSTATUS
        (
            INUORDERSTATUSID  IN  OR_ORDER.ORDER_STATUS_ID%TYPE
        )
        IS
        BEGIN
            
            IF( INUORDERSTATUSID IN (
                                        OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                                        OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING,
                                        OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED
                                    )
                )THEN
                    RETURN;
            ELSE
                GE_BOERRORS.SETERRORCODE(CNUERR_8681);
            END IF;
        END;
    
    BEGIN

        UT_TRACE.TRACE('INICIA - Or_BoOrderActivities.ReadXMLExchangeTaskType',15);
        UT_TRACE.TRACE('isbXml ['||ISBXML||']',15);

        
        LOADXMLDATA(ISBXML);

        
        SBORDERVALUE := UT_XMLUTILITIES.FSBGETTAGVALUE(OR_BOCONSTANTS.CSBTAG_ORDER_ID, 1, FALSE);
        UT_TRACE.TRACE('ORDER/ORDER_ID['||SBORDERVALUE||']',15);

        RCORDER := DAOR_ORDER.FRCGETRECORD(TO_NUMBER(SBORDERVALUE));
        
        VALIDATEORDERSTATUS(RCORDER.ORDER_STATUS_ID);

        
        NUTASKTYPE := RCORDER.TASK_TYPE_ID;

        
        SBNEWTASKTYPE := UT_XMLUTILITIES.FSBGETTAGVALUE(OR_BOCONSTANTS.CSBTAG_NEW_TASKTYPE, 1, FALSE);
        UT_TRACE.TRACE('ORDER/NEW_TASK_TYPE ['||SBNEWTASKTYPE||']',15);

        
        DAOR_TASK_TYPE.ACCKEY(TO_NUMBER(SBNEWTASKTYPE));

        
        DAOR_OPE_UNI_TASK_TYPE.ACCKEY(TO_NUMBER(SBNEWTASKTYPE), RCORDER.OPERATING_UNIT_ID);

        
        OR_BCEXCHANGE_TASKTYPE.GETCHANGEABLETASKTYPEID(NUTASKTYPE, SBNEWTASKTYPE, NUEXCHANGETASKTYPEID);
        IF(NUEXCHANGETASKTYPEID IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_901164, NUTASKTYPE||'|'||SBNEWTASKTYPE);
        END IF;

        
        UT_TRACE.TRACE('Obtiene el documento ',15);
        XMLDOCUMENT := UT_XMLUTILITIES.FRCPARSEBUFFER(ISBXML);

        
        LSTACTIVITIES := UT_XMLUTILITIES.FRCGETNODELIST(XMLDOCUMENT, OR_BOCONSTANTS.CSBTAG_NODO_ACTIVITIES);
        
        NULENGTH := XMLDOM.GETLENGTH(LSTACTIVITIES);
        UT_TRACE.TRACE('actividades nuLength ['||NULENGTH||']',15);

        IF(NULENGTH > 0)THEN

            FOR N IN 1..NULENGTH
            LOOP

                SBNODEVALUE := UT_XMLUTILITIES.FSBGETTAGVALUE(OR_BOCONSTANTS.CSBTAG_ACTIVITY_ID, N, FALSE);
                SBNODERELVALUE := UT_XMLUTILITIES.FSBGETTAGVALUE(OR_BOCONSTANTS.CSBTAG_RELATED_ACTIVITY_ID, N, FALSE);

                UT_TRACE.TRACE('Actividad('||N||') ['||SBNODEVALUE||']',15);
                UT_TRACE.TRACE('Actividad relacionada('||N||') ['||SBNODERELVALUE||']',15);

                
                IF(OR_BCROLUNIDADTRAB.FSBVALACTBYUNIT(RCORDER.OPERATING_UNIT_ID , TO_NUMBER(SBNODEVALUE)) = OR_BOCONSTANTS.CSBNO) THEN
                    
                    GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_901187, SBNODEVALUE||'|'||RCORDER.OPERATING_UNIT_ID||' - '||DAOR_OPERATING_UNIT.FSBGETNAME(RCORDER.OPERATING_UNIT_ID));
                END IF;

                CHANGETSKTYPACTIVITIESORDER
                (
                     NUTASKTYPE                 ,
                     TO_NUMBER(SBNODERELVALUE)  ,
                     RCORDER.ORDER_ID           ,
                     TO_NUMBER(SBNEWTASKTYPE)   ,
                     TO_NUMBER(SBNODEVALUE)
                );

            END LOOP;
        ELSE
            GE_BOERRORS.SETERRORCODE(CNUERR_6368);
        END IF;
        
        UT_TRACE.TRACE('FIN - Or_BoOrderActivities.ReadXMLExchangeTaskType',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    PROCEDURE GETIDORDERSBYPACKAGE
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        OCUORDERS       OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN
        UT_TRACE.TRACE('--INICIO Or_BoOrderActivities.GetIdOrdersByPackage '||INUPACKAGEID, 2 );

        
        OCUORDERS := OR_BCORDERACTIVITIES.FRFGETIDORDERSBYPACK(INUPACKAGEID);
        
        UT_TRACE.TRACE('--FIN Or_BoOrderActivities.GetIdOrdersByPackage ', 2 );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETIDORDERSBYPACKAGE;
    
    

















    PROCEDURE GEBASICDATABYORDER
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        ORFORDER            OUT CONSTANTS.TYREFCURSOR,
        ORFORDERACTIVITY    OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN
        UT_TRACE.TRACE('--INICIO Or_BoOrderActivities.GeBasicDataByOrder '||INUORDERID, 2 );

        
        OR_BCORDERACTIVITIES.GETBASICDATABYORDER(INUORDERID, ORFORDER, ORFORDERACTIVITY);

        UT_TRACE.TRACE('--FIN Or_BoOrderActivities.GeBasicDataByOrder ', 2 );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GEBASICDATABYORDER;
    
    




















    PROCEDURE VALIDAMOUNTTOLEGALIZE
    (
        INUACTIVITY     IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUAMOUNT       IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE,
        INUCAUSALID     IN  OR_ORDER.CAUSAL_ID%TYPE
    )
    IS

    BEGIN
        UT_TRACE.TRACE('--INICIO Or_BoOrderActivities.ValidAmountToLegalize ', 2 );
        UT_TRACE.TRACE('inuActivity: '||INUACTIVITY||' inuAmount: '||INUAMOUNT, 2 );
        
        
        DAGE_ITEMS.ACCKEY(INUACTIVITY);
        
        
        IF (INUAMOUNT IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_20543, INUACTIVITY);
        END IF;
        
        
        IF (UT_CONVERT.FSBIS_NUMBER(INUAMOUNT) = GE_BOCONSTANTS.CSBNO) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_900907, INUACTIVITY);
        END IF;
        
        
        DAGE_CAUSAL.ACCKEY(INUCAUSALID);

        
        
        
        IF(DAGE_CAUSAL.FNUGETCLASS_CAUSAL_ID(INUCAUSALID) = OR_BOCONSTANTS.CNUFAILCAUSAL AND INUAMOUNT <> 0) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_901273, INUACTIVITY);
        END IF;
        
        IF (DAGE_CAUSAL.FNUGETCLASS_CAUSAL_ID(INUCAUSALID) = OR_BOCONSTANTS.CNUSUCCESCAUSAL) THEN
            IF (
                DAOR_ACTIVIDAD.FSBGETLEGALIZA_MULTIPLE(INUACTIVITY) = GE_BOCONSTANTS.CSBNO AND  INUAMOUNT <> 1
            OR
                DAOR_ACTIVIDAD.FSBGETLEGALIZA_MULTIPLE(INUACTIVITY) = GE_BOCONSTANTS.CSBYES AND  INUAMOUNT < 0
            ) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_901273, INUACTIVITY);
            END IF;
        END IF;

        UT_TRACE.TRACE('--FIN Or_BoOrderActivities.ValidAmountToLegalize ', 2 );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDAMOUNTTOLEGALIZE;
    
           



















    PROCEDURE GETORDERACTIVITIES
    (
        INUORDERID      IN      OR_ORDER.ORDER_ID%TYPE,
        OTBACTIVITIES   IN OUT  OR_BCORDERACTIVITIES.TYTBORDERACTIVITY
    )
    IS
        RFACTIVITIES        CONSTANTS.TYREFCURSOR;
        RCORDERACTIVITIES   OR_BCORDERACTIVITIES.TYRCORDERACTIVITY;
        NUIDX               NUMBER := 1;
        NUCLASSSERVICE      PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE;
        NUCLASSSERVICEITEM  GE_ITEMS.ITEMS_ID%TYPE;
    BEGIN

        RFACTIVITIES := OR_BCORDERACTIVITIES.FRFGETORDERACTIVITIES(INUORDERID);
        
        LOOP
            FETCH RFACTIVITIES INTO
                RCORDERACTIVITIES.ORDERID,
                RCORDERACTIVITIES.ORDERACTIVITYID,
                RCORDERACTIVITIES.ACTIVITYID,
                RCORDERACTIVITIES.STATUS,
                RCORDERACTIVITIES.COMPENSATED,
                RCORDERACTIVITIES.PRODUCTID,
                RCORDERACTIVITIES.COMPONENTID;

        EXIT WHEN RFACTIVITIES%NOTFOUND;
        
                OTBACTIVITIES(NUIDX) := RCORDERACTIVITIES;

                NUCLASSSERVICE := DAMO_COMPONENT.FNUGETCLASS_SERVICE_ID(RCORDERACTIVITIES.COMPONENTID, 0);
                IF (NUCLASSSERVICE IS NOT NULL) THEN
                    NUCLASSSERVICEITEM := DAPS_CLASS_SERVICE.FNUGETITEM_ID(NUCLASSSERVICE, 0);
                    IF (NUCLASSSERVICEITEM IS NOT NULL) THEN
                        OTBACTIVITIES(NUIDX).IDITEMSTIPO := DAGE_ITEMS.FNUGETID_ITEMS_TIPO(NUCLASSSERVICEITEM, 0);
                        GE_BCITEMS_GAMA_ITEM.GETITEMGAMABYITEM(NUCLASSSERVICEITEM, OTBACTIVITIES(NUIDX).IDITEMSGAMA);
                    END IF;
                END IF;

                NUIDX := NUIDX + 1;
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFACTIVITIES);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFACTIVITIES);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERACTIVITIES;
    
     























    PROCEDURE CANCELACTIVITY
    (
        INUORDERACTIVITYID  IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUOPERATINGUNITID  IN OR_ORDER.OPERATING_UNIT_ID%TYPE DEFAULT NULL
    )
    IS
        TBORDERACTIVITIES   OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
        RCORDERACTIVITY     DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
    BEGIN

        RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(INUORDERACTIVITYID);
        OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER(RCORDERACTIVITY.ORDER_ID, TBORDERACTIVITIES, FALSE);
        
        IF (TBORDERACTIVITIES.COUNT = 1) THEN
            RCORDER := DAOR_ORDER.FRCGETRECORD(RCORDERACTIVITY.ORDER_ID);
            IF (RCORDER.ORDER_STATUS_ID IN (OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED, OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED)) THEN
                OR_BOPROCESSORDER.ASSIGN(
                    RCORDER, 
                    NVL(RCORDER.OPERATING_UNIT_ID, INUOPERATINGUNITID), 
                    SYSDATE, 
                    FALSE, 
                    FALSE, 
                    NULL, 
                    NULL, 
                    FALSE, 
                    NULL 
                );
            END IF;
            
            OR_BOEXTERNALLEGALIZEACTIVITY.LEGALIZEORDER
            (
                RCORDERACTIVITY.ORDER_ID,
                GE_BOCAUSAL.CNUCAUSALAUTOMATICLEGALIZE,
                NULL, 
                NVL(DAOR_ORDER.FDTGETEXEC_INITIAL_DATE(RCORDERACTIVITY.ORDER_ID),SYSDATE),
                SYSDATE, 
                NULL  
            );
        ELSE 
            OR_BOANULLORDER.ANULLACTIVITY(RCORDERACTIVITY);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CANCELACTIVITY;
    
    
    























    PROCEDURE GETORDERACTIVITYATTRI
    (
        INUORDERID      IN  OR_ORDER_ACTIVITY.ORDER_ID%TYPE,
        INUITEMID       IN  OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE,
        OSBVALUE1       OUT OR_ORDER_ACTIVITY.VALUE1%TYPE,
        OSBVALUE2       OUT OR_ORDER_ACTIVITY.VALUE2%TYPE,
        OSBVALUE3       OUT OR_ORDER_ACTIVITY.VALUE3%TYPE,
        OSBVALUE4       OUT OR_ORDER_ACTIVITY.VALUE4%TYPE
    )
    IS
        
    BEGIN
        
        UT_TRACE.TRACE('INICIO Or_BoOrderActivities.GetOrderActivityAttri',5);
        
        OR_BCORDERACTIVITIES.GETORDERACTIVITYATTRI
        (
            INUORDERID,
            INUITEMID,
            OSBVALUE1,
            OSBVALUE2,
            OSBVALUE3,
            OSBVALUE4
        );
    
        UT_TRACE.TRACE('FIN Or_BoOrderActivities.GetOrderActivityAttri',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERACTIVITYATTRI;
    
    

















    PROCEDURE GETPRODINFO
    (
        INUORDERACTIVITYID  IN      OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        ONUADDRESSID        OUT     OR_ORDER_ACTIVITY.ADDRESS_ID%TYPE,
        ONUSUBSCRIBERID     OUT     OR_ORDER_ACTIVITY.SUBSCRIBER_ID%TYPE,
        ONUCOMPONENTTYPEID  OUT     PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        ONUCLASSSERVICEID   OUT     PR_COMPONENT.CLASS_SERVICE_ID%TYPE,
        ONUPRODUCTID        OUT     OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE,
        ONUPRODUCTTYPEID    OUT     PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        IONUPRCOMPONENTID   IN OUT  PR_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BoOrderActivities.GetProdInfo inuOrderActivityId '||INUORDERACTIVITYID||' ionuPrComponentId '||IONUPRCOMPONENTID, 2 );

        
        IF(IONUPRCOMPONENTID IS NOT NULL) THEN
            OR_BCORDERACTIVITIES.GETPRODINFOBYACTPR
                (
                    INUORDERACTIVITYID,
                    IONUPRCOMPONENTID,
                    ONUADDRESSID,
                    ONUSUBSCRIBERID,
                    IONUPRCOMPONENTID,
                    ONUCOMPONENTTYPEID,
                    ONUCLASSSERVICEID,
                    ONUPRODUCTID,
                    ONUPRODUCTTYPEID
                );
      ELSE
            OR_BCORDERACTIVITIES.GETPRODINFOBYACT
                (
                    INUORDERACTIVITYID,
                    ONUADDRESSID,
                    ONUSUBSCRIBERID,
                    IONUPRCOMPONENTID,
                    ONUCOMPONENTTYPEID,
                    ONUCLASSSERVICEID,
                    ONUPRODUCTID,
                    ONUPRODUCTTYPEID
                );
            
            
            IF ( IONUPRCOMPONENTID IS NULL ) THEN
                UT_TRACE.TRACE('Calcula gnuComponentPrRet: ['||OR_BOACTIVITIESRULES.FNUGETCOMPEQUIP||']', 16);
                
                
                OR_BCORDERACTIVITIES.GETPRODINFOBYACTPR
                (
                    INUORDERACTIVITYID,
                    OR_BOACTIVITIESRULES.FNUGETCOMPEQUIP,
                    ONUADDRESSID,
                    ONUSUBSCRIBERID,
                    IONUPRCOMPONENTID,
                    ONUCOMPONENTTYPEID,
                    ONUCLASSSERVICEID,
                    ONUPRODUCTID,
                    ONUPRODUCTTYPEID
                );
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN Or_BoOrderActivities.GetProdInfo. '
            || ' onuAddressId '         ||ONUADDRESSID          ||' - '
            || ' onuSubscriberId'       ||ONUSUBSCRIBERID       ||' - '
            || ' ionuPrComponentId '    ||IONUPRCOMPONENTID     ||' - '
            || ' onuComponentTypeId '   ||ONUCOMPONENTTYPEID    ||' - '
            || ' onuClassServiceId '    ||ONUCLASSSERVICEID     ||' - '
            || ' onuProductId '         ||ONUPRODUCTID          ||' - '
            || ' onuProductTypeId '     ||ONUPRODUCTTYPEID, 2 );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODINFO;
    
END OR_BOORDERACTIVITIES;