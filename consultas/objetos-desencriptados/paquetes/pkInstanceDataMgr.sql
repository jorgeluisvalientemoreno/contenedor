PACKAGE BODY pkInstanceDataMgr AS














































































































































































































    
    
    

    
    
    CSBVERSION   CONSTANT VARCHAR2(250) := 'SAO213371';

    
    

    
    GNUGC_SESUNUSE          SERVSUSC.SESUNUSE%TYPE;
    
    GNUGC_SESUSUSC          SERVSUSC.SESUSUSC%TYPE;
    
    GNUGC_CMSSIDCO          COMPSESU.CMSSIDCO%TYPE;
    
    GNUGC_ADDRESS_ID        PR_PRODUCT.ADDRESS_ID%TYPE;
    
    GNUGC_SESUDEPA          SERVSUSC.SESUDEPA%TYPE;
    
    GNUGC_SESULOCA          SERVSUSC.SESULOCA%TYPE;
    
    GNUGC_SESUSERV          SERVSUSC.SESUSERV%TYPE;
    
    GNUGC_SESUPLFA          SERVSUSC.SESUPLFA%TYPE;
    
    GNUGC_SESUCATE          SERVSUSC.SESUCATE%TYPE;
    
    GNUGC_SESUSUCA          SERVSUSC.SESUSUCA%TYPE;
    
    GDTGC_SESUFEIN          SERVSUSC.SESUFEIN%TYPE;
    
    GDTGC_SESUFERE          SERVSUSC.SESUFERE%TYPE;

    
    GNUGC_CONCCODI          CONCEPTO.CONCCODI%TYPE;
    
    GNUGC_SESUESCO          SERVSUSC.SESUESCO%TYPE;
    
    GNUGC_SESUCICO          SERVSUSC.SESUCICO%TYPE;
    
    GRCGC_PERIFACT	         PERIFACT%ROWTYPE;
    
    GRCGC_SERVSUSC          SERVSUSC%ROWTYPE ;
    
    GNUCG_MODOCONSECUTIVO   NUMBER ;
    
    GNUCG_CONSECCACHE       NUMBER ;
    
    GTBCG_TABLACONSUMO	     PKBORATINGMEMORYMGR.TYTBCONSPECOTICO;
    
    GSBSTRINGVALUE          VARCHAR2(2000);
    
    GSBFIELDVALUEDESCRIPTION VARCHAR2(2000);
    
    GNUGC_USUARIO           CARGOS.CARGUSUA%TYPE ;
    
    GSBGC_TERMINAL          SA_TERMINAL.NAME%TYPE ;
    
    GNUGC_PROGRAMA          CARGOS.CARGPROG%TYPE ;
    
    GSBGC_TRACKID           ESTAPROG.ESPRPROG%TYPE ;
    
    GDTGC_CURRDATE          DATE ;
    
    GDTGC_ACCODATE          DATE ;
    
    GDTGC_MEASUNIT          UNIDMEDI.UNMECODI%TYPE ;
    
    GNUGC_CHARGECAUSE	  CARGOS.CARGCACA%TYPE ;
    
    GNUGC_CDRCONS           CARGOS.CARGCOLL%TYPE;
    
    GNUGC_CARGTIMO          GST_TIPOMONE.TIMOCODI%TYPE ;
    
    GNUCG_CARGUNID          CARGOS.CARGUNID%TYPE ;
    
    GNUCG_CARGDOSO          CARGOS.CARGDOSO%TYPE ;
    
    GNUGC_SESUBOUI          SERVSUSC.SESUBOUI%TYPE ;
    
    GRCGC_DIFERIDO          DIFERIDO%ROWTYPE ;
    
    GDTGC_GENERATIONDATE    DATE ;
    
    GNUGC_UNITSTAXFREE      NUMBER ;
    
    GDTGC_PRODTARIFFDATE    DATE ;
    
    GSBGC_WARRANTYROLE      SERVSUSC.SESUROGA%TYPE ;
    
    GNUCG_CONSUMPERIOD      PERICOSE.PECSCONS%TYPE ;
    
    GNUCG_BESTPATHPLAN      PLANSUSC.PLSUCODI%TYPE;
    
    GSBTAXLIQEXEMODE        VARCHAR2(1);
    
    GNUPACKAGEID            NUMBER;
    
    GNUMOTIVEID             NUMBER;
    
    GSBSUPPDOC              CARGOS.CARGDOSO%TYPE;
    
    GNUPROGRAM              CARGOS.CARGPROG%TYPE;
    
    GNUTAXPERC              IMPUCONC.IPCOPOIM%TYPE;
    
    GNUGC_CARGVABL          CARGOS.CARGVABL%TYPE;
    
    
    GSBGC_CARGTIPR          CARGOS.CARGTIPR%TYPE;

    
    GNUCG_PACKAGEID         NUMBER;

    
    GNUIDTARIFA             CARGOS.CARGTACO%TYPE;
    
    
    GNUCONSUMPTIONTYPE      CARGOS.CARGTICO%TYPE;

    
    GNUCG_DISCOUNTPERCENT   CC_PLAN_FEATURES.DISCOUNT_PERCENTAGE%TYPE;

    
    GNUCG_DISCOUNTVALUE     CC_PLAN_FEATURES.DISCOUNT_VALUE%TYPE;

    
    
    GNUESTADOPROCSUSC       NUMBER ;

     
    TYPE TYTBDEFERREDPLAN IS TABLE OF PLANDIFE%ROWTYPE INDEX BY BINARY_INTEGER;
    GTBDEFERREDPLAN     TYTBDEFERREDPLAN;

    
    GRCPACKAGE              DAMO_PACKAGES.STYMO_PACKAGES;
    
    GRCMOTIVE               DAMO_MOTIVE.STYMO_MOTIVE;

    
    GNUPERIODOACTUAL        PERICOSE.PECSCONS%TYPE;

    
    GDTFECHAINSTCOMPONENTE  COMPSESU.CMSSFEIN%TYPE;

    
    GDTFECHARETCOMPONENTE   COMPSESU.CMSSFERE%TYPE;

    
    GNUCLASECOMPONENTE      COMPSESU.CMSSCLSE%TYPE;

    
    GNUTIPOCOMPONENTE       COMPSESU.CMSSTCOM%TYPE;

    
    GSBCOMPONENTEINCL       COMPSESU.CMSSINCL%TYPE;

    
    GNUCANTCOMPONENTES      NUMBER;

    
    GNUGC_PLSUCODI          PLANSUSC.PLSUCODI%TYPE;

    
    GDTDATETOLATECALC       DATE;
    
    
    GNUNOTGENLATEVALUE      NUMBER;
    
    
    GNUBASEVALUE            NUMBER;
    
    
    GNULATEDAYS             NUMBER;
    
    
    GDTLASTCONCEPTLIQDATE   FEULLICO.FELIFEUL%TYPE;
    
    
    GRCPERICOSE             PERICOSE%ROWTYPE;

    
    GNUCG_BILLPERIODTOGEN   PERIFACT.PEFACODI%TYPE;
    
    
    GNUCG_CHANGEPLANDATE    DATE;
    
    
    
    

    
    
    

    
    
    
























PROCEDURE GETCG_BILLPERIODRECORD
(
    ORCPERIFACT     OUT	PERIFACT%ROWTYPE
)
IS
BEGIN

    ORCPERIFACT := GRCGC_PERIFACT ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_BILLPERIODRECORD;
























PROCEDURE GETCG_BILLPLAN
(
    ONUSESUPLFA     OUT	SERVSUSC.SESUPLFA%TYPE
)
IS
BEGIN

    ONUSESUPLFA := GNUGC_SESUPLFA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_BILLPLAN;
























PROCEDURE GETCG_CATEGORY
(
    ONUSESUCATE     OUT	SERVSUSC.SESUCATE%TYPE
)
IS
BEGIN

    ONUSESUCATE := GNUGC_SESUCATE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_CATEGORY;























PROCEDURE GETCG_CONSUMPTIONCYCLE
(
    ONUSESUCICO     OUT	SERVSUSC.SESUCICO%TYPE
)
IS
BEGIN

    ONUSESUCICO := GNUGC_SESUCICO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_CONSUMPTIONCYCLE;
























PROCEDURE GETCG_CONCEPT
(
    ONUCONCCODI     OUT	CONCEPTO.CONCCODI%TYPE
)
IS
BEGIN

    ONUCONCCODI := GNUGC_CONCCODI ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_CONCEPT;
























PROCEDURE GETCG_INSTALLDATE
(
    ODTSESUFEIN     OUT	SERVSUSC.SESUFEIN%TYPE
)
IS
BEGIN

    ODTSESUFEIN := GDTGC_SESUFEIN ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_INSTALLDATE;
























PROCEDURE GETCG_QUITDATE
(
    ODTSESUFERE     OUT	SERVSUSC.SESUFERE%TYPE
)
IS
BEGIN

    ODTSESUFERE := GDTGC_SESUFERE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_QUITDATE;


























PROCEDURE GETCG_LOCALITY
(
    ONUSESULOCA     OUT	SERVSUSC.SESULOCA%TYPE
)
IS
BEGIN


    ONUSESULOCA := GNUGC_SESULOCA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_LOCALITY;
























PROCEDURE GETCG_SERVICE
(
    ONUSESUSERV     OUT	SERVSUSC.SESUSERV%TYPE
)
IS
BEGIN

    ONUSESUSERV := GNUGC_SESUSERV ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_SERVICE;
























PROCEDURE GETCG_STATE
(
    ONUSESUDEPA     OUT	SERVSUSC.SESUDEPA%TYPE
)
IS
BEGIN

    ONUSESUDEPA := GNUGC_SESUDEPA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_STATE;
























PROCEDURE GETCG_SUBCATEGORY
(
    ONUSESUSUCA     OUT	SERVSUSC.SESUSUCA%TYPE
)
IS
BEGIN

    ONUSESUSUCA := GNUGC_SESUSUCA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_SUBCATEGORY;
























PROCEDURE GETCG_SUBSSERVICE
(
    ONUSESUNUSE     OUT	SERVSUSC.SESUNUSE%TYPE
)
IS
BEGIN

    ONUSESUNUSE := GNUGC_SESUNUSE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_SUBSSERVICE;























PROCEDURE GETCG_SUBSCRIBER
(
    ONUSESUSUSC     OUT	SERVSUSC.SESUSUSC%TYPE
)
IS
BEGIN

    ONUSESUSUSC := GNUGC_SESUSUSC ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_SUBSCRIBER;























PROCEDURE GETCG_COMPONENT
(
    ONUCOMPONENTE     OUT	COMPSESU.CMSSIDCO%TYPE
)
IS
BEGIN

    ONUCOMPONENTE := GNUGC_CMSSIDCO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_COMPONENT;




























PROCEDURE GETRECORDBILLINGMESSAGE
(
    INUMEFADEPA     IN              MENSFACT.MEFADEPA%TYPE,
    INUMEFALOCA     IN              MENSFACT.MEFALOCA%TYPE,
    INUMEFACODI     IN              MENSFACT.MEFACODI%TYPE,
    INUMEFATICL     IN              MENSFACT.MEFATICL%TYPE,
    ORCMENSFACT     IN OUT NOCOPY   MENSFACT%ROWTYPE
)
IS
BEGIN

	PKBILLINGMESSAGEMGR.GETRECORD ( INUMEFADEPA,
					INUMEFALOCA,
					INUMEFACODI,
					INUMEFATICL,
					ORCMENSFACT  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDBILLINGMESSAGE;

























PROCEDURE GETRECORDBILLINGPERIOD
(
    INUPEFACODI     IN              PERIFACT.PEFACODI%TYPE,
    ORCPERIFACT     IN OUT NOCOPY   PERIFACT%ROWTYPE
)
IS
BEGIN

	PKBILLINGPERIODMGR.GETRECORD (  INUPEFACODI,
					ORCPERIFACT  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDBILLINGPERIOD;



























PROCEDURE GETRECORDCONSUMPERIOD
(
    INUCONSUMPERIOD                     IN  PERICOSE.PECSCONS%TYPE,
    ORCCONSUMPERIOD                     OUT PERICOSE%ROWTYPE
)
IS
BEGIN

    
    PKBCPERICOSE.GETCACHERECORDEX( INUCONSUMPERIOD, ORCCONSUMPERIOD );

EXCEPTION
    WHEN LOGIN_DENIED THEN
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDCONSUMPERIOD;























PROCEDURE GETRECORDADDRESSTYPE
(
    ISBADDRESSTYPE                      IN  TIDICOBR.TDCOCODI%TYPE,
    ORCADDRESSTYPE                      OUT TIDICOBR%ROWTYPE
)
IS
BEGIN

    
    PKCOLLECTADDRESSTYPE.GETRECORD( ISBADDRESSTYPE, ORCADDRESSTYPE );

EXCEPTION
    WHEN LOGIN_DENIED THEN
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDADDRESSTYPE;

























PROCEDURE GETRECORDCATEGORY
(
	INUCATECODI     IN              CATEGORI.CATECODI%TYPE,
	ORCCATEGORI     IN OUT NOCOPY   CATEGORI%ROWTYPE
)
IS
BEGIN

	PKCATEGORYMGR.GETRECORD (   INUCATECODI,
				    ORCCATEGORI  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDCATEGORY;

























PROCEDURE GETRECORDCONCEPT
(
    INUCONCCODI     IN              CONCEPTO.CONCCODI%TYPE,
    ORCCONCEPTO     IN OUT NOCOPY   CONCEPTO%ROWTYPE
)
IS
BEGIN

	PKCONCEPTMGR.GETRECORD (    INUCONCCODI,
				    ORCCONCEPTO  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDCONCEPT;


























PROCEDURE GETRECORDCONFSTATUSSUSPEND
(
    INUCOECSERV     IN              CONFESCO.COECSERV%TYPE,
    INUCOECCODI     IN              CONFESCO.COECCODI%TYPE,
    ORCCONFESCO     IN OUT NOCOPY   CONFESCO%ROWTYPE
)
IS
BEGIN

	PKCONFSTATUSSUSPENDMGR.GETRECORD (  INUCOECSERV,
					    INUCOECCODI,
					    ORCCONFESCO  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDCONFSTATUSSUSPEND;
























PROCEDURE GETRECORDCONFIGSERVSUSPEND
(
    INUCOCSSERV     IN              CONFCOSE.COCSSERV%TYPE,
    ORCCONFCOSE     IN OUT NOCOPY   CONFCOSE%ROWTYPE
)
IS
BEGIN

	PKCONFIGSERVSUSPENDMGR.GETRECORD (  INUCOCSSERV,
					    ORCCONFCOSE  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDCONFIGSERVSUSPEND;
























PROCEDURE GETRECORDCONSUMPTIONTYPE
(
    INUTCONCODI     IN              TIPOCONS.TCONCODI%TYPE,
    ORCTIPOCONS     IN OUT NOCOPY   TIPOCONS%ROWTYPE
)
IS
BEGIN

	PKCONSUMPTIONTYPEMGR.GETRECORD (INUTCONCODI,
					ORCTIPOCONS  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDCONSUMPTIONTYPE;
























PROCEDURE GETRECORDCOSTCOMPONENT
(
    INUCOCOCODI     IN              COMPCOST.COCOCODI%TYPE,
    ORCCOMPCOST     IN OUT NOCOPY   COMPCOST%ROWTYPE
)
IS
BEGIN

	PKCOSTCOMPONENTMGR.GETRECORD (  INUCOCOCODI,
					ORCCOMPCOST  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDCOSTCOMPONENT;
























PROCEDURE GETRECORDMEASUREUNIT
(
    IVCUNMECODI     IN              UNIDMEDI.UNMECODI%TYPE,
    ORCUNIDMEDI     IN OUT NOCOPY   UNIDMEDI%ROWTYPE
)
IS
BEGIN

	PKMEASUREUNITMGR.GETRECORD (IVCUNMECODI,
				    ORCUNIDMEDI  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDMEASUREUNIT;


























PROCEDURE GETRECORDMESSAGE
(
    IVCMENSDIVI     IN              MENSAJE.MENSDIVI%TYPE,
    IVCMENSMODU     IN              MENSAJE.MENSMODU%TYPE,
    INUMENSCODI     IN              MENSAJE.MENSCODI%TYPE,
    ORCMENSAJE      IN OUT NOCOPY   MENSAJE%ROWTYPE
)
IS
BEGIN

	PKMESSAGEMGR.GETRECORD (    IVCMENSDIVI,
				    IVCMENSMODU,
				    INUMENSCODI,
				    ORCMENSAJE  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDMESSAGE;
























PROCEDURE GETRECORDSERVICE
(
    INUSERVCODI     IN              SERVICIO.SERVCODI%TYPE,
    ORCSERVICIO     IN OUT NOCOPY   SERVICIO%ROWTYPE
)
IS
BEGIN

	PKSERVICEMGR.GETRECORD (INUSERVCODI,
				ORCSERVICIO  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDSERVICE;
























PROCEDURE GETRECORDSERVICETYPE
(
    IVCTISECODI     IN              TIPOSERV.TISECODI%TYPE,
    ORCTIPOSERV     IN OUT NOCOPY   TIPOSERV%ROWTYPE
)
IS
BEGIN

	PKSERVICETYPEMGR.GETRECORD (IVCTISECODI,
				    ORCTIPOSERV  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDSERVICETYPE;

























PROCEDURE GETRECORDSUBCATEGORY
(
    INUSUCACATE     IN              SUBCATEG.SUCACATE%TYPE,
    INUSUCACODI     IN              SUBCATEG.SUCACODI%TYPE,
    ORCSUBCATEG     IN OUT NOCOPY   SUBCATEG%ROWTYPE
)
IS
BEGIN


	PKSUBCATEGORYMGR.GETRECORD (INUSUCACATE,
				    INUSUCACODI,
				    ORCSUBCATEG  );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDSUBCATEGORY;
























PROCEDURE GETRECORDSUBSCRIBERPLAN
(
    INUPLSUCODI     IN              PLANSUSC.PLSUCODI%TYPE,
    ORCPLANSUSC     IN OUT NOCOPY   PLANSUSC%ROWTYPE
)
IS
BEGIN

	PKSUBSCRIBERPLANMGR.GETRECORD ( INUPLSUCODI,
					ORCPLANSUSC  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDSUBSCRIBERPLAN;























PROCEDURE SETCG_BILLPERIODRECORD
(
    IRCPERIFACT     IN	PERIFACT%ROWTYPE
)
IS
BEGIN

    GRCGC_PERIFACT := IRCPERIFACT ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_BILLPERIODRECORD;























PROCEDURE SETCG_BILLPLAN
(
    INUSESUPLFA     IN	SERVSUSC.SESUPLFA%TYPE
)
IS
BEGIN

    GNUGC_SESUPLFA := INUSESUPLFA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_BILLPLAN;























PROCEDURE SETCG_CATEGORY
(
    INUSESUCATE     IN	SERVSUSC.SESUCATE%TYPE
)
IS
BEGIN

    GNUGC_SESUCATE := INUSESUCATE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CATEGORY;























PROCEDURE SETCG_CONSUMPTIONCYCLE
(
    INUSESUCICO     IN	SERVSUSC.SESUCICO%TYPE
)
IS
BEGIN

    GNUGC_SESUCICO := INUSESUCICO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CONSUMPTIONCYCLE;






















PROCEDURE SETCG_USER
(
    INUUSUARIO     IN	CARGOS.CARGUSUA%TYPE
)
IS
BEGIN

    GNUGC_USUARIO := INUUSUARIO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_USER;






















PROCEDURE GETCG_USER
(
    ONUUSUARIO     OUT	CARGOS.CARGUSUA%TYPE
)
IS
BEGIN

    ONUUSUARIO := GNUGC_USUARIO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_USER;






















PROCEDURE SETCG_TERMINAL
(
    ISBTERMINAL     IN SA_TERMINAL.NAME%TYPE
)
IS
BEGIN

     GSBGC_TERMINAL := ISBTERMINAL ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_TERMINAL;






















PROCEDURE GETCG_TERMINAL
(
    OSBTERMINAL     OUT SA_TERMINAL.NAME%TYPE
)
IS
BEGIN

    OSBTERMINAL := GSBGC_TERMINAL ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_TERMINAL;






















PROCEDURE SETCG_PROGRAM
(
    INUPROGRAMA     IN	CARGOS.CARGPROG%TYPE
)
IS
BEGIN

    GNUGC_PROGRAMA := INUPROGRAMA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_PROGRAM;






















PROCEDURE GETCG_PROGRAM
(
    ONUPROGRAMA     OUT	CARGOS.CARGPROG%TYPE
)
IS
BEGIN

    ONUPROGRAMA := GNUGC_PROGRAMA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_PROGRAM;






















PROCEDURE SETCG_TRACKPROCESSID
(
    ISBTRACKID     IN	ESTAPROG.ESPRPROG%TYPE
)
IS
BEGIN

    GSBGC_TRACKID := ISBTRACKID ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_TRACKPROCESSID;






















PROCEDURE GETCG_TRACKPROCESSID
(
    OSBTRACKID     OUT	ESTAPROG.ESPRPROG%TYPE
)
IS
BEGIN

    OSBTRACKID := GSBGC_TRACKID ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_TRACKPROCESSID;






















PROCEDURE SETCG_CURRDATE
(
    IDTFECHA     IN	DATE
)
IS
BEGIN

    GDTGC_CURRDATE := IDTFECHA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CURRDATE;






















PROCEDURE GETCG_CURRDATE
(
    ODTFECHA     OUT	DATE
)
IS
BEGIN

    ODTFECHA := GDTGC_CURRDATE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_CURRDATE;






















PROCEDURE SETCG_ACCODATE
(
    IDTFECHA     IN	DATE
)
IS
BEGIN

    GDTGC_ACCODATE := IDTFECHA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_ACCODATE;






















PROCEDURE GETCG_ACCODATE
(
    ODTFECHA     OUT	DATE
)
IS
BEGIN

    ODTFECHA := GDTGC_ACCODATE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_ACCODATE;






















PROCEDURE SETCG_MEASUNIT
(
    ISBUNIMEDI     IN	UNIDMEDI.UNMECODI%TYPE
)
IS
BEGIN

    GDTGC_MEASUNIT := ISBUNIMEDI ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_MEASUNIT;






















PROCEDURE GETCG_MEASUNIT
(
    OSBUNIMEDI     OUT	UNIDMEDI.UNMECODI%TYPE
)
IS
BEGIN

    OSBUNIMEDI := GDTGC_MEASUNIT ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_MEASUNIT;























PROCEDURE SETCG_CDRCONS
(
    INUCONSEC     IN CARGOS.CARGCOLL%TYPE
)
IS
BEGIN

    GNUGC_CDRCONS := INUCONSEC ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CDRCONS;






















PROCEDURE GETCG_CDRCONS
(
    ONUCONSEC	OUT CARGOS.CARGCOLL%TYPE
)
IS
BEGIN

    ONUCONSEC := GNUGC_CDRCONS ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_CDRCONS;






















PROCEDURE SETCG_UNITS
(
    INUUNIDADES     IN	CARGOS.CARGUNID%TYPE
)
IS
BEGIN

    GNUCG_CARGUNID := INUUNIDADES ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_UNITS;






















PROCEDURE GETCG_UNITS
(
    ONUUNIDADES	OUT	CARGOS.CARGUNID%TYPE
)
IS
BEGIN

    ONUUNIDADES := GNUCG_CARGUNID ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_UNITS;






















PROCEDURE SETCG_SUPPDOCU
(
    ISBDOCUMENTO     IN	CARGOS.CARGDOSO%TYPE
)
IS
BEGIN

    GNUCG_CARGDOSO := ISBDOCUMENTO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_SUPPDOCU;






















PROCEDURE GETCG_SUPPDOCU
(
    OSBDOCUMENTO	OUT	CARGOS.CARGDOSO%TYPE
)
IS
BEGIN

    OSBDOCUMENTO := GNUCG_CARGDOSO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_SUPPDOCU;























PROCEDURE SETCG_CONCEPT
(
    INUCONCCODI     IN	CONCEPTO.CONCCODI%TYPE
)
IS
BEGIN

    GNUGC_CONCCODI := INUCONCCODI ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CONCEPT;























PROCEDURE SETCG_INSTALLDATE
(
    IDTSESUFEIN     IN	SERVSUSC.SESUFEIN%TYPE
)
IS
BEGIN

    GDTGC_SESUFEIN := IDTSESUFEIN ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_INSTALLDATE;























PROCEDURE SETCG_QUITDATE
(
    IDTSESUFERE     IN	SERVSUSC.SESUFERE%TYPE
)
IS
BEGIN

    GDTGC_SESUFERE := IDTSESUFERE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_QUITDATE;
























PROCEDURE SETCG_LOCALITY
(
    INUSESULOCA     IN	SERVSUSC.SESULOCA%TYPE
)
IS
BEGIN

    GNUGC_SESULOCA := INUSESULOCA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_LOCALITY;























PROCEDURE SETCG_SERVICE
(
    INUSESUSERV     IN	SERVSUSC.SESUSERV%TYPE
)
IS
BEGIN

    GNUGC_SESUSERV := INUSESUSERV ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_SERVICE;























PROCEDURE SETCG_STATE
(
    INUSESUDEPA     IN	SERVSUSC.SESUDEPA%TYPE
)
IS
BEGIN

    GNUGC_SESUDEPA := INUSESUDEPA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_STATE;























PROCEDURE SETCG_SUBCATEGORY
(
    INUSESUSUCA     IN	SERVSUSC.SESUSUCA%TYPE
)
IS
BEGIN

    GNUGC_SESUSUCA := INUSESUSUCA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_SUBCATEGORY;























PROCEDURE SETCG_SUBSSERVICE
(
    INUSESUNUSE     IN	SERVSUSC.SESUNUSE%TYPE
)
IS
BEGIN

    GNUGC_SESUNUSE := INUSESUNUSE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_SUBSSERVICE;























PROCEDURE SETCG_SUBSCRIBER
(
    INUSESUSUSC     IN	SERVSUSC.SESUSUSC%TYPE
)
IS
BEGIN

    GNUGC_SESUSUSC := INUSESUSUSC ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_SUBSCRIBER;
























PROCEDURE SETCG_COMPONENT
(
    INUCOMPONENTE     IN	COMPSESU.CMSSIDCO%TYPE
)
IS
BEGIN

    GNUGC_CMSSIDCO := INUCOMPONENTE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_COMPONENT;



























PROCEDURE GETCG_ADDRESSZONE
(
    OSBZONE           OUT	AB_ADDRESS.IS_URBAN%TYPE
)
IS
    
    NUPRODUCT                   SERVSUSC.SESUNUSE%TYPE;

    
    NUPRODUCTID                 PR_PRODUCT.ADDRESS_ID%TYPE;
BEGIN

    

    
    GETCG_SUBSSERVICE( NUPRODUCT );

    
    IF NUPRODUCT IS NULL THEN
        RETURN;
    END IF;

    
    OSBZONE := PR_BOPRODUCT.FSBGETADDRTYPE(NUPRODUCT);

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_ADDRESSZONE;


























FUNCTION FBLEXISTBILLINGMESSAGE
(
    INUMEFADEPA     IN              MENSFACT.MEFADEPA%TYPE,
    INUMEFALOCA     IN              MENSFACT.MEFALOCA%TYPE,
    INUMEFACODI     IN              MENSFACT.MEFACODI%TYPE,
    INUMEFATICL     IN              MENSFACT.MEFATICL%TYPE
)
RETURN BOOLEAN
IS
    
    NUIDXH	        	NUMBER := 0;
BEGIN

    IF ( PKBILLINGMESSAGEMGR.FBLEXISTRECORD(INUMEFADEPA,
					    INUMEFALOCA,
					    INUMEFACODI,
					    INUMEFATICL ) ) THEN
    	RETURN (TRUE);
    END IF;

    RETURN (FALSE);
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FBLEXISTBILLINGMESSAGE;
























PROCEDURE GETRECORDCHARGECAUSE
(
    INUCACACODI     IN              CAUSCARG.CACACODI%TYPE,
    ORCCAUSCARG     IN OUT NOCOPY   CAUSCARG%ROWTYPE
)
IS
BEGIN

	PKCHARGECAUSEMGR.GETRECORD (    INUCACACODI,
					ORCCAUSCARG  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDCHARGECAUSE;
























PROCEDURE GETRECORDBILLINGPERIODCURRENT
(
    INUPEFACICL     IN              PERIFACT.PEFACICL%TYPE,
    ORCPERIFACT     IN OUT NOCOPY   PERIFACT%ROWTYPE
)
IS
BEGIN


	PKBILLINGPERIODMGR.GETRECORDCURRENT ( INUPEFACICL,
					      ORCPERIFACT  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDBILLINGPERIODCURRENT;























PROCEDURE GETRECORDROUTE
(
    INUCENTCODI     IN              GST_RUTA.RUTACENT%TYPE,
    ISBRUTACODI     IN              GST_RUTA.RUTACODI%TYPE,
    ORCRUTA         IN OUT NOCOPY   GST_RUTA%ROWTYPE
)
IS
BEGIN

	PKBCGST_RUTA.GETRECORD ( INUCENTCODI,
	                         ISBRUTACODI,
                             ORCRUTA  );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRECORDROUTE;
























PROCEDURE SETCG_SUSPENSIONSTATUS
(
    INUSESUESCO IN  SERVSUSC.SESUESCO%TYPE
)
IS
BEGIN

    PKGENERALSERVICES.TRACEDATA ('pkInstanceDataMgr.SetCG_SuspensionStatus');

    GNUGC_SESUESCO := INUSESUESCO;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_SUSPENSIONSTATUS;
























PROCEDURE GETCG_SUSPENSIONSTATUS
(
    ONUSESUESCO OUT  SERVSUSC.SESUESCO%TYPE
)
IS
BEGIN

    PKGENERALSERVICES.TRACEDATA ('pkInstanceDataMgr.GetCG_SuspensionStatus');

    ONUSESUESCO := GNUGC_SESUESCO;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_SUSPENSIONSTATUS;




















PROCEDURE SETCG_PRODUCTRECORD
(
IRCSERVSUSC	IN	SERVSUSC%ROWTYPE
)
IS
BEGIN

    GRCGC_SERVSUSC := IRCSERVSUSC;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_PRODUCTRECORD;





















PROCEDURE GETCG_PRODUCTRECORD
(
    ORCSERVSUSC	OUT	SERVSUSC%ROWTYPE
)
IS
BEGIN

    ORCSERVSUSC := GRCGC_SERVSUSC;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_PRODUCTRECORD;




















PROCEDURE SETCG_CONSECUTIVEMODE
(
	INUMODO	IN	NUMBER
)
IS
BEGIN

    GNUCG_MODOCONSECUTIVO := INUMODO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CONSECUTIVEMODE;




















PROCEDURE GETCG_CONSECUTIVEMODE
(
	ONUMODO	OUT	NUMBER
)
IS
BEGIN

    ONUMODO := GNUCG_MODOCONSECUTIVO;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_CONSECUTIVEMODE;
























PROCEDURE SETCG_CONSECCACHE
(
	INUCONSEC	IN	CARGOS.CARGCODO%TYPE DEFAULT NULL
)
IS
BEGIN

    
    
    IF (INUCONSEC IS NULL) THEN
    	GNUCG_CONSECCACHE := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
				('sq_Cargos_Cargcodo');
    ELSE
	    GNUCG_CONSECCACHE := INUCONSEC ;
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CONSECCACHE;




















PROCEDURE GETCG_CONSECCACHE
(
	ONUCONSECUTIVO	OUT	NUMBER
)
IS
BEGIN

    ONUCONSECUTIVO := GNUCG_CONSECCACHE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_CONSECCACHE;























PROCEDURE SETCG_CONSUMDATATABLE
(
	ITBTABLACONSUMO	IN PKBORATINGMEMORYMGR.TYTBCONSPECOTICO
)
IS
BEGIN

    
    GTBCG_TABLACONSUMO.DELETE;

    GTBCG_TABLACONSUMO := ITBTABLACONSUMO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CONSUMDATATABLE;
























PROCEDURE GETCG_CONSUMDATATABLE
(
	OTBTABLACONSUMO	OUT    PKBORATINGMEMORYMGR.TYTBCONSPECOTICO
)
IS
BEGIN

    
    IF (GTBCG_TABLACONSUMO.FIRST IS NULL) THEN
    	RETURN;
    END IF;

    OTBTABLACONSUMO := GTBCG_TABLACONSUMO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_CONSUMDATATABLE;






















FUNCTION FSBVERSION  RETURN VARCHAR2 IS
BEGIN

    
    RETURN (CSBVERSION);
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FSBVERSION;




















PROCEDURE SETIA_STRINGVALUE
(
    ISBIASTRINGVALUE    IN  VARCHAR2
)
IS
BEGIN

    
    GSBSTRINGVALUE := ISBIASTRINGVALUE;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETIA_STRINGVALUE;




















PROCEDURE GETIA_STRINGVALUE
(
    OSBIASTRINGVALUE    OUT  VARCHAR2
)
IS
BEGIN

    
    OSBIASTRINGVALUE := GSBSTRINGVALUE;

    
    GSBSTRINGVALUE := NULL;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETIA_STRINGVALUE;




















PROCEDURE SETIA_FIELDVALUEDESCRIPTION
(
    ISBDESCRIPTION  IN VARCHAR2
)
IS
BEGIN

    
    GSBFIELDVALUEDESCRIPTION := ISBDESCRIPTION;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETIA_FIELDVALUEDESCRIPTION;




















PROCEDURE GETIA_FIELDVALUEDESCRIPTION
(
    OSBDESCRIPTION  OUT VARCHAR2
)
IS
BEGIN

    
    OSBDESCRIPTION := GSBFIELDVALUEDESCRIPTION;

    GSBFIELDVALUEDESCRIPTION := NULL;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETIA_FIELDVALUEDESCRIPTION;






















PROCEDURE SETCG_DEFERREDRECORD
(
	IRCDIFERIDO	IN	DIFERIDO%ROWTYPE
)
IS
BEGIN

    GRCGC_DIFERIDO := IRCDIFERIDO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_DEFERREDRECORD ;






















PROCEDURE GETCG_DEFERREDRECORD
(
	ORCDIFERIDO	OUT	DIFERIDO%ROWTYPE
)
IS
BEGIN

    ORCDIFERIDO := GRCGC_DIFERIDO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_DEFERREDRECORD ;






















PROCEDURE SETCG_INCLUDEDUNIT
(
    INUSESUBOUI	IN	SERVSUSC.SESUBOUI%TYPE
)
IS
BEGIN

    GNUGC_SESUBOUI := INUSESUBOUI ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_INCLUDEDUNIT ;























PROCEDURE GETCG_INCLUDEDUNIT
(
    ONUSESUBOUI	OUT	SERVSUSC.SESUBOUI%TYPE
)
IS
BEGIN

    ONUSESUBOUI := GNUGC_SESUBOUI ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_INCLUDEDUNIT ;





















PROCEDURE SETCG_GENERATIONDATE
(
	IDTFECHA	IN	DATE
)
IS
BEGIN

    GDTGC_GENERATIONDATE := IDTFECHA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_GENERATIONDATE ;





















PROCEDURE GETCG_GENERATIONDATE
(
	ODTFECHA	OUT	DATE
)
IS
BEGIN

    ODTFECHA := GDTGC_GENERATIONDATE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_GENERATIONDATE ;






















PROCEDURE SETCG_UNITSTAXFREE
(
	INUUNIDADES	IN	NUMBER
)
IS
BEGIN

    GNUGC_UNITSTAXFREE := INUUNIDADES ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_UNITSTAXFREE ;






















PROCEDURE GETCG_UNITSTAXFREE
(
	ONUUNIDADES	OUT	NUMBER
)
IS
BEGIN

    ONUUNIDADES := GNUGC_UNITSTAXFREE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_UNITSTAXFREE ;






















PROCEDURE SETCG_PRODTARIFFDATE
(
	IDTFECHA	IN	DATE
)
IS
BEGIN

    GDTGC_PRODTARIFFDATE := IDTFECHA ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_PRODTARIFFDATE ;






















PROCEDURE GETCG_PRODTARIFFDATE
(
	ODTFECHA	OUT	DATE
)
IS
BEGIN

    ODTFECHA := GDTGC_PRODTARIFFDATE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_PRODTARIFFDATE ;























PROCEDURE SETCG_WARRANTYROLE
(
	ISBROLE	IN	SERVSUSC.SESUROGA%TYPE
)
IS
BEGIN

    GSBGC_WARRANTYROLE := ISBROLE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_WARRANTYROLE ;





















PROCEDURE SETCG_CONSUMPERIOD
(
	INUCONSUMPERIOD	IN	PERICOSE.PECSCONS%TYPE
)
IS
BEGIN

    GNUCG_CONSUMPERIOD := INUCONSUMPERIOD ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CONSUMPERIOD ;























PROCEDURE GETCG_WARRANTYROLE
(
	OSBROLE	OUT	SERVSUSC.SESUROGA%TYPE
)
IS
BEGIN

    OSBROLE := GSBGC_WARRANTYROLE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_WARRANTYROLE ;




























PROCEDURE GETRECORDLOCALITY
(
    INULOCADEPA IN LOCALIDA.LOCADEPA%TYPE,
    INULOCACODI IN LOCALIDA.LOCACODI%TYPE,
    ORCLOCALIDA IN OUT NOCOPY LOCALIDA%ROWTYPE
)
IS
BEGIN

    PKBCLOCALIDA.GETRECORD
    (
        INULOCADEPA,
        INULOCACODI,
        ORCLOCALIDA
    );

EXCEPTION
    WHEN LOGIN_DENIED THEN
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END GETRECORDLOCALITY;






















PROCEDURE GETCG_CONSUMPERIOD
(
	ONUCONSUMPERIOD	OUT	PERICOSE.PECSCONS%TYPE
)
IS
BEGIN

    ONUCONSUMPERIOD := GNUCG_CONSUMPERIOD ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END GETCG_CONSUMPERIOD ;






















PROCEDURE GETCG_BESTPATHPLAN
(
    ONUPLAN	OUT PLANSUSC.PLSUCODI%TYPE
)
IS
BEGIN

    ONUPLAN := GNUCG_BESTPATHPLAN ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END GETCG_BESTPATHPLAN ;






















PROCEDURE SETCG_BESTPATHPLAN
(
	INUPLAN	IN PLANSUSC.PLSUCODI%TYPE
)
IS
BEGIN

    GNUCG_BESTPATHPLAN := INUPLAN ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END SETCG_BESTPATHPLAN ;



















PROCEDURE GETTG_EXEMODE
(
    OSBTAXLIQEXEMODE  OUT VARCHAR2
)
IS
BEGIN

    OSBTAXLIQEXEMODE := GSBTAXLIQEXEMODE;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETTG_EXEMODE;


















PROCEDURE SETTG_EXEMODE
(
    ISBTAXLIQEXEMODE  IN VARCHAR2
)
IS
BEGIN

    GSBTAXLIQEXEMODE := ISBTAXLIQEXEMODE;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETTG_EXEMODE;


















PROCEDURE SETTG_PACKAGE
(
    INUPACKAGEID    IN  NUMBER
)
IS
BEGIN

    GNUPACKAGEID := INUPACKAGEID;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETTG_PACKAGE;


















PROCEDURE GETTG_PACKAGE
(
    ONUPACKAGEID    OUT NUMBER
)
IS
BEGIN

    ONUPACKAGEID := GNUPACKAGEID;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETTG_PACKAGE;


















PROCEDURE SETTG_MOTIVE
(
    INUMOTIVEID IN NUMBER
)
IS
BEGIN

    GNUMOTIVEID := INUMOTIVEID;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETTG_MOTIVE;


















PROCEDURE GETTG_MOTIVE
(
    ONUMOTIVEID    OUT NUMBER
)
IS
BEGIN

    ONUMOTIVEID := GNUMOTIVEID;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETTG_MOTIVE;


















PROCEDURE GETTG_SUPPDOC
(
    OSBSUPPDOC    OUT VARCHAR2
)
IS
BEGIN

    OSBSUPPDOC := GSBSUPPDOC;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETTG_SUPPDOC;


















PROCEDURE SETTG_SUPPDOC
(
    ISBSUPPDOC IN VARCHAR2
)
IS
BEGIN

    GSBSUPPDOC := ISBSUPPDOC;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETTG_SUPPDOC;


















PROCEDURE GETTG_PROGRAM
(
    ONUPROGRAM    OUT NUMBER
)
IS
BEGIN

    ONUPROGRAM := GNUPROGRAM;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETTG_PROGRAM;


















PROCEDURE SETTG_PROGRAM
(
    INUPROGRAM IN NUMBER
)
IS
BEGIN

    GNUPROGRAM := INUPROGRAM;


EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETTG_PROGRAM;


















PROCEDURE GETTG_TAXPERC
(
    ONUTAXPERC   OUT IMPUCONC.IPCOPOIM%TYPE
)
IS
BEGIN

    ONUTAXPERC:= GNUTAXPERC;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETTG_TAXPERC;


















PROCEDURE SETTG_TAXPERC
(
    INUTAXPERC IMPUCONC.IPCOPOIM%TYPE
)
IS
BEGIN

    GNUTAXPERC:= INUTAXPERC;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETTG_TAXPERC;






















PROCEDURE SETCG_FOREIGNMONEYTYPE
(
    INUTYPE     IN GST_TIPOMONE.TIMOCODI%TYPE
)
IS
BEGIN

    GNUGC_CARGTIMO := INUTYPE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_FOREIGNMONEYTYPE;






















PROCEDURE GETCG_FOREIGNMONEYTYPE
(
    ONUTYPE	OUT GST_TIPOMONE.TIMOCODI%TYPE
)
IS
BEGIN

    ONUTYPE := GNUGC_CARGTIMO ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_FOREIGNMONEYTYPE;























PROCEDURE SETCG_BASEVALUE
(
    INUBASEVALUE     IN CARGOS.CARGVABL%TYPE
)
IS
BEGIN

    GNUGC_CARGVABL := INUBASEVALUE;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_BASEVALUE;























PROCEDURE GETCG_BASEVALUE
(
    ONUBASEVALUE     OUT CARGOS.CARGVABL%TYPE
)
IS
BEGIN

    ONUBASEVALUE := GNUGC_CARGVABL ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_BASEVALUE;


















PROCEDURE SETCG_PACKAGE
(
    INUPACKAGEID    IN  NUMBER
)
IS

BEGIN

    GNUCG_PACKAGEID := INUPACKAGEID;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_PACKAGE;




















PROCEDURE GETCG_PACKAGE
(
    ONUPACKAGEID    OUT NUMBER
)
IS

BEGIN

    ONUPACKAGEID := GNUCG_PACKAGEID;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_PACKAGE;















PROCEDURE SETCG_DISCOUNTPERCENT
(
    INUDISCOUNTPERCENT    IN  CC_PLAN_FEATURES.DISCOUNT_PERCENTAGE%TYPE
)
IS
BEGIN
    GNUCG_DISCOUNTPERCENT := INUDISCOUNTPERCENT;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END;















PROCEDURE GETCG_DISCOUNTPERCENT
(
    ONUDISCOUNTPERCENT    OUT CC_PLAN_FEATURES.DISCOUNT_PERCENTAGE%TYPE
)
IS
BEGIN
    ONUDISCOUNTPERCENT := GNUCG_DISCOUNTPERCENT;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END;















PROCEDURE SETCG_DISCOUNTVALUE
(
    INUDISCOUNTVALUE    IN  CC_PLAN_FEATURES.DISCOUNT_VALUE%TYPE
)
IS
BEGIN
    GNUCG_DISCOUNTVALUE := INUDISCOUNTVALUE;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END;















PROCEDURE GETCG_DISCOUNTVALUE
(
    ONUDISCOUNTVALUE    OUT CC_PLAN_FEATURES.DISCOUNT_VALUE%TYPE
)
IS
BEGIN
    ONUDISCOUNTVALUE := GNUCG_DISCOUNTVALUE;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END;

























    PROCEDURE GETRECORDEVENTTYPE
        (
            INUTIPEVECODI     IN              LE_TIPOEVEN.TIEVCONS%TYPE,
            ORCTIPOEVENTO     IN OUT NOCOPY   LE_TIPOEVEN%ROWTYPE
        )
    IS
        
        
        
        
        
        
        
        
        

    BEGIN
    

        
    	LE_BOTIPOEVEN.OBTENERREGISTROCONS (INUTIPEVECODI,ORCTIPOEVENTO);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDEVENTTYPE;

    






















    PROCEDURE OBTENERESTADOSUSCRIPCION
    (
        ONUESTADO OUT  NUMBER
    )
    IS
    BEGIN
    
        ONUESTADO := GNUESTADOPROCSUSC;
    
    END OBTENERESTADOSUSCRIPCION ;

        

    























    PROCEDURE FIJARESTADOSUSCRIPCION
    (
        INUESTADO  IN  NUMBER
    )
    IS
    BEGIN
    
        GNUESTADOPROCSUSC := INUESTADO ;
    
    END FIJARESTADOSUSCRIPCION ;


    

















    FUNCTION FRCGETDEFERREDPLAN
    (
        INUDEFERREDPLAN IN  PLANDIFE.PLDICODI%TYPE
    )
    RETURN PLANDIFE%ROWTYPE
    IS
    BEGIN

        IF INUDEFERREDPLAN IS NULL THEN
            RETURN NULL;
        END IF;

        IF NOT GTBDEFERREDPLAN.EXISTS(INUDEFERREDPLAN) THEN

            GTBDEFERREDPLAN(INUDEFERREDPLAN) :=
                                    PKTBLPLANDIFE.FRCGETRECORD(INUDEFERREDPLAN);

        END IF;

        RETURN GTBDEFERREDPLAN(INUDEFERREDPLAN);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

    END FRCGETDEFERREDPLAN;


























    PROCEDURE GETRECORDCONSECUT
    (
            INUCONSEC         IN              CONSECUT.CONSCODI%TYPE,
            ORCCONSEC         IN OUT NOCOPY   CONSECUT%ROWTYPE
    )
    IS
    BEGIN
    

        
        ORCCONSEC := PKCONSECUTIVEMGR.FRCGETCONSECUT(INUCONSEC);


    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDCONSECUT;


























    PROCEDURE GETRECORDNUMEAUTO
    (
            INUNUMEAUTO         IN              NUMEAUTO.NUAUCONS%TYPE,
            ORCNUMEAUTO         IN OUT NOCOPY   NUMEAUTO%ROWTYPE
    )
    IS
    BEGIN
    

        
        PKBONUMEAUTO.GETAUTHNUMRECORD(INUNUMEAUTO,ORCNUMEAUTO);


    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDNUMEAUTO;


    























    PROCEDURE GETRECORDTIPOCOMP
    (
            INUTIPOCOMP        IN              TIPOCOMP.TICOCODI%TYPE,
            ORCTIPOCOMP        IN OUT NOCOPY   TIPOCOMP%ROWTYPE
    )
    IS
    BEGIN
    

        
        ORCTIPOCOMP := FA_BOTIPOCOMPROBANTE.FRCOBTENERREGTIPOCOMP(INUTIPOCOMP);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDTIPOCOMP;


    























    PROCEDURE GETRECORDPUNTEMIS
    (
            INUPUNTEMIS        IN              PUNTEMIS.PUEMCONS%TYPE,
            ORCPUNTEMIS        IN OUT NOCOPY   PUNTEMIS%ROWTYPE
    )
    IS
    BEGIN
    

        
        ORCPUNTEMIS := PKBOBROADCASTPOINT.FRCGETPUNTEMIS(INUPUNTEMIS);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDPUNTEMIS;

    























    PROCEDURE GETRECORDSYSTEM
    (
            INUSYSTEM       IN              SISTEMA.SISTCODI%TYPE,
            ORCSYSTEM       IN OUT NOCOPY   SISTEMA%ROWTYPE
    )
    IS
    BEGIN
    

        
        ORCSYSTEM := PKSYSTEMMGR.FRCGETSYSTEM(INUSYSTEM);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDSYSTEM;

    























    PROCEDURE GETRECORDFORMAT
    (
            INUFORMAT       IN              ED_FORMATO.FORMCODI%TYPE,
            ORCFORMAT       IN OUT NOCOPY   DAED_FORMATO.STYED_FORMATO
    )
    IS
    BEGIN
    

        
        ORCFORMAT := PKBOINSERTMGR.FRCGETFORMAT(INUFORMAT);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDFORMAT;


























    PROCEDURE GETRECORDSUBSCRIPTYPE
    (
            INUSUBSTYPE      IN              GE_SUBSCRIPTION_TYPE.SUBSCRIPTION_TYPE%TYPE,
            ORCSUBSTYPE      IN OUT NOCOPY   DAGE_SUBSCRIPTION_TYPE.STYGE_SUBSCRIPTION_TYPE
    )
    IS
    BEGIN
    

        
        ORCSUBSTYPE := GE_BOTIPOCONTRATO.FRCOBTENERREGTIPOCONT(INUSUBSTYPE);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDSUBSCRIPTYPE;


     























    PROCEDURE GETRECORDIDENTTYPE
    (
            INUIDENTTYPE      IN              GE_IDENTIFICA_TYPE.IDENT_TYPE_ID%TYPE,
            ORCIDENTTYPE      IN OUT NOCOPY   DAGE_IDENTIFICA_TYPE.STYGE_IDENTIFICA_TYPE
    )
    IS
    BEGIN
    

        
        ORCIDENTTYPE := GE_BOTIPOIDENTIFICACION.FRCOBTENERREGTIPOIDENT(INUIDENTTYPE);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDIDENTTYPE;

























    PROCEDURE GETRECORDAB_SEGMENT
    (
            INUSEGMENT      IN              AB_SEGMENTS.SEGMENTS_ID%TYPE,
            ORCSEGMENT      IN OUT NOCOPY   DAAB_SEGMENTS.STYAB_SEGMENTS
    )
    IS
    BEGIN
    

        
        ORCSEGMENT := AB_BOSEGMENT.FRCGETSEGMENT(INUSEGMENT);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDAB_SEGMENT;


    























    PROCEDURE GETRECORDAB_WAY_BY_LOCATION
    (
            INUWAY      IN              AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE,
            ORCWAY      IN OUT NOCOPY   DAAB_WAY_BY_LOCATION.STYAB_WAY_BY_LOCATION
    )
    IS
    BEGIN
    

        
        ORCWAY := AB_BOWAYBYLOCATION.FRCGETWAYBYLOCATION(INUWAY);


    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDAB_WAY_BY_LOCATION;

     























    PROCEDURE GETRECORDTHIRDPARTY
    (
            INUTHIRD        IN              TERCCOBR.TECOCODI%TYPE,
            ORCTHIRD        IN OUT NOCOPY   TERCCOBR%ROWTYPE
    )
    IS
    BEGIN
    

        
        FA_BCTERCCOBR.OBTREGTERCEROCOBRO(INUTHIRD,ORCTHIRD);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDTHIRDPARTY;





















    PROCEDURE SETRECORDPACKAGE
    (
        IRCPACKAGE      IN  DAMO_PACKAGES.STYMO_PACKAGES
    )
    IS
    BEGIN
        GRCPACKAGE := IRCPACKAGE;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END;






















    PROCEDURE GETRECORDPACKAGE
    (
        ORCPACKAGE      OUT DAMO_PACKAGES.STYMO_PACKAGES
    )
    IS
    BEGIN
        ORCPACKAGE := GRCPACKAGE;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END;




















    PROCEDURE SETRECORDMOTIVE
    (
        IRCMOTIVE       IN  DAMO_MOTIVE.STYMO_MOTIVE
    )
    IS
    BEGIN
        GRCMOTIVE := IRCMOTIVE;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END;




















    PROCEDURE GETRECORDMOTIVE
    (
        ORCMOTIVE       OUT DAMO_MOTIVE.STYMO_MOTIVE
    )
    IS
    BEGIN

        ORCMOTIVE := GRCMOTIVE;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END;

    



















    PROCEDURE OBTPERACTUAL(
                            ONUPERICOSE OUT PERICOSE.PECSCONS%TYPE
                          )
    IS
    BEGIN
        
        ONUPERICOSE := GNUPERIODOACTUAL;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END OBTPERACTUAL;

    



















    PROCEDURE INSTANCIARPERACTUAL(
                                    INUPERICOSE IN  PERICOSE.PECSCONS%TYPE
                                 )
    IS
    BEGIN
        
        GNUPERIODOACTUAL := INUPERICOSE;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END INSTANCIARPERACTUAL;

    



















    PROCEDURE OBTFECHAINSCOMPONENTE(
                                    ODTFECHAINS OUT COMPSESU.CMSSFEIN%TYPE
                                   )
    IS
    BEGIN
        
        ODTFECHAINS := GDTFECHAINSTCOMPONENTE ;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END OBTFECHAINSCOMPONENTE;

    



















    PROCEDURE INSTFECHAINSCOMPONENTE(
                                        IDTFECHAINS IN  COMPSESU.CMSSFEIN%TYPE
                                    )
    IS
    BEGIN
        
        GDTFECHAINSTCOMPONENTE := IDTFECHAINS;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END INSTFECHAINSCOMPONENTE;

    



















    PROCEDURE OBTFECHARETCOMPONENTE(
                                    ODTFECHARET OUT COMPSESU.CMSSFERE%TYPE
                                   )
    IS
    BEGIN
        
        ODTFECHARET := GDTFECHARETCOMPONENTE ;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END OBTFECHARETCOMPONENTE;

    



















    PROCEDURE INSTFECHARETCOMPONENTE(
                                        IDTFECHARET IN  COMPSESU.CMSSFERE%TYPE
                                    )
    IS
    BEGIN
        
        GDTFECHARETCOMPONENTE := IDTFECHARET;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END INSTFECHARETCOMPONENTE;

    



















    PROCEDURE OBTCLASECOMPONENTE(
                                    ONUCLASECOMP OUT COMPSESU.CMSSCLSE%TYPE
                                )
    IS
    BEGIN
        
        ONUCLASECOMP := GNUCLASECOMPONENTE ;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END OBTCLASECOMPONENTE;

    



















    PROCEDURE INSTCLASECOMPONENTE(
                                    INUCLASECOMP    IN  COMPSESU.CMSSCLSE%TYPE
                                 )
    IS
    BEGIN
        
        GNUCLASECOMPONENTE := INUCLASECOMP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END INSTCLASECOMPONENTE;

    



















    PROCEDURE OBTTIPOCOMPONENTE(
                                    ONUTIPOCOMP OUT COMPSESU.CMSSTCOM%TYPE
                               )
    IS
    BEGIN
        
        ONUTIPOCOMP := GNUTIPOCOMPONENTE ;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END OBTTIPOCOMPONENTE;

    



















    PROCEDURE INSTTIPOCOMPONENTE(
                                    INUTIPOCOMP    IN  COMPSESU.CMSSTCOM%TYPE
                                )
    IS
    BEGIN
        
        GNUTIPOCOMPONENTE := INUTIPOCOMP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END INSTTIPOCOMPONENTE;

    



















    PROCEDURE OBTCOMPONENTEINCL(
                                    OSBCOMPINCL OUT COMPSESU.CMSSINCL%TYPE
                               )
    IS
    BEGIN
        
        OSBCOMPINCL := GSBCOMPONENTEINCL ;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END OBTCOMPONENTEINCL;

    



















    PROCEDURE INSTCOMPONENTEINCL(
                                    ISBCOMPINCL IN  COMPSESU.CMSSINCL%TYPE
                                )
    IS
    BEGIN
        
        GSBCOMPONENTEINCL := ISBCOMPINCL;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END INSTCOMPONENTEINCL;

    



















    PROCEDURE OBTCANTIDADCOMPONENTES(
                                        ONUCANTIDAD OUT NUMBER
                                    )
    IS
    BEGIN
        
        ONUCANTIDAD := GNUCANTCOMPONENTES ;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END OBTCANTIDADCOMPONENTES;

    



















    PROCEDURE INSTCANTCOMPONENTES(
                                    INUCANTIDAD    IN  NUMBER
                                 )
    IS
    BEGIN
        
        GNUCANTCOMPONENTES := INUCANTIDAD;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END INSTCANTCOMPONENTES;

    



















    PROCEDURE LIMPIARMEMORIACOMPONENTES
    IS
    BEGIN
        
        GNUGC_CMSSIDCO := NULL;
        GDTFECHAINSTCOMPONENTE := NULL;
        GDTFECHARETCOMPONENTE := NULL;
        GNUCLASECOMPONENTE := NULL;
        GNUTIPOCOMPONENTE := NULL;
        GSBCOMPONENTEINCL := NULL;
        GNUCANTCOMPONENTES := NULL;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END LIMPIARMEMORIACOMPONENTES;
    
    




















    PROCEDURE SETCG_TIPOPROC
    (
        ISBCARGTIPR    IN  CARGOS.CARGTIPR%TYPE
    )
    IS
    BEGIN
    
        GSBGC_CARGTIPR := ISBCARGTIPR;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END SETCG_TIPOPROC;

    




















    PROCEDURE GETCG_TIPOPROC
    (
        OSBCARGTIPR    OUT CARGOS.CARGTIPR%TYPE
    )
    IS
    BEGIN
    
        OSBCARGTIPR := GSBGC_CARGTIPR;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETCG_TIPOPROC;
    
    
























    PROCEDURE GETRECORDSUSCRIPC
    (
        INUSUSCCODI         IN              SUSCRIPC.SUSCCODI%TYPE,
        ORCSUSCRIPC         IN OUT NOCOPY   SUSCRIPC%ROWTYPE
    )
    IS
    BEGIN

        
        ORCSUSCRIPC := PKSUBSCRIBERMGR.FRCGETSUSCRIPC(INUSUSCCODI);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRECORDSUSCRIPC;




























PROCEDURE SETCG_PLANPROMO
(
    INUPLSUCODI     IN PLANSUSC.PLSUCODI%TYPE
)
IS
BEGIN

    GNUGC_PLSUCODI := INUPLSUCODI ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_PLANPROMO;




























PROCEDURE GETCG_PLANPROMO
(
    ONUPLSUCODI     OUT PLANSUSC.PLSUCODI%TYPE
)
IS
BEGIN

    ONUPLSUCODI := GNUGC_PLSUCODI ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_PLANPROMO;





















PROCEDURE GETDIRECCION
(
    ONUADDRESS_ID   OUT PR_PRODUCT.ADDRESS_ID%TYPE
)
IS
BEGIN

    ONUADDRESS_ID := GNUGC_ADDRESS_ID ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETDIRECCION;





















PROCEDURE SETDIRECCION
(
    INUADDRESS_ID   IN  PR_PRODUCT.ADDRESS_ID%TYPE
)
IS
BEGIN

    GNUGC_ADDRESS_ID := INUADDRESS_ID;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETDIRECCION;





















PROCEDURE GETCG_CONSUMPTIONTYPE
(
    ONUCONSUMPTIONTYPE  OUT CARGOS.CARGTICO%TYPE
)
IS
BEGIN

    ONUCONSUMPTIONTYPE := GNUCONSUMPTIONTYPE ;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETCG_CONSUMPTIONTYPE;





















PROCEDURE SETCG_CONSUMPTIONTYPE
(
    INUCONSUMPTIONTYPE  IN  CARGOS.CARGTICO%TYPE
)
IS
BEGIN

    GNUCONSUMPTIONTYPE := INUCONSUMPTIONTYPE;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETCG_CONSUMPTIONTYPE;






















PROCEDURE GETCG_DATETOLATECALC
(
    ODTDATETOLATECALC  OUT DATE
)
IS
BEGIN

    ODTDATETOLATECALC := GDTDATETOLATECALC;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETCG_DATETOLATECALC;






















PROCEDURE SETCG_DATETOLATECALC
(
    IDTDATETOLATECALC  IN DATE
)
IS
BEGIN

    GDTDATETOLATECALC := IDTDATETOLATECALC;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETCG_DATETOLATECALC;






















PROCEDURE SETCG_NOTGENLATEVALUE
(
    INUNOTGENLATEVALUE  IN NUMBER
)
IS
BEGIN

    GNUNOTGENLATEVALUE  := INUNOTGENLATEVALUE;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETCG_NOTGENLATEVALUE;






















PROCEDURE GETCG_LATEDAYS
(
    ONULATEDAYS  OUT NUMBER
)
IS
BEGIN

    ONULATEDAYS := GNULATEDAYS;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETCG_LATEDAYS;






















PROCEDURE SETCG_LATEDAYS
(
    INULATEDAYS  IN NUMBER
)
IS
BEGIN

    GNULATEDAYS   := INULATEDAYS;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETCG_LATEDAYS;






















PROCEDURE GETCG_LASTCONCEPTLIQDATE
(
    ODTLASTCONCEPTLIQDATE  OUT DATE
)
IS
BEGIN

    ODTLASTCONCEPTLIQDATE := GDTLASTCONCEPTLIQDATE;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETCG_LASTCONCEPTLIQDATE;






















PROCEDURE SETCG_LASTCONCEPTLIQDATE
(
    IDTLASTCONCEPTLIQDATE  IN DATE
)
IS
BEGIN

    GDTLASTCONCEPTLIQDATE := IDTLASTCONCEPTLIQDATE;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETCG_LASTCONCEPTLIQDATE;
























PROCEDURE GETCG_CONSPERIODRECORD
(
    ORCPERICOSE     OUT  PERICOSE%ROWTYPE
)
IS
BEGIN

    PKERRORS.PUSH('pkInstanceDataMgr.GetCG_ConsPeriodRecord');

    
    ORCPERICOSE := GRCPERICOSE;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
           RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
           PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
           PKERRORS.POP;
           RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCG_CONSPERIODRECORD;
























PROCEDURE SETCG_CONSPERIODRECORD
(
    IRCPERICOSE     IN  PERICOSE%ROWTYPE
)
IS
BEGIN

    PKERRORS.PUSH('pkInstanceDataMgr.SetCG_ConsPeriodRecord');

    
    GRCPERICOSE := IRCPERICOSE;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
           RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
           PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
           PKERRORS.POP;
           RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETCG_CONSPERIODRECORD;

    





















    PROCEDURE SETCG_BILLPERIODTOGEN
    (
        INUBILLINGPERIOD    IN  PERIFACT.PEFACODI%TYPE
    )
    IS
    BEGIN
    
        GNUCG_BILLPERIODTOGEN := INUBILLINGPERIOD;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END SETCG_BILLPERIODTOGEN;

    





















    PROCEDURE GETCG_BILLPERIODTOGEN
    (
        ONUBILLINGPERIOD    OUT  PERIFACT.PEFACODI%TYPE
    )
    IS
    BEGIN
    
        ONUBILLINGPERIOD := GNUCG_BILLPERIODTOGEN;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END GETCG_BILLPERIODTOGEN;


    





















    PROCEDURE SETCG_CHANGEPLANDATE
    (
        IDTCHANGEPLANDATE  IN  DATE
    )
    IS
    BEGIN
        GNUCG_CHANGEPLANDATE := IDTCHANGEPLANDATE;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    END SETCG_CHANGEPLANDATE;

    




















    PROCEDURE GETCG_CHANGEPLANDATE
    (
        ODTCHANGEPLANDATE  OUT  DATE
    )
    IS
    BEGIN
        ODTCHANGEPLANDATE := GNUCG_CHANGEPLANDATE;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    END GETCG_CHANGEPLANDATE;

    













    FUNCTION FNUGETPRODINSTNEIGHBOR
    RETURN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE
    IS
        
        
        
        NUPRODUCT   SERVSUSC.SESUNUSE%TYPE;
        NUADDRESS   PR_PRODUCT.ADDRESS_ID%TYPE;
        NUNEIGHBOR  AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
    BEGIN

        
        GETCG_SUBSSERVICE( NUPRODUCT ); 
        
        
        NUADDRESS := DAPR_PRODUCT.FNUGETADDRESS_ID( NUPRODUCT );
        
        
        IF ( NUADDRESS IS NOT NULL ) THEN
        
            
            NUNEIGHBOR := DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUADDRESS );
            
        END IF;
        
        RETURN NUNEIGHBOR;
        
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPRODINSTNEIGHBOR;
    
    













    FUNCTION FNUGETCOLLADDRNEIGHBOR
    RETURN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE
    IS
        
        
        
        RCPRODUCT   SERVSUSC%ROWTYPE;
        NUADDRESS   PR_PRODUCT.ADDRESS_ID%TYPE;
        NUNEIGHBOR  AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
    BEGIN

        
        GETCG_PRODUCTRECORD( RCPRODUCT );   

        
        NUADDRESS := PKTBLSUSCRIPC.FNUGETADDRESS_ID( RCPRODUCT.SESUSUSC );

        
        IF ( NUADDRESS IS NOT NULL ) THEN

            
            NUNEIGHBOR := DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUADDRESS );

        END IF;

        RETURN NUNEIGHBOR;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCOLLADDRNEIGHBOR;

END PKINSTANCEDATAMGR;