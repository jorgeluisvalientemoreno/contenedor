
CREATE OR REPLACE PACKAGE FA_BOCHARGECAUSES IS
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   FUNCTION FNUFGCACHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUFGCCCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUFGCLCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUFGFCCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FRFFRNFCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR;
   FUNCTION FRFFCLECHCAUSES
    RETURN PKCONSTANTE.TYREFCURSOR;
   FUNCTION FRFFGCOCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR;
   FUNCTION FRFFAFSCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR;
   FUNCTION FRFFROFCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR;
   FUNCTION FNUSALECHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUDEFERREDPAYMCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUSPECIALFINCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUREVSPEFINCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUPORTTRANSCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUWARRANTYDEPCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUPOSBALCANCELCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUCASHDESKDOCCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUPOSBALTRCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUWARRDEPAPPCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUANNNOPAYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUACCUMLATECHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUCONNECTIONCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUREQCOLLECTCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FRFMASSIVENOTESCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR;
   FUNCTION FNURENTQUOACCCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNURECONNECTIONCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUDEFTRANSCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUDIRECTSALESCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUEQUIPCOLLECTCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUORDERACCREDITCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUORDERFINANCINGCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUORDERDISTRCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUORDERCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUNOTETAXESCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUDEVOLUTIONCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUTHIRDPARTYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUPUNISHMENTCONST
    RETURN NUMBER;
   FUNCTION FNUGIVBACCHECKCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUDEFERREDCANCELCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUDEFERREDREFCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUADJINSOLVENCYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUREORGINSOLVENCYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUDEFERREDCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUDEFQUOTACHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNULIQINSOLVENCYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUGENERICCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUFPNOCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FRFFMLPNCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR;
   FUNCTION FNURESTRATCHARGECAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUDEBTNEGOCHARGECAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FNUCHARGESANULLCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
   FUNCTION FBOISDEFTRANSCHCAUSE( INUCHARGECAUSE IN CAUSCARG.CACACODI%TYPE )
    RETURN BOOLEAN;
   FUNCTION FBOISGIVBACKCHECKCAUSE( INUCHARGECAUSE IN CAUSCARG.CACACODI%TYPE )
    RETURN BOOLEAN;
   FUNCTION FRFRESTRATCHARGECAUSES
    RETURN PKCONSTANTE.TYREFCURSOR;
   FUNCTION FNUFACCTCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE;
END FA_BOCHARGECAUSES;
/


CREATE OR REPLACE PACKAGE BODY FA_BOCHARGECAUSES IS
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   CSBVERSION CONSTANT VARCHAR2( 10 ) := 'SAO234973';
   CNUFGCA CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 1;
   CNUFGCC CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 2;
   CNUFGCL CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 3;
   CNUFGFC CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 4;
   CNUFRNF CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 5;
   CNUFCLE CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 6;
   CNUFGCO CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 7;
   CNUFAFS CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 8;
   CNUFROF CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 9;
   CNUSALE CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 10;
   CNUFACCT CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 108;
   CNUBIL_ABONO_DIFERIDO CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 11;
   CNUCAUSCARG_FINAN_ESPECIAL CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 12;
   CNUCAUSCARG_REVE_FINAN_ESPE CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 13;
   CNUCAUSA_CARGO_TRANS_DEUDA CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 14;
   CNUCAUSA_CARGO_DEPOSITO_GARANT CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 15;
   CNUANULA_DEVOLUCION_SALDO_FAVO CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 16;
   CNUCAUSA_ANUL_DOC_CAJA CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 17;
   CNUCAUS_CARG_TRASLADO_SALDOFAV CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 18;
   CNUCAUS_CARG_NO_PAY CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 20;
   CNUCAUSA_CARGO_RECAMORA_ACUM CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 21;
   CNUDERECHO_CONEXION CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 22;
   CNUCAUSA_CARGO_COBRO_TRAMITE CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 23;
   CNUCAUSA_CARGO_RECONEX CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 26;
   CNUTRASLADO_DIFERIDO CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 27;
   CNUDIRECT_SALES CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 28;
   CNUCAUS_CHARGE_EQUIPM CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 29;
   CNUCAUSAL_CHARGE_ACRE CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 30;
   CNUCAUSAL_CHARGE_FINA CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 31;
   CNUCAUSAL_CHARGE_DIST CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 32;
   CNUCAUSAL_CHARGE_ORDER CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 33;
   CNUBIL_CAUS_IMPTO_NOTA CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 34;
   CNUPAFACADE CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 35;
   CNUPAFACADT CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 36;
   CNUPAFACCCE CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 38;
   CNUPAFACADI CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 39;
   CNUPAFAREDI CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 40;
   CNUADJINSOLVENCY CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 41;
   CNUREORGINSOLVENCY CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 42;
   CNUPAFACCPD CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 43;
   CNUDEFERREDQUOTA CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 44;
   CNULIQINSOLVENCY CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 46;
   CNUUTCC CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 37;
   CNUGENERIC CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 47;
   CNUFPNO CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 48;
   CNUFMLPN CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 49;
   CNUWARRDEPAPP CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 19;
   CNUMASSIVENOTES CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 24;
   CNURENT_QUOT_ACC CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 25;
   CNURESTRATIFICATION CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 68;
   CNUDEBT_NEGOT CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 88;
   CNUCHARGES_ANULL CONSTANT FA_CLASCACA.CLCCCODI%TYPE := 268;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( CSBVERSION );
   END FSBVERSION;
   FUNCTION FBOCAUSEINTABLE( ITBCAUSESTABLE IN PKTBLCAUSCARG.TYCACACODI, INUCAUSE IN CAUSCARG.CACACODI%TYPE )
    RETURN BOOLEAN
    IS
      BOCAUSEINTABLE BOOLEAN;
      NUINDEX BINARY_INTEGER;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fboCauseInTable' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fboCauseInTable', 5 );
      BOCAUSEINTABLE := PKCONSTANTE.FALSO;
      NUINDEX := ITBCAUSESTABLE.FIRST;
      LOOP
         EXIT WHEN NUINDEX IS NULL;
         IF ( ITBCAUSESTABLE( NUINDEX ) = INUCAUSE ) THEN
            BOCAUSEINTABLE := PKCONSTANTE.VERDADERO;
            PKERRORS.POP;
            RETURN ( BOCAUSEINTABLE );
         END IF;
         NUINDEX := ITBCAUSESTABLE.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fboCauseInTable', 5 );
      PKERRORS.POP;
      RETURN ( BOCAUSEINTABLE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FBOCAUSEINTABLE;
   FUNCTION FNUFGCACHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuFGCAChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuFGCAChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUFGCA, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuFGCAChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUFGCACHCAUSE;
   FUNCTION FNUFGCCCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuFGCCChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuFGCCChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUFGCC, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuFGCCChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUFGCCCHCAUSE;
   FUNCTION FNUFGCLCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuFGCLChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuFGCLChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUFGCL, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuFGCLChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUFGCLCHCAUSE;
   FUNCTION FNUFGFCCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuFGFCChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuFGFCChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUFGFC, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuFGFCChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUFGFCCHCAUSE;
   FUNCTION FRFFRNFCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR
    IS
      RFCAUSES PKCONSTANTE.TYREFCURSOR;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.frfFRNFChCauses' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.frfFRNFChCauses', 5 );
      RFCAUSES := FA_BCCHARGECAUSES.FRFGETCHARGECAUSE( CNUFRNF, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.frfFRNFChCauses', 5 );
      PKERRORS.POP;
      RETURN ( RFCAUSES );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRFFRNFCHCAUSES;
   FUNCTION FRFFCLECHCAUSES
    RETURN PKCONSTANTE.TYREFCURSOR
    IS
      RFCAUSES PKCONSTANTE.TYREFCURSOR;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.frfFCLEChCauses' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.frfFCLEChCauses', 5 );
      RFCAUSES := FA_BCCHARGECAUSES.FRFGETCHARGECAUSE( CNUFCLE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.frfFCLEChCauses', 5 );
      PKERRORS.POP;
      RETURN ( RFCAUSES );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRFFCLECHCAUSES;
   FUNCTION FRFFGCOCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR
    IS
      RFCAUSES PKCONSTANTE.TYREFCURSOR;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.frfFGCOChCauses' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.frfFGCOChCauses', 5 );
      RFCAUSES := FA_BCCHARGECAUSES.FRFGETCHARGECAUSE( CNUFGCO, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.frfFGCOChCauses', 5 );
      PKERRORS.POP;
      RETURN ( RFCAUSES );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRFFGCOCHCAUSES;
   FUNCTION FRFFAFSCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR
    IS
      RFCAUSES PKCONSTANTE.TYREFCURSOR;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.frfFAFSChCauses' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.frfFAFSChCauses', 5 );
      RFCAUSES := FA_BCCHARGECAUSES.FRFGETCHARGECAUSE( CNUFAFS, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.frfFAFSChCauses', 5 );
      PKERRORS.POP;
      RETURN ( RFCAUSES );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRFFAFSCHCAUSES;
   FUNCTION FRFFROFCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR
    IS
      RFCAUSES PKCONSTANTE.TYREFCURSOR;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.frfFROFChCauses' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.frfFROFChCauses', 5 );
      RFCAUSES := FA_BCCHARGECAUSES.FRFGETCHARGECAUSE( CNUFROF, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.frfFROFChCauses', 5 );
      PKERRORS.POP;
      RETURN ( RFCAUSES );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRFFROFCHCAUSES;
   FUNCTION FNUSALECHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuSALEChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuSALEChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUSALE, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuSALEChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUSALECHCAUSE;
   FUNCTION FNUDEFERREDPAYMCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuDeferredPaymChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuDeferredPaymChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUBIL_ABONO_DIFERIDO, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuDeferredPaymChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUDEFERREDPAYMCHCAUSE;
   FUNCTION FNUREVSPEFINCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuRevSpeFinChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuRevSpeFinChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSCARG_REVE_FINAN_ESPE, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuRevSpeFinChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUREVSPEFINCHCAUSE;
   FUNCTION FNUSPECIALFINCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuSpecialFinChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuSpecialFinChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSCARG_FINAN_ESPECIAL, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuSpecialFinChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUSPECIALFINCHCAUSE;
   FUNCTION FNUPORTTRANSCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuPortTransChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuPortTransChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSA_CARGO_TRANS_DEUDA, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuPortTransChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUPORTTRANSCHCAUSE;
   FUNCTION FNUWARRANTYDEPCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuWarrantyDepChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuWarrantyDepChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSA_CARGO_DEPOSITO_GARANT, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuWarrantyDepChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUWARRANTYDEPCHCAUSE;
   FUNCTION FNUPOSBALCANCELCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuPosBalCancelChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuPosBalCancelChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUANULA_DEVOLUCION_SALDO_FAVO, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuPosBalCancelChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUPOSBALCANCELCHCAUSE;
   FUNCTION FNUCASHDESKDOCCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuCashDeskDocChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuCashDeskDocChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSA_ANUL_DOC_CAJA, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuCashDeskDocChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUCASHDESKDOCCHCAUSE;
   FUNCTION FNUPOSBALTRCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuPosBalTrChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuPosBalTrChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUS_CARG_TRASLADO_SALDOFAV, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuPosBalTrChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUPOSBALTRCHCAUSE;
   FUNCTION FNUANNNOPAYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuAnnNoPayChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuAnnNoPayChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUS_CARG_NO_PAY, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuAnnNoPayChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUANNNOPAYCHCAUSE;
   FUNCTION FNUACCUMLATECHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuAccumLateChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuAccumLateChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSA_CARGO_RECAMORA_ACUM, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuAccumLateChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUACCUMLATECHCAUSE;
   FUNCTION FNUCONNECTIONCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuConnectionChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuConnectionChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUDERECHO_CONEXION, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuConnectionChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUCONNECTIONCHCAUSE;
   FUNCTION FNUREQCOLLECTCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuReqCollectChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuReqCollectChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSA_CARGO_COBRO_TRAMITE, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuReqCollectChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUREQCOLLECTCHCAUSE;
   FUNCTION FNURECONNECTIONCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuReConnectionChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuReConnectionChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSA_CARGO_RECONEX, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuReConnectionChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNURECONNECTIONCHCAUSE;
   FUNCTION FNUDEFTRANSCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuDefTransChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuDefTransChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUTRASLADO_DIFERIDO, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuDefTransChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUDEFTRANSCHCAUSE;
   FUNCTION FNUDIRECTSALESCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuDirectSalesChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuDirectSalesChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUDIRECT_SALES, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuDirectSalesChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUDIRECTSALESCHCAUSE;
   FUNCTION FNUNOTETAXESCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuNoteTaxesChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuNoteTaxesChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUBIL_CAUS_IMPTO_NOTA, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuNoteTaxesChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUNOTETAXESCHCAUSE;
   FUNCTION FNUEQUIPCOLLECTCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuEquipCollectChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuEquipCollectChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUS_CHARGE_EQUIPM, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuEquipCollectChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUEQUIPCOLLECTCHCAUSE;
   FUNCTION FNUORDERACCREDITCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuOrderAccreditChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuOrderAccreditChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSAL_CHARGE_ACRE, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuOrderAccreditChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUORDERACCREDITCHCAUSE;
   FUNCTION FNUORDERFINANCINGCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuOrderFinancingChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuOrderFinancingChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSAL_CHARGE_FINA, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuOrderFinancingChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUORDERFINANCINGCHCAUSE;
   FUNCTION FNUORDERDISTRCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuOrderDistrChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuOrderDistrChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSAL_CHARGE_DIST, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuOrderDistrChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUORDERDISTRCHCAUSE;
   FUNCTION FNUORDERCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuOrderChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuOrderChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCAUSAL_CHARGE_ORDER, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuOrderChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUORDERCHCAUSE;
   FUNCTION FNUDEVOLUTIONCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuDevolutionChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuDevolutionChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUPAFACADE, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuDevolutionChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUDEVOLUTIONCHCAUSE;
   FUNCTION FNUTHIRDPARTYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuThirdPartyChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuThirdPartyChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUPAFACADT, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuThirdPartyChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUTHIRDPARTYCHCAUSE;
   FUNCTION FNUGIVBACCHECKCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuGivBacCheckChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuGivBacCheckChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUPAFACCCE, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuGivBacCheckChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGIVBACCHECKCHCAUSE;
   FUNCTION FNUDEFERREDCANCELCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuDeferredCancelChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuDeferredCancelChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUPAFACADI, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuDeferredCancelChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUDEFERREDCANCELCHCAUSE;
   FUNCTION FNUDEFERREDREFCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuDeferredRefChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuDeferredRefChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUPAFAREDI, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuDeferredRefChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUDEFERREDREFCHCAUSE;
   FUNCTION FNUADJINSOLVENCYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuAdjInsolvencyChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuAdjInsolvencyChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUADJINSOLVENCY, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuAdjInsolvencyChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUADJINSOLVENCYCHCAUSE;
   FUNCTION FNUREORGINSOLVENCYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuReorgInsolvencyChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuReorgInsolvencyChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUREORGINSOLVENCY, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuReorgInsolvencyChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUREORGINSOLVENCYCHCAUSE;
   FUNCTION FNULIQINSOLVENCYCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuLiqInsolvencyChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuLiqInsolvencyChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNULIQINSOLVENCY, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuLiqInsolvencyChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNULIQINSOLVENCYCHCAUSE;
   FUNCTION FNUDEFERREDCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuDeferredChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuDeferredChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUPAFACCPD, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuDeferredChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUDEFERREDCHCAUSE;
   FUNCTION FNUDEFQUOTACHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuDefQuotaChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuDefQuotaChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUDEFERREDQUOTA, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuDefQuotaChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUDEFQUOTACHCAUSE;
   FUNCTION FNUGENERICCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuGenericChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuGenericChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUGENERIC, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuGenericChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGENERICCHCAUSE;
   FUNCTION FNUFPNOCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuFPNOChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuFPNOChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUFPNO, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuFPNOChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUFPNOCHCAUSE;
   FUNCTION FRFFMLPNCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR
    IS
      RFCAUSES PKCONSTANTE.TYREFCURSOR;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.frfFMLPNChCauses' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.frfFMLPNChCauses', 5 );
      RFCAUSES := FA_BCCHARGECAUSES.FRFGETCHARGECAUSE( CNUFMLPN, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.frfFMLPNChCauses', 5 );
      PKERRORS.POP;
      RETURN ( RFCAUSES );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRFFMLPNCHCAUSES;
   FUNCTION FNUWARRDEPAPPCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuWarrDepAppChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuWarrDepAppChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUWARRDEPAPP, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuWarrDepAppChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUWARRDEPAPPCHCAUSE;
   FUNCTION FRFMASSIVENOTESCHCAUSES( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN PKCONSTANTE.TYREFCURSOR
    IS
      RFCAUSES PKCONSTANTE.TYREFCURSOR;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.frfMassiveNotesChCauses' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.frfMassiveNotesChCauses', 5 );
      RFCAUSES := FA_BCCHARGECAUSES.FRFGETCHARGECAUSE( CNUMASSIVENOTES, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.frfMassiveNotesChCauses', 5 );
      PKERRORS.POP;
      RETURN ( RFCAUSES );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRFMASSIVENOTESCHCAUSES;
   FUNCTION FNURENTQUOACCCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuRentQuoAccChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuRentQuoAccChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNURENT_QUOT_ACC, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuRentQuoAccChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNURENTQUOACCCHCAUSE;
   FUNCTION FNUPUNISHMENTCONST
    RETURN NUMBER
    IS
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuPunishmentConst' );
      PKERRORS.POP;
      RETURN ( CNUUTCC );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUPUNISHMENTCONST;
   FUNCTION FNUDEBTNEGOCHARGECAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuDebtNegoChargeCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuDebtNegoChargeCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUDEBT_NEGOT, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuDebtNegoChargeCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUDEBTNEGOCHARGECAUSE;
   FUNCTION FNURESTRATCHARGECAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuRestratChargeCause' );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNURESTRATIFICATION, INUPRODTYPE );
      PKERRORS.POP;
      RETURN NUCHARGECAUSE;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNURESTRATCHARGECAUSE;
   FUNCTION FBOISDEFTRANSCHCAUSE( INUCHARGECAUSE IN CAUSCARG.CACACODI%TYPE )
    RETURN BOOLEAN
    IS
      BOISVALID BOOLEAN;
      TBCHARGECAUSES PKTBLCAUSCARG.TYCACACODI;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fboIsDefTransChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fboIsDefTransChCause', 5 );
      BOISVALID := PKCONSTANTE.FALSO;
      TBCHARGECAUSES := FA_BCCHARGECAUSES.FTBGETCHARGECAUSE( CNUTRASLADO_DIFERIDO );
      BOISVALID := FBOCAUSEINTABLE( TBCHARGECAUSES, INUCHARGECAUSE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fboIsDefTransChCause', 5 );
      PKERRORS.POP;
      RETURN ( BOISVALID );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FBOISDEFTRANSCHCAUSE;
   FUNCTION FBOISGIVBACKCHECKCAUSE( INUCHARGECAUSE IN CAUSCARG.CACACODI%TYPE )
    RETURN BOOLEAN
    IS
      BOISVALID BOOLEAN;
      TBCHARGECAUSES PKTBLCAUSCARG.TYCACACODI;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fboIsGivBackCheckCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fboIsGivBackCheckCause', 5 );
      BOISVALID := PKCONSTANTE.FALSO;
      TBCHARGECAUSES := FA_BCCHARGECAUSES.FTBGETCHARGECAUSE( CNUPAFACCCE );
      BOISVALID := FBOCAUSEINTABLE( TBCHARGECAUSES, INUCHARGECAUSE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fboIsGivBackCheckCause', 5 );
      PKERRORS.POP;
      RETURN ( BOISVALID );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FBOISGIVBACKCHECKCAUSE;
   FUNCTION FRFRESTRATCHARGECAUSES
    RETURN PKCONSTANTE.TYREFCURSOR
    IS
      RFCAUSES PKCONSTANTE.TYREFCURSOR;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.frfRestratChargeCauses' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.frfRestratChargeCauses', 5 );
      RFCAUSES := FA_BCCHARGECAUSES.FRFGETCHARGECAUSE( CNURESTRATIFICATION );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.frfRestratChargeCauses', 5 );
      PKERRORS.POP;
      RETURN ( RFCAUSES );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRFRESTRATCHARGECAUSES;
   FUNCTION FNUFACCTCHCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuFACCTChCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuFACCTChCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUFACCT, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuFACCTChCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUFACCTCHCAUSE;
   FUNCTION FNUCHARGESANULLCAUSE( INUPRODTYPE IN FA_CACACLTP.CCTPSERV%TYPE )
    RETURN CAUSCARG.CACACODI%TYPE
    IS
      NUCHARGECAUSE CAUSCARG.CACACODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'FA_BOChargeCauses.fnuChargesAnullCause' );
      UT_TRACE.TRACE( 'Inicia FA_BOChargeCauses.fnuChargesAnullCause', 5 );
      NUCHARGECAUSE := FA_BCCHARGECAUSES.FNUGETCHARGECAUSE( CNUCHARGES_ANULL, INUPRODTYPE );
      UT_TRACE.TRACE( 'Finaliza FA_BOChargeCauses.fnuChargesAnullCause', 5 );
      PKERRORS.POP;
      RETURN ( NUCHARGECAUSE );
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUCHARGESANULLCAUSE;
END FA_BOCHARGECAUSES;
/


