PACKAGE BODY FM_BORequest
IS
    


















































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO221341';

    CSBTAGGESTIONPNO            CONSTANT VARCHAR2(50) := 'P_GESTION_ADMINISTRATIVA_PNO_288';
    CSBTAGPRODMOTI              CONSTANT VARCHAR2(50) := 'M_GESTION_ADMINISTRATIVA_PNO_65';

    
    
    
    CSBTAGCOMMENT               CONSTANT VARCHAR2(50) := 'Fraude ';

    
    
    

    
    
    


    












    FUNCTION FSBGETCOMMENTRESTRICTION
    (
        INUPOSSIBLENTL   IN  FM_POSSIBLE_NTL.PRODUCT_ID%TYPE
    )
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN CSBTAGCOMMENT || INUPOSSIBLENTL;
    END FSBGETCOMMENTRESTRICTION;

    














    FUNCTION FNUNTLHASSUSCRIBER
    (
        INUPACKAGEID        IN      FM_POSSIBLE_NTL.PACKAGE_ID%TYPE
    )
    RETURN NUMBER
    IS
        NUNTL       FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE;
    BEGIN

        NUNTL := FM_BCREQUEST.FNUNTLBYPACKAGE(INUPACKAGEID);
        
        IF DAFM_POSSIBLE_NTL.FNUGETPRODUCT_ID(NUNTL) IS NULL OR
           DAFM_POSSIBLE_NTL.FNUGETTCONCODI(NUNTL) IS NULL OR
           DAFM_POSSIBLE_NTL.FNUGETCOSSELME(NUNTL) IS NULL THEN
            RETURN GE_BOCONSTANTS.CNUFALSE;
        ELSE
            RETURN GE_BOCONSTANTS.CNUTRUE;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            RETURN GE_BOCONSTANTS.CNUFALSE;
    END FNUNTLHASSUSCRIBER;


    












    PROCEDURE NTLPRODUCTBYPACK
    (
        INUPACKAGEID        IN      FM_POSSIBLE_NTL.PACKAGE_ID%TYPE,
        ONUPRODUCTID        OUT     FM_POSSIBLE_NTL.PRODUCT_ID%TYPE
    )
    IS
    BEGIN

        ONUPRODUCTID := DAFM_POSSIBLE_NTL.FNUGETPRODUCT_ID(FM_BCREQUEST.FNUNTLBYPACKAGE(INUPACKAGEID));

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    













    FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

    













    PROCEDURE NTLHASREQUEST
    (
        INUPOSSIBLENTL      IN      FM_POSSIBLE_NTL.PACKAGE_ID%TYPE,
        OSBHASREQUEST       OUT     VARCHAR2
    )
    IS
    BEGIN

        IF DAFM_POSSIBLE_NTL.FNUGETPACKAGE_ID(INUPOSSIBLENTL, 0) IS NULL THEN
            OSBHASREQUEST := GE_BOCONSTANTS.CSBNO;
        ELSE
            OSBHASREQUEST := GE_BOCONSTANTS.CSBYES;
        END IF;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    













    PROCEDURE GETNTLDATA
    (
        INUPOSSIBLENTL      IN      FM_POSSIBLE_NTL.PACKAGE_ID%TYPE,
        ONUSUBSCRIBERID     OUT     GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        OSBNTLTYPE          OUT     FM_POSSIBLE_NTL.NTL_TYPE%TYPE,
        ONUPRODUCT          OUT     FM_POSSIBLE_NTL.PRODUCT_ID%TYPE,
        ONUMEASUREELEMENT   OUT     FM_POSSIBLE_NTL.COSSELME%TYPE,
        ONUCONTRACT         OUT     SUSCRIPC.SUSCCODI%TYPE,
        ONUCONSTYPE         OUT     FM_POSSIBLE_NTL.TCONCODI%TYPE,
        OCUCURSOR           OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        RCPOSSIBLENTL   DAFM_POSSIBLE_NTL.STYFM_POSSIBLE_NTL;
    BEGIN

        DAFM_POSSIBLE_NTL.GETRECORD(INUPOSSIBLENTL, RCPOSSIBLENTL);

        ONUPRODUCT := RCPOSSIBLENTL.PRODUCT_ID;

        IF ONUPRODUCT IS NOT NULL THEN
            ONUCONTRACT := DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(ONUPRODUCT);
            ONUSUBSCRIBERID :=  PKTBLSUSCRIPC.FNUGETCUSTOMER(ONUCONTRACT);
        END IF;

        OSBNTLTYPE := RCPOSSIBLENTL.NTL_TYPE;
        ONUCONSTYPE := RCPOSSIBLENTL.TCONCODI;
        ONUMEASUREELEMENT := RCPOSSIBLENTL.COSSELME;

        OCUCURSOR := FM_BCREQUEST.FRFGETINVOLVEDSUBS(INUPOSSIBLENTL);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE NTLISPACKAGEFINALSTATUS
    (
        INUPOSSIBLENTLID    IN      FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE,
        OSBISFINALSTATUS    OUT     VARCHAR2
    )
    IS

    BEGIN

        IF MO_BOPACKAGES.FBLISFINALSTATUS(DAFM_POSSIBLE_NTL.FNUGETPACKAGE_ID(INUPOSSIBLENTLID)) THEN
            OSBISFINALSTATUS := GE_BOCONSTANTS.CSBYES;
        ELSE
            OSBISFINALSTATUS := GE_BOCONSTANTS.CSBNO;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE FWGENERATEREQUEST
    IS

    CNUNULL_ATTRIBUTE CONSTANT NUMBER := 2126;

    SBPOSSIBLE_NTL_ID GE_BOINSTANCECONTROL.STYSBVALUE;

    NUPOSSIBLENTLID     FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE;
    NUREQUEST           FM_POSSIBLE_NTL.PACKAGE_ID%TYPE;

    BEGIN
        SBPOSSIBLE_NTL_ID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('FM_POSSIBLE_NTL', 'POSSIBLE_NTL_ID');

        
        
        

        IF (SBPOSSIBLE_NTL_ID IS NULL) THEN
            ERRORS.SETERROR (CNUNULL_ATTRIBUTE, 'Cï¿½digo');
            RAISE EX.CONTROLLED_ERROR;
        END IF;


        
        
        

        NUPOSSIBLENTLID := TO_NUMBER(SBPOSSIBLE_NTL_ID);

        GENERATEREQUEST(NUPOSSIBLENTLID, NUREQUEST);

        COMMIT;

        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE('WORK_INSTANCE',
                                          NULL,
                                          'SUCCESS_MESSAGE_ENTITY',
                                          'SUCCESS_MESSAGE_ATTRIBUTE',
                                          901334);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE('WORK_INSTANCE',
                                          NULL,
                                          'SUCCESS_MESSAGE_ARGUMENTS_ENTITY',
                                          'SUCCESS_MESSAGE_ARGUMENTS_ATTRIBUTE',
                                          NUREQUEST);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE GENERATEREQUEST
    (
        INUPOSSIBLENTLID        IN      FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE,
        ONUREQUEST              OUT     FM_POSSIBLE_NTL.PACKAGE_ID%TYPE
    )
    IS
        RCPOSSIBLENTL           DAFM_POSSIBLE_NTL.STYFM_POSSIBLE_NTL;

        RCMOTIVE                DAMO_MOTIVE.STYMO_MOTIVE;
        RCPRODUCT               DAPR_PRODUCT.STYPR_PRODUCT;
        RCMOPACKAGES            DAMO_PACKAGES.STYMO_PACKAGES;

        DTREQUESTDATE           DATE := UT_DATE.FDTSYSDATE;

        NUSUBSCRIBERID          GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
    BEGIN

        DAFM_POSSIBLE_NTL.GETRECORD(INUPOSSIBLENTLID, RCPOSSIBLENTL);

        
        IF RCPOSSIBLENTL.STATUS != FM_BOCONSTANTS.CSBPOSITIVENTLSTATUS THEN
            ERRORS.SETERROR(901332);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF RCPOSSIBLENTL.PACKAGE_ID IS NOT NULL THEN
            ERRORS.SETERROR(901333);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        

        
        IF RCPOSSIBLENTL.PRODUCT_ID IS NOT NULL THEN
            RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(RCPOSSIBLENTL.PRODUCT_ID);
            NUSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER( RCPRODUCT.SUBSCRIPTION_ID );
        END IF;

        

        
        MO_BOUTILGENERATEREQUEST.GENERATEPACKAGE
        (
            INUPACKAGEID=>NULL,
            INUPACKTYPEID=>NULL,
            ISBTAGNAME=>CSBTAGGESTIONPNO,
            IDTREQUESTDATE=>DTREQUESTDATE,
            INUMOTISTATUSID=>MO_BOCONSTANTS.CNUSTATUS_REG_PACK,
            INUPOSOPERUNITID=>NULL,
            INUPERSONID=>RCPOSSIBLENTL.PERSON_ID,
            INUSUBSCRIBERID=>NUSUBSCRIBERID,
            INUCOMPANYID=>RCPRODUCT.COMPANY_ID,
            ISBCOMMENT=>NULL,
            INUCUSTCAREREQNUM=>NULL,
            INUANSID=>NULL,
            INUDOCTYPEID=>NULL,
            INUDOCKEY=>NULL,
            INURECEPTIONTYPEID=>NULL,
            INUANSWERADDRESSID=>NULL,
            INUCONTACTID=>NULL,
            INUPARENTPACK=>NULL,
            ISBPARENTDEPENDENT=>NULL,
            ORCMO_PACKAGES=>RCMOPACKAGES,
            IBOPETITIONFLAG=>FALSE
        );

        MO_BOUTILGENERATEREQUEST.GENERATEMOTIVE
        (
            INUPRODMOTIID=>NULL,
            ISBTAGNAME=>CSBTAGPRODMOTI,
            IDTREGISTERDATE=>RCMOPACKAGES.REQUEST_DATE,
            INUMOTIVETYPEID=>NULL,
            INUMOTISTATUSID=>MO_BOUTILGENERATEREQUEST.FNUREGSTATUSMOTI,
            INUPACKAGEID=>RCMOPACKAGES.PACKAGE_ID,
            INUCUSTREQNUM=>RCMOPACKAGES.CUST_CARE_REQUES_NUM,
            INUCOMPANYID=>RCMOPACKAGES.COMPANY_ID,
            INUMOTICAUSAL=>NULL,
            INUSUBSCRIPTIONID=>RCPRODUCT.SUBSCRIPTION_ID,
            INUPRODUCTID=>RCPOSSIBLENTL.PRODUCT_ID,
            INUPRODTYPEID=>RCPOSSIBLENTL.PRODUCT_TYPE_ID,
            ISBSERVICENUMBER=>RCPRODUCT.SERVICE_NUMBER,
            INUCOMMPLANID=>RCPRODUCT.COMMERCIAL_PLAN_ID,
            INUPERMANECE=>NULL,
            INUCATEGORYID=>RCPRODUCT.CATEGORY_ID,
            INUSUBCATEGORYID=>RCPRODUCT.SUBCATEGORY_ID,
            INUADDRESSID=>NULL,
            ISBADDRESS=>NULL,
            INUGEOLOCAID=>NULL,
            INUPENDINGMOTIVE=>NULL,
            ISBPENDMOTDEPENDENT=>NULL,
            ORCMO_MOTIVE=>RCMOTIVE
        );

        ONUREQUEST := RCMOPACKAGES.PACKAGE_ID;

        
        MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONREGISTER(ONUREQUEST, RCMOTIVE.MOTIVE_ID);

        
        RCPOSSIBLENTL.PACKAGE_ID := ONUREQUEST;

        RCPOSSIBLENTL.PERSON_ID := GE_BOPERSONAL.FNUGETPERSONID;

        DAFM_POSSIBLE_NTL.UPDRECORD(RCPOSSIBLENTL);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    












    PROCEDURE GETSUBSCRIBERPRODUCTS
    (
        INUSUBSCRIBERID         IN      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUPOSSIBLENTL          IN      FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE,
        OCURESULT               OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OCURESULT := FM_BCREQUEST.FRFGETSUBSCRIBERPRODUCTS
                     (
                        INUSUBSCRIBERID,
                        DAFM_POSSIBLE_NTL.FNUGETPRODUCT_TYPE_ID(INUPOSSIBLENTL)
                     );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    












    PROCEDURE GETPRODUCTMEASELEMS
    (
        INUPRODUCTID        IN      FM_POSSIBLE_NTL.PRODUCT_ID%TYPE,
        OCURESULT           OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OCURESULT := FM_BCREQUEST.FRFGETPRODUCTMEASELEMS(INUPRODUCTID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    












    PROCEDURE GETCONSTYPESBYMEASELEM
    (
        INUMEASELEM         IN      ELEMMEDI.ELMEIDEM%TYPE,
        OCURESULT           OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OCURESULT := FM_BCREQUEST.FRFGETCONSTYPESBYMEASELEM(INUMEASELEM);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    












    PROCEDURE GETCONSTYPES
    (
        OCURESULT           OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OCURESULT := FM_BCREQUEST.FRFGETCONSTYPES;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    












    PROCEDURE GETRESTRICTIONTYPES
    (
        OCURESULT           OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OCURESULT := FM_BCREQUEST.FRFGETRESTRICTIONTYPES;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
























    PROCEDURE CREATENTLPRODUCT
    (
        INUPOSSIBLENTL      IN      FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE,
        INUCONTRACT         IN      SUSCRIPC.SUSCCODI%TYPE, 
        ONUPRODUCTID        OUT     PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        RCSUBSCRIBER DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        NUPRODUCT    PR_PRODUCT.PRODUCT_ID%TYPE;
        NUCOMMPLAN   CC_COMMERCIAL_PLAN.COMMERCIAL_PLAN_ID%TYPE := GE_BOPARAMETER.FNUGET('NTL_COMM_PLAN');
        NUADDRESID   PR_PRODUCT.ADDRESS_ID%TYPE;
        NUCATEGORY   AB_SEGMENTS.CATEGORY_%TYPE;
        NUSUBCATEGORY AB_SEGMENTS.SUBCATEGORY_%TYPE;
        RCSEGMENT   DAAB_SEGMENTS.STYAB_SEGMENTS;

    BEGIN

        IF NUCOMMPLAN IS NULL THEN
            ERRORS.SETERROR(901385);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        PKSUSCRIPC.PRACCKEY(INUCONTRACT);

        DAGE_SUBSCRIBER.GETRECORD(PKSUSCRIPC.RCRECORD.SUSCCLIE, RCSUBSCRIBER);

        UT_TRACE.TRACE('pksuscripc.rcRecord.SUSCCICL '||PKSUSCRIPC.RCRECORD.SUSCCICL, 1);

        NUADDRESID :=  NVL(RCSUBSCRIBER.ADDRESS_ID,
                           NVL(DAFM_POSSIBLE_NTL.FNUGETADDRESS_ID(INUPOSSIBLENTL),
                                PKSUSCRIPC.RCRECORD.SUSCIDDI
                           )
                       );
                       
        DAAB_SEGMENTS.GETRECORD(DAAB_ADDRESS.FNUGETSEGMENT_ID(NUADDRESID),RCSEGMENT);
        NUCATEGORY := RCSEGMENT.CATEGORY_;
        NUSUBCATEGORY := RCSEGMENT.SUBCATEGORY_;
        
        PR_BOCREATIONPRODUCT.REGISTER
        (
            INUCONTRACT,                            
            FM_BOCONSTANTS.CNUCLANDESTINEPRODTYPE,  
            NUCOMMPLAN,                             
            UT_DATE.FDTSYSDATE,                     
            NUADDRESID,                             
            NUCATEGORY,                             
            NUSUBCATEGORY,                          
            PKSUSCRIPC.RCRECORD.SUSCSIST,           
            GE_BOPERSONAL.FNUGETPERSONID,           
            NULL,                                   
            NUPRODUCT,                              
            PR_BOPARAMETER.FNUGETPRPENDINST,        
            NULL,                                   
            NULL,                                   
            PKSUSCRIPC.RCRECORD.SUSCCICL,           
            PKTBLCICLO.FNUGETCICLCICO(PKSUSCRIPC.RCRECORD.SUSCCICL),                                   
            NULL                                    
        );

        DAFM_POSSIBLE_NTL.UPDPRODUCT_ID(INUPOSSIBLENTL, NUPRODUCT);

        ONUPRODUCTID := NUPRODUCT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    

















    PROCEDURE ADDINVOLVEDSUBSC
    (
        INUPOSSIBLENTL      IN      FM_INVOLVED_SUBSC.POSSIBLE_NTL_ID%TYPE,
        INUSUBSCRIBERID     IN      FM_INVOLVED_SUBSC.SUBSCRIBER_ID%TYPE,
        ISBCOMMENT          IN      FM_INVOLVED_SUBSC.COMMENT_%TYPE,
        INURESTRICTIONTYPE  IN      MO_RESTRICTION_TYPE.RESTRICTION_TYPE_ID%TYPE,
        ONUID               OUT     FM_INVOLVED_SUBSC.INVOLVED_SUBSC_ID%TYPE
    )
    IS         
        RCINVOLVEDSUBSC     DAFM_INVOLVED_SUBSC.STYFM_INVOLVED_SUBSC;
        NURESTRICTION       CC_RESTRICTION.RESTRICTION_ID%TYPE;
    BEGIN

        RCINVOLVEDSUBSC.POSSIBLE_NTL_ID   := INUPOSSIBLENTL;
        RCINVOLVEDSUBSC.SUBSCRIBER_ID     := INUSUBSCRIBERID;
        RCINVOLVEDSUBSC.COMMENT_          := ISBCOMMENT;
        RCINVOLVEDSUBSC.INVOLVED_SUBSC_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('fm_involved_subsc', 'SEQ_FM_INVOLVED_SUB_173968');

        DAFM_INVOLVED_SUBSC.INSRECORD(RCINVOLVEDSUBSC);

        IF INURESTRICTIONTYPE IS NOT NULL THEN
            CC_BORESTRICTION.ADDRESTRICTION
            (
                NURESTRICTION,
                INURESTRICTIONTYPE,
                CC_BOPARAMETER.FNUGETACTIVE_RESTRICT,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                DAGE_SUBSCRIBER.FSBGETIDENTIFICATION(INUSUBSCRIBERID),
                NULL,
                DAGE_SUBSCRIBER.FNUGETIDENT_TYPE_ID(INUSUBSCRIBERID),
                FSBGETCOMMENTRESTRICTION(INUPOSSIBLENTL),
                NULL,
                NULL,
                NULL
            );
        END IF;

        ONUID := RCINVOLVEDSUBSC.INVOLVED_SUBSC_ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE CREATEPRODRESTRICTION
    (
        INUPOSSIBLENTL      IN      FM_POSSIBLE_NTL.PRODUCT_ID%TYPE,
        INURESTRICTIONTYPE  IN      MO_RESTRICTION_TYPE.RESTRICTION_TYPE_ID%TYPE
    )
    IS
        NURESTRICTION       CC_RESTRICTION.RESTRICTION_ID%TYPE;
    BEGIN

        CC_BORESTRICTION.ADDRESTRICTION
        (
            NURESTRICTION,
            INURESTRICTIONTYPE,
            CC_BOPARAMETER.FNUGETACTIVE_RESTRICT,
            NULL,
            DAFM_POSSIBLE_NTL.FNUGETPRODUCT_ID(INUPOSSIBLENTL),
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            FSBGETCOMMENTRESTRICTION(INUPOSSIBLENTL),
            NULL,
            NULL,
            NULL
        );

        CC_BORESTRICTION.ADDRESTRICTION
        (
            NURESTRICTION,
            INURESTRICTIONTYPE,
            CC_BOPARAMETER.FNUGETACTIVE_RESTRICT,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            DAGE_SUBSCRIBER.FSBGETIDENTIFICATION(DAFM_POSSIBLE_NTL.FNUGETPRODUCT_ID(INUPOSSIBLENTL)),
            NULL,
            DAGE_SUBSCRIBER.FNUGETIDENT_TYPE_ID(DAFM_POSSIBLE_NTL.FNUGETPRODUCT_ID(INUPOSSIBLENTL)),
            FSBGETCOMMENTRESTRICTION(INUPOSSIBLENTL),
            NULL,
            NULL,
            NULL
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    













    PROCEDURE NOTIFYWFINVOLVEDSUBSC
    (
        INUPOSSIBLENTL      IN      FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE
    )
    IS
        CNUWF_INV_SUBSC     CONSTANT WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE := 49;
        CNUACTION_ID        CONSTANT WF_INSTANCE.ACTION_ID%TYPE := 82;

        NUPACKAGEID         FM_POSSIBLE_NTL.PACKAGE_ID%TYPE;
        CURELEVANTUNITS     CONSTANTS.TYREFCURSOR;

        NUUNITID            WF_INSTANCE.UNIT_ID%TYPE;
        SBDESCRIPTION       WF_INSTANCE.DESCRIPTION%TYPE;
        NUSTATUSID          WF_INSTANCE.STATUS_ID%TYPE;
        NUUNITTYPEID        WF_INSTANCE.UNIT_TYPE_ID%TYPE;
    BEGIN

        NUPACKAGEID := DAFM_POSSIBLE_NTL.FNUGETPACKAGE_ID(INUPOSSIBLENTL);

        FM_BOPNOPREINVOICE.GETWFRELEVANTUNITS(NUPACKAGEID, CURELEVANTUNITS);

        FETCH CURELEVANTUNITS INTO NUUNITID,
                                   SBDESCRIPTION,
                                   NUSTATUSID,
                                   NUUNITTYPEID;

        IF CURELEVANTUNITS%ISOPEN THEN
            CLOSE CURELEVANTUNITS;
        END IF;

        IF NUUNITTYPEID = CNUWF_INV_SUBSC THEN
            FM_BOPNOPREINVOICE.NOTIFYWF(NUPACKAGEID, CNUACTION_ID);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE UPDATENTLDATA
    (
        INUPOSSIBLENTL      IN      FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE,
        ISBNTLTYPE          IN      FM_POSSIBLE_NTL.NTL_TYPE%TYPE,
        INUPRODUCT          IN      FM_POSSIBLE_NTL.PRODUCT_ID%TYPE,
        INUMEASELEM         IN      FM_POSSIBLE_NTL.COSSELME%TYPE,
        INUCONSTYPE         IN      FM_POSSIBLE_NTL.TCONCODI%TYPE,
        INURESTRICTIONTYPE  IN      MO_RESTRICTION_TYPE.RESTRICTION_TYPE_ID%TYPE
    )
    IS
        RCPOSSIBLENTL   DAFM_POSSIBLE_NTL.STYFM_POSSIBLE_NTL;
        NUADDRESS       AB_ADDRESS.ADDRESS_ID%TYPE;
        NUMOTIVE        MO_MOTIVE.MOTIVE_ID%TYPE;
        TBMO_MOTIVE     DAMO_MOTIVE.TYTBMO_MOTIVE;
        NUREAD          BINARY_INTEGER;
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGE       DAMO_PACKAGES.STYMO_PACKAGES;
    BEGIN
        UT_TRACE.TRACE('Inicio FM_BORequest.UpdateNTLData.',2);
        DAFM_POSSIBLE_NTL.GETRECORD(INUPOSSIBLENTL, RCPOSSIBLENTL);

        RCPOSSIBLENTL.COSSELME   := INUMEASELEM;
        RCPOSSIBLENTL.TCONCODI   := INUCONSTYPE;
        RCPOSSIBLENTL.NTL_TYPE   := ISBNTLTYPE;

        IF RCPOSSIBLENTL.PRODUCT_ID IS NULL OR RCPOSSIBLENTL.PRODUCT_ID <> INUPRODUCT THEN
            NUADDRESS := DAPR_PRODUCT.FNUGETADDRESS_ID(INUPRODUCT);
            RCPOSSIBLENTL.PRODUCT_ID := INUPRODUCT;
            RCPOSSIBLENTL.ADDRESS_ID := NUADDRESS;
            DAFM_POSSIBLE_NTL.UPDRECORD(RCPOSSIBLENTL);

            DAMO_MOTIVE.GETRECORDS('mo_motive.package_id='|| DAFM_POSSIBLE_NTL.FNUGETPACKAGE_ID(INUPOSSIBLENTL),TBMO_MOTIVE);
            NUREAD := TBMO_MOTIVE.FIRST;
            LOOP
                EXIT WHEN NUREAD IS NULL;
                RCMOTIVE := TBMO_MOTIVE(NUREAD);
                NUREAD := TBMO_MOTIVE.NEXT(NUREAD);
            END LOOP;
            DAMO_PACKAGES.GETRECORD(RCMOTIVE.PACKAGE_ID,RCPACKAGE);
            RCPACKAGE.ADDRESS_ID := NUADDRESS;
            RCMOTIVE.PRODUCT_ID := INUPRODUCT;
            RCMOTIVE.PRODUCT_TYPE_ID := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCT);
            
            UT_TRACE.TRACE('Actualiza direccion: '||NUADDRESS,2);
            DAMO_MOTIVE.UPDRECORD(RCMOTIVE);
            DAMO_PACKAGES.UPDRECORD(RCPACKAGE);
            
            IF INURESTRICTIONTYPE IS NOT NULL THEN
                CREATEPRODRESTRICTION(INUPOSSIBLENTL, INURESTRICTIONTYPE);
            END IF;

        ELSE

            DAFM_POSSIBLE_NTL.UPDRECORD(RCPOSSIBLENTL);

        END IF;
        UT_TRACE.TRACE('FINAL FM_BORequest.UpdateNTLData.',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    












    PROCEDURE DELINVOLVEDSUBSC
    (
        INUINVOLVEDSUBSC    IN      FM_INVOLVED_SUBSC.INVOLVED_SUBSC_ID%TYPE
    )
    IS
    BEGIN

        DAFM_INVOLVED_SUBSC.DELRECORD(INUINVOLVEDSUBSC);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    













    PROCEDURE PRODUCTCHANGE
    (
        INUPOSSIBLENTL      IN      FM_POSSIBLE_NTL.PACKAGE_ID%TYPE,
        INUPRODUCT          IN      PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBHASREQUEST       OUT     VARCHAR2
    )
    IS
        RCPOSSIBLENTL   DAFM_POSSIBLE_NTL.STYFM_POSSIBLE_NTL;
    BEGIN
        UT_TRACE.TRACE('Inicio FM_BORequest.ProductChange.',2);
        DAFM_POSSIBLE_NTL.GETRECORD(INUPOSSIBLENTL, RCPOSSIBLENTL);

        IF RCPOSSIBLENTL.PRODUCT_ID <> INUPRODUCT THEN
            OSBHASREQUEST := GE_BOCONSTANTS.CSBYES;
        ELSE
            OSBHASREQUEST := GE_BOCONSTANTS.CSBNO;
        END IF;
        UT_TRACE.TRACE('FIN FM_BORequest.ProductChange. '||OSBHASREQUEST,2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

END FM_BOREQUEST;