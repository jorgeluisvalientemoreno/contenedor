PACKAGE BODY CT_BoCertificate
IS















































































































































































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO411983';

    CNUCONSIGMENT_ACTIVITY      CONSTANT GE_ITEMS.ITEMS_ID%TYPE := GE_BOITEMSCONSTANTS.CNUCONSIGMENTACTIVITY;
    CSBERR_REQUIERD_FIELD       CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 116082;
    CSBERR_ONLY_MANUAL_CERT     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 6902;
    CSBERR_CERT_CLOSED_2EDIT    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 6922;
    CSBERR_CERT_CLOSED_2DEL     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 7002;

    
    SBERRMSG                    GE_ERROR_LOG.DESCRIPTION%TYPE;
    CSB_TASKTYPE_UNDEFINED      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901066;
    
    CNUERRORDATES1              CONSTANT NUMBER(18)   := 346;
    CNUERRORDATES2              CONSTANT NUMBER(18)   := 12921;
    CNUERRORVALUES              CONSTANT NUMBER(18)   := 900902;


    
    
    
    
    TYPE TYRCCONFCRTC IS RECORD
    (
        COCRTICO    FA_CONFCRTC.COCRTICO%TYPE,
        COCRCAIM    FA_CONFCRTC.COCRCAIM%TYPE
    );

    TYPE TYTBCONFCRTC IS TABLE OF TYRCCONFCRTC INDEX BY VARCHAR2(50);

    GTBCONFCRTC  TYTBCONFCRTC;

    
    TYPE TYTBCONFTICO IS TABLE OF FA_CONFTICO.COTITICO%TYPE INDEX BY VARCHAR2(50);

    GTBCONFTICO  TYTBCONFTICO;


    
    TYPE TYRCCONFCRNA IS RECORD
    (
        COCRPUEM    FA_CONFCRNA.COCRPUEM%TYPE,
        COCRTIAU    FA_CONFCRNA.COCRTIAU%TYPE
    );

    TYPE TYTBCONFCRNA IS TABLE OF TYRCCONFCRNA INDEX BY VARCHAR2(50);

    GTBCONFCRNA  TYTBCONFCRNA;

    
    TYPE TYTBNUMEAUTO IS TABLE OF NUMEAUTO.NUAUCONS%TYPE INDEX BY VARCHAR2(50);

    GTBNUMEAUTO  TYTBNUMEAUTO;

    
    TYPE TYTBCONSECUTRI IS TABLE OF ROWID INDEX BY VARCHAR2(20);

    GTBCONSECUTRI  TYTBCONSECUTRI;

    
    
    
    
    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    PROCEDURE DELCHARGESBYADJORDER
    (
        INUADJORDER     IN      OR_ORDER.ORDER_ID%TYPE
    );


    
    
    











    PROCEDURE SETPRINTFORMAT
    (
        INUPRINTFORMAT IN CT_PRINT_FORMAT.CONFEXME_ID%TYPE
    )
    IS
    BEGIN
        GNUPRINTFORMAT := INUPRINTFORMAT;
    END SETPRINTFORMAT;
    








    FUNCTION FNUPRINTFORMAT
    RETURN NUMBER IS
    BEGIN
        RETURN GNUPRINTFORMAT;
    END;
    
    
    











    PROCEDURE SETCONTRACTTYPE
    (
        INUCONTRACTTYPE IN GE_TIPO_CONTRATO.ID_TIPO_CONTRATO%TYPE
    )
    IS
    BEGIN
        GNUCONTRACTTYPE := INUCONTRACTTYPE;
    END SETCONTRACTTYPE;
    








    FUNCTION FNUCONTRACTTYPE
    RETURN NUMBER IS
    BEGIN
        RETURN GNUCONTRACTTYPE;
    END;
    
    
    












    PROCEDURE SETCERTIFTYPE
    (
        INUCERTIFTYPE IN GE_ACTA.ID_TIPO_ACTA%TYPE
    )
    IS
    BEGIN
        GNUCERTIFTYPE := INUCERTIFTYPE;
    END;
    
    








    FUNCTION FNUCERTIFTYPE
    RETURN NUMBER IS
    BEGIN
        RETURN GNUCERTIFTYPE;
    END;
    
    
    











    PROCEDURE SETPERIODCERTIF
    (
        INUPERIODCERTIF IN GE_PERIODO_CERT.ID_PERIODO%TYPE
    )
    IS
    BEGIN
        GNUPERIODCERTIF := INUPERIODCERTIF;
    END;
    








    FUNCTION FNUPERIODCERTIF
    RETURN NUMBER IS
    BEGIN
        RETURN GNUPERIODCERTIF;
    END;
    
    
    











    PROCEDURE SETADMINBASE
    (
        INUADMINBASE IN GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE
    )
    IS
    BEGIN
        GNUADMINBASE := INUADMINBASE;
    END;
    








    FUNCTION FNUADMINBASE
    RETURN NUMBER IS
    BEGIN
        RETURN GNUADMINBASE;
    END;
    
    
    













    PROCEDURE SETCONTRATOR
    (
        INUCONTRATORID IN GE_CONTRATISTA.ID_CONTRATISTA%TYPE
    )
    IS
    BEGIN
        GNUCONTRATOR := INUCONTRATORID;
    END;
    










    FUNCTION FNUCONTRATOR
    RETURN NUMBER
    IS
    BEGIN
        RETURN GNUCONTRATOR;
    END;

    
    
    













    PROCEDURE SETCONTRACT
    (
        INUCONTRACTID IN GE_CONTRATO.ID_CONTRATO%TYPE
    )
    IS
    BEGIN
        GNUCONTRACT := INUCONTRACTID;
    END;
    










    FUNCTION FNUCONTRACT
    RETURN NUMBER
    IS
    BEGIN
        RETURN GNUCONTRACT;
    END;

    
    
    













    PROCEDURE SETCERTIFICATE
    (
        INUCERTIFICATE IN GE_ACTA.ID_ACTA%TYPE
    )
    IS
    BEGIN
        GNUCERTIFICATE := INUCERTIFICATE;
    END;
    









    FUNCTION FNUCERTIFICATE
    RETURN NUMBER
    IS
    BEGIN
        RETURN GNUCERTIFICATE;
    END;
    
    
    




















    PROCEDURE GETFORMTTMPLTEBYEXMIX
    (
        INUCONFEXMEID           IN  ED_CONFEXME.COEMCODI%TYPE,
        INUCERTIFICATETYPEID    IN  GE_ACTA.ID_TIPO_ACTA%TYPE,
        INUCONTRACTTYPEID       IN  GE_TIPO_CONTRATO.ID_TIPO_CONTRATO%TYPE,
        ONUFORMATID             OUT ED_FORMATO.FORMCODI%TYPE,
        OSBTEMPLATE             OUT ED_CONFEXME.COEMPADI%TYPE
    )
    IS
        
        CNUNOT_CONF_EXTMEXCLA   CONSTANT NUMBER      := 5862;
        CNUNOT_PRINTFORMAT      CONSTANT NUMBER      := 5882;

        SBTIPOACTA              VARCHAR2(150);
        RCTEMPLATE              PKTBLED_CONFEXME.CUED_CONFEXME%ROWTYPE;
        SBFORMATIDENT           ED_CONFEXME.COEMPADA%TYPE;
        
    BEGIN
        
        UT_TRACE.TRACE('INICIO ct_bocertificate.getFormtTmplteByExMix',12);
        
        
        IF (INUCONFEXMEID IS NULL) THEN
            SBTIPOACTA := INUCERTIFICATETYPEID || ' - ' || CT_BOCONSTANTS.FSBGETDESCCERTIFICATETYPE(INUCERTIFICATETYPEID);
            ERRORS.SETERROR(CNUNOT_CONF_EXTMEXCLA,SBTIPOACTA||'|'||TO_CHAR(INUCONTRACTTYPEID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        PKBCED_CONFEXME.OBTIENEREGISTRO(INUCONFEXMEID, RCTEMPLATE );
        SBFORMATIDENT := RCTEMPLATE.COEMPADA;

        IF SBFORMATIDENT IS NULL THEN
            
            ERRORS.SETERROR(CNUNOT_PRINTFORMAT);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        ONUFORMATID := PKBOINSERTMGR.GETCODEFORMATO( SBFORMATIDENT );
        OSBTEMPLATE :=  RCTEMPLATE.COEMPADI;

        UT_TRACE.TRACE('FIN ct_bocertificate.getFormtTmplteByExMix',12);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETFORMTTMPLTEBYEXMIX;

    

























    PROCEDURE GETDATABYCERTIFICATE
    (
        INUCERTIFICATEID     IN  GE_ACTA.ID_ACTA%TYPE,
        ONUADMINBASEID       OUT GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        ONUPERIODID          OUT GE_ACTA.ID_PERIODO%TYPE,
        ONUCERTIFICATETYPEID OUT GE_ACTA.ID_TIPO_ACTA%TYPE,
        ONUCONTRACTID        OUT GE_CONTRATO.ID_CONTRATO%TYPE,
        ONUCONTRACTTYPEID    OUT GE_TIPO_CONTRATO.ID_TIPO_CONTRATO%TYPE,
        ONUCONTRATORID       OUT GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        ONUCONFEXMEID        OUT CT_PRINT_FORMAT.CONFEXME_ID%TYPE
    )
    IS
        
        RFDATACERTIFICATE   CONSTANTS.TYREFCURSOR;
        RCDATACERTIFICATE   TYRCDATACERTIFICATE;

    BEGIN
    
        UT_TRACE.TRACE('INICIO ct_bocertificate.getDataByCertificate',12);

        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFDATACERTIFICATE);
        RFDATACERTIFICATE := CT_BCCERTIFICATE.FRFDATABYCERTIFICATE(INUCERTIFICATEID);
        FETCH RFDATACERTIFICATE INTO RCDATACERTIFICATE;
        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFDATACERTIFICATE);

        ONUADMINBASEID       := RCDATACERTIFICATE.INUBASEADMIN;
        ONUPERIODID          := RCDATACERTIFICATE.INUPERIOD;
        ONUCERTIFICATETYPEID := RCDATACERTIFICATE.INUCERTIFTYPE;
        ONUCONTRACTID        := RCDATACERTIFICATE.INUCONTRACT;
        ONUCONTRACTTYPEID    := RCDATACERTIFICATE.INUCONTRACTTYPE;
        ONUCONTRATORID       := RCDATACERTIFICATE.INUCONTRACTOR;
        ONUCONFEXMEID        := RCDATACERTIFICATE.INUCONFEXMEID;

        UT_TRACE.TRACE('FIN ct_bocertificate.getDataByCertificate',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETDATABYCERTIFICATE;


    




















    PROCEDURE PRINTPROCESSCERTIFICATE
    (
        INUCERTIFICATEID    IN   GE_ACTA.ID_ACTA%TYPE
    )
    IS
        
        NUADMINBASEID       GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE;
        NUPERIODID          GE_ACTA.ID_PERIODO%TYPE;
        NUCERTIFICATETYPEID GE_ACTA.ID_TIPO_ACTA%TYPE;

        NUCONTRACTID        GE_CONTRATO.ID_CONTRATO%TYPE;
        NUCONTRACTTYPEID    GE_TIPO_CONTRATO.ID_TIPO_CONTRATO%TYPE;
        NUCONTRATORID       GE_CONTRATISTA.ID_CONTRATISTA%TYPE;
        NUCONFEXMEID        CT_PRINT_FORMAT.CONFEXME_ID%TYPE;
        
        
        NUFORMATID          ED_FORMATO.FORMCODI%TYPE;
        SBTEMPLATE          ED_CONFEXME.COEMPADI%TYPE;
        CLCLOBDATA         CLOB;
        
    BEGIN
        UT_TRACE.TRACE('INICIO CT_BoCertificate.PrintProcessCertificate',12);

        
        CT_BOCERTIFICATE.GETDATABYCERTIFICATE
        (
            INUCERTIFICATEID,
            NUADMINBASEID,
            NUPERIODID,
            NUCERTIFICATETYPEID,
            NUCONTRACTID,
            NUCONTRACTTYPEID,
            NUCONTRATORID,
            NUCONFEXMEID
        );
        
        
        
        SETCONTRATOR(NUCONTRATORID);
        SETCONTRACT(NUCONTRACTID);
        SETCERTIFICATE(INUCERTIFICATEID);
        SETPRINTFORMAT(NUCONFEXMEID);
        SETCONTRACTTYPE(NUCONTRACTTYPEID);
        SETCERTIFTYPE(NUCERTIFICATETYPEID);
        SETPERIODCERTIF(NUPERIODID);
        SETADMINBASE(NUADMINBASEID);

        
        
        GETFORMTTMPLTEBYEXMIX
    	(
        	NUCONFEXMEID,
        	NUCERTIFICATETYPEID,
            NUCONTRACTTYPEID,
        	NUFORMATID,
        	SBTEMPLATE
        );

        
        PKBODATAEXTRACTOR.EXECUTERULES(NUFORMATID, CLCLOBDATA );

        
        PKBOED_DOCUMENTMEM.SET_PRINTDOC( CLCLOBDATA );
        
        PKBOED_DOCUMENTMEM.SETTEMPLATE( SBTEMPLATE );

        UT_TRACE.TRACE('FIN CT_BoCertificate.PrintProcessCertificate',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    


























    PROCEDURE CREATECERTIFICATE
    (
        INUCERTIFICATETYPE  IN  GE_ACTA.ID_TIPO_ACTA%TYPE,
        INUCONTRACTID	    IN  GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	        IN  GE_ACTA.ID_PERIODO%TYPE,
        INUADMINBASEID	    IN  GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        IDTFINALDATE	    IN  GE_ACTA.FECHA_FIN%TYPE,
        INUPERSONID         IN  GE_PERSON.PERSON_ID%TYPE,
        ONUCERTIFICATEID    OUT GE_ACTA.ID_ACTA%TYPE
    )
    IS
        CNUREQUIRED_ATTRIBUTE CONSTANT NUMBER      := 116082;
        CSBSEPARADOR          CONSTANT VARCHAR2(3) := ' - ';
        RCPERIOD              DAGE_PERIODO_CERT.STYGE_PERIODO_CERT; 

        NUPREVIOUSCERTIFID    GE_ACTA.ID_ACTA%TYPE;
        DTPREVIOUSSTARTDATE   GE_ACTA.FECHA_INICIO%TYPE;

        DTSTARTDATE           GE_ACTA.FECHA_INICIO%TYPE;

        PROCEDURE CREATERECORD
        (
            INUSTARTDATE IN GE_ACTA.FECHA_INICIO%TYPE
        )
        IS
            NUCONTRACTORID GE_CONTRATISTA.ID_CONTRATISTA%TYPE;

            RCACTA         DAGE_ACTA.STYGE_ACTA; 
        BEGIN
            NUCONTRACTORID := DAGE_CONTRATO.FNUGETID_CONTRATISTA(INUCONTRACTID);

            
            RCACTA.ID_ACTA := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_ACTA',
                                                                  'SEQ_GE_ACTA');

            IF (INUADMINBASEID IS NOT NULL) THEN
                RCACTA.NOMBRE := DAGE_BASE_ADMINISTRA.FSBGETDESCRIPCION(INUADMINBASEID)||
                                 CSBSEPARADOR;
            END IF;

            RCACTA.NOMBRE := RCACTA.NOMBRE||
                             DAGE_CONTRATISTA.FSBGETNOMBRE_CONTRATISTA(NUCONTRACTORID)||
                             CSBSEPARADOR||
                             RCPERIOD.NOMBRE;
            RCACTA.ID_TIPO_ACTA := INUCERTIFICATETYPE;
            RCACTA.VALOR_TOTAL := 0;
            RCACTA.FECHA_CREACION := UT_DATE.FDTSYSDATE;
            RCACTA.FECHA_INICIO := INUSTARTDATE;
            RCACTA.FECHA_FIN := IDTFINALDATE;
            RCACTA.ESTADO := CT_BOCONSTANTS.FSBGETOPENEDCERTIFSTATUS;
            RCACTA.ID_CONTRATO := INUCONTRACTID;
            RCACTA.ID_BASE_ADMINISTRATIVA := INUADMINBASEID;
            RCACTA.ID_PERIODO := INUPERIODID;
            RCACTA.PERSON_ID := INUPERSONID;

            
            DAGE_ACTA.INSRECORD(RCACTA);

            ONUCERTIFICATEID := RCACTA.ID_ACTA;
        END CREATERECORD;
    BEGIN
        
        IF (INUCERTIFICATETYPE IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Tipo de Acta');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUCONTRACTID IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Contrato');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUPERIODID IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Periodo');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (IDTFINALDATE IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Fecha Final');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        DAGE_PERIODO_CERT.GETRECORD(INUPERIODID,
                                    RCPERIOD);

        
        IF ((IDTFINALDATE > (RCPERIOD.FECHA_FINAL + 1 - 1/86400)) OR
            (IDTFINALDATE < RCPERIOD.FECHA_INICIAL)) THEN
             ERRORS.SETERROR(5742,
                             'Fecha Final');
             RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUCERTIFICATETYPE = CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE) THEN
            
            
            
            
            
            
            
            
            CT_BCCERTIFICATE.GETMATCHINGLIQCERTIF(INUCONTRACTID,
                                                  INUPERIODID,
                                                  INUADMINBASEID,
                                                  IDTFINALDATE,
                                                  INUPERSONID,
                                                  ONUCERTIFICATEID);

            
            IF (ONUCERTIFICATEID IS NOT NULL) THEN
                RETURN;
            END IF;

            
            CT_BCCERTIFICATE.GETPREVIOUSLIQCERTIF(INUCONTRACTID,
                                                  INUPERIODID,
                                                  INUADMINBASEID,
                                                  IDTFINALDATE,
                                                  INUPERSONID,
                                                  NUPREVIOUSCERTIFID,
                                                  DTPREVIOUSSTARTDATE);

            
            IF (NUPREVIOUSCERTIFID IS NULL) THEN
                DTSTARTDATE := RCPERIOD.FECHA_INICIAL;
            
            ELSE
                DTSTARTDATE := DTPREVIOUSSTARTDATE + 1/86400;
            END IF;

            
            CREATERECORD(DTSTARTDATE);

        
        ELSIF (INUCERTIFICATETYPE = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE) THEN
               
               CREATERECORD(NULL);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATECERTIFICATE;


    

































    PROCEDURE VERIFYORDERBYCERTIFICATE
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUCERTIFICATEID    IN  GE_ACTA.ID_ACTA%TYPE,
        ISBVERIFFLAG        IN  VARCHAR2,
        INUCURRENTADJORDER  IN  OR_ORDER.ORDER_ID%TYPE,
        ONUADJORDERID       OUT OR_ORDER.ORDER_ID%TYPE,
        ODTDATE             OUT DATE
    )
    IS
        
        TBCERTIFRELATED      GE_BCCERTIFICATE.TYTBRELATEDORDER;
        NUINDEXCERTSRELAT     BINARY_INTEGER;
        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;
    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BoCertificate.VerifyOrderByCertificate',12);
        
        
        IF (ISBVERIFFLAG = 'Y' ) THEN
            ODTDATE := UT_DATE.FDTSYSDATE;
            GE_BOCERTCONTRATISTA.CREARORDENAJUSTE
            (
                INUORDERID,
                ONUADJORDERID
            );
            DACT_ORDER_CERTIFICA.UPDVERIFICATION_DATE
            (   INUORDERID,
                INUCERTIFICATEID,
                ODTDATE
            );
            
            
            
            IF (ONUADJORDERID IS NOT NULL) THEN

                
                RCORDERBYCERTIFICATE.ORDER_ID           := ONUADJORDERID;
                RCORDERBYCERTIFICATE.CERTIFICATE_ID     := INUCERTIFICATEID;
                RCORDERBYCERTIFICATE.VERIFICATION_DATE  := ODTDATE;
                DACT_ORDER_CERTIFICA.INSRECORD(RCORDERBYCERTIFICATE);

                
                
                DAOR_ORDER.UPDIS_PENDING_LIQ(ONUADJORDERID, NULL);

                
                DAGE_ACTA.UPDIS_PENDING
                (
                    INUCERTIFICATEID,
                    CT_BOCONSTANTS.CNUIS_PENDING
                );
                
                TBCERTIFRELATED := GE_BCCERTIFICATE.FTBCERTIFRELATED(INUORDERID);
                NUINDEXCERTSRELAT:= TBCERTIFRELATED.FIRST;
                WHILE NUINDEXCERTSRELAT IS NOT NULL LOOP
                   
                    DAGE_ACTA.UPDIS_PENDING
                    (
                        TBCERTIFRELATED(NUINDEXCERTSRELAT).CERTIFICATE_ID,
                        CT_BOCONSTANTS.CNUIS_PENDING
                    );

                  UT_TRACE.TRACE('Acta relacionada ' || TBCERTIFRELATED(NUINDEXCERTSRELAT).CERTIFICATE_ID || ' Cambiada a ISPENDING' ,3);

                  NUINDEXCERTSRELAT := TBCERTIFRELATED.NEXT(NUINDEXCERTSRELAT);
                END LOOP;
            END IF;
        ELSE
            ODTDATE := NULL;
            DACT_ORDER_CERTIFICA.UPDVERIFICATION_DATE
            (   INUORDERID,
                INUCERTIFICATEID,
                ODTDATE
            );
            IF INUCURRENTADJORDER IS NOT NULL THEN
                
                DAOR_ORDER.UPDORDER_STATUS_ID
                (
                    INUCURRENTADJORDER,
                    OR_BOCONSTANTS.CNUORDER_STAT_CANCELED
                );
                
                CT_BCCERTIFICATE.DELORDERFROMCERTIFICATES(INUCURRENTADJORDER);

                
                CT_BCCERTIFICATE.DELORDERFROMADJUSTREL(INUCURRENTADJORDER);
                
                
                DELCHARGESBYADJORDER(INUCURRENTADJORDER);
            END IF;
        END IF;
        UT_TRACE.TRACE('FIN CT_BoCertificate.VerifyOrderByCertificate',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VERIFYORDERBYCERTIFICATE;

    






























    PROCEDURE GETFISCALNUMBER
    (
        ISBTOKEN         IN  VARCHAR2,
        INUCOMPROBANTE   IN  NUMBER,
        ISBTIENEIMPU     IN  VARCHAR2,

        INUTIPODOCU      IN  GE_DOCUMENT_TYPE.DOCUMENT_TYPE_ID%TYPE,
        INUCONTRATOR     IN  GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUEMPRESA       IN  SISTEMA.SISTCODI%TYPE,

        ONUNUMAUTORIZADO OUT CONSECUT.CONSNUME%TYPE,
        OSBSERIE         OUT CONSECUT.CONSSERI%TYPE,
        ONUCONSECUTI     OUT CONSECUT.CONSCODI%TYPE,
        ONUTIPOCOMP      OUT TIPOCOMP.TICOCODI%TYPE
    )
    IS
        

        
        RCCONFCRTC  FA_CONFCRTC%ROWTYPE;

        
        RCCONFCRNA  FA_CONFCRNA%ROWTYPE;

        
        
        RCCONTRATISTA DAGE_CONTRATISTA.STYGE_CONTRATISTA;

        
        NUTIPOCONT  FA_TIPOCONT.TICOCODI%TYPE;

        
        SBCOCRCAIM  FA_CONFCRTC.COCRCAIM%TYPE;

        
        SBCOCRTICO  FA_CONFCRTC.COCRTICO%TYPE;

        
        SBCOCRTIAU  FA_CONFCRNA.COCRTIAU%TYPE;

        
        SBCOCRPUEM  FA_CONFCRNA.COCRPUEM%TYPE;

        
        SBTIENEIMPU  VARCHAR2(2);

        
        NUTIPOIMPR  TIPOIMPR.TIIMCODI%TYPE;

        
        BLESAUTOMATICA  BOOLEAN;

        
        NUPUNTEMIS  PUNTEMIS.PUEMCONS%TYPE;

        
        SBEQUIPO    VARCHAR2(2000);

        
        RCCAJA      CA_CAJA%ROWTYPE;

        
        NUTIPOAUTO  FA_TIPOAUTO.TIAUCODI%TYPE;

        
        NUNUMEAUTO  NUMEAUTO.NUAUCONS%TYPE;

        
        TBCARGIMPU  FA_BCNUMERAUTORIZADA.TYRCTBCARGOS;

        
        CNURECAUDOS_TIPOIMPR CONSTANT TIPOIMPR.TIIMCODI%TYPE :=
                                PKGENERALPARAMETERSMGR.FNUGETNUMBERPARAMETER('RECAUDOS_TIPOIMPR');
        CNURECAUDOS_PUNTEMIS CONSTANT PUNTEMIS.PUEMCONS%TYPE :=
                                PKGENERALPARAMETERSMGR.FNUGETNUMBERPARAMETER('RECAUDOS_PUNTEMIS');

        
        
        
        
        SBIXNUMEAUTO VARCHAR2(50);
        
        SBIXCONFCRNA VARCHAR2(50);
        
        SBIXCONFTICO VARCHAR2(50);
        
        SBIXCONFCRTC VARCHAR2(50);

        
        
        

        

























        PROCEDURE OBTSIGUIENTENUMFISCAL
        (
            INUNUMEAUTO IN  NUMEAUTO.NUAUCONS%TYPE,
            ONUCONSNUME OUT CONSECUT.CONSNUME%TYPE,
            OSBCONSSERI OUT CONSECUT.CONSSERI%TYPE,
            ONUCONSCODI OUT CONSECUT.CONSCODI%TYPE
        )
        IS
            
            RCCONSECUT      CONSECUT%ROWTYPE;
            
            RCCONSECUTRI    PKBCCONSECUT.TYRCCONSECUTRI;

            
            NUNUMPREFI  CONSECUT.CONSNUME%TYPE;

            
            CNUNUM_MAX_VALIDO CONSTANT NUMBER := 999999999999999;

            



















            PROCEDURE ANULARCONSECUTIVO
            (
                IRCCONSECUT IN CONSECUT%ROWTYPE
            )
            IS
                RCCOMPANUL  FA_COMPANUL%ROWTYPE;
                RCCONSECUTIVO  CONSECUT%ROWTYPE;
                CNUPROGRAMA CONSTANT NUMBER := 500;
            BEGIN

                PKERRORS.PUSH('CT_BoCertificate.GetFiscalNumber.ObtSiguienteNumFiscal.AnularConsecutivo');
                UT_TRACE.TRACE('INICIO CT_BoCertificate.GetFiscalNumber.ObtSiguienteNumFiscal.AnularConsecutivo',10);

                
                RCCONSECUTIVO := IRCCONSECUT;

                RCCONSECUTIVO.CONSACTI := PKCONSTANTE.NO;
                
                PKTBLCONSECUT.UPRECORD (RCCONSECUTIVO);

                
                
                IF (RCCONSECUTIVO.CONSNUFI IS NOT NULL) THEN
                    
                    RCCOMPANUL.COANCODI := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL('SQ_FA_COMPANUL_COANCODI');
                    RCCOMPANUL.COANCONS := RCCONSECUTIVO.CONSCODI;
                    RCCOMPANUL.COANNUIN := RCCONSECUTIVO.CONSNUME;
                    RCCOMPANUL.COANNUFI := RCCONSECUTIVO.CONSNUFI;
                    RCCOMPANUL.COANOBSE := 'N�meros anulados por expiraci�n de la vigencia del consecutivo';
                    RCCOMPANUL.COANPROC := CNUPROGRAMA;
                    RCCOMPANUL.COANUSUA := PKGENERALSERVICES.FSBGETUSERNAME;
                    RCCOMPANUL.COANTERM := PKGENERALSERVICES.FSBGETTERMINAL;
                    RCCOMPANUL.COANFEAN := PKGENERALSERVICES.FDTGETSYSTEMDATE;

                    PKGENERALSERVICES.TRACEDATA('Coancons: '||RCCONSECUTIVO.CONSCODI);
                    PKGENERALSERVICES.TRACEDATA('Coannuin: '||RCCONSECUTIVO.CONSNUME);
                    PKGENERALSERVICES.TRACEDATA('Coannufi: '||RCCONSECUTIVO.CONSNUFI);

                    
                    PKTBLFA_COMPANUL.INSRECORD(RCCOMPANUL);
                END IF;

                PKERRORS.POP;

            EXCEPTION
                WHEN LOGIN_DENIED THEN
                    PKERRORS.POP;
                    RAISE LOGIN_DENIED;

                WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
                    
                    PKERRORS.POP;
                    RAISE PKCONSTANTE.EXERROR_LEVEL2;

                WHEN OTHERS THEN
                    PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
                    PKERRORS.POP;
                    RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

            END ANULARCONSECUTIVO;


        BEGIN
            PKERRORS.PUSH('CT_BoCertificate.GetFiscalNumber.ObtSiguienteNumFiscal');
            UT_TRACE.TRACE('INICIO CT_BoCertificate.GetFiscalNumber.ObtSiguienteNumFiscal',10);

            
            IF ( NOT GTBCONSECUTRI.EXISTS(INUNUMEAUTO) ) THEN
                

                
                RCCONSECUTRI := PKBCCONSECUT.FRCOBTCONSACTI(INUNUMEAUTO);

                
                GTBCONSECUTRI( INUNUMEAUTO ) := RCCONSECUTRI.RIROWID;

            END IF;

            
            RCCONSECUT := PKBCCONSECUT.FRCOBTREGISTROPORROWID( GTBCONSECUTRI(INUNUMEAUTO) );

            
            WHILE ( RCCONSECUT.CONSACTI = PKCONSTANTE.NO OR
                    RCCONSECUT.CONSFEFI < TRUNC(PKGENERALSERVICES.FDTGETSYSTEMDATE)) LOOP

                
                IF ( (RCCONSECUT.CONSFEFI < TRUNC(PKGENERALSERVICES.FDTGETSYSTEMDATE)) AND
                     (RCCONSECUT.CONSACTI <> PKCONSTANTE.NO )) THEN
                    
                    ANULARCONSECUTIVO(RCCONSECUT);
                END IF;

                
                RCCONSECUTRI := PKBCCONSECUT.FRCOBTCONSACTI(INUNUMEAUTO);

                
                GTBCONSECUTRI( INUNUMEAUTO ) := RCCONSECUTRI.RIROWID;

                
                RCCONSECUT := PKBCCONSECUT.FRCOBTREGISTROPORROWID( RCCONSECUTRI.RIROWID );

            END LOOP;

            
            ONUCONSNUME := RCCONSECUT.CONSNUME;

            
            ONUCONSCODI := RCCONSECUT.CONSCODI;

            
            OSBCONSSERI := RCCONSECUT.CONSSERI;

            
            
            IF ((RCCONSECUT.CONSNUME = RCCONSECUT.CONSNUFI) OR
                (RCCONSECUT.CONSNUME = CNUNUM_MAX_VALIDO)) THEN
                
                RCCONSECUT.CONSACTI := PKCONSTANTE.NO;
            ELSE
                
                RCCONSECUT.CONSNUME := RCCONSECUT.CONSNUME + 1;
            END IF;

            PKGENERALSERVICES.TRACEDATA('nuevo consnume '||RCCONSECUT.CONSNUME);

            
            PKTBLCONSECUT.UPRECORD(RCCONSECUT);


            PKERRORS.POP;
        EXCEPTION
            WHEN LOGIN_DENIED THEN
                PKERRORS.POP;
                RAISE LOGIN_DENIED;

            WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
                
                PKERRORS.POP;
                RAISE PKCONSTANTE.EXERROR_LEVEL2;

            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
        END OBTSIGUIENTENUMFISCAL;

    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BoCertificate.GetFiscalNumber',13);
        PKERRORS.PUSH('CT_BoCertificate.GetFiscalNumber');

        PKGENERALSERVICES.TRACEDATA('isbToken: '||ISBTOKEN);
        PKGENERALSERVICES.TRACEDATA('inuComprobante: '||INUCOMPROBANTE);
        PKGENERALSERVICES.TRACEDATA('isbTieneImpu: '||ISBTIENEIMPU);
        PKGENERALSERVICES.TRACEDATA('inuTipoDocu: '||INUTIPODOCU);
        PKGENERALSERVICES.TRACEDATA('inuContrator: '||INUCONTRATOR);
        PKGENERALSERVICES.TRACEDATA('inuEmpresa: '||INUEMPRESA);

        
        SBIXCONFCRTC := INUEMPRESA || '|' || INUTIPODOCU;

        
        IF ( GTBCONFCRTC.EXISTS(SBIXCONFCRTC) ) THEN
            SBCOCRTICO := GTBCONFCRTC(SBIXCONFCRTC).COCRTICO;
            SBCOCRCAIM := GTBCONFCRTC(SBIXCONFCRTC).COCRCAIM;
       ELSE
        
            
            RCCONFCRTC := FA_BCCONFCRTC.FRCOBTCONFIGURACION(INUEMPRESA, INUTIPODOCU);
            
            GTBCONFCRTC(SBIXCONFCRTC).COCRCAIM := RCCONFCRTC.COCRCAIM;
            GTBCONFCRTC(SBIXCONFCRTC).COCRTICO := RCCONFCRTC.COCRTICO;

            SBCOCRCAIM := RCCONFCRTC.COCRCAIM;
            SBCOCRTICO := RCCONFCRTC.COCRTICO;
        END IF;

        IF ( INUCONTRATOR IS NOT NULL ) THEN
            
            RCCONTRATISTA := DAGE_CONTRATISTA.FRCGETRCDATA(INUCONTRATOR);
        END IF;

        PKGENERALSERVICES.TRACEDATA('Cocrtico: '||SBCOCRTICO);

        
        IF ( SBCOCRTICO = PKCONSTANTE.SI ) THEN
            
            
            NUTIPOCONT := RCCONTRATISTA.ID_TIPOCONTRIBUYENTE;

        
        ELSE
            NUTIPOCONT := PKCONSTANTE.NULLNUM;
        END IF;

        PKGENERALSERVICES.TRACEDATA('TipoCont: '||NUTIPOCONT);

        PKGENERALSERVICES.TRACEDATA('Cocrcaim: '||SBCOCRCAIM);

        
        IF ( SBCOCRCAIM = PKCONSTANTE.SI) THEN
            
            
            
            IF ( INUCOMPROBANTE IS NOT NULL ) THEN
                
                IF ( ISBTOKEN = PKCONSECUTIVEMGR.GCSBTOKENFACTURA ) THEN
                    
                    TBCARGIMPU := FA_BCNUMERAUTORIZADA.FTBOBTCARGOSIMPFACT( INUCOMPROBANTE );
                ELSE
                    
                    IF ( ISBTOKEN = PKCONSECUTIVEMGR.GCSBTOKENNOTA ) THEN
                        
                        TBCARGIMPU := FA_BCNUMERAUTORIZADA.FTBOBTCARGOSIMPNOTA( INUCOMPROBANTE );
                    END IF;
                END IF;

                
                IF ( TBCARGIMPU.CARGNUSE.FIRST IS NOT NULL ) THEN
                    
                    SBTIENEIMPU := PKCONSTANTE.SI;
                ELSE
                    
                    SBTIENEIMPU := PKCONSTANTE.NO;
                END IF;

            
            
            ELSE
                SBTIENEIMPU := ISBTIENEIMPU;
            END IF;

        
        ELSE
            SBTIENEIMPU := PKCONSTANTE.NULLSB;
        END IF;

        PKGENERALSERVICES.TRACEDATA('TieneImpue: '||SBTIENEIMPU);

        
        SBIXCONFTICO := INUEMPRESA || '|' || INUTIPODOCU || '|' || NUTIPOCONT ||
                        '|' || SBTIENEIMPU;

        
        IF ( GTBCONFTICO.EXISTS(SBIXCONFTICO) ) THEN
            ONUTIPOCOMP := GTBCONFTICO(SBIXCONFTICO);
        ELSE
            
            ONUTIPOCOMP := FA_BCCONFTICO.FNUOBTTIPOCOMPPORCRIT ( INUEMPRESA,
                                                                INUTIPODOCU,
                                                                NUTIPOCONT,
                                                                SBTIENEIMPU );
            GTBCONFTICO(SBIXCONFTICO) := ONUTIPOCOMP;
        END IF;

        
        SBIXCONFCRNA := INUEMPRESA || '|' || ONUTIPOCOMP;

        
        IF ( GTBCONFCRNA.EXISTS(SBIXCONFCRNA) ) THEN
            SBCOCRPUEM := GTBCONFCRNA(SBIXCONFCRNA).COCRPUEM;
            SBCOCRTIAU := GTBCONFCRNA(SBIXCONFCRNA).COCRTIAU;

        ELSE
            
            RCCONFCRNA := FA_BCCONFCRNA.FRCOBTCONFIGURACION(INUEMPRESA, ONUTIPOCOMP);
            
            GTBCONFCRNA(SBIXCONFCRNA).COCRPUEM := RCCONFCRNA.COCRPUEM;
            GTBCONFCRNA(SBIXCONFCRNA).COCRTIAU := RCCONFCRNA.COCRTIAU;

            SBCOCRPUEM := RCCONFCRNA.COCRPUEM;
            SBCOCRTIAU := RCCONFCRNA.COCRTIAU;
        END IF;

        PKGENERALSERVICES.TRACEDATA('Cocrpuem: '||SBCOCRPUEM);
        PKGENERALSERVICES.TRACEDATA('Cocrtiau: '||SBCOCRTIAU);

        IF ( ISBTOKEN = PKCONSECUTIVEMGR.GCSBTOKENRECIBO) THEN
            
            GE_BODATABASECONNECTION.GETTERMINAL(SBEQUIPO);

            RCCAJA := PKBCCA_CAJA.FRCRECORDBYMACHINNOEXCEP(SBEQUIPO);

            IF RCCAJA.CAJACODI IS NOT NULL THEN
                NUPUNTEMIS := RCCAJA.CAJAPUEM;
                NUTIPOIMPR := RCCAJA.CAJATIIM;

            ELSE
                NUPUNTEMIS := CNURECAUDOS_PUNTEMIS;
                NUTIPOIMPR := CNURECAUDOS_TIPOIMPR;

            END IF;

        ELSE
            
            
            
            PKBOFISCALNUMBER.OBTTIPOIMPRESION(NUPUNTEMIS, NUTIPOIMPR, BLESAUTOMATICA);

        END IF;

        
        
        IF ( SBCOCRPUEM = PKCONSTANTE.NO ) THEN
            NUPUNTEMIS := PKCONSTANTE.NULLNUM;
        END IF;

        
        IF ( SBCOCRTIAU = PKCONSTANTE.SI ) THEN
            
            NUTIPOAUTO := RCCONTRATISTA.ID_TIPOAUTORIZACION;
        NULL;
        
        ELSE
            NUTIPOAUTO := PKCONSTANTE.NULLNUM;
        END IF;

        PKGENERALSERVICES.TRACEDATA('Puntemis: '||NUPUNTEMIS);
        PKGENERALSERVICES.TRACEDATA('TipoImpr: '||NUTIPOIMPR);
        PKGENERALSERVICES.TRACEDATA('TipoAuto: '||NUTIPOAUTO);

        
        SBIXNUMEAUTO := INUEMPRESA || '|' || ONUTIPOCOMP || '|' || NUTIPOAUTO ||
                        '|' || NUPUNTEMIS || '|' || NUTIPOIMPR;

        
        IF ( GTBNUMEAUTO.EXISTS(SBIXNUMEAUTO) ) THEN
            NUNUMEAUTO := GTBNUMEAUTO(SBIXNUMEAUTO);
        ELSE
            
            NUNUMEAUTO := PKBCNUMEAUTO.FNUOBTNUMAUTOPORCRIT ( INUEMPRESA,
                                                                ONUTIPOCOMP,
                                                                NUTIPOAUTO,
                                                                NUPUNTEMIS,
                                                                NUTIPOIMPR );
            GTBNUMEAUTO(SBIXNUMEAUTO) := NUNUMEAUTO;
        END IF;

        PKGENERALSERVICES.TRACEDATA('Numeauto: '||NUNUMEAUTO);

        
        OBTSIGUIENTENUMFISCAL(NUNUMEAUTO, ONUNUMAUTORIZADO, OSBSERIE, ONUCONSECUTI);

        PKERRORS.POP;
        
        UT_TRACE.TRACE('FIN CT_BoCertificate.GetFiscalNumber',13);
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETFISCALNUMBER;

    












































    PROCEDURE REVERTCERTIFICATE
    (
        INUCERTIFICATEID    IN  GE_ACTA.ID_ACTA%TYPE,
        IBLDELETECERT       IN  BOOLEAN DEFAULT TRUE
    )
    IS
        RCCERTIFICATE DAGE_ACTA.STYGE_ACTA;
        NUVALORLIQCONTRATO GE_CONTRATO.VALOR_LIQUIDADO%TYPE;
        NUVALORNOLIQCONTRATO    GE_CONTRATO.VALOR_NO_LIQUIDADO%TYPE;
        
        NUESTIMCOSTTOT          OR_ORDER.ESTIMATED_COST%TYPE := 0;
        
        PROCEDURE DELCONSIGNMENT
        IS
            TBDETAILSWITHORDER CT_BCCERTIFICATE.TYTBDETAILSWITHORDER;

            NUREALAMOUNT       NUMBER;
            NULEFTOVER         NUMBER;

            NUITEMCLASSIFID    GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE;
        BEGIN
            
            CT_BCCERTIFICATE.GETDETAILSWITHORDER(INUCERTIFICATEID,
                                                 TBDETAILSWITHORDER);

            IF (TBDETAILSWITHORDER.COUNT = 0) THEN
                RETURN;
            END IF;

            
            FOR N IN TBDETAILSWITHORDER.FIRST..TBDETAILSWITHORDER.LAST LOOP
                
                
                
                NUITEMCLASSIFID := DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(TBDETAILSWITHORDER(N).ITEMS_ID);
                IF (NUITEMCLASSIFID NOT IN(OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY,
                                           OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF,
                                           CT_BOCONSTANTS.FNUGETOBLIGATIONSITEMCLASSIF)) THEN

                    GE_BOITEMSCONSIGNMT.REVERTITEMCONSIGNMT(TBDETAILSWITHORDER(N).OPERATING_UNIT_ID,
                                                            TBDETAILSWITHORDER(N).ITEMS_ID,
                                                            RCCERTIFICATE.FECHA_ULT_ACTUALIZAC,
                                                            TBDETAILSWITHORDER(N).AMOUNT,
                                                            NUREALAMOUNT);

                    NULEFTOVER := TBDETAILSWITHORDER(N).AMOUNT - NUREALAMOUNT;
                    
                    IF (NULEFTOVER > 0) THEN
                        
                        GE_BOITEMSCONSIGNMT.REVERTITEMCONSIGNMT(TBDETAILSWITHORDER(N).OPERATING_UNIT_ID,
                                                                TBDETAILSWITHORDER(N).ITEMS_ID,
                                                                UT_DATE.FDTSYSDATE,
                                                                NULEFTOVER,
                                                                NUREALAMOUNT);
                                                                
                        NULEFTOVER := NULEFTOVER - NUREALAMOUNT;
                    END IF;

                    
                    IF (NULEFTOVER > 0) THEN
                        
                        ERRORS.SETERROR(7382,
                                        INUCERTIFICATEID||'|'||TBDETAILSWITHORDER(N).ITEMS_ID||'|'||TBDETAILSWITHORDER(N).DETAIL_ID);
                        RAISE EX.CONTROLLED_ERROR;
                    END IF;

                    
                    IF (OR_BCORDER.FBLORDERHASACTIVITY(TBDETAILSWITHORDER(N).ORDER_ID,
                                                       CNUCONSIGMENT_ACTIVITY)) THEN
                        
                        CT_BCCERTIFICATE.DELETEORDER(TBDETAILSWITHORDER(N).ORDER_ID);
                        
                    END IF;
                END IF;
            END LOOP;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END DELCONSIGNMENT;
    BEGIN
        DAGE_ACTA.GETRECORD(INUCERTIFICATEID,
                            RCCERTIFICATE);

        
        IF (RCCERTIFICATE.ESTADO = CT_BOCONSTANTS.FSBGETCLOSEDCERTIFSTATUS) THEN
            ERRORS.SETERROR(6862,
                            INUCERTIFICATEID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (RCCERTIFICATE.ID_CONTRATO IS NOT NULL) AND (NVL(RCCERTIFICATE.VALOR_LIQUIDADO,0) <> 0) THEN
            

            NUVALORLIQCONTRATO := NVL(DAGE_CONTRATO.FNUGETVALOR_LIQUIDADO(RCCERTIFICATE.ID_CONTRATO), 0);

            
            DAGE_CONTRATO.UPDVALOR_LIQUIDADO(RCCERTIFICATE.ID_CONTRATO, NUVALORLIQCONTRATO - RCCERTIFICATE.VALOR_LIQUIDADO);

            
            NUESTIMCOSTTOT := NVL(CT_BCCONTRACT.FNUGETESTIMCOSTBYCONT(RCCERTIFICATE.ID_ACTA),0);

            
            NUVALORNOLIQCONTRATO := NVL(DAGE_CONTRATO.FNUGETVALOR_NO_LIQUIDADO(RCCERTIFICATE.ID_CONTRATO, 0), 0);

            
            NUVALORNOLIQCONTRATO := NUVALORNOLIQCONTRATO + NUESTIMCOSTTOT;

            
            DAGE_CONTRATO.UPDVALOR_NO_LIQUIDADO(RCCERTIFICATE.ID_CONTRATO, NUVALORNOLIQCONTRATO);

        END IF;

        
        IF (RCCERTIFICATE.ID_TIPO_ACTA = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE) THEN
            
            DELCONSIGNMENT;
        END IF;
        
        
        CT_BCCERTIFICATE.UPDATECERTLIQORDERS(INUCERTIFICATEID);
        
        
        CT_BONOVELTY.DELAUTONOVELTYBYCERT(INUCERTIFICATEID);
        
        IF(IBLDELETECERT) THEN
            
            CT_BCCERTIFICATE.UPDATECERTLIQEXCLORDERS(INUCERTIFICATEID);
        END IF;
        
        
        CT_BOSIMPLECONDITION.DELSIMPLEORDERBYCERT(INUCERTIFICATEID);

        
        CT_BCCERTIFICATE.DELORDERSFROMCERTIF(INUCERTIFICATEID);

        
        CT_BCCERTIFICATE.DELAUTOGENDETAILSFROMCERTIF(INUCERTIFICATEID);

        
        
        CT_BOPROCESSLOG.DELPROCESLOGBYCRIT(RCCERTIFICATE.ID_CONTRATO,
                                           RCCERTIFICATE.ID_PERIODO,
                                           CT_BOPROCESSLOG.CNUERRORDATNOTPROCESS);





        
        IF (CT_BCCERTIFICATE.FBLHASDETAILS(INUCERTIFICATEID)) THEN
            
            CT_BCCERTIFICATE.UPDCERTIFICATE(INUCERTIFICATEID,
                                            CT_BCCERTIFICATE.FNUCALCULATECERTIFTOTALVALUE(INUCERTIFICATEID),
                                            UT_DATE.FDTSYSDATE);
        ELSE
            IF (IBLDELETECERT) THEN
                
                DAGE_ACTA.DELRECORD(INUCERTIFICATEID);
            END IF;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REVERTCERTIFICATE;
    
    























    PROCEDURE UPDCERTIFICATEDETAIL(
      INUDETALLEACTA  IN GE_DETALLE_ACTA.ID_DETALLE_ACTA%TYPE,
      INUIDITEMS      IN GE_DETALLE_ACTA.ID_ITEMS%TYPE,
      ISBDESCITEM     IN GE_DETALLE_ACTA.DESCRIPCION_ITEMS%TYPE
    )
    IS
        RCDETALLEACTA         DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;
        RCACTA                DAGE_ACTA.STYGE_ACTA;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] CT_BoCertificate.UpdCertificateDetail',15);

        
        IF (INUDETALLEACTA IS NULL)THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CSBERR_REQUIERD_FIELD,'ID_DETALLE_ACTA');
        END IF;

        
        IF (INUIDITEMS IS NULL)THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CSBERR_REQUIERD_FIELD,'ID_ITEMS');
        END IF;

        
        RCDETALLEACTA := DAGE_DETALLE_ACTA.FRCGETRECORD(INUDETALLEACTA);

        
        IF (RCDETALLEACTA.TIPO_GENERACION != CT_BOCONSTANTS.FSBGETMANUALDETGENTYPE)THEN
            GE_BOERRORS.SETERRORCODE(CSBERR_ONLY_MANUAL_CERT);
        END IF;

        
        RCACTA := DAGE_ACTA.FRCGETRECORD(RCDETALLEACTA.ID_ACTA);

        
        IF (RCACTA.ESTADO = CT_BOCONSTANTS.FSBGETCLOSEDCERTIFSTATUS)THEN
           GE_BOERRORS.SETERRORCODE(CSBERR_CERT_CLOSED_2EDIT);
        END IF;

        
        RCDETALLEACTA.ID_ITEMS          := INUIDITEMS;
        RCDETALLEACTA.DESCRIPCION_ITEMS := ISBDESCITEM;
        RCDETALLEACTA.ID_UNIDAD_MEDIDA  := DAGE_ITEMS.FNUGETMEASURE_UNIT_ID(INUIDITEMS);

        
        DAGE_DETALLE_ACTA.UPDRECORD(RCDETALLEACTA);
        
        DAGE_ACTA.UPDFECHA_ULT_ACTUALIZAC(RCACTA.ID_ACTA,UT_DATE.FDTSYSDATE);

        UT_TRACE.TRACE('[END] CT_BoCertificate.UpdCertificateDetail',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CT_BCCONDITIONS.TBCONDITBYCONTRACTTYPE.DELETE;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CT_BCCONDITIONS.TBCONDITBYCONTRACTTYPE.DELETE;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDCERTIFICATEDETAIL;


    

























    PROCEDURE INSCERTIFICATEDETAIL
    (
      INUIDITEMS       IN GE_DETALLE_ACTA.ID_ITEMS%TYPE,
      ISBDESCITEM      IN GE_DETALLE_ACTA.DESCRIPCION_ITEMS%TYPE,
      INUIDACTA        IN GE_DETALLE_ACTA.ID_ACTA%TYPE,
      ONUDETALLEACTA   OUT GE_DETALLE_ACTA.ID_DETALLE_ACTA%TYPE
    )
    IS
        RCDETALLEACTA         DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;
        RCITEMS               DAGE_ITEMS.STYGE_ITEMS;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] CT_BoCertificate.InsCertificateDetail',15);

        
        IF (INUIDACTA IS NULL)THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CSBERR_REQUIERD_FIELD,'ID_ACTA');
        END IF;

        
        IF (INUIDITEMS IS NULL)THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CSBERR_REQUIERD_FIELD,'ID_ITEMS');
        END IF;

        
        ONUDETALLEACTA := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;

        
        RCITEMS :=  DAGE_ITEMS.FRCGETRECORD(INUIDITEMS);

        
        RCDETALLEACTA.ID_DETALLE_ACTA       := ONUDETALLEACTA;
        RCDETALLEACTA.ID_ITEMS              := INUIDITEMS;
        RCDETALLEACTA.DESCRIPCION_ITEMS     := NVL(ISBDESCITEM, RCITEMS.DESCRIPTION);
        RCDETALLEACTA.CANTIDAD              := NULL;
        RCDETALLEACTA.VALOR_UNITARIO        := NULL;
        RCDETALLEACTA.VALOR_TOTAL           := NULL;
        RCDETALLEACTA.ID_ACTA               := INUIDACTA;
        RCDETALLEACTA.ID_LISTA_UNIT_COSTO   := NULL;
        RCDETALLEACTA.ID_ORDEN              := NULL;
        RCDETALLEACTA.CONDITION_BY_PLAN_ID  := NULL;
        RCDETALLEACTA.TIPO_GENERACION       := CT_BOCONSTANTS.FSBGETMANUALDETGENTYPE;
        RCDETALLEACTA.PORCEN_CUMPLIMIENTO   := NULL;
        RCDETALLEACTA.PORCEN_PONDERADO      := NULL;
        RCDETALLEACTA.ID_UNIDAD_MEDIDA      := RCITEMS.MEASURE_UNIT_ID;

        DAGE_DETALLE_ACTA.INSRECORD(RCDETALLEACTA);

        
        DAGE_ACTA.UPDFECHA_ULT_ACTUALIZAC(INUIDACTA,UT_DATE.FDTSYSDATE);

        UT_TRACE.TRACE('[END] CT_BoCertificate.InsCertificateDetail',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CT_BCCONDITIONS.TBCONDITBYCONTRACTTYPE.DELETE;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CT_BCCONDITIONS.TBCONDITBYCONTRACTTYPE.DELETE;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSCERTIFICATEDETAIL;

    






















    PROCEDURE DELCERTIFICATEDETAIL(
      INUDETALLEACTA   IN GE_DETALLE_ACTA.ID_DETALLE_ACTA%TYPE
    )
    IS
        RCDETALLEACTA          DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;
        RCACTA                 DAGE_ACTA.STYGE_ACTA;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] CT_BoCertificate.DelCertificateDetail',15);
        
        SAVEPOINT BEFOREDEL;
        
        
        IF (INUDETALLEACTA IS NULL)
        THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CSBERR_REQUIERD_FIELD,'ID_DETALLE_ACTA');
        END IF;

        
        RCDETALLEACTA := DAGE_DETALLE_ACTA.FRCGETRECORD(INUDETALLEACTA);

        
        IF (RCDETALLEACTA.TIPO_GENERACION != CT_BOCONSTANTS.FSBGETMANUALDETGENTYPE)
        THEN
            GE_BOERRORS.SETERRORCODE(CSBERR_ONLY_MANUAL_CERT);
        END IF;

        
        RCACTA := DAGE_ACTA.FRCGETRECORD(RCDETALLEACTA.ID_ACTA);

        
        IF (RCACTA.ESTADO = CT_BOCONSTANTS.FSBGETCLOSEDCERTIFSTATUS)
        THEN
           GE_BOERRORS.SETERRORCODE(CSBERR_CERT_CLOSED_2DEL);
        END IF;

        
        RCACTA.VALOR_TOTAL := RCACTA.VALOR_TOTAL - RCDETALLEACTA.VALOR_TOTAL;

        
        DAGE_DETALLE_ACTA.DELRECORD(INUDETALLEACTA);

        
        IF NOT CT_BCCERTIFICATE.FBLHASDETAILSBYORDER(RCDETALLEACTA.ID_ACTA,
                                                     RCDETALLEACTA.ID_ORDEN)
        THEN
            IF DACT_ORDER_CERTIFICA.FBLEXIST(RCDETALLEACTA.ID_ORDEN,RCDETALLEACTA.ID_ACTA)
            THEN
                DACT_ORDER_CERTIFICA.DELRECORD(RCDETALLEACTA.ID_ORDEN,RCDETALLEACTA.ID_ACTA);
            END IF;
        END IF;

        
        IF CT_BCCERTIFICATE.FBLHASDETAILS(RCDETALLEACTA.ID_ACTA)THEN
            
            RCACTA.FECHA_ULT_ACTUALIZAC := UT_DATE.FDTSYSDATE;
            DAGE_ACTA.UPDRECORD(RCACTA);
        ELSE
            DAGE_ACTA.DELRECORD(RCACTA.ID_ACTA);
        END IF;

        UT_TRACE.TRACE('[END] CT_BoCertificate.DelCertificateDetail',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CT_BCCONDITIONS.TBCONDITBYCONTRACTTYPE.DELETE;
            ROLLBACK TO SAVEPOINT BEFOREDEL;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CT_BCCONDITIONS.TBCONDITBYCONTRACTTYPE.DELETE;
            ERRORS.SETERROR;
            ROLLBACK TO SAVEPOINT BEFOREDEL;
            RAISE EX.CONTROLLED_ERROR;
    END DELCERTIFICATEDETAIL;


    















    PROCEDURE ADDCERTIFTOPRINTTABLEPL
    (
        INUACTAID   IN  GE_ACTA.ID_ACTA%TYPE
    )
    IS
        
        NUINDICE    NUMBER;
    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BoCertificate.addCertifToPrintTablePL',10);
        NUINDICE := NVL(CT_BCCERTIFICATE.TBPRINTTABLEPL.LAST,0) + 1;
        CT_BCCERTIFICATE.TBPRINTTABLEPL.EXTEND;
        CT_BCCERTIFICATE.TBPRINTTABLEPL(NUINDICE) := GE_TYOBVARCHAR2( TO_CHAR(INUACTAID) );
        UT_TRACE.TRACE('FIN CT_BoCertificate.addCertifToPrintTablePL',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDCERTIFTOPRINTTABLEPL;
    
    













    PROCEDURE CLEARPRINTTABLEPL
    IS
    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BoCertificate.clearPrintTablePL',10);
        
        
        CT_BCCERTIFICATE.TBPRINTTABLEPL.DELETE;
        
        UT_TRACE.TRACE('FIN CT_BoCertificate.clearPrintTablePL',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLEARPRINTTABLEPL;
    
    


















    PROCEDURE VALRELATEDCERTIFICATES
    (
        INUCERTIFICATEID  IN  GE_ACTA.ID_ACTA%TYPE,
        ONUERRORCODE      OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESSAGE   OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS
        NUCONTRACTID        GE_CONTRATO.ID_CONTRATO%TYPE;
        TBCERTIFICATES      DAGE_ACTA.TYTBID_ACTA;
        SBCERTIFICATESLIST  VARCHAR2(32000);
    
        FUNCTION FSBGETCERTIFICATESLIST
        RETURN VARCHAR2
        IS
            NUCERTIFICATEID GE_ACTA.ID_ACTA%TYPE;
        BEGIN
            FOR N IN TBCERTIFICATES.FIRST..TBCERTIFICATES.LAST LOOP
                NUCERTIFICATEID := TBCERTIFICATES(N);
                IF (N = 1) THEN
                    SBCERTIFICATESLIST := SBCERTIFICATESLIST || NUCERTIFICATEID;
                ELSIF (N = TBCERTIFICATES.LAST) THEN
                       SBCERTIFICATESLIST := SBCERTIFICATESLIST ||', y '|| NUCERTIFICATEID;
                ELSE
                    SBCERTIFICATESLIST := SBCERTIFICATESLIST ||', '|| NUCERTIFICATEID;
                END IF;
            END LOOP;

            RETURN SBCERTIFICATESLIST;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FSBGETCERTIFICATESLIST;
    BEGIN
        ONUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
        OSBERRORMESSAGE := NULL;
    
        NUCONTRACTID := DAGE_ACTA.FNUGETID_CONTRATO(INUCERTIFICATEID);
    
        
        
        CT_BCCERTIFICATE.RELATEDCERTIFSBYCONTRACT(INUCERTIFICATEID,
                                                  NUCONTRACTID,
                                                  TBCERTIFICATES);

        
        
        
        IF (TBCERTIFICATES.COUNT > 0) THEN
            ERRORS.SETERROR(8562,
                            INUCERTIFICATEID||'|'||FSBGETCERTIFICATESLIST);
            ERRORS.GETERROR(ONUERRORCODE,
                            OSBERRORMESSAGE);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALRELATEDCERTIFICATES;
    
    





















































    PROCEDURE REGENERATECERTIFICATE
    (
        INUCERTIFICATEID  IN  GE_ACTA.ID_ACTA%TYPE
    )
    IS
    BEGIN
       UT_TRACE.TRACE('[INICIO] RegenerateCertificate', 5);
       
       CT_BOCERTIFICATE.REGENERATEALLOBLIGATION(INUCERTIFICATEID);
         
       UT_TRACE.TRACE('FIN RegenerateCertificate', 5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGENERATECERTIFICATE;

    























    PROCEDURE CHANGETOPENDCERTSBYORD
    (
        INUORDERID            IN  OR_ORDER.ORDER_ID%TYPE,
        IDTFINALEXCLUSIONDATE IN  CT_EXCLUDED_ORDER.FINAL_EXCLUSION_DATE%TYPE
    )
    IS
      NUIDEXRESUL            BINARY_INTEGER;
      NUIDEXNOVELTY          BINARY_INTEGER;
      SBCOMMENT              OR_ORDER_COMMENT.ORDER_COMMENT%TYPE;
      NUCOMMENTTYPEID        OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE;
      SBNEWCOMMENT           OR_ORDER_COMMENT.ORDER_COMMENT%TYPE;
      NUORDERCOMMENTID       CT_EXCLUDED_ORDER.ORDER_COMMENT_ID%TYPE;
      ONUORDERCOMMENTID      OR_ORDER_COMMENT.ORDER_COMMENT_ID%TYPE;
      RCEXCLUDEORDER         DACT_EXCLUDED_ORDER.STYCT_EXCLUDED_ORDER;
      TBPENDCERTSBYORD       GE_BCCERTIFICATE.TYTBRELATEDORDER;
      TBCERTSBYORDNOVELTY    GE_BCCERTIFICATE.TYTBRELATEDORDER;
    BEGIN
    
         
         TBPENDCERTSBYORD:=GE_BCCERTIFICATE.FTBRELATANDNOTVERIFORD(INUORDERID);
         
          
         TBCERTSBYORDNOVELTY:= GE_BCCERTIFICATE.FTBRELATNOBVELTY(INUORDERID);

         
         NUORDERCOMMENTID:=DACT_EXCLUDED_ORDER.FNUGETORDER_COMMENT_ID(INUORDERID);
         NUCOMMENTTYPEID:= DAOR_ORDER_COMMENT.FNUGETCOMMENT_TYPE_ID(NUORDERCOMMENTID);
         
         
         SBCOMMENT:= DAOR_ORDER_COMMENT.FSBGETORDER_COMMENT(NUORDERCOMMENTID);
         
         NUIDEXRESUL:=TBPENDCERTSBYORD.FIRST;
         IF (TBPENDCERTSBYORD.COUNT>0) THEN
            LOOP
              
              GE_BOCERTIFICATE.LOCKCERTIFICATEBYPK(TBPENDCERTSBYORD(NUIDEXRESUL).CERTIFICATE_ID);
              
              DAGE_ACTA.UPDIS_PENDING(TBPENDCERTSBYORD(NUIDEXRESUL).CERTIFICATE_ID,CT_BOCONSTANTS.CNUIS_PENDING);
              
              CT_BOPROCESSLOG.REGISTERPROCESSLOG
              (
                INUORDERID,
                CT_BOCONSTANTS.CNUORDER_EXCLUDE_ERR,
                IDTFINALEXCLUSIONDATE
              );

              SBNEWCOMMENT:=('REF :'||INUORDERID||','||SBCOMMENT);

              
              OR_BOORDERCOMMENT.ADDCOMMENT
              (
                TBPENDCERTSBYORD(NUIDEXRESUL).ORDER_ID,
                NUCOMMENTTYPEID,
                SBNEWCOMMENT,
                OR_BOCONSTANTS.CSBNO,
                ONUORDERCOMMENTID
              );

              
                RCEXCLUDEORDER.ORDER_ID:= TBPENDCERTSBYORD(NUIDEXRESUL).ORDER_ID;
                RCEXCLUDEORDER.FINAL_EXCLUSION_DATE:=IDTFINALEXCLUSIONDATE;
                RCEXCLUDEORDER.ORDER_COMMENT_ID:=ONUORDERCOMMENTID;

               
               DACT_EXCLUDED_ORDER.INSRECORD(RCEXCLUDEORDER);
               
               EXIT WHEN TBPENDCERTSBYORD.NEXT(NUIDEXRESUL) IS NULL;
                NUIDEXRESUL:=NUIDEXRESUL+1;

            END LOOP;
         END IF;
         
         NUIDEXNOVELTY:=TBCERTSBYORDNOVELTY.FIRST;
         IF (TBCERTSBYORDNOVELTY.COUNT>0) THEN
            LOOP
              
              GE_BOCERTIFICATE.LOCKCERTIFICATEBYPK(TBCERTSBYORDNOVELTY(NUIDEXNOVELTY).CERTIFICATE_ID);
              
              DAGE_ACTA.UPDIS_PENDING(TBCERTSBYORDNOVELTY(NUIDEXNOVELTY).CERTIFICATE_ID,CT_BOCONSTANTS.CNUIS_PENDING);
              
              CT_BOPROCESSLOG.REGISTERPROCESSLOG
              (
                INUORDERID,
                CT_BOCONSTANTS.CNUORDER_EXCLUDE_ERR,
                IDTFINALEXCLUSIONDATE
              );
              
              SBNEWCOMMENT:=('REF :'||INUORDERID||','||SBCOMMENT);
              
              OR_BOORDERCOMMENT.ADDCOMMENT
              (
                TBCERTSBYORDNOVELTY(NUIDEXNOVELTY).ORDER_ID,
                NUCOMMENTTYPEID,
                SBNEWCOMMENT,
                OR_BOCONSTANTS.CSBNO,
                ONUORDERCOMMENTID
              );

              
                RCEXCLUDEORDER.ORDER_ID:= TBCERTSBYORDNOVELTY(NUIDEXNOVELTY).ORDER_ID;
                RCEXCLUDEORDER.FINAL_EXCLUSION_DATE:=IDTFINALEXCLUSIONDATE;
                RCEXCLUDEORDER.ORDER_COMMENT_ID:=ONUORDERCOMMENTID;

               
               DACT_EXCLUDED_ORDER.INSRECORD(RCEXCLUDEORDER);

               EXIT WHEN TBCERTSBYORDNOVELTY.NEXT(NUIDEXNOVELTY) IS NULL;
                NUIDEXNOVELTY:=NUIDEXNOVELTY+1;

            END LOOP;
         END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END CHANGETOPENDCERTSBYORD;
    
    



















     PROCEDURE  GETEXCLUSIONINFBYORDER
    (
      INUORDERID             IN    OR_ORDER.ORDER_ID%TYPE,
      ONUCOMMENTTYPEID       OUT   OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE,
      OSBCOMMENT             OUT   OR_ORDER_COMMENT.ORDER_COMMENT%TYPE ,
      ODTFINALEXCLUSIONDATE  OUT   CT_EXCLUDED_ORDER. FINAL_EXCLUSION_DATE%TYPE
    )
    IS
      RCEXCLUDEORDER         DACT_EXCLUDED_ORDER.STYCT_EXCLUDED_ORDER;
    BEGIN

       
       DACT_EXCLUDED_ORDER.GETRECORD(INUORDERID, RCEXCLUDEORDER);
       
       ONUCOMMENTTYPEID:=DAOR_ORDER_COMMENT.FNUGETCOMMENT_TYPE_ID(RCEXCLUDEORDER.ORDER_COMMENT_ID);
       
       OSBCOMMENT:= DAOR_ORDER_COMMENT.FSBGETORDER_COMMENT(RCEXCLUDEORDER.ORDER_COMMENT_ID);
       
       ODTFINALEXCLUSIONDATE:=RCEXCLUDEORDER.FINAL_EXCLUSION_DATE;
       

     EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
       
    END GETEXCLUSIONINFBYORDER;
    
    
    




















    PROCEDURE CREATESTATUSCERTICONTRACTOR
    (
        INUCERTIFICATETYPE   IN   GE_ACTA.ID_TIPO_ACTA%TYPE,
        INUCONTRACTORID      IN   GE_ACTA.CONTRACTOR_ID%TYPE,
        ISBCOMMENT           IN   GE_ACTA.COMMENT_%TYPE,
        INUCOMMENTTYPE       IN   GE_ACTA.COMMENT_TYPE_ID%TYPE,
        INUOPERATINGUNITID   IN   GE_ACTA.OPERATING_UNIT_ID%TYPE DEFAULT NULL
    )
    IS
        CNUREQUIRED_ATTRIBUTE CONSTANT NUMBER      := 116082;
        RCACTA                DAGE_ACTA.STYGE_ACTA; 
    BEGIN
        UT_TRACE.TRACE('INICIO CT_BoCertificate.CreateStatusCertiContractor',12);
        
        
        IF (INUCERTIFICATETYPE IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Tipo de Acta');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (INUCONTRACTORID IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Contratista');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (INUCOMMENTTYPE IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Tipo de Comentario');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (INUCERTIFICATETYPE IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Comentario');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        RCACTA.NOMBRE          :=   CT_BOCONSTANTS.FSBGETDESCCERTIFICATETYPE(INUCERTIFICATETYPE)|| ' ' ||
                                    DAGE_CONTRATISTA.FSBGETNOMBRE_CONTRATISTA(INUCONTRACTORID);
        RCACTA.ID_ACTA         :=   GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_ACTA', 'SEQ_GE_ACTA');

        RCACTA.ID_TIPO_ACTA       := INUCERTIFICATETYPE;
        RCACTA.FECHA_CREACION     := UT_DATE.FDTSYSDATE;
        RCACTA.ESTADO             := CT_BOCONSTANTS.FSBGETCLOSEDCERTIFSTATUS;
        RCACTA.CONTRACTOR_ID      := INUCONTRACTORID;
        RCACTA.OPERATING_UNIT_ID :=  INUOPERATINGUNITID;
        RCACTA.COMMENT_TYPE_ID    := INUCOMMENTTYPE;
        RCACTA.COMMENT_           := ISBCOMMENT;
        RCACTA.PERSON_ID          := GE_BOPERSONAL.FNUGETPERSONID;
        RCACTA.TERMINAL           := UT_SESSION.GETTERMINAL;

        
        DAGE_ACTA.INSRECORD(RCACTA);

        UT_TRACE.TRACE('FIN CT_BoCertificate.CreateStatusCertiContractor',12);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR CT_BoCertificate.CreateStatusCertiContractor',12);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others CT_BoCertificate.CreateStatusCertiContractor',12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATESTATUSCERTICONTRACTOR;

    
    





































    PROCEDURE CREATESTATUSCERTICONTRACT
    (
        INUCERTIFICATETYPE   IN   GE_ACTA.ID_TIPO_ACTA%TYPE,
        INUCONTRACTID        IN   GE_ACTA.CONTRACTOR_ID%TYPE,
        INUVALUETOTAL        IN   GE_ACTA.VALOR_TOTAL%TYPE,
        INUVALUEADVANCE      IN   GE_ACTA.VALUE_ADVANCE%TYPE,
        IDTINITIALDATE       IN   GE_ACTA.FECHA_INICIO%TYPE,
        IDTFINALDATE         IN   GE_ACTA.FECHA_FIN%TYPE,
        ISBCOMMENT           IN   GE_ACTA.COMMENT_%TYPE,
        INUCOMMENTTYPE       IN   GE_ACTA.COMMENT_TYPE_ID%TYPE
    )
    IS
        CNUREQUIRED_ATTRIBUTE CONSTANT NUMBER      := 116082;
        CNULESSORZER_VALERR   CONSTANT NUMBER      := 4784;
        CNUADVANGREATERVALU   CONSTANT NUMBER      := 110524;
        RCACTA                DAGE_ACTA.STYGE_ACTA; 
    BEGIN
        UT_TRACE.TRACE('INICIO CT_BoCertificate.CreateStatusCertiContract',12);

        
        IF (INUCERTIFICATETYPE IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Tipo de Acta');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUCONTRACTID IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Contrato');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUCOMMENTTYPE IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Tipo de Comentario');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUCERTIFICATETYPE IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Comentario');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUVALUETOTAL <= 0)THEN
            ERRORS.SETERROR(CNULESSORZER_VALERR,
                            'Valor Total');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUVALUEADVANCE <= 0)THEN
            ERRORS.SETERROR(CNULESSORZER_VALERR,
                            'Valor Anticipo');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        IF INUCERTIFICATETYPE <> CT_BOCONSTANTS.FNUGETOPENCERTITYPE
        AND INUCERTIFICATETYPE <> CT_BOCONSTANTS.FNUGETCHANGECERTITYPE
        THEN

            
            IF (IDTINITIALDATE IS NOT NULL) THEN
                IF ( TRUNC(IDTINITIALDATE ) < TRUNC( UT_DATE.FDTSYSDATE )) THEN
                     ERRORS.SETERROR(CNUERRORDATES2);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            END IF;

        END IF;


        
        IF (IDTINITIALDATE IS NOT NULL AND IDTFINALDATE IS NOT NULL) THEN
            IF ( TRUNC(IDTINITIALDATE ) > TRUNC( IDTFINALDATE ) ) THEN
                 ERRORS.SETERROR(CNUERRORDATES1);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        
        IF (INUVALUEADVANCE IS NOT NULL AND INUVALUETOTAL IS NOT NULL) THEN
            IF ( INUVALUEADVANCE  >=  INUVALUETOTAL ) THEN
                 ERRORS.SETERROR(CNUADVANGREATERVALU,
                            'Valor Anticipo|Valor Total');
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        
        RCACTA.NOMBRE          :=   CT_BOCONSTANTS.FSBGETDESCCERTIFICATETYPE(INUCERTIFICATETYPE)|| ' ' ||
                                    DAGE_CONTRATO.FSBGETDESCRIPCION(INUCONTRACTID);
        RCACTA.ID_ACTA         :=   GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_ACTA', 'SEQ_GE_ACTA');

        RCACTA.ID_TIPO_ACTA       := INUCERTIFICATETYPE;
        RCACTA.FECHA_CREACION     := UT_DATE.FDTSYSDATE;
        RCACTA.ESTADO             := CT_BOCONSTANTS.FSBGETCLOSEDCERTIFSTATUS;
        RCACTA.ID_CONTRATO        := INUCONTRACTID;
        RCACTA.VALOR_TOTAL        := INUVALUETOTAL;
        RCACTA.VALUE_ADVANCE      := INUVALUEADVANCE;
        RCACTA.FECHA_INICIO       := IDTINITIALDATE;
        RCACTA.FECHA_FIN          := IDTFINALDATE;
        RCACTA.COMMENT_TYPE_ID    := INUCOMMENTTYPE;
        RCACTA.COMMENT_           := ISBCOMMENT;
        RCACTA.PERSON_ID          := GE_BOPERSONAL.FNUGETPERSONID;
        RCACTA.TERMINAL           := UT_SESSION.GETTERMINAL;
        RCACTA.CONTRACTOR_ID      := DAGE_CONTRATO.FNUGETID_CONTRATISTA(INUCONTRACTID);
        
        DAGE_ACTA.INSRECORD(RCACTA);

        UT_TRACE.TRACE('FIN CT_BoCertificate.CreateStatusCertiContract',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR CT_BoCertificate.CreateStatusCertiContract',12);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others CT_BoCertificate.CreateStatusCertiContract',12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATESTATUSCERTICONTRACT;
    





















    PROCEDURE DEFINECONTRACT
    (
      INUORDERID       OR_ORDER.ORDER_ID%TYPE,
      INUCONTRACTID    OR_ORDER.DEFINED_CONTRACT_ID%TYPE
    )
    IS
        
        RCORDER     DAOR_ORDER.STYOR_ORDER;
        
        
        RCCONTRATO  DAGE_CONTRATO.STYGE_CONTRATO;
    BEGIN
        UT_TRACE.TRACE('INICIO CT_BoCertificate.DefineContract',10);

        
        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);

        
        
        RCCONTRATO :=  DAGE_CONTRATO.FRCGETRECORD(INUCONTRACTID);
        
        
        
        IF(CT_BCCONTRACTTASKTYPE.FBLHASTASKTYPESDEFINED(INUCONTRACTID,
            'C')) 
        THEN
            UT_TRACE.TRACE('si hay tipos de trabajo definidos por contrato',15);
            
            IF(NOT CT_BCCONTRACTTASKTYPE.FBLHASTASKTYPE(INUCONTRACTID,
            RCORDER.TASK_TYPE_ID, 'C')) 
            THEN
                
                GE_BOERRORS.SETERRORCODE(CSB_TASKTYPE_UNDEFINED);

            END IF;
        
        ELSIF (CT_BCCONTRACTTASKTYPE.FBLHASTASKTYPESDEFINED(RCCONTRATO.ID_TIPO_CONTRATO ,
            'T')) 
        THEN
            
            IF(NOT CT_BCCONTRACTTASKTYPE.FBLHASTASKTYPE(INUCONTRACTID,
            RCORDER.TASK_TYPE_ID,'T')) 
            THEN
                
                GE_BOERRORS.SETERRORCODE(CSB_TASKTYPE_UNDEFINED);
            END IF;
            UT_TRACE.TRACE('el tipo de trabajo est� definido por tipo de contrato',15);
        END IF;

        
        OR_BOORDER.UPDORDERCONTRACT(INUORDERID, INUCONTRACTID);

        UT_TRACE.TRACE('FIN CT_BoCertificate.DefineContract',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DEFINECONTRACT;
    
    















    PROCEDURE DELORDEREXCLUSION
    IS
      SBORDER_ID            GE_BOINSTANCECONTROL.STYSBVALUE;
      NUORDERID             CT_EXCLUDED_ORDER.ORDER_ID%TYPE;

    BEGIN
    
        
        SBORDER_ID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('OR_ORDER', 'ORDER_ID');
        NUORDERID  := UT_CONVERT.FNUCHARTONUMBER(SBORDER_ID);

        
        GE_BOCERTIFICATE.DELEXCLUDEORDER(NUORDERID);

        COMMIT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELORDEREXCLUSION;
    
   












    FUNCTION FNUISEXCLUDEORDER
    (
      INUORDERID   IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN NUMBER
    IS
    BEGIN
         IF(DACT_EXCLUDED_ORDER.FBLEXIST(INUORDERID))THEN
           IF ( UT_DATE.FDTTRUNCATEDATE(DACT_EXCLUDED_ORDER.FDTGETFINAL_EXCLUSION_DATE(INUORDERID))
                         >= UT_DATE.FDTTRUNCATEDATE(UT_DATE.FDTSYSDATE()))THEN
              RETURN   GE_BOCONSTANTS.CNUTRUE	;
           END IF;
        END IF;
        
          RETURN   GE_BOCONSTANTS.CNUFALSE;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END FNUISEXCLUDEORDER;
    
    












    FUNCTION FNUISVERIFIEDORDER
    (
      INUORDERID   IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN NUMBER
    IS
       NUVERIFIED  NUMBER(1);
    BEGIN
        
        OPEN  CT_BCCERTIFICATE.CUVERIFIEDORDER(INUORDERID);
        FETCH CT_BCCERTIFICATE.CUVERIFIEDORDER INTO  NUVERIFIED;
        CLOSE CT_BCCERTIFICATE.CUVERIFIEDORDER;
        
        IF (NUVERIFIED IS NOT NULL)THEN
           RETURN GE_BOCONSTANTS.CNUTRUE;
        ELSE
           RETURN GE_BOCONSTANTS.CNUFALSE;
        END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END FNUISVERIFIEDORDER;
    
    
    














    FUNCTION FBLVERIFYCERTIFICATE
    (
        INUCERTIFICATEID        IN   GE_ACTA.ID_ACTA%TYPE
    ) RETURN BOOLEAN
    IS
        
        CNUERROR_NOTEXIST_CERT      NUMBER := 901241;
        CNUERR_NOTVALID_STATUS      NUMBER := 901242;
    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BoCertificate.fblVerifyCertificate',7);
        
        
        
        IF ( NOT DAGE_ACTA.FBLEXIST(INUCERTIFICATEID) ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT
            (
                CNUERROR_NOTEXIST_CERT,
                INUCERTIFICATEID
            );
        END IF;

        
        IF ( DAGE_ACTA.FSBGETESTADO(INUCERTIFICATEID) <> GE_BOCONSTANTS.CSBACTA_CERRADA  ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT
            (
                CNUERR_NOTVALID_STATUS,
                INUCERTIFICATEID
            );
        END IF;
            
        RETURN TRUE;

        UT_TRACE.TRACE('FIN CT_BoCertificate.fblVerifyCertificate',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLVERIFYCERTIFICATE;


    














    FUNCTION FRFGETCERTIFPEDINGPAY
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BoCertificate.frfGetCertifPedingPay',7);
        
        RETURN CT_BCCERTIFICATE.FRFGETCERTIFPEDINGPAY;

        UT_TRACE.TRACE('FIN CT_BoCertificate.frfGetCertifPedingPay',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETCERTIFPEDINGPAY;
    
    






























































    PROCEDURE REGENERATEALLOBLIGATION
    (
        INUCERTIFICATEID  IN  GE_ACTA.ID_ACTA%TYPE
    )
    IS
        TBCERTIFICATES             DAGE_ACTA.TYTBID_ACTA;

        TBLIQCERTIFICATES          CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID; 
        TBBILLCERTIFICATES         CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID; 

        TBNOADMINBASELIQCERTIFS    CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID; 
        TBNOADMINBASEBILLCERTIFS   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID; 

        RCBASECERTIFICATE          DAGE_ACTA.STYGE_ACTA;
        
        TBORDERSVERIFIED           DACT_ORDER_CERTIFICA.TYTBCT_ORDER_CERTIFICA; 
        NUCERTINDEX                NUMBER;
        
        DTDATETOPROCESS            DATE;
        DTPERIODDATE               GE_PERIODO_CERT.FECHA_FINAL%TYPE;
        
        















        PROCEDURE SAVEVERORDERS
        (
            INUCERTTOADD IN GE_ACTA.ID_ACTA%TYPE
        )
        IS
            TBORDERSVER         DACT_ORDER_CERTIFICA.TYTBCT_ORDER_CERTIFICA; 

            NUREADINDEX         BINARY_INTEGER;
            NUADDINDEX          BINARY_INTEGER;
        BEGIN

            IF (CT_BCCERTIFICATE.CUVERIFIEDORDERSBYCERT%ISOPEN) THEN
                CLOSE CT_BCCERTIFICATE.CUVERIFIEDORDERSBYCERT;
            END IF;

            
            OPEN CT_BCCERTIFICATE.CUVERIFIEDORDERSBYCERT(INUCERTTOADD);
            FETCH CT_BCCERTIFICATE.CUVERIFIEDORDERSBYCERT BULK COLLECT INTO TBORDERSVER;
            CLOSE CT_BCCERTIFICATE.CUVERIFIEDORDERSBYCERT;

            
            NUREADINDEX := TBORDERSVER.FIRST;

            
            NUADDINDEX := TBORDERSVERIFIED.LAST;
            IF (NUADDINDEX IS NULL) THEN
                NUADDINDEX := 0;
            END IF;
            NUADDINDEX := NUADDINDEX + 1;

            
            LOOP

                EXIT WHEN NUREADINDEX IS NULL;

                TBORDERSVERIFIED(NUADDINDEX) := TBORDERSVER(NUREADINDEX);
                NUREADINDEX := TBORDERSVER.NEXT(NUREADINDEX);
                NUADDINDEX := NUADDINDEX + 1;
            END LOOP;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                IF (CT_BCCERTIFICATE.CUVERIFIEDORDERSBYCERT%ISOPEN) THEN
                    CLOSE CT_BCCERTIFICATE.CUVERIFIEDORDERSBYCERT;
                END IF;
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                IF (CT_BCCERTIFICATE.CUVERIFIEDORDERSBYCERT%ISOPEN) THEN
                    CLOSE CT_BCCERTIFICATE.CUVERIFIEDORDERSBYCERT;
                END IF;
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END SAVEVERORDERS;

        


































        PROCEDURE ADDTOCERTIFICATESLIST
        (
            INUCERTTOADD IN GE_ACTA.ID_ACTA%TYPE,
            IDTDATETOPROCESS    IN  DATE
        )
        IS
            RCCERTIFICATE       DAGE_ACTA.STYGE_ACTA;
            
            SBPERSON            VARCHAR(20) := '-';
            
            NUCONTRACTORID      GE_CONTRATO.ID_CONTRATISTA%TYPE;
            NUCONTTYPEID        GE_CONTRATO.ID_TIPO_CONTRATO%TYPE;
            
            SBTYPETOGETORDERS   CT_TASKTYPE_CONTYPE.FLAG_TYPE%TYPE;         
        BEGIN
            UT_TRACE.TRACE('INICIA CT_BoCertificate.RegenerateAllObligation.AddToCertificatesList',3);
            
            CT_BCCERTIFICATE.GETORDERSTOREGENOBLIG
            (
                INUCERTTOADD
            );
            
            
            DAGE_ACTA.LOCKBYPK
            (
                INUCERTTOADD,
                RCCERTIFICATE
            );
            
            NUCONTRACTORID  := DAGE_CONTRATO.FNUGETID_CONTRATISTA(RCCERTIFICATE.ID_CONTRATO);
            NUCONTTYPEID    := DAGE_CONTRATO.FNUGETID_TIPO_CONTRATO(RCCERTIFICATE.ID_CONTRATO);
            
            
            SAVEVERORDERS(INUCERTTOADD);

            
            IF (RCCERTIFICATE.ID_BASE_ADMINISTRATIVA IS NULL) THEN
            
                
                IF RCCERTIFICATE.PERSON_ID IS NOT NULL THEN
                    SBPERSON := RCCERTIFICATE.PERSON_ID;
                END IF;
                
                
                IF (RCCERTIFICATE.ID_TIPO_ACTA = CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE) THEN
                    TBNOADMINBASELIQCERTIFS(SBPERSON) := INUCERTTOADD;
                    RETURN;
                ELSIF (RCCERTIFICATE.ID_TIPO_ACTA = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE) THEN
                       TBNOADMINBASEBILLCERTIFS(SBPERSON) := INUCERTTOADD;
                       RETURN;
                END IF;
            ELSE
                IF (RCCERTIFICATE.ID_TIPO_ACTA = CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE) THEN
                    TBLIQCERTIFICATES(RCCERTIFICATE.ID_BASE_ADMINISTRATIVA) := INUCERTTOADD;
                    RETURN;
                ELSIF (RCCERTIFICATE.ID_TIPO_ACTA = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE) THEN
                   TBBILLCERTIFICATES(RCCERTIFICATE.ID_BASE_ADMINISTRATIVA) := INUCERTTOADD;
                   RETURN;
                END IF;
            END IF;
            UT_TRACE.TRACE('TERMINA CT_BoCertificate.RegenerateAllObligation.AddToCertificatesList',3);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END ADDTOCERTIFICATESLIST;
    BEGIN
        UT_TRACE.TRACE('INICIO CT_BoCertificate.RegenerateAllObligation',2);
        
        
        DAGE_ACTA.GETRECORD
        (
            INUCERTIFICATEID,
            RCBASECERTIFICATE
        );
        
        
        CT_BCLIQUIDATIONSUPPORT.CLEARTMPORDERSTABLE;
        
        
        DTDATETOPROCESS := RCBASECERTIFICATE.FECHA_FIN;
        
        
        CT_BCCERTIFICATE.RELATEDCERTIFSBYCONTRACT
        (
            INUCERTIFICATEID,
            RCBASECERTIFICATE.ID_CONTRATO,
            TBCERTIFICATES
        );

        
        ADDTOCERTIFICATESLIST(INUCERTIFICATEID,DTDATETOPROCESS);
        
        
        CT_BOCERTIFICATE.REVERTCERTIFICATE(INUCERTIFICATEID,FALSE);

        
        IF (TBCERTIFICATES.COUNT > 0) THEN
            
            FOR N IN TBCERTIFICATES.FIRST..TBCERTIFICATES.LAST LOOP
                DECLARE
                    NUCERTIFICATEID GE_ACTA.ID_ACTA%TYPE;

                    NUERRORCODE     GE_ERROR_LOG.MESSAGE_ID%TYPE;
                    SBERRORMESSAGE  GE_ERROR_LOG.DESCRIPTION%TYPE;
                BEGIN
                    NUCERTIFICATEID := TBCERTIFICATES(N);
                    ADDTOCERTIFICATESLIST(NUCERTIFICATEID,DTDATETOPROCESS);
                    
                    CT_BOCERTIFICATE.REVERTCERTIFICATE(NUCERTIFICATEID,
                                                       FALSE);
                EXCEPTION
                    WHEN EX.CONTROLLED_ERROR THEN
                        ERRORS.GETERROR(NUERRORCODE,
                                        SBERRORMESSAGE);
                        
                        
                        ERRORS.SETERROR(8582,
                                        INUCERTIFICATEID||'|'||NUCERTIFICATEID||'|'||SBERRORMESSAGE);
                        RAISE EX.CONTROLLED_ERROR;
                    WHEN OTHERS THEN
                        ERRORS.SETERROR;
                        RAISE EX.CONTROLLED_ERROR;
                END;
            END LOOP;
        END IF;

        TBCERTIFICATES.DELETE;

        
        GE_BOCERTCONTRATISTA.LIMPIARCACHEVALORITEMLISTA;

       
        CT_BCLIQUIDATIONSUPPORT.UPDTOLIQEXCORDERSWBASE
        (
            DTDATETOPROCESS,
            RCBASECERTIFICATE.ID_CONTRATO
        );

        
        
        CT_BOLIQUIDATIONPROCESS.GENERATECONTRACTOBLIG
        (
            RCBASECERTIFICATE.ID_PERIODO,
            RCBASECERTIFICATE.ID_CONTRATO,
            NULL,
            DTDATETOPROCESS,
            TBNOADMINBASELIQCERTIFS,
            TBNOADMINBASEBILLCERTIFS,
            TBLIQCERTIFICATES,
            TBBILLCERTIFICATES,
            TRUE,
            TBCERTIFICATES
        );
        
        
        IF(TBORDERSVERIFIED.COUNT > 0) THEN
            FOR N IN TBORDERSVERIFIED.FIRST .. TBORDERSVERIFIED.LAST LOOP
                
                CT_BCCERTIFICATE.UPDATEORDERVERDATE
                (
                    TBORDERSVERIFIED(N).CERTIFICATE_ID,
                    TBORDERSVERIFIED(N).ORDER_ID,
                    TBORDERSVERIFIED(N).VERIFICATION_DATE
                );
                
            END LOOP;
        END IF;
        
        
        
        NUCERTINDEX := TBCERTIFICATES.FIRST;

        LOOP
            EXIT WHEN NUCERTINDEX IS NULL;
            
            
            CT_BCLIQUIDATIONSUPPORT.UPDFINALDATEANDPENDREGCERT
            (
                TBCERTIFICATES(NUCERTINDEX),
                DTDATETOPROCESS
            );

            NUCERTINDEX := TBCERTIFICATES.NEXT(NUCERTINDEX);
        END LOOP;
        
        COMMIT;
        
        UT_TRACE.TRACE('TERMINA CT_BoCertificate.RegenerateAllObligation',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGENERATEALLOBLIGATION;
    
     
















    PROCEDURE ISNOVELTYREVERTION
    (
       INUORDERID   IN OR_ORDER.ORDER_ID%TYPE,
       OSBISNOVELTY OUT VARCHAR2,
       ONUERROR     OUT GE_MESSAGE.MESSAGE_ID%TYPE
    )
    IS
       NUORDERNOVELTY   OR_ORDER.ORDER_ID%TYPE;
    BEGIN

        NUORDERNOVELTY:= GE_BCCERTIFICATE.FNUISNOVELTYORDER(INUORDERID);

        IF(NUORDERNOVELTY IS NOT NULL) THEN
          
          IF(NUORDERNOVELTY = INUORDERID)THEN
            UT_TRACE.TRACE ('La orden Tiene una �rden de Reversion', 10);
            OSBISNOVELTY := CT_BOCONSTANTS.CSBORRELATEDREVE;
            ONUERROR := CT_BOCONSTANTS.CNUERRRELATEDREVE;
          ELSE
            UT_TRACE.TRACE ('La orden es una �rden de Reversi�n', 10);
            OSBISNOVELTY := CT_BOCONSTANTS.CSBORDERREVER;
            ONUERROR :=CT_BOCONSTANTS.CSBERRORDERREVER;
          END IF;
        ELSE
            OSBISNOVELTY:= GE_BOCONSTANTS.CSBNULLSB;
            ONUERROR := GE_BOCONSTANTS.CNUNULLNUM;
        END IF;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END ISNOVELTYREVERTION;
    
    
















    PROCEDURE GETOPERUNITSBYCERTHLOV
    (
        INUOPERUNITID       IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBDESCRIPTION      IN  OR_OPERATING_UNIT.NAME%TYPE,
        ORFREFCURSOR        OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL            VARCHAR2(8000);
    BEGIN

        SBSQL :=
                'SELECT  distinct(or_operating_unit.operating_unit_id) id,'                 || CHR(10) ||
                '        or_operating_unit.name Description'                                || CHR(10) ||
                'FROM    or_operating_unit,'                                                || CHR(10) ||
                '        or_order,'                                                         || CHR(10) ||
                '        ct_order_certifica'                                                || CHR(10) ||
                'WHERE   ct_order_certifica.certificate_id = :inuCertificateId'             || CHR(10) ||
                'AND     OR_order.order_id = ct_order_certifica.order_id'                   || CHR(10) ||
                'AND     OR_order.operating_unit_id = or_operating_unit.operating_unit_id'  || CHR(10) ||
                'AND     upper(or_operating_unit.name) like ' ||CHR(39)|| '%' ||CHR(39)||'||  :Description ||'||CHR(39)||'%'||CHR(39)|| ' ';

        IF INUOPERUNITID IS NOT NULL THEN
            SBSQL := SBSQL || CHR(10) ||
                    'AND    or_operating_unit.operating_unit_id like :id ';
            UT_TRACE.TRACE('Sentencia: '||CHR(10)||SBSQL, 5);
            OPEN ORFREFCURSOR FOR SBSQL USING GNUCERTIFICATE, ISBDESCRIPTION, INUOPERUNITID;
        ELSE
            UT_TRACE.TRACE('Sentencia: '||CHR(10)||SBSQL, 5);
            OPEN ORFREFCURSOR FOR SBSQL USING GNUCERTIFICATE, ISBDESCRIPTION;
        END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END GETOPERUNITSBYCERTHLOV;
    
    
















    PROCEDURE GETTASKTYPESBYCERTHLOV
    (
        INUTASKTYPEID       IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ISBDESCRIPTION      IN  OR_TASK_TYPE.DESCRIPTION%TYPE,
        ORFREFCURSOR        OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL            VARCHAR2(8000);
    BEGIN

        SBSQL :=
                'SELECT  distinct(or_task_type.task_type_id) id,'                 || CHR(10) ||
                '        or_task_type.description Description'                                || CHR(10) ||
                'FROM    or_task_type,'                                                || CHR(10) ||
                '        or_order,'                                                         || CHR(10) ||
                '        ct_order_certifica'                                                || CHR(10) ||
                'WHERE   ct_order_certifica.certificate_id = :inuCertificateId'             || CHR(10) ||
                'AND     OR_order.order_id = ct_order_certifica.order_id'                   || CHR(10) ||
                'AND     OR_order.task_type_id = or_task_type.task_type_id'  || CHR(10) ||
                'AND     upper(or_task_type.description) like ' ||CHR(39)|| '%' ||CHR(39)||'||  :Description ||'||CHR(39)||'%'||CHR(39)|| ' ';

        IF INUTASKTYPEID IS NOT NULL THEN
            SBSQL := SBSQL || CHR(10) ||
                    'AND    or_task_type.task_type_id like :id ';
            UT_TRACE.TRACE('Sentencia: '||CHR(10)||SBSQL, 5);
            OPEN ORFREFCURSOR FOR SBSQL USING GNUCERTIFICATE, ISBDESCRIPTION, INUTASKTYPEID;
        ELSE
            UT_TRACE.TRACE('Sentencia: '||CHR(10)||SBSQL, 5);
            OPEN ORFREFCURSOR FOR SBSQL USING GNUCERTIFICATE, ISBDESCRIPTION;
        END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END GETTASKTYPESBYCERTHLOV;
    
    


















    PROCEDURE SUGGESTEDLISTPRICE
    (
        INUITEMID       IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUCONTRACTORID IN  GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUOPERUNITID   IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ONUPRICE        OUT GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE
    )
    IS
        ONUIDLISTACOSTO GE_UNIT_COST_ITE_LIS.LIST_UNITARY_COST_ID%TYPE;
        ONUCOSTOITEM    GE_UNIT_COST_ITE_LIS.PRICE%TYPE;
    BEGIN
        UT_TRACE.TRACE('[INICIO]CT_BoCertificate.CT_BoCertificate',5);
    
        GE_BCCERTCONTRATISTA.OBTENERCOSTOITEMLISTA
        (
            INUITEMID,
            UT_DATE.FDTSYSDATE,
            NULL,
            INUCONTRACTORID,
            INUOPERUNITID,
            NULL,
            ONUIDLISTACOSTO,
            ONUCOSTOITEM,
            ONUPRICE
        ) ;
    
        UT_TRACE.TRACE('[FIN]CT_BoCertificate.CT_BoCertificate',5);
    
    END SUGGESTEDLISTPRICE;
    
    

















    PROCEDURE GETITEMNOLVETYHLOV
    (
       INUITEMID       IN  GE_ITEMS.ITEMS_ID%TYPE,
       ISBDESCRIPTION  IN  GE_ITEMS.DESCRIPTION%TYPE,
       ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL  VARCHAR2(8000);
    BEGIN
         SBSQL :=
                'SELECT  distinct(ct_item_novelty.items_id) id,'|| CHR(10) ||
                '        ge_items.description Description'      || CHR(10) ||
                'FROM    ct_item_novelty,'                      || CHR(10) ||
                '        ge_items'                              || CHR(10) ||
                'WHERE   ct_item_novelty.items_id = ge_items.items_id'      || CHR(10);
        IF INUITEMID IS NOT NULL THEN
            SBSQL := SBSQL || CHR(10) ||
                    'AND    ct_item_novelty.items_id like :id ';
            UT_TRACE.TRACE('Sentencia: '||CHR(10)||SBSQL, 5);
            OPEN ORFREFCURSOR FOR SBSQL USING INUITEMID;
        ELSE
            SBSQL := SBSQL || CHR(10) ||
                    'AND     upper(ge_items.description) like ' ||CHR(39)|| '%' ||CHR(39)||'||  :Description ||'||CHR(39)||'%'||CHR(39)|| ' ';
            UT_TRACE.TRACE('Sentencia: '||CHR(10)||SBSQL, 5);
            OPEN ORFREFCURSOR FOR SBSQL USING ISBDESCRIPTION;
        END IF;
    END GETITEMNOLVETYHLOV;

    




























    PROCEDURE CREATELIQADMINCERTIFICATE
    (
        INUCONTRACTID        IN   GE_CONTRATO.ID_CONTRATO%TYPE,
        INUVALUETOTAL        IN   GE_ACTA.VALOR_TOTAL%TYPE,
        INUVALUEADVANCE      IN   GE_ACTA.VALUE_ADVANCE%TYPE,
        ISBCOMMENT           IN   GE_ACTA.COMMENT_%TYPE,
        INUCOMMENTTYPE       IN   GE_ACTA.COMMENT_TYPE_ID%TYPE
    )
    IS
        CNUREQUIRED_ATTRIBUTE CONSTANT NUMBER      := 116082;
        CNULESSORZER_VALERR   CONSTANT NUMBER      := 4784;
        CNUADVANGREATERVALU   CONSTANT NUMBER      := 110524;
        CNUINVALIDPARAM       CONSTANT NUMBER      := 119369;
        CNUERROITEM           CONSTANT NUMBER      := 10750;
        NUCERTIFICATETYPE     CONSTANT NUMBER      := 1;
        NUITEMSANTICIPO       GE_ITEMS.ITEMS_ID%TYPE;
        RCACTA                DAGE_ACTA.STYGE_ACTA; 
        NUDETALLEACTA         GE_DETALLE_ACTA.ID_DETALLE_ACTA%TYPE;
        SBDESCITEM            GE_DETALLE_ACTA.DESCRIPCION_ITEMS%TYPE;
        RCDETALLEACTA         DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;
        SBAFFECTVALUE         GE_DETALLE_ACTA.AFFECT_CONTRACT_VAL%TYPE := 'N';

    BEGIN
        UT_TRACE.TRACE('INICIO CT_BoCertificate.CreateStatusCertiContract',12);

        
        IF (INUCONTRACTID IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Contrato');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUCOMMENTTYPE IS NULL) THEN
            ERRORS.SETERROR(CNUREQUIRED_ATTRIBUTE,
                            'Tipo de Comentario');
            RAISE EX.CONTROLLED_ERROR;
        END IF;


        
        IF (INUVALUETOTAL <= 0)THEN
            ERRORS.SETERROR(CNULESSORZER_VALERR,
                            'Valor Total');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUVALUEADVANCE <= 0)THEN
            ERRORS.SETERROR(CNULESSORZER_VALERR,
                            'Valor Anticipo');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (INUVALUEADVANCE IS NOT NULL AND INUVALUETOTAL IS NOT NULL) THEN
            IF ( INUVALUEADVANCE  >=  INUVALUETOTAL ) THEN
                 ERRORS.SETERROR(CNUADVANGREATERVALU,
                            'Valor Anticipo|Valor Total');
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;
        
        NUITEMSANTICIPO := GE_BOPARAMETER.FNUVALORNUMERICO ('ITEM_ANTICIPO');
        
        IF  NUITEMSANTICIPO IS NULL THEN
            ERRORS.SETERROR(CNUINVALIDPARAM,
                            'ITEM_ANTICIPO');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        IF NOT(DAGE_ITEMS.FBLEXIST(NUITEMSANTICIPO)) THEN
            ERRORS.SETERROR(CNUERROITEM,
                            NUITEMSANTICIPO);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        RCACTA.NOMBRE          :=   'ENTREGA DE ANTICIPO ' ||
                                    DAGE_CONTRATO.FSBGETDESCRIPCION(INUCONTRACTID);
        RCACTA.ID_ACTA         :=   GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_ACTA', 'SEQ_GE_ACTA');

        RCACTA.ID_TIPO_ACTA       := NUCERTIFICATETYPE;  
        RCACTA.FECHA_CREACION     := UT_DATE.FDTSYSDATE;
        RCACTA.ESTADO             := CT_BOCONSTANTS.FSBGETCLOSEDCERTIFSTATUS;
        RCACTA.ID_CONTRATO        := INUCONTRACTID;
        RCACTA.VALOR_TOTAL        := INUVALUEADVANCE;
        RCACTA.VALUE_ADVANCE      := INUVALUEADVANCE;
        RCACTA.FECHA_INICIO       := UT_DATE.FDTSYSDATE;
        RCACTA.FECHA_FIN          := UT_DATE.FDTSYSDATE;
        RCACTA.COMMENT_TYPE_ID    := INUCOMMENTTYPE;
        RCACTA.COMMENT_           := ISBCOMMENT;
        RCACTA.PERSON_ID          := GE_BOPERSONAL.FNUGETPERSONID;
        RCACTA.TERMINAL           := UT_SESSION.GETTERMINAL;
        RCACTA.CONTRACTOR_ID      := DAGE_CONTRATO.FNUGETID_CONTRATISTA(INUCONTRACTID);
        RCACTA.VALOR_LIQUIDADO   := 0;
        
        
        IF(NOT DACT_EXCL_ITEM_CONT_VAL.FBLEXIST(NUITEMSANTICIPO)) THEN
            RCACTA.VALOR_LIQUIDADO := NVL(INUVALUEADVANCE,0);
            SBAFFECTVALUE := 'Y';
            DAGE_CONTRATO.UPDVALOR_LIQUIDADO(INUCONTRACTID,NVL(DAGE_CONTRATO.FNUGETVALOR_LIQUIDADO(INUCONTRACTID),0)+RCACTA.VALOR_LIQUIDADO);
        END IF;

        RCACTA.IS_PENDING         := 0;
        
        DAGE_ACTA.INSRECORD(RCACTA);
        
        UT_TRACE.TRACE('Se inserta detalle de acta',10);
        
        SBDESCITEM := NUITEMSANTICIPO||' - '||DAGE_ITEMS.FSBGETDESCRIPTION(NUITEMSANTICIPO);
        CT_BOCERTIFICATE.INSCERTIFICATEDETAIL( NUITEMSANTICIPO,
                                               SBDESCITEM,
                                               RCACTA.ID_ACTA,
                                               NUDETALLEACTA);

         
         RCDETALLEACTA := DAGE_DETALLE_ACTA.FRCGETRECORD(NUDETALLEACTA);
         
         
         RCDETALLEACTA.REFERENCE_ITEM_ID    := NUITEMSANTICIPO;
         RCDETALLEACTA.CANTIDAD             := 1;
         RCDETALLEACTA.VALOR_UNITARIO       := INUVALUEADVANCE;
         RCDETALLEACTA.VALOR_TOTAL          := INUVALUEADVANCE;
         RCDETALLEACTA.AFFECT_CONTRACT_VAL  := SBAFFECTVALUE;
         RCDETALLEACTA.TIPO_GENERACION      := 'A';
         RCDETALLEACTA.ID_UNIDAD_MEDIDA     := 159;

         DAGE_DETALLE_ACTA.UPDRECORD(RCDETALLEACTA);

        UT_TRACE.TRACE('FIN CT_BoCertificate.CreateLiqAdminCertificate',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR CT_BoCertificate.CreateLiqAdminCertificate',12);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others CT_BoCertificate.CreateLiqAdminCertificate',12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATELIQADMINCERTIFICATE;
    

    















    PROCEDURE DELCHARGESBYADJORDER
    (
        INUADJORDER     IN      OR_ORDER.ORDER_ID%TYPE
    )
    IS
    
        NUPACKAGEID      MO_PACKAGES.PACKAGE_ID%TYPE;
        NUACCOUNT        CARGOS.CARGCUCO%TYPE;
        SBDOCSOP         CARGOS.CARGDOSO%TYPE;
        
        CURSOR CUPACKAGEIDBYORDER IS
        SELECT PACKAGE_ID
        FROM   OR_ORDER_ACTIVITY
        WHERE  ORDER_ID = INUADJORDER
        AND    ROWNUM = 1;

    BEGIN

        PKERRORS.PUSH('CT_BoCertificate.DelChargesByAdjOrder');
        UT_TRACE.TRACE('INICIO CT_BoCertificate.DelChargesByAdjOrder',10);
        
        IF CUPACKAGEIDBYORDER%ISOPEN THEN
        CLOSE CUPACKAGEIDBYORDER;
        END IF;

        
        OPEN CUPACKAGEIDBYORDER;
        FETCH CUPACKAGEIDBYORDER INTO NUPACKAGEID;
        CLOSE CUPACKAGEIDBYORDER;
        
        
        IF NUPACKAGEID IS NULL THEN
            RETURN;
        END IF;

        
        SBDOCSOP := 'PP-'||NUPACKAGEID;
        
        
        NUACCOUNT := -1;

        
        PKBCCARGOS.DELCHARBYDOSOANDCODO(SBDOCSOP,INUADJORDER,NUACCOUNT);

        UT_TRACE.TRACE('FIN CT_BoCertificate.DelChargesByAdjOrder',10);
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END DELCHARGESBYADJORDER;
    
    
END CT_BOCERTIFICATE;