PACKAGE BODY CM_BORemevaco AS























    
    
    
    SUBTYPE STYMETHCTYPE IS VARCHAR2(10);
    TYPE TYTBMETHODCONSTYPE IS TABLE OF TYTBRULELIST INDEX BY STYMETHCTYPE;

    
    
    
    
    
    

    
    
    CSBVERSION           CONSTANT VARCHAR2(250)    := 'SAO193070';
    CSBSEPARATOR         CONSTANT VARCHAR2(2)      := '|';

    
    CNUMSG_ERROR_1       CONSTANT NUMBER           := 901096;
    
    CNUMSG_ERROR_2       CONSTANT NUMBER           := 901097;


    
    
    
    
    
    
    
    
    
    
    
    
    GSBMSGERR               GE_ERROR_LOG.DESCRIPTION%TYPE ;  

    
    GTBRULESBYMETHCTYPEACTI TYTBMETHODCONSTYPE;
    GBOMEMORYLOADED         BOOLEAN := FALSE;
    
    
    

    
    PROCEDURE LOADMEMORY;

    
    PROCEDURE GETINDEXES
    (
        INUMETHOD           IN  REMEVACO.RMVCMEVC%TYPE,
        OSBIDX1             OUT STYMETHCTYPE,
        ONUIDX2             OUT STYRULECOUNT
    );



















FUNCTION FSBVERSION RETURN VARCHAR2 IS
BEGIN

    RETURN CSBVERSION;

END FSBVERSION;























PROCEDURE STD
(
    ISBMSG   IN VARCHAR2,
    INULEVEL IN PLS_INTEGER DEFAULT 60
)
IS
BEGIN

    $IF $$DEBUG $THEN
        UT_TRACE.TRACE(ISBMSG, INULEVEL);
        TD(ISBMSG);
    $ELSE
        NULL;
    $END

END STD;























PROCEDURE LOADMEMORY
IS
    
    
    
    TBREMEVACO  PKBCREMEVACO.TYTBRULESBYMETHOD;
    NUIDX       NUMBER;

    SBIDX1      STYMETHCTYPE;
    NUIDX2      STYRULECOUNT;

BEGIN
    STD('BEGIN CM_BORemevaco.LoadMemory',90);
    STD('Cargando Reglas por M�todo');

    GTBRULESBYMETHCTYPEACTI.DELETE;

    PKBCREMEVACO.FTBGETRECORDS( TBREMEVACO );
    NUIDX := TBREMEVACO.FIRST;
    LOOP
        EXIT WHEN ( NUIDX IS NULL );
        
        GETINDEXES
        (
            TBREMEVACO(NUIDX).RMVCMEVC,
            SBIDX1,
            NUIDX2
        );

        GTBRULESBYMETHCTYPEACTI (SBIDX1)(NUIDX2) := TBREMEVACO(NUIDX);
        NUIDX := TBREMEVACO.NEXT( NUIDX );
    END LOOP;

    STD('Conteo m�todos ['||GTBRULESBYMETHCTYPEACTI.COUNT||']');
    TBREMEVACO.DELETE;
    GBOMEMORYLOADED := TRUE;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END LOADMEMORY;

























PROCEDURE GETINDEXES
(
    INUMETHOD           IN  REMEVACO.RMVCMEVC%TYPE,
    OSBIDX1             OUT STYMETHCTYPE,
    ONUIDX2             OUT STYRULECOUNT
)
IS
BEGIN
    STD('BEGIN CM_BORemevaco.GetIndexes',90);

    OSBIDX1 := INUMETHOD;
    IF ( GTBRULESBYMETHCTYPEACTI.EXISTS(OSBIDX1) ) THEN
    
        ONUIDX2 := GTBRULESBYMETHCTYPEACTI(OSBIDX1).LAST + 1;
    ELSE
        ONUIDX2 := 1;
    
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END GETINDEXES;





























FUNCTION FRCGETRULEBYMETHCTYACT
(
    INUMETHOD           IN  REMEVACO.RMVCMEVC%TYPE,
    INUCONSUMPTIONTYPE  IN  REMEVACO.RMVCTICO%TYPE,
    INUACTIVITY         IN  REMEVACO.RMVCACTI%TYPE
)
RETURN REMEVACO%ROWTYPE
IS
    
    
    
    RCREMEVACO  REMEVACO%ROWTYPE;
    SBIDX1      STYMETHCTYPE;
    NUIDX2      STYRULECOUNT;

BEGIN
    STD('BEGIN CM_BORemevaco.frcGetRuleByMethCTyAct',90);
    
    
    
    
    IF ( INUMETHOD              IS NULL OR
         INUCONSUMPTIONTYPE     IS NULL OR
         INUACTIVITY            IS NULL ) THEN
    
        
        
        GE_BOERRORS.SETERRORCODEARGUMENT(CNUMSG_ERROR_1,TO_CHAR(INUMETHOD)         ||'|'||
                                                        TO_CHAR(INUCONSUMPTIONTYPE)||'|'||
                                                        TO_CHAR(INUACTIVITY));
    
    END IF;
    
    
    
    
    IF ( NOT GBOMEMORYLOADED ) THEN
    
        LOADMEMORY;
    
    END IF;

    GETINDEXES
    (
        INUMETHOD,          
        SBIDX1,             
        NUIDX2              
    );

    
    
    
    
    
    BEGIN
    
        NUIDX2 := GTBRULESBYMETHCTYPEACTI(SBIDX1).FIRST;
        LOOP
            EXIT WHEN (NUIDX2 IS NULL);

            IF ( GTBRULESBYMETHCTYPEACTI(SBIDX1)(NUIDX2).RMVCACTI = INUACTIVITY AND
                 GTBRULESBYMETHCTYPEACTI(SBIDX1)(NUIDX2).RMVCTICO = INUCONSUMPTIONTYPE) THEN
            
                RETURN GTBRULESBYMETHCTYPEACTI(SBIDX1)(NUIDX2);
            
            END IF;

            NUIDX2 := GTBRULESBYMETHCTYPEACTI(SBIDX1).NEXT(NUIDX2);
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
        
        
        GE_BOERRORS.SETERRORCODEARGUMENT(CNUMSG_ERROR_1,TO_CHAR(INUMETHOD)         ||'|'||
                                                        TO_CHAR(INUCONSUMPTIONTYPE)||'|'||
                                                        TO_CHAR(INUACTIVITY));
    END;

    RETURN NULL;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END FRCGETRULEBYMETHCTYACT;




























PROCEDURE GETRULESBYMETHOD
(
    INUMETHOD   IN          REMEVACO.RMVCMEVC%TYPE,
    OTBRULES    OUT NOCOPY  TYTBRULELIST
)
IS
    
    
    
    SBIDX1      STYMETHCTYPE;
    NUIDX2      STYRULECOUNT;

BEGIN
    STD('BEGIN CM_BORemevaco.GetRulesByMethod',90);

    
    
    
    IF ( INUMETHOD IS NULL ) THEN
    
        
        GE_BOERRORS.SETERRORCODEARGUMENT(CNUMSG_ERROR_2,TO_CHAR(INUMETHOD));
    
    END IF;

    
    
    
    IF ( NOT GBOMEMORYLOADED ) THEN
    
        LOADMEMORY;
    
    END IF;

    GETINDEXES
    (
        INUMETHOD,          
        SBIDX1,             
        NUIDX2              
    );

    IF ( NOT GTBRULESBYMETHCTYPEACTI.EXISTS(SBIDX1) ) THEN
    
        
        GE_BOERRORS.SETERRORCODEARGUMENT(CNUMSG_ERROR_2,TO_CHAR(INUMETHOD));
    
    END IF;

    OTBRULES := GTBRULESBYMETHCTYPEACTI(SBIDX1);
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END GETRULESBYMETHOD;






















PROCEDURE RESETMEMORY
IS
BEGIN
    STD('BEGIN CM_BORemevaco.ResetMemory',90);

    GBOMEMORYLOADED := FALSE;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END RESETMEMORY;

END CM_BOREMEVACO;