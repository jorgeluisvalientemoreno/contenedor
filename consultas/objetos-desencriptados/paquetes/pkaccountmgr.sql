PACKAGE BODY pkAccountMgr AS































































































































































































































































































































































    CSBVERSION CONSTANT VARCHAR2(250) := 'SAO330207';

    
    
    

    CNUCUENTA_SIN_SALDO	        CONSTANT NUMBER := 10199 ;  
    CNUNUM_REC_FETCHED	        CONSTANT NUMBER := 100;     

    CNUTOPE_GRUPO_TEMPORAL	    CONSTANT NUMBER := 100;
    CNUGRUPO_DEFAULT	        CONSTANT NUMBER := 99;

		    
    CNUSESU_SIN_CTAS_CON_SALDO  CONSTANT NUMBER := 10086;
		    
    CNUSESU_SIN_CTAS	        CONSTANT NUMBER := 9306;

    CNUZERO                     CONSTANT NUMBER := PKBILLCONST.CERO; 

    GNUTOPE_DEUDA_PERMITIDO     PARAMETR.PAMENUME%TYPE;

    
    
    

    
    
    
    NU_MEMAPS_SALDOPEND	PKBCSERVSUSC.STYSESUSAPE;
    NU_MEMAPS_SALDOFAV	SERVSUSC.SESUSAFA%TYPE;
    NU_MEMAPS_CUCOFACT	CUENCOBR.CUCOFACT%TYPE;
    NU_MEMAPS_SESUCATE	SERVSUSC.SESUCATE%TYPE;
    NU_MEMAPS_SESUSUCA	SERVSUSC.SESUSUCA%TYPE;
    NU_MEMAPS_SESUSUSC	SERVSUSC.SESUSUSC%TYPE;
    NU_MEMAPS_UPDBD	    NUMBER;
    

    
    
    
    NU_MEMGPB_CUCOFACT	CUENCOBR.CUCOFACT%TYPE;
    NU_MEMGPB_CUCONUSE	CUENCOBR.CUCONUSE%TYPE;
    NU_MEMGPB_SESUCATE	SERVSUSC.SESUCATE%TYPE;
    NU_MEMGPB_SESUSUCA	SERVSUSC.SESUSUCA%TYPE;
    NU_MEMGPB_SESUSUSC	SERVSUSC.SESUSUSC%TYPE;
    NU_MEMGPB_UPDBD	    NUMBER;
    

    
    SBERRMSG                GE_ERROR_LOG.DESCRIPTION%TYPE;
    
    TBCTASSALDONULL	        TYTBCTASCONSALDOSR;
    
    GTNUACCSTATNUMBULK	    PKTBLCUENCOBR.TYCUCOFACT;
    
    GTNUACCOUNTNUMBULK	    PKTBLCUENCOBR.TYCUCOCODI;
    
    GTNUACCOUNTBALBULK	    PKTBLCUENCOBR.TYCUCOSACU;
    
    GTNUACCOUNTCLAIMBULK    PKTBLCUENCOBR.TYCUCOVARE;
    
    GTNUACCOUNTBULK	        PKTBLCUENCOBR.TYCUCOSACU;
    
    GTNUACCOUNTDATEBULK	    PKTBLCUENCOBR.TYCUCOFEVE;
    
    GNUNOTAPPPAYMENT	    PKBCSUSCRIPC.STYSUSCVRAP;
    
    GNUSOLICITUD            MO_PACKAGES.PACKAGE_ID%TYPE;
    
    GSBTIPOSAFA             SALDFAVO.SAFAORIG%TYPE := NULL;
    
    GNUBILLINGNOTE          NOTAS.NOTANUME%TYPE;
    
    GNUVLRMINGENCTA         NUMBER;

    GNUCONCAJUSTE           CONCEPTO.CONCCODI%TYPE;	
    GNUCONCSALDFAV          CONCEPTO.CONCCODI%TYPE;	
    GSBCUPONCUENTA          CUPON.CUPOTIPO%TYPE;    
    GNUCONCAPLSALDFAV	    CONCEPTO.CONCCODI%TYPE;	

    

    GBLINITADJUSTACCOUNT    BOOLEAN := FALSE;
    GBLINITGENPOSITIVEBAL   BOOLEAN := FALSE;
    GBLINITAPPLYPOSBALSERV  BOOLEAN := FALSE;
    GSBVALORECL	            CHAR ;

    
    
    
    
    
    CURSOR CUCTASSALDO ( INUNUMSERV	CUENCOBR.CUCONUSE%TYPE ) IS
    	SELECT --+ pkAccountMgr.cuCtasSaldo
               CUCOCODI, NVL( CUCOSACU, 0 ) - NVL( CUCOVARE, 0 ) CUCOSACU,
    	       NVL( CUCOVATO, 0.00 ) CUCOVATO, CUCOFEVE
    	FROM   CUENCOBR, FACTURA
    	WHERE  CUCONUSE = INUNUMSERV
        AND    CUCOFACT = FACTCODI
    	AND    ( NVL( CUCOSACU, 0 ) - (CASE WHEN (NVL(CUCOVARE, 0) < 0) THEN 0 ELSE NVL(CUCOVARE, 0) END) ) > 0
    	ORDER BY FACTFEGE;

    
    CURSOR CUACCOUNTSTAT
	(
	    INUESTCTA	IN	FACTURA.FACTCODI%TYPE
	)
    IS
    	SELECT CUCOCODI
    	FROM   CUENCOBR
    	WHERE  CUCOFACT = INUESTCTA;
	 
    
    
    CURSOR CUACCOUNTINFO (INUSERVNUMBER	IN	CUENCOBR.CUCONUSE%TYPE) IS
    	SELECT 	CUCOFACT, CUCOCODI,
    		    NVL(CUCOSACU,0),
    	       	(CASE WHEN (NVL(CUCOVARE, 0) < 0) THEN 0 ELSE NVL(CUCOVARE, 0) END),
    		    PKBILLCONST.CERO, CUCOFEVE
    	  FROM 	CUENCOBR
    	 WHERE 	CUCONUSE = INUSERVNUMBER
    	   AND 	(CUCOSACU > PKBILLCONST.CERO
    		OR  CUCOVARE > PKBILLCONST.CERO
    		OR  CUCOVRAP > PKBILLCONST.CERO)
    	   AND  TRUNC(CUCOFEVE) < TRUNC(SYSDATE)
    	 UNION
    	 SELECT PKBILLCONST.CERO,
        		PKBILLCONST.CERO,
        		PKBILLCONST.CERO,
        		(CASE WHEN (NVL(CUCOVARE, 0) < 0) THEN 0 ELSE NVL(CUCOVARE, 0) END),
        		PKBILLCONST.CERO, CUCOFEVE
    	  FROM 	CUENCOBR
    	 WHERE 	CUCONUSE = INUSERVNUMBER
    	   AND 	(CUCOSACU > PKBILLCONST.CERO
    		OR  CUCOVARE > PKBILLCONST.CERO
    		OR  CUCOVRAP > PKBILLCONST.CERO)
    	   AND  TRUNC(CUCOFEVE) >= TRUNC(SYSDATE)
     	 ORDER BY CUCOFEVE ASC;

    
    
    CURSOR CULASTACCOUNT
    (
        INUNUMSERV  IN  CUENCOBR.CUCONUSE%TYPE,
	    INUPROGRAM  IN  FACTURA.FACTPROG%TYPE DEFAULT NULL
    ) IS
        SELECT --+ ordered NO_EXPAND index(cuencobr IX_CUENCOBR03 )
               CUENCOBR.*
               
          FROM CUENCOBR,FACTURA
         WHERE CUCOFACT = FACTCODI
           AND CUCONUSE = INUNUMSERV
           AND FACTPROG+0 = NVL (INUPROGRAM, FACTPROG)
         ORDER BY FACTFEGE DESC;

    
    
    CURSOR CUDUEBALACCSUBS ( INUSUBSSERV    CUENCOBR.CUCONUSE%TYPE )
    IS
        SELECT --+ pkAccountMgr.cuDueBalAccSubs
               CUCOCODI, NVL( CUCOSACU, PKBILLCONST.CERO ) NUSALDOCTA,
        	   NVL( CUCOVARE, PKBILLCONST.CERO ) NUVLRRECLAMO,
        	   NVL( CUCOVRAP, PKBILLCONST.CERO ) NUVLRRECLPAGNOABON
        FROM    CUENCOBR, FACTURA
        WHERE   CUCONUSE = INUSUBSSERV
        AND     CUCOFACT = FACTCODI
        AND     TRUNC(CUCOFEVE) < TRUNC(SYSDATE)
        AND     ( NVL(CUCOSACU, PKBILLCONST.CERO) -
    	          (CASE WHEN (NVL(CUCOVARE, PKBILLCONST.CERO) < 0) THEN 0 ELSE NVL(CUCOVARE, PKBILLCONST.CERO) END) -
                  NVL(CUCOVRAP, PKBILLCONST.CERO) ) > PKBILLCONST.CERO
        ORDER BY FACTFEGE;
        
    
    
    
    
    PROCEDURE CLEARMEMORYACCNUM ;
    PROCEDURE INITADJUACCO ;
    PROCEDURE INITGENPOSBAL ;
    
    PROCEDURE FILLRECNEWACCOUNT
    (
    	INUESTADOCTA	IN	FACTURA.FACTCODI%TYPE,
    	INUCUENTA	    IN	CUENCOBR.CUCOCODI%TYPE,
    	IRCSERVSUSC	    IN	SERVSUSC%ROWTYPE,
    	ORCCUENCOBR	    OUT	CUENCOBR%ROWTYPE
    );
    
    PROCEDURE GETCREDITCONCEPT
    (
    	INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE,
    	INUVLRSF	IN	CUENCOBR.CUCOVATO%TYPE,
    	OTBCONCSAFA	OUT	PKACCOUNTMGR.TYTBCONCSAFA
    );

    PROCEDURE GETPARAMETERS
    IS
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.GetParameters');
        
        


        GNUVLRMINGENCTA := PKTBLPARAMETR.FNUGETVALUENUMBER
                        ( 'VLR_MIN_GENERAR_CUENTA' );
						
	    
        GSBVALORECL := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE
                        ('BIL_REG_NOTAS_CON_RECL');
                        
        GNUTOPE_DEUDA_PERMITIDO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
                        ('BIL_TOPE_DEUDA_PERMITIDO');
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETPARAMETERS ;

    
    
    
    PROCEDURE VERIFYPRODPROCESSSECURITY
    (
        INUNUSE IN SERVSUSC.SESUNUSE%TYPE,
        ISBPROC IN  PROCREST.PRREPROC%TYPE
    ) IS
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.VerifyProdProcessSecurity');

        
        PKBOPROCESSSECURITY.VALIDATEPRODUCTSECURITY
        (
            INUNUSE,
            ISBPROC
        );
        
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
    
    END VERIFYPRODPROCESSSECURITY;

    






    PROCEDURE GENERATECHARGE
    (
    	INUSERVSUSC	 IN	CARGOS.CARGNUSE%TYPE,
    	INUACCOUNT	 IN	CARGOS.CARGCUCO%TYPE,
    	INUCONCEPT	 IN	CARGOS.CARGCONC%TYPE,
    	INUVALUE     IN	CARGOS.CARGVALO%TYPE,
    	ISBSIGN      IN	CARGOS.CARGSIGN%TYPE,
    	IDTFECHA     IN CARGOS.CARGFECR%TYPE,
    	INUCHARGECAUSE	IN	CARGOS.CARGCACA%TYPE,
    	ISBBACKDOCUMENT	IN	CARGOS.CARGDOSO%TYPE,
    	ISBPROCESSTYPE	IN	CARGOS.CARGTIPR%TYPE,
    	INUCARGCODO    IN CARGOS.CARGCODO%TYPE,
    	INUUNIDADES	IN	CARGOS.CARGUNID%TYPE
    )
    IS

        RCCARGO 	 CARGOS%ROWTYPE;		

        
        
        

        PROCEDURE FILLRECORD IS
        	RCCARGONULL		CARGOS%ROWTYPE;	
            NUSUSC          SUSCRIPC.SUSCCODI%TYPE;
            NUCICLO         CICLO.CICLCODI%TYPE;
            NUPERIODO       PERIFACT.PEFACODI%TYPE;
            NUANO           PERIFACT.PEFAANO%TYPE;
            NUMES           PERIFACT.PEFAMES%TYPE;
        BEGIN

        	PKERRORS.PUSH ('pkGenerateBill.FillRecord');

        	RCCARGO := RCCARGONULL;

            
            NUSUSC := PKTBLSERVSUSC.FNUGETSUSCRIPTION( INUSERVSUSC );

            
            NUCICLO := PKTBLSUSCRIPC.FNUGETBILLINGCYCLE( NUSUSC );

            
            PKBILLINGPERIODMGR.ACCCURRENTPERIOD( NUCICLO, NUANO, NUMES, NUPERIODO );

        	
        	RCCARGO.CARGCUCO := INUACCOUNT;
        	RCCARGO.CARGNUSE := INUSERVSUSC;
        	RCCARGO.CARGPEFA := NUPERIODO;
        	RCCARGO.CARGCONC := INUCONCEPT;
        	RCCARGO.CARGCACA := INUCHARGECAUSE;
        	RCCARGO.CARGSIGN := ISBSIGN;

        	
        	RCCARGO.CARGVALO := INUVALUE;
        	RCCARGO.CARGDOSO := ISBBACKDOCUMENT;
        	RCCARGO.CARGTIPR := ISBPROCESSTYPE ;
        	RCCARGO.CARGFECR := IDTFECHA;
        	RCCARGO.CARGCODO := NVL(INUCARGCODO,0);
        	RCCARGO.CARGUNID := INUUNIDADES;
        	RCCARGO.CARGCOLL := NULL;

        	
        	RCCARGO.CARGPROG := PKGENERALSERVICES.FNUIDPROCESO;
        	RCCARGO.CARGUSUA := SA_BOSYSTEM.GETSYSTEMUSERID;

        	PKERRORS.POP;

        EXCEPTION
        	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	    PKERRORS.POP;
        	    RAISE;

            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

        END FILLRECORD;

        

    BEGIN

        PKERRORS.PUSH ('pkGenerateBill.GenerateCharge_cuenta');

        
        IF (NVL (INUVALUE, 0.00) = 0.00) THEN
        	PKERRORS.POP;
        	RETURN;
        END IF;

        
        FILLRECORD ;

        
        PKTBLCARGOS.INSRECORD (RCCARGO);

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END GENERATECHARGE;

    






    PROCEDURE CALCADJUSTVALUE
    (
        IBLAJUSTACUENTA IN  BOOLEAN,
        INUFACTORAJUSTE IN  TIMOEMPR.TMEMFAAJ%TYPE,
        INUVALORCTA 	IN	CUENCOBR.CUCOVATO%TYPE,
    	ONUVALORAJUSTE	OUT	CARGOS.CARGVALO%TYPE,
    	OSBSIGNOAJUSTE	OUT	CARGOS.CARGSIGN%TYPE
    )
    IS
        NUVALOR		    CUENCOBR.CUCOVATO%TYPE;	  
        SBSIGNO		    CARGOS.CARGSIGN%TYPE;	  
        BLSALDONEG      BOOLEAN := FALSE;         
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.CalcAdjustValue1');

        ONUVALORAJUSTE := PKBILLCONST.CERO;
        OSBSIGNOAJUSTE := NULL;
        NUVALOR        := INUVALORCTA;

        
        IF ( NOT IBLAJUSTACUENTA ) THEN
        	PKERRORS.POP;
        	RETURN;
        END IF;

        CALCVALORAJUSTE
        (
            INUFACTORAJUSTE,
            INUVALORCTA,
        	ONUVALORAJUSTE,
        	OSBSIGNOAJUSTE
        );

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END CALCADJUSTVALUE;
























PROCEDURE CLEARMEMORYACCNUM
IS
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ClearMemoryAccNum');
    
    GTNUACCSTATNUMBULK.DELETE;
    GTNUACCOUNTNUMBULK.DELETE;
    GTNUACCOUNTBALBULK.DELETE;
    GTNUACCOUNTCLAIMBULK.DELETE;
    GTNUACCOUNTBULK.DELETE;
    GTNUACCOUNTDATEBULK.DELETE;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END CLEARMEMORYACCNUM;






































PROCEDURE ADDNEWRECORD
(
	INUESTADOCTA	IN	FACTURA.FACTCODI%TYPE,
	INUCUENTA	    IN	CUENCOBR.CUCOCODI%TYPE,
	IRCSERVSUSC	    IN	SERVSUSC%ROWTYPE
)
IS
    RCCUENTA	CUENCOBR%ROWTYPE;	
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.AddNewRecord');
    
    
    PKACCOUNTMGR.FILLRECNEWACCOUNT
	(
	    INUESTADOCTA,
	    INUCUENTA,
	    IRCSERVSUSC,
	    RCCUENTA
	);
	
    
    PKTBLCUENCOBR.INSRECORD (RCCUENTA);
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END ADDNEWRECORD;



























FUNCTION FBOCREACARGOCANCELACION
(
    INUFACTOR   IN  TIMOEMPR.TMEMFAAJ%TYPE,
    INUVALOR	IN	CUENCOBR.CUCOVATO%TYPE
)
    RETURN BOOLEAN
    IS
    NUVALOR         CUENCOBR.CUCOVATO%TYPE;	
    NUVLRAREDOND    CUENCOBR.CUCOVATO%TYPE;	
BEGIN

    UT_TRACE.TRACE('Inicio pkAccountMgr.fboCreaCargoCancelacion '||INUVALOR,1);

    
    NUVALOR := INUVALOR;

    
    IF ( NUVALOR = PKBILLCONST.CERO OR NUVALOR IS NULL ) THEN
    
        UT_TRACE.TRACE('Fin pkAccountMgr.fboCreaCargoCancelacion nuValor '||NUVALOR,1);
    	RETURN( FALSE );
    
    END IF;

    
    IF ( ABS(NUVALOR) < INUFACTOR ) THEN
    
        UT_TRACE.TRACE('Fin pkAccountMgr.fboCreaCargoCancelacion inuFactor '||INUFACTOR,1);
    	RETURN( FALSE );
    
    END IF;

    UT_TRACE.TRACE('Fin pkAccountMgr.fboCreaCargoCancelacion',1);
    RETURN( TRUE );

EXCEPTION
    WHEN LOGIN_DENIED THEN
        UT_TRACE.TRACE('Error pkAccountMgr.fboCreaCargoCancelacion',1);
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        UT_TRACE.TRACE('Error pkAccountMgr.fboCreaCargoCancelacion',1);
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        UT_TRACE.TRACE('Error pkAccountMgr.fboCreaCargoCancelacion',1);
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FBOCREACARGOCANCELACION;


























FUNCTION FNUGETACCBALACE
(
    INUCTA		IN	CUENCOBR.CUCOCODI%TYPE,
    INUFLAG		IN  NUMBER DEFAULT 1
)
RETURN NUMBER
IS
    CNUUPDATE_DB        	CONSTANT NUMBER := 1;
    NUVLRCUENTA	CUENCOBR.CUCOVATO%TYPE;
    NUVLRABONO	CUENCOBR.CUCOVAAB%TYPE;
    NUVLRSALDO	CUENCOBR.CUCOSACU%TYPE;
BEGIN

    UT_TRACE.TRACE('Inicio pkAccountMgr.fnuGetAccBalace '||INUCTA||', '||INUFLAG,1);

    IF (INUCTA = PKBILLCONST.NULOSAT) THEN
    
        NUVLRSALDO := PKBILLCONST.CERO;
    ELSE
        IF ( INUFLAG = CNUUPDATE_DB ) THEN
        
        	NUVLRSALDO := PKTBLCUENCOBR.FNUGETBALANCE
        						(
        						    INUCTA,
        						    PKCONSTANTE.NOCACHE
        						 );
        ELSE
        	PKUPDACCORECEIV.GETACCOUNTDATA( INUCTA,
                                            NUVLRCUENTA,
                                            NUVLRABONO,
                                            NUVLRSALDO );
        
        END IF;
    
    END IF;
    
    UT_TRACE.TRACE('Fin pkAccountMgr.fnuGetAccBalace '||NUVLRSALDO,1);

    RETURN( NUVLRSALDO );

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        UT_TRACE.TRACE('Error pkAccountMgr.fnuGetAccBalace ',1);
        RAISE;

END FNUGETACCBALACE;























PROCEDURE INITADJUACCO IS
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.InitAdjuAcco');

    
    IF ( GBLINITADJUSTACCOUNT ) THEN
    
        
        RETURN;
    
    END IF;

    
    PKBILLINGPARAMMGR.GETADJUSTCONCEPT (GNUCONCAJUSTE);

    
    GBLINITADJUSTACCOUNT := TRUE;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        GBLINITADJUSTACCOUNT := FALSE;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        GBLINITADJUSTACCOUNT := FALSE;
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        GBLINITADJUSTACCOUNT := FALSE;
        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END INITADJUACCO;








































































































PROCEDURE ADJUSTACCOUNT
(
	INUCUENTA      IN	CARGOS.CARGCUCO%TYPE,
	INUNUMSERV     IN	CARGOS.CARGNUSE%TYPE,
	INUCAUSACARG   IN	CARGOS.CARGCACA%TYPE,
	INUPROGRAMA    IN	CARGOS.CARGPROG%TYPE,
	INUFLAGBD      IN   NUMBER DEFAULT 1,
	OSBSIGNO       OUT	CARGOS.CARGSIGN%TYPE,
	ONUVLRAJUSTE   OUT	CARGOS.CARGVALO%TYPE,
	ISBTIPOPROCESO IN CARGOS.CARGTIPR%TYPE DEFAULT NULL
)
IS
	
    CNUUPDATE_DB        CONSTANT NUMBER := 1;
    NUVALORCTA		    CUENCOBR.CUCOVATO%TYPE;	
    NUVLRAJUSTES    	NUMBER;			        
    RCCARGO		        CARGOS%ROWTYPE;		    
    SBSIGNOAJUSTE   	CARGOS.CARGSIGN%TYPE;	
    NUVLRAJUSTE	    	CARGOS.CARGVALO%TYPE;	
    NUSUSC		        SUSCRIPC.SUSCCODI%TYPE;	
    NUCICLO		        CICLO.CICLCODI%TYPE;	
    NUANO		        PERIFACT.PEFAANO%TYPE;	
    NUMES		        PERIFACT.PEFAMES%TYPE;	
    NUPERIODO		    PERIFACT.PEFACODI%TYPE;	
    SBSIGNCANC		    CARGOS.CARGSIGN%TYPE;	
    RCTIMOEMPR          TIMOEMPR%ROWTYPE;

    
    
    BLAJUSTARCUENTAS	BOOLEAN;
    
    NUFACTORAJUSTECTA	TIMOEMPR.TMEMFAAJ%TYPE;

    






















    FUNCTION FNUGETACCTOTALVALUE
    (
        INUCTA		IN	CUENCOBR.CUCOCODI%TYPE,
    	INUFLAG		IN  NUMBER DEFAULT 1
    )
    RETURN NUMBER
    IS
	   NUVLRCUENTA	CUENCOBR.CUCOVATO%TYPE;	
    BEGIN
    
    	PKERRORS.PUSH('pkAccountMgr.AdjustAccount1.fnuGetAccTotalValue');
    	
    	IF (INUCTA = PKBILLCONST.NULOSAT) THEN
    	    NUVLRCUENTA := PKBILLCONST.CERO;
    	ELSE
    	    IF ( INUFLAG = CNUUPDATE_DB ) THEN
        		NUVLRCUENTA := PKTBLCUENCOBR.FNUGETTOTALVALUE
    						   (
    							   INUCTA,
    						       PKCONSTANTE.NOCACHE
    						   );
    	    ELSE
        		NUVLRCUENTA := PKUPDACCORECEIV.FNUGETTOTALAMO( INUCTA );
    	    END IF;
    	END IF;
    	
    	PKERRORS.POP;
    	RETURN( NUVLRCUENTA );
    EXCEPTION
    	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	    PKERRORS.POP;
    	    RAISE;
    
    END FNUGETACCTOTALVALUE;

    











    PROCEDURE CREATECHARGEREC
	(
	    INUVLRCARGO	IN	CARGOS.CARGVALO%TYPE,
	    ISBSIGNO	IN	CARGOS.CARGSIGN%TYPE,
	    ISBDOCSOP	IN	CARGOS.CARGDOSO%TYPE
	)
	IS
	NUCARGCODO CARGOS.CARGCODO%TYPE;
    BEGIN
    
    	PKERRORS.PUSH('pkAccountMgr.AdjustAccount1.CreateChargeRec');
    	
    	
    	RCCARGO.CARGCUCO := INUCUENTA;
    	RCCARGO.CARGNUSE := INUNUMSERV;
    	RCCARGO.CARGCONC := GNUCONCAJUSTE;
    	RCCARGO.CARGCACA := INUCAUSACARG;
    	RCCARGO.CARGSIGN := ISBSIGNO;
    	RCCARGO.CARGPEFA := NUPERIODO;
    	RCCARGO.CARGVALO := ABS(INUVLRCARGO);
    	RCCARGO.CARGDOSO := ISBDOCSOP;
    	RCCARGO.CARGUSUA := SA_BOSYSTEM.GETSYSTEMUSERID;
    	RCCARGO.CARGTIPR := PKBILLCONST.POST_FACTURACION;
    	RCCARGO.CARGUNID := PKBILLCONST.CERO;
    	RCCARGO.CARGFECR := SYSDATE;
    	RCCARGO.CARGPROG := INUPROGRAMA;
    	RCCARGO.CARGCODO := PKCONSTANTE.NULLNUM;
    	
    	IF (ISBTIPOPROCESO IS NULL) THEN
            RCCARGO.CARGTIPR := PKBILLCONST.POST_FACTURACION;
        ELSE
            RCCARGO.CARGTIPR := ISBTIPOPROCESO;
        END IF;

        IF(RCCARGO.CARGTIPR = PKBILLCONST.POST_FACTURACION) THEN
            PKBILLINGNOTEMGR.GETNOTENUMBERCREATED(NUCARGCODO);
            RCCARGO.CARGCODO := NVL(NUCARGCODO,0);
        END IF;
        
      	PKERRORS.POP;
    
    END CREATECHARGEREC;

    


















    PROCEDURE ADDCHARGE
	(
	    INUVLRCARGO	IN	CARGOS.CARGVALO%TYPE,
	    ISBSIGNO	IN	CARGOS.CARGSIGN%TYPE,
	    ISBDOCSOP	IN	CARGOS.CARGDOSO%TYPE
	)
	IS
        RCSERVSUSC  SERVSUSC%ROWTYPE;
    BEGIN
    
    	PKERRORS.PUSH('pkAccountMgr.AdjustAccount1.AddCharge');
    	
    	CREATECHARGEREC( INUVLRCARGO, ISBSIGNO, ISBDOCSOP );

    	
    	PKTBLCARGOS.INSRECORD( RCCARGO );
    	
    	RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD(RCCARGO.CARGNUSE);
    	
    	
    	PKUPDACCORECEIV.UPDACCOREC
        (
            PKBILLCONST.CNUSUMA_CARGO,  RCCARGO.CARGCUCO, RCSERVSUSC.SESUSUSC,
            RCCARGO.CARGNUSE, RCCARGO.CARGCONC, RCCARGO.CARGSIGN,
    		RCCARGO.CARGVALO, INUFLAGBD
        );
    		
    	PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED THEN
    	    PKERRORS.POP;
    	    RAISE LOGIN_DENIED;
    
    END;

    



    FUNCTION FBLNEEDADJUST
    (
        INUFACTORAJUSTE IN  TIMOEMPR.TMEMFAAJ%TYPE,
        INUVALORCTA	IN	CUENCOBR.CUCOVATO%TYPE
    )
    RETURN BOOLEAN
    IS
        NUVALOR		    CUENCOBR.CUCOVATO%TYPE;	
        NUVLRAJUSTE 	CUENCOBR.CUCOVATO%TYPE;	
        NUFACTOR		TIMOEMPR.TMEMFAAJ%TYPE;	
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.AdjustAccount1.fblNeedAdjust');

        NUVALOR := INUVALORCTA;

        
        IF ( NUVALOR = PKBILLCONST.CERO OR NUVALOR IS NULL ) THEN
        	PKERRORS.POP;
        	RETURN( FALSE );
        END IF;

        
        NUVLRAJUSTE := MOD( ABS(NUVALOR), INUFACTORAJUSTE );

        
        IF ( NUVLRAJUSTE = PKBILLCONST.CERO ) THEN
        	PKERRORS.POP;
        	RETURN(FALSE);
        END IF;

        PKERRORS.POP;
        RETURN( TRUE );
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END FBLNEEDADJUST;

BEGIN

    UT_TRACE.TRACE('Inicio pkAccountMgr.AdjustAccount1 '||INUCUENTA||', '||
                    INUNUMSERV||', '||INUCAUSACARG||', '||INUPROGRAMA||', '||
                    INUFLAGBD||', '||ISBTIPOPROCESO,1);
    
    ONUVLRAJUSTE := PKBILLCONST.CERO;
    OSBSIGNO     := NULL;
    
    
    FA_BOPOLITICAREDONDEO.OBTIENEPOLITICAAJUSTE (
                                                    INUNUMSERV,
                                                    RCTIMOEMPR
                                                );

    BLAJUSTARCUENTAS := RCTIMOEMPR.TMEMAJUS = PKCONSTANTE.SI AND
                        RCTIMOEMPR.TMEMFAAJ > 0;

    NUFACTORAJUSTECTA := RCTIMOEMPR.TMEMFAAJ;
    
    
    IF (INUCUENTA = PKBILLCONST.NULOSAT) THEN
    
        UT_TRACE.TRACE('Fin pkAccountMgr.AdjustAccount1 inuCuenta: '||INUCUENTA,1);
    	RETURN;
    
    END IF;
    
    
    INITADJUACCO;
    
    
    IF ( NOT BLAJUSTARCUENTAS ) THEN
    
        UT_TRACE.TRACE('Fin pkAccountMgr.AdjustAccount1 ',1);
    	RETURN;
    
    END IF;
    
    
    NUVALORCTA := FNUGETACCTOTALVALUE( INUCUENTA, INUFLAGBD );
    
    
    IF ( NOT FBLNEEDADJUST( NUFACTORAJUSTECTA, NUVALORCTA ) ) THEN
    
        UT_TRACE.TRACE('Fin pkAccountMgr.AdjustAccount1 '||NUFACTORAJUSTECTA||', '||NUVALORCTA,1);
    	RETURN;
    
    END IF;
    
    
    NUSUSC := PKTBLSERVSUSC.FNUGETSUSCRIPTION( INUNUMSERV );
    
    
    NUCICLO := PKTBLSUSCRIPC.FNUGETBILLINGCYCLE( NUSUSC );
    
    
    PKBILLINGPERIODMGR.ACCCURRENTPERIOD( NUCICLO, NUANO, NUMES, NUPERIODO );
    
    
    IF ( FBOCREACARGOCANCELACION( NUFACTORAJUSTECTA, FNUGETACCBALACE( INUCUENTA, INUFLAGBD ) ) ) THEN
    
        
        NUVLRAJUSTES := PKACCOUNTMGR.FNUGETADJUSTVALUE( INUCUENTA );

        
        IF ( NUVLRAJUSTES != PKBILLCONST.CERO ) THEN
        
        	
        	SBSIGNCANC := PKCHARGEMGR.FSBGETCANCELSIGN( NUVLRAJUSTES );
        	
        	ADDCHARGE( NUVLRAJUSTES, SBSIGNCANC, PKBILLCONST.CSBDOC_CANC_AJUSTE );
        
        END IF;
    
    END IF;
    
    
    NUVALORCTA := FNUGETACCTOTALVALUE( INUCUENTA, INUFLAGBD );
    
    
    CALCADJUSTVALUE (
                        BLAJUSTARCUENTAS,
                        NUFACTORAJUSTECTA,
                        NUVALORCTA,
                        NUVLRAJUSTE,
                        SBSIGNOAJUSTE
                    );

    
    IF ( NUVLRAJUSTE = PKBILLCONST.CERO ) THEN
    
    	PKERRORS.POP;
    	RETURN;
    
    END IF;
    
    
    ADDCHARGE( NUVLRAJUSTE, SBSIGNOAJUSTE, PKBILLCONST.CSBDOC_AJUSTE );
    
    
    ONUVLRAJUSTE := NUVLRAJUSTE;
    OSBSIGNO     := SBSIGNOAJUSTE;
    
    UT_TRACE.TRACE('Fin pkAccountMgr.AdjustAccount1 '||ONUVLRAJUSTE||', '||OSBSIGNO,1);
    RETURN;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        UT_TRACE.TRACE('Error pkAccountMgr.AdjustAccount1 ',1);
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        UT_TRACE.TRACE('Error pkAccountMgr.AdjustAccount1 ',1);
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        UT_TRACE.TRACE('Error pkAccountMgr.AdjustAccount1 ',1);
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END ADJUSTACCOUNT;




































































PROCEDURE ADJUSTACCOUNT
(
	INUCUENTA      IN	CARGOS.CARGCUCO%TYPE,
	INUNUMSERV     IN	CARGOS.CARGNUSE%TYPE,
	INUCAUSACARG   IN	CARGOS.CARGCACA%TYPE,
	INUFLAGBD      IN   NUMBER DEFAULT 1,
	OSBSIGNO       OUT	CARGOS.CARGSIGN%TYPE,
	ONUVLRAJUSTE   OUT	CARGOS.CARGVALO%TYPE
)
IS
	
    CNUUPDATE_DB    CONSTANT NUMBER := 1;
    NUVALORCTA		CUENCOBR.CUCOVATO%TYPE;	
    NUVLRAJUSTES	NUMBER;		          	
    SBSIGNOAJUSTE	CARGOS.CARGSIGN%TYPE;	
    NUVLRAJUSTE		CARGOS.CARGVALO%TYPE;	
    NUSUSC		    SUSCRIPC.SUSCCODI%TYPE;	
    SBSIGNCANC		CARGOS.CARGSIGN%TYPE;	
    RCTIMOEMPR          TIMOEMPR%ROWTYPE;

    
    
    BLAJUSTARCUENTAS	BOOLEAN;
    
    NUFACTORAJUSTECTA	TIMOEMPR.TMEMFAAJ%TYPE;

    























    FUNCTION FNUGETACCTOTALVALUE
    (
        INUCTA		IN	CUENCOBR.CUCOCODI%TYPE,
    	INUFLAG		IN      NUMBER DEFAULT 1
    )
    RETURN NUMBER
    IS
    	NUVLRCUENTA	CUENCOBR.CUCOVATO%TYPE;	
    BEGIN
    
    	PKERRORS.PUSH('pkAccountMgr.AdjustAccount2.fnuGetAccTotalValue');
    	
    	IF (INUCTA = PKBILLCONST.NULOSAT) THEN
    	    NUVLRCUENTA := PKBILLCONST.CERO;
    	ELSE
    	    IF ( INUFLAG = CNUUPDATE_DB ) THEN
        		NUVLRCUENTA := PKTBLCUENCOBR.FNUGETTOTALVALUE
        							(
        							    INUCTA,
        							    PKCONSTANTE.NOCACHE
        							 );
    	    ELSE
        		NUVLRCUENTA := PKUPDACCORECEIV.FNUGETTOTALAMO( INUCTA );
    	    END IF;
    	END IF;
    	
    	PKERRORS.POP;
    	RETURN( NUVLRCUENTA );
    EXCEPTION
    	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	    PKERRORS.POP;
    	    RAISE;
    
    END FNUGETACCTOTALVALUE;

    












    PROCEDURE ADDCHARGE
	(
	    INUVLRCARGO	IN	CARGOS.CARGVALO%TYPE,
	    ISBSIGNO	IN	CARGOS.CARGSIGN%TYPE,
	    ISBDOCSOP	IN	CARGOS.CARGDOSO%TYPE
	)
	IS
    BEGIN
    
    	PKERRORS.PUSH('pkAccountMgr.AdjustAccount2.AddCharge');

        GENERATECHARGE
        (
        	INUNUMSERV,
        	INUCUENTA,
        	GNUCONCAJUSTE,
        	ABS(INUVLRCARGO),
        	ISBSIGNO,
        	SYSDATE,
        	INUCAUSACARG,
        	ISBDOCSOP,
        	PKBILLCONST.AUTOMATICO,
        	NULL,
            NULL
        );

    	
    	PKUPDACCORECEIV.UPDACCOREC
    	(
    		PKBILLCONST.CNUSUMA_CARGO,
    		INUCUENTA,
    		NUSUSC,
    		INUNUMSERV,
    		GNUCONCAJUSTE,
    		ISBSIGNO,
    		ABS(INUVLRCARGO),
    		INUFLAGBD
    	);

    	PKERRORS.POP;
    
    END ADDCHARGE;
    



    FUNCTION FBLNEEDADJUST
    (
        INUFACTORAJUSTE IN  TIMOEMPR.TMEMFAAJ%TYPE,
        INUVALORCTA	IN	CUENCOBR.CUCOVATO%TYPE
    )
    RETURN BOOLEAN
    IS
        NUVALOR		    CUENCOBR.CUCOVATO%TYPE;	
        NUVLRAJUSTE 	CUENCOBR.CUCOVATO%TYPE;	
        NUFACTOR		TIMOEMPR.TMEMFAAJ%TYPE;	
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.AdjustAccount2.fblNeedAdjust');

        NUVALOR := INUVALORCTA;

        
        IF ( NUVALOR = PKBILLCONST.CERO OR NUVALOR IS NULL ) THEN
        	PKERRORS.POP;
        	RETURN( FALSE );
        END IF;

        
        NUVLRAJUSTE := MOD( ABS(NUVALOR), INUFACTORAJUSTE );

        
        IF ( NUVLRAJUSTE = PKBILLCONST.CERO ) THEN
        	PKERRORS.POP;
        	RETURN(FALSE);
        END IF;

        PKERRORS.POP;
        RETURN( TRUE );
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END FBLNEEDADJUST;

BEGIN

    UT_TRACE.TRACE('Inicio pkAccountMgr.AdjustAccount2 '||INUCUENTA||', '||
                    INUNUMSERV||', '||INUCAUSACARG||', '||INUFLAGBD,1);
    
    ONUVLRAJUSTE := PKBILLCONST.CERO;
    OSBSIGNO     := NULL;
    
    
    FA_BOPOLITICAREDONDEO.OBTIENEPOLITICAAJUSTE (
                                                    INUNUMSERV,
                                                    RCTIMOEMPR
                                                );

    BLAJUSTARCUENTAS := RCTIMOEMPR.TMEMAJUS = PKCONSTANTE.SI AND
                        RCTIMOEMPR.TMEMFAAJ > 0;

    NUFACTORAJUSTECTA := RCTIMOEMPR.TMEMFAAJ;

    
    IF (INUCUENTA = PKBILLCONST.NULOSAT) THEN
    
        UT_TRACE.TRACE('Fin pkAccountMgr.AdjustAccount2 inuCuenta '||INUCUENTA,1);
    	RETURN;
    
    END IF;
    
    
    INITADJUACCO;
    
    
    IF ( NOT BLAJUSTARCUENTAS ) THEN
    
        UT_TRACE.TRACE('Fin pkAccountMgr.AdjustAccount2',1);
    	RETURN;
    
    END IF;
    
    
    NUVALORCTA := FNUGETACCTOTALVALUE( INUCUENTA, INUFLAGBD );
    
    
    IF ( NOT FBLNEEDADJUST( NUFACTORAJUSTECTA, NUVALORCTA ) ) THEN
    
        UT_TRACE.TRACE('Fin pkAccountMgr.AdjustAccount2 '||NUFACTORAJUSTECTA||', '||NUVALORCTA,1);
    	RETURN;
    
    END IF;
    
    
    NUSUSC := PKTBLSERVSUSC.FNUGETSUSCRIPTION( INUNUMSERV );

    
    IF ( FBOCREACARGOCANCELACION( NUFACTORAJUSTECTA, FNUGETACCBALACE( INUCUENTA, INUFLAGBD ) ) ) THEN
    
        
        NUVLRAJUSTES := PKACCOUNTMGR.FNUGETADJUSTVALUE( INUCUENTA );

        
        IF ( NUVLRAJUSTES != PKBILLCONST.CERO ) THEN
        
        	
        	SBSIGNCANC := PKCHARGEMGR.FSBGETCANCELSIGN( NUVLRAJUSTES );
        	
        	ADDCHARGE
        	(
        		NUVLRAJUSTES,
        		SBSIGNCANC,
        		PKBILLCONST.CSBDOC_CANC_AJUSTE
        	);
        
        END IF;
    
    END IF;
    
    
    NUVALORCTA := FNUGETACCTOTALVALUE( INUCUENTA, INUFLAGBD );
    
    
    CALCADJUSTVALUE (
                        BLAJUSTARCUENTAS,
                        NUFACTORAJUSTECTA,
                        NUVALORCTA,
                        NUVLRAJUSTE,
                        SBSIGNOAJUSTE
                    );

    
    IF ( NUVLRAJUSTE = PKBILLCONST.CERO ) THEN
    
        UT_TRACE.TRACE('Fin pkAccountMgr.AdjustAccount2 nuVlrAjuste '||NUVLRAJUSTE,1);
    	RETURN;
    
    END IF;
    
    
    ADDCHARGE
	(
	    NUVLRAJUSTE,
	    SBSIGNOAJUSTE,
	    PKBILLCONST.CSBDOC_AJUSTE
	);
	
    
    ONUVLRAJUSTE := NUVLRAJUSTE;
    OSBSIGNO     := SBSIGNOAJUSTE;
    
    UT_TRACE.TRACE('Fin pkAccountMgr.AdjustAccount2 '||ONUVLRAJUSTE||', '||OSBSIGNO,1);
    RETURN;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        UT_TRACE.TRACE('LOGIN_DENIED pkAccountMgr.AdjustAccount2',1);
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        UT_TRACE.TRACE('exERROR_LEVEL2 pkAccountMgr.AdjustAccount2',1);
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        UT_TRACE.TRACE('Error pkAccountMgr.AdjustAccount2',1);
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END ADJUSTACCOUNT;






























PROCEDURE SC_APPLYPOSITIVEBALSERV
(
	INU_MEMAPS_SALDOPEND   IN	PKBCSERVSUSC.STYSESUSAPE,
	INU_MEMAPS_SALDOFAV	   IN	SERVSUSC.SESUSAFA%TYPE,
	INU_MEMAPS_CUCOFACT	   IN	CUENCOBR.CUCOFACT%TYPE,
	INU_MEMAPS_SESUCATE	   IN	SERVSUSC.SESUCATE%TYPE,
	INU_MEMAPS_SESUSUCA	   IN	SERVSUSC.SESUSUCA%TYPE,
	INU_MEMAPS_SESUSUSC	   IN	SERVSUSC.SESUSUSC%TYPE,
	INU_MEMAPS_UPDBD	   IN	NUMBER
)
IS
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.SC_ApplyPositiveBalServ');

    NU_MEMAPS_SALDOPEND := INU_MEMAPS_SALDOPEND ;
    NU_MEMAPS_SALDOFAV  := INU_MEMAPS_SALDOFAV  ;
    NU_MEMAPS_CUCOFACT	:= INU_MEMAPS_CUCOFACT ;
    NU_MEMAPS_SESUCATE	:= INU_MEMAPS_SESUCATE ;
    NU_MEMAPS_SESUSUCA	:= INU_MEMAPS_SESUSUCA ;
    NU_MEMAPS_SESUSUSC	:= INU_MEMAPS_SESUSUSC ;
    NU_MEMAPS_UPDBD	:= INU_MEMAPS_UPDBD ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SC_APPLYPOSITIVEBALSERV ;





















PROCEDURE RC_APPLYPOSITIVEBALSERV
IS
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.RC_ApplyPositiveBalServ');

    NU_MEMAPS_SALDOPEND := NULL;
    NU_MEMAPS_SALDOFAV  := NULL;
    NU_MEMAPS_CUCOFACT	:= NULL ;
    NU_MEMAPS_SESUCATE	:= NULL ;
    NU_MEMAPS_SESUSUCA	:= NULL ;
    NU_MEMAPS_SESUSUSC	:= NULL ;
    NU_MEMAPS_UPDBD	:= NULL ;

    PKERRORS.POP;

END RC_APPLYPOSITIVEBALSERV ;

















































































































PROCEDURE APPLYPOSITIVEBALSERV
(
	INUNUMSERV     IN	SERVSUSC.SESUNUSE%TYPE,
	INUCUENTA      IN	CUENCOBR.CUCOCODI%TYPE DEFAULT NULL,
	ISBTIPOPROCESO IN	CARGOS.CARGTIPR%TYPE DEFAULT PKBILLCONST.POST_FACTURACION,
	IDTFECHACARGO  IN	CARGOS.CARGFECR%TYPE DEFAULT SYSDATE,
	ISBDOCSOP      IN	CARGOS.CARGDOSO%TYPE DEFAULT NULL,
    INUUPDATEDB    IN   NUMBER DEFAULT PKBILLCONST.CNUUPDATE_DB
)
IS
    SBDOCSOP		CARGOS.CARGDOSO%TYPE := NULL;	
    NUSALDOPEND		PKBCSERVSUSC.STYSESUSAPE;	
    NUSALDOAFAV		SERVSUSC.SESUSAFA%TYPE;	
    NUVLRAPLICAR	NUMBER;			
    
    NUVALORRECLA    CUENCOBR.CUCOVARE%TYPE;
    
    NUCHARGECAUSE       CARGOS.CARGCACA%TYPE;

    
    NUPRODUCTTYPE       SERVICIO.SERVCODI%TYPE;
    
    
    NUFLAGBD		NUMBER;
    
    BLSPECIFICACCOUNT BOOLEAN := FALSE;

    
    CURSOR CUCUENCOBR( INUNUMSERV	CUENCOBR.CUCONUSE%TYPE )
    IS
        SELECT --+ pkAccountMgr.ApplyPositiveBalServ
                CUCOCODI, NVL( CUCOSACU, PKBILLCONST.CERO ) NUSALDOCTA,
    	       NVL( CUCOVARE, PKBILLCONST.CERO ) NUVLRRECLAMO
        FROM   CUENCOBR,FACTURA
        WHERE  CUCONUSE = INUNUMSERV
        AND    CUCOFACT = FACTCODI
        AND    (   NVL(CUCOSACU, PKBILLCONST.CERO)
    	     - CASE WHEN (NVL(CUCOVARE, 0) < 0) THEN 0 ELSE NVL(CUCOVARE, 0) END) > PKBILLCONST.CERO
        ORDER BY FACTFEGE;

    




    PROCEDURE INITIALIZE IS
    BEGIN
    
        PKERRORS.PUSH ('pkAccountMgr.ApplyPositiveBalServ.Initialize');

        
        PKBILLINGNOTEMGR.GETNOTENUMBERCREATED (GNUBILLINGNOTE);

        

        IF ( GBLINITAPPLYPOSBALSERV ) THEN
        
            
            RETURN;
        
       END IF;

        
        PKBILLINGPARAMMGR.GETAPPPOSBALCNC (GNUCONCAPLSALDFAV);

        
        GBLINITAPPLYPOSBALSERV := TRUE;

    	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            GBLINITAPPLYPOSBALSERV := FALSE;
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
    
    END INITIALIZE;

    







































    PROCEDURE ADDAPPPOSBALCHARGE
	(
	    INUCTA	IN	CUENCOBR.CUCOCODI%TYPE,
	    INUSALDOCTA	IN	CUENCOBR.CUCOSACU%TYPE
	)
	IS
    	NUSUSCRIPCION	SERVSUSC.SESUSUSC%TYPE;	
    BEGIN
    
    	PKERRORS.PUSH('pkAccountMgr.ApplyPositiveBalServ.AddAppPosBalCharge');

       	
    	
    	IF ( SBDOCSOP IS NULL ) THEN
    	    SBDOCSOP := '-';
    	END IF;

    	
    	IF (NU_MEMAPS_SESUSUSC IS NULL) THEN
    	    
    	    NUSUSCRIPCION := PKTBLSERVSUSC.FNUGETSUSCRIPTION( INUNUMSERV );
    	ELSE
    	    NUSUSCRIPCION := NU_MEMAPS_SESUSUSC ;
    	END IF;
    	
        
        PKBOPOSITIVEBALANCEPROCESSES.APPLYPOSITIVEBALANCE
        (
            NUSUSCRIPCION,                          
            INUNUMSERV,                             
            INUCTA,                                 
            GNUCONCAPLSALDFAV,                      
            NUVLRAPLICAR,                           
            PKBILLCONST.APLSALDFAV,                 
            NUCHARGECAUSE,                          
            SBDOCSOP,                               
            ISBTIPOPROCESO,                         
            INUSALDOCTA,                            
            IDTFECHACARGO,                          
            GNUBILLINGNOTE,                         
            PKBILLCONST.APLSALDFAV,                 
            GSBTIPOSAFA,                            
            GNUSOLICITUD,                           
            INUUPDATEDB                             
        );

    	PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED THEN
    	    PKERRORS.POP;
    	    RAISE LOGIN_DENIED;
    END ADDAPPPOSBALCHARGE;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ApplyPositiveBalServ');

    
    INITIALIZE;
    
    
    NUPRODUCTTYPE := PKTBLSERVSUSC.FNUGETSERVICE(INUNUMSERV);

	
    IF ( GSBTIPOSAFA = PKBILLCONST.DEPOSITO ) THEN

        
        NUCHARGECAUSE := FA_BOCHARGECAUSES.FNUWARRDEPAPPCHCAUSE(NUPRODUCTTYPE);

        
        
        GSBTIPOSAFA := NULL;
    ELSE
        
        NUCHARGECAUSE := FA_BOCHARGECAUSES.FNUGENERICCHCAUSE(NUPRODUCTTYPE);

    END IF;

    
    IF (NU_MEMAPS_SALDOPEND IS NULL) THEN
    	
    	
    	NUSALDOPEND := PKBCCUENCOBR.FNUGETOUTSTANDBAL
    			(
    			    INUNUMSERV
    			);
    ELSE
    	
    	NUSALDOPEND := NU_MEMAPS_SALDOPEND ;
    END IF;
    


    
    IF (NU_MEMAPS_SALDOFAV IS NULL) THEN
        
        IF ( GSBTIPOSAFA = PKBILLCONST.SOLICITUD AND GNUSOLICITUD IS NOT NULL ) THEN
            
            NUSALDOAFAV := RC_BCPOSITIVEBALANCE.FNUGETPOSBALBYREQUEST( INUNUMSERV, GNUSOLICITUD );
            
            IF (INUCUENTA IS NOT NULL) THEN
            
                NUVALORRECLA := NVL(PKTBLCUENCOBR.FNUGETCUCOVARE(INUCUENTA),0);
                NUSALDOPEND  := NVL(PKTBLCUENCOBR.FNUGETCUCOSACU(INUCUENTA),0);

                IF(NUVALORRECLA > PKBILLCONST.CERO) THEN
                    NUSALDOPEND := NUSALDOPEND - NUVALORRECLA;
                END IF;

                
                IF(NUSALDOPEND < PKBILLCONST.CERO)  THEN
                    NUSALDOPEND := PKBILLCONST.CERO;
                END IF;

                
                BLSPECIFICACCOUNT := TRUE;
        
            END IF;
        
        ELSE
            
            NUSALDOAFAV := RC_BCPOSITIVEBALANCE.FNUGETPOSITIVEBALANCE( INUNUMSERV );
        END IF;
    ELSE
    	
    	NUSALDOAFAV := NU_MEMAPS_SALDOFAV ;
    END IF;

    
    IF (NUSALDOAFAV < 0) THEN
    
    	PKERRORS.POP;
    	RETURN ;
    
    END IF ;


    
    IF (NU_MEMAPS_UPDBD IS NULL) THEN
    	
    	NUFLAGBD := PKBILLCONST.CNUUPDATE_DB;
    ELSE
    	NUFLAGBD := NU_MEMAPS_UPDBD ;
    END IF;

    
    IF ( NUSALDOPEND = PKBILLCONST.CERO OR NUSALDOAFAV = PKBILLCONST.CERO )
    THEN
    
    	
    	PKERRORS.POP;
    	RETURN;
    
    END IF;

    
    
    VERIFYPRODPROCESSSECURITY (INUNUMSERV, 'APLI_SF');

    
    SBDOCSOP := ISBDOCSOP ;

    
    IF ( INUCUENTA IS NOT NULL AND SBDOCSOP IS NULL ) THEN
    	
    	SBDOCSOP := PKBOSUPPORTDOCUMENTMGR.FSBGETAPPLYPOSBALANCE(INUCUENTA);
    END IF;

    
    IF (BLSPECIFICACCOUNT) THEN

        IF ( NUSALDOAFAV > ( NUSALDOPEND - NUVALORRECLA ) ) THEN
            NUVLRAPLICAR :=  NUSALDOPEND - NUVALORRECLA;
        ELSE
            NUVLRAPLICAR := NUSALDOAFAV;
        END IF;
        
    	
    	ADDAPPPOSBALCHARGE
    	(
    		INUCUENTA,
            NUSALDOPEND
    	);

    ELSE
        
        
        FOR RCCTA IN CUCUENCOBR( INUNUMSERV ) LOOP
        
        	
        	
        	EXIT WHEN NUSALDOAFAV = PKBILLCONST.CERO;

        	
        	IF ( NUSALDOAFAV > ( RCCTA.NUSALDOCTA - RCCTA.NUVLRRECLAMO ) ) THEN
        	    NUVLRAPLICAR := RCCTA.NUSALDOCTA - RCCTA.NUVLRRECLAMO;
        	ELSE
        	    NUVLRAPLICAR := NUSALDOAFAV;
        	END IF;

        	
        	NUSALDOAFAV := NUSALDOAFAV - NUVLRAPLICAR;

        	
        	ADDAPPPOSBALCHARGE
        	(
        		RCCTA.CUCOCODI,
        		RCCTA.NUSALDOCTA
        	);
        
        END LOOP;
        
    END IF;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
    	RC_APPLYPOSITIVEBALSERV ;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
    	RC_APPLYPOSITIVEBALSERV ;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
    	RC_APPLYPOSITIVEBALSERV ;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END APPLYPOSITIVEBALSERV;


    






















    PROCEDURE APPLYPOSBALBYDEPOSIT
    (
        INUNUMSERV      IN  SERVSUSC.SESUNUSE%TYPE,
        INUCUENTA       IN  CUENCOBR.CUCOCODI%TYPE DEFAULT NULL,
        ISBTIPOPROCESO  IN  CARGOS.CARGTIPR%TYPE DEFAULT PKBILLCONST.POST_FACTURACION,
        IDTFECHACARGO   IN  CARGOS.CARGFECR%TYPE DEFAULT SYSDATE,
        ISBDOCSOP       IN  CARGOS.CARGDOSO%TYPE DEFAULT NULL
    )
    IS
    BEGIN
        PKERRORS.PUSH( 'pkAccountMgr.ApplyPosBalByDeposit' );
        UT_TRACE.TRACE( 'Inicio [pkAccountMgr.ApplyPosBalByDeposit]' );

        
        GSBTIPOSAFA := PKBILLCONST.DEPOSITO;
        
        APPLYPOSITIVEBALSERV
        (
            INUNUMSERV,
            INUCUENTA,
            ISBTIPOPROCESO,
            IDTFECHACARGO,
            ISBDOCSOP
        );
        
        GSBTIPOSAFA := NULL;

        UT_TRACE.TRACE( 'Fin [pkAccountMgr.ApplyPosBalByDeposit]' );
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            
            GSBTIPOSAFA := NULL;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.POP;
            
            GSBTIPOSAFA := NULL;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END APPLYPOSBALBYDEPOSIT;





















PROCEDURE APPLYPOSITIVEBALSUSC
(
	INUSUSC		IN	SUSCRIPC.SUSCCODI%TYPE
)
IS
    
    CURSOR CUSERVSUSC IS
        SELECT SESUNUSE
        FROM   SERVSUSC
        WHERE  SESUSUSC = INUSUSC;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ApplyPositiveBalSusc');

    
    

    FOR RCSERV IN CUSERVSUSC LOOP
    
    	
    	
    	PKACCOUNTMGR.APPLYPOSITIVEBALSERV
    	(
    	    RCSERV.SESUNUSE
    	);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END APPLYPOSITIVEBALSUSC;





























PROCEDURE CALCADJUSTVALUE
(
    INUNUMSERV  IN  CUENCOBR.CUCONUSE%TYPE,
    INUVALORCTA	IN	CUENCOBR.CUCOVATO%TYPE,
	ONUVALORAJUSTE	OUT	CARGOS.CARGVALO%TYPE,
	OSBSIGNOAJUSTE	OUT	CARGOS.CARGSIGN%TYPE
)
IS

    
    
    BLAJUSTARCUENTAS	BOOLEAN;
    
    NUFACTORAJUSTECTA   TIMOEMPR.TMEMFAAJ%TYPE;

    RCTIMOEMPR          TIMOEMPR%ROWTYPE;

BEGIN

    PKERRORS.PUSH('pkAccountMgr.CalcAdjustValue2');
    
    ONUVALORAJUSTE := PKBILLCONST.CERO;
    OSBSIGNOAJUSTE := NULL;

    
    FA_BOPOLITICAREDONDEO.OBTIENEPOLITICAAJUSTE (
                                                    INUNUMSERV,
                                                    RCTIMOEMPR
                                                );

    BLAJUSTARCUENTAS := RCTIMOEMPR.TMEMAJUS = PKCONSTANTE.SI AND
                        RCTIMOEMPR.TMEMFAAJ > 0;

    NUFACTORAJUSTECTA := RCTIMOEMPR.TMEMFAAJ;
    
    CALCADJUSTVALUE (
                        BLAJUSTARCUENTAS,
                        NUFACTORAJUSTECTA,
                        INUVALORCTA,
                        ONUVALORAJUSTE,
                        OSBSIGNOAJUSTE
                    );

    PKERRORS.POP;
    RETURN;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END CALCADJUSTVALUE;

    





















    
    PROCEDURE CALCSUSCADJUSTVALUE
    (
        INUSUSCRIPTION      IN      SUSCRIPC.SUSCCODI%TYPE,
        INUVALUE            IN      CUENCOBR.CUCOSACU%TYPE,
        ONUADJUSTEDVALUE    OUT     CUENCOBR.CUCOSACU%TYPE,
        OSBADJUSTSIGN       OUT     CARGOS.CARGSIGN%TYPE
    )
    IS
        
        
        

        
        BLADJUSTACCOUNT                     BOOLEAN := TRUE;

        
        NUADJUSTFACTOR                      TIMOEMPR.TMEMFAAJ%TYPE;

    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkAccountMgr.CalcSuscAdjustValue]', 3 );

        ONUADJUSTEDVALUE := PKBILLCONST.CERO;
        OSBADJUSTSIGN := NULL;

        
        FA_BOPOLITICAREDONDEO.OBTIENEPOLITICAAJUSTE
        (
            INUSUSCRIPTION,
            BLADJUSTACCOUNT,
            NUADJUSTFACTOR
        );

        
        IF ( NOT BLADJUSTACCOUNT ) THEN
        
            UT_TRACE.TRACE( 'Fin: [pkAccountMgr.CalcSuscAdjustValue]', 3 );
        	RETURN;
        
        END IF;
        
        
        PKACCOUNTMGR.CALCVALORAJUSTE
        (
            NUADJUSTFACTOR,
            INUVALUE,
            ONUADJUSTEDVALUE,
            OSBADJUSTSIGN
        );

        UT_TRACE.TRACE( 'Fin: [pkAccountMgr.CalcSuscAdjustValue]', 3 );

    EXCEPTION
    
        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkAccountMgr.CalcSuscAdjustValue]', 3 );
            RAISE;
            
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkAccountMgr.CalcSuscAdjustValue]', 3 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END CALCSUSCADJUSTVALUE;




































































PROCEDURE FILLRECNEWACCOUNT
(
	INUESTADOCTA	IN	FACTURA.FACTCODI%TYPE,
	INUCUENTA	    IN	CUENCOBR.CUCOCODI%TYPE,
	IRCSERVSUSC	    IN	SERVSUSC%ROWTYPE,
	ORCCUENCOBR	    OUT	CUENCOBR%ROWTYPE
)
IS
    RCCUENCOBRNULL	CUENCOBR%ROWTYPE;	
    RCPERIFACT		PERIFACT%ROWTYPE;	

BEGIN

    PKERRORS.PUSH('pkAccountMgr.FillRecNewAccount');
    
    ORCCUENCOBR := RCCUENCOBRNULL;

    
    PKSUBSCRIBERMGR.ACCCURRENTPERIOD(   IRCSERVSUSC.SESUSUSC,
					RCPERIFACT );
					
    
    ORCCUENCOBR.CUCOCODI := INUCUENTA;
    ORCCUENCOBR.CUCOGRIM := PKBILLCONST.CERO;
    ORCCUENCOBR.CUCOVAAP := PKBILLCONST.CERO;
    ORCCUENCOBR.CUCOVARE := PKBILLCONST.CERO;
    ORCCUENCOBR.CUCOCATE := IRCSERVSUSC.SESUCATE;
    ORCCUENCOBR.CUCOSUCA := IRCSERVSUSC.SESUSUCA;
    ORCCUENCOBR.CUCOPLSU := IRCSERVSUSC.SESUPLFA;
    ORCCUENCOBR.CUCOVATO := PKBILLCONST.CERO;
    ORCCUENCOBR.CUCOVAAB := PKBILLCONST.CERO;
    ORCCUENCOBR.CUCOFEPA := NULL;
    ORCCUENCOBR.CUCOSACU := PKBILLCONST.CERO;
    ORCCUENCOBR.CUCOVRAP := PKBILLCONST.CERO;
    ORCCUENCOBR.CUCONUSE := IRCSERVSUSC.SESUNUSE;
    ORCCUENCOBR.CUCOFACT := INUESTADOCTA;
    ORCCUENCOBR.CUCOFEVE := PKSUBSDATELINEMGR.FDTGETDATELINE
				( IRCSERVSUSC.SESUSUSC, RCPERIFACT.PEFAANO,
 				  RCPERIFACT.PEFAMES,   RCPERIFACT.PEFAFEPA );
    ORCCUENCOBR.CUCOSIST := IRCSERVSUSC.SESUSIST;
    ORCCUENCOBR.CUCOVAFA := PKBILLCONST.CERO;
    ORCCUENCOBR.CUCOIMFA := PKBILLCONST.CERO;
    
    
	ORCCUENCOBR.CUCODIIN := PR_BCPRODUCT.FNUGETADDRESSID(
                                                            IRCSERVSUSC.SESUNUSE
                                                        );

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FILLRECNEWACCOUNT;





























PROCEDURE INITGENPOSBAL
IS
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.InitGenPosBal');

    
    PKBILLINGNOTEMGR.GETNOTENUMBERCREATED (GNUBILLINGNOTE);

    
    IF ( GBLINITGENPOSITIVEBAL ) THEN
    
        
        RETURN;
    
    END IF;

    
    PKBILLINGPARAMMGR.GETADJUSTCONCEPT(GNUCONCAJUSTE);

    
    PKBILLINGPARAMMGR.GETPOSBALANCECNC (GNUCONCSALDFAV);

    
    PKPARAMETERMGR.GETACCOUNTTYPECOUPON (GSBCUPONCUENTA);

    
    GBLINITGENPOSITIVEBAL := TRUE;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        GBLINITGENPOSITIVEBAL := FALSE;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        GBLINITGENPOSITIVEBAL := FALSE;
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        GBLINITGENPOSITIVEBAL := FALSE;
        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END INITGENPOSBAL;



































































PROCEDURE GETCREDITCONCEPT
(
	INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE,
	INUVLRSF	IN	CUENCOBR.CUCOVATO%TYPE,
	OTBCONCSAFA	OUT	PKACCOUNTMGR.TYTBCONCSAFA
)
IS
    NUIDX	NUMBER;

    TBCARGCONC	PKTBLCARGOS.TYCARGCONC;
    TBCARGSIGN  PKTBLCARGOS.TYCARGSIGN;
    TBCARGSLD   PKTBLCARGOS.TYCARGVALO;
    TBCARGFECR  PKTBLCARGOS.TYCARGFECR;

    TYPE TYRCSALDO IS RECORD
    (
    	NUVLRCR		CARGOS.CARGVALO%TYPE,
    	NUSALDO		CARGOS.CARGVALO%TYPE
    );

    TYPE TYTBSALDO IS TABLE OF TYRCSALDO INDEX BY BINARY_INTEGER ;
    TBSALDO	TYTBSALDO ;

    TYPE TYTBORDER IS TABLE OF NUMBER INDEX BY BINARY_INTEGER ;
    TBORDER	TYTBORDER ;

    NUINDORD	NUMBER;

    
    NUSALDOSF	CUENCOBR.CUCOVATO%TYPE;
    NUCONCSAFA	CONCEPTO.CONCCODI%TYPE;
    NUVLRSAFA	CARGOS.CARGVALO%TYPE;

    
    DTFECHA	DATE;

    
    NUSIGNO	NUMBER;

    
    CURSOR CUCARGOS (NUCTA	CUENCOBR.CUCOCODI%TYPE) IS
        SELECT CARGCONC, CARGSIGN, (CARGVALO) SALDO, CARGFECR
        FROM   CARGOS
        WHERE  CARGCUCO = NUCTA
        AND    CARGCONC <> GNUCONCAJUSTE
        AND    CARGSIGN IN ('DB','CR')
        AND    TRUNC(CARGFECR) = DTFECHA
        ORDER BY CARGFECR DESC, CARGSIGN, CARGVALO DESC;
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.GetCreditConcept');

    OTBCONCSAFA.DELETE;

    TBSALDO.DELETE ;
    TBORDER.DELETE;

    
    DTFECHA := TRUNC (SYSDATE);

    
    NUINDORD := 1;

    OPEN CUCARGOS (INUCUENTA);
    FETCH CUCARGOS BULK COLLECT INTO TBCARGCONC,
                                     TBCARGSIGN,
                                     TBCARGSLD,
                                     TBCARGFECR;
    CLOSE CUCARGOS;

    IF (TBCARGCONC.COUNT = 0) THEN
       PKERRORS.POP;
       RETURN;
    END IF;

    
    
    FOR IX IN TBCARGCONC.FIRST .. TBCARGCONC.LAST LOOP
    
    	
    	IF (TBSALDO.EXISTS (TBCARGCONC(IX))) THEN
    	
    	    NUSIGNO := 1;

    	    
    	    IF ( TBCARGSIGN(IX) = 'CR') THEN
        		NUSIGNO := -1;
    	    END IF;

    	    
    	    TBSALDO (TBCARGCONC(IX)).NUSALDO := TBSALDO (TBCARGCONC(IX)).NUSALDO +
    					    (TBCARGSLD(IX) * NUSIGNO);

    	    
    	    
    	    
    	    IF ( TBCARGSIGN(IX) = 'CR' AND TBCARGFECR(IX) >= DTFECHA) THEN
        		TBSALDO (TBCARGCONC(IX)).NUVLRCR :=
        			TBSALDO (TBCARGCONC(IX)).NUVLRCR + TBCARGSLD(IX) ;
    	    END IF;
    	
    	ELSE
    	
    	    
    	    
    	    
    	    IF ( TBCARGSIGN(IX) = 'CR' AND TBCARGFECR(IX) >= DTFECHA) THEN
        		TBSALDO (TBCARGCONC(IX)).NUVLRCR   := TBCARGSLD(IX) ;
        		TBSALDO (TBCARGCONC(IX)).NUSALDO   := TBCARGSLD(IX) * (-1) ;

        		TBORDER (NUINDORD) := TBCARGCONC(IX) ;
        		NUINDORD := NUINDORD + 1 ;
    	    END IF;
    	
    	END IF;
    
    END LOOP;

    
    
    IF (TBSALDO.COUNT = 0) THEN
        TBSALDO.DELETE ;
        TBORDER.DELETE;

        
        FOR IX IN TBCARGCONC.FIRST .. TBCARGCONC.LAST LOOP
        
    	    
    	    IF (TBSALDO.EXISTS (TBCARGCONC(IX))) THEN
    	    
    	         NUSIGNO := 1;

    	         
    	         IF ( TBCARGSIGN(IX) = 'CR') THEN
    		         NUSIGNO := -1;
    	         END IF;

    	         
    	         TBSALDO (TBCARGCONC(IX)).NUSALDO := TBSALDO (TBCARGCONC(IX)).NUSALDO +
    					    (TBCARGSLD(IX) * NUSIGNO);

    	         
    	         
    	         
    	         IF ( TBCARGSIGN(IX) = 'CR') THEN
        		     TBSALDO (TBCARGCONC(IX)).NUVLRCR :=
        			     TBSALDO (TBCARGCONC(IX)).NUVLRCR + TBCARGSLD(IX) ;
    	         END IF;
        	    
    	    ELSE
    	    
    	        
    	        
    	        
    	        IF ( TBCARGSIGN(IX) = 'CR') THEN
        		    TBSALDO (TBCARGCONC(IX)).NUVLRCR   := TBCARGSLD(IX) ;
        		    TBSALDO (TBCARGCONC(IX)).NUSALDO   := TBCARGSLD(IX) * (-1) ;

        		    TBORDER (NUINDORD) := TBCARGCONC(IX) ;
        		    NUINDORD := NUINDORD + 1 ;
    	        END IF;
    	    
    	    END IF;
        
        END LOOP;
    END IF;

    
    IF (TBSALDO.COUNT = 0) THEN
    
       PKERRORS.POP;
       RETURN;
    
    END IF;

    NUIDX := 1;
    NUSALDOSF := INUVLRSF;
    NUINDORD  := TBORDER.FIRST ;

    
    
    
    

    
    LOOP
    
        
        EXIT WHEN (NUINDORD IS NULL OR NUSALDOSF = 0) ;

        
        NUCONCSAFA := TBORDER (NUINDORD) ;

        
        IF (TBSALDO (NUCONCSAFA).NUSALDO >= 0) THEN
            GOTO PROXIMO ;
        ELSE
            
            IF ( NUSALDOSF > ABS (TBSALDO (NUCONCSAFA).NUSALDO) ) THEN
                NUVLRSAFA := ABS (TBSALDO (NUCONCSAFA).NUSALDO);
            ELSE
                NUVLRSAFA := NUSALDOSF ;
            END IF;
        END IF;

        
        OTBCONCSAFA (NUIDX).NUCONCCODI := NUCONCSAFA ;
        OTBCONCSAFA (NUIDX).NUVLRSAFA  := NUVLRSAFA  ;

        
        NUSALDOSF := NUSALDOSF - NUVLRSAFA ;

        
        NUIDX := NUIDX + 1;

        << PROXIMO >>

        
        NUINDORD := TBORDER.NEXT (NUINDORD) ;
	
    END LOOP;

    
    IF ( NUSALDOSF > 0 ) THEN
    
       OTBCONCSAFA (1).NUCONCCODI := TBORDER (TBORDER.FIRST) ;
       OTBCONCSAFA (1).NUVLRSAFA  := NVL(OTBCONCSAFA (1).NUVLRSAFA,0) +
                                     NVL(NUSALDOSF, 0)  ;
    
    END IF;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCREDITCONCEPT ;






























PROCEDURE SC_GENPOSITIVEBAL
(
	INU_MEMGPB_CUCOFACT	IN	CUENCOBR.CUCOFACT%TYPE,
	INU_MEMGPB_CUCONUSE	IN  CUENCOBR.CUCONUSE%TYPE,
	INU_MEMGPB_SESUCATE	IN  SERVSUSC.SESUCATE%TYPE,
	INU_MEMGPB_SESUSUCA	IN  SERVSUSC.SESUSUCA%TYPE,
	INU_MEMGPB_SESUSUSC	IN  SERVSUSC.SESUSUSC%TYPE,
	INU_MEMGPB_UPDBD	IN  NUMBER
)
IS
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.SC_GenPositiveBal');

    NU_MEMGPB_CUCOFACT := INU_MEMGPB_CUCOFACT;
    NU_MEMGPB_CUCONUSE := INU_MEMGPB_CUCONUSE;
    NU_MEMGPB_SESUCATE := INU_MEMGPB_SESUCATE;
    NU_MEMGPB_SESUSUCA := INU_MEMGPB_SESUSUCA;
    NU_MEMGPB_SESUSUSC := INU_MEMGPB_SESUSUSC;
    NU_MEMGPB_UPDBD    := INU_MEMGPB_UPDBD;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SC_GENPOSITIVEBAL ;





















PROCEDURE RC_GENPOSITIVEBAL
IS
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.RC_GenPositiveBal');

    NU_MEMGPB_CUCOFACT := NULL;
    NU_MEMGPB_CUCONUSE := NULL;
    NU_MEMGPB_SESUCATE := NULL;
    NU_MEMGPB_SESUSUCA := NULL;
    NU_MEMGPB_SESUSUSC := NULL;
    NU_MEMGPB_UPDBD    := NULL;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END RC_GENPOSITIVEBAL ;
























































































PROCEDURE GENPOSITIVEBAL
(
	INUCUENTA	    IN	CUENCOBR.CUCOCODI%TYPE,
	INUCONCSAFA	    IN	CARGOS.CARGCONC%TYPE DEFAULT NULL,
	INUSALFAV	    IN	PKBCCUENCOBR.STYCUCOSAFA DEFAULT PKBILLCONST.CERO,
	ISBTIPOPROCESO	IN	CARGOS.CARGTIPR%TYPE DEFAULT PKBILLCONST.POST_FACTURACION,
	IDTFECHACARGO	IN	CARGOS.CARGFECR%TYPE DEFAULT SYSDATE
)
IS
    SBDOCSOP		CARGOS.CARGDOSO%TYPE;	
    NUSALDOCTA		CUENCOBR.CUCOSACU%TYPE;	
    NUESTADOCTA		FACTURA.FACTCODI%TYPE;	
    NUSUSCRIPCION	SUSCRIPC.SUSCCODI%TYPE;	
    NUNUMSERV		SERVSUSC.SESUNUSE%TYPE;	

    
    NUFLAGBD		NUMBER;

    
    TBCONCSAFA		TYTBCONCSAFA ;
    
    
    NUCHARGECAUSE   CAUSCARG.CACACODI%TYPE;

    

















    PROCEDURE ADDPOSITIVEBALCHARGE
	(
	    INUCONCEPTOSF	IN	CARGOS.CARGCONC%TYPE,
	    INUVALORSF      IN  CARGOS.CARGVALO%TYPE
	)
	IS
    BEGIN
    
    	PKERRORS.PUSH('pkAccountMgr.GenPositiveBal.AddPositiveBalCharge');

    	
        GENERATECHARGE
        (
        	NUNUMSERV,
        	INUCUENTA,
        	INUCONCEPTOSF,
        	INUVALORSF,
        	PKBILLCONST.SALDOFAVOR,
        	IDTFECHACARGO,
        	NUCHARGECAUSE,
        	SBDOCSOP,
        	ISBTIPOPROCESO,
        	NVL (GNUBILLINGNOTE, 0),  
            NULL
        );

    	
    	PKUPDACCORECEIV.UPDACCOREC
    	(
    		PKBILLCONST.CNUSUMA_CARGO,
    		INUCUENTA,
    		NUSUSCRIPCION,
    		NUNUMSERV,
    		INUCONCEPTOSF,
    		PKBILLCONST.SALDOFAVOR,
    		INUVALORSF,
    		NUFLAGBD
    	);

        
        PKBOPOSITIVEBALANCEPROCESSES.REGISTER
        (
            NUNUMSERV,
            'CTN',
            INUCUENTA,
            IDTFECHACARGO,
            INUVALORSF
        );

    	PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED THEN
    	    PKERRORS.POP;
    	    RAISE LOGIN_DENIED;
    
    END ADDPOSITIVEBALCHARGE;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.GenPositiveBal');

    
    INITGENPOSBAL;

    
    IF ( INUSALFAV  = PKBILLCONST.CERO ) THEN
    
    	
    	
    	NUSALDOCTA := PKTBLCUENCOBR.FNUGETBALANCE(  INUCUENTA,
    						    PKCONSTANTE.NOCACHE );
    	IF ( NUSALDOCTA >= PKBILLCONST.CERO ) THEN
    	
    	    
    	    PKERRORS.POP;
    	    RETURN;
        
    	END IF;
    
    ELSE
    	
    	NUSALDOCTA := INUSALFAV ;
    END IF;

    
    NUSALDOCTA := ABS (NUSALDOCTA);

    
    SBDOCSOP := PKBOSUPPORTDOCUMENTMGR.FSBGETNEGATIVEACCOUNT(INUCUENTA);

    
    IF (NU_MEMGPB_CUCOFACT IS NULL) THEN
    	
    	NUESTADOCTA := PKTBLCUENCOBR.FNUGETACCOUNTSTATUS (INUCUENTA);
    ELSE
    	NUESTADOCTA := NU_MEMGPB_CUCOFACT;
    END IF;

    
    IF (NU_MEMGPB_CUCONUSE IS NULL) THEN
    	
    	NUNUMSERV := PKTBLCUENCOBR.FNUGETSERVICENUMBER (INUCUENTA);
    ELSE
    	NUNUMSERV := NU_MEMGPB_CUCONUSE ;
    END IF;

    
    
    VERIFYPRODPROCESSSECURITY (NUNUMSERV, 'GENE_SF');

    
    IF (NU_MEMGPB_SESUSUSC IS NULL) THEN
    	
    	NUSUSCRIPCION := PKTBLSERVSUSC.FNUGETSUSCRIPTION (NUNUMSERV);
    ELSE
    	NUSUSCRIPCION := NU_MEMGPB_SESUSUSC;
    END IF;

    
    IF (NU_MEMGPB_UPDBD IS NULL) THEN
    	
    	NUFLAGBD := PKBILLCONST.CNUUPDATE_DB;
    ELSE
    	NUFLAGBD := NU_MEMGPB_UPDBD;
    END IF;

    
    TBCONCSAFA.DELETE ;

    
    
    IF (INUCONCSAFA IS NULL) THEN
    
    	
    	GETCREDITCONCEPT
    	(
    		INUCUENTA,
    		NUSALDOCTA,
    		TBCONCSAFA
    	);

    	
        IF (TBCONCSAFA.FIRST IS NULL) THEN
        
    	    
    	    TBCONCSAFA(1).NUCONCCODI := GNUCONCSALDFAV ;
    	    TBCONCSAFA(1).NUVLRSAFA  := NUSALDOCTA ;
        
        END IF;
    
    ELSE
    
    	
    	TBCONCSAFA(1).NUCONCCODI := INUCONCSAFA ;
    	TBCONCSAFA(1).NUVLRSAFA  := NUSALDOCTA ;
    
    END IF;
    
    
    NUCHARGECAUSE := FA_BOCHARGECAUSES.FNUGENERICCHCAUSE(PKCONSTANTE.NULLNUM);

    FOR IDX IN TBCONCSAFA.FIRST .. TBCONCSAFA.LAST LOOP
    	
    	ADDPOSITIVEBALCHARGE
   	    (
    		TBCONCSAFA (IDX).NUCONCCODI,
    		TBCONCSAFA (IDX).NUVLRSAFA
   	    );
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GENPOSITIVEBAL;

























PROCEDURE GETACCSTWITHBALCACHE
(
	IOTNUACCSTATNUMBULK	IN OUT NOCOPY 	PKTBLCUENCOBR.TYCUCOFACT
)
IS
BEGIN

    PKERRORS.PUSH('pkAccountMgr.GetAccStWithBalCache');
    
    IOTNUACCSTATNUMBULK := GTNUACCSTATNUMBULK;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETACCSTWITHBALCACHE;































PROCEDURE GETACCOUNTSWITHBALANCE
(
	INUNUMSERV	IN	CUENCOBR.CUCONUSE%TYPE,
	OTBCTASSALDO	OUT	PKACCOUNTMGR.TYTBCTASCONSALDOSR
)
IS
BEGIN

    PKERRORS.PUSH('pkAccountMgr.GetAccountsWithBalance');
    
    
    OTBCTASSALDO := TBCTASSALDONULL;
    
    
    FOR RCCTA IN CUCTASSALDO ( INUNUMSERV ) LOOP
    	
    	OTBCTASSALDO ( TO_CHAR(RCCTA.CUCOCODI) ).CUCOCODI := RCCTA.CUCOCODI;
    	OTBCTASSALDO ( TO_CHAR(RCCTA.CUCOCODI) ).CUCOSACU := RCCTA.CUCOSACU;
    	OTBCTASSALDO ( TO_CHAR(RCCTA.CUCOCODI) ).CUCOVATO := RCCTA.CUCOVATO;
    	OTBCTASSALDO ( TO_CHAR(RCCTA.CUCOCODI) ).CUCOFEVE := RCCTA.CUCOFEVE;
    END LOOP;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETACCOUNTSWITHBALANCE;





























PROCEDURE GETNEWACCOUNTNUM
(
	ONUNUMCUENTA	OUT	CUENCOBR.CUCOCODI%TYPE
)
IS
    NUCONSCUENTAS	CONSECUT.CONSCODI%TYPE;	
BEGIN

    PKERRORS.PUSH('pkAccountMgr.GetNewAccountNum');
    
    
    ONUNUMCUENTA := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL('SQ_CUENCOBR_CUCOCODI');
    
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETNEWACCOUNTNUM;












































































PROCEDURE GETORCREACURRACCOUNT
(
	IRCSERVSUSC	       IN         SERVSUSC%ROWTYPE,
	IONUESTCUENT	   IN OUT     FACTURA.FACTCODI%TYPE,
	ONUCUENTA	       OUT	      CUENCOBR.CUCOCODI%TYPE,
	IBLCREAACC	       IN	      BOOLEAN DEFAULT FALSE,
	ISBAPPLICATION     IN	      PROCESOS.PROCCODI%TYPE DEFAULT '----',
    IBLGENFISCALNUMBER IN         BOOLEAN DEFAULT TRUE
)
IS
    SBERRMSG	VARCHAR2(2000);	
    NUSUSC	SUSCRIPC.SUSCCODI%TYPE;
    RCSUSCRIPC	SUSCRIPC%ROWTYPE;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.GetOrCreaCurrAccount');
    
    IF ( NOT IBLCREAACC ) THEN
    	BEGIN
    	
    	    
    	    
    	    ONUCUENTA := PKACCOUNTMGR.FNUGETLASTACCWITHBAL( IRCSERVSUSC.SESUNUSE );
            IONUESTCUENT := PKTBLCUENCOBR.FNUGETACCOUNTSTATUS( ONUCUENTA, PKCONSTANTE.CACHE );
    	    PKERRORS.POP;
    	    RETURN;
    	EXCEPTION
    	    WHEN LOGIN_DENIED THEN
    		
        	NULL;
        
    	END;
    END IF;

    
    NUSUSC := PKTBLSERVSUSC.FNUGETSUSCRIPTION( IRCSERVSUSC.SESUNUSE );
    
    
    RCSUSCRIPC := PKTBLSUSCRIPC.FRCGETRECORD( NUSUSC );
    
    
    IF ( ( IONUESTCUENT IS NULL ) OR ( IONUESTCUENT = PKCONSTANTE.NULLNUM ) ) THEN
    
        
        PKACCOUNTSTATUSMGR.GETNEWACCOSTATUSNUM( IONUESTCUENT );

        
        PKACCOUNTSTATUSMGR.ADDNEWRECORD
        (
            IONUESTCUENT,
            GE_BCPROCESOS.FRCPROGRAMA( ISBAPPLICATION ).PROCCONS,
            RCSUSCRIPC,
            GE_BOCONSTANTS.FNUGETDOCTYPECONS
        );
    
    END IF;
    
    
    PKACCOUNTMGR.GETNEWACCOUNTNUM( ONUCUENTA );
    
    
    PKACCOUNTMGR.ADDNEWRECORD( IONUESTCUENT, ONUCUENTA, IRCSERVSUSC );
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
END GETORCREACURRACCOUNT;





































PROCEDURE TRANSFERACCOUNT
(
	INUSESUACTUAL   IN      SERVSUSC.SESUNUSE%TYPE,
	INUSESUNUEVO    IN     	SERVSUSC.SESUNUSE%TYPE
)
IS
    
    CNURECORDS_READ    CONSTANT NUMBER := 100 ;
    
    
    TNUCUCOCODI          PKACCOUNTMGR.TYCUCOCODI ;

    
    CURSOR CUACCOUNT
    (
        INUSESUACT          IN      SERVSUSC.SESUNUSE%TYPE
    )
    IS
        SELECT CUCOCODI
          FROM CUENCOBR
         WHERE CUCONUSE = INUSESUACT ;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.TransferAccount');
    
    
    IF ( CUACCOUNT%ISOPEN ) THEN
	   CLOSE CUACCOUNT ;
    END IF ;
    
    
    OPEN CUACCOUNT( INUSESUACTUAL );
    LOOP
    	
    	FETCH CUACCOUNT BULK COLLECT INTO TNUCUCOCODI
    	LIMIT CNURECORDS_READ ;
    	
    	
    	
    	
    	
    	IF ( TNUCUCOCODI.FIRST IS NULL ) THEN
    	    EXIT ;
    	END IF ;
    	
    	
    	PKCHARGEMGR.UPSERVNUMBERACCOUNT( TNUCUCOCODI, INUSESUNUEVO ) ;
    	
    	
    	UPSUBSCRIBEDSERVICE( TNUCUCOCODI, INUSESUNUEVO );
    	
    	
    	TNUCUCOCODI.DELETE;
    	
    	
    	
    	
    	EXIT WHEN CUACCOUNT%NOTFOUND ;
    END LOOP;
    
    CLOSE CUACCOUNT;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	IF ( CUACCOUNT%ISOPEN ) THEN
    	    CLOSE CUACCOUNT;
    	END IF;
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	IF ( CUACCOUNT%ISOPEN ) THEN
    	    CLOSE CUACCOUNT;
    	END IF;
        	PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	IF ( CUACCOUNT%ISOPEN ) THEN
    	    CLOSE CUACCOUNT;
    	END IF;
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END TRANSFERACCOUNT;























PROCEDURE UPSUBSCRIBEDSERVICE
(
	ITNUCUCOCODI	IN OUT NOCOPY 	TYCUCOCODI,
	INUSESUNUEVO    IN SERVSUSC.SESUNUSE%TYPE
)
IS
    CNURECORD_NO_EXISTE	CONSTANT NUMBER :=339; 
BEGIN

    PKERRORS.PUSH('pkAccountMgr.UpSubscribedService');
    
    FORALL INDX IN ITNUCUCOCODI.FIRST .. ITNUCUCOCODI.LAST
    	UPDATE CUENCOBR
    	   SET CUCONUSE = INUSESUNUEVO
    	 WHERE CUCOCODI = ITNUCUCOCODI( INDX );
    	 
    IF ( SQL%NOTFOUND ) THEN
        PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION,
                                PKCONSTANTE.CSBMOD_SAT,
                                CNURECORD_NO_EXISTE );
        RAISE LOGIN_DENIED ;
    END IF;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END UPSUBSCRIBEDSERVICE;

















PROCEDURE VALACCWITHBALANCE
(
    INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE,
	INUCACHE	IN	NUMBER DEFAULT 1
)
IS
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValAccWithBalance');
    
    
    IF ( NOT FBLACCWITHBALANCE ( INUCUENTA, INUCACHE ) ) THEN
    	
    	PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_BIL,
    				CNUCUENTA_SIN_SALDO
    			      );
    	RAISE LOGIN_DENIED;
    END IF ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALACCWITHBALANCE;
















PROCEDURE VALBASICDATA
(
    INUCUCOCODI	IN	CUENCOBR.CUCOCODI%TYPE
)
IS
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValBasicData');
    
    
    VALIDATENULL ( INUCUCOCODI ) ;
    
    VALIDATENULLAPP ( INUCUCOCODI ) ;
    
    PKTBLCUENCOBR.ACCKEY( INUCUCOCODI );
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALBASICDATA;


























PROCEDURE VALISBILLABLESERVNUMBER
(
	INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE,
	INUCACHE        IN      NUMBER DEFAULT 1
)
IS
    NUSERVSUSC		SERVSUSC.SESUNUSE%TYPE; 
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValIsBillableServNumber');
    
    
    NUSERVSUSC := PKTBLCUENCOBR.FNUGETSERVICENUMBER( INUCUENTA, INUCACHE );
    
    
    PKSERVNUMBERMGR.VALISBILLABLESERVNUMBER( NUSERVSUSC, INUCACHE );
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALISBILLABLESERVNUMBER;



























PROCEDURE VALISCLAIMABLE
(
	INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE,
	INUCACHE        IN      NUMBER DEFAULT 1
)
IS
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValIsClaimable');
    
    
    VALISBILLABLESERVNUMBER( INUCUENTA, INUCACHE );
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALISCLAIMABLE;




























PROCEDURE VALISCLAIMABLEACCSTAT
(
	INUESTCUENTA	IN	FACTURA.FACTCODI%TYPE,
	INUCACHE        IN      NUMBER DEFAULT 1
)
IS
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValIsClaimableAccStat');
    
    
    FOR REG IN CUACCOUNTSTAT( INUESTCUENTA ) LOOP
    	
    	VALISCLAIMABLE ( REG.CUCOCODI, INUCACHE );
    END LOOP;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALISCLAIMABLEACCSTAT;































PROCEDURE VALISVALIDFORTERM
(
	INUCUENTA	     IN	CUENCOBR.CUCOCODI%TYPE,
	INUCACHE	     IN	NUMBER DEFAULT 1,
	IBLVALIDATE      IN BOOLEAN DEFAULT TRUE
)
IS
    NUSESUNUSE    SERVSUSC.SESUNUSE%TYPE ;    
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValIsValidForTerm');
    
    
    NUSESUNUSE := PKTBLCUENCOBR.FNUGETSERVICENUMBER ( INUCUENTA,
						      INUCACHE );

    
    
    
    IF(IBLVALIDATE) THEN
        
        VALLASTSERVNUMBACC ( NUSESUNUSE, INUCUENTA );

        
        VALACCWITHBALANCE ( INUCUENTA, INUCACHE );
    END IF;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALISVALIDFORTERM;
























PROCEDURE VALLASTSERVNUMBACC
(
	INUSESUNUSE	IN	SERVSUSC.SESUNUSE%TYPE,
	INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE
)
IS
    
    CNUCUENTA_NO_ULTIMA    CONSTANT NUMBER := 10200;    
    
    NUCUCOCODI    CUENCOBR.CUCOCODI%TYPE ;    
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValLastServNumbAcc');
    
    
    NUCUCOCODI := FNUGETLASTACCOUNTSERV ( INUSESUNUSE );
    
    
    
    IF ( NUCUCOCODI <> INUCUENTA ) THEN
    	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_BIL,
    				CNUCUENTA_NO_ULTIMA
    			     );
    	RAISE LOGIN_DENIED;
    END IF;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALLASTSERVNUMBACC;






















PROCEDURE VALSERVNUMBERACCOUNT
(
	INUCUCOCODI	IN	CUENCOBR.CUCOCODI%TYPE,
	INUSESUNUSE	IN	CUENCOBR.CUCONUSE%TYPE
)
IS
    NUNUSECUCO			    CUENCOBR.CUCONUSE%TYPE ;  
    CNUNUMERO_SERVICIO_NO_VALIDO    NUMBER := 10123 ;	      
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValServNumberAccount');
    
    
    NUNUSECUCO := PKTBLCUENCOBR.FNUGETSERVICENUMBER ( INUCUCOCODI,
						      PKCONSTANTE.CACHE );
						      
    
    IF ( NUNUSECUCO <> INUSESUNUSE ) THEN
    	PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_BIL,
    				CNUNUMERO_SERVICIO_NO_VALIDO );
    	RAISE LOGIN_DENIED;
    END IF ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALSERVNUMBERACCOUNT;




























PROCEDURE VALWITHOUTCLAIM
(
	INUCUCOCODI	IN	CUENCOBR.CUCOCODI%TYPE,
	INUCACHE	IN	NUMBER DEFAULT 1
)
IS
    
    CNUTIENE_RECLAMO     CONSTANT NUMBER := 9388 ;    
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValWithoutClaim');
    
    
    
    IF ( GSBVALORECL = PKCONSTANTE.SI AND FBOWITHCLAIM( INUCUCOCODI, INUCACHE )) THEN
    	PKERRORS.SETERRORCODE(  PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_SAT,
    				CNUTIENE_RECLAMO );
    	RAISE LOGIN_DENIED;
    END IF;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALWITHOUTCLAIM;






















PROCEDURE VALIDATENULL
(
    INUCUCOCODI	IN	CUENCOBR.CUCOCODI%TYPE
)
IS
    
    CNUCUENTA_NULO		CONSTANT NUMBER := 9534;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValidateNull');
    
    
    IF ( INUCUCOCODI IS NULL ) THEN
    	PKERRORS.SETERRORCODE( CNUCUENTA_NULO );
    	RAISE LOGIN_DENIED;
    END IF;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALIDATENULL;






















PROCEDURE VALIDATENULLAPP
(
    INUCUCOCODI	IN	CUENCOBR.CUCOCODI%TYPE
)
IS
    
    CNUCUENTA_NULOSAT		CONSTANT NUMBER := 9533;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ValidateNullApp');
    
    
    IF ( INUCUCOCODI = PKBILLCONST.NULOSAT ) THEN
    	PKERRORS.SETERRORCODE( CNUCUENTA_NULOSAT );
    	RAISE LOGIN_DENIED;
    END IF;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	    PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END VALIDATENULLAPP;

























FUNCTION FBLACCWITHBALANCE
(
    INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE,
	INUCACHE	IN	NUMBER DEFAULT 1
)
RETURN BOOLEAN
IS
    NUSALDOCTA		CUENCOBR.CUCOSACU%TYPE;	
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fblAccWithBalance');
    
    
    NUSALDOCTA := PKTBLCUENCOBR.FNUGETBALANCE( INUCUENTA, INUCACHE );
    
    
    IF ( NUSALDOCTA > PKBILLCONST.CERO ) THEN
    	PKERRORS.POP;
    	RETURN( TRUE );
    END IF;
    
    PKERRORS.POP;
    RETURN( FALSE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FBLACCWITHBALANCE;
























FUNCTION FBLHASPAYMENT
(
    INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE
)
RETURN BOOLEAN
IS
    NUVALORABO		CUENCOBR.CUCOVATO%TYPE;	
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fblHasPayment');
    
    
    NUVALORABO := PKTBLCUENCOBR.FNUGETPAYMENTAMO( INUCUENTA );
    
    
    IF ( NUVALORABO > PKBILLCONST.CERO ) THEN
    	PKERRORS.POP;
    	RETURN( TRUE );
    END IF;
    
    PKERRORS.POP;
    RETURN( FALSE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FBLHASPAYMENT;


























FUNCTION FBLISBILLABLESERVNUMBER
(
	INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE,
	INUCACHE        IN      NUMBER DEFAULT 1
)
RETURN BOOLEAN
IS
    NUSERVSUSC		SERVSUSC.SESUNUSE%TYPE; 
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fblIsBillableServNumber');
    
    
    NUSERVSUSC := PKTBLCUENCOBR.FNUGETSERVICENUMBER( INUCUENTA, INUCACHE );
    
    PKERRORS.POP;
    
    RETURN ( PKSERVNUMBERMGR.FBOISBILLABLE( NUSERVSUSC, INUCACHE ));
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FBLISBILLABLESERVNUMBER;


























FUNCTION FBLISCLAIMABLE
(
	INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE,
	INUCACHE        IN      NUMBER DEFAULT 1
)
RETURN BOOLEAN
IS
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fblIsClaimable');
    
    
    IF ( FBLISBILLABLESERVNUMBER( INUCUENTA, INUCACHE ) ) THEN
    	PKERRORS.POP;
    	RETURN ( TRUE );
    END IF;
    
    PKERRORS.POP;
    RETURN ( FALSE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FBLISCLAIMABLE;






























PROCEDURE GETSUBSACCCATEGORY
(
   INUSUBSSERVICES  IN  CUENCOBR.CUCONUSE%TYPE,
   INUBILLPERIOD    IN  PERIFACT.PEFACODI%TYPE,
   ONUCATEGORY      OUT  CUENCOBR.CUCOCATE%TYPE,
   ONUSUBCATEG      OUT  CUENCOBR.CUCOSUCA%TYPE
)
IS
	CURSOR CUACCCATEGORY
    (
       INUSUBSSERV      IN  CUENCOBR.CUCONUSE%TYPE,
       INUBILLPERIOD    IN  PERIFACT.PEFACODI%TYPE
    )
    IS
    	SELECT --+ pkAccountMgr.GetSubsAccCategory
               CUCOCATE, CUCOSUCA
    	FROM   CUENCOBR,FACTURA
    	WHERE  CUCOFACT = FACTCODI
        AND    CUCONUSE = INUSUBSSERV
    	AND    FACTPEFA + 0 = INUBILLPERIOD
    	ORDER BY FACTFEGE DESC;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.GetSubsAccCategory');

    
    IF ( CUACCCATEGORY%ISOPEN ) THEN
	   CLOSE CUACCCATEGORY ;
    END IF ;

    
	OPEN CUACCCATEGORY(INUSUBSSERVICES, INUBILLPERIOD);
	FETCH CUACCCATEGORY INTO ONUCATEGORY, ONUSUBCATEG;
    CLOSE CUACCCATEGORY;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	    PKERRORS.POP;
    	RAISE  LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	   PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       PKERRORS.POP;
	   RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETSUBSACCCATEGORY;


































FUNCTION FBLVALDATEPAYMENT
(
	INUSUSCR	SUSCRIPC.SUSCCODI%TYPE
)
RETURN BOOLEAN
IS
    DTFECHALIMITEPAGO	CUENCOBR.CUCOFEPA%TYPE; 
					
					
					
					
    
    CURSOR CUCUENCOBR (INUSUSCRIPTOR     SUSCRIPC.SUSCCODI%TYPE) IS
        SELECT PEFAFEPA
        FROM   FACTURA,PERIFACT
	    WHERE  FACTSUSC = INUSUSCRIPTOR
        AND    FACTPEFA = PEFACODI
        ORDER BY PEFAFEPA DESC ;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fblValDatePayment');
    
    
    IF ( CUCUENCOBR%ISOPEN ) THEN
         CLOSE CUCUENCOBR;
    END IF;
    
    
    OPEN  CUCUENCOBR ( INUSUSCR ) ;
    FETCH CUCUENCOBR INTO DTFECHALIMITEPAGO;
    
    
    IF ( CUCUENCOBR%NOTFOUND ) THEN
         CLOSE CUCUENCOBR;
         PKERRORS.POP;
         RETURN(FALSE);
    END IF;
    CLOSE CUCUENCOBR;
    
    
    IF ( TRUNC ( DTFECHALIMITEPAGO ) >= TRUNC ( SYSDATE ) ) THEN
    	PKERRORS.POP;
    	RETURN( TRUE );
    END IF;
    
    PKERRORS.POP;
    RETURN( FALSE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE  LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	 PKERRORS.POP;
    	 RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END  FBLVALDATEPAYMENT;






















FUNCTION FBOWITHCLAIM
(
	INUCUCOCODI	IN	CUENCOBR.CUCOCODI%TYPE,
	INUCACHE	IN	NUMBER DEFAULT 1
)
RETURN BOOLEAN
IS
    
    NUVLRRECLAMO        CUENCOBR.CUCOVARE%TYPE;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fboWithClaim');
    
    
    NUVLRRECLAMO := PKTBLCUENCOBR.FNUGETCLAIMVALUE( INUCUCOCODI, INUCACHE );
    
    
    IF ( NUVLRRECLAMO = PKBILLCONST.CERO ) THEN
    	PKERRORS.POP;
    	RETURN( FALSE );
    END IF;
    
    PKERRORS.POP;
    RETURN( TRUE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FBOWITHCLAIM;






















FUNCTION FNUGETACCBALANCESERV
(
	INUNUMSERV	IN	SERVSUSC.SESUNUSE%TYPE
)
RETURN NUMBER
IS
    
    
    CURSOR CUCUENCOBR ( INUNUMSERV    CUENCOBR.CUCONUSE%TYPE )
    IS
        SELECT   NVL ( SUM ( CUCOVATO - CUCOVAAB ), 0 )
        FROM     CUENCOBR
        WHERE    CUCONUSE = INUNUMSERV ;
        
    NUSESUSAPE    PKBCSERVSUSC.STYSESUSAPE;    
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fnuGetAccBalanceServ');
    
    
    OPEN CUCUENCOBR ( INUNUMSERV );
    FETCH CUCUENCOBR INTO NUSESUSAPE;
    CLOSE CUCUENCOBR;
    
    PKERRORS.POP;
    RETURN( NUSESUSAPE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FNUGETACCBALANCESERV;
































































































































FUNCTION FNUGETACCNUMBALANCESERVICE
(
	INUCUCONUSE IN CUENCOBR.CUCONUSE%TYPE,
	INUVALRECL  IN PKBCSUSCRIPC.STYSUSCVRAP DEFAULT NULL,
	INUCURSOR   IN NUMBER 		      DEFAULT 1,
    INUDIASADIC IN NUMBER             DEFAULT 0
)
RETURN NUMBER
IS
    NUCUENSALD		PKBCSERVSUSC.STYSESUCUSA := 0;
    NUTOTALRECLAMO	CUENCOBR.CUCOVARE%TYPE := 0;

    PROCEDURE GETCLAIMNAPVAL
    IS
	   
	   NUSUBSCRIBER	SUSCRIPC.SUSCCODI%TYPE;
    BEGIN
    
    	PKERRORS.PUSH('pkAccountMgr.fnuGetAccNumBalanceService.GetClaimNAPVal');
    	
    	
    	
    	IF ( INUCURSOR = 1) THEN
    	
    	    NUSUBSCRIBER := PKTBLSERVSUSC.FNUGETSUSCRIPTION (INUCUCONUSE,
    							     PKCONSTANTE.CACHE);
    	    
    	    GNUNOTAPPPAYMENT:= PKBCCUENCOBR.FNUGETNONAPPLIEDPAY (NUSUBSCRIBER);
    	ELSE
    	    GNUNOTAPPPAYMENT := INUVALRECL;
    	
    	END IF;
    	GNUNOTAPPPAYMENT := NVL (GNUNOTAPPPAYMENT,0);
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETCLAIMNAPVAL;

    PROCEDURE FILLMEMORY
    IS
        NUINDICE        NUMBER :=0;
        NUINDX	        NUMBER :=0;
    	
    	TNUACCOUNTNUMBULK_TMP   PKTBLCUENCOBR.TYCUCOCODI; 
    	TNUACCSTATNUMBULK_TMP   PKTBLCUENCOBR.TYCUCOFACT; 
    	TNUACCOUNTBALBULK_TMP   PKTBLCUENCOBR.TYCUCOSACU; 
    	TNUACCOUNTCLAIMBULK_TMP PKTBLCUENCOBR.TYCUCOVARE; 
    	TNUACCOUNTBULK_TMP      PKTBLCUENCOBR.TYCUCOSACU; 
    	TNUACCOUNTDATEBULK_TMP  PKTBLCUENCOBR.TYCUCOFEVE; 
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.fnuGetAccNumBalanceService.FillMemory');
        
    	IF (CUACCOUNTINFO%ISOPEN) THEN
    	    CLOSE CUACCOUNTINFO;
    	END IF;
    	
    	OPEN CUACCOUNTINFO (INUCUCONUSE) ;
    	LOOP
    	    FETCH CUACCOUNTINFO BULK COLLECT INTO   TNUACCSTATNUMBULK_TMP,
                        						    TNUACCOUNTNUMBULK_TMP,
                        						    TNUACCOUNTBALBULK_TMP,
                        						    TNUACCOUNTCLAIMBULK_TMP,
                        						    TNUACCOUNTBULK_TMP,
                        						    TNUACCOUNTDATEBULK_TMP
    	    LIMIT CNUNUM_REC_FETCHED;
    	    
    	    IF ( TNUACCOUNTNUMBULK_TMP.FIRST IS NULL ) THEN
    		  EXIT ;
    	    END IF ;
    	    
    	    NUINDICE := TNUACCOUNTNUMBULK_TMP.FIRST;
    	    
    	    LOOP
        		EXIT WHEN NUINDICE IS NULL;

        		NUINDX := NUINDX + 1;
        		
        		GTNUACCSTATNUMBULK(NUINDX):= TNUACCSTATNUMBULK_TMP (NUINDICE);
        		GTNUACCOUNTNUMBULK(NUINDX):= TNUACCOUNTNUMBULK_TMP (NUINDICE);
        		GTNUACCOUNTBALBULK(NUINDX):= TNUACCOUNTBALBULK_TMP (NUINDICE);
        		GTNUACCOUNTCLAIMBULK(NUINDX):=TNUACCOUNTCLAIMBULK_TMP(NUINDICE);
        		GTNUACCOUNTBULK (NUINDX) := TNUACCOUNTBULK_TMP (NUINDICE);
        		GTNUACCOUNTDATEBULK(NUINDX):=TNUACCOUNTDATEBULK_TMP(NUINDICE);
        		
        		NUINDICE := TNUACCOUNTNUMBULK_TMP.NEXT (NUINDICE);
    	    END LOOP;
    	    
    	    TNUACCSTATNUMBULK_TMP.DELETE;
    	    TNUACCOUNTNUMBULK_TMP.DELETE;
    	    TNUACCOUNTBALBULK_TMP.DELETE;
    	    TNUACCOUNTCLAIMBULK_TMP.DELETE;
    	    TNUACCOUNTBULK_TMP.DELETE;
    	    TNUACCOUNTDATEBULK_TMP.DELETE;
    	    
    	    EXIT WHEN CUACCOUNTINFO%NOTFOUND;
    	END LOOP;
    	
    	CLOSE CUACCOUNTINFO;
    	
    	NUINDICE := GTNUACCOUNTCLAIMBULK.FIRST;
    	
    	
    	
    	IF NUINDICE IS NOT NULL THEN
        	GTNUACCOUNTCLAIMBULK (NUINDICE) :=
        				GTNUACCOUNTCLAIMBULK (NUINDICE) +
        				GNUNOTAPPPAYMENT;
    	END IF;
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	    IF (CUACCOUNTINFO%ISOPEN) THEN
        		CLOSE CUACCOUNTINFO;
    	    END IF;
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	    IF (CUACCOUNTINFO%ISOPEN) THEN
        		CLOSE CUACCOUNTINFO;
    	    END IF;
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END FILLMEMORY;

    PROCEDURE CALCLAIMVALUE IS
        NUINDICE        NUMBER :=0;
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.fnuGetAccNumBalanceService.CalClaimValue');
        
        NUINDICE := GTNUACCOUNTNUMBULK.FIRST ;
        
        LOOP
            EXIT WHEN NUINDICE IS NULL;
            
    	    
    	    
    	    
    	    IF (GTNUACCOUNTCLAIMBULK(NUINDICE)>=
        		GTNUACCOUNTBALBULK(NUINDICE)) THEN
        		GTNUACCOUNTBULK(NUINDICE):= ABS(GTNUACCOUNTBALBULK(NUINDICE) -
        						 GTNUACCOUNTCLAIMBULK(NUINDICE)
        					    );
        		GTNUACCOUNTBALBULK(NUINDICE):= PKBILLCONST.CERO;
    	    ELSE
        	    
        	    
        		GTNUACCOUNTBALBULK(NUINDICE):= 	GTNUACCOUNTBALBULK (NUINDICE)-
        						GTNUACCOUNTCLAIMBULK (NUINDICE);
        		GTNUACCOUNTBULK(NUINDICE):= PKBILLCONST.CERO;
    	    END IF;

            NUINDICE := GTNUACCOUNTNUMBULK.NEXT (NUINDICE);
        END LOOP;
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END CALCLAIMVALUE;

    PROCEDURE CALACCOUNTSNUM
    IS
    	NUINDICE	NUMBER :=0;
    	NUINDX		NUMBER :=0;
    	NUCOUNTER	NUMBER :=0;
    	NUVLRRECLAMO	CUENCOBR.CUCOVARE%TYPE:=0;
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.fnuGetAccNumBalanceService.CalAccountsNum');
        
    	NUINDICE := GTNUACCOUNTBULK.FIRST ;
    	LOOP
    	    EXIT WHEN NUINDICE IS NULL;
    	    
    	    
    	    
    	    
    	    IF ( GTNUACCOUNTBULK(NUINDICE) > PKBILLCONST.CERO ) THEN
        		
        		
        		
        		NUINDX := GTNUACCOUNTBALBULK.FIRST;
        		NUVLRRECLAMO := GTNUACCOUNTBULK(NUINDICE);
        		LOOP
        		    EXIT WHEN (NUINDX IS NULL OR NUVLRRECLAMO <=0) ;
        		    
        		    IF (GTNUACCOUNTBALBULK (NUINDX) > PKBILLCONST.CERO) THEN
            			
            			
            			
            			
            			IF (GTNUACCOUNTBULK (NUINDICE) >=
            			    GTNUACCOUNTBALBULK (NUINDX)) THEN
            			    GTNUACCOUNTBULK(NUINDICE):=GTNUACCOUNTBULK(NUINDICE)
            					- GTNUACCOUNTBALBULK (NUINDX);
            			    GTNUACCOUNTBALBULK (NUINDX) := PKBILLCONST.CERO;
            			ELSE
            			    GTNUACCOUNTBALBULK(NUINDX) :=
            					GTNUACCOUNTBALBULK(NUINDX)
            					- GTNUACCOUNTBULK (NUINDICE);
            			    GTNUACCOUNTBULK (NUINDICE) := PKBILLCONST.CERO;
            			END IF;
            			
            			NUVLRRECLAMO := GTNUACCOUNTBULK(NUINDICE);
        		    END IF;
        		    
        		    NUINDX := GTNUACCOUNTBALBULK.NEXT (NUINDX);
        		END LOOP;
    	    END IF;
    	    
    	    NUINDICE := GTNUACCOUNTNUMBULK.NEXT (NUINDICE);
    	END LOOP;
    	
    	
    	
    	NUINDICE := GTNUACCOUNTBALBULK.FIRST;
    	
    	LOOP
    	    EXIT WHEN (NUINDICE IS NULL);
    	    IF ( GTNUACCOUNTBALBULK (NUINDICE) > PKBILLCONST.CERO
                AND GTNUACCOUNTDATEBULK (NUINDICE) + INUDIASADIC < SYSDATE
                AND GTNUACCOUNTBALBULK (NUINDICE) > GNUTOPE_DEUDA_PERMITIDO )
                 THEN
    		    NUCOUNTER := NUCOUNTER + 1;
    	    ELSE
        		
        		GTNUACCSTATNUMBULK.DELETE(NUINDICE);
    	    END IF;
    	    
    	    NUINDICE := GTNUACCOUNTBALBULK.NEXT (NUINDICE);
    	END LOOP;
    	
    	NUCUENSALD := NUCOUNTER;
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END CALACCOUNTSNUM;

    PROCEDURE PROCESS
    IS
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.fnuGetAccNumBalanceService.Process');
        
    	
    	CALCLAIMVALUE;
    	
    	
    	CALACCOUNTSNUM ;
    	
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END PROCESS;
BEGIN

    
    PKERRORS.PUSH('pkAccountMgr.fnuGetAccNumBalanceService');
    
    
    PKACCOUNTMGR.CLEARMEMORYACCNUM;
    
    
    GETCLAIMNAPVAL;
    
    
    FILLMEMORY ;
    
    PROCESS ;
    
    
    PKERRORS.POP;
    RETURN (NUCUENSALD);
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FNUGETACCNUMBALANCESERVICE;


































FUNCTION FNUGETACCTOCLAIMNAP
(
	INUSUSC		IN	SUSCRIPC.SUSCCODI%TYPE
)
RETURN NUMBER
IS
    
    
    CURSOR CUCUENTASCONSALDO( INUSUSC	SUSCRIPC.SUSCCODI%TYPE ) IS
        SELECT   --+ pkAccountMgr.fnuGetAccToClaimNAP.cuCuentasConSaldo
                 CUCOCODI
        FROM     CUENCOBR,FACTURA
        WHERE    CUCOFACT = FACTCODI
        AND      FACTSUSC = INUSUSC
        AND      CUCOSACU > 0
        ORDER BY FACTFEGE;
    
    
    
    CURSOR  CUCUENTAS( INUSUSC	SUSCRIPC.SUSCCODI%TYPE ) IS
        SELECT   --+ pkAccountMgr.fnuGetAccToClaimNAP.cuCuentas
                 CUCOCODI
        FROM     CUENCOBR,FACTURA
        WHERE    CUCOFACT = FACTCODI
        AND      FACTSUSC = INUSUSC
        ORDER BY FACTFEGE DESC;
    
    NUCUENTA	CUENCOBR.CUCOCODI%TYPE;	
    
	
    CNUSUSC_SIN_CTAS	CONSTANT NUMBER := 319;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fnuGetAccToClaimNAP');
    
    
    OPEN CUCUENTASCONSALDO( INUSUSC );
    FETCH CUCUENTASCONSALDO INTO NUCUENTA;
    
    
    IF ( CUCUENTASCONSALDO%NOTFOUND ) THEN
    	OPEN CUCUENTAS( INUSUSC );
    	FETCH CUCUENTAS INTO NUCUENTA;
    	
    	IF ( CUCUENTAS%NOTFOUND ) THEN
    	    CLOSE CUCUENTAS;
    	    PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
    				    PKCONSTANTE.CSBMOD_SAT,
    				    CNUSUSC_SIN_CTAS );
    	    RAISE LOGIN_DENIED;
    	END IF;
    	
    	CLOSE CUCUENTAS;
    END IF;
    
    CLOSE CUCUENTASCONSALDO;
    
    PKERRORS.POP;
    RETURN( NUCUENTA );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FNUGETACCTOCLAIMNAP;




























FUNCTION FNUGETADJUSTVALUE
(
    INUCUENTA	IN	CUENCOBR.CUCOCODI%TYPE
)
RETURN NUMBER
IS
    
    CSBAJUSTE		CONSTANT VARCHAR2(15) := 'AJUSTE';

    
    CSBCANCAJUSTE	CONSTANT VARCHAR2(15) := 'CANC.AJUSTE';

    NUVLRAJUSTES	NUMBER;			

    
    CURSOR CUAJUSTE (NUCUENTA	CARGOS.CARGCUCO%TYPE,
                     NUCONCEPTO	CARGOS.CARGCONC%TYPE)
    IS
        SELECT NVL (SUM (DECODE (UPPER (CARGSIGN), PKBILLCONST.DEBITO,
                                 CARGVALO, PKBILLCONST.CREDITO,
                                 -1 * CARGVALO, 0)), 0)
        FROM   CARGOS
        WHERE  CARGCUCO = NUCUENTA
        AND    CARGCONC = NUCONCEPTO
        AND    CARGDOSO || '' IN (CSBAJUSTE, CSBCANCAJUSTE);
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fnuGetAdjustValue');

    
    INITADJUACCO;

    
    OPEN CUAJUSTE (INUCUENTA, GNUCONCAJUSTE);
    FETCH CUAJUSTE INTO NUVLRAJUSTES;
    CLOSE CUAJUSTE;

    PKERRORS.POP;
    RETURN (NUVLRAJUSTES);
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END FNUGETADJUSTVALUE;
























FUNCTION FNUGETDUEBALANCEBYSUBSSERV
(
    INUSUBSSERV IN SERVSUSC.SESUNUSE%TYPE
) RETURN NUMBER
IS
    NUDUEBALANCE PKBCCUENCOBR.STYCUCOSAPE; 
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.fnuGetDueBalanceBySubsServ');

    
    NUDUEBALANCE := FNUGETDUEBALANCEBYSUBSSERV( INUSUBSSERV, SYSDATE );

    PKERRORS.POP;

    RETURN(NUDUEBALANCE);
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

END FNUGETDUEBALANCEBYSUBSSERV ;













































FUNCTION FNUGETDUEBALANCEBYSUBSSERV
(
    INUSUBSSERV IN SERVSUSC.SESUNUSE%TYPE,
    IDTPAYDATE  IN CUENCOBR.CUCOFEPA%TYPE
) RETURN NUMBER
IS
    NUDUEBALANCE PKBCCUENCOBR.STYCUCOSAPE; 

    CURSOR CUDUEBALANCE
    IS
        SELECT  SUM( NVL(CUCOSACU,0) - (CASE WHEN (NVL(CUCOVARE, 0) < 0) THEN 0 ELSE NVL(CUCOVARE, 0) END) - NVL(CUCOVRAP,0) )
        FROM    CUENCOBR, FACTURA
        WHERE   CUCONUSE =  INUSUBSSERV
        AND     FACTCODI = CUCOFACT
        AND     NVL(FACTCONS,GE_BOCONSTANTS.FNUGETDOCTYPECONS) IN (
                                                                    GE_BOCONSTANTS.FNUGETDOCTYPECONS,
                                                                    GE_BOCONSTANTS.FNUGETDOCTYPECREDIT
                                                                  )
        AND     TRUNC(CUCOFEVE) < TRUNC(IDTPAYDATE)
        AND     (
                    CUCOSACU    > CNUZERO
                    OR CUCOVARE > CNUZERO
                    OR CUCOVRAP > CNUZERO
                );
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.fnuGetDueBalanceBySubsServ');

    OPEN  CUDUEBALANCE;
    FETCH CUDUEBALANCE INTO NUDUEBALANCE;
    CLOSE CUDUEBALANCE;

    PKERRORS.POP;

    RETURN(NVL(NUDUEBALANCE,0));
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

END FNUGETDUEBALANCEBYSUBSSERV ;
































FUNCTION FNUGETFIRSTACCWITHBAL
(
	INUNUMSERV	IN	SERVSUSC.SESUNUSE%TYPE
)
RETURN NUMBER
IS
    
    CURSOR CUCUENTASCONSALDO( INUNUMSERV    CUENCOBR.CUCONUSE%TYPE ) IS
        SELECT   --+ pkAccountMgr.fnuGetFirstAccWithBal
                 CUCOCODI
        FROM     CUENCOBR,FACTURA
        WHERE    CUCONUSE = INUNUMSERV
        AND      CUCOFACT = FACTCODI
        AND      ( NVL (CUCOSACU, PKBILLCONST.CERO) - (CASE WHEN (NVL(CUCOVARE, 0) < 0) THEN 0 ELSE NVL(CUCOVARE, 0) END) ) > PKBILLCONST.CERO
        ORDER BY FACTFEGE, CUCOCODI ;
    
    
    NUCUENTA	CUENCOBR.CUCOCODI%TYPE;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fnuGetFirstAccWithBal');
    
    
    OPEN CUCUENTASCONSALDO( INUNUMSERV );
    FETCH CUCUENTASCONSALDO INTO NUCUENTA;
    
    
    IF ( CUCUENTASCONSALDO%NOTFOUND ) THEN
	    CLOSE CUCUENTASCONSALDO;
    	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_SAT,
    				CNUSESU_SIN_CTAS_CON_SALDO
    			     );
    	RAISE LOGIN_DENIED;
    END IF;
    
    CLOSE CUCUENTASCONSALDO;
    
    PKERRORS.POP;
    RETURN( NUCUENTA );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FNUGETFIRSTACCWITHBAL;


































FUNCTION FNUGETLASTACCWITHBAL
(
	INUNUMSERV	IN	SERVSUSC.SESUNUSE%TYPE
)
RETURN NUMBER
IS
    
    
    CURSOR CUCUENTASCONSALDO( INUNUMSERV	CUENCOBR.CUCONUSE%TYPE ) IS
        SELECT   --+ pkAccountMgr.fnuGetLastAccWithBal
                 CUCOCODI
        FROM     CUENCOBR,FACTURA
        WHERE    CUCONUSE = INUNUMSERV
        AND      CUCOFACT = FACTCODI
        AND      CUCOSACU > 0
        ORDER BY FACTFEGE DESC;
    
    NUCUENTA	CUENCOBR.CUCOCODI%TYPE;	
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fnuGetLastAccWithBal');
    
    
    OPEN CUCUENTASCONSALDO( INUNUMSERV );
    FETCH CUCUENTASCONSALDO INTO NUCUENTA;
    
    
    IF ( CUCUENTASCONSALDO%NOTFOUND ) THEN
    	CLOSE CUCUENTASCONSALDO;
    	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_SAT,
    				CNUSESU_SIN_CTAS_CON_SALDO
    			     );
    	RAISE LOGIN_DENIED;
    END IF;
    
    CLOSE CUCUENTASCONSALDO;
    
    PKERRORS.POP;
    RETURN( NUCUENTA );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FNUGETLASTACCWITHBAL;


























FUNCTION FNUGETLASTACCOUNTSERV
(
	INUNUMSERV	IN	SERVSUSC.SESUNUSE%TYPE
)
RETURN NUMBER
IS
    RCCUENCOBR CUENCOBR%ROWTYPE;	
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fnuGetLastAccountServ');

    
    IF ( CULASTACCOUNT%ISOPEN ) THEN
         CLOSE CULASTACCOUNT;
    END IF;

    OPEN CULASTACCOUNT( INUNUMSERV );
    FETCH CULASTACCOUNT INTO RCCUENCOBR;

    
    IF ( CULASTACCOUNT%NOTFOUND ) THEN
    	CLOSE CULASTACCOUNT;
    	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_SAT,
    				CNUSESU_SIN_CTAS
    			     );
    	RAISE LOGIN_DENIED;
    END IF;

    CLOSE CULASTACCOUNT;

    PKERRORS.POP;
    RETURN( RCCUENCOBR.CUCOCODI );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FNUGETLASTACCOUNTSERV;










































PROCEDURE GETLASTACCBYDOCTYPE
(
	INUPRODUCTO	IN	CUENCOBR.CUCONUSE%TYPE,
  	INUTIPODOC	IN	GE_DOCUMENT_TYPE.DOCUMENT_TYPE_ID%TYPE,
	ONUCUENTA	OUT	CUENCOBR.CUCOCODI%TYPE
)
IS
    
    NUCTA	CUENCOBR.CUCOCODI%TYPE ;

    
    CURSOR CUULTIMACTATD IS
        SELECT --+ pkAccountMgr.GetLastAccByDocType
               CUCOCODI
        FROM   CUENCOBR, FACTURA
        WHERE  CUCONUSE = INUPRODUCTO
        AND    FACTCODI = CUCOFACT
        AND    FACTCONS =  INUTIPODOC
        ORDER BY FACTFEGE DESC ;
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.GetLastAccByDocType');

    
    OPEN  CUULTIMACTATD ;
    FETCH CUULTIMACTATD INTO NUCTA ;

    
    IF (CUULTIMACTATD%NOTFOUND) THEN
    	NUCTA := NULL;
    END IF;

    
    CLOSE CUULTIMACTATD;

    ONUCUENTA := NUCTA ;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	IF (CUULTIMACTATD%ISOPEN) THEN
    	    CLOSE CUULTIMACTATD;
    	END IF;
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	IF (CUULTIMACTATD%ISOPEN) THEN
    	    CLOSE CUULTIMACTATD;
    	END IF;
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	IF (CUULTIMACTATD%ISOPEN) THEN
    	    CLOSE CUULTIMACTATD;
    	END IF;
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETLASTACCBYDOCTYPE;






























FUNCTION FNUGETLASTACCDATEFINISHED
(
	INUNUMSERV	IN	SERVSUSC.SESUNUSE%TYPE
)
RETURN NUMBER
IS
    
    
    
    NUACCOUNT   CUENCOBR.CUCOCODI%TYPE;
    
    
    
    
    CURSOR CULASTACCOUNTFINISHED
    IS  SELECT  --+ index( cuencobr ix_CUENCOBR09 )
                CUCOCODI
        FROM    CUENCOBR
        WHERE   CUCONUSE = INUNUMSERV
        AND     ( CUCOSACU - NVL( CUCOVRAP, 0 ) -
                ( CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END ) ) > 0
        AND     TRUNC( CUCOFEVE ) < TRUNC( SYSDATE )
        ORDER BY CUCOFEVE DESC;
BEGIN

    UT_TRACE.TRACE( 'pkAccountMgr.fnuGetLastAccDateFinished', 15 );

    OPEN CULASTACCOUNTFINISHED;
    FETCH CULASTACCOUNTFINISHED INTO NUACCOUNT;
    CLOSE CULASTACCOUNTFINISHED;

    UT_TRACE.TRACE( 'Fin pkAccountMgr.fnuGetLastAccDateFinished', 15 );
    RETURN NUACCOUNT;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END FNUGETLASTACCDATEFINISHED;
























FUNCTION FRCGETLASTACCOUNTSERV
(
	INUNUMSERV      IN      CUENCOBR.CUCONUSE%TYPE,
	INUPROGRAMA     IN      FACTURA.FACTPROG%TYPE DEFAULT NULL
)
RETURN CUENCOBR%ROWTYPE
IS
    RCCUENCOBR CUENCOBR%ROWTYPE;	
BEGIN

    PKERRORS.PUSH('pkAccountMgr.frcGetLastAccountServ');

    
    IF ( CULASTACCOUNT%ISOPEN ) THEN
         CLOSE CULASTACCOUNT;
    END IF;

    
    OPEN CULASTACCOUNT( INUNUMSERV, INUPROGRAMA );
    FETCH CULASTACCOUNT INTO RCCUENCOBR;

    
    IF ( CULASTACCOUNT%NOTFOUND ) THEN
    	CLOSE CULASTACCOUNT;
    	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_SAT,
    				CNUSESU_SIN_CTAS
    			     );
    	RAISE LOGIN_DENIED;
    END IF;

    CLOSE CULASTACCOUNT;

    PKERRORS.POP;
    RETURN( RCCUENCOBR );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FRCGETLASTACCOUNTSERV;









































PROCEDURE GETACCOUNTBYPERIOD
(
	INUPRODUCTO	    IN	CUENCOBR.CUCONUSE%TYPE,
	INUPERIODO	    IN	PERIFACT.PEFACODI%TYPE,
	ORCCUENTA	    OUT	CUENCOBR%ROWTYPE,
	INUPROGRAMA     IN  FACTURA.FACTPROG%TYPE
)
IS
    
    RCCUENTA		CUENCOBR%ROWTYPE;
    RCCUENTANULL	CUENCOBR%ROWTYPE;

    
    CURSOR CUCTAXPERIODO 
	( 
	    NUPRODUCTO	CUENCOBR.CUCONUSE%TYPE,
	    NUPERIODO	PERIFACT.PEFACODI%TYPE,
	    NUPROGRAMA  FACTURA.FACTPROG%TYPE
	 ) 
    IS

        SELECT CUENCOBR.*
          FROM CUENCOBR,FACTURA
         WHERE CUCOFACT = FACTCODI
           AND CUCONUSE = NUPRODUCTO
           AND FACTPEFA+0 = NUPERIODO
           AND FACTPROG = NUPROGRAMA
           AND ROWNUM = 1;
         
    
    
    
    CNUERR_NO_HAY_CTA	CONSTANT NUMBER := 10659 ;

    CSBPROD	CONSTANT VARCHAR2 (11) := 'LBLPRODUCTO';
    CSBPERI	CONSTANT VARCHAR2 (10) := 'LBLPERIODO';
    CSBPROG	CONSTANT VARCHAR2 (11) := 'LBLPROGRAMA';

BEGIN

    PKERRORS.PUSH ('pkAccountMgr.GetAccountByPeriod');

    RCCUENTA := RCCUENTANULL ;

    
    IF (CUCTAXPERIODO%ISOPEN) THEN
         CLOSE CUCTAXPERIODO;
    END IF;

    
    OPEN  CUCTAXPERIODO (INUPRODUCTO, INUPERIODO, INUPROGRAMA);
    FETCH CUCTAXPERIODO INTO RCCUENTA ;

    
    IF (CUCTAXPERIODO%NOTFOUND) THEN
    
	    CLOSE CUCTAXPERIODO ;
    	PKERRORS.SETERRORCODE
    	    (
    		PKCONSTANTE.CSBDIVISION,
    		PKCONSTANTE.CSBMOD_BIL,
    		CNUERR_NO_HAY_CTA
    	    ) ;

    	
    	PKERRORS.CHANGEMESSAGE (CSBPROD, TO_CHAR(INUPRODUCTO)) ;
    	PKERRORS.CHANGEMESSAGE (CSBPERI, TO_CHAR(INUPERIODO)) ;
    	PKERRORS.CHANGEMESSAGE (CSBPROG, PKTBLPROCESOS.FSBGETPROCESS(INUPROGRAMA));

    	RAISE LOGIN_DENIED ;
    
    END IF;

    CLOSE CUCTAXPERIODO;

    
    ORCCUENTA := RCCUENTA ;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETACCOUNTBYPERIOD ;

































PROCEDURE GETACCOUNTPREVPERIOD
(
	INUPRODUCTO	    IN	CUENCOBR.CUCONUSE%TYPE,
	INUPERIODO	    IN	PERIFACT.PEFACODI%TYPE,
	ORCCUENTA	    OUT	CUENCOBR%ROWTYPE,
	INUPROGRAMA     IN  FACTURA.FACTPROG%TYPE
)
IS
    
    RCCUENTA		CUENCOBR%ROWTYPE;
    RCCUENTANULL	CUENCOBR%ROWTYPE;

    
    RCPERIODOANT	PERIFACT%ROWTYPE ;

BEGIN

    PKERRORS.PUSH ('pkAccountMgr.GetAccountPrevPeriod');

    RCCUENTA := RCCUENTANULL ;

    
    PKBILLINGPERIODMGR.GETPREVIOUSBILLPERIOD
	(
	    INUPERIODO,
	    RCPERIODOANT
	) ;

    
    PKACCOUNTMGR.GETACCOUNTBYPERIOD
	(
	    INUPRODUCTO,
	    RCPERIODOANT.PEFACODI,
	    RCCUENTA,
	    INUPROGRAMA
	) ;

    
    ORCCUENTA := RCCUENTA ;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETACCOUNTPREVPERIOD ;

























FUNCTION FRCGETLASTACCWITHDUEBALANCE
(
    INUSUBSSERV IN SERVSUSC.SESUNUSE%TYPE
) RETURN CUENCOBR%ROWTYPE
IS
    RCCUENCOBR CUENCOBR%ROWTYPE; 
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.frcGetLastAccWithDueBalance');

    RCCUENCOBR := FRCGETLASTACCWITHDUEBALANCE
                  (
                      INUSUBSSERV,
                      SYSDATE
                  );

    PKERRORS.POP;
    RETURN( RCCUENCOBR );
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

END FRCGETLASTACCWITHDUEBALANCE;






































FUNCTION FRCGETLASTACCWITHDUEBALANCE
(
    INUSUBSSERV IN SERVSUSC.SESUNUSE%TYPE,
    IDTPAYDATE  IN CUENCOBR.CUCOFEPA%TYPE
) RETURN CUENCOBR%ROWTYPE
IS
    RCCUENCOBR CUENCOBR%ROWTYPE; 

    

    CURSOR CULASTACCWITHDUEBALANCE
    IS
        SELECT  A.*
        FROM    CUENCOBR A, FACTURA
        WHERE   CUCONUSE =  INUSUBSSERV
        AND     FACTCODI = CUCOFACT
        AND     NVL(FACTCONS,GE_BOCONSTANTS.FNUGETDOCTYPECONS) IN (
                                                                    GE_BOCONSTANTS.FNUGETDOCTYPECONS,
                                                                    GE_BOCONSTANTS.FNUGETDOCTYPECREDIT
                                                                  )
        AND     TRUNC(CUCOFEVE) < TRUNC(IDTPAYDATE)
        AND     (
                    CUCOSACU    > CNUZERO
                    OR CUCOVARE > CNUZERO
                    OR CUCOVRAP > CNUZERO
                )
        ORDER BY CUCOFEVE DESC;
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.frcGetLastAccWithDueBalance');

    
    IF ( CULASTACCWITHDUEBALANCE%ISOPEN) THEN
        CLOSE CULASTACCWITHDUEBALANCE;
    END IF;

    
    OPEN  CULASTACCWITHDUEBALANCE;
        FETCH CULASTACCWITHDUEBALANCE INTO RCCUENCOBR;

        
        IF ( CULASTACCWITHDUEBALANCE%NOTFOUND) THEN
            
            CLOSE CULASTACCWITHDUEBALANCE;
            
            PKERRORS.SETERRORCODE
            (
                PKCONSTANTE.CSBDIVISION,
                PKCONSTANTE.CSBMOD_SAT,
                CNUSESU_SIN_CTAS
            );
            
	       RAISE LOGIN_DENIED;
        END IF;

    CLOSE CULASTACCWITHDUEBALANCE;

    PKERRORS.POP;
    RETURN( RCCUENCOBR );
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

END FRCGETLASTACCWITHDUEBALANCE;






















PROCEDURE GENERATEINVCHARGES
(
    INUACCOUNT  IN    CUENCOBR.CUCOCODI%TYPE,
    INUBALANCE	IN    CUENCOBR.CUCOSACU%TYPE,
    INUTOTAL	IN    CUENCOBR.CUCOVATO%TYPE,
    INUCAUSE    IN    CARGOS.CARGCACA%TYPE
)
IS
BEGIN

    PKERRORS.PUSH('pkAccoutMgr.GenerateInvCharges');

    
    PKTMPCHARGESMGR.GETPENDINGCHARGES(INUACCOUNT, INUBALANCE, INUTOTAL);

    
    PKTMPCHARGESMGR.ADJUSTMENT(INUACCOUNT, INUBALANCE, INUCAUSE);

    
    PKCHARGEMGR.SWITCHACCOUNTCHARGES(INUACCOUNT, INUCAUSE, TRUE);

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GENERATEINVCHARGES;


























PROCEDURE GETACCOUNTSWITHDEBT
(
	INUPRODUCT	IN	CUENCOBR.CUCONUSE%TYPE,
	OTBCUCOCODI	OUT	PKTBLCUENCOBR.TYCUCOCODI
)
IS
    
    
    CURSOR CUACCOUNTSWITHDEBT (NUPROD	CUENCOBR.CUCONUSE%TYPE) IS
        SELECT CUCOCODI
        FROM   CUENCOBR
        WHERE  CUCONUSE = NUPROD
        AND    CUCOSACU > 0;
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.GetAccountsWithDebt');

    
    OPEN CUACCOUNTSWITHDEBT (INUPRODUCT);
    FETCH CUACCOUNTSWITHDEBT BULK COLLECT INTO OTBCUCOCODI ;
    CLOSE CUACCOUNTSWITHDEBT ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETACCOUNTSWITHDEBT;



























PROCEDURE GETACCOUNTSWITHDEBT
(
	INUPRODUCT	IN	CUENCOBR.CUCONUSE%TYPE,
	ORCTBCUENTAS	OUT	TYTBACCOUNTS
)
IS
    TBCUCOCODI  PKTBLCUENCOBR.TYCUCOCODI;
    TBCUCOFEVE  PKTBLCUENCOBR.TYCUCOFEVE;

    
    
    CURSOR CUACCOUNTSWITHDEBT (NUPROD	CUENCOBR.CUCONUSE%TYPE) IS
        SELECT CUCOCODI,CUCOFEVE
        FROM   CUENCOBR
        WHERE  CUCONUSE = NUPROD
        AND    CUCOSACU > 0
        ORDER BY CUCOFEVE;
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.GetAccountsWithDebt');

    
    OPEN CUACCOUNTSWITHDEBT (INUPRODUCT);
    FETCH CUACCOUNTSWITHDEBT BULK COLLECT INTO TBCUCOCODI,TBCUCOFEVE ;
    CLOSE CUACCOUNTSWITHDEBT ;

    ORCTBCUENTAS.TBCUCOCODI := TBCUCOCODI;
    ORCTBCUENTAS.TBCUCOFEVE := TBCUCOFEVE;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETACCOUNTSWITHDEBT;












































































PROCEDURE APPLYPOSITIVEBALVALSUBS
(
	INUNUMSERV     IN	SERVSUSC.SESUNUSE%TYPE,
	INUPOSBALVALUE IN   SERVSUSC.SESUSAFA%TYPE,
	ONUPOSBALAPPL  OUT  SERVSUSC.SESUSAFA%TYPE,
	INUCUENTA      IN	CUENCOBR.CUCOCODI%TYPE DEFAULT NULL,
	ISBTIPOPROCESO IN	CARGOS.CARGTIPR%TYPE DEFAULT PKBILLCONST.POST_FACTURACION,
	IDTFECHACARGO  IN	CARGOS.CARGFECR%TYPE DEFAULT SYSDATE,
	ISBDOCSOP      IN	CARGOS.CARGDOSO%TYPE DEFAULT NULL
)
IS

    SBDOCSOP		CARGOS.CARGDOSO%TYPE := NULL; 
    NUSALDOPEND		PKBCSERVSUSC.STYSESUSAPE;     
    NUSALDOAFAV		SERVSUSC.SESUSAFA%TYPE;	      
    NUVLRAPLICAR	NUMBER;			              

    
    NUFLAGBD		NUMBER;
    
    RCCUENTA        CUENCOBR%ROWTYPE;

    




    PROCEDURE INITIALIZE IS
    BEGIN
    
        PKERRORS.PUSH ('pkAccountMgr.ApplyPositiveBalValSubs.Initialize');

        
        PKBILLINGNOTEMGR.GETNOTENUMBERCREATED (GNUBILLINGNOTE);

        

        IF ( GBLINITAPPLYPOSBALSERV ) THEN
        
            
            RETURN;
        
       END IF;

        
        PKBILLINGPARAMMGR.GETAPPPOSBALCNC (GNUCONCAPLSALDFAV);

        
        GBLINITAPPLYPOSBALSERV := TRUE;
        
    	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            GBLINITAPPLYPOSBALSERV := FALSE;
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
    
    END INITIALIZE;

    













    PROCEDURE ADDAPPPOSBALCHARGE
	(
	    INUCTA	IN	CUENCOBR.CUCOCODI%TYPE,
	    INUSALDOCTA	IN	CUENCOBR.CUCOSACU%TYPE
	)
	IS
    	NUSUSCRIPCION  SERVSUSC.SESUSUSC%TYPE;	
    BEGIN
    
    	PKERRORS.PUSH('pkAccountMgr.ApplyPositiveBalValSubs.AddAppPosBalCharge');

    	
    	
    	IF ( SBDOCSOP IS NULL ) THEN
    	    SBDOCSOP := '-';
    	END IF;

    	
    	IF (NU_MEMAPS_SESUSUSC IS NULL) THEN
    	    
    	    NUSUSCRIPCION := PKTBLSERVSUSC.FNUGETSUSCRIPTION( INUNUMSERV );
    	ELSE
    	    NUSUSCRIPCION := NU_MEMAPS_SESUSUSC ;
    	END IF;

        
        PKBOPOSITIVEBALANCEPROCESSES.APPLYPOSITIVEBALANCE
        (
            NUSUSCRIPCION,                          
            INUNUMSERV,                             
            INUCTA,                                 
            GNUCONCAPLSALDFAV,                      
            NUVLRAPLICAR,                           
            PKBILLCONST.APLSALDFAV,                 
            PKCONSTANTE.NULLNUM,                    
            SBDOCSOP,                               
            ISBTIPOPROCESO,                         
            INUSALDOCTA,                            
            IDTFECHACARGO,                          
            GNUBILLINGNOTE                          
        );
        
    	PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED THEN
    	    PKERRORS.POP;
    	    RAISE LOGIN_DENIED;
    
    END ADDAPPPOSBALCHARGE;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ApplyPositiveBalValSubs');

    
    
    VERIFYPRODPROCESSSECURITY (INUNUMSERV, 'APLI_SF');

    
    INITIALIZE;

    
    IF (NU_MEMAPS_SALDOPEND IS NULL) THEN
    	
    	
    	NUSALDOPEND := PKBCCUENCOBR.FNUGETOUTSTANDBAL
    			(
    			    INUNUMSERV
    			);
    ELSE
    	
    	NUSALDOPEND := NU_MEMAPS_SALDOPEND ;
    END IF;

    
    IF ( INUPOSBALVALUE IS NULL ) THEN
        
        IF (NU_MEMAPS_SALDOFAV IS NULL) THEN
        	
        	
        	NUSALDOAFAV := RC_BCPOSITIVEBALANCE.FNUGETPOSITIVEBALANCE( INUNUMSERV );
        ELSE
        	
        	NUSALDOAFAV := NU_MEMAPS_SALDOFAV ;
        END IF;
     ELSE
        
        NUSALDOAFAV := INUPOSBALVALUE ;
     END IF;

    
    IF (NUSALDOAFAV < 0) THEN
    	PKERRORS.POP;
    	RETURN ;
    END IF ;

    
    IF (NU_MEMAPS_UPDBD IS NULL) THEN
    	
    	NUFLAGBD := PKBILLCONST.CNUUPDATE_DB;
    ELSE
    	NUFLAGBD := NU_MEMAPS_UPDBD ;
    END IF;

    
    IF ( NUSALDOPEND = PKBILLCONST.CERO OR NUSALDOAFAV = PKBILLCONST.CERO )
    THEN
    	
    	PKERRORS.POP;
    	RETURN;
    END IF;

    
    SBDOCSOP := ISBDOCSOP ;

    
    IF ( INUCUENTA IS NOT NULL AND SBDOCSOP IS NULL ) THEN
    	
    	SBDOCSOP := PKBOSUPPORTDOCUMENTMGR.FSBGETAPPLYPOSBALANCE(INUCUENTA);

    END IF;

    
    IF ( INUCUENTA IS NULL ) THEN
    
        
        
        FOR RCCTA IN CUDUEBALACCSUBS ( INUNUMSERV ) LOOP
        
        	
        	
        	EXIT WHEN NUSALDOAFAV = PKBILLCONST.CERO;

        	
        	IF ( NUSALDOAFAV > ( RCCTA.NUSALDOCTA   -
                                 RCCTA.NUVLRRECLAMO -
                                 RCCTA.NUVLRRECLPAGNOABON ) ) THEN
        	    NUVLRAPLICAR :=  RCCTA.NUSALDOCTA   -
                                 RCCTA.NUVLRRECLAMO -
                                 RCCTA.NUVLRRECLPAGNOABON;
        	ELSE
        	    NUVLRAPLICAR := NUSALDOAFAV;
        	END IF;

        	
        	NUSALDOAFAV := NUSALDOAFAV - NUVLRAPLICAR;

        	
        	ADDAPPPOSBALCHARGE
        	(
        		RCCTA.CUCOCODI,
        		RCCTA.NUSALDOCTA
        	);
        
        END LOOP;
    
    ELSE
    
        
        

        
        RCCUENTA := PKTBLCUENCOBR.FRCGETRECORD( INUCUENTA );

    	
    	IF ( NUSALDOAFAV > ( RCCUENTA.CUCOSACU -
                             (CASE WHEN (NVL(RCCUENTA.CUCOVARE, 0) < 0) THEN 0 ELSE NVL(RCCUENTA.CUCOVARE, 0) END) -
                             RCCUENTA.CUCOVRAP ) ) THEN

    	    NUVLRAPLICAR :=  RCCUENTA.CUCOSACU -
                             (CASE WHEN (NVL(RCCUENTA.CUCOVARE, 0) < 0) THEN 0 ELSE NVL(RCCUENTA.CUCOVARE, 0) END) -
                             RCCUENTA.CUCOVRAP;
    	ELSE
    	    NUVLRAPLICAR := NUSALDOAFAV;
    	END IF;

    	
    	NUSALDOAFAV := NUSALDOAFAV - NUVLRAPLICAR;

    	
    	ADDAPPPOSBALCHARGE
    	(
    		RCCUENTA.CUCOCODI,
    		RCCUENTA.CUCOSACU
    	);
    
    END IF;

    
    ONUPOSBALAPPL := NUSALDOAFAV ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
    	RC_APPLYPOSITIVEBALSERV ;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
    	RC_APPLYPOSITIVEBALSERV ;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
    	RC_APPLYPOSITIVEBALSERV ;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END APPLYPOSITIVEBALVALSUBS;



































FUNCTION FRCGETLASTACCBYSUPPDOC
(
	INUNUMSERV	IN	SERVSUSC.SESUNUSE%TYPE,
    INUTYPEDOC	IN	GE_DOCUMENT_TYPE.DOCUMENT_TYPE_ID%TYPE
)
RETURN CUENCOBR%ROWTYPE
IS
    
    
    
    CURSOR CULASTACCOUNT ( INUNUMSERV  IN   CUENCOBR.CUCONUSE%TYPE,
			               INUDOCTYPE  IN   FACTURA.FACTCONS%TYPE
			 ) IS
    SELECT   CUENCOBR.*
    FROM     CUENCOBR,FACTURA
    WHERE    CUCONUSE = INUNUMSERV
    AND      CUCOFACT = FACTCODI
    AND      FACTCONS = INUTYPEDOC
    ORDER BY FACTFEGE DESC;

    RCACCOUNT   CUENCOBR%ROWTYPE;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.frcGetLastAccBySuppDoc');
    
    IF CULASTACCOUNT%ISOPEN THEN
    
        CLOSE CULASTACCOUNT;
    
    END IF;

    
    OPEN CULASTACCOUNT( INUNUMSERV,INUTYPEDOC );
    FETCH CULASTACCOUNT INTO RCACCOUNT;
    
    
    IF ( CULASTACCOUNT%NOTFOUND ) THEN
        RCACCOUNT.CUCOCODI := 0;
    END IF;
    
    CLOSE CULASTACCOUNT;
    
    PKERRORS.POP;
    RETURN( RCACCOUNT );
    
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FRCGETLASTACCBYSUPPDOC;





























FUNCTION FRCGETNEXTACCTOEXPIRE
(
	INUNUMSERV	IN	SERVSUSC.SESUNUSE%TYPE
)
RETURN CUENCOBR%ROWTYPE
IS
    
    CURSOR CULASTACCOUNT ( INUNUMSERV  IN   CUENCOBR.CUCONUSE%TYPE )
    IS
        SELECT   CUENCOBR.*
        FROM     CUENCOBR
        WHERE    CUCONUSE = INUNUMSERV
        AND      CUCOFEVE > SYSDATE
        AND      NVL(CUCOSACU,0) - (CASE WHEN (NVL(CUCOVARE, 0) < 0) THEN 0 ELSE NVL(CUCOVARE, 0) END) - NVL(CUCOVRAP,0) > 0
        AND      ROWNUM = 1
        ORDER BY CUCOFEVE;

    RCACCOUNT   CUENCOBR%ROWTYPE;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.frcGetNextAccToExpire');
    
    IF CULASTACCOUNT%ISOPEN THEN
    
        CLOSE CULASTACCOUNT;
    
    END IF;

    
    OPEN CULASTACCOUNT( INUNUMSERV );
    FETCH CULASTACCOUNT INTO RCACCOUNT;
    
    
    IF ( CULASTACCOUNT%NOTFOUND ) THEN
        RCACCOUNT.CUCOCODI := 0;
    END IF;
    
    CLOSE CULASTACCOUNT;
    
    PKERRORS.POP;
    RETURN( RCACCOUNT );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FRCGETNEXTACCTOEXPIRE;




















FUNCTION FBLGETACCWITHBAL
(
    INUACCOMIN              IN	CUENCOBR.CUCOCODI%TYPE,
    INUTHREADNUMBER         IN  NUMBER,
    INUTHREAD               IN  NUMBER,
	ORCTBACCOUNTS   	    OUT NOCOPY TYTBACCOUNTS
)
RETURN BOOLEAN
IS
    BLMORERECORDS   BOOLEAN;
    CUACCOUNTS      PKCONSTANTE.TYREFCURSOR;
    TNUACCOUNTS     PKTBLCUENCOBR.TYCUCOCODI;
    TNUSUBSERVI     PKTBLCUENCOBR.TYCUCONUSE;
    TNUSUBSPLAN     PKTBLCUENCOBR.TYCUCOPLSU;
    TDTCUCOFEVE     PKTBLCUENCOBR.TYCUCOFEVE;

    PROCEDURE INITIALIZE IS
    BEGIN
    
    	PKERRORS.PUSH ('pkAccountMgr.fblGetAccWithBal.Initialize');

    	TNUACCOUNTS.DELETE;
    	TNUSUBSERVI.DELETE;
    	TNUSUBSPLAN.DELETE;
    	TDTCUCOFEVE.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END INITIALIZE;

    PROCEDURE FILLOUTRECORD
    IS
    BEGIN
    
    	PKERRORS.PUSH ('pkAccountMgr.fblGetAccWithBal.FillOutRecord');

    	ORCTBACCOUNTS.TBCUCOCODI := TNUACCOUNTS;
    	ORCTBACCOUNTS.TBCUCONUSE := TNUSUBSERVI;
    	ORCTBACCOUNTS.TBCUCOPLSU := TNUSUBSPLAN;
    	ORCTBACCOUNTS.TBCUCOFEVE := TDTCUCOFEVE;

    	INITIALIZE;

    	PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	    PKERRORS.POP;
    	    RAISE;
    	WHEN OTHERS THEN
    	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	    PKERRORS.POP;
    	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END FILLOUTRECORD;

    PROCEDURE GETCURSOR
    IS
    BEGIN
    
    	PKERRORS.PUSH ('pkAccountMgr.fblGetAccWithBal.GetCursor');
    	
        OPEN CUACCOUNTS FOR
            SELECT CUCOCODI,CUCONUSE,CUCOPLSU,CUCOFEVE
            FROM   CUENCOBR
            WHERE  CUCOCODI > INUACCOMIN
            AND    CUCOSACU+0 > 0
            AND    MOD ( CUCOCODI, INUTHREADNUMBER ) + 1 = INUTHREAD;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETCURSOR;
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.fblGetAccWithBal');

    
    INITIALIZE;

    IF ( CUACCOUNTS%ISOPEN ) THEN
    
        CLOSE CUACCOUNTS;
    
    END IF ;

    BLMORERECORDS := TRUE;

    GETCURSOR;

    FETCH CUACCOUNTS BULK COLLECT INTO TNUACCOUNTS,TNUSUBSERVI,TNUSUBSPLAN,TDTCUCOFEVE
                     LIMIT 100 ;

    IF ( CUACCOUNTS%NOTFOUND) THEN
    
        BLMORERECORDS := FALSE ;
    
    END IF;

    IF ( TNUACCOUNTS.COUNT > 0 ) THEN
    
        FILLOUTRECORD;
    
    END IF;

    CLOSE CUACCOUNTS;

    PKERRORS.POP;
    RETURN ( BLMORERECORDS );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FBLGETACCWITHBAL;

































FUNCTION FBLGETACCBYDATE
(
    INUACCOMIN              IN	CUENCOBR.CUCOCODI%TYPE,
    INUTHREADNUMBER         IN  NUMBER,
    INUTHREAD               IN  NUMBER,
    IDTBASEDATE             IN  DATE,
	ORCTBACCOUNTS   	    OUT NOCOPY TYTBACCOUNTS
)
RETURN BOOLEAN
IS
    BLMORERECORDS   BOOLEAN;
    CUACCOUNTS      PKCONSTANTE.TYREFCURSOR;
    TNUACCOUNTS     PKTBLCUENCOBR.TYCUCOCODI;
    TNUSUBSERVI     PKTBLCUENCOBR.TYCUCONUSE;
    TDTCUCOFEGE     PKTBLFACTURA.TYFACTFEGE;
    TDTCUCOFEVE     PKTBLCUENCOBR.TYCUCOFEVE;
    TNUSUBSPLAN     PKTBLCUENCOBR.TYCUCOPLSU;

    PROCEDURE INITIALIZE IS
    BEGIN
    
    	PKERRORS.PUSH ('pkAccountMgr.fblGetAccByDate.Initialize');

    	TNUACCOUNTS.DELETE;
    	TNUSUBSERVI.DELETE;
    	TDTCUCOFEGE.DELETE;
    	TDTCUCOFEVE.DELETE;
    	TNUSUBSPLAN.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END INITIALIZE;

    PROCEDURE FILLOUTRECORD
    IS
    BEGIN
    
    	PKERRORS.PUSH ('pkAccountMgr.fblGetAccByDate.FillOutRecord');

    	ORCTBACCOUNTS.TBCUCOCODI := TNUACCOUNTS;
    	ORCTBACCOUNTS.TBCUCONUSE := TNUSUBSERVI;
    	ORCTBACCOUNTS.TBCUCOFEGE := TDTCUCOFEGE;
    	ORCTBACCOUNTS.TBCUCOFEVE := TDTCUCOFEVE;
    	ORCTBACCOUNTS.TBCUCOPLSU := TNUSUBSPLAN;

    	INITIALIZE;

    	PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	    PKERRORS.POP;
    	    RAISE;

    	WHEN OTHERS THEN
    	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	    PKERRORS.POP;
    	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END FILLOUTRECORD;

    PROCEDURE GETCURSOR IS
    BEGIN
    
    	PKERRORS.PUSH ('pkAccountMgr.fblGetAccByDate.GetCursor');

        OPEN CUACCOUNTS FOR
        SELECT CUCOCODI,CUCONUSE,FACTFEGE,CUCOFEVE,
               CUCOPLSU
        FROM   CUENCOBR,FACTURA
        WHERE  CUCOFACT = FACTCODI
        AND    CUCOCODI > INUACCOMIN
        AND    FACTFEGE >= IDTBASEDATE
        AND    FACTFEGE <  IDTBASEDATE + 1
        AND    MOD ( CUCOCODI, INUTHREADNUMBER ) + 1 = INUTHREAD
        ORDER BY CUCOCODI;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETCURSOR;
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.fblGetAccByDate');

    
    INITIALIZE;

    IF ( CUACCOUNTS%ISOPEN ) THEN
    
        CLOSE CUACCOUNTS;
    
    END IF ;

    BLMORERECORDS := TRUE;

    GETCURSOR;

    FETCH CUACCOUNTS BULK COLLECT INTO TNUACCOUNTS,
                                       TNUSUBSERVI,
                                       TDTCUCOFEGE,
                                       TDTCUCOFEVE,
                                       TNUSUBSPLAN
    LIMIT 100 ;

    IF ( CUACCOUNTS%NOTFOUND) THEN
    
        BLMORERECORDS := FALSE ;
    
    END IF;

    IF ( TNUACCOUNTS.COUNT > 0 ) THEN
    
        FILLOUTRECORD;
    
    END IF;

    CLOSE CUACCOUNTS;

    PKERRORS.POP;
    RETURN ( BLMORERECORDS );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FBLGETACCBYDATE;





















FUNCTION FSBVERSION  RETURN VARCHAR2 IS
BEGIN

    RETURN CSBVERSION;

END;


























FUNCTION FNUACCOUNTSWITHBALANCE
(
	INUNUMSERV	IN	CUENCOBR.CUCONUSE%TYPE
)
RETURN NUMBER
IS
    TBCTASSALDO	PKACCOUNTMGR.TYTBCTASCONSALDOSR;
    NUCTASSALDO NUMBER;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.fnuAccountsWithBalance');
    
    
    TBCTASSALDO := TBCTASSALDONULL;
    PKACCOUNTMGR.GETACCOUNTSWITHBALANCE( INUNUMSERV,
	                                     TBCTASSALDO );
    NUCTASSALDO := NVL(TBCTASSALDO.COUNT,0);
    
    TBCTASSALDO.DELETE;

    RETURN NUCTASSALDO;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FNUACCOUNTSWITHBALANCE;












































PROCEDURE GETCONTRACTDUEBALANCE
(
    INUCONTRACT                     IN  SERVSUSC.SESUSUSC%TYPE,
    OCUACCOUNTS                     OUT PKCONSTANTE.TYREFCURSOR
)
IS
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.GetContractDueBalance');

    
    IF ( OCUACCOUNTS%ISOPEN ) THEN
    
        CLOSE OCUACCOUNTS;
    
    END IF;
    
    OPEN OCUACCOUNTS FOR
        SELECT  /*+
                    ordered
                    index (factura IX_FACTURA06)
                    use_nl (factura cuencobr)
                */
                CUENCOBR.*
        FROM    FACTURA,CUENCOBR
                /*+ pkAccountMgr.GetContractDueBalance */
        WHERE   CUCOFACT = FACTCODI
        AND     FACTSUSC = INUCONTRACT
        AND     ( NVL(CUCOSACU,0) - (CASE WHEN (NVL(CUCOVARE, 0) < 0) THEN 0 ELSE NVL(CUCOVARE, 0) END) - NVL(CUCOVRAP,0) ) > GNUTOPE_DEUDA_PERMITIDO
        AND     TRUNC(CUCOFEVE) < TRUNC(SYSDATE);

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETCONTRACTDUEBALANCE;
































PROCEDURE GETPRODUCTDUEBALANCE
(
    INUPRODUCT                      IN  SERVSUSC.SESUNUSE%TYPE,
    OCUACCOUNTS                     OUT PKCONSTANTE.TYREFCURSOR
)
IS
BEGIN

    PKERRORS.PUSH ('pkAccountMgr.GetProductDueBalance');

    
    IF ( OCUACCOUNTS%ISOPEN ) THEN
    
        CLOSE OCUACCOUNTS;
    
    END IF;

    OPEN OCUACCOUNTS FOR
        SELECT *
        FROM   CUENCOBR
        WHERE  CUCONUSE = INUPRODUCT
        AND    ( NVL(CUCOSACU,0) - (CASE WHEN (NVL(CUCOVARE, 0) < 0) THEN 0 ELSE NVL(CUCOVARE, 0) END) - NVL(CUCOVRAP,0) ) > GNUTOPE_DEUDA_PERMITIDO
        AND    TRUNC(CUCOFEVE) < TRUNC(SYSDATE);

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETPRODUCTDUEBALANCE;





























PROCEDURE GETACCOUNTSWITHBALANCEBYBILL
(
    INUBILL         IN CUENCOBR.CUCOFACT%TYPE,
    ORCTBACCOUNTS   OUT	TYTBACCOUNTS
)
IS
    TBCUCOCODI  PKTBLCUENCOBR.TYCUCOCODI;
    TBCUCONUSE  PKTBLCUENCOBR.TYCUCONUSE;
    TBCUCOFEVE  PKTBLCUENCOBR.TYCUCOFEVE;
    TBCUCOFEGE  PKTBLFACTURA.TYFACTFEGE;
    TBCUCOPLSU  PKTBLCUENCOBR.TYCUCOPLSU;

    CURSOR CUACCOUNTS
    IS
        SELECT --+ pkAccountMgr.GetAccountsWithBalanceByBill
            A.CUCOCODI, A.CUCONUSE, A.CUCOFEVE, B.FACTFEGE, A.CUCOPLSU
        FROM   CUENCOBR A, FACTURA B
        WHERE  A.CUCOFACT = B.FACTCODI
        AND    B.FACTCODI = INUBILL
        AND    ( NVL(A.CUCOSACU,0) - (CASE WHEN (NVL(A.CUCOVARE, 0) < 0) THEN 0 ELSE NVL(A.CUCOVARE, 0) END) - NVL(A.CUCOVRAP,0) ) > 0
        ORDER BY A.CUCOFEVE;
BEGIN
    PKERRORS.PUSH('pkAccountMgr.GetAccountsWithBalanceByBill');

    
    OPEN CUACCOUNTS ;
    FETCH CUACCOUNTS BULK COLLECT INTO TBCUCOCODI, TBCUCONUSE, TBCUCOFEVE, TBCUCOFEGE, TBCUCOPLSU;
    CLOSE CUACCOUNTS ;

    ORCTBACCOUNTS.TBCUCOCODI := TBCUCOCODI;
    ORCTBACCOUNTS.TBCUCONUSE := TBCUCONUSE;
    ORCTBACCOUNTS.TBCUCOFEVE := TBCUCOFEVE;
    ORCTBACCOUNTS.TBCUCOFEGE := TBCUCOFEGE;
    ORCTBACCOUNTS.TBCUCOPLSU := TBCUCOPLSU;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETACCOUNTSWITHBALANCEBYBILL;










































PROCEDURE GETPRODUCTLASTACCOUNT
(
	INUPRODUCT     IN      SERVSUSC.SESUNUSE%TYPE,
	ONUACCOUNT     OUT     CUENCOBR.CUCOCODI%TYPE
)
IS
    
    NUBILLACCOUNT           FACTURA.FACTCODI%TYPE;
    
    
    NUACCOUNT               CUENCOBR.CUCOCODI%TYPE;
    
    
    RCSERVSUSC              SERVSUSC%ROWTYPE;
    
    
    RCSUSCRIPC              SUSCRIPC%ROWTYPE;
    
    
    RCCUENCOBR              CUENCOBR%ROWTYPE;
BEGIN


    PKERRORS.PUSH('pkAccountMgr.GetProductLastAccount');

    
    IF ( CULASTACCOUNT%ISOPEN ) THEN
    
         CLOSE CULASTACCOUNT;
    
    END IF;

    
    OPEN CULASTACCOUNT( INUPRODUCT );
    FETCH CULASTACCOUNT INTO RCCUENCOBR;

    
    
    IF ( CULASTACCOUNT%NOTFOUND ) THEN
    
        
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( INUPRODUCT );

        
        RCSUSCRIPC := PKTBLSUSCRIPC.FRCGETRECORD( RCSERVSUSC.SESUSUSC );

        
        PKACCOUNTSTATUSMGR.GETNEWACCOSTATUSNUM ( NUBILLACCOUNT );

        
        PKACCOUNTSTATUSMGR.ADDNEWRECORD
	    (
            NUBILLACCOUNT,
            PKGENERALSERVICES.FNUIDPROCESO,
            RCSUSCRIPC,
            GE_BOCONSTANTS.FNUGETDOCTYPECONS
	    );

        
        PKACCOUNTMGR.GETNEWACCOUNTNUM ( NUACCOUNT ) ;
        
        
        PKACCOUNTMGR.ADDNEWRECORD
	    (
            NUBILLACCOUNT,
            NUACCOUNT,
            RCSERVSUSC
	    );
	    
	    
	    RCCUENCOBR := PKTBLCUENCOBR.FRCGETRECORD( NUACCOUNT );
    
    END IF;

    CLOSE CULASTACCOUNT;
    
    ONUACCOUNT := RCCUENCOBR.CUCOCODI;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETPRODUCTLASTACCOUNT;





















FUNCTION FRFGETPRODACCWITHBAL
(
   INUPRODUCT           SERVSUSC.SESUNUSE%TYPE
)
RETURN PKCONSTANTE.TYREFCURSOR
IS
    
    CUPRODACCWITHBAL        PKCONSTANTE.TYREFCURSOR;
BEGIN

    PKERRORS.PUSH('pkAccountMgr.frfGetProdAccWithBal');

    
    OPEN CUPRODACCWITHBAL FOR
        SELECT  *
        FROM    CUENCOBR
        WHERE   CUCONUSE = INUPRODUCT
        
        AND     NVL( CUCOSACU, 0 ) > 0;

    PKERRORS.POP;
    
    RETURN ( CUPRODACCWITHBAL );
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END FRFGETPRODACCWITHBAL;


    



















    FUNCTION FNUGETPRODNUMACCWITHBAL
    (
        INUPRODUCT  IN  SERVSUSC.SESUNUSE%TYPE
    )
    RETURN NUMBER
    IS
        
        CURSOR CUGETPRODACCSWITHBAL IS
            SELECT  /*+ index (cuencobr IX_CUENCOBR03) */
                    COUNT (1)
            FROM    /*+ pkAccountMgr.fnuGetProdNumAccWithBal[cuGetProdAccsWithBal] */
                    CUENCOBR
            WHERE   CUCONUSE = INUPRODUCT
            AND     ( NVL( CUCOSACU, 0 ) - NVL( CUCOVARE, 0 ) - NVL( CUCOVRAP, 0 ) ) > 0;

        
        NUPRODACCSWITHBAL   NUMBER;

    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.fnuGetProdNumAccWithBal');

        
        NUPRODACCSWITHBAL := 0;

        
        IF ( CUGETPRODACCSWITHBAL%ISOPEN ) THEN
            CLOSE CUGETPRODACCSWITHBAL;
        END IF;

        
        OPEN CUGETPRODACCSWITHBAL;
        FETCH CUGETPRODACCSWITHBAL INTO NUPRODACCSWITHBAL;
        CLOSE CUGETPRODACCSWITHBAL;

        PKERRORS.POP;

        
        RETURN NVL(NUPRODACCSWITHBAL,0);

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            IF ( CUGETPRODACCSWITHBAL%ISOPEN ) THEN
                CLOSE CUGETPRODACCSWITHBAL;
            END IF;
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            IF ( CUGETPRODACCSWITHBAL%ISOPEN ) THEN
                CLOSE CUGETPRODACCSWITHBAL;
            END IF;
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            IF ( CUGETPRODACCSWITHBAL%ISOPEN ) THEN
                CLOSE CUGETPRODACCSWITHBAL;
            END IF;
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END FNUGETPRODNUMACCWITHBAL;



















PROCEDURE OBTSALDOPENDPRODUCTO
(
    INUPRODUCTO IN  CUENCOBR.CUCONUSE%TYPE,
    OCUCUENTAS  OUT PKCONSTANTE.TYREFCURSOR
)
IS
BEGIN

    PKERRORS.PUSH('pkAccountMgr.ObtSaldoPendProducto');

    
    IF OCUCUENTAS%ISOPEN THEN
        CLOSE OCUCUENTAS;
    END IF;

    OPEN OCUCUENTAS FOR
        SELECT *
        FROM   CUENCOBR
        WHERE  CUCONUSE = INUPRODUCTO
        AND    NVL( CUCOSACU, 0 ) > GNUTOPE_DEUDA_PERMITIDO
        AND    NVL( CUCOVARE, 0 ) = 0
        AND    NVL( CUCOVRAP, 0 ) = 0
        AND    TRUNC(CUCOFEVE) < TRUNC(SYSDATE);

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END OBTSALDOPENDPRODUCTO;























PROCEDURE CALCVALORAJUSTE
(
    INUFACTORAJUSTE IN  TIMOEMPR.TMEMFAAJ%TYPE,
    INUVALORCTA 	IN	CUENCOBR.CUCOVATO%TYPE,
	ONUVALORAJUSTE	OUT	CARGOS.CARGVALO%TYPE,
	OSBSIGNOAJUSTE	OUT	CARGOS.CARGSIGN%TYPE
)
IS
    NUVALOR		    CUENCOBR.CUCOVATO%TYPE;	  
    NUVLRAJUSTE    NUMBER;			          
    SBSIGNO		    CARGOS.CARGSIGN%TYPE;	  
    BLSALDONEG      BOOLEAN := FALSE;         

BEGIN

    PKERRORS.PUSH('pkAccountMgr.CalcValorAjuste');

    ONUVALORAJUSTE := PKBILLCONST.CERO;
    OSBSIGNOAJUSTE := NULL;
    NUVALOR        := INUVALORCTA;

    
    IF ( NUVALOR = PKBILLCONST.CERO OR NUVALOR IS NULL ) THEN
    
    	PKERRORS.POP;
    	RETURN;
    
    END IF;

    
    IF ( NUVALOR < PKBILLCONST.CERO ) THEN
    
    	NUVALOR := ABS( NUVALOR );
    	SBSIGNO := PKBILLCONST.DEBITO;
    	BLSALDONEG := TRUE;
    
    END IF;

    
    NUVLRAJUSTE := MOD( NUVALOR, INUFACTORAJUSTE );
    
    IF ( NUVLRAJUSTE = PKBILLCONST.CERO ) THEN
    
    	PKERRORS.POP;
    	RETURN;
    
    END IF;

    
    
    
    IF ( ( INUFACTORAJUSTE-NUVLRAJUSTE ) > (INUFACTORAJUSTE/2) ) THEN
    
    	ONUVALORAJUSTE := NUVLRAJUSTE;
    	
    	
    	IF (BLSALDONEG) THEN
    	    OSBSIGNOAJUSTE := PKBILLCONST.DEBITO;
    	ELSE
    	    OSBSIGNOAJUSTE := PKBILLCONST.CREDITO;
    	END IF;
    
    ELSE
    
        
    	
    	
    	ONUVALORAJUSTE := INUFACTORAJUSTE - NUVLRAJUSTE;
    	IF (BLSALDONEG) THEN
    	    OSBSIGNOAJUSTE := PKBILLCONST.CREDITO;
    	ELSE
    	    OSBSIGNOAJUSTE := PKBILLCONST.DEBITO ;
    	END IF;
    
    END IF;

    PKERRORS.POP;
    RETURN;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END CALCVALORAJUSTE;


    























    PROCEDURE SETREQUESTINMEMORY
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
    BEGIN
        PKERRORS.PUSH( 'pkAccountMgr.SetRequestInMemory' );
        UT_TRACE.TRACE( 'Inicio [pkAccountMgr.SetRequestInMemory]' );
        
        
        GNUSOLICITUD := INUPACKAGEID;
        
        GSBTIPOSAFA := PKBILLCONST.SOLICITUD;
        
        UT_TRACE.TRACE( 'Fin [pkAccountMgr.SetRequestInMemory]' );
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.POP;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END SETREQUESTINMEMORY;
    
    
    


















    PROCEDURE CLEARREQUESTINMEMORY
    IS
    BEGIN
        PKERRORS.PUSH( 'pkAccountMgr.ClearRequestInMemory' );
        UT_TRACE.TRACE( 'Inicio [pkAccountMgr.ClearRequestInMemory]' );
        
        
        GNUSOLICITUD := NULL;
        
        GSBTIPOSAFA := NULL;
        
        UT_TRACE.TRACE( 'Fin [pkAccountMgr.ClearRequestInMemory]' );
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.POP;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END CLEARREQUESTINMEMORY;
    
    




































    PROCEDURE ADJUSTACCOUNTMMRY
    (
    	INUCUENTA	    IN	CARGOS.CARGCUCO%TYPE,
    	INUNUMSERV	    IN	CARGOS.CARGNUSE%TYPE,
    	OSBSIGNOCANC    OUT	CARGOS.CARGSIGN%TYPE,
    	ONUVLRCANCAJ	OUT	CARGOS.CARGVALO%TYPE,
    	OSBSIGNO	    OUT	CARGOS.CARGSIGN%TYPE,
    	ONUVLRAJUSTE	OUT	CARGOS.CARGVALO%TYPE
    )
    IS
    	
        CNUUPDATE_DB        CONSTANT NUMBER := 1;
        NUVALORCTA		    CUENCOBR.CUCOVATO%TYPE;	
        NUVLRAJUSTES    	NUMBER;			        
        SBSIGNOAJUSTE   	CARGOS.CARGSIGN%TYPE;	
        NUVLRAJUSTE	    	CARGOS.CARGVALO%TYPE;	
        SBSIGNCANC		    CARGOS.CARGSIGN%TYPE;	
        RCTIMOEMPR          TIMOEMPR%ROWTYPE;

        
        
        BLAJUSTARCUENTAS	BOOLEAN;
        
        NUFACTORAJUSTECTA	TIMOEMPR.TMEMFAAJ%TYPE;

        



        FUNCTION FNUGETACCTOTALVALUE
        (
            INUCTA		IN	CUENCOBR.CUCOCODI%TYPE
        )
        RETURN NUMBER
        IS
    	   NUVLRCUENTA	CUENCOBR.CUCOVATO%TYPE;	
        BEGIN
        
        	PKERRORS.PUSH('pkAccountMgr.AdjustAccountMmry.fnuGetAccTotalValue');

        	IF (INUCTA = PKBILLCONST.NULOSAT) THEN
        	    NUVLRCUENTA := PKBILLCONST.CERO;
        	ELSE
        		NUVLRCUENTA := PKTBLCUENCOBR.FNUGETTOTALVALUE
    						   (
    							   INUCTA,
    						       PKCONSTANTE.NOCACHE
    						   );
        	END IF;

        	PKERRORS.POP;
        	RETURN( NUVLRCUENTA );
        EXCEPTION
        	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	    PKERRORS.POP;
        	    RAISE;
        
        END FNUGETACCTOTALVALUE;
        




        PROCEDURE ADDCHARGE
    	(
    	    INUVLRCARGO	IN	CARGOS.CARGVALO%TYPE,
    	    ISBSIGNO	IN	CARGOS.CARGSIGN%TYPE
    	)
    	IS
            RCSERVSUSC  SERVSUSC%ROWTYPE;
        BEGIN
        
        	PKERRORS.PUSH('pkAccountMgr.AdjustAccountMmry.AddCharge');

        	RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD(INUNUMSERV);

        	
        	PKUPDACCORECEIV.UPDACCOREC
            (
                PKBILLCONST.CNUSUMA_CARGO, INUCUENTA, RCSERVSUSC.SESUSUSC,
                INUNUMSERV, GNUCONCAJUSTE, ISBSIGNO,
        		ABS(INUVLRCARGO), PKBILLCONST.CNUUPDATE_DB
            );

        	PKERRORS.POP;
        EXCEPTION
        	WHEN LOGIN_DENIED THEN
        	    PKERRORS.POP;
        	    RAISE LOGIN_DENIED;
        
        END;
        



        FUNCTION FBLNEEDADJUST
        (
            INUFACTORAJUSTE IN  TIMOEMPR.TMEMFAAJ%TYPE,
            INUVALORCTA	IN	CUENCOBR.CUCOVATO%TYPE
        )
        RETURN BOOLEAN
        IS
            NUVALOR		    CUENCOBR.CUCOVATO%TYPE;	
            NUVLRAJUSTE 	CUENCOBR.CUCOVATO%TYPE;	
            NUFACTOR		TIMOEMPR.TMEMFAAJ%TYPE;	
        BEGIN
        
            PKERRORS.PUSH('pkAccountMgr.AdjustAccountMmry.fblNeedAdjust');

            NUVALOR := INUVALORCTA;

            
            IF ( NUVALOR = PKBILLCONST.CERO OR NUVALOR IS NULL ) THEN
            	PKERRORS.POP;
            	RETURN( FALSE );
            END IF;

            
            NUVLRAJUSTE := MOD( ABS(NUVALOR), INUFACTORAJUSTE );

            
            IF ( NUVLRAJUSTE = PKBILLCONST.CERO ) THEN
            	PKERRORS.POP;
            	RETURN(FALSE);
            END IF;

            PKERRORS.POP;
            RETURN( TRUE );
        EXCEPTION
            WHEN LOGIN_DENIED THEN
            	PKERRORS.POP;
            	RAISE LOGIN_DENIED;
            WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            	PKERRORS.POP;
            	RAISE PKCONSTANTE.EXERROR_LEVEL2;
            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            	PKERRORS.POP;
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END FBLNEEDADJUST;

    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.AdjustAccountMmry');

        
    	ONUVLRCANCAJ := PKBILLCONST.CERO;
    	OSBSIGNOCANC := NULL;

        
        ONUVLRAJUSTE := PKBILLCONST.CERO;
        OSBSIGNO     := NULL;

        
        FA_BOPOLITICAREDONDEO.OBTIENEPOLITICAAJUSTE (
                                                        INUNUMSERV,
                                                        RCTIMOEMPR
                                                    );

        BLAJUSTARCUENTAS := RCTIMOEMPR.TMEMAJUS = PKCONSTANTE.SI AND
                            RCTIMOEMPR.TMEMFAAJ > 0;

        NUFACTORAJUSTECTA := RCTIMOEMPR.TMEMFAAJ;

        
        IF (INUCUENTA = PKBILLCONST.NULOSAT) THEN
        
        	PKERRORS.POP;
        	RETURN;
        
        END IF;

        
        INITADJUACCO;

        
        IF ( NOT BLAJUSTARCUENTAS ) THEN
        
        	PKERRORS.POP;
        	RETURN;
        
        END IF;

        
        NUVALORCTA := FNUGETACCTOTALVALUE( INUCUENTA );

        
        IF ( NOT FBLNEEDADJUST( NUFACTORAJUSTECTA, NUVALORCTA ) ) THEN
        
        	PKERRORS.POP;
        	RETURN;
        
        END IF;

        
        NUVLRAJUSTES := PKACCOUNTMGR.FNUGETADJUSTVALUE( INUCUENTA );

        
        IF ( NUVLRAJUSTES != PKBILLCONST.CERO ) THEN
        
        	
        	SBSIGNCANC := PKCHARGEMGR.FSBGETCANCELSIGN( NUVLRAJUSTES );
        	
        	ADDCHARGE( NUVLRAJUSTES, SBSIGNCANC );

        	OSBSIGNOCANC := SBSIGNCANC;
        	ONUVLRCANCAJ := ABS(NUVLRAJUSTES);
        
        END IF;

        
        NUVALORCTA := FNUGETACCTOTALVALUE( INUCUENTA );

        
        CALCADJUSTVALUE (
                            BLAJUSTARCUENTAS,
                            NUFACTORAJUSTECTA,
                            NUVALORCTA,
                            NUVLRAJUSTE,
                            SBSIGNOAJUSTE
                        );

        
        IF ( NUVLRAJUSTE = PKBILLCONST.CERO ) THEN
        
        	PKERRORS.POP;
        	RETURN;
        
        END IF;

        
        ADDCHARGE( NUVLRAJUSTE, SBSIGNOAJUSTE );

        
        ONUVLRAJUSTE := NUVLRAJUSTE;
        OSBSIGNO     := SBSIGNOAJUSTE;

        PKERRORS.POP;
        RETURN;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END ADJUSTACCOUNTMMRY;

    

































































    PROCEDURE APPLYBALANCEBYQUOTEREQ
    (
        INUSOLICITUD IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUCUENTACBR IN CUENCOBR.CUCOCODI%TYPE,
        ISBFLAGAPP   IN VARCHAR2 DEFAULT 'P',
        INUVALORFACT IN CARGOS.CARGVALO%TYPE,
        INUUPDATEDB  IN  NUMBER DEFAULT PKBILLCONST.CNUUPDATE_DB
    )
    IS
        
        SBTIPOPROCESO CARGOS.CARGTIPR%TYPE;
        
        
        NUSALDDISPO SALDFAVO.SAFAVALO%TYPE;
        
        
        SBDOCSOP CARGOS.CARGDOSO%TYPE;
        
        
        NUCAUSAAPP CARGOS.CARGCACA%TYPE;
        
        
        NUVLRAPLICAR SALDFAVO.SAFAVALO%TYPE;
        
        
        NUPORCENTAJE    NUMBER;
        
        
        NUVALRCOTI   SALDFAVO.SAFAVALO%TYPE;
        
        
        RCCUENCOBR CUENCOBR%ROWTYPE;
        
        
        RCSERVSUSC SERVSUSC%ROWTYPE;
        
        
        RCPARAFACT PARAFACT%ROWTYPE;
        
        
        NUPRODUCTTYPE       SERVICIO.SERVCODI%TYPE;



        
        CNUERROR_CERO   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2868;
        
    BEGIN
        PKERRORS.PUSH( 'pkAccountMgr.ApplyBalanceByQuoteReq' );
        
        

        RCPARAFACT := PKTBLPARAFACT.FRCGETRECORD(   PKCONSTANTE.SISTEMA,
                                                    PKCONSTANTE.CACHE );

        
        DAMO_PACKAGES.ACCKEY(INUSOLICITUD);

        
        PKTBLCUENCOBR.ACCKEY(INUCUENTACBR);

        
        IF INUVALORFACT <= 0 THEN

            RETURN;

        END IF;

        
        
        GBLDEP_REQ := TRUE;

        
        GSBTIPOSAFA := PKBILLCONST.DEPOSITO;

        
        SBTIPOPROCESO := PKBILLCONST.POST_FACTURACION;

        
        RCCUENCOBR := PKTBLCUENCOBR.FRCGETRECORD(INUCUENTACBR);
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD(RCCUENCOBR.CUCONUSE);

        
        NUPRODUCTTYPE := PKTBLSERVSUSC.FNUGETSERVICE(RCSERVSUSC.SESUNUSE);

        
        NUCAUSAAPP := FA_BOCHARGECAUSES.FNUWARRDEPAPPCHCAUSE(NUPRODUCTTYPE);

        
        SBDOCSOP := PKBOSUPPORTDOCUMENTMGR.FSBGETAPPLYPOSBALANCE(INUCUENTACBR);

        
        NUSALDDISPO := PKBCMOVISAFA.FNUGETDEPBALBYREQUEST(
                                                          INUSOLICITUD,
                                                          GMOSFSAFA
                                                         );

        
        IF (NUSALDDISPO <= 0) THEN
            GBLDEP_REQ := FALSE;
            GSBTIPOSAFA :=NULL;
            PKERRORS.POP;
        	RETURN ;
        END IF ;

        
        NUVALRCOTI := CC_BOQUOTATIONMGR.FNUGETTOTALVALATTQUO_D(INUSOLICITUD);

        
        IF ISBFLAGAPP != 'P' THEN
            
            
            NUVLRAPLICAR := NUSALDDISPO;
        ELSE
            
            
            NUPORCENTAJE := (INUVALORFACT / NUVALRCOTI);
            NUVLRAPLICAR := (NUPORCENTAJE * NUSALDDISPO);
        END IF;
        
        
        IF INUVALORFACT <= NUVLRAPLICAR THEN
                NUVLRAPLICAR := INUVALORFACT;
        END IF;
        
        
        IF NUSALDDISPO <= NUVLRAPLICAR THEN
            NUVLRAPLICAR := NUSALDDISPO;
        END IF;

        
        FA_BOPOLITICAREDONDEO.APLICAPOLITICAPQT(INUSOLICITUD, NUVLRAPLICAR);

        
        PKBOPOSITIVEBALANCEPROCESSES.APPLYPOSITIVEBALANCE
        (
            RCSERVSUSC.SESUSUSC,                    
            RCSERVSUSC.SESUNUSE,                    
            INUCUENTACBR,                           
            RCPARAFACT.PAFAASAF,                    
            NUVLRAPLICAR,                           
            PKBILLCONST.APLSALDFAV,                 
            NUCAUSAAPP,                             
            SBDOCSOP,                               
            SBTIPOPROCESO,                          
            RCCUENCOBR.CUCOSACU,                    
            SYSDATE,                              
            NULL,                                   
            PKBILLCONST.APLSALDFAV,                 
            GSBTIPOSAFA,                            
            INUSOLICITUD,                            
            INUUPDATEDB
        );

        
        GSBTIPOSAFA := NULL;
        GBLDEP_REQ  := FALSE;
        GMOSFSAFA := NULL;

        PKERRORS.POP;
        EXCEPTION
            WHEN LOGIN_DENIED THEN
                GSBTIPOSAFA := NULL;
                GBLDEP_REQ := FALSE;
                PKERRORS.POP;
            	RAISE LOGIN_DENIED;
            WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
                GSBTIPOSAFA := NULL;
                GBLDEP_REQ := FALSE;
                PKERRORS.POP;
            	RAISE PKCONSTANTE.EXERROR_LEVEL2;
            WHEN OTHERS THEN
                GSBTIPOSAFA := NULL;
                GBLDEP_REQ := FALSE;
                PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            	PKERRORS.POP;
            	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END APPLYBALANCEBYQUOTEREQ;
    
    
    
















    PROCEDURE GETACCOUNTSWITHDEBTORD
    (
    	INUPRODUCT	IN	CUENCOBR.CUCONUSE%TYPE,
        OTBCUCOCODI	OUT	PKTBLCUENCOBR.TYCUCOCODI
    )
    IS
        CURSOR CUACCOUNTSWITHDEBT( INUPRODUCT CUENCOBR.CUCONUSE%TYPE )
        IS
            SELECT /*+ index (cuencobr IX_CUENCOBR03) */
                   CUCOCODI
            FROM   CUENCOBR, FACTURA /*+ pkAccountMgr.GetAccountsWithDebtOrd */
            WHERE  CUCONUSE = INUPRODUCT
            AND    CUCOFACT = FACTCODI
            AND    CUCOSACU > 0
            ORDER BY FACTFEGE ASC;

    BEGIN
        UT_TRACE.TRACE('INICIO: pkAccountMgr.GetAccountsWithDebtOrd',3);
        
        IF ( CUACCOUNTSWITHDEBT%ISOPEN ) THEN
    	   CLOSE CUACCOUNTSWITHDEBT;
        END IF ;

        
        OPEN CUACCOUNTSWITHDEBT (INUPRODUCT);
        FETCH CUACCOUNTSWITHDEBT BULK COLLECT INTO OTBCUCOCODI;
        CLOSE CUACCOUNTSWITHDEBT;
        
        UT_TRACE.TRACE('FIN: pkAccountMgr.GetAccountsWithDebtOrd',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            IF ( CUACCOUNTSWITHDEBT%ISOPEN ) THEN
        	   CLOSE CUACCOUNTSWITHDEBT;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF ( CUACCOUNTSWITHDEBT%ISOPEN ) THEN
        	   CLOSE CUACCOUNTSWITHDEBT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACCOUNTSWITHDEBTORD;
    
    
















    FUNCTION FBOVALMINAMOUNTTOGEN
    (
        INUAMOUNT   IN          CUENCOBR.CUCOVAFA%TYPE
    )RETURN BOOLEAN
    IS
    BEGIN
    
        PKERRORS.PUSH('pkAccountMgr.fboValMinAmountToGen');
        
        

        IF ( GNUVLRMINGENCTA IS NULL ) THEN
            PKERRORS.POP;
            RETURN (TRUE);
        ELSIF ( INUAMOUNT <= GNUVLRMINGENCTA ) THEN
            

            PKERRORS.POP;
        	RETURN (FALSE);
        END IF;

        PKERRORS.POP;
        RETURN (TRUE);
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END FBOVALMINAMOUNTTOGEN;
    
BEGIN
    GETPARAMETERS;
END PKACCOUNTMGR;