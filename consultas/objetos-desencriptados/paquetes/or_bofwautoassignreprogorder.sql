CREATE OR REPLACE PACKAGE BODY OR_BOFWAUTOASSIGNREPROGORDER IS
   CSBVERSION CONSTANT VARCHAR2( 10 ) := 'SAO180175';
   CNUNULL_ATTRIBUTE CONSTANT NUMBER := 2126;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE PROGRAMPROCESSJOB
    IS
      SBORDERID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBARRANGEDHOUR GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOPERATINGUNITID GE_BOINSTANCECONTROL.STYSBVALUE;
      NUOPERATINGUNITID OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
      SBASSIGNEDDATE GE_BOINSTANCECONTROL.STYSBVALUE;
      DTNEWASSIGNDATE DATE;
      DTTRUNCSYSDATE DATE;
      SBMAXPOSTPORDERDAYS GE_PARAMETER.VALUE%TYPE;
      NUMAXPOSTPORDERDAYS NUMBER;
      RCORDER DAOR_ORDER.STYOR_ORDER;
    BEGIN
      UT_TRACE.TRACE( 'INICIA - OR_BOFWAutoAssignReprogOrder.ProgramProcessJob', 15 );
      SBORDERID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'OR_ORDER', 'ORDER_ID' );
      RCORDER := DAOR_ORDER.FRCGETRECORD( TO_NUMBER( SBORDERID ) );
      SBARRANGEDHOUR := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'OR_ORDER', 'ARRANGED_HOUR' );
      IF ( RCORDER.OPERATING_UNIT_ID IS NOT NULL ) THEN
         SBOPERATINGUNITID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'OR_OPERATING_UNIT', 'NAME' );
      END IF;
      SBASSIGNEDDATE := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'OR_ORDER', 'ASSIGNED_DATE' );
      IF ( SBASSIGNEDDATE IS NULL ) THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUNULL_ATTRIBUTE, 'Fecha' );
      END IF;
      DTNEWASSIGNDATE := TRUNC( TO_DATE( SBASSIGNEDDATE, UT_DATE.FSBDATE_FORMAT ) );
      DTTRUNCSYSDATE := TRUNC( UT_DATE.FDTSYSDATE );
      BEGIN
         NUMAXPOSTPORDERDAYS := NVL( GE_BOPARAMETER.FNUVALORNUMERICO( OR_BOCONSTANTS.CSBMAXPOSTPORDERDAYS ), OR_BOCONSTANTS.CNUDEFAULTMAXPOSTPORDERDAYS );
         IF ( NUMAXPOSTPORDERDAYS < 1 OR NUMAXPOSTPORDERDAYS > OR_BOCONSTANTS.CNUDEFAULTMAXPOSTPORDERDAYS ) THEN
            NUMAXPOSTPORDERDAYS := OR_BOCONSTANTS.CNUDEFAULTMAXPOSTPORDERDAYS;
         END IF;
       EXCEPTION
         WHEN OTHERS THEN
            NUMAXPOSTPORDERDAYS := OR_BOCONSTANTS.CNUDEFAULTMAXPOSTPORDERDAYS;
      END;
      IF ( NOT DTNEWASSIGNDATE BETWEEN TRUNC( UT_DATE.FDTSYSDATE ) AND TRUNC( UT_DATE.FDTSYSDATE + NUMAXPOSTPORDERDAYS ) ) THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( 900891, 'Fecha de programacion|' || TO_CHAR( TRUNC( UT_DATE.FDTSYSDATE ), UT_DATE.FSBDATE_FORMAT ) || '|' || TO_CHAR( TRUNC( UT_DATE.FDTSYSDATE + NUMAXPOSTPORDERDAYS ), UT_DATE.FSBDATE_FORMAT ) );
      END IF;
      IF ( RCORDER.OPERATING_UNIT_ID IS NULL ) THEN
         IF ( DTNEWASSIGNDATE = DTTRUNCSYSDATE ) THEN
            OR_BOORDERTRANSITION.CHANGESTATUS( RCORDER, OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN, OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED, FALSE );
            RCORDER.ASSIGNED_DATE := NULL;
            OR_BOPROCESSORDER.UPDBASICDATA( RCORDER, NULL, NULL );
          ELSE
            RCORDER.ASSIGNED_DATE := DTNEWASSIGNDATE;
         END IF;
         DAOR_ORDER.UPDRECORD( RCORDER );
       ELSE
         NUOPERATINGUNITID := SUBSTR( SBOPERATINGUNITID, 0, INSTR( SBOPERATINGUNITID, '-' ) - 1 );
         IF ( DTNEWASSIGNDATE = DTTRUNCSYSDATE ) THEN
            OR_BOORDERTRANSITION.CHANGESTATUS( RCORDER, OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN, OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED, FALSE );
            DAOR_ORDER.UPDRECORD( RCORDER );
            OR_BOPROCESSORDER.PROCESSORDER( RCORDER.ORDER_ID, NULL, NUOPERATINGUNITID, UT_DATE.FDTSYSDATE, TRUE );
            IF ( DAOR_ORDER.FNUGETORDER_STATUS_ID( RCORDER.ORDER_ID ) = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED ) THEN
               RCORDER.ASSIGNED_DATE := NULL;
               RCORDER.OPERATING_UNIT_ID := NULL;
               DAOR_ORDER.UPDRECORD( RCORDER );
            END IF;
          ELSE
            RCORDER.ASSIGNED_DATE := DTNEWASSIGNDATE;
            DAOR_ORDER.UPDRECORD( RCORDER );
         END IF;
      END IF;
      COMMIT;
      UT_TRACE.TRACE( 'FIN -  OR_BOFWAutoAssignReprogOrder.ProgramProcessJob', 15 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VALIDATEORDERSTATUS
    IS
      NUORDERID OR_ORDER.ORDER_ID%TYPE;
      RCORDER DAOR_ORDER.STYOR_ORDER;
      SBISVALID OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE;
    BEGIN
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE, NULL, 'OR_ORDER', 'ORDER_ID', NUORDERID );
      OR_BCORDERPROCESS.LOCKORDER( NUORDERID );
      RCORDER := DAOR_ORDER.FRCGETRECORD( NUORDERID );
      IF ( RCORDER.STAGE_ID IS NOT NULL ) THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( 900871, NUORDERID );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALIDATEORDERSTATUS;
   FUNCTION FSBGETPROGRAMINGDATE
    RETURN VARCHAR2
    IS
      NUORDERID OR_ORDER.ORDER_ID%TYPE;
      RCORDER DAOR_ORDER.STYOR_ORDER;
    BEGIN
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE, NULL, 'OR_ORDER', 'ORDER_ID', NUORDERID );
      RCORDER := DAOR_ORDER.FRCGETRECORD( NUORDERID );
      RETURN TO_CHAR( RCORDER.ASSIGNED_DATE, UT_DATE.FSBDATE_FORMAT );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBGETOPERUNIT
    RETURN VARCHAR2
    IS
      NUORDERID OR_ORDER.ORDER_ID%TYPE;
      RCORDER DAOR_ORDER.STYOR_ORDER;
      SBOPERUNIT GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE, NULL, 'OR_ORDER', 'ORDER_ID', NUORDERID );
      RCORDER := DAOR_ORDER.FRCGETRECORD( NUORDERID );
      IF ( RCORDER.OPERATING_UNIT_ID IS NOT NULL ) THEN
         SBOPERUNIT := RCORDER.OPERATING_UNIT_ID || ' - ' || DAOR_OPERATING_UNIT.FSBGETNAME( RCORDER.OPERATING_UNIT_ID );
      END IF;
      RETURN SBOPERUNIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXECUTEPROCESS
    IS
      RCORDER DAOR_ORDER.STYOR_ORDER;
      DTTRUNCSYSDATE DATE;
      CURSOR CUPROGRAMORDERS IS
SELECT  /*+ index (or_order IDX_OR_ORDER_06) */
                    OR_order.*, rowid
            FROM    OR_order /*+ OR_BOFWAutoAssignReprogOrder.ExecuteProcess  SAO179855 */
            WHERE   trunc(assigned_date) <= dtTruncSysdate
            AND     order_status_id = or_boconstants.cnuORDER_STAT_PLANNED
            AND     stage_id IS null;
    BEGIN
      UT_TRACE.TRACE( 'INICIA - OR_BOFWAutoAssignReprogOrder.ExecuteProcess ', 15 );
      DTTRUNCSYSDATE := TRUNC( UT_DATE.FDTSYSDATE );
      IF ( CUPROGRAMORDERS%ISOPEN ) THEN
         CLOSE CUPROGRAMORDERS;
      END IF;
      OPEN CUPROGRAMORDERS;
      FETCH CUPROGRAMORDERS
         INTO RCORDER;
      WHILE ( CUPROGRAMORDERS%FOUND )
       LOOP
         OR_BOORDERTRANSITION.CHANGESTATUS( RCORDER, OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN, OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED, FALSE );
         RCORDER.ASSIGNED_DATE := NULL;
         DAOR_ORDER.UPDRECORD( RCORDER );
         IF ( RCORDER.OPERATING_UNIT_ID IS NOT NULL ) THEN
            OR_BOPROCESSORDER.PROCESSORDER( RCORDER.ORDER_ID, NULL, RCORDER.OPERATING_UNIT_ID );
         END IF;
         FETCH CUPROGRAMORDERS
            INTO RCORDER;
      END LOOP;
      CLOSE CUPROGRAMORDERS;
      UT_TRACE.TRACE( 'FIN - OR_BOFWAutoAssignReprogOrder.ExecuteProcess ', 15 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUPROGRAMORDERS%ISOPEN ) THEN
            CLOSE CUPROGRAMORDERS;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         IF ( CUPROGRAMORDERS%ISOPEN ) THEN
            CLOSE CUPROGRAMORDERS;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
   END;
END OR_BOFWAUTOASSIGNREPROGORDER;
/


