
CREATE OR REPLACE PACKAGE BODY IN_BOINTERFACE_HISTORY IS
   CNURECORD_NOT_EXIST CONSTANT NUMBER := CONSTANTS.CNURECORD_NOT_EXIST;
   CNUNOT_EXIST CONSTANT NUMBER( 4 ) := 3523;
   CNUONE CONSTANT NUMBER( 1 ) := 1;
   CNUMESSAGENOSELECTED CONSTANT NUMBER( 4 ) := 1412;
   CNUNOT_REC_STA_UPDATE CONSTANT NUMBER( 4 ) := 2183;
   SUBTYPE STYIN_INTERFACE_HISTORY IS DAIN_INTERFACE_HISTORY.STYIN_INTERFACE_HISTORY;
   SBREGISINTERHISTO IN_INTERFACE_MESSAGE.REGIST_INTER_HISTORY%TYPE := IN_BOPARAMETER.FSBGETYES;
   NUCURREOPERAMODE IN_INTERFACE_TYPE.CURRE_OPERAT_MODE_ID%TYPE := NULL;
   NUHISTORYGROUP IN_INTERFACE_HISTORY.HISTORY_GROUP_ID%TYPE := NULL;
   PROCEDURE INSMESSAGE( IONUINTERHISTOID IN OUT IN_INTERFACE_HISTORY.INTERFACE_HISTORY_ID%TYPE, ITYOBMESSAGESTRUCT IN OUT IN_TYOBMESSAGESTRUCT, IRCINTERFACEMESSAGE IN STYIN_INTERFACE_MESSAGE, INUSTATUS IN IN_STATUS.STATUS_ID%TYPE, INUACTION IN IN_STATUS_TRANSITION.ACTION_ID%TYPE, INUMESSAGECODE IN IN_INTERFACE_HISTORY.LAST_MESS_CODE_ERROR%TYPE, ISBMESSAGEERRORS IN IN_INTERFACE_HISTORY.LAST_MESS_DESC_ERROR%TYPE )
    IS
      RCINTERFACE_HISTORY STYIN_INTERFACE_HISTORY;
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      IF ( SBREGISINTERHISTO != IN_BOPARAMETER.FSBGETYES ) THEN
         COMMIT;
         RETURN;
      END IF;
      RCINTERFACE_HISTORY.CURRE_OPERAT_MODE_ID := NUCURREOPERAMODE;
      IONUINTERHISTOID := IN_BOSEQUENCE.FNUGETSEQ_IN_INTERFACE_HISTORY;
      RCINTERFACE_HISTORY.INTERFACE_HISTORY_ID := IONUINTERHISTOID;
      RCINTERFACE_HISTORY.STATUS_ID := INUSTATUS;
      RCINTERFACE_HISTORY.INSERTING_DATE := SYSDATE;
      RCINTERFACE_HISTORY.ATTEMPTS_NUMBER := IN_BOCONSTANT.CNUZERO;
      RCINTERFACE_HISTORY.RECEPTION_DATE := SYSDATE;
      RCINTERFACE_HISTORY.INTERFACE_MESSAGE_ID := ITYOBMESSAGESTRUCT.INTERFACE_MESSAGE_ID;
      RCINTERFACE_HISTORY.CHECKSUM := ITYOBMESSAGESTRUCT.CHECKSUM;
      RCINTERFACE_HISTORY.INTERFACE_DATA := ITYOBMESSAGESTRUCT.INTERFACE_DATA;
      IF NOT ( UT_LOB.BLLOBCLOB_ISNULL( ITYOBMESSAGESTRUCT.INTERFACE_DATA_C ) ) THEN
         UT_LOB.LOBCLOB_ISOPENCLOSE( RCINTERFACE_HISTORY.INTERFACE_DATA_C );
         UT_LOB.LOBCLOB_ISOPENCLOSE( ITYOBMESSAGESTRUCT.INTERFACE_DATA_C );
         UT_LOB.LOBCLOB_COPY( RCINTERFACE_HISTORY.INTERFACE_DATA_C, ITYOBMESSAGESTRUCT.INTERFACE_DATA_C );
      END IF;
      RCINTERFACE_HISTORY.SEND_DATE_ORIGIN := ITYOBMESSAGESTRUCT.SEND_DATE_ORIGIN;
      RCINTERFACE_HISTORY.REQU_RECE_DATE_ORIGI := ITYOBMESSAGESTRUCT.REQU_RECE_DATE_ORIGI;
      RCINTERFACE_HISTORY.REQUEST_NUMBER_ORIGI := ITYOBMESSAGESTRUCT.REQUEST_NUMBER_ORIGI;
      RCINTERFACE_HISTORY.EXTERNAL_USER := ITYOBMESSAGESTRUCT.EXTERNAL_USER;
      RCINTERFACE_HISTORY.EXTERNAL_TERMINAL := ITYOBMESSAGESTRUCT.EXTERNAL_TERMINAL;
      RCINTERFACE_HISTORY.QUEUE_ID := ITYOBMESSAGESTRUCT.QUEUE_ID;
      RCINTERFACE_HISTORY.VALIDA_DOCUME_SELECT := ITYOBMESSAGESTRUCT.VALIDA_DOCUME_SELECT;
      RCINTERFACE_HISTORY.MESS_DESC_ERROR_ORIG := ITYOBMESSAGESTRUCT.ANSWER_MESSAGE;
      RCINTERFACE_HISTORY.MESS_CODE_ERROR_ORIG := ITYOBMESSAGESTRUCT.ANSWER_MESSAGE_CODE;
      RCINTERFACE_HISTORY.INTERFACE_MESSAGE_ID := IRCINTERFACEMESSAGE.INTERFACE_MESSAGE_ID;
      RCINTERFACE_HISTORY.ORIGIN_MODULE_ID := IRCINTERFACEMESSAGE.ORIGIN_MODULE_ID;
      RCINTERFACE_HISTORY.TARGET_MODULE_ID := IRCINTERFACEMESSAGE.TARGET_MODULE_ID;
      RCINTERFACE_HISTORY.GENERATES_ANSWER := IRCINTERFACEMESSAGE.GENERATES_ANSWER;
      RCINTERFACE_HISTORY.ANSWER_MESSAGE_ID := IRCINTERFACEMESSAGE.ANSWER_MESSAGE_ID;
      RCINTERFACE_HISTORY.INTERFACE_QUEUE_ID := IRCINTERFACEMESSAGE.INTERFACE_QUEUE_ID;
      RCINTERFACE_HISTORY.VALIDATE_XML_ID := IRCINTERFACEMESSAGE.VALIDATE_XML_ID;
      RCINTERFACE_HISTORY.MESSAGE_TYPE_ID := IRCINTERFACEMESSAGE.MESSAGE_TYPE_ID;
      RCINTERFACE_HISTORY.ERROR_MESSAGE_ID := IRCINTERFACEMESSAGE.ERROR_MESSAGE_ID;
      RCINTERFACE_HISTORY.INTERFACE_TYPE_ID := IRCINTERFACEMESSAGE.INTERFACE_TYPE_ID;
      RCINTERFACE_HISTORY.INTER_MESSA_GROUP_ID := IRCINTERFACEMESSAGE.INTER_MESSA_GROUP_ID;
      RCINTERFACE_HISTORY.TARGET_MODULE_EXP_ID := IRCINTERFACEMESSAGE.TARGET_MODULE_EXP_ID;
      RCINTERFACE_HISTORY.VALI_DOC_SELE_EXP_ID := IRCINTERFACEMESSAGE.VALI_DOC_SELE_EXP_ID;
      RCINTERFACE_HISTORY.CHECKSUM_VALIDATE := IRCINTERFACEMESSAGE.CHECKSUM_VALIDATE;
      RCINTERFACE_HISTORY.DATA_TYPE := ITYOBMESSAGESTRUCT.DATA_TYPE;
      RCINTERFACE_HISTORY.CONTENT_TYPE := IRCINTERFACEMESSAGE.CONTENT_TYPE;
      RCINTERFACE_HISTORY.PRIORITY := IRCINTERFACEMESSAGE.PRIORITY;
      RCINTERFACE_HISTORY.EXTER_USER_VALIDATE := IRCINTERFACEMESSAGE.EXTER_USER_VALIDATE;
      RCINTERFACE_HISTORY.USE_VALID_DOCU_SELEC := IRCINTERFACEMESSAGE.USE_VALID_DOCU_SELEC;
      RCINTERFACE_HISTORY.REGIST_INTER_HISTORY := IRCINTERFACEMESSAGE.REGIST_INTER_HISTORY;
      RCINTERFACE_HISTORY.LAST_MESS_CODE_ERROR := INUMESSAGECODE;
      RCINTERFACE_HISTORY.LAST_MESS_DESC_ERROR := ISBMESSAGEERRORS;
      RCINTERFACE_HISTORY.HISTORY_GROUP_ID := NUHISTORYGROUP;
      DAIN_INTERFACE_HISTORY.INSRECORD( RCINTERFACE_HISTORY );
      UT_LOB.LOBCLOB_ISOPENCLOSE( RCINTERFACE_HISTORY.INTERFACE_DATA_C );
      UT_LOB.LOBCLOB_ISOPENCLOSE( ITYOBMESSAGESTRUCT.INTERFACE_DATA_C );
      UT_LOB.LOBCLOB_ISTEMPORARYFREE( RCINTERFACE_HISTORY.INTERFACE_DATA_C );
      GE_BOACTION_LOG.INSACTIONLOG( IN_BOPARAMETER.FNUGETENTITY_INTERF_HISTOR, IONUINTERHISTOID, IN_BOPARAMETER.FNUGETINTERFACE_MODULE, INUACTION, INUMESSAGECODE, ISBMESSAGEERRORS );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         UT_LOB.LOBCLOB_ISOPENCLOSE( RCINTERFACE_HISTORY.INTERFACE_DATA_C );
         UT_LOB.LOBCLOB_ISOPENCLOSE( ITYOBMESSAGESTRUCT.INTERFACE_DATA_C );
         UT_LOB.LOBCLOB_ISTEMPORARYFREE( RCINTERFACE_HISTORY.INTERFACE_DATA_C );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         UT_LOB.LOBCLOB_ISOPENCLOSE( RCINTERFACE_HISTORY.INTERFACE_DATA_C );
         UT_LOB.LOBCLOB_ISOPENCLOSE( ITYOBMESSAGESTRUCT.INTERFACE_DATA_C );
         UT_LOB.LOBCLOB_ISTEMPORARYFREE( RCINTERFACE_HISTORY.INTERFACE_DATA_C );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSMESSAGE;
   PROCEDURE UPDMESSAGESTATUS( INUINTERHISTOID IN IN_INTERFACE_HISTORY.INTERFACE_HISTORY_ID%TYPE, INUSTATUS IN IN_INTERFACE_HISTORY.STATUS_ID%TYPE, INUACTION IN IN_STATUS_TRANSITION.ACTION_ID%TYPE, INUMESSAGECODE IN IN_INTERFACE_HISTORY.LAST_MESS_CODE_ERROR%TYPE, ISBMESSAGEERRORS IN IN_INTERFACE_HISTORY.LAST_MESS_DESC_ERROR%TYPE, IRWQUEUEID IN IN_INTERFACE_HISTORY.QUEUE_ID%TYPE := NULL, INUASSOCINTERHISTORYID IN IN_INTERFACE_HISTORY.ASSOC_INTER_HISTO_ID%TYPE := NULL )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      IF ( SBREGISINTERHISTO != IN_BOPARAMETER.FSBGETYES ) THEN
         COMMIT;
         RETURN;
      END IF;
      DAIN_STATUS.ACCKEY( INUSTATUS );
      UPDATE in_Interface_History   
        SET  status_id            = inuStatus,   
             queue_id      = decode(irwQueueID, NULL, queue_id, irwQueueID),   
             last_mess_code_error =   
                    decode(inuMessageCode, NULL,   
                           last_mess_code_error, inuMessageCode),   
             last_mess_desc_error =   
                    decode(isbMessageErrors, NULL,   
                           last_mess_desc_error, isbMessageErrors),   
             assoc_inter_histo_id  =   
                    decode(inuAssocInterHistoryId, NULL,   
                           assoc_inter_histo_id, inuAssocInterHistoryId)   
        WHERE   Interface_History_id = inuInterHistoId;
      IF ( SQL%NOTFOUND ) THEN
         ROLLBACK;
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, DAIN_INTERFACE_HISTORY.FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      GE_BOACTION_LOG.INSACTIONLOG( IN_BOPARAMETER.FNUGETENTITY_INTERF_HISTOR, INUINTERHISTOID, IN_BOPARAMETER.FNUGETINTERFACE_MODULE, INUACTION, INUMESSAGECODE, ISBMESSAGEERRORS );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDMESSAGESTATUS;
   PROCEDURE UPDMESSAGEREPROCESS( INUINTERHISTOID IN IN_INTERFACE_HISTORY.INTERFACE_HISTORY_ID%TYPE, ITYOBMESSAGESTRUCT IN OUT IN_TYOBMESSAGESTRUCT, IRCINTERFACEMESSAGE IN STYIN_INTERFACE_MESSAGE, INUSTATUS IN IN_STATUS.STATUS_ID%TYPE, INUACTION IN IN_STATUS_TRANSITION.ACTION_ID%TYPE, INUMESSAGECODE IN IN_INTERFACE_HISTORY.LAST_MESS_CODE_ERROR%TYPE, ISBMESSAGEERRORS IN IN_INTERFACE_HISTORY.LAST_MESS_DESC_ERROR%TYPE )
    IS
      RCINTERFACE_HISTORY STYIN_INTERFACE_HISTORY;
      NUATTEMPTNUMBER IN_INTERFACE_HISTORY.ATTEMPTS_NUMBER%TYPE;
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      IF ( SBREGISINTERHISTO != IN_BOPARAMETER.FSBGETYES ) THEN
         COMMIT;
         RETURN;
      END IF;
      NUATTEMPTNUMBER := NVL( DAIN_INTERFACE_HISTORY.FNUGETATTEMPTS_NUMBER( INUINTERHISTOID ), IN_BOCONSTANT.CNUZERO ) + CNUONE;
      UPDATE in_interface_history   
        SET   
            interface_message_id = ircInterfaceMessage.interface_message_id,   
            origin_module_id = ircInterfaceMessage.origin_module_id,   
            target_module_id = ircInterfaceMessage.target_module_id,   
            generates_answer = ircInterfaceMessage.generates_answer,   
            answer_message_id = ircInterfaceMessage.answer_message_id,   
            interface_queue_id = ircInterfaceMessage.interface_queue_id,   
            validate_xml_id = ircInterfaceMessage.validate_xml_id,   
            message_type_id = ircInterfaceMessage.message_type_id,   
            error_message_id = ircInterfaceMessage.error_message_id,   
            interface_type_id = ircInterfaceMessage.interface_type_id,   
            inter_messa_group_id = ircInterfaceMessage.inter_messa_group_id,   
            target_module_exp_id = ircInterfaceMessage.target_module_exp_id,   
            vali_doc_sele_exp_id = ircInterfaceMessage.vali_doc_sele_exp_id,   
            checksum_validate = ircInterfaceMessage.checksum_validate,   
            data_type = ityobMessageStruct.data_type,
            content_type = ircInterfaceMessage.content_type,   
            priority = ircInterfaceMessage.priority,   
            exter_user_validate = ircInterfaceMessage.exter_user_validate,   
            use_valid_docu_selec = ircInterfaceMessage.use_valid_docu_selec,   
            regist_inter_history = ircInterfaceMessage.regist_inter_history,   
            Attempts_number = nuAttemptNumber,   
            curre_operat_mode_id = nuCurreOperaMode,   
            status_id = inuStatus,
            last_mess_code_error = inuMessageCode,   
            last_mess_desc_error = isbMessageErrors   
        WHERE  interface_history_id = inuInterHistoId;
      GE_BOACTION_LOG.INSACTIONLOG( IN_BOPARAMETER.FNUGETENTITY_INTERF_HISTOR, INUINTERHISTOID, IN_BOPARAMETER.FNUGETINTERFACE_MODULE, INUACTION, INUMESSAGECODE, ISBMESSAGEERRORS );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDMESSAGEREPROCESS;
   PROCEDURE SELRECORD( INUINTERHISTOID IN IN_INTERFACE_HISTORY.INTERFACE_HISTORY_ID%TYPE, ORCINTERFACEHISTORY OUT IN_INTERFACE_HISTORY%ROWTYPE )
    IS
      CURSOR CUINTERFACEHISTORY( NUINTERFACEHISTOID IN IN_INTERFACE_HISTORY.INTERFACE_HISTORY_ID%TYPE ) IS
SELECT * FROM in_Interface_History   
            where Interface_History_id = nuInterfaceHistoId;
    BEGIN
      OPEN CUINTERFACEHISTORY( INUINTERHISTOID );
      FETCH CUINTERFACEHISTORY
         INTO ORCINTERFACEHISTORY;
      IF ( CUINTERFACEHISTORY%NOTFOUND ) THEN
         CLOSE CUINTERFACEHISTORY;
         ERRORS.SETERROR( CNUNOT_EXIST, INUINTERHISTOID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUINTERFACEHISTORY%ISOPEN ) THEN
            CLOSE CUINTERFACEHISTORY;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( CUINTERFACEHISTORY%ISOPEN ) THEN
            CLOSE CUINTERFACEHISTORY;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SELRECORD;
   PROCEDURE SETREGISINTERHISTO( ISBREGISINTERHISTO IN IN_INTERFACE_MESSAGE.REGIST_INTER_HISTORY%TYPE, INUCURREOPERAMODE IN IN_INTERFACE_TYPE.CURRE_OPERAT_MODE_ID%TYPE )
    IS
    BEGIN
      SBREGISINTERHISTO := ISBREGISINTERHISTO;
      NUCURREOPERAMODE := INUCURREOPERAMODE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETREGISINTERHISTO;
   PROCEDURE SETHISTORYGROUP( INUHISTORYGROUP IN IN_INTERFACE_HISTORY.HISTORY_GROUP_ID%TYPE )
    IS
    BEGIN
      NUHISTORYGROUP := INUHISTORYGROUP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETHISTORYGROUP;
   PROCEDURE GETHISTORYGROUP( ONUHISTORYGROUP OUT IN_INTERFACE_HISTORY.HISTORY_GROUP_ID%TYPE )
    IS
    BEGIN
      ONUHISTORYGROUP := NUHISTORYGROUP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETHISTORYGROUP;
   PROCEDURE RECORDSELECTION( INUHISTORY_GROUP_ID IN IN_INTERFACE_HISTORY.HISTORY_GROUP_ID%TYPE, INUSTATUS_ID IN IN_STATUS.STATUS_ID%TYPE, INURECORDS_PROCESS IN NUMBER, INUOPERATION_MODE_ID IN IN_INTERFACE_HISTORY.CURRE_OPERAT_MODE_ID%TYPE, OTYQUEUE_ID OUT TYTBQUEUE_ID, OTYINTERFACE_MESSAGE_ID OUT TYTBINTERFACE_MESSAGE_ID, OTYCHECKSUM OUT TYTBCHECKSUM, OTYMESS_CODE_ERROR_ORIG OUT TYTBMESS_CODE_ERROR_ORIG, OTYMESS_DESC_ERROR_ORIG OUT TYTBMESS_DESC_ERROR_ORIG, OTYEXTERNAL_USER OUT TYTBEXTERNAL_USER, OTYEXTERNAL_TERMINAL OUT TYTBEXTERNAL_TERMINAL, OTYSEND_DATE_ORIGIN OUT TYTBSEND_DATE_ORIGIN, OTYREQU_RECE_DATE_ORIGI OUT TYTBREQU_RECE_DATE_ORIGI, OTYREQUEST_NUMBER_ORIGI OUT TYTBREQUEST_NUMBER_ORIGI, OTYVALIDA_DOCUME_SELECT OUT TYTBVALIDA_DOCUME_SELECT, OTYINTERFACE_DATA OUT TYTBINTERFACE_DATA, OTYINTERFACE_HISTORY_ID OUT TYTBINTERFACE_HISTORY_ID, OTYDATA_TYPE OUT TYTBDATA_TYPE, OTYROWID OUT TYTBROWID )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      UPDATE In_Interface_History   
           SET Attempts_Number = nvl ( Attempts_Number, In_BOConstant.cnuZERO   
                                     ) + 1,   
               History_Group_Id = inuHistory_Group_Id,   
               Curre_Operat_Mode_id = inuOperation_Mode_Id   
        WHERE  Status_Id = inuStatus_Id 
          AND  rownum <= inuRecords_Process 
        RETURNING  Queue_Id,             Interface_Message_Id, Checksum, 
                   Mess_Code_Error_Orig, Mess_Desc_Error_Orig,   
                   External_User,        External_Terminal,    Send_Date_Origin,   
                   Requ_Rece_Date_Origi, Request_Number_Origi,   
                   Valida_Docume_Select, Interface_Data,       Rowid,   
                   Interface_History_Id, Data_Type   
        BULK COLLECT INTO otyQueue_Id, otyINTERFACE_MESSAGE_ID, otyCHECKSUM,   
                otyMESS_CODE_ERROR_ORIG, otyMESS_DESC_ERROR_ORIG,   
                otyEXTERNAL_USER, otyEXTERNAL_TERMINAL, otySEND_DATE_ORIGIN,   
                otyREQU_RECE_DATE_ORIGI, otyREQUEST_NUMBER_ORIGI,   
                otyVALIDA_DOCUME_SELECT, otyINTERFACE_DATA, otyROWID,   
                otyINTERFACE_HISTORY_ID, otyDATA_TYPE;
      IF OTYINTERFACE_HISTORY_ID.COUNT = IN_BOCONSTANT.CNUZERO THEN
         ERRORS.SETERROR( CNUMESSAGENOSELECTED );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END RECORDSELECTION;
   PROCEDURE UPDATESTATUSRECORDS( INUHISTORY_GROUP_ID IN NUMBER, INUSTATUS IN NUMBER )
    IS
    BEGIN
      UPDATE In_Interface_History  
            SET Status_id = inuStatus  
        WHERE History_Group_Id = inuHistory_Group_Id;
      IF ( SQL%NOTFOUND ) THEN
         ERRORS.SETERROR( CNUNOT_REC_STA_UPDATE, INUHISTORY_GROUP_ID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDATESTATUSRECORDS;
   PROCEDURE DELHISTORYGROUP( INUHISTORYGROUP IN IN_INTERFACE_HISTORY.HISTORY_GROUP_ID%TYPE )
    IS
    BEGIN
      DELETE in_interface_history  
        WHERE history_group_id = inuHistoryGroup;
      IF SQL%NOTFOUND THEN
         NULL;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DELHISTORYGROUP;
   PROCEDURE GETLASTMESSERROR( INUINTERFACEHISTORY IN IN_INTERFACE_HISTORY.INTERFACE_HISTORY_ID%TYPE, ONULASTMESSCODEERROR OUT IN_INTERFACE_HISTORY.LAST_MESS_CODE_ERROR%TYPE, OSBLASTMESSDESCERROR OUT IN_INTERFACE_HISTORY.LAST_MESS_DESC_ERROR%TYPE )
    IS
    BEGIN
      ONULASTMESSCODEERROR := DAIN_INTERFACE_HISTORY.FNUGETMESS_CODE_ERROR_ORIG( INUINTERFACEHISTORY );
      OSBLASTMESSDESCERROR := DAIN_INTERFACE_HISTORY.FSBGETLAST_MESS_DESC_ERROR( INUINTERFACEHISTORY );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETLASTMESSERROR;
   FUNCTION GETINTERFACEDATAC( INUINTERFACEHISTORY IN IN_INTERFACE_HISTORY.INTERFACE_HISTORY_ID%TYPE )
    RETURN VARCHAR2
    IS
      CLINTERFACE_DATA_C IN_INTERFACE_HISTORY.INTERFACE_DATA_C%TYPE := EMPTY_CLOB;
      SBRETURN VARCHAR2( 32000 );
    BEGIN
      CLINTERFACE_DATA_C := DAIN_INTERFACE_HISTORY.FCLGETINTERFACE_DATA_C( INUINTERFACEHISTORY );
      SBRETURN := UT_LOB.GETVARCHAR2( CLINTERFACE_DATA_C );
      RETURN SBRETURN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETINTERFACEDATAC;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
END IN_BOINTERFACE_HISTORY;
/


