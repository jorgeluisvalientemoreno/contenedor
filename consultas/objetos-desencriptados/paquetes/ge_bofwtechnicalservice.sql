
CREATE OR REPLACE PACKAGE BODY GE_BOFWTECHNICALSERVICE IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO187516';
   CNUERR_AVAILABLE CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 122263;
   CNUERR_RETURNITEMS CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 10730;
   CNUERR_STATUSNOVALID CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 143445;
   CNUERR_ALLITEMS CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901228;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION FRFITEMSRETURN
    RETURN CONSTANTS.TYREFCURSOR
    IS
      SBPACKAGEID GE_BOINSTANCECONTROL.STYSBVALUE;
      NUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE;
      RFITEMS CONSTANTS.TYREFCURSOR;
    BEGIN
      UT_TRACE.TRACE( 'INICIO GE_BOFWItemsTraslado.frfItemsReturn', 10 );
      SBPACKAGEID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'MO_PACKAGES', 'PACKAGE_ID' );
      NUPACKAGEID := TO_NUMBER( SBPACKAGEID );
      RFITEMS := GE_BOTECHNICALSERVICE.FRFGETITEMSRETURN( NUPACKAGEID );
      UT_TRACE.TRACE( 'FIN GE_BOFWItemsTraslado.frfItemsReturn', 10 );
      RETURN RFITEMS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FRFITEMSRETURN;
   PROCEDURE RETURNITEMS( INUSERIALITEMID IN GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE, INUCURRENT IN NUMBER, INUTOTAL IN NUMBER, ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE, OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
      SBPACKAGEID GE_BOINSTANCECONTROL.STYSBVALUE;
      NUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE;
      SBOPERATINGUNITID GE_BOINSTANCECONTROL.STYSBVALUE;
      NUOPERATINGUNITID MO_PACKAGES.PACKAGE_ID%TYPE;
      BLNOTIFYWF BOOLEAN;
      RFITEMS CONSTANTS.TYREFCURSOR;
      TBOPERUNIT DAOR_OPERATING_UNIT.TYTBOPERATING_UNIT_ID;
      TBRETURNITEMS TYTBRETURNITEMS;
    BEGIN
      UT_TRACE.TRACE( 'INICIO GE_BOFWTechnicalService.ReturnItems', 10 );
      SBPACKAGEID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'MO_PACKAGES', 'PACKAGE_ID' );
      NUPACKAGEID := TO_NUMBER( SBPACKAGEID );
      SBOPERATINGUNITID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'OR_OPERATING_UNIT', 'OPERATING_UNIT_ID' );
      NUOPERATINGUNITID := TO_NUMBER( SBOPERATINGUNITID );
      UT_TRACE.TRACE( 'Item Seriado [' || INUSERIALITEMID || '], Solicitud [' || NUPACKAGEID || '], Unidad Operativa [' || NUOPERATINGUNITID || ']', 10 );
      IF ( INUCURRENT = 1 ) THEN
         UT_TRACE.TRACE( 'Primer Item', 10 );
         RFITEMS := GE_BOTECHNICALSERVICE.FRFGETITEMSRETURN( NUPACKAGEID );
         FETCH RFITEMS
            BULK COLLECT INTO TBRETURNITEMS;
         CLOSE RFITEMS;
         IF TBRETURNITEMS.COUNT > INUTOTAL THEN
            UT_TRACE.TRACE( 'No se seleccionaron todos los equipos', 10 );
            ERRORS.SETERROR( CNUERR_ALLITEMS, NUPACKAGEID );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
      IF ( INUCURRENT = INUTOTAL ) THEN
         UT_TRACE.TRACE( 'Ultimo Item', 10 );
         BLNOTIFYWF := TRUE;
       ELSE
         BLNOTIFYWF := FALSE;
      END IF;
      GE_BOTECHNICALSERVICE.RETURNITEMS( NUPACKAGEID, INUSERIALITEMID, NUOPERATINGUNITID, BLNOTIFYWF, ONUERRORCODE, OSBERRORMESS );
      PKGENERALSERVICES.COMMITTRANSACTION;
      UT_TRACE.TRACE( 'FIN GE_BOFWTechnicalService.ReturnItems', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR GE_BOFWTechnicalService.ReturnItems', 10 );
         PKGENERALSERVICES.ROLLBACKTRANSACTION;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others GE_BOFWTechnicalService.ReturnItems', 10 );
         PKGENERALSERVICES.ROLLBACKTRANSACTION;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END RETURNITEMS;
   PROCEDURE VALIDATERETURNITEMS
    IS
      SBINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      SBPACKAGEID GE_BOUTILITIES.STYSTATEMENT;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      NUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE;
      RFITEMS CONSTANTS.TYREFCURSOR;
      NUPERSONID GE_PERSON.PERSON_ID%TYPE;
      TBOPERUNIT DAOR_OPERATING_UNIT.TYTBOPERATING_UNIT_ID;
      TBRETURNITEMS TYTBRETURNITEMS;
    BEGIN
      UT_TRACE.TRACE( 'INICIO GE_BOFWTechnicalService.ValidateReturnItems', 10 );
      GE_BOINSTANCECONTROL.ACCKEYATTRIBUTESTACK( 'WORK_INSTANCE', NULL, 'MO_PACKAGES', 'PACKAGE_ID', NUINDEX );
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( 'WORK_INSTANCE', NULL, 'MO_PACKAGES', 'PACKAGE_ID', SBPACKAGEID );
      NUPACKAGEID := UT_CONVERT.FNUCHARTONUMBER( SBPACKAGEID );
      IF MO_BOPACKAGES.FBLISFINALSTATUS( NUPACKAGEID ) THEN
         UT_TRACE.TRACE( 'La solictud se encuentra en un estado no valido', 10 );
         ERRORS.SETERROR( CNUERR_STATUSNOVALID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      RFITEMS := GE_BOTECHNICALSERVICE.FRFGETITEMSRETURN( NUPACKAGEID );
      FETCH RFITEMS
         BULK COLLECT INTO TBRETURNITEMS;
      CLOSE RFITEMS;
      IF TBRETURNITEMS.COUNT = 0 THEN
         UT_TRACE.TRACE( 'No existe equipos a entregar en esta solicitud', 10 );
         ERRORS.SETERROR( CNUERR_RETURNITEMS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUPERSONID := GE_BOPERSONAL.FNUGETPERSONID;
      TBOPERUNIT := OR_BCOPERATINGUNIT.FTBGETOPEUNIBYPERSON( NUPERSONID, OR_BOCONSTANTS.CNULABORATORYCLASSIF );
      IF ( TBOPERUNIT.COUNT = 0 ) THEN
         UT_TRACE.TRACE( 'No se  encontro una unidad de tipo laboratorio asociada al usuario conectado', 10 );
         ERRORS.SETERROR( CNUERR_AVAILABLE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      GE_BOINSTANCECONTROL.GETCURRENTINSTANCE( SBINSTANCE );
      GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( SBINSTANCE, NULL, 'MO_PACKAGES', 'PACKAGE_ID', NUPACKAGEID );
      UT_TRACE.TRACE( 'FIN GE_BOFWTechnicalService.ValidateReturnItems', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'ERROR - CONTROLLED_ERROR GE_BOFWTechnicalService.ValidateReturnItems', 10 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'ERROR - OTHERS GE_BOFWTechnicalService.ValidateReturnItems', 10 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALIDATERETURNITEMS;
   PROCEDURE GETOPERATINGUNITLABLOV( ORFOPERATINGUNIT IN OUT NOCOPY CONSTANTS.TYREFCURSOR )
    IS
      NUPERSONID GE_PERSON.PERSON_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INICIO GE_BOFWTechnicalService.GetOperatingUnitLabLOV', 10 );
      NUPERSONID := GE_BOPERSONAL.FNUGETPERSONID;
      ORFOPERATINGUNIT := OR_BCOPERATINGUNIT.FRFGETOPEUNIBYPERSONANDCLASS( NUPERSONID, OR_BOCONSTANTS.CNULABORATORYCLASSIF );
      UT_TRACE.TRACE( 'FIN GE_BOFWTechnicalService.GetOperatingUnitLabLOV', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( '--[CONTROLLED_ERROR] GE_BOFWTechnicalService.GetOperatingUnitLabLOV', 12 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( '--[others] GE_BOFWTechnicalService.GetOperatingUnitLabLOV', 12 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETOPERATINGUNITLABLOV;
END GE_BOFWTECHNICALSERVICE;
/


