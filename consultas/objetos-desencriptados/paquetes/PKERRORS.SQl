
CREATE OR REPLACE PACKAGE PKERRORS IS
   SBERRORMESSAGE ERRORS.SBERRORMESSAGE%TYPE;
   PROCEDURE INITIALIZE;
   PROCEDURE TRACEON;
   PROCEDURE TRACEOFF;
   PROCEDURE SETEXTERNALSYSTEM;
   PROCEDURE SETSERVERMODE;
   PROCEDURE POP;
   FUNCTION FSBLASTOBJECT
    RETURN VARCHAR2;
   FUNCTION FSBGETOBJECTNAME
    RETURN VARCHAR2;
   FUNCTION FSBGETERRORMESSAGE
    RETURN VARCHAR2;
   FUNCTION FNUGETERRORCODE
    RETURN NUMBER;
   FUNCTION FSBGETAPPLICATION
    RETURN VARCHAR2;
   FUNCTION FSBGETSTACKOBJECTTABLE
    RETURN VARCHAR2;
   FUNCTION FNUNUMBEROBJECTS
    RETURN NUMBER;
   PROCEDURE SETAPPLICATION( ISBAPLICACION IN VARCHAR2 );
   PROCEDURE PUSH( ISBOBJECTNAME IN VARCHAR2 );
   PROCEDURE ADDSUFFIXTOMESSAGE( ISBSUFFIXSTRING IN VARCHAR2 );
   PROCEDURE SETERRORCODE( INUERRORNUMBER IN NUMBER );
   PROCEDURE SETERRORMESSAGE( ISBERROR IN VARCHAR2 );
   FUNCTION FSBGETOBJECT( INUINDEXNUMBER IN NUMBER )
    RETURN VARCHAR2;
   PROCEDURE SETOBJECTNAME( ISBOBJECTNAME IN VARCHAR2 );
   PROCEDURE CHANGEMESSAGE( ISBSTRINGFIND IN VARCHAR2, ISBNEWSTRING IN VARCHAR2 );
   PROCEDURE NOTIFYERROR( ISBOBJETO IN VARCHAR2, ISBMSGERRORACLE IN VARCHAR2, OSBMENSAJEERROR OUT VARCHAR2 );
   PROCEDURE SETERRORCODE( ISBDIVISION IN VARCHAR2, ISBMODULE IN VARCHAR2, INUERRORNUMBER IN NUMBER, ISBMESSAGE IN VARCHAR2 := NULL );
   FUNCTION FSBGETDESCRIPTION( ISBDIVISION IN VARCHAR2, ISBMODULE IN VARCHAR2, INUMENSCODI IN NUMBER )
    RETURN VARCHAR2;
   PROCEDURE GETERRORVAR( ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2, INUFLAGINIT IN NUMBER := 0 );
   PROCEDURE GETERRORVAR( OSBERRORDIVISION OUT VARCHAR2, OSBERRORMODULE OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2, INUFLAGINIT IN NUMBER := 0 );
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
END PKERRORS;
/


CREATE OR REPLACE PACKAGE BODY PKERRORS IS
   NUERRORCODE NUMBER;
   SBERRORDESC VARCHAR2( 4000 );
   GSBLANGCODE I18N_STRING.LANGUAGE_CODE%TYPE := NULL;
   CNUINITIALIZE CONSTANT NUMBER := 1;
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO47009';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( CSBVERSION );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fsbVersion' || '-' || SQLERRM );
   END FSBVERSION;
   PROCEDURE INITIALIZE
    IS
    BEGIN
      ERRORS.INITIALIZE;
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.Initialize' || '-' || SQLERRM );
   END INITIALIZE;
   PROCEDURE TRACEOFF
    IS
    BEGIN
      ERRORS.TRACEOFF;
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.TraceOff' || '-' || SQLERRM );
   END TRACEOFF;
   PROCEDURE TRACEON
    IS
    BEGIN
      ERRORS.TRACEON;
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.TraceOn' || '-' || SQLERRM );
   END TRACEON;
   PROCEDURE SETEXTERNALSYSTEM
    IS
    BEGIN
      ERRORS.SETEXTERNALSYSTEM;
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.SetExternalSystem' || '-' || SQLERRM );
   END SETEXTERNALSYSTEM;
   PROCEDURE SETSERVERMODE
    IS
    BEGIN
      ERRORS.SETSERVERMODE;
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.SetServerMode' || '-' || SQLERRM );
   END SETSERVERMODE;
   PROCEDURE PUSH( ISBOBJECTNAME IN VARCHAR2 )
    IS
    BEGIN
      ERRORS.PUSH( ISBOBJECTNAME );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         RAISE LOGIN_DENIED;
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.Push' || '-' || SQLERRM );
   END PUSH;
   PROCEDURE POP
    IS
    BEGIN
      ERRORS.POP;
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.Pop' || '-' || SQLERRM );
   END POP;
   PROCEDURE ADDSUFFIXTOMESSAGE( ISBSUFFIXSTRING IN VARCHAR2 )
    IS
    BEGIN
      ERRORS.GETERROR( NUERRORCODE, SBERRORDESC );
      ERRORS.SETMESSAGE( SBERRORDESC || ' ' || ISBSUFFIXSTRING );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fsbGetErrorMessage' || '-' || SQLERRM );
   END ADDSUFFIXTOMESSAGE;
   PROCEDURE CHANGEMESSAGE( ISBSTRINGFIND IN VARCHAR2, ISBNEWSTRING IN VARCHAR2 )
    IS
    BEGIN
      ERRORS.GETERROR( NUERRORCODE, SBERRORDESC );
      SBERRORDESC := REPLACE( SBERRORDESC, ISBSTRINGFIND, ISBNEWSTRING );
      ERRORS.SETMESSAGE( SBERRORDESC );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fsbGetErrorMessage' || '-' || SQLERRM );
   END CHANGEMESSAGE;
   PROCEDURE GETERRORVAR( OSBERRORDIVISION OUT VARCHAR2, OSBERRORMODULE OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2, INUFLAGINIT IN NUMBER := 0 )
    IS
    BEGIN
      IF ( INUFLAGINIT = CNUINITIALIZE ) THEN
         PKERRORS.INITIALIZE;
      END IF;
      ERRORS.GETERROR( OSBERRORDIVISION, OSBERRORMODULE, ONUERRORCODE, OSBERRORMESSAGE );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.GetErrorVar' || '-' || SQLERRM );
   END GETERRORVAR;
   PROCEDURE GETERRORVAR( ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2, INUFLAGINIT IN NUMBER := 0 )
    IS
    BEGIN
      IF ( INUFLAGINIT = CNUINITIALIZE ) THEN
         PKERRORS.INITIALIZE;
      END IF;
      ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.GetErrorVar' || '-' || SQLERRM );
   END GETERRORVAR;
   PROCEDURE NOTIFYERROR( ISBOBJETO IN VARCHAR2, ISBMSGERRORACLE IN VARCHAR2, OSBMENSAJEERROR OUT VARCHAR2 )
    IS
      CBLNOTIFY CONSTANT BOOLEAN := TRUE;
    BEGIN
      IF ( ERRORS.GETEXTERNALSYSTEM ) THEN
         PKERRORS.SETERRORMESSAGE( ISBMSGERRORACLE );
         OSBMENSAJEERROR := ISBMSGERRORACLE;
         ERRORS.SETBSSERROR( SQLCODE, ISBMSGERRORACLE );
         RETURN;
      END IF;
      ERRORS.GETERROR( NUERRORCODE, SBERRORDESC );
      IF NUERRORCODE IS NOT NULL AND SBERRORDESC IS NOT NULL THEN
         IF SQLCODE = -20002 THEN
            OSBMENSAJEERROR := SBERRORDESC;
            RETURN;
         END IF;
         IF ISBMSGERRORACLE IS NULL THEN
            OSBMENSAJEERROR := SBERRORDESC;
            RETURN;
         END IF;
      END IF;
      ERRORS.SETBSSERROR( SQLCODE, ISBMSGERRORACLE, CBLNOTIFY );
      ERRORS.GETERROR( NUERRORCODE, SBERRORDESC );
      OSBMENSAJEERROR := SBERRORDESC;
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.NotifyError' || '-' || SQLERRM );
   END NOTIFYERROR;
   PROCEDURE SETAPPLICATION( ISBAPLICACION IN VARCHAR2 )
    IS
    BEGIN
      ERRORS.SETAPPLICATION( ISBAPLICACION );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.SetApplication' || '-' || SQLERRM );
   END SETAPPLICATION;
   PROCEDURE SETERRORCODE( ISBDIVISION IN VARCHAR2, ISBMODULE IN VARCHAR2, INUERRORNUMBER IN NUMBER, ISBMESSAGE IN VARCHAR2 := NULL )
    IS
    BEGIN
      ERRORS.SETBSSERRORON;
      IF ( ISBMESSAGE IS NULL ) THEN
         SBERRORDESC := FSBGETDESCRIPTION( ISBDIVISION, ISBMODULE, INUERRORNUMBER );
       ELSE
         SBERRORDESC := ISBMESSAGE;
      END IF;
      ERRORS.SETERRORDIVISION( ISBDIVISION );
      ERRORS.SETERRORMODULE( ISBMODULE );
      ERRORS.SETBSSERROR( INUERRORNUMBER, SBERRORDESC );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.SetErrorCode' || '-' || SQLERRM );
   END SETERRORCODE;
   PROCEDURE SETERRORCODE( INUERRORNUMBER IN NUMBER )
    IS
      CSBDIVISION CONSTANT VARCHAR2( 20 ) := 'OPF';
      CSBMODULO CONSTANT VARCHAR2( 20 ) := 'SAT';
    BEGIN
      ERRORS.SETBSSERRORON;
      SBERRORDESC := FSBGETDESCRIPTION( CSBDIVISION, CSBMODULO, INUERRORNUMBER );
      ERRORS.SETERRORDIVISION( CSBDIVISION );
      ERRORS.SETERRORMODULE( CSBMODULO );
      ERRORS.SETBSSERROR( INUERRORNUMBER, SBERRORDESC );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.SetErrorCode' || '-' || SQLERRM );
   END SETERRORCODE;
   PROCEDURE SETERRORMESSAGE( ISBERROR IN VARCHAR2 )
    IS
    BEGIN
      ERRORS.SETMESSAGE( ISBERROR );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.SetErrorMessage' || '-' || SQLERRM );
   END SETERRORMESSAGE;
   FUNCTION FNUGETERRORCODE
    RETURN NUMBER
    IS
    BEGIN
      ERRORS.GETERROR( NUERRORCODE, SBERRORDESC );
      RETURN ( NUERRORCODE );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fnuGetErrorCode' || '-' || SQLERRM );
   END FNUGETERRORCODE;
   FUNCTION FNUNUMBEROBJECTS
    RETURN NUMBER
    IS
    BEGIN
      RETURN ( ERRORS.FNUGETNUMBEROBJECTS );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fNumberObjects' || '-' || SQLERRM );
   END FNUNUMBEROBJECTS;
   FUNCTION FSBGETAPPLICATION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( ERRORS.FSBGETAPPLICATION );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fsbGetApplication' || '-' || SQLERRM );
   END FSBGETAPPLICATION;
   FUNCTION FSBGETDESCRIPTION( ISBDIVISION IN VARCHAR2, ISBMODULE IN VARCHAR2, INUMENSCODI IN NUMBER )
    RETURN VARCHAR2
    IS
      SBMENSAJE I18N_STRING.PROMPT_TEXT%TYPE;
      SBID I18N_STRING.ID%TYPE;
      RCI18N_STRING I18N_STRING%ROWTYPE := NULL;
      CURSOR CUMENSAJE( ISBDIV IN VARCHAR2, ISBMOD IN VARCHAR2, INUCOD IN MENSAJE.MENSCODI%TYPE ) IS
SELECT mensdesc
          FROM mensaje
         WHERE mensdivi = isbDiv
           AND mensmodu = isbMod
           AND menscodi = inuCod;
      FUNCTION FSBGETCURRENTLANG
       RETURN VARCHAR2
       IS
         CURSOR CULANG IS
SELECT sys_context ( 'USERENV', 'LANG' ) Language
            FROM dual ;
         SBLANGUAGE I18N_STRING.LANGUAGE_CODE%TYPE;
         CNUNLS_DEFAULT CONSTANT VARCHAR2( 3 ) := 'ESA';
       BEGIN
         IF ( CULANG%ISOPEN ) THEN
            CLOSE CULANG;
         END IF;
         OPEN CULANG;
         FETCH CULANG
            INTO SBLANGUAGE;
         CLOSE CULANG;
         IF ( SBLANGUAGE IS NULL ) THEN
            SBLANGUAGE := CNUNLS_DEFAULT;
         END IF;
         RETURN SBLANGUAGE;
       EXCEPTION
         WHEN OTHERS THEN
            RETURN CNUNLS_DEFAULT;
      END FSBGETCURRENTLANG;
    BEGIN
      ERRORS.SETOBJECTNAME( FSBLASTOBJECT );
      SBID := UPPER( ISBDIVISION ) || '-' || UPPER( ISBMODULE ) || '-' || TO_CHAR( INUMENSCODI );
      IF ( GSBLANGCODE IS NULL ) THEN
         GSBLANGCODE := FSBGETCURRENTLANG;
      END IF;
      PKI18NMGR.GETRECORD( SBID, GSBLANGCODE, RCI18N_STRING );
      IF ( RCI18N_STRING.ID IS NOT NULL ) THEN
         SBMENSAJE := '[ ' || ISBDIVISION || '-' || ISBMODULE || '-' || TO_CHAR( INUMENSCODI ) || ' ] - ' || RCI18N_STRING.PROMPT_TEXT;
         RETURN SBMENSAJE;
      END IF;
      OPEN CUMENSAJE( ISBDIVISION, ISBMODULE, INUMENSCODI );
      FETCH CUMENSAJE
         INTO SBMENSAJE;
      IF ( CUMENSAJE%NOTFOUND ) THEN
         CLOSE CUMENSAJE;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CUMENSAJE;
      SBMENSAJE := '[ ' || ISBDIVISION || '-' || ISBMODULE || '-' || TO_CHAR( INUMENSCODI ) || ' ] - ' || SBMENSAJE;
      RETURN SBMENSAJE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         SBMENSAJE := '[ ' || ISBDIVISION || '-' || ISBMODULE || '-' || TO_CHAR( INUMENSCODI ) || ' ] ' || SQLERRM;
         ERRORS.SETOBJECTNAME( FSBLASTOBJECT );
         RETURN SBMENSAJE;
   END FSBGETDESCRIPTION;
   FUNCTION FSBGETERRORMESSAGE
    RETURN VARCHAR2
    IS
    BEGIN
      ERRORS.GETERROR( NUERRORCODE, SBERRORDESC );
      RETURN ( SBERRORDESC );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fsbGetErrorMessage' || '-' || SQLERRM );
   END FSBGETERRORMESSAGE;
   FUNCTION FSBGETOBJECT( INUINDEXNUMBER IN NUMBER )
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( ERRORS.FSBGETOBJECTFROMPLSTACK( INUINDEXNUMBER ) );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fsbGetObject' || '-' || SQLERRM );
   END FSBGETOBJECT;
   PROCEDURE SETOBJECTNAME( ISBOBJECTNAME IN VARCHAR2 )
    IS
    BEGIN
      ERRORS.SETOBJECTNAME( ISBOBJECTNAME );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors1.SetObjectName' || '-' || SQLERRM );
   END SETOBJECTNAME;
   FUNCTION FSBGETOBJECTNAME
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( ERRORS.FSBGETOBJECTNAME );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fsbGetObjectName' || '-' || SQLERRM );
   END FSBGETOBJECTNAME;
   FUNCTION FSBGETSTACKOBJECTTABLE
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( ERRORS.FSBGETSTACKOBJECTTABLE );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fsbGetStackObjectTable' || '-' || SQLERRM );
   END FSBGETSTACKOBJECTTABLE;
   FUNCTION FSBLASTOBJECT
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( ERRORS.FSBGETLASTOBJECTFROMPLSTACK );
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20600, 'pkErrors.fsbLastObject' || '-' || SQLERRM );
   END FSBLASTOBJECT;
 BEGIN
   ERRORS.CLEAR;
END PKERRORS;
/


