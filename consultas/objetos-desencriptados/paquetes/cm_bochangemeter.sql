PACKAGE BODY CM_BOChangeMeter
IS
    







































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO378234';

    
    
    
    CNUERROR_PRODACTIVEPACKAGES  CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 5542;   
    CNUERROR_PRODISLIEU          CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901024; 
    CNUERROR_INVALIDCOMPSTATUS   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901030; 
    CNUERROR_INVALIDPRODSTATUS   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900452; 
    CNUERROR_PRODISPROVISIONAL   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901031; 
    CNUERROR_PRODISSHAREDELEM    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901025; 
    CNUERROR_NOCONSUMPTIONPERIOD CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901026; 
    CNUERROR_TELEMETERIN         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901043; 
    CNUERROR_READGENNOCRITIC     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901027; 
    CNUERROR_CRITICNOCRITIC      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901083; 
    CNUERROR_SAMEMEASUREELEM     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901028; 
    CNUERROR_DIFFGAMA            CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901029; 
    CNUERROR_NOTACTIVE_ELMPROD   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901405; 
    
    
    
    

    
    
    
    













    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

    














    PROCEDURE VALPRODHASACTIVEPACKAGES
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        SBDESCPACKAGETYPE PS_PACKAGE_TYPE.DESCRIPTION%TYPE; 
    BEGIN
        IF (CM_BCCHANGEMETER.FBLPRODHASACTIVEPACKAGES(INUPRODUCTID,
                                                      SBDESCPACKAGETYPE)) THEN
            ERRORS.SETERROR(CNUERROR_PRODACTIVEPACKAGES,
                            DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPRODUCTID)||'|'||SBDESCPACKAGETYPE);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPRODHASACTIVEPACKAGES;

    














    PROCEDURE VALPRODUCTISLIEU
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
    BEGIN
        IF (CM_BCCHANGEMETER.FBLPRODUCTISLIEU(INUPRODUCTID)) THEN
            ERRORS.SETERROR(CNUERROR_PRODISLIEU,
                            DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPRODUCTID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPRODUCTISLIEU;
    
    














    PROCEDURE VALVALIDCOMPSTATUS
    (
        INUCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
    BEGIN
        IF(DAPR_COMPONENT.FNUGETCOMPONENT_STATUS_ID(INUCOMPONENTID) IN (PR_BOCONSTANTS.CNUCOMP_PEND_INST,
                                                                        PR_BOCONSTANTS.CNUCOMP_RETIRE,
                                                                        PR_BOCONSTANTS.CNUCOMP_UNINSTALL_RET)) THEN
            ERRORS.SETERROR(CNUERROR_INVALIDCOMPSTATUS,
                            INUCOMPONENTID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALVALIDCOMPSTATUS;
    
    














    PROCEDURE VALVALIDPRODSTATUS
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
    BEGIN
        IF(DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(INUPRODUCTID) IN (PR_BOCONSTANTS.CNUPRODUCT_INSTALL_PENDING,
                                                                 PR_BOCONSTANTS.CNUPRODUCT_RETIRE,
                                                                 PR_BOCONSTANTS.CNUPRODUCT_UNINSTALL_RET)) THEN
            ERRORS.SETERROR(CNUERROR_INVALIDPRODSTATUS,
                            DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPRODUCTID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALVALIDPRODSTATUS;
    
    














    PROCEDURE VALPRODISPROVISIONAL
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
    BEGIN
        IF (DAPR_PRODUCT.FSBGETIS_PROVISIONAL(INUPRODUCTID) = GE_BOCONSTANTS.CSBYES) THEN
            ERRORS.SETERROR(CNUERROR_PRODISPROVISIONAL,
                            DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPRODUCTID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPRODISPROVISIONAL;
    
    














    PROCEDURE VALPRODISSHAREDELEM
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
    BEGIN
        IF(PKBCELMESESU.FBOISSHAREDELEMENT(INUPRODUCTID)) THEN
            ERRORS.SETERROR(CNUERROR_PRODISSHAREDELEM,
                            DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPRODUCTID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPRODISSHAREDELEM;
    
    

















    FUNCTION FNUGETCURRCONSPERIODBYPROD
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE,
        IDTDATE      IN DATE DEFAULT UT_DATE.FDTSYSDATE
    )
    RETURN PERICOSE.PECSCONS%TYPE
    IS
        NUPECSCONS PERICOSE.PECSCONS%TYPE; 
    BEGIN
        
        NUPECSCONS := CM_BCREGLECT.FNUGETCURRCONSPERIODBYPROD(INUPRODUCTID,
                                                              IDTDATE);
        
        
        
        IF (NUPECSCONS = -1) THEN
            ERRORS.SETERROR(CNUERROR_NOCONSUMPTIONPERIOD,
                            DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPRODUCTID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        RETURN NUPECSCONS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCURRCONSPERIODBYPROD;
    
    
















    PROCEDURE VALTELEMETERIN
    (
        INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE,
        ISBELMECODI IN ELEMMEDI.ELMECODI%TYPE
    )
    IS
    BEGIN
        IF (PKBCELEMMEDI.FBLISTELEMETERED(INUELMEIDEM)) THEN
            ERRORS.SETERROR(CNUERROR_TELEMETERIN,
                            ISBELMECODI);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALTELEMETERIN;
    
    

















    FUNCTION FNUGETPERIFACT
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPECSCONS  IN PERICOSE.PECSCONS%TYPE
    )
    RETURN PERIFACT.PEFACODI%TYPE
    IS
        RCSERVSUSC  SERVSUSC%ROWTYPE;       
        NUSERVCODI  SERVICIO.SERVCODI%TYPE; 
        RCSERVICIO  SERVICIO%ROWTYPE;       
        NUPERIFACT  PERIFACT.PEFACODI%TYPE; 
    BEGIN
        
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD(INUPRODUCTID);

        
        
        
        NUSERVCODI := RCSERVSUSC.SESUSERV;

        RCSERVICIO := PKTBLSERVICIO.FRCGETRECORD(NUSERVCODI);

        
        PKBCPERIFACT.GETBILLPERBYCONSPER(RCSERVSUSC.SESUCICL,
                                         INUPECSCONS,
                                         NUPERIFACT,
                                         RCSERVICIO.SERVTICO);

        RETURN NUPERIFACT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPERIFACT;
    
    






















    PROCEDURE VALREADINGGEN
    (
        INUPROD1 IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPECS1 IN PERICOSE.PECSCONS%TYPE,
        INUPROD2 IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPECS2 IN PERICOSE.PECSCONS%TYPE
    )
    IS
        NUPERIFACT1  PERIFACT.PEFACODI%TYPE; 
        NUPERIFACT2  PERIFACT.PEFACODI%TYPE; 
    BEGIN
        
        
        IF (CM_BCCHANGEMETER.FBLPRODHASREADINGNOT(INUPROD1,
                                                  INUPECS1)) THEN
                                          
            
            NUPERIFACT1 := FNUGETPERIFACT(INUPROD1,
                                          INUPECS1);

            
            
            IF (CM_BCCHANGEMETER.FBLCRITICISCLOSED(NUPERIFACT1)) THEN
                
                
                IF (CM_BCCHANGEMETER.FBLPRODHASREADINGNOT(INUPROD2,
                                                          INUPECS2)) THEN
                   
                   NUPERIFACT2 := FNUGETPERIFACT(INUPROD2,
                                                 INUPECS2);
                                                    
                   
                   
                   IF (NOT(CM_BCCHANGEMETER.FBLCRITICISCLOSED(NUPERIFACT2))) THEN
                       
                       
                       ERRORS.SETERROR(CNUERROR_READGENNOCRITIC,
                                       DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPROD2));
                       RAISE EX.CONTROLLED_ERROR;
                   END IF;
                ELSE
                   
                   
                   ERRORS.SETERROR(CNUERROR_CRITICNOCRITIC,
                                   DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPROD1)||'|'||DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPROD2));
                   RAISE EX.CONTROLLED_ERROR;
                END IF;
            ELSE
                
                
                ERRORS.SETERROR(CNUERROR_READGENNOCRITIC,
                                DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPROD1));
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALREADINGGEN;
    
    















    PROCEDURE VALMEASUREELEMPROD
    (
        IOSBELMECODI  IN OUT ELEMMEDI.ELMECODI%TYPE,
        IONUPRODUCTID IN OUT PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        NUELMEIDEM ELEMMEDI.ELMEIDEM%TYPE;           
        NUITEMSID  GE_ITEMS_GAMA_ITEM.ITEMS_ID%TYPE; 
    BEGIN
        NUELMEIDEM := PKBCELEMMEDI.FNUGETIDENTMEASELEM(IOSBELMECODI);
    
        IF (    (IONUPRODUCTID IS NULL)
            AND (IOSBELMECODI IS NOT NULL)) THEN
            
            IONUPRODUCTID := PKBCELMESESU.FNUFIRSTSERVNUMBERELEMACT(IOSBELMECODI);
        ELSE
            
            IF (NOT (PKBCELMESESU.FBLRECORDBYSUBSSERVMEASELEM(NUELMEIDEM,
                                                              IONUPRODUCTID))) THEN
                
                ERRORS.SETERROR(CNUERROR_NOTACTIVE_ELMPROD,
                                IOSBELMECODI||'|'||DAPR_PRODUCT.FSBGETSERVICE_NUMBER(IONUPRODUCTID));
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;
    
        
        CM_BOCHANGEMETER.VALVALIDPRODSTATUS(IONUPRODUCTID);
        
        CM_BOCHANGEMETER.VALPRODUCTISLIEU(IONUPRODUCTID);
        
        CM_BOCHANGEMETER.VALPRODISPROVISIONAL(IONUPRODUCTID);
        
        CM_BOCHANGEMETER.VALPRODISSHAREDELEM(IONUPRODUCTID);
        
        CM_BOCHANGEMETER.VALPRODHASACTIVEPACKAGES(IONUPRODUCTID);
        
        CM_BOCHANGEMETER.VALTELEMETERIN(NUELMEIDEM,
                                        IOSBELMECODI);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALMEASUREELEMPROD;
    
    





















    PROCEDURE CHANGEMETER
    (
        ISBCURRME   IN ELEMMEDI.ELMECODI%TYPE,
        INUCURRPROD IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCURRCOMP IN PR_COMPONENT.COMPONENT_ID%TYPE,
        ISBREALME   IN ELEMMEDI.ELMECODI%TYPE,
        INUREALPROD IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUREALCOMP IN PR_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
        TBCHANGEMETER  PKMEASUREMENTELEMENTREQUEST.TYTBCOMPCHANGEMEASURE; 

        DTSYSDATE      DATE;  
        DTRETIREDATE   DATE;  
        
        NUCURRPECSCONS PERICOSE.PECSCONS%TYPE; 
        NUREALPECSCONS PERICOSE.PECSCONS%TYPE; 
        
        NUCURRGAMA     GE_ITEMS_GAMA.ID_ITEMS_GAMA%TYPE; 
        NUCURRITEMSID  GE_ITEMS_GAMA_ITEM.ITEMS_ID%TYPE; 
        NUREALGAMA     GE_ITEMS_GAMA.ID_ITEMS_GAMA%TYPE; 
        NUREALITEMSID  GE_ITEMS_GAMA_ITEM.ITEMS_ID%TYPE; 
    BEGIN
        
        IF (ISBCURRME = ISBREALME) THEN
            ERRORS.SETERROR(CNUERROR_SAMEMEASUREELEM);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        GE_BCITEMS_GAMA_ITEM.GETGAMMABYSERIE(ISBCURRME,
                                             NUCURRGAMA,
                                             NUCURRITEMSID);
        GE_BCITEMS_GAMA_ITEM.GETGAMMABYSERIE(ISBREALME,
                                             NUREALGAMA,
                                             NUREALITEMSID);

        
        IF (NUCURRGAMA <> NUREALGAMA) THEN
            ERRORS.SETERROR(CNUERROR_DIFFGAMA);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        NUCURRPECSCONS := FNUGETCURRCONSPERIODBYPROD(INUCURRPROD);
        
        
        NUREALPECSCONS := FNUGETCURRCONSPERIODBYPROD(INUREALPROD);

        
        VALREADINGGEN(INUCURRPROD,
                      NUCURRPECSCONS,
                      INUREALPROD,
                      NUREALPECSCONS);
        VALREADINGGEN(INUREALPROD,
                      NUREALPECSCONS,
                      INUCURRPROD,
                      NUCURRPECSCONS);

        
        DTSYSDATE    := UT_DATE.FDTSYSDATE;
        DTRETIREDATE := DTSYSDATE - (1/UT_DATE.CNUSECONDSBYDAY);

        TBCHANGEMETER(1).NUEMSSCMSS   := INUREALCOMP;
        TBCHANGEMETER(1).NUEMSSSESU   := INUREALPROD;
        TBCHANGEMETER(1).SBEMSSCOEMRE := ISBREALME;
        TBCHANGEMETER(1).SBEMSSCOEMIN := ISBCURRME;
        TBCHANGEMETER(1).DTEMSSFEIN   := DTSYSDATE;
        TBCHANGEMETER(1).DTEMSSFERE   := DTRETIREDATE;

        TBCHANGEMETER(2).NUEMSSCMSS   := INUCURRCOMP;
        TBCHANGEMETER(2).NUEMSSSESU   := INUCURRPROD;
        TBCHANGEMETER(2).SBEMSSCOEMRE := ISBCURRME;
        TBCHANGEMETER(2).SBEMSSCOEMIN := ISBREALME;
        TBCHANGEMETER(2).DTEMSSFEIN   := DTSYSDATE;
        TBCHANGEMETER(2).DTEMSSFERE   := DTRETIREDATE;

        PKMEASUREMENTELEMENTREQUEST.CHANELEMMEASUBYWRONGREG(TBCHANGEMETER);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGEMETER;

END CM_BOCHANGEMETER;