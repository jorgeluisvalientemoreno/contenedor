PACKAGE BODY MO_BOSuspension AS























































































    
    
    
    
    CSBVERSION              CONSTANT VARCHAR2(250)  := 'SAO413861';
    
    CSBWORK_INSTANCE        CONSTANT VARCHAR2(30)   := MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE;
    
    CNUAPLICATIONDATEISNULL CONSTANT NUMBER(4)      := 5225;
    
    CNUENDINGDATEISNULL     CONSTANT NUMBER(4)      := 5226;
    
    CNUCOMPTYPESUSPEND      CONSTANT NUMBER(4)      := 563;
        
    CNUDATESEQUALS          CONSTANT NUMBER(4)      := 483;
    
    CNUANNUL_CAUSAL_TYPE    CONSTANT NUMBER         := 18;

    CNUPERIODMAXSUSP        CONSTANT NUMBER(4)      := 9;
    CNUCALCCURRENTYEAR      CONSTANT NUMBER(4)      := 10;
    
    CNUATTRNUMSUSPVOL       CONSTANT GE_ATTRIBUTES.ATTRIBUTE_ID%TYPE := 201;
    CNUATTRNUMSOLSUSPVOL    CONSTANT GE_ATTRIBUTES.ATTRIBUTE_ID%TYPE := 202;

    
    CSBTAGGENERSUSPEVOL     CONSTANT VARCHAR2(100) := 'M_GENER_SUSPEVOL';
    CNUADMIN_SUPS_TYPE      CONSTANT GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE := PR_BOPARAMETER.FNUGETADMIN_SUSPENSION;


    
    
    
    GNUMOTIVEID  MO_MOTIVE.MOTIVE_ID%TYPE;
    
    
    
    
    

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;
    
    

    









    PROCEDURE SUSPENDPRODCOMPONENTS
    (
        IRFCOMPONENTS IN CONSTANTS.TYREFCURSOR
    )
    IS
        
        
        
        RCCOMPONENTS  DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
        FETCH IRFCOMPONENTS INTO RCCOMPONENTS;
        WHILE (IRFCOMPONENTS%FOUND) LOOP
            
            
            IF (RCCOMPONENTS.COMPONENT_STATUS_ID =
                PR_BOPARAMETER.FNUGETCOMPACTI) THEN
                DAPR_COMPONENT.UPDCOMPONENT_STATUS_ID(RCCOMPONENTS.COMPONENT_ID,
                                                 PR_BOPARAMETER.FNUGETCOMPSUSP);
            END IF;
            FETCH IRFCOMPONENTS INTO RCCOMPONENTS;
        END LOOP;
        CLOSE IRFCOMPONENTS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (IRFCOMPONENTS%ISOPEN) THEN
                CLOSE IRFCOMPONENTS;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (IRFCOMPONENTS%ISOPEN) THEN
                CLOSE IRFCOMPONENTS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SUSPENDPRODCOMPONENTS;

    









    PROCEDURE CONNECTPRODCOMPONENTS
    (
        IRFCOMPONENTS IN CONSTANTS.TYREFCURSOR
    )
    IS
        
        
        
        RCCOMPONENTS  DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
        FETCH IRFCOMPONENTS INTO RCCOMPONENTS;
        WHILE (IRFCOMPONENTS%FOUND) LOOP
            
            
            IF (RCCOMPONENTS.COMPONENT_STATUS_ID =
                PR_BOPARAMETER.FNUGETCOMPSUSP) THEN
                DAPR_COMPONENT.UPDCOMPONENT_STATUS_ID(RCCOMPONENTS.COMPONENT_ID,
                                                 PR_BOPARAMETER.FNUGETCOMPACTI);
            END IF;
            FETCH IRFCOMPONENTS INTO RCCOMPONENTS;
        END LOOP;
        CLOSE IRFCOMPONENTS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (IRFCOMPONENTS%ISOPEN) THEN
                CLOSE IRFCOMPONENTS;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (IRFCOMPONENTS%ISOPEN) THEN
                CLOSE IRFCOMPONENTS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CONNECTPRODCOMPONENTS;

    
    PROCEDURE SUSPCONNECTCOMPONENTS
    (
        INUMOTIVE      IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        IBLSUSPENDCOMP IN  BOOLEAN,
        ONUERROR       OUT NUMBER,
        OSBERROR       OUT VARCHAR2
    )
    IS
        
        
        
        RFCOMPONENTS  CONSTANTS.TYREFCURSOR;
        NUPRODUCT     PR_PRODUCT.PRODUCT_ID%TYPE;
    BEGIN
        
        ONUERROR := GE_BOCONSTANTS.CNUSUCCESS;
        OSBERROR := NULL;

        
        DAMO_MOTIVE.ACCKEY(INUMOTIVE);
        NUPRODUCT := DAMO_MOTIVE.FNUGETPRODUCT_ID(INUMOTIVE);

        
        RFCOMPONENTS := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID(NUPRODUCT);

        
        IF (IBLSUSPENDCOMP) THEN
            SUSPENDPRODCOMPONENTS(RFCOMPONENTS);
            RETURN;
        END IF;
        
        CONNECTPRODCOMPONENTS(RFCOMPONENTS);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(ONUERROR, OSBERROR);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERROR, OSBERROR);
    END SUSPCONNECTCOMPONENTS;

    PROCEDURE INSSUSPENSIONCOMP
    (
        INUCOMPONENTID      IN MO_SUSPENSION_COMP.COMPONENT_ID%TYPE,
        INUSUSPENSIONTYPEID IN MO_SUSPENSION_COMP.SUSPENSION_TYPE_ID%TYPE,
        IDTREGISTERDATE     IN MO_SUSPENSION_COMP.REGISTER_DATE%TYPE,
        IDTAPLICATIONDATE   IN MO_SUSPENSION_COMP.APLICATION_DATE%TYPE,
        IDTENDINGDATE       IN MO_SUSPENSION_COMP.ENDING_DATE%TYPE
    )
    IS
        RCSUSPENSIONCOMP    DAMO_SUSPENSION_COMP.STYMO_SUSPENSION_COMP;
    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOSuspension.InsSuspensionComp',9);
        RCSUSPENSIONCOMP.COMPONENT_ID       := INUCOMPONENTID;
        RCSUSPENSIONCOMP.SUSPENSION_TYPE_ID := INUSUSPENSIONTYPEID;
        RCSUSPENSIONCOMP.REGISTER_DATE      := NVL(IDTREGISTERDATE,UT_DATE.FDTSYSDATE);
        RCSUSPENSIONCOMP.APLICATION_DATE    := IDTAPLICATIONDATE;
        RCSUSPENSIONCOMP.ENDING_DATE        := IDTENDINGDATE;

        DAMO_SUSPENSION_COMP.INSRECORD(RCSUSPENSIONCOMP);
        UT_TRACE.TRACE('Inserta Registro Mo_Suspension_Comp:['||RCSUSPENSIONCOMP.COMPONENT_ID||']',10);
        UT_TRACE.TRACE('FIN: MO_BOSuspension.InsSuspensionComp',9);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   PROCEDURE GETSUSPENSIONDATES
    (
        INUMOTIVEID      IN   MO_SUSPENSION.MOTIVE_ID%TYPE,
        OSBAPPLIDATE     OUT  VARCHAR2,
        OSBENDINGDATE    OUT  VARCHAR2
    )
    IS
        RCSUSPENSION     DAMO_SUSPENSION.STYMO_SUSPENSION;
    BEGIN
        UT_TRACE.TRACE('Inicia GetSuspensionDates motivo['||INUMOTIVEID||']',10);

        
        RCSUSPENSION := DAMO_SUSPENSION.FRCGETRECORD(INUMOTIVEID);

        
        OSBAPPLIDATE  :=  UT_DATE.FSBSTR_DATE(RCSUSPENSION.APLICATION_DATE);
        OSBENDINGDATE :=  UT_DATE.FSBSTR_DATE(RCSUSPENSION.ENDING_DATE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE SUSPVOLPRODATTENTION
    (
        INUMOTIVEID    IN    MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        CDTSYSDATE          CONSTANT DATE := UT_DATE.FDTSYSDATE;
        
        RCSUSPENSIONCOMP    DAMO_SUSPENSION_COMP.STYMO_SUSPENSION_COMP;
        RCSUSPENSION        DAMO_SUSPENSION.STYMO_SUSPENSION;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGE           DAMO_PACKAGES.STYMO_PACKAGES;
        
        
        RCORDERACTIVITY     DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        RCCAUSAL            DAGE_CAUSAL.STYGE_CAUSAL;
        
        BLFLAGSUSPEND       BOOLEAN := TRUE;

        DTFECHAFINALEJECUCION DATE := NULL;
        
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.SuspVolProdAttention motivo['||INUMOTIVEID||']',10);

        SAVEPOINT SUSPEND_VOL_PROD;

        
        DAMO_MOTIVE.GETRECORD(INUMOTIVEID, RCMOTIVE);

        
        DAMO_SUSPENSION.GETRECORD(RCMOTIVE.MOTIVE_ID,RCSUSPENSION);

        
        RCORDERACTIVITY  := OR_BCACTIVITIESBYTASKTYPE.FRCGETRECBYMOTANDPRO(RCMOTIVE.MOTIVE_ID, RCMOTIVE.PRODUCT_ID);
        UT_TRACE.TRACE('Actividad encontrada ['||RCORDERACTIVITY.ORDER_ACTIVITY_ID||']',13);

        DTFECHAFINALEJECUCION := NULL;
        
        
        IF  (RCORDERACTIVITY.ORDER_ACTIVITY_ID IS NOT NULL) THEN

            
            RCORDER := DAOR_ORDER.FRCGETRECORD(RCORDERACTIVITY.ORDER_ID);

            
            RCCAUSAL := DAGE_CAUSAL.FRCGETRECORD(RCORDER.CAUSAL_ID);
            
            DTFECHAFINALEJECUCION := RCORDER.EXECUTION_FINAL_DATE;

            UT_TRACE.TRACE('Clase de causal ['||RCCAUSAL.CLASS_CAUSAL_ID||']',13);
            UT_TRACE.TRACE('Tipo de causal ['||RCCAUSAL.CAUSAL_TYPE_ID||']',13);

            
            IF  ((RCCAUSAL.CLASS_CAUSAL_ID = MO_BOCAUSAL.FNUGETSUCCESS) AND
                 (RCCAUSAL.CAUSAL_TYPE_ID <> CNUANNUL_CAUSAL_TYPE)) THEN
                UT_TRACE.TRACE('Realiza la suspensi�n del producto',13);
                
                BLFLAGSUSPEND := TRUE;
                UT_TRACE.TRACE('Se realizara la suspensi�n voluntaria del producto',11);
            ELSIF (RCCAUSAL.CAUSAL_TYPE_ID = CNUANNUL_CAUSAL_TYPE) THEN
                
                BLFLAGSUSPEND := FALSE;
                
                DAPR_PRODUCT.UPDSUSPEN_ORD_ACT_ID(RCMOTIVE.PRODUCT_ID, NULL);
                UT_TRACE.TRACE('No se realizara la suspensi�n voluntaria del producto',11);
            END IF;
            
        
        ELSE
            
            BLFLAGSUSPEND := TRUE;
            UT_TRACE.TRACE('Se realizara la suspensi�n voluntaria del producto',11);

        END IF;


        
        FOR RCMOCOMPONENT IN MO_BCCOMPONENT.CUCOMPBYMOTIVEORDERBYFATHER(INUMOTIVEID)  LOOP

        
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOCOMPONENT.MOTIVE_STATUS_ID) AND
                RCMOCOMPONENT.MOTIVE_STATUS_ID != MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP) THEN


                
                DAMO_SUSPENSION_COMP.GETRECORD(RCMOCOMPONENT.COMPONENT_ID,RCSUSPENSIONCOMP);

                
                IF (BLFLAGSUSPEND) THEN
                    
                    PR_BOSUSPENSION.COMPONENTSUSPEND ( RCMOCOMPONENT.COMPONENT_ID_PROD,
                                                       RCSUSPENSIONCOMP.SUSPENSION_TYPE_ID,
                                                       RCSUSPENSIONCOMP.REGISTER_DATE,
                                                       CASE WHEN DTFECHAFINALEJECUCION IS NULL THEN RCSUSPENSIONCOMP.APLICATION_DATE ELSE DTFECHAFINALEJECUCION END ,
                                                       RCMOCOMPONENT.COMPONENT_ID
                                                     );
                END IF;

                
                RCMOCOMPONENT.MEDIATION_DATE:= NVL(RCMOCOMPONENT.MEDIATION_DATE,CDTSYSDATE);
                RCMOCOMPONENT.ATTENTION_DATE:= NVL(RCMOCOMPONENT.ATTENTION_DATE,CDTSYSDATE);
                DAMO_COMPONENT.UPDRECORD(RCMOCOMPONENT);

                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCMOCOMPONENT.COMPONENT_ID, MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND);

            END IF;
        END LOOP;


        
        IF (BLFLAGSUSPEND) THEN

            UT_TRACE.TRACE('Realiza la suspensi�n del producto',13);
            
            PR_BOSUSPENSION.SUSPENDVOLPRODUCT
            (
                RCMOTIVE.PRODUCT_ID,
                RCSUSPENSION.SUSPENSION_TYPE_ID,
                RCSUSPENSION.REGISTER_DATE,
                CASE WHEN DTFECHAFINALEJECUCION IS NULL THEN RCSUSPENSION.APLICATION_DATE ELSE DTFECHAFINALEJECUCION END,
                RCMOTIVE.MOTIVE_ID
            );
            UT_TRACE.TRACE('Se realiz� la suspensi�n voluntaria del producto',11);

        END IF;


        
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) AND
            (RCMOTIVE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_MOT)
        THEN

            
            IF  (RCMOTIVE.ATTENTION_DATE IS NULL) THEN
                DAMO_MOTIVE.UPDATTENTION_DATE(RCMOTIVE.MOTIVE_ID, CDTSYSDATE);
            END IF;

            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCMOTIVE.MOTIVE_ID, MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND);
        END IF;

        
        DAMO_PACKAGES.GETRECORD(RCMOTIVE.PACKAGE_ID, RCPACKAGE);

         
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCPACKAGE.MOTIVE_STATUS_ID)) AND
            (RCPACKAGE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK)
        THEN
            
            IF  (RCPACKAGE.ATTENTION_DATE IS NULL) THEN
                DAMO_PACKAGES.UPDATTENTION_DATE(RCPACKAGE.PACKAGE_ID, CDTSYSDATE);
            END IF;

            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(RCPACKAGE.PACKAGE_ID, MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND);

        END IF;

        UT_TRACE.TRACE('Fin MO_BOSuspension.SuspVolProdAttention ',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SUSPEND_VOL_PROD;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ROLLBACK TO SUSPEND_VOL_PROD;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE RECONVOLPRATTENTION
    (
        INUMOTIVEID      IN   MO_MOTIVE.MOTIVE_ID%TYPE
    )
     IS
        DTSYSDATE          DATE :=UT_DATE.FDTSYSDATE;
        SBRECONNECTBSS     VARCHAR2(10);

        RCSUSPENSIONCOMP   DAMO_SUSPENSION_COMP.STYMO_SUSPENSION_COMP;
        RCSUSPENSION       DAMO_SUSPENSION.STYMO_SUSPENSION;
        RCMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGE          DAMO_PACKAGES.STYMO_PACKAGES;
        
        
        RCORDERACTIVITY    DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        RCORDER            DAOR_ORDER.STYOR_ORDER;
        RCCAUSAL           DAGE_CAUSAL.STYGE_CAUSAL;
        
        BLFLAGRECONECT     BOOLEAN := TRUE;
        

        
    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOSuspension.ReconVolPrAttention - motivo['||INUMOTIVEID||']',10);

        SAVEPOINT RECONNECT_VOL_PROD;

        
        DAMO_SUSPENSION.GETRECORD(INUMOTIVEID, RCSUSPENSION);

        
        DAMO_MOTIVE.GETRECORD(RCSUSPENSION.MOTIVE_ID, RCMOTIVE);

        
        RCORDERACTIVITY  := OR_BCACTIVITIESBYTASKTYPE.FRCGETRECBYMOTANDPRO(RCMOTIVE.MOTIVE_ID, RCMOTIVE.PRODUCT_ID);
        UT_TRACE.TRACE('Actividad encontrada ['||RCORDERACTIVITY.ORDER_ACTIVITY_ID||']',13);


        
        IF  (RCORDERACTIVITY.ORDER_ACTIVITY_ID IS NOT NULL) THEN

            
            RCORDER := DAOR_ORDER.FRCGETRECORD(RCORDERACTIVITY.ORDER_ID);

            IF (RCORDER.CAUSAL_ID IS NOT NULL) THEN
                
                RCCAUSAL := DAGE_CAUSAL.FRCGETRECORD(RCORDER.CAUSAL_ID);

                UT_TRACE.TRACE('Clase de causal ['||RCCAUSAL.CLASS_CAUSAL_ID||']',13);
                UT_TRACE.TRACE('Tipo de causal ['||RCCAUSAL.CAUSAL_TYPE_ID||']',13);
                
                IF (RCCAUSAL.CLASS_CAUSAL_ID <> MO_BOCAUSAL.FNUGETSUCCESS) THEN
                    
                    BLFLAGRECONECT := FALSE;
                    UT_TRACE.TRACE('No se realizara la reconexi�n voluntaria del producto',11);
                    
                
                ELSIF ((RCCAUSAL.CLASS_CAUSAL_ID = MO_BOCAUSAL.FNUGETSUCCESS) AND
                       (RCCAUSAL.CAUSAL_TYPE_ID <> CNUANNUL_CAUSAL_TYPE)) THEN

                    
                    BLFLAGRECONECT := TRUE;
                    UT_TRACE.TRACE('Se realizara la reconexi�n voluntaria del producto',11);

                
                ELSIF (RCCAUSAL.CAUSAL_TYPE_ID = CNUANNUL_CAUSAL_TYPE) THEN
                    
                    BLFLAGRECONECT := FALSE;
                    UT_TRACE.TRACE('No se realizara la reconexi�n voluntaria del producto',11);
                END IF;
            
            ELSE
                
                BLFLAGRECONECT := TRUE;
                UT_TRACE.TRACE('Se realizara la reconexi�n voluntaria del producto',11);
            END IF;
        
        ELSE
            
            BLFLAGRECONECT := TRUE;
            UT_TRACE.TRACE('Se realizara la reconexi�n voluntaria del producto',11);

        END IF;


        
        FOR RCMOCOMPONENT IN MO_BCCOMPONENT.CUCOMPBYMOTIVEORDERBYFATHER(RCSUSPENSION.MOTIVE_ID)  LOOP

            
            IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOCOMPONENT.MOTIVE_STATUS_ID)) AND
                (RCMOCOMPONENT.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_COMP)
            THEN
                
                DAMO_SUSPENSION_COMP.GETRECORD(RCMOCOMPONENT.COMPONENT_ID,RCSUSPENSIONCOMP);

                
                IF (BLFLAGRECONECT) THEN
                    
                    PR_BOSUSPENSION.RECONVOLCOMPONENT ( RCMOCOMPONENT.COMPONENT_ID_PROD,
                                                        RCSUSPENSIONCOMP.SUSPENSION_TYPE_ID,
                                                        RCSUSPENSIONCOMP.ENDING_DATE,
                                                        RCMOCOMPONENT.COMPONENT_ID,
                                                        SBRECONNECTBSS
                                                      );
                    UT_TRACE.TRACE('Se realiz� la reconexi�n del componente '||RCMOCOMPONENT.COMPONENT_ID_PROD, 11);
                END IF;
                
                
                RCMOCOMPONENT.MEDIATION_DATE:= NVL(RCMOCOMPONENT.MEDIATION_DATE, DTSYSDATE);
                RCMOCOMPONENT.ATTENTION_DATE:= NVL(RCMOCOMPONENT.ATTENTION_DATE, DTSYSDATE);

                DAMO_COMPONENT.UPDRECORD(RCMOCOMPONENT);

                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP
                (
                    RCMOCOMPONENT.COMPONENT_ID,
                    MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND
                );
                UT_TRACE.TRACE('Se realiz� la transici�n de estados para el componente '||RCMOCOMPONENT.COMPONENT_ID,11);

            END IF;
        END LOOP;


        
        IF  (BLFLAGRECONECT) THEN

            
            PR_BOSUSPENSION.RECONVOLPRODUCT
            (
                RCMOTIVE.PRODUCT_ID,
                RCSUSPENSION.SUSPENSION_TYPE_ID,
                RCSUSPENSION.ENDING_DATE,
                RCMOTIVE.MOTIVE_ID,
                SBRECONNECTBSS
            );
            UT_TRACE.TRACE('Se realiz� la reconexi�n voluntaria del producto',11);

        END IF;


        
        
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) AND
            (RCMOTIVE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_MOT)
        THEN

            
            IF  (RCMOTIVE.ATTENTION_DATE IS NULL) THEN
                DAMO_MOTIVE.UPDATTENTION_DATE(RCMOTIVE.MOTIVE_ID, DTSYSDATE);
            END IF;

            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT
            (
                RCMOTIVE.MOTIVE_ID,
                MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND
            );
            UT_TRACE.TRACE('Se realiz� la transici�n de estados para el motivo '||RCMOTIVE.MOTIVE_ID,11);

        END IF;

        
        DAMO_PACKAGES.GETRECORD(RCMOTIVE.PACKAGE_ID, RCPACKAGE);

        
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCPACKAGE.MOTIVE_STATUS_ID)) AND
            (RCPACKAGE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK)
        THEN
            
            IF  (RCPACKAGE.ATTENTION_DATE IS NULL) THEN
                DAMO_PACKAGES.UPDATTENTION_DATE(RCPACKAGE.PACKAGE_ID, DTSYSDATE);
            END IF;

            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK
            (
                RCPACKAGE.PACKAGE_ID,
                MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND
            );
            UT_TRACE.TRACE('Se realiz� la transici�n de estados para el paquete '||RCPACKAGE.PACKAGE_ID,11);

        END IF;

        UT_TRACE.TRACE('FIN: MO_BOSuspension.ReconVolPrAttention ',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO RECONNECT_VOL_PROD;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK TO RECONNECT_VOL_PROD;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RECONVOLPRATTENTION;

    PROCEDURE SUSPFINALPRODATTENTION
        (
        INUMOTIVEID      IN   MO_MOTIVE.MOTIVE_ID%TYPE
        )
    IS
        RCSUSPENSIONCOMP    DAMO_SUSPENSION_COMP.STYMO_SUSPENSION_COMP;
        RCSUSPENSION        DAMO_SUSPENSION.STYMO_SUSPENSION;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        NUSUSPENSIONTYPE    GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE;
        DTREGISTERDATE      DATE;
        DTAPPLICATIONDATE   DATE;
        DTSYSDATE           DATE :=UT_DATE.FDTSYSDATE;
    BEGIN

        UT_TRACE.TRACE('Inicia MO_BOSuspension.suspFinalProdAttention motivo['||INUMOTIVEID||']',10);

        
        FOR RCMOCOMPONENT IN MO_BCCOMPONENT.CUCOMPBYMOTIVEORDERBYFATHER(INUMOTIVEID)  LOOP

            
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOCOMPONENT.MOTIVE_STATUS_ID)
                AND RCMOCOMPONENT.MOTIVE_STATUS_ID != MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP) THEN

                
                DAMO_SUSPENSION_COMP.GETRECORD(RCMOCOMPONENT.COMPONENT_ID,RCSUSPENSIONCOMP);
                NUSUSPENSIONTYPE:= RCSUSPENSIONCOMP.SUSPENSION_TYPE_ID;
                DTREGISTERDATE:= RCSUSPENSIONCOMP.REGISTER_DATE;
                DTAPPLICATIONDATE:= RCSUSPENSIONCOMP.APLICATION_DATE;
                
                PR_BOSUSPENSION.COMPONENTFINALSUSPEND( RCMOCOMPONENT.COMPONENT_ID_PROD,
                                                       NUSUSPENSIONTYPE,
                                                       DTREGISTERDATE,
                                                       DTAPPLICATIONDATE,
                                                       RCMOCOMPONENT.COMPONENT_ID
                                                     );
                
                RCMOCOMPONENT.MEDIATION_DATE:= NVL(RCMOCOMPONENT.MEDIATION_DATE,DTSYSDATE);
                RCMOCOMPONENT.ATTENTION_DATE:= NVL(RCMOCOMPONENT.ATTENTION_DATE,DTSYSDATE);
                DAMO_COMPONENT.UPDRECORD(RCMOCOMPONENT);
                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCMOCOMPONENT.COMPONENT_ID,GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND));

            END IF;
        END LOOP;

        
        DAMO_MOTIVE.GETRECORD(INUMOTIVEID, RCMOTIVE);
        
        DAMO_SUSPENSION.GETRECORD(INUMOTIVEID,RCSUSPENSION);
        NUSUSPENSIONTYPE:= RCSUSPENSION.SUSPENSION_TYPE_ID;
        DTREGISTERDATE:= RCSUSPENSION.REGISTER_DATE;
        DTAPPLICATIONDATE:= RCSUSPENSION.APLICATION_DATE;
        
        PR_BOSUSPENSION.PRODUCTFINALSUSPEND(RCMOTIVE.PRODUCT_ID,
                                            NUSUSPENSIONTYPE,
                                            DTREGISTERDATE,
                                            DTAPPLICATIONDATE,
                                            INUMOTIVEID
                                           );
        
        DAMO_MOTIVE.UPDATTENTION_DATE(INUMOTIVEID,DTSYSDATE);
        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(INUMOTIVEID,GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND));
        
        NUPACKAGEID:=RCMOTIVE.PACKAGE_ID;
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(NUPACKAGEID,GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND));

        UT_TRACE.TRACE('Finaliza MO_BOSuspension.suspFinalProdAttention ',10);

   EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE RECONFINALPRODATTENTION
    (
        INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        CDTSYSDATE          CONSTANT DATE := UT_DATE.FDTSYSDATE;
        
        RCSUSPENSIONCOMP    DAMO_SUSPENSION_COMP.STYMO_SUSPENSION_COMP;
        RCSUSPENSION        DAMO_SUSPENSION.STYMO_SUSPENSION;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        NUSUSPENSIONTYPE    GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE;
        DTENDINGDATE        DATE;

    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOSuspension.ReconFinalProdAttention - motivo['||INUMOTIVEID||']',10);

        
        FOR RCMOCOMPONENT IN MO_BCCOMPONENT.CUCOMPBYMOTIVEORDERBYFATHER(INUMOTIVEID)  LOOP

            
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOCOMPONENT.MOTIVE_STATUS_ID)
            AND RCMOCOMPONENT.MOTIVE_STATUS_ID != MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP) THEN
            
                
                DAMO_SUSPENSION_COMP.GETRECORD(RCMOCOMPONENT.COMPONENT_ID,RCSUSPENSIONCOMP);
                NUSUSPENSIONTYPE:= RCSUSPENSIONCOMP.SUSPENSION_TYPE_ID;
                DTENDINGDATE:= RCSUSPENSIONCOMP.ENDING_DATE;
                
                
                PR_BOSUSPENSION.COMPRECONBYFINALSUSP
                (
                    RCMOCOMPONENT.COMPONENT_ID_PROD,
                    NUSUSPENSIONTYPE,
                    DTENDINGDATE,
                    RCMOCOMPONENT.COMPONENT_ID
                );
                UT_TRACE.TRACE('Se hizo la reconexi�n del componente '||RCMOCOMPONENT.COMPONENT_ID,13);
                                                    
                
                RCMOCOMPONENT.MEDIATION_DATE:= NVL(RCMOCOMPONENT.MEDIATION_DATE,CDTSYSDATE);
                RCMOCOMPONENT.ATTENTION_DATE:= NVL(RCMOCOMPONENT.ATTENTION_DATE,CDTSYSDATE);
                DAMO_COMPONENT.UPDRECORD(RCMOCOMPONENT);
                
                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP
                (
                    RCMOCOMPONENT.COMPONENT_ID,
                    GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND)
                );
                UT_TRACE.TRACE('Se ejecut� la transici�n de estados para el componente '||RCMOCOMPONENT.COMPONENT_ID,13);

            END IF;
        END LOOP;

        

        DAMO_MOTIVE.GETRECORD(INUMOTIVEID, RCMOTIVE);
        
        
        DAMO_SUSPENSION.GETRECORD(INUMOTIVEID,RCSUSPENSION);
        NUSUSPENSIONTYPE:= RCSUSPENSION.SUSPENSION_TYPE_ID;
        DTENDINGDATE:= RCSUSPENSION.ENDING_DATE;
        
        UT_TRACE.TRACE('Se realiza la reconexi�n del producto',13);
        
        PR_BOSUSPENSION.RECONPRODUCTBYFINALSUSP
        (
            RCMOTIVE.PRODUCT_ID,
            NUSUSPENSIONTYPE,
            DTENDINGDATE,
            INUMOTIVEID
        );

        
        DAMO_MOTIVE.UPDATTENTION_DATE(INUMOTIVEID,CDTSYSDATE);
        
        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT
        (
            INUMOTIVEID,
            GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND)
        );
        
        
        NUPACKAGEID:=RCMOTIVE.PACKAGE_ID;
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK
        (
            NUPACKAGEID,
            GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND)
        );

        UT_TRACE.TRACE('FIN: MO_BOSuspension.ReconFinalProdAttention ',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RECONFINALPRODATTENTION;

	FUNCTION FRFGETSUSPENSIONINFO
    RETURN CONSTANTS.TYREFCURSOR
 IS
        SBMOTIVEID   GE_BOINSTANCECONTROL.STYSBVALUE;
	BEGIN
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CSBWORK_INSTANCE, NULL, 'MO_MOTIVE', 'MOTIVE_ID', SBMOTIVEID);

        
        RETURN MO_BCSUSPENSION.FRFGETSUSPENSIONINFO(TO_NUMBER(SBMOTIVEID));
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    PROCEDURE GENERATESUSPENSION
    (
        INUMOTIVEID             IN MO_SUSPENSION.MOTIVE_ID%TYPE,
        INUSUSPENSIONTYPEID     IN MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE,
        IDTAPLICATIONDATE       IN MO_SUSPENSION.APLICATION_DATE%TYPE,
        IDTENDINGDATE           IN MO_SUSPENSION.ENDING_DATE%TYPE,
        IDTREGISTERDATE         IN MO_SUSPENSION.REGISTER_DATE%TYPE DEFAULT UT_DATE.FDTSYSDATE
    )
    IS
        RCSUSPENSION        DAMO_SUSPENSION.STYMO_SUSPENSION;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.GenerateSuspension',12);

        RCSUSPENSION.MOTIVE_ID          := INUMOTIVEID;
        RCSUSPENSION.SUSPENSION_TYPE_ID := INUSUSPENSIONTYPEID;
        RCSUSPENSION.APLICATION_DATE    := IDTAPLICATIONDATE;
        RCSUSPENSION.ENDING_DATE        := IDTENDINGDATE;
        RCSUSPENSION.REGISTER_DATE      := NVL(IDTREGISTERDATE, UT_DATE.FDTSYSDATE);

        DAMO_SUSPENSION.INSRECORD(RCSUSPENSION);

        UT_TRACE.TRACE('Fin MO_BOSuspension.GenerateSuspension',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENERATESUSPENSION;

    
















    PROCEDURE GENERATESUSPCOMP
    (
        INUCOMPONENTID          IN MO_SUSPENSION_COMP.COMPONENT_ID%TYPE,
        INUSUSPENSIONTYPEID     IN MO_SUSPENSION_COMP.SUSPENSION_TYPE_ID%TYPE,
        IDTAPLICATIONDATE       IN MO_SUSPENSION_COMP.APLICATION_DATE%TYPE,
        IDTENDINGDATE           IN MO_SUSPENSION_COMP.ENDING_DATE%TYPE,
        IDTREGISTERDATE         IN MO_SUSPENSION_COMP.REGISTER_DATE%TYPE DEFAULT UT_DATE.FDTSYSDATE
    )
    IS
        RCSUSPCOMP      DAMO_SUSPENSION_COMP.STYMO_SUSPENSION_COMP;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.GenerateSuspComp',12);

        RCSUSPCOMP.COMPONENT_ID         := INUCOMPONENTID;
        RCSUSPCOMP.SUSPENSION_TYPE_ID   := INUSUSPENSIONTYPEID;
        RCSUSPCOMP.APLICATION_DATE      := IDTAPLICATIONDATE;
        RCSUSPCOMP.ENDING_DATE          := IDTENDINGDATE;
        RCSUSPCOMP.REGISTER_DATE        := NVL(IDTREGISTERDATE, UT_DATE.FDTSYSDATE);

        DAMO_SUSPENSION_COMP.INSRECORD(RCSUSPCOMP);

        UT_TRACE.TRACE('Fin MO_BOSuspension.GenerateSuspComp',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENERATESUSPCOMP;

    


































    PROCEDURE GENERATEPACKAGE
    (
        INUPRODUCTID                IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPACKTYPEID               IN  MO_PACKAGES.PACKAGE_TYPE_ID%TYPE,
        INUPRODMOTIID               IN  PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        INUPRODMOTICOMPID           IN  PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE,
        INUSUSPENSIONTYPEID         IN  MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE,
        ONUPACKAGEID                OUT MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUMOTIVEID                 OUT MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        CNUPERSONID                 CONSTANT GE_PERSON.PERSON_ID%TYPE          := GE_BOPERSONAL.FNUGETPERSONID;
        CSBSYSDATE                  CONSTANT DATE := UT_DATE.FDTSYSDATE;

        RCPRODUCT                   PR_BOPRODUCTMANAGER.TYRCPRODUCT;
        RCSUBSCRIPTION              SUSCRIPC%ROWTYPE;
        RCPACKAGE                   DAMO_PACKAGES.STYMO_PACKAGES;
        RCADDRESS                   DAAB_ADDRESS.STYAB_ADDRESS;
        RCMOTIVE                    DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKTYPE                  DAPS_PACKAGE_TYPE.STYPS_PACKAGE_TYPE;
        RCPRODMOTI                  DAPS_PRODUCT_MOTIVE.STYPS_PRODUCT_MOTIVE;
        RCPRODMOTICOMP              DAPS_PROD_MOTIVE_COMP.STYPS_PROD_MOTIVE_COMP;
        
        RCPACKAGEASSO               DAMO_PACKAGES_ASSO.STYMO_PACKAGES_ASSO;
        NUDEBTNEGOTPACKAGEID        GC_DEBT_NEGOTIATION.PACKAGE_ID%TYPE;

        
























        PROCEDURE GENERATECOMPONENT
        (
            IRCPR_COMPONENT     IN  DAPR_COMPONENT.STYPR_COMPONENT,
            INUCOMPPARENTID     IN  MO_COMP_LINK.FATHER_COMPONENT_ID%TYPE,
            INUCOMPSTATUSID     IN  MO_COMPONENT.MOTIVE_STATUS_ID%TYPE,
            ORCMO_COMPONENT     OUT DAMO_COMPONENT.STYMO_COMPONENT
        )
        IS
        BEGIN
            UT_TRACE.TRACE('Inicia MO_BOSuspension.GeneratePackage.GenerateComponent',12);

            
            MO_BOUTILGENERATEREQUEST.GENERATECOMPONENT
            (
                INUPRDMOTCOMPID=>RCPRODMOTICOMP.PROD_MOTIVE_COMP_ID,
                ISBTAGNAME=>RCPRODMOTICOMP.TAG_NAME,
                INUMOTISTATUSID=>INUCOMPSTATUSID,
                INUFATHERCOMP=>INUCOMPPARENTID,
                INUPENDINGCOMP=>NULL,
                IRCMOTIVE=>RCMOTIVE,
                IRCPRCOMPONENT=>IRCPR_COMPONENT,
                ORCMO_COMPONENT=>ORCMO_COMPONENT,
                ISBPENDCOMPDEPENDENT=>CC_BOCONSTANTS.CSBSI
            );

            
            MO_BOSUSPENSION.GENERATESUSPCOMP
            (
                INUCOMPONENTID=>ORCMO_COMPONENT.COMPONENT_ID,
                INUSUSPENSIONTYPEID=>INUSUSPENSIONTYPEID,
                IDTAPLICATIONDATE=>CSBSYSDATE,
                IDTENDINGDATE=>CSBSYSDATE,
                IDTREGISTERDATE=>CSBSYSDATE
            );

            UT_TRACE.TRACE('Fin MO_BOSuspension.GeneratePackage.GenerateComponent',12);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END GENERATECOMPONENT;

        PROCEDURE GENERATECOMPONENTS
        (
            ITBCOMPOSITION      IN  PR_BOPRODUCTMANAGER.TYTBVARCHAR2,
            ISBPARENTIDX        IN  VARCHAR2,
            INUCOMPPARENTID     IN  MO_COMP_LINK.FATHER_COMPONENT_ID%TYPE
        )
        IS
            SBCHILDIDX          PR_BOPRODUCTMANAGER.STYINDEX;
            NUCOMPSTATUSID      MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
            RCPR_COMPONENT      DAPR_COMPONENT.STYPR_COMPONENT;
            RCMO_COMPONENT      DAMO_COMPONENT.STYMO_COMPONENT;
        BEGIN
            UT_TRACE.TRACE('Inicia MO_BOSuspension.GeneratePackage.GenerateComponents',12);

            IF (ITBCOMPOSITION.EXISTS(ISBPARENTIDX)) THEN
                SBCHILDIDX := ITBCOMPOSITION(ISBPARENTIDX).FIRST;
                WHILE (SBCHILDIDX IS NOT NULL) LOOP
                    IF (ITBCOMPOSITION(ISBPARENTIDX)(SBCHILDIDX) = PR_BOPRODUCTMANAGER.CNUNULL) THEN
                        NUCOMPSTATUSID := MO_BOUTILGENERATEREQUEST.FNUREGSTATUSCOMP;
                    ELSE
                        NUCOMPSTATUSID := TO_NUMBER(ITBCOMPOSITION(ISBPARENTIDX)(SBCHILDIDX));
                    END IF;

                    
                    IF (RCPRODUCT.TBCOMPONENT.EXISTS(SBCHILDIDX)) THEN
                        RCPR_COMPONENT := RCPRODUCT.TBCOMPONENT(SBCHILDIDX).RCDATA;
                    ELSE
                        RCPR_COMPONENT := NULL;
                    END IF;

                    
                    IF  (RCPR_COMPONENT.COMPONENT_ID IS NOT NULL) AND
                        (PS_BOPRODSERVMANAGER.FRCGETCOMPONENTTYPE(RCPR_COMPONENT.COMPONENT_TYPE_ID).SUSPEND_ALLOWED = GE_BOCONSTANTS.CSBYES)
                    THEN
                        
                        GENERATECOMPONENT
                        (
                            IRCPR_COMPONENT=>RCPR_COMPONENT,
                            INUCOMPPARENTID=>INUCOMPPARENTID,
                            INUCOMPSTATUSID=>NUCOMPSTATUSID,
                            ORCMO_COMPONENT=>RCMO_COMPONENT
                        );

                        
                        GENERATECOMPONENTS
                        (
                            ITBCOMPOSITION=>ITBCOMPOSITION,
                            ISBPARENTIDX=>SBCHILDIDX,
                            INUCOMPPARENTID=>RCMO_COMPONENT.COMPONENT_ID
                        );

                    END IF;

                    SBCHILDIDX := ITBCOMPOSITION(ISBPARENTIDX).NEXT(SBCHILDIDX);
                END LOOP;
            END IF;

            UT_TRACE.TRACE('Fin MO_BOSuspension.GeneratePackage.GenerateComponents',12);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END GENERATECOMPONENTS;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.GeneratePackage',11);

        
        RCPRODUCT := PR_BOPRODUCTMANAGER.FRCGETACTIVEPRODUCT(INUPRODUCTID);
        UT_TRACE.TRACE('Se obtuvo el registro del producto con sus componentes.',12);

        
        RCPACKTYPE := DAPS_PACKAGE_TYPE.FRCGETRECORD(INUPACKTYPEID);

        
        RCPRODMOTI := DAPS_PRODUCT_MOTIVE.FRCGETRECORD(INUPRODMOTIID);

        
        IF  (INUPRODMOTICOMPID IS NOT NULL) THEN
            RCPRODMOTICOMP := DAPS_PROD_MOTIVE_COMP.FRCGETRECORD(INUPRODMOTICOMPID);
        ELSE
            RCPRODMOTICOMP := PS_BOPRODUCTMOTIVECOMP.FRCGETMAINCOMPBYPRODMOTI(RCPRODMOTI.PRODUCT_MOTIVE_ID);
        END IF;

        
        DAGE_SUSPENSION_TYPE.ACCKEY(INUSUSPENSIONTYPEID);

        
        IF  (RCPRODUCT.RCDATA.ADDRESS_ID IS NOT NULL) THEN
            RCADDRESS := DAAB_ADDRESS.FRCGETRECORD(RCPRODUCT.RCDATA.ADDRESS_ID);
        END IF;

        
        IF  (RCPRODUCT.RCDATA.SUBSCRIPTION_ID IS NOT NULL) THEN
            RCSUBSCRIPTION := PKTBLSUSCRIPC.FRCGETRECORD(RCPRODUCT.RCDATA.SUBSCRIPTION_ID, PKCONSTANTE.NOCACHE);
        END IF;

        BEGIN

            SAVEPOINT GENERATE_PACKAGE_SUSPENSION;

            
            MO_BOUTILGENERATEREQUEST.GENERATEPACKAGE
            (
                INUPACKAGEID=>NULL,
                INUPACKTYPEID=>RCPACKTYPE.PACKAGE_TYPE_ID,
                ISBTAGNAME=>RCPACKTYPE.TAG_NAME,
                IDTREQUESTDATE=>CSBSYSDATE,
                INUMOTISTATUSID=>MO_BOUTILGENERATEREQUEST.FNUREGSTATUSPACK,
                INUPOSOPERUNITID=>GE_BOPERSONAL.FNUGETCURRENTCHANNEL(CNUPERSONID, FALSE),
                INUPERSONID=>CNUPERSONID,
                INUSUBSCRIBERID=>RCSUBSCRIPTION.SUSCCLIE,
                INUCOMPANYID=>RCPRODUCT.RCDATA.COMPANY_ID,
                ISBCOMMENT=>NULL,
                INUCUSTCAREREQNUM=>NULL,
                INUANSID=>NULL,
                INUDOCTYPEID=>NULL,
                INUDOCKEY=>NULL,
                INURECEPTIONTYPEID=>NULL,
                INUANSWERADDRESSID=>NULL,
                INUCONTACTID=>NULL,
                INUPARENTPACK=>NULL,
                ISBPARENTDEPENDENT=>CC_BOCONSTANTS.CSBNO,
                ORCMO_PACKAGES=>RCPACKAGE
            );
            
            UT_TRACE.TRACE('Solicitud de reconexi�n: '||RCPACKAGE.PACKAGE_ID,12);

            
            MO_BOUTILGENERATEREQUEST.GENERATEMOTIVE
            (
                INUPRODMOTIID=>RCPRODMOTI.PRODUCT_MOTIVE_ID,
                ISBTAGNAME=>RCPRODMOTI.TAG_NAME,
                IDTREGISTERDATE=>UT_DATE.FDTSYSDATE,
                INUMOTIVETYPEID=>RCPRODMOTI.MOTIVE_TYPE_ID,
                INUMOTISTATUSID=>MO_BOUTILGENERATEREQUEST.FNUREGSTATUSMOTI,
                INUPACKAGEID=>RCPACKAGE.PACKAGE_ID,
                INUCUSTREQNUM=>RCPACKAGE.CUST_CARE_REQUES_NUM,
                INUCOMPANYID=>RCPRODUCT.RCDATA.COMPANY_ID,
                INUMOTICAUSAL=>NULL,
                INUSUBSCRIPTIONID=>RCPRODUCT.RCDATA.SUBSCRIPTION_ID,
                INUPRODUCTID=>RCPRODUCT.RCDATA.PRODUCT_ID,
                INUPRODTYPEID=>RCPRODUCT.RCDATA.PRODUCT_TYPE_ID,
                ISBSERVICENUMBER=>RCPRODUCT.RCDATA.SERVICE_NUMBER,
                INUCOMMPLANID=>RCPRODUCT.RCDATA.COMMERCIAL_PLAN_ID,
                INUPERMANECE=>NULL,
                INUCATEGORYID=>RCPRODUCT.RCDATA.CATEGORY_ID,
                INUSUBCATEGORYID=>RCPRODUCT.RCDATA.SUBCATEGORY_ID,
                INUADDRESSID=>RCADDRESS.ADDRESS_ID,
                ISBADDRESS=>RCADDRESS.ADDRESS,
                INUGEOLOCAID=>RCADDRESS.GEOGRAP_LOCATION_ID,
                INUPENDINGMOTIVE=>NULL,
                ISBPENDMOTDEPENDENT=>CC_BOCONSTANTS.CSBSI,
                ORCMO_MOTIVE=>RCMOTIVE
            );

            
            MO_BOSUSPENSION.GENERATESUSPENSION
            (
                INUMOTIVEID=>RCMOTIVE.MOTIVE_ID,
                INUSUSPENSIONTYPEID=>INUSUSPENSIONTYPEID,
                IDTAPLICATIONDATE=>CSBSYSDATE,
                IDTENDINGDATE=>CSBSYSDATE,
                IDTREGISTERDATE=>CSBSYSDATE
            );

            
            GENERATECOMPONENTS
            (
                ITBCOMPOSITION=>RCPRODUCT.TBCOMPOSITION,
                ISBPARENTIDX=>PR_BOPRODUCTMANAGER.CNUNULL,
                INUCOMPPARENTID=>NULL
            );

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                ROLLBACK TO GENERATE_PACKAGE_SUSPENSION;
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ROLLBACK TO GENERATE_PACKAGE_SUSPENSION;
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;
        
        
        NUDEBTNEGOTPACKAGEID := GC_BODEBTNEGOTIATION.FNUGETDEBTNEGOTPACKAGE;
        UT_TRACE.TRACE('Id de la solicitud de negociaci�n: '||NUDEBTNEGOTPACKAGEID ,12);
        
        IF (NUDEBTNEGOTPACKAGEID IS NOT NULL) THEN
            
            RCPACKAGEASSO.PACKAGE_ID := RCPACKAGE.PACKAGE_ID;
            RCPACKAGEASSO.PACKAGE_ID_ASSO := NUDEBTNEGOTPACKAGEID;
            RCPACKAGEASSO.PACKAGES_ASSO_ID := MO_BOSEQUENCES.FNUGETSEQ_MO_PACKAGES_ASSO;
            RCPACKAGEASSO.ANNUL_DEPENDENT := NULL;

            DAMO_PACKAGES_ASSO.INSRECORD(RCPACKAGEASSO);
            UT_TRACE.TRACE('Se cre� la solicitud de paquetes No. '||RCPACKAGEASSO.PACKAGES_ASSO_ID ,12);

            
            GC_BODEBTNEGOTIATION.SETDEBTNEGOTPACKAGE(NULL);
        END IF;

        
        ONUPACKAGEID := RCPACKAGE.PACKAGE_ID;

        
        ONUMOTIVEID := RCMOTIVE.MOTIVE_ID;

        UT_TRACE.TRACE('Fin: MO_BOSuspension.GeneratePackage',11);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENERATEPACKAGE;

    
















    FUNCTION FNUCOUNTPENDPRODSUSPS
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID     IN  MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN  NUMBER
    IS
    BEGIN
        UT_TRACE.TRACE('PR_BOSuspension.fnuCountProdActiSusps['||INUPRODUCTID||']',10);

        
        RETURN MO_BCSUSPENSION.FNUCOUNTPENDPRODSUSPRECON(INUPRODUCTID, PR_BOSUSPENSION.CNUMOTIVE_TYPE_SUSP, INUSUSPENSIONTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNTPENDPRODSUSPS;

    
















    FUNCTION FNUCOUNTPENDPRODRECONS
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID     IN  MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN  NUMBER
    IS
    BEGIN
        UT_TRACE.TRACE('PR_BOSuspension.fnuCountPendProdRecons['||INUPRODUCTID||']',10);

        
        RETURN  MO_BCSUSPENSION.FNUCOUNTPENDPRODSUSPRECON(INUPRODUCTID, PR_BOSUSPENSION.CNUMOTIVE_TYPE_CONN, INUSUSPENSIONTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNTPENDPRODRECONS;

    



























    PROCEDURE RECONBYPAYATTENTION
    (
        INUMOTIVEID      IN   MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        CDTSYSDATE         CONSTANT DATE := UT_DATE.FDTSYSDATE;
        
        RCBSSORDER         SUSPCONE%ROWTYPE;
        RCORDERACTIVITY    DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        RCORDER            DAOR_ORDER.STYOR_ORDER;

        RCMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGE          DAMO_PACKAGES.STYMO_PACKAGES;
        RCCAUSAL           DAGE_CAUSAL.STYGE_CAUSAL;

        BLREGEN            BOOLEAN;
        NUORDERACTID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        TBCHILDACTIV       DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;
        INDX               BINARY_INTEGER;

    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.ReconByPayAttention Motive['||INUMOTIVEID||']',10);

        SAVEPOINT RECONNECT_BY_PAY_PROD;

        
        RCMOTIVE    := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        
        RCBSSORDER  := PKBCSUSPCONE.FRCGETRECORDBYTYPE(RCMOTIVE.PRODUCT_ID, PKSUSPCONNSERVICE.CSBCONEXION);

        
        IF  (RCBSSORDER.SUCOACTIV_ID IS NOT NULL) THEN

            
            NUORDERACTID :=  RCBSSORDER.SUCOACTIV_ID;

            TBCHILDACTIV.DELETE;

             
            OR_BCREGENERAACTIVID.GETCHILDACTIVITIES(NUORDERACTID,TBCHILDACTIV);

            
            IF TBCHILDACTIV.COUNT > 0 THEN
                INDX := TBCHILDACTIV.LAST;
                NUORDERACTID :=  TBCHILDACTIV(INDX).ORDER_ACTIVITY_ID;
            END IF;

            
            
            RCORDER         := DAOR_ORDER.FRCGETRECORD(DAOR_ORDER_ACTIVITY.FNUGETORDER_ID(NUORDERACTID));

            UT_TRACE.TRACE('La orden de reconex encontrada es: ['||RCORDER.ORDER_ID||']',10);

            
            RCCAUSAL        := DAGE_CAUSAL.FRCGETRECORD(RCORDER.CAUSAL_ID);

            
            RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(OR_BCORDERACTIVITIES.FNUGETORIGINORDERACTIVITYID(RCBSSORDER.SUCOACTIV_ID));

            
            PKBCSUSPCONE.UPORDERNUMBER
            (
                RCBSSORDER.SUCOIDSC,
                RCORDERACTIVITY.ORDER_ID,
                RCORDERACTIVITY.ORDER_ACTIVITY_ID,
                RCBSSORDER.SUCOORDTYPE,
                PKCONSTANTE.NO
            );

            
            
            
            

            
            IF  ((RCCAUSAL.CLASS_CAUSAL_ID = MO_BOCAUSAL.FNUGETSUCCESS) AND
                 (RCCAUSAL.CAUSAL_TYPE_ID <> CNUANNUL_CAUSAL_TYPE)) THEN

                
                OR_BOLEGALACTPRODTYPESTAT.PRODUCTRECONECT
                (
                    RCMOTIVE.PRODUCT_ID,
                    RCBSSORDER.SUCOIDSC,
                    RCBSSORDER.SUCOORDTYPE,
                    RCORDER.EXECUTION_FINAL_DATE,
                    RCORDER.CAUSAL_ID
                );

            
            ELSIF  (RCCAUSAL.CAUSAL_TYPE_ID = CNUANNUL_CAUSAL_TYPE)
            THEN

                
                OR_BOLEGALACTPRODTYPESTAT.ANULLPRODUCTRECONNECT
                (
                    RCMOTIVE.PRODUCT_ID,
                    RCORDERACTIVITY.ORDER_ACTIVITY_ID
                );

            END IF;
        
        ELSE
            
            OR_BOLEGALACTPRODTYPESTAT.PRODUCTRECONECT
            (
                RCMOTIVE.PRODUCT_ID,
                RCBSSORDER.SUCOIDSC,
                RCBSSORDER.SUCOORDTYPE,
                NVL(RCMOTIVE.ATTENTION_DATE, CDTSYSDATE)
            );

        END IF;

        
        FOR RCMOCOMPONENT IN MO_BCCOMPONENT.CUCOMPBYMOTIVEORDERBYFATHER(RCMOTIVE.MOTIVE_ID) LOOP

            RCMOCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(RCMOCOMPONENT.COMPONENT_ID);

            
            IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOCOMPONENT.MOTIVE_STATUS_ID)) AND
                (RCMOCOMPONENT.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_COMP)
            THEN
                
                RCMOCOMPONENT.MEDIATION_DATE    := NVL(RCMOCOMPONENT.MEDIATION_DATE, CDTSYSDATE);
                RCMOCOMPONENT.ATTENTION_DATE    := NVL(RCMOCOMPONENT.ATTENTION_DATE, CDTSYSDATE);

                DAMO_COMPONENT.UPDRECORD(RCMOCOMPONENT);

                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCMOCOMPONENT.COMPONENT_ID, MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND);

            END IF;

        END LOOP;

        
        RCMOTIVE    := DAMO_MOTIVE.FRCGETRECORD(RCMOTIVE.MOTIVE_ID);

        
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) AND
            (RCMOTIVE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_MOT)
        THEN
            
            IF  (RCMOTIVE.ATTENTION_DATE IS NULL) THEN
                DAMO_MOTIVE.UPDATTENTION_DATE(RCMOTIVE.MOTIVE_ID, CDTSYSDATE);
            END IF;

            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCMOTIVE.MOTIVE_ID, MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND);

        END IF;

        
        RCPACKAGE   := DAMO_PACKAGES.FRCGETRECORD(RCMOTIVE.PACKAGE_ID);

        
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCPACKAGE.MOTIVE_STATUS_ID)) AND
            (RCPACKAGE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK)
        THEN
            
            IF  (RCPACKAGE.ATTENTION_DATE IS NULL) THEN
                DAMO_PACKAGES.UPDATTENTION_DATE(RCPACKAGE.PACKAGE_ID, CDTSYSDATE);
            END IF;

            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(RCPACKAGE.PACKAGE_ID, MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND);

        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOSuspension.ReconByPayAttention ',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO RECONNECT_BY_PAY_PROD;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK TO RECONNECT_BY_PAY_PROD;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RECONBYPAYATTENTION;

    
















    PROCEDURE ADDNOTPRODRECOVRESTRI
    (
        INUPACKAGEID  IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
       	RCRESTRICTION           DAMO_RESTRICTION.STYMO_RESTRICTION;
        NUPRODUCTID             MO_MOTIVE.PRODUCT_ID%TYPE;
        DTREQUESTDATE           MO_PACKAGES.REQUEST_DATE%TYPE;
        
        CNURESTRIC_TYPE_ID      CONSTANT MO_RESTRICTION_TYPE.RESTRICTION_TYPE_ID%TYPE := 11;
        CNUSUSPENSIONDEF        CONSTANT GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE := 12;

    BEGIN

        NUPRODUCTID := MO_BOPACKAGES.FNUFINDPRODUCTID(INUPACKAGEID);
        DTREQUESTDATE := DAMO_PACKAGES.FDTGETREQUEST_DATE(INUPACKAGEID);

         
        IF(PR_BOSUSPENSION.FSBVALIDACTIVEPRODSUSP(NUPRODUCTID,CNUSUSPENSIONDEF) = GE_BOCONSTANTS.CSBYES) THEN
            
            DAMO_RESTRICTION_TYPE.ACCKEY(CNURESTRIC_TYPE_ID);

            RCRESTRICTION.PACKAGE_ID            := INUPACKAGEID;
            RCRESTRICTION.RESTRICTION_TYPE_ID   := CNURESTRIC_TYPE_ID;
            RCRESTRICTION.REGISTER_DATE         := DTREQUESTDATE;
            RCRESTRICTION.ACTIVE_FLAG           := MO_BOPARAMETER.FSBGETYES;
            RCRESTRICTION.RESTRICTION_ID        := MO_BOSEQUENCES.FNUGETSEQRESTRICTION;
            
            DAMO_RESTRICTION.INSRECORD(RCRESTRICTION);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDNOTPRODRECOVRESTRI;

    


























    PROCEDURE VALIDSUSPENSIONPERIOD
    (
        IDTAPLICATIONDATE   IN MO_SUSPENSION_COMP.APLICATION_DATE%TYPE,
        IDTENDINGDATE       IN MO_SUSPENSION_COMP.ENDING_DATE%TYPE,
        INUPRODUCTMOTIVEID  IN MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        INUCOMPONENTIDPROD  IN MO_COMPONENT.COMPONENT_ID_PROD%TYPE
    )
    IS
        NUSUSPENSIONPERIOD  NUMBER := NULL;
        NUPERIODMAXSUSP     NUMBER;
        SBCALCCURRENTYEAR   VARCHAR2(1);
        DTCOMPAREDATE       DATE;

        EXSUSPPERIODGREATER EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.ValidSuspensionPeriod. Inicio:['||IDTAPLICATIONDATE||']',2);
        UT_TRACE.TRACE('Fin:['||IDTENDINGDATE||']Motivo Producto: ['||INUPRODUCTMOTIVEID||']Comp de Producto:['||INUCOMPONENTIDPROD||']',3);

        
        DAPS_PRODUCT_MOTIVE.ACCKEY(INUPRODUCTMOTIVEID);
        
        NUSUSPENSIONPERIOD := TRUNC(IDTENDINGDATE) - TRUNC(IDTAPLICATIONDATE);
        
        NUPERIODMAXSUSP := PS_BOPRODMOTIPARAM.FSBGETPRODMOTIPARAM(INUPRODUCTMOTIVEID,CNUPERIODMAXSUSP,TRUE);
        UT_TRACE.TRACE('Periodo de Suspensi�n Permitido : ['||NUPERIODMAXSUSP||']',4);
        


        SBCALCCURRENTYEAR := PS_BOPRODMOTIPARAM.FSBGETPRODMOTIPARAM(INUPRODUCTMOTIVEID,CNUCALCCURRENTYEAR,TRUE);
        UT_TRACE.TRACE('Flag de Calculo de A�o Actual : ['||SBCALCCURRENTYEAR||']',4);

        
        IF (SBCALCCURRENTYEAR = MO_BOPARAMETER.FSBGETYES) THEN
            DTCOMPAREDATE := TRUNC(IDTAPLICATIONDATE,'YEAR') - 1;

            
            IF (IDTENDINGDATE > TRUNC(IDTAPLICATIONDATE + UT_DATE.FNUGETDAYBYYEAR,'YEAR'))
            THEN

                
                IF ((IDTENDINGDATE - TRUNC(IDTAPLICATIONDATE + UT_DATE.FNUGETDAYBYYEAR,'YEAR') - 1) > NUPERIODMAXSUSP)
                THEN
                    RAISE EXSUSPPERIODGREATER;
                END IF;

                
                IF ((TRUNC(IDTAPLICATIONDATE + UT_DATE.FNUGETDAYBYYEAR,'YEAR') - IDTAPLICATIONDATE - 1) > NUPERIODMAXSUSP)
                THEN
                    RAISE EXSUSPPERIODGREATER;
                ELSE
                    
                    NUSUSPENSIONPERIOD := TRUNC(IDTAPLICATIONDATE + UT_DATE.FNUGETDAYBYYEAR,'YEAR') - IDTAPLICATIONDATE - 1;
                END IF;
            END IF;

            
            IF (IDTENDINGDATE < TRUNC(IDTAPLICATIONDATE + UT_DATE.FNUGETDAYBYYEAR,'YEAR'))
            THEN
                IF (NUSUSPENSIONPERIOD > NUPERIODMAXSUSP) THEN
                    RAISE EXSUSPPERIODGREATER;
                END IF;
            END IF;
        END IF;

        
        IF (SBCALCCURRENTYEAR = MO_BOPARAMETER.FSBGETNO) THEN
            DTCOMPAREDATE := TRUNC(IDTENDINGDATE) - UT_DATE.FNUGETDAYBYYEAR;
            IF (NUSUSPENSIONPERIOD > NUPERIODMAXSUSP) THEN
                RAISE EXSUSPPERIODGREATER;
            END IF;
        END IF;

        UT_TRACE.TRACE('Periodo Solicitado:['||NUSUSPENSIONPERIOD||']Fecha de Comparaci�n:['||DTCOMPAREDATE||']',4);

        
        PR_BOSUSPENSION.VALIDSUSPENSIONSTOTAL(INUCOMPONENTIDPROD,DTCOMPAREDATE,NUSUSPENSIONPERIOD,NUPERIODMAXSUSP);

        UT_TRACE.TRACE('Finaliza MO_BOSuspension.ValidSuspensionPeriod',2);
    EXCEPTION
        WHEN EXSUSPPERIODGREATER THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUSUSPPERIODGREATER,
                TO_CHAR(IDTAPLICATIONDATE) || '|' || TO_CHAR(IDTENDINGDATE)
                );
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDSUSPENSIONPERIOD;
    



















    PROCEDURE VALIDSUSPENSIONDATECHANGE
    (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        IDTAPLICATIONDATE   IN MO_SUSPENSION.APLICATION_DATE%TYPE,
        IDTENDINGDATE       IN MO_SUSPENSION.ENDING_DATE%TYPE
    )
    IS
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        RCSUSPENSION        DAMO_SUSPENSION.STYMO_SUSPENSION;
        SBSERVICENUMBER     PR_PRODUCT.SERVICE_NUMBER%TYPE;
        NUCOMPONENTTYPEID   PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
        NUCOMPONENTID       PR_COMPONENT.COMPONENT_ID%TYPE;
        DTSYSDATE           DATE := UT_DATE.FDTSYSDATE;
        CSBPARSUSPINIUNIT   VARCHAR2(20) := 'SUSP_INI_WF_UNI_TYP';
        CSBPARSUSPENDUNIT   VARCHAR2(20) := 'SUSP_END_WF_UNIT_TYP';

    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.ValidSuspensionDateChange. Motivo:['||INUMOTIVEID||']',8);
        UT_TRACE.TRACE('Aplicacion:['||IDTAPLICATIONDATE||']Fin:['||IDTENDINGDATE||']',9);

        
        IF IDTAPLICATIONDATE IS NULL THEN
            ERRORS.SETERROR(CNUAPLICATIONDATEISNULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF IDTENDINGDATE IS NULL THEN
            ERRORS.SETERROR(CNUENDINGDATEISNULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        
        SBSERVICENUMBER := DAPR_PRODUCT.FSBGETSERVICE_NUMBER(RCMOTIVE.PRODUCT_ID);
        UT_TRACE.TRACE('Numero:['||SBSERVICENUMBER||']',9);

        
        NUCOMPONENTTYPEID := DAPS_PROD_MOTI_PARAM.FSBGETVALUE(RCMOTIVE.PRODUCT_MOTIVE_ID,CNUCOMPTYPESUSPEND);
        UT_TRACE.TRACE('Tipo Componente Suspendible:['||NUCOMPONENTTYPEID||']',9);

        
        PR_BOCOMPONENT.GETCOMPONENTID(RCMOTIVE.PRODUCT_ID,SBSERVICENUMBER,NUCOMPONENTTYPEID,NUCOMPONENTID);
        UT_TRACE.TRACE('Componente Suspendible:['||NUCOMPONENTID||']',9);

        
        VALIDSUSPENSIONPERIOD(IDTAPLICATIONDATE,IDTENDINGDATE,RCMOTIVE.PRODUCT_MOTIVE_ID,NUCOMPONENTID);

        
        RCSUSPENSION := DAMO_SUSPENSION.FRCGETRECORD(INUMOTIVEID);
        UT_TRACE.TRACE('Aplicacion Actual:['||RCSUSPENSION.APLICATION_DATE||']Fin Actual:['||RCSUSPENSION.ENDING_DATE||']',9);

        
        IF  IDTAPLICATIONDATE = RCSUSPENSION.APLICATION_DATE
          AND IDTENDINGDATE = RCSUSPENSION.ENDING_DATE THEN
            ERRORS.SETERROR(CNUDATESEQUALS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        

        IF IDTAPLICATIONDATE <> RCSUSPENSION.APLICATION_DATE THEN

            MO_BOPROVISIONAL.VALIDDATECHANGE(INUMOTIVEID,IDTAPLICATIONDATE,
                                             RCMOTIVE.PRODUCT_MOTIVE_ID,
                                             GE_BOPARAMETER.FNUGET(CSBPARSUSPINIUNIT),
                                             DTSYSDATE);
        END IF;

        
        IF IDTENDINGDATE <> RCSUSPENSION.ENDING_DATE THEN

            MO_BOPROVISIONAL.VALIDDATECHANGE(INUMOTIVEID,IDTENDINGDATE,
                                             RCMOTIVE.PRODUCT_MOTIVE_ID,
                                             GE_BOPARAMETER.FNUGET(CSBPARSUSPENDUNIT),DTSYSDATE);
        END IF;
        UT_TRACE.TRACE('Finaliza MO_BOSuspension.ValidSuspensionDateChange',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDSUSPENSIONDATECHANGE;

    














    PROCEDURE VALQUANTITYSUSPEBYPROD
    (
        INUPRODUCTID  IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS

        SBPACKPARAMVALUE    PS_PACK_TYPE_PARAM.VALUE%TYPE;
        SBPRODPARAMVALUE    PS_PACK_TYPE_PARAM.VALUE%TYPE;
        NUPRODUCTTYPEID     PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;
        NUSERVICETYPEID     GE_SERVICE_TYPE.SERVICE_TYPE_ID%TYPE;
        CURFSUSPVOLACTIVE   CONSTANTS.TYREFCURSOR;
        CURFPACKSUSPVOL     CONSTANTS.TYREFCURSOR;
        RFPR_SUSPENSIONVOL  DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        RFPR_SOLSUSPVOL     DAMO_MOTIVE.STYMO_MOTIVE;
        NUSUSPVOLPRODCONT   NUMBER;

    BEGIN
        UT_TRACE.TRACE('Inicia ValQuantitySuspeByProd  producto'||INUPRODUCTID||'',9);
        
        NUPRODUCTTYPEID   := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCTID);
        
        NUSERVICETYPEID   := PKTBLSERVICIO.FNUGETSERVICE_TYPE_ID(NUPRODUCTTYPEID);
        
        SBPACKPARAMVALUE  := PS_BOPACKTYPEPARAM.FSBGETPACTYPPARBYTAG(PS_BOPACKAGETYPE.CSBTAGGENERSUSPVOL,CNUATTRNUMSUSPVOL ,TRUE);
        
        SBPRODPARAMVALUE  := PS_BOPRODMOTIPARAM.FSBGETPRMOTPARBYTAG(CSBTAGGENERSUSPEVOL,CNUATTRNUMSOLSUSPVOL,TRUE);

        IF  NUSERVICETYPEID != GE_BOPARAMETER.FNUGET('SERVICETYPEUTILITIES')
            AND SBPACKPARAMVALUE = GE_BOPARAMETER.FSBGET('YES') THEN
            UT_TRACE.TRACE('ValQuantitySuspeByProd_Validaci�n',9);
            
            CURFSUSPVOLACTIVE := PR_BCSUSPENSION.FRFPRODSUSPENSIONBYYEAR(INUPRODUCTID,UT_DATE.FDTSYSDATE);
            
            CURFPACKSUSPVOL   := MO_BCMOTIVE.FRFMOTIVEBYPRODUCTID(INUPRODUCTID,CSBTAGGENERSUSPEVOL);
            NUSUSPVOLPRODCONT := 0;
            LOOP FETCH CURFSUSPVOLACTIVE INTO RFPR_SUSPENSIONVOL;
                EXIT WHEN CURFSUSPVOLACTIVE%NOTFOUND;
                NUSUSPVOLPRODCONT := NUSUSPVOLPRODCONT + 1;
            END LOOP;
            
            IF  SBPRODPARAMVALUE <= NUSUSPVOLPRODCONT THEN
                GI_BOERRORS.SETERRORCODE(118380);
            END IF;

            LOOP FETCH CURFPACKSUSPVOL INTO RFPR_SOLSUSPVOL;
                EXIT WHEN CURFPACKSUSPVOL%NOTFOUND;
                IF RFPR_SOLSUSPVOL.MOTIVE_STATUS_ID = GE_BOPARAMETER.FNUGET('STATUS_REG_MOT')
                   AND  DAMO_SUSPENSION.FNUGETSUSPENSION_TYPE_ID(RFPR_SOLSUSPVOL.MOTIVE_ID) IN ( PR_BOPARAMETER.FNUGETBI_VOL_SUSPENSION, PR_BOPARAMETER.FNUGETIN_VOL_SUSPENSION, PR_BOPARAMETER.FNUGETOU_VOL_SUSPENSION ) THEN
                    NUSUSPVOLPRODCONT := NUSUSPVOLPRODCONT + 1;
                END IF;
            END LOOP;

            
            IF  SBPRODPARAMVALUE <= NUSUSPVOLPRODCONT THEN
                GI_BOERRORS.SETERRORCODE(118380);
            END IF;
        END IF;

        EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END VALQUANTITYSUSPEBYPROD;

    



















    PROCEDURE INSSUSPENSIONBYMOTIVE
    (
        INUMOTIVEID         IN MO_SUSPENSION.MOTIVE_ID%TYPE,
        INUSUSPENSIONTYPEID IN MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE,
        IDTREGISTERDATE     IN MO_SUSPENSION.REGISTER_DATE%TYPE,
        IDTAPLICATIONDATE   IN MO_SUSPENSION.APLICATION_DATE%TYPE,
        IDTENDINGDATE       IN MO_SUSPENSION.ENDING_DATE%TYPE,
        ISBCONNECTIONCODE   IN MO_SUSPENSION.CONNECTION_CODE%TYPE
    )
    IS
        RCSUSPENSION    DAMO_SUSPENSION.STYMO_SUSPENSION;
    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOSuspension.InsSuspensionByMotive',9);
        RCSUSPENSION.MOTIVE_ID          := INUMOTIVEID;
        RCSUSPENSION.SUSPENSION_TYPE_ID := INUSUSPENSIONTYPEID;
        RCSUSPENSION.REGISTER_DATE      := NVL(IDTREGISTERDATE,UT_DATE.FDTSYSDATE);
        RCSUSPENSION.APLICATION_DATE    := IDTAPLICATIONDATE;
        RCSUSPENSION.ENDING_DATE        := IDTENDINGDATE;
        RCSUSPENSION.CONNECTION_CODE    := ISBCONNECTIONCODE;

        DAMO_SUSPENSION.INSRECORD(RCSUSPENSION);
        UT_TRACE.TRACE('Inserta Registro Mo_Suspension:['||RCSUSPENSION.MOTIVE_ID||']',10);
        UT_TRACE.TRACE('FIN: MO_BOSuspension.InsSuspensionByMotive',9);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    PROCEDURE SUSPREVIEWATTENTION
    (
        INUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUMOTIVEID  MO_MOTIVE.MOTIVE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.SuspReviewAttention',15);

        FOR NUMOTIVE IN MO_BCSUSPENSION.CUSUSPREVIEWATTENTION(INUPACKAGEID) LOOP
            NUMOTIVEID:= NUMOTIVE.MOTIVE_ID;
            MO_BOSUSPENSION.SUSPVOLPRODATTENTION(NUMOTIVEID);
        END LOOP;
        UT_TRACE.TRACE('Finaliza MO_BOSuspension.SuspReviewAttention',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




















    PROCEDURE VALREGISTEREDRECONN
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUAMOUNT       IN  NUMBER,
        INUDAYS         IN  NUMBER
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.ValRegisteredReconn',15);

        
        DAPR_PRODUCT.ACCKEY(INUPRODUCTID);

        
        FOR RCROW IN MO_BCSUSPENSION.CUCOUNTREVSUSPBYPROD(INUPRODUCTID, INUDAYS) LOOP
            IF (RCROW.TOTAL > INUAMOUNT ) THEN
                
                GE_BOERRORS.SETERRORCODEARGUMENT
                (
                    901135,
                    RCROW.TOTAL||'|'||INUDAYS||' d�as|'|| INUPRODUCTID
                );
            END IF;
        END LOOP;

        UT_TRACE.TRACE('Finaliza MO_BOSuspension.ValRegisteredReconn',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    































    PROCEDURE REGADMINSUSPENSION
    (
        INUORDERACTIVITYID  IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUSUSPENSIONTYPEID IN  MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE,
        INUCOMPONENTID      IN  MO_COMPONENT.COMPONENT_ID%TYPE,
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        NUPACKAGEID         OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE;
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
        NUSUBSCRIBERID      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        RCMO_PACKAGES       DAMO_PACKAGES.STYMO_PACKAGES;
        RCPRODUCTMOTIVE     DAPS_PRODUCT_MOTIVE.STYPS_PRODUCT_MOTIVE;
        RCMO_MOTIVE         DAMO_MOTIVE.STYMO_MOTIVE;
        RCPRODMOTICOMP      DAPS_PROD_MOTIVE_COMP.STYPS_PROD_MOTIVE_COMP;
        ORCMO_COMPONENT     DAMO_COMPONENT.STYMO_COMPONENT;
        NUCOMPONENTMAIN_ID  MO_COMPONENT.COMPONENT_ID%TYPE;
        RCPRCOMPONENT       DAPR_COMPONENT.STYPR_COMPONENT;
        RCPRCOMPCHILD       DAPR_COMPONENT.STYPR_COMPONENT;
        DTEXECUTIONDATE     OR_ORDER.EXECUTION_FINAL_DATE%TYPE;
        RCORDERACT          DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        NUMOTIVE            MO_MOTIVE.MOTIVE_ID%TYPE;
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
        CURFCHILDCOMPONENTS CONSTANTS.TYREFCURSOR;

    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOSuspension.RegAdminSuspension',7);

        IF (INUORDERACTIVITYID IS NULL) THEN
            RCCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(INUCOMPONENTID);
            NUPACKAGEID := RCCOMPONENT.PACKAGE_ID;
            NUPRODUCTID := INUPRODUCTID;
            DTEXECUTIONDATE := SYSDATE;
            NUMOTIVE := RCCOMPONENT.MOTIVE_ID;
        ELSE
            RCORDERACT := DAOR_ORDER_ACTIVITY.FRCGETRECORD(INUORDERACTIVITYID);
            NUPACKAGEID := RCORDERACT.PACKAGE_ID;
            NUPRODUCTID := RCORDERACT.PRODUCT_ID;
            
            DTEXECUTIONDATE := DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(RCORDERACT.ORDER_ID);
            NUMOTIVE :=  RCORDERACT.MOTIVE_ID;
        END IF;
        
        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(NUPRODUCTID);
        NUSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(RCPRODUCT.SUBSCRIPTION_ID);

        
        MO_BOUTILGENERATEREQUEST.GENERATEPACKAGE
        (
            INUPACKAGEID=>NULL,
            INUPACKTYPEID=>NULL,
            ISBTAGNAME=>PS_BOPACKAGETYPE.CSBTAGGENERSUSPADM,
            IDTREQUESTDATE=>NULL,
            INUMOTISTATUSID=>MO_BOCONSTANTS.CNUSTATUS_REG_PACK,
            INUPOSOPERUNITID=>NULL,
            INUPERSONID=>NULL,
            INUSUBSCRIBERID=>NUSUBSCRIBERID,
            INUCOMPANYID=>NULL,
            ISBCOMMENT=>NULL,
            INUCUSTCAREREQNUM=>NULL,
            INUANSID=>NULL,
            INUDOCTYPEID=>NULL,
            INUDOCKEY=>NULL,
            INURECEPTIONTYPEID=>NULL,
            INUANSWERADDRESSID=>NULL,
            INUCONTACTID=>NULL,
            INUPARENTPACK=>NUPACKAGEID,
            ISBPARENTDEPENDENT=>CC_BOCONSTANTS.CSBSI,
            ORCMO_PACKAGES=>RCMO_PACKAGES,
            IBOPETITIONFLAG=>FALSE
        );
        
        UT_TRACE.TRACE('Solicitud: '||RCMO_PACKAGES.PACKAGE_ID,8);

        
        RCPRODUCTMOTIVE:= PS_BOPRODSERVMANAGER.FRCGETPRODMOTIBYTAG(PS_BOPRODUCTMOTIVE.CSBTAGGENERSUSPEVOL);

        MO_BOUTILGENERATEREQUEST.GENERATEMOTIVE
        (
            INUPRODMOTIID=>RCPRODUCTMOTIVE.PRODUCT_MOTIVE_ID,
            ISBTAGNAME=>RCPRODUCTMOTIVE.TAG_NAME,
            IDTREGISTERDATE=>RCMO_PACKAGES.REQUEST_DATE,
            INUMOTIVETYPEID=>RCPRODUCTMOTIVE.MOTIVE_TYPE_ID,
            INUMOTISTATUSID=>MO_BOUTILGENERATEREQUEST.FNUREGSTATUSMOTI,
            INUPACKAGEID=>RCMO_PACKAGES.PACKAGE_ID,
            INUCUSTREQNUM=>RCMO_PACKAGES.CUST_CARE_REQUES_NUM,
            INUCOMPANYID=>RCPRODUCT.COMPANY_ID,
            INUMOTICAUSAL=>NULL,
            INUSUBSCRIPTIONID=>RCPRODUCT.SUBSCRIPTION_ID,
            INUPRODUCTID=>RCPRODUCT.PRODUCT_ID,
            INUPRODTYPEID=>RCPRODUCT.PRODUCT_TYPE_ID,
            ISBSERVICENUMBER=>RCPRODUCT.SERVICE_NUMBER,
            INUCOMMPLANID=>RCPRODUCT.COMMERCIAL_PLAN_ID,
            INUPERMANECE=>RCPRODUCT.PERMANENCE,
            INUCATEGORYID=>RCPRODUCT.CATEGORY_ID,
            INUSUBCATEGORYID=>RCPRODUCT.SUBCATEGORY_ID,
            INUADDRESSID=>RCPRODUCT.ADDRESS_ID,
            ISBADDRESS=>DAAB_ADDRESS.FSBGETADDRESS(RCPRODUCT.ADDRESS_ID),
            INUGEOLOCAID=>DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID(RCPRODUCT.ADDRESS_ID),
            INUPENDINGMOTIVE=>NUMOTIVE,
            ISBPENDMOTDEPENDENT=>CC_BOCONSTANTS.CSBNO,
            ORCMO_MOTIVE=>RCMO_MOTIVE
        );

        GNUMOTIVEID := RCMO_MOTIVE.MOTIVE_ID;
        UT_TRACE.TRACE('Motivo: '||GNUMOTIVEID,8);

        
        
        RCPRODMOTICOMP := PS_BOPRODUCTMOTIVECOMP.FRCGETMAINCOMPBYPRODMOTI(RCPRODUCTMOTIVE.PRODUCT_MOTIVE_ID);
        NUCOMPONENTMAIN_ID := PR_BCPRODUCT.FNUGETMAINCOMPONENTID(NUPRODUCTID);
        RCPRCOMPONENT := DAPR_COMPONENT.FRCGETRECORD(NUCOMPONENTMAIN_ID);
        
        MO_BOUTILGENERATEREQUEST.GENERATECOMPONENT
        (
            RCPRODMOTICOMP.PROD_MOTIVE_COMP_ID,
            RCPRODMOTICOMP.TAG_NAME,
            MO_BOUTILGENERATEREQUEST.FNUREGSTATUSCOMP,
            NULL,
            NULL,
            RCMO_MOTIVE,
            RCPRCOMPONENT,
            ORCMO_COMPONENT,
            CC_BOCONSTANTS.CSBNO
        );
        
        UT_TRACE.TRACE('Componente: '||ORCMO_COMPONENT.COMPONENT_ID,8);

        
        MO_BOSUSPENSION.INSSUSPENSIONCOMP
        (
            ORCMO_COMPONENT.COMPONENT_ID,
            INUSUSPENSIONTYPEID,
            NULL,
            DTEXECUTIONDATE,
            NULL
        );
       

       
       CURFCHILDCOMPONENTS := PR_BCCOMPONENT.FRFGETCHILDDIRECTCOMPONENT (NUCOMPONENTMAIN_ID);
       
       
        LOOP
            FETCH CURFCHILDCOMPONENTS INTO RCPRCOMPCHILD;
            EXIT WHEN  CURFCHILDCOMPONENTS%NOTFOUND;
            
                
                MO_BOUTILGENERATEREQUEST.GENERATECOMPONENT
                (
                    RCPRODMOTICOMP.PROD_MOTIVE_COMP_ID,
                    RCPRODMOTICOMP.TAG_NAME,
                    MO_BOUTILGENERATEREQUEST.FNUREGSTATUSCOMP,
                    NUCOMPONENTMAIN_ID, 
                    NULL,
                    RCMO_MOTIVE,
                    RCPRCOMPCHILD,
                    ORCMO_COMPONENT,
                    CC_BOCONSTANTS.CSBNO
                );

                UT_TRACE.TRACE('INICIO: MO_BOSuspension.RegAdminSuspension - 4 param',7);
                UT_TRACE.TRACE('Componente hijo: '||ORCMO_COMPONENT.COMPONENT_ID,7);

                
                MO_BOSUSPENSION.INSSUSPENSIONCOMP
                (
                    ORCMO_COMPONENT.COMPONENT_ID,
                    INUSUSPENSIONTYPEID,
                    NULL,
                    DTEXECUTIONDATE,
                    NULL
                );

        END LOOP;
        CLOSE CURFCHILDCOMPONENTS;

        
        MO_BOSUSPENSION.INSSUSPENSIONBYMOTIVE
        (
            RCMO_MOTIVE.MOTIVE_ID,
            INUSUSPENSIONTYPEID,
            NULL,
            DTEXECUTIONDATE,
            NULL,
            NULL
        );

        UT_TRACE.TRACE('FIN: MO_BOSuspension.RegAdminSuspension',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR MO_BOSuspension.RegAdminSuspension',7);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others MO_BOSuspension.RegAdminSuspension',7);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGADMINSUSPENSION;
    
    
    













    PROCEDURE ADMINSUSPENSION
    IS
        NUORDERACTIVITY     OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUPRODUCT           OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOSuspension.AdminSuspension',5);
        
        
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        NUPRODUCT := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;

        REGADMINSUSPENSION(NUORDERACTIVITY, CNUADMIN_SUPS_TYPE);

        
        DAPR_PRODUCT.UPDSUSPEN_ORD_ACT_ID( NUPRODUCT, NUORDERACTIVITY );
        
        UT_TRACE.TRACE('FIN: MO_BOSuspension.AdminSuspension',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADMINSUSPENSION;
    
    
























    PROCEDURE REGADMINSUSPENSION
    (
        INUORDERACTIVITY  IN OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        ISBSUSPENSIONTYPE IN MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
    IS
        NUPACKAGEID          OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE;
        RCPRODUCT            DAPR_PRODUCT.STYPR_PRODUCT;
        NUSUBSCRIBERID       GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        RCMO_PACKAGES        DAMO_PACKAGES.STYMO_PACKAGES;
        RCPRODUCTMOTIVE      DAPS_PRODUCT_MOTIVE.STYPS_PRODUCT_MOTIVE;
        RCMO_MOTIVE          DAMO_MOTIVE.STYMO_MOTIVE;
        RCPRODMOTICOMP       DAPS_PROD_MOTIVE_COMP.STYPS_PROD_MOTIVE_COMP;
        NUCOMPONENTMAIN_ID   MO_COMPONENT.COMPONENT_ID%TYPE;
        RCPRCOMPONENT        DAPR_COMPONENT.STYPR_COMPONENT;
        DTEXECUTIONDATE      OR_ORDER.EXECUTION_FINAL_DATE%TYPE;
        RCORDERACT           DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        NUMOTIVE             MO_MOTIVE.MOTIVE_ID%TYPE;
        RCMO_COMPONENT       DAMO_COMPONENT.STYMO_COMPONENT;
        
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        RCCOMPONENTBYPROD    DAPR_COMPONENT.STYPR_COMPONENT;
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;

    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOSuspension.RegAdminSuspension('||
                        INUORDERACTIVITY||','||ISBSUSPENSIONTYPE||')',6);

        RCORDERACT := DAOR_ORDER_ACTIVITY.FRCGETRECORD(INUORDERACTIVITY);
        NUPACKAGEID := RCORDERACT.PACKAGE_ID;
        NUPRODUCTID := RCORDERACT.PRODUCT_ID;
        
        DTEXECUTIONDATE := DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(RCORDERACT.ORDER_ID);
        NUMOTIVE :=  RCORDERACT.MOTIVE_ID;

        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(NUPRODUCTID);
        NUSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(RCPRODUCT.SUBSCRIPTION_ID);

        
        MO_BOUTILGENERATEREQUEST.GENERATEPACKAGE
        (
            INUPACKAGEID        => NULL,
            INUPACKTYPEID       => NULL,
            ISBTAGNAME          => PS_BOPACKAGETYPE.CSBTAGGENERSUSPADM,
            IDTREQUESTDATE      => NULL,
            INUMOTISTATUSID     => MO_BOCONSTANTS.CNUSTATUS_REG_PACK,
            INUPOSOPERUNITID    => NULL,
            INUPERSONID         => NULL,
            INUSUBSCRIBERID     => NUSUBSCRIBERID,
            INUCOMPANYID        => NULL,
            ISBCOMMENT          => NULL,
            INUCUSTCAREREQNUM   => NULL,
            INUANSID            => NULL,
            INUDOCTYPEID        => NULL,
            INUDOCKEY           => NULL,
            INURECEPTIONTYPEID  => NULL,
            INUANSWERADDRESSID  => NULL,
            INUCONTACTID        => NULL,
            INUPARENTPACK       => NUPACKAGEID,
            ISBPARENTDEPENDENT  => CC_BOCONSTANTS.CSBSI,
            ORCMO_PACKAGES      => RCMO_PACKAGES,
            IBOPETITIONFLAG     => FALSE
        );

        UT_TRACE.TRACE('Solicitud: '||RCMO_PACKAGES.PACKAGE_ID,8);

        
        RCPRODUCTMOTIVE:= PS_BOPRODSERVMANAGER.FRCGETPRODMOTIBYTAG(PS_BOPRODUCTMOTIVE.CSBTAGGENERSUSPEVOL);

        MO_BOUTILGENERATEREQUEST.GENERATEMOTIVE
        (
            INUPRODMOTIID       => RCPRODUCTMOTIVE.PRODUCT_MOTIVE_ID,
            ISBTAGNAME          => RCPRODUCTMOTIVE.TAG_NAME,
            IDTREGISTERDATE     => RCMO_PACKAGES.REQUEST_DATE,
            INUMOTIVETYPEID     => RCPRODUCTMOTIVE.MOTIVE_TYPE_ID,
            INUMOTISTATUSID     => MO_BOUTILGENERATEREQUEST.FNUREGSTATUSMOTI,
            INUPACKAGEID        => RCMO_PACKAGES.PACKAGE_ID,
            INUCUSTREQNUM       => RCMO_PACKAGES.CUST_CARE_REQUES_NUM,
            INUCOMPANYID        => RCPRODUCT.COMPANY_ID,
            INUMOTICAUSAL       => NULL,
            INUSUBSCRIPTIONID   => RCPRODUCT.SUBSCRIPTION_ID,
            INUPRODUCTID        => RCPRODUCT.PRODUCT_ID,
            INUPRODTYPEID       => RCPRODUCT.PRODUCT_TYPE_ID,
            ISBSERVICENUMBER    => RCPRODUCT.SERVICE_NUMBER,
            INUCOMMPLANID       => RCPRODUCT.COMMERCIAL_PLAN_ID,
            INUPERMANECE        => RCPRODUCT.PERMANENCE,
            INUCATEGORYID       => RCPRODUCT.CATEGORY_ID,
            INUSUBCATEGORYID    => RCPRODUCT.SUBCATEGORY_ID,
            INUADDRESSID        => RCPRODUCT.ADDRESS_ID,
            ISBADDRESS          => DAAB_ADDRESS.FSBGETADDRESS(RCPRODUCT.ADDRESS_ID),
            INUGEOLOCAID        => DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID(RCPRODUCT.ADDRESS_ID),
            INUPENDINGMOTIVE    => NUMOTIVE,
            ISBPENDMOTDEPENDENT => CC_BOCONSTANTS.CSBNO,
            ORCMO_MOTIVE        => RCMO_MOTIVE
        );

        GNUMOTIVEID := RCMO_MOTIVE.MOTIVE_ID;
        UT_TRACE.TRACE('Motivo: '||GNUMOTIVEID,8);

        
        CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);

        LOOP
            FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
            EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;

            DAPR_COMPONENT.GETRECORD(NUMASTERCOMPPRODID, RCCOMPONENTBYPROD);

            IF (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPONENTBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
            AND (DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED(RCCOMPONENTBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
            THEN

                RCPRODMOTICOMP := PS_BOPRODUCTMOTIVECOMP.FRCGETMAINCOMPBYPRODMOTI(RCPRODUCTMOTIVE.PRODUCT_MOTIVE_ID);
                RCPRCOMPONENT := DAPR_COMPONENT.FRCGETRECORD(NUMASTERCOMPPRODID);
                
                MO_BOUTILGENERATEREQUEST.GENERATECOMPONENT
                (
                    RCPRODMOTICOMP.PROD_MOTIVE_COMP_ID,
                    RCPRODMOTICOMP.TAG_NAME,
                    MO_BOUTILGENERATEREQUEST.FNUREGSTATUSCOMP,
                    NULL,
                    NULL,
                    RCMO_MOTIVE,
                    RCPRCOMPONENT,
                    RCMO_COMPONENT,
                    CC_BOCONSTANTS.CSBNO
                );

                
                INSSUSPENSIONCOMP
                (
                    RCMO_COMPONENT.COMPONENT_ID,
                    ISBSUSPENSIONTYPE,
                    UT_DATE.FSBSTR_SYSDATE,
                    DTEXECUTIONDATE,
                    UT_DATE.FSBSTR_SYSDATE
                );

                
                FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP

                    DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPONENTBYPROD);

                    
                    UT_TRACE.TRACE(' Entrada: rcPrComponentLink.parent_component_id:['||RCPRCOMPONENTLINK.PARENT_COMPONENT_ID||']',17);
                    IF (PR_BOCOMPONENT.GETCOMPONENTTYPE(RCPRCOMPONENTLINK.PARENT_COMPONENT_ID) = GE_BOPARAMETER.FNUGET('CC_COMP_INCLUDED')) THEN
                        PR_BOCOMPONENT.GETFATHERCOMPONENT
                        (
                            RCPRCOMPONENTLINK.PARENT_COMPONENT_ID,
                            RCPRCOMPONENTLINK.PARENT_COMPONENT_ID,
                            NUFATHCOMPIDMOT
                        );
                        
                    ELSE
                         
                         NUFATHCOMPIDMOT :=  RCCOMPONENTBYPROD.COMPONENT_TYPE_ID;
                         UT_TRACE.TRACE('Tipo de Componente del componente padre original nuFathCompIdMot :['||NUFATHCOMPIDMOT||']',7);
                    END IF;

                    IF ((DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPONENTBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                    AND (DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED(RCCOMPONENTBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                    AND (NUFATHCOMPIDMOT IS NOT NULL)) THEN

                        RCPRCOMPONENT := DAPR_COMPONENT.FRCGETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID);
                        
                        MO_BOUTILGENERATEREQUEST.GENERATECOMPONENT
                        (
                            RCPRODMOTICOMP.PROD_MOTIVE_COMP_ID,
                            RCPRODMOTICOMP.TAG_NAME,
                            MO_BOUTILGENERATEREQUEST.FNUREGSTATUSCOMP,
                            NULL,
                            NULL,
                            RCMO_MOTIVE,
                            RCPRCOMPONENT,
                            RCMO_COMPONENT,
                            CC_BOCONSTANTS.CSBNO
                        );

                        
                        INSSUSPENSIONCOMP
                        (
                            RCMO_COMPONENT.COMPONENT_ID,
                            ISBSUSPENSIONTYPE,
                            UT_DATE.FSBSTR_SYSDATE,
                            DTEXECUTIONDATE,
                            UT_DATE.FSBSTR_SYSDATE
                        );

                    END IF;
                END LOOP;
            END IF;
        END LOOP;


        
        MO_BOSUSPENSION.INSSUSPENSIONBYMOTIVE
        (
            RCMO_MOTIVE.MOTIVE_ID,
            ISBSUSPENSIONTYPE,
            NULL,
            DTEXECUTIONDATE,
            NULL,
            NULL
        );

        
        SUSPVOLPRODATTENTION(GNUMOTIVEID);
        
        UT_TRACE.TRACE('FIN: MO_BOSuspension.RegAdminSuspension',6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGADMINSUSPENSION;
    
    
    


















    PROCEDURE REGADMINRECONNECTION
    (
        INUORDERACTIVITYID  IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUSUSPENSIONTYPEID IN  MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
    IS
        NUPACKAGEID          OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE;
        RCPRODUCT            DAPR_PRODUCT.STYPR_PRODUCT;
        NUSUBSCRIBERID       GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        RCMO_PACKAGES        DAMO_PACKAGES.STYMO_PACKAGES;
        RCPRODUCTMOTIVE      DAPS_PRODUCT_MOTIVE.STYPS_PRODUCT_MOTIVE;
        RCMO_MOTIVE          DAMO_MOTIVE.STYMO_MOTIVE;
        RCPRODMOTICOMP       DAPS_PROD_MOTIVE_COMP.STYPS_PROD_MOTIVE_COMP;
        RCMO_COMPONENT       DAMO_COMPONENT.STYMO_COMPONENT;
        RCPRCOMPONENT        DAPR_COMPONENT.STYPR_COMPONENT;
        DTEXECUTIONDATE      OR_ORDER.EXECUTION_FINAL_DATE%TYPE;
        RCORDERACT           DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        NUMOTIVE             MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPACKAGESUSP        MO_PACKAGES.PACKAGE_ID%TYPE;
        RCPACKASSO           DAMO_PACKAGES_ASSO.STYMO_PACKAGES_ASSO;
        
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        RCCOMPONENTBYPROD    DAPR_COMPONENT.STYPR_COMPONENT;
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;

    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOSuspension.RegAdminReconnection',7);

        RCORDERACT := DAOR_ORDER_ACTIVITY.FRCGETRECORD(INUORDERACTIVITYID);
        NUPACKAGEID := RCORDERACT.PACKAGE_ID;
        NUPRODUCTID := RCORDERACT.PRODUCT_ID;
        UT_TRACE.TRACE('Producto: '||NUPRODUCTID,8);
        
        DTEXECUTIONDATE := DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(RCORDERACT.ORDER_ID);
        NUMOTIVE :=  RCORDERACT.MOTIVE_ID;

        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(NUPRODUCTID);
        NUSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(RCPRODUCT.SUBSCRIPTION_ID);

        
        MO_BOUTILGENERATEREQUEST.GENERATEPACKAGE
        (
            INUPACKAGEID        => NULL,
            INUPACKTYPEID       => NULL,
            ISBTAGNAME          => PS_BOPACKAGETYPE.CSBTAGGENERRECONNADM,
            IDTREQUESTDATE      => NULL,
            INUMOTISTATUSID     => MO_BOCONSTANTS.CNUSTATUS_REG_PACK,
            INUPOSOPERUNITID    => NULL,
            INUPERSONID         => NULL,
            INUSUBSCRIBERID     => NUSUBSCRIBERID,
            INUCOMPANYID        => NULL,
            ISBCOMMENT          => NULL,   
            INUCUSTCAREREQNUM   => NULL,
            INUANSID            => NULL,
            INUDOCTYPEID        => NULL,
            INUDOCKEY           => NULL,
            INURECEPTIONTYPEID  => NULL,
            INUANSWERADDRESSID  => NULL,
            INUCONTACTID        => NULL,
            INUPARENTPACK       => NUPACKAGEID,
            ISBPARENTDEPENDENT  => CC_BOCONSTANTS.CSBSI,
            ORCMO_PACKAGES      => RCMO_PACKAGES,
            IBOPETITIONFLAG     => FALSE
        );

        UT_TRACE.TRACE('Solicitud: '||RCMO_PACKAGES.PACKAGE_ID,8);

        
        RCPRODUCTMOTIVE:= PS_BOPRODSERVMANAGER.FRCGETPRODMOTIBYTAG(PS_BOPRODUCTMOTIVE.CSBTAGGENERRECONVOL);

        
        MO_BOUTILGENERATEREQUEST.GENERATEMOTIVE
        (
            INUPRODMOTIID       => RCPRODUCTMOTIVE.PRODUCT_MOTIVE_ID,
            ISBTAGNAME          => RCPRODUCTMOTIVE.TAG_NAME,
            IDTREGISTERDATE     => RCMO_PACKAGES.REQUEST_DATE,
            INUMOTIVETYPEID     => RCPRODUCTMOTIVE.MOTIVE_TYPE_ID,
            INUMOTISTATUSID     => MO_BOUTILGENERATEREQUEST.FNUREGSTATUSMOTI,
            INUPACKAGEID        => RCMO_PACKAGES.PACKAGE_ID,
            INUCUSTREQNUM       => RCMO_PACKAGES.CUST_CARE_REQUES_NUM,
            INUCOMPANYID        => RCPRODUCT.COMPANY_ID,
            INUMOTICAUSAL       => NULL,
            INUSUBSCRIPTIONID   => RCPRODUCT.SUBSCRIPTION_ID,
            INUPRODUCTID        => RCPRODUCT.PRODUCT_ID,
            INUPRODTYPEID       => RCPRODUCT.PRODUCT_TYPE_ID,
            ISBSERVICENUMBER    => RCPRODUCT.SERVICE_NUMBER,
            INUCOMMPLANID       => RCPRODUCT.COMMERCIAL_PLAN_ID,
            INUPERMANECE        => RCPRODUCT.PERMANENCE,
            INUCATEGORYID       => RCPRODUCT.CATEGORY_ID,
            INUSUBCATEGORYID    => RCPRODUCT.SUBCATEGORY_ID,
            INUADDRESSID        => RCPRODUCT.ADDRESS_ID,
            ISBADDRESS          => DAAB_ADDRESS.FSBGETADDRESS(RCPRODUCT.ADDRESS_ID),
            INUGEOLOCAID        => DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID(RCPRODUCT.ADDRESS_ID),
            INUPENDINGMOTIVE    => NUMOTIVE,
            ISBPENDMOTDEPENDENT => CC_BOCONSTANTS.CSBNO,
            ORCMO_MOTIVE        => RCMO_MOTIVE
        );

        UT_TRACE.TRACE('Motivo: '||RCMO_MOTIVE.MOTIVE_ID,8);
        
        
        FOR RCROW IN MO_BCSUSPENSION.CUPACKBYPRODSUSPTYP(NUPRODUCTID, INUSUSPENSIONTYPEID) LOOP
            UT_TRACE.TRACE('Solicitud Encontrada: '||RCROW.PACKAGE_ID,8);
            NUPACKAGESUSP := RCROW.PACKAGE_ID;
        END LOOP;
        
        
        RCPACKASSO.PACKAGE_ID := RCMO_PACKAGES.PACKAGE_ID;
        RCPACKASSO.PACKAGE_ID_ASSO  := NUPACKAGESUSP;
        RCPACKASSO.PACKAGES_ASSO_ID := MO_BOSEQUENCES.FNUGETSEQ_MO_PACKAGES_ASSO;
        RCPACKASSO.ANNUL_DEPENDENT  := GE_BOCONSTANTS.CSBNO;
        
        DAMO_PACKAGES_ASSO.INSRECORD(RCPACKASSO);
        
        
        CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);
        
        LOOP
            FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
            EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;

            DAPR_COMPONENT.GETRECORD(NUMASTERCOMPPRODID, RCCOMPONENTBYPROD);
            
            IF (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPONENTBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
            AND (DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED(RCCOMPONENTBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
            THEN
            
                RCPRODMOTICOMP := PS_BOPRODUCTMOTIVECOMP.FRCGETMAINCOMPBYPRODMOTI(RCPRODUCTMOTIVE.PRODUCT_MOTIVE_ID);
                RCPRCOMPONENT := DAPR_COMPONENT.FRCGETRECORD(NUMASTERCOMPPRODID);
            
                MO_BOUTILGENERATEREQUEST.GENERATECOMPONENT
                (
                    RCPRODMOTICOMP.PROD_MOTIVE_COMP_ID,
                    RCPRODMOTICOMP.TAG_NAME,
                    MO_BOUTILGENERATEREQUEST.FNUREGSTATUSCOMP,
                    NULL,
                    NULL,
                    RCMO_MOTIVE,
                    RCPRCOMPONENT,
                    RCMO_COMPONENT,
                    CC_BOCONSTANTS.CSBNO
                );

                
                INSSUSPENSIONCOMP
                (
                    RCMO_COMPONENT.COMPONENT_ID,
                    INUSUSPENSIONTYPEID,
                    UT_DATE.FSBSTR_SYSDATE,
                    DTEXECUTIONDATE,
                    UT_DATE.FSBSTR_SYSDATE
                );
                
                
                FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP

                    DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPONENTBYPROD);

                    
                    UT_TRACE.TRACE(' Entrada: rcPrComponentLink.parent_component_id:['||RCPRCOMPONENTLINK.PARENT_COMPONENT_ID||']',17);
                    IF (PR_BOCOMPONENT.GETCOMPONENTTYPE(RCPRCOMPONENTLINK.PARENT_COMPONENT_ID) = GE_BOPARAMETER.FNUGET('CC_COMP_INCLUDED')) THEN
                        PR_BOCOMPONENT.GETFATHERCOMPONENT
                        (
                            RCPRCOMPONENTLINK.PARENT_COMPONENT_ID,
                            RCPRCOMPONENTLINK.PARENT_COMPONENT_ID,
                            NUFATHCOMPIDMOT
                        );
                        
                    END IF;
                    
                    IF ((DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPONENTBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                    AND (DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED(RCCOMPONENTBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                    AND (NUFATHCOMPIDMOT IS NOT NULL)) THEN
                    
                        RCPRCOMPONENT := DAPR_COMPONENT.FRCGETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID);
                        
                        MO_BOUTILGENERATEREQUEST.GENERATECOMPONENT
                        (
                            RCPRODMOTICOMP.PROD_MOTIVE_COMP_ID,
                            RCPRODMOTICOMP.TAG_NAME,
                            MO_BOUTILGENERATEREQUEST.FNUREGSTATUSCOMP,
                            NULL,
                            NULL,
                            RCMO_MOTIVE,
                            RCPRCOMPONENT,
                            RCMO_COMPONENT,
                            CC_BOCONSTANTS.CSBNO
                        );
                
                        
                        INSSUSPENSIONCOMP
                        (
                            RCMO_COMPONENT.COMPONENT_ID,
                            INUSUSPENSIONTYPEID,
                            UT_DATE.FSBSTR_SYSDATE,
                            DTEXECUTIONDATE,
                            UT_DATE.FSBSTR_SYSDATE
                        );
                    
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        
        INSSUSPENSIONBYMOTIVE
        (
            RCMO_MOTIVE.MOTIVE_ID,
            INUSUSPENSIONTYPEID,
            UT_DATE.FSBSTR_SYSDATE,
            DTEXECUTIONDATE,
            UT_DATE.FSBSTR_SYSDATE,
            NULL
        );
        
        
        
        RECONVOLPRATTENTION(RCMO_MOTIVE.MOTIVE_ID);
        
        UT_TRACE.TRACE('FIN: MO_BOSuspension.RegAdminReconnection',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR MO_BOSuspension.RegAdminReconnection',7);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others MO_BOSuspension.RegAdminReconnection',7);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGADMINRECONNECTION;
    
    












    PROCEDURE ADMINRECONNECTION
    IS
        NUORDERACTIVITY     OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUPRODUCT           OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOSuspension.AdminReconnection',5);
         
         
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        NUPRODUCT := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;

        REGADMINRECONNECTION(NUORDERACTIVITY, CNUADMIN_SUPS_TYPE);
         
        UT_TRACE.TRACE('FIN: MO_BOSuspension.AdminReconnection',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADMINRECONNECTION;
    

END MO_BOSUSPENSION;