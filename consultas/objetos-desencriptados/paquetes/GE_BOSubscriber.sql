PACKAGE GE_BOSubscriber AS

    































































































































































































































































































































































































    
    
    CSBRESIDENTPERSON   CONSTANT    UT_DATATYPES.STYTOKEN       :=  'R';
    CSBBUSINESSPERSON   CONSTANT    UT_DATATYPES.STYTOKEN       :=  'B';
    CSBCC_VALIDATE_CPNI CONSTANT    UT_DATATYPES.STYTOKEN       :=  'CC_VALIDATE_CPNI';

    
    CNUERROR917642              CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 917642;
    
    CNUERROR917643              CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 917643;
    
    CNUERROR917644              CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 917644;
    
    CNUERROR917645              CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 917645;
    
    
    CNUPERSONALEMAIL            CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 36592;
    
    
    
    
    
    SUBTYPE STYSBCLIENT     IS VARCHAR2(500);

    SUBTYPE STYBOOL         IS BOOLEAN;

    SUBTYPE STYNUMBER       IS NUMBER;

    TYPE TYRCSUBSCHANGES IS RECORD
    (
        SBATTRIBUTENAME     GE_DATA_CHANGE_LOG.ENTITY_NAME%TYPE,
        SBNEWVALUE          GE_DATA_CHANGE_LOG.NEW_VALUE%TYPE,
        SBOLDVALUE          GE_DATA_CHANGE_LOG.PREVIOUS_VALUE%TYPE
    );

    TYPE TYTBFIELDS IS TABLE OF TYRCSUBSCHANGES INDEX BY BINARY_INTEGER;
    
    
    TYPE TYRCFIELDTOVALID  IS RECORD
    (
        SBENTITYNAME        GE_DATA_CHANGE_LOG.ENTITY_NAME%TYPE,
        SBATTRIBUTENAME     GE_DATA_CHANGE_LOG.ATTRIBUTE_NAME%TYPE
    );

    TYPE TYTBFIELDTOVALID IS TABLE OF TYRCFIELDTOVALID INDEX BY VARCHAR2(2000);

    
    
    
    
    CNUCORPORAT_CUSTOMER    CONSTANT GE_SUBSCRIBER_TYPE.SUBSCRIBER_TYPE_ID%TYPE := 3;

    CNUCLIENTE_NULO         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 8112;
    CNUCLIENTE_NULO_APP     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 10318;

    
    CNUDEFIDENTTYPE         CONSTANT GE_IDENTIFICA_TYPE.IDENT_TYPE_ID%TYPE := -1;
    
    
    
    
    



    FUNCTION FSBVERSION  RETURN UT_DATATYPES.STYSAOVERSION;

    PROCEDURE GETSUBSCRIBER
    (
        INUSUBSCRIBER_ID    IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ORCSUBSCRIBER       OUT NOCOPY DAGE_SUBSCRIBER.STYGE_SUBSCRIBER
    );

    FUNCTION GETSUBSCRIBERID
    (
      INUIDENTIFICA_TYPE  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
      ISBIDENTIFICATION   GE_SUBSCRIBER.IDENTIFICATION%TYPE
    )
        RETURN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;

    FUNCTION VALIDIDENTIFICATION
    (
     ISBIDENTIFICATION  IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
     INUIDENT_TYPE_ID   IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
     ONUSUBSCRIBER_ID   OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN BOOLEAN;

    
    TYPE TYRCPHONE   IS RECORD
    (
        NUPHONETYPE     GE_SUBS_PHONE.PHONE_TYPE_ID%TYPE,
        NUCOUNTRY       GE_SUBS_PHONE.COUNTRY_LOCATION_ID%TYPE,
        SBAREACODE      GE_SUBS_PHONE.AREA_CODE%TYPE,
        SBPHONENUMBER   GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE
    );

    
    TYPE TYTBPHONE IS TABLE OF TYRCPHONE INDEX BY UT_DATATYPES.STYNUMBERINDEX;

    
    TYPE TYRCEMAIL   IS RECORD
    (
        NUEMAILTYPE     GE_SUBS_EMAIL.TYPE_ID%TYPE,
        SBEMAIL         GE_SUBS_EMAIL.EMAIL%TYPE
    );

    
    TYPE TYTBEMAIL IS TABLE OF TYRCEMAIL INDEX BY UT_DATATYPES.STYNUMBERINDEX;
    
	

    




    PROCEDURE CREATESUBSCRIBER
    (
        INUIDENTTYPEID      IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION   IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUSUBSCRIBERTYPEID IN  GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE,
        ISBSUBSCRIBERNAME   IN  GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME     IN  GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBPHONE            IN  GE_SUBSCRIBER.PHONE%TYPE,
        INUPHONETYPE        IN  GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        ISBEMAIL            IN  GE_SUBS_EMAIL.EMAIL%TYPE,
        INUEMAILTYPE        IN  GE_SUBS_EMAIL.TYPE_ID%TYPE,
        ONUSUBSCRIBERID     OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBCONTACTADDRESS   IN  GE_SUBSCRIBER.ADDRESS%TYPE DEFAULT NULL,
        ISBMARKETINGSEGMENT IN  GE_SUBSCRIBER.MARKETING_SEGMENT_ID%TYPE DEFAULT NULL,
        IBLSIMULATE         IN  UT_DATATYPES.STYBOOLEAN DEFAULT FALSE
    );

    








    PROCEDURE REGISTER
    (
        IONUSUBSCRIBER_ID       IN OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUIDENT_TYPE_ID        IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION       IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUPARENT_SUBSCRIBER_ID IN GE_SUBSCRIBER.PARENT_SUBSCRIBER_ID%TYPE,
        INUSUBSCRIBER_TYPE_ID   IN GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE,
        ISBADDRESS              IN GE_SUBSCRIBER.ADDRESS%TYPE,
        ISBPHONE                IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        INUPHONETYPE            IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        ISBSUBSCRIBER_NAME      IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBS_LAST_NAME       IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBE_MAIL               IN GE_SUBS_EMAIL.EMAIL%TYPE,
        INUE_MAILTYPE           IN GE_SUBS_EMAIL.TYPE_ID%TYPE,
        ISBURL                  IN GE_SUBSCRIBER.URL%TYPE,
        ISBCONTACT_PHONE        IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        INUCONTACT_PHONETYPE    IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        ISBCONTACT_ADDRESS      IN GE_SUBSCRIBER.ADDRESS%TYPE,
        ISBCONTACT_NAME         IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        INUCONTACT_IDENT_TYPE   IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBCONTACT_IDENT        IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUMARKETING_SEGMENT_ID IN GE_SUBSCRIBER.MARKETING_SEGMENT_ID%TYPE,
        INUSUBS_STATUS_ID       IN GE_SUBSCRIBER.SUBS_STATUS_ID%TYPE DEFAULT 1,
        IBOVALIDDATA            IN STYBOOL DEFAULT TRUE,
        INUADDRESSID            IN AB_ADDRESS.ADDRESS_ID%TYPE DEFAULT NULL,
        IDTDATE_BIRTH           IN GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE DEFAULT NULL,
        INUCONTACT_ADDRESSID    IN GE_SUBSCRIBER.ADDRESS_ID%TYPE DEFAULT NULL,
        ISBSEX                  IN GE_SUBS_GENERAL_DATA.GENDER%TYPE DEFAULT NULL,
        INUECONOMIC_ACTIVITY_ID IN GE_SUBS_BUSINES_DATA.ECONOMIC_ACTIVITY_ID%TYPE DEFAULT NULL,
        INUTAXPAYER_TYPE_ID     IN GE_SUBSCRIBER.TAXPAYER_TYPE%TYPE DEFAULT NULL,
        INULANGUAGEPREFE        IN ST_LANGUAGES.ID%TYPE DEFAULT NULL,
        ISBPREFIX               IN GE_SUBSCRIBER.SUBS_PREFIX%TYPE DEFAULT NULL,
        ISBSUBSFIRSTNAME        IN GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDNAME       IN GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE DEFAULT NULL,
        ISBSUBSFIRSTLASTNAME    IN GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDLASTNAME   IN GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUFFIX               IN GE_SUBSCRIBER.SUBS_SUFFIX%TYPE DEFAULT NULL
    );

    








    PROCEDURE UPDSUBSCRIBER
    (
        INUSUBSCRIBER_ID        IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUIDENT_TYPE_ID        IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION       IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUPARENT_SUBSCRIBER_ID IN GE_SUBSCRIBER.PARENT_SUBSCRIBER_ID%TYPE,
        INUSUBSCRIBER_TYPE_ID   IN GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE,
        INUADDRESSID            IN GE_SUBSCRIBER.ADDRESS_ID%TYPE,
        INUGEOGRALOCATIONID     IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS              IN AB_ADDRESS.ADDRESS%TYPE,
        ISBISURBAN              IN AB_ADDRESS.IS_URBAN%TYPE,
        ISBPHONE                IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        INUPHONETYPE            IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        ISBSUBSCRIBER_NAME      IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBS_LAST_NAME       IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBE_MAIL               IN GE_SUBS_EMAIL.EMAIL%TYPE,
        INUE_MAILTYPE           IN GE_SUBS_EMAIL.TYPE_ID%TYPE,
        ISBURL                  IN GE_SUBSCRIBER.URL%TYPE,
        INUCONTACTID            IN GE_SUBSCRIBER.CONTACT_ID%TYPE,
        INUMARKETING_SEGMENT_ID IN GE_SUBSCRIBER.MARKETING_SEGMENT_ID%TYPE,
        INUSUBS_STATUS_ID       IN GE_SUBSCRIBER.SUBS_STATUS_ID%TYPE,
        ISBSEX                  IN GE_SUBS_GENERAL_DATA.GENDER%TYPE,
        IDTBIRTHDATE            IN GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE,
        IBOVALIDDATA            IN STYBOOL DEFAULT TRUE,
        ISBCONTACT_PHONE        IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE DEFAULT NULL,
        INUCONTACT_PHONETYPE    IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE DEFAULT NULL,
        ISBCONTACT_NAME         IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE DEFAULT NULL,
        INUCONTACT_IDENT_TYPE   IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCONTACT_IDENT        IN GE_SUBSCRIBER.IDENTIFICATION%TYPE DEFAULT NULL,
        INUPACKAGEID            IN GE_DATA_CHANGE_LOG.PACKAGE_ID%TYPE DEFAULT NULL,
        ISBCONTACTLASTNAME      IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE DEFAULT NULL,
        INUECONOMICACTIVITYID   IN GE_SUBSCRIBER.ECONOMIC_ACTIVITY_ID%TYPE DEFAULT NULL,
        INUTAXPAYERTYPEID       IN GE_SUBSCRIBER.TAXPAYER_TYPE%TYPE DEFAULT NULL,
        INUBIRTHLOCATIONID      IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE DEFAULT NULL,
        INUDOCPLACEISSUE        IN GE_SUBSCRIBER.DOC_PLACE_OF_ISSUE%TYPE DEFAULT NULL,
        IDTDOCDATEISSUE         IN GE_SUBSCRIBER.DOC_DATE_OF_ISSUE%TYPE DEFAULT NULL,
        ISBFAXNUMBER            IN GE_SUBSCRIBER.PHONE%TYPE DEFAULT NULL,
        ISBRESIDENT             IN GE_SUBS_HOUSING_DATA.RESIDENT%TYPE DEFAULT NULL,
        INUSCHOOLDEGREEID       IN GE_SUBS_GENERAL_DATA.SCHOOL_DEGREE_ID%TYPE DEFAULT NULL,
        INUPROFESSIONID         IN GE_SUBS_GENERAL_DATA.PROFESSION_ID%TYPE DEFAULT NULL,
        INUWAGESCALEID          IN GE_SUBS_GENERAL_DATA.WAGE_SCALE_ID%TYPE DEFAULT NULL,
        INUDEBITSCALEID         IN GE_SUBS_GENERAL_DATA.DEBIT_SCALE_ID%TYPE DEFAULT NULL,
        INUCIVILSTATEID         IN GE_SUBS_GENERAL_DATA.CIVIL_STATE_ID%TYPE DEFAULT NULL,
        ISBRUT                  IN GE_SUBS_FISCAL_DATA.RUT%TYPE DEFAULT NULL,
        ISBSELFCOLLECTORFLAG    IN GE_SUBS_FISCAL_DATA.SELF_COLLECTOR_FLAG%TYPE DEFAULT NULL,
        IDTBEGACTDATE           IN GE_SUBS_BUSINES_DATA.BEGINNING_ACTIVITIES%TYPE DEFAULT NULL,
        ISBNATIONALITY          IN GE_SUBS_GENERAL_DATA.NATIONALITY%TYPE DEFAULT NULL,
        ISBDATASEND             IN GE_SUBSCRIBER.DATA_SEND%TYPE DEFAULT NULL,
        ISBACCEPTCALL           IN GE_SUBSCRIBER.ACCEPT_CALL%TYPE DEFAULT NULL,
        INUAUTHORIZATIONTYPEID  IN GE_SUBSCRIBER.AUTHORIZATION_TYPE%TYPE DEFAULT NULL,
        ISBOLDOPERATOR          IN GE_SUBS_GENERAL_DATA.OLD_OPERATOR%TYPE DEFAULT NULL,
        ISBCOMMENT              IN GE_SUBS_GENERAL_DATA.COMMENT_%TYPE DEFAULT NULL,
        ISBISCORPORATIVE        IN GE_SUBSCRIBER.IS_CORPORATIVE%TYPE DEFAULT NULL,
        INUDISABILITYPERCENT    IN GE_SUBSCRIBER.DISABILITY_PERCENT%TYPE DEFAULT NULL,
        INUDISABILITYTYPEID     IN GE_SUBSCRIBER.DISABILITY_TYPE_ID%TYPE DEFAULT NULL,
        INULANGUAGEID           IN GE_SUBSCRIBER.LANGUAGE%TYPE DEFAULT NULL,
        ISBPREFIX               IN GE_SUBSCRIBER.SUBS_PREFIX%TYPE DEFAULT NULL,
        ISBSUBSFIRSTNAME        IN GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDNAME       IN GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE DEFAULT NULL,
        ISBSUBSFIRSTLASTNAME    IN GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDLASTNAME   IN GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUFFIX               IN GE_SUBSCRIBER.SUBS_SUFFIX%TYPE DEFAULT NULL,
        ISBCONTPREFIX           IN GE_SUBSCRIBER.SUBS_PREFIX%TYPE DEFAULT NULL,
        ISBCONTFIRSTNAME        IN GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE DEFAULT NULL,
        ISBCONTSECONDNAME       IN GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE DEFAULT NULL,
        ISBCONTFIRSTLASTNAME    IN GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE DEFAULT NULL,
        ISBCONTSECONDLASTNAME   IN GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE DEFAULT NULL,
        ISBCONTACTSUFFIX        IN GE_SUBSCRIBER.SUBS_SUFFIX%TYPE DEFAULT NULL
    );


    FUNCTION FBOISCORPORATE (
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    ) RETURN BOOLEAN ;

    


















  
	

    PROCEDURE VAL_DUP_IDENT (
        INUIDENT_TYPE_ID     IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        INUIDENTIFICATION     IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE
    ) ;

    PROCEDURE VALIDATESUBSCRIBERNULL
    (
        INUSUBSCRIBER   IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    );
    PROCEDURE VALIDATESUBSNULLAPP
    (
       INUSUBSCRIBER	IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    );
    PROCEDURE VALBASICDATA
    (
        INUSUBSCRIBER	IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    );

    PROCEDURE VALCUSTWITHBALANCE
  (
    INUCLIETIDI     IN     GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
    ISBCLIENITC     IN     GE_SUBSCRIBER.IDENTIFICATION%TYPE,
    ONUERRORCODE        OUT MENSAJE.MENSCODI%TYPE,
    OSBERRORMESSAGE     OUT NOCOPY MENSAJE.MENSDESC%TYPE
  ) ;
  
   
	
    
   
	

    








    FUNCTION FSBGETFULLNAME
    (
        INUSUBSCRIBERID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN VARCHAR2;
    
    FUNCTION FSBGETNAME
	(
		INUSUBSCRIBER_ID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
	)
	RETURN VARCHAR2;

	

	

	

    




































    PROCEDURE CREATECONTACT
    (
        IONUCONTACTID         IN OUT  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBSUBSCRIBERNAME     IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME       IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBADDRESS            IN GE_SUBSCRIBER.ADDRESS%TYPE,
        ISBPHONE              IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        INUPHONETYPE          IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        INUIDENTTYPEID        IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION     IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUSUBSTATUSID        IN GE_SUBSCRIBER.SUBS_STATUS_ID%TYPE DEFAULT 1,
        INUADDRESSID          IN GE_SUBSCRIBER.ADDRESS_ID%TYPE DEFAULT NULL,
        ISBPREFIX             IN GE_SUBSCRIBER.SUBS_PREFIX%TYPE DEFAULT NULL,
        ISBSUBSFIRSTNAME      IN GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDNAME     IN GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE DEFAULT NULL,
        ISBSUBSFIRSTLASTNAME  IN GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDLASTNAME IN GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUFFIX             IN GE_SUBSCRIBER.SUBS_SUFFIX%TYPE DEFAULT NULL
    );
    
    













    FUNCTION FSBGETMARKETINGSEGMENT
    (
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN CC_MARKETING_SEGMENT.DESCRIPTION%TYPE;
    
    












     FUNCTION FSBGETIDENTBYCONTRACT
    (
        INUCONTRACT     SUSCRIPC.SUSCCODI%TYPE
    )
    RETURN  GE_SUBSCRIBER.IDENTIFICATION%TYPE;


    












    
    FUNCTION FSBGETCLIENTNAMEBYCONTRACT
    (
        INUCONTRACT     SUSCRIPC.SUSCCODI%TYPE
    )
    RETURN  VARCHAR2;
    

    












    
    
	
    
    
    














   
	
    
     
















   
	
    
    






















    FUNCTION FNUGETACTIVETIME
    (
        INUSUBSCRIBERID   IN PM_TARGET_POPULAT.PROJECT_ID%TYPE
    )
    RETURN NUMBER;

    









	PROCEDURE SETLASTUPDATE
    (
        INUSUBSCRIBERID IN GE_SUBS_GENERAL_DATA.SUBSCRIBER_ID%TYPE,
        IDTLASTUPDATE   IN GE_SUBS_GENERAL_DATA.LAST_UPDATE%TYPE DEFAULT UT_DATE.FDTSYSDATE
    );
    
    


















    FUNCTION GETIDENTYPEIDBYSUBSID
    (
        INUSUBSCRIBERID IN GE_SUBS_GENERAL_DATA.SUBSCRIBER_ID%TYPE

    ) RETURN NUMBER;

   





    PROCEDURE GETSUBSCRIBERBYADDRESSID
    (
        INUADDRESSID    IN AB_ADDRESS.ADDRESS_ID%TYPE,
        ONUSUBSCRIBERID OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    );
    
    



    PROCEDURE INSUPDSUBSADDDATA
    (
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBOLDOPERATOR      IN GE_SUBS_GENERAL_DATA.OLD_OPERATOR%TYPE,
        ISBCOMPANY          IN GE_SUBS_WORK_RELAT.COMPANY%TYPE,
        ISBTITLE            IN GE_SUBS_WORK_RELAT.TITLE%TYPE,
        INUPERSONQUANTITY   IN GE_SUBS_HOUSING_DATA.PERSON_QUANTITY%TYPE
     );
     
    




   
	
    
    




    PROCEDURE SETSUBSCRIBERSTATUS
    (
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE DEFAULT NULL
    );
    
    

















    PROCEDURE UPDSUBSDATAADDITIONAL
    (
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUIDENTTYPEID      IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION   IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        ISBNAME             IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBLASTNAME         IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBEMAIL            IN GE_SUBS_EMAIL.EMAIL%TYPE,
        ISBOLDOPERATOR      IN GE_SUBS_GENERAL_DATA.OLD_OPERATOR%TYPE,
        ISBCOMPANY          IN GE_SUBS_WORK_RELAT.COMPANY%TYPE,
        ISBTITLE            IN GE_SUBS_WORK_RELAT.TITLE%TYPE,
        INUPERSONQUANTITY   IN GE_SUBS_HOUSING_DATA.PERSON_QUANTITY%TYPE,
        INUPACKAGEID        IN GE_DATA_CHANGE_LOG.PACKAGE_ID%TYPE
    );
    
    














    
    PROCEDURE UPDSUBSDATAADDITIONPII
    (

        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBEMAIL            IN GE_SUBS_EMAIL.EMAIL%TYPE,
        ISBOLDOPERATOR      IN GE_SUBS_GENERAL_DATA.OLD_OPERATOR%TYPE,
        ISBCOMPANY          IN GE_SUBS_WORK_RELAT.COMPANY%TYPE,
        ISBTITLE            IN GE_SUBS_WORK_RELAT.TITLE%TYPE,
        INUPERSONQUANTITY   IN GE_SUBS_HOUSING_DATA.PERSON_QUANTITY%TYPE,
        INUPACKAGEID        IN GE_DATA_CHANGE_LOG.PACKAGE_ID%TYPE
    );
    





    FUNCTION FNUECONOMICACTIVITYID
    (
        INUSUBSCRIBERID IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    ) RETURN GE_SUBS_BUSINES_DATA.ECONOMIC_ACTIVITY_ID%TYPE;
    

    






    PROCEDURE CUSTOMERUPDATE
    (
        ICLCUSTOMERINFO IN  CLOB
    );
    
    





    PROCEDURE REGISTER
    (
        ICLCUSTOMERINFO         IN  CLOB,
        ONUSUBSCRIBER_ID        OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    );
    
    





    PROCEDURE INSERTADDRESS
    (
        IONUADDRESSID           IN OUT  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUGEOGRALOCATIONID     IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS              IN  AB_ADDRESS.ADDRESS%TYPE,
        ISBISURBAN              IN  AB_ADDRESS.IS_URBAN%TYPE
    );

    FUNCTION FNUGETSUBSCRIBERTYPE
    (
        INUSUBSCRIBER   IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE;
    
    




    PROCEDURE SETTAXPAYERAUTHO
    (
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUTAXPAYERID       IN GE_SUBSCRIBER.TAXPAYER_TYPE%TYPE,
        INUAUTHOID          IN GE_SUBSCRIBER.AUTHORIZATION_TYPE%TYPE,
        INUPACKAGEID        IN GE_DATA_CHANGE_LOG.PACKAGE_ID%TYPE DEFAULT NULL
    );

    







    PROCEDURE VALIDCHANGESUBSDDATA
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ORFFIELDSVALUE      OUT NOCOPY CONSTANTS.TYREFCURSOR
    );
    
    






    PROCEDURE NOTIFSUBSCHGBYREQUEST
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    );
    

    







    PROCEDURE CHANGESUBSDDATA
    (
        ORFFIELDSVALUE      OUT NOCOPY CONSTANTS.TYREFCURSOR
    );
    

    





    PROCEDURE INITCHANGEPACKAGE
    (
        INUPACKAGEID   IN   MO_PACKAGES.PACKAGE_ID%TYPE DEFAULT NULL
    );




    





    PROCEDURE VALCOMMERCIALNAME
    (
        INUSUBSCRIBERID IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBTRADENAME    IN  GE_SUBS_BUSINES_DATA.TRADE_NAME%TYPE,
        OSBYERORNOT     OUT UT_DATATYPES.STYYESORNO
    );
    
    




    PROCEDURE VALSUBSCRIBERBYINFO
    (
        SBPERSONTYPE        IN  UT_DATATYPES.STYMINVARCHAR,
        INUIDENTTYPEID      IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        INUIDENTIFICATION   IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        ISBSUBSCRIBERNAME   IN  GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME     IN  GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        IDTDATEBIRTH        IN  GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE
    );

    





    PROCEDURE VALREQUIREDINFO
    (
        ISBPERSONTYPE         IN  UT_DATATYPES.STYMINVARCHAR,
        ISBSUBSCRIBERNAME     IN  GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME       IN  GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBTRADENAME          IN  GE_SUBS_BUSINES_DATA.TRADE_NAME%TYPE,
        INUIDENTYPEID         IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        INUIDENTIFICATION     IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        ISBPHONE              IN  GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        IDTDATEBIRTH          IN  GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE,
        INUPREVIOUSADDRESS    IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUBILLINGADDRESS     IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        ISBSUBSFIRSTNAME      IN  GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE,
        ISBSUBSFIRSTLASTNAME  IN  GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE,
        IBOUPDATECUSTOMER     IN  UT_DATATYPES.STYBOOLEAN DEFAULT FALSE
    );

    





    PROCEDURE NOTIFCHANGEVERIFCODE
    (
        INUSUBSCRIBERID        IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    );
    
    





    PROCEDURE GENEVERICODEANDNOTIF
    (
        INUSUBSCRIBERID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    );
    
    





    PROCEDURE VALEQUALCUSTOMER
    (
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBSUBSCRIBERNAME   IN  GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME     IN  GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        IDTDATEBIRTH        IN  GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE
    );
    
    



    PROCEDURE WRITEXMLSUBSCRIBER
    (
        ICLCUSTOMERINFO IN  CLOB,
        OCLRESPONSE     OUT CLOB
    );
    
    




    PROCEDURE VALIDATEDUPLICATEID
    (
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUIDENTYPEID       IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION   IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE
    );

END GE_BOSUBSCRIBER;

PACKAGE BODY GE_BOSubscriber AS

    
































































































































































































































































































































































































    
    

    SUBTYPE STYTAGNAME      IS VARCHAR2(30);

    SUBTYPE STYSERVNAME     IS VARCHAR2(200);

    SUBTYPE STYMARKSEG      IS VARCHAR2(400);
    
    SUBTYPE STYMAXLENGTH    IS VARCHAR2(32767);

    SUBTYPE STYDATE         IS DATE;
    

    
    
    
    
    CSBVERSION                  CONSTANT UT_DATATYPES.STYSAOVERSION  := 'SAO539282';

    CNUSUBSCRIBERNOTEXIST       CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 1844;
    
    CNUERR_112204               CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 112204;
    
    CNUINVALID_IDENT_TYPE       CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 4888;
    
    CNUCONTACT_NO_NAME          CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 4925 ;
    
    CNUEQUAL_CLIE_CONTACT       CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 900336;
    
    CNUINVALID_EMAIL            CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 2124;
    
    CNUACTIV_ALREADY_USED       CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 902981;
    
    CNUSUBSCRIBEREXITS          CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 916972;
    
    CNUIDENTIFICATIONEXIST      CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 4123;
    
    CSBREQUIEREDINFO    CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  :=  110330;
    
    
    CSBCONTACTID                CONSTANT STYTAGNAME := 'SID_';
    
    
    CSBGE_SUBSCRIBER            CONSTANT STYTAGNAME := 'GE_SUBSCRIBER';
    
    
    CSBSUBS_CUSTOM_INFO         CONSTANT STYTAGNAME := 'CC_SUBS_CUSTOM_INFO';
    
    
    CSBCC_SUBS_CUSTOM_ATTRIB    CONSTANT STYTAGNAME := 'CC_SUBS_CUSTOM_ATTRIB';
    
    
    CSBSUBS_CUST_ATTRIB_ID      CONSTANT STYTAGNAME := 'SUBS_CUST_ATTRIB_ID';

    
    CNUUSERDATACHANGED          CONSTANT GE_NOTIF_EVENT.NOTIF_EVENT_ID%TYPE := 33;
    
    CNUCHANGEVERIFICODE         CONSTANT GE_NOTIF_EVENT.NOTIF_EVENT_ID%TYPE := 85;
    
    
    CNUADITIONALINFORREQUIRED   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE  :=  918688;
    
    
    CSBCUSTOMERUPDATE_XSD       CONSTANT UT_DATATYPES.STYXMLTAG := 'XSD_OS_CustomerUpdate.xsd';
    CSBCUSTOMEREGISTER_XSD      CONSTANT UT_DATATYPES.STYXMLTAG := 'XSD_OS_CustomerRegister.xsd';
   
    
    
    
    GSBCONTRACTCLIENT       SUSCRIPC.SUSCCODI%TYPE;
    GRCSUBSCRIBER           DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
    GNUSUBSCRIBERID         GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
    GNUPACKAGEID            MO_PACKAGES.PACKAGE_ID%TYPE;

    
    
    
    











    FUNCTION FSBVERSION  RETURN UT_DATATYPES.STYSAOVERSION IS
    BEGIN
        RETURN CSBVERSION;
    END;


    















    FUNCTION FBOISCORPORATE (
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    ) RETURN BOOLEAN
    IS
       SBISCORP   GE_SUBSCRIBER.IS_CORPORATIVE%TYPE;
    BEGIN

       SBISCORP := DAGE_SUBSCRIBER.FSBGETIS_CORPORATIVE( INUSUBSCRIBERID );

       IF (SBISCORP = CC_BOCONSTANTS.CSBSI) THEN
           RETURN TRUE;
       ELSE
           RETURN FALSE;
       END IF;

    EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOISCORPORATE;
    






















    PROCEDURE VAL_DUP_IDENT
    (
        INUIDENT_TYPE_ID     IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        INUIDENTIFICATION    IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicio: GE_BOSubscriber.Val_Dup_Ident ['||INUIDENT_TYPE_ID||'] ['||INUIDENTIFICATION||']', 5);
        
        IF (GE_BCSUBSCRIBER.FBLEXISTSUBSCRIBERBYIDENT(TRIM(INUIDENTIFICATION),
                                                      INUIDENT_TYPE_ID) ) THEN

            ERRORS.SETERROR( CNUIDENTIFICATIONEXIST, DAGE_IDENTIFICA_TYPE.FSBGETDESCRIPTION(INUIDENT_TYPE_ID)||'|'||TO_CHAR(INUIDENTIFICATION));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        UT_TRACE.TRACE('Fin: GE_BOSubscriber.Val_Dup_Ident', 5);
    EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VAL_DUP_IDENT;
    

    PROCEDURE GETSUBSCRIBER
    (
        INUSUBSCRIBER_ID    IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ORCSUBSCRIBER       OUT NOCOPY DAGE_SUBSCRIBER.STYGE_SUBSCRIBER
    )
    IS
    BEGIN
        DAGE_SUBSCRIBER.GETRECORD(INUSUBSCRIBER_ID,ORCSUBSCRIBER);
    EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSUBSCRIBER;


    























    FUNCTION VALIDIDENTIFICATION
    (
     ISBIDENTIFICATION  IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
     INUIDENT_TYPE_ID   IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
     ONUSUBSCRIBER_ID   OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        BLEXISTE                STYBOOL := TRUE;
        RCCLIENT                DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        RFCLIENTS               DAGE_SUBSCRIBER.TYRFRECORDS;
        NUGENERICIDENTYPE       GE_IDENTIFICA_TYPE.IDENT_TYPE_ID%TYPE;
    BEGIN
    
        BEGIN
            NUGENERICIDENTYPE := CC_BOLEAD.FNUGETIDENTTYPELEAD;
        EXCEPTION
            WHEN OTHERS THEN
                NUGENERICIDENTYPE := NULL;
        END;

        
        
        IF (INUIDENT_TYPE_ID = NUGENERICIDENTYPE AND
           ISBIDENTIFICATION = CC_BOLEAD.CSBIDENTIFICADEFAULT) THEN
            RETURN FALSE;
        END IF;

        RFCLIENTS := GE_BCSUBSCRIBER.FRFGETSUBSCRIBER( INUIDENT_TYPE_ID,
                                                       ISBIDENTIFICATION );
        FETCH RFCLIENTS INTO RCCLIENT;
        CLOSE RFCLIENTS;
        
        ONUSUBSCRIBER_ID := RCCLIENT.SUBSCRIBER_ID;

        IF ( ONUSUBSCRIBER_ID IS NULL ) THEN
            BLEXISTE := FALSE;
        END IF;

        RETURN BLEXISTE;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN FALSE;
    END VALIDIDENTIFICATION;














    FUNCTION GETSUBSCRIBERID
    (
    INUIDENTIFICA_TYPE  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
    ISBIDENTIFICATION   GE_SUBSCRIBER.IDENTIFICATION%TYPE
    )
        RETURN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    IS
        NUSUBSCRIBER_ID GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        BLEXIST     STYBOOL := FALSE;
    BEGIN

        BLEXIST := VALIDIDENTIFICATION (ISBIDENTIFICATION, INUIDENTIFICA_TYPE, NUSUBSCRIBER_ID );

        IF (NOT BLEXIST) THEN
            
            ERRORS.SETERROR(CNUSUBSCRIBERNOTEXIST,INUIDENTIFICA_TYPE||'|'||ISBIDENTIFICATION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        RETURN NUSUBSCRIBER_ID;
    EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


	


    




































































    PROCEDURE CREATESUBSCRIBER
    (
        INUIDENTTYPEID      IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION   IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUSUBSCRIBERTYPEID IN  GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE,
        ISBSUBSCRIBERNAME   IN  GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME     IN  GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBPHONE            IN  GE_SUBSCRIBER.PHONE%TYPE,
        INUPHONETYPE        IN  GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        ISBEMAIL            IN  GE_SUBS_EMAIL.EMAIL%TYPE,
        INUEMAILTYPE        IN  GE_SUBS_EMAIL.TYPE_ID%TYPE,
        ONUSUBSCRIBERID     OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBCONTACTADDRESS   IN  GE_SUBSCRIBER.ADDRESS%TYPE DEFAULT NULL,
        ISBMARKETINGSEGMENT IN  GE_SUBSCRIBER.MARKETING_SEGMENT_ID%TYPE DEFAULT NULL,
        IBLSIMULATE         IN  UT_DATATYPES.STYBOOLEAN DEFAULT FALSE
    )
    IS
        RCSUBSCRIBER    DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
    BEGIN
    UT_TRACE.TRACE('Inicia Servicio GE_BOSubscriber.CreateSubscriber',3);

        
        IF(IBLSIMULATE) THEN
            RCSUBSCRIBER.SUBSCRIBER_ID := CC_BOCOPYSUBSCRIPTION.FNUGETSUBSCRIPTIONID(IBLSIMULATE);
        ELSE
            RCSUBSCRIBER.SUBSCRIBER_ID := GE_BOSEQUENCE.NEXTGE_SUBSCRIBER;
        END IF;

        
        RCSUBSCRIBER.IDENT_TYPE_ID          := INUIDENTTYPEID;
        RCSUBSCRIBER.IDENTIFICATION         := UPPER(TRIM(ISBIDENTIFICATION));
        RCSUBSCRIBER.SUBSCRIBER_TYPE_ID     := INUSUBSCRIBERTYPEID;
        RCSUBSCRIBER.SUBSCRIBER_NAME        := UPPER(ISBSUBSCRIBERNAME);
        RCSUBSCRIBER.SUBS_LAST_NAME         := UPPER(ISBSUBSLASTNAME);
        RCSUBSCRIBER.ACTIVE                 := GE_BOCONSTANTS.CSBYES;
        RCSUBSCRIBER.MARKETING_SEGMENT_ID   :=ISBMARKETINGSEGMENT;
        RCSUBSCRIBER.PARENT_SUBSCRIBER_ID   := MO_BOCONSTANTS.CNUDEFAULTCORPORATIVECUSTOMER;
        RCSUBSCRIBER.AUTHORIZATION_TYPE     := FA_BCTIPOAUTO.CNUTIPOAUTONULO;
        RCSUBSCRIBER.TAXPAYER_TYPE          := FA_BCTIPOCONT.CNUTIPOCONTNULO;
        RCSUBSCRIBER.IS_CORPORATIVE         := CC_BOCONSTANTS.CSBNO;

        
        IF (ISBPHONE IS NULL AND INUPHONETYPE IS NOT NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917644);
        ELSIF(ISBPHONE IS NOT NULL AND INUPHONETYPE IS NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917645);
        END IF;

        
        IF (ISBEMAIL IS NULL AND INUEMAILTYPE IS NOT NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917642);
        ELSIF(ISBEMAIL IS NOT NULL AND INUEMAILTYPE IS NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917643);
        END IF;

        
        DAGE_SUBSCRIBER.INSRECORD(RCSUBSCRIBER);
        ONUSUBSCRIBERID := RCSUBSCRIBER.SUBSCRIBER_ID;

        
        IF (INUPHONETYPE IS NOT NULL AND ISBPHONE IS NOT NULL) THEN
            CC_BOSUBSCRIBER.SETCUSTOMERPHONE(
                                                RCSUBSCRIBER.SUBSCRIBER_ID,
                                                NULL,
                                                NULL,
                                                INUPHONETYPE,
                                                ISBPHONE
                                            );
        END IF;
        
        
        IF (INUEMAILTYPE IS NOT NULL AND ISBEMAIL IS NOT NULL) THEN
            CC_BOSUBSEMAIL.INSSUBSEMAIL(
                                            RCSUBSCRIBER.SUBSCRIBER_ID,
                                            ISBEMAIL,
                                            INUEMAILTYPE,
                                            NULL
                                        );
        END IF;
        
        UT_TRACE.TRACE('Suscriptor Creado:['||ONUSUBSCRIBERID||']',4);

        
        GE_BOSUBSCRIBER.SETLASTUPDATE(RCSUBSCRIBER.SUBSCRIBER_ID);

    UT_TRACE.TRACE('Finaliza Servicio GE_BOSubscriber.CreateSubscriber',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATESUBSCRIBER;
    

   























































































































    PROCEDURE REGISTER
    (
        IONUSUBSCRIBER_ID       IN OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUIDENT_TYPE_ID        IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION       IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUPARENT_SUBSCRIBER_ID IN GE_SUBSCRIBER.PARENT_SUBSCRIBER_ID%TYPE,
        INUSUBSCRIBER_TYPE_ID   IN GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE,
        ISBADDRESS              IN GE_SUBSCRIBER.ADDRESS%TYPE,
        ISBPHONE                IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        INUPHONETYPE            IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        ISBSUBSCRIBER_NAME      IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBS_LAST_NAME       IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBE_MAIL               IN GE_SUBS_EMAIL.EMAIL%TYPE,
        INUE_MAILTYPE           IN GE_SUBS_EMAIL.TYPE_ID%TYPE,
        ISBURL                  IN GE_SUBSCRIBER.URL%TYPE,
        ISBCONTACT_PHONE        IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        INUCONTACT_PHONETYPE    IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        ISBCONTACT_ADDRESS      IN GE_SUBSCRIBER.ADDRESS%TYPE,
        ISBCONTACT_NAME         IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        INUCONTACT_IDENT_TYPE   IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBCONTACT_IDENT        IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUMARKETING_SEGMENT_ID IN GE_SUBSCRIBER.MARKETING_SEGMENT_ID%TYPE,
        INUSUBS_STATUS_ID       IN GE_SUBSCRIBER.SUBS_STATUS_ID%TYPE DEFAULT 1,
        IBOVALIDDATA            IN STYBOOL DEFAULT TRUE,
        INUADDRESSID            IN AB_ADDRESS.ADDRESS_ID%TYPE DEFAULT NULL,
        IDTDATE_BIRTH           IN GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE DEFAULT NULL,
        INUCONTACT_ADDRESSID    IN GE_SUBSCRIBER.ADDRESS_ID%TYPE DEFAULT NULL,
        ISBSEX                  IN GE_SUBS_GENERAL_DATA.GENDER%TYPE DEFAULT NULL,
        INUECONOMIC_ACTIVITY_ID IN GE_SUBS_BUSINES_DATA.ECONOMIC_ACTIVITY_ID%TYPE DEFAULT NULL,
        INUTAXPAYER_TYPE_ID     IN GE_SUBSCRIBER.TAXPAYER_TYPE%TYPE DEFAULT NULL,
        INULANGUAGEPREFE        IN ST_LANGUAGES.ID%TYPE DEFAULT NULL,
        ISBPREFIX               IN GE_SUBSCRIBER.SUBS_PREFIX%TYPE DEFAULT NULL,
        ISBSUBSFIRSTNAME        IN GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDNAME       IN GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE DEFAULT NULL,
        ISBSUBSFIRSTLASTNAME    IN GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDLASTNAME   IN GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUFFIX               IN GE_SUBSCRIBER.SUBS_SUFFIX%TYPE DEFAULT NULL
    )
    IS
        RCSUBSCRIBER    DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        RCSUBSGENERAL   DAGE_SUBS_GENERAL_DATA.STYGE_SUBS_GENERAL_DATA;
        RCSUBSBUSSDATA  DAGE_SUBS_BUSINES_DATA.STYGE_SUBS_BUSINES_DATA;
        NUCONTACTID     GE_SUBSCRIBER.CONTACT_ID%TYPE := NULL;

        PROCEDURE VALIDATEDATA
        IS
            NUPARENTSUBSCRIBERID    GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
            CNUINVALID_PARENT       CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 110643;
        BEGIN
            
            IF (NOT IBOVALIDDATA ) THEN
                RETURN;
            END IF;

            NUPARENTSUBSCRIBERID :=  NVL(INUPARENT_SUBSCRIBER_ID, MO_BOCONSTANTS.CNUDEFAULTCORPORATIVECUSTOMER);
            DAGE_SUBSCRIBER_TYPE.ACCKEY( INUSUBSCRIBER_TYPE_ID );

            
            DAGE_SUBSCRIBER.ACCKEY( NUPARENTSUBSCRIBERID );

            IF (NOT FBOISCORPORATE (NUPARENTSUBSCRIBERID)) THEN
                
                ERRORS.SETERROR( CNUINVALID_PARENT );
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            DAGE_IDENTIFICA_TYPE.ACCKEY( INUIDENT_TYPE_ID );

            DAGE_SUBS_STATUS.ACCKEY( INUSUBS_STATUS_ID );

            
            IF (INUMARKETING_SEGMENT_ID IS NOT NULL) THEN
                DACC_MARKETING_SEGMENT.ACCKEY ( INUMARKETING_SEGMENT_ID );
            END IF;

            
            VAL_DUP_IDENT(INUIDENT_TYPE_ID, ISBIDENTIFICATION);

             
            IF (DAGE_IDENTIFICA_TYPE.FSBGETIS_CURRENT(INUIDENT_TYPE_ID) = GE_BOCONSTANTS.CSBNO) THEN
                ERRORS.SETERROR( CNUINVALID_IDENT_TYPE );
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            CC_BORULEVALIDATE.VALIDATEIDENTIFICATION(INUIDENT_TYPE_ID, ISBIDENTIFICATION);

            
            IF (INUCONTACT_IDENT_TYPE IS NOT NULL) THEN
                DAGE_IDENTIFICA_TYPE.ACCKEY( INUCONTACT_IDENT_TYPE );
            END IF;

            
            
            IF (INUIDENT_TYPE_ID = INUCONTACT_IDENT_TYPE AND ISBIDENTIFICATION = ISBCONTACT_IDENT) THEN
                ERRORS.SETERROR( CNUEQUAL_CLIE_CONTACT );
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            IF ( NOT ( ISBSEX IN ('M', 'F') ) ) THEN

                GE_BOERRORS.SETERRORCODE( GE_BOUTILITIES.CNUSEXFORMAT );

            END IF;

            
            IF (INUECONOMIC_ACTIVITY_ID IS NOT NULL) THEN
                DAGE_ECONOMIC_ACTIVITY.ACCKEY( INUECONOMIC_ACTIVITY_ID );
            END IF;

            
            IF (INUTAXPAYER_TYPE_ID IS NOT NULL) THEN
                PKTBLFA_TIPOCONT.ACCKEY (INUTAXPAYER_TYPE_ID );
            END IF;

            
            IF DAST_LANGUAGES.FBLEXIST(INULANGUAGEPREFE) = TRUE THEN
                DAST_LANGUAGES.ACCKEY(INULANGUAGEPREFE);
            END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSubscriber.Register. Id:['||IONUSUBSCRIBER_ID||']Ide:['||ISBIDENTIFICATION||']Tipo Ide:['||INUIDENT_TYPE_ID||']',3);
        UT_TRACE.TRACE('Nombre:['||ISBSUBSCRIBER_NAME||']Apellido:['||ISBSUBS_LAST_NAME||']Direcci�n:['||ISBADDRESS||']Tel�fono:['||ISBPHONE||'] Tipo de tel�fono:['||INUPHONETYPE||']',3);
        UT_TRACE.TRACE('prefix:[' || ISBPREFIX || ']firstName:[' || ISBSUBSFIRSTNAME        ||
                       ']secondName:[' || ISBSUBSSECONDNAME || ']firstLastName:['           ||
                       ISBSUBSFIRSTLASTNAME ||'] secondLastName:[' || ISBSUBSSECONDLASTNAME ||
                       ']suffix:[' || ISBSUFFIX, 3);

        
        VALIDATEDATA ;

        RCSUBSCRIBER.IDENT_TYPE_ID          := INUIDENT_TYPE_ID;
        RCSUBSCRIBER.IDENTIFICATION         := UPPER(ISBIDENTIFICATION);
        RCSUBSCRIBER.PARENT_SUBSCRIBER_ID   := NVL(INUPARENT_SUBSCRIBER_ID, MO_BOCONSTANTS.CNUDEFAULTCORPORATIVECUSTOMER);
        RCSUBSCRIBER.SUBSCRIBER_TYPE_ID     := INUSUBSCRIBER_TYPE_ID;
        RCSUBSCRIBER.SUBSCRIBER_NAME        := UPPER(ISBSUBSCRIBER_NAME);
        RCSUBSCRIBER.SUBS_LAST_NAME         := UPPER(ISBSUBS_LAST_NAME);

        RCSUBSCRIBER.SUBS_PREFIX            := UPPER(ISBPREFIX);
        RCSUBSCRIBER.SUBS_FIRST_NAME        := UPPER(ISBSUBSFIRSTNAME);
        RCSUBSCRIBER.SUBS_SECOND_NAME       := UPPER(ISBSUBSSECONDNAME);
        RCSUBSCRIBER.SUBS_FIRST_LAST_NAME   := UPPER(ISBSUBSFIRSTLASTNAME);
        RCSUBSCRIBER.SUBS_SECOND_LAST_NAME  := UPPER(ISBSUBSSECONDLASTNAME);
        RCSUBSCRIBER.SUBS_SUFFIX            := UPPER(ISBSUFFIX);

        RCSUBSCRIBER.SUBS_STATUS_ID         := NVL(INUSUBS_STATUS_ID, 1);
        RCSUBSCRIBER.ACTIVE                 := GE_BOCONSTANTS.CSBYES;
        RCSUBSCRIBER.MARKETING_SEGMENT_ID   := INUMARKETING_SEGMENT_ID;
        RCSUBSCRIBER.AUTHORIZATION_TYPE     := FA_BCTIPOAUTO.CNUTIPOAUTONULO;
        RCSUBSCRIBER.TAXPAYER_TYPE          := INUTAXPAYER_TYPE_ID;

        RCSUBSCRIBER.MANAGEMENT_ACCOUNT     := IC_BOMANAGEMENTACCOUNT.FSBDEFMANAGACCOUNT( RCSUBSCRIBER.IDENT_TYPE_ID, RCSUBSCRIBER.IDENTIFICATION );

        RCSUBSCRIBER.LANGUAGE               := INULANGUAGEPREFE;

        
        CREATECONTACT
            (
            NUCONTACTID,
            ISBCONTACT_NAME,
            NULL,
            NULL,
            ISBCONTACT_PHONE,
            INUCONTACT_PHONETYPE,
            INUCONTACT_IDENT_TYPE,
            ISBCONTACT_IDENT,
            INUSUBS_STATUS_ID,
            INUCONTACT_ADDRESSID
            );

        
        IF ( IONUSUBSCRIBER_ID IS NULL) THEN
            IONUSUBSCRIBER_ID := GE_BOSEQUENCE.NEXTGE_SUBSCRIBER;
        END IF;

        RCSUBSCRIBER.SUBSCRIBER_ID  := IONUSUBSCRIBER_ID;
        RCSUBSCRIBER.CONTACT_ID     := NUCONTACTID;
        RCSUBSCRIBER.ADDRESS_ID     := INUADDRESSID;

        RCSUBSCRIBER.IS_CORPORATIVE := CC_BOCONSTANTS.CSBNO;

        
        IF (ISBPHONE IS NULL AND INUPHONETYPE IS NOT NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917644);
        ELSIF(ISBPHONE IS NOT NULL AND INUPHONETYPE IS NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917645);
        END IF;

        
        IF (ISBE_MAIL IS NULL AND INUE_MAILTYPE IS NOT NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917642);
        ELSIF(ISBE_MAIL IS NOT NULL AND INUE_MAILTYPE IS NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917643);
        END IF;

        
        DAGE_SUBSCRIBER.INSRECORD(RCSUBSCRIBER);
        UT_TRACE.TRACE('Cliente Creado:['||IONUSUBSCRIBER_ID||']',3);

        IF INUPHONETYPE IS NOT NULL AND ISBPHONE IS NOT NULL THEN
            
            CC_BOSUBSCRIBER.SETCUSTOMERPHONE(
                                                RCSUBSCRIBER.SUBSCRIBER_ID,
                                                NULL,
                                                NULL,
                                                INUPHONETYPE,
                                                ISBPHONE
                                            );
        END IF;

        IF ISBE_MAIL IS NOT NULL AND INUE_MAILTYPE IS NOT NULL THEN
            
            CC_BOSUBSEMAIL.INSSUBSEMAIL(
                                            RCSUBSCRIBER.SUBSCRIBER_ID,
                                            ISBE_MAIL,
                                            INUE_MAILTYPE,
                                            NULL
                                        );
        END IF;

        IF (IDTDATE_BIRTH IS NOT NULL OR ISBSEX IS NOT NULL) THEN
            RCSUBSGENERAL.SUBSCRIBER_ID := IONUSUBSCRIBER_ID;
            RCSUBSGENERAL.DATE_BIRTH    := IDTDATE_BIRTH;
            RCSUBSGENERAL.GENDER        := ISBSEX;
            DAGE_SUBS_GENERAL_DATA.INSRECORD(RCSUBSGENERAL);
        END IF;

        
        IF (ISBURL IS NOT NULL OR INUECONOMIC_ACTIVITY_ID IS NOT NULL) THEN
            RCSUBSBUSSDATA.SUBSCRIBER_ID := IONUSUBSCRIBER_ID;
            RCSUBSBUSSDATA.URL := ISBURL;
            RCSUBSBUSSDATA.ECONOMIC_ACTIVITY_ID := INUECONOMIC_ACTIVITY_ID;
            DAGE_SUBS_BUSINES_DATA.INSRECORD(RCSUBSBUSSDATA);
        END IF;

        
        GE_BOSUBSCRIBER.SETLASTUPDATE(IONUSUBSCRIBER_ID);

        UT_TRACE.TRACE('Finaliza Servicio GE_BOSubscriber.Register',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    































































































































































































    PROCEDURE UPDSUBSCRIBER
    (
        INUSUBSCRIBER_ID        IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUIDENT_TYPE_ID        IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION       IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUPARENT_SUBSCRIBER_ID IN GE_SUBSCRIBER.PARENT_SUBSCRIBER_ID%TYPE,
        INUSUBSCRIBER_TYPE_ID   IN GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE,
        INUADDRESSID            IN GE_SUBSCRIBER.ADDRESS_ID%TYPE,
        INUGEOGRALOCATIONID     IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS              IN AB_ADDRESS.ADDRESS%TYPE,
        ISBISURBAN              IN AB_ADDRESS.IS_URBAN%TYPE,
        ISBPHONE                IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        INUPHONETYPE            IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        ISBSUBSCRIBER_NAME      IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBS_LAST_NAME       IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBE_MAIL               IN GE_SUBS_EMAIL.EMAIL%TYPE,
        INUE_MAILTYPE           IN GE_SUBS_EMAIL.TYPE_ID%TYPE,
        ISBURL                  IN GE_SUBSCRIBER.URL%TYPE,
        INUCONTACTID            IN GE_SUBSCRIBER.CONTACT_ID%TYPE,
        INUMARKETING_SEGMENT_ID IN GE_SUBSCRIBER.MARKETING_SEGMENT_ID%TYPE,
        INUSUBS_STATUS_ID       IN GE_SUBSCRIBER.SUBS_STATUS_ID%TYPE,
        ISBSEX                  IN GE_SUBS_GENERAL_DATA.GENDER%TYPE,
        IDTBIRTHDATE            IN GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE,
        IBOVALIDDATA            IN STYBOOL DEFAULT TRUE,
        ISBCONTACT_PHONE        IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE DEFAULT NULL,
        INUCONTACT_PHONETYPE    IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE DEFAULT NULL,
        ISBCONTACT_NAME         IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE DEFAULT NULL,
        INUCONTACT_IDENT_TYPE   IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCONTACT_IDENT        IN GE_SUBSCRIBER.IDENTIFICATION%TYPE DEFAULT NULL,
        INUPACKAGEID            IN GE_DATA_CHANGE_LOG.PACKAGE_ID%TYPE DEFAULT NULL,
        ISBCONTACTLASTNAME      IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE DEFAULT NULL,
        INUECONOMICACTIVITYID   IN GE_SUBSCRIBER.ECONOMIC_ACTIVITY_ID%TYPE DEFAULT NULL,
        INUTAXPAYERTYPEID       IN GE_SUBSCRIBER.TAXPAYER_TYPE%TYPE DEFAULT NULL,
        INUBIRTHLOCATIONID      IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE DEFAULT NULL,
        INUDOCPLACEISSUE        IN GE_SUBSCRIBER.DOC_PLACE_OF_ISSUE%TYPE DEFAULT NULL,
        IDTDOCDATEISSUE         IN GE_SUBSCRIBER.DOC_DATE_OF_ISSUE%TYPE DEFAULT NULL,
        ISBFAXNUMBER            IN GE_SUBSCRIBER.PHONE%TYPE DEFAULT NULL,
        ISBRESIDENT             IN GE_SUBS_HOUSING_DATA.RESIDENT%TYPE DEFAULT NULL,
        INUSCHOOLDEGREEID       IN GE_SUBS_GENERAL_DATA.SCHOOL_DEGREE_ID%TYPE DEFAULT NULL,
        INUPROFESSIONID         IN GE_SUBS_GENERAL_DATA.PROFESSION_ID%TYPE DEFAULT NULL,
        INUWAGESCALEID          IN GE_SUBS_GENERAL_DATA.WAGE_SCALE_ID%TYPE DEFAULT NULL,
        INUDEBITSCALEID         IN GE_SUBS_GENERAL_DATA.DEBIT_SCALE_ID%TYPE DEFAULT NULL,
        INUCIVILSTATEID         IN GE_SUBS_GENERAL_DATA.CIVIL_STATE_ID%TYPE DEFAULT NULL,
        ISBRUT                  IN GE_SUBS_FISCAL_DATA.RUT%TYPE DEFAULT NULL,
        ISBSELFCOLLECTORFLAG    IN GE_SUBS_FISCAL_DATA.SELF_COLLECTOR_FLAG%TYPE DEFAULT NULL,
        IDTBEGACTDATE           IN GE_SUBS_BUSINES_DATA.BEGINNING_ACTIVITIES%TYPE DEFAULT NULL,
        ISBNATIONALITY          IN GE_SUBS_GENERAL_DATA.NATIONALITY%TYPE DEFAULT NULL,
        ISBDATASEND             IN GE_SUBSCRIBER.DATA_SEND%TYPE DEFAULT NULL,
        ISBACCEPTCALL           IN GE_SUBSCRIBER.ACCEPT_CALL%TYPE DEFAULT NULL,
        INUAUTHORIZATIONTYPEID  IN GE_SUBSCRIBER.AUTHORIZATION_TYPE%TYPE DEFAULT NULL,
        ISBOLDOPERATOR          IN GE_SUBS_GENERAL_DATA.OLD_OPERATOR%TYPE DEFAULT NULL,
        ISBCOMMENT              IN GE_SUBS_GENERAL_DATA.COMMENT_%TYPE DEFAULT NULL,
        ISBISCORPORATIVE        IN GE_SUBSCRIBER.IS_CORPORATIVE%TYPE DEFAULT NULL,
        INUDISABILITYPERCENT    IN GE_SUBSCRIBER.DISABILITY_PERCENT%TYPE DEFAULT NULL,
        INUDISABILITYTYPEID     IN GE_SUBSCRIBER.DISABILITY_TYPE_ID%TYPE DEFAULT NULL,
        INULANGUAGEID           IN GE_SUBSCRIBER.LANGUAGE%TYPE DEFAULT NULL,
        ISBPREFIX               IN GE_SUBSCRIBER.SUBS_PREFIX%TYPE DEFAULT NULL,
        ISBSUBSFIRSTNAME        IN GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDNAME       IN GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE DEFAULT NULL,
        ISBSUBSFIRSTLASTNAME    IN GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDLASTNAME   IN GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUFFIX               IN GE_SUBSCRIBER.SUBS_SUFFIX%TYPE DEFAULT NULL,
        ISBCONTPREFIX           IN GE_SUBSCRIBER.SUBS_PREFIX%TYPE DEFAULT NULL,
        ISBCONTFIRSTNAME        IN GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE DEFAULT NULL,
        ISBCONTSECONDNAME       IN GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE DEFAULT NULL,
        ISBCONTFIRSTLASTNAME    IN GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE DEFAULT NULL,
        ISBCONTSECONDLASTNAME   IN GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE DEFAULT NULL,
        ISBCONTACTSUFFIX        IN GE_SUBSCRIBER.SUBS_SUFFIX%TYPE DEFAULT NULL
    )
    IS
        NUIDENTIFICATYPEID   GE_IDENTIFICA_TYPE.IDENT_TYPE_ID%TYPE;
        NUPERSONCLASSID      GE_PERSON_CLASS.PERSON_CLASS_ID%TYPE;
        SBSUBSADDNAMEINFO    UT_DATATYPES.STYYESORNO;
        SBSUBSCRIBERNAME     GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE;
        SBSUBSLASTNAME       GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE;
        SBSUBSFIRSTNAME      GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE;
        SBSUBSFIRSTLASTNAME  GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE;
        SBCONTACTNAME        GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE;
        SBCONTACTLASTNAME    GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE;

        RCORISUBSCRIBER     DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        RCSUBSCRIBER        DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;

        RCORISUBSBUSSDATA   DAGE_SUBS_BUSINES_DATA.STYGE_SUBS_BUSINES_DATA;
        RCSUBSBUSSDATA      DAGE_SUBS_BUSINES_DATA.STYGE_SUBS_BUSINES_DATA;

        RCORISUBSGENERAL    DAGE_SUBS_GENERAL_DATA.STYGE_SUBS_GENERAL_DATA;
        RCSUBSGENERAL       DAGE_SUBS_GENERAL_DATA.STYGE_SUBS_GENERAL_DATA;

        RCORISUBSHOUSDATA   DAGE_SUBS_HOUSING_DATA.STYGE_SUBS_HOUSING_DATA;
        RCSUBSHOUSINGDATA   DAGE_SUBS_HOUSING_DATA.STYGE_SUBS_HOUSING_DATA;

        RCORISUBSFISCALDATA DAGE_SUBS_FISCAL_DATA.STYGE_SUBS_FISCAL_DATA;
        RCSUBSFISCALDATA    DAGE_SUBS_FISCAL_DATA.STYGE_SUBS_FISCAL_DATA;

        NUADDRESSID         GE_SUBSCRIBER.ADDRESS_ID%TYPE := INUADDRESSID;
        NUCONTACTID         GE_SUBSCRIBER.CONTACT_ID%TYPE := INUCONTACTID;

        SBIDENTIFICATION    GE_SUBSCRIBER.IDENTIFICATION%TYPE := UPPER(ISBIDENTIFICATION);
        SBCONTACT_IDENT     GE_SUBSCRIBER.IDENTIFICATION%TYPE := UPPER(ISBCONTACT_IDENT);

        PROCEDURE VALIDATEDATA
        IS
            SBADDRESS_PARSED        AB_ADDRESS.ADDRESS_PARSED%TYPE;
            SBSUCCESSMESSAGE        GE_ERROR_LOG.DESCRIPTION%TYPE;
            NUERROR                 GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
            SBERRMSG                GE_ERROR_LOG.DESCRIPTION%TYPE;
            SBCALLSERVICE           STYSERVNAME;
            EXCALLSERVICE           EXCEPTION;
            CNUDISABILITYPERCENTREQ CONSTANT GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 903036;
        BEGIN

            
            IF (NOT IBOVALIDDATA ) THEN
                RETURN;
            END IF;

            
            IF (INUIDENT_TYPE_ID IS NOT NULL) THEN

                DAGE_IDENTIFICA_TYPE.ACCKEY( INUIDENT_TYPE_ID );

                IF ( NOT ( INUIDENT_TYPE_ID = RCSUBSCRIBER.IDENT_TYPE_ID ) ) THEN

                    
                    IF (DAGE_IDENTIFICA_TYPE.FSBGETIS_CURRENT(INUIDENT_TYPE_ID) = GE_BOCONSTANTS.CSBNO) THEN
                        ERRORS.SETERROR( CNUINVALID_IDENT_TYPE );
                        RAISE EX.CONTROLLED_ERROR;
                    END IF;

                    
                    CC_BORULEVALIDATE.VALIDATEIDENTIFICATION(INUIDENT_TYPE_ID, NVL(SBIDENTIFICATION, RCSUBSCRIBER.IDENTIFICATION));

                END IF;

            END IF;

            IF ( NOT ( RCSUBSCRIBER.IDENTIFICATION = SBIDENTIFICATION ) )
            OR ( NOT ( RCSUBSCRIBER.IDENT_TYPE_ID = INUIDENT_TYPE_ID ) )
            THEN
                
                
                VAL_DUP_IDENT(INUIDENT_TYPE_ID, SBIDENTIFICATION);
            END IF;

            
            IF ( NOT ( SBIDENTIFICATION = RCSUBSCRIBER.IDENTIFICATION ) ) THEN
                CC_BORULEVALIDATE.VALIDATEIDENTIFICATION(NVL(INUIDENT_TYPE_ID, RCSUBSCRIBER.IDENT_TYPE_ID), SBIDENTIFICATION);
            END IF;

            
            IF (INUPARENT_SUBSCRIBER_ID IS NOT NULL) THEN
                DAGE_SUBSCRIBER.ACCKEY( INUPARENT_SUBSCRIBER_ID );
            END IF;

            
            IF (INUSUBSCRIBER_TYPE_ID IS NOT NULL) THEN
                DAGE_SUBSCRIBER_TYPE.ACCKEY( INUSUBSCRIBER_TYPE_ID );
            END IF;

            
            IF (INUADDRESSID IS NOT NULL) THEN
                DAAB_ADDRESS.ACCKEY(INUADDRESSID);
            ELSE
                IF (INUGEOGRALOCATIONID IS NOT NULL OR
                    ISBADDRESS IS NOT NULL OR
                    ISBISURBAN IS NOT NULL) THEN

                    
                    PR_BOVALIDATE.VALIDATEDATAADDRESS(INUADDRESSID,
                                                      INUGEOGRALOCATIONID,
                                                      ISBADDRESS,
                                                      ISBISURBAN);

                    
            		AB_BSADDRESSPARSER.INSERTADDRESSONNOTFOUND  (INUGEOGRALOCATIONID,
                                                    			 ISBADDRESS,
                                                    			 NUADDRESSID,
                                                    			 SBADDRESS_PARSED,
                                                    			 SBSUCCESSMESSAGE,
                                                    			 NUERROR,
                                                    			 SBERRMSG,
                                                                 ISBISURBAN);
                    
                    IF ( NOT ( NUERROR = MO_BOCONSTANTS.CNUOK ) ) THEN

                        SBCALLSERVICE := 'AB_BSAddressParser.insertAddressOnNotFound';
                        RAISE EXCALLSERVICE;

                    END IF;
                END IF;
            END IF;

            
            IF (INUSUBS_STATUS_ID IS NOT NULL) THEN
                DAGE_SUBS_STATUS.ACCKEY( INUSUBS_STATUS_ID );
            END IF;

            
            IF (INUMARKETING_SEGMENT_ID IS NOT NULL) THEN
                DACC_MARKETING_SEGMENT.ACCKEY ( INUMARKETING_SEGMENT_ID );
            END IF;

            
            IF (INUCONTACTID IS NOT NULL) THEN
                DAGE_SUBSCRIBER.ACCKEY(INUCONTACTID);
            END IF;

            
            IF ( NOT ( ISBSEX IN ('M', 'F') ) )THEN

                GE_BOERRORS.SETERRORCODE( GE_BOUTILITIES.CNUSEXFORMAT );

            END IF;

            
            IF (ISBE_MAIL IS NOT NULL AND NOT UT_MAIL.FBLVALIDATEMAIL(ISBE_MAIL)) THEN
                ERRORS.SETERROR(CNUINVALID_EMAIL);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            IF (INUECONOMICACTIVITYID IS NOT NULL) THEN
                DAGE_ECONOMIC_ACTIVITY.ACCKEY(INUECONOMICACTIVITYID);
                IF(CC_BOSUBSCRIBER.FBOEXISTADDITECOACTI(INUSUBSCRIBER_ID, INUECONOMICACTIVITYID)) THEN

                    GE_BOERRORS.SETERRORCODEARGUMENT( CNUACTIV_ALREADY_USED,
                                                      INUECONOMICACTIVITYID );

                END IF;
            END IF;

            
            IF (INUTAXPAYERTYPEID IS NOT NULL) THEN
                PKTBLFA_TIPOCONT.ACCKEY(INUTAXPAYERTYPEID);
            END IF;

           
            IF (INUBIRTHLOCATIONID IS NOT NULL) THEN
                DAGE_GEOGRA_LOCATION.ACCKEY(INUBIRTHLOCATIONID);
            END IF;

            
            IF ( NOT ( ISBRESIDENT IN ('Y', 'N' ) ) ) THEN

                GE_BOERRORS.SETERRORCODEARGUMENT( 901571, GE_BCMESSAGE.FSBGETDESCRIPTION(800118) );

            END IF;

           
            IF ( INUSCHOOLDEGREEID  IS NOT NULL ) THEN
                DAGE_SCHOOL_DEGREE.ACCKEY(INUSCHOOLDEGREEID);
            END IF;

           
            IF (INUPROFESSIONID  IS NOT NULL ) THEN
                DAGE_PROFESSION.ACCKEY(INUPROFESSIONID);
            END IF;

           
            IF (INUWAGESCALEID IS NOT NULL ) THEN
                DAGE_WAGE_SCALE.ACCKEY(INUWAGESCALEID);
            END IF;

           
            IF (INUDEBITSCALEID IS NOT NULL ) THEN
                DAGE_WAGE_SCALE.ACCKEY(INUDEBITSCALEID);
            END IF;

           
            IF (INUCIVILSTATEID IS NOT NULL ) THEN
                DAGE_CIVIL_STATE.ACCKEY(INUCIVILSTATEID);
            END IF;

            
            IF ( NOT ( ISBSELFCOLLECTORFLAG IN ( 'Y', 'N' ) ) ) THEN

                GE_BOERRORS.SETERRORCODEARGUMENT( 901571, 'isbSelfCollectorFlag' );

            END IF;

            
            IF ( NOT ( ISBDATASEND IN ( 'Y', 'N' ) ) ) THEN

                GE_BOERRORS.SETERRORCODEARGUMENT( 901571, 'isbDataSend' );

            END IF;

            
            IF ( NOT ( ISBACCEPTCALL IN ( 'Y', 'N' ) ) ) THEN

                GE_BOERRORS.SETERRORCODEARGUMENT( 901571, 'isbAcceptCall' );

            END IF;

           
            IF (INUAUTHORIZATIONTYPEID IS NOT NULL ) THEN
                PKTBLFA_TIPOAUTO.ACCKEY(INUAUTHORIZATIONTYPEID);
            END IF;

            
            IF ( NOT ( ISBISCORPORATIVE IN ( 'Y', 'N' ) ) ) THEN

                GE_BOERRORS.SETERRORCODEARGUMENT( 901571, 'isbIsCorporative' );

            END IF;

            
            IF(INUDISABILITYTYPEID IS NOT NULL)THEN
                DAGE_DISABILITY_TYPE.ACCKEY(INUDISABILITYTYPEID);
            END IF;

            
            IF((INUDISABILITYTYPEID IS NULL AND INUDISABILITYPERCENT IS NOT NULL) OR
               (INUDISABILITYTYPEID IS NOT NULL AND INUDISABILITYPERCENT IS NULL))THEN
                

                ERRORS.SETERROR(CNUDISABILITYPERCENTREQ);
                RAISE EX.CONTROLLED_ERROR;
            END IF;


        EXCEPTION
            WHEN EXCALLSERVICE THEN
                ERRORS.SETERROR(MO_BOCONSTERROR.CNUERRCALLSERVICE,
                                SBCALLSERVICE||'|'||TO_CHAR(NUERROR)||' - '||SBERRMSG);
                RAISE EX.CONTROLLED_ERROR;
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSubscriber.UpdSubscriber. Id:['||INUSUBSCRIBER_ID||']Ide:['||SBIDENTIFICATION||']Tipo Ide:['||INUIDENT_TYPE_ID||']',3);
        UT_TRACE.TRACE('Nombre:['||ISBSUBSCRIBER_NAME||']Apellido:['||ISBSUBS_LAST_NAME|| ']primerNombre:['||ISBSUBSFIRSTNAME||']primerApellido:['||ISBSUBSFIRSTLASTNAME ||
                       ']Direcci�n:['||ISBADDRESS||']Tel�fono:['||ISBPHONE||']',3);

        
        VALIDATESUBSCRIBERNULL(INUSUBSCRIBER_ID);

        NUIDENTIFICATYPEID := DAGE_SUBSCRIBER.FNUGETIDENT_TYPE_ID(INUSUBSCRIBER_ID);
        NUPERSONCLASSID    := DAGE_IDENTIFICA_TYPE.FNUGETPERSON_CLASS_ID(NUIDENTIFICATYPEID);
        SBSUBSADDNAMEINFO  := GE_BOPARAMETER.FSBGET(CC_BOSUBSCRIBCONSTANTS.CSBSUBS_ADD_NAME_INFO);

        
        RCSUBSCRIBER    := DAGE_SUBSCRIBER.FRCGETRECORD(INUSUBSCRIBER_ID);

        
        RCORISUBSCRIBER := RCSUBSCRIBER;

        RCSUBSCRIBER.IDENTIFICATION := UPPER(RCSUBSCRIBER.IDENTIFICATION);

        
        VALIDATEDATA ;

        IF (INUIDENT_TYPE_ID IS NOT NULL) THEN
            RCSUBSCRIBER.IDENT_TYPE_ID := INUIDENT_TYPE_ID;
        END IF;
        IF (SBIDENTIFICATION IS NOT NULL) THEN
            RCSUBSCRIBER.IDENTIFICATION := SBIDENTIFICATION;
        END IF;

        IF (INUPARENT_SUBSCRIBER_ID IS NOT NULL) THEN
            RCSUBSCRIBER.PARENT_SUBSCRIBER_ID := INUPARENT_SUBSCRIBER_ID;
        END IF;
        IF (INUSUBSCRIBER_TYPE_ID IS NOT NULL) THEN
            RCSUBSCRIBER.SUBSCRIBER_TYPE_ID := INUSUBSCRIBER_TYPE_ID;
        END IF;
        IF (NUADDRESSID IS NOT NULL) THEN
            RCSUBSCRIBER.ADDRESS_ID := NUADDRESSID;
        END IF;

        IF ((NUPERSONCLASSID != CC_BOSUBSCRIBCONSTANTS.CNULEGALPERSONID) AND (SBSUBSADDNAMEINFO = GE_BOCONSTANTS.CSBYES)) THEN
            IF (ISBPREFIX IS NOT NULL) THEN
                RCSUBSCRIBER.SUBS_PREFIX := UPPER(ISBPREFIX);
            END IF;
             IF (ISBSUBSFIRSTNAME IS NOT NULL) THEN
                RCSUBSCRIBER.SUBS_FIRST_NAME := UPPER(ISBSUBSFIRSTNAME);
                SBSUBSCRIBERNAME :=  ISBSUBSFIRSTNAME;
             ELSIF (RCSUBSCRIBER.SUBS_FIRST_NAME IS NOT NULL) THEN
                SBSUBSCRIBERNAME := RCSUBSCRIBER.SUBS_FIRST_NAME;
            END IF;
            IF (ISBSUBSSECONDNAME IS NOT NULL) THEN
                RCSUBSCRIBER.SUBS_SECOND_NAME := UPPER(ISBSUBSSECONDNAME);
                SBSUBSCRIBERNAME :=  SBSUBSCRIBERNAME || ' ' || ISBSUBSSECONDNAME;
            ELSIF (RCSUBSCRIBER.SUBS_SECOND_NAME IS NOT NULL) THEN
                SBSUBSCRIBERNAME := SBSUBSCRIBERNAME || ' ' || RCSUBSCRIBER.SUBS_SECOND_NAME;
            END IF;
            IF (ISBSUBSFIRSTLASTNAME IS NOT NULL) THEN
                RCSUBSCRIBER.SUBS_FIRST_LAST_NAME := UPPER(ISBSUBSFIRSTLASTNAME);
                SBSUBSLASTNAME := ISBSUBSFIRSTLASTNAME;
            ELSIF (RCSUBSCRIBER.SUBS_FIRST_LAST_NAME IS NOT NULL) THEN
                SBSUBSLASTNAME := RCSUBSCRIBER.SUBS_FIRST_LAST_NAME;
            END IF;
            IF (ISBSUBSSECONDLASTNAME IS NOT NULL) THEN
                RCSUBSCRIBER.SUBS_SECOND_LAST_NAME := UPPER(ISBSUBSSECONDLASTNAME);
                SBSUBSLASTNAME :=  SBSUBSLASTNAME || ' ' || ISBSUBSSECONDLASTNAME;
            ELSIF (RCSUBSCRIBER.SUBS_SECOND_LAST_NAME IS NOT NULL) THEN
                SBSUBSLASTNAME := SBSUBSLASTNAME || ' ' || RCSUBSCRIBER.SUBS_SECOND_LAST_NAME;
            END IF;
            IF (ISBSUFFIX IS NOT NULL) THEN
                RCSUBSCRIBER.SUBS_SUFFIX := UPPER(ISBSUFFIX);
            END IF;
            IF (SBSUBSCRIBERNAME IS NOT NULL) THEN
                RCSUBSCRIBER.SUBSCRIBER_NAME := TRIM(UPPER(SBSUBSCRIBERNAME));
            END IF;
            IF (SBSUBSLASTNAME IS NOT NULL) THEN
                RCSUBSCRIBER.SUBS_LAST_NAME := TRIM(UPPER(SBSUBSLASTNAME));
            END IF;
        ELSE
            IF (ISBSUBSCRIBER_NAME IS NOT NULL) THEN
                RCSUBSCRIBER.SUBSCRIBER_NAME := UPPER(ISBSUBSCRIBER_NAME);
            END IF;
            IF (ISBSUBS_LAST_NAME IS NOT NULL) THEN
                RCSUBSCRIBER.SUBS_LAST_NAME := UPPER(ISBSUBS_LAST_NAME);
            END IF;
        END IF;

        IF (ISBURL IS NOT NULL) THEN
            RCSUBSCRIBER.URL := ISBURL;
        END IF;

        IF (INULANGUAGEID IS NOT NULL) THEN
            RCSUBSCRIBER.LANGUAGE := INULANGUAGEID;
        END IF;
        IF (INUSUBS_STATUS_ID IS NOT NULL) THEN
            RCSUBSCRIBER.SUBS_STATUS_ID := INUSUBS_STATUS_ID;
        END IF;
        IF (INUMARKETING_SEGMENT_ID IS NOT NULL) THEN
            RCSUBSCRIBER.MARKETING_SEGMENT_ID := INUMARKETING_SEGMENT_ID;
        END IF;
        IF (INUTAXPAYERTYPEID IS NOT NULL) THEN
            RCSUBSCRIBER.TAXPAYER_TYPE := INUTAXPAYERTYPEID;
        END IF;
        IF (INUDOCPLACEISSUE IS NOT NULL) THEN
            RCSUBSCRIBER.DOC_PLACE_OF_ISSUE := INUDOCPLACEISSUE;
        END IF;
        IF (IDTDOCDATEISSUE IS NOT NULL) THEN
            RCSUBSCRIBER.DOC_DATE_OF_ISSUE := IDTDOCDATEISSUE;
        END IF;
        IF (ISBDATASEND IS NOT NULL) THEN
            RCSUBSCRIBER.DATA_SEND := ISBDATASEND;
        END IF;
        IF (ISBACCEPTCALL IS NOT NULL) THEN
            RCSUBSCRIBER.ACCEPT_CALL := ISBACCEPTCALL;
        END IF;
        IF (INUAUTHORIZATIONTYPEID IS NOT NULL) THEN
            RCSUBSCRIBER.AUTHORIZATION_TYPE := INUAUTHORIZATIONTYPEID;
        END IF;
        IF (ISBISCORPORATIVE IS NOT NULL) THEN
            RCSUBSCRIBER.IS_CORPORATIVE := ISBISCORPORATIVE;
        END IF;

        IF(INUDISABILITYPERCENT IS NOT NULL)THEN
            RCSUBSCRIBER.DISABILITY_PERCENT := INUDISABILITYPERCENT;
        END IF;

        IF(INUDISABILITYTYPEID IS NOT NULL)THEN
           RCSUBSCRIBER.DISABILITY_TYPE_ID := INUDISABILITYTYPEID;
        END IF;


        IF (NUCONTACTID IS NOT NULL) THEN
            RCSUBSCRIBER.CONTACT_ID := NUCONTACTID;
        ELSE
            
            IF (SBCONTACT_IDENT IS NOT NULL AND INUCONTACT_IDENT_TYPE IS NOT NULL AND GE_BCSUBSCRIBER.FBLEXISTSUBSCRIBERBYIDENT(SBCONTACT_IDENT, INUCONTACT_IDENT_TYPE)) THEN

                NUCONTACTID     := GE_BCSUBSCRIBER.FNUGETSUBSCRIBERBYIDENT(SBCONTACT_IDENT, INUCONTACT_IDENT_TYPE);

                
                GE_BOSUBSCRIBER.UPDSUBSCRIBER
                (
                    INUSUBSCRIBER_ID=>NUCONTACTID,
                    INUIDENT_TYPE_ID=>INUCONTACT_IDENT_TYPE,
                    ISBIDENTIFICATION=>SBCONTACT_IDENT,
                    INUPARENT_SUBSCRIBER_ID=>NULL,
                    INUSUBSCRIBER_TYPE_ID=>NULL,
                    INUADDRESSID=>NULL,
                    INUGEOGRALOCATIONID=>NULL,
                    ISBADDRESS=>NULL,
                    ISBISURBAN=>NULL,
                    ISBPHONE=>ISBCONTACT_PHONE,
                    INUPHONETYPE=>INUCONTACT_PHONETYPE,
                    ISBSUBSCRIBER_NAME=>ISBCONTACT_NAME,
                    ISBSUBS_LAST_NAME=>ISBCONTACTLASTNAME,
                    ISBE_MAIL=>NULL,
                    INUE_MAILTYPE=>NULL,
                    ISBURL=>NULL,
                    INUCONTACTID=>NULL,
                    INUMARKETING_SEGMENT_ID=>NULL,
                    INUSUBS_STATUS_ID=>NULL,
                    ISBSEX=>ISBSEX,
                    IDTBIRTHDATE=>IDTBIRTHDATE,
                    IBOVALIDDATA=>GE_BOCONSTANTS.GETTRUE,
                    INUPACKAGEID=>INUPACKAGEID,
                    INULANGUAGEID=>NULL,
                    ISBPREFIX=>ISBCONTPREFIX,
                    ISBSUBSFIRSTNAME=>ISBCONTFIRSTNAME,
                    ISBSUBSSECONDNAME=>ISBCONTSECONDNAME,
                    ISBSUBSFIRSTLASTNAME=>ISBCONTFIRSTLASTNAME,
                    ISBSUBSSECONDLASTNAME=>ISBCONTSECONDLASTNAME,
                    ISBSUFFIX=>ISBCONTACTSUFFIX
                );
            ELSE
                SBCONTACTNAME     := ISBCONTACT_NAME;
                SBCONTACTLASTNAME := ISBCONTACTLASTNAME;
                IF (INUCONTACT_IDENT_TYPE IS NOT NULL) THEN
                     NUPERSONCLASSID   := DAGE_IDENTIFICA_TYPE.FNUGETPERSON_CLASS_ID(INUCONTACT_IDENT_TYPE);
                END IF;
                IF ((NUPERSONCLASSID != CC_BOSUBSCRIBCONSTANTS.CNULEGALPERSONID) AND (SBSUBSADDNAMEINFO = GE_BOCONSTANTS.CSBYES)) THEN
                    SBCONTACTNAME     :=  TRIM(ISBCONTFIRSTNAME     || ' ' || ISBCONTSECONDNAME);
                    SBCONTACTLASTNAME :=  TRIM(ISBCONTFIRSTLASTNAME || ' ' || ISBCONTSECONDLASTNAME);
                END IF;

                
                CREATECONTACT
                (
                    NUCONTACTID,
                    SBCONTACTNAME,
                    SBCONTACTLASTNAME,
                    NULL,
                    ISBCONTACT_PHONE,
                    INUCONTACT_PHONETYPE,
                    INUCONTACT_IDENT_TYPE,
                    SBCONTACT_IDENT,
                    GE_BOCONSTANTS.CNUSUBSCRIBERSTAPOTENTIAL,
                    NULL,
                    ISBCONTPREFIX,
                    ISBCONTFIRSTNAME,
                    ISBCONTSECONDNAME,
                    ISBCONTFIRSTLASTNAME,
                    ISBCONTSECONDLASTNAME,
                    ISBCONTACTSUFFIX
                );
            END IF;
            RCSUBSCRIBER.CONTACT_ID := NVL(NUCONTACTID, RCSUBSCRIBER.CONTACT_ID);
        END IF;

        IF (ISBURL IS NOT NULL OR INUECONOMICACTIVITYID IS NOT NULL OR IDTBEGACTDATE IS NOT NULL) THEN

            IF (DAGE_SUBS_BUSINES_DATA.FBLEXIST(INUSUBSCRIBER_ID)) THEN

                RCORISUBSBUSSDATA   :=  DAGE_SUBS_BUSINES_DATA.FRCGETRECORD(INUSUBSCRIBER_ID);

                RCSUBSBUSSDATA      :=  RCORISUBSBUSSDATA;

                RCSUBSBUSSDATA.URL  :=  NVL(ISBURL, RCORISUBSBUSSDATA.URL);
                RCSUBSBUSSDATA.ECONOMIC_ACTIVITY_ID  :=  NVL(INUECONOMICACTIVITYID, RCORISUBSBUSSDATA.ECONOMIC_ACTIVITY_ID);
                RCSUBSBUSSDATA.BEGINNING_ACTIVITIES    :=  NVL(IDTBEGACTDATE, RCORISUBSBUSSDATA.BEGINNING_ACTIVITIES);

                DAGE_SUBS_BUSINES_DATA.UPDRECORD(RCSUBSBUSSDATA);

            ELSE
                RCSUBSBUSSDATA.SUBSCRIBER_ID    := INUSUBSCRIBER_ID;
                RCSUBSBUSSDATA.URL              := ISBURL;
                RCSUBSBUSSDATA.ECONOMIC_ACTIVITY_ID := INUECONOMICACTIVITYID;
                RCSUBSBUSSDATA.BEGINNING_ACTIVITIES    :=  IDTBEGACTDATE;

                DAGE_SUBS_BUSINES_DATA.INSRECORD(RCSUBSBUSSDATA);
            END IF;

            
            CC_BOSUBSCRIBERLOG.INSSUBSBUSINESSLOG(RCORISUBSBUSSDATA, RCSUBSBUSSDATA, INUPACKAGEID);

        END IF;

        
        IF  (ISBSEX IS NOT NULL OR
                IDTBIRTHDATE IS NOT NULL OR
                INUBIRTHLOCATIONID IS NOT NULL OR
                ISBFAXNUMBER IS NOT NULL OR
                INUSCHOOLDEGREEID IS NOT NULL OR
                INUPROFESSIONID IS NOT NULL OR
                INUWAGESCALEID IS NOT NULL OR
                INUDEBITSCALEID IS NOT NULL OR
                INUCIVILSTATEID IS NOT NULL OR
                ISBNATIONALITY IS NOT NULL OR
                ISBOLDOPERATOR IS NOT NULL OR
                ISBCOMMENT IS NOT NULL
            ) THEN

            IF  (DAGE_SUBS_GENERAL_DATA.FBLEXIST(INUSUBSCRIBER_ID)) THEN
                RCORISUBSGENERAL                := DAGE_SUBS_GENERAL_DATA.FRCGETRECORD(INUSUBSCRIBER_ID);

                RCSUBSGENERAL                   := RCORISUBSGENERAL;

                RCSUBSGENERAL.GENDER            := NVL(ISBSEX,RCORISUBSGENERAL.GENDER);
                RCSUBSGENERAL.DATE_BIRTH        := NVL(IDTBIRTHDATE,RCORISUBSGENERAL.DATE_BIRTH);
                RCSUBSGENERAL.BIRTH_LOCATION_ID := NVL(INUBIRTHLOCATIONID,RCORISUBSGENERAL.BIRTH_LOCATION_ID);
                RCSUBSGENERAL.FAX               := NVL(ISBFAXNUMBER,RCORISUBSGENERAL.FAX);
                RCSUBSGENERAL.SCHOOL_DEGREE_ID  := NVL(INUSCHOOLDEGREEID,RCORISUBSGENERAL.SCHOOL_DEGREE_ID);
                RCSUBSGENERAL.PROFESSION_ID     := NVL(INUPROFESSIONID,RCORISUBSGENERAL.PROFESSION_ID);
                RCSUBSGENERAL.WAGE_SCALE_ID     := NVL(INUWAGESCALEID,RCORISUBSGENERAL.WAGE_SCALE_ID);
                RCSUBSGENERAL.DEBIT_SCALE_ID    := NVL(INUDEBITSCALEID,RCORISUBSGENERAL.DEBIT_SCALE_ID);
                RCSUBSGENERAL.CIVIL_STATE_ID    := NVL(INUCIVILSTATEID,RCORISUBSGENERAL.CIVIL_STATE_ID);
                RCSUBSGENERAL.NATIONALITY       := NVL(ISBNATIONALITY,RCORISUBSGENERAL.NATIONALITY);
                RCSUBSGENERAL.OLD_OPERATOR      := NVL(ISBOLDOPERATOR,RCORISUBSGENERAL.OLD_OPERATOR);
                RCSUBSGENERAL.COMMENT_          := NVL(ISBCOMMENT,RCORISUBSGENERAL.COMMENT_);

                DAGE_SUBS_GENERAL_DATA.UPDRECORD(RCSUBSGENERAL);

            ELSE
                RCSUBSGENERAL.SUBSCRIBER_ID     := INUSUBSCRIBER_ID;
                RCSUBSGENERAL.GENDER            := ISBSEX;
                RCSUBSGENERAL.DATE_BIRTH        := IDTBIRTHDATE;
                RCSUBSGENERAL.BIRTH_LOCATION_ID := INUBIRTHLOCATIONID;
                RCSUBSGENERAL.FAX               := ISBFAXNUMBER;
                RCSUBSGENERAL.SCHOOL_DEGREE_ID  := INUSCHOOLDEGREEID;
                RCSUBSGENERAL.PROFESSION_ID     := INUPROFESSIONID;
                RCSUBSGENERAL.WAGE_SCALE_ID     := INUWAGESCALEID;
                RCSUBSGENERAL.DEBIT_SCALE_ID    := INUDEBITSCALEID;
                RCSUBSGENERAL.CIVIL_STATE_ID    := INUCIVILSTATEID;
                RCSUBSGENERAL.NATIONALITY       := ISBNATIONALITY;
                RCSUBSGENERAL.OLD_OPERATOR      := ISBOLDOPERATOR;
                RCSUBSGENERAL.COMMENT_          := ISBCOMMENT;

                DAGE_SUBS_GENERAL_DATA.INSRECORD(RCSUBSGENERAL);
            END IF;

            
            CC_BOSUBSCRIBERLOG.INSSUBSGENERALLOG(RCORISUBSGENERAL, RCSUBSGENERAL, INUPACKAGEID);

        END IF;


        
        IF (ISBRESIDENT IS NOT NULL) THEN

            IF (DAGE_SUBS_HOUSING_DATA.FBLEXIST(INUSUBSCRIBER_ID)) THEN

                RCORISUBSHOUSDATA                   :=  DAGE_SUBS_HOUSING_DATA.FRCGETRECORD(INUSUBSCRIBER_ID);

                RCSUBSHOUSINGDATA                   :=  RCORISUBSHOUSDATA;
                RCSUBSHOUSINGDATA.RESIDENT          :=  ISBRESIDENT;

                DAGE_SUBS_HOUSING_DATA.UPDRESIDENT(INUSUBSCRIBER_ID, ISBRESIDENT);

            ELSE

                RCSUBSHOUSINGDATA.SUBSCRIBER_ID     := INUSUBSCRIBER_ID;
                RCSUBSHOUSINGDATA.RESIDENT          :=  ISBRESIDENT;

                DAGE_SUBS_HOUSING_DATA.INSRECORD(RCSUBSHOUSINGDATA);

            END IF;

            
            CC_BOSUBSCRIBERLOG.INSSUBSHOUSINGLOG(RCORISUBSHOUSDATA, RCSUBSHOUSINGDATA, INUPACKAGEID);

        END IF;

        
        IF (ISBRUT IS NOT NULL OR ISBSELFCOLLECTORFLAG IS NOT NULL) THEN

            IF (DAGE_SUBS_FISCAL_DATA.FBLEXIST(INUSUBSCRIBER_ID)) THEN

                RCORISUBSFISCALDATA                 :=  DAGE_SUBS_FISCAL_DATA.FRCGETRECORD(INUSUBSCRIBER_ID);

                RCSUBSFISCALDATA                    :=  RCORISUBSFISCALDATA;

                
                RCSUBSFISCALDATA.RUT                :=  NVL(ISBRUT, RCORISUBSFISCALDATA.RUT);
                RCSUBSFISCALDATA.SELF_COLLECTOR_FLAG:=  NVL(ISBSELFCOLLECTORFLAG, RCORISUBSFISCALDATA.SELF_COLLECTOR_FLAG);

                DAGE_SUBS_FISCAL_DATA.UPDRECORD(RCSUBSFISCALDATA);

            ELSE

                RCSUBSFISCALDATA.SUBSCRIBER_ID      :=  INUSUBSCRIBER_ID;
                RCSUBSFISCALDATA.RUT                :=  ISBRUT;
                RCSUBSFISCALDATA.SELF_COLLECTOR_FLAG:=  ISBSELFCOLLECTORFLAG;

                DAGE_SUBS_FISCAL_DATA.INSRECORD(RCSUBSFISCALDATA);
           END IF;

            
            CC_BOSUBSCRIBERLOG.INSSUBSFISCALLOG(RCORISUBSFISCALDATA, RCSUBSFISCALDATA, INUPACKAGEID); 

        END IF;

        RCSUBSCRIBER.MANAGEMENT_ACCOUNT := IC_BOMANAGEMENTACCOUNT.FSBDEFMANAGACCOUNT( RCSUBSCRIBER.IDENT_TYPE_ID, RCSUBSCRIBER.IDENTIFICATION );

        
        IF (ISBPHONE IS NULL AND INUPHONETYPE IS NOT NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917644);
        ELSIF(ISBPHONE IS NOT NULL AND INUPHONETYPE IS NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917645);
        END IF;

        
        IF (ISBE_MAIL IS NULL AND INUE_MAILTYPE IS NOT NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917642);
        ELSIF(ISBE_MAIL IS NOT NULL AND INUE_MAILTYPE IS NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR917643);
        END IF;

        
        DAGE_SUBSCRIBER.UPDRECORD(RCSUBSCRIBER);

        IF ISBPHONE IS NOT NULL AND INUPHONETYPE IS NOT NULL THEN
            
            CC_BOSUBSCRIBER.SETCUSTOMERPHONE(
                                                RCSUBSCRIBER.SUBSCRIBER_ID,
                                                NULL,
                                                NULL,
                                                INUPHONETYPE,
                                                ISBPHONE
                                            );
        END IF;

        IF ISBE_MAIL IS NOT NULL AND INUE_MAILTYPE IS NOT NULL THEN
            
            CC_BOSUBSEMAIL.INSSUBSEMAIL(
                                            RCSUBSCRIBER.SUBSCRIBER_ID,
                                            ISBE_MAIL,
                                            INUE_MAILTYPE,
                                            NULL
                                        );
        END IF;

        
        CC_BOSUBSCRIBERLOG.INSSUBSCRIBERLOG(RCORISUBSCRIBER, RCSUBSCRIBER, INUPACKAGEID);

        
        GE_BOSUBSCRIBER.SETLASTUPDATE(RCSUBSCRIBER.SUBSCRIBER_ID);

        UT_TRACE.TRACE('Cliente Actualizado:['||INUSUBSCRIBER_ID||']',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

  
	

























PROCEDURE VALIDATESUBSCRIBERNULL
    (
        INUSUBSCRIBER   IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS

BEGIN

    UT_TRACE.TRACE('GE_BOSubscriber.ValidateSubscriberNull Inicio',3);

    
    IF (INUSUBSCRIBER IS NULL ) THEN

	PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_SAT,
				CNUCLIENTE_NULO);



     RAISE EX.CONTROLLED_ERROR;
    END IF;

    UT_TRACE.TRACE('GE_BOSubscriber.ValidateSubscriberNull FIN',3);

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

END VALIDATESUBSCRIBERNULL;

PROCEDURE VALIDATESUBSNULLAPP
    (
       INUSUBSCRIBER	IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS

BEGIN

    UT_TRACE.TRACE('GE_BOSubscriber.ValidateNullApp Inicio',3);

    IF ( INUSUBSCRIBER = PKCONSTANTE.NULLNUM ) THEN
	PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_CUS,
				CNUCLIENTE_NULO_APP);
    RAISE EX.CONTROLLED_ERROR;
    END IF;

    UT_TRACE.TRACE('GE_BOSubscriber.ValidateNullApp FIN',3);

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

END VALIDATESUBSNULLAPP;

PROCEDURE VALBASICDATA
    (
        INUSUBSCRIBER	IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS

BEGIN


    PKERRORS.PUSH('GE_BOSubscriber.ValBasicData');

    
    GE_BOSUBSCRIBER.VALIDATESUBSCRIBERNULL (INUSUBSCRIBER);

    
    GE_BOSUBSCRIBER.VALIDATESUBSNULLAPP (INUSUBSCRIBER);

    
    DAGE_SUBSCRIBER.ACCKEY(INUSUBSCRIBER);

    PKERRORS.POP;

EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;


END VALBASICDATA;
































PROCEDURE VALCUSTWITHBALANCE
  (
    INUCLIETIDI     IN     GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
    ISBCLIENITC     IN     GE_SUBSCRIBER.IDENTIFICATION%TYPE,
    ONUERRORCODE        OUT MENSAJE.MENSCODI%TYPE,
    OSBERRORMESSAGE     OUT NOCOPY MENSAJE.MENSDESC%TYPE
  )
IS
  
  
  
  
  
  
  PROCEDURE INITIALIZE IS
  BEGIN

    
    PKERRORS.INITIALIZE;
    ONUERRORCODE    := PKCONSTANTE.EXITO;
    OSBERRORMESSAGE := PKCONSTANTE.NULLSB;

  EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
  END INITIALIZE;
  
  
  
  
  PROCEDURE RUNPROCESS
  IS
    TBSUBSCRIBERS PKTBLSUSCRIPC.TYSUSCCODI;
  BEGIN
    
    
    GE_BCSUBSCRIBER.GETSUBSBYCUSTNIT (INUCLIETIDI, ISBCLIENITC, TBSUBSCRIBERS);

    
    PKSUBSCRIBERMGR.GETSUBSCRIBERSBYNIT (ISBCLIENITC, TBSUBSCRIBERS);

    
    
    PKSUBSCRIBERMGR.VALSUBSINCURRSTATUS (TBSUBSCRIBERS);

  EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
  END RUNPROCESS;
  
BEGIN

    UT_TRACE.TRACE('GE_BOSubscriber.ValCustWithBalance Inicio',3);

    
    INITIALIZE;

    
    RUNPROCESS;

    UT_TRACE.TRACE('GE_BOSubscriber.ValCustWithBalance Fin',3);
EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            PKERRORS.GETERRORVAR(ONUERRORCODE, OSBERRORMESSAGE );
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

END VALCUSTWITHBALANCE;
























	























	

    




















    FUNCTION FSBGETFULLNAME
    (
        INUSUBSCRIBERID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        RCSUBSCRIBER    DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        SBFULLNAME      UT_DATATYPES.STYDESCRIPTION;
    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.fsbGetFullName SubsId ['||INUSUBSCRIBERID||']',3);

        
        IF  (INUSUBSCRIBERID IS NULL OR NOT DAGE_SUBSCRIBER.FBLEXIST(INUSUBSCRIBERID)) THEN
            UT_TRACE.TRACE('END GE_BOSubscriber.fsbGetFullName FullName [NULL]',3);
            RETURN NULL;
        END IF;
        
        
        RCSUBSCRIBER := DAGE_SUBSCRIBER.FRCGETRECORD(INUSUBSCRIBERID);

        
        SBFULLNAME   := RCSUBSCRIBER.SUBSCRIBER_NAME;

        
        IF (RCSUBSCRIBER.SUBS_LAST_NAME IS NOT NULL) THEN
            
            SBFULLNAME := SBFULLNAME||GE_BOCONSTANTS.CSBSPACE||RCSUBSCRIBER.SUBS_LAST_NAME;
        END IF;
        
        UT_TRACE.TRACE('END GE_BOSubscriber.fsbGetFullName FullName ['||SBFULLNAME||']',3);
        RETURN SBFULLNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR GE_BOSubscriber.fsbGetFullName',3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.fsbGetFullName',3);
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETFULLNAME;

FUNCTION FSBGETNAME
(
	INUSUBSCRIBER_ID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
)
RETURN VARCHAR2
IS
	RCSUSBCRIBER DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
BEGIN

	RCSUSBCRIBER := DAGE_SUBSCRIBER.FRCGETRECORD(INUSUBSCRIBER_ID);

	RETURN(RCSUSBCRIBER.SUBSCRIBER_NAME ||' '||RCSUSBCRIBER.SUBS_LAST_NAME);
EXCEPTION
  WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
END;

	

	

   
	

    



















































    PROCEDURE CREATECONTACT
    (
        IONUCONTACTID         IN OUT  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBSUBSCRIBERNAME     IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME       IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBADDRESS            IN GE_SUBSCRIBER.ADDRESS%TYPE,
        ISBPHONE              IN GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        INUPHONETYPE          IN GE_PHONE_TYPE.PHONE_TYPE_ID%TYPE,
        INUIDENTTYPEID        IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION     IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        INUSUBSTATUSID        IN GE_SUBSCRIBER.SUBS_STATUS_ID%TYPE DEFAULT 1,
        INUADDRESSID          IN GE_SUBSCRIBER.ADDRESS_ID%TYPE DEFAULT NULL,
        ISBPREFIX             IN GE_SUBSCRIBER.SUBS_PREFIX%TYPE DEFAULT NULL,
        ISBSUBSFIRSTNAME      IN GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDNAME     IN GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE DEFAULT NULL,
        ISBSUBSFIRSTLASTNAME  IN GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUBSSECONDLASTNAME IN GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE DEFAULT NULL,
        ISBSUFFIX             IN GE_SUBSCRIBER.SUBS_SUFFIX%TYPE DEFAULT NULL
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSubscriber.CreateContact. Cliente Contacto:['||IONUCONTACTID||']Nombre:['||ISBSUBSCRIBERNAME||']Apellido:['||ISBSUBSLASTNAME||']',3);
        UT_TRACE.TRACE('Ide:['||ISBIDENTIFICATION||']Tipo Ide:['||INUIDENTTYPEID||']Dir:['||ISBADDRESS||']Tel:['||ISBPHONE||']Tipo Tel:['||INUPHONETYPE||']',3);

        
        IF (DAGE_SUBSCRIBER.FBLEXIST(IONUCONTACTID) OR (ISBSUBSCRIBERNAME    IS NULL AND
                                                        ISBSUBSFIRSTNAME     IS NULL AND
                                                        ISBSUBSFIRSTLASTNAME IS NULL AND
                                                        INUIDENTTYPEID       IS NULL AND
                                                        ISBIDENTIFICATION    IS NULL)) THEN
            RETURN;
        END IF;

        
        IF GE_BCSUBSCRIBER.FBLEXISTSUBSCRIBERBYIDENT(ISBIDENTIFICATION, INUIDENTTYPEID) THEN

            IONUCONTACTID := GE_BCSUBSCRIBER.FNUGETSUBSCRIBERBYIDENT(ISBIDENTIFICATION, INUIDENTTYPEID);
        ELSE
            
            
            IF (ISBSUBSCRIBERNAME    IS NULL AND
                ISBSUBSFIRSTNAME     IS NULL AND
                ISBSUBSFIRSTLASTNAME IS NULL AND
                (INUIDENTTYPEID IS NOT NULL OR ISBIDENTIFICATION IS NOT NULL)) THEN
                ERRORS.SETERROR( CNUCONTACT_NO_NAME );
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            IONUCONTACTID := GE_BOSEQUENCE.NEXTGE_SUBSCRIBER;
            UT_TRACE.TRACE('ionuContactId: '||IONUCONTACTID,3);
            
            REGISTER
            (
                IONUCONTACTID,
                NVL(INUIDENTTYPEID, GE_BOSUBSCRIBER.CNUDEFIDENTTYPE),
                NVL(ISBIDENTIFICATION, CSBCONTACTID || IONUCONTACTID),
                NULL,
                GE_BOPARAMCONSTANTS.FNUGETSUBSTYPENORMAL,
                ISBADDRESS,
                ISBPHONE,
                INUPHONETYPE,
                ISBSUBSCRIBERNAME,
                ISBSUBSLASTNAME,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                INUSUBSTATUSID,
                GE_BOCONSTANTS.GETTRUE,
                INUADDRESSID,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                ISBPREFIX,
                ISBSUBSFIRSTNAME,
                ISBSUBSSECONDNAME,
                ISBSUBSFIRSTLASTNAME,
                ISBSUBSSECONDLASTNAME,
                ISBSUFFIX
            );
        END IF;

        UT_TRACE.TRACE('Cliente Contacto:['||IONUCONTACTID||']',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FSBGETMARKETINGSEGMENT
    (
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN CC_MARKETING_SEGMENT.DESCRIPTION%TYPE
    IS
        NUMARKETINGSEGID    GE_SUBSCRIBER.MARKETING_SEGMENT_ID%TYPE;
    BEGIN
        
        NUMARKETINGSEGID := DAGE_SUBSCRIBER.FNUGETMARKETING_SEGMENT_ID(INUSUBSCRIBERID);
        
        
        IF (NUMARKETINGSEGID IS NOT NULL) THEN
            RETURN DACC_MARKETING_SEGMENT.FSBGETDESCRIPTION(NUMARKETINGSEGID);
        END IF;
        
        RETURN NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    



    























    PROCEDURE LOADCLIENTBYCONTRACT
    (
        INUCONTRACT     SUSCRIPC.SUSCCODI%TYPE
    )
    IS
        NUCLIENT        SUSCRIPC.SUSCCLIE%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia GE_BOSubscriber.LoadClientbyContract',5);
        
        NUCLIENT := PKTBLSUSCRIPC.FNUGETCUSTOMER(INUCONTRACT);

        
        GRCSUBSCRIBER := DAGE_SUBSCRIBER.FRCGETRECORD(NUCLIENT);

        GSBCONTRACTCLIENT := INUCONTRACT;

        UT_TRACE.TRACE('Finaliza GE_BOSubscriber.LoadClientbyContract',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCLIENTBYCONTRACT;




    























    FUNCTION FSBGETIDENTBYCONTRACT
    (
        INUCONTRACT     SUSCRIPC.SUSCCODI%TYPE
    )
    RETURN  GE_SUBSCRIBER.IDENTIFICATION%TYPE
    IS
        SBIDENTIFICA    GE_SUBSCRIBER.IDENTIFICATION%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia GE_BOSubscriber.fsbGetIdentibyContract',3);
        UT_TRACE.TRACE('Contrato a consultar:['||INUCONTRACT||']',4);
        UT_TRACE.TRACE('Contrato en memoria:['||GSBCONTRACTCLIENT||']',4);

        SBIDENTIFICA := NULL;

        
        IF ( NOT (INUCONTRACT = GSBCONTRACTCLIENT) )
        OR ( GSBCONTRACTCLIENT IS NULL )
        THEN
            
            UT_TRACE.TRACE('Carga Cliente por Contrato:['||INUCONTRACT||']',4);
            LOADCLIENTBYCONTRACT(INUCONTRACT);
        END IF;

        SBIDENTIFICA := GRCSUBSCRIBER.IDENTIFICATION;

        UT_TRACE.TRACE('Cliente Identificacion:['||SBIDENTIFICA||']',4);
        UT_TRACE.TRACE('Finaliza GE_BOSubscriber.fsbGetIdentibyContract',3);

        
        RETURN SBIDENTIFICA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RETURN  SBIDENTIFICA;
        WHEN OTHERS THEN
            RETURN  SBIDENTIFICA;
    END FSBGETIDENTBYCONTRACT;


    





















    FUNCTION FSBGETCLIENTNAMEBYCONTRACT
    (
        INUCONTRACT     SUSCRIPC.SUSCCODI%TYPE
    )
    RETURN  VARCHAR2
    IS
        SBCLIENTNAME    STYSBCLIENT;
    BEGIN

        UT_TRACE.TRACE('Inicia GE_BOSubscriber.fsbGetClientNamebyContract',3);
        UT_TRACE.TRACE('Contrato a consultar:['||INUCONTRACT||']',4);
        UT_TRACE.TRACE('Contrato en memoria:['||GSBCONTRACTCLIENT||']',4);

        SBCLIENTNAME := NULL;

        
        IF ( NOT (INUCONTRACT = GSBCONTRACTCLIENT ) )
        OR ( GSBCONTRACTCLIENT IS NULL )
        THEN
            
            UT_TRACE.TRACE('Carga Cliente por Contrato:['||INUCONTRACT||']',4);
            LOADCLIENTBYCONTRACT(INUCONTRACT);
        END IF;

        SBCLIENTNAME := GRCSUBSCRIBER.SUBSCRIBER_NAME||' '||GRCSUBSCRIBER.SUBS_LAST_NAME;

        UT_TRACE.TRACE('Nombre Cliente:['||SBCLIENTNAME||']',4);
        UT_TRACE.TRACE('Finaliza GE_BOSubscriber.fsbGetClientNamebyContract',3);

        
        RETURN SBCLIENTNAME;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RETURN  SBCLIENTNAME;
        WHEN OTHERS THEN
            RETURN  SBCLIENTNAME;
    END FSBGETCLIENTNAMEBYCONTRACT;


    





















   
	


    






















   
	

   
	

    FUNCTION FNUGETACTIVETIME
    (
        INUSUBSCRIBERID   IN PM_TARGET_POPULAT.PROJECT_ID%TYPE
    )
    RETURN NUMBER
    IS
        RCSUBSCRIBER    DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        DTRETIREDATE    STYDATE;
        NUACTIVETIME    STYNUMBER;
    BEGIN
        
        RCSUBSCRIBER := DAGE_SUBSCRIBER.FRCGETRECORD(INUSUBSCRIBERID);

        
        IF (RCSUBSCRIBER.SUBS_STATUS_ID = GE_BOCONSTANTS.CNUSUBSCRIBERSTAPOTENTIAL) THEN
            RETURN GE_BOCONSTANTS.CNUNULLNUM;
        END IF;
        
        
        
        IF (RCSUBSCRIBER.SUBS_STATUS_ID = GE_BOCONSTANTS.CNUSUBSCRIBERSTAACTIVE) THEN
            NUACTIVETIME := UT_DATE.FDTSYSDATE - RCSUBSCRIBER.VINCULATE_DATE;
            
            
            NUACTIVETIME := UT_DATE.FNUGETDAYSTOMONTH(NUACTIVETIME);
        END IF;
        
        
        
        IF (RCSUBSCRIBER.SUBS_STATUS_ID = GE_BOCONSTANTS.CNUSUBSCRIBERSTAINACTIVE) THEN

            
            DTRETIREDATE := PR_BOPRODUCT.FDTGETSUBSRETIREDATE(INUSUBSCRIBERID);

            
            NUACTIVETIME := DTRETIREDATE - RCSUBSCRIBER.VINCULATE_DATE;

            
            NUACTIVETIME := UT_DATE.FNUGETDAYSTOMONTH(NUACTIVETIME);
        END IF;
        
        RETURN NVL(NUACTIVETIME, GE_BOCONSTANTS.CNUNULLNUM);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    




















	PROCEDURE SETLASTUPDATE
    (
        INUSUBSCRIBERID IN GE_SUBS_GENERAL_DATA.SUBSCRIBER_ID%TYPE,
        IDTLASTUPDATE   IN GE_SUBS_GENERAL_DATA.LAST_UPDATE%TYPE DEFAULT UT_DATE.FDTSYSDATE
    )
    IS
        RCORISUBSCRIBER         DAGE_SUBS_GENERAL_DATA.STYGE_SUBS_GENERAL_DATA;
        RCNEWSUBSCRIBER         DAGE_SUBS_GENERAL_DATA.STYGE_SUBS_GENERAL_DATA;
    BEGIN
        UT_TRACE.TRACE('Begin GE_BOSubscriber.SetLastUpdate['||INUSUBSCRIBERID||']['||IDTLASTUPDATE||']', 10);

		
        IF  (DAGE_SUBS_GENERAL_DATA.FBLEXIST(INUSUBSCRIBERID)) THEN
        
            RCORISUBSCRIBER                 := DAGE_SUBS_GENERAL_DATA.FRCGETRECORD(INUSUBSCRIBERID);
            
            RCNEWSUBSCRIBER                 := RCORISUBSCRIBER;
            RCNEWSUBSCRIBER.LAST_UPDATE     := IDTLASTUPDATE;
        
			
            DAGE_SUBS_GENERAL_DATA.UPDLAST_UPDATE(RCNEWSUBSCRIBER.SUBSCRIBER_ID, RCNEWSUBSCRIBER.LAST_UPDATE);
        ELSE
			
            RCNEWSUBSCRIBER.SUBSCRIBER_ID   := INUSUBSCRIBERID;
            RCNEWSUBSCRIBER.LAST_UPDATE     := IDTLASTUPDATE;

            DAGE_SUBS_GENERAL_DATA.INSRECORD(RCNEWSUBSCRIBER);
        END IF;

        UT_TRACE.TRACE('End GE_BOSubscriber.SetLastUpdate', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETLASTUPDATE;
    

       


















    FUNCTION GETIDENTYPEIDBYSUBSID
    (
        INUSUBSCRIBERID IN GE_SUBS_GENERAL_DATA.SUBSCRIBER_ID%TYPE

    ) RETURN NUMBER
    IS
    BEGIN

        UT_TRACE.TRACE('Begin GE_BOSubscriber.GetIdenTypeIdBySubsId['||INUSUBSCRIBERID||']', 10);
        IF(DAGE_SUBSCRIBER.FBLEXIST(INUSUBSCRIBERID)) THEN
             RETURN DAGE_SUBSCRIBER.FNUGETIDENT_TYPE_ID(INUSUBSCRIBERID);
        END IF;

        UT_TRACE.TRACE('End GE_BOSubscriber.GetIdenTypeIdBySubsId', 10);
        RETURN NULL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETIDENTYPEIDBYSUBSID;
    
   














    PROCEDURE GETSUBSCRIBERBYADDRESSID
    (
        INUADDRESSID    IN AB_ADDRESS.ADDRESS_ID%TYPE,
        ONUSUBSCRIBERID OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS
        NUSUBSCRIPTIONID    PR_PRODUCT.SUBSCRIPTION_ID%TYPE;
        NUSUBSCRIBERID      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE := NULL;
    BEGIN

        UT_TRACE.TRACE('Begin GE_BOSubscriber.GetSubscriberByAddressID inuAddressID['||INUADDRESSID||']', 10);

        ONUSUBSCRIBERID := NUSUBSCRIBERID;

        
        FOR RCADDRESS IN PR_BCADDRESS.CUPRODUCTADDRESSBYADDRESSID(INUADDRESSID) LOOP
        
            NUSUBSCRIPTIONID := DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(RCADDRESS.PRODUCT_ID);

            NUSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUSUBSCRIPTIONID);
            
            UT_TRACE.TRACE('Producto:['||RCADDRESS.PRODUCT_ID||'] nuSubscriptionID['||NUSUBSCRIPTIONID||'] nuSubscriberID['||NUSUBSCRIBERID||']',12);
            
            IF(NUSUBSCRIBERID IS NOT NULL) THEN
            
                ONUSUBSCRIBERID := NUSUBSCRIBERID;

                UT_TRACE.TRACE('End GE_BOSubscriber.GetSubscriberByAddressID onuSubscriberID['||ONUSUBSCRIBERID||']', 10);
        
                RETURN;
            
            END IF;
        
        END LOOP;

        UT_TRACE.TRACE('End GE_BOSubscriber.GetSubscriberByAddressID onuSubscriberID['||ONUSUBSCRIBERID||']', 10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    




















    PROCEDURE INSUPDSUBSADDDATA
    (
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBOLDOPERATOR      IN GE_SUBS_GENERAL_DATA.OLD_OPERATOR%TYPE,
        ISBCOMPANY          IN GE_SUBS_WORK_RELAT.COMPANY%TYPE,
        ISBTITLE            IN GE_SUBS_WORK_RELAT.TITLE%TYPE,
        INUPERSONQUANTITY   IN GE_SUBS_HOUSING_DATA.PERSON_QUANTITY%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BOSubscriber.InsUpdSubsAddData' ,10);
        
        GE_BOSUBSCRIBER.UPDSUBSDATAADDITIONAL
        (
            INUSUBSCRIBERID=>INUSUBSCRIBERID,
            INUIDENTTYPEID=>NULL,
            ISBIDENTIFICATION=>NULL,
            ISBNAME=>NULL,
            ISBLASTNAME=>NULL,
            ISBEMAIL=>NULL,
            ISBOLDOPERATOR=>ISBOLDOPERATOR,
            ISBCOMPANY=>ISBCOMPANY,
            ISBTITLE=>ISBTITLE,
            INUPERSONQUANTITY=>INUPERSONQUANTITY,
            INUPACKAGEID=>NULL
        );

        UT_TRACE.TRACE('Fin GE_BOSubscriber.InsUpdSubsAddData' ,10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSUPDSUBSADDDATA;


    


















   
	

    
















    PROCEDURE SETSUBSCRIBERSTATUS
    (
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE DEFAULT NULL
    )
    IS
        
        RCSUBSCRIBER        DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        
        
        RCORISUBSCRIBER     DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
    
        
        NUSTATUS            GE_SUBSCRIBER.SUBS_STATUS_ID%TYPE;

        
        NUACTIPRODCOUNT     STYNUMBER;

        
        DTACTIPRODFIRST     STYDATE;
        
        
        BOSUBSUPDATED       STYBOOL := FALSE;
    BEGIN
        UT_TRACE.TRACE('Inicio: ge_boSubscriber.SetSubscriberStatus inuSubscriberId['||INUSUBSCRIBERID||']', 10);

        
        RCSUBSCRIBER    := DAGE_SUBSCRIBER.FRCGETRECORD(INUSUBSCRIBERID);

        
        RCORISUBSCRIBER := RCSUBSCRIBER;

        
        PR_BCPRODUCT.GETPRODDATABYSUBS(INUSUBSCRIBERID, NUACTIPRODCOUNT, DTACTIPRODFIRST);

        
        IF  (NUACTIPRODCOUNT > 0) THEN
            NUSTATUS := CF_BOCONSTANTS.FNUGETSTATUSSUBSCRIBERACTIVE;
        ELSE
            NUSTATUS := CF_BOCONSTANTS.FNUGETSTATUSSUBSCRIBERINACTIVE;
        END IF;

        IF  (NOT UT_CONVERT.FBOEQUALS(RCSUBSCRIBER.SUBS_STATUS_ID, NUSTATUS))
        THEN
            RCSUBSCRIBER.SUBS_STATUS_ID := NUSTATUS;

            
            DAGE_SUBSCRIBER.UPDSUBS_STATUS_ID(RCSUBSCRIBER.SUBSCRIBER_ID, RCSUBSCRIBER.SUBS_STATUS_ID);
            
            BOSUBSUPDATED := TRUE;
        END IF;

        
        IF  (DTACTIPRODFIRST IS NOT NULL) AND
            (NOT UT_CONVERT.FBOEQUALS(RCSUBSCRIBER.VINCULATE_DATE, DTACTIPRODFIRST))
        THEN
            RCSUBSCRIBER.VINCULATE_DATE := DTACTIPRODFIRST;

            
            DAGE_SUBSCRIBER.UPDVINCULATE_DATE(RCSUBSCRIBER.SUBSCRIBER_ID, RCSUBSCRIBER.VINCULATE_DATE);
            
            BOSUBSUPDATED := TRUE;
        END IF;
        
        
        IF  (BOSUBSUPDATED) THEN
        
            
            CC_BOSUBSCRIBERLOG.INSSUBSSTATUSLOG(RCORISUBSCRIBER, RCSUBSCRIBER, INUPACKAGEID);

            
            GE_BOSUBSCRIBER.SETLASTUPDATE(RCSUBSCRIBER.SUBSCRIBER_ID);
        END IF;

        UT_TRACE.TRACE('Fin: ge_boSubscriber.SetSubscriberStatus nuEstado['||NUSTATUS||'] dtActiProdFirst['||DTACTIPRODFIRST||']', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETSUBSCRIBERSTATUS;
    
    





































    PROCEDURE UPDSUBSDATAADDITIONAL
    (
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUIDENTTYPEID      IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION   IN GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        ISBNAME             IN GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBLASTNAME         IN GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBEMAIL            IN GE_SUBS_EMAIL.EMAIL%TYPE,
        ISBOLDOPERATOR      IN GE_SUBS_GENERAL_DATA.OLD_OPERATOR%TYPE,
        ISBCOMPANY          IN GE_SUBS_WORK_RELAT.COMPANY%TYPE,
        ISBTITLE            IN GE_SUBS_WORK_RELAT.TITLE%TYPE,
        INUPERSONQUANTITY   IN GE_SUBS_HOUSING_DATA.PERSON_QUANTITY%TYPE,
        INUPACKAGEID        IN GE_DATA_CHANGE_LOG.PACKAGE_ID%TYPE
    )
    IS
        RCORIGENERAL        DAGE_SUBS_GENERAL_DATA.STYGE_SUBS_GENERAL_DATA;
        RCNEWGENERAL        DAGE_SUBS_GENERAL_DATA.STYGE_SUBS_GENERAL_DATA;

        RCORIWORKRELA       DAGE_SUBS_WORK_RELAT.STYGE_SUBS_WORK_RELAT;
        RCNEWWORKRELA       DAGE_SUBS_WORK_RELAT.STYGE_SUBS_WORK_RELAT;

        RCORIHOUSING        DAGE_SUBS_HOUSING_DATA.STYGE_SUBS_HOUSING_DATA;
        RCNEWHOUSING        DAGE_SUBS_HOUSING_DATA.STYGE_SUBS_HOUSING_DATA;
    BEGIN
        UT_TRACE.TRACE('Begin GE_BOSubscriber.UpdSubsDataAdditional['||INUSUBSCRIBERID||']['||INUIDENTTYPEID||']['||ISBIDENTIFICATION||']', 10);

        IF ISBEMAIL IS NULL THEN
            
            GE_BOSUBSCRIBER.UPDSUBSCRIBER
            (
                INUSUBSCRIBER_ID=>INUSUBSCRIBERID,
                INUIDENT_TYPE_ID=>INUIDENTTYPEID,
                ISBIDENTIFICATION=>ISBIDENTIFICATION,
                INUPARENT_SUBSCRIBER_ID=>NULL,
                INUSUBSCRIBER_TYPE_ID=>NULL,
                INUADDRESSID=>NULL,
                INUGEOGRALOCATIONID=>NULL,
                ISBADDRESS=>NULL,
                ISBISURBAN=>NULL,
                ISBPHONE=>NULL,
                INUPHONETYPE=>NULL,
                ISBSUBSCRIBER_NAME=>ISBNAME,
                ISBSUBS_LAST_NAME=>ISBLASTNAME,
                ISBE_MAIL=>ISBEMAIL,
                INUE_MAILTYPE=>NULL,
                ISBURL=>NULL,
                INUCONTACTID=>NULL,
                INUMARKETING_SEGMENT_ID=>NULL,
                INUSUBS_STATUS_ID=>NULL,
                ISBSEX=>NULL,
                IDTBIRTHDATE=>NULL,
                IBOVALIDDATA=>TRUE,
                INUPACKAGEID=>INUPACKAGEID,
                INULANGUAGEID=>NULL
            );
        ELSE
            
            GE_BOSUBSCRIBER.UPDSUBSCRIBER
            (
                INUSUBSCRIBER_ID=>INUSUBSCRIBERID,
                INUIDENT_TYPE_ID=>INUIDENTTYPEID,
                ISBIDENTIFICATION=>ISBIDENTIFICATION,
                INUPARENT_SUBSCRIBER_ID=>NULL,
                INUSUBSCRIBER_TYPE_ID=>NULL,
                INUADDRESSID=>NULL,
                INUGEOGRALOCATIONID=>NULL,
                ISBADDRESS=>NULL,
                ISBISURBAN=>NULL,
                ISBPHONE=>NULL,
                INUPHONETYPE=>NULL,
                ISBSUBSCRIBER_NAME=>ISBNAME,
                ISBSUBS_LAST_NAME=>ISBLASTNAME,
                ISBE_MAIL=>ISBEMAIL,
                INUE_MAILTYPE=>CNUPERSONALEMAIL,
                ISBURL=>NULL,
                INUCONTACTID=>NULL,
                INUMARKETING_SEGMENT_ID=>NULL,
                INUSUBS_STATUS_ID=>NULL,
                ISBSEX=>NULL,
                IDTBIRTHDATE=>NULL,
                IBOVALIDDATA=>TRUE,
                INUPACKAGEID=>INUPACKAGEID,
                INULANGUAGEID=>NULL
            );
        END IF;



        IF  (ISBOLDOPERATOR IS NOT NULL) THEN
        
            
            IF  (DAGE_SUBS_GENERAL_DATA.FBLEXIST(INUSUBSCRIBERID)) THEN
            
                RCORIGENERAL    :=  DAGE_SUBS_GENERAL_DATA.FRCGETRECORD(INUSUBSCRIBERID);
                
                RCNEWGENERAL    :=  RCORIGENERAL;
                
                RCNEWGENERAL.OLD_OPERATOR     := ISBOLDOPERATOR;
                
                DAGE_SUBS_GENERAL_DATA.UPDOLD_OPERATOR(RCNEWGENERAL.SUBSCRIBER_ID, RCNEWGENERAL.OLD_OPERATOR);
            ELSE
                RCNEWGENERAL.SUBSCRIBER_ID    := INUSUBSCRIBERID;
                RCNEWGENERAL.OLD_OPERATOR     := ISBOLDOPERATOR;
                
                DAGE_SUBS_GENERAL_DATA.INSRECORD(RCNEWGENERAL);
            END IF;
            
            
            CC_BOSUBSCRIBERLOG.INSSUBSGENERALLOG(RCORIGENERAL, RCNEWGENERAL, INUPACKAGEID);
            
        END IF;

        IF  (ISBCOMPANY IS NOT NULL OR ISBTITLE IS NOT NULL) THEN
        
            
            IF  (DAGE_SUBS_WORK_RELAT.FBLEXIST(INUSUBSCRIBERID)) THEN
            
                RCORIWORKRELA   := DAGE_SUBS_WORK_RELAT.FRCGETRECORD(INUSUBSCRIBERID);
                
                RCNEWWORKRELA   := RCORIWORKRELA;

                RCNEWWORKRELA.COMPANY       := ISBCOMPANY;
                RCNEWWORKRELA.TITLE         := ISBTITLE;
            
                DAGE_SUBS_WORK_RELAT.UPDCOMPANY(INUSUBSCRIBERID, RCNEWWORKRELA.COMPANY);
                DAGE_SUBS_WORK_RELAT.UPDTITLE(INUSUBSCRIBERID, RCNEWWORKRELA.TITLE);
            ELSE
            
                RCNEWWORKRELA.SUBSCRIBER_ID := INUSUBSCRIBERID;
                RCNEWWORKRELA.COMPANY       := ISBCOMPANY;
                RCNEWWORKRELA.TITLE         := ISBTITLE;

                DAGE_SUBS_WORK_RELAT.INSRECORD(RCNEWWORKRELA);
            END IF;
            
            
            CC_BOSUBSCRIBERLOG.INSSUBSWORKRELATLOG(RCORIWORKRELA, RCNEWWORKRELA, INUPACKAGEID);
            
        END IF;

        IF  (INUPERSONQUANTITY IS NOT NULL) THEN
        
            
            IF  (DAGE_SUBS_HOUSING_DATA.FBLEXIST(INUSUBSCRIBERID)) THEN
            
                RCORIHOUSING    := DAGE_SUBS_HOUSING_DATA.FRCGETRECORD(INUSUBSCRIBERID);
                
                RCNEWHOUSING    := RCORIHOUSING;

                RCNEWHOUSING.PERSON_QUANTITY    := INUPERSONQUANTITY;
                
                DAGE_SUBS_HOUSING_DATA.UPDPERSON_QUANTITY(INUSUBSCRIBERID, RCNEWHOUSING.PERSON_QUANTITY);
            ELSE
                RCNEWHOUSING.SUBSCRIBER_ID      := INUSUBSCRIBERID;
                RCNEWHOUSING.PERSON_QUANTITY    := INUPERSONQUANTITY;
                
                DAGE_SUBS_HOUSING_DATA.INSRECORD(RCNEWHOUSING);
            END IF;
            
            
            CC_BOSUBSCRIBERLOG.INSSUBSHOUSINGLOG(RCORIHOUSING, RCNEWHOUSING, INUPACKAGEID);
            
        END IF;

        UT_TRACE.TRACE('End GE_BOSubscriber.UpdSubsDataAdditional', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDSUBSDATAADDITIONAL;
    
    

























    PROCEDURE UPDSUBSDATAADDITIONPII
    (

        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBEMAIL            IN GE_SUBS_EMAIL.EMAIL%TYPE,
        ISBOLDOPERATOR      IN GE_SUBS_GENERAL_DATA.OLD_OPERATOR%TYPE,
        ISBCOMPANY          IN GE_SUBS_WORK_RELAT.COMPANY%TYPE,
        ISBTITLE            IN GE_SUBS_WORK_RELAT.TITLE%TYPE,
        INUPERSONQUANTITY   IN GE_SUBS_HOUSING_DATA.PERSON_QUANTITY%TYPE,
        INUPACKAGEID        IN GE_DATA_CHANGE_LOG.PACKAGE_ID%TYPE
    )
    IS
        RCCLIENTE           DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        NUIDENTTYPEID       GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE;
        SBIDENTIFICATION    GE_SUBSCRIBER.IDENTIFICATION%TYPE;
        SBNAME              GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE;
        SBLASTNAME          GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE;
    BEGIN

        RCCLIENTE := DAGE_SUBSCRIBER.FRCGETRECORD(INUSUBSCRIBERID);
    
        NUIDENTTYPEID      :=  RCCLIENTE.IDENT_TYPE_ID;
        SBIDENTIFICATION   :=  RCCLIENTE.IDENTIFICATION;
        SBNAME             :=  RCCLIENTE.SUBSCRIBER_NAME;
        SBLASTNAME         :=  RCCLIENTE.SUBS_LAST_NAME;

        UT_TRACE.TRACE('Begin GE_BOSubscriber.UpdSubsDataAdditionalPII['||INUSUBSCRIBERID||']['||NUIDENTTYPEID||']['||SBIDENTIFICATION||']', 10);

        UPDSUBSDATAADDITIONAL(
            INUSUBSCRIBERID,
            NUIDENTTYPEID,
            SBIDENTIFICATION,
            SBNAME,
            SBLASTNAME,
            ISBEMAIL,
            ISBOLDOPERATOR,
            ISBCOMPANY,
            ISBTITLE,
            INUPERSONQUANTITY,
            INUPACKAGEID
        );

        UT_TRACE.TRACE('End GE_BOSubscriber.UpdSubsDataAdditionalPII', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDSUBSDATAADDITIONPII;
    
    















    FUNCTION FNUECONOMICACTIVITYID
    (
        INUSUBSCRIBERID IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    ) RETURN GE_SUBS_BUSINES_DATA.ECONOMIC_ACTIVITY_ID%TYPE
    IS
    
        NUMAINECONOMICACTI  GE_SUBS_BUSINES_DATA.ECONOMIC_ACTIVITY_ID%TYPE := NULL;
    
    BEGIN
    
        UT_TRACE.TRACE('INICIA GE_BOSubscriber.fnuEconomicActivityID', 5);
        UT_TRACE.TRACE('Identificador del cliente: '||INUSUBSCRIBERID,5);
        
        
        IF(DAGE_SUBS_BUSINES_DATA.FBLEXIST(INUSUBSCRIBERID))THEN
            NUMAINECONOMICACTI := DAGE_SUBS_BUSINES_DATA.FNUGETECONOMIC_ACTIVITY_ID(INUSUBSCRIBERID);
        END IF;
        
        UT_TRACE.TRACE('Actividad economica ['||NUMAINECONOMICACTI||']',5);
        
        UT_TRACE.TRACE('TERMINA GE_BOSubscriber.fnuEconomicActivityID', 5);
    
        RETURN NUMAINECONOMICACTI;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUECONOMICACTIVITYID;
    
    
    



































































    PROCEDURE CUSTOMERUPDATE
    (
        ICLCUSTOMERINFO IN  CLOB
    )
    IS
        
        
        
        XMLDOC  DBMS_XMLDOM.DOMDOCUMENT;
        
        
        
        


































































        PROCEDURE PROCESSBASICINFO
        (
            IXMLDOC           IN  DBMS_XMLDOM.DOMDOCUMENT,
            ICLCUSTOMERINFO   IN  UT_DATATYPES.STYCLOB
        )
        IS
            NLBASICINFONODE         DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFONODE         DBMS_XMLDOM.DOMNODE;
            NLBASICINFOADDRESSNODE  DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFOADDRESSNODE  DBMS_XMLDOM.DOMNODE;
            NLBASICINFOCONTACTNODE  DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFOCONTACTNODE  DBMS_XMLDOM.DOMNODE;

            NUADDRESSID            GE_SUBSCRIBER.ADDRESS_ID%TYPE;
            NUGEOGRALOCATIONID     AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
            SBADDRESS              AB_ADDRESS.ADDRESS%TYPE;
            SBISURBAN              AB_ADDRESS.IS_URBAN%TYPE;

            SBCONTACTIDENTTYPEID    GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE;
            SBCONTACTIDENTIFICATION GE_SUBSCRIBER.IDENTIFICATION%TYPE;
            SBCONTACTNAME           GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE;
            SBCONTACTLASTNAME       GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE;
            SBCONTACTPREFIX         GE_SUBSCRIBER.SUBS_PREFIX%TYPE;
            SBCONTACTFIRSTNAME      GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE;
            SBCONTACTSECONDNAME     GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE;
            SBCONTACTFIRSTLASTNAME  GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE;
            SBCONTACTSECONLASTNAME  GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE;
            SBCONTACTSUFFIX         GE_SUBSCRIBER.SUBS_SUFFIX%TYPE;
            NULANGUAGEID            GE_SUBSCRIBER.LANGUAGE%TYPE;

            RFPHONES                CONSTANTS.TYREFCURSOR;
            RFEMAILS                CONSTANTS.TYREFCURSOR;
            TBPHONES                TYTBPHONE;
            TBEMAILS                TYTBEMAIL;
            NUINDEX                 UT_DATATYPES.STYNUMBERINDEX;
            NUCONTACTID             GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
            DTBIRTHDATE             GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE;
            DTDATEOFISSUE           GE_SUBSCRIBER.DOC_DATE_OF_ISSUE%TYPE;
            DTACTIVITIESDATE        GE_SUBS_BUSINES_DATA.BEGINNING_ACTIVITIES%TYPE;
        BEGIN
            UT_TRACE.TRACE('INICIO ge_bosubscriber.CustomerUpdate.ProcessBasicInfo', 9);

            
            NLBASICINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BASIC_INFO' );



            NDBASICINFONODE := DBMS_XMLDOM.ITEM( NLBASICINFONODE, 0 );

            
            NLBASICINFOADDRESSNODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                            DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                            '/CUSTOMER/BASIC_INFO/BASIC_ADDRESS_INFO' );

            
            NLBASICINFOCONTACTNODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                            DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                            '/CUSTOMER/BASIC_INFO/CONTACT_INFO' );

            IF ( DBMS_XMLDOM.GETLENGTH(NLBASICINFOADDRESSNODE) > 0 ) THEN

                NDBASICINFOADDRESSNODE :=
                                    DBMS_XMLDOM.ITEM( NLBASICINFOADDRESSNODE, 0 );

                NUADDRESSID        :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOADDRESSNODE,'BASIC_ADDRESS_ID');
                NUGEOGRALOCATIONID :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOADDRESSNODE,
                                              'BASIC_GEO_LOCATION_ID');
                SBADDRESS          :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOADDRESSNODE,'BASIC_ADDRESS');
                SBISURBAN          :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOADDRESSNODE,'BASIC_ADDRESS_IS_URBAN');
                UT_TRACE.TRACE('Informacion de Subnodo ADDRESS_INFO obtenida');

            END IF;

            IF ( DBMS_XMLDOM.GETLENGTH(NLBASICINFOCONTACTNODE) >  0 ) THEN

                NDBASICINFOCONTACTNODE :=
                                    DBMS_XMLDOM.ITEM( NLBASICINFOCONTACTNODE, 0 );

                SBCONTACTIDENTTYPEID    :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONTACT_IDENT_TYPE_ID');
                SBCONTACTIDENTIFICATION :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONTACT_IDENTIFICATION');
                SBCONTACTNAME           :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONTACT_NAME');
                SBCONTACTLASTNAME       :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONTACT_LAST_NAME');
                SBCONTACTPREFIX         :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONTACT_PREFIX');
                SBCONTACTFIRSTNAME      :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONTACT_FIRST_NAME');
                SBCONTACTSECONDNAME      :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONTACT_SECOND_NAME');
                SBCONTACTFIRSTLASTNAME   :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONT_FIRST_LAST_NAME');
                SBCONTACTSECONLASTNAME   :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONT_SECOND_LAST_NAME');
                SBCONTACTSUFFIX          :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFOCONTACTNODE,
                                              'CONTACT_SUFFIX');

                OPEN RFPHONES FOR
                    SELECT *
                    FROM XMLTABLE('/CUSTOMER/BASIC_INFO/CONTACT_INFO/CONTACT_PHONE_INFO'
                        PASSING
                        XMLTYPE(ICLCUSTOMERINFO)
                    COLUMNS
                        NUPHONETYPE         NUMBER          PATH './CONTACT_PHONE_TYPE_ID',
                        NUCOUNTRY           VARCHAR2(6)     PATH './CONTACT_COUNTRY_LOC_ID',
                        SBAREACODE          VARCHAR2(10)    PATH './CONTACT_AREA_CODE',
                        SBPHONENUMBER       VARCHAR2(200)   PATH './CONTACT_PHONE_NUMBER'
                    ) XMLT;

                FETCH RFPHONES BULK COLLECT INTO TBPHONES;
                CLOSE RFPHONES;

                OPEN RFEMAILS FOR
                    SELECT *
                    FROM XMLTABLE('/CUSTOMER/BASIC_INFO/CONTACT_INFO/CONTACT_EMAIL_INFO'
                         PASSING
                            XMLTYPE(ICLCUSTOMERINFO)
                         COLUMNS
                            NUEMAILTYPE         NUMBER          PATH './CONTACT_MAIL_TYPE_ID',
                            SBEMAIL             VARCHAR2(1000)  PATH './CONTACT_EMAIL'
                        ) XMLT;

                FETCH RFEMAILS BULK COLLECT INTO TBEMAILS;
                CLOSE RFEMAILS;

                UT_TRACE.TRACE('Informacion de Subnodo CONTACT_INFO obtenida');

            END IF;

            
            CC_BOVALRECORDSACTIVE.VALRECORDSACTIVES
            (
                INUSUBSCRIBERTYPEID   => DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_TYPE_ID'),  
                INUGEOGRALOCATIONID   => NUGEOGRALOCATIONID,                                               
                INUECONOMICACTIVITYID => DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'BASIC_ECONO_ACTIVI_ID'),
                INUTAXPAYERTYPEID     => DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'TAXPAYER_TYPE_ID'),    
                INULANGUAGEPREFE      => DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'LANGUAGE'),            
                INUWAGESCALEID        => DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'WAGE_SCALE_ID')        

            );

            GE_BOSUBSCRIBER.INSERTADDRESS
            (
                NUADDRESSID,
                NUGEOGRALOCATIONID,
                SBADDRESS,
                SBISURBAN
            );

            
            GNUSUBSCRIBERID := DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID');


            SELECT  ST_BOWORLDTIMETOOLS.FDTTSTZDATETODATE(BIRTHDATE),
                    ST_BOWORLDTIMETOOLS.FDTTSTZDATETODATE(DATEOFISSUE),
                    ST_BOWORLDTIMETOOLS.FDTTSTZDATETODATE(ACTIVITIESDATE)
            INTO    DTBIRTHDATE,
                    DTDATEOFISSUE,
                    DTACTIVITIESDATE
            FROM    XMLTABLE( '/CUSTOMER/BASIC_INFO' PASSING XMLTYPE(ICLCUSTOMERINFO) COLUMNS
                        BIRTHDATE  TIMESTAMP WITH TIME ZONE PATH './BIRTH_DATE',
                        DATEOFISSUE  TIMESTAMP WITH TIME ZONE PATH './DOC_DATE_OF_ISSUE',
                        ACTIVITIESDATE  TIMESTAMP WITH TIME ZONE PATH './BEGIN_ACTIVITIES_DATE'
                    ) XMLT;

            GE_BOSUBSCRIBER.UPDSUBSCRIBER
            (
                GNUSUBSCRIBERID,
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'IDENT_TYPE_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'IDENTIFICATION'),
                NULL,
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_TYPE_ID'),
                NUADDRESSID,
                NUGEOGRALOCATIONID,
                SBADDRESS,
                SBISURBAN,
                NULL,
                NULL,
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'NAME'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'LAST_NAME'),
                NULL,
                NULL,
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'URL'),
                NULL,
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'MARKETING_SEGMENT_ID'),
                NULL,
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'GENDER'),
                DTBIRTHDATE,
                TRUE,
                NULL,
                NULL,
                SBCONTACTNAME,
                SBCONTACTIDENTTYPEID,
                SBCONTACTIDENTIFICATION,
                NULL,
                SBCONTACTLASTNAME,
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'BASIC_ECONO_ACTIVI_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'TAXPAYER_TYPE_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'BIRTH_LOCATION_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'DOC_PLACE_OF_ISSUE'),
                DTDATEOFISSUE,
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'FAX_NUMBER'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'RESIDENT'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'SCHOOL_DEGREE_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'PROFESSION_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'WAGE_SCALE_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'DEBIT_SCALE_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'CIVIL_STATE_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'RUT'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'SELF_COLLECTOR_FLAG'),
                DTACTIVITIESDATE,
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'NATIONALITY'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'DATA_SEND'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'ACCEPT_CALL'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'AUTHORIZATION_TYPE_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'OLD_OPERATOR'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'BASIC_COMMENT'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'IS_CORPORATIVE'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'DISABILITY_PERCENT'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'DISABILITY_TYPE_ID'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'LANGUAGE'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'PREFIX'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'FIRST_NAME'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'SECOND_NAME'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'FIRST_LAST_NAME'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'SECOND_LAST_NAME'),
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE, 'SUFFIX'),
                SBCONTACTPREFIX,
                SBCONTACTFIRSTNAME,
                SBCONTACTSECONDNAME,
                SBCONTACTFIRSTLASTNAME,
                SBCONTACTSECONLASTNAME,
                SBCONTACTSUFFIX
            );

            
            IF (SBCONTACTIDENTTYPEID IS NOT NULL AND SBCONTACTIDENTIFICATION IS NOT NULL ) THEN

                
                NUCONTACTID := GETSUBSCRIBERID(
                                                SBCONTACTIDENTTYPEID,
                                                SBCONTACTIDENTIFICATION
                                              );

                
                NUINDEX := TBPHONES.FIRST;

                WHILE (NUINDEX IS NOT NULL) LOOP
                    CC_BOSUBSCRIBER.SETCUSTPHONEDATA(
                                                        NUCONTACTID,
                                                        NULL,
                                                        NULL,
                                                        TBPHONES(NUINDEX).NUPHONETYPE,
                                                        CC_BOSUBSPHONEREGIS.FSBPREFIXBYCOUNTRYID(TBPHONES(NUINDEX).NUCOUNTRY),
                                                        TBPHONES(NUINDEX).SBAREACODE,
                                                        TBPHONES(NUINDEX).SBPHONENUMBER,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL
                                                     );

                    NUINDEX := TBPHONES.NEXT(NUINDEX);
                END LOOP;

                
                NUINDEX := TBEMAILS.FIRST;

                WHILE (NUINDEX IS NOT NULL) LOOP
                    CC_BOSUBSEMAIL.INSSUBSEMAIL(
                                                    NUCONTACTID,
                                                    TBEMAILS(NUINDEX).SBEMAIL,
                                                    TBEMAILS(NUINDEX).NUEMAILTYPE,
                                                    NULL
                                                );
                    NUINDEX := TBEMAILS.NEXT(NUINDEX);
                END LOOP;

            END IF;

            UT_TRACE.TRACE('FIN ge_bosubscriber.CustomerUpdate.ProcessBasicInfo', 9);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                 RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSBASICINFO;
        





















        PROCEDURE PROCESSPHONEINFO
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS
            NLBASICINFONODE         DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFONODE         DBMS_XMLDOM.DOMNODE;

            NLPHONEINFONODE         DBMS_XMLDOM.DOMNODELIST;
            NDPHONEINFONODE         DBMS_XMLDOM.DOMNODE;

            NUROWSCOUNTER           STYNUMBER;

        BEGIN
        
            UT_TRACE.TRACE('INICIO ge_bosubscriber.CustomerUpdate.ProcessPhoneInfo', 9);
            
            NLBASICINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BASIC_INFO' );
                                               
            NDBASICINFONODE := DBMS_XMLDOM.ITEM( NLBASICINFONODE, 0 );

            
            NLPHONEINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/PHONE_INFO' );

            NUROWSCOUNTER  := DBMS_XMLDOM.GETLENGTH( NLPHONEINFONODE );
            
            IF(NUROWSCOUNTER > 0 )THEN
            
                FOR NUINDEX IN 0..(NUROWSCOUNTER - 1) LOOP
                
                    NDPHONEINFONODE := DBMS_XMLDOM.ITEM(NLPHONEINFONODE,NUINDEX);
                    
                    CC_BOSUBSCRIBER.SETCUSTPHONEDATA
                    (
                        DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                        NULL,
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'PHONE_TYPE_ID'),
                        CC_BOSUBSPHONEREGIS.FSBPREFIXBYCOUNTRYID(
                            DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'COUNTRY_LOCATION_ID')
                        ),
                        DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'AREA_CODE'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'PHONE_NUMBER'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'ADMINISTRATIVE_SMS'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'COMERCIAL_SMS'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'TECHNICAL_SMS'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'COMPANY_PHONE'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'DESCRIPTION')
                    );
                    
                    UT_TRACE.TRACE('Subnodo PHONE_NUMBER ['||DBMS_XSLPROCESSOR.VALUEOF(NDPHONEINFONODE,'PHONE_NUMBER')||' Guardado', 9);
                    
                END LOOP;
                
            END IF;
            
            UT_TRACE.TRACE('FIN ge_bosubscriber.CustomerUpdate.ProcessPhoneInfo', 9);
        
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                 RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSPHONEINFO;
        
        
















        PROCEDURE PROCESSMAILINFO
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS
            NLBASICINFONODE         DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFONODE         DBMS_XMLDOM.DOMNODE;

            NLMAILINFONODE         DBMS_XMLDOM.DOMNODELIST;
            NDMAILINFONODE         DBMS_XMLDOM.DOMNODE;

            NUROWSCOUNTER           STYNUMBER;

        BEGIN

            UT_TRACE.TRACE('INICIO ge_bosubscriber.CustomerUpdate.ProcessMailInfo', 9);
            
            NLBASICINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BASIC_INFO' );

            NDBASICINFONODE := DBMS_XMLDOM.ITEM( NLBASICINFONODE, 0 );

            
            NLMAILINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/EMAIL_INFO' );

            NUROWSCOUNTER  := DBMS_XMLDOM.GETLENGTH( NLMAILINFONODE );

            IF(NUROWSCOUNTER > 0 )THEN

                FOR NUINDEX IN 0..(NUROWSCOUNTER - 1) LOOP

                    NDMAILINFONODE := DBMS_XMLDOM.ITEM(NLMAILINFONODE,NUINDEX);

                    CC_BOSUBSEMAIL.INSSUBSEMAIL(
                                                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                                                DBMS_XSLPROCESSOR.VALUEOF(NDMAILINFONODE,'EMAIL'),
                                                DBMS_XSLPROCESSOR.VALUEOF(NDMAILINFONODE,'MAIL_TYPE_ID'),
                                                NULL
                                            );
                                            
                    UT_TRACE.TRACE('Subnodo EMAIL_INFO ['||DBMS_XSLPROCESSOR.VALUEOF(NDMAILINFONODE,'EMAIL_INFO')||' Guardado', 9);

                END LOOP;

            END IF;

            UT_TRACE.TRACE('FIN ge_bosubscriber.CustomerUpdate.ProcessMailInfo', 9);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                 RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSMAILINFO;

        























        PROCEDURE PROCESSECONOACTIINFO
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS

            NLBASICINFONODE         DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFONODE         DBMS_XMLDOM.DOMNODE;

            NLECONOACTINFONODE      DBMS_XMLDOM.DOMNODELIST;
            NDECONOACTINFONODE      DBMS_XMLDOM.DOMNODE;

            NUROWSCOUNTER           STYNUMBER;

        BEGIN

            UT_TRACE.TRACE('INICIO ge_bosubscriber.CustomerUpdate.ProcessEconoActiInfo', 9);
        
            
            NLBASICINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BASIC_INFO' );
                                               
            NDBASICINFONODE := DBMS_XMLDOM.ITEM( NLBASICINFONODE, 0 );
            
            
            NLECONOACTINFONODE :=
                DBMS_XSLPROCESSOR.SELECTNODES(
                                DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                '/CUSTOMER/ECONOM_ACTIVITIES_INFO' );
                            
            NUROWSCOUNTER  := DBMS_XMLDOM.GETLENGTH( NLECONOACTINFONODE );
            
            IF (NUROWSCOUNTER  > 0) THEN
            
                FOR NUINDEX IN 0..(NUROWSCOUNTER - 1) LOOP

                    NDECONOACTINFONODE := DBMS_XMLDOM.ITEM( NLECONOACTINFONODE,
                                                            NUINDEX );
                    
                    CC_BOSUBSCRIBER.SETCUSTECONOACTDATA
                    (
                        DBMS_XSLPROCESSOR.VALUEOF( NDBASICINFONODE, 'SUBSCRIBER_ID' ),
                        DBMS_XSLPROCESSOR.VALUEOF( NDECONOACTINFONODE,
                                                   'ECONOMIC_ACTIVITY_ID' )
                    );
                    
                    UT_TRACE.TRACE('Subnodo ECONOM_ACTIVITIES_INFO ['||DBMS_XSLPROCESSOR.VALUEOF(NDECONOACTINFONODE,' ECONOMIC_ACTIVITY_ID')||' Guardado', 9);

                END LOOP;
                
            END IF;
            
            UT_TRACE.TRACE('FIN ge_bosubscriber.CustomerUpdate.ProcessEconoActiInfo', 9);
        
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                 RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSECONOACTIINFO;
        
        





































        PROCEDURE PROCESSFAMILYHOUSINFO
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS
            NLBASICINFONODE             DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFONODE             DBMS_XMLDOM.DOMNODE;

            NLFAMILYINFONODE            DBMS_XMLDOM.DOMNODELIST;
            NDFAMILYINFONODE            DBMS_XMLDOM.DOMNODE;

            NLHOUSINGCURRENTINFO        DBMS_XMLDOM.DOMNODELIST;
            NDHOUSINGCURRENTINFO        DBMS_XMLDOM.DOMNODE;

            NLHOUSINGOLDINFONODE        DBMS_XMLDOM.DOMNODELIST;
            NDHOUSINGOLDINFONODE        DBMS_XMLDOM.DOMNODE;
            
            NLWORKINFONODE              DBMS_XMLDOM.DOMNODELIST;
            NDWORKINFONODE              DBMS_XMLDOM.DOMNODE;

            NLWORKINFOADDRESSNODE       DBMS_XMLDOM.DOMNODELIST;
            NDWORKINFOADDRESSNODE       DBMS_XMLDOM.DOMNODE;
            
            NLWORKOLDINFONODE           DBMS_XMLDOM.DOMNODELIST;
            NDWORKOLDINFONODE           DBMS_XMLDOM.DOMNODE;

            NUROWSFAMILYINFO            STYNUMBER;
            NUROWSHOUSINGCURRENT        STYNUMBER;
            NUROWSHOUSINGOLD            STYNUMBER;
            NUROWSWORKINFO              STYNUMBER;
            NUROWSWORKINFOADDRESS       STYNUMBER;
            NUROWSWORKOLDINFO           STYNUMBER;

            
            NUADDRESSID            GE_SUBSCRIBER.ADDRESS_ID%TYPE;

            
            SBHASVEHICULE           GE_SUBS_FAMILY_DATA.HAS_VEHICULE%TYPE := NULL;
            NUCOUPLEACTIVITYID      GE_SUBS_FAMILY_DATA.COUPLE_ACTIVITY_ID%TYPE := NULL;
            SBCOUPLEIDENTIFY        GE_SUBS_FAMILY_DATA.COUPLE_IDENTIFY%TYPE := NULL;
            SBCOUPLENAME            GE_SUBS_FAMILY_DATA.COUPLE_NAME%TYPE := NULL;
            NUCOUPLEWAGESCALE       GE_SUBS_FAMILY_DATA.COUPLE_WAGE_SCALE%TYPE := NULL;
            NUNUMBERDEPENDPEOPLE    GE_SUBS_FAMILY_DATA.NUMBER_DEPEND_PEOPLE%TYPE := NULL;
            SBVEHICULEBRAND         GE_SUBS_FAMILY_DATA.VEHICULE_BRAND%TYPE := NULL;
            NUVEHICULEMODEL         GE_SUBS_FAMILY_DATA.VEHICULE_MODEL%TYPE := NULL;

            
            NUHOUSETYPEID   GE_SUBS_HOUSING_DATA.HOUSE_TYPE_ID%TYPE := NULL;
            NUOLDLOCATIONID GE_SUBS_HOUSING_DATA.OLD_LOCATION_ID%TYPE := NULL;
            SBRENTERNAME    GE_SUBS_HOUSING_DATA.RENTER_NAME%TYPE := NULL;
            SBRENTERPHONE   GE_SUBS_HOUSING_DATA.RENTER_PHONE%TYPE := NULL;
            NUYEARSLIVINGHOUSE  GE_SUBS_HOUSING_DATA.YEARS_LIVING_HOUSE%TYPE := NULL;
            NUYEARSLIVINGTOWN   GE_SUBS_HOUSING_DATA.YEARS_LIVING_IN_TOWN%TYPE := NULL;
            NUYEARSLIVOLDHOUSE  GE_SUBS_HOUSING_DATA.YEARS_LIV_OLD_HOUSE%TYPE := NULL;
            NUYEARSLIVOLDTOWN   GE_SUBS_HOUSING_DATA.YEARS_LIV_OLD_TOWN%TYPE := NULL;
            NUVALUEHOUSE        GE_SUBS_HOUSING_DATA.VALUE_HOUSE%TYPE := NULL;
            NUVALUEMORTGAGE     GE_SUBS_HOUSING_DATA.VALUE_MORTGAGE%TYPE := NULL;
            NUPERSONQUANTITY    GE_SUBS_HOUSING_DATA.PERSON_QUANTITY%TYPE := NULL;
            NUCATEGORYID        GE_SUBS_HOUSING_DATA.CATEGORY_ID%TYPE := NULL;
            NUSUBCATEGORYID     GE_SUBS_HOUSING_DATA.SUBCATEGORY_ID%TYPE := NULL;
            
            
            SBHIREDATE              UT_DATATYPES.STYTOKEN;
            SBOCUPATION             GE_SUBS_WORK_RELAT.OCCUPATION%TYPE;
            SBTITLE                 GE_SUBS_WORK_RELAT.TITLE%TYPE;
            NUACTIVITYID            GE_SUBS_WORK_RELAT.ACTIVITY_ID%TYPE;
            SBWORKAREA              GE_SUBS_WORK_RELAT.WORK_AREA%TYPE;
            SBCOMPANY               GE_SUBS_WORK_RELAT.COMPANY%TYPE;
            NUEXPERIENCE            GE_SUBS_WORK_RELAT.EXPERIENCE%TYPE;
            DTHIREDATE              GE_SUBS_WORK_RELAT.HIRE_DATE%TYPE;
            SBOFFICEPHONE           GE_SUBS_WORK_RELAT.PHONE_OFFICE%TYPE;
            SBOFFICEPHONEEXTENSION  GE_SUBS_WORK_RELAT.PHONE_EXTENSION%TYPE;
            NUWORKEDTIME            GE_SUBS_WORK_RELAT.WORKED_TIME%TYPE;
            INUPREVIOUSACTIVITYID   GE_SUBS_WORK_RELAT.PREVIOUS_ACTIVITY_ID%TYPE;
            ISBPREVIOUSCOMPANY      GE_SUBS_WORK_RELAT.PREVIOUS_COMPANY%TYPE;
            ISBPREVIOUSOCCUPATION   GE_SUBS_WORK_RELAT.PREVIOUS_OCCUPATION%TYPE;
            INUPREVIOUSWORKTIME     GE_SUBS_WORK_RELAT.PREVIOUS_WORK_TIME%TYPE;
        BEGIN
            UT_TRACE.TRACE('INICIA ge_bosubscriber.CustomerUpdate.ProcessFamilyHousInfo', 5);

            
            
            NLBASICINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BASIC_INFO' );
                                               
            NDBASICINFONODE := DBMS_XMLDOM.ITEM( NLBASICINFONODE, 0 );

            
            NLFAMILYINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                    '/CUSTOMER/FAMILY_HOUSING_INFO/FAMILY_INFO' );
                                
            NUROWSFAMILYINFO := DBMS_XMLDOM.GETLENGTH( NLFAMILYINFONODE );

            
            NLHOUSINGCURRENTINFO :=
                DBMS_XSLPROCESSOR.SELECTNODES(
                            DBMS_XMLDOM.MAKENODE(IXMLDOC),
                            '/CUSTOMER/FAMILY_HOUSING_INFO/HOUSING_CURRENT_INFO' );
                        
            NUROWSHOUSINGCURRENT := DBMS_XMLDOM.GETLENGTH( NLHOUSINGCURRENTINFO );

            
            NLHOUSINGOLDINFONODE :=
                DBMS_XSLPROCESSOR.SELECTNODES(
                                DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                '/CUSTOMER/FAMILY_HOUSING_INFO/HOUSING_OLD_INFO' );
                            
            NUROWSHOUSINGOLD := DBMS_XMLDOM.GETLENGTH( NLHOUSINGOLDINFONODE );

            
            NLWORKINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                        DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                        '/CUSTOMER/FAMILY_HOUSING_INFO/WORK_INFO' );
                                    
            NUROWSWORKINFO := DBMS_XMLDOM.GETLENGTH( NLWORKINFONODE );

            NLWORKINFOADDRESSNODE :=
                DBMS_XSLPROCESSOR.SELECTNODES(
                        DBMS_XMLDOM.MAKENODE(IXMLDOC),
                        '/CUSTOMER/FAMILY_HOUSING_INFO/WORK_INFO/WORK_ADDRESS_INFO' );
                    
            NUROWSWORKINFOADDRESS := DBMS_XMLDOM.GETLENGTH(NLWORKINFOADDRESSNODE);

            
            NLWORKOLDINFONODE :=
                DBMS_XSLPROCESSOR.SELECTNODES(
                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                    '/CUSTOMER/FAMILY_HOUSING_INFO/WORK_OLD_INFO' );
                                
            NUROWSWORKOLDINFO := DBMS_XMLDOM.GETLENGTH( NLWORKOLDINFONODE );

            


            IF(NUROWSFAMILYINFO > 0)THEN
            
                NDFAMILYINFONODE := DBMS_XMLDOM.ITEM( NLFAMILYINFONODE, 0 );

                SBCOUPLENAME :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYINFONODE,'COUPLE_NAME');
                SBCOUPLEIDENTIFY :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYINFONODE,'COUPLE_IDENTIFY');
                NUCOUPLEACTIVITYID :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYINFONODE,'COUPLE_ACTIVITY_ID');
                NUCOUPLEWAGESCALE :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYINFONODE,'COUPLE_WAGE_SCALE');
                NUNUMBERDEPENDPEOPLE :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYINFONODE,'NUMBER_DEPEND_PEOPLE');
                NUPERSONQUANTITY :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYINFONODE,'PERSON_QUANTITY');
                SBHASVEHICULE :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYINFONODE,'HAS_VEHICULE');
                SBVEHICULEBRAND :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYINFONODE,'VEHICULE_BRAND');
                NUVEHICULEMODEL :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYINFONODE,'VEHICULE_MODEL');
                
                UT_TRACE.TRACE('Datos de nodo FAMILY_INFO obtenidos', 5);
                
            END IF;

            IF ( NUROWSHOUSINGCURRENT > 0 ) THEN
            
                NDHOUSINGCURRENTINFO := DBMS_XMLDOM.ITEM(NLHOUSINGCURRENTINFO,0);

                NUHOUSETYPEID :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGCURRENTINFO,'HOUSE_TYPE_ID');
                SBRENTERNAME :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGCURRENTINFO,'RENTER_NAME');
                SBRENTERPHONE :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGCURRENTINFO,'RENTER_PHONE');
                NUCATEGORYID :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGCURRENTINFO,'CATEGORY_ID');
                NUSUBCATEGORYID :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGCURRENTINFO,'SUBCATEGORY_ID');
                NUVALUEHOUSE :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGCURRENTINFO,'VALUE_HOUSE');
                NUVALUEMORTGAGE :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGCURRENTINFO,'VALUE_MORTGAGE');
                NUYEARSLIVINGHOUSE :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGCURRENTINFO,'YEARS_LIVING_HOUSE');
                NUYEARSLIVINGTOWN :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGCURRENTINFO,'YEARS_LIVING_IN_TOWN');

                UT_TRACE.TRACE('Datos de nodo HOUSING_CURRENT_INFO obtenidos', 5);
                
            END IF;

            IF(NUROWSHOUSINGOLD > 0)THEN
            
                NDHOUSINGOLDINFONODE := DBMS_XMLDOM.ITEM(NLHOUSINGOLDINFONODE,0);

                NUOLDLOCATIONID :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGOLDINFONODE,'OLD_LOCATION_ID');
                NUYEARSLIVOLDHOUSE :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGOLDINFONODE,'YEARS_LIV_OLD_HOUSE');
                NUYEARSLIVOLDTOWN :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDHOUSINGOLDINFONODE,'YEARS_LIV_OLD_TOWN');

                UT_TRACE.TRACE('Datos de nodo HOUSING_OLD_INFO obtenidos', 5);

            END IF;

            CC_BOSUBSCRIBER.SETFAMILYHOUSINFO
            (
                DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                SBHASVEHICULE,
                NUCOUPLEACTIVITYID,
                SBCOUPLEIDENTIFY,
                SBCOUPLENAME,
                NUCOUPLEWAGESCALE,
                NUNUMBERDEPENDPEOPLE,
                SBVEHICULEBRAND,
                NUVEHICULEMODEL,
                NUHOUSETYPEID,
                NUOLDLOCATIONID,
                SBRENTERNAME,
                SBRENTERPHONE,
                NUYEARSLIVINGHOUSE,
                NUYEARSLIVINGTOWN,
                NUYEARSLIVOLDHOUSE,
                NUYEARSLIVOLDTOWN,
                NUVALUEHOUSE,
                NUVALUEMORTGAGE,
                NUPERSONQUANTITY,
                NUCATEGORYID,
                NUSUBCATEGORYID
            );
            UT_TRACE.TRACE('PUNTO 1', 1);
            IF ( NUROWSWORKINFOADDRESS > 0 ) THEN
            UT_TRACE.TRACE('PUNTO 2', 1);
                NDWORKINFOADDRESSNODE := DBMS_XMLDOM.ITEM(NLWORKINFOADDRESSNODE,0);

                NUADDRESSID :=
                            DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFOADDRESSNODE,'WORK_ADDRESS_ID');
           UT_TRACE.TRACE('PUNTO 3', 1);
                GE_BOSUBSCRIBER.INSERTADDRESS
                (
                    NUADDRESSID,
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFOADDRESSNODE,'WORK_GEO_LOCATION_ID'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFOADDRESSNODE,'WORK_ADDRESS'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFOADDRESSNODE,'WORK_ADDRESS_IS_URBAN')
                );

            END IF;
            UT_TRACE.TRACE('PUNTO 4', 1);
            
            IF (NUROWSWORKINFO > 0) THEN
                NDWORKINFONODE   := DBMS_XMLDOM.ITEM(NLWORKINFONODE, 0);
                
                SBHIREDATE := DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'HIRE_DATE');
                
                IF (SBHIREDATE IS NOT NULL) THEN
                    SELECT  ST_BOWORLDTIMETOOLS.FDTTSTZDATETODATE(HIREDATE)
                    INTO    DTHIREDATE
                    FROM    XMLTABLE( '/CUSTOMER/FAMILY_HOUSING_INFO/WORK_INFO' PASSING XMLTYPE(ICLCUSTOMERINFO) COLUMNS
                                HIREDATE  TIMESTAMP WITH TIME ZONE PATH './HIRE_DATE'
                            ) XMLT;
                END IF;
            END IF;
            UT_TRACE.TRACE('PUNTO 5', 1);

            

            IF(NUROWSWORKINFO > 0) THEN
             UT_TRACE.TRACE('PUNTO 6', 1);
                NDWORKINFONODE   := DBMS_XMLDOM.ITEM(NLWORKINFONODE, 0);
                
                SBOCUPATION             :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'WORK_OCCUPATION');
                SBTITLE                 :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'TITLE');
                NUACTIVITYID            :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'WORK_ACTIVITY_ID');
                SBWORKAREA              :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'WORK_AREA');
                SBCOMPANY               :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'COMPANY');
                NUEXPERIENCE            :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'EXPERIENCE');
                SBOFFICEPHONE           :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'OFFICE_PHONE');
                SBOFFICEPHONEEXTENSION  :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'OFFICE_PHONE_EXTENSION');
                NUWORKEDTIME            :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKINFONODE,'WORKED_TIME');

                UT_TRACE.TRACE('Datos de nodo WORK_INFO obtenidos', 5);

            END IF;
            UT_TRACE.TRACE('PUNTO 7', 1);
            IF(NUROWSWORKOLDINFO > 0) THEN

                NDWORKOLDINFONODE := DBMS_XMLDOM.ITEM( NLWORKOLDINFONODE, 0 );
                
                INUPREVIOUSACTIVITYID   :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKOLDINFONODE,'PREVIOUS_ACTIVITY_ID');
                ISBPREVIOUSCOMPANY      :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKOLDINFONODE,'PREVIOUS_COMPANY');
                ISBPREVIOUSOCCUPATION   :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKOLDINFONODE,'PREVIOUS_OCCUPATION');
                INUPREVIOUSWORKTIME     :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDWORKOLDINFONODE,'PREVIOUS_WORK_TIME');

                UT_TRACE.TRACE('Datos de nodo WORK_OLD_INFO obtenidos', 5);
                
            END IF;
            UT_TRACE.TRACE('PUNTO 8', 1);
           IF(NUROWSWORKINFO > 0 OR NUROWSWORKOLDINFO > 0)THEN

                CC_BOSUBSCRIBER.SETCUSTWORKDATA
                (
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                    NULL,
                    NULL,
                    SBOCUPATION,
                    SBTITLE,
                    NUACTIVITYID,
                    SBWORKAREA,
                    SBCOMPANY,
                    NUEXPERIENCE,
                    DTHIREDATE,
                    NUADDRESSID,
                    SBOFFICEPHONE,
                    SBOFFICEPHONEEXTENSION,
                    NUWORKEDTIME,
                    INUPREVIOUSACTIVITYID,
                    ISBPREVIOUSCOMPANY,
                    ISBPREVIOUSOCCUPATION,
                    INUPREVIOUSWORKTIME
                );
                
            END IF;
            UT_TRACE.TRACE('PUNTO 9', 1);
            UT_TRACE.TRACE('FIN ge_bosubscriber.CustomerUpdate.ProcessFamilyHousInfo', 5);
            
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSFAMILYHOUSINFO;

        































        PROCEDURE PROCESSREFERENCEINFO
        (
             IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS
            NLBASICINFONODE     DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFONODE     DBMS_XMLDOM.DOMNODE;

            NLCOMREFINFONODE    DBMS_XMLDOM.DOMNODELIST;
            NDCOMREFINFONODE    DBMS_XMLDOM.DOMNODE;

            NLFAMILYREFINFONODE DBMS_XMLDOM.DOMNODELIST;
            NDFAMILYREFINFONODE DBMS_XMLDOM.DOMNODE;

            NLBANKREFINFONODE   DBMS_XMLDOM.DOMNODELIST;
            NDBANKREFINFONODE   DBMS_XMLDOM.DOMNODE;

            NUROWSCOMREFINFONODE    STYNUMBER;
            NUROWSFAMILYREFINFO     STYNUMBER;
            NUROWSBANKREFINFONODE   STYNUMBER;

            CNUREFTYPECOM       CONSTANT GE_SUBS_REFEREN_DATA.REFERENCE_TYPE_ID%TYPE := 2;
            CNUREFTYPEBANK      CONSTANT GE_SUBS_REFEREN_DATA.REFERENCE_TYPE_ID%TYPE := 3;
            CNUREFTYPEFAMILY    CONSTANT GE_SUBS_REFEREN_DATA.REFERENCE_TYPE_ID%TYPE := 1;

            NUADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;

        BEGIN
            UT_TRACE.TRACE('INICIO ge_bosubscriber.CustomerUpdate.ProcessReferenceInfo', 5);

            
            
            NLBASICINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BASIC_INFO' );
                                               
            NDBASICINFONODE := DBMS_XMLDOM.ITEM( NLBASICINFONODE, 0 );

            
            NLCOMREFINFONODE :=
                DBMS_XSLPROCESSOR.SELECTNODES(
                            DBMS_XMLDOM.MAKENODE(IXMLDOC),
                            '/CUSTOMER/REFERENCE_INFO/COMMERCIAL_REFERE_INFO' );
                        
            NUROWSCOMREFINFONODE := DBMS_XMLDOM.GETLENGTH( NLCOMREFINFONODE );

            
            NLFAMILYREFINFONODE :=
                DBMS_XSLPROCESSOR.SELECTNODES(
                                DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                '/CUSTOMER/REFERENCE_INFO/FAMILY_REFERENCE_INFO' );
                            
            NUROWSFAMILYREFINFO := DBMS_XMLDOM.GETLENGTH( NLFAMILYREFINFONODE );

            
            NLBANKREFINFONODE :=
                DBMS_XSLPROCESSOR.SELECTNODES(
                                DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                '/CUSTOMER/REFERENCE_INFO/BANK_REFERENCE_INFO' );
                            
            NUROWSBANKREFINFONODE := DBMS_XMLDOM.GETLENGTH(NLBANKREFINFONODE);

            
            IF(NUROWSCOMREFINFONODE > 0)THEN
            
                FOR NUINDEX IN 0..(NUROWSCOMREFINFONODE - 1) LOOP

                    NDCOMREFINFONODE := DBMS_XMLDOM.ITEM( NLCOMREFINFONODE,
                                                          NUINDEX );

                    
                    NUADDRESSID := DBMS_XSLPROCESSOR.VALUEOF( NDCOMREFINFONODE,
                                                              'COM_REF_ADDRESS_INFO/COM_REF_ADDRESS_ID' );

                    GE_BOSUBSCRIBER.INSERTADDRESS
                    (
                        NUADDRESSID,
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_ADDRESS_INFO/REF_GEO_LOCATION_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_ADDRESS_INFO/COM_REF_ADDRESS'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_ADDRESS_INFO/COM_REF_ADDRE_IS_URBAN')
                    );

                    
                    CC_BOSUBSCRIBER.SETREFERENCE
                    (
                        NULL,
                        NULL,
                        NULL,
                        NUADDRESSID,
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_COMMENT'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'DEBIT_NOW'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'HAS_BEEN_DEBIT'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_IDENTIFICATION'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_IDENT_TYPE_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_LAST_NAME'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'MONTH_DUE'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_NAME'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'NO_DEBIT'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_PHONE'),
                        CNUREFTYPECOM,
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'TIME_KNOW')
                    );
                    
                    UT_TRACE.TRACE('Subnodo COMMERCIAL_REFERE_INFO ['||DBMS_XSLPROCESSOR.VALUEOF(NDCOMREFINFONODE,'COM_REF_IDENTIFICATION')||' Guardado', 9);
                    
                END LOOP;
                
            END IF;

            
            IF ( NUROWSFAMILYREFINFO > 0 ) THEN
            
                FOR NUINDEX IN 0 .. ( NUROWSFAMILYREFINFO - 1 ) LOOP

                    NDFAMILYREFINFONODE := DBMS_XMLDOM.ITEM( NLFAMILYREFINFONODE,
                                                             NUINDEX );

                    
                    NUADDRESSID := DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,
                                                             'FAM_REF_ADDRESS_INFO/FAMILY_REF_ADDRESS_ID');

                    GE_BOSUBSCRIBER.INSERTADDRESS
                    (
                        NUADDRESSID,
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAM_REF_ADDRESS_INFO/GEOGRAP_LOCATION_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAM_REF_ADDRESS_INFO/FAMILY_GEO_LOCATION_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAM_REF_ADDRESS_INFO/FAMILY_REF_ADDRESS')
                    );

                    
                    CC_BOSUBSCRIBER.SETREFERENCE
                    (
                        NULL,
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAM_REF_ACTIVITY_ID'),
                        NUADDRESSID,
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAMILY_REF_COMMENT'),
                        NULL,
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAM_REF_IDENTIFICATION'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAM_REF_IDENT_TYPE_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAMILY_REF_LAST_NAME'),
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAMILY_REF_NAME'),
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAMILY_REF_PHONE'),
                        CNUREFTYPEFAMILY,
                        DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'RELATIONSHIP'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                        NULL
                    );
                    
                    UT_TRACE.TRACE('Subnodo FAMILY_REFERENCE_INFO ['||DBMS_XSLPROCESSOR.VALUEOF(NDFAMILYREFINFONODE,'FAM_REF_IDENTIFICATION')||' Guardado', 9);
                    
                END LOOP;
                
            END IF;

            
            IF(NUROWSBANKREFINFONODE > 0)THEN
            
                FOR NUINDEX IN 0..(NUROWSBANKREFINFONODE - 1) LOOP

                    NDBANKREFINFONODE := DBMS_XMLDOM.ITEM( NLBANKREFINFONODE,
                                                           NUINDEX );

                    
                    NUADDRESSID := DBMS_XSLPROCESSOR.VALUEOF( NDBANKREFINFONODE,
                                                              'BANK_REF_ADDRESS_INFO/BANK_REF_ADDRESS_ID' );

                    GE_BOSUBSCRIBER.INSERTADDRESS
                    (
                        NUADDRESSID,
                        DBMS_XSLPROCESSOR.VALUEOF(NDBANKREFINFONODE,'BANK_REF_ADDRESS_INFO/BANK_GEO_LOCATION_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDBANKREFINFONODE,'BANK_REF_ADDRESS_INFO/BANK_REF_ADDRESS'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDBANKREFINFONODE,'BANK_REF_ADDRESS_INFO/BANK_REF_ADDR_IS_URBAN')
                    );

                    
                    CC_BOSUBSCRIBER.SETREFERENCE
                    (
                        DBMS_XSLPROCESSOR.VALUEOF(NDBANKREFINFONODE,'BANK_ACCOUNT'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDBANKREFINFONODE,'ACCOUNT_TYPE'),
                        NULL,
                        NUADDRESSID,
                        DBMS_XSLPROCESSOR.VALUEOF(NDBANKREFINFONODE,'BANK_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDBANKREFINFONODE,'BANK_REF_COMMENT'),
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDBANKREFINFONODE,'BANK_REF_PHONE'),
                        CNUREFTYPEBANK,
                        NULL,
                        DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                        NULL
                    );
                    
                    UT_TRACE.TRACE('Subnodo BANK_REFERENCE_INFO ['||DBMS_XSLPROCESSOR.VALUEOF(NDBANKREFINFONODE,'BANK_ID')||' Guardado', 9);
                    
                END LOOP;
                
            END IF;

            UT_TRACE.TRACE('FIN ge_bosubscriber.CustomerUpdate.ProcessReferenceInfo', 5);
            
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSREFERENCEINFO;
        
        




























        PROCEDURE PROCESSBUSINESSINFO
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS

            NLBASICINFONODE         DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFONODE         DBMS_XMLDOM.DOMNODE;

            NLBUSINESSINFONODE      DBMS_XMLDOM.DOMNODELIST;
            NDBUSINESSINFONODE      DBMS_XMLDOM.DOMNODE;

            NLADDRESS               DBMS_XMLDOM.DOMNODELIST;
            NDADDRESS               DBMS_XMLDOM.DOMNODE;

            NUROWSCOUNTER           STYNUMBER;
            NUROWADDRESS            STYNUMBER;

            NUADDRESSID             AB_ADDRESS.ADDRESS_ID%TYPE;
            DTBORNDATE              GE_SUBS_BUSINES_DATA.BORN_DATE%TYPE;
        BEGIN

            UT_TRACE.TRACE('INICIA GE_BOSubscriber.CustomerUpdate.ProcessBusinessInfo', 5);

            
            
            NLBASICINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BASIC_INFO');
                                               
            NDBASICINFONODE := DBMS_XMLDOM.ITEM( NLBASICINFONODE, 0 );

            
            NLBUSINESSINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BUSINESS_INFO' );
                                               
            NUROWSCOUNTER := DBMS_XMLDOM.GETLENGTH( NLBUSINESSINFONODE );

            
            IF(NUROWSCOUNTER > 0)THEN

                NDBUSINESSINFONODE := DBMS_XMLDOM.ITEM(NLBUSINESSINFONODE, 0);

                
                NLADDRESS := DBMS_XSLPROCESSOR.SELECTNODES(
                                        DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                        '/CUSTOMER/BUSINESS_INFO/BUSINESS_ADDRESS_INFO' );
                                    
                NUROWADDRESS := DBMS_XMLDOM.GETLENGTH( NLADDRESS );

                IF(NUROWADDRESS > 0)THEN

                    NDADDRESS   := DBMS_XMLDOM.ITEM( NLADDRESS, 0 );

                    NUADDRESSID := DBMS_XSLPROCESSOR.VALUEOF(NDADDRESS,'BUSINESS_ADDRESS_ID');

                    GE_BOSUBSCRIBER.INSERTADDRESS
                    (
                        NUADDRESSID,
                        DBMS_XSLPROCESSOR.VALUEOF(NDADDRESS,'BUSINESS_GEO_LOCAT_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDADDRESS,'BUSINESS_ADDRESS'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDADDRESS,'BUSI_ADDRESS_IS_URBAN')
                    );
                END IF;
                
                SELECT  ST_BOWORLDTIMETOOLS.FDTTSTZDATETODATE(BORNDATE)
                INTO    DTBORNDATE
                FROM    XMLTABLE('/CUSTOMER/BUSINESS_INFO' PASSING XMLTYPE(ICLCUSTOMERINFO) COLUMNS
                            BORNDATE  TIMESTAMP WITH TIME ZONE PATH './BORN_DATE'
                        ) XMLT;

                CC_BOSUBSCRIBER.SETBUSINESDATA
                (
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'TRADE_NAME'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'MANAGER_NAME'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'SECRETARY_NAME'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'IT_MANAGER'),
                    DTBORNDATE,
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'BUSINESS_OCCUPATION'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'HEADQUARTERS'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'POST_OFFICE_BOX'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'NUMBER_OF_EMPLOYEES'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'NUMBER_OF_BRANCHES'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'AMOUNT_COMPUTERS'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'TOTAL_ASSETS'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDBUSINESSINFONODE,'TOTAL_INCOME'),
                    NUADDRESSID
                );

            END IF;

            UT_TRACE.TRACE('FIN GE_BOSubscriber.CustomerUpdate.ProcessBusinessInfo', 5);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSBUSINESSINFO;

        






















        PROCEDURE PROCESSOTHERSERVICES
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS
            NLBASICINFONODE DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFONODE DBMS_XMLDOM.DOMNODE;

            NLOTHERSERVNODE DBMS_XMLDOM.DOMNODELIST;
            NDOTHERSERVNODE DBMS_XMLDOM.DOMNODE;

            NUROWSCOUNTER   STYNUMBER;
            DTRETIREDATE    GE_THIRD_PART_SERV.RETIRE_DATE%TYPE;
        BEGIN
            UT_TRACE.TRACE('INICIA GE_BOSubscriber.CustomerUpdate.ProcessOtherServices', 5);

            
            
            NLBASICINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BASIC_INFO' );
                                               
            NDBASICINFONODE := DBMS_XMLDOM.ITEM( NLBASICINFONODE, 0 );

            
            NLOTHERSERVNODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                '/CUSTOMER/OTHER_SERVICES_INFO');
                                            
            NUROWSCOUNTER  := DBMS_XMLDOM.GETLENGTH( NLOTHERSERVNODE );

            
            IF(NUROWSCOUNTER > 0 )THEN
            
                FOR NUINDEX IN 0..(NUROWSCOUNTER - 1) LOOP

                    NDOTHERSERVNODE := DBMS_XMLDOM.ITEM(NLOTHERSERVNODE,NUINDEX);
                    
                    SELECT  ST_BOWORLDTIMETOOLS.FDTTSTZDATETODATE(RETIREDATE)
                    INTO    DTRETIREDATE
                    FROM    XMLTABLE('/CUSTOMER/OTHER_SERVICES_INFO' PASSING XMLTYPE(ICLCUSTOMERINFO) COLUMNS
                                RETIREDATE  TIMESTAMP WITH TIME ZONE PATH './RETIRE_DATE'
                            ) XMLT;

                    
                    CC_BOSUBSCRIBER.SETOTHERSERV
                    (
                        DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDOTHERSERVNODE,'SERVICE_NAME'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDOTHERSERVNODE,'SUPPLIER'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDOTHERSERVNODE,'MONTHLY_COST'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDOTHERSERVNODE,'SERVICE_TIME'),
                        DTRETIREDATE
                    );

                END LOOP;
                
            END IF;

            UT_TRACE.TRACE('FIN GE_BOSubscriber.CustomerUpdate.ProcessOtherServices', 5);
            
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSOTHERSERVICES;

        




















        PROCEDURE PROCESSADITIONALINFO
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS
            NLBASICINFONODE     DBMS_XMLDOM.DOMNODELIST;
            NDBASICINFONODE     DBMS_XMLDOM.DOMNODE;

            NLSALEINFONODE      DBMS_XMLDOM.DOMNODELIST;
            NDSALEINFONODE      DBMS_XMLDOM.DOMNODE;

            NLINTERESTINFONODE  DBMS_XMLDOM.DOMNODELIST;
            NDINTERESTINFONODE  DBMS_XMLDOM.DOMNODE;

            NLHOBBIESINFONODE   DBMS_XMLDOM.DOMNODELIST;
            NDHOBBIESINFONODE   DBMS_XMLDOM.DOMNODE;

            NUROWSCOUNTER       STYNUMBER;

        BEGIN
            UT_TRACE.TRACE('INICIA GE_BOSubscriber.CustomerUpdate.ProcessAditionalInfo', 5);

            
            
            NLBASICINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                                    '/CUSTOMER/BASIC_INFO' );
                                                
            NDBASICINFONODE := DBMS_XMLDOM.ITEM( NLBASICINFONODE, 0 );

            
            NLSALEINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                            DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                            '/CUSTOMER/ADDITIONAL_INFO/SALE_DATA_INFO' );
                                        
            NUROWSCOUNTER  := DBMS_XMLDOM.GETLENGTH( NLSALEINFONODE );

            
            IF(NUROWSCOUNTER > 0 )THEN
            
                NDSALEINFONODE := DBMS_XMLDOM.ITEM( NLSALEINFONODE, 0 );

                
                CC_BOSUBSCRIBER.SETSALEDATA
                (
                    DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDSALEINFONODE,'EQUIPMENT_QUANTITY'),
                    DBMS_XSLPROCESSOR.VALUEOF(NDSALEINFONODE,'BUY_INTERNET')
                );
            END IF;

            
            NLINTERESTINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                        DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                        '/CUSTOMER/ADDITIONAL_INFO/INTEREST_INFO' );
                                    
            NUROWSCOUNTER  := DBMS_XMLDOM.GETLENGTH( NLINTERESTINFONODE );

            
            IF(NUROWSCOUNTER > 0) THEN
            
                FOR NUINDEX IN 0..(NUROWSCOUNTER - 1) LOOP

                    NDINTERESTINFONODE := DBMS_XMLDOM.ITEM( NLINTERESTINFONODE,
                                                            NUINDEX );

                    
                    CC_BOSUBSCRIBER.SETSUBSINTEREST
                    (
                        DBMS_XSLPROCESSOR.VALUEOF(NDINTERESTINFONODE,'INTEREST_DATA_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID')
                    );
                    
                END LOOP;
                
            END IF;

            
            NLHOBBIESINFONODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                        DBMS_XMLDOM.MAKENODE(IXMLDOC),
                                        '/CUSTOMER/ADDITIONAL_INFO/HOBBIES_INFO' );
                                    
            NUROWSCOUNTER  := DBMS_XMLDOM.GETLENGTH( NLHOBBIESINFONODE );

            
            IF(NUROWSCOUNTER > 0)THEN
            
                FOR NUINDEX IN 0..(NUROWSCOUNTER - 1) LOOP
                
                    NDHOBBIESINFONODE := DBMS_XMLDOM.ITEM( NLHOBBIESINFONODE,
                                                           NUINDEX);

                    
                    CC_BOSUBSCRIBER.SETSUBSHOBBIES
                    (
                        DBMS_XSLPROCESSOR.VALUEOF(NDHOBBIESINFONODE,'HOBBIES_ID'),
                        DBMS_XSLPROCESSOR.VALUEOF(NDBASICINFONODE,'SUBSCRIBER_ID')
                    );
                    
                END LOOP;
                
            END IF;

            UT_TRACE.TRACE('FIN GE_BOSubscriber.CustomerUpdate.ProcessAditionalInfo', 5);
            
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSADITIONALINFO;
        
        
        



















        PROCEDURE PROCESSADDIDENTIFICATION
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS
            NLADDIDENTIFICATION     DBMS_XMLDOM.DOMNODELIST;
            NDADDIDENTIFICATION     DBMS_XMLDOM.DOMNODE;
            TBIDENTIFICATION       GE_BOSUBSIDENTIFICAT.TYTBIDENTIFICATION;
        BEGIN
            UT_TRACE.TRACE('INICIA GE_BOSubscriber.CustomerUpdate.ProcessAddIdentification', 5);

                
                NLADDIDENTIFICATION := DBMS_XSLPROCESSOR.SELECTNODES(
                                                        DBMS_XMLDOM.MAKENODE( XMLDOC ),
                                                        '/CUSTOMER/ADD_IDENTIFICATIONS/ADDITIONAL_IDENT' );

                IF( DBMS_XMLDOM.GETLENGTH( NLADDIDENTIFICATION ) > 0 )THEN

                    FOR NUINDEX IN 0..( DBMS_XMLDOM.GETLENGTH( NLADDIDENTIFICATION ) - 1) LOOP

                        NDADDIDENTIFICATION := DBMS_XMLDOM.ITEM( NLADDIDENTIFICATION, NUINDEX );

                        TBIDENTIFICATION( NUINDEX ).NUIDENTTYPE         := DBMS_XSLPROCESSOR.VALUEOF( NDADDIDENTIFICATION, 'ADD_IDENT_TYPE_ID' );
                        TBIDENTIFICATION( NUINDEX ).SBIDENTIFICATION    := DBMS_XSLPROCESSOR.VALUEOF( NDADDIDENTIFICATION, 'ADD_IDENTIFICATION' );

                    END LOOP;
                    
                END IF;
                
                
                IF(TBIDENTIFICATION.FIRST IS NOT NULL)THEN
                    GE_BOSUBSIDENTIFICAT.UPDADDIDENTSUBSCRIBER(GNUSUBSCRIBERID,TBIDENTIFICATION);
                END IF;
                
            UT_TRACE.TRACE('FIN GE_BOSubscriber.CustomerUpdate.ProcessAddIdentification', 5);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSADDIDENTIFICATION;
        
        




















        PROCEDURE PROCESSCUSTOMATTRIBUTES
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS
            NLCUSTOMATTRIBUTES      DBMS_XMLDOM.DOMNODELIST;
            NDCUSTOMATTRIBUTES      DBMS_XMLDOM.DOMNODE;
            TBCUSTOMATTRIBUTES      GE_BOQUERYCUSTATTR.TYTBCUSTOMINFO;
            SBTECHNICALNAME         STYTAGNAME;
            SBVALUE                 STYTAGNAME;
        BEGIN
            UT_TRACE.TRACE('INICIA GE_BOSubscriber.CustomerUpdate.ProcessCustomAttributes', 5);

                
                NLCUSTOMATTRIBUTES := DBMS_XSLPROCESSOR.SELECTNODES(
                                                        DBMS_XMLDOM.MAKENODE( XMLDOC ),
                                                        '/CUSTOMER/CUSTOM_ATTRIBUTES/CUSTOM_ATTRIBUTE' );

                IF( DBMS_XMLDOM.GETLENGTH( NLCUSTOMATTRIBUTES ) > 0 )THEN

                    FOR NUINDEX IN 0..( DBMS_XMLDOM.GETLENGTH( NLCUSTOMATTRIBUTES ) - 1) LOOP

                        NDCUSTOMATTRIBUTES  := DBMS_XMLDOM.ITEM( NLCUSTOMATTRIBUTES, NUINDEX );
                        SBTECHNICALNAME     := DBMS_XSLPROCESSOR.VALUEOF( NDCUSTOMATTRIBUTES, 'TECHNICAL_NAME' );
                        SBVALUE             := DBMS_XSLPROCESSOR.VALUEOF( NDCUSTOMATTRIBUTES, 'VALUE' );

                        TBCUSTOMATTRIBUTES(SBTECHNICALNAME) := SBVALUE;

                    END LOOP;

                END IF;
                
                
                IF(TBCUSTOMATTRIBUTES.FIRST IS NOT NULL)THEN
                    
                    IF NOT TBCUSTOMATTRIBUTES.EXISTS(CSBSUBS_CUST_ATTRIB_ID) THEN
                        TBCUSTOMATTRIBUTES(CSBSUBS_CUST_ATTRIB_ID) := GNUSUBSCRIBERID;
                    END IF;
                    
                    GE_BOREGISTERCUSTATTR.VALIDATECUSTOMINFO(CSBCC_SUBS_CUSTOM_ATTRIB ,TBCUSTOMATTRIBUTES);
                    GE_BOREGISTERCUSTATTR.SAVECUSTOMINFO(GNUSUBSCRIBERID, CSBSUBS_CUSTOM_INFO, TBCUSTOMATTRIBUTES);
                END IF;
                
            UT_TRACE.TRACE('FIN GE_BOSubscriber.CustomerUpdate.ProcessCustomAttributes', 5);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                UT_TRACE.TRACE('[CONTROLLED_ERROR] GE_BOSubscriber.CustomerUpdate.ProcessCustomAttributes', 5);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                UT_TRACE.TRACE('[OTHERS] GE_BOSubscriber.CustomerUpdate.ProcessCustomAttributes', 5);
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSCUSTOMATTRIBUTES;
        
        

















        PROCEDURE PROCESSRELATIONSHIPS
        (
            IXMLDOC     IN  DBMS_XMLDOM.DOMDOCUMENT
        )
        IS
            NLRELATIONSHIPS         DBMS_XMLDOM.DOMNODELIST;
            NDRELATIONSHIPS         DBMS_XMLDOM.DOMNODE;
            TBRELATIONSHIPS         DAGE_SUBS_RELATIONSHIP.TYTBGE_SUBS_RELATIONSHIP;
            NUSUBSRELATID           GE_SUBS_RELATIONSHIP.SUBS_RELAT_ID%TYPE;
            SBVALUE                 STYTAGNAME;
        BEGIN
            UT_TRACE.TRACE('BEGIN GE_BOSubscriber.CustomerUpdate.ProcessRelationships', 5);

                
                NLRELATIONSHIPS := DBMS_XSLPROCESSOR.SELECTNODES(
                                                        DBMS_XMLDOM.MAKENODE( XMLDOC ),
                                                        '/CUSTOMER/QUALIFIED_RELATIONSHIPS/QUALIFIED_RELATIONSHIP' );

                IF( DBMS_XMLDOM.GETLENGTH( NLRELATIONSHIPS ) > 0 )THEN

                    FOR NUINDEX IN 0..( DBMS_XMLDOM.GETLENGTH( NLRELATIONSHIPS ) - 1) LOOP

                        NDRELATIONSHIPS   := DBMS_XMLDOM.ITEM( NLRELATIONSHIPS, NUINDEX );
                        NUSUBSRELATID     := DBMS_XSLPROCESSOR.VALUEOF( NDRELATIONSHIPS, 'SUBS_RELATIONSHIP' );

                        TBRELATIONSHIPS(NUINDEX).SUBS_RELAT_ID      := NUSUBSRELATID;
                        TBRELATIONSHIPS(NUINDEX).SUBSCRIBER_ID      := GNUSUBSCRIBERID;
                        TBRELATIONSHIPS(NUINDEX).RELATIONSHIP_ID    := DBMS_XSLPROCESSOR.VALUEOF( NDRELATIONSHIPS, 'RELATED_CUSTOMER' );
                        TBRELATIONSHIPS(NUINDEX).RELAT_TYPE_ID      := DBMS_XSLPROCESSOR.VALUEOF( NDRELATIONSHIPS, 'RELATIONSHIP_TYPE' );
                        TBRELATIONSHIPS(NUINDEX).ACTIVE             := DBMS_XSLPROCESSOR.VALUEOF( NDRELATIONSHIPS, 'ACTIVE' );

                    END LOOP;

                END IF;
                
                
                GE_BOSUBSRELATIONSHIP.SAVERELATIONSHIPS(GNUSUBSCRIBERID, TBRELATIONSHIPS);

            UT_TRACE.TRACE('END GE_BOSubscriber.CustomerUpdate.ProcessRelationships', 5);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                UT_TRACE.TRACE('[CONTROLLED_ERROR] GE_BOSubscriber.CustomerUpdate.ProcessRelationships', 5);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                UT_TRACE.TRACE('[OTHERS] GE_BOSubscriber.CustomerUpdate.ProcessRelationships', 5);
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PROCESSRELATIONSHIPS;
        
        
    BEGIN

        UT_TRACE.TRACE('INICIO ge_bosubscriber.CustomerUpdate', 5);

        
        UT_XMLPARSE.PARSE( ICLCUSTOMERINFO, CSBCUSTOMERUPDATE_XSD, XMLDOC );
        
        
        PROCESSBASICINFO(XMLDOC, ICLCUSTOMERINFO);
        
        
        PROCESSCUSTOMATTRIBUTES(XMLDOC);
        
        
        PROCESSRELATIONSHIPS(XMLDOC);

        
        PROCESSPHONEINFO(XMLDOC);
        
        
        PROCESSMAILINFO(XMLDOC);

        
        PROCESSECONOACTIINFO(XMLDOC);

        
        PROCESSFAMILYHOUSINFO(XMLDOC);

        
        PROCESSREFERENCEINFO(XMLDOC);

        
        PROCESSBUSINESSINFO(XMLDOC);

        
        PROCESSOTHERSERVICES(XMLDOC);

        
        PROCESSADITIONALINFO(XMLDOC);
        
        
        PROCESSADDIDENTIFICATION(XMLDOC);

        UT_TRACE.TRACE('FIN ge_bosubscriber.CustomerUpdate', 5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
            RAISE EX.CONTROLLED_ERROR;
    END CUSTOMERUPDATE;
    
    

























































    PROCEDURE REGISTER
    (
        ICLCUSTOMERINFO         IN  CLOB,
        ONUSUBSCRIBER_ID        OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS
        NUSUBSCRIBER_ID        GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUSUBSCRIBER_TYPE_ID   GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE;
        NUIDENT_TYPE_ID        GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE;
        SBIDENTIFICATION       GE_SUBSCRIBER.IDENTIFICATION%TYPE;
        SBSUBSCRIBER_NAME      GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE;
        SBSUBS_LAST_NAME       GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE;
        NUADDRESSID            AB_ADDRESS.ADDRESS_ID%TYPE;
        NUGEOGRALOCATIONID     AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
        SBADDRESS              AB_ADDRESS.ADDRESS%TYPE;
        SBISURBAN              AB_ADDRESS.IS_URBAN%TYPE;
        NUECONOMICACTIVITYID   GE_SUBS_BUSINES_DATA.ECONOMIC_ACTIVITY_ID%TYPE;
        NUTAXPAYERTYPEID       GE_SUBSCRIBER.TAXPAYER_TYPE%TYPE;
        NULANGUAGEPREFE        GE_SUBSCRIBER.LANGUAGE%TYPE;
        NUPERSONCLASSID        GE_PERSON_CLASS.PERSON_CLASS_ID%TYPE;
        SBPREFIX               GE_SUBSCRIBER.SUBS_PREFIX%TYPE;
        SBSUBSFIRSTNAME        GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE;
        SBSUBSSECONDNAME       GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE;
        SBSUBSFIRSTLASTNAME    GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE;
        SBSUBSSECONDLASTNAME   GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE;
        SBSUFFIX               GE_SUBSCRIBER.SUBS_SUFFIX%TYPE;
        SBSUBSADDNAMEINFO      UT_DATATYPES.STYYESORNO;
        TBIDENTIFICATION       GE_BOSUBSIDENTIFICAT.TYTBIDENTIFICATION;
        TBCUSTOMATTRIBUTES     GE_BOQUERYCUSTATTR.TYTBCUSTOMINFO;
        TBPHONES               TYTBPHONE;
        TBEMAILS               TYTBEMAIL;
        TBRELATIONSHIPS        DAGE_SUBS_RELATIONSHIP.TYTBGE_SUBS_RELATIONSHIP;
        NUINDEX                UT_DATATYPES.STYNUMBERINDEX;

        










































































        PROCEDURE PARSEXML
        (
            ICLCUSTOMERINFO         IN  CLOB,
            ONUSUBSCRIBER_ID        OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
            ONUSUBSCRIBER_TYPE_ID   OUT GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE,
            ONUIDENT_TYPE_ID        OUT GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
            OSBIDENTIFICATION       OUT NOCOPY GE_SUBSCRIBER.IDENTIFICATION%TYPE,
            OSBSUBSCRIBER_NAME      OUT NOCOPY GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
            OSBSUBS_LAST_NAME       OUT NOCOPY GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
            ONUADDRESSID            OUT AB_ADDRESS.ADDRESS_ID%TYPE,
            ONUGEOGRALOCATIONID     OUT AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
            OSBADDRESS              OUT NOCOPY AB_ADDRESS.ADDRESS%TYPE,
            OSBISURBAN              OUT NOCOPY AB_ADDRESS.IS_URBAN%TYPE,
            ONUECONOMICACTIVITYID   OUT GE_SUBS_BUSINES_DATA.ECONOMIC_ACTIVITY_ID%TYPE,
            ONUTAXPAYERTYPEID       OUT GE_SUBSCRIBER.TAXPAYER_TYPE%TYPE,
            ONULANGUAGEPREFE        OUT GE_SUBSCRIBER.LANGUAGE%TYPE,
            OSBPREFIX               OUT NOCOPY GE_SUBSCRIBER.SUBS_PREFIX%TYPE,
            OSBSUBSFIRSTNAME        OUT NOCOPY GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE,
            OSBSUBSSECONDNAME       OUT NOCOPY GE_SUBSCRIBER.SUBS_SECOND_NAME%TYPE,
            OSBSUBSFIRSTLASTNAME    OUT NOCOPY GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE,
            OSBSUBSSECONDLASTNAME   OUT NOCOPY GE_SUBSCRIBER.SUBS_SECOND_LAST_NAME%TYPE,
            OSBSUFFIX               OUT NOCOPY GE_SUBSCRIBER.SUBS_SUFFIX%TYPE,
            OTBIDENTIFICATION       OUT NOCOPY GE_BOSUBSIDENTIFICAT.TYTBIDENTIFICATION,
            OTBCUSTOMATTRIBUTES     OUT NOCOPY GE_BOQUERYCUSTATTR.TYTBCUSTOMINFO,
            OTBPHONES               OUT NOCOPY TYTBPHONE,
            OTBEMAILS               OUT NOCOPY TYTBEMAIL,
            OTBRELATIONSHIPS        OUT NOCOPY DAGE_SUBS_RELATIONSHIP.TYTBGE_SUBS_RELATIONSHIP
        )
        IS
            XMLDOC                  DBMS_XMLDOM.DOMDOCUMENT;

            NLCUSTOMERNODE          DBMS_XMLDOM.DOMNODELIST;
            NDCUSTOMERNODE          DBMS_XMLDOM.DOMNODE;

            NLCUSTOMERADDRESSNODE   DBMS_XMLDOM.DOMNODELIST;
            NDCUSTOMERADDRESSNODE   DBMS_XMLDOM.DOMNODE;

            NLADDIDENTIFICATION     DBMS_XMLDOM.DOMNODELIST;
            NDADDIDENTIFICATION     DBMS_XMLDOM.DOMNODE;

            NLCUSTOMATTRIBUTE       DBMS_XMLDOM.DOMNODELIST;
            NDCUSTOMATTRIBUTE       DBMS_XMLDOM.DOMNODE;
            
            NLRELATIONSHIP          DBMS_XMLDOM.DOMNODELIST;
            NDRELATIONSHIP          DBMS_XMLDOM.DOMNODE;

            SBTECHNICALNAME         STYTAGNAME;
            SBVALUE                 STYTAGNAME;
            
            NURELATEDCUSTOMER       GE_SUBS_RELATIONSHIP.RELATIONSHIP_ID%TYPE;
            NURELAT_TYPE_ID         GE_SUBS_RELATIONSHIP.RELAT_TYPE_ID%TYPE;

            RFPHONES                CONSTANTS.TYREFCURSOR;
            RFEMAILS                CONSTANTS.TYREFCURSOR;
        BEGIN

            UT_TRACE.TRACE('INICIA GE_BOSubscriber.Register.ParseXml', 5);

            
            UT_XMLPARSE.PARSE( ICLCUSTOMERINFO, CSBCUSTOMEREGISTER_XSD , XMLDOC );

            
            
            NLCUSTOMERNODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(XMLDOC),
                                                    '/CUSTOMER' );

            NDCUSTOMERNODE := DBMS_XMLDOM.ITEM( NLCUSTOMERNODE, 0 );

            
            NLCUSTOMERADDRESSNODE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE(XMLDOC),
                                                    '/CUSTOMER/ADDRESS_INFO' );

            IF ( DBMS_XMLDOM.GETLENGTH( NLCUSTOMERADDRESSNODE ) >  0 ) THEN
                NDCUSTOMERADDRESSNODE := DBMS_XMLDOM.ITEM(NLCUSTOMERADDRESSNODE,0);
            END IF;

            
            ONUSUBSCRIBER_ID :=
                TO_NUMBER(DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE,'SUBSCRIBER_ID'));
            ONUSUBSCRIBER_TYPE_ID :=
                TO_NUMBER(DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE,'SUBSCRIBER_TYPE_ID'));
            ONUIDENT_TYPE_ID :=
                TO_NUMBER(DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE,'IDENT_TYPE_ID'));
            OSBIDENTIFICATION :=
                TRIM(DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE,'IDENTIFICATION'));
            OSBSUBSCRIBER_NAME := DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE,'NAME');
            OSBSUBS_LAST_NAME :=
                DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE,'LAST_NAME');
            OSBPREFIX             := DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE, 'PREFIX');
            OSBSUBSFIRSTNAME      := DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE, 'FIRST_NAME');
            OSBSUBSSECONDNAME     := DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE, 'SECOND_NAME');
            OSBSUBSFIRSTLASTNAME  := DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE, 'FIRST_LAST_NAME');
            OSBSUBSSECONDLASTNAME := DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE, 'SECOND_LAST_NAME');
            OSBSUFFIX             := DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE, 'SUFFIX');

            OPEN RFPHONES FOR
                SELECT *
                FROM XMLTABLE('/CUSTOMER/PHONE_INFO'
                    PASSING
                    XMLTYPE(ICLCUSTOMERINFO)
                COLUMNS
                    NUPHONETYPE         NUMBER          PATH './PHONE_TYPE_ID',
                    NUCOUNTRY           VARCHAR2(6)     PATH './COUNTRY_LOCATION_ID',
                    SBAREACODE          VARCHAR2(10)    PATH './AREA_CODE',
                    SBPHONENUMBER       VARCHAR2(200)   PATH './PHONE_NUMBER'
                ) XMLT;

            FETCH RFPHONES BULK COLLECT INTO OTBPHONES;
            CLOSE RFPHONES;

            OPEN RFEMAILS FOR
                SELECT *
                FROM XMLTABLE('/CUSTOMER/EMAIL_INFO'
                     PASSING
                        XMLTYPE(ICLCUSTOMERINFO)
                     COLUMNS
                        NUEMAILTYPE         NUMBER          PATH './MAIL_TYPE_ID',
                        SBEMAIL             VARCHAR2(1000)  PATH './EMAIL'
                    ) XMLT;

            FETCH RFEMAILS BULK COLLECT INTO OTBEMAILS;
            CLOSE RFEMAILS;

            ONULANGUAGEPREFE := TO_NUMBER(DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE,'LANGUAGE'));

            IF ( DBMS_XMLDOM.GETLENGTH(NLCUSTOMERADDRESSNODE) > 0 ) THEN
                ONUADDRESSID:=
                    TO_NUMBER(DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERADDRESSNODE,'ADDRESS_ID'));
                ONUGEOGRALOCATIONID :=
                    TO_NUMBER(DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERADDRESSNODE,'GEOGRAP_LOCATION_ID'));
                OSBADDRESS :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERADDRESSNODE,'ADDRESS');
                OSBISURBAN :=
                    DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERADDRESSNODE,'IS_URBAN');
            END IF;

            ONUECONOMICACTIVITYID :=
                TO_NUMBER(DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE,'ECONOMIC_ACTIVITY_ID'));
            ONUTAXPAYERTYPEID :=
                TO_NUMBER(DBMS_XSLPROCESSOR.VALUEOF(NDCUSTOMERNODE,'TAXPAYER_TYPE_ID'));


            
            NLADDIDENTIFICATION := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE( XMLDOC ),
                                                    '/CUSTOMER/ADD_IDENTIFICATIONS/ADDITIONAL_IDENT' );

            IF( DBMS_XMLDOM.GETLENGTH( NLADDIDENTIFICATION ) > 0 )THEN

                FOR NUINDEX IN 0..( DBMS_XMLDOM.GETLENGTH( NLADDIDENTIFICATION ) - 1) LOOP

                    NDADDIDENTIFICATION := DBMS_XMLDOM.ITEM( NLADDIDENTIFICATION, NUINDEX );

                    OTBIDENTIFICATION( NUINDEX ).NUIDENTTYPE         := DBMS_XSLPROCESSOR.VALUEOF( NDADDIDENTIFICATION, 'ADD_IDENT_TYPE_ID' );
                    OTBIDENTIFICATION( NUINDEX ).SBIDENTIFICATION    := DBMS_XSLPROCESSOR.VALUEOF( NDADDIDENTIFICATION, 'ADD_IDENTIFICATION' );

                END LOOP;

            END IF;

            
            NLCUSTOMATTRIBUTE := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE( XMLDOC ),
                                                    '/CUSTOMER/CUSTOM_ATTRIBUTES/CUSTOM_ATTRIBUTE' );

            IF( DBMS_XMLDOM.GETLENGTH( NLCUSTOMATTRIBUTE ) > 0 )THEN

                FOR NUINDEX IN 0..( DBMS_XMLDOM.GETLENGTH( NLCUSTOMATTRIBUTE ) - 1) LOOP

                    NDCUSTOMATTRIBUTE   := DBMS_XMLDOM.ITEM( NLCUSTOMATTRIBUTE, NUINDEX );
                    SBTECHNICALNAME     := DBMS_XSLPROCESSOR.VALUEOF( NDCUSTOMATTRIBUTE, 'TECHNICAL_NAME' );
                    SBVALUE             := DBMS_XSLPROCESSOR.VALUEOF( NDCUSTOMATTRIBUTE, 'VALUE' );

                    OTBCUSTOMATTRIBUTES(SBTECHNICALNAME) := SBVALUE;

                END LOOP;

            END IF;
            
            
            NLRELATIONSHIP := DBMS_XSLPROCESSOR.SELECTNODES(
                                                    DBMS_XMLDOM.MAKENODE( XMLDOC ),
                                                    '/CUSTOMER/QUALIFIED_RELATIONSHIPS/QUALIFIED_RELATIONSHIP' );
            
            IF( DBMS_XMLDOM.GETLENGTH( NLRELATIONSHIP ) > 0 )THEN
                FOR NUINDEX IN 0..( DBMS_XMLDOM.GETLENGTH( NLRELATIONSHIP ) - 1) LOOP
                    
                    NDRELATIONSHIP      := DBMS_XMLDOM.ITEM( NLRELATIONSHIP, NUINDEX );
                    NURELATEDCUSTOMER   := DBMS_XSLPROCESSOR.VALUEOF( NDRELATIONSHIP, 'RELATED_CUSTOMER' );
                    NURELAT_TYPE_ID     := DBMS_XSLPROCESSOR.VALUEOF( NDRELATIONSHIP, 'RELATIONSHIP_TYPE' );

                    OTBRELATIONSHIPS(NUINDEX).RELATIONSHIP_ID   := NURELATEDCUSTOMER;
                    OTBRELATIONSHIPS(NUINDEX).RELAT_TYPE_ID     := NURELAT_TYPE_ID;
                    
                END LOOP;

            END IF;

            
            CC_BOVALRECORDSACTIVE.VALRECORDSACTIVES
            (
                INUSUBSCRIBERTYPEID   => ONUSUBSCRIBER_TYPE_ID, 
                INUGEOGRALOCATIONID   => ONUGEOGRALOCATIONID,   
                INUECONOMICACTIVITYID => ONUECONOMICACTIVITYID, 
                INUTAXPAYERTYPEID     => ONUTAXPAYERTYPEID,     
                INULANGUAGEPREFE      => ONULANGUAGEPREFE       
            );

            UT_TRACE.TRACE('TERMINA GE_BOSubscriber.Register.ParseXml', 5);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                IF RFPHONES%ISOPEN THEN
                   CLOSE RFPHONES;
                END IF;
                IF RFEMAILS%ISOPEN THEN
                   CLOSE RFEMAILS;
                END IF;
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                IF RFPHONES%ISOPEN THEN
                   CLOSE RFPHONES;
                END IF;
                IF RFEMAILS%ISOPEN THEN
                   CLOSE RFEMAILS;
                END IF;
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PARSEXML;
        
    BEGIN
        UT_TRACE.TRACE('INICIA GE_BOSubscriber.Register', 5);

        SBSUBSADDNAMEINFO := GE_BOPARAMETER.FSBGET(CC_BOSUBSCRIBCONSTANTS.CSBSUBS_ADD_NAME_INFO);

        
        PARSEXML
        (
            ICLCUSTOMERINFO,
            NUSUBSCRIBER_ID,
            NUSUBSCRIBER_TYPE_ID,
            NUIDENT_TYPE_ID,
            SBIDENTIFICATION,
            SBSUBSCRIBER_NAME,
            SBSUBS_LAST_NAME,
            NUADDRESSID,
            NUGEOGRALOCATIONID,
            SBADDRESS,
            SBISURBAN,
            NUECONOMICACTIVITYID,
            NUTAXPAYERTYPEID,
            NULANGUAGEPREFE,
            SBPREFIX,
            SBSUBSFIRSTNAME,
            SBSUBSSECONDNAME,
            SBSUBSFIRSTLASTNAME,
            SBSUBSSECONDLASTNAME,
            SBSUFFIX,
            TBIDENTIFICATION,
            TBCUSTOMATTRIBUTES,
            TBPHONES,
            TBEMAILS,
            TBRELATIONSHIPS
        );

        NUPERSONCLASSID := DAGE_IDENTIFICA_TYPE.FNUGETPERSON_CLASS_ID(NUSUBSCRIBER_TYPE_ID);
        



        IF ((NUPERSONCLASSID != CC_BOSUBSCRIBCONSTANTS.CNULEGALPERSONID) AND (SBSUBSADDNAMEINFO = GE_BOCONSTANTS.CSBYES)) THEN
            IF ((SBSUBSFIRSTNAME IS NULL) OR (SBSUBSFIRSTLASTNAME IS NULL)) THEN
                ERRORS.SETERROR(CNUADITIONALINFORREQUIRED);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            SBSUBSCRIBER_NAME := TRIM(SBSUBSFIRSTNAME     || ' ' || SBSUBSSECONDNAME);
            SBSUBS_LAST_NAME  := TRIM(SBSUBSFIRSTLASTNAME || ' ' || SBSUBSSECONDLASTNAME);
        ELSE
            IF (SBSUBSCRIBER_NAME IS NULL) THEN
                ERRORS.SETERROR(CSBREQUIEREDINFO);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            SBPREFIX             := NULL;
            SBSUBSFIRSTNAME      := NULL;
            SBSUBSSECONDNAME     := NULL;
            SBSUBSFIRSTLASTNAME  := NULL;
            SBSUBSSECONDLASTNAME := NULL;
            SBSUFFIX             := NULL;
        END IF;

        
        GE_BOREGISTERCUSTATTR.VALIDATECUSTOMINFO(CSBCC_SUBS_CUSTOM_ATTRIB, TBCUSTOMATTRIBUTES);

        
        GE_BOSUBSCRIBER.INSERTADDRESS
                        (
                            NUADDRESSID,
                            NUGEOGRALOCATIONID,
                            SBADDRESS,
                            SBISURBAN
                        );

        
        GE_BOSUBSCRIBER.REGISTER
                        (
                            NUSUBSCRIBER_ID,
                            NUIDENT_TYPE_ID,
                            SBIDENTIFICATION,
                            NULL,
                            NUSUBSCRIBER_TYPE_ID,
                            SBADDRESS,
                            NULL,
                            NULL,
                            SBSUBSCRIBER_NAME,
                            SBSUBS_LAST_NAME,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            1,
                            TRUE,
                            NUADDRESSID,
                            NULL,
                            NULL,
                            NULL,
                            NUECONOMICACTIVITYID,
                            NUTAXPAYERTYPEID,
                            NULANGUAGEPREFE,
                            SBPREFIX,
                            SBSUBSFIRSTNAME,
                            SBSUBSSECONDNAME,
                            SBSUBSFIRSTLASTNAME,
                            SBSUBSSECONDLASTNAME,
                            SBSUFFIX
                        );

        
        NUINDEX := TBPHONES.FIRST;

        WHILE (NUINDEX IS NOT NULL) LOOP
            CC_BOSUBSCRIBER.SETCUSTPHONEDATA(
                                                NUSUBSCRIBER_ID,
                                                NULL,
                                                NULL,
                                                TBPHONES(NUINDEX).NUPHONETYPE,
                                                CC_BOSUBSPHONEREGIS.FSBPREFIXBYCOUNTRYID(TBPHONES(NUINDEX).NUCOUNTRY),
                                                TBPHONES(NUINDEX).SBAREACODE,
                                                TBPHONES(NUINDEX).SBPHONENUMBER,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NULL
                                             );

            NUINDEX := TBPHONES.NEXT(NUINDEX);
        END LOOP;

        
        NUINDEX := TBEMAILS.FIRST;

        WHILE (NUINDEX IS NOT NULL) LOOP
            CC_BOSUBSEMAIL.INSSUBSEMAIL(
                                            NUSUBSCRIBER_ID,
                                            TBEMAILS(NUINDEX).SBEMAIL,
                                            TBEMAILS(NUINDEX).NUEMAILTYPE,
                                            NULL
                                        );

            NUINDEX := TBEMAILS.NEXT(NUINDEX);
        END LOOP;

        
        IF(TBIDENTIFICATION.FIRST IS NOT NULL) THEN
            GE_BOSUBSIDENTIFICAT.INSADDIDENTIFICATION(NUSUBSCRIBER_ID,TBIDENTIFICATION);
        END IF;

        
        IF(TBCUSTOMATTRIBUTES.FIRST IS NOT NULL) THEN
            
            TBCUSTOMATTRIBUTES(CSBSUBS_CUST_ATTRIB_ID) := NUSUBSCRIBER_ID;
            
            GE_BOREGISTERCUSTATTR.SAVECUSTOMINFO(NUSUBSCRIBER_ID, CSBSUBS_CUSTOM_INFO, TBCUSTOMATTRIBUTES);

        END IF;
        
        NUINDEX := TBRELATIONSHIPS.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            TBRELATIONSHIPS(NUINDEX).SUBSCRIBER_ID := NUSUBSCRIBER_ID;
            GE_BOSUBSRELATIONSHIP.CREATERELATIONSHIP(TBRELATIONSHIPS(NUINDEX));
            NUINDEX := TBRELATIONSHIPS.NEXT(NUINDEX);
        END LOOP;

        ONUSUBSCRIBER_ID := NUSUBSCRIBER_ID;

        
        IF GE_BOPARAMETER.FSBGET(CSBCC_VALIDATE_CPNI) = GE_BOCONSTANTS.CSBYES THEN
            
            GE_BOSUBSCRIBER.GENEVERICODEANDNOTIF(ONUSUBSCRIBER_ID);
        END IF;

        UT_TRACE.TRACE('Cliente registrado ['||NUSUBSCRIBER_ID||']', 5);

        UT_TRACE.TRACE('TERMINA GE_BOSubscriber.Register', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
            RAISE EX.CONTROLLED_ERROR;
    END REGISTER;
    
    























    PROCEDURE INSERTADDRESS
    (
        IONUADDRESSID           IN OUT  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUGEOGRALOCATIONID     IN      AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS              IN      AB_ADDRESS.ADDRESS%TYPE,
        ISBISURBAN              IN      AB_ADDRESS.IS_URBAN%TYPE
    )
    IS
        SBADDRESS_PARSED    AB_ADDRESS.ADDRESS_PARSED%TYPE;
        SBSUCCESSMESSAGE    STYMAXLENGTH;
        NUERRORCODE         STYNUMBER;
        SBERRORMESSAGE      STYMAXLENGTH;
    BEGIN
        UT_TRACE.TRACE('INICIA GE_BOSubscriber.InsertAddress', 5);
        UT_TRACE.TRACE('address_id: '||IONUADDRESSID, 5);
        UT_TRACE.TRACE('geograp_location_id: '||INUGEOGRALOCATIONID, 5);
        UT_TRACE.TRACE('address: '||ISBADDRESS, 5);
        UT_TRACE.TRACE('is_urban: '||ISBISURBAN, 5);

        IF(INUGEOGRALOCATIONID IS NOT NULL)THEN
            DAGE_GEOGRA_LOCATION.ACCKEY(INUGEOGRALOCATIONID);
        END IF;

        
        IF (IONUADDRESSID IS NOT NULL) THEN
              DAAB_ADDRESS.ACCKEY(IONUADDRESSID);
        ELSE

          IF (INUGEOGRALOCATIONID IS NOT NULL OR
            ISBADDRESS IS NOT NULL OR
            ISBISURBAN IS NOT NULL ) THEN

            
            PR_BOVALIDATE.VALIDATEDATAADDRESS(IONUADDRESSID,
                                              INUGEOGRALOCATIONID,
                                              ISBADDRESS,
                                              ISBISURBAN);

            
            AB_BSADDRESSPARSER.INSERTADDRESSONNOTFOUND(
                  INUGEOGRALOCATIONID,
                  ISBADDRESS,
                  IONUADDRESSID,
                  SBADDRESS_PARSED,
                  SBSUCCESSMESSAGE,
                  NUERRORCODE,
                  SBERRORMESSAGE,
                  NULL,
                  ISBISURBAN
              );

              
              IF ( NOT ( NUERRORCODE = MO_BOCONSTANTS.CNUOK ) ) THEN
              
                GE_BOERRORS.SETERRORCODEARGUMENT(
                    MO_BOCONSTERROR.CNUERRCALLSERVICE,
                    'AB_BSAddressParser.InsertAddressOnNotFound'||'|'||
                    TO_CHAR(NUERRORCODE)||' - '||SBERRORMESSAGE);

              END IF;
              
          END IF;
          
        END IF;

        UT_TRACE.TRACE('Direcci�n registrada ['||IONUADDRESSID||']', 5);

        UT_TRACE.TRACE('TERMINA GE_BOSubscriber.InsertAddress', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSERTADDRESS;

    
















    FUNCTION FNUGETSUBSCRIBERTYPE
    (
        INUSUBSCRIBER   IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE
    IS
    BEGIN

        UT_TRACE.TRACE( 'GE_BOSubscriber.fnuGetSubscriberType', 3 );
        
        RETURN DAGE_SUBSCRIBER.FNUGETSUBSCRIBER_TYPE_ID( INUSUBSCRIBER );
    
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETSUBSCRIBERTYPE;
    
    















    PROCEDURE SETTAXPAYERAUTHO
    (
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUTAXPAYERID       IN GE_SUBSCRIBER.TAXPAYER_TYPE%TYPE,
        INUAUTHOID          IN GE_SUBSCRIBER.AUTHORIZATION_TYPE%TYPE,
        INUPACKAGEID        IN GE_DATA_CHANGE_LOG.PACKAGE_ID%TYPE
    )
    IS
        
        DTLASTUPDATE       GE_SUBS_GENERAL_DATA.LAST_UPDATE%TYPE DEFAULT UT_DATE.FDTSYSDATE;

        
        BOSUBSUPDATED       STYBOOL := TRUE;

        
        RCNEWSUBSCRIBER     DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;

        
        RCORISUBSCRIBER     DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;

    BEGIN
        UT_TRACE.TRACE('INICIA GE_BOSubscriber.SetTaxpayerAutho', 5);

        UT_TRACE.TRACE('subscriber_id: '||INUSUBSCRIBERID, 5);
        UT_TRACE.TRACE('taxpayer_type: '||INUSUBSCRIBERID, 5);
        UT_TRACE.TRACE('authorization_type: '||INUSUBSCRIBERID, 5);
        UT_TRACE.TRACE('package_id: '||INUSUBSCRIBERID, 5);

        IF  (DAGE_SUBSCRIBER.FBLEXIST(INUSUBSCRIBERID)) THEN

            
            RCORISUBSCRIBER                     := DAGE_SUBSCRIBER.FRCGETRECORD(INUSUBSCRIBERID);

            RCNEWSUBSCRIBER                         := RCORISUBSCRIBER;
            RCNEWSUBSCRIBER.TAXPAYER_TYPE           := INUTAXPAYERID;
            RCNEWSUBSCRIBER.AUTHORIZATION_TYPE      := INUAUTHOID;

            
            DAGE_SUBSCRIBER.UPDRECORD(RCNEWSUBSCRIBER);

			
            DAGE_SUBS_GENERAL_DATA.UPDLAST_UPDATE(RCNEWSUBSCRIBER.SUBSCRIBER_ID, DTLASTUPDATE);

            
            CC_BOSUBSCRIBERLOG.INSSUBSCRIBERLOG(RCORISUBSCRIBER, RCNEWSUBSCRIBER, INUPACKAGEID);

        END IF;

        UT_TRACE.TRACE('TERMINA GE_BOSubscriber.SetTaxpayerAutho', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETTAXPAYERAUTHO;
    
    















    PROCEDURE GETFIELDSTOVALID
    (
        OTBFIELDSTOVALID        OUT NOCOPY TYTBFIELDTOVALID
    )
    IS
        
        RCFIELDTOVALID          TYRCFIELDTOVALID;

        
        SBGE_SUBSCRIBER         STYSERVNAME := 'GE_SUBSCRIBER';
        
        SBIDENTIFICATION        STYSERVNAME := 'IDENTIFICATION';
        SBSUBSCRIBER_NAME       STYSERVNAME := 'SUBSCRIBER_NAME';
        SBSUBS_LAST_NAME        STYSERVNAME := 'SUBS_LAST_NAME';
        SBADDRESS               STYSERVNAME := 'ADDRESS_ID';
        SBPHONE                 STYSERVNAME := 'PHONE';
        SBE_MAIL                STYSERVNAME := 'E_MAIL';

        
        SBENTITY_GE_SUBS_SOC    STYSERVNAME := 'GE_SUBS_SOCIAL_PROF';
        
        SBUSER_NAME             STYSERVNAME := 'USER_NAME';

        
        SBENTITY_GE_SUBS_PHONE  STYSERVNAME := 'GE_SUBS_PHONE';
        
        SBFULL_PHONE_NUMBER     STYSERVNAME := 'FULL_PHONE_NUMBER';

        
        SBGE_SUBS_EMAIL         STYSERVNAME := 'GE_SUBS_EMAIL';
        
        NUIDX    NUMBER;
    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.GetFieldsToValid', 3);

        
        
        RCFIELDTOVALID.SBENTITYNAME       := SBGE_SUBSCRIBER;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBSUBSCRIBER_NAME;

        OTBFIELDSTOVALID(SBGE_SUBSCRIBER||'@'||SBSUBSCRIBER_NAME)    := RCFIELDTOVALID;

        
        RCFIELDTOVALID.SBENTITYNAME       := SBGE_SUBSCRIBER;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBSUBS_LAST_NAME;

        OTBFIELDSTOVALID(SBGE_SUBSCRIBER||'@'||SBSUBS_LAST_NAME)    := RCFIELDTOVALID;

        
        RCFIELDTOVALID.SBENTITYNAME       := SBGE_SUBSCRIBER;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBIDENTIFICATION;

        OTBFIELDSTOVALID(SBGE_SUBSCRIBER||'@'||SBIDENTIFICATION)    := RCFIELDTOVALID;

        
        RCFIELDTOVALID.SBENTITYNAME       := SBGE_SUBSCRIBER;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBADDRESS;

        OTBFIELDSTOVALID(SBGE_SUBSCRIBER||'@'||SBADDRESS)    := RCFIELDTOVALID;

        
        RCFIELDTOVALID.SBENTITYNAME       := SBGE_SUBSCRIBER;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBPHONE;

        OTBFIELDSTOVALID(SBGE_SUBSCRIBER||'@'||SBPHONE)    := RCFIELDTOVALID;

        
        RCFIELDTOVALID.SBENTITYNAME       := SBGE_SUBSCRIBER;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBE_MAIL;

        OTBFIELDSTOVALID(SBGE_SUBSCRIBER||'@'||SBE_MAIL)    := RCFIELDTOVALID;

        
        
        RCFIELDTOVALID.SBENTITYNAME       := SBENTITY_GE_SUBS_PHONE;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBPHONE;

        OTBFIELDSTOVALID(SBENTITY_GE_SUBS_PHONE||'@'||SBPHONE)   := RCFIELDTOVALID;

        
        RCFIELDTOVALID.SBENTITYNAME       := SBGE_SUBS_EMAIL;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBE_MAIL;

        OTBFIELDSTOVALID(SBGE_SUBS_EMAIL||'@'||SBE_MAIL)   := RCFIELDTOVALID;

        
        RCFIELDTOVALID.SBENTITYNAME       := SBENTITY_GE_SUBS_PHONE;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBFULL_PHONE_NUMBER;

        OTBFIELDSTOVALID(SBENTITY_GE_SUBS_PHONE||'@'||SBFULL_PHONE_NUMBER)   := RCFIELDTOVALID;

        
        RCFIELDTOVALID.SBENTITYNAME       := SBENTITY_GE_SUBS_SOC;
        RCFIELDTOVALID.SBATTRIBUTENAME    := SBUSER_NAME;

        OTBFIELDSTOVALID(SBENTITY_GE_SUBS_SOC||'@'||SBUSER_NAME)   := RCFIELDTOVALID;

        UT_TRACE.TRACE('END GE_BOSubscriber.GetFieldsToValid', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.GetFieldsToValid', 3);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.GetFieldsToValid', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETFIELDSTOVALID;

    



















    FUNCTION FBLVALIDFIELD
    (
        ISBATTRIBNAME       IN      STYSERVNAME,
        ISBENTITYNAME       IN      STYSERVNAME,
        ITBFIELDSTOVALID    IN      TYTBFIELDTOVALID
    )
    RETURN UT_DATATYPES.STYBOOLEAN
    IS
        
        NUIDX    NUMBER;
        
        SBACCCESKEY     STYMAXLENGTH;
        
        SBATTRNAME      STYSERVNAME;
        SBENTITYNAME    STYSERVNAME;
        
    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.fblValidField', 3); 
        UT_TRACE.TRACE('isbAttribName:'||ISBATTRIBNAME,11);
        UT_TRACE.TRACE('isbEntityName:'||ISBENTITYNAME,11);

        SBACCCESKEY := ISBENTITYNAME||'@'||ISBATTRIBNAME;
        UT_TRACE.TRACE('sbAcccesKey:'||SBACCCESKEY,11);
        
        IF( ITBFIELDSTOVALID.EXISTS(SBACCCESKEY)) THEN

            UT_TRACE.TRACE('END GE_BOSubscriber.fblValidField Y', 3);
            RETURN TRUE;
        END IF;
        
        UT_TRACE.TRACE('END GE_BOSubscriber.fblValidField F', 3);
        
        RETURN FALSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.fblValidField', 3);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.fblValidField', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLVALIDFIELD;
    
    
















    PROCEDURE INITCHANGEPACKAGE
    (
        INUPACKAGEID   IN   MO_PACKAGES.PACKAGE_ID%TYPE DEFAULT NULL
    )
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.InitChangePackage ', 3);
        
        GNUPACKAGEID := INUPACKAGEID;

        UT_TRACE.TRACE('END GE_BOSubscriber.InitChangePackage ', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.InitChangePackage ', 3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.InitChangePackage ', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INITCHANGEPACKAGE;
    
    
    






















    PROCEDURE GETCHANGEDATTRIBUTES
    (
        INUPACKAGEID      IN                MO_PACKAGES.PACKAGE_ID%TYPE,
        OTBATTRIBUTES         OUT NOCOPY    TYTBFIELDS
    )
    IS
        
        TBFIELDTOVALID          TYTBFIELDTOVALID;

        
        TBCHANGES               GE_BCSUBSCRIBER.TYTBCHANGES;
        NUCHANGES               NUMBER;

        
        NUINDEXATTR             NUMBER;

        
        SBATTRIBNAME            UT_DATATYPES.STYMAXVARCHAR;
        SBENTITYATTR            UT_DATATYPES.STYMAXVARCHAR;

        
        SBADDRESS               STYSERVNAME := 'ADDRESS_ID';

        SUPPORTTABLE            GE_TYTBSTRING;
        NUPROCESSRECORD         NUMBER;

    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.GetChangedAttributes ', 3);

        IF(INUPACKAGEID IS NOT NULL ) THEN

            IF  NOT INUPACKAGEID = PKCONSTANTE.NULLNUM THEN
                GNUPACKAGEID := INUPACKAGEID;
            END IF;

            UT_TRACE.TRACE('inuPackageId:'||GNUPACKAGEID,11);
            
            GETFIELDSTOVALID(TBFIELDTOVALID);

            
            GE_BCSUBSCRIBER.GETCHANGELOGBYPACKAGE(GNUPACKAGEID, TBCHANGES);

            UT_TRACE.TRACE('tbChanges.count:'||TBCHANGES.COUNT,11);

            
            NUCHANGES := TBCHANGES.FIRST;
            NUINDEXATTR := 1;
            UT_TRACE.TRACE('nuIndexAttr:'||NUINDEXATTR,11);
            LOOP
                EXIT WHEN NUCHANGES IS NULL;
                
                SBATTRIBNAME    :=  TBCHANGES(NUCHANGES).ATTRIBUTE_NAME;
                SBENTITYATTR    :=  TBCHANGES(NUCHANGES).ENTITY_NAME;
                UT_TRACE.TRACE('tbChanges(nuChanges).ATTRIBUTE_NAME:'||TBCHANGES(NUCHANGES).ATTRIBUTE_NAME,11);
                UT_TRACE.TRACE('tbChanges(nuChanges).ENTITY_NAME:'||TBCHANGES(NUCHANGES).ENTITY_NAME,11);

                
                IF FBLVALIDFIELD(SBATTRIBNAME,SBENTITYATTR, TBFIELDTOVALID) THEN
                    UT_TRACE.TRACE('Validar campo:'||SBATTRIBNAME,11);
                    
                    
                    IF (INUPACKAGEID = PKCONSTANTE.NULLNUM) THEN
                        OTBATTRIBUTES(NUINDEXATTR).SBATTRIBUTENAME := TBCHANGES(NUCHANGES).ENTITY_NAME|| GE_BOCONSTANTS.CSBEQUAL
                                                                    ||TBCHANGES(NUCHANGES).ATTRIBUTE_NAME;
                    ELSE
                        OTBATTRIBUTES(NUINDEXATTR).SBATTRIBUTENAME := TBCHANGES(NUCHANGES).ATTRIBUTE_NAME;
                    END IF;

                    
                    IF( OTBATTRIBUTES(NUINDEXATTR).SBATTRIBUTENAME = SBADDRESS ) THEN
                        
                        IF( TBCHANGES(NUCHANGES).NEW_VALUE_DESC IS NULL AND TBCHANGES(NUCHANGES).NEW_VALUE IS NOT NULL) THEN
                            
                            OTBATTRIBUTES(NUINDEXATTR).SBNEWVALUE      := DAAB_ADDRESS.FSBGETADDRESS( TBCHANGES(NUCHANGES).NEW_VALUE );
                        ELSE
                            
                            OTBATTRIBUTES(NUINDEXATTR).SBNEWVALUE      := TBCHANGES(NUCHANGES).NEW_VALUE_DESC;
                        END IF;
                        
                        IF( TBCHANGES(NUCHANGES).PREVIOUS_VALUE_DESC IS NULL AND TBCHANGES(NUCHANGES).PREVIOUS_VALUE IS NOT NULL ) THEN
                            
                            OTBATTRIBUTES(NUINDEXATTR).SBOLDVALUE      := DAAB_ADDRESS.FSBGETADDRESS( TBCHANGES(NUCHANGES).PREVIOUS_VALUE );
                        ELSE
                            
                            OTBATTRIBUTES(NUINDEXATTR).SBOLDVALUE      := TBCHANGES(NUCHANGES).PREVIOUS_VALUE_DESC;
                        END IF;
                    ELSE
                        
                        OTBATTRIBUTES(NUINDEXATTR).SBNEWVALUE      := TBCHANGES(NUCHANGES).NEW_VALUE;
                        
                        OTBATTRIBUTES(NUINDEXATTR).SBOLDVALUE      := TBCHANGES(NUCHANGES).PREVIOUS_VALUE;
                    END IF;

                    NUINDEXATTR := NUINDEXATTR + 1;
                END IF;

                NUCHANGES := TBCHANGES.NEXT(NUCHANGES);
            END LOOP;
        END IF;

        UT_TRACE.TRACE('END GE_BOSubscriber.GetChangedAttributes ', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.GetChangedAttributes ', 3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.GetChangedAttributes ', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCHANGEDATTRIBUTES;
    

    























    PROCEDURE CHANGESUBSDDATA
    (
        ORFFIELDSVALUE      OUT NOCOPY CONSTANTS.TYREFCURSOR
    )
    IS
         
        TBATTRIBUTES            TYTBFIELDS;
        
        
        SBENTITYNAME            UT_DATATYPES.STYMAXVARCHAR;
        SBATTRIBNAME            UT_DATATYPES.STYMAXVARCHAR;
        NUATTRIBUTE             GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE;

        SUPPORTTABLE            GE_TYTBSTRING;
        NUPROCESSRECORD         BINARY_INTEGER;
        NUPOSITION              BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.ChangeSubsdData ', 3);

        

        GETCHANGEDATTRIBUTES(PKCONSTANTE.NULLNUM, TBATTRIBUTES);

        IF  TBATTRIBUTES.COUNT > 0 THEN
        
            
            SUPPORTTABLE    := GE_TYTBSTRING();
            NUPROCESSRECORD := TBATTRIBUTES.FIRST;
            LOOP
                EXIT WHEN(NUPROCESSRECORD IS NULL);
                
                SUPPORTTABLE.EXTEND(1);
                
                SBATTRIBNAME := TBATTRIBUTES(NUPROCESSRECORD).SBATTRIBUTENAME;
                
                NUPOSITION   := INSTR(SBATTRIBNAME, GE_BOCONSTANTS.CSBEQUAL, 1);
                
                SBENTITYNAME := SUBSTR(SBATTRIBNAME,1,NUPOSITION-1);
                
                SBATTRIBNAME := SUBSTR(SBATTRIBNAME,NUPOSITION+1,LENGTH(SBATTRIBNAME));
                
                GE_BOENTITYATTRIBUTES.GETENTATTIDBYENTANDATTNAME(
                                                                    SBENTITYNAME,
                                                                    SBATTRIBNAME,
                                                                    NUATTRIBUTE
                                                                );
                
                SBATTRIBNAME := DAGE_ENTITY_ATTRIBUTES.FSBGETDISPLAY_NAME(NUATTRIBUTE);
                
                SUPPORTTABLE(NUPROCESSRECORD) :=
                                         SBATTRIBNAME                                     || ': |' ||
                                         TBATTRIBUTES(NUPROCESSRECORD).SBNEWVALUE         || '| ' ||
                                         TBATTRIBUTES(NUPROCESSRECORD).SBOLDVALUE;

                UT_TRACE.TRACE(          SBATTRIBNAME                                     || '|' ||
                                         TBATTRIBUTES(NUPROCESSRECORD).SBNEWVALUE         || '|' ||
                                         TBATTRIBUTES(NUPROCESSRECORD).SBOLDVALUE,11);

                NUPROCESSRECORD := TBATTRIBUTES.NEXT(NUPROCESSRECORD);
            END LOOP;
        END IF;
        
        
        OPEN ORFFIELDSVALUE FOR
            SELECT UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',1) FIELD,
                       UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',2) NEWVALUE,
                       UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',3) LASTVALUE
            FROM TABLE(CAST(SUPPORTTABLE AS GE_TYTBSTRING ));

        UT_TRACE.TRACE('END GE_BOSubscriber.ChangeSubsdData ', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (ORFFIELDSVALUE%ISOPEN) THEN
                CLOSE ORFFIELDSVALUE;
            END IF;
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.ChangeSubsdData ', 3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (ORFFIELDSVALUE%ISOPEN) THEN
                CLOSE ORFFIELDSVALUE;
            END IF;
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.ChangeSubsdData ', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGESUBSDDATA;
    
    
    
    


























    PROCEDURE VALIDCHANGESUBSDDATA
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ORFFIELDSVALUE      OUT NOCOPY CONSTANTS.TYREFCURSOR
    )
    IS
        
        TBATTRIBUTES            TYTBFIELDS;

        SUPPORTTABLE            GE_TYTBSTRING;
        NUPROCESSRECORD         NUMBER;
    BEGIN

        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.ValidChangeSubsdData inuPackageId:'||INUPACKAGEID, 3);

        GETCHANGEDATTRIBUTES(INUPACKAGEID, TBATTRIBUTES);
        
        IF  TBATTRIBUTES.COUNT > 0 THEN
        
            
            SUPPORTTABLE    := GE_TYTBSTRING();
            NUPROCESSRECORD := TBATTRIBUTES.FIRST;
            LOOP
                EXIT WHEN(NUPROCESSRECORD IS NULL);
                
                SUPPORTTABLE.EXTEND(1);
                SUPPORTTABLE(NUPROCESSRECORD) :=
                                         TBATTRIBUTES(NUPROCESSRECORD).SBATTRIBUTENAME    || '|' ||
                                         TBATTRIBUTES(NUPROCESSRECORD).SBNEWVALUE         || '|' ||
                                         TBATTRIBUTES(NUPROCESSRECORD).SBOLDVALUE;

                UT_TRACE.TRACE(          TBATTRIBUTES(NUPROCESSRECORD).SBATTRIBUTENAME    || '|' ||
                                         TBATTRIBUTES(NUPROCESSRECORD).SBNEWVALUE         || '|' ||
                                         TBATTRIBUTES(NUPROCESSRECORD).SBOLDVALUE,11);

                NUPROCESSRECORD := TBATTRIBUTES.NEXT(NUPROCESSRECORD);
            END LOOP;

            
            OPEN ORFFIELDSVALUE FOR
            SELECT UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',1) FIELD,
                       UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',2) NEWVALUE,
                       UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',3) LASTVALUE
            FROM TABLE(CAST(SUPPORTTABLE AS GE_TYTBSTRING ));

        END IF;
        
        UT_TRACE.TRACE('END GE_BOSubscriber.ValidChangeSubsdData', 3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.ValidChangeSubsdData', 3);
            IF (ORFFIELDSVALUE%ISOPEN) THEN
                CLOSE ORFFIELDSVALUE;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.ValidChangeSubsdData', 3);
            IF (ORFFIELDSVALUE%ISOPEN) THEN
                CLOSE ORFFIELDSVALUE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDCHANGESUBSDDATA;
    
    























    PROCEDURE NOTIFSUBSCHGBYREQUEST
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        
        TBFIELDTOVALID          TYTBFIELDTOVALID;

        
        TBCHANGES               GE_BCSUBSCRIBER.TYTBCHANGES;
        NUCHANGES               NUMBER;

        
        TBATTRIBUTES            TYTBFIELDS;
        NUINDEXATTR             NUMBER;

        
        SBATTRIBNAME            UT_DATATYPES.STYMAXVARCHAR;
        SBENTITYATTR            UT_DATATYPES.STYMAXVARCHAR;

        
        SBNOTIFSENDS            UT_STATEMENT.RTYSTATEMENT;
        SBLOGNOTIF              UT_STATEMENT.RTYSTATEMENT;

        SUPPORTTABLE            GE_TYTBSTRING;
        NUPROCESSRECORD         NUMBER;
        NUSUBSCRIBERID          GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;

        
        SBADDRESS               STYSERVNAME := 'ADDRESS_ID';

    BEGIN

        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.NotifSubsChgByRequest inuPackageId:'||INUPACKAGEID, 3);

        
        GE_BOSUBSCRIBER.INITCHANGEPACKAGE;

        IF(INUPACKAGEID IS NOT NULL ) THEN

            UT_TRACE.TRACE('inuPackageId:'||INUPACKAGEID,11);
            
            GETFIELDSTOVALID(TBFIELDTOVALID);

            
            GE_BCSUBSCRIBER.GETCHANGELOGBYPACKAGE(INUPACKAGEID, TBCHANGES);

            

            UT_TRACE.TRACE('tbChanges.count:'||TBCHANGES.COUNT,11);

            
            IF( TBCHANGES.COUNT > 0) THEN
                NUSUBSCRIBERID :=  TBCHANGES(TBCHANGES.FIRST).EXTERNAL_ID;
            END IF;

            
            NUCHANGES := TBCHANGES.FIRST;
            NUINDEXATTR := 1;
            UT_TRACE.TRACE('nuIndexAttr:'||NUINDEXATTR,11);
            LOOP
                EXIT WHEN NUCHANGES IS NULL;
                
                SBATTRIBNAME    :=  TBCHANGES(NUCHANGES).ATTRIBUTE_NAME;
                SBENTITYATTR    :=  TBCHANGES(NUCHANGES).ENTITY_NAME;
                UT_TRACE.TRACE('tbChanges(nuChanges).ATTRIBUTE_NAME:'||TBCHANGES(NUCHANGES).ATTRIBUTE_NAME,11);
                UT_TRACE.TRACE('tbChanges(nuChanges).ENTITY_NAME:'||TBCHANGES(NUCHANGES).ENTITY_NAME,11);

                
                IF FBLVALIDFIELD(SBATTRIBNAME,SBENTITYATTR, TBFIELDTOVALID) THEN
                    UT_TRACE.TRACE('Validar campo:'||SBATTRIBNAME,11);
                    
                    
                    TBATTRIBUTES(NUINDEXATTR).SBATTRIBUTENAME := TBCHANGES(NUCHANGES).ATTRIBUTE_NAME;

                    NUINDEXATTR := NUINDEXATTR + 1;
                END IF;

                NUCHANGES := TBCHANGES.NEXT(NUCHANGES);
            END LOOP;
            
            IF( TBATTRIBUTES.COUNT > 0 ) THEN
                GE_BOSUBSCRIBER.INITCHANGEPACKAGE(INUPACKAGEID);
                
                GE_BONOTIFICATION.VALANDREGISNOTIF
                (
                    ISBENTITYNAME   =>  CSBGE_SUBSCRIBER,
                    ISBKEYID        =>  TO_CHAR(NUSUBSCRIBERID),
                    INUEVENTID      =>  CNUUSERDATACHANGED,
                    OSBNOTIFSENDS   =>  SBNOTIFSENDS,
                    OSBLOGNOTIF     =>  SBLOGNOTIF
                );
            END IF;

        END IF;


        UT_TRACE.TRACE('END GE_BOSubscriber.NotifSubsChgByRequest', 3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.NotifSubsChgByRequest', 3);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.NotifSubsChgByRequest', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END NOTIFSUBSCHGBYREQUEST;
    

    



















    PROCEDURE VALCOMMERCIALNAME
    (
        INUSUBSCRIBERID IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBTRADENAME    IN  GE_SUBS_BUSINES_DATA.TRADE_NAME%TYPE,
        OSBYERORNOT     OUT UT_DATATYPES.STYYESORNO
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[BEGIN] GE_BOSubscriber.ValCommercialName',5);

        IF(GE_BCSUBSCRIBER.FNUGETSUBSBYTRADENAME(INUSUBSCRIBERID,ISBTRADENAME) IS NOT NULL) THEN
            OSBYERORNOT := GE_BOCONSTANTS.CSBYES;
        ELSE
            OSBYERORNOT := GE_BOCONSTANTS.CSBNO;
        END IF;

        UT_TRACE.TRACE('[END] GE_BOSubscriber.ValCommercialName',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[ERROR] GE_BOSubscriber.ValCommercialName  error : ex.CONTROLLED_ERROR',5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[ERROR] GE_BOSubscriber.ValCommercialName  error : others',5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALCOMMERCIALNAME;
    
    

























    PROCEDURE VALSUBSCRIBERBYINFO
    (
        SBPERSONTYPE        IN  UT_DATATYPES.STYMINVARCHAR,
        INUIDENTTYPEID      IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        INUIDENTIFICATION   IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        ISBSUBSCRIBERNAME   IN  GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME     IN  GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        IDTDATEBIRTH        IN  GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicio: GE_BOSubscriber.ValSubscriberByInfo ['||INUIDENTTYPEID||'] ['||INUIDENTIFICATION||']', 5);

        IF (SBPERSONTYPE = CSBRESIDENTPERSON AND GE_BCSUBSCRIBER.FBLEXISTSUBSCRIBERBYIDENT(TRIM(INUIDENTIFICATION), INUIDENTTYPEID)) THEN

            UT_TRACE.TRACE('Ya existe un cliente registrado con el mismo tipo y n�mero de identificaci�n', 5);
            ERRORS.SETERROR( CNUIDENTIFICATIONEXIST, DAGE_IDENTIFICA_TYPE.FSBGETDESCRIPTION(INUIDENTTYPEID)||'|'||TO_CHAR(INUIDENTIFICATION));
            RAISE EX.CONTROLLED_ERROR;
            
        
        ELSIF (SBPERSONTYPE = CSBRESIDENTPERSON AND GE_BCSUBSCRIBER.FBLEXISTSUBSCRBYNAME( ISBSUBSCRIBERNAME,
                                                                                                    ISBSUBSLASTNAME,
                                                                                                    IDTDATEBIRTH)) THEN

            UT_TRACE.TRACE('Ya existe un cliente registrado con la informaci�n ingresada', 5);
            ERRORS.SETERROR(CNUSUBSCRIBEREXITS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (SBPERSONTYPE = CSBBUSINESSPERSON AND GE_BCSUBSCRIBER.FBLEXISTSUBSCRIBERBYIDENT(TRIM(INUIDENTIFICATION), INUIDENTTYPEID)) THEN

            UT_TRACE.TRACE('Ya existe un cliente registrado con el mismo tipo y n�mero de identificaci�n', 5);
            ERRORS.SETERROR( CNUIDENTIFICATIONEXIST, DAGE_IDENTIFICA_TYPE.FSBGETDESCRIPTION(INUIDENTTYPEID)||'|'||TO_CHAR(INUIDENTIFICATION));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fin: GE_BOSubscriber.ValSubscriberByInfo', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[ERROR] GE_BOSubscriber.ValSubscriberByInfo   error : ex.CONTROLLED_ERROR' ,5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[ERROR] GE_BOSubscriber.ValSubscriberByInfo   error : others' ,5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALSUBSCRIBERBYINFO;

    














































    PROCEDURE VALREQUIREDINFO
    (
        ISBPERSONTYPE         IN  UT_DATATYPES.STYMINVARCHAR,
        ISBSUBSCRIBERNAME     IN  GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME       IN  GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        ISBTRADENAME          IN  GE_SUBS_BUSINES_DATA.TRADE_NAME%TYPE,
        INUIDENTYPEID         IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        INUIDENTIFICATION     IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        ISBPHONE              IN  GE_SUBS_PHONE.FULL_PHONE_NUMBER%TYPE,
        IDTDATEBIRTH          IN  GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE,
        INUPREVIOUSADDRESS    IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUBILLINGADDRESS     IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        ISBSUBSFIRSTNAME      IN  GE_SUBSCRIBER.SUBS_FIRST_NAME%TYPE,
        ISBSUBSFIRSTLASTNAME  IN  GE_SUBSCRIBER.SUBS_FIRST_LAST_NAME%TYPE,
        IBOUPDATECUSTOMER     IN  UT_DATATYPES.STYBOOLEAN DEFAULT FALSE
    )
    IS
        SBSUBSADDNAMEINFO UT_DATATYPES.STYYESORNO;
    BEGIN
    UT_TRACE.TRACE('BEGIN GE_BOSubscriber.ValRequiredInfo', 5);

        UT_TRACE.TRACE('isbPersonType: '         || ISBPERSONTYPE         || CHR(10)||
                       'isbSubscriberName: '     || ISBSUBSCRIBERNAME     || CHR(10)||
                       'isbSubsLastName: '       || ISBSUBSLASTNAME       || CHR(10)||
                       'isbTradeName: '          || ISBTRADENAME          || CHR(10)||
                       'inuIdenTypeId: '         || INUIDENTYPEID         || CHR(10)||
                       'inuIdentification: '     || INUIDENTIFICATION     || CHR(10)||
                       'isbPhone: '              || ISBPHONE              || CHR(10)||
                       'idtDateBirth: '          || IDTDATEBIRTH          || CHR(10)||
                       'inuPreviousAddres: '     || INUPREVIOUSADDRESS    || CHR(10)||
                       'isbSubsFirstName: '      || ISBSUBSFIRSTNAME      || CHR(10)||
                       'isbSubsFirstLastName: '  || ISBSUBSFIRSTLASTNAME  || CHR(10)||
                       'inuBillingAddress: '     || INUBILLINGADDRESS, 5);

        SBSUBSADDNAMEINFO := GE_BOPARAMETER.FSBGET(CC_BOSUBSCRIBCONSTANTS.CSBSUBS_ADD_NAME_INFO);
        
        IF (ISBPERSONTYPE IS NULL) THEN
            UT_TRACE.TRACE('Tipo de persona debe ser requerido', 5);
            ERRORS.SETERROR(CSBREQUIEREDINFO);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        IF ((ISBPERSONTYPE = CSBRESIDENTPERSON) AND (SBSUBSADDNAMEINFO = GE_BOCONSTANTS.CSBYES)) THEN
            IF (IBOUPDATECUSTOMER) THEN
                
                IF
                (
                    (ISBSUBSFIRSTNAME IS NULL) OR (ISBSUBSFIRSTLASTNAME IS NULL)
                    OR (INUIDENTYPEID IS NULL) OR (INUIDENTIFICATION IS NULL)
                    OR (ISBPHONE IS NULL)
                ) THEN
                    UT_TRACE.TRACE('Informaci�n general requerida', 5);
                    ERRORS.SETERROR(CSBREQUIEREDINFO);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            ELSE
                
                IF
                (
                   (ISBSUBSFIRSTNAME IS NULL)      OR (ISBSUBSFIRSTLASTNAME IS NULL) OR (INUIDENTYPEID IS NULL)
                    OR (INUIDENTIFICATION IS NULL) OR (ISBPHONE IS NULL)             OR (INUBILLINGADDRESS IS NULL)
                    OR  (IDTDATEBIRTH IS NULL)     OR (INUPREVIOUSADDRESS IS NULL)
                ) THEN
                    UT_TRACE.TRACE('Informaci�n general requerida', 5);
                    ERRORS.SETERROR(CSBREQUIEREDINFO);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            END IF;
        ELSE
            IF (IBOUPDATECUSTOMER) THEN
                
                IF (ISBSUBSCRIBERNAME IS NULL OR INUIDENTYPEID IS NULL OR INUIDENTIFICATION IS NULL OR ISBPHONE IS NULL) THEN
                    UT_TRACE.TRACE('Informaci�n general requerida', 5);
                    ERRORS.SETERROR(CSBREQUIEREDINFO);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            ELSE
                
                IF (ISBSUBSCRIBERNAME IS NULL OR INUIDENTYPEID IS NULL OR INUIDENTIFICATION IS NULL OR ISBPHONE IS NULL OR INUBILLINGADDRESS IS NULL) THEN
                    UT_TRACE.TRACE('Informaci�n general requerida', 5);
                    ERRORS.SETERROR(CSBREQUIEREDINFO);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            END IF;

            
            IF (ISBPERSONTYPE = CSBRESIDENTPERSON AND (ISBSUBSLASTNAME IS NULL OR IDTDATEBIRTH IS NULL OR INUPREVIOUSADDRESS IS NULL)) THEN
                UT_TRACE.TRACE('Informaci�n residencial requerida', 5);
                ERRORS.SETERROR(CSBREQUIEREDINFO);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

    UT_TRACE.TRACE('END GE_BOSubscriber.ValRequiredInfo', 5);
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                UT_TRACE.TRACE('[ERROR] GE_BOSubscriber.ValRequiredInfo   error : ex.CONTROLLED_ERROR' ,5);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                UT_TRACE.TRACE('[ERROR] GE_BOSubscriber.ValRequiredInfo   error : others' ,5);
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END VALREQUIREDINFO;

    
















    PROCEDURE NOTIFCHANGEVERIFCODE
    (
        INUSUBSCRIBERID        IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS

        
        SBNOTIFSENDS    UT_STATEMENT.RTYSTATEMENT;
        SBLOGNOTIF      UT_STATEMENT.RTYSTATEMENT;
    BEGIN

        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.NotifChangeVerifCode inuSubscriberId:'||INUSUBSCRIBERID, 3);

        
        GE_BOALERTMESSAGEPARAM.VALANDSENDNOTIBYEVENT
        (
            CNUCHANGEVERIFICODE,
            CSBGE_SUBSCRIBER,
            INUSUBSCRIBERID,
            SBNOTIFSENDS,
            SBLOGNOTIF
        );

        UT_TRACE.TRACE('END GE_BOSubscriber.NotifChangeVerifCode', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.NotifChangeVerifCode', 3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.NotifChangeVerifCode', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END NOTIFCHANGEVERIFCODE;
    
    
















    PROCEDURE GENEVERICODEANDNOTIF
    (
        INUSUBSCRIBERID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS
        SBENTITY        GE_ENTITY.DISPLAY_NAME%TYPE := 'GE_SUBS_QUESTIONS';
        SBSEQUENCE      UT_DATATYPES.STYNAME        := 'SEQ_GE_SUBS_QUESTIONS_359124';
        RCSUBSQUESTION  DAGE_SUBS_QUESTIONS.STYGE_SUBS_QUESTIONS;

    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.GeneVeriCodeAndNotif', 5);

        
        RCSUBSQUESTION.QUESTION_ID      := CC_BOSECURITYQUESTIONS.FNUGETQUESTVERIFYCODE();
        
        
        IF  RCSUBSQUESTION.QUESTION_ID IS NOT NULL THEN

            RCSUBSQUESTION.SUBS_QUESTION_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE(SBENTITY, SBSEQUENCE);
            RCSUBSQUESTION.SUBSCRIBER_ID    := INUSUBSCRIBERID;
            RCSUBSQUESTION.ANSWER           := ROUND(DBMS_RANDOM.VALUE(1000, 9999));

            
            DAGE_SUBS_QUESTIONS.INSRECORD(RCSUBSQUESTION);

            
            PKGENERALSERVICES.COMMITTRANSACTION;
            
            
            GE_BOSUBSCRIBER.NOTIFCHANGEVERIFCODE(INUSUBSCRIBERID);
        END IF;

        UT_TRACE.TRACE('END GE_BOSubscriber.GeneVeriCodeAndNotif', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.GeneVeriCodeAndNotif', 5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS GE_BOSubscriber.GeneVeriCodeAndNotif', 5);
            RAISE EX.CONTROLLED_ERROR;
    END GENEVERICODEANDNOTIF;
    
    





















    PROCEDURE VALEQUALCUSTOMER
    (
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ISBSUBSCRIBERNAME   IN  GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ISBSUBSLASTNAME     IN  GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE,
        IDTDATEBIRTH        IN  GE_SUBS_GENERAL_DATA.DATE_BIRTH%TYPE
    )
    IS
    BEGIN
    UT_TRACE.TRACE('BEGIN GE_BOSubscriber.ValEqualCustomer ['||INUSUBSCRIBERID||']['||ISBSUBSCRIBERNAME||']
                                                           ['||ISBSUBSLASTNAME||']['||TO_CHAR(IDTDATEBIRTH)||']', 5);

        IF (GE_BCSUBSCRIBER.FBLEQUALCUSTOMER(INUSUBSCRIBERID,
                                             ISBSUBSCRIBERNAME,
                                             ISBSUBSLASTNAME,
                                             IDTDATEBIRTH)) THEN

            UT_TRACE.TRACE('Ya existe un cliente registrado con la informaci�n ingresada', 5);
            ERRORS.SETERROR(CNUSUBSCRIBEREXITS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    UT_TRACE.TRACE('END GE_BOSubscriber.ValEqualCustomer', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR GE_BOSubscriber.ValEqualCustomer',5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('others GE_BOSubscriber.ValEqualCustomer',5);
            RAISE EX.CONTROLLED_ERROR;
    END VALEQUALCUSTOMER;
    
    















    PROCEDURE WRITEXMLSUBSCRIBER
    (
        ICLCUSTOMERINFO IN  CLOB,
        OCLRESPONSE     OUT CLOB
    )
    IS
        NUSUBSCRIBERID  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        RCDOC           DBMS_XMLDOM.DOMDOCUMENT;
        RCMAINNODE      DBMS_XMLDOM.DOMNODE;
        RCELEMENT1      DBMS_XMLDOM.DOMELEMENT;
    BEGIN
    UT_TRACE.TRACE('BEGIN GE_BOSubscriber.WriteXMLSubscriber',15);
    
        REGISTER(ICLCUSTOMERINFO,NUSUBSCRIBERID);

         
        UT_XMLUTILITIES.NEWXML('1.0', UT_XMLCOMPOSE.FSBGETDATABASECHARSET, RCDOC, RCMAINNODE);

        
        UT_XMLUTILITIES.ADDNODE(RCDOC, RCMAINNODE, 'SUBSCRIBER_ID', NUSUBSCRIBERID, RCELEMENT1, RCMAINNODE);

        DBMS_LOB.CREATETEMPORARY(OCLRESPONSE, TRUE, DBMS_LOB.CALL);
        DBMS_XMLDOM.WRITETOCLOB(RCDOC, OCLRESPONSE);
        DBMS_XMLDOM.FREEDOCUMENT(RCDOC);

    UT_TRACE.TRACE('END GE_BOSubscriber.WriteXMLSubscriber',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            RAISE EX.CONTROLLED_ERROR;
    END WRITEXMLSUBSCRIBER;
    
    


















    PROCEDURE VALIDATEDUPLICATEID
    (
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUIDENTYPEID       IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION   IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN GE_BOSubscriber.ValidateDuplicateID, [inuSubscriberId]: '||INUSUBSCRIBERID||
                                                                ', [inuIdenTypeId]: '||INUIDENTYPEID||
                                                                ', [isbIdentification]: '||ISBIDENTIFICATION, 5);
        IF (GE_BCSUBSCRIBER.FBLEXISTDUPLCUSTOMER(INUSUBSCRIBERID,INUIDENTYPEID,TRIM(ISBIDENTIFICATION)
                                                      )) THEN

            ERRORS.SETERROR( CNUIDENTIFICATIONEXIST, DAGE_IDENTIFICA_TYPE.FSBGETDESCRIPTION(INUIDENTYPEID)||'|'||TO_CHAR(ISBIDENTIFICATION));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('END GE_BOSubscriber.ValidateDuplicateID', 5);
    EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOSubscriber.ValidateDuplicateID', 5);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Others GE_BOSubscriber.ValidateDuplicateID', 5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEDUPLICATEID;

    
END GE_BOSUBSCRIBER;