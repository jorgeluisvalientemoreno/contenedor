PACKAGE ge_boInstanceControl IS




















































































































































    
    
    

    
    
    

    SUBTYPE STYNUINDEX    IS PLS_INTEGER;
    SUBTYPE STYSBINDEX    IS VARCHAR2(2000);
    SUBTYPE STYNUBOOLEAN  IS NUMBER(1);

    SUBTYPE STYSBNAME    IS VARCHAR2(200);
    SUBTYPE STYSBVALUE   IS VARCHAR2(2000);
    SUBTYPE STYSBSQL     IS VARCHAR2(12000);

    TYPE TYRCCONTROL IS RECORD
    (
        NUCONTROLINSTANCE            STYNUINDEX,
        NUGLOBALINSTANCE             STYNUINDEX,
        NUFIRSTINSTANCE              STYNUINDEX,
        NULASTINSTANCE               STYNUINDEX,
        NUCURRENTINSTANCE            STYNUINDEX,
        NUCURRENTENTITY              STYNUINDEX,
        NUCURRENTATTRIBUTE           STYNUINDEX,
        NUMULTISELECTINDEX           STYNUINDEX,
        NUINSTANCESEQUENCE           STYNUINDEX,
        NUENTITYSEQUENCE             STYNUINDEX,
        NUATTRIBUTESEQUENCE          STYNUINDEX,
        NUINSTANCENAMESEQUENCE       STYNUINDEX,
        SBCURRENTINSTANCE            STYSBNAME,
        SBCURRENTGROUP               STYSBNAME,
        SBCURRENTENTITY              STYSBNAME,
        SBCURRENTATTRIBUTE           STYSBNAME,
        BLINITMANAGER                STYNUBOOLEAN,
        BLVALIDATETYPEATTRIBUTE      STYNUBOOLEAN,
        BLVALIDATEREQUIREDATTRIBUTE  STYNUBOOLEAN,
        BLFORMATATTRIBUTE            STYNUBOOLEAN,
        NUDSPLY                      NUMBER(1),
        NUDSPLYMODE                  NUMBER(1),
        NUSELECTMODE                 NUMBER(1),
        NUATTRIBUTENAME              NUMBER(1),
        NUINSERTBEFOREEXPRESSION     NUMBER(10),
        NUINSERTAFTEREXPRESSION      NUMBER(10),
        NUUPDATEBEFOREEXPRESSION     NUMBER(10),
        NUUPDATEAFTEREXPRESSION      NUMBER(10),
        NUDELETEBEFOREEXPRESSION     NUMBER(10),
        NUDELETEAFTEREXPRESSION      NUMBER(10)
    );

    TYPE TYRCINSTANCESTACK IS RECORD
    (
        NUINSTANCE                STYNUINDEX,
        NUFATHER                  STYNUINDEX,
        NUPREVIOUSINSTANCE        STYNUINDEX,
        NUNEXTINSTANCE            STYNUINDEX,
        NUPREVIOUSBROTHERINSTANCE STYNUINDEX,
        NUNEXTBROTHERINSTANCE     STYNUINDEX,
        NUFIRSTCHILDINSTANCE      STYNUINDEX,
        NULASTCHILDINSTANCE       STYNUINDEX,
        NUFIRSTENTITY             STYNUINDEX,
        NULASTENTITY              STYNUINDEX,
        NUFIRSTATTRIBUTE          STYNUINDEX,
        NULASTATTRIBUTE           STYNUINDEX,
        SBINSTANCE                STYSBNAME,
    	SBFATHER                  STYSBNAME,
        NUINSERTBEFOREEXPRESSION  NUMBER(10),
        NUINSERTAFTEREXPRESSION   NUMBER(10),
        NUUPDATEBEFOREEXPRESSION  NUMBER(10),
        NUUPDATEAFTEREXPRESSION   NUMBER(10),
        NUDELETEBEFOREEXPRESSION  NUMBER(10),
        NUDELETEAFTEREXPRESSION   NUMBER(10)
    );

    TYPE TYRCENTITYSTACK IS RECORD
    (
        NUENTITY                  STYNUINDEX,
        NUINSTANCE                STYNUINDEX,
        NUPREVIOUSENTITY          STYNUINDEX,
        NUNEXTENTITY              STYNUINDEX,
        NUFIRSTATTRIBUTE          STYNUINDEX,
        NULASTATTRIBUTE           STYNUINDEX,
        NUCONTROLENTITY           STYNUINDEX,
        NUROWIDINDEX              STYNUINDEX,
        SBINSTANCE                STYSBNAME,
        SBENTITY                  STYSBNAME,
        SBGROUP                   STYSBNAME,
        SBINSERT                  STYSBSQL,
        SBSELECT                  STYSBSQL,
        BLLOADATTRIBUTES          STYNUBOOLEAN,
        BLLOADEXPRESSIONS         STYNUBOOLEAN,
        BLPERSISTENT              STYNUBOOLEAN,
        BLLOADOLDVALUES           STYNUBOOLEAN,
        ININSERTCURSOR            INTEGER,
        NUEVENT                   NUMBER(1),
        NULEVEL                   NUMBER(10),
        NUATTRIBUTESEQUENCE       NUMBER(10),
        NUENTITYID                NUMBER(10),
        NUINSERTBEFOREEXPRESSION  NUMBER(10),
        NUINSERTAFTEREXPRESSION   NUMBER(10),
        NUUPDATEBEFOREEXPRESSION  NUMBER(10),
        NUUPDATEAFTEREXPRESSION   NUMBER(10),
        NUDELETEBEFOREEXPRESSION  NUMBER(10),
        NUDELETEAFTEREXPRESSION   NUMBER(10)
    );

    TYPE TYRCATTRIBUTESTACK IS RECORD
    (
        NUATTRIBUTE                 STYNUINDEX,
        NUINSTANCE                  STYNUINDEX,
        NUENTITY                    STYNUINDEX,
        NUPREVIOUSINSTANCEATTRIBUTE STYNUINDEX,
        NUNEXTINSTANCEATTRIBUTE     STYNUINDEX,
        NUPREVIOUSENTITYATTRIBUTE   STYNUINDEX,
        NUNEXTENTITYATTRIBUTE       STYNUINDEX,
        NUCONTROLATTRIBUTE          STYNUINDEX,
        NUSEQUENCE                  STYNUINDEX,
        SBINSTANCE                  STYSBNAME,
        SBGROUP                     STYSBNAME,
        SBENTITY                    STYSBNAME,
        SBATTRIBUTE                 STYSBNAME,
        SBNEWVALUE                  STYSBVALUE,
        SBOLDVALUE                  STYSBVALUE,
        SBMASK                      VARCHAR2(40),
        BLPERSISTENT                STYNUBOOLEAN,
        BLISKEY                     STYNUBOOLEAN,
        BLISNULL                    STYNUBOOLEAN,
        BLREQUIRED                  STYNUBOOLEAN,
        BLPARAMETERVALUE            STYNUBOOLEAN,
        BLNEWVALUEUPDATE            STYNUBOOLEAN,
        BLBINDATTRIBUTE             STYNUBOOLEAN,
        NUTYPE                      NUMBER(2),
        NUMASKTYPE                  NUMBER(2),
        NULENGTH                    NUMBER(4),
        NUSCALE                     NUMBER(4),
        NUATTRIBUTEID               NUMBER(10),
        NUINITIALIZEEXPRESSION      NUMBER(10),
        NUPROCESSEXPRESSION         NUMBER(10)
    );

    TYPE TYRCINSTANCEHASH IS RECORD
    (
        SBKEY    VARCHAR2(800),
        NUVALUE  STYNUINDEX
    );

    TYPE TYRCENTITYLEVEL IS RECORD
    (
        NUENTITY  STYNUINDEX,
        NULEVEL   NUMBER(10)
    );

    TYPE TYRCINSTANCEHIERARCHY IS RECORD
    (
        NUINSTANCE  STYNUINDEX,
        SBINSTANCE  STYSBNAME,
        NUFATHER    STYNUINDEX,
        SBFATHER    STYSBNAME,
        NULEVEL     STYNUINDEX
    );

    TYPE TYRCMULTISELECTCONTROL IS RECORD
    (
        NUINSTANCE       STYNUINDEX,
        SBINSTANCE       STYSBNAME,
        SBENTITY         STYSBNAME,
        NUCONTROLENTITY  STYNUINDEX
    );

    TYPE TYRCMULTISELECTATTRIBUTE IS RECORD
    (
        SBATTRIBUTE         STYSBNAME,
        NUCONTROLATTRIBUTE  STYNUINDEX,
        NUTYPE              NUMBER(1),
        SBVALUE             STYSBVALUE
    );

    TYPE TYTBSBNAME                 IS TABLE OF STYSBNAME                INDEX BY STYNUINDEX;
    TYPE TYTBSBVALUE                IS TABLE OF STYSBVALUE               INDEX BY STYNUINDEX;

    TYPE TYTBINSTANCESTACK          IS TABLE OF TYRCINSTANCESTACK        INDEX BY STYNUINDEX;
    TYPE TYTBENTITYSTACK            IS TABLE OF TYRCENTITYSTACK          INDEX BY STYNUINDEX;
    TYPE TYTBATTRIBUTESTACK         IS TABLE OF TYRCATTRIBUTESTACK       INDEX BY STYNUINDEX;
    TYPE TYTBINSTANCEHASH           IS TABLE OF TYRCINSTANCEHASH         INDEX BY STYSBINDEX;

    TYPE TYTBENTITYLEVEL            IS TABLE OF TYRCENTITYLEVEL          INDEX BY STYNUINDEX;
    TYPE TYTBINSTANCEHIERARCHY      IS TABLE OF TYRCINSTANCEHIERARCHY    INDEX BY STYNUINDEX;
    TYPE TYTBMULTISELECTATTRIBUTE   IS TABLE OF TYRCMULTISELECTATTRIBUTE INDEX BY STYNUINDEX;

    TYPE TYTBMULTISELECTINDEXENTITY IS TABLE OF STYNUINDEX               INDEX BY STYNUINDEX;

    
    
    

    
    
    

    
    
    



FUNCTION FSBVERSION
RETURN VARCHAR2;



FUNCTION FBLACCKEYINSTANCESTACK
(
    ISBINSTANCE  IN VARCHAR2,
    IONUINSTANCE IN OUT STYNUINDEX
)
RETURN BOOLEAN;

FUNCTION FBLACCKEYENTITYSTACK
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    IONUENTITY  IN OUT STYNUINDEX
)
RETURN BOOLEAN;

FUNCTION FBLACCKEYATTRIBUTESTACK
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2,
    IONUATTRIBUTE IN OUT STYNUINDEX
)
RETURN BOOLEAN;

PROCEDURE ACCKEYINSTANCESTACK
(
    ISBINSTANCE  IN VARCHAR2,
    IONUINSTANCE IN OUT STYNUINDEX
);

PROCEDURE ACCKEYENTITYSTACK
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    IONUENTITY  IN OUT STYNUINDEX
);

PROCEDURE ACCKEYATTRIBUTESTACK
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2,
    IONUATTRIBUTE IN OUT STYNUINDEX
);



PROCEDURE ADDINSTANCESTACK
(
    ISBINSTANCE  IN VARCHAR2,
    ISBFATHER    IN VARCHAR2,
    INUFATHER    IN STYNUINDEX,
    IONUINSTANCE IN OUT STYNUINDEX
);

PROCEDURE ADDENTITYSTACK
(
    INUINSTANCE      IN STYNUINDEX,
    ISBINSTANCE      IN VARCHAR2,
    ISBGROUP         IN VARCHAR2,
    ISBENTITY        IN VARCHAR2,
    INUCONTROLENTITY IN STYNUINDEX,
    IONUENTITY       IN OUT STYNUINDEX
);

PROCEDURE ADDATTRIBUTESTACK
(
    INUINSTANCE       IN STYNUINDEX,
    ISBINSTANCE       IN VARCHAR2,
    ISBGROUP          IN VARCHAR2,
    INUENTITY         IN STYNUINDEX,
    ISBENTITY         IN VARCHAR2,
    IRCATTRIBUTESTACK IN TYRCATTRIBUTESTACK,
    IBLDBDATAMODE     IN STYNUBOOLEAN,
    IONUATTRIBUTE     IN OUT STYNUINDEX
);



FUNCTION FBLVALIDATEDATATYPE
(
    ISBVALUE  IN VARCHAR2,
    INUTYPE   IN NUMBER,
    INULENGTH IN NUMBER,
    INUSCALE  IN NUMBER
)
RETURN BOOLEAN;

PROCEDURE LOADCONTROLATTRIBUTES
(
    ISBENTITY   IN VARCHAR2,
    IONUENTITY  IN OUT STYNUINDEX
);

PROCEDURE VALIDATEINSTANCEMANAGER
(
    IBLVALIDATECURRENTINSTANCE IN BOOLEAN
);



PROCEDURE CREATEINSTANCE
(
    ISBINSTANCE IN VARCHAR2,
    ISBFATHER   IN VARCHAR2 DEFAULT NULL
);

PROCEDURE DESTROYINSTANCE
(
    ISBINSTANCE         IN VARCHAR2,
    IBLHIERARCHYDESTROY IN BOOLEAN DEFAULT FALSE
);

PROCEDURE COPYINSTANCE
(
    ISBINSTANCE  IN VARCHAR2,
    INUINSTANCES IN NUMBER
);

PROCEDURE RESETINSTANCE
(
    ISBINSTANCE IN VARCHAR2
);

PROCEDURE DESTROYENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
);

PROCEDURE INITINSTANCEMANAGER;

PROCEDURE STOPINSTANCEMANAGER;

FUNCTION FNUGETINITCOUNT RETURN NUMBER;



PROCEDURE SETCURRENTDATA
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
);

PROCEDURE GETCURRENTINDEXDATA
(
    ONUINSTANCE  OUT NUMBER,
    ONUENTITY    OUT NUMBER,
    ONUATTRIBUTE OUT NUMBER
);

PROCEDURE GETCURRENTINSTANCE
(
    OSBINSTANCE OUT VARCHAR2
);

PROCEDURE GETCURRENTDATA
(
    OSBINSTANCE  OUT VARCHAR2,
    OSBGROUP     OUT VARCHAR2,
    OSBENTITY    OUT VARCHAR2,
    OSBATTRIBUTE OUT VARCHAR2
);

PROCEDURE GETINSTANCENAME
(
    INUINSTANCE IN STYNUINDEX,
    OSBINSTANCE OUT VARCHAR2
);



PROCEDURE LOADENTITYATTRIBUTES
(
    ISBINSTANCE    IN VARCHAR2,
    ISBGROUP       IN VARCHAR2,
    ISBENTITY      IN VARCHAR2,
    IBLEXPRESSIONS IN BOOLEAN DEFAULT TRUE,
    IBLLOADDEFAULT IN BOOLEAN DEFAULT TRUE
);

PROCEDURE LOADINSTANCEATTRIBUTES
(
    ISBINSTANCE    IN VARCHAR2,
    IBLEXPRESSIONS IN BOOLEAN DEFAULT TRUE,
    IBLLOADDEFAULT IN BOOLEAN DEFAULT TRUE
);

PROCEDURE LOADALLATTRIBUTES
(
    IBLEXPRESSIONS IN BOOLEAN DEFAULT TRUE,
    IBLLOADDEFAULT IN BOOLEAN DEFAULT TRUE
);



PROCEDURE SETATTRIBUTENEWVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2
);

PROCEDURE SETATTRIBUTEOLDVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2
);

PROCEDURE GETATTRIBUTENEWVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
);

PROCEDURE GETATTRIBUTEOLDVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
);

PROCEDURE SETOKPARAMETERVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
);

PROCEDURE SETNOTOKPARAMETERVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
);



PROCEDURE GETCURRENTDATAATTRIBUTE
(
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
);

PROCEDURE SETCURRENTDATAATTRIBUTE
(
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2
);



PROCEDURE GETFATHERINSTANCE
(
    ISBINSTANCE IN VARCHAR2,
    OSBFATHER   OUT VARCHAR2
);

PROCEDURE GETFATHERCURRENTINSTANCE
(
    OSBFATHER OUT VARCHAR2
);

PROCEDURE GETENTITYATTRIBUTE
(
    OSBVALOR OUT VARCHAR2
);

PROCEDURE SETENTITYATTRIBUTE
(
    ISBVALOR IN VARCHAR2
);



PROCEDURE ADDATTRIBUTE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2,
    IBLUPDATE    IN BOOLEAN DEFAULT FALSE
);

PROCEDURE ADDATTRIBUTEID
(
    ISBINSTANCE    IN VARCHAR2,
    ISBGROUP       IN VARCHAR2,
    INUATTRIBUTEID IN NUMBER,
    ISBVALUE       IN VARCHAR2
);



PROCEDURE ADDGLOBALATTRIBUTE
(
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2
);

PROCEDURE GETGLOBALATTRIBUTE
(
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
);



FUNCTION FSBGETATTRIBUTENEWVALUE
(
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
RETURN VARCHAR2;



PROCEDURE SETATTRIBUTEEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    ISBGROUP          IN VARCHAR2,
    ISBENTITY         IN VARCHAR2,
    ISBATTRIBUTE      IN VARCHAR2,
    INUEXPRESSION     IN NUMBER,
    INUEXPRESSIONTYPE IN NUMBER
);

PROCEDURE SETENTITYEXPRESSIONS
(
    ISBINSTANCE               IN VARCHAR2,
    ISBGROUP                  IN VARCHAR2,
    ISBENTITY                 IN VARCHAR2,
    INUINSERTBEFOREEXPRESSION IN NUMBER,
    INUINSERTAFTEREXPRESSION  IN NUMBER,
    INUUPDATEBEFOREEXPRESSION IN NUMBER,
    INUUPDATEAFTEREXPRESSION  IN NUMBER,
    INUDELETEBEFOREEXPRESSION IN NUMBER,
    INUDELETEAFTEREXPRESSION  IN NUMBER
);

PROCEDURE SETINSTANCEEXPRESSIONS
(
    ISBINSTANCE               IN VARCHAR2,
    INUINSERTBEFOREEXPRESSION IN NUMBER,
    INUINSERTAFTEREXPRESSION  IN NUMBER,
    INUUPDATEBEFOREEXPRESSION IN NUMBER,
    INUUPDATEAFTEREXPRESSION  IN NUMBER,
    INUDELETEBEFOREEXPRESSION IN NUMBER,
    INUDELETEAFTEREXPRESSION  IN NUMBER
);

PROCEDURE SETGLOBALEXPRESSIONS
(
    INUINSERTBEFOREEXPRESSION IN NUMBER,
    INUINSERTAFTEREXPRESSION  IN NUMBER,
    INUUPDATEBEFOREEXPRESSION IN NUMBER,
    INUUPDATEAFTEREXPRESSION  IN NUMBER,
    INUDELETEBEFOREEXPRESSION IN NUMBER,
    INUDELETEAFTEREXPRESSION  IN NUMBER
);



PROCEDURE INSTANCEHIERARCHY
(
    ISBINSTANCE  IN VARCHAR2,
    IOTBINSTANCE IN OUT NOCOPY TYTBINSTANCEHIERARCHY
);

PROCEDURE INSTANCECHILDS
(
    ISBINSTANCE  IN VARCHAR2,
    IOTBINSTANCE IN OUT NOCOPY TYTBINSTANCEHIERARCHY
);



PROCEDURE EXECUTEEXPRESSION
(
    INUEXPRESSION IN NUMBER
);

PROCEDURE EXEATTEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    ISBGROUP          IN VARCHAR2,
    ISBENTITY         IN VARCHAR2,
    ISBATTRIBUTE      IN VARCHAR2,
    INUEXPRESSIONTYPE IN NUMBER
);

PROCEDURE EXEENTITYATTEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    ISBGROUP          IN VARCHAR2,
    ISBENTITY         IN VARCHAR2,
    INUEXPRESSIONTYPE IN NUMBER
);

PROCEDURE EXEINSTANCEATTEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    INUEXPRESSIONTYPE IN NUMBER
);

PROCEDURE EXEALLATTEXPRESSIONS
(
    INUEXPRESSIONTYPE IN NUMBER
);

PROCEDURE EXECUTEINSTANCEEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    INUEXECUTETIME    IN NUMBER,
    INUEXPRESSIONTYPE IN NUMBER
);

PROCEDURE EXECUTEALLINSTANCEEXPRESSIONS
(
    INUEXECUTETIME    IN NUMBER,
    INUEXPRESSIONTYPE IN NUMBER
);



PROCEDURE SETATTRIBUTENAME
(
    INUATTRIBUTENAME IN NUMBER
);

PROCEDURE SETDSPLY
(
    INUDSPLY IN NUMBER
);

PROCEDURE SETDSPLYMODE
(
    INUDSPLYMODE IN NUMBER
);

PROCEDURE SETSELECTMODE
(
    INUSELECTMODE IN NUMBER
);

PROCEDURE SETVALIDATETYPEATTRIBUTE
(
    IBLMODE IN STYNUBOOLEAN
);

PROCEDURE SETVALIDATEREQUIREDATTRIBUTE
(
    IBLMODE IN STYNUBOOLEAN
);

PROCEDURE SETFORMATATTRIBUTE
(
    IBLMODE IN STYNUBOOLEAN
);

PROCEDURE SETENTITYEVENT
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    INUEVENT    IN NUMBER
);

PROCEDURE SETREQUIREDATTRIBUTE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    IBLMODE      IN STYNUBOOLEAN
);



PROCEDURE INITMULTISELECT
(
    ISBINSTANCE IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
);

PROCEDURE SETMULTISELECTATTRIBUTE
(
    INUTYPE      IN NUMBER,
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR DEFAULT NULL
);

PROCEDURE SETMULTISELECTWHERE
(
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR DEFAULT NULL
);

PROCEDURE SETMULTISELECTGROUP
(
    ISBATTRIBUTE IN VARCHAR2
);

PROCEDURE SETMULTISELECTODERBY
(
    ISBATTRIBUTE IN VARCHAR2
);

PROCEDURE EXECUTEMULTISELECT
(
    IBLRAISEEXCEPTION IN BOOLEAN DEFAULT FALSE
);

FUNCTION FBLGETFIRSTMULTISELECTENTITY
(
    ORCENTITY OUT TYRCENTITYSTACK
)
RETURN BOOLEAN;

FUNCTION FBLGETNEXTMULTISELECTENTITY
(
    ORCENTITY OUT TYRCENTITYSTACK
)
RETURN BOOLEAN;



PROCEDURE INSERTENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
);

PROCEDURE INSERTINSTANCE
(
    ISBINSTANCE IN VARCHAR2
);

PROCEDURE INSERTALL;



PROCEDURE UPDATEENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
);

PROCEDURE UPDATEINSTANCE
(
    ISBINSTANCE IN VARCHAR2
);

PROCEDURE UPDATEALL;



PROCEDURE DELETEENTITY
(
    ISBINSTANCE      IN VARCHAR2,
    ISBGROUP         IN VARCHAR2,
    ISBENTITY        IN VARCHAR2,
    IBODESTROYENTITY IN BOOLEAN DEFAULT TRUE,
    IBORAISEERROR    IN BOOLEAN DEFAULT TRUE
);

PROCEDURE DELETEINSTANCE
(
    ISBINSTANCE IN VARCHAR2
);



PROCEDURE LOADENTITYOLDVALUES
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    IBLLOCK       IN BOOLEAN DEFAULT FALSE,
    IBLOVERWRITE  IN BOOLEAN DEFAULT FALSE
);

PROCEDURE LOADENTITYOLDVALUESID
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBVALUE      IN VARCHAR2,
    IBLPERSISTENT IN BOOLEAN DEFAULT TRUE,
    IBLLOCK       IN BOOLEAN DEFAULT FALSE,
    IBLOVERWRITE  IN BOOLEAN DEFAULT FALSE
);

PROCEDURE LOADINSTANCEOLDVALUES
(
    ISBINSTANCE IN VARCHAR2,
    IBLLOCK     IN BOOLEAN DEFAULT FALSE
);

PROCEDURE LOADOLDVALUES
(
    IBLLOCK IN BOOLEAN DEFAULT FALSE
);

FUNCTION FBLLOADENTITYOLDVALUES
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
RETURN BOOLEAN;



PROCEDURE CLEARENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
);

PROCEDURE CLEARENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
);

PROCEDURE CLEARINSTANCE
(
    ISBINSTANCE IN VARCHAR2
);



PROCEDURE INSTANCEENTITYLEVEL
(
    INUINSTANCE    IN STYNUINDEX,
    OTBENTITYLEVEL OUT NOCOPY TYTBENTITYLEVEL
);



PROCEDURE GETCONTROL
(
    ORCCONTROL OUT TYRCCONTROL
);

PROCEDURE GETINSTANCE
(
    INUINSTANCE IN STYNUINDEX,
    ORCINSTANCE OUT TYRCINSTANCESTACK
);

PROCEDURE GETENTITY
(
    INUENTITY IN STYNUINDEX,
    ORCENTITY OUT TYRCENTITYSTACK
);

PROCEDURE GETATTRIBUTE
(
    INUATTRIBUTE IN STYNUINDEX,
    ORCATTRIBUTE OUT TYRCATTRIBUTESTACK
);




PROCEDURE SETCONTROL
(
    IRCCONTROL IN TYRCCONTROL
);

PROCEDURE SETINSTANCE
(
    INUINSTANCE IN STYNUINDEX,
    IRCINSTANCE IN TYRCINSTANCESTACK
);

PROCEDURE SETENTITY
(
    INUENTITY IN STYNUINDEX,
    IRCENTITY IN TYRCENTITYSTACK
);

PROCEDURE SETATTRIBUTE
(
    INUATTRIBUTE IN STYNUINDEX,
    IRCATTRIBUTE IN TYRCATTRIBUTESTACK
);




PROCEDURE GETFIRSTINSTANCE
(
    ONUINSTANCE OUT STYNUINDEX
);

PROCEDURE GETLASTINSTANCE
(
    ONUINSTANCE OUT STYNUINDEX
);

PROCEDURE GETNEXTINSTANCE
(
    IONUINSTANCE IN OUT STYNUINDEX
);

PROCEDURE GETFIRSTINSTANCEENTITY
(
    INUINSTANCE IN STYNUINDEX,
    ONUENTITY   OUT STYNUINDEX
);

PROCEDURE GETFIRSTINSTANCEENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ONUENTITY   OUT STYNUINDEX
);

PROCEDURE GETNEXTINSTANCEENTITY
(
    IONUENTITY IN OUT STYNUINDEX
);

PROCEDURE GETFIRSTINSTANCEATTRIBUTE
(
    ISBINSTANCE  IN VARCHAR2,
    ONUATTRIBUTE OUT STYNUINDEX
);

PROCEDURE GETNEXTINSTANCEATTRIBUTE
(
    IONUATTRIBUTE IN OUT STYNUINDEX
);

PROCEDURE GETFIRSTENTITYATTRIBUTE
(
    INUENTITY    IN VARCHAR2,
    ONUATTRIBUTE OUT STYNUINDEX
);

PROCEDURE GETFIRSTENTITYATTRIBUTE
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    ONUINDEX    OUT STYNUINDEX
);

PROCEDURE GETNEXTENTITYATTRIBUTE
(
    IONUATTRIBUTE IN OUT STYNUINDEX
);



PROCEDURE SETSAVEPOINT;

PROCEDURE ROLLBACKSAVEPOINT;



PROCEDURE GETENTITYKEYATTRIBUTE
(
    INUENTITY     IN STYNUINDEX,
    IOTBATTRIBUTE IN OUT NOCOPY TYTBATTRIBUTESTACK
);

FUNCTION FBLISENTITYPERSISTENT
(
    INUENTITY IN STYNUINDEX
)
RETURN BOOLEAN;

PROCEDURE GETATTRIBUTEID
(
    ISBINSTANCE    IN VARCHAR2,
    ISBGROUP       IN VARCHAR2,
    ISBENTITY      IN VARCHAR2,
    ISBATTRIBUTE   IN VARCHAR2,
    ONUATTRIBUTEID OUT NUMBER
);

PROCEDURE GETCURRENTATTRIBUTEID
(
    ONUATTRIBUTEID OUT NUMBER
);

FUNCTION FBLGETENTITYGROUP
(
    ISBINSTANCE IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    OTBGROUP    OUT NOCOPY TYTBSBNAME
)
RETURN BOOLEAN;

FUNCTION FSBGETFIELDVALUE
(
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
RETURN VARCHAR2;




FUNCTION FBLISINITINSTANCECONTROL
RETURN BOOLEAN;

FUNCTION FBLHAVEHIERARCHY
(
    ISBINSTANCE IN VARCHAR2
)
RETURN BOOLEAN;




PROCEDURE DSPLYSTRING
(
    ISBSTRING IN VARCHAR2
);

PROCEDURE DSPLYHEADERINSTANCE
(
    INUINSTANCE IN STYNUINDEX DEFAULT NULL
);

PROCEDURE DSPLYCONTROL;

PROCEDURE DSPLYINSTANCE
(
    INUINDEX IN STYNUINDEX
);

PROCEDURE DSPLYENTITY
(
    INUINDEX IN STYNUINDEX
);

PROCEDURE DSPLYATTRIBUTE
(
    INUINDEX IN STYNUINDEX
);

PROCEDURE DSPLYINSTANCESTACK;

PROCEDURE DSPLYENTITYSTACK
(
    INUINSTANCE IN STYNUINDEX DEFAULT NULL
);

PROCEDURE DSPLYATTRIBUTESTACK
(
    INUINSTANCE IN STYNUINDEX DEFAULT NULL
);

PROCEDURE DSPLYENTITYATTRIBUTESTACK
(
    INUENTITY IN STYNUINDEX
);

PROCEDURE DSPLYALLENTITYSTACK
(
    INUMODE IN NUMBER DEFAULT GE_BOINSTANCECONSTANTS.CNUFALSE
);

PROCEDURE DSPLYALLATTRIBUTESTACK
(
    INUMODE IN NUMBER DEFAULT GE_BOINSTANCECONSTANTS.CNUFALSE
);

PROCEDURE CHECKATTRIBUTEVALUEANYGROUP
(
    ISBINSTANCE    IN VARCHAR2,
    ISBENTITY      IN VARCHAR2,
    ISBATTRIBUTE   IN VARCHAR2,
    ISBVALUE       IN VARCHAR2,
    OSBGROUP      OUT VARCHAR2,
    OBLEXISTS     OUT  BOOLEAN
);

PROCEDURE DESTROYGRUPPEDENTITY
(
    ISBINSTANCENAME VARCHAR2,
    ISBENTITYNAME   VARCHAR2
);
PROCEDURE EXISTINSTANCESTACK
(
    ISBINSTANCE  IN VARCHAR2,
    IONUINSTANCE IN OUT STYNUINDEX,
    OSBEXIST     OUT VARCHAR2
);

PROCEDURE EXISTENTITYSTACK
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    IONUENTITY  IN OUT STYNUINDEX,
    OSBEXIST     OUT VARCHAR2
);

PROCEDURE EXISTATTRIBUTESTACK
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2,
    IONUATTRIBUTE IN OUT STYNUINDEX,
    OSBEXIST     OUT VARCHAR2
);

FUNCTION FSBATTRIBUTENEWVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)RETURN VARCHAR2;


















FUNCTION FTBGETATTRIBCURRINSTANC
(
    ISBENTITY IN VARCHAR2
)
RETURN TYTBATTRIBUTESTACK ;


















FUNCTION FNUGETKEYATTRIBUTESTACK
(
     ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2
)
RETURN STYNUINDEX;

PROCEDURE QUERYATTRIBUTENEWVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
);

FUNCTION FBLQUERYKEYATTRIBUTESTACK
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2,
    IONUATTRIBUTE IN OUT STYNUINDEX
) RETURN BOOLEAN;

FUNCTION FSBQUERYFIELDVALUE
(
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
RETURN VARCHAR2;


















PROCEDURE GETENTITYEVENT
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    ONUEVENT    OUT NUMBER
);

















FUNCTION FNUGETENTITYEVENT
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
RETURN  NUMBER;







FUNCTION FSBGETCURRENTINSTANCE
RETURN GE_BOINSTANCECONTROL.STYSBNAME;







FUNCTION FSBGETCURRENTGROUP
RETURN GE_BOINSTANCECONTROL.STYSBNAME;







FUNCTION FSBGETCURRENTENTITY
RETURN GE_BOINSTANCECONTROL.STYSBNAME;







FUNCTION FSBGETCURRENTATTRIBUTE
RETURN GE_BOINSTANCECONTROL.STYSBNAME;







FUNCTION FNUGETCURRENTENTITYEVENT
RETURN  NUMBER;







PROCEDURE GETENTITYSTACKBYENTITY
(
    INUINSTANCE     IN  STYNUINDEX,
    ISBENTITY       IN  STYSBNAME,
    OTBENTITYSTACK  OUT NOCOPY TYTBENTITYSTACK
);







PROCEDURE GETINSTANCESTACKBYINSTANCE
(
    ISBINSTANCE         IN  STYSBNAME,
    OTBINSTANCESTACK    OUT NOCOPY TYTBINSTANCESTACK
);

END GE_BOINSTANCECONTROL;

PACKAGE BODY ge_boInstanceControl IS

CSBVERSION CONSTANT VARCHAR2(10) := 'SAO200181';
















    
    
    
    CSBSEPARATOR CONSTANT VARCHAR2(1) := CHR(124); 
    
    
    CNUERRINVALIDCURSOR CONSTANT NUMBER(6) := 901873;
    
    
    

    TYPE TYRCINITCONTROL IS RECORD
    (
        NUCURRENTINSTANCE  STYNUINDEX,
        NUCURRENTENTITY    STYNUINDEX,
        NUCURRENTATTRIBUTE STYNUINDEX,
        SBCURRENTINSTANCE  STYSBNAME,
        SBCURRENTGROUP     STYSBNAME,
        SBCURRENTENTITY    STYSBNAME,
        SBCURRENTATTRIBUTE STYSBNAME,
        NUFIRSTINSTANCE    STYNUINDEX,
        NULASTINSTANCE     STYNUINDEX
    );

    TYPE TYRCINSTANCECONTROL IS RECORD
    (
        BLEXISTS        BOOLEAN,
        NUNEXTINSTANCE  STYNUINDEX
    );

    TYPE TYTBINITCONTROL     IS TABLE OF TYRCINITCONTROL     INDEX BY STYNUINDEX;
    TYPE TYTBINSTANCECONTROL IS TABLE OF TYRCINSTANCECONTROL INDEX BY STYNUINDEX;
    
    
    
    

    
    
    
    

    SBREQUIREDVALIDATE   VARCHAR2(10);
    
    
    RCCONTROL                 TYRCCONTROL;
    RCMULTISELECTCONTROL      TYRCMULTISELECTCONTROL;
    RCROLLBACKCONTROL         TYRCCONTROL;
    
    
    
    TBINITCONTROL             TYTBINITCONTROL;
    TBINSTANCECONTROL         TYTBINSTANCECONTROL;
    TBINSTANCEHASH            TYTBINSTANCEHASH;
    
    TBINSTANCESTACK           TYTBINSTANCESTACK;
    TBENTITYSTACK             TYTBENTITYSTACK;
    TBATTRIBUTESTACK          TYTBATTRIBUTESTACK;

    

    TBENTITYLEVEL             TYTBENTITYLEVEL;

    TBMULTISELECTWHERE        TYTBMULTISELECTATTRIBUTE;
    TBMULTISELECTGROUP        TYTBMULTISELECTATTRIBUTE;
    TBMULTISELECTORDER        TYTBMULTISELECTATTRIBUTE;

    TBMULTISELECTINDEXENTITY  TYTBMULTISELECTINDEXENTITY;

    

    TBROLLBACKINSTANCESTACK   TYTBINSTANCESTACK;
    TBROLLBACKENTITYSTACK     TYTBENTITYSTACK;
    TBROLLBACKATTRIBUTESTACK  TYTBATTRIBUTESTACK;

    TBROLLBACKINSTANCEHASH    TYTBINSTANCEHASH;

    
    
    



FUNCTION FSBVERSION
RETURN VARCHAR2
IS
BEGIN
    RETURN CSBVERSION;
END;


FUNCTION FNUGETKEYATTRIBUTESTACK
(
     ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2
)
RETURN STYNUINDEX
IS
     NUATTRIBUTE  STYNUINDEX;
     NUENTITY  STYNUINDEX;

BEGIN

    IF NOT FBLACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE) THEN
        RETURN NULL;
    END IF;

    IF NOT TBATTRIBUTESTACK.EXISTS(NUATTRIBUTE) THEN
        RETURN NULL;
    END IF;

    RETURN NUATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;

END FNUGETKEYATTRIBUTESTACK;


PROCEDURE ADDRECHASHRECORD
(
    ISBKEY    IN VARCHAR2,
    IONUVALUE IN OUT NUMBER
)
IS
SBINDEX     STYSBINDEX := NULL;
SBCOUNT     STYSBNAME := NULL;
BEGIN
    
    IF ISBKEY <> GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE THEN
        SBCOUNT := TO_CHAR(TBINITCONTROL.COUNT);
    END IF;
    SBINDEX := SBCOUNT || ISBKEY;
    IF (NOT TBINSTANCEHASH.EXISTS(SBINDEX)) THEN
        TBINSTANCEHASH(SBINDEX).SBKEY := ISBKEY;
        TBINSTANCEHASH(SBINDEX).NUVALUE := IONUVALUE;
    ELSE
        IONUVALUE := TBINSTANCEHASH(SBINDEX).NUVALUE;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DELETEHASHRECORD
(
    ISBKEY IN VARCHAR2
)
IS
SBINDEX     STYSBINDEX := NULL;
SBCOUNT     STYSBNAME := NULL;
BEGIN
    
    IF ISBKEY <> GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE THEN
        SBCOUNT := TO_CHAR(TBINITCONTROL.COUNT);
    END IF;

    SBINDEX := SBCOUNT || ISBKEY;
    IF (TBINSTANCEHASH.EXISTS(SBINDEX)) THEN
        TBINSTANCEHASH.DELETE(SBINDEX);
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLACCKEYHASHRECORD
(
    ISBKEY   IN VARCHAR2,
    ONUVALUE OUT NUMBER
)
RETURN BOOLEAN
IS
SBCOUNT     STYSBNAME := NULL;
SBINDEX     STYSBINDEX := NULL;
BEGIN
    
    IF ISBKEY <> GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE THEN
        SBCOUNT := TO_CHAR(TBINITCONTROL.COUNT);
    END IF;

    SBINDEX :=  SBCOUNT || ISBKEY;


    IF NOT TBINSTANCEHASH.EXISTS(SBINDEX) THEN
        RETURN FALSE;
    ELSE
        ONUVALUE := TBINSTANCEHASH(SBINDEX).NUVALUE;
        RETURN TRUE;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLACCKEYINSTANCESTACK
(
    ISBINSTANCE  IN VARCHAR2,
    IONUINSTANCE IN OUT STYNUINDEX
)
RETURN BOOLEAN
IS
BEGIN
    RETURN (FBLACCKEYHASHRECORD (ISBINSTANCE, IONUINSTANCE));

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLACCKEYENTITYSTACK
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    IONUENTITY  IN OUT STYNUINDEX
)
RETURN BOOLEAN
IS
BEGIN
    RETURN (FBLACCKEYHASHRECORD (ISBINSTANCE || CSBSEPARATOR || ISBGROUP || CSBSEPARATOR || ISBENTITY, IONUENTITY));

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLACCKEYATTRIBUTESTACK
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2,
    IONUATTRIBUTE IN OUT STYNUINDEX
)
RETURN BOOLEAN
IS
BEGIN
    RETURN (FBLACCKEYHASHRECORD (ISBINSTANCE || CSBSEPARATOR || ISBGROUP || CSBSEPARATOR || ISBENTITY || CSBSEPARATOR || ISBATTRIBUTE, IONUATTRIBUTE));

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




























FUNCTION FBLQUERYKEYATTRIBUTESTACK
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2,
    IONUATTRIBUTE IN OUT STYNUINDEX
) RETURN BOOLEAN
IS

NUENTITY  STYNUINDEX;
BLFOUND BOOLEAN;
BLEXISTS BOOLEAN;
BEGIN
    BLFOUND := FBLACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, IONUATTRIBUTE);

    BLEXISTS := TBATTRIBUTESTACK.EXISTS(IONUATTRIBUTE);

    RETURN (BLFOUND AND BLEXISTS) ;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE ACCKEYINSTANCESTACK
(
    ISBINSTANCE  IN VARCHAR2,
    IONUINSTANCE IN OUT STYNUINDEX
)
IS
BEGIN
    IF NOT FBLACCKEYINSTANCESTACK (ISBINSTANCE, IONUINSTANCE) THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_INSTANCE_NO_EXIST, ISBINSTANCE);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF NOT TBINSTANCESTACK.EXISTS(IONUINSTANCE) THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_INSTANCE_NO_EXIST, ISBINSTANCE);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE ACCKEYENTITYSTACK
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    IONUENTITY  IN OUT STYNUINDEX
)
IS

NUINSTANCE  STYNUINDEX;

BEGIN
    IF NOT FBLACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, IONUENTITY) THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ENTITY_NO_INSTANCE, '['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']');
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF NOT TBENTITYSTACK.EXISTS(IONUENTITY) THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ENTITY_NO_INSTANCE, '['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']');
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE ACCKEYATTRIBUTESTACK
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2,
    IONUATTRIBUTE IN OUT STYNUINDEX
)
IS

NUENTITY  STYNUINDEX;

BEGIN
    IF NOT FBLACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, IONUATTRIBUTE) THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ATTRIBUTE_NO_INSTANCE, '['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']['|| ISBATTRIBUTE ||']');
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF NOT TBATTRIBUTESTACK.EXISTS(IONUATTRIBUTE) THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ATTRIBUTE_NO_INSTANCE, '['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']['|| ISBATTRIBUTE ||']');
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;






PROCEDURE VALIDATENULLNAMES
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2 DEFAULT 'ATTRIBUTE'
)
IS
BEGIN
    IF ISBINSTANCE IS NULL THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_INSTANCE_NAME_NULL);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF ISBENTITY IS NULL THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ENTITY_NAME_NULL, '['|| ISBINSTANCE ||']['|| ISBGROUP ||']');
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF ISBATTRIBUTE IS NULL THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ATTRIBUTE_NAME_NULL, '['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']');
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLVALIDATEDATATYPE
(
    ISBVALUE  IN VARCHAR2,
    INUTYPE   IN NUMBER,
    INULENGTH IN NUMBER,
    INUSCALE  IN NUMBER
)
RETURN BOOLEAN
IS

NUNUMBER    NUMBER(38,12);     
NUINTEGER   NUMBER(22);
NUDECIMAL   NUMBER(38,12);

DTDATE      DATE;        
SBVARCHAR   STYSBVALUE;  

BEGIN
    IF ISBVALUE IS NULL THEN
        RETURN (TRUE);
    END IF;

    IF INUTYPE = GE_BOCONSTANTS.CNUNUMBER THEN
        IF NOT UT_CONVERT.IS_NUMBER (ISBVALUE) THEN
            RETURN (FALSE);
        END IF;

        NUNUMBER := TO_NUMBER (ISBVALUE);

        IF NUNUMBER < 0 THEN
            NUNUMBER := NUNUMBER * -1;
        END IF;

        NUINTEGER := TRUNC (NUNUMBER);
        NUDECIMAL := NUNUMBER - FLOOR (NUNUMBER);

        IF NUDECIMAL > 0 AND INUSCALE = 0 THEN
            RETURN (FALSE);
        END IF;

        SBVARCHAR := TO_CHAR (NUINTEGER);

        IF LENGTH (SBVARCHAR) > INULENGTH - INUSCALE THEN
            RETURN (FALSE);
        END IF;

        SBVARCHAR := TO_CHAR (NUDECIMAL);

        IF LENGTH (SBVARCHAR) > INUSCALE + 1 THEN
            RETURN (FALSE);
        END IF;

    ELSIF INUTYPE = GE_BOCONSTANTS.CNUDATE THEN
        IF NOT UT_CONVERT.IS_DATE (ISBVALUE) THEN
            RETURN (FALSE);
        END IF;

    ELSIF INUTYPE = GE_BOCONSTANTS.CNUVARCHAR2 THEN
        IF LENGTH (ISBVALUE) > INULENGTH THEN
            RETURN (FALSE);
        END IF;

    END IF;

    RETURN (TRUE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLVALIDATEATTRIBUTETYPE
(
    INUTYPE       IN NUMBER,
    IBLPERSISTENT IN STYNUBOOLEAN
)
RETURN BOOLEAN
IS
BEGIN
    IF INUTYPE = GE_BOCONSTANTS.CNUROWID THEN
        RETURN TRUE;
    END IF;

    IF IBLPERSISTENT = GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT THEN
        RETURN FALSE;
    END IF;

    IF INUTYPE = GE_BOCONSTANTS.CNUNUMBER THEN
        RETURN TRUE;

    ELSIF INUTYPE = GE_BOCONSTANTS.CNUDATE THEN
        RETURN TRUE;

    ELSIF INUTYPE = GE_BOCONSTANTS.CNUVARCHAR2 THEN
        RETURN TRUE;

    ELSIF INUTYPE = GE_BOCONSTANTS.CNUCHAR THEN
        RETURN TRUE;

    ELSE
        RETURN FALSE;
    END IF;

    RETURN (FALSE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FSBENTITYNAME
(
    INUENTITY IN NUMBER,
    IBLFLAGID IN BOOLEAN DEFAULT TRUE
)
RETURN VARCHAR2
IS

SBNAME STYSBNAME;

BEGIN
    SBNAME := NULL;

    IF IBLFLAGID THEN
        SBNAME := TO_CHAR (TBENTITYSTACK(INUENTITY).NUENTITYID) || '-';
    END IF;

    IF RCCONTROL.NUATTRIBUTENAME = GE_BOINSTANCECONSTANTS.CNUTECHNICAL_NAME THEN
        SBNAME := SBNAME || TBENTITYSTACK(INUENTITY).SBENTITY;
    ELSE
        SBNAME := SBNAME || DAGE_ENTITY.FSBGETDISPLAY_NAME (TBENTITYSTACK(INUENTITY).NUENTITYID);
    END IF;

    RETURN (SBNAME);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FSBATTRIBUTENAME
(
    INUATTRIBUTE IN NUMBER,
    IBLFLAGID    IN BOOLEAN DEFAULT TRUE
)
RETURN VARCHAR2
IS

SBNAME STYSBNAME;

BEGIN
    SBNAME := NULL;

    IF IBLFLAGID THEN
        SBNAME := TO_CHAR (TBATTRIBUTESTACK(INUATTRIBUTE).NUATTRIBUTEID) || '-';
    END IF;

    IF RCCONTROL.NUATTRIBUTENAME = GE_BOINSTANCECONSTANTS.CNUTECHNICAL_NAME THEN
        SBNAME := SBNAME || TBATTRIBUTESTACK(INUATTRIBUTE).SBATTRIBUTE;
    ELSE
        SBNAME := SBNAME || DAGE_ENTITY_ATTRIBUTES.FSBGETDISPLAY_NAME (TBATTRIBUTESTACK(INUATTRIBUTE).NUATTRIBUTEID);
    END IF;

    RETURN (SBNAME);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




PROCEDURE ADDINSTANCESTACK
(
    ISBINSTANCE  IN VARCHAR2,
    ISBFATHER    IN VARCHAR2,
    INUFATHER    IN STYNUINDEX,
    IONUINSTANCE IN OUT STYNUINDEX
)
IS
BEGIN
    IONUINSTANCE := RCCONTROL.NUINSTANCESEQUENCE;

    RCCONTROL.NUINSTANCESEQUENCE := RCCONTROL.NUINSTANCESEQUENCE + 1;

    ADDRECHASHRECORD (ISBINSTANCE, IONUINSTANCE);

    IF NOT TBINSTANCESTACK.EXISTS(IONUINSTANCE) THEN
        TBINSTANCESTACK(IONUINSTANCE).SBINSTANCE := ISBINSTANCE;
        TBINSTANCESTACK(IONUINSTANCE).NUINSTANCE := IONUINSTANCE;
        TBINSTANCESTACK(IONUINSTANCE).SBFATHER   := ISBFATHER;
        TBINSTANCESTACK(IONUINSTANCE).NUFATHER   := INUFATHER;

        TBINSTANCESTACK(IONUINSTANCE).NUPREVIOUSINSTANCE := NULL;
        TBINSTANCESTACK(IONUINSTANCE).NUNEXTINSTANCE     := NULL;

        TBINSTANCESTACK(IONUINSTANCE).NUPREVIOUSBROTHERINSTANCE := NULL;
        TBINSTANCESTACK(IONUINSTANCE).NUNEXTBROTHERINSTANCE     := NULL;

        TBINSTANCESTACK(IONUINSTANCE).NUFIRSTCHILDINSTANCE := NULL;
        TBINSTANCESTACK(IONUINSTANCE).NULASTCHILDINSTANCE  := NULL;

        TBINSTANCESTACK(IONUINSTANCE).NUFIRSTENTITY := NULL;
        TBINSTANCESTACK(IONUINSTANCE).NULASTENTITY  := NULL;

        TBINSTANCESTACK(IONUINSTANCE).NUFIRSTATTRIBUTE := NULL;
        TBINSTANCESTACK(IONUINSTANCE).NULASTATTRIBUTE  := NULL;

        IF ISBINSTANCE != GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE AND ISBINSTANCE != GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE THEN
            IF RCCONTROL.NUFIRSTINSTANCE IS NULL THEN
                RCCONTROL.NUFIRSTINSTANCE := IONUINSTANCE;
            END IF;

            IF RCCONTROL.NULASTINSTANCE IS NOT NULL THEN
                TBINSTANCESTACK(IONUINSTANCE).NUPREVIOUSINSTANCE := RCCONTROL.NULASTINSTANCE;
                TBINSTANCESTACK(RCCONTROL.NULASTINSTANCE).NUNEXTINSTANCE := IONUINSTANCE;
            END IF;

            

            IF TBINSTANCESTACK(INUFATHER).NUFIRSTCHILDINSTANCE IS NULL THEN
                TBINSTANCESTACK(INUFATHER).NUFIRSTCHILDINSTANCE := IONUINSTANCE;
            END IF;

            IF TBINSTANCESTACK(INUFATHER).NULASTCHILDINSTANCE IS NOT NULL THEN
                TBINSTANCESTACK(IONUINSTANCE).NUPREVIOUSBROTHERINSTANCE := TBINSTANCESTACK(INUFATHER).NULASTCHILDINSTANCE;
                TBINSTANCESTACK(TBINSTANCESTACK(INUFATHER).NULASTCHILDINSTANCE).NUNEXTBROTHERINSTANCE := IONUINSTANCE;
            END IF;

            

            RCCONTROL.NULASTINSTANCE := IONUINSTANCE;

            TBINSTANCESTACK(INUFATHER).NULASTCHILDINSTANCE := IONUINSTANCE;

            

            RCCONTROL.NUCURRENTINSTANCE := IONUINSTANCE;
            RCCONTROL.SBCURRENTINSTANCE := ISBINSTANCE;

            RCCONTROL.NUCURRENTENTITY    := NULL;
            RCCONTROL.NUCURRENTATTRIBUTE := NULL;
            RCCONTROL.SBCURRENTGROUP     := NULL;
            RCCONTROL.SBCURRENTENTITY    := NULL;
            RCCONTROL.SBCURRENTATTRIBUTE := NULL;
        END IF;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE ADDENTITYSTACK
(
    INUINSTANCE      IN STYNUINDEX,
    ISBINSTANCE      IN VARCHAR2,
    ISBGROUP         IN VARCHAR2,
    ISBENTITY        IN VARCHAR2,
    INUCONTROLENTITY IN STYNUINDEX,
    IONUENTITY       IN OUT STYNUINDEX
)
IS
BEGIN
    IONUENTITY := RCCONTROL.NUENTITYSEQUENCE;

    RCCONTROL.NUENTITYSEQUENCE := RCCONTROL.NUENTITYSEQUENCE + 1;

    ADDRECHASHRECORD (ISBINSTANCE || CSBSEPARATOR || ISBGROUP || CSBSEPARATOR || ISBENTITY, IONUENTITY);

    IF NOT TBENTITYSTACK.EXISTS(IONUENTITY) THEN
        TBENTITYSTACK(IONUENTITY).NUINSTANCE := INUINSTANCE;
        TBENTITYSTACK(IONUENTITY).NUENTITY   := IONUENTITY;
        TBENTITYSTACK(IONUENTITY).SBINSTANCE := ISBINSTANCE;
        TBENTITYSTACK(IONUENTITY).SBENTITY   := ISBENTITY;
        TBENTITYSTACK(IONUENTITY).SBGROUP    := ISBGROUP;

        TBENTITYSTACK(IONUENTITY).BLPERSISTENT := GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT;
        TBENTITYSTACK(IONUENTITY).NUEVENT := GE_BOINSTANCECONSTANTS.CNUINSERT;
        TBENTITYSTACK(IONUENTITY).BLLOADOLDVALUES := GE_BOINSTANCECONSTANTS.CNUFALSE;

        TBENTITYSTACK(IONUENTITY).NUCONTROLENTITY := INUCONTROLENTITY;

        TBENTITYSTACK(IONUENTITY).NUPREVIOUSENTITY := NULL;
        TBENTITYSTACK(IONUENTITY).NUNEXTENTITY     := NULL;
        TBENTITYSTACK(IONUENTITY).NUFIRSTATTRIBUTE := NULL;
        TBENTITYSTACK(IONUENTITY).NULASTATTRIBUTE  := NULL;

        TBENTITYSTACK(IONUENTITY).ININSERTCURSOR := NULL;

        TBENTITYSTACK(IONUENTITY).NUATTRIBUTESEQUENCE := 1;

        IF INUCONTROLENTITY IS NOT NULL THEN
            TBENTITYSTACK(IONUENTITY).NUENTITYID   := TBENTITYSTACK(INUCONTROLENTITY).NUENTITYID;
            TBENTITYSTACK(IONUENTITY).NULEVEL      := TBENTITYSTACK(INUCONTROLENTITY).NULEVEL;
            TBENTITYSTACK(IONUENTITY).BLPERSISTENT := TBENTITYSTACK(INUCONTROLENTITY).BLPERSISTENT;
        END IF;

        

        IF TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY IS NULL THEN
            TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY := IONUENTITY;
        END IF;

        IF TBINSTANCESTACK(INUINSTANCE).NULASTENTITY IS NOT NULL THEN
            TBENTITYSTACK(IONUENTITY).NUPREVIOUSENTITY := TBINSTANCESTACK(INUINSTANCE).NULASTENTITY;
            TBENTITYSTACK(TBINSTANCESTACK(INUINSTANCE).NULASTENTITY).NUNEXTENTITY := IONUENTITY;
        END IF;

        

        TBINSTANCESTACK(INUINSTANCE).NULASTENTITY := IONUENTITY;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE ADDATTRIBUTESTACK
(
    INUINSTANCE       IN STYNUINDEX,
    ISBINSTANCE       IN VARCHAR2,
    ISBGROUP          IN VARCHAR2,
    INUENTITY         IN STYNUINDEX,
    ISBENTITY         IN VARCHAR2,
    IRCATTRIBUTESTACK IN TYRCATTRIBUTESTACK,
    IBLDBDATAMODE     IN STYNUBOOLEAN,
    IONUATTRIBUTE     IN OUT STYNUINDEX
)
IS

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.AddAttributeStack Instance['|| INUINSTANCE ||'] Instance['|| ISBINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| INUENTITY ||'] Entity['|| ISBENTITY ||'] Attribute['|| IRCATTRIBUTESTACK.SBATTRIBUTE ||'] DbDataMode['|| IBLDBDATAMODE ||']', 26);

    IONUATTRIBUTE := RCCONTROL.NUATTRIBUTESEQUENCE;

    RCCONTROL.NUATTRIBUTESEQUENCE := RCCONTROL.NUATTRIBUTESEQUENCE + 1;

    ADDRECHASHRECORD (ISBINSTANCE || CSBSEPARATOR || ISBGROUP || CSBSEPARATOR || ISBENTITY || CSBSEPARATOR || IRCATTRIBUTESTACK.SBATTRIBUTE, IONUATTRIBUTE);

    IF NOT TBATTRIBUTESTACK.EXISTS(IONUATTRIBUTE) THEN
        TBATTRIBUTESTACK(IONUATTRIBUTE) := IRCATTRIBUTESTACK;

        TBATTRIBUTESTACK(IONUATTRIBUTE).NUINSTANCE := INUINSTANCE;
        TBATTRIBUTESTACK(IONUATTRIBUTE).SBINSTANCE := ISBINSTANCE;
        TBATTRIBUTESTACK(IONUATTRIBUTE).SBGROUP    := ISBGROUP;
        TBATTRIBUTESTACK(IONUATTRIBUTE).SBENTITY   := ISBENTITY;

        TBATTRIBUTESTACK(IONUATTRIBUTE).NUATTRIBUTE := IONUATTRIBUTE;

        TBATTRIBUTESTACK(IONUATTRIBUTE).NUPREVIOUSINSTANCEATTRIBUTE := NULL;
        TBATTRIBUTESTACK(IONUATTRIBUTE).NUNEXTINSTANCEATTRIBUTE     := NULL;
        TBATTRIBUTESTACK(IONUATTRIBUTE).NUPREVIOUSENTITYATTRIBUTE   := NULL;
        TBATTRIBUTESTACK(IONUATTRIBUTE).NUNEXTENTITYATTRIBUTE       := NULL;

        

        IF IRCATTRIBUTESTACK.NUTYPE = GE_BOCONSTANTS.CNUROWID OR IRCATTRIBUTESTACK.SBATTRIBUTE = GE_BOCONSTANTS.CSBROWID THEN
            TBENTITYSTACK(INUENTITY).NUROWIDINDEX := IONUATTRIBUTE;
        END IF;

        

        TBATTRIBUTESTACK(IONUATTRIBUTE).NUSEQUENCE := TBENTITYSTACK(INUENTITY).NUATTRIBUTESEQUENCE;

        TBENTITYSTACK(INUENTITY).NUATTRIBUTESEQUENCE := TBENTITYSTACK(INUENTITY).NUATTRIBUTESEQUENCE + 1;

        

        IF TBINSTANCESTACK(INUINSTANCE).NUFIRSTATTRIBUTE IS NULL THEN
            TBINSTANCESTACK(INUINSTANCE).NUFIRSTATTRIBUTE := IONUATTRIBUTE;
        END IF;

        IF TBINSTANCESTACK(INUINSTANCE).NULASTATTRIBUTE IS NOT NULL THEN
            TBATTRIBUTESTACK(IONUATTRIBUTE).NUPREVIOUSINSTANCEATTRIBUTE := TBINSTANCESTACK(INUINSTANCE).NULASTATTRIBUTE;
            TBATTRIBUTESTACK(TBINSTANCESTACK(INUINSTANCE).NULASTATTRIBUTE).NUNEXTINSTANCEATTRIBUTE := IONUATTRIBUTE;
        END IF;

        

        IF TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE IS NULL THEN
            TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE := IONUATTRIBUTE;
        END IF;

        IF TBENTITYSTACK(INUENTITY).NULASTATTRIBUTE IS NOT NULL THEN
            TBATTRIBUTESTACK(IONUATTRIBUTE).NUPREVIOUSENTITYATTRIBUTE := TBENTITYSTACK(INUENTITY).NULASTATTRIBUTE;
            TBATTRIBUTESTACK(TBENTITYSTACK(INUENTITY).NULASTATTRIBUTE).NUNEXTENTITYATTRIBUTE := IONUATTRIBUTE;
        END IF;

        

        TBINSTANCESTACK(INUINSTANCE).NULASTATTRIBUTE := IONUATTRIBUTE;

        TBENTITYSTACK(INUENTITY).NULASTATTRIBUTE := IONUATTRIBUTE;
    ELSE
        IF IBLDBDATAMODE = GE_BOINSTANCECONSTANTS.CNUUPDATE_DB_DATA THEN
            TBATTRIBUTESTACK(IONUATTRIBUTE).BLPERSISTENT  := IRCATTRIBUTESTACK.BLPERSISTENT;
            TBATTRIBUTESTACK(IONUATTRIBUTE).NUATTRIBUTEID := IRCATTRIBUTESTACK.NUATTRIBUTEID;
            TBATTRIBUTESTACK(IONUATTRIBUTE).NUTYPE        := IRCATTRIBUTESTACK.NUTYPE;
            TBATTRIBUTESTACK(IONUATTRIBUTE).NULENGTH      := IRCATTRIBUTESTACK.NULENGTH;
            TBATTRIBUTESTACK(IONUATTRIBUTE).NUSCALE       := IRCATTRIBUTESTACK.NUSCALE;
            TBATTRIBUTESTACK(IONUATTRIBUTE).NUMASKTYPE    := IRCATTRIBUTESTACK.NUMASKTYPE;
            TBATTRIBUTESTACK(IONUATTRIBUTE).BLREQUIRED    := IRCATTRIBUTESTACK.BLREQUIRED;
            TBATTRIBUTESTACK(IONUATTRIBUTE).BLISKEY       := IRCATTRIBUTESTACK.BLISKEY;
            TBATTRIBUTESTACK(IONUATTRIBUTE).BLISNULL      := IRCATTRIBUTESTACK.BLISNULL;

            IF IRCATTRIBUTESTACK.NUINITIALIZEEXPRESSION IS NOT NULL THEN
                IF TBATTRIBUTESTACK(IONUATTRIBUTE).NUINITIALIZEEXPRESSION IS NULL THEN
                    TBATTRIBUTESTACK(IONUATTRIBUTE).NUINITIALIZEEXPRESSION := IRCATTRIBUTESTACK.NUINITIALIZEEXPRESSION;
                END IF;
            END IF;
            IF IRCATTRIBUTESTACK.NUPROCESSEXPRESSION IS NOT NULL THEN
                IF TBATTRIBUTESTACK(IONUATTRIBUTE).NUPROCESSEXPRESSION IS NULL THEN
                    TBATTRIBUTESTACK(IONUATTRIBUTE).NUPROCESSEXPRESSION := IRCATTRIBUTESTACK.NUPROCESSEXPRESSION;
                END IF;
            END IF;
        END IF;

        IF TBATTRIBUTESTACK(IONUATTRIBUTE).SBNEWVALUE IS NULL THEN
            TBATTRIBUTESTACK(IONUATTRIBUTE).SBNEWVALUE := IRCATTRIBUTESTACK.SBNEWVALUE;
        END IF;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




PROCEDURE VALIDATEINSTANCEMANAGER
(
    IBLVALIDATECURRENTINSTANCE IN BOOLEAN
)
IS
BEGIN
    IF RCCONTROL.BLINITMANAGER IS NULL OR RCCONTROL.BLINITMANAGER != GE_BOINSTANCECONSTANTS.CNUINIT_MANAGER_OK THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NO_INIT_INSTANCE_MGR);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF IBLVALIDATECURRENTINSTANCE THEN
        IF RCCONTROL.NUCURRENTINSTANCE IS NULL THEN
            ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NO_CURRENT_INSTANCE);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

















PROCEDURE CLOSECURSORS
IS
    NUENTITY  STYNUINDEX;
BEGIN
    IF RCCONTROL.NUCONTROLINSTANCE IS NULL THEN
        RETURN;
    END IF;

    IF NOT TBINSTANCESTACK.EXISTS(RCCONTROL.NUCONTROLINSTANCE) THEN
        RETURN;
    END IF;

    NUENTITY := TBINSTANCESTACK(RCCONTROL.NUCONTROLINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP
        IF TBENTITYSTACK(NUENTITY).ININSERTCURSOR IS NOT NULL THEN
            IF DBMS_SQL.IS_OPEN( TBENTITYSTACK(NUENTITY).ININSERTCURSOR ) THEN
                DBMS_SQL.CLOSE_CURSOR (TBENTITYSTACK(NUENTITY).ININSERTCURSOR);
            ELSE
                ERRORS.SETERROR(CNUERRINVALIDCURSOR,TBENTITYSTACK(NUENTITY).ININSERTCURSOR);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END CLOSECURSORS;




PROCEDURE INITINSTANCEMANAGER
IS

NUINITCOUNT  STYNUINDEX;
NUENTITY     STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('Inicia InitInstanceManager. Grupo Actual:['|| TBINITCONTROL.COUNT ||']', 20);
    
    NUINITCOUNT := TBINITCONTROL.COUNT;

    IF NUINITCOUNT = 0 THEN
        TBINSTANCESTACK.DELETE;
        TBENTITYSTACK.DELETE;
        TBATTRIBUTESTACK.DELETE;
        TBENTITYLEVEL.DELETE;

        TBMULTISELECTWHERE.DELETE;
        TBMULTISELECTGROUP.DELETE;
        TBMULTISELECTORDER.DELETE;

        TBMULTISELECTINDEXENTITY.DELETE;

        TBINSTANCEHASH.DELETE;

        RCCONTROL.BLINITMANAGER := GE_BOINSTANCECONSTANTS.CNUINIT_MANAGER_OK;

        RCCONTROL.NUINSTANCESEQUENCE  := 0;
        RCCONTROL.NUENTITYSEQUENCE    := 0;
        RCCONTROL.NUATTRIBUTESEQUENCE := 0;

        RCCONTROL.NUINSTANCENAMESEQUENCE := 0;

        RCCONTROL.NUFIRSTINSTANCE := NULL;
        RCCONTROL.NULASTINSTANCE := NULL;

        RCCONTROL.NUINSERTBEFOREEXPRESSION := NULL;
        RCCONTROL.NUINSERTAFTEREXPRESSION  := NULL;
        RCCONTROL.NUUPDATEBEFOREEXPRESSION := NULL;
        RCCONTROL.NUUPDATEAFTEREXPRESSION  := NULL;
        RCCONTROL.NUDELETEBEFOREEXPRESSION := NULL;
        RCCONTROL.NUDELETEAFTEREXPRESSION  := NULL;

        
        ADDINSTANCESTACK (GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE, NULL, NULL, RCCONTROL.NUCONTROLINSTANCE);

        RCROLLBACKCONTROL.BLINITMANAGER := NULL;
    ELSE
        TBINITCONTROL(NUINITCOUNT).NUCURRENTINSTANCE  := RCCONTROL.NUCURRENTINSTANCE;
        TBINITCONTROL(NUINITCOUNT).NUCURRENTENTITY    := RCCONTROL.NUCURRENTENTITY;
        TBINITCONTROL(NUINITCOUNT).NUCURRENTATTRIBUTE := RCCONTROL.NUCURRENTATTRIBUTE;
        TBINITCONTROL(NUINITCOUNT).SBCURRENTINSTANCE  := RCCONTROL.SBCURRENTINSTANCE;
        TBINITCONTROL(NUINITCOUNT).SBCURRENTGROUP     := RCCONTROL.SBCURRENTGROUP;
        TBINITCONTROL(NUINITCOUNT).SBCURRENTENTITY    := RCCONTROL.SBCURRENTENTITY;
        TBINITCONTROL(NUINITCOUNT).SBCURRENTATTRIBUTE := RCCONTROL.SBCURRENTATTRIBUTE;
    END IF;

    RCCONTROL.NUCURRENTINSTANCE  := NULL;
    RCCONTROL.NUCURRENTENTITY    := NULL;
    RCCONTROL.NUCURRENTATTRIBUTE := NULL;
    RCCONTROL.SBCURRENTINSTANCE  := NULL;
    RCCONTROL.SBCURRENTGROUP     := NULL;
    RCCONTROL.SBCURRENTENTITY    := NULL;
    RCCONTROL.SBCURRENTATTRIBUTE := NULL;
        
    TBINITCONTROL(NUINITCOUNT).NUFIRSTINSTANCE := NULL;

    
    ADDINSTANCESTACK (GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE,  NULL, NULL, RCCONTROL.NUGLOBALINSTANCE);

    
    ADDENTITYSTACK (RCCONTROL.NUGLOBALINSTANCE, GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE, GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE, GE_BOINSTANCECONSTANTS.CSBGLOBAL_ENTITY, NULL, NUENTITY);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DESTROYINSTANCE
(
    INUINSTANCE IN NUMBER,
    ISBINSTANCE IN VARCHAR2
)
IS

NUENTITY            STYNUINDEX;
NUATTRIBUTE         STYNUINDEX;
NUINDEX             STYNUINDEX;
NUFATHER            STYNUINDEX;
NUPREVIOUSINSTANCE  STYNUINDEX;
NUNEXTINSTANCE      STYNUINDEX;
NUPREVIOUSBROTHER   STYNUINDEX;
NUNEXTBROTHER       STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.DestroyInstance Grupo Actual ['|| TO_NUMBER (TBINITCONTROL.COUNT - 1) ||']', 20);
    
    

    IF TBINSTANCESTACK(INUINSTANCE).NUFIRSTCHILDINSTANCE IS NOT NULL THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_HAVE_CHILD_INSTANCES, ISBINSTANCE);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    

    NUATTRIBUTE := TBINSTANCESTACK(INUINSTANCE).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        NUINDEX := NUATTRIBUTE;

        DELETEHASHRECORD (ISBINSTANCE || CSBSEPARATOR || TBATTRIBUTESTACK(NUATTRIBUTE).SBGROUP || CSBSEPARATOR || TBATTRIBUTESTACK(NUATTRIBUTE).SBENTITY || CSBSEPARATOR || TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE);

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTINSTANCEATTRIBUTE;

        TBATTRIBUTESTACK.DELETE(NUINDEX);
    END LOOP;

    

    NUENTITY := TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP
        NUINDEX := NUENTITY;

        DELETEHASHRECORD (ISBINSTANCE || CSBSEPARATOR || TBENTITYSTACK(NUENTITY).SBGROUP || CSBSEPARATOR || TBENTITYSTACK(NUENTITY).SBENTITY);

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;

        TBENTITYSTACK.DELETE(NUINDEX);
    END LOOP;

    

    NUFATHER := TBINSTANCESTACK(INUINSTANCE).NUFATHER;

    NUPREVIOUSINSTANCE := TBINSTANCESTACK(INUINSTANCE).NUPREVIOUSINSTANCE;
    NUNEXTINSTANCE     := TBINSTANCESTACK(INUINSTANCE).NUNEXTINSTANCE;
    NUPREVIOUSBROTHER  := TBINSTANCESTACK(INUINSTANCE).NUPREVIOUSBROTHERINSTANCE;
    NUNEXTBROTHER      := TBINSTANCESTACK(INUINSTANCE).NUNEXTBROTHERINSTANCE;

    

    
    IF NUFATHER IS NOT NULL THEN
        IF INUINSTANCE = TBINSTANCESTACK(NUFATHER).NUFIRSTCHILDINSTANCE THEN
            TBINSTANCESTACK(NUFATHER).NUFIRSTCHILDINSTANCE := NUNEXTBROTHER;
        END IF;

        IF INUINSTANCE = TBINSTANCESTACK(NUFATHER).NULASTCHILDINSTANCE THEN
            TBINSTANCESTACK(NUFATHER).NULASTCHILDINSTANCE := NUPREVIOUSBROTHER;
        END IF;
    END IF;
    

    IF INUINSTANCE = RCCONTROL.NUFIRSTINSTANCE THEN
        RCCONTROL.NUFIRSTINSTANCE := NUNEXTBROTHER;
    END IF;

    IF INUINSTANCE = RCCONTROL.NULASTINSTANCE THEN
        RCCONTROL.NULASTINSTANCE := NUPREVIOUSINSTANCE;
    END IF;

    

    IF NUPREVIOUSINSTANCE IS NOT NULL THEN
        TBINSTANCESTACK(NUPREVIOUSINSTANCE).NUNEXTINSTANCE := NUNEXTINSTANCE;
    END IF;

    IF NUNEXTINSTANCE IS NOT NULL THEN
        TBINSTANCESTACK(NUNEXTINSTANCE).NUPREVIOUSINSTANCE := NUPREVIOUSINSTANCE;
    END IF;

    

    IF NUPREVIOUSBROTHER IS NOT NULL THEN
        TBINSTANCESTACK(NUPREVIOUSBROTHER).NUNEXTBROTHERINSTANCE := NUNEXTBROTHER;
    END IF;

    IF NUNEXTBROTHER IS NOT NULL THEN
        TBINSTANCESTACK(NUNEXTBROTHER).NUPREVIOUSBROTHERINSTANCE := NUPREVIOUSBROTHER;
    END IF;

    

    DELETEHASHRECORD (ISBINSTANCE);

    TBINSTANCESTACK.DELETE(INUINSTANCE);

    

    IF ISBINSTANCE = RCCONTROL.SBCURRENTINSTANCE THEN
        RCCONTROL.NUCURRENTINSTANCE  := NULL;
        RCCONTROL.NUCURRENTENTITY    := NULL;
        RCCONTROL.NUCURRENTATTRIBUTE := NULL;

        RCCONTROL.SBCURRENTINSTANCE  := NULL;
        RCCONTROL.SBCURRENTGROUP     := NULL;
        RCCONTROL.SBCURRENTENTITY    := NULL;
        RCCONTROL.SBCURRENTATTRIBUTE := NULL;
    END IF;

    

    TBINSTANCECONTROL(INUINSTANCE).BLEXISTS := FALSE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE STOPINSTANCEMANAGER
IS

NUINITCOUNT     STYNUINDEX;
NUINSTANCE      STYNUINDEX;
NUNEXTINSTANCE  STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.StopInstanceManager Grupo Actual ['|| TO_NUMBER (TBINITCONTROL.COUNT - 1) ||']', 20);
    
    NUINITCOUNT := TBINITCONTROL.COUNT - 1;

    IF NUINITCOUNT < 0 THEN
        RETURN;
    END IF;

    IF NUINITCOUNT = 0 THEN
        CLOSECURSORS;

        TBINSTANCESTACK.DELETE;
        TBENTITYSTACK.DELETE;
        TBATTRIBUTESTACK.DELETE;
        TBENTITYLEVEL.DELETE;

        TBMULTISELECTWHERE.DELETE;
        TBMULTISELECTGROUP.DELETE;
        TBMULTISELECTORDER.DELETE;

        TBINSTANCEHASH.DELETE;

        TBMULTISELECTINDEXENTITY.DELETE;

        RCMULTISELECTCONTROL := NULL;

        RCCONTROL.BLINITMANAGER   := NULL;
        RCCONTROL.NUFIRSTINSTANCE := NULL;
        RCCONTROL.NULASTINSTANCE  := NULL;

        RCCONTROL.NUINSERTBEFOREEXPRESSION := NULL;
        RCCONTROL.NUINSERTAFTEREXPRESSION  := NULL;
        RCCONTROL.NUUPDATEBEFOREEXPRESSION := NULL;
        RCCONTROL.NUUPDATEAFTEREXPRESSION  := NULL;
        RCCONTROL.NUDELETEBEFOREEXPRESSION := NULL;
        RCCONTROL.NUDELETEAFTEREXPRESSION  := NULL;

        RCCONTROL.NUCURRENTINSTANCE  := NULL;
        RCCONTROL.NUCURRENTENTITY    := NULL;
        RCCONTROL.NUCURRENTATTRIBUTE := NULL;

        RCCONTROL.SBCURRENTINSTANCE  := NULL;
        RCCONTROL.SBCURRENTGROUP     := NULL;
        RCCONTROL.SBCURRENTENTITY    := NULL;
        RCCONTROL.SBCURRENTATTRIBUTE := NULL;
        RCCONTROL.NUCONTROLINSTANCE  := NULL;
        RCCONTROL.NUGLOBALINSTANCE   := NULL;

        RCCONTROL.NUINSTANCESEQUENCE  := 0;
        RCCONTROL.NUENTITYSEQUENCE    := 0;
        RCCONTROL.NUATTRIBUTESEQUENCE := 0;

        RCCONTROL.NUINSTANCENAMESEQUENCE := 0;

        

        RCROLLBACKCONTROL.BLINITMANAGER := NULL;

        TBROLLBACKINSTANCESTACK.DELETE;
        TBROLLBACKENTITYSTACK.DELETE;
        TBROLLBACKATTRIBUTESTACK.DELETE;

        TBROLLBACKINSTANCEHASH.DELETE;
    ELSE
        RCCONTROL.NUCURRENTINSTANCE  := TBINITCONTROL(NUINITCOUNT).NUCURRENTINSTANCE;
        RCCONTROL.NUCURRENTENTITY    := TBINITCONTROL(NUINITCOUNT).NUCURRENTENTITY;
        RCCONTROL.NUCURRENTATTRIBUTE := TBINITCONTROL(NUINITCOUNT).NUCURRENTATTRIBUTE;
        RCCONTROL.SBCURRENTINSTANCE  := TBINITCONTROL(NUINITCOUNT).SBCURRENTINSTANCE;
        RCCONTROL.SBCURRENTGROUP     := TBINITCONTROL(NUINITCOUNT).SBCURRENTGROUP;
        RCCONTROL.SBCURRENTENTITY    := TBINITCONTROL(NUINITCOUNT).SBCURRENTENTITY;
        RCCONTROL.SBCURRENTATTRIBUTE := TBINITCONTROL(NUINITCOUNT).SBCURRENTATTRIBUTE ;

        

        NUINSTANCE := TBINITCONTROL(NUINITCOUNT).NUFIRSTINSTANCE;

        WHILE NUINSTANCE IS NOT NULL LOOP
            IF TBINSTANCECONTROL(NUINSTANCE).BLEXISTS THEN
                DESTROYINSTANCE (TBINSTANCESTACK(NUINSTANCE).SBINSTANCE, TRUE);
            END IF;

            NUNEXTINSTANCE := TBINSTANCECONTROL(NUINSTANCE).NUNEXTINSTANCE;

            TBINSTANCECONTROL.DELETE(NUINSTANCE);

            NUINSTANCE := NUNEXTINSTANCE;
        END LOOP;

        
        ACCKEYINSTANCESTACK (GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE, NUINSTANCE);
        DESTROYINSTANCE (NUINSTANCE, GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE);
    END IF;

    TBINITCONTROL.DELETE(NUINITCOUNT);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



FUNCTION FNUGETINITCOUNT
RETURN NUMBER
IS
BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    RETURN (TBINITCONTROL.COUNT);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE CREATEINSTANCE
(
    ISBINSTANCE IN VARCHAR2,
    ISBFATHER   IN VARCHAR2 DEFAULT NULL
)
IS

NUINITCOUNT STYNUINDEX;
NUINSTANCE  STYNUINDEX;
NUFATHER    STYNUINDEX;
SBFATHER    STYSBNAME;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    IF FBLACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE) THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_INSTANCE_EXIST, ISBINSTANCE);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF ISBINSTANCE = GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE OR ISBINSTANCE = GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ERR_INSTANCE_NAME, ISBINSTANCE);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF ISBFATHER IS NOT NULL THEN
        SBFATHER := ISBFATHER;
    ELSE
        SBFATHER := GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE;
    END IF;

	ACCKEYINSTANCESTACK (SBFATHER, NUFATHER);

    ADDINSTANCESTACK (ISBINSTANCE, ISBFATHER, NUFATHER, NUINSTANCE);

    

    TBINSTANCECONTROL(NUINSTANCE).BLEXISTS := TRUE;
    TBINSTANCECONTROL(NUINSTANCE).NUNEXTINSTANCE := NULL;

    NUINITCOUNT := TBINITCONTROL.COUNT - 1;

    IF TBINITCONTROL(NUINITCOUNT).NUFIRSTINSTANCE IS NULL THEN
        TBINITCONTROL(NUINITCOUNT).NUFIRSTINSTANCE := NUINSTANCE;
    END IF;

    IF TBINITCONTROL(NUINITCOUNT).NULASTINSTANCE IS NOT NULL THEN
        TBINSTANCECONTROL(TBINITCONTROL(NUINITCOUNT).NULASTINSTANCE).NUNEXTINSTANCE := NUINSTANCE;
    END IF;

    TBINITCONTROL(NUINITCOUNT).NULASTINSTANCE := NUINSTANCE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DESTROYINSTANCE
(
    ISBINSTANCE         IN VARCHAR2,
    IBLHIERARCHYDESTROY IN BOOLEAN DEFAULT FALSE
)
IS

NUINSTANCE  STYNUINDEX;
NUINDEX     STYNUINDEX;

TBINSTANCEHIERARCHY  TYTBINSTANCEHIERARCHY;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    IF ISBINSTANCE = GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE OR ISBINSTANCE = GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_CONTROL_INSTANCE, ISBINSTANCE);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF TBINSTANCESTACK(NUINSTANCE).NUFIRSTCHILDINSTANCE IS NOT NULL THEN
        IF NOT IBLHIERARCHYDESTROY THEN
            ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_HAVE_CHILD_INSTANCES, ISBINSTANCE);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        INSTANCEHIERARCHY (ISBINSTANCE, TBINSTANCEHIERARCHY);

        IF TBINSTANCEHIERARCHY.COUNT != 0 THEN
            NUINDEX := TBINSTANCEHIERARCHY.LAST;
            WHILE NUINDEX IS NOT NULL LOOP
                DESTROYINSTANCE (TBINSTANCEHIERARCHY(NUINDEX).NUINSTANCE, TBINSTANCEHIERARCHY(NUINDEX).SBINSTANCE);

                NUINDEX := TBINSTANCEHIERARCHY.PRIOR(NUINDEX);
            END LOOP;
        END IF;
    END IF;

    DESTROYINSTANCE (NUINSTANCE, ISBINSTANCE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE RESETINSTANCE
(
    INUINSTANCE IN NUMBER,
    ISBINSTANCE IN VARCHAR2
)
IS

NUENTITY     STYNUINDEX;
NUATTRIBUTE  STYNUINDEX;
NUINDEX      STYNUINDEX;

BEGIN
    

    NUATTRIBUTE := TBINSTANCESTACK(INUINSTANCE).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        NUINDEX := NUATTRIBUTE;

        DELETEHASHRECORD (ISBINSTANCE || CSBSEPARATOR || TBATTRIBUTESTACK(NUATTRIBUTE).SBGROUP || CSBSEPARATOR || TBATTRIBUTESTACK(NUATTRIBUTE).SBENTITY || CSBSEPARATOR || TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE);

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTINSTANCEATTRIBUTE;

        TBATTRIBUTESTACK.DELETE(NUINDEX);
    END LOOP;

    

    NUENTITY := TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP
        NUINDEX := NUENTITY;

        DELETEHASHRECORD (ISBINSTANCE || CSBSEPARATOR || TBENTITYSTACK(NUENTITY).SBGROUP || CSBSEPARATOR || TBENTITYSTACK(NUENTITY).SBENTITY);

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;

        TBENTITYSTACK.DELETE(NUINDEX);
    END LOOP;

    

    TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY    := NULL;
    TBINSTANCESTACK(INUINSTANCE).NULASTENTITY     := NULL;
    TBINSTANCESTACK(INUINSTANCE).NUFIRSTATTRIBUTE := NULL;
    TBINSTANCESTACK(INUINSTANCE).NULASTATTRIBUTE  := NULL;

    TBINSTANCESTACK(INUINSTANCE).NUINSERTBEFOREEXPRESSION := NULL;
    TBINSTANCESTACK(INUINSTANCE).NUINSERTAFTEREXPRESSION  := NULL;
    TBINSTANCESTACK(INUINSTANCE).NUUPDATEBEFOREEXPRESSION := NULL;
    TBINSTANCESTACK(INUINSTANCE).NUUPDATEAFTEREXPRESSION  := NULL;
    TBINSTANCESTACK(INUINSTANCE).NUDELETEBEFOREEXPRESSION := NULL;
    TBINSTANCESTACK(INUINSTANCE).NUDELETEAFTEREXPRESSION  := NULL;

    

    IF ISBINSTANCE = RCCONTROL.SBCURRENTINSTANCE THEN
        RCCONTROL.NUCURRENTENTITY    := NULL;
        RCCONTROL.NUCURRENTATTRIBUTE := NULL;

        RCCONTROL.SBCURRENTGROUP     := NULL;
        RCCONTROL.SBCURRENTENTITY    := NULL;
        RCCONTROL.SBCURRENTATTRIBUTE := NULL;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE RESETINSTANCE
(
    ISBINSTANCE IN VARCHAR2
)
IS

NUINSTANCE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    RESETINSTANCE (NUINSTANCE, ISBINSTANCE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE COPYINSTANCE
(
    INUINSTANCE    IN NUMBER,
    ISBFATHER      IN VARCHAR2,
    ISBNEWINSTANCE IN VARCHAR2
)
IS

NUFATHER       STYNUINDEX;
NUNEWINSTANCE  STYNUINDEX;
NUNEWENTITY    STYNUINDEX;
NUENTITY       STYNUINDEX;
NUATTRIBUTE    STYNUINDEX;
NUINDEX        STYNUINDEX;

BEGIN
    IF FBLACCKEYINSTANCESTACK (ISBNEWINSTANCE, NUNEWINSTANCE) THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_INSTANCE_EXIST, ISBNEWINSTANCE);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF ISBFATHER IS NULL THEN
        NUFATHER := RCCONTROL.NUCONTROLINSTANCE;
    ELSE
        ACCKEYINSTANCESTACK (ISBFATHER, NUFATHER);
    END IF;

    ADDINSTANCESTACK (ISBNEWINSTANCE, ISBFATHER, NUFATHER, NUNEWINSTANCE);

    NUENTITY := TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP
        ADDENTITYSTACK (NUNEWINSTANCE, ISBNEWINSTANCE, TBENTITYSTACK(NUENTITY).SBGROUP, TBENTITYSTACK(NUENTITY).SBENTITY, TBENTITYSTACK(NUENTITY).NUCONTROLENTITY, NUNEWENTITY);

        NUATTRIBUTE := TBENTITYSTACK(NUENTITY).NUFIRSTATTRIBUTE;
        WHILE NUATTRIBUTE IS NOT NULL LOOP
            ADDATTRIBUTESTACK (NUNEWINSTANCE, ISBNEWINSTANCE, TBATTRIBUTESTACK(NUATTRIBUTE).SBGROUP, NUNEWENTITY, TBATTRIBUTESTACK(NUATTRIBUTE).SBENTITY, TBATTRIBUTESTACK(NUATTRIBUTE), GE_BOINSTANCECONSTANTS.CNUNOT_UPDATE_DB_DATA, NUINDEX);

            NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
        END LOOP;

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE COPYINSTANCE
(
    ISBINSTANCE  IN VARCHAR2,
    INUINSTANCES IN NUMBER
)
IS

NUINSTANCE     STYNUINDEX;
NUINDEX        STYNUINDEX;
SBNEWINSTANCE  STYSBNAME;

TBHIERARCHY    TYTBINSTANCEHIERARCHY;
TBNEWINSTANCE  TYTBINSTANCEHIERARCHY;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    IF ISBINSTANCE = GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE OR ISBINSTANCE = GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_CONTROL_INSTANCE, ISBINSTANCE);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    INSTANCEHIERARCHY (ISBINSTANCE, TBHIERARCHY);

    RCCONTROL.NUINSTANCENAMESEQUENCE := RCCONTROL.NUINSTANCENAMESEQUENCE + 1;

    SBNEWINSTANCE := TBINSTANCESTACK(NUINSTANCE).SBINSTANCE ||'-'|| LPAD (TO_CHAR (RCCONTROL.NUINSTANCENAMESEQUENCE), 4, '0');

    TBNEWINSTANCE.DELETE;

    IF TBHIERARCHY.COUNT != 0 THEN
        NUINDEX := TBHIERARCHY.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            TBNEWINSTANCE(NUINDEX).SBFATHER   := TBHIERARCHY(NUINDEX).SBFATHER   ||'-'|| LPAD (TO_CHAR (RCCONTROL.NUINSTANCENAMESEQUENCE), 4, '0');
            TBNEWINSTANCE(NUINDEX).SBINSTANCE := TBHIERARCHY(NUINDEX).SBINSTANCE ||'-'|| LPAD (TO_CHAR (RCCONTROL.NUINSTANCENAMESEQUENCE), 4, '0');

            NUINDEX := TBHIERARCHY.NEXT(NUINDEX);
        END LOOP;
    END IF;

    FOR NURECORD IN 1..INUINSTANCES LOOP
        COPYINSTANCE (NUINSTANCE, TBINSTANCESTACK(NUINSTANCE).SBFATHER, SBNEWINSTANCE ||'-'|| LPAD (TO_CHAR (NURECORD), 4, '0'));

        IF TBHIERARCHY.COUNT != 0 THEN
            NUINDEX := TBHIERARCHY.FIRST;
            WHILE NUINDEX IS NOT NULL LOOP
                COPYINSTANCE (TBHIERARCHY(NUINDEX).NUINSTANCE, TBNEWINSTANCE(NUINDEX).SBFATHER ||'-'|| LPAD (TO_CHAR (NURECORD), 4, '0'), TBNEWINSTANCE(NUINDEX).SBINSTANCE ||'-'|| LPAD (TO_CHAR (NURECORD), 4, '0'));

                NUINDEX := TBHIERARCHY.NEXT(NUINDEX);
            END LOOP;
        END IF;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE DESTROYENTITY
(
    INUINSTANCE IN NUMBER,
    INUENTITY   IN NUMBER
)
IS

NUATTRIBUTE  STYNUINDEX;
NUINDEX      STYNUINDEX;

BEGIN
    

    NUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        NUINDEX := NUATTRIBUTE;

        IF TBATTRIBUTESTACK(NUATTRIBUTE).NUPREVIOUSINSTANCEATTRIBUTE IS NOT NULL THEN
            TBATTRIBUTESTACK(TBATTRIBUTESTACK(NUATTRIBUTE).NUPREVIOUSINSTANCEATTRIBUTE).NUNEXTINSTANCEATTRIBUTE :=
                       TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTINSTANCEATTRIBUTE;
        END IF;

        IF TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTINSTANCEATTRIBUTE IS NOT NULL THEN
            TBATTRIBUTESTACK(TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTINSTANCEATTRIBUTE).NUPREVIOUSINSTANCEATTRIBUTE :=
                       TBATTRIBUTESTACK(NUATTRIBUTE).NUPREVIOUSINSTANCEATTRIBUTE;
        END IF;

        IF NUATTRIBUTE = TBINSTANCESTACK(INUINSTANCE).NUFIRSTATTRIBUTE THEN
            TBINSTANCESTACK(INUINSTANCE).NUFIRSTATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTINSTANCEATTRIBUTE;
        END IF;

        IF NUATTRIBUTE = TBINSTANCESTACK(INUINSTANCE).NULASTATTRIBUTE THEN
            TBINSTANCESTACK(INUINSTANCE).NULASTATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUPREVIOUSINSTANCEATTRIBUTE;
        END IF;

        DELETEHASHRECORD (TBATTRIBUTESTACK(NUATTRIBUTE).SBINSTANCE || CSBSEPARATOR || TBATTRIBUTESTACK(NUATTRIBUTE).SBGROUP || CSBSEPARATOR || TBATTRIBUTESTACK(NUATTRIBUTE).SBENTITY || CSBSEPARATOR || TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE);

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;

        TBATTRIBUTESTACK.DELETE(NUINDEX);
    END LOOP;

    

    IF TBENTITYSTACK(INUENTITY).NUPREVIOUSENTITY IS NOT NULL THEN
        TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUPREVIOUSENTITY).NUNEXTENTITY :=
                   TBENTITYSTACK(INUENTITY).NUNEXTENTITY;
    END IF;

    IF TBENTITYSTACK(INUENTITY).NUNEXTENTITY IS NOT NULL THEN
        TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUNEXTENTITY).NUPREVIOUSENTITY :=
                   TBENTITYSTACK(INUENTITY).NUPREVIOUSENTITY;
    END IF;

    IF INUENTITY = TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY THEN
        TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY := TBENTITYSTACK(INUENTITY).NUNEXTENTITY;
    END IF;

    IF INUENTITY = TBINSTANCESTACK(INUINSTANCE).NULASTENTITY THEN
        TBINSTANCESTACK(INUINSTANCE).NULASTENTITY := TBENTITYSTACK(INUENTITY).NUPREVIOUSENTITY;
    END IF;

    

    DELETEHASHRECORD (TBENTITYSTACK(INUENTITY).SBINSTANCE || CSBSEPARATOR || TBENTITYSTACK(INUENTITY).SBGROUP || CSBSEPARATOR || TBENTITYSTACK(INUENTITY).SBENTITY);

    TBENTITYSTACK.DELETE(INUENTITY);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DESTROYENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
IS

NUINSTANCE  STYNUINDEX;
NUENTITY    STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.DestroyEntity ['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']', 21);

    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    DESTROYENTITY (NUINSTANCE, NUENTITY);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




PROCEDURE SETCURRENTDATA
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
IS

NUINSTANCE  STYNUINDEX;
NUENTITY    STYNUINDEX;
NUATTRIBUTE STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.SetCurrentData ['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']['|| ISBATTRIBUTE ||']', 22);

    VALIDATEINSTANCEMANAGER (FALSE);

    NUINSTANCE  := NULL;
    NUENTITY    := NULL;
    NUATTRIBUTE := NULL;

    IF ISBINSTANCE IS NOT NULL THEN
        ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);
    END IF;

    IF ISBENTITY IS NOT NULL THEN
        ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);
    END IF;

    IF ISBATTRIBUTE IS NOT NULL THEN
        ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);
    END IF;

    RCCONTROL.NUCURRENTINSTANCE  := NUINSTANCE;
    RCCONTROL.NUCURRENTENTITY    := NUENTITY;
    RCCONTROL.NUCURRENTATTRIBUTE := NUATTRIBUTE;

    RCCONTROL.SBCURRENTINSTANCE  := ISBINSTANCE;
    RCCONTROL.SBCURRENTGROUP     := ISBGROUP;
    RCCONTROL.SBCURRENTENTITY    := ISBENTITY;
    RCCONTROL.SBCURRENTATTRIBUTE := ISBATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETCURRENTDATA
(
    OSBINSTANCE  OUT VARCHAR2,
    OSBGROUP     OUT VARCHAR2,
    OSBENTITY    OUT VARCHAR2,
    OSBATTRIBUTE OUT VARCHAR2
)
IS
BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    OSBINSTANCE  := RCCONTROL.SBCURRENTINSTANCE;
    OSBGROUP     := RCCONTROL.SBCURRENTGROUP;
    OSBENTITY    := RCCONTROL.SBCURRENTENTITY;
    OSBATTRIBUTE := RCCONTROL.SBCURRENTATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETCURRENTINDEXDATA
(
    ONUINSTANCE  OUT NUMBER,
    ONUENTITY    OUT NUMBER,
    ONUATTRIBUTE OUT NUMBER
)
IS
BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ONUINSTANCE  := RCCONTROL.NUCURRENTINSTANCE;
    ONUENTITY    := RCCONTROL.NUCURRENTENTITY;
    ONUATTRIBUTE := RCCONTROL.NUCURRENTATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETCURRENTINSTANCE
(
    OSBINSTANCE OUT VARCHAR2
)
IS
BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    OSBINSTANCE := RCCONTROL.SBCURRENTINSTANCE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETINSTANCENAME
(
    INUINSTANCE IN STYNUINDEX,
    OSBINSTANCE OUT VARCHAR2
)
IS
BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    OSBINSTANCE := TBINSTANCESTACK(INUINSTANCE).SBINSTANCE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETFATHERINSTANCE
(
    ISBINSTANCE IN VARCHAR2,
    OSBFATHER   OUT VARCHAR2
)
IS

NUINSTANCE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    IF ISBINSTANCE IS NULL THEN
        OSBFATHER := NULL;
        RETURN;
    END IF;

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    OSBFATHER := TBINSTANCESTACK(NUINSTANCE).SBFATHER;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETFATHERCURRENTINSTANCE
(
    OSBFATHER OUT VARCHAR2
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (TRUE);

    OSBFATHER := TBINSTANCESTACK(RCCONTROL.NUCURRENTINSTANCE).SBFATHER;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




PROCEDURE EXECUTEEXPRESSION
(
    INUEXPRESSION IN NUMBER
)
IS

NUERROR   NUMBER(10);
SBERROR   VARCHAR2(2000);

BEGIN
    IF INUEXPRESSION IS NULL THEN
        RETURN;
    END IF;

    UT_TRACE.TRACE ('ExecuteExpression ['|| TO_CHAR (INUEXPRESSION) ||'] ==>> ['|| RCCONTROL.SBCURRENTINSTANCE ||']['|| RCCONTROL.SBCURRENTGROUP ||']['|| RCCONTROL.SBCURRENTENTITY ||']['|| RCCONTROL.SBCURRENTATTRIBUTE ||']', 2);

    NUERROR := CONSTANTS.CNUSUCCESS;
    SBERROR := NULL;

    GR_BOCONFIG_EXPRESSION.EXECUTE (INUEXPRESSION, NUERROR, SBERROR);

    UT_TRACE.TRACE ('ExecuteExpression return ['|| TO_CHAR (INUEXPRESSION) ||'] <<== ['|| NUERROR ||'|'|| SBERROR ||']', 2);

    IF NVL (NUERROR, CONSTANTS.CNUSUCCESS) <> CONSTANTS.CNUSUCCESS THEN
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE ADDENTITYROWID
(
    INUINSTANCE   IN NUMBER,
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2
)
IS

RCATTRIBUTE TYRCATTRIBUTESTACK;

NUATTRIBUTE  STYNUINDEX;
NUENTITY     STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.AddEntityRowid ['|| INUINSTANCE ||']['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']', 25);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    RCATTRIBUTE.NUINSTANCE        := INUINSTANCE;
    RCATTRIBUTE.NUENTITY          := NUENTITY;
    RCATTRIBUTE.SBGROUP           := ISBGROUP;
    RCATTRIBUTE.SBENTITY          := ISBENTITY;
    RCATTRIBUTE.SBATTRIBUTE       := GE_BOINSTANCECONSTANTS.CSBROWID;
    RCATTRIBUTE.BLPERSISTENT      := GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT;
    RCATTRIBUTE.NUTYPE            := GE_BOCONSTANTS.CNUROWID;
    RCATTRIBUTE.NULENGTH          := GE_BOINSTANCECONSTANTS.CNUROWID_LENGTH;
    RCATTRIBUTE.BLISKEY           := GE_BOINSTANCECONSTANTS.CNUFALSE;
    RCATTRIBUTE.BLISNULL          := GE_BOINSTANCECONSTANTS.CNUFALSE;
    RCATTRIBUTE.BLREQUIRED        := GE_BOINSTANCECONSTANTS.CNUFALSE;
    RCATTRIBUTE.BLPARAMETERVALUE  := GE_BOINSTANCECONSTANTS.CNUFALSE;
    RCATTRIBUTE.BLNEWVALUEUPDATE  := GE_BOINSTANCECONSTANTS.CNUFALSE;
    RCATTRIBUTE.BLBINDATTRIBUTE   := GE_BOINSTANCECONSTANTS.CNUFALSE;

    ADDATTRIBUTESTACK (INUINSTANCE, ISBINSTANCE, ISBGROUP, NUENTITY, ISBENTITY, RCATTRIBUTE, GE_BOINSTANCECONSTANTS.CNUNOT_UPDATE_DB_DATA, NUATTRIBUTE);

    TBENTITYSTACK(NUENTITY).NUROWIDINDEX := NUATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE LOADENTITYDATA
(
    INUENTITY     IN STYNUINDEX,
    OBLPERSISTENT OUT STYNUBOOLEAN
)
IS

NURECORDS STYNUINDEX := 0;

BEGIN
    TBENTITYSTACK(INUENTITY).BLPERSISTENT := GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT;

    FOR RCENTITYDATA IN GE_BCINSTANCECURSORS.CUENTITYDATA (TBENTITYSTACK(INUENTITY).SBENTITY) LOOP
        TBENTITYSTACK(INUENTITY).NUENTITYID := RCENTITYDATA.ENTITY_ID;
        TBENTITYSTACK(INUENTITY).NULEVEL := RCENTITYDATA.INS_SEQ;

        IF RCENTITYDATA.IN_PERSIST = GE_BOINSTANCEPARAMETER.FSBGETYES THEN
            TBENTITYSTACK(INUENTITY).BLPERSISTENT := GE_BOINSTANCECONSTANTS.CNUPERSISTENT;
        END IF;

        NURECORDS := NURECORDS + 1;
    END LOOP;

    OBLPERSISTENT := TBENTITYSTACK(INUENTITY).BLPERSISTENT;






    IF NURECORDS > 1 THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_DUPLICATE_ENTITY, TBENTITYSTACK(INUENTITY).SBENTITY);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE LOADENTITYEXPRESSIONS
(
    INUENTITY IN STYNUINDEX
)
IS
BEGIN
    FOR RCENTITYEXPRESSION IN GE_BCINSTANCECURSORS.CUENTITYEXPRESSION (TBENTITYSTACK(INUENTITY).SBENTITY) LOOP
        IF RCENTITYEXPRESSION.EXECUTING_TIME = GE_BOINSTANCEPARAMETER.FSBGETBEFORETIME THEN
            IF RCENTITYEXPRESSION.EVENT_ID = GE_BOINSTANCEPARAMETER.FNUGETCREATEEVENT THEN
                TBENTITYSTACK(INUENTITY).NUINSERTBEFOREEXPRESSION := RCENTITYEXPRESSION.CONFIG_EXPRESSION_ID;

            ELSIF RCENTITYEXPRESSION.EVENT_ID = GE_BOINSTANCEPARAMETER.FNUGETUPDATEEVENT THEN
                TBENTITYSTACK(INUENTITY).NUUPDATEBEFOREEXPRESSION := RCENTITYEXPRESSION.CONFIG_EXPRESSION_ID;

            ELSE
                TBENTITYSTACK(INUENTITY).NUDELETEBEFOREEXPRESSION := RCENTITYEXPRESSION.CONFIG_EXPRESSION_ID;
            END IF;
        ELSE
            IF RCENTITYEXPRESSION.EVENT_ID = GE_BOINSTANCEPARAMETER.FNUGETCREATEEVENT THEN
                TBENTITYSTACK(INUENTITY).NUINSERTAFTEREXPRESSION := RCENTITYEXPRESSION.CONFIG_EXPRESSION_ID;

            ELSIF RCENTITYEXPRESSION.EVENT_ID = GE_BOINSTANCEPARAMETER.FNUGETUPDATEEVENT THEN
                TBENTITYSTACK(INUENTITY).NUUPDATEAFTEREXPRESSION := RCENTITYEXPRESSION.CONFIG_EXPRESSION_ID;

            ELSE
                TBENTITYSTACK(INUENTITY).NUDELETEAFTEREXPRESSION := RCENTITYEXPRESSION.CONFIG_EXPRESSION_ID;
            END IF;
        END IF;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE LOADCONTROLATTRIBUTES
(
    ISBENTITY  IN VARCHAR2,
    IONUENTITY IN OUT STYNUINDEX
)
IS

RCATTRIBUTESTACK  TYRCATTRIBUTESTACK;

NUATTRIBUTE       STYNUINDEX;

SBCAMPOS   STYSBSQL;
SBVALORES  STYSBSQL;
SBKEY      VARCHAR2(1000);

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.LoadControlAttributes ['|| ISBENTITY ||']['|| IONUENTITY ||']', 23);

    VALIDATEINSTANCEMANAGER (FALSE);

    IF FBLACCKEYENTITYSTACK (GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE, NULL, ISBENTITY, IONUENTITY) THEN
        RETURN;
    END IF;

    ADDENTITYSTACK (RCCONTROL.NUCONTROLINSTANCE, GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE, NULL, ISBENTITY, NULL, IONUENTITY);

    IF TBENTITYSTACK(IONUENTITY).BLLOADATTRIBUTES = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
        RETURN;
    END IF;

    LOADENTITYDATA (IONUENTITY, TBENTITYSTACK(IONUENTITY).BLPERSISTENT);

    IF TBENTITYSTACK(IONUENTITY).BLPERSISTENT = GE_BOINSTANCECONSTANTS.CNUPERSISTENT THEN
        LOADENTITYEXPRESSIONS (IONUENTITY);

        ADDENTITYROWID (RCCONTROL.NUCONTROLINSTANCE, GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE, NULL, ISBENTITY);
    END IF;

    SBCAMPOS := NULL;
    SBVALORES := NULL;

    FOR RC_ATTRIBUTESTACK IN GE_BCINSTANCECURSORS.CUENTITYATTRIBUTE (ISBENTITY) LOOP
        IF FBLVALIDATEATTRIBUTETYPE (RC_ATTRIBUTESTACK.ATTRIBUTE_TYPE, TBENTITYSTACK(IONUENTITY).BLPERSISTENT) THEN
            SBKEY := GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE || CSBSEPARATOR || ISBENTITY  || CSBSEPARATOR || RC_ATTRIBUTESTACK.ATTRIBUTE_;
            
            IF FBLACCKEYHASHRECORD (SBKEY, NUATTRIBUTE) THEN
                ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_DUPLICATE_ATTR_NAME, RC_ATTRIBUTESTACK.ATTRIBUTE_ ||'|'|| FSBENTITYNAME (IONUENTITY));
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            RCATTRIBUTESTACK.NUINSTANCE    := RCCONTROL.NUCONTROLINSTANCE;
            RCATTRIBUTESTACK.NUENTITY      := IONUENTITY;
            RCATTRIBUTESTACK.SBGROUP       := NULL;
            RCATTRIBUTESTACK.SBENTITY      := ISBENTITY;
            RCATTRIBUTESTACK.SBATTRIBUTE   := RC_ATTRIBUTESTACK.ATTRIBUTE_;
            RCATTRIBUTESTACK.BLPERSISTENT  := TBENTITYSTACK(IONUENTITY).BLPERSISTENT;
            RCATTRIBUTESTACK.NUATTRIBUTEID := RC_ATTRIBUTESTACK.ATTRIBUTE_ID;
            RCATTRIBUTESTACK.NUTYPE        := RC_ATTRIBUTESTACK.ATTRIBUTE_TYPE;
            RCATTRIBUTESTACK.NULENGTH      := RC_ATTRIBUTESTACK.LENGTH_;
            RCATTRIBUTESTACK.NUSCALE       := RC_ATTRIBUTESTACK.SCALE;
            RCATTRIBUTESTACK.NUMASKTYPE    := RC_ATTRIBUTESTACK.MASK_TYPE;
            RCATTRIBUTESTACK.SBNEWVALUE    := RC_ATTRIBUTESTACK.DEFAULT_VALUE;

            RCATTRIBUTESTACK.BLREQUIRED        := GE_BOINSTANCECONSTANTS.CNUFALSE;
            RCATTRIBUTESTACK.BLPARAMETERVALUE  := GE_BOINSTANCECONSTANTS.CNUFALSE;
            RCATTRIBUTESTACK.BLNEWVALUEUPDATE  := GE_BOINSTANCECONSTANTS.CNUTRUE;
            RCATTRIBUTESTACK.BLBINDATTRIBUTE   := GE_BOINSTANCECONSTANTS.CNUFALSE;

            RCATTRIBUTESTACK.NUINITIALIZEEXPRESSION := RC_ATTRIBUTESTACK.INIT_EXPRESSION_ID;
            RCATTRIBUTESTACK.NUPROCESSEXPRESSION    := RC_ATTRIBUTESTACK.VALID_EXPRESSION_ID;

            IF RC_ATTRIBUTESTACK.KEY_ = GE_BOINSTANCEPARAMETER.FSBGETYES THEN
                RCATTRIBUTESTACK.BLISKEY := GE_BOINSTANCECONSTANTS.CNUTRUE;
            ELSE
                RCATTRIBUTESTACK.BLISKEY := GE_BOINSTANCECONSTANTS.CNUFALSE;
            END IF;

            IF RC_ATTRIBUTESTACK.IS_NULL = GE_BOINSTANCEPARAMETER.FSBGETYES THEN
                RCATTRIBUTESTACK.BLISNULL := GE_BOINSTANCECONSTANTS.CNUTRUE;
            ELSE
                RCATTRIBUTESTACK.BLISNULL := GE_BOINSTANCECONSTANTS.CNUFALSE;
            END IF;

            ADDATTRIBUTESTACK (RCCONTROL.NUCONTROLINSTANCE, GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE, NULL, IONUENTITY, ISBENTITY, RCATTRIBUTESTACK, GE_BOINSTANCECONSTANTS.CNUUPDATE_DB_DATA, NUATTRIBUTE);

            TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE := GE_BOINSTANCECONSTANTS.CNUTRUE;
            
            SBCAMPOS  := SBCAMPOS  || RCATTRIBUTESTACK.SBATTRIBUTE || ', ';
            SBVALORES := SBVALORES || ':VAR_' || RCATTRIBUTESTACK.SBATTRIBUTE || ', ';
        END IF;
    END LOOP;

    SBCAMPOS  := SUBSTR (SBCAMPOS,  1, LENGTH (SBCAMPOS)  - 2);
    SBVALORES := SUBSTR (SBVALORES, 1, LENGTH (SBVALORES) - 2);

    TBENTITYSTACK(IONUENTITY).SBINSERT := 'INSERT INTO '|| ISBENTITY ||' ('|| SBCAMPOS ||') VALUES ('|| SBVALORES ||')';
    TBENTITYSTACK(IONUENTITY).SBSELECT := 'SELECT '|| GE_BOINSTANCECONSTANTS.CSBROWID ||', '|| SBCAMPOS ||' FROM '|| ISBENTITY;

    TBENTITYSTACK(IONUENTITY).BLLOADATTRIBUTES := GE_BOINSTANCECONSTANTS.CNUTRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE LOADENTITYATTRIBUTES
(
    ISBINSTANCE    IN VARCHAR2,
    INUINSTANCE    IN NUMBER,
    ISBGROUP       IN VARCHAR2,
    ISBENTITY      IN VARCHAR2,
    INUENTITY      IN NUMBER,
    IBLEXPRESSIONS IN BOOLEAN,
    IBLLOADDEFAULT IN BOOLEAN
)
IS

SBCURRENTINSTANCE   STYSBNAME;
SBCURRENTGROUP      STYSBNAME;
SBCURRENTENTITY     STYSBNAME;
SBCURRENTATTRIBUTE  STYSBNAME;
        
NUATTRIBUTE         STYNUINDEX;
NUCONTROLATTRIBUTE  STYNUINDEX;

RCATTRIBUTE  TYRCATTRIBUTESTACK;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.LoadAllEntityAttributes INICIO', 24);

    IF TBENTITYSTACK(INUENTITY).BLLOADATTRIBUTES = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
        RETURN;
    END IF;

    GETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);

    NUCONTROLATTRIBUTE := TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUCONTROLENTITY).NUFIRSTATTRIBUTE;
    WHILE NUCONTROLATTRIBUTE IS NOT NULL LOOP

        IF NOT FBLACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).SBATTRIBUTE, NUATTRIBUTE) THEN
            RCATTRIBUTE := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE);

            RCATTRIBUTE.NUCONTROLATTRIBUTE := NUCONTROLATTRIBUTE;
            RCATTRIBUTE.SBNEWVALUE         := NULL;
            RCATTRIBUTE.SBOLDVALUE         := NULL;

            ADDATTRIBUTESTACK (INUINSTANCE, ISBINSTANCE, ISBGROUP, INUENTITY, ISBENTITY, RCATTRIBUTE, GE_BOINSTANCECONSTANTS.CNUNOT_UPDATE_DB_DATA, NUATTRIBUTE);

            IF RCATTRIBUTE.NUTYPE = GE_BOCONSTANTS.CNUROWID THEN
                TBENTITYSTACK(INUENTITY).NUROWIDINDEX := NUATTRIBUTE;
            END IF;
        ELSE
            IF TBATTRIBUTESTACK(NUATTRIBUTE).NUINITIALIZEEXPRESSION IS NULL THEN
                TBATTRIBUTESTACK(NUATTRIBUTE).NUINITIALIZEEXPRESSION := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NUINITIALIZEEXPRESSION;
            END IF;

            IF TBATTRIBUTESTACK(NUATTRIBUTE).NUPROCESSEXPRESSION IS NULL THEN
                TBATTRIBUTESTACK(NUATTRIBUTE).NUPROCESSEXPRESSION := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NUPROCESSEXPRESSION;
            END IF;
        END IF;

        TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).BLBINDATTRIBUTE;
        
        IF IBLEXPRESSIONS THEN
            IF TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE IS NULL THEN
                TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).SBNEWVALUE;

                IF TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NUINITIALIZEEXPRESSION IS NOT NULL THEN
                    SETCURRENTDATA (ISBINSTANCE, ISBGROUP, ISBENTITY, TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).SBATTRIBUTE);

                    EXECUTEEXPRESSION (TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NUINITIALIZEEXPRESSION);
                END IF;
            END IF;
        END IF;

        NUCONTROLATTRIBUTE := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

    TBENTITYSTACK(INUENTITY).BLLOADATTRIBUTES := GE_BOINSTANCECONSTANTS.CNUTRUE;

    SETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE LOADENTITYATTRIBUTES
(
    ISBINSTANCE     IN VARCHAR2,
    ISBGROUP        IN VARCHAR2,
    ISBENTITY       IN VARCHAR2,
    IBLEXPRESSIONS  IN BOOLEAN DEFAULT TRUE,
    IBLLOADDEFAULT  IN BOOLEAN DEFAULT TRUE
)
IS

NUINSTANCE       STYNUINDEX;
NUCONTROLENTITY  STYNUINDEX;
NUENTITY         STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.LoadEntityAttributes ['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']', 22);

    VALIDATEINSTANCEMANAGER (FALSE);

    VALIDATENULLNAMES (ISBINSTANCE, ISBGROUP, ISBENTITY);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

 
    LOADCONTROLATTRIBUTES (ISBENTITY, NUCONTROLENTITY);

 
    IF NOT FBLACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY) THEN
        ADDENTITYSTACK (NUINSTANCE, ISBINSTANCE, ISBGROUP, ISBENTITY, NUCONTROLENTITY, NUENTITY);
    END IF;

 
    IF TBENTITYSTACK(NUENTITY).BLLOADATTRIBUTES = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
        RETURN;
    END IF;

    LOADENTITYATTRIBUTES (ISBINSTANCE, TBENTITYSTACK(NUENTITY).NUINSTANCE, ISBGROUP, ISBENTITY, NUENTITY, IBLEXPRESSIONS, IBLLOADDEFAULT);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE LOADINSTANCEATTRIBUTES
(
    INUINSTANCE    IN NUMBER,
    ISBINSTANCE    IN VARCHAR2,
    IBLEXPRESSIONS IN BOOLEAN,
    IBLLOADDEFAULT IN BOOLEAN DEFAULT TRUE
)
IS

NUENTITY  STYNUINDEX;

BEGIN
    NUENTITY := TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP

        LOADENTITYATTRIBUTES (TBENTITYSTACK(NUENTITY).SBINSTANCE, TBENTITYSTACK(NUENTITY).NUINSTANCE, TBENTITYSTACK(NUENTITY).SBGROUP, TBENTITYSTACK(NUENTITY).SBENTITY, TBENTITYSTACK(NUENTITY).NUENTITY, IBLEXPRESSIONS, IBLLOADDEFAULT);

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE LOADINSTANCEATTRIBUTES
(
    ISBINSTANCE    IN VARCHAR2,
    IBLEXPRESSIONS IN BOOLEAN DEFAULT TRUE,
    IBLLOADDEFAULT IN BOOLEAN DEFAULT TRUE
)
IS

TBINSTANCEHIERARCHY  TYTBINSTANCEHIERARCHY;

NUINSTANCE  STYNUINDEX;
NUENTITY    STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.LoadInstanceAttributes INICIO ['|| ISBINSTANCE ||']', 21);

    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    LOADINSTANCEATTRIBUTES (NUINSTANCE, ISBINSTANCE, IBLEXPRESSIONS);

    INSTANCEHIERARCHY (ISBINSTANCE, TBINSTANCEHIERARCHY);

    NUINSTANCE := TBINSTANCEHIERARCHY.FIRST;
    WHILE NUINSTANCE IS NOT NULL LOOP
        LOADINSTANCEATTRIBUTES (TBINSTANCEHIERARCHY(NUINSTANCE).NUINSTANCE, TBINSTANCEHIERARCHY(NUINSTANCE).SBINSTANCE, IBLEXPRESSIONS, IBLLOADDEFAULT);

        NUINSTANCE := TBINSTANCEHIERARCHY.NEXT(NUINSTANCE);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE LOADALLATTRIBUTES
(
    IBLEXPRESSIONS IN BOOLEAN DEFAULT TRUE,
    IBLLOADDEFAULT IN BOOLEAN DEFAULT TRUE
)
IS

NUINSTANCE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    NUINSTANCE := RCCONTROL.NUFIRSTINSTANCE;
    WHILE NUINSTANCE IS NOT NULL LOOP
        LOADINSTANCEATTRIBUTES (TBINSTANCESTACK(NUINSTANCE).SBINSTANCE, IBLEXPRESSIONS, IBLLOADDEFAULT);

        NUINSTANCE := TBINSTANCESTACK(NUINSTANCE).NUNEXTINSTANCE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




PROCEDURE SETATTRIBUTENEWVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.SetAttributeNewValue Instance['|| ISBINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| ISBENTITY ||'] Attribute['|| ISBATTRIBUTE ||'] Value['|| ISBVALUE ||']', 21);

    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE := ISBVALUE;
    TBATTRIBUTESTACK(NUATTRIBUTE).BLPARAMETERVALUE := GE_BOINSTANCECONSTANTS.CNUTRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETATTRIBUTEOLDVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.SetAttributeOldValue Instance['|| ISBINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| ISBENTITY ||'] Attribute['|| ISBATTRIBUTE ||'] Value['|| ISBVALUE ||']', 21);

    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE := ISBVALUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETATTRIBUTENEWVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    OSBVALUE := TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE;

    UT_TRACE.TRACE ('ge_boInstanceControl.GetAttributeNewValue Instance['|| ISBINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| ISBENTITY ||'] Attribute['|| ISBATTRIBUTE ||'] Value['|| OSBVALUE ||']', 21);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;






























PROCEDURE QUERYATTRIBUTENEWVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
)
IS

NUATTRIBUTE  STYNUINDEX;
BLFOUND BOOLEAN;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    BLFOUND := FBLQUERYKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    IF (BLFOUND) THEN
        OSBVALUE := TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE;

    ELSE
        OSBVALUE := TA_BCGESTIONCRITERIOS.CSBDATO_NULO;

    END IF ;

    UT_TRACE.TRACE ('ge_boInstanceControl.GetAttributeNewValue Instance['|| ISBINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| ISBENTITY ||'] Attribute['|| ISBATTRIBUTE ||'] Value['|| OSBVALUE ||']', 21);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




PROCEDURE GETATTRIBUTEOLDVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    OSBVALUE := TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE;

    UT_TRACE.TRACE ('ge_boInstanceControl.GetAttributeOldValue Instance['|| ISBINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| ISBENTITY ||'] Attribute['|| ISBATTRIBUTE ||'] Value['|| OSBVALUE ||']', 21);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FSBGETATTRIBUTENEWVALUE
(
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
RETURN VARCHAR2
IS

NUINDEX  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (RCCONTROL.SBCURRENTINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUINDEX);

    UT_TRACE.TRACE ('ge_boInstanceControl.fsbGetAttributeNewValue Instance['|| RCCONTROL.SBCURRENTINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| ISBENTITY ||'] Attribute['|| ISBATTRIBUTE ||'] Value['|| TBATTRIBUTESTACK(NUINDEX).SBNEWVALUE ||']', 21);

    RETURN (TBATTRIBUTESTACK(NUINDEX).SBNEWVALUE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETOKPARAMETERVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    TBATTRIBUTESTACK(NUATTRIBUTE).BLPARAMETERVALUE := GE_BOINSTANCECONSTANTS.CNUTRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETNOTOKPARAMETERVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    TBATTRIBUTESTACK(NUATTRIBUTE).BLPARAMETERVALUE := GE_BOINSTANCECONSTANTS.CNUFALSE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE GETCURRENTDATAATTRIBUTE
(
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
)
IS

SBINSTANCE   STYSBNAME;
SBGROUP      STYSBNAME;
SBENTITY     STYSBNAME;
SBATTRIBUTE  STYSBNAME;

BEGIN
    GETCURRENTDATA (SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE);

    VALIDATENULLNAMES (SBINSTANCE, SBGROUP, SBENTITY, ISBATTRIBUTE);

    GETATTRIBUTENEWVALUE (SBINSTANCE, SBGROUP, SBENTITY, ISBATTRIBUTE, OSBVALUE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETCURRENTDATAATTRIBUTE
(
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2
)
IS

SBINSTANCE   STYSBNAME;
SBGROUP      STYSBNAME;
SBENTITY     STYSBNAME;
SBATTRIBUTE  STYSBNAME;

BEGIN
    GETCURRENTDATA (SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE);

    VALIDATENULLNAMES (SBINSTANCE, SBGROUP, SBENTITY, ISBATTRIBUTE);

    SETATTRIBUTENEWVALUE (SBINSTANCE, SBGROUP, SBENTITY, ISBATTRIBUTE, ISBVALUE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




PROCEDURE GETENTITYATTRIBUTE
(
    OSBVALOR OUT VARCHAR2
)
IS

SBINSTANCE   STYSBNAME;
SBGROUP      STYSBNAME;
SBENTITY     STYSBNAME;
SBATTRIBUTE  STYSBNAME;

BEGIN
    GETCURRENTDATA (SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE);

    VALIDATENULLNAMES (SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE);

    GETATTRIBUTENEWVALUE (SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE, OSBVALOR);

EXCEPTION
   WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

   WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETENTITYATTRIBUTE
(
    ISBVALOR IN VARCHAR2
)
IS

SBINSTANCE   STYSBNAME;
SBGROUP      STYSBNAME;
SBENTITY     STYSBNAME;
SBATTRIBUTE  STYSBNAME;

BEGIN
    GETCURRENTDATA (SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE);

    VALIDATENULLNAMES (SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE);

    SETATTRIBUTENEWVALUE (SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE, ISBVALOR);

EXCEPTION
   WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

   WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




PROCEDURE ADDATTRIBUTE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2,
    IBLUPDATE    IN BOOLEAN DEFAULT FALSE
)
IS

RCATTRIBUTESTACK  TYRCATTRIBUTESTACK;

NUCONTROLATTRIBUTE  STYNUINDEX;
NUATTRIBUTE         STYNUINDEX;
NUCONTROLINSTANCE   STYNUINDEX;
NUCURRENTINSTANCE   STYNUINDEX;
NUCONTROLENTITY     STYNUINDEX;
NUCURRENTENTITY     STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.AddAttribute Instance['|| ISBINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| ISBENTITY ||'] Attribute['|| ISBATTRIBUTE ||'] Value['|| ISBVALUE ||']', 21);

    VALIDATEINSTANCEMANAGER (FALSE);


    VALIDATENULLNAMES (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE);

    VALIDATEINSTANCEMANAGER (FALSE);

    LOADCONTROLATTRIBUTES (ISBENTITY, NUCONTROLENTITY);

    IF NOT FBLACCKEYATTRIBUTESTACK (GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE, NULL, ISBENTITY, ISBATTRIBUTE, NUCONTROLATTRIBUTE) THEN
        NUCONTROLATTRIBUTE := NULL;
    END IF;

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUCURRENTINSTANCE);

    IF NOT FBLACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUCURRENTENTITY) THEN
        ADDENTITYSTACK (NUCURRENTINSTANCE, ISBINSTANCE, ISBGROUP, ISBENTITY, NUCONTROLENTITY, NUCURRENTENTITY);
    END IF;

    RCATTRIBUTESTACK.NUINSTANCE        := NUCURRENTINSTANCE;
    RCATTRIBUTESTACK.NUENTITY          := NUCURRENTENTITY;
    RCATTRIBUTESTACK.SBGROUP           := ISBGROUP;
    RCATTRIBUTESTACK.SBENTITY          := ISBENTITY;
    RCATTRIBUTESTACK.SBATTRIBUTE       := ISBATTRIBUTE;
    RCATTRIBUTESTACK.BLPERSISTENT      := GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT;
    RCATTRIBUTESTACK.SBNEWVALUE        := ISBVALUE;
    RCATTRIBUTESTACK.BLREQUIRED        := GE_BOINSTANCECONSTANTS.CNUFALSE;
    RCATTRIBUTESTACK.BLPARAMETERVALUE  := GE_BOINSTANCECONSTANTS.CNUTRUE;
    RCATTRIBUTESTACK.BLNEWVALUEUPDATE  := GE_BOINSTANCECONSTANTS.CNUTRUE;
    RCATTRIBUTESTACK.BLBINDATTRIBUTE   := GE_BOINSTANCECONSTANTS.CNUFALSE;

    ADDATTRIBUTESTACK (NUCURRENTINSTANCE, ISBINSTANCE, ISBGROUP, NUCURRENTENTITY, ISBENTITY, RCATTRIBUTESTACK, GE_BOINSTANCECONSTANTS.CNUNOT_UPDATE_DB_DATA, NUATTRIBUTE);

    IF IBLUPDATE THEN
        TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE := ISBVALUE;
    END IF;

    IF NUCONTROLATTRIBUTE IS NOT NULL THEN
        TBATTRIBUTESTACK(NUATTRIBUTE).NUCONTROLATTRIBUTE := NUCONTROLATTRIBUTE;

        TBATTRIBUTESTACK(NUATTRIBUTE).BLPERSISTENT  := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).BLPERSISTENT;
        TBATTRIBUTESTACK(NUATTRIBUTE).NUATTRIBUTEID := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NUATTRIBUTEID;
        TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE        := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NUTYPE;
        TBATTRIBUTESTACK(NUATTRIBUTE).NULENGTH      := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NULENGTH;
        TBATTRIBUTESTACK(NUATTRIBUTE).NUSCALE       := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NUSCALE;
        TBATTRIBUTESTACK(NUATTRIBUTE).NUMASKTYPE    := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).NUMASKTYPE;
        TBATTRIBUTESTACK(NUATTRIBUTE).BLREQUIRED    := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).BLREQUIRED;
        TBATTRIBUTESTACK(NUATTRIBUTE).BLISKEY       := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).BLISKEY;
        TBATTRIBUTESTACK(NUATTRIBUTE).BLISNULL      := TBATTRIBUTESTACK(NUCONTROLATTRIBUTE).BLISNULL;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE ADDATTRIBUTEID
(
    ISBINSTANCE    IN VARCHAR2,
    ISBGROUP       IN VARCHAR2,
    INUATTRIBUTEID IN NUMBER,
    ISBVALUE       IN VARCHAR2
)
IS

SBENTITY     STYSBNAME;
SBATTRIBUTE  STYSBNAME;

BEGIN
    SBENTITY := DAGE_ENTITY.FSBGETNAME_ (DAGE_ENTITY_ATTRIBUTES.FNUGETENTITY_ID (INUATTRIBUTEID));

    UT_TRACE.TRACE ('ge_boInstanceControl.AddAttributeId Instance['|| ISBINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| SBENTITY ||'] AttributeId['|| INUATTRIBUTEID ||'] Value['|| ISBVALUE ||']', 21);

    SBATTRIBUTE := DAGE_ENTITY_ATTRIBUTES.FSBGETTECHNICAL_NAME (INUATTRIBUTEID);

    ADDATTRIBUTE (ISBINSTANCE, ISBGROUP, SBENTITY, SBATTRIBUTE, ISBVALUE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE ADDGLOBALATTRIBUTE
(
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR2
)
IS

NUATTRIBUTE         STYNUINDEX;
NUCURRENTINSTANCE   STYNUINDEX;
NUCURRENTENTITY     STYNUINDEX;
NUCURRENTATTRIBUTE  STYNUINDEX;
SBCURRENTINSTANCE   STYSBNAME;
SBCURRENTGROUP      STYSBNAME;
SBCURRENTENTITY     STYSBNAME;
SBCURRENTATTRIBUTE  STYSBNAME;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.AddGlobalAttribute Attribute['|| ISBATTRIBUTE ||'] Value['|| ISBVALUE ||']', 21);

    NUCURRENTINSTANCE  := RCCONTROL.NUCURRENTINSTANCE;
    NUCURRENTENTITY    := RCCONTROL.NUCURRENTENTITY;
    NUCURRENTATTRIBUTE := RCCONTROL.NUCURRENTATTRIBUTE;

    SBCURRENTINSTANCE  := RCCONTROL.SBCURRENTINSTANCE;
    SBCURRENTGROUP     := RCCONTROL.SBCURRENTGROUP;
    SBCURRENTENTITY    := RCCONTROL.SBCURRENTENTITY;
    SBCURRENTATTRIBUTE := RCCONTROL.SBCURRENTATTRIBUTE;

    SETCURRENTDATA (GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE, NULL, NULL, NULL);

    IF NOT FBLACCKEYATTRIBUTESTACK (GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE, NULL, GE_BOINSTANCECONSTANTS.CSBGLOBAL_ENTITY, ISBATTRIBUTE, NUATTRIBUTE) THEN
        ADDATTRIBUTE (GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE, NULL, GE_BOINSTANCECONSTANTS.CSBGLOBAL_ENTITY, ISBATTRIBUTE, ISBVALUE);
    ELSE
        TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE := ISBVALUE;
    END IF;

    RCCONTROL.NUCURRENTINSTANCE  := NUCURRENTINSTANCE;
    RCCONTROL.NUCURRENTENTITY    := NUCURRENTENTITY;
    RCCONTROL.NUCURRENTATTRIBUTE := NUCURRENTATTRIBUTE;

    RCCONTROL.SBCURRENTINSTANCE  := SBCURRENTINSTANCE;
    RCCONTROL.SBCURRENTGROUP     := SBCURRENTGROUP;
    RCCONTROL.SBCURRENTENTITY    := SBCURRENTENTITY;
    RCCONTROL.SBCURRENTATTRIBUTE := SBCURRENTATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETGLOBALATTRIBUTE
(
    ISBATTRIBUTE IN VARCHAR2,
    OSBVALUE     OUT VARCHAR2
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE, NULL, GE_BOINSTANCECONSTANTS.CSBGLOBAL_ENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    OSBVALUE := TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE;

    UT_TRACE.TRACE ('ge_boInstanceControl.AddGlobalAttribute Attribute['|| ISBATTRIBUTE ||'] Value['|| OSBVALUE ||']', 21);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE SETATTRIBUTEEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    ISBGROUP          IN VARCHAR2,
    ISBENTITY         IN VARCHAR2,
    ISBATTRIBUTE      IN VARCHAR2,
    INUEXPRESSION     IN NUMBER,
    INUEXPRESSIONTYPE IN NUMBER
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    IF INUEXPRESSIONTYPE = GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION THEN
        TBATTRIBUTESTACK(NUATTRIBUTE).NUINITIALIZEEXPRESSION := INUEXPRESSION;
    ELSE
        TBATTRIBUTESTACK(NUATTRIBUTE).NUPROCESSEXPRESSION := INUEXPRESSION;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETATTRIBUTEEXPRESSIONS
(
    ISBGROUP          IN VARCHAR2,
    ISBENTITY         IN VARCHAR2,
    ISBATTRIBUTE      IN VARCHAR2,
    INUEXPRESSION     IN NUMBER,
    INUEXPRESSIONTYPE IN NUMBER
)
IS
BEGIN
    SETATTRIBUTEEXPRESSIONS (RCCONTROL.SBCURRENTINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, INUEXPRESSION, INUEXPRESSIONTYPE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETENTITYEXPRESSIONS
(
    ISBINSTANCE               IN VARCHAR2,
    ISBGROUP                  IN VARCHAR2,
    ISBENTITY                 IN VARCHAR2,
    INUINSERTBEFOREEXPRESSION IN NUMBER,
    INUINSERTAFTEREXPRESSION  IN NUMBER,
    INUUPDATEBEFOREEXPRESSION IN NUMBER,
    INUUPDATEAFTEREXPRESSION  IN NUMBER,
    INUDELETEBEFOREEXPRESSION IN NUMBER,
    INUDELETEAFTEREXPRESSION  IN NUMBER
)
IS

NUENTITY  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    TBENTITYSTACK(NUENTITY).NUINSERTBEFOREEXPRESSION := INUINSERTBEFOREEXPRESSION;
    TBENTITYSTACK(NUENTITY).NUINSERTAFTEREXPRESSION  := INUINSERTAFTEREXPRESSION;
    TBENTITYSTACK(NUENTITY).NUUPDATEBEFOREEXPRESSION := INUUPDATEBEFOREEXPRESSION;
    TBENTITYSTACK(NUENTITY).NUUPDATEAFTEREXPRESSION  := INUUPDATEAFTEREXPRESSION;
    TBENTITYSTACK(NUENTITY).NUDELETEBEFOREEXPRESSION := INUDELETEBEFOREEXPRESSION;
    TBENTITYSTACK(NUENTITY).NUDELETEAFTEREXPRESSION  := INUDELETEAFTEREXPRESSION;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETREQUIREDATTRIBUTE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2,
    IBLMODE      IN STYNUBOOLEAN
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    TBATTRIBUTESTACK(NUATTRIBUTE).BLREQUIRED := IBLMODE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETINSTANCEEXPRESSIONS
(
    ISBINSTANCE               IN VARCHAR2,
    INUINSERTBEFOREEXPRESSION IN NUMBER,
    INUINSERTAFTEREXPRESSION  IN NUMBER,
    INUUPDATEBEFOREEXPRESSION IN NUMBER,
    INUUPDATEAFTEREXPRESSION  IN NUMBER,
    INUDELETEBEFOREEXPRESSION IN NUMBER,
    INUDELETEAFTEREXPRESSION  IN NUMBER
)
IS

NUINSTANCE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    TBINSTANCESTACK(NUINSTANCE).NUINSERTBEFOREEXPRESSION := INUINSERTBEFOREEXPRESSION;
    TBINSTANCESTACK(NUINSTANCE).NUINSERTAFTEREXPRESSION  := INUINSERTAFTEREXPRESSION;
    TBINSTANCESTACK(NUINSTANCE).NUUPDATEBEFOREEXPRESSION := INUUPDATEBEFOREEXPRESSION;
    TBINSTANCESTACK(NUINSTANCE).NUUPDATEAFTEREXPRESSION  := INUUPDATEAFTEREXPRESSION;
    TBINSTANCESTACK(NUINSTANCE).NUDELETEBEFOREEXPRESSION := INUDELETEBEFOREEXPRESSION;
    TBINSTANCESTACK(NUINSTANCE).NUDELETEAFTEREXPRESSION  := INUDELETEAFTEREXPRESSION;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETGLOBALEXPRESSIONS
(
    INUINSERTBEFOREEXPRESSION IN NUMBER,
    INUINSERTAFTEREXPRESSION  IN NUMBER,
    INUUPDATEBEFOREEXPRESSION IN NUMBER,
    INUUPDATEAFTEREXPRESSION  IN NUMBER,
    INUDELETEBEFOREEXPRESSION IN NUMBER,
    INUDELETEAFTEREXPRESSION  IN NUMBER
)
IS

NUENTITY  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    RCCONTROL.NUINSERTBEFOREEXPRESSION := INUINSERTBEFOREEXPRESSION;
    RCCONTROL.NUINSERTAFTEREXPRESSION  := INUINSERTAFTEREXPRESSION;
    RCCONTROL.NUUPDATEBEFOREEXPRESSION := INUUPDATEBEFOREEXPRESSION;
    RCCONTROL.NUUPDATEAFTEREXPRESSION  := INUUPDATEAFTEREXPRESSION;
    RCCONTROL.NUDELETEBEFOREEXPRESSION := INUDELETEBEFOREEXPRESSION;
    RCCONTROL.NUDELETEAFTEREXPRESSION  := INUDELETEAFTEREXPRESSION;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE INSTANCEHIERARCHY
(
    INUINSTANCE  IN STYNUINDEX,
    ISBINSTANCE  IN VARCHAR2,
    INULEVEL     IN NUMBER,
    IOTBINSTANCE IN OUT NOCOPY TYTBINSTANCEHIERARCHY
)
IS

NUCHILDINSTANCE STYNUINDEX;
NUINDEX         STYNUINDEX;

BEGIN
    NUCHILDINSTANCE := TBINSTANCESTACK(INUINSTANCE).NUFIRSTCHILDINSTANCE;
    
    WHILE NUCHILDINSTANCE IS NOT NULL LOOP
        NUINDEX := IOTBINSTANCE.COUNT;

        IOTBINSTANCE(NUINDEX).NUINSTANCE := NUCHILDINSTANCE;
        IOTBINSTANCE(NUINDEX).SBINSTANCE := TBINSTANCESTACK(NUCHILDINSTANCE).SBINSTANCE;
        IOTBINSTANCE(NUINDEX).NUFATHER   := TBINSTANCESTACK(NUCHILDINSTANCE).NUFATHER;
        IOTBINSTANCE(NUINDEX).SBFATHER   := TBINSTANCESTACK(NUCHILDINSTANCE).SBFATHER;
        IOTBINSTANCE(NUINDEX).NULEVEL    := INULEVEL;

        INSTANCEHIERARCHY (NUCHILDINSTANCE, TBINSTANCESTACK(NUCHILDINSTANCE).SBINSTANCE, INULEVEL + 1, IOTBINSTANCE);

        NUCHILDINSTANCE := TBINSTANCESTACK(NUCHILDINSTANCE).NUNEXTBROTHERINSTANCE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE INSTANCEHIERARCHY
(
    ISBINSTANCE  IN VARCHAR2,
    IOTBINSTANCE IN OUT NOCOPY TYTBINSTANCEHIERARCHY
)
IS

NUINSTANCE STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    IOTBINSTANCE.DELETE;

    INSTANCEHIERARCHY (NUINSTANCE, ISBINSTANCE, 1, IOTBINSTANCE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE INSTANCECHILDS
(
    INUINSTANCE  IN STYNUINDEX,
    ISBINSTANCE  IN VARCHAR2,
    IOTBINSTANCE IN OUT NOCOPY TYTBINSTANCEHIERARCHY
)
IS

NUCHILDINSTANCE STYNUINDEX;
NUINDEX         STYNUINDEX;

BEGIN
    NUCHILDINSTANCE := TBINSTANCESTACK(INUINSTANCE).NUFIRSTCHILDINSTANCE;

    WHILE NUCHILDINSTANCE IS NOT NULL LOOP
        NUINDEX := IOTBINSTANCE.COUNT;

        IOTBINSTANCE(NUINDEX).NUINSTANCE := NUCHILDINSTANCE;
        IOTBINSTANCE(NUINDEX).SBINSTANCE := TBINSTANCESTACK(NUCHILDINSTANCE).SBINSTANCE;
        IOTBINSTANCE(NUINDEX).NUFATHER   := TBINSTANCESTACK(NUCHILDINSTANCE).NUFATHER;
        IOTBINSTANCE(NUINDEX).SBFATHER   := TBINSTANCESTACK(NUCHILDINSTANCE).SBFATHER;

        NUCHILDINSTANCE := TBINSTANCESTACK(NUCHILDINSTANCE).NUNEXTBROTHERINSTANCE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE INSTANCECHILDS
(
    ISBINSTANCE  IN VARCHAR2,
    IOTBINSTANCE IN OUT NOCOPY TYTBINSTANCEHIERARCHY
)
IS

NUINSTANCE STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    IOTBINSTANCE.DELETE;

    INSTANCECHILDS (NUINSTANCE, ISBINSTANCE, IOTBINSTANCE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE INSTANCEENTITYLEVEL
(
    INUINSTANCE    IN STYNUINDEX,
    OTBENTITYLEVEL OUT NOCOPY TYTBENTITYLEVEL
)
IS

NUENTITY    STYNUINDEX;
NUINDEXUNO  STYNUINDEX;
NUINDEXDOS  STYNUINDEX;

RCENTITYLEVEL TYRCENTITYLEVEL;

BEGIN
    OTBENTITYLEVEL.DELETE;

    NUENTITY := TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP
        NUINDEXUNO := OTBENTITYLEVEL.COUNT + 1;

        OTBENTITYLEVEL(NUINDEXUNO).NUENTITY := NUENTITY;
        OTBENTITYLEVEL(NUINDEXUNO).NULEVEL := TBENTITYSTACK(NUENTITY).NULEVEL;

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;
    END LOOP;

    IF OTBENTITYLEVEL.COUNT > 0 THEN
        FOR NUINDEXUNO IN OTBENTITYLEVEL.FIRST..(OTBENTITYLEVEL.LAST - 1) LOOP
            FOR NUINDEXDOS IN (NUINDEXUNO + 1)..OTBENTITYLEVEL.LAST LOOP
                IF OTBENTITYLEVEL(NUINDEXDOS).NULEVEL < OTBENTITYLEVEL(NUINDEXUNO).NULEVEL THEN
                    RCENTITYLEVEL := OTBENTITYLEVEL(NUINDEXUNO);
                    OTBENTITYLEVEL(NUINDEXUNO) := OTBENTITYLEVEL(NUINDEXDOS);
                    OTBENTITYLEVEL(NUINDEXDOS) := RCENTITYLEVEL;
                END IF;
            END LOOP;
        END LOOP;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE EXEATTEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    ISBGROUP          IN VARCHAR2,
    ISBENTITY         IN VARCHAR2,
    ISBATTRIBUTE      IN VARCHAR2,
    INUEXPRESSIONTYPE IN NUMBER
)
IS

SBCURRENTINSTANCE   STYSBNAME;
SBCURRENTGROUP      STYSBNAME;
SBCURRENTENTITY     STYSBNAME;
SBCURRENTATTRIBUTE  STYSBNAME;

NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    GETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);

    SETCURRENTDATA (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE);

    IF INUEXPRESSIONTYPE = GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION THEN
        EXECUTEEXPRESSION (TBATTRIBUTESTACK(NUATTRIBUTE).NUINITIALIZEEXPRESSION);
    ELSE
        EXECUTEEXPRESSION (TBATTRIBUTESTACK(NUATTRIBUTE).NUPROCESSEXPRESSION);
    END IF;

    SETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);
    
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE EXEENTITYATTEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    ISBGROUP          IN VARCHAR2,
    ISBENTITY         IN VARCHAR2,
    INUEXPRESSIONTYPE IN NUMBER
)
IS

SBCURRENTINSTANCE   STYSBNAME;
SBCURRENTGROUP      STYSBNAME;
SBCURRENTENTITY     STYSBNAME;
SBCURRENTATTRIBUTE  STYSBNAME;

NUENTITY     STYNUINDEX;
NUATTRIBUTE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    GETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);

    SETCURRENTDATA (ISBINSTANCE, NULL, NULL, NULL);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    NUATTRIBUTE := TBENTITYSTACK(NUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        SETCURRENTDATA (ISBINSTANCE, ISBGROUP, ISBENTITY, TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE);

        IF INUEXPRESSIONTYPE = GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION THEN
            EXECUTEEXPRESSION (TBATTRIBUTESTACK(NUATTRIBUTE).NUINITIALIZEEXPRESSION);
        ELSE
            EXECUTEEXPRESSION (TBATTRIBUTESTACK(NUATTRIBUTE).NUPROCESSEXPRESSION);
        END IF;

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

    SETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);
    
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE EXEINSTANCEATTEXPRESSIONS
(
    INUINSTANCE       IN STYNUINDEX,
    ISBINSTANCE       IN VARCHAR2,
    INUEXPRESSIONTYPE IN NUMBER
)
IS

NUENTITY  STYNUINDEX;
NUINDEX   STYNUINDEX;

BEGIN
    SETCURRENTDATA (ISBINSTANCE, NULL, NULL, NULL);

    INSTANCEENTITYLEVEL (INUINSTANCE, TBENTITYLEVEL);

    NUINDEX := TBENTITYLEVEL.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        NUENTITY := TBENTITYLEVEL(NUINDEX).NUENTITY;

        EXEENTITYATTEXPRESSIONS (ISBINSTANCE, TBENTITYSTACK(NUENTITY).SBGROUP, TBENTITYSTACK(NUENTITY).SBENTITY, INUEXPRESSIONTYPE);

        NUINDEX := TBENTITYLEVEL.NEXT(NUINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE EXEINSTANCEATTEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    INUEXPRESSIONTYPE IN NUMBER
)
IS

TBINSTANCEHIERARCHY  TYTBINSTANCEHIERARCHY;

NUINSTANCE STYNUINDEX;
NUINDEX    STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    EXEINSTANCEATTEXPRESSIONS (NUINSTANCE, ISBINSTANCE, INUEXPRESSIONTYPE);

    INSTANCEHIERARCHY (ISBINSTANCE, TBINSTANCEHIERARCHY);

    NUINDEX := TBINSTANCEHIERARCHY.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        EXEINSTANCEATTEXPRESSIONS (TBINSTANCEHIERARCHY(NUINDEX).NUINSTANCE, TBINSTANCEHIERARCHY(NUINDEX).SBINSTANCE, INUEXPRESSIONTYPE);

        NUINDEX := TBINSTANCEHIERARCHY.NEXT(NUINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE EXEALLATTEXPRESSIONS
(
    INUEXPRESSIONTYPE IN NUMBER
)
IS

NUINSTANCE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    NUINSTANCE := TBINSTANCESTACK(RCCONTROL.NUCONTROLINSTANCE).NUFIRSTCHILDINSTANCE;
    WHILE NUINSTANCE IS NOT NULL LOOP
        EXEINSTANCEATTEXPRESSIONS (TBINSTANCESTACK(NUINSTANCE).SBINSTANCE, INUEXPRESSIONTYPE);

        NUINSTANCE := TBINSTANCESTACK(NUINSTANCE).NUNEXTBROTHERINSTANCE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE EXECUTEINSTANCEEXPRESSIONS
(
    INUINSTANCE       IN STYNUINDEX,
    ISBINSTANCE       IN VARCHAR2,
    INUEXECUTETIME    IN NUMBER,
    INUEXPRESSIONTYPE IN NUMBER
)
IS

SBCURRENTINSTANCE   STYSBNAME;
SBCURRENTGROUP      STYSBNAME;
SBCURRENTENTITY     STYSBNAME;
SBCURRENTATTRIBUTE  STYSBNAME;

NUINDEX   STYNUINDEX;

NUBEFOREEXPRESSION  NUMBER(10);
NUAFTEREXPRESSION   NUMBER(10);

BEGIN
    GETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);

    SETCURRENTDATA (ISBINSTANCE, NULL, NULL, NULL);

    IF INUEXPRESSIONTYPE = GE_BOINSTANCECONSTANTS.CNUINSERT_EXPRESSION THEN
        NUBEFOREEXPRESSION := TBINSTANCESTACK(INUINSTANCE).NUINSERTBEFOREEXPRESSION;
        NUAFTEREXPRESSION  := TBINSTANCESTACK(INUINSTANCE).NUINSERTAFTEREXPRESSION;

    ELSIF INUEXPRESSIONTYPE = GE_BOINSTANCECONSTANTS.CNUUPDATE_EXPRESSION THEN
        NUBEFOREEXPRESSION := TBINSTANCESTACK(INUINSTANCE).NUUPDATEBEFOREEXPRESSION;
        NUAFTEREXPRESSION  := TBINSTANCESTACK(INUINSTANCE).NUUPDATEAFTEREXPRESSION;

    ELSE
        NUBEFOREEXPRESSION := TBINSTANCESTACK(INUINSTANCE).NUDELETEBEFOREEXPRESSION;
        NUAFTEREXPRESSION  := TBINSTANCESTACK(INUINSTANCE).NUDELETEAFTEREXPRESSION;
    END IF;

 
    IF INUEXECUTETIME IN (GE_BOINSTANCECONSTANTS.CNUEXECUTE_PRE_EXPRESSION, GE_BOINSTANCECONSTANTS.CNUEXECUTE_ALL_EXPRESSION) THEN
        EXECUTEEXPRESSION (NUBEFOREEXPRESSION);
    END IF;

 
    IF INUEXECUTETIME IN (GE_BOINSTANCECONSTANTS.CNUEXECUTE_POS_EXPRESSION, GE_BOINSTANCECONSTANTS.CNUEXECUTE_ALL_EXPRESSION) THEN
        EXECUTEEXPRESSION (NUAFTEREXPRESSION);
    END IF;

    SETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);
    
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE EXECUTEINSTANCEEXPRESSIONS
(
    ISBINSTANCE       IN VARCHAR2,
    INUEXECUTETIME    IN NUMBER,
    INUEXPRESSIONTYPE IN NUMBER
)
IS

TBINSTANCEHIERARCHY  TYTBINSTANCEHIERARCHY;

NUINSTANCE STYNUINDEX;
NUINDEX    STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    EXECUTEINSTANCEEXPRESSIONS (NUINSTANCE, ISBINSTANCE, INUEXECUTETIME, INUEXPRESSIONTYPE);

    INSTANCEHIERARCHY (ISBINSTANCE, TBINSTANCEHIERARCHY);

    IF TBINSTANCEHIERARCHY.COUNT != 0 THEN
        NUINDEX := TBINSTANCEHIERARCHY.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            EXECUTEINSTANCEEXPRESSIONS (TBINSTANCEHIERARCHY(NUINDEX).NUINSTANCE, TBINSTANCEHIERARCHY(NUINDEX).SBINSTANCE, INUEXECUTETIME, INUEXPRESSIONTYPE);

            NUINDEX := TBINSTANCEHIERARCHY.NEXT(NUINDEX);
        END LOOP;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE EXECUTEALLINSTANCEEXPRESSIONS
(
    INUEXECUTETIME    IN NUMBER,
    INUEXPRESSIONTYPE IN NUMBER
)
IS



SBCURRENTINSTANCE   STYSBNAME;
SBCURRENTGROUP      STYSBNAME;
SBCURRENTENTITY     STYSBNAME;
SBCURRENTATTRIBUTE  STYSBNAME;

NUINSTANCE  STYNUINDEX;

NUBEFOREEXPRESSION  NUMBER(10);
NUAFTEREXPRESSION   NUMBER(10);

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    IF INUEXPRESSIONTYPE = GE_BOINSTANCECONSTANTS.CNUINSERT_EXPRESSION THEN
        NUBEFOREEXPRESSION := RCCONTROL.NUINSERTBEFOREEXPRESSION;
        NUAFTEREXPRESSION  := RCCONTROL.NUINSERTAFTEREXPRESSION;

    ELSIF INUEXPRESSIONTYPE = GE_BOINSTANCECONSTANTS.CNUUPDATE_EXPRESSION THEN
        NUBEFOREEXPRESSION := RCCONTROL.NUUPDATEBEFOREEXPRESSION;
        NUAFTEREXPRESSION  := RCCONTROL.NUUPDATEAFTEREXPRESSION;

    ELSE
        NUBEFOREEXPRESSION := RCCONTROL.NUDELETEBEFOREEXPRESSION;
        NUAFTEREXPRESSION  := RCCONTROL.NUDELETEAFTEREXPRESSION;
    END IF;

    GETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);
    
 
    IF INUEXECUTETIME IN (GE_BOINSTANCECONSTANTS.CNUEXECUTE_PRE_EXPRESSION, GE_BOINSTANCECONSTANTS.CNUEXECUTE_ALL_EXPRESSION) THEN
        EXECUTEEXPRESSION (NUBEFOREEXPRESSION);
    END IF;

    IF RCCONTROL.NUCONTROLINSTANCE IS NOT NULL THEN
        IF TBINSTANCESTACK.EXISTS(RCCONTROL.NUCONTROLINSTANCE) THEN
            NUINSTANCE := TBINSTANCESTACK(RCCONTROL.NUCONTROLINSTANCE).NUFIRSTCHILDINSTANCE;
            WHILE NUINSTANCE IS NOT NULL LOOP
                EXECUTEINSTANCEEXPRESSIONS (TBINSTANCESTACK(NUINSTANCE).SBINSTANCE, INUEXECUTETIME, INUEXPRESSIONTYPE);

                NUINSTANCE := TBINSTANCESTACK(NUINSTANCE).NUNEXTBROTHERINSTANCE;
            END LOOP;
        END IF;
    END IF;

 
    IF INUEXECUTETIME IN (GE_BOINSTANCECONSTANTS.CNUEXECUTE_POS_EXPRESSION, GE_BOINSTANCECONSTANTS.CNUEXECUTE_ALL_EXPRESSION) THEN
        EXECUTEEXPRESSION (NUAFTEREXPRESSION);
    END IF;

    SETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);
    
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE CURRENTATTRIBUTEDATA
(
    INUCONTROLATTRIBUTE IN STYNUINDEX,
    ISBINSTANCE         IN VARCHAR2,
    ISBGROUP            IN VARCHAR2,
    ISBENTITY           IN VARCHAR2,
    ISBATTRIBUTE        IN VARCHAR2,
    ONUATTRIBUTE        OUT STYNUINDEX,
    OSBVALUE            OUT VARCHAR2,
    OBLREQUIRED         OUT NUMBER,
    OBLISNULL           OUT NUMBER
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    ONUATTRIBUTE := INUCONTROLATTRIBUTE;
    OSBVALUE     := TBATTRIBUTESTACK(INUCONTROLATTRIBUTE).SBNEWVALUE;
    OBLREQUIRED  := TBATTRIBUTESTACK(INUCONTROLATTRIBUTE).BLREQUIRED;
    OBLISNULL    := TBATTRIBUTESTACK(INUCONTROLATTRIBUTE).BLISNULL;

    IF FBLACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE) THEN
        ONUATTRIBUTE := NUATTRIBUTE;
        OSBVALUE     := TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE;
        OBLREQUIRED  := TBATTRIBUTESTACK(NUATTRIBUTE).BLREQUIRED;
        OBLISNULL    := TBATTRIBUTESTACK(NUATTRIBUTE).BLISNULL;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;





















PROCEDURE DEFINECOLUMN
(
    IINCURSOR IN INTEGER,
    IINCOLUMN IN INTEGER,
    INUDBTYPE IN NUMBER,
    INULENGTH IN NUMBER
)
IS

    NUNUMBER   NUMBER;
    DTDATE     DATE;
    RIROWID    ROWID;
    SBVARCHAR  STYSBVALUE;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.DefineColumn', 25);
    
    IF IINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(IINCURSOR) THEN

        IF INUDBTYPE = GE_BOCONSTANTS.CNUROWID THEN
            DBMS_SQL.DEFINE_COLUMN_ROWID (IINCURSOR, IINCOLUMN, RIROWID);

        ELSIF INUDBTYPE = GE_BOCONSTANTS.CNUVARCHAR2 THEN
            DBMS_SQL.DEFINE_COLUMN (IINCURSOR, IINCOLUMN, SBVARCHAR, INULENGTH);

        ELSIF INUDBTYPE = GE_BOCONSTANTS.CNUCHAR THEN
            DBMS_SQL.DEFINE_COLUMN (IINCURSOR, IINCOLUMN, SBVARCHAR, INULENGTH);

        ELSIF INUDBTYPE = GE_BOCONSTANTS.CNUDATE THEN
            DBMS_SQL.DEFINE_COLUMN (IINCURSOR, IINCOLUMN, DTDATE);

        ELSIF INUDBTYPE = GE_BOCONSTANTS.CNUNUMBER THEN
            DBMS_SQL.DEFINE_COLUMN (IINCURSOR, IINCOLUMN, NUNUMBER);
        END IF;
        
    ELSE
        ERRORS.SETERROR(CNUERRINVALIDCURSOR,IINCURSOR);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;





















PROCEDURE COLUMNVALUE
(
    IINCURSOR IN INTEGER,
    IINCOLUMN IN INTEGER,
    INUDBTYPE IN NUMBER,
    OSBVALUE  OUT VARCHAR2
)
IS

NUNUMBER   NUMBER;
DTDATE     DATE;
RIROWID    ROWID;
CHCHAR     CHAR;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.ColumnValue', 25);

    IF IINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(IINCURSOR) THEN

        IF INUDBTYPE = GE_BOCONSTANTS.CNUROWID THEN
            DBMS_SQL.COLUMN_VALUE_ROWID (IINCURSOR, IINCOLUMN, RIROWID);

            OSBVALUE := ROWIDTOCHAR (RIROWID);

        ELSIF INUDBTYPE = GE_BOCONSTANTS.CNUVARCHAR2 THEN
            DBMS_SQL.COLUMN_VALUE (IINCURSOR, IINCOLUMN, OSBVALUE);

        ELSIF INUDBTYPE = GE_BOCONSTANTS.CNUCHAR THEN
            DBMS_SQL.COLUMN_VALUE (IINCURSOR, IINCOLUMN, OSBVALUE);

        ELSIF INUDBTYPE = GE_BOCONSTANTS.CNUDATE THEN
            DBMS_SQL.COLUMN_VALUE (IINCURSOR, IINCOLUMN, DTDATE);

            OSBVALUE := TO_CHAR (DTDATE, UT_DATE.FSBDATE_FORMAT);

        ELSIF INUDBTYPE = GE_BOCONSTANTS.CNUNUMBER THEN
            DBMS_SQL.COLUMN_VALUE (IINCURSOR, IINCOLUMN, NUNUMBER);

            OSBVALUE := TO_CHAR (NUNUMBER);
        END IF;
    ELSE
        ERRORS.SETERROR(CNUERRINVALIDCURSOR,IINCURSOR);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END COLUMNVALUE;




















PROCEDURE BINDATTRIBUTE
(
    IINCURSOR    IN INTEGER,
    ISBATTRIBUTE IN VARCHAR2,
    INUTYPE      IN NUMBER,
    ISBVALUE     IN VARCHAR2
)
IS

SBATTRIBUTE STYSBNAME;
DTFECHA     DATE;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.BindAttribute ['|| IINCURSOR ||']['|| ISBATTRIBUTE ||']['|| INUTYPE ||']['|| ISBVALUE ||']', 25);

    SBATTRIBUTE := ':VAR_' || ISBATTRIBUTE;
    
    IF IINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(IINCURSOR) THEN

        IF INUTYPE = GE_BOCONSTANTS.CNUROWID THEN
            DBMS_SQL.BIND_VARIABLE_ROWID (IINCURSOR, SBATTRIBUTE, CHARTOROWID (ISBVALUE));

        ELSIF INUTYPE = GE_BOCONSTANTS.CNUVARCHAR2 THEN
            DBMS_SQL.BIND_VARIABLE (IINCURSOR, SBATTRIBUTE, ISBVALUE, LENGTH (ISBVALUE));

        ELSIF INUTYPE = GE_BOCONSTANTS.CNUCHAR THEN
            DBMS_SQL.BIND_VARIABLE_CHAR (IINCURSOR, SBATTRIBUTE, ISBVALUE, LENGTH (ISBVALUE));

        ELSIF INUTYPE = GE_BOCONSTANTS.CNUDATE THEN
            DTFECHA := TO_DATE (ISBVALUE, UT_DATE.FSBDATE_FORMAT);

            DBMS_SQL.BIND_VARIABLE (IINCURSOR, SBATTRIBUTE, DTFECHA);

        ELSIF INUTYPE = GE_BOCONSTANTS.CNUNUMBER THEN
            DBMS_SQL.BIND_VARIABLE (IINCURSOR, SBATTRIBUTE, ISBVALUE);

        END IF;
    ELSE
        ERRORS.SETERROR(CNUERRINVALIDCURSOR,IINCURSOR);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END BINDATTRIBUTE;



PROCEDURE SETATTRIBUTENAME
(
    INUATTRIBUTENAME IN NUMBER
)
IS
BEGIN
    RCCONTROL.NUATTRIBUTENAME := INUATTRIBUTENAME;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETDSPLY
(
    INUDSPLY IN NUMBER
)
IS
BEGIN
    RCCONTROL.NUDSPLY := INUDSPLY;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETDSPLYMODE
(
    INUDSPLYMODE IN NUMBER
)
IS
BEGIN
    RCCONTROL.NUDSPLYMODE := INUDSPLYMODE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETSELECTMODE
(
    INUSELECTMODE IN NUMBER
)
IS
BEGIN
    RCCONTROL.NUSELECTMODE := INUSELECTMODE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETVALIDATETYPEATTRIBUTE
(
    IBLMODE IN STYNUBOOLEAN
)
IS
BEGIN
    RCCONTROL.BLVALIDATETYPEATTRIBUTE := IBLMODE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETVALIDATEREQUIREDATTRIBUTE
(
    IBLMODE IN STYNUBOOLEAN
)
IS
BEGIN
    RCCONTROL.BLVALIDATEREQUIREDATTRIBUTE := IBLMODE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETFORMATATTRIBUTE
(
    IBLMODE IN STYNUBOOLEAN
)
IS
BEGIN
    RCCONTROL.BLFORMATATTRIBUTE := IBLMODE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETENTITYEVENT
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    INUEVENT    IN NUMBER
)
IS

NUENTITY  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    TBENTITYSTACK(NUENTITY).NUEVENT := INUEVENT;

    IF INUEVENT = GE_BOINSTANCECONSTANTS.CNUUPDATE THEN
        TBENTITYSTACK(NUENTITY).BLLOADOLDVALUES := GE_BOINSTANCECONSTANTS.CNUTRUE;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE INITMULTISELECT
(
    ISBINSTANCE IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
IS
BEGIN
    ACCKEYINSTANCESTACK (ISBINSTANCE, RCMULTISELECTCONTROL.NUINSTANCE);

    LOADCONTROLATTRIBUTES (ISBENTITY, RCMULTISELECTCONTROL.NUCONTROLENTITY);

    IF TBENTITYSTACK(RCMULTISELECTCONTROL.NUCONTROLENTITY).BLPERSISTENT = GE_BOINSTANCECONSTANTS.CNUFALSE THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NOT_PERSISTENT_ENTITY, FSBENTITYNAME (RCMULTISELECTCONTROL.NUCONTROLENTITY));
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    RCMULTISELECTCONTROL.SBENTITY   := ISBENTITY;
    RCMULTISELECTCONTROL.SBINSTANCE := ISBINSTANCE;

    TBMULTISELECTWHERE.DELETE;
    TBMULTISELECTGROUP.DELETE;
    TBMULTISELECTORDER.DELETE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETMULTISELECTATTRIBUTE
(
    INUTYPE      IN NUMBER,
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR DEFAULT NULL
)
IS

RCMULTISELECTATTRIBUTE  TYRCMULTISELECTATTRIBUTE;

NUENTITYATTRIBUTE       STYNUINDEX;

BEGIN
    IF NOT FBLACCKEYATTRIBUTESTACK (GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE, NULL, RCMULTISELECTCONTROL.SBENTITY, ISBATTRIBUTE, NUENTITYATTRIBUTE) THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NOT_ENITY_ATTRIBUTE, RCMULTISELECTCONTROL.SBENTITY ||'|'|| ISBATTRIBUTE);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF INUTYPE = GE_BOINSTANCECONSTANTS.CNUWHERE_ATTRIBUTE  AND  ISBVALUE IS NULL THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_WHERE_ATTR_NULL, FSBATTRIBUTENAME (NUENTITYATTRIBUTE));
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    RCMULTISELECTATTRIBUTE.NUCONTROLATTRIBUTE := NUENTITYATTRIBUTE;

    RCMULTISELECTATTRIBUTE.NUTYPE      := INUTYPE;
    RCMULTISELECTATTRIBUTE.SBATTRIBUTE := ISBATTRIBUTE;
    RCMULTISELECTATTRIBUTE.SBVALUE     := ISBVALUE;

    IF INUTYPE = GE_BOINSTANCECONSTANTS.CNUWHERE_ATTRIBUTE THEN
        TBMULTISELECTWHERE(TBMULTISELECTWHERE.COUNT) := RCMULTISELECTATTRIBUTE;

    ELSIF INUTYPE = GE_BOINSTANCECONSTANTS.CNUGROUP_ATTRIBUTE THEN
        TBMULTISELECTGROUP(TBMULTISELECTGROUP.COUNT) := RCMULTISELECTATTRIBUTE;

    ELSIF INUTYPE = GE_BOINSTANCECONSTANTS.CNUORDER_BY_ATTRIBUTE THEN
        TBMULTISELECTORDER(TBMULTISELECTORDER.COUNT) := RCMULTISELECTATTRIBUTE;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETMULTISELECTWHERE
(
    ISBATTRIBUTE IN VARCHAR2,
    ISBVALUE     IN VARCHAR DEFAULT NULL
)
IS
BEGIN
    SETMULTISELECTATTRIBUTE (GE_BOINSTANCECONSTANTS.CNUWHERE_ATTRIBUTE, ISBATTRIBUTE, ISBVALUE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETMULTISELECTGROUP
(
    ISBATTRIBUTE IN VARCHAR2
)
IS
BEGIN
    SETMULTISELECTATTRIBUTE (GE_BOINSTANCECONSTANTS.CNUGROUP_ATTRIBUTE, ISBATTRIBUTE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETMULTISELECTODERBY
(
    ISBATTRIBUTE IN VARCHAR2
)
IS
BEGIN
    SETMULTISELECTATTRIBUTE (GE_BOINSTANCECONSTANTS.CNUORDER_BY_ATTRIBUTE, ISBATTRIBUTE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



















PROCEDURE EXECUTEMULTISELECT
(
    IBLRAISEEXCEPTION IN BOOLEAN DEFAULT FALSE
)
IS

INCURSOR      INTEGER;
INRECORDS     INTEGER;
BLLOADRECORD  BOOLEAN;

SBSQL     STYSBSQL;
SBSTRING  STYSBSQL;
SBGROUP   STYSBNAME;
SBVALUE   STYSBVALUE;

NUGROUP            STYNUINDEX;
NUCONTROLENTITY    STYNUINDEX;
NUENTITY           STYNUINDEX;
NUATTRIBUTE        STYNUINDEX;
NUENTITYATTRIBUTE  STYNUINDEX;

RCATTRIBUTE  TYRCATTRIBUTESTACK;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.ExecuteMultiSelect', 21);

    TBMULTISELECTINDEXENTITY.DELETE;

    SBSQL := TBENTITYSTACK(RCMULTISELECTCONTROL.NUCONTROLENTITY).SBSELECT;

    

    IF TBMULTISELECTWHERE.COUNT != 0 THEN
        SBSTRING := NULL;

        NUATTRIBUTE := TBMULTISELECTWHERE.FIRST;
        WHILE NUATTRIBUTE IS NOT NULL LOOP
            SBSTRING := SBSTRING || TBMULTISELECTWHERE(NUATTRIBUTE).SBATTRIBUTE
                                 || '=:VAR_' || TBMULTISELECTWHERE(NUATTRIBUTE).SBATTRIBUTE
                                 || ' AND ';

            NUATTRIBUTE := TBMULTISELECTWHERE.NEXT(NUATTRIBUTE);
        END LOOP;

        SBSTRING := SUBSTR (SBSTRING, 1, LENGTH (SBSTRING) - 5);

        SBSQL := SBSQL || ' WHERE ' || SBSTRING;
    END IF;

    

    IF TBMULTISELECTORDER.COUNT != 0 THEN
        SBSTRING := NULL;

        NUATTRIBUTE := TBMULTISELECTORDER.FIRST;
        WHILE NUATTRIBUTE IS NOT NULL LOOP
            SBSTRING := SBSTRING || TBMULTISELECTORDER(NUATTRIBUTE).SBATTRIBUTE || ', ';

            NUATTRIBUTE := TBMULTISELECTORDER.NEXT(NUATTRIBUTE);
        END LOOP;

        SBSTRING := SUBSTR (SBSTRING, 1, LENGTH (SBSTRING) - 2);

        SBSQL := SBSQL || ' ORDER BY ' || SBSTRING;
    END IF;

    

    INCURSOR := DBMS_SQL.OPEN_CURSOR;

    DBMS_SQL.PARSE (INCURSOR, SBSQL, DBMS_SQL.NATIVE);

    NUENTITYATTRIBUTE := TBENTITYSTACK(RCMULTISELECTCONTROL.NUCONTROLENTITY).NUFIRSTATTRIBUTE;
    WHILE NUENTITYATTRIBUTE IS NOT NULL LOOP
        DEFINECOLUMN (INCURSOR, TBATTRIBUTESTACK(NUENTITYATTRIBUTE).NUSEQUENCE, TBATTRIBUTESTACK(NUENTITYATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUENTITYATTRIBUTE).NULENGTH);

        NUENTITYATTRIBUTE := TBATTRIBUTESTACK(NUENTITYATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

    

    IF TBMULTISELECTWHERE.COUNT != 0 THEN
        NUATTRIBUTE := TBMULTISELECTWHERE.FIRST;
        WHILE NUATTRIBUTE IS NOT NULL LOOP
            BINDATTRIBUTE (INCURSOR, TBMULTISELECTWHERE(NUATTRIBUTE).SBATTRIBUTE, TBATTRIBUTESTACK(TBMULTISELECTWHERE(NUATTRIBUTE).NUCONTROLATTRIBUTE).NUTYPE, TBMULTISELECTWHERE(NUATTRIBUTE).SBVALUE);

            NUATTRIBUTE := TBMULTISELECTWHERE.NEXT(NUATTRIBUTE);
        END LOOP;
    END IF;

    

    INRECORDS := DBMS_SQL.EXECUTE (INCURSOR);

    

    BLLOADRECORD := FALSE;
    NUGROUP := 0;

    WHILE DBMS_SQL.FETCH_ROWS (INCURSOR) > 0 LOOP
        BLLOADRECORD := TRUE;
        SBGROUP := NULL;

        IF TBMULTISELECTGROUP.COUNT != 0 THEN
            NUATTRIBUTE := TBMULTISELECTGROUP.FIRST;
            WHILE NUATTRIBUTE IS NOT NULL LOOP

                NUENTITYATTRIBUTE := TBMULTISELECTGROUP(NUATTRIBUTE).NUCONTROLATTRIBUTE;

                COLUMNVALUE (INCURSOR, TBATTRIBUTESTACK(NUENTITYATTRIBUTE).NUSEQUENCE, TBATTRIBUTESTACK(NUENTITYATTRIBUTE).NUTYPE, SBVALUE);

                SBGROUP := SBGROUP || SBVALUE || '_';

                NUATTRIBUTE := TBMULTISELECTGROUP.NEXT(NUATTRIBUTE);
            END LOOP;

            SBGROUP := SUBSTR (SBGROUP, 1, LENGTH (SBGROUP) - 1);
        ELSE
            IF NUGROUP > 0 THEN
                SBGROUP := TO_CHAR (NUGROUP);
            END IF;
        END IF;

        ADDENTITYSTACK (RCMULTISELECTCONTROL.NUINSTANCE, RCMULTISELECTCONTROL.SBINSTANCE, SBGROUP, RCMULTISELECTCONTROL.SBENTITY, RCMULTISELECTCONTROL.NUCONTROLENTITY, NUENTITY);

        NUENTITYATTRIBUTE := TBENTITYSTACK(RCMULTISELECTCONTROL.NUCONTROLENTITY).NUFIRSTATTRIBUTE;
        WHILE NUENTITYATTRIBUTE IS NOT NULL LOOP
            COLUMNVALUE (INCURSOR, TBATTRIBUTESTACK(NUENTITYATTRIBUTE).NUSEQUENCE, TBATTRIBUTESTACK(NUENTITYATTRIBUTE).NUTYPE, SBVALUE);

            RCATTRIBUTE := TBATTRIBUTESTACK(NUENTITYATTRIBUTE);

            RCATTRIBUTE.NUCONTROLATTRIBUTE := NUENTITYATTRIBUTE;
            RCATTRIBUTE.SBNEWVALUE         := SBVALUE;
            RCATTRIBUTE.SBOLDVALUE         := SBVALUE;

            ADDATTRIBUTESTACK (RCMULTISELECTCONTROL.NUINSTANCE, RCMULTISELECTCONTROL.SBINSTANCE, SBGROUP, NUENTITY, RCMULTISELECTCONTROL.SBENTITY, RCATTRIBUTE, GE_BOINSTANCECONSTANTS.CNUNOT_UPDATE_DB_DATA, NUATTRIBUTE);

            NUENTITYATTRIBUTE := TBATTRIBUTESTACK(NUENTITYATTRIBUTE).NUNEXTENTITYATTRIBUTE;
        END LOOP;

        TBENTITYSTACK(NUENTITY).BLLOADOLDVALUES := GE_BOINSTANCECONSTANTS.CNUTRUE;
        TBENTITYSTACK(NUENTITY).NUEVENT := GE_BOINSTANCECONSTANTS.CNUUPDATE;

        TBMULTISELECTINDEXENTITY(TBMULTISELECTINDEXENTITY.COUNT) := NUENTITY;

        NUGROUP := NUGROUP + 1;
    END LOOP;

    DBMS_SQL.CLOSE_CURSOR (INCURSOR);

    IF BLLOADRECORD = FALSE AND IBLRAISEEXCEPTION = TRUE THEN
        SBSTRING := NULL;

        IF TBMULTISELECTWHERE.COUNT != 0 THEN
            NUATTRIBUTE := TBMULTISELECTWHERE.FIRST;
            WHILE NUATTRIBUTE IS NOT NULL LOOP
                SBSTRING := SBSTRING || FSBATTRIBUTENAME (TBMULTISELECTWHERE(NUATTRIBUTE).NUCONTROLATTRIBUTE, FALSE) || ' = ' || TBMULTISELECTWHERE(NUATTRIBUTE).SBVALUE || '  ';

                NUATTRIBUTE := TBMULTISELECTWHERE.NEXT(NUATTRIBUTE);
            END LOOP;
        END IF;

        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NO_MULTI_RECORD_ENTITY, FSBENTITYNAME (RCMULTISELECTCONTROL.NUCONTROLENTITY, FALSE) ||'|'|| SBSTRING);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF INCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN (INCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR (INCURSOR);
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF INCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN (INCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR (INCURSOR);
        END IF;
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NOT_SELECT_ENTITY, FSBENTITYNAME (RCMULTISELECTCONTROL.NUCONTROLENTITY, FALSE) ||' - '|| SUBSTR (SQLERRM, 1, 900));
        RAISE EX.CONTROLLED_ERROR;
END EXECUTEMULTISELECT;


FUNCTION FBLGETFIRSTMULTISELECTENTITY
(
    ORCENTITY OUT TYRCENTITYSTACK
)
RETURN BOOLEAN
IS
BEGIN
    IF TBMULTISELECTINDEXENTITY.COUNT = 0 THEN
        RETURN FALSE;
    END IF;

    RCCONTROL.NUMULTISELECTINDEX := TBMULTISELECTINDEXENTITY.FIRST;

    ORCENTITY := TBENTITYSTACK(TBMULTISELECTINDEXENTITY(RCCONTROL.NUMULTISELECTINDEX));

    RETURN TRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLGETNEXTMULTISELECTENTITY
(
    ORCENTITY OUT TYRCENTITYSTACK
)
RETURN BOOLEAN
IS
BEGIN
    RCCONTROL.NUMULTISELECTINDEX := TBMULTISELECTINDEXENTITY.NEXT(RCCONTROL.NUMULTISELECTINDEX);

    IF RCCONTROL.NUMULTISELECTINDEX IS NULL THEN
        RETURN FALSE;
    END IF;

    ORCENTITY := TBENTITYSTACK(TBMULTISELECTINDEXENTITY(RCCONTROL.NUMULTISELECTINDEX));

    RETURN TRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE VALIDATEFORMATENTITYATTRIBUTES
(
    INUENTITY IN STYNUINDEX
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    NUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        LOOP
            IF TBATTRIBUTESTACK(NUATTRIBUTE).BLPERSISTENT = GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT THEN
                EXIT;
            END IF;

            IF TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE = GE_BOCONSTANTS.CNUROWID THEN
                EXIT;
            END IF;

            IF TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE = GE_BOINSTANCECONSTANTS.CNUFALSE THEN
                EXIT;
            END IF;

            IF RCCONTROL.BLVALIDATEREQUIREDATTRIBUTE = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
                IF TBATTRIBUTESTACK(NUATTRIBUTE).BLREQUIRED = GE_BOINSTANCECONSTANTS.CNUTRUE AND TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE IS NULL THEN
                    ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ATTRIBUTE_REQUIRED, FSBATTRIBUTENAME (NUATTRIBUTE) ||'|'|| FSBENTITYNAME (TBATTRIBUTESTACK(NUATTRIBUTE).NUENTITY, FALSE));
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

                IF TBATTRIBUTESTACK(NUATTRIBUTE).BLISNULL = GE_BOINSTANCECONSTANTS.CNUFALSE AND TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE IS NULL THEN
                    ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ATTRIBUTE_NULL, FSBATTRIBUTENAME (NUATTRIBUTE) ||'|'|| FSBENTITYNAME (TBATTRIBUTESTACK(NUATTRIBUTE).NUENTITY, FALSE));
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            END IF;

            IF RCCONTROL.BLVALIDATETYPEATTRIBUTE = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
                IF FBLVALIDATEDATATYPE (TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE, TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).NULENGTH, TBATTRIBUTESTACK(NUATTRIBUTE).NUSCALE) = FALSE THEN
                    ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_DATA_TYPE_ERROR, FSBATTRIBUTENAME (NUATTRIBUTE) || '|' || FSBENTITYNAME (TBATTRIBUTESTACK(NUATTRIBUTE).NUENTITY, FALSE));
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            END IF;

            EXIT;
        END LOOP;

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE CREATEENTITYINSERT
(
    INUCONTROLENTITY IN NUMBER,
    INUENTITY        IN NUMBER
)
IS

NUROWIDINDEX  STYNUINDEX;

BEGIN
    IF TBENTITYSTACK(INUCONTROLENTITY).ININSERTCURSOR IS NULL THEN
        TBENTITYSTACK(INUCONTROLENTITY).ININSERTCURSOR := DBMS_SQL.OPEN_CURSOR;

        DBMS_SQL.PARSE (TBENTITYSTACK(INUCONTROLENTITY).ININSERTCURSOR, TBENTITYSTACK(INUCONTROLENTITY).SBINSERT, DBMS_SQL.NATIVE);
    END IF;

    IF NOT FBLACCKEYATTRIBUTESTACK (TBENTITYSTACK(INUENTITY).SBINSTANCE, TBENTITYSTACK(INUENTITY).SBGROUP, TBENTITYSTACK(INUENTITY).SBENTITY, GE_BOCONSTANTS.CSBROWID, NUROWIDINDEX) THEN
        ADDENTITYROWID (TBENTITYSTACK(INUENTITY).NUINSTANCE, TBENTITYSTACK(INUENTITY).SBINSTANCE, TBENTITYSTACK(INUENTITY).SBGROUP, TBENTITYSTACK(INUENTITY).SBENTITY);
    ELSE
        IF TBENTITYSTACK(INUENTITY).NUROWIDINDEX IS NULL THEN
            TBENTITYSTACK(INUENTITY).NUROWIDINDEX := NUROWIDINDEX;
        END IF;
    END IF;


EXCEPTION
    WHEN OTHERS THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_INSERT_ERROR, FSBENTITYNAME (INUENTITY, FALSE) ||' - '|| SUBSTR (SQLERRM, 1, 900));
        RAISE EX.CONTROLLED_ERROR;
END;




















PROCEDURE INSERTENTITYATTRIBUTES
(
    INUENTITY IN NUMBER
)
IS

INREGISTROS  INTEGER;
NUATTRIBUTE  STYNUINDEX;
RIROWID      ROWID;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.InsertEntityAttributes ['|| TBENTITYSTACK(INUENTITY).SBINSTANCE ||']['|| TBENTITYSTACK(INUENTITY).SBGROUP ||']['|| TBENTITYSTACK(INUENTITY).SBENTITY ||']', 21);

    NUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        LOOP
            IF TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE = GE_BOCONSTANTS.CNUROWID THEN
                EXIT;
            END IF;

            IF NOT FBLVALIDATEATTRIBUTETYPE (TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).BLPERSISTENT) THEN
                EXIT;
            END IF;

            BINDATTRIBUTE (TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUCONTROLENTITY).ININSERTCURSOR, TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE, TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE);

            TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE := TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE;

            EXIT;
        END LOOP;

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;


    IF  TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUCONTROLENTITY).ININSERTCURSOR IS NOT NULL AND
        DBMS_SQL.IS_OPEN(TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUCONTROLENTITY).ININSERTCURSOR)
    THEN
        INREGISTROS := DBMS_SQL.EXECUTE (TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUCONTROLENTITY).ININSERTCURSOR);

        RIROWID := DBMS_SQL.LAST_ROW_ID;
    ELSE
        ERRORS.SETERROR(CNUERRINVALIDCURSOR,TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUCONTROLENTITY).ININSERTCURSOR);
        RAISE EX.CONTROLLED_ERROR;
    END IF;


    TBATTRIBUTESTACK(TBENTITYSTACK(INUENTITY).NUROWIDINDEX).SBOLDVALUE := ROWIDTOCHAR (RIROWID);
    TBATTRIBUTESTACK(TBENTITYSTACK(INUENTITY).NUROWIDINDEX).SBNEWVALUE := ROWIDTOCHAR (RIROWID);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_INSERT_ERROR, FSBENTITYNAME (INUENTITY, FALSE) ||' - '|| SUBSTR (SQLERRM, 1, 900));
        RAISE EX.CONTROLLED_ERROR;
END INSERTENTITYATTRIBUTES;


PROCEDURE INSERTENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
IS

SBCURRENTINSTANCE   STYSBNAME;
SBCURRENTGROUP      STYSBNAME;
SBCURRENTENTITY     STYSBNAME;
SBCURRENTATTRIBUTE  STYSBNAME;

NUENTITY  STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.InsertEntity ['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']', 21);

    VALIDATEINSTANCEMANAGER (FALSE);

 
    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    IF TBENTITYSTACK(NUENTITY).BLPERSISTENT = GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT THEN
        RETURN;
    END IF;

 
    LOADENTITYATTRIBUTES (ISBINSTANCE, TBENTITYSTACK(NUENTITY).NUINSTANCE, ISBGROUP, ISBENTITY, NUENTITY, TRUE, TRUE);

 
    CREATEENTITYINSERT (TBENTITYSTACK(NUENTITY).NUCONTROLENTITY, NUENTITY);

 
    VALIDATEFORMATENTITYATTRIBUTES (NUENTITY);

    GETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);
    
    SETCURRENTDATA (ISBINSTANCE, ISBGROUP, ISBENTITY, NULL);

 
    EXECUTEEXPRESSION (TBENTITYSTACK(TBENTITYSTACK(NUENTITY).NUCONTROLENTITY).NUINSERTBEFOREEXPRESSION);

 
    INSERTENTITYATTRIBUTES (NUENTITY);

 
    EXECUTEEXPRESSION (TBENTITYSTACK(TBENTITYSTACK(NUENTITY).NUCONTROLENTITY).NUINSERTAFTEREXPRESSION);

    SETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);
    
    TBENTITYSTACK(NUENTITY).NUEVENT         := GE_BOINSTANCECONSTANTS.CNUUPDATE;
    TBENTITYSTACK(NUENTITY).BLLOADOLDVALUES := GE_BOINSTANCECONSTANTS.CNUTRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE INSERTINSTANCE
(
    INUINSTANCE IN STYNUINDEX,
    ISBINSTANCE IN VARCHAR2
)
IS

NUENTITY  STYNUINDEX;
NUINDEX   STYNUINDEX;

BEGIN
    INSTANCEENTITYLEVEL (INUINSTANCE, TBENTITYLEVEL);

    SETCURRENTDATA (ISBINSTANCE, NULL, NULL, NULL);

    NUINDEX := TBENTITYLEVEL.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        NUENTITY := TBENTITYLEVEL(NUINDEX).NUENTITY;

        INSERTENTITY (ISBINSTANCE, TBENTITYSTACK(NUENTITY).SBGROUP, TBENTITYSTACK(NUENTITY).SBENTITY);

        NUINDEX := TBENTITYLEVEL.NEXT(NUINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE INSERTINSTANCE
(
    ISBINSTANCE IN VARCHAR2
)
IS

TBINSTANCEHIERARCHY  TYTBINSTANCEHIERARCHY;

NUINSTANCE  STYNUINDEX;
NUENTITY    STYNUINDEX;
NUINDEX     STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    INSERTINSTANCE (NUINSTANCE, ISBINSTANCE);

    INSTANCEHIERARCHY (ISBINSTANCE, TBINSTANCEHIERARCHY);

    NUINDEX := TBINSTANCEHIERARCHY.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        INSERTINSTANCE (TBINSTANCEHIERARCHY(NUINDEX).NUINSTANCE, TBINSTANCEHIERARCHY(NUINDEX).SBINSTANCE);

        NUINDEX := TBINSTANCEHIERARCHY.NEXT(NUINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE INSERTALL
IS

NUINSTANCE  STYNUINDEX;
NUENTITY    STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    NUINSTANCE := TBINSTANCESTACK(RCCONTROL.NUCONTROLINSTANCE).NUFIRSTCHILDINSTANCE;
    WHILE NUINSTANCE IS NOT NULL LOOP
        INSERTINSTANCE (TBINSTANCESTACK(NUINSTANCE).SBINSTANCE);

        NUINSTANCE := TBINSTANCESTACK(NUINSTANCE).NUNEXTBROTHERINSTANCE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;






















PROCEDURE CREATEENTITYSELECT
(
    INUENTITY  IN  NUMBER,
    IOINCURSOR OUT INTEGER
)
IS

NUATTRIBUTE STYNUINDEX;

SBSQL    STYSBSQL;
SBWHERE  STYSBSQL;

INCURSOR   INTEGER;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.fblCreateEntitySelect ['|| INUENTITY ||']', 21);

    NUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        LOOP
            TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE := GE_BOINSTANCECONSTANTS.CNUFALSE;

            IF NOT FBLVALIDATEATTRIBUTETYPE (TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).BLPERSISTENT) THEN
                EXIT;
            END IF;

            IF RCCONTROL.NUSELECTMODE = GE_BOINSTANCECONSTANTS.CNUKEY_SELECT THEN
                IF TBATTRIBUTESTACK(NUATTRIBUTE).BLISKEY != GE_BOINSTANCECONSTANTS.CNUTRUE THEN
                    EXIT;
                END IF;
            ELSE
                IF TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE != GE_BOCONSTANTS.CNUROWID THEN
                    EXIT;
                END IF;
            END IF;

            IF TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE IS NULL THEN
                ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_ATTRIBUTE_NULL, FSBATTRIBUTENAME (NUATTRIBUTE) ||'|'|| FSBENTITYNAME (TBATTRIBUTESTACK(NUATTRIBUTE).NUENTITY, FALSE));
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE := GE_BOINSTANCECONSTANTS.CNUTRUE;

            SBWHERE := SBWHERE || TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE
                       || '=:VAR_' || TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE
                       || ' AND ';
            EXIT;
        END LOOP;

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

    IF SBWHERE IS NULL THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_UNDEFINED_WHERE, FSBENTITYNAME (INUENTITY));
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    SBWHERE := SUBSTR (SBWHERE, 1, LENGTH (SBWHERE) - 5);

    SBSQL := TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUCONTROLENTITY).SBSELECT ||
             ' WHERE ' || SBWHERE;

    IOINCURSOR := DBMS_SQL.OPEN_CURSOR;

    DBMS_SQL.PARSE (IOINCURSOR, SBSQL, DBMS_SQL.NATIVE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF IOINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(IOINCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR(IOINCURSOR);
        END IF;
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NOT_SELECT_ENTITY, FSBENTITYNAME (INUENTITY, FALSE) ||' - '|| SUBSTR (SQLERRM, 1, 900));
        IF IOINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(IOINCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR(IOINCURSOR);
        END IF;
        RAISE EX.CONTROLLED_ERROR;
END CREATEENTITYSELECT;





















PROCEDURE LOADENTITYOLDVALUES
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    IBLLOCK       IN BOOLEAN DEFAULT FALSE,
    IBLOVERWRITE  IN BOOLEAN DEFAULT FALSE
)
IS

INCURSOR   INTEGER;
INRECORDS  INTEGER;

NUENTITY        STYNUINDEX;
NUATTRIBUTE     STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.LoadEntityOldValues', 21);

    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    IF TBENTITYSTACK(TBENTITYSTACK(NUENTITY).NUCONTROLENTITY).BLPERSISTENT = GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT THEN
        RETURN;
    END IF;

    TBENTITYSTACK(NUENTITY).BLLOADOLDVALUES := GE_BOINSTANCECONSTANTS.CNUFALSE;

    LOADENTITYATTRIBUTES (ISBINSTANCE, TBENTITYSTACK(NUENTITY).NUINSTANCE, ISBGROUP, ISBENTITY, NUENTITY, FALSE, FALSE);

    CREATEENTITYSELECT (NUENTITY, INCURSOR);
    
    IF INCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(INCURSOR) THEN

        NUATTRIBUTE := TBENTITYSTACK(NUENTITY).NUFIRSTATTRIBUTE;
        WHILE NUATTRIBUTE IS NOT NULL LOOP
            IF FBLVALIDATEATTRIBUTETYPE (TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).BLPERSISTENT) THEN
                DEFINECOLUMN (INCURSOR, TBATTRIBUTESTACK(TBATTRIBUTESTACK(NUATTRIBUTE).NUCONTROLATTRIBUTE).NUSEQUENCE, TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).NULENGTH);
            END IF;

            IF TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
                BINDATTRIBUTE (INCURSOR, TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE, TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE);
            END IF;

            NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
        END LOOP;

        INRECORDS := DBMS_SQL.EXECUTE (INCURSOR);

        IF DBMS_SQL.FETCH_ROWS (INCURSOR) > 0 THEN
            TBENTITYSTACK(NUENTITY).NUEVENT := GE_BOINSTANCECONSTANTS.CNUUPDATE;
            TBENTITYSTACK(NUENTITY).BLLOADOLDVALUES := GE_BOINSTANCECONSTANTS.CNUTRUE;

            NUATTRIBUTE := TBENTITYSTACK(NUENTITY).NUFIRSTATTRIBUTE;
            WHILE NUATTRIBUTE IS NOT NULL LOOP
                IF TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
                    TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE := TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE;
                ELSE
                    IF FBLVALIDATEATTRIBUTETYPE (TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).BLPERSISTENT) THEN
                        COLUMNVALUE (INCURSOR, TBATTRIBUTESTACK(TBATTRIBUTESTACK(NUATTRIBUTE).NUCONTROLATTRIBUTE).NUSEQUENCE, TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE);
                    END IF;

                    IF (IBLOVERWRITE) OR (TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE IS NULL AND TBATTRIBUTESTACK(NUATTRIBUTE).BLPARAMETERVALUE = GE_BOINSTANCECONSTANTS.CNUFALSE) THEN
                        TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE := TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE;
                    END IF;
                END IF;

                NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
            END LOOP;
        ELSE
            ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NO_RECORD_ENTITY, FSBENTITYNAME (NUENTITY, FALSE));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    ELSE
        ERRORS.SETERROR(CNUERRINVALIDCURSOR,INCURSOR);
        RAISE EX.CONTROLLED_ERROR;
    END IF;
    
    IF INCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN (INCURSOR) THEN
        DBMS_SQL.CLOSE_CURSOR (INCURSOR);
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF INCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN (INCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR (INCURSOR);
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF INCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN (INCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR (INCURSOR);
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END LOADENTITYOLDVALUES;


PROCEDURE LOADENTITYOLDVALUESID
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBVALUE      IN VARCHAR2,
    IBLPERSISTENT IN BOOLEAN DEFAULT TRUE,
    IBLLOCK       IN BOOLEAN DEFAULT FALSE,
    IBLOVERWRITE  IN BOOLEAN DEFAULT FALSE
)
IS

NUCONTROLENTITY  STYNUINDEX;
NUENTITY         STYNUINDEX;
TBATTRIBUTE      TYTBATTRIBUTESTACK;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.LoadEntityOldValuesId ['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']['|| ISBVALUE ||']', 21);

    VALIDATEINSTANCEMANAGER (FALSE);

    LOADENTITYATTRIBUTES (ISBINSTANCE, ISBGROUP, ISBENTITY, FALSE, FALSE);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    GETENTITYKEYATTRIBUTE (NUENTITY, TBATTRIBUTE);

    IF TBATTRIBUTE.COUNT = 0 THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NO_KEY_ENTITY, FSBENTITYNAME (NUENTITY, FALSE));
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF TBATTRIBUTE.COUNT > 1 THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_MULTI_ENTITY_KEY, FSBENTITYNAME (NUENTITY, FALSE));
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    ADDATTRIBUTE (ISBINSTANCE, ISBGROUP, ISBENTITY, TBATTRIBUTE(TBATTRIBUTE.FIRST).SBATTRIBUTE, ISBVALUE, TRUE);

    LOADENTITYOLDVALUES (ISBINSTANCE, ISBGROUP, ISBENTITY, IBLLOCK, IBLOVERWRITE);

    IF IBLPERSISTENT THEN
        TBENTITYSTACK(NUENTITY).BLPERSISTENT := GE_BOINSTANCECONSTANTS.CNUPERSISTENT;
    ELSE
        TBENTITYSTACK(NUENTITY).BLPERSISTENT := GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE LOADINSTANCEOLDVALUES
(
    ISBINSTANCE IN VARCHAR2,
    IBLLOCK     IN BOOLEAN DEFAULT FALSE
)
IS

NUINSTANCE  STYNUINDEX;
NUENTITY    STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    NUENTITY := TBINSTANCESTACK(NUINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP
        LOADENTITYOLDVALUES (ISBINSTANCE, TBENTITYSTACK(NUENTITY).SBGROUP, TBENTITYSTACK(NUENTITY).SBENTITY, IBLLOCK);

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE LOADOLDVALUES
(
    IBLLOCK IN BOOLEAN DEFAULT FALSE
)
IS

NUINSTANCE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    NUINSTANCE := RCCONTROL.NUFIRSTINSTANCE;
    WHILE NUINSTANCE IS NOT NULL LOOP
        LOADINSTANCEOLDVALUES (TBINSTANCESTACK(NUINSTANCE).SBINSTANCE, IBLLOCK);

        NUINSTANCE := TBINSTANCESTACK(NUINSTANCE).NUNEXTINSTANCE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLLOADENTITYOLDVALUES
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
RETURN BOOLEAN
IS

NUENTITY STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    IF TBENTITYSTACK(NUENTITY).BLLOADOLDVALUES = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
        RETURN TRUE;
    END IF;

    RETURN FALSE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLISINITINSTANCECONTROL
RETURN BOOLEAN
IS
BEGIN
    IF RCCONTROL.BLINITMANAGER IS NULL OR RCCONTROL.BLINITMANAGER != GE_BOINSTANCECONSTANTS.CNUINIT_MANAGER_OK THEN
        RETURN FALSE;
    END IF;

    RETURN TRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




















FUNCTION FBLCREATEENTITYUPDATE
(
    INUENTITY  IN STYNUINDEX,
    OINCURSOR  OUT INTEGER
)
RETURN BOOLEAN
IS

NUATTRIBUTE  STYNUINDEX;

SBUPDATE  STYSBSQL;
SBSQL     STYSBSQL;

BEGIN
    SBUPDATE := NULL;

    NUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        LOOP
            TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE := GE_BOINSTANCECONSTANTS.CNUFALSE;

            IF TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE = GE_BOCONSTANTS.CNUROWID THEN
                TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE := GE_BOINSTANCECONSTANTS.CNUTRUE;
                EXIT;
            END IF;

            IF NOT FBLVALIDATEATTRIBUTETYPE (TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).BLPERSISTENT) THEN
                EXIT;
            END IF;

            IF TBATTRIBUTESTACK(NUATTRIBUTE).BLISKEY = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
                EXIT;
            END IF;

            IF TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE = TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE THEN
                EXIT;
            END IF;

            IF TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE IS NULL AND TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE IS NULL THEN
                EXIT;
            END IF;

            TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE := GE_BOINSTANCECONSTANTS.CNUTRUE;

            SBUPDATE := SBUPDATE || TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE || '=:VAR_' || TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE || ', ';

            EXIT;
        END LOOP;

    NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

    IF SBUPDATE IS NULL THEN
        RETURN FALSE;
    END IF;

    SBUPDATE := SUBSTR (SBUPDATE, 1, LENGTH (SBUPDATE) - 2);

    SBSQL := 'UPDATE ' || TBENTITYSTACK(INUENTITY).SBENTITY ||
             ' SET '   || SBUPDATE ||
             ' WHERE ' || GE_BOINSTANCECONSTANTS.CSBROWID || '=:VAR_' || GE_BOINSTANCECONSTANTS.CSBROWID;

    OINCURSOR := DBMS_SQL.OPEN_CURSOR;

    DBMS_SQL.PARSE (OINCURSOR, SBSQL, DBMS_SQL.NATIVE);

    RETURN TRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF OINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(OINCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR(OINCURSOR);
        END IF;
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NOT_UPDATE_ENTITY, FSBENTITYNAME (INUENTITY, FALSE) ||' - '|| SUBSTR (SQLERRM, 1, 900));
        IF OINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(OINCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR(OINCURSOR);
        END IF;
        RAISE EX.CONTROLLED_ERROR;
END FBLCREATEENTITYUPDATE;





















PROCEDURE UPDATEENTITYATTRIBUTES
(
    INUENTITY  IN NUMBER,
    IOINCURSOR IN OUT INTEGER
)
IS

NUATTRIBUTE  STYNUINDEX;

INREGISTROS  INTEGER;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.UpdateEntityAttributes ['|| INUENTITY ||']['|| IOINCURSOR ||']', 21);

    NUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        IF TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
            BINDATTRIBUTE (IOINCURSOR, TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE, TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE);
        END IF;

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

    IF IOINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(IOINCURSOR) THEN
        INREGISTROS := DBMS_SQL.EXECUTE (IOINCURSOR);
    ELSE
        ERRORS.SETERROR(CNUERRINVALIDCURSOR,IOINCURSOR);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF DBMS_SQL.IS_OPEN(IOINCURSOR) THEN
        DBMS_SQL.CLOSE_CURSOR (IOINCURSOR);
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF IOINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN (IOINCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR (IOINCURSOR);
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF IOINCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN (IOINCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR (IOINCURSOR);
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END UPDATEENTITYATTRIBUTES;


PROCEDURE UPDATEENTITYOLDVALUES
(
    INUENTITY IN NUMBER
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.UpdateEntityOldValues ['|| INUENTITY ||']', 21);

    NUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        IF TBATTRIBUTESTACK(NUATTRIBUTE).BLBINDATTRIBUTE = GE_BOINSTANCECONSTANTS.CNUTRUE THEN

            TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE := TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE;
        END IF;

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE UPDATEENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
IS

SBCURRENTINSTANCE   STYSBNAME;
SBCURRENTGROUP      STYSBNAME;
SBCURRENTENTITY     STYSBNAME;
SBCURRENTATTRIBUTE  STYSBNAME;

NUENTITY     STYNUINDEX;
NUATTRIBUTE  STYNUINDEX;

INCURSOR     INTEGER;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.UpdateEntity ['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']', 21);

    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    IF TBENTITYSTACK(NUENTITY).BLPERSISTENT = GE_BOINSTANCECONSTANTS.CNUNOT_PERSISTENT THEN
        RETURN;
    END IF;

    IF TBENTITYSTACK(NUENTITY).BLLOADOLDVALUES != GE_BOINSTANCECONSTANTS.CNUTRUE THEN
        ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NOT_LOAD_OLD_VALUES, FSBENTITYNAME (NUENTITY));
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF NOT FBLCREATEENTITYUPDATE (NUENTITY, INCURSOR) THEN
        RETURN;
    END IF;

    GETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);
    
    SETCURRENTDATA (ISBINSTANCE, ISBGROUP, ISBENTITY, NULL);

    VALIDATEFORMATENTITYATTRIBUTES (NUENTITY);

 
    EXECUTEEXPRESSION (TBENTITYSTACK(TBENTITYSTACK(NUENTITY).NUCONTROLENTITY).NUUPDATEBEFOREEXPRESSION);

 
    UPDATEENTITYATTRIBUTES (NUENTITY, INCURSOR);

 
    EXECUTEEXPRESSION (TBENTITYSTACK(TBENTITYSTACK(NUENTITY).NUCONTROLENTITY).NUUPDATEAFTEREXPRESSION);

 
    UPDATEENTITYOLDVALUES (NUENTITY);

    SETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE UPDATEINSTANCE
(
    INUINSTANCE IN NUMBER,
    ISBINSTANCE IN VARCHAR2
)
IS

NUINDEX   STYNUINDEX;
NUENTITY  STYNUINDEX;

BEGIN
    INSTANCEENTITYLEVEL (INUINSTANCE, TBENTITYLEVEL);

    SETCURRENTDATA (ISBINSTANCE, NULL, NULL, NULL);

    NUINDEX := TBENTITYLEVEL.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        NUENTITY := TBENTITYLEVEL(NUINDEX).NUENTITY;

        UPDATEENTITY (ISBINSTANCE, TBENTITYSTACK(NUENTITY).SBGROUP, TBENTITYSTACK(NUENTITY).SBENTITY);

        NUINDEX := TBENTITYLEVEL.NEXT(NUINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE UPDATEINSTANCE
(
    ISBINSTANCE IN VARCHAR2
)
IS


TBINSTANCEHIERARCHY  TYTBINSTANCEHIERARCHY;

NUINSTANCE  STYNUINDEX;
NUENTITY    STYNUINDEX;
NUINDEX     STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    UPDATEINSTANCE (NUINSTANCE, ISBINSTANCE);

    INSTANCEHIERARCHY (ISBINSTANCE, TBINSTANCEHIERARCHY);

    NUINDEX := TBINSTANCEHIERARCHY.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        UPDATEINSTANCE (TBINSTANCEHIERARCHY(NUINDEX).NUINSTANCE, TBINSTANCEHIERARCHY(NUINDEX).SBINSTANCE);

        NUINDEX := TBINSTANCEHIERARCHY.NEXT(NUINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE UPDATEALL
IS

NUINSTANCE  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    NUINSTANCE := TBINSTANCESTACK(RCCONTROL.NUCONTROLINSTANCE).NUFIRSTCHILDINSTANCE;
    WHILE NUINSTANCE IS NOT NULL LOOP
        UPDATEINSTANCE (NUINSTANCE, TBINSTANCESTACK(NUINSTANCE).SBINSTANCE);

        NUINSTANCE := TBINSTANCESTACK(NUINSTANCE).NUNEXTBROTHERINSTANCE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;





















PROCEDURE DELETEENTITY
(
    ISBINSTANCE      IN VARCHAR2,
    ISBGROUP         IN VARCHAR2,
    ISBENTITY        IN VARCHAR2,
    IBODESTROYENTITY IN BOOLEAN DEFAULT TRUE,
    IBORAISEERROR    IN BOOLEAN DEFAULT TRUE
)
IS

SBCURRENTINSTANCE   STYSBNAME;
SBCURRENTGROUP      STYSBNAME;
SBCURRENTENTITY     STYSBNAME;
SBCURRENTATTRIBUTE  STYSBNAME;

SBSQL  STYSBSQL;

NUCONTROLENTITY  STYNUINDEX;
NUENTITY         STYNUINDEX;
NUATTRIBUTE      STYNUINDEX;

INREGISTROS  INTEGER;
INCURSOR     INTEGER;

BEGIN
    UT_TRACE.TRACE ('ge_boInstanceControl.DeleteEntity ['|| ISBINSTANCE ||']['|| ISBGROUP ||']['|| ISBENTITY ||']', 21);

    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    IF TBENTITYSTACK(NUENTITY).BLLOADOLDVALUES != GE_BOINSTANCECONSTANTS.CNUTRUE THEN
        IF IBORAISEERROR THEN
            ERRORS.SETERROR (GE_BOINSTANCECONSTANTS.CNUMSG_NO_RECORD_ENTITY, FSBENTITYNAME (NUENTITY, FALSE));
            RAISE EX.CONTROLLED_ERROR;
        ELSE
            RETURN;
        END IF;
    END IF;

    SBSQL := 'DELETE ' || TBENTITYSTACK(NUENTITY).SBENTITY ||
             ' WHERE ' || GE_BOINSTANCECONSTANTS.CSBROWID || '=:VAR_' || GE_BOINSTANCECONSTANTS.CSBROWID;

    GETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);

    SETCURRENTDATA (ISBINSTANCE, ISBGROUP, ISBENTITY, NULL);

    

    EXECUTEEXPRESSION (TBENTITYSTACK(TBENTITYSTACK(NUENTITY).NUCONTROLENTITY).NUDELETEBEFOREEXPRESSION);

    INCURSOR := DBMS_SQL.OPEN_CURSOR;
    
    IF INCURSOR IS NOT NULL THEN

        DBMS_SQL.PARSE (INCURSOR, SBSQL, DBMS_SQL.NATIVE);

        NUATTRIBUTE := TBENTITYSTACK(NUENTITY).NUFIRSTATTRIBUTE;
        WHILE NUATTRIBUTE IS NOT NULL LOOP
            IF TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE = GE_BOCONSTANTS.CNUROWID THEN
                BINDATTRIBUTE (INCURSOR, TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE, TBATTRIBUTESTACK(NUATTRIBUTE).NUTYPE, TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE);
            END IF;

            NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
        END LOOP;

        INREGISTROS := DBMS_SQL.EXECUTE (INCURSOR);

        DBMS_SQL.CLOSE_CURSOR (INCURSOR);

        
        EXECUTEEXPRESSION (TBENTITYSTACK(TBENTITYSTACK(NUENTITY).NUCONTROLENTITY).NUDELETEAFTEREXPRESSION);

        SETCURRENTDATA (SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE);

        
        IF IBODESTROYENTITY THEN
            DESTROYENTITY (ISBINSTANCE, ISBGROUP, ISBENTITY);
        END IF;
    ELSE
        ERRORS.SETERROR(CNUERRINVALIDCURSOR,INCURSOR);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF INCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN (INCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR (INCURSOR);
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF INCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN (INCURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR (INCURSOR);
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END DELETEENTITY;



PROCEDURE DELETEINSTANCE
(
    INUINSTANCE IN STYNUINDEX,
    ISBINSTANCE IN VARCHAR2
)
IS

NUENTITY  STYNUINDEX;
NUINDEX   STYNUINDEX;

BEGIN
    INSTANCEENTITYLEVEL (INUINSTANCE, TBENTITYLEVEL);

    SETCURRENTDATA (ISBINSTANCE, NULL, NULL, NULL);

    NUINDEX := TBENTITYLEVEL.LAST;
    WHILE NUINDEX IS NOT NULL LOOP
        NUENTITY := TBENTITYLEVEL(NUINDEX).NUENTITY;

        IF TBENTITYSTACK(NUENTITY).BLPERSISTENT = GE_BOINSTANCECONSTANTS.CNUPERSISTENT THEN
            DELETEENTITY (ISBINSTANCE, TBENTITYSTACK(NUENTITY).SBGROUP, TBENTITYSTACK(NUENTITY).SBENTITY);
        END IF;
        
        NUINDEX := TBENTITYLEVEL.PRIOR(NUINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DELETEINSTANCE
(
    ISBINSTANCE IN VARCHAR2
)
IS

TBINSTANCEHIERARCHY  TYTBINSTANCEHIERARCHY;

NUINSTANCE  STYNUINDEX;
NUINDEX     STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    INSTANCEHIERARCHY (ISBINSTANCE, TBINSTANCEHIERARCHY);

    NUINDEX := TBINSTANCEHIERARCHY.LAST;
    WHILE NUINDEX IS NOT NULL LOOP
        DELETEINSTANCE (TBINSTANCEHIERARCHY(NUINDEX).NUINSTANCE, TBINSTANCEHIERARCHY(NUINDEX).SBINSTANCE);

        NUINDEX := TBINSTANCEHIERARCHY.PRIOR(NUINDEX);
    END LOOP;

    DELETEINSTANCE (NUINSTANCE, ISBINSTANCE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE CLEARENTITY
(
    INUENTITY IN NUMBER
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    NUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE := NULL;
        TBATTRIBUTESTACK(NUATTRIBUTE).SBOLDVALUE := NULL;

        TBATTRIBUTESTACK(NUATTRIBUTE).BLPARAMETERVALUE := GE_BOINSTANCECONSTANTS.CNUFALSE;

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE CLEARENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
IS

NUENTITY  STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    CLEARENTITY (NUENTITY);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

PROCEDURE CLEARENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
IS

    SBGROUP    VARCHAR2(4000);
    TBNAME      GE_BOINSTANCECONTROL.TYTBSBNAME;
    NUIDX       NUMBER;

BEGIN

    IF ( NOT GE_BOINSTANCECONTROL.FBLGETENTITYGROUP ( ISBINSTANCE, ISBENTITY, TBNAME ) ) THEN
        RETURN;
    END IF;

    IF ( TBNAME.COUNT > 0 ) THEN

        NUIDX := TBNAME.FIRST;
        LOOP

            EXIT WHEN ( NUIDX IS NULL );

            
            SBGROUP := TBNAME(NUIDX);
            GE_BOINSTANCECONTROL.CLEARENTITY(ISBINSTANCE, SBGROUP, ISBENTITY);

            NUIDX := TBNAME.NEXT(NUIDX);

        END LOOP;

    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




PROCEDURE CLEARINSTANCE
(
    ISBINSTANCE IN VARCHAR2
)
IS

NUINSTANCE  STYNUINDEX;
NUENTITY    STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    NUENTITY := TBINSTANCESTACK(NUINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP
        CLEARENTITY (NUENTITY);

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE GETENTITYKEYATTRIBUTE
(
    INUENTITY     IN STYNUINDEX,
    IOTBATTRIBUTE IN OUT NOCOPY TYTBATTRIBUTESTACK
)
IS

NUATTRIBUTE     STYNUINDEX;
NUINDEX         STYNUINDEX;
NUCURRENTINDEX  STYNUINDEX;
SBVALUE         STYSBVALUE;
BLREQUIRED      STYNUBOOLEAN;
BLISNULL        STYNUBOOLEAN;

BEGIN
    IF IOTBATTRIBUTE.COUNT != 0 THEN
        IOTBATTRIBUTE.DELETE;
    END IF;

    NUINDEX := 1;

    NUATTRIBUTE := TBENTITYSTACK(TBENTITYSTACK(INUENTITY).NUCONTROLENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        IF TBATTRIBUTESTACK(NUATTRIBUTE).BLISKEY = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
            IOTBATTRIBUTE(NUINDEX) := TBATTRIBUTESTACK(NUATTRIBUTE);

            CURRENTATTRIBUTEDATA (NUATTRIBUTE, TBENTITYSTACK(INUENTITY).SBINSTANCE, TBENTITYSTACK(INUENTITY).SBGROUP, TBENTITYSTACK(INUENTITY).SBENTITY, TBATTRIBUTESTACK(NUATTRIBUTE).SBATTRIBUTE, NUCURRENTINDEX, SBVALUE, BLREQUIRED, BLISNULL);

            IOTBATTRIBUTE(NUINDEX).SBNEWVALUE := SBVALUE;

            NUINDEX := NUINDEX + 1;
        END IF;

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE GETCONTROL
(
    ORCCONTROL OUT TYRCCONTROL
)
IS
BEGIN
    ORCCONTROL := RCCONTROL;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETINSTANCE
(
    INUINSTANCE IN STYNUINDEX,
    ORCINSTANCE OUT TYRCINSTANCESTACK
)
IS
BEGIN
    ORCINSTANCE := TBINSTANCESTACK(INUINSTANCE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETENTITY
(
    INUENTITY IN STYNUINDEX,
    ORCENTITY OUT TYRCENTITYSTACK
)
IS
BEGIN
    ORCENTITY := TBENTITYSTACK(INUENTITY);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETATTRIBUTE
(
    INUATTRIBUTE IN STYNUINDEX,
    ORCATTRIBUTE OUT TYRCATTRIBUTESTACK
)
IS
BEGIN
    ORCATTRIBUTE := TBATTRIBUTESTACK(INUATTRIBUTE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETHASH
(
    INUHASH IN STYNUINDEX,
    ORCHASH OUT TYRCINSTANCEHASH
)
IS
BEGIN
    ORCHASH := TBINSTANCEHASH(INUHASH);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE SETCONTROL
(
    IRCCONTROL IN TYRCCONTROL
)
IS
BEGIN
    RCCONTROL := IRCCONTROL;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETINSTANCE
(
    INUINSTANCE IN STYNUINDEX,
    IRCINSTANCE IN TYRCINSTANCESTACK
)
IS
BEGIN
    TBINSTANCESTACK(INUINSTANCE) := IRCINSTANCE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETENTITY
(
    INUENTITY IN STYNUINDEX,
    IRCENTITY IN TYRCENTITYSTACK
)
IS
BEGIN
    TBENTITYSTACK(INUENTITY) := IRCENTITY;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETATTRIBUTE
(
    INUATTRIBUTE IN STYNUINDEX,
    IRCATTRIBUTE IN TYRCATTRIBUTESTACK
)
IS
BEGIN
    TBATTRIBUTESTACK(INUATTRIBUTE) := IRCATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE SETHASH
(
    INUHASH IN STYNUINDEX,
    IRCHASH IN TYRCINSTANCEHASH
)
IS
BEGIN
    TBINSTANCEHASH(INUHASH) := IRCHASH;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE GETFIRSTINSTANCE
(
    ONUINSTANCE OUT STYNUINDEX
)
IS
BEGIN
    ONUINSTANCE := RCCONTROL.NUFIRSTINSTANCE;

EXCEPTION
WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETLASTINSTANCE
(
    ONUINSTANCE OUT STYNUINDEX
)
IS
BEGIN
    ONUINSTANCE := RCCONTROL.NULASTINSTANCE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETNEXTINSTANCE
(
    IONUINSTANCE IN OUT STYNUINDEX
)
IS
BEGIN
    IONUINSTANCE := TBINSTANCESTACK(IONUINSTANCE).NUNEXTINSTANCE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETFIRSTINSTANCEENTITY
(
    INUINSTANCE IN STYNUINDEX,
    ONUENTITY   OUT STYNUINDEX
)
IS
BEGIN
    ONUENTITY := TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETFIRSTINSTANCEENTITY
(
    ISBINSTANCE IN VARCHAR2,
    ONUENTITY   OUT STYNUINDEX
)
IS

NUINSTANCE STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    GETFIRSTINSTANCEENTITY (NUINSTANCE, ONUENTITY);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETNEXTINSTANCEENTITY
(
    IONUENTITY IN OUT STYNUINDEX
)
IS
BEGIN
    IONUENTITY := TBENTITYSTACK(IONUENTITY).NUNEXTENTITY;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETFIRSTINSTANCEATTRIBUTE
(
    INUINSTANCE  IN NUMBER,
    ONUATTRIBUTE OUT STYNUINDEX
)
IS
BEGIN
     VALIDATEINSTANCEMANAGER (FALSE);

     ONUATTRIBUTE := TBINSTANCESTACK(INUINSTANCE).NUFIRSTATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETFIRSTINSTANCEATTRIBUTE
(
    ISBINSTANCE  IN VARCHAR2,
    ONUATTRIBUTE OUT STYNUINDEX
)
IS

NUINSTANCE STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    GETFIRSTINSTANCEATTRIBUTE (NUINSTANCE, ONUATTRIBUTE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETNEXTINSTANCEATTRIBUTE
(
    IONUATTRIBUTE IN OUT STYNUINDEX
)
IS
BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    IONUATTRIBUTE := TBATTRIBUTESTACK(IONUATTRIBUTE).NUNEXTINSTANCEATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETFIRSTENTITYATTRIBUTE
(
    INUENTITY    IN VARCHAR2,
    ONUATTRIBUTE OUT STYNUINDEX
)
IS
BEGIN
    ONUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETFIRSTENTITYATTRIBUTE
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    ONUINDEX    OUT STYNUINDEX
)
IS

NUENTITY  STYNUINDEX;

BEGIN
    ACCKEYENTITYSTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    ONUINDEX := TBENTITYSTACK(NUENTITY).NUFIRSTATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETNEXTENTITYATTRIBUTE
(
    IONUATTRIBUTE IN OUT STYNUINDEX
)
IS
BEGIN
    IONUATTRIBUTE := TBATTRIBUTESTACK(IONUATTRIBUTE).NUNEXTENTITYATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE SETSAVEPOINT
IS

NUINDEX  STYNUINDEX;
SBINDEX  STYSBINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    TBROLLBACKINSTANCESTACK.DELETE;
    TBROLLBACKENTITYSTACK.DELETE;
    TBROLLBACKATTRIBUTESTACK.DELETE;
    TBROLLBACKINSTANCEHASH.DELETE;

    

    RCROLLBACKCONTROL := RCCONTROL;

    

    NUINDEX := TBINSTANCESTACK.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP

        TBROLLBACKINSTANCESTACK(NUINDEX) := TBINSTANCESTACK(NUINDEX);

        NUINDEX := TBINSTANCESTACK.NEXT(NUINDEX);
    END LOOP;

    

    NUINDEX := TBENTITYSTACK.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP

        TBROLLBACKENTITYSTACK(NUINDEX) := TBENTITYSTACK(NUINDEX);

        NUINDEX := TBENTITYSTACK.NEXT(NUINDEX);
    END LOOP;

    

    NUINDEX := TBATTRIBUTESTACK.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP

        TBROLLBACKATTRIBUTESTACK(NUINDEX) := TBATTRIBUTESTACK(NUINDEX);

        NUINDEX := TBATTRIBUTESTACK.NEXT(NUINDEX);
    END LOOP;

    

    SBINDEX := TBINSTANCEHASH.FIRST;
    WHILE SBINDEX IS NOT NULL LOOP

        TBROLLBACKINSTANCEHASH(SBINDEX) := TBINSTANCEHASH(SBINDEX);

        SBINDEX := TBINSTANCEHASH.NEXT(SBINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE ROLLBACKSAVEPOINT
IS

NUINDEX  STYNUINDEX;
SBINDEX  STYSBINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    TBINSTANCESTACK.DELETE;
    TBENTITYSTACK.DELETE;
    TBATTRIBUTESTACK.DELETE;
    TBINSTANCEHASH.DELETE;

    

    RCCONTROL := RCROLLBACKCONTROL;

    

    NUINDEX := TBROLLBACKINSTANCESTACK.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP

        TBINSTANCESTACK(NUINDEX) := TBROLLBACKINSTANCESTACK(NUINDEX);

        NUINDEX := TBROLLBACKINSTANCESTACK.NEXT(NUINDEX);
    END LOOP;

    

    NUINDEX := TBROLLBACKENTITYSTACK.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP

        TBENTITYSTACK(NUINDEX) := TBROLLBACKENTITYSTACK(NUINDEX);

        NUINDEX := TBROLLBACKENTITYSTACK.NEXT(NUINDEX);
    END LOOP;

    

    NUINDEX := TBROLLBACKATTRIBUTESTACK.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP

        TBATTRIBUTESTACK(NUINDEX) := TBROLLBACKATTRIBUTESTACK(NUINDEX);

        NUINDEX := TBROLLBACKATTRIBUTESTACK.NEXT(NUINDEX);
    END LOOP;

    

    SBINDEX := TBROLLBACKINSTANCEHASH.FIRST;
    WHILE SBINDEX IS NOT NULL LOOP

        TBINSTANCEHASH(SBINDEX) := TBROLLBACKINSTANCEHASH(SBINDEX);

        SBINDEX := TBROLLBACKINSTANCEHASH.NEXT(SBINDEX);
    END LOOP;

    

    TBROLLBACKINSTANCESTACK.DELETE;
    TBROLLBACKENTITYSTACK.DELETE;
    TBROLLBACKATTRIBUTESTACK.DELETE;
    TBROLLBACKINSTANCEHASH.DELETE;

    RCROLLBACKCONTROL := NULL;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



FUNCTION FBLISENTITYPERSISTENT
(
    INUENTITY IN STYNUINDEX
)
RETURN BOOLEAN
IS
BEGIN
    IF TBENTITYSTACK(INUENTITY).BLPERSISTENT = GE_BOINSTANCECONSTANTS.CNUPERSISTENT THEN
        RETURN TRUE;
    END IF;

    RETURN FALSE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETATTRIBUTEID
(
    ISBINSTANCE    IN VARCHAR2,
    ISBGROUP       IN VARCHAR2,
    ISBENTITY      IN VARCHAR2,
    ISBATTRIBUTE   IN VARCHAR2,
    ONUATTRIBUTEID OUT NUMBER
)
IS

NUATTRIBUTE STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    ONUATTRIBUTEID := TBATTRIBUTESTACK(NUATTRIBUTE).NUATTRIBUTEID;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE GETCURRENTATTRIBUTEID
(
    ONUATTRIBUTEID OUT NUMBER
)
IS
BEGIN
    GETATTRIBUTEID (RCCONTROL.SBCURRENTINSTANCE, RCCONTROL.SBCURRENTGROUP, RCCONTROL.SBCURRENTENTITY, RCCONTROL.SBCURRENTATTRIBUTE, ONUATTRIBUTEID);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FBLGETENTITYGROUP
(
    ISBINSTANCE IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    OTBGROUP    OUT NOCOPY TYTBSBNAME
)
RETURN BOOLEAN
IS

NUINSTANCE  STYNUINDEX;
NUENTITY    STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    OTBGROUP.DELETE;

    NUENTITY := TBINSTANCESTACK(NUINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP
        IF TBENTITYSTACK(NUENTITY).SBENTITY = ISBENTITY THEN
            OTBGROUP(OTBGROUP.COUNT) := TBENTITYSTACK(NUENTITY).SBGROUP;
        END IF;

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;
    END LOOP;

    IF OTBGROUP.COUNT = 0 THEN
        RETURN FALSE;
    END IF;

    RETURN TRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FSBGETFIELDVALUE
(
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
RETURN VARCHAR2
IS

SBINSTANCE  STYSBNAME;
SBVALUE     STYSBVALUE;

BEGIN
    GETCURRENTINSTANCE (SBINSTANCE);

    VALIDATENULLNAMES (SBINSTANCE, NULL, ISBENTITY, ISBATTRIBUTE);

    GETATTRIBUTENEWVALUE (SBINSTANCE, NULL, ISBENTITY, ISBATTRIBUTE, SBVALUE);

    RETURN SBVALUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;




























FUNCTION FSBQUERYFIELDVALUE
(
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
RETURN VARCHAR2
IS

SBINSTANCE  STYSBNAME;
SBVALUE     STYSBVALUE;

BEGIN
    GETCURRENTINSTANCE (SBINSTANCE);

    VALIDATENULLNAMES (SBINSTANCE, NULL, ISBENTITY, ISBATTRIBUTE);

    QUERYATTRIBUTENEWVALUE (SBINSTANCE, NULL, ISBENTITY, ISBATTRIBUTE, SBVALUE);

    RETURN SBVALUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;








FUNCTION FBLHAVEHIERARCHY
(
    ISBINSTANCE IN VARCHAR2
)
RETURN BOOLEAN
IS

NUINSTANCE STYNUINDEX;

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYINSTANCESTACK (ISBINSTANCE, NUINSTANCE);

    IF TBINSTANCESTACK(NUINSTANCE).NUFIRSTCHILDINSTANCE IS NULL THEN
        RETURN FALSE;
    END IF;

    RETURN TRUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



PROCEDURE DSPLYSTRING
(
    ISBSTRING IN VARCHAR2
)
IS
BEGIN
    UT_TRACE.TRACE (ISBSTRING, 1);
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYHEADERINSTANCE
(
    INUINSTANCE IN STYNUINDEX DEFAULT NULL
)
IS

NUINSTANCE STYNUINDEX;

BEGIN

    IF INUINSTANCE IS NOT NULL THEN
        NUINSTANCE := INUINSTANCE;
    ELSE
        NUINSTANCE := RCCONTROL.NUCURRENTINSTANCE;
    END IF;

    IF NUINSTANCE IS NULL THEN
        RETURN;
    END IF;

    UT_TRACE.TRACE('['||
                 TBINSTANCESTACK(NUINSTANCE).NUINSERTBEFOREEXPRESSION ||']['||
                 TBINSTANCESTACK(NUINSTANCE).NUINSERTAFTEREXPRESSION ||'] ['||
                 TBINSTANCESTACK(NUINSTANCE).NUUPDATEBEFOREEXPRESSION ||']['||
                 TBINSTANCESTACK(NUINSTANCE).NUUPDATEAFTEREXPRESSION ||'] ['||
                 TBINSTANCESTACK(NUINSTANCE).NUDELETEBEFOREEXPRESSION ||']['||
                 TBINSTANCESTACK(NUINSTANCE).NUDELETEAFTEREXPRESSION
                 ||']------------- [' ||
                 TBINSTANCESTACK(NUINSTANCE).NUINSTANCE || ' - ' || TBINSTANCESTACK(NUINSTANCE).SBINSTANCE
                 || '] --- [' ||
                 TBINSTANCESTACK(NUINSTANCE).NUFATHER || ' - ' || TBINSTANCESTACK(NUINSTANCE).SBFATHER
                 || '] -------------',1);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYCONTROL
IS

SBSTRING   VARCHAR2(2000);
BEGIN
    SBSTRING := '[' ||
        LPAD (NVL (TO_CHAR (RCCONTROL.NUCONTROLINSTANCE), '-'), 4, ' ') || '][' ||
        LPAD (NVL (TO_CHAR (RCCONTROL.NUGLOBALINSTANCE),  '-'), 4, ' ') || '] [' ||

        LPAD (NVL (TO_CHAR (RCCONTROL.NUFIRSTINSTANCE),   '-'), 4, ' ') || '][' ||
        LPAD (NVL (TO_CHAR (RCCONTROL.NULASTINSTANCE),    '-'), 4, ' ') || '] [' ||

        LPAD (NVL (TO_CHAR (RCCONTROL.NUCURRENTINSTANCE), '-'), 4, ' ') || '] [' ||
        RPAD (NVL (RCCONTROL.SBCURRENTINSTANCE, '-'), 20, ' ') || '][' ||
        ']';

    SBSTRING := SUBSTR (SBSTRING, 1, LENGTH (SBSTRING) - 2);

    UT_TRACE.TRACE (SBSTRING,1);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYINSTANCE
(
    INUINDEX IN STYNUINDEX
)
IS

SBSTRING   VARCHAR2(2000);

BEGIN
    SBSTRING := '[' ||
        

        LPAD (NVL (TO_CHAR (TBINSTANCESTACK(INUINDEX).NUINSTANCE), '-'), 3, ' ') || '][' ||
        LPAD (NVL (TO_CHAR (TBINSTANCESTACK(INUINDEX).NUFATHER), '-'), 3, ' ') || '] [' ||

        
        

        
        

        
        

        
        

        
        

        RPAD (NVL (TBINSTANCESTACK(INUINDEX).SBINSTANCE, '-'), 30, ' ') || '][' ||
        RPAD (NVL (TBINSTANCESTACK(INUINDEX).SBFATHER, '-'), 30, ' ') || '] [' ||

        
        
        
        
        
        
        ']';

    SBSTRING := SUBSTR (SBSTRING, 1, LENGTH (SBSTRING) - 2);

    UT_TRACE.TRACE (SBSTRING,1);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYENTITY
(
    INUINDEX IN STYNUINDEX
)
IS

SBSTRING VARCHAR2(2000);

BEGIN
    SBSTRING := '[' ||
        

        LPAD (NVL (TO_CHAR (TBENTITYSTACK(INUINDEX).NUENTITY), '-'), 3, ' ') || '] [' ||

        LPAD (NVL (TO_CHAR (TBENTITYSTACK(INUINDEX).NUPREVIOUSENTITY), '-'), 3, ' ') || '][' ||
        LPAD (NVL (TO_CHAR (TBENTITYSTACK(INUINDEX).NUNEXTENTITY), '-'), 3, ' ') || '] [' ||

        LPAD (NVL (TO_CHAR (TBENTITYSTACK(INUINDEX).NUFIRSTATTRIBUTE), '-'), 3, ' ') || '][' ||
        LPAD (NVL (TO_CHAR (TBENTITYSTACK(INUINDEX).NULASTATTRIBUTE), '-'), 3, ' ') || '] [' ||

        LPAD (NVL (TO_CHAR (TBENTITYSTACK(INUINDEX).NUROWIDINDEX), '-'), 3, ' ') || '] [' ||

        LPAD (NVL (TO_CHAR (TBENTITYSTACK(INUINDEX).NUEVENT), '-'), 1, ' ') || '] [' ||

        
        
        
        
        
        
        
        RPAD (NVL (TBENTITYSTACK(INUINDEX).SBGROUP, '-'), 15, ' ') || '][' ||
        RPAD (NVL (TBENTITYSTACK(INUINDEX).SBENTITY, '-'), 15, ' ') || '][' ||
        
        
        
        
        
        
        
        
        ']';

    SBSTRING := SUBSTR (SBSTRING, 1, LENGTH (SBSTRING) - 2);

    UT_TRACE.TRACE (SBSTRING,1);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYATTRIBUTE
(
    INUINDEX IN STYNUINDEX
)
IS

SBSTRING VARCHAR2(2000);

BEGIN
    SBSTRING := '[' ||
        

        

        
        

        
        

        
        
        
        
        
        
        
        LPAD (NVL (TO_CHAR (TBATTRIBUTESTACK(INUINDEX).BLPARAMETERVALUE), '-'), 1, ' ') || '][' ||
        
        
        RPAD (NVL (TBATTRIBUTESTACK(INUINDEX).SBGROUP, '-'), 15, ' ') || '][' ||
        RPAD (TBATTRIBUTESTACK(INUINDEX).SBENTITY, 15, ' ') || '][' ||
        RPAD (TBATTRIBUTESTACK(INUINDEX).SBATTRIBUTE, 25, ' ') || '][' ||
        RPAD (NVL (TBATTRIBUTESTACK(INUINDEX).SBOLDVALUE, '-'), 20, ' ') || '][' ||
        RPAD (NVL (TBATTRIBUTESTACK(INUINDEX).SBNEWVALUE, '-'), 20, ' ') || '][' ||
        
        
        
        
        ']';

    SBSTRING := SUBSTR (SBSTRING, 1, LENGTH (SBSTRING) - 2);

    UT_TRACE.TRACE (SBSTRING,1);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYINSTANCESTACK
IS

NUINDEX STYNUINDEX;

BEGIN
    IF (NVL(UT_TRACE.GETLEVEL,0)<=0) THEN
        RETURN;
    END IF;
    NUINDEX := TBINSTANCESTACK.FIRST;
    WHILE (NUINDEX IS NOT NULL) LOOP
        DSPLYINSTANCE (NUINDEX);

        NUINDEX := TBINSTANCESTACK.NEXT(NUINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYENTITYSTACK
(
    INUINSTANCE IN STYNUINDEX DEFAULT NULL
)
IS

NUINSTANCE STYNUINDEX;
NUINDEX    STYNUINDEX;

BEGIN
    IF INUINSTANCE IS NOT NULL THEN
        NUINSTANCE := INUINSTANCE;
    ELSE
        NUINSTANCE := RCCONTROL.NUCURRENTINSTANCE;
    END IF;

    IF NUINSTANCE IS NULL THEN
        RETURN;
    END IF;
    
    IF (NVL(UT_TRACE.GETLEVEL,0)<=0) THEN
        RETURN;
    END IF;

    DSPLYHEADERINSTANCE (NUINSTANCE);

    NUINDEX := TBINSTANCESTACK(NUINSTANCE).NUFIRSTENTITY;
    WHILE (NUINDEX IS NOT NULL) LOOP
        DSPLYENTITY (NUINDEX);

        NUINDEX := TBENTITYSTACK(NUINDEX).NUNEXTENTITY;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYATTRIBUTESTACK
(
    INUINSTANCE IN STYNUINDEX DEFAULT NULL
)
IS

NUINSTANCE   STYNUINDEX;
NUENTITY     STYNUINDEX;
NUATTRIBUTE  STYNUINDEX;

BEGIN
    IF INUINSTANCE IS NOT NULL THEN
        NUINSTANCE := INUINSTANCE;
    ELSE
        NUINSTANCE := RCCONTROL.NUCURRENTINSTANCE;
    END IF;

    IF NUINSTANCE IS NULL THEN
        RETURN;
    END IF;
    
    IF (NVL(UT_TRACE.GETLEVEL,0)<=0) THEN
        RETURN;
    END IF;
    
    DSPLYHEADERINSTANCE (NUINSTANCE);

    NUENTITY := TBINSTANCESTACK(NUINSTANCE).NUFIRSTENTITY;
    WHILE NUENTITY IS NOT NULL LOOP

        NUATTRIBUTE := TBENTITYSTACK(NUENTITY).NUFIRSTATTRIBUTE;
        WHILE NUATTRIBUTE IS NOT NULL LOOP
            DSPLYATTRIBUTE (NUATTRIBUTE);

            NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
        END LOOP;

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYENTITYATTRIBUTESTACK
(
    INUENTITY IN STYNUINDEX
)
IS

NUATTRIBUTE  STYNUINDEX;

BEGIN
    IF (NVL(UT_TRACE.GETLEVEL,0)<=0) THEN
        RETURN;
    END IF;
    DSPLYENTITY (INUENTITY);

    UT_TRACE.TRACE ('===========================================================================',1);

    NUATTRIBUTE := TBENTITYSTACK(INUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        DSPLYATTRIBUTE (NUATTRIBUTE);

        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYALLENTITYSTACK
(
    INUMODE IN NUMBER DEFAULT GE_BOINSTANCECONSTANTS.CNUFALSE
)
IS

NUINSTANCE  STYNUINDEX;

BEGIN
    IF (NVL(UT_TRACE.GETLEVEL,0)<=0) THEN
        RETURN;
    END IF;
    UT_TRACE.TRACE ('===========================================================================',1);

    IF INUMODE = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
        DSPLYENTITYSTACK (RCCONTROL.NUCONTROLINSTANCE);
        UT_TRACE.TRACE (' ');
    END IF;

    NUINSTANCE := RCCONTROL.NUFIRSTINSTANCE;
    WHILE NUINSTANCE IS NOT NULL LOOP
        DSPLYENTITYSTACK (NUINSTANCE);

        NUINSTANCE := TBINSTANCESTACK(NUINSTANCE).NUNEXTINSTANCE;
    END LOOP;

    UT_TRACE.TRACE ('===========================================================================',1);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE DSPLYALLATTRIBUTESTACK
(
    INUMODE IN NUMBER DEFAULT GE_BOINSTANCECONSTANTS.CNUFALSE
)
IS

NUINDEX     STYNUINDEX;
TBHIERARCHY TYTBINSTANCEHIERARCHY;

BEGIN
    IF (NVL(UT_TRACE.GETLEVEL,0)<=0) THEN
        RETURN;
    END IF;
    UT_TRACE.TRACE ('===========================================================================',1);

    IF INUMODE = GE_BOINSTANCECONSTANTS.CNUTRUE THEN
        DSPLYATTRIBUTESTACK (RCCONTROL.NUCONTROLINSTANCE);
        DSPLYATTRIBUTESTACK (RCCONTROL.NUGLOBALINSTANCE);
        UT_TRACE.TRACE (' ',1);
    END IF;

    INSTANCEHIERARCHY (GE_BOINSTANCECONSTANTS.CSBCONTROL_INSTANCE, TBHIERARCHY);

    NUINDEX := TBHIERARCHY.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP

        DSPLYATTRIBUTESTACK (TBHIERARCHY(NUINDEX).NUINSTANCE);

        NUINDEX := TBHIERARCHY.NEXT(NUINDEX);
    END LOOP;

    UT_TRACE.TRACE ('===========================================================================',1);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


PROCEDURE CHECKATTRIBUTEVALUEANYGROUP
(
    ISBINSTANCE    IN VARCHAR2,
    ISBENTITY      IN VARCHAR2,
    ISBATTRIBUTE   IN VARCHAR2,
    ISBVALUE       IN VARCHAR2,
    OSBGROUP      OUT VARCHAR2,
    OBLEXISTS     OUT BOOLEAN
)

IS

    TBNAME      GE_BOINSTANCECONTROL.TYTBSBNAME;
    SBAUXVALUE  VARCHAR2(4000);
    NUIDX       NUMBER;
    
BEGIN

    OSBGROUP      := NULL;
    OBLEXISTS     := FALSE;

    IF ( NOT GE_BOINSTANCECONTROL.FBLGETENTITYGROUP ( ISBINSTANCE, ISBENTITY, TBNAME ) ) THEN
        RETURN;
    END IF;

    IF ( TBNAME.COUNT > 0 ) THEN

        NUIDX := TBNAME.FIRST;
        LOOP

            EXIT WHEN ( NUIDX IS NULL );
            
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE
            (
                ISBINSTANCE, TBNAME(NUIDX), ISBENTITY,
                ISBATTRIBUTE, SBAUXVALUE
            );

            IF ( SBAUXVALUE = ISBVALUE ) THEN

                OSBGROUP      := TBNAME(NUIDX);
                OBLEXISTS     := TRUE;
                RETURN;
                
            END IF;

            NUIDX := TBNAME.NEXT(NUIDX);

        END LOOP;

    END IF;

END CHECKATTRIBUTEVALUEANYGROUP;

PROCEDURE DESTROYGRUPPEDENTITY
(
    ISBINSTANCENAME VARCHAR2,
    ISBENTITYNAME   VARCHAR2
)
IS
    TBGRUPOS  GE_BOINSTANCECONTROL.TYTBSBNAME;
    NUIDX     NUMBER;

BEGIN

    IF
    (
        GE_BOINSTANCECONTROL.FBLGETENTITYGROUP
        (
            ISBINSTANCENAME,
            ISBENTITYNAME,
            TBGRUPOS
        )
    ) THEN
    
        NUIDX := TBGRUPOS.FIRST;
        LOOP
            EXIT WHEN ( NUIDX IS NULL);
            GE_BOINSTANCECONTROL.DESTROYENTITY
            (
                ISBINSTANCENAME,
                TBGRUPOS(NUIDX),
                ISBENTITYNAME
            );
            NUIDX := TBGRUPOS.NEXT(NUIDX);
        END LOOP;
    END IF ;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
END DESTROYGRUPPEDENTITY;


PROCEDURE EXISTINSTANCESTACK
(
    ISBINSTANCE  IN VARCHAR2,
    IONUINSTANCE IN OUT STYNUINDEX,
    OSBEXIST     OUT VARCHAR2
)IS
    BLEXIST     BOOLEAN;
    BEGIN
        OSBEXIST := GE_BOCONSTANTS.CSBNO;
        BLEXIST := FBLACCKEYINSTANCESTACK(ISBINSTANCE, IONUINSTANCE);
        IF BLEXIST THEN
            OSBEXIST := GE_BOCONSTANTS.CSBYES;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

END EXISTINSTANCESTACK;

PROCEDURE EXISTENTITYSTACK
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    IONUENTITY  IN OUT STYNUINDEX,
    OSBEXIST     OUT VARCHAR2
)
IS
    BLEXIST     BOOLEAN;
    BEGIN
        OSBEXIST := GE_BOCONSTANTS.CSBNO;
        BLEXIST := FBLACCKEYENTITYSTACK(ISBINSTANCE, ISBGROUP, ISBENTITY, IONUENTITY);
        IF BLEXIST THEN
            OSBEXIST := GE_BOCONSTANTS.CSBYES;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

END EXISTENTITYSTACK;

PROCEDURE EXISTATTRIBUTESTACK
(
    ISBINSTANCE   IN VARCHAR2,
    ISBGROUP      IN VARCHAR2,
    ISBENTITY     IN VARCHAR2,
    ISBATTRIBUTE  IN VARCHAR2,
    IONUATTRIBUTE IN OUT STYNUINDEX,
    OSBEXIST     OUT VARCHAR2
)
IS
    BLEXIST     BOOLEAN;
    BEGIN
        OSBEXIST := GE_BOCONSTANTS.CSBNO;
        BLEXIST := FBLACCKEYATTRIBUTESTACK(ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, IONUATTRIBUTE);
        IF BLEXIST THEN
            OSBEXIST := GE_BOCONSTANTS.CSBYES;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

END EXISTATTRIBUTESTACK;


FUNCTION FSBATTRIBUTENEWVALUE
(
    ISBINSTANCE  IN VARCHAR2,
    ISBGROUP     IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)RETURN VARCHAR2
IS

NUATTRIBUTE  STYNUINDEX;
SBVALUE     VARCHAR2(2000);

BEGIN
    VALIDATEINSTANCEMANAGER (FALSE);

    ACCKEYATTRIBUTESTACK (ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE);

    SBVALUE := TBATTRIBUTESTACK(NUATTRIBUTE).SBNEWVALUE;
    
    UT_TRACE.TRACE ('ge_boInstanceControl.fsbAttributeNewValue Instance['|| ISBINSTANCE ||'] Group['|| ISBGROUP ||'] Entity['|| ISBENTITY ||'] Attribute['|| ISBATTRIBUTE ||'] Value['|| SBVALUE ||']', 21);
    
    RETURN SBVALUE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


FUNCTION FTBGETATTRIBCURRINSTANC
(
    ISBENTITY IN VARCHAR2
)
RETURN TYTBATTRIBUTESTACK
IS
    NUENTITY     STYNUINDEX;
    NUATTRIBUTE  STYNUINDEX;
    TBATTRIBUTES TYTBATTRIBUTESTACK;

BEGIN
    ACCKEYENTITYSTACK(
        RCCONTROL.SBCURRENTINSTANCE,
        NULL,
        ISBENTITY,
        NUENTITY
    );

    NUATTRIBUTE := TBENTITYSTACK(NUENTITY).NUFIRSTATTRIBUTE;
    WHILE NUATTRIBUTE IS NOT NULL LOOP
        TBATTRIBUTES(TBATTRIBUTES.COUNT + 1) := TBATTRIBUTESTACK(NUATTRIBUTE);
        NUATTRIBUTE := TBATTRIBUTESTACK(NUATTRIBUTE).NUNEXTENTITYATTRIBUTE;
    END LOOP;

    RETURN TBATTRIBUTES;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;

END FTBGETATTRIBCURRINSTANC;


















PROCEDURE GETENTITYEVENT
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2,
    ONUEVENT    OUT NUMBER
)
IS
    NUENTITY     STYNUINDEX;
BEGIN
    ACCKEYENTITYSTACK(ISBINSTANCE, ISBGROUP, ISBENTITY, NUENTITY);

    ONUEVENT    := TBENTITYSTACK(NUENTITY).NUEVENT;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END GETENTITYEVENT;

















FUNCTION FNUGETENTITYEVENT
(
    ISBINSTANCE IN VARCHAR2,
    ISBGROUP    IN VARCHAR2,
    ISBENTITY   IN VARCHAR2
)
RETURN  NUMBER
IS
    NUEVENT    NUMBER;
BEGIN
    GETENTITYEVENT(ISBINSTANCE, ISBGROUP, ISBENTITY, NUEVENT);

    RETURN NUEVENT;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END FNUGETENTITYEVENT;











FUNCTION FSBGETCURRENTINSTANCE
RETURN GE_BOINSTANCECONTROL.STYSBNAME
IS
BEGIN
    RETURN RCCONTROL.SBCURRENTINSTANCE;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END FSBGETCURRENTINSTANCE;











FUNCTION FSBGETCURRENTGROUP
RETURN GE_BOINSTANCECONTROL.STYSBNAME
IS
BEGIN
    RETURN RCCONTROL.SBCURRENTGROUP;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END FSBGETCURRENTGROUP;











FUNCTION FSBGETCURRENTENTITY
RETURN GE_BOINSTANCECONTROL.STYSBNAME
IS
BEGIN
    RETURN RCCONTROL.SBCURRENTENTITY;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END FSBGETCURRENTENTITY;











FUNCTION FSBGETCURRENTATTRIBUTE
RETURN GE_BOINSTANCECONTROL.STYSBNAME
IS
BEGIN
    RETURN RCCONTROL.SBCURRENTATTRIBUTE;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
	   RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END FSBGETCURRENTATTRIBUTE;











FUNCTION FNUGETCURRENTENTITYEVENT
RETURN  NUMBER
IS
BEGIN
    RETURN GE_BOINSTANCECONTROL.FNUGETENTITYEVENT(RCCONTROL.SBCURRENTINSTANCE, RCCONTROL.SBCURRENTGROUP, RCCONTROL.SBCURRENTENTITY);
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END FNUGETCURRENTENTITYEVENT;











PROCEDURE GETENTITYSTACKBYENTITY
(
    INUINSTANCE     IN  STYNUINDEX,
    ISBENTITY       IN  STYSBNAME,
    OTBENTITYSTACK  OUT NOCOPY TYTBENTITYSTACK
)
IS
    NUENTITY    STYNUINDEX;
BEGIN
    OTBENTITYSTACK.DELETE;

    NUENTITY := TBINSTANCESTACK(INUINSTANCE).NUFIRSTENTITY;
    
    WHILE (NUENTITY IS NOT NULL) LOOP
    
        IF  (TBENTITYSTACK(NUENTITY).SBENTITY = ISBENTITY) THEN
        
            OTBENTITYSTACK(NUENTITY) := TBENTITYSTACK(NUENTITY);
        
        END IF;

        NUENTITY := TBENTITYSTACK(NUENTITY).NUNEXTENTITY;
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END GETENTITYSTACKBYENTITY;











PROCEDURE GETINSTANCESTACKBYINSTANCE
(
    ISBINSTANCE         IN  STYSBNAME,
    OTBINSTANCESTACK    OUT NOCOPY TYTBINSTANCESTACK
)
IS
    NUINSTANCE          STYNUINDEX;
BEGIN
    OTBINSTANCESTACK.DELETE;

    NUINSTANCE    := TBINSTANCESTACK.FIRST;

    WHILE (NUINSTANCE IS NOT NULL) LOOP

        IF  (TBINSTANCESTACK(NUINSTANCE).SBINSTANCE = ISBINSTANCE) THEN

            OTBINSTANCESTACK(NUINSTANCE) := TBINSTANCESTACK(NUINSTANCE);

        END IF;

        NUINSTANCE := TBINSTANCESTACK.NEXT(NUINSTANCE);
        
    END LOOP;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END GETINSTANCESTACKBYINSTANCE;

BEGIN

    SBREQUIREDVALIDATE := GE_BOINSTANCEPARAMETER.FSBREQUIREDVALIDATE;
    

    TBINITCONTROL.DELETE;
    TBINSTANCECONTROL.DELETE;
    

    RCCONTROL.BLINITMANAGER   := NULL;
    RCCONTROL.NUDSPLYMODE     := GE_BOINSTANCECONSTANTS.CNUDBMS_OUTPUT;
    RCCONTROL.NUATTRIBUTENAME := GE_BOINSTANCECONSTANTS.CNUTECHNICAL_NAME;
    RCCONTROL.NUDSPLY         := GE_BOINSTANCECONSTANTS.CNUDSPLY_ON;
    RCCONTROL.NUSELECTMODE    := GE_BOINSTANCECONSTANTS.CNUKEY_SELECT;

    IF SBREQUIREDVALIDATE = GE_BOINSTANCEPARAMETER.FSBGETYES THEN
        RCCONTROL.BLVALIDATEREQUIREDATTRIBUTE := GE_BOINSTANCECONSTANTS.CNUTRUE;
    ELSE
        RCCONTROL.BLVALIDATEREQUIREDATTRIBUTE := GE_BOINSTANCECONSTANTS.CNUFALSE;
    END IF;
    
    RCCONTROL.BLVALIDATETYPEATTRIBUTE     := GE_BOINSTANCECONSTANTS.CNUTRUE;
    RCCONTROL.BLFORMATATTRIBUTE           := GE_BOINSTANCECONSTANTS.CNUTRUE;

    RCCONTROL.NUINSTANCESEQUENCE  := 0;
    RCCONTROL.NUENTITYSEQUENCE    := 0;
    RCCONTROL.NUATTRIBUTESEQUENCE := 0;

    RCCONTROL.NUINSTANCENAMESEQUENCE := 0;

    

    RCROLLBACKCONTROL.BLINITMANAGER := NULL;

END GE_BOINSTANCECONTROL;