PACKAGE BODY OR_BOOrderItems
IS
	
    CSBVERSION           CONSTANT VARCHAR2(20)            := 'SAO224451';
    
    
    GTBQUOTATIONITEMS      CC_BOQUOTATIONMGR.TYTBQUOTITEMSLIQUID;
    
    
    CNUITEM_IS_NOT_ACT  CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE := 901275;

    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
    
        RETURN CSBVERSION;
    
    END;

    
    FUNCTION FBLEXISTITEMSBYCODE
    (
        ISBCODE             IN OR_ORDER_ITEMS.ELEMENT_CODE %TYPE,
        ITBACTIVITYITEMS    IN OR_BCORDERACTIVITIES.TYTBACTIVITYITEMS
    ) RETURN BOOLEAN

    IS
    BEGIN

        FOR NUINDEX IN ITBACTIVITYITEMS.FIRST..ITBACTIVITYITEMS.LAST LOOP
            UT_TRACE.TRACE('ElementCOde '||ITBACTIVITYITEMS(NUINDEX).SBELEMENTCODE || ' code '|| ISBCODE ,10);
            IF (ITBACTIVITYITEMS(NUINDEX).SBELEMENTCODE = ISBCODE) THEN
                RETURN TRUE;
            END IF;
        END LOOP;
        RETURN FALSE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

	FUNCTION FBLITEMWASINWARRANTY
    (
      IRCORDERITEMS     IN  DAOR_ORDER_ITEMS.STYOR_ORDER_ITEMS,
      ITBACTIVITYITEMS  IN  OR_BCORDERACTIVITIES.TYTBACTIVITYITEMS
    )
    RETURN BOOLEAN
    IS
        DTFINALWARRANTYDATE GE_ITEM_WARRANTY.FINAL_WARRANTY_DATE%TYPE;
        NUITEMWARRANTYID    GE_ITEM_WARRANTY.ITEM_WARRANTY_ID%TYPE;
        NUINDEX             BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('[GE_BOItemWarranty.fboElemIsInWarranty] Inicio', 2);

        IF IRCORDERITEMS.ITEMS_ID IS NULL OR IRCORDERITEMS.ELEMENT_ID IS NULL THEN
            RETURN FALSE;
        END IF;
        IF ITBACTIVITYITEMS.COUNT > 0 THEN
            NUINDEX := ITBACTIVITYITEMS.FIRST;
            LOOP
                IF ITBACTIVITYITEMS(NUINDEX).NUITEMID = IRCORDERITEMS.ITEMS_ID
                AND ITBACTIVITYITEMS(NUINDEX).NUELEMENTID = IRCORDERITEMS.ELEMENT_ID THEN
                    RETURN TRUE;
                END IF;

                EXIT WHEN NUINDEX = ITBACTIVITYITEMS.LAST;
                NUINDEX := ITBACTIVITYITEMS.NEXT(NUINDEX);
            END LOOP;
        END IF;

        UT_TRACE.TRACE('[GE_BOItemWarranty.fboElemIsInWarranty] Fin', 2);

        RETURN FALSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLITEMWASINWARRANTY;

	PROCEDURE PROCESSITEMINSERTED
    (
        INUORDER  IN OR_ORDER.ORDER_ID%TYPE
    )
    IS
        TBORDERITEMS    DAOR_ORDER_ITEMS.STYOR_ORDER_ITEMS;

	BEGIN
        UT_TRACE.TRACE('[OR_BOOrderItems.processItemInserted] INICIO', 2);
        
        DELETE FROM OR_ORDER_ITEMS WHERE OR_ORDER_ITEMS.ORDER_ID = INUORDER;

        
        IF OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT%ISOPEN THEN
            CLOSE OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT;
        END IF;
		OPEN OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT
		(
            INUORDER
		);
        FETCH OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT INTO TBORDERITEMS.ITEMS_ID, TBORDERITEMS.VALUE, TBORDERITEMS.ASSIGNED_ITEM_AMOUNT, TBORDERITEMS.LEGAL_ITEM_AMOUNT;
		WHILE (OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT%FOUND) LOOP
            TBORDERITEMS.ORDER_ITEMS_ID := OR_BOSEQUENCES.FNUNEXTOR_ORDER_ITEMS;
            TBORDERITEMS.ORDER_ID := INUORDER;
            TBORDERITEMS.TOTAL_PRICE := 0;
            DAOR_ORDER_ITEMS.INSRECORD(TBORDERITEMS);
            FETCH OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT INTO TBORDERITEMS.ITEMS_ID, TBORDERITEMS.VALUE, TBORDERITEMS.ASSIGNED_ITEM_AMOUNT, TBORDERITEMS.LEGAL_ITEM_AMOUNT;
        END LOOP;

		CLOSE OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT;
        UT_TRACE.TRACE('[OR_BOOrderItems.processItemInserted] FIN', 2);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            IF OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT%ISOPEN THEN
                CLOSE OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT;
            END IF;
            RAISE;
		WHEN OTHERS THEN
            IF OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT%ISOPEN THEN
                CLOSE OR_BCORDERITEMS.CUTOTALITEMCOSTTOINSERT;
            END IF;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
	END;
	
    PROCEDURE UPDLEGALITEMAMOUNTBYORDERID
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUACTIVITY         IN  OR_ORDER_ITEMS.ITEMS_ID%TYPE
    )
    IS
        TBORDERS      CONSTANTS.TY_TBNUMBER;
        NUINDEX       BINARY_INTEGER;
        NUORDERITEMID OR_ORDER_ITEMS.ORDER_ITEMS_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('  =======> Inicia Metodo OR_BOOrderItems.updLegalItemAmuntByOrderId',12);

        OR_BCORDERITEMS.GETORDERITEMSBYORDER(INUORDERID,INUACTIVITY,TBORDERS);
        IF (TBORDERS.COUNT > 0) THEN
            NUINDEX := TBORDERS.FIRST;
            LOOP
                NUORDERITEMID := TBORDERS(NUINDEX);
                
                DAOR_ORDER_ITEMS.UPDLEGAL_ITEM_AMOUNT(NUORDERITEMID,1);

                EXIT WHEN NUINDEX = TBORDERS.LAST;
                NUINDEX := TBORDERS.NEXT(NUINDEX);
            END LOOP;

        END IF;

        UT_TRACE.TRACE('  =======> Finaliza Metodo OR_BOOrderItems.updLegalItemAmuntByOrderId',12);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
    	WHEN OTHERS THEN
    		ERRORS.SETERROR;
    		RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE INSERTORUPDATEORDERITEMS
    (
        INUORDERID         IN  OR_ORDER.ORDER_ID%TYPE,
        INUITEMSID         IN  OR_ORDER_ITEMS.ITEMS_ID%TYPE,
        INULEGALITEMAMOUNT IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE
    )
    IS
        TBORDERITEMS  OR_BCORDERITEMS.TYTBORDERITEMS;
        SBINDEX VARCHAR2(32);
        NUORDERITEMID OR_ORDER_ITEMS.ORDER_ITEMS_ID%TYPE;
        RCORDERITEMS   DAOR_ORDER_ITEMS.STYOR_ORDER_ITEMS;
    BEGIN

        UT_TRACE.TRACE('[OR_BOOrderItems.InsertOrUpdateOrderItems] INICIO',2);

        OR_BCORDERITEMS.GETORDERITEMBYORDER(INUORDERID, TBORDERITEMS);

        SBINDEX :=  INUORDERID||'-'||INUITEMSID;

        IF   TBORDERITEMS.EXISTS(SBINDEX) THEN
            DAOR_ORDER_ITEMS.UPDLEGAL_ITEM_AMOUNT(TBORDERITEMS(SBINDEX).NUORDERITEMSID, INULEGALITEMAMOUNT);
        ELSE
            RCORDERITEMS.ORDER_ITEMS_ID := OR_BOSEQUENCES.FNUNEXTOR_ORDER_ITEMS;
            RCORDERITEMS.ORDER_ID := INUORDERID;
            RCORDERITEMS.ITEMS_ID := INUITEMSID;
            RCORDERITEMS.ASSIGNED_ITEM_AMOUNT := 1;
            RCORDERITEMS.LEGAL_ITEM_AMOUNT := INULEGALITEMAMOUNT;
            RCORDERITEMS.TOTAL_PRICE := 0;
            RCORDERITEMS.VALUE := 0;
            DAOR_ORDER_ITEMS.INSRECORD(RCORDERITEMS);
        END IF;
        
        UT_TRACE.TRACE('[OR_BOOrderItems.InsertOrUpdateOrderItems] FIN',2);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
    	WHEN OTHERS THEN
    		ERRORS.SETERROR;
    		RAISE EX.CONTROLLED_ERROR;
    END;
    
    


















































    PROCEDURE SETITEMVALUEBYQUOTATION
    (
        IRCQUOTATION        IN    DACC_QUOTATION.STYCC_QUOTATION,
        INUITEMID           IN    GE_ITEMS.ITEMS_ID%TYPE,
        INUTASKTYPEID       IN    OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUAMOUNT           IN    OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE,
        INULIQUIDMETHOD     IN    MO_PACKAGES.LIQUIDATION_METHOD%TYPE,
        INUEXECUTIONDATE    IN    OR_ORDER.EXEC_INITIAL_DATE%TYPE,
        ONUTOTAL            OUT   NUMBER,
        ONUAIUPERCENT       OUT   CC_QUOT_ITEM_VALUES.AIU_PERCENTAGE%TYPE
    )
    IS
        
        SBINDEX             CC_BOQUOTATIONMGR.STYQUOTITEMIDX;
        
        NUREMAININGITEMS    CC_QUOTATION_ITEM.REMAINING_ITEMS%TYPE;
        
        NUUNITVALUE         CC_QUOTATION_ITEM.UNIT_VALUE%TYPE;
        
        NULIQUIDMETHOD      MO_PACKAGES.LIQUIDATION_METHOD%TYPE := INULIQUIDMETHOD;
    BEGIN

        UT_TRACE.TRACE(' INICIA - OR_BOOrderItems.SetItemValueByQuotation', 8);
        UT_TRACE.TRACE('Cotizaci�n['||IRCQUOTATION.QUOTATION_ID||'] - �tem['||INUITEMID||'] - Tipo de Trabajo['||INUTASKTYPEID||']',9);
        UT_TRACE.TRACE('Cantidad Legalizada['||INUAMOUNT||'] - Cantidad de �tems Cotizados['||GTBQUOTATIONITEMS.COUNT||']',9);

        
        ONUTOTAL      := NULL;
        ONUAIUPERCENT := NULL;

        
        SBINDEX := LPAD( TO_CHAR( INUTASKTYPEID ), 11, '0' ) ||
                   LPAD( TO_CHAR( INUITEMID ), 16, '0' );

        
        IF  (NULIQUIDMETHOD IS NULL) THEN
            NULIQUIDMETHOD  := MO_BOPACKAGES.FNUGETLIQUIDMETHOD(IRCQUOTATION.PACKAGE_ID);
        END IF;

        
        IF(GTBQUOTATIONITEMS.COUNT = 0) THEN
            CC_BOQUOTATIONMGR.GETITEMSBYQUOTATION(IRCQUOTATION.QUOTATION_ID, NULIQUIDMETHOD, INUEXECUTIONDATE, GTBQUOTATIONITEMS);
        END IF;

        
        IF (GTBQUOTATIONITEMS.EXISTS(SBINDEX)) THEN

            
            NUREMAININGITEMS := NVL(GTBQUOTATIONITEMS(SBINDEX).NUREMAININGITEM,0);
            
            
            GTBQUOTATIONITEMS(SBINDEX).NUREMAININGITEM := NUREMAININGITEMS - INUAMOUNT;
            
            UT_TRACE.TRACE('�tems Restantes['||GTBQUOTATIONITEMS(SBINDEX).NUREMAININGITEM||']', 9);
            
            
            ONUTOTAL := CC_BOQUOTATIONMGR.FNUGETITEMVALUEBYORDER( IRCQUOTATION,
                                                                  NUREMAININGITEMS,
                                                                  INUAMOUNT,
                                                                  GTBQUOTATIONITEMS(SBINDEX).NUVALUEITEM,
                                                                  INUITEMID
                                                               );
                                                               
            
            ONUAIUPERCENT :=  GTBQUOTATIONITEMS(SBINDEX).NUAIUPERCENT;
        ELSE
            
            IF (IRCQUOTATION.NO_QUOT_ITEM_CHARGE = CC_BOCONSTANTS.CSBNO) THEN
                ONUTOTAL := 0;
            END IF;
        END IF;

        UT_TRACE.TRACE(' FIN OR_BOOrderItems.SetItemValueByQuotation onuTotal['||ONUTOTAL||'] onuAIUPercent['||ONUAIUPERCENT||']',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETITEMVALUEBYQUOTATION;
    

    FUNCTION FNUSETITEMVALUEBYQUOTATION
    (
        IRCQUOTATION     IN    DACC_QUOTATION.STYCC_QUOTATION,
        INUITEMID        IN    GE_ITEMS.ITEMS_ID%TYPE,
        INUTASKTYPEID    IN    OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUAMOUNT        IN    OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE,
        INULIQUIDMETHOD  IN    MO_PACKAGES.LIQUIDATION_METHOD%TYPE DEFAULT NULL
    )
    RETURN NUMBER
    IS
    BEGIN
        UT_TRACE.TRACE('OR_BOOrderItems.fnuSetItemValueByQuotation OBSOLETO', 8);
        RETURN NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUSETITEMVALUEBYQUOTATION;
    
    


















    PROCEDURE UPDATEREMAININGITEMS
    IS

    BEGIN

        UT_TRACE.TRACE( 'Inicio OR_BOOrderItems.UpdateRemainingItems', 5 );

        
        CC_BOQUOTATIONMGR.UPDATEREMAININGITEMS (GTBQUOTATIONITEMS);

        
        OR_BOORDERITEMS.CLEARQUOTATIONCACHE;

        UT_TRACE.TRACE( 'Fin OR_BOOrderItems.UpdateRemainingItems', 5 );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEREMAININGITEMS;
    
    














    PROCEDURE CLEARQUOTATIONCACHE
    IS
    BEGIN
        UT_TRACE.TRACE( 'Inicio OR_BOOrderItems.ClearQuotationCache', 5 );

        
        GTBQUOTATIONITEMS.DELETE;
        OR_BCCONCEPTVALUE.GTBQUOTATIONITEMS.DELETE;

        UT_TRACE.TRACE( 'Fin OR_BOOrderItems.ClearQuotationCache', 5 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLEARQUOTATIONCACHE;
















FUNCTION FSBGETORDERSERIALEQU
(
    INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
)
RETURN GE_ITEMS_SERIADO.SERIE%TYPE
IS
    SBSERIE GE_ITEMS_SERIADO.SERIE%TYPE;
BEGIN
    SBSERIE := OR_BCORDER.FSBGETORDERSERIALEQU(INUORDERID);
    RETURN SBSERIE;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END FSBGETORDERSERIALEQU;


    

















    FUNCTION FSBGETORDERITEMS
    (
        INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
    ) RETURN VARCHAR2
    IS
        
        TBOR_ORDER_ITEMS        DAOR_ORDER_ITEMS.TYTBOR_ORDER_ITEMS;
        NUINDEX                 NUMBER;

        SBITEMSORDER            VARCHAR2(4000);
        
    BEGIN
        
        UT_TRACE.TRACE( 'INICIO OR_BOOrderItems.fsbGetOrderItems', 5 );

        
        TBOR_ORDER_ITEMS := OR_BCORDERITEMS.FTBGETORDERITEMS(INUORDERID);
        NUINDEX := TBOR_ORDER_ITEMS.FIRST;

        LOOP
            EXIT WHEN NUINDEX IS NULL;
            
            IF (SBITEMSORDER IS NULL ) THEN
                SBITEMSORDER := TBOR_ORDER_ITEMS(NUINDEX).ITEMS_ID;
            ELSE
                SBITEMSORDER := SBITEMSORDER ||'|'||TBOR_ORDER_ITEMS(NUINDEX).ITEMS_ID;
            END IF;
            
            NUINDEX := TBOR_ORDER_ITEMS.NEXT(NUINDEX);
        END LOOP;
        
        UT_TRACE.TRACE( 'FIN OR_BOOrderItems.fsbGetOrderItems', 5 );
        RETURN SBITEMSORDER;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETORDERITEMS;

    


















    FUNCTION FBLEXISTITEMORDER
    (
        INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE,
        INUITEMSID  IN  GE_ITEMS.ITEMS_ID%TYPE
    ) RETURN BOOLEAN
    IS
        
    BEGIN
        
        UT_TRACE.TRACE('OR_BOOrderItems.fblExistItemOrder', 6 );
        
        RETURN OR_BCORDERITEMS.FBLEXISTITEMORDER(INUORDERID,INUITEMSID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTITEMORDER;
    

    














    FUNCTION FSBGETITEMACTIDESC
    (
        INUITEMS_ID                 IN          GE_ITEMS.ITEMS_ID%TYPE
    )
    RETURN GE_ITEMS.DESCRIPTION%TYPE
    IS
        RCITEM                                  DAGE_ITEMS.STYGE_ITEMS;

    BEGIN
    
        UT_TRACE.TRACE('Inicio [OR_BOOrderItems.fsbGetItemActiDesc]', 1);
        
        
        RCITEM := DAGE_ITEMS.FRCGETRECORD( INUITEMS_ID );
        
        
        IF( RCITEM.ITEM_CLASSIF_ID != OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY ) THEN
        
            
            GE_BOERRORS.SETERRORCODEARGUMENT
            (
                INUAPPERRORCODE =>  CNUITEM_IS_NOT_ACT,
                ISBARGUMENT     =>  INUITEMS_ID
            );
        
        END IF;

        UT_TRACE.TRACE('Fin [OR_BOOrderItems.fsbGetItemActiDesc]', 1);

        
        RETURN RCITEM.DESCRIPTION;
    
    EXCEPTION
    
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR [OR_BOOrderItems.fsbGetItemActiDesc]', 1);
    	    RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS [OR_BOOrderItems.fsbGetItemActiDesc]', 1);
            RAISE EX.CONTROLLED_ERROR;
    
    END FSBGETITEMACTIDESC;
    
END OR_BOORDERITEMS;