
CREATE OR REPLACE PACKAGE BODY GE_BOMONITOR_LOG IS
   RCMONITOR DAGE_MONITOR_LOG.STYGE_MONITOR_LOG;
   BOINSERT_MONITOR_LOG BOOLEAN := FALSE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE UPDATE_MONITOR_LOG
    IS
      NUTOTAL_EXEC NUMBER;
      PRAGMA AUTONOMOUS_TRANSACTION;
      NUTRECORDS NUMBER( 15 ) := GE_BOPROCESS_EXECUTOR.FNUGETTOTAL_RECORDS + GE_BOPROCESS_EXECUTOR.FNUGETPROCESS_RECORDS;
    BEGIN
      IF BOINSERT_MONITOR_LOG = FALSE THEN
         COMMIT;
         RETURN;
      END IF;
      IF GE_BOPROCESS_EXECUTOR.FNUGETPROCESS_RECORDS > 0 THEN
         GE_BOPROCESS_EXECUTOR.INC_TOTAL_EXEC;
      END IF;
      IF GE_BOPROCESS_EXECUTOR.FNUGETTOTAL_EXEC = 0 THEN
         NUTOTAL_EXEC := 1;
       ELSE
         NUTOTAL_EXEC := GE_BOPROCESS_EXECUTOR.FNUGETTOTAL_EXEC;
      END IF;
      RCMONITOR.DATE_END_EXECUTION := SYSDATE;
      RCMONITOR.TOTAL_RECORDS := NUTRECORDS;
      RCMONITOR.MAX_TIME_EXEC := GE_BOPROCESS_EXECUTOR.FNUGETMAX_TIME_EXEC;
      RCMONITOR.MIN_TIME_EXEC := GE_BOPROCESS_EXECUTOR.FNUGETMIN_TIME_EXEC;
      RCMONITOR.LAST_TIME_EXEC := GE_BOPROCESS_EXECUTOR.FNUGETLAST_TIME_EXEC;
      RCMONITOR.AVG_TIME_EXEC := GE_BOPROCESS_EXECUTOR.FNUGETTOTAL_TIME_EXEC / NUTOTAL_EXEC;
      RCMONITOR.TOTAL_TIME_EXEC := GE_BOPROCESS_EXECUTOR.FNUGETTOTAL_TIME_EXEC;
      RCMONITOR.TOTAL_EXEC := GE_BOPROCESS_EXECUTOR.FNUGETTOTAL_EXEC;
      RCMONITOR.FAILURE_RECORDS := GE_BOPROCESS_EXECUTOR.FNUGETFAILURE_RECORDS;
      DAGE_MONITOR_LOG.UPDRECORD( RCMONITOR );
      COMMIT;
      GE_BOPROCESS_EXECUTOR.SETTOTAL_RECORDS( NUTRECORDS );
    EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         UT_TRACE.TRACE( 'Update_Monitor_Log:' || SQLERRM );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DROP_MONITOR_LOG
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      DAGE_MONITOR_LOG.DELRECORD( USERENV( 'SESSIONID' ), GE_BOPROCESS_EXECUTOR.FNUGETPROCESS_EXECUTOR_ID, GE_BOPROCESS_EXECUTOR.FNUGETTHREAD_ID, CONSTANTS.CNUSUCCESS );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RETURN;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSERT_MONITOR_LOG
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      IF BOINSERT_MONITOR_LOG THEN
         COMMIT;
         RETURN;
      END IF;
      RCMONITOR.SESSION_ID := USERENV( 'SESSIONID' );
      RCMONITOR.PROCESS_EXECUTOR_ID := GE_BOPROCESS_EXECUTOR.FNUGETPROCESS_EXECUTOR_ID;
      RCMONITOR.DATE_START := SYSDATE;
      RCMONITOR.THREAD_NUMBER := GE_BOPROCESS_EXECUTOR.FNUGETTHREAD_ID;
      RCMONITOR.DATE_END_EXECUTION := GE_BOPROCESS_EXECUTOR.FDTGETDATE_END_EXECUTION;
      RCMONITOR.MAX_TIME_EXEC := GE_BOPROCESS_EXECUTOR.FNUGETMAX_TIME_EXEC;
      RCMONITOR.MIN_TIME_EXEC := GE_BOPROCESS_EXECUTOR.FNUGETMIN_TIME_EXEC;
      RCMONITOR.LAST_TIME_EXEC := 0;
      RCMONITOR.AVG_TIME_EXEC := 0;
      RCMONITOR.TOTAL_TIME_EXEC := 0;
      RCMONITOR.TOTAL_RECORDS := 0;
      RCMONITOR.TOTAL_EXEC := 0;
      RCMONITOR.HOST_ID := GE_BOHOST.FNUGETHOSTIDBYNAME;
      DAGE_MONITOR_LOG.INSRECORD( RCMONITOR, RCMONITOR.ROWID );
      COMMIT;
      BOINSERT_MONITOR_LOG := TRUE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELETE_RECORDS
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      DELETE ge_monitor_log;
      IF SQL%FOUND THEN
         COMMIT;
       ELSE
         ROLLBACK;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END GE_BOMONITOR_LOG;
/


