
CREATE OR REPLACE PACKAGE MO_BCRESTRICTION IS
   SUBTYPE STYRCRESTRICTION IS DAMO_RESTRICTION.STYMO_RESTRICTION;
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   PROCEDURE GETRESTRICTBYPACKAGE( INUPACKAGE IN MO_PACKAGES.PACKAGE_ID%TYPE, ORFRESTRICTION OUT CONSTANTS.TYREFCURSOR );
   FUNCTION FSBEXISTRESTBYPACKAGE( INUPACKAGE IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN VARCHAR2;
   FUNCTION FRFRESTRICTIONBYSOURCE( INURESTSOURCEID IN MO_RESTRICTION.RESTRICTION_SOURCE%TYPE )
    RETURN CONSTANTS.TYREFCURSOR;
   FUNCTION FBSEXISTCUSTOMERRESTRICTION( INUPACKAGEID IN MO_RESTRICTION.PACKAGE_ID%TYPE, INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE, INUSOURCE IN MO_RESTRICTION.RESTRICTION_SOURCE%TYPE )
    RETURN VARCHAR2;
   FUNCTION FBSEXISTSANCTIONRESTRICTION( INUPACKAGEID IN MO_RESTRICTION.PACKAGE_ID%TYPE, INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE )
    RETURN VARCHAR2;
   FUNCTION FSBEXISTSANCTACTRESTR( INUPACKAGEID IN MO_RESTRICTION.PACKAGE_ID%TYPE, INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE )
    RETURN VARCHAR2;
END MO_BCRESTRICTION;
/


CREATE OR REPLACE PACKAGE BODY MO_BCRESTRICTION IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO157419';
   CSBSEPARADOR CONSTANT VARCHAR2( 2 ) := GE_BOCONSTANTS.CSBSEPARADOR;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE GETRESTRICTBYPACKAGE( INUPACKAGE IN MO_PACKAGES.PACKAGE_ID%TYPE, ORFRESTRICTION OUT CONSTANTS.TYREFCURSOR )
    IS
      SBACTIVEFLAG VARCHAR2( 3 ) := GE_BOCONSTANTS.CSBYES;
    BEGIN
      OPEN ORFRESTRICTION FOR SELECT /*+ index(a IDX_MO_RESTRICTION_04)*/ a.restriction_id,
                a.restriction_type_id||csbSeparador||
                mo_boDescriptions.fsbGetDescRestType(a.restriction_type_id) restriction_type_id,
                a.register_date, a.ending_date, a.active_flag active
        FROM    mo_restriction a
        WHERE   a.package_id = inuPackage
        AND     a.active_flag = sbActiveFlag;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBEXISTRESTBYPACKAGE( INUPACKAGE IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN VARCHAR2
    IS
      SBACTIVEFLAG VARCHAR2( 3 ) := GE_BOCONSTANTS.CSBYES;
      CURSOR CUREST IS
SELECT /*+ index(a IDX_MO_RESTRICTION_04)*/ 'X'
        FROM    mo_restriction a
        WHERE   a.package_id = inuPackage
        AND     a.active_flag = sbActiveFlag
        AND     rownum <= 1;
      SBEXIST VARCHAR2( 1 ) := NULL;
    BEGIN
      OPEN CUREST;
      FETCH CUREST
         INTO SBEXIST;
      CLOSE CUREST;
      IF ( SBEXIST IS NOT NULL ) THEN
         RETURN GE_BOCONSTANTS.CSBYES;
      END IF;
      RETURN GE_BOCONSTANTS.CSBNO;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBSEXISTCUSTOMERRESTRICTION( INUPACKAGEID IN MO_RESTRICTION.PACKAGE_ID%TYPE, INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE, INUSOURCE IN MO_RESTRICTION.RESTRICTION_SOURCE%TYPE )
    RETURN VARCHAR2
    IS
      CURSOR CURESTRICTION IS
SELECT /*+ index(a IDX_MO_RESTRICTION_02)*/ 'X'
        FROM    mo_restriction a
        WHERE   a.package_id = inuPackageId
        AND     a.restriction_type_id = inuRestrictionType
        AND     a.restriction_source = inuSource
        AND     rownum <= 1;
      SBEXIST VARCHAR2( 1 ) := NULL;
    BEGIN
      OPEN CURESTRICTION;
      FETCH CURESTRICTION
         INTO SBEXIST;
      CLOSE CURESTRICTION;
      IF ( SBEXIST IS NOT NULL ) THEN
         RETURN GE_BOCONSTANTS.CSBYES;
      END IF;
      RETURN GE_BOCONSTANTS.CSBNO;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBSEXISTSANCTIONRESTRICTION( INUPACKAGEID IN MO_RESTRICTION.PACKAGE_ID%TYPE, INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE )
    RETURN VARCHAR2
    IS
      CURSOR CURESTRICTION IS
SELECT /*+ index(a IDX_MO_RESTRICTION_02)*/ 'X'
        FROM    mo_restriction a
        WHERE   a.package_id = inuPackageId
        AND     a.restriction_type_id = inuRestrictionType
        AND     a.restriction_source is null
        AND     rownum <=1;
      SBEXIST VARCHAR2( 1 ) := NULL;
    BEGIN
      OPEN CURESTRICTION;
      FETCH CURESTRICTION
         INTO SBEXIST;
      CLOSE CURESTRICTION;
      IF ( SBEXIST IS NOT NULL ) THEN
         RETURN GE_BOCONSTANTS.CSBYES;
      END IF;
      RETURN GE_BOCONSTANTS.CSBNO;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRFRESTRICTIONBYSOURCE( INURESTSOURCEID IN MO_RESTRICTION.RESTRICTION_SOURCE%TYPE )
    RETURN CONSTANTS.TYREFCURSOR
    IS
      CURFRESTRICTION CONSTANTS.TYREFCURSOR;
    BEGIN
      OPEN CURFRESTRICTION FOR SELECT a.*, a.Rowid
            FROM Mo_restriction a
            WHERE a.restriction_source = inuRestSourceId
            AND a.active_flag = ge_boConstants.csbYES;
      RETURN CURFRESTRICTION;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBEXISTSANCTACTRESTR( INUPACKAGEID IN MO_RESTRICTION.PACKAGE_ID%TYPE, INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE )
    RETURN VARCHAR2
    IS
      CURSOR CURESTRICTION IS
SELECT /*+ index(a IDX_MO_RESTRICTION_01)*/  'X'
        FROM    mo_restriction a
        WHERE   a.package_id = inuPackageId
        AND     a.restriction_type_id = inuRestrictionType
        AND     a.active_flag = ge_boConstants.csbYES
        AND     a.restriction_source is null
        AND     rownum <=1;
      SBEXIST VARCHAR2( 1 ) := NULL;
    BEGIN
      OPEN CURESTRICTION;
      FETCH CURESTRICTION
         INTO SBEXIST;
      CLOSE CURESTRICTION;
      IF ( SBEXIST IS NOT NULL ) THEN
         RETURN GE_BOCONSTANTS.CSBYES;
      END IF;
      RETURN GE_BOCONSTANTS.CSBNO;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CURESTRICTION%ISOPEN ) THEN
            CLOSE CURESTRICTION;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CURESTRICTION%ISOPEN ) THEN
            CLOSE CURESTRICTION;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END MO_BCRESTRICTION;
/


