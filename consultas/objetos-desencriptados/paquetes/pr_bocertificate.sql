PACKAGE BODY PR_BOCertificate IS






















	
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO379437';
    
    
    
    CNUERROR_900739     GE_MESSAGE.MESSAGE_ID%TYPE := 900739;
    
    CNUERROR_900765     GE_MESSAGE.MESSAGE_ID%TYPE := 900765;
    
    CNUERROR_900764     GE_MESSAGE.MESSAGE_ID%TYPE := 900764;
    
    CSBADVANCE_PERIOD   GE_PARAMETER.PARAMETER_ID%TYPE := 'ADVANCE_PERIOD';
    
    
    

    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    















    PROCEDURE ANULLCERTIFICATE
    (
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUORDERACTIVITYID  IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE
    )
    IS
        RCCERTIFICATE   DAPR_CERTIFICATE.STYPR_CERTIFICATE;
    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOCertificate.AnullCertificate ['||INUPRODUCTID
            ||'] ['||INUORDERACTIVITYID||']',15);

        FOR RCROW IN PR_BCCERTIFICATE.CUGETPRODUCTCERTIFICATE(INUPRODUCTID, SYSDATE) LOOP
            RCCERTIFICATE                       := RCROW;
            RCCERTIFICATE.END_DATE              := SYSDATE;
            RCCERTIFICATE.ORDER_ACT_CANCEL_ID   := INUORDERACTIVITYID;
            
            DAPR_CERTIFICATE.UPDRECORD(RCCERTIFICATE);
        END LOOP;

        UT_TRACE.TRACE('Finaliza PR_BOCertificate.AnullCertificate',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




























    PROCEDURE PROCESSREGISTERCERTIF
    (
        INUORDERACTIVITYID  IN  OR_ORDER_ACTIVITY.ORIGIN_ACTIVITY_ID%TYPE,
        INUPRODUCTID        IN  OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE
    )
    IS
        RCCERTIFICATE       DAPR_CERTIFICATE.STYPR_CERTIFICATE;
        RCORDERACTIV        DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(INUORDERACTIVITYID);
        RCLASTACTIVREVIEW   OR_BCREVIEW.CUGETLASTREVIEW%ROWTYPE;
        RCORDERCERTIFICATE  DAOR_ORDER.STYOR_ORDER := DAOR_ORDER.FRCGETRECORD(RCORDERACTIV.ORDER_ID);
        BLFOUND             BOOLEAN := FALSE;

        
        NUDURATIONREVIEW    NUMBER := NVL(GE_BOPARAMETER.FNUGET(CSBREVIEW_DURATION), 5)*12;
    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOCertificate.ProcessRegisterCertif',15);

        
        FOR RCROW IN OR_BCREVIEW.CUGETLASTREVIEW(INUPRODUCTID) LOOP
            RCLASTACTIVREVIEW := RCROW;
            BLFOUND := TRUE;
        END LOOP;

        IF (NOT BLFOUND) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR_900764);
        END IF;
        
        
        BLFOUND := FALSE;
        
        FOR RCROW IN PR_BCCERTIFICATE.CUGETPRODUCTCERTIFICATE(INUPRODUCTID, NULL) LOOP
            UT_TRACE.TRACE('Encontro certificado activo',15);
            BLFOUND := TRUE;
        END LOOP;
        
        IF (BLFOUND) THEN
            ANULLCERTIFICATE(INUPRODUCTID, INUORDERACTIVITYID);
        END IF;

        RCCERTIFICATE.CERTIFICATE_ID       := SEQ.GETNEXT('SEQ_PR_CERTIFICATE_156806');
        RCCERTIFICATE.PRODUCT_ID           := INUPRODUCTID;
        RCCERTIFICATE.PACKAGE_ID           := RCORDERACTIV.PACKAGE_ID;
        RCCERTIFICATE.ORDER_ACT_REVIEW_ID  := RCLASTACTIVREVIEW.ORDER_ACTIVITY_ID;
        RCCERTIFICATE.ORDER_ACT_CERTIF_ID  := INUORDERACTIVITYID;
        RCCERTIFICATE.ORDER_ACT_CANCEL_ID  := NULL;
        RCCERTIFICATE.REGISTER_DATE        := RCORDERCERTIFICATE.EXECUTION_FINAL_DATE;
        RCCERTIFICATE.REVIEW_DATE          := RCLASTACTIVREVIEW.EXECUTION_FINAL_DATE;
        RCCERTIFICATE.ESTIMATED_END_DATE   := ADD_MONTHS(RCORDERCERTIFICATE.EXECUTION_FINAL_DATE, NUDURATIONREVIEW);
        RCCERTIFICATE.END_DATE             := NULL;

        DAPR_CERTIFICATE.INSRECORD(RCCERTIFICATE);

        UT_TRACE.TRACE('Finaliza PR_BOCertificate.ProcessRegisterCertif ['||RCCERTIFICATE.CERTIFICATE_ID||']',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    PROCEDURE PROCESSVALIDATECERTIF
    (
        INUORDERACTIVITYID  IN  OR_ORDER_ACTIVITY.ORIGIN_ACTIVITY_ID%TYPE,
        INUPRODUCTID        IN  OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE
    )
    IS
        RCCERTIFICATE       DAPR_CERTIFICATE.STYPR_CERTIFICATE;
        RCORDERACTIV        DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(INUORDERACTIVITYID);
        RCLASTACTIVREVIEW   OR_BCREVIEW.CUGETLASTREVIEW%ROWTYPE;
        RCORDERCERTIFICATE  DAOR_ORDER.STYOR_ORDER := DAOR_ORDER.FRCGETRECORD(RCORDERACTIV.ORDER_ID);
        BLFOUND             BOOLEAN := FALSE;
    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOCertificate.ProcessValidateCertif',15);

        
        FOR RCROW IN OR_BCREVIEW.CUGETLASTREVIEW(INUPRODUCTID) LOOP
            RCLASTACTIVREVIEW := RCROW;
            BLFOUND := TRUE;
        END LOOP;
        
        IF (NOT BLFOUND) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR_900764);
        END IF;
        
        BLFOUND := FALSE;

        
        FOR RCROW IN PR_BCCERTIFICATE.CUGETLASTCERTIFICATE(INUPRODUCTID) LOOP
            RCCERTIFICATE := RCROW;
            BLFOUND := TRUE;
        END LOOP;

        IF (NOT BLFOUND) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR_900765);
        END IF;

        RCCERTIFICATE.CERTIFICATE_ID       := SEQ.GETNEXT('SEQ_PR_CERTIFICATE_156806');
        RCCERTIFICATE.PRODUCT_ID           := INUPRODUCTID;
        RCCERTIFICATE.PACKAGE_ID           := RCORDERACTIV.PACKAGE_ID;
        RCCERTIFICATE.ORDER_ACT_REVIEW_ID  := RCLASTACTIVREVIEW.ORDER_ACTIVITY_ID;
        RCCERTIFICATE.ORDER_ACT_CERTIF_ID  := INUORDERACTIVITYID;
        RCCERTIFICATE.ORDER_ACT_CANCEL_ID  := NULL;
        RCCERTIFICATE.REGISTER_DATE        := RCORDERCERTIFICATE.EXECUTION_FINAL_DATE;
        RCCERTIFICATE.REVIEW_DATE          := RCLASTACTIVREVIEW.EXECUTION_FINAL_DATE;
        RCCERTIFICATE.END_DATE             := NULL;

        DAPR_CERTIFICATE.INSRECORD(RCCERTIFICATE);

        UT_TRACE.TRACE('Finaliza PR_BOCertificate.ProcessValidateCertif ['||RCCERTIFICATE.CERTIFICATE_ID||']',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    FUNCTION FNUCERTIFEXPIRENEXT
    (
        INUSUBSCRIBERID IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN NUMBER
    IS
        NUADVANCEVALUE  NUMBER := NVL(GE_BOPARAMETER.FNUGET(CSBADVANCE_PERIOD), 6);
    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOCertificate.fnuCertifExpireNext',15);
        
        FOR RCROW IN PR_BCCERTIFICATE.CUGETCERTIFEXPIRENEXT(INUSUBSCRIBERID, NUADVANCEVALUE) LOOP
            RETURN WF_BOCONSTANTS.CNUFAIL;
        END LOOP;
        
        UT_TRACE.TRACE('Finaliza PR_BOCertificate.fnuCertifExpireNext',15);
        RETURN WF_BOCONSTANTS.CNUSUCCESS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    FUNCTION FSBWITHOUTVALIDCERTIF
    (
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUPRODUCTTYPEID    IN  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
    )
    RETURN NUMBER
    IS

    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOCertificate.fsbWithoutValidCertif ['||INUSUBSCRIBERID||'] ['||INUPRODUCTTYPEID||']',15);
        
        FOR RCROW IN PR_BCCERTIFICATE.CUGETWITHOUTVALIDCERTIF(INUSUBSCRIBERID, INUPRODUCTTYPEID) LOOP
            RETURN WF_BOCONSTANTS.CNUFAIL;
        END LOOP;

        UT_TRACE.TRACE('Finaliza PR_BOCertificate.fsbWithoutValidCertif',15);
        RETURN WF_BOCONSTANTS.CNUSUCCESS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    FUNCTION FNUCERTIFELAPSEDTIME(INUPRODUCTID IN  PR_CERTIFICATE.PRODUCT_ID%TYPE)
    RETURN NUMBER
    IS

    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOCertificate.fnuCertifElapsedTime ['||INUPRODUCTID||']',15);

        
        IF (INUPRODUCTID IS NULL) THEN
            
            GE_BOERRORS.SETERRORCODE(111116);
        END IF;

        
        DAPR_PRODUCT.ACCKEY(INUPRODUCTID);

        
        FOR RCROW IN PR_BCCERTIFICATE.CULASTCERTIFREGISTER(INUPRODUCTID) LOOP
            RETURN TRUNC( SYSDATE - RCROW.REGISTER_DATE);
        END LOOP;

        UT_TRACE.TRACE('Finaliza PR_BOCertificate.fnuCertifElapsedTime',15);
        
        RETURN NULL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    FUNCTION FDTPERIODREVMAXDATE (INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE)
    RETURN DATE
    IS
        NUADVANCEVALUE NUMBER := 6;
        RCCERTIFICATE  DAPR_CERTIFICATE.STYPR_CERTIFICATE;
    BEGIN
        
        OPEN PR_BCCERTIFICATE.CULASTCERTIFREGISTER(INUPRODUCTID);
        FETCH PR_BCCERTIFICATE.CULASTCERTIFREGISTER INTO RCCERTIFICATE;
        CLOSE PR_BCCERTIFICATE.CULASTCERTIFREGISTER;
        
        IF (RCCERTIFICATE.ESTIMATED_END_DATE IS NOT NULL) THEN
            NUADVANCEVALUE := NVL(GE_BOPARAMETER.FNUGET(CSBADVANCE_PERIOD), NUADVANCEVALUE);
            RETURN ADD_MONTHS(RCCERTIFICATE.ESTIMATED_END_DATE,(NUADVANCEVALUE*-1));
        ELSE
            RETURN SYSDATE;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTPERIODREVMAXDATE;

END PR_BOCERTIFICATE;