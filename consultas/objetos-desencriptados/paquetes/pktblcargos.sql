CREATE OR REPLACE PACKAGE PKTBLCARGOS IS
   TYPE TYCARGCUCO IS TABLE OF CARGOS.CARGCUCO%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGNUSE IS TABLE OF CARGOS.CARGNUSE%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGCONC IS TABLE OF CARGOS.CARGCONC%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGCACA IS TABLE OF CARGOS.CARGCACA%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGSIGN IS TABLE OF CARGOS.CARGSIGN%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGPEFA IS TABLE OF CARGOS.CARGPEFA%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGVALO IS TABLE OF CARGOS.CARGVALO%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGDOSO IS TABLE OF CARGOS.CARGDOSO%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGCODO IS TABLE OF CARGOS.CARGCODO%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGUSUA IS TABLE OF CARGOS.CARGUSUA%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGTIPR IS TABLE OF CARGOS.CARGTIPR%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGUNID IS TABLE OF CARGOS.CARGUNID%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGFECR IS TABLE OF CARGOS.CARGFECR%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGPROG IS TABLE OF CARGOS.CARGPROG%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGCOLL IS TABLE OF CARGOS.CARGCOLL%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGPECO IS TABLE OF CARGOS.CARGPECO%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGTICO IS TABLE OF CARGOS.CARGTICO%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGVABL IS TABLE OF CARGOS.CARGVABL%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYCARGTACO IS TABLE OF CARGOS.CARGTACO%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBCARGOS IS RECORD
    (
      CARGCUCO TYCARGCUCO,
      CARGNUSE TYCARGNUSE,
      CARGCONC TYCARGCONC,
      CARGCACA TYCARGCACA,
      CARGSIGN TYCARGSIGN,
      CARGPEFA TYCARGPEFA,
      CARGVALO TYCARGVALO,
      CARGDOSO TYCARGDOSO,
      CARGCODO TYCARGCODO,
      CARGUSUA TYCARGUSUA,
      CARGTIPR TYCARGTIPR,
      CARGUNID TYCARGUNID,
      CARGFECR TYCARGFECR,
      CARGPROG TYCARGPROG,
      CARGCOLL TYCARGCOLL,
      CARGPECO TYCARGPECO,
      CARGTICO TYCARGTICO,
      CARGVABL TYCARGVABL,
      CARGTACO TYCARGTACO
    );
   PROCEDURE INSRECORD( IRCRECORD IN CARGOS%ROWTYPE );
   PROCEDURE INSRECORDS( IRCTBRECORD IN OUT NOCOPY TYTBCARGOS );
   PROCEDURE INSFOREACHCOLUMN( INUCARGCUCO IN CARGOS.CARGCUCO%TYPE, INUCARGNUSE IN CARGOS.CARGNUSE%TYPE, INUCARGCONC IN CARGOS.CARGCONC%TYPE, INUCARGCACA IN CARGOS.CARGCACA%TYPE, ISBCARGSIGN IN CARGOS.CARGSIGN%TYPE, INUCARGPEFA IN CARGOS.CARGPEFA%TYPE, INUCARGVALO IN CARGOS.CARGVALO%TYPE, ISBCARGDOSO IN CARGOS.CARGDOSO%TYPE, INUCARGCODO IN CARGOS.CARGCODO%TYPE, INUCARGUSUA IN CARGOS.CARGUSUA%TYPE, ISBCARGTIPR IN CARGOS.CARGTIPR%TYPE, INUCARGUNID IN CARGOS.CARGUNID%TYPE, IDTCARGFECR IN CARGOS.CARGFECR%TYPE, INUCARGPROG IN CARGOS.CARGPROG%TYPE, INUCARGCOLL IN CARGOS.CARGCOLL%TYPE, INUCARGPECO IN CARGOS.CARGPECO%TYPE, INUCARGTICO IN CARGOS.CARGTICO%TYPE, INUCARGVABL IN CARGOS.CARGVABL%TYPE, INUCARGTACO IN CARGOS.CARGTACO%TYPE );
   PROCEDURE INSFOREACHCOLUMNBULK( INUCARGCUCO IN OUT NOCOPY TYCARGCUCO, INUCARGNUSE IN OUT NOCOPY TYCARGNUSE, INUCARGCONC IN OUT NOCOPY TYCARGCONC, INUCARGCACA IN OUT NOCOPY TYCARGCACA, ISBCARGSIGN IN OUT NOCOPY TYCARGSIGN, INUCARGPEFA IN OUT NOCOPY TYCARGPEFA, INUCARGVALO IN OUT NOCOPY TYCARGVALO, ISBCARGDOSO IN OUT NOCOPY TYCARGDOSO, INUCARGCODO IN OUT NOCOPY TYCARGCODO, INUCARGUSUA IN OUT NOCOPY TYCARGUSUA, ISBCARGTIPR IN OUT NOCOPY TYCARGTIPR, INUCARGUNID IN OUT NOCOPY TYCARGUNID, IDTCARGFECR IN OUT NOCOPY TYCARGFECR, INUCARGPROG IN OUT NOCOPY TYCARGPROG, INUCARGCOLL IN OUT NOCOPY TYCARGCOLL, INUCARGPECO IN OUT NOCOPY TYCARGPECO, INUCARGTICO IN OUT NOCOPY TYCARGTICO, INUCARGVABL IN OUT NOCOPY TYCARGVABL, INUCARGTACO IN OUT NOCOPY TYCARGTACO );
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
END;
/


CREATE OR REPLACE PACKAGE BODY PKTBLCARGOS IS
   CACHE CONSTANT NUMBER := 1;
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO116454';
   CSBDIVISION CONSTANT VARCHAR2( 20 ) := PKCONSTANTE.CSBDIVISION;
   CSBMODULE CONSTANT VARCHAR2( 20 ) := PKCONSTANTE.CSBMOD_SAT;
   PROCEDURE INSFOREACHCOLUMN( INUCARGCUCO IN CARGOS.CARGCUCO%TYPE, INUCARGNUSE IN CARGOS.CARGNUSE%TYPE, INUCARGCONC IN CARGOS.CARGCONC%TYPE, INUCARGCACA IN CARGOS.CARGCACA%TYPE, ISBCARGSIGN IN CARGOS.CARGSIGN%TYPE, INUCARGPEFA IN CARGOS.CARGPEFA%TYPE, INUCARGVALO IN CARGOS.CARGVALO%TYPE, ISBCARGDOSO IN CARGOS.CARGDOSO%TYPE, INUCARGCODO IN CARGOS.CARGCODO%TYPE, INUCARGUSUA IN CARGOS.CARGUSUA%TYPE, ISBCARGTIPR IN CARGOS.CARGTIPR%TYPE, INUCARGUNID IN CARGOS.CARGUNID%TYPE, IDTCARGFECR IN CARGOS.CARGFECR%TYPE, INUCARGPROG IN CARGOS.CARGPROG%TYPE, INUCARGCOLL IN CARGOS.CARGCOLL%TYPE, INUCARGPECO IN CARGOS.CARGPECO%TYPE, INUCARGTICO IN CARGOS.CARGTICO%TYPE, INUCARGVABL IN CARGOS.CARGVABL%TYPE, INUCARGTACO IN CARGOS.CARGTACO%TYPE )
    IS
      RCRECORD CARGOS%ROWTYPE;
    BEGIN
      PKERRORS.PUSH( 'pktblCargos.InsForEachColumn' );
      RCRECORD.CARGCUCO := INUCARGCUCO;
      RCRECORD.CARGNUSE := INUCARGNUSE;
      RCRECORD.CARGCONC := INUCARGCONC;
      RCRECORD.CARGCACA := INUCARGCACA;
      RCRECORD.CARGSIGN := ISBCARGSIGN;
      RCRECORD.CARGPEFA := INUCARGPEFA;
      RCRECORD.CARGVALO := INUCARGVALO;
      RCRECORD.CARGDOSO := ISBCARGDOSO;
      RCRECORD.CARGCODO := INUCARGCODO;
      RCRECORD.CARGUSUA := INUCARGUSUA;
      RCRECORD.CARGTIPR := ISBCARGTIPR;
      RCRECORD.CARGUNID := INUCARGUNID;
      RCRECORD.CARGFECR := IDTCARGFECR;
      RCRECORD.CARGPROG := INUCARGPROG;
      RCRECORD.CARGCOLL := INUCARGCOLL;
      RCRECORD.CARGPECO := INUCARGPECO;
      RCRECORD.CARGTICO := INUCARGTICO;
      RCRECORD.CARGVABL := INUCARGVABL;
      RCRECORD.CARGTACO := INUCARGTACO;
      INSRECORD( RCRECORD );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END INSFOREACHCOLUMN;
   PROCEDURE INSFOREACHCOLUMNBULK( INUCARGCUCO IN OUT NOCOPY TYCARGCUCO, INUCARGNUSE IN OUT NOCOPY TYCARGNUSE, INUCARGCONC IN OUT NOCOPY TYCARGCONC, INUCARGCACA IN OUT NOCOPY TYCARGCACA, ISBCARGSIGN IN OUT NOCOPY TYCARGSIGN, INUCARGPEFA IN OUT NOCOPY TYCARGPEFA, INUCARGVALO IN OUT NOCOPY TYCARGVALO, ISBCARGDOSO IN OUT NOCOPY TYCARGDOSO, INUCARGCODO IN OUT NOCOPY TYCARGCODO, INUCARGUSUA IN OUT NOCOPY TYCARGUSUA, ISBCARGTIPR IN OUT NOCOPY TYCARGTIPR, INUCARGUNID IN OUT NOCOPY TYCARGUNID, IDTCARGFECR IN OUT NOCOPY TYCARGFECR, INUCARGPROG IN OUT NOCOPY TYCARGPROG, INUCARGCOLL IN OUT NOCOPY TYCARGCOLL, INUCARGPECO IN OUT NOCOPY TYCARGPECO, INUCARGTICO IN OUT NOCOPY TYCARGTICO, INUCARGVABL IN OUT NOCOPY TYCARGVABL, INUCARGTACO IN OUT NOCOPY TYCARGTACO )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblCargos.InsForEachColumnBulk' );
      FORALL INDX IN INUCARGCUCO.FIRST..INUCARGCUCO.LAST
         INSERT INTO cargos
    (
        cargcuco,
        cargnuse,
        cargconc,
        cargcaca,
        cargsign,
        cargpefa,
        cargvalo,
        cargdoso,
        cargcodo,
        cargusua,
        cargtipr,
        cargunid,
        cargfecr,
        cargprog,
        cargcoll,
        cargpeco,
        cargtico,
        cargvabl,
        cargtaco
    )
    VALUES
    (
        inuCargcuco(indx),
        inuCargnuse(indx),
        inuCargconc(indx),
        inuCargcaca(indx),
        isbCargsign(indx),
        inuCargpefa(indx),
        inuCargvalo(indx),
        isbCargdoso(indx),
        inuCargcodo(indx),
        inuCargusua(indx),
        isbCargtipr(indx),
        inuCargunid(indx),
        idtCargfecr(indx),
        inuCargprog(indx),
        inuCargcoll(indx),
        inuCargpeco(indx),
        inuCargtico(indx),
        inuCargvabl(indx),
        inuCargtaco(indx)
    );
      PKERRORS.POP;
   END INSFOREACHCOLUMNBULK;
   PROCEDURE INSRECORD( IRCRECORD IN CARGOS%ROWTYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblCargos.InsRecord' );
      INSERT INTO cargos
    (
        cargcuco,
        cargnuse,
        cargconc,
        cargcaca,
        cargsign,
        cargpefa,
        cargvalo,
        cargdoso,
        cargcodo,
        cargusua,
        cargtipr,
        cargunid,
        cargfecr,
        cargprog,
        cargcoll,
        cargpeco,
        cargtico,
        cargvabl,
        cargtaco
    )
    VALUES
    (
        ircRecord.cargcuco,
        ircRecord.cargnuse,
        ircRecord.cargconc,
        ircRecord.cargcaca,
        ircRecord.cargsign,
        ircRecord.cargpefa,
        ircRecord.cargvalo,
        ircRecord.cargdoso,
        ircRecord.cargcodo,
        ircRecord.cargusua,
        ircRecord.cargtipr,
        ircRecord.cargunid,
        ircRecord.cargfecr,
        ircRecord.cargprog,
        ircRecord.cargcoll,
        ircRecord.cargpeco,
        ircRecord.cargtico,
        ircRecord.cargvabl,
        ircRecord.cargtaco
    );
      PKERRORS.POP;
   END INSRECORD;
   PROCEDURE INSRECORDS( IRCTBRECORD IN OUT NOCOPY TYTBCARGOS )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblCargos.InsRecords' );
      FORALL INDX IN IRCTBRECORD.CARGCUCO.FIRST..IRCTBRECORD.CARGCUCO.LAST
         INSERT INTO cargos
    (
        cargcuco,
        cargnuse,
        cargconc,
        cargcaca,
        cargsign,
        cargpefa,
        cargvalo,
        cargdoso,
        cargcodo,
        cargusua,
        cargtipr,
        cargunid,
        cargfecr,
        cargprog,
        cargcoll,
        cargpeco,
        cargtico,
        cargvabl,
        cargtaco
    )
    VALUES
    (
        irctbRecord.cargcuco(indx),
        irctbRecord.cargnuse(indx),
        irctbRecord.cargconc(indx),
        irctbRecord.cargcaca(indx),
        irctbRecord.cargsign(indx),
        irctbRecord.cargpefa(indx),
        irctbRecord.cargvalo(indx),
        irctbRecord.cargdoso(indx),
        irctbRecord.cargcodo(indx),
        irctbRecord.cargusua(indx),
        irctbRecord.cargtipr(indx),
        irctbRecord.cargunid(indx),
        irctbRecord.cargfecr(indx),
        irctbRecord.cargprog(indx),
        irctbRecord.cargcoll(indx),
        irctbRecord.cargpeco(indx),
        irctbRecord.cargtico(indx),
        irctbRecord.cargvabl(indx),
        irctbRecord.cargtaco(indx)
    );
      PKERRORS.POP;
   END INSRECORDS;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblCargos.fsbVersion' );
      RETURN ( CSBVERSION );
      PKERRORS.POP;
   END FSBVERSION;
END PKTBLCARGOS;
/


