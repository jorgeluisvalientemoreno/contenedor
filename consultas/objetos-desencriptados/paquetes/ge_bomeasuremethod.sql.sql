CREATE OR REPLACE PACKAGE BODY GE_BOMEASUREMETHOD IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO187200';
   CNUVALUENULL CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 1184;
   CNUNOT_EXIST CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 14746;
   CNUOPEUN_NO_VALID CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 143785;
   CNUOCCUP_STATUS CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 13746;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE VALEQUIPMENT( INUCLASSSERVICEID IN GE_MEASURE_METHOD.CLASS_SERVICE_ID%TYPE, INUOPERATINGUNITID IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE, ISBSERIE IN GE_ITEMS_SERIADO.SERIE%TYPE )
    IS
      RCITEMSERIADO DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
      NUITEMGAMAID GE_ITEMS_GAMA.ID_ITEMS_GAMA%TYPE;
      SBEQUIPMENTVALID VARCHAR( 1 );
    BEGIN
      UT_TRACE.TRACE( 'INICIO GE_BOMeasureMethod.valEquipment', 3 );
      IF INUCLASSSERVICEID IS NULL THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUVALUENULL, 'Método Medición' );
      END IF;
      UT_TRACE.TRACE( 'inuClassServiceId : ' || INUCLASSSERVICEID, 4 );
      DAPS_CLASS_SERVICE.ACCKEY( INUCLASSSERVICEID );
      IF INUOPERATINGUNITID IS NULL THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUVALUENULL, 'Unidad Operativa' );
      END IF;
      UT_TRACE.TRACE( 'inuOperatingUnitId : ' || INUOPERATINGUNITID, 4 );
      DAOR_OPERATING_UNIT.ACCKEY( INUOPERATINGUNITID );
      IF ISBSERIE IS NULL THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUVALUENULL, 'Serie' );
      END IF;
      UT_TRACE.TRACE( 'isbSerie : ' || ISBSERIE, 4 );
      GE_BOITEMSSERIADO.GETITEMSERBYSERIE( ISBSERIE, RCITEMSERIADO );
      IF RCITEMSERIADO.ID_ITEMS_SERIADO IS NULL THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUNOT_EXIST, ISBSERIE );
      END IF;
      IF INUOPERATINGUNITID || 'a' != RCITEMSERIADO.OPERATING_UNIT_ID || 'a' THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUOPEUN_NO_VALID, ISBSERIE || '|' || INUOPERATINGUNITID );
      END IF;
      IF RCITEMSERIADO.ID_ITEMS_ESTADO_INV != GE_BOITEMSCONSTANTS.FNUOBTDISPONIBLE THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUOCCUP_STATUS, ISBSERIE );
      END IF;
      NUITEMGAMAID := GE_BCITEMS_GAMA_ITEM.FNUOBTENERITEMGAMA( RCITEMSERIADO.ITEMS_ID );
      UT_TRACE.TRACE( 'nuGamaId : ' || NUITEMGAMAID, 4 );
      SBEQUIPMENTVALID := GE_BCMEASUREMETHOD.FSBISEQUIPMENTVALID( INUCLASSSERVICEID, NUITEMGAMAID );
      IF SBEQUIPMENTVALID = GE_BOCONSTANTS.CSBNO THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( 20203, NUITEMGAMAID );
      END IF;
      UT_TRACE.TRACE( 'FIN GE_BOMeasureMethod.valEquipment', 3 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'EXCEPTION CONTROLLED_ERROR GE_BOMeasureMethod.valEquipment', 3 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'EXCEPTION OTHERS GE_BOMeasureMethod.valEquipment', 3 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALEQUIPMENT;
   FUNCTION FSBISEQUIPMENTVALID( INUCLASSSERVICEID IN GE_MEASURE_METHOD.CLASS_SERVICE_ID%TYPE, INUITEMTYPEID IN GE_ITEMS.ID_ITEMS_TIPO%TYPE, INUITEMGAMAID IN GE_ITEMS_GAMA.ID_ITEMS_GAMA%TYPE )
    RETURN VARCHAR2
    IS
      SBEQUIPMENTVALID VARCHAR( 1 );
    BEGIN
      UT_TRACE.TRACE( 'INICIO GE_BCMeasureMethod.fsbIsEquipmentValid ', 3 );
      IF INUCLASSSERVICEID IS NULL THEN
         RETURN GE_BOCONSTANTS.CSBNO;
      END IF;
      UT_TRACE.TRACE( 'inuClassServiceId : ' || INUCLASSSERVICEID, 4 );
      IF NOT DAPS_CLASS_SERVICE.FBLEXIST( INUCLASSSERVICEID ) THEN
         RETURN GE_BOCONSTANTS.CSBNO;
      END IF;
      IF INUITEMGAMAID IS NOT NULL THEN
         UT_TRACE.TRACE( 'inuItemGamaId : ' || INUITEMGAMAID, 4 );
         IF NOT DAGE_ITEMS_GAMA.FBLEXIST( INUITEMGAMAID ) THEN
            RETURN GE_BOCONSTANTS.CSBNO;
         END IF;
         SBEQUIPMENTVALID := GE_BCMEASUREMETHOD.FSBISEQUIPMENTVALID( INUCLASSSERVICEID, INUITEMGAMAID );
         RETURN SBEQUIPMENTVALID;
       ELSIF INUITEMTYPEID IS NOT NULL THEN
         UT_TRACE.TRACE( 'inuItemTypeId : ' || INUITEMTYPEID, 4 );
         IF NOT DAGE_ITEMS_TIPO.FBLEXIST( INUITEMTYPEID ) THEN
            RETURN GE_BOCONSTANTS.CSBNO;
         END IF;
         FOR RCGAMASBYTYPE IN GE_BCMEASUREMETHOD.CUGAMASBYTYPE( INUITEMTYPEID )
          LOOP
            UT_TRACE.TRACE( 'rcGamasByType.id_items_gama : ' || RCGAMASBYTYPE.ID_ITEMS_GAMA, 4 );
            SBEQUIPMENTVALID := GE_BCMEASUREMETHOD.FSBISEQUIPMENTVALID( INUCLASSSERVICEID, RCGAMASBYTYPE.ID_ITEMS_GAMA );
            IF SBEQUIPMENTVALID = GE_BOCONSTANTS.CSBYES THEN
               RETURN GE_BOCONSTANTS.CSBYES;
            END IF;
         END LOOP;
       ELSE
         RETURN GE_BOCONSTANTS.CSBNO;
      END IF;
      RETURN GE_BOCONSTANTS.CSBNO;
      UT_TRACE.TRACE( 'FIN GE_BOMeasureMethod.fsbIsEquipmentValid', 3 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'EXCEPTION CONTROLLED_ERROR GE_BOMeasureMethod.fsbIsEquipmentValid', 3 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'EXCEPTION OTHERS GE_BOMeasureMethod.fsbIsEquipmentValid', 3 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBISEQUIPMENTVALID;
END GE_BOMEASUREMETHOD;
/


