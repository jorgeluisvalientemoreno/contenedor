PACKAGE BODY pkBCCuencobr AS






























































































































































































































































    
    
    

    
    CSBVERSION CONSTANT VARCHAR2(250) := 'SAO390034';

    
    CNUREGISTERQUANTITY      NUMBER := 100;

    CSBINTERES_FINANCIACION CONSTANT VARCHAR2(3) := 'IF-';
    
    
    

    SBERRMSG            GE_ERROR_LOG.DESCRIPTION%TYPE;   
    BLISLOADED          BOOLEAN:=FALSE ; 
    
    GNUADITIONALDAYS    PARAMETR.PAMENUME%TYPE := NULL;

    
    GNUTOPE_DEUDA_PERMITIDO PARAMETR.PAMENUME%TYPE;

    
    
    
    
    CURSOR CUCUENCOBRFACT ( INUFACTCODI IN FACTURA.FACTCODI%TYPE,
                            INULASTCUCO IN CUENCOBR.CUCOCODI%TYPE) IS
        SELECT CUCOCODI,CUCONUSE
        FROM CUENCOBR
        WHERE CUCOCODI > INULASTCUCO
        AND CUCOFACT = INUFACTCODI
        ORDER BY CUCOCODI;

    
    CURSOR CUCUENCOBRPROD ( INUSESUNUSE IN CUENCOBR.CUCONUSE%TYPE,
                            INUULTICUCO IN CUENCOBR.CUCOCODI%TYPE,
                            IDTFECHVENC IN CUENCOBR.CUCOFEVE%TYPE) IS
        SELECT CUCOCODI,CUCOSACU,CUCOVATO,CUCOFEVE
        FROM CUENCOBR
        WHERE CUCONUSE = INUSESUNUSE
        AND CUCOFEVE <=  IDTFECHVENC
        AND CUCOSACU != 0
        AND CUCOCODI > INUULTICUCO
        ORDER BY CUCOCODI;

    
    
    CURSOR CUEXPDATELASTGENACCOUNT(INUCUCOFACT  IN  CUENCOBR.CUCOFACT%TYPE)
    IS
        SELECT   CUCOFEVE
        FROM     CUENCOBR
        WHERE    CUCOFACT = INUCUCOFACT
        AND      ROWNUM = 1;
    

    
    
    























PROCEDURE GETACCRECEIVRANGEBILL
(
    INUFACTCODI       IN CUENCOBR.CUCOFACT%TYPE,
    INULASTCUCO       IN CUENCOBR.CUCOCODI%TYPE,
    OBOCONTINUE       OUT BOOLEAN,
    OTBCUCOCODIRANGE  OUT NOCOPY TYTBCUCOCODIRANGE,
    OTBCUCONUSERANGE  OUT NOCOPY TYTBCUCONUSERANGE
) IS

BEGIN

    PKERRORS.PUSH('pkBCCuencobr.GetAccReceivRangeBill');

    
    OTBCUCOCODIRANGE.DELETE;
    OTBCUCONUSERANGE.DELETE;

    

    OPEN CUCUENCOBRFACT (INUFACTCODI,INULASTCUCO);

    FETCH CUCUENCOBRFACT BULK COLLECT INTO OTBCUCOCODIRANGE,OTBCUCONUSERANGE
    LIMIT CNUREGISTERQUANTITY;

    CLOSE CUCUENCOBRFACT;

    OBOCONTINUE := TRUE;

    
    IF ( OTBCUCOCODIRANGE.FIRST IS NULL ) THEN
        OBOCONTINUE := FALSE;
    END IF ;

    PKERRORS.POP;

EXCEPTION

    WHEN LOGIN_DENIED THEN
        
        IF (CUCUENCOBRFACT%ISOPEN) THEN
	        CLOSE CUCUENCOBRFACT;
	    END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF (CUCUENCOBRFACT%ISOPEN) THEN
	        CLOSE CUCUENCOBRFACT;
	    END IF;
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        
        IF (CUCUENCOBRFACT%ISOPEN) THEN
	        CLOSE CUCUENCOBRFACT;
	    END IF;
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETACCRECEIVRANGEBILL;




















FUNCTION FSBVERSION  RETURN VARCHAR2 IS
BEGIN

  
    RETURN CSBVERSION;
  

END FSBVERSION;























FUNCTION FRCFIRSTACCFACT
(
    INUACCOUNT   IN  CUENCOBR.CUCOFACT%TYPE
)
RETURN CUENCOBR%ROWTYPE
IS

    RCCUENCOBR    CUENCOBR%ROWTYPE;

    CURSOR CUCUENCOBRBYSUSC( INUFACT IN CUENCOBR.CUCOFACT%TYPE  ) IS
       SELECT *
       FROM   CUENCOBR
       WHERE  CUCOFACT = INUFACT
         AND  ROWNUM = 1;

BEGIN

    PKERRORS.PUSH('pkBCCuencobr.frcFirstAccFact');

    IF (CUCUENCOBRBYSUSC%ISOPEN) THEN
        CLOSE CUCUENCOBRBYSUSC;
    END IF;

    
    OPEN CUCUENCOBRBYSUSC( INUACCOUNT );
    FETCH CUCUENCOBRBYSUSC INTO RCCUENCOBR;

    IF (CUCUENCOBRBYSUSC%ISOPEN) THEN
        CLOSE CUCUENCOBRBYSUSC;
    END IF;

    PKERRORS.POP;

    RETURN( RCCUENCOBR );

EXCEPTION

    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        CLOSE CUCUENCOBRBYSUSC;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FRCFIRSTACCFACT;































FUNCTION FDTFIRSACCWITHBALEXPIRYDATE
( 
    INUSESUNUSE SERVSUSC.SESUNUSE%TYPE 
)
RETURN DATE
IS
    
    DTFECHAVENC CUENCOBR.CUCOFEVE%TYPE;

    
    
    CURSOR CUFIRSTACCWITHBAL
    IS
    SELECT  MIN(CUCOFEVE) CUCOFEVE
    FROM    CUENCOBR
    WHERE   CUCONUSE = INUSESUNUSE
    AND     CUCOSACU+0 > 0;

BEGIN


    OPEN  CUFIRSTACCWITHBAL;
    FETCH CUFIRSTACCWITHBAL INTO DTFECHAVENC;
    CLOSE CUFIRSTACCWITHBAL;

    RETURN DTFECHAVENC;


END FDTFIRSACCWITHBALEXPIRYDATE;




























PROCEDURE GETACCRECEIVRANGEPROD
(
    INUSESUNUSE         IN CUENCOBR.CUCONUSE%TYPE,
    INUULTICUCO         IN CUENCOBR.CUCOCODI%TYPE,
    IDTFECHVENC         IN CUENCOBR.CUCOFEVE%TYPE,
    OBOCONTINUE         OUT BOOLEAN,
    OTBCUCOCODIRANGE    OUT NOCOPY TYTBCUCOCODIRANGE,
    OTBCUCOSACURANGE    OUT NOCOPY TYTBCUCOSACURANGE,
    OTBCUCOVATORANGE    OUT NOCOPY TYTBCUCOVATORANGE,
    OTBCUCOFEVERANGE    OUT NOCOPY TYTBCUCOFEVERANGE
) IS

BEGIN

    PKERRORS.PUSH('pkBCCuencobr.GetAccReceivRangeProd');

    
    OTBCUCOCODIRANGE.DELETE;
    OTBCUCOSACURANGE.DELETE;
    OTBCUCOVATORANGE.DELETE;
    OTBCUCOFEVERANGE.DELETE;

    
    OPEN CUCUENCOBRPROD ( INUSESUNUSE, INUULTICUCO, IDTFECHVENC);

    FETCH CUCUENCOBRPROD BULK COLLECT INTO OTBCUCOCODIRANGE,
                                           OTBCUCOSACURANGE,
                                           OTBCUCOVATORANGE,
                                           OTBCUCOFEVERANGE
    LIMIT CNUREGISTERQUANTITY;

    CLOSE CUCUENCOBRPROD;

    OBOCONTINUE := TRUE;

    
    IF ( OTBCUCOCODIRANGE.FIRST IS NULL ) THEN
        OBOCONTINUE := FALSE;
    END IF ;

    PKERRORS.POP;

EXCEPTION

    WHEN LOGIN_DENIED THEN
        
        IF (CUCUENCOBRPROD%ISOPEN) THEN
	        CLOSE CUCUENCOBRPROD;
	    END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF (CUCUENCOBRPROD%ISOPEN) THEN
	        CLOSE CUCUENCOBRPROD;
	    END IF;
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        
        IF (CUCUENCOBRPROD%ISOPEN) THEN
	        CLOSE CUCUENCOBRPROD;
	    END IF;
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETACCRECEIVRANGEPROD;






















FUNCTION FDTEXPDATELASTGENACCOUNT
(
    INUCUCOFACT         IN  CUENCOBR.CUCOFACT%TYPE
)
RETURN CUENCOBR.CUCOFEVE%TYPE
IS
    DTCUCOFEVE  CUENCOBR.CUCOFEVE%TYPE; 
BEGIN

    PKERRORS.PUSH('pkBCCuencobr.fdtExpDateLastGenAccount');

    IF (CUEXPDATELASTGENACCOUNT%ISOPEN) THEN
        CLOSE CUEXPDATELASTGENACCOUNT;
    END IF;

    
    OPEN CUEXPDATELASTGENACCOUNT ( INUCUCOFACT );

    
    FETCH CUEXPDATELASTGENACCOUNT INTO DTCUCOFEVE;

    CLOSE CUEXPDATELASTGENACCOUNT;

    PKERRORS.POP;
    RETURN (DTCUCOFEVE);

EXCEPTION
    WHEN LOGIN_DENIED THEN
        
        IF (CUEXPDATELASTGENACCOUNT%ISOPEN) THEN
	        CLOSE CUEXPDATELASTGENACCOUNT;
	    END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF (CUEXPDATELASTGENACCOUNT%ISOPEN) THEN
	        CLOSE CUEXPDATELASTGENACCOUNT;
	    END IF;
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        
        IF (CUEXPDATELASTGENACCOUNT%ISOPEN) THEN
	        CLOSE CUEXPDATELASTGENACCOUNT;
	    END IF;
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FDTEXPDATELASTGENACCOUNT;




















PROCEDURE GETPARAMETERS
IS
BEGIN

    PKERRORS.PUSH ('pkBCCuencobr.GetParameters');

    
    IF ( BLISLOADED ) THEN
        PKERRORS.POP;
        RETURN ;
    END IF ;

    
    PKGRLPARAMEXTENDEDMGR.SETCACHEON;

    
    
    GNUADITIONALDAYS := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
                        ('DIAS_ADICION_FECHA_SUSP');

    GNUTOPE_DEUDA_PERMITIDO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
                                ('BIL_TOPE_DEUDA_PERMITIDO');

    
    BLISLOADED := TRUE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETPARAMETERS;






















PROCEDURE UPDATECLAIMCOLLECT
(
    INUACCOUNT              IN      CUENCOBR.CUCOCODI%TYPE,
    INUCLAIMVALUE           IN      CUENCOBR.CUCOVARE%TYPE
)
IS
BEGIN

    PKERRORS.PUSH ('pkBCCuencobr.UpdateClaimCollect');

    
    UPDATE CUENCOBR
    SET    CUCOVARE = NVL( CUCOVARE,0) + NVL( INUCLAIMVALUE,0)
    WHERE  CUCOCODI = INUACCOUNT;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END UPDATECLAIMCOLLECT;






















PROCEDURE UPDPAYMENTCLAIMCOLLECT
(
    INUACCOUNT              IN      CUENCOBR.CUCOCODI%TYPE,
    INUCLAIMVALUE           IN      CUENCOBR.CUCOVARE%TYPE
)
IS
BEGIN


    PKERRORS.PUSH ('pkBCCuencobr.UpdPaymentClaimCollect');

    
    UPDATE CUENCOBR
    SET    CUCOVRAP = NVL( CUCOVRAP,0) + NVL( INUCLAIMVALUE,0)
    WHERE  CUCOCODI = INUACCOUNT;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END UPDPAYMENTCLAIMCOLLECT;






























PROCEDURE CALCULATEINCBYACC
(
    INUACCOUNT               IN  CUENCOBR.CUCOCODI%TYPE,
    INUINCOMINGOPERATIVE     OUT INFOMEMA.INMMINOP%TYPE,
    INUINCOMINGNOOPERATIVE   OUT INFOMEMA.INMMINNO%TYPE,
    INUINCOMINGINTEREST      OUT INFOMEMA.INMMININ%TYPE
)
IS
    
    
    CURSOR CUINCOMINGMONEYBYACCOUNT ( INUACCOUNT IN CARGOS.CARGCUCO%TYPE,
                                      ISBINTDIF  IN VARCHAR2,
                                      ISBINTFINA IN VARCHAR2,
                                      INUREMO    IN NUMBER,
                                      ISBCUOEXT  IN VARCHAR2,
                                      ISBDIFER   IN VARCHAR2,
                                      ISBFINANC  IN VARCHAR2,
                                      ISBCREDITO IN VARCHAR2,
                                      ISBDEBITO  IN VARCHAR2,
                                      ISBAUTOMAT IN VARCHAR2,
                                      INUIMPUEST IN NUMBER ) IS

        SELECT NVL ( SUM ( CASE WHEN NOT ( SUBSTR ( CARGDOSO, 1, 3 ) IN (ISBINTDIF,ISBINTFINA) OR
                                           CONCTICL = INUREMO) AND
                                     SUBSTR ( CARGDOSO, 1, 3 ) NOT IN (ISBCUOEXT, ISBDIFER, ISBFINANC)
                           THEN
                               CARGVALO
                           ELSE
                               0
                           END ), 0 ) INCOMINGOPERATIVE,
               0 INCOMINGNOOPERATIVE,
               NVL ( SUM ( CASE WHEN SUBSTR ( CARGDOSO, 1, 3) IN (ISBINTDIF,ISBINTFINA) OR
                                     CONCTICL = INUREMO
                           THEN
                               CARGVALO
                           ELSE
                               0
                           END ), 0 ) INCOMINGINTEREST
         FROM ( SELECT CARGDOSO,
                       CONCTICL,
                       DECODE ( CARGSIGN, ISBDEBITO, CARGVALO, -CARGVALO ) CARGVALO
                  FROM CARGOS,
                       CONCEPTO
                 WHERE CARGCUCO = INUACCOUNT
                   AND CARGTIPR = ISBAUTOMAT
                   AND CARGSIGN IN (ISBDEBITO, ISBCREDITO)
                   AND CONCTICL <> INUIMPUEST
                   AND CONCCODI = CARGCONC );
BEGIN

    PKERRORS.PUSH('pkBOInformationWayMagnetic.CalculateIncByAcc');

    
    INUINCOMINGOPERATIVE     := 0;
    INUINCOMINGNOOPERATIVE   := 0;
    INUINCOMINGINTEREST      := 0;

    IF ( CUINCOMINGMONEYBYACCOUNT%ISOPEN ) THEN
        CLOSE CUINCOMINGMONEYBYACCOUNT;
    END IF;
    
    OPEN CUINCOMINGMONEYBYACCOUNT ( INUACCOUNT,
                                    PKBILLCONST.CSBTOKEN_INTERES_DIFERIDO,
                                    CSBINTERES_FINANCIACION,
                                    PKBILLCONST.FNUOBTTIPORECAMORA,
                                    PKBILLCONST.CSBTOKEN_CUOTA_EXTRA,
                                    PKBILLCONST.CSBTOKEN_DIFERIDO,
                                    PKBILLCONST.CSBTOKEN_FINANCIACION,
                                    PKBILLCONST.CREDITO,
                                    PKBILLCONST.DEBITO,
                                    PKBILLCONST.AUTOMATICO,
                                    PKBILLCONST.FNUOBTTIPOIMP ) ;
    FETCH CUINCOMINGMONEYBYACCOUNT INTO INUINCOMINGOPERATIVE,
                                        INUINCOMINGNOOPERATIVE,
                                        INUINCOMINGINTEREST;
    CLOSE CUINCOMINGMONEYBYACCOUNT;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        IF ( CUINCOMINGMONEYBYACCOUNT%ISOPEN ) THEN
            CLOSE CUINCOMINGMONEYBYACCOUNT;
        END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        IF ( CUINCOMINGMONEYBYACCOUNT%ISOPEN ) THEN
            CLOSE CUINCOMINGMONEYBYACCOUNT;
        END IF;
    	
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
        IF ( CUINCOMINGMONEYBYACCOUNT%ISOPEN ) THEN
            CLOSE CUINCOMINGMONEYBYACCOUNT;
        END IF;
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END CALCULATEINCBYACC;





















PROCEDURE GETLASTACCRECEIVBYBILL
(
    INUFACTCODI       IN CUENCOBR.CUCOFACT%TYPE,
    ORCCUENCOBR      OUT CUENCOBR%ROWTYPE
)
IS
    CURSOR  CUCUENCOBYFACT IS
        SELECT  *
        FROM    CUENCOBR
        WHERE   CUCOFACT = INUFACTCODI
        ORDER   BY CUCOCODI DESC;
BEGIN

    PKERRORS.PUSH('pkBCCuencobr.GetLastAccReceivbyBill');

    
    IF CUCUENCOBYFACT%ISOPEN THEN
    
        CLOSE CUCUENCOBYFACT;
    
    END IF;

    OPEN CUCUENCOBYFACT;
    FETCH CUCUENCOBYFACT INTO ORCCUENCOBR;
    CLOSE CUCUENCOBYFACT;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        
        IF (CUCUENCOBYFACT%ISOPEN) THEN
	        CLOSE CUCUENCOBYFACT;
	    END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF (CUCUENCOBYFACT%ISOPEN) THEN
	        CLOSE CUCUENCOBYFACT;
	    END IF;
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        
        IF (CUCUENCOBYFACT%ISOPEN) THEN
	        CLOSE CUCUENCOBYFACT;
	    END IF;
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETLASTACCRECEIVBYBILL;































FUNCTION FRCGETCOUNTSBYRANGE
(
    ISBCONSULTA IN VARCHAR2

) RETURN PKBCCUENCOBR.TYRCCUENCOBRBYRANGE
IS
    CUCUENCOBRBYRANGE   PKCONSTANTE.TYREFCURSOR;
    RCCUENTAS           PKBCCUENCOBR.TYRCCUENCOBRBYRANGE;
BEGIN

    PKERRORS.PUSH('pkBCCuencobr.frcGetCountsByRange');

    
    
    

    OPEN CUCUENCOBRBYRANGE FOR ISBCONSULTA;
    FETCH CUCUENCOBRBYRANGE BULK COLLECT INTO
                            RCCUENTAS.TBCUCOCODI,
                            RCCUENTAS.TBCUCOFACT,
                            RCCUENTAS.TBCUCONUSE,
                            RCCUENTAS.TBCUCOSUCA,
                            RCCUENTAS.TBCUCOCATE,
                            RCCUENTAS.TBCUCOFEGE,
                            RCCUENTAS.TBCUCOANO,
                            RCCUENTAS.TBCUCOMES,
                            RCCUENTAS.TBCUCOPEFA,
                            RCCUENTAS.TBCUCOSACU,
                            RCCUENTAS.TBCUCOSERV,
                            RCCUENTAS.TBCUCOCICL,
                            RCCUENTAS.TBCUCOFEPA
        LIMIT CNUREGISTERQUANTITY;
    CLOSE CUCUENCOBRBYRANGE;

    PKERRORS.POP;

    RETURN RCCUENTAS;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        IF ( CUCUENCOBRBYRANGE%ISOPEN ) THEN
            CLOSE CUCUENCOBRBYRANGE;
        END IF;
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        IF (CUCUENCOBRBYRANGE%ISOPEN) THEN
            CLOSE CUCUENCOBRBYRANGE;
        END IF;
       	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        IF (CUCUENCOBRBYRANGE%ISOPEN) THEN
            CLOSE CUCUENCOBRBYRANGE;
        END IF;
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FRCGETCOUNTSBYRANGE;




























FUNCTION FNUGETTOTALACCRECEIVRANGEFGCC
(
    ISBCONSULTA IN VARCHAR2

) RETURN NUMBER
IS
    NUVALOR     NUMBER;
    CUTOT PKCONSTANTE.TYREFCURSOR;
BEGIN

    PKERRORS.PUSH('pkBCCuencobr.fnuGetTotalAccReceivRangeFGCC');

    
    OPEN CUTOT FOR ISBCONSULTA;
    FETCH CUTOT INTO NUVALOR;
    CLOSE CUTOT;

    PKERRORS.POP;
    RETURN NUVALOR;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
       	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FNUGETTOTALACCRECEIVRANGEFGCC;
















FUNCTION  FNUGETNONAPPLIEDPAY
(
    INUPRODUCT  IN CUENCOBR.CUCONUSE%TYPE

) RETURN   CUENCOBR.CUCOVRAP%TYPE
IS
     NUVLRRECLAMO CUENCOBR.CUCOVRAP%TYPE;

     CURSOR CUNONAPPLIEDPAY
     IS
       SELECT NVL (SUM (NVL (CUCOVRAP, 0)), 0) AS NUVLRR FROM CUENCOBR
       WHERE CUCONUSE = INUPRODUCT;
BEGIN

    PKERRORS.PUSH('pkBCCuencobr.fnuGetNonAppliedPay');

    
    IF CUNONAPPLIEDPAY%ISOPEN THEN
    
        CLOSE CUNONAPPLIEDPAY;
    
    END IF;

    OPEN CUNONAPPLIEDPAY;
    FETCH CUNONAPPLIEDPAY INTO NUVLRRECLAMO;
    CLOSE CUNONAPPLIEDPAY;

    RETURN(NUVLRRECLAMO);
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        
        IF (CUNONAPPLIEDPAY%ISOPEN) THEN
	        CLOSE CUNONAPPLIEDPAY;
	    END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF (CUNONAPPLIEDPAY%ISOPEN) THEN
	        CLOSE CUNONAPPLIEDPAY;
	    END IF;
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        
        IF (CUNONAPPLIEDPAY%ISOPEN) THEN
	        CLOSE CUNONAPPLIEDPAY;
	    END IF;
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FNUGETNONAPPLIEDPAY;

















FUNCTION  FNUGETOUTSTANDBAL
(
    INUPRODUCT  IN CUENCOBR.CUCONUSE%TYPE

) RETURN   CUENCOBR.CUCOSACU%TYPE
IS
     NUSALDCUEN CUENCOBR.CUCOSACU%TYPE;

    CURSOR CUDEBITBALANCE
    IS
     SELECT NVL (SUM (NVL (CUCOSACU,0)), 0) AS SALPEN FROM CUENCOBR
     WHERE CUCONUSE = INUPRODUCT;
BEGIN

    PKERRORS.PUSH('pkBCCuencobr.fnuGetOutStandBal');

    
    IF CUDEBITBALANCE%ISOPEN THEN
    
        CLOSE CUDEBITBALANCE;
    
    END IF;

    OPEN CUDEBITBALANCE;
    FETCH CUDEBITBALANCE INTO NUSALDCUEN;
    CLOSE CUDEBITBALANCE;

    RETURN(NUSALDCUEN);
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        
        IF (CUDEBITBALANCE%ISOPEN) THEN
	        CLOSE CUDEBITBALANCE;
	    END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF (CUDEBITBALANCE%ISOPEN) THEN
	        CLOSE CUDEBITBALANCE;
	    END IF;
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        
        IF (CUDEBITBALANCE%ISOPEN) THEN
	        CLOSE CUDEBITBALANCE;
	    END IF;
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FNUGETOUTSTANDBAL;
















FUNCTION  FNUGETCLAIMVALUE
(
    INUPRODUCT  IN CUENCOBR.CUCONUSE%TYPE

) RETURN   CUENCOBR.CUCOVARE%TYPE
IS
    NUCLAIMVALUE CUENCOBR.CUCOVARE%TYPE;

    CURSOR CUCLAIMVALUE
    IS
     SELECT NVL (SUM( NVL (CUCOVARE, 0)), 0) AS CLAIMVALUE FROM CUENCOBR
     WHERE CUCONUSE = INUPRODUCT;
BEGIN

    PKERRORS.PUSH('pkBCCuencobr.fnuGetClaimValue');

    
    IF CUCLAIMVALUE%ISOPEN THEN
    
        CLOSE CUCLAIMVALUE;
    
    END IF;

    OPEN CUCLAIMVALUE;
    FETCH CUCLAIMVALUE INTO NUCLAIMVALUE;
    CLOSE CUCLAIMVALUE;

    RETURN(NUCLAIMVALUE);
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        
        IF (CUCLAIMVALUE%ISOPEN) THEN
	        CLOSE CUCLAIMVALUE;
	    END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF (CUCLAIMVALUE%ISOPEN) THEN
	        CLOSE CUCLAIMVALUE;
	    END IF;
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        
        IF (CUCLAIMVALUE%ISOPEN) THEN
	        CLOSE CUCLAIMVALUE;
	    END IF;
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FNUGETCLAIMVALUE;

















FUNCTION  FNUGETBALACCNUM
(
    INUPRODUCT  IN CUENCOBR.CUCONUSE%TYPE

) RETURN   NUMBER
IS
    NUCANTCUEN NUMBER;

    CURSOR CUCANTCUENSAL
    IS
     SELECT COUNT(*) AS CANCUENSAL FROM CUENCOBR
     WHERE CUCONUSE = INUPRODUCT
     AND   NVL (CUCOSACU, 0) > 0;
BEGIN

    PKERRORS.PUSH('pkBCCuencobr.fnuGetBalAccNum');

    
    IF CUCANTCUENSAL%ISOPEN THEN
    
        CLOSE CUCANTCUENSAL;
    
    END IF;

    OPEN CUCANTCUENSAL;
    FETCH CUCANTCUENSAL INTO NUCANTCUEN;
    CLOSE CUCANTCUENSAL;

    RETURN(NUCANTCUEN);
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        
        IF (CUCANTCUENSAL%ISOPEN) THEN
	        CLOSE CUCANTCUENSAL;
	    END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF (CUCANTCUENSAL%ISOPEN) THEN
	        CLOSE CUCANTCUENSAL;
	    END IF;
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        
        IF (CUCANTCUENSAL%ISOPEN) THEN
	        CLOSE CUCANTCUENSAL;
	    END IF;
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FNUGETBALACCNUM;

    




















    FUNCTION  FNUGETPRODUCTTOTALVALUE
    (
        INUPRODUCT  IN CUENCOBR.CUCONUSE%TYPE

    ) RETURN CUENCOBR.CUCOSACU%TYPE
    IS

        NUACCOUNTTOTALVALUE        CUENCOBR.CUCOSACU%TYPE;

        CURSOR CUTOTALBALANCE
        IS
            SELECT NVL (SUM (NVL (CUCOSACU, 0) - NVL (CUCOVARE, 0) - NVL (CUCOVRAP, 0)), 0) AS TOTALVALUE
            FROM CUENCOBR
            WHERE CUCONUSE = INUPRODUCT;
    BEGIN
    
        PKERRORS.PUSH('pkBCCuencobr.fnuGetProductTotalValue');

        
        IF CUTOTALBALANCE%ISOPEN THEN
        
            CLOSE CUTOTALBALANCE;
        
        END IF;

        
        OPEN CUTOTALBALANCE;
        FETCH CUTOTALBALANCE INTO NUACCOUNTTOTALVALUE;
        CLOSE CUTOTALBALANCE;

        PKERRORS.POP;

        RETURN( NUACCOUNTTOTALVALUE );

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            IF ( CUTOTALBALANCE%ISOPEN ) THEN
                    CLOSE CUTOTALBALANCE;
            END IF;
            PKERRORS.POP;
            RAISE;

        WHEN OTHERS THEN
            
            IF ( CUTOTALBALANCE%ISOPEN ) THEN
                    CLOSE CUTOTALBALANCE;
            END IF;
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END FNUGETPRODUCTTOTALVALUE;
    
    




























    PROCEDURE GETBALANCEBYBILL
    (
        INUBILL         IN  CUENCOBR.CUCOFACT%TYPE,
        ONUBALANCE      OUT CUENCOBR.CUCOSACU%TYPE,
        ONUTOTALVALUE   OUT CUENCOBR.CUCOVATO%TYPE
    )
    IS

        
        
        

        
        CURSOR  CUBALANCE
        (
            INUBILL IN  CUENCOBR.CUCOFACT%TYPE
        )
        IS
            SELECT  SUM( NVL( CUCOSACU, 0 ) - NVL( CUCOVARE, 0 ) - NVL( CUCOVRAP, 0 ) ) CUCOSACU,
                    SUM( NVL( CUCOVATO, 0 ) ) CUCOVATO
            FROM    CUENCOBR
            WHERE   CUCOFACT = INUBILL;

    BEGIN
    

        PKERRORS.PUSH( 'pkBCCuencobr.GetBalanceByBill' );

        IF( CUBALANCE%ISOPEN ) THEN
            CLOSE CUBALANCE;
        END IF;

        
        OPEN CUBALANCE( INUBILL );
        FETCH CUBALANCE INTO ONUBALANCE, ONUTOTALVALUE;

        CLOSE CUBALANCE;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            IF( CUBALANCE%ISOPEN ) THEN
                CLOSE CUBALANCE;
            END IF;
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            IF( CUBALANCE%ISOPEN ) THEN
                CLOSE CUBALANCE;
            END IF;
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            IF( CUBALANCE%ISOPEN ) THEN
                CLOSE CUBALANCE;
            END IF;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETBALANCEBYBILL;
    
    



































    PROCEDURE GETBILLSWITHBALANCE
    (
        INUCONTRACT IN  SUSCRIPC.SUSCCODI%TYPE,
        OTBBILLS    OUT TYTBDUEBILLS
    )
    IS
        
        
        
        CURSOR CUBILLS
        IS
            SELECT FACTCODI, FACTPEFA, FACTPROG, FACTFEGE, MAX(CUCOFEVE),
                   SUM(CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END),
                   NVL(SUM(CUCOVRAP),0),
                   NVL(SUM(CUCOSACU),0) - NVL(SUM(CUCOVRAP),0) -
                   SUM(CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END)
            FROM   CUENCOBR, FACTURA
            WHERE  CUCOFACT = FACTCODI
            AND    FACTSUSC = INUCONTRACT
            GROUP BY FACTCODI, FACTPEFA, FACTPROG, FACTFEGE
            HAVING NVL(SUM(CUCOSACU),0) - NVL(SUM(CUCOVRAP),0) -
                   SUM(CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END)
                   > GNUTOPE_DEUDA_PERMITIDO
            ORDER BY FACTFEGE, FACTCODI;
    BEGIN

        PKERRORS.PUSH('pkBCCuencobr.GetBillsWithBalance');

        OPEN CUBILLS;
        FETCH CUBILLS BULK COLLECT INTO OTBBILLS;
        CLOSE CUBILLS;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETBILLSWITHBALANCE;
    
    




















    PROCEDURE CONSCUENTACOBRO (
        INUCUCOCODI     IN  CUENCOBR.CUCOCODI%TYPE,
        OCUCUENCOBR     OUT PKCONSTANTE.TYREFCURSOR
    )
    IS
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.ConsCuentaCobro');
        UT_TRACE.TRACE('Inicio [pkBCCuencobr.ConsCuentaCobro]');

        
        IF ( OCUCUENCOBR%ISOPEN ) THEN
            CLOSE OCUCUENCOBR;
        END IF;
        
        
        OPEN OCUCUENCOBR FOR
            SELECT  CUENCOBR.CUCOCODI,
                    CUENCOBR.CUCONUSE,
                    TO_CHAR( CUENCOBR.CUCOFEVE, UT_DATE.FSBSHORT_DATE_FORMAT ) CUCOFEVE,
                    CUENCOBR.CUCOVATO,
                    CUENCOBR.CUCOVAAB,
                    CUENCOBR.CUCOSACU,
                    TO_CHAR( CUENCOBR.CUCOFACT ) PARENT_ID
            FROM    CUENCOBR
            WHERE   CUENCOBR.CUCOCODI = INUCUCOCODI;

        UT_TRACE.TRACE('Fin [pkBCCuencobr.ConsCuentaCobro]');
        PKERRORS.POP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CONSCUENTACOBRO;
    
    
    





















    PROCEDURE OBTCUENCOBRPORFACTVENC (
        INUFACTCODI     IN  CUENCOBR.CUCOFACT%TYPE,
        OCUCUENCOBR     OUT PKCONSTANTE.TYREFCURSOR
    )
    IS
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.ObtCuenCobrPorFactVenc');
        UT_TRACE.TRACE('Inicio [pkBCCuencobr.ObtCuenCobrPorFactVenc]');

        IF ( OCUCUENCOBR%ISOPEN ) THEN
            CLOSE OCUCUENCOBR;
        END IF;
        
        OPEN OCUCUENCOBR FOR
            SELECT  CUENCOBR.CUCOCODI,
                    CUENCOBR.CUCONUSE,
                    TO_CHAR( CUENCOBR.CUCOFEVE, UT_DATE.FSBSHORT_DATE_FORMAT ) CUCOFEVE,
                    CUENCOBR.CUCOVATO,
                    CUENCOBR.CUCOVAAB,
                    CUENCOBR.CUCOSACU,
                    TO_CHAR( CUENCOBR.CUCOFACT ) PARENT_ID
            FROM    CUENCOBR
            WHERE   CUENCOBR.CUCOFACT = INUFACTCODI;

        UT_TRACE.TRACE('Fin [pkBCCuencobr.ObtCuenCobrPorFactVenc]');
        PKERRORS.POP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTCUENCOBRPORFACTVENC;
    
    
    





















    PROCEDURE OBTFACTVENCPORCUENCOBR
    (
        INUCUCOCODI     IN  CUENCOBR.CUCOCODI%TYPE,
        ONUFACTCODI     OUT CUENCOBR.CUCOFACT%TYPE
    )
    IS
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.ObtFactVencPorCuenCobr');
        UT_TRACE.TRACE('Inicio [pkBCCuencobr.ObtFactVencPorCuenCobr]');

        
        IF ( PKTBLCUENCOBR.FBLEXIST( INUCUCOCODI ) ) THEN
            
            ONUFACTCODI := PKTBLCUENCOBR.FRCGETRECORD( INUCUCOCODI ).CUCOFACT;
        END IF;

        UT_TRACE.TRACE('Fin [pkBCCuencobr.ObtFactVencPorCuenCobr]');
        PKERRORS.POP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTFACTVENCPORCUENCOBR;
    
    















    PROCEDURE VALIDAREDADFACTURA(
                                    INUFACTCODI IN  FACTURA.FACTCODI%TYPE,
                                    OBOMAXEDAD  OUT BOOLEAN
                               )
    IS
        
        DTCUCOFEVE  CUENCOBR.CUCOFEVE%TYPE;
        
        NUMESES     NUMBER;

        
        CURSOR CUCUENTAS
        IS
            SELECT  CUCOFEVE
            FROM    CUENCOBR
            WHERE   CUCOFACT = INUFACTCODI
            ORDER BY CUCOFEVE DESC;
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.ValidarEdadFactura');
        UT_TRACE.TRACE('Inicio [pkBCCuencobr.ValidarEdadFactura]');
        
        IF CUCUENTAS%ISOPEN THEN
            CLOSE CUCUENTAS;
        END IF;
        
        OPEN CUCUENTAS;
        FETCH CUCUENTAS INTO DTCUCOFEVE;
        CLOSE CUCUENTAS;
        
        NUMESES := GE_BOPARAMETER.FNUVALORNUMERICO('FA_MAX_EDAD_FACTURA');
        
        IF DTCUCOFEVE < ADD_MONTHS(SYSDATE,-NUMESES) THEN
            OBOMAXEDAD := TRUE;
        ELSE
            OBOMAXEDAD := FALSE;
        END IF;

        UT_TRACE.TRACE('Fin [pkBCCuencobr.ValidarEdadFactura]');
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END VALIDAREDADFACTURA;
    
    















    PROCEDURE OBTENERCUENNUSE(
                                INUFACTCODI IN  FACTURA.FACTCODI%TYPE,
                                ONUCUCOCODI OUT CUENCOBR.CUCOCODI%TYPE,
                                ONUCUCONUSE OUT CUENCOBR.CUCONUSE%TYPE
                             )
    IS
        
        CURSOR CUCUENTAS
        IS
            SELECT  CUCOCODI,CUCONUSE
            FROM    CUENCOBR
            WHERE   CUCOFACT = INUFACTCODI
            AND     ROWNUM = 1;
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.ObtenerCuenNuse');
        UT_TRACE.TRACE('Inicio [pkBCCuencobr.ObtenerCuenNuse]');
        
        IF CUCUENTAS%ISOPEN THEN
            CLOSE CUCUENTAS;
        END IF;
        
        OPEN CUCUENTAS;
        FETCH CUCUENTAS INTO ONUCUCOCODI,ONUCUCONUSE;
        CLOSE CUCUENTAS;

        UT_TRACE.TRACE('Fin [pkBCCuencobr.ObtenerCuenNuse]');
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END OBTENERCUENNUSE;
    
    















    PROCEDURE VALIDARCUENTA(
                            INUCUCOCODI IN  CUENCOBR.CUCOCODI%TYPE,
                            ONUVALIDA   OUT NUMBER
                           )
    IS
        
        DTCUCOFEVE  CUENCOBR.CUCOFEVE%TYPE;
        
        NUMESES     NUMBER;

        
        CURSOR CUCUENTAS
        IS
            SELECT  CUCOFEVE
            FROM    CUENCOBR
            WHERE   CUCOFACT IN (
                                    SELECT  CUCOFACT
                                    FROM    CUENCOBR
                                    WHERE   CUCOCODI = INUCUCOCODI
                                )
            AND     ROWNUM = 1
            ORDER BY CUCOFEVE DESC;
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.ValidarCuenta');
        UT_TRACE.TRACE('Inicio [pkBCCuencobr.ValidarCuenta]');
        
        IF CUCUENTAS%ISOPEN THEN
            CLOSE CUCUENTAS;
        END IF;
        
        OPEN CUCUENTAS;
        FETCH CUCUENTAS INTO DTCUCOFEVE;
        CLOSE CUCUENTAS;
        
        NUMESES := DAGE_PARAMETER.FSBGETVALUE('FA_MAX_EDAD_FACTURA');
        IF DTCUCOFEVE < ADD_MONTHS(SYSDATE,-NUMESES) THEN
            ONUVALIDA := 0;
        ELSE
            ONUVALIDA := 1;
        END IF;

        UT_TRACE.TRACE('Fin [pkBCCuencobr.ValidarCuenta]');
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END VALIDARCUENTA;
    
    


























    FUNCTION FDTOBTMINFECHAVENC
    (
        INUFACTURA  IN  CUENCOBR.CUCOFACT%TYPE
    )
        RETURN CUENCOBR.CUCOFEVE%TYPE
    IS

        
        
        

        
        CURSOR CUFECHAVENC
        (
            INUFACTURA  IN  CUENCOBR.CUCOFACT%TYPE
        )
        IS
            SELECT  --+ index( cuencobr, IDXCUCO_RELA )
                    MIN( CUCOFEVE )
            FROM    CUENCOBR
            WHERE   CUCOFACT = INUFACTURA;

        
        
        

        
        DTFECHA CUENCOBR.CUCOFEVE%TYPE;

    BEGIN
    

        PKERRORS.PUSH
        (
            'pkBCCuencobr.fdtObtMinFechaVenc'
        );

        
        DTFECHA := NULL;

        IF( CUFECHAVENC%ISOPEN ) THEN
        
            CLOSE CUFECHAVENC;
        
        END IF;

        OPEN    CUFECHAVENC
                (
                    INUFACTURA
                );

        
        FETCH   CUFECHAVENC
        INTO    DTFECHA;

        CLOSE CUFECHAVENC;

        PKERRORS.POP;

        RETURN DTFECHA;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        
            PKERRORS.POP;
            IF( CUFECHAVENC%ISOPEN ) THEN
            
                CLOSE CUFECHAVENC;
            
            END IF;
            RAISE LOGIN_DENIED;
        
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
            PKERRORS.POP;
            IF( CUFECHAVENC%ISOPEN ) THEN
            
                CLOSE CUFECHAVENC;
            
            END IF;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        
        WHEN OTHERS THEN
        
            PKERRORS.NOTIFYERROR
            (
                PKERRORS.FSBLASTOBJECT,
                SQLERRM               ,
                SBERRMSG
            );
            PKERRORS.POP;
            IF( CUFECHAVENC%ISOPEN ) THEN
            
                CLOSE CUFECHAVENC;
            
            END IF;
            RAISE_APPLICATION_ERROR
            (
                PKCONSTANTE.NUERROR_LEVEL2,
                SBERRMSG
            );
        
    
    END FDTOBTMINFECHAVENC;
    
    















    PROCEDURE GETACCOUNTSBYBILL
    (
        INUBILL     IN  CUENCOBR.CUCOFACT%TYPE,
        OTBACCOUNTS OUT NOCOPY  TYTBACCOUNTS
    )
    IS
        
        
        
        CURSOR CUACCOUNTS
        IS
            SELECT  *
            FROM    CUENCOBR
            WHERE   CUCOFACT = INUBILL;
    BEGIN

        PKERRORS.PUSH('pkBCCuencobr.GetAccountsByBill');

        IF CUACCOUNTS%ISOPEN THEN
            CLOSE CUACCOUNTS;
        END IF;

        
        OPEN CUACCOUNTS;
        FETCH CUACCOUNTS BULK COLLECT INTO OTBACCOUNTS;
        CLOSE CUACCOUNTS;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETACCOUNTSBYBILL;

    FUNCTION FRCGETACCBYPRODBILL
    (
        INUFACTCODI     IN FACTURA.FACTCODI%TYPE,
        INUPRODUCTID    IN SERVSUSC.SESUNUSE%TYPE
    )
    RETURN CUENCOBR%ROWTYPE
    IS
        RCCUENCOBR   CUENCOBR%ROWTYPE;

        CURSOR CUACCBYPRODANDBILL
        IS
            SELECT *
            FROM CUENCOBR
            WHERE CUCOFACT = INUFACTCODI
            AND CUCONUSE = INUPRODUCTID;

        
        PROCEDURE CLOSECURSOR
        IS
        BEGIN
            IF (CUACCBYPRODANDBILL%ISOPEN) THEN
                CLOSE CUACCBYPRODANDBILL;
            END IF;
        END;
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.GetAccountsByBill');
        
        CLOSECURSOR;

        
        OPEN CUACCBYPRODANDBILL;
        FETCH CUACCBYPRODANDBILL INTO RCCUENCOBR;
        CLOSE CUACCBYPRODANDBILL;

        PKERRORS.POP;
        RETURN RCCUENCOBR;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            CLOSECURSOR;
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            CLOSECURSOR;
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END;

    


























    PROCEDURE GETCONTACCOWITHBALANCE
    (
        INUCONTRACT IN  SUSCRIPC.SUSCCODI%TYPE,
        OTBACCOUNTS OUT PKBCCUENCOBR.TYTBACCOUNTS
    )
    IS
        
        
        
        CURSOR CUACCOUNTS
        IS
            SELECT CUENCOBR.*
            FROM   CUENCOBR, SERVSUSC
            WHERE  CUCONUSE = SESUNUSE
            AND    SESUSUSC = INUCONTRACT
            AND    ( NVL(CUCOSACU,0) - NVL(CUCOVRAP,0) -
                   ( CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END ) ) > 0
            ORDER BY CUCOCODI;
    BEGIN

        PKERRORS.PUSH('pkBCCuencobr.GetContAccoWithBalance');

        OPEN CUACCOUNTS;
        FETCH CUACCOUNTS BULK COLLECT INTO OTBACCOUNTS;
        CLOSE CUACCOUNTS;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETCONTACCOWITHBALANCE;
    
    
    































    PROCEDURE GETBILLSWITHBALBYPROD
    (
        INUPRODUCT  IN  SERVSUSC.SESUNUSE%TYPE,
        OTBBILLS    OUT TYTBDUEBILLS
    )
    IS
        
        
        
        CURSOR CUBILLS
        IS
            SELECT FACTCODI, FACTPEFA, FACTPROG, FACTFEGE, MAX(CUCOFEVE),
                   SUM(CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END),
                   NVL(SUM(CUCOVRAP),0),
                   NVL(SUM(CUCOSACU),0) - NVL(SUM(CUCOVRAP),0) -
                   SUM(CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END)
            FROM   CUENCOBR, FACTURA
            WHERE  CUCOFACT = FACTCODI
            AND    CUCONUSE = INUPRODUCT
            GROUP BY FACTCODI, FACTPEFA, FACTPROG, FACTFEGE
            HAVING NVL(SUM(CUCOSACU),0) - NVL(SUM(CUCOVRAP),0) -
                   SUM(CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END)
                   > GNUTOPE_DEUDA_PERMITIDO
            ORDER BY FACTFEGE, FACTCODI;
    BEGIN

        PKERRORS.PUSH('pkBCCuencobr.GetBillsWithBalbyProd');

        OPEN CUBILLS;
        FETCH CUBILLS BULK COLLECT INTO OTBBILLS;
        CLOSE CUBILLS;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETBILLSWITHBALBYPROD;
    
    































    PROCEDURE GETBILLSWITHBALBYCLIENT
    (
        INUCLIENT   IN  SUSCRIPC.SUSCCLIE%TYPE,
        OTBBILLS    OUT TYTBDUEBILLS
    )
    IS
        
        
        
        CURSOR CUBILLS
        IS
            SELECT FACTCODI, FACTPEFA, FACTPROG, FACTFEGE, MAX(CUCOFEVE),
                   SUM(CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END),
                   NVL(SUM(CUCOVRAP),0),
                   NVL(SUM(CUCOSACU),0) - NVL(SUM(CUCOVRAP),0) -
                   SUM(CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END)
            FROM   CUENCOBR, FACTURA , SUSCRIPC
            WHERE  CUCOFACT = FACTCODI
            AND    FACTSUSC = SUSCCODI
            AND    SUSCCLIE = INUCLIENT
            GROUP BY FACTCODI, FACTPEFA, FACTPROG, FACTFEGE
            HAVING NVL(SUM(CUCOSACU),0) - NVL(SUM(CUCOVRAP),0) -
                   SUM(CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END)
                   > GNUTOPE_DEUDA_PERMITIDO
            ORDER BY FACTFEGE, FACTCODI;
    BEGIN

        PKERRORS.PUSH('pkBCCuencobr.GetBillsWithBalbyClient');

        OPEN CUBILLS;
        FETCH CUBILLS BULK COLLECT INTO OTBBILLS;
        CLOSE CUBILLS;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END GETBILLSWITHBALBYCLIENT;
    
    
































    PROCEDURE GETSUSCACCWITHBALANCE
    (
        INUSUSCRIPTION                      IN  SUSCRIPC.SUSCCODI%TYPE,
        OTBACCOUNTS                         OUT TYTBACCOUNTS
    )
    IS
        
        CUACCOUNTS                          PKCONSTANTE.TYREFCURSOR;

    BEGIN
    
        PKERRORS.PUSH('pkBCCuencobr.GetSuscAccWithBalance');

        
        IF ( CUACCOUNTS%ISOPEN ) THEN
            
            CLOSE CUACCOUNTS;
        END IF;

        
        OPEN CUACCOUNTS FOR
            SELECT CUENCOBR.*
            FROM   CUENCOBR,
                   (SELECT FACTCODI
                   FROM FACTURA
                   WHERE FACTSUSC = INUSUSCRIPTION )
            WHERE  CUCOFACT = FACTCODI
           AND     ( CUCOSACU > 0 OR CUCOVRAP > 0 OR CUCOVARE > 0 );

                          
        FETCH CUACCOUNTS BULK COLLECT INTO OTBACCOUNTS;
        CLOSE CUACCOUNTS;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END GETSUSCACCWITHBALANCE;

    




































    PROCEDURE GETPRODACCWITHBALANCE
    (
        INUPRODUCT                          IN  SERVSUSC.SESUNUSE%TYPE,
        OTBACCOUNTS                         OUT TYTBACCOUNTS
    )
    IS
        
        CUACCOUNTS                          PKCONSTANTE.TYREFCURSOR;

    BEGIN
    
        PKERRORS.PUSH('pkBCCuencobr.GetProdAccWithBalance');

        
        IF ( CUACCOUNTS%ISOPEN ) THEN
            
            CLOSE CUACCOUNTS;
        END IF;

        
        OPEN CUACCOUNTS FOR
            SELECT CUENCOBR.*
            FROM   CUENCOBR
            WHERE  CUCONUSE = INUPRODUCT
            AND    ( CUCOSACU > 0 OR CUCOVRAP > 0 OR CUCOVARE > 0 );
        FETCH CUACCOUNTS BULK COLLECT INTO OTBACCOUNTS;
        CLOSE CUACCOUNTS;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END GETPRODACCWITHBALANCE;

    





































    PROCEDURE GETGROUPACCWITHBALANCE
    (
        INUSUSCRIPTION                      IN  SUSCRIPC.SUSCCODI%TYPE,
        INUGROUP                            IN  SESUASOC.SSASCONS%TYPE,
        OTBACCOUNTS                         OUT TYTBACCOUNTS
    )
    IS
        
        CUACCOUNTS                          PKCONSTANTE.TYREFCURSOR;

    BEGIN
    
        PKERRORS.PUSH('pkBCCuencobr.frfGetGroupAccWithBalance');

        
        IF ( CUACCOUNTS%ISOPEN ) THEN
            
            CLOSE CUACCOUNTS;
        END IF;

        
        OPEN CUACCOUNTS FOR
            SELECT CUENCOBR.*
            FROM   CUENCOBR, SESUASOC
            WHERE  SSASSUSC = INUSUSCRIPTION
            AND    SSASCONS = INUGROUP
            AND    SSASSESU = CUCONUSE
            AND    ( CUCOSACU > 0 OR CUCOVRAP > 0 OR CUCOVARE > 0 );
            
        FETCH CUACCOUNTS BULK COLLECT INTO OTBACCOUNTS;
        CLOSE CUACCOUNTS;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END GETGROUPACCWITHBALANCE;

     



















    PROCEDURE ELIMINARCUENTASCOBRO
    (
        ITBCUENTAS  IN  PKTBLDL_INFORECC.TYINRCCOCC
    )
    IS
    BEGIN
    
        PKERRORS.PUSH( 'pkBCCuencobr.EliminarCuentasCobro' );

        
        IF( ITBCUENTAS.FIRST IS NULL ) THEN
        
            PKERRORS.POP;
            RETURN;
        
        END IF;

        FORALL NUIND IN ITBCUENTAS.FIRST .. ITBCUENTAS.LAST
        
            DELETE  CUENCOBR
            WHERE   CUCOCODI = ITBCUENTAS( NUIND );
        

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        
        WHEN OTHERS THEN
        
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
    
    END ELIMINARCUENTASCOBRO;

    
























    FUNCTION FNUGETCLIEPENDBAL
    (
        INUCLIENT   IN  SUSCRIPC.SUSCCLIE%TYPE
    )
    RETURN CUENCOBR.CUCOSACU%TYPE
    IS
        
        
        
        NUPENDBAL   NUMBER;
        
        
        
        CURSOR CUPENDBAL
        IS
            SELECT  NVL( SUM(CUCOSACU), 0 ) -
                    SUM(CUCOVARE) -
                    NVL( SUM(CUCOVRAP), 0 )
            FROM    CUENCOBR, SERVSUSC, SUSCRIPC
            WHERE   CUCONUSE = SESUNUSE
            AND     SESUSUSC = SUSCCODI
            AND     SUSCCLIE = INUCLIENT;
    BEGIN

        UT_TRACE.TRACE( 'pkBCCuencobr.fnuGetCliePendBal', 3 );

        OPEN CUPENDBAL;
        FETCH CUPENDBAL INTO NUPENDBAL;
        CLOSE CUPENDBAL;

        UT_TRACE.TRACE( 'Fin pkBCCuencobr.fnuGetCliePendBal', 3 );
        RETURN NUPENDBAL;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( NULL, SQLERRM, SBERRMSG );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END FNUGETCLIEPENDBAL;

    

























    PROCEDURE GETCLIEACCOWITHBALANCE
    (
        INUCLIENT   IN  SUSCRIPC.SUSCCLIE%TYPE,
        OTBACCOUNTS OUT PKBCCUENCOBR.TYTBACCOUNTS
    )
    IS
        
        
        
        CURSOR CUACCOUNTS
        IS
            SELECT CUENCOBR.*
            FROM   CUENCOBR, SERVSUSC, SUSCRIPC
            WHERE  CUCONUSE = SESUNUSE
            AND    SESUSUSC = SUSCCODI
            AND    SUSCCLIE = INUCLIENT
            AND    ( NVL(CUCOSACU,0) - NVL(CUCOVRAP,0) -
                   ( CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END ) ) > GNUTOPE_DEUDA_PERMITIDO
            ORDER BY CUCOCODI;
    BEGIN

        UT_TRACE.TRACE( 'pkBCCuencobr.GetClieAccoWithBalance', 3 );

        OPEN CUACCOUNTS;
        FETCH CUACCOUNTS BULK COLLECT INTO OTBACCOUNTS;
        CLOSE CUACCOUNTS;

        UT_TRACE.TRACE( 'Fin pkBCCuencobr.GetClieAccoWithBalance', 3 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	RAISE;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( NULL, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG );
    END GETCLIEACCOWITHBALANCE;

    





























    PROCEDURE GETSUBSACCNOAPPPAYCLAIM
    (
        INUSUBSCRIP IN  SUSCRIPC.SUSCCODI%TYPE,
        OTBACCOUNTS OUT PKBCCUENCOBR.TYTBACCOUNTS
    )
    IS
        
        
        
        CURSOR CUACCOUNTS
        IS
            SELECT CUENCOBR.*
            FROM   SERVSUSC, CUENCOBR
            WHERE  SESUNUSE = CUCONUSE
            AND    SESUSUSC = INUSUBSCRIP
            AND    CUCOVRAP > 0
            ORDER BY CUCOCODI DESC;
        
    BEGIN

        UT_TRACE.TRACE( 'pkBCCuencobr.GetSubsAccNoAppPayClaim', 15 );

        OPEN CUACCOUNTS;
        FETCH CUACCOUNTS BULK COLLECT INTO OTBACCOUNTS;
        CLOSE CUACCOUNTS;

        UT_TRACE.TRACE( 'Fin pkBCCuencobr.GetSubsAccNoAppPayClaim', 15 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	RAISE;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( NULL, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG );
    END GETSUBSACCNOAPPPAYCLAIM;
    
    























    PROCEDURE GETACCOUNTSBYBILLBYPRIOR(
                                        INUFACTCODI IN  FACTURA.FACTCODI%TYPE,
                                        OTBCUENTAS  OUT TYTBCUENTAS
                                      )
    IS
        
        
        CURSOR CUCUENTAS
        IS
            SELECT  /*+
                        ordered
                        leading ( cuencobr )
                        use_nl ( cuencobr servsusc )
                        use_nl ( servsusc servicio )
                        index ( cuencobr IDXCUCO_RELA )
                        index ( servicio PK_SERVICIO )
                    */
                    CUCOCODI
            FROM    CUENCOBR,SERVSUSC,SERVICIO
            WHERE   CUCOFACT = INUFACTCODI
            AND     CUCONUSE = SESUNUSE
            AND     SESUSERV = SERVCODI
            ORDER BY SERVPRRE;
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.GetAccountsByBillbyPrior');
        
        
        IF CUCUENTAS%ISOPEN THEN
            CLOSE CUCUENTAS;
        END IF;
        
        
        OPEN CUCUENTAS;
        FETCH CUCUENTAS BULK COLLECT INTO OTBCUENTAS;
        CLOSE CUCUENTAS;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END;
    
    




















    PROCEDURE GETACCWITHBALOUTOFDATE
    (
        INUPRODUCT  IN  SERVSUSC.SESUNUSE%TYPE,
        OTBACCOUNTS OUT PKBCCUENCOBR.TYTBACCOUNTS
    )
    IS
        
        DTCURRENTDATE   DATE;

        
        CURSOR CUACCOUNTS
        IS
            SELECT  *
            FROM    CUENCOBR
            WHERE   CUCONUSE = INUPRODUCT
            AND     NVL(CUCOSACU,0) > 0
            AND     CUCOFEVE < DTCURRENTDATE;
        
    BEGIN

        PKERRORS.PUSH ('pkBCCuencobr.GetAccWithBalOutOfDate');
        
        
        DTCURRENTDATE := PKGENERALSERVICES.FDTGETSYSTEMDATE;
        
        
        OPEN CUACCOUNTS;
        FETCH CUACCOUNTS BULK COLLECT INTO OTBACCOUNTS;
        CLOSE CUACCOUNTS;
        
        PKERRORS.POP;
        
    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END GETACCWITHBALOUTOFDATE;
    
    


















    FUNCTION FNUGETLASTGENACCOUNT
    (
        INUCUCONUSE IN CUENCOBR.CUCONUSE%TYPE
    )
    RETURN CUENCOBR.CUCOCODI%TYPE
    IS
        NUDATA CUENCOBR.CUCOCODI%TYPE;
    
        CURSOR CUDATA IS
            SELECT CUCOCODI
            FROM CUENCOBR
            WHERE CUCONUSE = INUCUCONUSE
            ORDER BY CUCOCODI DESC ;
            
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF CUDATA%ISOPEN THEN
                CLOSE CUDATA;
            END IF;
        END;

    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.fnuGetLastGenAccount');
        
        CLOSECURSOR;
        
        OPEN CUDATA;
        FETCH CUDATA INTO NUDATA;
        CLOSE CUDATA;
        
        PKERRORS.POP;
        RETURN NUDATA;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            PKERRORS.POP;
        	RAISE;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	CLOSECURSOR;
            PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        	RAISE;

    END FNUGETLASTGENACCOUNT;
    
    



























    PROCEDURE GETACCOUNTINFOBYINVOICE
    (
        INUFACTCODI IN  FACTURA.FACTCODI%TYPE,
        OTBCUENTAS  OUT TYTBCUENTFACT
    )
    IS
        
        CURSOR CUCUENTAS
        IS
            SELECT  CUCOCODI,
                    CUCOFACT,
                    SESUNUSE,
                    SERVICE_NUMBER,
                    SERVCODI,
                    SERVDESC,
                    ( NVL(CUCOSACU, 0) - NVL(CUCOVARE, 0)) CUCOSACU
            FROM    SERVICIO, SERVSUSC, CUENCOBR, PR_PRODUCT
            WHERE   CUCOFACT = INUFACTCODI
            AND     SESUSERV = SERVCODI
            AND     CUCONUSE = SESUNUSE
            AND     SESUNUSE = PRODUCT_ID
            AND     ( NVL(CUCOSACU, 0) - NVL(CUCOVARE, 0)) > 0
            ORDER BY SERVPRRE ASC;
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.GetAccountInfoByInvoice');

        
        IF CUCUENTAS%ISOPEN THEN
            CLOSE CUCUENTAS;
        END IF;

        
        OPEN CUCUENTAS;
        FETCH CUCUENTAS BULK COLLECT INTO OTBCUENTAS;
        CLOSE CUCUENTAS;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETACCOUNTINFOBYINVOICE;
    
    




















    PROCEDURE GETACCOUNTINFOBYPRODUCT
    (
        INUSESUNUSE IN  SERVSUSC.SESUNUSE%TYPE,
        OTBCUENTAS  OUT TYTBCUENTFACT
    )
    IS
        
        CURSOR CUCUENTAS
        IS
            SELECT  CUCOCODI,
                    CUCOFACT,
                    SESUNUSE,
                    SERVICE_NUMBER,
                    SERVCODI,
                    SERVDESC,
                    ( NVL(CUCOSACU, 0) - NVL(CUCOVARE, 0)) CUCOSACU
            FROM    SERVICIO, SERVSUSC, CUENCOBR, PR_PRODUCT
            WHERE   SESUSERV = SERVCODI
            AND     CUCONUSE = SESUNUSE
            AND     SESUNUSE = PRODUCT_ID
            AND     SESUNUSE = INUSESUNUSE
            AND     ( NVL(CUCOSACU, 0) - NVL(CUCOVARE, 0)) > 0
            ;
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.GetAccountInfoByProduct');

        
        IF CUCUENTAS%ISOPEN THEN
            CLOSE CUCUENTAS;
        END IF;

        
        OPEN CUCUENTAS;
        FETCH CUCUENTAS BULK COLLECT INTO OTBCUENTAS;
        CLOSE CUCUENTAS;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            
            IF CUCUENTAS%ISOPEN THEN
                CLOSE CUCUENTAS;
            END IF;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETACCOUNTINFOBYPRODUCT;

    

















    FUNCTION FNUGETCLIENTLASTBILVAL
    (
        INUCLIENT   IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN NUMBER
    IS
        
        
        
        NUBILLEDVAL NUMBER;
        
        
        
        CURSOR CULASTBILLS
        IS  SELECT  MAX( SUM(CUCOVAFA) )
            FROM    CUENCOBR
            WHERE   CUCOFACT IN
            (   SELECT FACTCODI
                FROM
                (   SELECT  FACTCODI, FACTFEGE,
                            MAX(TRUNC(FACTFEGE)) OVER () MAXGENDATE
                    FROM    FACTURA, SUSCRIPC
                    WHERE   FACTSUSC = SUSCCODI
                    AND     SUSCCLIE = INUCLIENT
                )
                WHERE TRUNC(FACTFEGE) = MAXGENDATE
            )
            GROUP BY CUCOFACT;
    BEGIN

        UT_TRACE.TRACE( 'pkBCCuencobr.fnuGetClientLastBilVal', 15 );

        
        OPEN CULASTBILLS;
        FETCH CULASTBILLS INTO NUBILLEDVAL;
        CLOSE CULASTBILLS;

        UT_TRACE.TRACE( 'Fin pkBCCuencobr.fnuGetClientLastBilVal', 15 );
        RETURN NUBILLEDVAL;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCLIENTLASTBILVAL;


    




















    FUNCTION  FNUGETPRODEXPTOTALVAL
    (
        INUPRODUCT  IN CUENCOBR.CUCONUSE%TYPE

    ) RETURN CUENCOBR.CUCOSACU%TYPE
    IS

        NUACCOUNTTOTALVALUE        CUENCOBR.CUCOSACU%TYPE;

        CURSOR CUTOTALDUEBALANCE
        IS
            SELECT NVL (SUM (NVL (CUCOSACU, 0) - NVL (CUCOVARE, 0) - NVL (CUCOVRAP, 0)), 0) AS TOTALVALUE
            FROM CUENCOBR
            WHERE CUCONUSE = INUPRODUCT
            AND TRUNC(CUCOFEVE) < TRUNC(SYSDATE);
    BEGIN
    
        PKERRORS.PUSH('pkBCCuencobr.fnuGetProdExpTotalVal');

        
        IF CUTOTALDUEBALANCE%ISOPEN THEN
        
            CLOSE CUTOTALDUEBALANCE;
        
        END IF;

        
        OPEN CUTOTALDUEBALANCE;
        FETCH CUTOTALDUEBALANCE INTO NUACCOUNTTOTALVALUE;
        CLOSE CUTOTALDUEBALANCE;

        PKERRORS.POP;

        RETURN( NUACCOUNTTOTALVALUE );

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            IF ( CUTOTALDUEBALANCE%ISOPEN ) THEN
                    CLOSE CUTOTALDUEBALANCE;
            END IF;
            PKERRORS.POP;
            RAISE;

        WHEN OTHERS THEN
            
            IF ( CUTOTALDUEBALANCE%ISOPEN ) THEN
                    CLOSE CUTOTALDUEBALANCE;
            END IF;
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END FNUGETPRODEXPTOTALVAL;


    





























    PROCEDURE GETACCOUNTSBYDATE
    (
        INUSUSCCODI      IN   SUSCRIPC.SUSCCODI%TYPE,
        INUPRODUCTID     IN   SERVSUSC.SESUNUSE%TYPE,
        IDTDATE          IN   DATE,
        TBACCOUNTBYDATE  OUT  TYTBACCOUNTBYDATE
    )
    IS
    
        CURSOR  CUCONSULTA IS
        SELECT  /*+ leading(factura)
                    index(factura IX_FACTURA06)
                    use_nl(factura cuencobr)
                    index(cuencobr IDXCUCO_RELA)
                */
                CUCOCODI, CUCOSACU, CUCOFEVE
        FROM    /*+ pkBCCuencobr.GetAccountsByDate */
                FACTURA, CUENCOBR
        WHERE   CUCOFACT = FACTCODI
        AND     FACTSUSC = INUSUSCCODI
        AND     FACTFEGE >= IDTDATE
        AND     CUCONUSE = INUPRODUCTID;
    
    BEGIN
    
        PKERRORS.PUSH('pkBCCuencobr.GetAccountsByDate');
        UT_TRACE.TRACE('Inicio [pkBCCuencobr.GetAccountsByDate]', 1);

        
        IF( CUCONSULTA%ISOPEN ) THEN
        
            CLOSE CUCONSULTA;
        
        END IF;

        
        OPEN CUCONSULTA;
        FETCH CUCONSULTA BULK COLLECT INTO TBACCOUNTBYDATE;
        CLOSE CUCONSULTA;

        PKERRORS.POP;
        UT_TRACE.TRACE('Fin [pkBCCuencobr.GetAccountsByDate]', 1);
    
    EXCEPTION
    
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            
            IF( CUCONSULTA%ISOPEN ) THEN
            
                CLOSE CUCONSULTA;
            
            END IF;
            UT_TRACE.TRACE('LOGIN_DENIED [pkBCCuencobr.GetAccountsByDate]', 1);
            PKERRORS.POP;
            RAISE;
            
        WHEN OTHERS THEN
            
            IF( CUCONSULTA%ISOPEN ) THEN
            
                CLOSE CUCONSULTA;
            
            END IF;
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            UT_TRACE.TRACE('OTHERS [pkBCCuencobr.GetAccountsByDate]', 1);
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END GETACCOUNTSBYDATE;
    
    
















    PROCEDURE GETSUBSCPROTTYPEACC
    (
        INUSUBSCRIPTIONID  IN   SUSCRIPC.SUSCCODI%TYPE,
        INUPRODUCTTYPE     IN   SERVSUSC.SESUNUSE%TYPE,
        OTBACCOUNTBYDATE   OUT  TYTBACCOUNTBYDATE
    )
    IS
        RFACCOUNTS  CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE (' Inicio pkBCCuencobr.GetSubscProtTypeAcc',5);
        UT_TRACE.TRACE (' inuSubscriptionID '||INUSUBSCRIPTIONID,6);
        UT_TRACE.TRACE (' inuProductType '||INUPRODUCTTYPE,6);
        OPEN RFACCOUNTS FOR
            SELECT /*+ ordered
                       use_nl(servsusc, cuencobr)
                       index (servsusc IX_SERVSUSC024)
                       index (cuencobr IX_CUENCOBR09)
                   */
                    CUENCOBR.CUCOCODI,
                    CUENCOBR.CUCOSACU,
                    CUENCOBR.CUCOFEVE
            FROM    SERVSUSC,
                    CUENCOBR /*+ pkBCCuenCobr.GetSubscProtTypeAcc */
            WHERE   SERVSUSC.SESUNUSE = CUENCOBR.CUCONUSE
            AND     SERVSUSC.SESUSUSC = INUSUBSCRIPTIONID
            AND     SERVSUSC.SESUSERV = INUPRODUCTTYPE
            AND     ( NVL(CUCOSACU,0) - NVL(CUCOVRAP,0) -
                    ( CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END ) ) > 0;
                    
        FETCH RFACCOUNTS BULK COLLECT INTO OTBACCOUNTBYDATE;
        CLOSE RFACCOUNTS;

        UT_TRACE.TRACE (' Fin pkBCCuencobr.GetSubscProtTypeAcc',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSE RFACCOUNTS;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSE RFACCOUNTS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSUBSCPROTTYPEACC;




















PROCEDURE GETACCOUNTBYINVOICE
(
    INUINVOICE      IN      CUENCOBR.CUCOFACT%TYPE,
    ONUACCOUNT      OUT     CUENCOBR.CUCOCODI%TYPE
)
IS
    CURSOR  CUACCOUNT IS
    SELECT  /*+ index (CUENCOBR IDXCUCO_RELA) */
            CUCOCODI
    FROM    CUENCOBR /*+ pkBCCuencobr.GetAccountByInvoice */
    WHERE   CUCOFACT = INUINVOICE;
BEGIN

    PKERRORS.PUSH('pkBCCuencobr.GetAccountByInvoice');

    OPEN CUACCOUNT;

    FETCH CUACCOUNT INTO ONUACCOUNT;

    CLOSE CUACCOUNT;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETACCOUNTBYINVOICE;




    




























    PROCEDURE GETBALANCEBYPRODUCT
    (
        INUSESUNUSE     IN  SERVSUSC.SESUNUSE%TYPE,
        IDTCURRENTDATE  IN  CUENCOBR.CUCOFEVE%TYPE,
        ONUSALDOPEND    OUT NUMBER,
        ONUSALDOVENC    OUT NUMBER,
        ODTDATEEXPIR    OUT DATE
    )
    IS
        
        NUSALDOPEND NUMBER := 0;
        NUSALDOVENC NUMBER := 0;
        DTDATEEXPIR DATE;

        
        CURSOR  CUBALANCE
        IS
            SELECT  /*+
                        ordered
                        index_rs_asc(cuencobr IX_CUENCOBR03)
                        index(factura PK_FACTURA)
                    */
                    SUM
                    (
                        NVL( CUCOSACU, 0)
                        -
                        NVL( CUCOVRAP, 0)
                        -
                        ( CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END )
                    ) SALDPEND,
                    SUM
                    (
                        CASE WHEN CUCOFEVE < IDTCURRENTDATE THEN
                            NVL( CUCOSACU, 0)
                            -
                            NVL( CUCOVRAP, 0)
                            -
                            ( CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END )
                        ELSE
                            0
                        END

                    ) SALDVENC,
                    MIN(
                        CASE WHEN FACTFEGE < IDTCURRENTDATE THEN
                            FACTFEGE
                        ELSE
                            NULL
                        END
                    ) FEVE
            FROM    CUENCOBR, FACTURA
                    
            WHERE   CUCONUSE = INUSESUNUSE
            AND     CUCOFACT = FACTCODI
            AND     (
                        NVL( CUCOSACU, 0)
                        -
                        NVL( CUCOVRAP, 0)
                        -
                        ( CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END )
                    ) > 0;
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.GetBalanceByProduct');

        IF ( CUBALANCE%ISOPEN ) THEN
            CLOSE CUBALANCE;
        END IF;

        
        OPEN CUBALANCE;
        FETCH CUBALANCE INTO NUSALDOPEND, NUSALDOVENC, DTDATEEXPIR;
        CLOSE CUBALANCE;
        
        
        ONUSALDOPEND := NUSALDOPEND;
        
        ONUSALDOVENC := NUSALDOVENC;
        
        ODTDATEEXPIR := DTDATEEXPIR;
        
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            IF ( CUBALANCE%ISOPEN ) THEN
                CLOSE CUBALANCE;
            END IF;
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            IF ( CUBALANCE%ISOPEN ) THEN
                CLOSE CUBALANCE;
            END IF;
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            IF ( CUBALANCE%ISOPEN ) THEN
                CLOSE CUBALANCE;
            END IF;
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETBALANCEBYPRODUCT;
    
    
    


















    FUNCTION FNUCLAIMVALUEBYPROD
    (
        INUPRODUCT  IN  CUENCOBR.CUCONUSE%TYPE
    )
    RETURN NUMBER
    IS
        
        NUSALIDA    NUMBER;

        CURSOR CUCLAIMVALUE
        IS
            SELECT  /*+
                        index( CUENCOBR IX_CUENCOBR03 )
                    */
                    SUM (
                        NVL( CUCOVRAP, 0)
                        +
                        ( CASE WHEN CUCOVARE > 0 THEN CUCOVARE ELSE 0 END )
                    )
            FROM    CUENCOBR
                    
            WHERE   CUCONUSE = INUPRODUCT;
    BEGIN
        PKERRORS.PUSH('pkBCCuencobr.fnuClaimValueByProd');

        IF CUCLAIMVALUE%ISOPEN THEN
            CLOSE CUCLAIMVALUE;
        END IF;

        OPEN CUCLAIMVALUE;
        FETCH CUCLAIMVALUE INTO NUSALIDA;
        CLOSE CUCLAIMVALUE;

        PKERRORS.POP;

        RETURN( NVL(NUSALIDA, 0) );

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            IF CUCLAIMVALUE%ISOPEN THEN
                CLOSE CUCLAIMVALUE;
            END IF;
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            IF CUCLAIMVALUE%ISOPEN THEN
                CLOSE CUCLAIMVALUE;
            END IF;
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            IF CUCLAIMVALUE%ISOPEN THEN
                CLOSE CUCLAIMVALUE;
            END IF;
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END FNUCLAIMVALUEBYPROD;

    
























    PROCEDURE GETPRODUCTTOTALVALUE
    (
        INUPRODUCT       IN  CUENCOBR.CUCONUSE%TYPE,
        ONUSTANDBALANCE  OUT NUMBER,
        ONUCLAIMVALUE    OUT NUMBER,
        ONUNONAPPLIEDPAY OUT NUMBER,
        ONUTOTALVALUE    OUT NUMBER,
        ONUEXPTOTALVAL   OUT NUMBER
    )
    IS

        CURSOR CUTOTALDUEBALANCE
        IS
        SELECT NVL (SUM (NVL (CUCOSACU, 0)), 0) SALPEN,
               NVL (SUM (NVL (CUCOVARE, 0)), 0) CLAIMVALUE,
               NVL (SUM (NVL (CUCOVRAP, 0)), 0) NUVLRR,
               NVL (SUM (NVL (CUCOSACU, 0) - NVL (CUCOVARE, 0) - NVL (CUCOVRAP, 0)), 0) TOTALVALUE,
               NVL (SUM (CASE WHEN TRUNC(CUCOFEVE) < TRUNC(SYSDATE)
                              THEN
                                  (NVL (CUCOSACU, 0) - NVL (CUCOVARE, 0) - NVL (CUCOVRAP, 0))
                              ELSE
                                  0
                         END), 0) EXPTOTALVALUE
          FROM CUENCOBR
         WHERE CUCONUSE = INUPRODUCT;

    BEGIN
    
        PKERRORS.PUSH('pkBCCuencobr.GetProductTotalValue');

        ONUSTANDBALANCE  := 0;
        ONUCLAIMVALUE    := 0;
        ONUNONAPPLIEDPAY := 0;
        ONUTOTALVALUE    := 0;
        ONUEXPTOTALVAL   := 0;

        
        IF CUTOTALDUEBALANCE%ISOPEN THEN
        
            CLOSE CUTOTALDUEBALANCE;
        
        END IF;

        
        OPEN CUTOTALDUEBALANCE;
        FETCH CUTOTALDUEBALANCE INTO ONUSTANDBALANCE, ONUCLAIMVALUE,
                                     ONUNONAPPLIEDPAY, ONUTOTALVALUE,
                                     ONUEXPTOTALVAL;
        CLOSE CUTOTALDUEBALANCE;

        PKERRORS.POP;

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            IF ( CUTOTALDUEBALANCE%ISOPEN ) THEN
                    CLOSE CUTOTALDUEBALANCE;
            END IF;
            PKERRORS.POP;
            RAISE;

        WHEN OTHERS THEN
            
            IF ( CUTOTALDUEBALANCE%ISOPEN ) THEN
                    CLOSE CUTOTALDUEBALANCE;
            END IF;
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETPRODUCTTOTALVALUE;
    
    



















    PROCEDURE GETPRODUCTTOTALVALUENOTCURR
    (
        INUPRODUCT          IN  CUENCOBR.CUCONUSE%TYPE,
        ONUSTANDBALNOTCURR  OUT NUMBER
    )
    IS

        CURSOR CUTOTALDUEBALNOTCURR
        IS
        SELECT NVL (SUM(NVL (CUCOSACU, 0) - NVL (CUCOVARE, 0) - NVL (CUCOVRAP, 0)), 0) EXPTOTALVALUE
          FROM CUENCOBR
         WHERE CUCONUSE = INUPRODUCT
         AND   TRUNC(CUCOFEVE) < TRUNC(SYSDATE);

    BEGIN
    
        PKERRORS.PUSH('pkBCCuencobr.GetProductTotalValueNotCurr');

        ONUSTANDBALNOTCURR  := 0;

        
        IF CUTOTALDUEBALNOTCURR%ISOPEN THEN
        
            CLOSE CUTOTALDUEBALNOTCURR;
        
        END IF;

        
        OPEN CUTOTALDUEBALNOTCURR;
        FETCH CUTOTALDUEBALNOTCURR INTO ONUSTANDBALNOTCURR;
        CLOSE CUTOTALDUEBALNOTCURR;

        PKERRORS.POP;

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            IF ( CUTOTALDUEBALNOTCURR%ISOPEN ) THEN
                    CLOSE CUTOTALDUEBALNOTCURR;
            END IF;
            PKERRORS.POP;
            RAISE;

        WHEN OTHERS THEN
            
            IF ( CUTOTALDUEBALNOTCURR%ISOPEN ) THEN
                    CLOSE CUTOTALDUEBALNOTCURR;
            END IF;
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETPRODUCTTOTALVALUENOTCURR;


BEGIN
    
    GETPARAMETERS;
END PKBCCUENCOBR;