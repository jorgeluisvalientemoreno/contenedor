PACKAGE AB_Boparser
IS














































































































































































































































































    
    
    
    CSBCOMPLESEPARATOR CONSTANT UT_DATATYPES.STYMAXVARCHAR := ', ';

    
    TYPE TYRCVALUESDOMAINTRIGGER IS RECORD
	(
        NUDOMAINVALUEIDNEW      AB_DOMAIN_VALUES.DOMAIN_VALUE_ID%TYPE,
        NUDOMAINCOMPIDNEW       AB_DOMAIN_VALUES.DOMAIN_COMP_ID%TYPE,
        NUDOMAINVALUEFATHERNEW  AB_DOMAIN_VALUES.FATHER_ID%TYPE
	) ;

	TYPE TYTBVALUESDOMAINTRIGGER IS TABLE OF TYRCVALUESDOMAINTRIGGER INDEX BY BINARY_INTEGER;

    TBVALUESDOMAINTRIGGER TYTBVALUESDOMAINTRIGGER;

     TYPE TYRCDOMAINVALUES IS RECORD
    (
        NUDOMAINCOMPID       AB_DOMAIN_COMP.DOMAIN_COMP_ID%TYPE,
        SBDOMAINCOMPNAME     AB_DOMAIN_COMP.NAME_%TYPE,
        NUDOMAINCOMPFATHER   AB_DOMAIN_COMP.FATHER_ID%TYPE,
        NUDOMAINVALUEID      AB_DOMAIN_VALUES.DOMAIN_VALUE_ID%TYPE,
        NUDOMAINVALUEFATHER  AB_DOMAIN_VALUES.FATHER_ID%TYPE,
        SBVALUE              AB_DOMAIN_VALUES.VALUE%TYPE
    );


    TYPE TYTBDOMAINVALUES IS TABLE OF TYRCDOMAINVALUES INDEX BY BINARY_INTEGER;

    TYPE TYRCDIRPARSEADA IS RECORD
    (
        SBDIRFMTOLIBRE    AB_ADDRESS.ADDRESS%TYPE,
        SBDIRPARSEADA     AB_ADDRESS.ADDRESS_PARSED%TYPE,
        SBCOMPLEMENTO     AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE,
        TBDIRECCION       UT_STRING.TYTB_STRPARAMETERS,                
        TBDIREPADRE       UT_STRING.TYTB_STRPARAMETERS,
        TBCOMPLEMENTO     UT_STRING.TYTB_STRPARAMETERS,                
        NUPRIMERAVIA      AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE,  
        NUSEGUNDAVIA      AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE,  
        SBPRIMERAVIA      AB_WAY_BY_LOCATION.DESCRIPTION%TYPE,         
        SBSEGUNDAVIA      AB_WAY_BY_LOCATION.DESCRIPTION%TYPE,         
        NUVIASENGRAMATICA NUMBER,                                      
        NUIDGRAMAPADRE    BD_GRAMATICA.ID_GRAMATICA%TYPE,              
        NUIDGRAMAHJA      BD_GRAMATICA.ID_GRAMATICA_PADRE%TYPE,        
        NUCASA            AB_ADDRESS.HOUSE_NUMBER%TYPE,
        SBCASA            AB_ADDRESS.HOUSE_LETTER%TYPE,
        NUSEGMENTO        NUMBER,
        TBEXITOS          UT_STRING.TYTB_STRPARAMETERS,                
        NUGRAMAEXITOS     BD_GRAMATICA.ID_GRAMATICA%TYPE,              
        NUGEOLOCATION     GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        NUADDRESSID       AB_ADDRESS.ADDRESS_ID%TYPE,
        NUSECTORID        GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        SBBLOCK           AB_BLOCK.DESCRIPTION%TYPE
    );


    TYPE TYTBSYMBOLS IS TABLE OF VARCHAR2(1) INDEX BY BINARY_INTEGER;
    
    
    SUBTYPE STYSBSYMBOL IS AB_TOKEN_HIERARCHY.TOKEN_DOMAIN%TYPE;
    TYPE    TYTBSYMBOL  IS TABLE OF STYSBSYMBOL INDEX BY STYSBSYMBOL;

    SUBTYPE STYVAR1000 IS VARCHAR2(1000);

	
    FUNCTION FSBVERSION  RETURN UT_DATATYPES.STYSAOVERSION;

    







    PROCEDURE OBTIENEDIRECCION
    (
        ITBDIRGRAMA     IN  UT_STRING.TYTB_STRPARAMETERS,
        ITBCOMPLEMENTO  IN  UT_STRING.TYTB_STRPARAMETERS,
        OSBDIRECCION    OUT NOCOPY AB_ADDRESS.ADDRESS%TYPE,
        OSBCOMPLEMENTO  OUT NOCOPY AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE,
        ONUCASA         OUT NOCOPY AB_ADDRESS.HOUSE_NUMBER%TYPE,
        OSBCASA         OUT NOCOPY AB_ADDRESS.HOUSE_LETTER%TYPE,
        OSBBLOCK        OUT NOCOPY AB_BLOCK.DESCRIPTION%TYPE
    );


    















	


    
    
    
    PROCEDURE CHECKSYNTAX
    (
        ISBDIRECCION       IN            AB_ADDRESS.ADDRESS%TYPE,
        INUGEOLOCATION     IN            GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        ORCDIRPARSEADA     IN OUT NOCOPY TYRCDIRPARSEADA,
        ISBUSECACHE        IN            VARCHAR2 DEFAULT 'Y',
        ISGSHAPE           IN            AB_ADDRESS.SHAPE%TYPE DEFAULT NULL
    );

    



    PROCEDURE CHECKSYNTAX
    (
        ADDRESS           IN VARCHAR2,
        INUGEOLOCATION     IN NUMBER,
        ADDRESSPARSED     OUT VARCHAR2,
        NUERRORCODE       OUT NUMBER,
        SBERRORMESSAGE    OUT VARCHAR2
    );


    



    PROCEDURE INSERTADDRESS
    (
        INUGEOLOCATIONID  IN     AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS        IN     AB_ADDRESS.ADDRESS%TYPE,
        INUNEIGHBORTID    IN     AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE,
        ISBISURBAN        IN     AB_ADDRESS.IS_URBAN%TYPE,
        IONUPARSER_ID     IN OUT NOCOPY AB_ADDRESS.ADDRESS_ID%TYPE,
        OSBDIRPARSEADA    OUT NOCOPY  AB_ADDRESS.ADDRESS_PARSED%TYPE,
        ISCHILDADDRESS    IN     VARCHAR2 DEFAULT 'Y',
        ISBVERIFIED       IN     AB_ADDRESS.VERIFIED%TYPE DEFAULT 'N',
        ISGSHAPE          IN     AB_ADDRESS.SHAPE%TYPE DEFAULT NULL,
        INUUPDADDRESSID   IN    AB_ADDRESS.ADDRESS_ID%TYPE DEFAULT NULL
    );


    




	


    




    FUNCTION  FSBDIRSUGERIDA
    (
        INUGEOLOCATIONID  IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBDIRFMTOLIBRE   IN AB_ADDRESS.ADDRESS%TYPE
    )
    RETURN AB_ADDRESS.ADDRESS%TYPE;


    






    FUNCTION CHECKIFADDRESSEXISTSINDB
    (
        ISBADDRESS        IN  AB_ADDRESS.ADDRESS%TYPE,
        INUGEOLOCATION    IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        NUERRORCODE       OUT NOCOPY NUMBER,
        SBERRORMESSAGE    OUT NOCOPY VARCHAR2
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE;

    






    FUNCTION CHECKIFADDRESSEXISTSINDB
    (
        ISBADDRESS        IN  AB_ADDRESS.ADDRESS%TYPE,
        INUGEOLOCATION    IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE;

    



    FUNCTION FBLCONTAINSSYMBOL
    (
        ISBINPUTSTRING IN UT_DATATYPES.STYMAXVARCHAR,
        IBLIGDEFHOUSENUMBER IN UT_DATATYPES.STYBOOLEAN DEFAULT FALSE
    )
    RETURN UT_DATATYPES.STYBOOLEAN;

    




    PROCEDURE VALIDANOMBREVIA
    (
        ISBNOMBREVIA IN AB_ADDRESS.DESCRIPTION%TYPE
    );

    




    FUNCTION FSBOBTVALORTOKENSDOMICILIOS
    (
        INUIDGEOLOC         IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBDIRECCION        IN  AB_ADDRESS.ADDRESS%TYPE,
        ISBTOKENFILTRO      IN  VARCHAR2
    ) RETURN VARCHAR2;

    




    PROCEDURE COMPLETAREGISDIR
    (
        INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBISURBAN       IN VARCHAR2,
        ISGSHAPE         IN AB_ADDRESS.SHAPE%TYPE,
        IRCOLDADDRESS    IN OUT NOCOPY DAAB_ADDRESS.STYAB_ADDRESS,
        IONUPARSER_ID    IN OUT NOCOPY AB_ADDRESS.ADDRESS_ID%TYPE,
        IRCDIRPARSEADA   IN TYRCDIRPARSEADA,
        ORCDIR           IN OUT NOCOPY DAAB_ADDRESS.STYAB_ADDRESS,
        INUNEIGHBORTHOOD IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    );

    




    PROCEDURE VALIDATERURALADDRESS
    (
        ISBADDRESS          IN  AB_ADDRESS.ADDRESS_PARSED%TYPE,
        INUGEOLOCATIONID    IN  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        ISBISURBAN          IN  AB_ADDRESS.IS_URBAN%TYPE,
        OSBVALID            OUT NOCOPY AB_ADDRESS.IS_VALID%TYPE,
        ORCDIRPARSEADA      OUT NOCOPY TYRCDIRPARSEADA,
        ISCHILDADDRESS      IN  VARCHAR2 DEFAULT 'Y',
        ISGSHAPE            IN  AB_ADDRESS.SHAPE%TYPE DEFAULT NULL
    );

    FUNCTION FSBGETADDRESSTOKENVALUE
    (
        ISBADDRESS      IN AB_ADDRESS.ADDRESS%TYPE,
        ISBTOKEN        IN VARCHAR2

    ) RETURN VARCHAR2;


    PROCEDURE  FIXSPACES
    (
        IOSBTEXT IN OUT NOCOPY VARCHAR2
    );

    



    PROCEDURE INSADDRESSTRANSACTION
    (
        INUGEOLOCATIONID        IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS              IN AB_ADDRESS.ADDRESS%TYPE,
        INUNEIGHBORTID          IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE,
        ISBISURBAN              IN AB_ADDRESS.IS_URBAN%TYPE,
        INUPREVIOUSVALUE        IN AB_ADDRESS.PREVIOUS_VALUE%TYPE,
        ISBCOMMENT              IN AB_ADDRESS.DESCRIPTION%TYPE,
        IONUPARSER_ID           IN OUT NOCOPY AB_ADDRESS.ADDRESS_ID%TYPE
    );

    



    PROCEDURE GETVALUEDOMAIN
    (
        ISBTAGCOMPOSITION   IN   AB_DOMAIN_COMP.NAME_%TYPE,
        OSBVALUE            OUT  AB_DOMAIN_VALUES.VALUE%TYPE
    );

    





    FUNCTION FNUFINDADDRESS
    (
        ISBADDRESS        IN AB_ADDRESS.ADDRESS_PARSED%TYPE,
        INUGEOLOCATIONID  IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBCOMPLEMENT     IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE DEFAULT NULL
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE;

    




    FUNCTION OBJCHECKADDRESSEXISTS
    (
        ISBADDRESS        IN  AB_ADDRESS.ADDRESS%TYPE,
        INUGEOLOCATION    IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE;
    
    






    PROCEDURE VALIDATESYMBOL
    (
        ISBSYMBOL         IN UT_DATATYPES.STYMAXVARCHAR
    );

    




    FUNCTION FSBFORMATODIR
    (
        ISBFORMATOPALA      IN  VARCHAR2
    )
    RETURN UT_DATATYPES.STYMAXVARCHAR;

    







    FUNCTION FSBHOUSENUMSYMBOL
    RETURN AB_TOKEN_HIERARCHY.TOKEN_DOMAIN%TYPE;
    
    




    PROCEDURE SUGGESTADDRESS
    (
        IUNGEOLOC  IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS IN AB_ADDRESS.ADDRESS_PARSED%TYPE,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    );
    
    







    FUNCTION FNUADDRESSIDINDB
    (
        ISBADDRESS        IN UT_DATATYPES.STYMAXVARCHAR,
        INUGEOLOCATIONID  IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE;
    
END AB_BOPARSER;
PACKAGE BODY AB_Boparser
IS














































































































































































































































































    
    
    
    
    CSBVERSION                 CONSTANT UT_DATATYPES.STYSAOVERSION  := 'SAO556168';
    CNULONGITUDCASANUMERO      CONSTANT NUMBER(2)     := 5;
    CNULONGITUDDIRECCION       CONSTANT NUMBER(3)     := 200;
    CNULONGITUDCOMPLEMENTO     CONSTANT NUMBER(3)     := 100;

    CSBTOKEN_VIA               CONSTANT VARCHAR2(3)   := 'VIA';
    CSBTOKEN_SECTOR            CONSTANT VARCHAR2(6)   := 'SZ';
    CSBTOKEN_MANZANA           CONSTANT VARCHAR2(2)   := 'MZ';

    CSBSEPARABIERTO1           CONSTANT VARCHAR(1)    := '<';   
    CSBSEPARABIERTO2           CONSTANT VARCHAR(1)    := '[';   
    CSBSEPARCERRADO1           CONSTANT VARCHAR(1)    := '>';   
    CSBSEPARCERRADO2           CONSTANT VARCHAR(1)    := ']';   

    CSBTOKEN_BARRIO            CONSTANT VARCHAR2(3)   := AB_BOCONSTANTS.CSBTOKEN_BARRIO;
    CNUTIPOUBICGEOBARRIO       CONSTANT GE_GEOGRA_LOCA_TYPE.GEOG_LOCA_AREA_TYPE%TYPE := GE_BCGEOGRA_LOCA_TYPE.FNUOBTTIPOUBICACIONTOKEN(CSBTOKEN_BARRIO);

    CNUERRGRAMANODEF           CONSTANT NUMBER(6)     := 4340 ; 
    CNUERRGRAMNOSIMBOLO        CONSTANT NUMBER(6)     := 3797 ; 
    CNUERRGRAMTOKENCOMPLEMENTO CONSTANT NUMBER(6)     := 4313 ; 
    CNUERRDIRNOGRAMA           CONSTANT NUMBER(6)     := 4321 ; 
    CNUGEERRDIRNOGRAMA         CONSTANT NUMBER(6)     := 902881;
    CNUERRTOKENVIAOBLIGATORIO  CONSTANT NUMBER(6)     := 3868 ; 
    CNULONGEXCEDNUMALTURA      CONSTANT NUMBER(6)     := 3961 ; 
    CNULONGEXCEDLETRALTURA     CONSTANT NUMBER(6)     := 3996 ; 
    CNUNOEXISTEVIA             CONSTANT NUMBER(6)     := 4131 ; 
    CNUSEGMENTONOCALCULADO     CONSTANT NUMBER(6)     := 4314 ; 
    CNUNOMBREVIATOKEN          CONSTANT NUMBER(6)     := 4632 ; 
    CNUTOKENNULO               CONSTANT NUMBER(6)     := 9742 ; 
    CNUADDRESSNULL             CONSTANT NUMBER(6)     :=10456 ; 
    CNUISURBANFLAGNULL         CONSTANT NUMBER(6)     :=11521 ; 
    CNULONGITUDCOMPEXCED       CONSTANT NUMBER(6)     := 901924;
    CNULONGITUDDIREXCED        CONSTANT NUMBER(6)     := 901925;
    CSBDOMINIOCOMPLEMENTO      CONSTANT VARCHAR2(18)  := 'ADDRESS_COMPLEMENT';
    CSBSINONIMO_PALABRA_DE_VIA CONSTANT VARCHAR2(30)  := 'WAY_WORD_SYNONYM';
    CSBHOUSENUMBERSIMBOL       CONSTANT AB_TOKEN_HIERARCHY.TOKEN_DOMAIN%TYPE := AB_BCPARSER.FSBHOUSENUMBERDOMAIN;

    CSBSEMINORMALIZED          CONSTANT VARCHAR2(3)   := 'M';   
    CNUERRCOMPLEMENT           CONSTANT NUMBER(6)     := 900352; 
    
    CNUERRLONGDOMAIN           CONSTANT NUMBER(6)     := 900348;
    CNUERRCONFFATHER           CONSTANT NUMBER(6)     := 900349;
    CNUERRRANGE                CONSTANT NUMBER(6)     := 900350;
    CNUERRORFATHERTYPE         CONSTANT NUMBER(6)     := 900413;  
    CNUERRORALTERN             CONSTANT NUMBER(6)     := 901737;  
    
    CSBYES                     CONSTANT VARCHAR2(1)   := GE_BOCONSTANTS.CSBYES;
    CSBNO                      CONSTANT VARCHAR2(1)   := GE_BOCONSTANTS.CSBNO;

    
    CSBDEF_HOUSE_SYMBOL        CONSTANT STYSBSYMBOL   := AB_BCPARSER.FSBDEFHOUSESYMBOL;

    
    CNUNOWAIT                  CONSTANT NUMBER(1)     := 1;
    CNUADDRESSNOTEXISTS        CONSTANT NUMBER(1)     := -1;

    CNUERRTOKENNOEXISTE        CONSTANT NUMBER(6)     := 4367 ; 

    
    
    
    CNUSYMBOLCONTAINED         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 905346;
    
    
    
    
    TYPE TYRCSIMBOLOGRA IS RECORD
    (
        SBSIMBOLO           VARCHAR2(100),
        SBESOBLIGATORIO     VARCHAR2(1)
    );

    TYPE TYTBSIMBOLOS IS TABLE OF TYRCSIMBOLOGRA INDEX BY BINARY_INTEGER;

    TYPE TYRCGRAMATICA IS RECORD
    (
        ID_GRAMATICA                BD_GRAMATICA.ID_GRAMATICA%TYPE,
        ID_GRAMATICA_PADRE          BD_GRAMATICA.ID_GRAMATICA_PADRE%TYPE,
        GRAMATICAENTERA             BD_GRAMATICA.GRAMATICA%TYPE,
        SBTBSIMBOLOS                TYTBSIMBOLOS,
        NUCANTIDADVIAS              NUMBER,
        ROOTGRAMMAR                 VARCHAR2(1)
    );



    TYPE TYTBGRAMATICA IS TABLE OF TYRCGRAMATICA INDEX BY BINARY_INTEGER;
	

    TYPE TYRCTOKEN IS RECORD
    (
        SBROOTTOKEN                 AB_TOKEN_HIERARCHY.TOKEN_HIERARCHY_ID%TYPE,
        SBTOKENDOMAIN               AB_TOKEN_HIERARCHY.TOKEN_DOMAIN%TYPE,
        NUHIERARCHY                 AB_TOKEN_HIERARCHY.HIERARCHY%TYPE,
        NUDOMAINID                  AB_TOKEN_HIERARCHY.DOMAIN_ID%TYPE
    );
    
    TYPE TYTBTOKENS IS TABLE OF TYRCTOKEN INDEX BY VARCHAR2(100);


    
    
    

    SBVALID_ADDRESS            VARCHAR2(1);

    NULASTFATHERADDRESSID   AB_ADDRESS.ADDRESS_ID%TYPE;

    
    TBGGRAMATICA               TYTBGRAMATICA;
    BLGRAMATICACARGADA         BOOLEAN := FALSE;
    
    BLGRSECTOR                 BOOLEAN;
    
    BLGRVIAS                   BOOLEAN;

    
    
    RCCACHEDIRPARSEADA         TYRCDIRPARSEADA;

    
    GTBSYMBOLS                 TYTBSYMBOLS;

    
    BLSYMBOLS                  BOOLEAN               := TRUE;

    
    BLGRAMVIASOK              BOOLEAN               := TRUE;

    
    BLISDOMAIN                BOOLEAN               := FALSE;

    
    TBDOMAINVALUES             TYTBDOMAINVALUES;

    
    GTBALLTOKENS               TYTBTOKENS;


	
    
    
    
    FUNCTION FSBVERSION  RETURN UT_DATATYPES.STYSAOVERSION IS
    BEGIN
        RETURN CSBVERSION;
    END;

    
    
    
    
    PROCEDURE DESPLIEGATOKENS
    (
        ITBTOKENS IN UT_STRING.TYTB_STRPARAMETERS
    );
    PROCEDURE DESPLIEGAGRAMATICA
    (
        IRCGRAMATICA IN TYRCGRAMATICA
    );
    PROCEDURE VALIDACANTVIAS
    (
        INUVIASENGRAMATICA IN NUMBER,
        ISBDIRECCION       IN VARCHAR2,
        INUPRIMERAVIA      IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE,
        INUSEGUNDAVIA      IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE,
        ISBPRIMERAVIA      IN AB_WAY_BY_LOCATION.DESCRIPTION%TYPE,
        ISBSEGUNDAVIA      IN AB_WAY_BY_LOCATION.DESCRIPTION%TYPE,
        INUGEOLOCATION     IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    );

    PROCEDURE SEPARACOMPLEMENTO
    (
        IOTBDIRECCION   IN OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS,
        OTBCOMPLEMENTO  OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS
    );

    PROCEDURE RETTOKENS
    (
        ISBDIRECCION    IN  AB_ADDRESS.ADDRESS%TYPE,
        OTBDIRECCION    OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS
    );
    PROCEDURE GETSYMBOLS
    (
        IOTBSYMBOLS IN OUT NOCOPY TYTBSYMBOLS
    );
    PROCEDURE VALIDANULIDADTOKEN
    (
        IOTBTOKENS      IN OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS
    );
    FUNCTION FSBISROOTGRAMMAR( INUGRAMMARID IN BD_GRAMATICA.ID_GRAMATICA%TYPE )
    RETURN VARCHAR2;

    FUNCTION FNUGETGRAMMARINDEXBYID( INUGRAMMARID IN BD_GRAMATICA.ID_GRAMATICA%TYPE)
    RETURN BINARY_INTEGER;

    FUNCTION FNUPREVIOUSGRAMMARLEVEL( INUGRAMMARID IN BD_GRAMATICA.ID_GRAMATICA%TYPE )
    RETURN BINARY_INTEGER;

    FUNCTION FSBTOKENBASE
    (
        ISBTOKEN    IN VARCHAR2
    )
    RETURN VARCHAR2;

    PROCEDURE LOADTOKENS;

    FUNCTION FBLESCOMPLEMENTO
    (
        ISBSIMBOLO    IN  AB_TOKEN_HIERARCHY.TOKEN_HIERARCHY_ID%TYPE,
        ONUHIERARCHY  OUT AB_TOKEN_HIERARCHY.HIERARCHY%TYPE
    ) RETURN BOOLEAN;

    FUNCTION FNUDOMAINID
    (
        ISBSIMBOLO    IN  AB_TOKEN_HIERARCHY.TOKEN_HIERARCHY_ID%TYPE
    )
    RETURN AB_TOKEN_HIERARCHY.DOMAIN_ID%TYPE;

    FUNCTION FBLESSINONIMOPALABRAVIA
    (
        ISBTOKEN IN VARCHAR2,
        OSBTOKENPPAL OUT VARCHAR2
    )
    RETURN BOOLEAN;

    FUNCTION FBLISHOUSENUMBERSIMBOL
    (
        ISBTOKEN     IN  STYVAR1000
    )
    RETURN BOOLEAN;

    
    



    
    

    
    
    













    FUNCTION FBLESTOKEN
    (
        ISBTOKEN        IN VARCHAR2
    )
    RETURN BOOLEAN
    IS
    BEGIN
        LOADTOKENS;

        RETURN GTBALLTOKENS.EXISTS( ISBTOKEN )
               AND GTBALLTOKENS( ISBTOKEN ).SBTOKENDOMAIN != CSBSINONIMO_PALABRA_DE_VIA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLESTOKEN;


    















    PROCEDURE  FIXSPACES
    (
        IOSBTEXT IN OUT NOCOPY VARCHAR2
    )
    IS
    BEGIN

        IOSBTEXT :=TRIM(REGEXP_REPLACE(IOSBTEXT,'\s+',' '));

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FIXSPACES;

    


































    FUNCTION FSBFORMATODIR
    (
        ISBFORMATOPALA      IN  VARCHAR2
    )
    RETURN UT_DATATYPES.STYMAXVARCHAR
    IS
        SBFORMATOPALABRA  VARCHAR2(2000);

        NUINDEX           BINARY_INTEGER;
    BEGIN

        UT_TRACE.TRACE('Inicia AB_BOParser.fsbformatoDir', 2);

        GETSYMBOLS(GTBSYMBOLS);
        UT_TRACE.TRACE('Simbolos cargados en memoria :'||GTBSYMBOLS.COUNT, 2);

        SBFORMATOPALABRA    := ISBFORMATOPALA;

        NUINDEX := GTBSYMBOLS.FIRST;
        LOOP
            EXIT WHEN NUINDEX IS NULL;
            UT_TRACE.TRACE('Reemplazando {'||GTBSYMBOLS(NUINDEX)||'} por { '||GTBSYMBOLS(NUINDEX)||' }',2);
            SBFORMATOPALABRA    := UT_STRING.STRREPLACE(SBFORMATOPALABRA,GTBSYMBOLS(NUINDEX),' '||GTBSYMBOLS(NUINDEX)||' ');

            NUINDEX := GTBSYMBOLS.NEXT(NUINDEX);
        END LOOP;

        SBFORMATOPALABRA    := UT_STRING.STRREPLACE(SBFORMATOPALABRA,CHR(9) ,' ');   
        SBFORMATOPALABRA    := UT_STRING.STRREPLACE(SBFORMATOPALABRA,CHR(10),' ');   
        SBFORMATOPALABRA    := UT_STRING.STRREPLACE(SBFORMATOPALABRA,CHR(13),' ');   

        FOR NUIDX IN 1..10 LOOP
            SBFORMATOPALABRA    := UT_STRING.STRREPLACE(SBFORMATOPALABRA,CHR(32),' ');   
        END LOOP;

        
        FIXSPACES( SBFORMATOPALABRA );

        
        SBFORMATOPALABRA    := UT_STRING.STRREPLACE(SBFORMATOPALABRA,'PO BOX','PO_BOX');

        IF LENGTH(SBFORMATOPALABRA) > CNULONGITUDDIRECCION THEN
            
            ERRORS.SETERROR(CNULONGITUDDIREXCED, CNULONGITUDDIRECCION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Direcci�n con formato['||SBFORMATOPALABRA||']',2);
        UT_TRACE.TRACE('END AB_BOParser.fsbformatoDir', 2);

        RETURN SBFORMATOPALABRA;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBFORMATODIR;


    













    FUNCTION OBTIENESEPARADOR
    (
        NUINDICEST1         IN  NUMBER,
        SBGRAMATICA         IN  BD_GRAMATICA.GRAMATICA%TYPE,
        SBABIERTOCERRADO    IN  VARCHAR2,
        SBSEPARATOR         OUT NOCOPY VARCHAR2
    )
    RETURN  NUMBER
    IS
        NUID    NUMBER;
        NUID2   NUMBER;
    BEGIN

        
        IF (SBABIERTOCERRADO = 'A') THEN
            
            NUID    := INSTR(SBGRAMATICA,CSBSEPARABIERTO1,NUINDICEST1,1);
            NUID2   := INSTR(SBGRAMATICA,CSBSEPARABIERTO2,NUINDICEST1,1);

            IF ( NUID > 0 AND (NUID < NUID2 OR NUID2 = 0) ) THEN
                SBSEPARATOR := CSBSEPARABIERTO1;
                RETURN NUID;
            ELSIF ( NUID2 > 0 AND (NUID2 < NUID OR NUID = 0) ) THEN
                SBSEPARATOR := CSBSEPARABIERTO2;
                RETURN NUID2;
            ELSE
                
                
                ERRORS.SETERROR(CNUERRGRAMANODEF, SBGRAMATICA);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
         ELSIF ( SBABIERTOCERRADO = 'C' ) THEN
            
            NUID    := INSTR(SBGRAMATICA,CSBSEPARCERRADO1,NUINDICEST1,1);
            NUID2   := INSTR(SBGRAMATICA,CSBSEPARCERRADO2,NUINDICEST1,1);

            IF (NUID > 0 AND (NUID < NUID2 OR NUID2 = 0) ) THEN
                SBSEPARATOR := CSBSEPARCERRADO1;
                RETURN NUID;
            ELSIF ( NUID2 > 0 AND (NUID2 < NUID OR NUID = 0) ) THEN
                SBSEPARATOR := CSBSEPARCERRADO2;
                RETURN NUID2;
            ELSE
                
                
                ERRORS.SETERROR(CNUERRGRAMANODEF, SBGRAMATICA);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        RETURN 0;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTIENESEPARADOR;

    



















    PROCEDURE PROSIMBOLOGRAMA
    (
        ISBGRAMATICA     IN  BD_GRAMATICA.GRAMATICA%TYPE,
        OTBTOKENSGRAMA   OUT NOCOPY TYTBSIMBOLOS,
        ONUVIAS          OUT NOCOPY NUMBER,
        ONUSECTOR        OUT NOCOPY NUMBER
    )
    IS
        SBGRAMATICA     BD_GRAMATICA.GRAMATICA%TYPE;
        TBTOKENSGRAMA   TYTBSIMBOLOS;
        NUINDICEST1     NUMBER  := 1;   
        NUINDICEST2     NUMBER  := 1;   
        SBSEPARATOR1    VARCHAR2(1);    
        SBSEPARATOR2    VARCHAR2(1);    
        NUINDICE        NUMBER := 1;    
        SBSIMBOLO       AB_TOKEN_HIERARCHY.TOKEN_HIERARCHY_ID%TYPE;
        NUDUMMY         AB_TOKEN_HIERARCHY.HIERARCHY%TYPE;

    BEGIN
        UT_TRACE.TRACE('INICIA AB_Boparser.proSimboloGrama',20);
        SBGRAMATICA := TRIM(ISBGRAMATICA);

        ONUVIAS     := 0;
        ONUSECTOR   := 0;

        
        
        
        

        NUINDICEST1  := OBTIENESEPARADOR(NUINDICEST1,SBGRAMATICA,'A',SBSEPARATOR1); 
        NUINDICEST2  := OBTIENESEPARADOR(NUINDICEST1,SBGRAMATICA,'C',SBSEPARATOR2); 

        LOOP
            IF (SBSEPARATOR1 = CSBSEPARABIERTO1 AND SBSEPARATOR2 = CSBSEPARCERRADO1 ) THEN
                TBTOKENSGRAMA(NUINDICE).SBESOBLIGATORIO := 'Y'; 
            ELSIF(SBSEPARATOR1 = CSBSEPARABIERTO2 AND SBSEPARATOR2 = CSBSEPARCERRADO2 ) THEN
                TBTOKENSGRAMA(NUINDICE).SBESOBLIGATORIO := 'N'; 
            ELSE
                
                
                ERRORS.SETERROR(CNUERRGRAMANODEF, SBGRAMATICA);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            SBSIMBOLO   := SUBSTR(SBGRAMATICA,NUINDICEST1 + 1, NUINDICEST2 - NUINDICEST1 - 1);
            UT_TRACE.TRACE('Simbolo ['||SBSIMBOLO||']',4);

            
            
            IF ( NOT FBLESTOKEN(SBSIMBOLO)) THEN
                ERRORS.SETERROR(CNUERRGRAMNOSIMBOLO, SBGRAMATICA);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            IF (FBLESCOMPLEMENTO(SBSIMBOLO,NUDUMMY)) THEN
                
                ERRORS.SETERROR(CNUERRGRAMTOKENCOMPLEMENTO, SBGRAMATICA||'|'||SBSIMBOLO);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            TBTOKENSGRAMA(NUINDICE).SBSIMBOLO   := SBSIMBOLO;

            IF SBSIMBOLO = CSBTOKEN_VIA THEN
                IF  TBTOKENSGRAMA(NUINDICE).SBESOBLIGATORIO='Y' THEN
                    
                    ERRORS.SETERROR(CNUERRTOKENVIAOBLIGATORIO,SBGRAMATICA);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

                ONUVIAS := ONUVIAS + 1;
            ELSIF SBSIMBOLO = CSBTOKEN_SECTOR THEN
                ONUSECTOR := ONUSECTOR + 1;
            END IF;

            
            EXIT WHEN NUINDICEST2  >=  LENGTH(SBGRAMATICA);
            NUINDICEST1  := OBTIENESEPARADOR(NUINDICEST2,SBGRAMATICA,'A',SBSEPARATOR1);
            NUINDICEST2  := OBTIENESEPARADOR(NUINDICEST1,SBGRAMATICA,'C',SBSEPARATOR2);
            NUINDICE     := NUINDICE + 1;
        END LOOP;
        OTBTOKENSGRAMA  := TBTOKENSGRAMA;
        UT_TRACE.TRACE('TERMINA AB_Boparser.proSimboloGrama',20);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROSIMBOLOGRAMA;



    




























    PROCEDURE CARGAGRAMATICA
    IS
        TBGRAMATICA     TYTBGRAMATICA;
        NUINDICE        BINARY_INTEGER;
        NUINDPREV       BINARY_INTEGER;
        TBTOKENSGRAMA   TYTBSIMBOLOS;
        NUVIASGRAMA     NUMBER;
        NUSECTORGRAMA   NUMBER;
        SBPREVGRAMMAR   BD_GRAMATICA.GRAMATICA%TYPE;
        
        
    BEGIN
        UT_TRACE.TRACE('INICIA AB_Boparser.cargaGramatica',10);

        NUINDICE := 0;

        IF BLGRAMATICACARGADA THEN
            UT_TRACE.TRACE('Utilizando gramatica de cache',2);
            UT_TRACE.TRACE('FIN AB_Boparser.cargaGramatica',10);
            RETURN;
        END IF;

        
        
        BLGRSECTOR  := FALSE;
        BLGRVIAS    := FALSE;

        UT_TRACE.TRACE('Cargando gramatica a cache',2);

        
        FOR RCGRAMATICA IN AB_BCPARSER.CUGRAMATICA LOOP
            NUINDICE := NUINDICE + 1;

            
            RCGRAMATICA.GRAMATICA := REPLACE(RCGRAMATICA.GRAMATICA,' ','');

            
            IF RCGRAMATICA.ID_GRAMATICA_PADRE IS NULL THEN
                
                TBGGRAMATICA(NUINDICE).ROOTGRAMMAR := CSBYES;

                
                FOR NUINDPREV IN REVERSE 1..(NUINDICE - 1) LOOP
                    IF TBGGRAMATICA.EXISTS(NUINDPREV)
                       AND TBGGRAMATICA(NUINDPREV).ID_GRAMATICA_PADRE IS NULL
                    THEN
                        SBPREVGRAMMAR := TBGGRAMATICA(NUINDPREV).GRAMATICAENTERA;

                        
                        
                        
                        IF INSTR(RCGRAMATICA.GRAMATICA,SBPREVGRAMMAR,1) = 1 THEN
                            TBGGRAMATICA(NUINDICE).ROOTGRAMMAR := CSBNO;
                            EXIT;
                        END IF;
                    END IF;
                END LOOP;
            ELSE
                TBGGRAMATICA(NUINDICE).ROOTGRAMMAR := CSBNO;
            END IF;

            TBGGRAMATICA(NUINDICE).ID_GRAMATICA          := RCGRAMATICA.ID_GRAMATICA;
            TBGGRAMATICA(NUINDICE).ID_GRAMATICA_PADRE    := RCGRAMATICA.ID_GRAMATICA_PADRE;
            
            
            PROSIMBOLOGRAMA(RCGRAMATICA.GRAMATICA , TBTOKENSGRAMA, NUVIASGRAMA, NUSECTORGRAMA);

            IF NUVIASGRAMA>0 THEN
                BLGRVIAS := TRUE;
            END IF;
            IF NUSECTORGRAMA>0 THEN
                BLGRSECTOR := TRUE;
            END IF;

            TBGGRAMATICA(NUINDICE).SBTBSIMBOLOS          := TBTOKENSGRAMA;
            TBGGRAMATICA(NUINDICE).GRAMATICAENTERA       := RCGRAMATICA.GRAMATICA;
            TBGGRAMATICA(NUINDICE).NUCANTIDADVIAS        := NUVIASGRAMA;

            DESPLIEGAGRAMATICA(TBGGRAMATICA(NUINDICE));

        END LOOP;

        BLGRAMATICACARGADA := TRUE;


        UT_TRACE.TRACE('FIN AB_Boparser.cargaGramatica',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CARGAGRAMATICA;

    




















    PROCEDURE CONSTRUYEDIRPADRE
    (
        INUID_GRAMAPADRE     IN  BD_GRAMATICA.ID_GRAMATICA_PADRE%TYPE,
        ITBDIRPARSEADA       IN  UT_STRING.TYTB_STRPARAMETERS,
        OTBDIRGRAMAPADRE     OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS
    )
    IS
        SBGRAMATICA         BD_GRAMATICA.GRAMATICA%TYPE;
        TBTOKENSGRAMAPADRE  TYTBSIMBOLOS;
        TBDIRGRAMAPADRE     UT_STRING.TYTB_STRPARAMETERS;
        NUVIASGRAMA         NUMBER;
        NUSECTORGRAMA       NUMBER;

        TBAUXDIRGRAMA       UT_STRING.TYTB_STRPARAMETERS;
        N                   BINARY_INTEGER;
        J                   BINARY_INTEGER;
    BEGIN
        SBGRAMATICA := DABD_GRAMATICA.FSBGETGRAMATICA(INUID_GRAMAPADRE);
        PROSIMBOLOGRAMA(SBGRAMATICA,TBTOKENSGRAMAPADRE,NUVIASGRAMA,NUSECTORGRAMA);

        TBAUXDIRGRAMA  :=  ITBDIRPARSEADA;

        IF TBTOKENSGRAMAPADRE.FIRST IS NOT NULL THEN
            N := TBTOKENSGRAMAPADRE.FIRST;
            LOOP
                EXIT WHEN N IS NULL;

                
                J := TBAUXDIRGRAMA.FIRST;
                LOOP
                    EXIT WHEN J IS NULL;

                    IF( TBAUXDIRGRAMA(J).SBPARAMETER = TBTOKENSGRAMAPADRE(N).SBSIMBOLO ) THEN

                        TBDIRGRAMAPADRE(N).SBPARAMETER  := TBTOKENSGRAMAPADRE(N).SBSIMBOLO;
                        TBDIRGRAMAPADRE(N).SBVALUE      := TBAUXDIRGRAMA(J).SBVALUE;

                        TBAUXDIRGRAMA.DELETE(J);
                        EXIT;
                    END IF;

                    J := TBAUXDIRGRAMA.NEXT(J);
                END LOOP;

                N:= TBTOKENSGRAMAPADRE.NEXT(N);
            END LOOP;
        END IF;
        OTBDIRGRAMAPADRE    := TBDIRGRAMAPADRE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CONSTRUYEDIRPADRE;




    













    FUNCTION FBLINICIANUMERO
    (
        ISBPALABRA IN VARCHAR2
    )
    RETURN BOOLEAN
    IS
        BLOK BOOLEAN;
    BEGIN
        UT_TRACE.TRACE('Verificando si ['||ISBPALABRA||'] empieza por numero',10);
        IF ISBPALABRA IS NOT NULL THEN
            BLOK := SUBSTR(ISBPALABRA,1,1) IN ('0','1','2','3','4','5','6','7','8','9');
        ELSE
            BLOK := TRUE;
        END IF;

        RETURN BLOK;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    























    PROCEDURE PARTICIONARTOKEN
    (
        INUUBIGEOGRA  IN  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        ISBVALORTOKEN IN  VARCHAR2,
        OSBVALOR1     OUT NOCOPY VARCHAR2,
        OSBVALOR2     OUT NOCOPY VARCHAR2,
        ONUFIRSTWAY   OUT NOCOPY AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE
    )
    IS
        SBVALOR            AB_ADDRESS.ADDRESS%TYPE;
		TBVALUES           UT_STRING.TYTB_STRING;
		BLENCONTROVIA      BOOLEAN := FALSE;
		NUFIRSTINDEX       NUMBER      ;
		SBAUX              VARCHAR2(1000);
		SBVALORTOKEN       AB_ADDRESS.ADDRESS%TYPE;
		SBVALORPPAL        AB_ADDRESS.ADDRESS%TYPE;
		NUPOSINIVALOR1     NUMBER;

    BEGIN
        SBVALORTOKEN := ISBVALORTOKEN;

        UT_TRACE.TRACE('Intenta particionar token_value: ['||SBVALORTOKEN||']',4);

        OSBVALOR1 := '';
        OSBVALOR2 := '';

        
        UT_STRING.EXTSTRING(SBVALORTOKEN,' ',TBVALUES);

        IF TBVALUES.COUNT>0 THEN

            
            FOR I IN REVERSE TBVALUES.FIRST..TBVALUES.LAST LOOP
                SBVALOR := NULL;
                FOR J IN TBVALUES.FIRST..I LOOP
                    SBVALOR := SBVALOR || ' ' || TBVALUES(J);
                END LOOP;

                SBVALOR := TRIM(SBVALOR);

                UT_TRACE.TRACE('Izquierda: Buscando en vias y/o sinonimos : ['||SBVALOR||']',4);

                ONUFIRSTWAY := AB_BCPARSER.FNUBUSCAVIA(SBVALOR,INUUBIGEOGRA,SBVALORPPAL);

                
                IF ONUFIRSTWAY IS NOT NULL AND SBVALOR||'a' != SBVALORPPAL||'a' THEN
                    UT_TRACE.TRACE('a) Reemplazando en ['||SBVALORTOKEN||'] sinonimo ['||SBVALOR||'] por ['||TRIM(SBVALORPPAL)||']',4);
                    SBVALORTOKEN := TRIM(REPLACE(SBVALORTOKEN, SBVALOR, SBVALORPPAL));
                    SBVALOR := SBVALORPPAL;
                END IF;

                EXIT WHEN ONUFIRSTWAY IS NOT NULL;
            END LOOP;

            
            IF ONUFIRSTWAY IS NOT NULL AND SBVALOR||'a' != SBVALORPPAL||'a' THEN
                UT_TRACE.TRACE('b) Reemplazando en ['||SBVALORTOKEN||']['||SBVALOR||'] por ['||SBVALORPPAL||']',4);
                SBVALORTOKEN := REPLACE(SBVALORTOKEN, SBVALOR, SBVALORPPAL);
                SBVALOR := SBVALORPPAL;
            END IF;

            
            IF ONUFIRSTWAY IS NOT NULL THEN
                NUPOSINIVALOR1 := INSTR(SBVALORTOKEN,SBVALOR);

                IF  NUPOSINIVALOR1 = 1 THEN
                    OSBVALOR1 := SUBSTR(SBVALORTOKEN,NUPOSINIVALOR1,LENGTH(SBVALOR));
                    OSBVALOR2 := SUBSTR(SBVALORTOKEN,NUPOSINIVALOR1+LENGTH(SBVALOR));
                ELSIF NUPOSINIVALOR1 > 1 THEN
                    OSBVALOR1 := SUBSTR(SBVALORTOKEN,1,NUPOSINIVALOR1-1);
                    OSBVALOR2 := SUBSTR(SBVALORTOKEN,NUPOSINIVALOR1);
                END IF;

                OSBVALOR1 := TRIM(OSBVALOR1);
                OSBVALOR2 := TRIM(OSBVALOR2);

                UT_TRACE.TRACE('Particiona valor via ['||OSBVALOR1||']['||OSBVALOR2||']',4);

            ELSE
                OSBVALOR1 := SBVALORTOKEN;
            END IF;
        END IF; 

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PARTICIONARTOKEN;


    



















    PROCEDURE INSERTARTOKEN
    (
        ITBDIRECCION        IN  OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS,
        NUINDEXDIR          IN  NUMBER,
        SBPARAMETRO         IN  VARCHAR2,
        SBVALOR             IN  VARCHAR2
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Insertando token ['||NVL(SBPARAMETRO,'?')||'='||SBVALOR||']',4);
        IF ITBDIRECCION.COUNT>0 THEN
            IF NUINDEXDIR>0 AND NUINDEXDIR<=ITBDIRECCION.LAST THEN
                FOR NUINDEX IN REVERSE NUINDEXDIR..ITBDIRECCION.LAST  LOOP
                    IF ITBDIRECCION.EXISTS(NUINDEX) THEN
                        
                        IF NUINDEX = ITBDIRECCION.LAST THEN
                            ITBDIRECCION(NUINDEX+1) := ITBDIRECCION(NUINDEX);
                        ELSE
                            ITBDIRECCION(ITBDIRECCION.NEXT(NUINDEX)) := ITBDIRECCION(NUINDEX);
                        END IF;
                    END IF;
                END LOOP;
                ITBDIRECCION(NUINDEXDIR).SBPARAMETER := SBPARAMETRO;
                ITBDIRECCION(NUINDEXDIR).SBVALUE := SBVALOR;
            END IF;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSERTARTOKEN;


    
















    FUNCTION FSBCOMPLETARVIA
    (
        INUGEOLOC         IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        INUFIRSTWAY       IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE,
        ISBVALORSIMBOLDIR IN VARCHAR2
    )
    RETURN VARCHAR2
    IS
         SBDESC AB_WAY_TYPE.DESCRIPTION%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_Boparser.fsbCompletarVia('||INUGEOLOC||','||INUFIRSTWAY||','''||ISBVALORSIMBOLDIR||''')',10);

        IF INUFIRSTWAY IS NOT NULL THEN 

            FOR RC IN AB_BCPARSER.CUCRUCES( INUGEOLOC, INUFIRSTWAY ) LOOP
                SBDESC := RC.DESCRIPTION||' ';
            END LOOP;
        END IF;

        UT_TRACE.TRACE('Resultado completar via:['||TRIM(SBDESC||ISBVALORSIMBOLDIR)||']',5);

        UT_TRACE.TRACE('FIN AB_Boparser.fsbCompletarVia',10);
        RETURN TRIM(SBDESC||ISBVALORSIMBOLDIR);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    












    PROCEDURE ADICIONATOKENEXITOSO
    (
        ISBPARAMETER IN VARCHAR2,
        ISBVALUE     IN VARCHAR2,
        IOTBEXITOS   IN OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS
    )
    IS
        NUINDEX BINARY_INTEGER;
    BEGIN
        NUINDEX := IOTBEXITOS.COUNT;
        
        IF ISBVALUE IS NOT NULL THEN
            NUINDEX := NUINDEX + 1;
            IOTBEXITOS(NUINDEX).SBPARAMETER := ISBPARAMETER;
            IOTBEXITOS(NUINDEX).SBVALUE     := ISBVALUE;
        ELSE
        
        
            IF NUINDEX>0 THEN
                
                IF IOTBEXITOS(NUINDEX).SBVALUE IS NOT NULL THEN
                    NUINDEX := NUINDEX + 1;
                    IOTBEXITOS(NUINDEX).SBPARAMETER := ISBPARAMETER;
                    IOTBEXITOS(NUINDEX).SBVALUE     := ISBVALUE;
                END IF;
            END IF;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    













    FUNCTION FBLHASPOSSIBLECONFLICT
    (
        ITBDIRECCION        IN  UT_STRING.TYTB_STRPARAMETERS,
        INUGEOGRAPHLOC      IN  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    )
    RETURN UT_DATATYPES.STYBOOLEAN
    IS
        BLNAMEINWAY     UT_DATATYPES.STYBOOLEAN := FALSE;
        NUINDEX         UT_DATATYPES.STYNUMBERINDEX;
    BEGIN

        UT_TRACE.TRACE('BEGIN AB_BOPARSER.fblHasPossibleConflict', 5);

        NUINDEX := ITBDIRECCION.FIRST;

        LOOP
            EXIT WHEN NUINDEX IS NULL OR BLNAMEINWAY;

            IF (ITBDIRECCION(NUINDEX).SBPARAMETER = CSBTOKEN_SECTOR) THEN
                BLNAMEINWAY := AB_BCPARSER.FBLNAMEINWAY(ITBDIRECCION(NUINDEX).SBVALUE, INUGEOGRAPHLOC);
            END IF;

            NUINDEX := ITBDIRECCION.NEXT(NUINDEX);
        END LOOP;

        UT_TRACE.TRACE('END AB_BOPARSER.fblHasPossibleConflict', 5);
        RETURN BLNAMEINWAY;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPARSER.fblHasPossibleConflict', 5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPARSER.fblHasPossibleConflict', 5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FBLHASPOSSIBLECONFLICT;


    




























































    PROCEDURE BUSCACOINCIDENCIA
    (
        INUUBICGEO          IN              GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        ISBDIRECCION        IN              AB_ADDRESS.ADDRESS%TYPE,
        IBLUSESECTOR        IN              UT_DATATYPES.STYBOOLEAN,
        ORCDIRPARSEADA      IN OUT NOCOPY   TYRCDIRPARSEADA
    )
    IS
        SBTBSIMBOGRAMA      TYTBSIMBOLOS;
        BLCOINCIDENCIA      BOOLEAN := FALSE;
        TBDIRGRAMANULL      UT_STRING.TYTB_STRPARAMETERS;
        TBCONINCIDENCIAS    UT_STRING.TYTB_STRING;

        TBAUXEXITOS         UT_STRING.TYTB_STRPARAMETERS;
        TBNULLEXITOS        UT_STRING.TYTB_STRPARAMETERS;

        NUVIASPROCESADAS    NUMBER;

        SBSIMBOLDIR         VARCHAR2(100);
        NUINDEXDIR          NUMBER;

        NUCOINCIDE          NUMBER  := 0;

        SBVALOR1            AB_ADDRESS.ADDRESS%TYPE;
        SBVALOR2            AB_ADDRESS.ADDRESS%TYPE;

        SBVALORVIAPPAL      AB_WAY_BY_LOCATION.DESCRIPTION%TYPE;

        
        
        BLDERECHA           BOOLEAN;

        
        NUINDGRAMA          BINARY_INTEGER;
        
        NUINDSIMBGRAMA      BINARY_INTEGER;

        
        
        
        BLFINARRAY          BOOLEAN;

        
        BLSECTOR            BOOLEAN;

        
























        PROCEDURE ENCONTRARSECTORIZQ
        (
            INUGEOLOCBASE       IN  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
            ISBVALUETOCHECK     IN  AB_BOPARSER.STYVAR1000,
            OSBVALUELEFT        OUT AB_BOPARSER.STYVAR1000,
            OSBVALUERIGHT       OUT AB_BOPARSER.STYVAR1000,
            ONUSECTORFOUNDID    OUT GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
            IOBLENCONTROBARRIO  IN OUT NOCOPY BOOLEAN
        )
        IS
            
    		TBVALUES           UT_STRING.TYTB_STRING;
    		
            SBSTRINPROCCESS    STYVAR1000;
            SBUNKNOWN          STYVAR1000;
            SBUNKNOWNLEFT      STYVAR1000;
            SBUNKNOWNRIGHT     STYVAR1000;

            NUCHILDSECTOR      GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        BEGIN
            UT_TRACE.TRACE('INICIO EncontrarSectorIzq: ['||ISBVALUETOCHECK||']',5);

            
            UT_STRING.EXTSTRING(ISBVALUETOCHECK,' ',TBVALUES);

            
            OSBVALUELEFT      := NULL;
            OSBVALUERIGHT     := NULL;
            ONUSECTORFOUNDID  := NULL;

            IF TBVALUES.COUNT>0 THEN
                
                
                
                
                

                
                FOR NUINDLASTVALUE IN REVERSE TBVALUES.FIRST..TBVALUES.LAST LOOP
                    
                    SBSTRINPROCCESS := NULL;
                    FOR NUINDFIRSTVALUE IN TBVALUES.FIRST..NUINDLASTVALUE LOOP
                        SBSTRINPROCCESS := SBSTRINPROCCESS || ' ' || TBVALUES(NUINDFIRSTVALUE);
                    END LOOP;

                    SBSTRINPROCCESS := TRIM(SBSTRINPROCCESS);

                    UT_TRACE.TRACE('Buscando barrio o subdivisi�n en : ['||SBSTRINPROCCESS||']',5);

                    
                    
                    ONUSECTORFOUNDID := AB_BCPARSER.FNUBUSCASECTOR
                                        (
                                            INUGEOLOCBASE,
                                            CNUTIPOUBICGEOBARRIO,
                                            SBSTRINPROCCESS,
                                            IOBLENCONTROBARRIO
                                        );

                    
                    IF ONUSECTORFOUNDID IS NULL THEN
                        
                        NULL;
                    ELSE
                    
                        IOBLENCONTROBARRIO := TRUE;
                        UT_TRACE.TRACE('Encontr� barrio o subdivisi�n en : ['||SBSTRINPROCCESS||']',5);
                        
                        IF ISBVALUETOCHECK||'a' = SBSTRINPROCCESS||'a' THEN
                        
                        
                            
                            OSBVALUELEFT     := SBSTRINPROCCESS;
                            OSBVALUERIGHT    := NULL;
                            
                        ELSE
                        
                        
                            
                            SBUNKNOWN := TRIM(SUBSTR(ISBVALUETOCHECK,LENGTH(SBSTRINPROCCESS)+1));
                            ENCONTRARSECTORIZQ
                            (
                                ONUSECTORFOUNDID,
                                SBUNKNOWN,
                                SBUNKNOWNLEFT,
                                SBUNKNOWNRIGHT,
                                NUCHILDSECTOR,
                                IOBLENCONTROBARRIO
                            );
                            
                            IF NUCHILDSECTOR IS NOT NULL THEN
                                
                                
                                
                                OSBVALUELEFT  := SBSTRINPROCCESS || ' ' ||SBUNKNOWNLEFT;
                                OSBVALUERIGHT := SBUNKNOWNRIGHT;
                                ONUSECTORFOUNDID := NUCHILDSECTOR;
                            ELSE
                            
                                
                                OSBVALUELEFT := SBSTRINPROCCESS;
                                OSBVALUERIGHT := SBUNKNOWN;
                                
                            END IF;
                        END IF;
                    END IF;

                    
                    EXIT WHEN ONUSECTORFOUNDID IS NOT NULL;
                END LOOP;

            END IF; 

            UT_TRACE.TRACE('FIN EncontrarSectorIzq osbValueLeft=['||OSBVALUELEFT||'] osbValueRight=['||OSBVALUERIGHT||']' ,5);
        END ENCONTRARSECTORIZQ;

        
























        PROCEDURE ENCONTRARSECTOR
        (
            INUGEOLOCBASE       IN   GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
            ISBVALUETOCHECK     IN   AB_BOPARSER.STYVAR1000,
            ONUSECTORID         OUT  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
            IOBLENCONTROBARRIO  IN OUT NOCOPY BOOLEAN
        )
        IS
            
    		TBVALUES      UT_STRING.TYTB_STRING;
            SBVALUELEFT   AB_BOPARSER.STYVAR1000;
            SBVALUERIGHT  AB_BOPARSER.STYVAR1000;
            NUSECTORID    GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
            NUBEGININDEX  BINARY_INTEGER;
            SBVALUE       AB_BOPARSER.STYVAR1000;
        BEGIN
            UT_TRACE.TRACE('INICIO EncontrarSector inuGeoLocBase='||INUGEOLOCBASE||'isbValueToCheck=['||ISBVALUETOCHECK||']',4);
            
            UT_STRING.EXTSTRING(ISBVALUETOCHECK,' ',TBVALUES);

            NUBEGININDEX := TBVALUES.FIRST;
            LOOP
                
                EXIT WHEN NUBEGININDEX IS NULL OR BLSECTOR;

                
                SBVALUE := NULL;
                FOR J IN NUBEGININDEX..TBVALUES.LAST LOOP
                    SBVALUE := SBVALUE || ' ' || TBVALUES(J);
                END LOOP;

                SBVALUE := TRIM(SBVALUE);

                UT_TRACE.TRACE('Buscando sector en : ['||SBVALUE||']',4);
                ENCONTRARSECTORIZQ
                (
                    INUGEOLOCBASE,
                    SBVALUE,
                    SBVALUELEFT,
                    SBVALUERIGHT,
                    ONUSECTORID,
                    IOBLENCONTROBARRIO
                );
                UT_TRACE.TRACE('Buscando sector en - fin Busqueda',4);

                IF ONUSECTORID IS NOT NULL THEN
                    IF SBVALUE||'a' =  ISBVALUETOCHECK||'a' THEN
                        IF SBVALUERIGHT IS NULL THEN
                            UT_TRACE.TRACE(' Caso 4 [sector]',4);
                            
                            
                            ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER := CSBTOKEN_SECTOR;
                            BLSECTOR := TRUE;
                        ELSE
                            UT_TRACE.TRACE(' Caso 2 [sector][ ? ]',4);
                            
                            
                            ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER := NULL;
                            ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE := SBVALUERIGHT;
                            
                            INSERTARTOKEN(ORCDIRPARSEADA.TBDIRECCION,NUINDEXDIR,CSBTOKEN_SECTOR,SBVALUELEFT);
                            BLSECTOR := TRUE;
                        END IF;
                    ELSE
                        IF SBVALUERIGHT IS NULL THEN
                            UT_TRACE.TRACE(' Caso 3 [ ? ][sector]',4);
                            
                            
                            ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER := CSBTOKEN_SECTOR;
                            ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE := SBVALUELEFT ;
                            
                            SBVALUELEFT := TRIM(SUBSTR(ISBVALUETOCHECK,1,INSTR(ISBVALUETOCHECK,SBVALUE)-1));
                            INSERTARTOKEN(ORCDIRPARSEADA.TBDIRECCION,NUINDEXDIR,NULL,SBVALUELEFT);
                            BLSECTOR := TRUE;
                        ELSE
                            UT_TRACE.TRACE(' Caso 1 [ ? ][sector][ ? ]',4);
                            
                            
                            ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER := NULL;
                            ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE := SBVALUERIGHT;
                            
                            INSERTARTOKEN(ORCDIRPARSEADA.TBDIRECCION,NUINDEXDIR,CSBTOKEN_SECTOR,SBVALUELEFT);
                            
                            SBVALUELEFT := TRIM(SUBSTR(ISBVALUETOCHECK,1,INSTR(ISBVALUETOCHECK,SBVALUE)-1));
                            INSERTARTOKEN(ORCDIRPARSEADA.TBDIRECCION,NUINDEXDIR,NULL,SBVALUELEFT);
                            BLSECTOR := TRUE;
                        END IF;
                    END IF;
                END IF;

                NUBEGININDEX := TBVALUES.NEXT(NUBEGININDEX);
            END LOOP;
            UT_TRACE.TRACE('FIN EncontrarSector',4);
        END ENCONTRARSECTOR;

        














        PROCEDURE PROCESARSECTOR
        IS
            SBVALUELEFT         AB_BOPARSER.STYVAR1000;
            SBVALUERIGHT        AB_BOPARSER.STYVAR1000;
            NUSECTORID          GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
            BLENCONTROBARRIO    BOOLEAN;

        BEGIN
            UT_TRACE.TRACE('INICIO ProcesarSector',4);
            NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.FIRST;

            
            BLENCONTROBARRIO := FALSE;

            IF BLSECTOR THEN
                UT_TRACE.TRACE('nuIndexDir=['||NUINDEXDIR||'] blSector=TRUE',4);
            ELSE
                UT_TRACE.TRACE('nuIndexDir=['||NUINDEXDIR||'] blSector=FALSE',4);
            END IF;

            LOOP
                EXIT WHEN NUINDEXDIR IS NULL OR BLSECTOR;

                
                SBSIMBOLDIR  := ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER;

                
                SBSIMBOLDIR := NVL( SBSIMBOLDIR, ' ');

                
                
                IF SBSIMBOLDIR IN ( ' ', CSBTOKEN_SECTOR, CSBTOKEN_VIA ) THEN
                    ENCONTRARSECTOR
                    (
                        INUUBICGEO,
                        ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE,
                        NUSECTORID,
                        BLENCONTROBARRIO
                    );
                END IF;

                NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.NEXT( NUINDEXDIR );
            END LOOP;

            IF NUSECTORID IS NOT NULL THEN
                ORCDIRPARSEADA.NUSECTORID := NUSECTORID;
            END IF;

            UT_TRACE.TRACE('Sector =>['||NUSECTORID||']',4);

            UT_TRACE.TRACE('FIN ProcesarSector',4);
        END PROCESARSECTOR;

        





























        PROCEDURE BUSCARVIA
        IS
            NUWAYFOUNDID    AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE;
            SBVALUETOCHECK  AB_BOPARSER.STYVAR1000;
            NUBEGININDEX    BINARY_INTEGER;
    		TBVALUES        UT_STRING.TYTB_STRING;
            SBVALUE         AB_BOPARSER.STYVAR1000;
            SBVIA           AB_BOPARSER.STYVAR1000;
        BEGIN
            UT_TRACE.TRACE('INICIO AB_BOParser.BuscaCoincidencia.BuscarVia',4);

            
            
            UT_TRACE.TRACE('Token Direccion                : '||NVL(TRIM(SBSIMBOLDIR),'?'),4);

            UT_TRACE.TRACE('Vias procesadas                : '||NUVIASPROCESADAS, 4);
            IF NUVIASPROCESADAS < 2 AND NUINDEXDIR IS NOT NULL THEN
                UT_TRACE.TRACE('Valor token Direccion          : '||ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE,4);

                SBVALUETOCHECK := ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE;

                UT_STRING.EXTSTRING(SBVALUETOCHECK,' ',TBVALUES);

                NUBEGININDEX := TBVALUES.FIRST;
                
                LOOP
                    
                    EXIT WHEN NUBEGININDEX IS NULL OR NUWAYFOUNDID IS NOT NULL;

                    
                    SBVALUE := NULL;
                    FOR J IN NUBEGININDEX..TBVALUES.LAST LOOP
                        SBVALUE := SBVALUE || ' ' || TBVALUES(J);
                    END LOOP;

                    SBVALUE := TRIM(SBVALUE);
                    
                    
                    
                    
                    
                    
                    
                    PARTICIONARTOKEN
                    (
                        INUUBICGEO,
                        SBVALUE,
                        SBVALOR1,
                        SBVALOR2,
                        NUWAYFOUNDID
                    );
                    UT_TRACE.TRACE('sbValor1=['||SBVALOR1||'] sbValor2=['||SBVALOR2||'] ',4);

                    IF NUWAYFOUNDID IS NOT NULL THEN
                        IF SBVALUE||'a' =  SBVALUETOCHECK||'a' THEN
                            IF SBVALOR2 IS NULL THEN
                                
                                
                                ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER := CSBTOKEN_VIA;
                                UT_TRACE.TRACE(' Caso 4 [ VIA ] {'||SBVALUE||'}=>['||NUWAYFOUNDID||']',4);
                                SBVIA := SBVALUE;

                                
                                NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.NEXT(NUINDEXDIR);
                                IF NUINDEXDIR IS NOT NULL THEN
                                    
                                    SBSIMBOLDIR  := NVL(ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER,' ');
                                ELSE
                                    SBSIMBOLDIR := NULL;
                                END IF;
                            ELSE
                                UT_TRACE.TRACE(' Caso 2 [ VIA ][ ? ]',4);
                                
                                
                                ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER := NULL;
                                ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE := SBVALOR2;
                                
                                INSERTARTOKEN(ORCDIRPARSEADA.TBDIRECCION,NUINDEXDIR,CSBTOKEN_VIA,SBVALOR1);
                                SBVIA := SBVALOR1;

                                
                                NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.NEXT(NUINDEXDIR);
                                
                                SBSIMBOLDIR  := NVL(ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER,' ');
                            END IF;
                        ELSE
                            IF SBVALOR2 IS NULL THEN
                                UT_TRACE.TRACE(' Caso 3 [ ? ][ VIA ]',4);
                                
                                ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER := CSBTOKEN_VIA;
                                ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE := SBVALOR1 ;
                                SBVIA := SBVALOR1;
                                
                                SBVALOR1 := TRIM(SUBSTR(SBVALUETOCHECK,1,INSTR(SBVALUETOCHECK,SBVALUE)-1));
                                INSERTARTOKEN(ORCDIRPARSEADA.TBDIRECCION,NUINDEXDIR,NULL,SBVALOR1);

                                
                                NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.NEXT(NUINDEXDIR);
                                
                                SBSIMBOLDIR  := NVL(ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER,' ');
                            ELSE
                                UT_TRACE.TRACE(' Caso 1 [ ? ][ VIA ][ ? ]',4);
                                
                                
                                ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER := NULL;
                                ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE := SBVALOR2;
                                
                                INSERTARTOKEN(ORCDIRPARSEADA.TBDIRECCION,NUINDEXDIR,CSBTOKEN_VIA,SBVALOR1);
                                SBVIA := SBVALOR1;
                                
                                SBVALOR1 := TRIM(SUBSTR(SBVALUETOCHECK,1,INSTR(SBVALUETOCHECK,SBVALUE)-1));
                                INSERTARTOKEN(ORCDIRPARSEADA.TBDIRECCION,NUINDEXDIR,NULL,SBVALOR1);

                                
                                NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.NEXT(NUINDEXDIR);
                                NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.NEXT(NUINDEXDIR);
                                
                                SBSIMBOLDIR  := NVL(ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER,' ');
                            END IF;
                        END IF;

                        IF NUVIASPROCESADAS = 0 THEN
                            ORCDIRPARSEADA.NUPRIMERAVIA := NUWAYFOUNDID;
                            ORCDIRPARSEADA.SBPRIMERAVIA := SBVIA;
                            UT_TRACE.TRACE('PrimeraVia =>'||ORCDIRPARSEADA.NUPRIMERAVIA,4);
                        ELSIF NUVIASPROCESADAS = 1 THEN
                            ORCDIRPARSEADA.NUSEGUNDAVIA := NUWAYFOUNDID;
                            ORCDIRPARSEADA.SBSEGUNDAVIA := SBVIA;
                            UT_TRACE.TRACE('Segunda Via =>'||ORCDIRPARSEADA.NUSEGUNDAVIA,4);
                        END IF;

                        NUVIASPROCESADAS := NUVIASPROCESADAS + 1;
                    ELSE
                        SBVIA := SBVALOR1;
                        UT_TRACE.TRACE('CASO 5 [       ?       ] No encontro v�a ['||SBVIA||']',4);
                        IF NUVIASPROCESADAS = 0 THEN
                            ORCDIRPARSEADA.SBPRIMERAVIA := SBVIA;
                        ELSIF NUVIASPROCESADAS = 1 THEN
                            ORCDIRPARSEADA.SBSEGUNDAVIA := SBVIA;
                        END IF;
                    END IF;

                    NUBEGININDEX := TBVALUES.NEXT(NUBEGININDEX);
                END LOOP;  

            END IF;

            UT_TRACE.TRACE('FIN AB_BOParser.BuscaCoincidencia.BuscarVia',4);
        END BUSCARVIA;

        


















        PROCEDURE COMPLETARSEGUNDAVIA
        IS
        BEGIN
            UT_TRACE.TRACE('INICIO AB_BOParser.BuscaCoincidencia.CompletarSegundaVia',4);
            
            
            
            
            
            
            IF ORCDIRPARSEADA.NUPRIMERAVIA IS NOT NULL
               AND ORCDIRPARSEADA.NUSEGUNDAVIA IS NULL
               AND NUVIASPROCESADAS = 1
               AND SBSIMBOLDIR IN ( ' ', CSBTOKEN_VIA )
               AND FBLINICIANUMERO(TRIM(REPLACE(ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE,'#','')))
            THEN
                ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE :=
                    FSBCOMPLETARVIA
                    (
                      INUUBICGEO,
                      ORCDIRPARSEADA.NUPRIMERAVIA,
                      TRIM(REPLACE(ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE,'#',''))
                    );
            END IF;
            UT_TRACE.TRACE('FIN AB_BOParser.BuscaCoincidencia.CompletarSegundaVia',4);
        END COMPLETARSEGUNDAVIA;

        


















        PROCEDURE COMPARACIONGRAMATICAL
        IS
        BEGIN
            UT_TRACE.TRACE('INICIO Comparaci�n gramatical ['||SBTBSIMBOGRAMA(NUINDSIMBGRAMA).SBSIMBOLO||']['||SBSIMBOLDIR||']',4);
            
            
            
            
            
            IF(
                 ( SBTBSIMBOGRAMA(NUINDSIMBGRAMA).SBSIMBOLO = SBSIMBOLDIR ) OR ( SBSIMBOLDIR = ' ' AND SBTBSIMBOGRAMA(NUINDSIMBGRAMA).SBESOBLIGATORIO = 'N')
              )
            THEN
                
                ADICIONATOKENEXITOSO(SBTBSIMBOGRAMA(NUINDSIMBGRAMA).SBSIMBOLO,ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE,TBAUXEXITOS);

                
                
                IF ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE IS NULL THEN
                    IF NUINDEXDIR = ORCDIRPARSEADA.TBDIRECCION.LAST THEN
                        UT_TRACE.TRACE('Comparacion Gramatical Exitosa!! �ltimo token sin valor',4);
                    ELSE
                        BLCOINCIDENCIA  := FALSE;
                        UT_TRACE.TRACE('Comparacion Gramatical NO exitosa!! El Token '||ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER||' no tiene valor!! ',4);
                    END IF;
                ELSE
                    UT_TRACE.TRACE('Comparacion Gramatical Exitosa!!',4);
                END IF;

            ELSE
                BLCOINCIDENCIA  := FALSE;
                UT_TRACE.TRACE('Comparacion Gramatical NO exitosa!!',4);
            END IF;

            UT_TRACE.TRACE('FIN Comparaci�n gramatical',4);
        END COMPARACIONGRAMATICAL;


        
















        PROCEDURE ACTUALIZAINDICES
        IS
        BEGIN
            NUINDEXDIR     := ORCDIRPARSEADA.TBDIRECCION.NEXT(NUINDEXDIR);
            NUINDSIMBGRAMA := SBTBSIMBOGRAMA.NEXT(NUINDSIMBGRAMA);

            
            IF NUINDEXDIR IS NULL OR NUINDSIMBGRAMA IS NULL THEN

                
                IF  NUINDSIMBGRAMA IS NULL AND NUINDEXDIR IS NOT NULL THEN
                    BLCOINCIDENCIA := FALSE;
                    UT_TRACE.TRACE('Comparacion Gramatical No exitosa, la direcci�n tiene mas tokens que la gramatica!!',4);
                END IF;

                
                IF NUINDSIMBGRAMA IS NOT NULL AND NUINDEXDIR IS NULL THEN
                    BLCOINCIDENCIA := FALSE;
                    UT_TRACE.TRACE('Comparacion Gramatical No exitosa, la gramatica tiene mas tokens que la direccion!!',4);
                END IF;

                BLFINARRAY := TRUE;
            END IF;

        END ACTUALIZAINDICES;

        















        PROCEDURE REEMPLAZOPALABRAS
        IS
            NUINDPALVIA      BINARY_INTEGER;
       		TBPALABRASVIA    UT_STRING.TYTB_STRING;
       		SBPALABRA        VARCHAR2(32767);
       		SBREEMPLAZO      VARCHAR2(32767);
       		SBNUEVOVALORVIA  VARCHAR2(32767);
        BEGIN
            UT_TRACE.TRACE('INICIO AB_BOParser.BuscaCoincidencia.ReemplazoPalabras',4);
            UT_STRING.EXTSTRING(ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE,' ',TBPALABRASVIA);
            NUINDPALVIA := TBPALABRASVIA.FIRST;
            SBNUEVOVALORVIA := '';

            LOOP
                EXIT WHEN NUINDPALVIA IS NULL;

                SBPALABRA := TBPALABRASVIA(NUINDPALVIA);

                IF FBLESSINONIMOPALABRAVIA( SBPALABRA, SBREEMPLAZO ) THEN
                    UT_TRACE.TRACE('Reemplazo de palabras en token [VIA] � en token indeterminado ['|| ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE||']'||
                                   ' ['||SBPALABRA||'] por-> ['||SBREEMPLAZO||']',4);

                    SBPALABRA := UPPER(SBREEMPLAZO);
                END IF;

                SBNUEVOVALORVIA := SBNUEVOVALORVIA||' '||SBPALABRA;

                NUINDPALVIA := TBPALABRASVIA.NEXT(NUINDPALVIA);
            END LOOP;

            SBNUEVOVALORVIA := TRIM(SBNUEVOVALORVIA);
            ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBVALUE := SBNUEVOVALORVIA;
            UT_TRACE.TRACE('FIN AB_BOParser.BuscaCoincidencia.ReemplazoPalabras',4);
        END REEMPLAZOPALABRAS;


        













        PROCEDURE REEMPLAZOPALABRASPRIMERAVIA
        IS

        BEGIN
            UT_TRACE.TRACE('INICIO AB_BOParser.BuscaCoincidencia.ReemplazoPalabrasPrimeraVia',4);
            
            
            IF (
                 NUVIASPROCESADAS = 0 AND
                 ORCDIRPARSEADA.NUPRIMERAVIA IS NULL
                 AND SBSIMBOLDIR IN ( ' ', CSBTOKEN_VIA  )
                 AND ORCDIRPARSEADA.TBDIRECCION.COUNT>0
               )
            THEN
               REEMPLAZOPALABRAS;
            END IF;
            UT_TRACE.TRACE('FIN AB_BOParser.BuscaCoincidencia.ReemplazoPalabrasPrimeraVia',4);
        END REEMPLAZOPALABRASPRIMERAVIA;

        













        PROCEDURE REEMPLAZOPALABRASSEGUNDAVIA
        IS
        BEGIN
            UT_TRACE.TRACE('INICIO AB_BOParser.BuscaCoincidencia.ReemplazoPalabrasSegundaVia',4);
            
            
            IF (
                 NUVIASPROCESADAS = 1
                 AND ORCDIRPARSEADA.NUSEGUNDAVIA IS NULL
                 AND SBSIMBOLDIR IN ( ' ', CSBTOKEN_VIA )
                 AND ORCDIRPARSEADA.TBDIRECCION.COUNT>0
               )
            THEN
                REEMPLAZOPALABRAS;
            END IF;
            UT_TRACE.TRACE('FIN AB_BOParser.BuscaCoincidencia.ReemplazoPalabrasSegundaVia',4);
        END REEMPLAZOPALABRASSEGUNDAVIA;

        

















        PROCEDURE PROCESARVIAS
        IS
        BEGIN
            UT_TRACE.TRACE('INICIO ProcesarVias',4);
            NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.FIRST;

            ORCDIRPARSEADA.NUPRIMERAVIA      := NULL;
            ORCDIRPARSEADA.NUSEGUNDAVIA      := NULL;
            NUVIASPROCESADAS := 0;

            LOOP
                EXIT WHEN NUINDEXDIR IS NULL;

                
                SBSIMBOLDIR  := ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER;

                
                SBSIMBOLDIR := NVL( SBSIMBOLDIR, ' ');

                
                
                IF NUVIASPROCESADAS = 0
                   AND NVL( SBSIMBOLDIR, ' ') = ' '
                THEN
                    REEMPLAZOPALABRASPRIMERAVIA;
                END IF;

                
                IF NUVIASPROCESADAS = 0
                   AND NVL( SBSIMBOLDIR, ' ') = ' '
                THEN
                    BUSCARVIA;
                END IF;

                
                IF NUVIASPROCESADAS = 1
                    AND NVL( SBSIMBOLDIR, ' ') IN ( ' ', CSBTOKEN_VIA )
                THEN
                    COMPLETARSEGUNDAVIA;
                END IF;

                
                
                IF NUVIASPROCESADAS = 1
                   AND NVL( SBSIMBOLDIR, ' ') IN ( ' ', CSBTOKEN_VIA )
                THEN
                    REEMPLAZOPALABRASSEGUNDAVIA;
                END IF;

                
                IF NUVIASPROCESADAS = 1
                   AND NVL( SBSIMBOLDIR, ' ') IN ( ' ', CSBTOKEN_VIA )
                THEN
                    BUSCARVIA;
                END IF;

                NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.NEXT( NUINDEXDIR );
            END LOOP;

            UT_TRACE.TRACE('FIN ProcesarVias',4);
        END PROCESARVIAS;
        

    BEGIN
        UT_TRACE.TRACE('INICIO AB_Boparser.BuscaCoincidencia',2);

        
        BLSECTOR    := FALSE;

        
        RETTOKENS(ISBDIRECCION,ORCDIRPARSEADA.TBDIRECCION);

        
        
        CARGAGRAMATICA;
        UT_TRACE.TRACE('Registros en la gramatica:'||TBGGRAMATICA.COUNT,3);

        
        SEPARACOMPLEMENTO(ORCDIRPARSEADA.TBDIRECCION,ORCDIRPARSEADA.TBCOMPLEMENTO);

        
        IF (BLGRSECTOR AND IBLUSESECTOR) THEN
            PROCESARSECTOR;
        ELSE
            UT_TRACE.TRACE('No se procesar� sectores.',3);
        END IF;

        
        IF BLGRVIAS THEN
            PROCESARVIAS;
        ELSE
            UT_TRACE.TRACE('No se procesar� v�as.',3);
        END IF;

        
        VALIDANULIDADTOKEN(ORCDIRPARSEADA.TBCOMPLEMENTO);
        UT_TRACE.TRACE('Tokens Direcci�n luego de separar complemento.',3);
        DESPLIEGATOKENS(ORCDIRPARSEADA.TBDIRECCION);

        UT_TRACE.TRACE('Tokens Complemento de Direcci�n.',3);
        DESPLIEGATOKENS(ORCDIRPARSEADA.TBCOMPLEMENTO);
        
        NUINDGRAMA := TBGGRAMATICA.FIRST;
        LOOP
            EXIT WHEN NUINDGRAMA IS NULL;

            TBAUXEXITOS := TBNULLEXITOS;

            ORCDIRPARSEADA.NUVIASENGRAMATICA := TBGGRAMATICA(NUINDGRAMA).NUCANTIDADVIAS;

            UT_TRACE.TRACE('===================================================', 3);
            UT_TRACE.TRACE('GRAMATICA {'||TBGGRAMATICA(NUINDGRAMA).ID_GRAMATICA||'} = {'||TBGGRAMATICA(NUINDGRAMA).GRAMATICAENTERA||'}',3);
            SBTBSIMBOGRAMA  := TBGGRAMATICA(NUINDGRAMA).SBTBSIMBOLOS;

            
            
            IF ( SBTBSIMBOGRAMA.COUNT  >= ORCDIRPARSEADA.TBDIRECCION.COUNT
                 AND ORCDIRPARSEADA.TBDIRECCION.COUNT > 0
                 AND TBGGRAMATICA(NUINDGRAMA).ID_GRAMATICA_PADRE IS NOT NULL
               )
            THEN
                BLCOINCIDENCIA  := TRUE;

                NUINDEXDIR := ORCDIRPARSEADA.TBDIRECCION.FIRST;

                

                
                
                BLFINARRAY := FALSE;

                NUINDSIMBGRAMA := SBTBSIMBOGRAMA.FIRST;
                LOOP
                    EXIT WHEN NUINDSIMBGRAMA IS NULL;

                    UT_TRACE.TRACE('-----------------------------------------------', 4);
                    UT_TRACE.TRACE('Token Gramatical               : '||SBTBSIMBOGRAMA(NUINDSIMBGRAMA).SBSIMBOLO, 4);
                    UT_TRACE.TRACE('Numero de vias en la gramatica : '||ORCDIRPARSEADA.NUVIASENGRAMATICA, 4);

                    
                    SBSIMBOLDIR  := ORCDIRPARSEADA.TBDIRECCION(NUINDEXDIR).SBPARAMETER;

                    
                    SBSIMBOLDIR := NVL( SBSIMBOLDIR, ' ');

                    
                    COMPARACIONGRAMATICAL;

                    EXIT WHEN BLCOINCIDENCIA = FALSE;

                    
                    
                    ACTUALIZAINDICES;

                    EXIT WHEN BLFINARRAY;

                END LOOP;  

                IF ORCDIRPARSEADA.TBEXITOS.COUNT < TBAUXEXITOS.COUNT THEN

                    ORCDIRPARSEADA.TBEXITOS := TBAUXEXITOS;
                    ORCDIRPARSEADA.NUGRAMAEXITOS := TBGGRAMATICA(NUINDGRAMA).ID_GRAMATICA_PADRE;
                END IF;

                
                IF (BLCOINCIDENCIA AND TBGGRAMATICA(NUINDGRAMA).ID_GRAMATICA_PADRE IS NOT NULL) THEN
                    NUCOINCIDE  := NUCOINCIDE + 1;

                    TBCONINCIDENCIAS(NUCOINCIDE) := TBGGRAMATICA(NUINDGRAMA).ID_GRAMATICA_PADRE;

                    ORCDIRPARSEADA.NUIDGRAMAHJA  := TBGGRAMATICA(NUINDGRAMA).ID_GRAMATICA;

                    EXIT;
                END IF;

            END IF;

            NUINDGRAMA:= TBGGRAMATICA.NEXT(NUINDGRAMA);

        END LOOP;  


        IF( TBCONINCIDENCIAS.COUNT > 0 ) THEN
            ORCDIRPARSEADA.NUIDGRAMAPADRE := TBCONINCIDENCIAS(NUCOINCIDE);

            UT_TRACE.TRACE('Gramatica hija ok=['||ORCDIRPARSEADA.NUIDGRAMAHJA||']',3);
            UT_TRACE.TRACE('Se encontro coincidencia con la gramatica padre ['||ORCDIRPARSEADA.NUIDGRAMAPADRE||']',3);

            
            IF ((DABD_GRAMATICA.FSBGETCOMPLEMENT(ORCDIRPARSEADA.NUIDGRAMAPADRE) = CSBNO) AND
               ORCDIRPARSEADA.TBCOMPLEMENTO.COUNT > 0) THEN
                 UT_TRACE.TRACE('La gramatica no soporta complemento',3);
                
                ERRORS.SETERROR(CNUERRCOMPLEMENT, DABD_GRAMATICA.FSBGETGRAMATICA(ORCDIRPARSEADA.NUIDGRAMAPADRE));
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        ELSE
            ORCDIRPARSEADA.NUIDGRAMAPADRE := NULL;
        END IF;

        UT_TRACE.TRACE('Tokens de la direccion al finalizar Busca Coincidencia.',3);
        DESPLIEGATOKENS(ORCDIRPARSEADA.TBDIRECCION);
        UT_TRACE.TRACE('Tokens Exitosos al finalizar Busca Coincidencia.',3);
        DESPLIEGATOKENS(ORCDIRPARSEADA.TBEXITOS);

        UT_TRACE.TRACE('FIN AB_Boparser.BuscaCoincidencia',2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR:AB_Boparser.BuscaCoincidencia',2);
            
            BLGRAMVIASOK := FALSE;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS:AB_Boparser.BuscaCoincidencia ||'||SQLERRM,2);
            
            BLGRAMVIASOK := FALSE;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END BUSCACOINCIDENCIA;

    















    PROCEDURE BUSCACOINCIDENCIA
    (
        INUUBICGEO          IN              GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        ISBDIRECCION        IN              AB_ADDRESS.ADDRESS%TYPE,
        ORCDIRPARSEADA      IN OUT NOCOPY   TYRCDIRPARSEADA
    )
    IS

        BLADDRESSCONFLICT   UT_DATATYPES.STYBOOLEAN := FALSE;
        NUERRORCODE         GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBERRORMESSAGE      GE_ERROR_LOG.DESCRIPTION%TYPE;
        RCRECOVERYADDRESS   TYRCDIRPARSEADA;

    BEGIN

        UT_TRACE.TRACE('BEGIN AB_BOPARSER.BuscaCoincidencia', 1);

        BUSCACOINCIDENCIA
            (
                INUUBICGEO,
                ISBDIRECCION,
                TRUE,
                ORCDIRPARSEADA
            );

        
        IF (ORCDIRPARSEADA.NUIDGRAMAPADRE IS NULL AND BLGRSECTOR AND BLGRVIAS) THEN
            BLADDRESSCONFLICT := FBLHASPOSSIBLECONFLICT(ORCDIRPARSEADA.TBDIRECCION, INUUBICGEO);
            IF BLADDRESSCONFLICT THEN

                UT_TRACE.TRACE('Realizando recuperaci�n de error ignorando sector', 2);
                BUSCACOINCIDENCIA
                (
                    INUUBICGEO,
                    ISBDIRECCION,
                    FALSE,
                    RCRECOVERYADDRESS
                );

                ORCDIRPARSEADA := RCRECOVERYADDRESS;

            END IF;
        END IF;

        UT_TRACE.TRACE('END AB_BOPARSER.BuscaCoincidencia', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPARSER.BuscaCoincidencia', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPARSER.BuscaCoincidencia', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END BUSCACOINCIDENCIA;

    











    PROCEDURE DESPLIEGATOKENS
    (
        ITBTOKENS IN UT_STRING.TYTB_STRPARAMETERS
    )
    IS
        NUINDEX       NUMBER;         
    BEGIN
        
        NUINDEX := ITBTOKENS.FIRST;
        UT_TRACE.TRACE('--- Parejas Token Valor ---------------------',3);
        LOOP
            EXIT WHEN NUINDEX IS NULL;
            UT_TRACE.TRACE('['||LPAD(NVL(ITBTOKENS(NUINDEX).SBPARAMETER,'?'),20,' ')||'='||ITBTOKENS(NUINDEX).SBVALUE||']',3);

            NUINDEX := ITBTOKENS.NEXT(NUINDEX);
        END LOOP;
        UT_TRACE.TRACE('--- Fin Parejas Token Valor -----------------',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    






















    PROCEDURE OBTCASALETRANUM
    (
        ISBCASA IN  VARCHAR2,
        ONUCASA OUT NOCOPY AB_ADDRESS.HOUSE_NUMBER%TYPE,
        OSBCASA OUT NOCOPY AB_ADDRESS.HOUSE_LETTER%TYPE
    )
    IS
        NUINDEX  BINARY_INTEGER;
        SBCHAR   CHAR;
        SBNUMERO AB_ADDRESS.HOUSE_LETTER%TYPE;
        SBLETRAS VARCHAR2(200);
        SBCASA   VARCHAR2(200);
        CSBSPACE VARCHAR2(1) := ' ';

    BEGIN
        UT_TRACE.TRACE('Inicio: obtCasaLetraNum('||ISBCASA||',onuCasa,osbCasa)',4);

        SBCASA := TRIM(ISBCASA);

        IF SBCASA IS NULL THEN
            RETURN;
        END IF;

        NUINDEX :=1;

        LOOP
            EXIT WHEN NUINDEX>LENGTH(SBCASA);

            SBCHAR := SUBSTR(SBCASA,NUINDEX,1);
            IF SBCHAR IN ('0','1','2','3','4','5','6','7','8','9')  OR (NUINDEX = 1 AND SBCHAR = '-') THEN
                IF NVL(LENGTH(SBNUMERO),0) < CNULONGITUDCASANUMERO THEN
                    SBNUMERO := SBNUMERO||SBCHAR;
                ELSE
                    
                    ERRORS.SETERROR(CNULONGEXCEDNUMALTURA,ISBCASA);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

            ELSE

                SBLETRAS := TRIM(SUBSTR(SBCASA,NUINDEX));
                NUINDEX := LENGTH(SBCASA);

                IF INSTR(SBLETRAS, CSBSPACE) <> 0 THEN
                    ERRORS.SETERROR(CNUGEERRDIRNOGRAMA);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

                IF LENGTH(SBLETRAS) > CNULONGITUDCASANUMERO THEN
                    ERRORS.SETERROR(CNULONGEXCEDLETRALTURA,ISBCASA);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            END IF;

            NUINDEX := NUINDEX + 1;

        END LOOP;

        IF SBNUMERO IS NOT NULL THEN
            ONUCASA := TO_NUMBER(SBNUMERO);
        END IF;

        IF INSTR(SBLETRAS, CSBSPACE) <> 0 THEN
            ERRORS.SETERROR(CNUGEERRDIRNOGRAMA);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        OSBCASA := SBLETRAS;

        UT_TRACE.TRACE('Fin: obtCasaLetraNum('||ISBCASA||','||ONUCASA||','||OSBCASA||')',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE DESPLIEGAGRAMATICA
    (
        IRCGRAMATICA IN TYRCGRAMATICA
    )
    IS
        NUINDEX       NUMBER;         
    BEGIN
        
        NUINDEX := IRCGRAMATICA.SBTBSIMBOLOS.FIRST;
        UT_TRACE.TRACE('--- << Simbolos Gramaticales de {'||IRCGRAMATICA.GRAMATICAENTERA||'} --BASE:'||IRCGRAMATICA.ROOTGRAMMAR||'-- >>',20);
        LOOP
            EXIT WHEN NUINDEX IS NULL;
            UT_TRACE.TRACE('['||RPAD(IRCGRAMATICA.SBTBSIMBOLOS(NUINDEX).SBSIMBOLO,30,' ')||'|'||IRCGRAMATICA.SBTBSIMBOLOS(NUINDEX).SBESOBLIGATORIO||']',20);

            NUINDEX := IRCGRAMATICA.SBTBSIMBOLOS.NEXT(NUINDEX);
        END LOOP;
        UT_TRACE.TRACE('--- Fin Simbolos Gramaticales ---------------->>',20);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DESPLIEGAGRAMATICA;


    
    
    

    
    
    




































    PROCEDURE OBTIENEDIRECCION
    (
        ITBDIRGRAMA     IN  UT_STRING.TYTB_STRPARAMETERS,
        ITBCOMPLEMENTO  IN  UT_STRING.TYTB_STRPARAMETERS,
        OSBDIRECCION    OUT NOCOPY AB_ADDRESS.ADDRESS%TYPE,
        OSBCOMPLEMENTO  OUT NOCOPY AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE,
        ONUCASA         OUT NOCOPY AB_ADDRESS.HOUSE_NUMBER%TYPE,
        OSBCASA         OUT NOCOPY AB_ADDRESS.HOUSE_LETTER%TYPE,
        OSBBLOCK        OUT NOCOPY AB_BLOCK.DESCRIPTION%TYPE
    )
    IS
        SBDIRECCION     VARCHAR2(4000);
        SBPARAMETER     VARCHAR2(32767);
        NUINDEXCOMP     NUMBER;
        NUINDEX         BINARY_INTEGER;
        SBCOMPLEMENTO   VARCHAR2(4000);
    BEGIN
        UT_TRACE.TRACE('INICIO: ab_boparser.obtienedireccion',2);
        IF ITBDIRGRAMA.COUNT > 0 THEN
            NUINDEX :=  ITBDIRGRAMA.FIRST;
            LOOP
                EXIT WHEN NUINDEX IS NULL;
                IF ITBDIRGRAMA(NUINDEX).SBPARAMETER IN ( CSBTOKEN_VIA, CSBTOKEN_SECTOR ) THEN
                    SBPARAMETER := NULL;
                ELSE
                    SBPARAMETER := ITBDIRGRAMA(NUINDEX).SBPARAMETER|| ' ';
                END IF;

                
                IF FBLISHOUSENUMBERSIMBOL(ITBDIRGRAMA(NUINDEX).SBPARAMETER) THEN
                    
                    OBTCASALETRANUM(ITBDIRGRAMA(NUINDEX).SBVALUE, ONUCASA, OSBCASA );

                    SBDIRECCION := SBDIRECCION || RTRIM( ' ' || SBPARAMETER || TRIM( ONUCASA || ' ' ||OSBCASA) );
                ELSE
                    SBDIRECCION := SBDIRECCION || ' ' || SBPARAMETER || ITBDIRGRAMA(NUINDEX).SBVALUE;
                END IF;

                IF ITBDIRGRAMA(NUINDEX).SBPARAMETER = CSBTOKEN_MANZANA THEN
                    OSBBLOCK := SUBSTR( ITBDIRGRAMA(NUINDEX).SBVALUE, 1, 100);
                END IF;

                NUINDEX := ITBDIRGRAMA.NEXT(NUINDEX);
            END LOOP;
        END IF;

        SBCOMPLEMENTO  := NULL;
        
        NUINDEXCOMP := ITBCOMPLEMENTO.FIRST;
        LOOP
            EXIT WHEN NUINDEXCOMP IS NULL;

            SBDIRECCION := SBDIRECCION  || ' ' || ITBCOMPLEMENTO(NUINDEXCOMP).SBPARAMETER || ' ' || ITBCOMPLEMENTO(NUINDEXCOMP).SBVALUE;

            SBCOMPLEMENTO := SBCOMPLEMENTO || ' ' || ITBCOMPLEMENTO(NUINDEXCOMP).SBPARAMETER || ' ' || ITBCOMPLEMENTO(NUINDEXCOMP).SBVALUE;

            NUINDEXCOMP := ITBCOMPLEMENTO.NEXT(NUINDEXCOMP);
        END LOOP;
        UT_TRACE.TRACE('Complemento de direcci�n {'||SBCOMPLEMENTO||'}',2);
        
        IF (LENGTH(SBCOMPLEMENTO) > CNULONGITUDCOMPLEMENTO ) THEN
            ERRORS.SETERROR(CNULONGITUDCOMPEXCED, CNULONGITUDCOMPLEMENTO);
            RAISE EX.CONTROLLED_ERROR;
        END IF ;
        OSBCOMPLEMENTO := NULL;

        IF LENGTH(SBDIRECCION) > CNULONGITUDDIRECCION THEN
            
            ERRORS.SETERROR(CNULONGITUDDIREXCED, CNULONGITUDDIRECCION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        OSBCOMPLEMENTO := TRIM(SBCOMPLEMENTO);
        OSBDIRECCION    := TRIM(SBDIRECCION);

        UT_TRACE.TRACE('FIN: ab_boparser.obtienedireccion oscasa=['||OSBCASA||'] osbblock=['||OSBBLOCK||']',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTIENEDIRECCION;
    
    
    











































    PROCEDURE RETTOKENS
    (
        ISBDIRECCION    IN  AB_ADDRESS.ADDRESS%TYPE,
        OTBDIRECCION    OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS
    )
	IS
		
		TBVALUES            UT_STRING.TYTB_STRING;
        NUINDEXACTUAL       NUMBER;         
        
        SBTOKEN             AB_ADDRESS.ADDRESS_PARSED%TYPE;
        SBTOKENVALOR        VARCHAR2(2000);
        NUINDICEPARAM       NUMBER  :=  1;  
        
        SBTOKENLAST         AB_ADDRESS.ADDRESS_PARSED%TYPE  := '';
        SBDIRECCCION        AB_ADDRESS.ADDRESS_PARSED%TYPE;
        
        BLIGNOREHOUSESYMBOL UT_DATATYPES.STYBOOLEAN := TRUE;
        
        NUALTPROCESED       BINARY_INTEGER;
        
        NUALTOCCURRENCES    BINARY_INTEGER;
	BEGIN
		
        UT_TRACE.TRACE('INICIO retTokens ('''||ISBDIRECCION||''',. . .)',2);

        
        
        
        SBDIRECCCION    := FSBFORMATODIR(ISBDIRECCION);
        UT_STRING.EXTSTRING(SBDIRECCCION,' ',TBVALUES);

        NUINDEXACTUAL   := TBVALUES.FIRST; 
        SBTOKENVALOR    := '';
        NUINDICEPARAM   := 0;

        
        NUALTOCCURRENCES := LENGTH(SBDIRECCCION) - LENGTH(REPLACE(SBDIRECCCION,CSBDEF_HOUSE_SYMBOL));
        
        NUALTPROCESED   := 0;
        
        
        LOOP
            
            SBTOKEN := TRIM(UPPER(TBVALUES(NUINDEXACTUAL)));

            UT_TRACE.TRACE('Analizando token ('||SBTOKEN||')',3);

            
            IF GTBALLTOKENS.EXISTS(CSBDEF_HOUSE_SYMBOL)
               AND SBTOKEN = CSBDEF_HOUSE_SYMBOL
            THEN
               NUALTPROCESED := NUALTPROCESED + 1;
            END IF;
            
            
            BLIGNOREHOUSESYMBOL := GTBALLTOKENS.EXISTS(CSBDEF_HOUSE_SYMBOL)
                                   AND SBTOKEN = CSBDEF_HOUSE_SYMBOL
                                   AND NUALTPROCESED < NUALTOCCURRENCES;

            
            
            
            
            
            

            IF SBTOKEN = CSBTOKEN_VIA OR NOT FBLESTOKEN (SBTOKEN) OR BLIGNOREHOUSESYMBOL THEN
                
                UT_TRACE.TRACE('Concatenando token ['||SBTOKEN||']',3);
                SBTOKENVALOR := SBTOKENVALOR || ' ' || SBTOKEN ;

                IF LENGTH(SBTOKENVALOR) > CNULONGITUDDIRECCION THEN
                    
                    ERRORS.SETERROR(CNULONGITUDDIREXCED, CNULONGITUDDIRECCION);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

                
                IF (NUINDEXACTUAL = TBVALUES.LAST AND TRIM(SBTOKENVALOR) IS NOT NULL) THEN
                    NUINDICEPARAM := NUINDICEPARAM + 1;
                    OTBDIRECCION(NUINDICEPARAM).SBVALUE := TRIM(SBTOKENVALOR);
                END IF;

            ELSE  
                SBTOKENVALOR    := TRIM(SBTOKENVALOR);
                UT_TRACE.TRACE('Es token ['||SBTOKEN||'] Valor anterior ['||SBTOKENVALOR||'] palabra anterior ['||SBTOKENLAST||']',3);
                
                
                
                IF SBTOKENVALOR IS NOT NULL OR TRIM(SBTOKENLAST) IS NOT NULL  THEN
                    NUINDICEPARAM := NUINDICEPARAM + 1;
                    OTBDIRECCION(NUINDICEPARAM).SBVALUE := SBTOKENVALOR;
                    
                    SBTOKENVALOR    := '';
                END IF;
                
                
                SBTOKEN         := FSBTOKENBASE(SBTOKEN);
                OTBDIRECCION(NUINDICEPARAM + 1).SBPARAMETER := SBTOKEN;
            END IF;

            IF (NUINDEXACTUAL = TBVALUES.LAST ) THEN
                EXIT;
            END IF;

            SBTOKENLAST     := SBTOKEN; 
            NUINDEXACTUAL   := TBVALUES.NEXT(NUINDEXACTUAL);
        END LOOP;

        DESPLIEGATOKENS(OTBDIRECCION);

        UT_TRACE.TRACE('FIN retTokens',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RETTOKENS;

    
    
    















    PROCEDURE VALIDANULIDADTOKEN
    (
        IOTBTOKENS      IN OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS
    )
    IS
       NUINDEX        NUMBER;
    BEGIN
       UT_TRACE.TRACE('Inicio: AB_BOParser.ValidaNulidadToken',4);
       NUINDEX := IOTBTOKENS.FIRST;
       LOOP
          EXIT WHEN NUINDEX IS NULL;
           IF IOTBTOKENS(NUINDEX).SBPARAMETER IS NOT NULL AND
              IOTBTOKENS(NUINDEX).SBVALUE IS NULL AND
              NUINDEX != IOTBTOKENS.LAST
           THEN
              
              ERRORS.SETERROR(CNUTOKENNULO,IOTBTOKENS(NUINDEX).SBPARAMETER);
              RAISE EX.CONTROLLED_ERROR;
           END IF;
           NUINDEX := IOTBTOKENS.NEXT(NUINDEX);
        END LOOP;
        UT_TRACE.TRACE('Fin: AB_BOParser.ValidaNulidadToken',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END VALIDANULIDADTOKEN;






















    PROCEDURE SEPARACOMPLEMENTO
    (
        IOTBDIRECCION   IN OUT NOCOPY UT_STRING.TYTB_STRPARAMETERS,
        OTBCOMPLEMENTO  OUT NOCOPY    UT_STRING.TYTB_STRPARAMETERS
    )
    IS
        NUINDEX        NUMBER;
        NUINDEXCOMP    NUMBER;
        NUINDEXPROXIMO NUMBER;
        NUTOKENORDER   AB_TOKEN_HIERARCHY.HIERARCHY%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio: AB_BOParser.separaComplemento',10);
        NUINDEX := IOTBDIRECCION.FIRST;
        LOOP
            EXIT WHEN NUINDEX IS NULL;

            IF IOTBDIRECCION(NUINDEX).SBPARAMETER IS NOT NULL THEN
                
                
                
                
                
                
                
                IF FBLESCOMPLEMENTO(IOTBDIRECCION(NUINDEX).SBPARAMETER,NUTOKENORDER) THEN
                    UT_TRACE.TRACE('Separando token '||IOTBDIRECCION(NUINDEX).SBPARAMETER||' por ser complemento',3);

                    
                    NUINDEXCOMP := NVL(NUTOKENORDER,0);
                    LOOP
                        EXIT WHEN NOT OTBCOMPLEMENTO.EXISTS(NUINDEXCOMP);
                        NUINDEXCOMP := NUINDEXCOMP + 1;
                    END LOOP;

                    OTBCOMPLEMENTO(NUINDEXCOMP).SBPARAMETER:= IOTBDIRECCION(NUINDEX).SBPARAMETER;
                    OTBCOMPLEMENTO(NUINDEXCOMP).SBVALUE := IOTBDIRECCION(NUINDEX).SBVALUE;
                    NUINDEXPROXIMO := IOTBDIRECCION.NEXT(NUINDEX);
                    IOTBDIRECCION.DELETE(NUINDEX);
                    NUINDEX := NUINDEXPROXIMO;
                ELSE
                    NUINDEX := IOTBDIRECCION.NEXT(NUINDEX);
                END IF;
            ELSE
                NUINDEX := IOTBDIRECCION.NEXT(NUINDEX);
            END IF;

        END LOOP;

        UT_TRACE.TRACE('Fin: AB_BOParser.separaComplemento',10);


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SEPARACOMPLEMENTO;


    














    PROCEDURE GETVALUEDOMAIN
    (
        ISBTAGCOMPOSITION   IN   AB_DOMAIN_COMP.NAME_%TYPE,
        OSBVALUE            OUT  AB_DOMAIN_VALUES.VALUE%TYPE
    )
    IS

        NUDOMAINCOMPID         AB_DOMAIN_COMP.DOMAIN_COMP_ID%TYPE;
        TBRESULTDOMAINCOMP     DAAB_DOMAIN_COMP.TYTBAB_DOMAIN_COMP;

    BEGIN
        UT_TRACE.TRACE('Inicio: AB_BOParser.GetValueDomain',15);

        OSBVALUE := NULL;

        
        IF TBDOMAINVALUES.FIRST IS NOT NULL THEN
            FOR I IN TBDOMAINVALUES.FIRST .. TBDOMAINVALUES.LAST LOOP
                IF TBDOMAINVALUES(I).SBDOMAINCOMPNAME  = ISBTAGCOMPOSITION THEN
                    OSBVALUE := TBDOMAINVALUES(I).SBVALUE;
                    UT_TRACE.TRACE('Tag de Composicion de Dominio [' || OSBVALUE || ']',20);
                    EXIT;
                END IF;
            END LOOP;
        END IF;

        UT_TRACE.TRACE('Fin: AB_BOParser.GetValueDomain',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR: AB_BOParser.GetValueDomain',15);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others: AB_BOParser.GetValueDomain',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE GETINDEXVALUEDOMAIN
    (
        INUDOMAINCOMPID    IN   AB_DOMAIN_COMP.DOMAIN_COMP_ID%TYPE,
        ONUINDEX          OUT  NUMBER
    )
    IS

    BEGIN
        UT_TRACE.TRACE('Inicio: AB_BOParser.GetIndexValueDomain',15);

        ONUINDEX := -1;

        
        IF TBDOMAINVALUES.FIRST IS NOT NULL THEN
            FOR I IN TBDOMAINVALUES.FIRST .. TBDOMAINVALUES.LAST LOOP
                IF INUDOMAINCOMPID = TBDOMAINVALUES(I).NUDOMAINCOMPID THEN
                    ONUINDEX := I;
                    EXIT;
                END IF;
            END LOOP;
        END IF;

        UT_TRACE.TRACE('Fin: AB_BOParser.GetIndexValueDomain',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR: AB_BOParser.GetIndexValueDomain',15);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others: AB_BOParser.GetIndexValueDomain',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    






















    PROCEDURE VALDOMAINTOKEN
    (
        ITBTOKENS      IN UT_STRING.TYTB_STRPARAMETERS
    )
    IS

        
        NUINDEX             BINARY_INTEGER;
        
        NUDOMAINID          AB_DOMAIN.DOMAIN_ID%TYPE;
        
        RFCOMPOSITION       CONSTANTS.TYREFCURSOR;
        
        TBCOMPOSITION       DAAB_DOMAIN_COMP.TYTBAB_DOMAIN_COMP;
        
        NUPOSITION          NUMBER;
        
        SBVALUE             VARCHAR(32000);
        
        NULENGTH            AB_DOMAIN.LENGTH%TYPE;
        NUPROCESSEDVALUEID  AB_DOMAIN_VALUES.DOMAIN_VALUE_ID%TYPE;

        



















        PROCEDURE VALCONFFATHER
        (
           INUDOMAINCOMPID  IN  AB_DOMAIN_COMP.DOMAIN_COMP_ID%TYPE,
           ISBVALUE         IN  VARCHAR2,
           INUFATHERVALUEID IN  AB_DOMAIN_VALUES.DOMAIN_VALUE_ID%TYPE,
           ONUDOMAINVALID   OUT AB_DOMAIN_VALUES.DOMAIN_VALUE_ID%TYPE
        )
        IS

            BLRESULT                  BOOLEAN;

            
            NUDOMAINVALUEID           AB_DOMAIN_VALUES.DOMAIN_VALUE_ID%TYPE;

            
            TBALLDOMAINVALUES         DAAB_DOMAIN_VALUES.TYTBAB_DOMAIN_VALUES;

            NUFATHERDOMAINVALUEID     AB_DOMAIN_VALUES.FATHER_ID%TYPE;
            NUINDEXDOMAINVALUE        NUMBER;
            NUINDEXFATHERDOMAINVALUE  NUMBER;
            RFDOMAINVALUES            CONSTANTS.TYREFCURSOR;

        BEGIN
            UT_TRACE.TRACE('INICIO: ValDomainToken.ValConfFather',3);

            BLRESULT := FALSE;

            GETINDEXVALUEDOMAIN(INUDOMAINCOMPID,NUINDEXDOMAINVALUE);

            RFDOMAINVALUES := AB_BCPARSER.FRFDOMAINVALUES(INUDOMAINCOMPID,ISBVALUE, INUFATHERVALUEID);

            FETCH RFDOMAINVALUES BULK COLLECT INTO TBALLDOMAINVALUES;

            IF RFDOMAINVALUES%ISOPEN THEN
                CLOSE RFDOMAINVALUES;
            END IF;

            
            
            IF TBALLDOMAINVALUES.FIRST IS NOT NULL THEN
                FOR I IN TBALLDOMAINVALUES.FIRST .. TBALLDOMAINVALUES.LAST LOOP

                    
                    NUDOMAINVALUEID := TBALLDOMAINVALUES(I).DOMAIN_VALUE_ID;
                    UT_TRACE.TRACE('Id Valor del Dominio [nuDomainValueId: ' || NUDOMAINVALUEID || ']',3);

                    
                    NUFATHERDOMAINVALUEID := DAAB_DOMAIN_VALUES.FNUGETFATHER_ID(NUDOMAINVALUEID);
                    UT_TRACE.TRACE('Padre del Valor del Dominio [nuFatherDomainValueId: ' || NUFATHERDOMAINVALUEID || ']',3);

                    
                    
                    IF NUFATHERDOMAINVALUEID IS NULL OR TBDOMAINVALUES(NUINDEXDOMAINVALUE).NUDOMAINVALUEFATHER IS NULL THEN
                        TBDOMAINVALUES(NUINDEXDOMAINVALUE).NUDOMAINVALUEID     := NUDOMAINVALUEID;
                        TBDOMAINVALUES(NUINDEXDOMAINVALUE).NUDOMAINVALUEFATHER := NULL;
                        BLRESULT := TRUE;
                        EXIT;
                    ELSE
                        
                        GETINDEXVALUEDOMAIN(TBDOMAINVALUES(NUINDEXDOMAINVALUE).NUDOMAINCOMPFATHER,NUINDEXFATHERDOMAINVALUE);
                        UT_TRACE.TRACE('Padre Real: ' || TBDOMAINVALUES(NUINDEXFATHERDOMAINVALUE).NUDOMAINVALUEID || ']',3);

                        
                        IF NUFATHERDOMAINVALUEID = TBDOMAINVALUES(NUINDEXFATHERDOMAINVALUE).NUDOMAINVALUEID THEN
                            TBDOMAINVALUES(NUINDEXDOMAINVALUE).NUDOMAINVALUEID     := NUDOMAINVALUEID;
                            TBDOMAINVALUES(NUINDEXDOMAINVALUE).NUDOMAINVALUEFATHER := NUFATHERDOMAINVALUEID;
                            BLRESULT := TRUE;
                            EXIT;
                        END IF;
                    END IF;
                END LOOP;
            END IF;

            
            IF NOT BLRESULT THEN
                
                UT_TRACE.TRACE('No existe el valor de dominio indicado para la composicion de dominio',20);
                ERRORS.SETERROR(CNUERRCONFFATHER, DAAB_DOMAIN_COMP.FSBGETNAME_(INUDOMAINCOMPID));
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            ONUDOMAINVALID := NUDOMAINVALUEID;
            UT_TRACE.TRACE('FIN: ValDomainToken.ValConfFather',3);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                UT_TRACE.TRACE('CONTROLLED_ERROR: ValDomainToken.ValConfFather',3);
                IF RFDOMAINVALUES%ISOPEN THEN
                    CLOSE RFDOMAINVALUES;
                END IF;
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                UT_TRACE.TRACE('others: ValDomainToken.ValConfFather',3);
                IF RFDOMAINVALUES%ISOPEN THEN
                    CLOSE RFDOMAINVALUES;
                END IF;
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALCONFFATHER;

        














        PROCEDURE VALRANGE
        (
            INUDOMAINCOMPID   IN AB_DOMAIN_COMP.DOMAIN_COMP_ID%TYPE,
            ISBVALUE          IN VARCHAR2
        )
        IS
            SBVALIDRANGE      AB_DOMAIN_COMP.VALID_RANGE%TYPE;
            TBVALIDRANGE      UT_STRING.TYTB_STRING;
            NUVALUE           NUMBER;
            NUINITIAL         NUMBER;
            NUFINAL           NUMBER;
        BEGIN
            UT_TRACE.TRACE('INICIO: ValDomainToken.ValRange',15);

            
            SBVALIDRANGE := DAAB_DOMAIN_COMP.FSBGETVALID_RANGE(INUDOMAINCOMPID);

            IF  SBVALIDRANGE IS NOT NULL THEN

                
                SBVALIDRANGE := REPLACE(SBVALIDRANGE, ' ', '');

                UT_TRACE.TRACE('Rango ['|| SBVALIDRANGE || ']', 20);

                
                UT_STRING.EXTSTRING(SBVALIDRANGE, '-', TBVALIDRANGE);

                IF TBVALIDRANGE.COUNT = 2 THEN

                    UT_TRACE.TRACE('Numero Inicial: ' || TBVALIDRANGE(1), 20);
                    UT_TRACE.TRACE('Numero Final: ' || TBVALIDRANGE(2), 20);

                    
                    NUVALUE   :=  UT_CONVERT.FNUCHARTONUMBER(ISBVALUE);
                    NUINITIAL :=  UT_CONVERT.FNUCHARTONUMBER(TBVALIDRANGE(1));
                    NUFINAL   :=  UT_CONVERT.FNUCHARTONUMBER(TBVALIDRANGE(2));

                    
                    IF (NUVALUE < NUINITIAL) OR (NUVALUE > NUFINAL) THEN
                        
                        UT_TRACE.TRACE('El valor no est� dentro del rango valido definido para la composicion de dominio',15);
                        ERRORS.SETERROR(CNUERRRANGE,DAAB_DOMAIN_COMP.FSBGETNAME_(INUDOMAINCOMPID));
                        RAISE EX.CONTROLLED_ERROR;
                    END IF;
                ELSE
                    
                     UT_TRACE.TRACE('Error en el rango definido en la BD ',15);
                    ERRORS.SETERROR(CNUERRRANGE,DAAB_DOMAIN_COMP.FSBGETNAME_(INUDOMAINCOMPID));
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            END IF;

            UT_TRACE.TRACE('FIN: ValDomainToken.ValRange',15);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                UT_TRACE.TRACE('CONTROLLED_ERROR: ValDomainToken.ValRange',15);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                UT_TRACE.TRACE('others: ValDomainToken.ValRange',15);
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALRANGE;

        



















        PROCEDURE  VALCONFIGEXPRESSION
        (
            INUDOMAINCOMPID   AB_DOMAIN_COMP.DOMAIN_COMP_ID%TYPE
        )
        IS
            NUCONFIGEXPRESSION  AB_DOMAIN_COMP.CONFIG_EXPRESSION_ID%TYPE;
            NUERRCODE           GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
            SBERRMSG            GE_ERROR_LOG.MESSAGE_ID%TYPE;
        BEGIN
            UT_TRACE.TRACE('INICIO: ValDomainToken.ValConfigExpression',15);

            NUCONFIGEXPRESSION := DAAB_DOMAIN_COMP.FNUGETCONFIG_EXPRESSION_ID(INUDOMAINCOMPID);

            UT_TRACE.TRACE('nuConfigExpression: ' || NUCONFIGEXPRESSION,15);

            IF NUCONFIGEXPRESSION IS NOT NULL THEN

                BEGIN
                    GR_BOCONFIG_EXPRESSION.EXECUTE(NUCONFIGEXPRESSION, NUERRCODE, SBERRMSG);
                EXCEPTION
                   WHEN EX.CONTROLLED_ERROR THEN
                        UT_TRACE.TRACE('CONTROLLED_ERROR Error en Validaci�n de Regla: ValDomainToken.ValConfigExpression',15);
                   WHEN OTHERS THEN
                        UT_TRACE.TRACE('others Error en Validaci�n de Regla: ValDomainToken.ValConfigExpression',15);
                END;

                IF NUERRCODE <> 0 THEN
                    
                    UT_TRACE.TRACE('No cumple con la expresion de validaci�n',15);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

            END IF;

            UT_TRACE.TRACE('FIN: ValDomainToken.ValConfigExpression',15);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                UT_TRACE.TRACE('CONTROLLED_ERROR: ValDomainToken.ValConfigExpression',15);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                UT_TRACE.TRACE('others: ValDomainToken.ValConfigExpression',15);
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALCONFIGEXPRESSION;

    BEGIN
        UT_TRACE.TRACE('Inicio: AB_BOParser.ValDomainToken',2);

        NUPOSITION := 1;
        NUINDEX := 1;


        

        IF ITBTOKENS.COUNT = 1 THEN

            
            NUDOMAINID := FNUDOMAINID(ITBTOKENS(ITBTOKENS.FIRST).SBPARAMETER);

            
            NULENGTH   := DAAB_DOMAIN.FNUGETLENGTH(NUDOMAINID);

            
            IF LENGTH(ITBTOKENS(1).SBVALUE) = NULENGTH THEN

                
                RFCOMPOSITION := AB_BCPARSER.FRFCOMPOSITIONDOMAIN(NUDOMAINID);

                FETCH RFCOMPOSITION BULK COLLECT INTO TBCOMPOSITION;

                IF RFCOMPOSITION%ISOPEN THEN
                    CLOSE RFCOMPOSITION;
                END IF;

                
                IF TBCOMPOSITION.FIRST IS NOT NULL THEN
                    FOR I IN TBCOMPOSITION.FIRST .. TBCOMPOSITION.LAST LOOP

                        SBVALUE := SUBSTR(ITBTOKENS(1).SBVALUE,NUPOSITION, TBCOMPOSITION(I).LENGTH);

                        TBDOMAINVALUES(NUINDEX).NUDOMAINCOMPID      := TBCOMPOSITION(I).DOMAIN_COMP_ID;
                        TBDOMAINVALUES(NUINDEX).SBDOMAINCOMPNAME    := TBCOMPOSITION(I).NAME_;
                        TBDOMAINVALUES(NUINDEX).NUDOMAINCOMPFATHER  := TBCOMPOSITION(I).FATHER_ID;
                        TBDOMAINVALUES(NUINDEX).SBVALUE             := SBVALUE;

                        NUPOSITION := NUPOSITION + TBCOMPOSITION(I).LENGTH;
                        NUINDEX    := NUINDEX + 1;

                    END LOOP;
                END IF;

                
                 IF TBDOMAINVALUES.FIRST IS NOT NULL THEN
                    FOR I IN TBDOMAINVALUES.FIRST .. TBDOMAINVALUES.LAST LOOP

                        UT_TRACE.TRACE('Id Composicion de Dominio : ' || TBDOMAINVALUES(I).NUDOMAINCOMPID,15);
                        UT_TRACE.TRACE('Valor del Token: ' || TBDOMAINVALUES(I).SBVALUE,15);

                        VALRANGE (TBDOMAINVALUES(I).NUDOMAINCOMPID, TBDOMAINVALUES(I).SBVALUE);

                        IF AB_BCPARSER.FBLEXISTDOMAINVALUES(TBDOMAINVALUES(I).NUDOMAINCOMPID) THEN
                        
                            IF TBDOMAINVALUES(I).NUDOMAINCOMPFATHER IS NOT NULL THEN
                                VALCONFFATHER (TBDOMAINVALUES(I).NUDOMAINCOMPID,TBDOMAINVALUES(I).SBVALUE, NUPROCESSEDVALUEID, NUPROCESSEDVALUEID);
                            ELSE
                                VALCONFFATHER (TBDOMAINVALUES(I).NUDOMAINCOMPID,TBDOMAINVALUES(I).SBVALUE, NULL, NUPROCESSEDVALUEID);
                            END IF;
                        END IF;

                        VALCONFIGEXPRESSION(TBDOMAINVALUES(I).NUDOMAINCOMPID);

                    END LOOP;
                END IF;

            ELSE
               
               UT_TRACE.TRACE('Longitud no coincide con la definida en el dominio',2);
                ERRORS.SETERROR(CNUERRLONGDOMAIN, DAAB_DOMAIN.FSBGETNAME_(NUDOMAINID));
                RAISE EX.CONTROLLED_ERROR;
            END IF;

        ELSE
            
            UT_TRACE.TRACE('Solo debe existir un simbolo de dominio',2);
            ERRORS.SETERROR(CNUERRDIRNOGRAMA);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fin: AB_BOParser.ValDomainToken',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR: AB_BOParser.ValDomainToken',2);
            
            BLGRAMVIASOK := FALSE;
            IF RFCOMPOSITION%ISOPEN THEN
                CLOSE RFCOMPOSITION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others: AB_BOParser.ValDomainToken',2);
            
            BLGRAMVIASOK := FALSE;
            IF RFCOMPOSITION%ISOPEN THEN
                CLOSE RFCOMPOSITION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALDOMAINTOKEN;

    








































































    PROCEDURE CHECKSYNTAX
    (
        ISBDIRECCION       IN            AB_ADDRESS.ADDRESS%TYPE,
        INUGEOLOCATION     IN            GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        ORCDIRPARSEADA     IN OUT NOCOPY TYRCDIRPARSEADA,
        ISBUSECACHE        IN            VARCHAR2 DEFAULT 'Y',
        ISGSHAPE           IN            AB_ADDRESS.SHAPE%TYPE DEFAULT NULL
    )
	IS
		
        TBDIRGRAMAPADRE    UT_STRING.TYTB_STRPARAMETERS;
        NUINDEXGRAM        BINARY_INTEGER;
        SBDIRECCION        AB_ADDRESS.ADDRESS%TYPE;
        NUDIRECCION        AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio: AB_BOParser.CheckSyntax',2);

        SBDIRECCION := TRIM(UPPER(ISBDIRECCION));

        IF SBDIRECCION IS NULL THEN
            ERRORS.SETERROR(CNUADDRESSNULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        IF ISBUSECACHE = CSBYES AND SBDIRECCION = RCCACHEDIRPARSEADA.SBDIRFMTOLIBRE AND INUGEOLOCATION = RCCACHEDIRPARSEADA.NUGEOLOCATION THEN
            ORCDIRPARSEADA := RCCACHEDIRPARSEADA;
            UT_TRACE.TRACE('Retornando de Cache estructura de direccion parseada ['||ORCDIRPARSEADA.SBDIRPARSEADA||']',2);
            UT_TRACE.TRACE('Fin: AB_BOParser.CheckSyntax',2);
            RETURN;
        END IF;

        ORCDIRPARSEADA.SBDIRFMTOLIBRE := SBDIRECCION;
        ORCDIRPARSEADA.NUGEOLOCATION  := INUGEOLOCATION;

        
        BUSCACOINCIDENCIA
        (
            INUGEOLOCATION,
            SBDIRECCION,
            ORCDIRPARSEADA
        );

        UT_TRACE.TRACE('Tokens de tbDireccion.',3);
        DESPLIEGATOKENS(ORCDIRPARSEADA.TBDIRECCION);

        IF (ORCDIRPARSEADA.NUIDGRAMAPADRE IS NULL) THEN
            
            BLGRAMVIASOK := FALSE;
            
            ERRORS.SETERROR(CNUERRDIRNOGRAMA, SBDIRECCION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        CONSTRUYEDIRPADRE(ORCDIRPARSEADA.NUIDGRAMAPADRE, ORCDIRPARSEADA.TBEXITOS, TBDIRGRAMAPADRE);

        OBTIENEDIRECCION
        (
            TBDIRGRAMAPADRE,
            ORCDIRPARSEADA.TBCOMPLEMENTO,
            ORCDIRPARSEADA.SBDIRPARSEADA,
            ORCDIRPARSEADA.SBCOMPLEMENTO,
            ORCDIRPARSEADA.NUCASA,
            ORCDIRPARSEADA.SBCASA,
            ORCDIRPARSEADA.SBBLOCK
        );

        
        
        
        
        
        IF ORCDIRPARSEADA.NUIDGRAMAPADRE IS NOT NULL AND
           (ORCDIRPARSEADA.NUVIASENGRAMATICA > 0 OR ORCDIRPARSEADA.NUSECTORID IS NOT NULL) AND
           ORCDIRPARSEADA.NUCASA IS NULL
        THEN
           UT_TRACE.TRACE('Detectada direcci�n que cumple gram�tica con v�as y sin altura, se asume altura = 0',3);
           ORCDIRPARSEADA.NUCASA := 0;
        END IF;

        UT_TRACE.TRACE('Tokens de tbDirGramaPadre.',3);
        DESPLIEGATOKENS(TBDIRGRAMAPADRE);

        
        IF (TBDIRGRAMAPADRE.FIRST IS NOT NULL)
           AND  ( FNUDOMAINID(  TBDIRGRAMAPADRE(TBDIRGRAMAPADRE.FIRST).SBPARAMETER) IS NOT NULL ) THEN

           
           BLISDOMAIN := TRUE;
           VALDOMAINTOKEN(TBDIRGRAMAPADRE);

        ELSE

            
            IF ORCDIRPARSEADA.SBDIRPARSEADA IS NOT NULL THEN
                UT_TRACE.TRACE('Busca la direccion despues de parsear',2);
                NUDIRECCION := AB_BOPARSER.FNUFINDADDRESS(ORCDIRPARSEADA.SBDIRPARSEADA, INUGEOLOCATION);
                UT_TRACE.TRACE('Direccion ID despues de parsear ['||NUDIRECCION||']',2);
            END IF;

            
            IF (NVL(NUDIRECCION,-1) = -1) OR ( NVL(DAAB_ADDRESS.FSBGETIS_VALID(NUDIRECCION,0),CSBNO) = CSBNO ) THEN
                ORCDIRPARSEADA.TBDIREPADRE    := TBDIRGRAMAPADRE;
                ORCDIRPARSEADA.TBDIRECCION    := ORCDIRPARSEADA.TBDIRECCION;

                
                
                VALIDACANTVIAS
                (
                ORCDIRPARSEADA.NUVIASENGRAMATICA,
                ORCDIRPARSEADA.SBDIRPARSEADA,
                ORCDIRPARSEADA.NUPRIMERAVIA,
                ORCDIRPARSEADA.NUSEGUNDAVIA,
                ORCDIRPARSEADA.SBPRIMERAVIA,
                ORCDIRPARSEADA.SBSEGUNDAVIA,
                INUGEOLOCATION
                );

            ELSE
               ORCDIRPARSEADA.NUADDRESSID := NUDIRECCION;
            END IF;

        END IF;

        UT_TRACE.TRACE('Guardando Info de direccion parseada ['||ORCDIRPARSEADA.SBDIRPARSEADA||'] en cache ',2);

        
        
        IF ISBUSECACHE = CSBYES THEN
            RCCACHEDIRPARSEADA                := ORCDIRPARSEADA;
            RCCACHEDIRPARSEADA.SBDIRFMTOLIBRE := SBDIRECCION;
        END IF;

        UT_TRACE.TRACE('Fin: AB_BOParser.CheckSyntax',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Fin: AB_BOParser.CheckSyntax : Excepcion !! : :{'||ERRORS.NUERRORCODE||'-'||ERRORS.SBERRORMESSAGE||'}',2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('Fin: AB_BOParser.CheckSyntax : Excepcion !! : :{'||ERRORS.NUERRORCODE||'-'||ERRORS.SBERRORMESSAGE||'}',2);
            RAISE EX.CONTROLLED_ERROR;
    END CHECKSYNTAX;

    
    

	

    





























    PROCEDURE VALIDACANTVIAS
    (
        INUVIASENGRAMATICA IN NUMBER,
        ISBDIRECCION       IN VARCHAR2,
        INUPRIMERAVIA      IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE,
        INUSEGUNDAVIA      IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE,
        ISBPRIMERAVIA      IN AB_WAY_BY_LOCATION.DESCRIPTION%TYPE,
        ISBSEGUNDAVIA      IN AB_WAY_BY_LOCATION.DESCRIPTION%TYPE,
        INUGEOLOCATION     IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicio: ab_boParser.ValidaCantVias'||
                       '] inuViasEnGramatica=['||INUVIASENGRAMATICA||
                       '] inuPrimeraVia=['||INUPRIMERAVIA||
                       '] isbPrimeraVia=['||ISBPRIMERAVIA||
                       '] inuSegundaVia=['||INUSEGUNDAVIA||
                       '] isbSegundaVia=['||ISBSEGUNDAVIA||']',2);

        IF NVL(INUVIASENGRAMATICA,0) > 0 AND INUPRIMERAVIA IS NULL THEN
            
            ERRORS.SETERROR(CNUNOEXISTEVIA,ISBPRIMERAVIA||'|'||ISBDIRECCION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        IF NVL(INUVIASENGRAMATICA,0) > 1 AND INUSEGUNDAVIA IS NULL THEN
            
            ERRORS.SETERROR(CNUNOEXISTEVIA,ISBSEGUNDAVIA||'|'||ISBDIRECCION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fin: ab_boParser.ValidaCantVias',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDACANTVIAS;


    
    

    PROCEDURE CHECKSYNTAX
    (
        ADDRESS           IN  VARCHAR2,
        INUGEOLOCATION    IN  NUMBER,
        ADDRESSPARSED     OUT NOCOPY VARCHAR2,
        NUERRORCODE       OUT NOCOPY NUMBER,
        SBERRORMESSAGE    OUT NOCOPY VARCHAR2
    )
    IS

        RCDIRPARSEADA     TYRCDIRPARSEADA;

    BEGIN
        ERRORS.INITIALIZE;

        CHECKSYNTAX
        (
            ADDRESS,
            INUGEOLOCATION,
            RCDIRPARSEADA
        );

        ADDRESSPARSED := RCDIRPARSEADA.SBDIRPARSEADA;

        
        NUERRORCODE    := 0;
        SBERRORMESSAGE := '';

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(NUERRORCODE,SBERRORMESSAGE);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(NUERRORCODE,SBERRORMESSAGE);
    END;

    
    
    












	


    























































    PROCEDURE COMPLETAREGISDIR
    (
        INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBISURBAN       IN VARCHAR2,
        ISGSHAPE         IN AB_ADDRESS.SHAPE%TYPE,
        IRCOLDADDRESS    IN OUT NOCOPY DAAB_ADDRESS.STYAB_ADDRESS,
        IONUPARSER_ID    IN OUT NOCOPY AB_ADDRESS.ADDRESS_ID%TYPE,
        IRCDIRPARSEADA   IN TYRCDIRPARSEADA,
        ORCDIR           IN OUT NOCOPY DAAB_ADDRESS.STYAB_ADDRESS,
        INUNEIGHBORTHOOD IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO AB_Boparser.CompletaRegisDir'    ||CHR(10)||
                       'nuGeoLocationId: '  ||INUGEOLOCATIONID  ||CHR(10)||
                       'sbIsUrban: '        ||ISBISURBAN        ||CHR(10)||
                       'nuParser_id: '      ||IONUPARSER_ID     ||CHR(10)||
                       'nuNeighborthood: '  ||INUNEIGHBORTHOOD,3);

        
        IF IONUPARSER_ID IS NULL THEN
            ORCDIR.ADDRESS_ID        := AB_BOSEQUENCE.FNUNEXTADDRESS;
            IONUPARSER_ID            := ORCDIR.ADDRESS_ID;
            ORCDIR.IS_MAIN           := CSBYES;
        ELSE
            ORCDIR.ADDRESS_ID        := IONUPARSER_ID;
            ORCDIR.IS_MAIN           := DAAB_ADDRESS.FSBGETIS_MAIN(IONUPARSER_ID,0);
        END IF;

        ORCDIR.GEOGRAP_LOCATION_ID   := INUGEOLOCATIONID;
        ORCDIR.IS_URBAN              := ISBISURBAN;
        ORCDIR.INSTALLED_LINES       := 0;
        ORCDIR.TRANSACT_LINES        := 0;
        ORCDIR.INSTALLED_AIR_LINES   := 0;
        ORCDIR.TRANSACT_AIR_LINES    := 0;
        ORCDIR.GRAMMAR_ID            := IRCDIRPARSEADA.NUIDGRAMAPADRE;
        ORCDIR.WAY_ID                := IRCDIRPARSEADA.NUPRIMERAVIA;
        IF ORCDIR.WAY_ID IS NOT NULL THEN
            ORCDIR.WAY_TYPE          := DAAB_WAY_BY_LOCATION.FNUGETWAY_TYPE_ID( ORCDIR.WAY_ID );
        END IF;
        ORCDIR.CROSS_WAY_ID          := IRCDIRPARSEADA.NUSEGUNDAVIA;
        IF ORCDIR.CROSS_WAY_ID IS NOT NULL THEN
            ORCDIR.CROSS_WAY_TYPE    := DAAB_WAY_BY_LOCATION.FNUGETWAY_TYPE_ID( ORCDIR.CROSS_WAY_ID );
        END IF;
        ORCDIR.HOUSE_NUMBER          := IRCDIRPARSEADA.NUCASA;
        ORCDIR.HOUSE_LETTER          := IRCDIRPARSEADA.SBCASA;
        ORCDIR.ADDRESS_COMPLEMENT    := IRCDIRPARSEADA.SBCOMPLEMENTO;

        IF INUNEIGHBORTHOOD IS NOT NULL THEN
            UT_TRACE.TRACE('Se reemplaza el barrio ['||INUNEIGHBORTHOOD||']',2);
            ORCDIR.NEIGHBORTHOOD_ID  := INUNEIGHBORTHOOD;
        END IF;


        IF ISGSHAPE IS NULL THEN
            UT_TRACE.TRACE('No recibi� coordenadas de direcci�n conserva el shape de la direcci�n',3);
            ORCDIR.SHAPE := IRCOLDADDRESS.SHAPE;
            
                ORCDIR.MANUAL_SHAPE := CSBYES;
        ELSE
            
            UT_TRACE.TRACE('Recibi� coordenadas de direcci�n',3);
            ORCDIR.SHAPE := ISGSHAPE;
            
                ORCDIR.MANUAL_SHAPE := CSBYES;
                ORCDIR.MANUAL_SEGMENT := CSBNO;
            IF INUNEIGHBORTHOOD IS NULL THEN
                ORCDIR.NEIGHBORTHOOD_ID  := AB_BOGEOMETRIA.FNUNEIGHBORBYSHAPE(ISGSHAPE);
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN AB_Boparser.CompletaRegisDir nuParser_id: '||IONUPARSER_ID ,3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR AB_Boparser.CompletaRegisDir', 3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_Boparser.CompletaRegisDir', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END COMPLETAREGISDIR;

    




















    PROCEDURE CHANGEORMARKROUTE
    (
        IRCMAIN  IN  DAAB_ADDRESS.STYAB_ADDRESS,
        IRCCHECK IN  DAAB_ADDRESS.STYAB_ADDRESS
    )
    IS
        
        NUOLDROUTEID   OR_ROUTE.ROUTE_ID%TYPE;
        
        NUNEWROUTEID   OR_ROUTE.ROUTE_ID%TYPE;
        
        NUCONS         AB_PREMISE.CONSECUTIVE%TYPE;

    BEGIN
        UT_TRACE.TRACE('BEGIN AB_Boparser.ChangeorMarkRoute'||IRCMAIN.ESTATE_NUMBER,2);
        
        OR_BOROUTE.MARKTORECALCULATESHAPE(IRCMAIN.ESTATE_NUMBER);

        IF IRCCHECK.ESTATE_NUMBER IS NOT NULL THEN

            NUOLDROUTEID := DAAB_PREMISE.FNUGETROUTE_ID(IRCMAIN.ESTATE_NUMBER,0);
            NUNEWROUTEID := DAAB_PREMISE.FNUGETROUTE_ID(IRCCHECK.ESTATE_NUMBER,0);
            NUCONS       := OR_BOROUTE.FNUGENERATECONSECUTIVE(IRCMAIN);
            UT_TRACE.TRACE('nuOldRouteId ['||NUOLDROUTEID||']nuNewRouteId['||NUNEWROUTEID||']'||CHR(10)||
                            'nuCons ['||NUCONS||']' ,2);
            
            
            IF( (NUOLDROUTEID||'a' != NUNEWROUTEID||'a') OR
                (NUCONS IS NOT NULL)
              ) THEN

                  
                    DAAB_PREMISE.UPDCONSECUTIVE
                    (
                        IRCMAIN.ESTATE_NUMBER,
                        NUCONS
                    );
            END IF;

        END IF;
        UT_TRACE.TRACE('END AB_Boparser.ChangeorMarkRoute',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_Boparser.ChangeorMarkRoute',2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS AB_Boparser.ChangeorMarkRoute',2);
            RAISE EX.CONTROLLED_ERROR;
    END CHANGEORMARKROUTE;

    


























    PROCEDURE ACTUALIZADIRECCION
    (
        IRCNEW DAAB_ADDRESS.STYAB_ADDRESS
    )
    IS
        RCOLD   DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
        RCOLD                       := DAAB_ADDRESS.FRCGETRECORD( IRCNEW.ADDRESS_ID );

        RCOLD.IS_VALID              := IRCNEW.IS_VALID;
        RCOLD.ACTIVE                := IRCNEW.ACTIVE;
        RCOLD.ADDRESS_PARSED        := IRCNEW.ADDRESS_PARSED;
        RCOLD.ADDRESS               := IRCNEW.ADDRESS;
        RCOLD.NEIGHBORTHOOD_ID      := IRCNEW.NEIGHBORTHOOD_ID;
        RCOLD.GEOGRAP_LOCATION_ID   := IRCNEW.GEOGRAP_LOCATION_ID;
        RCOLD.IS_URBAN              := IRCNEW.IS_URBAN;
        RCOLD.GRAMMAR_ID            := IRCNEW.GRAMMAR_ID;
        RCOLD.WAY_ID                := IRCNEW.WAY_ID;
        RCOLD.WAY_TYPE              := IRCNEW.WAY_TYPE;
        RCOLD.CROSS_WAY_ID          := IRCNEW.CROSS_WAY_ID;
        RCOLD.CROSS_WAY_TYPE        := IRCNEW.CROSS_WAY_TYPE;
        RCOLD.HOUSE_NUMBER          := IRCNEW.HOUSE_NUMBER;
        RCOLD.HOUSE_LETTER          := IRCNEW.HOUSE_LETTER;
        RCOLD.ADDRESS_COMPLEMENT    := IRCNEW.ADDRESS_COMPLEMENT;
        RCOLD.FATHER_ADDRESS_ID     := IRCNEW.FATHER_ADDRESS_ID;
        RCOLD.SHAPE                 := IRCNEW.SHAPE;
        RCOLD.MANUAL_SHAPE          := IRCNEW.MANUAL_SHAPE;
        RCOLD.MANUAL_SEGMENT        := IRCNEW.MANUAL_SEGMENT;

        DAAB_ADDRESS.UPDRECORD( RCOLD , CNUNOWAIT);

        
        CHANGEORMARKROUTE(RCOLD,NULL);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ACTUALIZADIRECCION;

    
    
    






















































    PROCEDURE VALIDATERURALADDRESS
    (
        ISBADDRESS          IN  AB_ADDRESS.ADDRESS_PARSED%TYPE,
        INUGEOLOCATIONID    IN  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        ISBISURBAN          IN  AB_ADDRESS.IS_URBAN%TYPE,
        OSBVALID            OUT NOCOPY AB_ADDRESS.IS_VALID%TYPE,
        ORCDIRPARSEADA      OUT NOCOPY TYRCDIRPARSEADA,
        ISCHILDADDRESS      IN  VARCHAR2 DEFAULT 'Y',
        ISGSHAPE            IN  AB_ADDRESS.SHAPE%TYPE DEFAULT NULL
    )
    IS
        NUERRORCODE       GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
	    SBERRORMESSAGE    GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio ab_boparser.validateRuralAddress', 3);
        IF ISBADDRESS IS NULL THEN
            
            ERRORS.SETERROR(CNUADDRESSNULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        IF ISBISURBAN IS NULL THEN
            
            ERRORS.SETERROR(CNUISURBANFLAGNULL,ISBADDRESS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;


        
        IF ISBADDRESS IS NOT NULL AND ISBISURBAN = CSBNO THEN
        
            OSBVALID    := CSBYES;
            ORCDIRPARSEADA.SBDIRFMTOLIBRE := NVL(ORCDIRPARSEADA.SBDIRPARSEADA,ISBADDRESS);
            ORCDIRPARSEADA.SBDIRPARSEADA  := ORCDIRPARSEADA.SBDIRFMTOLIBRE;
        ELSE
        
            CHECKSYNTAX
            (
                ISBADDRESS,
                INUGEOLOCATIONID,
                ORCDIRPARSEADA,
                ISCHILDADDRESS,  
                ISGSHAPE
            );
            UT_TRACE.TRACE('rcDirParseada: '||ORCDIRPARSEADA.SBDIRPARSEADA, 3);
            OSBVALID    := CSBYES;
        END IF;

        UT_TRACE.TRACE('END ab_boparser.validateRuralAddress', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('END ex.CONTROLLED_ERROR:ab_boparser.validateRuralAddress', 3);
            ORCDIRPARSEADA.SBDIRFMTOLIBRE := NVL(ORCDIRPARSEADA.SBDIRPARSEADA,ISBADDRESS);
            ORCDIRPARSEADA.SBDIRPARSEADA  := ORCDIRPARSEADA.SBDIRFMTOLIBRE;
             IF ISCHILDADDRESS = CSBYES AND (SBVALID_ADDRESS = CSBYES OR   (SBVALID_ADDRESS = CSBSEMINORMALIZED AND NOT BLGRAMVIASOK) OR BLISDOMAIN)
            THEN
                UT_TRACE.TRACE('RAISE ab_boparser.validateRuralAddress', 3);
                RAISE;
            END IF;
            OSBVALID    := CSBNO;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('END OTHERS:ab_boparser.validateRuralAddress', 3);
            ORCDIRPARSEADA.SBDIRFMTOLIBRE := NVL(ORCDIRPARSEADA.SBDIRPARSEADA,ISBADDRESS);
            ORCDIRPARSEADA.SBDIRPARSEADA  := ORCDIRPARSEADA.SBDIRFMTOLIBRE;
            IF ISCHILDADDRESS = CSBYES AND (SBVALID_ADDRESS = CSBYES OR   (SBVALID_ADDRESS = CSBSEMINORMALIZED AND NOT BLGRAMVIASOK) OR BLISDOMAIN)
            THEN
                UT_TRACE.TRACE('RAISE ab_boparser.validateRuralAddress', 3);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            OSBVALID    := CSBNO;

     END VALIDATERURALADDRESS;

    




















































































































































    PROCEDURE INSERTADDRESS
    (
        INUGEOLOCATIONID  IN    AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS        IN    AB_ADDRESS.ADDRESS%TYPE,
        INUNEIGHBORTID    IN    AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE,
        ISBISURBAN        IN    AB_ADDRESS.IS_URBAN%TYPE,
        IONUPARSER_ID     IN    OUT NOCOPY AB_ADDRESS.ADDRESS_ID%TYPE,
        OSBDIRPARSEADA    OUT   NOCOPY AB_ADDRESS.ADDRESS_PARSED%TYPE,
        ISCHILDADDRESS    IN    VARCHAR2 DEFAULT 'Y',
        ISBVERIFIED       IN    AB_ADDRESS.VERIFIED%TYPE DEFAULT 'N',
        ISGSHAPE          IN    AB_ADDRESS.SHAPE%TYPE DEFAULT NULL,
        INUUPDADDRESSID   IN    AB_ADDRESS.ADDRESS_ID%TYPE DEFAULT NULL
    )
    IS

        
        RC                DAAB_ADDRESS.STYAB_ADDRESS;
        
        RCOLDADDRESS      DAAB_ADDRESS.STYAB_ADDRESS;
        RCDIRPARSEADA     TYRCDIRPARSEADA;
        RCPREMISE         DAAB_PREMISE.STYAB_PREMISE;
        NURESULTFINDADDR  AB_ADDRESS.ADDRESS_ID%TYPE;
        SBVALID           AB_ADDRESS.IS_VALID%TYPE;
        
        NUFATHERADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
        SBFATHERADDRESS   AB_ADDRESS.ADDRESS_PARSED%TYPE;
        SBADDRESS         AB_ADDRESS.ADDRESS_PARSED%TYPE;
        SBSAVEDADDRESSISVALID AB_ADDRESS.IS_VALID%TYPE;
        NUNEIGHBORTHOOD   AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
        
        NUPREMISEID         AB_PREMISE.PREMISE_ID%TYPE;
        NUTMPFATHERADDRESSID      AB_ADDRESS.ADDRESS_ID%TYPE;
        
        NUTMPERROR        GE_MESSAGE.MESSAGE_ID%TYPE;
        SBTMPERROR        GE_ERROR_LOG.DESCRIPTION%TYPE;

        
        NUADDRESSUPDFATHER   AB_ADDRESS.ADDRESS_ID%TYPE;
        
        
        SGSHAPE AB_ADDRESS.SHAPE%TYPE;

        
























        FUNCTION FSBADDRESSFATHER
        (
            RCCHILDPARSEDADDRESS TYRCDIRPARSEADA
        )
                RETURN AB_ADDRESS.ADDRESS_PARSED%TYPE
        IS
            SBADDRESSFATHER     AB_ADDRESS.ADDRESS_PARSED%TYPE;
            TBTOKENS            UT_STRING.TYTB_STRING;
            NUGRAMATICAINDEX    BINARY_INTEGER;

            NUINDEXADDRESS      BINARY_INTEGER;
            NUGRAMAFATHERINDEX  BINARY_INTEGER;
        BEGIN
            UT_TRACE.TRACE('Inicio: ab_boParser.insertAddress.fsbAddressFather ['||RCCHILDPARSEDADDRESS.SBDIRPARSEADA||']',5);

            
            IF RCCHILDPARSEDADDRESS.SBCOMPLEMENTO IS NOT NULL THEN
                UT_TRACE.TRACE('rcChildParsedAddress.sbComplemento>>['||RCCHILDPARSEDADDRESS.SBCOMPLEMENTO||']',5);
                SBADDRESSFATHER := TRIM(SUBSTR(RCCHILDPARSEDADDRESS.SBDIRPARSEADA,1,INSTR(RCCHILDPARSEDADDRESS.SBDIRPARSEADA, RCCHILDPARSEDADDRESS.SBCOMPLEMENTO, -1, 1) -1));
                UT_TRACE.TRACE('Fin : ab_boParser.insertAddress.fsbAddressFather =>'||SBADDRESSFATHER,5);
                RETURN SBADDRESSFATHER;
            END IF;

            
            NUGRAMATICAINDEX := FNUGETGRAMMARINDEXBYID( RCCHILDPARSEDADDRESS.NUIDGRAMAPADRE );

            
            NUGRAMAFATHERINDEX := FNUPREVIOUSGRAMMARLEVEL( NUGRAMATICAINDEX );


            
            IF RCCHILDPARSEDADDRESS.NUVIASENGRAMATICA > 0
               AND NUGRAMAFATHERINDEX IS NOT NULL
               AND TBGGRAMATICA(NUGRAMAFATHERINDEX).SBTBSIMBOLOS.FIRST IS NOT NULL
               AND RCCHILDPARSEDADDRESS.TBDIREPADRE.FIRST IS NOT NULL
               AND RCCHILDPARSEDADDRESS.TBDIREPADRE.COUNT >= TBGGRAMATICA(NUGRAMAFATHERINDEX).SBTBSIMBOLOS.COUNT
            THEN
                NUINDEXADDRESS := RCCHILDPARSEDADDRESS.TBDIREPADRE.FIRST;
                
                FOR NUINDEXSIMBOLGRAMA IN 1..TBGGRAMATICA(NUGRAMAFATHERINDEX).SBTBSIMBOLOS.COUNT LOOP
                    IF NUINDEXSIMBOLGRAMA>1 THEN
                        SBADDRESSFATHER := SBADDRESSFATHER ||' ';
                    END IF;

                    IF  RCCHILDPARSEDADDRESS.TBDIREPADRE(NUINDEXADDRESS).SBPARAMETER  IN ( CSBTOKEN_VIA, CSBTOKEN_SECTOR ) THEN
                        SBADDRESSFATHER := SBADDRESSFATHER ||
                                           RCCHILDPARSEDADDRESS.TBDIREPADRE(NUINDEXADDRESS).SBVALUE;
                    ELSE
                        SBADDRESSFATHER := SBADDRESSFATHER ||
                                           RCCHILDPARSEDADDRESS.TBDIREPADRE(NUINDEXADDRESS).SBPARAMETER||' '||
                                           RCCHILDPARSEDADDRESS.TBDIREPADRE(NUINDEXADDRESS).SBVALUE;
                    END IF;

                    NUINDEXADDRESS := RCCHILDPARSEDADDRESS.TBDIREPADRE.NEXT(NUINDEXADDRESS);
                END LOOP;
            END IF;

            UT_TRACE.TRACE('Fin : ab_boParser.insertAddress.fsbAddressFather =>'||SBADDRESSFATHER,5);
            RETURN SBADDRESSFATHER;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FSBADDRESSFATHER;
    BEGIN
        UT_TRACE.TRACE('Inicio: ab_boParser.insertAddress  inuGeoLocationId ['||INUGEOLOCATIONID||']  isbAddress ['||ISBADDRESS||'] '||
        'inuNeighbortId ['||INUNEIGHBORTID||']  isbIsUrban ['||ISBISURBAN||']  ionuParser_id  ['||IONUPARSER_ID||'] '||
        'osbDirParseada ['||OSBDIRPARSEADA||']  isChildAddress ['||ISCHILDADDRESS||']',2);

        BLGRAMVIASOK := TRUE;
        BLISDOMAIN := FALSE;

        
        IF  INUGEOLOCATIONID IS NOT NULL THEN
            SBVALID_ADDRESS :=  DAGE_GEOGRA_LOCATION.FSBGETNORMALIZED(INUGEOLOCATIONID);
        END IF;
        UT_TRACE.TRACE('Elevar Excepci�n si direcci�n no es v�lida ? ['||SBVALID_ADDRESS||']',2);

        
        VALIDATERURALADDRESS
        (
            ISBADDRESS,
            INUGEOLOCATIONID,
            ISBISURBAN,
            RC.IS_VALID,
            RCDIRPARSEADA,
            ISCHILDADDRESS,  
            ISGSHAPE
        );

        RC.ACTIVE := RC.IS_VALID;
        UT_TRACE.TRACE('direcci�n V�lida['||RC.IS_VALID||']',2);

        
        RC.ADDRESS_PARSED        := RCDIRPARSEADA.SBDIRPARSEADA;
        RC.ADDRESS               := RC.ADDRESS_PARSED;
        OSBDIRPARSEADA           := RC.ADDRESS_PARSED;
        UT_TRACE.TRACE('Direcci�n['||RC.ADDRESS||'],direcci�n V�lida['||RC.IS_VALID||']',2);

        
        IF INUNEIGHBORTID IS NOT NULL AND RC.NEIGHBORTHOOD_ID IS NULL THEN
            UT_TRACE.TRACE('Asigno el barrio ingresado ['||INUNEIGHBORTID||']',2);
            RC.NEIGHBORTHOOD_ID  := INUNEIGHBORTID;
        END IF;

        
        
        IF ( RC.IS_VALID = CSBYES OR ISCHILDADDRESS = CSBNO)
           AND ISBISURBAN = CSBYES
           AND FSBISROOTGRAMMAR(RCDIRPARSEADA.NUIDGRAMAHJA) = CSBNO
        THEN
            UT_TRACE.TRACE('Verificando si existe direcci�n padre',2);
            SBFATHERADDRESS := FSBADDRESSFATHER(RCDIRPARSEADA);

            
            
            IF SBFATHERADDRESS IS NOT NULL THEN
                UT_TRACE.TRACE('Verificando si encuentra/inserta direcci�n padre ['||SBFATHERADDRESS||']',2);

                NUTMPFATHERADDRESSID  :=  CHECKIFADDRESSEXISTSINDB(SBFATHERADDRESS, INUGEOLOCATIONID);
                UT_TRACE.TRACE('nuTmpFatherAddressId ['||NUTMPFATHERADDRESSID||']',2);

                IF  NVL(NUTMPFATHERADDRESSID,CNUADDRESSNOTEXISTS) <> CNUADDRESSNOTEXISTS
                    AND ISBISURBAN <> DAAB_ADDRESS.FSBGETIS_URBAN(NUTMPFATHERADDRESSID,0)
                THEN
                    
                     UT_TRACE.TRACE('-La direccion padre es de diferente tipo ['||SBFATHERADDRESS||']',2);
                    ERRORS.SETERROR(CNUERRORFATHERTYPE,SBFATHERADDRESS);
                    RAISE EX.CONTROLLED_ERROR;
                ELSIF NVL(NUTMPFATHERADDRESSID,CNUADDRESSNOTEXISTS) <> CNUADDRESSNOTEXISTS
                      AND CSBYES <> DAAB_ADDRESS.FSBGETIS_MAIN(NUTMPFATHERADDRESSID,0)
                THEN
                    UT_TRACE.TRACE('-La direccion no debe puede tener como direcci�n padre una direcci�n alterna existente ['||SBFATHERADDRESS||']',2);
                    ERRORS.SETERROR(CNUERRORALTERN,SBFATHERADDRESS);
                    RAISE EX.CONTROLLED_ERROR;
                ELSIF NVL(NUTMPFATHERADDRESSID,CNUADDRESSNOTEXISTS) = CNUADDRESSNOTEXISTS THEN
                    UT_TRACE.TRACE('-Insertando direcci�n padre no encontrada en BD ['||SBFATHERADDRESS||']',2);
                    BEGIN
                        
                        
                        
                        
                        

                        IF INUUPDADDRESSID IS NOT NULL THEN
                            NUADDRESSUPDFATHER := DAAB_ADDRESS.FNUGETFATHER_ADDRESS_ID(INUUPDADDRESSID,0);
                        END IF;

                        
                        AB_BOPARSER.INSERTADDRESS
                        (
                            INUGEOLOCATIONID,
                            SBFATHERADDRESS||'',
                            INUNEIGHBORTID,
                            ISBISURBAN,
                            NUFATHERADDRESSID,
                            SBFATHERADDRESS,
                            CSBNO,   
                            ISBVERIFIED,
                            ISGSHAPE,
                            NUADDRESSUPDFATHER
                        );

                    EXCEPTION
                        WHEN EX.CONTROLLED_ERROR THEN
                            NUTMPERROR := NULL;
                            SBTMPERROR := '';
                            ERRORS.GETERROR(NUTMPERROR, SBTMPERROR);
                            IF NUTMPERROR = CNUERRORFATHERTYPE THEN
                                UT_TRACE.TRACE('Fall� una direcci�n padre por ser hijo de Rural',2);
                                RAISE;
                            ELSIF NUTMPERROR = CNUERRORALTERN THEN
                                UT_TRACE.TRACE('La direccion no debe puede tener como direcci�n padre una direcci�n alterna existente',2);
                                RAISE;
                            END IF;

                        WHEN OTHERS THEN
                            NULL;
                    END;
                ELSIF NVL(NUTMPFATHERADDRESSID,CNUADDRESSNOTEXISTS) <> CNUADDRESSNOTEXISTS THEN
                    NUFATHERADDRESSID := NUTMPFATHERADDRESSID;
                END IF;
                UT_TRACE.TRACE('Fin verificaci�n direcci�n padre ['||NUFATHERADDRESSID||']['||SBFATHERADDRESS||']'||
                               '�ltimo    padre ['||NULASTFATHERADDRESSID||']',2);
            END IF;

            
            IF NUFATHERADDRESSID IS NOT NULL THEN
                RC.FATHER_ADDRESS_ID := NUFATHERADDRESSID;
                NULASTFATHERADDRESSID    := NUFATHERADDRESSID;
            ELSIF NULASTFATHERADDRESSID IS NOT NULL THEN
                RC.FATHER_ADDRESS_ID := NULASTFATHERADDRESSID;
            END IF;
        END IF;

        
        
        IF  INUUPDADDRESSID IS NOT NULL THEN
            NURESULTFINDADDR := INUUPDADDRESSID;
        ELSIF NVL(RCDIRPARSEADA.NUADDRESSID,-1) = -1 THEN
            
            NURESULTFINDADDR := AB_BOPARSER.FNUFINDADDRESS( RC.ADDRESS_PARSED, INUGEOLOCATIONID );
            UT_TRACE.TRACE('Buscando en Banco de direcciones ['||RC.ADDRESS_PARSED||'] ug=['||INUGEOLOCATIONID||'] => '||NURESULTFINDADDR,2);
        ELSE
            NURESULTFINDADDR := RCDIRPARSEADA.NUADDRESSID;
        END IF;

        
        IF  NURESULTFINDADDR > 0 THEN
            
            IONUPARSER_ID := NURESULTFINDADDR;
            UT_TRACE.TRACE('Direccion ['||RC.ADDRESS||'] ya existe para localidad ['||INUGEOLOCATIONID||']',2);

            
            DAAB_ADDRESS.GETRECORD(NURESULTFINDADDR, RCOLDADDRESS);

            
            SBSAVEDADDRESSISVALID := RCOLDADDRESS.IS_VALID;
            IF RC.IS_VALID = CSBYES AND SBSAVEDADDRESSISVALID = CSBNO THEN
                UT_TRACE.TRACE('Actualizando direccion en banco de direcciones => Consistente',2);
                
                COMPLETAREGISDIR
                (
                    INUGEOLOCATIONID,
                    ISBISURBAN,
                    ISGSHAPE,
                    RCOLDADDRESS,
                    IONUPARSER_ID,
                    RCDIRPARSEADA,
                    RC,
                    INUNEIGHBORTID
                );

                RC.ESTATE_NUMBER :=  RCOLDADDRESS.ESTATE_NUMBER;
                RC.MANUAL_SEGMENT := CSBNO;

                ACTUALIZADIRECCION ( RC );

                
                IF RC.SHAPE IS NOT NULL THEN

                   AB_BOADDRESS.UPDSHAPEANDSEGMENT
                   (
                     RC.ADDRESS_ID,
                     AB_BOGEOMETRIA.FSBORDINATESTOSTRING(RC.SHAPE),
                     CSBYES,
                     RC.SHAPE
                   );

                END IF;

                
                CHANGEORMARKROUTE(RC,RCOLDADDRESS);

            ELSE
                UT_TRACE.TRACE('Direccion NO sera actualizada Valida['||RC.IS_VALID||']=Y AND Consistente['||SBSAVEDADDRESSISVALID||']=N =>FALSE',2);

                
                IF  INUNEIGHBORTID IS NULL THEN
                    IF ISGSHAPE IS NOT NULL THEN
                        RCOLDADDRESS.NEIGHBORTHOOD_ID := AB_BOGEOMETRIA.FNUNEIGHBORBYSHAPE(ISGSHAPE);
                    END IF;
                ELSE
                    NUNEIGHBORTHOOD := DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID(NURESULTFINDADDR);
                    UT_TRACE.TRACE('Barrios a comparar ['||NUNEIGHBORTHOOD||'a] <> ['||INUNEIGHBORTID||'a]',2);
                    IF  NUNEIGHBORTHOOD||'a' <>  INUNEIGHBORTID||'a' THEN
                        UT_TRACE.TRACE('Actualizo el Barrio con el Barrio Ingresado['||INUNEIGHBORTID||']',2);
                        RCOLDADDRESS.NEIGHBORTHOOD_ID := INUNEIGHBORTID;
                    END IF;
                END IF;

                
                IF ISGSHAPE IS NOT NULL THEN
                    IF (
                         (RCOLDADDRESS.SHAPE IS NULL) OR
                         (AB_BOGEOMETRIA.FSBORDINATESTOSTRING(ISGSHAPE) !=
                          AB_BOGEOMETRIA.FSBORDINATESTOSTRING(RCOLDADDRESS.SHAPE))
                        ) THEN
                        
                        UT_TRACE.TRACE('Recibi� coordenadas de direcci�n',3);
                        RCOLDADDRESS.SHAPE := ISGSHAPE;
                        RCOLDADDRESS.MANUAL_SHAPE := CSBYES;
                        RC.MANUAL_SEGMENT := CSBNO;

                        
                        DAAB_ADDRESS.UPDRECORD(RCOLDADDRESS);
                       
                       AB_BOADDRESS.UPDSHAPEANDSEGMENT
                       (
                         RCOLDADDRESS.ADDRESS_ID,
                         AB_BOGEOMETRIA.FSBORDINATESTOSTRING(RCOLDADDRESS.SHAPE),
                         CSBYES,
                         RCOLDADDRESS.SHAPE
                       );
                        
                        CHANGEORMARKROUTE(RCOLDADDRESS,RCOLDADDRESS);
                     END IF;
                ELSE
                    
                    DAAB_ADDRESS.UPDRECORD(RCOLDADDRESS,CNUNOWAIT );
                END IF;
            END IF;

            
            
            IF ISBVERIFIED = CSBYES THEN
                UT_TRACE.TRACE('Actualizar Verified',3);
                DAAB_ADDRESS.UPDVERIFIED(NURESULTFINDADDR, ISBVERIFIED);
            END IF;

        
        ELSE
            UT_TRACE.TRACE('Direcci�n ['||RC.ADDRESS_PARSED||'] no encontrada en Banco de Direcciones',2);

            
            IF ( ISCHILDADDRESS = CSBYES OR (ISCHILDADDRESS = CSBNO AND RC.IS_VALID=CSBYES)) THEN
                
                COMPLETAREGISDIR
                (
                    INUGEOLOCATIONID,
                    ISBISURBAN,
                    ISGSHAPE,
                    RCOLDADDRESS,
                    IONUPARSER_ID,
                    RCDIRPARSEADA,
                    RC,
                    INUNEIGHBORTID
                );

                
                RC.VERIFIED := ISBVERIFIED;
                
                UT_TRACE.TRACE('Insertando direccion en banco de direcciones',2);
                RC.MANUAL_SEGMENT := CSBNO;
                SGSHAPE :=  RC.SHAPE;
                RC.SHAPE    :=  NULL;
                DAAB_ADDRESS.INSRECORD ( RC );
                UT_TRACE.TRACE('Id Nueva Direcci�n:['||IONUPARSER_ID||'] osbAddressParsed['||RCDIRPARSEADA.SBDIRPARSEADA||']',3);

                
                IF IONUPARSER_ID IS NOT NULL  THEN
                    
                    NUPREMISEID := AB_BOPREMISE.FNUINSERTPREMISE;

                    
                    DAAB_ADDRESS.UPDESTATE_NUMBER(IONUPARSER_ID, NUPREMISEID);

                    IF ISGSHAPE IS NOT NULL THEN
                       
                       AB_BOADDRESS.UPDSHAPEANDSEGMENT
                       (
                         RC.ADDRESS_ID,
                         AB_BOGEOMETRIA.FSBORDINATESTOSTRING(ISGSHAPE),
                         CSBYES,
                         SGSHAPE
                       );
                    END IF;

                END IF;
            END IF;

        END IF;

        SBVALID_ADDRESS  := CSBNO;

        
        IF ISCHILDADDRESS = CSBYES THEN
            RCCACHEDIRPARSEADA := NULL;
            NULASTFATHERADDRESSID := NULL;
            UT_TRACE.TRACE('Borrando el cache',2);
        END IF;

        UT_TRACE.TRACE('Fin: ab_boParser.insertAddress ** Ultimo_Padre ['||NULASTFATHERADDRESSID||']',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             UT_TRACE.TRACE('EX.CONTROLLED_ERROR AB_boParser.InsertAddress',2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS AB_boParser.InsertAddress',2);
            RAISE EX.CONTROLLED_ERROR;
    END INSERTADDRESS;

    
    
    






























    FUNCTION  FSBDIRSUGERIDA
    (
        INUGEOLOCATIONID  IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBDIRFMTOLIBRE   IN  AB_ADDRESS.ADDRESS%TYPE
    )
    RETURN AB_ADDRESS.ADDRESS%TYPE
    IS
        SBDIRECCION           AB_ADDRESS.ADDRESS_PARSED%TYPE;
        SBCOMPLEMENTO         AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE;
        NUCASA                AB_ADDRESS.HOUSE_NUMBER%TYPE;
        SBCASA                AB_ADDRESS.HOUSE_LETTER%TYPE;

        TBDIRGRAMAPADRE       UT_STRING.TYTB_STRPARAMETERS;

        RCDIRPARSEADA         TYRCDIRPARSEADA;
    BEGIN
        UT_TRACE.TRACE('Inicio: ab_boParser.fsbDirSugerida',2);

        
        BUSCACOINCIDENCIA
        (
            INUGEOLOCATIONID,
            ISBDIRFMTOLIBRE,
            RCDIRPARSEADA
        );

        IF (RCDIRPARSEADA.NUIDGRAMAPADRE IS NULL) THEN
            
            IF RCDIRPARSEADA.NUGRAMAEXITOS != 0 THEN
                CONSTRUYEDIRPADRE(RCDIRPARSEADA.NUGRAMAEXITOS, RCDIRPARSEADA.TBEXITOS, TBDIRGRAMAPADRE);
                OBTIENEDIRECCION(TBDIRGRAMAPADRE,RCDIRPARSEADA.TBCOMPLEMENTO,
                                 SBDIRECCION,SBCOMPLEMENTO,NUCASA,SBCASA,
                                 RCDIRPARSEADA.SBBLOCK);
            ELSE
                SBDIRECCION := NULL;
            END IF;
        ELSE
            
            CONSTRUYEDIRPADRE(RCDIRPARSEADA.NUIDGRAMAPADRE, RCDIRPARSEADA.TBEXITOS, TBDIRGRAMAPADRE);
            OBTIENEDIRECCION(TBDIRGRAMAPADRE,RCDIRPARSEADA.TBCOMPLEMENTO,
                             SBDIRECCION,SBCOMPLEMENTO,NUCASA,SBCASA,
                             RCDIRPARSEADA.SBBLOCK);
        END IF;

        IF TRIM(SBDIRECCION) IS NULL THEN
            SBDIRECCION := ISBDIRFMTOLIBRE;
        END IF;

        UT_TRACE.TRACE('Fin: ab_boParser.fsbDirSugerida',2);
        RETURN SBDIRECCION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RETURN ISBDIRFMTOLIBRE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBDIRSUGERIDA;


    

































    FUNCTION CHECKIFADDRESSEXISTSINDB
    (
        ISBADDRESS        IN  AB_ADDRESS.ADDRESS%TYPE,
        INUGEOLOCATION    IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE
    IS
        NUDIRECCION         AB_ADDRESS.ADDRESS_ID%TYPE;
        SBPARSEDADDRESS     AB_ADDRESS.ADDRESS%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio: ab_boParser.CheckIfAddressExistsInDB.'||CHR(10)
                        ||'isbaddress:      '||ISBADDRESS||CHR(10)
                        ||'inuGeoLocation:  '||INUGEOLOCATION,2);

        IF ((ISBADDRESS IS NULL OR ISBADDRESS = '') AND (INUGEOLOCATION IS NULL OR INUGEOLOCATION = '')) THEN
            RETURN  -1;
        END IF;

        
        NUDIRECCION := NVL(AB_BOPARSER.FNUFINDADDRESS(ISBADDRESS, INUGEOLOCATION ),-1);
        UT_TRACE.TRACE('Direccion ID antes de parsear ['||NUDIRECCION||']',2);

        IF NUDIRECCION = -1 THEN

            
            SBPARSEDADDRESS := AB_BOPARSER.FSBDIRSUGERIDA(INUGEOLOCATION,ISBADDRESS);

            
            NUDIRECCION := AB_BOPARSER.FNUFINDADDRESS(SBPARSEDADDRESS, INUGEOLOCATION);

            UT_TRACE.TRACE('Direccion ID despues de parsear ['||NUDIRECCION||']',2);

        END IF;

        UT_TRACE.TRACE('Fin: ab_boParser.CheckIfAddressExistsInDB=>'||NUDIRECCION,2);

        RETURN NVL(NUDIRECCION,-1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Fin ex.CONTROLLED_ERROR ab_boParser.CheckIfAddressExistsInDB',2);
            RETURN NVL(NUDIRECCION,-1);
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Fin OTHERS ab_boParser.CheckIfAddressExistsInDB',2);
            RETURN NVL(NUDIRECCION,-1);

    END CHECKIFADDRESSEXISTSINDB;

    




















    FUNCTION CHECKIFADDRESSEXISTSINDB
    (
        ISBADDRESS        IN  AB_ADDRESS.ADDRESS%TYPE,
        INUGEOLOCATION    IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        NUERRORCODE       OUT NOCOPY NUMBER,
        SBERRORMESSAGE    OUT NOCOPY VARCHAR2
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE
    IS
        NUDIRECCION       AB_ADDRESS.ADDRESS_ID%TYPE;
        RCDIRPARSEADA     TYRCDIRPARSEADA;
    BEGIN
        UT_TRACE.TRACE('Inicio: ab_boParser.CheckIfAddressExistsInDB',2);

        NUDIRECCION :=  CHECKIFADDRESSEXISTSINDB(UPPER(ISBADDRESS), INUGEOLOCATION);

        UT_TRACE.TRACE('Fin: ab_boParser.CheckIfAddressExistsInDB',2);

        RETURN NVL(NUDIRECCION,-1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Fin: ab_boParser.CheckIfAddressExistsInDB (ex.CONTROLLED_ERROR)',2);
            RETURN -1;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Fin: ab_boParser.CheckIfAddressExistsInDB (others)',2);
            RETURN -1;
    END CHECKIFADDRESSEXISTSINDB;

    













    FUNCTION FBLCONTAINSSYMBOL
    (
        ISBINPUTSTRING IN UT_DATATYPES.STYMAXVARCHAR,
        IBLIGDEFHOUSENUMBER IN UT_DATATYPES.STYBOOLEAN DEFAULT FALSE
    )
    RETURN UT_DATATYPES.STYBOOLEAN
    IS
        SBPARSEDSTRING  UT_DATATYPES.STYMAXVARCHAR;
        TBDIRECCION     UT_STRING.TYTB_STRPARAMETERS;
        NUINDEX         BINARY_INTEGER;
        BLHAVETOKEN     BOOLEAN := FALSE;
    BEGIN
        
        SBPARSEDSTRING := FSBFORMATODIR( ISBINPUTSTRING );

        
        RETTOKENS(SBPARSEDSTRING,TBDIRECCION);

        
        IF TBDIRECCION.COUNT>0 THEN
            NUINDEX := TBDIRECCION.FIRST;
            LOOP
                EXIT WHEN NUINDEX IS NULL;
                IF IBLIGDEFHOUSENUMBER
                   AND TBDIRECCION(NUINDEX).SBPARAMETER IS NOT NULL
                   AND TBDIRECCION(NUINDEX).SBPARAMETER = AB_BCPARSER.FSBDEFHOUSESYMBOL
                THEN
                   NULL; 
                ELSIF TBDIRECCION(NUINDEX).SBPARAMETER IS NOT NULL THEN
                    BLHAVETOKEN := TRUE;
                    UT_TRACE.TRACE('ab_boParser.fblContainsSymbol=>TRUE',2);
                    EXIT;
                END IF;

                NUINDEX:= TBDIRECCION.NEXT(NUINDEX);
            END LOOP;
        END IF;

        RETURN BLHAVETOKEN;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLCONTAINSSYMBOL;


    














    PROCEDURE VALIDANOMBREVIA
    (
        ISBNOMBREVIA IN AB_ADDRESS.DESCRIPTION%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicio: ab_boParser.ValidaNombreVia',5);

        IF FBLCONTAINSSYMBOL(ISBNOMBREVIA) THEN
            
            ERRORS.SETERROR(CNUNOMBREVIATOKEN,ISBNOMBREVIA);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fin: ab_boParser.ValidaNombreVia',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDANOMBREVIA;

    











    FUNCTION FSBGETADDRESSTOKENVALUE
    (
        ISBADDRESS      IN AB_ADDRESS.ADDRESS%TYPE,
        ISBTOKEN        IN VARCHAR2

    ) RETURN VARCHAR2
    IS
        TBTOKENS        UT_STRING.TYTB_STRPARAMETERS;
        SBTOKENVALUE    VARCHAR2(100);
    BEGIN

        RETTOKENS(ISBADDRESS, TBTOKENS);
        IF TBTOKENS.COUNT > 0 THEN
            FOR I IN TBTOKENS.FIRST .. TBTOKENS.LAST LOOP
                
                IF TRIM(TBTOKENS(I).SBPARAMETER) = TRIM(ISBTOKEN) THEN
                   SBTOKENVALUE := TBTOKENS(I).SBVALUE;
                   EXIT;
                END IF;
            END LOOP;
        END IF;

        RETURN SBTOKENVALUE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    












    FUNCTION FSBOBTVALORTOKENSDOMICILIOS
    (
        INUIDGEOLOC         IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBDIRECCION        IN  AB_ADDRESS.ADDRESS%TYPE,
        ISBTOKENFILTRO      IN  VARCHAR2
    ) RETURN VARCHAR2
    IS
        SBDOMICILIOS    VARCHAR2(1000);
        SBVALORTOKEN    VARCHAR2(500);
        SBTOKENFILTRO   VARCHAR2(100);
    BEGIN
        SBTOKENFILTRO := UPPER(ISBTOKENFILTRO);
        FOR RCDOMICILIO IN AB_BCADDRESS.CUCHILDADDRESSSUGGEST(INUIDGEOLOC, ISBDIRECCION, SBTOKENFILTRO) LOOP
            SBVALORTOKEN:= FSBGETADDRESSTOKENVALUE(RCDOMICILIO.ADDRESS_PARSED, SBTOKENFILTRO);
            
            
            IF INSTR(',' ||SBDOMICILIOS ,','||SBVALORTOKEN||',') = 0 OR SBDOMICILIOS IS NULL THEN
                SBDOMICILIOS := SBVALORTOKEN || ',' || SBDOMICILIOS;
            END IF;
        END LOOP;
        SBDOMICILIOS := TRIM(',' FROM SBDOMICILIOS);
        RETURN SBDOMICILIOS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBOBTVALORTOKENSDOMICILIOS;

    





















    PROCEDURE GETSYMBOLS
    (
        IOTBSYMBOLS IN OUT NOCOPY TYTBSYMBOLS
    )
    IS
        RFSYMBOL CONSTANTS.TYREFCURSOR;
    BEGIN
        IF GTBSYMBOLS.COUNT = 0 AND BLSYMBOLS THEN
            RFSYMBOL := AB_BCPARSER.FRFSYMBOLS;
            FETCH RFSYMBOL BULK COLLECT INTO IOTBSYMBOLS;
            
            BLSYMBOLS := FALSE;
            CLOSE RFSYMBOL;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFSYMBOL);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFSYMBOL);
            RAISE EX.CONTROLLED_ERROR;
    END;

    
































    PROCEDURE INSADDRESSTRANSACTION
    (
        INUGEOLOCATIONID        IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS              IN AB_ADDRESS.ADDRESS%TYPE,
        INUNEIGHBORTID          IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE,
        ISBISURBAN              IN AB_ADDRESS.IS_URBAN%TYPE,
        INUPREVIOUSVALUE        IN AB_ADDRESS.PREVIOUS_VALUE%TYPE,
        ISBCOMMENT              IN AB_ADDRESS.DESCRIPTION%TYPE,
        IONUPARSER_ID           IN OUT NOCOPY AB_ADDRESS.ADDRESS_ID%TYPE
    )
    IS
        
        SBDIRPARSEADA    AB_ADDRESS.ADDRESS_PARSED%TYPE;
        
        
        RCADDRESS   DAAB_ADDRESS.STYAB_ADDRESS;
        
        SBCOMPVALUE         GE_PARAMETER.VALUE%TYPE := GE_BOPARAMETER.FSBGET(AB_BCCONSTANTS.FSBGETIDADDRESSCOMP);

        PRAGMA AUTONOMOUS_TRANSACTION;

    BEGIN

        UT_TRACE.TRACE('Inicio AB_Boparser.InsAddressTransaction', 1);
        
        
        RCADDRESS.ADDRESS               := ISBADDRESS;
        RCADDRESS.ADDRESS_PARSED        := ISBADDRESS;
        RCADDRESS.GEOGRAP_LOCATION_ID   := INUGEOLOCATIONID;
        RCADDRESS.IS_URBAN              := ISBISURBAN;
        RCADDRESS.NEIGHBORTHOOD_ID      := INUNEIGHBORTID;
        RCADDRESS.PREVIOUS_VALUE        := INUPREVIOUSVALUE;
        RCADDRESS.DESCRIPTION           := ISBCOMMENT;
        
        
        AB_BOADDRESS.CREATEADDRESS
        (
            RCADDRESS,
            SBCOMPVALUE,
            GE_BOCONSTANTS.CSBNO, 
            GE_BOCONSTANTS.CSBNO, 
            IONUPARSER_ID
        );

        IF IONUPARSER_ID IS NOT NULL THEN

            
            BEGIN

                AB_BOADDRESS.INSADDRESSADDITIONALINFO
                (
                    IONUPARSER_ID,
                    INUPREVIOUSVALUE,
                    ISBCOMMENT
                );

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    NULL;
                WHEN OTHERS THEN
                    NULL;
            END;

        END IF;

        COMMIT;
        UT_TRACE.TRACE('Fin AB_Boparser.InsAddressTransaction', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSADDRESSTRANSACTION;

    
























    FUNCTION FSBISROOTGRAMMAR( INUGRAMMARID IN BD_GRAMATICA.ID_GRAMATICA%TYPE )
    RETURN VARCHAR2
    IS
        NUINDEX       BINARY_INTEGER;
        SBROOTGRAMMAR VARCHAR2(1);
    BEGIN
        UT_TRACE.TRACE('Inicio AB_Boparser.fblIsRootGrammar('||INUGRAMMARID||')', 5);
        SBROOTGRAMMAR := CSBNO;

        NUINDEX := TBGGRAMATICA.FIRST;
        LOOP
            EXIT WHEN NUINDEX IS NULL;

            IF TBGGRAMATICA(NUINDEX).ID_GRAMATICA = INUGRAMMARID
               AND TBGGRAMATICA(NUINDEX).ID_GRAMATICA_PADRE IS NULL
               AND TBGGRAMATICA(NUINDEX).ROOTGRAMMAR = CSBYES
            THEN
                SBROOTGRAMMAR := CSBYES;
                EXIT;
            END IF;

            NUINDEX := TBGGRAMATICA.NEXT(NUINDEX);
        END LOOP;

        UT_TRACE.TRACE('Fin AB_Boparser.fblIsRootGrammar => '||SBROOTGRAMMAR, 5);
        RETURN SBROOTGRAMMAR;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBISROOTGRAMMAR;


    













    FUNCTION FNUGETGRAMMARINDEXBYID( INUGRAMMARID IN BD_GRAMATICA.ID_GRAMATICA%TYPE)
    RETURN BINARY_INTEGER
    IS
        NUINDEX BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicio AB_Boparser.fnuGetGrammarIndexById ('||INUGRAMMARID||')', 5);
        NUINDEX := TBGGRAMATICA.FIRST;
        LOOP
            EXIT WHEN NUINDEX IS NULL;
            IF TBGGRAMATICA(NUINDEX).ID_GRAMATICA = INUGRAMMARID THEN
                UT_TRACE.TRACE('Fin AB_Boparser.fnuGetGrammarIndexById indice => '||NUINDEX, 5);
                RETURN NUINDEX;
            END IF;
            NUINDEX := TBGGRAMATICA.NEXT(NUINDEX);
        END LOOP;
        UT_TRACE.TRACE('Fin AB_Boparser.fnuGetGrammarIndexById indice => '||NUINDEX, 5);
        RETURN NUINDEX;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETGRAMMARINDEXBYID;

    


















    FUNCTION FNUPREVIOUSGRAMMARLEVEL
    (
        INUGRAMMARID IN BD_GRAMATICA.ID_GRAMATICA%TYPE
    )
    RETURN BINARY_INTEGER
    IS
        NUINDPREV          BINARY_INTEGER;
        SBPREVGRAMMAR    BD_GRAMATICA.GRAMATICA%TYPE;
        SBCURRENTGRAMMAR BD_GRAMATICA.GRAMATICA%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio AB_Boparser.fnuPreviousGrammarLevel ('||INUGRAMMARID||')', 5);
        NUINDPREV := NULL;
        IF TBGGRAMATICA.EXISTS( INUGRAMMARID )
           AND TBGGRAMATICA(INUGRAMMARID).ID_GRAMATICA_PADRE IS NULL
        THEN
            SBCURRENTGRAMMAR := TBGGRAMATICA(INUGRAMMARID).GRAMATICAENTERA;
            FOR NUINDPREV IN REVERSE 1..(INUGRAMMARID - 1) LOOP
               IF TBGGRAMATICA.EXISTS(NUINDPREV)
                  AND TBGGRAMATICA( NUINDPREV ).ID_GRAMATICA_PADRE IS NULL
               THEN
                    SBPREVGRAMMAR := TBGGRAMATICA(NUINDPREV).GRAMATICAENTERA;
                    
                    
                    IF INSTR(SBCURRENTGRAMMAR,SBPREVGRAMMAR,1) = 1 THEN
                        UT_TRACE.TRACE('Fin AB_Boparser.fnuPreviousGrammarLevel indice=>'||NUINDPREV, 5);
                        RETURN NUINDPREV;
                    END IF;
               END IF;
            END LOOP;
        END IF;
        UT_TRACE.TRACE('Fin AB_Boparser.fnuPreviousGrammarLevel indice=>'||NUINDPREV, 5);
        RETURN NUINDPREV;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUPREVIOUSGRAMMARLEVEL;


    





























    FUNCTION FNUFINDADDRESS
    (
        ISBADDRESS        IN AB_ADDRESS.ADDRESS_PARSED%TYPE,
        INUGEOLOCATIONID  IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ISBCOMPLEMENT     IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE DEFAULT NULL
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE
    IS
        NUADDRESSID     AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN AB_BOParser.fnuFindAddress', 10);
        
        NUADDRESSID := AB_BCPARSER.FNUFINDADDRESS(TRIM(UPPER(ISBADDRESS)),
                                                  INUGEOLOCATIONID,
                                                  TRIM(UPPER(ISBCOMPLEMENT)));

        UT_TRACE.TRACE('END AB_BOParser.fnuFindAddress', 10);
        RETURN NUADDRESSID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR AB_BOParser.fnuFindAddress', 5);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOParser.fnuFindAddress', 5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUFINDADDRESS;

    















    FUNCTION OBJCHECKADDRESSEXISTS
    (
        ISBADDRESS        IN  AB_ADDRESS.ADDRESS%TYPE,
        INUGEOLOCATION    IN  AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE
    IS
    BEGIN

        RETURN CHECKIFADDRESSEXISTSINDB(ISBADDRESS, INUGEOLOCATION);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    













    PROCEDURE LOADTOKENS
    IS
        CUMAINTOKENS  CONSTANTS.TYREFCURSOR;
        SBTOKEN       AB_TOKEN_HIERARCHY.TOKEN_HIERARCHY_ID%TYPE;
        SBROOTTOKEN   AB_TOKEN_HIERARCHY.TOKEN_HIERARCHY_ID%TYPE;
        SBTOKENDOMAIN AB_TOKEN_HIERARCHY.TOKEN_DOMAIN%TYPE;
        NUHIERARCHY   AB_TOKEN_HIERARCHY.HIERARCHY%TYPE;
        NUDOMAINID    AB_TOKEN_HIERARCHY.DOMAIN_ID%TYPE;
        BLDEFHOUSENUM UT_DATATYPES.STYBOOLEAN := FALSE;
    BEGIN
        IF GTBALLTOKENS.FIRST IS NOT NULL THEN
            RETURN;
        END IF;
        UT_TRACE.TRACE('Cargando tokens principales' , 5);

        CUMAINTOKENS := AB_BCPARSER.FRFTOKENS;
        LOOP
            FETCH CUMAINTOKENS INTO SBTOKEN, SBROOTTOKEN, SBTOKENDOMAIN, NUHIERARCHY, NUDOMAINID;
            EXIT WHEN CUMAINTOKENS%NOTFOUND;

            IF NOT GTBALLTOKENS.EXISTS(SBTOKEN) THEN
                
                GTBALLTOKENS(SBTOKEN).SBROOTTOKEN   := SBROOTTOKEN;
                GTBALLTOKENS(SBTOKEN).SBTOKENDOMAIN := SBTOKENDOMAIN;
                GTBALLTOKENS(SBTOKEN).NUHIERARCHY   := NUHIERARCHY;
                GTBALLTOKENS(SBTOKEN).NUDOMAINID    := NUDOMAINID;
                
                
                IF GTBALLTOKENS(SBTOKEN).SBTOKENDOMAIN = CSBHOUSENUMBERSIMBOL THEN
                    BLDEFHOUSENUM := TRUE;
                END IF;
            END IF;
        END LOOP;
        
        
        IF NOT BLDEFHOUSENUM THEN
                GTBALLTOKENS(CSBDEF_HOUSE_SYMBOL).SBROOTTOKEN   := CSBDEF_HOUSE_SYMBOL;
                GTBALLTOKENS(CSBDEF_HOUSE_SYMBOL).SBTOKENDOMAIN := CSBHOUSENUMBERSIMBOL;
                GTBALLTOKENS(CSBDEF_HOUSE_SYMBOL).NUHIERARCHY   := 0;
                GTBALLTOKENS(CSBDEF_HOUSE_SYMBOL).NUDOMAINID    := NULL;
                BLDEFHOUSENUM := TRUE;
                UT_TRACE.TRACE('Token de altura por defecto['||CSBDEF_HOUSE_SYMBOL||']' , 5);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADTOKENS;


    













    FUNCTION FSBTOKENBASE
    (
        ISBTOKEN    IN VARCHAR2
    )
    RETURN VARCHAR2
    IS
        SBTOKEN     AB_TOKEN_HIERARCHY.TOKEN_HIERARCHY_ID%TYPE;
    BEGIN
        
        LOADTOKENS;

        
        IF  GTBALLTOKENS.EXISTS(ISBTOKEN)
            AND GTBALLTOKENS(ISBTOKEN).SBTOKENDOMAIN != CSBSINONIMO_PALABRA_DE_VIA
        THEN
            SBTOKEN := GTBALLTOKENS(ISBTOKEN).SBROOTTOKEN;
        ELSE
        
            ERRORS.SETERROR(CNUERRTOKENNOEXISTE, ISBTOKEN);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        RETURN SBTOKEN;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBTOKENBASE;


    















	


    











    FUNCTION FBLESCOMPLEMENTO
    (
        ISBSIMBOLO    IN  AB_TOKEN_HIERARCHY.TOKEN_HIERARCHY_ID%TYPE,
        ONUHIERARCHY  OUT AB_TOKEN_HIERARCHY.HIERARCHY%TYPE
    )
    RETURN BOOLEAN
    IS
    BEGIN
        IF ISBSIMBOLO IS NULL THEN
            RETURN FALSE;
        END IF;

        
        LOADTOKENS;

        
        IF  GTBALLTOKENS.EXISTS( ISBSIMBOLO )
            AND GTBALLTOKENS( ISBSIMBOLO ).SBTOKENDOMAIN = CSBDOMINIOCOMPLEMENTO
        THEN
            UT_TRACE.TRACE('fblesComplemento('||ISBSIMBOLO||') is TRUE',10);
            ONUHIERARCHY := GTBALLTOKENS(ISBSIMBOLO).NUHIERARCHY;
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLESCOMPLEMENTO;


    












    FUNCTION FNUDOMAINID
    (
        ISBSIMBOLO    IN  AB_TOKEN_HIERARCHY.TOKEN_HIERARCHY_ID%TYPE
    )
    RETURN AB_TOKEN_HIERARCHY.DOMAIN_ID%TYPE
    IS
    BEGIN
        IF ISBSIMBOLO IS NULL THEN
            RETURN NULL;
        END IF;

        
        LOADTOKENS;

        
        IF  GTBALLTOKENS.EXISTS( ISBSIMBOLO )  THEN
            RETURN GTBALLTOKENS( ISBSIMBOLO ).NUDOMAINID;
        END IF;

        RETURN NULL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUDOMAINID;


    















    FUNCTION FBLESSINONIMOPALABRAVIA
    (
        ISBTOKEN IN VARCHAR2,
        OSBTOKENPPAL OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
    BEGIN
        IF ( ISBTOKEN IS NULL ) THEN
            RETURN FALSE;
        END IF;

        
        LOADTOKENS;

        
        IF  GTBALLTOKENS.EXISTS(ISBTOKEN)
            AND GTBALLTOKENS(ISBTOKEN).SBROOTTOKEN != ISBTOKEN
            AND GTBALLTOKENS(ISBTOKEN).SBTOKENDOMAIN = CSBSINONIMO_PALABRA_DE_VIA
        THEN
            OSBTOKENPPAL := GTBALLTOKENS(ISBTOKEN).SBROOTTOKEN;
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLESSINONIMOPALABRAVIA;

    














    FUNCTION FBLISHOUSENUMBERSIMBOL
    (
        ISBTOKEN     IN  STYVAR1000
    )
    RETURN BOOLEAN
    IS
    BEGIN
        IF ISBTOKEN IS NULL THEN
            RETURN FALSE;
        END IF;

        
        LOADTOKENS;

        
        IF  GTBALLTOKENS.EXISTS(ISBTOKEN)
            AND GTBALLTOKENS(ISBTOKEN).SBTOKENDOMAIN = CSBHOUSENUMBERSIMBOL
        THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLISHOUSENUMBERSIMBOL;


    















    PROCEDURE VALIDATESYMBOL
    (
        ISBSYMBOL         IN UT_DATATYPES.STYMAXVARCHAR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicio: AB_BOParser.ValidateSymbol ['||ISBSYMBOL||']',5);

        IF AB_BCPARSER.FBLSYMBOLINWAY(ISBSYMBOL)
           OR (ISBSYMBOL||'a' != CSBDEF_HOUSE_SYMBOL||'a' AND AB_BOSECTOR.FBLSYMBOLINSECTORS(ISBSYMBOL))
        THEN
            
            
            
            ERRORS.SETERROR(CNUSYMBOLCONTAINED,ISBSYMBOL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fin: AB_Boparser.ValidateSymbol',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATESYMBOL;

    















    FUNCTION FSBHOUSENUMSYMBOL
    RETURN AB_TOKEN_HIERARCHY.TOKEN_DOMAIN%TYPE
    IS
    BEGIN
        RETURN AB_BCPARSER.FSBHOUSENUMSYMBOL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBHOUSENUMSYMBOL;
    
    















    PROCEDURE SUGGESTADDRESS
    (
        IUNGEOLOC  IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS IN AB_ADDRESS.ADDRESS_PARSED%TYPE,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
      UT_TRACE.TRACE('BEGIN AB_Boparser.SuggestAddress',10);
      ORFREFCURSOR:=  AB_BCPARSER.FRFSUGGESTADDRESS(IUNGEOLOC, UPPER(ISBADDRESS));
      UT_TRACE.TRACE('END AB_Boparser.SuggestAddress',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR AB_Boparser.SuggestAddress', 5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_Boparser.SuggestAddress', 5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SUGGESTADDRESS;
    
    

















    FUNCTION FNUADDRESSIDINDB
    (
        ISBADDRESS        IN UT_DATATYPES.STYMAXVARCHAR,
        INUGEOLOCATIONID  IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE
    )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE
    IS
        NUADDRESSID     AB_ADDRESS.ADDRESS_ID%TYPE;
        SBADDRESS       AB_ADDRESS.ADDRESS_PARSED%TYPE;
        TBSTRING        UT_STRING.TYTB_STRING;
    BEGIN
        UT_TRACE.TRACE('BEGIN AB_Boparser.fnuAddressIDInDB',10);

        
        IF UT_STRING.FNUINSTR(ISBADDRESS, CSBCOMPLESEPARATOR) <> 0 THEN
            
            UT_STRING.EXTSTRING(ISBADDRESS, GE_BOCONSTANTS.CSBCOLON, TBSTRING);

            SBADDRESS := UT_STRING.FSBDELETESUBSTRINGINSTRING(  ISBADDRESS,
                                                                GE_BOCONSTANTS.CSBCOLON||TBSTRING(TBSTRING.COUNT),
                                                                FALSE
                                                             );
            NUADDRESSID := AB_BOPARSER.FNUFINDADDRESS(SBADDRESS,
                                                      INUGEOLOCATIONID,
                                                      TBSTRING(TBSTRING.COUNT));

            


            IF NUADDRESSID = -1 THEN
                NUADDRESSID := AB_BOPARSER.FNUFINDADDRESS(ISBADDRESS,
                                                          INUGEOLOCATIONID,
                                                          NULL);
            END IF;
        ELSE
            NUADDRESSID := AB_BOPARSER.FNUFINDADDRESS(ISBADDRESS,
                                                      INUGEOLOCATIONID,
                                                      NULL);
        END IF;
        UT_TRACE.TRACE('END AB_Boparser.fnuAddressIDInDB',10);
        RETURN NUADDRESSID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR AB_Boparser.fnuAddressIDInDB', 5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_Boparser.fnuAddressIDInDB', 5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUADDRESSIDINDB;
    
BEGIN
    
    DABD_GRAMATICA.SETUSECACHE(TRUE);
END AB_BOPARSER;