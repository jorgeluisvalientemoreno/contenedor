
CREATE OR REPLACE PACKAGE BODY FA_BOREQCHARGESCANCELL IS
   CNUEXITO CONSTANT NUMBER := 0;
   CNUFALLO CONSTANT NUMBER := 1;
   CSBTOKEN_FINAN CONSTANT VARCHAR2( 3 ) := PKBILLCONST.CSBTOKEN_FINANCIACION;
   CSBPROGRAMA CONSTANT PROCESOS.PROCCODI%TYPE := 'CUSTOMER';
   CNUGEN_CAUSE CONSTANT NUMBER := FA_BOCHARGECAUSES.FNUCHARGESANULLCAUSE( PKCONSTANTE.NULLNUM );
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO234973';
   TYPE TYRCCHARGES IS RECORD
    (
      NUCONCEPT CONCEPTO.CONCCODI%TYPE,
      NUVALUE CARGOS.CARGVALO%TYPE,
      SBSIGN CARGOS.CARGSIGN%TYPE,
      NUPRODUCT SERVSUSC.SESUNUSE%TYPE
    );
   TYPE TYTBCHARGES IS TABLE OF TYRCCHARGES INDEX BY BINARY_INTEGER;
   TYPE TYTBACCOUNTCHRGS IS TABLE OF TYTBCHARGES INDEX BY VARCHAR2( 100 );
   TYPE TYTBBILLACCOUNTS IS TABLE OF TYTBACCOUNTCHRGS INDEX BY VARCHAR2( 100 );
   TYPE TYTBPACKBILLACCS IS TABLE OF FACTURA.FACTCODI%TYPE INDEX BY VARCHAR2( 100 );
   GBOPARAMLOADED BOOLEAN := FALSE;
   NUERRCODE GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      PKERRORS.PUSH( 'FA_BOReqChargesCancell.fsbVersion' );
      PKERRORS.POP;
      RETURN FA_BOREQCHARGESCANCELL.CSBVERSION;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FSBVERSION;
   PROCEDURE GETPARAMETERS
    IS
    BEGIN
      PKERRORS.PUSH( 'FA_BOReqChargesCancell.GetParameters' );
      IF ( GBOPARAMLOADED ) THEN
         RETURN;
      END IF;
      PKGRLPARAMEXTENDEDMGR.SETCACHEON;
      GBOPARAMLOADED := TRUE;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         GBOPARAMLOADED := FALSE;
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         GBOPARAMLOADED := FALSE;
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END GETPARAMETERS;
   PROCEDURE CHARGESCANCELLBYPACK( INUPACKAGE IN MO_PACKAGES.PACKAGE_ID%TYPE, ONURESPONSE OUT NUMBER )
    IS
      TBNOTBILLEDCHRGS TYTBCHARGES;
      TBBILLEDCHRGS TYTBBILLACCOUNTS;
      TBPACKBILLACCS TYTBPACKBILLACCS;
      FUNCTION FSBGETBILLSIGN( INUBILLACC IN FACTURA.FACTCODI%TYPE )
       RETURN CARGOS.CARGSIGN%TYPE
       IS
         TBACCOUNTS TYTBACCOUNTCHRGS;
         NUACCIDX NUMBER;
         NUACUMBILLVALUE NUMBER;
         NUCONCIDX NUMBER;
         SBBILLSIGN CARGOS.CARGSIGN%TYPE;
       BEGIN
         PKERRORS.PUSH( 'FA_BOReqChargesCancell.ChargesCancellByPack.fsbGetBillSign' );
         UT_TRACE.TRACE( 'FA_BOReqChargesCancell.ChargesCancellByPack.fsbGetBillSign', 16 );
         TBACCOUNTS.DELETE;
         NUACUMBILLVALUE := 0;
         TBACCOUNTS := TBBILLEDCHRGS( INUBILLACC );
         NUACCIDX := TBACCOUNTS.FIRST;
         LOOP
            EXIT WHEN NUACCIDX IS NULL;
            NUCONCIDX := TBACCOUNTS( NUACCIDX ).FIRST;
            LOOP
               EXIT WHEN NUCONCIDX IS NULL;
               NUACUMBILLVALUE := NUACUMBILLVALUE + TBACCOUNTS( NUACCIDX )( NUCONCIDX ).NUVALUE;
               NUCONCIDX := TBACCOUNTS( NUACCIDX ).NEXT( NUCONCIDX );
            END LOOP;
            NUACCIDX := TBACCOUNTS.NEXT( NUACCIDX );
         END LOOP;
         IF ( NUACUMBILLVALUE >= PKBILLCONST.CERO ) THEN
            SBBILLSIGN := PKBILLCONST.DEBITO;
          ELSE
            SBBILLSIGN := PKBILLCONST.CREDITO;
         END IF;
         PKERRORS.POP;
         RETURN SBBILLSIGN;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END FSBGETBILLSIGN;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'FA_BOReqChargesCancell.ChargesCancellByPack.initialize' );
         UT_TRACE.TRACE( 'FA_BOReqChargesCancell.ChargesCancellByPack.initialize', 16 );
         TBNOTBILLEDCHRGS.DELETE;
         TBBILLEDCHRGS.DELETE;
         TBPACKBILLACCS.DELETE;
         ONURESPONSE := CNUEXITO;
         PKERRORS.SETAPPLICATION( CSBPROGRAMA );
         NUERRCODE := PKBILLCONST.CERO;
         SBERRMSG := PKCONSTANTE.NULLSB;
         UT_TRACE.TRACE( 'Fin FA_BOReqChargesCancell.ChargesCancellByPack.initialize', 16 );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END INITIALIZE;
      PROCEDURE GETPROCESSDATA
       IS
         SBPACKAGETOKEN VARCHAR2( 40 );
         NUPARENTPACK MO_PACKAGES.PACKAGE_ID%TYPE;
         NUBILLACC FACTURA.FACTCODI%TYPE;
         NUACCOUNT CUENCOBR.CUCOCODI%TYPE;
         NUPRODUCT SERVSUSC.SESUNUSE%TYPE;
         NUCONCEPT CONCEPTO.CONCCODI%TYPE;
         NUVALUE CARGOS.CARGVALO%TYPE;
         TBCHARGES PKTBLCARGOS.TYTBCARGOS;
         NUCHRGIDX NUMBER;
         RFBILLACCS PKCONSTANTE.TYREFCURSOR;
         TYPE TYTBBILLACCBYACC IS TABLE OF FACTURA.FACTCODI%TYPE INDEX BY VARCHAR2( 100 );
         TBBILLACCBYACC TYTBBILLACCBYACC;
         NUNOTBILLEDIDX NUMBER;
       BEGIN
         PKERRORS.PUSH( 'FA_BOReqChargesCancell.ChargesCancellByPack.GetProcessData' );
         UT_TRACE.TRACE( 'FA_BOReqChargesCancell.ChargesCancellByPack.GetProcessData', 16 );
         TBBILLACCBYACC.DELETE;
         SBPACKAGETOKEN := NULL;
         NUPRODUCT := NULL;
         NUBILLACC := NULL;
         NUPARENTPACK := NULL;
         RFBILLACCS := MO_BCPACKAGE_PAYMENT.FRFGETBILLSBYPACKAGE( INUPACKAGE );
         LOOP
            FETCH RFBILLACCS
               INTO NUBILLACC;
            EXIT WHEN RFBILLACCS%NOTFOUND;
            IF ( NOT TBPACKBILLACCS.EXISTS( NUBILLACC ) AND NUBILLACC IS NOT NULL ) THEN
               TBPACKBILLACCS( NUBILLACC ) := NUBILLACC;
            END IF;
         END LOOP;
         CLOSE RFBILLACCS;
         NUPARENTPACK := MO_BOPACKAGES_ASSO.FNUGETREQUESTID( INUPACKAGE );
         IF ( NUPARENTPACK IS NOT NULL ) THEN
            RFBILLACCS := MO_BCPACKAGE_PAYMENT.FRFGETBILLSBYPACKAGE( NUPARENTPACK );
            LOOP
               FETCH RFBILLACCS
                  INTO NUBILLACC;
               EXIT WHEN RFBILLACCS%NOTFOUND;
               IF ( NOT TBPACKBILLACCS.EXISTS( NUBILLACC ) AND NUBILLACC IS NOT NULL ) THEN
                  TBPACKBILLACCS( NUBILLACC ) := NUBILLACC;
               END IF;
            END LOOP;
            CLOSE RFBILLACCS;
         END IF;
         NUBILLACC := NULL;
         SBPACKAGETOKEN := PKBILLCONST.CSBTOKEN_SOLICITUD || '-' || INUPACKAGE;
         PKBCCARGOS.GETCHARGESBYSUPPDOCORD( SBPACKAGETOKEN, TBCHARGES );
         IF ( TBCHARGES.CARGCONC.COUNT <= PKBILLCONST.CERO ) THEN
            UT_TRACE.TRACE( 'La Solicitud No Posee Cargos, Proceso Exitoso', 18 );
            PKERRORS.POP;
            RETURN;
         END IF;
         NUCHRGIDX := TBCHARGES.CARGCONC.FIRST;
         LOOP
            EXIT WHEN NUCHRGIDX IS NULL;
            IF ( TBCHARGES.CARGCUCO( NUCHRGIDX ) = PKCONSTANTE.NULLNUM ) THEN
               NUNOTBILLEDIDX := TBNOTBILLEDCHRGS.COUNT + 1;
               TBNOTBILLEDCHRGS( NUNOTBILLEDIDX ).NUCONCEPT := TBCHARGES.CARGCONC( NUCHRGIDX );
               TBNOTBILLEDCHRGS( NUNOTBILLEDIDX ).NUVALUE := TBCHARGES.CARGVALO( NUCHRGIDX );
               TBNOTBILLEDCHRGS( NUNOTBILLEDIDX ).SBSIGN := TBCHARGES.CARGSIGN( NUCHRGIDX );
               TBNOTBILLEDCHRGS( NUNOTBILLEDIDX ).NUPRODUCT := TBCHARGES.CARGNUSE( NUCHRGIDX );
             ELSE
               NUPRODUCT := TBCHARGES.CARGNUSE( NUCHRGIDX );
               NUACCOUNT := TBCHARGES.CARGCUCO( NUCHRGIDX );
               NUCONCEPT := TBCHARGES.CARGCONC( NUCHRGIDX );
               IF ( TBCHARGES.CARGSIGN( NUCHRGIDX ) = PKBILLCONST.DEBITO ) THEN
                  NUVALUE := TBCHARGES.CARGVALO( NUCHRGIDX );
                ELSE
                  NUVALUE := TBCHARGES.CARGVALO( NUCHRGIDX ) * -1;
               END IF;
               IF ( NOT TBBILLACCBYACC.EXISTS( NUACCOUNT ) ) THEN
                  NUBILLACC := PKTBLCUENCOBR.FNUGETCUCOFACT( NUACCOUNT );
                  TBBILLACCBYACC( NUACCOUNT ) := NUBILLACC;
                ELSE
                  NUBILLACC := TBBILLACCBYACC( NUACCOUNT );
               END IF;
               IF ( NOT TBBILLEDCHRGS.EXISTS( NUBILLACC ) ) THEN
                  TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUCONCEPT := NUCONCEPT;
                  TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUPRODUCT := NUPRODUCT;
                  TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUVALUE := NUVALUE;
                ELSE
                  IF ( TBBILLEDCHRGS( NUBILLACC ).EXISTS( NUACCOUNT ) ) THEN
                     IF ( TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT ).EXISTS( NUCONCEPT ) ) THEN
                        TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUVALUE := TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUVALUE + NUVALUE;
                      ELSE
                        TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUCONCEPT := NUCONCEPT;
                        TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUPRODUCT := NUPRODUCT;
                        TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUVALUE := NUVALUE;
                     END IF;
                   ELSE
                     TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUCONCEPT := NUCONCEPT;
                     TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUPRODUCT := NUPRODUCT;
                     TBBILLEDCHRGS( NUBILLACC )( NUACCOUNT )( NUCONCEPT ).NUVALUE := NUVALUE;
                  END IF;
               END IF;
            END IF;
            NUCHRGIDX := TBCHARGES.CARGCONC.NEXT( NUCHRGIDX );
         END LOOP;
         UT_TRACE.TRACE( 'Fin FA_BOReqChargesCancell.ChargesCancellByPack.GetProcessData', 16 );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END GETPROCESSDATA;
      PROCEDURE DEFERREDSCANCELL( INUFINANCIGID IN DIFERIDO.DIFECOFI%TYPE )
       IS
         TBDEFERREDS PKTBLDIFERIDO.TYDIFECODI;
         NUDEFIDX NUMBER;
       BEGIN
         PKERRORS.PUSH( 'FA_BOReqChargesCancell.ChargesCancellByPack.DeferredsCancell' );
         UT_TRACE.TRACE( 'FA_BOReqChargesCancell.ChargesCancellByPack.DeferredsCancell', 16 );
         TBDEFERREDS.DELETE;
         PKBCDIFERIDO.GETDEFERREDSBYFINANC( INUFINANCIGID, TBDEFERREDS );
         UT_TRACE.TRACE( 'Diferidos a Cancelar: ' || TBDEFERREDS.COUNT, 18 );
         CC_BODEFTOCURTRANSFER.GLOBALINITIALIZE;
         NUDEFIDX := TBDEFERREDS.FIRST;
         LOOP
            EXIT WHEN NUDEFIDX IS NULL;
            CC_BODEFTOCURTRANSFER.ADDDEFERTOCOLLECT( TBDEFERREDS( NUDEFIDX ) );
            NUDEFIDX := TBDEFERREDS.NEXT( NUDEFIDX );
         END LOOP;
         UT_TRACE.TRACE( 'Diferidos Instanciados: ' || TBDEFERREDS.COUNT, 18 );
         CC_BODEFTOCURTRANSFER.TRANSFERDEBT( CSBPROGRAMA, NUERRCODE, SBERRMSG, FALSE, PKBILLCONST.CERO, PKGENERALSERVICES.FDTGETSYSTEMDATE, TRUE );
         IF ( NUERRCODE != PKCONSTANTE.EXITO ) THEN
            ERRORS.SETERROR;
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         END IF;
         CC_BODEFTOCURTRANSFER.GLOBALINITIALIZE;
         UT_TRACE.TRACE( 'Proceso de Cancelacion de Diferidos Terminado', 18 );
         UT_TRACE.TRACE( 'Fin FA_BOReqChargesCancell.ChargesCancellByPack.DeferredsCancell', 16 );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END DEFERREDSCANCELL;
      PROCEDURE CHARGESCANCELLNOTE( INUBILLACC IN FACTURA.FACTCODI%TYPE )
       IS
         NUNOTANUME NOTAS.NOTANUME%TYPE;
         SBNOTADOSO NOTAS.NOTADOSO%TYPE;
         TBNOTEACCOUNTS TYTBACCOUNTCHRGS;
         NUACCSIDX NUMBER;
         NUCONCIDX NUMBER;
         NUPRODUCT SERVSUSC.SESUNUSE%TYPE;
         NUCUENCOBR CUENCOBR.CUCOCODI%TYPE;
         SBLASTCHARGE VARCHAR2( 1 ) := PKCONSTANTE.NO;
         SBBILLSIGN CARGOS.CARGSIGN%TYPE;
         NUNOTESIGN NUMBER;
         SBNOTECHGRSIGN CARGOS.CARGSIGN%TYPE;
         NUCAUSE CARGOS.CARGCACA%TYPE;
       BEGIN
         PKERRORS.PUSH( 'FA_BOReqChargesCancell.ChargesCancellByPack.ChargesCancellNote' );
         UT_TRACE.TRACE( 'FA_BOReqChargesCancell.ChargesCancellByPack.ChargesCancellNote', 16 );
         TBNOTEACCOUNTS.DELETE;
         TBNOTEACCOUNTS := TBBILLEDCHRGS( INUBILLACC );
         NUACCSIDX := TBNOTEACCOUNTS.FIRST;
         LOOP
            EXIT WHEN NUACCSIDX IS NULL;
            SBBILLSIGN := FSBGETBILLSIGN( INUBILLACC );
            NUCONCIDX := TBNOTEACCOUNTS( NUACCSIDX ).FIRST;
            LOOP
               EXIT WHEN NUCONCIDX IS NULL;
               IF ( NUACCSIDX = TBNOTEACCOUNTS.FIRST AND NUCONCIDX = TBNOTEACCOUNTS( NUACCSIDX ).FIRST ) THEN
                  NUPRODUCT := TBNOTEACCOUNTS( NUACCSIDX )( NUCONCIDX ).NUPRODUCT;
                  NUCUENCOBR := NUACCSIDX;
                  IF ( SBBILLSIGN = PKBILLCONST.CREDITO ) THEN
                     NUNOTESIGN := PKBILLINGNOTEMGR.CNUTD_NOTA_DEBITO;
                   ELSE
                     NUNOTESIGN := PKBILLINGNOTEMGR.CNUTD_NOTA_CREDITO;
                  END IF;
                  PKBOBILLINGNOTESCRDB.REGISTROENCABEZADONOTA( NUPRODUCT, NUCUENCOBR, NUNOTESIGN, 'Nota --> Anulacion de Solicitud: ' || INUPACKAGE, NUNOTANUME, SBNOTADOSO );
               END IF;
               NUCAUSE := CNUGEN_CAUSE;
               IF ( NUCONCIDX = TBNOTEACCOUNTS( NUACCSIDX ).LAST ) THEN
                  SBLASTCHARGE := PKCONSTANTE.SI;
                ELSE
                  SBLASTCHARGE := PKCONSTANTE.NO;
               END IF;
               IF ( TBNOTEACCOUNTS( NUACCSIDX )( NUCONCIDX ).NUVALUE >= 0 ) THEN
                  SBNOTECHGRSIGN := PKBILLCONST.CREDITO;
                ELSE
                  SBNOTECHGRSIGN := PKBILLCONST.DEBITO;
               END IF;
               PKBOBILLINGNOTESCRDB.REGISTRODETALLENOTA( NUNOTANUME, TBNOTEACCOUNTS( NUACCSIDX )( NUCONCIDX ).NUPRODUCT, NUACCSIDX, NUCONCIDX, PKBILLCONST.CERO, SBNOTECHGRSIGN, NUCAUSE, ABS( TBNOTEACCOUNTS( NUACCSIDX )( NUCONCIDX ).NUVALUE ), SBNOTADOSO, SBLASTCHARGE );
               NUCONCIDX := TBNOTEACCOUNTS( NUACCSIDX ).NEXT( NUCONCIDX );
            END LOOP;
            NUACCSIDX := TBNOTEACCOUNTS.NEXT( NUACCSIDX );
         END LOOP;
         UT_TRACE.TRACE( 'Numerando fiscalmente la Nota [' || NUNOTANUME || ']', 17 );
         PKBILLINGNOTEMGR.PROCESONUMERACIONFISCAL( NUNOTANUME );
         UT_TRACE.TRACE( 'Fin FA_BOReqChargesCancell.ChargesCancellByPack.ChargesCancellNote', 16 );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END CHARGESCANCELLNOTE;
      PROCEDURE CHARGESCANCEL
       IS
         NUNBCHRGSIDX NUMBER;
         NUCARGSIGN CARGOS.CARGSIGN%TYPE;
         NUCAUSE CARGOS.CARGCACA%TYPE;
       BEGIN
         PKERRORS.PUSH( 'FA_BOReqChargesCancell.ChargesCancellByPack.ChargesCancel' );
         UT_TRACE.TRACE( 'FA_BOReqChargesCancell.ChargesCancellByPack.ChargesCancel', 16 );
         NUCAUSE := CNUGEN_CAUSE;
         NUNBCHRGSIDX := TBNOTBILLEDCHRGS.FIRST;
         LOOP
            EXIT WHEN NUNBCHRGSIDX IS NULL;
            IF ( TBNOTBILLEDCHRGS( NUNBCHRGSIDX ).SBSIGN = PKBILLCONST.DEBITO ) THEN
               NUCARGSIGN := PKBILLCONST.CREDITO;
             ELSE
               NUCARGSIGN := PKBILLCONST.DEBITO;
            END IF;
            PKCHARGEMGR.GENERATECHARGE( TBNOTBILLEDCHRGS( NUNBCHRGSIDX ).NUPRODUCT, PKCONSTANTE.NULLNUM, TBNOTBILLEDCHRGS( NUNBCHRGSIDX ).NUCONCEPT, NUCAUSE, TBNOTBILLEDCHRGS( NUNBCHRGSIDX ).NUVALUE, NUCARGSIGN, PKCONSTANTE.NULLSB );
            NUNBCHRGSIDX := TBNOTBILLEDCHRGS.NEXT( NUNBCHRGSIDX );
         END LOOP;
         UT_TRACE.TRACE( 'Fin FA_BOReqChargesCancell.ChargesCancellByPack.ChargesCancel', 16 );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END CHARGESCANCEL;
      PROCEDURE DOPROCESS
       IS
         NUBILLACCIDX NUMBER;
         TBNOTESBYBILL PKTBLNOTAS.TYTBNOTAS;
         TBCLEANNOTES PKTBLNOTAS.TYTBNOTAS;
         NUNOTESIDX NUMBER;
         NUFINANCINGID DIFERIDO.DIFECOFI%TYPE;
       BEGIN
         PKERRORS.PUSH( 'FA_BOReqChargesCancell.ChargesCancellByPack.DoProcess' );
         UT_TRACE.TRACE( 'Inicia <<FA_BOReqChargesCancell.ChargesCancellByPack.DoProcess>>', 16 );
         TBNOTESBYBILL := TBCLEANNOTES;
         IF ( TBNOTBILLEDCHRGS.COUNT > 0 ) THEN
            UT_TRACE.TRACE( 'Inicia Cancelacion de Cargos No Facturados', 5 );
            BEGIN
               CHARGESCANCEL;
             EXCEPTION
               WHEN OTHERS THEN
                  ERRORS.SETERROR;
                  ROLLBACK TO ACTIVITY_ROLLBACK;
                  ONURESPONSE := CNUFALLO;
                  PKERRORS.POP;
                  RETURN;
            END;
            UT_TRACE.TRACE( 'Termina Cancelacion de Cargos No Facturados', 5 );
         END IF;
         UT_TRACE.TRACE( 'Inicia Cancelacion de Cargos Facturados', 5 );
         NUBILLACCIDX := TBBILLEDCHRGS.FIRST;
         LOOP
            EXIT WHEN NUBILLACCIDX IS NULL;
            PKBCNOTAS.GETBILLINGNOTESBYBILL( NUBILLACCIDX, TBNOTESBYBILL );
            IF ( TBPACKBILLACCS.EXISTS( NUBILLACCIDX ) ) THEN
               IF ( TBNOTESBYBILL.NOTANUME.COUNT > 0 ) THEN
                  UT_TRACE.TRACE( 'Existen ' || TBNOTESBYBILL.NOTANUME.COUNT || ' notas ' || ' asociadas a la factura de la solicitud', 18 );
                  NUNOTESIDX := TBNOTESBYBILL.NOTANUME.FIRST;
                  LOOP
                     EXIT WHEN NUNOTESIDX IS NULL;
                     NUFINANCINGID := NULL;
                     IF ( INSTR( TBNOTESBYBILL.NOTAOBSE( NUNOTESIDX ), CSBTOKEN_FINAN ) = 1 ) THEN
                        NUFINANCINGID := TO_NUMBER( SUBSTR( TBNOTESBYBILL.NOTAOBSE( NUNOTESIDX ), 4 ) );
                        UT_TRACE.TRACE( 'Se cancelan los Diferidos asociados a la factura', 18 );
                        BEGIN
                           DEFERREDSCANCELL( NUFINANCINGID );
                         EXCEPTION
                           WHEN OTHERS THEN
                              ROLLBACK TO ACTIVITY_ROLLBACK;
                              ONURESPONSE := CNUFALLO;
                              PKERRORS.POP;
                              RETURN;
                        END;
                     END IF;
                     NUNOTESIDX := TBNOTESBYBILL.NOTANUME.NEXT( NUNOTESIDX );
                  END LOOP;
               END IF;
               BEGIN
                  CHARGESCANCELLNOTE( NUBILLACCIDX );
                EXCEPTION
                  WHEN OTHERS THEN
                     ERRORS.SETERROR;
                     ROLLBACK TO ACTIVITY_ROLLBACK;
                     ONURESPONSE := CNUFALLO;
                     PKERRORS.POP;
                     RETURN;
               END;
             ELSE
               IF ( TBNOTESBYBILL.NOTANUME.COUNT > 0 ) THEN
                  UT_TRACE.TRACE( 'La Factura posee Notas Asociadas', 18 );
                  ROLLBACK TO ACTIVITY_ROLLBACK;
                  ONURESPONSE := CNUFALLO;
                  PKERRORS.POP;
                  RETURN;
                ELSE
                  BEGIN
                     CHARGESCANCELLNOTE( NUBILLACCIDX );
                   EXCEPTION
                     WHEN OTHERS THEN
                        ERRORS.SETERROR;
                        ROLLBACK TO ACTIVITY_ROLLBACK;
                        ONURESPONSE := CNUFALLO;
                        PKERRORS.POP;
                        RETURN;
                  END;
               END IF;
            END IF;
            NUBILLACCIDX := TBBILLEDCHRGS.NEXT( NUBILLACCIDX );
         END LOOP;
         UT_TRACE.TRACE( 'Termina Cancelacion de Cargos Facturados', 5 );
         PKERRORS.SETAPPLICATION( '' );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END DOPROCESS;
    BEGIN
      PKERRORS.PUSH( 'FA_BOReqChargesCancell.ChargesCancellByPack' );
      UT_TRACE.TRACE( 'FA_BOReqChargesCancell.ChargesCancellByPack', 15 );
      SAVEPOINT ACTIVITY_ROLLBACK;
      INITIALIZE;
      GETPROCESSDATA;
      DOPROCESS;
      UT_TRACE.TRACE( 'Fin FA_BOReqChargesCancell.ChargesCancellByPack', 15 );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
         ROLLBACK TO ACTIVITY_ROLLBACK;
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK TO ACTIVITY_ROLLBACK;
         ERRORS.SETERROR;
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
   END CHARGESCANCELLBYPACK;
END FA_BOREQCHARGESCANCELL;
/


