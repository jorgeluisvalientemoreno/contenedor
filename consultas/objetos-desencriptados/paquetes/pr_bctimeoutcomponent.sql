CREATE OR REPLACE PACKAGE BODY PR_BCTIMEOUTCOMPONENT IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO194374';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION FNUGETINITIALDATE( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, INUELEMENTID IN IF_NODE.ID%TYPE )
    RETURN DATE
    IS
      CURSOR CUINITDATE( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, INUELEMENTID IN IF_NODE.ID%TYPE ) IS
SELECT initial_date
          FROM pr_timeout_component
         WHERE pr_timeout_component.package_id = inuPackageId
           AND pr_timeout_component.element_id = inuElementId
           AND pr_timeout_component.final_date IS null
           AND pr_timeout_component.component_id IS null;
      DTINITIALDATE PR_TIMEOUT_COMPONENT.INITIAL_DATE%TYPE;
    BEGIN
      OPEN CUINITDATE( INUPACKAGEID, INUELEMENTID );
      FETCH CUINITDATE
         INTO DTINITIALDATE;
      CLOSE CUINITDATE;
      RETURN DTINITIALDATE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF CUINITDATE%ISOPEN THEN
            CLOSE CUINITDATE;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF CUINITDATE%ISOPEN THEN
            CLOSE CUINITDATE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETDOWNTIMEOFSERVICE( INUCOMPONENT IN PR_TIMEOUT_COMPONENT.COMPONENT_ID%TYPE, IDTDATEINI IN PR_TIMEOUT_COMPONENT.AUTHORIZATION_DATE%TYPE, IDTDATEFIN IN PR_TIMEOUT_COMPONENT.AUTHORIZATION_DATE%TYPE, ORFDONWTIME OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      OPEN ORFDONWTIME FOR SELECT /*+
                       index(PR_TIMEOUT_COMPONENT IDX_PR_TIMEOUT_COMPONENT04 )
                   */
                   timeout_component_id,
                   component_id,
                   initial_date,
                   final_date,
                   package_id,
                   element_id,
                   authorization_date,
                   suspended_time,
                   compensated_time
              FROM pr_timeout_component
                   /* pr_bcTimeoutComponent.GetDownTimeOfService */
             WHERE pr_timeout_component.authorization_date >= idtDateIni
               AND pr_timeout_component.authorization_date <  trunc( idtDateFin ) + 1
               AND pr_timeout_component.authorization_date is not null
               AND pr_timeout_component.component_id = inuComponent;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ORFDONWTIME%ISOPEN THEN
            CLOSE ORFDONWTIME;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ORFDONWTIME%ISOPEN THEN
            CLOSE ORFDONWTIME;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETDOWNTIMEOFSERVICE;
   FUNCTION FNUGETCOMPETIME( IDTINITIALDATE IN PR_TIMEOUT_COMPONENT.INITIAL_DATE%TYPE, IDTFINADATE IN PR_TIMEOUT_COMPONENT.FINAL_DATE%TYPE, INUSUSPETIME IN PR_TIMEOUT_COMPONENT.SUSPENDED_TIME%TYPE, INUCOMPETIME IN PR_TIMEOUT_COMPONENT.COMPENSATED_TIME%TYPE )
    RETURN PR_TIMEOUT_COMPONENT.COMPENSATED_TIME%TYPE
    IS
      NUMAXCOMPETIME PR_TIMEOUT_COMPONENT.COMPENSATED_TIME%TYPE := 0;
      NUCOMPETIME PR_TIMEOUT_COMPONENT.COMPENSATED_TIME%TYPE := INUCOMPETIME;
      SBOUT VARCHAR2( 1000 );
      NUERR NUMBER;
    BEGIN
      IF ( INUCOMPETIME IS NULL ) THEN
         RETURN NULL;
      END IF;
      NUMAXCOMPETIME := ( IDTFINADATE - IDTINITIALDATE ) * 1440;
      NUMAXCOMPETIME := NUMAXCOMPETIME - NVL( INUSUSPETIME, 0 );
      IF ( NUMAXCOMPETIME < 0 ) THEN
         NUMAXCOMPETIME := 0;
      END IF;
      IF ( NUCOMPETIME > NUMAXCOMPETIME ) THEN
         NUCOMPETIME := NUMAXCOMPETIME;
       ELSE
         NUCOMPETIME := INUCOMPETIME;
      END IF;
      RETURN NUCOMPETIME;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( NUERR, SBOUT );
         UT_TRACE.TRACE( 'ex.CONTROLLED_ERROR: ' || NUERR || '-' || SBOUT, 3 );
         RETURN 0;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( NUERR, SBOUT );
         UT_TRACE.TRACE( 'others: ' || NUERR || '-' || SBOUT, 3 );
         RETURN 0;
   END FNUGETCOMPETIME;
   PROCEDURE UPDRECORDS( ITBTIMEOUT IN DAPR_TIMEOUT_COMPONENT.TYTBTIMEOUT_COMPONENT_ID, ITBAUTHODATE IN DAPR_TIMEOUT_COMPONENT.TYTBAUTHORIZATION_DATE, ITBCOMPETIME IN DAPR_TIMEOUT_COMPONENT.TYTBCOMPENSATED_TIME )
    IS
      NUCOUNT NUMBER := 0;
    BEGIN
      NUCOUNT := ITBTIMEOUT.COUNT;
      FORALL I IN 1..NUCOUNT
         UPDATE /*+
                       index( PR_TIMEOUT_COMPONENT PK_PR_TIMEOUT_COMPONENT )
                   */
                   pr_timeout_component
                   /*+ pr_bcTimeoutComponent.UpdRecords */
               SET authorization_date   = itbAuthoDate(i),
                   compensated_time     = itbCompeTime(i)
             WHERE timeout_component_id = itbTimeout(i);
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDRECORDS;
END PR_BCTIMEOUTCOMPONENT;
/


