PACKAGE WF_BOEIFINSTANCE AS


































    
    
    

    
    
    

    
    
    
    



    FUNCTION FSBVERSION  RETURN VARCHAR2;

    PROCEDURE INSTANCERECOVER
	(
        INUEXCLOGID IN WF_EXCEPTION_LOG.EXCEPTION_LOG_ID%TYPE
	);

	PROCEDURE INSTANCERECOVER
	(
        INUEXCLOGID IN WF_EXCEPTION_LOG.EXCEPTION_LOG_ID%TYPE,
        NUCODERROR  OUT GE_MESSAGE.MESSAGE_ID%TYPE,
        SBMSGERROR  OUT VARCHAR2
	);

    PROCEDURE SUSPENDINSTANCE
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
        ONURETURN     OUT  NUMBER
    );

    PROCEDURE REACTIVATEINSTANCE
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
        ONURETURN  OUT NUMBER
    );
    
    PROCEDURE GETPROCESSNODES
    (
        INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETINSTANCEDATAMAP
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETEXCEPTIONSBYINSTANCE
    (
        INUINSTANCEID   IN  WF_EXCEPTION_LOG.INSTANCE_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETTRANSBYPROCESS
    (
        INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETEXCEPTIONTYPES
    (
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETORDERSFROMINSTANCE
    (
        INUINSTANCEID  IN NUMBER,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE GETINSTANCEATTRIBS
    (
        INUINSTANCEID IN WF_INSTANCE_ATTRIB.INSTANCE_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    );

    PROCEDURE SAVERECORD
    (
        IONUINSTANCEID     IN OUT  WF_INSTANCE.INSTANCE_ID%TYPE,
        ISBDESCRIPTION         IN  WF_INSTANCE.DESCRIPTION%TYPE,
        INUPARENTID            IN  WF_INSTANCE.PARENT_ID%TYPE,
        INUORIGINALTASK        IN  WF_INSTANCE.ORIGINAL_TASK%TYPE,
        INUPLANID              IN  WF_INSTANCE.PLAN_ID%TYPE,
        INUUNITID              IN  WF_INSTANCE.UNIT_ID%TYPE,
        INUSTATUSID            IN  WF_INSTANCE.STATUS_ID%TYPE,
        INUPREVIOUSSTATUSID    IN  WF_INSTANCE.PREVIOUS_STATUS_ID%TYPE,
        INUONLINEEXECID        IN  WF_INSTANCE.ONLINE_EXEC_ID%TYPE,
        INUACTIONID            IN  WF_INSTANCE.ACTION_ID%TYPE,
        INUPREEXPRESSIONID     IN  WF_INSTANCE.PRE_EXPRESSION_ID%TYPE,
        INUPOSEXPRESSIONID     IN  WF_INSTANCE.POS_EXPRESSION_ID%TYPE,
        INUQUANTITY            IN  WF_INSTANCE.QUANTITY%TYPE,
        INUSINCRONICTIMEOUT    IN  WF_INSTANCE.SINCRONIC_TIMEOUT%TYPE,
        INUASINCRONICTIMEOUT   IN  WF_INSTANCE.ASINCRONIC_TIMEOUT%TYPE,
        INULAYERID             IN  WF_INSTANCE.LAYER_ID%TYPE,
        ISBEXTERNALID          IN  WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBGEOMETRY            IN  WF_INSTANCE.GEOMETRY%TYPE,
        INUTRYNUMBER           IN  WF_INSTANCE.TRY_NUMBER%TYPE,
        ISBMULTIINSTANCE       IN  WF_INSTANCE.MULTI_INSTANCE%TYPE,
        INUFUNCTIONTYPE        IN  WF_INSTANCE.FUNCTION_TYPE%TYPE,
        INUNODETYPEID          IN  WF_INSTANCE.NODE_TYPE_ID%TYPE,
        INUMODULEID            IN  WF_INSTANCE.MODULE_ID%TYPE,
        ISBISCOUNTABLE         IN  WF_INSTANCE.IS_COUNTABLE%TYPE,
        INUTOTALTIME           IN  WF_INSTANCE.TOTAL_TIME%TYPE,
        ISBPARENTEXTERNALID    IN  WF_INSTANCE.PARENT_EXTERNAL_ID%TYPE,
        INUENTITYID            IN  WF_INSTANCE.ENTITY_ID%TYPE,
        INUPAREXTENTITYID      IN  WF_INSTANCE.PAR_EXT_ENTITY_ID%TYPE,
        INUGROUPID             IN  WF_INSTANCE.GROUP_ID%TYPE,
        INUMINGROUPSIZE        IN  WF_INSTANCE.MIN_GROUP_SIZE%TYPE,
        INUUNITTYPEID          IN  WF_INSTANCE.UNIT_TYPE_ID%TYPE,
        ISBEXECUTIONORDER      IN  WF_INSTANCE.EXECUTION_ORDER%TYPE,
        ISBANNULATIONORDER     IN  WF_INSTANCE.ANNULATION_ORDER%TYPE,
        INUNOTIFICATIONID      IN  WF_INSTANCE.NOTIFICATION_ID%TYPE,
        INUEXECUTIONID         IN  WF_INSTANCE.EXECUTION_ID%TYPE,
        INUPREVIOUSINSTANCEID  IN  WF_INSTANCE.PREVIOUS_INSTANCE_ID%TYPE
    );
    
    PROCEDURE RECOVERINSTANCE
    (
       INUINSTANCEID IN WF_EXCEPTION_LOG.INSTANCE_ID%TYPE
    );
    
    PROCEDURE RECOVERINSTANCE
    (
       INUINSTANCEID IN WF_EXCEPTION_LOG.INSTANCE_ID%TYPE,
       ONUCODERROR  OUT  NUMBER,
       OSBMSGERROR  OUT VARCHAR2
    );
    
    
















	PROCEDURE DELRECORD
	(
		INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
	);
	
	



    PROCEDURE RECOVERRETAINEDINSTANCE
	(
		INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
	);
	
	




    PROCEDURE RECOVERRETAINEDINSTANCES;
    
END WF_BOEIFINSTANCE;
/

PACKAGE BODY WF_BOEIFINSTANCE
AS  
    












    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO561641';
    CNUERRORRECOVER CONSTANT NUMBER(4)  := '3782';
    CNUTABLEPARAMETER CONSTANT NUMBER(10) := 1932;
    
    CNUEXCEPTIONTYPE    CONSTANT NUMBER(4)  := 15;
    
    CNUACTIVEEXCSTATUS  CONSTANT NUMBER(2)  := 1;
    
    CNUFIXEDEXCSTATUS   CONSTANT NUMBER(2)  := 2;


    
    
    

    
    
    
    
	



	PROCEDURE RECOVERINS(NUERRLOGID IN NUMBER, NUCODERROR OUT NUMBER, SBMSGERROR OUT VARCHAR2)
	AS LANGUAGE JAVA
    NAME 'os.wf.engine.kernel.ExceptionAgent.recover(int, int[], java.lang.String[])';

	PROCEDURE INSTANCERECOVER
	(
        INUEXCLOGID IN WF_EXCEPTION_LOG.EXCEPTION_LOG_ID%TYPE
	)
    IS
        NUCODERROR  GE_MESSAGE.MESSAGE_ID%TYPE;
        SBMSGERROR  VARCHAR2(2000);
    BEGIN
		RECOVERINS(INUEXCLOGID,NUCODERROR,SBMSGERROR);
    END;

	PROCEDURE INSTANCERECOVER
	(
        INUEXCLOGID IN WF_EXCEPTION_LOG.EXCEPTION_LOG_ID%TYPE,
        NUCODERROR  OUT GE_MESSAGE.MESSAGE_ID%TYPE,
        SBMSGERROR  OUT VARCHAR2
	)
    IS
    BEGIN
		RECOVERINS(INUEXCLOGID,NUCODERROR,SBMSGERROR);
    END;

    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    PROCEDURE SUSPENDINSTANCE
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
        ONURETURN     OUT  NUMBER
    )
    IS
        NUID NUMBER;
        NUSTATUS NUMBER;
    BEGIN
        
        
        
        NUSTATUS := DAWF_INSTANCE.FNUGETSTATUS_ID(INUINSTANCEID);

        IF (NUSTATUS != WF_BOCONSTANTS.CNUCREATED) AND
           (NUSTATUS != WF_BOCONSTANTS.CNUWAITING_RESULTS) THEN
           ONURETURN := -1;
        ELSE
            
            
            DAWF_INSTANCE.UPDSTATUS_ID(INUINSTANCEID, WF_BOCONSTANTS.CNUSUSPENDED);
            DAWF_INSTANCE.UPDPREVIOUS_STATUS_ID(INUINSTANCEID, NUSTATUS);
            
            ONURETURN := WF_BOCONSTANTS.CNUSUSPENDED;
        END IF;
    END;

    
    PROCEDURE REACTIVATEINSTANCE
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
        ONURETURN  OUT NUMBER
    )
    IS
        NUSTATUS NUMBER;
        NUPREVIOUSSTATUS NUMBER;
    BEGIN
        
        NUSTATUS := DAWF_INSTANCE.FNUGETSTATUS_ID(INUINSTANCEID);
        NUPREVIOUSSTATUS := DAWF_INSTANCE.FNUGETPREVIOUS_STATUS_ID(INUINSTANCEID);
        IF(NUSTATUS != WF_BOCONSTANTS.CNUSUSPENDED) THEN
            ONURETURN := -1;
        ELSE
            
            
            
            
            
            DAWF_INSTANCE.UPDSTATUS_ID(INUINSTANCEID, NUPREVIOUSSTATUS);
            DAWF_INSTANCE.UPDPREVIOUS_STATUS_ID(INUINSTANCEID, WF_BOCONSTANTS.CNUSUSPENDED);
            
            ONURETURN := NUPREVIOUSSTATUS;
        END IF;
    END;
    
    







    PROCEDURE GETPROCESSNODES
    (
        INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        WF_BCEIFINSTANCE.GETPROCESSNODES(INUPARENTID,ORFDATASOURCE);
    EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF ORFDATASOURCE%ISOPEN THEN
				CLOSE ORFDATASOURCE;
			END IF;
			ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
						    DAGE_MESSAGE.FSBGETDESCRIPTION(CNUTABLEPARAMETER));
			RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
	PROCEDURE GETINSTANCEDATAMAP
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        WF_BCEIFINSTANCE_DATA_MAP.GETINSTANCEDATAMAP(INUINSTANCEID,ORFDATASOURCE);
    EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF ORFDATASOURCE%ISOPEN THEN
				CLOSE ORFDATASOURCE;
			END IF;
			ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
						    DAWF_INSTANCE_DATA_MAP.FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

	PROCEDURE GETEXCEPTIONSBYINSTANCE
    (
        INUINSTANCEID   IN  WF_EXCEPTION_LOG.INSTANCE_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        WF_BCEIFINSTANCE.GETEXCEPTIONSBYINSTANCE(INUINSTANCEID,ORFDATASOURCE);
    EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF ORFDATASOURCE%ISOPEN THEN
				CLOSE ORFDATASOURCE;
			END IF;
			ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
						    DAWF_EXCEPTION_LOG.FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETTRANSBYPROCESS
    (
        INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        WF_BCEIFINSTANCE_TRANS.GETTRANSBYPROCESS(INUPARENTID,ORFDATASOURCE);
    EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF ORFDATASOURCE%ISOPEN THEN
				CLOSE ORFDATASOURCE;
			END IF;
			ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
						    DAWF_INSTANCE_TRANS.FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETEXCEPTIONTYPES
    (
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        WF_BCEIFINSTANCE.GETEXCEPTIONTYPES(ORFDATASOURCE);
    EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF ORFDATASOURCE%ISOPEN THEN
				CLOSE ORFDATASOURCE;
			END IF;
			ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
						    DAGE_EXCEPTION_TYPE.FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETORDERSFROMINSTANCE
    (
        INUINSTANCEID  IN NUMBER,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OR_BCWF_INTERFACE.GETORDERSFROMINSTANCE(INUINSTANCEID,ORFDATASOURCE);
    EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF ORFDATASOURCE%ISOPEN THEN
				CLOSE ORFDATASOURCE;
			END IF;
			ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
						    DAOR_WF_INTERFACE.FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETINSTANCEATTRIBS
    (
        INUINSTANCEID IN WF_INSTANCE_ATTRIB.INSTANCE_ID%TYPE,
        ORFDATASOURCE OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        WF_BCEIFINSTANCE_ATTRIB.GETINSTANCEATTRIBS(INUINSTANCEID,ORFDATASOURCE);
    EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF ORFDATASOURCE%ISOPEN THEN
				CLOSE ORFDATASOURCE;
			END IF;
			ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
						    DAWF_INSTANCE_ATTRIB.FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

     








    PROCEDURE INSRECORD
    (
        ONUINSTANCEID        OUT  WF_INSTANCE.INSTANCE_ID%TYPE,
        ISBDESCRIPTION         IN  WF_INSTANCE.DESCRIPTION%TYPE,
        INUPARENTID            IN  WF_INSTANCE.PARENT_ID%TYPE,
        INUORIGINALTASK        IN  WF_INSTANCE.ORIGINAL_TASK%TYPE,
        INUPLANID              IN  WF_INSTANCE.PLAN_ID%TYPE,
        INUUNITID              IN  WF_INSTANCE.UNIT_ID%TYPE,
        INUSTATUSID            IN  WF_INSTANCE.STATUS_ID%TYPE,
        INUPREVIOUSSTATUSID    IN  WF_INSTANCE.PREVIOUS_STATUS_ID%TYPE,
        INUONLINEEXECID        IN  WF_INSTANCE.ONLINE_EXEC_ID%TYPE,
        INUACTIONID            IN  WF_INSTANCE.ACTION_ID%TYPE,
        INUPREEXPRESSIONID     IN  WF_INSTANCE.PRE_EXPRESSION_ID%TYPE,
        INUPOSEXPRESSIONID     IN  WF_INSTANCE.POS_EXPRESSION_ID%TYPE,
        INUQUANTITY            IN  WF_INSTANCE.QUANTITY%TYPE,
        INUSINCRONICTIMEOUT    IN  WF_INSTANCE.SINCRONIC_TIMEOUT%TYPE,
        INUASINCRONICTIMEOUT   IN  WF_INSTANCE.ASINCRONIC_TIMEOUT%TYPE,
        INULAYERID             IN  WF_INSTANCE.LAYER_ID%TYPE,
        ISBEXTERNALID          IN  WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBGEOMETRY            IN  WF_INSTANCE.GEOMETRY%TYPE,
        INUTRYNUMBER           IN  WF_INSTANCE.TRY_NUMBER%TYPE,
        ISBMULTIINSTANCE       IN  WF_INSTANCE.MULTI_INSTANCE%TYPE,
        INUFUNCTIONTYPE        IN  WF_INSTANCE.FUNCTION_TYPE%TYPE,
        INUNODETYPEID          IN  WF_INSTANCE.NODE_TYPE_ID%TYPE,
        INUMODULEID            IN  WF_INSTANCE.MODULE_ID%TYPE,
        ISBISCOUNTABLE         IN  WF_INSTANCE.IS_COUNTABLE%TYPE,
        INUTOTALTIME           IN  WF_INSTANCE.TOTAL_TIME%TYPE,
        ISBPARENTEXTERNALID    IN  WF_INSTANCE.PARENT_EXTERNAL_ID%TYPE,
        INUENTITYID            IN  WF_INSTANCE.ENTITY_ID%TYPE,
        INUPAREXTENTITYID      IN  WF_INSTANCE.PAR_EXT_ENTITY_ID%TYPE,
        INUGROUPID             IN  WF_INSTANCE.GROUP_ID%TYPE,
        INUMINGROUPSIZE        IN  WF_INSTANCE.MIN_GROUP_SIZE%TYPE,
        INUUNITTYPEID          IN  WF_INSTANCE.UNIT_TYPE_ID%TYPE,
        ISBEXECUTIONORDER      IN  WF_INSTANCE.EXECUTION_ORDER%TYPE,
        ISBANNULATIONORDER     IN  WF_INSTANCE.ANNULATION_ORDER%TYPE,
        INUNOTIFICATIONID      IN  WF_INSTANCE.NOTIFICATION_ID%TYPE,
        INUEXECUTIONID         IN  WF_INSTANCE.EXECUTION_ID%TYPE,
        INUPREVIOUSINSTANCEID  IN  WF_INSTANCE.PREVIOUS_INSTANCE_ID%TYPE
    )
    IS
        RCWF_INSTANCE    DAWF_INSTANCE.STYWF_INSTANCE;
    BEGIN
        IF ( ONUINSTANCEID IS NULL ) THEN
            ONUINSTANCEID := WF_BOCNFSEQUENCES.FNUSEQ_WF_INSTANCE;
        END IF;
        RCWF_INSTANCE.INSTANCE_ID          := ONUINSTANCEID;
        RCWF_INSTANCE.DESCRIPTION          := ISBDESCRIPTION;
        RCWF_INSTANCE.PARENT_ID            := INUPARENTID;
        RCWF_INSTANCE.ORIGINAL_TASK        := INUORIGINALTASK;
        RCWF_INSTANCE.PLAN_ID              := INUPLANID;
        RCWF_INSTANCE.UNIT_ID              := INUUNITID;
        RCWF_INSTANCE.STATUS_ID            := INUSTATUSID;
        RCWF_INSTANCE.PREVIOUS_STATUS_ID   := INUPREVIOUSSTATUSID;
        RCWF_INSTANCE.ONLINE_EXEC_ID       := INUONLINEEXECID;
        RCWF_INSTANCE.ACTION_ID            := INUACTIONID;
        RCWF_INSTANCE.PRE_EXPRESSION_ID    := INUPREEXPRESSIONID;
        RCWF_INSTANCE.POS_EXPRESSION_ID    := INUPOSEXPRESSIONID;
        RCWF_INSTANCE.QUANTITY             := INUQUANTITY;
        RCWF_INSTANCE.SINCRONIC_TIMEOUT    := INUSINCRONICTIMEOUT;
        RCWF_INSTANCE.ASINCRONIC_TIMEOUT   := INUASINCRONICTIMEOUT;
        RCWF_INSTANCE.LAYER_ID             := INULAYERID;
        RCWF_INSTANCE.EXTERNAL_ID          := ISBEXTERNALID;
        RCWF_INSTANCE.GEOMETRY             := ISBGEOMETRY;
        RCWF_INSTANCE.TRY_NUMBER           := INUTRYNUMBER;
        RCWF_INSTANCE.MULTI_INSTANCE       := ISBMULTIINSTANCE;
        RCWF_INSTANCE.FUNCTION_TYPE        := INUFUNCTIONTYPE;
        RCWF_INSTANCE.NODE_TYPE_ID         := INUNODETYPEID;
        RCWF_INSTANCE.MODULE_ID            := INUMODULEID;
        RCWF_INSTANCE.IS_COUNTABLE         := ISBISCOUNTABLE;
        RCWF_INSTANCE.TOTAL_TIME           := INUTOTALTIME;
        RCWF_INSTANCE.PARENT_EXTERNAL_ID   := ISBPARENTEXTERNALID;
        RCWF_INSTANCE.ENTITY_ID            := INUENTITYID;
        RCWF_INSTANCE.PAR_EXT_ENTITY_ID    := INUPAREXTENTITYID;
        RCWF_INSTANCE.GROUP_ID             := INUGROUPID;
        RCWF_INSTANCE.MIN_GROUP_SIZE       := INUMINGROUPSIZE;
        RCWF_INSTANCE.UNIT_TYPE_ID         := INUUNITTYPEID;
        RCWF_INSTANCE.EXECUTION_ORDER      := ISBEXECUTIONORDER;
        RCWF_INSTANCE.ANNULATION_ORDER     := ISBANNULATIONORDER;
        RCWF_INSTANCE.NOTIFICATION_ID      := INUNOTIFICATIONID;
        RCWF_INSTANCE.EXECUTION_ID         := INUEXECUTIONID;
        RCWF_INSTANCE.PREVIOUS_INSTANCE_ID := INUPREVIOUSINSTANCEID;
        DAWF_INSTANCE.INSRECORD(RCWF_INSTANCE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

     








    PROCEDURE UPDRECORD
    (
        INUINSTANCEID          IN  WF_INSTANCE.INSTANCE_ID%TYPE,
        ISBDESCRIPTION         IN  WF_INSTANCE.DESCRIPTION%TYPE,
        INUPARENTID            IN  WF_INSTANCE.PARENT_ID%TYPE,
        INUORIGINALTASK        IN  WF_INSTANCE.ORIGINAL_TASK%TYPE,
        INUPLANID              IN  WF_INSTANCE.PLAN_ID%TYPE,
        INUUNITID              IN  WF_INSTANCE.UNIT_ID%TYPE,
        INUSTATUSID            IN  WF_INSTANCE.STATUS_ID%TYPE,
        INUPREVIOUSSTATUSID    IN  WF_INSTANCE.PREVIOUS_STATUS_ID%TYPE,
        INUONLINEEXECID        IN  WF_INSTANCE.ONLINE_EXEC_ID%TYPE,
        INUACTIONID            IN  WF_INSTANCE.ACTION_ID%TYPE,
        INUPREEXPRESSIONID     IN  WF_INSTANCE.PRE_EXPRESSION_ID%TYPE,
        INUPOSEXPRESSIONID     IN  WF_INSTANCE.POS_EXPRESSION_ID%TYPE,
        INUQUANTITY            IN  WF_INSTANCE.QUANTITY%TYPE,
        INUSINCRONICTIMEOUT    IN  WF_INSTANCE.SINCRONIC_TIMEOUT%TYPE,
        INUASINCRONICTIMEOUT   IN  WF_INSTANCE.ASINCRONIC_TIMEOUT%TYPE,
        INULAYERID             IN  WF_INSTANCE.LAYER_ID%TYPE,
        ISBEXTERNALID          IN  WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBGEOMETRY            IN  WF_INSTANCE.GEOMETRY%TYPE,
        INUTRYNUMBER           IN  WF_INSTANCE.TRY_NUMBER%TYPE,
        ISBMULTIINSTANCE       IN  WF_INSTANCE.MULTI_INSTANCE%TYPE,
        INUFUNCTIONTYPE        IN  WF_INSTANCE.FUNCTION_TYPE%TYPE,
        INUNODETYPEID          IN  WF_INSTANCE.NODE_TYPE_ID%TYPE,
        INUMODULEID            IN  WF_INSTANCE.MODULE_ID%TYPE,
        ISBISCOUNTABLE         IN  WF_INSTANCE.IS_COUNTABLE%TYPE,
        INUTOTALTIME           IN  WF_INSTANCE.TOTAL_TIME%TYPE,
        ISBPARENTEXTERNALID    IN  WF_INSTANCE.PARENT_EXTERNAL_ID%TYPE,
        INUENTITYID            IN  WF_INSTANCE.ENTITY_ID%TYPE,
        INUPAREXTENTITYID      IN  WF_INSTANCE.PAR_EXT_ENTITY_ID%TYPE,
        INUGROUPID             IN  WF_INSTANCE.GROUP_ID%TYPE,
        INUMINGROUPSIZE        IN  WF_INSTANCE.MIN_GROUP_SIZE%TYPE,
        INUUNITTYPEID          IN  WF_INSTANCE.UNIT_TYPE_ID%TYPE,
        ISBEXECUTIONORDER      IN  WF_INSTANCE.EXECUTION_ORDER%TYPE,
        ISBANNULATIONORDER     IN  WF_INSTANCE.ANNULATION_ORDER%TYPE,
        INUNOTIFICATIONID      IN  WF_INSTANCE.NOTIFICATION_ID%TYPE,
        INUEXECUTIONID         IN  WF_INSTANCE.EXECUTION_ID%TYPE,
        INUPREVIOUSINSTANCEID  IN  WF_INSTANCE.PREVIOUS_INSTANCE_ID%TYPE
    )
    IS
        RCWF_INSTANCE    DAWF_INSTANCE.STYWF_INSTANCE;
    BEGIN
        RCWF_INSTANCE.INSTANCE_ID          := INUINSTANCEID;
        RCWF_INSTANCE.DESCRIPTION          := ISBDESCRIPTION;
        RCWF_INSTANCE.PARENT_ID            := INUPARENTID;
        RCWF_INSTANCE.ORIGINAL_TASK        := INUORIGINALTASK;
        RCWF_INSTANCE.PLAN_ID              := INUPLANID;
        RCWF_INSTANCE.UNIT_ID              := INUUNITID;
        RCWF_INSTANCE.STATUS_ID            := INUSTATUSID;
        RCWF_INSTANCE.PREVIOUS_STATUS_ID   := INUPREVIOUSSTATUSID;
        RCWF_INSTANCE.ONLINE_EXEC_ID       := INUONLINEEXECID;
        RCWF_INSTANCE.ACTION_ID            := INUACTIONID;
        RCWF_INSTANCE.PRE_EXPRESSION_ID    := INUPREEXPRESSIONID;
        RCWF_INSTANCE.POS_EXPRESSION_ID    := INUPOSEXPRESSIONID;
        RCWF_INSTANCE.QUANTITY             := INUQUANTITY;
        RCWF_INSTANCE.SINCRONIC_TIMEOUT    := INUSINCRONICTIMEOUT;
        RCWF_INSTANCE.ASINCRONIC_TIMEOUT   := INUASINCRONICTIMEOUT;
        RCWF_INSTANCE.LAYER_ID             := INULAYERID;
        RCWF_INSTANCE.EXTERNAL_ID          := ISBEXTERNALID;
        RCWF_INSTANCE.GEOMETRY             := ISBGEOMETRY;
        RCWF_INSTANCE.TRY_NUMBER           := INUTRYNUMBER;
        RCWF_INSTANCE.MULTI_INSTANCE       := ISBMULTIINSTANCE;
        RCWF_INSTANCE.FUNCTION_TYPE        := INUFUNCTIONTYPE;
        RCWF_INSTANCE.NODE_TYPE_ID         := INUNODETYPEID;
        RCWF_INSTANCE.MODULE_ID            := INUMODULEID;
        RCWF_INSTANCE.IS_COUNTABLE         := ISBISCOUNTABLE;
        RCWF_INSTANCE.TOTAL_TIME           := INUTOTALTIME;
        RCWF_INSTANCE.PARENT_EXTERNAL_ID   := ISBPARENTEXTERNALID;
        RCWF_INSTANCE.ENTITY_ID            := INUENTITYID;
        RCWF_INSTANCE.PAR_EXT_ENTITY_ID    := INUPAREXTENTITYID;
        RCWF_INSTANCE.GROUP_ID             := INUGROUPID;
        RCWF_INSTANCE.MIN_GROUP_SIZE       := INUMINGROUPSIZE;
        RCWF_INSTANCE.UNIT_TYPE_ID         := INUUNITTYPEID;
        RCWF_INSTANCE.EXECUTION_ORDER      := ISBEXECUTIONORDER;
        RCWF_INSTANCE.ANNULATION_ORDER     := ISBANNULATIONORDER;
        RCWF_INSTANCE.NOTIFICATION_ID      := INUNOTIFICATIONID;
        RCWF_INSTANCE.EXECUTION_ID         := INUEXECUTIONID;
        RCWF_INSTANCE.PREVIOUS_INSTANCE_ID := INUPREVIOUSINSTANCEID;
        DAWF_INSTANCE.UPDRECORD(RCWF_INSTANCE);
    EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
					DAGE_MESSAGE.FSBGETDESCRIPTION(CNUTABLEPARAMETER)||' '||
					INUINSTANCEID);
                  RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    








    PROCEDURE SAVERECORD
    (
        IONUINSTANCEID     IN OUT  WF_INSTANCE.INSTANCE_ID%TYPE,
        ISBDESCRIPTION         IN  WF_INSTANCE.DESCRIPTION%TYPE,
        INUPARENTID            IN  WF_INSTANCE.PARENT_ID%TYPE,
        INUORIGINALTASK        IN  WF_INSTANCE.ORIGINAL_TASK%TYPE,
        INUPLANID              IN  WF_INSTANCE.PLAN_ID%TYPE,
        INUUNITID              IN  WF_INSTANCE.UNIT_ID%TYPE,
        INUSTATUSID            IN  WF_INSTANCE.STATUS_ID%TYPE,
        INUPREVIOUSSTATUSID    IN  WF_INSTANCE.PREVIOUS_STATUS_ID%TYPE,
        INUONLINEEXECID        IN  WF_INSTANCE.ONLINE_EXEC_ID%TYPE,
        INUACTIONID            IN  WF_INSTANCE.ACTION_ID%TYPE,
        INUPREEXPRESSIONID     IN  WF_INSTANCE.PRE_EXPRESSION_ID%TYPE,
        INUPOSEXPRESSIONID     IN  WF_INSTANCE.POS_EXPRESSION_ID%TYPE,
        INUQUANTITY            IN  WF_INSTANCE.QUANTITY%TYPE,
        INUSINCRONICTIMEOUT    IN  WF_INSTANCE.SINCRONIC_TIMEOUT%TYPE,
        INUASINCRONICTIMEOUT   IN  WF_INSTANCE.ASINCRONIC_TIMEOUT%TYPE,
        INULAYERID             IN  WF_INSTANCE.LAYER_ID%TYPE,
        ISBEXTERNALID          IN  WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBGEOMETRY            IN  WF_INSTANCE.GEOMETRY%TYPE,
        INUTRYNUMBER           IN  WF_INSTANCE.TRY_NUMBER%TYPE,
        ISBMULTIINSTANCE       IN  WF_INSTANCE.MULTI_INSTANCE%TYPE,
        INUFUNCTIONTYPE        IN  WF_INSTANCE.FUNCTION_TYPE%TYPE,
        INUNODETYPEID          IN  WF_INSTANCE.NODE_TYPE_ID%TYPE,
        INUMODULEID            IN  WF_INSTANCE.MODULE_ID%TYPE,
        ISBISCOUNTABLE         IN  WF_INSTANCE.IS_COUNTABLE%TYPE,
        INUTOTALTIME           IN  WF_INSTANCE.TOTAL_TIME%TYPE,
        ISBPARENTEXTERNALID    IN  WF_INSTANCE.PARENT_EXTERNAL_ID%TYPE,
        INUENTITYID            IN  WF_INSTANCE.ENTITY_ID%TYPE,
        INUPAREXTENTITYID      IN  WF_INSTANCE.PAR_EXT_ENTITY_ID%TYPE,
        INUGROUPID             IN  WF_INSTANCE.GROUP_ID%TYPE,
        INUMINGROUPSIZE        IN  WF_INSTANCE.MIN_GROUP_SIZE%TYPE,
        INUUNITTYPEID          IN  WF_INSTANCE.UNIT_TYPE_ID%TYPE,
        ISBEXECUTIONORDER      IN  WF_INSTANCE.EXECUTION_ORDER%TYPE,
        ISBANNULATIONORDER     IN  WF_INSTANCE.ANNULATION_ORDER%TYPE,
        INUNOTIFICATIONID      IN  WF_INSTANCE.NOTIFICATION_ID%TYPE,
        INUEXECUTIONID         IN  WF_INSTANCE.EXECUTION_ID%TYPE,
        INUPREVIOUSINSTANCEID  IN  WF_INSTANCE.PREVIOUS_INSTANCE_ID%TYPE
    )
    IS
        PROCEDURE VALINPUT
        IS
        BEGIN
            DAWF_NODE_TYPE.ACCKEY(INUNODETYPEID);
            DAGE_MODULE.ACCKEY(INUMODULEID);
            IF ( INUACTIONID IS NOT NULL ) THEN
                DAGE_ACTION_MODULE.ACCKEY(INUACTIONID);
            END IF;
            IF ( INUENTITYID IS NOT NULL ) THEN
                DAGE_ENTITY.ACCKEY(INUENTITYID);
            END IF;
            IF ( INUPAREXTENTITYID IS NOT NULL ) THEN
                DAGE_ENTITY.ACCKEY(INUPAREXTENTITYID);
            END IF;
            IF ( INUNOTIFICATIONID IS NOT NULL ) THEN
                DAGE_NOTIFICATION.ACCKEY(INUNOTIFICATIONID);
            END IF;
            IF ( INUONLINEEXECID IS NOT NULL ) THEN
                DAGE_OBJECT.ACCKEY(INUONLINEEXECID);
                DAGR_CONFIG_EXPRESSION.ACCKEY(INUONLINEEXECID);
            END IF;
            IF ( INUPREEXPRESSIONID IS NOT NULL ) THEN
                DAGR_CONFIG_EXPRESSION.ACCKEY(INUPREEXPRESSIONID);
            END IF;
            IF ( INUPOSEXPRESSIONID IS NOT NULL ) THEN
                DAGR_CONFIG_EXPRESSION.ACCKEY(INUPOSEXPRESSIONID);
            END IF;
            IF ( INUPREVIOUSSTATUSID IS NOT NULL ) THEN
                DAWF_INSTANCE_STATUS.ACCKEY(INUPREVIOUSSTATUSID);
            END IF;
            IF ( INUSTATUSID IS NOT NULL ) THEN
                DAWF_INSTANCE_STATUS.ACCKEY(INUSTATUSID);
            END IF;
            IF ( INUPLANID IS NOT NULL ) THEN
                DAWF_INSTANCE.ACCKEY(INUPLANID);
            END IF;
            IF ( INUORIGINALTASK IS NOT NULL ) THEN
                DAWF_INSTANCE.ACCKEY(INUORIGINALTASK);
            END IF;
            IF ( INUPARENTID IS NOT NULL ) THEN
                DAWF_INSTANCE.ACCKEY(INUPARENTID);
            END IF;
            IF ( INUPREVIOUSINSTANCEID IS NOT NULL ) THEN
                DAWF_INSTANCE.ACCKEY(INUPREVIOUSINSTANCEID);
            END IF;
            IF ( INUUNITID IS NOT NULL ) THEN
                DAWF_UNIT.ACCKEY(INUUNITID);
            END IF;
            IF ( INUUNITTYPEID IS NOT NULL ) THEN
                DAWF_UNIT_TYPE.ACCKEY(INUUNITTYPEID);
            END IF;
        END;
    BEGIN
        VALINPUT;
        IF ( IONUINSTANCEID IS NULL OR NOT DAWF_INSTANCE.FBLEXIST(IONUINSTANCEID) ) THEN
            INSRECORD
            (
                IONUINSTANCEID,
                ISBDESCRIPTION,
                INUPARENTID,
                INUORIGINALTASK,
                INUPLANID,
                INUUNITID,
                INUSTATUSID,
                INUPREVIOUSSTATUSID,
                INUONLINEEXECID,
                INUACTIONID,
                INUPREEXPRESSIONID,
                INUPOSEXPRESSIONID,
                INUQUANTITY,
                INUSINCRONICTIMEOUT,
                INUASINCRONICTIMEOUT,
                INULAYERID,
                ISBEXTERNALID,
                ISBGEOMETRY,
                INUTRYNUMBER,
                ISBMULTIINSTANCE,
                INUFUNCTIONTYPE,
                INUNODETYPEID,
                INUMODULEID,
                ISBISCOUNTABLE,
                INUTOTALTIME,
                ISBPARENTEXTERNALID,
                INUENTITYID,
                INUPAREXTENTITYID,
                INUGROUPID,
                INUMINGROUPSIZE,
                INUUNITTYPEID,
                ISBEXECUTIONORDER,
                ISBANNULATIONORDER,
                INUNOTIFICATIONID,
                INUEXECUTIONID,
                INUPREVIOUSINSTANCEID
            );
        ELSE
            UPDRECORD
            (
                IONUINSTANCEID,
                ISBDESCRIPTION,
                INUPARENTID,
                INUORIGINALTASK,
                INUPLANID,
                INUUNITID,
                INUSTATUSID,
                INUPREVIOUSSTATUSID,
                INUONLINEEXECID,
                INUACTIONID,
                INUPREEXPRESSIONID,
                INUPOSEXPRESSIONID,
                INUQUANTITY,
                INUSINCRONICTIMEOUT,
                INUASINCRONICTIMEOUT,
                INULAYERID,
                ISBEXTERNALID,
                ISBGEOMETRY,
                INUTRYNUMBER,
                ISBMULTIINSTANCE,
                INUFUNCTIONTYPE,
                INUNODETYPEID,
                INUMODULEID,
                ISBISCOUNTABLE,
                INUTOTALTIME,
                ISBPARENTEXTERNALID,
                INUENTITYID,
                INUPAREXTENTITYID,
                INUGROUPID,
                INUMINGROUPSIZE,
                INUUNITTYPEID,
                ISBEXECUTIONORDER,
                ISBANNULATIONORDER,
                INUNOTIFICATIONID,
                INUEXECUTIONID,
                INUPREVIOUSINSTANCEID
            );
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    







    PROCEDURE RECOVERINSTANCE
    (
       INUINSTANCEID IN WF_EXCEPTION_LOG.INSTANCE_ID%TYPE
    )
    IS PRAGMA AUTONOMOUS_TRANSACTION;
       NUEXCEPTION_LOG_ID WF_EXCEPTION_LOG.EXCEPTION_LOG_ID%TYPE;
       SBMSGERROR VARCHAR2 (2000);
       NUCODERROR NUMBER(5);
    BEGIN
        NUCODERROR := GE_BOCONSTANTS.OK;
        SBMSGERROR := NULL;
        UT_TRACE.TRACE('Se inicia el metodo WF_BOEIFINSTANCE.RecoverInstance('||INUINSTANCEID||')',8);
        NUEXCEPTION_LOG_ID := WF_BCEIFINSTANCE.GETMAXEXCEPTIONLOG(INUINSTANCEID);
        IF ( NUEXCEPTION_LOG_ID IS NOT NULL ) THEN
            UT_TRACE.TRACE('Se invoca WF_BOEIFINSTANCE.InstanceRecover('||NUEXCEPTION_LOG_ID||')',8);
            INSTANCERECOVER(NUEXCEPTION_LOG_ID, NUCODERROR, SBMSGERROR);
            IF ( NUCODERROR != GE_BOCONSTANTS.OK ) THEN
                UT_TRACE.TRACE('Error en invocacion al recover. Codigo error: '||NUCODERROR||' Texto: '||SBMSGERROR,8);
            ELSE
                UT_TRACE.TRACE('Recuperacion exitosa ',8);
            END IF;
        ELSE
            UT_TRACE.TRACE('No existe registro para recuperar Instancia '||INUINSTANCEID||')',8);
        END IF;
        UT_TRACE.TRACE('Se finaliza el metodo WF_BOEIFINSTANCE.RecoverInstance('||INUINSTANCEID||')',8);

        COMMIT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE RECOVERINSTANCE
    (
       INUINSTANCEID IN WF_EXCEPTION_LOG.INSTANCE_ID%TYPE,
       ONUCODERROR  OUT  NUMBER,
       OSBMSGERROR  OUT VARCHAR2
    )
    IS
       NUEXCEPTION_LOG_ID WF_EXCEPTION_LOG.EXCEPTION_LOG_ID%TYPE;
    BEGIN
        ONUCODERROR := GE_BOCONSTANTS.OK;
        OSBMSGERROR := NULL;
        NUEXCEPTION_LOG_ID := WF_BCEIFINSTANCE.GETMAXEXCEPTIONLOG(INUINSTANCEID);
        UT_TRACE.TRACE('Se inicia el metodo WF_BOEIFINSTANCE.RecoverInstance('||INUINSTANCEID||'), con retorno de errores',8);
        IF ( NUEXCEPTION_LOG_ID IS NOT NULL ) THEN
            INSTANCERECOVER(NUEXCEPTION_LOG_ID, ONUCODERROR, OSBMSGERROR);
            IF ( ONUCODERROR != GE_BOCONSTANTS.OK ) THEN
                UT_TRACE.TRACE('Error en invocacion al recover. Codigo error: '||ONUCODERROR||' Texto: '||OSBMSGERROR,8);
            ELSE
                UT_TRACE.TRACE('Recuperacion exitosa ',8);
            END IF;
        ELSE
            UT_TRACE.TRACE('No existe registro para recuperar Instancia '||INUINSTANCEID||')',8);
        END IF;
        UT_TRACE.TRACE('Se finaliza el metodo WF_BOEIFINSTANCE.RecoverInstance('||INUINSTANCEID||'), con retorno de errores',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    








	PROCEDURE DELRECORD
	(
		INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
	)
    IS
    BEGIN
       
       WF_BCEIFINSTANCE_DATA_MAP.DELBYINSTANCEID(INUINSTANCEID);
       
       WF_BCEIFINSTANCE_ATTRIB.DELBYINSTANCEID(INUINSTANCEID);
       DAWF_INSTANCE.DELRECORD(INUINSTANCEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN EX.RECORD_HAVE_CHILDREN THEN
            ERRORS.SETERROR(CONSTANTS.CNURECORD_HAVE_CHILDREN,
            DAGE_MESSAGE.FSBGETDESCRIPTION(CNUTABLEPARAMETER));
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
















    PROCEDURE TRACEDB
    (
      ISBMESSAGE IN VARCHAR2
    )
    IS
      SBSQL VARCHAR2(200) := 'INSERT INTO GE_LOG_TRACE VALUES (:1, :2, :3, :4, :5)';
      NULOGTRACE_ID     GE_LOG_TRACE.LOG_TRACE_ID%TYPE;
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN

      NULOGTRACE_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('ge_log_trace', 'seq_ge_log_trace');

      EXECUTE IMMEDIATE SBSQL
          USING
          NULOGTRACE_ID,
          UT_SESSION.GETSESSIONID,
          SYSDATE,
          ISBMESSAGE,
          'Ejecutores';

      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
           ROLLBACK;
           RAISE;

      WHEN OTHERS THEN
           ROLLBACK;
           RAISE_APPLICATION_ERROR(-20993, 'WF_BOEIFINSTANCE.TraceDB: '||SQLERRM);
    END TRACEDB;

    
















    PROCEDURE RECOVERRETAINEDINSTANCE
	(
		INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
	)
    IS  PRAGMA AUTONOMOUS_TRANSACTION;

        
        NUTARGETID      WF_INSTANCE.INSTANCE_ID%TYPE;
        
        SBCAUSALVALUE   WF_INSTANCE_ATTRIB.VALUE%TYPE;
        
        RCWF_INSTANCE   DAWF_INSTANCE.STYWF_INSTANCE;
        
        NUPLANID        WF_INSTANCE.PLAN_ID%TYPE;
        
        NUEXCEPTIONLOGID WF_EXCEPTION_LOG.EXCEPTION_LOG_ID%TYPE;

        
        NUERRORCODE     NUMBER;
        SBERRORMESSAGE  VARCHAR2(4000);

        CURSOR CUWFEXCEPTION IS
            SELECT  DISTINCT WF_EXCEPTION_LOG.PARAMETERS AS TARGETID,
                        WF_EXCEPTION_LOG.EXCEPTION_LOG_ID
            FROM WF_EXCEPTION_LOG /*+WF_BOEIFINSTANCE.RecoverRetainedInstance*/
            WHERE   EXCEPTION_TYPE_ID = CNUEXCEPTIONTYPE
            AND    STATUS = CNUACTIVEEXCSTATUS
            AND   INSTANCE_ID = INUINSTANCEID;

    BEGIN
        UT_TRACE.TRACE('Inicio WF_BOEIFINSTANCE.RecoverRetainedInstance Instancia '||INUINSTANCEID||')',8);
        
        OPEN CUWFEXCEPTION;
        LOOP

            FETCH CUWFEXCEPTION INTO NUTARGETID, NUEXCEPTIONLOGID;
            EXIT WHEN CUWFEXCEPTION%NOTFOUND;
            
            UT_TRACE.TRACE('Recuperando instancia: '||INUINSTANCEID || ' Target ' || NUTARGETID, 10);
            
            IF ( DAWF_INSTANCE.FNUGETSTATUS_ID(NUTARGETID) = WF_BOCONSTANTS.CNUFINISHED ) THEN
                BEGIN
                    UT_TRACE.TRACE('Bloquea la instancia retenedora: ' || NUTARGETID, 10);
                    
                    DAWF_INSTANCE.LOCKBYPK(NUTARGETID,RCWF_INSTANCE);

                    UT_TRACE.TRACE('Verificar si el plan no esta anulado: ' || NUTARGETID, 10);
                    NUPLANID := DAWF_INSTANCE.FNUGETPLAN_ID(NUTARGETID);
                    IF ( DAWF_INSTANCE.FNUGETSTATUS_ID(NUPLANID) = WF_BOCONSTANTS.CNUANNULLED  ) THEN

                        UT_TRACE.TRACE('Plan anulado reparar excepci�n', 10);
                        
                        DAWF_EXCEPTION_LOG.UPDSTATUS(NUEXCEPTIONLOGID,CNUFIXEDEXCSTATUS);

                        
                        IF ( DAWF_INSTANCE.FNUGETSTATUS_ID(INUINSTANCEID) <> WF_BOCONSTANTS.CNUANNULLED ) THEN
                            UT_TRACE.TRACE('Actualizar Instancia Retenida a Finalizado ' , 10);
                            DAWF_INSTANCE.UPDSTATUS_ID(INUINSTANCEID,WF_BOCONSTANTS.CNUFINISHED);
                        END IF;

                    ELSE
                        UT_TRACE.TRACE('Actualiza la instancia retenedora: ' || NUTARGETID || ' a esperando resultado', 10);

                        
                        DAWF_INSTANCE.UPDSTATUS_ID(NUTARGETID, WF_BOCONSTANTS.CNUWAITING_RESULTS);

                        UT_TRACE.TRACE('Obtiene el atributo causal de la instancia retenedora: ' || NUTARGETID , 10);
                        SBCAUSALVALUE := WF_BCEIFINSTANCE_ATTRIB.FSBGETATTRVALYINSATTRB(NUTARGETID,WF_BOCONSTANTS.CNUCAUSAL);
                        UT_TRACE.TRACE('Valor de atributo causal obtenido para la instancia retenedora: ' || NUTARGETID||' Causal: '|| SBCAUSALVALUE, 10);

                        UT_TRACE.TRACE('Notifica la actividad: ' || NUTARGETID||' Causal: '|| NVL(TO_NUMBER(SBCAUSALVALUE), MO_BOCAUSAL.FNUGETSUCCESS), 10);
                        
                        WF_BOANSWER_RECEPTOR.ANSWERRECEPTOR(NUTARGETID, NVL(TO_NUMBER(SBCAUSALVALUE), MO_BOCAUSAL.FNUGETSUCCESS) );

                        UT_TRACE.TRACE('Termina Notificaci�n de la actividad ' || NUTARGETID || '  Sin Errores: ' , 10);
                    END IF;

                    UT_TRACE.TRACE('Realiza Persistencia' , 10);
                    COMMIT;

                EXCEPTION
                    WHEN EX.CONTROLLED_ERROR THEN
                        ROLLBACK;
                        ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE);
                        TRACEDB('WHEN EX.CONTROLLED_ERROR Excepci�n al procesar instancia retenedora ' || NUTARGETID || ' mensaje '|| NUERRORCODE || ' - ' ||SBERRORMESSAGE);
                    WHEN OTHERS THEN
                        ROLLBACK;
                        TRACEDB('WHEN OTHERS THEN Excepci�n al procesar instancia retenedora ' || NUTARGETID || ' mensaje '|| SQLERRM);
                END;

            END IF;

        END LOOP;
        CLOSE CUWFEXCEPTION;

        UT_TRACE.TRACE('Fin WF_BOEIFINSTANCE.RecoverRetainedInstance Instancia '||INUINSTANCEID||')',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            IF ( CUWFEXCEPTION%ISOPEN ) THEN
                CLOSE CUWFEXCEPTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK;
            IF ( CUWFEXCEPTION%ISOPEN ) THEN
                CLOSE CUWFEXCEPTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RECOVERRETAINEDINSTANCE;
    
    


















    PROCEDURE RECOVERRETAINEDINSTANCES
    IS
        
        NUINSTANCE      WF_EXCEPTION_LOG.INSTANCE_ID%TYPE;

        RCGELOGTRACE  DAGE_LOG_TRACE.STYGE_LOG_TRACE;

        
        CURSOR CUEXCEPTIONS IS
            SELECT
                A.INSTANCE_ID
            FROM WF_EXCEPTION_LOG A /*+WF_BOEIFINSTANCE.RecoverRetainedInstances*/
            WHERE EXCEPTION_TYPE_ID = CNUEXCEPTIONTYPE
            AND    STATUS = CNUACTIVEEXCSTATUS;

    BEGIN

        UT_TRACE.TRACE('Inicio WF_BOEIFINSTANCE.RecoverRetainedInstances', 10);

        
        OPEN CUEXCEPTIONS;
        LOOP

            FETCH CUEXCEPTIONS INTO NUINSTANCE;
            EXIT WHEN CUEXCEPTIONS%NOTFOUND;

            WF_BOEIFINSTANCE.RECOVERRETAINEDINSTANCE(NUINSTANCE);

        END LOOP;

        CLOSE CUEXCEPTIONS;

        UT_TRACE.TRACE('Fin WF_BOEIFINSTANCE.RecoverRetainedInstances', 10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUEXCEPTIONS%ISOPEN ) THEN
                CLOSE CUEXCEPTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF ( CUEXCEPTIONS%ISOPEN ) THEN
                CLOSE CUEXCEPTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END RECOVERRETAINEDINSTANCES;


END WF_BOEIFINSTANCE;