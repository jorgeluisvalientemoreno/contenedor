PACKAGE BODY MO_BOPackagePayment IS
    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO198233';

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


    






	PROCEDURE GETIDPACKPAYMENT
    (
        INUPACKAGE_ID           IN  MO_PACKAGE_PAYMENT.PACKAGE_ID%TYPE,
        INUCOMMPLAN_ID          IN  MO_PACKAGE_PAYMENT.COMMERCIAL_PLAN_ID%TYPE,
        ONURATING_PACKAGE_ID    OUT MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE
    )
    IS
	BEGIN
        MO_BOPACKAGEPAYMENT.GETIDPACKPAYMENT(INUPACKAGE_ID, ONURATING_PACKAGE_ID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END GETIDPACKPAYMENT;
	
    























    PROCEDURE GETIDPACKPAYMENT
    (
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUPACKAGEPAYMENTID OUT MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE,
        IBLSETERROR         IN BOOLEAN DEFAULT TRUE
    )
    IS
        CURSOR CUPACKAGEPAY IS
        SELECT  /*+ index(a IDX_MO_PACKAGE_PAYMENT) */
                PACKAGE_PAYMENT_ID
        FROM    MO_PACKAGE_PAYMENT A
                /*+ MO_BOPackagePayment.GetIDPackPayment */
        WHERE   A.PACKAGE_ID = INUPACKAGEID
        AND     A.ACTIVE||'' = GE_BOCONSTANTS.CSBYES;
        
    BEGIN
       OPEN CUPACKAGEPAY;
       FETCH CUPACKAGEPAY INTO ONUPACKAGEPAYMENTID;
       IF (CUPACKAGEPAY%NOTFOUND) THEN

            
            IF (IBLSETERROR) THEN
                CLOSE CUPACKAGEPAY;
                ERRORS.SETERROR(CC_BOCONSTERROR.CNUNOPACKAGERATING,INUPACKAGEID);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
       END IF;
       CLOSE CUPACKAGEPAY;
       UT_TRACE.TRACE('Package_Payment_Id:['||ONUPACKAGEPAYMENTID||']',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETIDPACKPAYMENT;
	
    


















	
	PROCEDURE UPDATEPACKPAYMENT (
	    INUPACKAGE_ID       IN     MO_PACKAGES.PACKAGE_ID%TYPE,
	    INUIDPACK_PAYMENT   IN     MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE,
        INUTOTAL_VALUE      IN     NUMBER,
        INUTOTAL_TAXVALUE   IN     NUMBER,
        INUPAYMENT_NUMBER   IN     NUMBER,
        INUINITIAL_PAYMENT  IN     NUMBER,
        INUINIT_PAY_PERC    IN     NUMBER,
        INUBILLING_VALUE    IN     NUMBER
    )
	IS
		
		NUIDPACKAGE       MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
		RCPACK_PAYMENT    DAMO_PACKAGE_PAYMENT.STYMO_PACKAGE_PAYMENT;
	BEGIN
		
		
		IF (INUIDPACK_PAYMENT  IS NOT NULL) THEN
		    DAMO_PACKAGE_PAYMENT.ACCKEY(INUIDPACK_PAYMENT);
            RCPACK_PAYMENT:= DAMO_PACKAGE_PAYMENT.FRCGETRECORD(INUIDPACK_PAYMENT);
        ELSE
            GETIDPACKPAYMENT(INUPACKAGE_ID,NUIDPACKAGE);
		    DAMO_PACKAGE_PAYMENT.ACCKEY(NUIDPACKAGE);
            RCPACK_PAYMENT:= DAMO_PACKAGE_PAYMENT.FRCGETRECORD(NUIDPACKAGE);
        END IF;
        
        RCPACK_PAYMENT.TOTAL_VALUE     := NVL(INUTOTAL_VALUE,0);
        RCPACK_PAYMENT.BILLING_VALUE   := NVL(INUBILLING_VALUE,0);
        RCPACK_PAYMENT.INITIAL_PAYMENT := NVL(INUINITIAL_PAYMENT,0);
        RCPACK_PAYMENT.INIT_PAYMENT_PERC := NVL(INUINIT_PAY_PERC,0);
        RCPACK_PAYMENT.PAYMENT_NUMBER  := NVL(INUPAYMENT_NUMBER,0);
        RCPACK_PAYMENT.TOTAL_TAX_VALUE := NVL(INUTOTAL_TAXVALUE,0);


        DAMO_PACKAGE_PAYMENT.UPDRECORD(RCPACK_PAYMENT);
        		
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

















    PROCEDURE INSERTREGBASIC(
        INUPACKAGE_ID       IN  MO_PACKAGE_PAYMENT.PACKAGE_ID%TYPE,
        INUCOMMPLAN_ID      IN  MO_PACKAGE_PAYMENT.COMMERCIAL_PLAN_ID%TYPE,
        ONUIDPACK_PAY_ID    OUT MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE
    ) IS
        RCPACKPAYMENT       DAMO_PACKAGE_PAYMENT.STYMO_PACKAGE_PAYMENT;
        NUIDPACKAGEPAY      MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
    BEGIN
    
        NUIDPACKAGEPAY := MO_BOSEQUENCES.FNUGETSEQ_MO_PACKAGE_PAYMENT ;

        RCPACKPAYMENT.PACKAGE_PAYMENT_ID    := NUIDPACKAGEPAY;
        RCPACKPAYMENT.PACKAGE_ID            := INUPACKAGE_ID;
        RCPACKPAYMENT.COMMERCIAL_PLAN_ID    := INUCOMMPLAN_ID;
        RCPACKPAYMENT.TOTAL_VALUE           := 0;
        RCPACKPAYMENT.PAYMENT_NUMBER        := 0;
        RCPACKPAYMENT.PAYMENT_VALUE         := 0;
        RCPACKPAYMENT.BILLING_VALUE         := 0;
        RCPACKPAYMENT.ACTIVE                := GE_BOCONSTANTS.CSBYES;
        
        DAMO_PACKAGE_PAYMENT.INSRECORD(RCPACKPAYMENT);

        ONUIDPACK_PAY_ID := RCPACKPAYMENT.PACKAGE_PAYMENT_ID;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE  UPDPAYMENT_PACKAGE(
        INUPACKAGE_ID    IN    MO_PACKAGES.PACKAGE_ID%TYPE,
        INUVALOR         IN    MO_PACKAGE_PAYMENT.PAYMENT_VALUE%TYPE
    )
    IS
        NURATING_PACKAGE_ID  MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
        RCPACKAGE  DAMO_PACKAGE_PAYMENT.STYMO_PACKAGE_PAYMENT;
    BEGIN
        GETIDPACKPAYMENT (INUPACKAGE_ID, NURATING_PACKAGE_ID );
        DAMO_PACKAGE_PAYMENT.ACCKEY(NURATING_PACKAGE_ID );
        RCPACKAGE := DAMO_PACKAGE_PAYMENT.FRCGETRECORD( NURATING_PACKAGE_ID );
        
        RCPACKAGE.PAYMENT_VALUE := RCPACKAGE.PAYMENT_VALUE + INUVALOR;
        
        DAMO_PACKAGE_PAYMENT.UPDPAYMENT_VALUE(NURATING_PACKAGE_ID,RCPACKAGE.PAYMENT_VALUE);
        

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    















    PROCEDURE  GETINITIALPAYMENT_PACKAGE(
        INUPACKAGE_ID    IN    MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUVALOR         OUT   MO_PACKAGE_PAYMENT.INITIAL_PAYMENT%TYPE
    )
    IS
        NURATING_PACKAGE_ID  MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
        RCPACKAGE  DAMO_PACKAGE_PAYMENT.STYMO_PACKAGE_PAYMENT;
    BEGIN
        GETIDPACKPAYMENT (INUPACKAGE_ID, NURATING_PACKAGE_ID );
        DAMO_PACKAGE_PAYMENT.ACCKEY(NURATING_PACKAGE_ID );
        RCPACKAGE := DAMO_PACKAGE_PAYMENT.FRCGETRECORD( NURATING_PACKAGE_ID );

        ONUVALOR := NVL(RCPACKAGE.INITIAL_PAYMENT - RCPACKAGE.PAYMENT_VALUE,0);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    














    PROCEDURE  GETPAYMENT_PACKAGE
    (
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUINITIALPAYMENT   OUT MO_PACKAGE_PAYMENT.INITIAL_PAYMENT%TYPE
    )
    IS
        NUPACKAGEPAYMENTID  MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
        RCPACKAGEPAYMENT    DAMO_PACKAGE_PAYMENT.STYMO_PACKAGE_PAYMENT;
    BEGIN
        GETIDPACKPAYMENT (INUPACKAGEID, NUPACKAGEPAYMENTID);

        DAMO_PACKAGE_PAYMENT.ACCKEY(NUPACKAGEPAYMENTID );
        RCPACKAGEPAYMENT := DAMO_PACKAGE_PAYMENT.FRCGETRECORD( NUPACKAGEPAYMENTID );
        UT_TRACE.TRACE('Payment_Value:['||RCPACKAGEPAYMENT.PAYMENT_VALUE||']',15);

        ONUINITIALPAYMENT := NVL(RCPACKAGEPAYMENT.PAYMENT_VALUE,0);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;
    
    
















    PROCEDURE GETIDOLDPACKPAYMENT (
        INUPACKAGE_ID       IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUPACKPAY_ID       OUT MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE
    )
    IS
       CURSOR CUPACKAGEPAY IS
       SELECT DISTINCT MO_PACKAGE_PAYMENT.*
       FROM  MO_PACKAGE_PAYMENT , MO_MOTIVE_PAYMENT
       WHERE MO_PACKAGE_PAYMENT.PACKAGE_ID = INUPACKAGE_ID
       AND   MO_PACKAGE_PAYMENT.ACTIVE     = GE_BOCONSTANTS.CSBNO
       AND   MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID = MO_MOTIVE_PAYMENT.PACKAGE_PAYMENT_ID
       AND   MO_MOTIVE_PAYMENT.ACTIVE      = GE_BOCONSTANTS.CSBYES;

       RCPACKAGE     CUPACKAGEPAY%ROWTYPE;
       
    BEGIN
        OPEN CUPACKAGEPAY;
        FETCH CUPACKAGEPAY INTO RCPACKAGE;
        ONUPACKPAY_ID := RCPACKAGE.PACKAGE_PAYMENT_ID;
        CLOSE CUPACKAGEPAY;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    















    PROCEDURE PAYMENTMIGRATION (
        INUOLDPACKAGE_PAY_ID  IN    MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE,
        INUNEWPACKAGE_PAY_ID  IN    MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE,
        IDTLIMITDATE          IN    DATE DEFAULT NULL
    )  IS
        RCOLDPACKPAYMENT    DAMO_PACKAGE_PAYMENT.STYMO_PACKAGE_PAYMENT;
        RCNEWPACKPAYMENT    DAMO_PACKAGE_PAYMENT.STYMO_PACKAGE_PAYMENT;

    BEGIN
    
        DBMS_OUTPUT.PUT_LINE('old '||INUOLDPACKAGE_PAY_ID||' new '||INUNEWPACKAGE_PAY_ID);
        
        RCOLDPACKPAYMENT := DAMO_PACKAGE_PAYMENT.FRCGETRECORD( INUOLDPACKAGE_PAY_ID );
        
        DAMO_PACKAGE_PAYMENT.UPDPAYMENT_VALUE(INUNEWPACKAGE_PAY_ID,RCOLDPACKPAYMENT.PAYMENT_VALUE);

        MO_BOMOTIVEPAYMENT.PAYMENTMIGRATION(INUOLDPACKAGE_PAY_ID,INUNEWPACKAGE_PAY_ID, IDTLIMITDATE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;


    FUNCTION FDTGETLIMITPAYMENTDATE
    (
        INUPACKAGEID    IN MO_PACKAGE_PAYMENT.PACKAGE_ID%TYPE
    )
    RETURN DATE IS
        RCPACKAGEPAYMENT    DAMO_PACKAGE_PAYMENT.STYMO_PACKAGE_PAYMENT;
        RCMOTIVEPAYMENT     DAMO_MOTIVE_PAYMENT.STYMO_MOTIVE_PAYMENT;
    BEGIN
        
        FOR REC IN MO_BCPACKAGE_PAYMENT.CUPACKAGEPAYMENTBYPACK(INUPACKAGEID) LOOP
            RCPACKAGEPAYMENT := REC;
        END LOOP;
        UT_TRACE.TRACE('Package_Payment_Id:['||RCPACKAGEPAYMENT.PACKAGE_PAYMENT_ID||']',15);
        
        
        OPEN MO_BCMOTIVE_PAYMENT.CUMOTIVEPAYMENTBYPACKPAY(RCPACKAGEPAYMENT.PACKAGE_PAYMENT_ID);
        FETCH MO_BCMOTIVE_PAYMENT.CUMOTIVEPAYMENTBYPACKPAY INTO RCMOTIVEPAYMENT;
        CLOSE MO_BCMOTIVE_PAYMENT.CUMOTIVEPAYMENTBYPACKPAY;
        UT_TRACE.TRACE('Motive_Payment_Id:['||RCMOTIVEPAYMENT.MOTIVE_PAYMENT_ID||']Fecha:['||RCMOTIVEPAYMENT.LIMIT_DATE||']',15);

        RETURN RCMOTIVEPAYMENT.LIMIT_DATE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    FUNCTION FSBPAYMENTVALUEHASVALUE
    (
        INUPACKAGEID    IN MO_PACKAGE_PAYMENT.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUPACKAGEPAYMENTID     MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
	BEGIN
        UT_TRACE.TRACE('Inicia MO_BOPackagePayment.fsbPaymentValueHasValue inuPackageId:['||INUPACKAGEID||']',9);
	
        
        GETIDPACKPAYMENT(INUPACKAGEID,NUPACKAGEPAYMENTID, GE_BOCONSTANTS.GETFALSE);
        
        
        FOR RC IN MO_BCMOTIVE_PAYMENT.CUMOTIVEPAYMENTBYPACKPAY(NUPACKAGEPAYMENTID) LOOP
        
            IF(RC.PAYMENT_VALUE > CONSTANTS.CNUSUCCESS) THEN
                UT_TRACE.TRACE('Finaliza MO_BOPackagePayment.fsbPaymentValueHasValue. Salida:['||GE_BOCONSTANTS.CSBYES||']',9);
                RETURN GE_BOCONSTANTS.CSBYES;
            END IF;

        END LOOP;
        
        UT_TRACE.TRACE('Finaliza MO_BOPackagePayment.fsbPaymentValueHasValue. Salida:['||GE_BOCONSTANTS.CSBNO||']',9);
                
        RETURN ( GE_BOCONSTANTS.CSBNO );
        
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END FSBPAYMENTVALUEHASVALUE;


    FUNCTION FNUGETACCOUNTBYPACKAGE(
        INUPACKAGE_ID   IN   MO_PACKAGES.PACKAGE_ID%TYPE
    )  RETURN NUMBER
    IS
        NUIDPACKPAYMENT  MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
        NUACCOUNT        MO_MOTIVE_PAYMENT.ACCOUNT%TYPE;
    BEGIN
        MO_BOPACKAGEPAYMENT.GETIDPACKPAYMENT (INUPACKAGE_ID, NUIDPACKPAYMENT);
        
        IF ( MO_BOMOTIVEPAYMENT.FBLEXIST (NUIDPACKPAYMENT)) THEN
            MO_BOMOTIVEPAYMENT.GETACCOUNTBYMOTIVE(NUIDPACKPAYMENT,NULL,NUACCOUNT);
        ELSE
            UT_TRACE.TRACE('No encontro registro de mo_motive_payment, no genero factura',12);
        END IF;
        
        UT_TRACE.TRACE('Finaliza MO_BOPackagePayment.fnuGetAccountByPackage. Factura:['||NUACCOUNT||']',9);
        RETURN NUACCOUNT;
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;
    
END MO_BOPACKAGEPAYMENT;