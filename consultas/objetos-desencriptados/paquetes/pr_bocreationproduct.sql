PACKAGE BODY PR_BOCreationProduct AS

    
    
    
    
    CSBVERSION    CONSTANT  VARCHAR2(250)  := 'SAO201381';

    
    CNUNULLNUMS   CONSTANT  NUMBER         := PKGENERALPARAMETERSMGR.FNUGETNUMBERPARAMETER('NULLNUMS');

    
    CSBAPLICACION CONSTANT	VARCHAR2(250)  := 'ATCNCRM';

    
    SBAPLICACION	                VARCHAR2(250);

    
    CSBESTCORTPENDINST              PARAMETR.PAMECODI%TYPE      := 'ESTA_PEND_INST';

    
    CSBESTCORTSINCORTE              PARAMETR.PAMECODI%TYPE      := 'EST_SERVICIO_SIN_CORTE';

    
    CNUERRORESTCORTNOFACT           GE_MESSAGE.MESSAGE_ID%TYPE  := 121682;
    
    CNUCONTRATO_NO_APLICA_SUG       GE_MESSAGE.MESSAGE_ID%TYPE  := 900976;
    
    CNUCONTRATO_NO_APLICA_NO_SUG    GE_MESSAGE.MESSAGE_ID%TYPE  := 900975;

    
    
    
    GNUDEF_COMPANY_ID       NUMBER;
    GNUACTIVE               NUMBER;
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    PROCEDURE LOADPARAMETERS
    IS
    BEGIN
        GNUDEF_COMPANY_ID := GE_BOPARAMETER.FNUGET('DEFAULT_COMPANY');
        GNUACTIVE         := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE(CSBESTCORTSINCORTE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    


































    PROCEDURE CREATIONADDRESS
    (
        INUPRODUCTID       IN     PR_PRODUCT.PRODUCT_ID%TYPE,
        INUMOTIVEID        IN     MO_MOTIVE.MOTIVE_ID%TYPE,
        ORCADDRESS         OUT    DAAB_ADDRESS.STYAB_ADDRESS,
        IBLINSERTRECORD    IN     BOOLEAN DEFAULT TRUE
    )
    IS
        RCADDRESS    DAMO_ADDRESS.STYMO_ADDRESS;
    BEGIN
    
        UT_TRACE.TRACE('Inicia PR_BOCreationProduct.CreationAddress',5);
        UT_TRACE.TRACE('Producto['||INUPRODUCTID||'] Motivo['||INUMOTIVEID||']',5);

        
        RCADDRESS := MO_BOADDRESS.FRCADDRESSBYTYPE(INUMOTIVEID);

        
        IF (RCADDRESS.ADDRESS_ID IS NULL) THEN
            UT_TRACE.TRACE('Fin PR_BOCreationProduct.CreationAddress Direcci�n['||RCADDRESS.PARSER_ADDRESS_ID||']',5);
            RETURN;
        END IF;

        
        ORCADDRESS := DAAB_ADDRESS.FRCGETRECORD( RCADDRESS.PARSER_ADDRESS_ID );

        
        IF (IBLINSERTRECORD) THEN
            DAPR_PRODUCT.UPDADDRESS_ID( INUPRODUCTID, RCADDRESS.PARSER_ADDRESS_ID );
            UT_TRACE.TRACE('Actualizo Pr_Product: inuProductId['||INUPRODUCTID||'] address_id['||RCADDRESS.PARSER_ADDRESS_ID||']',5);
        END IF;
        
        UT_TRACE.TRACE('Fin PR_BOCreationProduct.CreationAddress Direcci�n['||RCADDRESS.PARSER_ADDRESS_ID||']',5);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATIONADDRESS;



    


















    PROCEDURE CREATIONDATAFIGURE
    (
        INUPRODUCTID    IN    PR_PRODUCT.PRODUCT_ID%TYPE,
        INUMOTIVEID     IN    MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCPRODUCTFIGURE DAPR_PRODUCT_FIGURE.STYPR_PRODUCT_FIGURE;
    BEGIN
        
        FOR REC IN MO_BCFIGURE.CUFIGUREBYMOT(INUMOTIVEID) LOOP

            
            RCPRODUCTFIGURE.PRODUCT_FIGURE_ID := PR_BOSEQUENCE.GETPRODUCTFIGUREID;
            RCPRODUCTFIGURE.PRODUCT_ID     := INUPRODUCTID;
            RCPRODUCTFIGURE.DESCRIPTION    := REC.DESCRIPTION;
            RCPRODUCTFIGURE.FIGURE_TYPE_ID := REC.FIGURE_TYPE_ID;
            RCPRODUCTFIGURE.ALIAS          := REC.ALIAS;
            RCPRODUCTFIGURE.ADIT_TEXT_2    := REC.ADIT_TEXT_2;
            RCPRODUCTFIGURE.ADIT_TEXT_1    := REC.ADIT_TEXT_1;
            RCPRODUCTFIGURE.INITIAL_DATE   := SYSDATE;
            RCPRODUCTFIGURE.FINAL_DATE     := UT_DATE.FDTMAXDATE;
            RCPRODUCTFIGURE.LAST_UPDATE    := SYSDATE;

            DAPR_PRODUCT_FIGURE.INSRECORD(RCPRODUCTFIGURE);
            UT_TRACE.TRACE('Inserto Pr_Product_Figure:['||RCPRODUCTFIGURE.PRODUCT_FIGURE_ID||']',6);
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATIONDATAFIGURE;
    























    PROCEDURE CREATIONDATASUBSTYPE
    (
        INUPRODUCTID    IN    PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPACKAGEID    IN    MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID     IN    MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
    BEGIN
        
        FOR REC IN MO_BCSUBS_TYPE_MOTIV.CUSUBSTYPEMOTIVBYPACK(INUPACKAGEID) LOOP
            UT_TRACE.TRACE('Tipo Suscriptor Paquete:['||REC.SUBS_TYPE_MOTIV_ID||']',5);
            PR_BOSUBSBYPRODUCT.INSPRODROL(INUPRODUCTID,REC.SUBSCRIBER_ID,REC.ROLE_ID);
        END LOOP;

        
        FOR REC IN MO_BCSUBS_TYPE_MOTIV.CUSUBSTYPEMOTIVBYMOT(INUMOTIVEID) LOOP
            UT_TRACE.TRACE('Tipo Suscriptor Motivo:['||REC.SUBS_TYPE_MOTIV_ID||']',5);
            PR_BOSUBSBYPRODUCT.INSPRODROL(INUPRODUCTID,REC.SUBSCRIBER_ID,REC.ROLE_ID);
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATIONDATASUBSTYPE;

    

























    PROCEDURE CREATIONDATAUTILITIES
    (
        INUPRODUCTID    IN    PR_PRODUCT.PRODUCT_ID%TYPE,
        INUMOTIVEID     IN    MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCDATAUTILITIES DAPR_DATA_UTILITIES.STYPR_DATA_UTILITIES;
    BEGIN
        
        FOR REC IN MO_BCDATAUTILITIES.CUDATAUTILITIES(INUMOTIVEID) LOOP

            
            RCDATAUTILITIES.DATA_UTILITIES_ID       := PR_BOSEQUENCE.GETDATA_UTILITIES;
            RCDATAUTILITIES.PRODUCT_ID              := INUPRODUCTID;
            RCDATAUTILITIES.CHARGE                  := REC.CHARGE;
            RCDATAUTILITIES.CIRCUIT                 := REC.CIRCUIT;
            RCDATAUTILITIES.OPERATING_SECTOR        := REC.OPERATING_SECTOR;
            RCDATAUTILITIES.PROVISION_SECTOR_ID     := REC.PROVISION_SECTOR_ID;
            RCDATAUTILITIES.COMMERCIAL_MARKET_ID    := REC.COMMERCIAL_MARKET_ID;
            RCDATAUTILITIES.OPERATOR_CODE           := REC.OPERATOR_CODE;
            RCDATAUTILITIES.IS_EXEMPT_REAC_ENERGY   := REC.IS_EXEMPT_REAC_ENERGY;
            RCDATAUTILITIES.VOLTAGE                 := REC.VOLTAGE;

            DAPR_DATA_UTILITIES.INSRECORD(RCDATAUTILITIES);
            UT_TRACE.TRACE('Inserto Pr_Data_Utilities:['||RCDATAUTILITIES.DATA_UTILITIES_ID||']',6);
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATIONDATAUTILITIES;

  


































































































































    PROCEDURE CREATESERVSUSC
    (
        INUPACKAGEID        IN    MO_PACKAGES.PACKAGE_ID%TYPE,
        IRCPRODUCT          IN    DAPR_PRODUCT.STYPR_PRODUCT,
        IRCMOTIVE           IN    DAMO_MOTIVE.STYMO_MOTIVE,
        IRCADDRESS          IN    DAAB_ADDRESS.STYAB_ADDRESS,
        IDTCREATIONDATE     IN    PR_PRODUCT.CREATION_DATE%TYPE
    )
    IS
        RCBILLING           DAMO_BILLING.STYMO_BILLING;
        RCDATAUTILITIES     DAPR_DATA_UTILITIES.STYPR_DATA_UTILITIES;
        NUSESUSUCA          SERVSUSC.SESUSUCA%TYPE;
        NUSESUCATE          SERVSUSC.SESUCATE%TYPE;
        SBSESUIMLD          SERVSUSC.SESUIMLD%TYPE;
        NUSESUPLFA          SERVSUSC.SESUPLFA%TYPE;
        NUSESUMULT          SERVSUSC.SESUMULT%TYPE;
        NUSESUCICO          SERVSUSC.SESUCICO%TYPE;
        NUERRORCODE         GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBERRORMESSAGE      GE_ERROR_LOG.DESCRIPTION%TYPE;
        RCSERVSUSC          SERVSUSC%ROWTYPE;
        RCDEPENDSERV        SERVSUSC%ROWTYPE;
        NUDEPENDSERVID      SERVSUSC.SESUNUSE%TYPE;
        NUBILLINGCYCLE      CICLO.CICLCODI%TYPE;

        PROCEDURE UPDSERVSUSC
        IS
        BEGIN

            

            CC_BOBILLINGCYCLE.UPDCYCLEBYPROD(IRCPRODUCT.PRODUCT_ID, IRCMOTIVE.MOTIVE_ID, NUBILLINGCYCLE);

            
            NUSESUCICO := PKTBLCICLO.FNUGETCICLCICO(NUBILLINGCYCLE);

            
            RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( IRCPRODUCT.PRODUCT_ID, GE_BOCONSTANTS.CNUNULLNUM );

            
            RCSERVSUSC.SESUESCO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE ('EST_SERVICIO_SIN_CORTE');
            
            RCSERVSUSC.SESUCICO := NUSESUCICO;
            
            
            RCSERVSUSC.SESUSIST := NVL(IRCPRODUCT.COMPANY_ID, GNUDEF_COMPANY_ID);
            
            UT_TRACE.TRACE('ServSusc Existe. Estado:['||RCSERVSUSC.SESUESCO||']Ciclo:['||RCSERVSUSC.SESUCICO||'] Ciclo Fact:['||RCSERVSUSC.SESUCICL||']',7);
            UT_TRACE.TRACE('ServSusc.SesuSist = '||RCSERVSUSC.SESUSIST||'',7);

            
            PKTBLSERVSUSC.UPRECORD( RCSERVSUSC );

            
            NUDEPENDSERVID := PKBCSERVSUSC.FNUGETDEPENDSERVI(RCSERVSUSC.SESUNUSE);
            
            IF (NUDEPENDSERVID IS NOT NULL) THEN

                
                RCDEPENDSERV := PKTBLSERVSUSC.FRCGETRECORD( NUDEPENDSERVID, GE_BOCONSTANTS.CNUNULLNUM );
                
                RCDEPENDSERV.SESUESCO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE ('EST_SERVICIO_SIN_CORTE');
                
                PKTBLSERVSUSC.UPRECORD( RCDEPENDSERV );
                
            END IF;
            
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END UPDSERVSUSC;

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo PR_BOCreationProduct.CreateServSusc',6);

        
        IF (PKTBLSERVSUSC.FBLEXIST(IRCPRODUCT.PRODUCT_ID)) THEN
            
            UPDSERVSUSC;
            RETURN;
        END IF;

        
        FOR REC IN MO_BCBILLING.CUFIGUREBYPACK(INUPACKAGEID) LOOP
            RCBILLING := REC;
        END LOOP;
        UT_TRACE.TRACE('Mo_Billing Paquete:['||RCBILLING.BILLING_ID||']',7);

        
        IF (RCBILLING.BILLING_ID IS NULL) THEN

            
            FOR REC IN MO_BCBILLING.CUFIGUREBYMOT(IRCMOTIVE.MOTIVE_ID) LOOP
                RCBILLING := REC;
            END LOOP;
            UT_TRACE.TRACE('Mo_Billing Motivo:['||RCBILLING.BILLING_ID||']',7);
        END IF;

        
        NUSESUCATE := IRCPRODUCT.CATEGORY_ID;
        NUSESUSUCA := IRCPRODUCT.SUBCATEGORY_ID;

		
        IF (RCBILLING.DETAIL_PRINT IS NULL) THEN
            
    		IF( PR_BOPARAMETER.FSBGETPRINTDISTANCEDEF IS NULL) THEN
                SBSESUIMLD := GE_BOEQUIVALENCVALUES.FSBGETTARGETVALUE(GW_BOPARAMETER.FNUGETEQ_Y_N,GE_BOCONSTANTS.CSBNO);
            ELSE
                SBSESUIMLD := PR_BOPARAMETER.FSBGETPRINTDISTANCEDEF;
            END IF;
        ELSE
            SBSESUIMLD := GE_BOEQUIVALENCVALUES.FSBGETTARGETVALUE(GW_BOPARAMETER.FNUGETEQ_Y_N,RCBILLING.DETAIL_PRINT);
        END IF;
        UT_TRACE.TRACE('Imprime Larga Distancia:['||SBSESUIMLD||']',7);

        
        IF (IRCPRODUCT.COMMERCIAL_PLAN_ID IS NOT NULL) THEN
            NUSESUPLFA := DACC_COMMERCIAL_PLAN.FNUGETBILLING_PLAN(IRCPRODUCT.COMMERCIAL_PLAN_ID);
        END IF;

        
        NUSESUMULT := 1;
        UT_TRACE.TRACE('Unidades Hab:['||NUSESUMULT||']Ciclo Consumo:['||NUSESUCICO||']Plan Fact:['||NUSESUPLFA||']',7);

        
        FOR REC IN PR_BCDATAUTILITIES.CUDATAUTILITIESBYPROD(IRCPRODUCT.PRODUCT_ID) LOOP
            RCDATAUTILITIES := REC;
        END LOOP;

        
        PKSUBSCRIBERSERVICE.REGISTER    (
                                        IRCPRODUCT.PRODUCT_ID,
                                        IRCPRODUCT.PRODUCT_TYPE_ID,
                                        IRCPRODUCT.SUBSCRIPTION_ID,
                                        NVL(NUSESUCATE,CNUNULLNUMS),
                                        NVL(NUSESUSUCA,CNUNULLNUMS),
                                        NVL(IRCMOTIVE.ATTENTION_DATE,IDTCREATIONDATE),
                                        NVL(NUSESUPLFA,CNUNULLNUMS),
                                        SBSESUIMLD,
                                        NUERRORCODE,
                                        SBERRORMESSAGE,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NUSESUMULT,
                                        NUSESUCICO,
                                        RCDATAUTILITIES.CHARGE,
                                        IRCPRODUCT.DISTRIBUT_ADMIN_ID,
                                        IRCPRODUCT.CREDIT_LIMIT,
                                        IRCMOTIVE.IS_MULT_PRODUCT_FLAG,
                                        IRCMOTIVE.COMMERCIAL_PLAN_ID,
                                        FALSE,
                                        NVL(IRCPRODUCT.COMPANY_ID, GNUDEF_COMPANY_ID)
                                        );
                                        
        GW_BOERRORS.CHECKERROR(NUERRORCODE,SBERRORMESSAGE);

        

        CC_BOBILLINGCYCLE.UPDCYCLEBYPROD(IRCPRODUCT.PRODUCT_ID, IRCMOTIVE.MOTIVE_ID, NUBILLINGCYCLE);

        
        NUSESUCICO := PKTBLCICLO.FNUGETCICLCICO(NUBILLINGCYCLE);

        
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( IRCPRODUCT.PRODUCT_ID, GE_BOCONSTANTS.CNUNULLNUM );
        RCSERVSUSC.SESUCICO := NUSESUCICO;
        PKTBLSERVSUSC.UPRECORD( RCSERVSUSC );

        UT_TRACE.TRACE('Finaliza Metodo PR_BOCreationProduct.CreateServSusc',6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATESERVSUSC;

    







































































































    PROCEDURE CREATIONPRODUCT
    (
        INUMOTIVEID           IN     MO_MOTIVE.MOTIVE_ID%TYPE,
        ONUPRODUCTID          OUT    PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPRODUCTSTATUSID    IN     PR_PRODUCT.PRODUCT_STATUS_ID%TYPE DEFAULT PR_BOPARAMETER.FNUGETPRODACTI,
        IBOREGISTERINFCOMP    IN     BOOLEAN DEFAULT TRUE,
        IDTDATE               IN     DATE DEFAULT NULL
    )
    IS
        RCPRODUCT         DAPR_PRODUCT.STYPR_PRODUCT;
        RCPACKAGES        DAMO_PACKAGES.STYMO_PACKAGES;
        RCMOTIVE          DAMO_MOTIVE.STYMO_MOTIVE;
        RCADDRESS         DAAB_ADDRESS.STYAB_ADDRESS;
        DTSYSDATE         DATE;
        NUDEPENDSERVID    PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPRODGEOLOC      GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;

        






        FUNCTION FBOMOTIVEHASPRODUCT
        RETURN BOOLEAN
        IS
        BEGIN

            
            ONUPRODUCTID := RCMOTIVE.PRODUCT_ID;
            UT_TRACE.TRACE('Motivo:['||INUMOTIVEID||']Producto:['||ONUPRODUCTID||']',5);

            
            IF (ONUPRODUCTID IS NOT NULL) THEN
                
                RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(ONUPRODUCTID);
                RETURN TRUE;
            ELSE
                RETURN FALSE;
            END IF;
            
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FBOMOTIVEHASPRODUCT;

    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOCreationProduct.CreationProduct',4);
        UT_TRACE.TRACE('Motivo:['||INUMOTIVEID||'] Estado:['||INUPRODUCTSTATUSID||']',5);

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        
        RCPACKAGES := DAMO_PACKAGES.FRCGETRECORD(RCMOTIVE.PACKAGE_ID);

        
        DTSYSDATE := NVL(IDTDATE, SYSDATE);

        
        IF (NOT FBOMOTIVEHASPRODUCT) THEN

            ONUPRODUCTID := PR_BOSEQUENCE.GETPRODUCTID;

            RCPRODUCT.PRODUCT_ID := ONUPRODUCTID;

            RCPRODUCT.SUBSCRIPTION_ID := RCMOTIVE.SUBSCRIPTION_ID;
            RCPRODUCT.PRODUCT_TYPE_ID := RCMOTIVE.PRODUCT_TYPE_ID;
            RCPRODUCT.PRODUCT_STATUS_ID := INUPRODUCTSTATUSID;
            RCPRODUCT.CREATION_DATE := DTSYSDATE;
            RCPRODUCT.RETIRE_DATE := NULL;
            RCPRODUCT.COMMERCIAL_PLAN_ID := RCMOTIVE.COMMERCIAL_PLAN_ID;
            RCPRODUCT.PERSON_ID := RCPACKAGES.PERSON_ID;
            RCPRODUCT.CLASS_PRODUCT := NULL;
            RCPRODUCT.ROLE_WARRANTY := NULL;
            RCPRODUCT.PERMANENCE := NVL(RCMOTIVE.PERMANENCE,DACC_COMMERCIAL_PLAN.FNUGETPERMANENCE(RCPRODUCT.COMMERCIAL_PLAN_ID));
            RCPRODUCT.EXPIRATION_OF_PLAN := CC_BOCOMMPERMANENCE.FDTCALCULATEEXPDATE(DTSYSDATE, RCPRODUCT.PERMANENCE);
            RCPRODUCT.ORGANIZAT_AREA_ID := RCPACKAGES.SALE_CHANNEL_ID;


            RCPRODUCT.DISTRIBUT_ADMIN_ID := RCMOTIVE.DISTRIBUT_ADMIN_ID;
            RCPRODUCT.SERVICE_NUMBER := NVL(RCMOTIVE.SERVICE_NUMBER,TO_CHAR(ONUPRODUCTID));
            RCPRODUCT.IS_PRIVATE := NVL(RCMOTIVE.PRIVACY_FLAG,GE_BOCONSTANTS.CSBNO);
            RCPRODUCT.CREDIT_LIMIT := NVL(RCMOTIVE.CREDIT_LIMIT,0);
            RCPRODUCT.COMPANY_ID := NVL(RCMOTIVE.COMPANY_ID, GNUDEF_COMPANY_ID);

            

            
            RCPRODUCT.CATEGORY_ID := NVL(RCMOTIVE.CATEGORY_ID, CNUNULLNUMS);
            RCPRODUCT.SUBCATEGORY_ID := NVL(RCMOTIVE.SUBCATEGORY_ID, CNUNULLNUMS);
            
            RCPRODUCT.PROVISIONAL_BEG_DATE := RCMOTIVE.PROV_INITIAL_DATE;
            RCPRODUCT.PROVISIONAL_END_DATE := RCMOTIVE.PROV_FINAL_DATE;

            
            IF (RCPRODUCT.PROVISIONAL_BEG_DATE IS NOT NULL) AND (RCPRODUCT.PROVISIONAL_END_DATE IS NOT NULL) THEN

                RCPRODUCT.IS_PROVISIONAL := GE_BOCONSTANTS.CSBYES;
            ELSE

                RCPRODUCT.IS_PROVISIONAL := GE_BOCONSTANTS.CSBNO;
            END IF;

            
            DAPR_PRODUCT.INSRECORD(RCPRODUCT);

            UT_TRACE.TRACE('Producto Creado:['||ONUPRODUCTID||']',5);
        ELSE

            
            RCPRODUCT.SERVICE_NUMBER := NVL(RCMOTIVE.SERVICE_NUMBER,TO_CHAR(ONUPRODUCTID));
            RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODACTI;
            RCPRODUCT.DISTRIBUT_ADMIN_ID := RCMOTIVE.DISTRIBUT_ADMIN_ID;
            RCPRODUCT.COMPANY_ID := NVL(RCMOTIVE.COMPANY_ID, GNUDEF_COMPANY_ID);
            RCPRODUCT.PERMANENCE := NVL(RCMOTIVE.PERMANENCE,DACC_COMMERCIAL_PLAN.FNUGETPERMANENCE(RCPRODUCT.COMMERCIAL_PLAN_ID));
            RCPRODUCT.EXPIRATION_OF_PLAN := CC_BOCOMMPERMANENCE.FDTCALCULATEEXPDATE(DTSYSDATE, RCPRODUCT.PERMANENCE);

            DAPR_PRODUCT.UPDRECORD(RCPRODUCT);

            
            NUDEPENDSERVID := PKBCSERVSUSC.FNUGETDEPENDSERVI(RCPRODUCT.PRODUCT_ID);

            
            IF (NUDEPENDSERVID IS NOT NULL) THEN
            
                
                DAPR_PRODUCT.UPDPRODUCT_STATUS_ID(NUDEPENDSERVID,PR_BOPARAMETER.FNUGETPRODACTI);
                
                
                GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(PKTBLSUSCRIPC.FNUGETSUSCCLIE(DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(NUDEPENDSERVID), PKCONSTANTE.NOCACHE));
                
            END IF;
            
            UT_TRACE.TRACE('Producto Actualizado:['||ONUPRODUCTID||']',5);
            
        END IF;

        
        GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(PKTBLSUSCRIPC.FNUGETSUSCCLIE(RCPRODUCT.SUBSCRIPTION_ID, PKCONSTANTE.NOCACHE));

        
        IF (IBOREGISTERINFCOMP) THEN

            
            CREATIONADDRESS(ONUPRODUCTID,INUMOTIVEID,RCADDRESS,TRUE);

            
            CREATIONDATASUBSTYPE(ONUPRODUCTID,RCPACKAGES.PACKAGE_ID,INUMOTIVEID);

            
            CREATIONDATAFIGURE(ONUPRODUCTID,INUMOTIVEID);
            
            
            CREATIONDATAUTILITIES(ONUPRODUCTID,INUMOTIVEID);

            
            PR_BOCREATIONADDITDATAPROD.CREATIONADDITIONALDATA(ONUPRODUCTID,INUMOTIVEID);

            
            PR_BOREQUEST.CREATEREQUESTPRODUCT( MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
                                               DTSYSDATE,
                                               ONUPRODUCTID,
                                               RCPACKAGES.PACKAGE_ID,
                                               RCMOTIVE.MOTIVE_ID,
                                               NVL(RCMOTIVE.MOTIVE_TYPE_ID,MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE),
                                               RCPACKAGES.CUST_CARE_REQUES_NUM
                                              );
        ELSE
            
            CREATIONADDRESS(ONUPRODUCTID,INUMOTIVEID,RCADDRESS,TRUE);
        END IF;

        
        CREATESERVSUSC(RCPACKAGES.PACKAGE_ID,RCPRODUCT,RCMOTIVE,RCADDRESS,DTSYSDATE);

        
        IF (IBOREGISTERINFCOMP) THEN

            
            CC_BOPAYMENTS.UPDATEPAYMENTPRODUCT(INUMOTIVEID,ONUPRODUCTID);

            
            MO_BOCOMMERCIALRELAT.CREATEPRODUCTSPONSOR(ONUPRODUCTID,RCPACKAGES.PACKAGE_ID);
        END IF;

        UT_TRACE.TRACE('Finaliza PR_BOCreationProduct.CreationProduct Producto['||ONUPRODUCTID||']',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATIONPRODUCT;

    



































































    PROCEDURE REGISTER
        (
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        INUPRODUCTTYPEID    IN  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        INUCOMMERCIALPLANID IN  PR_PRODUCT.COMMERCIAL_PLAN_ID%TYPE,
        IDTCREATIONDATE     IN  PR_PRODUCT.CREATION_DATE%TYPE,
        INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        INUCATEGORYID       IN  PR_PRODUCT.CATEGORY_ID%TYPE,
        INUSUBCATEGORYID    IN  PR_PRODUCT.SUBCATEGORY_ID%TYPE,
        INUCOMPANYID        IN  PR_PRODUCT.COMPANY_ID%TYPE,
        INUSELLERID         IN  PR_PRODUCT.PERSON_ID%TYPE,
        INUSALECHANNEL      IN  PR_PRODUCT.ORGANIZAT_AREA_ID%TYPE,
        ONUPRODUCTID        OUT PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPRODUCTSTATUSID  IN  PR_PRODUCT.PRODUCT_STATUS_ID%TYPE DEFAULT NULL,
        INUSESUESCO         IN  SERVSUSC.SESUESCO%TYPE DEFAULT NULL,
        INUSESUPLFA         IN  SERVSUSC.SESUPLFA%TYPE DEFAULT NULL,
        INUSESUCICL         IN  SERVSUSC.SESUCICL%TYPE DEFAULT NULL,
        INUSESUCICO         IN  SERVSUSC.SESUCICO%TYPE DEFAULT NULL,
        INUCONTACTPHONEID   IN  PR_PRODUCT.SUBS_PHONE_ID%TYPE DEFAULT NULL
       )
    IS
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
        DTCREATION          DATE;
        NUPRODUCTSTATUSID   PR_PRODUCT.PRODUCT_STATUS_ID%TYPE;
        NUSUBSCRIBER        GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE ;
        NUTIPOCLIE          GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE ;
        NUSUBSCRIPTIONID     SUSCRIPC.SUSCCODI%TYPE;
        SBTIPOCOBRO         SERVICIO.SERVTICO%TYPE;
        
        NUCLIENT            SUSCRIPC.SUSCCLIE%TYPE;
        
        NUNEWSUBSCRIPTIONID PR_PRODUCT.SUBSCRIPTION_ID%TYPE;
        
        NUERRORMESSAGEID    GE_MESSAGE.MESSAGE_ID%TYPE;
        
        SBERRORPARAMETERS   VARCHAR2(2000);
        
        SBSERVTICOSUSC      VARCHAR2(100);
        
        SBSERVTICONEWPROD   VARCHAR2(100);


        PROCEDURE REGSERVSUSC
        IS
            NUSESUSUCA          SERVSUSC.SESUSUCA%TYPE;
            NUSESUCATE          SERVSUSC.SESUCATE%TYPE;
            SBSESUIMLD          SERVSUSC.SESUIMLD%TYPE;
            NUSESUPLFA          SERVSUSC.SESUPLFA%TYPE;
            NUSESUMULT          SERVSUSC.SESUMULT%TYPE;
            NUSESUCICO          SERVSUSC.SESUCICO%TYPE;
            NUSESUCICL          SERVSUSC.SESUCICL%TYPE;
            NUSESUESCO          SERVSUSC.SESUESCO%TYPE;

            NUERRORCODE         GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
            SBERRORMESSAGE      GE_ERROR_LOG.DESCRIPTION%TYPE;

            RCSERVSUSC          SERVSUSC%ROWTYPE;
            RCADDRESS           DAAB_ADDRESS.STYAB_ADDRESS;

        BEGIN
            UT_TRACE.TRACE('Inicia Metodo PR_BOCreationProduct.RegServSusc',6);

            
            NUSESUCATE := RCPRODUCT.CATEGORY_ID;
            NUSESUSUCA := RCPRODUCT.SUBCATEGORY_ID;

    		
            IF( PR_BOPARAMETER.FSBGETPRINTDISTANCEDEF IS NULL) THEN
                SBSESUIMLD := PKCONSTANTE.SI;
            ELSE
                SBSESUIMLD := PR_BOPARAMETER.FSBGETPRINTDISTANCEDEF;
            END IF;
            UT_TRACE.TRACE('Imprime Larga Distancia:['||SBSESUIMLD||']',7);

            
            NUSESUPLFA := NVL(INUSESUPLFA, DACC_COMMERCIAL_PLAN.FNUGETBILLING_PLAN(INUCOMMERCIALPLANID));
            NUSESUESCO := NVL(INUSESUESCO, GNUACTIVE);

            
            NUSESUCICL := NVL(INUSESUCICL, PKTBLSUSCRIPC.FNUGETBILLINGCYCLE(NUSUBSCRIPTIONID));
            
            NUSESUCICO := NVL(INUSESUCICO, PKTBLCICLO.FNUGETCICLCICO(NUSESUCICL));

            
            NUSESUMULT := 1;
            UT_TRACE.TRACE('Unidades Hab:['||NUSESUMULT||']Ciclo Facturaci�n:['||NUSESUCICL||']Ciclo Consumo:['||NUSESUCICO||']Plan Fact:['||NUSESUPLFA||']',7);

            
            PKSUBSCRIBERSERVICE.REGISTER    (
                                            RCPRODUCT.PRODUCT_ID,
                                            RCPRODUCT.PRODUCT_TYPE_ID,
                                            RCPRODUCT.SUBSCRIPTION_ID,
                                            NVL(NUSESUCATE,CNUNULLNUMS),
                                            NVL(NUSESUSUCA,CNUNULLNUMS),
                                            RCPRODUCT.CREATION_DATE,
                                            NVL(NUSESUPLFA,CNUNULLNUMS),
                                            SBSESUIMLD,
                                            NUERRORCODE,
                                            SBERRORMESSAGE,
                                            NUSESUESCO,
                                            NULL,
                                            NULL,
                                            NUSESUMULT,
                                            NUSESUCICO,
                                            NULL,
                                            RCPRODUCT.DISTRIBUT_ADMIN_ID,
                                            RCPRODUCT.CREDIT_LIMIT,
                                            GE_BOCONSTANTS.CSBNO,
                                            INUCOMMERCIALPLANID,
                                            FALSE,
                                            NVL(INUCOMPANYID, GNUDEF_COMPANY_ID));

            GW_BOERRORS.CHECKERROR(NUERRORCODE,SBERRORMESSAGE);

            UT_TRACE.TRACE('Finaliza Metodo PR_BOCreationProduct.RegServSusc',6);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END REGSERVSUSC;

    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOCreationProduct.Register Contrato:['||INUSUBSCRIPTIONID||']Tipo Prod:['||INUPRODUCTTYPEID||']',4);
        UT_TRACE.TRACE('Plan:['||INUCOMMERCIALPLANID||']Direcci�n:['||INUADDRESSID||']',5);

        
        DTCREATION := NVL(IDTCREATIONDATE, SYSDATE);
        NUPRODUCTSTATUSID := NVL(INUPRODUCTSTATUSID, PR_BOPARAMETER.FNUGETPRPENDINST);

         
        NUSUBSCRIBER := PKTBLSUSCRIPC.FNUGETCUSTOMER (INUSUBSCRIPTIONID) ;
        NUTIPOCLIE   := DAGE_SUBSCRIBER.FNUGETSUBSCRIBER_TYPE_ID (NUSUBSCRIBER) ;

        
        SBTIPOCOBRO := PKBCSERVICIO.FRCGETPRODUCTTYPERECORD(INUPRODUCTTYPEID).SERVTICO;

        

        IF ( NOT PKBCSUSCRIPC.FBLVALSUSCBYSERVTICO(INUSUBSCRIPTIONID, SBTIPOCOBRO) ) THEN
            


            
            NUCLIENT := PKTBLSUSCRIPC.FNUGETCUSTOMER(INUSUBSCRIPTIONID);
            
            NUNEWSUBSCRIPTIONID := PKBCSUSCRIPC.FNUGETSUSCBYSERVTICOCLIE(NUCLIENT, SBTIPOCOBRO);
            
            IF ( NUNEWSUBSCRIPTIONID = PKCONSTANTE.NULLNUM ) THEN
                
                NUERRORMESSAGEID := CNUCONTRATO_NO_APLICA_NO_SUG;
                
                IF ( SBTIPOCOBRO = PKBILLCONST.CSBTIPO_COBRO_VEN ) THEN
                    SBSERVTICOSUSC := 'Anticipado ('||PKBILLCONST.CSBTIPO_COBRO_ANT||')';
                    SBSERVTICONEWPROD := 'Vencido ('||SBTIPOCOBRO||')';
                ELSE
                    SBSERVTICOSUSC := 'Vencido ('||PKBILLCONST.CSBTIPO_COBRO_VEN||')';
                    SBSERVTICONEWPROD := 'Anticipado ('||SBTIPOCOBRO||')';
                END IF;
                
                SBERRORPARAMETERS := INUSUBSCRIPTIONID||'|'||SBSERVTICOSUSC||'|'||SBSERVTICONEWPROD;
            ELSE
                
                NUERRORMESSAGEID := CNUCONTRATO_NO_APLICA_SUG;
                
                IF ( SBTIPOCOBRO = PKBILLCONST.CSBTIPO_COBRO_VEN ) THEN
                    SBSERVTICOSUSC := 'Anticipado ('||PKBILLCONST.CSBTIPO_COBRO_ANT||')';
                    SBSERVTICONEWPROD := 'Vencido ('||SBTIPOCOBRO||')';
                ELSE
                    SBSERVTICOSUSC := 'Vencido ('||PKBILLCONST.CSBTIPO_COBRO_VEN||')';
                    SBSERVTICONEWPROD := 'Anticipado ('||SBTIPOCOBRO||')';
                END IF;
                
                SBERRORPARAMETERS := INUSUBSCRIPTIONID||'|'||SBSERVTICOSUSC||'|'||SBSERVTICONEWPROD||'|'||NUNEWSUBSCRIPTIONID;
            END IF;
            
            ERRORS.SETERROR
            (
                NUERRORMESSAGEID,
                SBERRORPARAMETERS
            );
            RAISE EX.CONTROLLED_ERROR;
        ELSE
             NUSUBSCRIPTIONID := INUSUBSCRIPTIONID;
        END IF;

        
        ONUPRODUCTID := PR_BOSEQUENCE.GETPRODUCTID;

        
        LE_BOLIMITEDECREDITO.OBTENERLIMITECREDITO(
                NUTIPOCLIE,
                INUPRODUCTTYPEID,
                INUCOMMERCIALPLANID,
                RCPRODUCT.CREDIT_LIMIT
        );
        UT_TRACE.TRACE('L�mite Cr�dito TC['||NUTIPOCLIE||']; TP['||INUPRODUCTTYPEID||
        ']; PC['||INUCOMMERCIALPLANID ||'] es igual a: '||RCPRODUCT.CREDIT_LIMIT, 5);

        RCPRODUCT.PRODUCT_ID := ONUPRODUCTID;
        
        
        RCPRODUCT.CATEGORY_ID := NVL(INUCATEGORYID,CNUNULLNUMS);
        RCPRODUCT.SUBCATEGORY_ID := NVL(INUSUBCATEGORYID,CNUNULLNUMS);
        
        
        RCPRODUCT.PRODUCT_TYPE_ID := INUPRODUCTTYPEID;
        RCPRODUCT.SUBSCRIPTION_ID := NUSUBSCRIPTIONID;
        RCPRODUCT.COMMERCIAL_PLAN_ID := INUCOMMERCIALPLANID;
        RCPRODUCT.COMPANY_ID := NVL(INUCOMPANYID, GNUDEF_COMPANY_ID);
        RCPRODUCT.ADDRESS_ID := INUADDRESSID;

        RCPRODUCT.IS_PRIVATE := GE_BOCONSTANTS.CSBNO;
        RCPRODUCT.SERVICE_NUMBER := TO_CHAR(ONUPRODUCTID);
        RCPRODUCT.CREATION_DATE := DTCREATION;
        RCPRODUCT.PROVISIONAL_BEG_DATE := DTCREATION;
        RCPRODUCT.PROVISIONAL_END_DATE := UT_DATE.FDTMAXDATE;
        RCPRODUCT.IS_PROVISIONAL := GE_BOCONSTANTS.CSBNO;
        RCPRODUCT.PRODUCT_STATUS_ID := INUPRODUCTSTATUSID;

        RCPRODUCT.PERSON_ID := INUSELLERID;
        RCPRODUCT.ORGANIZAT_AREA_ID := INUSALECHANNEL;
        
        RCPRODUCT.PERMANENCE := DACC_COMMERCIAL_PLAN.FNUGETPERMANENCE(INUCOMMERCIALPLANID);
        RCPRODUCT.EXPIRATION_OF_PLAN := CC_BOCOMMPERMANENCE.FDTCALCULATEEXPDATE(DTCREATION,RCPRODUCT.PERMANENCE );


        
        RCPRODUCT.SUBS_PHONE_ID := INUCONTACTPHONEID;



        
        DAPR_PRODUCT.INSRECORD(RCPRODUCT);

        UT_TRACE.TRACE('-- PR_Product ['||ONUPRODUCTID||']',6);
        
        
        GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(NUSUBSCRIBER);

        PR_BOSUBSBYPRODUCT.INSPRODROL(RCPRODUCT.PRODUCT_ID,NUSUBSCRIBER,CC_BOCONSTANTS.CNUUSER_CLIENT_ROLE);

        PR_BOSUBSBYPRODUCT.INSPRODROL(RCPRODUCT.PRODUCT_ID,NUSUBSCRIBER,CC_BOCONSTANTS.CNUOWNER_CLIENT_ROLE);

        
        REGSERVSUSC;

        UT_TRACE.TRACE('Finaliza PR_BOCreationProduct.Register',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGISTER;

    
































    PROCEDURE INITIALCREATIONPRODUCTIND
    (
        INUMOTIVEID         IN    MO_MOTIVE.MOTIVE_ID%TYPE,
        INUPRODUCTTYPEID    IN    PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        INUCREATIONDATE     IN    PR_PRODUCT.CREATION_DATE%TYPE
    )
    IS
        
        
        
        NUPRODUCTID            PR_PRODUCT.PRODUCT_ID%TYPE;
        NUSUBSCRIPTIONID       PR_PRODUCT.SUBSCRIPTION_ID%TYPE;
        NUESTACORTPENDINST     SERVSUSC.SESUESCO%TYPE;
        TBCOMPONENT            DAMO_COMPONENT.TYTBMO_COMPONENT;
        BIINDEXCOMP            BINARY_INTEGER := 1;
        NUCOMPONENTPRODID      PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPARENTCOMPOPRODID    PR_COMPONENT.COMPONENT_ID%TYPE;
        
        SBTIPOCOBRO            SERVICIO.SERVTICO%TYPE;
        
        NUCLIENT               SUSCRIPC.SUSCCLIE%TYPE;
        
        NUNEWSUBSCRIPTIONID    PR_PRODUCT.SUBSCRIPTION_ID%TYPE;
        
        NUERRORMESSAGEID       GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORPARAMETERS      VARCHAR2(2000);
         
        SBSERVTICOSUSC         VARCHAR2(100);
        
        SBSERVTICONEWPROD      VARCHAR2(100);
    BEGIN

        
        NUSUBSCRIPTIONID:= DAMO_MOTIVE.FNUGETSUBSCRIPTION_ID(INUMOTIVEID);

        
        SBTIPOCOBRO := PKTBLSERVICIO.FSBGETSERVTICO(INUPRODUCTTYPEID);

        
        IF ( NOT PKBCSUSCRIPC.FBLVALSUSCBYSERVTICO(NUSUBSCRIPTIONID,SBTIPOCOBRO) ) THEN
            

               
            
            NUCLIENT := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUSUBSCRIPTIONID);
            
            NUNEWSUBSCRIPTIONID := PKBCSUSCRIPC.FNUGETSUSCBYSERVTICOCLIE(NUCLIENT, SBTIPOCOBRO);
            
            IF ( NUNEWSUBSCRIPTIONID = PKCONSTANTE.NULLNUM ) THEN
                
                NUERRORMESSAGEID := CNUCONTRATO_NO_APLICA_NO_SUG;
                
                IF ( SBTIPOCOBRO = PKBILLCONST.CSBTIPO_COBRO_VEN ) THEN
                    SBSERVTICOSUSC := 'Anticipado ('||PKBILLCONST.CSBTIPO_COBRO_ANT||')';
                    SBSERVTICONEWPROD := 'Vencido ('||SBTIPOCOBRO||')';
                ELSE
                    SBSERVTICOSUSC := 'Vencido ('||PKBILLCONST.CSBTIPO_COBRO_VEN||')';
                    SBSERVTICONEWPROD := 'Anticipado ('||SBTIPOCOBRO||')';
                END IF;
                
                SBERRORPARAMETERS := NUSUBSCRIPTIONID||'|'||SBSERVTICOSUSC||'|'||SBSERVTICONEWPROD;
            ELSE
                
                NUERRORMESSAGEID := CNUCONTRATO_NO_APLICA_SUG;
                
                IF ( SBTIPOCOBRO = PKBILLCONST.CSBTIPO_COBRO_VEN ) THEN
                    SBSERVTICOSUSC := 'Anticipado ('||PKBILLCONST.CSBTIPO_COBRO_ANT||')';
                    SBSERVTICONEWPROD := 'Vencido ('||SBTIPOCOBRO||')';
                ELSE
                    SBSERVTICOSUSC := 'Vencido ('||PKBILLCONST.CSBTIPO_COBRO_VEN||')';
                    SBSERVTICONEWPROD := 'Anticipado ('||SBTIPOCOBRO||')';
                END IF;
                
                SBERRORPARAMETERS := NUSUBSCRIPTIONID||'|'||SBSERVTICOSUSC||'|'||SBSERVTICONEWPROD||'|'||NUNEWSUBSCRIPTIONID;
            END IF;
            
            ERRORS.SETERROR
            (
                NUERRORMESSAGEID,
                SBERRORPARAMETERS
            );
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        PR_BOCREATIONPRODUCT.CREATIONPRODUCT ( INUMOTIVEID,
                                               NUPRODUCTID,
                                               PR_BOPARAMETER.FNUGETPRPENDINST,
                                               FALSE,
                                               INUCREATIONDATE
                                              );

        
        NUESTACORTPENDINST := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE(CSBESTCORTPENDINST);

        

        IF (PKTBLCONFESCO.FSBFLAGBILLABLE(INUPRODUCTTYPEID, NUESTACORTPENDINST) = GE_BOCONSTANTS.CSBNO) THEN
            ERRORS.SETERROR(CNUERRORESTCORTNOFACT);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        PKTBLSERVSUSC.UPSUSPENSIONSTATUS(NUPRODUCTID, NUESTACORTPENDINST);

        
        DAMO_MOTIVE.UPDPRODUCT_ID(INUMOTIVEID,NUPRODUCTID);

        
        FOR RC IN MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT(INUMOTIVEID) LOOP
            TBCOMPONENT(BIINDEXCOMP) := DAMO_COMPONENT.FRCGETRECORD(RC.COMPONENT_ID);
            BIINDEXCOMP := BIINDEXCOMP + 1;
        END LOOP;

        
        BIINDEXCOMP:= TBCOMPONENT.FIRST;
        WHILE  BIINDEXCOMP IS NOT NULL LOOP
            
            PR_BOCREATIONCOMPONENT.INITIALCREATIONCOMPONENTIND ( NUPRODUCTID,
                                                                 NULL,
                                                                 INUCREATIONDATE,
                                                                 TBCOMPONENT(BIINDEXCOMP),
                                                                 PR_BOCREATIONCOMPONENT.CNUCOMPSTATINSTALLATIONPEND,
                                                                 NUCOMPONENTPRODID,
                                                                 NUPARENTCOMPOPRODID
                                                               );
            BIINDEXCOMP := TBCOMPONENT.NEXT(BIINDEXCOMP);
        END LOOP;

        
        PR_BOCREATIONCOMPONENT.SETINCLUDEDFEATURES(NUPRODUCTID);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
    END INITIALCREATIONPRODUCTIND;

    























    PROCEDURE INITIALCREATIONPRODUCT
    (
        INUPACKAGEID    IN    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        RCPACKAGES        DAMO_PACKAGES.STYMO_PACKAGES;
        TBMOTACTBYPACK    DAMO_MOTIVE.TYTBMO_MOTIVE;
        BIINDEXMOT        BINARY_INTEGER;
        RCSUSCRIPC        SUSCRIPC%ROWTYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOCreationProduct.InitialCreationProduct Solicitud:['||INUPACKAGEID||']',4);

        
        RCPACKAGES := DAMO_PACKAGES.FRCGETRECORD ( INUPACKAGEID );

        
        TBMOTACTBYPACK := MO_BCMOTIVE.FTBACTMOTSBYPACKNTYPE(INUPACKAGEID, MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE);

        
        BIINDEXMOT := TBMOTACTBYPACK.FIRST;
        WHILE (BIINDEXMOT IS NOT NULL) LOOP
        
            
            CC_BOEMPRESA.SETSUBSCRIPTIONCOMPANY(TBMOTACTBYPACK(BIINDEXMOT).SUBSCRIPTION_ID, RCPACKAGES.COMPANY_ID);
            
            
            IF (TBMOTACTBYPACK(BIINDEXMOT).PRODUCT_ID IS NULL) THEN

                PR_BOCREATIONPRODUCT.INITIALCREATIONPRODUCTIND ( TBMOTACTBYPACK(BIINDEXMOT).MOTIVE_ID,
                                                                 TBMOTACTBYPACK(BIINDEXMOT).PRODUCT_TYPE_ID,
                                                                 SYSDATE
                                                               );
            END IF;
            
            BIINDEXMOT := TBMOTACTBYPACK.NEXT(BIINDEXMOT);
        END LOOP;

        UT_TRACE.TRACE('Finaliza PR_BOCreationProduct.InitialCreationProduct',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
    END INITIALCREATIONPRODUCT;

BEGIN
    LOADPARAMETERS;

    SBAPLICACION := ERRORS.FSBGETAPPLICATION;
    IF (SBAPLICACION IS NULL) THEN
        ERRORS.SETAPPLICATION(CSBAPLICACION);
    END IF;
END PR_BOCREATIONPRODUCT;