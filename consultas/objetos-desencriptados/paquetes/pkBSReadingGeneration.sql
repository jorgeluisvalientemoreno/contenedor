PACKAGE pkBSReadingGeneration AS










































    
    
    
    
    
    
    
    
    
    
    
    

    
    FUNCTION FSBVERSION  RETURN VARCHAR2;

    
    PROCEDURE GENLECTURESBYDIVI
    (
        INUDIVI     IN REACGELE.RAGLDIVI%TYPE,
        INUPERICOSE IN PERICOSE.PECSCONS%TYPE,
        ISBPROGID   IN ESTAPROG.ESPRPROG%TYPE,
        IBLVALIDATE IN BOOLEAN,
        INUIDPROC   IN NUMBER
    );


END PKBSREADINGGENERATION;

PACKAGE BODY pkBSReadingGeneration
IS



































    
    
    
    
    
    CSBVERSION   CONSTANT VARCHAR2(250) := 'SAO384266';

    
    
    

    SBERRMSG    GE_ERROR_LOG.DESCRIPTION%TYPE;    

    
    
    
    
    
    


























FUNCTION FSBVERSION
RETURN VARCHAR2
IS

BEGIN


    PKERRORS.PUSH ('pkBSReadingGeneration.fsbVersion');

    PKERRORS.POP;

    
    RETURN ( CSBVERSION );

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FSBVERSION;






























PROCEDURE VALINPUTDATA
    (
	   INUPERICOSE    IN     PERICOSE.PECSCONS%TYPE
    )
IS

BEGIN


    PKERRORS.PUSH ('pkBSReadingGeneration.ValInputData');

    
    PKBOCONSUMPTPERIOD.VALGENBASICDATA(INUPERICOSE);

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALINPUTDATA;






















PROCEDURE VALFACTPERIOD
    (
	   INUPERICOSE    IN PERICOSE.PECSCONS%TYPE,
	   ISBPROGID      IN ESTAPROG.ESPRPROG%TYPE,
       INUIDPROC      IN NUMBER
    )
IS

    NUPERIFACT        PERIFACT.PEFACODI%TYPE;       
    SBPROGID          ESTAPROG.ESPRPROG%TYPE;
    SBMESSAGE         ESTAPROG.ESPRMESG%TYPE;
    
BEGIN


    PKERRORS.PUSH ('pkBSReadingGeneration.ValFactPeriod');

    
    NUPERIFACT := PKBCPERIFACT.FNUBILLPERBYCONSPER(INUPERICOSE);

    
    IF ( SYSDATE < PKTBLPERIFACT.FDTGETINITIALDATE ( NUPERIFACT ) OR
         SYSDATE > PKTBLPERIFACT.FDTGETENDDATE ( NUPERIFACT )) THEN

        SBPROGID := ISBPROGID||''||INUIDPROC;
        
        SBMESSAGE := 'El periodo de facturaciï¿½n '||NUPERIFACT||
                     ' asociado al periodo de consumo '||INUPERICOSE||
                     ', debe tener fecha final vigente';

        PKSTATUSEXEPROGRAMMGR.PROCESSFINISHNOKAT(SBPROGID,SBMESSAGE);

        RAISE LOGIN_DENIED;
    END IF;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALFACTPERIOD;


































PROCEDURE GENLECTURESBYDIVI
(
    INUDIVI     IN REACGELE.RAGLDIVI%TYPE,
    INUPERICOSE IN PERICOSE.PECSCONS%TYPE,
    ISBPROGID   IN ESTAPROG.ESPRPROG%TYPE,
    IBLVALIDATE IN BOOLEAN,
    INUIDPROC   IN NUMBER
)
IS
    
    
    
    
    
    
    
    
    

    
    
    

    PROCEDURE INITIALIZE IS
    BEGIN
    

	PKERRORS.PUSH('pkBSBusinessObjectFunct.genLecturesbyDivi.Initialize');

	
	PKERRORS.INITIALIZE;

	PKERRORS.POP;

    EXCEPTION
	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE;
	WHEN OTHERS THEN
	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	    PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END INITIALIZE;

    
BEGIN

    PKERRORS.PUSH('pkBSReadingGeneration.genLecturesbyDivi');

    INITIALIZE ;

    IF ( IBLVALIDATE ) THEN
        
        VALINPUTDATA(INUPERICOSE);
        
    END IF;
    
    
    VALFACTPERIOD(INUPERICOSE,UPPER(ISBPROGID),INUIDPROC);

    
    PKBOREADINGGENERATION.GENLECTURESBYDIVI(INUDIVI,
                                            INUPERICOSE,
                                            UPPER(ISBPROGID),
                                            INUIDPROC);

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        RAISE;

END GENLECTURESBYDIVI;

END PKBSREADINGGENERATION;