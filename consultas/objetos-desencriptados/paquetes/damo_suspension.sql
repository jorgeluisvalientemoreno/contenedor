CREATE OR REPLACE PACKAGE BODY DAMO_SUSPENSION IS
   CNURECORD_NOT_EXIST CONSTANT NUMBER( 1 ) := 1;
   CNURECORD_ALREADY_EXIST CONSTANT NUMBER( 1 ) := 2;
   CNUAPPTABLEBUSSY CONSTANT NUMBER( 4 ) := 6951;
   CNUINS_PK_NULL CONSTANT NUMBER( 4 ) := 1682;
   CNURECORD_HAVE_CHILDREN CONSTANT NUMBER( 4 ) := -2292;
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO175100';
   CSBTABLEPARAMETER CONSTANT VARCHAR2( 30 ) := 'MO_SUSPENSION';
   CNUGEENTITYID CONSTANT VARCHAR2( 30 ) := 24;
   CURSOR CULOCKRCBYPK( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE ) IS
SELECT MO_suspension.*,MO_suspension.rowid 
		FROM MO_suspension
		WHERE  Motive_Id = inuMotive_Id
		FOR UPDATE NOWAIT;
   CURSOR CULOCKRCBYROWID( IRIROWID IN VARCHAR2 ) IS
SELECT MO_suspension.*,MO_suspension.rowid 
		FROM MO_suspension
		WHERE 
			rowId = irirowid
		FOR UPDATE NOWAIT;
   TYPE TYRFMO_SUSPENSION IS REF CURSOR;
   RCRECOFTAB TYRCMO_SUSPENSION;
   RCDATA CURECORD%ROWTYPE;
   BLDAO_USE_CACHE BOOLEAN := NULL;
   FUNCTION FSBGETMESSAGEDESCRIPTION
    RETURN VARCHAR2
    IS
      SBTABLEDESCRIPTION VARCHAR2( 32000 );
    BEGIN
      IF ( CNUGEENTITYID > 0 AND DAGE_ENTITY.FBLEXIST( CNUGEENTITYID ) ) THEN
         SBTABLEDESCRIPTION := DAGE_ENTITY.FSBGETDISPLAY_NAME( CNUGEENTITYID );
       ELSE
         SBTABLEDESCRIPTION := CSBTABLEPARAMETER;
      END IF;
      RETURN SBTABLEDESCRIPTION;
   END;
   PROCEDURE GETDAO_USE_CACHE
    IS
    BEGIN
      IF ( BLDAO_USE_CACHE IS NULL ) THEN
         BLDAO_USE_CACHE := GE_BOPARAMETER.FSBGET( 'DAO_USE_CACHE' ) = 'Y';
      END IF;
   END;
   FUNCTION FSBPRIMARYKEY( RCI IN STYMO_SUSPENSION := RCDATA )
    RETURN VARCHAR2
    IS
      SBPK VARCHAR2( 500 );
    BEGIN
      SBPK := '[';
      SBPK := SBPK || UT_CONVERT.FSBTOCHAR( RCI.MOTIVE_ID );
      SBPK := SBPK || ']';
      RETURN SBPK;
   END;
   PROCEDURE LOCKBYPK( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, ORCMO_SUSPENSION OUT STYMO_SUSPENSION )
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      OPEN CULOCKRCBYPK( INUMOTIVE_ID );
      FETCH CULOCKRCBYPK
         INTO ORCMO_SUSPENSION;
      IF CULOCKRCBYPK%NOTFOUND THEN
         CLOSE CULOCKRCBYPK;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CULOCKRCBYPK;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RESOURCE_BUSY THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         ERRORS.SETERROR( CNUAPPTABLEBUSSY, FSBPRIMARYKEY( RCERROR ) || '|' || FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         RAISE;
   END;
   PROCEDURE LOCKBYROWID( IRIROWID IN VARCHAR2, ORCMO_SUSPENSION OUT STYMO_SUSPENSION )
    IS
    BEGIN
      OPEN CULOCKRCBYROWID( IRIROWID );
      FETCH CULOCKRCBYROWID
         INTO ORCMO_SUSPENSION;
      IF CULOCKRCBYROWID%NOTFOUND THEN
         CLOSE CULOCKRCBYROWID;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CULOCKRCBYROWID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF CULOCKRCBYROWID%ISOPEN THEN
            CLOSE CULOCKRCBYROWID;
         END IF;
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RESOURCE_BUSY THEN
         IF CULOCKRCBYROWID%ISOPEN THEN
            CLOSE CULOCKRCBYROWID;
         END IF;
         ERRORS.SETERROR( CNUAPPTABLEBUSSY, 'rowid=[' || IRIROWID || ']|' || FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF CULOCKRCBYROWID%ISOPEN THEN
            CLOSE CULOCKRCBYROWID;
         END IF;
         RAISE;
   END;
   PROCEDURE DELRECORDOFTABLES( ITBMO_SUSPENSION IN OUT NOCOPY TYTBMO_SUSPENSION )
    IS
    BEGIN
      RCRECOFTAB.MOTIVE_ID.DELETE;
      RCRECOFTAB.SUSPENSION_TYPE_ID.DELETE;
      RCRECOFTAB.REGISTER_DATE.DELETE;
      RCRECOFTAB.APLICATION_DATE.DELETE;
      RCRECOFTAB.ENDING_DATE.DELETE;
      RCRECOFTAB.CONNECTION_CODE.DELETE;
      RCRECOFTAB.ROW_ID.DELETE;
   END;
   PROCEDURE FILLRECORDOFTABLES( ITBMO_SUSPENSION IN OUT NOCOPY TYTBMO_SUSPENSION, OBLUSEROWID OUT BOOLEAN )
    IS
    BEGIN
      DELRECORDOFTABLES( ITBMO_SUSPENSION );
      FOR N IN ITBMO_SUSPENSION.FIRST..ITBMO_SUSPENSION.LAST
       LOOP
         RCRECOFTAB.MOTIVE_ID( N ) := ITBMO_SUSPENSION( N ).MOTIVE_ID;
         RCRECOFTAB.SUSPENSION_TYPE_ID( N ) := ITBMO_SUSPENSION( N ).SUSPENSION_TYPE_ID;
         RCRECOFTAB.REGISTER_DATE( N ) := ITBMO_SUSPENSION( N ).REGISTER_DATE;
         RCRECOFTAB.APLICATION_DATE( N ) := ITBMO_SUSPENSION( N ).APLICATION_DATE;
         RCRECOFTAB.ENDING_DATE( N ) := ITBMO_SUSPENSION( N ).ENDING_DATE;
         RCRECOFTAB.CONNECTION_CODE( N ) := ITBMO_SUSPENSION( N ).CONNECTION_CODE;
         RCRECOFTAB.ROW_ID( N ) := ITBMO_SUSPENSION( N ).ROWID;
         OBLUSEROWID := RCRECOFTAB.ROW_ID( N ) IS NOT NULL;
      END LOOP;
   END;
   PROCEDURE LOAD( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE )
    IS
      RCRECORDNULL CURECORD%ROWTYPE;
    BEGIN
      IF CURECORD%ISOPEN THEN
         CLOSE CURECORD;
      END IF;
      OPEN CURECORD( INUMOTIVE_ID );
      FETCH CURECORD
         INTO RCDATA;
      IF CURECORD%NOTFOUND THEN
         CLOSE CURECORD;
         RCDATA := RCRECORDNULL;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CURECORD;
   END;
   PROCEDURE LOADBYROWID( IRIROWID IN VARCHAR2 )
    IS
      RCRECORDNULL CURECORDBYROWID%ROWTYPE;
    BEGIN
      IF CURECORDBYROWID%ISOPEN THEN
         CLOSE CURECORDBYROWID;
      END IF;
      OPEN CURECORDBYROWID( IRIROWID );
      FETCH CURECORDBYROWID
         INTO RCDATA;
      IF CURECORDBYROWID%NOTFOUND THEN
         CLOSE CURECORDBYROWID;
         RCDATA := RCRECORDNULL;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CURECORDBYROWID;
   END;
   FUNCTION FBLALREADYLOADED( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      IF ( INUMOTIVE_ID = RCDATA.MOTIVE_ID ) THEN
         RETURN ( TRUE );
      END IF;
      RETURN ( FALSE );
   END;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE CLEARMEMORY
    IS
      RCRECORDNULL CURECORD%ROWTYPE;
    BEGIN
      RCDATA := RCRECORDNULL;
   END;
   FUNCTION FBLEXIST( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      LOAD( INUMOTIVE_ID );
      RETURN ( TRUE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN ( FALSE );
   END;
   PROCEDURE ACCKEY( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE )
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      LOAD( INUMOTIVE_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ACCKEYBYROWID( IRIROWID IN ROWID )
    IS
    BEGIN
      LOADBYROWID( IRIROWID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VALDUPLICATE( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE )
    IS
    BEGIN
      LOAD( INUMOTIVE_ID );
      ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY );
      RAISE EX.CONTROLLED_ERROR;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
   END;
   PROCEDURE GETRECORD( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, ORCRECORD OUT NOCOPY STYMO_SUSPENSION )
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      LOAD( INUMOTIVE_ID );
      ORCRECORD := RCDATA;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETRECORD( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE )
    RETURN STYMO_SUSPENSION
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      LOAD( INUMOTIVE_ID );
      RETURN ( RCDATA );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETRCDATA( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE )
    RETURN STYMO_SUSPENSION
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUMOTIVE_ID ) THEN
         RETURN ( RCDATA );
      END IF;
      LOAD( INUMOTIVE_ID );
      RETURN ( RCDATA );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETRCDATA
    RETURN STYMO_SUSPENSION
    IS
    BEGIN
      RETURN ( RCDATA );
   END;
   PROCEDURE GETRECORDS( ISBQUERY IN VARCHAR2, OTBRESULT OUT NOCOPY TYTBMO_SUSPENSION )
    IS
      RFMO_SUSPENSION TYRFMO_SUSPENSION;
      N NUMBER( 4 ) := 1;
      SBFULLQUERY VARCHAR2( 32000 ) := 'SELECT 
		            MO_suspension.Motive_Id,
		            MO_suspension.Suspension_Type_Id,
		            MO_suspension.Register_Date,
		            MO_suspension.Aplication_Date,
		            MO_suspension.Ending_Date,
		            MO_suspension.Connection_Code,
		            MO_suspension.rowid
                FROM MO_suspension';
      NUMAXTBRECORDS NUMBER( 5 ) := GE_BOPARAMETER.FNUGET( 'MAXREGSQUERY' );
    BEGIN
      OTBRESULT.DELETE;
      IF ISBQUERY IS NOT NULL AND LENGTH( ISBQUERY ) > 0 THEN
         SBFULLQUERY := SBFULLQUERY || ' WHERE ' || ISBQUERY;
      END IF;
      OPEN RFMO_SUSPENSION
           FOR SBFULLQUERY;
      FETCH RFMO_SUSPENSION
         BULK COLLECT INTO OTBRESULT;
      CLOSE RFMO_SUSPENSION;
      IF OTBRESULT.COUNT = 0 THEN
         RAISE NO_DATA_FOUND;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRFGETRECORDS( ISBCRITERIA IN VARCHAR2 := NULL, IBLLOCK IN BOOLEAN := FALSE )
    RETURN TYREFCURSOR
    IS
      RFQUERY TYREFCURSOR;
      SBSQL VARCHAR2( 32000 ) := 'select 
		            MO_suspension.Motive_Id,
		            MO_suspension.Suspension_Type_Id,
		            MO_suspension.Register_Date,
		            MO_suspension.Aplication_Date,
		            MO_suspension.Ending_Date,
		            MO_suspension.Connection_Code,
		            MO_suspension.rowid
                FROM MO_suspension';
    BEGIN
      IF ISBCRITERIA IS NOT NULL THEN
         SBSQL := SBSQL || ' where ' || ISBCRITERIA;
      END IF;
      IF IBLLOCK THEN
         SBSQL := SBSQL || ' for update nowait';
      END IF;
      OPEN RFQUERY
           FOR SBSQL;
      RETURN ( RFQUERY );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSRECORD( IRCMO_SUSPENSION IN STYMO_SUSPENSION )
    IS
      RIROWID VARCHAR2( 200 );
    BEGIN
      INSRECORD( IRCMO_SUSPENSION, RIROWID );
   END;
   PROCEDURE INSRECORD( IRCMO_SUSPENSION IN STYMO_SUSPENSION, ORIROWID OUT VARCHAR2 )
    IS
    BEGIN
      IF IRCMO_SUSPENSION.MOTIVE_ID IS NULL THEN
         ERRORS.SETERROR( CNUINS_PK_NULL, FSBGETMESSAGEDESCRIPTION || '|Motive_Id' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      INSERT into MO_suspension
		(
			Motive_Id,
			Suspension_Type_Id,
			Register_Date,
			Aplication_Date,
			Ending_Date,
			Connection_Code
		)
		values
		(
			ircMO_suspension.Motive_Id,
			ircMO_suspension.Suspension_Type_Id,
			ircMO_suspension.Register_Date,
			ircMO_suspension.Aplication_Date,
			ircMO_suspension.Ending_Date,
			ircMO_suspension.Connection_Code
		)
            returning
			rowid
		into
			orirowid;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( IRCMO_SUSPENSION ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSRECORDS( IOTBMO_SUSPENSION IN OUT NOCOPY TYTBMO_SUSPENSION )
    IS
      BLUSEROWID BOOLEAN;
    BEGIN
      FILLRECORDOFTABLES( IOTBMO_SUSPENSION, BLUSEROWID );
      FORALL N IN IOTBMO_SUSPENSION.FIRST..IOTBMO_SUSPENSION.LAST
         INSERT into MO_suspension
			(
				Motive_Id,
				Suspension_Type_Id,
				Register_Date,
				Aplication_Date,
				Ending_Date,
				Connection_Code
			)
			values
			(
				rcRecOfTab.Motive_Id(n),
				rcRecOfTab.Suspension_Type_Id(n),
				rcRecOfTab.Register_Date(n),
				rcRecOfTab.Aplication_Date(n),
				rcRecOfTab.Ending_Date(n),
				rcRecOfTab.Connection_Code(n)
			);
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELRECORD( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, INULOCK IN NUMBER := 1 )
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUMOTIVE_ID, RCDATA );
      END IF;
      DELETE
		from MO_suspension
		where
       		Motive_Id=inuMotive_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RECORD_HAVE_CHILDREN THEN
         ERRORS.SETERROR( CNURECORD_HAVE_CHILDREN, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELBYROWID( IRIROWID IN ROWID, INULOCK IN NUMBER := 1 )
    IS
      RCRECORDNULL CURECORD%ROWTYPE;
      RCERROR STYMO_SUSPENSION;
    BEGIN
      IF INULOCK = 1 THEN
         LOCKBYROWID( IRIROWID, RCDATA );
      END IF;
      DELETE
		from MO_suspension
		where
			rowid = iriRowID
		returning
			Motive_Id
		into
			rcError.Motive_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      IF RCDATA.ROWID = IRIROWID THEN
         RCDATA := RCRECORDNULL;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RECORD_HAVE_CHILDREN THEN
         ERRORS.SETERROR( CNURECORD_HAVE_CHILDREN, FSBGETMESSAGEDESCRIPTION || ' ' || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELRECORDS( IOTBMO_SUSPENSION IN OUT NOCOPY TYTBMO_SUSPENSION, INULOCK IN NUMBER := 1 )
    IS
      BLUSEROWID BOOLEAN;
      RCAUX STYMO_SUSPENSION;
    BEGIN
      FILLRECORDOFTABLES( IOTBMO_SUSPENSION, BLUSEROWID );
      IF ( BLUSEROWID ) THEN
         IF INULOCK = 1 THEN
            FOR N IN IOTBMO_SUSPENSION.FIRST..IOTBMO_SUSPENSION.LAST
             LOOP
               LOCKBYROWID( RCRECOFTAB.ROW_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBMO_SUSPENSION.FIRST..IOTBMO_SUSPENSION.LAST
            DELETE
				from MO_suspension
				where
					rowid = rcRecOfTab.row_id(n);
       ELSE
         IF INULOCK = 1 THEN
            FOR N IN IOTBMO_SUSPENSION.FIRST..IOTBMO_SUSPENSION.LAST
             LOOP
               LOCKBYPK( RCRECOFTAB.MOTIVE_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBMO_SUSPENSION.FIRST..IOTBMO_SUSPENSION.LAST
            DELETE
				from MO_suspension
				where
		         	Motive_Id = rcRecOfTab.Motive_Id(n);
      END IF;
    EXCEPTION
      WHEN EX.RECORD_HAVE_CHILDREN THEN
         ERRORS.SETERROR( CNURECORD_HAVE_CHILDREN, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDRECORD( IRCMO_SUSPENSION IN STYMO_SUSPENSION, INULOCK IN NUMBER := 0 )
    IS
      NUMOTIVE_ID MO_SUSPENSION.MOTIVE_ID%TYPE;
    BEGIN
      IF IRCMO_SUSPENSION.ROWID IS NOT NULL THEN
         IF INULOCK = 1 THEN
            LOCKBYROWID( IRCMO_SUSPENSION.ROWID, RCDATA );
         END IF;
         UPDATE MO_suspension
			set
				Suspension_Type_Id = ircMO_suspension.Suspension_Type_Id,
				Register_Date = ircMO_suspension.Register_Date,
				Aplication_Date = ircMO_suspension.Aplication_Date,
				Ending_Date = ircMO_suspension.Ending_Date,
				Connection_Code = ircMO_suspension.Connection_Code
			where
				rowid = ircMO_suspension.rowid
			returning
				Motive_Id
			into
				nuMotive_Id;
       ELSE
         IF INULOCK = 1 THEN
            LOCKBYPK( IRCMO_SUSPENSION.MOTIVE_ID, RCDATA );
         END IF;
         UPDATE MO_suspension
			set
				Suspension_Type_Id = ircMO_suspension.Suspension_Type_Id,
				Register_Date = ircMO_suspension.Register_Date,
				Aplication_Date = ircMO_suspension.Aplication_Date,
				Ending_Date = ircMO_suspension.Ending_Date,
				Connection_Code = ircMO_suspension.Connection_Code
			where
				Motive_Id = ircMO_suspension.Motive_Id
			returning
				Motive_Id
			into
				nuMotive_Id;
      END IF;
      IF NUMOTIVE_ID IS NULL THEN
         RAISE NO_DATA_FOUND;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || FSBPRIMARYKEY( IRCMO_SUSPENSION ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDRECORDS( IOTBMO_SUSPENSION IN OUT NOCOPY TYTBMO_SUSPENSION, INULOCK IN NUMBER := 1 )
    IS
      BLUSEROWID BOOLEAN;
      RCAUX STYMO_SUSPENSION;
    BEGIN
      FILLRECORDOFTABLES( IOTBMO_SUSPENSION, BLUSEROWID );
      IF BLUSEROWID THEN
         IF INULOCK = 1 THEN
            FOR N IN IOTBMO_SUSPENSION.FIRST..IOTBMO_SUSPENSION.LAST
             LOOP
               LOCKBYROWID( RCRECOFTAB.ROW_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBMO_SUSPENSION.FIRST..IOTBMO_SUSPENSION.LAST
            UPDATE MO_suspension
				set
					Suspension_Type_Id = rcRecOfTab.Suspension_Type_Id(n),
					Register_Date = rcRecOfTab.Register_Date(n),
					Aplication_Date = rcRecOfTab.Aplication_Date(n),
					Ending_Date = rcRecOfTab.Ending_Date(n),
					Connection_Code = rcRecOfTab.Connection_Code(n)
				where
					rowid =  rcRecOfTab.row_id(n);
       ELSE
         IF INULOCK = 1 THEN
            FOR N IN IOTBMO_SUSPENSION.FIRST..IOTBMO_SUSPENSION.LAST
             LOOP
               LOCKBYPK( RCRECOFTAB.MOTIVE_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBMO_SUSPENSION.FIRST..IOTBMO_SUSPENSION.LAST
            UPDATE MO_suspension
				SET
					Suspension_Type_Id = rcRecOfTab.Suspension_Type_Id(n),
					Register_Date = rcRecOfTab.Register_Date(n),
					Aplication_Date = rcRecOfTab.Aplication_Date(n),
					Ending_Date = rcRecOfTab.Ending_Date(n),
					Connection_Code = rcRecOfTab.Connection_Code(n)
				where
					Motive_Id = rcRecOfTab.Motive_Id(n)
;
      END IF;
   END;
   PROCEDURE UPDSUSPENSION_TYPE_ID( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, INUSUSPENSION_TYPE_ID$ IN MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUMOTIVE_ID, RCDATA );
      END IF;
      UPDATE MO_suspension
		set
			Suspension_Type_Id = inuSuspension_Type_Id$
		where
			Motive_Id = inuMotive_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.SUSPENSION_TYPE_ID := INUSUSPENSION_TYPE_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDREGISTER_DATE( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, IDTREGISTER_DATE$ IN MO_SUSPENSION.REGISTER_DATE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUMOTIVE_ID, RCDATA );
      END IF;
      UPDATE MO_suspension
		set
			Register_Date = idtRegister_Date$
		where
			Motive_Id = inuMotive_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.REGISTER_DATE := IDTREGISTER_DATE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDAPLICATION_DATE( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, IDTAPLICATION_DATE$ IN MO_SUSPENSION.APLICATION_DATE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUMOTIVE_ID, RCDATA );
      END IF;
      UPDATE MO_suspension
		set
			Aplication_Date = idtAplication_Date$
		where
			Motive_Id = inuMotive_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.APLICATION_DATE := IDTAPLICATION_DATE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDENDING_DATE( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, IDTENDING_DATE$ IN MO_SUSPENSION.ENDING_DATE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUMOTIVE_ID, RCDATA );
      END IF;
      UPDATE MO_suspension
		set
			Ending_Date = idtEnding_Date$
		where
			Motive_Id = inuMotive_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.ENDING_DATE := IDTENDING_DATE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDCONNECTION_CODE( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, ISBCONNECTION_CODE$ IN MO_SUSPENSION.CONNECTION_CODE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUMOTIVE_ID, RCDATA );
      END IF;
      UPDATE MO_suspension
		set
			Connection_Code = isbConnection_Code$
		where
			Motive_Id = inuMotive_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.CONNECTION_CODE := ISBCONNECTION_CODE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETMOTIVE_ID( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN MO_SUSPENSION.MOTIVE_ID%TYPE
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUMOTIVE_ID ) THEN
         RETURN ( RCDATA.MOTIVE_ID );
      END IF;
      LOAD( INUMOTIVE_ID );
      RETURN ( RCDATA.MOTIVE_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETSUSPENSION_TYPE_ID( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUMOTIVE_ID ) THEN
         RETURN ( RCDATA.SUSPENSION_TYPE_ID );
      END IF;
      LOAD( INUMOTIVE_ID );
      RETURN ( RCDATA.SUSPENSION_TYPE_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FDTGETREGISTER_DATE( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN MO_SUSPENSION.REGISTER_DATE%TYPE
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUMOTIVE_ID ) THEN
         RETURN ( RCDATA.REGISTER_DATE );
      END IF;
      LOAD( INUMOTIVE_ID );
      RETURN ( RCDATA.REGISTER_DATE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FDTGETAPLICATION_DATE( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN MO_SUSPENSION.APLICATION_DATE%TYPE
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUMOTIVE_ID ) THEN
         RETURN ( RCDATA.APLICATION_DATE );
      END IF;
      LOAD( INUMOTIVE_ID );
      RETURN ( RCDATA.APLICATION_DATE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FDTGETENDING_DATE( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN MO_SUSPENSION.ENDING_DATE%TYPE
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUMOTIVE_ID ) THEN
         RETURN ( RCDATA.ENDING_DATE );
      END IF;
      LOAD( INUMOTIVE_ID );
      RETURN ( RCDATA.ENDING_DATE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETCONNECTION_CODE( INUMOTIVE_ID IN MO_SUSPENSION.MOTIVE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN MO_SUSPENSION.CONNECTION_CODE%TYPE
    IS
      RCERROR STYMO_SUSPENSION;
    BEGIN
      RCERROR.MOTIVE_ID := INUMOTIVE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUMOTIVE_ID ) THEN
         RETURN ( RCDATA.CONNECTION_CODE );
      END IF;
      LOAD( INUMOTIVE_ID );
      RETURN ( RCDATA.CONNECTION_CODE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   PROCEDURE SETUSECACHE( IBLUSECACHE IN BOOLEAN )
    IS
    BEGIN
      BLDAO_USE_CACHE := IBLUSECACHE;
   END;
 BEGIN
   GETDAO_USE_CACHE;
END DAMO_SUSPENSION;
/


