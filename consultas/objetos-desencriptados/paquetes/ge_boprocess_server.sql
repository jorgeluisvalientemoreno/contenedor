
CREATE OR REPLACE PACKAGE BODY GE_BOPROCESS_SERVER IS
   CNUTIMEOUT CONSTANT NUMBER := 10;
   CSBMSGSERVERCLONETHREAD CONSTANT VARCHAR2( 50 ) := 'CLONE THREAD';
   CSBMSGSERVERCREATETHREAD CONSTANT VARCHAR2( 50 ) := 'CREATE THREAD';
   CSBMSGSERVERSHUTDOWN CONSTANT VARCHAR2( 50 ) := 'SHUTDOWN SERVER';
   CSBMSGSERVERLIVE CONSTANT VARCHAR2( 50 ) := 'SERVER LIVE';
   CSBISUPPARM CONSTANT VARCHAR2( 100 ) := 'IS_PROCESS_SERVER_UP';
   CSBSLEEPTIME CONSTANT VARCHAR2( 100 ) := 'PROC_SERV_SLEEP_TIME';
   CSBNAME_SERVER CONSTANT VARCHAR2( 50 ) := 'LISTENER$PROCESS$SERVER';
   CSBNAME_MONITOR_ALERT CONSTANT VARCHAR2( 50 ) := 'MONITOR$ALERT$SERVER';
   NUSLEEPTIME NUMBER;
   CNUDEFSLEEPTIME CONSTANT NUMBER := 0;
   CSBBLOCKPROCESSID CONSTANT ESTAPROG.ESPRPROG%TYPE := 'PROCESS$SERVER';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE INIT
    IS
    BEGIN
      GE_BOEXEC_SERVER_MSG.DELETE_RECORDS;
      GE_BOMONITOR_LOG_ERROR.DELETE_RECORDS;
      GE_BOMONITOR_LOG.DELETE_RECORDS;
   END;
   FUNCTION GETNAME_MONITOR_SERVER
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBNAME_MONITOR_ALERT;
   END;
   PROCEDURE REGISTER_SERVER
    IS
    BEGIN
      DBMS_ALERT.REGISTER( CSBNAME_SERVER );
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION GETMSGSERVERLISTENER
    RETURN VARCHAR2
    IS
      NUSTATUS NUMBER( 22 );
      SBMSG VARCHAR2( 2000 );
    BEGIN
      DBMS_ALERT.WAITONE( CSBNAME_SERVER, SBMSG, NUSTATUS );
      IF NUSTATUS = CONSTANTS.CNUSUCCESS THEN
         RETURN SBMSG;
      END IF;
      RETURN NULL;
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PUTMSGSERVERLISTENER( ISBMSG IN VARCHAR2 )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      DBMS_ALERT.SIGNAL( CSBNAME_SERVER, USER || '=' || ISBMSG );
      COMMIT;
      DBMS_LOCK.SLEEP( NUSLEEPTIME );
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PUTMSGMONITORSERVER( ISBMSG IN VARCHAR2 )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      DBMS_ALERT.SIGNAL( CSBNAME_MONITOR_ALERT, ISBMSG );
      COMMIT;
      DBMS_LOCK.SLEEP( NUSLEEPTIME );
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CLOSE_SERVER
    IS
    BEGIN
      DBMS_ALERT.REMOVE( CSBNAME_SERVER );
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SENDCLONE_THREAD( INUSESSIONID IN NUMBER )
    IS
    BEGIN
      PUTMSGSERVERLISTENER( CSBMSGSERVERCLONETHREAD || '=' || TO_NUMBER( INUSESSIONID ) );
   END;
   PROCEDURE SENDCREATE_THREAD( INUPROCESSID IN NUMBER, INUHOSTID IN NUMBER := NULL )
    IS
      SBMESSAGE VARCHAR2( 2000 );
    BEGIN
      IF INUHOSTID IS NULL THEN
         SBMESSAGE := CSBMSGSERVERCREATETHREAD || '=' || TO_NUMBER( INUPROCESSID );
         PUTMSGSERVERLISTENER( SBMESSAGE );
       ELSE
         GE_BOPROCEXECUTORHOST.STARTPROCESS( INUPROCESSID, INUHOSTID );
      END IF;
   END;
   PROCEDURE SENDSHUTDOWNSERVER
    IS
    BEGIN
      PUTMSGSERVERLISTENER( CSBMSGSERVERSHUTDOWN );
   END;
   PROCEDURE SENDLIVESERVER
    IS
    BEGIN
      PUTMSGSERVERLISTENER( CSBMSGSERVERLIVE );
   END;
   PROCEDURE STARTUNIXSERVER( ONUEXIT OUT NUMBER, OSBOUTPUT OUT VARCHAR2 )
    IS
      SBPATH VARCHAR2( 200 ) := GE_BOPARAMETER.FSBGET( 'PATH_PROCESS_SERVER' );
      SBSHELL VARCHAR2( 200 ) := GE_BOPARAMETER.FSBGET( 'SHELL_SERVER' );
      SBCOMMAND VARCHAR2( 1000 ) := SBSHELL || ' ' || SBPATH || '/loadserver.sh ' || SBPATH;
    BEGIN
      UT_TRACE.TRACE( 'StartUnixServer:' || SBCOMMAND );
      ONUEXIT := UT_OSCOMMAND.RUN( SBCOMMAND );
      OSBOUTPUT := UT_OSCOMMAND.GETMESSAGE();
      UT_TRACE.TRACE( 'StartUnixServer:' || ONUEXIT || ' - ' || OSBOUTPUT );
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE STARTSERVER( ONUEXIT OUT NUMBER, OSBOUTPUT OUT VARCHAR2 )
    IS
    BEGIN
      IF INSTR( GE_BOPARAMETER.FSBGET( 'PATH_PROCESS_SERVER' ), '/' ) > 0 THEN
         STARTUNIXSERVER( ONUEXIT, OSBOUTPUT );
      END IF;
   END;
   PROCEDURE GETMONITORALERT( OSBMESSAGE OUT VARCHAR2 )
    IS
      SBMESSAGE VARCHAR2( 2000 );
      NUSTATUS NUMBER;
    BEGIN
      DBMS_ALERT.WAITONE( CSBNAME_MONITOR_ALERT, SBMESSAGE, NUSTATUS, CNUTIMEOUT );
      IF NUSTATUS = CONSTANTS.CNUSUCCESS THEN
         OSBMESSAGE := SBMESSAGE;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE REGISTERMONITORALERT
    IS
    BEGIN
      DBMS_ALERT.REGISTER( CSBNAME_MONITOR_ALERT );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CLOSEMONITORALERT
    IS
    BEGIN
      DBMS_ALERT.REMOVE( CSBNAME_MONITOR_ALERT );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADPARAMETERS
    IS
    BEGIN
      NUSLEEPTIME := GE_BOPARAMETER.FNUGET( 'PROC_EXE_ALERT_WAIT' );
      IF NUSLEEPTIME IS NULL THEN
         NUSLEEPTIME := CNUDEFSLEEPTIME;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PROCSERVBLOCKBYPK
    IS
      RCESTAPROG DAESTAPROG.STYESTAPROG;
      SBROWID VARCHAR2( 2000 );
    BEGIN
      IF NOT ( DAESTAPROG.FBLEXIST( CSBBLOCKPROCESSID ) ) THEN
         RCESTAPROG.ESPRPROG := CSBBLOCKPROCESSID;
         RCESTAPROG.ESPRPORC := NULL;
         RCESTAPROG.ESPRMESG := NULL;
         RCESTAPROG.ESPRFEIN := NULL;
         RCESTAPROG.ESPRFEFI := NULL;
         RCESTAPROG.ESPRTAPR := NULL;
         RCESTAPROG.ESPRSUPR := NULL;
         RCESTAPROG.ESPRSUFA := NULL;
         RCESTAPROG.ESPRVALO := NULL;
         RCESTAPROG.ESPRINFO := NULL;
         RCESTAPROG.ESPRPRPR := NULL;
         RCESTAPROG.ESPRPEFA := NULL;
         DAESTAPROG.INSRECORD( RCESTAPROG, SBROWID );
      END IF;
      DAESTAPROG.LOCKBYPK( CSBBLOCKPROCESSID, RCESTAPROG );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PROCSERVBLOCKBYPK;
   PROCEDURE PROCSERVUNBLOCKBYPK
    IS
    BEGIN
      COMMIT;
   END PROCSERVUNBLOCKBYPK;
   FUNCTION FSBGETISRUNNING
    RETURN VARCHAR2
    IS
      NUCOUNT NUMBER;
    BEGIN
      SELECT  count(1)
        INTO    nuCount
        FROM    gv$session
        WHERE module like '%PROCESS_SERVER%'
        AND action = 'RUNNING';
      IF NUCOUNT > 0 THEN
         RETURN GE_BOCONSTANTS.CSBYES;
      END IF;
      RETURN GE_BOCONSTANTS.CSBNO;
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETISRUNNING;
   FUNCTION FSBGETISUP
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN GE_BOPARAMETER.FSBGET( CSBISUPPARM );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETISUP;
   FUNCTION FNUSLEEPTIME
    RETURN NUMBER
    IS
    BEGIN
      RETURN GE_BOPARAMETER.FNUGET( CSBSLEEPTIME );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETSERVERUP
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      GE_BOPARAMETER.UPDATEPARAMETERVALUE( CSBISUPPARM, GE_BOCONSTANTS.CSBYES );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETSERVERUP;
   PROCEDURE SETSERVERDOWN
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      GE_BOPARAMETER.UPDATEPARAMETERVALUE( CSBISUPPARM, GE_BOCONSTANTS.CSBNO );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETSERVERDOWN;
 BEGIN
   LOADPARAMETERS;
END GE_BOPROCESS_SERVER;
/


