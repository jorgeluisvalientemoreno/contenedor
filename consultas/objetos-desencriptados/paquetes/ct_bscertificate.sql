
CREATE OR REPLACE PACKAGE BODY CT_BSCERTIFICATE IS
   CSBVERSION CONSTANT VARCHAR2( 10 ) := 'SAO193443';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE PRINTPROCESSCERTIFICATE( INUCERTIFICATEID IN GE_ACTA.ID_ACTA%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO CT_BsCertificate.PrintProcessCertificate', 10 );
      ONUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
      OSBERRORMESSAGE := NULL;
      CT_BOCERTIFICATE.PRINTPROCESSCERTIFICATE( INUCERTIFICATEID );
      UT_TRACE.TRACE( 'FIN CT_BsCertificate.PrintProcessCertificate', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END;
   PROCEDURE REVERTCERTIFICATE( INUCERTIFICATEID IN GE_ACTA.ID_ACTA%TYPE, IBLFORCE IN BOOLEAN, ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE, OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
      NUCONTRACTID GE_CONTRATO.ID_CONTRATO%TYPE;
      TBCERTIFICATES DAGE_ACTA.TYTBID_ACTA;
      SBCERTIFICATESLIST VARCHAR2( 32000 );
      BLHASDETAILS BOOLEAN;
      FUNCTION FSBGETCERTIFICATESLIST
       RETURN VARCHAR2
       IS
         NUCERTIFICATEID GE_ACTA.ID_ACTA%TYPE;
       BEGIN
         FOR N IN TBCERTIFICATES.FIRST..TBCERTIFICATES.LAST
          LOOP
            NUCERTIFICATEID := TBCERTIFICATES( N );
            IF ( N = 1 ) THEN
               SBCERTIFICATESLIST := SBCERTIFICATESLIST || NUCERTIFICATEID;
             ELSIF ( N = TBCERTIFICATES.LAST ) THEN
               SBCERTIFICATESLIST := SBCERTIFICATESLIST || ', y ' || NUCERTIFICATEID;
             ELSE
               SBCERTIFICATESLIST := SBCERTIFICATESLIST || ', ' || NUCERTIFICATEID;
            END IF;
         END LOOP;
         RETURN SBCERTIFICATESLIST;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END FSBGETCERTIFICATESLIST;
      PROCEDURE HASVERORDERS
       IS
         NUCERTIFICATEID GE_ACTA.ID_ACTA%TYPE;
       BEGIN
         IF CT_BCCERTIFICATE.FBLHASVERORDERS( INUCERTIFICATEID ) THEN
            ERRORS.SETERROR( 901725 );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF ( TBCERTIFICATES.COUNT > 0 ) THEN
            FOR N IN TBCERTIFICATES.FIRST..TBCERTIFICATES.LAST
             LOOP
               NUCERTIFICATEID := TBCERTIFICATES( N );
               IF CT_BCCERTIFICATE.FBLHASVERORDERS( NUCERTIFICATEID ) THEN
                  ERRORS.SETERROR( 901726, NUCERTIFICATEID );
                  RAISE EX.CONTROLLED_ERROR;
               END IF;
            END LOOP;
         END IF;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END HASVERORDERS;
    BEGIN
      ONUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
      OSBERRORMESS := NULL;
      IF ( NOT ( DAGE_ACTA.FBLEXIST( INUCERTIFICATEID ) ) ) THEN
         ERRORS.SETERROR( 6742, INUCERTIFICATEID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUCONTRACTID := DAGE_ACTA.FNUGETID_CONTRATO( INUCERTIFICATEID );
      CT_BCCERTIFICATE.RELATEDCERTIFSBYCONTRACT( INUCERTIFICATEID, NUCONTRACTID, TBCERTIFICATES );
      IF ( ( TBCERTIFICATES.COUNT > 0 ) AND NOT ( IBLFORCE ) ) THEN
         ERRORS.SETERROR( 6802, INUCERTIFICATEID || '|' || FSBGETCERTIFICATESLIST );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      HASVERORDERS;
      CT_BOCERTIFICATE.REVERTCERTIFICATE( INUCERTIFICATEID );
      IF ( CT_BCCERTIFICATE.FBLHASDETAILS( INUCERTIFICATEID ) ) THEN
         BLHASDETAILS := TRUE;
       ELSE
         BLHASDETAILS := FALSE;
      END IF;
      IF ( TBCERTIFICATES.COUNT > 0 ) THEN
         FOR N IN TBCERTIFICATES.FIRST..TBCERTIFICATES.LAST
          LOOP
            DECLARE
               NUCERTIFICATEID GE_ACTA.ID_ACTA%TYPE;
               NUERRORCODE GE_ERROR_LOG.MESSAGE_ID%TYPE;
               SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
            BEGIN
               NUCERTIFICATEID := TBCERTIFICATES( N );
               CT_BOCERTIFICATE.REVERTCERTIFICATE( NUCERTIFICATEID );
               IF ( N = 1 ) THEN
                  SBCERTIFICATESLIST := SBCERTIFICATESLIST || NUCERTIFICATEID;
                ELSIF ( N = TBCERTIFICATES.LAST ) THEN
                  SBCERTIFICATESLIST := SBCERTIFICATESLIST || ', y ' || NUCERTIFICATEID;
                ELSE
                  SBCERTIFICATESLIST := SBCERTIFICATESLIST || ', ' || NUCERTIFICATEID;
               END IF;
             EXCEPTION
               WHEN EX.CONTROLLED_ERROR THEN
                  ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
                  ERRORS.SETERROR( 6845, INUCERTIFICATEID || '|' || NUCERTIFICATEID || '|' || SBERRORMESSAGE );
                  RAISE EX.CONTROLLED_ERROR;
               WHEN OTHERS THEN
                  ERRORS.SETERROR;
                  RAISE EX.CONTROLLED_ERROR;
            END;
         END LOOP;
         PKGENERALSERVICES.COMMITTRANSACTION;
         IF ( BLHASDETAILS ) THEN
            ERRORS.SETERROR( 9022, INUCERTIFICATEID || '|' || SBCERTIFICATESLIST );
          ELSE
            ERRORS.SETERROR( 6828, INUCERTIFICATEID || '|' || SBCERTIFICATESLIST );
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( BLHASDETAILS ) THEN
         PKGENERALSERVICES.COMMITTRANSACTION;
         ERRORS.SETERROR( 9023, INUCERTIFICATEID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         PKGENERALSERVICES.ROLLBACKTRANSACTION;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESS );
      WHEN OTHERS THEN
         PKGENERALSERVICES.ROLLBACKTRANSACTION;
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESS );
   END REVERTCERTIFICATE;
   PROCEDURE UPDCERTIFICATEDETAIL( INUDETALLEACTA IN GE_DETALLE_ACTA.ID_DETALLE_ACTA%TYPE, INUIDITEMS IN GE_DETALLE_ACTA.ID_ITEMS%TYPE, ISBDESCITEM IN GE_DETALLE_ACTA.DESCRIPCION_ITEMS%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO CT_BsCertificate.UpdCertificateDetail', 10 );
      GE_BOUTILITIES.INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      CT_BOCERTIFICATE.UPDCERTIFICATEDETAIL( INUDETALLEACTA, INUIDITEMS, ISBDESCITEM );
      UT_TRACE.TRACE( 'FINAL CT_BsCertificate.UpdCertificateDetail', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END UPDCERTIFICATEDETAIL;
   PROCEDURE INSCERTIFICATEDETAIL( INUIDITEMS IN GE_DETALLE_ACTA.ID_ITEMS%TYPE, ISBDESCITEM IN GE_DETALLE_ACTA.DESCRIPCION_ITEMS%TYPE, INUIDACTA IN GE_DETALLE_ACTA.ID_ACTA%TYPE, ONUDETALLEACTA OUT GE_DETALLE_ACTA.ID_DETALLE_ACTA%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO CT_BsCertificate.InsCertificateDetail', 10 );
      GE_BOUTILITIES.INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      CT_BOCERTIFICATE.INSCERTIFICATEDETAIL( INUIDITEMS, ISBDESCITEM, INUIDACTA, ONUDETALLEACTA );
      UT_TRACE.TRACE( 'FINAL CT_BsCertificate.InsCertificateDetail', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END INSCERTIFICATEDETAIL;
   PROCEDURE DELCERTIFICATEDETAIL( INUDETALLEACTA IN GE_DETALLE_ACTA.ID_ACTA%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO CT_BsCertificate.DelCertificateDetail', 10 );
      GE_BOUTILITIES.INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      CT_BOCERTIFICATE.DELCERTIFICATEDETAIL( INUDETALLEACTA );
      UT_TRACE.TRACE( 'FINAL CT_BsCertificate.DelCertificateDetail', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END DELCERTIFICATEDETAIL;
   PROCEDURE SAVELOGERRORPRINT( INUCERTIFICATEID IN GE_ACTA.ID_ACTA%TYPE, INUERRORCODE IN NUMBER, ISBMESSAGE IN VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      SBFECHA_CORTE GE_BOINSTANCECONTROL.STYSBVALUE;
      DTBREAKDATE CT_PROCESS_LOG.BREAK_DATE%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INICIO CT_BsCertificate.SaveLogErrorPrint', 10 );
      BEGIN
         GE_BCFWTMP_MESSAGE_PROC.SAVEANSWEROFPROCESS( TO_CHAR( INUCERTIFICATEID ), INUERRORCODE, ISBMESSAGE );
       EXCEPTION
         WHEN OTHERS THEN
            UT_TRACE.TRACE( 'Guardando den tabla log de proceso...', 15 );
            ERRORS.SETERROR( INUERRORCODE );
            ERRORS.SETMESSAGE( '[Acta: ' || INUCERTIFICATEID || ' ] - ' || ISBMESSAGE );
            SBFECHA_CORTE := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'GE_PERIODO_CERT', 'FECHA_FINAL' );
            DTBREAKDATE := TO_DATE( SBFECHA_CORTE, UT_DATE.FSBDATE_FORMAT );
            CT_BOPROCESSLOG.REGISTERPROCESSLOG( CT_BOCERTIFICATE.FNUCONTRACT, CT_BOCERTIFICATE.FNUPERIODCERTIF, DTBREAKDATE, NULL, NULL, NULL );
      END;
      UT_TRACE.TRACE( 'FIN CT_BsCertificate.SaveLogErrorPrint', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END SAVELOGERRORPRINT;
   PROCEDURE GETCERTIFDETAILS( INUCERTIFICATEID IN GE_ACTA.ID_ACTA%TYPE, ORFCERTIFICATEDETAILS OUT CONSTANTS.TYREFCURSOR, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO CT_BsCertificate.GetCertifDetails', 6 );
      GE_BOUTILITIES.INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      GE_BOGENERALUTIL.OPEN_REFCURSOR( ORFCERTIFICATEDETAILS );
      IF ( CT_BOCERTIFICATE.FBLVERIFYCERTIFICATE( INUCERTIFICATEID ) ) THEN
         CT_BOCERTIFICATEDETAIL.GETCERTDETAILS( INUCERTIFICATEID, ORFCERTIFICATEDETAILS );
      END IF;
      UT_TRACE.TRACE( 'FIN CT_BsCertificate.GetCertifDetails', 6 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETCERTIFDETAILS;
   PROCEDURE GETCERTIFPEDINGPAY( ORFCERTIFICATE OUT CONSTANTS.TYREFCURSOR, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO CT_BsCertificate.GetCertifPedingPay', 6 );
      GE_BOUTILITIES.INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      GE_BOGENERALUTIL.OPEN_REFCURSOR( ORFCERTIFICATE );
      ORFCERTIFICATE := CT_BOCERTIFICATE.FRFGETCERTIFPEDINGPAY;
      UT_TRACE.TRACE( 'FIN CT_BsCertificate.GetCertifPedingPay', 6 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETCERTIFPEDINGPAY;
END CT_BSCERTIFICATE;
/


