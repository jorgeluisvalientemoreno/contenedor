
CREATE OR REPLACE PACKAGE BODY WF_BODISPATCHER IS
   BOCANCELDISPATCH BOOLEAN;
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO133156';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE SETCANCELDISPATCH( IBOCANCELDISPATCH IN BOOLEAN )
    IS
    BEGIN
      WF_BODISPATCHER.BOCANCELDISPATCH := IBOCANCELDISPATCH;
   END;
   FUNCTION FBOGETCANCELDISPATCH
    RETURN BOOLEAN
    IS
    BEGIN
      RETURN ( WF_BODISPATCHER.BOCANCELDISPATCH );
   END;
   PROCEDURE UPDATEACTIVITYDELAY( INUINSTANCEID IN NUMBER, IDTNEWDATE IN DATE, NUCODERROR OUT NUMBER, SBMSGERROR OUT VARCHAR2 )
    IS
    LANGUAGE JAVA NAME 'os.wf.engine.kernel.DispatchAgent.updateDelay(int, oracle.sql.DATE, int[], java.lang.String[])';
   PROCEDURE CANCELDISPATCH
    IS
    BEGIN
      WF_BODISPATCHER.BOCANCELDISPATCH := TRUE;
   END;
   PROCEDURE CANCEL_DISPATCH
    IS
    BEGIN
      CANCELDISPATCH();
   END;
   PROCEDURE RETRYDISPATCH( INUINSTANCEID IN NUMBER, NUCODERROR OUT NUMBER, SBMSGERROR OUT VARCHAR2 )
    IS
    LANGUAGE JAVA NAME 'os.wf.engine.kernel.DispatchAgent.retryDispatch(int, int[], java.lang.String[])';
   PROCEDURE RETRY_DISPATCH( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE )
    IS
      SBMSGERROR VARCHAR2( 2000 );
      NUCODERROR NUMBER( 5 );
    BEGIN
      RETRYDISPATCH( INUINSTANCEID, NUCODERROR, SBMSGERROR );
   END;
   PROCEDURE RUN( INUEXECUTOR IN NUMBER, INUTHREAD IN NUMBER, SBPARAMETER IN VARCHAR2 )
    IS
    LANGUAGE JAVA NAME 'os.wf.engine.kernel.DispatchAgent.main_run(int, int, java.lang.String)';
   PROCEDURE DISPATCH_AGENT_RUN( INUPROCESS IN NUMBER, INUTHREAD IN NUMBER, ISBPARAMETERS IN VARCHAR2 )
    IS
    BEGIN
      RUN( INUPROCESS, INUTHREAD, ISBPARAMETERS );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUDISPATCHINSTBYCOMP( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUCOMPONENTTYPE IN NUMBER, IBLDISPATCH IN BOOLEAN )
    RETURN NUMBER
    IS
      CURSOR CUINSTANCES( INUINSTANCEID IN NUMBER ) IS
SELECT distinct b.instance_id, b.external_id
    		FROM wf_instance a, wf_instance b
            WHERE
            (
            	(
             		b.original_task = a.original_task
            		OR b.instance_id = a.original_task
             	)
            	AND a.instance_id = inuInstanceId
            	AND b.instance_id <> inuInstanceId
            )
            OR b.original_task = inuInstanceId;
      NUINSTID WF_INSTANCE.INSTANCE_ID%TYPE;
      SBEXTERNALID WF_INSTANCE.EXTERNAL_ID%TYPE;
      NUCOMPTYPE NUMBER;
    BEGIN
      FOR RG IN CUINSTANCES( INUINSTANCEID )
       LOOP
         NUINSTID := RG.INSTANCE_ID;
         SBEXTERNALID := RG.EXTERNAL_ID;
         NUCOMPTYPE := DAMO_COMPONENT.FNUGETCOMPONENT_TYPE_ID( SBEXTERNALID );
         IF ( ( INUCOMPONENTTYPE IS NULL ) OR ( NUCOMPTYPE = INUCOMPONENTTYPE ) ) THEN
            IF ( IBLDISPATCH = TRUE ) THEN
               WF_BODISPATCHER.RETRY_DISPATCH( NUINSTID );
               DAWF_INSTANCE.UPDSTATUS_ID( NUINSTID, WF_BOCONSTANTS.CNUACTIVED );
             ELSE
               DAWF_INSTANCE.UPDSTATUS_ID( NUINSTID, WF_BOCONSTANTS.CNUCANCELED );
            END IF;
         END IF;
      END LOOP;
      RETURN WF_BOCONSTANTS.CNUNUMERIC_NULL;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DISPINSTBYCOMPANDATTVALUE( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUCOMPTYPEID IN PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE, INUATTRIBUTEID IN WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE, ISBATTRVALUE IN WF_INSTANCE_ATTRIB.VALUE%TYPE, IBLDISPATCH IN BOOLEAN )
    IS
      CURSOR CUINSTANCES( INUINSTANCEID IN NUMBER ) IS
SELECT distinct b.instance_id, b.external_id
            FROM wf_instance a, wf_instance b
            WHERE
            (
                (
                    b.original_task = a.original_task
                    OR b.instance_id = a.original_task
                )
                AND a.instance_id = inuInstanceId
-- comentado por folaya para que seleccione tambien
-- la instancia de entrada.
--                AND b.instance_id <> inuInstanceId
            )
            OR b.original_task = inuInstanceId;
      NUINSTID WF_INSTANCE.INSTANCE_ID%TYPE;
      SBEXTERNALID WF_INSTANCE.EXTERNAL_ID%TYPE;
      NUCOMPTYPE PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
      SBATTRVALUE WF_INSTANCE_ATTRIB.VALUE%TYPE;
    BEGIN
      FOR RG IN CUINSTANCES( INUINSTANCEID )
       LOOP
         NUINSTID := RG.INSTANCE_ID;
         SBEXTERNALID := RG.EXTERNAL_ID;
         NUCOMPTYPE := DAMO_COMPONENT.FNUGETCOMPONENT_TYPE_ID( SBEXTERNALID );
         SBATTRVALUE := WF_BOINSTANCE_ATTRIB.FSBGETATTRIBVALUE( NUINSTID, INUATTRIBUTEID );
         IF ( ( ( INUCOMPTYPEID IS NULL ) OR ( NUCOMPTYPE = INUCOMPTYPEID ) ) AND ( SBATTRVALUE = ISBATTRVALUE ) ) THEN
            IF ( IBLDISPATCH = TRUE ) THEN
               WF_BODISPATCHER.RETRY_DISPATCH( NUINSTID );
               DAWF_INSTANCE.UPDSTATUS_ID( NUINSTID, WF_BOCONSTANTS.CNUACTIVED );
             ELSE
               DAWF_INSTANCE.UPDSTATUS_ID( NUINSTID, WF_BOCONSTANTS.CNUCANCELED );
            END IF;
         END IF;
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DISPINSTBYCOMPANDATTVALUE;
   PROCEDURE UPDATEACTIVITYDELAY( ISBEXTERNALID IN WF_INSTANCE.EXTERNAL_ID%TYPE, INUENTITYID IN WF_INSTANCE.ENTITY_ID%TYPE, INUUNITTYPE IN WF_INSTANCE.UNIT_TYPE_ID%TYPE, IDTNEWDATE IN WF_INSTANCE.INITIAL_DATE%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      NUPLANID WF_INSTANCE.PLAN_ID%TYPE;
      NUATTRIBUTEID WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE;
      CNUNOT_PLAN_FOUND CONSTANT NUMBER := 1976;
      CNUINVALID_STATUS CONSTANT NUMBER := 2189;
      CNUINSTANCE_NOT_FOUND CONSTANT NUMBER := 2277;
      RCWF_INSTANCE DAWF_INSTANCE.STYWF_INSTANCE;
      BLINVALIDSTATUS BOOLEAN := FALSE;
      NUSTATUS WF_INSTANCE.STATUS_ID%TYPE;
      NUPREVSTATUS WF_INSTANCE.PREVIOUS_STATUS_ID%TYPE;
      BLFOUND BOOLEAN := FALSE;
      CURSOR CUGETPOSTPONABLETASKS( INUPLANID IN WF_INSTANCE.PLAN_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE, INUATTRIBUTEID IN WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE ) IS
SELECT i.instance_id
              FROM wf_instance i, wf_instance_attrib ia
             WHERE i.plan_id = inuPlanId
               AND i.unit_type_id = inuUnitTypeId
               AND i.instance_id = ia.instance_id
               AND ia.attribute_id = inuAttributeId;
    BEGIN
      NUPLANID := WF_BOENTITY_PROCESS.FNUGETPLANID( ISBEXTERNALID, INUENTITYID );
      IF NUPLANID = WF_BOCONSTANTS.CNUNUMERIC_NULL THEN
         ERRORS.SETERROR( CNUNOT_PLAN_FOUND, '[' || DAGE_ENTITY.FSBGETDISPLAY_NAME( INUENTITYID ) || ']|[' || ISBEXTERNALID || ']' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUATTRIBUTEID := WF_BOPARAMETER.FNUGETINITIALDATE;
      FOR RC IN CUGETPOSTPONABLETASKS( NUPLANID, INUUNITTYPE, NUATTRIBUTEID )
       LOOP
         BLFOUND := TRUE;
         DAWF_INSTANCE.LOCKBYPK( RC.INSTANCE_ID, RCWF_INSTANCE );
         NUSTATUS := DAWF_INSTANCE.FNUGETSTATUS_ID( RC.INSTANCE_ID );
         NUPREVSTATUS := DAWF_INSTANCE.FNUGETPREVIOUS_STATUS_ID( RC.INSTANCE_ID );
         BLINVALIDSTATUS := NUSTATUS > WF_BOCONSTANTS.CNUACTIVED AND NUSTATUS != WF_BOCONSTANTS.CNUEXCEPTION OR NUSTATUS = WF_BOCONSTANTS.CNUEXCEPTION AND NUPREVSTATUS >= WF_BOCONSTANTS.CNUACTIVED;
         IF BLINVALIDSTATUS THEN
            ERRORS.SETERROR( CNUINVALID_STATUS, '[' || TO_CHAR( RC.INSTANCE_ID ) || ']' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF NUSTATUS = WF_BOCONSTANTS.CNUEXCEPTION THEN
            NUSTATUS := NUPREVSTATUS;
         END IF;
         IF NUSTATUS = WF_BOCONSTANTS.CNUCREATED OR NUSTATUS = WF_BOCONSTANTS.CNUINITIATED THEN
            RETURN;
         END IF;
         UPDATEACTIVITYDELAY( RC.INSTANCE_ID, IDTNEWDATE, ONUERRORCODE, OSBERRORMESSAGE );
         IF ONUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
            ERRORS.SETERROR( ONUERRORCODE );
            ERRORS.SETMESSAGE( OSBERRORMESSAGE );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( RC.INSTANCE_ID, NUATTRIBUTEID, UT_DATE.FSBSTR_DATE( IDTNEWDATE ) );
         DAWF_INSTANCE.UPDINITIAL_DATE( RC.INSTANCE_ID, IDTNEWDATE );
      END LOOP;
      IF ( BLFOUND = FALSE ) THEN
         ERRORS.SETERROR( CNUINSTANCE_NOT_FOUND, INUUNITTYPE || '|' || DAGE_ATTRIBUTES.FSBGETNAME_ATTRIBUTE( NUATTRIBUTEID ) || '|' || NUPLANID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END;
   PROCEDURE FNUDISPINSTBYCOMPATTANDSTATUS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUCOMPTYPEID IN PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE, INUATTRIBUTEID IN WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE, ISBATTRVALUE IN WF_INSTANCE_ATTRIB.VALUE%TYPE, INUINSTANCESTATUSID IN WF_INSTANCE.STATUS_ID%TYPE, IBLDISPATCH IN BOOLEAN )
    IS
      NUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE;
      CURSOR CUINSTANCES( INUORIGINAL IN WF_INSTANCE.INSTANCE_ID%TYPE, INUSTATUS IN WF_INSTANCE.STATUS_ID%TYPE ) IS
SELECT instance_id, external_id
              FROM wf_instance
             WHERE (instance_id = inuOriginal
                OR original_task = inuOriginal)
               AND status_id = inuStatus;
      NUINSTID WF_INSTANCE.INSTANCE_ID%TYPE;
      SBEXTERNALID WF_INSTANCE.EXTERNAL_ID%TYPE;
      NUCOMPTYPE PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
      SBATTRVALUE WF_INSTANCE_ATTRIB.VALUE%TYPE;
    BEGIN
      NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK( INUINSTANCEID );
      NUORIGINAL := NVL( NUORIGINAL, INUINSTANCEID );
      IF ( NUORIGINAL != INUINSTANCEID ) THEN
         UT_TRACE.TRACE( 'Bloqueo de la Instancia Original :' || NUORIGINAL );
         WF_BOINSTANCE.LOCKINSTANCE( NUORIGINAL );
      END IF;
      FOR RG IN CUINSTANCES( NUORIGINAL, INUINSTANCESTATUSID )
       LOOP
         NUINSTID := RG.INSTANCE_ID;
         SBEXTERNALID := RG.EXTERNAL_ID;
         NUCOMPTYPE := DAMO_COMPONENT.FNUGETCOMPONENT_TYPE_ID( SBEXTERNALID );
         SBATTRVALUE := WF_BOINSTANCE_ATTRIB.FSBGETATTRIBVALUE( NUINSTID, INUATTRIBUTEID );
         IF ( ( ( INUCOMPTYPEID IS NULL ) OR ( NUCOMPTYPE = INUCOMPTYPEID ) ) AND ( SBATTRVALUE = ISBATTRVALUE ) ) THEN
            IF ( IBLDISPATCH = TRUE ) THEN
               WF_BODISPATCHER.RETRY_DISPATCH( NUINSTID );
               DAWF_INSTANCE.UPDSTATUS_ID( NUINSTID, WF_BOCONSTANTS.CNUACTIVED );
             ELSE
               DAWF_INSTANCE.UPDSTATUS_ID( NUINSTID, WF_BOCONSTANTS.CNUCANCELED );
            END IF;
         END IF;
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUDISPINSTBYCOMPATTANDSTATUS;
   PROCEDURE FNUDISPACTHBROTHERINST( INUINSTANCEID IN WF_INSTANCE.ORIGINAL_TASK%TYPE, INUINSTANCESTATUSID IN WF_INSTANCE.STATUS_ID%TYPE )
    IS
      NUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE;
      CURSOR CUINSTANCES( INUORIGINAL_TASK IN WF_INSTANCE.ORIGINAL_TASK%TYPE, INUSTATUS IN WF_INSTANCE.STATUS_ID%TYPE ) IS
SELECT instance_id
              FROM wf_instance
             WHERE (instance_id = inuOriginal_task
               OR original_task = inuOriginal_task)
               AND status_id = inuStatus
               AND Rownum =1
               For Update;
      NUINSTID WF_INSTANCE.INSTANCE_ID%TYPE;
    BEGIN
      NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK( INUINSTANCEID );
      NUORIGINAL := NVL( NUORIGINAL, INUINSTANCEID );
      FOR RG IN CUINSTANCES( NUORIGINAL, INUINSTANCESTATUSID )
       LOOP
         NUINSTID := RG.INSTANCE_ID;
         WF_BODISPATCHER.RETRY_DISPATCH( NUINSTID );
         DAWF_INSTANCE.UPDSTATUS_ID( NUINSTID, WF_BOCONSTANTS.CNUACTIVED );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUDISPACTHBROTHERINST;
   PROCEDURE DISPINSTBYCOMPANDSTATUS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUCOMPTYPEID IN PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE, INUINSTANCESTATUSID IN WF_INSTANCE.STATUS_ID%TYPE, IBLDISPATCH IN BOOLEAN )
    IS
      NUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE;
      CURSOR CUINSTANCES( INUORIGINAL IN WF_INSTANCE.INSTANCE_ID%TYPE, INUSTATUS IN WF_INSTANCE.STATUS_ID%TYPE ) IS
SELECT instance_id, external_id
              FROM wf_instance
             WHERE (instance_id = inuOriginal
                OR original_task = inuOriginal)
               AND status_id = inuStatus;
      NUINSTID WF_INSTANCE.INSTANCE_ID%TYPE;
      SBEXTERNALID WF_INSTANCE.EXTERNAL_ID%TYPE;
      NUCOMPTYPE PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
    BEGIN
      NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK( INUINSTANCEID );
      NUORIGINAL := NVL( NUORIGINAL, INUINSTANCEID );
      FOR RG IN CUINSTANCES( NUORIGINAL, INUINSTANCESTATUSID )
       LOOP
         NUINSTID := RG.INSTANCE_ID;
         SBEXTERNALID := RG.EXTERNAL_ID;
         NUCOMPTYPE := DAMO_COMPONENT.FNUGETCOMPONENT_TYPE_ID( SBEXTERNALID );
         IF ( ( INUCOMPTYPEID IS NULL ) OR ( NUCOMPTYPE = INUCOMPTYPEID ) ) THEN
            IF ( IBLDISPATCH = TRUE ) THEN
               WF_BODISPATCHER.RETRY_DISPATCH( NUINSTID );
               DAWF_INSTANCE.UPDSTATUS_ID( NUINSTID, WF_BOCONSTANTS.CNUACTIVED );
             ELSE
               DAWF_INSTANCE.UPDSTATUS_ID( NUINSTID, WF_BOCONSTANTS.CNUCANCELED );
            END IF;
         END IF;
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DISPINSTBYCOMPANDSTATUS;
   PROCEDURE UPDATEEXECUTIONDATE( INUINSTANCEID IN NUMBER, IDTNEWDATE IN DATE )
    IS
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
    BEGIN
      UPDATEACTIVITYDELAY( INUINSTANCEID, IDTNEWDATE, NUERRORCODE, SBERRORMESSAGE );
      IF NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
         ERRORS.SETERROR( NUERRORCODE );
         ERRORS.SETMESSAGE( SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDATEEXECUTIONDATE;
END WF_BODISPATCHER;
/


