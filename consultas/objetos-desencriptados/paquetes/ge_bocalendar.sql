PACKAGE BODY GE_BOCalendar AS
    





































    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO205300';

    
    
    
    
    CNURANGE_DATE		CONSTANT NUMBER := 427;
    CNUEXIST_RANGE_DATE	CONSTANT NUMBER := 556;
    
    CNUPAISUSUARIO      CONSTANT NUMBER := 5861;
    CSBDAY_LABORAL      CONSTANT VARCHAR2(1) := GE_BOPARAMETER.FSBGET('LABORAL_DAYS');
    CSBDAY_NOLABORAL    CONSTANT VARCHAR2(1) := GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS');
    
    
    COUNTRY_TY          CONSTANT GE_GEOGRA_LOCATION.GEOG_LOCA_AREA_TYPE%TYPE
                                := AB_BOCONSTANTS.FNUOBTTIPOUBICACIONPAIS;
    
    GNUPAIS             CONSTANT GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
                                := GE_BOCALENDAR.FNUOBTPAISPORUSUARIO;


    SBDATEFORMAT        CONSTANT VARCHAR2(250) := UT_DATE.FSBDATE_FORMAT;
    CSBDOMINGO          CONSTANT NUMBER := 6;
    CSBGREATERTHAN      CONSTANT VARCHAR2(1) := '>'; 
    

    
    
    
    SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE; 
    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    






















    PROCEDURE VALIDDATE (IDTDATE IN DATE ) IS
    BEGIN
       
       IF IDTDATE IS NULL THEN
            ERRORS.SETERROR(2814); 
            RAISE EX.CONTROLLED_ERROR;
       END IF;
       
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

    























    PROCEDURE FILLCALENDAR
    (
        IDTFIRSTDATE            IN GE_CALENDAR.DATE_%TYPE,
        IDTLASTDATE             IN GE_CALENDAR.DATE_%TYPE,
        OBLEXITO                OUT BOOLEAN
    )
    IS
        NUDIAS      NUMBER;
        RCCALENDAR  DAGE_CALENDAR.STYGE_CALENDAR;
        DTFECHA     DATE;
        NUDAY       NUMBER;
    BEGIN
        OBLEXITO := FALSE;

        
        VALIDDATE(IDTFIRSTDATE);
        VALIDDATE(IDTLASTDATE);

        
        IF (IDTFIRSTDATE > IDTLASTDATE) THEN
            ERRORS.SETERROR(CNURANGE_DATE, IDTFIRSTDATE||'|'||IDTLASTDATE);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF GNUPAIS IS NULL THEN
            ERRORS.SETERROR(CNUPAISUSUARIO);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        NUDIAS := IDTLASTDATE - IDTFIRSTDATE ;

        FOR NUCONT IN 0 .. NUDIAS LOOP
            RCCALENDAR.DATE_ := TRUNC(IDTFIRSTDATE) + NUCONT;
            RCCALENDAR.WEEK_DAY_ID := UT_DATE.FNUGETNUMBERDAY(IDTFIRSTDATE + NUCONT);
            RCCALENDAR.LABORAL := CSBDAY_LABORAL;
            RCCALENDAR.DAY_TYPE_ID := GE_BOCONSTANTS.CNUDAY_TYPE_WORK_DAY;
            RCCALENDAR.COUNTRY_ID := GNUPAIS;

            
            NUDAY := UT_DATE.FNUGETNUMBERDAYBYDATE(RCCALENDAR.DATE_);

            
            IF (NUDAY = GE_BOCONSTANTS.CNUDAY_OF_WEEK_SUNDAY) THEN
                RCCALENDAR.DAY_TYPE_ID := GE_BOCONSTANTS.CNUDAY_TYPE_SUNDAY;
                RCCALENDAR.LABORAL := CSBDAY_NOLABORAL;
            END IF;

            
            IF (NUDAY = GE_BOCONSTANTS.CNUDAY_OF_WEEK_SATURDAY) THEN
                RCCALENDAR.DAY_TYPE_ID := GE_BOCONSTANTS.CNUDAY_TYPE_SATURDAY;
            END IF;

            IF ( NOT DAGE_CALENDAR.FBLEXIST( RCCALENDAR.DATE_, RCCALENDAR.COUNTRY_ID ) ) THEN
                DAGE_CALENDAR.INSRECORD( RCCALENDAR );
            END IF;

       END LOOP;
       OBLEXITO := TRUE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    























    FUNCTION FINDDATE
    (
        ITBCALENDAR      IN DAGE_CALENDAR.TYTBGE_CALENDAR,
        ISBDATE          IN GE_CALENDAR.DATE_%TYPE,
        ORCCALENDAR      OUT DAGE_CALENDAR.STYGE_CALENDAR,
        ONUINDICE        OUT NUMBER
    )
    RETURN BOOLEAN IS
    SBDATE DATE;
    BEGIN
        ONUINDICE := ITBCALENDAR.FIRST;
        IF (ONUINDICE IS NULL) THEN
            ORCCALENDAR := NULL;
            RETURN FALSE;
        END IF;

        LOOP
            SBDATE := TRUNC(ITBCALENDAR(ONUINDICE).DATE_);
            IF ( SBDATE = TRUNC(ISBDATE)) THEN
                ORCCALENDAR := ITBCALENDAR(ONUINDICE);
                RETURN TRUE;
            END IF;
            ONUINDICE := ITBCALENDAR.NEXT(ONUINDICE);
            EXIT WHEN ONUINDICE IS NULL;
        END LOOP;
        ORCCALENDAR := NULL;
        RETURN FALSE;
    END;

    

























    PROCEDURE GETMONTHS
    (
        ITBCALENDAR IN DAGE_CALENDAR.TYTBGE_CALENDAR,
        ISBDATE     IN GE_CALENDAR.DATE_%TYPE,
        OTBMONTHS   OUT DAGE_CALENDAR.TYTBGE_CALENDAR,
        OBLEXITO OUT BOOLEAN
    )
    IS
        
        
        
        NUINDICE NUMBER;
        SBINDICE VARCHAR2(2000);
        SBMONTH  VARCHAR2(250) := TO_CHAR(ISBDATE,'MM-YYYY');
        SBMONTHCALENDAR VARCHAR2(250);
    BEGIN
        OBLEXITO := FALSE;
        NUINDICE := ITBCALENDAR.FIRST;
        IF (NUINDICE IS NULL) THEN
            RETURN;
        END IF;

        LOOP
            SBMONTHCALENDAR := TO_CHAR(ITBCALENDAR(NUINDICE).DATE_,'MM-YYYY');
            IF ( SBMONTH = SBMONTHCALENDAR) THEN
               OTBMONTHS(NUINDICE) := ITBCALENDAR(NUINDICE);
            END IF;
            NUINDICE := ITBCALENDAR.NEXT(NUINDICE);
            EXIT WHEN NUINDICE IS NULL;
        END LOOP;
        IF (OTBMONTHS.COUNT > 0) THEN
            OBLEXITO := TRUE;
        END IF;
    END;

    























    PROCEDURE GETALLCALENDAR
    (
        OTBCALENDAR   OUT DAGE_CALENDAR.TYTBGE_CALENDAR,
        OBLEXITO      OUT BOOLEAN
    )
    IS
        
        
        
        SBWHERE VARCHAR2(2000) := NULL;
        CURFCALENDAR DAGE_CALENDAR.TYREFCURSOR;
        RCCALENDAR DAGE_CALENDAR.STYGE_CALENDAR;
        NUINDICE    NUMBER := 1;

        
        PROCEDURE CLOSECURSOR(ICUCURSOR IN OUT DAGE_CALENDAR.TYREFCURSOR) IS
        BEGIN
            IF (ICUCURSOR%ISOPEN) THEN
                CLOSE ICUCURSOR;
            END IF;
        END;
    
    BEGIN
        OBLEXITO := FALSE;

        IF GNUPAIS IS NULL THEN
            ERRORS.SETERROR(CNUPAISUSUARIO);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        SBWHERE := ' country_id = '||GNUPAIS||' ORDER BY DATE_';

        CURFCALENDAR := DAGE_CALENDAR.FRFGETRECORDS(SBWHERE);

        LOOP
            FETCH CURFCALENDAR INTO RCCALENDAR;
            OTBCALENDAR(NUINDICE) := RCCALENDAR;
            NUINDICE := NUINDICE +1;
            EXIT WHEN (CURFCALENDAR%NOTFOUND);
        END LOOP;

        CLOSECURSOR(CURFCALENDAR);
        OBLEXITO := TRUE;

    EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
            CLOSECURSOR(CURFCALENDAR);
            RAISE;
        WHEN OTHERS THEN
             CLOSECURSOR(CURFCALENDAR);
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUGETDAYOFWEEKSUNDAY
    RETURN NUMBER
    IS
    BEGIN
       RETURN GE_BOCONSTANTS.CNUDAY_OF_WEEK_SUNDAY;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUGETDAYOFWEEKSATURDAY
    RETURN NUMBER
    IS
    BEGIN
       RETURN GE_BOCONSTANTS.CNUDAY_OF_WEEK_SATURDAY;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    






















    FUNCTION FDTGETFIRSTDATEBYGEOGRAP
    RETURN   GE_CALENDAR.DATE_%TYPE
    IS
        CURSOR CUFIRTDATE
        IS
        SELECT /*+index ( ge_calendar PK_GE_CALENDAR ) */
               DATE_
        FROM   GE_CALENDAR
        WHERE COUNTRY_ID = GNUPAIS
        ORDER BY DATE_ ASC;
        
        DTFIRTSDATE  GE_CALENDAR.DATE_%TYPE;
        
    BEGIN
        IF ( CUFIRTDATE%ISOPEN ) THEN
            CLOSE CUFIRTDATE;
        END IF;
        
        OPEN CUFIRTDATE;
        FETCH CUFIRTDATE INTO DTFIRTSDATE;
        CLOSE CUFIRTDATE;
        RETURN DTFIRTSDATE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    






















    FUNCTION FDTGETLASTDATEBYGEOGRAP
    RETURN   GE_CALENDAR.DATE_%TYPE
    IS
        CURSOR CULASTDATE
        IS
        SELECT /*+index_desc ( ge_calendar PK_GE_CALENDAR ) */
               DATE_
        FROM   GE_CALENDAR
        WHERE COUNTRY_ID = GNUPAIS
        ORDER BY DATE_ DESC;

        DTLASTDATE  GE_CALENDAR.DATE_%TYPE;

    BEGIN
        IF ( CULASTDATE%ISOPEN ) THEN
            CLOSE CULASTDATE;
        END IF;
        
        OPEN CULASTDATE;
        FETCH CULASTDATE INTO DTLASTDATE;
        CLOSE CULASTDATE;
        RETURN DTLASTDATE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTGETLASTDATEBYGEOGRAP;
    
    



















    PROCEDURE  GETMONTHCALENDAR
    (
        IDTMONTHCURENT  IN  DATE,
        ORFMONTH        OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBWHERE     GE_BOUTILITIES.STYSTATEMENT;

    BEGIN

        IF GNUPAIS IS NULL THEN
            ERRORS.SETERROR(CNUPAISUSUARIO);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        SBWHERE := 'date_ >= trunc(to_date('''||IDTMONTHCURENT||'''),''month'')
                    AND date_ < trunc(to_date('''||IDTMONTHCURENT||''')+31,''month'')
                    AND country_id = '||GNUPAIS;

        ORFMONTH := DAGE_CALENDAR.FRFGETRECORDS(SBWHERE);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
























    PROCEDURE UPDDAYCALENDAR
    (
        IDTDATE         IN  DATE,
        ISBLABORAL      IN  GE_CALENDAR.LABORAL%TYPE,
        INUDAYTYPE      IN  GE_CALENDAR.DAY_TYPE_ID%TYPE
    )
    IS
        RCCALENDAR  DAGE_CALENDAR.STYGE_CALENDAR;
    BEGIN

        
        DAGE_CALENDAR.GETRECORD(IDTDATE, GNUPAIS ,RCCALENDAR);


        RCCALENDAR.DATE_       := IDTDATE;
        RCCALENDAR.LABORAL     := ISBLABORAL;
        
          
        IF( RCCALENDAR.DAY_TYPE_ID != GE_BOCONSTANTS.CNUDAY_TYPE_SATURDAY AND
            RCCALENDAR.DAY_TYPE_ID != GE_BOCONSTANTS.CNUDAY_TYPE_SUNDAY ) THEN

            RCCALENDAR.DAY_TYPE_ID := INUDAYTYPE;
        END IF;

        DAGE_CALENDAR.UPDRECORD(RCCALENDAR);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    




















    PROCEDURE ACTDIASFESTNOLAB (
        IDTFECHAINI     IN      GE_CALENDAR.DATE_%TYPE,
        IDTFECHAFIN     IN      GE_CALENDAR.DATE_%TYPE,
        INUNUMERODIA    IN      NUMBER,
        INUACCION       IN      NUMBER
    )
    IS
        
        CNUMARCARLABORAL    CONSTANT NUMBER := 0;
        CNUMARCARNOLABORAL  CONSTANT NUMBER := 1;
        CNUMARCARFESTIVO    CONSTANT NUMBER := 2;
        
        
        DTDIAFESTIVO        DATE;
    BEGIN
        PKERRORS.PUSH('GE_BOCalendar.ActDiasFestNoLab');
        UT_TRACE.TRACE('Inicio [GE_BOCalendar.ActDiasFestNoLab]');
        
        
        DTDIAFESTIVO := TRUNC( IDTFECHAINI, 'DD' ) - 1;
        
        LOOP
            
            SELECT  TRUNC( NEXT_DAY( DTDIAFESTIVO, INUNUMERODIA ), 'DD' )
            INTO    DTDIAFESTIVO
            FROM    DUAL;
            
            
            EXIT WHEN DTDIAFESTIVO > TRUNC( IDTFECHAFIN, 'DD' );
            
            
            IF ( INUACCION = CNUMARCARLABORAL ) THEN
                UPDDAYCALENDAR( DTDIAFESTIVO, CSBDAY_LABORAL, GE_BOCONSTANTS.CNUDAY_TYPE_WORK_DAY );
            
            ELSIF ( INUACCION = CNUMARCARNOLABORAL ) THEN
                UPDDAYCALENDAR( DTDIAFESTIVO, CSBDAY_NOLABORAL, GE_BOCONSTANTS.CNUDAY_TYPE_WORK_DAY );
            
            ELSIF ( INUACCION = CNUMARCARFESTIVO ) THEN
                UPDDAYCALENDAR( DTDIAFESTIVO, CSBDAY_NOLABORAL, GE_BOCONSTANTS.CNUDAY_TYPE_HOLIDAY );
            END IF;
        END LOOP;
        
        UT_TRACE.TRACE('Fin [GE_BOCalendar.ActDiasFestNoLab]');
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END ACTDIASFESTNOLAB;
    
    



















    FUNCTION FNUOBTPAISPORUSUARIO
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    IS
        NUPERSON_ID             GE_PERSON.PERSON_ID%TYPE;
        GEOG_LOC_ID             GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        RCGE_GEOGRA_LOCATION    DAGE_GEOGRA_LOCATION.STYGE_GEOGRA_LOCATION;
        NUUSERCOUNTRY           GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        NUCOMPANYID             NUMBER;
    BEGIN
        PKERRORS.PUSH('GE_BOCalendar.fnuObtPaisPorUsuario');
        UT_TRACE.TRACE('Inicio [GE_BOCalendar.fnuObtPaisPorUsuario]');
        
        
        NUPERSON_ID := GE_BOPERSONAL.FNUGETPERSONID;

        
        GEOG_LOC_ID := DAGE_PERSON.FNUGETGEOGRAP_LOCATION_ID(NUPERSON_ID);
        
        
        RCGE_GEOGRA_LOCATION := GE_BOGEOGRA_LOCATION.FRCGETRECBYAREATYPE( GEOG_LOC_ID, COUNTRY_TY);
        NUUSERCOUNTRY        := RCGE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID;
        
        
        IF NUUSERCOUNTRY IS NULL THEN
            NUCOMPANYID := SA_BOSYSTEM.FNUGETUSERCOMPANYID;
            IF NUCOMPANYID IS NOT NULL THEN
                NUUSERCOUNTRY := PKTBLSISTEMA.FNUGETSISTPAIS( NUCOMPANYID );
            END IF;
        END IF;

        IF NUUSERCOUNTRY IS NULL THEN
            
            ERRORS.SETERROR(5861);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fin [GE_BOCalendar.fnuObtPaisPorUsuario]');
        PKERRORS.POP;
        
        RETURN NUUSERCOUNTRY;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUOBTPAISPORUSUARIO;

END GE_BOCALENDAR;