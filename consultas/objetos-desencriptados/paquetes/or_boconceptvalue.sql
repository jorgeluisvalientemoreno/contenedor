PACKAGE BODY or_boConceptValue IS
	
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO224451';

    
    CNUATTRIBUTEDCLIENT CONSTANT NUMBER := 1;
    
	
	
	

    

    
    
    
    CSBPAR_ADM_AIU_CONCEPT  CONSTANT VARCHAR2(25) := 'ADM_AIU_CONCEPT';
    
    
    CNUERR902621    CONSTANT   GE_MESSAGE.MESSAGE_ID%TYPE := 902621;

	
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    


































	PROCEDURE GETCONCEPTVALUEBYORDERID
    (
        IRCORDERID                IN               DAOR_ORDER.STYOR_ORDER,
        INULIQUIDATIONMETHODID    IN               PS_PACKAGE_TYPE.LIQUIDATION_METHOD%TYPE,
        OTBCONCEPTVALUE           OUT              OR_BCCONCEPTVALUE.TBCONCEPTS,
        INUPACKAGEID              IN               MO_PACKAGES.PACKAGE_ID%TYPE,
        IOTBDISCOUNTCONCEPTS      IN OUT NOCOPY    OR_BCCONCEPTVALUE.TYTBDISCOUNTCONCEPTS
    )
	IS
        TBCONCEPT       OR_BCCONCEPTVALUE.TBCONCEPTS;
        NUTASKTYPEID    OR_ORDER.TASK_TYPE_ID%TYPE;
        NUCONCEPT       OR_TASK_TYPE.CONCEPT%TYPE;
        NUADMAIUCONCEPT CONCEPTO.CONCCODI%TYPE;
	BEGIN
        UT_TRACE.TRACE('INICIO or_boConceptValue.GetConceptValueByOrderId. inuOrderid: '
                            ||TO_CHAR(IRCORDERID.ORDER_ID)      ||' inuLiquidationMethodId: '
                            ||TO_CHAR(INULIQUIDATIONMETHODID)   ||' inuPackageId: '
                            ||TO_CHAR(INUPACKAGEID)             ,2);
        
        IF INULIQUIDATIONMETHODID IN (OR_BOCONSTANTS.CNUMETODO_FIXED_PRICE) THEN

            
            NUTASKTYPEID := IRCORDERID.TASK_TYPE_ID;
            
            NUCONCEPT := DAOR_TASK_TYPE.FNUGETCONCEPT(NUTASKTYPEID);

            IF (NUCONCEPT IS NOT NULL) THEN
                TBCONCEPT(NUCONCEPT).NUCONCEPTID := NUCONCEPT;
                TBCONCEPT(NUCONCEPT).NUVALUE := IRCORDERID.ORDER_VALUE;
            END IF;
            
        ELSIF INULIQUIDATIONMETHODID IN (OR_BOCONSTANTS.CNUMETODO_DELEGATE_PRICE) THEN

            
            NUTASKTYPEID := IRCORDERID.TASK_TYPE_ID;
            
            NUCONCEPT := DAOR_TASK_TYPE.FNUGETCONCEPT(NUTASKTYPEID);

            IF (NUCONCEPT IS NOT NULL) THEN

                TBCONCEPT(NUCONCEPT).NUCONCEPTID := NUCONCEPT;
                TBCONCEPT(NUCONCEPT).NUVALUE := IRCORDERID.ORDER_VALUE - IRCORDERID.ADMIN_AIU_VALUE;

                
                NUADMAIUCONCEPT :=  FNUGETADMAIUCONCEPT();

                
                IF(NUADMAIUCONCEPT IS NULL) THEN

                    GE_BOERRORS.SETERRORCODE(CNUERR902621);

                END IF;

                
                
                IF(FBOCONCEPTWITHADMAIU(NUCONCEPT)) THEN

                    
                    TBCONCEPT(NUADMAIUCONCEPT).NUCONCEPTID := NUADMAIUCONCEPT;
                    TBCONCEPT(NUADMAIUCONCEPT).NUVALUE := IRCORDERID.ADMIN_AIU_VALUE;

                END IF;

            END IF;

            
        ELSIF  (INULIQUIDATIONMETHODID = OR_BOCONSTANTS.CNUMETODO_UNITARY_PRICE) THEN

            
            OR_BCCONCEPTVALUE.GETITEMSCONCEPTVALUEBYORDERID(IRCORDERID.ORDER_ID, TBCONCEPT, INUPACKAGEID, IOTBDISCOUNTCONCEPTS);

        END IF;
        OTBCONCEPTVALUE := TBCONCEPT;
        UT_TRACE.TRACE('FIN or_boConceptValue.GetConceptValueByOrderId',1);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
    END GETCONCEPTVALUEBYORDERID;
    
    































    PROCEDURE GETCONCEPTVALUEBYDAMAGEID
    (
        INUPACKAGEID            IN               OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
        OTBCONCEPTVALUE         OUT              OR_BCCONCEPTVALUE.TBCONCEPTS,
        OTBORDERS               OUT              DAOR_ORDER.TYTBORDER_ID,
        IOTBDISCOUNTCONCEPTS    IN OUT NOCOPY    OR_BCCONCEPTVALUE.TYTBDISCOUNTCONCEPTS
    )
    IS
        TBCHARGES                OR_BCCONCEPTVALUE.TBCONCEPTS;
        TBTOTALCHARGES           OR_BCCONCEPTVALUE.TBCONCEPTS;
        NULIQUIDATIONMETHODID    PS_PACKAGE_TYPE.LIQUIDATION_METHOD%TYPE;
        NUCAUSAL                 OR_ORDER.CAUSAL_ID%TYPE;
        SBINDEX                  VARCHAR2(100);
        SBINDEX2                 VARCHAR2(100);
        RCORDER                  DAOR_ORDER.STYOR_ORDER;
        NUPACKAGEID              OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('INICIO or_boConceptValue.GetConceptValueByDamageId. inuPackageId: '||TO_CHAR(INUPACKAGEID),1);
        
        NUPACKAGEID := INUPACKAGEID;

        
        OTBORDERS.DELETE;
        OR_BCORDERACTIVITIES.GETDAMAGESORDERSBYPACKAGE(NUPACKAGEID,OTBORDERS);
        
        IF (OTBORDERS.FIRST IS NOT NULL) THEN

            FOR NUINDEX IN OTBORDERS.FIRST .. OTBORDERS.LAST LOOP
                DAOR_ORDER.GETRECORD(OTBORDERS(NUINDEX),RCORDER);
                
                
                
                IF (RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_CLOSED) AND
                   (RCORDER.CHARGE_STATUS <> OR_BOCONSTANTS.CNUCHARGE_GENERATE) AND
                   (DAGE_CAUSAL.FNUGETATTRIBUTED_TO(RCORDER.CAUSAL_ID) = CNUATTRIBUTEDCLIENT)
                THEN

                    
                    OR_BOITEMVALUE.GETLIQMETHOD(RCORDER.ORDER_ID, NUPACKAGEID, NULIQUIDATIONMETHODID);

                    
                    GETCONCEPTVALUEBYORDERID(RCORDER, NULIQUIDATIONMETHODID,TBCHARGES, NUPACKAGEID, IOTBDISCOUNTCONCEPTS);

                    IF TBTOTALCHARGES.COUNT = 0 THEN
                        TBTOTALCHARGES := TBCHARGES;
                    ELSE
                        SBINDEX := TBCHARGES.FIRST;

                        WHILE (SBINDEX IS NOT NULL) LOOP
                            
                            SBINDEX2 := SBINDEX ||'|'||RCORDER.ORDER_ID;

                            IF (TBTOTALCHARGES.EXISTS(SBINDEX2)) THEN
                                TBTOTALCHARGES(SBINDEX2).NUVALUE := TBTOTALCHARGES(SBINDEX2).NUVALUE + TBCHARGES(SBINDEX).NUVALUE;
                            ELSE
                                TBTOTALCHARGES(SBINDEX2).NUCONCEPTID := TBCHARGES(SBINDEX).NUCONCEPTID;
                                TBTOTALCHARGES(SBINDEX2).NUVALUE := TBCHARGES(SBINDEX).NUVALUE;
                                TBTOTALCHARGES(SBINDEX2).NUORDERID := RCORDER.ORDER_ID;
                            END IF;
                            SBINDEX := TBCHARGES.NEXT(SBINDEX);
                        END LOOP;
                    END IF;
                END IF;
            END LOOP;
        END IF;
        
        OTBCONCEPTVALUE := TBTOTALCHARGES;

        UT_TRACE.TRACE('FIN or_boConceptValue.GetConceptValueByDamageId',1);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETCONCEPTVALUEBYDAMAGEID;
    
    

















    FUNCTION FNUGETADMAIUCONCEPT
    RETURN CONCEPTO.CONCCODI%TYPE
    IS
    BEGIN

        RETURN GE_BOPARAMETER.FNUGET(CSBPAR_ADM_AIU_CONCEPT);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETADMAIUCONCEPT;
    

    















    FUNCTION FBOCONCEPTWITHADMAIU
    (
        NUCONCEPT    IN  CONCEPTO.CONCCODI%TYPE
    ) RETURN BOOLEAN
    IS
        NUADMAIUCONCEPT CONCEPTO.CONCCODI%TYPE;
    BEGIN
    
        
        NUADMAIUCONCEPT :=  FNUGETADMAIUCONCEPT();

        RETURN PKTBLCONCBALI.FBLEXIST(NUADMAIUCONCEPT,NUCONCEPT);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOCONCEPTWITHADMAIU;
    
    















    FUNCTION FSBCONCEPTWITHADMAIU
    (
        NUCONCEPT    IN  CONCEPTO.CONCCODI%TYPE
    ) RETURN VARCHAR2
    IS
    BEGIN
        IF (FBOCONCEPTWITHADMAIU(NUCONCEPT)) THEN
            RETURN 'Y';
        ELSE
            RETURN 'N';
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBCONCEPTWITHADMAIU;
    
END OR_BOCONCEPTVALUE;