
CREATE OR REPLACE PACKAGE BODY FA_BCNOTAAPRO IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO187507';
   GSBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END FSBVERSION;
   PROCEDURE GETNOTESTOAPPROVE( INUAPPOVEDOC IN FA_APROMOFA.APMOCONS%TYPE, OTBFA_NOTAAPRO OUT NOCOPY TYTBFA_NOTAAPRO )
    IS
      CURSOR CUNOTESTOAPPROVE( INUNOAPAPMO IN FA_NOTAAPRO.NOAPAPMO%TYPE ) IS
SELECT  /*+ index(fa_notaapro, IX_FA_NOTAAPRO01) */ *
            FROM    fa_notaapro /*+ FA_BCNotaapro.GetNotesToApprove*/
            WHERE   Noapapmo = inuNoapapmo;
    BEGIN
      PKERRORS.PUSH( 'FA_BCNotaapro.GetNotesToApprove' );
      IF ( CUNOTESTOAPPROVE%ISOPEN ) THEN
         CLOSE CUNOTESTOAPPROVE;
      END IF;
      OPEN CUNOTESTOAPPROVE( INUAPPOVEDOC );
      FETCH CUNOTESTOAPPROVE
         BULK COLLECT INTO OTBFA_NOTAAPRO;
      CLOSE CUNOTESTOAPPROVE;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         IF ( CUNOTESTOAPPROVE%ISOPEN ) THEN
            CLOSE CUNOTESTOAPPROVE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBERRMSG );
         PKERRORS.POP;
         IF ( CUNOTESTOAPPROVE%ISOPEN ) THEN
            CLOSE CUNOTESTOAPPROVE;
         END IF;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBERRMSG );
   END GETNOTESTOAPPROVE;
   PROCEDURE GETNOTESTOAPPBYCURSOR( INUAPPOVEDOC IN FA_APROMOFA.APMOCONS%TYPE, OCUCURSOR OUT PKCONSTANTE.TYREFCURSOR )
    IS
    BEGIN
      PKERRORS.PUSH( 'FA_BCNotaapro.GetNotesToAppByCursor' );
      OPEN OCUCURSOR FOR SELECT  /*+ index(fa_notaapro, IX_FA_NOTAAPRO01) */
                    Noapapmo,
                    Noapnume,
                    decode(Noaptido, null, '', Noaptido||'-'||description) Noaptido,
                    Noapdoso,
                    decode(Noaptino, 'C', 'C-CREDITO', 'D-DEBITO') Noaptino,
                    Noapfact
            FROM    fa_notaapro, GE_DOCUMENT_TYPE /*+ FA_BCNotaapro.GetNotesToAppByCursor*/
            WHERE   Noapapmo = inuAppoveDoc
            AND     Noaptido = document_type_id(+);
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBERRMSG );
   END GETNOTESTOAPPBYCURSOR;
   PROCEDURE SAVENOTES( ITBNOTES IN TYTBFA_NOTAAPRO )
    IS
    BEGIN
      PKERRORS.PUSH( 'FA_BCNotaapro.SaveNotes' );
      FORALL NUINDEX IN ITBNOTES.FIRST..ITBNOTES.LAST
         INSERT INTO fa_notaapro VALUES  itbNotes(nuIndex);
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBERRMSG );
   END SAVENOTES;
   PROCEDURE DELNOTESTOAPPROVE( INUAPPOVEDOC IN FA_APROMOFA.APMOCONS%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'FA_BCNotaapro.DelNotesToApprove' );
      DELETE  /*+ index(fa_notaapro, IX_FA_NOTAAPRO01) */
        FROM    fa_notaapro /*+ FA_BCNotaapro.DelNotesToApprove*/
        WHERE   Noapapmo = inuAppoveDoc;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBERRMSG );
   END DELNOTESTOAPPROVE;
END FA_BCNOTAAPRO;
/


