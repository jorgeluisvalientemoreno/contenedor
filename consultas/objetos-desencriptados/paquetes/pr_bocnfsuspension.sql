CREATE OR REPLACE PACKAGE BODY PR_BOCNFSUSPENSION IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO173081';
   CNUGENAPPERROR CONSTANT NUMBER( 10 ) := -20001;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION FSBGETDIRECWITHTWOSUSPTYPE( INUSUSPTYPEIDFIRST IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE, INUSUSPTYPEIDSECOND IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE, IRCCOMPSUSPENSION IN DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION, IRCCOMPONENT IN DAPR_COMPONENT.STYPR_COMPONENT )
    RETURN VARCHAR2
    IS
      RCCOMPSUSPENSION DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
      RCCOMPONENT DAPR_COMPONENT.STYPR_COMPONENT;
      SBDIRECTIONALITYID GE_DIRECTIONALITY.DIRECTIONALITY_ID%TYPE;
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo PR_BOCnfSuspension.fsbGetDirecWithTwoSuspType', 5 );
      RCCOMPSUSPENSION := IRCCOMPSUSPENSION;
      RCCOMPONENT := IRCCOMPONENT;
      SBDIRECTIONALITYID := PR_BOCOMPONENT.ANALYZEDIRECTIONALITYRECONNECT( IRCCOMPONENT.COMPONENT_ID, INUSUSPTYPEIDFIRST );
      UT_TRACE.TRACE( 'Direccionalidad Del Tipo 1:[' || SBDIRECTIONALITYID || ']', 6 );
      RCCOMPSUSPENSION.INACTIVE_DATE := SYSDATE;
      RCCOMPSUSPENSION.ACTIVE := GE_BOCONSTANTS.CSBNO;
      DAPR_COMP_SUSPENSION.UPDRECORD( RCCOMPSUSPENSION );
      IF SBDIRECTIONALITYID IS NOT NULL THEN
         RCCOMPONENT.DIRECTIONALITY_ID := SBDIRECTIONALITYID;
         DAPR_COMPONENT.UPDRECORD( RCCOMPONENT );
      END IF;
      SBDIRECTIONALITYID := NVL( PR_BOCOMPONENT.ANALYZEDIRECTIONALITYRECONNECT( IRCCOMPONENT.COMPONENT_ID, INUSUSPTYPEIDSECOND ), SBDIRECTIONALITYID );
      UT_TRACE.TRACE( 'Direccionalidad Del Tipo 2:[' || SBDIRECTIONALITYID || ']', 6 );
      ROLLBACK;
      RETURN SBDIRECTIONALITYID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBGETDIRECFORCONNECBYPAY( INUCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE, INUSUSPTYPEIDFIRST IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE, INUSUSPTYPEIDSECOND IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE )
    RETURN VARCHAR2
    IS
      CURFCOMPSUSPENSION CONSTANTS.TYREFCURSOR;
      RCCOMPSUSPENSION DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
      RCCOMPSUSPFOUND DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
      RCCOMPONENT DAPR_COMPONENT.STYPR_COMPONENT;
      SBDIRECTIONALITYID GE_DIRECTIONALITY.DIRECTIONALITY_ID%TYPE;
      BLEXISSUSPTYPFIRST BOOLEAN;
      BLEXISSUSPTYPSECOND BOOLEAN;
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo PR_BOCnfSuspension.fsbGetDirecForConnecByPay', 3 );
      UT_TRACE.TRACE( 'Componente:[' || INUCOMPONENTID || ']Tipo Susp. 1:[' || INUSUSPTYPEIDFIRST || ']Tipo Susp. 2:[' || INUSUSPTYPEIDSECOND || ']', 4 );
      RCCOMPONENT := DAPR_COMPONENT.FRCGETRECORD( INUCOMPONENTID );
      DAGE_SUSPENSION_TYPE.ACCKEY( INUSUSPTYPEIDFIRST );
      DAGE_SUSPENSION_TYPE.ACCKEY( INUSUSPTYPEIDSECOND );
      BLEXISSUSPTYPFIRST := FALSE;
      BLEXISSUSPTYPSECOND := FALSE;
      CURFCOMPSUSPENSION := PR_BCSUSPENSION.FRFCOMPSUSPENSION( INUCOMPONENTID );
      FETCH CURFCOMPSUSPENSION
         INTO RCCOMPSUSPENSION;
      WHILE CURFCOMPSUSPENSION%FOUND
       LOOP
         UT_TRACE.TRACE( 'Id:[' || RCCOMPSUSPENSION.COMP_SUSPENSION_ID || ']Tipo de Suspension:[' || RCCOMPSUSPENSION.SUSPENSION_TYPE_ID || ']', 5 );
         IF ( RCCOMPSUSPENSION.SUSPENSION_TYPE_ID = INUSUSPTYPEIDFIRST ) THEN
            BLEXISSUSPTYPFIRST := TRUE;
            UT_TRACE.TRACE( 'Primer Tipo Existe', 6 );
            RCCOMPSUSPFOUND := RCCOMPSUSPENSION;
         END IF;
         IF ( RCCOMPSUSPENSION.SUSPENSION_TYPE_ID = INUSUSPTYPEIDSECOND ) THEN
            UT_TRACE.TRACE( 'Segundo Tipo Existe', 6 );
            BLEXISSUSPTYPSECOND := TRUE;
         END IF;
         FETCH CURFCOMPSUSPENSION
            INTO RCCOMPSUSPENSION;
      END LOOP;
      CLOSE CURFCOMPSUSPENSION;
      IF ( ( BLEXISSUSPTYPFIRST ) AND ( NOT BLEXISSUSPTYPSECOND ) ) THEN
         SBDIRECTIONALITYID := PR_BOCOMPONENT.ANALYZEDIRECTIONALITYRECONNECT( INUCOMPONENTID, INUSUSPTYPEIDFIRST );
         UT_TRACE.TRACE( 'Direccionalidad:[' || SBDIRECTIONALITYID || ']', 4 );
         RETURN SBDIRECTIONALITYID;
      END IF;
      IF ( ( NOT BLEXISSUSPTYPFIRST ) AND ( BLEXISSUSPTYPSECOND ) ) THEN
         SBDIRECTIONALITYID := PR_BOCOMPONENT.ANALYZEDIRECTIONALITYRECONNECT( INUCOMPONENTID, INUSUSPTYPEIDSECOND );
         UT_TRACE.TRACE( 'Direccionalidad:[' || SBDIRECTIONALITYID || ']', 4 );
         RETURN SBDIRECTIONALITYID;
      END IF;
      IF ( ( BLEXISSUSPTYPFIRST ) AND ( BLEXISSUSPTYPSECOND ) ) THEN
         SBDIRECTIONALITYID := FSBGETDIRECWITHTWOSUSPTYPE( INUSUSPTYPEIDFIRST, INUSUSPTYPEIDSECOND, RCCOMPSUSPFOUND, RCCOMPONENT );
         RETURN SBDIRECTIONALITYID;
      END IF;
      RETURN NULL;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFCOMPSUSPENSION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFCOMPSUSPENSION );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBPRODHASMANYSUSP( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN VARCHAR2
    IS
      CURFPRODSUSPENSION CONSTANTS.TYREFCURSOR;
      RCPRODSUSPENSION DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
      NUCOUNTER NUMBER := 0;
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE VARCHAR2( 2000 );
    BEGIN
      CURFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION( INUPRODUCTID );
      FETCH CURFPRODSUSPENSION
         INTO RCPRODSUSPENSION;
      WHILE CURFPRODSUSPENSION%FOUND
       LOOP
         UT_TRACE.TRACE( 'Id:[' || RCPRODSUSPENSION.PROD_SUSPENSION_ID || ']Tipo:[' || RCPRODSUSPENSION.SUSPENSION_TYPE_ID || ']', 12 );
         NUCOUNTER := NUCOUNTER + 1;
         FETCH CURFPRODSUSPENSION
            INTO RCPRODSUSPENSION;
      END LOOP;
      CLOSE CURFPRODSUSPENSION;
      IF NUCOUNTER > 1 THEN
         UT_TRACE.TRACE( 'Retorna Y', 12 );
         RETURN GE_BOCONSTANTS.CSBYES;
      END IF;
      UT_TRACE.TRACE( 'Retorna N', 12 );
      RETURN GE_BOCONSTANTS.CSBNO;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPRODSUSPENSION );
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         RAISE_APPLICATION_ERROR( CNUGENAPPERROR, NUERRORCODE || '-' || SBERRORMESSAGE );
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPRODSUSPENSION );
         ERRORS.SETERROR;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         RAISE_APPLICATION_ERROR( CNUGENAPPERROR, NUERRORCODE || '-' || SBERRORMESSAGE );
   END;
   FUNCTION FSBPRODHASSUSPENSIONS( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN VARCHAR2
    IS
      CURFPRODSUSPENSION CONSTANTS.TYREFCURSOR;
      RCPRODSUSPENSION DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE VARCHAR2( 2000 );
    BEGIN
      CURFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION( INUPRODUCTID );
      FETCH CURFPRODSUSPENSION
         INTO RCPRODSUSPENSION;
      UT_TRACE.TRACE( 'Id:[' || RCPRODSUSPENSION.PROD_SUSPENSION_ID || ']Tipo:[' || RCPRODSUSPENSION.SUSPENSION_TYPE_ID || ']', 12 );
      IF CURFPRODSUSPENSION%FOUND THEN
         CLOSE CURFPRODSUSPENSION;
         UT_TRACE.TRACE( 'Retorna Y', 12 );
         RETURN GE_BOCONSTANTS.CSBYES;
       ELSE
         CLOSE CURFPRODSUSPENSION;
         UT_TRACE.TRACE( 'Retorna N', 12 );
         RETURN GE_BOCONSTANTS.CSBNO;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPRODSUSPENSION );
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         RAISE_APPLICATION_ERROR( CNUGENAPPERROR, NUERRORCODE || '-' || SBERRORMESSAGE );
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPRODSUSPENSION );
         ERRORS.SETERROR;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         RAISE_APPLICATION_ERROR( CNUGENAPPERROR, NUERRORCODE || '-' || SBERRORMESSAGE );
   END;
   FUNCTION FSBGETDIRECBYSUSPTYPE( INUCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE, INUSUSPTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE )
    RETURN VARCHAR2
    IS
      CURFCOMPSUSPENSION CONSTANTS.TYREFCURSOR;
      RCCOMPSUSPENSION DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
      RCCOMPSUSPFOUND DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
      RCCOMPONENT DAPR_COMPONENT.STYPR_COMPONENT;
      SBDIRECTIONALITYID GE_DIRECTIONALITY.DIRECTIONALITY_ID%TYPE;
      BLEXISSUSPTYP BOOLEAN;
    BEGIN
      UT_TRACE.TRACE( 'PR_BOCnfSuspension.fsbGetDirecBySuspType INICIO', 3 );
      UT_TRACE.TRACE( 'Componente:[' || INUCOMPONENTID || ']Tipo Susp. 1:[' || INUSUSPTYPEID || ']', 4 );
      RCCOMPONENT := DAPR_COMPONENT.FRCGETRECORD( INUCOMPONENTID );
      DAGE_SUSPENSION_TYPE.ACCKEY( INUSUSPTYPEID );
      BLEXISSUSPTYP := FALSE;
      CURFCOMPSUSPENSION := PR_BCSUSPENSION.FRFCOMPSUSPENSION( INUCOMPONENTID );
      FETCH CURFCOMPSUSPENSION
         INTO RCCOMPSUSPENSION;
      WHILE CURFCOMPSUSPENSION%FOUND
       LOOP
         UT_TRACE.TRACE( 'Id:[' || RCCOMPSUSPENSION.COMP_SUSPENSION_ID || ']Tipo de Suspension:[' || RCCOMPSUSPENSION.SUSPENSION_TYPE_ID || ']', 4 );
         IF ( RCCOMPSUSPENSION.SUSPENSION_TYPE_ID = INUSUSPTYPEID ) THEN
            BLEXISSUSPTYP := TRUE;
            UT_TRACE.TRACE( 'Existe la suspension :' || INUSUSPTYPEID, 4 );
            RCCOMPSUSPFOUND := RCCOMPSUSPENSION;
         END IF;
         FETCH CURFCOMPSUSPENSION
            INTO RCCOMPSUSPENSION;
      END LOOP;
      CLOSE CURFCOMPSUSPENSION;
      IF ( BLEXISSUSPTYP ) THEN
         SBDIRECTIONALITYID := PR_BOCOMPONENT.ANALYZEDIRECTIONALITYRECONNECT( INUCOMPONENTID, INUSUSPTYPEID );
         UT_TRACE.TRACE( 'PR_BOCnfSuspension.fsbGetDirecBySuspType FIN Direccionalidad:[' || SBDIRECTIONALITYID || ']', 3 );
         RETURN SBDIRECTIONALITYID;
      END IF;
      UT_TRACE.TRACE( 'PR_BOCnfSuspension.fsbGetDirecBySuspType FIN Direccionalidad:[' || SBDIRECTIONALITYID || ']', 3 );
      RETURN NULL;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFCOMPSUSPENSION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFCOMPSUSPENSION );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBPRODHASNOREVIEWSUSPENSIONS( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN VARCHAR2
    IS
      CURFPRODSUSPENSION CONSTANTS.TYREFCURSOR;
      RCPRODSUSPENSION DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE VARCHAR2( 2000 );
    BEGIN
      CURFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODNOREVIEWSUSPENSION( INUPRODUCTID );
      FETCH CURFPRODSUSPENSION
         INTO RCPRODSUSPENSION;
      UT_TRACE.TRACE( 'Id:[' || RCPRODSUSPENSION.PROD_SUSPENSION_ID || ']Tipo:[' || RCPRODSUSPENSION.SUSPENSION_TYPE_ID || ']', 12 );
      IF ( CURFPRODSUSPENSION%FOUND ) THEN
         CLOSE CURFPRODSUSPENSION;
         UT_TRACE.TRACE( 'Retorna Y', 12 );
         RETURN GE_BOCONSTANTS.CSBYES;
       ELSE
         CLOSE CURFPRODSUSPENSION;
         UT_TRACE.TRACE( 'Retorna N', 12 );
         RETURN GE_BOCONSTANTS.CSBNO;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPRODSUSPENSION );
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         RAISE_APPLICATION_ERROR( CNUGENAPPERROR, NUERRORCODE || '-' || SBERRORMESSAGE );
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPRODSUSPENSION );
         ERRORS.SETERROR;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         RAISE_APPLICATION_ERROR( CNUGENAPPERROR, NUERRORCODE || '-' || SBERRORMESSAGE );
   END;
   FUNCTION FSBPRODHASPENDORACTSUSP( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN VARCHAR2
    IS
      NUERRORCODE MENSAJE.MENSCODI%TYPE;
      SBERRORMESSAGE MENSAJE.MENSDESC%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicia PR_BOCnfSuspension.fsbProdHasPendOrActSusp [' || INUPRODUCTID || ']', 15 );
      PKSERVNUMBER.VALISSUBSSERVSUSPENDED( INUPRODUCTID, NUERRORCODE, SBERRORMESSAGE );
      GW_BOERRORS.CHECKERROR( NUERRORCODE, SBERRORMESSAGE );
      IF ( FSBPRODHASSUSPENSIONS( INUPRODUCTID ) = GE_BOCONSTANTS.CSBYES OR MO_BOSUSPENSION.FNUCOUNTPENDPRODSUSPS( INUPRODUCTID ) > 0 ) THEN
         RETURN GE_BOCONSTANTS.CSBYES;
       ELSE
         RETURN GE_BOCONSTANTS.CSBNO;
      END IF;
      UT_TRACE.TRACE( 'Finaliza PR_BOCnfSuspension.fsbProdHasPendOrActSusp', 15 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Error : ex.CONTROLLED_ERROR', 15 );
         RAISE;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'Error : others', 15 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END PR_BOCNFSUSPENSION;
/


