PACKAGE BODY MO_BCCOMPONENT AS


    
    
    
    
    CSBVERSION      CONSTANT VARCHAR2(250):= 'SAO197931';

    CSBCOLON        CONSTANT VARCHAR2(10) := GE_BOCONSTANTS.CSBCOLON;
    CSBSEMICOLON    CONSTANT VARCHAR2(10) := GE_BOCONSTANTS.CSBSEMICOLON;
    CSBEQUAL        CONSTANT VARCHAR2(10) := GE_BOCONSTANTS.CSBEQUAL;

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


    FUNCTION FRFNOTIFYASSIGNFLAG
        (
        INUMOTIVEID     IN MO_MOTIVE.MOTIVE_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFNOTIFYASSIGNFLAG    CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN CURFNOTIFYASSIGNFLAG FOR
            SELECT A.*, A.ROWID
            FROM MO_COMPONENT A
            WHERE A.NOTIFY_ASSIGN_FLAG = MO_BOPARAMETER.FSBGETNO
            AND A.MOTIVE_ID = INUMOTIVEID
            AND A.MOTIVE_STATUS_ID IN
                (
                MO_BOSTATUSPARAMETER.FNUGETSTATUS_ASSIGN_COMP,
                MO_BOSTATUSPARAMETER.FNUGETSTATUS_ASS_PROJ_COMP,
                MO_BOSTATUSPARAMETER.FNUGETSTATUS_ASS_STRI_COMP
                );
        RETURN CURFNOTIFYASSIGNFLAG;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FRFCOMPONENTSBYMOTIVE
        (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFCOMPONENTSBYMOTIVE  CONSTANTS.TYREFCURSOR;
    BEGIN
     	OPEN CURFCOMPONENTSBYMOTIVE FOR
            SELECT MO_COMPONENT.*, MO_COMPONENT.ROWID
         	FROM MO_COMPONENT
          	WHERE MOTIVE_ID = INUMOTIVEID;
        RETURN CURFCOMPONENTSBYMOTIVE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    

    FUNCTION FRFGETCHILDCOMPONENT
        (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFGETCHILDCOMPONENT   CONSTANTS.TYREFCURSOR;
    BEGIN
     	OPEN CURFGETCHILDCOMPONENT FOR
          SELECT MO_COMPONENT.*, MO_COMPONENT.ROWID
          FROM MO_COMPONENT
          WHERE COMPONENT_ID IN
                (
                SELECT CHILD_COMPONENT_ID
                FROM  MO_COMP_LINK
                CONNECT BY PRIOR CHILD_COMPONENT_ID = FATHER_COMPONENT_ID
                START WITH CHILD_COMPONENT_ID =  INUCOMPONENTID
                )
            AND COMPONENT_ID <> INUCOMPONENTID;

        RETURN CURFGETCHILDCOMPONENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    

    














     FUNCTION FTBGETINFOASSIGNELEMSBYCOMP
     (
       INUCOMPONENTID   VARCHAR2
     ) RETURN GE_TYTBVARCHAR2 IS
       TBNETWORKELEMBYCOMPID    GE_TYTBVARCHAR2;
     BEGIN
       UT_TRACE.TRACE('MO_BCComponent.ftbGetInfoAssignElemsbyComp. Componente:['||INUCOMPONENTID||']',5);

       SELECT CAST(
               MULTISET(
                SELECT 'NETWORK_ELEM_OPER_ID'||CSBEQUAL||NETWORK_ELEM_OPER_ID||CSBSEMICOLON||
                       'JUMP_NUM'||CSBEQUAL||JUMP_NUM||CSBSEMICOLON||
                       'CATEGORY_ID'||CSBEQUAL||A.CATEGORY_ID||CSBSEMICOLON||
                       'COMPONENT_ID'||CSBEQUAL||B.COMPONENT_ID||CSBSEMICOLON||
                       'ELEMENT_TYPE_ID'||CSBEQUAL||ELEMENT_TYPE_ID||CSBSEMICOLON||
                       'ELEMENT_ID'||CSBEQUAL||ELEMENT_ID||CSBSEMICOLON||
                       'ELEMENT_CODE'||CSBEQUAL||ELEMENT_CODE||CSBSEMICOLON||
                       'SEQUENCE_ELEMENT'||CSBEQUAL||SEQUENCE_ELEMENT
                FROM PR_NETWORK_ELEM_OPER A, MO_COMPONENT B
                WHERE B.COMPONENT_ID = INUCOMPONENTID
                AND   A.COMPONENT_ID = B.COMPONENT_ID_PROD
                AND   A.CATEGORY_ID = IM_BOCONSTANTS.CNUCATEGORYINSTALL
                ORDER BY NETWORK_ELEM_OPER_ID
               ) AS GE_TYTBVARCHAR2
      )
      INTO TBNETWORKELEMBYCOMPID
      FROM DUAL;

      RETURN (TBNETWORKELEMBYCOMPID);

     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END;
    
    
    
    FUNCTION FTBGETCOMPONENTBYMOTIVE
    (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE,
        ISBCOMPONENTTYPEID  IN VARCHAR2,
        ISBMOTIVESTATUSID   IN VARCHAR2 DEFAULT NULL
    )
    RETURN GE_TYTBNUMBER
    IS
        TBCOMPONENT GE_TYTBNUMBER;
    BEGIN
        UT_TRACE.TRACE('Motivo:['||INUMOTIVEID||']Tipos Componente:['||ISBCOMPONENTTYPEID||']Lista Estados:['||ISBMOTIVESTATUSID||']',12);

        SELECT CAST
            (
            MULTISET
                (
                SELECT COMPONENT_ID
                FROM MO_COMPONENT C
                WHERE C.MOTIVE_ID = INUMOTIVEID
                AND INSTR(',' || ISBCOMPONENTTYPEID || ',' , ',' || C.COMPONENT_TYPE_ID || ',') > 0
                AND INSTR(',' || NVL(ISBMOTIVESTATUSID,TO_CHAR(C.MOTIVE_STATUS_ID)) || ',' , ',' || C.MOTIVE_STATUS_ID || ',') > 0
                ORDER BY C.RECORDING_DATE
                ) AS GE_TYTBNUMBER
            ) INTO TBCOMPONENT
        FROM DUAL;

        RETURN TBCOMPONENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    FUNCTION FNTGETCOMPBYACTIVITYWF
    (
      INTLISTCOMP       IN GE_TYTBNUMBER,
      INTLISTUNITTYPE   IN GE_TYTBNUMBER,
      INUPROCESSID      IN NUMBER
    ) RETURN GE_TYTBNUMBER IS
      NTLISTCOMPBYACTIVITYWF   GE_TYTBNUMBER;
    BEGIN
       UT_TRACE.TRACE('MO_BCComponent.fntGetCompbyActivityWF',2);

       UT_TRACE.TRACE('inuProcessId '||INUPROCESSID,2);
       UT_TRACE.TRACE('Lista de identificadores de Componentes ',2);
       GE_BOUTCOLLECTION.PRINTCOLLECT(INTLISTCOMP);
       UT_TRACE.TRACE('Lista de identificadores de UnitTypeIds',2);
       GE_BOUTCOLLECTION.PRINTCOLLECT(INTLISTUNITTYPE);
       
       SELECT CAST(
              MULTISET(
                 SELECT A.ID
                   FROM TABLE(CAST(INTLISTCOMP AS GE_TYTBNUMBER)) A,
                        VW_MO_ACTIVITY_COMP B
                   WHERE A.ID = B.COMPONENT_ID AND
                         B.PROCESS_ID = INUPROCESSID AND
                         B.UNIT_TYPE_ID IN
                         (
                          SELECT C.ID
                          FROM TABLE(CAST(INTLISTUNITTYPE AS GE_TYTBNUMBER)) C
                         )
             ) AS GE_TYTBNUMBER
      ) INTO NTLISTCOMPBYACTIVITYWF
      FROM DUAL;
      
      UT_TRACE.TRACE('RESULTADO ',2);
      GE_BOUTCOLLECTION.PRINTCOLLECT(NTLISTCOMPBYACTIVITYWF);

      UT_TRACE.TRACE('=======================================',2);
      
      RETURN (NTLISTCOMPBYACTIVITYWF);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    FUNCTION FNTGETCOMPBYNOTACTIVITYWF
    (
      INTLISTCOMP       IN GE_TYTBNUMBER,
      INTLISTUNITTYPE   IN GE_TYTBNUMBER,
      INUPROCESSID      IN NUMBER
    ) RETURN GE_TYTBNUMBER IS
      NTLISTCOMPBYNOTACTIVITYWF  GE_TYTBNUMBER;
    BEGIN
       UT_TRACE.TRACE('MO_BCComponent.fntGetCompbyNOTActivityWF',2);

       UT_TRACE.TRACE('inuProcessId '||INUPROCESSID,2);
       UT_TRACE.TRACE('Lista de identificadores de Componentes ',2);
       GE_BOUTCOLLECTION.PRINTCOLLECT(INTLISTCOMP);
       UT_TRACE.TRACE('Lista de identificadores de UnitTypeIds',2);
       GE_BOUTCOLLECTION.PRINTCOLLECT(INTLISTUNITTYPE);
       
       SELECT CAST(
               MULTISET(
                 SELECT NT_A.ID
                 FROM TABLE(CAST(INTLISTCOMP AS GE_TYTBNUMBER)) NT_A
                 WHERE NT_A.ID NOT IN (
                   SELECT NT_B.ID
                   FROM TABLE( CAST(
                               FNTGETCOMPBYACTIVITYWF(INTLISTCOMP,
                                                      INTLISTUNITTYPE,
                                                      INUPROCESSID
                                                     )
                               AS GE_TYTBNUMBER)
                             ) NT_B
                 )
               ) AS GE_TYTBNUMBER
      ) INTO NTLISTCOMPBYNOTACTIVITYWF
      FROM DUAL;
      
      UT_TRACE.TRACE('RESULTADO ',2);
      GE_BOUTCOLLECTION.PRINTCOLLECT(NTLISTCOMPBYNOTACTIVITYWF);

      UT_TRACE.TRACE('=======================================',2);
      
      RETURN (NTLISTCOMPBYNOTACTIVITYWF);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

    FUNCTION FNUGETSWITCHELEMENTID
    (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        ISBCOMPONENTTYPEID  IN VARCHAR2
    )
    RETURN NUMBER
    IS
        NUELEMENTID         PR_NETWORK_ELEM_OPER.ELEMENT_ID%TYPE;
        NUSWITCHELEMTYPE    NUMBER;

        CURSOR CUSWITCH
        IS
            SELECT C.ELEMENT_ID
            FROM  MO_COMPONENT B,
                  PR_NETWORK_ELEM_OPER C
            WHERE B.MOTIVE_ID = INUMOTIVEID
            AND INSTR(',' || ISBCOMPONENTTYPEID || ',' , ',' || B.COMPONENT_TYPE_ID || ',') > 0
            AND B.COMPONENT_ID_PROD = C.COMPONENT_ID
            AND C.ELEMENT_TYPE_ID = NUSWITCHELEMTYPE
            AND C.CATEGORY_ID <> IM_BOCONSTANTS.CNUCATEGORYSERVICES
            AND ROWNUM = 1;

    BEGIN
        NUSWITCHELEMTYPE := MO_BOPARAMETER.FNUGETTYPE_ELEM_SWITCH_ELE;

        FOR REC IN CUSWITCH LOOP
            NUELEMENTID := REC.ELEMENT_ID;
        END LOOP;

        RETURN NUELEMENTID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
    
    FUNCTION FNTADDATTRIBSTOCOMPID
    (
      INTLISTCOMPONENT   IN GE_TYTBNUMBER,
      ISBLISTCOLUMNS     IN VARCHAR2
    ) RETURN GE_TYTBVARCHAR2 IS
      NTLISTCOMPATT     GE_TYTBVARCHAR2;
      SBSTATEMENT       VARCHAR2(2000);
      SBFORMATLISTCOLUMNS      VARCHAR2(2000);
    BEGIN
      SBFORMATLISTCOLUMNS  := REPLACE(ISBLISTCOLUMNS,CSBCOLON,'||'||''''||CSBCOLON||''''||'||');
      
      SBSTATEMENT :=
       'SELECT /*+ FIRST_ROWS ORDERED */CAST(
              MULTISET(
               SELECT ID'||'||'||''''||CSBCOLON||''''||'||'||SBFORMATLISTCOLUMNS||' '||
                'FROM TABLE( CAST( (:1) AS GE_TYTBNUMBER) ) ,'||
                     'MO_COMPONENT '||' '||
                'WHERE ID = COMPONENT_ID'||
              ') AS GE_TYTBVARCHAR2'||
             ')'||' '||
      'FROM DUAL';
      
      EXECUTE IMMEDIATE SBSTATEMENT
      INTO NTLISTCOMPATT
      USING INTLISTCOMPONENT;
      
      RETURN (NTLISTCOMPATT);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    FUNCTION FNTMINCOMPONENTSBYCOMPTYPE
    (
      INTLISTCOMPONENT IN GE_TYTBVARCHAR2
    )RETURN GE_TYTBVARCHAR2 IS
      NTMINCOMPONENT  GE_TYTBVARCHAR2;
    BEGIN
      SELECT CAST(
              MULTISET(
                  SELECT DISTINCT (COMP_TYPE||CSBCOLON||MIN_COMP)
                   FROM (
                         SELECT UT_STRING.EXTSTRFIELD(A.ID,CSBCOLON,2) COMP_TYPE,
                                DAPS_PROD_MOTIVE_COMP.FNUGETMIN_COMPONENTS
                                ( UT_STRING.EXTSTRFIELD(A.ID,CSBCOLON,3) ) MIN_COMP
                         FROM TABLE(CAST(INTLISTCOMPONENT AS GE_TYTBVARCHAR2)) A
                        )
              ) AS GE_TYTBVARCHAR2)
      INTO NTMINCOMPONENT
      FROM DUAL;

      RETURN (NTMINCOMPONENT);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    FUNCTION FBLVALIDATEMINCOMPSBYCOMPTYPE
    (
      INTLISTCOMPONENT      IN GE_TYTBVARCHAR2,
      INUCOMPONENT_TYPE_ID  IN MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
      INUMINCOMPONENTS      IN NUMBER
    ) RETURN BOOLEAN IS
      CURSOR CUVALIDMINCOMP (NTLIST IN GE_TYTBVARCHAR2,
                             NUCOMPTYPE IN NUMBER
                            ) IS
        SELECT COUNT(*) MINCOMPS
        FROM (
               SELECT UT_STRING.EXTSTRFIELD(A.ID,CSBCOLON,1) COMP_ID,
                      UT_STRING.EXTSTRFIELD(A.ID,CSBCOLON,2) COMP_TYPE
               FROM TABLE(CAST(NTLIST AS GE_TYTBVARCHAR2)) A
             )
        WHERE  COMP_TYPE = NUCOMPTYPE;
        
        BLVALIDOK    BOOLEAN := FALSE;
    BEGIN
      FOR RG IN CUVALIDMINCOMP (INTLISTCOMPONENT,
                                INUCOMPONENT_TYPE_ID) LOOP
         IF (RG.MINCOMPS >= INUMINCOMPONENTS) THEN
            BLVALIDOK := TRUE;
         END IF;
         
      END LOOP;

      RETURN (BLVALIDOK);
      
   EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
   END;
   
    
    
    
    FUNCTION FTBGETINFONETELEMOPER
        (
        INUCOMPONENTID  NUMBER
        )
    RETURN GE_TYTBVARCHAR2 IS
        TBNETWORKELEMOPER   GE_TYTBVARCHAR2;
        TBRESULT            GE_TYTBVARCHAR2;
        NUCATESERV          NUMBER  := IM_BOCONSTANTS.CNUCATEGORYSERVICES;
    BEGIN
        SELECT CAST
            (
            MULTISET
                (
                SELECT 'NETWORK_ELEM_OPER_ID'||CSBEQUAL||A.NETWORK_ELEM_OPER_ID||CSBSEMICOLON||
                       'CATEGORY_ID'||CSBEQUAL||A.CATEGORY_ID||CSBSEMICOLON||
                       'COMPONENT_ID'||CSBEQUAL||B.COMPONENT_ID||CSBSEMICOLON||
                       'ELEMENT_TYPE_ID'||CSBEQUAL||A.ELEMENT_TYPE_ID||CSBSEMICOLON||
                       'ELEMENT_ID'||CSBEQUAL||A.ELEMENT_ID||CSBSEMICOLON||
                       'ELEMENT_CODE'||CSBEQUAL||A.ELEMENT_CODE||CSBSEMICOLON||
                       'SEQUENCE_ELEMENT'||CSBEQUAL||A.SEQUENCE_ELEMENT||CSBSEMICOLON||
                       'ELEMENT_IM'||CSBEQUAL||A.ELEMENT_IM
                FROM PR_NETWORK_ELEM_OPER A, MO_COMPONENT B
                WHERE B.COMPONENT_ID = INUCOMPONENTID
                AND   A.COMPONENT_ID = B.COMPONENT_ID_PROD
                AND A.CATEGORY_ID <> NUCATESERV
                ORDER BY A.NETWORK_ELEM_OPER_ID
                ) AS GE_TYTBVARCHAR2
            ) INTO TBNETWORKELEMOPER
        FROM DUAL;
      
        

        SELECT CAST
            (
            MULTISET
                (
                SELECT B.ID||GE_BOCONSTANTS.CSBSEMICOLON||'ROWNUM'||GE_BOCONSTANTS.CSBEQUAL||ROWNUM
                FROM
                    (
                    SELECT A.ID
                    FROM TABLE(CAST(TBNETWORKELEMOPER AS GE_TYTBVARCHAR2)) A
                    ORDER BY TO_NUMBER(UT_STRING.GETPARAMETERVALUE(A.ID,'NETWORK_ELEM_OPER_ID'))
                    ) B
                ) AS GE_TYTBVARCHAR2
            ) INTO TBRESULT
        FROM DUAL;

        RETURN TBRESULT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
     
     

     FUNCTION FTBGETCOMPSBYMOTIVEID
     (
        INUMOTIVEID   IN NUMBER
     ) RETURN GE_TYTBVARCHAR2 IS
        TBCOMPLISTID    GE_TYTBVARCHAR2;
     BEGIN
       SELECT CAST(
               MULTISET(
                SELECT 'COMPONENT_ID'||CSBEQUAL||COMPONENT_ID||CSBSEMICOLON||
                       'COMPONENT_TYPE_ID'||CSBEQUAL||COMPONENT_TYPE_ID||CSBSEMICOLON||
                       'MOTIVE_TYPE_ID'||CSBEQUAL||MOTIVE_TYPE_ID
                FROM MO_COMPONENT
                WHERE MOTIVE_ID = INUMOTIVEID
                ORDER BY RECORDING_DATE
               ) AS GE_TYTBVARCHAR2
      )
      INTO TBCOMPLISTID
      FROM DUAL;

      RETURN (TBCOMPLISTID);

     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END;

     
     
     FUNCTION FSBHASCHANGEDELEMENTTYPE
     (
        TBNETWORKELEMENS   GE_TYTBVARCHAR2,
        INUELEMENTTYPEID   NUMBER
     ) RETURN VARCHAR2 IS
        CURSOR CUCHANGEELEMTYPE IS
           SELECT 'x'
                FROM TABLE(CAST(TBNETWORKELEMENS AS GE_TYTBVARCHAR2)) A
                WHERE UT_STRING.GETPARAMETERVALUE(A.ID,'ELEMENT_TYPE_ID') =
                      INUELEMENTTYPEID AND
                      ROWNUM = 1;

         SBEXISTS     VARCHAR2(1) := GE_BOCONSTANTS.CSBNO;
     BEGIN
         FOR RG IN CUCHANGEELEMTYPE LOOP
            SBEXISTS := GE_BOCONSTANTS.CSBYES;
         END LOOP;
         
         RETURN (SBEXISTS);
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END;


     
     
     FUNCTION FBLISCOMPLAINTUNITTYPEID
     (
        INUCOMPONENTID   NUMBER,
        INUUNITTYPE      NUMBER,
        INUPROCESSID     NUMBER
     )RETURN BOOLEAN IS
        CURSOR CUEXISTUNITTYPE IS
          SELECT 'x'
           FROM VW_MO_ACTIVITY_COMP A
            WHERE A.COMPONENT_ID = INUCOMPONENTID AND
                  A.UNIT_TYPE_ID = INUUNITTYPE AND
                  A.PROCESS_ID   = INUPROCESSID AND
                  
                  A.STATUS_ID    = 5 AND
                  ROWNUM = 1;
                  
        BLEXISTS  BOOLEAN := FALSE;
     BEGIN
        FOR RG IN CUEXISTUNITTYPE LOOP
            BLEXISTS := TRUE;
        END LOOP;
        
        RETURN (BLEXISTS);
        
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END;
     
     
     
     














     FUNCTION FTBGETINFOELEMSASSBYMOTIVEID
     (
        INUMOTIVEID  IN NUMBER
     ) RETURN GE_TYTBVARCHAR2 IS
        TBNETWORKELEMBASSYMOTIVEID    GE_TYTBVARCHAR2;
     BEGIN
       SELECT CAST(
               MULTISET(
                SELECT /*+ FIRST_ROWS ORDERED */
                       'NETWORK_ELEM_OPER_ID'||CSBEQUAL||NETWORK_ELEM_OPER_ID||CSBSEMICOLON||
                       'JUMP_NUM'||CSBEQUAL||JUMP_NUM||CSBSEMICOLON||
                       'CATEGORY_ID'||CSBEQUAL||B.CATEGORY_ID||CSBSEMICOLON||
                       'COMPONENT_ID'||CSBEQUAL||A.COMPONENT_ID||CSBSEMICOLON||
                       'ELEMENT_TYPE_ID'||CSBEQUAL||ELEMENT_TYPE_ID||CSBSEMICOLON||
                       'ELEMENT_ID'||CSBEQUAL||ELEMENT_ID||CSBSEMICOLON||
                       'ELEMENT_CODE'||CSBEQUAL||ELEMENT_CODE||CSBSEMICOLON||
                       'SEQUENCE_ELEMENT'||CSBEQUAL||SEQUENCE_ELEMENT
                FROM  MO_COMPONENT A, PR_NETWORK_ELEM_OPER B
                WHERE A.MOTIVE_ID    = INUMOTIVEID AND
                      A.COMPONENT_ID_PROD = B.COMPONENT_ID AND
                      B.CATEGORY_ID  = IM_BOCONSTANTS.CNUCATEGORYINSTALL
                ORDER BY NETWORK_ELEM_OPER_ID
               ) AS GE_TYTBVARCHAR2
      )
      INTO TBNETWORKELEMBASSYMOTIVEID
      FROM DUAL;

      RETURN (TBNETWORKELEMBASSYMOTIVEID);
      
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END;

    
    
    FUNCTION FTBGETNETELEMBYCOMPTYPECAT
    (
       INUCOMPONENTID   NUMBER,
       ITBELEMSTYPEIDS  GE_TYTBNUMBER,
       ITBCATEGORYIDS   GE_TYTBNUMBER
    )RETURN GE_TYTBVARCHAR2 IS
       TBNETELEMSBYCOMP    GE_TYTBVARCHAR2;
    BEGIN
       
       TBNETELEMSBYCOMP := MO_BCCOMPONENT.FTBGETINFONETELEMOPER(INUCOMPONENTID);
       
       SELECT CAST(
               MULTISET(
                   SELECT A.ID
                   FROM TABLE(CAST(TBNETELEMSBYCOMP AS GE_TYTBVARCHAR2)) A
                   WHERE UT_STRING.GETPARAMETERVALUE(A.ID,'ELEMENT_TYPE_ID') IN
                            ( SELECT B.ID
                              FROM TABLE(CAST(ITBELEMSTYPEIDS AS GE_TYTBNUMBER)) B
                            ) AND
                         UT_STRING.GETPARAMETERVALUE(A.ID,'CATEGORY_ID') IN
                            ( SELECT C.ID
                              FROM TABLE(CAST(ITBCATEGORYIDS AS GE_TYTBNUMBER)) C
                            )
               ) AS GE_TYTBVARCHAR2
       ) INTO TBNETELEMSBYCOMP
       FROM DUAL;
                
       RETURN (TBNETELEMSBYCOMP);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
     END;
     
     
    


























     
     FUNCTION FTBGETINFOCOMPBYLISTMOTIVE
     (
       ITBLISTINFOMOTIVE  GE_TYTBVARCHAR2
     )RETURN GE_TYTBVARCHAR2 IS
       TBRESULT   GE_TYTBVARCHAR2;
     BEGIN
       UT_TRACE.TRACE('MO_BCComponent.ftbGetInfoCompbyList ',2);
       UT_TRACE.TRACE('Lista de motivos ',2);
       GE_BOUTCOLLECTION.PRINTCOLLECT(ITBLISTINFOMOTIVE);
       
       SELECT
         CAST(
           MULTISET(
               SELECT /*+ ORDERED FIRST_ROWS */
               'ANNUL_CAUSAL_ID'||GE_BOCONSTANTS.CSBEQUAL||ANNUL_CAUSAL_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'ANNUL_DATE'||GE_BOCONSTANTS.CSBEQUAL||ANNUL_DATE||GE_BOCONSTANTS.CSBSEMICOLON||
               'ASSIGN_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(ASSIGN_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'ASSIGN_ROUTE_ID'||GE_BOCONSTANTS.CSBEQUAL||ASSIGN_ROUTE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'ASSIGN_TYPE'||GE_BOCONSTANTS.CSBEQUAL||ASSIGN_TYPE||GE_BOCONSTANTS.CSBSEMICOLON||
               'ATTENTION_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(ATTENTION_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'AUTHORIZ_LETTER_FLAG'||GE_BOCONSTANTS.CSBEQUAL||AUTHORIZ_LETTER_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'BUILDING_ID'||GE_BOCONSTANTS.CSBEQUAL||BUILDING_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'CLASS_SERVICE_ID'||GE_BOCONSTANTS.CSBEQUAL||CLASS_SERVICE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_ID'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_ID_PROD'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_ID_PROD||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_TYPE_ID'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_TYPE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'CUSTOM_DECISION_FLAG'||GE_BOCONSTANTS.CSBEQUAL||CUSTOM_DECISION_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'DIRECTIONALITY_ID'||GE_BOCONSTANTS.CSBEQUAL||DIRECTIONALITY_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'DISTRIBUT_ADMIN_ID'||GE_BOCONSTANTS.CSBEQUAL||DISTRIBUT_ADMIN_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'DISTRICT_ID'||GE_BOCONSTANTS.CSBEQUAL||DISTRICT_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'ESTIMATED_INST_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(ESTIMATED_INST_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'KEEP_NUMBER_FLAG'||GE_BOCONSTANTS.CSBEQUAL||KEEP_NUMBER_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'METER'||GE_BOCONSTANTS.CSBEQUAL||METER||GE_BOCONSTANTS.CSBSEMICOLON||
               'MOTIVE_ID'||GE_BOCONSTANTS.CSBEQUAL||MOTIVE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'MOTIVE_STATUS_ID'||GE_BOCONSTANTS.CSBEQUAL||MOTIVE_STATUS_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'MOTIVE_TYPE_ID'||GE_BOCONSTANTS.CSBEQUAL||MOTIVE_TYPE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'NOTIFY_ASSIGN_FLAG'||GE_BOCONSTANTS.CSBEQUAL||NOTIFY_ASSIGN_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'OBLIGATORY_CHANGE'||GE_BOCONSTANTS.CSBEQUAL||OBLIGATORY_CHANGE||GE_BOCONSTANTS.CSBSEMICOLON||
               'OBLIGATORY_FLAG'||GE_BOCONSTANTS.CSBEQUAL||OBLIGATORY_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'PACKAGE_ID'||GE_BOCONSTANTS.CSBEQUAL||PACKAGE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'PRODUCT_ID'||GE_BOCONSTANTS.CSBEQUAL||PRODUCT_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'PRODUCT_MOTIVE_ID'||GE_BOCONSTANTS.CSBEQUAL||PRODUCT_MOTIVE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'PROD_MOTIVE_COMP_ID'||GE_BOCONSTANTS.CSBEQUAL||PROD_MOTIVE_COMP_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'RECORDING_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(RECORDING_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'SERVICE_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||SERVICE_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'CATEGORY_ID'||GE_BOCONSTANTS.CSBEQUAL||CATEGORY_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'SUBCATEGORY_ID'||GE_BOCONSTANTS.CSBEQUAL||SUBCATEGORY_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'STATUS_CHANGE_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(STATUS_CHANGE_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'STUDY_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(STUDY_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'STUDY_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||STUDY_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'SUGGESTED_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||SUGGESTED_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'UNDOASSIGN_CAUSAL_ID'||GE_BOCONSTANTS.CSBEQUAL||UNDOASSIGN_CAUSAL_ID
               FROM TABLE(CAST(ITBLISTINFOMOTIVE AS GE_TYTBVARCHAR2)) A,
                         MO_COMPONENT B
               WHERE UT_STRING.GETPARAMETERVALUE(A.ID,'MOTIVE_ID') = B.MOTIVE_ID
            ) AS GE_TYTBVARCHAR2
     )
     INTO TBRESULT
     FROM DUAL;
       
     RETURN (TBRESULT);

  EXCEPTION
	WHEN EX.CONTROLLED_ERROR THEN
        RAISE  EX.CONTROLLED_ERROR;
	WHEN OTHERS THEN
		ERRORS.SETERROR;
        RAISE  EX.CONTROLLED_ERROR;
  END;
  
  
    


























  
  FUNCTION FTBGETINFOCOMPBYLISTMOTIVE
  (
       ITBLISTINFOMOTIVE  GE_TYTBNUMBER
  )RETURN GE_TYTBVARCHAR2 IS
    TBRESULT   GE_TYTBVARCHAR2;
  BEGIN
       SELECT
         CAST(
           MULTISET(
               SELECT /*+ ORDERED FIRST_ROWS */
               'ANNUL_CAUSAL_ID'||GE_BOCONSTANTS.CSBEQUAL||ANNUL_CAUSAL_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'ANNUL_DATE'||GE_BOCONSTANTS.CSBEQUAL||ANNUL_DATE||GE_BOCONSTANTS.CSBSEMICOLON||
               'ASSIGN_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(ASSIGN_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'ASSIGN_ROUTE_ID'||GE_BOCONSTANTS.CSBEQUAL||ASSIGN_ROUTE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'ASSIGN_TYPE'||GE_BOCONSTANTS.CSBEQUAL||ASSIGN_TYPE||GE_BOCONSTANTS.CSBSEMICOLON||
               'ATTENTION_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(ATTENTION_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'AUTHORIZ_LETTER_FLAG'||GE_BOCONSTANTS.CSBEQUAL||AUTHORIZ_LETTER_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'BUILDING_ID'||GE_BOCONSTANTS.CSBEQUAL||BUILDING_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'CLASS_SERVICE_ID'||GE_BOCONSTANTS.CSBEQUAL||CLASS_SERVICE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_ID'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_ID_PROD'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_ID_PROD||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_TYPE_ID'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_TYPE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'CUSTOM_DECISION_FLAG'||GE_BOCONSTANTS.CSBEQUAL||CUSTOM_DECISION_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'DIRECTIONALITY_ID'||GE_BOCONSTANTS.CSBEQUAL||DIRECTIONALITY_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'DISTRIBUT_ADMIN_ID'||GE_BOCONSTANTS.CSBEQUAL||DISTRIBUT_ADMIN_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'DISTRICT_ID'||GE_BOCONSTANTS.CSBEQUAL||DISTRICT_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'ESTIMATED_INST_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(ESTIMATED_INST_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'KEEP_NUMBER_FLAG'||GE_BOCONSTANTS.CSBEQUAL||KEEP_NUMBER_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'METER'||GE_BOCONSTANTS.CSBEQUAL||METER||GE_BOCONSTANTS.CSBSEMICOLON||
               'MOTIVE_ID'||GE_BOCONSTANTS.CSBEQUAL||MOTIVE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'MOTIVE_STATUS_ID'||GE_BOCONSTANTS.CSBEQUAL||MOTIVE_STATUS_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'MOTIVE_TYPE_ID'||GE_BOCONSTANTS.CSBEQUAL||MOTIVE_TYPE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'NOTIFY_ASSIGN_FLAG'||GE_BOCONSTANTS.CSBEQUAL||NOTIFY_ASSIGN_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'OBLIGATORY_CHANGE'||GE_BOCONSTANTS.CSBEQUAL||OBLIGATORY_CHANGE||GE_BOCONSTANTS.CSBSEMICOLON||
               'OBLIGATORY_FLAG'||GE_BOCONSTANTS.CSBEQUAL||OBLIGATORY_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'PACKAGE_ID'||GE_BOCONSTANTS.CSBEQUAL||PACKAGE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'PRODUCT_ID'||GE_BOCONSTANTS.CSBEQUAL||PRODUCT_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'PRODUCT_MOTIVE_ID'||GE_BOCONSTANTS.CSBEQUAL||PRODUCT_MOTIVE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'PROD_MOTIVE_COMP_ID'||GE_BOCONSTANTS.CSBEQUAL||PROD_MOTIVE_COMP_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'RECORDING_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(RECORDING_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'SERVICE_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||SERVICE_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'CATEGORY_ID'||GE_BOCONSTANTS.CSBEQUAL||CATEGORY_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'SUBCATEGORY_ID'||GE_BOCONSTANTS.CSBEQUAL||SUBCATEGORY_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'STATUS_CHANGE_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(STATUS_CHANGE_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'STUDY_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(STUDY_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'STUDY_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||STUDY_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'SUGGESTED_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||SUGGESTED_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'UNDOASSIGN_CAUSAL_ID'||GE_BOCONSTANTS.CSBEQUAL||UNDOASSIGN_CAUSAL_ID
               FROM TABLE(CAST(ITBLISTINFOMOTIVE AS GE_TYTBNUMBER)) A,
                         MO_COMPONENT B
               WHERE A.ID= B.MOTIVE_ID
            ) AS GE_TYTBVARCHAR2
        )
     INTO TBRESULT
     FROM DUAL;

     RETURN (TBRESULT);

  EXCEPTION
	WHEN EX.CONTROLLED_ERROR THEN
        RAISE  EX.CONTROLLED_ERROR;
	WHEN OTHERS THEN
		ERRORS.SETERROR;
        RAISE  EX.CONTROLLED_ERROR;
  END;
  
  
  
    




























  FUNCTION FTBGETINFONETELEMSBYCOMPLIST
  (
    ITBLISTINFOCOMP IN GE_TYTBVARCHAR2
  ) RETURN GE_TYTBVARCHAR2 IS
    TBNETWORKELEMBYCOMPID    GE_TYTBVARCHAR2;
  BEGIN
       SELECT CAST(
               MULTISET(
                SELECT 'NETWORK_ELEM_OPER_ID'||CSBEQUAL||NETWORK_ELEM_OPER_ID||CSBSEMICOLON||
                       'CATEGORY_ID'||CSBEQUAL||B.CATEGORY_ID||CSBSEMICOLON||
                       'COMPONENT_ID'||CSBEQUAL||C.COMPONENT_ID||CSBSEMICOLON||
                       'ELEMENT_TYPE_ID'||CSBEQUAL||ELEMENT_TYPE_ID||CSBSEMICOLON||
                       'ELEMENT_ID'||CSBEQUAL||ELEMENT_ID||CSBSEMICOLON||
                       'ELEMENT_CODE'||CSBEQUAL||ELEMENT_CODE||CSBSEMICOLON||
                       'SEQUENCE_ELEMENT'||CSBEQUAL||SEQUENCE_ELEMENT||CSBSEMICOLON||
                       'ELEMENT_IM'||CSBEQUAL||ELEMENT_IM
                FROM  TABLE(CAST(ITBLISTINFOCOMP AS GE_TYTBVARCHAR2)) A,
                      PR_NETWORK_ELEM_OPER B, MO_COMPONENT C
                WHERE UT_STRING.GETPARAMETERVALUE(A.ID,'COMPONENT_ID') = C.COMPONENT_ID
                AND   B.COMPONENT_ID = COMPONENT_ID_PROD
                ORDER BY NETWORK_ELEM_OPER_ID
               ) AS GE_TYTBVARCHAR2
      )
      INTO TBNETWORKELEMBYCOMPID
      FROM DUAL;

      RETURN (TBNETWORKELEMBYCOMPID);

  EXCEPTION
	WHEN EX.CONTROLLED_ERROR THEN
        RAISE  EX.CONTROLLED_ERROR;
	WHEN OTHERS THEN
		ERRORS.SETERROR;
        RAISE  EX.CONTROLLED_ERROR;
  END;
  
  
  
    




























  FUNCTION FTBGETINFONETELEMSBYCOMPLIST
  (
    ITBLISTINFOCOMP IN GE_TYTBNUMBER
  ) RETURN GE_TYTBVARCHAR2 IS
    TBNETWORKELEMBYCOMPID    GE_TYTBVARCHAR2;
  BEGIN
       SELECT CAST(
               MULTISET(
                SELECT 'NETWORK_ELEM_OPER_ID'||CSBEQUAL||NETWORK_ELEM_OPER_ID||CSBSEMICOLON||
                       'JUMP_NUM'||CSBEQUAL||JUMP_NUM||CSBSEMICOLON||
                       'CATEGORY_ID'||CSBEQUAL||B.CATEGORY_ID||CSBSEMICOLON||
                       'COMPONENT_ID'||CSBEQUAL||C.COMPONENT_ID||CSBSEMICOLON||
                       'ELEMENT_TYPE_ID'||CSBEQUAL||ELEMENT_TYPE_ID||CSBSEMICOLON||
                       'ELEMENT_ID'||CSBEQUAL||ELEMENT_ID||CSBSEMICOLON||
                       'ELEMENT_CODE'||CSBEQUAL||ELEMENT_CODE||CSBSEMICOLON||
                       'SEQUENCE_ELEMENT'||CSBEQUAL||SEQUENCE_ELEMENT||CSBSEMICOLON||
                       'ELEMENT_IM'||CSBEQUAL||ELEMENT_IM
                FROM  TABLE(CAST(ITBLISTINFOCOMP AS GE_TYTBNUMBER)) A,
                      PR_NETWORK_ELEM_OPER B, MO_COMPONENT C
                WHERE A.ID = C.COMPONENT_ID
                AND B.COMPONENT_ID = C.COMPONENT_ID_PROD
                ORDER BY NETWORK_ELEM_OPER_ID
               ) AS GE_TYTBVARCHAR2
      )
      INTO TBNETWORKELEMBYCOMPID
      FROM DUAL;

      RETURN (TBNETWORKELEMBYCOMPID);

  EXCEPTION
	WHEN EX.CONTROLLED_ERROR THEN
        RAISE  EX.CONTROLLED_ERROR;
	WHEN OTHERS THEN
		ERRORS.SETERROR;
        RAISE  EX.CONTROLLED_ERROR;
  END;
  
  
     





















  
  FUNCTION FTBLOADINFOBYCOMPSID
  (
    ITBLISTCOMPIDS  IN GE_TYTBNUMBER
  ) RETURN GE_TYTBVARCHAR2 IS
    TBRESULT    GE_TYTBVARCHAR2;
  BEGIN
    SELECT
       CAST(
         MULTISET(
           SELECT /*+ ORDERED FIRST_ROWS */
               'ANNUL_CAUSAL_ID'||GE_BOCONSTANTS.CSBEQUAL||ANNUL_CAUSAL_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'ANNUL_DATE'||GE_BOCONSTANTS.CSBEQUAL||ANNUL_DATE||GE_BOCONSTANTS.CSBSEMICOLON||
               'ASSIGN_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(ASSIGN_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'ASSIGN_ROUTE_ID'||GE_BOCONSTANTS.CSBEQUAL||ASSIGN_ROUTE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'ASSIGN_TYPE'||GE_BOCONSTANTS.CSBEQUAL||ASSIGN_TYPE||GE_BOCONSTANTS.CSBSEMICOLON||
               'ATTENTION_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(ATTENTION_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'AUTHORIZ_LETTER_FLAG'||GE_BOCONSTANTS.CSBEQUAL||AUTHORIZ_LETTER_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'BUILDING_ID'||GE_BOCONSTANTS.CSBEQUAL||BUILDING_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'CLASS_SERVICE_ID'||GE_BOCONSTANTS.CSBEQUAL||CLASS_SERVICE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_ID'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_ID_PROD'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_ID_PROD||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'COMPONENT_TYPE_ID'||GE_BOCONSTANTS.CSBEQUAL||COMPONENT_TYPE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'CUSTOM_DECISION_FLAG'||GE_BOCONSTANTS.CSBEQUAL||CUSTOM_DECISION_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'DIRECTIONALITY_ID'||GE_BOCONSTANTS.CSBEQUAL||DIRECTIONALITY_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'DISTRIBUT_ADMIN_ID'||GE_BOCONSTANTS.CSBEQUAL||DISTRIBUT_ADMIN_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'DISTRICT_ID'||GE_BOCONSTANTS.CSBEQUAL||DISTRICT_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'ESTIMATED_INST_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(ESTIMATED_INST_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'KEEP_NUMBER_FLAG'||GE_BOCONSTANTS.CSBEQUAL||KEEP_NUMBER_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'METER'||GE_BOCONSTANTS.CSBEQUAL||METER||GE_BOCONSTANTS.CSBSEMICOLON||
               'MOTIVE_ID'||GE_BOCONSTANTS.CSBEQUAL||MOTIVE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'MOTIVE_STATUS_ID'||GE_BOCONSTANTS.CSBEQUAL||MOTIVE_STATUS_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'MOTIVE_TYPE_ID'||GE_BOCONSTANTS.CSBEQUAL||MOTIVE_TYPE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'NOTIFY_ASSIGN_FLAG'||GE_BOCONSTANTS.CSBEQUAL||NOTIFY_ASSIGN_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'OBLIGATORY_CHANGE'||GE_BOCONSTANTS.CSBEQUAL||OBLIGATORY_CHANGE||GE_BOCONSTANTS.CSBSEMICOLON||
               'OBLIGATORY_FLAG'||GE_BOCONSTANTS.CSBEQUAL||OBLIGATORY_FLAG||GE_BOCONSTANTS.CSBSEMICOLON||
               'PACKAGE_ID'||GE_BOCONSTANTS.CSBEQUAL||PACKAGE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'PRODUCT_ID'||GE_BOCONSTANTS.CSBEQUAL||PRODUCT_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'PRODUCT_MOTIVE_ID'||GE_BOCONSTANTS.CSBEQUAL||PRODUCT_MOTIVE_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'PROD_MOTIVE_COMP_ID'||GE_BOCONSTANTS.CSBEQUAL||PROD_MOTIVE_COMP_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'RECORDING_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(RECORDING_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'SERVICE_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||SERVICE_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'CATEGORY_ID'||GE_BOCONSTANTS.CSBEQUAL||CATEGORY_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'SUBCATEGORY_ID'||GE_BOCONSTANTS.CSBEQUAL||SUBCATEGORY_ID||GE_BOCONSTANTS.CSBSEMICOLON||
               'STATUS_CHANGE_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(STATUS_CHANGE_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'STUDY_DATE'||GE_BOCONSTANTS.CSBEQUAL||UT_DATE.FSBSTR_DATE(STUDY_DATE)||GE_BOCONSTANTS.CSBSEMICOLON||
               'STUDY_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||STUDY_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'SUGGESTED_NUMBER'||GE_BOCONSTANTS.CSBEQUAL||SUGGESTED_NUMBER||GE_BOCONSTANTS.CSBSEMICOLON||
               'UNDOASSIGN_CAUSAL_ID'||GE_BOCONSTANTS.CSBEQUAL||UNDOASSIGN_CAUSAL_ID
            FROM TABLE(CAST(ITBLISTCOMPIDS AS GE_TYTBNUMBER)) A,
                 MO_COMPONENT B
            WHERE A.ID = B.COMPONENT_ID
        ) AS GE_TYTBVARCHAR2
    ) INTO TBRESULT
    FROM DUAL;
    
    RETURN (TBRESULT);

  EXCEPTION
	WHEN EX.CONTROLLED_ERROR THEN
        RAISE  EX.CONTROLLED_ERROR;
	WHEN OTHERS THEN
		ERRORS.SETERROR;
        RAISE  EX.CONTROLLED_ERROR;
  END;
  
  
     
  FUNCTION FTBGETINFOCMPBYFATHECOMPLIST
  (
    ITBLISTINFOCOMP     IN GE_TYTBVARCHAR2,
    ITBLISTCOMPTYPES    IN GE_TYTBNUMBER,
    ITBLISTSTATUSCOMPID IN GE_TYTBNUMBER
  )RETURN GE_TYTBVARCHAR2 IS
    TBCOMPCHILDS      GE_TYTBNUMBER;
    TBINFOCOMPCHILDS  GE_TYTBVARCHAR2;
    TBRESULT          GE_TYTBVARCHAR2;
  BEGIN
       UT_TRACE.TRACE('MO_BCComponent.ftbGetInfoCmpbyFatheCompList',3);

       UT_TRACE.TRACE('Componentes ',3);
       GE_BOUTCOLLECTION.PRINTCOLLECT(ITBLISTINFOCOMP,3);
       UT_TRACE.TRACE('Tipos de componente ',3);
       GE_BOUTCOLLECTION.PRINTCOLLECT(ITBLISTCOMPTYPES,3);
       UT_TRACE.TRACE('ESTADOS de componente ',3);
       GE_BOUTCOLLECTION.PRINTCOLLECT(ITBLISTSTATUSCOMPID,3);
       
    SELECT
      CAST(
        MULTISET(
          SELECT /*+ ORDERED FIRST_ROWS */
                 CHILD_COMPONENT_ID ID
          FROM TABLE(CAST(ITBLISTINFOCOMP AS GE_TYTBVARCHAR2)) A,
               MO_COMP_LINK B
          WHERE UT_STRING.GETPARAMETERVALUE(A.ID,'COMPONENT_ID') =
                B.FATHER_COMPONENT_ID
        ) AS GE_TYTBNUMBER
    ) INTO TBCOMPCHILDS
    FROM DUAL;
    
    UT_TRACE.TRACE('COMPONENTES HIJOS ');
    GE_BOUTCOLLECTION.PRINTCOLLECT(TBCOMPCHILDS,3);

    
    TBINFOCOMPCHILDS := FTBLOADINFOBYCOMPSID(TBCOMPCHILDS);
    
    
    SELECT
       CAST(
         MULTISET(
           SELECT A.ID
           FROM TABLE(CAST(TBINFOCOMPCHILDS AS GE_TYTBVARCHAR2)) A,
                TABLE(CAST(ITBLISTCOMPTYPES AS GE_TYTBNUMBER)) B,
                TABLE(CAST(ITBLISTSTATUSCOMPID AS GE_TYTBNUMBER)) C
           WHERE UT_STRING.GETPARAMETERVALUE(A.ID,'COMPONENT_TYPE_ID') = B.ID AND
                 UT_STRING.GETPARAMETERVALUE(A.ID,'MOTIVE_STATUS_ID') = C.ID
         ) AS GE_TYTBVARCHAR2
      ) INTO TBRESULT
    FROM DUAL;
    
    RETURN (TBRESULT);
    
  EXCEPTION
	WHEN EX.CONTROLLED_ERROR THEN
        RAISE  EX.CONTROLLED_ERROR;
	WHEN OTHERS THEN
		ERRORS.SETERROR;
        RAISE  EX.CONTROLLED_ERROR;
  END;
  
  
  
  FUNCTION FTBGETINFOCMPBYFATHECOMPLIST
  (
    ITBLISTINFOCOMP     IN GE_TYTBVARCHAR2,
    ISBLISTCOMPTYPES    IN VARCHAR2,
    ISBLISTSTATUSCOMPID IN VARCHAR2
  ) RETURN GE_TYTBVARCHAR2 IS
    TBLISTCOMPTYPES       GE_TYTBNUMBER;
    TBLISTSTATUSCOMPID    GE_TYTBNUMBER;
    TBRESULT              GE_TYTBVARCHAR2;
  BEGIN
    
    
    GE_BOSTRING.EXTSTRING(ISBLISTCOMPTYPES,GE_BOCONSTANTS.CSBCOLON,
                          TBLISTCOMPTYPES);
    GE_BOSTRING.EXTSTRING(ISBLISTSTATUSCOMPID,GE_BOCONSTANTS.CSBCOLON,
                          TBLISTSTATUSCOMPID);

    
    MO_BOUTCNF_SERVICE_WF.VALIDIDSWITHDAO(TBLISTCOMPTYPES,'PS_COMPONENT_TYPE');
    MO_BOUTCNF_SERVICE_WF.VALIDIDSWITHDAO(TBLISTSTATUSCOMPID,'PS_MOTIVE_STATUS');
    
    TBRESULT := FTBGETINFOCMPBYFATHECOMPLIST(
                                              ITBLISTINFOCOMP,
                                              TBLISTCOMPTYPES,
                                              TBLISTSTATUSCOMPID
                                            );
    RETURN (TBRESULT);
  
  EXCEPTION
	WHEN EX.CONTROLLED_ERROR THEN
        RAISE  EX.CONTROLLED_ERROR;
	WHEN OTHERS THEN
		ERRORS.SETERROR;
        RAISE  EX.CONTROLLED_ERROR;
  END;
  
  

  FUNCTION FTBADDREFLINKCOMPLIST
  (
    ITBLISTINFOCOMP     IN GE_TYTBVARCHAR2
  )RETURN GE_TYTBVARCHAR2 IS
    TBRESULT     GE_TYTBVARCHAR2;
  BEGIN
    SELECT
      CAST(
        MULTISET(
            SELECT /*+ ORDERED FIRST_ROWS */
                   A.ID||GE_BOCONSTANTS.CSBSEMICOLON||'FATHER_COMPONENT_ID'||
                   GE_BOCONSTANTS.CSBEQUAL||B.FATHER_COMPONENT_ID
            FROM TABLE(CAST(ITBLISTINFOCOMP AS GE_TYTBVARCHAR2)) A,
                 MO_COMP_LINK B
            WHERE UT_STRING.GETPARAMETERVALUE(A.ID,'COMPONENT_ID') =
                  B.FATHER_COMPONENT_ID
        ) AS GE_TYTBVARCHAR2
    ) INTO TBRESULT
    FROM DUAL;
    
    RETURN (TBRESULT);

  EXCEPTION
	WHEN EX.CONTROLLED_ERROR THEN
        RAISE  EX.CONTROLLED_ERROR;
	WHEN OTHERS THEN
		ERRORS.SETERROR;
        RAISE  EX.CONTROLLED_ERROR;
  END;
  
  

    FUNCTION FRFGETCHILDDIRECTCOMPONENT
        (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFGETCHILDDIRECTCOMPONENT CONSTANTS.TYREFCURSOR;
    BEGIN
     	OPEN CURFGETCHILDDIRECTCOMPONENT FOR
            SELECT A.*, A.ROWID
            FROM MO_COMPONENT A
            WHERE A.COMPONENT_ID IN
                (
                SELECT C.CHILD_COMPONENT_ID
                FROM MO_COMPONENT B, MO_COMP_LINK C
                WHERE B.COMPONENT_ID = C.FATHER_COMPONENT_ID
                AND B.COMPONENT_ID = INUCOMPONENTID
                )
            ORDER BY A.COMPONENT_ID;
        RETURN CURFGETCHILDDIRECTCOMPONENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FNUGETMAXSEQUENCEPBXANAL
        (
        INUMOTIVEID IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN NUMBER
    IS
        NUSEQUENCEPBX   MO_PBX_COMPONENT.SEQUENCE_PBX%TYPE;

        CURSOR CUMAXSEQUENCEPBX
        IS
            SELECT MAX(A.SEQUENCE_PBX)
            FROM MO_PBX_COMPONENT A, MO_COMPONENT B, PS_MOTIVE_STATUS C
            WHERE A.COMPONENT_ID = B.COMPONENT_ID
            AND B.MOTIVE_STATUS_ID = C.MOTIVE_STATUS_ID
            AND C.IS_FINAL_STATUS = MO_BOPARAMETER.FSBGETNO
            AND B.MOTIVE_ID = INUMOTIVEID;
    BEGIN
        OPEN CUMAXSEQUENCEPBX;
        FETCH CUMAXSEQUENCEPBX INTO NUSEQUENCEPBX;
        CLOSE CUMAXSEQUENCEPBX;
        RETURN NUSEQUENCEPBX;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FNUGETMAXSEQUENCEPBXDIG
        (
        INUMOTIVEID IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN NUMBER
    IS
        NUSEQUENCEPBX   MO_DIGITAL_PBX_COMP.SEQUENCE_PBX%TYPE;

        CURSOR CUMAXSEQUENCEPBX
        IS
            SELECT MAX(A.SEQUENCE_PBX)
            FROM MO_DIGITAL_PBX_COMP A, MO_COMPONENT B, PS_MOTIVE_STATUS C
            WHERE A.COMPONENT_ID = B.COMPONENT_ID
            AND B.MOTIVE_STATUS_ID = C.MOTIVE_STATUS_ID
            AND C.IS_FINAL_STATUS = MO_BOPARAMETER.FSBGETNO
            AND B.MOTIVE_ID = INUMOTIVEID;
    BEGIN
        OPEN CUMAXSEQUENCEPBX;
        FETCH CUMAXSEQUENCEPBX INTO NUSEQUENCEPBX;
        CLOSE CUMAXSEQUENCEPBX;
        RETURN NUSEQUENCEPBX;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION FRFCOMPONENTSBYMOTIVEQUERY
    (
        INUMOTIVEID    IN MO_COMPONENT.MOTIVE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFCOMPONENTBYMOTID CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN CURFCOMPONENTBYMOTID FOR
            SELECT A.COMPONENT_ID,
            A.MOTIVE_STATUS_ID||'-'||PS_BODESCRIPTIONS.FSBGETDESCMOTIVSTATUS(A.MOTIVE_STATUS_ID) MOTIVE_STATUS_ID,
            A.ESTIMATED_INST_DATE,A.ASSIGN_DATE,A.SERVICE_NUMBER,
            CC_BOQUERY.FSBGETCOMPONENTADDRESS( A.COMPONENT_ID ) ADDRESS,
            A.SERVICE_DATE
            FROM MO_COMPONENT A
            WHERE A.MOTIVE_ID = INUMOTIVEID;
            
         RETURN CURFCOMPONENTBYMOTID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FRFDESCCOMPSUSPENDALLOWED
    (
        INUMOTIVEID    IN MO_COMPONENT.MOTIVE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFCOMPONENTBYMOTID CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN CURFCOMPONENTBYMOTID FOR
	    	SELECT A.*, A.ROWID
	    	FROM   MO_COMPONENT A, PS_COMPONENT_TYPE B
	    	WHERE  MOTIVE_ID = INUMOTIVEID
	    	  AND  A.COMPONENT_TYPE_ID = B.COMPONENT_TYPE_ID
	    	  AND  B.SUSPEND_ALLOWED = GE_BOCONSTANTS.CSBYES
	    	ORDER BY MEDIATION_DATE	DESC;		

         RETURN CURFCOMPONENTBYMOTID;
         
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFDESCCOMPSUSPENDALLOWED;
    
    FUNCTION FRFASCCOMPSUSPENDALLOWED
    (
        INUMOTIVEID    IN MO_COMPONENT.MOTIVE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFCOMPONENTBYMOTID CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN CURFCOMPONENTBYMOTID FOR
	    	SELECT A.*, A.ROWID
	    	FROM   MO_COMPONENT A, PS_COMPONENT_TYPE B
	    	WHERE  MOTIVE_ID = INUMOTIVEID
	    	  AND  A.COMPONENT_TYPE_ID = B.COMPONENT_TYPE_ID
	    	  AND  B.SUSPEND_ALLOWED = GE_BOCONSTANTS.CSBYES
	    	ORDER BY MEDIATION_DATE	ASC;		

         RETURN CURFCOMPONENTBYMOTID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFASCCOMPSUSPENDALLOWED;



    FUNCTION FRFSPECIALSERVICEBYMOTIVE
        (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE,
        INUMOTIVESTATUS     IN MO_COMPONENT.MOTIVE_STATUS_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFCOMPONENTSBYMOTIVE  CONSTANTS.TYREFCURSOR;
    BEGIN
     	OPEN CURFCOMPONENTSBYMOTIVE FOR
            SELECT MO_COMPONENT.*, MO_COMPONENT.ROWID
         	FROM MO_COMPONENT
          	WHERE MOTIVE_ID = INUMOTIVEID
              AND MOTIVE_STATUS_ID = INUMOTIVESTATUS
              AND COMPONENT_TYPE_ID IN (MO_BOCONSTANTS.CNUCOMPTYPESPECSERV,
                                        MO_BOCONSTANTS.CNUCOMPTYPETRAFFREST);

        RETURN CURFCOMPONENTSBYMOTIVE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FRFSPECIALSERVICEPACKBYMOTIVE
        (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFCOMPONENTSBYMOTIVE  CONSTANTS.TYREFCURSOR;
    BEGIN
     	OPEN CURFCOMPONENTSBYMOTIVE FOR
            SELECT MO_COMPONENT.*, MO_COMPONENT.ROWID
         	FROM MO_COMPONENT
          	WHERE MOTIVE_ID = INUMOTIVEID
              AND MOTIVE_STATUS_ID = MO_BOSTATUSPARAMETER.FNUGETSTATUS_ASSIGN_COMP
              AND COMPONENT_TYPE_ID IN (MO_BOCONSTANTS.CNUCOMPTYPESPECSERV,
                                        MO_BOCONSTANTS.CNUCOMPTYPETRAFFREST,
                                        MO_BOCONSTANTS.CNUCOMPTYPEPACSPESER);

        RETURN CURFCOMPONENTSBYMOTIVE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION FRFFRIENDSANDFAMILY
        (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFCOMPONENTSBYMOTIVE  CONSTANTS.TYREFCURSOR;
    BEGIN
     	OPEN CURFCOMPONENTSBYMOTIVE FOR
            SELECT MO_COMPONENT.*, MO_COMPONENT.ROWID
         	FROM MO_COMPONENT
          	WHERE MOTIVE_ID = INUMOTIVEID
              AND COMPONENT_TYPE_ID = MO_BOCONSTANTS.CNUFRIENDSANDFAMILY;

        RETURN CURFCOMPONENTSBYMOTIVE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FSBHASCHILDCOMPDIRBYTYPE
    (
       ISBFATHERCOMPONENTID IN VARCHAR2,
       ISBCOMPONENTTYPEID   IN VARCHAR2
    )
    RETURN VARCHAR2
    IS
        CURSOR CUCOMPONENT
        IS
            SELECT COUNT(*) QUANTITY
            FROM MO_COMPONENT A, MO_COMP_LINK B
            WHERE B.FATHER_COMPONENT_ID = TO_NUMBER(ISBFATHERCOMPONENTID)
            AND B.CHILD_COMPONENT_ID = A.COMPONENT_ID
            AND INSTR(',' || ISBCOMPONENTTYPEID || ',' , ',' || A.COMPONENT_TYPE_ID || ',') > 0
            ORDER BY RECORDING_DATE;

        NUQUANTITY  NUMBER;
    BEGIN
        UT_TRACE.TRACE('Componente:['||ISBFATHERCOMPONENTID||']Tipos Componente:['||ISBCOMPONENTTYPEID||']',12);

        FOR REC IN CUCOMPONENT LOOP
            NUQUANTITY := REC.QUANTITY;
        END LOOP;

        IF NUQUANTITY > 0 THEN
            RETURN GE_BOCONSTANTS.CSBYES;
        ELSE
            RETURN GE_BOCONSTANTS.CSBNO;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FTBGETCOMPCHILDDIRBYTYP
    (
       ISBFATHERCOMPONENTID IN VARCHAR2,
       ISBCOMPONENTTYPEID   IN VARCHAR2,
       ISBMOTIVESTATUSID    IN VARCHAR2
    )
    RETURN GE_TYTBNUMBER
    IS
        TBCOMPONENT     GE_TYTBNUMBER;
    BEGIN
        UT_TRACE.TRACE('Componente:['||ISBFATHERCOMPONENTID||']Tipos Componente:['||ISBCOMPONENTTYPEID||']Lista Estados:['||ISBMOTIVESTATUSID||']',12);

        SELECT CAST
            (
            MULTISET
                (
                SELECT A.COMPONENT_ID ID
                FROM MO_COMPONENT A, MO_COMP_LINK B
                WHERE B.FATHER_COMPONENT_ID = TO_NUMBER(ISBFATHERCOMPONENTID)
                AND B.CHILD_COMPONENT_ID = A.COMPONENT_ID
                AND INSTR(',' || ISBCOMPONENTTYPEID || ',' , ',' || A.COMPONENT_TYPE_ID || ',') > 0
                AND INSTR(',' || ISBMOTIVESTATUSID || ',' , ',' || A.MOTIVE_STATUS_ID || ',') > 0
                ORDER BY RECORDING_DATE
                ) AS GE_TYTBNUMBER
            ) INTO TBCOMPONENT
        FROM DUAL;

        RETURN TBCOMPONENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    FUNCTION FNUGETMAINCOMPONENTID
    (
        INUMOTIVEID    IN  MO_MOTIVE.MOTIVE_ID%TYPE
    )
    RETURN NUMBER
    IS
        NUCOMPONENTID  MO_COMPONENT.COMPONENT_ID%TYPE;

        CURSOR CUMAINCOMPONENT
        (
            NUMOTIVEID IN NUMBER
        )
        IS
            SELECT A.COMPONENT_ID
              FROM MO_COMPONENT A, MO_MOTIVE B, MO_COMP_LINK C, PS_PROD_COMPOSITION D
             WHERE A.MOTIVE_ID = NUMOTIVEID
               AND B.MOTIVE_ID = A.MOTIVE_ID
               AND C.CHILD_COMPONENT_ID = A.COMPONENT_ID
               AND C.FATHER_COMPONENT_ID IS NULL
               AND D.COMPONENT_TYPE_ID=A.COMPONENT_TYPE_ID
               AND D.PRODUCT_TYPE_ID=B.PRODUCT_TYPE_ID
               AND D.IS_MAIN=GE_BOCONSTANTS.GETYES;

    BEGIN
        OPEN CUMAINCOMPONENT (INUMOTIVEID);
            FETCH CUMAINCOMPONENT INTO NUCOMPONENTID;

            IF CUMAINCOMPONENT%NOTFOUND THEN
               CLOSE CUMAINCOMPONENT;
               RETURN NULL;
            END IF;

        CLOSE CUMAINCOMPONENT;

        RETURN NUCOMPONENTID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUMAINCOMPONENT%ISOPEN THEN
                CLOSE CUMAINCOMPONENT;
            END IF;
            RAISE;

        WHEN OTHERS THEN
            IF CUMAINCOMPONENT%ISOPEN THEN
                CLOSE CUMAINCOMPONENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
    END FNUGETMAINCOMPONENTID;


    FUNCTION FTBMAINCOMPONENTS
    (
        INUMOTIVEID     MO_MOTIVE.MOTIVE_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBMAINCOMPONENTS    DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX             INTEGER := 1;
    BEGIN
        FOR REC IN CUMAINCOMPONENTS(INUMOTIVEID) LOOP
            TBMAINCOMPONENTS(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBMAINCOMPONENTS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBMAINCOMPONENTS;

    FUNCTION FTBCOMPONENTSBYMOT
    (
        INUMOTIVEID     MO_MOTIVE.MOTIVE_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCOMPONENTSBYMOT   DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX             INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPONENTSBYMOT(INUMOTIVEID) LOOP
            TBCOMPONENTSBYMOT(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPONENTSBYMOT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPONENTSBYMOT;

    FUNCTION FTBCOMPBYPRODUCTORIGIN
    (
        INUPRODUCTID    MO_COMPONENT.PRODUCT_ORIGIN_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCOMPBYPRODUCTORIGIN   DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX                 INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPBYPRODUCTORIGIN(INUPRODUCTID) LOOP
            TBCOMPBYPRODUCTORIGIN(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPBYPRODUCTORIGIN;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPBYPRODUCTORIGIN;

    FUNCTION FTBCOMPONENTSBYPACK
    (
        INUPACKAGEID    MO_PACKAGES.PACKAGE_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCOMPONENTSBYPACK  DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX             INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPONENTSBYPACK(INUPACKAGEID) LOOP
            TBCOMPONENTSBYPACK(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPONENTSBYPACK;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPONENTSBYPACK;

    FUNCTION FTBCOMPBYMOTIVEORDERBYFATHER
    (
        INUMOTIVEID     MO_MOTIVE.MOTIVE_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCOMPBYMOTIVEORDERBYFATHER     DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX                         INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPBYMOTIVEORDERBYFATHER(INUMOTIVEID) LOOP
            TBCOMPBYMOTIVEORDERBYFATHER(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPBYMOTIVEORDERBYFATHER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPBYMOTIVEORDERBYFATHER;

    FUNCTION FTBCOMPACTIVESBYMOTANDDIFTYPE
    (
        INUMOTIVEID         MO_COMPONENT.MOTIVE_ID%TYPE,
        INUCOMPONENTTYPEID  MO_COMPONENT.COMPONENT_TYPE_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCOMPACTIVESBYMOTANDDIFTYPE    DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX                         INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPACTIVESBYMOTANDDIFTYPE(INUMOTIVEID,INUCOMPONENTTYPEID) LOOP
            TBCOMPACTIVESBYMOTANDDIFTYPE(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPACTIVESBYMOTANDDIFTYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPACTIVESBYMOTANDDIFTYPE;

    FUNCTION FTBCOMPWITHOUTCOMPPROD
    (
        INUMOTIVEID     MO_COMPONENT.MOTIVE_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCOMPWITHOUTCOMPPROD       DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX                     INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPWITHOUTCOMPPROD(INUMOTIVEID) LOOP
            TBCOMPWITHOUTCOMPPROD(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPWITHOUTCOMPPROD;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPWITHOUTCOMPPROD;

    FUNCTION FTBCOMPONENTDBYSERVNUM
    (
        ISBSERVICENUMBER    MO_COMPONENT.SERVICE_NUMBER%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCOMPONENTDBYSERVNUM       DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX                     INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPONENTDBYSERVNUM(ISBSERVICENUMBER) LOOP
            TBCOMPONENTDBYSERVNUM(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPONENTDBYSERVNUM;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPONENTDBYSERVNUM;

    FUNCTION FTBCOMPACTHIERARCHYBYMOT
    (
        INUMOTIVEID     MO_COMPONENT.MOTIVE_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBCOMPONENT_ID
    IS
        TBCOMPACTHIERARCHYBYMOT     DAMO_COMPONENT.TYTBCOMPONENT_ID;
        ININDEX                     INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPACTHIERARCHYBYMOT(INUMOTIVEID) LOOP
            TBCOMPACTHIERARCHYBYMOT(ININDEX) := REC.COMPONENT_ID;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPACTHIERARCHYBYMOT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPACTHIERARCHYBYMOT;

    FUNCTION FTBCOMPBYMOTANDTYPES
    (
        INUMOTIVEID         MO_COMPONENT.MOTIVE_ID%TYPE,
        ISBCOMPTYPEIDS      VARCHAR
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCOMPBYMOTANDTYPES     DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX                 INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPBYMOTANDTYPES(INUMOTIVEID,ISBCOMPTYPEIDS) LOOP
            TBCOMPBYMOTANDTYPES(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPBYMOTANDTYPES;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPBYMOTANDTYPES;

    FUNCTION FTBCOMPBYMOTTYPESANDSTATUS
    (
        INUMOTIVEID         MO_COMPONENT.MOTIVE_ID%TYPE,
        ISBCOMPTYPEIDS      VARCHAR,
        ISBCOMPSTATUSIDS    VARCHAR
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCOMPBYMOTTYPESANDSTATUS     DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX                 INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMPBYMOTTYPESANDSTATUS(INUMOTIVEID,ISBCOMPTYPEIDS,ISBCOMPSTATUSIDS) LOOP
            TBCOMPBYMOTTYPESANDSTATUS(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBCOMPBYMOTTYPESANDSTATUS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPBYMOTTYPESANDSTATUS;

    FUNCTION FTBGETCOMPBYTYPE
    (
        INUMOTIVEID             MO_COMPONENT.MOTIVE_ID%TYPE,
        INUCOMPONENTETYPEID     MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUSTATUSID             MO_COMPONENT.MOTIVE_STATUS_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBCOMPONENT_ID
    IS
        TBGETCOMPBYTYPE         DAMO_COMPONENT.TYTBCOMPONENT_ID;
        ININDEX                 INTEGER := 1;
    BEGIN
        FOR REC IN CUGETCOMPBYTYPE(INUMOTIVEID,INUCOMPONENTETYPEID,INUSTATUSID) LOOP
            TBGETCOMPBYTYPE(ININDEX) := REC.COMPONENT_ID;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBGETCOMPBYTYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETCOMPBYTYPE;

    FUNCTION FTBGETCOMPBYFATHER
    (
        INUCOMPONENTID  MO_COMP_LINK.FATHER_COMPONENT_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBCOMPONENT_ID
    IS
        TBGETCOMPBYFATHER       DAMO_COMPONENT.TYTBCOMPONENT_ID;
        ININDEX                 INTEGER := 1;
    BEGIN
        FOR REC IN CUGETCOMPBYFATHER(INUCOMPONENTID) LOOP
            TBGETCOMPBYFATHER(ININDEX) := REC.COMPONENT_ID;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBGETCOMPBYFATHER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETCOMPBYFATHER;

    FUNCTION FTBGETMAINCOMPONENT
    (
        INUCOMPONENTID      MO_COMPONENT.COMPONENT_ID%TYPE
    )
        RETURN DAPS_PROD_COMPOSITION.TYTBPS_PROD_COMPOSITION
    IS
        TBGETMAINCOMPONENT      DAPS_PROD_COMPOSITION.TYTBPS_PROD_COMPOSITION;
        ININDEX                 INTEGER := 1;
    BEGIN
        FOR REC IN CUGETMAINCOMPONENT(INUCOMPONENTID) LOOP
            TBGETMAINCOMPONENT(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBGETMAINCOMPONENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETMAINCOMPONENT;

    FUNCTION FTBGETCHILDDIRECTCOMP
    (
        INUCOMPONENTID      MO_COMPONENT.COMPONENT_ID%TYPE
    )
        RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBGETCHILDDIRECTCOMP    DAMO_COMPONENT.TYTBMO_COMPONENT;
        ININDEX                 INTEGER := 1;
    BEGIN
        FOR REC IN CUGETCHILDDIRECTCOMP(INUCOMPONENTID) LOOP
            TBGETCHILDDIRECTCOMP(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;
        RETURN TBGETCHILDDIRECTCOMP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETCHILDDIRECTCOMP;
    









    PROCEDURE GETMOTIVESBYPRODUCTPROVISION
    (
        INUPRODUCTID    IN  PR_COMPONENT.PRODUCT_ID%TYPE,
        OTBMOTIVEID     OUT DAMO_COMPONENT.TYTBMOTIVE_ID
    )
    IS
        CURSOR CUMOTIVESBYPRODUCTPROVISION IS
            SELECT DISTINCT M.MOTIVE_ID
              FROM MO_COMPONENT M , PS_MOTIVE_STATUS S, PR_COMPONENT P
             WHERE M.COMP_PROD_PROV_ID = P.COMPONENT_ID
                   AND S.MOTIVE_STATUS_ID  = M.MOTIVE_STATUS_ID
                   AND S.IS_FINAL_STATUS  ='N'
                   AND P.PRODUCT_ID = INUPRODUCTID
        ;

    BEGIN
        OTBMOTIVEID.DELETE;
        OPEN CUMOTIVESBYPRODUCTPROVISION;
        FETCH CUMOTIVESBYPRODUCTPROVISION BULK COLLECT INTO OTBMOTIVEID;
        CLOSE CUMOTIVESBYPRODUCTPROVISION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF  CUMOTIVESBYPRODUCTPROVISION%ISOPEN THEN
                CLOSE CUMOTIVESBYPRODUCTPROVISION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF  CUMOTIVESBYPRODUCTPROVISION%ISOPEN THEN
                CLOSE CUMOTIVESBYPRODUCTPROVISION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETMOTIVESBYPRODUCTPROVISION;

    PROCEDURE GETCHILDCOMPONENTS
    (
        INUCOMPONENTID  IN  MO_COMPONENT.COMPONENT_ID%TYPE,
        INUMOTIVEID     IN  MO_COMPONENT.MOTIVE_ID%TYPE,
        OTBCOMPONENTS   OUT DAMO_COMPONENT.TYTBCOMPONENT_ID
    )
    IS
        CURSOR CUCOMPIDSBYMOTIVE
        (
            INUMOTIVEID IN  MO_COMPONENT.COMPONENT_ID%TYPE
        )
        IS
        SELECT COMPONENT_ID
        FROM MO_COMPONENT
        WHERE MOTIVE_ID = INUMOTIVEID;
        
        CURSOR CUCHLDCMPSIDBYPARENT
        (
            INUPARENTCOMPONENTID    IN  MO_COMPONENT.COMPONENT_ID%TYPE
        )
        IS
        SELECT CHILD_COMPONENT_ID
        FROM MO_COMP_LINK
        CONNECT BY PRIOR CHILD_COMPONENT_ID = FATHER_COMPONENT_ID
        START WITH CHILD_COMPONENT_ID = INUPARENTCOMPONENTID;
        
    BEGIN
        IF MO_BOCOMPONENT.FSBGETMAINCOMPONENT(INUCOMPONENTID) = GE_BOCONSTANTS.CSBYES THEN
            FOR RCCOMPONENT IN CUCOMPIDSBYMOTIVE(INUMOTIVEID) LOOP
                OTBCOMPONENTS(RCCOMPONENT.COMPONENT_ID) := RCCOMPONENT.COMPONENT_ID;
            END LOOP;
        ELSE
            FOR RCCOMPONENT IN CUCHLDCMPSIDBYPARENT(INUCOMPONENTID) LOOP
                OTBCOMPONENTS(RCCOMPONENT.CHILD_COMPONENT_ID) := RCCOMPONENT.CHILD_COMPONENT_ID;
            END LOOP;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FRCCOMPBYMOTIVETYPE
    (
        INUCOMPONENTID      IN      MO_COMPONENT.COMPONENT_ID_PROD%TYPE,
        INUMOTIVETYPEID     IN      MO_COMPONENT.MOTIVE_TYPE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.STYMO_COMPONENT
    IS
        RCCOMPONENT   DAMO_COMPONENT.STYMO_COMPONENT;
    BEGIN
        OPEN  CUGETCOMPBYMOTIVETYPE(INUCOMPONENTID,INUMOTIVETYPEID);
        FETCH CUGETCOMPBYMOTIVETYPE INTO RCCOMPONENT;
        CLOSE CUGETCOMPBYMOTIVETYPE;
        
        RETURN RCCOMPONENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FRCGETCOMPBYPRODCOMP
    (
        INUPRODCOMPID           IN  MO_COMPONENT.PRODUCT_ID%TYPE,
        INUPACKAGEID            IN  MO_COMPONENT.PACKAGE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.STYMO_COMPONENT
    IS

        
        
        CURSOR CUCOMPBYPRODCOMP IS
            SELECT A.*, A.ROWID
            FROM   MO_COMPONENT A
            WHERE  A.COMPONENT_ID_PROD = INUPRODCOMPID
            AND    A.PACKAGE_ID = INUPACKAGEID;

        
        RCCOMPBYPRODCOMP            DAMO_COMPONENT.STYMO_COMPONENT;
        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            
            IF ( CUCOMPBYPRODCOMP%ISOPEN ) THEN
                CLOSE CUCOMPBYPRODCOMP;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

     BEGIN

        
        CLOSECURSOR;

        
        OPEN CUCOMPBYPRODCOMP;
        FETCH CUCOMPBYPRODCOMP INTO RCCOMPBYPRODCOMP;
        CLOSE CUCOMPBYPRODCOMP;

        
        RETURN RCCOMPBYPRODCOMP;

     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FTBNOFATHERCOMPSBYPACK
    (
        INUPACKAGEID            IN  MO_COMPONENT.PACKAGE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS

        
        CURSOR CUNOFATHERCOMPSBYPACK IS
            SELECT A.*, A.ROWID
            FROM   MO_COMPONENT A,
                   MO_COMP_LINK B
            WHERE  A.COMPONENT_ID = B.CHILD_COMPONENT_ID
            AND    B.FATHER_COMPONENT_ID IS NULL
            AND    A.PACKAGE_ID = INUPACKAGEID;

        
        TBCOMPONENTS                DAMO_COMPONENT.TYTBMO_COMPONENT;
        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            
            IF ( CUNOFATHERCOMPSBYPACK%ISOPEN ) THEN
                CLOSE CUNOFATHERCOMPSBYPACK;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

     BEGIN

        
        TBCOMPONENTS.DELETE;
        
        
        CLOSECURSOR;

        OPEN CUNOFATHERCOMPSBYPACK;
        FETCH CUNOFATHERCOMPSBYPACK BULK COLLECT INTO TBCOMPONENTS;
        CLOSE CUNOFATHERCOMPSBYPACK;

        RETURN TBCOMPONENTS;

     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FTBACTCOMPSBYPACK
    (
        INUPACKAGEID            IN  MO_COMPONENT.PACKAGE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS

        
        CURSOR CUACTCOMPSBYPACK IS
            SELECT A.*, A.ROWID
            FROM   MO_COMPONENT A
            WHERE  A.PACKAGE_ID = INUPACKAGEID
            AND EXISTS ( SELECT 'x'
                         FROM   PS_MOTIVE_STATUS B
                          WHERE B.MOTIVE_STATUS_ID = A.MOTIVE_STATUS_ID
                          AND   B.IS_FINAL_STATUS = 'N' );

        
        TBCOMPONENTS                DAMO_COMPONENT.TYTBMO_COMPONENT;
        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            
            IF ( CUACTCOMPSBYPACK%ISOPEN ) THEN
                CLOSE CUACTCOMPSBYPACK;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

     BEGIN

        
        TBCOMPONENTS.DELETE;

        
        CLOSECURSOR;

        
        OPEN CUACTCOMPSBYPACK;
        FETCH CUACTCOMPSBYPACK BULK COLLECT INTO TBCOMPONENTS;
        CLOSE CUACTCOMPSBYPACK;

        
        RETURN TBCOMPONENTS;

     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    



















    FUNCTION FTBCOMPBYPACKANDMOTYPES
    (
        INUPACKAGEID      IN      MO_PACKAGES.PACKAGE_ID%TYPE,
        ISBMOTIVETYPES    IN      VARCHAR2
    )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
    TBCOMPONENTS   DAMO_COMPONENT.TYTBMO_COMPONENT;

        CURSOR CUGETCOMPBYPACKANDMOTYPES
        (
            INUPACKAGEID      IN      MO_PACKAGES.PACKAGE_ID%TYPE,
            ISBMOTIVETYPES    IN      VARCHAR2
        )
        IS
           SELECT A.*, A.ROWID
            FROM MO_COMPONENT A, MO_MOTIVE B
            WHERE A.MOTIVE_ID = B.MOTIVE_ID
            AND B.PACKAGE_ID = INUPACKAGEID
            AND INSTR(','||ISBMOTIVETYPES||',',
                      ','||B.MOTIVE_TYPE_ID||',') > 0
            AND EXISTS( SELECT 'X'
                        FROM PS_MOTIVE_STATUS C
                        WHERE C.MOTIVE_STATUS_ID =
                              A.MOTIVE_STATUS_ID
                        AND C.IS_FINAL_STATUS =
                           GE_BOCONSTANTS.CSBNO);
        PROCEDURE CLOSECURSOR IS
        BEGIN
            
            IF ( CUGETCOMPBYPACKANDMOTYPES%ISOPEN ) THEN
                CLOSE CUGETCOMPBYPACKANDMOTYPES;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLOSECURSOR;
    BEGIN
        CLOSECURSOR;

        OPEN  CUGETCOMPBYPACKANDMOTYPES(INUPACKAGEID,ISBMOTIVETYPES);
        FETCH CUGETCOMPBYPACKANDMOTYPES  BULK COLLECT INTO TBCOMPONENTS;
        CLOSE CUGETCOMPBYPACKANDMOTYPES;
        
        RETURN TBCOMPONENTS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCOMPBYPACKANDMOTYPES;
    
    


















    FUNCTION FRCCOMPBYPRODCOMPMOTYP
    (
        INUPRODCOMPID   IN  MO_COMPONENT.COMPONENT_ID_PROD%TYPE,
        INUPACKAGEID    IN  MO_COMPONENT.PACKAGE_ID%TYPE,
        ISBMOTYPEIDS    IN  VARCHAR2
    )
    RETURN DAMO_COMPONENT.STYMO_COMPONENT
    IS
        RCCOMPONENT DAMO_COMPONENT.STYMO_COMPONENT;

        CURSOR CUCOMPBYPRODMOTYPE IS
            SELECT A.*, A.ROWID
            FROM MO_COMPONENT A
            WHERE A.COMPONENT_ID_PROD = INUPRODCOMPID
            AND A.PACKAGE_ID = INUPACKAGEID
            AND INSTR(','||ISBMOTYPEIDS||',',','||A.MOTIVE_TYPE_ID||',') > 0;

        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            
            IF ( CUCOMPBYPRODMOTYPE%ISOPEN ) THEN
                CLOSE CUCOMPBYPRODMOTYPE;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;
    BEGIN
        
        CLOSECURSOR;

        
        OPEN CUCOMPBYPRODMOTYPE;
        FETCH CUCOMPBYPRODMOTYPE INTO RCCOMPONENT;
        CLOSE CUCOMPBYPRODMOTYPE;

        RETURN RCCOMPONENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRCCOMPBYPRODCOMPMOTYP;
    
    
    





















    FUNCTION FRFTOINSTALLCOMPBYPRCOMP
    (
        INUPRODCOMPID   IN  MO_COMPONENT.COMPONENT_ID_PROD%TYPE
    )
    RETURN DAMO_COMPONENT.TYRFRECORDS
    IS
        CUMOCOMP DAMO_COMPONENT.TYRFRECORDS;
    BEGIN
        OPEN CUMOCOMP FOR
            SELECT 
                   MO_COMPONENT.*, MO_COMPONENT.ROWID
              FROM MO_COMPONENT,
                   PS_MOTIVE_TYPE
              /*+ mo_bcComponent.frfToInstallCompByprComp SAO181024 */
             WHERE
                   MO_COMPONENT.COMPONENT_ID_PROD = INUPRODCOMPID AND
                   
                   MO_COMPONENT.COMPONENT_TYPE_ID = PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEQUIPO
                   
                   AND EXISTS
                        (
                            SELECT 1
                            FROM PS_MOTIVE_STATUS B
                            WHERE B.MOTIVE_STATUS_ID = MO_COMPONENT.MOTIVE_STATUS_ID
                            AND B.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                        )
                   AND MO_COMPONENT.MOTIVE_TYPE_ID = PS_MOTIVE_TYPE.MOTIVE_TYPE_ID
                   
                   AND PS_MOTIVE_TYPE.ACTIVITY_TYPE IN (PS_BOMOTIVETYPE.FSBINSTALLACTTYPE, PS_BOMOTIVETYPE.FSBINSTALLANDRETIREACTTYPE);

        RETURN CUMOCOMP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CUMOCOMP);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CUMOCOMP);
            RAISE EX.CONTROLLED_ERROR;
    END FRFTOINSTALLCOMPBYPRCOMP;



    

















    FUNCTION FTBGETCHILDCOMPONENT
    (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE
    )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        TBCHILDCOMPS    DAMO_COMPONENT.TYTBMO_COMPONENT;
        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUGETCHILDCOMPONENT%ISOPEN) THEN
                CLOSE CUGETCHILDCOMPONENT;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLOSECURSOR;
    BEGIN
        UT_TRACE.TRACE('INICIO MO_BCComponent.ftbGetChildComponent',5);

        
        CLOSECURSOR;

        
        OPEN CUGETCHILDCOMPONENT(INUCOMPONENTID);
        FETCH CUGETCHILDCOMPONENT BULK COLLECT INTO TBCHILDCOMPS;
        CLOSE CUGETCHILDCOMPONENT;

        UT_TRACE.TRACE('FIN MO_BCComponent.ftbGetChildComponent Hijos['||TBCHILDCOMPS.COUNT||'] - OK',5);
        RETURN TBCHILDCOMPS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETCHILDCOMPONENT;

    




















    FUNCTION FTBGETCOMMENTS
    (
        INUCOMPONENTID      IN  MO_COMPONENT.COMPONENT_ID%TYPE
    )
    RETURN DAMO_COMMENT_COMP.TYTBMO_COMMENT_COMP
    IS
        TBCOMMENT           DAMO_COMMENT_COMP.TYTBMO_COMMENT_COMP;
        ININDEX             INTEGER := 1;
    BEGIN
        FOR REC IN CUCOMMENTSBYCOMP(INUCOMPONENTID) LOOP
            TBCOMMENT(ININDEX) := REC;
            ININDEX := ININDEX + 1;
        END LOOP;

        RETURN TBCOMMENT;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETCOMMENTS;
    


    


















    FUNCTION FTBGETREQUCOMPBYTYPE
    (
        INUPACKAGEID            IN      MO_PACKAGES.PACKAGE_ID%TYPE,
        ISBMOTIVETYPES          IN      VARCHAR2,
        INUCOMPONENTTYPEID      IN      PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT
    IS
        
        TBCOMPONENTS   DAMO_COMPONENT.TYTBMO_COMPONENT;

        
        CURSOR CUGETREQUCOMPBYTYPE
        (
            INUPACKAGEID      IN      MO_PACKAGES.PACKAGE_ID%TYPE,
            ISBMOTIVETYPES    IN      VARCHAR2
        )
        IS
            SELECT  A.*, A.ROWID
            FROM    MO_COMPONENT A, MO_MOTIVE B
            WHERE   A.MOTIVE_ID = B.MOTIVE_ID
            AND     B.PACKAGE_ID = INUPACKAGEID
            AND     A.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID
            AND     INSTR(','||ISBMOTIVETYPES||',',
                          ','||B.MOTIVE_TYPE_ID||',') > 0
            AND     ( A.MOTIVE_STATUS_ID <>
                      MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP
                    OR  EXISTS
                        (
                            SELECT 'X'
                            FROM PS_MOTIVE_STATUS C
                            WHERE C.MOTIVE_STATUS_ID = A.MOTIVE_STATUS_ID
                            AND C.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                        )
                    );
        


        
        PROCEDURE CLOSECURSOR IS
        BEGIN
        
            UT_TRACE.TRACE('Inicio [MO_BCCOMPONENT.ftbGetRequCompByType.CloseCursor]', 2);

            
            IF ( CUGETREQUCOMPBYTYPE%ISOPEN ) THEN
            
                CLOSE CUGETREQUCOMPBYTYPE;
            
            END IF;

            UT_TRACE.TRACE('Fin [MO_BCCOMPONENT.ftbGetRequCompByType.CloseCursor]', 2);
        
        EXCEPTION
        
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        
        END CLOSECURSOR;

        


    BEGIN
    
        UT_TRACE.TRACE('Inicio [MO_BCCOMPONENT.ftbGetRequCompByType]', 1);

        
        CLOSECURSOR;

        
        OPEN  CUGETREQUCOMPBYTYPE(INUPACKAGEID,ISBMOTIVETYPES);
        FETCH CUGETREQUCOMPBYTYPE BULK COLLECT INTO TBCOMPONENTS;
        CLOSE CUGETREQUCOMPBYTYPE;

        UT_TRACE.TRACE('Fin [MO_BCCOMPONENT.ftbGetRequCompByType]', 1);
        RETURN TBCOMPONENTS;
    
    EXCEPTION
    
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR [MO_BCCOMPONENT.ftbGetRequCompByType]', 1);
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('others [MO_BCCOMPONENT.ftbGetRequCompByType]', 1);
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    
    END FTBGETREQUCOMPBYTYPE;

    



















    PROCEDURE GETACTICOMPSBYPACK
    (
        INUPACKAGEID            IN  MO_COMPONENT.PACKAGE_ID%TYPE,
        INUMOTIVETYPEID         IN  MO_COMPONENT.MOTIVE_TYPE_ID%TYPE,
        INUCOMPONENTTYPEID      IN  MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCLASSSERVICEID       IN  MO_COMPONENT.CLASS_SERVICE_ID%TYPE DEFAULT NULL,
        OTBCOMPONENT            OUT NOCOPY DAMO_COMPONENT.TYTBMO_COMPONENT
    )
    IS
        RFRESULT                DAMO_COMPONENT.TYRFRECORDS;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BCComponent.GetActiCompsByPack['||INUPACKAGEID||']['||INUMOTIVETYPEID||']['||INUCOMPONENTTYPEID||']['||INUCLASSSERVICEID||']', 10);

        IF  (INUCLASSSERVICEID IS NULL) THEN
        
            OPEN    RFRESULT
            FOR
                SELECT  /*+
                            index(a IDX_MO_COMPONENT_2)
                            use_nl(a b)
                        */
                        A.*,
                        A.ROWID
                FROM    MO_COMPONENT A,
                        PS_MOTIVE_STATUS B
                        /*+ MO_BCComponent.GetActiCompsByPack */
                WHERE   A.PACKAGE_ID        = INUPACKAGEID
                AND     A.MOTIVE_TYPE_ID    = INUMOTIVETYPEID
                AND     A.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID
                AND     B.MOTIVE_STATUS_ID  = A.MOTIVE_STATUS_ID
                AND     B.IS_FINAL_STATUS   = GE_BOCONSTANTS.CSBNO;
                
        ELSE
        
            OPEN    RFRESULT
            FOR
                SELECT  /*+
                            index(a IDX_MO_COMPONENT_2)
                            use_nl(a b)
                        */
                        A.*,
                        A.ROWID
                FROM    MO_COMPONENT A,
                        PS_MOTIVE_STATUS B
                        /*+ MO_BCComponent.GetActiCompsByPack */
                WHERE   A.PACKAGE_ID        = INUPACKAGEID
                AND     A.MOTIVE_TYPE_ID    = INUMOTIVETYPEID
                AND     A.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID
                AND     A.CLASS_SERVICE_ID  = INUCLASSSERVICEID
                AND     B.MOTIVE_STATUS_ID  = A.MOTIVE_STATUS_ID
                AND     B.IS_FINAL_STATUS   = GE_BOCONSTANTS.CSBNO;
        
        END IF;
        
        FETCH   RFRESULT BULK COLLECT INTO OTBCOMPONENT;
        CLOSE   RFRESULT;

        UT_TRACE.TRACE('End MO_BCComponent.GetActiCompsByPack['||OTBCOMPONENT.COUNT||']', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTICOMPSBYPACK;


    






















    FUNCTION FNUSUGGESTEDNUMBERACTIVE
    (
        ISBSUGGESTEDNUMBER  IN  MO_COMPONENT.SUGGESTED_NUMBER%TYPE
    )
    RETURN NUMBER
    IS
        
        CSBNO               VARCHAR2(2) := GE_BOCONSTANTS.CSBNO;
        
        
        NUVALSUGGNUMBER     NUMBER;

        CURSOR  CUSUGGESTEDNUMBER
        (
            ISBSUGGNUMBER   IN  MO_COMPONENT.SUGGESTED_NUMBER%TYPE
        )
        IS
            SELECT /*+ index(c IDX_MO_COMPONENT03)*/
                  1
            FROM  MO_COMPONENT C
                  /*+ MO_BCCOMPONENT.fnuSuggestedNumberActive */
            WHERE C.SUGGESTED_NUMBER = ISBSUGGNUMBER
              AND C.MOTIVE_STATUS_ID IN ( SELECT MOTIVE_STATUS_ID
                                          FROM PS_MOTIVE_STATUS
                                          WHERE IS_FINAL_STATUS = CSBNO )
              AND  ROWNUM <= 1;
    BEGIN
    
        UT_TRACE.TRACE('Inicio MO_BCCOMPONENT.fnuSuggestedNumberActive N?mero['||ISBSUGGESTEDNUMBER||']',12);

        IF CUSUGGESTEDNUMBER%ISOPEN THEN
        
            CLOSE CUSUGGESTEDNUMBER;
        
        END IF;

        OPEN CUSUGGESTEDNUMBER(ISBSUGGESTEDNUMBER);
        FETCH CUSUGGESTEDNUMBER INTO NUVALSUGGNUMBER;
        CLOSE CUSUGGESTEDNUMBER;

        
        IF (NUVALSUGGNUMBER IS NULL) THEN
        
            NUVALSUGGNUMBER := 0;
        
        END IF;

        UT_TRACE.TRACE('Fin MO_BCCOMPONENT.fnuSuggestedNumberActive Retorna['||NUVALSUGGNUMBER||']',12);
        
        RETURN NUVALSUGGNUMBER;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR MO_BCCOMPONENT.fnuSuggestedNumberActive',12);
            IF CUSUGGESTEDNUMBER%ISOPEN THEN
                CLOSE CUSUGGESTEDNUMBER;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others MO_BCCOMPONENT.fnuSuggestedNumberActive',12);
            IF CUSUGGESTEDNUMBER%ISOPEN THEN
                CLOSE CUSUGGESTEDNUMBER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUSUGGESTEDNUMBERACTIVE;
END MO_BCCOMPONENT;


PACKAGE MO_BCCOMPONENT IS





















































































































































































































    
    
    
    SUBTYPE STYRCCOMPONENTSBYMOTIVE IS DAMO_COMPONENT.STYMO_COMPONENT;
    SUBTYPE STYRCGETCHILDCOMPONENT IS DAMO_COMPONENT.STYMO_COMPONENT;
    SUBTYPE STYRCNOTIFYASSIGNFLAG IS DAMO_COMPONENT.STYMO_COMPONENT;

    
    
    
    



    FUNCTION FSBVERSION  RETURN VARCHAR2;


    














    FUNCTION FRFNOTIFYASSIGNFLAG
        (
        INUMOTIVEID     IN MO_MOTIVE.MOTIVE_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR;

    














    FUNCTION FRFCOMPONENTSBYMOTIVE
        (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR;

    












    FUNCTION FRFGETCHILDCOMPONENT
        (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR;

    



















    FUNCTION FTBGETCOMPONENTBYMOTIVE
    (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE,
        ISBCOMPONENTTYPEID  IN VARCHAR2,
        ISBMOTIVESTATUSID   IN VARCHAR2 DEFAULT NULL
    )
    RETURN GE_TYTBNUMBER;


    

















    FUNCTION FNTGETCOMPBYACTIVITYWF
    (
      INTLISTCOMP       IN GE_TYTBNUMBER,
      INTLISTUNITTYPE   IN GE_TYTBNUMBER,
      INUPROCESSID      IN NUMBER
    )RETURN GE_TYTBNUMBER;

    

















    FUNCTION FNTGETCOMPBYNOTACTIVITYWF
    (
      INTLISTCOMP       IN GE_TYTBNUMBER,
      INTLISTUNITTYPE   IN GE_TYTBNUMBER,
      INUPROCESSID      IN NUMBER
    ) RETURN GE_TYTBNUMBER;

    


















    FUNCTION FNUGETSWITCHELEMENTID
    (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        ISBCOMPONENTTYPEID  IN VARCHAR2
    )
    RETURN NUMBER;

    



















    FUNCTION FNTADDATTRIBSTOCOMPID
    (
      INTLISTCOMPONENT   IN GE_TYTBNUMBER,
      ISBLISTCOLUMNS     IN VARCHAR2
    ) RETURN GE_TYTBVARCHAR2;

    




















    FUNCTION FNTMINCOMPONENTSBYCOMPTYPE
    (
       INTLISTCOMPONENT IN GE_TYTBVARCHAR2
    )RETURN GE_TYTBVARCHAR2;


    





















    FUNCTION FBLVALIDATEMINCOMPSBYCOMPTYPE
    (
      INTLISTCOMPONENT      IN GE_TYTBVARCHAR2,
      INUCOMPONENT_TYPE_ID  IN MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
      INUMINCOMPONENTS      IN NUMBER
    ) RETURN BOOLEAN;


    




















    FUNCTION FTBGETINFONETELEMOPER
        (
        INUCOMPONENTID  NUMBER
        )
    RETURN GE_TYTBVARCHAR2;
     
     









     FUNCTION FTBGETCOMPSBYMOTIVEID
     (
        INUMOTIVEID   IN NUMBER
     ) RETURN GE_TYTBVARCHAR2;


    






     FUNCTION FTBGETINFOASSIGNELEMSBYCOMP
     (
       INUCOMPONENTID   VARCHAR2
     ) RETURN GE_TYTBVARCHAR2;
     
     








     FUNCTION FSBHASCHANGEDELEMENTTYPE
     (
        TBNETWORKELEMENS   GE_TYTBVARCHAR2,
        INUELEMENTTYPEID   NUMBER
     ) RETURN VARCHAR2;
     

       











     FUNCTION FBLISCOMPLAINTUNITTYPEID
     (
        INUCOMPONENTID   NUMBER,
        INUUNITTYPE      NUMBER,
        INUPROCESSID     NUMBER
     )RETURN BOOLEAN;
     
     
     




     FUNCTION FTBGETINFOELEMSASSBYMOTIVEID
     (
        INUMOTIVEID  IN NUMBER
     ) RETURN GE_TYTBVARCHAR2;
     
     
     
     























    FUNCTION FTBGETNETELEMBYCOMPTYPECAT
    (
       INUCOMPONENTID   NUMBER,
       ITBELEMSTYPEIDS  GE_TYTBNUMBER,
       ITBCATEGORYIDS   GE_TYTBNUMBER
    )RETURN GE_TYTBVARCHAR2;
    
    
    










     FUNCTION FTBGETINFOCOMPBYLISTMOTIVE
     (
       ITBLISTINFOMOTIVE  GE_TYTBVARCHAR2
     )RETURN GE_TYTBVARCHAR2;
     
     FUNCTION FTBGETINFOCOMPBYLISTMOTIVE
     (
       ITBLISTINFOMOTIVE  GE_TYTBNUMBER
     )RETURN GE_TYTBVARCHAR2;
     
     
     






     FUNCTION FTBGETINFONETELEMSBYCOMPLIST
     (
       ITBLISTINFOCOMP IN GE_TYTBVARCHAR2
     )RETURN GE_TYTBVARCHAR2;
     
     FUNCTION FTBGETINFONETELEMSBYCOMPLIST
     (
       ITBLISTINFOCOMP IN GE_TYTBNUMBER
     )RETURN GE_TYTBVARCHAR2;
     
     
     
     










     FUNCTION FTBLOADINFOBYCOMPSID
     (
       ITBLISTCOMPIDS  IN GE_TYTBNUMBER
     ) RETURN GE_TYTBVARCHAR2;
     
     

























     FUNCTION FTBGETINFOCMPBYFATHECOMPLIST
     (
       ITBLISTINFOCOMP     IN GE_TYTBVARCHAR2,
       ITBLISTCOMPTYPES    IN GE_TYTBNUMBER,
       ITBLISTSTATUSCOMPID IN GE_TYTBNUMBER
     )RETURN GE_TYTBVARCHAR2;
     
     FUNCTION FTBGETINFOCMPBYFATHECOMPLIST
     (
       ITBLISTINFOCOMP     IN GE_TYTBVARCHAR2,
       ISBLISTCOMPTYPES    IN VARCHAR2,
       ISBLISTSTATUSCOMPID IN VARCHAR2
     ) RETURN GE_TYTBVARCHAR2;

    




















     FUNCTION FTBADDREFLINKCOMPLIST
     (
       ITBLISTINFOCOMP     IN GE_TYTBVARCHAR2
     )RETURN GE_TYTBVARCHAR2;
     
    












    FUNCTION FRFGETCHILDDIRECTCOMPONENT
        (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR;

    














    FUNCTION FNUGETMAXSEQUENCEPBXANAL
        (
        INUMOTIVEID IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN NUMBER;

    














    FUNCTION FNUGETMAXSEQUENCEPBXDIG
        (
        INUMOTIVEID IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN NUMBER;
    













    FUNCTION FRFCOMPONENTSBYMOTIVEQUERY
    (
        INUMOTIVEID    IN MO_COMPONENT.MOTIVE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR ;

    














    FUNCTION FRFDESCCOMPSUSPENDALLOWED
    (
        INUMOTIVEID    IN MO_COMPONENT.MOTIVE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;
    
    














    FUNCTION FRFASCCOMPSUSPENDALLOWED
    (
        INUMOTIVEID    IN MO_COMPONENT.MOTIVE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;
    
    


















    FUNCTION FRFSPECIALSERVICEBYMOTIVE
        (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE,
        INUMOTIVESTATUS     IN MO_COMPONENT.MOTIVE_STATUS_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR;

    















    FUNCTION FRFSPECIALSERVICEPACKBYMOTIVE
        (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR;
    
    












    FUNCTION FRFFRIENDSANDFAMILY
        (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    RETURN CONSTANTS.TYREFCURSOR;
    
    

















    FUNCTION FSBHASCHILDCOMPDIRBYTYPE
    (
       ISBFATHERCOMPONENTID IN VARCHAR2,
       ISBCOMPONENTTYPEID   IN VARCHAR2
    )
    RETURN VARCHAR2;

    
















    FUNCTION FTBGETCOMPCHILDDIRBYTYP
    (
       ISBFATHERCOMPONENTID IN VARCHAR2,
       ISBCOMPONENTTYPEID   IN VARCHAR2,
       ISBMOTIVESTATUSID    IN VARCHAR2
    )
    RETURN GE_TYTBNUMBER;
    
    
















    FUNCTION FNUGETMAINCOMPONENTID
    (
        INUMOTIVEID    IN  MO_MOTIVE.MOTIVE_ID%TYPE
    )
    RETURN NUMBER;
    
    
    
    

    










    CURSOR CUACTICOMPSBYMOTI
    (
        INUMOTIVEID    IN MO_COMPONENT.MOTIVE_ID%TYPE
    )
    IS
        SELECT  /*+ index(a IDX_MO_COMPONENT_1) */
                A.*,
                A.ROWID
        FROM    MO_COMPONENT A
        WHERE   A.MOTIVE_ID     =   INUMOTIVEID
        AND EXISTS
        (
            SELECT  'X'
            FROM    PS_MOTIVE_STATUS B
            WHERE   B.MOTIVE_STATUS_ID  = A.MOTIVE_STATUS_ID
            AND     B.IS_FINAL_STATUS   = GE_BOCONSTANTS.CSBNO
        );

    











    CURSOR CUCOMPSBYPACKANDTYPE
    (
        INUPACKAGEID        IN MO_COMPONENT.PACKAGE_ID%TYPE,
        INUCOMPONENTTYPEID  IN MO_COMPONENT.COMPONENT_TYPE_ID%TYPE
    )
    IS
        SELECT  A.*,
                A.ROWID
        FROM    MO_COMPONENT A
        WHERE   A.PACKAGE_ID        = INUPACKAGEID
        AND     A.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID;

    











    CURSOR CUCOMPSBYMOTIANDTYPE
    (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE,
        INUCOMPONENTTYPEID  IN MO_COMPONENT.COMPONENT_TYPE_ID%TYPE
    )
    IS
        SELECT  A.*,
                A.ROWID
        FROM    MO_COMPONENT A
        WHERE   A.MOTIVE_ID         = INUMOTIVEID
        AND     A.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID;
        
    











    CURSOR CUMAINCOMPONENTS
        (
        INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE
        )
    IS
        SELECT A.*, A.ROWID
        FROM MO_COMPONENT A, MO_COMP_LINK B
        WHERE A.MOTIVE_ID  = INUMOTIVEID
        AND A.COMPONENT_ID = B.CHILD_COMPONENT_ID
        AND B.FATHER_COMPONENT_ID IS NULL;
        
    











    CURSOR CUNETTYPECOMPONENTSINSERVICE
    (
        INUMOTIVEID     IN MO_COMPONENT.MOTIVE_ID%TYPE,
        INUCOMPTYPEID   IN MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUELEMTYPEID   IN PR_NETWORK_ELEM_OPER.ELEMENT_TYPE_ID%TYPE
    )
    IS
        SELECT A.COMPONENT_ID, A.CLASS_SERVICE_ID, B.ELEMENT_ID, B.ELEMENT_CODE
        FROM    MO_COMPONENT A, PR_NETWORK_ELEM_OPER B
        WHERE   A.MOTIVE_ID  = INUMOTIVEID
        AND     A.COMPONENT_TYPE_ID = INUCOMPTYPEID
        AND     A.COMPONENT_ID_PROD = B.COMPONENT_ID
        AND     B.ELEMENT_TYPE_ID  = INUELEMTYPEID
        AND     B.CATEGORY_ID = IM_BOCONSTANTS.CNUCATEGORYSERVICES;


    














    CURSOR CUNETTYPECOMPONENTS
    (
        INUMOTIVEID     IN MO_COMPONENT.MOTIVE_ID%TYPE,
        INUCOMPTYPEID   IN MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUELEMTYPEID   IN PR_NETWORK_ELEM_OPER.ELEMENT_TYPE_ID%TYPE
    )
    IS
        SELECT A.COMPONENT_ID, A.CLASS_SERVICE_ID, B.ELEMENT_ID, B.ELEMENT_CODE
        FROM    MO_COMPONENT A, PR_NETWORK_ELEM_OPER B
        WHERE   A.MOTIVE_ID  = INUMOTIVEID
        AND     A.COMPONENT_TYPE_ID = INUCOMPTYPEID
        AND     A.COMPONENT_ID_PROD = B.COMPONENT_ID
        AND     B.ELEMENT_TYPE_ID  = INUELEMTYPEID
        AND     B.CATEGORY_ID <> IM_BOCONSTANTS.CNUCATEGORYSERVICES;


    










    CURSOR CUCOMPONENTSBYMOT
        (
        INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE
        )
    IS
        SELECT A.*, A.ROWID
        FROM MO_COMPONENT A
        WHERE A.MOTIVE_ID  = INUMOTIVEID;
        
    











    CURSOR CUCOMPBYPRODUCTORIGIN
    (
        INUPRODUCTID     MO_COMPONENT.PRODUCT_ORIGIN_ID%TYPE
    )
    IS
        SELECT A.*, A.ROWID
          FROM MO_COMPONENT A
         WHERE A.PRODUCT_ORIGIN_ID  = INUPRODUCTID;

    













    CURSOR CUCOMPONENTSBYPACKAGE
    (
        INUPACKAGEID    IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        SELECT A.*, A.ROWID
        FROM MO_COMPONENT A
        WHERE A.PACKAGE_ID  = INUPACKAGEID;
        
        
    










    CURSOR CUCOMPONENTSACTBYPACKAGE
    (
        INUPACKAGEID    IN MO_COMPONENT.PACKAGE_ID%TYPE
    )
    IS
        SELECT C.*, C.ROWID
        FROM   MO_COMPONENT C, MO_MOTIVE M
        WHERE  C.PACKAGE_ID = INUPACKAGEID
               AND M.PACKAGE_ID = INUPACKAGEID
               AND C.PACKAGE_ID = M.PACKAGE_ID
               AND C.PACKAGE_ID = M.MOTIVE_ID
               AND EXISTS  (
                                SELECT 'X'
                                FROM   PS_MOTIVE_STATUS B
                                WHERE  B.MOTIVE_STATUS_ID = C.MOTIVE_STATUS_ID
                                       AND B.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                           )
               AND EXISTS  (
                                SELECT 'X'
                                FROM   PS_MOTIVE_STATUS B
                                WHERE  B.MOTIVE_STATUS_ID = M.MOTIVE_STATUS_ID
                                       AND B.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                            )
    ;

        
    










    CURSOR CUCOMPONENTSBYPACK
        (
        INUPACKAGEID    IN MO_PACKAGES.PACKAGE_ID%TYPE
        )
    IS
        SELECT A.*, A.ROWID
        FROM MO_COMPONENT A
        WHERE A.PACKAGE_ID  = INUPACKAGEID;

    












    CURSOR CUCOMPBYMOTIVEORDERBYFATHER
    (
        INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        SELECT A.*, A.ROWID
          FROM MO_COMPONENT A, MO_COMP_LINK B
         WHERE A.MOTIVE_ID = INUMOTIVEID
           AND A.COMPONENT_ID = B.CHILD_COMPONENT_ID
      ORDER BY FATHER_COMPONENT_ID DESC;

    












    CURSOR CUCOMPACTIVESBYMOTANDDIFTYPE
        (
        INUMOTIVEID         IN MO_COMPONENT.MOTIVE_ID%TYPE,
        INUCOMPONENTTYPEID  IN MO_COMPONENT.COMPONENT_TYPE_ID%TYPE
        )
    IS
        SELECT A.*, A.ROWID
        FROM MO_COMPONENT A
        WHERE A.MOTIVE_ID  = INUMOTIVEID
        AND A.COMPONENT_TYPE_ID <> INUCOMPONENTTYPEID
        AND EXISTS  (
                    SELECT 'X'
                    FROM PS_MOTIVE_STATUS B
                    WHERE B.MOTIVE_STATUS_ID = A.MOTIVE_STATUS_ID
                    AND B.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                    );

    











    CURSOR CUCOMPWITHOUTCOMPPROD
        (
        INUMOTIVEID IN MO_COMPONENT.MOTIVE_ID%TYPE
        )
    IS
        SELECT A.*, A.ROWID
        FROM MO_COMPONENT A
        WHERE A.MOTIVE_ID  = INUMOTIVEID
        AND A.COMPONENT_ID_PROD IS NULL
        AND EXISTS  (
                    SELECT 'X'
                    FROM PS_MOTIVE_STATUS B
                    WHERE B.MOTIVE_STATUS_ID = A.MOTIVE_STATUS_ID
                    AND B.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                    );


    











	CURSOR CUCOMPONENTDBYSERVNUM
    (
        ISBSERVICENUMBER    IN MO_COMPONENT.SERVICE_NUMBER%TYPE
    )
    IS
        SELECT /*+ INDEX (a IDX_MO_COMPONENT_05)*/
             A.*, A.ROWID
    	FROM MO_COMPONENT A
        WHERE A.SERVICE_NUMBER = ISBSERVICENUMBER
        AND EXISTS  (
                    SELECT 'X'
                    FROM PS_MOTIVE_STATUS B
                    WHERE B.MOTIVE_STATUS_ID = A.MOTIVE_STATUS_ID
                    AND B.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                    );

    











	CURSOR CUGETCHILDCOMPONENT
    (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
      SELECT A.*, A.ROWID
      FROM MO_COMPONENT A
      WHERE A.COMPONENT_ID IN
            (
            SELECT B.CHILD_COMPONENT_ID
            FROM  MO_COMP_LINK B
            CONNECT BY PRIOR B.CHILD_COMPONENT_ID = B.FATHER_COMPONENT_ID
            START WITH B.CHILD_COMPONENT_ID =  INUCOMPONENTID
            )
        AND A.COMPONENT_ID + 0 <> INUCOMPONENTID
        AND EXISTS  (
                    SELECT 'X'
                    FROM PS_MOTIVE_STATUS C
                    WHERE C.MOTIVE_STATUS_ID = A.MOTIVE_STATUS_ID
                    AND C.IS_FINAL_STATUS =  GE_BOCONSTANTS.CSBNO
                    );

    






















    CURSOR CUCOMPACTHIERARCHYBYMOT
    (
        INUMOTIVEID IN MO_COMPONENT.MOTIVE_ID%TYPE
    )
    IS
    SELECT COMPONENT_ID FROM
		(
        SELECT COMPONENT_ID, MOTIVE_STATUS_ID, ROWNUM ORDER_
        FROM(
            SELECT *
            FROM MO_COMP_LINK A , MO_COMPONENT B
            WHERE B.MOTIVE_ID = INUMOTIVEID
            AND A.CHILD_COMPONENT_ID = B.COMPONENT_ID
            ) D
        CONNECT BY PRIOR D.CHILD_COMPONENT_ID = D.FATHER_COMPONENT_ID
        START WITH D.FATHER_COMPONENT_ID IS NULL
        ) D
        WHERE EXISTS(
                        SELECT 'X'
                        FROM PS_MOTIVE_STATUS C
                        WHERE C.MOTIVE_STATUS_ID = D.MOTIVE_STATUS_ID
                        AND C.IS_FINAL_STATUS =  'N'
                    )
    ORDER BY ORDER_;

    


















    CURSOR CUCOMPBYMOTANDTYPES
        (
        INUMOTIVEID     IN MO_COMPONENT.MOTIVE_ID%TYPE,
        ISBCOMPTYPEIDS  IN VARCHAR
        )
     IS
        SELECT  A.*, A.ROWID
        FROM MO_COMPONENT A
        WHERE MOTIVE_ID = INUMOTIVEID
        AND INSTR(','||ISBCOMPTYPEIDS||',',','||COMPONENT_TYPE_ID||',') > 0;


    

















    CURSOR CUCOMPBYMOTTYPESANDSTATUS
        (
        INUMOTIVEID      IN MO_COMPONENT.MOTIVE_ID%TYPE,
        ISBCOMPTYPEIDS   IN VARCHAR,
        ISBCOMPSTATUSIDS IN VARCHAR
        )
     IS
        SELECT  A.*, A.ROWID
        FROM MO_COMPONENT A
        WHERE MOTIVE_ID = INUMOTIVEID
        AND INSTR(','||ISBCOMPTYPEIDS||',',','||COMPONENT_TYPE_ID||',') > 0
        AND INSTR(','||ISBCOMPSTATUSIDS||',',','||MOTIVE_STATUS_ID||',') > 0;

    













    CURSOR
        CUGETCOMPBYTYPE(
                        INUMOTIVEID         MO_COMPONENT.MOTIVE_ID%TYPE,
                        INUCOMPONENTETYPEID MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
                        INUSTATUSID         MO_COMPONENT.MOTIVE_STATUS_ID%TYPE
                       )
    IS
    SELECT
        COMPONENT_ID
    FROM
        MO_COMPONENT
    WHERE
        MOTIVE_ID = INUMOTIVEID AND
        COMPONENT_TYPE_ID = INUCOMPONENTETYPEID AND
        MOTIVE_STATUS_ID = INUSTATUSID;


    










    CURSOR
        CUGETNUMCOMPBYFATHER(
                             INUCOMPONENTID MO_COMP_LINK.FATHER_COMPONENT_ID%TYPE
                            )
    IS
    SELECT
       COUNT(CHILD_COMPONENT_ID) NUM_COMP
    FROM
        MO_COMP_LINK
    WHERE
        FATHER_COMPONENT_ID = INUCOMPONENTID;


    










    CURSOR
        CUGETCOMPBYFATHER(
                          INUCOMPONENTID MO_COMP_LINK.FATHER_COMPONENT_ID%TYPE
                         )
    IS
    SELECT
        CHILD_COMPONENT_ID COMPONENT_ID
    FROM
        MO_COMP_LINK
    WHERE
        FATHER_COMPONENT_ID = INUCOMPONENTID;


    










    CURSOR
        CUGETSEGMENT(
                     INUCOMPONENTID MO_IPADDRESS.COMPONENT_ID%TYPE
                    )
    IS
    SELECT
        SEGMENT_ID
    FROM
        MO_IPADDRESS
    WHERE
        COMPONENT_ID = INUCOMPONENTID AND
        ROWNUM <= 1;
        
    
















    CURSOR CUGETMAINCOMPONENT
    (
        INUCOMPONENTID IN MO_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
        SELECT B.*, B.ROWID
        FROM MO_COMPONENT A, PS_PROD_COMPOSITION B
        WHERE A.COMPONENT_ID = INUCOMPONENTID
        AND A.COMPONENT_TYPE_ID = B.COMPONENT_TYPE_ID;

    


















    CURSOR CUGETCHILDDIRECTCOMP
    (
        INUCOMPONENTID IN MO_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
        SELECT /*+ leading(b) use_nl(b a) */
               A.*, A.ROWID
        FROM   MO_COMPONENT A, MO_COMP_LINK B
               /*+ MO_BCCOMPONENT.cuGetChildDirectComp */
        WHERE  B.FATHER_COMPONENT_ID = INUCOMPONENTID
        AND    B.CHILD_COMPONENT_ID = A.COMPONENT_ID;
        
        
    

















    CURSOR CUGETCOMPBYMOTIVETYPE
    (
        INUCOMPONENTID      IN      MO_COMPONENT.COMPONENT_ID_PROD%TYPE,
        INUMOTIVETYPEID     IN      MO_COMPONENT.MOTIVE_TYPE_ID%TYPE
    )
    IS
        SELECT A.*, A.ROWID
          FROM MO_COMPONENT A
         WHERE A.COMPONENT_ID_PROD = INUCOMPONENTID
           AND A.MOTIVE_TYPE_ID = INUMOTIVETYPEID
           AND EXISTS  (
                    SELECT 'X'
                    FROM PS_MOTIVE_STATUS B
                    WHERE B.MOTIVE_STATUS_ID = A.MOTIVE_STATUS_ID
                    AND B.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                    );



    



















    CURSOR CUEXISTCOMPINADDRESS
    (
        INUADDRESSID    IN AB_ADDRESS.ADDRESS_ID%TYPE
    )
    IS
        SELECT  1
        FROM    MO_COMPONENT
        WHERE   MO_COMPONENT.ADDRESS_ID = INUADDRESSID
        AND     ROWNUM = 1;
    
    
















    CURSOR CUCOMMENTSBYCOMP
    (
        INUCOMPONENTID IN MO_COMMENT_COMP.COMPONENT_ID%TYPE
    )
    IS
        SELECT  MO_COMMENT_COMP.*,
                MO_COMMENT_COMP.ROWID
        FROM    MO_COMMENT_COMP
        WHERE   MO_COMMENT_COMP.COMPONENT_ID = INUCOMPONENTID;
    

    















    FUNCTION FTBMAINCOMPONENTS
    ( INUMOTIVEID     MO_MOTIVE.MOTIVE_ID%TYPE )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT ;

     















    FUNCTION FTBCOMPONENTSBYMOT
    (   INUMOTIVEID     MO_MOTIVE.MOTIVE_ID%TYPE
    ) RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;


    















    FUNCTION FTBCOMPBYPRODUCTORIGIN
    (   INUPRODUCTID    MO_COMPONENT.PRODUCT_ORIGIN_ID%TYPE
    )   RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;


    















    FUNCTION FTBCOMPONENTSBYPACK
    (   INUPACKAGEID    MO_PACKAGES.PACKAGE_ID%TYPE
    )   RETURN DAMO_COMPONENT.TYTBMO_COMPONENT ;


    















    FUNCTION FTBCOMPBYMOTIVEORDERBYFATHER
    (   INUMOTIVEID     MO_MOTIVE.MOTIVE_ID%TYPE
    )   RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;

    
















    FUNCTION FTBCOMPACTIVESBYMOTANDDIFTYPE
    (   INUMOTIVEID         MO_COMPONENT.MOTIVE_ID%TYPE,
        INUCOMPONENTTYPEID  MO_COMPONENT.COMPONENT_TYPE_ID%TYPE
    )   RETURN DAMO_COMPONENT.TYTBMO_COMPONENT ;

    















    FUNCTION FTBCOMPWITHOUTCOMPPROD
    (   INUMOTIVEID     MO_COMPONENT.MOTIVE_ID%TYPE
    )   RETURN DAMO_COMPONENT.TYTBMO_COMPONENT ;

    















    FUNCTION FTBCOMPONENTDBYSERVNUM
    (   ISBSERVICENUMBER    MO_COMPONENT.SERVICE_NUMBER%TYPE
    )   RETURN DAMO_COMPONENT.TYTBMO_COMPONENT  ;

    















    FUNCTION FTBCOMPACTHIERARCHYBYMOT
    (   INUMOTIVEID     MO_COMPONENT.MOTIVE_ID%TYPE
    )   RETURN DAMO_COMPONENT.TYTBCOMPONENT_ID;

    















    FUNCTION FTBCOMPBYMOTANDTYPES
    (   INUMOTIVEID         MO_COMPONENT.MOTIVE_ID%TYPE,
        ISBCOMPTYPEIDS      VARCHAR
    )   RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;

    















    FUNCTION FTBCOMPBYMOTTYPESANDSTATUS
    (   INUMOTIVEID         MO_COMPONENT.MOTIVE_ID%TYPE,
        ISBCOMPTYPEIDS      VARCHAR,
        ISBCOMPSTATUSIDS    VARCHAR
    )   RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;


    















    FUNCTION FTBGETCOMPBYTYPE
    (   INUMOTIVEID             MO_COMPONENT.MOTIVE_ID%TYPE,
        INUCOMPONENTETYPEID     MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUSTATUSID             MO_COMPONENT.MOTIVE_STATUS_ID%TYPE
    )   RETURN DAMO_COMPONENT.TYTBCOMPONENT_ID;


    















    FUNCTION FTBGETCOMPBYFATHER
    (   INUCOMPONENTID  MO_COMP_LINK.FATHER_COMPONENT_ID%TYPE
    )   RETURN DAMO_COMPONENT.TYTBCOMPONENT_ID ;

    















    FUNCTION FTBGETMAINCOMPONENT
    (   INUCOMPONENTID      MO_COMPONENT.COMPONENT_ID%TYPE
    )   RETURN DAPS_PROD_COMPOSITION.TYTBPS_PROD_COMPOSITION ;

    















    FUNCTION FTBGETCHILDDIRECTCOMP
    (INUCOMPONENTID      MO_COMPONENT.COMPONENT_ID%TYPE)
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT ;
    





















    PROCEDURE GETMOTIVESBYPRODUCTPROVISION
    (
        INUPRODUCTID    IN  PR_COMPONENT.PRODUCT_ID%TYPE,
        OTBMOTIVEID     OUT DAMO_COMPONENT.TYTBMOTIVE_ID
    );

    


















    PROCEDURE GETCHILDCOMPONENTS
    (
        INUCOMPONENTID  IN  MO_COMPONENT.COMPONENT_ID%TYPE,
        INUMOTIVEID     IN  MO_COMPONENT.MOTIVE_ID%TYPE,
        OTBCOMPONENTS   OUT DAMO_COMPONENT.TYTBCOMPONENT_ID
    );

    

















    FUNCTION FRCCOMPBYMOTIVETYPE
    (
        INUCOMPONENTID      IN      MO_COMPONENT.COMPONENT_ID_PROD%TYPE,
        INUMOTIVETYPEID     IN      MO_COMPONENT.MOTIVE_TYPE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.STYMO_COMPONENT;
    
    


















    FUNCTION FRCGETCOMPBYPRODCOMP
    (
        INUPRODCOMPID           IN  MO_COMPONENT.PRODUCT_ID%TYPE,
        INUPACKAGEID            IN  MO_COMPONENT.PACKAGE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.STYMO_COMPONENT;
    
    




















    FUNCTION FTBNOFATHERCOMPSBYPACK
    (
        INUPACKAGEID            IN  MO_COMPONENT.PACKAGE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;
    
    
















    FUNCTION FTBACTCOMPSBYPACK
    (
        INUPACKAGEID            IN  MO_COMPONENT.PACKAGE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;
    

    
    

    FUNCTION FTBCOMPBYPACKANDMOTYPES
    (
        INUPACKAGEID      IN      MO_PACKAGES.PACKAGE_ID%TYPE,
        ISBMOTIVETYPES    IN      VARCHAR2
    )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;
    
    


    FUNCTION FRCCOMPBYPRODCOMPMOTYP
    (
        INUPRODCOMPID   IN  MO_COMPONENT.COMPONENT_ID_PROD%TYPE,
        INUPACKAGEID    IN  MO_COMPONENT.PACKAGE_ID%TYPE,
        ISBMOTYPEIDS    IN  VARCHAR2
    )
    RETURN DAMO_COMPONENT.STYMO_COMPONENT;
    

    










    FUNCTION FRFTOINSTALLCOMPBYPRCOMP
    (
        INUPRODCOMPID   IN  MO_COMPONENT.COMPONENT_ID_PROD%TYPE
    )
    RETURN DAMO_COMPONENT.TYRFRECORDS;

    


    FUNCTION FTBGETCHILDCOMPONENT
    (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE
    ) RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;

    FUNCTION FTBGETREQUCOMPBYTYPE
    (
        INUPACKAGEID            IN      MO_PACKAGES.PACKAGE_ID%TYPE,
        ISBMOTIVETYPES          IN      VARCHAR2,
        INUCOMPONENTTYPEID      IN      PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE
    )
    RETURN DAMO_COMPONENT.TYTBMO_COMPONENT;


    








    PROCEDURE GETACTICOMPSBYPACK
    (
        INUPACKAGEID            IN  MO_COMPONENT.PACKAGE_ID%TYPE,
        INUMOTIVETYPEID         IN  MO_COMPONENT.MOTIVE_TYPE_ID%TYPE,
        INUCOMPONENTTYPEID      IN  MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCLASSSERVICEID       IN  MO_COMPONENT.CLASS_SERVICE_ID%TYPE DEFAULT NULL,
        OTBCOMPONENT            OUT NOCOPY DAMO_COMPONENT.TYTBMO_COMPONENT
    );


    














    FUNCTION FNUSUGGESTEDNUMBERACTIVE
    (
        ISBSUGGESTEDNUMBER IN MO_COMPONENT.SUGGESTED_NUMBER%TYPE
    )
    RETURN NUMBER;
END MO_BCCOMPONENT;