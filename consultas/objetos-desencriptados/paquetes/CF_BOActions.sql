PACKAGE BODY CF_BOActions
IS

    



























    
    
    
    
    CSBVERSION              CONSTANT VARCHAR2(20)   := 'SAO427773';

    
    CNUDEPARTMENTNULL       CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900181;
    
    
    CNUITEM_ERROR_DATE      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 3852;
    CNUITEM_NO_SELL_PROC    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 6263;
    CNUITEM_NO_OPER_UNIT    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 6703;
    CNUNULL_ATTRIBUTE       CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 119562;

    
    CNUSIMCARD              CONSTANT NUMBER := 116;
    
    CNUEQCH_MOTIVE_TYPE     CONSTANT NUMBER := 106;

    
    CSBCC_COMMERCIAL_PLAN   CONSTANT GE_BOINSTANCECONTROL.STYSBNAME  := 'CC_COMMERCIAL_PLAN';
    CSBINCLUDED_ID          CONSTANT GE_BOINSTANCECONTROL.STYSBNAME  := 'INCLUDED_ID';
    CSBCOMMERCIAL_PLAN_ID   CONSTANT GE_BOINSTANCECONTROL.STYSBNAME  := 'COMMERCIAL_PLAN_ID';
    CSBMO_PROCESS           CONSTANT GE_BOINSTANCECONTROL.STYSBNAME  := 'MO_PROCESS';
    CSBPROCESS_FEATURES     CONSTANT GE_BOINSTANCECONTROL.STYSBNAME  := 'PROCESS_FEATURES';
    CNURETIRECATEGORY       CONSTANT NUMBER := IM_BOCONSTANTS.CNUCATEGORYWITHDRAW;
    CSBTAGCESIONDERECHOS    CONSTANT GE_BOINSTANCECONTROL.STYSBNAME  := 'P_LBC_CESION_DE_DERECHOS_24';
    CSBPS_PACKAGE_TYPE      CONSTANT GE_BOINSTANCECONTROL.STYSBNAME  := 'PS_PACKAGE_TYPE';
    
    CSBTECH_SERV            CONSTANT PS_PACKAGE_TYPE.TAG_NAME%TYPE   := 'P_SERVICIO_TECNICO%';
    CSBTECH_SERV_EXTERN     CONSTANT PS_PACKAGE_TYPE.TAG_NAME%TYPE   := 'P_SOLICITUD_DE_SERVICIO_TECNICO_CLIENTES_EXTERNOS%';

    
    CNUACTIONATTENDPACK     CONSTANT NUMBER    := 65;
    
    
    CSBTAG_M_INSTALLATION   CONSTANT    PS_MOTIVE_TYPE.TAG_NAME%TYPE := 'MOTY_INSTALACION';
    
    
    NUERRORCODE             GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
    SBERRORMSG              GE_ERROR_LOG.DESCRIPTION%TYPE;
    
    TYPE TYTBCOMPONENTID IS TABLE OF MO_COMPONENT.COMPONENT_ID%TYPE INDEX BY BINARY_INTEGER;
    
    
    
    

    
    
    
    
    GNUTECHSERVPACKTYPE     PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    
    GNUEXTECHSERVPACKTYPE   PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;

    
    CURSOR CUCOMPONENTSBYPRODUCT
    (
        INUPRODUCTID    IN PR_COMPONENT.PRODUCT_ID%TYPE
    )
    IS
        SELECT A.*, A.ROWID
        FROM PR_COMPONENT A
        WHERE A.PRODUCT_ID  = INUPRODUCTID;

    TYPE TYTBCOMPONENTES IS TABLE OF CUCOMPONENTSBYPRODUCT%ROWTYPE;
    TBCOMPONENTES  TYTBCOMPONENTES;
    
    
    CURSOR CUGETELEMENTSFROMPACKAGE
        (
            INUID NUMBER,
            INUCATEGORYSERVICES GE_ELE_CATEGORY_TYPE.CATEGORY_ID%TYPE
        )
        IS
        SELECT
            DISTINCT A.*, A.ROWID
        FROM
            PR_NETWORK_ELEM_OPER A, MO_COMPONENT B, IF_ELEMENT_TYPE C, MO_MOTIVE D
        WHERE
            A.COMPONENT_ID = B.COMPONENT_ID_PROD
            AND A.ELEMENT_TYPE_ID = C.ELEMENT_TYPE_ID
            AND C.AUTOMATIC_ACTIVATION IN ('Y', 'D')
            AND A.CATEGORY_ID <> INUCATEGORYSERVICES
            AND B.MOTIVE_ID = D.MOTIVE_ID
            AND D.PACKAGE_ID = INUID
            AND EXISTS
            (
                SELECT 'X'
                FROM PS_MOTIVE_STATUS B
                WHERE B.MOTIVE_STATUS_ID = B.MOTIVE_STATUS_ID
                AND (B.IS_FINAL_STATUS = 'N' OR
                    (B.IS_FINAL_STATUS = 'Y' AND B.IS_ASSIGNED_STATUS = 'Y'))
            );
    
    CURSOR CUCOUNTSUBSRETIPROD
    (
        INUSUBSCRIBERID  IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS
    SELECT COUNT(A.PRODUCT_ID)
    FROM    PR_PRODUCT A, SUSCRIPC B
    WHERE   A.SUBSCRIPTION_ID = B.SUSCCODI
    AND     B.SUSCCLIE = INUSUBSCRIBERID
    AND     A.PRODUCT_STATUS_ID = PR_BOCONSTANTS.FNUGETACTIVERETIRE;
    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CF_BOACTIONS.CSBVERSION;
    END;
    

    





    PROCEDURE UPDSERIALITEM
    (
            INUIDITEMSERIE IN GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    );

    


















    PROCEDURE UPDSERIALITEM
    (
        INUIDITEMSERIE IN GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    IS

        RCITEM              DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
    BEGIN
        UT_TRACE.TRACE('Inicia UpdSerialItem', 5);

        UT_TRACE.TRACE('inuIdItemSerie'||INUIDITEMSERIE, 7);

        
        DAGE_ITEMS_SERIADO.GETRECORD(INUIDITEMSERIE, RCITEM);

        
        RCITEM.FECHA_GARANTIA := NULL;

        
        RCITEM.FECHA_SALIDA := NULL;

        
        RCITEM.OPERATING_UNIT_ID := NULL;

        
        RCITEM.ID_ITEMS_ESTADO_INV := GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE;

        
        DAGE_ITEMS_SERIADO.UPDRECORD(RCITEM);
        
        
        IF_BOPREVMAINTENANCE.UPDATESERIALITEM(RCITEM.ID_ITEMS_SERIADO, RCITEM.ITEMS_ID, NULL);

        UT_TRACE.TRACE('Finaliza UpdSerialItem',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDSERIALITEM;
    
    
    PROCEDURE   PROVISIONPRODUCTSNETWORK
    (
        INUPAQUETEID    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUCOMPONENTEID      MO_COMPONENT.COMPONENT_ID%TYPE;
        ONUELEREDOPER       PR_NETWORK_ELEM_OPER.NETWORK_ELEM_OPER_ID%TYPE;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        OTBELEMENTOS        IM_BCPROVISIONING.TYTBELEMENTPOSTASSIGN;
    BEGIN
        UT_TRACE.TRACE('Inicio CF_BOActions.ProvisionProductsNetwork Solicitud: ' || INUPAQUETEID,11);

        FOR  RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(INUPAQUETEID) LOOP

            UT_TRACE.TRACE('Motivo :'     || RCMOTIVE.MOTIVE_ID,7);

            IF (RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE) THEN

                
                NUCOMPONENTEID := MO_BCMOTIVE.FNUGETMAINCOMPONENTID(RCMOTIVE.MOTIVE_ID);

                UT_TRACE.TRACE('Componente :'   || NUCOMPONENTEID,7);

                
                IM_BOASSIGNNUMBER.GETASSIGNEDNETWORK(RCMOTIVE.SERVICE_NUMBER,OTBELEMENTOS);

                
                FOR INDX IN OTBELEMENTOS.FIRST .. OTBELEMENTOS.LAST LOOP

                    UT_TRACE.TRACE('Elemento :'     || OTBELEMENTOS(INDX).ELEMENT_ID,7);

                    CF_BOPROVISIONING.PROVELEMENTINDB
                            (
                            NUCOMPONENTEID,
                            OTBELEMENTOS(INDX).ELEMENT_TYPE_ID,
                            OTBELEMENTOS(INDX).ELEMENT_ID,
                            OTBELEMENTOS(INDX).ELEMENT_CODE,
                            IM_BOCONSTANTS.CNUCATEGORYINSTALL,
                            NULL,
                            ONUELEREDOPER
                            );
                END LOOP;

            END IF;

            OTBELEMENTOS.DELETE;
        END LOOP;

        UT_TRACE.TRACE('Finaliza CF_BOActions.ProvisionProductsNetwork' ,11);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END;
    

    PROCEDURE ATTENDPORTABILITY
    IS
        NUCOMPONENTEID      MO_COMPONENT.COMPONENT_ID%TYPE;
        NUMOTIVOID          MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPAQUETEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        TBCOMPONENTES       DAMO_COMPONENT.TYTBMO_COMPONENT;
        NUINDEXCOMP         BINARY_INTEGER;
        
        PROCEDURE ATTENDCOMPPORTABILITY
        (
            INUCOMPONENTEID      IN MO_COMPONENT.COMPONENT_ID%TYPE
        )
        IS
            RCCOMPONENTE        DAMO_COMPONENT.STYMO_COMPONENT;
            NUTIPOELEMENTOID    PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
            NUSUSCRIPTORID      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
            RCSUSCRIPTOR        DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        BEGIN
            
            RCCOMPONENTE:= DAMO_COMPONENT.FRCGETRECORD(INUCOMPONENTEID);

            
            IF NOT(RCCOMPONENTE.MOTIVE_STATUS_ID=MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP) THEN
                RETURN;
            END IF;

            
            NUTIPOELEMENTOID:= DAPS_COMPONENT_TYPE.FNUGETELEMENT_TYPE_ID(RCCOMPONENTE.COMPONENT_TYPE_ID);

            
            IF (NUTIPOELEMENTOID IS NOT NULL AND NUTIPOELEMENTOID = IF_BOCONSTANTS.CNUNUMBERELEMENT) THEN

                
                IF ( CC_BOEVENTPORTABILITY.FBLEXISTEVENTFORNUMBER(RCCOMPONENTE.SERVICE_NUMBER) ) THEN

                    
                    NUSUSCRIPTORID  := DAMO_PACKAGES.FNUGETSUBSCRIBER_ID(RCCOMPONENTE.PACKAGE_ID);
                    RCSUSCRIPTOR    := DAGE_SUBSCRIBER.FRCGETRECORD(NUSUSCRIPTORID);

                    
                    CC_BOEVENTPORTABILITY.TERMINATEEVENTPORTABILITY(RCSUSCRIPTOR.IDENT_TYPE_ID,RCSUSCRIPTOR.IDENTIFICATION,RCCOMPONENTE.SERVICE_NUMBER);
                END IF;
            END IF;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;
        
    BEGIN

        UT_TRACE.TRACE('Inicio CF_BOActions.AttendPortability',11);
        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_COMPONENT,
            MO_BOCONSTANTS.CSBCOMPONENT_ID,
            NUCOMPONENTEID
        );
        UT_TRACE.TRACE('C�digo del Componente Obtenido de la Instancia : ['||NUCOMPONENTEID||']', 2);
        IF NUCOMPONENTEID IS NOT NULL THEN
            ATTENDCOMPPORTABILITY(NUCOMPONENTEID);
            RETURN;
        END IF;

        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_MOTIVE,
            MO_BOCONSTANTS.CSBMOTIVE_ID,
            NUMOTIVOID
        );

        UT_TRACE.TRACE('C�digo del Motivo Obtenido de la Instancia : ['||NUMOTIVOID||']', 2);
        IF (NUMOTIVOID IS NOT NULL) THEN
            
            OPEN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(NUMOTIVOID);
            FETCH MO_BCCOMPONENT.CUCOMPONENTSBYMOT
                BULK COLLECT INTO TBCOMPONENTES;
            CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;
        ELSE
            GE_BOINSTANCE.GETVALUE
                (
                    MO_BOCONSTANTS.CSBMO_PACKAGES,
                    MO_BOCONSTANTS.CSBPACKAGE_ID,
                    NUPAQUETEID
                );
            UT_TRACE.TRACE('C�digo del Paquete Obtenido de la Instancia : ['||NUPAQUETEID||']', 2);

            IF NUPAQUETEID IS NULL THEN
                
                ERRORS.SETERROR(MO_BOCONSTERROR.CNUERRVALUESINSTNOEXIST);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

             
            OPEN MO_BCCOMPONENT.CUCOMPONENTSBYPACK(NUPAQUETEID);
            FETCH MO_BCCOMPONENT.CUCOMPONENTSBYPACK
                BULK COLLECT INTO TBCOMPONENTES;
            CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYPACK;

        END IF;

        NUINDEXCOMP:= TBCOMPONENTES.FIRST;

        WHILE (NUINDEXCOMP IS NOT NULL) LOOP
            
            IF (TBCOMPONENTES(NUINDEXCOMP).MOTIVE_STATUS_ID=MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP) THEN
                ATTENDCOMPPORTABILITY(TBCOMPONENTES(NUINDEXCOMP).COMPONENT_ID);
            END IF;
            NUINDEXCOMP:= TBCOMPONENTES.NEXT(NUINDEXCOMP);
        END LOOP;
        
        UT_TRACE.TRACE('Finaliza CF_BOActions.AttendPortability',11);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCCOMPONENT.CUCOMPONENTSBYMOT%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;
            END IF;
            IF (MO_BCCOMPONENT.CUCOMPONENTSBYPACK%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYPACK;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (MO_BCCOMPONENT.CUCOMPONENTSBYMOT%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;
            END IF;
            IF (MO_BCCOMPONENT.CUCOMPONENTSBYPACK%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYPACK;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE UPDINCLUDEDUNITSPACK
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        TBMOTIVES          DAMO_MOTIVE.TYTBMO_MOTIVE;
        NUMOTINDEX         NUMBER;
        
        PROCEDURE UPDUNITSPACK
        (
            INUMOTIVEID    IN      MO_MOTIVE.MOTIVE_ID%TYPE,
            INUPRODUCTID   IN      MO_MOTIVE.PRODUCT_ID%TYPE
        )
        IS
            NUPAUNINSE      LE_PAUNINSE.PUISCONS%TYPE;
            RCLEPAUNINSE    LE_PAUNINSE%ROWTYPE;

            CURSOR CUPAUNINSE
            (
                INUMOTIVEID   IN   MO_MOTIVE.MOTIVE_ID%TYPE
            )
            IS
                SELECT A.* FROM LE_PAUNINSE  A
                WHERE PUISNUSO = INUMOTIVEID
                AND   PUISSESU = -1;

        BEGIN
            UT_TRACE.TRACE('Inicia UpdUnitsPack ',5);

            OPEN CUPAUNINSE(INUMOTIVEID);
            FETCH CUPAUNINSE INTO RCLEPAUNINSE;
            CLOSE CUPAUNINSE;

            IF (RCLEPAUNINSE.PUISCONS IS NOT NULL)   THEN
                RCLEPAUNINSE.PUISSESU := INUPRODUCTID;
                PKTBLLE_PAUNINSE.UPRECORD(RCLEPAUNINSE);
            END IF;

            UT_TRACE.TRACE('Finaliza UpdUnitsPack ',5);

        EXCEPTION
    		  WHEN EX.CONTROLLED_ERROR THEN
                IF (CUPAUNINSE%ISOPEN) THEN
                    CLOSE CUPAUNINSE;
                END IF;
                RAISE EX.CONTROLLED_ERROR;
    		  WHEN OTHERS THEN
                IF (CUPAUNINSE%ISOPEN) THEN
                    CLOSE CUPAUNINSE;
                END IF;
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END UPDUNITSPACK;

    BEGIN
    
        UT_TRACE.TRACE('Inicia CF_BOActions.UpdIncludedUnitsPack',11);
        
        
        OPEN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(INUPACKAGEID);
        FETCH MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE BULK COLLECT INTO TBMOTIVES;
        CLOSE MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE;

        NUMOTINDEX := TBMOTIVES.FIRST;
        WHILE (NUMOTINDEX IS NOT NULL) LOOP

            
            UPDUNITSPACK(TBMOTIVES(NUMOTINDEX).MOTIVE_ID,TBMOTIVES(NUMOTINDEX).PRODUCT_ID);

            NUMOTINDEX := TBMOTIVES.NEXT(NUMOTINDEX);
        END LOOP;
        
        UT_TRACE.TRACE('Finaliza CF_BOActions.UpdIncludedUnitsPack',11);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

































    PROCEDURE UPDINVENTORY
    IS
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        NUMOTIVE            MO_MOTIVE.MOTIVE_ID%TYPE;
        NUACCOUNT           MO_MOTIVE_PAYMENT.ACCOUNT%TYPE;
        NUBALANCE           CUENCOBR.CUCOSACU%TYPE;
        TBCOMPONENTS        DAMO_COMPONENT.TYTBMO_COMPONENT;
        NUINDEXCOMP         BINARY_INTEGER;
        NUSERIALITEMID      GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;

        NUITEMDOCUMENTO     GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE;
        NUNEWITEMDOCUMENTO  GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE;

        TBITEMS             DAPS_CLASS_SERVICE.TYTBITEM_ID;
        NUCOMPSTATUS        PR_COMPONENT.COMPONENT_STATUS_ID%TYPE;

        CURSOR CUGETMOTIVES
        (
            INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
        )
        IS
        SELECT *
        FROM MO_MOTIVE
        WHERE PACKAGE_ID = INUPACKAGEID;

    BEGIN
        UT_TRACE.TRACE('Inicia el metodo CF_BOActions.UpdInventory',5);

        
        GE_BOINSTANCE.GETVALUE
            (
                MO_BOCONSTANTS.CSBMO_PACKAGES,
                MO_BOCONSTANTS.CSBPACKAGE_ID,
                NUPACKAGEID
            );

        IF NUPACKAGEID IS NULL THEN
            
            GE_BOINSTANCE.GETVALUE
            (
                MO_BOCONSTANTS.CSBMO_MOTIVE,
                MO_BOCONSTANTS.CSBMOTIVE_ID,
                NUMOTIVE
            );

            IF NUMOTIVE IS NULL THEN
                
                ERRORS.SETERROR(MO_BOCONSTERROR.CNUERRVALUESINSTNOEXIST);
                RAISE EX.CONTROLLED_ERROR;
            ELSE
                NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVE);
            END IF;
        END IF;

        FOR  RCMOTIVE IN CUGETMOTIVES(NUPACKAGEID) LOOP

            UT_TRACE.TRACE('Motivo :'     || RCMOTIVE.MOTIVE_ID,7);

            IF RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE OR RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUSERVADD_MOTIVE_TYPE
            OR RCMOTIVE.MOTIVE_TYPE_ID = CNUEQCH_MOTIVE_TYPE THEN

                TBCOMPONENTS.DELETE;
                
                OPEN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(RCMOTIVE.MOTIVE_ID);
                FETCH MO_BCCOMPONENT.CUCOMPONENTSBYMOT BULK COLLECT INTO TBCOMPONENTS;
                CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;

                NUINDEXCOMP:= TBCOMPONENTS.FIRST;
                WHILE  NUINDEXCOMP IS NOT NULL LOOP
                    
                        UT_TRACE.TRACE('Componente '||TBCOMPONENTS(NUINDEXCOMP).COMPONENT_ID||' Clase '||TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID||' Estado '||TBCOMPONENTS(NUINDEXCOMP).MOTIVE_STATUS_ID,10);
                    IF  (TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID IS NOT NULL) THEN
                        
                        IF (NOT TBITEMS.EXISTS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID)) THEN
                            TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) := DAPS_CLASS_SERVICE.FNUGETITEM_ID(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID);
                        END IF;

                        IF (TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) IS NOT NULL) THEN
                            UT_TRACE.TRACE('Item '||TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID),12);

                            
                            GE_BCITEMSSERIADO.GETIDBYSERIE(TBCOMPONENTS(NUINDEXCOMP).SERVICE_NUMBER, NUSERIALITEMID);

                            IF (NUSERIALITEMID IS NOT NULL) THEN

                                
                                GE_BOITEMSSERIADO.MOVITEMBYSELL
                                (
                                    NUSERIALITEMID,
                                    NULL,
                                    TBCOMPONENTS(NUINDEXCOMP).RECORDING_DATE,
                                    TBCOMPONENTS(NUINDEXCOMP).PACKAGE_ID,
                                    'C',
                                    TBCOMPONENTS(NUINDEXCOMP).PACKAGE_ID
                                );

                            END IF;
                        END IF;
                    END IF;

                    NUINDEXCOMP:= TBCOMPONENTS.NEXT(NUINDEXCOMP);
                END LOOP;
            END IF;
        END LOOP;
        UT_TRACE.TRACE('Inicia el metodo CF_BOActions.UpdInventory',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
            RAISE_APPLICATION_ERROR(WF_BOCONSTANTS.CNUGENAPPERROR,NUERRORCODE||'-'||SBERRORMSG);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
            RAISE_APPLICATION_ERROR(WF_BOCONSTANTS.CNUGENAPPERROR,NUERRORCODE||'-'||SBERRORMSG);
    END UPDINVENTORY;

    FUNCTION PROCESSPACKINCLUDED
    (
        INUCOMMPLANID   IN   CC_COMMERCIAL_PLAN.COMMERCIAL_PLAN_ID%TYPE
    )RETURN VARCHAR2
    IS
        SBPROCESSFEAT   GE_BOINSTANCECONTROL.STYSBVALUE;
        NUINCLUDEDID    GE_BOINSTANCECONTROL.STYSBVALUE;
        SBINSTANCE      GE_BOINSTANCECONTROL.STYSBNAME;
        SBGROUP         GE_BOINSTANCECONTROL.STYSBNAME;
        NUATTRIBUTE     GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        UT_TRACE.TRACE('Inicio CF_BOActions.ProcessPackIncluded' ,11);
        
        SBPROCESSFEAT := GE_BOCONSTANTS.CSBNO;

        
        IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,INUCOMMPLANID,CF_BOACTIONS.CSBCC_COMMERCIAL_PLAN,CF_BOACTIONS.CSBINCLUDED_ID,NUATTRIBUTE)) THEN
            GE_BOINSTANCECONTROL.DESTROYENTITY (MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,INUCOMMPLANID,CF_BOACTIONS.CSBCC_COMMERCIAL_PLAN);
            SBPROCESSFEAT := GE_BOCONSTANTS.CSBYES;
        END IF;

        
        FOR RCINCLUDED IN CC_BCINCLUDED.CUREQINCLUDEDPLAN(INUCOMMPLANID) LOOP
            SBGROUP := INUCOMMPLANID;
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,SBGROUP,CF_BOACTIONS.CSBCC_COMMERCIAL_PLAN,CF_BOACTIONS.CSBCOMMERCIAL_PLAN_ID,INUCOMMPLANID,TRUE);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,SBGROUP,CF_BOACTIONS.CSBCC_COMMERCIAL_PLAN,CF_BOACTIONS.CSBINCLUDED_ID,RCINCLUDED.INCLUDED_ID,TRUE);
            SBPROCESSFEAT := GE_BOCONSTANTS.CSBYES;
        END LOOP;

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTANCE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBINSTANCE,NULL,CF_BOACTIONS.CSBMO_PROCESS,CF_BOACTIONS.CSBPROCESS_FEATURES,SBPROCESSFEAT, TRUE);

        UT_TRACE.TRACE('Finaliza CF_BOActions.ProcessPackIncluded' ,11);
        RETURN SBPROCESSFEAT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CC_BCINCLUDED.CUREQINCLUDEDPLAN%ISOPEN) THEN
                CLOSE CC_BCINCLUDED.CUREQINCLUDEDPLAN;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CC_BCINCLUDED.CUREQINCLUDEDPLAN%ISOPEN) THEN
                CLOSE CC_BCINCLUDED.CUREQINCLUDEDPLAN;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

    






























  PROCEDURE UPDLOWINVENTORY
    IS
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        TBCOMPONENTS        DAMO_COMPONENT.TYTBMO_COMPONENT;
        NUINDEXCOMP         BINARY_INTEGER;
        NUSERIALITEMID      GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        TBITEMS             DAPS_CLASS_SERVICE.TYTBITEM_ID;
        NUERRORCODE         GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBERRORMESSAGE      GE_ERROR_LOG.DESCRIPTION%TYPE;
        NUMOTIVE            MO_MOTIVE.MOTIVE_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia el metodo CF_BOActions.UpdLowInventory',5);

        
        GE_BOINSTANCE.GETVALUE
            (
                MO_BOCONSTANTS.CSBMO_PACKAGES,
                MO_BOCONSTANTS.CSBPACKAGE_ID,
                NUPACKAGEID
            );

        IF NUPACKAGEID IS NULL THEN
            
            GE_BOINSTANCE.GETVALUE
            (
                MO_BOCONSTANTS.CSBMO_MOTIVE,
                MO_BOCONSTANTS.CSBMOTIVE_ID,
                NUMOTIVE
            );

            IF NUMOTIVE IS NULL THEN
                
                ERRORS.SETERROR(MO_BOCONSTERROR.CNUERRVALUESINSTNOEXIST);
                RAISE EX.CONTROLLED_ERROR;
            ELSE
                NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVE);
            END IF;
        ELSE
            NUMOTIVE := MO_BOPACKAGES.FNUGETINITIALMOTIVE(NUPACKAGEID);
        END IF;

        TBCOMPONENTS.DELETE;

        
        OPEN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(NUMOTIVE);
        FETCH MO_BCCOMPONENT.CUCOMPONENTSBYMOT BULK COLLECT INTO TBCOMPONENTS;
        CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;

        NUINDEXCOMP:= TBCOMPONENTS.FIRST;

        WHILE  NUINDEXCOMP IS NOT NULL LOOP
        
            UT_TRACE.TRACE('Componente '||TBCOMPONENTS(NUINDEXCOMP).COMPONENT_ID||' Clase '||TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID,10);
            IF (TBCOMPONENTS(NUINDEXCOMP).COMPONENT_TYPE_ID IN (CF_BOCONSTANTS.FNUGETEQUIPOCOMPTYPE,CF_BOACTIONS.CNUSIMCARD))
            THEN
                
                IF (NOT TBITEMS.EXISTS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID)) THEN
                    TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) := DAPS_CLASS_SERVICE.FNUGETITEM_ID(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID);
                END IF;

                IF (TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) IS NOT NULL) THEN
                    UT_TRACE.TRACE('Item '||TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID),7);

                    
                    GE_BCITEMSSERIADO.GETIDBYSERIE(DAPR_COMPONENT.FSBGETSERVICE_NUMBER(TBCOMPONENTS(NUINDEXCOMP).COMPONENT_ID_PROD), NUSERIALITEMID);
                    UT_TRACE.TRACE('Serial Item['||NUSERIALITEMID||']',7);

                    IF (NUSERIALITEMID IS NOT NULL) THEN

                        IF (DAGE_ITEMS_SERIADO.FNUGETID_ITEMS_ESTADO_INV(NUSERIALITEMID)=5) THEN
                            UPDSERIALITEM(NUSERIALITEMID);
                        END IF;

                    END IF;
                END IF;
            END IF;
           NUINDEXCOMP:= TBCOMPONENTS.NEXT(NUINDEXCOMP);
       END LOOP;

       UT_TRACE.TRACE('Finaliza el metodo CF_BOActions.UpdLowInventory',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
                   ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
            RAISE_APPLICATION_ERROR(WF_BOCONSTANTS.CNUGENAPPERROR,NUERRORCODE||'-'||SBERRORMSG);
               WHEN OTHERS THEN
            ERRORS.SETERROR;
                   ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
            RAISE_APPLICATION_ERROR(WF_BOCONSTANTS.CNUGENAPPERROR,NUERRORCODE||'-'||SBERRORMSG);
    END UPDLOWINVENTORY;


    

















    PROCEDURE UPDLOWINVENTORYBYCOMPONENTTYPE
    (
        INUMOTIVE            MO_MOTIVE.MOTIVE_ID%TYPE,
        INUCOMPONENTTYPEID MO_COMPONENT.COMPONENT_TYPE_ID%TYPE
    )
    IS
        TBCOMPONENTS        DAMO_COMPONENT.TYTBMO_COMPONENT;
        NUINDEXCOMP         BINARY_INTEGER;
        NUSERIALITEMID      GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        TBITEMS             DAPS_CLASS_SERVICE.TYTBITEM_ID;
        NUERRORCODE         GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBERRORMESSAGE      GE_ERROR_LOG.DESCRIPTION%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia el metodo CF_BOActions.UpdLowInventoryByComponentType',5);

        TBCOMPONENTS.DELETE;

        
        OPEN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(INUMOTIVE);
        FETCH MO_BCCOMPONENT.CUCOMPONENTSBYMOT BULK COLLECT INTO TBCOMPONENTS;
        CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;

        NUINDEXCOMP:= TBCOMPONENTS.FIRST;

        WHILE  NUINDEXCOMP IS NOT NULL LOOP
        
            UT_TRACE.TRACE('Componente '||TBCOMPONENTS(NUINDEXCOMP).COMPONENT_ID||' Clase '||TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID,10);
            IF (TBCOMPONENTS(NUINDEXCOMP).COMPONENT_TYPE_ID = INUCOMPONENTTYPEID)
            THEN
                
                IF (NOT TBITEMS.EXISTS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID)) THEN
                    TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) := DAPS_CLASS_SERVICE.FNUGETITEM_ID(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID);
                END IF;

                IF (TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) IS NOT NULL) THEN
                    UT_TRACE.TRACE('Item '||TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID),7);

                    
                    GE_BCITEMSSERIADO.GETIDBYSERIE(DAPR_COMPONENT.FSBGETSERVICE_NUMBER(TBCOMPONENTS(NUINDEXCOMP).COMPONENT_ID_PROD), NUSERIALITEMID);
                    UT_TRACE.TRACE('Serial Item['||NUSERIALITEMID||']',7);

                    IF (NUSERIALITEMID IS NOT NULL) THEN

                        IF (DAGE_ITEMS_SERIADO.FNUGETID_ITEMS_ESTADO_INV(NUSERIALITEMID)=5) THEN
                            UPDSERIALITEM(NUSERIALITEMID);
                        END IF;

                    END IF;
                END IF;
            END IF;
            NUINDEXCOMP:= TBCOMPONENTS.NEXT(NUINDEXCOMP);
       END LOOP;

       UT_TRACE.TRACE('Finaliza el metodo CF_BOActions.UpdLowInventoryByComponentType',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
                   ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
            RAISE_APPLICATION_ERROR(WF_BOCONSTANTS.CNUGENAPPERROR,NUERRORCODE||'-'||SBERRORMSG);
               WHEN OTHERS THEN
            ERRORS.SETERROR;
                   ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
            RAISE_APPLICATION_ERROR(WF_BOCONSTANTS.CNUGENAPPERROR,NUERRORCODE||'-'||SBERRORMSG);
    END UPDLOWINVENTORYBYCOMPONENTTYPE;



    





























    PROCEDURE CHANGEPRODUCTADDRESS
    IS
        NUOLDADDRESSID          PR_PRODUCT.ADDRESS_ID%TYPE;
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUNEWADDRESSID          AB_ADDRESS.ADDRESS_ID%TYPE;
        NUPRODUCTID             PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        RCADDRESS               DAAB_ADDRESS.STYAB_ADDRESS;
        NUCUSTCAREREQUESTNUM    MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE;
        NUINDEX                 NUMBER := 1;
        NUADDRESS               AB_ADDRESS.ADDRESS%TYPE;
        DTSYSDATE               DATE := SYSDATE;
        ONUERRORCODE            GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        OSBERRORMESSAGE         GE_ERROR_LOG.DESCRIPTION%TYPE;
        RCSERVSUSC              SERVSUSC%ROWTYPE;
        RCPR_PRODUCT_REQUEST    DAPR_PRODUCT_REQUEST.STYPR_PRODUCT_REQUEST;
        NUDEPA                  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        RCMO_BILL_DATA_CHANGE   MO_BILL_DATA_CHANGE%ROWTYPE;

        CURSOR  CUPRCOMPONENT
            (
                NUPRODID IN NUMBER
            ) IS
            SELECT      *
            FROM        PR_COMPONENT
            WHERE       PRODUCT_ID = NUPRODID
            AND         COMPONENT_STATUS_ID = 5;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.ChangeProductAddress',10);

        
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
            );
        
        UT_TRACE.TRACE('Identificador de la solicitud: '||NUPACKAGEID,10);

         
        NUPRODUCTID := MO_BOPACKAGES.FNUFINDPRODUCTID(NUPACKAGEID);
        UT_TRACE.TRACE('Identificador del Producto: '||NUPRODUCTID,10);

        
        NUMOTIVEID := MO_BOPACKAGES.FNUGETFIRSTMOTIVE(NUPACKAGEID);
        UT_TRACE.TRACE('Identificador del Motivo: '||NUMOTIVEID,10);

        
        MO_BCBILL_DATA_CHANGE.GETRECORDBYPACKID(NUPACKAGEID,RCMO_BILL_DATA_CHANGE);
        
        NUNEWADDRESSID  := RCMO_BILL_DATA_CHANGE.NEW_COLL_ADDRESS_ID;

        UT_TRACE.TRACE('Identificador de la nueva direcci�n: '||NUNEWADDRESSID,10);
        
        NUADDRESS := DAAB_ADDRESS.FSBGETADDRESS(NUNEWADDRESSID);
        
        UT_TRACE.TRACE('Nueva direcci�n: '||NVL( NUADDRESS,'No se encontro direcci�n nueva'),10);

        
        NUOLDADDRESSID := PR_BCPRODUCT.FNUGETADDRESSID( NUPRODUCTID) ;
        UT_TRACE.TRACE('nuProductId['||NUPRODUCTID||'] nuOldAddressId['|| NUOLDADDRESSID||'] Nueva['||NUNEWADDRESSID ||']',3);

        
        DAPR_PRODUCT.UPDADDRESS_ID(NUPRODUCTID,NUNEWADDRESSID);

        
    	FOR RC IN CUPRCOMPONENT (NUPRODUCTID) LOOP
            UT_TRACE.TRACE('Componente a Actualizar:['||RC.COMPONENT_ID||']',5);
            DAPR_COMPONENT.UPDADDRESS_ID(RC.COMPONENT_ID,NUNEWADDRESSID);
            DAPR_COMPONENT.UPDLAST_UPD_DATE(RC.COMPONENT_ID,DTSYSDATE);
    	END LOOP;

        
        RCADDRESS := DAAB_ADDRESS.FRCGETRECORD(NUNEWADDRESSID);
        UT_TRACE.TRACE('Ubicaci�n:['||RCADDRESS.GEOGRAP_LOCATION_ID||']Barrio:['||RCADDRESS.NEIGHBORTHOOD_ID||']',11);

        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD(NUPRODUCTID);
        RCSERVSUSC.SESULOCA := RCADDRESS.GEOGRAP_LOCATION_ID;

        
        NUDEPA := GE_BCGEOGRA_LOCATION.FNUGETDEPARTMENT(RCADDRESS.GEOGRAP_LOCATION_ID);
        
        
        IF NUDEPA IS NULL THEN
            
            GE_BOERRORS.SETERRORCODEARGUMENT
            (
                CNUDEPARTMENTNULL,
                DAGE_GEOGRA_LOCATION.FSBGETDESCRIPTION(RCADDRESS.GEOGRAP_LOCATION_ID)
            );
        END IF;

        RCSERVSUSC.SESUDEPA := NUDEPA;
        PKTBLSERVSUSC.UPRECORD(RCSERVSUSC);
        
        
        NUCUSTCAREREQUESTNUM := DAMO_PACKAGES.FSBGETCUST_CARE_REQUES_NUM(NUPACKAGEID);
    	RCPR_PRODUCT_REQUEST.PRODUCT_REQUEST_ID := PR_BOSEQUENCE.GETPRODUCTREQUESTID;
		RCPR_PRODUCT_REQUEST.STATUS_ID := 11;
		RCPR_PRODUCT_REQUEST.ATTENDANCE_DATE:=  DTSYSDATE;
		RCPR_PRODUCT_REQUEST.PRODUCT_ID:= NUPRODUCTID;
		RCPR_PRODUCT_REQUEST.PACKAGE_ID:= NUPACKAGEID;
		RCPR_PRODUCT_REQUEST.MOTIVE_ID:= NUMOTIVEID;
		RCPR_PRODUCT_REQUEST.MOTIVE_TYPE_ID:= 14;
		RCPR_PRODUCT_REQUEST.CUST_CARE_REQUES_NUM:=NUCUSTCAREREQUESTNUM;
        DAPR_PRODUCT_REQUEST.INSRECORD(RCPR_PRODUCT_REQUEST);

        UT_TRACE.TRACE('Finaliza CF_BOActions.ChangeProductAddress' ,11);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END ;


    PROCEDURE  RELEASEPORTNUMBER
    IS
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        NUMOTIVE            MO_MOTIVE.MOTIVE_ID%TYPE;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        SBSERVICENUMBER     PR_PRODUCT.SERVICE_NUMBER%TYPE;
        NUNUMBERID          IF_ASSIGNABLE.ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.ReleasePortNumber',9);

        
        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
        );
        UT_TRACE.TRACE('C�digo del Paquete Obtenido de la Instancia : ['||NUPACKAGEID||']', 2);

        
        NUMOTIVE := MO_BOPACKAGES.FNUGETINITIALMOTIVE(NUPACKAGEID);
        
        DAMO_MOTIVE.GETRECORD(NUMOTIVE,RCMOTIVE);
        
        SBSERVICENUMBER := DAPR_PRODUCT.FSBGETSERVICE_NUMBER(RCMOTIVE.PRODUCT_ID);

        NUNUMBERID := IF_BOASSIGNABLE.FNUGETIDFROMCODE(36,SBSERVICENUMBER);

        IF (NUNUMBERID IS NULL) THEN
            
            CC_BOEVENTPORTABILITY.REGISTEREVENTPORTABILITY(-1,-1,SBSERVICENUMBER,'F');
            
            CC_BOEVENTPORTABILITY.UPDSTATUS(-1,-1,SBSERVICENUMBER);
            
            CC_BOEVENTPORTABILITY.TERMINATEEVENTPORTABILITY(-1,-1,SBSERVICENUMBER,NUMOTIVE);
        END IF;

       UT_TRACE.TRACE('Termina CF_BOActions.ReleasePortNumber',9);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;

    END RELEASEPORTNUMBER;

    


















    PROCEDURE  RETIRENUMBERBYPORTABILITY
    IS
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.RetireNumberByPortability',9);

        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_MOTIVE,
            MO_BOCONSTANTS.CSBMOTIVE_ID,
            NUMOTIVEID
            );
        
        UT_TRACE.TRACE('C�digo del Motivo Obtenido de la Instancia : ['||NUMOTIVEID||']', 2);
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(NUMOTIVEID);

        
        IM_BONUMBERMANAGAMENT.RELEASENUMBER(NUMOTIVEID);

        IF ( CC_BOEVENTPORTABILITY.FBLEXISTEVENTFORNUMBER(RCMOTIVE.SERVICE_NUMBER) ) THEN
            CC_BOEVENTPORTABILITY.TERMINATEEVENTPORTABILITY(-1,-1,RCMOTIVE.SERVICE_NUMBER,NUMOTIVEID);
        END IF;

       UT_TRACE.TRACE('Termina CF_BOActions.RetireNumberByPortability',9);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;

    END;

 
























    FUNCTION FBOVALBUNDLEREQUEST
    (
        INUPACKAGEID    IN    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN BOOLEAN
    IS

        
        NOACTIVATE        BOOLEAN;

        
        TBACTIVEMOTIVE    DAMO_MOTIVE.TYTBMO_MOTIVE;

        
        NUINDEX           NUMBER;

        PROCEDURE CLOSECURSOR
        IS
        BEGIN
            IF (MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE;
            END IF;
        END;

    BEGIN

        UT_TRACE.TRACE('Inicia CF_BOActions.fboValBundleRequest Solicitud['||INUPACKAGEID||']',12);

        
        NOACTIVATE:= TRUE;

        
        CLOSECURSOR;

        
        OPEN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE (INUPACKAGEID);
        FETCH MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE BULK COLLECT INTO TBACTIVEMOTIVE;
        CLOSE MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE;

        
        NUINDEX:= TBACTIVEMOTIVE.FIRST;

        
        WHILE (NUINDEX IS NOT NULL) LOOP

            
            IF (TBACTIVEMOTIVE(NUINDEX).MOTIVE_TYPE_ID IN (PS_BOMOTIVETYPE.FNUBUNDLED_MOTI_TYPE))
                
            THEN
                
                NOACTIVATE:= FALSE;

            ELSE

                
                NOACTIVATE:= TRUE;

                UT_TRACE.TRACE('Termina CF_BOActions.fboValBundleRequest',12);
                
                RETURN NOACTIVATE;

            END IF;

            
            NUINDEX:= TBACTIVEMOTIVE.NEXT(NUINDEX);

        END LOOP;

        UT_TRACE.TRACE('Termina CF_BOActions.fboValBundleRequest',12);
        
        RETURN NOACTIVATE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE REQUESTFLOWACTIVATE
    (
        INUIDSOLICITUD    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        RCPEDIDO                DAMO_PACKAGES_ASSO.STYMO_PACKAGES_ASSO;
        TBSOLICITUDESPORPEDIDO  DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUESTADOSOL             PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
        CNUIDACCESPERAPED       CONSTANT NUMBER  := 8018;

        
        CURSOR CUSOLASOBYSOL
            (
            INUIDSOLICITUD    IN      MO_PACKAGES_ASSO.PACKAGE_ID%TYPE
            )
        IS
             SELECT A.*, A.ROWID
             FROM MO_PACKAGES_ASSO A
             WHERE A.PACKAGE_ID = INUIDSOLICITUD;

        PROCEDURE CLOSECURSOR
        IS
        BEGIN
            IF (CUSOLASOBYSOL%ISOPEN) THEN
                CLOSE CUSOLASOBYSOL;
            END IF;
        END;

    BEGIN

        UT_TRACE.TRACE('Inicia CF_BOActions.RequestFlowActivate',10);

        
        OPEN CUSOLASOBYSOL(INUIDSOLICITUD);
        FETCH CUSOLASOBYSOL INTO RCPEDIDO;
        CLOSE CUSOLASOBYSOL;

        IF(RCPEDIDO.PACKAGE_ID_ASSO IS NOT NULL) THEN
        
            MO_BOACTION.ACTIVATEPACKAGEFLOW
            (
                RCPEDIDO.PACKAGE_ID_ASSO
            );
        
        END IF;

        UT_TRACE.TRACE('Finaliza CF_BOActions.RequestFlowActivate',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    


























    PROCEDURE REGISTERFATHERREQUEST
    IS
        NUIDSOLICITUDPEDIDO      NUMBER;
        TBASOSOLICITUDES         DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUINDICESOLI             BINARY_INTEGER;
        RCSOLICITUD              DAMO_PACKAGES.STYMO_PACKAGES;
   BEGIN

        UT_TRACE.TRACE('Inicializa CF_BOActions.RegisterFatherRequest',10);

        
        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUIDSOLICITUDPEDIDO
        );

        
        MO_BOACTIONCREATEPLANWF.PROCESSACTION();

        
        TBASOSOLICITUDES := MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO(NUIDSOLICITUDPEDIDO);

        
        NUINDICESOLI := TBASOSOLICITUDES.FIRST;
        WHILE (NUINDICESOLI IS NOT NULL) LOOP
            
            RCSOLICITUD := DAMO_PACKAGES.FRCGETRECORD(TBASOSOLICITUDES(NUINDICESOLI).PACKAGE_ID);

            
            
            
            IF  (RCSOLICITUD.PACKAGE_TYPE_ID =  MO_BOUTILGENERATEREQUEST.FNURETIRE_TYPE) THEN
                
                
                MO_BOEXECUTOR_LOG_MOT.INSERTRECORD(RCSOLICITUD.PACKAGE_ID,NULL,MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN);
            END IF;

            NUINDICESOLI := TBASOSOLICITUDES.NEXT(NUINDICESOLI);
        END LOOP;

        UT_TRACE.TRACE('Finaliza CF_BOActions.RegisterFatherRequest',10);
   EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    



























  PROCEDURE GENERATEORDERFLOW
    IS
        NUIDSOLICITUD        MO_PACKAGES.PACKAGE_ID%TYPE;
        NUINDICE             BINARY_INTEGER;
        TBASOSOLICITUDES     DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        RCSOLICITUD          DAMO_PACKAGES.STYMO_PACKAGES;
        TBPACKAGEMOTIVES     DAMO_MOTIVE.TYTBMO_MOTIVE;
        NUMOTINDICE          BINARY_INTEGER;
   BEGIN

        UT_TRACE.TRACE('Inicializa CF_BOActions.GenerateOrderFlow',10);

        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUIDSOLICITUD
            );

        
        TBASOSOLICITUDES:= MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO(NUIDSOLICITUD);

        
        NUINDICE:=TBASOSOLICITUDES.FIRST;

        WHILE (NUINDICE IS NOT NULL) LOOP
            RCSOLICITUD:= DAMO_PACKAGES.FRCGETRECORD(TBASOSOLICITUDES(NUINDICE).PACKAGE_ID);

            IF (RCSOLICITUD.PACKAGE_TYPE_ID !=MO_BOUTILGENERATEREQUEST.FNURETIRE_TYPE) THEN
                IF (RCSOLICITUD.PACKAGE_TYPE_ID IN
                        (
                        MO_BOUTILGENERATEREQUEST.FNUSALE_TYPE,
                        
                        MO_BOUTILGENERATEREQUEST.FNUINCLUNIT_TYPE
                        )
                   ) THEN
                    
                    MO_BOEXECUTOR_LOG_MOT.INSERTRECORD(RCSOLICITUD.PACKAGE_ID,NULL,MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN);
                ELSE
                    
                    TBPACKAGEMOTIVES:= MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(RCSOLICITUD.PACKAGE_ID);
                    NUMOTINDICE:=TBPACKAGEMOTIVES.FIRST;

                    WHILE (NUMOTINDICE IS NOT NULL) LOOP
                        
                        
                       IF (PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_DESEMPAQUETA_COMPONENTE') != DAMO_MOTIVE.FNUGETPRODUCT_MOTIVE_ID(TBPACKAGEMOTIVES(NUMOTINDICE).MOTIVE_ID)
                          AND PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_EMPAQUETA_COMPONENTE') != DAMO_MOTIVE.FNUGETPRODUCT_MOTIVE_ID(TBPACKAGEMOTIVES(NUMOTINDICE).MOTIVE_ID)
                          AND PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_EMPAQUETA_PRODUCTO') != DAMO_MOTIVE.FNUGETPRODUCT_MOTIVE_ID(TBPACKAGEMOTIVES(NUMOTINDICE).MOTIVE_ID)
                          AND PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_DESEMPAQUETA_PRODUCTO') != DAMO_MOTIVE.FNUGETPRODUCT_MOTIVE_ID(TBPACKAGEMOTIVES(NUMOTINDICE).MOTIVE_ID)
                          )
                        THEN
                          MO_BOEXECUTOR_LOG_MOT.INSERTRECORD(RCSOLICITUD.PACKAGE_ID,TBPACKAGEMOTIVES(NUMOTINDICE).MOTIVE_ID,MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN);
                       END IF;

                       NUMOTINDICE := TBPACKAGEMOTIVES.NEXT(NUMOTINDICE);
                    END LOOP;
                END IF;
            END IF;
            NUINDICE := TBASOSOLICITUDES.NEXT(NUINDICE);
        END LOOP;

        UT_TRACE.TRACE('Finaliza CF_BOActions.GenerateOrderFlow',10);
   EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ;

    


















    PROCEDURE CREATEREQUESTCOMPONENT
    IS
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPARENTCOMPOPRODID PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        NUPRODUCTID         MO_COMPONENT.PRODUCT_ID%TYPE;
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
        TBCOMPONENT         TYTBCOMPONENTID;
        TBPACKASSO          DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        BIINDEXCOMP         BINARY_INTEGER := 1;
        NUINDEXPACK         BINARY_INTEGER;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.CreateRequestComponent',9);

        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
            );
        
        UT_TRACE.TRACE('C�digo del Pedido Obtenido de la Instancia : ['||NUPACKAGEID||']', 2);

        
        TBPACKASSO:= MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO(NUPACKAGEID);

        NUINDEXPACK := TBPACKASSO.FIRST;
        WHILE (NUINDEXPACK IS NOT NULL) LOOP
            UT_TRACE.TRACE('C�digo de la Solicitud : ['||TBPACKASSO(NUINDEXPACK).PACKAGE_ID||']', 2);
            
            FOR  RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(TBPACKASSO(NUINDEXPACK).PACKAGE_ID) LOOP
                UT_TRACE.TRACE('C�digo del Motivo: ['||RCMOTIVE.MOTIVE_ID||']', 2);
                
                FOR REC IN MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT(RCMOTIVE.MOTIVE_ID) LOOP
                    TBCOMPONENT(BIINDEXCOMP) := REC.COMPONENT_ID;
                    BIINDEXCOMP := BIINDEXCOMP + 1;
                END LOOP;
                NUPRODUCTID := RCMOTIVE.PRODUCT_ID;
                UT_TRACE.TRACE('Id. de Producto: ['||NUPRODUCTID||']', 2);
                
                BIINDEXCOMP := TBCOMPONENT.FIRST;
                WHILE BIINDEXCOMP <= TBCOMPONENT.LAST LOOP
                    RCCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(TBCOMPONENT(BIINDEXCOMP));
                    
                    PR_BOCREATIONCOMPONENT.INITIALCREATIONCOMPONENTIND( NUPRODUCTID,
                                                                        NULL,
                                                                        SYSDATE,
                                                                        RCCOMPONENT,
                                                                        PR_BOCREATIONCOMPONENT.CNUCOMPSTATINSTALLATIONPEND,
                                                                        NUCOMPONENTPRODID,
                                                                        NUPARENTCOMPOPRODID
                                                                       );
                     BIINDEXCOMP := TBCOMPONENT.NEXT(BIINDEXCOMP);
                END LOOP;
                TBCOMPONENT.DELETE;
                BIINDEXCOMP := 1;
            END LOOP;
            NUINDEXPACK := TBPACKASSO.NEXT(NUINDEXPACK);
        END LOOP;
        UT_TRACE.TRACE('Finaliza CF_BOActions.CreateRequestComponent',9);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END;
    

    PROCEDURE  UPDATECATPRODNETFORRETIRE
    IS
        NUPAQUETEID     MO_PACKAGES.PACKAGE_ID%TYPE;
        NUPRODUCTID     PR_PRODUCT.PRODUCT_ID%TYPE;
        NUMAINCOMPID    PR_COMPONENT.COMPONENT_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicio CF_BOActions.UpdateCatProdNetForRetire',11);

        GE_BOINSTANCE.GETVALUE
            (
                MO_BOCONSTANTS.CSBMO_PACKAGES,
                MO_BOCONSTANTS.CSBPACKAGE_ID,
                NUPAQUETEID
            );
        UT_TRACE.TRACE('C�digo del Paquete Obtenido de la Instancia : ['||NUPAQUETEID||']', 2);

        IF (NUPAQUETEID IS NULL) THEN
            
            ERRORS.SETERROR(MO_BOCONSTERROR.CNUERRVALUESINSTNOEXIST);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        NUPRODUCTID := MO_BOPACKAGES.FNUFINDPRODUCTID(NUPAQUETEID);

        
        NUMAINCOMPID :=PR_BCPRODUCT.FNUGETMAINCOMPONENTID(NUPRODUCTID);

        
        FOR RC IN PR_BCNETWORK_ELEM_OPER.CUDATAELEMENTSBYCOMP(NUMAINCOMPID) LOOP
            DAPR_NETWORK_ELEM_OPER.UPDCATEGORY_ID(RC.NETWORK_ELEM_OPER_ID,IM_BOCONSTANTS.CNUCATEGORYWITHDRAW);
        END LOOP;

        UT_TRACE.TRACE('Finaliza CF_BOActions.UpdateCatProdNetForRetire',11);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END;
    

	PROCEDURE CYCLECHANGEATTENTION
    IS
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        NUNEWCYCLE          MO_BILL_DATA_CHANGE.NEW_BILLING_CYCLE_ID%TYPE;
        NUSUBSCRIPTION      MO_BILL_DATA_CHANGE.NEW_SUBSCRIPTION%TYPE;
        NUERRORCODE         NUMBER;
        SBERRORMESSAGE      VARCHAR2(1024);
        NUIDSUSCASOC        MO_BILL_DATA_CHANGE.NEW_SUBSCRIPTION%TYPE;
	BEGIN

        UT_TRACE.TRACE('Inicia CF_BOActions.CycleChangeAttention',3);

        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
            );
        UT_TRACE.TRACE('Id del Paquete  : [' || NUPACKAGEID || ']',5);

        
        IF (NUPACKAGEID IS NULL) THEN
            ERRORS.SETERROR(MO_BOCONSTERROR.CNUERRVALUESINSTNOEXIST);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        MO_BOBILLINGDATACHANGE.GETCYCLEBYPACKAGEID(NUPACKAGEID, NUNEWCYCLE, NUSUBSCRIPTION);

        UT_TRACE.TRACE('Ciclo: [' || NUNEWCYCLE || ']   Suscripcion: [' || NUSUBSCRIPTION || ']',5);

        
        PKSUBSCRIBER.UPDCYCLESUBSCRIBER(NUSUBSCRIPTION, NUNEWCYCLE, NUERRORCODE, SBERRORMESSAGE);

        
        IF (NUERRORCODE != 0) THEN
            ERRORS.SETERROR(NUERRORCODE);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        NUIDSUSCASOC:=MO_BCCOMMERCIALRELAT.FNUGETCONTRATASSOC(NUSUBSCRIPTION);

        UT_TRACE.TRACE('Contrato Nuevo : [' || NUIDSUSCASOC || ']',5);

        IF ( NUIDSUSCASOC IS NOT NULL )
        THEN
            
            PKSUBSCRIBER.UPDCYCLESUBSCRIBER(NUIDSUSCASOC, NUNEWCYCLE, NUERRORCODE, SBERRORMESSAGE);

            
            IF (NUERRORCODE != 0) THEN
                ERRORS.SETERROR(NUERRORCODE);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        
        MO_BOATTENTION.ATTENDPACKAGE(NUPACKAGEID);
        UT_TRACE.TRACE('Finaliza CF_BOActions.CycleChangeAttention',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CYCLECHANGEATTENTION;
    

    



















    PROCEDURE  CREAINCLUDEDCOMPOSITION
    (
        INUPACKAGEID  IN    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUCOMPONENTID           MO_COMPONENT.COMPONENT_ID%TYPE;
        ONUCOMPONENTIDPROD      PR_COMPONENT.COMPONENT_ID%TYPE;
        RCMOCOMPONENT           DAMO_COMPONENT.CURECORD%ROWTYPE;
        RCPRCOMPONENT           DAPR_COMPONENT.CURECORD%ROWTYPE;
        TBMOTIVES               DAMO_MOTIVE.TYTBMO_MOTIVE;
        RCBUNDCOMP              DACC_BUNDLED_COMP.STYCC_BUNDLED_COMP;
        NUMOTINDEX              NUMBER;

        CURSOR CUINCLUDEDBYPLAN
        (
            INUCOMMERCIALPLAN       CC_COMMERCIAL_PLAN.COMMERCIAL_PLAN_ID%TYPE
        )
        IS
           SELECT  B.INCLUDED_ID, B.COMPONENT_TYPE_ID, B.CLASS_SERVICE_ID
           FROM CC_INCLUDED_PLAN A, CC_INCLUDED B
           WHERE A.COMMERCIAL_PLAN_ID = INUCOMMERCIALPLAN
           AND A.IS_REQUIRED = GE_BOCONSTANTS.GETYES
           AND A.INCLUDED_ID = B.INCLUDED_ID
           AND ROWNUM = 1;

        CURSOR CUINCLUFEATBYPLAN
        (
            INUCOMMERCIALPLAN       CC_COMMERCIAL_PLAN.COMMERCIAL_PLAN_ID%TYPE,
            INUPRODUCTID            PR_COMPONENT.PRODUCT_ID%TYPE
        )
        IS
           SELECT  C.COMPONENT_ID, C.CREATION_DATE, B.INCLUDED_ID, B.INCLUDED_FEATURES_ID
           FROM CC_INCLUDED_PLAN A, CC_INCLUDED_FEATURES B, PR_COMPONENT C
           WHERE A.COMMERCIAL_PLAN_ID = INUCOMMERCIALPLAN
           AND A.IS_REQUIRED = GE_BOCONSTANTS.GETYES
           AND A.INCLUDED_ID = B.INCLUDED_ID
           AND C.PRODUCT_ID = INUPRODUCTID
           AND B.COMPONENT_TYPE_ID = C.COMPONENT_TYPE_ID
           AND NVL(B.CLASS_SERVICE_ID,C.COMPONENT_TYPE_ID) = NVL(C.CLASS_SERVICE_ID,C.COMPONENT_TYPE_ID);

    BEGIN
        UT_TRACE.TRACE('Inicio CF_BOActions.CreaIncludedComposition',8);

        IF (MO_BCMOTIVE.CUMOTIVESBYPACKAGE%ISOPEN) THEN
            CLOSE MO_BCMOTIVE.CUMOTIVESBYPACKAGE;
        END IF;

        
        OPEN MO_BCMOTIVE.CUMOTIVESBYPACKAGE(INUPACKAGEID);
        FETCH MO_BCMOTIVE.CUMOTIVESBYPACKAGE BULK COLLECT INTO TBMOTIVES;
        CLOSE MO_BCMOTIVE.CUMOTIVESBYPACKAGE;

        NUMOTINDEX := TBMOTIVES.FIRST;
        WHILE (NUMOTINDEX IS NOT NULL) LOOP

            UT_TRACE.TRACE('Motivo: '|| TBMOTIVES(NUMOTINDEX).MOTIVE_ID, 10);
            UT_TRACE.TRACE('Plan  : '|| TBMOTIVES(NUMOTINDEX).COMMERCIAL_PLAN_ID, 10);

            
            NUCOMPONENTID  := MO_BCMOTIVE.FNUGETMAINCOMPONENTID(TBMOTIVES(NUMOTINDEX).MOTIVE_ID);
            RCMOCOMPONENT  := DAMO_COMPONENT.FRCGETRECORD(NUCOMPONENTID);
            RCPRCOMPONENT  := DAPR_COMPONENT.FRCGETRECORD(RCMOCOMPONENT.COMPONENT_ID_PROD);

            UT_TRACE.TRACE('Componente MO: '|| RCMOCOMPONENT.COMPONENT_ID, 10);
            UT_TRACE.TRACE('Componente PR: '|| RCMOCOMPONENT.COMPONENT_ID_PROD, 10);

            
            FOR RECINCLUDEDBYPLAN IN CUINCLUDEDBYPLAN (TBMOTIVES(NUMOTINDEX).COMMERCIAL_PLAN_ID) LOOP

                UT_TRACE.TRACE('Incluido : '||RECINCLUDEDBYPLAN.INCLUDED_ID, 12);
                UT_TRACE.TRACE('TipoComp : '||RECINCLUDEDBYPLAN.COMPONENT_TYPE_ID, 12);
                UT_TRACE.TRACE('ClaseSer : '||RECINCLUDEDBYPLAN.CLASS_SERVICE_ID, 12);

                
                PR_BOCREATIONCOMPONENT.REGISTER
                        (
                        RCPRCOMPONENT.PRODUCT_ID,
                        RECINCLUDEDBYPLAN.COMPONENT_TYPE_ID,
                        RECINCLUDEDBYPLAN.CLASS_SERVICE_ID,
                        RECINCLUDEDBYPLAN.INCLUDED_ID,
                        RCPRCOMPONENT.SERVICE_DATE,
                        RCPRCOMPONENT.MEDIATION_DATE,
                        RCPRCOMPONENT.QUANTITY,
                        RCPRCOMPONENT.UNCHARGED_TIME,
                        RCPRCOMPONENT.DIRECTIONALITY_ID,
                        RCPRCOMPONENT.CATEGORY_ID,
                        RCPRCOMPONENT.SUBCATEGORY_ID,
                        RCPRCOMPONENT.DISTRIBUT_ADMIN_ID,
                        RCPRCOMPONENT.METER,
                        RCPRCOMPONENT.BUILDING_ID,
                        RCPRCOMPONENT.ASSIGN_ROUTE_ID,
                        NULL,
                        RCPRCOMPONENT.DISTRICT_ID,
                        GE_BOCONSTANTS.GETNO,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        RCPRCOMPONENT.PRODUCT_ORIGIN_ID,
                        NULL,
                        GE_BOCONSTANTS.CSBNO,
                        RCPRCOMPONENT.COMMERCIAL_PLAN_ID,
                        ONUCOMPONENTIDPROD,
                        FALSE,
                        FALSE,
                        FALSE,
                        RCPRCOMPONENT.COMP_PROD_PROV_ID,
                        RCPRCOMPONENT.COMPONENT_STATUS_ID
                        );
                UT_TRACE.TRACE('Componente Creado:['||ONUCOMPONENTIDPROD||']',6);

            END LOOP;

            
            FOR RCINCLUFEATBYPLAN IN CUINCLUFEATBYPLAN(TBMOTIVES(NUMOTINDEX).COMMERCIAL_PLAN_ID,RCPRCOMPONENT.PRODUCT_ID) LOOP

                UT_TRACE.TRACE('Componente Empaquetado:['||RCINCLUFEATBYPLAN.COMPONENT_ID||']',10);

                RCBUNDCOMP.BUNDLED_COMP_ID :=  CC_BOSEQUENCE.FNUGETSEQ_CC_BUNDLED_COMP;
                RCBUNDCOMP.COMPONENT_ID :=  ONUCOMPONENTIDPROD;
                RCBUNDCOMP.CHILD_COMPONENT_ID := RCINCLUFEATBYPLAN.COMPONENT_ID;
                RCBUNDCOMP.FINAL_DATE :=  UT_DATE.FDTMAXDATE();
                RCBUNDCOMP.INITIAL_DATE := RCINCLUFEATBYPLAN.CREATION_DATE;
                RCBUNDCOMP.INCLUDED_ID := RCINCLUFEATBYPLAN.INCLUDED_ID;
                RCBUNDCOMP.INCLUDED_FEATURES_ID := RCINCLUFEATBYPLAN.INCLUDED_FEATURES_ID;

                DACC_BUNDLED_COMP.INSRECORD(RCBUNDCOMP);

                DAPR_COMPONENT.UPDINCLUDED_FEATURES_ID(RCINCLUFEATBYPLAN.COMPONENT_ID,RCINCLUFEATBYPLAN.INCLUDED_FEATURES_ID);
            END LOOP;

            NUMOTINDEX := TBMOTIVES.NEXT(NUMOTINDEX);
        END LOOP;

        UT_TRACE.TRACE('Finaliza CF_BOActions.CreaIncludedComposition',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END;
    

    PROCEDURE COMMPLANCHANGEBYMOT
    IS
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        TBMOTIVES           DAMO_MOTIVE.TYTBMO_MOTIVE;
        RCPERICOSE          PERICOSE%ROWTYPE;
        DTGENDATE           PERIFACT.PEFAFIMO%TYPE;
        NUBILLINGPLAN       CC_COMMERCIAL_PLAN.BILLING_PLAN%TYPE;
        NURATINGPLAN        CC_COMMERCIAL_PLAN.RATING_PLAN%TYPE;
        NUPRERATINGPLAN     CC_COMMERCIAL_PLAN.PRERATING_PLAN%TYPE;

        CNUACTIONATTENDCOMP   CONSTANT      NUMBER := 60;
        CNUACTIONATTENDPACK   CONSTANT      NUMBER := 65;

    BEGIN
     
        UT_TRACE.TRACE('Inicia CF_BOActions.CommPlanChangeByMot',10);

        
        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_MOTIVE,
            MO_BOCONSTANTS.CSBMOTIVE_ID,
            NUMOTIVEID
        );

        NUPACKAGEID  := DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVEID);

        UT_TRACE.TRACE('nuMotiveID  ['||NUMOTIVEID||']',11);
        UT_TRACE.TRACE('nuPackageId ['||NUPACKAGEID||']',11);

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(NUMOTIVEID);

        
        IF
            RCMOTIVE.IS_IMMEDIATE_ATTENT = 'N'
        THEN
            PKBCPERICOSE.GETLASTPREVCONSPERIOD(
                RCMOTIVE.PRODUCT_ID,
                RCPERICOSE
            );

            DTGENDATE := RCPERICOSE.PECSFECF;
        ELSE
            DTGENDATE := UT_DATE.FDTSYSDATE;
        END IF;

        
        FA_BOSUSCGECA.BLOCKSUSCRIPTION(
            PKTBLSERVSUSC.FNUGETSUSCRIPTION(RCMOTIVE.PRODUCT_ID)
        );

        
        LE_BOINCLUDEUNITSATTENTION.ATTENTIONINCLUNIT(
            RCMOTIVE.PACKAGE_ID,
            RCMOTIVE.MOTIVE_ID,
            DTGENDATE,
            RCMOTIVE.IS_IMMEDIATE_ATTENT = 'N'
        );

        
        MO_BOBILLINGDATACHANGE.GETDATACOMMPLANPACKAGEID(
            NUPACKAGEID,
            NUBILLINGPLAN,
            NURATINGPLAN,
            NUPRERATINGPLAN
        );

        
        FA_BOCHANGEBILLPLAN.LIQUIDATECHANGEPLAN(
            RCMOTIVE.PRODUCT_ID,
            DTGENDATE,
            NUBILLINGPLAN,
            RCMOTIVE.IS_IMMEDIATE_ATTENT = 'Y'
        );

        
        PR_BOPRODUCT.UPDPLANPRODUCT
        (
            RCMOTIVE.PRODUCT_ID,
            RCMOTIVE.COMMERCIAL_PLAN_ID,
            DTGENDATE + 1/24/60/60,
            RCMOTIVE.MOTIVE_ID
        );
        
        
        IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(DAMO_MOTIVE.FNUGETMOTIVE_STATUS_ID(RCMOTIVE.MOTIVE_ID))) THEN
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCMOTIVE.MOTIVE_ID,CNUACTIONATTENDCOMP);
        END IF;

        


        TBMOTIVES := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(NUPACKAGEID);
        UT_TRACE.TRACE('Cantidad de Motivos en Estado No Terminal despu�s de Atenci�n['||TBMOTIVES.COUNT||']',11);

        
        IF (TBMOTIVES.COUNT = 0 AND
            NOT(PS_BOMOTIVESTATUS.FBLISFINALSTATUS(DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(NUPACKAGEID)))) THEN
            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(NUPACKAGEID, CNUACTIONATTENDPACK);
        END IF;

        UT_TRACE.TRACE('Finaliza CF_BOActions.CommPlanChangeByMot',10);
     
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


  



















    PROCEDURE UPDPRDPROVISIONAL
    (
        INUPACKAGEID    IN    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUMOTIDX          BINARY_INTEGER;
        TBMOTIVES         DAMO_MOTIVE.TYTBMO_MOTIVE;
    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.UpdPrdProvisional',3);
        UT_TRACE.TRACE('Solicitud['||INUPACKAGEID||']',4);

        
        DAMO_PACKAGES.ACCKEY(INUPACKAGEID);

        
        OPEN  MO_BCMOTIVE.CUMOTIVESBYPACKAGE(INUPACKAGEID);
        FETCH MO_BCMOTIVE.CUMOTIVESBYPACKAGE BULK COLLECT INTO TBMOTIVES;
        CLOSE MO_BCMOTIVE.CUMOTIVESBYPACKAGE;

        
        NUMOTIDX := TBMOTIVES.FIRST;
        WHILE (NUMOTIDX IS NOT NULL) LOOP
            
            UPDPRDPROVISIONALBYMOT (TBMOTIVES(NUMOTIDX).MOTIVE_ID);
            NUMOTIDX := TBMOTIVES.NEXT(NUMOTIDX);
        END LOOP;

        UT_TRACE.TRACE('Termina CF_BOActions.UpdPrdProvisional',3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDPRDPROVISIONAL;

    


















    PROCEDURE UPDPRDPROVISIONALBYMOT
    (
        INUMOTIVEID    IN    MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        
        RCMOTIVE     DAMO_MOTIVE.STYMO_MOTIVE;

        
        RCPRODUCT    DAPR_PRODUCT.STYPR_PRODUCT;

        
        PROCEDURE VALIDATEDATA IS
        BEGIN
            
            IF (INUMOTIVEID IS NULL) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'C�digo del motivo');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            DAMO_MOTIVE.ACCKEY(INUMOTIVEID);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;

    BEGIN

        UT_TRACE.TRACE('Inicia CF_BOActions.UpdPrdProvisionalByMot',3);
        UT_TRACE.TRACE('Motivo ['||INUMOTIVEID||']',4);

        
        VALIDATEDATA;

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        IF (RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.FNUINSTALLMOTTYPE) AND
           (RCMOTIVE.PROVISIONAL_FLAG = GE_BOCONSTANTS.GETYES)
        THEN
            UT_TRACE.TRACE('Procesar motivo ['||RCMOTIVE.MOTIVE_ID||']',4);
            
            RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(RCMOTIVE.PRODUCT_ID);

            RCPRODUCT.PROVISIONAL_BEG_DATE := RCMOTIVE.PROV_INITIAL_DATE;
            RCPRODUCT.PROVISIONAL_END_DATE := RCMOTIVE.PROV_FINAL_DATE;
            RCPRODUCT.IS_PROVISIONAL       := RCMOTIVE.PROVISIONAL_FLAG;
            DAPR_PRODUCT.UPDRECORD(RCPRODUCT);
        END IF;

        UT_TRACE.TRACE('Fin CF_BOActions.UpdPrdProvisionalByMot',3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDPRDPROVISIONALBYMOT;
    

    PROCEDURE PACKATTENTION
    (
        INUPACKAGEID  IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        CUREFMOTIVESPACKAGES  CONSTANTS.TYREFCURSOR;
        BLMOTIVEACTIVES       BOOLEAN;
        DTSYSDATE             DATE :=UT_DATE.FDTSYSDATE;
        RCPACKAGES            DAMO_PACKAGES.STYMO_PACKAGES;

	BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.PackAttention Identificador del paquete ['||INUPACKAGEID||']',12);

        BLMOTIVEACTIVES:= GE_BOCONSTANTS.GETFALSE;

        
        DAMO_PACKAGES.GETRECORD(INUPACKAGEID, RCPACKAGES);

        
        FOR RCMOTIVEBYPACK IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(INUPACKAGEID) LOOP
            BLMOTIVEACTIVES:= GE_BOCONSTANTS.GETTRUE;
        END LOOP;

        
        IF (NOT BLMOTIVEACTIVES AND
            NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCPACKAGES.MOTIVE_STATUS_ID)) THEN

            DAMO_PACKAGES.UPDATTENTION_DATE(INUPACKAGEID,DTSYSDATE);
            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(INUPACKAGEID, GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND));
        END IF;

        UT_TRACE.TRACE('Finaliza CF_BOActions.PackAttention',12);

    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
	END;


    PROCEDURE ASSIGNNUMBER
    (
        INUMOTIVE IN MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
       NUCOMPONENTISAUTOMATIC   PS_COMPONENT_TYPE.ASSIGNABLE%TYPE;
       RCCOMPONENT              MO_COMPONENT%ROWTYPE;
       NUCOMPONENTID            MO_COMPONENT.COMPONENT_ID%TYPE;

       CURSOR CUCOMPONENT
       (
            INUCOMPONENTID  IN   MO_COMPONENT.MOTIVE_ID%TYPE
       )
       IS
            SELECT A.* FROM MO_COMPONENT  A
            WHERE MOTIVE_ID = INUCOMPONENTID AND A.IS_MAIN='N';
    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.assignnumber',12);
        UT_TRACE.TRACE('C�digo del Motivo Obtenido de la Instancia : ['||INUMOTIVE||']', 12);
        
        IF (INUMOTIVE IS NOT NULL) THEN
        
            OPEN CUCOMPONENT(INUMOTIVE);
            FETCH CUCOMPONENT INTO RCCOMPONENT;
            CLOSE CUCOMPONENT;
            
            UT_TRACE.TRACE('Valida activacion automatica del componente : ['||RCCOMPONENT.COMPONENT_ID||']', 12);
            NUCOMPONENTISAUTOMATIC:=DAPS_COMPONENT_TYPE.FSBGETASSIGNABLE(RCCOMPONENT.COMPONENT_TYPE_ID);
            UT_TRACE.TRACE('nuComponentIsAutomatic : ['||NUCOMPONENTISAUTOMATIC||']', 12);
            IF(NUCOMPONENTISAUTOMATIC='Y')THEN
                UT_TRACE.TRACE('envia a asignar el motivo : ['||RCCOMPONENT.MOTIVE_ID||']', 12);
                NUCOMPONENTID:= RCCOMPONENT.COMPONENT_ID;
                MO_BOPROVISIONING.ASSIGNDIDRDSINUMBER(NUCOMPONENTID);
                UT_TRACE.TRACE('Envio a Asignacion de los componentes '||NUCOMPONENTID, 12);
            END IF;
        END IF;
        UT_TRACE.TRACE('Finaliza CF_BOActions.assignnumber',12);
    EXCEPTION
           WHEN EX.CONTROLLED_ERROR THEN
            IF (CUCOMPONENT%ISOPEN) THEN
                CLOSE CUCOMPONENT;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
		  WHEN OTHERS THEN
            IF (CUCOMPONENT%ISOPEN) THEN
                CLOSE CUCOMPONENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
        

    PROCEDURE ATTENDRECONFMOT
    (
        INUMOTIVEID         IN          MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        NUQUANTITY                  NUMBER;
        NUCOMPONENTID               MO_COMPONENT.COMPONENT_ID%TYPE;
        CNUACTIONATTENDCOMP         GE_ACTION_MODULE.ACTION_ID%TYPE;

    BEGIN
    UT_TRACE.TRACE('Inicia Metodo CF_BOActions.AttendReconfMot',5);
    
    CNUACTIONATTENDCOMP:= CF_BOCONSTANTS.CNUACTIONATTENDCOMP;
    
    
    FOR RCMOCOMPONENT IN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(INUMOTIVEID) LOOP
        
        NUQUANTITY:=DAMO_DATA_CONNECTION.FNUGETQUANTITY(RCMOCOMPONENT.COMPONENT_ID);
        UT_TRACE.TRACE('Attending ==> COMPONENT_ID['||RCMOCOMPONENT.COMPONENT_ID||']',7);

        
        NUCOMPONENTID:=DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(RCMOCOMPONENT.COMPONENT_ID);

        

        UT_TRACE.TRACE('Updating: COMPONENT_ID['||NUCOMPONENTID||'] ==> QUANTITY['||NUQUANTITY||']',7);
        DAPR_DATA_CONNECTION.UPDQUANTITY(NUCOMPONENTID,NUQUANTITY);

        
        IF DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(RCMOCOMPONENT.MOTIVE_STATUS_ID) = GE_BOCONSTANTS.CSBNO
        THEN
          MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCMOCOMPONENT.COMPONENT_ID,CNUACTIONATTENDCOMP);
        END IF;
    END LOOP;

    
    UT_TRACE.TRACE('Attending ==> MOTIVE_ID['||INUMOTIVEID||']',6);
    IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS
      (DAMO_MOTIVE.FNUGETMOTIVE_STATUS_ID(INUMOTIVEID))) THEN
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT
        (INUMOTIVEID,CNUACTIONATTENDCOMP);
    END IF;

    UT_TRACE.TRACE('Finaliza Metodo CF_BOActions.AttendReconfMot',5);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
    END;

    





















    PROCEDURE ATTENDCHANNELRECONF
    IS

        TBMOTIVES               DAMO_MOTIVE.TYTBMO_MOTIVE;
        NUINDEXMOT              NUMBER;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        CNUPACKAGESMOSTATUSREG  MO_PACKAGES.MOTIVE_STATUS_ID%TYPE;
        BLATTENDPACKAGE         BOOLEAN := TRUE;
        CNUATTENDACTIONID       GE_ACTION_MODULE.ACTION_ID%TYPE;
        NUMOTIVETYPEID          MO_MOTIVE.MOTIVE_TYPE_ID%TYPE;
        RECONFMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        MOTIVETAG               MO_MOTIVE.TAG_NAME%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo CF_BOActions.AttendChannelReconf',5);
        
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
            );

        
        OPEN  MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(NUPACKAGEID);
        FETCH MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE
        BULK COLLECT INTO TBMOTIVES;
        CLOSE MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE;


        
        FOR NUINDEXMOT IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
            
            NUMOTIVEID := TBMOTIVES(NUINDEXMOT).MOTIVE_ID;
            UT_TRACE.TRACE('AttendChannelReconf MOTIVE_ID['||NUMOTIVEID||']',5);
            
            NUMOTIVETYPEID := DAMO_MOTIVE.FNUGETMOTIVE_TYPE_ID(NUMOTIVEID);

            

            IF NUMOTIVETYPEID = CF_BOCONSTANTS.CNURECONFMOTIVETYPE THEN
                
                RECONFMOTIVEID :=  NUMOTIVEID;
            END IF;


            

            IF NUMOTIVETYPEID = CF_BOCONSTANTS.CNUADDCOMPMOTIVETYPE THEN
               MO_BOATTENTION.ATTENDCMPADITIONMOT(NUMOTIVEID);

               
               MOTIVETAG := DAMO_MOTIVE.FSBGETTAG_NAME(NUMOTIVEID);

               IF MOTIVETAG = CF_BOCONSTANTS.FSBGETADDPILOTTAG THEN
                   CF_BOACTIONS.ACTUALIZACANTCANALES(NUMOTIVEID);
               END IF;

            END IF;


            

            IF NUMOTIVETYPEID = CF_BOCONSTANTS.CNURETCOMPMOTIVETYPE THEN
               MO_BORETIRE.RETIRECOMPATTENTION(NUMOTIVEID);

               
               MOTIVETAG := DAMO_MOTIVE.FSBGETTAG_NAME(NUMOTIVEID);

               IF MOTIVETAG = CF_BOCONSTANTS.FSBGETRETPILOTTAG THEN
                   CF_BOACTIONS.ACTUALIZACANTCANALES(NUMOTIVEID);
               END IF;

            END IF;


            

            IF NUMOTIVETYPEID = CF_BOCONSTANTS.CNUCLASSCHANGMOTIVETYPE THEN
               FOR RCCOMPONENT IN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(NUMOTIVEID) LOOP
                    IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCCOMPONENT.MOTIVE_STATUS_ID)
                        AND RCCOMPONENT.MOTIVE_STATUS_ID != MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP ) THEN
                        MO_BOCNFCOMPONENT.CHANGECLASSSERVCOMP( RCCOMPONENT.COMPONENT_ID );
                    END IF;
               END LOOP;
            END IF;

         END LOOP;

        IF RECONFMOTIVEID IS NOT NULL THEN
           ATTENDRECONFMOT(RECONFMOTIVEID);
        END IF;

        
        CNUATTENDACTIONID := CF_BOCONSTANTS.CNUACTIONATTENDCOMP;
        CNUPACKAGESMOSTATUSREG := CF_BOCONSTANTS.CNUPACKAGESMOSTATUSREG;
        IF(CNUPACKAGESMOSTATUSREG=DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(NUPACKAGEID))THEN
            FOR REC IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(NUPACKAGEID) LOOP
                BLATTENDPACKAGE := FALSE;
            EXIT;
            END LOOP;

            IF (BLATTENDPACKAGE) THEN
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(NUPACKAGEID,CNUATTENDACTIONID);
            END IF;
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo CF_BOActions.AttendChannelReconf',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;
    

    PROCEDURE UPDDATAINTELNETW
    (
        INUMOTIVEID     IN MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCINTELNETWMOT  DAMO_INTEL_NETW.STYMO_INTEL_NETW;
        RCINTELNETWPROD DAPR_INTEL_NETW.STYPR_INTEL_NETW;
        RCMOMOTIVE      DAMO_MOTIVE.STYMO_MOTIVE;
    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.UpdDataIntelNetw Actualizacion Pr_Intel_Netw. Motivo ['||INUMOTIVEID||']',6);
        
        IF (NOT DAMO_INTEL_NETW.FBLEXIST(INUMOTIVEID)) THEN
            RETURN;
        END IF;

        
        RCMOMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        
        RCINTELNETWMOT := DAMO_INTEL_NETW.FRCGETRECORD(INUMOTIVEID);

        
        RCINTELNETWPROD.PRODUCT_ID := RCMOMOTIVE.PRODUCT_ID;
        RCINTELNETWPROD.ZONE_PROG_FLAG := RCINTELNETWMOT.ZONE_PROG_FLAG;

        DAPR_INTEL_NETW.UPDRECORD (RCINTELNETWPROD);
        UT_TRACE.TRACE('Finaliza CF_BOActions.UpdDataIntelNetw',6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE ACTUALIZACANTCANALES
    (
        INUMOTIVEID         IN      MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        NUQUANTITY          NUMBER;
        NUCOMPONENTID       PR_COMPONENT.COMPONENT_ID%TYPE;

        CURSOR CUOBTENERCOMPONENTE
        (
            INUMOTIVEID         IN      MO_MOTIVE.MOTIVE_ID%TYPE
        )
        IS
            SELECT COMPONENT_ID
            FROM MO_COMPONENT
            WHERE MOTIVE_ID = INUMOTIVEID
            AND (COMPONENT_TYPE_ID = CF_BOCONSTANTS.CNUTIPOCOMPPBX
            OR COMPONENT_TYPE_ID = CF_BOCONSTANTS.CNUTIPOCOMPPILOTO);

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BoActions.ActualizaCantCanales',5);
        

        FOR RCOBTENERCOMPONENTE IN  CUOBTENERCOMPONENTE(INUMOTIVEID) LOOP
            
            NUQUANTITY:=DAMO_DATA_CONNECTION.FNUGETQUANTITY(RCOBTENERCOMPONENTE.COMPONENT_ID);

            
            NUCOMPONENTID := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(RCOBTENERCOMPONENTE.COMPONENT_ID);

            UT_TRACE.TRACE('Updating: COMPONENT_ID['||NUCOMPONENTID||'] ==> QUANTITY['||NUQUANTITY||']',7);
            DAPR_DATA_CONNECTION.UPDQUANTITY(NUCOMPONENTID,NUQUANTITY);
        END LOOP;
        UT_TRACE.TRACE('Finaliza CF_BoActions.ActualizaCantCanales',5);
    END ACTUALIZACANTCANALES;
    
    



















    PROCEDURE RETIRERINUMBERREG
    IS
        NUPACKAGEID         MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
        NUCOMPONENTID       MO_COMPONENT.COMPONENT_ID%TYPE;
        RCCOMPONENTID       DAMO_COMPONENT.STYMO_COMPONENT;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPTYPERINUMBER  CONSTANT MO_COMPONENT.COMPONENT_TYPE_ID%TYPE:= 7021;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BoActions.RetireRINumberReg',5);
        
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
            );

        
        CC_BOREQUESTRATING.POSTREQRATINGBYFGCA(NUPACKAGEID);

        
        CC_BOACCOUNTS.GENERATEACCOUNTBYPACK(NUPACKAGEID);

        
        NUMOTIVEID := MO_BOPACKAGES.FNUGETFIRSTMOTIVE(NUPACKAGEID);

        
        NUCOMPONENTID := MO_BOCOMPONENT.FNUGETCOMPONENTBYTYPE(NUMOTIVEID,NUCOMPTYPERINUMBER);

        
        RCCOMPONENTID := DAMO_COMPONENT.FRCGETRECORD(NUCOMPONENTID);

        
        DAPR_COMPONENT.UPDCOMPONENT_STATUS_ID(RCCOMPONENTID.COMPONENT_ID_PROD,PR_BOPARAMETER.FNUGETRETPENDCOMP);

        
        MO_BOATTENTION.ACTCREATEPLANWF;
        UT_TRACE.TRACE('Finaliza CF_BoActions.RetireRINumberReg',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    


















    PROCEDURE CREATECOMPONENTSFORREQUEST
    IS
    NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
    NUCOMPONENTPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
    NUPARENTCOMPOPRODID PR_COMPONENT.COMPONENT_ID%TYPE;
    NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
    NUPRODUCTID         MO_COMPONENT.PRODUCT_ID%TYPE;
    RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
    TBCOMPONENT         TYTBCOMPONENTID;
    TBPACKASSO          DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
    BIINDEXCOMP         BINARY_INTEGER := 1;
    NUINDEXPACK         BINARY_INTEGER;
    NUPARENTCOMPOID     PR_COMPONENT_LINK.PARENT_COMPONENT_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.CreateComponentsForRequest',9);

        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
            );
        
        UT_TRACE.TRACE('C�digo del Pedido Obtenido de la Instancia : ['||NUPACKAGEID||']', 5);

            FOR  RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(NUPACKAGEID) LOOP
                UT_TRACE.TRACE('C�digo del Motivo: ['||RCMOTIVE.MOTIVE_ID||']', 6);
                
                FOR REC IN MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT(RCMOTIVE.MOTIVE_ID) LOOP
                    TBCOMPONENT(BIINDEXCOMP) := REC.COMPONENT_ID;
                    BIINDEXCOMP := BIINDEXCOMP + 1;
                END LOOP;

                
                BIINDEXCOMP := TBCOMPONENT.FIRST;
                WHILE BIINDEXCOMP <= TBCOMPONENT.LAST LOOP
                    RCCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(TBCOMPONENT(BIINDEXCOMP));
                    NUPRODUCTID := RCCOMPONENT.PRODUCT_ID;
                    UT_TRACE.TRACE('Id. de Producto: ['||NUPRODUCTID||']', 7);
                    UT_TRACE.TRACE('Id. de Componente: ['||RCCOMPONENT.COMPONENT_ID||']', 7);
                    NUPARENTCOMPOID := DAMO_VIRTUAL_CX.FNUGETCOMP_ASSO_ID_PROD(RCCOMPONENT.COMPONENT_ID);
                    
                    PR_BOCREATIONCOMPONENT.INITIALCREATIONCOMPONENTIND( NUPRODUCTID,
                                                                        NUPARENTCOMPOID,
                                                                        SYSDATE,
                                                                        RCCOMPONENT,
                                                                        PR_BOCREATIONCOMPONENT.CNUCOMPSTATINSTALLATIONPEND,
                                                                        NUCOMPONENTPRODID,
                                                                        NUPARENTCOMPOPRODID
                                                                       );
                     BIINDEXCOMP := TBCOMPONENT.NEXT(BIINDEXCOMP);
                END LOOP;
                TBCOMPONENT.DELETE;
                BIINDEXCOMP := 1;
            END LOOP;

        UT_TRACE.TRACE('Finaliza CF_BOActions.CreateComponentsForRequest',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE INITALLCHILDCOMPMEDIATIONDATE
    IS
        RCCOMPONENT             DAMO_COMPONENT.STYMO_COMPONENT;
        SBCOMPONENTID           GE_BOINSTANCECONTROL.STYSBVALUE;
        SBINSTANCE              GE_BOINSTANCECONTROL.STYSBNAME;
        SBINSTANCEID            GE_BOINSTANCECONTROL.STYSBVALUE;
        NUINSTANCEID            WF_INSTANCE.INSTANCE_ID%TYPE;
        NUCOMPONENTID           MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCAUSAL                GE_CAUSAL.CAUSAL_ID%TYPE := -1;
        DTMEDDATE               DATE;
        CSBWFINSTANCE           CONSTANT VARCHAR2(100):='WF_INSTANCE';
        CSBINSTANCEID           CONSTANT VARCHAR2(20) :='INSTANCE_ID';
        CSBEXTERNALID           CONSTANT VARCHAR2(20) :='EXTERNAL_ID';


        CURSOR CUGETMEDIATORANSWER(INUEXTERNALID SM_INTERFACE.EXTERNAL_ID%TYPE)
        IS
            SELECT ANSWER_ID
            FROM SM_INTERFACE
            WHERE EXTERNAL_ID = INUEXTERNALID;

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo CF_BOActions.InitAllChildCompMediationDate', 2);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTANCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE, NULL, CSBWFINSTANCE, CSBINSTANCEID, SBINSTANCEID);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE, NULL, CSBWFINSTANCE, CSBEXTERNALID, SBCOMPONENTID);

        
        NUINSTANCEID := UT_CONVERT.FNUCHARTONUMBER(SBINSTANCEID);
        
        NUCOMPONENTID := UT_CONVERT.FNUCHARTONUMBER(SBCOMPONENTID);

        UT_TRACE.TRACE('nuInstanceId = ' || NUINSTANCEID, 3);
        UT_TRACE.TRACE('nuComponentId = ' || NUCOMPONENTID, 3);

        
        RCCOMPONENT :=  DAMO_COMPONENT.FRCGETRECORD(NUCOMPONENTID);

        
        FOR RC IN CUGETMEDIATORANSWER(NUINSTANCEID) LOOP
            NUCAUSAL := NVL(RC.ANSWER_ID, -1);
            UT_TRACE.TRACE('cuGetMediatorAnswer(nuInstanceId) = ' || RC.ANSWER_ID, 3);
            EXIT;
        END LOOP;

        UT_TRACE.TRACE('nuCausal = ' || NUCAUSAL, 3);

        
        IF (NOT GE_BOCAUSAL.FBLGETSUCESSFULLCLASSCAUSAL(NUCAUSAL) AND RCCOMPONENT.MEDIATION_DATE IS NULL) THEN
            
            
            DTMEDDATE := SYSDATE;
            RCCOMPONENT.MEDIATION_DATE := DTMEDDATE;
            DAMO_COMPONENT.UPDRECORD(RCCOMPONENT);
        ELSE
            
            DTMEDDATE := RCCOMPONENT.MEDIATION_DATE;
        END IF;
        UT_TRACE.TRACE('dtMedDate = ' || DTMEDDATE, 3);
        
        FOR RC IN MO_BCCOMPONENT.CUGETCHILDCOMPONENT(NUCOMPONENTID) LOOP
            MO_BOCOMPONENT.UPDMEDIATIONDATE(RC.COMPONENT_ID, DTMEDDATE);
        END LOOP;
        UT_TRACE.TRACE('Termina Metodo CF_BOActions.InitAllChildCompMediationDate', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE EXPRRELEASEELEMENTRETIREDMOT
    IS
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.ExprReleaseElementRetiredMot', 10);

        
        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
        );
        UT_TRACE.TRACE('C�digo del Paquete Obtenido de la Instancia : ['||NUPACKAGEID||']', 12);

        IF NUPACKAGEID IS NULL THEN
            
            ERRORS.SETERROR(MO_BOCONSTERROR.CNUERRVALUESINSTNOEXIST);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        FOR RCMOT IN MO_BCMOTIVE.CUMOTBYPACKANDMOTTY(NUPACKAGEID,MO_BOCONSTANTS.FNURETIRECOMPMOTTYPE)  LOOP

            
            FOR RCCOMP IN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(RCMOT.MOTIVE_ID)  LOOP

                
                IF RCCOMP.MOTIVE_STATUS_ID = MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP THEN
                    UT_TRACE.TRACE('Libera Elementos del Componente ['||RCCOMP.COMPONENT_ID||']', 12);

                    MO_BOINTERFACEIM.RELEASEELEMRETIRED(RCCOMP.COMPONENT_ID);
                END IF;
            END LOOP;
        END LOOP;

        UT_TRACE.TRACE('Finaliza CF_BOActions.ExprReleaseElementRetiredMot', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END;

    
















   PROCEDURE ATTENDDATACHANGETOCHANNEL
    IS
        NUCOMPONENTIDNEW        PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        RCCOMPONENTPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        RCCOMPONENTMOT          DAMO_COMPONENT.STYMO_COMPONENT;
        RCPRDATATRANSMISSION    DAPR_DATA_TRANSMISSION.STYPR_DATA_TRANSMISSION;
        RCMODATATRANSMISSION    DAMO_DATA_TRANSMISSION.STYMO_DATA_TRANSMISSION;
        NUATTENDACTIONID        GE_ACTION_MODULE.ACTION_ID%TYPE := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND);
        DTSYSDATE               DATE := UT_DATE.FDTSYSDATE;
        BLCHANGEBANDWIDTH       BOOLEAN := FALSE;
    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.AttendDataChangeToChannel. Paquete:['||NUPACKAGEID||']',10);

        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
            );

        
        FOR REC IN MO_BCCOMPONENT.CUCOMPONENTSBYPACK(NUPACKAGEID) LOOP
            IF (REC.COMPONENT_TYPE_ID = CF_BOCONSTANTS.FNUGETCHANNELCOMPTYPE) THEN
                RCCOMPONENTMOT := REC;
            END IF;
        END LOOP;
        UT_TRACE.TRACE('Componente:['||RCCOMPONENTMOT.COMPONENT_ID||']Componente Prod:['||RCCOMPONENTMOT.COMPONENT_ID_PROD||']',11);

        
        RCCOMPONENTPROD := DAPR_COMPONENT.FRCGETRECORD(RCCOMPONENTMOT.COMPONENT_ID_PROD);
        UT_TRACE.TRACE('Clase Actual:['||RCCOMPONENTPROD.CLASS_SERVICE_ID||']Clase Nueva:['||RCCOMPONENTMOT.CLASS_SERVICE_ID||']',11);

        
        FOR REC IN MO_BCDATA_TRANSMISSION.CUDATATRANSMISSIONBYCOMP(RCCOMPONENTMOT.COMPONENT_ID) LOOP
            RCMODATATRANSMISSION := REC;
        END LOOP;

        
        FOR REC IN PR_BCDATA_TRANSMISSION.CUDATATRANSBYCOMPID(RCCOMPONENTPROD.COMPONENT_ID) LOOP
            RCPRDATATRANSMISSION := REC;
        END LOOP;

        
        IF (RCCOMPONENTMOT.CLASS_SERVICE_ID <> RCCOMPONENTPROD.CLASS_SERVICE_ID) THEN

            
            PR_BOCNFCOMPONENT.RETIREANDCREATIONCOMP (
                                                    RCCOMPONENTPROD.COMPONENT_ID,
                                                    RCCOMPONENTMOT.CLASS_SERVICE_ID,
                                                    RCCOMPONENTMOT.PACKAGE_ID,
                                                    RCCOMPONENTMOT.MOTIVE_ID,
                                                    RCCOMPONENTMOT.COMPONENT_ID,
                                                    RCCOMPONENTMOT.MEDIATION_DATE,
                                                    NULL,
                                                    NUCOMPONENTIDNEW
                                                    );

            


        ELSE
            UT_TRACE.TRACE('Ancho:['||RCMODATATRANSMISSION.BANDWIDTH_ID||']Protocolo:['||RCMODATATRANSMISSION.PROTOCOL_ID||']Tipo Conexi�n:['||RCMODATATRANSMISSION.CONNECTION_TYPE_ID||']',11);

            
            RCPRDATATRANSMISSION.BANDWIDTH_ID := RCMODATATRANSMISSION.BANDWIDTH_ID;
            RCPRDATATRANSMISSION.PROTOCOL_ID := RCMODATATRANSMISSION.PROTOCOL_ID;
            RCPRDATATRANSMISSION.CONNECTION_TYPE_ID := RCMODATATRANSMISSION.CONNECTION_TYPE_ID;
            RCPRDATATRANSMISSION.DISPONIBILITY_PERC := RCMODATATRANSMISSION.DISPONIBILITY_PERC;
            DAPR_DATA_TRANSMISSION.UPDRECORD(RCPRDATATRANSMISSION);

            
            PR_BOREQUEST.CREATECOMPONENTREQUEST (
                                                MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP,
                                                DTSYSDATE,
                                                RCCOMPONENTPROD.COMPONENT_ID,
                                                RCCOMPONENTMOT.PACKAGE_ID,
                                                RCCOMPONENTMOT.MOTIVE_ID,
                                                RCCOMPONENTMOT.MOTIVE_TYPE_ID,
                                                RCCOMPONENTMOT.COMPONENT_ID,
                                                DAMO_PACKAGES.FSBGETCUST_CARE_REQUES_NUM(RCCOMPONENTMOT.PACKAGE_ID)
                                                );
        END IF;

        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCCOMPONENTMOT.COMPONENT_ID, NUATTENDACTIONID);

        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCCOMPONENTMOT.MOTIVE_ID, NUATTENDACTIONID);

        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(NUPACKAGEID, NUATTENDACTIONID);

        UT_TRACE.TRACE('Finaliza CF_BOActions.AttendDataChangeToChannel',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE ATTENDDATACHANGEEXTREM
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        DTSYSDATE               MO_MOTIVE.ATTENTION_DATE%TYPE := UT_DATE.FDTSYSDATE;
        CNUNOTATTENDATT         CONSTANT GE_ATTRIBUTES.ATTRIBUTE_ID%TYPE := 134;
        SBCOMPSTYPE             PS_PROD_MOTI_PARAM.VALUE%TYPE;
        BLEXECTRANSITIONS       BOOLEAN ;
        NUCOMPONENTID           MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPPRODID            PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPERSONID              GE_PERSON.PERSON_ID%TYPE;

        CURSOR CUCONTACTSBYCOMP
        (
            INUCOMPONENTID    IN PR_COMPONENT.COMPONENT_ID%TYPE
        )
        IS
            SELECT A.*, A.ROWID
            FROM PR_COMP_CONTACT A
            WHERE A.COMPONENT_ID  = INUCOMPONENTID;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.AttendDataChangeExtrem');

        
       FOR RCCOMPBYPACK IN  MO_BCCOMPONENT.CUCOMPONENTSBYPACKAGE (INUPACKAGEID) LOOP
            IF (RCCOMPBYPACK.COMPONENT_TYPE_ID = CF_BOCONSTANTS.CNUTIPOCOMPEXTREMO OR
               RCCOMPBYPACK.COMPONENT_TYPE_ID = CF_BOCONSTANTS.CNUTIPOCOMPEXTREMOEXT )  THEN
                NUCOMPONENTID := RCCOMPBYPACK.COMPONENT_ID;
            END IF;
        END LOOP;

        UT_TRACE.TRACE('Componente de Motivo: '||NUCOMPONENTID);

        
        FOR RCCOMPCONTACT IN  MO_BCCOMP_CONTACT.CUCONTACTSBYCOMP(NUCOMPONENTID) LOOP
            NUPERSONID := RCCOMPCONTACT.PERSON_ID;
        END LOOP;

        UT_TRACE.TRACE('Nueva persona de Contacto t�cnico: '||NUPERSONID);

        
        NUCOMPPRODID := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(NUCOMPONENTID);
        UT_TRACE.TRACE('Componente de Producto: '||NUCOMPPRODID);
        
        FOR RCCOMPCONTACT IN  CUCONTACTSBYCOMP(NUCOMPPRODID) LOOP
            UT_TRACE.TRACE('Se actualiza PR_Comp_contact Id: '||RCCOMPCONTACT.COMP_CONTACT_ID||' Person: '||NUPERSONID||' Component_Id: '||NUCOMPPRODID);
            DAPR_COMP_CONTACT.UPDPERSON_ID(RCCOMPCONTACT.COMP_CONTACT_ID,NUPERSONID);
        END LOOP;

        FOR RCMOTIVEBYPACK IN MO_BCMOTIVE.CUMOTIVESBYPACKAGE(INUPACKAGEID) LOOP

            FOR RCCOMPONENT IN MO_BCCOMPONENT.CUCOMPBYMOTIVEORDERBYFATHER(RCMOTIVEBYPACK.MOTIVE_ID) LOOP

                BLEXECTRANSITIONS := GE_BOCONSTANTS.GETTRUE;

                IF ( DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(RCCOMPONENT.MOTIVE_STATUS_ID) != GE_BOCONSTANTS.CSBYES
                     AND RCCOMPONENT.MOTIVE_STATUS_ID != MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP ) THEN

                    DAMO_COMPONENT.UPDATTENTION_DATE(RCCOMPONENT.COMPONENT_ID,DTSYSDATE);

                    DAPR_COMPONENT.UPDLAST_UPD_DATE(RCCOMPONENT.COMPONENT_ID_PROD,DTSYSDATE);

                    IF DAPS_PROD_MOTI_PARAM.FBLEXIST( RCCOMPONENT.PRODUCT_MOTIVE_ID ,CNUNOTATTENDATT) THEN

                        SBCOMPSTYPE := PS_BOPRODMOTIPARAM.FSBGETPRODMOTIPARAM(RCCOMPONENT.PRODUCT_MOTIVE_ID,
                                                                              CNUNOTATTENDATT);

                        IF (INSTR(','||SBCOMPSTYPE||',',','||RCCOMPONENT.COMPONENT_TYPE_ID||',') > 0) THEN
                            BLEXECTRANSITIONS := GE_BOCONSTANTS.GETFALSE;
                        END IF;
                    END IF;


                    IF BLEXECTRANSITIONS THEN
                        UT_TRACE.TRACE('Ejecuta transici�n de estados '||RCCOMPONENT.COMPONENT_TYPE_ID
                                 ||' sbCompsType [ '||SBCOMPSTYPE|| ' ]');
                        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCCOMPONENT.COMPONENT_ID,
                                                                    GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND)
                                                                   );
                    ELSE
                        UT_TRACE.TRACE('No ejecuta trasici�n de estados '||RCCOMPONENT.COMPONENT_TYPE_ID||
                                 ' sbCompsType [ '||SBCOMPSTYPE|| ' ]');

                    END IF;
                END IF;
            END LOOP;
            

            DAMO_MOTIVE.UPDATTENTION_DATE(RCMOTIVEBYPACK.MOTIVE_ID,DTSYSDATE);
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCMOTIVEBYPACK.MOTIVE_ID,
                                                       GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND)
                                                      );
        END LOOP;

        DAMO_PACKAGES.UPDATTENTION_DATE(INUPACKAGEID,DTSYSDATE);
        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(INUPACKAGEID,
                                                    GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND)
                                                   );
        UT_TRACE.TRACE('Finaliza CF_BOActions.AttendDataChangeExtrem ');

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE UPDATEELEMENTSPBX
     IS
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;

        CURSOR CUCOMPLINKPROD
        (
        INUCOMPORIGIN    IN MO_COMPONENT.COMPONENT_ID%TYPE
        )
            IS
            SELECT A.*, A.ROWID
            FROM MO_COMP_LINK_PROD A
            WHERE A.COMP_ORIGIN_ID  = INUCOMPORIGIN;

    BEGIN
        UT_TRACE.TRACE('BEGIN CF_BOActions.UpdateElementsPBX', 1);

        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
        );
        UT_TRACE.TRACE('C�digo del Paquete Obtenido de la Instancia : ['||NUPACKAGEID||']', 2);

        IF NUPACKAGEID IS NULL THEN
            
            ERRORS.SETERROR(MO_BOCONSTERROR.CNUERRVALUESINSTNOEXIST);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        FOR RCCOMP IN MO_BCCOMPONENT.CUCOMPONENTSBYPACK(NUPACKAGEID) LOOP
            
            IF RCCOMP.MOTIVE_STATUS_ID = MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP THEN
                
                IF (DAMO_MOTIVE.FNUGETMOTIVE_TYPE_ID(DAMO_COMPONENT.FNUGETMOTIVE_ID(RCCOMP.COMPONENT_ID)) = MO_BOCONSTANTS.CNUSERVADD_MOTIVE_TYPE) THEN
                       UT_TRACE.TRACE('Adici�n Componentes - Ocupa Elementos del Componente ['||RCCOMP.COMPONENT_ID||']', 2);
                       MO_BONETWORKELEMENT.OCCUELEMASSIGN(RCCOMP.COMPONENT_ID);
                
                ELSIF (DAMO_MOTIVE.FNUGETMOTIVE_TYPE_ID(DAMO_COMPONENT.FNUGETMOTIVE_ID(RCCOMP.COMPONENT_ID)) = MO_BOCONSTANTS.CNURETIRECOMP_MOTI_TYPE) THEN
                            UT_TRACE.TRACE('Retiro de Componente - Libera Elementos del Componente ['||RCCOMP.COMPONENT_ID||']', 2);
                            MO_BOINTERFACEIM.RELEASEELEMRETIRED(RCCOMP.COMPONENT_ID);
                
                ELSIF (DAMO_MOTIVE.FNUGETMOTIVE_TYPE_ID(DAMO_COMPONENT.FNUGETMOTIVE_ID(RCCOMP.COMPONENT_ID)) = MO_BOCONSTANTS.CNUCLASSCHANG_MOTI_TYPE) THEN
                             UT_TRACE.TRACE('Cambio de Clase de Servicio - Libera/Ocupa Elementos del Componente ['||RCCOMP.COMPONENT_ID||']', 2);
                             
                             UT_TRACE.TRACE('Libera Elementos del Componente que se retira ['||RCCOMP.COMPONENT_ID||']', 2);
                             MO_BOINTERFACEIM.RELEASEELEMRETIRED(RCCOMP.COMPONENT_ID);
                             
                             FOR  RCCOMPONENT IN CUCOMPLINKPROD(RCCOMP.COMPONENT_ID) LOOP
                                 UT_TRACE.TRACE('Ocupa Elementos del Componente con la nueva clase de servicio ['||RCCOMPONENT.COMPONENT_ID||']', 2);
                                 MO_BONETWORKELEMENT.OCCUELEMASSIGN(RCCOMPONENT.COMPONENT_ID);
                             END LOOP;
                END IF;
            END IF;
        END LOOP;

    UT_TRACE.TRACE('END CF_BOActions.UpdateElementsPBX', 1);

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('EXCEPTION CONTROLLED_ERROR CF_BOActions.UpdateElementsPBX', 1);
            RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            UT_TRACE.TRACE('EXCEPTION OTHERS CF_BOActions.UpdateElementsPBX', 1);
			ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END;

    















    PROCEDURE ANULNETELEM
    IS
        NUIDSOLICITUDANULA      MO_PACKAGES.PACKAGE_ID%TYPE;
        NUIDSOLICITUDPARAANULAR MO_PACKAGES.PACKAGE_ID%TYPE;
        TBLCOMPONENTESHIJOS     DAMO_COMPONENT.TYTBMO_COMPONENT;
    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.AnulNetElem', 1);
        
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUIDSOLICITUDANULA
            );
        
        
        IF CF_BOANNULMENT.FBLANNULPACK(NUIDSOLICITUDANULA)
        THEN
           UT_TRACE.TRACE('La anulaci�n se realiza por solicitud.', 2);
           
           NUIDSOLICITUDPARAANULAR := CF_BOANNULMENT.FNUGETANNULPACK(NUIDSOLICITUDANULA);
           
           MO_BOEXPREXECPROCESS.EXPRREVERSEELEMENT(NUIDSOLICITUDPARAANULAR,MO_BOPARAMETER.FNUGETENTITY_PACKAGES);
        END IF;
        
        IF CF_BOANNULMENT.FBLANNULCOMP(NUIDSOLICITUDANULA)
        THEN
          UT_TRACE.TRACE('La anulaci�n se realiza por componente.', 2);
          
          FOR RCCOMPONENTE IN CF_BOANNULMENT.CUANNULCOMP(NUIDSOLICITUDANULA)
          LOOP
               
               MO_BOEXPREXECPROCESS.EXPRREVERSEELEMENT(RCCOMPONENTE.COMPONENT_ID,MO_BOPARAMETER.FNUGETENTITY_COMPONENT);
               
               TBLCOMPONENTESHIJOS := MO_BCCOMPONENT.FTBGETCHILDDIRECTCOMP(RCCOMPONENTE.COMPONENT_ID);
               
               
               IF TBLCOMPONENTESHIJOS.FIRST IS NOT NULL THEN
                   
                   FOR I IN TBLCOMPONENTESHIJOS.FIRST..TBLCOMPONENTESHIJOS.LAST
                   LOOP
                       UT_TRACE.TRACE('Componente hijo a reversar Comopnent_id['||TBLCOMPONENTESHIJOS(I).COMPONENT_ID||']', 2);
                       MO_BOEXPREXECPROCESS.EXPRREVERSEELEMENT(TBLCOMPONENTESHIJOS(I).COMPONENT_ID,MO_BOPARAMETER.FNUGETENTITY_COMPONENT);
                   END LOOP;
               END IF;
          END LOOP;
        END IF;
        UT_TRACE.TRACE('Finaliza CF_BOActions.AnulNetElem', 1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANULNETELEM;

    














    PROCEDURE ANNULSTATS
    IS
        INUIDSOLICITUDANULA     MO_PACKAGES.PACKAGE_ID%TYPE;
        NUIDSOLICITUDPARAANULAR MO_PACKAGES.PACKAGE_ID%TYPE;
        RCSOLICITUD             DAMO_PACKAGES.STYMO_PACKAGES;
        NUPRODSUSPENSIONID      PR_PROD_SUSPENSION.PROD_SUSPENSION_ID%TYPE;
        TBMOTIVO                DAMO_MOTIVE.TYTBMO_MOTIVE;
        NUINDICEMOTI            VARCHAR2(200);
        TBCOMPONENTE            DAMO_COMPONENT.TYTBMO_COMPONENT;
        NUINDICECOMP            VARCHAR2(200);
        NUPRODUCTID             PR_PRODUCT.PRODUCT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.AnulStat', 1);
        
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            INUIDSOLICITUDANULA
            );
        
        
        NUIDSOLICITUDPARAANULAR := CF_BOANNULMENT.FNUGETANNULPACK(INUIDSOLICITUDANULA);
        
        RCSOLICITUD := DAMO_PACKAGES.FRCGETRECORD(NUIDSOLICITUDPARAANULAR);
        NUPRODUCTID := MO_BOPACKAGES.FNUFINDPRODUCTID( RCSOLICITUD.PACKAGE_ID );
        
        IF (RCSOLICITUD.PACKAGE_TYPE_ID =  MO_BOUTILGENERATEREQUEST.FNURETIRE_TYPE) THEN
            
            PKTBLSERVSUSC.UPWITHDRAWDATE(NUPRODUCTID, UT_DATE.FDTMAXDATE);
            
            FOR RCCOMPONENT IN PR_BCCOMPONENT.CUCOMPONENTSBYPRODUCTID(NUPRODUCTID) LOOP
                DACOMPSESU.UPDCMSSFERE(RCCOMPONENT.COMPONENT_ID, UT_DATE.FDTMAXDATE);
            END LOOP;
        END IF;
        
        IF (RCSOLICITUD.PACKAGE_TYPE_ID = PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(PS_BOPACKAGETYPE.CSBTAGGENERSUSPVOL))
        THEN
            NUPRODSUSPENSIONID := CF_BOANNULMENT.FNUPRODSUSPENSIONID(NUIDSOLICITUDPARAANULAR);
            IF (NUPRODSUSPENSIONID IS NOT NULL) THEN
                
                DAPR_PROD_SUSPENSION.UPDINACTIVE_DATE(NUPRODSUSPENSIONID, SYSDATE);
                
                DAPR_PROD_SUSPENSION.UPDACTIVE(NUPRODSUSPENSIONID, 'N');
            END IF;
            
            FOR RCCOMPSUSP IN CF_BOANNULMENT.CUPRCOMPSUSPENSION(NUPRODUCTID) LOOP
                  
                  DAPR_COMP_SUSPENSION.UPDINACTIVE_DATE(RCCOMPSUSP.COMP_SUSPENSION_ID, SYSDATE);
                  
                  DAPR_COMP_SUSPENSION.UPDACTIVE(RCCOMPSUSP.COMP_SUSPENSION_ID, 'N');
            END LOOP;
        END IF;
        
        TBMOTIVO := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(RCSOLICITUD.PACKAGE_ID);
        NUINDICEMOTI := TBMOTIVO.FIRST;
        WHILE NUINDICEMOTI IS NOT NULL LOOP
            
            IF (TBMOTIVO(NUINDICEMOTI).MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNURETIRECOMP_MOTI_TYPE)
               THEN
                
                
                TBCOMPONENTE := MO_BCCOMPONENT.FTBCOMPONENTSBYMOT(TBMOTIVO(NUINDICEMOTI).MOTIVE_ID);
                NUINDICECOMP := TBCOMPONENTE.FIRST;
                WHILE NUINDICECOMP IS NOT NULL LOOP
                    IF(DAPS_COMPONENT_TYPE.FSBGETAUTOMATIC_ACTIVATION(TBCOMPONENTE(NUINDICECOMP).COMPONENT_TYPE_ID) = GE_BOCONSTANTS.GETYES )
                    THEN
                        DACOMPSESU.UPDCMSSFERE(TBCOMPONENTE(NUINDICECOMP).COMPONENT_ID_PROD, UT_DATE.FDTMAXDATE);
                    END IF;
                    NUINDICECOMP := TBCOMPONENTE.NEXT(NUINDICECOMP);
                END LOOP;
            END IF;
            NUINDICEMOTI := TBMOTIVO.NEXT(NUINDICEMOTI);
        END LOOP;
        UT_TRACE.TRACE('Finaliza CF_BOActions.AnulStat',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULSTATS;

    PROCEDURE UPDATEELEMENTCATEGORY
    (
        INUIDSOLICITUDANULA IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        TBCOMPONENTES           GE_TYTBNUMBER;
        NUIDSOLICITUDPARAANULAR MO_PACKAGES.PACKAGE_ID%TYPE;
        NUINDEX                 BINARY_INTEGER := 1;
        RCSOLICITUD             DAMO_PACKAGES.STYMO_PACKAGES;
        RCSOLICITUDANULAR       DAMO_PACKAGES.STYMO_PACKAGES;

        NUANNULPACKAGETYPE      PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_GENER_ANULACIONSOLICIT');

        CUELEMENTS              CONSTANTS.TYREFCURSOR;
        RCELEMENT               DAPR_NETWORK_ELEM_OPER.STYPR_NETWORK_ELEM_OPER;

        FUNCTION FBLISPACKAGETYPE
        (
            INUPACKAGEID    MO_PACKAGES.PACKAGE_ID%TYPE
        )
        RETURN BOOLEAN
        IS
            NUPACKAGETYPEID         MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
            NUVENTALINMOVTY         PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_VENTA_LINEA_MOVIL_100002');
            NUVENTALINMOVCORTY      PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_LBC_VENTA_LINEA_MOVIL_CORPORATIVO_100021');
            NUVENTALINMOVPRETY      PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_LBC_VENTA_LINEA_MOVIL_PREACTIVADO_100024');
            NUVENTAINTERMOVTY       PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_LBC_VENTA_INTERNET_MOVIL_100041');
            NUVENTAINTERMOVCORTY    PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_LBC_VENTA_INTERNET_MOVIL_CORPORATIVO_100043');
            NUVENTAINTERMOVPRETY    PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_LBC_VENTA_INTERNET_MOVIL_PREACTIVADO_100045');
            NUVENTAPBXTY            PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_LBC_VENTA_PBX_100054');
            NUVENTADATOSFIJATY      PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_LBC_VENTA_DE_TRANSMISION_DE_DATOS_100080');
        BEGIN
            UT_TRACE.TRACE('Inicia CF_BOActions.UpdateElementCategory.fblIsPackageType inuPackageId['||INUPACKAGEID||']',5);
            NUPACKAGETYPEID := DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID(INUPACKAGEID);
            UT_TRACE.TRACE('Tipo de paquete: package_type_id['||NUPACKAGETYPEID||']',7);
            IF NUPACKAGETYPEID = MO_BOUTILGENERATEREQUEST.FNUSALE_TYPE OR NUPACKAGETYPEID = NUVENTALINMOVTY
               OR NUPACKAGETYPEID = NUVENTALINMOVCORTY OR NUPACKAGETYPEID = NUVENTALINMOVPRETY
               OR NUPACKAGETYPEID = NUVENTAINTERMOVTY OR NUPACKAGETYPEID = NUVENTAINTERMOVCORTY
               OR NUPACKAGETYPEID = NUVENTAINTERMOVPRETY
               OR NUPACKAGETYPEID = NUVENTAPBXTY
               OR NUPACKAGETYPEID = NUVENTADATOSFIJATY
            THEN
                UT_TRACE.TRACE('Finaliza CF_BOActions.UpdateElementCategory.fblIsPackageType [TRUE]');
                RETURN TRUE;
            ELSE
                UT_TRACE.TRACE('Finaliza CF_BOActions.UpdateElementCategory.fblIsPackageType [FALSE]');
                RETURN FALSE;
            END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FBLISPACKAGETYPE;

    BEGIN
        UT_TRACE.TRACE('Inicio CF_BOActions.UpdateElementCategory PACKAGE_id['||INUIDSOLICITUDANULA||']', 1);
        
        RCSOLICITUD := DAMO_PACKAGES.FRCGETRECORD(INUIDSOLICITUDANULA);

        
        IF (RCSOLICITUD.PACKAGE_TYPE_ID = NUANNULPACKAGETYPE) THEN
            TBCOMPONENTES := GE_TYTBNUMBER();
            UT_TRACE.TRACE('Identificador de la solicitud de anulaci�n '||INUIDSOLICITUDANULA||'.', 2);

            
            IF CF_BOANNULMENT.FBLANNULPACK(INUIDSOLICITUDANULA)
            THEN
                UT_TRACE.TRACE('La anulaci�n se realiza por solicitud.', 2);
                
                NUIDSOLICITUDPARAANULAR := CF_BOANNULMENT.FNUGETANNULPACK(INUIDSOLICITUDANULA);

                
                RCSOLICITUDANULAR := DAMO_PACKAGES.FRCGETRECORD(NUIDSOLICITUDPARAANULAR);

                UT_TRACE.TRACE('Identificador de la solicitud a anular '||RCSOLICITUDANULAR.PACKAGE_ID||'.', 2);

                
                IF (FBLISPACKAGETYPE(RCSOLICITUDANULAR.PACKAGE_ID))
                THEN
                    UT_TRACE.TRACE('Solicitud de venta a anular '||RCSOLICITUDANULAR.PACKAGE_ID||'.', 2);
                    
                    
                    IF (CF_BOANNULMENT.CUCOMPANULMEDIASOL%ISOPEN) THEN
                       CLOSE CF_BOANNULMENT.CUCOMPANULMEDIASOL;
                    END IF;
                     
                     UT_TRACE.TRACE('Obteniendo componentes que requieren mediaci�n.', 2);
                     FOR RCCOMPONENT IN CUGETELEMENTSFROMPACKAGE(NUIDSOLICITUDPARAANULAR, IM_BOCONSTANTS.CNUCATEGORYSERVICES)
                     LOOP
                        UT_TRACE.TRACE('Componente que requiere mediaci�n Component_id['||RCCOMPONENT.COMPONENT_ID||']', 3);
                        UT_TRACE.TRACE('Actualizando categor�a al elemento Network_elem_oper_id['||RCCOMPONENT.NETWORK_ELEM_OPER_ID||'] Category_id['||CNURETIRECATEGORY||']', 4);

                        DAPR_NETWORK_ELEM_OPER.UPDCATEGORY_ID(RCCOMPONENT.NETWORK_ELEM_OPER_ID, CNURETIRECATEGORY);

                     END LOOP;
                END IF;
            END IF;
            
            IF CF_BOANNULMENT.FBLANNULCOMP(INUIDSOLICITUDANULA)
            THEN
                UT_TRACE.TRACE('La anulaci�n se realiza por componente.', 2);
                IF (CF_BOANNULMENT.CUCOMPANULMEDIACOMP%ISOPEN) THEN
                   CLOSE CF_BOANNULMENT.CUCOMPANULMEDIACOMP;
                END IF;
                
                FOR RCCOMPONENT IN CF_BOANNULMENT.CUCOMPANULMEDIACOMP (INUIDSOLICITUDANULA)
                LOOP
                    UT_TRACE.TRACE('Componente que requiere mediaci�n Component_id['||RCCOMPONENT.COMPONENT_ID||']', 3);

                    CUELEMENTS := PR_BCNETWORK_ELEM_OPER.FRFGETELEMENTSBYCOMPONENTID(RCCOMPONENT.COMPONENT_ID);

                    
                    FETCH CUELEMENTS INTO RCELEMENT;

                    
                    WHILE CUELEMENTS%FOUND
                    LOOP
                        UT_TRACE.TRACE('Actualizando categor�a al elemento Network_elem_oper_id['||RCELEMENT.NETWORK_ELEM_OPER_ID||'] Category_id['||CNURETIRECATEGORY||']', 4);
                        DAPR_NETWORK_ELEM_OPER.UPDCATEGORY_ID(RCELEMENT.NETWORK_ELEM_OPER_ID, CNURETIRECATEGORY);
                        FETCH CUELEMENTS INTO RCELEMENT;
                    END LOOP;

                    
                    CLOSE CUELEMENTS;
                END LOOP;
            END IF;
        END IF;

        UT_TRACE.TRACE('Finaliza CF_BOActions.UpdateElementCategory', 1);

    END UPDATEELEMENTCATEGORY;
    



























 PROCEDURE ACTIVATIONFLOWCOMMPLAN
        IS

            TBMOTIVOSPORPAQUETE     DAMO_MOTIVE.TYTBMO_MOTIVE;
            NUESTADOMOT             PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
            CNUIDACCESPERAPED       CONSTANT NUMBER  := 8068;
            NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
            NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
            NUMOTIVETYPE            MO_MOTIVE.MOTIVE_TYPE_ID%TYPE;

    BEGIN

        UT_TRACE.TRACE('Inicializa CF_BOActions.ActivationFlowCommPlan',10);

        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_MOTIVE,
            MO_BOCONSTANTS.CSBMOTIVE_ID,
            NUMOTIVEID
        );
        UT_TRACE.TRACE('C�digo del Motivo Obtenido de la Instancia : ['||NUMOTIVEID||']', 10);

        IF NUMOTIVEID IS NULL THEN
            
            GE_BOINSTANCE.GETVALUE
            (
                MO_BOCONSTANTS.CSBMO_PACKAGES,
                MO_BOCONSTANTS.CSBPACKAGE_ID,
                NUPACKAGEID
            );
            UT_TRACE.TRACE('C�digo del Paquete Obtenido de la Instancia : ['||NUPACKAGEID||']', 10);
         ELSE
             NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVEID);
         END IF;

        
        IF(DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID(NUPACKAGEID) = 588) THEN
            UT_TRACE.TRACE('Solicitud Cambio de Plan Comercial'||NUPACKAGEID,10);
            
            TBMOTIVOSPORPAQUETE := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(NUPACKAGEID);

            
            IF(TBMOTIVOSPORPAQUETE.COUNT > 0) THEN
                
                FOR IND IN TBMOTIVOSPORPAQUETE.FIRST .. TBMOTIVOSPORPAQUETE.LAST LOOP

                    UT_TRACE.TRACE('Motivo Asociado al Cambio de Plan Comercial'||TBMOTIVOSPORPAQUETE(IND).MOTIVE_ID,10);
                    
                    NUESTADOMOT := DAMO_MOTIVE.FNUGETMOTIVE_STATUS_ID(TBMOTIVOSPORPAQUETE(IND).MOTIVE_ID);
                    
                    NUMOTIVETYPE := DAMO_MOTIVE.FNUGETMOTIVE_TYPE_ID(TBMOTIVOSPORPAQUETE(IND).MOTIVE_ID);
                    
                    IF (DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(NUESTADOMOT) = 'N' AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTICAMBPLANCOMER AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTIEMPAQUETA AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTIDESEMPAQUETA AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTDESEMPPROD AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTEMPPROD) THEN
                        UT_TRACE.TRACE('No se reenv�a el Cambio de Plan Comercial',12);
                        UT_TRACE.TRACE('Finaliza CF_BOActions.ActivationFlowCommPlan',10);
                        
                        RETURN;
                    END IF;
                END LOOP;
            ELSE
               UT_TRACE.TRACE('La solicitud no tiene motivos asociados',10);
               
            END IF;

            
            MO_BOWF_PACK_INTERFAC.PREPNOTTOWFPACK (NUPACKAGEID, CNUIDACCESPERAPED,
                        MO_BOCAUSAL.FNUGETSUCCESS, MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY,
                        FALSE);

            UT_TRACE.TRACE('Se reenv�a el Cambio de Plan Comercial',12);
            UT_TRACE.TRACE('Finaliza CF_BOActions.ActivationFlowCommPlan',10);

          END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ACTIVATIONFLOWCOMMPLAN;




















    PROCEDURE UPDSUBSCRIBERSTATUS
    (
        INUSUBSCRIBER    IN    GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS
    BEGIN
        NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDSUBSCRIBERSTATUS;


    





















    PROCEDURE UPDATESUBSCRIBERSTATUS
    (
        INUIDSOLICITUD    IN    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
    BEGIN
        NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATESUBSCRIBERSTATUS;

    FUNCTION VALCOMMPLANCHANGE
        (
        INUPACKAGEID    IN MO_PACKAGES.PACKAGE_ID%TYPE
        )
    RETURN BOOLEAN
    IS
        RCMOBILLDATACHANGE      MO_BILL_DATA_CHANGE%ROWTYPE;
        NUNEWCOMMERCIALPLANID   MO_BILL_DATA_CHANGE.NEW_COMMERCIAL_PLAN_ID%TYPE;

    BEGIN

        UT_TRACE.TRACE('Inicia CF_BOActions.ValCommPlanChange '||INUPACKAGEID,10);
        MO_BCBILL_DATA_CHANGE.GETRECORDBYPACKID(INUPACKAGEID,RCMOBILLDATACHANGE);
        NUNEWCOMMERCIALPLANID := RCMOBILLDATACHANGE.NEW_COMMERCIAL_PLAN_ID;

        
        IF (NUNEWCOMMERCIALPLANID IS NOT NULL) THEN
            RETURN TRUE;
        END IF;
        RETURN FALSE;

        UT_TRACE.TRACE('Finaliza CF_BOActions.ValCommPlanChange',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    


















    FUNCTION VALSOCIOECOSTRACHANGE
        (
        INUPACKAGEID    IN MO_PACKAGES.PACKAGE_ID%TYPE
        )
    RETURN BOOLEAN
    IS
        RCMOBILLDATACHANGE      MO_BILL_DATA_CHANGE%ROWTYPE;
        NUNEWCATEGORYID         MO_BILL_DATA_CHANGE.NEW_CATEGORY_ID%TYPE;
        NUNEWSUBCATEGORYID      MO_BILL_DATA_CHANGE.NEW_SUBCATEGORY_ID%TYPE;


    BEGIN

        UT_TRACE.TRACE('Inicia CF_BOActions.ValSocioEcoStraChange '||INUPACKAGEID,10);
        MO_BCBILL_DATA_CHANGE.GETRECORDBYPACKID(INUPACKAGEID,RCMOBILLDATACHANGE);
        NUNEWCATEGORYID  := RCMOBILLDATACHANGE.NEW_CATEGORY_ID;
        NUNEWSUBCATEGORYID:=RCMOBILLDATACHANGE.NEW_SUBCATEGORY_ID;


        
        IF (NUNEWCATEGORYID IS NOT NULL AND NUNEWSUBCATEGORYID IS NOT NULL ) THEN
            RETURN TRUE;
        END IF;
        RETURN FALSE;

        UT_TRACE.TRACE('Finaliza CF_BOActions.ValSocioEcoStraChange',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALSOCIOECOSTRACHANGE;

    































  PROCEDURE ATTENDATACHANGEPRODUCT
    (
        INUPACKAGEID        MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        NUSUBSCRIBERID      PR_SUBS_TYPE_PROD.SUBSCRIBER_ID%TYPE;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        DTSYSDATE           DATE :=UT_DATE.FDTSYSDATE;
        RCRECORDFIGURE      DAPR_PRODUCT_FIGURE.STYPR_PRODUCT_FIGURE;
        RCSERVSUSC          SERVSUSC%ROWTYPE;

        NUFIGURETYPEID      MO_FIGURE.FIGURE_TYPE_ID%TYPE;
        NUFIGUREDESCRIPTION MO_FIGURE.DESCRIPTION%TYPE;
        NUPRODUCTFIGUREID   PR_PRODUCT_FIGURE.PRODUCT_FIGURE_ID%TYPE;
        SBIMPRIMELD         SERVSUSC.SESUIMLD%TYPE;
        SBPRIVACY           PR_PRODUCT.IS_PRIVATE%TYPE;

        RCPRODFIGUREOLD     DAPR_PRODUCT_FIGURE.STYPR_PRODUCT_FIGURE;
        
        CURSOR CUGETSUBSCRIBERID
        (
            INUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE
        )
        IS
        SELECT SUBSCRIBER_ID
        FROM MO_SUBS_TYPE_MOTIV
        WHERE PACKAGE_ID = INUPACKAGEID
        AND ROLE_ID = CC_BOCONSTANTS.CNUUSER_CLIENT_ROLE;

        CURSOR CUGETRECORDMOFIGURE
        (
            INUMOTIVEID MO_MOTIVE.MOTIVE_ID%TYPE
        )
        IS
        SELECT  *
        FROM    MO_FIGURE
        WHERE   MOTIVE_ID = INUMOTIVEID
        AND     ROWNUM = 1;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.attenDataChangeProduct',5);

        
        NUMOTIVEID := MO_BOPACKAGES.FNUGETFIRSTMOTIVE(INUPACKAGEID);
        
        NUPRODUCTID := DAMO_MOTIVE.FNUGETPRODUCT_ID(NUMOTIVEID);

        
        FOR RCGETSUBSCRIBERID IN CUGETSUBSCRIBERID(INUPACKAGEID) LOOP
            NUSUBSCRIBERID:= RCGETSUBSCRIBERID.SUBSCRIBER_ID;

             



            
            PR_BOSUBSBYPRODUCT.UPDPRODROLE(NUPRODUCTID,NUSUBSCRIBERID,CC_BOCONSTANTS.CNUUSER_CLIENT_ROLE);

        END LOOP;

        
        FOR RCRECORD IN CUGETRECORDMOFIGURE(NUMOTIVEID) LOOP
            NUFIGURETYPEID := RCRECORD.FIGURE_TYPE_ID;
            NUFIGUREDESCRIPTION := RCRECORD.DESCRIPTION;
            
            RCPRODFIGUREOLD := PR_BCPRODUCT_FIGURE.FRCFIGBYPRODACT(NUPRODUCTID, UT_DATE.FDTSYSDATE());

            IF (RCPRODFIGUREOLD.PRODUCT_FIGURE_ID IS NOT NULL) THEN
                
                UT_TRACE.TRACE('Se actualiza la figuraci�n: ',7);
                UT_TRACE.TRACE('PR_PRODUCT_FIGURE ['||NUPRODUCTFIGUREID||']',8);
                UT_TRACE.TRACE('PRODUCT_ID ['||NUPRODUCTID||']',8);

                RCPRODFIGUREOLD.FINAL_DATE := DTSYSDATE;
                RCPRODFIGUREOLD.LAST_UPDATE:= DTSYSDATE;

                DAPR_PRODUCT_FIGURE.UPDRECORD(RCPRODFIGUREOLD);
            END IF;
            
            
            RCRECORDFIGURE.PRODUCT_FIGURE_ID:= PR_BOSEQUENCE.GETPRODUCTFIGUREID();
            RCRECORDFIGURE.FIGURE_TYPE_ID   := NUFIGURETYPEID;
            RCRECORDFIGURE.PRODUCT_ID       := NUPRODUCTID;
            RCRECORDFIGURE.DESCRIPTION      := NUFIGUREDESCRIPTION;
            RCRECORDFIGURE.INITIAL_DATE     := UT_DATE.FDTSYSDATE();
            RCRECORDFIGURE.FINAL_DATE       := UT_DATE.FDTMAXDATE();
            RCRECORDFIGURE.LAST_UPDATE      := UT_DATE.FDTSYSDATE();
            DAPR_PRODUCT_FIGURE.INSRECORD(RCRECORDFIGURE);


        END LOOP;

        
        SBPRIVACY := DAMO_MOTIVE.FSBGETPRIVACY_FLAG(NUMOTIVEID);
        DAPR_PRODUCT.UPDIS_PRIVATE(NUPRODUCTID, SBPRIVACY);

        
        SBIMPRIMELD := DAMO_MOTIVE.FSBGETCUSTOM_DECISION_FLAG(NUMOTIVEID);
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD(NUPRODUCTID);
        
        IF(SBIMPRIMELD = GE_BOCONSTANTS.CSBYES)
        THEN
            RCSERVSUSC.SESUIMLD := PKCONSTANTE.SI;
        ELSE
            RCSERVSUSC.SESUIMLD := PKCONSTANTE.NO;
        END IF;
        PKTBLSERVSUSC.UPRECORD(RCSERVSUSC);

        
        DAMO_MOTIVE.UPDATTENTION_DATE(NUMOTIVEID,DTSYSDATE);
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(NUMOTIVEID , 60);
        UT_TRACE.TRACE('Finaliza CF_BOActions.attenDataChangeProduct',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDATACHANGEPRODUCT;

    





















    PROCEDURE REGVENTASERVING
    IS
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGE           DAMO_PACKAGES.STYMO_PACKAGES;
        NUEMPRESA           SUSCRIPC.SUSCSIST%TYPE;

        CNUGENERICO CONSTANT NUMBER := 6121;

        
        FUNCTION FNUPRODUCTOGENERICO( INUSUBSCRIPTIONID IN SUSCRIPC.SUSCCODI%TYPE )
        RETURN PR_PRODUCT.PRODUCT_ID%TYPE
        IS
            NUINDEX         BINARY_INTEGER;
            TBPRODUCTS      DAPR_PRODUCT.TYTBPR_PRODUCT;
            RCPRODUCTS      DAPR_PRODUCT.STYPR_PRODUCT;
            NUPRODUCTRETURN PR_PRODUCT.PRODUCT_ID%TYPE := NULL;
        BEGIN
            TBPRODUCTS := PR_BCPRODUCT.FTBPRODSBYSUBSCID( INUSUBSCRIPTIONID );
            NUINDEX := TBPRODUCTS.FIRST;
            WHILE NUINDEX IS NOT NULL LOOP
                RCPRODUCTS := TBPRODUCTS(NUINDEX);
                IF (RCPRODUCTS.PRODUCT_TYPE_ID = CNUGENERICO) THEN
                    NUPRODUCTRETURN := RCPRODUCTS.PRODUCT_ID;
                    EXIT;
                END IF;
                NUINDEX := TBPRODUCTS.NEXT(NUINDEX);
            END LOOP;
            RETURN NUPRODUCTRETURN;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FNUPRODUCTOGENERICO;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BoActions.RegVentaServIng',5);

        
        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            RCPACKAGE.PACKAGE_ID
        );
        
        RCPACKAGE := DAMO_PACKAGES.FRCGETRECORD(RCPACKAGE.PACKAGE_ID);

        
        
        IF  (RCPACKAGE.TAG_NAME = 'P_SOLICITUD_DE_SERVICIO_TECNICO_CLIENTES_EXTERNOS_299') THEN
            RCMOTIVE := MO_BOPACKAGES.FRCGETMOTIBYTAGNAME(RCPACKAGE.PACKAGE_ID, 'M_SERVICIO_TECNICO_CLIENTES_EXTERNOS_99');
        
        ELSIF (RCPACKAGE.TAG_NAME = 'P_LBC_VENTA_DE_SERVICIOS_DE_INGENIERIA_100101') THEN
            RCMOTIVE := MO_BOPACKAGES.FRCGETMOTIBYTAGNAME(RCPACKAGE.PACKAGE_ID, 'M_SOLICITUD_DE_TRABAJOS_PARA_UN_CLIENTE_100113');
        ELSE
        
            RCMOTIVE := MO_BOPACKAGES.FRCGETINITIALMOTIVE(RCPACKAGE.PACKAGE_ID);
        END IF;

        
        NUEMPRESA := CC_BOEMPRESA.FNUEMPRESACONTRATO(RCMOTIVE.SUBSCRIPTION_ID);

        
        RCMOTIVE.PRODUCT_ID := FNUPRODUCTOGENERICO(RCMOTIVE.SUBSCRIPTION_ID);

        
        IF ( RCMOTIVE.PRODUCT_ID IS NULL ) THEN
            
            UT_TRACE.TRACE('Creacion producto Motivo['||RCMOTIVE.MOTIVE_ID||']',3);
            PR_BOCREATIONPRODUCT.CREATIONPRODUCT
            (
                RCMOTIVE.MOTIVE_ID,
                RCMOTIVE.PRODUCT_ID,
                PR_BOPARAMETER.FNUGETPRODACTI,
                TRUE
            );
        END IF;

        UT_TRACE.TRACE('nuProductId['||RCMOTIVE.PRODUCT_ID||']',5);

        
        DAMO_MOTIVE.UPDPRODUCT_ID(RCMOTIVE.MOTIVE_ID,RCMOTIVE.PRODUCT_ID);

        
        MO_BOATTENTION.ACTCREATEPLANWF;

        UT_TRACE.TRACE('Finaliza CF_BoActions.RegVentaServIng',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGVENTASERVING;





















    PROCEDURE STANDBYFLOWCOMMPLAN
        IS

            TBMOTIVOSPORPAQUETE     DAMO_MOTIVE.TYTBMO_MOTIVE;
            NUESTADOMOT             PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
            NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
            NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
            NUMOTIVETYPE            MO_MOTIVE.MOTIVE_TYPE_ID%TYPE;

    BEGIN

        UT_TRACE.TRACE('Inicializa CF_BOActions.StandByFlowCommPlan',10);

        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_MOTIVE,
            MO_BOCONSTANTS.CSBMOTIVE_ID,
            NUMOTIVEID
        );
        UT_TRACE.TRACE('C�digo del Motivo Obtenido de la Instancia : ['||NUMOTIVEID||']', 10);

        IF NUMOTIVEID IS NULL THEN
            
            GE_BOINSTANCE.GETVALUE
            (
                MO_BOCONSTANTS.CSBMO_PACKAGES,
                MO_BOCONSTANTS.CSBPACKAGE_ID,
                NUPACKAGEID
            );
            UT_TRACE.TRACE('C�digo del Paquete Obtenido de la Instancia : ['||NUPACKAGEID||']', 10);
         ELSE
             NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVEID);
         END IF;

        
        IF(DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID(NUPACKAGEID) = 588) THEN
            UT_TRACE.TRACE('Solicitud Cambio de Plan Comercial'||NUPACKAGEID,10);
            
            TBMOTIVOSPORPAQUETE := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(NUPACKAGEID);

            
            IF(TBMOTIVOSPORPAQUETE.COUNT > 0) THEN
                
                FOR IND IN TBMOTIVOSPORPAQUETE.FIRST .. TBMOTIVOSPORPAQUETE.LAST LOOP

                    UT_TRACE.TRACE('Motivo Asociado al Cambio de Plan Comercial'||TBMOTIVOSPORPAQUETE(IND).MOTIVE_ID,10);
                    
                    NUESTADOMOT := DAMO_MOTIVE.FNUGETMOTIVE_STATUS_ID(TBMOTIVOSPORPAQUETE(IND).MOTIVE_ID);
                    
                    NUMOTIVETYPE := DAMO_MOTIVE.FNUGETMOTIVE_TYPE_ID(TBMOTIVOSPORPAQUETE(IND).MOTIVE_ID);
                    
                    IF (DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(NUESTADOMOT) = 'N' AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTICAMBPLANCOMER AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTIEMPAQUETA AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTIDESEMPAQUETA AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTDESEMPPROD AND
                    NUMOTIVETYPE <> CF_BOCONSTANTS.FNUGETTIPOMOTEMPPROD) THEN
                        UT_TRACE.TRACE('Se pone el plan comercial en espera de finalizaci�n de los flujos asociados',12);
                        MO_BOACTIONUTIL.SETEXECACTIONINSTANDBY(TRUE);
                        RETURN;
                    END IF;
                END LOOP;
            ELSE
               UT_TRACE.TRACE('La solicitud no tiene motivos asociados',10);
               RETURN;
            END IF;
          END IF;
    UT_TRACE.TRACE('Finaliza CF_BOActions.StandByFlowCommPlan',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END STANDBYFLOWCOMMPLAN;

        PROCEDURE CHANGECLIENT
        (
            INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
        )
        IS
            NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
            TBPRODUCTS              DAPR_PRODUCT.TYTBPR_PRODUCT;
            NUSUSCTYPE              SUSCRIPC.SUSCTISU%TYPE;
            NUSUBSTYPEPRODID        PR_SUBS_TYPE_PROD.SUBS_TYPE_PROD_ID%TYPE;
            RCSUBCRIPTIONS          SUSCRIPC%ROWTYPE;
        BEGIN
            UT_TRACE.TRACE('Inicia CF_BOActions.ChangeClient',10);
            UT_TRACE.TRACE('inuPackageId ['||INUPACKAGEID||']',10);
            NUPACKAGEID := INUPACKAGEID;
            
            FOR RCBILLDATACHANGE IN MO_BCBILL_DATA_CHANGE.CUBILLDATACHANGEBYPACK(NUPACKAGEID) LOOP
            
                
                RCSUBCRIPTIONS  :=PKTBLSUSCRIPC.FRCGETRECORD(RCBILLDATACHANGE.OLD_SUBSCRIPTION);
               
                UT_TRACE.TRACE(' 1-rcSubcriptions.susccodi ['||RCSUBCRIPTIONS.SUSCCODI||']',11);
                
                
                PKTBLSUSCRIPC.UPCLIENT(RCSUBCRIPTIONS.SUSCCODI, RCBILLDATACHANGE.NEW_SUBSCRIBER_ID);

                
                GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(RCSUBCRIPTIONS.SUSCCLIE);

                
                GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(RCBILLDATACHANGE.NEW_SUBSCRIBER_ID);
            
                
                FOR RCPRODUCTS IN PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION(RCSUBCRIPTIONS.SUSCCODI) LOOP
                
                    NUSUBSTYPEPRODID:=PR_BOSUBSBYPRODUCT.FNUGETSUBSTYPEPRODID(RCPRODUCTS.PRODUCT_ID, CC_BOCONSTANTS.CNUUSER_CLIENT_ROLE);
                    IF NUSUBSTYPEPRODID IS NOT NULL THEN
                        DAPR_SUBS_TYPE_PROD.UPDSUBSCRIBER_ID(NUSUBSTYPEPRODID,RCBILLDATACHANGE.NEW_SUBSCRIBER_ID);
                    END IF;
                
                END LOOP;
            
            END LOOP;
            
            
            MO_BOATTENTION.ATTENDPACKAGE(NUPACKAGEID);
            
            UT_TRACE.TRACE('Finaliza CF_BOActions.ChangeClient',10);
        EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
        END CHANGECLIENT;

PROCEDURE ANULLFLOWACTIVATE
    (
        INUIDANULLSOLICITUD    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        CURSOR CUPACKASSOANULL
            (
            INUIDANULLSOLICITUD IN  MO_PACKAGES.PACKAGE_ID%TYPE
            )
        IS
             SELECT A.*, A.ROWID
             FROM MO_PACK_ANNUL_DETAIL A
             WHERE A.ANNUL_PACKAGE_ID = INUIDANULLSOLICITUD;

    BEGIN

        UT_TRACE.TRACE('Inicia CF_BOActions.AnullFlowActivate',10);

        FOR RCPACKANULL IN CUPACKASSOANULL(INUIDANULLSOLICITUD) LOOP
            CF_BOACTIONS.REQUESTFLOWACTIVATE(RCPACKANULL.PACKAGE_ID);
        END LOOP;

        UT_TRACE.TRACE('Finaliza CF_BOActions.AnullFlowActivate',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

PROCEDURE EXCEPTIONANULLPEND
	(
   	 INUPACKAGE_ID 		IN MO_PACKAGES.PACKAGE_ID%TYPE
	)
    IS

    CURSOR  CUPACKANULL (INUPACKAGEID NUMBER) IS
    SELECT  C.PACKAGE_ID
    FROM    MO_PACK_ANNUL_DETAIL A, PS_MOTIVE_STATUS B, MO_PACKAGES C
    WHERE   A.PACKAGE_ID = INUPACKAGEID
    AND     A.ANNUL_PACKAGE_ID = C.PACKAGE_ID
    AND     B.MOTIVE_STATUS_ID = C.MOTIVE_STATUS_ID
    AND     B.IS_FINAL_STATUS = 'N';

    NUPACKAGEANULL      NUMBER;

	BEGIN
     OPEN CUPACKANULL ( INUPACKAGE_ID );
		FETCH CUPACKANULL INTO NUPACKAGEANULL ;
  	     IF ( NUPACKAGEANULL IS NOT NULL )THEN
            GI_BOERRORS.SETERRORCODEARGUMENT(2741, 'La solicitud '||NUPACKAGEANULL||' tiene solicitud(es) de anulaci�n pendiente(s)');
            CLOSE CUPACKANULL;
         END IF;
    CLOSE CUPACKANULL;
  	EXCEPTION
    	WHEN NO_DATA_FOUND THEN
        	RAISE EX.CONTROLLED_ERROR ;
            CLOSE CUPACKANULL;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            CLOSE CUPACKANULL;
	END ;


    



























    FUNCTION  FBLNOTIFYSWAPBYTECHSERVICE
    (
        INUTECHSERVICEREQ   IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUCAUSALID         IN  OR_UNI_ITEM_BALA_MOV.ITEM_MOVEME_CAUS_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        CSBYES   CONSTANT  VARCHAR2(1)  := GE_BOCONSTANTS.GETYES;
        CNUPACKAGESENTITY    CONSTANT MO_BOPARAMETER.STYNUMBER := MO_BOPARAMETER.FNUGETENTITY_PACKAGES;
        CNUUNITWAITRETURN    CONSTANT WF_INSTANCE.UNIT_ID%TYPE := 2073;

        TBMOPACKAGESASSO DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUSWAPREQID  MO_PACKAGES.PACKAGE_ID%TYPE;
        NUINSTANCEID WF_INSTANCE.INSTANCE_ID%TYPE;
        DTDATE WF_INSTANCE.INITIAL_DATE%TYPE;

        ONUERRORCODE    NUMBER;
        OSBERRORMESSAGE VARCHAR2(2000);

       CURSOR CUGETINSTANCE(NUSWAPPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE)
       IS
       SELECT INSTANCE_ID
        FROM WF_INSTANCE, WF_INSTANCE_STATUS
        WHERE ENTITY_ID = CNUPACKAGESENTITY
            AND WF_INSTANCE.EXTERNAL_ID = NUSWAPREQID
                AND WF_INSTANCE.UNIT_ID = CNUUNITWAITRETURN
            AND WF_INSTANCE.STATUS_ID = WF_INSTANCE_STATUS.INSTANCE_STATUS_ID
            AND WF_INSTANCE_STATUS.ACTIVE_FLAG = CSBYES ;

    BEGIN
        UT_TRACE.TRACE('init CF_BOActions.fblNotifySwapByTechService',15);
        
        TBMOPACKAGESASSO := MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO ( INUTECHSERVICEREQ);


        
        IF (TBMOPACKAGESASSO.COUNT > 0) THEN
            NUSWAPREQID := TBMOPACKAGESASSO(1).PACKAGE_ID;
            IF (NOT MO_BOPACKAGES.FBLISFINALSTATUS(NUSWAPREQID) ) THEN

                IF (CUGETINSTANCE%ISOPEN) THEN
                    CLOSE CUGETINSTANCE;
                END IF;

                
                OPEN CUGETINSTANCE(NUSWAPREQID);
                FETCH CUGETINSTANCE INTO NUINSTANCEID;
                CLOSE CUGETINSTANCE;

                IF (NUINSTANCEID IS NOT NULL) THEN
                    UT_TRACE.TRACE('instanciaSwap='||NUINSTANCEID, 15);
                    
                    DTDATE := UT_DATE.FDTSYSDATE + NVL(PS_BOPACKTYPEPARAM.FSBGETPACKTYPEPARAM(24, 30100), 0);
                    UT_TRACE.TRACE(' init updateExecutionDate',15);

                    GE_BOINT_WORKFLOW.UPDATEEXECUTIONDATE( NUINSTANCEID, DTDATE, ONUERRORCODE, OSBERRORMESSAGE);

                    UT_TRACE.TRACE(' fin updateExecutionDate',15);

                    
                    
                    WF_BOANSWER_RECEPTOR.ANSWERRECEPTOR(NUINSTANCEID, INUCAUSALID);

                END IF;

                RETURN TRUE;
            END IF;
        END IF;

        UT_TRACE.TRACE('Fin CF_BOActions.fblNotifySwapByTechService',15);
        RETURN FALSE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUGETINSTANCE%ISOPEN) THEN
                CLOSE CUGETINSTANCE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUGETINSTANCE%ISOPEN) THEN
                CLOSE CUGETINSTANCE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLNOTIFYSWAPBYTECHSERVICE;
    
 






















    FUNCTION FNUGETPRODUCTCOMPONENT
    (
        INUMOTIVECOMPONENT    IN    MO_COMPONENT.COMPONENT_ID%TYPE

    )RETURN MO_COMPONENT.COMPONENT_ID_PROD%TYPE
    IS

        
        NUCOMPONENT    MO_COMPONENT.COMPONENT_ID_PROD%TYPE;

        
        PROCEDURE VALIDATEDATA
        (
            INUMOTIVECOMPONENT   IN    MO_COMPONENT.COMPONENT_ID%TYPE
        )
        IS
        BEGIN

            
            IF (INUMOTIVECOMPONENT IS NULL) THEN

                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'C�digo del componente de motivo');
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            
            DAMO_COMPONENT.ACCKEY(INUMOTIVECOMPONENT);

        EXCEPTION

    	   WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
           WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

        END VALIDATEDATA;

    BEGIN

        
        VALIDATEDATA(INUMOTIVECOMPONENT);

        
        NUCOMPONENT:= DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(INUMOTIVECOMPONENT);

        
        RETURN NUCOMPONENT;


    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPRODUCTCOMPONENT;

    





















    PROCEDURE ATENTBASICMOT
    (
        INUMOTIVEID      IN    MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS

        
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        
        TBCOMPONENTS        DAMO_COMPONENT.TYTBMO_COMPONENT;
        
        TBCOMPONENTID       DAMO_COMPONENT.TYTBCOMPONENT_ID;
        
        RCMOCOMPONENT       DAMO_COMPONENT.STYMO_COMPONENT;

        
        BLATTENDPACKAGE     BOOLEAN := TRUE;
        
        NUCOMPIDX           BINARY_INTEGER;

        PROCEDURE  CLOSECURSORS
        IS
        BEGIN
            IF (MO_BCPACKAGES_ASSO.CUPACKAGEASSOBYPACKASSO%ISOPEN) THEN
                CLOSE MO_BCPACKAGES_ASSO.CUPACKAGEASSOBYPACKASSO;
            END IF;
            IF (MO_BCMOTIVE.CUMOTIVESBYPACKAGE%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESBYPACKAGE;
            END IF;
            IF (MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT;
            END IF;
        EXCEPTION
        	WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLOSECURSORS;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.AtentBasicMot ['||INUMOTIVEID||']',3);

        CLOSECURSORS;

        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        
        TBCOMPONENTS.DELETE;

        OPEN  MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT(RCMOTIVE.MOTIVE_ID);
        FETCH MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT BULK COLLECT INTO TBCOMPONENTID;
        CLOSE MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT;

        NUCOMPIDX := TBCOMPONENTID.LAST;
        WHILE (NUCOMPIDX IS NOT NULL) LOOP
            TBCOMPONENTS(TBCOMPONENTS.COUNT) := DAMO_COMPONENT.FRCGETRECORD(TBCOMPONENTID(NUCOMPIDX));
            NUCOMPIDX := TBCOMPONENTID.PRIOR(NUCOMPIDX);
        END LOOP;

        NUCOMPIDX := TBCOMPONENTS.FIRST;
        WHILE (NUCOMPIDX IS NOT NULL) LOOP
            UT_TRACE.TRACE('Procesar Componente ['||TBCOMPONENTS(NUCOMPIDX).COMPONENT_ID||']',3);
            
            RCMOCOMPONENT := TBCOMPONENTS(NUCOMPIDX);
            
            IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOCOMPONENT.MOTIVE_STATUS_ID)) THEN
                UT_TRACE.TRACE('Atender Componente ['||RCMOCOMPONENT.COMPONENT_ID||']',3);
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCMOCOMPONENT.COMPONENT_ID,CF_BOCONSTANTS.CNUACTIONATTENDCOMP);
            END IF;
            NUCOMPIDX := TBCOMPONENTS.NEXT(NUCOMPIDX);
        END LOOP;

        
        IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) THEN
            UT_TRACE.TRACE('Atender Motivo ['||RCMOTIVE.MOTIVE_ID||']',3);
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCMOTIVE.MOTIVE_ID,CF_BOCONSTANTS.CNUACTIONATTENDCOMP);
        END IF;

        


        FOR REC IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(RCMOTIVE.PACKAGE_ID) LOOP
            UT_TRACE.TRACE('Motivo Activo:['||REC.MOTIVE_ID||']',3);
            BLATTENDPACKAGE := FALSE;
            EXIT;
        END LOOP;

        IF (BLATTENDPACKAGE) THEN
            IF (NOT(PS_BOMOTIVESTATUS.FBLISFINALSTATUS(DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(RCMOTIVE.PACKAGE_ID)))) THEN
                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(RCMOTIVE.PACKAGE_ID,CNUACTIONATTENDPACK);
            END IF;
        END IF;

        UT_TRACE.TRACE('Termina CF_BOActions.AtentBasicMot',3);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSORS;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSORS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATENTBASICMOT;

    



















    PROCEDURE GETTECHNICALSERVICEREQ
    (
        INUIDITEMSERIADO    IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUPACKAGEID        OUT MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        CURSOR CUGETTECHSERV
        IS
            SELECT /*+ index(OR_ORDER_ACTIVITY,IDX_OR_ORDER_ACTIVITY16)
                       index(MO_PACKAGES,PK_MO_PACKAGES) */
                   MO_PACKAGES.PACKAGE_ID
            FROM   /*+ CF_BOActions.getTechnicalServiceReq */
                   OR_ORDER_ACTIVITY, MO_PACKAGES
            WHERE OR_ORDER_ACTIVITY.SERIAL_ITEMS_ID = INUIDITEMSERIADO
                  AND OR_ORDER_ACTIVITY.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
                  AND MO_PACKAGES.PACKAGE_TYPE_ID IN ( GNUTECHSERVPACKTYPE, GNUEXTECHSERVPACKTYPE)
            ORDER BY MO_PACKAGES.REQUEST_DATE DESC;
    BEGIN
        FOR RC IN CUGETTECHSERV LOOP
            ONUPACKAGEID := RC.PACKAGE_ID;
            EXIT;
        END LOOP;
  	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETTECHNICALSERVICEREQ;
    

    



































    PROCEDURE NOTIFYACCEPTITEMS
    (
        IRCITEMSERIADO      IN  DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO,
        RCUNIITEMBALAMOV    IN  DAOR_UNI_ITEM_BALA_MOV.STYOR_UNI_ITEM_BALA_MOV,
        IONUNEWESTADOINV    IN  OUT GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE
    )
    IS
        NUTECHSERVICEREQ    MO_PACKAGES.PACKAGE_ID%TYPE;
        SBSENTNOTIFICATIONS GE_BOUTILITIES.STYSTATEMENT;
        OSBLOGNOTIF         VARCHAR2(4000);
        BLNOTYSWAP           BOOLEAN;
    BEGIN
        UT_TRACE.TRACE('init CF_BOactions.notifyAcceptItems',15);
        IF (DAOR_OPERATING_UNIT.FNUGETOPER_UNIT_CLASSIF_ID(RCUNIITEMBALAMOV.TARGET_OPER_UNIT_ID)
                = GE_BOITEMSCONSTANTS.CNUUNID_OP_CENTRO_REPARA) THEN
            
            GETTECHNICALSERVICEREQ(IRCITEMSERIADO.ID_ITEMS_SERIADO, NUTECHSERVICEREQ);

            IF (NUTECHSERVICEREQ IS NOT NULL) THEN
                UT_TRACE.TRACE('nuTechServiceReq='||NUTECHSERVICEREQ,15);
                
                

                
                GE_BOALERTMESSAGEPARAM.VERANDSENDNOTIF(
                                                            GE_BOENTITY.FNUGETENTITY_ID(CSBPS_PACKAGE_TYPE),
                                                            GNUTECHSERVPACKTYPE,
                                                            NUTECHSERVICEREQ,
                                                            NULL,
                                                            SBSENTNOTIFICATIONS,
                                                            OSBLOGNOTIF
                                                       );

                
                BLNOTYSWAP := FBLNOTIFYSWAPBYTECHSERVICE(NUTECHSERVICEREQ, RCUNIITEMBALAMOV.ITEM_MOVEME_CAUS_ID);

                IONUNEWESTADOINV := GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA;
            END IF;
        END IF;
        
        UT_TRACE.TRACE('fin CF_BOactions.notifyAcceptItems',15);
  	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END NOTIFYACCEPTITEMS;

    
    













    PROCEDURE ATTENDREQUEST
    (
        INUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
		
        NUACTIONATTEND  NUMBER;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOAction.attendrequest ['||INUPACKAGEID||']',5);


        
        IF (INUPACKAGEID IS NULL) THEN
            ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'C�digo de la solicitud');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        NUACTIONATTEND:= GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_CREATE_PROD);

        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORREQU(INUPACKAGEID,NUACTIONATTEND);

        UT_TRACE.TRACE('Fin CF_BOAction.attendrequest',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDREQUEST;
    
    

























    FUNCTION FBOVALIDUNBUNDLEREQUEST
    (
        INUPACKAGEID   IN    MO_PACKAGES.PACKAGE_ID%TYPE
    )RETURN BOOLEAN
    IS

        
        TBASSOPACKS      DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;

        
        NUINDEXPACKS    NUMBER;

        
        RCASSOPACKS     DAMO_PACKAGES.STYMO_PACKAGES;

        
        PROCEDURE VALIDATEDATA
        (
            INUPACKAGEID   IN    MO_PACKAGES.PACKAGE_ID%TYPE
        )
        IS
        BEGIN

            
            IF (INUPACKAGEID IS NULL) THEN

                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'C�digo de la Solicitud');
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            
            DAMO_PACKAGES.ACCKEY(INUPACKAGEID);

        EXCEPTION
    	   WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
           WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;


    BEGIN
              UT_TRACE.TRACE('init CF_BOactions.fboValidUnBundleRequest',2);

        
        VALIDATEDATA(INUPACKAGEID);

        
        TBASSOPACKS:= MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO(INUPACKAGEID);

        
        NUINDEXPACKS := TBASSOPACKS.FIRST;
        

        WHILE NUINDEXPACKS IS NOT NULL LOOP

            
            RCASSOPACKS := DAMO_PACKAGES.FRCGETRECORD(TBASSOPACKS(NUINDEXPACKS).PACKAGE_ID);

            
            
            IF (RCASSOPACKS.PACKAGE_TYPE_ID != PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(PS_BOPACKAGETYPE.CSBUNBUNDLINGPROCESS)) THEN

                UT_TRACE.TRACE('fin CF_BOactions.fboValidUnBundleRequest Solicitud Desempaquetamiento[NO]',2);
                RETURN FALSE;
            END IF;
            NUINDEXPACKS := TBASSOPACKS.NEXT(NUINDEXPACKS);
            
        END LOOP;

        UT_TRACE.TRACE('fin CF_BOactions.fboValidUnBundleRequest Solicitud Desempaquetamiento[SI]',2);
        RETURN TRUE;

  	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOVALIDUNBUNDLEREQUEST;

    

















    FUNCTION FBOVALIDBUNDLEREQUEST
    (
        INUPACKAGEID   IN    MO_PACKAGES.PACKAGE_ID%TYPE
    )RETURN BOOLEAN
    IS

        
        TBASSOPACKS      DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        TBASSOMOTS       DAMO_MOTIVE.TYTBMO_MOTIVE;

        
        NUINDEXPACKS    NUMBER;
        NUINDEXMOTS     NUMBER;

        
        RCASSOPACKS     DAMO_PACKAGES.STYMO_PACKAGES;
        RCASSOMOTS      DAMO_MOTIVE.STYMO_MOTIVE;

        
        PROCEDURE VALIDATEDATA
        (
            INUPACKAGEID   IN    MO_PACKAGES.PACKAGE_ID%TYPE
        )
        IS
        BEGIN

            
            IF (INUPACKAGEID IS NULL) THEN

                ERRORS.SETERROR(119562,'C�digo de la Solicitud');
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            
            DAMO_PACKAGES.ACCKEY(INUPACKAGEID);

        EXCEPTION
    	   WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
           WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;


    BEGIN
        UT_TRACE.TRACE('init CF_BOactions.fboValidBundleRequest',2);

        
        VALIDATEDATA(INUPACKAGEID);

        
        TBASSOPACKS:= MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO(INUPACKAGEID);

        
        NUINDEXPACKS := TBASSOPACKS.FIRST;
        
        WHILE NUINDEXPACKS IS NOT NULL LOOP

            
            RCASSOPACKS := DAMO_PACKAGES.FRCGETRECORD(TBASSOPACKS(NUINDEXPACKS).PACKAGE_ID);

            
            IF (RCASSOPACKS.PACKAGE_TYPE_ID <> PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(PS_BOPACKAGETYPE.CSBBUNDLINGPROCESS)) THEN
                UT_TRACE.TRACE('fin CF_BOactions.fboValidBundleRequest Solicitud Empaquetamiento[NO]',2);
                RETURN FALSE;
            END IF;

            TBASSOMOTS  := MO_BCMOTIVE.FTBALLMOTIVESBYPACK(TBASSOPACKS(NUINDEXPACKS).PACKAGE_ID);
            NUINDEXMOTS := TBASSOMOTS.FIRST;
            
            WHILE NUINDEXMOTS IS NOT NULL LOOP
                
                IF ( TBASSOMOTS(NUINDEXMOTS).MOTIVE_TYPE_ID <> PS_BOMOTIVETYPE.FNUBUNDLED_MOTI_TYPE ) THEN
                    UT_TRACE.TRACE('fin CF_BOactions.fboValidBundleRequest Solicitud Empaquetamiento[NO]',2);
                    RETURN FALSE;
                END IF;
                NUINDEXMOTS := TBASSOMOTS.NEXT(NUINDEXMOTS);
            END LOOP;

            NUINDEXPACKS := TBASSOPACKS.NEXT(NUINDEXPACKS);

        END LOOP;

        UT_TRACE.TRACE('fin CF_BOactions.fboValidBundleRequest Solicitud Empaquetamiento[SI]',2);
        RETURN TRUE;

  	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOVALIDBUNDLEREQUEST;


    

















    PROCEDURE GENERATEFLOWBYMOTIVE
    (
        INUMOTIVEID    IN    MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS

        
        NUPACKAGEID    MO_PACKAGES.PACKAGE_ID%TYPE;

        
        PROCEDURE VALIDATEDATA IS
        BEGIN

            
            IF (INUMOTIVEID IS NULL) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'C�digo del Motivo');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            DAMO_MOTIVE.ACCKEY(INUMOTIVEID);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOAction.GenerateFlowByMotive',5);
        UT_TRACE.TRACE('Motivo['||INUMOTIVEID||']',6 );

        
        VALIDATEDATA;

        
        NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(INUMOTIVEID);

        
        MO_BOEXECUTOR_LOG_MOT.INSERTRECORD ( NUPACKAGEID,
                                             INUMOTIVEID,
                                             MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN
                                           );
                                           
        UT_TRACE.TRACE('Fin CF_BOAction.GenerateFlowByMotive',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENERATEFLOWBYMOTIVE;

    






















    PROCEDURE GENMOTIVEFLOWSBYPACK
    (
        INUPACKAGEID     IN    MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVETYPE    IN    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE
    )
    IS

        
        TBMOTIVES           DAMO_MOTIVE.TYTBMO_MOTIVE;
        
        NUMOTIVEINDEX       NUMBER;
        
        TBMO_DATA_FOR_ORDER DAMO_DATA_FOR_ORDER.TYTBMO_DATA_FOR_ORDER;
        
        NUPROCINDEX         BINARY_INTEGER;

        
        PROCEDURE VALIDATEDATA IS
        BEGIN

            
            IF (INUPACKAGEID IS NULL) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'C�digo de la solicitud');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            DAMO_PACKAGES.ACCKEY(INUPACKAGEID);

            
            IF (INUMOTIVETYPE IS NULL) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'C�digo del tipo de motivo');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            DAPS_MOTIVE_TYPE.ACCKEY(INUMOTIVETYPE);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;

        
        PROCEDURE ADDPROCINITACT
        (
            ITBMODATAORDER  IN  DAMO_DATA_FOR_ORDER.TYTBMO_DATA_FOR_ORDER
        )
        IS
            
            NUNEWINDEX  BINARY_INTEGER;
        BEGIN
        
            UT_TRACE.TRACE('Inicio CF_BOActions.GenMotiveFlowsByPack.AddProcInitAct',7);
            UT_TRACE.TRACE('Registros nuevos ['||ITBMODATAORDER.COUNT||']',8);

            NUNEWINDEX := ITBMODATAORDER.FIRST;
            LOOP
            
                EXIT WHEN NUNEWINDEX IS NULL;
                
                TBMO_DATA_FOR_ORDER(TBMO_DATA_FOR_ORDER.COUNT + 1) := ITBMODATAORDER(NUNEWINDEX);
                
                NUNEWINDEX := ITBMODATAORDER.NEXT(NUNEWINDEX);
            
            END LOOP;

            UT_TRACE.TRACE('Nuevos registros ['||TBMO_DATA_FOR_ORDER.COUNT||']',8);
            UT_TRACE.TRACE('Fin CF_BOActions.GenMotiveFlowsByPack.AddProcInitAct',7);
        
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END ADDPROCINITACT;

        
        PROCEDURE PROCINITACTBYMOTIVES
        IS
            
            TBMOTIVDATAFORORDER     DAMO_DATA_FOR_ORDER.TYTBMO_DATA_FOR_ORDER;
            
            TBCOMPONENTDATA         DAMO_COMPONENT.TYTBMO_COMPONENT;
            
            NUCOMPINDEX             BINARY_INTEGER;
            
            TBCOMPDATAFORORDER      DAMO_DATA_FOR_ORDER.TYTBMO_DATA_FOR_ORDER;
            
            RCMODATAFORORDER        DAMO_DATA_FOR_ORDER.STYMO_DATA_FOR_ORDER;
        BEGIN
        
            UT_TRACE.TRACE('Inicio CF_BOActions.GenMotiveFlowsByPack.ProcInitActByMotives',7);

            IF (TBMOTIVES.COUNT = 0) THEN
            
                UT_TRACE.TRACE('Fin CF_BOActions.GenMotiveFlowsByPack.ProcInitActByMotives',7);
                RETURN;
            
            END IF;

            
            TBMO_DATA_FOR_ORDER := MO_BCDATA_FOR_ORDER.FTBGETDATABYPACK(INUPACKAGEID);

            
            NUMOTIVEINDEX:= TBMOTIVES.FIRST;
            WHILE (NUMOTIVEINDEX IS NOT NULL) LOOP
            
                
                IF ( TBMOTIVES(NUMOTIVEINDEX).MOTIVE_TYPE_ID <> INUMOTIVETYPE ) THEN
                
                    UT_TRACE.TRACE('Motivo ['||TBMOTIVES(NUMOTIVEINDEX).MOTIVE_ID||']',8);
                    UT_TRACE.TRACE('Tipo de Motivo ['||TBMOTIVES(NUMOTIVEINDEX).MOTIVE_TYPE_ID||']',8);

                    
                    TBMOTIVDATAFORORDER := MO_BCDATA_FOR_ORDER.FTBGETDATAONLYMOT(TBMOTIVES(NUMOTIVEINDEX).MOTIVE_ID);

                    
                    ADDPROCINITACT(TBMOTIVDATAFORORDER);
                    
                    
                    TBCOMPONENTDATA.DELETE;
                    TBCOMPONENTDATA := MO_BCCOMPONENT.FTBCOMPACTIVESBYMOTANDDIFTYPE(TBMOTIVES(NUMOTIVEINDEX).MOTIVE_ID, -1);

                    NUCOMPINDEX := TBCOMPONENTDATA.FIRST;
                    LOOP
                    
                        EXIT WHEN NUCOMPINDEX IS NULL;

                        UT_TRACE.TRACE('Componente ['||TBCOMPONENTDATA(NUCOMPINDEX).COMPONENT_ID||']',8);

                        
                        TBCOMPDATAFORORDER := MO_BCDATA_FOR_ORDER.FTBGETDATAONLYCOMP(TBCOMPONENTDATA(NUCOMPINDEX).COMPONENT_ID);
                        
                        
                        ADDPROCINITACT(TBCOMPDATAFORORDER);
                    
                        NUCOMPINDEX := TBCOMPONENTDATA.NEXT(NUCOMPINDEX);
                    
                    END LOOP;
                
                END IF;
                
                NUMOTIVEINDEX:= TBMOTIVES.NEXT(NUMOTIVEINDEX);
            
            END LOOP;

            

            NUPROCINDEX := TBMO_DATA_FOR_ORDER.FIRST;
            LOOP
            
                EXIT WHEN NUPROCINDEX IS NULL;
                
                RCMODATAFORORDER := TBMO_DATA_FOR_ORDER(NUPROCINDEX);
                
                UT_TRACE.TRACE('Actualizando mo_data_for_order ['||RCMODATAFORORDER.DATA_FOR_ORDER_ID||']',8);
                
                RCMODATAFORORDER.PACKAGE_ID := NULL;
                RCMODATAFORORDER.MOTIVE_ID := NULL;
                RCMODATAFORORDER.COMPONENT_ID := NULL;
                
                DAMO_DATA_FOR_ORDER.UPDRECORD(RCMODATAFORORDER);
                
                NUPROCINDEX := TBMO_DATA_FOR_ORDER.NEXT(NUPROCINDEX);
            
            END LOOP;
            
            
            NUMOTIVEINDEX := NULL;
            
            UT_TRACE.TRACE('Fin CF_BOActions.GenMotiveFlowsByPack.ProcInitActByMotives',7);
        
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END PROCINITACTBYMOTIVES;

    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.GenMotiveFlowsByPack',5);
        UT_TRACE.TRACE('Solicitud['||INUPACKAGEID||'] Tipo de Motivo['||INUMOTIVETYPE||']',6 );

        
        VALIDATEDATA;
        
        
        TBMOTIVES := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE( INUPACKAGEID );
        
        UT_TRACE.TRACE('Motivos: '||TBMOTIVES.COUNT,7);
        
        
        PROCINITACTBYMOTIVES;

        
        NUMOTIVEINDEX:= TBMOTIVES.FIRST;
        WHILE (NUMOTIVEINDEX IS NOT NULL) LOOP
        
            
            IF ( TBMOTIVES(NUMOTIVEINDEX).MOTIVE_TYPE_ID = INUMOTIVETYPE ) THEN
            
                
                GENERATEFLOWBYMOTIVE(TBMOTIVES(NUMOTIVEINDEX).MOTIVE_ID);
            
            END IF;
            
            NUMOTIVEINDEX:= TBMOTIVES.NEXT(NUMOTIVEINDEX);
        
        END LOOP;
        
        IF (TBMO_DATA_FOR_ORDER.COUNT > 0) THEN
        
            
            DAMO_DATA_FOR_ORDER.UPDRECORDS( TBMO_DATA_FOR_ORDER );
        
        END IF;

        UT_TRACE.TRACE('Fin CF_BOActions.GenMotiveFlowsByPack',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENMOTIVEFLOWSBYPACK;


    
    





















    PROCEDURE ACTIVATEWORKFLOW
    (
        INUPACKAGEID     IN    MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVETYPE    IN    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUACTIONID      IN    GE_ACTION_MODULE.ACTION_ID%TYPE
    )
    IS

        
        TBMOTIVES    DAMO_MOTIVE.TYTBMO_MOTIVE;

        
        PROCEDURE VALIDATEDATA IS
        BEGIN

            
            IF (INUPACKAGEID IS NULL) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'C�digo de la solicitud');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            DAMO_PACKAGES.ACCKEY(INUPACKAGEID);

            IF (INUMOTIVETYPE IS NOT NULL) THEN
                
                DAPS_MOTIVE_TYPE.ACCKEY(INUMOTIVETYPE);
            END IF;

            
            IF (INUACTIONID IS NULL) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'Acci�n por m�dulo');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            DAGE_ACTION_MODULE.ACCKEY(INUACTIONID);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;

    BEGIN

        UT_TRACE.TRACE('Inicia CF_BOAction.ActivateWorkFlow',5);
        UT_TRACE.TRACE('Solicitud['||INUPACKAGEID||'] Tipo de Motivo['||INUMOTIVETYPE||'] Acci�n['||INUACTIONID||']',6 );

        
        VALIDATEDATA;

        
        TBMOTIVES.DELETE;

        
        IF (INUMOTIVETYPE IS NOT NULL) THEN
            TBMOTIVES := MO_BCMOTIVE.FTBACTMOTSBYPACKNTYPE(INUPACKAGEID, INUMOTIVETYPE);
            UT_TRACE.TRACE('Motivos Activos['||TBMOTIVES.COUNT||'] Tipo de Motivo['||INUMOTIVETYPE||']',6 );
        ELSE
           TBMOTIVES := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(INUPACKAGEID);
           UT_TRACE.TRACE('Motivos Activos['||TBMOTIVES.COUNT||']',6 );
        END IF;

        
        IF ( TBMOTIVES.COUNT = 0 ) THEN
            UT_TRACE.TRACE('Reactiva Flujo de Negocio',6 );
            MO_BOWF_PACK_INTERFAC.PREPNOTTOWFPACK ( INUPACKAGEID,
                                                    INUACTIONID,
                                                    MO_BOCAUSAL.FNUGETSUCCESS,
                                                    MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY,
                                                    FALSE
                                                  );
        END IF;

        UT_TRACE.TRACE('Fin CF_BOAction.ActivateWorkFlow',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ACTIVATEWORKFLOW;
    
    
    


















    PROCEDURE GETPACKTYPE
    (
        ISBTAGNAME  IN  PS_PACKAGE_TYPE.TAG_NAME%TYPE,
        ONUPACKTYPE OUT PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    )
    IS
        CURSOR CUPACKTYPEBYTACKNAME IS
        SELECT /*+ index (PS_PACKAGE_TYPE UK_PS_PACKAGE_TYPE_01) */ PACKAGE_TYPE_ID
        FROM   /*+ CF_BOActions.getPackType */
               PS_PACKAGE_TYPE
        WHERE TAG_NAME LIKE ISBTAGNAME;
    BEGIN
        UT_TRACE.TRACE('Inicio CF_BOAction.getPackType ('||ISBTAGNAME||')',5);
        FOR RC IN CUPACKTYPEBYTACKNAME LOOP
            ONUPACKTYPE := RC.PACKAGE_TYPE_ID;
        END LOOP;
        UT_TRACE.TRACE('Fin    CF_BOAction.getPackType=>'||ONUPACKTYPE,5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPACKTYPE;
    
    
























    PROCEDURE GENMOTIVEFLOWSJOBPROC
    (
        INUPACKAGEID     IN    MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVETYPE    IN    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUACTION        IN    GE_ACTION_MODULE.ACTION_ID%TYPE
    )
    IS
        SBWHAT                 USER_JOBS.WHAT%TYPE;
        RCWFPACKINTERFAC       DAMO_WF_PACK_INTERFAC.STYMO_WF_PACK_INTERFAC;
        NUERRORCODE            GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMSG             GE_MESSAGE.DESCRIPTION%TYPE;
        NUREPORTLOGID          GE_EXECUTOR_LOG.EXECUTOR_LOG_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.GenMotiveFlowsJobProc'||CHR(10)||
                       'Solicitud['||INUPACKAGEID||']'||CHR(10)||
                       'Tipo de motivo['||INUMOTIVETYPE||']'||CHR(10)||
                       'Acci�n['||INUACTION||']',5);

        
       MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMSG);
            
       BEGIN
       
            

            GENMOTIVEFLOWSBYPACK
            (
                INUPACKAGEID,
                INUMOTIVETYPE
            );
        
        EXCEPTION
           WHEN OTHERS THEN
              
              ROLLBACK;

               
               MO_BOWF_PACK_INTERFAC.GETACTIVITYIDPACK
               (
                   INUPACKAGEID,
                   INUACTION,
                   MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY,
                   RCWFPACKINTERFAC
               );
               
               
               RCWFPACKINTERFAC.CAUSAL_ID_OUTPUT := GE_BOCAUSAL.CNUCAUSALACTIVITYSTANDBY;
               
               
               ERRORS.GETERROR(NUERRORCODE, SBERRORMSG);

               
               GE_BOEXECUTOR_LOG.INSERT_DEFAULT
                (
                    NUERRORCODE,
                    SBERRORMSG,
                    MO_BOCONSTANTS.CSBPACKAGE_ID || '-' || INUPACKAGEID,
                    NUREPORTLOGID
                );
                    
               RCWFPACKINTERFAC.EXECUTOR_LOG_ID := NUREPORTLOGID;

               
               RCWFPACKINTERFAC.STATUS_ACTIVITY_ID := MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_RESTART;

               
               
               DAMO_WF_PACK_INTERFAC.UPDRECORD(RCWFPACKINTERFAC);
               
        END;
        
        IF (NVL(NUERRORCODE,MO_BOCONSTANTS.CNUOK) = MO_BOCONSTANTS.CNUOK) THEN

            

            MO_BOWF_PACK_INTERFAC.PREPNOTTOWFPACK
            (
                INUPACKAGEID,
                INUACTION,
                MO_BOCAUSAL.FNUGETSUCCESS,
                MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY,
                TRUE
            );
            
        END IF;
        
        
        COMMIT;

        UT_TRACE.TRACE('Fin CF_BOActions.GenMotiveFlowsJobProc',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENMOTIVEFLOWSJOBPROC;
    
    




















    PROCEDURE GENINSTALLFLOWSBYJOB
    (
        INUPACKAGEID     IN    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUIDJOB                USER_JOBS.JOB%TYPE;
        SBWHAT                 USER_JOBS.WHAT%TYPE;
        RCWFPACKINTERFAC       DAMO_WF_PACK_INTERFAC.STYMO_WF_PACK_INTERFAC;
        NUINSTALLMOTIVETYPE    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE;
        NUACTIONID             MO_WF_PACK_INTERFAC.ACTION_ID%TYPE;

        
















        PROCEDURE VALIDATEDATA IS
        BEGIN

            
            IF (INUPACKAGEID IS NULL) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'C�digo de la solicitud');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            DAMO_PACKAGES.ACCKEY(INUPACKAGEID);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;
    BEGIN
        UT_TRACE.TRACE('Inicia CF_BOActions.GenInstallFlowsByJob'||CHR(10)||
                       'Solicitud['||INUPACKAGEID||']'||CHR(10)||']',5);

        
        VALIDATEDATA;
        
        
        NUINSTALLMOTIVETYPE := PS_BOMOTIVETYPE.FNUMOTITYPEBYTAG(CSBTAG_M_INSTALLATION);
        
        
        GE_BOINSTANCE.GETVALUE
        (
          MO_BOCONSTANTS.CSBMO_WF_PACK_INTERFAC,
          MO_BOCONSTANTS.CSBACTION_ID,
          NUACTIONID
        );

        
        SBWHAT := 'BEGIN CF_BOActions.GenMotiveFlowsJobProc('||INUPACKAGEID
                                                             ||','||NUINSTALLMOTIVETYPE
                                                             ||','||NUACTIONID||'); END;';
        
        
        UT_JOB.CREATEJOB
        (
            NUIDJOB,
            SBWHAT
        );

        
        MO_BOACTIONUTIL.SETEXECACTIONINSTANDBY(TRUE);
        
        UT_TRACE.TRACE('Fin CF_BOActions.GenInstallFlowsByJob',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENINSTALLFLOWSBYJOB;

BEGIN
    
    GETPACKTYPE( CSBTECH_SERV, GNUTECHSERVPACKTYPE);
    
    GETPACKTYPE( CSBTECH_SERV_EXTERN, GNUEXTECHSERVPACKTYPE);
END CF_BOACTIONS;