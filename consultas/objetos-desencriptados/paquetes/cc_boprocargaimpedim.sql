CREATE OR REPLACE PACKAGE BODY CC_BOPROCARGAIMPEDIM IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO187845';
   CNUNULL_ATTRIBUTE CONSTANT NUMBER := 119562;
   CSBFILE_SEPARATOR CONSTANT VARCHAR2( 1 ) := '/';
   CSBCAMPOSSEPARADOR CONSTANT VARCHAR2( 1 ) := '|';
   CNUMAXREGREAD CONSTANT NUMBER := 50;
   CNUMESSPROCC CONSTANT NUMBER := 27;
   CSBTIPORESTBLOQFINAN CONSTANT VARCHAR2( 20 ) := 'RESTYPE_FIN_BLOCK';
   CNUPOSTIPOIMPEDIMENTO CONSTANT NUMBER := 1;
   CNUPOSTIPOSOLICITUD CONSTANT NUMBER := 2;
   CNUPOSTIPOMOTIVO CONSTANT NUMBER := 3;
   CNUPOSTIPOPRODUCTO CONSTANT NUMBER := 4;
   CNUPOSTIPOIDENTIFICACION CONSTANT NUMBER := 5;
   CNUPOSIDENTIFICACION CONSTANT NUMBER := 6;
   CNUPOSDIRECCION CONSTANT NUMBER := 7;
   CNUPOSCONTRATO CONSTANT NUMBER := 8;
   CNUPOSPRODUCTO CONSTANT NUMBER := 9;
   CNUPOSCAUSA CONSTANT NUMBER := 10;
   CNUPOSOBSERVACION CONSTANT NUMBER := 11;
   CNUPOSPRIORIDAD CONSTANT NUMBER := 12;
   CNUVALORATRNOVALIDO CONSTANT NUMBER := 901448;
   CNUCONTRATONOVALIDO CONSTANT NUMBER := 6641;
   CNUPRODUCTONOVALIDO CONSTANT NUMBER := 6642;
   CNUDIRECCIONNOVALIDO CONSTANT NUMBER := 6643;
   CNUTIPOIDENTIFICACIONNOVALIDO CONSTANT NUMBER := 6644;
   CNUIDENTIFICACIONNOVALIDA CONSTANT NUMBER := 6647;
   CNUTIPOIMPEDIMENTONOVALIDO CONSTANT NUMBER := 6645;
   CNUTIPOPRODUCTONOVALIDO CONSTANT NUMBER := 1112;
   CNUTIPOSOLICITUDNOVALIDO CONSTANT NUMBER := 7421;
   CNUTIPOPRODUCTONOCORR CONSTANT NUMBER := 6646;
   CNUPRIORIDADNOVALIDA CONSTANT NUMBER := 6651;
   CNUCRITERIOSEXCLUYENTES CONSTANT NUMBER := 6652;
   CNUCAUSANOVALIDA CONSTANT NUMBER := 3627;
   CNUOBSERVACIONNOVALIDA CONSTANT NUMBER := 5601;
   CNURELTIPOPRODTIPOSOLNOVALIDA CONSTANT NUMBER := 110266;
   CNUTIPOMOTIVONOVALIDO CONSTANT NUMBER := 2051;
   CNURELTIPOMOTTIPOSOLNOVALIDA CONSTANT NUMBER := 6653;
   CNUINVALID_SUBSCRIBER CONSTANT NUMBER := 9770;
   CNUIMPEDI_INVALIDO CONSTANT NUMBER := 900929;
   CNUVARIOS_IMPEDI CONSTANT NUMBER := 900927;
   CNUSIN_CRIT_CANCEL CONSTANT NUMBER := 900926;
   CNUVARIOS_CRIT_CANCEL CONSTANT NUMBER := 900925;
   CNUVARIOS_SUSCRIPT CONSTANT NUMBER := 900924;
   CNUSYSDATE_MENOR CONSTANT NUMBER := 900923;
   CNUIMPEDI_FECHA_OBLIG CONSTANT NUMBER := 900922;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE BORRAREGCARGPORIDREPORTE( INUIDREPORTE IN REPORTES.REPONUME%TYPE )
    IS
      NUMREPORTES NUMBER := 0;
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.BorraRegCargPorIdProc Id [' || INUIDREPORTE || ']', 5 );
      PKBCREPOINCO.GETNUMOFRECS( INUIDREPORTE, NUMREPORTES );
      IF ( NUMREPORTES > 0 ) THEN
         PKBCREPOINCO.DELREPORTRECORDS( INUIDREPORTE );
         PKTBLREPORTES.DELRECORD( INUIDREPORTE );
         COMMIT;
      END IF;
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.BorraRegCargPorIdProc', 5 );
   END;
   PROCEDURE OBTLINEASARCHIMPEDIMENTOS( IOFDARCHIVO IN OUT UTL_FILE.FILE_TYPE, IONULINE IN OUT NUMBER, INUPROCESO IN NUMBER, OTNUPROCESO OUT NOCOPY PKTBLREPOINCO.TYREINREPO, OTNUNUMLINEA OUT NOCOPY PKTBLREPOINCO.TYREINCODI, OTSBLINEA OUT NOCOPY PKTBLREPOINCO.TYREINOBSE, OBLISENDFILE OUT BOOLEAN, INUMAXIREGI IN NUMBER := 1 )
    IS
      SBLINE VARCHAR2( 32767 );
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.ObtLineasArchImpedimentos', 5 );
      LOOP
         GE_BOFILEMANAGER.FILEREAD( IOFDARCHIVO, SBLINE );
         EXIT WHEN SBLINE IS NULL;
         IONULINE := IONULINE + 1;
         UT_TRACE.TRACE( 'Linea leida [' || IONULINE || '] - ' || SBLINE, 11 );
         OTNUPROCESO( IONULINE ) := INUPROCESO;
         OTNUNUMLINEA( IONULINE ) := IONULINE;
         OTSBLINEA( IONULINE ) := SBLINE;
         EXIT WHEN IONULINE = INUMAXIREGI;
      END LOOP;
      IF ( SBLINE IS NULL ) THEN
         OBLISENDFILE := TRUE;
      END IF;
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.ObtLineasArchImpedimentos', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CARGARARCHIVO( ISBPATH IN GE_DIRECTORY.PATH%TYPE, ISBINTERACTFILENAME IN VARCHAR2, ONUREPORTE OUT NUMBER )
    IS
      NULINEA NUMBER;
      NUREPORTE NUMBER;
      FDARCHIVO UTL_FILE.FILE_TYPE;
      BLISENDFILE BOOLEAN := FALSE;
      TNUPROCESO PKTBLREPOINCO.TYREINREPO;
      TNUNUMLINEA PKTBLREPOINCO.TYREINCODI;
      TSBLINEA PKTBLREPOINCO.TYREINOBSE;
      NUINDICE BINARY_INTEGER;
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.CargarArchivo', 5 );
      UT_TRACE.TRACE( 'Ruta [' || ISBPATH || '] Archivo a cargar [' || ISBINTERACTFILENAME || ']', 5 );
      GE_BOFILEMANAGER.CHECKFILEISEXISTING( ISBPATH || CSBFILE_SEPARATOR || ISBINTERACTFILENAME );
      GE_BOFILEMANAGER.FILEOPEN( FDARCHIVO, ISBPATH, ISBINTERACTFILENAME, GE_BOFILEMANAGER.CSBREAD_OPEN_FILE, UT_FILEMANAGER.CNUMAX_CHAR_LINE );
      UT_TRACE.TRACE( 'Abri√≥ Archivo de Carga', 4 );
      NULINEA := 0;
      PKREPORTSMGR.CREATEREPORT( 'Carga Masiva Impedimentos CCPCI', NUREPORTE );
      ONUREPORTE := NUREPORTE;
      LOOP
         TNUPROCESO.DELETE;
         TNUNUMLINEA.DELETE;
         TSBLINEA.DELETE;
         OBTLINEASARCHIMPEDIMENTOS( FDARCHIVO, NULINEA, NUREPORTE, TNUPROCESO, TNUNUMLINEA, TSBLINEA, BLISENDFILE, CNUMAXREGREAD );
         IF ( TNUNUMLINEA.FIRST IS NOT NULL ) THEN
            FORALL NUINDICE IN TNUNUMLINEA.FIRST..TNUNUMLINEA.LAST
               INSERT INTO repoinco
                    (
                        repoinco.reinrepo,
                        repoinco.reincodi,
                        repoinco.reinobse
                    ) VALUES
                    (
                        nuReporte,
                        tnuNumLinea(nuIndice),
                        tsbLinea(nuIndice)
                    );
            COMMIT;
         END IF;
         IF ( BLISENDFILE ) THEN
            EXIT;
         END IF;
      END LOOP;
      UT_TRACE.TRACE( 'Cierra archivo', 5 );
      GE_BOFILEMANAGER.FILECLOSE( FDARCHIVO );
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.CargarArchivo', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOFILEMANAGER.FILECLOSE( FDARCHIVO );
         UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.CargarArchivo ErrorControled', 5 );
         BORRAREGCARGPORIDREPORTE( NUREPORTE );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOFILEMANAGER.FILECLOSE( FDARCHIVO );
         BORRAREGCARGPORIDREPORTE( NUREPORTE );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VALIDATEDATA( SBDIRECTORYID IN GE_BOINSTANCECONTROL.STYSBVALUE, SBLOADFILE IN GE_BOINSTANCECONTROL.STYSBVALUE, SBERRORFILE IN GE_BOINSTANCECONTROL.STYSBVALUE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.ValidateData', 5 );
      IF ( SBDIRECTORYID IS NULL ) THEN
         ERRORS.SETERROR( CNUNULL_ATTRIBUTE, 'Directorio' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( SBLOADFILE IS NULL ) THEN
         ERRORS.SETERROR( CNUNULL_ATTRIBUTE, 'Archivo de Impedimentos' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( SBERRORFILE IS NULL ) THEN
         ERRORS.SETERROR( CNUNULL_ATTRIBUTE, 'Archivo de Errores' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.ValidateData', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE REGISTRARIMPEDIMENTO( INUTIPOIMPEDIMENTO IN CC_RESTRICTION.RESTRICTION_TYPE_ID%TYPE, INUTIPOSOLICITUD IN CC_RESTRICTION.PACKAGE_TYPE_ID%TYPE, INUTIPOMOTIVO IN CC_RESTRICTION.MOTIVE_TYPE_ID%TYPE, INUTIPOPRODUCTO IN CC_RESTRICTION.PRODUCT_TYPE_ID%TYPE, INUTIPOIDENTIFICACION IN CC_RESTRICTION.IDENT_TYPE_ID%TYPE, ISBIDENTIFICACION IN CC_RESTRICTION.IDENTIFICATION%TYPE, INUDIRECCION IN CC_RESTRICTION.ADDRESS_ID%TYPE, INUCONTRATO IN CC_RESTRICTION.SUBSCRIPTION_ID%TYPE, INUPRODUCTO IN CC_RESTRICTION.PRODUCT_ID%TYPE, INUCAUSA IN CC_RESTRICTION.CAUSAL_ID%TYPE, ISBOBSERVACION IN CC_RESTRICTION.COMMENT_%TYPE, INUPRIORIDAD IN CC_RESTRICTION.PRIORITY_ID%TYPE )
    IS
      NUIMPEDIMENTO CC_RESTRICTION.RESTRICTION_ID%TYPE := 0;
      NUESTADOIMPEDIMENTO CC_RESTRICTION.RESTRICTION_STATU_ID%TYPE := CC_BOPARAMETER.FNUGETACTIVE_RESTRICT;
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.RegistrarImpedimento', 5 );
      CC_BORESTRICTION.ADDRESTRICTION( NUIMPEDIMENTO, INUTIPOIMPEDIMENTO, NUESTADOIMPEDIMENTO, INUTIPOPRODUCTO, INUPRODUCTO, INUTIPOMOTIVO, NULL, INUDIRECCION, INUCONTRATO, ISBIDENTIFICACION, UT_DATE.FDTMAXDATE, INUTIPOIDENTIFICACION, ISBOBSERVACION, INUTIPOSOLICITUD, NULL, INUPRIORIDAD );
      UT_TRACE.TRACE( 'Impedimento registrado [' || NUIMPEDIMENTO || ']', 6 );
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.RegistrarImpedimento', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END REGISTRARIMPEDIMENTO;
   PROCEDURE PROCESAREGISTRO( INULINENUMBER IN REPOINCO.REINCODI%TYPE, ISBLINE IN REPOINCO.REINOBSE%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      NUTIPOIMPEDIMENTO CC_RESTRICTION.RESTRICTION_TYPE_ID%TYPE;
      NUTIPOSOLICITUD CC_RESTRICTION.PACKAGE_TYPE_ID%TYPE;
      NUTIPOMOTIVO CC_RESTRICTION.MOTIVE_TYPE_ID%TYPE;
      NUTIPOPRODUCTO CC_RESTRICTION.PRODUCT_TYPE_ID%TYPE;
      NUTIPOIDENTIFICACION CC_RESTRICTION.IDENT_TYPE_ID%TYPE;
      SBIDENTIFICACION CC_RESTRICTION.IDENTIFICATION%TYPE;
      NUDIRECCION CC_RESTRICTION.ADDRESS_ID%TYPE;
      NUCONTRATO CC_RESTRICTION.SUBSCRIPTION_ID%TYPE;
      NUPRODUCTO CC_RESTRICTION.PRODUCT_ID%TYPE;
      NUCAUSA CC_RESTRICTION.CAUSAL_ID%TYPE;
      SBOBSERVACION CC_RESTRICTION.COMMENT_%TYPE;
      NUPRIORIDAD CC_RESTRICTION.PRIORITY_ID%TYPE;
      NUCRITERIOSEXCLUYENTES NUMBER := 0;
      SBEXISTERELACION VARCHAR2( 2 ) := NULL;
      CURSOR CUSOLICITUDMOTIVOVALIDO( TIPOMOTIVO IN PS_PRODUCT_MOTIVE.MOTIVE_TYPE_ID%TYPE, TIPOSOLICITUD IN PS_PRD_MOTIV_PACKAGE.PACKAGE_TYPE_ID%TYPE ) IS
SELECT DISTINCT 'x'
        FROM ps_prd_motiv_package, ps_product_motive
        WHERE ps_prd_motiv_package.package_type_id = tipoSolicitud AND
            ps_prd_motiv_package.product_motive_id = ps_product_motive.product_motive_id AND
            ps_product_motive.motive_type_id = tipoMotivo AND
            ps_product_motive.active = ge_boconstants.GetYes();
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.ProcesaRegistro N√∫mero de L√≠nea[' || INULINENUMBER || ']', 5 );
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOIMPEDIMENTO ) ) ) THEN
         NUTIPOIMPEDIMENTO := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOIMPEDIMENTO ) );
         UT_TRACE.TRACE( 'Tipo de impedimento [' || NUTIPOIMPEDIMENTO || ']', 6 );
         IF ( NUTIPOIMPEDIMENTO IS NULL OR ( DAMO_RESTRICTION_TYPE.FBLEXIST( NUTIPOIMPEDIMENTO ) = FALSE ) ) THEN
            ERRORS.SETERROR( CNUTIPOIMPEDIMENTONOVALIDO );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Tipo de Impedimento]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSCAUSA ) ) ) THEN
         NUCAUSA := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSCAUSA ) );
         UT_TRACE.TRACE( 'Causa [' || NUCAUSA || ']', 6 );
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Causa]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      SBOBSERVACION := UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSOBSERVACION );
      IF ( SBOBSERVACION IS NULL ) THEN
         ERRORS.SETERROR( CNUOBSERVACIONNOVALIDA );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'Observacion [' || SBOBSERVACION || ']', 6 );
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSDIRECCION ) ) ) THEN
         NUDIRECCION := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSDIRECCION ) );
         UT_TRACE.TRACE( 'Direccion [' || NUDIRECCION || ']', 6 );
         IF ( NUDIRECCION IS NOT NULL AND ( DAAB_ADDRESS.FBLEXIST( NUDIRECCION ) = FALSE ) ) THEN
            ERRORS.SETERROR( CNUDIRECCIONNOVALIDO );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Direcci√≥n]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSCONTRATO ) ) ) THEN
         NUCONTRATO := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSCONTRATO ) );
         UT_TRACE.TRACE( 'Contrato [' || NUCONTRATO || ']', 6 );
         IF ( NUCONTRATO IS NOT NULL AND ( PKTBLSUSCRIPC.FBLEXIST( NUCONTRATO ) = FALSE ) ) THEN
            ERRORS.SETERROR( CNUCONTRATONOVALIDO );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Contrato]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSPRODUCTO ) ) ) THEN
         NUPRODUCTO := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSPRODUCTO ) );
         UT_TRACE.TRACE( 'Producto [' || NUPRODUCTO || ']', 6 );
         IF ( NUPRODUCTO IS NOT NULL AND ( DAPR_PRODUCT.FBLEXIST( NUPRODUCTO ) = FALSE ) ) THEN
            ERRORS.SETERROR( CNUPRODUCTONOVALIDO );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Producto]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      SBIDENTIFICACION := UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSIDENTIFICACION );
      UT_TRACE.TRACE( 'Identificacion [' || SBIDENTIFICACION || ']', 6 );
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOIDENTIFICACION ) ) ) THEN
         NUTIPOIDENTIFICACION := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOIDENTIFICACION ) );
         UT_TRACE.TRACE( 'Tipo de Identificacion [' || NUTIPOIDENTIFICACION || ']', 6 );
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Tipo de Identificaci√≥n]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( NUTIPOIDENTIFICACION IS NOT NULL AND ( DAGE_IDENTIFICA_TYPE.FBLEXIST( NUTIPOIDENTIFICACION ) = FALSE ) ) THEN
         ERRORS.SETERROR( CNUTIPOIDENTIFICACIONNOVALIDO );
         RAISE EX.CONTROLLED_ERROR;
       ELSIF ( NUTIPOIDENTIFICACION IS NOT NULL AND ( DAGE_IDENTIFICA_TYPE.FBLEXIST( NUTIPOIDENTIFICACION ) = TRUE ) AND SBIDENTIFICACION IS NULL ) THEN
         ERRORS.SETERROR( CNUCRITERIOSEXCLUYENTES );
         RAISE EX.CONTROLLED_ERROR;
       ELSIF ( SBIDENTIFICACION IS NOT NULL AND NUTIPOIDENTIFICACION IS NULL ) THEN
         ERRORS.SETERROR( CNUCRITERIOSEXCLUYENTES );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( NUTIPOIDENTIFICACION IS NOT NULL AND SBIDENTIFICACION IS NOT NULL ) THEN
         NUCRITERIOSEXCLUYENTES := NUCRITERIOSEXCLUYENTES + 1;
      END IF;
      IF ( NUCONTRATO IS NOT NULL ) THEN
         NUCRITERIOSEXCLUYENTES := NUCRITERIOSEXCLUYENTES + 1;
      END IF;
      IF ( NUPRODUCTO IS NOT NULL ) THEN
         NUCRITERIOSEXCLUYENTES := NUCRITERIOSEXCLUYENTES + 1;
      END IF;
      IF ( NUDIRECCION IS NOT NULL ) THEN
         NUCRITERIOSEXCLUYENTES := NUCRITERIOSEXCLUYENTES + 1;
      END IF;
      IF ( NUCRITERIOSEXCLUYENTES != 1 ) THEN
         ERRORS.SETERROR( CNUCRITERIOSEXCLUYENTES );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOPRODUCTO ) ) ) THEN
         NUTIPOPRODUCTO := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOPRODUCTO ) );
         UT_TRACE.TRACE( 'Tipo de Producto [' || NUTIPOPRODUCTO || ']', 6 );
         IF ( NUTIPOPRODUCTO IS NOT NULL AND ( PKTBLSERVICIO.FBLEXIST( NUTIPOPRODUCTO ) = FALSE ) ) THEN
            ERRORS.SETERROR( CNUTIPOPRODUCTONOVALIDO, NUTIPOPRODUCTO );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Tipo de Producto]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOSOLICITUD ) ) ) THEN
         NUTIPOSOLICITUD := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOSOLICITUD ) );
         UT_TRACE.TRACE( 'Tipo de solicitud [' || NUTIPOSOLICITUD || ']', 6 );
         IF ( NUTIPOSOLICITUD IS NOT NULL AND ( DAPS_PACKAGE_TYPE.FBLEXIST( NUTIPOSOLICITUD ) = FALSE ) ) THEN
            ERRORS.SETERROR( CNUTIPOSOLICITUDNOVALIDO );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Tipo de Solicitud]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( PS_BOPACKAGETYPE.FNUGETFINANDEBTID() = NUTIPOSOLICITUD ) THEN
         NUTIPOIMPEDIMENTO := GE_BOPARAMETER.FNUGET( CSBTIPORESTBLOQFINAN );
      END IF;
      IF ( NUTIPOIMPEDIMENTO = GE_BOPARAMETER.FNUGET( CSBTIPORESTBLOQFINAN ) AND NUCONTRATO IS NULL ) THEN
         ERRORS.SETERROR( CNUCONTRATONOVALIDO );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOMOTIVO ) ) ) THEN
         NUTIPOMOTIVO := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSTIPOMOTIVO ) );
         IF ( NUTIPOMOTIVO IS NOT NULL AND ( DAPS_MOTIVE_TYPE.FBLEXIST( NUTIPOMOTIVO ) = FALSE ) ) THEN
            ERRORS.SETERROR( CNUTIPOMOTIVONOVALIDO, NUTIPOMOTIVO );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         UT_TRACE.TRACE( 'Tipo de Motivo [' || NUTIPOMOTIVO || ']', 6 );
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Tipo de Motivo]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( NUTIPOMOTIVO IS NOT NULL AND NUTIPOSOLICITUD IS NOT NULL ) THEN
         SBEXISTERELACION := NULL;
         OPEN CUSOLICITUDMOTIVOVALIDO( NUTIPOMOTIVO, NUTIPOSOLICITUD );
         FETCH CUSOLICITUDMOTIVOVALIDO
            INTO SBEXISTERELACION;
         CLOSE CUSOLICITUDMOTIVOVALIDO;
         IF ( SBEXISTERELACION IS NULL ) THEN
            ERRORS.SETERROR( CNURELTIPOMOTTIPOSOLNOVALIDA, NUTIPOMOTIVO );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
      IF ( UT_CONVERT.IS_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSPRIORIDAD ) ) ) THEN
         NUPRIORIDAD := TO_NUMBER( UT_STRING.EXTSTRFIELD( ISBLINE, CSBCAMPOSSEPARADOR, CNUPOSPRIORIDAD ) );
         IF ( NUPRIORIDAD IS NOT NULL AND ( DAGE_PRIORITY.FBLEXIST( NUPRIORIDAD ) = FALSE ) ) THEN
            ERRORS.SETERROR( CNUPRIORIDADNOVALIDA );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         UT_TRACE.TRACE( 'Prioridad [' || NUPRIORIDAD || ']', 6 );
       ELSE
         ERRORS.SETERROR( CNUVALORATRNOVALIDO, '[Prioridad]' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      REGISTRARIMPEDIMENTO( NUTIPOIMPEDIMENTO, NUTIPOSOLICITUD, NUTIPOMOTIVO, NUTIPOPRODUCTO, NUTIPOIDENTIFICACION, SBIDENTIFICACION, NUDIRECCION, NUCONTRATO, NUPRODUCTO, NUCAUSA, SBOBSERVACION, NUPRIORIDAD );
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.ProcesaRegistro', 5 );
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END PROCESAREGISTRO;
   PROCEDURE REGISTRAIMPEDIMENTOSDEARCHIVO( ISBIDPROCESO IN ESTAPROG.ESPRPROG%TYPE, ISBARCHIVOERR IN VARCHAR2, INUHILOACTUAL IN NUMBER, INUTOTALHILOS IN NUMBER, ISBREPORTE IN VARCHAR2 )
    IS
      BLMORERECORDS BOOLEAN;
      NUININUMLINEA REPOINCO.REINCODI%TYPE := 0;
      TBOBTREGISTROS TYTBOBTREGISTROS;
      NUTABLEINDEX BINARY_INTEGER;
      NUTOTALREG NUMBER;
      NUCURRENTREG NUMBER;
      NUPORCENT NUMBER;
      FLFILE UTL_FILE.FILE_TYPE;
      SBERRORFILE VARCHAR2( 2000 );
      SBFILEEXT VARCHAR2( 10 );
      SBFILEDIRECTORY VARCHAR2( 2000 );
      SBFILEUSER VARCHAR2( 2000 );
      SBFILEINSTANCE VARCHAR2( 2000 );
      NUERRORCODE NUMBER := 0;
      SBERRORMESSAGE VARCHAR2( 4000 );
      SBMENSAJE MENSAJE.MENSDESC%TYPE;
      NUNUMREGPROC NUMBER;
      PROCEDURE ADDIDPROCESO
       IS
       BEGIN
         UT_TRACE.TRACE( 'Inicio AddIdProceso Proceso[' || ISBIDPROCESO || ']', 6 );
         SBMENSAJE := PKTBLMENSAJE.FSBGETDESCRIPTION( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, PKBOCONSUMPTIONVARANA.CNUMESSAGE_PRO );
         UT_TRACE.TRACE( 'Adiciona Mensaje', 6 );
         PKSTATUSEXEPROGRAMMGR.ADDRECORD( ISBIDPROCESO || '-' || INUHILOACTUAL, SBMENSAJE, 0 );
         COMMIT;
         OPEN CUOBTTOTREGPORHILO( ISBREPORTE, INUHILOACTUAL, INUTOTALHILOS );
         FETCH CUOBTTOTREGPORHILO
            INTO NUNUMREGPROC;
         CLOSE CUOBTTOTREGPORHILO;
         UT_TRACE.TRACE( 'Total registros del hilo [' || NUNUMREGPROC || ']', 6 );
         IF ( NUNUMREGPROC = 0 ) THEN
            SBMENSAJE := PKTBLMENSAJE.FSBGETDESCRIPTION( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_GRL, PKBOCONSUMPTIONVARANA.CNUMESSAGE_SIN_REG );
         END IF;
         PKSTATUSEXEPROGRAMMGR.UPSTATUSEXEPROG( ISBIDPROCESO || '-' || INUHILOACTUAL, SBMENSAJE, 0, NULL, NUNUMREGPROC );
         COMMIT;
         UT_TRACE.TRACE( 'Fin AddIdProceso', 6 );
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.RegistraImpedimentosDeArchivo Proceso [' || ISBIDPROCESO || '] Hilo [' || INUHILOACTUAL || ']', 5 );
      SBERRORFILE := UT_STRING.EXTSTRFIELD( ISBARCHIVOERR, '.', 1 );
      SBFILEEXT := UT_STRING.EXTSTRFIELD( ISBARCHIVOERR, '.', 2 );
      SBERRORFILE := SBERRORFILE || '_' || ISBIDPROCESO || '_' || INUHILOACTUAL || '.' || SBFILEEXT;
      UT_TRACE.TRACE( 'Archivo de errores del hilo[' || SBERRORFILE || ']', 5 );
      SBFILEDIRECTORY := PKPRINTMGR.FSBGETPATHTRACE;
      UT_FILEMANAGER.FILEOPEN( FLFILE, SBFILEDIRECTORY, SBERRORFILE, UT_FILEMANAGER.CSBWRITE_OPEN_FILE );
      UT_FILEMANAGER.FILEWRITE( FLFILE, '<<< IMPEDIMENTOS NO REGISTRADOS >>>' );
      NUCURRENTREG := 0;
      ADDIDPROCESO;
      SBMENSAJE := PKTBLMENSAJE.FSBGETDESCRIPTION( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_GRL, CNUMESSPROCC );
      LOOP
         UT_TRACE.TRACE( 'Recorrido de los registros. Linea inicial [' || NUININUMLINEA || ']', 5 );
         BLMORERECORDS := TRUE;
         IF ( CUOBTREGISTROS%ISOPEN ) THEN
            CLOSE CUOBTREGISTROS;
         END IF;
         UT_TRACE.TRACE( 'ID Proceso [' || ISBIDPROCESO || '] Linea inicial [' || NUININUMLINEA || '] Total hilos [' || INUTOTALHILOS || '] Hilo Actual [' || INUHILOACTUAL || ']Reporte [' || ISBREPORTE || ']', 5 );
         OPEN CUOBTREGISTROS( ISBREPORTE, NUININUMLINEA, INUHILOACTUAL, INUTOTALHILOS );
         FETCH CUOBTREGISTROS
            BULK COLLECT INTO TBOBTREGISTROS
            LIMIT 100;
         IF ( CUOBTREGISTROS%ROWCOUNT = 0 ) THEN
            BLMORERECORDS := FALSE;
         END IF;
         IF ( TBOBTREGISTROS.FIRST IS NULL ) THEN
            EXIT;
         END IF;
         FOR NUTABLEINDEX IN TBOBTREGISTROS.FIRST..TBOBTREGISTROS.LAST
          LOOP
            PROCESAREGISTRO( TBOBTREGISTROS( NUTABLEINDEX ).REINCODI, TBOBTREGISTROS( NUTABLEINDEX ).REINOBSE, NUERRORCODE, SBERRORMESSAGE );
            IF ( NUERRORCODE != 0 ) THEN
               UT_FILEMANAGER.FILEWRITE( FLFILE, 'N√∫mero de L√≠nea [' || TBOBTREGISTROS( NUTABLEINDEX ).REINCODI || '] --- ' || NUERRORCODE || '  ' || SBERRORMESSAGE || ' --- Registro [' || TBOBTREGISTROS( NUTABLEINDEX ).REINOBSE || ']' );
               UT_TRACE.TRACE( 'Fila [' || TBOBTREGISTROS( NUTABLEINDEX ).REINCODI || '] no procesada', 6 );
             ELSE
               UT_TRACE.TRACE( 'Fila [' || TBOBTREGISTROS( NUTABLEINDEX ).REINCODI || '] procesada', 6 );
            END IF;
         END LOOP;
         COMMIT;
         UT_TRACE.TRACE( 'Sale del ciclo [' || TBOBTREGISTROS( TBOBTREGISTROS.LAST ).REINCODI || ']', 5 );
         NUININUMLINEA := TBOBTREGISTROS( TBOBTREGISTROS.LAST ).REINCODI;
         UT_TRACE.TRACE( 'Ultimo registro procesado [' || NUININUMLINEA || ']', 5 );
         SBMENSAJE := REPLACE( SBMENSAJE, 'PROCESS_NUMBER', TO_CHAR( INUHILOACTUAL ) );
         IF ( NUNUMREGPROC != 0 ) THEN
            NUPORCENT := ( ( NUININUMLINEA / NUNUMREGPROC ) * 100 );
            PKSTATUSEXEPROGRAMMGR.UPDATEPERCENTAGE( ISBIDPROCESO || '-' || INUHILOACTUAL, SBMENSAJE, 1, NUPORCENT );
         END IF;
         TBOBTREGISTROS.DELETE;
         CLOSE CUOBTREGISTROS;
         EXIT WHEN NOT BLMORERECORDS;
      END LOOP;
      PKSTATUSEXEPROGRAMMGR.PROCESSFINISHOKAT( ISBIDPROCESO || '-' || INUHILOACTUAL );
      UT_FILEMANAGER.FILEWRITE( FLFILE, '<<< REGISTRO DE IMPEDIMENTOS TERMINADO >>>' );
      UT_FILEMANAGER.FILECLOSE( FLFILE );
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.RegistraImpedimentosDeArchivo', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUOBTREGISTROS%ISOPEN ) THEN
            CLOSE CUOBTREGISTROS;
         END IF;
         IF ( CUOBTTOTREGPORHILO%ISOPEN ) THEN
            CLOSE CUOBTTOTREGPORHILO;
         END IF;
         UT_FILEMANAGER.FILEWRITE( FLFILE, '<<< REGISTRO DE IMPEDIMENTOS TERMINADO CON ERRORES >>>' );
         UT_FILEMANAGER.FILECLOSE( FLFILE );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUOBTREGISTROS%ISOPEN ) THEN
            CLOSE CUOBTREGISTROS;
         END IF;
         IF ( CUOBTTOTREGPORHILO%ISOPEN ) THEN
            CLOSE CUOBTTOTREGPORHILO;
         END IF;
         UT_FILEMANAGER.FILEWRITE( FLFILE, '<<< REGISTRO DE IMPEDIMENTOS TERMINADO CON ERRORES >>>' );
         UT_FILEMANAGER.FILECLOSE( FLFILE );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PROCESO
    IS
      SBDIRECTORYID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBPATH GE_BOINSTANCECONTROL.STYSBVALUE;
      SBLOADFILE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBERRORFILE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      NUREPORTE NUMBER := 0;
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      SBCOMANDO VARCHAR2( 2000 );
      SBCONNECTIONSTRING VARCHAR2( 500 );
      SBUSER VARCHAR2( 100 );
      SBPASSWORD VARCHAR2( 100 );
      SBDATABASE VARCHAR2( 100 );
      SBCURRENDATE VARCHAR2( 100 );
      SBIDENCCPCI VARCHAR2( 100 ) := NULL;
      SBFILEDIRECTORY VARCHAR2( 100 );
      SBLOGPROCFILE VARCHAR2( 100 );
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.Proceso', 5 );
      SBDIRECTORYID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'GE_DIRECTORY', 'DIRECTORY_ID' );
      SBPATH := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'GE_DIRECTORY', 'PATH' );
      SBLOADFILE := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'GE_DIRECTORY', 'ALIAS' );
      SBERRORFILE := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE( 'GE_DIRECTORY', 'DESCRIPTION' );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( 'WORK_INSTANCE', NULL, 'SUCCESS_MESSAGE_ENTITY', 'SUCCESS_MESSAGE_ATTRIBUTE', 120863 );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( 'WORK_INSTANCE', NULL, 'SUCCESS_MESSAGE_ARGUMENTS_ENTITY', 'SUCCESS_MESSAGE_ARGUMENTS_ATTRIBUTE', 'CCPCI' );
      VALIDATEDATA( SBDIRECTORYID, SBLOADFILE, SBERRORFILE );
      CARGARARCHIVO( SBPATH, SBLOADFILE, NUREPORTE );
      GE_BODATABASECONNECTION.GETCONNECTIONSTRING( SBUSER, SBPASSWORD, SBDATABASE );
      SBCONNECTIONSTRING := SBUSER || '/' || SBPASSWORD || '@' || SBDATABASE;
      UT_TRACE.TRACE( 'Cadena de conexi√≥n [' || SBCONNECTIONSTRING || ']', 6 );
      SBCURRENDATE := TO_CHAR( SYSDATE, 'dd-mm-yyyy_hh-mi' );
      SBIDENCCPCI := TO_CHAR( SYSDATE, 'ddmmyyhhmi' );
      SBFILEDIRECTORY := PKPRINTMGR.FSBGETPATHTRACE;
      SBLOGPROCFILE := SBFILEDIRECTORY || '/' || 'CCPCI_' || SBCURRENDATE;
      UT_TRACE.TRACE( 'Archivo de los del ProC [' || SBLOGPROCFILE || ']', 6 );
      UT_TRACE.TRACE( 'Inicia procesamiento con hilos para el proceso de carga.[' || NUREPORTE || ']', 6 );
      SBCOMANDO := 'ccpci ' || SBCONNECTIONSTRING || ' ' || 'CCPCI_' || SBIDENCCPCI || ' ' || SBERRORFILE || ' ' || ' ' || NUREPORTE || ' ' || ' > ' || SBLOGPROCFILE || '.trc';
      UT_TRACE.TRACE( 'Comando del ProC.[' || SBCOMANDO || ']', 7 );
      LLAMASIST( SBCOMANDO );
      UT_TRACE.TRACE( 'Termina procesamiento con hilos para el proceso de carga.[' || NUREPORTE || ']', 6 );
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.Proceso', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Fin CONTROLLED_ERROR cc_boProCargaImpedim.Proceso', 5 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         UT_TRACE.TRACE( 'Fin others cc_boProCargaImpedim.Proceso' || ERRORS.NUERRORCODE, 5 );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUOBTTOTREGPORHILO( ISBREPORTE IN VARCHAR2, INUNUMHILO IN NUMBER, INUNUMTOTHILOS IN NUMBER )
    RETURN NUMBER
    IS
      NUTOTREG NUMBER;
      PROCEDURE CERRARCURSOR
       IS
       BEGIN
         IF ( CUOBTTOTREGPORHILO%ISOPEN ) THEN
            CLOSE CUOBTTOTREGPORHILO;
         END IF;
       EXCEPTION
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
    BEGIN
      CERRARCURSOR;
      OPEN CUOBTTOTREGPORHILO( ISBREPORTE, INUNUMHILO, INUNUMTOTHILOS );
      FETCH CUOBTTOTREGPORHILO
         INTO NUTOTREG;
      CLOSE CUOBTTOTREGPORHILO;
      RETURN NUTOTREG;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CERRARCURSOR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CERRARCURSOR;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FTBOBTREGISTROS( ISBREPORTE IN VARCHAR2, INUNUMINILINEA IN NUMBER, INUNUMHILO IN NUMBER, INUNUMTOTHILOS IN NUMBER, INUTAMBLOQUE IN NUMBER )
    RETURN TYTBOBTREGISTROS
    IS
      TBREGISTROS TYTBOBTREGISTROS;
      PROCEDURE CERRARCURSOR
       IS
       BEGIN
         IF ( CUOBTREGISTROS%ISOPEN ) THEN
            CLOSE CUOBTREGISTROS;
         END IF;
       EXCEPTION
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
    BEGIN
      CERRARCURSOR;
      OPEN CUOBTREGISTROS( ISBREPORTE, INUNUMINILINEA, INUNUMHILO, INUNUMTOTHILOS );
      FETCH CUOBTREGISTROS
         BULK COLLECT INTO TBREGISTROS
         LIMIT INUTAMBLOQUE;
      CLOSE CUOBTREGISTROS;
      RETURN TBREGISTROS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CERRARCURSOR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CERRARCURSOR;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSREGDESACTIVACION( ISBREGISTRO IN VARCHAR2, IONUREPORTE IN OUT REPORTES.REPONUME%TYPE )
    IS
      TBREPOINCO PKTBLREPOINCO.TYTBREPOINCO;
      TBSTRING UT_STRING.TYTB_STRING;
      NUINDEX BINARY_INTEGER;
      NUREPOINCOINDEX BINARY_INTEGER;
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.InsRegDesactivacion', 5 );
      UT_STRING.EXTSTRING( ISBREGISTRO, CHR( 13 ), TBSTRING );
      UT_TRACE.TRACE( 'Linea: ' || ISBREGISTRO, 5 );
      UT_TRACE.TRACE( 'Reporte: ' || IONUREPORTE, 5 );
      IF ( IONUREPORTE IS NULL ) THEN
         PKREPORTSMGR.CREATEREPORT( 'Carga de Archivo Cliente', IONUREPORTE );
         UT_TRACE.TRACE( 'Guarda el record: ' || IONUREPORTE, 1 );
      END IF;
      NUINDEX := TBSTRING.FIRST;
      NUREPOINCOINDEX := 0;
      LOOP
         EXIT WHEN NUINDEX IS NULL;
         TBSTRING( NUINDEX ) := LTRIM( RTRIM( TBSTRING( NUINDEX ) ) );
         EXIT WHEN ( ( TBSTRING( NUINDEX ) IS NULL ) AND ( NUINDEX = TBSTRING.LAST ) );
         TBREPOINCO.REINREPO( NUREPOINCOINDEX ) := IONUREPORTE;
         TBREPOINCO.REINCODI( NUREPOINCOINDEX ) := SEQ.GETNEXT( 'SQ_REPOINCO_REINCODI' );
         TBREPOINCO.REINCOD1( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCOD2( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCOD3( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCOD4( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCOD5( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCOD6( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCOD7( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCOD8( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCOD9( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCODA( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCODB( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCODC( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCODD( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCODE( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINLON1( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINLON2( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINLON3( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINLON4( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINLON5( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINVAL1( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINVAL2( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINVAL3( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINVAL4( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINVAL5( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINVAL6( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINVAL7( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINVAL8( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINVAL9( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDAT1( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDAT2( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDAT3( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDAT4( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDAT5( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDAT6( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDAT7( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDAT8( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDAT9( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCHR1( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCHR2( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCHR3( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCHR4( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINCHR5( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDES1( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDES2( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDES3( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDES4( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINDES5( NUREPOINCOINDEX ) := NULL;
         TBREPOINCO.REINOBSE( NUREPOINCOINDEX ) := TBSTRING( NUINDEX );
         UT_TRACE.TRACE( 'Reinrepo: ' || TBREPOINCO.REINREPO( NUREPOINCOINDEX ), 1 );
         UT_TRACE.TRACE( 'Reincodi: ' || TBREPOINCO.REINCODI( NUREPOINCOINDEX ), 1 );
         UT_TRACE.TRACE( 'Linea ->' || TBSTRING( NUINDEX ), 3 );
         NUINDEX := TBSTRING.NEXT( NUINDEX );
         NUREPOINCOINDEX := NUREPOINCOINDEX + 1;
      END LOOP;
      PKTBLREPOINCO.INSRECORDS( TBREPOINCO );
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.InsRegDesactivacion', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSREGDESACTIVACION;
   PROCEDURE PROCESOCCPDI( INUREPCARGAID IN REPORTES.REPONUME%TYPE, INUCAUSAL IN CC_CAUSAL.CAUSAL_ID%TYPE, ISBCOMMENT IN REPORTES.REPODESC%TYPE )
    IS
      NUREPERRORID REPORTES.REPONUME%TYPE;
      SBCOMANDO VARCHAR2( 2000 );
      SBCONNECTIONSTRING VARCHAR2( 500 );
      SBUSER VARCHAR2( 100 );
      SBPASSWORD VARCHAR2( 100 );
      SBDATABASE VARCHAR2( 100 );
      SBCURRENDATE VARCHAR2( 100 );
      SBIDENCCPDI VARCHAR2( 100 );
      SBFILEDIRECTORY VARCHAR2( 100 );
      SBLOGPROCFILE VARCHAR2( 100 );
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.ProcesoCCPDI', 5 );
      GE_BODATABASECONNECTION.GETCONNECTIONSTRING( SBUSER, SBPASSWORD, SBDATABASE );
      SBCONNECTIONSTRING := SBUSER || '/' || SBPASSWORD || '@' || SBDATABASE;
      UT_TRACE.TRACE( 'Cadena de conexi√≥n [' || SBCONNECTIONSTRING || ']', 6 );
      SBCURRENDATE := TO_CHAR( SYSDATE, 'dd-mm-yyyy_hh-mi' );
      SBIDENCCPDI := PKSTATUSEXEPROGRAMMGR.FSBGETPROGRAMID( 'CCPDI' );
      CC_BOUTILREPORTS.CREATEREPORT( 'Inconsistencias Cancelacion Impedimentos', SBIDENCCPDI, NUREPERRORID );
      UT_TRACE.TRACE( 'Reporte error: ' || NUREPERRORID, 1 );
      UT_TRACE.TRACE( 'IdenCCPDI: ' || SBIDENCCPDI, 1 );
      SBFILEDIRECTORY := PKPRINTMGR.FSBGETPATHTRACE;
      SBLOGPROCFILE := SBFILEDIRECTORY || '/' || 'CCPDI_' || SBCURRENDATE;
      UT_TRACE.TRACE( 'Archivo de log del ProC [' || SBLOGPROCFILE || ']', 6 );
      UT_TRACE.TRACE( 'Inicia procesamiento con hilos para el proceso de cancelacion de impedimentos.[' || INUREPCARGAID || ']', 6 );
      SBCOMANDO := 'ccpdi ' || SBCONNECTIONSTRING || ' ' || SBIDENCCPDI || ' ' || INUREPCARGAID || ' ' || NUREPERRORID || ' ' || GE_BOCONSTANTS.OK || ' ''' || ISBCOMMENT || ''' ' || ' > ' || SBLOGPROCFILE || '.trc';
      UT_TRACE.TRACE( 'Comando del ProC.[' || SBCOMANDO || ']', 7 );
      COMMIT;
      LLAMASIST( SBCOMANDO );
      UT_TRACE.TRACE( 'Termina procesamiento con hilos para el proceso de cancelacion de impedimentos.[' || INUREPCARGAID || ']', 6 );
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.ProcesoCCPDI', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PROCESOCCPDI;
   PROCEDURE VALREGISTROCCPDI( ISBLINEA IN VARCHAR2, ORCRESTDATA OUT DACC_RESTRICTION.STYCC_RESTRICTION )
    IS
      TBCAMPOS UT_STRING.TYTB_STRING;
      NUCANTIDADCAMPOS NUMBER( 1 ) := 7;
      NUERRORFORMATO GE_MESSAGE.MESSAGE_ID%TYPE := 9363;
      NUCRITERIO NUMBER( 1 ) := 0;
      TBSUBSCRIBERS DAGE_SUBSCRIBER.TYTBGE_SUBSCRIBER;
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.ValRegistroCCPDI', 5 );
      UT_STRING.EXTSTRING( ISBLINEA, '|', TBCAMPOS );
      IF ( TBCAMPOS.COUNT != NUCANTIDADCAMPOS ) THEN
         ERRORS.SETERROR( NUERRORFORMATO );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( ( TBCAMPOS( 1 ) IS NULL ) OR ( TBCAMPOS( 7 ) IS NULL ) ) THEN
         ERRORS.SETERROR( CNUIMPEDI_FECHA_OBLIG );
         RAISE EX.CONTROLLED_ERROR;
       ELSE
         IF ( NOT DAMO_RESTRICTION_TYPE.FBLEXIST( TBCAMPOS( 1 ) ) ) THEN
            ERRORS.SETERROR( CNUTIPOIMPEDIMENTONOVALIDO );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF ( TO_DATE( TBCAMPOS( 7 ), 'DD/MM/YYYY HH:MI:SS AM' ) < SYSDATE ) THEN
            ERRORS.SETERROR( CNUSYSDATE_MENOR );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         ORCRESTDATA.RESTRICTION_TYPE_ID := TO_NUMBER( TBCAMPOS( 1 ) );
         ORCRESTDATA.ENDING_DATE := TO_DATE( TBCAMPOS( 7 ), 'DD/MM/YYYY HH:MI:SS AM' );
         IF ( NOT ( ( TBCAMPOS( 2 ) IS NULL ) AND ( TBCAMPOS( 3 ) IS NULL ) ) ) THEN
            NUCRITERIO := NUCRITERIO + 1;
            IF ( ( NOT DAGE_IDENTIFICA_TYPE.FBLEXIST( TBCAMPOS( 2 ) ) ) OR ( NOT GE_BCSUBSCRIBER.FBLEXISTSUBSCRIBERBYIDENT( TBCAMPOS( 3 ), TBCAMPOS( 2 ) ) ) ) THEN
               ERRORS.SETERROR( CNUINVALID_SUBSCRIBER, TBCAMPOS( 3 ) || '|' || TBCAMPOS( 2 ) );
               RAISE EX.CONTROLLED_ERROR;
             ELSE
               TBSUBSCRIBERS := GE_BCSUBSCRIBER.FTBALLSUBSBYIDENT( TBCAMPOS( 2 ), TBCAMPOS( 3 ) );
               IF ( TBSUBSCRIBERS.COUNT > 1 ) THEN
                  ERRORS.SETERROR( CNUVARIOS_SUSCRIPT );
                  RAISE EX.CONTROLLED_ERROR;
               END IF;
               ORCRESTDATA.IDENT_TYPE_ID := TO_NUMBER( TBCAMPOS( 2 ) );
               ORCRESTDATA.IDENTIFICATION := TBCAMPOS( 3 );
            END IF;
         END IF;
         IF ( ( NOT TBCAMPOS( 4 ) IS NULL ) AND ( NUCRITERIO <= 1 ) ) THEN
            NUCRITERIO := NUCRITERIO + 1;
            IF ( NOT DAAB_ADDRESS.FBLEXIST( TBCAMPOS( 4 ) ) ) THEN
               ERRORS.SETERROR( CNUDIRECCIONNOVALIDO );
               RAISE EX.CONTROLLED_ERROR;
            END IF;
            ORCRESTDATA.ADDRESS_ID := TBCAMPOS( 4 );
         END IF;
         IF ( ( NOT TBCAMPOS( 5 ) IS NULL ) AND ( NUCRITERIO <= 1 ) ) THEN
            NUCRITERIO := NUCRITERIO + 1;
            IF ( NOT PKTBLSUSCRIPC.FBLEXIST( TBCAMPOS( 5 ) ) ) THEN
               ERRORS.SETERROR( CNUCONTRATONOVALIDO );
               RAISE EX.CONTROLLED_ERROR;
            END IF;
            ORCRESTDATA.SUBSCRIPTION_ID := TBCAMPOS( 5 );
         END IF;
         IF ( ( NOT TBCAMPOS( 6 ) IS NULL ) AND ( NUCRITERIO <= 1 ) ) THEN
            NUCRITERIO := NUCRITERIO + 1;
            IF ( NOT DAPR_PRODUCT.FBLEXIST( TBCAMPOS( 6 ) ) ) THEN
               ERRORS.SETERROR( CNUPRODUCTONOVALIDO );
               RAISE EX.CONTROLLED_ERROR;
            END IF;
            ORCRESTDATA.PRODUCT_ID := TBCAMPOS( 6 );
         END IF;
      END IF;
      IF ( NUCRITERIO > 1 ) THEN
         ERRORS.SETERROR( CNUVARIOS_CRIT_CANCEL );
         RAISE EX.CONTROLLED_ERROR;
       ELSE
         IF ( NUCRITERIO = 0 ) THEN
            ERRORS.SETERROR( CNUSIN_CRIT_CANCEL );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.ValRegistroCCPDI', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALREGISTROCCPDI;
   PROCEDURE PROCESARHILOCCPDI( ISBPROCESO IN ESTAPROG.ESPRPROG%TYPE, INUHILOACTUAL IN NUMBER, INUTOTALHILOS IN NUMBER, INUREPCARGAID IN REPORTES.REPONUME%TYPE, INUREPERRORID IN REPORTES.REPONUME%TYPE, INUCAUSALID IN CC_CAUSAL.CAUSAL_ID%TYPE, ISBCOMMENT IN VARCHAR2 )
    IS
      BLMORERECORDS BOOLEAN;
      NUININUMLINEA REPOINCO.REINCODI%TYPE := 0;
      TBOBTREGISTROS TYTBOBTREGISTROS;
      NUTABLEINDEX BINARY_INTEGER;
      NUTOTALREG NUMBER;
      NUCURRENTREG NUMBER;
      NUPORCENT NUMBER;
      NUERRORCODE NUMBER := 0;
      SBERRORMESSAGE VARCHAR2( 4000 );
      SBMENSAJE MENSAJE.MENSDESC%TYPE;
      NUNUMREGPROC NUMBER;
      RCRESTDATA DACC_RESTRICTION.STYCC_RESTRICTION;
      PROCEDURE ADDIDPROCESO
       IS
       BEGIN
         UT_TRACE.TRACE( 'Inicio AddIdProceso Proceso[' || ISBPROCESO || ']', 6 );
         OPEN CUOBTTOTREGPORHILO( INUREPCARGAID, INUHILOACTUAL, INUTOTALHILOS );
         FETCH CUOBTTOTREGPORHILO
            INTO NUNUMREGPROC;
         CLOSE CUOBTTOTREGPORHILO;
         UT_TRACE.TRACE( 'Total registros del hilo [' || NUNUMREGPROC || ']', 6 );
         PKSTATUSEXEPROGRAMMGR.ADDRECORD( ISBPROCESO || '-' || INUHILOACTUAL, NUNUMREGPROC );
         COMMIT;
         UT_TRACE.TRACE( 'Fin AddIdProceso', 6 );
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END ADDIDPROCESO;
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.ProcesarHiloCCPDI Proceso [' || ISBPROCESO || '] Hilo [' || INUHILOACTUAL || ']', 5 );
      NUCURRENTREG := 0;
      ADDIDPROCESO;
      SBMENSAJE := PKTBLMENSAJE.FSBGETDESCRIPTION( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_GRL, CNUMESSPROCC );
      LOOP
         UT_TRACE.TRACE( 'Recorrido de los registros. Linea inicial [' || NUININUMLINEA || ']', 5 );
         BLMORERECORDS := TRUE;
         IF ( CUOBTREGISTROS%ISOPEN ) THEN
            CLOSE CUOBTREGISTROS;
         END IF;
         UT_TRACE.TRACE( 'ID Proceso [' || ISBPROCESO || '] Linea inicial [' || NUININUMLINEA || '] Total hilos [' || INUTOTALHILOS || '] Hilo Actual [' || INUHILOACTUAL || ']Reporte [' || INUREPCARGAID || ']', 5 );
         OPEN CUOBTREGISTROS( INUREPCARGAID, NUININUMLINEA, INUHILOACTUAL, INUTOTALHILOS );
         FETCH CUOBTREGISTROS
            BULK COLLECT INTO TBOBTREGISTROS
            LIMIT 100;
         IF ( CUOBTREGISTROS%ROWCOUNT = 0 ) THEN
            BLMORERECORDS := FALSE;
         END IF;
         CLOSE CUOBTREGISTROS;
         IF ( TBOBTREGISTROS.FIRST IS NULL ) THEN
            EXIT;
         END IF;
         FOR NUTABLEINDEX IN TBOBTREGISTROS.FIRST..TBOBTREGISTROS.LAST
          LOOP
            PROCESARREGCCPDI( TBOBTREGISTROS( NUTABLEINDEX ).REINOBSE, RCRESTDATA, INUCAUSALID, ISBCOMMENT, NUERRORCODE, SBERRORMESSAGE );
            IF ( NUERRORCODE != 0 ) THEN
               CC_BOUTILREPORTS.REGREPORTINCONSIS( INUREPERRORID, NUERRORCODE, SBERRORMESSAGE, TBOBTREGISTROS( NUTABLEINDEX ).REINOBSE );
               UT_TRACE.TRACE( 'Registro [' || INUREPERRORID || '-' || TBOBTREGISTROS( NUTABLEINDEX ).REINCODI || '] no procesado', 6 );
            END IF;
            IF ( NUERRORCODE = 0 ) THEN
               UT_TRACE.TRACE( 'Registro: ' || TBOBTREGISTROS( NUTABLEINDEX ).REINOBSE || ' procesado con exito', 2 );
            END IF;
            NUERRORCODE := 0;
            SBERRORMESSAGE := '';
         END LOOP;
         COMMIT;
         UT_TRACE.TRACE( 'Sale del ciclo [' || TBOBTREGISTROS( TBOBTREGISTROS.LAST ).REINCODI || ']', 5 );
         NUININUMLINEA := TBOBTREGISTROS( TBOBTREGISTROS.LAST ).REINCODI;
         UT_TRACE.TRACE( 'Ultimo registro procesado [' || NUININUMLINEA || ']', 5 );
         SBMENSAJE := REPLACE( SBMENSAJE, 'PROCESS_NUMBER', TO_CHAR( INUHILOACTUAL ) );
         IF ( NUNUMREGPROC != 0 ) THEN
            PKSTATUSEXEPROGRAMMGR.UPDATEPERCENTAGE( ISBPROCESO || '-' || INUHILOACTUAL, SBMENSAJE, TBOBTREGISTROS.COUNT, NUPORCENT );
         END IF;
         TBOBTREGISTROS.DELETE;
         EXIT WHEN ( NOT BLMORERECORDS );
      END LOOP;
      PKSTATUSEXEPROGRAMMGR.PROCESSFINISHOKAT( ISBPROCESO || '-' || INUHILOACTUAL );
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.ProcesarHiloCCPDI', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PROCESARHILOCCPDI;
   PROCEDURE PROCESARREGCCPDI( ISBLINEA IN VARCHAR2, IRCRESTDATA IN DACC_RESTRICTION.STYCC_RESTRICTION, INUCAUSALID IN CC_RESTRICTION.CAUSAL_ID%TYPE, ISBCOMMENT IN CC_RESTRICTION.COMMENT_%TYPE, ONUCODERROR OUT NUMBER, OSBMSJERROR OUT VARCHAR2 )
    IS
      TBRESULT DACC_RESTRICTION.TYTBCC_RESTRICTION;
      NUESTADOIMP CC_RESTRICTION_STATU.RESTRICTION_STATU_ID%TYPE := 2;
      RCRESTDATA DACC_RESTRICTION.STYCC_RESTRICTION;
    BEGIN
      UT_TRACE.TRACE( 'Inicio de cc_boProCargaImpedim.ProcesarRegCCPDI', 5 );
      RCRESTDATA := IRCRESTDATA;
      VALREGISTROCCPDI( ISBLINEA, RCRESTDATA );
      IF ( RCRESTDATA.IDENTIFICATION IS NOT NULL ) THEN
         TBRESULT := CC_BCRESTRICTION.FTBGETBYTYPEANDCLIENT( RCRESTDATA.IDENT_TYPE_ID, RCRESTDATA.IDENTIFICATION, RCRESTDATA.RESTRICTION_TYPE_ID );
       ELSIF ( RCRESTDATA.ADDRESS_ID IS NOT NULL ) THEN
         TBRESULT := CC_BCRESTRICTION.FTBGETBYTYPEANDADDRESS( RCRESTDATA.ADDRESS_ID, RCRESTDATA.RESTRICTION_TYPE_ID );
       ELSIF ( RCRESTDATA.SUBSCRIPTION_ID IS NOT NULL ) THEN
         TBRESULT := CC_BCRESTRICTION.FTBGETBYTYPEANDCONTR( RCRESTDATA.SUBSCRIPTION_ID, RCRESTDATA.RESTRICTION_TYPE_ID );
       ELSE
         TBRESULT := CC_BCRESTRICTION.FTBGETBYTYPEANDPROD( RCRESTDATA.PRODUCT_ID, RCRESTDATA.RESTRICTION_TYPE_ID );
      END IF;
      IF ( TBRESULT.COUNT = 1 ) THEN
         RCRESTDATA := TBRESULT( TBRESULT.FIRST );
         RCRESTDATA.CAUSAL_ID := NULL;
         RCRESTDATA.COMMENT_ := ISBCOMMENT;
         RCRESTDATA.RESTRICTION_STATU_ID := NUESTADOIMP;
         RCRESTDATA.ENDING_DATE := RCRESTDATA.ENDING_DATE;
         DACC_RESTRICTION.UPDRECORD( RCRESTDATA );
       ELSIF ( TBRESULT.COUNT = 0 ) THEN
         ERRORS.SETERROR( CNUIMPEDI_INVALIDO );
         RAISE EX.CONTROLLED_ERROR;
       ELSE
         ERRORS.SETERROR( CNUVARIOS_IMPEDI );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'Fin de cc_boProCargaImpedim.ProcesarRegCCPDI', 5 );
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUCODERROR, OSBMSJERROR );
   END PROCESARREGCCPDI;
END CC_BOPROCARGAIMPEDIM;
/


