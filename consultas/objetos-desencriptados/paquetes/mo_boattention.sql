PACKAGE BODY MO_BOAttention
AS
    






























































































































    
    
    
    
    CSBVERSION          CONSTANT VARCHAR2(250)  := 'SAO502204';
    
    
    ERROR3320                   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 3320;
    
    CNUMOTSTATNOVALIDADDCHANG   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE  := 1829;
    
    CNUCOMPONENTSTATUSNOVALID   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE  := 1886;
    
    CNUMOTSTATNOVALIDFORCHANG   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE  := 2008;
    
    CNUNULL_ATTRIBUTE           CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 119562;


    
    
    
    TYPE TYTBCOMPONENTID    IS TABLE OF MO_COMPONENT.COMPONENT_ID%TYPE INDEX BY BINARY_INTEGER;
    TYPE TYTBMOTACTBYPACK   IS TABLE OF MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE%ROWTYPE INDEX BY BINARY_INTEGER;

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    














    PROCEDURE ATTENDCOMPONENT
    (
        INUCOMPONENTID      IN  MO_COMPONENT.COMPONENT_ID%TYPE,
        INUACTIONID         IN  GE_ACTION_MODULE.ACTION_ID%TYPE DEFAULT MO_BOATTENTION.CNUACTIONATTENDCOMP
    )
    IS
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendComponent['||INUCOMPONENTID||']',2);

        
        RCCOMPONENT     := DAMO_COMPONENT.FRCGETRECORD(INUCOMPONENTID);

        
        IF  (RCCOMPONENT.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_COMP) AND
            (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCCOMPONENT.MOTIVE_STATUS_ID))
        THEN
            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCCOMPONENT.COMPONENT_ID, INUACTIONID);
        END IF;

        
        MO_BOATTENTION.ATTENDMOTIVE
        (
            INUMOTIVEID=>RCCOMPONENT.MOTIVE_ID,
            IBOATTENDCOMPONENTS=>FALSE
        );

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendComponent',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDCOMPONENT;

    















    PROCEDURE ATTENDMOTIVE
    (
        INUMOTIVEID         IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        INUACTIONID         IN  GE_ACTION_MODULE.ACTION_ID%TYPE DEFAULT MO_BOATTENTION.CNUACTIONATTENDMOT,
        IBOATTENDCOMPONENTS IN  BOOLEAN DEFAULT TRUE
    )
    IS
        RCMOTIVE                DAMO_MOTIVE.STYMO_MOTIVE;
        TBCOMPONENT             DAMO_COMPONENT.TYTBMO_COMPONENT;
        BOATTEND                BOOLEAN     := TRUE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendMotive['||INUMOTIVEID||']',2);
        
        
        OPEN    MO_BCCOMPONENT.CUACTICOMPSBYMOTI(INUMOTIVEID);
        FETCH   MO_BCCOMPONENT.CUACTICOMPSBYMOTI BULK COLLECT INTO TBCOMPONENT;
        CLOSE   MO_BCCOMPONENT.CUACTICOMPSBYMOTI;
        
        IF  (TBCOMPONENT.COUNT > 0) THEN

            BOATTEND := FALSE;
            
            
            IF  (IBOATTENDCOMPONENTS) THEN
            
                
                FOR I IN TBCOMPONENT.FIRST .. TBCOMPONENT.LAST LOOP

                    
                    MO_BOATTENTION.ATTENDCOMPONENT(TBCOMPONENT(I).COMPONENT_ID);
                    
                END LOOP;

            END IF;
        
        END IF;

        IF  (BOATTEND) THEN

            
            RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

            
            IF  (RCMOTIVE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_MOT) AND
                (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID))
            THEN
                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCMOTIVE.MOTIVE_ID, INUACTIONID);
            END IF;
            
            
            MO_BOATTENTION.ATTENDPACKAGE
            (
                INUPACKAGEID=>RCMOTIVE.PACKAGE_ID,
                IBOATTENDMOTIVES=>FALSE
            );

        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendMotive',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF  (MO_BCCOMPONENT.CUACTICOMPSBYMOTI%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUACTICOMPSBYMOTI;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF  (MO_BCCOMPONENT.CUACTICOMPSBYMOTI%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUACTICOMPSBYMOTI;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDMOTIVE;

    















    PROCEDURE ATTENDPACKAGE
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUACTIONID         IN  GE_ACTION_MODULE.ACTION_ID%TYPE DEFAULT MO_BOATTENTION.CNUACTIONATTENDPACK,
        IBOATTENDMOTIVES    IN  BOOLEAN DEFAULT TRUE
    )
    IS
        NUMOTIVESTATUSID        MO_PACKAGES.MOTIVE_STATUS_ID%TYPE;
        TBMOTIVE                DAMO_MOTIVE.TYTBMO_MOTIVE;
        BOATTEND                BOOLEAN     := TRUE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendPackage['||INUPACKAGEID||']',2);
        
        
        TBMOTIVE    := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(INUPACKAGEID);
        
        
        IF  (TBMOTIVE.COUNT > 0) THEN

            BOATTEND    := FALSE;
            
            
            IF  (IBOATTENDMOTIVES) THEN

                FOR I IN TBMOTIVE.FIRST .. TBMOTIVE.LAST LOOP
                
                    
                    MO_BOATTENTION.ATTENDMOTIVE(TBMOTIVE(I).MOTIVE_ID);

                END LOOP;
                
            END IF;
        
        END IF;

        IF  (BOATTEND) THEN

            
            NUMOTIVESTATUSID    := DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID);

            
            IF  (NUMOTIVESTATUSID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK) AND
                (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(NUMOTIVESTATUSID))
            THEN
                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(INUPACKAGEID, INUACTIONID);
            END IF;

        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendPackage',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDPACKAGE;

    





































    PROCEDURE ATTENDCREATIONPRODBYMOT
    (
        INUMOTIVEID           IN    MO_MOTIVE.MOTIVE_ID%TYPE,
        INUACTIONID           IN    GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUPRODUCTSTATUSID    IN    PR_PRODUCT.PRODUCT_STATUS_ID%TYPE DEFAULT PR_BOPARAMETER.FNUGETPRODACTI,
        IBLREGISTERINFCOMP    IN    BOOLEAN DEFAULT TRUE
    )
    IS
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGE           DAMO_PACKAGES.STYMO_PACKAGES;
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        BLATTENDPACKAGE     BOOLEAN := TRUE;
        DTFECHAINSTALLPROD  SERVSUSC.SESUFEIN%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendCreationProdByMot. Motivo:['||INUMOTIVEID||']',2);
        UT_TRACE.TRACE('Acciï¿½n:['||INUACTIONID||']Estado Producto:['||INUPRODUCTSTATUSID||']',3);

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);
        
        
        UT_TRACE.TRACE('Creacion producto motivo '||INUMOTIVEID||']',3);
        PR_BOCREATIONPRODUCT.CREATIONPRODUCT ( INUMOTIVEID,
                                               NUPRODUCTID,
                                               INUPRODUCTSTATUSID,
                                               IBLREGISTERINFCOMP
                                             );
                                             
        
        DTFECHAINSTALLPROD := NULL;
        IF (PKTBLSERVSUSC.FBLEXIST(NUPRODUCTID)) THEN
            DTFECHAINSTALLPROD:= PKTBLSERVSUSC.FDTGETINSTALLATIONDATE(NUPRODUCTID);
        END IF;

        
        CC_BOASSIGNPROMOTION.UPDATEPROMOTIONDATE
        (
            NUPRODUCTID,
            NULL,
            DTFECHAINSTALLPROD, 
            UT_DATE.FDTSYSDATE
        );

        
        DAMO_MOTIVE.UPDPRODUCT_ID(INUMOTIVEID,NUPRODUCTID);
        
        
        LE_BOINCLUDEUNITSATTENTION.ATTENTIONINCLUNIT(RCMOTIVE.PACKAGE_ID,RCMOTIVE.MOTIVE_ID);

        
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) AND
            (RCMOTIVE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_MOT)
        THEN
            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(INUMOTIVEID,INUACTIONID);
        END IF;
        
        


        FOR REC IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(RCMOTIVE.PACKAGE_ID) LOOP
            UT_TRACE.TRACE('Motivo Activo:['||REC.MOTIVE_ID||']',3);
            BLATTENDPACKAGE := FALSE;
            EXIT;
        END LOOP;

        IF (BLATTENDPACKAGE) THEN
            
            DAMO_PACKAGES.GETRECORD(RCMOTIVE.PACKAGE_ID, RCPACKAGE);
            
            IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCPACKAGE.MOTIVE_STATUS_ID)) AND
                (RCPACKAGE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK)
            THEN
                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(RCPACKAGE.PACKAGE_ID,INUACTIONID);
            END IF;
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendCreationProdByMot',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDCREATIONPRODBYMOT;

    







































    PROCEDURE ATTENDCREATIONPRODBYCOMP
    (
        INUCOMPONENTID    IN    MO_COMPONENT.COMPONENT_ID%TYPE,
        INUACTIONID       IN    GE_ACTION_MODULE.ACTION_ID%TYPE
    )
    IS
        RCCOMPONENT                DAMO_COMPONENT.STYMO_COMPONENT;
        RCMOTIVE                   DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGE                  DAMO_PACKAGES.STYMO_PACKAGES;
        NUMOTIVEPROVISION          MO_MOTIVE.MOTIVE_ID%TYPE;
        RCMOTIVEPROVISION          DAMO_MOTIVE.STYMO_MOTIVE;
        NUFATHERCOMPONENTID        MO_COMP_LINK.FATHER_COMPONENT_ID%TYPE := NULL;
        NUCOMPONENTIDPROD          PR_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUFATHERCOMPONENTIDPROD    PR_COMPONENT.COMPONENT_ID%TYPE := NULL;
        BLATTENDMOTIVE             BOOLEAN := TRUE;
        BLATTENDPACKAGE            BOOLEAN := TRUE;
        NUPRODUCTID                PR_PRODUCT.PRODUCT_ID%TYPE;
        DTFECHAINSTALLCOMP        COMPSESU.CMSSFEIN%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendCreationProdByComp. Componente:['||INUCOMPONENTID||']Acciï¿½n:['||INUACTIONID||']',2);

        
        RCCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(INUCOMPONENTID);

        
        IF (RCCOMPONENT.COMP_MOTIVE_PROV_ID IS NOT NULL) THEN
            NUMOTIVEPROVISION := DAMO_COMPONENT.FNUGETMOTIVE_ID(RCCOMPONENT.COMP_MOTIVE_PROV_ID);
            RCMOTIVEPROVISION := DAMO_MOTIVE.FRCGETRECORD(NUMOTIVEPROVISION);
            
            UT_TRACE.TRACE('Tiene Motivo de provisionamiento :['||RCMOTIVEPROVISION.MOTIVE_ID||']',3);
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVEPROVISION.MOTIVE_STATUS_ID)) THEN
                UT_TRACE.TRACE('El Motivo de provisionamiento :['||RCMOTIVEPROVISION.MOTIVE_ID||'] no esta en estado final',3);
                ERRORS.SETERROR ( 113224,
                                  RCCOMPONENT.MOTIVE_ID || '|' || NUMOTIVEPROVISION
                                );
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        
        NUFATHERCOMPONENTID := DAMO_COMP_LINK.FNUGETFATHER_COMPONENT_ID(INUCOMPONENTID);
        UT_TRACE.TRACE('Componente de Motivo Padre:['||NUFATHERCOMPONENTID||']',3);
        
        IF (NUFATHERCOMPONENTID IS NOT NULL) THEN
            NUFATHERCOMPONENTIDPROD := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(NUFATHERCOMPONENTID);
        END IF;
        UT_TRACE.TRACE('Componente de Producto Padre:['||NUFATHERCOMPONENTIDPROD||']',3);

        
        NUPRODUCTID := DAMO_MOTIVE.FNUGETPRODUCT_ID(RCCOMPONENT.MOTIVE_ID);
        PR_BOCREATIONCOMPONENT.CREATIONCOMPONENT( INUCOMPONENTID,
                                                  NUPRODUCTID,
                                                  NUFATHERCOMPONENTIDPROD,
                                                  NUCOMPONENTIDPROD
                                                );

        
        DTFECHAINSTALLCOMP := NULL;
        IF (PKTBLCOMPSESU.FBLEXIST(NUCOMPONENTIDPROD)) THEN

            DTFECHAINSTALLCOMP:= PKTBLCOMPSESU.FDTGETINSTALATIONDATE(NUCOMPONENTIDPROD);
        END IF;

        
        CC_BOASSIGNPROMOTION.UPDATEPROMOTIONDATE
        (
            NUPRODUCTID,
            NUCOMPONENTIDPROD,
            DTFECHAINSTALLCOMP, 
            UT_DATE.FDTSYSDATE
        );

        
        RCCOMPONENT.COMPONENT_ID_PROD := NUCOMPONENTIDPROD;
        RCCOMPONENT.PRODUCT_ID := DAMO_MOTIVE.FNUGETPRODUCT_ID(RCCOMPONENT.MOTIVE_ID);
        DAMO_COMPONENT.UPDRECORD(RCCOMPONENT);
        
        
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCCOMPONENT.MOTIVE_STATUS_ID)) AND
            (RCCOMPONENT.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_COMP)
        THEN
            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(INUCOMPONENTID,INUACTIONID);
        END IF;

        


        FOR REC IN MO_BCCOMPONENT.CUCOMPACTIVESBYMOTANDDIFTYPE(RCCOMPONENT.MOTIVE_ID,0) LOOP
            UT_TRACE.TRACE('Componente Activo:['||REC.COMPONENT_ID||']',3);
            BLATTENDMOTIVE := FALSE;
            EXIT;
        END LOOP;

        IF (BLATTENDMOTIVE) THEN
            DAMO_MOTIVE.GETRECORD(RCCOMPONENT.MOTIVE_ID, RCMOTIVE);
            
            IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) AND
                (RCMOTIVE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_MOT)
            THEN
                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCMOTIVE.MOTIVE_ID,INUACTIONID);
            END IF;

            


            FOR REC IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(RCCOMPONENT.PACKAGE_ID) LOOP
                UT_TRACE.TRACE('Motivo Activo:['||REC.MOTIVE_ID||']',3);
                BLATTENDPACKAGE := FALSE;
                EXIT;
            END LOOP;

            IF (BLATTENDPACKAGE) THEN
                
                DAMO_PACKAGES.GETRECORD(RCMOTIVE.PACKAGE_ID, RCPACKAGE);
                
                IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCPACKAGE.MOTIVE_STATUS_ID)) AND
                    (RCPACKAGE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK)
                THEN
                    
                    MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(RCPACKAGE.PACKAGE_ID,INUACTIONID);
                END IF;
            END IF;
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendCreationProdByComp',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDCREATIONPRODBYCOMP;

    






















    PROCEDURE ATTENDCREATIONPRODBYMOTMASS
    (
        INUMOTIVEID           IN    MO_MOTIVE.MOTIVE_ID%TYPE,
        INUACTIONID           IN    GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUPRODUCTSTATUSID    IN    PR_PRODUCT.PRODUCT_STATUS_ID%TYPE DEFAULT PR_BOPARAMETER.FNUGETPRODACTI
    )
    IS
        NUPRODUCTID     MO_MOTIVE.PRODUCT_ID%TYPE;
        DTSESUFEIN      DATE;
        TBCOMPONENTID   TYTBCOMPONENTID;
        BIINDEX         BINARY_INTEGER := 1;
        
        
        PROCEDURE VALIDATEDATA IS
        BEGIN
        
            
            IF ( INUMOTIVEID IS NULL ) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'Identificador del motivo');
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            
            DAMO_MOTIVE.ACCKEY(INUMOTIVEID);
            
            
            IF ( INUACTIONID IS NULL ) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'Identificador de la Acciï¿½n');
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            
            DAGE_ACTION_MODULE.ACCKEY(INUACTIONID);
            
            
            IF ( INUPRODUCTSTATUSID IS NULL ) THEN
                ERRORS.SETERROR(CNUNULL_ATTRIBUTE,'Estado del Producto');
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            
            DAPS_PRODUCT_STATUS.ACCKEY(INUPRODUCTSTATUSID);
        
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;
        
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendCreationProdByMotMass. Motivo:['||INUMOTIVEID||']',2);
        UT_TRACE.TRACE('Acciï¿½n:['||INUACTIONID||']Estado Producto:['||INUPRODUCTSTATUSID||']',3);
        
        
        VALIDATEDATA;

        
        ATTENDCREATIONPRODBYMOT(INUMOTIVEID,INUACTIONID,INUPRODUCTSTATUSID);

        UT_TRACE.TRACE('Ya creo producto del motivo '||INUMOTIVEID,3);

        
        FOR REC IN MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT(INUMOTIVEID) LOOP
            TBCOMPONENTID(BIINDEX) := REC.COMPONENT_ID;
            BIINDEX := BIINDEX + 1;
        END LOOP;

        
        BIINDEX := TBCOMPONENTID.FIRST;
        WHILE ( BIINDEX <= TBCOMPONENTID.LAST ) LOOP
            UT_TRACE.TRACE('Envio creacion componente '||TBCOMPONENTID(BIINDEX),3);
            
            ATTENDCREATIONPRODBYCOMP(TBCOMPONENTID(BIINDEX),INUACTIONID);

            BIINDEX := TBCOMPONENTID.NEXT(BIINDEX);
        END LOOP;
        
        
        
        
        
        NUPRODUCTID := DAMO_MOTIVE.FNUGETPRODUCT_ID(INUMOTIVEID);
        
        DTSESUFEIN := PKTBLSERVSUSC.FDTGETINSTALLATIONDATE(NUPRODUCTID,0);
        
        CC_BOBUNDLINGPROCESS.UPDBUNDLINGDATE(NUPRODUCTID, DTSESUFEIN);

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendCreationProdByMotMass',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDCREATIONPRODBYMOTMASS;
    
    
































    PROCEDURE ATTENDCREATIONPRODBYPACKMASS
    (
        INUPACKAGEID          IN    MO_PACKAGES.PACKAGE_ID%TYPE,
        INUACTIONID           IN    GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUPRODUCTSTATUSID    IN    PR_PRODUCT.PRODUCT_STATUS_ID%TYPE DEFAULT PR_BOPARAMETER.FNUGETPRODACTI
    )
    IS
        TBMOTACTBYPACK        TYTBMOTACTBYPACK;
        BIINDEXMOT            BINARY_INTEGER := 1;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendCreationProdByPackMass Solicitud:['||INUPACKAGEID||']',2);
        UT_TRACE.TRACE('Acciï¿½n:['||INUACTIONID||']Estado Producto:['||INUPRODUCTSTATUSID||']',3);

        
        FOR REC IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(INUPACKAGEID) LOOP
            TBMOTACTBYPACK(BIINDEXMOT) := REC;
            BIINDEXMOT := BIINDEXMOT + 1;
        END LOOP;

        
        BIINDEXMOT := TBMOTACTBYPACK.FIRST;
        WHILE BIINDEXMOT <= TBMOTACTBYPACK.LAST LOOP

            
            ATTENDCREATIONPRODBYMOTMASS(TBMOTACTBYPACK(BIINDEXMOT).MOTIVE_ID,INUACTIONID,INUPRODUCTSTATUSID);

            BIINDEXMOT := TBMOTACTBYPACK.NEXT(BIINDEXMOT);
        END LOOP;

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendCreationProdByPackMass',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDCREATIONPRODBYPACKMASS;

    


























	PROCEDURE ATTENDCMPADITIONMOT
    (
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        CNUATTENDACTIONID    GE_ACTION_MODULE.ACTION_ID%TYPE := GE_BOPARAMETER.FNUGET('ACTION_ATTEND');
        RCMODATACONNECTION   DAMO_DATA_CONNECTION.STYMO_DATA_CONNECTION;
        NUCOMPONENTIDPROD    MO_COMPONENT.COMPONENT_ID_PROD%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUSUBSCRIPTIONID     PR_PRODUCT.SUBSCRIPTION_ID%TYPE;
        RCCOMPONENT          DAMO_COMPONENT.STYMO_COMPONENT;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendCmpAditionMot motivo [ '||INUMOTIVEID||' ] ',5);

         FOR RCCOMPACTHIERACHY IN MO_BCCOMPONENT.CUCOMPACTHIERARCHYBYMOT(INUMOTIVEID) LOOP

            DAMO_COMPONENT.GETRECORD(RCCOMPACTHIERACHY.COMPONENT_ID, RCCOMPONENT);

            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCCOMPONENT.MOTIVE_STATUS_ID)
                AND RCCOMPONENT.MOTIVE_STATUS_ID != MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP) THEN

                UT_TRACE.TRACE(' Atendiendo componente '||RCCOMPONENT.COMPONENT_ID||
                               ' component_type_id '||RCCOMPONENT.COMPONENT_TYPE_ID,6);

                MO_BOATTENTION.ATTENDCREATIONPRODBYCOMP(RCCOMPONENT.COMPONENT_ID,CNUATTENDACTIONID);

                NUCOMPONENTIDPROD := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(RCCOMPONENT.COMPONENT_ID);

                UT_TRACE.TRACE(' rcComponent.component_id_prod '||NUCOMPONENTIDPROD,6);

            END IF;
            
            
            IF(DAMO_DATA_CONNECTION.FBLEXIST(RCCOMPONENT.COMPONENT_ID)) THEN
                
                DAMO_DATA_CONNECTION.GETRECORD(RCCOMPONENT.COMPONENT_ID,RCMODATACONNECTION);

                
                IF(RCMODATACONNECTION.QUANTITY > 0)THEN

                    
                    PR_BODATACONNECTION.COMPONENTDATACONNECT( RCCOMPONENT.COMPONENT_ID_PROD,
                                                              RCMODATACONNECTION.QUANTITY,
                                                              RCMODATACONNECTION.COMMENT_,
                                                              RCCOMPONENT.COMPONENT_ID,
                                                              GE_BOCONSTANTS.GETYES
                                                            );
                END IF;
            END IF;
        END LOOP;

        
        NUPRODUCTID:= DAMO_MOTIVE.FNUGETPRODUCT_ID(INUMOTIVEID);

        
        NUSUBSCRIPTIONID:= DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(NUPRODUCTID);

        IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(DAMO_MOTIVE.FNUGETMOTIVE_STATUS_ID(INUMOTIVEID))) THEN
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(INUMOTIVEID,GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND));
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendCmpAditionMot',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDCMPADITIONMOT;

    



















    PROCEDURE SUBSCRIPTIONCHNGBYMOT
    (
        INUMOTIVEID     IN      MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCMOTIVE                DAMO_MOTIVE.STYMO_MOTIVE;
        RCPRODUCT               DAPR_PRODUCT.STYPR_PRODUCT;

        NUNEWSUBSCRIBERID       GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUOLDSUBSCRIBERID       GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;

        NUERRORCODE             GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE          GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);
        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(RCMOTIVE.PRODUCT_ID);
        UT_TRACE.TRACE('Inicia MO_BOAttention.SubscriptionChngByMot ['||RCMOTIVE.MOTIVE_ID||']['||RCPRODUCT.PRODUCT_ID||']',8);
        UT_TRACE.TRACE('       MO_BOAttention.SubscriptionChngByMot ['||RCPRODUCT.SUBSCRIPTION_ID||'] -> ['||RCMOTIVE.SUBSCRIPTION_ID||']',8);

        
        MO_BOMOTIVE.UPDSUBSCRIPTION_ID(RCPRODUCT.SUBSCRIPTION_ID, RCPRODUCT.PRODUCT_ID, RCMOTIVE.SUBSCRIPTION_ID);

        
        NUNEWSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(RCMOTIVE.SUBSCRIPTION_ID);

        
        NUOLDSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(RCPRODUCT.SUBSCRIPTION_ID);
            
        
        DAPR_PRODUCT.UPDSUBSCRIPTION_ID(RCMOTIVE.PRODUCT_ID, RCMOTIVE.SUBSCRIPTION_ID);

        
        IF  (NUOLDSUBSCRIBERID <> NUNEWSUBSCRIBERID) THEN

            
            GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(NUOLDSUBSCRIBERID);

            
            GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(NUNEWSUBSCRIBERID);

        END IF;

        
        NUOLDSUBSCRIBERID := PR_BOSUBSBYPRODUCT.FNUGETPRODUCTUSER(RCMOTIVE.PRODUCT_ID);

        IF  (NUOLDSUBSCRIBERID IS NOT NULL) THEN
        
            
            NUNEWSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(RCMOTIVE.SUBSCRIPTION_ID);

            UT_TRACE.TRACE('Nuevo cliente ['||NUNEWSUBSCRIBERID||']', 5 );

            PR_BOSUBSBYPRODUCT.UPDPRODUSER(RCMOTIVE.PRODUCT_ID, NUNEWSUBSCRIBERID, RCMOTIVE.MOTIV_RECORDING_DATE);
        
        END IF;

        
        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
        PKBSS_CHANGECONTRACT.CHANGECONTRACT(RCMOTIVE.PRODUCT_ID,RCMOTIVE.SUBSCRIPTION_ID,NUERRORCODE,SBERRORMESSAGE);
        GW_BOERRORS.CHECKERROR(NUERRORCODE,SBERRORMESSAGE);

        
        CC_BOBUNDLINGPROCESS.BUNDLINGRECONFIG(RCMOTIVE.PRODUCT_ID,RCPRODUCT.SUBSCRIPTION_ID);

        
        MO_BOATTENTION.ATTENDMOTIVE(RCMOTIVE.MOTIVE_ID);

        UT_TRACE.TRACE('Termina MO_BOAttention.SubscriptionChngByMot',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SUBSCRIPTIONCHNGBYMOT;

    














































    PROCEDURE ACTSUBSCRIPTIONCHANGE
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS

        NUPRODUCTID         MO_MOTIVE.PRODUCT_ID%TYPE;
        NUNEWSUBSCRIPID     SUSCRIPC.SUSCCODI%TYPE;
        NUOLDSUBSCRIPID     SUSCRIPC.SUSCCODI%TYPE;
        NUERRORCODE         GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBERRORMESSAGE      GE_ERROR_LOG.DESCRIPTION%TYPE;

        RCPACKAGE           DAMO_PACKAGES.STYMO_PACKAGES;
        RCPACKASSO          DAMO_PACKAGES_ASSO.STYMO_PACKAGES_ASSO;
        NUPACKASSOID        MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE;
        NUPACKASSOTYPEID    MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
        BLBUNDLERECONFIG    BOOLEAN := TRUE;
        NUOLDSUBSCRIBERID   GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUNEWSUBSCRIBERID   GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        RCSUSCRIPC          SUSCRIPC%ROWTYPE;

        
        CNUPACK_CONFORMACION PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_CONFORMACION_EMPAQUETAMIENTO');
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.ActSubscriptionChange',5);

        UT_TRACE.TRACE('Paquete:['||INUPACKAGEID||']',6);

        RCPACKAGE := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);

        
        FOR REC IN MO_BCBILL_DATA_CHANGE.CUBILLDATACHANGEBYPACK(INUPACKAGEID) LOOP
            
            NUNEWSUBSCRIPID := REC.NEW_SUBSCRIPTION;
            UT_TRACE.TRACE('Nueva Suscripcion:['||NUNEWSUBSCRIPID||']',6);
            
            NUOLDSUBSCRIPID := REC.OLD_SUBSCRIPTION;
            UT_TRACE.TRACE('Actual Suscripcion:['||NUOLDSUBSCRIPID||']',6);
        END LOOP;

        
        RCPACKASSO.PACKAGE_ID_ASSO := NULL;
        RCPACKASSO := MO_BCPACKAGES_ASSO.FRCPACKASSOBYPACKID(INUPACKAGEID);
        IF (RCPACKASSO.PACKAGE_ID_ASSO IS NOT NULL) THEN
            NUPACKASSOID := RCPACKASSO.PACKAGE_ID_ASSO;
            NUPACKASSOTYPEID := DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID(NUPACKASSOID);
            
            
            IF (NUPACKASSOTYPEID = CNUPACK_CONFORMACION) THEN
                BLBUNDLERECONFIG := FALSE;
            END IF;
        END IF;

        
        RCSUSCRIPC := PKTBLSUSCRIPC.FRCGETRECORD(NUNEWSUBSCRIPID);

        
        IF (RCSUSCRIPC.SUSCSIST IS NULL) THEN
            RCSUSCRIPC.SUSCSIST := RCPACKAGE.COMPANY_ID;
            PKTBLSUSCRIPC.UPRECORD(RCSUSCRIPC);
        END IF;

        
        FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESBYPACKAGE(INUPACKAGEID) LOOP

            
            NUPRODUCTID := RCMOTIVE.PRODUCT_ID;

            
            MO_BOMOTIVE.UPDSUBSCRIPTION_ID(NUOLDSUBSCRIPID,NUPRODUCTID,NUNEWSUBSCRIPID);

            
            NUNEWSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUNEWSUBSCRIPID);

            
            NUOLDSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUOLDSUBSCRIPID);

            
            DAPR_PRODUCT.UPDSUBSCRIPTION_ID(NUPRODUCTID,NUNEWSUBSCRIPID);

            
            IF  (NUOLDSUBSCRIBERID <> NUNEWSUBSCRIBERID) THEN

                
                GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(NUOLDSUBSCRIBERID);

                
                GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(NUNEWSUBSCRIBERID);

            END IF;

            
            NUOLDSUBSCRIBERID := PR_BOSUBSBYPRODUCT.FNUGETPRODUCTUSER(NUPRODUCTID);

            IF  (NUOLDSUBSCRIBERID IS NOT NULL) THEN
            
                
                NUNEWSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUNEWSUBSCRIPID);

                UT_TRACE.TRACE('Producto ['||NUPRODUCTID||'] Nuevo cliente ['||NUNEWSUBSCRIBERID||']', 5 );

                PR_BOSUBSBYPRODUCT.UPDPRODUSER(NUPRODUCTID, NUNEWSUBSCRIBERID, RCMOTIVE.MOTIV_RECORDING_DATE);
            
            END IF;

            
            MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
            
            PKBSS_CHANGECONTRACT.CHANGECONTRACT(NUPRODUCTID,NUNEWSUBSCRIPID,NUERRORCODE,SBERRORMESSAGE);
            
            GW_BOERRORS.CHECKERROR(NUERRORCODE,SBERRORMESSAGE);

            
            
            IF (BLBUNDLERECONFIG) THEN
                CC_BOBUNDLINGPROCESS.BUNDLINGRECONFIG(NUPRODUCTID,NUOLDSUBSCRIPID);
            END IF;

        END LOOP;
        
        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORREQU(INUPACKAGEID,CNUACTIONATTENDMOT);

        UT_TRACE.TRACE('Finaliza MO_BOAttention.ActSubscriptionChange',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END ACTSUBSCRIPTIONCHANGE;

    















    PROCEDURE ACTASOCPRODUCTCHANG
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID           MO_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODORIGEN            MO_COMPONENT.PRODUCT_ORIGIN_ID%TYPE;
        NUPRDCOMPID             MO_COMPONENT.COMPONENT_ID_PROD%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.ActAsocProductChang ['||INUPACKAGEID||']',5);
        
        
        NUMOTIVEID := MO_BOPACKAGES.FNUGETFIRSTMOTIVE(INUPACKAGEID);
        
        
        NUCOMPONENTID := MO_BCCOMPONENT.FNUGETMAINCOMPONENTID(NUMOTIVEID);

        
        NUPRODORIGEN := DAMO_COMPONENT.FNUGETPRODUCT_ORIGIN_ID(NUCOMPONENTID);

        
        NUPRDCOMPID := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(NUCOMPONENTID);

        
        DAPR_COMPONENT.UPDPRODUCT_ORIGIN_ID(NUPRDCOMPID,NUPRODORIGEN);

        UT_TRACE.TRACE('Finaliza MO_BOAttention.ActAsocProductChang',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ACTASOCPRODUCTCHANG;

    





























    PROCEDURE ATTENDRIGHTSUBCESION
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUSUBSCRIPTION_ID   SUSCRIPC.SUSCCODI%TYPE;
        NUNEWSUBSCRIBER_ID  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUOLDSUBSCRIBER_ID  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        RCMOBILLDATACHANGE  DAMO_BILL_DATA_CHANGE.STYMO_BILL_DATA_CHANGE;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendRightSubCesion['||INUPACKAGEID||']',5);

        
        
        NUMOTIVEID := MO_BOPACKAGES.FNUGETFIRSTMOTIVE(INUPACKAGEID);
        
        NUSUBSCRIPTION_ID := DAMO_MOTIVE.FNUGETSUBSCRIPTION_ID(NUMOTIVEID);

        
        IF (NUSUBSCRIPTION_ID IS NOT NULL) THEN
        
            NUOLDSUBSCRIBER_ID  := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUSUBSCRIPTION_ID, PKCONSTANTE.NO);
            
            
            FOR RC IN MO_BCBILL_DATA_CHANGE.CUBILLDATACHANGEBYPACK(INUPACKAGEID) LOOP
                NUNEWSUBSCRIBER_ID := RC.NEW_SUBSCRIBER_ID;
            END LOOP;

            UT_TRACE.TRACE('Nuevo Cliente['||NUNEWSUBSCRIBER_ID||']Nuevo Cliente['||NUOLDSUBSCRIBER_ID||']', 5 );

            
            IF  (NUNEWSUBSCRIBER_ID <> NUOLDSUBSCRIBER_ID) THEN

                
                PKTBLSUSCRIPC.UPCLIENT(NUSUBSCRIPTION_ID, NUNEWSUBSCRIBER_ID);

                
                GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(NUOLDSUBSCRIBER_ID);

                
                GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(NUNEWSUBSCRIBER_ID);

            END IF;

        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendRightSubCesion ', 5 );
    EXCEPTION
		  WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCBILL_DATA_CHANGE.CUBILLDATACHANGEBYPACK%ISOPEN) THEN
                CLOSE MO_BCBILL_DATA_CHANGE.CUBILLDATACHANGEBYPACK;
            END IF;
            IF (PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION%ISOPEN) THEN
                CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
		  WHEN OTHERS THEN
            IF (MO_BCBILL_DATA_CHANGE.CUBILLDATACHANGEBYPACK%ISOPEN) THEN
                CLOSE MO_BCBILL_DATA_CHANGE.CUBILLDATACHANGEBYPACK;
            END IF;
            IF (PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION%ISOPEN) THEN
                CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDRIGHTSUBCESION;

    





















    PROCEDURE ATTENDCREDLIMICHANGE
    (
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;
        NUCREDITLIMIT   MO_MOTIVE.CREDIT_LIMIT%TYPE;
        NUPRODUCTID     MO_MOTIVE.PRODUCT_ID%TYPE;
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;

        NUACTIONID      GE_ACTION_MODULE.ACTION_ID%TYPE;
        DTSYSDATE       DATE := SYSDATE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendCredLimiChange ['||INUMOTIVEID||']', 5);

        
        NUACTIONID :=  GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND);

         
        NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(INUMOTIVEID);
        
        
        RCMOTIVE    := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);
        
        
        DAPR_PRODUCT.UPDCREDIT_LIMIT(RCMOTIVE.PRODUCT_ID,RCMOTIVE.CREDIT_LIMIT);


        
        FOR RCMOCOM IN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(INUMOTIVEID) LOOP
            
            DAMO_COMPONENT.UPDATTENTION_DATE(RCMOCOM.COMPONENT_ID, DTSYSDATE);
            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCMOCOM.COMPONENT_ID, NUACTIONID );
        END LOOP;

        
        DAMO_MOTIVE.UPDATTENTION_DATE(INUMOTIVEID, DTSYSDATE);
        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(INUMOTIVEID, NUACTIONID );

        
        DAMO_PACKAGES.UPDATTENTION_DATE(NUPACKAGEID, DTSYSDATE);
        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(NUPACKAGEID, NUACTIONID );

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendCredLimiChange ', 5);
    EXCEPTION
		  WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCCOMPONENT.CUCOMPONENTSBYMOT%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
		  WHEN OTHERS THEN
            IF (MO_BCCOMPONENT.CUCOMPONENTSBYMOT%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDCREDLIMICHANGE;

    

















    PROCEDURE RETIREPRODUCTBYMOT
    (
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCMOTIVE              DAMO_MOTIVE.STYMO_MOTIVE;
        NUPRODUCTID           PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPRODUCTSATUSID      PS_PRODUCT_STATUS.PRODUCT_STATUS_ID%TYPE;
        NUPACKAGEID           MO_PACKAGES.PACKAGE_ID%TYPE;
        CNUINULOCK            CONSTANT NUMBER := 0;
        CNURETTYPESOLCLI      CONSTANT NUMBER :=1;
        NUINCLUDEFEATUREID    CC_INCLUDED_FEATURES.INCLUDED_FEATURES_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.RetireProductByMot ['||INUMOTIVEID||']',5);

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        
        NUPRODUCTID := RCMOTIVE.PRODUCT_ID;
        
        NUPACKAGEID := RCMOTIVE.PACKAGE_ID;
         
        NUPRODUCTSATUSID:=DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(NUPRODUCTID);

        
        CC_BOBUNDLE.RETIREBUNDLEDATTENTION( NUPACKAGEID );

        
        IF ( NUPRODUCTSATUSID = PR_BOCONSTANTS.CNUPRODUCT_INSTALL_PENDING ) THEN

            
            PR_BORETIRE.RETIREPRODUCT(NUPRODUCTID, CNURETTYPESOLCLI, UT_DATE.FDTSYSDATE, UT_DATE.FDTSYSDATE, INUMOTIVEID, TRUE);

            
            DAMO_MOTIVE.UPDATTENTION_DATE(INUMOTIVEID, UT_DATE.FDTSYSDATE, CNUINULOCK);

            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORREQU(NUPACKAGEID, CNUACTIONATTENDMOT);
        END IF;

        
        IF ( NUPRODUCTSATUSID != PR_BOCONSTANTS.CNUPRODUCT_RETIRE AND  NUPRODUCTSATUSID != PR_BOCONSTANTS.CNUPRODUCT_INSTALL_PENDING ) THEN

            
            NUINCLUDEFEATUREID:=CC_BOBUNDLINGPROCESS.FNUGETINCLUDEFEATURESPR(NUPRODUCTID);

            
            MO_BORETIRE.RETIREPRODATTENTION(INUMOTIVEID);

            
            
            CC_BOBUNDLINGPROCESS.BUNDLINGRECONFIG(NUPRODUCTID,NULL,NUINCLUDEFEATUREID);
        END IF;
        UT_TRACE.TRACE('Fin MO_BOAttention.RetireProductByMot ',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RETIREPRODUCTBYMOT;

    












    PROCEDURE CLASSSERVCHANGEBYMOT
    (
        INUMOTIVEID         IN          MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        NUPRODUCTID     MO_MOTIVE.PRODUCT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio MO_BOAttention.ClassServChangeByMot ',5);
        DAMO_MOTIVE.ACCKEY(INUMOTIVEID);

        
        FOR RCCOMPONENT IN MO_BCMOTIVE.CUCOMPONENTSBYMOTIVE(INUMOTIVEID) LOOP
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCCOMPONENT.MOTIVE_STATUS_ID)
                AND RCCOMPONENT.MOTIVE_STATUS_ID != MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP )  THEN
                MO_BOCNFCOMPONENT.CHANGECLASSSERVCOMP( RCCOMPONENT.COMPONENT_ID );
            END IF;
        END LOOP;

        
        NUPRODUCTID:= DAMO_MOTIVE.FNUGETPRODUCT_ID(INUMOTIVEID);
        
        
        CC_BOBUNDLINGPROCESS.BUNDLINGRECONFIG(NUPRODUCTID);
        UT_TRACE.TRACE('Fin MO_BOAttention.ClassServChangeByMot ',5);
    EXCEPTION
	  WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
	  WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
    END CLASSSERVCHANGEBYMOT;

    



















    PROCEDURE INCLUNITCHANGEBYMOT
    (
        INUMOTIVEID     IN      MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;
    BEGIN
        UT_TRACE.TRACE('Inicio MO_BOAttention.InclUnitChangeByMot ',5);
        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);
        
        LE_BOINCLUDEUNITSATTENTION.ATTENTIONINCLUNIT(RCMOTIVE.PACKAGE_ID,RCMOTIVE.MOTIVE_ID);
        
        MO_BOATTENTION.ATTENDMOTIVE(INUMOTIVEID);
        UT_TRACE.TRACE('Fin MO_BOAttention.InclUnitChangeByMot ',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INCLUNITCHANGEBYMOT;

    















    PROCEDURE ATTENDMOTCOMPBYMOT
    (
        INUMOTIVEID     IN      MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;
        NUACTION        GE_ACTION_MODULE.ACTION_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio MO_BOAttention.AttendMotCompByMot ',5);
        
        MO_BOATTENTION.ATTENDMOTIVE(INUMOTIVEID);
        
        UT_TRACE.TRACE('Fin MO_BOAttention.AttendMotCompByMot ',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDMOTCOMPBYMOT;

    





















    PROCEDURE INDCHANGESERVICEATT
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        TBMOTIVES           DAMO_MOTIVE.TYTBMO_MOTIVE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.IndChangeServiceAtt ['||INUPACKAGEID||']',9);
        
        MO_BOCOMPONENT.SETSERVDATETOCOMP(INUPACKAGEID);

        
        TBMOTIVES := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(INUPACKAGEID);

        
        IF (TBMOTIVES.COUNT > 0) THEN

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Instalaciï¿½n '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    MO_BOATTENTION.ATTENDCREATIONPRODBYMOTMASS(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID, CNUACTIONATTENDCOMP);
                END IF;
            END LOOP;

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNURETIRE_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Retiro de Producto '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    RETIREPRODUCTBYMOT(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID);
                END IF;
            END LOOP;

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNURETIRECOMP_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Retiro de Componentes '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    MO_BORETIRE.RETIRECOMPATTENTION(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID);
                END IF;
            END LOOP;

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUSERVADD_MOTIVE_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Adiciï¿½n de Componentes '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    ATTENDCMPADITIONMOT(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID);
                END IF;
            END LOOP;

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUCLASSCHANG_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Cambio de Clase '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    CLASSSERVCHANGEBYMOT(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID);
                END IF;
            END LOOP;

            
            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = PS_BOMOTIVETYPE.FNUCHNGEQUIP_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Cambio de Equipo '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    MO_BOEQUIPMENTATTENTION.EQUIPMENTCHANGEBYMOT(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID);
                END IF;
            END LOOP;

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = PS_BOMOTIVETYPE.FNUSUBSCRIPCHNG_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Cambio de Contrato '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    SUBSCRIPTIONCHNGBYMOT(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID);
                END IF;
            END LOOP;

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID IN (MO_BOCONSTANTS.CNUMOVE_MOTI_TYPE,PS_BOMOTIVETYPE.FNUADDCHANGE_MOTI_TYPE)) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Traslado '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    MO_BOMOVE.MOVEATTENTBYMOT(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID);
                END IF;
            END LOOP;

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = PS_BOMOTIVETYPE.FNUPLANCHANGE_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Cambio de Plan '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    GE_BOINSTANCE.SETVALUE(
                        MO_BOCONSTANTS.CSBMO_MOTIVE,
                        MO_BOCONSTANTS.CSBMOTIVE_ID,
                        TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,
                        1
                    );
                    CF_BOACTIONS.COMMPLANCHANGEBYMOT;
                END IF;
            END LOOP;

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = PS_BOMOTIVETYPE.FNUINCLUNIT_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Cambio de Unidades Incluidas '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    INCLUNITCHANGEBYMOT(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID);
                END IF;
            END LOOP;

            
            FOR NUMOTIVEIDX IN TBMOTIVES.FIRST .. TBMOTIVES.LAST LOOP
                IF (TBMOTIVES(NUMOTIVEIDX).MOTIVE_TYPE_ID = PS_BOMOTIVETYPE.FNUPROMOASSIGN_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('ChangeServiceAtt: Motivo de Asignaciï¿½n de Promociï¿½n '||TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID,8);
                    ATTENDMOTCOMPBYMOT(TBMOTIVES(NUMOTIVEIDX).MOTIVE_ID);
                END IF;
            END LOOP;

        END IF;

        
        CF_BOBUNDLINGRULES.RETIREBUNDLEDCOMPATTENTION(INUPACKAGEID);
        CF_BOBUNDLINGRULES.CREATEBUNDLEDCOMPATTENTION(INUPACKAGEID);


        


        TBMOTIVES := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(INUPACKAGEID);

        
        IF (TBMOTIVES.COUNT = 0 AND
            NOT(PS_BOMOTIVESTATUS.FBLISFINALSTATUS(DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID)))) THEN
            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(INUPACKAGEID,CNUACTIONATTENDPACK);
        END IF;
        UT_TRACE.TRACE('Termina MO_BOAttention.IndChangeServiceAtt',9);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INDCHANGESERVICEATT;
    
    





















    PROCEDURE CHANGESERVICEATT
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        BLATTENDREQUEST     BOOLEAN := TRUE;
        RCPACKAGE           DAMO_PACKAGES.STYMO_PACKAGES;
        TBASSOPACKS         DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUPACKSTATUSID      MO_PACKAGES.MOTIVE_STATUS_ID%TYPE;
        NUINDX              BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.ChangeServiceAtt ['||INUPACKAGEID||']',8);

        
        RCPACKAGE := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);

        
        IF ( RCPACKAGE.TAG_NAME NOT IN (PS_BOPACKAGETYPE.FSBTAGNAMEFEASIBLESALE, PS_BOPACKAGETYPE.FSBTAGNAMERECOVER)) THEN
            
            INDCHANGESERVICEATT(INUPACKAGEID);
        ELSE
            
            TBASSOPACKS := MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO(INUPACKAGEID);

            
            NUINDX := TBASSOPACKS.FIRST;
            WHILE (NUINDX IS NOT NULL) LOOP
                INDCHANGESERVICEATT(TBASSOPACKS(NUINDX).PACKAGE_ID);

                
                NUPACKSTATUSID := DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(TBASSOPACKS(NUINDX).PACKAGE_ID);
                IF NOT(PS_BOMOTIVESTATUS.FBLISFINALSTATUS(NUPACKSTATUSID)) THEN
                    BLATTENDREQUEST := FALSE;
                END IF;

                NUINDX := TBASSOPACKS.NEXT(NUINDX);
            END LOOP;

            
            IF (BLATTENDREQUEST AND
                NOT(PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCPACKAGE.MOTIVE_STATUS_ID))) THEN
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(INUPACKAGEID,CNUACTIONATTENDPACK);
            END IF;
        END IF;
        UT_TRACE.TRACE('Termina MO_BOAttention.ChangeServiceAtt',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGESERVICEATT;

    






























    PROCEDURE ACTCREATEPLANWF
    IS
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;
        SBTAGNAME       MO_PACKAGES.TAG_NAME%TYPE;
        NUMOTIVEID      MO_MOTIVE.MOTIVE_ID%TYPE;
        NUMOTITYPEID    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE;
        
        
        SBSVI_GENERATE_ORDER     GE_PARAMETER.VALUE%TYPE;

        
        CSBSVI_GENERATE_ORDER    CONSTANT GE_PARAMETER.PARAMETER_ID%TYPE := 'SVI_GENERATE_ORDER';

    BEGIN
    
        UT_TRACE.TRACE('Inicia MO_BOAttention.ActCreatePlanWf',5);

        
        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
        );


        
        SBTAGNAME := DAMO_PACKAGES.FSBGETTAG_NAME(NUPACKAGEID);

        
        
        MO_BOINSTALLEDLINESMGR.ADDRESTRICTIOFORADDR(NUPACKAGEID);

        
        IF ( SBTAGNAME != PS_BOPACKAGETYPE.CSBTAGSUSPENSION AND SBTAGNAME != PS_BOPACKAGETYPE.CSBTAGRETIRO )THEN

                
                GE_BOINSTANCE.GETVALUE
                (
                    MO_BOCONSTANTS.CSBMO_MOTIVE,
                    MO_BOCONSTANTS.CSBMOTIVE_ID,
                    NUMOTIVEID
                );

                
                IF ( NUMOTIVEID IS NULL )THEN

                    
                    CC_BORESTRICTION.CHECKANDINSERTRESTRI(NUPACKAGEID);

                ELSE
                    
                    NUMOTITYPEID:=DAMO_MOTIVE.FNUGETMOTIVE_TYPE_ID(NUMOTIVEID);

                    
                    IF ( NUMOTITYPEID != MO_BOCONSTANTS.CNUSUSP_MOTI_TYPE AND NUMOTITYPEID != MO_BOCONSTANTS.CNURETIRE_MOTI_TYPE )THEN

                        
                        CC_BORESTRICTION.CHECKANDINSERTRESTRI(NUPACKAGEID);
                    END IF;
                END IF;
         END IF;
         
         IF SBTAGNAME = PS_BOPACKAGETYPE.CSBTAGVENTA THEN
             PR_BOCREATIONPRODUCT.INITIALCREATIONPRODUCT(NUPACKAGEID);
         END IF;
         
         
         SBSVI_GENERATE_ORDER := GE_BOPARAMETER.FSBGET(CSBSVI_GENERATE_ORDER);
         UT_TRACE.TRACE('Pï¿½rametro <sbSVI_GENERATE_ORDER> ['||SBSVI_GENERATE_ORDER||']', 5);
         UT_TRACE.TRACE('sbTagName ['||SBTAGNAME||']', 5);
         
         




         IF (SBTAGNAME <> 'P_LBC_VENTA_DE_SERVICIOS_DE_INGENIERIA_100101') THEN
         
            UT_TRACE.TRACE('Si genera orden de trabajo', 5);
            
            
            MO_BODATA_FOR_ORDER.CREATEINITIALORDER(NUPACKAGEID);
            
         ELSIF (SBTAGNAME = 'P_LBC_VENTA_DE_SERVICIOS_DE_INGENIERIA_100101' AND SBSVI_GENERATE_ORDER = PKCONSTANTE.SI) THEN
         
            UT_TRACE.TRACE('Si genera orden de trabajo', 5);
            
            
            MO_BODATA_FOR_ORDER.CREATEINITIALORDER(NUPACKAGEID);
            
         ELSE
            UT_TRACE.TRACE('No genera orden de trabajo', 5);
         END IF;
         
         
         MO_BOACTIONCREATEPLANWF.PROCESSACTION;

         UT_TRACE.TRACE('Finaliza MO_BOAttention.ActCreatePlanWf',5);

         EXCEPTION
    		  WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
    		  WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

    END ACTCREATEPLANWF;
    
    

























    PROCEDURE CLASSSERVICECHANGE
    IS
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;
        NUMOTIVEID      MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID   MO_COMPONENT.COMPONENT_ID%TYPE;
        RCCOMPONENT     DAMO_COMPONENT.STYMO_COMPONENT;
        NUPRODUCTID     MO_MOTIVE.PRODUCT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.ClassServiceChange',5);
        
        GE_BOINSTANCE.GETVALUE
        (
            MO_BOCONSTANTS.CSBMO_COMPONENT,
            MO_BOCONSTANTS.CSBCOMPONENT_ID,
            NUCOMPONENTID
        );

        UT_TRACE.TRACE('Componente:['||NUCOMPONENTID||']',6);
        
        IF NUCOMPONENTID IS NOT NULL THEN
            DAMO_COMPONENT.GETRECORD(NUCOMPONENTID , RCCOMPONENT );
            MO_BOCNFCOMPONENT.CHANGECLASSSERVCOMP(NUCOMPONENTID);
            
            NUPRODUCTID:= DAMO_MOTIVE.FNUGETPRODUCT_ID(RCCOMPONENT.MOTIVE_ID);
            
            
            CC_BOBUNDLINGPROCESS.BUNDLINGRECONFIG(NUPRODUCTID);
        ELSE
            
            GE_BOINSTANCE.GETVALUE
            (
                MO_BOCONSTANTS.CSBMO_MOTIVE,
                MO_BOCONSTANTS.CSBMOTIVE_ID,
                NUMOTIVEID
            );

            UT_TRACE.TRACE('Motivo:['||NUMOTIVEID||']',6);
            
            IF NUMOTIVEID IS NOT NULL THEN
                CLASSSERVCHANGEBYMOT(NUMOTIVEID);
            ELSE
                
                GE_BOINSTANCE.GETVALUE
                (
                    MO_BOCONSTANTS.CSBMO_PACKAGES,
                    MO_BOCONSTANTS.CSBPACKAGE_ID,
                    NUPACKAGEID
                );

                UT_TRACE.TRACE('Paquete:['||NUPACKAGEID||']',6);
                DAMO_PACKAGES.ACCKEY(NUPACKAGEID);
                FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESBYPACKAGE(NUPACKAGEID) LOOP
                    FOR RCCOMPONENT IN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(RCMOTIVE.MOTIVE_ID) LOOP
                        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCCOMPONENT.MOTIVE_STATUS_ID)
                             AND RCCOMPONENT.MOTIVE_STATUS_ID != MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP ) THEN
                            MO_BOCNFCOMPONENT.CHANGECLASSSERVCOMP( RCCOMPONENT.COMPONENT_ID );
                        END IF;
                    END LOOP;
                    
                    
                    CC_BOBUNDLINGPROCESS.BUNDLINGRECONFIG(RCMOTIVE.PRODUCT_ID);
                END LOOP;
            END IF;
        END IF;
        UT_TRACE.TRACE('Finaliza MO_BOAttention.ClassServiceChange',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLASSSERVICECHANGE;
    
    

































    PROCEDURE CHANGEPLANBILLING
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        
        NUPLANID              MO_MOTIVE.COMMERCIAL_PLAN_ID%TYPE;
        NUNEWPLANID           MO_MOTIVE.COMMERCIAL_PLAN_ID%TYPE;
        RCMOTIVE              DAMO_MOTIVE.STYMO_MOTIVE;
        RCPERICOSE          PERICOSE%ROWTYPE;
        DTGENDATE           PERIFACT.PEFAFIMO%TYPE;
        NUBILLINGPLAN       CC_COMMERCIAL_PLAN.BILLING_PLAN%TYPE;
        NURATINGPLAN        CC_COMMERCIAL_PLAN.RATING_PLAN%TYPE;
        NUPRERATINGPLAN     CC_COMMERCIAL_PLAN.PRERATING_PLAN%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.ChangePlanBilling PackageId ['||INUPACKAGEID||']',5);

        
        MO_BOBILLINGDATACHANGE.GETPLANESBYPACKID(INUPACKAGEID, NUNEWPLANID, NUPLANID);

        
        RCMOTIVE    := MO_BOPACKAGES.FRCGETINITIALMOTIVE(INUPACKAGEID);

        
        IF
            RCMOTIVE.IS_IMMEDIATE_ATTENT = 'N'
        THEN
            PKBCPERICOSE.GETLASTPREVCONSPERIOD(
                RCMOTIVE.PRODUCT_ID,
                RCPERICOSE
            );

            DTGENDATE := RCPERICOSE.PECSFECF;
        ELSE
            DTGENDATE := UT_DATE.FDTSYSDATE;
        END IF;

        
        LE_BOINCLUDEUNITSATTENTION.ATTENTIONINCLUNIT(
            RCMOTIVE.PACKAGE_ID,
            RCMOTIVE.MOTIVE_ID,
            DTGENDATE,
            RCMOTIVE.IS_IMMEDIATE_ATTENT = 'N'
        );

        
        MO_BOBILLINGDATACHANGE.GETDATACOMMPLANPACKAGEID(
            INUPACKAGEID,
            NUBILLINGPLAN,
            NURATINGPLAN,
            NUPRERATINGPLAN
        );

        
        FA_BOCHANGEBILLPLAN.LIQUIDATECHANGEPLAN(
            RCMOTIVE.PRODUCT_ID,
            DTGENDATE,
            NUBILLINGPLAN,
            RCMOTIVE.IS_IMMEDIATE_ATTENT = 'Y'
        );
        
        
        PR_BOPRODUCT.UPDPLANPRODUCT
        (
            RCMOTIVE.PRODUCT_ID,
            NUNEWPLANID,
            DTGENDATE + 1/24/60/60,
            RCMOTIVE.MOTIVE_ID
        );

        
        
        CC_BOBUNDLINGPROCESS.BUNDLINGRECONFIG(RCMOTIVE.PRODUCT_ID);

        
        MO_BOATTENTION.ATTENDPACKAGE(INUPACKAGEID);

        UT_TRACE.TRACE('Finaliza MO_BOAttention.ChangePlanBilling',5);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END CHANGEPLANBILLING;
    
    


















    PROCEDURE ATTENDADITANDRETCOMP
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.AttendAditAndRetComp. Paquete['||INUPACKAGEID||']',10);

        
        FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTBYPACKANDMOTTY(INUPACKAGEID, MO_BOCONSTANTS.CNUSERVADD_MOTIVE_TYPE) LOOP
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) THEN
                
                ATTENDCMPADITIONMOT(RCMOTIVE.MOTIVE_ID);
            END IF;
        END LOOP;

        
        FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTBYPACKANDMOTTY(INUPACKAGEID, MO_BOCONSTANTS.CNURETIRECOMP_MOTI_TYPE) LOOP
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) THEN
                
                MO_BORETIRE.RETIRECOMPATTENTION(RCMOTIVE.MOTIVE_ID);
            END IF;
        END LOOP;

        
        IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID))) THEN
               MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(INUPACKAGEID,GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBACTION_ATTEND));
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOAttention.AttendAditAndRetComp',10);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

    END ATTENDADITANDRETCOMP;

    





















    PROCEDURE CHANGEPROVDATESBYMOT
        (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        IDTPROVINITIALDATE  IN MO_MOTIVE.PROV_INITIAL_DATE%TYPE,
        IDTPROVFINALDATE    IN MO_MOTIVE.PROV_FINAL_DATE%TYPE
        )
    IS
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        NUPRODUCTMOTIVEID   MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        NUUNITTYPEINI       NUMBER(10);
        NUUNITTYPEFIN       NUMBER(10);
        DTNEWDATEINI        DATE;
        DTNEWDATEFIN        DATE;
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);

        EXUPDATEACTIVITYDELAY   EXCEPTION;
    BEGIN
    
        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.ChangeProvDatesByMot',5);
        UT_TRACE.TRACE('Motivo  : ['||INUMOTIVEID||']',6);
        UT_TRACE.TRACE('Fecha de Inicio de Provisionalidad      : ['||IDTPROVINITIALDATE||']',6);
        UT_TRACE.TRACE('Fecha de Finalizaciï¿½n de Provisionalidad: ['||IDTPROVFINALDATE||']',6);
        
        DAMO_MOTIVE.LOCKBYPK(INUMOTIVEID,RCMOTIVE);
        
        NUPRODUCTMOTIVEID := RCMOTIVE.PRODUCT_MOTIVE_ID;

        
        IF (IDTPROVINITIALDATE IS NOT NULL) THEN
        
            
            RCMOTIVE.PROV_INITIAL_DATE := IDTPROVINITIALDATE;
            
            RCMOTIVE.ESTIMATED_INST_DATE := IDTPROVINITIALDATE;
            
            RCMOTIVE.EXECUTION_MAX_DATE := IDTPROVINITIALDATE;
            
            MO_BOCOMPONENT.CHANGEESTIMINSTDATEBYMOT(INUMOTIVEID,IDTPROVINITIALDATE);
            
            IF (RCMOTIVE.PRODUCT_ID IS NOT NULL) THEN
            
                
                DAPR_PRODUCT.UPDPROVISIONAL_BEG_DATE(RCMOTIVE.PRODUCT_ID, IDTPROVINITIALDATE);
            
            END IF;
            
            NUUNITTYPEINI := GE_BOPARAMETER.FNUGET('PROV_INI_WF_UNIT_TYP');
            UT_TRACE.TRACE('Tipo de Unidad de Inicio    : ['||NUUNITTYPEINI||']',6);
            
            DTNEWDATEINI := RCMOTIVE.PROV_INITIAL_DATE -
                (PS_BOPRODMOTIPARAM.FNUGETPROVISIONALWAIT(NUPRODUCTMOTIVEID)
                * UT_DATE.CNUFACTOR_MINUTE_DATE);
            UT_TRACE.TRACE('Nueva Fecha de Inicio   : ['||DTNEWDATEINI||']',6);
            UT_TRACE.TRACE('Inicia Servicio de WF para Cambiar Fecha de Inicio',6);
            MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
            GE_BOINT_WORKFLOW.UPDATEACTIVITYDELAY
                (
                INUMOTIVEID,
                MO_BOPARAMETER.FNUGETENTITY_MOTIVE,
                NUUNITTYPEINI,
                DTNEWDATEINI,
                NUERRORCODE,
                SBERRORMESSAGE
                );
            IF (NUERRORCODE <> MO_BOCONSTANTS.CNUOK) THEN
            
                RAISE EXUPDATEACTIVITYDELAY;
            
            END IF;
        
        END IF;

        
        IF (IDTPROVFINALDATE IS NOT NULL) THEN
        
            
            RCMOTIVE.PROV_FINAL_DATE := IDTPROVFINALDATE;
            
            IF (RCMOTIVE.PRODUCT_ID IS NOT NULL) THEN
            
                
                DAPR_PRODUCT.UPDPROVISIONAL_END_DATE(RCMOTIVE.PRODUCT_ID, IDTPROVFINALDATE);
            
            END IF;
            
            NUUNITTYPEFIN := GE_BOPARAMETER.FNUGET ('PROV_END_WF_UNIT_TYP');
            UT_TRACE.TRACE('Tipo de Unidad de Finalizaciï¿½n  : ['||NUUNITTYPEFIN||']',6);
            
            DTNEWDATEFIN := RCMOTIVE.PROV_FINAL_DATE -
                (PS_BOPRODMOTIPARAM.FNUGETPROVISIONALWAIT(NUPRODUCTMOTIVEID)
                * UT_DATE.CNUFACTOR_MINUTE_DATE);
            UT_TRACE.TRACE('Nueva Fecha de Finalizaciï¿½n : ['||DTNEWDATEFIN||']',6);
            UT_TRACE.TRACE('Inicia Servicio de WF para Cambiar Fecha de Finalizaciï¿½n',3);
            MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
            GE_BOINT_WORKFLOW.UPDATEACTIVITYDELAY
                (
                RCMOTIVE.MOTIVE_ID,
                MO_BOPARAMETER.FNUGETENTITY_MOTIVE,
                NUUNITTYPEFIN,
                DTNEWDATEFIN,
                NUERRORCODE,
                SBERRORMESSAGE
                );
            IF (NUERRORCODE <> MO_BOCONSTANTS.CNUOK) THEN
            
                RAISE EXUPDATEACTIVITYDELAY;
            
            END IF;
        
        END IF;

        
        DAMO_MOTIVE.UPDRECORD(RCMOTIVE);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.ChangeProvDatesByMot',5);
    
    EXCEPTION
        WHEN EXUPDATEACTIVITYDELAY THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                'GE_BOInt_Workflow.UpdateActivityDelay' || '|' ||
                TO_CHAR(NUERRORCODE) || ' - ' || SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGEPROVDATESBYMOT;


	
























    PROCEDURE CHANGEPROVISIONALDATES
    (
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCMOTIVEASSO    DAMO_MOTIVE_ASSO.STYMO_MOTIVE_ASSO;
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.ChangeProvisionalDates['||INUMOTIVEID||']', 1);

        
        DAMO_MOTIVE.LOCKBYPK(INUMOTIVEID, RCMOTIVE);
        
        
        RCMOTIVEASSO := MO_BCMOTIVE_ASSO.FRCMOTIASSOBYMOTIID(INUMOTIVEID);

        IF (RCMOTIVEASSO.MOTIVE_ID_ASSO) IS NOT NULL THEN
        
            
            MO_BOATTENTION.CHANGEPROVDATESBYMOT
            (
                RCMOTIVEASSO.MOTIVE_ID_ASSO,
                RCMOTIVE.PROV_INITIAL_DATE,
                RCMOTIVE.PROV_FINAL_DATE
            );
            
        END IF;
        
        
        MO_BOATTENTION.ATTENDMOTIVE(INUMOTIVEID);
        
        UT_TRACE.TRACE('Finaliza MO_BOAttention.ChangeProvisionalDates',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGEPROVISIONALDATES;

    


















    PROCEDURE CHANGESUSPENSIONINIDATEONWF
        (
        INUCOMPONENTID      IN MO_COMPONENT.COMPONENT_ID%TYPE,
        IDTAPLICATIONDATE   IN MO_SUSPENSION.APLICATION_DATE%TYPE,
        IDTNEWDATEINI       IN DATE,
        INUUNITTYPEINI      IN NUMBER
        )
    IS
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);

        EXUPDATEACTIVITYDELAY   EXCEPTION;
    BEGIN
        
        IF (IDTAPLICATIONDATE IS NOT NULL) THEN
            UT_TRACE.TRACE('Inicia Metodo que LLama Servicio de WF para Cambiar Fecha de Inicio',4);
            UT_TRACE.TRACE('Componente  : [' || INUCOMPONENTID || ']',5);
            UT_TRACE.TRACE('Tipo Unidad : [' || INUUNITTYPEINI || ']',5);
            UT_TRACE.TRACE('Fecha       : [' || IDTNEWDATEINI || ']',5);
            MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
            GE_BOINT_WORKFLOW.UPDATEACTIVITYDELAY
                (
                INUCOMPONENTID,
                MO_BOPARAMETER.FNUGETENTITY_COMPONENT,
                INUUNITTYPEINI,
                IDTNEWDATEINI,
                NUERRORCODE,
                SBERRORMESSAGE
                );
            IF (NUERRORCODE <> MO_BOCONSTANTS.CNUOK) THEN
                RAISE EXUPDATEACTIVITYDELAY;
            END IF;
        END IF;
    EXCEPTION
        WHEN EXUPDATEACTIVITYDELAY THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                'GE_BOInt_Workflow.UpdateActivityDelay' || '|' ||
                TO_CHAR(NUERRORCODE) || ' - ' || SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGESUSPENSIONINIDATEONWF;
    
    


















    PROCEDURE CHANGESUSPENSIONFINDATEONWF
        (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        IDTENDINGDATE       IN MO_SUSPENSION.ENDING_DATE%TYPE,
        IDTNEWDATEFIN       IN DATE,
        INUUNITTYPEFIN      IN NUMBER
        )
    IS
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);

        EXUPDATEACTIVITYDELAY   EXCEPTION;
    BEGIN
        
        IF (IDTENDINGDATE IS NOT NULL) THEN
            UT_TRACE.TRACE('Inicia Metodo que LLama Servicio de WF para Cambiar Fecha de Finalizaciï¿½n',3);
            UT_TRACE.TRACE('Motivo      : [' || INUMOTIVEID || ']',5);
            UT_TRACE.TRACE('Tipo Unidad : [' || INUUNITTYPEFIN || ']',5);
            UT_TRACE.TRACE('Fecha       : [' || IDTNEWDATEFIN || ']',5);
            MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
            GE_BOINT_WORKFLOW.UPDATEACTIVITYDELAY
                (
                INUMOTIVEID,
                MO_BOPARAMETER.FNUGETENTITY_MOTIVE,
                INUUNITTYPEFIN,
                IDTNEWDATEFIN,
                NUERRORCODE,
                SBERRORMESSAGE
                );
            IF (NUERRORCODE <> MO_BOCONSTANTS.CNUOK) THEN
                RAISE EXUPDATEACTIVITYDELAY;
            END IF;
        END IF;
    EXCEPTION
        WHEN EXUPDATEACTIVITYDELAY THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                'GE_BOInt_Workflow.UpdateActivityDelay' || '|' ||
                TO_CHAR(NUERRORCODE) || ' - ' || SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGESUSPENSIONFINDATEONWF;
    
    





















    PROCEDURE CHANGESUSPENSIONDATESBYCOMP
    (
        INUCOMPONENTID      IN MO_COMPONENT.COMPONENT_ID%TYPE,
        IDTAPLICATIONDATE   IN MO_SUSPENSION.APLICATION_DATE%TYPE,
        IDTENDINGDATE       IN MO_SUSPENSION.ENDING_DATE%TYPE,
        IDTNEWDATEINI       IN DATE,
        IDTNEWDATEFIN       IN DATE,
        INUUNITTYPEINI      IN NUMBER,
        INUUNITTYPEFIN      IN NUMBER
    )
    IS
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
        RCSUSPENSIONCOMP    DAMO_SUSPENSION_COMP.STYMO_SUSPENSION_COMP;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.ChangeSuspensionDatesByComp',4);
        
        DAMO_COMPONENT.LOCKBYPK(INUCOMPONENTID,RCCOMPONENT);
        
        DAMO_SUSPENSION_COMP.LOCKBYPK(INUCOMPONENTID,RCSUSPENSIONCOMP);

        
        IF (IDTAPLICATIONDATE IS NOT NULL) THEN
            
            CHANGESUSPENSIONINIDATEONWF
                (
                INUCOMPONENTID,
                IDTAPLICATIONDATE,
                IDTNEWDATEINI,
                INUUNITTYPEINI
                );
            
            RCSUSPENSIONCOMP.APLICATION_DATE := IDTAPLICATIONDATE;
        END IF;

        
        IF (IDTENDINGDATE IS NOT NULL) THEN
            
            CHANGESUSPENSIONFINDATEONWF
                (
                RCCOMPONENT.MOTIVE_ID,
                IDTENDINGDATE,
                IDTNEWDATEFIN,
                INUUNITTYPEFIN
                );
            
            RCSUSPENSIONCOMP.ENDING_DATE := IDTENDINGDATE;
        END IF;

        UT_TRACE.TRACE('Fecha de Inicio a Actualizar en el Componente       : [' || RCSUSPENSIONCOMP.APLICATION_DATE || ']',5);
        UT_TRACE.TRACE('Fecha de Finalizaciï¿½n a Actualizar en el Componente : [' || RCSUSPENSIONCOMP.ENDING_DATE || ']',5);
        
        DAMO_SUSPENSION_COMP.UPDRECORD(RCSUSPENSIONCOMP);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.ChangeSuspensionDatesByComp',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGESUSPENSIONDATESBYCOMP;
    
    





















    PROCEDURE CHANGESUSPENSIONDATESBYMOT
    (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        IDTAPLICATIONDATE   IN MO_SUSPENSION.APLICATION_DATE%TYPE,
        IDTENDINGDATE       IN MO_SUSPENSION.ENDING_DATE%TYPE,
        IDTNEWDATEINI       IN DATE,
        IDTNEWDATEFIN       IN DATE,
        INUUNITTYPEINI      IN NUMBER,
        INUUNITTYPEFIN      IN NUMBER
    )
    IS
        CURFCOMPONENTSBYMOTIVE  CONSTANTS.TYREFCURSOR;
        RCCOMPONENTSBYMOTIVE    MO_BCCOMPONENT.STYRCCOMPONENTSBYMOTIVE;
        RCSUSPENSIONCOMP        DAMO_SUSPENSION_COMP.STYMO_SUSPENSION_COMP;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.ChangeSuspensionDatesByMot',4);
        
        CURFCOMPONENTSBYMOTIVE := MO_BCCOMPONENT.FRFCOMPONENTSBYMOTIVE(INUMOTIVEID);
        FETCH CURFCOMPONENTSBYMOTIVE INTO RCCOMPONENTSBYMOTIVE;
        WHILE CURFCOMPONENTSBYMOTIVE%FOUND LOOP
            UT_TRACE.TRACE('Componente a Actualizar : [' || RCCOMPONENTSBYMOTIVE.COMPONENT_ID || ']',5);
            IF (DAMO_SUSPENSION_COMP.FBLEXIST(RCCOMPONENTSBYMOTIVE.COMPONENT_ID))
            THEN
                
                DAMO_SUSPENSION_COMP.LOCKBYPK(RCCOMPONENTSBYMOTIVE.COMPONENT_ID,RCSUSPENSIONCOMP);

                
                IF (IDTAPLICATIONDATE IS NOT NULL) THEN
                    
                    CHANGESUSPENSIONINIDATEONWF
                        (
                        RCCOMPONENTSBYMOTIVE.COMPONENT_ID,
                        IDTAPLICATIONDATE,
                        IDTNEWDATEINI,
                        INUUNITTYPEINI
                        );
                    
                    RCSUSPENSIONCOMP.APLICATION_DATE := IDTAPLICATIONDATE;
                END IF;
                
                IF (IDTENDINGDATE IS NOT NULL) THEN
                    
                    RCSUSPENSIONCOMP.ENDING_DATE := IDTENDINGDATE;
                END IF;
                UT_TRACE.TRACE('Fecha de Inicio a Actualizar en el Componente       : [' || RCSUSPENSIONCOMP.APLICATION_DATE || ']',5);
                UT_TRACE.TRACE('Fecha de Finalizaciï¿½n a Actualizar en el Componente : [' || RCSUSPENSIONCOMP.ENDING_DATE || ']',5);
                
                DAMO_SUSPENSION_COMP.UPDRECORD(RCSUSPENSIONCOMP);
            END IF;

            FETCH CURFCOMPONENTSBYMOTIVE INTO RCCOMPONENTSBYMOTIVE;
        END LOOP;
        CLOSE CURFCOMPONENTSBYMOTIVE;

        
        IF (IDTENDINGDATE IS NOT NULL) THEN
            
            CHANGESUSPENSIONFINDATEONWF
                (
                INUMOTIVEID,
                IDTENDINGDATE,
                IDTNEWDATEFIN,
                INUUNITTYPEFIN
                );
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.ChangeSuspensionDatesByMot',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTSBYMOTIVE);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTSBYMOTIVE);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGESUSPENSIONDATESBYMOT;
    
    

















    PROCEDURE UPDMOTIVESUSPENSION
        (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        IDTAPLICATIONDATE   IN MO_SUSPENSION.APLICATION_DATE%TYPE,
        IDTENDINGDATE       IN MO_SUSPENSION.ENDING_DATE%TYPE
        )
    IS
        RCSUSPENSION    DAMO_SUSPENSION.STYMO_SUSPENSION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.UpdMotiveSuspension',4);
        UT_TRACE.TRACE('Motivo  : ['||INUMOTIVEID||']',5);
        UT_TRACE.TRACE('Nueva Fecha de IniciO de Suspensiï¿½n     : ['||IDTAPLICATIONDATE||']',5);
        UT_TRACE.TRACE('Nueva Fecha de Finalizaciï¿½n de Suspensiï¿½n   : ['||IDTENDINGDATE||']',5);
        
        IF (NOT DAMO_SUSPENSION.FBLEXIST(INUMOTIVEID)) THEN
            UT_TRACE.TRACE('Registro No Existe',5);
            UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.UpdMotiveSuspension',4);
            RETURN;
        END IF;
        
        RCSUSPENSION := DAMO_SUSPENSION.FRCGETRECORD(INUMOTIVEID);
        IF (IDTAPLICATIONDATE IS NOT NULL) THEN
            RCSUSPENSION.APLICATION_DATE := IDTAPLICATIONDATE;
        END IF;
        IF (IDTENDINGDATE IS NOT NULL) THEN
            RCSUSPENSION.ENDING_DATE := IDTENDINGDATE;
        END IF;
        
        DAMO_SUSPENSION.UPDRECORD(RCSUSPENSION);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.UpdMotiveSuspension',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDMOTIVESUSPENSION;

    


















    PROCEDURE CHANGESUSPENSIONDATES
    (
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCMOTIVEASSO        DAMO_MOTIVE_ASSO.STYMO_MOTIVE_ASSO;
        RCMOTIVEASSOCIATE   DAMO_MOTIVE.STYMO_MOTIVE;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        RCSUSPENSION        DAMO_SUSPENSION.STYMO_SUSPENSION;
        RCSUSPENSIONASSO    DAMO_SUSPENSION.STYMO_SUSPENSION;
        DTAPLICATIONDATE    MO_SUSPENSION.APLICATION_DATE%TYPE;
        DTENDINGDATE        MO_SUSPENSION.ENDING_DATE%TYPE;
        NUPRODUCTMOTIVEID   MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        NUUNITTYPEINI       NUMBER(10);
        NUUNITTYPEFIN       NUMBER(10);
        DTNEWDATEINI        DATE;
        DTNEWDATEFIN        DATE;

    BEGIN
        UT_TRACE.TRACE('Iniciï¿½ Cambio de Fechas de Suspensiï¿½n',1);
        UT_TRACE.TRACE('Motivo  : [' || INUMOTIVEID || ']',2);

        
        RCMOTIVEASSO := MO_BCMOTIVE_ASSO.FRCMOTIASSOBYMOTIID(INUMOTIVEID);
        
        DAMO_MOTIVE.LOCKBYPK(INUMOTIVEID,RCMOTIVE);
        
        DAMO_MOTIVE.LOCKBYPK(RCMOTIVEASSO.MOTIVE_ID_ASSO,RCMOTIVEASSOCIATE);
        
        NUPRODUCTMOTIVEID := RCMOTIVEASSOCIATE.PRODUCT_MOTIVE_ID;
        
        RCSUSPENSION := DAMO_SUSPENSION.FRCGETRECORD(INUMOTIVEID);
        DTAPLICATIONDATE := RCSUSPENSION.APLICATION_DATE;
        UT_TRACE.TRACE('Nueva Fecha de Inicio de Suspensiï¿½n         : ['||DTAPLICATIONDATE||']',3);
        DTENDINGDATE := RCSUSPENSION.ENDING_DATE;
        UT_TRACE.TRACE('Nueva Fecha de Finalizaciï¿½n de Suspensiï¿½n   : ['||DTENDINGDATE||']',3);

        IF (DTAPLICATIONDATE IS NOT NULL) THEN
            
            NUUNITTYPEINI := GE_BOPARAMETER.FNUGET('SUSP_INI_WF_UNI_TYP');
            UT_TRACE.TRACE('Tipo de Unidad de Inicio   : [' || NUUNITTYPEINI || ']',3);
            
            DTNEWDATEINI := DTAPLICATIONDATE -
                (PS_BOPRODMOTIPARAM.FNUGETPROVISIONALWAIT(NUPRODUCTMOTIVEID)
                * UT_DATE.CNUFACTOR_MINUTE_DATE);
            UT_TRACE.TRACE('Nueva Fecha de Inicio   : [' || DTNEWDATEINI || ']',3);
        END IF;

        IF (DTENDINGDATE IS NOT NULL) THEN
            
            NUUNITTYPEFIN := GE_BOPARAMETER.FNUGET ('SUSP_END_WF_UNIT_TYP');
            UT_TRACE.TRACE('Tipo de Unidad de Finalizaciï¿½n : [' || NUUNITTYPEFIN || ']',3);
            
            DTNEWDATEFIN := DTENDINGDATE -
                (PS_BOPRODMOTIPARAM.FNUGETPROVISIONALWAIT(NUPRODUCTMOTIVEID)
                * UT_DATE.CNUFACTOR_MINUTE_DATE);
            UT_TRACE.TRACE('Nueva Fecha de Finalizaciï¿½n    : [' || DTNEWDATEFIN || ']',3);
        END IF;

        IF (RCMOTIVEASSO.COMPONENT_ID_ASSO IS NOT NULL) THEN
            UT_TRACE.TRACE('Inicio Actualizaciï¿½n por Componente: [' || RCMOTIVEASSO.COMPONENT_ID_ASSO || ']',3);
            
            DAMO_SUSPENSION_COMP.ACCKEY(RCMOTIVEASSO.COMPONENT_ID_ASSO);
            
            CHANGESUSPENSIONDATESBYCOMP
                (
                RCMOTIVEASSO.COMPONENT_ID_ASSO,
                DTAPLICATIONDATE,
                DTENDINGDATE,
                DTNEWDATEINI,
                DTNEWDATEFIN,
                NUUNITTYPEINI,
                NUUNITTYPEFIN
                );
        ELSE
            UT_TRACE.TRACE('Inicio Actualizaciï¿½n por Motivo: [' || RCMOTIVEASSO.MOTIVE_ID_ASSO || ']',3);
            
            CHANGESUSPENSIONDATESBYMOT
                (
                RCMOTIVEASSO.MOTIVE_ID_ASSO,
                DTAPLICATIONDATE,
                DTENDINGDATE,
                DTNEWDATEINI,
                DTNEWDATEFIN,
                NUUNITTYPEINI,
                NUUNITTYPEFIN
                );
            
            UPDMOTIVESUSPENSION(RCMOTIVEASSO.MOTIVE_ID_ASSO,DTAPLICATIONDATE,DTENDINGDATE);
        END IF;
        
        UT_TRACE.TRACE('Iniciï¿½ La Atenciï¿½n del Motivo de Cambio de Fecha de Suspensiï¿½n',1);
        MO_BOATTENTIONCONTROLLER.MOTIVEATTENTION
            (
            INUMOTIVEID,
            MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PROD,
            TRUE
            );
            
        UT_TRACE.TRACE('Terminï¿½ Cambio de Fechas de Suspensiï¿½n',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGESUSPENSIONDATES;

    







































	PROCEDURE ACTCONTRACTCHANGEBALANCE (
        INUPACKAGEID        IN   MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUPRODUCTID         MO_MOTIVE.PRODUCT_ID%TYPE;
        NUNEWSUBSCRIPTIONID SUSCRIPC.SUSCCODI%TYPE;
        NUOLDSUBSCRIPTIONID SUSCRIPC.SUSCCODI%TYPE;
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);
        RCPACKAGE           DAMO_PACKAGES.STYMO_PACKAGES;
        RCPACKASSO          DAMO_PACKAGES_ASSO.STYMO_PACKAGES_ASSO;
        NUPACKASSOID        MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE;
        NUPACKASSOTYPEID    MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
        BLBUNDLERECONFIG    BOOLEAN := TRUE;
        NUNEWSUBSCRIBERID   GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUOLDSUBSCRIBERID   GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        RCSUSCRIPC          SUSCRIPC%ROWTYPE;

        
        CNUPACK_CONFORMACION PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME('P_CONFORMACION_EMPAQUETAMIENTO');
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.ActContractChangeBalance',5);

        UT_TRACE.TRACE('Paquete:['||INUPACKAGEID||']',6);

        RCPACKAGE := DAMO_PACKAGES.FRCGETRECORD (INUPACKAGEID);
        
        NUPRODUCTID := MO_BOPACKAGES.FNUGETPRODUCT (INUPACKAGEID);
        
        UT_TRACE.TRACE('Producto:['||NUPRODUCTID||']',6);

        
        FOR REC IN MO_BCBILL_DATA_CHANGE.CUBILLDATACHANGEBYPACK(INUPACKAGEID) LOOP

            
            NUNEWSUBSCRIPTIONID := REC.NEW_SUBSCRIPTION;
            
            NUOLDSUBSCRIPTIONID := REC.OLD_SUBSCRIPTION;

        END LOOP;
        
        UT_TRACE.TRACE('Contratos Destino:['||NUNEWSUBSCRIPTIONID||'] Origen :['||NUOLDSUBSCRIPTIONID||']',6);

        
        RCSUSCRIPC  := PKTBLSUSCRIPC.FRCGETRECORD(NUNEWSUBSCRIPTIONID);

        
        IF (RCSUSCRIPC.SUSCSIST IS NULL) THEN
            RCSUSCRIPC.SUSCSIST := RCPACKAGE.COMPANY_ID;
            PKTBLSUSCRIPC.UPRECORD(RCSUSCRIPC);
        END IF;

        NUNEWSUBSCRIBERID := RCSUSCRIPC.SUSCCLIE;
        
        NUOLDSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUOLDSUBSCRIPTIONID);

        UT_TRACE.TRACE('Clientes Destino:['||NUNEWSUBSCRIBERID||'] Origen :['||NUOLDSUBSCRIBERID||']',6);

        
        MO_BOMOTIVE.UPDSUBSCRIPTION_ID(NUOLDSUBSCRIPTIONID, NUPRODUCTID, NUNEWSUBSCRIPTIONID);

        
        DAPR_PRODUCT.UPDSUBSCRIPTION_ID(NUPRODUCTID, NUNEWSUBSCRIPTIONID);

        
        IF  (NUOLDSUBSCRIBERID <> NUNEWSUBSCRIBERID) THEN

            
            GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(NUOLDSUBSCRIBERID);

            
            GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(NUNEWSUBSCRIBERID);

        END IF;

        
        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);

        
        PKBSCONTRACTCHANGE.ATTENTPRODCONTRACTCHANGE  ( NUPRODUCTID,    
                                                       NUNEWSUBSCRIPTIONID,  
                                                       SYSDATE, 
                                                       CC_BOCONSTANTS.CSBCUSTOMERCARE, 
                                           	           NUERRORCODE,
                                                       SBERRORMESSAGE
                                                      );
        GW_BOERRORS.CHECKERROR(NUERRORCODE,SBERRORMESSAGE);

        
        RCPACKASSO.PACKAGE_ID_ASSO := NULL;
        RCPACKASSO := MO_BCPACKAGES_ASSO.FRCPACKASSOBYPACKID(INUPACKAGEID);
        IF (RCPACKASSO.PACKAGE_ID_ASSO IS NOT NULL) THEN
            NUPACKASSOID := RCPACKASSO.PACKAGE_ID_ASSO;
            NUPACKASSOTYPEID := DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID(NUPACKASSOID);
            
            
            IF (NUPACKASSOTYPEID = CNUPACK_CONFORMACION) THEN
                BLBUNDLERECONFIG := FALSE;
            END IF;
        END IF;

        
        
        IF (BLBUNDLERECONFIG) THEN
            CC_BOBUNDLINGPROCESS.BUNDLINGRECONFIG(NUPRODUCTID,NUNEWSUBSCRIPTIONID);
        END IF;


        UT_TRACE.TRACE('Finaliza MO_BOAttention.ActContractChangeBalance',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END ACTCONTRACTCHANGEBALANCE;

    
































    PROCEDURE ANNULCOMPSNOFEASBYTYPANDMOT
    (
        INUMOTIVEID             IN    MO_COMPONENT.PACKAGE_ID%TYPE,
        INUCOMPONENTTYPEID      IN    MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCAUSALID             IN    CC_CAUSAL.CAUSAL_ID%TYPE,
        ONUERRORCODEANNUL       OUT   GE_MESSAGE.MESSAGE_ID%TYPE,
    	OSBERRORMESSAGEANNUL    OUT   VARCHAR2
    )
    IS
        NUINDEX             BINARY_INTEGER;
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
        TBCOMPONENT         DAMO_COMPONENT.TYTBMO_COMPONENT;

        
        PROCEDURE CLOSECURSORS
        IS
        BEGIN
            IF  (MO_BCCOMPONENT.CUCOMPSBYMOTIANDTYPE%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUCOMPSBYMOTIANDTYPE;
            END IF;
        END CLOSECURSORS;

    BEGIN
        UT_TRACE.TRACE('Begin MO_BOAttention.AnnulCompsNoFeasByTypAndMot', 5);
        UT_TRACE.TRACE('MotiveID[' || INUMOTIVEID || ']', 10);
        UT_TRACE.TRACE('ComponentTypeID[' || INUCOMPONENTTYPEID || ']', 10);
        UT_TRACE.TRACE('CausalID[' || INUCAUSALID || ']', 10);

        CLOSECURSORS;

        
        GE_BOUTILITIES.INITIALIZEOUTPUT(ONUERRORCODEANNUL, OSBERRORMESSAGEANNUL);

        
        OPEN  MO_BCCOMPONENT.CUCOMPSBYMOTIANDTYPE(INUMOTIVEID, INUCOMPONENTTYPEID);
        FETCH MO_BCCOMPONENT.CUCOMPSBYMOTIANDTYPE BULK COLLECT INTO TBCOMPONENT;
        CLOSE MO_BCCOMPONENT.CUCOMPSBYMOTIANDTYPE;

        
        NUINDEX := TBCOMPONENT.FIRST;

        WHILE (NUINDEX IS NOT NULL) LOOP
            
            RCCOMPONENT := TBCOMPONENT(NUINDEX);

            
            RCCOMPONENT.MOTIVE_STATUS_ID := DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(RCCOMPONENT.COMPONENT_ID);

            
                
            IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCCOMPONENT.MOTIVE_STATUS_ID)) AND
                
                (RCCOMPONENT.MOTIVE_STATUS_ID != MO_BOSTATUSPARAMETER.FNUGETSTATUS_IN_ANNUL_COMP) AND
                
                (NOT MO_BOPROVISIONING.FBLISVALIDSERVSUPL(RCCOMPONENT.COMPONENT_ID))
            THEN

                BEGIN
                    
                    CC_BOANULASOLICITUD.ANULASCCOMPONENTE
                    (
                        RCCOMPONENT.COMPONENT_ID,
                        INUCAUSALID,
                        NULL
                    );
                EXCEPTION
                    WHEN EX.CONTROLLED_ERROR  THEN
                    ERRORS.GETERROR(ONUERRORCODEANNUL,OSBERRORMESSAGEANNUL);

                    WHEN OTHERS THEN
                    ERRORS.SETERROR;
    	            ERRORS.GETERROR(ONUERRORCODEANNUL, OSBERRORMESSAGEANNUL);
                END;

            END IF;

            
            NUINDEX := TBCOMPONENT.NEXT(NUINDEX);
        END LOOP;

        UT_TRACE.TRACE('End MO_BOAttention.AnnulCompsNoFeasByTypAndMot - OK', 5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSORS;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSORS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULCOMPSNOFEASBYTYPANDMOT;

    
























    PROCEDURE UPDADDRESSANDPREMISEMOT
        (
        INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE,
        IRCADDRESS  IN DAMO_ADDRESS.STYMO_ADDRESS
        )
    IS
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;
        RCADDRESS       DAMO_ADDRESS.STYMO_ADDRESS;
        TBSTATUS        UT_STRING.TYTB_STRING;
        NUCOUNTER       NUMBER;
        BLSTATUSISVALID BOOLEAN := FALSE;

        EXMOTIVESTATUSNOVALID   EXCEPTION;

        PROCEDURE INSADDRESSMOT
            (
            INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE,
            IRCADDRESS  IN DAMO_ADDRESS.STYMO_ADDRESS
            )
        IS
            RCADDRESS   DAMO_ADDRESS.STYMO_ADDRESS;
        BEGIN
            UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.InsAddressMot',9);

            
            RCADDRESS.ADDRESS_ID := MO_BOSEQUENCES.FNUGETADDRESSID;
            RCADDRESS.MOTIVE_ID := INUMOTIVEID;
            RCADDRESS.ADDRESS := IRCADDRESS.ADDRESS;
            RCADDRESS.PARSER_ADDRESS_ID := IRCADDRESS.PARSER_ADDRESS_ID;
            RCADDRESS.GEOGRAP_LOCATION_ID := IRCADDRESS.GEOGRAP_LOCATION_ID;
            RCADDRESS.ADDRESS_TYPE_ID := IRCADDRESS.ADDRESS_TYPE_ID;
            RCADDRESS.PARSER_ADDR_ALTER_ID := IRCADDRESS.PARSER_ADDR_ALTER_ID;
            RCADDRESS.AUX_ADDRESS := IRCADDRESS.AUX_ADDRESS;
            RCADDRESS.AUX_PHONE := IRCADDRESS.AUX_PHONE;
            RCADDRESS.IS_ADDRESS_MAIN := IRCADDRESS.IS_ADDRESS_MAIN;

            
            DAMO_ADDRESS.INSRECORD(RCADDRESS);

            UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.InsAddressMot',9);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

        















        PROCEDURE UPDADDRESSMOT
            (
            INUMOTIVEID     IN MO_MOTIVE.MOTIVE_ID%TYPE,
            IRCNEWADDRESS   IN DAMO_ADDRESS.STYMO_ADDRESS,
            IRCOLDADDRESS   IN DAMO_ADDRESS.STYMO_ADDRESS
            )
        IS
            RCADDRESS   DAMO_ADDRESS.STYMO_ADDRESS;
        BEGIN
            UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.UpdAddressMot',9);

            RCADDRESS := IRCOLDADDRESS;

            
            RCADDRESS.ADDRESS := IRCNEWADDRESS.ADDRESS;
            RCADDRESS.PARSER_ADDRESS_ID := IRCNEWADDRESS.PARSER_ADDRESS_ID;
            RCADDRESS.GEOGRAP_LOCATION_ID := IRCNEWADDRESS.GEOGRAP_LOCATION_ID;
            RCADDRESS.ADDRESS_TYPE_ID := IRCNEWADDRESS.ADDRESS_TYPE_ID;
            RCADDRESS.PARSER_ADDR_ALTER_ID := IRCNEWADDRESS.PARSER_ADDR_ALTER_ID;
            RCADDRESS.AUX_ADDRESS := IRCNEWADDRESS.AUX_ADDRESS;
            RCADDRESS.AUX_PHONE := IRCNEWADDRESS.AUX_PHONE;
            RCADDRESS.IS_ADDRESS_MAIN := IRCNEWADDRESS.IS_ADDRESS_MAIN;

            
            DAMO_ADDRESS.UPDRECORD(RCADDRESS);

            UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.UpdAddressMot',9);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.UpdAddressAndPremiseMot',7);

        
        DAMO_MOTIVE.LOCKBYPK(INUMOTIVEID,RCMOTIVE);

        
        IF (IRCADDRESS.ADDRESS_ID IS NOT NULL) THEN

            
            RCMOTIVE.GEOGRAP_LOCATION_ID := IRCADDRESS.GEOGRAP_LOCATION_ID;

            
            RCADDRESS := MO_BOADDRESS.FRCADDRESSBYTYPE(INUMOTIVEID);

            
            IF (RCADDRESS.ADDRESS_ID IS NULL) THEN

                
                INSADDRESSMOT(INUMOTIVEID,IRCADDRESS);
            ELSE

                
                UPDADDRESSMOT(INUMOTIVEID,IRCADDRESS,RCADDRESS);
            END IF;
        END IF;

        UT_TRACE.TRACE('Nueva Ubicaciï¿½n Geogrï¿½fica Motivo:['||RCMOTIVE.GEOGRAP_LOCATION_ID||']',8);
        
        DAMO_MOTIVE.UPDRECORD(RCMOTIVE);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnf_Attention.UpdAddressAndPremiseMot',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
   





















    PROCEDURE ATTENDCHANGEADDRESSMOTIVE
        (
        INUMOTIVEID IN NUMBER
        )
    IS
        RCNEWADDRESS    DAMO_ADDRESS.STYMO_ADDRESS;
        RCMOTIVEASSO    DAMO_MOTIVE_ASSO.STYMO_MOTIVE_ASSO;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.AttendChangeAddressMotive. Motivo:['||INUMOTIVEID||']',5);

        
        DAMO_MOTIVE.ACCKEY(INUMOTIVEID);

        
        RCNEWADDRESS := MO_BOADDRESS.FRCADDRESSBYTYPE(INUMOTIVEID);

        
        IF RCNEWADDRESS.ADDRESS_ID IS NULL THEN
            UT_TRACE.TRACE('No Existe ni Direcciï¿½n',6);
            RETURN;
        END IF;

        
        RCMOTIVEASSO := MO_BCMOTIVE_ASSO.FRCMOTIASSOBYMOTIID(INUMOTIVEID);
        UT_TRACE.TRACE('Paq:['||RCMOTIVEASSO.CUS_CAR_REQ_NUM_ASSO||']Mot:['||RCMOTIVEASSO.MOTIVE_ID_ASSO||']Comp:['||RCMOTIVEASSO.COMPONENT_ID_ASSO||']',6);

        
        UPDADDRESSANDPREMISEMOT(RCMOTIVEASSO.MOTIVE_ID_ASSO,RCNEWADDRESS);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.AttendChangeAddressMotive',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDCHANGEADDRESSMOTIVE;
    
















    PROCEDURE UPDATESTRATUMCOMP
        (
        INUMOTIVEID             IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUCATEGORYID           IN MO_MOTIVE.CATEGORY_ID%TYPE,
        INUSUBCATEGORYID        IN MO_MOTIVE.SUBCATEGORY_ID%TYPE
         )
    IS
        CURFCOMPONENT   CONSTANTS.TYREFCURSOR;
        RCCOMPONENT     DAMO_COMPONENT.STYMO_COMPONENT;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.UpdateStratumComp',10);

        
        CURFCOMPONENT := MO_BCCOMPONENT.FRFCOMPONENTSBYMOTIVE(INUMOTIVEID);
        LOOP
            FETCH CURFCOMPONENT INTO RCCOMPONENT;
            EXIT WHEN CURFCOMPONENT%NOTFOUND;
            UT_TRACE.TRACE('Componente:['||RCCOMPONENT.COMPONENT_ID||']',12);

            RCCOMPONENT.CATEGORY_ID :=  INUCATEGORYID;
            RCCOMPONENT.SUBCATEGORY_ID :=  INUSUBCATEGORYID;
            DAMO_COMPONENT.UPDRECORD(RCCOMPONENT);
            
        END LOOP;
        CLOSE CURFCOMPONENT;

        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.UpdateStratumComp',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATESTRATUMCOMP;
     
















    PROCEDURE MOTIVECHANGECATEGORY
        (
        INUMOTIVEID             IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUCATEGORYID           IN MO_MOTIVE.CATEGORY_ID%TYPE,
        INUSUBCATEGORYID        IN MO_MOTIVE.SUBCATEGORY_ID%TYPE
        )
    IS
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;
        TBSTATUS        UT_STRING.TYTB_STRING;
        NUCOUNTER       NUMBER;
        BLSTATUSISVALID BOOLEAN := FALSE;

        EXMOTIVESTATUSNOVALID   EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.MotiveChangeCategory',7);
        UT_TRACE.TRACE('Motivo:['||INUMOTIVEID||']Categoria:['||INUCATEGORYID||']Subcategoria:['||INUSUBCATEGORYID||']',8);

        
        DAMO_MOTIVE.LOCKBYPK(INUMOTIVEID,RCMOTIVE);

        
        RCMOTIVE.CATEGORY_ID := INUCATEGORYID;
        RCMOTIVE.SUBCATEGORY_ID := INUSUBCATEGORYID;
        
        DAMO_MOTIVE.UPDRECORD(RCMOTIVE);

        
        UPDATESTRATUMCOMP(INUMOTIVEID,INUCATEGORYID,INUSUBCATEGORYID);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.MotiveChangeCategory',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END MOTIVECHANGECATEGORY;

    

















    PROCEDURE ATTENDCHANGECATEGORY
        (
        INUMOTIVEID IN NUMBER
        )
   IS
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        CURFMOTIVE          CONSTANTS.TYREFCURSOR;
        RCMOTIVEASSO        DAMO_MOTIVE_ASSO.STYMO_MOTIVE_ASSO;
        NUCATEGORIAID       MO_MOTIVE.CATEGORY_ID%TYPE;
        NUSUBCATEGORIAID    MO_MOTIVE.SUBCATEGORY_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAttention.AttendChangeCategory. Motivo:['||INUMOTIVEID||']',5);

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);
        NUCATEGORIAID := RCMOTIVE.CATEGORY_ID;
        NUSUBCATEGORIAID := RCMOTIVE.SUBCATEGORY_ID;

        
        RCMOTIVEASSO := MO_BCMOTIVE_ASSO.FRCMOTIASSOBYMOTIID(INUMOTIVEID);
        UT_TRACE.TRACE('Paq:['||RCMOTIVEASSO.CUS_CAR_REQ_NUM_ASSO||']Mot:['||RCMOTIVEASSO.MOTIVE_ID_ASSO||']Comp:['||RCMOTIVEASSO.COMPONENT_ID_ASSO||']',6);

        IF (RCMOTIVEASSO.MOTIVE_ID_ASSO IS NOT NULL) THEN

            
            MOTIVECHANGECATEGORY(RCMOTIVEASSO.MOTIVE_ID_ASSO,NUCATEGORIAID,NUSUBCATEGORIAID);
        ELSE

            
            CURFMOTIVE := MO_BCMOTIVE.FRFMOTIVESBYCUSTCAREREQNUM(RCMOTIVEASSO.CUS_CAR_REQ_NUM_ASSO);
            FETCH CURFMOTIVE INTO RCMOTIVE;
            WHILE CURFMOTIVE%FOUND LOOP

                
                MOTIVECHANGECATEGORY(RCMOTIVE.MOTIVE_ID,NUCATEGORIAID,NUSUBCATEGORIAID);

                FETCH CURFMOTIVE INTO RCMOTIVE;
            END LOOP;
            CLOSE CURFMOTIVE;
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAttention.AttendChangeCategory',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVE);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVE);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTENDCHANGECATEGORY;
    
    



































	PROCEDURE CHANGEUSESTRATUM (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
	IS
		
		NUPRODUCTID                 PR_PRODUCT.PRODUCT_ID%TYPE;
		NUCATEGORYID                MO_MOTIVE.CATEGORY_ID%TYPE;
		NUSUBCATEGID                MO_MOTIVE.SUBCATEGORY_ID%TYPE;
		CURFGETRECORDSBYPACKAGEID   CONSTANTS.TYREFCURSOR;
        RCGETRECORDSBYPACKAGEID     DAMO_BILL_DATA_CHANGE.STYMO_BILL_DATA_CHANGE;


    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOAttention.ChangeUseStratum',5);

          
        NUPRODUCTID := MO_BOPACKAGES.FNUFINDPRODUCTID(INUPACKAGEID);

        
        CURFGETRECORDSBYPACKAGEID := MO_BCBILL_DATA_CHANGE.FRFGETRECORDSBYPACKAGEID(INUPACKAGEID);
        FETCH CURFGETRECORDSBYPACKAGEID INTO RCGETRECORDSBYPACKAGEID;
        WHILE CURFGETRECORDSBYPACKAGEID%FOUND LOOP
            UT_TRACE.TRACE('Id Registro:['||RCGETRECORDSBYPACKAGEID.BILL_DATA_CHANGE_ID||']',6);

            NUCATEGORYID      :=  RCGETRECORDSBYPACKAGEID.NEW_CATEGORY_ID;
            NUSUBCATEGID      :=  RCGETRECORDSBYPACKAGEID.NEW_SUBCATEGORY_ID;

            FETCH CURFGETRECORDSBYPACKAGEID INTO RCGETRECORDSBYPACKAGEID;
        END LOOP;
        CLOSE CURFGETRECORDSBYPACKAGEID;

        PR_BOCATEGORIAPRODUCTO.ACTCATEGORIAPRODBSS (NUPRODUCTID, NUCATEGORYID, NUSUBCATEGID);

        
        MO_BOATTENTION.ATTENDPACKAGE(INUPACKAGEID);

        UT_TRACE.TRACE('Inicia MO_BOAttention.ChangeUseStratum',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
           RAISE EX.CONTROLLED_ERROR;
    END CHANGEUSESTRATUM;

    




















    PROCEDURE UPDSERIALITEM
    (
        INUIDITEMSERIE IN GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    IS

        RCITEM              DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
    BEGIN
        UT_TRACE.TRACE('Inicia UpdSerialItem', 5);

        UT_TRACE.TRACE('inuIdItemSerie'||INUIDITEMSERIE, 7);

        
        DAGE_ITEMS_SERIADO.GETRECORD(INUIDITEMSERIE, RCITEM);

        
        RCITEM.FECHA_GARANTIA := NULL;

        
        RCITEM.FECHA_SALIDA := NULL;

        
        RCITEM.OPERATING_UNIT_ID := NULL;

        
        RCITEM.SUBSCRIBER_ID := NULL;

        
        RCITEM.ID_ITEMS_ESTADO_INV := GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE;

        
        DAGE_ITEMS_SERIADO.UPDRECORD(RCITEM);

        
        IF_BOPREVMAINTENANCE.UPDATESERIALITEM(RCITEM.ID_ITEMS_SERIADO, RCITEM.ITEMS_ID, NULL);

        UT_TRACE.TRACE('Finaliza UpdSerialItem',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDSERIALITEM;

    




































    PROCEDURE UPDINVENTORYBYMOTIVE
    (
        INUMOTIVEID     IN MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        NUINDEXCOMP         BINARY_INTEGER;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        TBCOMPONENTS        DAMO_COMPONENT.TYTBMO_COMPONENT;
        TBITEMS             DAPS_CLASS_SERVICE.TYTBITEM_ID;
        NUSERIALITEMID      GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;

        
        CNUEQCH_MOTIVE_TYPE     CONSTANT NUMBER := 106;

    BEGIN
        UT_TRACE.TRACE('Inicia el metodo MO_BOAttention.UpdInventoryByMotive inuMotiveID['||INUMOTIVEID||']',1);

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        IF RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE OR
           RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUSERVADD_MOTIVE_TYPE OR
           RCMOTIVE.MOTIVE_TYPE_ID = CNUEQCH_MOTIVE_TYPE THEN
        
            TBCOMPONENTS.DELETE;

            
            OPEN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(INUMOTIVEID);
            FETCH MO_BCCOMPONENT.CUCOMPONENTSBYMOT BULK COLLECT INTO TBCOMPONENTS;
            CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;

            NUINDEXCOMP:= TBCOMPONENTS.FIRST;
            WHILE  NUINDEXCOMP IS NOT NULL LOOP
            
                UT_TRACE.TRACE('Componente['||TBCOMPONENTS(NUINDEXCOMP).COMPONENT_ID||']', 2);
                UT_TRACE.TRACE('Clase['||TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID||']', 2);
                UT_TRACE.TRACE('Estado['||TBCOMPONENTS(NUINDEXCOMP).MOTIVE_STATUS_ID||']', 2);

                
                IF  (TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID IS NOT NULL) THEN
                
                    
                    IF (NOT TBITEMS.EXISTS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID)) THEN
                    
                        TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) := DAPS_CLASS_SERVICE.FNUGETITEM_ID(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID);
                    
                    END IF;

                    IF (TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) IS NOT NULL) THEN
                    
                        UT_TRACE.TRACE('Item['||TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID)||']', 3);

                        
                        GE_BCITEMSSERIADO.GETIDBYSERIE(TBCOMPONENTS(NUINDEXCOMP).SERVICE_NUMBER, NUSERIALITEMID);

                        UT_TRACE.TRACE('nuSerialItemId['||NUSERIALITEMID||']', 3);

                        IF (NUSERIALITEMID IS NOT NULL) THEN
                        
                            
                            GE_BOITEMSSERIADO.MOVITEMBYSELL
                            (
                                NUSERIALITEMID,
                                NULL,
                                TBCOMPONENTS(NUINDEXCOMP).RECORDING_DATE,
                                TBCOMPONENTS(NUINDEXCOMP).PACKAGE_ID,
                                'C',
                                TBCOMPONENTS(NUINDEXCOMP).PACKAGE_ID
                            );
                        
                        END IF;
                    
                    END IF;
                
                END IF;

                NUINDEXCOMP:= TBCOMPONENTS.NEXT(NUINDEXCOMP);
            
            END LOOP;
        
        END IF;

        UT_TRACE.TRACE('Inicia el metodo MO_BOAttention.UpdInventoryByMotive ',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDINVENTORYBYMOTIVE;

    





























    PROCEDURE UPDLOWINVENTORYBYMOT
    (
        INUMOTIVEID     IN MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        NUINDEXCOMP         BINARY_INTEGER;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        TBCOMPONENTS        DAMO_COMPONENT.TYTBMO_COMPONENT;
        TBITEMS             DAPS_CLASS_SERVICE.TYTBITEM_ID;
        NUSERIALITEMID      GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;

        
        CNUSIMCARD              CONSTANT NUMBER := 116;
    BEGIN
        UT_TRACE.TRACE('Inicia el metodo MO_BOAttention.UpdLowInventoryByMot inuMotiveID['||INUMOTIVEID||']',5);

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        TBCOMPONENTS.DELETE;

        
        OPEN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(INUMOTIVEID);
        FETCH MO_BCCOMPONENT.CUCOMPONENTSBYMOT BULK COLLECT INTO TBCOMPONENTS;
        CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;

        NUINDEXCOMP:= TBCOMPONENTS.FIRST;

        WHILE  NUINDEXCOMP IS NOT NULL LOOP
        
            UT_TRACE.TRACE('Componente['||TBCOMPONENTS(NUINDEXCOMP).COMPONENT_ID||']', 2);
            UT_TRACE.TRACE('Clase['||TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID||']', 2);
            UT_TRACE.TRACE('Estado['||TBCOMPONENTS(NUINDEXCOMP).MOTIVE_STATUS_ID||']', 2);

            
            IF (TBCOMPONENTS(NUINDEXCOMP).COMPONENT_TYPE_ID IN (CF_BOCONSTANTS.FNUGETEQUIPOCOMPTYPE, CNUSIMCARD)) THEN
            
                
                IF (NOT TBITEMS.EXISTS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID)) THEN
                
                    TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) := DAPS_CLASS_SERVICE.FNUGETITEM_ID(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID);
                
                END IF;

                IF (TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID) IS NOT NULL) THEN
                
                    UT_TRACE.TRACE('Item['||TBITEMS(TBCOMPONENTS(NUINDEXCOMP).CLASS_SERVICE_ID)||']', 3);

                    
                    GE_BCITEMSSERIADO.GETIDBYSERIE(DAPR_COMPONENT.FSBGETSERVICE_NUMBER(TBCOMPONENTS(NUINDEXCOMP).COMPONENT_ID_PROD), NUSERIALITEMID);

                    UT_TRACE.TRACE('nuSerialItemId['||NUSERIALITEMID||']', 3);
                    IF (NUSERIALITEMID IS NOT NULL) THEN
                    
                        IF (DAGE_ITEMS_SERIADO.FNUGETID_ITEMS_ESTADO_INV(NUSERIALITEMID)=5) THEN
                        
                            UPDSERIALITEM(NUSERIALITEMID);
                        
                        END IF;
                    
                    END IF;
                
                END IF;
            
            END IF;

            NUINDEXCOMP:= TBCOMPONENTS.NEXT(NUINDEXCOMP);
        
        END LOOP;
        UT_TRACE.TRACE('Finaliza el metodo MO_BOAttention.UpdLowInventoryByMot',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDLOWINVENTORYBYMOT;

END MO_BOATTENTION;