PACKAGE BODY CC_BOAdministrativeProcess AS

































































    
    
    
    
    CSBVERSION              CONSTANT VARCHAR2(250)  := 'SAO205953';

    
    CNURULENOTEXIST         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 3111;
    
    CNUINITIALASSIGN        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 3129;
    
    CNUTIMESCONFNOTEXIST    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2780;
    
    CNUWITHOUTAREA          CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2808;
    
    CNUWITHOUTEMAIL         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2809;
    
    CNUWITHOUTRESPONSIBLE   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2810;
    
    CNULIMITDATEGREATER     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2826;
    
    CNUCOMMENTISNULL        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 5601;
    
    CNUSTATUSNOTVALID       CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 3130;
    
    CNULIMITDATELOWER       CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2942;
    
    CNUSAMEPRIORITY         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 121942;
    
    CNURECORDSTOPROCESS     CONSTANT NUMBER := 100;
    
    CNUUPDPACKNOTIFID       CONSTANT NUMBER := 122;
    
    CNUANNULASSIGN          CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 120822;
    
    CNUNOTAREAFORPERSON     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2808;
    
    
    CNUADMPROCESSMODULEID   CONSTANT GE_MODULE.MODULE_ID%TYPE := 49;

    
    
    
    
    GNUENTITYID         MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE;
    GNUEXTERNALID       MO_ADMIN_ACTIVITY.EXTERNAL_ID%TYPE;
    GNUUNITTYPEID       MO_ADMIN_ACTIVITY.UNIT_TYPE_ID%TYPE;
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    





















    FUNCTION FNUGETORGANIZATAREABYUNITTYPE
    (
        INUENTITYID     IN GE_ENTITY.ENTITY_ID%TYPE,
        INUEXTERNALID   IN MO_ADMIN_ACTIVITY.EXTERNAL_ID%TYPE,
        INUUNITTYPEID   IN WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE
    )
    RETURN NUMBER IS
        RCUNITTYPE          DAWF_UNIT_TYPE.STYWF_UNIT_TYPE;
        NUORGANIZATAREAID   GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE;
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);
    BEGIN
        
        RCUNITTYPE := DAWF_UNIT_TYPE.FRCGETRECORD(INUUNITTYPEID);
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.fnuGetOrganizatAreaByUnitType. Tipo Proceso:['||INUUNITTYPEID||']Regla:['||RCUNITTYPE.INIT_AREA_EXPRESSION_ID||']',5);

        
        IF (RCUNITTYPE.INIT_AREA_EXPRESSION_ID IS NULL) THEN
            ERRORS.SETERROR(CNURULENOTEXIST, TO_CHAR(INUUNITTYPEID) || '-' || RCUNITTYPE.DESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);

        
        GNUENTITYID := INUENTITYID;
        GNUEXTERNALID := INUEXTERNALID;
        GNUUNITTYPEID := INUUNITTYPEID;

        
        GR_BOCONFIG_EXPRESSION.EXECUTEINITEXPRESSION(RCUNITTYPE.INIT_AREA_EXPRESSION_ID, NUORGANIZATAREAID, NUERRORCODE, SBERRORMESSAGE);
        UT_TRACE.TRACE('Area:['||NUORGANIZATAREAID||']Error:['||NUERRORCODE||']-['||SBERRORMESSAGE||']',5);

        
        IF (NVL(NUERRORCODE,MO_BOCONSTANTS.CNUOK) <> MO_BOCONSTANTS.CNUOK) THEN
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        DAGE_ORGANIZAT_AREA.ACCKEY(NUORGANIZATAREAID);
        
        RETURN NUORGANIZATAREAID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETORGANIZATAREABYUNITTYPE;


    




















    PROCEDURE INSERTADMINACTIVITY
    (
        INUENTITYID         IN MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE,
        INUEXTERNALID       IN MO_ADMIN_ACTIVITY.EXTERNAL_ID%TYPE,
        INUUNITTYPEID       IN MO_ADMIN_ACTIVITY.UNIT_TYPE_ID%TYPE,
        INUPRIORITYID       IN MO_ADMIN_ACTIVITY.PRIORITY_ID%TYPE,
        IDTLIMITATTENDDATE  IN MO_ADMIN_ACTIVITY.LIMIT_ATTEND_DATE%TYPE,
        ONUADMINACTIVITYID  OUT MO_ADMIN_ACTIVITY.ADMIN_ACTIVITY_ID%TYPE,
        IDTREGISTERDATE     IN MO_ADMIN_ACTIVITY.REGISTER_DATE%TYPE DEFAULT NULL,
        INUWFINTERFACID     IN MO_ADMIN_ACTIVITY.WF_INTERFAC_ID%TYPE DEFAULT NULL
    )
    IS
        RCADMINACTIVITY DAMO_ADMIN_ACTIVITY.STYMO_ADMIN_ACTIVITY;
    BEGIN
        ONUADMINACTIVITYID := MO_BOSEQUENCES.FNUGETSEQ_MO_ADMIN_ACTIVITY;

        RCADMINACTIVITY.ADMIN_ACTIVITY_ID   := ONUADMINACTIVITYID;
        RCADMINACTIVITY.ENTITY_ID           := INUENTITYID;
        RCADMINACTIVITY.EXTERNAL_ID         := INUEXTERNALID;
        RCADMINACTIVITY.WF_INTERFAC_ID      := INUWFINTERFACID;
        RCADMINACTIVITY.UNIT_TYPE_ID        := INUUNITTYPEID;
        RCADMINACTIVITY.PRIORITY_ID         := INUPRIORITYID;
        RCADMINACTIVITY.LIMIT_ATTEND_DATE   := IDTLIMITATTENDDATE;
        RCADMINACTIVITY.REGISTER_DATE       := NVL(IDTREGISTERDATE, SYSDATE);

        DAMO_ADMIN_ACTIVITY.INSRECORD(RCADMINACTIVITY);
        UT_TRACE.TRACE('Inserta Registro Mo_Admin_Activity:['||ONUADMINACTIVITYID||']',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSERTADMINACTIVITY;


    
























    PROCEDURE INSERTACTIVITYLOG
    (
        INUADMINACTIVITYID      IN MO_ACTIVITY_LOG.ADMIN_ACTIVITY_ID%TYPE,
        INUACTIONID             IN MO_ACTIVITY_LOG.ACTION_ID%TYPE,
        INUSOURCEPERSONID       IN MO_ACTIVITY_LOG.SOURCE_PERSON_ID%TYPE,
        INUSOURCEAREAID         IN MO_ACTIVITY_LOG.SOURCE_AREA_ID%TYPE,
        INURECEIVERPERSONID     IN MO_ACTIVITY_LOG.RECEIVER_PERSON_ID%TYPE,
        INURECEIVERAREAID       IN MO_ACTIVITY_LOG.RECEIVER_AREA_ID%TYPE,
        IDTREGISTERDATE         IN MO_ACTIVITY_LOG.REGISTER_DATE%TYPE,
        INUCOMMENTTYPEID        IN MO_ACTIVITY_LOG.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT              IN MO_ACTIVITY_LOG.COMMENT_%TYPE,
        IDTLIMITDATE            IN MO_ACTIVITY_LOG.LIMIT_DATE%TYPE,
        INUNOTIFICATIONLOGID    IN MO_ACTIVITY_LOG.NOTIFICATION_LOG_ID%TYPE,
        ONUACTIVITYLOGID        OUT MO_ACTIVITY_LOG.ACTIVITY_LOG_ID%TYPE
    )
    IS
        RCACTIVITYLOG       DAMO_ACTIVITY_LOG.STYMO_ACTIVITY_LOG;
    BEGIN
        ONUACTIVITYLOGID := MO_BOSEQUENCES.FNUGETSEQ_MO_ACTIVITY_LOG;
        
        RCACTIVITYLOG.ACTIVITY_LOG_ID       := ONUACTIVITYLOGID;
        RCACTIVITYLOG.ADMIN_ACTIVITY_ID     := INUADMINACTIVITYID;
        RCACTIVITYLOG.ACTION_ID             := INUACTIONID;
        RCACTIVITYLOG.SOURCE_PERSON_ID      := INUSOURCEPERSONID;
        RCACTIVITYLOG.SOURCE_AREA_ID        := INUSOURCEAREAID;
        RCACTIVITYLOG.RECEIVER_PERSON_ID    := INURECEIVERPERSONID;
        RCACTIVITYLOG.RECEIVER_AREA_ID      := INURECEIVERAREAID;
        RCACTIVITYLOG.REGISTER_DATE         := IDTREGISTERDATE;
        RCACTIVITYLOG.COMMENT_TYPE_ID       := INUCOMMENTTYPEID;
        RCACTIVITYLOG.COMMENT_              := ISBCOMMENT;
        RCACTIVITYLOG.LIMIT_DATE            := IDTLIMITDATE;
        RCACTIVITYLOG.NOTIFICATION_LOG_ID   := INUNOTIFICATIONLOGID;
        
        DAMO_ACTIVITY_LOG.INSRECORD(RCACTIVITYLOG);
        UT_TRACE.TRACE('Inserta Registro Mo_Activity_Log:['||ONUACTIVITYLOGID||']',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSERTACTIVITYLOG;

    



























    PROCEDURE PROCESSINSERACTIVITYLOG
    (
        INUADMINACTIVITYID      IN MO_ACTIVITY_LOG.ADMIN_ACTIVITY_ID%TYPE,
        INUACTIONID             IN MO_ACTIVITY_LOG.ACTION_ID%TYPE,
        INUSOURCEPERSONID       IN MO_ACTIVITY_LOG.SOURCE_PERSON_ID%TYPE,
        INUSOURCEAREAID         IN MO_ACTIVITY_LOG.SOURCE_AREA_ID%TYPE,
        INURECEIVERPERSONID     IN MO_ACTIVITY_LOG.RECEIVER_PERSON_ID%TYPE,
        INURECEIVERAREAID       IN MO_ACTIVITY_LOG.RECEIVER_AREA_ID%TYPE,
        IDTREGISTERDATE         IN MO_ACTIVITY_LOG.REGISTER_DATE%TYPE,
        INUCOMMENTTYPEID        IN MO_ACTIVITY_LOG.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT              IN MO_ACTIVITY_LOG.COMMENT_%TYPE,
        IDTLIMITDATE            IN MO_ACTIVITY_LOG.LIMIT_DATE%TYPE,
        INUNOTIFICATIONLOGID    IN MO_ACTIVITY_LOG.NOTIFICATION_LOG_ID%TYPE,
        ONUACTIVITYLOGID        OUT MO_ACTIVITY_LOG.ACTIVITY_LOG_ID%TYPE
    )
    IS
    BEGIN
        
        DAGE_COMMENT_TYPE.ACCKEY(INUCOMMENTTYPEID);
    
        
        IF (ISBCOMMENT IS NULL) THEN
            ERRORS.SETERROR(CNUCOMMENTISNULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    
        UT_TRACE.TRACE('Area Organizacional Origen:['||INUSOURCEAREAID||']',4);

        
        IF (INUSOURCEAREAID IS NULL) THEN
            ERRORS.SETERROR(CNUWITHOUTAREA, TO_CHAR(INUSOURCEPERSONID) || '-' || DAGE_PERSON.FSBGETNAME_(INUSOURCEPERSONID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Area Organizacional Destino:['||INURECEIVERAREAID||']',4);

        
        IF (INURECEIVERAREAID IS NULL ) THEN
            ERRORS.SETERROR(CNUWITHOUTAREA, TO_CHAR(INURECEIVERPERSONID) || '-' || DAGE_PERSON.FSBGETNAME_(INURECEIVERPERSONID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        INSERTACTIVITYLOG   (
                            INUADMINACTIVITYID,
                            INUACTIONID,
                            INUSOURCEPERSONID,
                            INUSOURCEAREAID,
                            INURECEIVERPERSONID,
                            INURECEIVERAREAID,
                            IDTREGISTERDATE,
                            INUCOMMENTTYPEID,
                            ISBCOMMENT,
                            IDTLIMITDATE,
                            INUNOTIFICATIONLOGID,
                            ONUACTIVITYLOGID
                            );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSINSERACTIVITYLOG;


    





















    PROCEDURE GETNOTIFICATIONFORASSIGN
    (
        INUENTITYID             IN MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE,
        INUUNITTYPEID           IN MO_ADMIN_ACTIVITY.UNIT_TYPE_ID%TYPE,
        ONUNOTIFICATIONLOGID    OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE,
        ONUMODULEID             OUT GE_MODULE.MODULE_ID%TYPE
    )
    IS
        NUNOTIFICATION  GE_NOTIFICATION.NOTIFICATION_ID%TYPE := NULL;
    BEGIN

        
        IF (INUUNITTYPEID IS NOT NULL) THEN
            NUNOTIFICATION := DAWF_UNIT_TYPE.FNUGETASSIGN_NOTIFICATION_ID(INUUNITTYPEID);
        END IF;
        
        
        IF (NUNOTIFICATION IS NULL) THEN
            IF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_PACKAGES) THEN

                ONUNOTIFICATIONLOGID := 103;
            ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_MOTIVE) THEN

                ONUNOTIFICATIONLOGID := 104;
            ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_COMPONENT) THEN

                ONUNOTIFICATIONLOGID := 105;
            ELSE

                ONUNOTIFICATIONLOGID := 106;
            END IF;

            ONUMODULEID  := GE_BOMODULE.GETMOTIVES_MANAGEMENT;
        ELSE
            ONUNOTIFICATIONLOGID := NUNOTIFICATION;
            ONUMODULEID  := GE_BOMODULE.GETWORKFLOW;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNOTIFICATIONFORASSIGN;


    















    PROCEDURE GETNOTIFICATIONFORATTEND
    (
        INUENTITYID             IN MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE,
        ONUNOTIFICATIONLOGID    OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE
    )
    IS
    BEGIN
        IF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_PACKAGES) THEN

            ONUNOTIFICATIONLOGID := 107;
        ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_MOTIVE) THEN

            ONUNOTIFICATIONLOGID := 108;
        ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_COMPONENT) THEN

            ONUNOTIFICATIONLOGID := 109;
        ELSE

            ONUNOTIFICATIONLOGID := 110;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNOTIFICATIONFORATTEND;
    
    



















    PROCEDURE PROCESSNOTIFICATION
    (
        INUACTIVITYLOGID    IN MO_ACTIVITY_LOG.ACTIVITY_LOG_ID%TYPE,
        INUNOTIFICATIONID   IN GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
        INUMODULEID         IN GE_MODULE.MODULE_ID%TYPE DEFAULT GE_BOMODULE.GETMOTIVES_MANAGEMENT
    )
    IS
        NUNOTIFICATIONLOGID     GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;
        SBINPUT                 VARCHAR2(2000);
        RCACTIVITYLOG           DAMO_ACTIVITY_LOG.STYMO_ACTIVITY_LOG;
        RCSOURCEPERSON          DAGE_PERSON.STYGE_PERSON;
        RCRECEIVERPERSON        DAGE_PERSON.STYGE_PERSON;
        RCRESPONSIBLEPERSON     DAGE_PERSON.STYGE_PERSON;
        NURESPONSIBLEPERSONID   GE_ORGA_AREA_ADD_DATA.PERSON_ID%TYPE;
        NUERRORCODE             GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE          VARCHAR2(2000);
    BEGIN
        UT_TRACE.TRACE('Inicia ProcessNotification. Id Hist�rico:['||INUACTIVITYLOGID||']Notificaci�n:['||INUNOTIFICATIONID||']',4);

        
        RCACTIVITYLOG := DAMO_ACTIVITY_LOG.FRCGETRECORD(INUACTIVITYLOGID);

        
        RCSOURCEPERSON := DAGE_PERSON.FRCGETRECORD(RCACTIVITYLOG.SOURCE_PERSON_ID);
        UT_TRACE.TRACE('Email Persona Origen:['||RCSOURCEPERSON.E_MAIL||']',4);

        
        IF (RCSOURCEPERSON.E_MAIL IS NULL) THEN
            ERRORS.SETERROR(CNUWITHOUTEMAIL, TO_CHAR(RCACTIVITYLOG.SOURCE_PERSON_ID) || '-' || RCSOURCEPERSON.NAME_);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        RCRECEIVERPERSON := DAGE_PERSON.FRCGETRECORD(RCACTIVITYLOG.RECEIVER_PERSON_ID);
        UT_TRACE.TRACE('Email Persona Destino:['||RCRECEIVERPERSON.E_MAIL||']',4);

        
        IF (RCRECEIVERPERSON.E_MAIL IS NULL) THEN
            ERRORS.SETERROR(CNUWITHOUTEMAIL, TO_CHAR(RCACTIVITYLOG.RECEIVER_PERSON_ID) || '-' || RCRECEIVERPERSON.NAME_);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (DAGE_ORGA_AREA_ADD_DATA.FBLEXIST(RCACTIVITYLOG.RECEIVER_AREA_ID)) THEN
            NURESPONSIBLEPERSONID := DAGE_ORGA_AREA_ADD_DATA.FNUGETPERSON_ID(RCACTIVITYLOG.RECEIVER_AREA_ID);
        END IF;
        UT_TRACE.TRACE('Persona Reponsable Area Destino:['||NURESPONSIBLEPERSONID||']',4);

        
        IF (NURESPONSIBLEPERSONID IS NULL) THEN
            ERRORS.SETERROR(CNUWITHOUTRESPONSIBLE, TO_CHAR(RCACTIVITYLOG.RECEIVER_AREA_ID) || '-' || DAGE_ORGANIZAT_AREA.FSBGETDISPLAY_DESCRIPTION(RCACTIVITYLOG.RECEIVER_AREA_ID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        RCRESPONSIBLEPERSON := DAGE_PERSON.FRCGETRECORD(NURESPONSIBLEPERSONID);
        UT_TRACE.TRACE('Email Persona Responsable:['||RCRESPONSIBLEPERSON.E_MAIL||']',4);

        
        IF (RCRESPONSIBLEPERSON.E_MAIL IS NULL) THEN
            ERRORS.SETERROR(CNUWITHOUTEMAIL, TO_CHAR(RCRESPONSIBLEPERSON.PERSON_ID) || '-' || RCRESPONSIBLEPERSON.NAME_);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        GE_BONOTIFICATION.SETATTRIBUTE(SBINPUT, 'ACTIVITY_LOG_ID', INUACTIVITYLOGID);

        
        GE_BONOTIFICATION.REGISTERTONOTIFY(
                                    INUNOTIFICATIONID,
                                    INUMODULEID,
                                    SBINPUT,
                                    INUACTIVITYLOGID,
                                    NUNOTIFICATIONLOGID,
                                    NUERRORCODE,
                                    SBERRORMESSAGE
                                    );
        
        IF (NVL(NUERRORCODE,MO_BOCONSTANTS.CNUOK) <> MO_BOCONSTANTS.CNUOK) THEN
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        UT_TRACE.TRACE('Log Notificaci�n:['||NUNOTIFICATIONLOGID||']',4);

        
        DAMO_ACTIVITY_LOG.UPDNOTIFICATION_LOG_ID(INUACTIVITYLOGID, NUNOTIFICATIONLOGID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSNOTIFICATION;
    
    






































    PROCEDURE PROCESSCREATEADMINACTIVITY
    (
        INUENTITYID         IN MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE,
        INUEXTERNALID       IN MO_ADMIN_ACTIVITY.EXTERNAL_ID%TYPE,
        INUWFINTERFACID     IN MO_ADMIN_ACTIVITY.WF_INTERFAC_ID%TYPE,
        INUUNITTYPEID       IN MO_ADMIN_ACTIVITY.UNIT_TYPE_ID%TYPE,
        INUPRIORITYID       IN MO_ADMIN_ACTIVITY.PRIORITY_ID%TYPE,
        INUSOURCEPERSONID   IN MO_ACTIVITY_LOG.SOURCE_PERSON_ID%TYPE,
        ONUADMINACTIVITYID  OUT MO_ADMIN_ACTIVITY.ADMIN_ACTIVITY_ID%TYPE,
        ISBCOMMENT          IN MO_ACTIVITY_LOG.COMMENT_%TYPE DEFAULT NULL,
        INUCOMMENTTYPEID    IN MO_ACTIVITY_LOG.COMMENT_TYPE_ID%TYPE DEFAULT NULL
    )
    IS
        NUPRIORITYID            MO_ADMIN_ACTIVITY.PRIORITY_ID%TYPE;
        NUATTENTIONLIMITTIME    MO_TIME_UNI_TYP_PRIO.ATTENTION_LIMIT_TIME%TYPE;
        DTSYSDATE               DATE := SYSDATE;
        NUNOTIFICATIONLOGID     GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;
        NUACTIVITYLOGID         MO_ACTIVITY_LOG.ACTIVITY_LOG_ID%TYPE;
        NUORGANIZATAREAID       GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE;
        NURESPONSIBLEPERSONID   GE_ORGA_AREA_ADD_DATA.PERSON_ID%TYPE;
        SBCOMMENT               MO_ACTIVITY_LOG.COMMENT_%TYPE;
        NUCOMMENTTYPEID         MO_ACTIVITY_LOG.COMMENT_TYPE_ID%TYPE;
        NUCURRORGANIZATAREAID   GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE;
        NUMODULEID              GE_MODULE.MODULE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.ProcessCreateAdminActivity. Id Externo:['||INUEXTERNALID||']Entidad:['||INUENTITYID||']',3);
        UT_TRACE.TRACE('Tipo Proceso:['||INUUNITTYPEID||']Prioridad:['||INUPRIORITYID||']Pers Ori:['||INUSOURCEPERSONID||']Tipo Obser:['||INUCOMMENTTYPEID||']',3);
        
        
        NUPRIORITYID := DAWF_UNIT_TYPE.FNUGETDEFAULT_PRIORITY_ID(INUUNITTYPEID);

        
        NUPRIORITYID :=  NVL(INUPRIORITYID,NUPRIORITYID);
        UT_TRACE.TRACE('Prioridad:['||NUPRIORITYID||']',4);

        
        DAGE_PRIORITY.ACCKEY(NUPRIORITYID);
        
        
        NUORGANIZATAREAID := FNUGETORGANIZATAREABYUNITTYPE(INUENTITYID, INUEXTERNALID, INUUNITTYPEID);

        
        IF (DAGE_ORGA_AREA_ADD_DATA.FBLEXIST(NUORGANIZATAREAID)) THEN
            NURESPONSIBLEPERSONID := DAGE_ORGA_AREA_ADD_DATA.FNUGETPERSON_ID(NUORGANIZATAREAID);
        END IF;
        UT_TRACE.TRACE('Persona Reponsable Area:['||NURESPONSIBLEPERSONID||']',4);

        
        IF (NURESPONSIBLEPERSONID IS NULL) THEN
            ERRORS.SETERROR(CNUWITHOUTRESPONSIBLE, TO_CHAR(NUORGANIZATAREAID) || '-' || DAGE_ORGANIZAT_AREA.FSBGETDISPLAY_DESCRIPTION(NUORGANIZATAREAID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        FOR REC IN MO_BCTIME_UNI_TYP_PRIO.CUTIMEUNITYPEPRIO(INUUNITTYPEID, NUPRIORITYID) LOOP
            NUATTENTIONLIMITTIME := REC.ATTENTION_LIMIT_TIME;
        END LOOP;
        UT_TRACE.TRACE('Tiempo L�mite Atenci�n:['||NUATTENTIONLIMITTIME||']',4);

        
        IF (NUATTENTIONLIMITTIME IS NULL) THEN
            ERRORS.SETERROR (
                            CNUTIMESCONFNOTEXIST,
                            TO_CHAR(INUUNITTYPEID) || '-' || DAWF_UNIT_TYPE.FSBGETDESCRIPTION(INUUNITTYPEID)
                            || '|' || TO_CHAR(NUPRIORITYID) || '-' || DAGE_PRIORITY.FSBGETDESCRIPTION(NUPRIORITYID)
                            );
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        GE_BOPERSONAL.GETCURRENTCHANNEL(INUSOURCEPERSONID, NUCURRORGANIZATAREAID);
        
        
        INSERTADMINACTIVITY (
                            INUENTITYID,
                            INUEXTERNALID,
                            INUUNITTYPEID,
                            NUPRIORITYID,
                            DTSYSDATE + NUATTENTIONLIMITTIME,
                            ONUADMINACTIVITYID,
                            DTSYSDATE,
                            INUWFINTERFACID
                            );

        NUCOMMENTTYPEID := NVL(INUCOMMENTTYPEID, CNUCOMMTYPEGENERADMPROC);
        SBCOMMENT := NVL(ISBCOMMENT, DAGE_MESSAGE.FSBGETDESCRIPTION(CNUINITIALASSIGN));

        
        PROCESSINSERACTIVITYLOG (
                                ONUADMINACTIVITYID,
                                CNUACTASSIGNADMINPROCESS,
                                INUSOURCEPERSONID,
                                NUCURRORGANIZATAREAID,
                                NURESPONSIBLEPERSONID,
                                NUORGANIZATAREAID,
                                DTSYSDATE,
                                NUCOMMENTTYPEID,
                                SBCOMMENT,
                                DTSYSDATE + NUATTENTIONLIMITTIME,
                                NUNOTIFICATIONLOGID,
                                NUACTIVITYLOGID

                                );
        
        GETNOTIFICATIONFORASSIGN(INUENTITYID, INUUNITTYPEID, NUNOTIFICATIONLOGID,NUMODULEID);

        
        GBOFIRSTASSIGN := TRUE;
        
        
        PROCESSNOTIFICATION(NUACTIVITYLOGID, NUNOTIFICATIONLOGID,NUMODULEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSCREATEADMINACTIVITY;


    PROCEDURE ACTIONATTENDADMINPROCESS
    IS
        NUEXTERNALID            MO_ADMIN_ACTIVITY.EXTERNAL_ID%TYPE;
        NUENTITYID              MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE;
        NUACTIVITYID            WF_INSTANCE.INSTANCE_ID%TYPE;
        NUWFINTERFACID          MO_ADMIN_ACTIVITY.WF_INTERFAC_ID%TYPE;
        NUUNITTYPEID            WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE;
        NUPRIORITYID            GE_PRIORITY.PRIORITY_ID%TYPE;
        NUPERSONID              MO_PACKAGES.PERSON_ID%TYPE;
        NUADMINACTIVITYID       MO_ADMIN_ACTIVITY.ADMIN_ACTIVITY_ID%TYPE;

        BLFOUND             BOOLEAN := FALSE;
	BEGIN
        
        GE_BOINSTANCE.GETVALUE( MO_BOCONSTANTS.CSBMO_COMPONENT, MO_BOCONSTANTS.CSBCOMPONENT_ID, NUEXTERNALID );
        IF (NUEXTERNALID IS NOT NULL) THEN

            NUENTITYID := MO_BOPARAMETER.FNUGETENTITY_COMPONENT;
            GE_BOINSTANCE.GETVALUE( MO_BOCONSTANTS.CSBMO_WF_COMP_INTERFAC, MO_BOCONSTANTS.CSBACTIVITY_ID, NUACTIVITYID );
            GE_BOINSTANCE.GETVALUE( MO_BOCONSTANTS.CSBMO_WF_COMP_INTERFAC, 'WF_COMP_INTERFAC_ID', NUWFINTERFACID );
            NUPRIORITYID := DAMO_PACKAGES.FNUGETPRIORITY_ID(DAMO_COMPONENT.FNUGETPACKAGE_ID(NUEXTERNALID));
            NUPERSONID := DAMO_PACKAGES.FNUGETPERSON_ID(DAMO_COMPONENT.FNUGETPACKAGE_ID(NUEXTERNALID));

            BLFOUND := TRUE;
        END IF;

        
        IF (NOT BLFOUND) THEN

            
            GE_BOINSTANCE.GETVALUE( MO_BOCONSTANTS.CSBMO_MOTIVE, MO_BOCONSTANTS.CSBMOTIVE_ID, NUEXTERNALID );

            IF (NUEXTERNALID IS NOT NULL) THEN

                NUENTITYID := MO_BOPARAMETER.FNUGETENTITY_MOTIVE;
                GE_BOINSTANCE.GETVALUE( MO_BOCONSTANTS.CSBMO_WF_MOTIV_INTERFAC, MO_BOCONSTANTS.CSBACTIVITY_ID, NUACTIVITYID );
                GE_BOINSTANCE.GETVALUE( MO_BOCONSTANTS.CSBMO_WF_MOTIV_INTERFAC, 'WF_MOTIV_INTERFAC_ID', NUWFINTERFACID );
                NUPRIORITYID := DAMO_PACKAGES.FNUGETPRIORITY_ID(DAMO_MOTIVE.FNUGETPACKAGE_ID(NUEXTERNALID));
                NUPERSONID := DAMO_PACKAGES.FNUGETPERSON_ID(DAMO_MOTIVE.FNUGETPACKAGE_ID(NUEXTERNALID));

                BLFOUND := TRUE;
            END IF;
        END IF;

        
        IF (NOT BLFOUND) THEN

            
            GE_BOINSTANCE.GETVALUE( MO_BOCONSTANTS.CSBMO_PACKAGES, MO_BOCONSTANTS.CSBPACKAGE_ID, NUEXTERNALID );

            IF (NUEXTERNALID IS NOT NULL) THEN

                NUENTITYID := MO_BOPARAMETER.FNUGETENTITY_PACKAGES;
                GE_BOINSTANCE.GETVALUE( MO_BOCONSTANTS.CSBMO_WF_PACK_INTERFAC, MO_BOCONSTANTS.CSBACTIVITY_ID, NUACTIVITYID );
                GE_BOINSTANCE.GETVALUE( MO_BOCONSTANTS.CSBMO_WF_PACK_INTERFAC, 'WF_PACK_INTERFAC_ID', NUWFINTERFACID );
                NUPRIORITYID := DAMO_PACKAGES.FNUGETPRIORITY_ID(NUEXTERNALID);
                NUPERSONID := DAMO_PACKAGES.FNUGETPERSON_ID(NUEXTERNALID);

                BLFOUND := TRUE;
            END IF;
        END IF;
        
        
        IF(NUPERSONID IS NULL) THEN
            
            NUPERSONID := GE_BOPERSONAL.FNUGETPERSONID;
        END IF;
        
        UT_TRACE.TRACE('CC_BOAdministrativeProcess.ActionAttendAdminProcess. Id Externo:['||NUEXTERNALID||']Entidad:['||NUENTITYID||']Actividad:['||NUACTIVITYID||']',2);

        
        IF (NOT BLFOUND) THEN
            ERRORS.SETERROR(MO_BOCONSTERROR.CNUERRVALUESINSTNOEXIST);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        NUUNITTYPEID := DAWF_INSTANCE.FNUGETUNIT_TYPE_ID(NUACTIVITYID);

        
        PROCESSCREATEADMINACTIVITY  (
                                    NUENTITYID,
                                    NUEXTERNALID,
                                    NUWFINTERFACID,
                                    NUUNITTYPEID,
                                    NUPRIORITYID,
                                    NUPERSONID,
                                    NUADMINACTIVITYID
                                    );

        
        MO_BOACTIONUTIL.SETEXECACTIONINSTANDBY(TRUE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ACTIONATTENDADMINPROCESS;

    




































    PROCEDURE PROCESSASSIGNADMINACTIVITY
    (
        INUADMINACTIVITYID      IN MO_ACTIVITY_LOG.ADMIN_ACTIVITY_ID%TYPE,
        INUSOURCEPERSONID       IN MO_ACTIVITY_LOG.SOURCE_PERSON_ID%TYPE,
        INUSOURCEAREAID         IN MO_ACTIVITY_LOG.SOURCE_AREA_ID%TYPE,
        INURECEIVERPERSONID     IN MO_ACTIVITY_LOG.RECEIVER_PERSON_ID%TYPE,
        INURECEIVERAREAID       IN MO_ACTIVITY_LOG.RECEIVER_AREA_ID%TYPE,
        INUCOMMENTTYPEID        IN MO_ACTIVITY_LOG.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT              IN MO_ACTIVITY_LOG.COMMENT_%TYPE,
        IDTLIMITDATE            IN MO_ACTIVITY_LOG.LIMIT_DATE%TYPE,
        NUACTIONID              IN MO_ACTIVITY_LOG.ACTION_ID%TYPE DEFAULT NULL
    )
    IS
        RCADMINACTIVITY     DAMO_ADMIN_ACTIVITY.STYMO_ADMIN_ACTIVITY;
        DTSYSDATE           DATE := SYSDATE;
        NUNOTIFICATIONLOGID GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;
        NUACTIVITYLOGID     MO_ACTIVITY_LOG.ACTIVITY_LOG_ID%TYPE;
        NUUNITTYPEID        MO_ADMIN_ACTIVITY.UNIT_TYPE_ID%TYPE;
        NUMODULEID          GE_MODULE.MODULE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.ProcessAssignAdminActivity. Proceso Admin:['||INUADMINACTIVITYID||']',3);
        
        
        RCADMINACTIVITY := DAMO_ADMIN_ACTIVITY.FRCGETRECORD(INUADMINACTIVITYID);
        UT_TRACE.TRACE('Fecha Atenci�n:['||RCADMINACTIVITY.ATTENTION_DATE||']',4);
        
        
        IF (RCADMINACTIVITY.ATTENTION_DATE IS NOT NULL) THEN
            ERRORS.SETERROR(CNUSTATUSNOTVALID, TO_CHAR(INUADMINACTIVITYID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fecha L�mite:['||RCADMINACTIVITY.LIMIT_ATTEND_DATE||']Fecha L�mite Nueva:['||IDTLIMITDATE||']',4);
        
        IF (TRUNC(IDTLIMITDATE) < TRUNC(DTSYSDATE)) THEN
            ERRORS.SETERROR(CNULIMITDATELOWER);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (TRUNC(RCADMINACTIVITY.LIMIT_ATTEND_DATE) > TRUNC(DTSYSDATE)) THEN

            IF (TRUNC(IDTLIMITDATE) > TRUNC(RCADMINACTIVITY.LIMIT_ATTEND_DATE)) THEN
                ERRORS.SETERROR(CNULIMITDATEGREATER, TO_CHAR(RCADMINACTIVITY.LIMIT_ATTEND_DATE));
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        
        PROCESSINSERACTIVITYLOG (
                                INUADMINACTIVITYID,
                                NVL(NUACTIONID,CNUACTASSIGNADMINPROCESS),
                                INUSOURCEPERSONID,
                                INUSOURCEAREAID,
                                INURECEIVERPERSONID,
                                INURECEIVERAREAID,
                                DTSYSDATE,
                                INUCOMMENTTYPEID,
                                ISBCOMMENT,
                                IDTLIMITDATE,
                                NUNOTIFICATIONLOGID,
                                NUACTIVITYLOGID
                                );
        
        IF (INUADMINACTIVITYID IS NOT NULL) THEN
            NUUNITTYPEID := DAMO_ADMIN_ACTIVITY.FNUGETUNIT_TYPE_ID(INUADMINACTIVITYID);
        END IF;
        
        GETNOTIFICATIONFORASSIGN(RCADMINACTIVITY.ENTITY_ID, NUUNITTYPEID, NUNOTIFICATIONLOGID,NUMODULEID);

        
        GBOFIRSTASSIGN := FALSE;

        
        PROCESSNOTIFICATION(NUACTIVITYLOGID, NUNOTIFICATIONLOGID,NUMODULEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSASSIGNADMINACTIVITY;


    















    PROCEDURE NOTIFYFINISHPROCESS
    (
        INUEXTERNALID   IN MO_ADMIN_ACTIVITY.EXTERNAL_ID%TYPE,
        INUENTITYID     IN MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE,
        INUWFINTERFACID IN MO_ADMIN_ACTIVITY.WF_INTERFAC_ID%TYPE
    )
    IS
        RCWFPACKINTERFAC    DAMO_WF_PACK_INTERFAC.STYMO_WF_PACK_INTERFAC;
        RCWFMOTIVINTERFAC   DAMO_WF_MOTIV_INTERFAC.STYMO_WF_MOTIV_INTERFAC;
        RCWFCOMPINTERFAC    DAMO_WF_COMP_INTERFAC.STYMO_WF_COMP_INTERFAC;
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.NotifyFinishProcess Entidad:['||INUENTITYID||']Id:['||INUEXTERNALID||']Interface:['||INUWFINTERFACID||']',4);
        IF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_PACKAGES) THEN

            
            MO_BOWF_PACK_INTERFAC.GETACTIVITYIDPACK(INUEXTERNALID, CNUDOADMINPROCESS, MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY, RCWFPACKINTERFAC);

            
            MO_BOWF_PACK_INTERFAC.UPDACTIVITYANDNOTIFY(INUWFINTERFACID);
        ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_MOTIVE) THEN

            
            MO_BOWF_MOTIV_INTERFAC.GETACTIVITYIDMOT(INUEXTERNALID, CNUDOADMINPROCESS, MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY, RCWFMOTIVINTERFAC);

            
            MO_BOWF_MOTIV_INTERFAC.UPDACTIVITYANDNOTIFY(INUWFINTERFACID);
        ELSE

            
            MO_BOWF_COMP_INTERFAC.GETACTIVITYIDCOMP(INUEXTERNALID, CNUDOADMINPROCESS, MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY, RCWFCOMPINTERFAC);

            
            MO_BOWF_COMP_INTERFAC.UPDACTIVITYANDNOTIFY(INUWFINTERFACID);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END NOTIFYFINISHPROCESS;


    PROCEDURE PROCESSATTENDADMINACTIVITY
    (
        INUADMINACTIVITYID      IN MO_ACTIVITY_LOG.ADMIN_ACTIVITY_ID%TYPE,
        INUSOURCEPERSONID       IN MO_ACTIVITY_LOG.SOURCE_PERSON_ID%TYPE,
        INUSOURCEAREAID         IN MO_ACTIVITY_LOG.SOURCE_AREA_ID%TYPE,
        INURECEIVERPERSONID     IN MO_ACTIVITY_LOG.RECEIVER_PERSON_ID%TYPE,
        INURECEIVERAREAID       IN MO_ACTIVITY_LOG.RECEIVER_AREA_ID%TYPE,
        INUCOMMENTTYPEID        IN MO_ACTIVITY_LOG.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT              IN MO_ACTIVITY_LOG.COMMENT_%TYPE
    )
    IS
        RCADMINACTIVITY     DAMO_ADMIN_ACTIVITY.STYMO_ADMIN_ACTIVITY;
        DTSYSDATE           DATE := SYSDATE;
        NUNOTIFICATIONLOGID GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;
        NUACTIVITYLOGID     MO_ACTIVITY_LOG.ACTIVITY_LOG_ID%TYPE;
   BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.ProcessAttendAdminActivity. Proceso Admin:['||INUADMINACTIVITYID||']',3);

        
        RCADMINACTIVITY := DAMO_ADMIN_ACTIVITY.FRCGETRECORD(INUADMINACTIVITYID);
        UT_TRACE.TRACE('Fecha Atenci�n:['||RCADMINACTIVITY.ATTENTION_DATE||']',4);

        
        IF (RCADMINACTIVITY.ATTENTION_DATE IS NOT NULL) THEN
            ERRORS.SETERROR(CNUSTATUSNOTVALID, TO_CHAR(INUADMINACTIVITYID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        PROCESSINSERACTIVITYLOG (
                                INUADMINACTIVITYID,
                                CNUACTATTENDADMINPROCESS,
                                INUSOURCEPERSONID,
                                INUSOURCEAREAID,
                                INURECEIVERPERSONID,
                                INURECEIVERAREAID,
                                DTSYSDATE,
                                INUCOMMENTTYPEID,
                                ISBCOMMENT,
                                DTSYSDATE,
                                NUNOTIFICATIONLOGID,
                                NUACTIVITYLOGID
                                );

        
        DAMO_ADMIN_ACTIVITY.UPDATTENTION_DATE(INUADMINACTIVITYID, DTSYSDATE);
        
        
        IF (RCADMINACTIVITY.WF_INTERFAC_ID IS NOT NULL) THEN

            
            NOTIFYFINISHPROCESS(RCADMINACTIVITY.EXTERNAL_ID, RCADMINACTIVITY.ENTITY_ID, RCADMINACTIVITY.WF_INTERFAC_ID);
        END IF;

        
        GETNOTIFICATIONFORATTEND(RCADMINACTIVITY.ENTITY_ID, NUNOTIFICATIONLOGID);

        
        PROCESSNOTIFICATION(NUACTIVITYLOGID, NUNOTIFICATIONLOGID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSATTENDADMINACTIVITY;


    















    PROCEDURE GETNOTIFICATIONFORREMINDER
    (
        INUENTITYID             IN MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE,
        ONUNOTIFICATIONLOGID    OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE
    )
    IS
    BEGIN
        IF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_PACKAGES) THEN

            ONUNOTIFICATIONLOGID := 111;
        ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_MOTIVE) THEN

            ONUNOTIFICATIONLOGID := 112;
        ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_COMPONENT) THEN

            ONUNOTIFICATIONLOGID := 113;
        ELSE

            ONUNOTIFICATIONLOGID := 114;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNOTIFICATIONFORREMINDER;


    

















    PROCEDURE PROCESSBLOCKREMINDER
    (
        ITBADMIN_ACTIVITY_ID    IN DAMO_ADMIN_ACTIVITY.TYTBADMIN_ACTIVITY_ID,
        ITBLIMIT_ATTEND_DATE    IN DAMO_ADMIN_ACTIVITY.TYTBLIMIT_ATTEND_DATE,
        ITBENTITY_ID            IN DAMO_ADMIN_ACTIVITY.TYTBENTITY_ID
    )
    IS
        DTSYSDATE           DATE := SYSDATE;
        NUNOTIFICATIONLOGID GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;
        NUACTIVITYLOGID     MO_ACTIVITY_LOG.ACTIVITY_LOG_ID%TYPE;
        DTLIMITDATE         MO_ACTIVITY_LOG.LIMIT_DATE%TYPE;
    BEGIN
        IF (ITBADMIN_ACTIVITY_ID.COUNT = 0) THEN
            RETURN;
        END IF;

    	FOR NUINDEX IN ITBADMIN_ACTIVITY_ID.FIRST..ITBADMIN_ACTIVITY_ID.LAST LOOP
            UT_TRACE.TRACE('Proceso Administrativo:['||ITBADMIN_ACTIVITY_ID(NUINDEX)||']Fecha:['||ITBLIMIT_ATTEND_DATE(NUINDEX)||']Entidad:['||ITBENTITY_ID(NUINDEX)||']',3);

            
            FOR REC IN MO_BCACTIVITY_LOG.CULASTRECORDBYADMINACTIVITY(ITBADMIN_ACTIVITY_ID(NUINDEX)) LOOP
                NUACTIVITYLOGID := REC.ACTIVITY_LOG_ID;
                DTLIMITDATE := REC.LIMIT_DATE;
            END LOOP;
            UT_TRACE.TRACE('Hist�rico:['||NUACTIVITYLOGID||']Fecha L�mite:['||DTLIMITDATE||']',4);

            
            IF ((DTLIMITDATE > DTSYSDATE) AND (ITBLIMIT_ATTEND_DATE(NUINDEX) > DTSYSDATE)) THEN

                
                GETNOTIFICATIONFORREMINDER(ITBENTITY_ID(NUINDEX), NUNOTIFICATIONLOGID);

                
                PROCESSNOTIFICATION(NUACTIVITYLOGID, NUNOTIFICATIONLOGID);
            END IF;
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSBLOCKREMINDER;


    PROCEDURE GENNOTIFADMINACIVITYREMINDER
    IS
        NUMINVALUE          MO_ADMIN_ACTIVITY.ADMIN_ACTIVITY_ID%TYPE := 0;
        BLEXISTRECTOPROCESS BOOLEAN := FALSE;
        TBADMIN_ACTIVITY_ID DAMO_ADMIN_ACTIVITY.TYTBADMIN_ACTIVITY_ID;
        TBLIMIT_ATTEND_DATE DAMO_ADMIN_ACTIVITY.TYTBLIMIT_ATTEND_DATE;
        TBENTITY_ID         DAMO_ADMIN_ACTIVITY.TYTBENTITY_ID;
    BEGIN
        
        LOOP
            
            BLEXISTRECTOPROCESS := CC_BCADMINISTRATIVEPROCESS.FBLGETRECORDS (
                                                                            NUMINVALUE,
                                                                            CNURECORDSTOPROCESS,
                                                                            TBADMIN_ACTIVITY_ID,
                                                                            TBLIMIT_ATTEND_DATE,
                                                                            TBENTITY_ID
                                                                            );
        	UT_TRACE.TRACE('Registros Obtenidos:['||TBADMIN_ACTIVITY_ID.COUNT||']',2);

            
            PROCESSBLOCKREMINDER (TBADMIN_ACTIVITY_ID, TBLIMIT_ATTEND_DATE, TBENTITY_ID);

            
            EXIT WHEN NOT BLEXISTRECTOPROCESS;

            UT_TRACE.TRACE('Ultimo:['||TBADMIN_ACTIVITY_ID(TBADMIN_ACTIVITY_ID.LAST)||']',2);
            NUMINVALUE := TBADMIN_ACTIVITY_ID(TBADMIN_ACTIVITY_ID.LAST);
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENNOTIFADMINACIVITYREMINDER;


    















    PROCEDURE GETNOTIFICATIONFORTIMEOVER
    (
        INUENTITYID             IN MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE,
        ONUNOTIFICATIONLOGID    OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE
    )
    IS
    BEGIN
        IF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_PACKAGES) THEN

            ONUNOTIFICATIONLOGID := 115;
        ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_MOTIVE) THEN

            ONUNOTIFICATIONLOGID := 116;
        ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_COMPONENT) THEN

            ONUNOTIFICATIONLOGID := 117;
        ELSE

            ONUNOTIFICATIONLOGID := 118;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNOTIFICATIONFORTIMEOVER;


    


















    PROCEDURE PROCESSBLOCKTIMEOVER
    (
        ITBADMIN_ACTIVITY_ID    IN DAMO_ADMIN_ACTIVITY.TYTBADMIN_ACTIVITY_ID,
        ITBLIMIT_ATTEND_DATE    IN DAMO_ADMIN_ACTIVITY.TYTBLIMIT_ATTEND_DATE,
        ITBENTITY_ID            IN DAMO_ADMIN_ACTIVITY.TYTBENTITY_ID
    )
    IS
        DTSYSDATE           DATE := SYSDATE;
        NUNOTIFICATIONLOGID GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;
        NUACTIVITYLOGID     MO_ACTIVITY_LOG.ACTIVITY_LOG_ID%TYPE;
        DTLIMITDATE         MO_ACTIVITY_LOG.LIMIT_DATE%TYPE;
    BEGIN
        IF (ITBADMIN_ACTIVITY_ID.COUNT = 0) THEN
            RETURN;
        END IF;

    	FOR NUINDEX IN ITBADMIN_ACTIVITY_ID.FIRST..ITBADMIN_ACTIVITY_ID.LAST LOOP
            UT_TRACE.TRACE('Proceso Administrativo:['||ITBADMIN_ACTIVITY_ID(NUINDEX)||']Fecha:['||ITBLIMIT_ATTEND_DATE(NUINDEX)||']Entidad:['||ITBENTITY_ID(NUINDEX)||']',3);

            
            FOR REC IN MO_BCACTIVITY_LOG.CULASTRECORDBYADMINACTIVITY(ITBADMIN_ACTIVITY_ID(NUINDEX)) LOOP
                NUACTIVITYLOGID := REC.ACTIVITY_LOG_ID;
                DTLIMITDATE := REC.LIMIT_DATE;
            END LOOP;
            UT_TRACE.TRACE('Hist�rico:['||NUACTIVITYLOGID||']Fecha L�mite:['||DTLIMITDATE||']',4);

            
            IF ((DTLIMITDATE < DTSYSDATE) OR (ITBLIMIT_ATTEND_DATE(NUINDEX) < DTSYSDATE)) THEN

                
                GETNOTIFICATIONFORTIMEOVER(ITBENTITY_ID(NUINDEX), NUNOTIFICATIONLOGID);

                
                PROCESSNOTIFICATION(NUACTIVITYLOGID, NUNOTIFICATIONLOGID);
            END IF;
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSBLOCKTIMEOVER;


    PROCEDURE GENNOTIFADMINACIVITYTIMEOVER
    IS
        NUMINVALUE          MO_ADMIN_ACTIVITY.ADMIN_ACTIVITY_ID%TYPE := 0;
        BLEXISTRECTOPROCESS BOOLEAN := FALSE;
        TBADMIN_ACTIVITY_ID DAMO_ADMIN_ACTIVITY.TYTBADMIN_ACTIVITY_ID;
        TBLIMIT_ATTEND_DATE DAMO_ADMIN_ACTIVITY.TYTBLIMIT_ATTEND_DATE;
        TBENTITY_ID         DAMO_ADMIN_ACTIVITY.TYTBENTITY_ID;
    BEGIN
        
        LOOP
            
            BLEXISTRECTOPROCESS := CC_BCADMINISTRATIVEPROCESS.FBLGETRECORDS (
                                                                            NUMINVALUE,
                                                                            CNURECORDSTOPROCESS,
                                                                            TBADMIN_ACTIVITY_ID,
                                                                            TBLIMIT_ATTEND_DATE,
                                                                            TBENTITY_ID
                                                                            );
        	UT_TRACE.TRACE('Registros Obtenidos:['||TBADMIN_ACTIVITY_ID.COUNT||']',2);

            
            PROCESSBLOCKTIMEOVER (TBADMIN_ACTIVITY_ID, TBLIMIT_ATTEND_DATE, TBENTITY_ID);

            
            EXIT WHEN NOT BLEXISTRECTOPROCESS;

            UT_TRACE.TRACE('Ultimo:['||TBADMIN_ACTIVITY_ID(TBADMIN_ACTIVITY_ID.LAST)||']',2);
            NUMINVALUE := TBADMIN_ACTIVITY_ID(TBADMIN_ACTIVITY_ID.LAST);
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENNOTIFADMINACIVITYTIMEOVER;


    





















    PROCEDURE STARTJOBPROCESSADMIN
    (
        ISBPROCESSNAME  IN VARCHAR2,
        IDTINITIALDATE  IN DATE,
        INUTIMES        IN NUMBER,
        ONUJOBID        OUT NUMBER
    )
    IS
        TBJOBS  PKBIUT_JOBMGR.TTYRCUSERJOB;
        NUTIMES NUMBER(5,2);
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.StartJobProcessAdmin. Proceso:['||ISBPROCESSNAME||']Fecha:['||IDTINITIALDATE||']Veces:['||INUTIMES||']',2);

        
        PKBIUT_JOBMGR.QUERYJOB(TBJOBS, ISBPROCESSNAME);
        UT_TRACE.TRACE('Jobs Ejecutando:['||TBJOBS.COUNT||']',2);
        IF (TBJOBS.COUNT > 0) THEN
            RETURN;
        END IF;

        
        NUTIMES := NVL(INUTIMES,1);
        
        
        IF (NUTIMES = 0) THEN
            NUTIMES := 1;
        END IF;

        NUTIMES := TO_NUMBER(1 / NUTIMES);
        UT_TRACE.TRACE('Veces:['||NUTIMES||']Intervalo:['||TO_CHAR(IDTINITIALDATE + NUTIMES)||']',2);

        PKBIUT_JOBMGR.CREATEJOBVALIDATEWHATDATE (
                                                ISBPROCESSNAME,
                                                IDTINITIALDATE,
                                                'Sysdate + ' || TO_CHAR(NUTIMES),
                                                ONUJOBID
                                                );
        UT_TRACE.TRACE('Job Creado:['||ONUJOBID||']',2);
        
        COMMIT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END STARTJOBPROCESSADMIN;


    












    PROCEDURE STOPJOBPROCESSADMIN
    (
        ISBPROCESSNAME  IN VARCHAR2
    )

    IS
        TBJOBS  PKBIUT_JOBMGR.TTYRCUSERJOB;
    BEGIN
        PKBIUT_JOBMGR.QUERYJOB( TBJOBS, ISBPROCESSNAME);

        
        IF (TBJOBS.COUNT > 0) THEN
            FOR INDX IN TBJOBS.FIRST .. TBJOBS.LAST LOOP
                UT_TRACE.TRACE('Job Detenido:['||TBJOBS(INDX).JOB||']Pr�xima Fecha:['||TBJOBS(INDX).NEXT_DATE||']',2);

                PKBIUT_JOBMGR.DROPJOB(TBJOBS(INDX).JOB);
            END LOOP;
        END IF;

        COMMIT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END STOPJOBPROCESSADMIN;


    PROCEDURE STARTJOBPROCESSADMINREMINDER
    (
        IDTINITIALDATE  IN DATE,
        INUTIMES        IN NUMBER,
        ONUJOBID        OUT NUMBER
    )
    IS
        SBPROCESSNAME   VARCHAR2(500) := 'CC_BOAdministrativeProcess.GenNotifAdminAcivityReminder;';
    BEGIN
        STARTJOBPROCESSADMIN(SBPROCESSNAME, IDTINITIALDATE, INUTIMES, ONUJOBID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END STARTJOBPROCESSADMINREMINDER;


    PROCEDURE STOPJOBPROCESSADMINREMINDER
    IS
        SBPROCESSNAME   VARCHAR2(500) := 'CC_BOAdministrativeProcess.GenNotifAdminAcivityReminder;';
    BEGIN
        STOPJOBPROCESSADMIN(SBPROCESSNAME);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END STOPJOBPROCESSADMINREMINDER;


    PROCEDURE STARTJOBPROCESSADMINTIMEOVER
    (
        IDTINITIALDATE  IN DATE,
        INUTIMES        IN NUMBER,
        ONUJOBID        OUT NUMBER
    )
    IS
        SBPROCESSNAME   VARCHAR2(500) := 'CC_BOAdministrativeProcess.GenNotifAdminAcivityTimeOver;';
    BEGIN
        STARTJOBPROCESSADMIN(SBPROCESSNAME, IDTINITIALDATE, INUTIMES, ONUJOBID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END STARTJOBPROCESSADMINTIMEOVER;


    PROCEDURE STOPJOBPROCESSADMINTIMEOVER
    IS
        SBPROCESSNAME   VARCHAR2(500) := 'CC_BOAdministrativeProcess.GenNotifAdminAcivityTimeOver;';
    BEGIN
        STOPJOBPROCESSADMIN(SBPROCESSNAME);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END STOPJOBPROCESSADMINTIMEOVER;

    FUNCTION FNUGETENTITYID
    RETURN  MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE
    IS
    BEGIN
        UT_TRACE.TRACE('-- Iniciando CC_BOAdministrativeProcess.fnuGetEntityId', 5);

        RETURN  GNUENTITYID;

        UT_TRACE.TRACE('-- Finalizando  CC_BOAdministrativeProcess.fnuGetEntityId', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUGETEXTERNALID
    RETURN  MO_ADMIN_ACTIVITY.EXTERNAL_ID%TYPE
    IS
    BEGIN
        UT_TRACE.TRACE('-- Iniciando CC_BOAdministrativeProcess.fnuGetExternalId', 5);

        RETURN  GNUEXTERNALID;

        UT_TRACE.TRACE('-- Finalizando  CC_BOAdministrativeProcess.fnuGetExternalId', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUGETUNITTYPEID
    RETURN  MO_ADMIN_ACTIVITY.UNIT_TYPE_ID%TYPE
    IS
    BEGIN
        UT_TRACE.TRACE('-- Iniciando CC_BOAdministrativeProcess.fnuGetUnitTypeId', 5);

        RETURN  GNUUNITTYPEID;

        UT_TRACE.TRACE('-- Finalizando  CC_BOAdministrativeProcess.fnuGetUnitTypeId', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    















    PROCEDURE GETNOTIFICATIONFORANNUL
    (
        INUENTITYID             IN MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE,
        ONUNOTIFICATIONLOGID    OUT GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE
    )
    IS
    BEGIN
        IF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_PACKAGES) THEN

            ONUNOTIFICATIONLOGID := 95;
        ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_MOTIVE) THEN

            ONUNOTIFICATIONLOGID := 96;
        ELSIF (INUENTITYID = MO_BOPARAMETER.FNUGETENTITY_COMPONENT) THEN

            ONUNOTIFICATIONLOGID := 97;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNOTIFICATIONFORANNUL;

    PROCEDURE PROCESSANNULADMINACTIVITY
    (
        INUENTITYID         IN MO_ADMIN_ACTIVITY.ENTITY_ID%TYPE,
        INUEXTERNALID       IN MO_ADMIN_ACTIVITY.EXTERNAL_ID%TYPE,
        INUSOURCEPERSONID   IN MO_ACTIVITY_LOG.SOURCE_PERSON_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN MO_ACTIVITY_LOG.COMMENT_%TYPE DEFAULT NULL,
        INUCOMMENTTYPEID    IN MO_ACTIVITY_LOG.COMMENT_TYPE_ID%TYPE DEFAULT NULL
    )
    IS
        DTSYSDATE               DATE := SYSDATE;
        NUNOTIFICATIONLOGID     GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;
        NUACTIVITYLOGID         MO_ACTIVITY_LOG.ACTIVITY_LOG_ID%TYPE;
        SBCOMMENT               MO_ACTIVITY_LOG.COMMENT_%TYPE;
        NUCOMMENTTYPEID         MO_ACTIVITY_LOG.COMMENT_TYPE_ID%TYPE;
        RCACTIVITYLOG           DAMO_ACTIVITY_LOG.STYMO_ACTIVITY_LOG;
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.ProcessAnnulAdminActivity. Id Externo:['||INUEXTERNALID||']Entidad:['||INUENTITYID||']',3);
        UT_TRACE.TRACE('Pers Ori:['||INUSOURCEPERSONID||']Tipo Obser:['||INUCOMMENTTYPEID||']',3);

        
        FOR RCADMINACTIVITY IN MO_BCADMIN_ACTIVITY.CUADMINACTIVITYBYENTITYID(INUENTITYID, INUEXTERNALID) LOOP
            IF (RCADMINACTIVITY.ATTENTION_DATE IS NULL) THEN 
                
                RCADMINACTIVITY.ATTENTION_DATE := DTSYSDATE;
                DAMO_ADMIN_ACTIVITY.UPDRECORD(RCADMINACTIVITY);

                
                
                FOR RCLASTLOG IN MO_BCACTIVITY_LOG.CULASTRECORDBYADMINACTIVITY(RCADMINACTIVITY.ADMIN_ACTIVITY_ID) LOOP

                    NUCOMMENTTYPEID := NVL(INUCOMMENTTYPEID, CNUCOMMTYPEGENERADMPROC);
                    SBCOMMENT := NVL(ISBCOMMENT, DAGE_MESSAGE.FSBGETDESCRIPTION(CNUANNULASSIGN));

                    
                    RCACTIVITYLOG := DAMO_ACTIVITY_LOG.FRCGETRECORD(RCLASTLOG.ACTIVITY_LOG_ID);

                    PROCESSINSERACTIVITYLOG (RCADMINACTIVITY.ADMIN_ACTIVITY_ID,
                                             CNUACTANNULADMINPROCESS,
                                             RCACTIVITYLOG.SOURCE_PERSON_ID,
                                             RCACTIVITYLOG.SOURCE_AREA_ID,
                                             RCACTIVITYLOG.RECEIVER_PERSON_ID,
                                             RCACTIVITYLOG.RECEIVER_AREA_ID,
                                             DTSYSDATE,
                                             NUCOMMENTTYPEID,
                                             SBCOMMENT,
                                             RCLASTLOG.LIMIT_DATE,
                                             NUNOTIFICATIONLOGID,
                                             NUACTIVITYLOGID);
                                             
                    
                    GETNOTIFICATIONFORANNUL(INUENTITYID, NUNOTIFICATIONLOGID);

                    
                    PROCESSNOTIFICATION(NUACTIVITYLOGID, NUNOTIFICATIONLOGID);
                    
                END LOOP; 
            END IF; 
        END LOOP; 

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSANNULADMINACTIVITY;

    PROCEDURE UPDPACKAGEPRIORITY
    (
        INUPACKAGEID        MO_PACKAGES.PACKAGE_ID%TYPE,
        INUNEWPRIORITYID    MO_PACKAGES.PRIORITY_ID%TYPE
    )
    IS
    NUCURRENTPRIORITY       MO_PACKAGES.PRIORITY_ID%TYPE;
    NUATTENTIONLIMITTIME    MO_TIME_UNI_TYP_PRIO.ATTENTION_LIMIT_TIME%TYPE := NULL;
    RCCURRENTLOG            DAMO_ACTIVITY_LOG.STYMO_ACTIVITY_LOG;
    BEGIN
    
    DAMO_PACKAGES.ACCKEY(INUPACKAGEID);
    
    NUCURRENTPRIORITY := DAMO_PACKAGES.FNUGETPRIORITY_ID(INUPACKAGEID);
    
    IF NUCURRENTPRIORITY = INUNEWPRIORITYID THEN
        ERRORS.SETERROR(CNUSAMEPRIORITY);
        RAISE EX.CONTROLLED_ERROR;
    ELSE
        
        DAGE_PRIORITY.ACCKEY(INUNEWPRIORITYID);
        
        DAMO_PACKAGES.UPDPRIORITY_ID(INUPACKAGEID, INUNEWPRIORITYID);

        
        FOR RC IN CC_BCADMINISTRATIVEPROCESS.CUADMINACTBYPACK(INUPACKAGEID) LOOP
            
            IF RC.PRIORITY_ID <> INUNEWPRIORITYID THEN
                
                DAMO_ADMIN_ACTIVITY.UPDPRIORITY_ID(RC.ADMIN_ACTIVITY_ID,INUNEWPRIORITYID);
                
                FOR REC IN MO_BCTIME_UNI_TYP_PRIO.CUTIMEUNITYPEPRIO(RC.UNIT_TYPE_ID, INUNEWPRIORITYID) LOOP
                    NUATTENTIONLIMITTIME := REC.ATTENTION_LIMIT_TIME;
                END LOOP;
                
                IF (NUATTENTIONLIMITTIME IS NULL) THEN
                    ERRORS.SETERROR (
                                    CNUTIMESCONFNOTEXIST,
                                    TO_CHAR(RC.UNIT_TYPE_ID) || '-' || DAWF_UNIT_TYPE.FSBGETDESCRIPTION(RC.UNIT_TYPE_ID)
                                    || '|' || TO_CHAR(INUNEWPRIORITYID) || '-' || DAGE_PRIORITY.FSBGETDESCRIPTION(INUNEWPRIORITYID)
                                    );
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

                
                DAMO_ADMIN_ACTIVITY.UPDLIMIT_ATTEND_DATE(RC.ADMIN_ACTIVITY_ID, RC.REGISTER_DATE + NUATTENTIONLIMITTIME);

                
                RCCURRENTLOG := CC_BCOSSADMACTDATA.FRCGETCURRENTLOG(RC.ADMIN_ACTIVITY_ID);
                
                IF RCCURRENTLOG.LIMIT_DATE > RC.LIMIT_ATTEND_DATE THEN
                    DAMO_ACTIVITY_LOG.UPDLIMIT_DATE(RCCURRENTLOG.ACTIVITY_LOG_ID,RC.LIMIT_ATTEND_DATE);
                END IF;

                
                PROCESSNOTIFICATION(RCCURRENTLOG.ACTIVITY_LOG_ID, CNUUPDPACKNOTIFID);
            END IF;
        END LOOP;
    END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

    



    PROCEDURE PROCESSATTENDCOMPLAINT
    (
        INUEXTERNALID       IN MO_ADMIN_ACTIVITY.EXTERNAL_ID%TYPE,
        IDTATTENTIONDATE    IN MO_PACKAGES.ATTENTION_DATE%TYPE,
        INUATTENDPERSONID   IN GE_PERSON.PERSON_ID%TYPE,
        INUCOMMENTTYPEID    IN GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT          IN MO_ACTIVITY_LOG.COMMENT_%TYPE,
        INUADMINACTIVITYID  IN MO_ADMIN_ACTIVITY.ADMIN_ACTIVITY_ID%TYPE
    )
    IS
        RCMOCOMMENT         DAMO_COMMENT.STYMO_COMMENT;
        NUASIGORGAAREA      GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE := NULL;
        RCFIRSTLOG          DAMO_ACTIVITY_LOG.STYMO_ACTIVITY_LOG;
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.ProcessAttendComplaint. Id Externo:['||INUEXTERNALID||']', 5);
        UT_TRACE.TRACE('Pers Atiende:['||INUATTENDPERSONID||']Tipo Obser:['||INUCOMMENTTYPEID||'] Id Proceso Administrativo ['||INUADMINACTIVITYID||']', 5);

        
        RCMOCOMMENT.COMMENT_ID      := MO_BOSEQUENCES.FNUGETCOMMENTID;
        RCMOCOMMENT.COMMENT_        := ISBCOMMENT;
        RCMOCOMMENT.COMMENT_TYPE_ID := INUCOMMENTTYPEID;
        RCMOCOMMENT.MOTIVE_ID       := INUEXTERNALID;
        RCMOCOMMENT.PERSON_ID       := INUATTENDPERSONID;
        RCMOCOMMENT.REGISTER_DATE   := SYSDATE;
        DAMO_COMMENT.INSRECORD(RCMOCOMMENT);
        UT_TRACE.TRACE('Observaci�n creada ['||RCMOCOMMENT.COMMENT_ID||']', 5);

        
        GE_BOPERSONAL.GETCURRENTCHANNEL(INUATTENDPERSONID, NUASIGORGAAREA);
        
        
        IF (NUASIGORGAAREA IS NULL) THEN
            NUASIGORGAAREA := DAGE_PERSON.FNUGETORGANIZAT_AREA_ID(INUATTENDPERSONID);
        END IF;
        
        UT_TRACE.TRACE('Canal actual de funcionario que atiende el proceso ['||NUASIGORGAAREA||']', 5);
        
        IF (NUASIGORGAAREA IS NULL) THEN
            ERRORS.SETERROR(CNUNOTAREAFORPERSON, TO_CHAR(INUATTENDPERSONID));
            RAISE EX.CONTROLLED_ERROR;
        ELSE
            
            RCFIRSTLOG := MO_BCACTIVITY_LOG.FRCGETFIRSTADMINLOG(INUADMINACTIVITYID);
            
            PROCESSATTENDADMINACTIVITY(
                                        INUADMINACTIVITYID,
                                        INUATTENDPERSONID,
                                        NUASIGORGAAREA,
                                        RCFIRSTLOG.SOURCE_PERSON_ID,
                                        RCFIRSTLOG.SOURCE_AREA_ID,
                                        INUCOMMENTTYPEID,
                                        ISBCOMMENT
                                      );
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSATTENDCOMPLAINT;
    

    




















    PROCEDURE PROCUNASSIGNADMINACT
    (
        INUADMINACTIVITYID  IN MO_ADMIN_ACTIVITY.ADMIN_ACTIVITY_ID%TYPE,
        INUSOURCEPERSONID   IN MO_ACTIVITY_LOG.SOURCE_PERSON_ID%TYPE,
        INUSOURCEAREAID     IN MO_ACTIVITY_LOG.SOURCE_AREA_ID%TYPE,
        INURECEIVERAREAID   IN MO_ACTIVITY_LOG.RECEIVER_AREA_ID%TYPE,
        INUCOMMENTTYPEID    IN GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT          IN MO_ACTIVITY_LOG.COMMENT_%TYPE,
        IDTLIMITDATE        IN MO_ACTIVITY_LOG.LIMIT_DATE%TYPE
    )
    IS
        NURESPPERSON    GE_PERSON.PERSON_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.ProcUnAssignAdminAct. Proceo Administrativo:['||INUADMINACTIVITYID||']', 5);
        UT_TRACE.TRACE('Pers Origen:['||INUSOURCEPERSONID||'] Area Origen:['||INUSOURCEAREAID||'] Tipo Obser:['||INUCOMMENTTYPEID||'] ', 5);
        UT_TRACE.TRACE('Area destino:['||INURECEIVERAREAID||'] Comentario:['||ISBCOMMENT||'] Fecha L�mite:['||IDTLIMITDATE||'] ', 5);

        
        NURESPPERSON := DAGE_ORGA_AREA_ADD_DATA.FNUGETPERSON_ID(INURECEIVERAREAID);
        UT_TRACE.TRACE('Responsable del �rea ['||NURESPPERSON||']', 5);
        
        
        PROCESSASSIGNADMINACTIVITY
        (
            INUADMINACTIVITYID,
            INUSOURCEPERSONID,
            INUSOURCEAREAID,
            NURESPPERSON,
            INURECEIVERAREAID,
            INUCOMMENTTYPEID,
            ISBCOMMENT,
            IDTLIMITDATE,
            CNUACTUNASSIGNADMPROC
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCUNASSIGNADMINACT;


    FUNCTION FNUGETACTIONID
    (
        ISBACTIONDESC GE_ACTION_MODULE.DESCRIPTION%TYPE
    )
    RETURN  GE_ACTION_MODULE.ACTION_ID%TYPE
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.fnuGetActionId. Acci�n:['||ISBACTIONDESC||']', 5);

        
        IF (ISBACTIONDESC = 'Asignaci�n') THEN
            RETURN CC_BOADMINISTRATIVEPROCESS.CNUACTASSIGNADMINPROCESS;
        ELSIF (ISBACTIONDESC = 'Atenci�n') THEN
            RETURN CC_BOADMINISTRATIVEPROCESS.CNUACTATTENDADMINPROCESS;
        ELSIF (ISBACTIONDESC = 'Desasignaci�n') THEN
            RETURN CC_BOADMINISTRATIVEPROCESS.CNUACTUNASSIGNADMPROC;
        END IF;
        
        UT_TRACE.TRACE('Fin de CC_BOAdministrativeProcess.fnuGetActionId.', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETACTIONID;

    FUNCTION FNUGETADMPROCMODULEID
    RETURN  GE_MODULE.MODULE_ID%TYPE
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOAdministrativeProcess.fnuGetAdmProcModuleId ', 5);

        
        RETURN CC_BOADMINISTRATIVEPROCESS.CNUADMPROCESSMODULEID;

        UT_TRACE.TRACE('Fin de CC_BOAdministrativeProcess.fnuGetAdmProcModuleId ', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETADMPROCMODULEID;


END CC_BOADMINISTRATIVEPROCESS;