PACKAGE PM_BOFWMassiveOrders IS


































































	

	

	

    
    FUNCTION FSBVERSION  RETURN VARCHAR2;
    
    



    PROCEDURE GETORDERSBYPROJECT
    (
        INUPROJECTID    IN  PM_PROJECT.PROJECT_ID%TYPE,
        ORFCURSOR       OUT CONSTANTS.TYREFCURSOR
    );

    



    PROCEDURE GETORDNOANULLBYPRO
    (
        INUPROJECTID    IN  PM_PROJECT.PROJECT_ID%TYPE,
        ORFCURSOR       OUT CONSTANTS.TYREFCURSOR
    );
    
    



    PROCEDURE GETSTAGENOTFINISH
    (
        INUPROJECTID    IN  PM_PROJECT.PROJECT_ID%TYPE,
        ORFCURSOR       OUT CONSTANTS.TYREFCURSOR
    );
    
    
    FUNCTION FRFGETORDERSPMANO
    RETURN CONSTANTS.TYREFCURSOR;
    
    PROCEDURE PROCESSPMANO
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    );
    
    FUNCTION FRFGETORDERSPMAOR
    RETURN CONSTANTS.TYREFCURSOR;
    
    PROCEDURE PROCESSPMAOR
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    );
    
    FUNCTION FRFGETORDERSPMROR
    RETURN CONSTANTS.TYREFCURSOR;
    
    PROCEDURE PROCESSPMROR
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    );
    
    FUNCTION FRFGETORDERSPMRDS
    RETURN CONSTANTS.TYREFCURSOR;
    
    PROCEDURE PROCESSPMRDS
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    );
    
    FUNCTION FRFGETORDERSPMEDS
    RETURN CONSTANTS.TYREFCURSOR;
    
    PROCEDURE PROCESSPMEDS
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    );
    
    
    
    
    PROCEDURE GETCOMMENTSTYPE
    (
        ORFRESULT   IN OUT NOCOPY CONSTANTS.TYREFCURSOR
    );

END PM_BOFWMASSIVEORDERS;

PACKAGE BODY PM_BOFWMassiveOrders IS

































































	
    CSBVERSION          CONSTANT VARCHAR2(20) := 'SAO199354';
    
    
    CNUNULL_ATTRIBUTE   CONSTANT NUMBER := 2126;
    
    
    
    GNUTASKTYPEID       PM_STAGE_TASK_TYPE.TASK_TYPE_ID%TYPE;
    
    GNUOPERUNITID       OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
    
    GNUNEWOPERUNITID    OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
    
    GNUCAUSAL           GE_CAUSAL.CAUSAL_ID%TYPE;
    
    GNUCOMMENTTYPE      OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE;
    
    GSBORDERCOMMENT     OR_ORDER_COMMENT.ORDER_COMMENT%TYPE;
    
    GDTSTARDATE         PM_STAGE.ESTIMATE_INI_DATE%TYPE;

    
    
    
    
    
	
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


    














    PROCEDURE GETORDERSBYPROJECT
    (
        INUPROJECTID    IN  PM_PROJECT.PROJECT_ID%TYPE,
        ORFCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN
        UT_TRACE.TRACE('Inicia PM_BOFWMassiveOrders.GetOrdersByProject',15);

        ORFCURSOR := PM_BCPROJECT.FRFGETORDERSBYPROJECT(INUPROJECTID);

        UT_TRACE.TRACE('Finaliza PM_BOFWMassiveOrders.GetOrdersByProject',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE GETORDNOANULLBYPRO
    (
        INUPROJECTID    IN  PM_PROJECT.PROJECT_ID%TYPE,
        ORFCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN
        UT_TRACE.TRACE('Inicia PM_BOFWMassiveOrders.GetOrdNoAnullByPro',15);

        ORFCURSOR := PM_BCPROJECT.FRFGETORDNOANULLBYPRO(INUPROJECTID);

        UT_TRACE.TRACE('Finaliza PM_BOFWMassiveOrders.GetOrdNoAnullByPro',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE GETSTAGENOTFINISH
    (
        INUPROJECTID    IN  PM_PROJECT.PROJECT_ID%TYPE,
        ORFCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN
        UT_TRACE.TRACE('Inicia PM_BOFWMassiveOrders.GetStageNotFinish',15);

        ORFCURSOR := PM_BCPROJECT.FRFGETSTAGENOTFINISH(INUPROJECTID);

        UT_TRACE.TRACE('Finaliza PM_BOFWMassiveOrders.GetStageNotFinish',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    
    



















    PROCEDURE GETINSTANCEVALUES
    (
        IBLVALIDATE IN  BOOLEAN
    )
    IS
        
        SBPROCESSINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        
        CNUERR_DIFVALUES    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900962;
        
        NUTASKTYPEID        PM_STAGE_TASK_TYPE.TASK_TYPE_ID%TYPE;
        
        NUOPERUNITID        OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        
        NUNEWOPERUNITID     OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        
        NUCAUSAL            GE_CAUSAL.CAUSAL_ID%TYPE;
        
        NUCOMMENTTYPE       OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE;
        
        SBORDERCOMMENT      OR_ORDER_COMMENT.ORDER_COMMENT%TYPE;
        
        DTSTARDATE          PM_STAGE.ESTIMATE_INI_DATE%TYPE;

    BEGIN

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'OR_TASK_TYPE','TASK_TYPE_ID',NUINDEX) THEN
            NUTASKTYPEID    := TO_NUMBER(GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('OR_TASK_TYPE','TASK_TYPE_ID'));
        END IF;

        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'OR_ORDER','OPERATING_UNIT_ID',NUINDEX) THEN
            NUNEWOPERUNITID := TO_NUMBER(GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('OR_ORDER','OPERATING_UNIT_ID'));
        END IF;

        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'OR_OPERATING_UNIT','OPERATING_UNIT_ID',NUINDEX) THEN
            NUOPERUNITID    := TO_NUMBER(GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('OR_OPERATING_UNIT','OPERATING_UNIT_ID'));
        END IF;
        

        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'GE_CAUSAL','GE_CAUSAL',NUINDEX) THEN
            GNUCAUSAL       := TO_NUMBER(GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('GE_CAUSAL','GE_CAUSAL'));
        END IF;

        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'OR_ORDER_COMMENT','COMMENT_TYPE_ID',NUINDEX) THEN
            NUCOMMENTTYPE   := TO_NUMBER(GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('OR_ORDER_COMMENT', 'COMMENT_TYPE_ID'));
        END IF;

        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'OR_ORDER_COMMENT','ORDER_COMMENT',NUINDEX) THEN
            SBORDERCOMMENT  := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('OR_ORDER_COMMENT', 'ORDER_COMMENT');
        END IF;
        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'PM_STAGE','ESTIMATE_INI_DATE',NUINDEX) THEN
            DTSTARDATE  := UT_CONVERT.FNUCHARTODATE( GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('PM_STAGE', 'ESTIMATE_INI_DATE'));
        END IF;
        
        IF ( IBLVALIDATE ) THEN
        
            IF ( NOT ( ( GNUTASKTYPEID = NUTASKTYPEID ) OR ( GNUTASKTYPEID IS NULL AND NUTASKTYPEID IS NULL ) ) ) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_DIFVALUES,'Tipo de Trabajo');
            END IF;
            
            IF ( NOT ( ( GNUOPERUNITID = NUOPERUNITID ) OR ( GNUOPERUNITID IS NULL AND NUOPERUNITID IS NULL ) ) ) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_DIFVALUES,'Unidad de Trabajo');
            END IF;

            IF ( NOT ( ( GNUNEWOPERUNITID = NUNEWOPERUNITID ) OR ( GNUNEWOPERUNITID IS NULL AND NUNEWOPERUNITID IS NULL ) ) ) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_DIFVALUES,'Asignar A');
            END IF;

        END IF;
        
        GNUTASKTYPEID       := NUTASKTYPEID;
        GNUOPERUNITID       := NUOPERUNITID;
        GNUNEWOPERUNITID    := NUNEWOPERUNITID;
        GNUCAUSAL           := NUCAUSAL;
        GNUCOMMENTTYPE      := NUCOMMENTTYPE;
        GSBORDERCOMMENT     := SBORDERCOMMENT;
        GDTSTARDATE         := DTSTARDATE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETINSTANCEVALUES;
    
    
    
















    FUNCTION FRFGETORDERSPMANO
    RETURN CONSTANTS.TYREFCURSOR
    IS
		
        RFORDERS        CONSTANTS.TYREFCURSOR;
    BEGIN

        UT_TRACE.TRACE('[INICIO] PM_BOFWMassiveOrders.frfGetOrdersPMANO',15);

        GETINSTANCEVALUES(FALSE);
        
        
        IF (GNUCOMMENTTYPE IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Tipo');
        END IF;
        
        PM_BCMASSIVEORDERS.GETANNULORDERS(PM_BOINITRULES.FNUGETSTAGEID,GNUTASKTYPEID,RFORDERS);

        UT_TRACE.TRACE('[FIN] PM_BOFWMassiveOrders.frfGetOrdersPMANO',15);
        RETURN RFORDERS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETORDERSPMANO;
    
    
    

























    PROCEDURE PROCESSPMANO
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS
		
        NUORDERID       OR_ORDER.ORDER_ID%TYPE;
        
        RCORDER         DAOR_ORDER.STYOR_ORDER;
    BEGIN
        UT_TRACE.TRACE('Inicia PM_BOFWMassiveOrders.ProcessPMANO',15);
        
        GETINSTANCEVALUES(TRUE);
        NUORDERID := TO_NUMBER(ISBPK);

        IF ( OR_BOVALIDATOR.FSBCANBEANNULED(NUORDERID) = GE_BOCONSTANTS.CSBYES ) THEN
        
            
            OR_BCORDERPROCESS.LOCKORDER(NUORDERID);
            UT_TRACE.TRACE('nuOrderId:['||NUORDERID||']',15);

            RCORDER := DAOR_ORDER.FRCGETRECORD(NUORDERID);

            IF ( RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED ) THEN

                PM_BOMASSIVEORDERS.RELEASEORDERAVAIL(RCORDER);
            END IF;

            
            OR_BOANULLORDER.ANULLORDEROFDAMAGE
            (
                NUORDERID,
                GNUCOMMENTTYPE,
                GSBORDERCOMMENT
            );
        
        ELSE
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fin PM_BOFWMassiveOrders.ProcessPMANO',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
    END PROCESSPMANO;

    


















    FUNCTION FRFGETORDERSPMAOR
    RETURN CONSTANTS.TYREFCURSOR
    IS
		
        RFORDERS        CONSTANTS.TYREFCURSOR;
    BEGIN



        UT_TRACE.TRACE('[INICIO] PM_BOFWMassiveOrders.frfGetOrdersPMAOR',15);

        GETINSTANCEVALUES(FALSE);
        
        IF ( GNUOPERUNITID IS NULL ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Unidad de Trabajo');
        END IF;

        IF ( GNUTASKTYPEID IS NULL ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Tipo de Trabajo');
        END IF;
        
        PM_BOMASSIVEORDERS.GETASSINGORDERS(PM_BOINITRULES.FNUGETSTAGEID,GNUTASKTYPEID,GNUOPERUNITID,RFORDERS);

        UT_TRACE.TRACE('[FIN] PM_BOFWMassiveOrders.frfGetOrdersPMAOR',15);
        RETURN RFORDERS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETORDERSPMAOR;

    





















    PROCEDURE PROCESSPMAOR
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS

    BEGIN
        UT_TRACE.TRACE('Inicia PM_BOFWMassiveOrders.ProcessPMAOR',15);
        


        GETINSTANCEVALUES(TRUE);
        
        
        OR_BCORDERPROCESS.LOCKORDER(ISBPK);

        OR_BOFWASSIGNMASSIVORDER.ASSIGNORDERPROCESS(ISBPK, INUCURRENT, INUTOTAL, ONUERRORCODE, OSBERRORMESS);
        PM_BOINITRULES.SETPROCESSED;

        UT_TRACE.TRACE('Fin PM_BOFWMassiveOrders.ProcessPMAOR',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
    END PROCESSPMAOR;

    


















    FUNCTION FRFGETORDERSPMROR
    RETURN CONSTANTS.TYREFCURSOR
    IS
        	
        RFSELECT        CONSTANTS.TYREFCURSOR;
    BEGIN

        UT_TRACE.TRACE('[INICIO] PM_BOFWMassiveOrders.frfGetOrdersPMROR',15);
        
        GETINSTANCEVALUES(FALSE);
        
        IF ( GNUTASKTYPEID IS NULL ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Tipo de Trabajo');
        END IF;

        IF ( GNUOPERUNITID IS NULL ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Unidad de Trabajo');
        END IF;

        PM_BCMASSIVEORDERS.GETREASSINGORDERS(PM_BOINITRULES.FNUGETSTAGEID,GNUTASKTYPEID,GNUOPERUNITID,RFSELECT);
        
        UT_TRACE.TRACE('[FIN] PM_BOFWMassiveOrders.frfGetOrdersPMROR',15);
        RETURN RFSELECT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETORDERSPMROR;
    
    
    

























    PROCEDURE PROCESSPMROR
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS
    	
        NUORDER     OR_ORDER.ORDER_ID%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('Inicia PM_BOFWMassiveOrders.ProcessPMROR',15);
        
        IF ( INUCURRENT = 1 ) THEN
            GETINSTANCEVALUES(TRUE);
            DAOR_OPERATING_UNIT.CLEARMEMORY;
        END IF;
        
        
        OR_BCORDERPROCESS.LOCKORDER(ISBPK);

        CT_BOORDERREVOKE.REVOKEANDREASINGORDER(TO_NUMBER(ISBPK),GNUNEWOPERUNITID,GNUCAUSAL,NUORDER);        

        UT_TRACE.TRACE('Fin PM_BOFWMassiveOrders.ProcessPMROR',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
    END PROCESSPMROR;

    


















    FUNCTION FRFGETORDERSPMRDS
    RETURN CONSTANTS.TYREFCURSOR
    IS
				
        RFSELECT                CONSTANTS.TYREFCURSOR;

    BEGIN

        UT_TRACE.TRACE('[INICIO] PM_BOFWMassiveOrders.frfGetOrdersPMRDS',15);

        GETINSTANCEVALUES(FALSE);
        PM_BOMASSIVEORDERS.GETAVALIABILITY(PM_BOINITRULES.FNUGETSTAGEID,GNUTASKTYPEID,GNUOPERUNITID,GDTSTARDATE, RFSELECT);

        RETURN RFSELECT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETORDERSPMRDS;

    

























    PROCEDURE PROCESSPMRDS
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia PM_BOFWMassiveOrders.ProcessPMRDS',15);

        GETINSTANCEVALUES(TRUE);
        PM_BOMASSIVEORDERS.PROCESSAVALIABILITY(TO_NUMBER(ISBPK),PM_BOINITRULES.FNUGETSTAGEID,GNUTASKTYPEID,GNUOPERUNITID,GDTSTARDATE,OSBERRORMESS);
        PM_BOINITRULES.SETPROCESSED;

        UT_TRACE.TRACE('Fin PM_BOFWMassiveOrders.ProcessPMRDS',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
    END PROCESSPMRDS;
    
    
    

















    FUNCTION FRFGETORDERSPMEDS
    RETURN CONSTANTS.TYREFCURSOR
    IS
		
        RFSELECT                CONSTANTS.TYREFCURSOR;

    BEGIN

        UT_TRACE.TRACE('[INICIO] PM_BOFWMassiveOrders.frfGetOrdersPMEDS',15);

        GETINSTANCEVALUES(FALSE);
        PM_BOMASSIVEORDERS.GETPROGRAMMEDAVAL(
            PM_BOINITRULES.FNUGETSTAGEID,
            PM_BOFWMASSIVEORDERS.GNUTASKTYPEID,
            PM_BOFWMASSIVEORDERS.GNUOPERUNITID,
            RFSELECT);

        RETURN RFSELECT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETORDERSPMEDS;

    























    PROCEDURE PROCESSPMEDS
    (
        ISBPK        IN VARCHAR2,
        INUCURRENT   IN NUMBER,
        INUTOTAL     IN NUMBER,
        ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        OSBERRORMESS OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia PM_BOFWMassiveOrders.ProcessPMEDS',15);

        GETINSTANCEVALUES(TRUE);
        PM_BOMASSIVEORDERS.DELETEAVALIABILITY(TO_NUMBER(ISBPK),PM_BOFWMASSIVEORDERS.GNUOPERUNITID);
        PM_BOINITRULES.SETPROCESSED;

        UT_TRACE.TRACE('Fin PM_BOFWMassiveOrders.ProcessPMEDS',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
    END PROCESSPMEDS;
    
    
    





















    PROCEDURE GETCOMMENTSTYPE
    (
        ORFRESULT   IN OUT NOCOPY CONSTANTS.TYREFCURSOR
    )
    IS
        SBIDINDEX           VARCHAR2(100);
        NUTASKTYPEID        OR_TASK_TYPE.TASK_TYPE_ID%TYPE := NULL;
        NUSTAGEID           PM_STAGE.STAGE_ID%TYPE := NULL;
        SBVALATTRIBUTEE     GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBCURRENTINSTANCE   GE_BOUTILITIES.STYSTATEMENT;
    BEGIN
        UT_TRACE.TRACE('[INICIO] PM_BOFWMassiveOrders.GetCommentsType.',10);
        
        IF (GE_BOINSTANCECONTROL.FBLISINITINSTANCECONTROL) THEN
            GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBCURRENTINSTANCE);
            
            IF( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBCURRENTINSTANCE, NULL, 'OR_TASK_TYPE', 'TASK_TYPE_ID', SBIDINDEX)) THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBCURRENTINSTANCE, NULL, 'OR_TASK_TYPE', 'TASK_TYPE_ID', SBVALATTRIBUTEE);
                NUTASKTYPEID := TO_NUMBER(SBVALATTRIBUTEE);
            END IF;
            
            IF( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBCURRENTINSTANCE, NULL, 'PM_STAGE', 'STAGE_ID', SBIDINDEX)) THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBCURRENTINSTANCE, NULL, 'PM_STAGE', 'STAGE_ID', SBVALATTRIBUTEE);
                NUSTAGEID := TO_NUMBER(SBVALATTRIBUTEE);
            END IF;
        END IF;

        IF(NUTASKTYPEID IS NOT NULL AND NUSTAGEID IS NOT NULL )THEN
            
            IF (PM_BCMASSIVEORDERS.FBOEXISTSITEMSCLASS(NUSTAGEID,NUTASKTYPEID,OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF)) THEN
                UT_TRACE.TRACE('-- Comentarios para �rdenes administrativas...',10);
                OPEN ORFRESULT FOR
                    SELECT  GE_COMMENT_TYPE.COMMENT_TYPE_ID ID,
                            GE_COMMENT_TYPE.DESCRIPTION DESCRIPTION
                     FROM   GE_COMMENT_TYPE
                            /*+ Ubicaci�n 1: PM_BOFWMassiveOrders.GetCommentsType */
                    WHERE   GE_COMMENT_TYPE.COMMENT_CLASS_ID = OR_BOCONSTANTS.CNUCOMM_CLASS_ADM_ORD;
            ELSE
              UT_TRACE.TRACE('-- Comentarios para �rdenes operativas...',10);
              OPEN ORFRESULT FOR
                SELECT  GE_COMMENT_TYPE.COMMENT_TYPE_ID ID,
                        GE_COMMENT_TYPE.DESCRIPTION DESCRIPTION
                 FROM   GE_COMMENT_TYPE
                        /*+ Ubicaci�n 2: PM_BOFWMassiveOrders.GetCommentsType */
                WHERE   GE_COMMENT_TYPE.COMMENT_CLASS_ID = OR_BOCONSTANTS.CNUCOMM_CLASS_WRK_ORD;
            END IF;
        ELSE
            UT_TRACE.TRACE('-- No existe tipo de trabajo en INSTANCIA...',10);
            OPEN ORFRESULT FOR
                SELECT NULL ID, NULL DESCRIPTION
                FROM  DUAL
                    /*+ Ubicaci�n 3: PM_BOFWMassiveOrders.GetCommentsType */
                WHERE 1 = 2;
        END IF;

        UT_TRACE.TRACE('[FIN] PM_BOFWMassiveOrders.GetCommentsType',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',10);
                RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCOMMENTSTYPE;
    
END PM_BOFWMASSIVEORDERS;