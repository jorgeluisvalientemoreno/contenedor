CREATE OR REPLACE PACKAGE BODY PS_BOPACKAGE_ACTIVITIES IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO237680';
   CNUTRACE_LEVEL CONSTANT NUMBER := 6;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicio: PS_BOPackage_Activities.fsbVersion', CNUTRACE_LEVEL );
      UT_TRACE.TRACE( 'Fin: PS_BOPackage_Activities.fsbVersion', CNUTRACE_LEVEL );
      RETURN CSBVERSION;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED THEN
         UT_TRACE.TRACE( 'ex.CONTROLLED_ERROR: PS_BOPackage_Activities.fsbVersion', CNUTRACE_LEVEL );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others: PS_BOPackage_Activities.fsbVersion', CNUTRACE_LEVEL );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBVERSION;
   PROCEDURE GETACTIVITYBYPACKAGE( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, ONUITEMID OUT PS_PACKAGE_ACTIVITIES.ITEMS_ID%TYPE )
    IS
      RCPACKAGEACTIVITY DAPS_PACKAGE_ACTIVITIES.STYPS_PACKAGE_ACTIVITIES;
      RCPACKAGE DAMO_PACKAGES.STYMO_PACKAGES;
      TBMOTIVES DAMO_MOTIVE.TYTBMO_MOTIVE;
      NUCAUSALTYPE CC_CAUSAL.CAUSAL_TYPE_ID%TYPE;
      NUSERVICE SERVSUSC.SESUSERV%TYPE := NULL;
      RFCURSOR PKCONSTANTE.TYREFCURSOR;
    BEGIN
      UT_TRACE.TRACE( 'Inicio: PS_BOPackage_Activities.GetActivityByPackage', CNUTRACE_LEVEL );
      DAMO_PACKAGES.ACCKEY( INUPACKAGEID );
      RCPACKAGE := DAMO_PACKAGES.FRCGETRECORD( INUPACKAGEID );
      TBMOTIVES := MO_BCMOTIVE.FTBALLMOTIVESBYPACK( INUPACKAGEID );
      IF ( TBMOTIVES.COUNT = 0 ) THEN
         UT_TRACE.TRACE( 'No se encontro el motivo para la solicitud: ' || INUPACKAGEID, 1 );
         RETURN;
      END IF;
      UT_TRACE.TRACE( 'Motive_id = ' || TBMOTIVES( 1 ).MOTIVE_ID, CNUTRACE_LEVEL );
      IF ( TBMOTIVES( 1 ).CAUSAL_ID IS NOT NULL ) THEN
         UT_TRACE.TRACE( 'causal_id = ' || TBMOTIVES( 1 ).CAUSAL_ID, CNUTRACE_LEVEL );
         DACC_CAUSAL.ACCKEY( TBMOTIVES( 1 ).CAUSAL_ID );
         NUCAUSALTYPE := DACC_CAUSAL.FNUGETCAUSAL_TYPE_ID( TBMOTIVES( 1 ).CAUSAL_ID );
         UT_TRACE.TRACE( 'nuCausalType = ' || NUCAUSALTYPE, CNUTRACE_LEVEL );
      END IF;
      IF ( TBMOTIVES( 1 ).PRODUCT_ID IS NOT NULL ) THEN
         UT_TRACE.TRACE( 'Product_id = ' || TBMOTIVES( 1 ).PRODUCT_ID, CNUTRACE_LEVEL );
         PKTBLSERVSUSC.ACCKEY( TBMOTIVES( 1 ).PRODUCT_ID );
         NUSERVICE := PKTBLSERVSUSC.FNUGETSERVICE( TBMOTIVES( 1 ).PRODUCT_ID );
         UT_TRACE.TRACE( 'nuService = ' || NUSERVICE, CNUTRACE_LEVEL );
      END IF;
      RFCURSOR := PS_BCPACKAGE_ACTIVITIES.FRFINFOBYOTHERSUBJECT( RCPACKAGE.PACKAGE_TYPE_ID, NUCAUSALTYPE, TBMOTIVES( 1 ).CAUSAL_ID, NUSERVICE, NULL );
      FETCH RFCURSOR
         INTO RCPACKAGEACTIVITY;
      IF ( RFCURSOR%NOTFOUND ) THEN
         RFCURSOR := PS_BCPACKAGE_ACTIVITIES.FRFINFOBYOTHERSUBJECT( RCPACKAGE.PACKAGE_TYPE_ID, NUCAUSALTYPE, NULL, NULL, NULL );
         FETCH RFCURSOR
            INTO RCPACKAGEACTIVITY;
         IF ( RFCURSOR%NOTFOUND ) THEN
            ERRORS.SETERROR( 2741, 'No se encontró ninguna actividad' );
            RAISE LOGIN_DENIED;
         END IF;
      END IF;
      ONUITEMID := RCPACKAGEACTIVITY.ITEMS_ID;
      UT_TRACE.TRACE( 'Fin: PS_BOPackage_Activities.GetActivityByPackage', CNUTRACE_LEVEL );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED THEN
         UT_TRACE.TRACE( 'ex.CONTROLLED_ERROR: PS_BOPackage_Activities.GetActivityByPackage', CNUTRACE_LEVEL );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others: PS_BOPackage_Activities.GetActivityByPackage', CNUTRACE_LEVEL );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETACTIVITYBYPACKAGE;
   FUNCTION FNUIMMEDIATEATTENTION( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN NUMBER
    IS
      NUIMMEDIATEATTENTION NUMBER := 0;
      TBMOTIVES DAMO_MOTIVE.TYTBMO_MOTIVE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio: PS_BOPackage_Activities.fnuImmediateAttention', CNUTRACE_LEVEL );
      DAMO_PACKAGES.ACCKEY( INUPACKAGEID );
      TBMOTIVES := MO_BCMOTIVE.FTBALLMOTIVESBYPACK( INUPACKAGEID );
      IF ( TBMOTIVES.COUNT = 0 ) THEN
         UT_TRACE.TRACE( 'No se encontro el motivo para la solicitud: ' || INUPACKAGEID, 1 );
         RETURN NUIMMEDIATEATTENTION;
      END IF;
      IF ( TBMOTIVES( 1 ).ANSWER_ID IS NOT NULL AND DACC_ANSWER.FBLEXIST( TBMOTIVES( 1 ).ANSWER_ID ) ) THEN
         IF ( DACC_ANSWER.FSBGETIS_IMMEDIATE_ATTENT( TBMOTIVES( 1 ).ANSWER_ID ) = CC_BOCONSTANTS.CSBSI ) THEN
            NUIMMEDIATEATTENTION := 1;
         END IF;
      END IF;
      UT_TRACE.TRACE( 'Fin: PS_BOPackage_Activities.fnuImmediateAttention', CNUTRACE_LEVEL );
      RETURN NUIMMEDIATEATTENTION;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED THEN
         UT_TRACE.TRACE( 'ex.CONTROLLED_ERROR: PS_BOPackage_Activities.fnuImmediateAttention', CNUTRACE_LEVEL );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others: PS_BOPackage_Activities.fnuImmediateAttention', CNUTRACE_LEVEL );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUIMMEDIATEATTENTION;
   FUNCTION FNUMOVEBYCOMPETENCE( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN NUMBER
    IS
      NUMOVEBYCOMPETENCE NUMBER := 0;
      RCPACKAGES DAMO_PACKAGES.STYMO_PACKAGES;
      NUANSWERTYPE CC_ANSWER_TYPE.ANSWER_TYPE_ID%TYPE;
      NUANSWERID CC_ANSWER.ANSWER_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio: PS_BOPackage_Activities.fnuMoveByCompetence', CNUTRACE_LEVEL );
      RCPACKAGES := DAMO_PACKAGES.FRCGETRECORD( INUPACKAGEID );
      CC_BOLEGALCAUSALANSWER.GETPACKAGEANSWER( INUPACKAGEID, NUANSWERID );
      IF ( NUANSWERID IS NOT NULL ) THEN
         NUANSWERTYPE := DACC_ANSWER.FNUGETANSWER_TYPE_ID( NUANSWERID );
      END IF;
      IF ( NUANSWERTYPE = CNUMOVE_COMPETENCE AND RCPACKAGES.PACKAGE_TYPE_ID IN ( PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( PS_BOPACKAGETYPE.CSBTAGRECLAIM ), PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( PS_BOPACKAGETYPE.CSBTAGCOMPLAINT_REG ), PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( PS_BOPACKAGETYPE.CSBTAGRECURSO_REPOSICION ), PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( PS_BOPACKAGETYPE.CSBTAGINDIV_DAMAGE ), PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( PS_BOPACKAGETYPE.CSBTAGREPOSICION_SUBSIDIO ) ) ) THEN
         NUMOVEBYCOMPETENCE := 1;
      END IF;
      UT_TRACE.TRACE( 'Fin: PS_BOPackage_Activities.fnuMoveByCompetence', CNUTRACE_LEVEL );
      RETURN NUMOVEBYCOMPETENCE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED THEN
         UT_TRACE.TRACE( 'ex.CONTROLLED_ERROR: PS_BOPackage_Activities.fnuMoveByCompetence', CNUTRACE_LEVEL );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others: PS_BOPackage_Activities.fnuMoveByCompetence', CNUTRACE_LEVEL );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUMOVEBYCOMPETENCE;
   PROCEDURE CREATEASSIGNWFORDER( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE )
    IS
      CNUASSIGNED_ORDER CONSTANT OR_ORDER_STATUS.ORDER_STATUS_ID%TYPE := 5;
      CNUACTION_ORDER CONSTANT GE_ACTION_MODULE.ACTION_ID%TYPE := 136;
      NUACTIVITYID PS_PACKAGE_ACTIVITIES.ITEMS_ID%TYPE := NULL;
      NUCOMPONENTID MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
      TBMOTIVES DAMO_MOTIVE.TYTBMO_MOTIVE;
      RCPACKAGE DAMO_PACKAGES.STYMO_PACKAGES;
      NUADDRESSID GE_SUBSCRIBER.ADDRESS_ID%TYPE := NULL;
      NUMAINADDRESSID GE_SUBSCRIBER.ADDRESS_ID%TYPE := NULL;
      RCMAINADDRESS DAAB_ADDRESS.STYAB_ADDRESS := NULL;
      NUROUTEID OR_ROUTE.ROUTE_ID%TYPE := NULL;
      NUROUTECONSECUTIVE AB_PREMISE.CONSECUTIVE%TYPE := NULL;
      NUORDERID OR_ORDER.ORDER_ID%TYPE := NULL;
      NUORDERACTIVITYID OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE := NULL;
      RCORDER DAOR_ORDER.STYOR_ORDER;
      NUOPERUNIT OR_ORDER.OPERATING_UNIT_ID%TYPE;
      CURSOR CUDIRPRODUCTREC( INUMOTIVE_ID IN MO_MOTIVE.MOTIVE_ID%TYPE ) IS
SELECT  p.address_id
        FROM    cargtram a, pr_product p
        WHERE   a.catrnuse = p.product_id
        AND     a.catrmoti = inumotive_id
        AND rownum=1;
    BEGIN
      UT_TRACE.TRACE( 'Inicio: PS_BOPackage_Activities.CreateAssignWFOrder', CNUTRACE_LEVEL - 1 );
      DAMO_PACKAGES.ACCKEY( INUPACKAGEID );
      RCPACKAGE := DAMO_PACKAGES.FRCGETRECORD( INUPACKAGEID );
      GETACTIVITYBYPACKAGE( INUPACKAGEID, NUACTIVITYID );
      DAGE_ITEMS.ACCKEY( NUACTIVITYID );
      TBMOTIVES := MO_BCMOTIVE.FTBALLMOTIVESBYPACK( INUPACKAGEID );
      IF ( TBMOTIVES.COUNT = 0 ) THEN
         RETURN;
      END IF;
      IF ( TBMOTIVES( 1 ).PRODUCT_ID IS NOT NULL ) THEN
         DAPR_PRODUCT.ACCKEY( TBMOTIVES( 1 ).PRODUCT_ID );
         NUCOMPONENTID := MO_BOCOMPONENT.FNUGETCOMPONENTBYISMAIN( TBMOTIVES( 1 ).MOTIVE_ID, GE_BOCONSTANTS.CSBYES );
         IF ( NUCOMPONENTID IS NOT NULL ) THEN
            DAMO_COMPONENT.ACCKEY( NUCOMPONENTID );
         END IF;
      END IF;
      IF ( RCPACKAGE.PACKAGE_TYPE_ID = PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( PS_BOPACKAGETYPE.CSBTAGINDIV_DAMAGE ) ) THEN
         NUADDRESSID := MO_BOADDRESS.FNUGETPARSERADDRIDBYPACK( RCPACKAGE.PACKAGE_ID );
      END IF;
      IF ( RCPACKAGE.TAG_NAME IN ( PS_BOPACKAGETYPE.CSBTAGRECLAIM, PS_BOPACKAGETYPE.CSBTAGRECURSO_REPOSICION, PS_BOPACKAGETYPE.CSBTAGREPOSICION_SUBSIDIO, PS_BOPACKAGETYPE.CSBTAGRECURSO_QUEJA ) ) THEN
         IF ( TBMOTIVES( 1 ).MOTIVE_ID IS NOT NULL ) THEN
            FOR RC IN CUDIRPRODUCTREC( TBMOTIVES( 1 ).MOTIVE_ID )
             LOOP
               NUADDRESSID := RC.ADDRESS_ID;
            END LOOP;
         END IF;
      END IF;
      IF ( RCPACKAGE.TAG_NAME = PS_BOPACKAGETYPE.CSBTAGCOMPLAINT_REG ) THEN
         IF ( TBMOTIVES( 1 ).MOTIVE_ID IS NOT NULL ) THEN
            IF ( RCPACKAGE.ORDER_ID IS NOT NULL ) THEN
               NUADDRESSID := DAOR_EXTERN_SYSTEMS_ID.FNUGETADDRESS_ID( RCPACKAGE.ORDER_ID );
             ELSE
               IF ( TBMOTIVES( 1 ).PRODUCT_ID IS NOT NULL ) THEN
                  NUADDRESSID := DAPR_PRODUCT.FNUGETADDRESS_ID( TBMOTIVES( 1 ).PRODUCT_ID );
                ELSE
                  IF ( TBMOTIVES( 1 ).SUBSCRIPTION_ID IS NOT NULL ) THEN
                     NUADDRESSID := PKTBLSUSCRIPC.FNUGETSUSCIDDI( TBMOTIVES( 1 ).SUBSCRIPTION_ID );
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
      IF ( NUADDRESSID IS NULL ) THEN
         NUADDRESSID := DAGE_SUBSCRIBER.FNUGETADDRESS_ID( RCPACKAGE.SUBSCRIBER_ID );
      END IF;
      IF ( NUADDRESSID IS NOT NULL AND DAAB_ADDRESS.FBLEXIST( NUADDRESSID ) ) THEN
         AB_BOADDRESS.GETMAINADDRBYANYID( NUADDRESSID, NUMAINADDRESSID );
         RCMAINADDRESS := DAAB_ADDRESS.FRCGETRECORD( NUMAINADDRESSID );
         IF ( RCMAINADDRESS.SEGMENT_ID IS NOT NULL AND DAAB_SEGMENTS.FBLEXIST( RCMAINADDRESS.SEGMENT_ID ) ) THEN
            NUROUTEID := DAAB_SEGMENTS.FNUGETROUTE_ID( RCMAINADDRESS.SEGMENT_ID );
         END IF;
         IF ( RCMAINADDRESS.ESTATE_NUMBER IS NOT NULL AND DAAB_PREMISE.FBLEXIST( RCMAINADDRESS.ESTATE_NUMBER ) ) THEN
            NUROUTECONSECUTIVE := DAAB_PREMISE.FNUGETCONSECUTIVE( RCMAINADDRESS.ESTATE_NUMBER );
         END IF;
      END IF;
      OR_BOORDERACTIVITIES.CREATEACTIVITY( TO_NUMBER( NUACTIVITYID ), INUPACKAGEID, TO_NUMBER( TBMOTIVES( 1 ).MOTIVE_ID ), TO_NUMBER( NUCOMPONENTID ), INUINSTANCEID, TO_NUMBER( NUADDRESSID ), NULL, TO_NUMBER( RCPACKAGE.CONTACT_ID ), TO_NUMBER( TBMOTIVES( 1 ).SUBSCRIPTION_ID ), TO_NUMBER( TBMOTIVES( 1 ).PRODUCT_ID ), NULL, NULL, TO_DATE( TBMOTIVES( 1 ).ESTIMATED_INST_DATE ), NULL, NULL, PKCONSTANTE.FALSO, NULL, NUORDERID, NUORDERACTIVITYID, NULL, NULL, NULL, TO_NUMBER( NUROUTEID ), TO_NUMBER( NUROUTECONSECUTIVE ), NULL, NULL );
      UT_TRACE.TRACE( 'nuOrderId ' || NUORDERID, 5 );
      IF ( RCPACKAGE.MANAGEMENT_AREA_ID IS NOT NULL ) THEN
         RCORDER := DAOR_ORDER.FRCGETRECORD( NUORDERID );
         UT_TRACE.TRACE( 'Área organizacional ' || RCPACKAGE.MANAGEMENT_AREA_ID, CNUTRACE_LEVEL );
         NUOPERUNIT := OR_BCOPERUNITPERSON.FNUOBTOPUNITBYORGAREA( RCPACKAGE.MANAGEMENT_AREA_ID );
         IF ( NUOPERUNIT IS NOT NULL ) THEN
            OR_BOPROCESSORDER.ASSIGN( RCORDER, NUOPERUNIT, NULL, FALSE, FALSE, NULL, NULL, FALSE );
         END IF;
      END IF;
      IF ( DAOR_ORDER.FNUGETORDER_STATUS_ID( NUORDERID ) = CNUASSIGNED_ORDER ) THEN
         MO_BOWF_PACK_INTERFAC.PREPNOTTOWFPACK( INUPACKAGEID, CNUACTION_ORDER, MO_BOCAUSAL.FNUGETSUCCESS, MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY, FALSE );
      END IF;
      UT_TRACE.TRACE( 'Fin: PS_BOPackage_Activities.CreateAssignWFOrder', CNUTRACE_LEVEL - 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED THEN
         UT_TRACE.TRACE( 'ex.CONTROLLED_ERROR: PS_BOPackage_Activities.CreateAssignWFOrder', CNUTRACE_LEVEL - 1 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others: PS_BOPackage_Activities.CreateAssignWFOrder', CNUTRACE_LEVEL - 1 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CREATEASSIGNWFORDER;
   PROCEDURE UPDORDERINSTANCE( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE )
    IS
      TBORDERACTITYID DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;
      RFORDERACTIVITYBYPKG DAOR_ORDER_ACTIVITY.TYREFCURSOR;
    BEGIN
      UT_TRACE.TRACE( 'INICIO: PS_BOPackage_Activities.UpdOrderInstance', CNUTRACE_LEVEL - 1 );
      DAMO_PACKAGES.ACCKEY( INUPACKAGEID );
      RFORDERACTIVITYBYPKG := DAOR_ORDER_ACTIVITY.FRFGETRECORDS( ' OR_order_activity.package_id = ' || INUPACKAGEID );
      FETCH RFORDERACTIVITYBYPKG
         BULK COLLECT INTO TBORDERACTITYID;
      CLOSE RFORDERACTIVITYBYPKG;
      FOR NUIDX IN TBORDERACTITYID.FIRST..TBORDERACTITYID.LAST
       LOOP
         TBORDERACTITYID( NUIDX ).INSTANCE_ID := INUINSTANCEID;
      END LOOP;
      DAOR_ORDER_ACTIVITY.UPDRECORDS( TBORDERACTITYID );
      UT_TRACE.TRACE( 'FIN: PS_BOPackage_Activities.UpdOrderInstance', CNUTRACE_LEVEL - 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED THEN
         UT_TRACE.TRACE( 'ex.CONTROLLED_ERROR: PS_BOPackage_Activities.UpdOrderInstance', CNUTRACE_LEVEL - 1 );
         IF ( RFORDERACTIVITYBYPKG%ISOPEN ) THEN
            CLOSE RFORDERACTIVITYBYPKG;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others: PS_BOPackage_Activities.UpdOrderInstance', CNUTRACE_LEVEL - 1 );
         IF ( RFORDERACTIVITYBYPKG%ISOPEN ) THEN
            CLOSE RFORDERACTIVITYBYPKG;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDORDERINSTANCE;
   PROCEDURE GETACTIVITYBYFORMDATA( INUCAUSALID IN CC_CAUSAL.CAUSAL_ID%TYPE, INUPACKTYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, INUPRODTYPEID IN SERVICIO.SERVCODI%TYPE, ONUITEMID OUT PS_PACKAGE_ACTIVITIES.ITEMS_ID%TYPE )
    IS
      RCPACKAGEACTIVITY DAPS_PACKAGE_ACTIVITIES.STYPS_PACKAGE_ACTIVITIES;
      NUCAUSALTYPE CC_CAUSAL.CAUSAL_TYPE_ID%TYPE;
      RFCURSOR PKCONSTANTE.TYREFCURSOR;
    BEGIN
      UT_TRACE.TRACE( 'Inicio: PS_BOPackage_Activities.GetActivityByFormData', CNUTRACE_LEVEL );
      UT_TRACE.TRACE( 'nuService = ' || INUPRODTYPEID, CNUTRACE_LEVEL );
      UT_TRACE.TRACE( 'nuPackTypeId = ' || INUPACKTYPEID, CNUTRACE_LEVEL );
      IF ( INUCAUSALID IS NOT NULL ) THEN
         UT_TRACE.TRACE( 'causal_id = ' || INUCAUSALID, CNUTRACE_LEVEL );
         DACC_CAUSAL.ACCKEY( INUCAUSALID );
         NUCAUSALTYPE := DACC_CAUSAL.FNUGETCAUSAL_TYPE_ID( INUCAUSALID );
         UT_TRACE.TRACE( 'nuCausalType = ' || NUCAUSALTYPE, CNUTRACE_LEVEL );
      END IF;
      UT_TRACE.TRACE( 'Busqueda por PackTypeId, nuCausalType, inuCausalId, inuProdTypeId', CNUTRACE_LEVEL );
      RFCURSOR := PS_BCPACKAGE_ACTIVITIES.FRFINFOBYOTHERSUBJECT( INUPACKTYPEID, NUCAUSALTYPE, INUCAUSALID, INUPRODTYPEID, NULL );
      FETCH RFCURSOR
         INTO RCPACKAGEACTIVITY;
      IF ( RFCURSOR%NOTFOUND ) THEN
         UT_TRACE.TRACE( 'No encontró actvidad con la informacion dada', CNUTRACE_LEVEL );
         UT_TRACE.TRACE( 'Busqueda por PackTypeId, nuCausalType', CNUTRACE_LEVEL );
         RFCURSOR := PS_BCPACKAGE_ACTIVITIES.FRFINFOBYOTHERSUBJECT( INUPACKTYPEID, NUCAUSALTYPE, NULL, NULL, NULL );
         FETCH RFCURSOR
            INTO RCPACKAGEACTIVITY;
         IF ( RFCURSOR%NOTFOUND ) THEN
            ERRORS.SETERROR( 2741, 'No se encontró ninguna actividad' );
            RAISE LOGIN_DENIED;
         END IF;
      END IF;
      ONUITEMID := RCPACKAGEACTIVITY.ITEMS_ID;
      UT_TRACE.TRACE( 'Fin: PS_BOPackage_Activities.GetActivityByFormData', CNUTRACE_LEVEL );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED THEN
         UT_TRACE.TRACE( 'ex.CONTROLLED_ERROR: PS_BOPackage_Activities.GetActivityByFormData', CNUTRACE_LEVEL );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others: PS_BOPackage_Activities.GetActivityByFormData', CNUTRACE_LEVEL );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETACTIVITYBYFORMDATA;
END PS_BOPACKAGE_ACTIVITIES;
/


