PACKAGE BODY OR_BOFWLegalizeOrder
IS





































































































    
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO197595';
    
    CNUERR_3387 NUMBER(4) := 3387;
    
    CNUERR_2742 CONSTANT NUMBER(4) := 2742; 
    
    CNUERR_2743 CONSTANT NUMBER(4) := 2743; 
    CSBX CONSTANT VARCHAR2(1) := 'X';

    
    
    CNUERR_3046 CONSTANT NUMBER(4) := 3046;
    

	

    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


    PROCEDURE GETORDERDATA
    (
        INUORDERID IN  OR_ORDER.ORDER_ID%TYPE,
        OCURFORDER OUT CONSTANTS.TYREFCURSOR
    ) IS

    BEGIN


        OR_BOORDERATTRIBUTESET.DELETEADDIDATAFROMTEMPTABLE(NULL);

        
        OR_BOFWLEGALIZEORDERUTIL.INITINSTANCEDATA(INUORDERID);

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETORDER
        (
            INUORDERID
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERDATA;

    
    PROCEDURE GETATTSETTASTYPACTION
    (
        INUORDERID   IN  OR_ORDER.ORDER_ID%TYPE,
        INUCAUSALID  IN  OR_ORDER.CAUSAL_ID%TYPE,
        OCURFORDER  OUT  CONSTANTS.TYREFCURSOR
    ) IS

        NUACTION NUMBER;
        NUTASKTYPE      OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
        NUCLASSCAUSAL   GE_CLASS_CAUSAL.CLASS_CAUSAL_ID%TYPE;
        BLVALIDATE      BOOLEAN := FALSE;

    BEGIN
        UT_TRACE.TRACE('OR_BOFWLegalizeOrder.GetAttSetTasTypAction INICIO',4);

        NUACTION := OR_BOCONSTANTS.CNUORDER_ACTION_CLOSE;

        OR_BOORDERATTRIBUTES.LOADDATATOTEMPTABLE(INUORDERID, INUCAUSALID, NUACTION, BLVALIDATE);

        NUCLASSCAUSAL := DAGE_CAUSAL.FNUGETCLASS_CAUSAL_ID(INUCAUSALID);

        NUTASKTYPE := DAOR_ORDER.FNUGETTASK_TYPE_ID(INUORDERID);
        
        OCURFORDER := OR_BCORDERATTRIBUTESET.FRFGETATTSETTASTYPACTION
        (
            NUCLASSCAUSAL,
            NUTASKTYPE
        );

        UT_TRACE.TRACE('OR_BOFWLegalizeOrder.GetAttSetTasTypAction FIN',4);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETATTSETTASTYPACTION;

    
    PROCEDURE GETQRYDATAVALUESTOLEGAL
    (
        INUORDERID IN  OR_ORDER.ORDER_ID%TYPE,
        INUATTRIBUTESETID IN OR_TEMP_DATA_VALUES.ATTRIBUTE_SET_ID%TYPE,
        OCURFORDER OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OR_BOORDERATTRIBUTESET.GETQRYDATAVALUESTOLEGAL
        (
    		TBQUERY,
    		INUORDERID,
    		INUATTRIBUTESETID
        );

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETTEMPDATAVALUES
        (
            INUORDERID, INUATTRIBUTESETID
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETQRYDATAVALUESTOLEGAL;

    PROCEDURE GETLEGALIZECAUSAL
    (
        INUORDERID IN  OR_ORDER.ORDER_ID%TYPE,
        OCURFORDER OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OR_BOFWLEGALIZEORDERUTIL.FILLCAUSAL
        (
    		INUORDERID
        );

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETLEGALIZECAUSAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETLEGALIZECAUSAL;

    PROCEDURE GETSUBSCRIBERDATA
    (
        INUSUBSCRIBERID IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        OCURFORDER OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETSUBSCRIBERDATA
        (
            INUSUBSCRIBERID
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSUBSCRIBERDATA;


    PROCEDURE GETTASKTYPE
    (
        OCURFORDER OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETTASKTYPE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETTASKTYPE;


    PROCEDURE GETOPERUNITPERSONS
    (
        INUOPERATINGUNITID IN  OR_OPER_UNIT_PERSONS.OPERATING_UNIT_ID%TYPE,
        OCURFORDER OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETOPERUNITPERSONS
        (
            INUOPERATINGUNITID
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPERUNITPERSONS;


    PROCEDURE VALIDATEINITIALDATE
    (
        IDTINITIALDATE IN  OR_ORDER.EXEC_INITIAL_DATE%TYPE,
        IDTFINALDATE IN  OR_ORDER.EXECUTION_FINAL_DATE%TYPE
    ) IS

    BEGIN
        OR_BOVALIDATOR.VALIDATEINITIALDATE(IDTINITIALDATE, CNUERR_2742);

        IF IDTFINALDATE  IS NOT NULL THEN
            VALIDATEFINALDATE(IDTINITIALDATE, IDTFINALDATE);
        END IF;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEINITIALDATE;

    PROCEDURE VALIDATEFINALDATE
    (
        IDTINITIALDATE IN  OR_ORDER.EXEC_INITIAL_DATE%TYPE,
        IDTFINALDATE IN  OR_ORDER.EXECUTION_FINAL_DATE%TYPE
    ) IS
    BEGIN
        OR_BOVALIDATOR.VALIDATEINITIALDATE(IDTINITIALDATE, CNUERR_2742);
        OR_BOVALIDATOR.VALIDATEFINALDATE(IDTFINALDATE, CNUERR_2743);
        OR_BOVALIDATOR.VALIDISINIDTBIGGERFINDT(IDTINITIALDATE, IDTFINALDATE);

        OR_BOFWLEGALIZEORDERUTIL.VALIDFINALDATEOFSYSDATE(IDTFINALDATE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEFINALDATE;




    PROCEDURE GETPLANNEDITEMS
    (
        INUORDERACTIVITY    IN OR_PLANNED_ITEMS.ORDER_ACTIVITY_ID%TYPE,
        OCURFORDER    OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETPLANNEDITEMS
        (
            INUORDERACTIVITY
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPLANNEDITEMS;

    



















    PROCEDURE GETITEMS
    (
        INUTASKTYPEID       IN  OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE,
        INUOPERATINGUNITID  IN  OR_ORDER.OPERATING_UNIT_ID%TYPE,
        OCURFORDER          OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETITEMS
        (
            INUTASKTYPEID,
            INUOPERATINGUNITID
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMS;

    PROCEDURE GETORDERITEMS
    (
        INUORDERID      IN OR_ORDER.ORDER_ID%TYPE,
        OCURFORDER      OUT CONSTANTS.TYREFCURSOR
    ) IS
    BEGIN
        UT_TRACE.TRACE('[OR_BOFWLegalizeOrder.GetOrderItems] INICIO',2);

        IF OR_BOITEMS.FBLISEMPTYORDERITEMSTEMPTAB(INUORDERID) THEN
            IF OR_BOORDERSAVEDDATAVALUES.FBLEXISTETEMPDATA(INUORDERID) THEN
                UT_TRACE.TRACE('[OR_BOFWLegalizeOrder.GetOrderItems] Ejecuta FillOrderItemsTempTableSave',2);
                OR_BOITEMS.FILLORDERITEMSTEMPTABLESAVE(INUORDERID, FALSE);
            ELSE
                UT_TRACE.TRACE('[OR_BOFWLegalizeOrder.GetOrderItems] Ejecuta FillOrderItemsTempTable',2);
                OR_BOITEMS.FILLORDERITEMSTEMPTABLE(INUORDERID, FALSE);
            END IF;
        END IF;


        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETORDERITEMS
        (
            INUORDERID, NULL
        );


        
        UT_TRACE.TRACE('[OR_BOFWLegalizeOrder.GetOrderItems] FIN',2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERITEMS;



    PROCEDURE VALIDITEMAMOUNT
    (
        INUITEMAMOUNT      IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE
    )
    IS
        
        
        
        CNUERR_3305   CONSTANT NUMBER(4)  := 3305;
    BEGIN

        IF  INUITEMAMOUNT < 0 THEN
            ERRORS.SETERROR(CNUERR_3305);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDITEMAMOUNT;

    PROCEDURE VALIDNEWAMOUNTFORMEASUREUNIT
    (
        INUITEMID          IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUOPERATINGUNITID IN OR_ORDER.OPERATING_UNIT_ID%TYPE,
        INUNEWITEMAMOUNT      IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE
    )
    IS
        
        
        
        NUORIGMEASUNIT GE_ITEMS.MEASURE_UNIT_ID%TYPE;
        CNUERR_110055 CONSTANT NUMBER(6) := 110055;
        CNUERR_3305   CONSTANT NUMBER(4)  := 3305;
        NUBALANCE     NUMBER;
    BEGIN

        UT_TRACE.TRACE('OR_BOFWLegalizeOrder.ValidNewAmountForMeasureUnit INICIO:['||INUNEWITEMAMOUNT||']',5);

        IF DAOR_OPE_UNI_ITEM_BALA.FBLEXIST(INUITEMID,
                                           INUOPERATINGUNITID ) THEN
            NUBALANCE := DAOR_OPE_UNI_ITEM_BALA.FNUGETBALANCE
                            (INUITEMID, INUOPERATINGUNITID);


            IF NUBALANCE < INUNEWITEMAMOUNT THEN	
                ERRORS.SETERROR(CNUERR_110055);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        ELSE 
            IF INUNEWITEMAMOUNT > 0 THEN
                ERRORS.SETERROR(CNUERR_110055);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        UT_TRACE.TRACE('OR_BOFWLegalizeOrder.ValidNewAmountForMeasureUnit FIN',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDNEWAMOUNTFORMEASUREUNIT;

    PROCEDURE GETACTION
    (
        OCURFORDER    OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN


        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETACTION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTION;


    PROCEDURE GETADDITEMSANDADDNETBYTASTYP
    (
        INUTASKTYPE        IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        OSBADDITEMSALLOWED OUT OR_TASK_TYPE.ADD_ITEMS_ALLOWED%TYPE,
        OSBADDNETALLOWED   OUT OR_TASK_TYPE.ADD_NET_ALLOWED%TYPE
    ) IS
        RCTASKTYPE  DAOR_TASK_TYPE.STYOR_TASK_TYPE;
    BEGIN
        RCTASKTYPE :=  DAOR_TASK_TYPE.FRCGETRECORD(INUTASKTYPE);

        OSBADDITEMSALLOWED :=   RCTASKTYPE.ADD_ITEMS_ALLOWED;
        OSBADDNETALLOWED   :=   RCTASKTYPE.ADD_NET_ALLOWED;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETADDITEMSANDADDNETBYTASTYP;


    PROCEDURE GETOPERATINGSECTOR
    (
        OCURFORDER    OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETOPERATINGSECTOR;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPERATINGSECTOR;


    
























    PROCEDURE GETCONSUMPTIONTYPE
    (
        INUITEMSGAMAID  IN  GE_ITEMS_GAMA.ID_ITEMS_GAMA%TYPE,
        OCURFORDER      OUT CONSTANTS.TYREFCURSOR
    ) IS

    BEGIN

        OCURFORDER := GE_BCCONSTYPEBYGAMA.FRFGETCONSUMPTIONTYPE
        (
            INUITEMSGAMAID
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCONSUMPTIONTYPE;

    PROCEDURE GETREADCAUSAL
    (
        OCURFORDER    OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETREADCAUSAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETREADCAUSAL;


    PROCEDURE GETNOTREADCAUSAL
    (
        OCURFORDER    OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETNOTREADCAUSAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNOTREADCAUSAL;


    PROCEDURE GETREADCOMMENT
    (
        OCURFORDER    OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETREADCOMMENT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETREADCOMMENT;


    PROCEDURE GETMESSAGEVALIDATE
    (
        OCURFORDER OUT CONSTANTS.TYREFCURSOR
    ) IS
		TBQUERY    OR_BOORDERATTRIBUTESET.TYDMLATTBYATTSETBYORDTOLEGAL;
    BEGIN

        OR_BOFWLEGALIZEORDERUTIL.FILLMESSAGEVALIDATE;

        OCURFORDER := OR_BCFWLEGALIZEORDER.FRFGETMESSAGEVALIDATE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFORDER);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETMESSAGEVALIDATE;

    





















    PROCEDURE VALMODIFYACTION
    (
        ISBACTION       IN  GE_ITEMS.USE_%TYPE,
        OSBVALIDACTION  OUT VARCHAR2,
        OSBBLOCKCLASS   OUT VARCHAR2
    )
    IS
    BEGIN
        OSBVALIDACTION := 'N';
        OSBBLOCKCLASS := 'N';
        IF ISBACTION IN ('I', 'A','D','U', 'W')  THEN
            OSBVALIDACTION := 'Y';

            IF ISBACTION = 'A' THEN
                OSBBLOCKCLASS := 'Y';
            END IF;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALMODIFYACTION;




    PROCEDURE GETMEASUREUNITIDBYITEM
    (
        INUITEMID       IN  GE_ITEMS.ITEMS_ID%TYPE,
        ONUMEASUREUNIT  OUT GE_ITEMS.MEASURE_UNIT_ID%TYPE
    )
    IS
    BEGIN
        ONUMEASUREUNIT := NULL;
        IF INUITEMID IS NOT NULL THEN
            ONUMEASUREUNIT := DAGE_ITEMS.FNUGETMEASURE_UNIT_ID(INUITEMID);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETMEASUREUNITIDBYITEM;




    FUNCTION FSBGETALLOWREUSED
    (
        INUITEMSID IN GE_ITEMS.ITEMS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
    BEGIN

        RETURN OR_BCITEMS.FSBALLOWREUSED(INUITEMSID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETALLOWREUSED;

END OR_BOFWLEGALIZEORDER;