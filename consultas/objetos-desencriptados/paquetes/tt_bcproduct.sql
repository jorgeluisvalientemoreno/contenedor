PACKAGE TT_BCProduct
IS
    











































































































    
    
    
    
    
    
    
    
    
    TYPE TYRCSUSPENSION IS RECORD
	(
        INITIAL_DATE PR_TIMEOUT_COMPONENT.INITIAL_DATE%TYPE,
        FINAL_DATE   PR_TIMEOUT_COMPONENT.FINAL_DATE%TYPE
	);
	
	
	TYPE TYTBSUSPENSIONS IS TABLE OF TYRCSUSPENSION INDEX BY BINARY_INTEGER;

    
    
    

    
    
    

    
















    CURSOR CUDAMELEBYPRODANDSTAT
    (
        INUPRODUCTID    IN  TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE,
        ISBPRODUCTSTATE IN  TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS%TYPE
    )
    IS
    SELECT  /*+ ordered use_nl(tt_damage_product tt_damage mo_packages)
                index(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_02)
                index(TT_DAMAGE IDX_TT_DAMAGE_02)
                index(MO_PACKAGES PK_MO_PACKAGES)*/
            TT_DAMAGE_PRODUCT.*, TT_DAMAGE_PRODUCT.ROWID
    FROM    TT_DAMAGE_PRODUCT,
            TT_DAMAGE,
            MO_PACKAGES
            /*+ Ubicaci?n: TT_BCProduct.cuDamEleByProdAndStat SAO191011 */
    WHERE   TT_DAMAGE_PRODUCT.PRODUCT_ID = INUPRODUCTID
    AND     TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS = ISBPRODUCTSTATE
    AND     TT_DAMAGE.PACKAGE_ID = TT_DAMAGE_PRODUCT.PACKAGE_ID
    AND     TT_DAMAGE.REG_DAMAGE_STATUS = TT_BOCONSTANTS.CSBREGISTEREDDAMAGESTATUS
    AND     MO_PACKAGES.PACKAGE_ID = TT_DAMAGE.PACKAGE_ID
    AND     MO_PACKAGES.PACKAGE_TYPE_ID =  TT_BOCONSTANTS.CNUMASSDAMAGE;

    















    CURSOR CUGETPRODUCTBYELEMENT
    (
        INUDAMAGEELEMENTID  IN  TT_DAMAGE_PRODUCT.ELEMENT_ID%TYPE,
        INUFAULTID          IN  TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE
    )
    IS
    WITH ELEMENTSATTEND AS
    (
        SELECT  *
        FROM
            (
            SELECT  /*+ index(TT_DAMAGE_ELEMENT IDX_TT_DAMAGE_ELEMENT_01) */
                    DAMAGE_ELEMENT_ID,
                    ELEMENT_ID,
                    FATHER_ELEMENT_ID
            FROM    TT_DAMAGE_ELEMENT
            WHERE   TT_DAMAGE_ELEMENT.PACKAGE_ID = INUFAULTID
            ) ELEMENTS
        START WITH ELEMENTS.DAMAGE_ELEMENT_ID = INUDAMAGEELEMENTID
        CONNECT BY PRIOR ELEMENTS.DAMAGE_ELEMENT_ID = ELEMENTS.FATHER_ELEMENT_ID
    )
    SELECT  /*+ ordered
                use_nl(ElementsAttend tt_damage_product)
                index(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_04)*/
            TT_DAMAGE_PRODUCT.*, TT_DAMAGE_PRODUCT.ROWID
    FROM    ELEMENTSATTEND,
            TT_DAMAGE_PRODUCT
    WHERE   /*+ Ubicaci?n: TT_BCDamageProduct.cuGetProductByElement SAO183880 */
            TT_DAMAGE_PRODUCT.ELEMENT_ID = ELEMENTSATTEND.ELEMENT_ID
    AND     TT_DAMAGE_PRODUCT.PACKAGE_ID = INUFAULTID
    AND     TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS IN
            (
                TT_BOCONSTANTS.CSBOPENDAMAGESTATUS,
                TT_BOCONSTANTS.CSBNONPORCESEDDAMAGESTATUS
            );

    















    CURSOR CUGETROWIDPRODBYSTATE
    (
        INUFAULTID      IN  TT_DAMAGE.PACKAGE_ID%TYPE,
        INUPRODSTATE    IN  TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS%TYPE
    )
    IS
    SELECT  /*+ index(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_04)*/
            TT_DAMAGE_PRODUCT.ROWID
    FROM    /*+ Ubicaci?n: TT_BCProduct.cuGetProductsOpen SAO183880 */
            TT_DAMAGE_PRODUCT
    WHERE   TT_DAMAGE_PRODUCT.PACKAGE_ID = INUFAULTID
    AND     TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS = INUPRODSTATE;

    
















    CURSOR CUFAULTSTOREOPENBYPROD(INUFAULTID    IN  TT_DAMAGE.PACKAGE_ID%TYPE)
    IS
    WITH DAMPRODUCTSABSD AS
    (
        SELECT  /*+ ordered use_nl(MO_PACKAGES_ASSO MO_PACKAGES)
                    index(MO_PACKAGES_ASSO IDX_MO_PACKAGES_ASSO_02)
                    index(MO_PACKAGES PK_MO_PACKAGES)*/
                MO_MOTIVE.PRODUCT_ID, MO_PACKAGES.PACKAGE_ID, MO_PACKAGES_ASSO.PACKAGES_ASSO_ID
        FROM    MO_PACKAGES_ASSO,
                MO_PACKAGES,
                MO_MOTIVE
        WHERE   MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = INUFAULTID
        AND     MO_PACKAGES.PACKAGE_ID = MO_PACKAGES_ASSO.PACKAGE_ID
        AND     MO_PACKAGES.PACKAGE_TYPE_ID = TT_BCCONSTANTS.CNUINDDAMAGE
        AND     MO_MOTIVE.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
    )
    SELECT  /*+ ordered use_nl(DamProductsAbsd tt_damage_element)
                index(TT_DAMAGE_ELEMENT IDX_TT_DAMAGE_ELEMENT_01)*/
            DISTINCT
            DAMPRODUCTSABSD.*
    FROM    DAMPRODUCTSABSD,
            TT_DAMAGE_PRODUCT
    WHERE   /*+ Ubicaci?n: TT_BCProduct.cuFaultsToReOpenByProd SAO201923 */
            TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS = TT_BCCONSTANTS.CSBNONPORCESEDDAMAGESTATUS
    AND     TT_DAMAGE_PRODUCT.PACKAGE_ID = INUFAULTID
    AND     TT_DAMAGE_PRODUCT.PRODUCT_ID = DAMPRODUCTSABSD.PRODUCT_ID;

    






















    CURSOR CUALLREGPRODUCTDAMAGES
    (
        INUPRODUCTID   IN TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE,
        IDTINITIALDATE IN TT_DAMAGE.INITIAL_DATE%TYPE,
        ITBFAULTTYPE   IN GE_TYTBIDNUMBER
    )
    IS
        SELECT /*+ leading(mo_motive)
                   use_nl(mo_motive mo_packages)
                   use_nl(mo_packages ps_motive_status) */
              MO_PACKAGES.PACKAGE_ID
        FROM  MO_PACKAGES,
              MO_MOTIVE,
              PS_MOTIVE_STATUS
              /*+ TT_BCProduct.cuAllRegProductDamages SAO191489 */
        WHERE MO_MOTIVE.PRODUCT_ID = INUPRODUCTID
          AND MO_MOTIVE.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
          
          AND MO_PACKAGES.PACKAGE_TYPE_ID = TT_BCCONSTANTS.CNUINDDAMAGE
          
          AND MO_PACKAGES.MOTIVE_STATUS_ID = PS_MOTIVE_STATUS.MOTIVE_STATUS_ID
          AND PS_MOTIVE_STATUS.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
          
          AND PS_MOTIVE_STATUS.MOTIVE_STATUS_ID <> MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK
          
          AND MO_PACKAGES.REQUEST_DATE >= NVL(IDTINITIALDATE,
                                              MO_PACKAGES.REQUEST_DATE)
          AND EXISTS (
                      SELECT /*+ leading(cc_caus_dama_type_rela) use_nl(cc_caus_dama_type_rela mo_motive) */
                            'X'
                      FROM  TABLE(CAST (ITBFAULTTYPE AS GE_TYTBIDNUMBER)) FAULTTYPES,
                            CC_CAUS_DAMA_TYPE_RELA
                      WHERE CC_CAUS_DAMA_TYPE_RELA.DAMAGE_TYPE_ID = FAULTTYPES.COLUMN_VALUE
                        AND CC_CAUS_DAMA_TYPE_RELA.CAUSAL_ID = MO_MOTIVE.CAUSAL_ID)
          AND NOT EXISTS (
                          SELECT /*+ use_nl(mo_packages mo_packages_asso)
                                     use_nl(mo_packages_asso tt_damage)
                                     index(mo_packages_asso IDX_MO_PACKAGES_ASSO_02) */
                                'X'
                          FROM  MO_PACKAGES_ASSO,
                                TT_DAMAGE
                          WHERE MO_PACKAGES_ASSO.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
                            AND MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = TT_DAMAGE.PACKAGE_ID);

    
















    CURSOR CUOPENDAMPRDBYPACK
    (
        INUFAULTID IN TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE
    )
    IS
        SELECT /*+ INDEX(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_04) */
               TT_DAMAGE_PRODUCT.*,
               TT_DAMAGE_PRODUCT.ROWID
        FROM TT_DAMAGE_PRODUCT
             /*+ TT_BCProduct.cuOpenDamPrdByPack SAO181853 */
        WHERE TT_DAMAGE_PRODUCT.PACKAGE_ID = INUFAULTID
          AND TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS = TT_BCCONSTANTS.CSBOPENDAMAGESTATUS;
          
    




















    CURSOR CUPRODDAMTODESORB
    (
        INUFAULTID     IN TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        IDTINITIALDATE IN TT_DAMAGE.INITIAL_DATE%TYPE,
        INUFAULTTYPEID IN TT_DAMAGE.REG_DAMAGE_TYPE_ID%TYPE
    )
    IS
        SELECT /*+ leading(mo_packages_asso)
                   use_nl(mo_packages_asso mo_packages)
                   use_nl(mo_packages mo_motive) */
               MO_PACKAGES_ASSO.*,
               MO_PACKAGES_ASSO.ROWID
        FROM   MO_PACKAGES_ASSO,
               MO_PACKAGES,
               MO_MOTIVE
               /*+ TT_BCProduct.cuProdDamToDesorb SAO202838 */
        WHERE MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = INUFAULTID
          AND MO_PACKAGES_ASSO.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
          AND MO_PACKAGES.PACKAGE_ID = MO_MOTIVE.PACKAGE_ID
          AND MO_MOTIVE.PRODUCT_ID IS NOT NULL
          
          AND MO_PACKAGES.PACKAGE_TYPE_ID = TT_BCCONSTANTS.CNUINDDAMAGE
          AND (
              
              MO_PACKAGES.REQUEST_DATE < NVL(IDTINITIALDATE,
                                             MO_PACKAGES.REQUEST_DATE)
           OR NOT EXISTS (
                          SELECT /*+ leading(cc_caus_dama_type_rela) use_nl(cc_caus_dama_type_rela mo_motive) */
                                'X'
                          FROM  CC_CAUS_DAMA_TYPE_RELA
                          WHERE CC_CAUS_DAMA_TYPE_RELA.DAMAGE_TYPE_ID = INUFAULTTYPEID
                            AND CC_CAUS_DAMA_TYPE_RELA.CAUSAL_ID = MO_MOTIVE.CAUSAL_ID)
              );
          
    
















    CURSOR CUOPENSELDAMPRDBYPACK
    (
        INUFAULTID IN TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE
    )
    IS
        SELECT /*+ INDEX(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_04) */
               TT_DAMAGE_PRODUCT.*,
               TT_DAMAGE_PRODUCT.ROWID
        FROM TT_DAMAGE_PRODUCT
             /*+ TT_BCProduct.cuOpenSelDamPrdByPack SAO181853 */
        WHERE TT_DAMAGE_PRODUCT.PACKAGE_ID = INUFAULTID
          AND TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS = TT_BCCONSTANTS.CSBOPENDAMAGESTATUS
          AND TT_DAMAGE_PRODUCT.REPAIRED = TT_BCCONSTANTS.CSBATTENDED_REPAIR;
          
    













    CURSOR CUDAMPRODBYPROD
    (
        NUPRODUCT_ID   TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        SELECT /*+ INDEX(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_02) */
               TT_DAMAGE_PRODUCT.*, ROWID
          FROM TT_DAMAGE_PRODUCT
               /*+ TT_BCProduct.cuDamProdByProd SAO181853 */
         WHERE TT_DAMAGE_PRODUCT.PRODUCT_ID = NUPRODUCT_ID;
          
    
    
    
    FUNCTION FSBVERSION
    RETURN VARCHAR2;
    
    FUNCTION FNUOBTENERTOTALPRODUCTOS
    (
       INUPACKAGEID IN TT_DAMAGE.PACKAGE_ID%TYPE
    )
    RETURN TT_DAMAGE.PRODUCTS_DAMAGED%TYPE;
    
    PROCEDURE GETDAMAPRODBYPACKANDPRODUCT
    (
        INUPACKAGEID        IN  TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        INUPRODUCTID        IN  TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE,
        ORCDAMAGE_PRODUCT   OUT DATT_DAMAGE_PRODUCT.STYTT_DAMAGE_PRODUCT
    );
    
    FUNCTION FTBRELADAMAGBYPROD
    (
        INUFAULTID          IN   MO_PACKAGES.PACKAGE_ID%TYPE,
        INUPRODUCTID        IN   PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
    
    PROCEDURE GETOPENDAMAPRODBYPACKANDPROD
    (
        INUFAULTID        IN  TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        INUPRODUCTID      IN  TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE,
        ORCDAMAGE_PRODUCT OUT DATT_DAMAGE_PRODUCT.STYTT_DAMAGE_PRODUCT
    );
    
    PROCEDURE UPDATEPRODUCTSTATUS
    (
        INUFAULTID IN TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        ISBSTATUS  IN TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS%TYPE
    );

    FUNCTION FBLHASPENDINGPRODS
    (
        INUFAULTID IN TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE
    )
    RETURN BOOLEAN;
    
    PROCEDURE GETPENDINGPRODUCTS
    (
        INUFAULTID  IN  TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        ORFPRODUCTS OUT CONSTANTS.TYREFCURSOR
    );
    
    FUNCTION FTBGETPRODSUSPS
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE,
        IDTINITIALDATE IN TT_DAMAGE.INITIAL_DATE%TYPE,
        IDTFINALDATE   IN MO_PACKAGES.ATTENTION_DATE%TYPE
    )
    RETURN TYTBSUSPENSIONS;
    
    FUNCTION FTBRELAFAULTSBYPRODDAM
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;

END TT_BCPRODUCT;
/
PACKAGE BODY TT_BCProduct
IS
    




















































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO202838';

    
    
    

    
    
    
    
    
    
    
    
    














    CURSOR CUDAMAGEPRDBYPACKANDPROD
    (
        INUPACKAGEID    TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        INUPRODUCTID    TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        SELECT /*+ INDEX(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_03) */
               TT_DAMAGE_PRODUCT.*, TT_DAMAGE_PRODUCT.ROWID
        FROM TT_DAMAGE_PRODUCT
             /*+ TT_BCProduct.cuDamagePrdByPackAndProd SAO69771 */
        WHERE TT_DAMAGE_PRODUCT.PACKAGE_ID = INUPACKAGEID
          AND TT_DAMAGE_PRODUCT.PRODUCT_ID = INUPRODUCTID;

    
    
    

    
    
    
    













    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;
    
    















    FUNCTION FNUOBTENERTOTALPRODUCTOS
    (
        INUPACKAGEID IN TT_DAMAGE.PACKAGE_ID%TYPE
    )
    RETURN TT_DAMAGE.PRODUCTS_DAMAGED%TYPE
    IS
        NUTOTAL TT_DAMAGE.PRODUCTS_DAMAGED%TYPE;
    BEGIN
        SELECT /*+ INDEX(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_04) */
               COUNT (TT_DAMAGE_PRODUCT.PRODUCT_ID)
        INTO NUTOTAL
        FROM  TT_DAMAGE_PRODUCT
              /*+ TT_BCProduct.fnuObtenerTotalProductos SAO114154 */
        WHERE TT_DAMAGE_PRODUCT.PACKAGE_ID = INUPACKAGEID
          AND TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS = TT_BCCONSTANTS.CSBOPENDAMAGESTATUS ;
        RETURN NUTOTAL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUOBTENERTOTALPRODUCTOS;
    
    













    PROCEDURE GETDAMAPRODBYPACKANDPRODUCT
    (
        INUPACKAGEID        IN  TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        INUPRODUCTID        IN  TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE,
        ORCDAMAGE_PRODUCT   OUT DATT_DAMAGE_PRODUCT.STYTT_DAMAGE_PRODUCT
    )
    IS
        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUDAMAGEPRDBYPACKANDPROD%ISOPEN) THEN
                CLOSE CUDAMAGEPRDBYPACKANDPROD;
            END IF;
        END;
    BEGIN
        UT_TRACE.TRACE('==> TT_BCProduct.GetDamaProdByPackAndProduct <INICIO>',11);
        CLOSECURSORS;

        
        OPEN CUDAMAGEPRDBYPACKANDPROD (INUPACKAGEID, INUPRODUCTID);

        
        FETCH CUDAMAGEPRDBYPACKANDPROD INTO ORCDAMAGE_PRODUCT;

        
        CLOSE CUDAMAGEPRDBYPACKANDPROD;

        UT_TRACE.TRACE('==> TT_BCProduct.GetDamaProdByPackAndProduct <FIN>',11);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END GETDAMAPRODBYPACKANDPRODUCT;
    
    


























    FUNCTION FTBRELADAMAGBYPROD
    (
        INUFAULTID          IN   MO_PACKAGES.PACKAGE_ID%TYPE,
        INUPRODUCTID        IN   PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO
    IS
        TBPACKASSO     DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;

        
        
        CURSOR CURELATPRODDAM IS
            SELECT /*+ leading(mo_packages_asso)
                       use_nl(mo_packages_asso mo_packages)
                       use_nl(mo_packages mo_motive) */
                   MO_PACKAGES_ASSO.*,
                   MO_PACKAGES_ASSO.ROWID
              FROM MO_PACKAGES_ASSO,
                   MO_PACKAGES,
                   MO_MOTIVE
                   /*+ TT_BCProduct.ftbRelaDamagByProd SAO181853 */
             WHERE MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = INUFAULTID
               AND MO_PACKAGES_ASSO.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
               AND MO_PACKAGES.PACKAGE_TYPE_ID = TT_BCCONSTANTS.CNUINDDAMAGE 
               AND MO_PACKAGES.PACKAGE_ID = MO_MOTIVE.PACKAGE_ID
               AND MO_MOTIVE.PRODUCT_ID = INUPRODUCTID;
    BEGIN
        UT_TRACE.TRACE('Inicia TT_BCProduct.ftbRelaDamagByProd ['||INUFAULTID||']- ['||INUPRODUCTID||']', 20);

        IF (CURELATPRODDAM%ISOPEN) THEN
            CLOSE CURELATPRODDAM;
        END IF;

        OPEN CURELATPRODDAM;
        FETCH CURELATPRODDAM BULK COLLECT INTO TBPACKASSO;
        CLOSE CURELATPRODDAM;

        UT_TRACE.TRACE('Finaliza TT_BCProduct.ftbRelaDamagByProd #Reg['||TBPACKASSO.COUNT||']', 20);
        RETURN TBPACKASSO;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CURELATPRODDAM%ISOPEN) THEN
                CLOSE CURELATPRODDAM;
            END IF;
            UT_TRACE.TRACE('EXCEPTION CONTROLLED_ERROR TT_BCProduct.ftbRelaDamagByProd', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CURELATPRODDAM%ISOPEN) THEN
                CLOSE CURELATPRODDAM;
            END IF;
            UT_TRACE.TRACE('EXCEPTION OTHERS TT_BCProduct.ftbRelaDamagByProd', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBRELADAMAGBYPROD;
    
    


















    PROCEDURE GETOPENDAMAPRODBYPACKANDPROD
    (
        INUFAULTID        IN  TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        INUPRODUCTID      IN  TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE,
        ORCDAMAGE_PRODUCT OUT DATT_DAMAGE_PRODUCT.STYTT_DAMAGE_PRODUCT
    )
    IS
        CURSOR CUOPENDAMPRDBYPACKANDPROD
        IS
            SELECT /*+ INDEX(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_03) */
                   TT_DAMAGE_PRODUCT.*,
                   TT_DAMAGE_PRODUCT.ROWID
            FROM TT_DAMAGE_PRODUCT
                 /*+ TT_BCProduct.GetOpenDamaProdByPackAndProd SAO181853 */
            WHERE TT_DAMAGE_PRODUCT.PACKAGE_ID = INUFAULTID
              AND TT_DAMAGE_PRODUCT.PRODUCT_ID = INUPRODUCTID
              AND TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS = TT_BCCONSTANTS.CSBOPENDAMAGESTATUS;
    
        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUOPENDAMPRDBYPACKANDPROD%ISOPEN) THEN
                CLOSE CUOPENDAMPRDBYPACKANDPROD;
            END IF;
        END;
    BEGIN
        CLOSECURSORS;

        
        OPEN CUOPENDAMPRDBYPACKANDPROD;

        
        FETCH CUOPENDAMPRDBYPACKANDPROD INTO ORCDAMAGE_PRODUCT;

        
        CLOSE CUOPENDAMPRDBYPACKANDPROD;

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END GETOPENDAMAPRODBYPACKANDPROD;
    
    
















    PROCEDURE UPDATEPRODUCTSTATUS
    (
        INUFAULTID IN TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        ISBSTATUS  IN TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS%TYPE
    )
    IS
        NULIMIT             NUMBER := 100;
        NUCOUNT             NUMBER;
        CURSOR CUTT_DAMAGE_PRODUCT
        IS
            SELECT /*+ INDEX(TT_DAMAGE_PRODUCT IDX_TT_DAMAGE_PRODUCT_04) */
                   TT_DAMAGE_PRODUCT.DAMAGES_PRODUCT_ID
            FROM   TT_DAMAGE_PRODUCT
                   /*+ TT_BCProduct.UpdateProductStatus SAO181853 */
            WHERE  TT_DAMAGE_PRODUCT.PACKAGE_ID = INUFAULTID
              AND  TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS = TT_BCCONSTANTS.CSBOPENDAMAGESTATUS;
        TYPE TYNUMARRAY  IS TABLE OF NUMBER      INDEX BY BINARY_INTEGER;
        TBDAMAGES_PRODUCT_ID  TYNUMARRAY;
        NUROWCOUNT            NUMBER := 0;

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUTT_DAMAGE_PRODUCT%ISOPEN) THEN
                CLOSE CUTT_DAMAGE_PRODUCT;
            END IF;
        END;
    BEGIN
        CLOSECURSORS;

        OPEN CUTT_DAMAGE_PRODUCT;
        LOOP
            FETCH CUTT_DAMAGE_PRODUCT
                BULK COLLECT INTO TBDAMAGES_PRODUCT_ID
                LIMIT NULIMIT;
            EXIT WHEN NUROWCOUNT = CUTT_DAMAGE_PRODUCT%ROWCOUNT;
            NUROWCOUNT := CUTT_DAMAGE_PRODUCT%ROWCOUNT;
            NUCOUNT := TBDAMAGES_PRODUCT_ID.COUNT;
            FORALL I IN 1..NUCOUNT
                UPDATE TT_DAMAGE_PRODUCT A
                SET    A.DAMAGE_PRODU_STATUS = ISBSTATUS
                WHERE  A.DAMAGES_PRODUCT_ID = TBDAMAGES_PRODUCT_ID(I);
            COMMIT;
        END LOOP;
        CLOSE CUTT_DAMAGE_PRODUCT;
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            ROLLBACK;
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END UPDATEPRODUCTSTATUS;

    














    FUNCTION FBLHASPENDINGPRODS
    (
        INUFAULTID IN TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        RCDAMAGE_PRODUCT DATT_DAMAGE_PRODUCT.STYTT_DAMAGE_PRODUCT; 
    
        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUOPENDAMPRDBYPACK%ISOPEN) THEN
                CLOSE CUOPENDAMPRDBYPACK;
            END IF;
        END;
    BEGIN
        CLOSECURSORS;

        
        OPEN CUOPENDAMPRDBYPACK(INUFAULTID);

        
        FETCH CUOPENDAMPRDBYPACK INTO RCDAMAGE_PRODUCT;

        
        CLOSE CUOPENDAMPRDBYPACK;
        
        
        IF (RCDAMAGE_PRODUCT.PACKAGE_ID IS NOT NULL) THEN
            RETURN TRUE;
        END IF;
        
        RETURN FALSE;
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END FBLHASPENDINGPRODS;
    
    

















    PROCEDURE GETPENDINGPRODUCTS
    (
        INUFAULTID  IN  TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        ORFPRODUCTS OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFPRODUCTS FOR
            SELECT /*+ leading(tt_damage_product)
                       use_nl(tt_damage_product pr_product)
                       use_nl(pr_product servicio) */
                   TT_DAMAGE_PRODUCT.PRODUCT_ID,
                   PR_PRODUCT.SERVICE_NUMBER,
                   SERVICIO.SERVCODI ||' - '|| SERVICIO.SERVDESC PRODUCTTYPE,
                   (SELECT AB_ADDRESS.ADDRESS_PARSED
                    FROM   AB_ADDRESS
                    WHERE AB_ADDRESS.ADDRESS_ID = PR_PRODUCT.ADDRESS_ID) ADDRESS
            FROM TT_DAMAGE_PRODUCT,
                 PR_PRODUCT,
                 SERVICIO
                 /*+ TT_BCProduct.GetPendingProducts SAO181853 */
            WHERE TT_DAMAGE_PRODUCT.PACKAGE_ID = INUFAULTID
              AND TT_DAMAGE_PRODUCT.DAMAGE_PRODU_STATUS = TT_BCCONSTANTS.CSBOPENDAMAGESTATUS
              AND TT_DAMAGE_PRODUCT.PRODUCT_ID = PR_PRODUCT.PRODUCT_ID
              AND PR_PRODUCT.PRODUCT_TYPE_ID = SERVICIO.SERVCODI;
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END GETPENDINGPRODUCTS;
    
    

















    FUNCTION FTBGETPRODSUSPS
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE,
        IDTINITIALDATE IN TT_DAMAGE.INITIAL_DATE%TYPE,
        IDTFINALDATE   IN MO_PACKAGES.ATTENTION_DATE%TYPE
    )
    RETURN TYTBSUSPENSIONS
    IS
        TBSUSPENSIONS TYTBSUSPENSIONS; 

        
        CURSOR CUSUSPENSIONS IS
            SELECT  /*+ index(pr_prod_suspension IDX_PR_PROD_SUSPENSION_03) */
                    (CASE WHEN PR_PROD_SUSPENSION.APLICATION_DATE < IDTINITIALDATE
                        THEN
                            IDTINITIALDATE
                        ELSE
                            PR_PROD_SUSPENSION.APLICATION_DATE
                        END) AS INITIAL_DATE,
                    (CASE WHEN NVL(PR_PROD_SUSPENSION.INACTIVE_DATE, UT_DATE.FDTMAXDATE) > IDTFINALDATE
                        THEN
                            IDTFINALDATE
                        ELSE
                            PR_PROD_SUSPENSION.INACTIVE_DATE
                        END) AS FINAL_DATE
            FROM  PR_PROD_SUSPENSION
                  /*+ TT_BCProduct.ftbGetProdSusps SAO194346 */
            WHERE PR_PROD_SUSPENSION.PRODUCT_ID = INUPRODUCTID
              AND (   (PR_PROD_SUSPENSION.APLICATION_DATE <= IDTINITIALDATE AND IDTINITIALDATE <= NVL(PR_PROD_SUSPENSION.INACTIVE_DATE,UT_DATE.FDTMAXDATE))
                   OR (PR_PROD_SUSPENSION.APLICATION_DATE <= IDTFINALDATE    AND IDTFINALDATE <= NVL(PR_PROD_SUSPENSION.INACTIVE_DATE,UT_DATE.FDTMAXDATE))
                   OR (IDTINITIALDATE <= PR_PROD_SUSPENSION.APLICATION_DATE AND NVL(PR_PROD_SUSPENSION.INACTIVE_DATE,UT_DATE.FDTMAXDATE) <= IDTFINALDATE))
             ORDER BY PR_PROD_SUSPENSION.APLICATION_DATE;
    BEGIN

        OPEN CUSUSPENSIONS;
        FETCH CUSUSPENSIONS BULK COLLECT INTO TBSUSPENSIONS;
        CLOSE CUSUSPENSIONS;

        RETURN TBSUSPENSIONS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUSUSPENSIONS%ISOPEN) THEN
                CLOSE CUSUSPENSIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUSUSPENSIONS%ISOPEN) THEN
                CLOSE CUSUSPENSIONS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETPRODSUSPS;
    
    














    FUNCTION FTBRELAFAULTSBYPRODDAM
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO
    IS
        TBPACKASSO     DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;

        
        
        CURSOR CURELATPRODDAM IS
            SELECT /*+ leading(mo_packages_asso)
                       use_nl(mo_packages_asso tt_damage)
                       use_nl(mo_packages_asso mo_packages)
                       use_nl(mo_packages mo_motive) */
                   MO_PACKAGES_ASSO.*,
                   MO_PACKAGES_ASSO.ROWID
              FROM MO_PACKAGES_ASSO,
                   TT_DAMAGE,
                   MO_PACKAGES,
                   MO_MOTIVE
                   /*+ TT_BCProduct.ftbRelaFaultsByProdDam SAO186582 */
             WHERE MO_PACKAGES_ASSO.PACKAGE_ID = INUPACKAGEID
               AND MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = TT_DAMAGE.PACKAGE_ID
               AND MO_PACKAGES_ASSO.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
               AND MO_PACKAGES.PACKAGE_TYPE_ID = TT_BCCONSTANTS.CNUINDDAMAGE 
               AND MO_PACKAGES.PACKAGE_ID = MO_MOTIVE.PACKAGE_ID
               AND MO_MOTIVE.PRODUCT_ID IS NOT NULL;
    BEGIN
        UT_TRACE.TRACE('Inicia TT_BCProduct.ftbRelaFaultsByProdDam ['||INUPACKAGEID||']', 20);

        IF (CURELATPRODDAM%ISOPEN) THEN
            CLOSE CURELATPRODDAM;
        END IF;

        OPEN CURELATPRODDAM;
        FETCH CURELATPRODDAM BULK COLLECT INTO TBPACKASSO;
        CLOSE CURELATPRODDAM;

        UT_TRACE.TRACE('Finaliza TT_BCProduct.ftbRelaFaultsByProdDam #Reg['||TBPACKASSO.COUNT||']', 20);
        RETURN TBPACKASSO;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CURELATPRODDAM%ISOPEN) THEN
                CLOSE CURELATPRODDAM;
            END IF;
            UT_TRACE.TRACE('EXCEPTION CONTROLLED_ERROR TT_BCProduct.ftbRelaFaultsByProdDam', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CURELATPRODDAM%ISOPEN) THEN
                CLOSE CURELATPRODDAM;
            END IF;
            UT_TRACE.TRACE('EXCEPTION OTHERS TT_BCProduct.ftbRelaFaultsByProdDam', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBRELAFAULTSBYPRODDAM;

END TT_BCPRODUCT;