CREATE OR REPLACE PACKAGE PKMEASELEMSUBSSERVMGR IS
   CURSOR CUELEMMEDIBYSUBSSERV( INUSESUNUSE IN SERVSUSC.SESUNUSE%TYPE ) IS
SELECT   /*+ ORDERED use_nl(compsesu,elmesesu) index(compsesu,IX_COMPSESU01) index(elmesesu,IX_EMSS_CMSS) */
                elmesesu.rowid, elmesesu.*, cmsssesu
       FROM      compsesu, elmesesu
       WHERE     emssfein <= sysdate     -- El elemento este activo.
       AND       emssfere > sysdate
       AND     emsscmss = cmssidco    -- Join Componente de servicio
       AND     cmsssesu = inuSesunuse;
   TYPE TYTBELEMMEDIBYSUBSSERV IS TABLE OF CUELEMMEDIBYSUBSSERV%ROWTYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBROWID IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
   TBELEMMEDIBYSUBSSERV TYTBELEMMEDIBYSUBSSERV;
   SBERRMSG VARCHAR2( 2000 );
   CNUINVALID_SERVSUSC CONSTANT NUMBER := 11017;
   CNUINVALID_SERVSUSCBASE CONSTANT NUMBER := 11508;
   CNUNOHAYSESUPORELME CONSTANT MENSAJE.MENSCODI%TYPE := 10026;
   CNUFECHARETIROINVALIDA CONSTANT MENSAJE.MENSCODI%TYPE := 10034;
   PROCEDURE GENMEASELEMCOMPBASIC( INUELME IN ELMESESU.EMSSELME%TYPE, ISBCOEM IN ELMESESU.EMSSCOEM%TYPE, IDTFEIN IN ELMESESU.EMSSFEIN%TYPE, INUCMSS IN ELMESESU.EMSSCMSS%TYPE, INUELMEEMAC IN ELEMMEDI.ELMEEMAC%TYPE := NULL, INUSSSPR IN ELMESESU.EMSSSSPR%TYPE := NULL );
   PROCEDURE FILLDATASUBSSERVMEEL( INUEMSSELME IN ELMESESU.EMSSELME%TYPE, INUEMSSCMSS IN ELMESESU.EMSSCMSS%TYPE, ISBEMSSCOEM IN ELMESESU.EMSSCOEM%TYPE, IDTEMSSFEIN IN ELMESESU.EMSSFEIN%TYPE, IDTEMSSFERE IN ELMESESU.EMSSFERE%TYPE, ORCELMESESU OUT ELMESESU%ROWTYPE, INUSSSPR IN ELMESESU.EMSSSSPR%TYPE := NULL );
   FUNCTION FNUGETCOUNTSUBSSERVBYMEEL( INUEMSSELME IN ELMESESU.EMSSELME%TYPE, INUSERVICIO IN SERVICIO.SERVCODI%TYPE := NULL, INUCACHE IN NUMBER := 1 )
    RETURN NUMBER;
   PROCEDURE VALEXISUBSSERVBYMEEL( INUELEMSESU IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 );
   PROCEDURE VALDUPSUBSSERVBYMEEL( INUELEMSESU IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 );
   PROCEDURE VALEXISSUBSCSERV( NUID_ELEMEN IN ELEMMEDI.ELMEIDEM%TYPE );
   FUNCTION FBLEXISTSUBSSERVBYMEEL( INUELEMSESU IN ELMESESU.EMSSELME%TYPE, INUSESUNUSE IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN BOOLEAN;
   PROCEDURE UPDATEWITHDRAWALDATE( INUELEMIDEM IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, IDTFECHARET IN ELMESESU.EMSSFERE%TYPE );
   FUNCTION FTBELEMMEDIBYSUBSSERV( INUSUBSSERV IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN TYTBELEMMEDIBYSUBSSERV;
   FUNCTION FNUGETCOUNTMEELBYSUBSSERV( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN NUMBER;
   PROCEDURE WITHDRAWMEASELEMBYCOMP( INUCOMPONENT IN COMPSESU.CMSSIDCO%TYPE, INUSERVSUSC IN COMPSESU.CMSSSESU%TYPE, IDTWITHDRAWDATE IN ELMESESU.EMSSFERE%TYPE );
   PROCEDURE WITHDRAWMEASELEMBYSUBSSERV( INUSERVSUSC IN COMPSESU.CMSSSESU%TYPE, IDTWITHDRAWDATE IN ELMESESU.EMSSFERE%TYPE );
   FUNCTION FBLEXISTASSOACTIVEBYSERVICE( INUELME IN ELMESESU.EMSSELME%TYPE, INUSERV IN SERVICIO.SERVCODI%TYPE )
    RETURN BOOLEAN;
   PROCEDURE VALINSTALLDATELESSCURR( IDTEMSSFEIN IN ELMESESU.EMSSFEIN%TYPE );
   PROCEDURE VALNULLINSTALLDATE( IDTEMSSFEIN IN ELMESESU.EMSSFEIN%TYPE );
   FUNCTION FNUGETCOMPANYASSIGELEM( INUMEASUREELEMENT IN ELEMMEDI.ELMECODI%TYPE )
    RETURN ELMESESU.EMSSCMSS%TYPE;
   FUNCTION FNUGETSUBSSERV( INUEMSSELME IN ELMESESU.EMSSELME%TYPE )
    RETURN NUMBER;
   FUNCTION FNUGETACTIVESERVMEASELEM( ISBELEMMEDI IN ELEMMEDI.ELMECODI%TYPE, IDTINICCOMU IN ELMESESU.EMSSFEIN%TYPE )
    RETURN SERVSUSC.SESUNUSE%TYPE;
   PROCEDURE GETSUBSSERVICESBYMEASELEM( ISBELEMMEDI IN ELEMMEDI.ELMECODI%TYPE, OTBEMSSSESU OUT PKBCELMESESU.TYEMSSSESU );
   PROCEDURE GETSUBSSERVICESBYMEASELEM( ISBELEMMEDI IN ELEMMEDI.ELMECODI%TYPE, OTBEMSSSESU OUT PKBCELMESESU.TYEMSSSESU, OTBEMSSSSPR OUT PKBCELMESESU.TYEMSSSSPR );
   FUNCTION FNUGETCOMPONENTBYELEM( INUELEMMEDI IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE )
    RETURN ELMESESU.EMSSCMSS%TYPE;
   FUNCTION FSBGETMEASELEMBYSUBSSERV( INUSESUNUSE IN SERVSUSC.SESUNUSE%TYPE )
    RETURN ELMESESU.EMSSCOEM%TYPE;
   PROCEDURE VALMEASELEMENTNOTISASSIGNED( ISBMEASUREELEMENT IN ELEMMEDI.ELMECODI%TYPE );
   PROCEDURE UPDATEWITHDRAWALDATE( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, IDTFECHARET IN ELMESESU.EMSSFERE%TYPE );
   FUNCTION FRCGETRECORD( INUELEMMEDI IN ELMESESU.EMSSELME%TYPE, IDTVIGENTE IN ELMESESU.EMSSFERE%TYPE := SYSDATE )
    RETURN ELMESESU%ROWTYPE;
   FUNCTION FSBGETLASTMEASELEMBYSUBSSERV( INUSESUNUSE IN SERVSUSC.SESUNUSE%TYPE, INUSERVICIO IN SERVSUSC.SESUSERV%TYPE )
    RETURN ELMESESU.EMSSCOEM%TYPE;
   FUNCTION FSBGETLASTSUBSSERVBYMEASELEM( ISBELEMCODI IN ELMESESU.EMSSCOEM%TYPE )
    RETURN ELMESESU.EMSSSESU%TYPE;
   PROCEDURE CLEARMEASELEMARRAY;
   FUNCTION FNUGETSUBSSERVBYMEASELEMCURR( ISBELEMCODI IN ELMESESU.EMSSCOEM%TYPE, IDTFECHA IN ELMESESU.EMSSFERE%TYPE )
    RETURN ELMESESU.EMSSSESU%TYPE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   FUNCTION FNUGETMEASELEMBYSUBSSERVCURR( INUSUSCSERV IN ELMESESU.EMSSSESU%TYPE, IDTFECHA IN ELMESESU.EMSSFERE%TYPE )
    RETURN ELMESESU.EMSSCOEM%TYPE;
   PROCEDURE UPINSTALLDATEBYCOMPONENT( INUPRODUCT IN ELMESESU.EMSSSESU%TYPE, INUCOMPONENT IN ELMESESU.EMSSCMSS%TYPE, IDTINSTALLATION IN ELMESESU.EMSSFEIN%TYPE );
   FUNCTION FRCGETRECORDACTIVESERVMEASELEM( ISBEMSSCOEM IN ELMESESU.EMSSCOEM%TYPE, IDTDATE IN ELMESESU.EMSSFEIN%TYPE )
    RETURN ELMESESU%ROWTYPE;
   FUNCTION FNUGETMEASELEMCOMUNAREA( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE )
    RETURN ELEMMEDI.ELMEEMAC%TYPE;
   FUNCTION FRCGETMEASELEMCOMUNAREA( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE )
    RETURN ELEMMEDI%ROWTYPE;
END;
/


CREATE OR REPLACE PACKAGE BODY PKMEASELEMSUBSSERVMGR IS
   CNUNO_EXIST_SUB_BY_ELEM CONSTANT NUMBER := 11017;
   CNU_ASOC_SERVSUSC_NO_VIGENTE CONSTANT NUMBER := 12000;
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO189803';
   CURSOR CUELEMMEASACTIVEBYSUBSSERV( INUELEMMEASURE IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE ) IS
SELECT  elmesesu.rowid, elmesesu.*, cmsssesu
    FROM    compsesu, elmesesu
    WHERE    emsselme = inuElemMeasure    -- Elemento medicion especif.
    AND    emssfein <= sysdate        -- Asociacion activa
    AND    emssfere > sysdate
    AND    emsscmss = cmssidco        -- Join Componente de servicio
    AND    cmsssesu = inuServSusc        -- Servicio suscrito
     AND    rownum = 1;
   CURSOR CUTOTALSBYELEMMEASUREACTIVE( INUELEMMEASURE IN ELMESESU.EMSSELME%TYPE, INUSERVICIO IN SERVICIO.SERVCODI%TYPE ) IS
SELECT  /*+ index ( servsusc pk_servsusc ) */
        emsselme          nuElemMeasure,     -- Elemento de Medicion
        nvl(count(*),0)   nuCountSubsServ    -- Cuantos Serv.Susc
    FROM    elmesesu, servsusc
    WHERE    emsselme = inuElemMeasure
    AND    emssfein <= sysdate        -- Asociacion activa
    AND    emssfere > sysdate
    AND    emsssesu = sesunuse        -- Join Servicio suscrito
    AND    sesuserv+0 = nvl( inuServicio,emssserv )
    GROUP BY emsselme;
   RCRECORDGROUP CUTOTALSBYELEMMEASUREACTIVE%ROWTYPE;
   RCRECORD CUELEMMEASACTIVEBYSUBSSERV%ROWTYPE;
   CURSOR CUSERVSUSCNOSERVICE( SBELEMMEDI IN ELEMMEDI.ELMECODI%TYPE, DTINICCOMU IN ELMESESU.EMSSFEIN%TYPE ) IS
SELECT /*+ INDEX_DESC (elmesesu IX_EMSS_COEM_FEIN) */
               *
          FROM elmesesu
         WHERE emsscoem =  sbelemmedi
           AND emssfein <= dtiniccomu
           AND ROWNUM = 1;
   PROCEDURE GETTOTALSRECBYMEASELEM( INUELEMCODI IN ELMESESU.EMSSELME%TYPE, INUSERVICIO IN SERVICIO.SERVCODI%TYPE := NULL, INUCACHE IN NUMBER := 1 );
   PROCEDURE ACCRECMEELEMBYSUBSSERV( INUELEMCODI IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 );
   PROCEDURE ACCTBLMEELEMBYSUBSSERV( INUSUBSSERV IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 );
   PROCEDURE ACCRECMEELEMBYSUBSSERV( INUELEMCODI IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    IS
      PROCEDURE CLEARMEMORY
       IS
         RCRECORDNULL CUELEMMEASACTIVEBYSUBSSERV%ROWTYPE;
       BEGIN
         PKERRORS.PUSH( 'pkMeasElemSubsServMgr.AccRecMeElemBySubsServ.ClearMemory' );
         RCRECORD := RCRECORDNULL;
         PKERRORS.POP;
      END CLEARMEMORY;
      FUNCTION FBLISRECORDINCACHE
       RETURN BOOLEAN
       IS
         BLRECORDUP BOOLEAN := FALSE;
       BEGIN
         PKERRORS.PUSH( 'pkMeasElemSubsServMgr.AccRecMeElemBySubsServ.fblIsRecordInCache' );
         IF ( RCRECORD.CMSSSESU = INUSERVSUSC AND RCRECORD.EMSSELME = INUELEMCODI ) THEN
            BLRECORDUP := TRUE;
         END IF;
         PKERRORS.POP;
         RETURN ( BLRECORDUP );
       EXCEPTION
         WHEN OTHERS THEN
            RAISE;
      END FBLISRECORDINCACHE;
      PROCEDURE LOADRECORD
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasElemSubsServMgr.AccRecMeElemBySubsServ.LoadRecord ' || INUELEMCODI || ' -- ' || INUSERVSUSC );
         OPEN CUELEMMEASACTIVEBYSUBSSERV( INUELEMCODI, INUSERVSUSC );
         FETCH CUELEMMEASACTIVEBYSUBSSERV
            INTO RCRECORD;
			UT_TRACE.TRACE('RCRECORD.EMSSSESU2 '||RCRECORD.EMSSSESU, 2 ); 
			UT_TRACE.TRACE('RCRECORD.EMSSCOEM2 '||RCRECORD.EMSSCOEM, 2 ); 
			UT_TRACE.TRACE('RCRECORD.EMSSELME2 '||RCRECORD.EMSSELME, 2 ); 
         CLOSE CUELEMMEASACTIVEBYSUBSSERV;
         PKERRORS.POP;
       EXCEPTION
         WHEN OTHERS THEN
            RAISE;
      END LOADRECORD;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.AccRecMeElemBySubsServ' );
	   UT_TRACE.TRACE('ACCRECMEELEMBYSUBSSERV.INUELEMCODI '||INUELEMCODI, 2 );
	   UT_TRACE.TRACE('ACCRECMEELEMBYSUBSSERV.INUSERVSUSC '||INUSERVSUSC, 2 );
	   UT_TRACE.TRACE('ACCRECMEELEMBYSUBSSERV.INUCACHE '||INUCACHE, 2 ); 
	   UT_TRACE.TRACE('RCRECORD.EMSSSESU '||RCRECORD.EMSSSESU, 2 ); 
	   UT_TRACE.TRACE('RCRECORD.EMSSCOEM '||RCRECORD.EMSSCOEM, 2 ); 
	   UT_TRACE.TRACE('RCRECORD.EMSSELME '||RCRECORD.EMSSELME, 2 ); 
	   CLEARMEMORY;
      IF ( INUCACHE = PKCONSTANTE.CACHE ) THEN
         IF ( FBLISRECORDINCACHE ) THEN
            PKERRORS.POP;
            RETURN;
         END IF;
      END IF;
      CLEARMEMORY;
      LOADRECORD;
      PKERRORS.POP;
	  UT_TRACE.TRACE('TERMINO ACCRECMEELEMBYSUBSSERV '||INUELEMCODI, 2 );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END ACCRECMEELEMBYSUBSSERV;
   PROCEDURE ACCTBLMEELEMBYSUBSSERV( INUSUBSSERV IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    IS
      PROCEDURE CLEARMEMORY
       IS
         TBTABLENULL TYTBELEMMEDIBYSUBSSERV;
       BEGIN
         TBELEMMEDIBYSUBSSERV := TBTABLENULL;
         TBELEMMEDIBYSUBSSERV.DELETE;
      END CLEARMEMORY;
      FUNCTION FBLISTABLEINCACHE
       RETURN BOOLEAN
       IS
         BLRECORDUP BOOLEAN := FALSE;
       BEGIN
         PKERRORS.PUSH( 'pkMeasElemSubsServMgr.AccTblMeElemBySubsServ.fblIsTableInCache' );
         IF ( TBELEMMEDIBYSUBSSERV.FIRST IS NULL ) THEN
            PKERRORS.POP;
            RETURN ( FALSE );
         END IF;
         IF ( TBELEMMEDIBYSUBSSERV( 1 ).CMSSSESU = INUSUBSSERV ) THEN
            BLRECORDUP := TRUE;
         END IF;
         PKERRORS.POP;
         RETURN ( BLRECORDUP );
       EXCEPTION
         WHEN OTHERS THEN
            PKERRORS.POP;
            RAISE;
      END FBLISTABLEINCACHE;
      PROCEDURE LOADRECORD
       IS
         NUIDX NUMBER := 0;
       BEGIN
         PKERRORS.PUSH( 'pkMeasElemSubsServMgr.AccTblMeElemBySubsServ.LoadRecord' );
         OPEN CUELEMMEDIBYSUBSSERV( INUSUBSSERV );
         LOOP
            NUIDX := NUIDX + 1;
            FETCH CUELEMMEDIBYSUBSSERV
               INTO TBELEMMEDIBYSUBSSERV( NUIDX );
            EXIT WHEN CUELEMMEDIBYSUBSSERV%NOTFOUND;
         END LOOP;
         CLOSE CUELEMMEDIBYSUBSSERV;
         PKERRORS.POP;
       EXCEPTION
         WHEN OTHERS THEN
            PKERRORS.POP;
            RAISE;
      END LOADRECORD;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.AccTblMeElemBySubsServ' );
      IF ( INUCACHE = PKCONSTANTE.CACHE ) THEN
         IF ( FBLISTABLEINCACHE ) THEN
            PKERRORS.POP;
            RETURN;
         END IF;
      END IF;
      CLEARMEMORY;
      LOADRECORD;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END ACCTBLMEELEMBYSUBSSERV;
   PROCEDURE GETTOTALSRECBYMEASELEM( INUELEMCODI IN ELMESESU.EMSSELME%TYPE, INUSERVICIO IN SERVICIO.SERVCODI%TYPE := NULL, INUCACHE IN NUMBER := 1 )
    IS
      PROCEDURE CLEARMEMORY
       IS
         RCRECORDNULL CUTOTALSBYELEMMEASUREACTIVE%ROWTYPE;
       BEGIN
         PKERRORS.PUSH( 'pkMeasElemSubsServMgr.GetTotalsRecByMeasElem.ClearMemory' );
         RCRECORDGROUP := RCRECORDNULL;
         PKERRORS.POP;
      END CLEARMEMORY;
      FUNCTION FBLISRECORDINCACHE
       RETURN BOOLEAN
       IS
         BLRECORDUP BOOLEAN := FALSE;
       BEGIN
         PKERRORS.PUSH( 'pkMeasElemSubsServMgr.GetTotalsRecByMeasElem.fblIsRecordInCache' );
         IF ( RCRECORDGROUP.NUELEMMEASURE = INUELEMCODI ) THEN
            BLRECORDUP := TRUE;
         END IF;
         PKERRORS.POP;
         RETURN ( BLRECORDUP );
       EXCEPTION
         WHEN OTHERS THEN
            RAISE;
      END FBLISRECORDINCACHE;
      PROCEDURE LOADRECORD
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasElemSubsServMgr.GetTotalsRecByMeasElem.LoadRecord' );
         OPEN CUTOTALSBYELEMMEASUREACTIVE( INUELEMCODI, INUSERVICIO );
         FETCH CUTOTALSBYELEMMEASUREACTIVE
            INTO RCRECORDGROUP;
         CLOSE CUTOTALSBYELEMMEASUREACTIVE;
         PKERRORS.POP;
       EXCEPTION
         WHEN OTHERS THEN
            RAISE;
      END LOADRECORD;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.GetTotalsRecByMeasElem' );
      IF ( INUCACHE = PKCONSTANTE.CACHE ) THEN
         IF ( FBLISRECORDINCACHE ) THEN
            PKERRORS.POP;
            RETURN;
         END IF;
      END IF;
      CLEARMEMORY;
      LOADRECORD;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END GETTOTALSRECBYMEASELEM;
   PROCEDURE FILLDATASUBSSERVMEEL( INUEMSSELME IN ELMESESU.EMSSELME%TYPE, INUEMSSCMSS IN ELMESESU.EMSSCMSS%TYPE, ISBEMSSCOEM IN ELMESESU.EMSSCOEM%TYPE, IDTEMSSFEIN IN ELMESESU.EMSSFEIN%TYPE, IDTEMSSFERE IN ELMESESU.EMSSFERE%TYPE, ORCELMESESU OUT ELMESESU%ROWTYPE, INUSSSPR IN ELMESESU.EMSSSSPR%TYPE := NULL )
    IS
      RCELMESESU ELMESESU%ROWTYPE;
      NUSESUNUSE SERVSUSC.SESUNUSE%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.FillDataSubsServMeEl' );
      ORCELMESESU := RCELMESESU;
      ORCELMESESU.EMSSELME := INUEMSSELME;
      ORCELMESESU.EMSSCMSS := INUEMSSCMSS;
      ORCELMESESU.EMSSCOEM := ISBEMSSCOEM;
      ORCELMESESU.EMSSFEIN := IDTEMSSFEIN;
      ORCELMESESU.EMSSFERE := IDTEMSSFERE;
      NUSESUNUSE := PKTBLCOMPSESU.FNUGETSERVICENUMBER( INUEMSSCMSS );
      ORCELMESESU.EMSSSESU := NUSESUNUSE;
      ORCELMESESU.EMSSSSPR := NVL( INUSSSPR, ORCELMESESU.EMSSSESU );
      ORCELMESESU.EMSSSERV := PKTBLSERVSUSC.FNUGETSERVICE( NUSESUNUSE );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FILLDATASUBSSERVMEEL;
   PROCEDURE GENMEASELEMCOMPBASIC( INUELME IN ELMESESU.EMSSELME%TYPE, ISBCOEM IN ELMESESU.EMSSCOEM%TYPE, IDTFEIN IN ELMESESU.EMSSFEIN%TYPE, INUCMSS IN ELMESESU.EMSSCMSS%TYPE, INUELMEEMAC IN ELEMMEDI.ELMEEMAC%TYPE := NULL, INUSSSPR IN ELMESESU.EMSSSSPR%TYPE := NULL )
    IS
      RCELMESESU ELMESESU%ROWTYPE;
      NUSESUPROP ELMESESU.EMSSSSPR%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.GenMeasElemCompBasic' );
      PKMEASELEMSUBSSERVMGR.FILLDATASUBSSERVMEEL( INUELME, INUCMSS, ISBCOEM, IDTFEIN, PKGENERALSERVICES.FDTGETMAXDATE, RCELMESESU, INUSSSPR );
      PKBCELMESESU.INSRECORD( RCELMESESU );
      PKTBLELEMMEDI.UPDATEDEPENDENTCOMMONAREA( INUELME, INUELMEEMAC );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END GENMEASELEMCOMPBASIC;
   PROCEDURE GETSUBSSERVICESBYMEASELEM( ISBELEMMEDI IN ELEMMEDI.ELMECODI%TYPE, OTBEMSSSESU OUT PKBCELMESESU.TYEMSSSESU )
    IS
      NUINDSAL NUMBER := 1;
      NUIDX NUMBER;
      TBEMSSSESU PKBCELMESESU.TYEMSSSESU;
      CNUSESUBLOCK CONSTANT NUMBER := 100;
      CURSOR CUELMESESU IS
SELECT emsssesu
    FROM   elmesesu
    WHERE  emsscoem =  isbelemmedi AND
           emssfein <= sysdate    AND
           emssfere > sysdate     AND
           emsssesu is not null;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.GetSubsServicesByMeasElem' );
      OPEN CUELMESESU;
      LOOP
         FETCH CUELMESESU
            BULK COLLECT INTO TBEMSSSESU
            LIMIT CNUSESUBLOCK;
         EXIT WHEN ( TBEMSSSESU.FIRST IS NULL );
         NUIDX := TBEMSSSESU.FIRST;
         LOOP
            EXIT WHEN NUIDX IS NULL;
            OTBEMSSSESU( NUINDSAL ) := TBEMSSSESU( NUIDX );
            NUIDX := TBEMSSSESU.NEXT( NUIDX );
            NUINDSAL := NUINDSAL + 1;
         END LOOP;
         EXIT WHEN ( CUELMESESU%NOTFOUND );
      END LOOP;
      CLOSE CUELMESESU;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END GETSUBSSERVICESBYMEASELEM;
   PROCEDURE GETSUBSSERVICESBYMEASELEM( ISBELEMMEDI IN ELEMMEDI.ELMECODI%TYPE, OTBEMSSSESU OUT PKBCELMESESU.TYEMSSSESU, OTBEMSSSSPR OUT PKBCELMESESU.TYEMSSSSPR )
    IS
      CURSOR CUELMESESU IS
SELECT emsssesu, emsssspr
    FROM   elmesesu
    WHERE  emsscoem =  isbelemmedi AND
           emssfein <= sysdate    AND
           emssfere > sysdate     AND
           emsssesu is not null;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.GetSubsServicesByMeasElem' );
      OTBEMSSSESU.DELETE;
      OTBEMSSSSPR.DELETE;
      OPEN CUELMESESU;
      FETCH CUELMESESU
         BULK COLLECT INTO OTBEMSSSESU, OTBEMSSSSPR;
      CLOSE CUELMESESU;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END GETSUBSSERVICESBYMEASELEM;
   PROCEDURE UPDATEWITHDRAWALDATE( INUELEMIDEM IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, IDTFECHARET IN ELMESESU.EMSSFERE%TYPE )
    IS
      PROCEDURE VALBASICDATA
       IS
       BEGIN
         VALEXISUBSSERVBYMEEL( INUELEMIDEM, INUSERVSUSC, PKCONSTANTE.NOCACHE );
         IF ( IDTFECHARET < RCRECORD.EMSSFEIN ) THEN
            PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUFECHARETIROINVALIDA );
            RAISE LOGIN_DENIED;
         END IF;
       EXCEPTION
         WHEN OTHERS THEN
            RAISE;
      END VALBASICDATA;
      PROCEDURE UPDATEDATE
       IS
       BEGIN
         UPDATE  elmesesu
        SET     emssfere = idtFechaRet
        WHERE     rowid = rcRecord.rowid;
       EXCEPTION
         WHEN OTHERS THEN
            RAISE;
      END UPDATEDATE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.UpdateWithDrawalDate' );
      IF ( IDTFECHARET IS NULL ) THEN
         PKERRORS.POP;
         RETURN;
      END IF;
      VALBASICDATA;
      UPDATEDATE;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END UPDATEWITHDRAWALDATE;
   PROCEDURE VALDUPSUBSSERVBYMEEL( INUELEMSESU IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    IS
      CNUYAEXISTE CONSTANT MENSAJE.MENSCODI%TYPE := 10012;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.ValDupSubsServByMeEl' );
      ACCRECMEELEMBYSUBSSERV( INUELEMSESU, INUSERVSUSC, INUCACHE );
      IF ( RCRECORD.EMSSELME IS NOT NULL ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUYAEXISTE );
         RAISE LOGIN_DENIED;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END VALDUPSUBSSERVBYMEEL;
   PROCEDURE VALEXISUBSSERVBYMEEL( INUELEMSESU IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    IS
      CNUNOEXISTE CONSTANT MENSAJE.MENSCODI%TYPE := 10011;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.ValExiSubsServByMeEl' );
      IF ( NOT FBLEXISTSUBSSERVBYMEEL( INUELEMSESU, INUSERVSUSC, INUCACHE ) ) THEN
	     UT_TRACE.TRACE('IF ( NOT FBLEXISTSUBSSERVBYMEEL( INUELEMSESU, INUSERVSUSC, INUCACHE ) ) THEN', 2 );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUNOEXISTE );
         RAISE LOGIN_DENIED;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END VALEXISUBSSERVBYMEEL;
   PROCEDURE VALEXISSUBSCSERV( NUID_ELEMEN IN ELEMMEDI.ELMEIDEM%TYPE )
    IS
      NUSERVICIO SERVICIO.SERVCODI%TYPE := NULL;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.ValExisSubscServ' );
      IF ( FNUGETCOUNTSUBSSERVBYMEEL( NUID_ELEMEN, NUSERVICIO, PKCONSTANTE.NOCACHE ) = 0 ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUNOHAYSESUPORELME );
         RAISE LOGIN_DENIED;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END VALEXISSUBSCSERV;
   PROCEDURE VALINSTALLDATELESSCURR( IDTEMSSFEIN IN ELMESESU.EMSSFEIN%TYPE )
    IS
      CNUFECHAINSTWRONG CONSTANT MENSAJE.MENSCODI%TYPE := 4497;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.ValInstallDateLessCurr' );
      IF ( IDTEMSSFEIN > SYSDATE ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_SAT, CNUFECHAINSTWRONG );
         RAISE LOGIN_DENIED;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END VALINSTALLDATELESSCURR;
   PROCEDURE VALNULLINSTALLDATE( IDTEMSSFEIN IN ELMESESU.EMSSFEIN%TYPE )
    IS
      CNUFECHAINSTALACIONNULA CONSTANT MENSAJE.MENSCODI%TYPE := 4498;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.ValNullInstallDate' );
      IF ( IDTEMSSFEIN IS NULL ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_SAT, CNUFECHAINSTALACIONNULA );
         RAISE LOGIN_DENIED;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END VALNULLINSTALLDATE;
   PROCEDURE WITHDRAWMEASELEMBYSUBSSERV( INUSERVSUSC IN COMPSESU.CMSSSESU%TYPE, IDTWITHDRAWDATE IN ELMESESU.EMSSFERE%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.WithDrawMeasElemBySubsServ' );
      UPDATE elmesesu
    SET    emssfere = case WHEN emssfein > idtWithDrawDate THEN emssfein ELSE idtWithDrawDate END
    WHERE  emssfere > idtWithDrawDate
    AND    emsscmss in (SELECT cmssidco 
            FROM   compsesu
            WHERE  cmsssesu = inuServsusc);
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RETURN;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END WITHDRAWMEASELEMBYSUBSSERV;
   PROCEDURE WITHDRAWMEASELEMBYCOMP( INUCOMPONENT IN COMPSESU.CMSSIDCO%TYPE, INUSERVSUSC IN COMPSESU.CMSSSESU%TYPE, IDTWITHDRAWDATE IN ELMESESU.EMSSFERE%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.WithDrawMeasElemByComp' );
      PKGENERALSERVICES.TRACEDATA( 'Servicio suscrito : ' || INUSERVSUSC );
      PKGENERALSERVICES.TRACEDATA( 'ID componente     : ' || INUCOMPONENT );
      PKGENERALSERVICES.TRACEDATA( 'Fecha de retiro   : ' || IDTWITHDRAWDATE );
      PKGENERALSERVICES.TRACEDATA( 'Se actualiza el medidor de area comun...' );
      UPDATE  --+ use_nl(elmesesu elemmedi)
            elemmedi
    SET     elmeemac = null
    WHERE   elmeidem in
            (
                SELECT  emsselme
                FROM    elmesesu
                WHERE   emssfere > idtWithDrawDate
                AND     emsscmss = inuComponent
                AND     emsssesu = inuServsusc
            );
      PKGENERALSERVICES.TRACEDATA( 'Retirando elementos de medicion ....' );
      UPDATE elmesesu
    SET    emssfere = idtWithDrawDate
    WHERE  emssfere > idtWithDrawDate
    AND    emsscmss = inuComponent AND
           emsssesu = inuServsusc;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RETURN;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END WITHDRAWMEASELEMBYCOMP;
   FUNCTION FBLEXISTASSOACTIVEBYSERVICE( INUELME IN ELMESESU.EMSSELME%TYPE, INUSERV IN SERVICIO.SERVCODI%TYPE )
    RETURN BOOLEAN
    IS
      NUSERVSUSC SERVSUSC.SESUNUSE%TYPE := NULL;
      BLEXIST BOOLEAN := TRUE;
      CURSOR CUASSOACTIVESERVICE IS
SELECT     cmsssesu
    FROM     compsesu,
        elmesesu
    WHERE    emsselme = inuElMe
    AND     emssfein <= sysdate     -- Asociacion activa
    AND     emssfere > sysdate
    AND    emsscmss = cmssidco    -- Join con Componente Servicio Susct.
    AND    exists (select 'x'
                from   servsusc
                where  sesuserv = inuServ
                and    sesunuse = cmsssesu)
    AND    rownum    = 1;
    BEGIN
      PKERRORS.PUSH( 'fblExistAssoActiveByService' );
      OPEN CUASSOACTIVESERVICE;
      FETCH CUASSOACTIVESERVICE
         INTO NUSERVSUSC;
      CLOSE CUASSOACTIVESERVICE;
      IF ( NUSERVSUSC IS NULL ) THEN
         BLEXIST := FALSE;
      END IF;
      PKERRORS.POP;
      RETURN ( BLEXIST );
   END;
   FUNCTION FBLEXISTSUBSSERVBYMEEL( INUELEMSESU IN ELMESESU.EMSSELME%TYPE, INUSESUNUSE IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN BOOLEAN
    IS
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fblExistSubsServByMeEl' );
      ACCRECMEELEMBYSUBSSERV( INUELEMSESU, INUSESUNUSE, INUCACHE );
	  UT_TRACE.TRACE('RCRECORD.EMSSELME'||RCRECORD.EMSSELME, 2 );
      IF ( RCRECORD.EMSSELME IS NULL ) THEN
         PKERRORS.POP;
         RETURN FALSE;
      END IF;
      PKERRORS.POP;
      RETURN TRUE;
   END FBLEXISTSUBSSERVBYMEEL;
   FUNCTION FNUGETACTIVESERVMEASELEM( ISBELEMMEDI IN ELEMMEDI.ELMECODI%TYPE, IDTINICCOMU IN ELMESESU.EMSSFEIN%TYPE )
    RETURN SERVSUSC.SESUNUSE%TYPE
    IS
      RCELMESESU ELMESESU%ROWTYPE := NULL;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fnuGetActiveServMeasElem' );
      RCELMESESU := FRCGETRECORDACTIVESERVMEASELEM( ISBELEMMEDI, IDTINICCOMU );
      PKERRORS.POP;
      RETURN ( RCELMESESU.EMSSSESU );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETACTIVESERVMEASELEM;
   FUNCTION FNUGETCOMPANYASSIGELEM( INUMEASUREELEMENT IN ELEMMEDI.ELMECODI%TYPE )
    RETURN ELMESESU.EMSSCMSS%TYPE
    IS
      CNUTODAY CONSTANT DATE := SYSDATE;
      CNUNOT_ASSIGNATION CONSTANT NUMBER := 10462;
      CURSOR CUELMESESU IS
SELECT emsscmss
                           FROM elmesesu
                          WHERE emsscoem = inuMeasureElement
                            AND emssfein < cnuTODAY
                            AND emssfere > cnuTODAY
                            AND rownum = 1;
      NUCOMPONENTID ELMESESU.EMSSCMSS%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fnuGetCompAnyAssigElem' );
      OPEN CUELMESESU;
      FETCH CUELMESESU
         INTO NUCOMPONENTID;
      IF ( CUELMESESU%NOTFOUND ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUNOT_ASSIGNATION );
         CLOSE CUELMESESU;
         RAISE LOGIN_DENIED;
      END IF;
      CLOSE CUELMESESU;
      PKERRORS.POP;
      RETURN ( NUCOMPONENTID );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETCOMPANYASSIGELEM;
   FUNCTION FNUGETCOMPONENTBYELEM( INUELEMMEDI IN ELMESESU.EMSSELME%TYPE, INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE )
    RETURN ELMESESU.EMSSCMSS%TYPE
    IS
      NUCOMPONETE ELMESESU.EMSSCMSS%TYPE;
      PROCEDURE VALBASICDATA
       IS
       BEGIN
         VALEXISUBSSERVBYMEEL( INUELEMMEDI, INUSERVSUSC, PKCONSTANTE.NOCACHE );
       EXCEPTION
         WHEN OTHERS THEN
            RAISE;
      END VALBASICDATA;
      PROCEDURE GETCOMPONENT
       IS
         CURSOR CUELMESESU IS
SELECT  emsscmss
        FROM    elmesesu
        WHERE     rowid = rcRecord.rowid;
       BEGIN
         PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fnuGetComponentByElem.GetComponent' );
         IF ( CUELMESESU%ISOPEN ) THEN
            CLOSE CUELMESESU;
         END IF;
         OPEN CUELMESESU;
         FETCH CUELMESESU
            INTO NUCOMPONETE;
         IF ( CUELMESESU%NOTFOUND ) THEN
			UT_TRACE.TRACE('IF ( CUELMESESU%NOTFOUND ) THEN', 2 );
            PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, 10011 );
            RAISE LOGIN_DENIED;
         END IF;
         CLOSE CUELMESESU;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            RAISE;
      END GETCOMPONENT;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fnuGetComponentByElem' );
      VALBASICDATA;
      GETCOMPONENT;
      PKERRORS.POP;
      RETURN ( NUCOMPONETE );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETCOMPONENTBYELEM;
   FUNCTION FNUGETCOUNTMEELBYSUBSSERV( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN NUMBER
    IS
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fnuGetCountMeElBySubsServ' );
      ACCTBLMEELEMBYSUBSSERV( INUSERVSUSC, INUCACHE );
      PKERRORS.POP;
      RETURN ( NVL( TBELEMMEDIBYSUBSSERV.COUNT, 0 ) );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETCOUNTMEELBYSUBSSERV;
   FUNCTION FNUGETCOUNTSUBSSERVBYMEEL( INUEMSSELME IN ELMESESU.EMSSELME%TYPE, INUSERVICIO IN SERVICIO.SERVCODI%TYPE := NULL, INUCACHE IN NUMBER := 1 )
    RETURN NUMBER
    IS
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fnuGetCountSubsServByMeEl' );
      GETTOTALSRECBYMEASELEM( INUEMSSELME, INUSERVICIO, INUCACHE );
      PKERRORS.POP;
      RETURN ( NVL( RCRECORDGROUP.NUCOUNTSUBSSERV, 0 ) );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETCOUNTSUBSSERVBYMEEL;
   FUNCTION FNUGETSUBSSERV( INUEMSSELME IN ELMESESU.EMSSELME%TYPE )
    RETURN NUMBER
    IS
      NUSERVSUSC SERVSUSC.SESUNUSE%TYPE;
      CURSOR CUSERVSUSC IS
SELECT emsssesu
    FROM   elmesesu
    WHERE  inuemsselme = emsselme;
    BEGIN
      IF ( CUSERVSUSC%ISOPEN ) THEN
         CLOSE CUSERVSUSC;
      END IF;
      OPEN CUSERVSUSC;
      FETCH CUSERVSUSC
         INTO NUSERVSUSC;
      IF ( CUSERVSUSC%NOTFOUND ) THEN
         CLOSE CUSERVSUSC;
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, CNUNO_EXIST_SUB_BY_ELEM );
         RAISE LOGIN_DENIED;
      END IF;
      CLOSE CUSERVSUSC;
      RETURN ( NUSERVSUSC );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETSUBSSERV;
   FUNCTION FTBELEMMEDIBYSUBSSERV( INUSUBSSERV IN SERVSUSC.SESUNUSE%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN TYTBELEMMEDIBYSUBSSERV
    IS
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.ftbElemMediBySubsServ' );
      ACCTBLMEELEMBYSUBSSERV( INUSUBSSERV, INUCACHE );
      PKERRORS.POP;
      RETURN ( TBELEMMEDIBYSUBSSERV );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FTBELEMMEDIBYSUBSSERV;
   PROCEDURE CLEARMEASELEMARRAY
    IS
      TBNULLARRAY TYTBELEMMEDIBYSUBSSERV;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.ClearMeasElemArray' );
      TBELEMMEDIBYSUBSSERV.DELETE;
      TBELEMMEDIBYSUBSSERV := TBNULLARRAY;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END CLEARMEASELEMARRAY;
   FUNCTION FSBGETMEASELEMBYSUBSSERV( INUSESUNUSE IN SERVSUSC.SESUNUSE%TYPE )
    RETURN ELMESESU.EMSSCOEM%TYPE
    IS
      CURSOR CUELMESESU IS
SELECT emsscoem
    FROM elmesesu
    WHERE emsssesu = inuSesunuse
    AND   emssfere > sysdate
    AND   rownum = 1 ;
      SBEMSSCOEM ELMESESU.EMSSCOEM%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fsbGetMeasElemBySubsServ' );
      OPEN CUELMESESU;
      FETCH CUELMESESU
         INTO SBEMSSCOEM;
      CLOSE CUELMESESU;
      PKERRORS.POP;
      RETURN ( SBEMSSCOEM );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FSBGETMEASELEMBYSUBSSERV;
   PROCEDURE VALMEASELEMENTNOTISASSIGNED( ISBMEASUREELEMENT IN ELEMMEDI.ELMECODI%TYPE )
    IS
      CNUTODAY CONSTANT DATE := SYSDATE;
      CNUASSIGNED CONSTANT NUMBER := 10465;
      CURSOR CUELMESESU IS
SELECT 'x'
                           FROM elmesesu
                          WHERE emsscoem = isbMeasureElement
                            AND emssfein < cnuTODAY
                            AND emssfere > cnuTODAY
                            AND rownum = 1;
      SBFOUND VARCHAR2( 1 );
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.ValMeasElementNotIsAssigned' );
      OPEN CUELMESESU;
      FETCH CUELMESESU
         INTO SBFOUND;
      IF ( CUELMESESU%FOUND ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUASSIGNED );
         CLOSE CUELMESESU;
         RAISE LOGIN_DENIED;
      END IF;
      CLOSE CUELMESESU;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END VALMEASELEMENTNOTISASSIGNED;
   PROCEDURE UPDATEWITHDRAWALDATE( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, IDTFECHARET IN ELMESESU.EMSSFERE%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.UpdateWithDrawalDate' );
      IF ( IDTFECHARET IS NULL ) THEN
         PKERRORS.POP;
         RETURN;
      END IF;
      UPDATE  elmesesu
       SET  emssfere = idtFechaRet
     WHERE  emsssesu = inuServsusc
       AND  emssfein < idtFechaRet
       AND  emssfere >= idtFechaRet;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END UPDATEWITHDRAWALDATE;
   FUNCTION FRCGETRECORD( INUELEMMEDI IN ELMESESU.EMSSELME%TYPE, IDTVIGENTE IN ELMESESU.EMSSFERE%TYPE := SYSDATE )
    RETURN ELMESESU%ROWTYPE
    IS
      CNURECORD_NO_EXISTE CONSTANT MENSAJE.MENSCODI%TYPE := 10026;
      RCELMESESU ELMESESU%ROWTYPE;
      CURSOR CUASSOACTIVESERVICE( INUELME IN ELMESESU.EMSSELME%TYPE, IDTVIGEN IN ELMESESU.EMSSFERE%TYPE ) IS
SELECT  *
          FROM  elmesesu
         WHERE  emsselme = inuElme
           AND  emssfein <= idtVigen    -- Asociacion activa a la fecha
           AND  emssfere >  idtVigen
           AND  EXISTS (SELECT 'x' FROM compsesu
                         WHERE cmsssesu = emsssesu
                           AND cmssidco = emsscmss
                       )           -- Join con Componente Servicio Susct.
       AND    rownum    = 1;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.frcGetRecord' );
      IF ( CUASSOACTIVESERVICE%ISOPEN ) THEN
         CLOSE CUASSOACTIVESERVICE;
      END IF;
      OPEN CUASSOACTIVESERVICE( INUELEMMEDI, IDTVIGENTE );
      FETCH CUASSOACTIVESERVICE
         INTO RCELMESESU;
      IF ( CUASSOACTIVESERVICE%NOTFOUND ) THEN
         PKERRORS.POP;
         CLOSE CUASSOACTIVESERVICE;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
      RETURN ( RCELMESESU );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNURECORD_NO_EXISTE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRCGETRECORD;
   FUNCTION FSBGETLASTMEASELEMBYSUBSSERV( INUSESUNUSE IN SERVSUSC.SESUNUSE%TYPE, INUSERVICIO IN SERVSUSC.SESUSERV%TYPE )
    RETURN ELMESESU.EMSSCOEM%TYPE
    IS
      CURSOR CUELMESESU IS
SELECT emsscoem
    FROM elmesesu
    WHERE emsssesu = inuSesunuse
    AND   emssserv = inuServicio
    AND   emssfere = ( SELECT  max ( emssfere )
                       FROM elmesesu
                       WHERE emsssesu = inuSesunuse 
                       AND   emssserv = inuServicio ) ;
      SBEMSSCOEM ELMESESU.EMSSCOEM%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fsbLastGetMeasElemBySubsServ' );
      OPEN CUELMESESU;
      FETCH CUELMESESU
         INTO SBEMSSCOEM;
      CLOSE CUELMESESU;
      PKERRORS.POP;
      RETURN ( SBEMSSCOEM );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FSBGETLASTMEASELEMBYSUBSSERV;
   FUNCTION FSBGETLASTSUBSSERVBYMEASELEM( ISBELEMCODI IN ELMESESU.EMSSCOEM%TYPE )
    RETURN ELMESESU.EMSSSESU%TYPE
    IS
      CURSOR CUELMESESU IS
SELECT emsssesu
    FROM elmesesu
    WHERE emsscoem = isbElemCodi
    AND   emssfere = ( SELECT  max ( emssfere )
                       FROM elmesesu
                       WHERE emsscoem = isbElemCodi ) ;
      NUSERVSUSC ELMESESU.EMSSSESU%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fsbGetLastSubsServByMeasElem' );
      OPEN CUELMESESU;
      FETCH CUELMESESU
         INTO NUSERVSUSC;
      CLOSE CUELMESESU;
      PKERRORS.POP;
      RETURN ( NUSERVSUSC );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FSBGETLASTSUBSSERVBYMEASELEM;
   FUNCTION FNUGETSUBSSERVBYMEASELEMCURR( ISBELEMCODI IN ELMESESU.EMSSCOEM%TYPE, IDTFECHA IN ELMESESU.EMSSFERE%TYPE )
    RETURN ELMESESU.EMSSSESU%TYPE
    IS
      CURSOR CUELMESESU IS
SELECT emsssesu
    FROM elmesesu
    WHERE emsscoem = isbElemCodi AND
          emssfein <= idtFecha   AND
          emssfere  > idtFecha ;
      NUSERVSUSC ELMESESU.EMSSSESU%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fnuGetSubsServByMeasElemCurr' );
      OPEN CUELMESESU;
      FETCH CUELMESESU
         INTO NUSERVSUSC;
      IF ( CUELMESESU%NOTFOUND ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNU_ASOC_SERVSUSC_NO_VIGENTE );
         CLOSE CUELMESESU;
         RAISE LOGIN_DENIED;
      END IF;
      CLOSE CUELMESESU;
      PKERRORS.POP;
      RETURN ( NUSERVSUSC );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETSUBSSERVBYMEASELEMCURR;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END FSBVERSION;
   FUNCTION FNUGETMEASELEMBYSUBSSERVCURR( INUSUSCSERV IN ELMESESU.EMSSSESU%TYPE, IDTFECHA IN ELMESESU.EMSSFERE%TYPE )
    RETURN ELMESESU.EMSSCOEM%TYPE
    IS
      CURSOR CUELMESESU IS
SELECT emsscoem
    FROM elmesesu
    WHERE emsssesu = inuSuscServ
    AND   emssfein <= idtFecha
    AND   emssfere  > idtFecha ;
      NUMEASELEM ELMESESU.EMSSCOEM%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fnuGetMeasElemBySubsServCurr' );
      OPEN CUELMESESU;
      FETCH CUELMESESU
         INTO NUMEASELEM;
      CLOSE CUELMESESU;
      PKERRORS.POP;
      RETURN ( NUMEASELEM );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETMEASELEMBYSUBSSERVCURR;
   PROCEDURE UPINSTALLDATEBYCOMPONENT( INUPRODUCT IN ELMESESU.EMSSSESU%TYPE, INUCOMPONENT IN ELMESESU.EMSSCMSS%TYPE, IDTINSTALLATION IN ELMESESU.EMSSFEIN%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.UpInstallDateByComponent' );
      PKBCELMESESU.UPINSTALLDATEBYCOMPONENT( INUCOMPONENT, IDTINSTALLATION );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END UPINSTALLDATEBYCOMPONENT;
   FUNCTION FRCGETRECORDACTIVESERVMEASELEM( ISBEMSSCOEM IN ELMESESU.EMSSCOEM%TYPE, IDTDATE IN ELMESESU.EMSSFEIN%TYPE )
    RETURN ELMESESU%ROWTYPE
    IS
      RCELMESESU ELMESESU%ROWTYPE := NULL;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.frcGetRecordActiveServMeasElem' );
      IF ( CUSERVSUSCNOSERVICE%ISOPEN ) THEN
         CLOSE CUSERVSUSCNOSERVICE;
      END IF;
      OPEN CUSERVSUSCNOSERVICE( ISBEMSSCOEM, IDTDATE );
      FETCH CUSERVSUSCNOSERVICE
         INTO RCELMESESU;
      IF ( ( CUSERVSUSCNOSERVICE%NOTFOUND ) OR ( ( CUSERVSUSCNOSERVICE%FOUND ) AND ( IDTDATE > NVL( RCELMESESU.EMSSFERE, PKGENERALSERVICES.FDTGETMAXDATE() ) ) ) ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, 10474 );
         RAISE LOGIN_DENIED;
      END IF;
      CLOSE CUSERVSUSCNOSERVICE;
      PKERRORS.POP;
      RETURN ( RCELMESESU );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         IF ( CUSERVSUSCNOSERVICE%ISOPEN ) THEN
            CLOSE CUSERVSUSCNOSERVICE;
         END IF;
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         IF ( CUSERVSUSCNOSERVICE%ISOPEN ) THEN
            CLOSE CUSERVSUSCNOSERVICE;
         END IF;
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         IF ( CUSERVSUSCNOSERVICE%ISOPEN ) THEN
            CLOSE CUSERVSUSCNOSERVICE;
         END IF;
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRCGETRECORDACTIVESERVMEASELEM;
   FUNCTION FNUGETMEASELEMCOMUNAREA( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE )
    RETURN ELEMMEDI.ELMEEMAC%TYPE
    IS
      NUELMEEMAC ELEMMEDI.ELMEEMAC%TYPE;
      CURSOR CUELEMCOMUNAREA IS
SELECT  elmeemac
        FROM    elmesesu,elemmedi
        WHERE   emsssesu = inuServSusc  -- Producto
        AND     emssfein <= sysdate     -- Elemento activo.
        AND     emssfere > sysdate
        AND     emsselme = elmeIdem     -- IDElemento Medicion
        AND     elmeemac IS not null;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.fnuGetMeasElemComunArea' );
      IF ( CUELEMCOMUNAREA%ISOPEN ) THEN
         CLOSE CUELEMCOMUNAREA;
      END IF;
      OPEN CUELEMCOMUNAREA;
      FETCH CUELEMCOMUNAREA
         INTO NUELMEEMAC;
      PKERRORS.POP;
      RETURN NUELMEEMAC;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         IF ( CUELEMCOMUNAREA%ISOPEN ) THEN
            CLOSE CUSERVSUSCNOSERVICE;
         END IF;
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         IF ( CUELEMCOMUNAREA%ISOPEN ) THEN
            CLOSE CUELEMCOMUNAREA;
         END IF;
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         IF ( CUELEMCOMUNAREA%ISOPEN ) THEN
            CLOSE CUELEMCOMUNAREA;
         END IF;
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETMEASELEMCOMUNAREA;
   FUNCTION FRCGETMEASELEMCOMUNAREA( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE )
    RETURN ELEMMEDI%ROWTYPE
    IS
      RCELEMMEDI ELEMMEDI%ROWTYPE;
      NUELMEEMAC ELEMMEDI.ELMEEMAC%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemSubsServMgr.frcGetMeasElemComunArea' );
      NUELMEEMAC := PKMEASELEMSUBSSERVMGR.FNUGETMEASELEMCOMUNAREA( INUSERVSUSC );
      IF ( NUELMEEMAC IS NOT NULL ) THEN
         RCELEMMEDI := PKTBLELEMMEDI.FRCGETRECORD( NUELMEEMAC );
      END IF;
      PKERRORS.POP;
      RETURN RCELEMMEDI;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FRCGETMEASELEMCOMUNAREA;
END PKMEASELEMSUBSSERVMGR;
/


