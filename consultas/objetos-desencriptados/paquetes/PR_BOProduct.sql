
CREATE OR REPLACE PACKAGE BODY PR_BOPRODUCT IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO237312';
   CNUEQUIV_COMM_PLAN CONSTANT NUMBER := 606;
   CSBAPLICACION CONSTANT VARCHAR2( 250 ) := 'ATCNCRM';
   SBAPLICACION VARCHAR2( 250 );
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   CNUNULLNUMS CONSTANT NUMBER := PKGENERALPARAMETERSMGR.FNUGETNUMBERPARAMETER( 'NULLNUMS' );
   CNUINSTALL_ADDRESS CONSTANT NUMBER := GE_BOPARAMETER.FNUGET( 'INSTALL_ADDRESS_TYPE' );
   CNUIDENT_SUBS_NOEXISTE CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 1844;
   CNUERRREQPERMANENCE CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 3410;
   CNUERROR_SALESNULL CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 4851;
   CNUERROR_SALES_CHANNEL CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 7354;
   CNUERROR_CHANNEL_SUBSCRIPTION CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 7355;
   CNUERR_NULL_PARAMETER CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 1422;
   CNUNULL_ATTRIBUTE CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 119562;
   GNUDEF_COMPANY_ID NUMBER := GE_BOPARAMETER.FNUGET( 'DEFAULT_COMPANY' );
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END FSBVERSION;
   FUNCTION FNUPRINADDRBYPRODTY( INUADDRESS IN PR_PRODUCT.ADDRESS_ID%TYPE, INUPRODUCTTYPE IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE
    IS
      NUPRODUCT PR_PRODUCT.PRODUCT_ID%TYPE;
      CURSOR CUPRODUCTS IS
SELECT product_id
      		FROM   pr_product
      		WHERE  address_id = inuAddress
               AND product_type_id = inuProductType
               AND ROWNUM = 1;
    BEGIN
      FOR RC IN CUPRODUCTS
       LOOP
         NUPRODUCT := RC.PRODUCT_ID;
      END LOOP;
      RETURN NUPRODUCT;
    EXCEPTION
      WHEN OTHERS THEN
         RETURN NULL;
   END FNUPRINADDRBYPRODTY;
   FUNCTION PRODUCTSINADDRESS( NUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBISMAIN IN VARCHAR2 := GE_BOCONSTANTS.CSBYES )
    RETURN BOOLEAN
    IS
      CURSOR CUEXIST IS
SELECT 1 x
      		FROM   pr_product
      		WHERE  address_id = nuAddressId
                   AND ROWNUM = 1;
      NUEXIST NUMBER := 0;
    BEGIN
      IF ( ISBISMAIN = GE_BOCONSTANTS.CSBYES ) THEN
         FOR RC IN CUEXIST
          LOOP
            NUEXIST := RC.X;
         END LOOP;
      END IF;
      IF NUEXIST = 1 THEN
         RETURN ( TRUE );
       ELSE
         RETURN ( FALSE );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PRODUCTSINADDRESS;
   FUNCTION GETINSTANCENAME( INUID IN PR_PRODUCT.PRODUCT_ID%TYPE, ENTITYNAME IN GE_ENTITY.NAME_%TYPE )
    RETURN GE_ENTITY.NAME_%TYPE
    IS
    BEGIN
      RETURN ( ENTITYNAME || INUID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETINSTANCENAME;
   PROCEDURE INSTANCE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, ISBPARENT IN GE_ENTITY.NAME_%TYPE := NULL )
    IS
      SBINSTANCENAME GE_ENTITY.NAME_%TYPE := NULL;
      SBENTITYNAME GE_ENTITY.NAME_%TYPE := NULL;
      CURFCURSORENTITIES PR_BCPRODUCT.TYRFCURSOR;
      NUPRODUCTTYPEID PR_PRODUCT.PRODUCT_TYPE_ID%TYPE := NULL;
      CURFPRODUCTADDRESS CONSTANTS.TYREFCURSOR;
    BEGIN
      UT_TRACE.TRACE( 'INicia Metodo PR_BOProduct.INstance', 3 );
      UT_TRACE.TRACE( 'Producto    :[' || INUPRODUCTID || ']', 4 );
      UT_TRACE.TRACE( 'INstancia   :[' || ISBPARENT || ']', 4 );
      SBINSTANCENAME := ISBPARENT;
      GE_BOINSTANCECONTROL.LOADENTITYATTRIBUTES( SBINSTANCENAME, NULL, PR_BOCONSTANTS.PR_PRODUCT, FALSE, FALSE );
      GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( SBINSTANCENAME, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, INUPRODUCTID );
      GE_BOINSTANCECONTROL.LOADINSTANCEOLDVALUES( SBINSTANCENAME );
      UT_TRACE.TRACE( 'FINaliza Metodo PR_BOProduct.INstance', 3 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFCURSORENTITIES );
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPRODUCTADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFCURSORENTITIES );
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPRODUCTADDRESS );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSTANCE;
   PROCEDURE INSTANCEENTITY( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, ISBENTITYNAME IN GE_ENTITY.NAME_%TYPE, ISBINSTANCE IN GE_BOINSTANCECONTROL.STYSBNAME )
    IS
      SBATTRIBUTENAME GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE;
    BEGIN
      GE_BOINSTANCECONTROL.INITMULTISELECT( ISBINSTANCE, ISBENTITYNAME );
      GE_BOINSTANCECONTROL.SETMULTISELECTATTRIBUTE( GE_BOINSTANCECONSTANTS.CNUWHERE_ATTRIBUTE, PR_BOCONSTANTS.PRODUCT_ID, INUPRODUCTID );
      PR_BOUTIL.GETENTITYPKNAME( ISBENTITYNAME, SBATTRIBUTENAME );
      GE_BOINSTANCECONTROL.SETMULTISELECTATTRIBUTE( GE_BOINSTANCECONSTANTS.CNUGROUP_ATTRIBUTE, SBATTRIBUTENAME );
      GE_BOINSTANCECONTROL.EXECUTEMULTISELECT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSTANCEENTITY;
   PROCEDURE INSTANCEPRODUCTANDCOMPONENTS( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, ISBPARENT IN GE_ENTITY.NAME_%TYPE := NULL )
    IS
      RFMASTERSCOMPONENTS PR_BCPRODUCT.TYRFCURSOR;
      NUCOMPONENTID PR_COMPONENT.COMPONENT_ID%TYPE;
    BEGIN
      INSTANCE( INUPRODUCTID, ISBPARENT );
      RFMASTERSCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT( INUPRODUCTID );
      LOOP
         FETCH RFMASTERSCOMPONENTS
            INTO NUCOMPONENTID;
         EXIT WHEN RFMASTERSCOMPONENTS%NOTFOUND;
         PR_BOCOMPONENT.INSTANCECOMPONENTSBYCOMPONENT( NUCOMPONENTID, GETINSTANCENAME( INUPRODUCTID, PR_BOCONSTANTS.PR_PRODUCT ) );
      END LOOP;
      CLOSE RFMASTERSCOMPONENTS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSTANCEPRODUCTANDCOMPONENTS;
   PROCEDURE INSTANCESUSPENSION( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    IS
      CURSOR CUSUSPENSION IS
SELECT prod_suspension_id
            FROM pr_prod_suspension
            WHERE product_id = inuProductId;
      ISBINSTANCENAME GE_ENTITY.NAME_%TYPE := NULL;
    BEGIN
      FOR REG IN CUSUSPENSION
       LOOP
         ISBINSTANCENAME := GETINSTANCENAME( REG.PROD_SUSPENSION_ID, PR_BOCONSTANTS.PR_PROD_SUSPENSION );
         GE_BOINSTANCECONTROL.CREATEINSTANCE( ISBINSTANCENAME, GETINSTANCENAME( INUPRODUCTID, PR_BOCONSTANTS.PR_PRODUCT ) );
         GE_BOINSTANCECONTROL.LOADENTITYATTRIBUTES( ISBINSTANCENAME, NULL, PR_BOCONSTANTS.PR_PROD_SUSPENSION, FALSE, FALSE );
         GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( ISBINSTANCENAME, NULL, PR_BOCONSTANTS.PR_PROD_SUSPENSION, PR_BOCONSTANTS.PROD_SUSPENSION_ID, REG.PROD_SUSPENSION_ID );
         GE_BOINSTANCECONTROL.LOADINSTANCEOLDVALUES( ISBINSTANCENAME );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSTANCESUSPENSION;
   FUNCTION GETACTIVESTATUS
    RETURN PR_PRODUCT.PRODUCT_STATUS_ID%TYPE
    IS
    BEGIN
      RETURN ( PR_BOPARAMETER.FNUGETPRODACTI );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETACTIVESTATUS;
   FUNCTION ACTIVE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN BOOLEAN
    IS
      CURSOR CUEXIST IS
SELECT 1
            FROM pr_product
            WHERE product_id = inuProductId
              AND product_status_id = GetActiveStatus;
      BODUMMY BOOLEAN := FALSE;
    BEGIN
      FOR REG IN CUEXIST
       LOOP
         BODUMMY := TRUE;
      END LOOP;
      RETURN ( BODUMMY );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ACTIVE;
   FUNCTION EXIST( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      RETURN ( DAPR_PRODUCT.FBLEXIST( INUPRODUCTID ) );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END EXIST;
   PROCEDURE PRODUCTCOMPOSITION( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, OTBCOMPOSITION OUT NOCOPY PR_BOTYPES.TYTBCOMPONENTCOMPOSITION )
    IS
      NUINDEX NUMBER;
      NUMASTERCOMPONENTID PR_COMPONENT.COMPONENT_ID%TYPE;
      NUPARENTCOMPONENTID PR_COMPONENT_LINK.PARENT_COMPONENT_ID%TYPE;
      NUCHILDCOMPONENTID PR_COMPONENT_LINK.CHILD_COMPONENT_ID%TYPE;
      CUCOMPOSITION PR_BCPRODUCT.TYRFCURSOR;
      CUMASTERCOMPONENTS PR_BCPRODUCT.TYRFCURSOR;
    BEGIN
      CUMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT( INUPRODUCTID );
      LOOP
         FETCH CUMASTERCOMPONENTS
            INTO NUMASTERCOMPONENTID;
         EXIT WHEN CUMASTERCOMPONENTS%NOTFOUND;
         CUCOMPOSITION := PR_BCPRODUCT.GETCOMPONENTSBYCOMPONENTID( NUMASTERCOMPONENTID );
         LOOP
            FETCH CUCOMPOSITION
               INTO NUCHILDCOMPONENTID, NUPARENTCOMPONENTID;
            EXIT WHEN CUCOMPOSITION%NOTFOUND;
            NUINDEX := OTBCOMPOSITION.COUNT;
            NUINDEX := NUINDEX + 1;
            OTBCOMPOSITION( NUINDEX ).PARENTID := NUPARENTCOMPONENTID;
            OTBCOMPOSITION( NUINDEX ).CHILDID := NUCHILDCOMPONENTID;
         END LOOP;
         CLOSE CUCOMPOSITION;
      END LOOP;
      CLOSE CUMASTERCOMPONENTS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PRODUCTCOMPOSITION;
   FUNCTION GETSUBSCRIPTIONID( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    IS
      CURSOR CUSUBSCRIPTIONID IS
SELECT subscription_id
            FROM pr_product
            WHERE product_id = inuProductId;
      NUSUBSCRIPTIONID PR_PRODUCT.SUBSCRIPTION_ID%TYPE := NULL;
    BEGIN
      OPEN CUSUBSCRIPTIONID;
      FETCH CUSUBSCRIPTIONID
         INTO NUSUBSCRIPTIONID;
      CLOSE CUSUBSCRIPTIONID;
      RETURN ( NUSUBSCRIPTIONID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETSUBSCRIPTIONID;
   PROCEDURE RECONNECT( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUSUSPTYPEID IN PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE )
    IS
      SBSTATEMENT VARCHAR2( 1000 ) := NULL;
    BEGIN
      SBSTATEMENT := 'UPDATE PR_PROD_SUSPENSION ' || 'SET ACTIVE = :1 ' || ',INACTIVE_DATE = :2 ' || 'WHERE PRODUCT_ID = :3 ' || 'AND SUSPENSION_TYPE_ID = :4' || 'AND ACTIVE = :5';
      EXECUTE IMMEDIATE SBSTATEMENT
                        USING IN GE_BOCONSTANTS.CSBNO, IN SYSDATE, IN INUPRODUCTID, IN INUSUSPTYPEID, IN GE_BOCONSTANTS.CSBYES;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END RECONNECT;
   FUNCTION GETPRODUCTTYPE( NUPRODID IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE )
    RETURN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
    IS
      CURSOR CUPRODUCTTYPE IS
SELECT product_type_id
            FROM pr_product
            WHERE product_id = nuProdId;
      NUPRODTYPEID PR_PRODUCT.PRODUCT_TYPE_ID%TYPE := NULL;
    BEGIN
      OPEN CUPRODUCTTYPE;
      FETCH CUPRODUCTTYPE
         INTO NUPRODTYPEID;
      CLOSE CUPRODUCTTYPE;
      RETURN ( NUPRODTYPEID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETPRODUCTTYPE;
   FUNCTION FBLPRODSUSPGENERATE( INUPRODID IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE, INUSUSPTYPEID IN PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE )
    RETURN BOOLEAN
    IS
      CURSOR CUSUSPENSION( NUPRODUCTID IN PR_PROD_SUSPENSION.PRODUCT_ID%TYPE, NUTIPO IN PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE ) IS
SELECT COUNT(*)
		FROM   pr_prod_suspension
		WHERE  product_id = nuProductId
		  AND  suspension_type_id = nuTipo
		  AND  active = GE_BOConstants.csbYES;
      CURSOR CUCOMPSUSPENDIDOS( NUPRODUCTID IN PR_PROD_SUSPENSION.PRODUCT_ID%TYPE, NUTIPO IN PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE ) IS
SELECT COUNT(*)
		FROM   pr_component a, pr_comp_suspension b, ps_component_type c
		WHERE  a.product_id         =   nuProductId
		  AND  b.suspension_type_id = nuTipo
		  AND  b.active             = GE_BOConstants.csbYES
		  AND  a.component_status_id = PR_BOPARAMETER.fnuGetCOMPSUSP
		  AND  a.component_type_id   = c.component_type_id
		  AND  c.suspend_allowed     = GE_BOConstants.csbYES
		  AND  a.component_id = b.component_id;
      CURSOR CUCOMPPRODUCTO( NUPRODUCTID IN PR_PROD_SUSPENSION.PRODUCT_ID%TYPE ) IS
SELECT COUNT(*)
		FROM   pr_component a, ps_component_type c
		WHERE  a.product_id  =   nuProductId
		  AND  a.component_status_id <> PR_BOPARAMETER.fnuGetCOMPRETI
		  AND  a.component_status_id <> PR_BOCreationComponent.cnuCompStatINstallationPend  --17
		  AND  a.component_status_id <> PR_BOProduct.cnuCompStaUnINstRet --18
		  AND  a.component_type_id   = c.component_type_id
		  AND  c.suspend_allowed     = GE_BOConstants.csbYES;
      NUCANTSUSP NUMBER( 4 ) := 0;
      NUCANTCOMP NUMBER( 4 ) := 0;
      NUCASUCOMP NUMBER( 4 ) := 0;
    BEGIN
      OPEN CUSUSPENSION( INUPRODID, INUSUSPTYPEID );
      FETCH CUSUSPENSION
         INTO NUCANTSUSP;
      CLOSE CUSUSPENSION;
      IF NUCANTSUSP > GE_BOCONSTANTS.CNUSUCCESS THEN
         UT_TRACE.TRACE( 'PRODUCTO CON SUSPENSIONES DE ESTE TIPO' );
         RETURN ( FALSE );
      END IF;
      OPEN CUCOMPSUSPENDIDOS( INUPRODID, INUSUSPTYPEID );
      FETCH CUCOMPSUSPENDIDOS
         INTO NUCASUCOMP;
      CLOSE CUCOMPSUSPENDIDOS;
      OPEN CUCOMPPRODUCTO( INUPRODID );
      FETCH CUCOMPPRODUCTO
         INTO NUCANTCOMP;
      CLOSE CUCOMPPRODUCTO;
      UT_TRACE.TRACE( 'nuCaSuComp[' || NUCASUCOMP || '] nuCantComp[' || NUCANTCOMP || ']', 3 );
      IF ( NUCASUCOMP = NUCANTCOMP ) THEN
         UT_TRACE.TRACE( 'SE SUSPENDERA EL PRODUCTO' );
         RETURN ( TRUE );
      END IF;
      UT_TRACE.TRACE( 'AUN NO SE SUSPENDEN TODOS LOS COMPONENTES' );
      RETURN ( FALSE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLPRODSUSPGENERATE;
   FUNCTION FBLPRODRETIGENERATE( INUPRODID IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE, INURETITYPEID IN PR_PRODUCT_RETIRE.RETIRE_TYPE_ID%TYPE )
    RETURN BOOLEAN
    IS
      CURSOR CURETIRO( NUPRODUCTID IN PR_PROD_SUSPENSION.PRODUCT_ID%TYPE, NUTIPO IN PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE ) IS
SELECT COUNT(*)
		FROM   pr_product_retire
		WHERE  product_id = nuProductId
		  AND  retire_type_id = nuTipo;
      CURSOR CUCOMPRETIRADOS( NUPRODUCTID IN PR_PROD_SUSPENSION.PRODUCT_ID%TYPE ) IS
SELECT COUNT(*)
		FROM   pr_component a
		WHERE  a.product_id         =   nuProductId
        AND  (a.component_status_id = PR_BOPARAMETER.fnuGetCOMPRETI
                OR  a.component_status_id = PR_BOCreationComponent.cnuCompStatINstallationPend  --17
                OR  a.component_status_id = PR_BOProduct.cnuCompStaUnINstRet --18
                );
      CURSOR CUCOMPPRODUCTO( NUPRODUCTID IN PR_PROD_SUSPENSION.PRODUCT_ID%TYPE ) IS
SELECT COUNT(*)
		FROM   pr_component a
		WHERE  a.product_id  =   nuProductId;
      NUCANTSUSP NUMBER( 4 ) := 0;
      NUCANTCOMP NUMBER( 4 ) := 0;
      NUCARECOMP NUMBER( 4 ) := 0;
    BEGIN
      OPEN CURETIRO( INUPRODID, INURETITYPEID );
      FETCH CURETIRO
         INTO NUCANTSUSP;
      CLOSE CURETIRO;
      IF NUCANTSUSP > GE_BOCONSTANTS.CNUSUCCESS THEN
         UT_TRACE.TRACE( 'PRODUCTO CON RETIROS DE ESTE TIPO' );
         RETURN ( FALSE );
      END IF;
      OPEN CUCOMPRETIRADOS( INUPRODID );
      FETCH CUCOMPRETIRADOS
         INTO NUCARECOMP;
      CLOSE CUCOMPRETIRADOS;
      OPEN CUCOMPPRODUCTO( INUPRODID );
      FETCH CUCOMPPRODUCTO
         INTO NUCANTCOMP;
      CLOSE CUCOMPPRODUCTO;
      UT_TRACE.TRACE( 'nuCaReComp[' || NUCARECOMP || '] nuCantComp[' || NUCANTCOMP || ']', 3 );
      IF ( NUCARECOMP = NUCANTCOMP ) THEN
         UT_TRACE.TRACE( 'SE RETIRA EL PRODUCTO' );
         RETURN ( TRUE );
      END IF;
      UT_TRACE.TRACE( 'AUN NO SE RETIRAN TODOS LOS COMPONENTES' );
      RETURN ( FALSE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLPRODRETIGENERATE;
   PROCEDURE GETPRODUCTIDBYSERVNUM( ISBSERVICENUMBER IN PR_PRODUCT.SERVICE_NUMBER%TYPE, ONUPRODUCTID OUT PR_PRODUCT.PRODUCT_ID%TYPE )
    IS
      CURSOR CUPRODUCTID IS
SELECT product_id
            FROM pr_product a, ps_product_status b
            WHERE service_number    = isbServiceNumber
			  AND b.is_active_product = GE_BOConstants.csbYES
			  AND a.product_status_id = b.product_status_id;
    BEGIN
      OPEN CUPRODUCTID;
      FETCH CUPRODUCTID
         INTO ONUPRODUCTID;
      IF ( CUPRODUCTID%NOTFOUND ) THEN
         ERRORS.SETERROR( PR_BOCONSTANTS.NOTPRODUCTSERVNUM, ISBSERVICENUMBER );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      CLOSE CUPRODUCTID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUPRODUCTID%ISOPEN ) THEN
            CLOSE CUPRODUCTID;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( CUPRODUCTID%ISOPEN ) THEN
            CLOSE CUPRODUCTID;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION GETLASTPRODUCTBYIDENTIFY( ISBSERVICENUMBER IN PR_PRODUCT.SERVICE_NUMBER%TYPE, INUIDENTIFITYPE IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE, ISBIDENTIFICATION IN GE_SUBSCRIBER.IDENTIFICATION%TYPE, IBLANYSTATUS IN BOOLEAN := FALSE )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE
    IS
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
      NUSUBSCRIBERID GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
      CURSOR CUPRODUCT IS
SELECT a.product_id
			FROM   pr_product a, pr_component b,suscripc c
			WHERE  a.product_id = b.product_id
			  AND  c.suscclie = nuSubscriberId
			  AND  b.service_number = isbServiceNumber
			  AND  a.subscription_id = c.susccodi
			ORDER  BY a.creation_date desc;
    BEGIN
      IF ( NOT GE_BOSUBSCRIBER.VALIDIDENTIFICATION( ISBIDENTIFICATION, INUIDENTIFITYPE, NUSUBSCRIBERID ) ) THEN
         ERRORS.SETERROR( CNUIDENT_SUBS_NOEXISTE, INUIDENTIFITYPE || '|' || ISBIDENTIFICATION );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF NOT IBLANYSTATUS THEN
         GETPRODUCTIDBYSERVNUM( ISBSERVICENUMBER, NUPRODUCTID );
       ELSE
         OPEN CUPRODUCT;
         FETCH CUPRODUCT
            INTO NUPRODUCTID;
         IF CUPRODUCT%NOTFOUND THEN
            CLOSE CUPRODUCT;
            ERRORS.SETERROR( PR_BOCONSTANTS.NOTPRODUCTSERVNUM, ISBSERVICENUMBER );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         CLOSE CUPRODUCT;
      END IF;
      RETURN ( NUPRODUCTID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETLASTPRODUCTBYIDENTIFY;
   FUNCTION GETLASTPRODUCTID( ISBSERVICENUMBER IN PR_PRODUCT.SERVICE_NUMBER%TYPE, IBLANYSTATUS IN BOOLEAN := FALSE )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE
    IS
      CURSOR CUPRODUCT IS
SELECT a.product_id
			FROM   pr_product a, pr_component b
			WHERE  a.product_id = b.product_id
			  AND  b.service_number = isbServiceNumber
			ORDER  BY a.creation_date desc;
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
    BEGIN
      IF NOT IBLANYSTATUS THEN
         GETPRODUCTIDBYSERVNUM( ISBSERVICENUMBER, NUPRODUCTID );
       ELSE
         OPEN CUPRODUCT;
         FETCH CUPRODUCT
            INTO NUPRODUCTID;
         IF CUPRODUCT%NOTFOUND THEN
            CLOSE CUPRODUCT;
            ERRORS.SETERROR( PR_BOCONSTANTS.NOTPRODUCTSERVNUM, ISBSERVICENUMBER );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         CLOSE CUPRODUCT;
      END IF;
      RETURN ( NUPRODUCTID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETLASTPRODUCTID;
   PROCEDURE GETRETIREDATE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, ODTRETIREDATE OUT NOCOPY PR_PRODUCT_RETIRE.RETIRE_DATE%TYPE )
    IS
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
      EXPRODISNOTRETIRE EXCEPTION;
      EXRETIREDATENOEXIST EXCEPTION;
    BEGIN
      UT_TRACE.TRACE( 'INicia Metodo PR_BOProduct.GetRetireDate', 5 );
      UT_TRACE.TRACE( 'Producto:[' || INUPRODUCTID || ']', 6 );
      RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD( INUPRODUCTID );
      IF ( RCPRODUCT.PRODUCT_STATUS_ID != PR_BOPARAMETER.FNUGETPRODRETI ) THEN
         RAISE EXPRODISNOTRETIRE;
      END IF;
      ODTRETIREDATE := PR_BCRETIRE.FDTGETLASTDATERETIREBYPROD( INUPRODUCTID );
      IF ( ODTRETIREDATE IS NULL ) THEN
         RAISE EXRETIREDATENOEXIST;
      END IF;
      UT_TRACE.TRACE( 'Fecha de Retiro :[' || ODTRETIREDATE || ']', 6 );
      UT_TRACE.TRACE( 'FINaliza Metodo PR_BOProduct.GetRetireDate', 5 );
    EXCEPTION
      WHEN EXPRODISNOTRETIRE THEN
         ERRORS.SETERROR( PR_BOCONSTERROR.CNUPRODISNOTRETIRE, TO_CHAR( INUPRODUCTID ) );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EXRETIREDATENOEXIST THEN
         ERRORS.SETERROR( PR_BOCONSTERROR.CNURETIREDATENOEXIST, TO_CHAR( INUPRODUCTID ) );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETCREDITLIMIT( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN NUMBER
    IS
      NUMOTIVEID MO_MOTIVE.MOTIVE_ID%TYPE;
      NUCREDITLIMIT MO_MOTIVE.CREDIT_LIMIT_COVERED%TYPE;
    BEGIN
      NUMOTIVEID := MO_BOPACKAGES.FNUGETMAINMOTIVE( INUPACKAGEID );
      UT_TRACE.TRACE( 'nuMotiveId[' || NUMOTIVEID || ']', 10 );
      NUCREDITLIMIT := DAMO_MOTIVE.FNUGETCREDIT_LIMIT_COVERED( NUMOTIVEID );
      UT_TRACE.TRACE( 'nuCreditLimit[' || NUCREDITLIMIT || ']', 10 );
      RETURN ( NUCREDITLIMIT );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CREATEPRODUCT( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, ISBCLASSPRODUCT IN PR_PRODUCT.CLASS_PRODUCT%TYPE, ISBROLEWARRANTY IN PR_PRODUCT.ROLE_WARRANTY%TYPE, ONUNEWPRODUCT OUT NOCOPY PR_PRODUCT.PRODUCT_ID%TYPE, INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE := NULL, IBLPRODUCTEXIST IN BOOLEAN := TRUE )
    IS
      RFCURSOR CONSTANTS.TYREFCURSOR;
      RCDETAILRELAT DACC_DETAIL_COM_RELA.STYCC_DETAIL_COM_RELA;
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
      RCNEWPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
      NUSUBSCRIPTIONID SUSCRIPC.SUSCCODI%TYPE;
      NUCOMMERCIALPLANID CC_COMMERCIAL_PLAN.COMMERCIAL_PLAN_ID%TYPE;
      NUBILLDATACHANGEID MO_BILL_DATA_CHANGE.BILL_DATA_CHANGE_ID%TYPE;
      DTSYSDATE DATE := SYSDATE;
      NUGEOGRALOCATIONID GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INicia PR_BOProduct.CreateProduct', 5 );
      UT_TRACE.TRACE( 'Producto:[' || INUPRODUCTID || ']Clase:[' || ISBCLASSPRODUCT || ']' || 'Role:[' || ISBROLEWARRANTY || ']Paquete:[' || INUPACKAGEID || ']', 8 );
      DAPR_PRODUCT.GETRECORD( INUPRODUCTID, RCPRODUCT );
      NUCOMMERCIALPLANID := RCPRODUCT.COMMERCIAL_PLAN_ID;
      IF ISBROLEWARRANTY IS NOT NULL THEN
         RFCURSOR := CC_BCRELACIONCOMERCIAL.FRFGETDATARELATION( INUPRODUCTID );
         FETCH RFCURSOR
            INTO RCDETAILRELAT;
         CLOSE RFCURSOR;
         NUSUBSCRIPTIONID := PR_BOPRODUCT.FNUGETSUBSCBYSERVNUM( RCDETAILRELAT.SP_PRODUCT_ID );
         UT_TRACE.TRACE( 'Contrato [' || NUSUBSCRIPTIONID || '] Nuevo Producto [' || RCDETAILRELAT.SP_PRODUCT_ID || ']', 8 );
         IF ( RCDETAILRELAT.SP_PRODUCT_ID IS NOT NULL ) THEN
            ONUNEWPRODUCT := RCDETAILRELAT.SP_PRODUCT_ID;
            RETURN;
         END IF;
      END IF;
      IF ISBCLASSPRODUCT IS NOT NULL THEN
         NUSUBSCRIPTIONID := MO_BOPACKAGES.FNUGETSUSCRIPTIONBYPACK( INUPACKAGEID );
         NUBILLDATACHANGEID := MO_BOBILLINGDATACHANGE.FNUGETRECIDBYPACKID( INUPACKAGEID );
         IF NUBILLDATACHANGEID IS NOT NULL THEN
            NUCOMMERCIALPLANID := DAMO_BILL_DATA_CHANGE.FNUGETNEW_COMMERCIAL_PLAN_ID( NUBILLDATACHANGEID );
         END IF;
         IF DAGE_EQUIVALENCE_SET.FBLEXIST( CNUEQUIV_COMM_PLAN ) THEN
            UT_TRACE.TRACE( 'Plan Comercial Subsidiado:[' || NUCOMMERCIALPLANID || ']', 8 );
            NUCOMMERCIALPLANID := GE_BOEQUIVALENCVALUES.FNUGETTARGETVALUE( CNUEQUIV_COMM_PLAN, NUCOMMERCIALPLANID );
            UT_TRACE.TRACE( 'Plan Comercial PatrocINador:[' || NUCOMMERCIALPLANID || ']', 8 );
         END IF;
         RCNEWPRODUCT.CREDIT_LIMIT := FNUGETCREDITLIMIT( INUPACKAGEID );
      END IF;
      ONUNEWPRODUCT := PR_BOSEQUENCE.GETPRODUCTID;
      RCNEWPRODUCT := RCPRODUCT;
      RCNEWPRODUCT.PRODUCT_ID := ONUNEWPRODUCT;
      RCNEWPRODUCT.SUBSCRIPTION_ID := NUSUBSCRIPTIONID;
      RCNEWPRODUCT.COMMERCIAL_PLAN_ID := NUCOMMERCIALPLANID;
      RCNEWPRODUCT.CREATION_DATE := DTSYSDATE;
      RCNEWPRODUCT.CLASS_PRODUCT := ISBCLASSPRODUCT;
      RCNEWPRODUCT.ROLE_WARRANTY := ISBROLEWARRANTY;
      RCNEWPRODUCT.COMPANY_ID := NVL( RCPRODUCT.COMPANY_ID, GNUDEF_COMPANY_ID );
      UT_TRACE.TRACE( 'PR_Product.company_id = ' || RCPRODUCT.COMPANY_ID || '', 10 );
      RCNEWPRODUCT.CATEGORY_ID := NVL( RCNEWPRODUCT.CATEGORY_ID, CNUNULLNUMS );
      RCNEWPRODUCT.SUBCATEGORY_ID := NVL( RCNEWPRODUCT.SUBCATEGORY_ID, CNUNULLNUMS );
      DAPR_PRODUCT.INSRECORD( RCNEWPRODUCT );
      IF ISBROLEWARRANTY IS NOT NULL THEN
         DACC_DETAIL_COM_RELA.UPDSP_PRODUCT_ID( RCDETAILRELAT.DETAIL_COM_RELA_ID, ONUNEWPRODUCT );
      END IF;
      UT_TRACE.TRACE( 'FINaliza PR_BOProduct.CreateProduct. Producto Creado:[' || ONUNEWPRODUCT || ']', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CREATEPRODUCT;
   FUNCTION FSBISPOSTPAY( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN VARCHAR2
    IS
      NUCOMMERCIALPLANID PR_PRODUCT.COMMERCIAL_PLAN_ID%TYPE;
      SBTIPOPLAN CC_COMMERCIAL_PLAN.PREPAY%TYPE;
    BEGIN
      NUCOMMERCIALPLANID := DAPR_PRODUCT.FNUGETCOMMERCIAL_PLAN_ID( INUPRODUCTID );
      SBTIPOPLAN := DACC_COMMERCIAL_PLAN.FSBGETPREPAY( NUCOMMERCIALPLANID );
      IF ( SBTIPOPLAN = MO_BOCONSTANTS.CSBPOSTPAY OR SBTIPOPLAN = MO_BOCONSTANTS.CSBCONTROLLEDCOUNT ) THEN
         RETURN ( GE_BOCONSTANTS.CSBYES );
      END IF;
      RETURN ( GE_BOCONSTANTS.CSBNO );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBISPOSTPAY;
   FUNCTION FSBISSUBSCRIPTIONTYPE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUSUBSCRIPTIONTYPE IN SUSCRIPC.SUSCTISU%TYPE )
    RETURN VARCHAR2
    IS
      NUSUBSCRIPTIONID SUSCRIPC.SUSCCODI%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INicia Metodo PR_BOProduct.fsbIsSubscriptionType', 10 );
      UT_TRACE.TRACE( 'Producto:[' || INUPRODUCTID || ']Tipo Suscripcion:[' || INUSUBSCRIPTIONTYPE || ']', 11 );
      NUSUBSCRIPTIONID := DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID( INUPRODUCTID );
      UT_TRACE.TRACE( 'Suscripcion:[' || NUSUBSCRIPTIONID || ']', 11 );
      IF ( PKTBLSUSCRIPC.FNUGETTYPESUSCRIPTION( NUSUBSCRIPTIONID ) = INUSUBSCRIPTIONTYPE ) THEN
         RETURN ( GE_BOCONSTANTS.CSBYES );
      END IF;
      RETURN ( GE_BOCONSTANTS.CSBNO );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBISSUBSCRIPTIONTYPE;
   FUNCTION FSBISPAYPLANTYPE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUPAYPLANTYPE IN CC_COMMERCIAL_PLAN.PREPAY%TYPE )
    RETURN VARCHAR2
    IS
      NUCOMMERCIALPLANID PR_PRODUCT.COMMERCIAL_PLAN_ID%TYPE;
    BEGIN
      NUCOMMERCIALPLANID := DAPR_PRODUCT.FNUGETCOMMERCIAL_PLAN_ID( INUPRODUCTID );
      IF ( DACC_COMMERCIAL_PLAN.FSBGETPREPAY( NUCOMMERCIALPLANID ) = INUPAYPLANTYPE ) THEN
         RETURN ( GE_BOCONSTANTS.CSBYES );
      END IF;
      RETURN ( GE_BOCONSTANTS.CSBNO );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBISPAYPLANTYPE;
   PROCEDURE UPDSERVICENUMBER( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, ISBSERVICENUMBER IN PR_PRODUCT.SERVICE_NUMBER%TYPE )
    IS
      RCCOMPONENT DAPR_COMPONENT.STYPR_COMPONENT;
      RFCOMPONENTS CONSTANTS.TYREFCURSOR;
    BEGIN
      RFCOMPONENTS := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID( INUPRODUCTID );
      FETCH RFCOMPONENTS
         INTO RCCOMPONENT;
      LOOP
         EXIT WHEN RFCOMPONENTS%NOTFOUND;
         DAPR_COMPONENT.UPDSERVICE_NUMBER( RCCOMPONENT.COMPONENT_ID, ISBSERVICENUMBER );
         FETCH RFCOMPONENTS
            INTO RCCOMPONENT;
      END LOOP;
      CLOSE RFCOMPONENTS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDSERVICENUMBER;
   PROCEDURE UPDCOMMERCIALPLAN( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUCOMMPLANID IN PR_PRODUCT.COMMERCIAL_PLAN_ID%TYPE, INUPERMANENCE IN PR_PRODUCT.PERMANENCE%TYPE := NULL )
    IS
      CNUNOPERMANENCE CONSTANT NUMBER := 0;
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
      DTEXPIRATION DATE := NULL;
      NUPERMANENCE PR_PRODUCT.PERMANENCE%TYPE;
      NUPERMANENCEINI PR_PRODUCT.PERMANENCE%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicia Cambio de plan producto[' || INUPRODUCTID || ']', 5 );
      NUPERMANENCEINI := DACC_COMMERCIAL_PLAN.FNUGETPERMANENCE( INUCOMMPLANID );
      IF ( CC_BOCOMMPERMANENCE.FBLPERMANENCE( INUCOMMPLANID ) AND NUPERMANENCEINI = CNUNOPERMANENCE ) THEN
         ERRORS.SETERROR( CNUERRREQPERMANENCE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF INUCOMMPLANID = DAPR_PRODUCT.FNUGETCOMMERCIAL_PLAN_ID( INUPRODUCTID ) THEN
         UT_TRACE.TRACE( 'Plan actual y nuevo son iguales', 10 );
         RETURN;
      END IF;
      LE_BOLIMITEDECREDITO.UPDATECREDITLIMIT( INUPRODUCTID, INUCOMMPLANID );
      RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD( INUPRODUCTID );
      CC_BOCOMMPERMANENCE.GETNEWPRODEXPDATE( INUPRODUCTID, INUCOMMPLANID, DTEXPIRATION, NUPERMANENCE );
      UT_TRACE.TRACE( 'dtExpiration[' || DTEXPIRATION || ']', 5 );
      RCPRODUCT.COMMERCIAL_PLAN_ID := INUCOMMPLANID;
      RCPRODUCT.EXPIRATION_OF_PLAN := DTEXPIRATION;
      RCPRODUCT.PERMANENCE := NUPERMANENCE;
      UT_TRACE.TRACE( 'Actualiza Plan [' || RCPRODUCT.COMMERCIAL_PLAN_ID || '] FechaExp [' || RCPRODUCT.EXPIRATION_OF_PLAN || ']', 10 );
      DAPR_PRODUCT.UPDRECORD( RCPRODUCT );
      UT_TRACE.TRACE( 'Termina Cambio de plan producto[' || INUPRODUCTID || ']', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDCOMMERCIALPLAN;
   PROCEDURE CREATEPRODUCTBYMOTIVE( IRCMOTIVE IN DAMO_MOTIVE.STYMO_MOTIVE, ONUPRODUCTID OUT PR_PRODUCT.PRODUCT_ID%TYPE )
    IS
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
      RCPACKAGE DAMO_PACKAGES.STYMO_PACKAGES;
      RCCOMMERCIALPLAN DACC_COMMERCIAL_PLAN.STYCC_COMMERCIAL_PLAN;
      RCADDRESS DAMO_ADDRESS.STYMO_ADDRESS;
      RCADD DAAB_ADDRESS.STYAB_ADDRESS;
      DTSYSDATE DATE := SYSDATE;
    BEGIN
      UT_TRACE.TRACE( 'INicia Metodo PR_BOProduct.CreateProductByMotive', 5 );
      DAMO_PACKAGES.GETRECORD( IRCMOTIVE.PACKAGE_ID, RCPACKAGE );
      RCCOMMERCIALPLAN := DACC_COMMERCIAL_PLAN.FRCGETRECORD( IRCMOTIVE.COMMERCIAL_PLAN_ID );
      ONUPRODUCTID := PR_BOSEQUENCE.GETPRODUCTID;
      RCPRODUCT.PRODUCT_ID := ONUPRODUCTID;
      RCPRODUCT.SUBSCRIPTION_ID := IRCMOTIVE.SUBSCRIPTION_ID;
      RCPRODUCT.PRODUCT_TYPE_ID := IRCMOTIVE.PRODUCT_TYPE_ID;
      RCPRODUCT.CATEGORY_ID := NVL( IRCMOTIVE.CATEGORY_ID, CNUNULLNUMS );
      RCPRODUCT.SUBCATEGORY_ID := NVL( IRCMOTIVE.SUBCATEGORY_ID, CNUNULLNUMS );
      RCPRODUCT.DISTRIBUT_ADMIN_ID := IRCMOTIVE.DISTRIBUT_ADMIN_ID;
      RCPRODUCT.IS_PROVISIONAL := IRCMOTIVE.PROVISIONAL_FLAG;
      RCPRODUCT.PROVISIONAL_BEG_DATE := IRCMOTIVE.PROV_INITIAL_DATE;
      RCPRODUCT.PROVISIONAL_END_DATE := IRCMOTIVE.PROV_FINAL_DATE;
      RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODACTI;
      RCPRODUCT.SERVICE_NUMBER := NVL( IRCMOTIVE.SERVICE_NUMBER, ONUPRODUCTID );
      RCPRODUCT.CREATION_DATE := DTSYSDATE;
      RCPRODUCT.IS_PRIVATE := IRCMOTIVE.PRIVACY_FLAG;
      RCPRODUCT.RETIRE_DATE := NULL;
      RCPRODUCT.COMMERCIAL_PLAN_ID := RCCOMMERCIALPLAN.COMMERCIAL_PLAN_ID;
      RCPRODUCT.PERSON_ID := RCPACKAGE.PERSON_ID;
      RCPRODUCT.CLASS_PRODUCT := NULL;
      RCPRODUCT.ROLE_WARRANTY := NULL;
      RCPRODUCT.CREDIT_LIMIT := IRCMOTIVE.CREDIT_LIMIT;
      RCPRODUCT.EXPIRATION_OF_PLAN := CC_BOCOMMPERMANENCE.FDTCALCULATEEXPDATE( DTSYSDATE, DACC_COMMERCIAL_PLAN.FNUGETPERMANENCE( RCCOMMERCIALPLAN.COMMERCIAL_PLAN_ID ) );
      UT_TRACE.TRACE( 'PR_Product.company_id = ' || RCPRODUCT.COMPANY_ID || '', 10 );
      DAPR_PRODUCT.INSRECORD( RCPRODUCT );
      PR_BOSUBSBYPRODUCT.INSPRODROL( ONUPRODUCTID, RCPACKAGE.SUBSCRIBER_ID, CC_BOCONSTANTS.CNUUSER_CLIENT_ROLE );
      PR_BOSUBSBYPRODUCT.INSPRODROL( ONUPRODUCTID, RCPACKAGE.SUBSCRIBER_ID, CC_BOCONSTANTS.CNUOWNER_CLIENT_ROLE );
      PR_BOREQUEST.CREATEREQUESTPRODUCT( MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT, DTSYSDATE, ONUPRODUCTID, IRCMOTIVE.PACKAGE_ID, IRCMOTIVE.MOTIVE_ID, IRCMOTIVE.MOTIVE_TYPE_ID, IRCMOTIVE.CUST_CARE_REQUES_NUM );
      RCADDRESS := MO_BOADDRESS.FRCADDRESSMAIN( IRCMOTIVE.MOTIVE_ID );
      IF ( RCADDRESS.ADDRESS_ID IS NOT NULL ) THEN
         DAPR_PRODUCT.UPDADDRESS_ID( ONUPRODUCTID, RCADDRESS.PARSER_ADDRESS_ID );
         RCADD := DAAB_ADDRESS.FRCGETRECORD( RCADDRESS.ADDRESS_ID );
      END IF;
      PR_BOCREATIONPRODUCT.CREATESERVSUSC( IRCMOTIVE.PACKAGE_ID, RCPRODUCT, IRCMOTIVE, RCADD, DTSYSDATE );
      UT_TRACE.TRACE( 'FINaliza Metodo PR_BOProduct.CreateProductByMotive, Producto Creado[' || ONUPRODUCTID || ']', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CREATEPRODUCTBYMOTIVE;
   PROCEDURE CHANGECOMMERCIALPLAN( INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE, INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUCOMMERCIALPLANID IN PR_PRODUCT.COMMERCIAL_PLAN_ID%TYPE )
    IS
      RCMOTIVE DAMO_MOTIVE.STYMO_MOTIVE;
      RCCOMMPLAN DACC_COMMERCIAL_PLAN.STYCC_COMMERCIAL_PLAN;
      NUERRORCODE GE_ERROR_LOG.ERROR_LOG_ID%TYPE := NULL;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE := NULL;
      NUPERMANENCE MO_MOTIVE.PERMANENCE%TYPE;
      PROCEDURE VALCONTPOINTSCOND
       IS
         SBPOINTSACCUMALLOWED VARCHAR2( 1 );
         NUCONTRACT SUSCRIPC.SUSCCODI%TYPE;
       BEGIN
         ERRORS.PUSH( 'PR_BOProduct.ChangeCommercialPlan.ValContPoINtsCond' );
         SBPOINTSACCUMALLOWED := NVL( RCCOMMPLAN.ACCUMULATE_POINTS, PKCONSTANTE.NO );
         IF ( SBPOINTSACCUMALLOWED = PKCONSTANTE.NO ) THEN
            NUCONTRACT := PKTBLSERVSUSC.FNUGETSUSCRIPTION( INUPRODUCTID );
            FA_BOPOINTSACCUMSERV.CANCELALLPOINTS( NUCONTRACT );
         END IF;
         ERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALCONTPOINTSCOND;
    BEGIN
      UT_TRACE.TRACE( 'INicio PR_BOProduct.ChangeCommercialPlan, Producto[' || INUPRODUCTID || '] CommercialPlanId[' || INUCOMMERCIALPLANID || ']', 5 );
      DAMO_MOTIVE.GETRECORD( INUMOTIVEID, RCMOTIVE );
      NUPERMANENCE := DAMO_MOTIVE.FNUGETPERMANENCE( INUMOTIVEID );
      UPDCOMMERCIALPLAN( INUPRODUCTID, INUCOMMERCIALPLANID, NUPERMANENCE );
      PR_BOREQUEST.CREATEREQUESTPRODUCT( MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT, SYSDATE, INUPRODUCTID, RCMOTIVE.PACKAGE_ID, RCMOTIVE.MOTIVE_ID, RCMOTIVE.MOTIVE_TYPE_ID, RCMOTIVE.CUST_CARE_REQUES_NUM );
      DACC_COMMERCIAL_PLAN.GETRECORD( INUCOMMERCIALPLANID, RCCOMMPLAN );
      VALCONTPOINTSCOND;
      PKBILLCONDITIONCHANGE.UPDCOMMERCIALPLAN( INUPRODUCTID, RCCOMMPLAN.PRERATING_PLAN, RCCOMMPLAN.RATING_PLAN, RCCOMMPLAN.BILLING_PLAN, PKCONSTANTE.NULLNUM, UT_DATE.FDTSYSDATE, NUERRORCODE, SBERRORMESSAGE );
      GW_BOERRORS.CHECKERROR( NUERRORCODE, SBERRORMESSAGE );
      UT_TRACE.TRACE( 'FINal PR_BOProduct.ChangeCommercialPlan', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CHANGECOMMERCIALPLAN;
   FUNCTION FSBGETSERVNUMBBYPROD( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN VARCHAR2
    IS
      SBSERVNUMBER PR_PRODUCT.SERVICE_NUMBER%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INicia PR_BOProduct.fsbGetServNumbByProd, Producto[' || INUPRODUCTID || ']', 5 );
      DAPR_PRODUCT.ACCKEY( INUPRODUCTID );
      SBSERVNUMBER := DAPR_PRODUCT.FSBGETSERVICE_NUMBER( INUPRODUCTID );
      RETURN SBSERVNUMBER;
      UT_TRACE.TRACE( 'FINaliza PR_BOProduct.fsbGetServNumbByProd', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETSERVNUMBBYPROD;
   PROCEDURE UPDSOCIOECONOSTRAT( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUCATEGORYID IN PR_PRODUCT.CATEGORY_ID%TYPE, INUSUBCATEGORYID IN PR_PRODUCT.SUBCATEGORY_ID%TYPE )
    IS
      RCPRCOMPONENT DAPR_COMPONENT.STYPR_COMPONENT;
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
    BEGIN
      UT_TRACE.TRACE( 'INicia PR_BOProduct.updSocioEconoStrat, inuProductId[' || INUPRODUCTID || ']-inuCategoryId[' || INUCATEGORYID || ']-inuSubcategoryId[' || INUSUBCATEGORYID || ']', 5 );
      DAPR_PRODUCT.GETRECORD( INUPRODUCTID, RCPRODUCT );
      PKTBLCATEGORI.ACCKEY( INUCATEGORYID );
      PKTBLSUBCATEG.ACCKEY( INUCATEGORYID, INUSUBCATEGORYID );
      RCPRODUCT.CATEGORY_ID := NVL( INUCATEGORYID, CNUNULLNUMS );
      RCPRODUCT.SUBCATEGORY_ID := NVL( INUSUBCATEGORYID, CNUNULLNUMS );
      DAPR_PRODUCT.UPDRECORD( RCPRODUCT );
      FOR RCPRCOMPONENT IN PR_BCCOMPONENT.CUCOMPONENTSBYPRODUCTID( INUPRODUCTID )
       LOOP
         RCPRCOMPONENT.CATEGORY_ID := RCPRODUCT.CATEGORY_ID;
         RCPRCOMPONENT.SUBCATEGORY_ID := RCPRODUCT.SUBCATEGORY_ID;
         DAPR_COMPONENT.UPDRECORD( RCPRCOMPONENT );
      END LOOP;
      UT_TRACE.TRACE( 'FINaliza PR_BOProduct.updSocioEconoStrat', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDSOCIOECONOSTRAT;
   PROCEDURE REGISTERSERVSUSC( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUSUBSCRIPTION_ID IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE, INUPRODUCT_TYPE_ID IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE, INUCATEGORYID IN PR_PRODUCT.CATEGORY_ID%TYPE, INUSUBCATEGORYID IN PR_PRODUCT.SUBCATEGORY_ID%TYPE, INUBILLINGPLAN_ID IN SERVSUSC.SESUPLFA%TYPE, INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUPRODSTATUS IN SERVSUSC.SESUESCO%TYPE, INUSESUCICO IN SERVSUSC.SESUCICO%TYPE, INUSESUMULT IN SERVSUSC.SESUMULT%TYPE, INUSESUCLASS IN SERVSUSC.SESUCLPR%TYPE, INUSESUBASE IN SERVSUSC.SESUSESB%TYPE, INUINSTALL_DATE IN SERVSUSC.SESUFEIN%TYPE, INUCOMPANYID IN SERVSUSC.SESUSIST%TYPE, INULIMICRED IN SERVSUSC.SESULICR%TYPE, ISBSESUROGA IN SERVSUSC.SESUROGA%TYPE := NULL )
    IS
      DTSYSDATE DATE := SYSDATE;
      RCSERVSUSC SERVSUSC%ROWTYPE;
      NUSESUSUCA SERVSUSC.SESUSUCA%TYPE;
      NUSESUCATE SERVSUSC.SESUCATE%TYPE;
      NUSESUPLFA SERVSUSC.SESUPLFA%TYPE;
      NUSESUMULT SERVSUSC.SESUMULT%TYPE;
      RCDATAUTILITIES DAPR_DATA_UTILITIES.STYPR_DATA_UTILITIES;
      SBSESUIMLD SERVSUSC.SESUIMLD%TYPE;
      NUERRORCODE GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INicia PR_BOProduct.RegisterServSusc', 5 );
      NUSESUCATE := NVL( INUCATEGORYID, CNUNULLNUMS );
      NUSESUSUCA := NVL( INUSUBCATEGORYID, CNUNULLNUMS );
      UT_TRACE.TRACE( 'Categoria:[' || NUSESUCATE || ']Subcategoria:[' || NUSESUSUCA || ']', 7 );
      NUSESUMULT := NVL( INUSESUMULT, 1 );
      FOR REC IN PR_BCDATAUTILITIES.CUDATAUTILITIESBYPROD( INUPRODUCTID )
       LOOP
         RCDATAUTILITIES := REC;
      END LOOP;
      IF ( PR_BOPARAMETER.FSBGETPRINTDISTANCEDEF IS NULL ) THEN
         SBSESUIMLD := GE_BOEQUIVALENCVALUES.FSBGETTARGETVALUE( GW_BOPARAMETER.FNUGETEQ_Y_N, GE_BOCONSTANTS.CSBYES );
       ELSE
         SBSESUIMLD := PR_BOPARAMETER.FSBGETPRINTDISTANCEDEF;
      END IF;
      PKSUBSCRIBERSERVICE.REGISTER( INUPRODUCTID, INUPRODUCT_TYPE_ID, INUSUBSCRIPTION_ID, NUSESUCATE, NUSESUSUCA, INUINSTALL_DATE, NVL( INUBILLINGPLAN_ID, CNUNULLNUMS ), SBSESUIMLD, NUERRORCODE, SBERRORMESSAGE, INUPRODSTATUS, ISBSESUROGA, INUSESUCLASS, NUSESUMULT, INUSESUCICO, RCDATAUTILITIES.CHARGE, CNUNULLNUMS, INULIMICRED, GE_BOCONSTANTS.CSBYES, NULL, FALSE, NVL( INUCOMPANYID, GNUDEF_COMPANY_ID ) );
      GW_BOERRORS.CHECKERROR( NUERRORCODE, SBERRORMESSAGE );
      IF ( INUSESUBASE IS NOT NULL ) THEN
         RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( INUPRODUCTID, PKCONSTANTE.NOCACHE );
         RCSERVSUSC.SESUSESB := INUSESUBASE;
         PKTBLSERVSUSC.UPRECORD( RCSERVSUSC );
      END IF;
      UT_TRACE.TRACE( 'FINaliza PR_BOProduct.RegisterServSusc', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END REGISTERSERVSUSC;
   PROCEDURE ADDRESSPARSER( INUGEOGRAPLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, OSBSUCCESSMESSAGE OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      AB_BSADDRESSPARSER.INSERTADDRESSONNOTFOUND( INUGEOGRAPLOCATIONID, ISBADDRESS, ONUADDRESSID, OSBADDRESSPARSED, OSBSUCCESSMESSAGE, ONUERRORCODE, OSBERRORMESSAGE, INUNEIGHBORTHOODID );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDRESSPARSER;
   PROCEDURE ADDRESSPARSERNOTCOMMIT( INUGEOGRAPLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, OSBSUCCESSMESSAGE OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      AB_BSADDRESSPARSER.INSERTADDRESSONNOTFOUND( INUGEOGRAPLOCATIONID, ISBADDRESS, ONUADDRESSID, OSBADDRESSPARSED, OSBSUCCESSMESSAGE, ONUERRORCODE, OSBERRORMESSAGE, INUNEIGHBORTHOODID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE REGISTER( IONUPRODUCT_ID IN OUT PR_PRODUCT.PRODUCT_ID%TYPE, INUSUBSCRIPTION_ID IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE, INUPRODUCT_TYPE_ID IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE, INUCATEGORYID IN PR_PRODUCT.CATEGORY_ID%TYPE, INUSUBCATEGORYID IN PR_PRODUCT.SUBCATEGORY_ID%TYPE, INUDISTRIBUT_ADMIN_ID IN PR_PRODUCT.DISTRIBUT_ADMIN_ID%TYPE, IDTPROVISIONAL_BEG_DATE IN PR_PRODUCT.PROVISIONAL_BEG_DATE%TYPE, IDTPROVISIONAL_END_DATE IN PR_PRODUCT.PROVISIONAL_END_DATE%TYPE, ISBSERVICE_NUMBER IN PR_PRODUCT.SERVICE_NUMBER%TYPE, INUCOMMERCIAL_PLAN_ID IN PR_PRODUCT.COMMERCIAL_PLAN_ID%TYPE, INUPERSON_ID IN PR_PRODUCT.PERSON_ID%TYPE, INUCREDIT_LIMIT IN PR_PRODUCT.CREDIT_LIMIT%TYPE, INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, INUNEIGHBORTHOOD_ID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBPRIVATE IN PR_PRODUCT.IS_PRIVATE%TYPE, INUPROD_STATUS IN PR_PRODUCT.PRODUCT_STATUS_ID%TYPE, INUSESUCICO IN SERVSUSC.SESUCICO%TYPE, INUCLASS_PRODUCT IN PR_PRODUCT.CLASS_PRODUCT%TYPE := NULL, INUSERVBASE IN SERVSUSC.SESUSESB%TYPE := NULL, INUSESUMULT IN SERVSUSC.SESUMULT%TYPE := 1, INUBILLPLAN IN SERVSUSC.SESUPLFA%TYPE := NULL, IBOVALIDATE IN BOOLEAN := TRUE, IBOREGADDRESS IN BOOLEAN := TRUE, INUCONNECTSTATUS IN SERVSUSC.SESUESCO%TYPE := NULL, INUINSTALL_DATE IN SERVSUSC.SESUFEIN%TYPE := NULL, INUCOMPANYID IN SERVSUSC.SESUSIST%TYPE := NULL, ISBSESUROGA IN SERVSUSC.SESUROGA%TYPE := NULL )
    IS
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
      DTSYSDATE DATE := SYSDATE;
      SBADDRESS_PARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUADDRESS_ID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBSUCCESSMESSAGE VARCHAR2( 2000 );
      NUERROR NUMBER;
      SBERRMSG VARCHAR2( 2000 );
      NUESTATENUMBER NUMBER;
      CNUINSERT_SUCCESS CONSTANT NUMBER := 3015;
      CNUADDRESS_TYPE_ID CONSTANT NUMBER := 1;
      CNUNULLNUMS CONSTANT NUMBER := PKGENERALPARAMETERSMGR.FNUGETNUMBERPARAMETER( 'NULLNUMS' );
      NUSESUSUCA SERVSUSC.SESUSUCA%TYPE;
      NUSESUCATE SERVSUSC.SESUCATE%TYPE;
      NUSESUPLFA SERVSUSC.SESUPLFA%TYPE;
      NUSESUMULT SERVSUSC.SESUMULT%TYPE;
      RCDATAUTILITIES DAPR_DATA_UTILITIES.STYPR_DATA_UTILITIES;
      SBSESUIMLD SERVSUSC.SESUIMLD%TYPE;
      SBADDRESS AB_ADDRESS.ADDRESS%TYPE;
      NUGEOGRAP_LOCATION_ID AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
      NUNEIGHBORTHOOD_ID AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      NUERRORCODE GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
      DTINSTALLDATE SERVSUSC.SESUFEIN%TYPE := NVL( INUINSTALL_DATE, UT_DATE.FDTSYSDATE );
      NUSUBSCRIBER GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
      PROCEDURE VALIDATEDATA
       IS
       BEGIN
         IF ( NOT IBOVALIDATE ) THEN
            RETURN;
         END IF;
         IF ( INUCATEGORYID IS NOT NULL ) THEN
            PKTBLCATEGORI.ACCKEY( INUCATEGORYID );
            IF ( INUSUBCATEGORYID IS NOT NULL ) THEN
               PKTBLSUBCATEG.ACCKEY( INUCATEGORYID, INUSUBCATEGORYID );
            END IF;
         END IF;
         IF ( INUCOMMERCIAL_PLAN_ID IS NOT NULL ) THEN
            DACC_COMMERCIAL_PLAN.ACCKEY( INUCOMMERCIAL_PLAN_ID );
          ELSE
            IF ( INUBILLPLAN IS NOT NULL ) THEN
               PKTBLPLANSUSC.ACCKEY( INUBILLPLAN );
            END IF;
         END IF;
         IF ( INUPERSON_ID IS NOT NULL ) THEN
            DAGE_PERSON.ACCKEY( INUPERSON_ID );
         END IF;
         IF ( INUPROD_STATUS IS NOT NULL ) THEN
            DAPS_PRODUCT_STATUS.ACCKEY( INUPROD_STATUS );
         END IF;
         IF ( INUDISTRIBUT_ADMIN_ID IS NOT NULL ) THEN
            DAGE_DISTRIBUT_ADMIN.ACCKEY( INUDISTRIBUT_ADMIN_ID );
         END IF;
         IF ( INUBILLPLAN IS NOT NULL ) THEN
            PKTBLPLANSUSC.ACCKEY( INUBILLPLAN );
         END IF;
         IF ( INUCOMPANYID IS NOT NULL ) THEN
            PKTBLSISTEMA.ACCKEY( INUCOMPANYID );
         END IF;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END VALIDATEDATA;
    BEGIN
      UT_TRACE.TRACE( 'INicia PR_BOProduct.Register', 5 );
      VALIDATEDATA;
      NUPRODUCTID := IONUPRODUCT_ID;
      IF ( IONUPRODUCT_ID IS NULL ) THEN
         NUPRODUCTID := PR_BOSEQUENCE.GETPRODUCTID;
         IONUPRODUCT_ID := NUPRODUCTID;
      END IF;
      UT_TRACE.TRACE( 'Product_id [' || NUPRODUCTID || ']', 6 );
      RCPRODUCT.PRODUCT_ID := NUPRODUCTID;
      RCPRODUCT.SUBSCRIPTION_ID := INUSUBSCRIPTION_ID;
      RCPRODUCT.PRODUCT_TYPE_ID := INUPRODUCT_TYPE_ID;
      RCPRODUCT.CATEGORY_ID := NVL( INUCATEGORYID, CNUNULLNUMS );
      RCPRODUCT.SUBCATEGORY_ID := NVL( INUSUBCATEGORYID, CNUNULLNUMS );
      RCPRODUCT.DISTRIBUT_ADMIN_ID := INUDISTRIBUT_ADMIN_ID;
      RCPRODUCT.PROVISIONAL_BEG_DATE := IDTPROVISIONAL_BEG_DATE;
      RCPRODUCT.PROVISIONAL_END_DATE := IDTPROVISIONAL_END_DATE;
      IF ( IDTPROVISIONAL_BEG_DATE IS NOT NULL AND IDTPROVISIONAL_END_DATE IS NULL ) THEN
         RCPRODUCT.PROVISIONAL_END_DATE := UT_DATE.FDTMAXDATE;
      END IF;
      RCPRODUCT.IS_PROVISIONAL := GE_BOCONSTANTS.CSBNO;
      IF ( RCPRODUCT.PROVISIONAL_BEG_DATE IS NOT NULL ) AND ( RCPRODUCT.PROVISIONAL_END_DATE IS NOT NULL ) THEN
         RCPRODUCT.IS_PROVISIONAL := GE_BOCONSTANTS.CSBYES;
      END IF;
      IF ( INUPROD_STATUS IS NULL ) THEN
         RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODACTI;
       ELSE
         RCPRODUCT.PRODUCT_STATUS_ID := INUPROD_STATUS;
      END IF;
      RCPRODUCT.SERVICE_NUMBER := NVL( ISBSERVICE_NUMBER, NUPRODUCTID );
      RCPRODUCT.CREATION_DATE := DTSYSDATE;
      RCPRODUCT.IS_PRIVATE := NVL( ISBPRIVATE, 'N' );
      RCPRODUCT.RETIRE_DATE := NULL;
      RCPRODUCT.COMMERCIAL_PLAN_ID := INUCOMMERCIAL_PLAN_ID;
      RCPRODUCT.PERSON_ID := INUPERSON_ID;
      RCPRODUCT.CLASS_PRODUCT := INUCLASS_PRODUCT;
      RCPRODUCT.ROLE_WARRANTY := ISBSESUROGA;
      RCPRODUCT.CREDIT_LIMIT := INUCREDIT_LIMIT;
      IF ( INUCOMMERCIAL_PLAN_ID IS NOT NULL ) THEN
         RCPRODUCT.EXPIRATION_OF_PLAN := CC_BOCOMMPERMANENCE.FDTCALCULATEEXPDATE( DTSYSDATE, DACC_COMMERCIAL_PLAN.FNUGETPERMANENCE( INUCOMMERCIAL_PLAN_ID ) );
      END IF;
      IF ( INUADDRESS_ID IS NULL AND IBOREGADDRESS ) THEN
         IF ERRORS.GETEXTERNALSYSTEM THEN
            ADDRESSPARSERNOTCOMMIT( INUGEOGRAP_LOCATION_ID, ISBADDRESS, INUNEIGHBORTHOOD_ID, NUADDRESS_ID, SBADDRESS_PARSED, SBSUCCESSMESSAGE, NUERROR, SBERRMSG );
          ELSE
            ADDRESSPARSER( INUGEOGRAP_LOCATION_ID, ISBADDRESS, INUNEIGHBORTHOOD_ID, NUADDRESS_ID, SBADDRESS_PARSED, SBSUCCESSMESSAGE, NUERROR, SBERRMSG );
         END IF;
         IF ( NUERROR != 0 ) THEN
            UT_TRACE.TRACE( 'AddressParser Error: [' || NUERROR || '] Mesg:[' || SBERRMSG || ']', 5 );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         UT_TRACE.TRACE( 'AddressParser  AddressID: ' || NUADDRESS_ID || ' Add Parser:' || SBADDRESS_PARSED, 5 );
         SBADDRESS := ISBADDRESS;
         NUGEOGRAP_LOCATION_ID := INUGEOGRAP_LOCATION_ID;
         NUNEIGHBORTHOOD_ID := INUNEIGHBORTHOOD_ID;
       ELSE
         NUADDRESS_ID := INUADDRESS_ID;
         RCADDRESS := DAAB_ADDRESS.FRCGETRECORD( NUADDRESS_ID );
         SBADDRESS := RCADDRESS.ADDRESS;
         NUGEOGRAP_LOCATION_ID := RCADDRESS.GEOGRAP_LOCATION_ID;
         NUNEIGHBORTHOOD_ID := RCADDRESS.NEIGHBORTHOOD_ID;
      END IF;
      RCPRODUCT.ADDRESS_ID := NUADDRESS_ID;
      UT_TRACE.TRACE( 'PR_Product.address_id= [' || RCPRODUCT.ADDRESS_ID || ']', 5 );
      RCPRODUCT.COMPANY_ID := NVL( INUCOMPANYID, GNUDEF_COMPANY_ID );
      UT_TRACE.TRACE( 'PR_Product.company_id = [' || RCPRODUCT.COMPANY_ID || ']', 10 );
      DAPR_PRODUCT.INSRECORD( RCPRODUCT );
      UT_TRACE.TRACE( 'INserto producto [' || NUPRODUCTID || ']', 7 );
      NUSUBSCRIBER := PKTBLSUSCRIPC.FNUGETCUSTOMER( INUSUBSCRIPTION_ID );
      PR_BOSUBSBYPRODUCT.INSPRODROL( NUPRODUCTID, NUSUBSCRIBER, CC_BOCONSTANTS.CNUUSER_CLIENT_ROLE );
      PR_BOSUBSBYPRODUCT.INSPRODROL( NUPRODUCTID, NUSUBSCRIBER, CC_BOCONSTANTS.CNUOWNER_CLIENT_ROLE );
      UT_TRACE.TRACE( 'INserto en Pr_Product [' || NUPRODUCTID || ']', 6 );
      IF ( INUCOMMERCIAL_PLAN_ID IS NULL ) THEN
         NUSESUPLFA := INUBILLPLAN;
       ELSE
         NUSESUPLFA := DACC_COMMERCIAL_PLAN.FNUGETBILLING_PLAN( INUCOMMERCIAL_PLAN_ID );
      END IF;
      REGISTERSERVSUSC( NUPRODUCTID, INUSUBSCRIPTION_ID, INUPRODUCT_TYPE_ID, INUCATEGORYID, INUSUBCATEGORYID, NUSESUPLFA, RCPRODUCT.ADDRESS_ID, INUCONNECTSTATUS, INUSESUCICO, INUSESUMULT, INUCLASS_PRODUCT, INUSERVBASE, DTINSTALLDATE, RCPRODUCT.COMPANY_ID, RCPRODUCT.CREDIT_LIMIT, RCPRODUCT.ROLE_WARRANTY );
      UT_TRACE.TRACE( 'FINaliza PR_BOProduct.Register', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END REGISTER;
   PROCEDURE UPDADDRESS( INUPRODUCT_ID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, INUNEIGHBORTHOOD_ID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    IS
      SBADDRESS_PARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUADDRESS_ID PR_PRODUCT.ADDRESS_ID%TYPE;
      SBSUCCESSMESSAGE VARCHAR2( 1000 );
      NUERROR NUMBER;
      SBERRMSG VARCHAR2( 2000 );
      CNUADDRESS_TYPE_ID CONSTANT NUMBER := 1;
      CNUADDRESS_TYPE_OLD CONSTANT NUMBER := 2;
      NUDUMMYADDRESS_ID AB_ADDRESS.ADDRESS_ID%TYPE;
      RCSERVSUSC SERVSUSC%ROWTYPE;
    BEGIN
      UT_TRACE.TRACE( 'INicia PR_BOProduct.UpdAddress', 5 );
      PR_BOADDRESS.GETIDADDRESSANDIDPREMISE( INUPRODUCT_ID, NUDUMMYADDRESS_ID );
      IF ERRORS.GETEXTERNALSYSTEM THEN
         ADDRESSPARSERNOTCOMMIT( INUGEOGRAP_LOCATION_ID, ISBADDRESS, INUNEIGHBORTHOOD_ID, NUADDRESS_ID, SBADDRESS_PARSED, SBSUCCESSMESSAGE, NUERROR, SBERRMSG );
       ELSE
         ADDRESSPARSER( INUGEOGRAP_LOCATION_ID, ISBADDRESS, INUNEIGHBORTHOOD_ID, NUADDRESS_ID, SBADDRESS_PARSED, SBSUCCESSMESSAGE, NUERROR, SBERRMSG );
      END IF;
      IF ( NUERROR != 0 ) THEN
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      DAPR_PRODUCT.UPDADDRESS_ID( INUPRODUCT_ID, NUADDRESS_ID );
      RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( INUPRODUCT_ID, PKCONSTANTE.NOCACHE );
      PKTBLSERVSUSC.UPRECORD( RCSERVSUSC );
      UT_TRACE.TRACE( 'FINaliza PR_BOProduct.UpdAddress', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDPLANPRODUCT( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUNEWCOMMERCIALPLANID IN PR_PRODUCT.COMMERCIAL_PLAN_ID%TYPE, IDTPROCESSDATE IN DATE := SYSDATE, INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE := NULL )
    IS
      RCCOMMPLAN DACC_COMMERCIAL_PLAN.STYCC_COMMERCIAL_PLAN;
      SBEXISTPRODTYPE VARCHAR2( 1 );
      NUPRODUCTTYPEID PR_PRODUCT.PRODUCT_TYPE_ID%TYPE := -1;
      NUCURRENTCOMMPLANID PR_PRODUCT.COMMERCIAL_PLAN_ID%TYPE;
      NUENTIATTRID GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE;
      NUERRORCODE GE_ERROR_LOG.ERROR_LOG_ID%TYPE := NULL;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE := NULL;
      NUPERMANENCE MO_MOTIVE.PERMANENCE%TYPE := NULL;
      CSBENTITY CONSTANT VARCHAR2( 255 ) := 'PR_PRODUCT';
      CSBENTITYATTR CONSTANT VARCHAR2( 30 ) := 'COMMERCIAL_PLAN_ID';
    BEGIN
      UT_TRACE.TRACE( 'INicio PR_BOProduct.UpdPlanProduct, Producto[' || INUPRODUCTID || '] NewCommercialPlanId[' || INUNEWCOMMERCIALPLANID || ']', 5 );
      DACC_COMMERCIAL_PLAN.GETRECORD( INUNEWCOMMERCIALPLANID, RCCOMMPLAN );
      UT_TRACE.TRACE( 'Envia a actualizar, Producto[' || INUPRODUCTID || '] preratINg_plan[' || RCCOMMPLAN.PRERATING_PLAN || '] ratINg_plan[' || RCCOMMPLAN.RATING_PLAN || ']billINg_plan[' || RCCOMMPLAN.BILLING_PLAN || '] nuProductTypeId[' || NUPRODUCTTYPEID || ']', 5 );
      PKBILLCONDITIONCHANGE.UPDCOMMERCIALPLAN( INUPRODUCTID, RCCOMMPLAN.PRERATING_PLAN, RCCOMMPLAN.RATING_PLAN, RCCOMMPLAN.BILLING_PLAN, NUPRODUCTTYPEID, IDTPROCESSDATE, NUERRORCODE, SBERRORMESSAGE );
      GW_BOERRORS.CHECKERROR( NUERRORCODE, SBERRORMESSAGE );
      IF ( INUMOTIVEID IS NOT NULL ) THEN
         NUPERMANENCE := DAMO_MOTIVE.FNUGETPERMANENCE( INUMOTIVEID );
      END IF;
      IF ( NUPERMANENCE IS NULL ) THEN
         NUPERMANENCE := RCCOMMPLAN.PERMANENCE;
      END IF;
      UPDCOMMERCIALPLAN( INUPRODUCTID, INUNEWCOMMERCIALPLANID, NUPERMANENCE );
      UT_TRACE.TRACE( 'FIN PR_BOProduct.UpdPlanProduct', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDPLANPRODUCT;
   PROCEDURE UPDPRODRETUNINSTALLIND( INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE )
    IS
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
      RCPRODUCTDEPEND DAPR_PRODUCT.STYPR_PRODUCT;
      RCSERVSUSC SERVSUSC%ROWTYPE;
      RCDESPSERV SERVSUSC%ROWTYPE;
      NUDEPENDSERVID PR_PRODUCT.PRODUCT_ID%TYPE;
      DTSYSDATE DATE := SYSDATE;
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
      NUINCLUDEFEATUREID CC_INCLUDED_FEATURES.INCLUDED_FEATURES_ID%TYPE;
      BLPRODWASBUNDLED BOOLEAN := FALSE;
      RCMOTIVE DAMO_MOTIVE.STYMO_MOTIVE;
      TBCOMPONENTS DAPR_COMPONENT.TYTBPR_COMPONENT;
      NUINDX BINARY_INTEGER;
    BEGIN
      UT_TRACE.TRACE( 'INicio PR_BOProduct.UpdProdRetUnINstallINd Motivo [' || INUMOTIVEID || ']', 12 );
      RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD( INUMOTIVEID );
      NUPRODUCTID := RCMOTIVE.PRODUCT_ID;
      IF ( NUPRODUCTID IS NULL ) THEN
         RETURN;
      END IF;
      RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD( NUPRODUCTID );
      UT_TRACE.TRACE( 'Estado del producto[' || RCPRODUCT.PRODUCT_STATUS_ID || ']', 5 );
      IF ( RCPRODUCT.PRODUCT_STATUS_ID != PR_BOPARAMETER.FNUGETPRPENDINST ) THEN
         RETURN;
      END IF;
      IF NOT ( RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE OR RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUINSTALLONPR_MOTI_TYPE OR RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUINSTALLFROMPR_MOTI_TYPE ) THEN
         RETURN;
      END IF;
      UT_TRACE.TRACE( 'Producto a actualizar[' || RCPRODUCT.PRODUCT_ID || ']', 5 );
      NUINCLUDEFEATUREID := CC_BOBUNDLINGPROCESS.FNUGETINCLUDEFEATURESPR( RCPRODUCT.PRODUCT_ID );
      TBCOMPONENTS := PR_BCCOMPONENT.FTBCOMPONENTSBYPRODUCTID( RCPRODUCT.PRODUCT_ID );
      NUINDX := TBCOMPONENTS.FIRST;
      WHILE ( NUINDX IS NOT NULL )
       LOOP
         PR_BORETIRE.WITHDRAWCOMPBEFOREINST( TBCOMPONENTS( NUINDX ), PR_BOCONSTANTS.CNURETTYPADMINISTRATIVE, UT_DATE.FDTSYSDATE );
         NUINDX := TBCOMPONENTS.NEXT( NUINDX );
      END LOOP;
      RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRRETUNINST;
      RCPRODUCT.RETIRE_DATE := DTSYSDATE;
      DAPR_PRODUCT.UPDRECORD( RCPRODUCT );
      GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS( PKTBLSUSCRIPC.FNUGETSUSCCLIE( RCPRODUCT.SUBSCRIPTION_ID, PKCONSTANTE.NOCACHE ) );
      UT_TRACE.TRACE( 'Estado del producto actualizado.', 5 );
      CC_BOBUNDLINGPROCESS.BUNDLINGRECONFIG( RCPRODUCT.PRODUCT_ID, NULL, NUINCLUDEFEATUREID );
      IF ( PKTBLSERVSUSC.FBLEXIST( NUPRODUCTID ) ) THEN
         RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( NUPRODUCTID, PKCONSTANTE.NOCACHE );
         UT_TRACE.TRACE( 'Servicio suscrito del producto [' || RCSERVSUSC.SESUNUSE || ']', 5 );
         RCSERVSUSC.SESUESCO := PR_BOPARAMETER.FNUGETESCOREUNINST;
         RCSERVSUSC.SESUFERE := DTSYSDATE;
         PKTBLSERVSUSC.UPRECORD( RCSERVSUSC );
         UT_TRACE.TRACE( 'Estado de corte del servicio suscrito actualizado.', 5 );
      END IF;
      NUDEPENDSERVID := PKBCSERVSUSC.FNUGETDEPENDSERVI( RCPRODUCT.PRODUCT_ID );
      IF ( NUDEPENDSERVID IS NOT NULL ) THEN
         RCPRODUCTDEPEND := DAPR_PRODUCT.FRCGETRECORD( NUDEPENDSERVID );
         RCPRODUCTDEPEND.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRRETUNINST;
         RCPRODUCTDEPEND.RETIRE_DATE := DTSYSDATE;
         DAPR_PRODUCT.UPDRECORD( RCPRODUCTDEPEND );
         GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS( PKTBLSUSCRIPC.FNUGETSUSCCLIE( RCPRODUCTDEPEND.SUBSCRIPTION_ID, PKCONSTANTE.NOCACHE ) );
         IF ( PKTBLSERVSUSC.FBLEXIST( NUDEPENDSERVID ) ) THEN
            RCDESPSERV := PKTBLSERVSUSC.FRCGETRECORD( NUDEPENDSERVID, PKCONSTANTE.NOCACHE );
            UT_TRACE.TRACE( 'Servicio suscrito del producto dependiente [' || RCDESPSERV.SESUNUSE || ']', 5 );
            RCDESPSERV.SESUESCO := PR_BOPARAMETER.FNUGETESCOREUNINST;
            RCDESPSERV.SESUFERE := DTSYSDATE;
            PKTBLSERVSUSC.UPRECORD( RCDESPSERV );
         END IF;
      END IF;
      UT_TRACE.TRACE( 'FINaliza PR_BOProduct.UpdProdRetUnINstallINd ', 12 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDPRODRETUNINSTALL( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE := NULL )
    IS
      TBMOTIVES DAMO_MOTIVE.TYTBMO_MOTIVE;
      BIINDEXMOT BINARY_INTEGER := 1;
    BEGIN
      UT_TRACE.TRACE( 'INicio PR_BOProduct.UpdProdRetUnINstall paquete [' || INUPACKAGEID || '] motivo [' || INUMOTIVEID || ']', 5 );
      ERRORS.SETAPPLICATION( CC_BOCONSTANTS.CSBCUSTOMERCARE );
      IF ( INUMOTIVEID IS NOT NULL ) THEN
         PR_BOPRODUCT.UPDPRODRETUNINSTALLIND( INUMOTIVEID );
       ELSE
         OPEN MO_BCMOTIVE.CUMOTIVESBYPACKAGE( INUPACKAGEID );
         FETCH MO_BCMOTIVE.CUMOTIVESBYPACKAGE
            BULK COLLECT INTO TBMOTIVES;
         CLOSE MO_BCMOTIVE.CUMOTIVESBYPACKAGE;
         BIINDEXMOT := TBMOTIVES.FIRST;
         WHILE BIINDEXMOT IS NOT NULL
          LOOP
            PR_BOPRODUCT.UPDPRODRETUNINSTALLIND( TBMOTIVES( BIINDEXMOT ).MOTIVE_ID );
            BIINDEXMOT := TBMOTIVES.NEXT( BIINDEXMOT );
         END LOOP;
      END IF;
      UT_TRACE.TRACE( 'FIN PR_BOProduct.UpdProdRetUnINstall', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDPRODRETUNINSTALL;
   FUNCTION FSBGETADDRTYPE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN VARCHAR2
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      SBADDRESSTYPE VARCHAR2( 3 ) := '-';
    BEGIN
      UT_TRACE.TRACE( 'INicio PR_BOProduct.fsbGetAddrType producto [' || INUPRODUCTID || ']', 5 );
      DAAB_ADDRESS.GETRECORD( DAPR_PRODUCT.FNUGETADDRESS_ID( INUPRODUCTID ), RCADDRESS );
      IF ( RCADDRESS.IS_URBAN = 'Y' ) THEN
         SBADDRESSTYPE := 'U';
       ELSE
         SBADDRESSTYPE := 'R';
      END IF;
      UT_TRACE.TRACE( 'FIN PR_BOProduct.fsbGetAddrType', 5 );
      RETURN SBADDRESSTYPE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETADDRTYPE;
   PROCEDURE UPDATEINSTALADDR( INUOLDPARSERID IN NUMBER, INUNEWPARSERID IN NUMBER, ISBNEWADDRESS IN VARCHAR2 )
    IS
      TBTYPRODID DAPR_PRODUCT.TYTBPRODUCT_ID;
      BLCONT BOOLEAN;
      NUINDEX NUMBER;
      NULASTPRODUCT PR_PRODUCT.PRODUCT_ID%TYPE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         TBTYPRODID.DELETE;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( '[CONTROLLED_ERROR]: PR_BOProduct.updateINstalAddr.clearMemory' );
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            UT_TRACE.TRACE( '[CONTROLLED_ERROR]: PR_BOProduct.updateINstalAddr.clearMemory' );
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END CLEARMEMORY;
    BEGIN
      UT_TRACE.TRACE( 'INICIO: PR_BOProduct.updateInstalAddr ' );
      CLEARMEMORY;
      BLCONT := TRUE;
      NULASTPRODUCT := 0;
      LOOP
         PR_BCPRODUCT.GETPRODUCTBYADDR( INUOLDPARSERID, NULASTPRODUCT, BLCONT, TBTYPRODID );
         EXIT WHEN ( BLCONT = FALSE );
         NUINDEX := TBTYPRODID.FIRST;
         NULASTPRODUCT := TBTYPRODID( TBTYPRODID.LAST );
         WHILE NUINDEX IS NOT NULL
          LOOP
            EXIT WHEN NUINDEX > TBTYPRODID.LAST;
            DAPR_PRODUCT.UPDADDRESS_ID( TBTYPRODID( NUINDEX ), INUNEWPARSERID );
            NUINDEX := NUINDEX + 1;
         END LOOP;
      END LOOP;
      UT_TRACE.TRACE( 'FIN: PR_BOProduct.updateInstalAddr ' );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDATEINSTALADDR;
   FUNCTION FNUGETPRODIDBYSENUANDPRTY( ISBSERVICENUMBER IN PR_PRODUCT.SERVICE_NUMBER%TYPE, INUPRODUCTTYPEID IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE, ISBSTATUSIDS IN VARCHAR )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE
    IS
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
      CURSOR CUPRODBYSENUANDPRTY IS
SELECT product_id
              FROM pr_product
             WHERE service_number    = isbServiceNumber
			   AND product_type_id   = inuProductTypeId
			   AND INSTR(','||isbStatusIds||',',','||product_status_id||',') > 0
               AND ROWNUM = 1;
    BEGIN
      UT_TRACE.TRACE( 'Inicia PR_BOProduct.fnuGetProdIdBySeNuAndPrTy', 5 );
      UT_TRACE.TRACE( 'isbServiceNumber[' || ISBSERVICENUMBER || ']', 6 );
      UT_TRACE.TRACE( 'inuProductTypeId[' || INUPRODUCTTYPEID || ']', 6 );
      UT_TRACE.TRACE( 'isbStatusIds[' || ISBSTATUSIDS || ']', 6 );
      OPEN CUPRODBYSENUANDPRTY;
      FETCH CUPRODBYSENUANDPRTY
         INTO NUPRODUCTID;
      CLOSE CUPRODBYSENUANDPRTY;
      UT_TRACE.TRACE( 'Producto Obtenido [' || NUPRODUCTID || ']', 7 );
      UT_TRACE.TRACE( 'Finaliza PR_BOProduct.fnuGetProdIdBySeNuAndPrTy', 5 );
      RETURN NUPRODUCTID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUPRODBYSENUANDPRTY%ISOPEN ) THEN
            CLOSE CUPRODBYSENUANDPRTY;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUPRODBYSENUANDPRTY%ISOPEN ) THEN
            CLOSE CUPRODBYSENUANDPRTY;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETPRODIDBYSENUANDPRTY;
   FUNCTION FNUGETSUBSCBYSERVNUM( ISBSERVICENUMBER IN PR_PRODUCT.SERVICE_NUMBER%TYPE )
    RETURN NUMBER
    IS
      NUSUBSCRIBERID GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
      CURES CONSTANTS.TYREFCURSOR;
    BEGIN
      UT_TRACE.TRACE( 'Inicia PR_BOProduct.fnuGetSubscByServNum', 5 );
      UT_TRACE.TRACE( 'isbServiceNumber[' || ISBSERVICENUMBER || ']', 6 );
      CURES := PR_BCPRODUCT.GETSUBSCRIBERID( ISBSERVICENUMBER );
      FETCH CURES
         INTO NUSUBSCRIBERID;
      CLOSE CURES;
      UT_TRACE.TRACE( 'Cliente Obtenido [' || NUSUBSCRIBERID || ']', 7 );
      UT_TRACE.TRACE( 'Finaliza PR_BOProduct.fnuGetSubscByServNum', 5 );
      RETURN NUSUBSCRIBERID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CURES%ISOPEN ) THEN
            CLOSE CURES;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CURES%ISOPEN ) THEN
            CLOSE CURES;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETSUBSCBYSERVNUM;
   PROCEDURE GETSUBSCRIBERBYPRODUCT( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, ONUSUBSCRIBERID OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE, ONUIDENTYPEID OUT GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE, OSBIDENTIFICATION OUT GE_SUBSCRIBER.IDENTIFICATION%TYPE, OSBSUBSCRIBERNAME OUT GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE, OSBSUBSLASTNAME OUT GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE, OSBSUBSCRIBERADDRESS OUT GE_SUBSCRIBER.ADDRESS%TYPE, OSBPHONE OUT GE_SUBSCRIBER.PHONE%TYPE, OSBEMAIL OUT GE_SUBSCRIBER.E_MAIL%TYPE )
    IS
      NUSUBSCRIPTIONID PR_PRODUCT.SUBSCRIPTION_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio PR_BOProduct.GetSubscriberByProduct', 5 );
      NUSUBSCRIPTIONID := DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID( INUPRODUCTID );
      ONUSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER( NUSUBSCRIPTIONID );
      ONUIDENTYPEID := DAGE_SUBSCRIBER.FNUGETIDENT_TYPE_ID( ONUSUBSCRIBERID );
      OSBIDENTIFICATION := DAGE_SUBSCRIBER.FSBGETIDENTIFICATION( ONUSUBSCRIBERID );
      OSBSUBSCRIBERNAME := DAGE_SUBSCRIBER.FSBGETSUBSCRIBER_NAME( ONUSUBSCRIBERID );
      OSBSUBSLASTNAME := DAGE_SUBSCRIBER.FSBGETSUBS_LAST_NAME( ONUSUBSCRIBERID );
      OSBSUBSCRIBERADDRESS := DAGE_SUBSCRIBER.FSBGETADDRESS( ONUSUBSCRIBERID );
      OSBPHONE := DAGE_SUBSCRIBER.FSBGETPHONE( ONUSUBSCRIBERID );
      OSBEMAIL := DAGE_SUBSCRIBER.FSBGETE_MAIL( ONUSUBSCRIBERID );
      UT_TRACE.TRACE( 'Fin PR_BOProduct.GetSubscriberByProduct', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETSUBSCRIBERBYPRODUCT;
   PROCEDURE GETPRODUCTBYCHANNELCURRENT( RFPRODUCTS OUT CONSTANTS.TYREFCURSOR )
    IS
      PERSONID GE_PERSON.PERSON_ID%TYPE;
      CHANELID CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE;
      SUBSCRIPTIONID GE_ORGA_AREA_ADD_DATA.SUBSCRIPTION_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio PR_BOProduct.GetProductByChannelCurrent', 5 );
      PERSONID := GE_BOPERSONAL.FNUGETPERSONID();
      UT_TRACE.TRACE( 'PersonId: ' || PERSONID, 5 );
      IF ( PERSONID IS NULL ) THEN
         ERRORS.SETERROR( CNUERROR_SALESNULL );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      GE_BOPERSONAL.GETCURRENTCHANNEL( PERSONID, CHANELID );
      UT_TRACE.TRACE( 'ChanelId: ' || CHANELID, 5 );
      IF ( CHANELID IS NULL ) THEN
         ERRORS.SETERROR( CNUERROR_SALES_CHANNEL );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      GETPRODUCTBYCHANNEL( CHANELID, RFPRODUCTS );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPRODUCTBYCHANNEL( INUCHANELID IN CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE, RFPRODUCTS OUT CONSTANTS.TYREFCURSOR )
    IS
      SUBSCRIPTIONID GE_ORGA_AREA_ADD_DATA.SUBSCRIPTION_ID%TYPE;
    BEGIN
      SUBSCRIPTIONID := DAGE_ORGA_AREA_ADD_DATA.FNUGETSUBSCRIPTION_ID( INUCHANELID );
      IF ( SUBSCRIPTIONID IS NULL ) THEN
         ERRORS.SETERROR( CNUERROR_CHANNEL_SUBSCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'SubscriptionId = [' || SUBSCRIPTIONID || ']', 4 );
      RFPRODUCTS := PR_BCPRODUCT.FRFGETPRODBYSUSCANDTYP( SUBSCRIPTIONID, TO_CHAR( MO_BOCONSTANTS.CNUGENERICPRODUCTTYPE ) );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETMAINCOMPONENTID( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, IBLRAISEERROR IN BOOLEAN := TRUE )
    RETURN NUMBER
    IS
    BEGIN
      RETURN PR_BCPRODUCT.FNUGETMAINCOMPONENTID( INUPRODUCTID, IBLRAISEERROR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETINSTALLPAYMENT( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN CUENCOBR.CUCOVAFA%TYPE
    IS
      NUINSTALLPACK MO_PACKAGES.PACKAGE_ID%TYPE;
      NUINSTALLBILL FACTURA.FACTCODI%TYPE;
      RCCUENCOBR CUENCOBR%ROWTYPE;
    BEGIN
      FOR RCMOT IN MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY( INUPRODUCTID, MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE )
       LOOP
         NUINSTALLPACK := RCMOT.PACKAGE_ID;
      END LOOP;
      NUINSTALLBILL := MO_BOPACKAGEPAYMENT.FNUGETACCOUNTBYPACKAGE( NUINSTALLPACK );
      IF ( NUINSTALLBILL IS NOT NULL ) THEN
         RCCUENCOBR := PKBCCUENCOBR.FRCGETACCBYPRODBILL( NUINSTALLBILL, INUPRODUCTID );
      END IF;
      RETURN RCCUENCOBR.CUCOVAFA;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDPRODPENDRETORPENDTRAS( INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE )
    IS
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
      DTSYSDATE DATE := SYSDATE;
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
      RCMOTIVE DAMO_MOTIVE.STYMO_MOTIVE;
      BLPRODHASSUSP BOOLEAN;
    BEGIN
      UT_TRACE.TRACE( 'Inicio PR_BOProduct.UpdProdPendRetOrPendTras Motivo [' || INUMOTIVEID || ']', 12 );
      RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD( INUMOTIVEID );
      NUPRODUCTID := RCMOTIVE.PRODUCT_ID;
      IF ( NUPRODUCTID IS NULL ) THEN
         RETURN;
      END IF;
      RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD( NUPRODUCTID );
      UT_TRACE.TRACE( 'Estado del producto[' || RCPRODUCT.PRODUCT_STATUS_ID || ']', 5 );
      IF ( RCPRODUCT.PRODUCT_STATUS_ID != PR_BOPARAMETER.FNUGETRETPENDPROD AND RCPRODUCT.PRODUCT_STATUS_ID != PR_BOPARAMETER.FNUGETMOVPENDPROD ) THEN
         RETURN;
      END IF;
      IF NOT ( RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNURETIRE_MOTI_TYPE OR RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUMOVE_MOTI_TYPE ) THEN
         RETURN;
      END IF;
      UT_TRACE.TRACE( 'Producto a actualizar[' || RCPRODUCT.PRODUCT_ID || ']', 5 );
      BLPRODHASSUSP := PR_BCPRODUCT.FBLEXISTPRODSUSPENSION( RCPRODUCT.PRODUCT_ID, NULL );
      FOR RCCOMP IN PR_BCCOMPONENT.CUCOMPSPENDRETORTRASBYPROD( RCPRODUCT.PRODUCT_ID )
       LOOP
         IF ( PR_BCPRODUCT.FBLEXISTCOMPSUSPENSION( RCCOMP.COMPONENT_ID, NULL ) OR BLPRODHASSUSP ) THEN
            RCCOMP.COMPONENT_STATUS_ID := PR_BOPARAMETER.FNUGETCOMPSUSP;
          ELSE
            RCCOMP.COMPONENT_STATUS_ID := PR_BOPARAMETER.FNUGETCOMPACTI;
         END IF;
         RCCOMP.LAST_UPD_DATE := DTSYSDATE;
         DAPR_COMPONENT.UPDRECORD( RCCOMP );
      END LOOP;
      IF ( BLPRODHASSUSP ) THEN
         RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODSUSP;
       ELSE
         RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODACTI;
      END IF;
      UT_TRACE.TRACE( 'Estado del producto actualizado[' || RCPRODUCT.PRODUCT_STATUS_ID || ']', 5 );
      DAPR_PRODUCT.UPDPRODUCT_STATUS_ID( RCPRODUCT.PRODUCT_ID, RCPRODUCT.PRODUCT_STATUS_ID );
      GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS( PKTBLSUSCRIPC.FNUGETSUSCCLIE( RCPRODUCT.SUBSCRIPTION_ID, PKCONSTANTE.NOCACHE ) );
      UT_TRACE.TRACE( 'Finaliza PR_BOProduct.UpdProdPendRetOrPendTras ', 12 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDPRODPENDRETORPENDTRAS;
   PROCEDURE UPDPRODPENDRETORPENDTRAS( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE )
    IS
      TBMOTIVES DAMO_MOTIVE.TYTBMO_MOTIVE;
      BIINDEXMOT BINARY_INTEGER := 1;
    BEGIN
      UT_TRACE.TRACE( 'Inicio PR_BOProduct.UpdProdPendRetOrPendTras paquete [' || INUPACKAGEID || '] motivo [' || INUMOTIVEID || ']', 5 );
      IF ( INUMOTIVEID IS NOT NULL ) THEN
         UPDPRODPENDRETORPENDTRAS( INUMOTIVEID );
       ELSE
         OPEN MO_BCMOTIVE.CUMOTIVESBYPACKAGE( INUPACKAGEID );
         FETCH MO_BCMOTIVE.CUMOTIVESBYPACKAGE
            BULK COLLECT INTO TBMOTIVES;
         CLOSE MO_BCMOTIVE.CUMOTIVESBYPACKAGE;
         BIINDEXMOT := TBMOTIVES.FIRST;
         WHILE BIINDEXMOT IS NOT NULL
          LOOP
            UPDPRODPENDRETORPENDTRAS( TBMOTIVES( BIINDEXMOT ).MOTIVE_ID );
            BIINDEXMOT := TBMOTIVES.NEXT( BIINDEXMOT );
         END LOOP;
      END IF;
      UT_TRACE.TRACE( 'Fin PR_BOProduct.UpdProdPendRetOrPendTras', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDPRODPENDRETORPENDTRAS;
   FUNCTION FBLEXISTPRODBYSUSCANDTAG( INUSUSCRIPCION IN SUSCRIPC.SUSCCODI%TYPE, INUTAGXML IN SERVICIO.SERVTXML%TYPE )
    RETURN BOOLEAN
    IS
      NUBILL FACTURA.FACTCODI%TYPE;
      TBPRODUCTS DAPR_PRODUCT.TYTBPR_PRODUCT;
      NUIDX BINARY_INTEGER;
      BLRETURN BOOLEAN;
    BEGIN
      UT_TRACE.TRACE( 'INICIO PR_BOProduct.fblExistProdBySuscAndTag', 1 );
      BLRETURN := FALSE;
      NUBILL := PKBCFACTURA.FNUGETLASTCONSBILLBYSUSC( INUSUSCRIPCION );
      IF ( NUBILL IS NULL ) THEN
         UT_TRACE.TRACE( 'No existe factura de consumo para la suscripcion: ' || INUSUSCRIPCION, 1 );
         UT_TRACE.TRACE( 'FIN PR_BOProduct.fblExistProdBySuscAndTag', 1 );
         RETURN BLRETURN;
      END IF;
      TBPRODUCTS := PR_BCPRODUCT.FTBPRODSBYSUBSCID( INUSUSCRIPCION );
      NUIDX := TBPRODUCTS.FIRST;
      LOOP
         EXIT WHEN NUIDX IS NULL OR BLRETURN = TRUE;
         IF ( INUTAGXML = PKTBLSERVICIO.FSBGETTAG_NAME( TBPRODUCTS( NUIDX ).PRODUCT_TYPE_ID ) ) THEN
            BLRETURN := TRUE;
         END IF;
         NUIDX := TBPRODUCTS.NEXT( NUIDX );
      END LOOP;
      UT_TRACE.TRACE( 'FIN PR_BOProduct.fblExistProdBySuscAndTag', 1 );
      RETURN BLRETURN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Error PR_BOProduct.fblExistProdBySuscAndTag', 1 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'Error PR_BOProduct.fblExistProdBySuscAndTag', 1 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLEXISTPRODBYSUSCANDTAG;
   FUNCTION FSBGETFLAGLONGDISTANCE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN SERVSUSC.SESUIMLD%TYPE
    IS
    BEGIN
      UT_TRACE.TRACE( 'fnuGetRememberEasyType', 10 );
      UT_TRACE.TRACE( 'ProductID[' || INUPRODUCTID || ']', 10 );
      RETURN PKTBLSERVSUSC.FSBGETFLAGLONGDISTANCE( INUPRODUCTID, PKCONSTANTE.NOCACHE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETREMEMBEREASYTYPE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN IF_NUMBER.REMEMBER_EASY_TYPE%TYPE
    IS
    BEGIN
      UT_TRACE.TRACE( 'fnuGetRememberEasyType', 10 );
      UT_TRACE.TRACE( 'ProductID[' || INUPRODUCTID || ']', 10 );
      DAPR_PRODUCT.ACCKEY( INUPRODUCTID );
      RETURN PR_BOCOMPONENT.FNUGETREMEMBEREASYTYPE( PR_BCPRODUCT.FNUGETMAINCOMPONENTID( INUPRODUCTID ) );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FTBSUBSCRIBERPRODS( INUSUBSCRIBERID IN PM_TARGET_POPULAT.PROJECT_ID%TYPE, IBOACTIVEONLY IN BOOLEAN )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT
    IS
      TBTMPPRODS DAPR_PRODUCT.TYTBPR_PRODUCT;
      TBPRODUCTS DAPR_PRODUCT.TYTBPR_PRODUCT;
      NUINDX BINARY_INTEGER;
    BEGIN
      FOR RCCONTR IN PKBCSUSCRIPC.CUSUBSCRIPTIONS( INUSUBSCRIBERID )
       LOOP
         TBTMPPRODS.DELETE;
         IF ( IBOACTIVEONLY ) THEN
            TBTMPPRODS := PR_BCPRODUCT.FTBACTPENDPRODBYSUBS( RCCONTR.SUSCCODI );
          ELSE
            PR_BCPRODUCT.GETPRODUCTSSUBSCRIPTION( RCCONTR.SUSCCODI, TBTMPPRODS );
         END IF;
         NUINDX := TBTMPPRODS.FIRST;
         WHILE ( NUINDX IS NOT NULL )
          LOOP
            TBPRODUCTS( TBPRODUCTS.COUNT + 1 ) := TBTMPPRODS( NUINDX );
            NUINDX := TBTMPPRODS.NEXT( NUINDX );
         END LOOP;
      END LOOP;
      RETURN TBPRODUCTS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FDTGETSUBSRETIREDATE( INUSUBSCRIBERID IN PM_TARGET_POPULAT.PROJECT_ID%TYPE )
    RETURN DATE
    IS
      TBPRODS DAPR_PRODUCT.TYTBPR_PRODUCT;
      DTRETIREDATE DATE := UT_DATE.FDTMINDATE;
      NUINDX BINARY_INTEGER;
    BEGIN
      TBPRODS := FTBSUBSCRIBERPRODS( INUSUBSCRIBERID, GE_BOCONSTANTS.GETFALSE );
      NUINDX := TBPRODS.FIRST;
      WHILE ( NUINDX IS NOT NULL )
       LOOP
         IF ( TBPRODS( NUINDX ).RETIRE_DATE > DTRETIREDATE ) THEN
            DTRETIREDATE := TBPRODS( NUINDX ).RETIRE_DATE;
         END IF;
         NUINDX := TBPRODS.NEXT( NUINDX );
      END LOOP;
      IF ( DTRETIREDATE = UT_DATE.FDTMINDATE ) THEN
         RETURN NULL;
       ELSE
         RETURN DTRETIREDATE;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETPRODBYSUSCANDTYPE( INUPRODUCTTYPEID IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE, INUSUBSCRIPTIONID IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE
    IS
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE := NULL;
      TBPRODUCTS DAPR_PRODUCT.TYTBPR_PRODUCT;
      NUIDX BINARY_INTEGER;
    BEGIN
      UT_TRACE.TRACE( 'Inicia PR_BOProduct.fnugetProdBySuscAndType', 13 );
      TBPRODUCTS.DELETE;
      TBPRODUCTS := PR_BCPRODUCT.FTBACTPENDPRODBYSUBS( INUSUBSCRIPTIONID );
      NUIDX := TBPRODUCTS.FIRST;
      WHILE NUIDX IS NOT NULL
       LOOP
         IF TBPRODUCTS( NUIDX ).PRODUCT_TYPE_ID = INUPRODUCTTYPEID THEN
            NUPRODUCTID := TBPRODUCTS( NUIDX ).PRODUCT_ID;
            EXIT;
         END IF;
         NUIDX := TBPRODUCTS.NEXT( NUIDX );
      END LOOP;
      RETURN NUPRODUCTID;
      UT_TRACE.TRACE( 'Finaliza PR_BOProduct.fnugetProdBySuscAndType', 13 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETPRODBYSUSCANDTYPE;
   FUNCTION FNUGETFIRSTACTIVECOMPBYTYPE( INUPRODUCTID IN PR_COMPONENT.PRODUCT_ID%TYPE, INUCOMPONENTTYPEID IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE )
    RETURN PR_COMPONENT.COMPONENT_ID%TYPE
    IS
      NUCOMPONENTID PR_COMPONENT.COMPONENT_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Begin PR_BOProduct.fnuGetFirstActiveCompByType[' || INUPRODUCTID || '][' || INUCOMPONENTTYPEID || ']', 5 );
      IF ( INUPRODUCTID IS NULL ) THEN
         ERRORS.SETERROR( 119562, 'Codigo del Producto' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( INUCOMPONENTTYPEID IS NULL ) THEN
         ERRORS.SETERROR( 119562, 'Codigo del Tipo de Componente' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      DAPR_PRODUCT.ACCKEY( INUPRODUCTID );
      DAPS_COMPONENT_TYPE.ACCKEY( INUCOMPONENTTYPEID );
      NUCOMPONENTID := PR_BCCOMPONENT.FNUGETCOMPONENTBYTYPE( INUPRODUCTID, INUCOMPONENTTYPEID, FALSE );
      UT_TRACE.TRACE( 'END PR_BOProduct.fnuGetFirstActiveCompByType[' || NUCOMPONENTID || ']', 5 );
      RETURN NUCOMPONENTID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETFIRSTACTIVECOMPBYTYPE;
   FUNCTION FNUGETFIRSTCOMPBYTYPEANDSTATUS( INUPRODUCTID IN PR_COMPONENT.PRODUCT_ID%TYPE, INUCOMPONENTTYPEID IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE, INUCOMPONENTSTATUSID IN PR_COMPONENT.COMPONENT_STATUS_ID%TYPE )
    RETURN PR_COMPONENT.COMPONENT_ID%TYPE
    IS
      NUCOMPONENTID PR_COMPONENT.COMPONENT_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Begin PR_BOProduct.fnuGetFirstCompByTypeAndStatus[' || INUPRODUCTID || '][' || INUCOMPONENTTYPEID || '][' || INUCOMPONENTSTATUSID || ']', 5 );
      IF ( INUPRODUCTID IS NULL ) THEN
         ERRORS.SETERROR( 119562, 'Codigo del Producto' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( INUCOMPONENTTYPEID IS NULL ) THEN
         ERRORS.SETERROR( 119562, 'Codigo del Tipo de Componente' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( INUCOMPONENTSTATUSID IS NULL ) THEN
         ERRORS.SETERROR( 119562, 'Codigo del Estado del Componente' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      DAPR_PRODUCT.ACCKEY( INUPRODUCTID );
      DAPS_COMPONENT_TYPE.ACCKEY( INUCOMPONENTTYPEID );
      DAPS_PRODUCT_STATUS.ACCKEY( INUCOMPONENTSTATUSID );
      FOR RCCOMPONENT IN PR_BCCOMPONENT.CUCOMPONENTSBYTYPEANDSTATUS( INUPRODUCTID, INUCOMPONENTTYPEID, INUCOMPONENTSTATUSID )
       LOOP
         NUCOMPONENTID := RCCOMPONENT.COMPONENT_ID;
         EXIT;
      END LOOP;
      UT_TRACE.TRACE( 'END PR_BOProduct.fnuGetFirstCompByTypeAndStatus[' || NUCOMPONENTID || ']', 5 );
      RETURN NUCOMPONENTID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETFIRSTCOMPBYTYPEANDSTATUS;
   PROCEDURE VALIDATEPRODHASVALIDCOMPS( ISBSERVICENUMBER IN PR_COMPONENT.SERVICE_NUMBER%TYPE, ISBVALCOMPS IN VARCHAR2, ONUCOMPONENT_ID OUT PR_COMPONENT.COMPONENT_ID%TYPE, ONUPRODUCT_ID OUT PR_COMPONENT.PRODUCT_ID%TYPE, ONUSERVICECLASSID OUT PR_COMPONENT.CLASS_SERVICE_ID%TYPE )
    IS
      TBCOMPONENT DAPR_COMPONENT.TYTBPR_COMPONENT;
      BLFINDVALUES BOOLEAN := FALSE;
      NUCOMPONENTINDEX NUMBER;
    BEGIN
      UT_TRACE.TRACE( 'Inicia metodo PR_BOProduct.ValidateProdHasValidComps', 5 );
      UT_TRACE.TRACE( 'Service NUMBER [ ' || ISBSERVICENUMBER || ' ]', 11 );
      UT_TRACE.TRACE( 'Tipos a validar : [ ' || ISBVALCOMPS || ' ]', 11 );
      TBCOMPONENT := PR_BCCOMPONENT.FTBGETCOMPBYSERVNUM( ISBSERVICENUMBER, ISBVALCOMPS );
      NUCOMPONENTINDEX := TBCOMPONENT.FIRST;
      IF ( TBCOMPONENT.COUNT > 1 ) THEN
         ONUCOMPONENT_ID := TBCOMPONENT( NUCOMPONENTINDEX ).COMPONENT_ID;
         ONUPRODUCT_ID := TBCOMPONENT( NUCOMPONENTINDEX ).PRODUCT_ID;
         ONUSERVICECLASSID := TBCOMPONENT( NUCOMPONENTINDEX ).CLASS_SERVICE_ID;
         BLFINDVALUES := GE_BOCONSTANTS.GETTRUE;
      END IF;
      UT_TRACE.TRACE( 'Finaliza metodo PR_BOProduct.ValidateProdHasValidComps', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALIDATEPRODHASVALIDCOMPS;
   PROCEDURE GETUSESTRATUM( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, ONUCATEGORYID OUT PR_PRODUCT.CATEGORY_ID%TYPE, ONUSUBCATEGORYID OUT PR_PRODUCT.SUBCATEGORY_ID%TYPE )
    IS
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
    BEGIN
      UT_TRACE.TRACE( 'Inicia  PR_BOProduct.getUseStratum', 5 );
      RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD( INUPRODUCTID );
      ONUCATEGORYID := RCPRODUCT.CATEGORY_ID;
      ONUSUBCATEGORYID := RCPRODUCT.SUBCATEGORY_ID;
      UT_TRACE.TRACE( 'Finaliza metodo PR_BOProduct.getUseStratum', 5 );
   END;
   FUNCTION FSBVALPRODINADDRESS( INUADDRESSID IN MO_ADDRESS.PARSER_ADDRESS_ID%TYPE, ISBFACT IN VARCHAR2 )
    RETURN VARCHAR2
    IS
      SBRESULT VARCHAR2( 10 );
      PROCEDURE VALIDATEDATA
       IS
       BEGIN
         IF ( INUADDRESSID IS NULL ) THEN
            ERRORS.SETERROR( 119562, 'Direccion' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         DAAB_ADDRESS.ACCKEY( INUADDRESSID );
      END VALIDATEDATA;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF PR_BCPRODUCTQUERIES.CUVALPRODINADDRESS%ISOPEN THEN
            CLOSE PR_BCPRODUCTQUERIES.CUVALPRODINADDRESS;
         END IF;
      END CLOSECURSORS;
    BEGIN
      UT_TRACE.TRACE( 'Inicia  PR_BOProduct.fsbValProdInAddress', 2 );
      VALIDATEDATA;
      CLOSECURSORS;
      OPEN PR_BCPRODUCTQUERIES.CUVALPRODINADDRESS( INUADDRESSID, ISBFACT );
      FETCH PR_BCPRODUCTQUERIES.CUVALPRODINADDRESS
         INTO SBRESULT;
      IF ( PR_BCPRODUCTQUERIES.CUVALPRODINADDRESS%NOTFOUND ) THEN
         UT_TRACE.TRACE( 'Finaliza  PR_BOProduct.fsbValProdInAddress [N]', 2 );
         RETURN GE_BOCONSTANTS.CSBNO;
      END IF;
      CLOSE PR_BCPRODUCTQUERIES.CUVALPRODINADDRESS;
      UT_TRACE.TRACE( 'Finaliza  PR_BOProduct.fsbValProdInAddress [Y]', 2 );
      RETURN GE_BOCONSTANTS.CSBYES;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBVALPRODINADDRESS;
   PROCEDURE GETPRODUCTSBYCONTRACT( INUSESUSUSC IN SERVSUSC.SESUSUSC%TYPE, ORFPRODUCTS OUT PKCONSTANTE.TYREFCURSOR )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO: PR_BOProduct.GetProductsByContract', 4 );
      PKBCSERVSUSC.GETPRODUCTSBYCONTRACT( INUSESUSUSC, ORFPRODUCTS );
      UT_TRACE.TRACE( 'FIN: PR_BOProduct.GetProductsByContract', 4 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETPRODUCTSBYCONTRACT;
   PROCEDURE UPDPRODCATBYCONTRACT( INUSUBSCRIPTION IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE, INUCATEGORY IN PR_PRODUCT.CATEGORY_ID%TYPE, INUSUBCATEGORY IN PR_PRODUCT.SUBCATEGORY_ID%TYPE )
    IS
      TBPRODUCTS DAPR_PRODUCT.TYTBPR_PRODUCT;
      NUINDEX NUMBER;
      PROCEDURE VALIDATEDATA
       IS
       BEGIN
         IF ( INUSUBSCRIPTION IS NULL ) THEN
            ERRORS.SETERROR( CNUERR_NULL_PARAMETER, 'Contrato' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         PKTBLSUSCRIPC.ACCKEY( INUSUBSCRIPTION );
         IF ( INUSUBCATEGORY IS NULL ) THEN
            ERRORS.SETERROR( CNUERR_NULL_PARAMETER, 'subcategoria' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF ( INUCATEGORY IS NOT NULL AND NOT PKTBLSUBCATEG.FBLEXIST( INUCATEGORY, INUSUBCATEGORY ) ) THEN
            ERRORS.SETERROR( 2741, 'La relacion de categoria [' || INUCATEGORY || '] con subcategoria [' || INUSUBCATEGORY || '] no existe' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END VALIDATEDATA;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION%ISOPEN THEN
            CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
         END IF;
      END CLOSECURSORS;
    BEGIN
      UT_TRACE.TRACE( 'Inicia  PR_BOProduct.UpdProdCatByContract', 2 );
      VALIDATEDATA;
      CLOSECURSORS;
      OPEN PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION( INUSUBSCRIPTION );
      FETCH PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION
         BULK COLLECT INTO TBPRODUCTS;
      CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
      NUINDEX := TBPRODUCTS.FIRST;
      IF ( INUCATEGORY IS NULL ) THEN
         LOOP
            EXIT WHEN NUINDEX IS NULL;
            IF ( NOT PKTBLSUBCATEG.FBLEXIST( TBPRODUCTS( NUINDEX ).CATEGORY_ID, INUSUBCATEGORY ) ) THEN
               ERRORS.SETERROR( 2741, 'La subcategoria [' || INUSUBCATEGORY || '] no corresponde con la categoria [' || TBPRODUCTS( NUINDEX ).CATEGORY_ID || '] del producto [' || TBPRODUCTS( NUINDEX ).PRODUCT_ID || ']' );
               RAISE EX.CONTROLLED_ERROR;
            END IF;
            NUINDEX := TBPRODUCTS.NEXT( NUINDEX );
         END LOOP;
      END IF;
      NUINDEX := TBPRODUCTS.FIRST;
      LOOP
         EXIT WHEN NUINDEX IS NULL;
         IF ( INUCATEGORY IS NOT NULL ) THEN
            IF ( TBPRODUCTS( NUINDEX ).CATEGORY_ID = INUCATEGORY AND TBPRODUCTS( NUINDEX ).SUBCATEGORY_ID = INUSUBCATEGORY ) THEN
               UT_TRACE.TRACE( 'No actualiza. La categoria y la subcategoria actuales del producto [' || TBPRODUCTS( NUINDEX ).PRODUCT_ID || '] son iguales a las ingresadas', 15 );
             ELSE
               TBPRODUCTS( NUINDEX ).CATEGORY_ID := INUCATEGORY;
               TBPRODUCTS( NUINDEX ).SUBCATEGORY_ID := INUSUBCATEGORY;
               UT_TRACE.TRACE( 'Actualiza en OSS Producto[' || TBPRODUCTS( NUINDEX ).PRODUCT_ID || ']', 15 );
               DAPR_PRODUCT.UPDRECORD( TBPRODUCTS( NUINDEX ) );
               UT_TRACE.TRACE( 'Actualiza en BSS Producto[' || TBPRODUCTS( NUINDEX ).PRODUCT_ID || ']', 15 );
               PKTBLSERVSUSC.UPSUBCATEGORY( TBPRODUCTS( NUINDEX ).PRODUCT_ID, INUCATEGORY, INUSUBCATEGORY );
               UT_TRACE.TRACE( 'Actualiza en el historico de cambio de cat y sub.', 15 );
               FA_BORESTRATIFICATION.INSCHANGEHIST( TBPRODUCTS( NUINDEX ).PRODUCT_ID, INUCATEGORY, INUSUBCATEGORY );
            END IF;
          ELSE
            IF ( TBPRODUCTS( NUINDEX ).SUBCATEGORY_ID = INUSUBCATEGORY ) THEN
               UT_TRACE.TRACE( 'No actualiza. La subcategoria actual del producto [' || TBPRODUCTS( NUINDEX ).PRODUCT_ID || '] es igual a la ingresada', 15 );
             ELSE
               UT_TRACE.TRACE( 'Actualiza en OSS Producto[' || TBPRODUCTS( NUINDEX ).PRODUCT_ID || ']', 15 );
               DAPR_PRODUCT.UPDSUBCATEGORY_ID( TBPRODUCTS( NUINDEX ).PRODUCT_ID, INUSUBCATEGORY );
               UT_TRACE.TRACE( 'Actualiza en OSS Producto[' || TBPRODUCTS( NUINDEX ).PRODUCT_ID || ']', 15 );
               PKTBLSERVSUSC.UPSUBCATEGORY( TBPRODUCTS( NUINDEX ).PRODUCT_ID, TBPRODUCTS( NUINDEX ).CATEGORY_ID, INUSUBCATEGORY );
               UT_TRACE.TRACE( 'Actualiza en el historico de cambio de cat y sub.', 15 );
               FA_BORESTRATIFICATION.INSCHANGEHIST( TBPRODUCTS( NUINDEX ).PRODUCT_ID, TBPRODUCTS( NUINDEX ).CATEGORY_ID, INUSUBCATEGORY );
            END IF;
         END IF;
         NUINDEX := TBPRODUCTS.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'Finaliza  PR_BOProduct.UpdProdCatByContract', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDPRODCATBYCONTRACT;
   PROCEDURE UPDPRODADDBYCONTRACT( INUSUBSCRIPTION IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE, INUADDRESS IN PR_PRODUCT.ADDRESS_ID%TYPE )
    IS
      TBPRODUCTS DAPR_PRODUCT.TYTBPR_PRODUCT;
      NUINDEX NUMBER;
      PROCEDURE VALIDATEDATA
       IS
       BEGIN
         IF ( INUSUBSCRIPTION IS NULL ) THEN
            ERRORS.SETERROR( CNUERR_NULL_PARAMETER, 'Contrato' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         PKTBLSUSCRIPC.ACCKEY( INUSUBSCRIPTION );
         IF ( INUADDRESS IS NULL ) THEN
            ERRORS.SETERROR( CNUERR_NULL_PARAMETER, 'Direccion' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         DAAB_ADDRESS.ACCKEY( INUADDRESS );
      END VALIDATEDATA;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION%ISOPEN THEN
            CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
         END IF;
      END CLOSECURSORS;
    BEGIN
      UT_TRACE.TRACE( 'Inicia  PR_BOProduct.UpdProdAddByContract', 2 );
      VALIDATEDATA;
      CLOSECURSORS;
      OPEN PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION( INUSUBSCRIPTION );
      FETCH PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION
         BULK COLLECT INTO TBPRODUCTS;
      CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
      NUINDEX := TBPRODUCTS.FIRST;
      LOOP
         EXIT WHEN NUINDEX IS NULL;
         DAPR_PRODUCT.UPDADDRESS_ID( TBPRODUCTS( NUINDEX ).PRODUCT_ID, INUADDRESS );
         NUINDEX := TBPRODUCTS.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'Finaliza  PR_BOProduct.UpdProdAddByContract', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDPRODADDBYCONTRACT;
   FUNCTION FNUADDRESSIDBYPROD( INUPRODUCT IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN PR_PRODUCT.ADDRESS_ID%TYPE
    IS
      NUADDRESS PR_PRODUCT.ADDRESS_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicia  PR_BOProduct.fnuAddressIdByProd', 2 );
      NUADDRESS := DAPR_PRODUCT.FNUGETADDRESS_ID( INUPRODUCT );
      UT_TRACE.TRACE( 'Finaliza  PR_BOProduct.fnuAddressIdByProd', 2 );
      RETURN NUADDRESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUADDRESSIDBYPROD;
   PROCEDURE GETCATSUBCATBYPROD( INUPRODUCT IN PR_PRODUCT.PRODUCT_ID%TYPE, ONUCATEGORY OUT PR_PRODUCT.CATEGORY_ID%TYPE, ONUSUBCATEGORY OUT PR_PRODUCT.SUBCATEGORY_ID%TYPE )
    IS
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
    BEGIN
      UT_TRACE.TRACE( 'Inicia  PR_BOProduct.GetCatSubcatByProd', 2 );
      RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD( INUPRODUCT );
      ONUCATEGORY := RCPRODUCT.CATEGORY_ID;
      ONUSUBCATEGORY := RCPRODUCT.SUBCATEGORY_ID;
      UT_TRACE.TRACE( 'Finaliza  PR_BOProduct.GetCatSubcatByProd', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETCATSUBCATBYPROD;
   FUNCTION FNUFIRSTPRODBYCONTRACT( INUSUBSCRIPTION IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE
    IS
      RCPRODUCT DAPR_PRODUCT.STYPR_PRODUCT;
      PROCEDURE VALIDATEDATA
       IS
       BEGIN
         IF ( INUSUBSCRIPTION IS NULL ) THEN
            ERRORS.SETERROR( CNUERR_NULL_PARAMETER, 'Contrato' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         PKTBLSUSCRIPC.ACCKEY( INUSUBSCRIPTION );
      END VALIDATEDATA;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION%ISOPEN THEN
            CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
         END IF;
      END CLOSECURSORS;
    BEGIN
      UT_TRACE.TRACE( 'Inicia  PR_BOProduct.fnuFirstProdByContract', 2 );
      VALIDATEDATA;
      CLOSECURSORS;
      OPEN PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION( INUSUBSCRIPTION );
      FETCH PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION
         INTO RCPRODUCT;
      CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
      UT_TRACE.TRACE( 'Finaliza  PR_BOProduct.fnuFirstProdByContract', 2 );
      RETURN RCPRODUCT.PRODUCT_ID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUFIRSTPRODBYCONTRACT;
   FUNCTION FBOPRODBYSUBSSTATE( INUSUBSCRIPTIONID IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE, ISBPRODUCTSTATUS IN VARCHAR2 )
    RETURN BOOLEAN
    IS
      TBPRODUCTS DAPR_PRODUCT.TYTBPR_PRODUCT;
      PROCEDURE VALIDATEDATA
       IS
       BEGIN
         IF ( INUSUBSCRIPTIONID IS NULL ) THEN
            ERRORS.SETERROR( CNUNULL_ATTRIBUTE, 'Identificador del Contrato' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         PKTBLSUSCRIPC.ACCKEY( INUSUBSCRIPTIONID );
         IF ( ISBPRODUCTSTATUS IS NULL ) THEN
            ERRORS.SETERROR( CNUNULL_ATTRIBUTE, 'Estados del Producto' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END VALIDATEDATA;
    BEGIN
      UT_TRACE.TRACE( 'Inicio PR_BOProduct.fboProdbySubsState', 3 );
      UT_TRACE.TRACE( 'Contrato[' || INUSUBSCRIPTIONID || '] Estados Producto[' || ISBPRODUCTSTATUS || ']', 4 );
      VALIDATEDATA;
      TBPRODUCTS.DELETE;
      TBPRODUCTS := PR_BCPRODUCT.FTBGETPRODBYSUBSSTATE( INUSUBSCRIPTIONID, ISBPRODUCTSTATUS );
      UT_TRACE.TRACE( 'Productos[' || TBPRODUCTS.COUNT || ']', 4 );
      IF ( TBPRODUCTS.COUNT > 0 ) THEN
         UT_TRACE.TRACE( 'Fin PR_BOProduct.fboProdbySubsState', 3 );
         RETURN TRUE;
       ELSE
         UT_TRACE.TRACE( 'Fin PR_BOProduct.fboProdbySubsState', 3 );
         RETURN FALSE;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBOPRODBYSUBSSTATE;
   FUNCTION FSBFINANCIALSTATUS( INUPRODUCTID IN SERVSUSC.SESUNUSE%TYPE )
    RETURN SERVSUSC.SESUESFN%TYPE
    IS
    BEGIN
      IF ( INUPRODUCTID IS NULL ) THEN
         ERRORS.SETERROR( CNUNULL_ATTRIBUTE, 'Identificador del Producto' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      RETURN PKTBLSERVSUSC.FSBGETSESUESFN( INUPRODUCTID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBFINANCIALSTATUS;
   PROCEDURE PARTIALPAYMENTBYPRODS( ICLXMLREFERENCE IN CLOB, INURECEPTIONMED IN GE_RECEPTION_TYPE.RECEPTION_TYPE_ID%TYPE, ONUCOUPONID OUT CUPON.CUPONUME%TYPE, ONUVALUE OUT CUPON.CUPOVALO%TYPE )
    IS
      CSBPRODUCTS_REF CONSTANT GE_BOUTILITIES.STYSTATEMENT := '<!ELEMENT Productos (Datos)+>
                                                                        <!ELEMENT Datos (Id_Producto, Valor_a_Pagar)>
                                                                            <!ELEMENT Id_Producto (#PCDATA)>
                                                                            <!ELEMENT Valor_a_Pagar (#PCDATA)>';
      CSBPRODUCTOS CONSTANT VARCHAR2( 10 ) := 'Productos';
      TBCOUPONSXML RC_BCESTRXMLDATA.TYTBCOUPONS;
      RCSERVSUSC SERVSUSC%ROWTYPE;
      NUSUBSCRIPTIONID SERVSUSC.SESUSUSC%TYPE := NULL;
      NUCUENCOBR CUENCOBR.CUCOCODI%TYPE;
      NUPAYMENTVALUE CUPON.CUPOVALO%TYPE;
      NUTOTALVALUE CUPON.CUPOVALO%TYPE := 0;
      NUBILLING FACTURA.FACTCODI%TYPE;
      CNUINVALID_CONTRACT CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900838;
      CNUINVALID_CUENTA CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900837;
      RCPACKAGE DAMO_PACKAGES.STYMO_PACKAGES;
      CSBP_GENER_IMPPAGOPAR CONSTANT MO_PACKAGES.TAG_NAME%TYPE := 'P_GENER_IMPPAGOPARCIAL';
    BEGIN
      UT_TRACE.TRACE( 'INICIO PR_BOProduct.PartialPaymentByProds', 5 );
      UT_TRACE.TRACE( 'iclXMLReference ' || TO_CHAR( ICLXMLREFERENCE ), 6 );
      UT_TRACE.TRACE( 'inuReceptionMed ' || INURECEPTIONMED, 6 );
      RC_BOXMLENGINE.PROCESSXML( ICLXMLREFERENCE, CSBPRODUCTS_REF, CSBPRODUCTOS );
      RC_BCESTRXMLDATA.GETDATACOUPON( CSBPRODUCTOS, TBCOUPONSXML );
      IF ( TBCOUPONSXML.COUNT > 0 ) THEN
         FOR NUCOUNTER IN TBCOUPONSXML.FIRST..TBCOUPONSXML.LAST
          LOOP
            RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( TBCOUPONSXML( NUCOUNTER ).SESUNUSE );
            IF ( NUSUBSCRIPTIONID IS NULL ) THEN
               NUSUBSCRIPTIONID := RCSERVSUSC.SESUSUSC;
               UT_TRACE.TRACE( 'nuSubscriptionId ' || NUSUBSCRIPTIONID, 7 );
            END IF;
            IF ( NUSUBSCRIPTIONID != RCSERVSUSC.SESUSUSC ) THEN
               ERRORS.SETERROR( CNUINVALID_CONTRACT );
            END IF;
            PKTBLSERVSUSC.ACCKEY( TO_NUMBER( TBCOUPONSXML( NUCOUNTER ).SESUNUSE ) );
            NUCUENCOBR := PKBCCUENCOBR.FNUGETLASTGENACCOUNT( TO_NUMBER( TBCOUPONSXML( NUCOUNTER ).SESUNUSE ) );
            UT_TRACE.TRACE( 'nuCuencobr ' || NUCUENCOBR, 7 );
            IF ( NUCUENCOBR IS NULL ) THEN
               ERRORS.SETERROR( CNUINVALID_CUENTA, TO_NUMBER( TBCOUPONSXML( NUCOUNTER ).SESUNUSE ) );
            END IF;
            NUPAYMENTVALUE := TBCOUPONSXML( NUCOUNTER ).CUPOVALO;
            UT_TRACE.TRACE( 'nuPaymentValue ' || NUPAYMENTVALUE, 7 );
            PKCOLLECTING.VALCEROVALUE( NUPAYMENTVALUE );
            NUTOTALVALUE := NUTOTALVALUE + NUPAYMENTVALUE;
            UT_TRACE.TRACE( 'nuTotalValue ' || NUTOTALVALUE, 7 );
            NUBILLING := PKTBLCUENCOBR.FNUGETCUCOFACT( NUCUENCOBR );
         END LOOP;
         ONUVALUE := NUTOTALVALUE;
         UT_TRACE.TRACE( 'onuValue ' || ONUVALUE, 6 );
         RCPACKAGE.PACKAGE_ID := MO_BOSEQUENCES.FNUGETPACKAGEID;
         RCPACKAGE.REQUEST_DATE := PKGENERALSERVICES.FDTGETSYSTEMDATE;
         RCPACKAGE.MESSAG_DELIVERY_DATE := PKGENERALSERVICES.FDTGETSYSTEMDATE;
         RCPACKAGE.USER_ID := UT_SESSION.GETUSER;
         RCPACKAGE.TERMINAL_ID := UT_SESSION.GETTERMINAL;
         RCPACKAGE.CLIENT_PRIVACY_FLAG := CC_BOCONSTANTS.CSBNO;
         RCPACKAGE.PACKAGE_TYPE_ID := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( CSBP_GENER_IMPPAGOPAR );
         RCPACKAGE.MOTIVE_STATUS_ID := MO_BOSTATUSPARAMETER.FNUGETSTATUS_REGISTER_EXEC;
         RCPACKAGE.COMM_EXCEPTION := CC_BOCONSTANTS.CSBNO;
         RCPACKAGE.CUST_CARE_REQUES_NUM := MO_BOSEQUENCES.FNUGETPACKAGEID;
         RCPACKAGE.TAG_NAME := CSBP_GENER_IMPPAGOPAR;
         RCPACKAGE.COMPANY_ID := NVL( SA_BOSYSTEM.FNUGETUSERCOMPANYID, GE_BOPARAMETER.FNUGET( 'DEFAULT_COMPANY' ) );
         RCPACKAGE.RECEPTION_TYPE_ID := INURECEPTIONMED;
         DAMO_PACKAGES.INSRECORD( RCPACKAGE );
         UT_TRACE.TRACE( 'Solicitud creada ' || RCPACKAGE.PACKAGE_ID, 6 );
         PKCOUPONMGR.GENERATECOUPONSERVICE( PKBILLCONST.CSBTOKEN_CUENCUAG, TO_CHAR( NUBILLING ), NUTOTALVALUE, NULL, NULL, ONUCOUPONID );
      END IF;
      UT_TRACE.TRACE( 'FIN PR_BOProduct.PartialPaymentByProds', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PARTIALPAYMENTBYPRODS;
   FUNCTION FSBPRODHASMETER( INUPRODUCTID IN AFORSESU.AFSSSESU%TYPE, INUCONSTYPEID IN TIPOCONS.TCONCODI%TYPE )
    RETURN VARCHAR2
    IS
      RCDATA ELMESESU%ROWTYPE;
    BEGIN
      RCDATA := PKBCELMESESU.FRCMEASACTBYSERVSUSCTIPCONS( INUPRODUCTID, INUCONSTYPEID );
      IF ( RCDATA.EMSSELME IS NULL ) THEN
         RETURN GE_BOCONSTANTS.CSBNO;
       ELSE
         RETURN GE_BOCONSTANTS.CSBYES;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBPRODHASMETER;
   FUNCTION FBOISACTIVE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      RETURN PS_BOPRODUCTSTATUS.FBLSTATUSACTIVE( DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID( INUPRODUCTID ) );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBOISACTIVE;
   FUNCTION FNUGETPRODBYADDRPRODTYPE( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUPRODUCTTYPE IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE
    IS
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Init <SiglaClie_NemModulo_BONombrePk>.fnuGetProdByAddrProdType', 5 );
      UT_TRACE.TRACE( 'inuAddressId [' || INUADDRESSID || ']', 7 );
      UT_TRACE.TRACE( 'inuProductType [' || INUPRODUCTTYPE || ']', 7 );
      IF ( INUADDRESSID IS NOT NULL AND INUPRODUCTTYPE IS NOT NULL ) THEN
         NUPRODUCTID := PR_BCPRODUCT.FNUGETPRODBYADDRPRODTYPE( INUADDRESSID, INUPRODUCTTYPE );
      END IF;
      UT_TRACE.TRACE( 'End <SiglaClie_NemModulo_BONombrePk>.fnuGetProdByAddrProdType', 5 );
      RETURN NUPRODUCTID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETPRODBYADDRPRODTYPE;
 BEGIN
   SBAPLICACION := ERRORS.FSBGETAPPLICATION;
   IF ( SBAPLICACION IS NULL ) THEN
      ERRORS.SETAPPLICATION( CSBAPLICACION );
   END IF;
END PR_BOPRODUCT;
/


