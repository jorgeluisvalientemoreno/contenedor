PACKAGE BODY pkStatusExeProgramMgr AS

































































































    
    
    
    
    CNURECORD_NO_EXISTE		CONSTANT NUMBER := 1050;

	
    CNUMSG_FIN_PROCESO                  CONSTANT NUMBER := 1029;

    
    CNUMESSPROCC   CONSTANT  NUMBER  := 12067;

     
     
     
    CSBVERSION   CONSTANT VARCHAR2(250) := 'SAO214993';

    
    
    
    SBERRMSG     GE_ERROR_LOG.DESCRIPTION%TYPE;            
	
    CSBMSG_INICIO_PROCESO	MENSAJE.MENSDESC%TYPE;

		    
    CSBMSG_FIN_PROCESO           ESTAPROG.ESPRMESG%TYPE;

				    
    CSBMSG_NO_HAY_REGISTROS	MENSAJE.MENSDESC%TYPE;

    
    CNUMSGINCEJEC   MENSAJE.MENSCODI%TYPE := 666801;

    
    
    BLCHANGEMESSAGE	BOOLEAN := TRUE;

    
    SBMSGERROR  VARCHAR2(4000);
    
    
    
























PROCEDURE ADDRECORD
    (
	ISBPROGRAMA	IN	ESTAPROG.ESPRPROG%TYPE,
	ISBMENSAJE	IN	ESTAPROG.ESPRMESG%TYPE,
	INUTOTALREG IN  ESTAPROG.ESPRTAPR%TYPE,
	INUESPRSUFA IN  ESTAPROG.ESPRSUFA%TYPE DEFAULT 0,
	INUESPRPEFA IN  ESTAPROG.ESPRPEFA%TYPE DEFAULT NULL
	
    )
    IS
    RCRECORD	ESTAPROG%ROWTYPE; 
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.AddRecord');
    
    PKSTATUSEXEPROGRAMMGR.FILLRECORD
	(
	    ISBPROGRAMA,
	    ISBMENSAJE,
	    INUTOTALREG,
	    RCRECORD,
	    INUESPRSUFA,
        INUESPRPEFA
	);
    
    PKTBLESTAPROG.INSRECORD ( RCRECORD );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END ADDRECORD;































PROCEDURE ADDRECORD
    (
	ISBPROGRAMA	IN	ESTAPROG.ESPRPROG%TYPE,
	INUTOTALREG IN  ESTAPROG.ESPRTAPR%TYPE,
	INUESPRPEFA IN  ESTAPROG.ESPRPEFA%TYPE DEFAULT NULL
    )
    IS

    SBMENSAJE    MENSAJE.MENSDESC%TYPE;    

BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.AddRecord');

    SBMENSAJE := CSBMSG_NO_HAY_REGISTROS ;

    IF ( INUTOTALREG > 0 ) THEN 
    
	SBMENSAJE := CSBMSG_INICIO_PROCESO ;
    
    END IF ;

    
    PKSTATUSEXEPROGRAMMGR.ADDRECORD
	(
	    ISBPROGRAMA,
	    SBMENSAJE,
	    INUTOTALREG,
	    0,
        INUESPRPEFA
	);
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END ADDRECORD;













	

PROCEDURE DELETERECORD
    (
	ISBPROGRAMA	IN	ESTAPROG.ESPRPROG%TYPE
    )
    IS
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.DeleteRecord');
    
    DELETE ESTAPROG
    WHERE ESPRPROG LIKE ISBPROGRAMA ;
    IF ( SQL%NOTFOUND ) THEN
	PKERRORS.POP ;
	RAISE NO_DATA_FOUND ;
    END IF ;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END DELETERECORD;































PROCEDURE FILLRECORD
    (
	ISBPROGRAMA	IN	ESTAPROG.ESPRPROG%TYPE,
	ISBMENSAJE	IN	ESTAPROG.ESPRMESG%TYPE,
	INUTOTALREG	IN	ESTAPROG.ESPRTAPR%TYPE,
	ORCRECORD	OUT	ESTAPROG%ROWTYPE,
	INUESPRSUFA IN  ESTAPROG.ESPRSUFA%TYPE DEFAULT 0,
	INUESPRPEFA IN  ESTAPROG.ESPRPEFA%TYPE DEFAULT NULL

    )
    IS
    RCRECORDNULL	ESTAPROG%ROWTYPE; 	
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.FillRecord');
    ORCRECORD := RCRECORDNULL;
    
    ORCRECORD.ESPRPROG := ISBPROGRAMA;
    ORCRECORD.ESPRPORC := PKBILLCONST.CERO;
    ORCRECORD.ESPRMESG := ISBMENSAJE;
    ORCRECORD.ESPRFEIN := SYSDATE;
    ORCRECORD.ESPRTAPR := NVL( INUTOTALREG, PKBILLCONST.CERO );
    ORCRECORD.ESPRSUPR := PKBILLCONST.CERO;
    ORCRECORD.ESPRSUFA := INUESPRSUFA;
    ORCRECORD.ESPRPEFA := INUESPRPEFA;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FILLRECORD;



















PROCEDURE UPEXEPROGPROGPROC
(
    ISBESPRPROG IN  ESTAPROG.ESPRPROG%TYPE,
    INUESPRPRPR IN  ESTAPROG.ESPRPRPR%TYPE
) IS
    
    PRAGMA AUTONOMOUS_TRANSACTION;

BEGIN

    PKERRORS.PUSH('UpExeProgProgProc.UpExeProgProgProc');
    
    
    UPDATE ESTAPROG
       SET ESTAPROG.ESPRPRPR = INUESPRPRPR
     WHERE ESTAPROG.ESPRPROG = ISBESPRPROG;

    
    PKGENERALSERVICES.COMMITTRANSACTION;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
  	    PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END UPEXEPROGPROGPROC;

















PROCEDURE PROCESSFINISHNOK
    (
	ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE,
	ISBERROR   IN ESTAPROG.ESPRMESG%TYPE DEFAULT CSBTERMINO_NOK
    ) 
    IS
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.ProcessFinishNOK');
    
    IF PKTBLESTAPROG.FBLEXIST (ISBPROGRAM) THEN
    
        
        UPSTATUSEXEPROG
    	(
    	    ISBPROGRAM,
    	    ISBERROR,
    	    CNUTERMINO_NOK,
    	    NULL
    	);
    
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END PROCESSFINISHNOK;
















PROCEDURE PROCESSFINISHNOKAT
    (
	ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE,
	ISBERROR   IN ESTAPROG.ESPRMESG%TYPE DEFAULT CSBTERMINO_NOK
    ) 
    IS
    PRAGMA AUTONOMOUS_TRANSACTION ;
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.ProcessFinishNOKAT');
    PKSTATUSEXEPROGRAMMGR.PROCESSFINISHNOK(
					   ISBPROGRAM,
					   ISBERROR
					   );
    COMMIT;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END PROCESSFINISHNOKAT;












	

PROCEDURE PROCESSFINISHOK
    (
	ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE,
	ISBERROR   IN ESTAPROG.ESPRMESG%TYPE DEFAULT CSBTERMINO_OK
    ) 
    IS
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.ProcessFinishOK');
    
    UPSTATUSEXEPROG
	(
	    ISBPROGRAM,
	    ISBERROR,
	    CNUTERMINO_OK,
	    NULL
	);
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END PROCESSFINISHOK;
















PROCEDURE PROCESSFINISHOKAT
    (
	ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE,
	ISBERROR   IN ESTAPROG.ESPRMESG%TYPE DEFAULT CSBTERMINO_OK
    ) 
    IS
    PRAGMA AUTONOMOUS_TRANSACTION ;
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.ProcessFinishOKAT');
    PKSTATUSEXEPROGRAMMGR.PROCESSFINISHOK(
					  ISBPROGRAM,
					  ISBERROR
					  );
    COMMIT;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END PROCESSFINISHOKAT;











	

PROCEDURE PUTMESSAGEERROR
    (
        ISBMENSAJE        IN	ESTAPROG.ESPRMESG%TYPE
    )
    IS
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.PutMessageError');
    PKSTATUSEXEPROGRAMMGR.SBERRORMESSAGE := ISBMENSAJE;
    PKERRORS.POP;
EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
END PUTMESSAGEERROR;


















PROCEDURE SETCHANGEMESSAGEOFF IS
BEGIN
    
    BLCHANGEMESSAGE := FALSE;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETCHANGEMESSAGEOFF;


















PROCEDURE SETCHANGEMESSAGEON IS
BEGIN
    
    BLCHANGEMESSAGE := TRUE;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETCHANGEMESSAGEON;












































    PROCEDURE UPSTATUSEXEPROG
    (
        ISBPROG       IN ESTAPROG.ESPRPROG%TYPE,
        ISBMENS       IN ESTAPROG.ESPRMESG%TYPE,
        INUPORCENTAJE IN ESTAPROG.ESPRPORC%TYPE,
        INUCURRENTREG IN NUMBER,
        INUTOTALRECS  IN ESTAPROG.ESPRTAPR%TYPE DEFAULT NULL,
        INUESPRSUFA   IN ESTAPROG.ESPRSUFA%TYPE DEFAULT NULL
    )
    IS
    BEGIN
    
        PKERRORS.PUSH( 'pkStatusExeProgramMgr.UpStatusExeProg' );

        IF ( INUPORCENTAJE = CNUTERMINO_NOK ) THEN
        
        	UPDATE ESTAPROG
        	SET    ESPRMESG = ISBMENS,
        	       ESPRSUPR = NVL( INUCURRENTREG, ESPRSUPR ),
        	       ESPRFEFI = SYSDATE,
        	       ESPRTAPR = NVL( INUTOTALRECS, ESPRTAPR ),
        	       ESPRSUFA = NVL( INUESPRSUFA, ESPRSUFA )
        	WHERE  ESPRPROG = UPPER( ISBPROG );
        
        ELSIF ( INUPORCENTAJE = CNUTERMINO_OK ) THEN
        
            UPDATE ESTAPROG
            SET    ESPRPORC = INUPORCENTAJE,
                   ESPRMESG = ISBMENS,
                   ESPRSUPR = NVL( INUCURRENTREG, ESPRSUPR ),
                   ESPRFEFI = SYSDATE,
                   ESPRTAPR = NVL( INUTOTALRECS, ESPRTAPR ),
                   ESPRSUFA = NVL( INUESPRSUFA,ESPRSUFA )
            WHERE  ESPRPROG = UPPER( ISBPROG );
        
        ELSE
        
            UPDATE ESTAPROG
            SET    ESPRPORC = INUPORCENTAJE,
                   ESPRMESG = ISBMENS,
                   ESPRSUPR = NVL( INUCURRENTREG, ESPRSUPR ),
                   ESPRTAPR = NVL( INUTOTALRECS, ESPRTAPR ),
                   ESPRSUFA = NVL( INUESPRSUFA, ESPRSUFA )
            WHERE  ESPRPROG = UPPER( ISBPROG );
        
        END IF;

        IF (SQL%NOTFOUND) THEN
        
            PKERRORS.POP;
            RAISE NO_DATA_FOUND;
        
        END IF;

        PKERRORS.POP;
    EXCEPTION
    
        WHEN NO_DATA_FOUND THEN
            PKERRORS.POP;
            PKERRORS.SETERRORCODE( CSBDIVISION, CSBMODULE, CNURECORD_NO_EXISTE );
            RAISE LOGIN_DENIED;
    
    END UPSTATUSEXEPROG;
































PROCEDURE UPSTATUSEXEPROGRAM
    (
        ISBPROG       IN ESTAPROG.ESPRPROG%TYPE,
        ISBMENS       IN ESTAPROG.ESPRMESG%TYPE,
        INUTOTALREG   IN NUMBER,
        INUCURRENTREG IN NUMBER
    )
    IS
    
    NUPERCENTAGE	ESTAPROG.ESPRPORC%TYPE;	
    
BEGIN

    PKERRORS.PUSH('pkStatusExeProgramMgr.UpStatusExeProgram');

    
    NUPERCENTAGE := FNUCALCPERCENTAGE (INUTOTALREG, INUCURRENTREG);

    
    UPSTATUSEXEPROG (ISBPROG, ISBMENS, NUPERCENTAGE, INUCURRENTREG, INUTOTALREG);
    
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END UPSTATUSEXEPROGRAM;























PROCEDURE UPSTATUSEXEPROGRAMAT
    (
	ISBPROG		IN 	ESTAPROG.ESPRPROG%TYPE,
	ISBMENS 	IN 	ESTAPROG.ESPRMESG%TYPE,
	INUTOTALREG 	IN 	NUMBER,
	INUCURRENTREG	IN 	NUMBER
    ) 
    IS
    PRAGMA AUTONOMOUS_TRANSACTION ;
    NUPERCENTAGE	ESTAPROG.ESPRPORC%TYPE;	
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.UpStatusExeProgramAT');
    PKSTATUSEXEPROGRAMMGR.UPSTATUSEXEPROGRAM (
						ISBPROG,
						ISBMENS,
						INUTOTALREG,
						INUCURRENTREG );
    COMMIT;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END UPSTATUSEXEPROGRAMAT;



























PROCEDURE UPDPERCFORPARALLELPROC
    (
	ISBPROGRAMA	IN 	ESTAPROG.ESPRPROG%TYPE,
	ISBMENSAJE 	IN 	ESTAPROG.ESPRMESG%TYPE,
	INUNROPROCESO	IN	NUMBER,
	INUPROCESADOS 	IN 	NUMBER,
	ONUPORCENTAJE	OUT	ESTAPROG.ESPRPORC%TYPE
    ) 
    IS
    
    SBCURRENTMESSAGE	ESTAPROG.ESPRMESG%TYPE;
    
    SBNEWMESSAGE	ESTAPROG.ESPRMESG%TYPE;
    
    SBINPUTMESSAGE	ESTAPROG.ESPRMESG%TYPE;
    
    NUINITPOSITION	NUMBER;
    
    NUENDPOSITION	NUMBER;
    
    NUPERCENTAGE	ESTAPROG.ESPRPORC%TYPE;
    
    NUPROCESSCURRENT	NUMBER;
    
    CSBCARACTER_SEPARADOR	CONSTANT VARCHAR2(1) := '|';
    
    CSBTOKEN_PROCESO	CONSTANT VARCHAR2(14) := 'PROCESS_NUMBER';
    
    
    
    FUNCTION FNUPROCESOS RETURN NUMBER IS
	
	NUCOUNTCHARACTERS	NUMBER := 0;
    BEGIN
	FOR I IN 1..LENGTH (SBCURRENTMESSAGE) LOOP
	    
	    IF ( SUBSTR(SBCURRENTMESSAGE,I,1) = CSBCARACTER_SEPARADOR ) THEN
		NUCOUNTCHARACTERS := NUCOUNTCHARACTERS + 1;
	    END IF;
	END LOOP;
	RETURN (NUCOUNTCHARACTERS/2);
    END FNUPROCESOS ;
    
    PROCEDURE ADDPROCMESSAGE IS
	
	NUPOSICIONPROCESO	NUMBER;
	
	SBOLDMESSAGE	ESTAPROG.ESPRMESG%TYPE;
    BEGIN
	
	PKERRORS.PUSH ('pkStatusExeProgramMgr.AddProcMessage');
	
	IF (NUPROCESSCURRENT = 0) THEN
	    SBNEWMESSAGE := SBINPUTMESSAGE ;
	    PKERRORS.POP;
	    RETURN ;
	END IF;
	
	NUPOSICIONPROCESO := INSTR(SBCURRENTMESSAGE, TO_CHAR(INUNROPROCESO)) ;
	DBMS_OUTPUT.PUT_LINE('nuPosicionProceso: ' ||TO_CHAR(NUPOSICIONPROCESO));
	
	
	IF ( NUPOSICIONPROCESO = 0 ) THEN
	    
	    
	    SBNEWMESSAGE := SUBSTR(SBCURRENTMESSAGE,1,
			    LENGTH(SBCURRENTMESSAGE)-1) || SBINPUTMESSAGE ;
	    PKERRORS.POP;
	    RETURN;
	END IF;
	
	
	NUINITPOSITION := INSTR (SUBSTR(SBCURRENTMESSAGE,1,NUPOSICIONPROCESO),
			  CSBCARACTER_SEPARADOR,-1);
	NUENDPOSITION := NUPOSICIONPROCESO + INSTR(
			 SUBSTR(SBCURRENTMESSAGE,NUPOSICIONPROCESO),
			 CSBCARACTER_SEPARADOR);
	DBMS_OUTPUT.PUT_LINE('Ini: ' || TO_CHAR(NUINITPOSITION));
	DBMS_OUTPUT.PUT_LINE('Fin: ' || TO_CHAR(NUENDPOSITION));
	
	SBOLDMESSAGE := SUBSTR (SBCURRENTMESSAGE,NUINITPOSITION,NUENDPOSITION-
			NUINITPOSITION);
	DBMS_OUTPUT.PUT_LINE('A reemplazar: ' || SBOLDMESSAGE);
	
	SBNEWMESSAGE := REPLACE (SBCURRENTMESSAGE,SBOLDMESSAGE,SBINPUTMESSAGE);
	PKERRORS.POP;
    EXCEPTION
	WHEN LOGIN_DENIED THEN
	    PKERRORS.POP;
	    RAISE LOGIN_DENIED;
	WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE PKCONSTANTE.EXERROR_LEVEL2;
	WHEN OTHERS THEN
	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	    PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END ADDPROCMESSAGE ;
    
    PROCEDURE PROCESSMESSAGEPOSITION IS
    BEGIN
	PKERRORS.PUSH ('pkStatusExeProgramMgr.ProcessMessagePosition');
	
	NUPROCESSCURRENT := FNUPROCESOS ;
	DBMS_OUTPUT.PUT_LINE('nuProcecessCurrent: ' ||TO_CHAR(NUPROCESSCURRENT));
	
	ADDPROCMESSAGE ;
	PKERRORS.POP;
    EXCEPTION
	WHEN LOGIN_DENIED THEN
	    PKERRORS.POP;
	    RAISE LOGIN_DENIED;
	WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE PKCONSTANTE.EXERROR_LEVEL2;
	WHEN OTHERS THEN
	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	    PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END PROCESSMESSAGEPOSITION ;
    
BEGIN
    PKERRORS.PUSH ('pkStatusExeProgramMgr.UpdPercForParallelProc');
    
    SBCURRENTMESSAGE := PKTBLESTAPROG.FSBGETMESSAGE
			    (
				ISBPROGRAMA,
				PKCONSTANTE.NOCACHE
			    );
    
    SBINPUTMESSAGE := CSBCARACTER_SEPARADOR ||
		      REPLACE ( ISBMENSAJE,CSBTOKEN_PROCESO,
				TO_CHAR(INUNROPROCESO) ) ||
		      CSBCARACTER_SEPARADOR;
    
    PROCESSMESSAGEPOSITION ;
    
    SETCHANGEMESSAGEOFF ;
    
    UPDATEPERCENTAGE
	(
	    ISBPROGRAMA,
	    SBNEWMESSAGE,
	    INUPROCESADOS,
	    NUPERCENTAGE
	) ;
    
    ONUPORCENTAJE := NUPERCENTAGE ;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END UPDPERCFORPARALLELPROC;




























































PROCEDURE UPDATEPERCENTAGE
    (
	ISBPROGRAMA	IN 	ESTAPROG.ESPRPROG%TYPE,
	ISBMENSAJE 	IN 	ESTAPROG.ESPRMESG%TYPE,
	INUPROCESADOS 	IN 	NUMBER,
	ONUPORCENTAJE	OUT	ESTAPROG.ESPRPORC%TYPE,
	INUESPRSUFA     IN      ESTAPROG.ESPRSUFA%TYPE DEFAULT NULL
    ) 
    IS

    
    

    PRAGMA AUTONOMOUS_TRANSACTION ;

    NUTOTAL	ESTAPROG.ESPRTAPR%TYPE;	
    NUPARCIAL	ESTAPROG.ESPRSUPR%TYPE;	

    NUPERCENTAGE	ESTAPROG.ESPRPORC%TYPE;	
    SBMESSAGE		ESTAPROG.ESPRMESG%TYPE;	

    
    CURSOR CUESTAPROG ( SBID	ESTAPROG.ESPRPROG%TYPE )
    IS
    SELECT NVL (ESPRTAPR,0) TOTAL, NVL (ESPRSUPR,0) PARCIAL
    FROM   ESTAPROG
    WHERE  ESPRPROG = SBID 
    FOR UPDATE ;

BEGIN


    PKERRORS.PUSH('pkStatusExeProgramMgr.UpdatePercentage');

    
    OPEN CUESTAPROG (ISBPROGRAMA);

    FETCH CUESTAPROG INTO NUTOTAL, NUPARCIAL ;

    IF (CUESTAPROG%NOTFOUND) THEN
	CLOSE CUESTAPROG ;
	RAISE LOGIN_DENIED ;
    END IF;

    CLOSE CUESTAPROG ;

    
    NUPARCIAL := NUPARCIAL + INUPROCESADOS;

    
    NUPERCENTAGE := FNUCALCPERCENTAGE
			( 
			    NUTOTAL, 
			    NUPARCIAL
			);

    
    ONUPORCENTAJE := NUPERCENTAGE ;

    
    SBMESSAGE := ISBMENSAJE ;

    
    IF ( BLCHANGEMESSAGE AND NUPERCENTAGE >= PKBILLCONST.CIENPORCIEN ) THEN
	SBMESSAGE := CSBMSG_FIN_PROCESO;
    END IF;

    
    UPSTATUSEXEPROG
	(
	    ISBPROGRAMA,
	    SBMESSAGE,
	    NUPERCENTAGE, 
	    NUPARCIAL,
	    NULL,
	    INUESPRSUFA
	);

    
    
    COMMIT;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END UPDATEPERCENTAGE;












	

PROCEDURE VALIDATENULL 
    (
        INUPROGRAMNSTATUS        IN  ESTAPROG.ESPRPROG%TYPE
    )
    IS
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.ValidateNull');
    IF ( INUPROGRAMNSTATUS IS NULL ) THEN
	PKERRORS.SETERRORCODE( CSBDIVISION, CSBMODULE, NUPROGRAMNSTATUS_NULO );
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALIDATENULL;


















PROCEDURE VALIDATERECORD
    (
	ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE
    ) 
    IS
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.ValidateRecord');
    
    IF (NOT PKTBLESTAPROG.FBLEXIST(ISBPROGRAM)) THEN
	
	PKSTATUSEXEPROGRAMMGR.ADDRECORD( ISBPROGRAM, NULL, NULL,0,NULL );
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALIDATERECORD;


















PROCEDURE VALIDATERECORDAT
    (
	ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE
    ) 
    IS
    PRAGMA AUTONOMOUS_TRANSACTION ;
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.ValidateRecordAT');
    PKSTATUSEXEPROGRAMMGR.VALIDATERECORD(ISBPROGRAM);
    COMMIT;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALIDATERECORDAT;






















FUNCTION FNUCALCPERCENTAGE
    (
	INUTOTALREG 	IN 	NUMBER,
	INUCURRENTREG	IN 	NUMBER
    )
    RETURN ESTAPROG.ESPRPORC%TYPE 
    IS
    NUPERCENTAGE	ESTAPROG.ESPRPORC%TYPE;	
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.fnuCalcPercentage');
    
    IF ( INUTOTALREG = PKBILLCONST.CERO ) THEN
	PKERRORS.POP;
	RETURN ( PKBILLCONST.CERO );
    END IF;
    NUPERCENTAGE := ( INUCURRENTREG / INUTOTALREG ) * 100.00;
    PKERRORS.POP;
    RETURN ( NUPERCENTAGE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FNUCALCPERCENTAGE;

















FUNCTION FNUGETPROCESSNUMBER RETURN NUMBER IS
    
    CURSOR CUGETPROCESSNUMBER IS
    SELECT SQESPRPROG.NEXTVAL
    FROM   DUAL;
    NUNUMPROCESO	NUMBER;	
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.fnuGetProcessNumber');
    
    OPEN  CUGETPROCESSNUMBER;
    FETCH CUGETPROCESSNUMBER INTO NUNUMPROCESO;
    CLOSE CUGETPROCESSNUMBER;
    PKERRORS.POP;
    RETURN ( NUNUMPROCESO );
EXCEPTION
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FNUGETPROCESSNUMBER;















FUNCTION FSBGETMESSAGEERROR RETURN VARCHAR2 IS
BEGIN

    RETURN (PKSTATUSEXEPROGRAMMGR.SBERRORMESSAGE);

END FSBGETMESSAGEERROR;



















FUNCTION FSBGETPROGRAMID
    (
	ISBPROGRAMA	IN	ESTAPROG.ESPRPROG%TYPE
    )
    RETURN VARCHAR2
    IS
    NUNUMPROCESO	NUMBER;	
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.fsbGetProgramID');
    
    NUNUMPROCESO := PKSTATUSEXEPROGRAMMGR.FNUGETPROCESSNUMBER;
    PKERRORS.POP;
    RETURN( ISBPROGRAMA || TO_CHAR( NUNUMPROCESO ) );
EXCEPTION
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FSBGETPROGRAMID;





























PROCEDURE UPMESSAGEFINISHOK
(
    ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE,
    IBOUPDFEFI IN BOOLEAN DEFAULT FALSE
)
IS
BEGIN
    PKERRORS.PUSH ('pkStatusExeProgramMgr.UpMessageFinishOK');

    









    
    IF (PKTBLESTAPROG.FBLEXIST (ISBPROGRAM)) THEN
    
        
        PKTBLESTAPROG.UPMESSAGE(ISBPROGRAM, CSBTERMINO_OK);

        
        IF ( IBOUPDFEFI ) THEN
            
            FA_BCESTAPROG.UPDFINALEXECDATE(ISBPROGRAM,PKGENERALSERVICES.FDTGETSYSTEMDATE);
        END IF;

        
        PKTBLESTAPROG.CLEARMEMORY;

    END IF;
    
    PKERRORS.POP;

EXCEPTION
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END UPMESSAGEFINISHOK;


    





















    PROCEDURE UPMESSAGEFINISHOKAT
    (
        ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE,
        IBOUPDFEFI IN BOOLEAN DEFAULT FALSE
    )
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        PKERRORS.PUSH ('pkStatusExeProgramMgr.UpMessageFinishOKAT');

        
        PKSTATUSEXEPROGRAMMGR.UPMESSAGEFINISHOK(ISBPROGRAM, IBOUPDFEFI);

        
        PKGENERALSERVICES.COMMITTRANSACTION;

        PKERRORS.POP;
    EXCEPTION
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
            RAISE;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    END UPMESSAGEFINISHOKAT;






























PROCEDURE UPMESSAGEFINISHNOK
(
    ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE,
    IBOUPDFEFI IN BOOLEAN DEFAULT FALSE
)
IS
BEGIN
    PKERRORS.PUSH ('pkStatusExeProgramMgr.UpMessageFinishNOK');

    









    
    IF (PKTBLESTAPROG.FBLEXIST (ISBPROGRAM)) THEN

        
        PKTBLESTAPROG.UPMESSAGE(ISBPROGRAM, CSBTERMINO_NOK);

        
        IF ( IBOUPDFEFI ) THEN
            
            FA_BCESTAPROG.UPDFINALEXECDATE(ISBPROGRAM,PKGENERALSERVICES.FDTGETSYSTEMDATE);
        END IF;
        
        
        PKTBLESTAPROG.CLEARMEMORY;

    END IF;
    
    PKERRORS.POP;

EXCEPTION
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE;
        
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END UPMESSAGEFINISHNOK;























    PROCEDURE UPMESSAGEFINISHNOKAT
    (
        ISBPROGRAM IN ESTAPROG.ESPRPROG%TYPE,
        IBOUPDFEFI IN BOOLEAN DEFAULT FALSE
    )
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        PKERRORS.PUSH ('pkStatusExeProgramMgr.UpMessageFinishNOKAT');

        
        PKSTATUSEXEPROGRAMMGR.UPMESSAGEFINISHNOK(ISBPROGRAM, IBOUPDFEFI);

        
        PKGENERALSERVICES.COMMITTRANSACTION;

        PKERRORS.POP;
    EXCEPTION
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
            RAISE;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    END UPMESSAGEFINISHNOKAT;






















PROCEDURE  ADDIDTRACKING
(
	ISBPROGRAM	       IN     ESTAPROG.ESPRPROG%TYPE,
	INUREGTOPROCESS	   IN     NUMBER,
	OSBIDTRACKING	   OUT    ESTAPROG.ESPRPROG%TYPE
) IS
    SBIDTRACKING    ESTAPROG.ESPRPROG%TYPE ; 
    SBMESSAGE       ESTAPROG.ESPRMESG%TYPE;  
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.AddIdTracking');

    
    SBIDTRACKING := ISBPROGRAM;

    
    SBMESSAGE := PKTBLMENSAJE.FSBGETDESCRIPTION
			    ( PKCONSTANTE.CSBDIVISION,
			      PKCONSTANTE.CSBMOD_BIL,
			      CNUMESSPROCC );

    
    PKSTATUSEXEPROGRAMMGR.ADDRECORD ( SBIDTRACKING,
                                      SBMESSAGE,
                                      INUREGTOPROCESS,
				                      NULL );
    
    COMMIT;


    IF ( INUREGTOPROCESS = 0 ) THEN
    
        SBMESSAGE := PKTBLMENSAJE.FSBGETDESCRIPTION
    			    ( PKCONSTANTE.CSBDIVISION,
    			      PKCONSTANTE.CSBMOD_GRL,
    			      CNUMSG_NO_HAY_REGISTROS );
    
    END IF;

    
    PKSTATUSEXEPROGRAMMGR.UPSTATUSEXEPROG
            (
        		SBIDTRACKING,
        		SBMESSAGE,
        		0,
        		NULL,
        		INUREGTOPROCESS,
                NULL
            );
            
    
    COMMIT;

    
    OSBIDTRACKING := SBIDTRACKING;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
	   PKERRORS.POP;
	   RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	   PKERRORS.POP;
	   RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	   PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	   PKERRORS.POP;
	   RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END ADDIDTRACKING;


















FUNCTION FSBVERSION  RETURN VARCHAR2 IS
BEGIN

    RETURN CSBVERSION;

END;

    


























PROCEDURE UPDATEPROCESS
    (
	ISBPROGRAMA	IN 	ESTAPROG.ESPRPROG%TYPE,
	ISBPROCESO 	IN 	ESTAPROG.ESPRVALO%TYPE
    ) 
    IS

    
    

    PRAGMA AUTONOMOUS_TRANSACTION ;

BEGIN


    PKERRORS.PUSH('pkStatusExeProgramMgr.UpdateProcess');

    
    UPDATE ESTAPROG
    SET    ESPRVALO = ISBPROCESO
    WHERE  ESPRPROG = ISBPROGRAMA ;

    
    COMMIT;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END UPDATEPROCESS ;

























    PROCEDURE UPINFOEXEPROGRAM
    (
        ISBPROGRAMA     IN 	ESTAPROG.ESPRPROG%TYPE,
        ISBINFORMATION 	IN 	ESTAPROG.ESPRINFO%TYPE
    )
    IS

    
    

    PRAGMA AUTONOMOUS_TRANSACTION ;

BEGIN


    PKERRORS.PUSH('pkStatusExeProgramMgr.UpInfoExeProgram');

    
    UPDATE ESTAPROG
    SET    ESPRINFO = ISBINFORMATION
    WHERE  ESPRPROG = ISBPROGRAMA ;

    
    COMMIT;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END UPINFOEXEPROGRAM ;

























PROCEDURE ACTCONTRATOSFACTURADOSAT
(
    ISBNOMBREPROGRAMA IN ESTAPROG.ESPRPROG%TYPE,
    INUCONTRATOSFACT  IN ESTAPROG.ESPRSUFA%TYPE
)
IS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.ActContratosFacturadosAT');
    
    
    
    UPDATE  ESTAPROG
    SET     ESPRSUFA = INUCONTRATOSFACT
    WHERE   ESPRPROG = ISBNOMBREPROGRAMA;

    
    
    
    COMMIT;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END ACTCONTRATOSFACTURADOSAT;

























    PROCEDURE UPPEFAEXEPROGRAM
    (
        ISBPROGRAMA     IN 	ESTAPROG.ESPRPROG%TYPE,
        INUPERIFACT 	IN 	ESTAPROG.ESPRPEFA%TYPE
    )
    IS

    
    

    PRAGMA AUTONOMOUS_TRANSACTION ;

    BEGIN
    

        PKERRORS.PUSH('pkStatusExeProgramMgr.UpPefaExeProgram');

        
        UPDATE ESTAPROG
        SET    ESPRPEFA = INUPERIFACT
        WHERE  ESPRPROG = ISBPROGRAMA ;

        
        COMMIT;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

    END UPPEFAEXEPROGRAM ;


























    PROCEDURE GETRUNPROCESS
    (
        ISBPROGRAMA     IN 	ESTAPROG.ESPRPROG%TYPE,
        ORCESTAPROG     OUT ESTAPROG%ROWTYPE
    )
    IS
        SBMENSINICIO    MENSAJE.MENSDESC%TYPE;
        SBMENSPROCESO   MENSAJE.MENSDESC%TYPE;
        
        CURSOR CURUNPROCESS(  ISBPROGRAMA     IN 	ESTAPROG.ESPRPROG%TYPE,
                              ISBMENSINICIO   IN    MENSAJE.MENSDESC%TYPE,
                              ISBMENSPROCESO  IN    MENSAJE.MENSDESC%TYPE )
        IS
            SELECT * FROM ESTAPROG
            WHERE ESPRPROG LIKE ISBPROGRAMA
            AND ESPRPORC <> PKBILLCONST.CIENPORCIEN
            AND ESPRMESG IN ( ISBMENSINICIO, ISBMENSPROCESO );
    BEGIN
    
        PKERRORS.PUSH('pkStatusExeProgramMgr.GetRunProcess');

        
        SBMENSINICIO := PKTBLMENSAJE.FSBGETDESCRIPTION
        			    ( CSBDIVISION,
        			      CSBMODULE,
        			      CNUMSG_INICIO_PROCESO );

        
        SBMENSPROCESO := PKTBLMENSAJE.FSBGETDESCRIPTION
        			    ( PKCONSTANTE.CSBDIVISION,
        			      PKCONSTANTE.CSBMOD_BIL,
        			      CNUMESSPROCC );

        IF ( CURUNPROCESS%ISOPEN ) THEN

            CLOSE CURUNPROCESS;

        END IF;

        OPEN CURUNPROCESS ( ISBPROGRAMA,
                            SBMENSINICIO,
                            SBMENSPROCESO
                           );

        FETCH CURUNPROCESS INTO ORCESTAPROG;

        CLOSE CURUNPROCESS;

        PKERRORS.POP;
    
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETRUNPROCESS ;


























PROCEDURE GETLASTPROCESS
(
    ISBPROGRAMA     IN 	ESTAPROG.ESPRPROG%TYPE,
    ORCESTAPROG     OUT ESTAPROG%ROWTYPE
)
IS
    CURSOR CULASTPROCESS
    (
        ISBPROGRAMA IN ESTAPROG.ESPRPROG%TYPE
    ) IS
        SELECT * FROM ESTAPROG
        WHERE ESPRPROG LIKE ISBPROGRAMA
        ORDER BY ESPRFEIN DESC;
BEGIN

    PKERRORS.PUSH('pkStatusExeProgramMgr.GetLastProcess');

    IF ( CULASTPROCESS%ISOPEN ) THEN

        CLOSE CULASTPROCESS;

    END IF;

    OPEN CULASTPROCESS (
        ISBPROGRAMA
    );

    FETCH CULASTPROCESS INTO ORCESTAPROG;

    CLOSE CULASTPROCESS;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETLASTPROCESS ;

































PROCEDURE ADDRECORDIDSESSION
(
    ISBPROGRAMA IN  ESTAPROG.ESPRPROG%TYPE,
    INUTOTALREG IN  ESTAPROG.ESPRTAPR%TYPE DEFAULT NULL,
    INUESPRSUFA IN  ESTAPROG.ESPRSUFA%TYPE DEFAULT 0,
    INUESPRPEFA IN  ESTAPROG.ESPRPEFA%TYPE DEFAULT NULL,
    INUESPRINFO IN  ESTAPROG.ESPRINFO%TYPE DEFAULT NULL,
    ISBESPRMESG IN  ESTAPROG.ESPRMESG%TYPE DEFAULT NULL
)
IS
    PRAGMA AUTONOMOUS_TRANSACTION ;

    RCESTAPROG  ESTAPROG%ROWTYPE;
BEGIN

    PKERRORS.PUSH('pkStatusExeProgramMgr.AddRecordIdSession');

    RCESTAPROG.ESPRPROG := ISBPROGRAMA;
    RCESTAPROG.ESPRPORC := PKBILLCONST.CERO;
    RCESTAPROG.ESPRMESG := NVL(ISBESPRMESG, CSBMSG_INICIO_PROCESO);
    RCESTAPROG.ESPRFEIN := UT_DATE.FDTSYSDATE;
    RCESTAPROG.ESPRTAPR := INUTOTALREG;
    RCESTAPROG.ESPRSUPR := PKBILLCONST.CERO;
    RCESTAPROG.ESPRSUFA := INUESPRSUFA;
    RCESTAPROG.ESPRPEFA := INUESPRPEFA;
    RCESTAPROG.ESPRVALO := PKSESSIONMGR.FSBGETPROCSESSION;
    RCESTAPROG.ESPRINFO := INUESPRINFO;

    PKTBLESTAPROG.INSRECORD(RCESTAPROG);
    
    COMMIT;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END ADDRECORDIDSESSION;
























FUNCTION FBOVERIFICAPROCESOENEJEC
(
    ISBPROGRAMA IN  ESTAPROG.ESPRPROG%TYPE
)
RETURN BOOLEAN
IS
    PRAGMA AUTONOMOUS_TRANSACTION ;
    
    RCESTAPROG  ESTAPROG%ROWTYPE;
    CURSOR CUCURSOR IS(
        SELECT  ESPRPROG,
                ESPRPORC,
                ESPRVALO
        FROM    ESTAPROG
        WHERE   ESPRPROG LIKE ISBPROGRAMA
        AND     ESPRPORC <> PKBILLCONST.CIENPORCIEN
        AND     ESPRFEFI IS NULL
    );

    TYPE TYRCLE_ESTAPROG IS RECORD(
        ESPRPROG    ESTAPROG.ESPRPROG%TYPE,
        ESPRPORC    ESTAPROG.ESPRPORC%TYPE,
        ESPRVALO    ESTAPROG.ESPRVALO%TYPE
    );
    
    RCLE_ESTAPROG  TYRCLE_ESTAPROG;
    
    BOENEJECUCION BOOLEAN;
BEGIN

    PKERRORS.PUSH('pkStatusExeProgramMgr.fboVerificaProcesoEnEjec');

    
    
    
    
    OPEN CUCURSOR;

    
    
    
    
    

    BOENEJECUCION := FALSE;

    LOOP

        FETCH CUCURSOR INTO RCLE_ESTAPROG;
        EXIT WHEN CUCURSOR%NOTFOUND;

        IF
            (PKSESSIONMGR.FBLEXISTSESSION (RCLE_ESTAPROG.ESPRVALO))
        THEN
           BOENEJECUCION := TRUE;
        ELSE
            UPDATE  ESTAPROG
            SET     ESPRMESG = DAGE_MESSAGE.FSBGETDESCRIPTION(CNUMSGINCEJEC),
                    ESPRFEFI = UT_DATE.FDTSYSDATE
            WHERE   ESPRPROG = RCLE_ESTAPROG.ESPRPROG;
        END IF;

    END LOOP;

    
    
    

    COMMIT;

    RETURN BOENEJECUCION;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        IF ( CUCURSOR%ISOPEN ) THEN
            CLOSE CUCURSOR;
        END IF;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        IF ( CUCURSOR%ISOPEN ) THEN
            CLOSE CUCURSOR;
        END IF;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBMSGERROR);
        PKERRORS.POP;
        IF ( CUCURSOR%ISOPEN ) THEN
            CLOSE CUCURSOR;
        END IF;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBMSGERROR);


END FBOVERIFICAPROCESOENEJEC;





























PROCEDURE UPDATESTATUSPROGRAM
(
    ISBPROG       IN ESTAPROG.ESPRPROG%TYPE,
    ISBMENS       IN ESTAPROG.ESPRMESG%TYPE,
    INUPORCENTAJE IN ESTAPROG.ESPRPORC%TYPE,
    INUCURRENTREG IN NUMBER,
    INUTOTALRECS  IN ESTAPROG.ESPRTAPR%TYPE DEFAULT NULL,
    INUESPRSUFA   IN ESTAPROG.ESPRSUFA%TYPE DEFAULT NULL,
    IBLCONCATMSG  IN BOOLEAN  DEFAULT FALSE
)
IS
    PRAGMA AUTONOMOUS_TRANSACTION ;
    
    SBMENS ESTAPROG.ESPRMESG%TYPE;
BEGIN

    PKERRORS.PUSH( 'pkStatusExeProgramMgr.UpStatusExeProg' );
    
    IF IBLCONCATMSG THEN
      
      SBMENS := PKTBLESTAPROG.FSBGETMESSAGE(ISBPROG);

      
      IF (LENGTH(ISBMENS) + LENGTH(SBMENS)) > 1000 THEN
        SBMENS := SUBSTR(ISBMENS, 0, 998-LENGTH(SBMENS)) || CHR(10) || SBMENS;
      END IF;

      SBMENS := ISBMENS || CHR(10) || SBMENS;
    ELSE
      SBMENS := SUBSTR(ISBMENS, 0, 1000);
    END IF;

    IF ( INUPORCENTAJE = CNUTERMINO_NOK ) THEN
    
    	UPDATE ESTAPROG
    	SET    ESPRMESG = SBMENS,
    	       ESPRSUPR = NVL( INUCURRENTREG, ESPRSUPR ),
    	       ESPRFEFI = SYSDATE,
    	       ESPRTAPR = NVL( INUTOTALRECS, ESPRTAPR ),
    	       ESPRSUFA = NVL( INUESPRSUFA, ESPRSUFA )
    	WHERE  ESPRPROG = UPPER( ISBPROG );
    
    ELSIF ( INUPORCENTAJE = CNUTERMINO_OK ) THEN
    
        UPDATE ESTAPROG
        SET    ESPRPORC = INUPORCENTAJE,
               ESPRMESG = SBMENS,
               ESPRSUPR = NVL( INUCURRENTREG, ESPRSUPR ),
               ESPRFEFI = SYSDATE,
               ESPRTAPR = NVL( INUTOTALRECS, ESPRTAPR ),
               ESPRSUFA = NVL( INUESPRSUFA,ESPRSUFA )
        WHERE  ESPRPROG = UPPER( ISBPROG );
    
    ELSE
    
        UPDATE ESTAPROG
        SET    ESPRPORC = NVL( INUPORCENTAJE, ESPRPORC ),
               ESPRMESG = NVL( SBMENS, ESPRMESG ),
               ESPRSUPR = NVL( INUCURRENTREG, ESPRSUPR ),
               ESPRTAPR = NVL( INUTOTALRECS, ESPRTAPR ),
               ESPRSUFA = NVL( INUESPRSUFA, ESPRSUFA )
        WHERE  ESPRPROG = UPPER( ISBPROG );
    
    END IF;

    IF (SQL%NOTFOUND) THEN
    
        PKERRORS.POP;
        RAISE NO_DATA_FOUND;
    
    END IF;

    COMMIT;

    PKERRORS.POP;
EXCEPTION

    WHEN NO_DATA_FOUND THEN
        PKERRORS.POP;
        PKERRORS.SETERRORCODE( CSBDIVISION, CSBMODULE, CNURECORD_NO_EXISTE );
        RAISE LOGIN_DENIED;

END UPDATESTATUSPROGRAM;




























PROCEDURE GETALLRUNPROCESS
(
    ISBPROGRAMA     IN  ESTAPROG.ESPRPROG%TYPE,
    OTBPROGRAMLIST  OUT TYTBPROGRAMS
)
IS
    CURSOR CUPROGRAMS IS(
        SELECT  *
        FROM    ESTAPROG
        WHERE   ESPRPROG LIKE ISBPROGRAMA
        AND     ESPRPORC <> PKBILLCONST.CIENPORCIEN
        AND     ESPRFEFI IS NULL
    );
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.GetAllRunProcess');

    
    
    
    IF ( CUPROGRAMS%ISOPEN ) THEN
        CLOSE CUPROGRAMS;
    END IF;

    
    
    
    OPEN CUPROGRAMS;
    FETCH CUPROGRAMS BULK COLLECT INTO OTBPROGRAMLIST;
    CLOSE CUPROGRAMS;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        IF ( CUPROGRAMS%ISOPEN ) THEN
            CLOSE CUPROGRAMS;
        END IF;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        IF ( CUPROGRAMS%ISOPEN ) THEN
            CLOSE CUPROGRAMS;
        END IF;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBMSGERROR);
        PKERRORS.POP;
        IF ( CUPROGRAMS%ISOPEN ) THEN
            CLOSE CUPROGRAMS;
        END IF;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBMSGERROR);

END GETALLRUNPROCESS;























PROCEDURE DELRECNOERROR
(
	ISBPROGRAMA	IN	ESTAPROG.ESPRPROG%TYPE
)
IS
BEGIN
    PKERRORS.PUSH('pkStatusExeProgramMgr.DelRecNoError');
    
    DELETE ESTAPROG
    WHERE ESPRPROG LIKE ISBPROGRAMA ;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END DELRECNOERROR;



    



















    PROCEDURE UPDATEESTAPROG
    (
        ISBPROCESSID    IN  ESTAPROG.ESPRPROG%TYPE,
        ISBMESSAGE      IN  ESTAPROG.ESPRMESG%TYPE,
        INUCOUNTPROCESS IN  ESTAPROG.ESPRTAPR%TYPE,
        IDTDATE         IN  ESTAPROG.ESPRFEFI%TYPE
    )
    IS
        
        RCESTAPROG  ESTAPROG%ROWTYPE;
    BEGIN
        UT_TRACE.TRACE('[INICIO] TT_BOInstanceDamageRegister.UpdateEstaProg:
                         ProcessId['||ISBPROCESSID||'] - DateEnd['||IDTDATE||'] -
                         Message['||ISBMESSAGE||'] - CountProcess['||INUCOUNTPROCESS||']',10);
        IF (PKTBLESTAPROG.FBLEXIST(ISBPROCESSID)) THEN
            RCESTAPROG := PKTBLESTAPROG.FRCGETRECORD(ISBPROCESSID);
            RCESTAPROG.ESPRMESG := NVL(ISBMESSAGE,RCESTAPROG.ESPRMESG);
            RCESTAPROG.ESPRTAPR := INUCOUNTPROCESS;
            RCESTAPROG.ESPRFEFI := NVL(RCESTAPROG.ESPRFEFI,IDTDATE);
            PKTBLESTAPROG.UPRECORD(RCESTAPROG);
        END IF;

        UT_TRACE.TRACE('[FIN] TT_BOInstanceDamageRegister.UpdateEstaProg',10);
    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END UPDATEESTAPROG;

    


















    PROCEDURE UPDATEESTAPROGAT
    (
        ISBPROCESSID    IN  ESTAPROG.ESPRPROG%TYPE,
        ISBMESSAGE      IN  ESTAPROG.ESPRMESG%TYPE,
        INUCOUNTPROCESS IN  ESTAPROG.ESPRTAPR%TYPE,
        IDTDATE         IN  ESTAPROG.ESPRFEFI%TYPE
    )
    IS PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        PKERRORS.PUSH('[INICIO] pkStatusExeProgramMgr.UpdateEstaProgAT');
        PKSTATUSEXEPROGRAMMGR.UPDATEESTAPROG(ISBPROCESSID,ISBMESSAGE,INUCOUNTPROCESS,IDTDATE);
        COMMIT;
        PKERRORS.POP;
        UT_TRACE.TRACE('[FIN] pkStatusExeProgramMgr.UpdateEstaProgAT',10);
    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	ROLLBACK;
    	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	ROLLBACK;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    	ROLLBACK;
    END UPDATEESTAPROGAT;




















BEGIN
    
    CSBTERMINO_OK := PKTBLMENSAJE.FSBGETDESCRIPTION
			( CSBDIVISION, CSBMODULE, CNUMENS_TERMINO_OK );

    
    CSBTERMINO_NOK := PKTBLMENSAJE.FSBGETDESCRIPTION
			( CSBDIVISION, CSBMODULE, CNUMENS_TERMINO_NOK );

    
    CSBMSG_INICIO_PROCESO := PKTBLMENSAJE.FSBGETDESCRIPTION
				(CSBDIVISION,CSBMODULE,CNUMSG_INICIO_PROCESO);

    
    CSBMSG_FIN_PROCESO := PKTBLMENSAJE.FSBGETDESCRIPTION
				(CSBDIVISION,CSBMODULE,CNUMSG_FIN_PROCESO);

    
    CSBMSG_NO_HAY_REGISTROS := PKTBLMENSAJE.FSBGETDESCRIPTION
				(CSBDIVISION,CSBMODULE,CNUMSG_NO_HAY_REGISTROS);

END PKSTATUSEXEPROGRAMMGR;