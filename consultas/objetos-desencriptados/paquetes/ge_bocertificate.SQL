PACKAGE BODY GE_BOCertificate
IS





























































	
	
    CSBVERSION              CONSTANT VARCHAR2(20) := 'SAO433973';

    
    CNUERREXCLUTIONDATE     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901212;

    CNUCOMM_CLASS_POS_ORD   CONSTANT OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE := 26;
    
    SBAGRUPEDTASKTYPE       GE_PARAMETER.VALUE%TYPE := DAGE_PARAMETER.FSBGETVALUE('AGRUPED_TASK_TYPE');

	

    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    











    PROCEDURE GETACTIVITYDATA
    (
        INUITEMID       IN  GE_ITEMS.ITEMS_ID%TYPE,
        OBLEXISTS       OUT BOOLEAN,
        OSBDESCRIPTION  OUT GE_ITEMS.DESCRIPTION%TYPE,
        ONUCLASSIF      OUT GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE,
        OSBCLASSDESC    OUT GE_ITEM_CLASSIF.DESCRIPTION%TYPE,
        ONUMEASUREUNIT  OUT GE_MEASURE_UNIT.MEASURE_UNIT_ID%TYPE,
        OSBMEASUREDESC  OUT GE_MEASURE_UNIT.DESCRIPTION%TYPE,
        OSBSERIADO      OUT GE_ITEMS_TIPO.SERIADO%TYPE
    )
    IS

    BEGIN

        OR_BCINSPECCIONORDENES.GETACTIVITYDATA
        (
            INUITEMID,
            OBLEXISTS,
            OSBDESCRIPTION,
            ONUCLASSIF,
            OSBCLASSDESC,
            ONUMEASUREUNIT,
            OSBMEASUREDESC,
            OSBSERIADO
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    




















    PROCEDURE GETITEMSMODIFICACION
    (
        INUUNIDADOPERA      IN      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUTASKTYPE         IN      OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUORDERID          IN      OR_ORDER.ORDER_ID%TYPE,
        ORFCURSOR           OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        ORFCURSOR := OR_BCINSPECCIONORDENES.FRFITEMSMODIFICACION(INUUNIDADOPERA, INUTASKTYPE, INUORDERID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFCURSOR);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFCURSOR);
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    




























    PROCEDURE GETORDERSBYCERTIFICATE
    (
        INUCERTIFICATE      IN      GE_ACTA.ID_ACTA%TYPE,
        INUORDERID          IN      OR_ORDER.ORDER_ID%TYPE,
        INUOPERUNITID       IN      OR_ORDER.OPERATING_UNIT_ID%TYPE,
        INUTASKTYPEID       IN      OR_ORDER.TASK_TYPE_ID%TYPE,
        ISBISVERIFIED       IN      VARCHAR2,
        IDTINITIALDATE      IN      OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
        IDTENDDATE          IN      OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
        ORFORDERS           OUT     CONSTANTS.TYREFCURSOR
    )
	IS
		
	BEGIN
		
		ORFORDERS := GE_BCCERTIFICATE.FRFGETORDERSBYCERTIFICATE
                     (
                        INUCERTIFICATE,
                        INUORDERID,
                        INUOPERUNITID,
                        INUTASKTYPEID,
                        ISBISVERIFIED,
                        IDTINITIALDATE,
                        IDTENDDATE
                    );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    


    PROCEDURE GETITEMSBYORDER
    (
        INUORDERID          IN      OR_ORDER.ORDER_ID%TYPE,
        ORFITEMS            OUT     CONSTANTS.TYREFCURSOR
    )
	IS
		
	BEGIN
		
		ORFITEMS :=  GE_BCCERTIFICATE.FRFGETITEMSBYORDER(INUORDERID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    


    PROCEDURE GETCERTIFICATESTATUS
    (
        INUCERTIFICATE      IN      GE_ACTA.ID_ACTA%TYPE,
        OSBSTATUS           OUT     GE_ACTA.ESTADO%TYPE
    ) IS
    BEGIN

        OSBSTATUS := DAGE_ACTA.FSBGETESTADO(INUCERTIFICATE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    


    PROCEDURE GETITEMSBYOPERUNIT
    (
        INUOPERATINGUNIT       IN   OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUORDER               IN   OR_ORDER.ORDER_ID%TYPE,
        ORFITEMS                OUT  CONSTANTS.TYREFCURSOR
    ) IS
    BEGIN
    
        
        OR_BCINSPECCIONORDENES.OBTENERITEMS(INUOPERATINGUNIT, INUORDER, ORFITEMS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    



















    PROCEDURE INSERTORDERITEM
    (
        INUORDERID      IN      OR_ORDER.ORDER_ID%TYPE,
        INUITEMID       IN      GE_ITEMS.ITEMS_ID%TYPE,
        INULEGALAMOUNT  IN      OR_ITEMS_ORDEN_INSPE.CANT_ITEM_LEGALIZADA%TYPE,
        INUSERITEMID    IN      OR_ITEMS_ORDEN_INSPE.ID_ITEMS_SERIADO%TYPE,
        ONUORDERITEMID  OUT     OR_ITEMS_ORDEN_INSPE.ID_ITEM_ORDENS_INSPE%TYPE
    )
    IS
        RCORDERITEM        DAOR_ITEMS_ORDEN_INSPE.STYOR_ITEMS_ORDEN_INSPE;
    BEGIN
        
        ONUORDERITEMID := OR_BOSEQUENCES.FNUNEXTOR_ITEMS_ORDEN_INSPE;

        
        RCORDERITEM.ID_ORDEN              := INUORDERID;
        RCORDERITEM.ID_ITEM_ORDEN         := INUITEMID;
        RCORDERITEM.CANT_ITEM_ASIGNADA    := 0;
        RCORDERITEM.CANT_ITEM_LEGALIZADA  := INULEGALAMOUNT;
        RCORDERITEM.INSPECCIONADA         := GE_BOCONSTANTS.CSBNO;
        RCORDERITEM.MODO_INSERCION        := CT_BOCONSTANTS.FSBGETCERTIFICATEINSMODE;
        RCORDERITEM.ID_ITEM_ORDENS_INSPE  := ONUORDERITEMID;
        RCORDERITEM.ID_ITEMS_SERIADO      := INUSERITEMID;
        
        DAOR_ITEMS_ORDEN_INSPE.INSRECORD(RCORDERITEM);


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSERTORDERITEM;
    
    
















    PROCEDURE UPDATEORDERITEM
    (
        INUORDERITEMID      IN          OR_ITEMS_ORDEN_INSPE.ID_ITEM_ORDENS_INSPE%TYPE,
        INUITEMID           IN          GE_ITEMS.ITEMS_ID%TYPE,
        INULEGALAMOUNT      IN          OR_ITEMS_ORDEN_INSPE.CANT_ITEM_LEGALIZADA%TYPE
    )
    IS

        RCORDERITEM        DAOR_ITEMS_ORDEN_INSPE.STYOR_ITEMS_ORDEN_INSPE;

    BEGIN
        
        RCORDERITEM := DAOR_ITEMS_ORDEN_INSPE.FRCGETRECORD(INUORDERITEMID);

        
        RCORDERITEM.CANT_ITEM_LEGALIZADA  := INULEGALAMOUNT;
        RCORDERITEM.ID_ITEM_ORDEN         := INUITEMID;

        
        DAOR_ITEMS_ORDEN_INSPE.UPDRECORD(RCORDERITEM);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END UPDATEORDERITEM;
    
    














    PROCEDURE DELETEORDERITEM
    (
        INUORDERITEMID      IN          OR_ITEMS_ORDEN_INSPE.ID_ITEM_ORDENS_INSPE%TYPE
    )
    IS

    BEGIN
        
        DAOR_ITEMS_ORDEN_INSPE.DELRECORD(INUORDERITEMID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELETEORDERITEM;

    
















    PROCEDURE LOCKCERTIFICATEBYPK
    (
       INUCERTIFICATE  IN GE_ACTA.ID_ACTA%TYPE
    )
    IS
       ORCGE_ACTA   DAGE_ACTA.STYGE_ACTA;
    BEGIN

         
         DAGE_ACTA.LOCKBYPK(INUCERTIFICATE,ORCGE_ACTA);

         EXCEPTION
             WHEN EX.CONTROLLED_ERROR THEN
                 RAISE EX.CONTROLLED_ERROR;
             WHEN OTHERS THEN
                 ERRORS.SETERROR;
                 RAISE EX.CONTROLLED_ERROR;
     
    END LOCKCERTIFICATEBYPK;
    
    
















    FUNCTION FNUISCERTPENDING
    (
       INUCERTIFICATE   IN  GE_ACTA.ID_ACTA%TYPE

    )RETURN NUMBER
    IS
       NUPENDING NUMBER;
    BEGIN

         NUPENDING:= DAGE_ACTA.FNUGETIS_PENDING(INUCERTIFICATE);

         RETURN NUPENDING;

         EXCEPTION
             WHEN EX.CONTROLLED_ERROR THEN
                 RAISE EX.CONTROLLED_ERROR;
             WHEN OTHERS THEN
                 ERRORS.SETERROR;
                 RAISE EX.CONTROLLED_ERROR;
    END FNUISCERTPENDING;
    
    


































    PROCEDURE EXCLUDEORDER
    (
        IDTFINALEXCLUSIONDATE IN  CT_EXCLUDED_ORDER.FINAL_EXCLUSION_DATE%TYPE,
        INUORDERID            IN  CT_PROCESS_LOG.ORDER_ID%TYPE,
        INUCOMMENTTYPEID      IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT            IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE,
        IBLEXCLECERTRELATE    IN  BOOLEAN DEFAULT TRUE
    )
    IS
         RCEXCLUDEORDER        DACT_EXCLUDED_ORDER.STYCT_EXCLUDED_ORDER;
         ONUORDERCOMMENTID     OR_ORDER_COMMENT.ORDER_COMMENT_ID%TYPE;
         NUCERTIFICATEID       GE_ACTA.ID_ACTA%TYPE;
         FTBCERTIFRELATED      GE_BCCERTIFICATE.TYTBRELATEDORDER;
         NUINDEXCERTSRELAT     BINARY_INTEGER;
         TBNOVELTYORDERS       CT_BCNOVELTY.TYTBORDERSRELATED;

    BEGIN
         UT_TRACE.TRACE('[INICIO] GE_BOCertificate.ExcludeOrder', 1);
         
         CT_BOPROCESSLOG.REGISTERPROCESSLOG
         (
           INUORDERID,
           CT_BOCONSTANTS.CNUORDER_EXCLUDE_ERR,
           IDTFINALEXCLUSIONDATE
         );
         UT_TRACE.TRACE('Inserta Registro ProcessLog ', 3);
        
        OR_BOORDERCOMMENT.ADDCOMMENT
        (
             INUORDERID,
             INUCOMMENTTYPEID,
             ISBCOMMENT,
             OR_BOCONSTANTS.CSBNO,
             ONUORDERCOMMENTID
        );
        UT_TRACE.TRACE('Inserta Commentario OrderCommentId:['||ONUORDERCOMMENTID||']', 3);

        RCEXCLUDEORDER.ORDER_ID:=INUORDERID;
        RCEXCLUDEORDER.ORDER_COMMENT_ID:= ONUORDERCOMMENTID;

        
        RCEXCLUDEORDER.FINAL_EXCLUSION_DATE:= IDTFINALEXCLUSIONDATE + 1 -
            UT_DATE.CNUONE_SECOND ;

        
        IF (DACT_EXCLUDED_ORDER.FBLEXIST(INUORDERID)) THEN
        
            DACT_EXCLUDED_ORDER.UPDRECORD(RCEXCLUDEORDER);
        ELSE
            DACT_EXCLUDED_ORDER.INSRECORD(RCEXCLUDEORDER);
        END IF;

        IF (IBLEXCLECERTRELATE) THEN
           
            FTBCERTIFRELATED := GE_BCCERTIFICATE.FTBCERTIFRELATED(INUORDERID);
            NUINDEXCERTSRELAT:= FTBCERTIFRELATED.FIRST;

            WHILE NUINDEXCERTSRELAT IS NOT NULL LOOP
                   
                  DAGE_ACTA.UPDIS_PENDING(FTBCERTIFRELATED(NUINDEXCERTSRELAT).CERTIFICATE_ID,CT_BOCONSTANTS.CNUIS_PENDING);

                  UT_TRACE.TRACE('Acta relacionada ' || FTBCERTIFRELATED(NUINDEXCERTSRELAT).CERTIFICATE_ID || ' Cambiada a ISPENDING' ,3);

                  NUINDEXCERTSRELAT := FTBCERTIFRELATED.NEXT(NUINDEXCERTSRELAT);
            END LOOP;

            
            CT_BOCERTIFICATE.CHANGETOPENDCERTSBYORD(INUORDERID, IDTFINALEXCLUSIONDATE);
        END IF;
        
        
        DAOR_ORDER.UPDIS_PENDING_LIQ(INUORDERID, CT_BOCONSTANTS.CSBEXCLUDEDORDER);

        
        CT_BCNOVELTY.GETORDERSNOVELTY(INUORDERID, TBNOVELTYORDERS);
        
        
        IF (TBNOVELTYORDERS.COUNT > 0) THEN
            
            FOR NUINDEX IN TBNOVELTYORDERS.FIRST .. TBNOVELTYORDERS.LAST LOOP
                
                
                IF (TBNOVELTYORDERS(NUINDEX).FINAL_EXCLUSION_DATE IS NULL OR
                    TBNOVELTYORDERS(NUINDEX).FINAL_EXCLUSION_DATE < IDTFINALEXCLUSIONDATE ) THEN

                    TBNOVELTYORDERS(NUINDEX).FINAL_EXCLUSION_DATE := IDTFINALEXCLUSIONDATE;
                END IF;

                
                GE_BOCERTIFICATE.EXCLUDEORDER
                (
                    TBNOVELTYORDERS(NUINDEX).FINAL_EXCLUSION_DATE,
                    TBNOVELTYORDERS(NUINDEX).RELATED_ORDER_ID,
                    INUCOMMENTTYPEID,
                    ISBCOMMENT,
                    IBLEXCLECERTRELATE
                );

            END LOOP;
        END IF;

        UT_TRACE.TRACE('[FINAL] GE_BOCertificate.ExcludeOrder', 1);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    
    END EXCLUDEORDER;
    
    


















    PROCEDURE DELEXCLUDEORDER(INUORDERID    IN  CT_EXCLUDED_ORDER.ORDER_ID%TYPE)
    IS
        FTBCERTIFRELATED      GE_BCCERTIFICATE.TYTBRELATEDORDER;
        NUINDEXCERTSRELAT     BINARY_INTEGER;
        DTFINALEXCLUSIONDATE  CT_EXCLUDED_ORDER.FINAL_EXCLUSION_DATE%TYPE;
        ERRORCODE             GE_MESSAGE.MESSAGE_ID%TYPE:= 900778;
        NUORDERCOMMENTID      OR_ORDER_COMMENT.ORDER_COMMENT_ID%TYPE;
        TBNOVELTYORDERS       CT_BCNOVELTY.TYTBORDERSRELATED;

    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOCertificate.DelExcludeOrder',15);

        
        IF (NOT DACT_EXCLUDED_ORDER.FBLEXIST(INUORDERID)) THEN
            
            ERRORS.SETERROR(CNUERREXCLUTIONDATE);  
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        FTBCERTIFRELATED := GE_BCCERTIFICATE.FTBCERTIFRELATED(INUORDERID);
        NUINDEXCERTSRELAT:= FTBCERTIFRELATED.FIRST;

        WHILE NUINDEXCERTSRELAT IS NOT NULL LOOP
            
            DAGE_ACTA.ACCKEY(FTBCERTIFRELATED(NUINDEXCERTSRELAT).CERTIFICATE_ID);
            UT_TRACE.TRACE('Acta Bloqueada ' || FTBCERTIFRELATED(NUINDEXCERTSRELAT).CERTIFICATE_ID ,3);
            NUINDEXCERTSRELAT := FTBCERTIFRELATED.NEXT(NUINDEXCERTSRELAT);
        END LOOP;

        
        DTFINALEXCLUSIONDATE:=UT_DATE.FDTSYSDATE();

        
        UT_TRACE.TRACE('Inserta Registro ProcessLog ', 3);
        CT_BOPROCESSLOG.REGISTERPROCESSLOG
        (
            INUORDERID,
            ERRORCODE,
            DTFINALEXCLUSIONDATE
        );

        
        OR_BOORDERCOMMENT.ADDCOMMENT
        (
            INUORDERID,
            CNUCOMM_CLASS_POS_ORD,
            GE_BOMESSAGE.FSBGETMESSAGE(ERRORCODE,INUORDERID|| '|' || DTFINALEXCLUSIONDATE),
            OR_BOCONSTANTS.CSBNO,
            NUORDERCOMMENTID
        );
        
        UT_TRACE.TRACE('Inserta Commentario OrderCommentId:['||NUORDERCOMMENTID||']', 3);


        
        DACT_EXCLUDED_ORDER.DELRECORD(INUORDERID);

        
        DAOR_ORDER.UPDIS_PENDING_LIQ(INUORDERID, GE_BOCONSTANTS.CSBYES);

        
        CT_BCNOVELTY.GETORDERSNOVELTY(INUORDERID, TBNOVELTYORDERS);

        
        IF (TBNOVELTYORDERS.COUNT > 0) THEN
            
            FOR NUINDEX IN TBNOVELTYORDERS.FIRST .. TBNOVELTYORDERS.LAST LOOP
            
                
                IF (DACT_EXCLUDED_ORDER.FBLEXIST(TBNOVELTYORDERS(NUINDEX).RELATED_ORDER_ID)) THEN

                    GE_BOCERTIFICATE.DELEXCLUDEORDER(TBNOVELTYORDERS(NUINDEX).RELATED_ORDER_ID);
                ELSIF(DAOR_ORDER.FSBGETIS_PENDING_LIQ(TBNOVELTYORDERS(NUINDEX).RELATED_ORDER_ID) = CT_BOCONSTANTS.CSBEXCLUDEDORDER ) THEN
                
                    
                    DAOR_ORDER.UPDIS_PENDING_LIQ(TBNOVELTYORDERS(NUINDEX).RELATED_ORDER_ID, GE_BOCONSTANTS.CSBYES);
                END IF;
                
            END LOOP;
        END IF;

        UT_TRACE.TRACE('Finaliza GE_BOCertificate.DelExcludeOrder',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    



















    PROCEDURE GETRELATANDVERIFORDERS
    (
       INUCERTIFICATE  IN GE_ACTA.ID_ACTA%TYPE,
       INUORDERID      IN OR_ORDER.ORDER_ID%TYPE,
       ONUQUANTITY     OUT NUMBER
    )
    IS
       TBPENDCERTSBYORD       GE_BCCERTIFICATE.TYTBRELATEDORDER;
       NUINDEXCERTSBYORD      BINARY_INTEGER;
       SBCOMMENT              OR_ORDER_COMMENT.ORDER_COMMENT%TYPE;
    BEGIN
    
        
        TBPENDCERTSBYORD:=GE_BCCERTIFICATE.FTBRELATANDVERIFORDERS(INUORDERID,INUCERTIFICATE);
        
        ONUQUANTITY:=TBPENDCERTSBYORD.COUNT;
        NUINDEXCERTSBYORD:= TBPENDCERTSBYORD.FIRST;

        WHILE NUINDEXCERTSBYORD IS NOT NULL LOOP
            IF (INUCERTIFICATE IS NULL)THEN
              UT_TRACE.TRACE('Orden ['||TBPENDCERTSBYORD(NUINDEXCERTSBYORD).ORDER_ID||']
              relacionada y verificada en Acta['||TBPENDCERTSBYORD(NUINDEXCERTSBYORD).CERTIFICATE_ID|| ']');
            ELSE
              UT_TRACE.TRACE('La Orden ['||TBPENDCERTSBYORD(NUINDEXCERTSBYORD).ORDER_ID||']
              ya est� verificada en el Acta['||TBPENDCERTSBYORD(NUINDEXCERTSBYORD).CERTIFICATE_ID|| ']');
            END IF;
            NUINDEXCERTSBYORD := TBPENDCERTSBYORD.NEXT(NUINDEXCERTSBYORD);
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
    END GETRELATANDVERIFORDERS ;
    
    
    
















    PROCEDURE GETCOMMENTTYPEOFPOSORD
    (
      ORFDATACOMMENT  OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
              ORFDATACOMMENT:= GE_BCCERTIFICATE.FRFCOMMENTTYPEOFPOSORD();
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCOMMENTTYPEOFPOSORD;
    
    











    FUNCTION FNUCOUNTORDERSBYCERTIFICATE
    (
        INUCERTIFICATE      IN      GE_ACTA.ID_ACTA%TYPE
    )
    RETURN NUMBER
	IS
	BEGIN

        RETURN GE_BCCERTIFICATE.FNUCOUNTORDERSBYCERTIFICATE(INUCERTIFICATE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNTORDERSBYCERTIFICATE;
    
    


















    PROCEDURE ADDPROCCTRL
    (
        ONUPROCCTRLID   OUT PROCEJEC.PREJIDPR%TYPE
    )
    IS
    BEGIN

    	UT_TRACE.TRACE('INICIO GE_BOCertificate.AddProcCtrl', 1);

        
        PKEXECUTEDPROCESSMGR.VALISINEXECUTION(GE_BOCERTIFICATE.GCSBEST_CST_PROC);

        
        PKEXECUTEDPROCESSMGR.ADDINEXECRECORD
        (
            GE_BOCERTIFICATE.GCSBEST_CST_PROC,
            PKCONSTANTE.NULLNUM, 
            ONUPROCCTRLID
        );
        PKEXECUTEDPROCESSMGR.UPDATEPROCSESSION(ONUPROCCTRLID);

    	UT_TRACE.TRACE('FIN GE_BOCertificate.AddProcCtrl', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDPROCCTRL;
    
    























    PROCEDURE RESETPROCCONTROL
    (
        INUPROCCTRLID   IN  PROCEJEC.PREJIDPR%TYPE
    )
    IS

        
        
        

        
        RCPROCEJEC  PROCEJEC%ROWTYPE;

    BEGIN

    	UT_TRACE.TRACE('INICIO GE_BOCertificate.ResetProcControl', 1);

        
        RCPROCEJEC := PKTBLPROCEJEC.FRCGETRECORD(INUPROCCTRLID);

        
        RCPROCEJEC.PREJPRID := NULL;

        
        PKTBLPROCEJEC.UPRECORD(RCPROCEJEC);

        PKGENERALSERVICES.COMMITTRANSACTION;

        
        PKEXECUTEDPROCESSMGR.UPDATEPROCSESSION(INUPROCCTRLID);

    	UT_TRACE.TRACE('FIN GE_BOCertificate.ResetProcControl', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RESETPROCCONTROL;
    
    






























    PROCEDURE UPDAVGCOSTBYTASKTYPE
    (
        IDTDATE         IN  OR_ORDER.EXEC_INITIAL_DATE%TYPE,
        INUTHREAD       IN  NUMBER,
        INUTOTTHREADS   IN  NUMBER
    )
    IS
        RCTASKTYPE_AVG_COST DATMP_TASKTYPE_AVG_COST.STYTMP_TASKTYPE_AVG_COST;

        NUAVERAGECOST   OR_TASKTYPE_AVG_COST.AVERAGE_COST%TYPE;
        
        CURSOR CUGETTASKTYPE
        IS
        SELECT  UNIQUE TASK_TYPE_ID
            FROM    CT_TASKTYPE_CONTYPE
            WHERE   MOD(TASK_TYPE_ID, INUTOTTHREADS) + 1 = INUTHREAD
                AND  INSTR(','||SBAGRUPEDTASKTYPE||',', ','||TASK_TYPE_ID||',') = 0 ; 
            
            
        
        CURSOR CUGETGROUPTASKTYPE
        IS  SELECT  UNIQUE TASK_TYPE_ID
            FROM    CT_TASKTYPE_CONTYPE
            WHERE   INSTR(','||SBAGRUPEDTASKTYPE||',', ','||TASK_TYPE_ID||',') <> 0;


    BEGIN
        
        
        FOR RC IN CUGETTASKTYPE LOOP

            
            IF (NVL(DAOR_TASKTYPE_AVG_COST.FSBGETAUTO_GENERATION(RC.TASK_TYPE_ID,0),'Y') = GE_BOCONSTANTS.CSBYES) THEN
                NUAVERAGECOST := NULL;

                
                NUAVERAGECOST := GE_BCDETALLEACTA.FNUCALCAVGBYTASKTYPE(RC.TASK_TYPE_ID, TRUNC(IDTDATE));


                
                IF (NUAVERAGECOST >= 0) THEN


                    IF (DATMP_TASKTYPE_AVG_COST.FBLEXIST(RC.TASK_TYPE_ID)) THEN

                        
                        IF ( NUAVERAGECOST > 0) THEN

                            RCTASKTYPE_AVG_COST := DATMP_TASKTYPE_AVG_COST.FRCGETRECORD(RC.TASK_TYPE_ID);

                            
                            
                            IF (RCTASKTYPE_AVG_COST.AVERAGE_COST = 0) THEN
                               RCTASKTYPE_AVG_COST.AMOUNT := 1;
                            ELSE
                               RCTASKTYPE_AVG_COST.AMOUNT := RCTASKTYPE_AVG_COST.AMOUNT + 1;
                            END IF;

                            RCTASKTYPE_AVG_COST.AVERAGE_COST := RCTASKTYPE_AVG_COST.AVERAGE_COST + NUAVERAGECOST;


                            DATMP_TASKTYPE_AVG_COST.UPDRECORD(RCTASKTYPE_AVG_COST);

                        END IF;

                    ELSE

                        RCTASKTYPE_AVG_COST.TASK_TYPE_ID := RC.TASK_TYPE_ID;
                        RCTASKTYPE_AVG_COST.AVERAGE_COST := NUAVERAGECOST;
                        RCTASKTYPE_AVG_COST.AMOUNT := 1;

                        DATMP_TASKTYPE_AVG_COST.INSRECORD(RCTASKTYPE_AVG_COST);

                    END IF;
                END IF;
            END IF;

        END LOOP;
        
        
        IF (INUTHREAD = 1) THEN

            FOR RCGROUP IN CUGETGROUPTASKTYPE LOOP
                
                IF (NVL(DAOR_TASKTYPE_AVG_COST.FSBGETAUTO_GENERATION(RCGROUP.TASK_TYPE_ID,0), 'Y') = GE_BOCONSTANTS.CSBYES) THEN
                    NUAVERAGECOST := NULL;

                    
                    NUAVERAGECOST := GE_BCDETALLEACTA.FNUAVGBYGROUPTASKTYPE(RCGROUP.TASK_TYPE_ID, TRUNC(IDTDATE));

                    
                    IF (NUAVERAGECOST > 0) THEN

                        IF (DATMP_TASKTYPE_AVG_COST.FBLEXIST(RCGROUP.TASK_TYPE_ID)) THEN

                            RCTASKTYPE_AVG_COST := DATMP_TASKTYPE_AVG_COST.FRCGETRECORD(RCGROUP.TASK_TYPE_ID);
                            RCTASKTYPE_AVG_COST.AVERAGE_COST := RCTASKTYPE_AVG_COST.AVERAGE_COST + NUAVERAGECOST;
                            RCTASKTYPE_AVG_COST.AMOUNT := RCTASKTYPE_AVG_COST.AMOUNT + 1;

                            DATMP_TASKTYPE_AVG_COST.UPDRECORD(RCTASKTYPE_AVG_COST);

                        ELSE

                            RCTASKTYPE_AVG_COST.TASK_TYPE_ID := RCGROUP.TASK_TYPE_ID;
                            RCTASKTYPE_AVG_COST.AVERAGE_COST := NUAVERAGECOST;
                            RCTASKTYPE_AVG_COST.AMOUNT := 1;

                            DATMP_TASKTYPE_AVG_COST.INSRECORD(RCTASKTYPE_AVG_COST);

                        END IF;

                    END IF;
                END IF;
            END LOOP;
        END IF;
        
        PKGENERALSERVICES.COMMITTRANSACTION;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDAVGCOSTBYTASKTYPE;

END GE_BOCERTIFICATE;