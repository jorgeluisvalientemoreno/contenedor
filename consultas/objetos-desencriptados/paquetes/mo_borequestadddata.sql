PACKAGE BODY MO_BORequestAddData
IS
    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO201397';
    
    
    
    
    CNUERROR_NULL_ATTR          CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 1422;
    
    CNUNOT_VALID_PACK_STATUS    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 143445;
    
    CNUERROR_GENERIC            CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2741;
    
    CNUELEMENT_POSITION         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901415;
    
    CNUPACK_WITHOUT_CLIENT      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 300259;
    
    CNUPACK_WITHOUT_ADDRES      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901526;
    
    CNUPACK_WITHOUT_QUOTAT      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901234;
    
    CNUNO_EXECUTION             CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901638;

    
    CNUPROD_ACT_INSTALL         CONSTANT GE_ITEMS.ITEMS_ID%TYPE:=GE_BOPARAMETER.FNUGET('PROD_INSTALL_ACTIVIT');

    
    CNUMOT_TYPE_MAIN            CONSTANT MO_MOTIVE.MOTIVE_TYPE_ID%TYPE := PS_BOMOTIVETYPE.FNUMOTITYPEBYTAG('MOTY_VENTA_SERV_INGENIERIA') ;

    CNUTRACE_LEVEL              CONSTANT NUMBER := 5;
    CNUNULL                     CONSTANT NUMBER := -1;
    CSBSEPARATOR_PARAM          CONSTANT VARCHAR2(1) := '|';
    CSBSEPARATOR_VALUE          CONSTANT VARCHAR2(1) := '=';
    
    
    CNUWAIT_ADITIONAL_DATA      CONSTANT NUMBER := 228;
    
    
    CSBEOL                      CONSTANT VARCHAR2(50) := CHR(10);
    CSBXML_HEAD                 CONSTANT VARCHAR2(50) := '<?xml version="1.0" encoding="'||UT_XMLCOMPOSE.FSBGETDATABASECHARSET||'"?>';
    CSBOPXML                    CONSTANT VARCHAR2(50) := '<xml>';
    CSBCLXML                    CONSTANT VARCHAR2(50) := '</xml>';
    
    
    
    
    GNUPACKAGES                 MO_PACKAGES.PACKAGE_ID%TYPE;
    
    GRCPRODUCTMOTIVE            DAPS_PRODUCT_MOTIVE.STYPS_PRODUCT_MOTIVE;
    GNUPRODUCTTYPE              CC_QUOTATION.PRODUCT_TYPE_ID%TYPE;
    
    
    
    GNUMAINMOTIVE               MO_MOTIVE.MOTIVE_ID%TYPE;
    GNUMAINADDRESS              MO_ADDRESS.PARSER_ADDRESS_ID%TYPE;
    GBOLOADMAINMOTIVE           BOOLEAN :=  FALSE;
    
    
    GRCCOMPOSITION              CC_BOOFFERMANAGER.TYRCCOMBO;
    GRCMOTIVE                   DAMO_MOTIVE.STYMO_MOTIVE;
    GTBMOCOMPONENTS             DAMO_COMPONENT.TYTBMO_COMPONENT;
    
    
    

    

















    FUNCTION FNUGETINSTALLACT
    RETURN GE_ITEMS.ITEMS_ID%TYPE
    IS
    BEGIN

        RETURN CNUPROD_ACT_INSTALL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETINSTALLACT;

    


















    PROCEDURE VALIDATEPACKAGEID
    (
        INUPACKAGES         IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
    BEGIN

        
        IF(GNUPACKAGES IS NULL OR INUPACKAGES IS NULL OR INUPACKAGES != GNUPACKAGES)
        THEN
            
            IF(INUPACKAGES IS NULL)
            THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_NULL_ATTR, 'Solicitud');
            END IF;

            
            DAMO_PACKAGES.ACCKEY(INUPACKAGES);

            GNUPACKAGES := INUPACKAGES;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEPACKAGEID;
    
    



































    PROCEDURE VALIDATEREQUEST
    (
        INUPACKAGES         IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUREQUESTNUM       OUT MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE,
        ONUSUBSCRIBERID     OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        OSBSUBSCRIBERNAME   OUT VARCHAR2,
        ONUADDRESSID        OUT AB_ADDRESS.ADDRESS_ID%TYPE,
        OSBADDRESSPARSED    OUT AB_ADDRESS.ADDRESS_PARSED%TYPE,
        ONUQUOTATIONID      OUT CC_QUOTATION.QUOTATION_ID%TYPE,
        OSBQUOTATIONDESC    OUT CC_QUOTATION.DESCRIPTION%TYPE,
        ONUPRODUCTTYPEID    OUT CC_QUOTATION.PRODUCT_TYPE_ID%TYPE,
        OSBPRODUCTTYPEDESC  OUT SERVICIO.SERVDESC%TYPE
    )
    IS

        RCQUOTATIONDATA     MO_BCREQUESTADDDATA.CUQUOTATIONDATA%ROWTYPE;
        RCREQUESTADDDATA    MO_BCREQUESTADDDATA.CUREQUESTDATA%ROWTYPE;

        
        BOSTANDBY       BOOLEAN;

    BEGIN

        UT_TRACE.TRACE( 'Inicio: [MO_BORequestAddData.ValidateRequest] Solicitud:['||INUPACKAGES||']', CNUTRACE_LEVEL );

        
        VALIDATEPACKAGEID(INUPACKAGES);

        
        
        
        IF ( MO_BOPACKAGES.FBLISFINALSTATUS( INUPACKAGES ) ) THEN
                
                GE_BOERRORS.SETERRORCODE( CNUNOT_VALID_PACK_STATUS );
        END IF;

        
        BOSTANDBY := MO_BOWF_PACK_INTERFAC.FBLACTIVITYEXIST
		(
			INUPACKAGES,
            CNUWAIT_ADITIONAL_DATA,
			MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY
		);


        IF(NOT BOSTANDBY)
        THEN
            GE_BOERRORS.SETERRORCODE(CNUNO_EXECUTION);
        END IF;

        
        ONUREQUESTNUM       := NULL;
        ONUSUBSCRIBERID     := NULL;
        OSBSUBSCRIBERNAME   := NULL;
        ONUADDRESSID        := NULL;
        OSBADDRESSPARSED    := NULL;
        ONUQUOTATIONID      := NULL;
        OSBQUOTATIONDESC    := NULL;
        ONUPRODUCTTYPEID    := NULL;
        OSBPRODUCTTYPEDESC  := NULL;

        
        OPEN MO_BCREQUESTADDDATA.CUQUOTATIONDATA
        (
            INUPACKAGES,
            CC_BOQUOTATIONUTIL.FSBGETQUOTATIONATTSTAT,
            CC_BOQUOTATIONUTIL.FSBGETQUOTATIONACCSTAT
        );
        FETCH MO_BCREQUESTADDDATA.CUQUOTATIONDATA INTO RCQUOTATIONDATA;
        CLOSE MO_BCREQUESTADDDATA.CUQUOTATIONDATA;


        IF(RCQUOTATIONDATA.QUOTATION_ID IS NULL)
        THEN
             
            GE_BOERRORS.SETERRORCODEARGUMENT
            (
                CNUPACK_WITHOUT_QUOTAT,
                INUPACKAGES
            );
        END IF;

        
        OPEN MO_BCREQUESTADDDATA.CUREQUESTDATA
            (
                INUPACKAGES,
                GE_BOCONSTANTS.CSBYES
            );
        FETCH MO_BCREQUESTADDDATA.CUREQUESTDATA INTO RCREQUESTADDDATA;
        CLOSE MO_BCREQUESTADDDATA.CUREQUESTDATA;

        IF(RCREQUESTADDDATA.SUBSCRIBER_ID IS NULL)
        THEN
             
            GE_BOERRORS.SETERRORCODEARGUMENT
            (
                CNUPACK_WITHOUT_CLIENT,
                INUPACKAGES
            );
        END IF;
        IF(RCREQUESTADDDATA.ADDRESS_ID IS NULL)
        THEN
             
            GE_BOERRORS.SETERRORCODEARGUMENT
            (
                CNUPACK_WITHOUT_ADDRES,
                INUPACKAGES
            );
        END IF;

        ONUREQUESTNUM       := RCREQUESTADDDATA.REQUEST_NUM;
        ONUSUBSCRIBERID     := RCREQUESTADDDATA.SUBSCRIBER_ID;
        OSBSUBSCRIBERNAME   := RCREQUESTADDDATA.SUBS_NAME||' '|| RCREQUESTADDDATA.SUBS_LAST_NAME;
        ONUADDRESSID        := RCREQUESTADDDATA.ADDRESS_ID;
        OSBADDRESSPARSED    := RCREQUESTADDDATA.ADDRESS_DISPLAY;

        ONUQUOTATIONID      := RCQUOTATIONDATA.QUOTATION_ID;
        OSBQUOTATIONDESC    := RCQUOTATIONDATA.QUOTAT_DISPLAY;
        ONUPRODUCTTYPEID    := RCQUOTATIONDATA.PROD_TYPE_ID;
        OSBPRODUCTTYPEDESC  := RCQUOTATIONDATA.PROD_TYPE_DISPLAY;

        UT_TRACE.TRACE( 'Fin: [MO_BORequestAddData.ValidateRequest]', CNUTRACE_LEVEL );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEREQUEST;

    
















    PROCEDURE LOADPRODUCTMOTIVE
    (
        INUPRODTYPE     IN  CC_QUOTATION.PRODUCT_TYPE_ID%TYPE
    )
    IS
        
        NUCOMPTYPEID    PS_PROD_COMPOSITION.COMPONENT_TYPE_ID%TYPE;
        NUMAINSERVCOMP  PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE;
        
        NUPRODMOTID     PS_PROD_COMPOSITION.PRODUCT_MOTIVE_ID%TYPE;

    BEGIN

        IF(INUPRODTYPE IS NULL OR GNUPRODUCTTYPE IS NULL OR INUPRODTYPE != GNUPRODUCTTYPE )
        THEN
            
            IF(INUPRODTYPE IS NULL)
            THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_NULL_ATTR, 'Tipo de Producto');
            END IF;
            
            
            PKTBLSERVICIO.ACCKEY(INUPRODTYPE);

            
            
            PS_BOPRODCOMPOSITION.GETMAINCOMPTYPE(INUPRODTYPE,NUCOMPTYPEID,NUPRODMOTID);
            NUMAINSERVCOMP := PS_BOPRODUCTMOTIVECOMP.FNUGETPRODMOTICOMPBYPRODMOTIVE(NUCOMPTYPEID,NUPRODMOTID);

            IF (NUMAINSERVCOMP IS NULL) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_GENERIC, 'El tipo de producto ['||INUPRODTYPE||'] no posee un componente principal configurado');
            END IF;

            GRCPRODUCTMOTIVE := PS_BOPRODSERVMANAGER.FRCGETPRODUCTMOTIVE(NUPRODMOTID);
            
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADPRODUCTMOTIVE;

    























    PROCEDURE LOADQUOTEDACTIVITIES
    (
        INUPACKAGES         IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [MO_BORequestAddData.LoadQuotedActivities] Solicitud: ['||INUPACKAGES||']', CNUTRACE_LEVEL + 1 );

        
        MO_BCREQUESTADDDATA.LOADQUOTEDACTIVITIES
        (
            INUPACKAGES,
            OR_BOCONSTANTS.CSBPLANNEDSTATUS,
            ORFDATACURSOR
        );
        
        UT_TRACE.TRACE( 'Fin: [MO_BORequestAddData.LoadQuotedActivities]', CNUTRACE_LEVEL + 1 );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADQUOTEDACTIVITIES;
    
    





































    PROCEDURE LOADREQUESTADDDATA
    (
        INUPACKAGES         IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUPRODTYPE         IN  CC_QUOTATION.PRODUCT_TYPE_ID%TYPE,
        ONUACTIVITYINSTALL  OUT GE_ITEMS.ITEMS_ID%TYPE,
        OCLADDDATAXML       OUT MO_CONSTR_COMPANY_DAT.ADDITIONAL_DATA%TYPE,
        OCLPRODTYPEXML      OUT CLOB,
        ORFCOMMPLANS        OUT CONSTANTS.TYREFCURSOR,
        ORFACTIVITIES       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        UT_TRACE.TRACE( 'Inicio: [MO_BORequestAddData.LoadRequestAddData] Solicitud: ['||INUPACKAGES||']', CNUTRACE_LEVEL );

        
        VALIDATEPACKAGEID(INUPACKAGES);
        
        
        LOADPRODUCTMOTIVE(INUPRODTYPE);

        
        OCLADDDATAXML := DAMO_CONSTR_COMPANY_DAT.FCLGETADDITIONAL_DATA(INUPACKAGES,0);

        UT_CLOB.CLEAR;

        UT_CLOB.ADDVARCHAR2(CSBXML_HEAD||CSBEOL);
        UT_CLOB.ADDVARCHAR2(CSBOPXML||CSBEOL);

        UT_CLOB.ADDCLOB(OCLADDDATAXML);
        UT_CLOB.ADDVARCHAR2(CSBEOL);

        UT_CLOB.ADDVARCHAR2(CSBCLXML||CSBEOL);
        
        OCLADDDATAXML := UT_CLOB.FSBGETCLOBDATA;
        
        UT_CLOB.CLEAR;
        
        
        MO_BOREQADDDATAXML.GETPRODUCTSTRUCTURE(INUPRODTYPE, OCLPRODTYPEXML);
        
        
        LOADQUOTEDACTIVITIES(INUPACKAGES,ORFACTIVITIES);
        
        
        ORFCOMMPLANS := CC_BCCOMMERCIALPLAN.FRFGETCOMMPLANSBYPRODTYPE(INUPRODTYPE);
        
        
        IF(CNUPROD_ACT_INSTALL IS NULL OR CNUPROD_ACT_INSTALL = CC_BOCONSTANTS.CNUAPPLICATIONNULL )
        THEN
            ONUACTIVITYINSTALL := NULL;
        ELSE
            ONUACTIVITYINSTALL := CNUPROD_ACT_INSTALL;
        END IF;

        UT_TRACE.TRACE( 'Fin: [MO_BORequestAddData.LoadRequestAddData]', CNUTRACE_LEVEL );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADREQUESTADDDATA;
    
    































    PROCEDURE LOADREQADDDATANOPROD
    (
        INUPACKAGES         IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        OCLADDDATAXML       OUT MO_CONSTR_COMPANY_DAT.ADDITIONAL_DATA%TYPE,
        ORFACTIVITIES       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        UT_TRACE.TRACE( 'Inicio: [MO_BORequestAddData.LoadReqAddDataNoProd] Solicitud: ['||INUPACKAGES||']', CNUTRACE_LEVEL );

        
        VALIDATEPACKAGEID(INUPACKAGES);

        
        OCLADDDATAXML := DAMO_CONSTR_COMPANY_DAT.FCLGETADDITIONAL_DATA(INUPACKAGES,0);

        UT_CLOB.CLEAR;

        UT_CLOB.ADDVARCHAR2(CSBXML_HEAD||CSBEOL);
        UT_CLOB.ADDVARCHAR2(CSBOPXML||CSBEOL);

        UT_CLOB.ADDCLOB(OCLADDDATAXML);
        UT_CLOB.ADDVARCHAR2(CSBEOL);

        UT_CLOB.ADDVARCHAR2(CSBCLXML||CSBEOL);

        OCLADDDATAXML := UT_CLOB.FSBGETCLOBDATA;

        UT_CLOB.CLEAR;
        
        
        LOADQUOTEDACTIVITIES(INUPACKAGES,ORFACTIVITIES);
        
        UT_TRACE.TRACE( 'Fin: [MO_BORequestAddData.LoadReqAddDataNoProd]', CNUTRACE_LEVEL );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADREQADDDATANOPROD;
    
    



















    PROCEDURE DELETESUBSCRIPTIONS
    (
        ISBSUBSCRIPTIONS    IN  VARCHAR2
    )
    IS
        TBSUBSCRIPTIONS UT_STRING.TYTB_STRING;
        NUIDXSUBSCRIPC  NUMBER;
    BEGIN

        UT_TRACE.TRACE( 'Inicio: [MO_BORequestAddData.DeleteSubscriptions]', CNUTRACE_LEVEL );

        
        UT_STRING.EXTSTRING(ISBSUBSCRIPTIONS,CSBSEPARATOR_PARAM,TBSUBSCRIPTIONS);

        UT_TRACE.TRACE( 'Borrando Contratos ['||TBSUBSCRIPTIONS.COUNT||']', CNUTRACE_LEVEL +1 );

        NUIDXSUBSCRIPC :=  TBSUBSCRIPTIONS.FIRST;

        LOOP
            EXIT WHEN NUIDXSUBSCRIPC IS NULL;

            MO_BOSUSCRIPMANAGER.DROPSUSCRIPTION(TBSUBSCRIPTIONS(NUIDXSUBSCRIPC));

            NUIDXSUBSCRIPC := TBSUBSCRIPTIONS.NEXT(NUIDXSUBSCRIPC);
        END LOOP;

        UT_TRACE.TRACE( 'Fin: [MO_BORequestAddData.DeleteSubscriptions]', CNUTRACE_LEVEL );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELETESUBSCRIPTIONS;

    



































    PROCEDURE SAVEADDITIONALDATA
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ICLDATAXML          IN  CLOB,
        ISBSUBSCRIPTTODEL   IN  VARCHAR2
    )
    IS
        RCADDITIONALDATA    DAMO_CONSTR_COMPANY_DAT.STYMO_CONSTR_COMPANY_DAT;
    BEGIN

        UT_TRACE.TRACE('Inicio MO_BORequestAddData.SaveAdditionalData',CNUTRACE_LEVEL);
    
        SAVEPOINT SAVEADDITIONALDATA;
    
        IF( DAMO_CONSTR_COMPANY_DAT.FBLEXIST(INUPACKAGEID) )
        THEN
            DAMO_CONSTR_COMPANY_DAT.UPDADDITIONAL_DATA(INUPACKAGEID,ICLDATAXML);
        ELSE
            RCADDITIONALDATA.PACKAGE_ID := INUPACKAGEID;
            RCADDITIONALDATA.ADDITIONAL_DATA := ICLDATAXML;
        
            DAMO_CONSTR_COMPANY_DAT.INSRECORD(RCADDITIONALDATA);
        END IF;
        
        
        DELETESUBSCRIPTIONS
        (
            ISBSUBSCRIPTTODEL
        );
        
        UT_TRACE.TRACE('Fin MO_BORequestAddData.SaveAdditionDataByXML',CNUTRACE_LEVEL);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SAVEADDITIONALDATA;
            RAISE;
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SAVEADDITIONALDATA;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SAVEADDITIONALDATA;
    
    















    PROCEDURE CLONESUSCRIPTIONBYXML
    (
        INUSUBSCRIPTION     IN  SUSCRIPC.SUSCCODI%TYPE,
        ICLDATAXML          IN  CLOB,
        ORFADDITIONALDATA   OUT CONSTANTS.TYREFCURSOR
    )
    IS
        
        TBPARAMECOLUMDESCRP    UT_STRING.TYTB_STRPARAMETERS;
        TBDATATOPROCESS        UT_STRING.TYTB_STRING;

        
        NUINDEX                 NUMBER;

        
        TBREQUESTADDDATA        MO_TYTBREQADDDATA;
        RCREQUESTADDDATA        MO_TYOBREQADDDATA;
        
        
        NUNEWSUBSCRIPTION       SUSCRIPC.SUSCCODI%TYPE;
    BEGIN
        UT_TRACE.TRACE( 'Incio MO_BORequestAddData.CloneSuscriptionByXML', CNUTRACE_LEVEL );

        TBPARAMECOLUMDESCRP(0).SBPARAMETER := 'AddData';
        TBPARAMECOLUMDESCRP(1).SBPARAMETER := 'Client';
        TBPARAMECOLUMDESCRP(2).SBPARAMETER := 'Address';
        
        TBREQUESTADDDATA    :=  MO_TYTBREQADDDATA();

        GE_BOREPORTPROCESS.DUMPXMLDATATOTABLEPL
        (
            ICLDATAXML,
            TBPARAMECOLUMDESCRP,
            TBDATATOPROCESS
        );
        
        SAVEPOINT CLONESUSCRIPTIONBYXML;

        NUINDEX := TBDATATOPROCESS.FIRST;

        LOOP
            EXIT WHEN NUINDEX IS NULL;

            UT_TRACE.TRACE('RECORD '||TBDATATOPROCESS(NUINDEX),CNUTRACE_LEVEL+1);

            
            MO_BOSUSCRIPMANAGER.CLONESUSCRIPTION
            (
                INUSUBSCRIPTION,
                TO_NUMBER(UT_STRING.GETPARAMETERVALUE(TBDATATOPROCESS(NUINDEX),TBPARAMECOLUMDESCRP(2).SBPARAMETER,CSBSEPARATOR_PARAM,CSBSEPARATOR_VALUE)),
                TO_NUMBER(UT_STRING.GETPARAMETERVALUE(TBDATATOPROCESS(NUINDEX),TBPARAMECOLUMDESCRP(1).SBPARAMETER,CSBSEPARATOR_PARAM,CSBSEPARATOR_VALUE)),
                NUNEWSUBSCRIPTION
            );

            
            RCREQUESTADDDATA := MO_TYOBREQADDDATA
            (
                TO_NUMBER(UT_STRING.GETPARAMETERVALUE(TBDATATOPROCESS(NUINDEX),TBPARAMECOLUMDESCRP(0).SBPARAMETER,CSBSEPARATOR_PARAM,CSBSEPARATOR_VALUE)), 
                NULL,               
                NULL,               
                NUNEWSUBSCRIPTION   
            );
            
            
            TBREQUESTADDDATA.EXTEND;
            TBREQUESTADDDATA(TBREQUESTADDDATA.COUNT) :=  RCREQUESTADDDATA;
            
            NUINDEX := TBDATATOPROCESS.NEXT(NUINDEX);
        END LOOP;
        
        
        MO_BCREQUESTADDDATA.GETADDDATAFROMCOLL(TBREQUESTADDDATA, ORFADDITIONALDATA);

        UT_TRACE.TRACE( 'Fin MO_BORequestAddData.CloneSuscriptionByXML', CNUTRACE_LEVEL );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLONESUSCRIPTIONBYXML;

    



















    PROCEDURE VALDROPDATA
    (
        INUSUBSCRIPTION IN  SUSCRIPC.SUSCCODI%TYPE
    )
    IS
    BEGIN

        SAVEPOINT VALDROPDATA;
        
        MO_BOSUSCRIPMANAGER.DROPSUSCRIPTION(INUSUBSCRIPTION);
        
        ROLLBACK TO VALDROPDATA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO VALDROPDATA;
            RAISE;
        WHEN OTHERS THEN
            ROLLBACK TO VALDROPDATA;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALDROPDATA;
    
    























    PROCEDURE NOTIFY
    (
        INUPACKAGE  IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        
        BOENDWAIT       BOOLEAN;
        
        
        RCQUOTATIONDATA     MO_BCREQUESTADDDATA.CUQUOTATIONDATA%ROWTYPE;
    BEGIN

        UT_TRACE.TRACE( 'Inicio: [MO_BORequestAddData.Notify]', CNUTRACE_LEVEL );

        
        OPEN MO_BCREQUESTADDDATA.CUQUOTATIONDATA
        (
            INUPACKAGE,
            CC_BOQUOTATIONUTIL.FSBGETQUOTATIONATTSTAT,
            CC_BOQUOTATIONUTIL.FSBGETQUOTATIONACCSTAT
        );
        FETCH MO_BCREQUESTADDDATA.CUQUOTATIONDATA INTO RCQUOTATIONDATA;
        CLOSE MO_BCREQUESTADDDATA.CUQUOTATIONDATA;
        
        
        IF(RCQUOTATIONDATA.PROD_TYPE_ID IS NULL)
        THEN
            MO_BOCOMPLEMENTMOTIVES.COMPLEMENTMOTIVES(INUPACKAGE, NULL);
        END IF;

        
        BOENDWAIT := MO_BOWF_PACK_INTERFAC.FBLACTIVITYEXIST
		(
			INUPACKAGE,
            CNUWAIT_ADITIONAL_DATA,
			MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_FINISH
		);

        
        IF ( NOT BOENDWAIT ) THEN

            MO_BOWF_PACK_INTERFAC.PREPNOTTOWFPACK
			(
            	INUPACKAGE,
                CNUWAIT_ADITIONAL_DATA,
	            MO_BOCAUSAL.FNUGETSUCCESS,
	            MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY,
                FALSE
            );

            
            
            MO_BCREQUESTADDDATA.UPDPLANACTBYPACKAGES( INUPACKAGE );
        
		END IF;

        UT_TRACE.TRACE( 'Fin: [MO_BORequestAddData.Notify]', CNUTRACE_LEVEL );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END NOTIFY;
    
    
    
















    PROCEDURE GETCOMMPLANSSTRUCT
    (
        ISBCOMMERCIALPLANIDS    IN  VARCHAR2,
        OCLCOMMPLANCOMPXML      OUT CLOB
    )
    IS
        TBSTRING    UT_STRING.TYTB_STRING;
    BEGIN

        UT_TRACE.TRACE( 'Fin: [MO_BORequestAddData.GetCommPlansStruct]', CNUTRACE_LEVEL );

        UT_STRING.EXTSTRING(ISBCOMMERCIALPLANIDS, CSBSEPARATOR_PARAM, TBSTRING);
        MO_BOREQADDDATAXML.GETCOMMPLANSSTRUCT(TBSTRING,OCLCOMMPLANCOMPXML);
        
        UT_TRACE.TRACE( 'Fin: [MO_BORequestAddData.GetCommPlansStruct]', CNUTRACE_LEVEL );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCOMMPLANSSTRUCT;
    
    




















    PROCEDURE COMPLACTVITIESBYMOTIVE
    (
        INUREQUESTID    IN    MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        
        TBMOTACTBYPACK    DAMO_MOTIVE.TYTBMO_MOTIVE;
        
        NUINDEXMOT        NUMBER;
        
        TBACTIVITIES      DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;
        
        NUINDEXACT        NUMBER;
        
        NUCOMPONENTID     OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
        
        
        PROCEDURE VALIDATEDATA IS
        BEGIN
        
            
            IF (INUREQUESTID IS NULL) THEN
                ERRORS.SETERROR(CNUERROR_NULL_ATTR,'Identificador de la Solicitud');
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            
            DAMO_PACKAGES.ACCKEY(INUREQUESTID);
        
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;
    
    BEGIN
    
        UT_TRACE.TRACE('Inicio MO_BORequestAddData.ComplActvitiesByMotive',4);
        UT_TRACE.TRACE('Solicitud['||INUREQUESTID||']',5);
    
        
        VALIDATEDATA;
    
        
        TBMOTACTBYPACK := MO_BCMOTIVE.FTBACTMOTSBYPACKNTYPE(INUREQUESTID, MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE);
        
        
        NUINDEXMOT := TBMOTACTBYPACK.FIRST;
        WHILE (NUINDEXMOT IS NOT NULL) LOOP
        
            UT_TRACE.TRACE('Motivo['||TBMOTACTBYPACK(NUINDEXMOT).MOTIVE_ID||']',5);
        
            
            TBACTIVITIES.DELETE;
            
            
            NUCOMPONENTID := NULL;
        
            

            TBACTIVITIES := MO_BCREQUESTADDDATA.FTBGETPLANACTBYMOTIVE(TBMOTACTBYPACK(NUINDEXMOT).MOTIVE_ID);
            
            
            NUINDEXACT := TBACTIVITIES.FIRST;
            WHILE (NUINDEXACT IS NOT NULL) LOOP
            
                UT_TRACE.TRACE('Actividad['||TBACTIVITIES(NUINDEXACT).ORDER_ACTIVITY_ID||']',5);
            
                
                TBACTIVITIES(NUINDEXACT).PRODUCT_ID := TBMOTACTBYPACK(NUINDEXMOT).PRODUCT_ID;
                
                
                TBACTIVITIES(NUINDEXACT).INSTANCE_ID := NULL;
                TBACTIVITIES(NUINDEXACT).ACTIVITY_GROUP_ID := NULL;
                
                
                IF  (TBACTIVITIES(NUINDEXACT).ACTIVITY_ID IS NOT NULL) AND
                    (DAGE_ITEMS.FSBGETUSE_(TBACTIVITIES(NUINDEXACT).ACTIVITY_ID) = OR_BOCONSTANTS.CSBCLIENT_REVIEW)
                THEN
                    
                    IF (NUCOMPONENTID IS NULL) THEN
                        NUCOMPONENTID := MO_BOCOMPONENT.FNUGETCOMPONENTBYISMAIN( TBMOTACTBYPACK(NUINDEXMOT).MOTIVE_ID,
                                                                                 GE_BOCONSTANTS.CSBYES
                                                                               );
                        UT_TRACE.TRACE('Componente Principal['||NUCOMPONENTID||']',5);
                    END IF;
                    
                    TBACTIVITIES(NUINDEXACT).COMPONENT_ID := NUCOMPONENTID;
                END IF;
                
                
                NUINDEXACT := TBACTIVITIES.NEXT(NUINDEXACT);
            END LOOP;
            
            
            DAOR_ORDER_ACTIVITY.UPDRECORDS(TBACTIVITIES);
        
            
            NUINDEXMOT := TBMOTACTBYPACK.NEXT(NUINDEXMOT);
        END LOOP;
        
        UT_TRACE.TRACE('Fin MO_BORequestAddData.ComplActvitiesByMotive',4);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END COMPLACTVITIESBYMOTIVE;
    
    

















    PROCEDURE VALIDELEMENTPOSITION
    (
        INUMOTIVEID           IN    MO_MOTIVE.MOTIVE_ID%TYPE,
        INUELEMENTPOSITION    IN    MO_MOTIVE.ELEMENT_POSITION%TYPE
    )
    IS
    
        
        NUMOTIVEELEMPOS    MO_MOTIVE.ELEMENT_POSITION%TYPE;
        
        
        NUPRODUCTID        MO_MOTIVE.PRODUCT_ID%TYPE;

        
        PROCEDURE VALIDATEDATA IS
        BEGIN

            
            IF (INUMOTIVEID IS NULL) THEN
                ERRORS.SETERROR(CNUERROR_NULL_ATTR,'Identificador del motivo');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;

    BEGIN

        UT_TRACE.TRACE('Inicio MO_BORequestAddData.ValidElementPosition',4);
        UT_TRACE.TRACE('Motivo['||INUMOTIVEID||']',5);

        
        VALIDATEDATA;
        
        
        NUMOTIVEELEMPOS := DAMO_MOTIVE.FNUGETELEMENT_POSITION(INUMOTIVEID);
        
        

        IF (INUELEMENTPOSITION IS NULL) OR
           (NUMOTIVEELEMPOS IS NULL)
        THEN
            UT_TRACE.TRACE('Valores Nulos',5);
            UT_TRACE.TRACE('Fin MO_BORequestAddData.ValidElementPosition',4);
            RETURN;
        END IF;
        
        
        IF (INUELEMENTPOSITION != NUMOTIVEELEMPOS) THEN
            
            NUPRODUCTID := DAMO_MOTIVE.FNUGETPRODUCT_ID(INUMOTIVEID);
            
            
            ERRORS.SETERROR(CNUELEMENT_POSITION,INUELEMENTPOSITION||CSBSEPARATOR_PARAM||NUPRODUCTID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Fin MO_BORequestAddData.ValidElementPosition',4);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDELEMENTPOSITION;

    























    PROCEDURE UPDCOMPTYSERVCLASS
    (
        INUPACKAGEID    IN  MO_COMPONENT.PACKAGE_ID%TYPE,
        INUCOMPTYPEID   IN  MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUSERVCLASSID  IN  MO_COMPONENT.CLASS_SERVICE_ID%TYPE
    )
    IS
        NUNEWSERVCLASSID    MO_COMPONENT.CLASS_SERVICE_ID%TYPE;

        TBCOMPONENT         DAMO_COMPONENT.TYTBMO_COMPONENT;
        
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
    BEGIN
        UT_TRACE.TRACE('Inicio MO_BORequestAddData.UpdCompTyServClass['||INUPACKAGEID||']['||INUCOMPTYPEID||']['||INUSERVCLASSID||']',4);

        
        NUNEWSERVCLASSID    := NVL(MO_BOENGINEERINGSERV.FNUGETDEFSERVICECLASS(INUPACKAGEID), INUSERVCLASSID);

        
        IF  (INUCOMPTYPEID IS NOT NULL) THEN
        
            MO_BCCOMPONENT.GETACTICOMPSBYPACK
            (
                INUPACKAGEID=>INUPACKAGEID,
                INUMOTIVETYPEID=>MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE,
                INUCOMPONENTTYPEID=>INUCOMPTYPEID,
                OTBCOMPONENT=>TBCOMPONENT
            );
        
        END IF;

        
        IF  (TBCOMPONENT.COUNT > 0) THEN
        
            FOR I IN TBCOMPONENT.FIRST .. TBCOMPONENT.LAST LOOP
            
                RCCOMPONENT := TBCOMPONENT(I);
            
                
                MO_BOCOMPONENTUPDATE.UPDSERVICECLASS
                (
                    INUMOTIVEID=>RCCOMPONENT.MOTIVE_ID,
                    INUPRODUCTID=>RCCOMPONENT.PRODUCT_ID,
                    INUMOTCOMPID=>RCCOMPONENT.COMPONENT_ID,
                    INUSERVCLASSID=>NUNEWSERVCLASSID,
                    IBOVALCOMPTYPE=>FALSE
                );
                
            END LOOP;
        
        END IF;

        UT_TRACE.TRACE('Fin MO_BORequestAddData.UpdCompTyServClass['||NUNEWSERVCLASSID||']',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDCOMPTYSERVCLASS;

    
















    PROCEDURE UPDPLANACTBYMOTIVE
    (
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        INUPLANID       IN  OR_ORDER_ACTIVITY.INSTANCE_ID%TYPE
    )
    IS
        
        TBACTIVITIES      DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;
        
        NUINDEXACT        NUMBER;
        
        NUMOTIVEGROUPID     OR_ORDER_ACTIVITY.ACTIVITY_GROUP_ID%TYPE := NULL;

        
        PROCEDURE VALIDATEDATA IS
        BEGIN

            
            IF (INUMOTIVEID IS NULL) THEN
                ERRORS.SETERROR(CNUERROR_NULL_ATTR,'Identificador del Motivo');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            DAMO_MOTIVE.ACCKEY(INUMOTIVEID);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;

    BEGIN

        UT_TRACE.TRACE('Inicio MO_BORequestAddData.UpdPlanActByMotive',4);
        UT_TRACE.TRACE('Motivo['||INUMOTIVEID||']',5);
        UT_TRACE.TRACE('Plan['||INUPLANID||']',5);

        
        VALIDATEDATA;

        
        TBACTIVITIES.DELETE;

        
        
        TBACTIVITIES := MO_BCREQUESTADDDATA.FTBGETPLANACTBYMOTIVE(INUMOTIVEID);

        
        NUINDEXACT := TBACTIVITIES.FIRST;
        WHILE (NUINDEXACT IS NOT NULL) LOOP
        
            
            IF (NUMOTIVEGROUPID IS NULL) THEN
            
                NUMOTIVEGROUPID := GE_BOSEQUENCE.NEXTGROUPSEQUENCE;
                UT_TRACE.TRACE('Grupo para el Motivo['||NUMOTIVEGROUPID||']',5);
            
            END IF;
            
            UT_TRACE.TRACE('Actividad a Actualizar['||TBACTIVITIES(NUINDEXACT).ORDER_ACTIVITY_ID||']',5);
            UT_TRACE.TRACE('Instancia['||TBACTIVITIES(NUINDEXACT).INSTANCE_ID||']',5);
            UT_TRACE.TRACE('Grupo['||TBACTIVITIES(NUINDEXACT).ACTIVITY_GROUP_ID||']',5);

            
            TBACTIVITIES(NUINDEXACT).INSTANCE_ID := INUPLANID;
            TBACTIVITIES(NUINDEXACT).ACTIVITY_GROUP_ID := NUMOTIVEGROUPID;

            DAOR_ORDER_ACTIVITY.UPDRECORD(TBACTIVITIES(NUINDEXACT));

            
            NUINDEXACT := TBACTIVITIES.NEXT(NUINDEXACT);
        
        END LOOP;

        UT_TRACE.TRACE('Fin MO_BORequestAddData.UpdPlanActByMotive',4);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDPLANACTBYMOTIVE;
    
    














    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

END MO_BOREQUESTADDDATA;