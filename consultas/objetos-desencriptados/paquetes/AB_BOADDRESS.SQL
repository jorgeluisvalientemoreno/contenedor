
CREATE OR REPLACE PACKAGE AB_BOADDRESS IS
   TYPE TYRFADDRESSID IS REF CURSOR
    RETURN AB_ADDRESS%ROWTYPE;
   TYPE TYPREMISESEGMENTS IS RECORD
    (
      SBSEGMENT AB_SEGMENTS.SEGMENTS_ID%TYPE,
      SBISMAIN AB_ADDRESS.IS_MAIN%TYPE
    );
   TYPE TYRFPREMISESEGMENTS IS REF CURSOR
    RETURN TYPREMISESEGMENTS;
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   FUNCTION FBLARETHEREMAINADDR( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBOLDADDRPARSED IN AB_ADDRESS.ADDRESS_PARSED%TYPE, ONUOLDADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN;
   FUNCTION FNUEXTADDRESSNOMAIN( INUGEOGRAP_LOCATION_ID IN NUMBER, INUESTATE_NUMBER IN NUMBER )
    RETURN NUMBER;
   FUNCTION FNUGETMAINPARSERID( INUGEOGRALOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE;
   PROCEDURE GETANYMAINPARSERID( INUGEOGRALOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ONUMAINPARSERID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ONUALTERNPARSERID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ISBISURBAN IN VARCHAR2 := NULL );
   FUNCTION FNUGETPARSERIDWITHADDRESS( INUGEOGRALOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE;
   PROCEDURE FRFGETPREMISEADDRESS( INUPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, IRFPREMISEADDRESSID OUT TYRFADDRESSID );
   PROCEDURE FRFGETPREMISESEGMENTS( INUPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, IRFPREMISESEGMENTS OUT TYRFPREMISESEGMENTS );
   FUNCTION FBLESTATENUMBER( INUESTATENUMBER IN NUMBER )
    RETURN BOOLEAN;
   PROCEDURE DELADDRESS( INUADDRESSID IN NUMBER );
   PROCEDURE VALESTATENOTNULL( INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE );
   PROCEDURE VALADDRESSISNOTNULL( ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE );
   PROCEDURE VALDUPMAINADDRESS( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE );
   PROCEDURE VALDUPESTATEADDRESS( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE );
   PROCEDURE VALMAXPREMISEAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE INCINSTALLEDLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE DECINSTALLEDLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE INCINSTALLEDAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE DECINSTALLEDAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE INCTRANSACLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE DECTRANSACLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE INCTRANSACAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE DECTRANSACAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE EXISTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, ISBDESCRIPTION IN AB_WAY_BY_LOCATION.DESCRIPTION%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, BLEXIST OUT BOOLEAN, ONUWAY_BY_LOCATION_ID OUT AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE );
   PROCEDURE INSERTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, ISBDESCRIPTION IN AB_WAY_BY_LOCATION.DESCRIPTION%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, ONUWAY_BY_LOCATION_ID OUT AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE );
   PROCEDURE EXISTWAY_TYPE( ISBDESCRIPTION IN AB_WAY_TYPE.DESCRIPTION%TYPE, ONUWAY_TYPE_ID OUT AB_WAY_TYPE.WAY_TYPE_ID%TYPE );
   FUNCTION FRFGETWAY_TYPES
    RETURN DAAB_WAY_TYPE.TYRFRECORDS;
   FUNCTION FRFGETWAY_TYPES( INUWAYTYPEPRINCIPAL IN AB_WAY_TYPE.WAY_TYPE_ID%TYPE )
    RETURN DAAB_WAY_TYPE.TYRFRECORDS;
   PROCEDURE EXISTTOKEN_HIERARCHY( ISBTOKEN_SYNONYM IN AB_TOKEN_SYNONYM.TOKEN_SYNONYM%TYPE, OSBTOKEN_HIERARCHY OUT AB_TOKEN_SYNONYM.TOKEN_HIERARCHY_ID%TYPE );
   FUNCTION FRFGETTOKEN_HIERARCHYS
    RETURN DAAB_TOKEN_HIERARCHY.TYRFRECORDS;
   FUNCTION FRFGETWAYSYNONYMS( INUGEOGRA_LOCATION IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE )
    RETURN CONSTANTS.TYREFCURSOR;
   FUNCTION FRFGETWAYSYNONYMS( INUGEOGRA_LOCATION IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUSYNONYM_ID IN AB_SYNONYM.SYNONYM_ID%TYPE )
    RETURN CONSTANTS.TYREFCURSOR;
   PROCEDURE EXISTZIPCODE( ISBZIPCODE IN AB_ZIP_CODE.ZIP_CODE%TYPE, ONUZIP_CODEID OUT AB_ZIP_CODE.ZIP_CODE_ID%TYPE );
   PROCEDURE GETRECORD( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUGEOGRAPLOCATIONID OUT AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, OSBADDRESS OUT AB_ADDRESS.ADDRESS%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ONUWAYTYPE OUT AB_ADDRESS.WAY_TYPE%TYPE, ONUWAYNUMBER OUT AB_ADDRESS.WAY_NUMBER%TYPE, OSBWAYLETTER OUT AB_ADDRESS.WAY_LETTER%TYPE, OSBWAYGEOSECTOR OUT AB_ADDRESS.WAY_GEO_SECTOR%TYPE, ONUCROSSWAYTYPE OUT AB_ADDRESS.CROSS_WAY_TYPE%TYPE, ONUCROSSWAYNUMBER OUT AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, OSBCROSSWAYLETTER OUT AB_ADDRESS.CROSS_WAY_LETTER%TYPE, OSBCROSSWAYGEOSECTOR OUT AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, ONUHOUSENUMBER OUT AB_ADDRESS.HOUSE_NUMBER%TYPE, OSBHOUSELETTER OUT AB_ADDRESS.HOUSE_LETTER%TYPE, OSBADDRESSCOMPLEMENT OUT AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, OSBDESCRIPTION OUT AB_ADDRESS.DESCRIPTION%TYPE, ONUZIPCODE OUT AB_ADDRESS.ZIP_CODE_ID%TYPE, OSBWAYDESCRIPTION OUT AB_WAY_TYPE.DESCRIPTION%TYPE, OSBCROSSDESCRIPTION OUT AB_WAY_TYPE.DESCRIPTION%TYPE, OSBPREFIXZIPCODE OUT GE_GEOGRA_LOCATION.PREFIX_ZIP_CODE%TYPE, OSBSUFIXZIPCODE OUT AB_ZIP_CODE.ZIP_CODE%TYPE, OSBWAYGEOSECDESCRIP OUT GE_GEOGRA_SECTOR.DESCRIPTION%TYPE, OSBCROSSGEOSECDESCRIP OUT GE_GEOGRA_SECTOR.DESCRIPTION%TYPE, ONUNEIGHBORTHOODID OUT AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE );
   PROCEDURE SETNEWPREMISEADDRESSEXIST( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBIS_MAIN IN AB_ADDRESS.IS_MAIN%TYPE := NULL );
   PROCEDURE INSADDRESS( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUWAY_TYPE IN AB_ADDRESS.WAY_TYPE%TYPE, INUWAY_NUMBER IN AB_ADDRESS.WAY_NUMBER%TYPE, ISBWAY_LETTER IN AB_ADDRESS.WAY_LETTER%TYPE, ISBWAY_GEO_SECTOR IN AB_ADDRESS.WAY_GEO_SECTOR%TYPE, INUCROSS_WAY_TYPE IN AB_ADDRESS.CROSS_WAY_TYPE%TYPE, INUCROSS_WAY_NUMBER IN AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, ISBCROSS_WAY_LETTER IN AB_ADDRESS.CROSS_WAY_LETTER%TYPE, ISBCROSS_WAY_GEO_SECTOR IN AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, INUHOUSE_NUMBER IN AB_ADDRESS.HOUSE_NUMBER%TYPE, ISBHOUSE_LETTER IN AB_ADDRESS.HOUSE_LETTER%TYPE, ISBADDRESS_COMPLEMENT IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, ISBIS_MAIN IN AB_ADDRESS.IS_MAIN%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE := NULL, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE := NULL );
   PROCEDURE INSADDRESS( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBADDRESS_COMPLEMENT IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, ISBIS_MAIN IN AB_ADDRESS.IS_MAIN%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE := NULL, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE := NULL );
   PROCEDURE UPDADDRESS( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, INUPREMISEID IN AB_ADDRESS.ESTATE_NUMBER%TYPE );
   PROCEDURE UPDADDRESS( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE );
   PROCEDURE UPDADDRESS( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, INUPREMISEID IN AB_ADDRESS.ESTATE_NUMBER%TYPE, INUNEIGHBORTHOOD IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE := NULL );
   PROCEDURE CHANGEPRDADDRAIRLINES( INUPRODUCTID IN NUMBER, INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE TURNALTERNFORMAINADDR( INUALTERNADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   FUNCTION FNUGETALLAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN NUMBER;
   FUNCTION FSBGETADDRLASTTOKEN( INUPARSERID IN NUMBER )
    RETURN VARCHAR2;
   FUNCTION FRFGETOWNERS( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN DAAB_OWNER_PREMISE.TYRFRECORDS;
   PROCEDURE REGISTEROWNER( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBIDENTIFICATION IN GE_SUBSCRIBER.IDENTIFICATION%TYPE, INUIDENT_TYPE IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE );
   PROCEDURE UPDINITCOUNTERLINES( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE GETDATAHOUSE( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUHOUSENUMBER OUT AB_ADDRESS.HOUSE_NUMBER%TYPE, OSBHOUSELETTER OUT AB_ADDRESS.HOUSE_LETTER%TYPE, ONUSEGMENT OUT AB_ADDRESS.SEGMENT_ID%TYPE );
   PROCEDURE UPDESTATENUMBER( INUIPARSER_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE );
   PROCEDURE GETESTATENUMBER( INUIPARSER_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUESTATENUMBER OUT AB_ADDRESS.ESTATE_NUMBER%TYPE );
   FUNCTION FRFGETALL_WAY_TYPES
    RETURN CONSTANTS.TYREFCURSOR;
   PROCEDURE INSERTSEGMENT( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, INUCROSS_WAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, INUCROSS_WAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBCROSS_LETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, INUNEIGHBORTHOODID IN AB_SEGMENTS.NEIGHBORHOOD_ID%TYPE, ONUSEGMENT_ID OUT AB_SEGMENTS.SEGMENTS_ID%TYPE );
   PROCEDURE ADDSYNONYMBYDOMAIN( INUMAINWAY IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, INUCROSSWAYINI IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, INUCROSSWAYEND IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, SBSYNONYMNAME IN AB_SYNONYM.DESCRIPTION%TYPE );
   PROCEDURE DELETESYNONYMBYWAY( INUMAINWAY IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, SBSYNONYMNAME IN AB_SYNONYM.DESCRIPTION%TYPE );
   FUNCTION FSBGETADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR2;
   PROCEDURE INSADDRESSWITHOUTPARSER( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUWAY_TYPE IN AB_ADDRESS.WAY_TYPE%TYPE, INUWAY_NUMBER IN AB_ADDRESS.WAY_NUMBER%TYPE, ISBWAY_LETTER IN AB_ADDRESS.WAY_LETTER%TYPE, ISBWAY_GEO_SECTOR IN AB_ADDRESS.WAY_GEO_SECTOR%TYPE, INUCROSS_WAY_TYPE IN AB_ADDRESS.CROSS_WAY_TYPE%TYPE, INUCROSS_WAY_NUMBER IN AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, ISBCROSS_WAY_LETTER IN AB_ADDRESS.CROSS_WAY_LETTER%TYPE, ISBCROSS_WAY_GEO_SECTOR IN AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, INUHOUSE_NUMBER IN AB_ADDRESS.HOUSE_NUMBER%TYPE, ISBHOUSE_LETTER IN AB_ADDRESS.HOUSE_LETTER%TYPE, ISBADDRESS_COMPLEMENT IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, ISBIS_MAIN IN AB_ADDRESS.IS_MAIN%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE := NULL, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE := NULL, ISBRURAL IN VARCHAR2 := NULL );
   PROCEDURE INSADDRESSWITHOUTPARSER( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ISBISURBAN IN VARCHAR2 := NULL );
   PROCEDURE INSADDWITHOUTPARONNOTFOUND( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ISBISURBAN IN GE_PARAMETER.VALUE%TYPE := NULL );
   FUNCTION FBLISDUPADDRESS( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBOLDADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN BOOLEAN;
   PROCEDURE VALIDATECADASTRALID( ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE, INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE := NULL );
   FUNCTION FSBGETCROSSWAYNUMBER( INUCROSSWAYNUMBER IN AB_ADDRESS.CROSS_WAY_NUMBER%TYPE )
    RETURN VARCHAR2;
   PROCEDURE GETMAINADDRBYANYID( INUADDRESSID IN AB_ADDRESS.ADDRESS%TYPE, ONUMAINADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE EXISTADDRESS( ISBADDRESS IN AB_ADDRESS.ADDRESS_PARSED%TYPE, INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_ADDRESS.WAY_TYPE%TYPE, INUWAY_NUMBER IN AB_ADDRESS.WAY_NUMBER%TYPE, ISBWAY_LETTER IN AB_ADDRESS.WAY_LETTER%TYPE, ISBWAY_GEO_SECTOR IN AB_ADDRESS.WAY_GEO_SECTOR%TYPE, INUCROSS_WAY_TYPE IN AB_ADDRESS.CROSS_WAY_TYPE%TYPE, INUCROSS_WAY_NUMBER IN AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, ISBCROSS_WAY_LETTER IN AB_ADDRESS.CROSS_WAY_LETTER%TYPE, ISBCROSS_WAY_GEO_SECTOR IN AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, INUHOUSE_NUMBER IN AB_ADDRESS.HOUSE_NUMBER%TYPE, ISBHOUSE_LETTER IN AB_ADDRESS.HOUSE_LETTER%TYPE, ISBADDRESS_COMPLEMENT IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE GETADDRESSDATA( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSDESC OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ONUNBHOODID OUT AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, OSBNBHOODDESC OUT GE_GEOGRA_LOCATION.DISPLAY_DESCRIPTION%TYPE, ONUGEOLOCID OUT AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, OSBGEOLOCDESC OUT GE_GEOGRA_LOCATION.DISPLAY_DESCRIPTION%TYPE );
   FUNCTION FBLINCLUDEASIGNMENTADDRESS4( INUADDRESSCODE IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN;
   PROCEDURE VALBASICDATA( INUADDRESSCODE IN AB_ADDRESS.ADDRESS_ID%TYPE );
   FUNCTION FNUGETDDRESSID( INUGEOGRALOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE;
   PROCEDURE INSADDRESSADDITIONALINFO( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUPREVIOUSVALUE IN AB_ADDRESS.PREVIOUS_VALUE%TYPE, ISBCOMMENT IN AB_ADDRESS.DESCRIPTION%TYPE, INUPREMISETYPEID IN AB_PREMISE.PREMISE_TYPE_ID%TYPE );
   PROCEDURE VALRURALURBANFLAG( ISBFLAG IN VARCHAR2, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE );
   PROCEDURE GETADDRCOORDINATES( NUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUCOORDINATEX OUT NUMBER, ONUCOORDINATEY OUT NUMBER );
   PROCEDURE GETADDRCOORDINATES( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBISURBAN IN AB_ADDRESS.IS_URBAN%TYPE, ONUCOORDINATEX OUT NUMBER, ONUCOORDINATEY OUT NUMBER );
   PROCEDURE GETINITIALFORMVALUES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ORFFORMVALUES OUT CONSTANTS.TYREFCURSOR );
   FUNCTION FNUBASEADDRBYCHILD( INUADDRESSCHILDID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE;
   PROCEDURE GETSTRATUMBYADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUUSEID OUT AB_SEGMENTS.CATEGORY_%TYPE, OSBUSEDESC OUT CATEGORI.CATEDESC%TYPE, ONUSTRATUMID OUT AB_SEGMENTS.SUBCATEGORY_%TYPE, OSBSTRATUMDESC OUT SUBCATEG.SUCADESC%TYPE );
   FUNCTION FNUGETCATEGORY( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN AB_SEGMENTS.CATEGORY_%TYPE;
   FUNCTION FNUGETSUBCATEGORY( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN AB_SEGMENTS.SUBCATEGORY_%TYPE;
   PROCEDURE INSADDRESSCOORDINATES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INULATDEGREE IN NUMBER, INULATMINUTES IN NUMBER, INULATDIRECTION IN NUMBER, INULONDEGREE IN NUMBER, INULONMINUTES IN NUMBER, INULONDIRECTION IN NUMBER );
   PROCEDURE GETADDRESSCOORDINATES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONULATDEGREE OUT NUMBER, ONULATMINUTES OUT NUMBER, ONULATDIRECTION OUT NUMBER, ONULONDEGREE OUT NUMBER, ONULONMINUTES OUT NUMBER, ONULONDIRECTION OUT NUMBER );
   FUNCTION FSBGETISURBAN( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR2;
   FUNCTION FSBGETISURBAN( ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE )
    RETURN VARCHAR2;
   PROCEDURE GETADDRESSTREE( INUFATHERADDRESSID IN AB_ADDRESS.FATHER_ADDRESS_ID%TYPE, IOTBADDRESS IN OUT GE_TYTBIDNUMBER, INUMAXCICLE IN NUMBER := 0 );
   PROCEDURE CHANGEADDRESSTYPE( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   FUNCTION FNUGETCICLFACT( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN NUMBER;
   FUNCTION FRFGETCHILDADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN CONSTANTS.TYREFCURSOR;
   FUNCTION FNUGETBASEADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN NUMBER;
   FUNCTION FSBISBASEADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR2;
   FUNCTION FBLISFATHERADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN;
   PROCEDURE VALASSRURALBASEADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE VALDESRURALBASEADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE VALFATHERADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUFATHERADDID IN AB_ADDRESS.FATHER_ADDRESS_ID%TYPE );
   PROCEDURE ASSRURALBASEADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUFATHERADDID IN AB_ADDRESS.FATHER_ADDRESS_ID%TYPE );
   PROCEDURE INSADDRESS( INUGEOGRAPLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBISURBAN IN AB_ADDRESS.IS_URBAN%TYPE := NULL, ISBSHAPE IN VARCHAR2, ISBVERIFIED IN AB_ADDRESS.VERIFIED%TYPE := 'N', ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE UPDSHAPEADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBSHAPE IN VARCHAR2 );
   PROCEDURE VALIDATEIDADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE DELETEADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE GETADDRESSBYID( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUPROCESSNUMBER OUT AB_ADDRESS.PROCESS_NUMBER%TYPE, ONUSEGMENTID OUT AB_ADDRESS.SEGMENT_ID%TYPE, ONUWAYID OUT AB_ADDRESS.WAY_ID%TYPE, ONUWAYTYPE OUT AB_ADDRESS.WAY_TYPE%TYPE, ONUWAYNUMBER OUT AB_ADDRESS.WAY_NUMBER%TYPE, OSBWAYLETTER OUT AB_ADDRESS.WAY_LETTER%TYPE, OSBWAYGEOSECTOR OUT AB_ADDRESS.WAY_GEO_SECTOR%TYPE, ONUCROSSWAYID OUT AB_ADDRESS.CROSS_WAY_ID%TYPE, ONUGEOGRAPLOCATIONID OUT AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ONUCROSSWAYTYPE OUT AB_ADDRESS.CROSS_WAY_TYPE%TYPE, ONUCROSSWAYNUMBER OUT AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, OSBCROSSWAYLETTER OUT AB_ADDRESS.CROSS_WAY_LETTER%TYPE, OSBCROSSWAYGEOSECT OUT AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, OSBADDRESS OUT AB_ADDRESS.ADDRESS%TYPE, OSBISURBAN OUT AB_ADDRESS.IS_URBAN%TYPE, ONUHOUSENUMBER OUT AB_ADDRESS.HOUSE_NUMBER%TYPE, OSBHOUSELETTER OUT AB_ADDRESS.HOUSE_LETTER%TYPE, OSBADDRESSCOMPLEMENT OUT AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ONUINSTALLEDLINES OUT AB_ADDRESS.INSTALLED_LINES%TYPE, ONUTRANSACTLINES OUT AB_ADDRESS.TRANSACT_LINES%TYPE, ONUINSTALLEDAIRLINES OUT AB_ADDRESS.INSTALLED_AIR_LINES%TYPE, ONUTRANSACTAIRLINES OUT AB_ADDRESS.TRANSACT_AIR_LINES%TYPE, ONUESTATENUMBER OUT AB_ADDRESS.ESTATE_NUMBER%TYPE, OSBISMAIN OUT AB_ADDRESS.IS_MAIN%TYPE, OSBACTIVE OUT AB_ADDRESS.ACTIVE%TYPE, OSBDESCRIPTION OUT AB_ADDRESS.DESCRIPTION%TYPE, ONUZIPCODEID OUT AB_ADDRESS.ZIP_CODE_ID%TYPE, ONUNEIGHBORTHOODID OUT AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, OSBCADASTRALID OUT AB_ADDRESS.CADASTRAL_ID%TYPE, ONUGEOCODEID OUT AB_ADDRESS.GEOCODE_ID%TYPE, ONUGRAMMARID OUT AB_ADDRESS.GRAMMAR_ID%TYPE, OSBEXTENDEDZIP OUT AB_ADDRESS.EXTENDED_ZIP%TYPE, OSBSHAPE OUT VARCHAR2, INUFATHERADDRESSID OUT AB_ADDRESS.FATHER_ADDRESS_ID%TYPE, OSBPREVIOUSVALUE OUT AB_ADDRESS.PREVIOUS_VALUE%TYPE, OSBISVALID OUT AB_ADDRESS.IS_VALID%TYPE );
   FUNCTION FNUGETCOOWNERSHIPBYADD( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN AB_PREMISE.COOWNERSHIP_RATIO%TYPE;
   PROCEDURE INSERTADDRESSBYSEG( INUSEGMENTID IN AB_SEGMENTS.SEGMENTS_ID%TYPE, INUHOUSENUMBER IN AB_ADDRESS.HOUSE_NUMBER%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE );
   FUNCTION FSBGETISVALID( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR;
   FUNCTION FSBGETISVERIFIED( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR;
   PROCEDURE VERIFYADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE GETSEGMENTSUBCATEGORY( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUSUBCATEGORYID OUT AB_SEGMENTS.CATEGORY_%TYPE );
   PROCEDURE DELUNUSEDADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBOTHERADDRESS IN VARCHAR2 );
END AB_BOADDRESS;
/


CREATE OR REPLACE PACKAGE BODY AB_BOADDRESS IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO237249';
   CNUMINUS_ONE_NOT_EXIST CONSTANT NUMBER := -1;
   CNUNOT_MAIN_ADDRESS CONSTANT NUMBER := 2322;
   CNUNOT_CHANGING_ADDRESS CONSTANT NUMBER := 2603;
   CNUADDRESS_WITH_ALTERN CONSTANT NUMBER := 1392;
   CNUADDRESS_NULL CONSTANT NUMBER := 10456;
   CNUBAD_SYMBOL CONSTANT NUMBER := 10455;
   CNUESTATE_NULL CONSTANT NUMBER := 10457;
   CNUDUP_MAIN_ADDRESS CONSTANT NUMBER := 10458;
   CNUDUP_ESTATE_ADDRESS CONSTANT NUMBER := 10459;
   CNUNOT_CHANGE_MAIN_ADDRESS CONSTANT NUMBER := 10530;
   CNUARE_THERE_PEND_REQUEST CONSTANT NUMBER := 10534;
   CNUINVALID_RANGE CONSTANT NUMBER := 451;
   CNUMAX_AIR_LINES CONSTANT NUMBER := 1930;
   CSBMAX_AIR_LINES CONSTANT VARCHAR2( 20 ) := 'MAX_AIR_LINES';
   CNUINSTALLED_NEGATIVE CONSTANT NUMBER := 2264;
   CNUAIR_INSTALLED_NEGATIVE CONSTANT NUMBER := 2265;
   CNUTRANSACT_NEGATIVE CONSTANT NUMBER := 2266;
   CNUAIR_TRANSACT_NEGATIVE CONSTANT NUMBER := 2267;
   CNUERR_10700 CONSTANT NUMBER( 5 ) := 10700;
   CNUERR_10701 CONSTANT NUMBER( 5 ) := 10701;
   CNUEXISTSCADASTALID CONSTANT NUMBER( 10 ) := 112802;
   CNUIS_URBAN_NULL_FLAG_VALUE CONSTANT NUMBER( 6 ) := 11521;
   CNUIS_URBAN_INVALID_FLAG_VALUE CONSTANT NUMBER( 6 ) := 11442;
   CNUSEGMENT_OR_HEIGHT_NULL CONSTANT NUMBER( 6 ) := 11543;
   CNURURAL_NOT_COORDINATES CONSTANT NUMBER( 6 ) := 11482;
   CNUCANT_COMPUTE_COORDINATES CONSTANT NUMBER( 6 ) := 11561;
   CNUMAX_LENGTH CONSTANT NUMBER := 32767;
   CSBYES CONSTANT VARCHAR2( 3 ) := GE_BOCONSTANTS.CSBYES;
   CSBNO CONSTANT VARCHAR2( 2 ) := GE_BOCONSTANTS.CSBNO;
   CNUNOWAIT CONSTANT NUMBER( 1 ) := 1;
   CNUMAXCONCU CONSTANT NUMBER( 3 ) := 100;
   CNUADDR_NOT_EXITS CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900363;
   CNUCOORDINATES CONSTANT NUMBER( 6 ) := 900409;
   CNUERR901246 CONSTANT NUMBER := 901246;
   CNUERR901173 CONSTANT NUMBER := 901173;
   CNUERR901174 CONSTANT NUMBER := 901174;
   CNUERR1802 CONSTANT NUMBER := 1802;
   CNUERR901247 CONSTANT NUMBER := 901247;
   CNUERR901248 CONSTANT NUMBER := 901248;
   CNUERR901249 CONSTANT NUMBER := 901249;
   CNUERR901517 CONSTANT NUMBER := 901517;
   CNUERR901739 CONSTANT NUMBER := 901739;
   CNUERROR_ADDR_WITH_REF CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 902023;
   CNUNULL_VALUE CONSTANT NUMBER := 7352;
   CSBADDRESS CONSTANT VARCHAR2( 25 ) := 'Direccion';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE VALIDATENULLAPP( INUADDRESSCODE IN AB_ADDRESS.ADDRESS_ID%TYPE );
   PROCEDURE VALIDATECADASTRALID( ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE, INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE := NULL )
    IS
      NUPARSERRESULT AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
      NUPARSERRESULT := AB_BCADDRESS.FNUFINDCADASTRAL( ISBCADASTRALID );
      IF INUADDRESSID IS NOT NULL THEN
         IF NUPARSERRESULT = INUADDRESSID THEN
            RETURN;
         END IF;
      END IF;
      IF NUPARSERRESULT != CNUMINUS_ONE_NOT_EXIST THEN
         ERRORS.SETERROR( CNUEXISTSCADASTALID, ISBCADASTRALID || '|' || NUPARSERRESULT || ']-[' || DAAB_ADDRESS.FSBGETADDRESS( NUPARSERRESULT ) );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETDDRESSID( INUGEOGRALOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE
    IS
      NUADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE := NULL;
      CURSOR CUGETADDRESS( NUGEOGRALOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, SBADDRESS IN AB_ADDRESS.ADDRESS%TYPE ) IS
SELECT /*+ INDEX( AB_ADDRESS IDX_AB_ADDRESS_09) */address_id
        FROM   ab_address
        WHERE  address      = sbAddress
          AND  geograp_location_id = nuGeograLocationId
          AND  is_main             = ge_boconstants.csbYES;
    BEGIN
      IF ( CUGETADDRESS%ISOPEN ) THEN
         CLOSE CUGETADDRESS;
      END IF;
      OPEN CUGETADDRESS( INUGEOGRALOCATIONID, ISBADDRESS );
      FETCH CUGETADDRESS
         INTO NUADDRESSID;
      IF ( CUGETADDRESS%NOTFOUND ) THEN
         CLOSE CUGETADDRESS;
         RETURN NULL;
      END IF;
      RETURN NUADDRESSID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUGETADDRESS%ISOPEN ) THEN
            CLOSE CUGETADDRESS;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUGETADDRESS%ISOPEN ) THEN
            CLOSE CUGETADDRESS;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VERIFYERROR( INUERRORCODE IN NUMBER )
    IS
    BEGIN
      IF NVL( INUERRORCODE, 0 ) != GE_BOCONSTANTS.CNUSUCCESS THEN
         RAISE EX.CONTROLLED_ERROR;
      END IF;
   END VERIFYERROR;
   FUNCTION FBLISDUPADDRESS( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBOLDADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN BOOLEAN
    IS
      NUDUMMY NUMBER;
      SBADDRESSPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUOLDADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUERROR NUMBER;
      SBMESSAGE VARCHAR2( 2000 );
      CURSOR CUADDRESS( INUGEOLOCID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESSPARSED IN AB_ADDRESS.ADDRESS_PARSED%TYPE ) IS
SELECT count('x')
        FROM ab_address
        WHERE geograp_location_id = inuGeoLocId
        AND address_parsed = isbAddressParsed;
      PROCEDURE CLOSECURSOR
       IS
       BEGIN
         IF CUADDRESS%ISOPEN THEN
            CLOSE CUADDRESS;
         END IF;
      END;
    BEGIN
      NUOLDADDRESSID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBOLDADDRESS, INUGEOLOCATIONID, NUERROR, SBMESSAGE );
      UT_JAVA.VALIDATEERROR( NUERROR, SBMESSAGE );
      SBADDRESSPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUOLDADDRESSID );
      OPEN CUADDRESS( INUGEOLOCATIONID, SBADDRESSPARSED );
      FETCH CUADDRESS
         INTO NUDUMMY;
      CLOSE CUADDRESS;
      IF NUDUMMY > 1 THEN
         RETURN TRUE;
      END IF;
      RETURN FALSE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSOR;
         RAISE;
      WHEN OTHERS THEN
         CLOSECURSOR;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLISDUPADDRESS;
   PROCEDURE REGISTERLOG( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUMESSAGEID IN GE_MESSAGE.MESSAGE_ID%TYPE )
    IS
      RCADDRESSCHANGE DAAB_ADDRESS_CHANGE.STYAB_ADDRESS_CHANGE;
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      CNUNEGERRORSTATUS AB_CHANGE_STATUS.CHANGE_STATUS_ID%TYPE := 8;
    BEGIN
      RCADDRESS := DAAB_ADDRESS.FRCGETRECORD( INUADDRESSID );
      RCADDRESSCHANGE.USER_NAME := UT_SESSION.GETUSER;
      RCADDRESSCHANGE.TERMINAL := UT_SESSION.GETTERMINAL;
      RCADDRESSCHANGE.OLD_ADDRESS_ID := RCADDRESS.ADDRESS_ID;
      RCADDRESSCHANGE.OLD_ADDRESS := RCADDRESS.ADDRESS;
      RCADDRESSCHANGE.NEW_ADDRESS_ID := RCADDRESS.ADDRESS_ID;
      RCADDRESSCHANGE.NEW_ADDRESS := RCADDRESS.ADDRESS;
      RCADDRESSCHANGE.ERROR_MESSAGE := REPLACE( DAGE_MESSAGE.FSBGETDESCRIPTION( INUMESSAGEID ), '%s1', INUADDRESSID );
      RCADDRESSCHANGE.ERROR_CODE := INUMESSAGEID;
      RCADDRESSCHANGE.CHANGE_STATUS_ID := CNUNEGERRORSTATUS;
      RCADDRESSCHANGE.CHANGE_DATE := UT_DATE.FDTSYSDATE;
      RCADDRESSCHANGE.ADDRESS_CHANGE_ID := AB_BOSEQUENCE.FNUNEXTADDRESS_CHANGE;
      UT_TRACE.TRACE( 'id del log ' || RCADDRESSCHANGE.ADDRESS_CHANGE_ID, 10 );
      DAAB_ADDRESS_CHANGE.INSRECORD( RCADDRESSCHANGE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSNEWMAINADDRESS( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ISBISURBAN IN VARCHAR2 )
    IS
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
      SBPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUERRCODE NUMBER;
      SBERRMESSAGE VARCHAR2( 2000 );
      NUZIPCODE NUMBER;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
      ONUADDRESSID := AB_BOSEQUENCE.FNUNEXTADDRESS;
      AB_BOADDRESSPARSER.INSERTADDRESS( ISBADDRESS, INUGEOLOCATIONID, ONUADDRESSID, INUNEIGHBORHOODID, SBPARSED, NUERRCODE, SBERRMESSAGE, ISBISURBAN );
      UT_JAVA.VALIDATEERROR( NUERRCODE, SBERRMESSAGE );
      DAAB_ADDRESS.UPDZIP_CODE_ID( ONUADDRESSID, NUZIPCODE );
      NUESTATENUMBER := AB_BOPREMISE.FNUINSERTPREMISE;
      DAAB_ADDRESS.UPDESTATE_NUMBER( ONUADDRESSID, NUESTATENUMBER );
      DAAB_ADDRESS.UPDIS_MAIN( ONUADDRESSID, CSBYES );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSNEWMAINADDRESS;
   FUNCTION FBLARETHEREMAINADDR( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBOLDADDRPARSED IN AB_ADDRESS.ADDRESS_PARSED%TYPE, ONUOLDADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN
    IS
      CURSOR CUADDRESS( INUGEOLOCID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESSPARSED IN AB_ADDRESS.ADDRESS_PARSED%TYPE ) IS
SELECT address_id
        FROM ab_address
        WHERE geograp_location_id = inuGeoLocId
        AND address_parsed = isbAddressParsed
        AND is_main = csbYES;
      PROCEDURE CLOSECURSOR
       IS
       BEGIN
         IF CUADDRESS%ISOPEN THEN
            CLOSE CUADDRESS;
         END IF;
      END;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
      OPEN CUADDRESS( INUGEOLOCATIONID, ISBOLDADDRPARSED );
      FETCH CUADDRESS
         INTO ONUOLDADDRESSID;
      IF CUADDRESS%FOUND THEN
         CLOSE CUADDRESS;
         RETURN TRUE;
       ELSE
         CLOSE CUADDRESS;
         RETURN FALSE;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSOR;
         RAISE;
      WHEN OTHERS THEN
         CLOSECURSOR;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLARETHEREMAINADDR;
   FUNCTION FNUEXTADDRESSNOMAIN( INUGEOGRAP_LOCATION_ID IN NUMBER, INUESTATE_NUMBER IN NUMBER )
    RETURN NUMBER
    IS
      NUNOMAIN NUMBER := 0;
      SBNOMAIN GE_PARAMETER.VALUE%TYPE;
      CURSOR CUADDRESSNOMAIN IS
SELECT Count('x')
            FROM AB_ADDRESS A
            WHERE (upper(A.IS_MAIN) = upper(sbNoMain))
              AND (A.GEOGRAP_LOCATION_ID = inuGEOGRAP_LOCATION_ID)
              AND (A.ESTATE_NUMBER = inuESTATE_NUMBER);
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF CUADDRESSNOMAIN%ISOPEN THEN
            CLOSE CUADDRESSNOMAIN;
         END IF;
      END;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );
      SBNOMAIN := CSBNO;
      OPEN CUADDRESSNOMAIN;
      FETCH CUADDRESSNOMAIN
         INTO NUNOMAIN;
      CLOSE CUADDRESSNOMAIN;
      RETURN ( NUNOMAIN );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUEXTADDRESSNOMAIN;
   FUNCTION FNUGETMAINPARSERID( INUGEOGRALOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE
    IS
      NUPARSERRESULT AB_ADDRESS.ADDRESS_ID%TYPE;
      NUPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
      SBYES GE_PARAMETER.VALUE%TYPE;
      SBADDRPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      SBSUCCMESSAGE VARCHAR2( 512 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      CURSOR CUMAINADDRESS( INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE, ISBISMAIN IN AB_ADDRESS.IS_MAIN%TYPE ) IS
SELECT address_id
        FROM ab_address
        Where ab_address.estate_number = inuEstateNumber
        AND ab_address.is_main = isbIsMain;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF CUMAINADDRESS%ISOPEN THEN
            CLOSE CUMAINADDRESS;
         END IF;
      END;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRALOCATIONID );
      SBYES := CSBYES;
      AB_BOPARSERWRAP.CHECKSYNTAX( INUGEOGRALOCATIONID, ISBADDRESS );
      AB_BOPARSERWRAP.CHECKIFADDRESSNOTEXISTSINDB( INUGEOGRALOCATIONID, ISBADDRESS, NUPARSERID );
      NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( NUPARSERID );
      OPEN CUMAINADDRESS( NUESTATENUMBER, SBYES );
      FETCH CUMAINADDRESS
         INTO NUPARSERRESULT;
      IF CUMAINADDRESS%NOTFOUND THEN
         CLOSE CUMAINADDRESS;
         ERRORS.SETERROR( CNUNOT_MAIN_ADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      CLOSE CUMAINADDRESS;
      RETURN NUPARSERRESULT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETMAINPARSERID;
   PROCEDURE GETMAINADDRBYANYID( INUADDRESSID IN AB_ADDRESS.ADDRESS%TYPE, ONUMAINADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
      CURSOR CUMAINADDRESS( INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE ) IS
SELECT address_id
        FROM ab_address
        Where ab_address.estate_number = inuEstateNumber
        AND ab_address.is_main = csbYES;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF CUMAINADDRESS%ISOPEN THEN
            CLOSE CUMAINADDRESS;
         END IF;
      END;
    BEGIN
      NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUADDRESSID );
      OPEN CUMAINADDRESS( NUESTATENUMBER );
      FETCH CUMAINADDRESS
         INTO ONUMAINADDRESSID;
      IF CUMAINADDRESS%NOTFOUND THEN
         CLOSE CUMAINADDRESS;
         ERRORS.SETERROR( CNUNOT_MAIN_ADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      CLOSE CUMAINADDRESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETMAINADDRBYANYID;
   PROCEDURE GETANYMAINPARSERID( INUGEOGRALOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ONUMAINPARSERID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ONUALTERNPARSERID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ISBISURBAN IN VARCHAR2 := NULL )
    IS
      NUPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
      SBYES GE_PARAMETER.VALUE%TYPE;
      SBADDRPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      SBSUCCMESSAGE VARCHAR2( 512 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUZIPCODE NUMBER;
      CURSOR CUMAINADDRESS( INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE, ISBISMAIN IN AB_ADDRESS.IS_MAIN%TYPE ) IS
SELECT address_id
        FROM ab_address
        Where ab_address.estate_number = inuEstateNumber
        AND ab_address.is_main = isbIsMain;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF CUMAINADDRESS%ISOPEN THEN
            CLOSE CUMAINADDRESS;
         END IF;
      END;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRALOCATIONID );
      SBYES := CSBYES;
      NUPARSERID := FNUGETDDRESSID( INUGEOGRALOCATIONID, ISBADDRESS );
      IF NUPARSERID IS NOT NULL THEN
         UT_TRACE.TRACE( 'GetAnyMainParserId Retorna id de direccion sin parseo nuParserId:' || NUPARSERID, 1 );
         ONUMAINPARSERID := NUPARSERID;
         RETURN;
      END IF;
      AB_BOPARSERWRAP.CHECKSYNTAX( INUGEOGRALOCATIONID, ISBADDRESS );
      NUPARSERID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBADDRESS, INUGEOGRALOCATIONID, NUERRORCODE, SBERRORMESSAGE );
      UT_JAVA.VALIDATEERROR( NUERRORCODE, SBERRORMESSAGE );
      IF DAAB_ADDRESS.FSBGETIS_MAIN( NUPARSERID ) = SBYES THEN
         ONUMAINPARSERID := NUPARSERID;
         ONUALTERNPARSERID := NULL;
         RETURN;
      END IF;
      ONUALTERNPARSERID := NUPARSERID;
      NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( NUPARSERID );
      OPEN CUMAINADDRESS( NUESTATENUMBER, SBYES );
      FETCH CUMAINADDRESS
         INTO NUPARSERID;
      IF CUMAINADDRESS%NOTFOUND THEN
         CLOSE CUMAINADDRESS;
         ERRORS.SETERROR( CNUNOT_MAIN_ADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      CLOSE CUMAINADDRESS;
      ONUMAINPARSERID := NUPARSERID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETANYMAINPARSERID;
   FUNCTION FNUGETPARSERIDWITHADDRESS( INUGEOGRALOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE
    IS
      NUPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBADDRPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      SBSUCCMESSAGE VARCHAR2( 512 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRALOCATIONID );
      AB_BOPARSERWRAP.CHECKSYNTAX( INUGEOGRALOCATIONID, ISBADDRESS );
      AB_BOPARSERWRAP.CHECKIFADDRESSNOTEXISTSINDB( INUGEOGRALOCATIONID, ISBADDRESS, NUPARSERID );
      RETURN ( NUPARSERID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETPARSERIDWITHADDRESS;
   PROCEDURE FRFGETPREMISEADDRESS( INUPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, IRFPREMISEADDRESSID OUT TYRFADDRESSID )
    IS
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
    BEGIN
      NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUPARSERID );
      OPEN IRFPREMISEADDRESSID FOR SELECT *
        FROM ab_address
        WHERE estate_number=nuEstateNumber
        ORDER BY is_main desc;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FRFGETPREMISEADDRESS;
   PROCEDURE FRFGETPREMISESEGMENTS( INUPARSERID IN AB_ADDRESS.ADDRESS_ID%TYPE, IRFPREMISESEGMENTS OUT TYRFPREMISESEGMENTS )
    IS
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
    BEGIN
      NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUPARSERID );
      OPEN IRFPREMISESEGMENTS FOR SELECT distinct segm.segments_id, addr.is_main
        FROM ab_address addr,
             ab_segments segm
        WHERE addr.segment_id = segm.segments_id
        AND addr.estate_number=nuEstateNumber
        ORDER BY addr.is_main desc;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FRFGETPREMISESEGMENTS;
   FUNCTION FBLESTATENUMBER( INUESTATENUMBER IN NUMBER )
    RETURN BOOLEAN
    IS
      CURSOR CUESTATENUMBER( NUESTATENUMBER IN NUMBER ) IS
SELECT COUNT('X') FROM ab_address
        WHERE ab_address.estate_number = nuEstateNumber;
      NUEXIST NUMBER;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF CUESTATENUMBER%ISOPEN THEN
            CLOSE CUESTATENUMBER;
         END IF;
      END;
    BEGIN
      OPEN CUESTATENUMBER( INUESTATENUMBER );
      FETCH CUESTATENUMBER
         INTO NUEXIST;
      IF NUEXIST > 0 THEN
         CLOSE CUESTATENUMBER;
         RETURN TRUE;
      END IF;
      CLOSE CUESTATENUMBER;
      RETURN FALSE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLESTATENUMBER;
   FUNCTION FBODELADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      DAAB_ADDRESS.DELRECORD( INUADDRESSID );
      RETURN TRUE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RETURN FALSE;
      WHEN OTHERS THEN
         RETURN FALSE;
   END FBODELADDRESS;
   FUNCTION FNUGETNEWADDRESSID( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN AB_ADDRESS_CHANGE.NEW_ADDRESS_ID%TYPE
    IS
      CURSOR CUNEWADDRESSID IS
SELECT new_address_id
        FROM ab_address_change ab_adch
        WHERE ab_adch.old_address_id = inuAddressId;
      NURESULT AB_ADDRESS_CHANGE.NEW_ADDRESS_ID%TYPE;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF CUNEWADDRESSID%ISOPEN THEN
            CLOSE CUNEWADDRESSID;
         END IF;
      END;
    BEGIN
      OPEN CUNEWADDRESSID;
      FETCH CUNEWADDRESSID
         INTO NURESULT;
      IF CUNEWADDRESSID%NOTFOUND THEN
         CLOSE CUNEWADDRESSID;
         RETURN NULL;
      END IF;
      CLOSE CUNEWADDRESSID;
      RETURN NURESULT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RETURN NULL;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RETURN NULL;
   END FNUGETNEWADDRESSID;
   PROCEDURE DELADDRESS( INUADDRESSID IN NUMBER )
    IS
      BLADDRESSISMAIN BOOLEAN;
      SBADDRESS VARCHAR2( 300 );
    BEGIN
      BLADDRESSISMAIN := ( DAAB_ADDRESS.FSBGETIS_MAIN( INUADDRESSID ) = CSBYES );
      IF ( BLADDRESSISMAIN = TRUE ) AND FNUEXTADDRESSNOMAIN( DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( INUADDRESSID ), DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUADDRESSID ) ) > 0 THEN
         ERRORS.SETERROR( CNUADDRESS_WITH_ALTERN );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF NOT FBODELADDRESS( INUADDRESSID ) THEN
         SBADDRESS := '[' || INUADDRESSID || ' - ' || DAAB_ADDRESS.FSBGETADDRESS_PARSED( INUADDRESSID ) || ']';
         GE_BOERRORS.SETERRORCODEARGUMENT( CNUERROR_ADDR_WITH_REF, SBADDRESS );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DELADDRESS;
   PROCEDURE VALESTATENOTNULL( INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE )
    IS
    BEGIN
      IF INUESTATENUMBER IS NULL THEN
         ERRORS.SETERROR( CNUESTATE_NULL );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALESTATENOTNULL;
   PROCEDURE VALADDRESSISNOTNULL( ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    IS
    BEGIN
      IF ISBADDRESS IS NULL THEN
         ERRORS.SETERROR( CNUADDRESS_NULL );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALADDRESSISNOTNULL;
   PROCEDURE VALDUPMAINADDRESS( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    IS
      NUPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBADDRESSPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      SBDUMMY VARCHAR2( 1 );
      CURSOR CUADDRESS( ISBADDRESSPARSED IN AB_ADDRESS.ADDRESS_PARSED%TYPE, INUGEOLOCID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE ) IS
SELECT 'X'
        FROM ab_address
        WHERE address_parsed=isbAddressParsed
        AND geograp_location_id = inuGeoLocId
        AND is_main = csbYES
        AND rownum=1;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF CUADDRESS%ISOPEN THEN
            CLOSE CUADDRESS;
         END IF;
      END;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
      NUPARSERID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBADDRESS, INUGEOLOCATIONID, NUERRORCODE, SBERRORMESSAGE );
      IF ( NUPARSERID != CNUMINUS_ONE_NOT_EXIST ) THEN
         SBADDRESSPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUPARSERID );
         OPEN CUADDRESS( SBADDRESSPARSED, INUGEOLOCATIONID );
         FETCH CUADDRESS
            INTO SBDUMMY;
         IF CUADDRESS%FOUND THEN
            CLOSE CUADDRESS;
            ERRORS.SETERROR( CNUDUP_MAIN_ADDRESS );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALDUPMAINADDRESS;
   PROCEDURE VALDUPESTATEADDRESS( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE )
    IS
      NUPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBADDRESSPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      SBDUMMY VARCHAR2( 1 );
      NUERRORCODE NUMBER;
      SBERRORMESSAGE VARCHAR2( 2000 );
      CURSOR CUADDRESS( INUGEOLOCID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESSPARSED IN AB_ADDRESS.ADDRESS_PARSED%TYPE, INUESTATE IN AB_ADDRESS.ESTATE_NUMBER%TYPE ) IS
SELECT 'X'
        FROM ab_address
        WHERE address_parsed = isbAddressParsed
        AND geograp_location_id = inuGeoLocId
        AND estate_number = inuEstate
        AND rownum=1;
      PROCEDURE CLOSECURSORS
       IS
       BEGIN
         IF CUADDRESS%ISOPEN THEN
            CLOSE CUADDRESS;
         END IF;
      END;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
      NUPARSERID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBADDRESS, INUGEOLOCATIONID, NUERRORCODE, SBERRORMESSAGE );
      IF ( NUPARSERID != CNUMINUS_ONE_NOT_EXIST ) THEN
         SBADDRESSPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUPARSERID );
         OPEN CUADDRESS( INUGEOLOCATIONID, SBADDRESSPARSED, INUESTATENUMBER );
         FETCH CUADDRESS
            INTO SBDUMMY;
         IF CUADDRESS%FOUND THEN
            CLOSE CUADDRESS;
            ERRORS.SETERROR( CNUDUP_ESTATE_ADDRESS );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         CLOSE CUADDRESS;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSORS;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSECURSORS;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALDUPESTATEADDRESS;
   PROCEDURE VALMAXPREMISEAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      NUMAXAIRLINES NUMBER( 4 );
    BEGIN
      NUMAXAIRLINES := GE_BOPARAMETER.FNUGET( CSBMAX_AIR_LINES );
      IF NUMAXAIRLINES < FNUGETALLAIRLINES( INUADDRESSID ) THEN
         ERRORS.SETERROR( CNUMAX_AIR_LINES, NUMAXAIRLINES );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALMAXPREMISEAIRLINES;
   PROCEDURE INCINSTALLEDLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      DAAB_ADDRESS.LOCKBYPK( INUADDRESSID, RCADDRESS );
      UT_TRACE.TRACE( 'Incrementando L Instaladas, Cant [' || RCADDRESS.INSTALLED_LINES || ']' );
      RCADDRESS.INSTALLED_LINES := NVL( RCADDRESS.INSTALLED_LINES, 0 ) + 1;
      DAAB_ADDRESS.UPDRECORD( RCADDRESS );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INCINSTALLEDLINES;
   PROCEDURE DECINSTALLEDLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      DAAB_ADDRESS.LOCKBYPK( INUADDRESSID, RCADDRESS );
      RCADDRESS.INSTALLED_LINES := RCADDRESS.INSTALLED_LINES - 1;
      IF RCADDRESS.INSTALLED_LINES < 0 THEN
         RCADDRESS.INSTALLED_LINES := 0;
         REGISTERLOG( INUADDRESSID, CNUINSTALLED_NEGATIVE );
      END IF;
      DAAB_ADDRESS.UPDRECORD( RCADDRESS );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DECINSTALLEDLINES;
   PROCEDURE INCINSTALLEDAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      DAAB_ADDRESS.LOCKBYPK( INUADDRESSID, RCADDRESS );
      UT_TRACE.TRACE( 'Incrementando L Aereas, Cant [' || RCADDRESS.INSTALLED_AIR_LINES || ']' );
      RCADDRESS.INSTALLED_AIR_LINES := NVL( RCADDRESS.INSTALLED_AIR_LINES, 0 ) + 1;
      DAAB_ADDRESS.UPDRECORD( RCADDRESS );
      INCINSTALLEDLINES( INUADDRESSID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INCINSTALLEDAIRLINES;
   PROCEDURE DECINSTALLEDAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      DAAB_ADDRESS.LOCKBYPK( INUADDRESSID, RCADDRESS );
      RCADDRESS.INSTALLED_AIR_LINES := RCADDRESS.INSTALLED_AIR_LINES - 1;
      IF RCADDRESS.INSTALLED_AIR_LINES < 0 THEN
         RCADDRESS.INSTALLED_AIR_LINES := 0;
         REGISTERLOG( INUADDRESSID, CNUAIR_INSTALLED_NEGATIVE );
      END IF;
      DAAB_ADDRESS.UPDRECORD( RCADDRESS );
      DECINSTALLEDLINES( INUADDRESSID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DECINSTALLEDAIRLINES;
   PROCEDURE INCTRANSACLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      DAAB_ADDRESS.LOCKBYPK( INUADDRESSID, RCADDRESS );
      RCADDRESS.TRANSACT_LINES := NVL( RCADDRESS.TRANSACT_LINES, 0 ) + 1;
      DAAB_ADDRESS.UPDRECORD( RCADDRESS );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INCTRANSACLINES;
   PROCEDURE DECTRANSACLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      DAAB_ADDRESS.LOCKBYPK( INUADDRESSID, RCADDRESS );
      UT_TRACE.TRACE( 'Retirando una transaccion, Cant [' || RCADDRESS.TRANSACT_LINES || ']' );
      RCADDRESS.TRANSACT_LINES := NVL( RCADDRESS.TRANSACT_LINES, 0 ) - 1;
      IF RCADDRESS.TRANSACT_LINES < 0 THEN
         RCADDRESS.TRANSACT_LINES := 0;
         REGISTERLOG( INUADDRESSID, CNUTRANSACT_NEGATIVE );
      END IF;
      DAAB_ADDRESS.UPDRECORD( RCADDRESS );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DECTRANSACLINES;
   PROCEDURE INCTRANSACAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      DAAB_ADDRESS.LOCKBYPK( INUADDRESSID, RCADDRESS );
      RCADDRESS.TRANSACT_AIR_LINES := NVL( RCADDRESS.TRANSACT_AIR_LINES, 0 ) + 1;
      DAAB_ADDRESS.UPDRECORD( RCADDRESS );
      INCTRANSACLINES( INUADDRESSID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INCTRANSACAIRLINES;
   PROCEDURE DECTRANSACAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      DAAB_ADDRESS.LOCKBYPK( INUADDRESSID, RCADDRESS );
      RCADDRESS.TRANSACT_AIR_LINES := NVL( RCADDRESS.TRANSACT_AIR_LINES, 0 ) - 1;
      IF RCADDRESS.TRANSACT_AIR_LINES < 0 THEN
         RCADDRESS.TRANSACT_AIR_LINES := 0;
         REGISTERLOG( INUADDRESSID, CNUAIR_TRANSACT_NEGATIVE );
      END IF;
      DAAB_ADDRESS.UPDRECORD( RCADDRESS );
      DECTRANSACLINES( INUADDRESSID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DECTRANSACAIRLINES;
   PROCEDURE EXISTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, ISBDESCRIPTION IN AB_WAY_BY_LOCATION.DESCRIPTION%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, BLEXIST OUT BOOLEAN, ONUWAY_BY_LOCATION_ID OUT AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE )
    IS
      CURSOR CUAB_WAY_BY_LOCATION IS
SELECT  WAY_BY_LOCATION_ID
        FROM    ab_way_by_location
        WHERE   WAY_TYPE_ID          = inuWay_type
        AND     GEOGRAP_LOCATION_ID  = inuGeograp_Location_ID
        AND     nvl(WAY_NUMBER,0)    = nvl(inuWay_number,0)
        AND     nvl(LETTERS_WAY, '-') = nvl(isbLetters_Way,'-')
        AND     rownum               = 1;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );
      BLEXIST := FALSE;
      IF ( CUAB_WAY_BY_LOCATION%ISOPEN ) THEN
         CLOSE CUAB_WAY_BY_LOCATION;
      END IF;
      OPEN CUAB_WAY_BY_LOCATION;
      FETCH CUAB_WAY_BY_LOCATION
         INTO ONUWAY_BY_LOCATION_ID;
      IF ( CUAB_WAY_BY_LOCATION%FOUND ) THEN
         BLEXIST := TRUE;
      END IF;
      CLOSE CUAB_WAY_BY_LOCATION;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXISTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, BLEXIST OUT BOOLEAN, ONUWAY_BY_LOCATION_ID OUT AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE )
    IS
      CURSOR CUAB_WAY_BY_LOCATION IS
SELECT  WAY_BY_LOCATION_ID
        FROM    ab_way_by_location
        WHERE   WAY_TYPE_ID          = inuWay_type
        AND     GEOGRAP_LOCATION_ID  = inuGeograp_Location_ID
        AND     nvl(WAY_NUMBER,0)    = nvl(inuWay_number,0)
        AND     nvl(LETTERS_WAY, '-') = nvl(isbLetters_Way,'-')
        AND     rownum               = 1;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );
      BLEXIST := FALSE;
      IF ( CUAB_WAY_BY_LOCATION%ISOPEN ) THEN
         CLOSE CUAB_WAY_BY_LOCATION;
      END IF;
      OPEN CUAB_WAY_BY_LOCATION;
      FETCH CUAB_WAY_BY_LOCATION
         INTO ONUWAY_BY_LOCATION_ID;
      BLEXIST := CUAB_WAY_BY_LOCATION%FOUND;
      CLOSE CUAB_WAY_BY_LOCATION;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSERTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, ISBDESCRIPTION IN AB_WAY_BY_LOCATION.DESCRIPTION%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, ONUWAY_BY_LOCATION_ID OUT AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE )
    IS
      BLEXIST BOOLEAN := FALSE;
      RCWAY_BY_LOCATION DAAB_WAY_BY_LOCATION.STYAB_WAY_BY_LOCATION;
    BEGIN
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );
      EXISTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUWAY_TYPE, ISBDESCRIPTION, INUWAY_NUMBER, ISBLETTERS_WAY, BLEXIST, ONUWAY_BY_LOCATION_ID );
      IF ( NOT BLEXIST ) THEN
         RCWAY_BY_LOCATION.WAY_BY_LOCATION_ID := AB_BOSEQUENCE.FNUNEXTWAY_BY_LOCATION;
         RCWAY_BY_LOCATION.GEOGRAP_LOCATION_ID := INUGEOGRAP_LOCATION_ID;
         RCWAY_BY_LOCATION.WAY_TYPE_ID := INUWAY_TYPE;
         RCWAY_BY_LOCATION.DESCRIPTION := ISBDESCRIPTION;
         RCWAY_BY_LOCATION.WAY_NUMBER := INUWAY_NUMBER;
         RCWAY_BY_LOCATION.LETTERS_WAY := ISBLETTERS_WAY;
         DAAB_WAY_BY_LOCATION.INSRECORD( RCWAY_BY_LOCATION );
         ONUWAY_BY_LOCATION_ID := RCWAY_BY_LOCATION.WAY_BY_LOCATION_ID;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXISTWAY_TYPE( ISBDESCRIPTION IN AB_WAY_TYPE.DESCRIPTION%TYPE, ONUWAY_TYPE_ID OUT AB_WAY_TYPE.WAY_TYPE_ID%TYPE )
    IS
      CURSOR CUWAY_TYPE IS
SELECT Way_type_id
        FROM   ab_Way_type
        WHERE  upper(description) = upper(isbDescription)
        AND    rownum             = 1;
    BEGIN
      IF ( CUWAY_TYPE%ISOPEN ) THEN
         CLOSE CUWAY_TYPE;
      END IF;
      OPEN CUWAY_TYPE;
      FETCH CUWAY_TYPE
         INTO ONUWAY_TYPE_ID;
      IF ( CUWAY_TYPE%NOTFOUND ) THEN
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      CLOSE CUWAY_TYPE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSE CUWAY_TYPE;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSE CUWAY_TYPE;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRFGETWAY_TYPES
    RETURN DAAB_WAY_TYPE.TYRFRECORDS
    IS
    BEGIN
      RETURN DAAB_WAY_TYPE.FRFGETRECORDS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRFGETWAY_TYPES( INUWAYTYPEPRINCIPAL IN AB_WAY_TYPE.WAY_TYPE_ID%TYPE )
    RETURN DAAB_WAY_TYPE.TYRFRECORDS
    IS
      CUWAY_TYPE DAAB_WAY_TYPE.TYRFRECORDS;
    BEGIN
      OPEN CUWAY_TYPE FOR SELECT AB_Way_type.*, AB_Way_type.rowid
            FROM   AB_Way_type
            WHERE  way_type_id <> inuWayTypePrincipal;
      RETURN CUWAY_TYPE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CONSTANTS.CNURECORD_NOT_EXIST, DAAB_WAY_TYPE.FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXISTTOKEN_HIERARCHY( ISBTOKEN_SYNONYM IN AB_TOKEN_SYNONYM.TOKEN_SYNONYM%TYPE, OSBTOKEN_HIERARCHY OUT AB_TOKEN_SYNONYM.TOKEN_HIERARCHY_ID%TYPE )
    IS
      CURSOR CUTOKEN_SYNONYM IS
SELECT Token_Hierarchy_id
        FROM   ab_Token_Synonym
        WHERE  upper(token_synonym) = upper(isbToken_synonym)
        AND    rownum               = 1;
    BEGIN
      IF ( CUTOKEN_SYNONYM%ISOPEN ) THEN
         CLOSE CUTOKEN_SYNONYM;
      END IF;
      OPEN CUTOKEN_SYNONYM;
      FETCH CUTOKEN_SYNONYM
         INTO OSBTOKEN_HIERARCHY;
      IF ( CUTOKEN_SYNONYM%NOTFOUND ) THEN
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      CLOSE CUTOKEN_SYNONYM;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSE CUTOKEN_SYNONYM;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSE CUTOKEN_SYNONYM;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRFGETTOKEN_HIERARCHYS
    RETURN DAAB_TOKEN_HIERARCHY.TYRFRECORDS
    IS
    BEGIN
      RETURN DAAB_TOKEN_HIERARCHY.FRFGETRECORDS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRFGETWAYSYNONYMS( INUGEOGRA_LOCATION IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE )
    RETURN CONSTANTS.TYREFCURSOR
    IS
      CUWAY_SYNONYM CONSTANTS.TYREFCURSOR;
    BEGIN
      OPEN CUWAY_SYNONYM FOR SELECT   AB_Way_synonym.*, AB_Way_synonym.rowid,
                     ab_way_by_location.description WayByLocation,
                     ab_way_by_location.way_number,
                     ab_way_by_location.letters_way,
                     ab_synonym.description Synonyms,
                     ab_way_type.description Way_type_Description,
                     ab_way_type.way_type_id Way_type_id
            FROM     AB_Way_synonym, ab_synonym, ab_way_by_location, ab_way_type
            WHERE    AB_Way_synonym.way_id     = ab_way_by_location.way_by_location_id
            AND      AB_Way_synonym.synonym_id = ab_synonym.synonym_id
            AND      ab_way_by_location.geograp_location_id = inuGeogra_location
            AND      ab_synonym.geograp_location_id         = inuGeogra_location
            AND      ab_way_by_location.way_type_id  = ab_way_type.way_type_id
            ORDER BY ab_synonym.description;
      RETURN CUWAY_SYNONYM;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CONSTANTS.CNURECORD_NOT_EXIST, DAAB_WAY_SYNONYM.FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRFGETWAYSYNONYMS( INUGEOGRA_LOCATION IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUSYNONYM_ID IN AB_SYNONYM.SYNONYM_ID%TYPE )
    RETURN CONSTANTS.TYREFCURSOR
    IS
      CUWAY_SYNONYM CONSTANTS.TYREFCURSOR;
    BEGIN
      OPEN CUWAY_SYNONYM FOR SELECT   AB_Way_synonym.*, AB_Way_synonym.rowid,
                     ab_way_by_location.description WayByLocation,
                     ab_way_by_location.way_number,
                     ab_way_by_location.letters_way,
                     ab_synonym.description Synonyms,
                     ab_way_type.description Way_type_Description,
                     ab_way_type.way_type_id Way_type_id
            FROM     AB_Way_synonym, ab_synonym, ab_way_by_location, ab_way_type
            WHERE    AB_Way_synonym.way_id     = ab_way_by_location.way_by_location_id
            AND      AB_Way_synonym.synonym_id = ab_synonym.synonym_id
            AND      ab_way_by_location.geograp_location_id = inuGeogra_location
            AND      ab_synonym.geograp_location_id         = inuGeogra_location
            AND      ab_way_by_location.way_type_id  = ab_way_type.way_type_id
            AND      ab_synonym.synonym_id          <> inuSynonym_ID
            ORDER BY ab_synonym.description;
      RETURN CUWAY_SYNONYM;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CONSTANTS.CNURECORD_NOT_EXIST, DAAB_WAY_SYNONYM.FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXISTZIPCODE( ISBZIPCODE IN AB_ZIP_CODE.ZIP_CODE%TYPE, ONUZIP_CODEID OUT AB_ZIP_CODE.ZIP_CODE_ID%TYPE )
    IS
      CURSOR CUZIP_CODE IS
SELECT zip_code_id
        FROM   ab_Zip_Code
        WHERE  upper(Zip_code) = upper(isbZipCode)
        AND    rownum             = 1;
    BEGIN
      IF ( CUZIP_CODE%ISOPEN ) THEN
         CLOSE CUZIP_CODE;
      END IF;
      OPEN CUZIP_CODE;
      FETCH CUZIP_CODE
         INTO ONUZIP_CODEID;
      IF ( CUZIP_CODE%NOTFOUND ) THEN
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      CLOSE CUZIP_CODE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSE CUZIP_CODE;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSE CUZIP_CODE;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETRECORD( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUGEOGRAPLOCATIONID OUT AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, OSBADDRESS OUT AB_ADDRESS.ADDRESS%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ONUWAYTYPE OUT AB_ADDRESS.WAY_TYPE%TYPE, ONUWAYNUMBER OUT AB_ADDRESS.WAY_NUMBER%TYPE, OSBWAYLETTER OUT AB_ADDRESS.WAY_LETTER%TYPE, OSBWAYGEOSECTOR OUT AB_ADDRESS.WAY_GEO_SECTOR%TYPE, ONUCROSSWAYTYPE OUT AB_ADDRESS.CROSS_WAY_TYPE%TYPE, ONUCROSSWAYNUMBER OUT AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, OSBCROSSWAYLETTER OUT AB_ADDRESS.CROSS_WAY_LETTER%TYPE, OSBCROSSWAYGEOSECTOR OUT AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, ONUHOUSENUMBER OUT AB_ADDRESS.HOUSE_NUMBER%TYPE, OSBHOUSELETTER OUT AB_ADDRESS.HOUSE_LETTER%TYPE, OSBADDRESSCOMPLEMENT OUT AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, OSBDESCRIPTION OUT AB_ADDRESS.DESCRIPTION%TYPE, ONUZIPCODE OUT AB_ADDRESS.ZIP_CODE_ID%TYPE, OSBWAYDESCRIPTION OUT AB_WAY_TYPE.DESCRIPTION%TYPE, OSBCROSSDESCRIPTION OUT AB_WAY_TYPE.DESCRIPTION%TYPE, OSBPREFIXZIPCODE OUT GE_GEOGRA_LOCATION.PREFIX_ZIP_CODE%TYPE, OSBSUFIXZIPCODE OUT AB_ZIP_CODE.ZIP_CODE%TYPE, OSBWAYGEOSECDESCRIP OUT GE_GEOGRA_SECTOR.DESCRIPTION%TYPE, OSBCROSSGEOSECDESCRIP OUT GE_GEOGRA_SECTOR.DESCRIPTION%TYPE, ONUNEIGHBORTHOODID OUT AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      DAAB_ADDRESS.ACCKEY( INUADDRESSID );
      RCADDRESS := DAAB_ADDRESS.FRCGETRECORD( INUADDRESSID );
      ONUGEOGRAPLOCATIONID := RCADDRESS.GEOGRAP_LOCATION_ID;
      OSBADDRESS := RCADDRESS.ADDRESS;
      OSBADDRESSPARSED := RCADDRESS.ADDRESS_PARSED;
      ONUWAYTYPE := RCADDRESS.WAY_TYPE;
      ONUWAYNUMBER := RCADDRESS.WAY_NUMBER;
      OSBWAYLETTER := RCADDRESS.WAY_LETTER;
      OSBWAYGEOSECTOR := RCADDRESS.WAY_GEO_SECTOR;
      ONUCROSSWAYTYPE := RCADDRESS.CROSS_WAY_TYPE;
      ONUCROSSWAYNUMBER := RCADDRESS.CROSS_WAY_NUMBER;
      OSBCROSSWAYLETTER := RCADDRESS.CROSS_WAY_LETTER;
      OSBCROSSWAYGEOSECTOR := RCADDRESS.CROSS_WAY_GEO_SECT;
      ONUHOUSENUMBER := RCADDRESS.HOUSE_NUMBER;
      OSBHOUSELETTER := RCADDRESS.HOUSE_LETTER;
      OSBADDRESSCOMPLEMENT := RCADDRESS.ADDRESS_COMPLEMENT;
      OSBDESCRIPTION := RCADDRESS.DESCRIPTION;
      ONUZIPCODE := RCADDRESS.ZIP_CODE_ID;
      ONUNEIGHBORTHOODID := RCADDRESS.NEIGHBORTHOOD_ID;
      IF ( RCADDRESS.WAY_TYPE IS NOT NULL ) THEN
         OSBWAYDESCRIPTION := DAAB_WAY_TYPE.FSBGETDESCRIPTION( RCADDRESS.WAY_TYPE );
      END IF;
      IF ( RCADDRESS.CROSS_WAY_TYPE IS NOT NULL ) THEN
         OSBCROSSDESCRIPTION := DAAB_WAY_TYPE.FSBGETDESCRIPTION( RCADDRESS.CROSS_WAY_TYPE );
      END IF;
      IF ( RCADDRESS.GEOGRAP_LOCATION_ID IS NOT NULL ) THEN
         OSBPREFIXZIPCODE := DAGE_GEOGRA_LOCATION.FSBGETPREFIX_ZIP_CODE( RCADDRESS.GEOGRAP_LOCATION_ID );
      END IF;
      IF ( RCADDRESS.ZIP_CODE_ID IS NOT NULL ) THEN
         OSBSUFIXZIPCODE := DAAB_ZIP_CODE.FSBGETZIP_CODE( RCADDRESS.ZIP_CODE_ID );
      END IF;
      IF ( RCADDRESS.WAY_GEO_SECTOR IS NOT NULL ) THEN
         OSBWAYGEOSECDESCRIP := DAGE_GEOGRA_SECTOR.FSBGETDESCRIPTION( RCADDRESS.WAY_GEO_SECTOR );
      END IF;
      IF ( RCADDRESS.CROSS_WAY_GEO_SECT IS NOT NULL ) THEN
         OSBCROSSGEOSECDESCRIP := DAGE_GEOGRA_SECTOR.FSBGETDESCRIPTION( RCADDRESS.CROSS_WAY_GEO_SECT );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETNEWPREMISEADDRESSEXIST( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBIS_MAIN IN AB_ADDRESS.IS_MAIN%TYPE := NULL )
    IS
      SBISMAINADDRCURRENT AB_ADDRESS.IS_MAIN%TYPE;
      NUPREMISECURRENT AB_ADDRESS.ESTATE_NUMBER%TYPE;
      SBYES GE_PARAMETER.VALUE%TYPE;
    BEGIN
      SBYES := CSBYES;
      DAAB_ADDRESS.ACCKEY( INUADDRESSID );
      SBISMAINADDRCURRENT := DAAB_ADDRESS.FSBGETIS_MAIN( INUADDRESSID );
      IF ( ISBIS_MAIN IS NOT NULL ) AND ( UPPER( ISBIS_MAIN ) = SBYES ) AND ( UPPER( SBISMAINADDRCURRENT ) != SBYES ) THEN
         TURNALTERNFORMAINADDR( INUADDRESSID );
      END IF;
      NUPREMISECURRENT := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUADDRESSID );
      IF ( NUPREMISECURRENT IS NULL ) OR ( NUPREMISECURRENT = AB_BOCONSTANTS.CNUAPPLICATIONNULL ) THEN
         DAAB_ADDRESS.UPDESTATE_NUMBER( INUADDRESSID, AB_BOPREMISE.FNUINSERTPREMISE );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSADDRESS( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUWAY_TYPE IN AB_ADDRESS.WAY_TYPE%TYPE, INUWAY_NUMBER IN AB_ADDRESS.WAY_NUMBER%TYPE, ISBWAY_LETTER IN AB_ADDRESS.WAY_LETTER%TYPE, ISBWAY_GEO_SECTOR IN AB_ADDRESS.WAY_GEO_SECTOR%TYPE, INUCROSS_WAY_TYPE IN AB_ADDRESS.CROSS_WAY_TYPE%TYPE, INUCROSS_WAY_NUMBER IN AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, ISBCROSS_WAY_LETTER IN AB_ADDRESS.CROSS_WAY_LETTER%TYPE, ISBCROSS_WAY_GEO_SECTOR IN AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, INUHOUSE_NUMBER IN AB_ADDRESS.HOUSE_NUMBER%TYPE, ISBHOUSE_LETTER IN AB_ADDRESS.HOUSE_LETTER%TYPE, ISBADDRESS_COMPLEMENT IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, ISBIS_MAIN IN AB_ADDRESS.IS_MAIN%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE := NULL, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE := NULL )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      NUWAYBYLOCATIONID AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE;
      NUWAYBYLOCATIONIDCROSS AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE;
      SBYES GE_PARAMETER.VALUE%TYPE;
      SBNO GE_PARAMETER.VALUE%TYPE;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );
         DAAB_WAY_TYPE.ACCKEY( INUWAY_TYPE );
         IF DAAB_WAY_TYPE.FSBGETREQUIRED_CROSS_WAY( INUWAY_TYPE ) = GE_BOCONSTANTS.CSBYES THEN
            DAAB_WAY_TYPE.ACCKEY( INUCROSS_WAY_TYPE );
            AB_BOVALIDCROSS.VALNOTVALIDCROSS( INUGEOGRAP_LOCATION_ID, INUWAY_TYPE, INUCROSS_WAY_TYPE );
         END IF;
         IF ( INUWAY_NUMBER IS NULL ) THEN
            ERRORS.SETERROR( 1422, 'inuWay_Number' );
         END IF;
         IF DAAB_WAY_TYPE.FSBGETREQUIRED_CROSS_WAY( INUWAY_TYPE ) = GE_BOCONSTANTS.CSBYES THEN
            IF ( INUCROSS_WAY_NUMBER IS NULL ) THEN
               ERRORS.SETERROR( 1422, 'inuCross_Way_Number' );
            END IF;
            IF ( INUHOUSE_NUMBER IS NULL ) THEN
               ERRORS.SETERROR( 1422, 'inuHouse_number' );
            END IF;
         END IF;
         IF ISBCADASTRALID IS NOT NULL THEN
            VALIDATECADASTRALID( ISBCADASTRALID );
         END IF;
         IF INUESTATENUMBER IS NOT NULL THEN
            DAAB_PREMISE.ACCKEY( INUESTATENUMBER );
         END IF;
      END;
      FUNCTION FBLEXISTADDRESS
       RETURN BOOLEAN
       IS
         CURSOR CUAB_ADDRESS IS
SELECT address_id
            FROM   ab_address
            WHERE  address_parsed = upper(isbAddress)  -- SAO75925
              AND  geograp_location_id = inuGeograp_Location_ID
              AND  way_type            = inuWay_type
              AND  way_number          = inuWay_Number
              AND  nvl(upper(way_letter),'-')     = nvl(upper(isbWay_Letter), '-')
              AND  nvl(upper(way_geo_sector),'-') = nvl(upper(isbWay_Geo_sector),'-')
              AND  nvl(cross_way_type, -1)          = nvl(inuCross_Way_type, -1)
              AND  nvl(cross_way_number, -1)        = NVL(inuCross_Way_Number, -1)
              AND  nvl(upper(cross_way_letter),'-')    = nvl(upper(isbCross_Way_Letter),'-')
              AND  nvl(upper(cross_way_geo_sect),'-')  = nvl(upper(isbCross_Way_Geo_sector),'-')
              AND  NVL(house_number, -1)            = NVL(inuHouse_number, -1)
              AND  nvl(house_letter,'-')   = nvl(upper(isbHouse_letter),'-')
              AND  nvl(upper(address_complement),'-') = nvl(upper(isbAddress_complement),'-')
              AND  nvl(upper(description),'-')    = nvl(upper(isbDescription),'-');
       BEGIN
         ONUADDRESSID := -1;
         IF ( CUAB_ADDRESS%ISOPEN ) THEN
            CLOSE CUAB_ADDRESS;
         END IF;
         OPEN CUAB_ADDRESS;
         FETCH CUAB_ADDRESS
            INTO ONUADDRESSID;
         UT_TRACE.TRACE( 'Id Direccion Existente:[' || ONUADDRESSID || ']', 3 );
         IF ( CUAB_ADDRESS%NOTFOUND ) THEN
            RETURN FALSE;
         END IF;
         RETURN TRUE;
      END;
      PROCEDURE INSERTWAYBYLOCATION
       IS
         SBDESCRIPTION AB_WAY_BY_LOCATION.DESCRIPTION%TYPE;
       BEGIN
         SBDESCRIPTION := DAAB_WAY_TYPE.FSBGETDESCRIPTION( INUWAY_TYPE ) || ' ' || TO_CHAR( INUWAY_NUMBER );
         AB_BOADDRESS.INSERTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUWAY_TYPE, SBDESCRIPTION, INUWAY_NUMBER, ISBWAY_LETTER, NUWAYBYLOCATIONID );
         UT_TRACE.TRACE( 'Id Via:[' || NUWAYBYLOCATIONID || ']', 3 );
         IF DAAB_WAY_TYPE.FSBGETREQUIRED_CROSS_WAY( INUWAY_TYPE ) = GE_BOCONSTANTS.CSBYES THEN
            SBDESCRIPTION := DAAB_WAY_TYPE.FSBGETDESCRIPTION( INUCROSS_WAY_TYPE ) || ' ' || TO_CHAR( INUCROSS_WAY_NUMBER );
            AB_BOADDRESS.INSERTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUCROSS_WAY_TYPE, SBDESCRIPTION, INUCROSS_WAY_NUMBER, ISBCROSS_WAY_LETTER, NUWAYBYLOCATIONIDCROSS );
          ELSIF INUCROSS_WAY_TYPE IS NOT NULL THEN
            SBDESCRIPTION := DAAB_WAY_TYPE.FSBGETDESCRIPTION( INUCROSS_WAY_TYPE ) || ' ' || TO_CHAR( INUCROSS_WAY_NUMBER );
            AB_BOADDRESS.INSERTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUCROSS_WAY_TYPE, SBDESCRIPTION, INUCROSS_WAY_NUMBER, ISBCROSS_WAY_LETTER, NUWAYBYLOCATIONIDCROSS );
         END IF;
         UT_TRACE.TRACE( 'Id Cruce:[' || NUWAYBYLOCATIONIDCROSS || ']', 3 );
      END;
      PROCEDURE INSERTADDRESS
       IS
       BEGIN
         RCADDRESS.ADDRESS_ID := AB_BOSEQUENCE.FNUNEXTADDRESS;
         RCADDRESS.WAY_ID := NUWAYBYLOCATIONID;
         RCADDRESS.WAY_TYPE := INUWAY_TYPE;
         RCADDRESS.WAY_NUMBER := INUWAY_NUMBER;
         RCADDRESS.WAY_LETTER := ISBWAY_LETTER;
         RCADDRESS.WAY_GEO_SECTOR := ISBWAY_GEO_SECTOR;
         RCADDRESS.CROSS_WAY_ID := NUWAYBYLOCATIONIDCROSS;
         RCADDRESS.GEOGRAP_LOCATION_ID := INUGEOGRAP_LOCATION_ID;
         RCADDRESS.CROSS_WAY_TYPE := INUCROSS_WAY_TYPE;
         RCADDRESS.CROSS_WAY_NUMBER := INUCROSS_WAY_NUMBER;
         RCADDRESS.CROSS_WAY_LETTER := ISBCROSS_WAY_LETTER;
         RCADDRESS.CROSS_WAY_GEO_SECT := ISBCROSS_WAY_GEO_SECTOR;
         RCADDRESS.ADDRESS := ISBADDRESS;
         RCADDRESS.IS_URBAN := SBYES;
         RCADDRESS.HOUSE_NUMBER := INUHOUSE_NUMBER;
         RCADDRESS.HOUSE_LETTER := ISBHOUSE_LETTER;
         RCADDRESS.ADDRESS_COMPLEMENT := ISBADDRESS_COMPLEMENT;
         RCADDRESS.ADDRESS_PARSED := ISBADDRESS;
         RCADDRESS.ACTIVE := SBYES;
         RCADDRESS.DESCRIPTION := ISBDESCRIPTION;
         IF INUESTATENUMBER IS NOT NULL THEN
            RCADDRESS.ESTATE_NUMBER := INUESTATENUMBER;
         END IF;
         RCADDRESS.NEIGHBORTHOOD_ID := INUNEIGHBORTHOODID;
         RCADDRESS.INSTALLED_LINES := 0;
         RCADDRESS.INSTALLED_AIR_LINES := 0;
         RCADDRESS.TRANSACT_LINES := 0;
         RCADDRESS.TRANSACT_AIR_LINES := 0;
         RCADDRESS.CADASTRAL_ID := ISBCADASTRALID;
         RCADDRESS.SEGMENT_ID := AB_BOSEGMENT.FNUGETGENERICSEGMENT( INUGEOGRAP_LOCATION_ID, AB_BOSEGMENT.CSBSEGTYPEPORREV );
         IF ( ( UPPER( ISBIS_MAIN ) != SBYES ) AND ( UPPER( ISBIS_MAIN ) != SBNO ) ) OR ( ISBIS_MAIN IS NULL ) THEN
            RCADDRESS.IS_MAIN := SBYES;
          ELSE
            RCADDRESS.IS_MAIN := UPPER( ISBIS_MAIN );
         END IF;
         IF ( INUZIPCODE != AB_BOCONSTANTS.CNUAPPLICATIONNULL ) THEN
            RCADDRESS.ZIP_CODE_ID := INUZIPCODE;
          ELSE
            RCADDRESS.ZIP_CODE_ID := NULL;
         END IF;
         ONUADDRESSID := RCADDRESS.ADDRESS_ID;
         UT_TRACE.TRACE( 'Id Nueva Direccion:[' || ONUADDRESSID || ']', 3 );
         DAAB_ADDRESS.INSRECORD( RCADDRESS );
      END;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.InsAddress. Direccion:[' || ISBADDRESS || ']', 2 );
      UT_TRACE.TRACE( 'Ubicacion:[' || INUGEOGRAP_LOCATION_ID || ']Zona Postal:[' || INUZIPCODE || ']', 3 );
      VALINPUTDATA;
      SBYES := CSBYES;
      SBNO := CSBNO;
      IF ( NOT FBLEXISTADDRESS ) THEN
         INSERTWAYBYLOCATION;
         INSERTADDRESS;
       ELSE
         SETNEWPREMISEADDRESSEXIST( ONUADDRESSID, ISBIS_MAIN );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSADDRESSWITHOUTPARSER( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUWAY_TYPE IN AB_ADDRESS.WAY_TYPE%TYPE, INUWAY_NUMBER IN AB_ADDRESS.WAY_NUMBER%TYPE, ISBWAY_LETTER IN AB_ADDRESS.WAY_LETTER%TYPE, ISBWAY_GEO_SECTOR IN AB_ADDRESS.WAY_GEO_SECTOR%TYPE, INUCROSS_WAY_TYPE IN AB_ADDRESS.CROSS_WAY_TYPE%TYPE, INUCROSS_WAY_NUMBER IN AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, ISBCROSS_WAY_LETTER IN AB_ADDRESS.CROSS_WAY_LETTER%TYPE, ISBCROSS_WAY_GEO_SECTOR IN AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, INUHOUSE_NUMBER IN AB_ADDRESS.HOUSE_NUMBER%TYPE, ISBHOUSE_LETTER IN AB_ADDRESS.HOUSE_LETTER%TYPE, ISBADDRESS_COMPLEMENT IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, ISBIS_MAIN IN AB_ADDRESS.IS_MAIN%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE := NULL, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE := NULL, ISBRURAL IN VARCHAR2 := NULL )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      NUWAYBYLOCATIONID AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE := NULL;
      NUWAYBYLOCATIONIDCROSS AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE := NULL;
      SBYES GE_PARAMETER.VALUE%TYPE;
      SBNO GE_PARAMETER.VALUE%TYPE;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );
         IF INUWAY_TYPE IS NOT NULL THEN
            DAAB_WAY_TYPE.ACCKEY( INUWAY_TYPE );
            IF ( INUWAY_NUMBER IS NULL ) THEN
               ERRORS.SETERROR( CNUERR_10700 );
               RAISE EX.CONTROLLED_ERROR;
            END IF;
         END IF;
         IF INUCROSS_WAY_TYPE IS NOT NULL THEN
            DAAB_WAY_TYPE.ACCKEY( INUCROSS_WAY_TYPE );
            IF ( INUCROSS_WAY_NUMBER IS NULL ) THEN
               ERRORS.SETERROR( CNUERR_10701 );
               RAISE EX.CONTROLLED_ERROR;
            END IF;
         END IF;
         IF ISBCADASTRALID IS NOT NULL THEN
            VALIDATECADASTRALID( ISBCADASTRALID );
         END IF;
         IF INUESTATENUMBER IS NOT NULL THEN
            DAAB_PREMISE.ACCKEY( INUESTATENUMBER );
         END IF;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      FUNCTION FBLEXISTADDRESS
       RETURN BOOLEAN
       IS
         CURSOR CUAB_ADDRESS IS
SELECT address_id
            FROM   ab_address
            WHERE  address_parsed = upper(isbAddress)   -- SAO75925
              AND  geograp_location_id = inuGeograp_Location_ID
              AND  nvl(way_type,-1)    = nvl(inuWay_type,-1)
              AND  nvl(way_number,-1)   = nvl(inuWay_Number, -1)
              AND  nvl(upper(way_letter),'-')     = nvl(upper(isbWay_Letter), '-')
              AND  nvl(upper(way_geo_sector),'-') = nvl(upper(isbWay_Geo_sector),'-')
              AND  nvl(cross_way_type,-1)         = nvl(inuCross_Way_type,-1)
              AND  nvl(cross_way_number, -1)      = nvl(inuCross_Way_Number,-1)
              AND  nvl(upper(cross_way_letter),'-')    = nvl(upper(isbCross_Way_Letter),'-')
              AND  nvl(upper(cross_way_geo_sect),'-')  = nvl(upper(isbCross_Way_Geo_sector),'-')
              AND  nvl(house_number, -1)            = nvl(inuHouse_number, -1)
              AND  nvl(house_letter,'-')   = nvl(upper(isbHouse_letter),'-')
              AND  nvl(upper(address_complement),'-') = nvl(upper(isbAddress_complement),'-')
              AND  nvl(upper(description),'-')    = nvl(upper(isbDescription),'-');
       BEGIN
         ONUADDRESSID := -1;
         IF ( CUAB_ADDRESS%ISOPEN ) THEN
            CLOSE CUAB_ADDRESS;
         END IF;
         OPEN CUAB_ADDRESS;
         FETCH CUAB_ADDRESS
            INTO ONUADDRESSID;
         UT_TRACE.TRACE( 'Id Direccion Existente:[' || ONUADDRESSID || ']', 3 );
         IF ( CUAB_ADDRESS%NOTFOUND ) THEN
            RETURN FALSE;
         END IF;
         RETURN TRUE;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE INSERTWAYBYLOCATION
       IS
         SBDESCRIPTION AB_WAY_BY_LOCATION.DESCRIPTION%TYPE;
       BEGIN
         IF INUWAY_TYPE IS NOT NULL AND INUWAY_NUMBER IS NOT NULL THEN
            SBDESCRIPTION := DAAB_WAY_TYPE.FSBGETDESCRIPTION( INUWAY_TYPE ) || ' ' || TO_CHAR( INUWAY_NUMBER );
            AB_BOADDRESS.INSERTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUWAY_TYPE, SBDESCRIPTION, INUWAY_NUMBER, ISBWAY_LETTER, NUWAYBYLOCATIONID );
            UT_TRACE.TRACE( 'Id Via:[' || NUWAYBYLOCATIONID || '] ' || SBDESCRIPTION, 3 );
         END IF;
         IF INUCROSS_WAY_TYPE IS NOT NULL AND INUCROSS_WAY_NUMBER IS NOT NULL THEN
            SBDESCRIPTION := DAAB_WAY_TYPE.FSBGETDESCRIPTION( INUCROSS_WAY_TYPE ) || ' ' || TO_CHAR( INUCROSS_WAY_NUMBER );
            AB_BOADDRESS.INSERTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUCROSS_WAY_TYPE, SBDESCRIPTION, INUCROSS_WAY_NUMBER, ISBCROSS_WAY_LETTER, NUWAYBYLOCATIONIDCROSS );
            UT_TRACE.TRACE( 'Id Cruce:[' || NUWAYBYLOCATIONIDCROSS || '] ' || SBDESCRIPTION, 3 );
         END IF;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE INSERTADDRESS
       IS
       BEGIN
         RCADDRESS.ADDRESS_ID := AB_BOSEQUENCE.FNUNEXTADDRESS;
         RCADDRESS.WAY_ID := NUWAYBYLOCATIONID;
         RCADDRESS.WAY_TYPE := INUWAY_TYPE;
         RCADDRESS.WAY_NUMBER := INUWAY_NUMBER;
         RCADDRESS.WAY_LETTER := ISBWAY_LETTER;
         RCADDRESS.WAY_GEO_SECTOR := ISBWAY_GEO_SECTOR;
         RCADDRESS.CROSS_WAY_ID := NUWAYBYLOCATIONIDCROSS;
         RCADDRESS.GEOGRAP_LOCATION_ID := INUGEOGRAP_LOCATION_ID;
         RCADDRESS.CROSS_WAY_TYPE := INUCROSS_WAY_TYPE;
         RCADDRESS.CROSS_WAY_NUMBER := INUCROSS_WAY_NUMBER;
         RCADDRESS.CROSS_WAY_LETTER := ISBCROSS_WAY_LETTER;
         RCADDRESS.CROSS_WAY_GEO_SECT := ISBCROSS_WAY_GEO_SECTOR;
         RCADDRESS.ADDRESS := ISBADDRESS;
         RCADDRESS.IS_URBAN := SBYES;
         RCADDRESS.HOUSE_NUMBER := INUHOUSE_NUMBER;
         RCADDRESS.HOUSE_LETTER := ISBHOUSE_LETTER;
         RCADDRESS.ADDRESS_COMPLEMENT := ISBADDRESS_COMPLEMENT;
         RCADDRESS.ADDRESS_PARSED := ISBADDRESS;
         RCADDRESS.ACTIVE := SBYES;
         RCADDRESS.DESCRIPTION := ISBDESCRIPTION;
         IF INUESTATENUMBER IS NOT NULL THEN
            RCADDRESS.ESTATE_NUMBER := INUESTATENUMBER;
         END IF;
         RCADDRESS.NEIGHBORTHOOD_ID := INUNEIGHBORTHOODID;
         RCADDRESS.INSTALLED_LINES := 0;
         RCADDRESS.INSTALLED_AIR_LINES := 0;
         RCADDRESS.TRANSACT_LINES := 0;
         RCADDRESS.TRANSACT_AIR_LINES := 0;
         RCADDRESS.CADASTRAL_ID := ISBCADASTRALID;
         RCADDRESS.SEGMENT_ID := AB_BOSEGMENT.FNUGETGENERICSEGMENT( INUGEOGRAP_LOCATION_ID, AB_BOSEGMENT.CSBSEGTYPEPORREV );
         IF ( ( UPPER( ISBIS_MAIN ) != SBYES ) AND ( UPPER( ISBIS_MAIN ) != SBNO ) ) OR ( ISBIS_MAIN IS NULL ) THEN
            RCADDRESS.IS_MAIN := SBYES;
          ELSE
            RCADDRESS.IS_MAIN := UPPER( ISBIS_MAIN );
         END IF;
         IF ( INUZIPCODE != AB_BOCONSTANTS.CNUAPPLICATIONNULL ) THEN
            RCADDRESS.ZIP_CODE_ID := INUZIPCODE;
          ELSE
            RCADDRESS.ZIP_CODE_ID := NULL;
         END IF;
         ONUADDRESSID := RCADDRESS.ADDRESS_ID;
         UT_TRACE.TRACE( 'Id Nueva Direccion:[' || ONUADDRESSID || ']', 3 );
         DAAB_ADDRESS.INSRECORD( RCADDRESS );
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.InsAddressWithoutParser. Direccion:[' || ISBADDRESS || ']', 2 );
      UT_TRACE.TRACE( 'Ubicacion:[' || INUGEOGRAP_LOCATION_ID || ']Zona Postal:[' || INUZIPCODE || ']', 3 );
      VALINPUTDATA;
      SBYES := CSBYES;
      SBNO := CSBNO;
      IF ( NOT FBLEXISTADDRESS ) THEN
         INSERTWAYBYLOCATION;
         INSERTADDRESS;
       ELSE
         SETNEWPREMISEADDRESSEXIST( ONUADDRESSID, ISBIS_MAIN );
         RCADDRESS := DAAB_ADDRESS.FRCGETRECORD( ONUADDRESSID );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSADDRESS( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBADDRESS_COMPLEMENT IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, ISBIS_MAIN IN AB_ADDRESS.IS_MAIN%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE := NULL, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE := NULL )
    IS
      SBYES GE_PARAMETER.VALUE%TYPE;
      SBNO GE_PARAMETER.VALUE%TYPE;
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      FUNCTION FBLEXISTADDRESS
       RETURN BOOLEAN
       IS
         CURSOR CUAB_ADDRESS IS
SELECT address_id
            FROM   ab_address
            WHERE  address_parsed = upper(isbAddress)     -- SAO75925
              AND  geograp_location_id = inuGeograp_Location_ID
              AND  nvl(upper(address_complement),'-') = nvl(upper(isbAddress_complement),'-')
              AND  nvl(upper(description),'-')    = nvl(upper(isbDescription),'-');
       BEGIN
         ONUADDRESSID := -1;
         IF ( CUAB_ADDRESS%ISOPEN ) THEN
            CLOSE CUAB_ADDRESS;
         END IF;
         OPEN CUAB_ADDRESS;
         FETCH CUAB_ADDRESS
            INTO ONUADDRESSID;
         UT_TRACE.TRACE( 'Id Direccion Existente:[' || ONUADDRESSID || ']', 3 );
         IF ( CUAB_ADDRESS%NOTFOUND ) THEN
            RETURN FALSE;
         END IF;
         RETURN TRUE;
      END;
    BEGIN
      UT_TRACE.TRACE( '[AB_BOAddress.InsAddress]  INICIO:', 5 );
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );
      IF ISBCADASTRALID IS NOT NULL THEN
         VALIDATECADASTRALID( ISBCADASTRALID );
      END IF;
      IF INUESTATENUMBER IS NOT NULL THEN
         DAAB_PREMISE.ACCKEY( INUESTATENUMBER );
      END IF;
      SBYES := CSBYES;
      SBNO := CSBNO;
      IF ( NOT FBLEXISTADDRESS ) THEN
         RCADDRESS.ADDRESS_ID := AB_BOSEQUENCE.FNUNEXTADDRESS;
         RCADDRESS.GEOGRAP_LOCATION_ID := INUGEOGRAP_LOCATION_ID;
         RCADDRESS.ADDRESS := ISBADDRESS;
         RCADDRESS.IS_URBAN := SBNO;
         RCADDRESS.ADDRESS_COMPLEMENT := ISBADDRESS_COMPLEMENT;
         RCADDRESS.ADDRESS_PARSED := ISBADDRESS;
         RCADDRESS.ACTIVE := SBYES;
         RCADDRESS.DESCRIPTION := ISBDESCRIPTION;
         IF INUESTATENUMBER IS NOT NULL THEN
            RCADDRESS.ESTATE_NUMBER := INUESTATENUMBER;
         END IF;
         RCADDRESS.NEIGHBORTHOOD_ID := INUNEIGHBORTHOODID;
         RCADDRESS.INSTALLED_LINES := 0;
         RCADDRESS.INSTALLED_AIR_LINES := 0;
         RCADDRESS.TRANSACT_LINES := 0;
         RCADDRESS.TRANSACT_AIR_LINES := 0;
         RCADDRESS.CADASTRAL_ID := ISBCADASTRALID;
         RCADDRESS.SEGMENT_ID := AB_BOSEGMENT.FNUGETGENERICSEGMENT( INUGEOGRAP_LOCATION_ID, AB_BOSEGMENT.CSBSEGTYPERURAL );
         RCADDRESS.IS_VALID := SBYES;
         IF ( ( UPPER( ISBIS_MAIN ) != SBYES ) AND ( UPPER( ISBIS_MAIN ) != SBNO ) ) OR ( ISBIS_MAIN IS NULL ) THEN
            RCADDRESS.IS_MAIN := SBYES;
          ELSE
            RCADDRESS.IS_MAIN := UPPER( ISBIS_MAIN );
         END IF;
         IF ( INUZIPCODE != AB_BOCONSTANTS.CNUAPPLICATIONNULL ) THEN
            RCADDRESS.ZIP_CODE_ID := INUZIPCODE;
          ELSE
            RCADDRESS.ZIP_CODE_ID := NULL;
         END IF;
         ONUADDRESSID := RCADDRESS.ADDRESS_ID;
         DAAB_ADDRESS.INSRECORD( RCADDRESS );
       ELSE
         UT_TRACE.TRACE( '[AB_BOAddress.InsAddress]  onuAddressId:[' || ONUADDRESSID || ']', 5 );
      END IF;
      UT_TRACE.TRACE( '[AB_BOAddress.InsAddress]  FIN:', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDADDRESS( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, INUPREMISEID IN AB_ADDRESS.ESTATE_NUMBER%TYPE, INUNEIGHBORTHOOD IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBCADASTRALID IN AB_ADDRESS.CADASTRAL_ID%TYPE := NULL )
    IS
    BEGIN
      UPDADDRESS( INUADDRESS_ID, ISBDESCRIPTION, INUZIPCODE );
      IF ISBCADASTRALID IS NOT NULL THEN
         VALIDATECADASTRALID( ISBCADASTRALID, INUADDRESS_ID );
      END IF;
      DAAB_ADDRESS.UPDCADASTRAL_ID( INUADDRESS_ID, ISBCADASTRALID );
      IF NVL( INUPREMISEID, -1 ) != AB_BOCONSTANTS.CNUAPPLICATIONNULL THEN
         IF NVL( INUZIPCODE, -1 ) != AB_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            DAAB_PREMISE.UPDZIP_CODE_ID( INUPREMISEID, INUZIPCODE );
         END IF;
         DAAB_ADDRESS.UPDESTATE_NUMBER( INUADDRESS_ID, INUPREMISEID );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDADDRESS;
   PROCEDURE UPDADDRESS( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE, INUPREMISEID IN AB_ADDRESS.ESTATE_NUMBER%TYPE )
    IS
    BEGIN
      IF NVL( INUPREMISEID, -1 ) != AB_BOCONSTANTS.CNUAPPLICATIONNULL THEN
         UPDADDRESS( INUADDRESS_ID, ISBDESCRIPTION, INUZIPCODE );
         DAAB_ADDRESS.UPDESTATE_NUMBER( INUADDRESS_ID, INUPREMISEID );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDADDRESS( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, INUZIPCODE IN AB_ADDRESS.ZIP_CODE_ID%TYPE )
    IS
    BEGIN
      DAAB_ADDRESS.UPDDESCRIPTION( INUADDRESS_ID, ISBDESCRIPTION );
      IF ( NVL( INUZIPCODE, -1 ) != AB_BOCONSTANTS.CNUAPPLICATIONNULL ) THEN
         DAAB_ADDRESS.UPDZIP_CODE_ID( INUADDRESS_ID, INUZIPCODE );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CHANGEPRDADDRAIRLINES( INUPRODUCTID IN NUMBER, INUOLDADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      NUERR NUMBER;
      SBERRM VARCHAR2( 2000 );
      NUGEOGRALOCATION AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
      NUNEWADDRESID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBADDRESSPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUMAINADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBADDRESS AB_ADDRESS.ADDRESS%TYPE;
      NUNEIGHBORHOODID AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
      SBISURBAN AB_ADDRESS.IS_URBAN%TYPE;
      PROCEDURE CHANGEPRODUCTADDRESS( INUPRODID IN NUMBER, INUOLDADDRID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUNEWADDRID IN AB_ADDRESS.ADDRESS_ID%TYPE )
       IS
         RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
         NUAIRLINESCOUNT AB_ADDRESS.INSTALLED_LINES%TYPE;
         NUNORMALCOUNT AB_ADDRESS.INSTALLED_LINES%TYPE;
       BEGIN
         GE_BOINT_PRODUCTS.GETAIRBOXCOUNT( INUPRODID, NUAIRLINESCOUNT, NUERR, SBERRM );
         IF NVL( NUERR, 0 ) != GE_BOCONSTANTS.CNUSUCCESS THEN
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         GE_BOINT_PRODUCTS.GETNOTAIRBOXCOUNT( INUPRODID, NUNORMALCOUNT, NUERR, SBERRM );
         IF NVL( NUERR, 0 ) != GE_BOCONSTANTS.CNUSUCCESS THEN
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         DAAB_ADDRESS.LOCKBYPK( INUOLDADDRID, RCADDRESS );
         NUAIRLINESCOUNT := NVL( NUAIRLINESCOUNT, 0 );
         NUNORMALCOUNT := NVL( NUNORMALCOUNT, 0 );
         RCADDRESS.INSTALLED_AIR_LINES := NVL( RCADDRESS.INSTALLED_AIR_LINES, 0 ) - NUAIRLINESCOUNT;
         RCADDRESS.INSTALLED_LINES := NVL( RCADDRESS.INSTALLED_LINES, 0 ) - NUAIRLINESCOUNT - NUNORMALCOUNT;
         IF RCADDRESS.INSTALLED_AIR_LINES < 0 OR RCADDRESS.INSTALLED_LINES < 0 THEN
            ERRORS.SETERROR( CNUINVALID_RANGE );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         DAAB_ADDRESS.UPDRECORD( RCADDRESS );
         DAAB_ADDRESS.LOCKBYPK( INUNEWADDRID, RCADDRESS );
         RCADDRESS.INSTALLED_AIR_LINES := NVL( RCADDRESS.INSTALLED_AIR_LINES, 0 ) + NUAIRLINESCOUNT;
         RCADDRESS.INSTALLED_LINES := NVL( RCADDRESS.INSTALLED_LINES, 0 ) + NUAIRLINESCOUNT + NUNORMALCOUNT;
         IF RCADDRESS.INSTALLED_AIR_LINES < 0 OR RCADDRESS.INSTALLED_LINES < 0 THEN
            ERRORS.SETERROR( CNUINVALID_RANGE );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         DAAB_ADDRESS.UPDRECORD( RCADDRESS );
         VALMAXPREMISEAIRLINES( INUNEWADDRID );
      END CHANGEPRODUCTADDRESS;
    BEGIN
      IF AB_BOADDRESSCHANGE.ARETHEREPENDREQUEST( INUOLDADDRESSID ) THEN
         ERRORS.SETERROR( CNUARE_THERE_PEND_REQUEST );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUGEOGRALOCATION := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( INUOLDADDRESSID );
      DAAB_ADDRESS.ACCKEY( INUNEWADDRESSID );
      SBADDRESSPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( INUNEWADDRESSID );
      SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( INUNEWADDRESSID );
      SBISURBAN := DAAB_ADDRESS.FSBGETIS_URBAN( INUNEWADDRESSID );
      IF FBLARETHEREMAINADDR( NUGEOGRALOCATION, SBADDRESSPARSED, NUNEWADDRESID ) THEN
         CHANGEPRODUCTADDRESS( INUPRODUCTID, INUOLDADDRESSID, NUNEWADDRESID );
         SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( NUNEWADDRESID );
         GE_BOINT_PRODUCTS.SETPRODUCTADDRESS( INUPRODUCTID, NUNEWADDRESID, SBADDRESS, NULL, NUERR, SBERRM );
         VERIFYERROR( NUERR );
         RETURN;
      END IF;
      GETMAINADDRBYANYID( INUNEWADDRESSID, NUMAINADDRESSID );
      CHANGEPRODUCTADDRESS( INUPRODUCTID, INUOLDADDRESSID, INUNEWADDRESSID );
      SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( NUMAINADDRESSID );
      GE_BOINT_PRODUCTS.SETPRODUCTADDRESS( INUPRODUCTID, NUMAINADDRESSID, SBADDRESS, INUNEWADDRESSID, NUERR, SBERRM );
      VERIFYERROR( NUERR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CHANGEPRDADDRAIRLINES;
   PROCEDURE TURNALTERNFORMAINADDR( INUALTERNADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      NUESTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
      SBADDRPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      SBADDRESS AB_ADDRESS.ADDRESS%TYPE;
      NUMAINADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUGEOLOCID AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
    BEGIN
      NUGEOLOCID := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( INUALTERNADDRESSID );
      SBADDRPARSED := DAAB_ADDRESS.FSBGETADDRESS_PARSED( INUALTERNADDRESSID );
      IF FBLARETHEREMAINADDR( NUGEOLOCID, SBADDRPARSED, NUMAINADDRESSID ) THEN
         ERRORS.SETERROR( CNUDUP_MAIN_ADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUESTATENUMBER := AB_BOPREMISE.FNUINSERTPREMISE;
      DAAB_ADDRESS.UPDESTATE_NUMBER( INUALTERNADDRESSID, NUESTATENUMBER );
      DAAB_ADDRESS.UPDIS_MAIN( INUALTERNADDRESSID, CSBYES );
      SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS( INUALTERNADDRESSID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END TURNALTERNFORMAINADDR;
   FUNCTION FNUGETALLAIRLINES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN NUMBER
    IS
      NUCOUNT NUMBER;
      NUPREMISE NUMBER;
      CURSOR CUPREMISEADDRESS( INUPREMISE IN NUMBER ) IS
SELECT sum(nvl(installed_air_lines,0)) + sum(nvl(transact_air_lines,0))
        FROM ab_address
        WHERE estate_number=inuPremise;
    BEGIN
      NUPREMISE := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUADDRESSID );
      VALESTATENOTNULL( NUPREMISE );
      OPEN CUPREMISEADDRESS( NUPREMISE );
      FETCH CUPREMISEADDRESS
         INTO NUCOUNT;
      CLOSE CUPREMISEADDRESS;
      RETURN NVL( NUCOUNT, 0 );
   END FNUGETALLAIRLINES;
   FUNCTION FSBGETADDRLASTTOKEN( INUPARSERID IN NUMBER )
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( SUBSTR( DAAB_ADDRESS.FSBGETADDRESS_COMPLEMENT( INUPARSERID ), INSTR( DAAB_ADDRESS.FSBGETADDRESS_COMPLEMENT( INUPARSERID ), ' ', -1 ), LENGTH( DAAB_ADDRESS.FSBGETADDRESS_COMPLEMENT( INUPARSERID ) ) ) );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETADDRLASTTOKEN;
   FUNCTION FRFGETOWNERS( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN DAAB_OWNER_PREMISE.TYRFRECORDS
    IS
      NUESTATE_NUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
    BEGIN
      DAAB_ADDRESS.ACCKEY( INUADDRESS_ID );
      NUESTATE_NUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUADDRESS_ID );
      RETURN ( AB_BOPREMISE.FRFGETOWNERS( NUESTATE_NUMBER ) );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE REGISTEROWNER( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBIDENTIFICATION IN GE_SUBSCRIBER.IDENTIFICATION%TYPE, INUIDENT_TYPE IN GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE )
    IS
      NUESTATE_NUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE;
    BEGIN
      DAAB_ADDRESS.ACCKEY( INUADDRESS_ID );
      NUESTATE_NUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUADDRESS_ID );
      DAAB_PREMISE.ACCKEY( NUESTATE_NUMBER );
      AB_BOPREMISE.REGISTEROWNER( NUESTATE_NUMBER, ISBIDENTIFICATION, INUIDENT_TYPE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDINITCOUNTERLINES( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      CNUZERO CONSTANT NUMBER( 1 ) := 0;
    BEGIN
      DAAB_ADDRESS.UPDINSTALLED_LINES( INUADDRESS_ID, CNUZERO );
      DAAB_ADDRESS.UPDTRANSACT_LINES( INUADDRESS_ID, CNUZERO );
      DAAB_ADDRESS.UPDINSTALLED_AIR_LINES( INUADDRESS_ID, CNUZERO );
      DAAB_ADDRESS.UPDTRANSACT_AIR_LINES( INUADDRESS_ID, CNUZERO );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDINITCOUNTERLINES;
   PROCEDURE GETDATAHOUSE( INUADDRESS_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUHOUSENUMBER OUT AB_ADDRESS.HOUSE_NUMBER%TYPE, OSBHOUSELETTER OUT AB_ADDRESS.HOUSE_LETTER%TYPE, ONUSEGMENT OUT AB_ADDRESS.SEGMENT_ID%TYPE )
    IS
    BEGIN
      OSBHOUSELETTER := DAAB_ADDRESS.FSBGETHOUSE_LETTER( INUADDRESS_ID );
      ONUHOUSENUMBER := DAAB_ADDRESS.FNUGETHOUSE_NUMBER( INUADDRESS_ID );
      ONUSEGMENT := DAAB_ADDRESS.FNUGETSEGMENT_ID( INUADDRESS_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETDATAHOUSE;
   PROCEDURE UPDESTATENUMBER( INUIPARSER_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE )
    IS
      NUSTATENUMBER AB_ADDRESS.ESTATE_NUMBER%TYPE := NULL;
    BEGIN
      IF INUIPARSER_ID IS NULL THEN
         UT_TRACE.TRACE( 'AB_BOAddress.updEstateNumber Direccion es nula return:', 5 );
         RETURN;
      END IF;
      NUSTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUIPARSER_ID );
      IF NVL( NUSTATENUMBER, -1 ) != INUESTATENUMBER AND INUESTATENUMBER IS NOT NULL THEN
         UT_TRACE.TRACE( 'AB_BOAddress.updEstateNumber Actualzia el Predio en la Direccion :' || INUIPARSER_ID || '-' || INUESTATENUMBER, 5 );
         DAAB_ADDRESS.UPDESTATE_NUMBER( INUIPARSER_ID, INUESTATENUMBER );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDESTATENUMBER;
   PROCEDURE GETESTATENUMBER( INUIPARSER_ID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUESTATENUMBER OUT AB_ADDRESS.ESTATE_NUMBER%TYPE )
    IS
    BEGIN
      ONUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUIPARSER_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETESTATENUMBER;
   FUNCTION FRFGETALL_WAY_TYPES
    RETURN CONSTANTS.TYREFCURSOR
    IS
      CUWAY_TYPE CONSTANTS.TYREFCURSOR;
    BEGIN
      OPEN CUWAY_TYPE FOR SELECT AB_Way_type.WAY_TYPE_ID, AB_Way_type.DESCRIPTION
            FROM   AB_Way_type ;
      RETURN CUWAY_TYPE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSERTSEGMENT( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, INUCROSS_WAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, INUCROSS_WAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBCROSS_LETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, INUNEIGHBORTHOODID IN AB_SEGMENTS.NEIGHBORHOOD_ID%TYPE, ONUSEGMENT_ID OUT AB_SEGMENTS.SEGMENTS_ID%TYPE )
    IS
      BLEXIST BOOLEAN := FALSE;
      NUWAY_BY_LOCATION_ID AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE;
      NUCROSS_WAY_BY_LOCATION_ID AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE;
    BEGIN
      EXISTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUWAY_TYPE, INUWAY_NUMBER, ISBLETTERS_WAY, BLEXIST, NUWAY_BY_LOCATION_ID );
      EXISTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUCROSS_WAY_TYPE, INUCROSS_WAY_NUMBER, ISBCROSS_LETTERS_WAY, BLEXIST, NUCROSS_WAY_BY_LOCATION_ID );
      DAAB_WAY_BY_LOCATION.ACCKEY( NUWAY_BY_LOCATION_ID );
      DAAB_WAY_BY_LOCATION.ACCKEY( NUCROSS_WAY_BY_LOCATION_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELETESYNONYMBYWAY( INUMAINWAY IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, SBSYNONYMNAME IN AB_SYNONYM.DESCRIPTION%TYPE )
    IS
    BEGIN
      DELETE FROM ab_way_domain
        WHERE  ab_way_domain.synonymous_id in
               (
                    SELECT ab_way_synonym.way_synonym_id
                    FROM  ab_synonym, ab_way_synonym
                    WHERE ab_synonym.synonym_id = ab_way_synonym.synonym_id
                      AND ab_way_synonym.way_id =  inuMainWay
                      AND ab_synonym.description = sbSynonymName
                );
      DELETE FROM ab_way_synonym
        WHERE  ab_way_synonym.way_id =  inuMainWay
          AND  ab_way_synonym.synonym_id in
               (
                    SELECT ab_synonym.synonym_id
                    FROM ab_synonym
                    WHERE  ab_synonym.description = sbSynonymName
                );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DELETESYNONYMBYWAY;
   PROCEDURE ADDSYNONYMBYDOMAIN( INUMAINWAY IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, INUCROSSWAYINI IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, INUCROSSWAYEND IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, SBSYNONYMNAME IN AB_SYNONYM.DESCRIPTION%TYPE )
    IS
      NUSYNONYM_ID AB_SYNONYM.SYNONYM_ID%TYPE;
      NUWAY_SYNONYM_ID AB_WAY_SYNONYM.WAY_SYNONYM_ID%TYPE;
      NUWAY_DOMAIN_ID AB_WAY_DOMAIN.WAY_DOMAIN_ID%TYPE;
      NUWAYTYPEID AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE;
      SBWAYTYPEDESC AB_WAY_TYPE.DESCRIPTION%TYPE;
      SBSYNONYMNAMEFULL AB_SYNONYM.DESCRIPTION%TYPE;
    BEGIN
      NUWAYTYPEID := DAAB_WAY_BY_LOCATION.FNUGETWAY_TYPE_ID( INUMAINWAY );
      SBWAYTYPEDESC := DAAB_WAY_TYPE.FSBGETDESCRIPTION( NUWAYTYPEID );
      IF ( INSTR( UPPER( SBSYNONYMNAME ), UPPER( SBWAYTYPEDESC ) ) = 1 ) THEN
         SBSYNONYMNAMEFULL := SBSYNONYMNAME;
       ELSE
         SBSYNONYMNAMEFULL := SBWAYTYPEDESC || ' ' || SBSYNONYMNAME;
      END IF;
      AB_BOSYNONYM.INSERTSYNONYM( DAAB_WAY_BY_LOCATION.FNUGETGEOGRAP_LOCATION_ID( INUMAINWAY ), SBSYNONYMNAMEFULL, NUSYNONYM_ID );
      AB_BOWAYSYNONYM.INSERTWAYSYNONYM( INUMAINWAY, NUSYNONYM_ID, NULL, NUWAY_SYNONYM_ID );
      AB_BOWAYDOMAIN.INSERTWAY_DOMAIN( NUWAY_SYNONYM_ID, INUCROSSWAYINI, INUCROSSWAYEND, NUWAY_DOMAIN_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ADDSYNONYMBYDOMAIN;
   FUNCTION FSBGETADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN DAAB_ADDRESS.FSBGETADDRESS( INUADDRESSID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSADDRESSWITHOUTPARSER( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ISBISURBAN IN VARCHAR2 := NULL )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      SBADDRESS AB_ADDRESS.ADDRESS%TYPE;
      SBYES GE_PARAMETER.VALUE%TYPE;
      SBNO GE_PARAMETER.VALUE%TYPE;
      SBISURBAN GE_PARAMETER.VALUE%TYPE;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE VALEXISTADDRESS
       IS
         NUDUMMY NUMBER;
         SBDUMMY VARCHAR2( 200 );
         CURSOR CUAB_ADDRESS IS
SELECT address_id,address_parsed
            FROM   ab_address
            WHERE  address_parsed = upper(sbAddress) --  SAO75925
              AND  geograp_location_id      = inuGeograp_Location_ID;
       BEGIN
         IF ( CUAB_ADDRESS%ISOPEN ) THEN
            CLOSE CUAB_ADDRESS;
         END IF;
         OPEN CUAB_ADDRESS;
         FETCH CUAB_ADDRESS
            INTO NUDUMMY, SBDUMMY;
         IF ( CUAB_ADDRESS%NOTFOUND ) THEN
            CLOSE CUAB_ADDRESS;
            RETURN;
         END IF;
         CLOSE CUAB_ADDRESS;
         ERRORS.SETERROR( CNUDUP_MAIN_ADDRESS );
         RAISE EX.CONTROLLED_ERROR;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE INSERTADDRESS( ISBISURBAN IN GE_PARAMETER.VALUE%TYPE )
       IS
       BEGIN
         RCADDRESS.ADDRESS_ID := INUADDRESSID;
         RCADDRESS.GEOGRAP_LOCATION_ID := INUGEOGRAP_LOCATION_ID;
         RCADDRESS.ADDRESS := SBADDRESS;
         RCADDRESS.ADDRESS_PARSED := SBADDRESS;
         RCADDRESS.ACTIVE := SBYES;
         RCADDRESS.NEIGHBORTHOOD_ID := INUNEIGHBORTHOODID;
         RCADDRESS.ESTATE_NUMBER := AB_BOPREMISE.FNUINSERTPREMISE;
         RCADDRESS.IS_URBAN := ISBISURBAN;
         RCADDRESS.INSTALLED_LINES := 0;
         RCADDRESS.INSTALLED_AIR_LINES := 0;
         RCADDRESS.TRANSACT_LINES := 0;
         RCADDRESS.TRANSACT_AIR_LINES := 0;
         RCADDRESS.IS_MAIN := SBYES;
         IF ISBISURBAN = SBYES THEN
            RCADDRESS.SEGMENT_ID := AB_BOSEGMENT.FNUGETGENERICSEGMENT( INUGEOGRAP_LOCATION_ID, AB_BOSEGMENT.CSBSEGTYPEPORREV );
          ELSE
            RCADDRESS.SEGMENT_ID := AB_BOSEGMENT.FNUGETGENERICSEGMENT( INUGEOGRAP_LOCATION_ID, AB_BOSEGMENT.CSBSEGTYPERURAL );
         END IF;
         OSBADDRESSPARSED := RCADDRESS.ADDRESS_PARSED;
         UT_TRACE.TRACE( 'Id Nueva Direccion:[' || INUADDRESSID || ']osbAddressParsed[' || OSBADDRESSPARSED || ']', 3 );
         DAAB_ADDRESS.INSRECORD( RCADDRESS );
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.InsAddressWithoutParser. Direccion:[' || ISBADDRESS || ']', 2 );
      UT_TRACE.TRACE( 'Ubicacion:[' || INUGEOGRAP_LOCATION_ID || ']', 3 );
      SBYES := CSBYES;
      SBNO := CSBNO;
      VALINPUTDATA;
      SBISURBAN := TRIM( UPPER( ISBISURBAN ) );
      VALEXISTADDRESS;
      INSERTADDRESS( SBISURBAN );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSADDWITHOUTPARONNOTFOUND( INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ISBISURBAN IN GE_PARAMETER.VALUE%TYPE := NULL )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      SBADDRESS AB_ADDRESS.ADDRESS%TYPE;
      SBYES GE_PARAMETER.VALUE%TYPE;
      SBNO GE_PARAMETER.VALUE%TYPE;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      FUNCTION FBLEXISTADDRESS
       RETURN BOOLEAN
       IS
         CURSOR CUAB_ADDRESS IS
SELECT address_id,address_parsed
            FROM   ab_address
            WHERE  address_parsed = upper(sbAddress)    -- SAO75925
              AND  geograp_location_id      = inuGeograp_Location_ID;
       BEGIN
         ONUADDRESSID := -1;
         IF ( CUAB_ADDRESS%ISOPEN ) THEN
            CLOSE CUAB_ADDRESS;
         END IF;
         OPEN CUAB_ADDRESS;
         FETCH CUAB_ADDRESS
            INTO ONUADDRESSID, OSBADDRESSPARSED;
         UT_TRACE.TRACE( 'Id Direccion Existente:[' || ONUADDRESSID || ']osbAddressParsed[' || OSBADDRESSPARSED || ']', 3 );
         IF ( CUAB_ADDRESS%NOTFOUND ) THEN
            RETURN FALSE;
         END IF;
         RETURN TRUE;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE INSERTADDRESS( ISBISURBAN IN GE_PARAMETER.VALUE%TYPE )
       IS
       BEGIN
         RCADDRESS.ADDRESS_ID := AB_BOSEQUENCE.FNUNEXTADDRESS;
         RCADDRESS.GEOGRAP_LOCATION_ID := INUGEOGRAP_LOCATION_ID;
         RCADDRESS.ADDRESS := SBADDRESS;
         RCADDRESS.ADDRESS_PARSED := SBADDRESS;
         RCADDRESS.ACTIVE := SBYES;
         RCADDRESS.NEIGHBORTHOOD_ID := INUNEIGHBORTHOODID;
         RCADDRESS.ESTATE_NUMBER := AB_BOPREMISE.FNUINSERTPREMISE;
         RCADDRESS.IS_URBAN := ISBISURBAN;
         RCADDRESS.INSTALLED_LINES := 0;
         RCADDRESS.INSTALLED_AIR_LINES := 0;
         RCADDRESS.TRANSACT_LINES := 0;
         RCADDRESS.TRANSACT_AIR_LINES := 0;
         RCADDRESS.IS_MAIN := SBYES;
         IF ISBISURBAN = SBYES THEN
            RCADDRESS.SEGMENT_ID := AB_BOSEGMENT.FNUGETGENERICSEGMENT( INUGEOGRAP_LOCATION_ID, AB_BOSEGMENT.CSBSEGTYPEPORREV );
          ELSE
            RCADDRESS.SEGMENT_ID := AB_BOSEGMENT.FNUGETGENERICSEGMENT( INUGEOGRAP_LOCATION_ID, AB_BOSEGMENT.CSBSEGTYPERURAL );
         END IF;
         ONUADDRESSID := RCADDRESS.ADDRESS_ID;
         OSBADDRESSPARSED := RCADDRESS.ADDRESS_PARSED;
         UT_TRACE.TRACE( 'Id Nueva Direccion:[' || ONUADDRESSID || ']osbAddressParsed[' || OSBADDRESSPARSED || ']', 3 );
         DAAB_ADDRESS.INSRECORD( RCADDRESS );
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.InsAddressWithoutParser. Direccion:[' || ISBADDRESS || ']', 2 );
      UT_TRACE.TRACE( 'Ubicacion:[' || INUGEOGRAP_LOCATION_ID || ']', 3 );
      VALINPUTDATA;
      SBYES := CSBYES;
      SBNO := CSBNO;
      IF ( NOT FBLEXISTADDRESS ) THEN
         INSERTADDRESS( ISBISURBAN );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBGETCROSSWAYNUMBER( INUCROSSWAYNUMBER IN AB_ADDRESS.CROSS_WAY_NUMBER%TYPE )
    RETURN VARCHAR2
    IS
      SBGETCROSSWAYNUMBER VARCHAR2( 100 );
      CNUZERO CONSTANT NUMBER( 1 ) := 0;
    BEGIN
      IF INUCROSSWAYNUMBER < 0 AND AB_BOPARAMETER.FSBGETCROSS_WAY_INCL_ZERO = GE_BOCONSTANTS.CSBYES THEN
         SBGETCROSSWAYNUMBER := CNUZERO || TO_CHAR( INUCROSSWAYNUMBER * -1 );
       ELSE
         SBGETCROSSWAYNUMBER := INUCROSSWAYNUMBER;
      END IF;
      RETURN SBGETCROSSWAYNUMBER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXISTADDRESS( ISBADDRESS IN AB_ADDRESS.ADDRESS_PARSED%TYPE, INUGEOGRAP_LOCATION_ID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_ADDRESS.WAY_TYPE%TYPE, INUWAY_NUMBER IN AB_ADDRESS.WAY_NUMBER%TYPE, ISBWAY_LETTER IN AB_ADDRESS.WAY_LETTER%TYPE, ISBWAY_GEO_SECTOR IN AB_ADDRESS.WAY_GEO_SECTOR%TYPE, INUCROSS_WAY_TYPE IN AB_ADDRESS.CROSS_WAY_TYPE%TYPE, INUCROSS_WAY_NUMBER IN AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, ISBCROSS_WAY_LETTER IN AB_ADDRESS.CROSS_WAY_LETTER%TYPE, ISBCROSS_WAY_GEO_SECTOR IN AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, INUHOUSE_NUMBER IN AB_ADDRESS.HOUSE_NUMBER%TYPE, ISBHOUSE_LETTER IN AB_ADDRESS.HOUSE_LETTER%TYPE, ISBADDRESS_COMPLEMENT IN AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, ISBDESCRIPTION IN AB_ADDRESS.DESCRIPTION%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      CURSOR CUAB_ADDRESS IS
SELECT address_id
         FROM   ab_address
         WHERE address_parsed = upper(isbAddress)
         AND  geograp_location_id = inuGeograp_Location_ID
         AND  way_type            = inuWay_type
         AND  way_number          = inuWay_Number
         AND  nvl(upper(way_letter),'-')     = nvl(upper(isbWay_Letter), '-')
         AND  nvl(upper(way_geo_sector),'-') = nvl(upper(isbWay_Geo_sector),'-')
         AND  nvl(cross_way_type, -1)          = nvl(inuCross_Way_type, -1)
         AND  nvl(cross_way_number, -1)        = NVL(inuCross_Way_Number, -1)
         AND  nvl(upper(cross_way_letter),'-')    = nvl(upper(isbCross_Way_Letter),'-')
         AND  nvl(upper(cross_way_geo_sect),'-')  = nvl(upper(isbCross_Way_Geo_sector),'-')
         AND  NVL(house_number, -1)            = NVL(inuHouse_number, -1)
         AND  nvl(house_letter,'-')   = nvl(upper(isbHouse_letter),'-')
         AND  nvl(upper(address_complement),'-') = nvl(upper(isbAddress_complement),'-')
         AND  nvl(upper(description),'-')    = nvl(upper(isbDescription),'-');
    BEGIN
      ONUADDRESSID := -1;
      IF ( CUAB_ADDRESS%ISOPEN ) THEN
         CLOSE CUAB_ADDRESS;
      END IF;
      OPEN CUAB_ADDRESS;
      FETCH CUAB_ADDRESS
         INTO ONUADDRESSID;
      ONUADDRESSID := NVL( ONUADDRESSID, -1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUAB_ADDRESS%ISOPEN ) THEN
            CLOSE CUAB_ADDRESS;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUAB_ADDRESS%ISOPEN ) THEN
            CLOSE CUAB_ADDRESS;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETADDRESSDATA( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSDESC OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ONUNBHOODID OUT AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, OSBNBHOODDESC OUT GE_GEOGRA_LOCATION.DISPLAY_DESCRIPTION%TYPE, ONUGEOLOCID OUT AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, OSBGEOLOCDESC OUT GE_GEOGRA_LOCATION.DISPLAY_DESCRIPTION%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'PROCEDURE GetAddressData ...', 2 );
      DAAB_ADDRESS.ACCKEY( INUADDRESSID );
      OSBADDRESSDESC := DAAB_ADDRESS.FSBGETADDRESS_PARSED( INUADDRESSID );
      ONUNBHOODID := DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( INUADDRESSID );
      IF ( ONUNBHOODID IS NOT NULL ) THEN
         OSBNBHOODDESC := DAGE_GEOGRA_LOCATION.FSBGETDISPLAY_DESCRIPTION( ONUNBHOODID );
       ELSE
         OSBNBHOODDESC := '';
      END IF;
      ONUGEOLOCID := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( INUADDRESSID );
      IF ( ONUGEOLOCID IS NOT NULL ) THEN
         OSBGEOLOCDESC := DAGE_GEOGRA_LOCATION.FSBGETDISPLAY_DESCRIPTION( ONUGEOLOCID );
       ELSE
         OSBGEOLOCDESC := '';
      END IF;
      UT_TRACE.TRACE( 'END PROCEDURE GetAddressData', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETADDRESSDATA;
   FUNCTION FBLINCLUDEASIGNMENTADDRESS4( INUADDRESSCODE IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      UT_TRACE.TRACE( 'PROCEDURE fblIncludeAsignmentAddress4 ...', 2 );
      UT_TRACE.TRACE( 'END PROCEDURE fblIncludeAsignmentAddress4', 2 );
      RETURN ( DAAB_ADDRESS.FNUGETWAY_ID( INUADDRESSCODE ) IS NOT NULL );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLINCLUDEASIGNMENTADDRESS4;
   PROCEDURE VALBASICDATA( INUADDRESSCODE IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'PROCEDURE ValBasicData ...', 2 );
      AB_BOADDRESS.VALADDRESSISNOTNULL( INUADDRESSCODE );
      AB_BOADDRESS.VALIDATENULLAPP( INUADDRESSCODE );
      DAAB_ADDRESS.ACCKEY( INUADDRESSCODE );
      UT_TRACE.TRACE( 'END PROCEDURE ValBasicData ...', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALBASICDATA;
   PROCEDURE VALIDATENULLAPP( INUADDRESSCODE IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      CNUNULO_APP CONSTANT NUMBER := 10407;
      CSBDIVISION CONSTANT VARCHAR( 3 ) := PKCONSTANTE.CSBDIVISION;
      CSBMOD_CUS CONSTANT VARCHAR( 3 ) := PKCONSTANTE.CSBMOD_CUS;
    BEGIN
      PKERRORS.PUSH( 'pkParseAdressMgr.ValidateNullApp' );
      IF ( INUADDRESSCODE = PKCONSTANTE.NULLNUM ) THEN
         PKERRORS.SETERRORCODE( CSBDIVISION, CSBMOD_CUS, CNUNULO_APP );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALIDATENULLAPP;
   PROCEDURE INSADDRESSADDITIONALINFO( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUPREVIOUSVALUE IN AB_ADDRESS.PREVIOUS_VALUE%TYPE, ISBCOMMENT IN AB_ADDRESS.DESCRIPTION%TYPE, INUPREMISETYPEID IN AB_PREMISE.PREMISE_TYPE_ID%TYPE )
    IS
      NUPREMISEID AB_PREMISE.PREMISE_ID%TYPE;
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      RCPREMISE DAAB_PREMISE.STYAB_PREMISE;
      NEWDESCRIPTION AB_ADDRESS.DESCRIPTION%TYPE;
      BLUPDATEADDRESS BOOLEAN;
      BLUPDATEPREMISE BOOLEAN;
      BLUPDATEFATHERS BOOLEAN;
    BEGIN
      UT_TRACE.TRACE( 'BEGIN AB_BOAddress.InsAddressAdditionalInfo', 2 );
      NEWDESCRIPTION := SUBSTR( ISBCOMMENT, 1, 99 );
      BLUPDATEADDRESS := FALSE;
      BLUPDATEPREMISE := FALSE;
      BLUPDATEFATHERS := FALSE;
      RCADDRESS := DAAB_ADDRESS.FRCGETRECORD( INUADDRESSID );
      IF RCADDRESS.PREVIOUS_VALUE || 'a' != INUPREVIOUSVALUE || 'a' THEN
         UT_TRACE.TRACE( 'update previous_value', 2 );
         RCADDRESS.PREVIOUS_VALUE := INUPREVIOUSVALUE;
         BLUPDATEADDRESS := TRUE;
      END IF;
      IF RCADDRESS.DESCRIPTION || 'a' != NEWDESCRIPTION || 'a' THEN
         UT_TRACE.TRACE( 'update description', 2 );
         RCADDRESS.DESCRIPTION := NEWDESCRIPTION;
         BLUPDATEADDRESS := TRUE;
      END IF;
      IF BLUPDATEADDRESS THEN
         UT_TRACE.TRACE( 'update ADDRESS', 2 );
         DAAB_ADDRESS.UPDRECORD( RCADDRESS, CNUNOWAIT );
      END IF;
      NUPREMISEID := RCADDRESS.ESTATE_NUMBER;
      IF NUPREMISEID IS NOT NULL THEN
         RCPREMISE := DAAB_PREMISE.FRCGETRECORD( NUPREMISEID );
         IF INUPREMISETYPEID IS NOT NULL AND RCPREMISE.PREMISE_TYPE_ID || 'a' != INUPREMISETYPEID || 'a' THEN
            UT_TRACE.TRACE( 'update PremiseTypeId', 2 );
            RCPREMISE.PREMISE_TYPE_ID := INUPREMISETYPEID;
            BLUPDATEPREMISE := TRUE;
            BLUPDATEFATHERS := TRUE;
         END IF;
      END IF;
      IF BLUPDATEPREMISE THEN
         DAAB_PREMISE.UPDRECORD( RCPREMISE, CNUNOWAIT );
         IF BLUPDATEFATHERS THEN
            FOR RCADDRESS IN AB_BCADDRESS.CUFATHERADDRESS( INUADDRESSID )
             LOOP
               DAAB_PREMISE.UPDPREMISE_TYPE_ID( RCADDRESS.ESTATE_NUMBER, INUPREMISETYPEID, CNUNOWAIT );
            END LOOP;
         END IF;
      END IF;
      UT_TRACE.TRACE( 'END AB_BOAddress.InsAddressAdditionalInfo', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSADDRESSADDITIONALINFO;
   PROCEDURE VALRURALURBANFLAG( ISBFLAG IN VARCHAR2, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE )
    IS
    BEGIN
      IF ISBFLAG IS NULL THEN
         ERRORS.SETERROR( CNUIS_URBAN_NULL_FLAG_VALUE, ISBADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF UPPER( ISBFLAG ) NOT IN ( 'Y', 'N' ) THEN
         ERRORS.SETERROR( CNUIS_URBAN_INVALID_FLAG_VALUE, ISBADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETADDRCOORDINATES( NUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUCOORDINATEX OUT NUMBER, ONUCOORDINATEY OUT NUMBER )
    IS
      SHDIRECCION MDSYS.SDO_GEOMETRY;
    BEGIN
      VALBASICDATA( NUADDRESSID );
      SHDIRECCION := DAAB_ADDRESS.FSGGETSHAPE( NUADDRESSID );
      IF SHDIRECCION IS NULL THEN
         IF DAAB_ADDRESS.FRCGETRCDATA( NUADDRESSID ).SEGMENT_ID IS NOT NULL AND DAAB_ADDRESS.FRCGETRCDATA( NUADDRESSID ).HOUSE_NUMBER IS NOT NULL THEN
            SHDIRECCION := AB_BOGEOMETRIA.FSGGEOCODIFICARDIRECCION( DAAB_ADDRESS.FRCGETRCDATA( NUADDRESSID ).SEGMENT_ID, DAAB_ADDRESS.FRCGETRCDATA( NUADDRESSID ).HOUSE_NUMBER );
          ELSE
            ERRORS.SETERROR( CNUSEGMENT_OR_HEIGHT_NULL, DAAB_ADDRESS.FSBGETADDRESS( NUADDRESSID, 0 ) );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
      ONUCOORDINATEX := SHDIRECCION.SDO_POINT.X;
      ONUCOORDINATEY := SHDIRECCION.SDO_POINT.Y;
      IF ONUCOORDINATEX IS NULL OR ONUCOORDINATEY IS NULL THEN
         ERRORS.SETERROR( CNUCANT_COMPUTE_COORDINATES, DAAB_ADDRESS.FSBGETADDRESS( NUADDRESSID, 0 ) );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETADDRCOORDINATES( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ISBISURBAN IN AB_ADDRESS.IS_URBAN%TYPE, ONUCOORDINATEX OUT NUMBER, ONUCOORDINATEY OUT NUMBER )
    IS
      NUADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      SBADDRESSPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      SBSUCCESSMESSAGE VARCHAR2( 2000 );
      SHDIRECCION MDSYS.SDO_GEOMETRY;
      RCDIRPARSEADA AB_BOPARSER.TYRCDIRPARSEADA;
    BEGIN
      AB_BOADDRESS.VALADDRESSISNOTNULL( ISBADDRESS );
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
      AB_BOADDRESS.VALRURALURBANFLAG( ISBISURBAN, ISBADDRESS );
      NUADDRESSID := AB_BOPARSER.CHECKIFADDRESSEXISTSINDB( ISBADDRESS, INUGEOLOCATIONID );
      IF NUADDRESSID = -1 THEN
         IF UPPER( ISBISURBAN ) = GE_BOCONSTANTS.CSBYES THEN
            AB_BOPARSER.CHECKSYNTAX( ISBADDRESS, INUGEOLOCATIONID, RCDIRPARSEADA );
            IF RCDIRPARSEADA.NUSEGMENTO IS NOT NULL AND RCDIRPARSEADA.NUCASA IS NOT NULL THEN
               SHDIRECCION := AB_BOGEOMETRIA.FSGGEOCODIFICARDIRECCION( RCDIRPARSEADA.NUSEGMENTO, RCDIRPARSEADA.NUCASA );
             ELSE
               ERRORS.SETERROR( CNUSEGMENT_OR_HEIGHT_NULL, ISBADDRESS );
               RAISE EX.CONTROLLED_ERROR;
            END IF;
          ELSE
            ERRORS.SETERROR( CNURURAL_NOT_COORDINATES, ISBADDRESS );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF SHDIRECCION IS NOT NULL THEN
            ONUCOORDINATEX := SHDIRECCION.SDO_POINT.X;
            ONUCOORDINATEY := SHDIRECCION.SDO_POINT.Y;
         END IF;
       ELSE
         GETADDRCOORDINATES( NUADDRESSID, ONUCOORDINATEX, ONUCOORDINATEY );
      END IF;
      IF ONUCOORDINATEX IS NULL OR ONUCOORDINATEY IS NULL THEN
         ERRORS.SETERROR( CNUCANT_COMPUTE_COORDINATES, ISBADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETINITIALFORMVALUES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ORFFORMVALUES OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO AB_BOAddress.GetInitialFormValues', 1 );
      UT_TRACE.TRACE( 'Direccion [' || INUADDRESSID || ']', 2 );
      AB_BCADDRESS.GETINITIALFORMVALUES( INUADDRESSID, ORFFORMVALUES );
      UT_TRACE.TRACE( 'FIN AB_BOAddress.GetInitialFormValues', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.GetInitialFormValues', 1 );
         RAISE;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others AB_BOAddress.GetInitialFormValues', 1 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETINITIALFORMVALUES;
   FUNCTION FNUBASEADDRBYCHILD( INUADDRESSCHILDID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN AB_ADDRESS.ADDRESS_ID%TYPE
    IS
      NUADDRESSCHILDID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUFATHERADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
      NUCURCONCU NUMBER( 3 ) := 0;
    BEGIN
      UT_TRACE.TRACE( '[INICIO] AB_BOAddress.fnuBaseAddrByChild(' || INUADDRESSCHILDID || ')', 15 );
      NUADDRESSCHILDID := INUADDRESSCHILDID;
      LOOP
         NUFATHERADDRESSID := DAAB_ADDRESS.FNUGETFATHER_ADDRESS_ID( NUADDRESSCHILDID );
         EXIT WHEN NUFATHERADDRESSID IS NULL;
         IF ( NUCURCONCU >= CNUMAXCONCU ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT( CNUADDR_NOT_EXITS, INUADDRESSCHILDID );
         END IF;
         NUCURCONCU := NUCURCONCU + 1;
         NUADDRESSCHILDID := NUFATHERADDRESSID;
      END LOOP;
      UT_TRACE.TRACE( '[FIN] AB_BOAddress.fnuBaseAddrByChild -> ' || NUADDRESSCHILDID, 15 );
      RETURN NUADDRESSCHILDID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUBASEADDRBYCHILD;
   PROCEDURE GETSTRATUMBYADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUUSEID OUT AB_SEGMENTS.CATEGORY_%TYPE, OSBUSEDESC OUT CATEGORI.CATEDESC%TYPE, ONUSTRATUMID OUT AB_SEGMENTS.SUBCATEGORY_%TYPE, OSBSTRATUMDESC OUT SUBCATEG.SUCADESC%TYPE )
    IS
      NUSEGMENTID AB_SEGMENTS.SEGMENTS_ID%TYPE;
      RCSEGMENT DAAB_SEGMENTS.STYAB_SEGMENTS;
      RCPREMISE DAAB_PREMISE.STYAB_PREMISE;
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      ONUUSEID := NULL;
      OSBUSEDESC := NULL;
      ONUSTRATUMID := NULL;
      OSBSTRATUMDESC := NULL;
      IF INUADDRESSID IS NOT NULL THEN
         RCADDRESS := DAAB_ADDRESS.FRCGETRECORD( INUADDRESSID );
         IF RCADDRESS.ESTATE_NUMBER IS NOT NULL THEN
            RCPREMISE := DAAB_PREMISE.FRCGETRECORD( RCADDRESS.ESTATE_NUMBER );
            IF RCPREMISE.CATEGORY_ IS NOT NULL AND RCPREMISE.SUBCATEGORY_ IS NOT NULL THEN
               ONUUSEID := RCPREMISE.CATEGORY_;
               ONUSTRATUMID := RCPREMISE.SUBCATEGORY_;
            END IF;
         END IF;
         IF ( ONUUSEID IS NULL OR ONUSTRATUMID IS NULL ) AND RCADDRESS.SEGMENT_ID IS NOT NULL THEN
            UT_TRACE.TRACE( 'nuSegmentId [' || RCADDRESS.SEGMENT_ID || ']', 6 );
            RCSEGMENT := DAAB_SEGMENTS.FRCGETRECORD( RCADDRESS.SEGMENT_ID );
            ONUUSEID := RCSEGMENT.CATEGORY_;
            ONUSTRATUMID := RCSEGMENT.SUBCATEGORY_;
         END IF;
         IF ONUUSEID IS NOT NULL AND ONUSTRATUMID IS NOT NULL THEN
            OSBUSEDESC := PKTBLCATEGORI.FSBGETDESCRIPTION( ONUUSEID );
            OSBSTRATUMDESC := PKTBLSUBCATEG.FSBGETDESCRIPTION( ONUUSEID, ONUSTRATUMID );
         END IF;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETSTRATUMBYADDRESS;
   FUNCTION FNUGETCATEGORY( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN AB_SEGMENTS.CATEGORY_%TYPE
    IS
      NUUSEID AB_SEGMENTS.CATEGORY_%TYPE;
      SBUSEDESC CATEGORI.CATEDESC%TYPE;
      NUSTRATUMID AB_SEGMENTS.SUBCATEGORY_%TYPE;
      SBSTRATUMDESC SUBCATEG.SUCADESC%TYPE;
    BEGIN
      AB_BOADDRESS.GETSTRATUMBYADDRESS( INUADDRESSID, NUUSEID, SBUSEDESC, NUSTRATUMID, SBSTRATUMDESC );
      RETURN NUUSEID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETCATEGORY;
   FUNCTION FNUGETSUBCATEGORY( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN AB_SEGMENTS.SUBCATEGORY_%TYPE
    IS
      NUUSEID AB_SEGMENTS.CATEGORY_%TYPE;
      SBUSEDESC CATEGORI.CATEDESC%TYPE;
      NUSTRATUMID AB_SEGMENTS.SUBCATEGORY_%TYPE;
      SBSTRATUMDESC SUBCATEG.SUCADESC%TYPE;
    BEGIN
      AB_BOADDRESS.GETSTRATUMBYADDRESS( INUADDRESSID, NUUSEID, SBUSEDESC, NUSTRATUMID, SBSTRATUMDESC );
      RETURN NUSTRATUMID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETSUBCATEGORY;
   PROCEDURE INSADDRESSCOORDINATES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INULATDEGREE IN NUMBER, INULATMINUTES IN NUMBER, INULATDIRECTION IN NUMBER, INULONDEGREE IN NUMBER, INULONMINUTES IN NUMBER, INULONDIRECTION IN NUMBER )
    IS
      NUX NUMBER;
      NUY NUMBER;
      SGSHAPE MDSYS.SDO_GEOMETRY;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.InsAddressCoordinates.', 2 );
      NUX := 0;
      NUY := 0;
      NUX := INULONDIRECTION * ( AB_BOGEOMETRIA.FNUCONVDEGREETODEC( INULONDEGREE, INULONMINUTES ) );
      NUY := INULATDIRECTION * ( AB_BOGEOMETRIA.FNUCONVDEGREETODEC( INULATDEGREE, INULATMINUTES ) );
      SGSHAPE := AB_BOGEOMETRIA.FSGCREARPUNTO( NUX, NUY );
      DAAB_ADDRESS.UPDSHAPE( INUADDRESSID, SGSHAPE );
      UT_TRACE.TRACE( 'Finaliza: AB_BOAddress.InsAddressCoordinates.', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSADDRESSCOORDINATES;
   PROCEDURE GETADDRESSCOORDINATES( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONULATDEGREE OUT NUMBER, ONULATMINUTES OUT NUMBER, ONULATDIRECTION OUT NUMBER, ONULONDEGREE OUT NUMBER, ONULONMINUTES OUT NUMBER, ONULONDIRECTION OUT NUMBER )
    IS
      NUX NUMBER;
      NUY NUMBER;
      SGSHAPE MDSYS.SDO_GEOMETRY;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.GetAddressCoordinates.', 2 );
      SGSHAPE := DAAB_ADDRESS.FSGGETSHAPE( INUADDRESSID, 0 );
      UT_TRACE.TRACE( 'juan ', 2 );
      IF SGSHAPE IS NOT NULL THEN
         NUX := SGSHAPE.SDO_POINT.X;
         NUY := SGSHAPE.SDO_POINT.Y;
         UT_TRACE.TRACE( 'nuX ' || NUX, 2 );
         UT_TRACE.TRACE( 'nuY ' || NUY, 2 );
         IF NUX IS NULL OR NUY IS NULL THEN
            RETURN;
         END IF;
         AB_BOGEOMETRIA.CONVDECTODEGMIN( NUX, ONULONDEGREE, ONULONMINUTES );
         ONULONMINUTES := ROUND( ONULONMINUTES, 2 );
         IF ( ONULONDEGREE < -180 ) OR ( ONULONDEGREE > 180 ) THEN
            GE_BOERRORS.SETERRORCODE( CNUCOORDINATES );
         END IF;
         IF ( ONULONMINUTES > 59.99 ) THEN
            GE_BOERRORS.SETERRORCODE( CNUCOORDINATES );
         END IF;
         IF ( ( ONULONDEGREE = -180 ) OR ( ONULONDEGREE = 180 ) ) AND ( ONULONMINUTES > 0 ) THEN
            GE_BOERRORS.SETERRORCODE( CNUCOORDINATES );
         END IF;
         AB_BOGEOMETRIA.CONVDECTODEGMIN( NUY, ONULATDEGREE, ONULATMINUTES );
         ONULATMINUTES := ROUND( ONULATMINUTES, 2 );
         IF ( ONULATDEGREE < -90 ) OR ( ONULATDEGREE > 90 ) THEN
            GE_BOERRORS.SETERRORCODE( CNUCOORDINATES );
         END IF;
         IF ( ONULATMINUTES > 59.99 ) THEN
            GE_BOERRORS.SETERRORCODE( CNUCOORDINATES );
         END IF;
         IF ( ( ONULATDEGREE = -90 ) OR ( ONULATDEGREE = 90 ) ) AND ( ONULATMINUTES > 0 ) THEN
            GE_BOERRORS.SETERRORCODE( CNUCOORDINATES );
         END IF;
         IF ONULONDEGREE < 0 THEN
            ONULONDIRECTION := -1;
            ONULONDEGREE := ONULONDEGREE * -1;
          ELSE
            ONULONDIRECTION := 1;
         END IF;
         IF ONULATDEGREE < 0 THEN
            ONULATDIRECTION := -1;
            ONULATDEGREE := ONULATDEGREE * -1;
          ELSE
            ONULATDIRECTION := 1;
         END IF;
      END IF;
      UT_TRACE.TRACE( 'Finaliza: AB_BOAddress.GetAddressCoordinates.', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETADDRESSCOORDINATES;
   FUNCTION FSBGETISURBAN( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN DAAB_ADDRESS.FSBGETIS_URBAN( INUADDRESSID, 0 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETISURBAN;
   FUNCTION FSBGETISURBAN( ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE )
    RETURN VARCHAR2
    IS
      SBISURBAN AB_ADDRESS.IS_URBAN%TYPE;
      NUADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
      SBISURBAN := NULL;
      NUADDRESSID := AB_BCPARSER.FNUFINDADDRESS( ISBADDRESS, INUGEOLOCATIONID );
      IF NUADDRESSID != -1 THEN
         SBISURBAN := DAAB_ADDRESS.FSBGETIS_URBAN( NUADDRESSID, 0 );
      END IF;
      RETURN SBISURBAN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETISURBAN;
   PROCEDURE GETADDRESSTREE( INUFATHERADDRESSID IN AB_ADDRESS.FATHER_ADDRESS_ID%TYPE, IOTBADDRESS IN OUT GE_TYTBIDNUMBER, INUMAXCICLE IN NUMBER := 0 )
    IS
      CURSOR CUCHILDRENADDRESS( INUFATHERADDRESSID IN AB_ADDRESS.FATHER_ADDRESS_ID%TYPE ) IS
SELECT address_id FROM ab_address WHERE father_address_id = inuFatherAddressId;
      TBADDRESS DAAB_ADDRESS.TYTBADDRESS_ID;
      NUINDEX BINARY_INTEGER;
    BEGIN
      UT_TRACE.TRACE( 'Inicia proceso AB_BOAddress.getAddressTree [' || INUFATHERADDRESSID || ']', 4 );
      IF ( INUMAXCICLE >= 100 ) THEN
         RETURN;
      END IF;
      IF ( INUFATHERADDRESSID IS NULL ) THEN
         RETURN;
       ELSE
         IOTBADDRESS.EXTEND( 1 );
         IOTBADDRESS( IOTBADDRESS.COUNT ) := INUFATHERADDRESSID;
      END IF;
      OPEN CUCHILDRENADDRESS( INUFATHERADDRESSID );
      FETCH CUCHILDRENADDRESS
         BULK COLLECT INTO TBADDRESS;
      CLOSE CUCHILDRENADDRESS;
      NUINDEX := TBADDRESS.FIRST;
      WHILE ( NUINDEX IS NOT NULL )
       LOOP
         GETADDRESSTREE( TBADDRESS( NUINDEX ), IOTBADDRESS, INUMAXCICLE + 1 );
         NUINDEX := TBADDRESS.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'Termina proceso AB_BOAddress.getAddressTree', 4 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUCHILDRENADDRESS%ISOPEN ) THEN
            CLOSE CUCHILDRENADDRESS;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUCHILDRENADDRESS%ISOPEN ) THEN
            CLOSE CUCHILDRENADDRESS;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETADDRESSTREE;
   PROCEDURE CHANGEADDRESSTYPE( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      NUGEOGRAPLOCATION GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
      SBISURBAN AB_ADDRESS.IS_URBAN%TYPE;
      TBADDRESS GE_TYTBIDNUMBER := GE_TYTBIDNUMBER();
      NUSEGMENTID AB_SEGMENTS.SEGMENTS_ID%TYPE;
      SBADDRESSPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUERROR GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
      SBERROR GE_ERROR_LOG.DESCRIPTION%TYPE;
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      UT_TRACE.TRACE( 'INICIO AB_BOAddress.ChangeAddressType [' || INUADDRESSID || ']', 4 );
      NUGEOGRAPLOCATION := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( INUADDRESSID );
      UT_TRACE.TRACE( 'nuGeograpLocation [' || NUGEOGRAPLOCATION || ']', 5 );
      SBISURBAN := DAAB_ADDRESS.FSBGETIS_URBAN( INUADDRESSID );
      UT_TRACE.TRACE( 'sbIsUrban [' || SBISURBAN || ']', 5 );
      IF SBISURBAN = CSBYES THEN
         UT_TRACE.TRACE( 'Se convertira a Rural', 5 );
         UT_TRACE.TRACE( 'Se obtiene las direcciones hijas (hijas, nietas, etc) de la direccion dada', 5 );
         AB_BOADDRESS.GETADDRESSTREE( INUADDRESSID, TBADDRESS );
         NUSEGMENTID := AB_BOSEGMENT.FNUGETGENERICSEGMENT( NUGEOGRAPLOCATION, AB_BOSEGMENT.CSBSEGTYPERURAL );
         UT_TRACE.TRACE( 'nuSegmentId [' || NUSEGMENTID || ']', 5 );
         IF TBADDRESS.LAST IS NOT NULL THEN
            FOR I IN TBADDRESS.FIRST..TBADDRESS.LAST
             LOOP
               UT_TRACE.TRACE( 'Direccion Hija [' || TBADDRESS( I ) || ']', 6 );
               DAAB_ADDRESS.GETRECORD( TBADDRESS( I ), RCADDRESS );
               RCADDRESS.IS_URBAN := CSBNO;
               RCADDRESS.SEGMENT_ID := NUSEGMENTID;
               RCADDRESS.FATHER_ADDRESS_ID := NULL;
               RCADDRESS.IS_VALID := CSBYES;
               RCADDRESS.HOUSE_LETTER := NULL;
               RCADDRESS.HOUSE_NUMBER := NULL;
               RCADDRESS.WAY_ID := NULL;
               RCADDRESS.WAY_TYPE := NULL;
               RCADDRESS.WAY_LETTER := NULL;
               RCADDRESS.WAY_NUMBER := NULL;
               RCADDRESS.CROSS_WAY_TYPE := NULL;
               RCADDRESS.CROSS_WAY_ID := NULL;
               RCADDRESS.CROSS_WAY_LETTER := NULL;
               RCADDRESS.CROSS_WAY_NUMBER := NULL;
               RCADDRESS.CROSS_WAY_TYPE := NULL;
               DAAB_ADDRESS.UPDRECORD( RCADDRESS );
            END LOOP;
         END IF;
       ELSE
         UT_TRACE.TRACE( 'Se convertira a Urbana', 5 );
         IF ( FBLISFATHERADDRESS( INUADDRESSID ) ) THEN
            ERRORS.SETERROR( CNUERR901174 );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         DAAB_ADDRESS.UPDIS_URBAN( INUADDRESSID, CSBYES );
         DAAB_ADDRESS.UPDIS_VALID( INUADDRESSID, CSBNO );
         DAAB_ADDRESS.UPDFATHER_ADDRESS_ID( INUADDRESSID, NULL );
         NUSEGMENTID := AB_BOSEGMENT.FNUGETGENERICSEGMENT( NUGEOGRAPLOCATION, AB_BOSEGMENT.CSBSEGTYPEPORREV );
         UT_TRACE.TRACE( 'nuSegmentId [' || NUSEGMENTID || ']', 5 );
         DAAB_ADDRESS.UPDSEGMENT_ID( INUADDRESSID, NUSEGMENTID );
         UT_TRACE.TRACE( 'Proceso de Recuperacion a Direccion [' || INUADDRESSID || ']', 5 );
         AB_BOADDRESSPROCESSBYFILE.RECOVERYADDRESS( INUADDRESSID, NUGEOGRAPLOCATION, DAAB_ADDRESS.FSBGETADDRESS( INUADDRESSID ), SBADDRESSPARSED, NUERROR, SBERROR );
         IF NUERROR != 0 THEN
            UT_TRACE.TRACE( 'Error Recuperando la Direccion', 5 );
            ERRORS.GETERROR( NUERROR, SBERROR );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
      UT_TRACE.TRACE( 'FIN AB_BOAddress.ChangeAddressType', 4 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.ChangeAddressType', 4 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddress.ChangeAddressType', 4 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CHANGEADDRESSTYPE;
   FUNCTION FNUGETCICLFACT( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN NUMBER
    IS
      NUSEGMENTID AB_SEGMENTS.SEGMENTS_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.fnuGetCiclFact ', 1 );
      NUSEGMENTID := DAAB_ADDRESS.FNUGETSEGMENT_ID( INUADDRESSID, 0 );
      UT_TRACE.TRACE( 'Fin AB_BOAddress.fnuGetCiclFact ', 1 );
      RETURN DAAB_SEGMENTS.FNUGETCICLCODI( NUSEGMENTID, 0 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.fnuGetCiclFact ', 1 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others AB_BOAddress.fnuGetCiclFact ', 1 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETCICLFACT;
   FUNCTION FRFGETCHILDADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN CONSTANTS.TYREFCURSOR
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicio AB_BOAddress.frfGetChildAddr [' || INUADDRESSID || '] FIN', 1 );
      RETURN AB_BCADDRESS.FRFGETCHILDADDRID( INUADDRESSID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.frfGetChildAddr ', 1 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others AB_BOAddress.frfGetChildAddr ', 1 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FRFGETCHILDADDR;
   FUNCTION FNUGETBASEADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN NUMBER
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicio AB_BOAddress.fnuGetBaseAddr [' || INUADDRESSID || '] Fin', 1 );
      RETURN AB_BCADDRESS.FNUGETBASEADDR( INUADDRESSID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.fnuGetBaseAddr ', 1 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others AB_BOAddress.fnuGetBaseAddr ', 1 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETBASEADDR;
   FUNCTION FSBISBASEADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR2
    IS
      NUADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio AB_BOAddress.fsbIsBaseAddress [' || INUADDRESSID || ']', 1 );
      NUADDRESSID := DAAB_ADDRESS.FNUGETFATHER_ADDRESS_ID( INUADDRESSID );
      IF ( NUADDRESSID IS NULL ) THEN
         UT_TRACE.TRACE( 'Fin AB_BOAddress.fsbIsBaseAddress Retorna Yes.', 1 );
         RETURN CSBYES;
      END IF;
      UT_TRACE.TRACE( 'Fin AB_BOAddress.fsbIsBaseAddress Retorna No.', 1 );
      RETURN CSBNO;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.fsbIsBaseAddress ', 1 );
         RETURN CSBNO;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others AB_BOAddress.fsbIsBaseAddress ', 1 );
         RETURN CSBNO;
   END FSBISBASEADDRESS;
   FUNCTION FBLISFATHERADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN BOOLEAN
    IS
      NUADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio AB_BOAddress.fblIsFatherAddress [' || INUADDRESSID || ']', 1 );
      IF ( AB_BCADDRESS.FNUGETCHILDADDRID( INUADDRESSID ) IS NULL ) THEN
         UT_TRACE.TRACE( 'Fin AB_BOAddress.fblIsFatherAddress Retorna false.', 1 );
         RETURN FALSE;
      END IF;
      UT_TRACE.TRACE( 'Fin AB_BOAddress.fblIsFatherAddress Retorna true.', 1 );
      RETURN TRUE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.fblIsFatherAddress ', 1 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others AB_BOAddress.fblIsFatherAddress ', 1 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLISFATHERADDRESS;
   PROCEDURE VALASSRURALBASEADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      SBADDRESS AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUFATHERADDID AB_ADDRESS.FATHER_ADDRESS_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INICIO AB_BOAddress.ValAssRuralBaseAddr', 2 );
      UT_TRACE.TRACE( 'Direccion [' || INUADDRESSID || ']', 2 );
      IF ( DAAB_ADDRESS.FSBGETIS_URBAN( INUADDRESSID, 0 ) = CSBYES ) THEN
         ERRORS.SETERROR( CNUERR901246 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( FBLISFATHERADDRESS( INUADDRESSID ) ) THEN
         ERRORS.SETERROR( CNUERR901174 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      NUFATHERADDID := DAAB_ADDRESS.FNUGETFATHER_ADDRESS_ID( INUADDRESSID, 0 );
      IF ( NUFATHERADDID IS NOT NULL ) THEN
         SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS_PARSED( NUFATHERADDID, 0 );
         ERRORS.SETERROR( CNUERR901247, SBADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( DAAB_ADDRESS.FSBGETIS_MAIN( INUADDRESSID, 0 ) = CSBNO ) THEN
         SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS_PARSED( INUADDRESSID, 0 );
         ERRORS.SETERROR( CNUERR901739, SBADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'FIN AB_BOAddress.ValAssRuralBaseAddr', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.ValAssRuralBaseAddr', 4 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddress.ValAssRuralBaseAddr', 4 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALASSRURALBASEADDR;
   PROCEDURE VALDESRURALBASEADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      SBADDRESS AB_ADDRESS.ADDRESS_PARSED%TYPE;
      NUFATHERADDID AB_ADDRESS.FATHER_ADDRESS_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INICIO AB_BOAddress.ValDesRuralBaseAddr', 2 );
      UT_TRACE.TRACE( 'Direccion [' || INUADDRESSID || ']', 2 );
      IF ( DAAB_ADDRESS.FSBGETIS_URBAN( INUADDRESSID, 0 ) = CSBYES ) THEN
         ERRORS.SETERROR( CNUERR901246 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( DAAB_ADDRESS.FNUGETFATHER_ADDRESS_ID( INUADDRESSID, 0 ) IS NULL ) THEN
         ERRORS.SETERROR( CNUERR901249 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'FIN AB_BOAddress.ValDesRuralBaseAddr', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.ValDesRuralBaseAddr', 4 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddress.ValDesRuralBaseAddr', 4 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALDESRURALBASEADDR;
   PROCEDURE VALFATHERADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUFATHERADDID IN AB_ADDRESS.FATHER_ADDRESS_ID%TYPE )
    IS
      RCFATHERADD DAAB_ADDRESS.STYAB_ADDRESS;
      SBADDRESS AB_ADDRESS.ADDRESS_PARSED%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INICIO AB_BOAddress.ValFatherAddress', 1 );
      DAAB_ADDRESS.GETRECORD( INUFATHERADDID, RCFATHERADD );
      IF ( INUADDRESSID = INUFATHERADDID ) THEN
         ERRORS.SETERROR( CNUERR901517 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( RCFATHERADD.IS_URBAN = CSBYES ) THEN
         ERRORS.SETERROR( CNUERR901246 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( RCFATHERADD.FATHER_ADDRESS_ID IS NOT NULL ) THEN
         ERRORS.SETERROR( CNUERR901174 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( RCFATHERADD.GEOGRAP_LOCATION_ID != DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID( INUADDRESSID ) ) THEN
         ERRORS.SETERROR( CNUERR901248 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( DAAB_ADDRESS.FSBGETIS_MAIN( INUADDRESSID, 0 ) = CSBNO ) THEN
         SBADDRESS := DAAB_ADDRESS.FSBGETADDRESS_PARSED( INUADDRESSID, 0 );
         ERRORS.SETERROR( CNUERR901739, SBADDRESS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'FIN AB_BOAddress.ValFatherAddress', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.ValFatherAddress', 4 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddress.ValFatherAddress', 4 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALFATHERADDRESS;
   PROCEDURE ASSRURALBASEADDR( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, INUFATHERADDID IN AB_ADDRESS.FATHER_ADDRESS_ID%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO AB_BOAddress.AssRuralBaseAddr', 2 );
      UT_TRACE.TRACE( 'Direccion [' || INUADDRESSID || '] Direccion padre [' || INUFATHERADDID || ']', 2 );
      DAAB_ADDRESS.UPDFATHER_ADDRESS_ID( INUADDRESSID, INUFATHERADDID );
      UT_TRACE.TRACE( 'FIN AB_BOAddress.AssRuralBaseAddr', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.AssRuralBaseAddr', 2 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddress.AssRuralBaseAddr', 2 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ASSRURALBASEADDR;
   PROCEDURE INSADDRESS( INUGEOGRAPLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBISURBAN IN AB_ADDRESS.IS_URBAN%TYPE := NULL, ISBSHAPE IN VARCHAR2, ISBVERIFIED IN AB_ADDRESS.VERIFIED%TYPE := 'N', ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      SBADDRESSPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE := NULL;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.InsAddress', 2 );
      AB_BOADDRESSPARSER.CREAACTUALIZADIRECCION( INUGEOGRAPLOCATIONID, ISBADDRESS, INUNEIGHBORTHOODID, ISBISURBAN, ONUADDRESSID, SBADDRESSPARSED, ISBVERIFIED );
      UT_TRACE.TRACE( ONUADDRESSID || ' Direccion Parseada:[' || SBADDRESSPARSED || ']', 3 );
      AB_BOADDRESS.UPDSHAPEADDRESS( ONUADDRESSID, ISBSHAPE );
      UT_TRACE.TRACE( 'Finaliza: AB_BOAddress.InsAddress', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSADDRESS;
   PROCEDURE UPDSHAPEADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBSHAPE IN VARCHAR2 )
    IS
      SGSHAPE AB_ADDRESS.SHAPE%TYPE;
      SBSHAPE VARCHAR2( 2000 );
      NUNUMBERPOINTS NUMBER := 1;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.updShapeAddress [' || INUADDRESSID || '] [' || ISBSHAPE || ']', 2 );
      IF ISBSHAPE IS NOT NULL THEN
         SBSHAPE := ISBSHAPE;
         UT_TRACE.TRACE( 'sbShape [' || SBSHAPE || ']', 2 );
         SGSHAPE := AB_BOGEOMETRIA.FSGCREATEPOINT( ISBSHAPE );
         DAAB_ADDRESS.UPDSHAPE( INUADDRESSID, SGSHAPE, 0 );
      END IF;
      UT_TRACE.TRACE( 'Finaliza: AB_BOAddress.updShapeAddress', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDSHAPEADDRESS;
   PROCEDURE VALIDATEIDADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      NUADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'INICIO AB_BOAddress.ValidateIdAddress', 2 );
      IF ( INUADDRESSID IS NULL ) THEN
         ERRORS.SETERROR( CNUNULL_VALUE, CSBADDRESS );
         RAISE EX.CONTROLLED_ERROR;
       ELSE
         NUADDRESSID := INUADDRESSID;
         DAAB_ADDRESS.ACCKEY( NUADDRESSID );
      END IF;
      UT_TRACE.TRACE( 'FIN AB_BOAddress.ValidateIdAddress', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'EXCEPTION CONTROLLED_ERROR AB_BOAddress.ValidateIdAddress', 2 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'EXCEPTION OTHERS AB_BOAddress.ValidateIdAddress', 2 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALIDATEIDADDRESS;
   PROCEDURE DELETEADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BOAddress.DeleteAddress', 2 );
      DAAB_ADDRESS.DELRECORD( INUADDRESSID );
      UT_TRACE.TRACE( 'Finaliza: AB_BOAddress.DeleteAddress', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DELETEADDRESS;
   PROCEDURE GETADDRESSBYID( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUPROCESSNUMBER OUT AB_ADDRESS.PROCESS_NUMBER%TYPE, ONUSEGMENTID OUT AB_ADDRESS.SEGMENT_ID%TYPE, ONUWAYID OUT AB_ADDRESS.WAY_ID%TYPE, ONUWAYTYPE OUT AB_ADDRESS.WAY_TYPE%TYPE, ONUWAYNUMBER OUT AB_ADDRESS.WAY_NUMBER%TYPE, OSBWAYLETTER OUT AB_ADDRESS.WAY_LETTER%TYPE, OSBWAYGEOSECTOR OUT AB_ADDRESS.WAY_GEO_SECTOR%TYPE, ONUCROSSWAYID OUT AB_ADDRESS.CROSS_WAY_ID%TYPE, ONUGEOGRAPLOCATIONID OUT AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ONUCROSSWAYTYPE OUT AB_ADDRESS.CROSS_WAY_TYPE%TYPE, ONUCROSSWAYNUMBER OUT AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, OSBCROSSWAYLETTER OUT AB_ADDRESS.CROSS_WAY_LETTER%TYPE, OSBCROSSWAYGEOSECT OUT AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, OSBADDRESS OUT AB_ADDRESS.ADDRESS%TYPE, OSBISURBAN OUT AB_ADDRESS.IS_URBAN%TYPE, ONUHOUSENUMBER OUT AB_ADDRESS.HOUSE_NUMBER%TYPE, OSBHOUSELETTER OUT AB_ADDRESS.HOUSE_LETTER%TYPE, OSBADDRESSCOMPLEMENT OUT AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, ONUINSTALLEDLINES OUT AB_ADDRESS.INSTALLED_LINES%TYPE, ONUTRANSACTLINES OUT AB_ADDRESS.TRANSACT_LINES%TYPE, ONUINSTALLEDAIRLINES OUT AB_ADDRESS.INSTALLED_AIR_LINES%TYPE, ONUTRANSACTAIRLINES OUT AB_ADDRESS.TRANSACT_AIR_LINES%TYPE, ONUESTATENUMBER OUT AB_ADDRESS.ESTATE_NUMBER%TYPE, OSBISMAIN OUT AB_ADDRESS.IS_MAIN%TYPE, OSBACTIVE OUT AB_ADDRESS.ACTIVE%TYPE, OSBDESCRIPTION OUT AB_ADDRESS.DESCRIPTION%TYPE, ONUZIPCODEID OUT AB_ADDRESS.ZIP_CODE_ID%TYPE, ONUNEIGHBORTHOODID OUT AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, OSBCADASTRALID OUT AB_ADDRESS.CADASTRAL_ID%TYPE, ONUGEOCODEID OUT AB_ADDRESS.GEOCODE_ID%TYPE, ONUGRAMMARID OUT AB_ADDRESS.GRAMMAR_ID%TYPE, OSBEXTENDEDZIP OUT AB_ADDRESS.EXTENDED_ZIP%TYPE, OSBSHAPE OUT VARCHAR2, INUFATHERADDRESSID OUT AB_ADDRESS.FATHER_ADDRESS_ID%TYPE, OSBPREVIOUSVALUE OUT AB_ADDRESS.PREVIOUS_VALUE%TYPE, OSBISVALID OUT AB_ADDRESS.IS_VALID%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
    BEGIN
      UT_TRACE.TRACE( 'INICIO AB_BOAddress.getAddressById', 2 );
      DAAB_ADDRESS.GETRECORD( INUADDRESSID, RCADDRESS );
      ONUPROCESSNUMBER := RCADDRESS.PROCESS_NUMBER;
      ONUSEGMENTID := RCADDRESS.SEGMENT_ID;
      ONUWAYID := RCADDRESS.WAY_ID;
      ONUWAYTYPE := RCADDRESS.WAY_TYPE;
      ONUWAYNUMBER := RCADDRESS.WAY_NUMBER;
      OSBWAYLETTER := RCADDRESS.WAY_LETTER;
      OSBWAYGEOSECTOR := RCADDRESS.WAY_GEO_SECTOR;
      ONUCROSSWAYID := RCADDRESS.CROSS_WAY_ID;
      ONUGEOGRAPLOCATIONID := RCADDRESS.GEOGRAP_LOCATION_ID;
      ONUCROSSWAYTYPE := RCADDRESS.CROSS_WAY_TYPE;
      ONUCROSSWAYNUMBER := RCADDRESS.CROSS_WAY_NUMBER;
      OSBCROSSWAYLETTER := RCADDRESS.CROSS_WAY_LETTER;
      OSBCROSSWAYGEOSECT := RCADDRESS.CROSS_WAY_GEO_SECT;
      OSBADDRESS := RCADDRESS.ADDRESS;
      OSBISURBAN := RCADDRESS.IS_URBAN;
      ONUHOUSENUMBER := RCADDRESS.HOUSE_NUMBER;
      OSBHOUSELETTER := RCADDRESS.HOUSE_LETTER;
      OSBADDRESSCOMPLEMENT := RCADDRESS.ADDRESS_COMPLEMENT;
      OSBADDRESSPARSED := RCADDRESS.ADDRESS_PARSED;
      ONUINSTALLEDLINES := RCADDRESS.INSTALLED_LINES;
      ONUTRANSACTLINES := RCADDRESS.TRANSACT_LINES;
      ONUINSTALLEDAIRLINES := RCADDRESS.INSTALLED_AIR_LINES;
      ONUTRANSACTAIRLINES := RCADDRESS.TRANSACT_AIR_LINES;
      ONUESTATENUMBER := RCADDRESS.ESTATE_NUMBER;
      OSBISMAIN := RCADDRESS.IS_MAIN;
      OSBACTIVE := RCADDRESS.ACTIVE;
      OSBDESCRIPTION := RCADDRESS.DESCRIPTION;
      ONUZIPCODEID := RCADDRESS.ZIP_CODE_ID;
      ONUNEIGHBORTHOODID := RCADDRESS.NEIGHBORTHOOD_ID;
      OSBCADASTRALID := RCADDRESS.CADASTRAL_ID;
      ONUGEOCODEID := RCADDRESS.GEOCODE_ID;
      ONUGRAMMARID := RCADDRESS.GRAMMAR_ID;
      OSBEXTENDEDZIP := RCADDRESS.EXTENDED_ZIP;
      OSBSHAPE := AB_BOGEOMETRIA.FSBORDINATESTOSTRING( RCADDRESS.SHAPE );
      INUFATHERADDRESSID := RCADDRESS.FATHER_ADDRESS_ID;
      OSBPREVIOUSVALUE := RCADDRESS.PREVIOUS_VALUE;
      OSBISVALID := RCADDRESS.IS_VALID;
      UT_TRACE.TRACE( 'FIN AB_BOAddress.getAddressById', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR  AB_BOAddress.getAddressByIde', 2 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddress.getAddressById', 2 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETADDRESSBYID;
   PROCEDURE VALIDATENEWADDRESS( RCSEGMENT IN DAAB_SEGMENTS.STYAB_SEGMENTS, INUHOUSENUMBER IN AB_ADDRESS.HOUSE_NUMBER%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( '[INICIO] AB_BOAddress.ValidateNewAddress.
                        NumberHouse[' || INUHOUSENUMBER || ']', 10 );
      IF ( INUHOUSENUMBER IS NULL OR INUHOUSENUMBER < 0 ) THEN
         GE_BOERRORS.SETERRORCODE( 901838 );
      END IF;
      UT_TRACE.TRACE( 'Rango del segmento[' || RCSEGMENT.INIT_NUMBER || '] -' || RCSEGMENT.FINAL_NUMBER || ']', 10 );
      IF ( INUHOUSENUMBER < RCSEGMENT.INIT_NUMBER OR INUHOUSENUMBER > RCSEGMENT.FINAL_NUMBER ) THEN
         GE_BOERRORS.SETERRORCODEARGUMENT( 901837, INUHOUSENUMBER || '|' || RCSEGMENT.INIT_NUMBER || '|' || RCSEGMENT.FINAL_NUMBER );
      END IF;
      UT_TRACE.TRACE( 'Tipo Segmento[' || RCSEGMENT.SEGMENT_TYPE || ']', 10 );
      IF ( RCSEGMENT.SEGMENT_TYPE = AB_BOSEGMENT.CSBSEGTYPECONSIS ) THEN
         UT_TRACE.TRACE( 'Paridad[' || RCSEGMENT.PARITY || '] = ' || INUHOUSENUMBER MOD 2, 10 );
         IF ( RCSEGMENT.PARITY = AB_BOCONSTANTS.CSBPAIR ) THEN
            IF ( INUHOUSENUMBER MOD 2 = 1 ) THEN
               GE_BOERRORS.SETERRORCODE( 901839 );
            END IF;
          ELSIF ( RCSEGMENT.PARITY = AB_BOCONSTANTS.CSBODD ) THEN
            IF ( INUHOUSENUMBER MOD 2 = 0 ) THEN
               GE_BOERRORS.SETERRORCODE( 901840 );
            END IF;
         END IF;
      END IF;
      UT_TRACE.TRACE( '[FIN] AB_BOAddress.ValidateNewAddress', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Error : ex.CONTROLLED_ERROR', 10 );
         RAISE;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'Error : others', 12 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALIDATENEWADDRESS;
   PROCEDURE INSERTADDRESSBYSEG( INUSEGMENTID IN AB_SEGMENTS.SEGMENTS_ID%TYPE, INUHOUSENUMBER IN AB_ADDRESS.HOUSE_NUMBER%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
      RCSEGMENT DAAB_SEGMENTS.STYAB_SEGMENTS;
      SBADDRESS AB_ADDRESS.ADDRESS_PARSED%TYPE;
      SBISURBAN AB_ADDRESS.IS_URBAN%TYPE;
      SBADDRESSPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
    BEGIN
      UT_TRACE.TRACE( '[INICIO] AB_BOAddress.InsertAddressBySeg: SegmentId[' || INUSEGMENTID || '] -
                        HouseNumber[' || INUHOUSENUMBER || ']', 10 );
      RCSEGMENT := DAAB_SEGMENTS.FRCGETRECORD( INUSEGMENTID );
      VALIDATENEWADDRESS( RCSEGMENT, INUHOUSENUMBER );
      IF ( RCSEGMENT.SEGMENT_TYPE = AB_BOSEGMENT.CSBSEGTYPERURAL ) THEN
         SBISURBAN := GE_BCCONSTANTS.CSBNO;
       ELSE
         SBISURBAN := GE_BCCONSTANTS.CSBYES;
      END IF;
      SBADDRESS := DAAB_WAY_BY_LOCATION.FSBGETDESCRIPTION( RCSEGMENT.WAY_ID );
      IF ( RCSEGMENT.CROSS_WAY_ID IS NOT NULL ) THEN
         SBADDRESS := SBADDRESS || ' ' || DAAB_WAY_BY_LOCATION.FSBGETDESCRIPTION( RCSEGMENT.CROSS_WAY_ID );
      END IF;
      SBADDRESS := SBADDRESS || ' ' || GE_BOPARAMETER.FSBGET( 'TOKEN_CASA' ) || ' ' || INUHOUSENUMBER;
      AB_BOADDRESSPARSER.CREAACTUALIZADIRECCION( RCSEGMENT.GEOGRAP_LOCATION_ID, SBADDRESS, RCSEGMENT.NEIGHBORHOOD_ID, SBISURBAN, ONUADDRESSID, SBADDRESSPARSED );
      UT_TRACE.TRACE( '[FIN] AB_BOAddress.InsertAddressBySeg. AddressId[' || ONUADDRESSID || ']
                        AddressParsed[' || SBADDRESSPARSED || ']', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Error : ex.CONTROLLED_ERROR', 10 );
         RAISE;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'Error : others', 12 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSERTADDRESSBYSEG;
   FUNCTION FNUGETCOOWNERSHIPBYADD( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN AB_PREMISE.COOWNERSHIP_RATIO%TYPE
    IS
      NUPREMISEID AB_PREMISE.PREMISE_ID%TYPE;
      NUCOOWNERSHIPRATIO AB_PREMISE.COOWNERSHIP_RATIO%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio AB_BOAddress.fnuGetCoownerShipByAdd Direccion [' || INUADDRESSID || ']', 1 );
      DAAB_ADDRESS.ACCKEY( INUADDRESSID );
      NUPREMISEID := DAAB_ADDRESS.FNUGETESTATE_NUMBER( INUADDRESSID );
      NUCOOWNERSHIPRATIO := DAAB_PREMISE.FNUGETCOOWNERSHIP_RATIO( NUPREMISEID, 0 );
      UT_TRACE.TRACE( 'Fin AB_BOAddress.fnuGetCoownerShipByAdd Coeficiente [' || NUCOOWNERSHIPRATIO || ']', 1 );
      RETURN NUCOOWNERSHIPRATIO;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.fnuGetCoownerShipByAdd ', 1 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'others AB_BOAddress.fnuGetCoownerShipByAdd ', 1 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETCOOWNERSHIPBYADD;
   FUNCTION FSBGETISVALID( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR
    IS
      SBISVALID AB_ADDRESS.IS_VALID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'BEGIN AB_BOAddress.fsbGetIsValid', 2 );
      UT_TRACE.TRACE( 'Parametro: inuAddressId -> ' || INUADDRESSID, 3 );
      SBISVALID := DAAB_ADDRESS.FSBGETIS_VALID( INUADDRESSID, 0 );
      IF ( SBISVALID IS NULL ) THEN
         SBISVALID := 'N';
      END IF;
      UT_TRACE.TRACE( 'Retorno: ' || SBISVALID, 3 );
      UT_TRACE.TRACE( 'END AB_BOAddress.fsbGetIsValid', 2 );
      RETURN SBISVALID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETISVALID;
   FUNCTION FSBGETISVERIFIED( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    RETURN VARCHAR
    IS
      SBISVERIFIED AB_ADDRESS.VERIFIED%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'BEGIN AB_BOAddress.fsbGetIsVerified', 2 );
      UT_TRACE.TRACE( 'Parametro: inuAddressId -> ' || INUADDRESSID, 3 );
      SBISVERIFIED := DAAB_ADDRESS.FSBGETVERIFIED( INUADDRESSID, 0 );
      IF ( SBISVERIFIED IS NULL ) THEN
         SBISVERIFIED := 'N';
      END IF;
      UT_TRACE.TRACE( 'Retorno: ' || SBISVERIFIED, 3 );
      UT_TRACE.TRACE( 'END AB_BOAddress.fsbGetIsVerified', 2 );
      RETURN SBISVERIFIED;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETISVERIFIED;
   PROCEDURE VERIFYADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'BEGIN AB_BOAddress.VerifyAddress', 2 );
      UT_TRACE.TRACE( 'Parametro: inuAddressId -> ' || INUADDRESSID, 3 );
      DAAB_ADDRESS.ACCKEY( INUADDRESSID );
      DAAB_ADDRESS.UPDVERIFIED( INUADDRESSID, CSBYES );
      UT_TRACE.TRACE( 'END AB_BOAddress.VerifyAddress', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VERIFYADDRESS;
   PROCEDURE GETSEGMENTSUBCATEGORY( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUSUBCATEGORYID OUT AB_SEGMENTS.CATEGORY_%TYPE )
    IS
      NUSEGMENTID AB_SEGMENTS.SEGMENTS_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'BEGIN AB_BOAddress.GetSegmentSubcategory', 2 );
      UT_TRACE.TRACE( 'Parametro: inuAddressId -> ' || INUADDRESSID, 3 );
      NUSEGMENTID := DAAB_ADDRESS.FNUGETSEGMENT_ID( INUADDRESSID, 0 );
      UT_TRACE.TRACE( 'Segmento: ' || NUSEGMENTID, 3 );
      ONUSUBCATEGORYID := DAAB_SEGMENTS.FNUGETSUBCATEGORY_( NUSEGMENTID, 0 );
      UT_TRACE.TRACE( 'Parametro: onuSubcategoryId -> ' || ONUSUBCATEGORYID, 3 );
      UT_TRACE.TRACE( 'END AB_BOAddress.GetSegmentSubcategory', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETSEGMENTSUBCATEGORY;
   PROCEDURE DELUNUSEDADDRESS( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBOTHERADDRESS IN VARCHAR2 )
    IS
      NUFATHERID AB_ADDRESS.ADDRESS_ID%TYPE;
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      FUNCTION FBLCANDELETE( INUFATHERID IN AB_ADDRESS.ADDRESS_ID%TYPE, ISBOTHERADDRESS IN VARCHAR2 )
       RETURN BOOLEAN
       IS
         TBLINEDATA UT_STRING.TYTB_STRING;
       BEGIN
         UT_TRACE.TRACE( 'Padre ' || INUFATHERID, 6 );
         UT_TRACE.TRACE( 'Padres ' || ISBOTHERADDRESS, 6 );
         IF ( ISBOTHERADDRESS IS NULL ) THEN
            RETURN TRUE;
         END IF;
         UT_STRING.EXTSTRING( ISBOTHERADDRESS, '|', TBLINEDATA );
         FOR X IN TBLINEDATA.FIRST..TBLINEDATA.LAST
          LOOP
            IF ( TBLINEDATA( X ) || 'a' = INUFATHERID || 'a' ) THEN
               RETURN FALSE;
            END IF;
         END LOOP;
         RETURN TRUE;
      END FBLCANDELETE;
      PROCEDURE DELPREMISE( INUPREMISEID IN AB_PREMISE.PREMISE_ID%TYPE )
       IS
       BEGIN
         UT_TRACE.TRACE( 'predio a borrar ' || INUPREMISEID, 4 );
         DAAB_PREMISE.DELRECORD( INUPREMISEID );
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'No se puede borrar el predio', 4 );
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            UT_TRACE.TRACE( 'No se puede borrar el predio', 4 );
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END DELPREMISE;
      PROCEDURE DELFATHER( INUFATHERADDID IN AB_ADDRESS.ADDRESS_ID%TYPE )
       IS
         NUFATHERID AB_ADDRESS.ADDRESS_ID%TYPE;
         RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
       BEGIN
         UT_TRACE.TRACE( 'Padre [' || INUADDRESSID || ']', 3 );
         DAAB_ADDRESS.GETRECORD( INUFATHERADDID, RCADDRESS );
         NUFATHERID := RCADDRESS.FATHER_ADDRESS_ID;
         DAAB_ADDRESS.DELRECORD( RCADDRESS.ADDRESS_ID, 0 );
         DELPREMISE( RCADDRESS.ESTATE_NUMBER );
         IF ( ( NUFATHERID IS NOT NULL ) AND FBLCANDELETE( NUFATHERID, ISBOTHERADDRESS ) ) THEN
            BEGIN
               DELFATHER( NUFATHERID );
             EXCEPTION
               WHEN EX.CONTROLLED_ERROR THEN
                  UT_TRACE.TRACE( 'No se pudo borrar padre ' || NUFATHERID, 6 );
               WHEN OTHERS THEN
                  UT_TRACE.TRACE( 'No se pudo borrar padre ' || NUFATHERID, 6 );
            END;
         END IF;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.DelUnUsedAddress.DelFather', 4 );
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            UT_TRACE.TRACE( 'OTHERS AB_BOAddress.DelUnUsedAddress.DelFather', 4 );
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END DELFATHER;
    BEGIN
      UT_TRACE.TRACE( 'INICIO AB_BOAddress.DelUnUsedAddress', 2 );
      UT_TRACE.TRACE( 'Direccion [' || INUADDRESSID || ']', 2 );
      DAAB_ADDRESS.GETRECORD( INUADDRESSID, RCADDRESS );
      NUFATHERID := RCADDRESS.FATHER_ADDRESS_ID;
      DAAB_ADDRESS.DELRECORD( RCADDRESS.ADDRESS_ID );
      DELPREMISE( RCADDRESS.ESTATE_NUMBER );
      IF ( NUFATHERID IS NOT NULL ) AND FBLCANDELETE( NUFATHERID, ISBOTHERADDRESS ) THEN
         BEGIN
            DELFATHER( NUFATHERID );
          EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
               UT_TRACE.TRACE( 'No se pudo borrar padre ' || NUFATHERID, 6 );
            WHEN OTHERS THEN
               UT_TRACE.TRACE( 'No se pudo borrar padre ' || NUFATHERID, 6 );
         END;
      END IF;
      UT_TRACE.TRACE( 'FIN AB_BOAddress.DelUnUsedAddress', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'CONTROLLED_ERROR AB_BOAddress.DelUnUsedAddress', 2 );
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'OTHERS AB_BOAddress.DelUnUsedAddress', 2 );
   END DELUNUSEDADDRESS;
END AB_BOADDRESS;
/


