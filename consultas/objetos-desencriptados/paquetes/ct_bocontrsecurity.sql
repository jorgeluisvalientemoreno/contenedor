
CREATE OR REPLACE PACKAGE CT_BOCONTRSECURITY IS
   SBMYCURRENTROLE VARCHAR2( 2 ) := NULL;
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   FUNCTION FSBGETMYCURRENTROLE
    RETURN VARCHAR2;
   PROCEDURE LOADSECURITYSETTINGS( ISBINFORMATIONTYPE IN VARCHAR2 );
   PROCEDURE LOADSECURITYSETTINGS( ISBINFORMATIONTYPE IN VARCHAR2, OSBMYCURRENTROLE OUT VARCHAR2 );
   FUNCTION FNUCANMANAGECONTRACTOR( INUCONTRACTORID IN GE_CONTRATISTA.ID_CONTRATISTA%TYPE )
    RETURN NUMBER;
   FUNCTION FNUCANMANAGEWORKUNIT( INUOPERATINGUNITID IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE )
    RETURN NUMBER;
   FUNCTION FNUCANMANAGECOSTLIST( INUCOSTLISTID IN GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE )
    RETURN NUMBER;
   FUNCTION FNUCANMANAGECONTRACT( INUCONTRACTID IN GE_CONTRATO.ID_CONTRATO%TYPE )
    RETURN NUMBER;
   PROCEDURE GETOPERATINGUNITSLOV( ORFDATA IN OUT NOCOPY CONSTANTS.TYREFCURSOR );
   PROCEDURE GETCONTRACTORSLOV( ORFDATA IN OUT NOCOPY CONSTANTS.TYREFCURSOR );
   PROCEDURE GETCONTRACTSLOV( ORFDATA IN OUT NOCOPY CONSTANTS.TYREFCURSOR );
   PROCEDURE GETCONTRACTORS_NAMELOV( ORFDATA IN OUT NOCOPY CONSTANTS.TYREFCURSOR );
   PROCEDURE RELOADSECURITYSETTINGS;
   PROCEDURE GETPOSSIBLECONTADMINS( ORFDATA OUT CONSTANTS.TYREFCURSOR );
   PROCEDURE GETPOSSIBLECONTAUX( ORFDATA OUT CONSTANTS.TYREFCURSOR );
   PROCEDURE GETADMSBYCONTRACTOR( INUCONTRACTORID IN GE_CONTRATISTA.ID_CONTRATISTA%TYPE, ORFDATA OUT CONSTANTS.TYREFCURSOR );
   PROCEDURE GETAUXSBYCONTRACT( INUCONTRACTID IN GE_CONTRATO.ID_CONTRATO%TYPE, ORFDATA OUT CONSTANTS.TYREFCURSOR );
   FUNCTION FNUCANMANAGECOSTLISTFW( INUCOSTLISTID IN GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE )
    RETURN NUMBER;
   PROCEDURE INSCONTRSECSETTINGS( INUUSERID IN SA_USER_CONTRACTOR_SEC.USER_ID%TYPE, INUCONTRACTORID IN SA_USER_CONTRACTOR_SEC.CONTRACTOR_ID%TYPE, INUCONTRACTID IN SA_USER_CONTRACTOR_SEC.CONTRACT_ID%TYPE );
   PROCEDURE DELCONTRSECSETTINGS( INUUSERID IN SA_USER_CONTRACTOR_SEC.USER_ID%TYPE, INUCONTRACTORID IN SA_USER_CONTRACTOR_SEC.CONTRACTOR_ID%TYPE, INUCONTRACTID IN SA_USER_CONTRACTOR_SEC.CONTRACT_ID%TYPE );
END CT_BOCONTRSECURITY;
/


CREATE OR REPLACE PACKAGE BODY CT_BOCONTRSECURITY IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO188073';
   NUSESSIONUSERID SA_USER.USER_ID%TYPE := SA_BOUSER.FNUGETUSERID( UT_SESSION.GETUSER );
   NUISGENERALINFOTYPELOADED NUMBER( 1 ) := 0;
   NUISCOSTLISTINFOTYPELOADED NUMBER( 1 ) := 0;
   NUISWORKUNITINFOTYPELOADED NUMBER( 1 ) := 0;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION FSBGETMYCONTRACTROLE
    RETURN VARCHAR2
    IS
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.fsbGetMyContractRole', 1 );
      IF ( SBMYCURRENTROLE IS NOT NULL ) THEN
         UT_TRACE.TRACE( '  El rol ya esta calculado', 1 );
         RETURN SBMYCURRENTROLE;
      END IF;
      IF ( SA_BCROLETYPE.FBLUSERHASROLETYPE( NUSESSIONUSERID, CT_BOCONSTANTS.CNUCONTRACTOR_ADM_ROLE_TY ) ) THEN
         UT_TRACE.TRACE( '  El usuario tiene un rol tipo 5', 1 );
         IF ( CT_BCCONTRSECURITY.FBLUSRHASANYCONTRACT( NUSESSIONUSERID ) ) THEN
            SBMYCURRENTROLE := CT_BOCONSTANTS.CSBCONTR_AUX_ROLE;
            UT_TRACE.TRACE( '  El usuario es auxiliar' || CHR( 10 ) || '[FINAL] CT_BOContrSecurity.fsbGetMyContractRole', 1 );
            RETURN SBMYCURRENTROLE;
         END IF;
         IF ( CT_BCCONTRSECURITY.FBLUSRHASANYCONTRACTOR( NUSESSIONUSERID ) ) THEN
            SBMYCURRENTROLE := CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE;
            UT_TRACE.TRACE( '  El usuario es administrador' || CHR( 10 ) || '[FINAL] CT_BOContrSecurity.fsbGetMyContractRole', 1 );
            RETURN SBMYCURRENTROLE;
         END IF;
      END IF;
      SBMYCURRENTROLE := CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE;
      UT_TRACE.TRACE( '  El usuario es super usuario' || CHR( 10 ) || '[FINAL] CT_BOContrSecurity.fsbGetMyContractRole', 1 );
      RETURN SBMYCURRENTROLE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETMYCONTRACTROLE;
   FUNCTION FSBGETMYCURRENTROLE
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN SBMYCURRENTROLE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETMYCURRENTROLE;
   PROCEDURE LOADADMINISTRSETTINGS( ISBINFORMATIONTYPE IN VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.LoadAdministrSettings', 5 );
      IF ( NUISGENERALINFOTYPELOADED = 0 AND ISBINFORMATIONTYPE = CT_BOCONSTANTS.CSBSEC_INFO_TYPE_GENERAL ) THEN
         CT_BCCONTRSECURITYLOAD.LOADADMCONTRACTS( NUSESSIONUSERID );
         CT_BCCONTRSECURITYLOAD.LOADADMCONTRACTORS( NUSESSIONUSERID );
         NUISGENERALINFOTYPELOADED := 1;
       ELSIF ( NUISCOSTLISTINFOTYPELOADED = 0 AND ISBINFORMATIONTYPE = CT_BOCONSTANTS.CSBSEC_INFO_TYPE_COST_LI ) THEN
         CT_BCCONTRSECURITYLOAD.LOADADMCOSTSLISTS( NUSESSIONUSERID );
         NUISCOSTLISTINFOTYPELOADED := 1;
       ELSIF ( NUISWORKUNITINFOTYPELOADED = 0 AND ISBINFORMATIONTYPE = CT_BOCONSTANTS.CSBSEC_INFO_TYPE_WORK_UDT ) THEN
         UT_TRACE.TRACE( 'Cargar unidades de trabajo usuario[' || NUSESSIONUSERID || ']', 10 );
         CT_BCCONTRSECURITYLOAD.LOADADMWORKUNITS( NUSESSIONUSERID );
         NUISWORKUNITINFOTYPELOADED := 1;
      END IF;
      UT_TRACE.TRACE( '[FINAL] CT_BOContrSecurity.LoadAdministrSettings', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END LOADADMINISTRSETTINGS;
   PROCEDURE LOADAUXILIARSETTINGS( ISBINFORMATIONTYPE IN VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.LoadAuxiliarSettings', 5 );
      IF ( NUISGENERALINFOTYPELOADED = 0 AND ISBINFORMATIONTYPE = CT_BOCONSTANTS.CSBSEC_INFO_TYPE_GENERAL ) THEN
         CT_BCCONTRSECURITYLOAD.LOADAUXCONTRACTS( NUSESSIONUSERID );
         CT_BCCONTRSECURITYLOAD.LOADAUXCONTRACTORS( NUSESSIONUSERID );
         NUISGENERALINFOTYPELOADED := 1;
       ELSIF ( NUISCOSTLISTINFOTYPELOADED = 0 AND ISBINFORMATIONTYPE = CT_BOCONSTANTS.CSBSEC_INFO_TYPE_COST_LI ) THEN
         CT_BCCONTRSECURITYLOAD.LOADAUXCOSTSLISTS( NUSESSIONUSERID );
         NUISCOSTLISTINFOTYPELOADED := 1;
       ELSIF ( NUISWORKUNITINFOTYPELOADED = 0 AND ISBINFORMATIONTYPE = CT_BOCONSTANTS.CSBSEC_INFO_TYPE_WORK_UDT ) THEN
         CT_BCCONTRSECURITYLOAD.LOADAUXWORKUNITS( NUSESSIONUSERID );
         NUISWORKUNITINFOTYPELOADED := 1;
      END IF;
      UT_TRACE.TRACE( '[FINAL] CT_BOContrSecurity.LoadAuxiliarSettings', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END LOADAUXILIARSETTINGS;
   PROCEDURE LOADSECURITYSETTINGS( ISBINFORMATIONTYPE IN VARCHAR2 )
    IS
      SBMYCONTRACTROLE VARCHAR( 4 ) := FSBGETMYCONTRACTROLE();
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.LoadSecuritySettings', 1 );
      UT_TRACE.TRACE( 'El rol actual es: ' || SBMYCONTRACTROLE, 5 );
      IF ( SBMYCONTRACTROLE = CT_BOCONSTANTS.CSBCONTR_AUX_ROLE ) THEN
         LOADAUXILIARSETTINGS( ISBINFORMATIONTYPE );
       ELSIF ( SBMYCONTRACTROLE = CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE ) THEN
         LOADADMINISTRSETTINGS( ISBINFORMATIONTYPE );
       ELSIF ( SBMYCONTRACTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         UT_TRACE.TRACE( 'El super usuario no necesita cargar modelo de seguridad', 5 );
      END IF;
      UT_TRACE.TRACE( '[FINAL] CT_BOContrSecurity.LoadSecuritySettings', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END LOADSECURITYSETTINGS;
   PROCEDURE LOADSECURITYSETTINGS( ISBINFORMATIONTYPE IN VARCHAR2, OSBMYCURRENTROLE OUT VARCHAR2 )
    IS
      SBMYCONTRACTROLE VARCHAR( 4 ) := FSBGETMYCONTRACTROLE();
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.LoadSecuritySettings', 1 );
      LOADSECURITYSETTINGS( ISBINFORMATIONTYPE );
      OSBMYCURRENTROLE := NVL( FSBGETMYCURRENTROLE(), CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE );
      UT_TRACE.TRACE( '[FINAL] CT_BOContrSecurity.LoadSecuritySettings', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END LOADSECURITYSETTINGS;
   FUNCTION FNUCANMANAGECONTRACTOR( INUCONTRACTORID IN GE_CONTRATISTA.ID_CONTRATISTA%TYPE )
    RETURN NUMBER
    IS
    BEGIN
      IF ( SBMYCURRENTROLE IS NULL OR SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         RETURN 1;
      END IF;
      IF ( CT_BCCONTRSECURITY.FBLUSERHASCONTRACTOR( INUCONTRACTORID ) ) THEN
         RETURN 1;
       ELSE
         RETURN 0;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUCANMANAGECONTRACTOR;
   FUNCTION FNUCANMANAGEWORKUNIT( INUOPERATINGUNITID IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE )
    RETURN NUMBER
    IS
    BEGIN
      IF ( SBMYCURRENTROLE IS NULL OR SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         RETURN 1;
      END IF;
      IF ( CT_BCCONTRSECURITY.FBLUSERHASWORKUNIT( INUOPERATINGUNITID ) ) THEN
         RETURN 1;
       ELSE
         RETURN 0;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUCANMANAGEWORKUNIT;
   FUNCTION FNUCANMANAGECOSTLIST( INUCOSTLISTID IN GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE )
    RETURN NUMBER
    IS
    BEGIN
      IF ( SBMYCURRENTROLE IS NULL OR SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         RETURN 1;
      END IF;
      IF ( CT_BCCONTRSECURITY.FBLUSERHASCOSTLIST( INUCOSTLISTID ) ) THEN
         RETURN 1;
       ELSE
         RETURN 0;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUCANMANAGECOSTLIST;
   FUNCTION FNUCANMANAGECONTRACT( INUCONTRACTID IN GE_CONTRATO.ID_CONTRATO%TYPE )
    RETURN NUMBER
    IS
    BEGIN
      IF ( SBMYCURRENTROLE IS NULL OR SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         RETURN 1;
      END IF;
      IF ( CT_BCCONTRSECURITY.FBLUSERHASCONTRACT( INUCONTRACTID ) ) THEN
         RETURN 1;
       ELSE
         RETURN 0;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUCANMANAGECONTRACT;
   PROCEDURE GETOPERATINGUNITSLOV( ORFDATA IN OUT NOCOPY CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.GetOperatingUnitsLOV', 1 );
      CT_BOCONTRSECURITY.LOADSECURITYSETTINGS( CT_BOCONSTANTS.CSBSEC_INFO_TYPE_WORK_UDT );
      IF ( SBMYCURRENTROLE IS NULL OR SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         OPEN ORFDATA FOR SELECT operating_unit_id id
                  , name description
               from or_operating_unit;
       ELSE
         OPEN ORFDATA FOR SELECT operating_unit_id id
                  , name description
               from or_operating_unit
              WHERE fnuCanManageWorkUnit(operating_unit_id) = 1;
      END IF;
      UT_TRACE.TRACE( '[FINAL] CT_BOContrSecurity.GetOperatingUnitsLOV', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETOPERATINGUNITSLOV;
   PROCEDURE GETCONTRACTORSLOV( ORFDATA IN OUT NOCOPY CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.GeContractorsLOV', 1 );
      CT_BOCONTRSECURITY.LOADSECURITYSETTINGS( CT_BOCONSTANTS.CSBSEC_INFO_TYPE_GENERAL );
      IF ( SBMYCURRENTROLE IS NULL OR SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         OPEN ORFDATA FOR SELECT id_contratista id,
                    nombre_contratista description
               from ge_contratista;
       ELSE
         OPEN ORFDATA FOR SELECT id_contratista id,
                    nombre_contratista description
               from ge_contratista
              where fnuCanManageContractor(id_contratista) = 1;
      END IF;
      UT_TRACE.TRACE( '[FINAL] CT_BOContrSecurity.GeContractorsLOV', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETCONTRACTORSLOV;
   PROCEDURE GETCONTRACTORS_NAMELOV( ORFDATA IN OUT NOCOPY CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.GeContractors_NameLOV', 1 );
      CT_BOCONTRSECURITY.LOADSECURITYSETTINGS( CT_BOCONSTANTS.CSBSEC_INFO_TYPE_GENERAL );
      IF ( SBMYCURRENTROLE IS NULL OR SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         OPEN ORFDATA FOR SELECT id_contratista id,
                    descripcion description,
                    nombre_contratista Nombre
               from ge_contratista;
       ELSE
         OPEN ORFDATA FOR SELECT id_contratista id,
                    descripcion description,
                    nombre_contratista Nombre
               from ge_contratista
              where fnuCanManageContractor(ge_contratista.id_contratista) = 1
                    ;
      END IF;
      UT_TRACE.TRACE( '[FINAL] CT_BOContrSecurity.GeContractors_NameLOV', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETCONTRACTORS_NAMELOV;
   PROCEDURE GETCONTRACTSLOV( ORFDATA IN OUT NOCOPY CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.GeContractsLOV', 1 );
      CT_BOCONTRSECURITY.LOADSECURITYSETTINGS( CT_BOCONSTANTS.CSBSEC_INFO_TYPE_GENERAL );
      IF ( SBMYCURRENTROLE IS NULL OR SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         OPEN ORFDATA FOR SELECT id_contrato id,
                descripcion description
           from ge_contrato
           ;
       ELSE
         OPEN ORFDATA FOR SELECT id_contrato id,
                descripcion description
           from ge_contrato
          where fnuCanManageContract(ge_contrato.id_contrato) = 1
        ;
      END IF;
      UT_TRACE.TRACE( '[FINAL] CT_BOContrSecurity.GeContractsLOV', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETCONTRACTSLOV;
   PROCEDURE RELOADSECURITYSETTINGS
    IS
      SBMYCONTRACTROLE VARCHAR2( 2 ) := FSBGETMYCONTRACTROLE();
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.ReloadSecuritySettings', 1 );
      CT_BCCONTRSECURITYLOAD.DELETETEMPORARYMODEL();
      IF ( SBMYCONTRACTROLE = CT_BOCONSTANTS.CSBCONTR_AUX_ROLE ) THEN
         IF ( NUISGENERALINFOTYPELOADED = 1 ) THEN
            CT_BCCONTRSECURITYLOAD.LOADADMCONTRACTS( NUSESSIONUSERID );
         END IF;
         IF ( NUISCOSTLISTINFOTYPELOADED = 1 ) THEN
            CT_BCCONTRSECURITYLOAD.LOADAUXCOSTSLISTS( NUSESSIONUSERID );
         END IF;
         IF ( NUISCOSTLISTINFOTYPELOADED = 1 ) THEN
            CT_BCCONTRSECURITYLOAD.LOADAUXWORKUNITS( NUSESSIONUSERID );
         END IF;
       ELSIF ( SBMYCONTRACTROLE = CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE ) THEN
         IF ( NUISGENERALINFOTYPELOADED = 1 ) THEN
            CT_BCCONTRSECURITYLOAD.LOADADMCONTRACTS( NUSESSIONUSERID );
         END IF;
         IF ( NUISCOSTLISTINFOTYPELOADED = 1 ) THEN
            CT_BCCONTRSECURITYLOAD.LOADADMCOSTSLISTS( NUSESSIONUSERID );
         END IF;
         IF ( NUISCOSTLISTINFOTYPELOADED = 1 ) THEN
            CT_BCCONTRSECURITYLOAD.LOADADMWORKUNITS( NUSESSIONUSERID );
         END IF;
      END IF;
      NUISWORKUNITINFOTYPELOADED := 1;
      UT_TRACE.TRACE( '[FIN] CT_BOContrSecurity.ReloadSecuritySettings', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END RELOADSECURITYSETTINGS;
   PROCEDURE GETPOSSIBLECONTADMINS( ORFDATA OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      ORFDATA := SA_BCROLETYPE.FRFPOSSIBLECONTADMINS();
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETPOSSIBLECONTADMINS;
   PROCEDURE GETPOSSIBLECONTAUX( ORFDATA OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      ORFDATA := SA_BCROLETYPE.FRFPOSSIBLECONTAUX();
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETPOSSIBLECONTAUX;
   PROCEDURE GETADMSBYCONTRACTOR( INUCONTRACTORID IN GE_CONTRATISTA.ID_CONTRATISTA%TYPE, ORFDATA OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      ORFDATA := CT_BCCONTRSECURITY.FRFGETADMSBYCONTRACTOR( INUCONTRACTORID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETADMSBYCONTRACTOR;
   PROCEDURE GETAUXSBYCONTRACT( INUCONTRACTID IN GE_CONTRATO.ID_CONTRATO%TYPE, ORFDATA OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      ORFDATA := CT_BCCONTRSECURITY.FRFGETAUXSBYCONTRACT( INUCONTRACTID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETAUXSBYCONTRACT;
   FUNCTION FNUCANMANAGECOSTLISTFW( INUCOSTLISTID IN GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE )
    RETURN NUMBER
    IS
    BEGIN
      IF ( NUISCOSTLISTINFOTYPELOADED = 0 ) THEN
         UT_TRACE.TRACE( '******* Cargando seguridad de lista de costos ********', 1 );
         CT_BOCONTRSECURITY.LOADSECURITYSETTINGS( CT_BOCONSTANTS.CSBSEC_INFO_TYPE_COST_LI );
         UT_TRACE.TRACE( 'cantidad cargada [' || CT_BCCONTRSECURITY.TBCOSTLIST.COUNT || ']', 1 );
         UT_TRACE.TRACE( '******* seguridad de lista de costos cargada ********', 1 );
         NUISCOSTLISTINFOTYPELOADED := 1;
      END IF;
      IF ( SBMYCURRENTROLE IS NULL OR SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_SUP_USR_ROLE ) THEN
         RETURN 1;
      END IF;
      IF ( CT_BCCONTRSECURITY.FBLUSERHASCOSTLIST( INUCOSTLISTID ) ) THEN
         RETURN 1;
       ELSE
         RETURN 0;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUCANMANAGECOSTLISTFW;
   PROCEDURE INSCONTRSECSETTINGS( INUUSERID IN SA_USER_CONTRACTOR_SEC.USER_ID%TYPE, INUCONTRACTORID IN SA_USER_CONTRACTOR_SEC.CONTRACTOR_ID%TYPE, INUCONTRACTID IN SA_USER_CONTRACTOR_SEC.CONTRACT_ID%TYPE )
    IS
      SBSECURITYTYPE SA_USER_CONTRACTOR_SEC.SEC_TYPE%TYPE;
      CNUUSERWITHBOTHROLES GE_MESSAGE.MESSAGE_ID%TYPE := 901455;
    BEGIN
      UT_TRACE.TRACE( '[INICIO] CT_BOContrSecurity.insContrSecSettings', 5 );
      IF ( INUCONTRACTID IS NULL ) THEN
         SBSECURITYTYPE := CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE;
         IF ( CT_BCCONTRSECURITY.FBLUSRHASANYCONTRACT( INUUSERID ) ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT( CNUUSERWITHBOTHROLES, DASA_USER.FSBGETMASK( INUUSERID ) );
         END IF;
       ELSIF ( INUCONTRACTORID IS NOT NULL AND INUCONTRACTID IS NOT NULL ) THEN
         SBSECURITYTYPE := CT_BOCONSTANTS.CSBCONTR_AUX_ROLE;
         IF ( CT_BCCONTRSECURITY.FBLUSRHASANYCONTRACTOR( INUUSERID ) ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT( CNUUSERWITHBOTHROLES, DASA_USER.FSBGETMASK( INUUSERID ) );
         END IF;
      END IF;
      CT_BCCONTRSECURITY.INSCONTRSECSETTINGS( INUUSERID, INUCONTRACTORID, INUCONTRACTID, SBSECURITYTYPE );
      UT_TRACE.TRACE( '[FINAL] CT_BOContrSecurity.insContrSecSettings', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSCONTRSECSETTINGS;
   PROCEDURE DELCONTRSECSETTINGS( INUUSERID IN SA_USER_CONTRACTOR_SEC.USER_ID%TYPE, INUCONTRACTORID IN SA_USER_CONTRACTOR_SEC.CONTRACTOR_ID%TYPE, INUCONTRACTID IN SA_USER_CONTRACTOR_SEC.CONTRACT_ID%TYPE )
    IS
      SBSECURITYTYPE SA_USER_CONTRACTOR_SEC.SEC_TYPE%TYPE;
    BEGIN
      IF ( INUCONTRACTID IS NULL ) THEN
         SBSECURITYTYPE := CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE;
       ELSIF ( INUCONTRACTORID IS NOT NULL AND INUCONTRACTID IS NOT NULL ) THEN
         SBSECURITYTYPE := CT_BOCONSTANTS.CSBCONTR_AUX_ROLE;
      END IF;
      CT_BCCONTRSECURITY.DELCONTRSECSETTINGS( INUUSERID, INUCONTRACTORID, INUCONTRACTID, SBSECURITYTYPE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DELCONTRSECSETTINGS;
END CT_BOCONTRSECURITY;
/


