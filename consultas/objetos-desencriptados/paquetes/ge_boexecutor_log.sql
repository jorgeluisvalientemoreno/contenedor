
CREATE OR REPLACE PACKAGE BODY GE_BOEXECUTOR_LOG IS
   CSBEXCEPTION CONSTANT VARCHAR2( 1 ) := 'E';
   CSBCONTROLER CONSTANT VARCHAR2( 1 ) := 'C';
   TBMESSAGES CONSTANTS.TY_TBNUMBER;
   TBMEXCEPTION CONSTANTS.TY_TBNUMBER;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE INIT_MESSAGES
    IS
    BEGIN
      TBMESSAGES.DELETE;
   END;
   PROCEDURE ADDMESSAGE( INUMESSAGE IN NUMBER )
    IS
    BEGIN
      TBMESSAGES( INUMESSAGE ) := INUMESSAGE;
   END;
   PROCEDURE INIT_MEXCEPTION
    IS
    BEGIN
      TBMEXCEPTION.DELETE;
   END;
   PROCEDURE ADDEXCEPTION( INUMESSAGE IN NUMBER )
    IS
    BEGIN
      TBMEXCEPTION( INUMESSAGE ) := INUMESSAGE;
   END;
   PROCEDURE LOADMESSAGES( INUPROCESS_EXECUTOR IN NUMBER )
    IS
      CURSOR CUMESSAGE IS
SELECT MESSAGE_ID, MESSAGE_TYPE
                          FROM GE_PROC_EXEC_MES_CON
                          WHERE PROCESS_EXECUTOR_ID = inuProcess_Executor;
    BEGIN
      INIT_MESSAGES;
      INIT_MEXCEPTION;
      FOR RCR IN CUMESSAGE
       LOOP
         IF RCR.MESSAGE_TYPE = CSBEXCEPTION THEN
            ADDEXCEPTION( RCR.MESSAGE_ID );
          ELSE
            ADDMESSAGE( RCR.MESSAGE_ID );
         END IF;
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VALIDEXCEPTION( INUERRORCODE IN NUMBER, ISBERRORMSG IN VARCHAR2 )
    IS
    BEGIN
      IF TBMEXCEPTION.EXISTS( INUERRORCODE ) THEN
         ERRORS.SETERROR( INUERRORCODE );
         ERRORS.SETMESSAGE( ISBERRORMSG );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
   END;
   PROCEDURE INSERT_LOG( INUERRORCOD IN NUMBER, ISBERRORMSG IN VARCHAR2, ISBPARAMETERS IN VARCHAR2, ONULOG_ID OUT NUMBER )
    IS
      RCREPORT DAGE_EXECUTOR_LOG.STYGE_EXECUTOR_LOG;
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      RCREPORT.EXECUTOR_LOG_ID := GE_BOSEQUENCE.NEXTGE_EXECUTOR_LOG;
      RCREPORT.SESSION_ID := USERENV( 'SESSIONID' );
      RCREPORT.PROCESS_EXECUTOR_ID := GE_BOPROCESS_EXECUTOR.FNUGETPROCESS_EXECUTOR_ID;
      RCREPORT.THREAD_NUMBER := GE_BOPROCESS_EXECUTOR.FNUGETTHREAD_ID;
      RCREPORT.DATE_ := SYSDATE;
      RCREPORT.CODE_MSG := NVL( INUERRORCOD, 0 );
      RCREPORT.MESSAGE := NVL( ISBERRORMSG, '--------' );
      RCREPORT.PARAMETERS := ISBPARAMETERS;
      RCREPORT.HOST_ID := GE_BOHOST.FNUGETHOSTIDBYNAME;
      DAGE_EXECUTOR_LOG.INSRECORD( RCREPORT );
      ONULOG_ID := RCREPORT.EXECUTOR_LOG_ID;
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE REPORT( INUERRORCOD IN NUMBER, ISBERRORMSG IN VARCHAR2, ISBPARAMETERS IN VARCHAR2, ONULOG_ID OUT NUMBER )
    IS
      BLREPORT BOOLEAN := FALSE;
      SBLOG_REPORT VARCHAR2( 1 ) := GE_BOPRO_EXE_INT_TIME.FSBGETLOG_REPORT;
    BEGIN
      IF TBMESSAGES.EXISTS( INUERRORCOD ) THEN
         RETURN;
      END IF;
      IF NVL( INUERRORCOD, 0 ) = CONSTANTS.CNUSUCCESS THEN
         GE_BOPROCESS_EXECUTOR.INC_PROCESS_RECORDS;
         BLREPORT := SBLOG_REPORT = GE_BOPRO_EXE_INT_TIME.CSBRLOG_OK;
       ELSE
         GE_BOPROCESS_EXECUTOR.INC_FAILURE_RECORDS;
         BLREPORT := SBLOG_REPORT = GE_BOPRO_EXE_INT_TIME.CSBRLOG_FAIL;
      END IF;
      IF BLREPORT OR SBLOG_REPORT = GE_BOPRO_EXE_INT_TIME.CSBRLOG_ALWAYS THEN
         INSERT_LOG( INUERRORCOD, ISBERRORMSG, ISBPARAMETERS, ONULOG_ID );
         ERRORS.INITIALIZE;
      END IF;
   END;
   PROCEDURE DELETE_RECORDS
    IS
    BEGIN
      GE_BCEXECUTOR_LOG.DELETE_RECORDS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSERT_LOG_DEFAULT( INUERRORCODE IN NUMBER, ISBERRORMESSAGE IN VARCHAR2, ISBPARAMETERS IN VARCHAR2, ONUEXECUTOR_LOG_ID OUT NUMBER )
    IS
      RCREPORT DAGE_EXECUTOR_LOG.STYGE_EXECUTOR_LOG;
      CNUPROCESS_EXECUTOR NUMBER( 1 ) := -1;
      CNUTHREAD_NUMBER NUMBER( 1 ) := -1;
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      RCREPORT.EXECUTOR_LOG_ID := GE_BOSEQUENCE.NEXTGE_EXECUTOR_LOG;
      RCREPORT.SESSION_ID := USERENV( 'SESSIONID' );
      RCREPORT.PROCESS_EXECUTOR_ID := CNUPROCESS_EXECUTOR;
      RCREPORT.THREAD_NUMBER := CNUTHREAD_NUMBER;
      RCREPORT.DATE_ := SYSDATE;
      RCREPORT.CODE_MSG := NVL( INUERRORCODE, 0 );
      RCREPORT.MESSAGE := NVL( ISBERRORMESSAGE, '--------' );
      RCREPORT.PARAMETERS := ISBPARAMETERS;
      RCREPORT.HOST_ID := NULL;
      DAGE_EXECUTOR_LOG.INSRECORD( RCREPORT );
      ONUEXECUTOR_LOG_ID := RCREPORT.EXECUTOR_LOG_ID;
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSERT_DEFAULT( INUERRORCODE IN NUMBER, ISBERRORMESSAGE IN VARCHAR2, ISBPARAMETERS IN VARCHAR2, ONUEXECUTOR_LOG_ID OUT NUMBER )
    IS
    BEGIN
      IF NVL( INUERRORCODE, GE_BOCONSTANTS.CNUSUCCESS ) = GE_BOCONSTANTS.CNUSUCCESS THEN
         RETURN;
      END IF;
      INSERT_LOG_DEFAULT( INUERRORCODE, ISBERRORMESSAGE, ISBPARAMETERS, ONUEXECUTOR_LOG_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETCODEANDMESSERROR( INUEXECUTOR_LOG_ID IN GE_EXECUTOR_LOG.EXECUTOR_LOG_ID%TYPE, ONUERRORCODE OUT GE_EXECUTOR_LOG.CODE_MSG%TYPE, OSBERRORMSG OUT GE_EXECUTOR_LOG.MESSAGE%TYPE )
    IS
    BEGIN
      ONUERRORCODE := DAGE_EXECUTOR_LOG.FNUGETCODE_MSG( INUEXECUTOR_LOG_ID );
      OSBERRORMSG := DAGE_EXECUTOR_LOG.FSBGETMESSAGE( INUEXECUTOR_LOG_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETMESSAGELOGBYSESSION( INUEXECUTORLOGID IN GE_EXECUTOR_LOG.EXECUTOR_LOG_ID%TYPE, INUTHREADNUMBER IN GE_EXECUTOR_LOG.THREAD_NUMBER%TYPE, INUSESSIONID IN GE_EXECUTOR_LOG.SESSION_ID%TYPE, ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BCEXECUTOR_LOG.GETMESSAGELOGBYSESSION( INUEXECUTORLOGID, INUTHREADNUMBER, INUSESSIONID, ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END GE_BOEXECUTOR_LOG;
/


