PACKAGE BODY Or_boObjActUtilities IS











































































































































































    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO370297';

    CSBGAUGED_CAPACITY      CONSTANT VARCHAR2(50) := 'AFORO';
    CSBGAUGED_TIPOCONS      CONSTANT VARCHAR2(50) := 'TIPOCONS';
    CSBPERMANENT            CONSTANT TIPOAFOR.TIAFCODI%TYPE := 'P';
    CNUSUBSIDY_TYPE         CONSTANT TIPOCONS.TCONCODI%TYPE := 16;

    
    CSBCOMMENT1             CONSTANT VARCHAR2(8) := 'COMMENT1';
    CSBCOMMENT2             CONSTANT VARCHAR2(8) := 'COMMENT2';
    CSBCOMMENT3             CONSTANT VARCHAR2(8) := 'COMMENT3';
    
    CSBREAD                 CONSTANT VARCHAR2(8) := 'READING';
    
    CSBPRODUCTION           CONSTANT PS_PACKAGE_TYPE.TAG_NAME%TYPE := 'PRODUCTION';
    
    CNUERROR_3060 CONSTANT NUMBER := 3060;
    
    CNUERROR_3461 CONSTANT NUMBER := 3461;
    
    CNUERROR_PROD CONSTANT NUMBER := 900815;
    
    CNUERROR_DETAPROD CONSTANT NUMBER := 900814;
    
    CNUERROR_COMMENT CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 111528;
    
    CNUNO_CAUSNOLE CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900467;
    
    CNUERR_3320 CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 3320;
    
    
    CSBROUTE                    CONSTANT PS_PACKAGE_TYPE.TAG_NAME%TYPE := 'ROUTEID';

    CSBSUSPENSION_TYPE      CONSTANT VARCHAR2(50) := 'SUSPENSION_TYPE';
    
    CSBREVISED_ORDER        CONSTANT VARCHAR2(50) := 'REVISED_ORDER';
    
    CNUERROR_900803         CONSTANT NUMBER := 900803;
    
    
    CNUPIPE_ELEMENT_TYPE    CONSTANT NUMBER := 92;
    
        
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


    
    FUNCTION FNUGETCURRENTBASECOMP
    RETURN MO_COMPONENT.COMPONENT_ID%TYPE
    IS
        NUBASECOMP  OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE;
        NUMOTIVE    OR_ORDER_ACTIVITY.MOTIVE_ID%TYPE;
    
    BEGIN

        NUBASECOMP := OR_BOLEGALIZEACTIVITIES.FNUGETCURRCOMPONENT;
        UT_TRACE.TRACE('ComponentBase='||NUBASECOMP);
        
        IF NUBASECOMP IS NULL THEN
            NUMOTIVE:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
            UT_TRACE.TRACE(' MotiveBase='||NUMOTIVE);
            
           FOR RCCOMPONENT IN MO_BCCOMPONENT.CUMAINCOMPONENTS(NUMOTIVE) LOOP
                NUBASECOMP := RCCOMPONENT.COMPONENT_ID;
           END LOOP;
        END IF;
        
        RETURN NUBASECOMP;
    END FNUGETCURRENTBASECOMP;


    PROCEDURE ATTREINSTDRAINMOT
    IS

    BEGIN
        OR_BOCNF_GENERALEXPRESSIONS.CREATEAFORO(NULL);
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ATTREINSTDRAINMOT;
        

        
            
    PROCEDURE UPMEDDTCRSSCPRDGAUG 
    IS
        NUMOTIVEID NUMBER;
        NUPACKAGEID NUMBER;
        NUORDERID NUMBER;
        DTORDERDATE DATE;
    BEGIN
        NUMOTIVEID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
        NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVEID);
        NUORDERID := OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        DTORDERDATE := DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(NUORDERID);
        OR_BOCNF_GENERALEXPRESSIONS.UPSERVICEDATEINMOMOT(NUMOTIVEID, 182, TRUE, TRUE, TRUE, DTORDERDATE);
        OR_BOCNF_GENERALEXPRESSIONS.UPMEDIATDATEINMOMOT(NUMOTIVEID, 182, TRUE, TRUE, TRUE, DTORDERDATE);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPMEDDTCRSSCPRDGAUG; 



    PROCEDURE RETIREELECTKIOSK
    IS
        NUMOTIVEID NUMBER;
        NUORDERID NUMBER;
        DTORDERDATE DATE;
    BEGIN
        NUMOTIVEID:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
        NUORDERID:=OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        DTORDERDATE:=DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(NUORDERID);
        OR_BOCNF_GENERALEXPRESSIONS.UPMEDIATDATEINMOMOT(NUMOTIVEID, 182, TRUE, TRUE, TRUE, DTORDERDATE);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RETIREELECTKIOSK;
        
            
    
    PROCEDURE RETIREPOWSERVNOIF
    IS
        NUORDERID   NUMBER;
    BEGIN
        NUORDERID:=OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        OR_BOCNF_GENERALEXPRESSIONS.PRODUCTRETIRE(NUORDERID);
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RETIREPOWSERVNOIF;

    PROCEDURE TRANSFORMERCHANGE
    IS
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    BEGIN
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        OR_BOLEGALIZESERVICES.CHANGETRANSFORMER(NUORDERACTIVITYID);
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END TRANSFORMERCHANGE;
            
    
    PROCEDURE UPDELEMFAILCALIBRATE
    IS
        NUORDERACTIVITY   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUELEMENT_ID      OR_ORDER_ACTIVITY.ELEMENT_ID%TYPE;

    BEGIN
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUELEMENT_ID    := DAOR_ORDER_ACTIVITY.FNUGETELEMENT_ID(NUORDERACTIVITY);

        IF NUELEMENT_ID IS NOT NULL THEN
            IF_BOMETER.SAVEMETERSETUPBY(NUELEMENT_ID, OR_BOMETERLAB.CSBMEASUREDFAIL);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END UPDELEMFAILCALIBRATE;
            
    PROCEDURE UPDMEDDTSEMAPCONN
    IS
        NUMOTIVEID NUMBER;
        NUORDERID NUMBER;
        DTDATE DATE;
        NUCOMPONENTTYPE NUMBER;

    BEGIN
        NUMOTIVEID:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
        NUORDERID:=OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        DTDATE:=DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(NUORDERID);
        NUCOMPONENTTYPE:=PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEBYTAG('COMP_SEMAFORO');
        OR_BOCNF_GENERALEXPRESSIONS.UPMEDIATDATEINMOMOT(NUMOTIVEID, NUCOMPONENTTYPE, TRUE, FALSE, TRUE, DTDATE);
        OR_BOCNF_GENERALEXPRESSIONS.UPSERVICEDATEINMOMOT(NUMOTIVEID, NUCOMPONENTTYPE, TRUE, FALSE, TRUE, DTDATE);
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDMEDDTSEMAPCONN;
    
    PROCEDURE UPDMEDDTRETPOWELEV
    IS
        NUMOTIVEID NUMBER;
        NUORDERID NUMBER;
        DTDATE DATE;
        NUCOMPTYPEID NUMBER;
    BEGIN
        NUMOTIVEID:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE ;
        NUORDERID:=OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        DTDATE:=DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(NUORDERID);
        NUCOMPTYPEID:=PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEBYTAG('ELEVADOR_POTENCIA');
        OR_BOCNF_GENERALEXPRESSIONS.UPMEDIATDATEINMOMOT(NUMOTIVEID, NUCOMPTYPEID, TRUE, FALSE, TRUE, DTDATE);
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDMEDDTRETPOWELEV;

    PROCEDURE UPDWFINSTANCEATT
    IS
        NUORDER NUMBER;
        NUINSTANCEID NUMBER;
        DTINITIALDATE VARCHAR2(1024);
        SBINITIALDATE VARCHAR2(1024);

    BEGIN
        OR_BOACTIVITIESRULES.VALWORKSBEGINDATE;
    
        NUORDER:=OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        NUINSTANCEID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRWFINSTANCE;

        DTINITIALDATE:= OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('Fecha',OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY);
        SBINITIALDATE:=UT_CONVERT.FSBTOCHAR(DTINITIALDATE);
        WF_BOINSTANCE_ATTRIB.UPDINSATTVAL(NUINSTANCEID, 20069, SBINITIALDATE);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDWFINSTANCEATT;

    PROCEDURE VALELECTELEMEXISTS 
    IS
        NUORDER NUMBER;

        NUCO NUMBER;
        CLASSERV NUMBER;
        SERIAL VARCHAR2(1024);
        NUEQ NUMBER;
        ESTADO NUMBER;

        NUERR NUMBER;
        MSG VARCHAR2(1024);
        NTYPE NUMBER;
        SBELCOD VARCHAR2(1024);
        NUCAT NUMBER;
        NNET NUMBER;
        ERR NUMBER;
        NUMOT NUMBER;

     BEGIN
        NUORDER:=OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        NUCO:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRCOMPONENT; 
        CLASSERV:=DAPS_CLASS_SERVICE.FNUGETCLASS_ID(DAMO_COMPONENT.FNUGETCLASS_SERVICE_ID(NUCO));
        DAOR_ORDER.ACCKEY(NUORDER);

        DAOR_REQU_DATA_VALUE.ACCKEY(NUORDER, 337, 248, 104, UT_DATE.FDTSYSDATE);


        SERIAL:= OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('SERIAL',
                                                              OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY);
        IF_BOCNFEQUIPMENT.GETIDFROMSERIALNUMBER(SERIAL, 404, NUEQ, ESTADO);
        NUERR:=0;
        IF ( NUERR != CONSTANTS.CNUSUCCESS )
        THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(NUERR, MSG);
        ELSE
            NTYPE:=DAIF_ASSIGNABLE.FNUGETELEMENT_TYPE_ID(NUEQ);
        END IF;
        SBELCOD:=DAIF_ASSIGNABLE.FSBGETCODE(NUEQ);
        IF ( ESTADO = 1 )
        THEN
            NUCAT := IM_BOCONSTANTS.CNUCATEGORYREUSE;
        ELSE
            GE_BOERRORS.SETERRORCODEARGUMENT(947, SERIAL);
        END IF;

        MO_BONETWORKELEMENT.INSNETWORKELEMOPER(NUCO,
                                               NUEQ,
                                               SBELCOD,
                                               NTYPE,
                                               NUCAT,
                                               NNET);

        DAMO_COMPONENT.UPDSERVICE_NUMBER(NUCO, SBELCOD, 0);
        NUMOT:=DAMO_COMPONENT.FNUGETMOTIVE_ID(NUCO);
        DAMO_MOTIVE.UPDSERVICE_NUMBER(NUMOT, SBELCOD, 0);

        EXCEPTION
         	WHEN EX.CONTROLLED_ERROR THEN
                 RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END VALELECTELEMEXISTS; 
        
            
    PROCEDURE VALWATMETEXINSERT 
    IS
        NUORDERACTIVITYID NUMBER;
        SBELEMENTCODE VARCHAR2(4000);

    BEGIN
        NUORDERACTIVITYID:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        SBELEMENTCODE := OR_BCPLANNINGACTIVIT.FSBGETELEMENTCODE(NUORDERACTIVITYID,100447, 41, 'I', GE_BOCONSTANTS.GETTRUE);
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALWATMETEXINSERT; 
        
            
    PROCEDURE VALGASMETEXTOINSERT  
    IS
        NUORDERACTIVITYID NUMBER;
        SBELEMENTCODE VARCHAR2(1024);
    BEGIN
        NUORDERACTIVITYID:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        SBELEMENTCODE:=  OR_BCPLANNINGACTIVIT.FSBGETELEMENTCODE(NUORDERACTIVITYID,100644, 38, 'I', GE_BOCONSTANTS.GETTRUE);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALGASMETEXTOINSERT; 
        
            
    PROCEDURE VALMULTICRDATA    
    IS
        NUORDERID NUMBER;
        NUMOTIVEID NUMBER;

    BEGIN
        NUORDERID  := OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        NUMOTIVEID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALMULTICRDATA;
        
            
    PROCEDURE VALMULTIUPDDATA 
    IS
        NUORDERID NUMBER;
        NUMOTIVEID NUMBER;

    BEGIN
        NUORDERID  :=OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        NUMOTIVEID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALMULTIUPDDATA;

        
            
    PROCEDURE VALTRANSFORRETIRE
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    BEGIN
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        OR_BOLEGALIZESERVICES.RETIRETRANSFORMER(NUORDERACTIVITYID);
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END VALTRANSFORRETIRE;
    










    PROCEDURE SEMAPHOREWITHDRAW
    IS
        DTDATE      DATE;
        NUORDERID   OR_ORDER_ACTIVITY.ORDER_ID%TYPE;
        NUMOTIVEID  OR_ORDER_ACTIVITY.MOTIVE_ID%TYPE;
    BEGIN
        NUORDERID := OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        DTDATE:=DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(NUORDERID);
        NUMOTIVEID:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;

        OR_BOCNF_GENERALEXPRESSIONS.UPMEDIATDATEINMOMOT(NUMOTIVEID, 202, TRUE, FALSE, TRUE, DTDATE);

    EXCEPTION
        	WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;
 

    PROCEDURE REGISTERVALUETODEBIT
    IS
        NUMOTIVE            MO_MOTIVE.MOTIVE_ID%TYPE;
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUVALUETODEBIT      MO_MOTIVE.VALUE_TO_DEBIT%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia  metodo Or_boObjActUtilities.registerValueToDebit',12);

         
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        
        NUMOTIVE:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
        
        NUVALUETODEBIT:= OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('VALUE_TO_DEBIT',NUORDERACTIVITYID);
        
        DAMO_MOTIVE.UPDVALUE_TO_DEBIT(NUMOTIVE,NUVALUETODEBIT);

        UT_TRACE.TRACE('Finaliza  metodo Or_boObjActUtilities.registerValueToDebit',12);
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGISTERVALUETODEBIT;

    PROCEDURE UPDELEMSUCCESSCALIBRATE
    IS
        NUORDERACTIVITY   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUELEMENT_ID      OR_ORDER_ACTIVITY.ELEMENT_ID%TYPE;

    BEGIN
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUELEMENT_ID    := DAOR_ORDER_ACTIVITY.FNUGETELEMENT_ID(NUORDERACTIVITY);

        IF NUELEMENT_ID IS NOT NULL THEN
            IF_BOMETER.SAVEMETERSETUPBY(NUELEMENT_ID, OR_BOMETERLAB.CSBMEASUREDBYCOMP);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END UPDELEMSUCCESSCALIBRATE;
    
    PROCEDURE REPLACEITEM
    IS
        NUMOTIVE            MO_MOTIVE.MOTIVE_ID%TYPE;
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUINSTALLITEM       GE_ITEMS.ITEMS_ID%TYPE;
        NUWIDRAWITEM        GE_ITEMS.ITEMS_ID%TYPE;
        TBORORDERITEMS      DAOR_ORDER_ITEMS.TYTBOR_ORDER_ITEMS;
        SBINSTANCE_NAME     GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
        UT_TRACE.TRACE('Inicia  metodo Or_boObjActUtilities.replaceItem',12);

         
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        
        NUINSTALLITEM:= OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('ITEM_TO_INSTALL',NUORDERACTIVITYID);
        
        NUWIDRAWITEM:= OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('ITEM_TO_WITRAW',NUORDERACTIVITYID);

        
        TBORORDERITEMS(1).ORDER_ITEMS_ID := OR_BOSEQUENCES.FNUNEXTOR_ORDER_ITEMS;
        TBORORDERITEMS(1).ORDER_ID := OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        TBORORDERITEMS(1).ITEMS_ID := NUINSTALLITEM;
		TBORORDERITEMS(1).ASSIGNED_ITEM_AMOUNT := 0;
		TBORORDERITEMS(1).LEGAL_ITEM_AMOUNT := 1;
		TBORORDERITEMS(1).VALUE := 0;
		
		TBORORDERITEMS(1).TOTAL_PRICE := 0;
		
		TBORORDERITEMS(1).ORDER_ACTIVITY_ID := NUORDERACTIVITYID;
		
        SBINSTANCE_NAME := OR_BOLEGALIZEACTIVITIES.CSBACTIVITYINSTANCE
            || NUORDERACTIVITYID;

		IF NUINSTALLITEM = NUWIDRAWITEM THEN
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBINSTANCE_NAME, NULL, 'OR_LEGALIZE_DATA', 'SAME_ITEM', 'YES', TRUE);
        ELSE
    		TBORORDERITEMS(2).ORDER_ITEMS_ID := OR_BOSEQUENCES.FNUNEXTOR_ORDER_ITEMS;
    		TBORORDERITEMS(2).ORDER_ID := OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
            TBORORDERITEMS(2).ITEMS_ID := NUWIDRAWITEM;
    		TBORORDERITEMS(2).ASSIGNED_ITEM_AMOUNT := 0;
    		TBORORDERITEMS(2).LEGAL_ITEM_AMOUNT := 1;
    		TBORORDERITEMS(2).VALUE := 0;
    		TBORORDERITEMS(2).TOTAL_PRICE := 0;
    		TBORORDERITEMS(2).ORDER_ACTIVITY_ID := NUORDERACTIVITYID;

        END IF;

        UT_TRACE.TRACE('N�mero de items a insertar:'||TBORORDERITEMS.COUNT,12);
        DAOR_ORDER_ITEMS.INSRECORDS(TBORORDERITEMS);

        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBINSTANCE_NAME, NULL, 'OR_LEGALIZE_DATA', 'GENERIC_CHANGE', 'YES', TRUE);
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBINSTANCE_NAME, NULL, 'OR_LEGALIZE_DATA', 'NEW_ORDER_ITEMS', TBORORDERITEMS(1).ORDER_ITEMS_ID, TRUE);

        UT_TRACE.TRACE('Finaliza  metodo Or_boObjActUtilities.replaceItem',12);
    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REPLACEITEM;
    

    




















    PROCEDURE  INSGAUGEDPOWERPROD
    IS
        NUORDERID               OR_ORDER.ORDER_ID%TYPE;
        RCAFORSESU              AFORSESU%ROWTYPE;
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUPRODUCTID             PR_PRODUCT.PRODUCT_ID%TYPE;
        SBVALAFORO              VARCHAR2(4000);
        NUVALAFORO              AFORSESU.AFSSCAAF%TYPE;
        DTDATE                  OR_ORDER.EXECUTION_FINAL_DATE%TYPE;
        NUCLASSSERVICE          MO_COMPONENT.CLASS_SERVICE_ID%TYPE;
        NUBASECOMPID            MO_COMPONENT.COMPONENT_ID%TYPE;
        RCMOBASECOMP            DAMO_COMPONENT.STYMO_COMPONENT;
        RCMOTIVE                DAMO_MOTIVE.STYMO_MOTIVE;
        SBINSTANCE              GE_BOINSTANCECONTROL.STYSBNAME;

        NUROUTECONS             MO_DATA_UTILITIES.ROUTE%TYPE;
        RCDATAUTILITIES         DAMO_DATA_UTILITIES.STYMO_DATA_UTILITIES;

        SBTIPOCONS              VARCHAR2(4000);
        NUTIPOCONS              TIPOCONS.TCONCODI%TYPE;
        RCTIPOCONS              TIPOCONS%ROWTYPE;
    BEGIN

        UT_TRACE.TRACE('[Inicia] Or_boObjActUtilities.InsGaugedPowerProd',2);

        
        NUORDERID := OR_BOINSTANCE.FNUGETORDERIDFROMINSTANCE;
        
        DTDATE          := DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(NUORDERID);

        
        NUORDERACTIVITYID  := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        NUPRODUCTID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;

        
        NUBASECOMPID:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRCOMPONENT;
        RCMOBASECOMP := DAMO_COMPONENT.FRCGETRECORD(NUBASECOMPID);

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(RCMOBASECOMP.MOTIVE_ID);

        
        SBVALAFORO := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE(
            CSBGAUGED_CAPACITY,
            NUORDERACTIVITYID) ;
            
        SBTIPOCONS := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE(
            CSBGAUGED_TIPOCONS,
            NUORDERACTIVITYID) ;

        NUTIPOCONS := TO_NUMBER(SBTIPOCONS);
        IF (NUTIPOCONS IS NULL) THEN
            
            NUTIPOCONS := CNUSUBSIDY_TYPE;
        END IF;
        RCTIPOCONS := PKTBLTIPOCONS.FRCGETRECORD(NUTIPOCONS);

        UT_TRACE.TRACE('nuValAforo['||SBVALAFORO||']',2);

        
        PKAFORSUBSSERVMGR.FILLDATAAFORSUBSSERV
            (
                NUPRODUCTID,
                TO_NUMBER(SBVALAFORO),
                UT_DATE.FDTSYSDATE,
                UT_DATE.FDTMAXDATE,
                RCTIPOCONS.TCONCODI,
                RCTIPOCONS.TCONUNME,
                CSBPERMANENT,
                0,
                RCAFORSESU
            );

        UT_TRACE.TRACE('Se registra Aforo afsscons['||RCAFORSESU.AFSSCONS||']',2);
        PKTBLAFORSESU.INSRECORD( RCAFORSESU );

        
        UT_TRACE.TRACE('Se actualiza componente',2);
        RCMOBASECOMP.MEDIATION_DATE := DTDATE;
        RCMOBASECOMP.SERVICE_DATE := DTDATE;
        RCMOBASECOMP.STATUS_CHANGE_DATE := DTDATE;
        RCMOBASECOMP.ESTIMATED_INST_DATE := RCMOTIVE.ESTIMATED_INST_DATE;
        DAMO_COMPONENT.UPDRECORD(RCMOBASECOMP);

        RCDATAUTILITIES := MO_BCDATAUTILITIES.FRFGETRECORD(RCMOTIVE.MOTIVE_ID);
        NUROUTECONS := RCDATAUTILITIES.ROUTE;


        UT_TRACE.TRACE('[FIN] Or_boObjActUtilities.InsGaugedPowerProd',1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] Or_boObjActUtilities.InsGaugedPowerProd',1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[OTHERS ERROR] Or_boObjActUtilities.InsGaugedPowerProd',1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSGAUGEDPOWERPROD;

    













    PROCEDURE RETPOWSERVUPDREAD
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        RCORDERACTIVITY     DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        DTEXEFINALDATE      DATE;
        NUCOMPONENTID       PR_COMPONENT.COMPONENT_ID%TYPE;
        RCMOCOMPONENT       DAMO_COMPONENT.STYMO_COMPONENT;
        RCPRNETWORK         DAPR_NETWORK_ELEM_OPER.STYPR_NETWORK_ELEM_OPER;

    BEGIN
        UT_TRACE.TRACE('Inicia Or_boObjActUtilities.retPowServUpdRead',15);

        
        NUORDERACTIVITYID  := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(NUORDERACTIVITYID);

        
        DTEXEFINALDATE := DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE(RCORDERACTIVITY.ORDER_ID);

        
        FOR RCAFORSESU IN PKBCAFORSESU.CUAFOROBYPRODUCT(RCORDERACTIVITY.PRODUCT_ID,DTEXEFINALDATE) LOOP
            UT_TRACE.TRACE('Se actualiza fecha de cierre del aforo',2);

            UPDATE AFORSESU
            SET AFSSFFVI = UT_DATE.FDTSYSDATE
            WHERE  AFSSCONS = RCAFORSESU.AFSSCONS;

        END LOOP;

        
        NUCOMPONENTID := FNUGETCURRENTBASECOMP;
        UT_TRACE.TRACE('nuComponentId '||NUCOMPONENTID,15);

        RCMOCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(NUCOMPONENTID);

        UT_TRACE.TRACE('rcMOComponent.component_id_prod '||RCMOCOMPONENT.COMPONENT_ID_PROD,15);

        
        FOR RCROW IN PR_BCCOMPONENT.CUGETELEMOPERBYCOMPONENT(RCMOCOMPONENT.COMPONENT_ID_PROD) LOOP
            RCPRNETWORK := DAPR_NETWORK_ELEM_OPER.FRCGETRECORD(RCROW.NETWORK_ELEM_OPER_ID);

            RCPRNETWORK.CATEGORY_ID := IM_BOCONSTANTS.CNUCATEGORYWITHDRAW;
            RCPRNETWORK.NETWORK_ELEM_OPER_ID := PR_BOSEQUENCE.GETNETWORKELEMOPERID;

            DAPR_NETWORK_ELEM_OPER.INSRECORD(RCPRNETWORK);
        END LOOP;

        UT_TRACE.TRACE('Finaliza Or_boObjActUtilities.retPowServUpdRead',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RETPOWSERVUPDREAD;
    
    















    PROCEDURE PROCESSAFORINSPEC
    IS
        NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        SBCOMMENT1      VARCHAR2(4);
        SBCOMMENT2      VARCHAR2(4);
        SBCOMMENT3      VARCHAR2(4);
        NUCOMMENT1      NUMBER;
        NUCOMMENT2      NUMBER;
        NUCOMMENT3      NUMBER;
        RCCMOBSESESA    CM_OBSESESA%ROWTYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Or_boObjActUtilities.processAforInspec',15);
        
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        
        SBCOMMENT1 := OR_BOINSTANCE.FSBGETINSTANCORDACTATTR(NUORDERACTIVITY,CSBCOMMENT1);
        SBCOMMENT2 := OR_BOINSTANCE.FSBGETINSTANCORDACTATTR(NUORDERACTIVITY,CSBCOMMENT2);
        SBCOMMENT3 := OR_BOINSTANCE.FSBGETINSTANCORDACTATTR(NUORDERACTIVITY,CSBCOMMENT3);
        
        NUCOMMENT1 := TO_NUMBER(SBCOMMENT1);
        NUCOMMENT2 := TO_NUMBER(SBCOMMENT2);
        NUCOMMENT3 := TO_NUMBER(SBCOMMENT3);
        
        
        IF (NUCOMMENT1 IS NULL) THEN
            ERRORS.SETERROR(CNUERROR_3060, 'Observaci�n 1');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        PKOBSERVAOFREADINGMGR.VALBASICDATA(NUCOMMENT1,PKCONSTANTE.NO);
        IF (NUCOMMENT2 IS NOT NULL) THEN
            PKOBSERVAOFREADINGMGR.VALBASICDATA(NUCOMMENT2,PKCONSTANTE.NO);
        END IF;
        IF (NUCOMMENT3 IS NOT NULL) THEN
            PKOBSERVAOFREADINGMGR.VALBASICDATA(NUCOMMENT3,PKCONSTANTE.NO);
        END IF;

        
        IF (NUCOMMENT1 = NUCOMMENT2) THEN
            ERRORS.SETERROR(CNUERROR_COMMENT,
                            '[Observaci�n 1]|[Observaci�n 2]');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        IF (NUCOMMENT1 = NUCOMMENT3) THEN
            ERRORS.SETERROR(CNUERROR_COMMENT,
                            '[Observaci�n 1]|[Observaci�n 3]');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        IF (NUCOMMENT2 = NUCOMMENT3) THEN
            ERRORS.SETERROR(CNUERROR_COMMENT,
                            '[Observaci�n 2]|[Observaci�n 3]');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        RCCMOBSESESA := CM_BCOBSESESA.FRCGETOBSESESABYORDER(NUORDERACTIVITY);
        
        RCCMOBSESESA.OBSEOBS1 := NUCOMMENT1;
        RCCMOBSESESA.OBSEOBS2 := NUCOMMENT2;
        RCCMOBSESESA.OBSEOBS3 := NUCOMMENT3;
        RCCMOBSESESA.OBSEFEOB := UT_DATE.FDTSYSDATE;
        
        PKTBLCM_OBSESESA.UPRECORD(RCCMOBSESESA);
        UT_TRACE.TRACE('Fin Or_boObjActUtilities.processAforInspec',15);
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSAFORINSPEC;
    
    



































    PROCEDURE PROCESSREADING
    IS
        NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        SBCOMMENT1      VARCHAR2(4);
        SBCOMMENT2      VARCHAR2(4);
        SBCOMMENT3      VARCHAR2(4);
        NUCOMMENT1      NUMBER;
        NUCOMMENT2      NUMBER;
        NUCOMMENT3      NUMBER;
        SBDATE          VARCHAR2(100);
        DTDATE          DATE;
        NUREAD          NUMBER;
        RCLECTELME      LECTELME%ROWTYPE;
        RCREADINGHIST   HILEELME%ROWTYPE;
        RCPERICOSE      PERICOSE%ROWTYPE;
        RCORDER         DAOR_ORDER.STYOR_ORDER;
        SBSERIAL        GE_ITEMS_SERIADO.SERIE%TYPE;
        NUSERIALITEM    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        NUITEMID        GE_ITEMS_SERIADO.ITEMS_ID%TYPE;
        NUITEMTYPEID    GE_ITEMS.ID_ITEMS_TIPO%TYPE;
        NUITEMTYPEATTID GE_ITEMS_TIPO_ATR.ID_ITEMS_TIPO_ATR%TYPE;
        NUIDATRIBUTEVALUE  GE_ITEMS_TIPO_AT_VAL.ID_ITEMS_TIPO_AT_VAL%TYPE;
        SBVALOR            GE_ITEMS_TIPO_AT_VAL.VALOR%TYPE;
        CSBMETERFACTOR  VARCHAR2(50) := 'METER_FACTOR';
        RCOBSELECT      OBSELECT%ROWTYPE;
        

        CNUERROR_901801 NUMBER := 901801;
        
        CNUERROR_901800 NUMBER := 901800;
    BEGIN
        UT_TRACE.TRACE('Inicia Or_boObjActUtilities.processReading',15);

        
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        
        SBCOMMENT1 := OR_BOINSTANCE.FSBGETINSTANCORDACTATTR(NUORDERACTIVITY,CSBCOMMENT1);
        SBCOMMENT2 := OR_BOINSTANCE.FSBGETINSTANCORDACTATTR(NUORDERACTIVITY,CSBCOMMENT2);
        SBCOMMENT3 := OR_BOINSTANCE.FSBGETINSTANCORDACTATTR(NUORDERACTIVITY,CSBCOMMENT3);

        NUCOMMENT1 := TO_NUMBER(SBCOMMENT1);
        NUCOMMENT2 := TO_NUMBER(SBCOMMENT2);
        NUCOMMENT3 := TO_NUMBER(SBCOMMENT3);
        
        
        NUREAD  := UT_CONVERT.FNUCHARTONUMCONTROL(OR_BOINSTANCE.FSBGETINSTANCORDACTATTR(NUORDERACTIVITY,CSBREAD));

        IF (NUREAD IS NULL) THEN
            
            IF (NUCOMMENT1 IS NULL) THEN
                ERRORS.SETERROR(CNUERROR_3060, 'Observaci�n 1');
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            RCOBSELECT := PKTBLOBSELECT.FRCGETRECORD(NUCOMMENT1);
            IF (NVL(RCOBSELECT.OBLECANL,
                    PKCONSTANTE.NO) <> PKCONSTANTE.SI) THEN
                ERRORS.SETERROR(CNUNO_CAUSNOLE);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            IF (NUCOMMENT2 IS NOT NULL) THEN
                PKOBSERVAOFREADINGMGR.VALBASICDATA(NUCOMMENT2,PKCONSTANTE.SI);
            END IF;
            IF (NUCOMMENT3 IS NOT NULL) THEN
                PKOBSERVAOFREADINGMGR.VALBASICDATA(NUCOMMENT3,PKCONSTANTE.SI);
            END IF;
        ELSE
            
            IF (NUREAD < 0) THEN
                ERRORS.SETERROR(CNUERROR_3461);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            IF (NUCOMMENT1 IS NOT NULL) THEN
                PKOBSERVAOFREADINGMGR.VALBASICDATA(NUCOMMENT1,PKCONSTANTE.NO);
            END IF;
            IF (NUCOMMENT2 IS NOT NULL) THEN
                PKOBSERVAOFREADINGMGR.VALBASICDATA(NUCOMMENT2,PKCONSTANTE.NO);
            END IF;
            IF (NUCOMMENT3 IS NOT NULL) THEN
                PKOBSERVAOFREADINGMGR.VALBASICDATA(NUCOMMENT3,PKCONSTANTE.NO);
            END IF;
        END IF;

        
        IF (NUCOMMENT1 = NUCOMMENT2) THEN
            ERRORS.SETERROR(CNUERROR_COMMENT,
                            '[Observaci�n 1]|[Observaci�n 2]');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        IF (NUCOMMENT1 = NUCOMMENT3) THEN
            ERRORS.SETERROR(CNUERROR_COMMENT,
                            '[Observaci�n 1]|[Observaci�n 3]');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        IF (NUCOMMENT2 = NUCOMMENT3) THEN
            ERRORS.SETERROR(CNUERROR_COMMENT,
                            '[Observaci�n 2]|[Observaci�n 3]');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        RCLECTELME := PKBCLECTELME.FRCGETREADINGBYORDER(NUORDERACTIVITY);
        RCPERICOSE := PKTBLPERICOSE.FRCGETRECORD(RCLECTELME.LEEMPECS);
        
        
        IF (RCPERICOSE.PECSPROC <> PKCONSTANTE.SI) THEN
            

            ERRORS.SETERROR(CNUERROR_901800);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        

        IF (PKTBLELEMMEDI.FNUGETELMECLEM(RCLECTELME.LEEMELME) = CM_BCCONSTANTS.CNUCOMMONAREAMETER
            AND PKBCLECTELME.FBOMISSINGREADINGS(RCLECTELME.LEEMELME, RCLECTELME.LEEMPECS)) THEN
                

                ERRORS.SETERROR(CNUERROR_901801,PKTBLELEMMEDI.FSBGETELMECODI(RCLECTELME.LEEMELME));
                RAISE EX.CONTROLLED_ERROR;
        END IF;

        IF (NUREAD IS NOT NULL) THEN
            
            PKBOMEASELEMCONSMPTCALCDATA.VALIDATEREADBUTT(RCLECTELME.LEEMELME,
                                                         RCLECTELME.LEEMTCON,
                                                         NUREAD);
        END IF;

        
        RCREADINGHIST := PKBCHILEELME.FRCFIRST(RCLECTELME.LEEMCONS);

        IF ( RCREADINGHIST.HLEMCONS IS NULL ) OR ( NUREAD IS NOT NULL ) THEN
        
            UT_TRACE.TRACE('No es una relectura � la lectura no es nula',15);

            
            SBDATE := OR_BOINSTANCE.FSBGETINSTANCEORDERATTR(OR_BOINSTANCE.CSBEXECFINALDATE);
            DTDATE := NVL(UT_DATE.FDTDATEWITHFORMAT(SBDATE),
                          UT_DATE.FDTSYSDATE);

            RCLECTELME.LEEMFELE := DTDATE;
            UT_TRACE.TRACE('Fecah de lectura: '||DTDATE,15);
        
        END IF;

        
        RCLECTELME.LEEMOBLE := NUCOMMENT1;
        RCLECTELME.LEEMOBSB := NUCOMMENT2;
        RCLECTELME.LEEMOBSC := NUCOMMENT3;
        RCLECTELME.LEEMLETO := NUREAD;
        
        
        DAOR_ORDER.GETRECORD(OR_BOLEGALIZEORDER.FNUGETCURRENTORDER,
                             RCORDER);
        
        
        BEGIN
            RCLECTELME.LEEMPETL := DAOR_ORDER_PERSON.FNUGETPERSON_ID(RCORDER.OPERATING_UNIT_ID,
                                                                     RCORDER.ORDER_ID);
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        
        
        SBSERIAL := PKTBLELEMMEDI.FSBGETELMECODI(RCLECTELME.LEEMELME);
        GE_BCITEMSSERIADO.GETIDBYSERIE(SBSERIAL, NUSERIALITEM);
        NUITEMID := DAGE_ITEMS_SERIADO.FNUGETITEMS_ID(NUSERIALITEM);
        NUITEMTYPEID := DAGE_ITEMS.FNUGETID_ITEMS_TIPO(NUITEMID);

        
        NUITEMTYPEATTID := GE_BCITEMSTIPO.FNUGETATRIBUTOTIPO(NUITEMTYPEID, CSBMETERFACTOR);

        
        IF (NUITEMTYPEATTID IS NULL OR NUITEMTYPEATTID = 0) THEN
            RCLECTELME.LEEMFAME := NULL;
        ELSE
            GE_BCITEMSSERIADO.GETATRIBUTEVALUE(NUITEMTYPEATTID,NUSERIALITEM, NUIDATRIBUTEVALUE, SBVALOR);
            RCLECTELME.LEEMFAME := UT_CONVERT.FNUCHARTONUMBER(SBVALOR);
        END IF;

        PKTBLLECTELME.UPRECORD(RCLECTELME);

        
        
        CM_BOCONSUMPTIONENGINE.CALCULATECONSUMPTION(RCLECTELME,
                                                    RCORDER,
                                                    DAOR_ORDER_ACTIVITY.FNUGETACTIVITY_ID(RCLECTELME.LEEMDOCU));

        UT_TRACE.TRACE('Fin Or_boObjActUtilities.processReading',15);
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSREADING;
    
    



















    PROCEDURE PROCESSPRODUCTION
    IS
        NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        SBPRODUCTION    VARCHAR2(100);
        NUPRODUCTION    NUMBER;
        SBDATE          VARCHAR2(100);
        DTDATE          DATE;
        RCDETAPROD      DETAPROD%ROWTYPE;
        RCORDERACTIVITY DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        NUCOMPONENTPRID MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCLASSSERVICE  TICOCLSE.TCCLCLSE%TYPE;
        NUTCCLTCON      TICOCLSE.TCCLTCON%TYPE;
        CNUERROR_902124 CONSTANT NUMBER := 902124;
    BEGIN
        UT_TRACE.TRACE('Inicia Or_boObjActUtilities.processProduction',15);

        
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        
        SBPRODUCTION := OR_BOINSTANCE.FSBGETINSTANCORDACTATTR(NUORDERACTIVITY,CSBPRODUCTION);

        NUPRODUCTION := UT_CONVERT.FNUCHARTONUMCONTROL(SBPRODUCTION);
        
        
        IF (NUPRODUCTION < 0) THEN
            ERRORS.SETERROR(CNUERROR_PROD);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        SBDATE := OR_BOINSTANCE.FSBGETINSTANCEORDERATTR(OR_BOINSTANCE.CSBEXECFINALDATE);
        DTDATE := NVL(UT_DATE.FDTDATEWITHFORMAT(SBDATE),
                      UT_DATE.FDTSYSDATE);

        
        RCDETAPROD := PKBCDETAPROD.FRCGETRECORDBYDOCUMENT(NUORDERACTIVITY);
        
        IF (RCDETAPROD.DEPRCONS IS NULL) THEN
            
            
            DAOR_ORDER_ACTIVITY.GETRECORD(NUORDERACTIVITY, RCORDERACTIVITY);
            NUCOMPONENTPRID := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(RCORDERACTIVITY.COMPONENT_ID);
            NUCLASSSERVICE := DAPR_COMPONENT.FNUGETCLASS_SERVICE_ID(NUCOMPONENTPRID);
            
            
            NUTCCLTCON := PKBCTICOCLSE.FNUGETCONSTYBYCLASSACT(NUCLASSSERVICE, RCORDERACTIVITY.ACTIVITY_ID);
            IF (NUTCCLTCON IS NULL) THEN
                ERRORS.SETERROR(CNUERROR_902124,
                    NUCLASSSERVICE||'-'||DAPS_CLASS_SERVICE.FSBGETDESCRIPTION(NUCLASSSERVICE)||'|'||
                    RCORDERACTIVITY.ACTIVITY_ID||'-'||DAGE_ITEMS.FSBGETDESCRIPTION(RCORDERACTIVITY.ACTIVITY_ID)
                                );
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            RCDETAPROD.DEPRCONS := CM_BOSEQUENCE.FNUDETAPRODNEXTSEQVAL;
            RCDETAPROD.DEPRSESU := RCORDERACTIVITY.PRODUCT_ID;
            RCDETAPROD.DEPRTCON := NUTCCLTCON;
            RCDETAPROD.DEPRPROD := NUPRODUCTION;
            RCDETAPROD.DEPRFERE := DTDATE;
            RCDETAPROD.DEPRDOSO := NUORDERACTIVITY;
            RCDETAPROD.DEPRFECH := DTDATE;
            RCDETAPROD.DEPRCMSS := NUCOMPONENTPRID;
            PKTBLDETAPROD.INSRECORD(RCDETAPROD);
        ELSE
            
            RCDETAPROD.DEPRPROD := NUPRODUCTION;
            RCDETAPROD.DEPRFERE := DTDATE;
            PKTBLDETAPROD.UPRECORD(RCDETAPROD);
        END IF;

        
        OR_BOREVIEW.PROCESSREGISTERREVIEW(NUORDERACTIVITY);

        UT_TRACE.TRACE('Fin Or_boObjActUtilities.processProduction',15);
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSPRODUCTION;
    
    















    PROCEDURE  VALREGROUTE
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        SBROUTEID           VARCHAR2(15);
        NUCOMPONENTID       PR_COMPONENT.COMPONENT_ID%TYPE;
    BEGIN
        
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        SBROUTEID     := OR_BOINSTANCE.FSBGETINSTANCORDACTATTR(NUORDERACTIVITYID,CSBROUTE);

        
        NUCOMPONENTID := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(DAOR_ORDER_ACTIVITY.FNUGETCOMPONENT_ID(NUORDERACTIVITYID));
    
        
        CM_BORUBBISHROUTE.VALREGROUTE(TO_NUMBER(SBROUTEID),NUCOMPONENTID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALREGROUTE;
    
    















    PROCEDURE REGADMINSUSPENSION
    IS
        NUORDERACTIVITY     OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        SBSUSPENSIONTYPE    VARCHAR2(4000);
        
        NUPRODUCT           OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia Or_boObjActUtilities.RegAdminSuspension',15);

        
        NUORDERACTIVITY := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        
        SBSUSPENSIONTYPE := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE(CSBSUSPENSION_TYPE,NUORDERACTIVITY);
        
        NUPRODUCT := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;

        IF (SBSUSPENSIONTYPE IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_900803,NULL);
        END IF;

        MO_BOSUSPENSION.REGADMINSUSPENSION(NUORDERACTIVITY,SBSUSPENSIONTYPE, NULL, NULL);

        
        DAPR_PRODUCT.UPDSUSPEN_ORD_ACT_ID( NUPRODUCT, NUORDERACTIVITY );

        UT_TRACE.TRACE('Fin Or_boObjActUtilities.RegAdminSuspension',15);
        
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGADMINSUSPENSION;

    















    PROCEDURE REGISTERREVIEW
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        SBREVISEDORDER      VARCHAR2(4000);
        RCRELATEDORDER      DAOR_RELATED_ORDER.STYOR_RELATED_ORDER;
        NUORDERID           OR_ORDER.ORDER_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Or_boObjActUtilities.RegisterReview',15);

         
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        OR_BOREVIEW.PROCESSREGISTERREVIEW(NUORDERACTIVITYID);

        
        SBREVISEDORDER := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE(CSBREVISED_ORDER,NUORDERACTIVITYID);

        IF (SBREVISEDORDER IS NOT NULL) THEN
            UT_TRACE.TRACE('Se registra la orden revisada --> '||SBREVISEDORDER,15);
            
            NUORDERID := DAOR_ORDER_ACTIVITY.FNUGETORDER_ID(NUORDERACTIVITYID);
            
            
            RCRELATEDORDER.ORDER_ID := NUORDERID;
            RCRELATEDORDER.RELATED_ORDER_ID := TO_NUMBER(SBREVISEDORDER);
            
            
            RCRELATEDORDER.RELA_ORDER_TYPE_ID := OR_BOCONSTANTS.CNURELATION_REV_ORDER;

            DAOR_RELATED_ORDER.INSRECORD(RCRELATEDORDER);
        END IF;

        UT_TRACE.TRACE('Finaliza Or_boObjActUtilities.RegisterReview',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE ANULLCERTIFICATE
    IS
        NUPRODUCTID         OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia Or_boObjActUtilities.AnullCertificate',15);

         
        NUPRODUCTID         := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;
        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        PR_BOCERTIFICATE.ANULLCERTIFICATE(NUPRODUCTID, NUORDERACTIVITYID);

        UT_TRACE.TRACE('Finaliza Or_boObjActUtilities.AnullCertificate',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE REGISTERCERTIFICATE
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUPRODUCTID         OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Or_boObjActUtilities.RegisterCertificate',15);

        
        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUPRODUCTID         := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;

        
        PR_BOCERTIFICATE.PROCESSREGISTERCERTIF(NUORDERACTIVITYID, NUPRODUCTID);

        UT_TRACE.TRACE('Finaliza Or_boObjActUtilities.RegisterCertificate',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE VALIDATECERTIFICATE
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUPRODUCTID         OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Or_boObjActUtilities.ValidateCertificate',15);

        
        NUORDERACTIVITYID   := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUPRODUCTID         := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;

        
        PR_BOCERTIFICATE.PROCESSVALIDATECERTIF(NUORDERACTIVITYID, NUPRODUCTID);

        UT_TRACE.TRACE('Finaliza Or_boObjActUtilities.ValidateCertificate',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    PROCEDURE MEASUMETHOD
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID %TYPE;
        NUCLASSSERVICEID    MO_COMPONENT.CLASS_SERVICE_ID%TYPE;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID       MO_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODUCTID         MO_MOTIVE.PRODUCT_ID%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOObjActivitEquip.MeasuMethod', 2 );

        
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;

        
        NUCLASSSERVICEID := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE ('MEASUMETHOD', NUORDERACTIVITYID);

        
        
        NUMOTIVEID      :=  OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;

        NUCOMPONENTID   :=  OR_BOLEGALIZEACTIVITIES.FNUGETCURRCOMPONENT;
        
        NUPRODUCTID     :=  OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;

        
        MO_BOCOMPONENTUPDATE.UPDSERVICECLASS
            (
                NUMOTIVEID,
                NUPRODUCTID,
                NUCOMPONENTID,
                NUCLASSSERVICEID
            );

        UT_TRACE.TRACE('FIN OR_BOObjActivitEquip.MeasuMethod', 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END MEASUMETHOD;

    



















    PROCEDURE ADDELEMENTPRODUCT
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID %TYPE;
        SBELEMENTCODE       IF_NODE.CODE%TYPE;
        NUMOCOMPONENTID     MO_COMPONENT.COMPONENT_ID%TYPE;
        NUPRCOMPONENTID     PR_COMPONENT.COMPONENT_ID%TYPE;
        NUELEMENTID         IF_NODE.ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('INICIO - Or_boObjActUtilities.AddElementProduct ',15);

        
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        
        
        SBELEMENTCODE := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE ('CODE_ELEM_PRODUCT', NUORDERACTIVITYID);

        
        NUMOCOMPONENTID   :=  OR_BOLEGALIZEACTIVITIES.FNUGETCURRCOMPONENT;

        UT_TRACE.TRACE('sbElementCode['||SBELEMENTCODE||'] - nuMoComponentId['||NUMOCOMPONENTID||'] ',15);

        
        NUPRCOMPONENTID := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(NUMOCOMPONENTID);

        IF_BONODE.GETIDFROMCODE(CNUPIPE_ELEMENT_TYPE, SBELEMENTCODE, NUELEMENTID);
        
        UT_TRACE.TRACE('nuPrComponentId['||NUPRCOMPONENTID||'] - nuElementId['||NUELEMENTID||']',15);

        IF(NUELEMENTID IS NULL)THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_3320, SBELEMENTCODE);
        END IF;

        IM_BONOPROVUTILITIES.INSPRNETOPER
        (
            NUELEMENTID,
            SBELEMENTCODE,
            CNUPIPE_ELEMENT_TYPE,
            NUPRCOMPONENTID,
            IM_BOCONSTANTS.CNUCATEGORYSERVICES,
            1,
            0
        );

        UT_TRACE.TRACE('FIN - Or_boObjActUtilities.AddElementProduct ',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDELEMENTPRODUCT;
    
    
    

















    PROCEDURE REGISTERAFOROTOPROD
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID %TYPE;
        NUPRODUCTID         OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;

        NUCANTIDADAFORO     AFORSESU.AFSSCAAF%TYPE;
        NUTIPOCONS          TIPOCONS.TCONCODI%TYPE;
        CNUERR_6765         GE_MESSAGE.MESSAGE_ID%TYPE := 6765;
        
    BEGIN
        UT_TRACE.TRACE('INICIO - Or_boObjActUtilities.registerAforoToProd ',15);
    
        
        NUORDERACTIVITYID   :=  OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUPRODUCTID         :=  OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;
        
        NUCANTIDADAFORO := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('CANTIDAD_AFORO',NUORDERACTIVITYID);
        NUTIPOCONS := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('TIPO_CONSUMO',NUORDERACTIVITYID);


        IF(NVL(NUCANTIDADAFORO, -1) < 0 )THEN
            GE_BOERRORS.SETERRORCODE(CNUERR_6765);
        END IF;

        PKAFORSUBSSERVMGR.GENORUPDAFORSUBSSERV(
            NUPRODUCTID,
            NUCANTIDADAFORO, 
            PKGENERALSERVICES.FDTGETSYSTEMDATE,
            UT_DATE.FDTMAXDATE,
            NUTIPOCONS,
            NULL,
            'O',
            NUCANTIDADAFORO);

        UT_TRACE.TRACE('FIN - Or_boObjActUtilities.registerAforoToProd',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGISTERAFOROTOPROD;
    

    
















    PROCEDURE UPDATEPROVISIONSECTOR
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID %TYPE;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPROVSECTOR        MO_DATA_UTILITIES.PROVISION_SECTOR_ID%TYPE;
        CSBPROVSECTOR       VARCHAR2(50) := 'OR_PROVISION_SECTOR_ID';
    BEGIN
        UT_TRACE.TRACE('INICIO - Or_boObjActUtilities.updateProvisionSector',15);
        
        NUMOTIVEID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
        
        IF (NUMOTIVEID IS NOT NULL ) THEN
            
            NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
            
            NUPROVSECTOR := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE (CSBPROVSECTOR, NUORDERACTIVITYID);
            IF (NUPROVSECTOR IS NOT NULL) THEN
                MO_BODATAUTILITIES.UPDPROVISIONSECTOR(NUMOTIVEID, NUPROVSECTOR);
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN - Or_boObjActUtilities.updateProvisionSector',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEPROVISIONSECTOR;
    
    
    














    PROCEDURE UPDATEACTPRODTEMPPRESS
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID %TYPE;
        NUTEMPERATURE       CM_VAVAFACO.VVFCVALO%TYPE;
        NUPRESSURE          CM_VAVAFACO.VVFCVALO%TYPE;
        CSBTEMPERATURE      VARCHAR2(50) := 'RES_PROD_TEMPERATURE';
        CSBPRESSURE         VARCHAR2(50) := 'RES_PROD_PRESSURE';
        RCDUMMYREGVAR       CM_VAVAFACO%ROWTYPE;
        NUDUMMYAVGREGCOUNT  NUMBER;
        NUPRODUCTID         OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO - Or_boObjActUtilities.updateProvisionSector',15);

        
        NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
        NUPRODUCTID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;
        
        IF (NUPRODUCTID IS NOT NULL) THEN
            
            NUTEMPERATURE := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE (CSBTEMPERATURE, NUORDERACTIVITYID);
            IF (NUTEMPERATURE IS NOT NULL) THEN
                CM_BOCORRECTFACTORSVARS.REGISTER(
                    NULL,
                    NUPRODUCTID,
                    CM_BCCORRECTFACTORSVARS.CSBTEMPERATURA,
                    NUTEMPERATURE,
                    UT_DATE.FDTSYSDATE,
                    RCDUMMYREGVAR,
                    NUDUMMYAVGREGCOUNT
                );
            END IF;
            
            NUPRESSURE := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE (CSBPRESSURE, NUORDERACTIVITYID);
            IF (NUPRESSURE IS NOT NULL) THEN
                CM_BOCORRECTFACTORSVARS.REGISTER(
                    NULL,
                    NUPRODUCTID,
                    CM_BCCORRECTFACTORSVARS.CSBPRESION_OPERACION,
                    NUPRESSURE,
                    UT_DATE.FDTSYSDATE,
                    RCDUMMYREGVAR,
                    NUDUMMYAVGREGCOUNT
                );
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN - Or_boObjActUtilities.updateProvisionSector',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEACTPRODTEMPPRESS;
    
    




















    PROCEDURE UPDATESUBCATEGORY
    IS
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID %TYPE;
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        NUBILLDATACHANGE        MO_BILL_DATA_CHANGE.BILL_DATA_CHANGE_ID%TYPE;
        NUSUBCATEGCODI          SUBCATEG.SUCACODI%TYPE;
        NUOLDSUBCATEGCODI       SUBCATEG.SUCACODI%TYPE;
        CSBPSUBCATEGCODI        VARCHAR2(50) := 'Cod_Subcategoria';
    BEGIN
        UT_TRACE.TRACE('BEGIN Or_boObjActUtilities.UpdateSubcategory',2);
        
        
        NUMOTIVEID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRMOTIVE;
        
        UT_TRACE.TRACE('Motive Id: ' || NUMOTIVEID,3);

        IF (NUMOTIVEID IS NOT NULL ) THEN
            
            NUORDERACTIVITYID := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
            UT_TRACE.TRACE('Order_Activity Id: ' || NUORDERACTIVITYID, 3);
            
            
            NUSUBCATEGCODI := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE (CSBPSUBCATEGCODI, NUORDERACTIVITYID);
            UT_TRACE.TRACE('Subcategery Codi: ' || NUSUBCATEGCODI, 3);

            IF (NUSUBCATEGCODI IS NOT NULL) THEN
                NUOLDSUBCATEGCODI := DAMO_MOTIVE.FNUGETSUBCATEGORY_ID(NUMOTIVEID, 0);
                IF (NUOLDSUBCATEGCODI IS NULL OR NUSUBCATEGCODI != NUOLDSUBCATEGCODI) THEN
                    UT_TRACE.TRACE('Actualiza subcategor�a de [' || NUOLDSUBCATEGCODI || '] a [' || NUSUBCATEGCODI || ']', 3);
                    DAMO_MOTIVE.UPDSUBCATEGORY_ID(NUMOTIVEID, NUSUBCATEGCODI);
                    
                    
                    NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVEID, 0);
                    IF (NUPACKAGEID IS NOT NULL) THEN
                        
                        NUBILLDATACHANGE := MO_BOBILLINGDATACHANGE.FNUGETRECIDBYPACKID(NUPACKAGEID);
                        IF (NUBILLDATACHANGE IS NOT NULL) THEN
                            UT_TRACE.TRACE('Actualiza el tr�mite de cambio de [' || NUOLDSUBCATEGCODI || '] a [' || NUSUBCATEGCODI || ']', 3);
                            DAMO_BILL_DATA_CHANGE.UPDOLD_SUBCATEGORY_ID(NUBILLDATACHANGE, NUOLDSUBCATEGCODI);
                            DAMO_BILL_DATA_CHANGE.UPDNEW_SUBCATEGORY_ID(NUBILLDATACHANGE, NUSUBCATEGCODI);
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;

        UT_TRACE.TRACE('END Or_boObjActUtilities.UpdateSubcategory',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATESUBCATEGORY;
    
    
    

















    FUNCTION FSBEXISTPENDINGORDERS
    (
        INUPRODUCTID    IN OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE,
        ISBACTIVITIES   IN VARCHAR2
    ) RETURN VARCHAR2
    IS
    
        SBRETURN VARCHAR2(2) := GE_BOCONSTANTS.GETNO;
        SBACTIVITIES    VARCHAR2(2000);
        
    BEGIN
        UT_TRACE.TRACE('Init Or_boObjActUtilities.fsbExistPendingOrders',5);
        
        SBACTIVITIES := ','||ISBACTIVITIES||',';
    
        IF( OR_BCORDER.FNUEXISTPENDINGORDERS(INUPRODUCTID, SBACTIVITIES) > 0)THEN
            SBRETURN := GE_BOCONSTANTS.GETYES;
        END IF;

        UT_TRACE.TRACE('END Or_boObjActUtilities.fsbExistPendingOrders['||SBRETURN,5);
        RETURN  SBRETURN;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBEXISTPENDINGORDERS;
    
    


















    PROCEDURE VALORDERDATAFORATTEN
    IS
        NUORDERID   OR_ORDER_ACTIVITY.ORDER_ID %TYPE;
        NUPRODUCTID OR_ORDER_ACTIVITY.PRODUCT_ID %TYPE;
        IDTSUCOFEAT OR_ORDER.EXECUTION_FINAL_DATE %TYPE;
        RCBSSORDER  SUSPCONE%ROWTYPE;

    BEGIN
        UT_TRACE.TRACE('INICIO - Or_boObjActUtilities.ValOrderDataforAtten',15);
        NUORDERID := OR_BOLEGALIZEORDER.FNUGETCURRENTORDER;
        NUPRODUCTID:= OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;

        
        RCBSSORDER  := PKBCSUSPCONE.FRCGETRECORDBYTYPE(NUPRODUCTID, PKSUSPCONNSERVICE.CSBCONEXION);

        IDTSUCOFEAT:= DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE (NUORDERID);
        
        PKSUSPCONNSERVICEMGR.VALDATELESSORDERDATE ( RCBSSORDER.SUCOFEOR, IDTSUCOFEAT );

        
        PKSUSPCONNSERVICEMGR.VALDATELESSCURRENT ( IDTSUCOFEAT );


        UT_TRACE.TRACE('FIN - Or_boObjActUtilities.ValOrderDataforAtten',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALORDERDATAFORATTEN;

    
END OR_BOOBJACTUTILITIES;