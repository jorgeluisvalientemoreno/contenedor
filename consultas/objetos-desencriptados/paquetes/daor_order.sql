PACKAGE BODY DAOR_order
IS

    
    CNURECORD_NOT_EXIST CONSTANT NUMBER(1) := 1;
    CNURECORD_ALREADY_EXIST CONSTANT NUMBER(1) := 2;
    CNUAPPTABLEBUSSY CONSTANT NUMBER(4) := 6951;
    CNUINS_PK_NULL CONSTANT NUMBER(4):= 1682;
    CNURECORD_HAVE_CHILDREN CONSTANT NUMBER(4):= -2292;
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO388048';
    CSBTABLEPARAMETER   CONSTANT VARCHAR2(30) := 'OR_ORDER';
	 CNUGEENTITYID CONSTANT VARCHAR2(30) := 3294; 

	
	CURSOR CULOCKRCBYPK 
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
	)
	IS
		SELECT OR_ORDER.*,OR_ORDER.ROWID 
		FROM OR_ORDER
		WHERE  ORDER_ID = INUORDER_ID
		FOR UPDATE NOWAIT;

	
	CURSOR CULOCKRCBYROWID 
	(
		IRIROWID IN VARCHAR2
	)
	IS
		SELECT OR_ORDER.*,OR_ORDER.ROWID 
		FROM OR_ORDER
		WHERE 
			ROWID = IRIROWID
		FOR UPDATE NOWAIT;


	
	TYPE TYRFOR_ORDER IS REF CURSOR;

	
	RCRECOFTAB TYRCOR_ORDER;

	RCDATA CURECORD%ROWTYPE;

    BLDAO_USE_CACHE    BOOLEAN := NULL;


	
	FUNCTION FSBGETMESSAGEDESCRIPTION
	RETURN VARCHAR2
	IS 
	      SBTABLEDESCRIPTION VARCHAR2(32000);
	BEGIN
	    IF (CNUGEENTITYID > 0 AND DAGE_ENTITY.FBLEXIST (CNUGEENTITYID))  THEN
	          SBTABLEDESCRIPTION:= DAGE_ENTITY.FSBGETDISPLAY_NAME(CNUGEENTITYID);
	    ELSE
	          SBTABLEDESCRIPTION:= CSBTABLEPARAMETER;
	    END IF;

		RETURN SBTABLEDESCRIPTION ;
	END;
	PROCEDURE GETDAO_USE_CACHE
	IS
	BEGIN
	    IF ( BLDAO_USE_CACHE IS NULL ) THEN
	        BLDAO_USE_CACHE :=  GE_BOPARAMETER.FSBGET('DAO_USE_CACHE') = 'Y';
	    END IF;
	END;
	FUNCTION FSBPRIMARYKEY( RCI IN STYOR_ORDER DEFAULT RCDATA )
	RETURN VARCHAR2
	IS
		SBPK VARCHAR2(500);
	BEGIN
		SBPK:='[';
		SBPK:=SBPK||UT_CONVERT.FSBTOCHAR(RCI.ORDER_ID);
		SBPK:=SBPK||']';
		RETURN SBPK;
	END;
	PROCEDURE LOCKBYPK
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ORCOR_ORDER  OUT STYOR_ORDER
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID:=INUORDER_ID;

		OPEN CULOCKRCBYPK(INUORDER_ID);

		FETCH CULOCKRCBYPK INTO ORCOR_ORDER;
		IF CULOCKRCBYPK%NOTFOUND  THEN
			CLOSE CULOCKRCBYPK;
			RAISE NO_DATA_FOUND;
		END IF;
		CLOSE CULOCKRCBYPK ;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF CULOCKRCBYPK%ISOPEN THEN
				CLOSE CULOCKRCBYPK;
			END IF;
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '|| FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
		WHEN EX.RESOURCE_BUSY THEN
			IF CULOCKRCBYPK%ISOPEN THEN
				CLOSE CULOCKRCBYPK;
			END IF;
			ERRORS.SETERROR(CNUAPPTABLEBUSSY,FSBPRIMARYKEY(RCERROR)||'|'|| FSBGETMESSAGEDESCRIPTION );
			RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			IF CULOCKRCBYPK%ISOPEN THEN
				CLOSE CULOCKRCBYPK;
			END IF;
			RAISE;
	END;
	PROCEDURE LOCKBYROWID
	(
		IRIROWID    IN  VARCHAR2,
		ORCOR_ORDER  OUT STYOR_ORDER
	)
	IS
	BEGIN
		OPEN CULOCKRCBYROWID
		(
			IRIROWID
		);

		FETCH CULOCKRCBYROWID INTO ORCOR_ORDER;
		IF CULOCKRCBYROWID%NOTFOUND  THEN
			CLOSE CULOCKRCBYROWID;
			RAISE NO_DATA_FOUND;
		END IF;
		CLOSE CULOCKRCBYROWID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF CULOCKRCBYROWID%ISOPEN THEN
				CLOSE CULOCKRCBYROWID;
			END IF;
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' rowid=['||IRIROWID||']');
			RAISE EX.CONTROLLED_ERROR;
		WHEN EX.RESOURCE_BUSY THEN
			IF CULOCKRCBYROWID%ISOPEN THEN
				CLOSE CULOCKRCBYROWID;
			END IF;
			ERRORS.SETERROR(CNUAPPTABLEBUSSY,'rowid=['||IRIROWID||']|'||FSBGETMESSAGEDESCRIPTION );
			RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			IF CULOCKRCBYROWID%ISOPEN THEN
				CLOSE CULOCKRCBYROWID;
			END IF;
			RAISE;
	END;
	PROCEDURE DELRECORDOFTABLES
	(
		ITBOR_ORDER  IN OUT NOCOPY TYTBOR_ORDER
	)
	IS
	BEGIN
			RCRECOFTAB.ORDER_ID.DELETE;
			RCRECOFTAB.PRIOR_ORDER_ID.DELETE;
			RCRECOFTAB.NUMERATOR_ID.DELETE;
			RCRECOFTAB.SEQUENCE.DELETE;
			RCRECOFTAB.PRIORITY.DELETE;
			RCRECOFTAB.EXTERNAL_ADDRESS_ID.DELETE;
			RCRECOFTAB.CREATED_DATE.DELETE;
			RCRECOFTAB.EXEC_INITIAL_DATE.DELETE;
			RCRECOFTAB.EXECUTION_FINAL_DATE.DELETE;
			RCRECOFTAB.EXEC_ESTIMATE_DATE.DELETE;
			RCRECOFTAB.ARRANGED_HOUR.DELETE;
			RCRECOFTAB.LEGALIZATION_DATE.DELETE;
			RCRECOFTAB.REPROGRAM_LAST_DATE.DELETE;
			RCRECOFTAB.ASSIGNED_DATE.DELETE;
			RCRECOFTAB.ASSIGNED_WITH.DELETE;
			RCRECOFTAB.MAX_DATE_TO_LEGALIZE.DELETE;
			RCRECOFTAB.ORDER_VALUE.DELETE;
			RCRECOFTAB.PRINTING_TIME_NUMBER.DELETE;
			RCRECOFTAB.LEGALIZE_TRY_TIMES.DELETE;
			RCRECOFTAB.OPERATING_UNIT_ID.DELETE;
			RCRECOFTAB.ORDER_STATUS_ID.DELETE;
			RCRECOFTAB.TASK_TYPE_ID.DELETE;
			RCRECOFTAB.OPERATING_SECTOR_ID.DELETE;
			RCRECOFTAB.CAUSAL_ID.DELETE;
			RCRECOFTAB.ADMINIST_DISTRIB_ID.DELETE;
			RCRECOFTAB.ORDER_CLASSIF_ID.DELETE;
			RCRECOFTAB.GEOGRAP_LOCATION_ID.DELETE;
			RCRECOFTAB.IS_COUNTERMAND.DELETE;
			RCRECOFTAB.REAL_TASK_TYPE_ID.DELETE;
			RCRECOFTAB.SAVED_DATA_VALUES.DELETE;
			RCRECOFTAB.FOR_AUTOMATIC_LEGA.DELETE;
			RCRECOFTAB.ORDER_COST_AVERAGE.DELETE;
			RCRECOFTAB.ORDER_COST_BY_LIST.DELETE;
			RCRECOFTAB.OPERATIVE_AIU_VALUE.DELETE;
			RCRECOFTAB.ADMIN_AIU_VALUE.DELETE;
			RCRECOFTAB.CHARGE_STATUS.DELETE;
			RCRECOFTAB.PREV_ORDER_STATUS_ID.DELETE;
			RCRECOFTAB.PROGRAMING_CLASS_ID.DELETE;
			RCRECOFTAB.PREVIOUS_WORK.DELETE;
			RCRECOFTAB.APPOINTMENT_CONFIRM.DELETE;
			RCRECOFTAB.X.DELETE;
			RCRECOFTAB.Y.DELETE;
			RCRECOFTAB.STAGE_ID.DELETE;
			RCRECOFTAB.LEGAL_IN_PROJECT.DELETE;
			RCRECOFTAB.OFFERED.DELETE;
			RCRECOFTAB.ASSO_UNIT_ID.DELETE;
			RCRECOFTAB.SUBSCRIBER_ID.DELETE;
			RCRECOFTAB.ADM_PENDING.DELETE;
			RCRECOFTAB.SHAPE.DELETE;
			RCRECOFTAB.ROUTE_ID.DELETE;
			RCRECOFTAB.CONSECUTIVE.DELETE;
			RCRECOFTAB.DEFINED_CONTRACT_ID.DELETE;
			RCRECOFTAB.IS_PENDING_LIQ.DELETE;
			RCRECOFTAB.SCHED_ITINERARY_ID.DELETE;
			RCRECOFTAB.ESTIMATED_COST.DELETE;
			RCRECOFTAB.ROW_ID.DELETE;
	END;
	PROCEDURE FILLRECORDOFTABLES
	(
		ITBOR_ORDER  IN OUT NOCOPY TYTBOR_ORDER,
		OBLUSEROWID OUT BOOLEAN
	)
	IS
	BEGIN
		DELRECORDOFTABLES(ITBOR_ORDER);

		FOR N IN ITBOR_ORDER.FIRST .. ITBOR_ORDER.LAST LOOP
			RCRECOFTAB.ORDER_ID(N) := ITBOR_ORDER(N).ORDER_ID;
			RCRECOFTAB.PRIOR_ORDER_ID(N) := ITBOR_ORDER(N).PRIOR_ORDER_ID;
			RCRECOFTAB.NUMERATOR_ID(N) := ITBOR_ORDER(N).NUMERATOR_ID;
			RCRECOFTAB.SEQUENCE(N) := ITBOR_ORDER(N).SEQUENCE;
			RCRECOFTAB.PRIORITY(N) := ITBOR_ORDER(N).PRIORITY;
			RCRECOFTAB.EXTERNAL_ADDRESS_ID(N) := ITBOR_ORDER(N).EXTERNAL_ADDRESS_ID;
			RCRECOFTAB.CREATED_DATE(N) := ITBOR_ORDER(N).CREATED_DATE;
			RCRECOFTAB.EXEC_INITIAL_DATE(N) := ITBOR_ORDER(N).EXEC_INITIAL_DATE;
			RCRECOFTAB.EXECUTION_FINAL_DATE(N) := ITBOR_ORDER(N).EXECUTION_FINAL_DATE;
			RCRECOFTAB.EXEC_ESTIMATE_DATE(N) := ITBOR_ORDER(N).EXEC_ESTIMATE_DATE;
			RCRECOFTAB.ARRANGED_HOUR(N) := ITBOR_ORDER(N).ARRANGED_HOUR;
			RCRECOFTAB.LEGALIZATION_DATE(N) := ITBOR_ORDER(N).LEGALIZATION_DATE;
			RCRECOFTAB.REPROGRAM_LAST_DATE(N) := ITBOR_ORDER(N).REPROGRAM_LAST_DATE;
			RCRECOFTAB.ASSIGNED_DATE(N) := ITBOR_ORDER(N).ASSIGNED_DATE;
			RCRECOFTAB.ASSIGNED_WITH(N) := ITBOR_ORDER(N).ASSIGNED_WITH;
			RCRECOFTAB.MAX_DATE_TO_LEGALIZE(N) := ITBOR_ORDER(N).MAX_DATE_TO_LEGALIZE;
			RCRECOFTAB.ORDER_VALUE(N) := ITBOR_ORDER(N).ORDER_VALUE;
			RCRECOFTAB.PRINTING_TIME_NUMBER(N) := ITBOR_ORDER(N).PRINTING_TIME_NUMBER;
			RCRECOFTAB.LEGALIZE_TRY_TIMES(N) := ITBOR_ORDER(N).LEGALIZE_TRY_TIMES;
			RCRECOFTAB.OPERATING_UNIT_ID(N) := ITBOR_ORDER(N).OPERATING_UNIT_ID;
			RCRECOFTAB.ORDER_STATUS_ID(N) := ITBOR_ORDER(N).ORDER_STATUS_ID;
			RCRECOFTAB.TASK_TYPE_ID(N) := ITBOR_ORDER(N).TASK_TYPE_ID;
			RCRECOFTAB.OPERATING_SECTOR_ID(N) := ITBOR_ORDER(N).OPERATING_SECTOR_ID;
			RCRECOFTAB.CAUSAL_ID(N) := ITBOR_ORDER(N).CAUSAL_ID;
			RCRECOFTAB.ADMINIST_DISTRIB_ID(N) := ITBOR_ORDER(N).ADMINIST_DISTRIB_ID;
			RCRECOFTAB.ORDER_CLASSIF_ID(N) := ITBOR_ORDER(N).ORDER_CLASSIF_ID;
			RCRECOFTAB.GEOGRAP_LOCATION_ID(N) := ITBOR_ORDER(N).GEOGRAP_LOCATION_ID;
			RCRECOFTAB.IS_COUNTERMAND(N) := ITBOR_ORDER(N).IS_COUNTERMAND;
			RCRECOFTAB.REAL_TASK_TYPE_ID(N) := ITBOR_ORDER(N).REAL_TASK_TYPE_ID;
			RCRECOFTAB.SAVED_DATA_VALUES(N) := ITBOR_ORDER(N).SAVED_DATA_VALUES;
			RCRECOFTAB.FOR_AUTOMATIC_LEGA(N) := ITBOR_ORDER(N).FOR_AUTOMATIC_LEGA;
			RCRECOFTAB.ORDER_COST_AVERAGE(N) := ITBOR_ORDER(N).ORDER_COST_AVERAGE;
			RCRECOFTAB.ORDER_COST_BY_LIST(N) := ITBOR_ORDER(N).ORDER_COST_BY_LIST;
			RCRECOFTAB.OPERATIVE_AIU_VALUE(N) := ITBOR_ORDER(N).OPERATIVE_AIU_VALUE;
			RCRECOFTAB.ADMIN_AIU_VALUE(N) := ITBOR_ORDER(N).ADMIN_AIU_VALUE;
			RCRECOFTAB.CHARGE_STATUS(N) := ITBOR_ORDER(N).CHARGE_STATUS;
			RCRECOFTAB.PREV_ORDER_STATUS_ID(N) := ITBOR_ORDER(N).PREV_ORDER_STATUS_ID;
			RCRECOFTAB.PROGRAMING_CLASS_ID(N) := ITBOR_ORDER(N).PROGRAMING_CLASS_ID;
			RCRECOFTAB.PREVIOUS_WORK(N) := ITBOR_ORDER(N).PREVIOUS_WORK;
			RCRECOFTAB.APPOINTMENT_CONFIRM(N) := ITBOR_ORDER(N).APPOINTMENT_CONFIRM;
			RCRECOFTAB.X(N) := ITBOR_ORDER(N).X;
			RCRECOFTAB.Y(N) := ITBOR_ORDER(N).Y;
			RCRECOFTAB.STAGE_ID(N) := ITBOR_ORDER(N).STAGE_ID;
			RCRECOFTAB.LEGAL_IN_PROJECT(N) := ITBOR_ORDER(N).LEGAL_IN_PROJECT;
			RCRECOFTAB.OFFERED(N) := ITBOR_ORDER(N).OFFERED;
			RCRECOFTAB.ASSO_UNIT_ID(N) := ITBOR_ORDER(N).ASSO_UNIT_ID;
			RCRECOFTAB.SUBSCRIBER_ID(N) := ITBOR_ORDER(N).SUBSCRIBER_ID;
			RCRECOFTAB.ADM_PENDING(N) := ITBOR_ORDER(N).ADM_PENDING;
			RCRECOFTAB.SHAPE(N) := ITBOR_ORDER(N).SHAPE;
			RCRECOFTAB.ROUTE_ID(N) := ITBOR_ORDER(N).ROUTE_ID;
			RCRECOFTAB.CONSECUTIVE(N) := ITBOR_ORDER(N).CONSECUTIVE;
			RCRECOFTAB.DEFINED_CONTRACT_ID(N) := ITBOR_ORDER(N).DEFINED_CONTRACT_ID;
			RCRECOFTAB.IS_PENDING_LIQ(N) := ITBOR_ORDER(N).IS_PENDING_LIQ;
			RCRECOFTAB.SCHED_ITINERARY_ID(N) := ITBOR_ORDER(N).SCHED_ITINERARY_ID;
			RCRECOFTAB.ESTIMATED_COST(N) := ITBOR_ORDER(N).ESTIMATED_COST;
			RCRECOFTAB.ROW_ID(N) := ITBOR_ORDER(N).ROWID;

			
			OBLUSEROWID:=RCRECOFTAB.ROW_ID(N) IS NOT NULL;
		END LOOP;
	END;

	PROCEDURE LOAD
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
	)
	IS
		RCRECORDNULL CURECORD%ROWTYPE;
	BEGIN
		IF CURECORD%ISOPEN THEN
			CLOSE CURECORD;
		END IF;
		OPEN CURECORD(INUORDER_ID);

		FETCH CURECORD INTO RCDATA;
		IF CURECORD%NOTFOUND  THEN
			CLOSE CURECORD;
			RCDATA := RCRECORDNULL;
			RAISE NO_DATA_FOUND;
		END IF;
		CLOSE CURECORD;
	END;
	PROCEDURE LOADBYROWID
	(
		IRIROWID IN VARCHAR2
	)
	IS
		RCRECORDNULL CURECORDBYROWID%ROWTYPE;
	BEGIN
		IF CURECORDBYROWID%ISOPEN THEN
			CLOSE CURECORDBYROWID;
		END IF;
		OPEN CURECORDBYROWID(IRIROWID);

		FETCH CURECORDBYROWID INTO RCDATA;
		IF CURECORDBYROWID%NOTFOUND  THEN
			CLOSE CURECORDBYROWID;
			RCDATA := RCRECORDNULL;
			RAISE NO_DATA_FOUND;
		END IF;
		CLOSE CURECORDBYROWID;
	END;
	FUNCTION FBLALREADYLOADED
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
	)
	RETURN BOOLEAN
	IS
	BEGIN
		IF (
			INUORDER_ID = RCDATA.ORDER_ID
		   ) THEN
			RETURN ( TRUE );
		END IF;
		RETURN (FALSE);
	END;

	

	
    FUNCTION FSBVERSION
    RETURN VARCHAR2
	IS
	BEGIN
		RETURN CSBVERSION;
	END;

	PROCEDURE CLEARMEMORY
	IS
		RCRECORDNULL CURECORD%ROWTYPE;
	BEGIN
		RCDATA := RCRECORDNULL;
	END;
	FUNCTION FBLEXIST
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
	)
	RETURN BOOLEAN
	IS
	BEGIN
		LOAD(INUORDER_ID);
		RETURN(TRUE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN(FALSE);
	END;
	PROCEDURE ACCKEY
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID:=INUORDER_ID;

		LOAD(INUORDER_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE ACCKEYBYROWID
	(
		IRIROWID    IN ROWID
	)
	IS
	BEGIN
		LOADBYROWID(IRIROWID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
            ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' rowid=['||IRIROWID||']');
            RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE VALDUPLICATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
	)
	IS
	BEGIN
		LOAD(INUORDER_ID);
		ERRORS.SETERROR(CNURECORD_ALREADY_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY);
		RAISE EX.CONTROLLED_ERROR;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			NULL;
	END;
	PROCEDURE GETRECORD
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ORCRECORD OUT NOCOPY STYOR_ORDER
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID:=INUORDER_ID;

		LOAD(INUORDER_ID);
		ORCRECORD := RCDATA;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '|| FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	FUNCTION FRCGETRECORD
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
	)
	RETURN STYOR_ORDER
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID:=INUORDER_ID;

		LOAD(INUORDER_ID);
		RETURN(RCDATA);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '|| FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	FUNCTION FRCGETRCDATA
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
	)
	RETURN STYOR_ORDER
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID:=INUORDER_ID;
        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '|| FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	FUNCTION FRCGETRCDATA
	RETURN STYOR_ORDER
	IS
	BEGIN
		RETURN(RCDATA);
	END;
	PROCEDURE GETRECORDS
	(
		ISBQUERY IN VARCHAR2,
		OTBRESULT OUT NOCOPY TYTBOR_ORDER
	)
	IS
		RFOR_ORDER TYRFOR_ORDER;
		N NUMBER(4) := 1;
		SBFULLQUERY VARCHAR2 (32000) := 'SELECT OR_order.*, OR_order.rowid FROM OR_order';
		NUMAXTBRECORDS NUMBER(5):=GE_BOPARAMETER.FNUGET('MAXREGSQUERY');
	BEGIN
		OTBRESULT.DELETE;
		IF ISBQUERY IS NOT NULL AND LENGTH(ISBQUERY) > 0 THEN
			SBFULLQUERY := SBFULLQUERY||' WHERE '||ISBQUERY;
		END IF;

		OPEN RFOR_ORDER FOR SBFULLQUERY;

		FETCH RFOR_ORDER BULK COLLECT INTO OTBRESULT;

		CLOSE RFOR_ORDER;
		IF OTBRESULT.COUNT = 0  THEN
			RAISE NO_DATA_FOUND;
		END IF;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
	END;
	FUNCTION FRFGETRECORDS
	(
		ISBCRITERIA IN VARCHAR2 DEFAULT NULL,
		IBLLOCK IN BOOLEAN DEFAULT FALSE
	)
	RETURN TYREFCURSOR
	IS
		RFQUERY TYREFCURSOR;
		SBSQL VARCHAR2 (32000) := 'select OR_order.*, OR_order.rowid FROM OR_order';
	BEGIN
		IF ISBCRITERIA IS NOT NULL THEN
			SBSQL := SBSQL||' where '||ISBCRITERIA;
		END IF;
		IF IBLLOCK THEN
			SBSQL := SBSQL||' for update nowait';
		END IF;
		OPEN RFQUERY FOR SBSQL;
		RETURN(RFQUERY);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE INSRECORD
	(
		IRCOR_ORDER IN STYOR_ORDER
	)
	IS
		RIROWID VARCHAR2(200);
	BEGIN
		INSRECORD(IRCOR_ORDER,RIROWID);
	END;
	PROCEDURE INSRECORD
	(
		IRCOR_ORDER IN STYOR_ORDER,
        ORIROWID   OUT VARCHAR2
	)
	IS
	BEGIN
		IF IRCOR_ORDER.ORDER_ID IS NULL THEN
			ERRORS.SETERROR(CNUINS_PK_NULL,
			                FSBGETMESSAGEDESCRIPTION||'|Order_Id');
			RAISE EX.CONTROLLED_ERROR;
		END IF;

		INSERT INTO OR_ORDER
		(
			ORDER_ID,
			PRIOR_ORDER_ID,
			NUMERATOR_ID,
			SEQUENCE,
			PRIORITY,
			EXTERNAL_ADDRESS_ID,
			CREATED_DATE,
			EXEC_INITIAL_DATE,
			EXECUTION_FINAL_DATE,
			EXEC_ESTIMATE_DATE,
			ARRANGED_HOUR,
			LEGALIZATION_DATE,
			REPROGRAM_LAST_DATE,
			ASSIGNED_DATE,
			ASSIGNED_WITH,
			MAX_DATE_TO_LEGALIZE,
			ORDER_VALUE,
			PRINTING_TIME_NUMBER,
			LEGALIZE_TRY_TIMES,
			OPERATING_UNIT_ID,
			ORDER_STATUS_ID,
			TASK_TYPE_ID,
			OPERATING_SECTOR_ID,
			CAUSAL_ID,
			ADMINIST_DISTRIB_ID,
			ORDER_CLASSIF_ID,
			GEOGRAP_LOCATION_ID,
			IS_COUNTERMAND,
			REAL_TASK_TYPE_ID,
			SAVED_DATA_VALUES,
			FOR_AUTOMATIC_LEGA,
			ORDER_COST_AVERAGE,
			ORDER_COST_BY_LIST,
			OPERATIVE_AIU_VALUE,
			ADMIN_AIU_VALUE,
			CHARGE_STATUS,
			PREV_ORDER_STATUS_ID,
			PROGRAMING_CLASS_ID,
			PREVIOUS_WORK,
			APPOINTMENT_CONFIRM,
			X,
			Y,
			STAGE_ID,
			LEGAL_IN_PROJECT,
			OFFERED,
			ASSO_UNIT_ID,
			SUBSCRIBER_ID,
			ADM_PENDING,
			SHAPE,
			ROUTE_ID,
			CONSECUTIVE,
			DEFINED_CONTRACT_ID,
			IS_PENDING_LIQ,
			SCHED_ITINERARY_ID,
			ESTIMATED_COST
		)
		VALUES
		(
			IRCOR_ORDER.ORDER_ID,
			IRCOR_ORDER.PRIOR_ORDER_ID,
			IRCOR_ORDER.NUMERATOR_ID,
			IRCOR_ORDER.SEQUENCE,
			IRCOR_ORDER.PRIORITY,
			IRCOR_ORDER.EXTERNAL_ADDRESS_ID,
			IRCOR_ORDER.CREATED_DATE,
			IRCOR_ORDER.EXEC_INITIAL_DATE,
			IRCOR_ORDER.EXECUTION_FINAL_DATE,
			IRCOR_ORDER.EXEC_ESTIMATE_DATE,
			IRCOR_ORDER.ARRANGED_HOUR,
			IRCOR_ORDER.LEGALIZATION_DATE,
			IRCOR_ORDER.REPROGRAM_LAST_DATE,
			IRCOR_ORDER.ASSIGNED_DATE,
			IRCOR_ORDER.ASSIGNED_WITH,
			IRCOR_ORDER.MAX_DATE_TO_LEGALIZE,
			IRCOR_ORDER.ORDER_VALUE,
			IRCOR_ORDER.PRINTING_TIME_NUMBER,
			IRCOR_ORDER.LEGALIZE_TRY_TIMES,
			IRCOR_ORDER.OPERATING_UNIT_ID,
			IRCOR_ORDER.ORDER_STATUS_ID,
			IRCOR_ORDER.TASK_TYPE_ID,
			IRCOR_ORDER.OPERATING_SECTOR_ID,
			IRCOR_ORDER.CAUSAL_ID,
			IRCOR_ORDER.ADMINIST_DISTRIB_ID,
			IRCOR_ORDER.ORDER_CLASSIF_ID,
			IRCOR_ORDER.GEOGRAP_LOCATION_ID,
			IRCOR_ORDER.IS_COUNTERMAND,
			IRCOR_ORDER.REAL_TASK_TYPE_ID,
			IRCOR_ORDER.SAVED_DATA_VALUES,
			IRCOR_ORDER.FOR_AUTOMATIC_LEGA,
			IRCOR_ORDER.ORDER_COST_AVERAGE,
			IRCOR_ORDER.ORDER_COST_BY_LIST,
			IRCOR_ORDER.OPERATIVE_AIU_VALUE,
			IRCOR_ORDER.ADMIN_AIU_VALUE,
			IRCOR_ORDER.CHARGE_STATUS,
			IRCOR_ORDER.PREV_ORDER_STATUS_ID,
			IRCOR_ORDER.PROGRAMING_CLASS_ID,
			IRCOR_ORDER.PREVIOUS_WORK,
			IRCOR_ORDER.APPOINTMENT_CONFIRM,
			IRCOR_ORDER.X,
			IRCOR_ORDER.Y,
			IRCOR_ORDER.STAGE_ID,
			IRCOR_ORDER.LEGAL_IN_PROJECT,
			IRCOR_ORDER.OFFERED,
			IRCOR_ORDER.ASSO_UNIT_ID,
			IRCOR_ORDER.SUBSCRIBER_ID,
			IRCOR_ORDER.ADM_PENDING,
			IRCOR_ORDER.SHAPE,
			IRCOR_ORDER.ROUTE_ID,
			IRCOR_ORDER.CONSECUTIVE,
			IRCOR_ORDER.DEFINED_CONTRACT_ID,
			IRCOR_ORDER.IS_PENDING_LIQ,
			IRCOR_ORDER.SCHED_ITINERARY_ID,
			IRCOR_ORDER.ESTIMATED_COST
		)
            RETURNING
			ROWID
		INTO
			ORIROWID;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			ERRORS.SETERROR(CNURECORD_ALREADY_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(IRCOR_ORDER));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE INSRECORDS
	(
		IOTBOR_ORDER IN OUT NOCOPY TYTBOR_ORDER
	)
	IS
		BLUSEROWID BOOLEAN;
	BEGIN
		FILLRECORDOFTABLES(IOTBOR_ORDER,BLUSEROWID);
		FORALL N IN IOTBOR_ORDER.FIRST..IOTBOR_ORDER.LAST
			INSERT INTO OR_ORDER
			(
				ORDER_ID,
				PRIOR_ORDER_ID,
				NUMERATOR_ID,
				SEQUENCE,
				PRIORITY,
				EXTERNAL_ADDRESS_ID,
				CREATED_DATE,
				EXEC_INITIAL_DATE,
				EXECUTION_FINAL_DATE,
				EXEC_ESTIMATE_DATE,
				ARRANGED_HOUR,
				LEGALIZATION_DATE,
				REPROGRAM_LAST_DATE,
				ASSIGNED_DATE,
				ASSIGNED_WITH,
				MAX_DATE_TO_LEGALIZE,
				ORDER_VALUE,
				PRINTING_TIME_NUMBER,
				LEGALIZE_TRY_TIMES,
				OPERATING_UNIT_ID,
				ORDER_STATUS_ID,
				TASK_TYPE_ID,
				OPERATING_SECTOR_ID,
				CAUSAL_ID,
				ADMINIST_DISTRIB_ID,
				ORDER_CLASSIF_ID,
				GEOGRAP_LOCATION_ID,
				IS_COUNTERMAND,
				REAL_TASK_TYPE_ID,
				SAVED_DATA_VALUES,
				FOR_AUTOMATIC_LEGA,
				ORDER_COST_AVERAGE,
				ORDER_COST_BY_LIST,
				OPERATIVE_AIU_VALUE,
				ADMIN_AIU_VALUE,
				CHARGE_STATUS,
				PREV_ORDER_STATUS_ID,
				PROGRAMING_CLASS_ID,
				PREVIOUS_WORK,
				APPOINTMENT_CONFIRM,
				X,
				Y,
				STAGE_ID,
				LEGAL_IN_PROJECT,
				OFFERED,
				ASSO_UNIT_ID,
				SUBSCRIBER_ID,
				ADM_PENDING,
				SHAPE,
				ROUTE_ID,
				CONSECUTIVE,
				DEFINED_CONTRACT_ID,
				IS_PENDING_LIQ,
				SCHED_ITINERARY_ID,
				ESTIMATED_COST
			)
			VALUES
			(
				RCRECOFTAB.ORDER_ID(N),
				RCRECOFTAB.PRIOR_ORDER_ID(N),
				RCRECOFTAB.NUMERATOR_ID(N),
				RCRECOFTAB.SEQUENCE(N),
				RCRECOFTAB.PRIORITY(N),
				RCRECOFTAB.EXTERNAL_ADDRESS_ID(N),
				RCRECOFTAB.CREATED_DATE(N),
				RCRECOFTAB.EXEC_INITIAL_DATE(N),
				RCRECOFTAB.EXECUTION_FINAL_DATE(N),
				RCRECOFTAB.EXEC_ESTIMATE_DATE(N),
				RCRECOFTAB.ARRANGED_HOUR(N),
				RCRECOFTAB.LEGALIZATION_DATE(N),
				RCRECOFTAB.REPROGRAM_LAST_DATE(N),
				RCRECOFTAB.ASSIGNED_DATE(N),
				RCRECOFTAB.ASSIGNED_WITH(N),
				RCRECOFTAB.MAX_DATE_TO_LEGALIZE(N),
				RCRECOFTAB.ORDER_VALUE(N),
				RCRECOFTAB.PRINTING_TIME_NUMBER(N),
				RCRECOFTAB.LEGALIZE_TRY_TIMES(N),
				RCRECOFTAB.OPERATING_UNIT_ID(N),
				RCRECOFTAB.ORDER_STATUS_ID(N),
				RCRECOFTAB.TASK_TYPE_ID(N),
				RCRECOFTAB.OPERATING_SECTOR_ID(N),
				RCRECOFTAB.CAUSAL_ID(N),
				RCRECOFTAB.ADMINIST_DISTRIB_ID(N),
				RCRECOFTAB.ORDER_CLASSIF_ID(N),
				RCRECOFTAB.GEOGRAP_LOCATION_ID(N),
				RCRECOFTAB.IS_COUNTERMAND(N),
				RCRECOFTAB.REAL_TASK_TYPE_ID(N),
				RCRECOFTAB.SAVED_DATA_VALUES(N),
				RCRECOFTAB.FOR_AUTOMATIC_LEGA(N),
				RCRECOFTAB.ORDER_COST_AVERAGE(N),
				RCRECOFTAB.ORDER_COST_BY_LIST(N),
				RCRECOFTAB.OPERATIVE_AIU_VALUE(N),
				RCRECOFTAB.ADMIN_AIU_VALUE(N),
				RCRECOFTAB.CHARGE_STATUS(N),
				RCRECOFTAB.PREV_ORDER_STATUS_ID(N),
				RCRECOFTAB.PROGRAMING_CLASS_ID(N),
				RCRECOFTAB.PREVIOUS_WORK(N),
				RCRECOFTAB.APPOINTMENT_CONFIRM(N),
				RCRECOFTAB.X(N),
				RCRECOFTAB.Y(N),
				RCRECOFTAB.STAGE_ID(N),
				RCRECOFTAB.LEGAL_IN_PROJECT(N),
				RCRECOFTAB.OFFERED(N),
				RCRECOFTAB.ASSO_UNIT_ID(N),
				RCRECOFTAB.SUBSCRIBER_ID(N),
				RCRECOFTAB.ADM_PENDING(N),
				RCRECOFTAB.SHAPE(N),
				RCRECOFTAB.ROUTE_ID(N),
				RCRECOFTAB.CONSECUTIVE(N),
				RCRECOFTAB.DEFINED_CONTRACT_ID(N),
				RCRECOFTAB.IS_PENDING_LIQ(N),
				RCRECOFTAB.SCHED_ITINERARY_ID(N),
				RCRECOFTAB.ESTIMATED_COST(N)
			);
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			ERRORS.SETERROR(CNURECORD_ALREADY_EXIST,FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE DELRECORD
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 1
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;

		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;


		DELETE
		FROM OR_ORDER
		WHERE
       		ORDER_ID=INUORDER_ID;
            IF SQL%NOTFOUND THEN
                RAISE NO_DATA_FOUND;
            END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
         RAISE EX.CONTROLLED_ERROR;
		WHEN EX.RECORD_HAVE_CHILDREN THEN
			ERRORS.SETERROR(CNURECORD_HAVE_CHILDREN,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE DELBYROWID
	(
		IRIROWID    IN ROWID,
		INULOCK IN NUMBER DEFAULT 1
	)
	IS
		RCRECORDNULL CURECORD%ROWTYPE;
		RCERROR  STYOR_ORDER;
	BEGIN
		IF INULOCK=1 THEN
			LOCKBYROWID(IRIROWID,RCDATA);
		END IF;


		DELETE
		FROM OR_ORDER
		WHERE
			ROWID = IRIROWID
		RETURNING
			ORDER_ID
		INTO
			RCERROR.ORDER_ID;
            IF SQL%NOTFOUND THEN
			 RAISE NO_DATA_FOUND;
		    END IF;
            IF RCDATA.ROWID=IRIROWID THEN
			 RCDATA := RCRECORDNULL;
		    END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
            ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' rowid=['||IRIROWID||']');
            RAISE EX.CONTROLLED_ERROR;
		WHEN EX.RECORD_HAVE_CHILDREN THEN
            ERRORS.SETERROR(CNURECORD_HAVE_CHILDREN,FSBGETMESSAGEDESCRIPTION||' '||' rowid=['||IRIROWID||']');
            RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE DELRECORDS
	(
		IOTBOR_ORDER IN OUT NOCOPY TYTBOR_ORDER,
		INULOCK IN NUMBER DEFAULT 1
	)
	IS
		BLUSEROWID BOOLEAN;
		RCAUX STYOR_ORDER;
	BEGIN
		FILLRECORDOFTABLES(IOTBOR_ORDER, BLUSEROWID);
        IF ( BLUSEROWID ) THEN
			IF INULOCK = 1 THEN
				FOR N IN IOTBOR_ORDER.FIRST .. IOTBOR_ORDER.LAST LOOP
					LOCKBYROWID
					(
						RCRECOFTAB.ROW_ID(N),
						RCAUX
					);
				END LOOP;
			END IF;

			FORALL N IN IOTBOR_ORDER.FIRST .. IOTBOR_ORDER.LAST
				DELETE
				FROM OR_ORDER
				WHERE
					ROWID = RCRECOFTAB.ROW_ID(N);
		ELSE
			IF INULOCK = 1 THEN
				FOR N IN IOTBOR_ORDER.FIRST .. IOTBOR_ORDER.LAST LOOP
					LOCKBYPK
					(
						RCRECOFTAB.ORDER_ID(N),
						RCAUX
					);
				END LOOP;
			END IF;

			FORALL N IN IOTBOR_ORDER.FIRST .. IOTBOR_ORDER.LAST
				DELETE
				FROM OR_ORDER
				WHERE
		         	ORDER_ID = RCRECOFTAB.ORDER_ID(N);
		END IF;
	EXCEPTION
            WHEN EX.RECORD_HAVE_CHILDREN THEN
                  ERRORS.SETERROR(CNURECORD_HAVE_CHILDREN,FSBGETMESSAGEDESCRIPTION);
                  RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDRECORD
	(
		IRCOR_ORDER IN STYOR_ORDER,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		NUORDER_ID	OR_ORDER.ORDER_ID%TYPE;
	BEGIN
		IF IRCOR_ORDER.ROWID IS NOT NULL THEN
			IF INULOCK=1 THEN
				LOCKBYROWID(IRCOR_ORDER.ROWID,RCDATA);
			END IF;
			UPDATE OR_ORDER
			SET
				PRIOR_ORDER_ID = IRCOR_ORDER.PRIOR_ORDER_ID,
				NUMERATOR_ID = IRCOR_ORDER.NUMERATOR_ID,
				SEQUENCE = IRCOR_ORDER.SEQUENCE,
				PRIORITY = IRCOR_ORDER.PRIORITY,
				EXTERNAL_ADDRESS_ID = IRCOR_ORDER.EXTERNAL_ADDRESS_ID,
				CREATED_DATE = IRCOR_ORDER.CREATED_DATE,
				EXEC_INITIAL_DATE = IRCOR_ORDER.EXEC_INITIAL_DATE,
				EXECUTION_FINAL_DATE = IRCOR_ORDER.EXECUTION_FINAL_DATE,
				EXEC_ESTIMATE_DATE = IRCOR_ORDER.EXEC_ESTIMATE_DATE,
				ARRANGED_HOUR = IRCOR_ORDER.ARRANGED_HOUR,
				LEGALIZATION_DATE = IRCOR_ORDER.LEGALIZATION_DATE,
				REPROGRAM_LAST_DATE = IRCOR_ORDER.REPROGRAM_LAST_DATE,
				ASSIGNED_DATE = IRCOR_ORDER.ASSIGNED_DATE,
				ASSIGNED_WITH = IRCOR_ORDER.ASSIGNED_WITH,
				MAX_DATE_TO_LEGALIZE = IRCOR_ORDER.MAX_DATE_TO_LEGALIZE,
				ORDER_VALUE = IRCOR_ORDER.ORDER_VALUE,
				PRINTING_TIME_NUMBER = IRCOR_ORDER.PRINTING_TIME_NUMBER,
				LEGALIZE_TRY_TIMES = IRCOR_ORDER.LEGALIZE_TRY_TIMES,
				OPERATING_UNIT_ID = IRCOR_ORDER.OPERATING_UNIT_ID,
				ORDER_STATUS_ID = IRCOR_ORDER.ORDER_STATUS_ID,
				TASK_TYPE_ID = IRCOR_ORDER.TASK_TYPE_ID,
				OPERATING_SECTOR_ID = IRCOR_ORDER.OPERATING_SECTOR_ID,
				CAUSAL_ID = IRCOR_ORDER.CAUSAL_ID,
				ADMINIST_DISTRIB_ID = IRCOR_ORDER.ADMINIST_DISTRIB_ID,
				ORDER_CLASSIF_ID = IRCOR_ORDER.ORDER_CLASSIF_ID,
				GEOGRAP_LOCATION_ID = IRCOR_ORDER.GEOGRAP_LOCATION_ID,
				IS_COUNTERMAND = IRCOR_ORDER.IS_COUNTERMAND,
				REAL_TASK_TYPE_ID = IRCOR_ORDER.REAL_TASK_TYPE_ID,
				SAVED_DATA_VALUES = IRCOR_ORDER.SAVED_DATA_VALUES,
				FOR_AUTOMATIC_LEGA = IRCOR_ORDER.FOR_AUTOMATIC_LEGA,
				ORDER_COST_AVERAGE = IRCOR_ORDER.ORDER_COST_AVERAGE,
				ORDER_COST_BY_LIST = IRCOR_ORDER.ORDER_COST_BY_LIST,
				OPERATIVE_AIU_VALUE = IRCOR_ORDER.OPERATIVE_AIU_VALUE,
				ADMIN_AIU_VALUE = IRCOR_ORDER.ADMIN_AIU_VALUE,
				CHARGE_STATUS = IRCOR_ORDER.CHARGE_STATUS,
				PREV_ORDER_STATUS_ID = IRCOR_ORDER.PREV_ORDER_STATUS_ID,
				PROGRAMING_CLASS_ID = IRCOR_ORDER.PROGRAMING_CLASS_ID,
				PREVIOUS_WORK = IRCOR_ORDER.PREVIOUS_WORK,
				APPOINTMENT_CONFIRM = IRCOR_ORDER.APPOINTMENT_CONFIRM,
				X = IRCOR_ORDER.X,
				Y = IRCOR_ORDER.Y,
				STAGE_ID = IRCOR_ORDER.STAGE_ID,
				LEGAL_IN_PROJECT = IRCOR_ORDER.LEGAL_IN_PROJECT,
				OFFERED = IRCOR_ORDER.OFFERED,
				ASSO_UNIT_ID = IRCOR_ORDER.ASSO_UNIT_ID,
				SUBSCRIBER_ID = IRCOR_ORDER.SUBSCRIBER_ID,
				ADM_PENDING = IRCOR_ORDER.ADM_PENDING,
				SHAPE = IRCOR_ORDER.SHAPE,
				ROUTE_ID = IRCOR_ORDER.ROUTE_ID,
				CONSECUTIVE = IRCOR_ORDER.CONSECUTIVE,
				DEFINED_CONTRACT_ID = IRCOR_ORDER.DEFINED_CONTRACT_ID,
				IS_PENDING_LIQ = IRCOR_ORDER.IS_PENDING_LIQ,
				SCHED_ITINERARY_ID = IRCOR_ORDER.SCHED_ITINERARY_ID,
				ESTIMATED_COST = IRCOR_ORDER.ESTIMATED_COST
			WHERE
				ROWID = IRCOR_ORDER.ROWID
			RETURNING
				ORDER_ID
			INTO
				NUORDER_ID;
		ELSE
			IF INULOCK=1 THEN
				LOCKBYPK
				(
					IRCOR_ORDER.ORDER_ID,
					RCDATA
				);
			END IF;

			UPDATE OR_ORDER
			SET
				PRIOR_ORDER_ID = IRCOR_ORDER.PRIOR_ORDER_ID,
				NUMERATOR_ID = IRCOR_ORDER.NUMERATOR_ID,
				SEQUENCE = IRCOR_ORDER.SEQUENCE,
				PRIORITY = IRCOR_ORDER.PRIORITY,
				EXTERNAL_ADDRESS_ID = IRCOR_ORDER.EXTERNAL_ADDRESS_ID,
				CREATED_DATE = IRCOR_ORDER.CREATED_DATE,
				EXEC_INITIAL_DATE = IRCOR_ORDER.EXEC_INITIAL_DATE,
				EXECUTION_FINAL_DATE = IRCOR_ORDER.EXECUTION_FINAL_DATE,
				EXEC_ESTIMATE_DATE = IRCOR_ORDER.EXEC_ESTIMATE_DATE,
				ARRANGED_HOUR = IRCOR_ORDER.ARRANGED_HOUR,
				LEGALIZATION_DATE = IRCOR_ORDER.LEGALIZATION_DATE,
				REPROGRAM_LAST_DATE = IRCOR_ORDER.REPROGRAM_LAST_DATE,
				ASSIGNED_DATE = IRCOR_ORDER.ASSIGNED_DATE,
				ASSIGNED_WITH = IRCOR_ORDER.ASSIGNED_WITH,
				MAX_DATE_TO_LEGALIZE = IRCOR_ORDER.MAX_DATE_TO_LEGALIZE,
				ORDER_VALUE = IRCOR_ORDER.ORDER_VALUE,
				PRINTING_TIME_NUMBER = IRCOR_ORDER.PRINTING_TIME_NUMBER,
				LEGALIZE_TRY_TIMES = IRCOR_ORDER.LEGALIZE_TRY_TIMES,
				OPERATING_UNIT_ID = IRCOR_ORDER.OPERATING_UNIT_ID,
				ORDER_STATUS_ID = IRCOR_ORDER.ORDER_STATUS_ID,
				TASK_TYPE_ID = IRCOR_ORDER.TASK_TYPE_ID,
				OPERATING_SECTOR_ID = IRCOR_ORDER.OPERATING_SECTOR_ID,
				CAUSAL_ID = IRCOR_ORDER.CAUSAL_ID,
				ADMINIST_DISTRIB_ID = IRCOR_ORDER.ADMINIST_DISTRIB_ID,
				ORDER_CLASSIF_ID = IRCOR_ORDER.ORDER_CLASSIF_ID,
				GEOGRAP_LOCATION_ID = IRCOR_ORDER.GEOGRAP_LOCATION_ID,
				IS_COUNTERMAND = IRCOR_ORDER.IS_COUNTERMAND,
				REAL_TASK_TYPE_ID = IRCOR_ORDER.REAL_TASK_TYPE_ID,
				SAVED_DATA_VALUES = IRCOR_ORDER.SAVED_DATA_VALUES,
				FOR_AUTOMATIC_LEGA = IRCOR_ORDER.FOR_AUTOMATIC_LEGA,
				ORDER_COST_AVERAGE = IRCOR_ORDER.ORDER_COST_AVERAGE,
				ORDER_COST_BY_LIST = IRCOR_ORDER.ORDER_COST_BY_LIST,
				OPERATIVE_AIU_VALUE = IRCOR_ORDER.OPERATIVE_AIU_VALUE,
				ADMIN_AIU_VALUE = IRCOR_ORDER.ADMIN_AIU_VALUE,
				CHARGE_STATUS = IRCOR_ORDER.CHARGE_STATUS,
				PREV_ORDER_STATUS_ID = IRCOR_ORDER.PREV_ORDER_STATUS_ID,
				PROGRAMING_CLASS_ID = IRCOR_ORDER.PROGRAMING_CLASS_ID,
				PREVIOUS_WORK = IRCOR_ORDER.PREVIOUS_WORK,
				APPOINTMENT_CONFIRM = IRCOR_ORDER.APPOINTMENT_CONFIRM,
				X = IRCOR_ORDER.X,
				Y = IRCOR_ORDER.Y,
				STAGE_ID = IRCOR_ORDER.STAGE_ID,
				LEGAL_IN_PROJECT = IRCOR_ORDER.LEGAL_IN_PROJECT,
				OFFERED = IRCOR_ORDER.OFFERED,
				ASSO_UNIT_ID = IRCOR_ORDER.ASSO_UNIT_ID,
				SUBSCRIBER_ID = IRCOR_ORDER.SUBSCRIBER_ID,
				ADM_PENDING = IRCOR_ORDER.ADM_PENDING,
				SHAPE = IRCOR_ORDER.SHAPE,
				ROUTE_ID = IRCOR_ORDER.ROUTE_ID,
				CONSECUTIVE = IRCOR_ORDER.CONSECUTIVE,
				DEFINED_CONTRACT_ID = IRCOR_ORDER.DEFINED_CONTRACT_ID,
				IS_PENDING_LIQ = IRCOR_ORDER.IS_PENDING_LIQ,
				SCHED_ITINERARY_ID = IRCOR_ORDER.SCHED_ITINERARY_ID,
				ESTIMATED_COST = IRCOR_ORDER.ESTIMATED_COST
			WHERE
				ORDER_ID = IRCOR_ORDER.ORDER_ID
			RETURNING
				ORDER_ID
			INTO
				NUORDER_ID;
		END IF;
		IF
			NUORDER_ID IS NULL
		THEN
			RAISE NO_DATA_FOUND;
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||FSBPRIMARYKEY(IRCOR_ORDER));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDRECORDS
	(
		IOTBOR_ORDER IN OUT NOCOPY TYTBOR_ORDER,
		INULOCK IN NUMBER DEFAULT 1
	)
	IS
		BLUSEROWID BOOLEAN;    
		RCAUX STYOR_ORDER;
	BEGIN
		FILLRECORDOFTABLES(IOTBOR_ORDER,BLUSEROWID);
		IF BLUSEROWID THEN
			IF INULOCK = 1 THEN
				FOR N IN IOTBOR_ORDER.FIRST .. IOTBOR_ORDER.LAST LOOP
					LOCKBYROWID
					(
						RCRECOFTAB.ROW_ID(N),
						RCAUX
					);
				END LOOP;
			END IF;

			FORALL N IN IOTBOR_ORDER.FIRST .. IOTBOR_ORDER.LAST
				UPDATE OR_ORDER
				SET
					PRIOR_ORDER_ID = RCRECOFTAB.PRIOR_ORDER_ID(N),
					NUMERATOR_ID = RCRECOFTAB.NUMERATOR_ID(N),
					SEQUENCE = RCRECOFTAB.SEQUENCE(N),
					PRIORITY = RCRECOFTAB.PRIORITY(N),
					EXTERNAL_ADDRESS_ID = RCRECOFTAB.EXTERNAL_ADDRESS_ID(N),
					CREATED_DATE = RCRECOFTAB.CREATED_DATE(N),
					EXEC_INITIAL_DATE = RCRECOFTAB.EXEC_INITIAL_DATE(N),
					EXECUTION_FINAL_DATE = RCRECOFTAB.EXECUTION_FINAL_DATE(N),
					EXEC_ESTIMATE_DATE = RCRECOFTAB.EXEC_ESTIMATE_DATE(N),
					ARRANGED_HOUR = RCRECOFTAB.ARRANGED_HOUR(N),
					LEGALIZATION_DATE = RCRECOFTAB.LEGALIZATION_DATE(N),
					REPROGRAM_LAST_DATE = RCRECOFTAB.REPROGRAM_LAST_DATE(N),
					ASSIGNED_DATE = RCRECOFTAB.ASSIGNED_DATE(N),
					ASSIGNED_WITH = RCRECOFTAB.ASSIGNED_WITH(N),
					MAX_DATE_TO_LEGALIZE = RCRECOFTAB.MAX_DATE_TO_LEGALIZE(N),
					ORDER_VALUE = RCRECOFTAB.ORDER_VALUE(N),
					PRINTING_TIME_NUMBER = RCRECOFTAB.PRINTING_TIME_NUMBER(N),
					LEGALIZE_TRY_TIMES = RCRECOFTAB.LEGALIZE_TRY_TIMES(N),
					OPERATING_UNIT_ID = RCRECOFTAB.OPERATING_UNIT_ID(N),
					ORDER_STATUS_ID = RCRECOFTAB.ORDER_STATUS_ID(N),
					TASK_TYPE_ID = RCRECOFTAB.TASK_TYPE_ID(N),
					OPERATING_SECTOR_ID = RCRECOFTAB.OPERATING_SECTOR_ID(N),
					CAUSAL_ID = RCRECOFTAB.CAUSAL_ID(N),
					ADMINIST_DISTRIB_ID = RCRECOFTAB.ADMINIST_DISTRIB_ID(N),
					ORDER_CLASSIF_ID = RCRECOFTAB.ORDER_CLASSIF_ID(N),
					GEOGRAP_LOCATION_ID = RCRECOFTAB.GEOGRAP_LOCATION_ID(N),
					IS_COUNTERMAND = RCRECOFTAB.IS_COUNTERMAND(N),
					REAL_TASK_TYPE_ID = RCRECOFTAB.REAL_TASK_TYPE_ID(N),
					SAVED_DATA_VALUES = RCRECOFTAB.SAVED_DATA_VALUES(N),
					FOR_AUTOMATIC_LEGA = RCRECOFTAB.FOR_AUTOMATIC_LEGA(N),
					ORDER_COST_AVERAGE = RCRECOFTAB.ORDER_COST_AVERAGE(N),
					ORDER_COST_BY_LIST = RCRECOFTAB.ORDER_COST_BY_LIST(N),
					OPERATIVE_AIU_VALUE = RCRECOFTAB.OPERATIVE_AIU_VALUE(N),
					ADMIN_AIU_VALUE = RCRECOFTAB.ADMIN_AIU_VALUE(N),
					CHARGE_STATUS = RCRECOFTAB.CHARGE_STATUS(N),
					PREV_ORDER_STATUS_ID = RCRECOFTAB.PREV_ORDER_STATUS_ID(N),
					PROGRAMING_CLASS_ID = RCRECOFTAB.PROGRAMING_CLASS_ID(N),
					PREVIOUS_WORK = RCRECOFTAB.PREVIOUS_WORK(N),
					APPOINTMENT_CONFIRM = RCRECOFTAB.APPOINTMENT_CONFIRM(N),
					X = RCRECOFTAB.X(N),
					Y = RCRECOFTAB.Y(N),
					STAGE_ID = RCRECOFTAB.STAGE_ID(N),
					LEGAL_IN_PROJECT = RCRECOFTAB.LEGAL_IN_PROJECT(N),
					OFFERED = RCRECOFTAB.OFFERED(N),
					ASSO_UNIT_ID = RCRECOFTAB.ASSO_UNIT_ID(N),
					SUBSCRIBER_ID = RCRECOFTAB.SUBSCRIBER_ID(N),
					ADM_PENDING = RCRECOFTAB.ADM_PENDING(N),
					SHAPE = RCRECOFTAB.SHAPE(N),
					ROUTE_ID = RCRECOFTAB.ROUTE_ID(N),
					CONSECUTIVE = RCRECOFTAB.CONSECUTIVE(N),
					DEFINED_CONTRACT_ID = RCRECOFTAB.DEFINED_CONTRACT_ID(N),
					IS_PENDING_LIQ = RCRECOFTAB.IS_PENDING_LIQ(N),
					SCHED_ITINERARY_ID = RCRECOFTAB.SCHED_ITINERARY_ID(N),
					ESTIMATED_COST = RCRECOFTAB.ESTIMATED_COST(N)
				WHERE
					ROWID =  RCRECOFTAB.ROW_ID(N);
		ELSE
			IF INULOCK = 1 THEN
				FOR N IN IOTBOR_ORDER.FIRST .. IOTBOR_ORDER.LAST LOOP
					LOCKBYPK
					(
						RCRECOFTAB.ORDER_ID(N),
						RCAUX
					);
				END LOOP;
			END IF;

			FORALL N IN IOTBOR_ORDER.FIRST .. IOTBOR_ORDER.LAST
				UPDATE OR_ORDER
				SET
					PRIOR_ORDER_ID = RCRECOFTAB.PRIOR_ORDER_ID(N),
					NUMERATOR_ID = RCRECOFTAB.NUMERATOR_ID(N),
					SEQUENCE = RCRECOFTAB.SEQUENCE(N),
					PRIORITY = RCRECOFTAB.PRIORITY(N),
					EXTERNAL_ADDRESS_ID = RCRECOFTAB.EXTERNAL_ADDRESS_ID(N),
					CREATED_DATE = RCRECOFTAB.CREATED_DATE(N),
					EXEC_INITIAL_DATE = RCRECOFTAB.EXEC_INITIAL_DATE(N),
					EXECUTION_FINAL_DATE = RCRECOFTAB.EXECUTION_FINAL_DATE(N),
					EXEC_ESTIMATE_DATE = RCRECOFTAB.EXEC_ESTIMATE_DATE(N),
					ARRANGED_HOUR = RCRECOFTAB.ARRANGED_HOUR(N),
					LEGALIZATION_DATE = RCRECOFTAB.LEGALIZATION_DATE(N),
					REPROGRAM_LAST_DATE = RCRECOFTAB.REPROGRAM_LAST_DATE(N),
					ASSIGNED_DATE = RCRECOFTAB.ASSIGNED_DATE(N),
					ASSIGNED_WITH = RCRECOFTAB.ASSIGNED_WITH(N),
					MAX_DATE_TO_LEGALIZE = RCRECOFTAB.MAX_DATE_TO_LEGALIZE(N),
					ORDER_VALUE = RCRECOFTAB.ORDER_VALUE(N),
					PRINTING_TIME_NUMBER = RCRECOFTAB.PRINTING_TIME_NUMBER(N),
					LEGALIZE_TRY_TIMES = RCRECOFTAB.LEGALIZE_TRY_TIMES(N),
					OPERATING_UNIT_ID = RCRECOFTAB.OPERATING_UNIT_ID(N),
					ORDER_STATUS_ID = RCRECOFTAB.ORDER_STATUS_ID(N),
					TASK_TYPE_ID = RCRECOFTAB.TASK_TYPE_ID(N),
					OPERATING_SECTOR_ID = RCRECOFTAB.OPERATING_SECTOR_ID(N),
					CAUSAL_ID = RCRECOFTAB.CAUSAL_ID(N),
					ADMINIST_DISTRIB_ID = RCRECOFTAB.ADMINIST_DISTRIB_ID(N),
					ORDER_CLASSIF_ID = RCRECOFTAB.ORDER_CLASSIF_ID(N),
					GEOGRAP_LOCATION_ID = RCRECOFTAB.GEOGRAP_LOCATION_ID(N),
					IS_COUNTERMAND = RCRECOFTAB.IS_COUNTERMAND(N),
					REAL_TASK_TYPE_ID = RCRECOFTAB.REAL_TASK_TYPE_ID(N),
					SAVED_DATA_VALUES = RCRECOFTAB.SAVED_DATA_VALUES(N),
					FOR_AUTOMATIC_LEGA = RCRECOFTAB.FOR_AUTOMATIC_LEGA(N),
					ORDER_COST_AVERAGE = RCRECOFTAB.ORDER_COST_AVERAGE(N),
					ORDER_COST_BY_LIST = RCRECOFTAB.ORDER_COST_BY_LIST(N),
					OPERATIVE_AIU_VALUE = RCRECOFTAB.OPERATIVE_AIU_VALUE(N),
					ADMIN_AIU_VALUE = RCRECOFTAB.ADMIN_AIU_VALUE(N),
					CHARGE_STATUS = RCRECOFTAB.CHARGE_STATUS(N),
					PREV_ORDER_STATUS_ID = RCRECOFTAB.PREV_ORDER_STATUS_ID(N),
					PROGRAMING_CLASS_ID = RCRECOFTAB.PROGRAMING_CLASS_ID(N),
					PREVIOUS_WORK = RCRECOFTAB.PREVIOUS_WORK(N),
					APPOINTMENT_CONFIRM = RCRECOFTAB.APPOINTMENT_CONFIRM(N),
					X = RCRECOFTAB.X(N),
					Y = RCRECOFTAB.Y(N),
					STAGE_ID = RCRECOFTAB.STAGE_ID(N),
					LEGAL_IN_PROJECT = RCRECOFTAB.LEGAL_IN_PROJECT(N),
					OFFERED = RCRECOFTAB.OFFERED(N),
					ASSO_UNIT_ID = RCRECOFTAB.ASSO_UNIT_ID(N),
					SUBSCRIBER_ID = RCRECOFTAB.SUBSCRIBER_ID(N),
					ADM_PENDING = RCRECOFTAB.ADM_PENDING(N),
					SHAPE = RCRECOFTAB.SHAPE(N),
					ROUTE_ID = RCRECOFTAB.ROUTE_ID(N),
					CONSECUTIVE = RCRECOFTAB.CONSECUTIVE(N),
					DEFINED_CONTRACT_ID = RCRECOFTAB.DEFINED_CONTRACT_ID(N),
					IS_PENDING_LIQ = RCRECOFTAB.IS_PENDING_LIQ(N),
					SCHED_ITINERARY_ID = RCRECOFTAB.SCHED_ITINERARY_ID(N),
					ESTIMATED_COST = RCRECOFTAB.ESTIMATED_COST(N)
				WHERE
					ORDER_ID = RCRECOFTAB.ORDER_ID(N)
;
		END IF;
	END;
	PROCEDURE UPDPRIOR_ORDER_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUPRIOR_ORDER_ID$ IN OR_ORDER.PRIOR_ORDER_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			PRIOR_ORDER_ID = INUPRIOR_ORDER_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PRIOR_ORDER_ID:= INUPRIOR_ORDER_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDNUMERATOR_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUNUMERATOR_ID$ IN OR_ORDER.NUMERATOR_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			NUMERATOR_ID = INUNUMERATOR_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.NUMERATOR_ID:= INUNUMERATOR_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDSEQUENCE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUSEQUENCE$ IN OR_ORDER.SEQUENCE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			SEQUENCE = INUSEQUENCE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.SEQUENCE:= INUSEQUENCE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDPRIORITY
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUPRIORITY$ IN OR_ORDER.PRIORITY%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			PRIORITY = INUPRIORITY$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PRIORITY:= INUPRIORITY$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDEXTERNAL_ADDRESS_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUEXTERNAL_ADDRESS_ID$ IN OR_ORDER.EXTERNAL_ADDRESS_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			EXTERNAL_ADDRESS_ID = INUEXTERNAL_ADDRESS_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.EXTERNAL_ADDRESS_ID:= INUEXTERNAL_ADDRESS_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDCREATED_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		IDTCREATED_DATE$ IN OR_ORDER.CREATED_DATE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			CREATED_DATE = IDTCREATED_DATE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.CREATED_DATE:= IDTCREATED_DATE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDEXEC_INITIAL_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		IDTEXEC_INITIAL_DATE$ IN OR_ORDER.EXEC_INITIAL_DATE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			EXEC_INITIAL_DATE = IDTEXEC_INITIAL_DATE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.EXEC_INITIAL_DATE:= IDTEXEC_INITIAL_DATE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDEXECUTION_FINAL_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		IDTEXECUTION_FINAL_DATE$ IN OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			EXECUTION_FINAL_DATE = IDTEXECUTION_FINAL_DATE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.EXECUTION_FINAL_DATE:= IDTEXECUTION_FINAL_DATE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDEXEC_ESTIMATE_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		IDTEXEC_ESTIMATE_DATE$ IN OR_ORDER.EXEC_ESTIMATE_DATE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			EXEC_ESTIMATE_DATE = IDTEXEC_ESTIMATE_DATE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.EXEC_ESTIMATE_DATE:= IDTEXEC_ESTIMATE_DATE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDARRANGED_HOUR
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		IDTARRANGED_HOUR$ IN OR_ORDER.ARRANGED_HOUR%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ARRANGED_HOUR = IDTARRANGED_HOUR$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ARRANGED_HOUR:= IDTARRANGED_HOUR$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDLEGALIZATION_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		IDTLEGALIZATION_DATE$ IN OR_ORDER.LEGALIZATION_DATE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			LEGALIZATION_DATE = IDTLEGALIZATION_DATE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.LEGALIZATION_DATE:= IDTLEGALIZATION_DATE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDREPROGRAM_LAST_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		IDTREPROGRAM_LAST_DATE$ IN OR_ORDER.REPROGRAM_LAST_DATE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			REPROGRAM_LAST_DATE = IDTREPROGRAM_LAST_DATE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.REPROGRAM_LAST_DATE:= IDTREPROGRAM_LAST_DATE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDASSIGNED_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		IDTASSIGNED_DATE$ IN OR_ORDER.ASSIGNED_DATE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ASSIGNED_DATE = IDTASSIGNED_DATE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ASSIGNED_DATE:= IDTASSIGNED_DATE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDASSIGNED_WITH
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBASSIGNED_WITH$ IN OR_ORDER.ASSIGNED_WITH%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ASSIGNED_WITH = ISBASSIGNED_WITH$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ASSIGNED_WITH:= ISBASSIGNED_WITH$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDMAX_DATE_TO_LEGALIZE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		IDTMAX_DATE_TO_LEGALIZE$ IN OR_ORDER.MAX_DATE_TO_LEGALIZE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			MAX_DATE_TO_LEGALIZE = IDTMAX_DATE_TO_LEGALIZE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.MAX_DATE_TO_LEGALIZE:= IDTMAX_DATE_TO_LEGALIZE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDORDER_VALUE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUORDER_VALUE$ IN OR_ORDER.ORDER_VALUE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ORDER_VALUE = INUORDER_VALUE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ORDER_VALUE:= INUORDER_VALUE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDPRINTING_TIME_NUMBER
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUPRINTING_TIME_NUMBER$ IN OR_ORDER.PRINTING_TIME_NUMBER%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			PRINTING_TIME_NUMBER = INUPRINTING_TIME_NUMBER$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PRINTING_TIME_NUMBER:= INUPRINTING_TIME_NUMBER$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDLEGALIZE_TRY_TIMES
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INULEGALIZE_TRY_TIMES$ IN OR_ORDER.LEGALIZE_TRY_TIMES%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			LEGALIZE_TRY_TIMES = INULEGALIZE_TRY_TIMES$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.LEGALIZE_TRY_TIMES:= INULEGALIZE_TRY_TIMES$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDOPERATING_UNIT_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUOPERATING_UNIT_ID$ IN OR_ORDER.OPERATING_UNIT_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			OPERATING_UNIT_ID = INUOPERATING_UNIT_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.OPERATING_UNIT_ID:= INUOPERATING_UNIT_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDORDER_STATUS_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUORDER_STATUS_ID$ IN OR_ORDER.ORDER_STATUS_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ORDER_STATUS_ID = INUORDER_STATUS_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ORDER_STATUS_ID:= INUORDER_STATUS_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDTASK_TYPE_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUTASK_TYPE_ID$ IN OR_ORDER.TASK_TYPE_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			TASK_TYPE_ID = INUTASK_TYPE_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.TASK_TYPE_ID:= INUTASK_TYPE_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDOPERATING_SECTOR_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUOPERATING_SECTOR_ID$ IN OR_ORDER.OPERATING_SECTOR_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			OPERATING_SECTOR_ID = INUOPERATING_SECTOR_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.OPERATING_SECTOR_ID:= INUOPERATING_SECTOR_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDCAUSAL_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUCAUSAL_ID$ IN OR_ORDER.CAUSAL_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			CAUSAL_ID = INUCAUSAL_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.CAUSAL_ID:= INUCAUSAL_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDADMINIST_DISTRIB_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUADMINIST_DISTRIB_ID$ IN OR_ORDER.ADMINIST_DISTRIB_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ADMINIST_DISTRIB_ID = INUADMINIST_DISTRIB_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ADMINIST_DISTRIB_ID:= INUADMINIST_DISTRIB_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDORDER_CLASSIF_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUORDER_CLASSIF_ID$ IN OR_ORDER.ORDER_CLASSIF_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ORDER_CLASSIF_ID = INUORDER_CLASSIF_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ORDER_CLASSIF_ID:= INUORDER_CLASSIF_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDGEOGRAP_LOCATION_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUGEOGRAP_LOCATION_ID$ IN OR_ORDER.GEOGRAP_LOCATION_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			GEOGRAP_LOCATION_ID = INUGEOGRAP_LOCATION_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.GEOGRAP_LOCATION_ID:= INUGEOGRAP_LOCATION_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDIS_COUNTERMAND
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBIS_COUNTERMAND$ IN OR_ORDER.IS_COUNTERMAND%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			IS_COUNTERMAND = ISBIS_COUNTERMAND$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.IS_COUNTERMAND:= ISBIS_COUNTERMAND$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDREAL_TASK_TYPE_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUREAL_TASK_TYPE_ID$ IN OR_ORDER.REAL_TASK_TYPE_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			REAL_TASK_TYPE_ID = INUREAL_TASK_TYPE_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.REAL_TASK_TYPE_ID:= INUREAL_TASK_TYPE_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDSAVED_DATA_VALUES
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBSAVED_DATA_VALUES$ IN OR_ORDER.SAVED_DATA_VALUES%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			SAVED_DATA_VALUES = ISBSAVED_DATA_VALUES$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.SAVED_DATA_VALUES:= ISBSAVED_DATA_VALUES$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDFOR_AUTOMATIC_LEGA
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBFOR_AUTOMATIC_LEGA$ IN OR_ORDER.FOR_AUTOMATIC_LEGA%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			FOR_AUTOMATIC_LEGA = ISBFOR_AUTOMATIC_LEGA$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.FOR_AUTOMATIC_LEGA:= ISBFOR_AUTOMATIC_LEGA$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDORDER_COST_AVERAGE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUORDER_COST_AVERAGE$ IN OR_ORDER.ORDER_COST_AVERAGE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ORDER_COST_AVERAGE = INUORDER_COST_AVERAGE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ORDER_COST_AVERAGE:= INUORDER_COST_AVERAGE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDORDER_COST_BY_LIST
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUORDER_COST_BY_LIST$ IN OR_ORDER.ORDER_COST_BY_LIST%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ORDER_COST_BY_LIST = INUORDER_COST_BY_LIST$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ORDER_COST_BY_LIST:= INUORDER_COST_BY_LIST$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDOPERATIVE_AIU_VALUE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUOPERATIVE_AIU_VALUE$ IN OR_ORDER.OPERATIVE_AIU_VALUE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			OPERATIVE_AIU_VALUE = INUOPERATIVE_AIU_VALUE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.OPERATIVE_AIU_VALUE:= INUOPERATIVE_AIU_VALUE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDADMIN_AIU_VALUE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUADMIN_AIU_VALUE$ IN OR_ORDER.ADMIN_AIU_VALUE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ADMIN_AIU_VALUE = INUADMIN_AIU_VALUE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ADMIN_AIU_VALUE:= INUADMIN_AIU_VALUE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDCHARGE_STATUS
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBCHARGE_STATUS$ IN OR_ORDER.CHARGE_STATUS%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			CHARGE_STATUS = ISBCHARGE_STATUS$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.CHARGE_STATUS:= ISBCHARGE_STATUS$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDPREV_ORDER_STATUS_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUPREV_ORDER_STATUS_ID$ IN OR_ORDER.PREV_ORDER_STATUS_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			PREV_ORDER_STATUS_ID = INUPREV_ORDER_STATUS_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PREV_ORDER_STATUS_ID:= INUPREV_ORDER_STATUS_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDPROGRAMING_CLASS_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUPROGRAMING_CLASS_ID$ IN OR_ORDER.PROGRAMING_CLASS_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			PROGRAMING_CLASS_ID = INUPROGRAMING_CLASS_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PROGRAMING_CLASS_ID:= INUPROGRAMING_CLASS_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDPREVIOUS_WORK
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBPREVIOUS_WORK$ IN OR_ORDER.PREVIOUS_WORK%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			PREVIOUS_WORK = ISBPREVIOUS_WORK$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PREVIOUS_WORK:= ISBPREVIOUS_WORK$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDAPPOINTMENT_CONFIRM
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBAPPOINTMENT_CONFIRM$ IN OR_ORDER.APPOINTMENT_CONFIRM%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			APPOINTMENT_CONFIRM = ISBAPPOINTMENT_CONFIRM$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.APPOINTMENT_CONFIRM:= ISBAPPOINTMENT_CONFIRM$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDX
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUX$ IN OR_ORDER.X%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			X = INUX$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.X:= INUX$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDY
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUY$ IN OR_ORDER.Y%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			Y = INUY$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.Y:= INUY$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDSTAGE_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUSTAGE_ID$ IN OR_ORDER.STAGE_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			STAGE_ID = INUSTAGE_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.STAGE_ID:= INUSTAGE_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDLEGAL_IN_PROJECT
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBLEGAL_IN_PROJECT$ IN OR_ORDER.LEGAL_IN_PROJECT%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			LEGAL_IN_PROJECT = ISBLEGAL_IN_PROJECT$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.LEGAL_IN_PROJECT:= ISBLEGAL_IN_PROJECT$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDOFFERED
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBOFFERED$ IN OR_ORDER.OFFERED%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			OFFERED = ISBOFFERED$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.OFFERED:= ISBOFFERED$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDASSO_UNIT_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUASSO_UNIT_ID$ IN OR_ORDER.ASSO_UNIT_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ASSO_UNIT_ID = INUASSO_UNIT_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ASSO_UNIT_ID:= INUASSO_UNIT_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDSUBSCRIBER_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUSUBSCRIBER_ID$ IN OR_ORDER.SUBSCRIBER_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			SUBSCRIBER_ID = INUSUBSCRIBER_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.SUBSCRIBER_ID:= INUSUBSCRIBER_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDADM_PENDING
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBADM_PENDING$ IN OR_ORDER.ADM_PENDING%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ADM_PENDING = ISBADM_PENDING$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ADM_PENDING:= ISBADM_PENDING$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDSHAPE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISGSHAPE$ IN OR_ORDER.SHAPE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			SHAPE = ISGSHAPE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.SHAPE:= ISGSHAPE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDROUTE_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUROUTE_ID$ IN OR_ORDER.ROUTE_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ROUTE_ID = INUROUTE_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ROUTE_ID:= INUROUTE_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDCONSECUTIVE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUCONSECUTIVE$ IN OR_ORDER.CONSECUTIVE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			CONSECUTIVE = INUCONSECUTIVE$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.CONSECUTIVE:= INUCONSECUTIVE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDDEFINED_CONTRACT_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUDEFINED_CONTRACT_ID$ IN OR_ORDER.DEFINED_CONTRACT_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			DEFINED_CONTRACT_ID = INUDEFINED_CONTRACT_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.DEFINED_CONTRACT_ID:= INUDEFINED_CONTRACT_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDIS_PENDING_LIQ
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		ISBIS_PENDING_LIQ$ IN OR_ORDER.IS_PENDING_LIQ%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			IS_PENDING_LIQ = ISBIS_PENDING_LIQ$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.IS_PENDING_LIQ:= ISBIS_PENDING_LIQ$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDSCHED_ITINERARY_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUSCHED_ITINERARY_ID$ IN OR_ORDER.SCHED_ITINERARY_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			SCHED_ITINERARY_ID = INUSCHED_ITINERARY_ID$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.SCHED_ITINERARY_ID:= INUSCHED_ITINERARY_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDESTIMATED_COST
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INUESTIMATED_COST$ IN OR_ORDER.ESTIMATED_COST%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYOR_ORDER;
	BEGIN
		RCERROR.ORDER_ID := INUORDER_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUORDER_ID,
				RCDATA
			);
		END IF;

		UPDATE OR_ORDER
		SET
			ESTIMATED_COST = INUESTIMATED_COST$
		WHERE
			ORDER_ID = INUORDER_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.ESTIMATED_COST:= INUESTIMATED_COST$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	FUNCTION FNUGETORDER_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ORDER_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ORDER_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ORDER_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETPRIOR_ORDER_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.PRIOR_ORDER_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.PRIOR_ORDER_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.PRIOR_ORDER_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETNUMERATOR_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.NUMERATOR_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.NUMERATOR_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.NUMERATOR_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETSEQUENCE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.SEQUENCE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.SEQUENCE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.SEQUENCE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETPRIORITY
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.PRIORITY%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.PRIORITY);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.PRIORITY);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETEXTERNAL_ADDRESS_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.EXTERNAL_ADDRESS_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.EXTERNAL_ADDRESS_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.EXTERNAL_ADDRESS_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETCREATED_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.CREATED_DATE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.CREATED_DATE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.CREATED_DATE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETEXEC_INITIAL_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.EXEC_INITIAL_DATE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.EXEC_INITIAL_DATE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.EXEC_INITIAL_DATE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETEXECUTION_FINAL_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.EXECUTION_FINAL_DATE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.EXECUTION_FINAL_DATE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.EXECUTION_FINAL_DATE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETEXEC_ESTIMATE_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.EXEC_ESTIMATE_DATE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.EXEC_ESTIMATE_DATE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.EXEC_ESTIMATE_DATE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETARRANGED_HOUR
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ARRANGED_HOUR%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ARRANGED_HOUR);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ARRANGED_HOUR);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETLEGALIZATION_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.LEGALIZATION_DATE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.LEGALIZATION_DATE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.LEGALIZATION_DATE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETREPROGRAM_LAST_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.REPROGRAM_LAST_DATE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.REPROGRAM_LAST_DATE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.REPROGRAM_LAST_DATE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETASSIGNED_DATE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ASSIGNED_DATE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ASSIGNED_DATE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ASSIGNED_DATE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETASSIGNED_WITH
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ASSIGNED_WITH%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ASSIGNED_WITH);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ASSIGNED_WITH);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETMAX_DATE_TO_LEGALIZE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.MAX_DATE_TO_LEGALIZE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.MAX_DATE_TO_LEGALIZE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.MAX_DATE_TO_LEGALIZE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETORDER_VALUE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ORDER_VALUE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ORDER_VALUE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ORDER_VALUE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETPRINTING_TIME_NUMBER
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.PRINTING_TIME_NUMBER%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.PRINTING_TIME_NUMBER);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.PRINTING_TIME_NUMBER);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETLEGALIZE_TRY_TIMES
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.LEGALIZE_TRY_TIMES%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.LEGALIZE_TRY_TIMES);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.LEGALIZE_TRY_TIMES);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETOPERATING_UNIT_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.OPERATING_UNIT_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.OPERATING_UNIT_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.OPERATING_UNIT_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETORDER_STATUS_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ORDER_STATUS_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ORDER_STATUS_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ORDER_STATUS_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETTASK_TYPE_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.TASK_TYPE_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.TASK_TYPE_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.TASK_TYPE_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETOPERATING_SECTOR_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.OPERATING_SECTOR_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.OPERATING_SECTOR_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.OPERATING_SECTOR_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETCAUSAL_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.CAUSAL_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.CAUSAL_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.CAUSAL_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETADMINIST_DISTRIB_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ADMINIST_DISTRIB_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ADMINIST_DISTRIB_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ADMINIST_DISTRIB_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETORDER_CLASSIF_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ORDER_CLASSIF_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ORDER_CLASSIF_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ORDER_CLASSIF_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETGEOGRAP_LOCATION_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.GEOGRAP_LOCATION_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.GEOGRAP_LOCATION_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.GEOGRAP_LOCATION_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETIS_COUNTERMAND
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.IS_COUNTERMAND%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.IS_COUNTERMAND);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.IS_COUNTERMAND);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETREAL_TASK_TYPE_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.REAL_TASK_TYPE_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.REAL_TASK_TYPE_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.REAL_TASK_TYPE_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETSAVED_DATA_VALUES
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.SAVED_DATA_VALUES%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.SAVED_DATA_VALUES);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.SAVED_DATA_VALUES);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETFOR_AUTOMATIC_LEGA
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.FOR_AUTOMATIC_LEGA%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.FOR_AUTOMATIC_LEGA);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.FOR_AUTOMATIC_LEGA);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETORDER_COST_AVERAGE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ORDER_COST_AVERAGE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ORDER_COST_AVERAGE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ORDER_COST_AVERAGE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETORDER_COST_BY_LIST
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ORDER_COST_BY_LIST%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ORDER_COST_BY_LIST);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ORDER_COST_BY_LIST);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETOPERATIVE_AIU_VALUE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.OPERATIVE_AIU_VALUE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.OPERATIVE_AIU_VALUE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.OPERATIVE_AIU_VALUE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETADMIN_AIU_VALUE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ADMIN_AIU_VALUE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ADMIN_AIU_VALUE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ADMIN_AIU_VALUE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETCHARGE_STATUS
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.CHARGE_STATUS%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.CHARGE_STATUS);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.CHARGE_STATUS);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETPREV_ORDER_STATUS_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.PREV_ORDER_STATUS_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN
BLDAO_USE_CACHE
		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.PREV_ORDER_STATUS_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.PREV_ORDER_STATUS_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETPROGRAMING_CLASS_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.PROGRAMING_CLASS_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.PROGRAMING_CLASS_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.PROGRAMING_CLASS_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETPREVIOUS_WORK
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.PREVIOUS_WORK%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.PREVIOUS_WORK);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.PREVIOUS_WORK);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETAPPOINTMENT_CONFIRM
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.APPOINTMENT_CONFIRM%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.APPOINTMENT_CONFIRM);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.APPOINTMENT_CONFIRM);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETX
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.X%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.X);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.X);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETY
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.Y%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.Y);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.Y);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETSTAGE_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.STAGE_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.STAGE_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.STAGE_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETLEGAL_IN_PROJECT
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.LEGAL_IN_PROJECT%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.LEGAL_IN_PROJECT);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.LEGAL_IN_PROJECT);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETOFFERED
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.OFFERED%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.OFFERED);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.OFFERED);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETASSO_UNIT_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ASSO_UNIT_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ASSO_UNIT_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ASSO_UNIT_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETSUBSCRIBER_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.SUBSCRIBER_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.SUBSCRIBER_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.SUBSCRIBER_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETADM_PENDING
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ADM_PENDING%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ADM_PENDING);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ADM_PENDING);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSGGETSHAPE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.SHAPE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.SHAPE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.SHAPE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETROUTE_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ROUTE_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ROUTE_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ROUTE_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETCONSECUTIVE
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.CONSECUTIVE%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.CONSECUTIVE);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.CONSECUTIVE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETDEFINED_CONTRACT_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.DEFINED_CONTRACT_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.DEFINED_CONTRACT_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.DEFINED_CONTRACT_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETIS_PENDING_LIQ
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.IS_PENDING_LIQ%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.IS_PENDING_LIQ);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.IS_PENDING_LIQ);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETSCHED_ITINERARY_ID
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.SCHED_ITINERARY_ID%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.SCHED_ITINERARY_ID);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.SCHED_ITINERARY_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETESTIMATED_COST
	(
		INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN OR_ORDER.ESTIMATED_COST%TYPE
	IS
		RCERROR STYOR_ORDER;
	BEGIN

		RCERROR.ORDER_ID := INUORDER_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED(INUORDER_ID) THEN
			 RETURN(RCDATA.ESTIMATED_COST);
		END IF;
		LOAD(INUORDER_ID);
		RETURN(RCDATA.ESTIMATED_COST);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	PROCEDURE SETUSECACHE
	(
		IBLUSECACHE    IN  BOOLEAN
	) IS
	BEGIN
	    BLDAO_USE_CACHE := IBLUSECACHE;
	END;

BEGIN
    GETDAO_USE_CACHE;
END DAOR_ORDER;