PACKAGE BODY GE_BOSchedule AS










































































































    
    
    
    
    CSBVERSION              CONSTANT VARCHAR2(250) := 'SAO381652';
    
    CSBDATE_FORMAT          CONSTANT VARCHAR2(50) := 'DD-MM-YYYY HH24:MI:SS';
    CSBCONST_HEX            CONSTANT VARCHAR2(10) := '__HEX';

    
    CNUPAIS             CONSTANT GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
                                := GE_BOCALENDAR.FNUOBTPAISPORUSUARIO;
	
    
    
    NUSCHEDULEPROCESSINMEMORY   GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE;

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;
    
    FUNCTION FSBGETMASTERPARAMETERSFROMXML
    ( XLAPPLICATION IN XMLTYPE )
    RETURN  STRING
    IS
       XLATTRIBUTES  XMLTYPE;
       XLATTRIBUTE   XMLTYPE;
       NUINDEXATTRIBUTE   NUMBER(2) := 1;  
       SBPARAMETERS       VARCHAR2(4000);
       SBATTRIBUTENAME    GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE; 
       SBENTITYNAME       GE_ENTITY.NAME_%TYPE;
    BEGIN
       UT_TRACE.TRACE ('Inicia GE_BOSchedule.fsbGetMasterParametersFromXml', 10);
       SBPARAMETERS := NULL;
       
       
       XLATTRIBUTES := XLAPPLICATION.EXTRACT(
               '//ATTRIBUTE[TYPE_ATTRIB_ID = 2 and (IS_VISIBLE=''Y'' or IS_VISIBLE=''X'' or IS_VISIBLE=''C'')]');
       UT_TRACE.TRACE ('Se recorren los atributos', 10);

       
       WHILE XLATTRIBUTES.EXISTSNODE('//ATTRIBUTE[' || TO_CHAR(NUINDEXATTRIBUTE) || ']') > 0
       LOOP

          XLATTRIBUTE := XLATTRIBUTES.EXTRACT('//ATTRIBUTE[' || TO_CHAR(NUINDEXATTRIBUTE) || ']');
          
          
          
          SBENTITYNAME := XLATTRIBUTE.EXTRACT('//ENTITY_NAME/text()').GETSTRINGVAL();
          UT_TRACE.TRACE ('sbEntityName ['||SBENTITYNAME||']', 20);
       

          
         SBATTRIBUTENAME := XLATTRIBUTE.EXTRACT('//ATTRIBUTE_NAME/text()').GETSTRINGVAL();
         UT_TRACE.TRACE ('sbAttributeName ['||SBATTRIBUTENAME||']', 20);

         
         SBPARAMETERS := SBPARAMETERS || SBATTRIBUTENAME || CSBSEPARADOR_VALORES ||
                            GE_BOINSTANCECONTROL.FSBGETFIELDVALUE
                                    (
                                      SBENTITYNAME,
                                      SBATTRIBUTENAME
                                    )|| CSBSEPARADOR_PARAMETROS;
         NUINDEXATTRIBUTE := NUINDEXATTRIBUTE + 1;
         
       END LOOP;
       UT_TRACE.TRACE ('Parametros: '||SBPARAMETERS,80);
       UT_TRACE.TRACE ('Finaliza GE_BOSchedule.fsbGetMasterParametersFromXml', 10);

       RETURN SBPARAMETERS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETMASTERPARAMETERSFROMXML;
    
    
    



















    PROCEDURE GETALLPROCESSSCHEDULE
    (
        ORFCURSOR   OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
    
        OPEN ORFCURSOR FOR
             SELECT GE_PROCESS_SCHEDULE.*, SA_EXECUTABLE.NAME EXECUTABLE_NAME
            FROM GE_PROCESS_SCHEDULE, SA_EXECUTABLE
            WHERE GE_PROCESS_SCHEDULE.EXECUTABLE_ID = SA_EXECUTABLE.EXECUTABLE_ID (+)
            AND  STATUS NOT IN ( 'E', 'C');
            
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETALLPROCESSSCHEDULE;
    
    
    PROCEDURE GETPROCESSSCHEDULEDETAILS
    (
        INUPROCSCHEDID  IN      GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE,
        ORFCURSOR       OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OPEN ORFCURSOR FOR
            SELECT *
            FROM GE_PROC_SCHE_DETAIL
            WHERE PROCESS_SCHEDULE_ID = INUPROCSCHEDID
            ORDER BY SEQUENCE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPROCESSSCHEDULEDETAILS;
    
    FUNCTION FSBGETJOBOBJECTTYPE
    RETURN GE_OBJECT_TYPE.OBJECT_TYPE_ID%TYPE
    IS
    BEGIN

        RETURN CNUJOBOBJECTTYPE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETJOBOBJECTTYPE;
    
    














    FUNCTION GETSESSIONDATA
    RETURN VARCHAR2
    IS
        SBDATA VARCHAR2(2000) := '';
        SBRETURN VARCHAR2(2000) := '';
        
        SBUSER              VARCHAR2(100);
        SBPASSWORD          VARCHAR2(100);
        SBINSTANCE          VARCHAR2(100);
        
    BEGIN
    
        GE_BODATABASECONNECTION.GETCONNECTIONSTRING(SBUSER, SBPASSWORD, SBINSTANCE);

        SBDATA := SBUSER || '/' || SBPASSWORD || '@' || SBINSTANCE;
        
        SA_BOPASSWORD.ENCRYPT3(SBDATA, SA_BOPASSWORD.CNUENCRYPT, SBRETURN);

        SBRETURN := CSBCONST_HEX||GE_BOUTILITIES.FSBCONVERTSTR2HEX(SBRETURN);

        RETURN SBRETURN;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSESSIONDATA;
    
    















    PROCEDURE SETSESSIONDATA
    (
        ISBSESSIONDATA  VARCHAR2
    )
    IS
    
        SBDATA                  VARCHAR2(2000);
        SBLOGIN                 VARCHAR2(2000);
        SBPASSWD                VARCHAR2(2000);
        SBINST                  VARCHAR2(2000);
        SBSESSIONDATA           VARCHAR2(32767);

    BEGIN
    
        SBSESSIONDATA := ISBSESSIONDATA;
        IF (INSTR(SBSESSIONDATA,CSBCONST_HEX,1,1) > 0  ) THEN
            
            SBSESSIONDATA := GE_BOUTILITIES.FSBCONVERTHEX2STR(REPLACE(SBSESSIONDATA,CSBCONST_HEX,''));
        END IF;

        SA_BOPASSWORD.ENCRYPT3(SBSESSIONDATA, SA_BOPASSWORD.CNUDEENCRYPT, SBDATA);

        SBLOGIN := SUBSTR(SBDATA,0,INSTR(SBDATA,'/',1) - 1);
        
        SBDATA := SUBSTR(SBDATA,INSTR(SBDATA,'/') + 1);
        SBPASSWD := SUBSTR( SBDATA,0, INSTR(SBDATA,'@')-1);
        
        SBINST := SUBSTR(SBDATA,INSTR(SBDATA,'@') + 1);
        
        GE_BODATABASECONNECTION.SETCONNECTIONSTRING(SBLOGIN, SBPASSWD, SBINST);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETSESSIONDATA;
    
    FUNCTION CREATEWHAT
    (
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        WHAT GE_PROCESS_SCHEDULE.WHAT%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.CreateWhat',7);

        WHAT := 'BEGIN' || CHR(10) || CHR(10) ||
                CHR(9) || 'SetSystemEnviroment;' || CHR(10) ||
                CHR(9) || 'GE_BOSchedule.SetSessionData('''||GE_BOSCHEDULE.GETSESSIONDATA||''');' || CHR(10) ||
                CHR(9) || 'Errors.Initialize;' || CHR(10) ||
                CHR(9) || CSBEXECUTEPROCESS || '( ' || INUSCHEDULEPROCESS || ' );' || CHR(10) ||
                CHR(9) || 'if( DAGE_Process_Schedule.fsbGetFrequency( ' || INUSCHEDULEPROCESS || ' ) in ( GE_BOSchedule.csbSoloUnaVez, GE_BOSchedule.csbSoloUnaVezDH ) ) then' || CHR(10) ||
                CHR(9) || CHR(9) || 'GE_BOSchedule.InactiveSchedule( ' || INUSCHEDULEPROCESS || ' );' || CHR(10) ||
                CHR(9) || 'end if; ' || CHR(10) || CHR(10) ||
                'EXCEPTION' || CHR(10) || CHR(10) ||
                CHR(9) || 'when OTHERS then' || CHR(10) ||
                CHR(9) || CHR(9) || 'Errors.SetError;' || CHR(10) ||
                CHR(9) || CHR(9) || 'if( DAGE_Process_Schedule.fsbGetFrequency( ' || INUSCHEDULEPROCESS || ' ) in ( GE_BOSchedule.csbSoloUnaVez, GE_BOSchedule.csbSoloUnaVezDH ) ) then' || CHR(10) ||
                CHR(9) || CHR(9) || CHR(9) || 'GE_BOSchedule.DropSchedule( ' || INUSCHEDULEPROCESS || ' );' || CHR(10) ||
                CHR(9) || CHR(9) || 'end if; ' || CHR(10) || CHR(10) ||
                'END;';

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.CreateWhat',7);

        RETURN WHAT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEWHAT;
    
    


























    
    PROCEDURE PREPARESCHEDULEGEMPS
    (
        IDTSTARTDATE            IN  GE_PROCESS_SCHEDULE.START_DATE_%TYPE,
        ISBFREQUENCY            IN  GE_PROCESS_SCHEDULE.FREQUENCY%TYPE,
        INUOBJECTID             IN  GE_OBJECT.OBJECT_ID%TYPE,
        ONUPROCESSSCHEDULEID    OUT GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
    
        SBWHAT GE_PROCESS_SCHEDULE.WHAT%TYPE := '';
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;

    BEGIN

        
        
        
        IF ( ( ISBFREQUENCY = CSBSOLOUNAVEZDH ) AND
            DAGE_CALENDAR.FBLEXIST( TRUNC ( IDTSTARTDATE ), CNUPAIS ) AND
            DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( IDTSTARTDATE ), CNUPAIS ) = GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS') ) THEN

            
            ERRORS.SETERROR( 119324 );
            RAISE EX.CONTROLLED_ERROR;

        END IF;

        ONUPROCESSSCHEDULEID := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
                                                    ('seq_ge_process_schedule');
        SBWHAT := CREATEWHAT(ONUPROCESSSCHEDULEID);

        NUSCHEDULEPROCESSINMEMORY := -1;

        RCPROCESS_SCHEDULE.PROCESS_SCHEDULE_ID := ONUPROCESSSCHEDULEID;
        RCPROCESS_SCHEDULE.EXECUTABLE_ID := SA_BOEXECUTABLE.GETEXECUTABLEBYNAME('GEMPS').EXECUTABLE_ID;
        RCPROCESS_SCHEDULE.PARAMETERS_ := 'OBJECT_ID='||INUOBJECTID;
        RCPROCESS_SCHEDULE.LOG_USER := UT_SESSION.GETUSER;
        RCPROCESS_SCHEDULE.STATUS := CSBPREPARESCHEDULE;
        RCPROCESS_SCHEDULE.WHAT := SBWHAT;
        RCPROCESS_SCHEDULE.FREQUENCY := ISBFREQUENCY;
        RCPROCESS_SCHEDULE.START_DATE_ := IDTSTARTDATE;

        DAGE_PROCESS_SCHEDULE.INSRECORD(RCPROCESS_SCHEDULE);

        NUSCHEDULEPROCESSINMEMORY := ONUPROCESSSCHEDULEID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
    END PREPARESCHEDULEGEMPS;
    
    PROCEDURE SCHEDULEPROCESS
    (
        INUSCHEDULEPROCESS  IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ScheduleProcess',7);

        DAGE_PROCESS_SCHEDULE.GETRECORD(INUSCHEDULEPROCESS,RCPROCESS_SCHEDULE);

        DBMS_JOB.SUBMIT
        (
            RCPROCESS_SCHEDULE.JOB,
            RCPROCESS_SCHEDULE.WHAT,
            RCPROCESS_SCHEDULE.START_DATE_,
            'GE_BOSchedule.fdtGetJobNextExeDate( to_date( ''' || TO_CHAR( RCPROCESS_SCHEDULE.START_DATE_, CSBDATE_FORMAT ) || ''', ''' || CSBDATE_FORMAT || ''' ), ''' || RCPROCESS_SCHEDULE.FREQUENCY || ''' )'
        );
        
        RCPROCESS_SCHEDULE.STATUS := CSBACTIVESCHEDULE;
        RCPROCESS_SCHEDULE.LOG_USER := UT_SESSION.GETUSER;

        DAGE_PROCESS_SCHEDULE.UPDRECORD(RCPROCESS_SCHEDULE);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ScheduleProcess',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END SCHEDULEPROCESS;
	
	
























	
    PROCEDURE REPROGRAMPROCESS
    (
        INUPROCSCHEDID  IN      GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE,
        IDTNEWDATE      IN      GE_PROCESS_SCHEDULE.START_DATE_%TYPE,
        ISBFREQUENCY    IN      GE_PROCESS_SCHEDULE.FREQUENCY%TYPE
    )
    IS
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;

        PROCEDURE VALDATA IS
        BEGIN
            UT_TRACE.TRACE('Inicia GE_BOSchedule.ReprogramProcess.ValData',7);

            IF (IDTNEWDATE < SYSDATE) THEN
                ERRORS.SETERROR(119322);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            IF (RCPROCESS_SCHEDULE.STATUS = CSBPREPARESCHEDULE) THEN
                ERRORS.SETERROR(119543);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            
            
            IF ( ( ISBFREQUENCY = CSBSOLOUNAVEZDH ) AND
                DAGE_CALENDAR.FBLEXIST( TRUNC ( IDTNEWDATE ), CNUPAIS ) AND
                DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( IDTNEWDATE ), CNUPAIS ) = GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS') ) THEN

                
                ERRORS.SETERROR( 119324 );
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            UT_TRACE.TRACE('Finaliza GE_BOSchedule.ReprogramProcess.ValData',7);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALDATA;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ReprogramProcess',7);

        VALDATA();

        GE_BOSCHEDULE.INACTIVESCHEDULE(INUPROCSCHEDID);
        
        DAGE_PROCESS_SCHEDULE.GETRECORD(INUPROCSCHEDID,RCPROCESS_SCHEDULE);
        RCPROCESS_SCHEDULE.START_DATE_ := IDTNEWDATE;
        RCPROCESS_SCHEDULE.FREQUENCY := ISBFREQUENCY;
        RCPROCESS_SCHEDULE.STATUS := CSBACTIVESCHEDULE;
        
        DBMS_JOB.SUBMIT
        (
            RCPROCESS_SCHEDULE.JOB,
            RCPROCESS_SCHEDULE.WHAT,
            IDTNEWDATE,
            'GE_BOSchedule.fdtGetJobNextExeDate( to_date( ''' || TO_CHAR( IDTNEWDATE, CSBDATE_FORMAT ) || ''', ''' || CSBDATE_FORMAT || ''' ), ''' || ISBFREQUENCY || ''' )'
        );

        RCPROCESS_SCHEDULE.LOG_USER := UT_SESSION.GETUSER;

        DAGE_PROCESS_SCHEDULE.UPDRECORD(RCPROCESS_SCHEDULE);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ReprogramProcess',7);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END REPROGRAMPROCESS;

    PROCEDURE DELETEPROCESSDETAILS
    (
        INUPROCSCHEDID  IN      GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS

    BEGIN
    
        GE_BCPROC_SCHE_DETAIL.DELETESCHEDULEDETAILS(INUPROCSCHEDID);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END DELETEPROCESSDETAILS;
    
    PROCEDURE EXECUTEOBJECTPROCESS
    (
        INUPROCSCHEDID  IN      GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
        SBOBJECTNAME               GE_OBJECT.NAME_%TYPE;
        NUOBJECTID                 GE_OBJECT.OBJECT_ID%TYPE;
        SBPROCESSSCHEDULEPARAMS    GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE;
        SBSTATEMENT                VARCHAR2(2000);

        TBDETALLES          DAGE_PROC_SCHE_DETAIL.TYTBGE_PROC_SCHE_DETAIL;
        IXDETALLES          NUMBER;
        
        
        SBPARAMETERVALUES           VARCHAR2(4000);
        
        PROCEDURE GETPARAMETERVALUES
        (
            ISBPARAMETROS    IN VARCHAR2,
            
            OSBVALUES        OUT VARCHAR2
        ) IS

            
            TBSTR           UT_STRING.TYTB_STRING;
            
            NUPOSPARAM      NUMBER;

        BEGIN
            OSBVALUES := '';
            

            TBSTR.DELETE;
            
            UT_STRING.EXTSTRING (ISBPARAMETROS, '|', TBSTR);

            
            FOR I IN 1 .. TBSTR.COUNT LOOP

                
                NUPOSPARAM := INSTR(TBSTR(I),'=');
                IF NUPOSPARAM != 0 THEN
                    
                    IF SUBSTR(TBSTR(I),NUPOSPARAM+1) IS NULL THEN
                        OSBVALUES := OSBVALUES || 'null, ';
                    ELSE
                        OSBVALUES := OSBVALUES ||SUBSTR(TBSTR(I),NUPOSPARAM+1)||', ';
                    END IF;
                END IF;

            END LOOP;
            
            OSBVALUES := SUBSTR(OSBVALUES, 0, LENGTH(OSBVALUES)-2);

        END;
        
        PROCEDURE GETOBJECT
        (
            ISBPARAMETROS    IN VARCHAR2,
            ONUOBJECT        OUT NUMBER
        ) IS

            
            TBSTR           UT_STRING.TYTB_STRING;
            
            NUPOSPARAM      NUMBER;

        BEGIN

            TBSTR.DELETE;
            
            UT_STRING.EXTSTRING (ISBPARAMETROS, '|', TBSTR);

            
            FOR I IN 1 .. TBSTR.COUNT LOOP

                
                NUPOSPARAM := INSTR(TBSTR(I),'OBJECT_ID=');
                IF NUPOSPARAM != 0 THEN
                    ONUOBJECT := SUBSTR(TBSTR(I),NUPOSPARAM+10);
                END IF;

            END LOOP;

        END;
        
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ExecuteObjectProcess',7);
        
        SBPROCESSSCHEDULEPARAMS := DAGE_PROCESS_SCHEDULE.FSBGETPARAMETERS_(INUPROCSCHEDID);
        
        GETOBJECT(SBPROCESSSCHEDULEPARAMS, NUOBJECTID);
        
        SBOBJECTNAME := DAGE_OBJECT.FSBGETNAME_(NUOBJECTID);
        
        GE_BCPROC_SCHE_DETAIL.GETSCHEDULEDETAILS(INUPROCSCHEDID,TBDETALLES);

        IXDETALLES := TBDETALLES.FIRST;
        
        IF IXDETALLES IS NULL THEN
        
            SBSTATEMENT := 'BEGIN '||SBOBJECTNAME||'; '||
                                'EXCEPTION '||
                                'when OTHERS THEN '||
                                'Errors.SetError; '||
                                'ut_trace.Trace('||CHR(39)||'Error en la '
                                ||IXDETALLES||'� ejecuci�n de '||SBOBJECTNAME||'. El error fue: '
                                ||CHR(39)||'|| Errors.nuErrorCode ||'||CHR(39)||
                                '-'||CHR(39)||'||Errors.sbErrorMessage||'||CHR(39)||
                                '.  Continuando con la siguiente ejecuci�n'||CHR(39)||', 6); '||
                                'END;';

            UT_TRACE.TRACE(SBSTATEMENT, 15);
            EXECUTE IMMEDIATE SBSTATEMENT;
        
        END IF;
        LOOP
          EXIT WHEN IXDETALLES IS NULL;

            GETPARAMETERVALUES(TBDETALLES(IXDETALLES).PARAMETER, SBPARAMETERVALUES);
            
            
            SBSTATEMENT := 'BEGIN '||SBOBJECTNAME||'('||SBPARAMETERVALUES||'); '||
                                'EXCEPTION '||
                                'when OTHERS THEN '||
                                'Errors.SetError; '||
                                'ut_trace.Trace('||CHR(39)||'Error en la '
                                ||IXDETALLES||'� ejecuci�n de '||SBOBJECTNAME||'. El error fue: '
                                ||CHR(39)||'|| Errors.nuErrorCode ||'||CHR(39)||
                                '-'||CHR(39)||'||Errors.sbErrorMessage||'||CHR(39)||
                                '.  Continuando con la siguiente ejecuci�n'||CHR(39)||', 6); '||
                                'END;';
                                
            UT_TRACE.TRACE(SBSTATEMENT, 15);
            EXECUTE IMMEDIATE SBSTATEMENT;

            IXDETALLES := TBDETALLES.NEXT(IXDETALLES);
        END LOOP;
        
        
        
        
            
        
        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ExecuteObjectProcess',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END EXECUTEOBJECTPROCESS;

    
    FUNCTION CREATEWHAT
    (
        INUEXECUTABLE      IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        WHAT GE_PROCESS_SCHEDULE.WHAT%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.CreateWhat',7);
        
        WHAT := 'BEGIN' || CHR(10) || CHR(10) ||
                CHR(9) || 'SetSystemEnviroment;' || CHR(10) ||
                CHR(9) || 'Errors.Initialize;' || CHR(10) ||
                CHR(9) || DASA_EXECUTABLE.FSBGETNAME( INUEXECUTABLE ) || '( ' || INUSCHEDULEPROCESS || ' );' || CHR(10) ||
                CHR(9) || 'if( DAGE_Process_Schedule.fsbGetFrequency( ' || INUSCHEDULEPROCESS || ' ) in ( GE_BOSchedule.csbSoloUnaVez, GE_BOSchedule.csbSoloUnaVezDH ) ) then' || CHR(10) ||
                CHR(9) || CHR(9) || 'GE_BOSchedule.InactiveSchedule( ' || INUSCHEDULEPROCESS || ' );' || CHR(10) ||
                CHR(9) || 'end if; ' || CHR(10) || CHR(10) ||
                'EXCEPTION' || CHR(10) || CHR(10) ||
                CHR(9) || 'when OTHERS then' || CHR(10) ||
                CHR(9) || CHR(9) || 'Errors.SetError;' || CHR(10) ||
                CHR(9) || CHR(9) || 'if( DAGE_Process_Schedule.fsbGetFrequency( ' || INUSCHEDULEPROCESS || ' ) in ( GE_BOSchedule.csbSoloUnaVez, GE_BOSchedule.csbSoloUnaVezDH ) ) then' || CHR(10) ||
                CHR(9) || CHR(9) || CHR(9) || 'GE_BOSchedule.DropSchedule( ' || INUSCHEDULEPROCESS || ' );' || CHR(10) ||
                CHR(9) || CHR(9) || 'end if; ' || CHR(10) || CHR(10) ||
                'END;';
                
        UT_TRACE.TRACE('Finaliza GE_BOSchedule.CreateWhat',7);
        
        RETURN WHAT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEWHAT;
    
    
    FUNCTION FSBGETMASTERPARAMETERS
    (
        NUCONFIG  IN  GI_CONFIG.CONFIG_ID%TYPE
    )
    RETURN GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE
    IS
        SBPARAMETERS    GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE := CSBSEPARADOR_PARAMETROS;
        NOMBENTIDAD     GE_ENTITY.NAME_%TYPE;
        NUINDEX         NUMBER;
        CURSOR ATRIBUTOS IS
            SELECT A.ENTITY_ID, A.ENTITY_ATTRIBUTE_ID
            FROM GI_COMP_ATTRIBS A, GI_COMPOSITION B
            WHERE A.COMPOSITION_ID = B.COMPOSITION_ID
              AND CONFIG_ID = NUCONFIG;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.fsbGetMasterParameters',7);

        FOR ATTRIB IN ATRIBUTOS LOOP
            NOMBENTIDAD := DAGE_ENTITY_ATTRIBUTES.FSBGETTECHNICAL_NAME(ATTRIB.ENTITY_ATTRIBUTE_ID);
            SBPARAMETERS := SBPARAMETERS || NOMBENTIDAD || CSBSEPARADOR_VALORES ||
                            GE_BOINSTANCECONTROL.FSBGETFIELDVALUE
                                    (
                                        DAGE_ENTITY.FSBGETNAME_(ATTRIB.ENTITY_ID),
                                        NOMBENTIDAD
                                    )|| CSBSEPARADOR_PARAMETROS;
        END LOOP;
        
        UT_TRACE.TRACE('Finaliza GE_BOSchedule.fsbGetMasterParameters',7);
        
        RETURN SBPARAMETERS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ATRIBUTOS%ISOPEN THEN
                CLOSE ATRIBUTOS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ATRIBUTOS%ISOPEN THEN
                CLOSE ATRIBUTOS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETMASTERPARAMETERS;
    
    
    FUNCTION FNUGETCONFIGBYEXECUTABLE
    (
        INUEXECUTABLE      IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE
    )
    RETURN NUMBER
    IS
		CURSOR CUCONFIG IS
    		SELECT GI_CONFIG.CONFIG_ID
    		FROM   GI_CONFIG
    		WHERE  GI_CONFIG.EXTERNAL_ROOT_ID = INUEXECUTABLE
              AND  GI_CONFIG.ENTITY_ROOT_ID = 3339;

		NUIDCONFIG    GI_CONFIG.CONFIG_ID%TYPE := NULL;

    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.fnuGetConfigByExecutable ['||INUEXECUTABLE||']',7);

        OPEN CUCONFIG;
        FETCH CUCONFIG INTO NUIDCONFIG;
        IF CUCONFIG%NOTFOUND THEN
            CLOSE CUCONFIG;
            RETURN NULL;
        END IF;
        CLOSE CUCONFIG;
        
        UT_TRACE.TRACE('Finaliza GE_BOSchedule.fnuGetConfigByExecutable',7);
        
        RETURN NUIDCONFIG;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUCONFIG%ISOPEN THEN
                CLOSE CUCONFIG;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUCONFIG%ISOPEN THEN
                CLOSE CUCONFIG;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCONFIGBYEXECUTABLE;
    




    PROCEDURE PREPARESCHEDULEFWCPB
    (
        INUEXECUTABLE      IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ONUSCHEDULEPROCESS OUT GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
        NUCONFIG            GI_CONFIG.CONFIG_ID%TYPE;
        SBPARAMETERS        GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE;
        SBWHAT              GE_PROCESS_SCHEDULE.WHAT%TYPE;
        NUDUMMY             GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE;
        BLAPPXML            BOOLEAN;
        XLAPPLICATION       XMLTYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.PrepareScheduleFWCPB',7);

        
        BLAPPXML := FW_BOPROCESSINSTANCE.BLISAPPXML(INUEXECUTABLE,XLAPPLICATION);

        IF (BLAPPXML) THEN
           UT_TRACE.TRACE('Aplicacion en modelo autocontenido XML',7);
           SBPARAMETERS := FSBGETMASTERPARAMETERSFROMXML(XLAPPLICATION);
        ELSE
           UT_TRACE.TRACE('Aplicacion en modelo antiguo',7);
           NUCONFIG := FNUGETCONFIGBYEXECUTABLE(INUEXECUTABLE);
           SBPARAMETERS := FSBGETMASTERPARAMETERS(NUCONFIG);
        END IF;
           ONUSCHEDULEPROCESS := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
                                                    ('seq_ge_process_schedule');

           SBWHAT := CREATEWHAT(INUEXECUTABLE, ONUSCHEDULEPROCESS);
                                                    
           PREPARESCHEDULE(INUEXECUTABLE,
                         SBPARAMETERS,
                         SBWHAT,
                         NUDUMMY,
                         ONUSCHEDULEPROCESS);


        UT_TRACE.TRACE('Finaliza GE_BOSchedule.PrepareScheduleFWCPB',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END PREPARESCHEDULEFWCPB;




    PROCEDURE PREPARESCHEDULE
    (
        INUEXECUTABLE      IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ISBPARAMETERS      IN  GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE,
        ISBWHAT            IN  GE_PROCESS_SCHEDULE.WHAT%TYPE,
        ONUSCHEDULEPROCESS OUT GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE,
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE DEFAULT PKCONSTANTE.NULLNUM
    )
    IS
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.PrepareSchedule',7);

        IF (INUSCHEDULEPROCESS = PKCONSTANTE.NULLNUM) THEN
            ONUSCHEDULEPROCESS := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
                                                    ('seq_ge_process_schedule');
        ELSE
            ONUSCHEDULEPROCESS := INUSCHEDULEPROCESS;
        END IF;

        NUSCHEDULEPROCESSINMEMORY := -1;

        RCPROCESS_SCHEDULE.PROCESS_SCHEDULE_ID := ONUSCHEDULEPROCESS;
        RCPROCESS_SCHEDULE.EXECUTABLE_ID := INUEXECUTABLE;
        RCPROCESS_SCHEDULE.PARAMETERS_ := ISBPARAMETERS;
        RCPROCESS_SCHEDULE.LOG_USER := UT_SESSION.GETUSER;
        RCPROCESS_SCHEDULE.STATUS := CSBPREPARESCHEDULE;
        RCPROCESS_SCHEDULE.START_DATE_ := SYSDATE;
        RCPROCESS_SCHEDULE.WHAT := ISBWHAT;
        
        DAGE_PROCESS_SCHEDULE.INSRECORD(RCPROCESS_SCHEDULE);
        
        NUSCHEDULEPROCESSINMEMORY := ONUSCHEDULEPROCESS;

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.PrepareSchedule',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END PREPARESCHEDULE;

    























    
    PROCEDURE SCHEDULEPROCESS
    (
        INUSCHEDULEPROCESS  IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE,
        ISBFREQUENCY        IN  GE_PROCESS_SCHEDULE.FREQUENCY%TYPE,
        IDTNEXTDATE         IN  DBA_JOBS.NEXT_DATE%TYPE
    )
    IS
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
        
        PROCEDURE VALDATA IS
        BEGIN
            UT_TRACE.TRACE('Inicia GE_BOSchedule.ScheduleProcess.ValData',7);

            IF ((NOT FBLSHOWFREQUENCY( INUSCHEDULEPROCESS )) AND
                (ISBFREQUENCY NOT IN ( CSBSOLOUNAVEZ, CSBSOLOUNAVEZDH ))) THEN
                ERRORS.SETERROR(119382);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            
            
            
            IF ( ( ISBFREQUENCY = CSBSOLOUNAVEZDH ) AND
                DAGE_CALENDAR.FBLEXIST( TRUNC ( IDTNEXTDATE ), CNUPAIS ) AND
                DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( IDTNEXTDATE ), CNUPAIS ) = GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS') ) THEN
                
                
                ERRORS.SETERROR( 119324 );
                RAISE EX.CONTROLLED_ERROR;
            
            END IF;
            
            IF (RCPROCESS_SCHEDULE.STATUS <> CSBPREPARESCHEDULE) THEN
                ERRORS.SETERROR(119302,INUSCHEDULEPROCESS);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            IF (( ISBFREQUENCY IS NULL ) OR
                (LENGTH(ISBFREQUENCY) > 2)) THEN
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            UT_TRACE.TRACE('Finaliza GE_BOSchedule.ScheduleProcess.ValData',7);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALDATA;
        
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ScheduleProcess',7);
        
        DAGE_PROCESS_SCHEDULE.GETRECORD(INUSCHEDULEPROCESS,RCPROCESS_SCHEDULE);
        
    

        RCPROCESS_SCHEDULE.FREQUENCY := ISBFREQUENCY;
        RCPROCESS_SCHEDULE.START_DATE_ := IDTNEXTDATE;
        RCPROCESS_SCHEDULE.STATUS := CSBACTIVESCHEDULE;

        DBMS_JOB.SUBMIT
        (
            RCPROCESS_SCHEDULE.JOB,
            RCPROCESS_SCHEDULE.WHAT,
            IDTNEXTDATE,
            'GE_BOSchedule.fdtGetJobNextExeDate( to_date( ''' || TO_CHAR( IDTNEXTDATE, CSBDATE_FORMAT ) || ''', ''' || CSBDATE_FORMAT || ''' ), ''' || ISBFREQUENCY || ''' )'
        );

        RCPROCESS_SCHEDULE.LOG_USER := UT_SESSION.GETUSER;

        DAGE_PROCESS_SCHEDULE.UPDRECORD(RCPROCESS_SCHEDULE);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ScheduleProcess',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END SCHEDULEPROCESS;





    PROCEDURE SCHEDULEIMMEDIATELY
    (
        INUSCHEDULEPROCESS  IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ScheduleImmediately',7);

        SCHEDULEPROCESS(INUSCHEDULEPROCESS, CSBSOLOUNAVEZ, SYSDATE);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ScheduleImmediately',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END SCHEDULEIMMEDIATELY;





    PROCEDURE SCHEDULEDETAIL
    (
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE,
        INUSEQUENCE        IN  GE_PROC_SCHE_DETAIL.SEQUENCE%TYPE,
        ISBPARAMETER       IN  GE_PROC_SCHE_DETAIL.PARAMETER%TYPE
    )
    IS
        RCDETAIL    DAGE_PROC_SCHE_DETAIL.STYGE_PROC_SCHE_DETAIL;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ScheduleDetail',7);

        RCDETAIL.PROC_SCHE_DETAIL_ID := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
                                                          ('seq_ge_proc_sche_detail');
        RCDETAIL.PROCESS_SCHEDULE_ID := INUSCHEDULEPROCESS;
        RCDETAIL.SEQUENCE := INUSEQUENCE;
        RCDETAIL.PARAMETER := ISBPARAMETER;
        
        DAGE_PROC_SCHE_DETAIL.INSRECORD(RCDETAIL);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ScheduleDetail',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END SCHEDULEDETAIL;









    FUNCTION FBLSHOWFREQUENCY
    (
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    ) RETURN BOOLEAN
    IS
        NUCONFIG    GI_CONFIG.CONFIG_ID%TYPE;
        BLAPPXML    BOOLEAN;
        XLAPPLICATION XMLTYPE;
        SBALLOWFRECUENCY VARCHAR2(16);
        NUEXECUTABLE  SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE('Inicia GE_BOSchedule.fblShowFrequency',7);
      
      NUEXECUTABLE := DAGE_PROCESS_SCHEDULE.FNUGETEXECUTABLE_ID (INUSCHEDULEPROCESS);
        
      
      BLAPPXML := FW_BOPROCESSINSTANCE.BLISAPPXML(NUEXECUTABLE,XLAPPLICATION);

      IF (BLAPPXML) THEN
         UT_TRACE.TRACE('Aplicacion en modelo autocontenido XML',7);
         IF (XLAPPLICATION.EXISTSNODE('//ALLOW_FREQUENCY') < 1) THEN
            UT_TRACE.TRACE('Finaliza GE_BOSchedule.fblShowFrequency FALSE',7);
            RETURN FALSE;
          ELSE
           SBALLOWFRECUENCY := XLAPPLICATION.EXTRACT('//ALLOW_FREQUENCY/text()').GETSTRINGVAL();
           IF ( SBALLOWFRECUENCY = CSBYES) THEN
              UT_TRACE.TRACE('Finaliza GE_BOSchedule.fblShowFrequency TRUE',7);
              RETURN TRUE;
           ELSE
              UT_TRACE.TRACE('Finaliza GE_BOSchedule.fblShowFrequency FALSE',7);
              RETURN FALSE;
           END IF;
          END IF;
      ELSE
        NUCONFIG := FNUGETCONFIGBYEXECUTABLE(NUEXECUTABLE);
        
        IF (DAGI_CONFIG.FSBGETALLOW_FREQUENCY(NUCONFIG) = CSBYES) THEN
            UT_TRACE.TRACE('Finaliza GE_BOSchedule.fblShowFrequency',7);
            RETURN TRUE;
        END IF;
      END IF;
        UT_TRACE.TRACE('Finaliza GE_BOSchedule.fblShowFrequency',7);
        RETURN FALSE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END FBLSHOWFREQUENCY;





    FUNCTION FRFGETSCHEDULESBYAPLICATION
    (
        INUEXECUTABLE      IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE
    ) RETURN PKCONSTANTE.TYREFCURSOR
    IS
        CURFCURSOR PKCONSTANTE.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.frfGetSchedulesByAplication',7);

        CURFCURSOR := GE_BCPROCESS_SCHEDULE.FRFGETSCHEDULESBYAPLICATION(INUEXECUTABLE);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.frfGetSchedulesByAplication',7);
        
        RETURN CURFCURSOR;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END FRFGETSCHEDULESBYAPLICATION;





    PROCEDURE DROPSCHEDULE
    (
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
        
        PROCEDURE REMOVEJOB
        IS
        BEGIN
            DBMS_JOB.REMOVE(RCPROCESS_SCHEDULE.JOB);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                NULL;
            WHEN OTHERS THEN
                NULL;
        END;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.DropSchedule',7);

        DAGE_PROCESS_SCHEDULE.GETRECORD(INUSCHEDULEPROCESS,RCPROCESS_SCHEDULE);

        REMOVEJOB();
        
        RCPROCESS_SCHEDULE.STATUS := CSBDELETESCHEDULE;
        RCPROCESS_SCHEDULE.JOB := PKCONSTANTE.NULLNUM;
        
        DAGE_PROCESS_SCHEDULE.UPDRECORD(RCPROCESS_SCHEDULE);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.DropSchedule',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END DROPSCHEDULE;





    PROCEDURE INACTIVESCHEDULE
    (
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;

        PROCEDURE REMOVEJOB
        IS
        BEGIN
            DBMS_JOB.REMOVE(RCPROCESS_SCHEDULE.JOB);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                NULL;
            WHEN OTHERS THEN
                NULL;
        END;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.InactiveSchedule',7);

        DAGE_PROCESS_SCHEDULE.GETRECORD(INUSCHEDULEPROCESS,RCPROCESS_SCHEDULE);

        REMOVEJOB();

        RCPROCESS_SCHEDULE.STATUS := CSBINACTIVESCHEDULE;
        RCPROCESS_SCHEDULE.JOB := PKCONSTANTE.NULLNUM;

        DAGE_PROCESS_SCHEDULE.UPDRECORD(RCPROCESS_SCHEDULE);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.InactiveSchedule',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END INACTIVESCHEDULE;





    PROCEDURE DELETESCHEDULE
    (
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
        PROCEDURE VALDATA IS
        BEGIN
            UT_TRACE.TRACE('Inicia GE_BOSchedule.DeleteSchedule.ValData',7);

            IF (DAGE_PROCESS_SCHEDULE.FSBGETSTATUS(INUSCHEDULEPROCESS) <> CSBPREPARESCHEDULE) THEN
                
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            UT_TRACE.TRACE('Finaliza GE_BOSchedule.DeleteSchedule.ValData',7);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALDATA;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.DeleteSchedule',7);

        VALDATA();

        GE_BCPROC_SCHE_DETAIL.DELETESCHEDULEDETAILS(INUSCHEDULEPROCESS);
        
        DAGE_PROCESS_SCHEDULE.DELRECORD(INUSCHEDULEPROCESS);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.DeleteSchedule',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END DELETESCHEDULE;




    PROCEDURE ADDLOGTOSCHEDULEPROCESS
    (
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE,
        INUTHREADS         IN  NUMBER,
        ONULOGPROCESS      OUT GE_LOG_PROCESS.LOG_PROCESS_ID%TYPE
    )
    IS
        RCLOGPROCESS    DAGE_LOG_PROCESS.STYGE_LOG_PROCESS;

    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.AddLogToScheduleProcess',7);

        ONULOGPROCESS := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL('seq_GE_Log_Process');
        RCLOGPROCESS.LOG_PROCESS_ID := ONULOGPROCESS;
        RCLOGPROCESS.PROCESS_SCHEDULE_ID := INUSCHEDULEPROCESS;
        RCLOGPROCESS.STATUS := CSBSTARTEDLOG; 
        RCLOGPROCESS.THREADS := INUTHREADS;
        RCLOGPROCESS.DATE_ := SYSDATE;
        RCLOGPROCESS.SESSION_ID := UT_SESSION.GETSESSIONID;
        RCLOGPROCESS.TERMINAL_ID := UT_SESSION.GETMACHINE;
        RCLOGPROCESS.USER_ID := SA_BOSYSTEM.GETSYSTEMUSERID;

        DAGE_LOG_PROCESS.INSRECORD(RCLOGPROCESS);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.AddLogToScheduleProcess',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END ADDLOGTOSCHEDULEPROCESS;




    PROCEDURE CHANGELOGPROCESSSTATUS
    (
        INULOGPROCESS IN  GE_LOG_PROCESS.LOG_PROCESS_ID%TYPE,
        ISBNEWSTATE   IN  GE_LOG_PROCESS.STATUS%TYPE
    )
    IS
        RCLOGPROCESS    DAGE_LOG_PROCESS.STYGE_LOG_PROCESS;
    
        PROCEDURE VALDATA IS
        BEGIN
            UT_TRACE.TRACE('Inicia GE_BOSchedule.ChangeLogProcessStatus.ValData',7);
            
            IF ((LENGTH(ISBNEWSTATE) > 1) OR (ISBNEWSTATE IS NULL)) THEN
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            UT_TRACE.TRACE('Finaliza GE_BOSchedule.ChangeLogProcessStatus.ValData',7);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALDATA;

    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ChangeLogProcessStatus',7);

        VALDATA();
        
        DAGE_LOG_PROCESS.GETRECORD(INULOGPROCESS,RCLOGPROCESS);

        RCLOGPROCESS.STATUS := ISBNEWSTATE;

        DAGE_LOG_PROCESS.UPDRECORD(RCLOGPROCESS);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ChangeLogProcessStatus',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END CHANGELOGPROCESSSTATUS;
	
	



























    PROCEDURE REPROGRAMPROCESS
    (
        INUSCHEDULEPROCESS IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE,
        IDTNEWDATE         IN  DBA_JOBS.NEXT_DATE%TYPE,
        ONUSCHEDULEPROCESS OUT GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
        
        TBDETALLES          DAGE_PROC_SCHE_DETAIL.TYTBGE_PROC_SCHE_DETAIL;
        IXDETALLES          NUMBER;
        
        PROCEDURE VALDATA IS
        BEGIN
            UT_TRACE.TRACE('Inicia GE_BOSchedule.ReprogramProcess.ValData',7);

            IF (IDTNEWDATE < SYSDATE) THEN
                ERRORS.SETERROR(119322);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            IF (RCPROCESS_SCHEDULE.STATUS = CSBPREPARESCHEDULE) THEN
                ERRORS.SETERROR(119543);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            
            
            
            IF ( ( RCPROCESS_SCHEDULE.FREQUENCY = CSBSOLOUNAVEZDH ) AND
                DAGE_CALENDAR.FBLEXIST( TRUNC ( IDTNEWDATE ), CNUPAIS ) AND
                DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( IDTNEWDATE ), CNUPAIS ) = GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS') ) THEN

                
                ERRORS.SETERROR( 119324 );
                RAISE EX.CONTROLLED_ERROR;

            END IF;
            
            UT_TRACE.TRACE('Finaliza GE_BOSchedule.ReprogramProcess.ValData',7);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALDATA;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ReprogramProcess',7);

        DAGE_PROCESS_SCHEDULE.GETRECORD(INUSCHEDULEPROCESS,RCPROCESS_SCHEDULE);

        VALDATA();



        ONUSCHEDULEPROCESS := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
                                                    ('seq_ge_process_schedule');

        RCPROCESS_SCHEDULE.PROCESS_SCHEDULE_ID := ONUSCHEDULEPROCESS;
        RCPROCESS_SCHEDULE.START_DATE_ := IDTNEWDATE;
        RCPROCESS_SCHEDULE.STATUS := CSBACTIVESCHEDULE;
        RCPROCESS_SCHEDULE.WHAT := CREATEWHAT(
                                                RCPROCESS_SCHEDULE.EXECUTABLE_ID,
                                                ONUSCHEDULEPROCESS
                                             );

        DBMS_JOB.SUBMIT
        (
            RCPROCESS_SCHEDULE.JOB,
            RCPROCESS_SCHEDULE.WHAT,
            IDTNEWDATE,
            'GE_BOSchedule.fdtGetJobNextExeDate( to_date( ''' || TO_CHAR( IDTNEWDATE, CSBDATE_FORMAT ) || ''', ''' || CSBDATE_FORMAT || ''' ), ''' || RCPROCESS_SCHEDULE.FREQUENCY || ''' )'
        );

        RCPROCESS_SCHEDULE.LOG_USER := UT_SESSION.GETUSER;

        DAGE_PROCESS_SCHEDULE.INSRECORD(RCPROCESS_SCHEDULE);

        GE_BCPROC_SCHE_DETAIL.GETSCHEDULEDETAILS(INUSCHEDULEPROCESS,TBDETALLES);
        
        IXDETALLES := TBDETALLES.FIRST;
        LOOP
          EXIT WHEN IXDETALLES IS NULL;
            TBDETALLES(IXDETALLES).PROC_SCHE_DETAIL_ID := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
                                                                      ('seq_ge_proc_sche_detail');
            TBDETALLES(IXDETALLES).PROCESS_SCHEDULE_ID := ONUSCHEDULEPROCESS;
            DAGE_PROC_SCHE_DETAIL.INSRECORD(TBDETALLES(IXDETALLES));
            IXDETALLES := TBDETALLES.NEXT(IXDETALLES);
        END LOOP;

        
        GE_BOSCHEDULE.INACTIVESCHEDULE(INUSCHEDULEPROCESS);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ReprogramProcess',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END REPROGRAMPROCESS;




	FUNCTION FNUGETSCHEDULEINMEMORY
    RETURN GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    IS
    BEGIN
        RETURN NUSCHEDULEPROCESSINMEMORY;
    END FNUGETSCHEDULEINMEMORY;
    
    
    
















    
    PROCEDURE INSTANCESCHEDULE
    (
        INUPROCESSSCHEDULEID        IN      GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
    BEGIN

        UT_TRACE.TRACE('Inicio: [GE_BOSchedule.InstanceSchedule]');

        
        
        NUSCHEDULEPROCESSINMEMORY := INUPROCESSSCHEDULEID;

        UT_TRACE.TRACE('Fin: [GE_BOSchedule.InstanceSchedule]');

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.InstanceSchedule]');
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.InstanceSchedule]');
            RAISE EX.CONTROLLED_ERROR;

    END INSTANCESCHEDULE;
    
    
    

























    FUNCTION FDTGETJOBNEXTEXEDATE
    (
        IDTPROCESSSTARTDATE     IN      GE_PROCESS_SCHEDULE.START_DATE_%TYPE,
        ISBPROCESSFREQUENCY     IN      GE_PROCESS_SCHEDULE.FREQUENCY%TYPE
    ) RETURN DATE
    IS
        
        
        DTJOBNEXTEXEDATE        USER_JOBS.NEXT_DATE%TYPE;
        
        
        NUMONTHSBETWEENDATES    NUMBER;
        
        
        NUYEARSBETWEENDATES     NUMBER;

    BEGIN

        UT_TRACE.TRACE('Inicio: [GE_BOSchedule.fdtGetJobNextExeDate]');

        
        IF ( ISBPROCESSFREQUENCY IN ( CSBDIARIO, CSBDIARIODH ) ) THEN

            DTJOBNEXTEXEDATE :=
                TO_DATE
                (
                    TO_CHAR( SYSDATE, 'DD-MM-YYYY' ) || ' ' || TO_CHAR( IDTPROCESSSTARTDATE, 'HH24:MI:SS' ),
                    'DD-MM-YYYY HH24:MI:SS'
                ) + 1;
                
        ELSIF ( ISBPROCESSFREQUENCY IN ( CSBSEMANAL, CSBSEMANALDH ) ) THEN
        
            DTJOBNEXTEXEDATE :=
                NEXT_DAY
                (
                    TO_DATE
                    (
                        TO_CHAR( SYSDATE, 'DD-MM-YYYY' ) || ' ' || TO_CHAR( IDTPROCESSSTARTDATE, 'HH24:MI:SS' ),
                        'DD-MM-YYYY HH24:MI:SS'
                    ),
                    TO_CHAR( IDTPROCESSSTARTDATE, 'DY' )
                );

        ELSIF ( ISBPROCESSFREQUENCY IN ( CSBMENSUAL, CSBMENSUALDH ) ) THEN

            
            
            NUMONTHSBETWEENDATES := CEIL
            (
                MONTHS_BETWEEN
                (
                    SYSDATE,
                    IDTPROCESSSTARTDATE
                )
            );
            
            
            
            IF ( NUMONTHSBETWEENDATES <= 0 ) THEN
                NUMONTHSBETWEENDATES := 1;
            END IF;

            DTJOBNEXTEXEDATE :=
                ADD_MONTHS
                (
                    IDTPROCESSSTARTDATE,
                    NUMONTHSBETWEENDATES
                );
                
        ELSIF ( ISBPROCESSFREQUENCY IN ( CSBANUAL, CSBANUALDH ) ) THEN

            
            
            NUYEARSBETWEENDATES := CEIL
            (
                MONTHS_BETWEEN
                (
                    SYSDATE,
                    IDTPROCESSSTARTDATE
                ) / 12
            );
            
            
            
            IF ( NUYEARSBETWEENDATES = 0 ) THEN
                NUYEARSBETWEENDATES := 1;
            END IF;


            DTJOBNEXTEXEDATE :=
                ADD_MONTHS
                (
                    IDTPROCESSSTARTDATE,
                    ( NUYEARSBETWEENDATES * 12 )
                );

        ELSE

            NULL;
        
        END IF;
        
        
        
        IF ( ISBPROCESSFREQUENCY IN ( CSBDIARIODH, CSBSEMANALDH, CSBMENSUALDH, CSBANUALDH ) ) THEN

            
            WHILE ( DAGE_CALENDAR.FBLEXIST( TRUNC ( DTJOBNEXTEXEDATE ), CNUPAIS ) AND
                DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( DTJOBNEXTEXEDATE ), CNUPAIS ) = GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS') ) LOOP

                
                DTJOBNEXTEXEDATE := DTJOBNEXTEXEDATE + 1;

            END LOOP;
            
        END IF;

        UT_TRACE.TRACE('Fin: [GE_BOSchedule.fdtGetJobNextExeDate]');
        
        RETURN DTJOBNEXTEXEDATE;

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fdtGetJobNextExeDate]');
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fdtGetJobNextExeDate]');
            RAISE EX.CONTROLLED_ERROR;

    END FDTGETJOBNEXTEXEDATE;
    



    PROCEDURE PREPAREGENERICSCHEDULE
    (
        INUEXECUTABLE      IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ISBPARAMETERS      IN  GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE,
        ONUSCHEDULEPROCESS OUT GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
        SBPARAMETERS        GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE;
        SBWHAT              GE_PROCESS_SCHEDULE.WHAT%TYPE;
        NUDUMMY             GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.PrepareGenericSchedule',7);

        ONUSCHEDULEPROCESS := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
                                                    ('seq_ge_process_schedule');

        SBWHAT := CREATEWHAT(INUEXECUTABLE, ONUSCHEDULEPROCESS);

        PREPARESCHEDULE(INUEXECUTABLE,
                        ISBPARAMETERS,
                        SBWHAT,
                        NUDUMMY,
                        ONUSCHEDULEPROCESS);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.PrepareScheduleFWCPB',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END PREPAREGENERICSCHEDULE;
	
	

    














    PROCEDURE CONDITIONSCHEDULED
    (
        INUPROCESSCHEDID        IN GE_PROC_SCHE_COND.PROCESS_SCHEDULED_ID%TYPE,
        INUFRECUENCIVALUE       IN GE_PROC_SCHE_COND.FREQUENCY_VALUE%TYPE,
        INUYEARCOND             IN GE_PROC_SCHE_COND.YEAR_COND%TYPE,
        ISBMONTHRCOND           IN GE_PROC_SCHE_COND.MONTHS_COND%TYPE,
        ISBWEEKCOND             IN GE_PROC_SCHE_COND.WEEK_COND%TYPE,
        INUDAYINITIALCOND       IN GE_PROC_SCHE_COND.DAY_INITIAL_COND%TYPE,
        INUDAYFINALCOND         IN GE_PROC_SCHE_COND.DAY_FINAL_COND%TYPE,
        INUHOURINITIALCOND      IN GE_PROC_SCHE_COND.HOUR_INITIAL_COND%TYPE,
        INUHOURFINALCOND        IN GE_PROC_SCHE_COND.HOUR_FINAL_COND%TYPE,
        INUMINUTESINITIALCOND   IN GE_PROC_SCHE_COND.MINUTES_INITIAL_COND%TYPE,
        INUMINUTESFINALCOND     IN GE_PROC_SCHE_COND.MINUTES_FINAL_COND%TYPE
    )
    IS
    
        NUPROCSCHECODID         NUMBER;
        RCGEPROCSCHECOND        DAGE_PROC_SCHE_COND.STYGE_PROC_SCHE_COND;
    BEGIN
        
        
        
        NUPROCSCHECODID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_PROC_SCHE_COND','SEQ_GE_PROC_SCHE_COND');
        
        RCGEPROCSCHECOND.PROC_SCHE_COND_ID      := NUPROCSCHECODID;
        RCGEPROCSCHECOND.PROCESS_SCHEDULED_ID   := INUPROCESSCHEDID;
        RCGEPROCSCHECOND.FREQUENCY_VALUE        := INUFRECUENCIVALUE;
        RCGEPROCSCHECOND.YEAR_COND              := INUYEARCOND;
        RCGEPROCSCHECOND.MONTHS_COND            := ISBMONTHRCOND;
        RCGEPROCSCHECOND.WEEK_COND              := ISBWEEKCOND;
        RCGEPROCSCHECOND.DAY_INITIAL_COND       := INUDAYINITIALCOND;
        RCGEPROCSCHECOND.DAY_FINAL_COND         := INUDAYFINALCOND;
        RCGEPROCSCHECOND.HOUR_INITIAL_COND      := INUHOURINITIALCOND;
        RCGEPROCSCHECOND.HOUR_FINAL_COND        := INUHOURFINALCOND;
        RCGEPROCSCHECOND.MINUTES_INITIAL_COND   := INUMINUTESINITIALCOND;
        RCGEPROCSCHECOND.MINUTES_FINAL_COND     := INUMINUTESFINALCOND;
        
        DAGE_PROC_SCHE_COND.INSRECORD(RCGEPROCSCHECOND);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CONDITIONSCHEDULED;


    














    FUNCTION FRCFIRSTCONDPROCESCHE
    (
        INUPROCESSSCHEDUID      IN GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    ) RETURN DAGE_PROC_SCHE_COND.STYGE_PROC_SCHE_COND
    IS
        
        NUPROCSHECONDID     NUMBER;
        
        CURSOR CUGEPROCSHECOND( INUPROCESSCHEDUID IN NUMBER )
        IS
            SELECT GE_PROC_SCHE_COND.*,GE_PROC_SCHE_COND.ROWID
            FROM GE_PROC_SCHE_COND
            WHERE PROCESS_SCHEDULED_ID = INUPROCESSCHEDUID;
        
        RCPROCSCHCOND       DAGE_PROC_SCHE_COND.STYGE_PROC_SCHE_COND;
        
    BEGIN
        

        
        IF CUGEPROCSHECOND%ISOPEN THEN CLOSE CUGEPROCSHECOND; END IF;

        
        OPEN CUGEPROCSHECOND(INUPROCESSSCHEDUID);
        FETCH CUGEPROCSHECOND INTO RCPROCSCHCOND;
        CLOSE CUGEPROCSHECOND;

        RETURN RCPROCSCHCOND;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUGEPROCSHECOND%ISOPEN THEN CLOSE CUGEPROCSHECOND; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF CUGEPROCSHECOND%ISOPEN THEN CLOSE CUGEPROCSHECOND; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FRCFIRSTCONDPROCESCHE;




    















    PROCEDURE UPDCONDITIONSCHEDULED
    (
        INUPROCESSSCHEID        IN GE_PROC_SCHE_COND.PROCESS_SCHEDULED_ID%TYPE,
        INUFREQUENCYVALUE       IN GE_PROC_SCHE_COND.FREQUENCY_VALUE%TYPE,
        INUYEARCOND             IN GE_PROC_SCHE_COND.YEAR_COND%TYPE,
        ISBMONTHRCOND           IN GE_PROC_SCHE_COND.MONTHS_COND%TYPE,
        ISBWEEKCOND             IN GE_PROC_SCHE_COND.WEEK_COND%TYPE,
        INUDAYINITIALCOND       IN GE_PROC_SCHE_COND.DAY_INITIAL_COND%TYPE,
        INUDAYFINALCOND         IN GE_PROC_SCHE_COND.DAY_FINAL_COND%TYPE,
        INUHOURINITIALCOND      IN GE_PROC_SCHE_COND.HOUR_INITIAL_COND%TYPE,
        INUHOURFINALCOND        IN GE_PROC_SCHE_COND.HOUR_FINAL_COND%TYPE,
        INUMINUTESINITIALCOND   IN GE_PROC_SCHE_COND.MINUTES_INITIAL_COND%TYPE,
        INUMINUTESFINALCOND     IN GE_PROC_SCHE_COND.MINUTES_FINAL_COND%TYPE
    )
    IS
        
        RCGEPROCSCHECOND        DAGE_PROC_SCHE_COND.STYGE_PROC_SCHE_COND;
        NUPROCSCHECOND          NUMBER; 

        RCPROCSCCONAUX          DAGE_PROC_SCHE_COND.STYGE_PROC_SCHE_COND;
    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOSchedule.UpdConditionScheduled',5);
        
        
        
        RCPROCSCCONAUX := FRCFIRSTCONDPROCESCHE(INUPROCESSSCHEID);
        
        IF (RCPROCSCCONAUX.PROC_SCHE_COND_ID IS NULL ) THEN
            NUPROCSCHECOND := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_PROC_SCHE_COND','SEQ_GE_PROC_SCHE_COND');
        ELSE
            
            NUPROCSCHECOND := RCPROCSCCONAUX.PROC_SCHE_COND_ID;
        END IF;
        
        
        RCGEPROCSCHECOND.PROC_SCHE_COND_ID      := NUPROCSCHECOND;
        RCGEPROCSCHECOND.PROCESS_SCHEDULED_ID   := INUPROCESSSCHEID;
        RCGEPROCSCHECOND.FREQUENCY_VALUE        := INUFREQUENCYVALUE;
        RCGEPROCSCHECOND.YEAR_COND              := INUYEARCOND;
        RCGEPROCSCHECOND.MONTHS_COND            := ISBMONTHRCOND;
        RCGEPROCSCHECOND.WEEK_COND              := ISBWEEKCOND;
        RCGEPROCSCHECOND.DAY_INITIAL_COND       := INUDAYINITIALCOND;
        RCGEPROCSCHECOND.DAY_FINAL_COND         := INUDAYFINALCOND;
        RCGEPROCSCHECOND.HOUR_INITIAL_COND      := INUHOURINITIALCOND;
        RCGEPROCSCHECOND.HOUR_FINAL_COND        := INUHOURFINALCOND;
        RCGEPROCSCHECOND.MINUTES_INITIAL_COND   := INUMINUTESINITIALCOND;
        RCGEPROCSCHECOND.MINUTES_FINAL_COND     := INUMINUTESFINALCOND;

        IF (RCPROCSCCONAUX.PROC_SCHE_COND_ID IS NULL ) THEN
            
            DAGE_PROC_SCHE_COND.INSRECORD(RCGEPROCSCHECOND);
        ELSE
            
            DAGE_PROC_SCHE_COND.UPDRECORD(RCGEPROCSCHECOND);
        END IF;

        UT_TRACE.TRACE('FIN GE_BOSchedule.UpdConditionScheduled',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDCONDITIONSCHEDULED;

    

















    PROCEDURE SCHEDULEPROCESSGEMPS
    (
        INUSCHEDULEPROCESS  IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
    )
    IS
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ScheduleProcessGEMPS',7);

        DAGE_PROCESS_SCHEDULE.GETRECORD(INUSCHEDULEPROCESS,RCPROCESS_SCHEDULE);
        
        
        
        
        
        





        DBMS_JOB.SUBMIT
        (
            RCPROCESS_SCHEDULE.JOB,
            RCPROCESS_SCHEDULE.WHAT,
            RCPROCESS_SCHEDULE.START_DATE_,
            'GE_BOSchedule.fdtGetNextExeDateByCondFrq('||INUSCHEDULEPROCESS||',sysdate)'
        );
        
        RCPROCESS_SCHEDULE.STATUS := CSBACTIVESCHEDULE;
        RCPROCESS_SCHEDULE.LOG_USER := UT_SESSION.GETUSER;

        DAGE_PROCESS_SCHEDULE.UPDRECORD(RCPROCESS_SCHEDULE);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ScheduleProcessGEMPS',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END SCHEDULEPROCESSGEMPS;
	

	






















    PROCEDURE REPROGRAMPROCESSGEMPS
    (
        INUPROCSCHEDID  IN      GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE,
        IDTNEWDATE      IN      GE_PROCESS_SCHEDULE.START_DATE_%TYPE,
        ISBFREQUENCY    IN      GE_PROCESS_SCHEDULE.FREQUENCY%TYPE
    )
    IS
        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;

        PROCEDURE VALDATA IS
        BEGIN
            UT_TRACE.TRACE('Inicia GE_BOSchedule.ReprogramProcessGEMPS.ValData',7);

            IF (IDTNEWDATE < SYSDATE) THEN
                ERRORS.SETERROR(119322);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            IF (RCPROCESS_SCHEDULE.STATUS = CSBPREPARESCHEDULE) THEN
                ERRORS.SETERROR(119543);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            
            IF ( ( ISBFREQUENCY = CSBSOLOUNAVEZDH ) AND
                DAGE_CALENDAR.FBLEXIST( TRUNC ( IDTNEWDATE ), CNUPAIS ) AND
                DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( IDTNEWDATE ), CNUPAIS ) = GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS') ) THEN

                
                ERRORS.SETERROR( 119324 );
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            UT_TRACE.TRACE('Finaliza GE_BOSchedule.ReprogramProcessGEMPS.ValData',7);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALDATA;
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ReprogramProcessGEMPS',7);

        VALDATA();

        
        
        
        

        GE_BOSCHEDULE.INACTIVESCHEDULE(INUPROCSCHEDID);

        DAGE_PROCESS_SCHEDULE.GETRECORD(INUPROCSCHEDID,RCPROCESS_SCHEDULE);
        RCPROCESS_SCHEDULE.START_DATE_ := IDTNEWDATE;
        RCPROCESS_SCHEDULE.FREQUENCY := ISBFREQUENCY;
        RCPROCESS_SCHEDULE.STATUS := CSBACTIVESCHEDULE;

        DBMS_JOB.SUBMIT
        (
            RCPROCESS_SCHEDULE.JOB,
            RCPROCESS_SCHEDULE.WHAT,
            IDTNEWDATE,
            'GE_BOSchedule.fdtGetNextExeDateByCondFrq('||INUPROCSCHEDID||',sysdate)'
        );

        RCPROCESS_SCHEDULE.LOG_USER := UT_SESSION.GETUSER;

        DAGE_PROCESS_SCHEDULE.UPDRECORD(RCPROCESS_SCHEDULE);

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ReprogramProcessGEMPS',7);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END REPROGRAMPROCESSGEMPS;

    


















    FUNCTION FBLEXISTSNUMINLIST
    (
        SBDATOAENC      IN VARCHAR2,
        SBLISTAVAR2     IN VARCHAR2
    ) RETURN BOOLEAN
    IS
        
        TBSTRING        UT_STRING.TYTB_STRING;
        SBDATNUMCHAR    VARCHAR2(30);

    BEGIN
        UT_TRACE.TRACE('[INICIO] ge_boSchedule.fblExistsNumInList', 14);
        
        SBDATNUMCHAR := TO_CHAR(TO_NUMBER(SBDATOAENC));

        UT_STRING.EXTSTRING(SBLISTAVAR2,',',TBSTRING);
        
        FOR INDC IN 1 .. TBSTRING.COUNT LOOP
            IF TBSTRING.EXISTS(INDC) THEN
                IF TBSTRING(INDC) = SBDATNUMCHAR THEN
                    RETURN TRUE;
                END IF;
            END IF;
        END LOOP;
        
        RETURN FALSE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    


    














    FUNCTION FNUDIASTOTALESMES
    (
        IDTFECHAREF     DATE
    ) RETURN NUMBER
    IS
        
    BEGIN
        
        RETURN TO_NUMBER(TO_CHAR(LAST_DAY(IDTFECHAREF),'DD'));
    END;


    
















    FUNCTION FDTDATENEXFRQVAL
    (
        IDTFECHAINICIAL IN  DATE,
        INUFRECUENVALUE IN  NUMBER,
        ISBFRECUENUNID  IN  VARCHAR2
    ) RETURN DATE
    IS
        
        DTFECHAPROXI    DATE;
    BEGIN
        
        UT_TRACE.TRACE('Inicio: [GE_BOSchedule.fdtDateNexFrqVal]',9);
        
        
        
        
        DTFECHAPROXI := IDTFECHAINICIAL;

        IF (ISBFRECUENUNID = CSBMINUTOS OR ISBFRECUENUNID = CSBMINUTOSDH) THEN
            
            DTFECHAPROXI  := DTFECHAPROXI + INUFRECUENVALUE / (24*60);
        ELSIF (ISBFRECUENUNID = CSBHORAS OR ISBFRECUENUNID = CSBHORASDH) THEN
            
            DTFECHAPROXI  := DTFECHAPROXI + INUFRECUENVALUE / 24;
        ELSIF (ISBFRECUENUNID = CSBDIARIO OR ISBFRECUENUNID = CSBDIARIODH) THEN
            
            DTFECHAPROXI  := DTFECHAPROXI + INUFRECUENVALUE;
        ELSIF (ISBFRECUENUNID = CSBSEMANAL OR ISBFRECUENUNID = CSBSEMANALDH) THEN
            
            DTFECHAPROXI  := DTFECHAPROXI + INUFRECUENVALUE * 7;
        ELSIF (ISBFRECUENUNID = CSBMENSUAL OR ISBFRECUENUNID = CSBMENSUALDH) THEN
            
            DTFECHAPROXI  := ADD_MONTHS(DTFECHAPROXI,INUFRECUENVALUE);
        ELSIF (ISBFRECUENUNID = CSBANUAL OR ISBFRECUENUNID = CSBANUALDH) THEN
            
            DTFECHAPROXI  := ADD_MONTHS(DTFECHAPROXI,INUFRECUENVALUE*12);
        END IF;
        

        UT_TRACE.TRACE('FIN: [GE_BOSchedule.fdtDateNexFrqVal]',9);

        RETURN DTFECHAPROXI;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fdtDateNexFrqVal]',8);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fdtDateNexFrqVal]',8);
            RAISE EX.CONTROLLED_ERROR;
    END FDTDATENEXFRQVAL;
    
    
    














    FUNCTION FDTGETMONTHNEXTVALID
    (
        IDTFECHAINICIAL     IN DATE,
        ISBLISTAMESES       IN VARCHAR2
    ) RETURN DATE
    IS
        
        TBSTRING        UT_STRING.TYTB_STRING;
        NUMESFECHA      NUMBER;
        CANTMESESUM     NUMBER;
        
    BEGIN
        
        UT_STRING.EXTSTRING(ISBLISTAMESES,',',TBSTRING);

        NUMESFECHA := TO_NUMBER(TO_CHAR(IDTFECHAINICIAL,'MM'));

        
        
        FOR INDC IN 1 .. TBSTRING.COUNT LOOP
            IF TBSTRING.EXISTS(INDC) THEN
                IF NUMESFECHA < TO_NUMBER(TBSTRING(INDC)) THEN
                    RETURN ADD_MONTHS(IDTFECHAINICIAL, TO_NUMBER(TBSTRING(INDC)) - NUMESFECHA );
                END IF;
            END IF;
        END LOOP;
        
        
        
        
        IF (ISBLISTAMESES IS NOT NULL) THEN
            
            CANTMESESUM := MOD(12 - NUMESFECHA + TO_NUMBER(TBSTRING(1)),12);
            RETURN ADD_MONTHS(IDTFECHAINICIAL,CANTMESESUM);
        END IF;



        RETURN IDTFECHAINICIAL;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTGETMONTHNEXTVALID;

    

















    FUNCTION FDTGETWEEKNEXTVALID
    (
        IDTFECHAINICIAL     IN DATE,
        ISBLISTADIASEMANA   IN VARCHAR2
    ) RETURN DATE
    IS
        
        TBSTRING        UT_STRING.TYTB_STRING;
        NUDIAFECHA      NUMBER;
        CANTASUM        NUMBER;

    BEGIN
        
        UT_STRING.EXTSTRING(ISBLISTADIASEMANA,',',TBSTRING);

        NUDIAFECHA := TO_NUMBER(TO_CHAR(IDTFECHAINICIAL,'D')) -1;

        
        
        FOR INDC IN 1 .. TBSTRING.COUNT LOOP
            IF TBSTRING.EXISTS(INDC) THEN
                IF NUDIAFECHA  < TO_NUMBER(TBSTRING(INDC)) THEN
                    RETURN (IDTFECHAINICIAL + (TO_NUMBER(TBSTRING(INDC)) - NUDIAFECHA ) );
                END IF;
            END IF;
        END LOOP;

        
        
        
        IF (ISBLISTADIASEMANA IS NOT NULL) THEN
            
            CANTASUM := MOD(7 - NUDIAFECHA + TO_NUMBER(TBSTRING(1)),7);
            RETURN IDTFECHAINICIAL + CANTASUM;
        END IF;

        RETURN IDTFECHAINICIAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTGETWEEKNEXTVALID;
    

    



























    FUNCTION FDTGETDATETRUNCBYFRECUEN
    (
        IDTFECHAINICIO      IN DATE,
        ISBFREQUENCY        IN GE_PROCESS_SCHEDULE.FREQUENCY%TYPE,
        ISBMONTHCOND        IN GE_PROC_SCHE_COND.MONTHS_COND%TYPE,
        ISBWEEKCOND         IN GE_PROC_SCHE_COND.WEEK_COND%TYPE,
        INUDAYINITIAL       IN GE_PROC_SCHE_COND.DAY_INITIAL_COND%TYPE,
        INUDAYFINAL         IN GE_PROC_SCHE_COND.DAY_FINAL_COND%TYPE,
        INUHOURINITIAL      IN GE_PROC_SCHE_COND.HOUR_INITIAL_COND%TYPE,
        INUHOURFINAL        IN GE_PROC_SCHE_COND.HOUR_FINAL_COND%TYPE,
        INUMINUTINITIAL     IN GE_PROC_SCHE_COND.MINUTES_INITIAL_COND%TYPE,
        INUMINUTFINAL       IN GE_PROC_SCHE_COND.MINUTES_FINAL_COND%TYPE
    ) RETURN DATE
    IS
        
        DTFECHAPROXI    DATE;
        DTFECHAAUX      DATE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO: [GE_BOSchedule.fdtGetDateTruncByFrecuen]',9);
        
        DTFECHAPROXI := IDTFECHAINICIO;

        
        IF (  ISBFREQUENCY = CSBDIARIO OR ISBFREQUENCY = CSBDIARIODH OR
              ISBFREQUENCY = CSBSEMANAL OR ISBFREQUENCY = CSBSEMANALDH OR
              ISBFREQUENCY = CSBMENSUAL OR ISBFREQUENCY = CSBMENSUALDH OR
              ISBFREQUENCY = CSBANUAL OR ISBFREQUENCY = CSBANUALDH
        ) THEN
            
            IF (  INUHOURINITIAL IS NOT NULL OR
                  INUHOURFINAL IS NOT NULL OR
                  INUMINUTINITIAL IS NOT NULL OR
                  INUMINUTFINAL IS NOT NULL ) THEN
                DTFECHAPROXI := TRUNC(DTFECHAPROXI);
            END IF;
        END IF;

        
        IF ( ISBFREQUENCY = CSBMENSUAL OR ISBFREQUENCY = CSBMENSUALDH OR
                ISBFREQUENCY = CSBANUAL OR ISBFREQUENCY = CSBANUALDH
        ) THEN
            
            
            IF (  ISBWEEKCOND IS NOT NULL OR
                  INUDAYINITIAL IS NOT NULL OR
                  INUDAYFINAL IS NOT NULL ) THEN
                DTFECHAPROXI := TO_DATE('01/'||TO_CHAR(DTFECHAPROXI, 'MM/YYYY HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS');
            END IF;
        END IF;
        
        IF (ISBFREQUENCY = CSBANUAL OR ISBFREQUENCY = CSBANUALDH) THEN
            
            
            IF (ISBMONTHCOND IS NOT NULL ) THEN
                DTFECHAPROXI := TO_DATE('01/01/'||TO_CHAR(DTFECHAPROXI, 'YYYY HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS');
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN: [GE_BOSchedule.fdtGetDateTruncByFrecuen]',9);

        RETURN DTFECHAPROXI;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTGETDATETRUNCBYFRECUEN;


    
























    FUNCTION FDTGETNEXTEXEDATEBYCONDFRQ
    (
        INUPROCESSSCHEID    IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE,
        IDTFECHAINICIAL     IN  DATE DEFAULT SYSDATE
    ) RETURN DATE
    IS
        
        DTPROXIMAFECHA      DATE;
        RCPROCESSCHE        DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
        RCSCHECOND          DAGE_PROC_SCHE_COND.STYGE_PROC_SCHE_COND;

        
        NUVALUEFREQ         NUMBER;
        BLEXISCOND          BOOLEAN := FALSE; 
        BLFOUNDDATE        BOOLEAN;
        BLDISABLEDSCHED    BOOLEAN;
    BEGIN
        
        UT_TRACE.TRACE('Inicio: [GE_BOSchedule.fdtGetNextExeDateByCondFrq]',5);

        
        DAGE_PROCESS_SCHEDULE.GETRECORD(INUPROCESSSCHEID,RCPROCESSCHE);

        
        RCSCHECOND := FRCFIRSTCONDPROCESCHE(INUPROCESSSCHEID); 
        
        IF (RCSCHECOND.PROC_SCHE_COND_ID IS NULL) THEN
            BLEXISCOND := FALSE;
            NUVALUEFREQ := 1; 
        ELSE
            BLEXISCOND := TRUE;
            NUVALUEFREQ := NVL(RCSCHECOND.FREQUENCY_VALUE,1);
        END IF;

        
        DTPROXIMAFECHA := FDTDATENEXFRQVAL(IDTFECHAINICIAL,NUVALUEFREQ,RCPROCESSCHE.FREQUENCY);

        
        
        DTPROXIMAFECHA :=  FDTGETNXTEXEDATEBYCOND ( NUVALUEFREQ,
                                                    RCPROCESSCHE.FREQUENCY,
                                                    RCSCHECOND.YEAR_COND,
                                                    RCSCHECOND.MONTHS_COND,
                                                    RCSCHECOND.WEEK_COND,
                                                    RCSCHECOND.DAY_INITIAL_COND,
                                                    RCSCHECOND.DAY_FINAL_COND,
                                                    RCSCHECOND.HOUR_INITIAL_COND,
                                                    RCSCHECOND.HOUR_FINAL_COND,
                                                    RCSCHECOND.MINUTES_INITIAL_COND,
                                                    RCSCHECOND.MINUTES_FINAL_COND,
                                                    DTPROXIMAFECHA,
                                                    BLEXISCOND,
                                                    BLFOUNDDATE,
                                                    BLDISABLEDSCHED
                                                 );

        IF (BLDISABLEDSCHED) THEN
            GE_BOSCHEDULE.INACTIVESCHEDULE(INUPROCESSSCHEID);
        END IF;
        
        UT_TRACE.TRACE('FIN GE_BOSchedule.fdtGetNextExeDateByCondFrq');
        RETURN DTPROXIMAFECHA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fdtGetNextExeDateByCondFrq]');
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fdtGetNextExeDateByCondFrq]');
            RAISE EX.CONTROLLED_ERROR;
    END FDTGETNEXTEXEDATEBYCONDFRQ;


    






























    FUNCTION FDTGETNXTEXEDATEBYCOND
    (
        INUFREQUNCYVALUE    IN GE_PROC_SCHE_COND.FREQUENCY_VALUE%TYPE,
        ISBFREQUENCY        IN GE_PROCESS_SCHEDULE.FREQUENCY%TYPE,
        INUYEARCOND         IN GE_PROC_SCHE_COND.YEAR_COND%TYPE,
        ISBMONTHCOND        IN GE_PROC_SCHE_COND.MONTHS_COND%TYPE,
        ISBWEEKCOND         IN GE_PROC_SCHE_COND.WEEK_COND%TYPE,
        INUDAYINITIAL       IN GE_PROC_SCHE_COND.DAY_INITIAL_COND%TYPE,
        INUDAYFINAL         IN GE_PROC_SCHE_COND.DAY_FINAL_COND%TYPE,
        INUHOURINITIAL      IN GE_PROC_SCHE_COND.HOUR_INITIAL_COND%TYPE,
        INUHOURFINAL        IN GE_PROC_SCHE_COND.HOUR_FINAL_COND%TYPE,
        INUMINUTINITIAL     IN GE_PROC_SCHE_COND.MINUTES_INITIAL_COND%TYPE,
        INUMINUTFINAL       IN GE_PROC_SCHE_COND.MINUTES_FINAL_COND%TYPE,
        IDTFECHAINICIAL     IN DATE DEFAULT SYSDATE,
        IBLEXISTCOND        IN BOOLEAN DEFAULT TRUE,
        OBLFOUNDDATE        OUT BOOLEAN,
        OBLDISABLEDSCHED    OUT BOOLEAN
    ) RETURN DATE
    IS
        
        DTPROXIMAFECHA      DATE;

        
        NUITERACIONES       NUMBER  := 0;
        BLVOLVERAREVISAR    BOOLEAN := FALSE;
        NUCANTMAXITERACI    NUMBER  := 120; 
        NUCANTASUMAR        NUMBER;

        NUDATAINICIAL       NUMBER;
        NUDATAFINAL         NUMBER;
        NUTOTALDIASMES      NUMBER;
        DTFECHAAUX          DATE;
        
    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOSchedule.fdtGetNxtExeDateByCond',20);

        
        OBLDISABLEDSCHED := FALSE;
        OBLFOUNDDATE     := TRUE;

        DTPROXIMAFECHA := IDTFECHAINICIAL;
        
        IF IBLEXISTCOND THEN
            
            
            

            
            
            DTPROXIMAFECHA := FDTGETDATETRUNCBYFRECUEN( DTPROXIMAFECHA,
                                                        ISBFREQUENCY,
                                                        ISBMONTHCOND,
                                                        ISBWEEKCOND,
                                                        INUDAYINITIAL,
                                                        INUDAYFINAL,
                                                        INUHOURINITIAL,
                                                        INUHOURFINAL,
                                                        INUMINUTINITIAL,
                                                        INUMINUTFINAL );


            
            
            LOOP
                NUITERACIONES := NUITERACIONES +1; 
                BLVOLVERAREVISAR := FALSE;
                
                
                IF INUYEARCOND != -1 THEN
                    IF ( TO_NUMBER(TO_CHAR(DTPROXIMAFECHA, 'YYYY')) > INUYEARCOND ) THEN
                        UT_TRACE.TRACE('Condicion de A�o',20);
                        
                        DTPROXIMAFECHA  := UT_DATE.FDTMAXDATE;
                        OBLFOUNDDATE    := FALSE;
                        OBLDISABLEDSCHED := TRUE;
                        RETURN DTPROXIMAFECHA;
                    END IF;
                    
                    IF ( TO_NUMBER(TO_CHAR(DTPROXIMAFECHA, 'YYYY')) < INUYEARCOND ) THEN
                        
                        DTPROXIMAFECHA := TO_DATE('01/01/'||TO_CHAR(INUYEARCOND)|| TO_CHAR(DTPROXIMAFECHA, ' HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS');
                    END IF;
                END IF;
                
                
                
                IF (ISBMONTHCOND IS NOT NULL  ) THEN
                    UT_TRACE.TRACE('Condicion de Mes',20);
                    
                    IF NOT FBLEXISTSNUMINLIST( TO_CHAR(DTPROXIMAFECHA, 'MM'), ISBMONTHCOND ) THEN
                        
                        
                        DTPROXIMAFECHA := FDTGETMONTHNEXTVALID(DTPROXIMAFECHA, ISBMONTHCOND);
                        
                        DTFECHAAUX       := DTPROXIMAFECHA;
                        DTPROXIMAFECHA   := TRUNC(DTPROXIMAFECHA,'MONTH');
                        
                        
                        IF ( INUHOURINITIAL IS NULL AND INUHOURFINAL IS NULL
                            AND INUMINUTINITIAL IS NULL AND INUMINUTFINAL IS NULL )  THEN
                           DTPROXIMAFECHA   := TO_DATE(TO_CHAR(DTPROXIMAFECHA, 'DD/MM/YYYY') || TO_CHAR(DTFECHAAUX, ' HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS');
                        END IF;
                        BLVOLVERAREVISAR := TRUE;
                    END IF;
                END IF;
                

                
                
                IF (ISBWEEKCOND IS NOT NULL ) THEN
                    UT_TRACE.TRACE('condicion de Semana',20);
                    IF NOT FBLEXISTSNUMINLIST( TO_CHAR(DTPROXIMAFECHA - 1, 'D'), ISBWEEKCOND ) THEN
                        
                        DTPROXIMAFECHA := FDTGETWEEKNEXTVALID(DTPROXIMAFECHA, ISBWEEKCOND);
                        
                        IF ( INUHOURINITIAL IS NOT NULL OR  INUHOURFINAL IS NOT NULL
                            OR INUMINUTINITIAL IS NOT NULL OR  INUMINUTFINAL IS NOT NULL ) THEN
                            DTPROXIMAFECHA := TRUNC(DTPROXIMAFECHA);
                        END IF;
                        BLVOLVERAREVISAR := TRUE;
                    END IF;
                END IF;
                
                
                
                NUDATAINICIAL   := INUDAYINITIAL;
                NUDATAFINAL     := INUDAYFINAL;
                NUTOTALDIASMES  := FNUDIASTOTALESMES(DTPROXIMAFECHA);

                IF (NUDATAINICIAL IS NOT NULL OR NUDATAFINAL IS NOT NULL ) THEN
                    IF NUDATAINICIAL IS NULL THEN NUDATAINICIAL := 1; END IF;
                    IF NUDATAFINAL IS NULL THEN NUDATAFINAL := NUTOTALDIASMES; END IF;

                    UT_TRACE.TRACE('condicion de Dia',20);
                    
                    IF ( TO_NUMBER(TO_CHAR(DTPROXIMAFECHA,'DD')) NOT BETWEEN NUDATAINICIAL AND NUDATAFINAL ) THEN
                        
                        
                        NUCANTASUMAR := MOD(NUTOTALDIASMES - TO_NUMBER(TO_CHAR(DTPROXIMAFECHA,'DD')) + NUDATAINICIAL , NUTOTALDIASMES);
                        DTPROXIMAFECHA := FDTDATENEXFRQVAL(DTPROXIMAFECHA,NUCANTASUMAR,CSBDIARIO);

                        
                        IF ( INUHOURINITIAL IS NOT NULL OR  INUHOURFINAL IS NOT NULL
                            OR INUMINUTINITIAL IS NOT NULL OR  INUMINUTFINAL IS NOT NULL ) THEN
                            DTPROXIMAFECHA := TRUNC(DTPROXIMAFECHA);
                        END IF;

                        BLVOLVERAREVISAR := TRUE;
                    END IF;
                END IF;
                
                
                
                NUDATAINICIAL   := INUHOURINITIAL;
                NUDATAFINAL     := INUHOURFINAL;

                IF (NUDATAINICIAL IS NOT NULL OR NUDATAFINAL IS NOT NULL ) THEN
                    IF NUDATAINICIAL IS NULL THEN NUDATAINICIAL := 0; END IF;
                    IF NUDATAFINAL IS NULL THEN NUDATAFINAL := 23; END IF;

                    UT_TRACE.TRACE('condicion de Horas',20);
                    
                    IF ( TO_NUMBER(TO_CHAR(DTPROXIMAFECHA,'HH24')) NOT BETWEEN NUDATAINICIAL AND NUDATAFINAL ) THEN
                        
                        
                        NUCANTASUMAR := MOD(24 - TO_NUMBER(TO_CHAR(DTPROXIMAFECHA,'HH24')) + NUDATAINICIAL , 24);
                        DTPROXIMAFECHA := FDTDATENEXFRQVAL(DTPROXIMAFECHA,NUCANTASUMAR,CSBHORAS);
                        DTPROXIMAFECHA := TO_DATE(TO_CHAR(DTPROXIMAFECHA,'DD-MM-YYYY HH24') || ':00:00', 'DD-MM-YYYY HH24:MI:SS');
                        BLVOLVERAREVISAR := TRUE;
                    END IF;
                END IF;
                
                
                
                NUDATAINICIAL   := INUMINUTINITIAL;
                NUDATAFINAL     := INUMINUTFINAL;

                IF (NUDATAINICIAL IS NOT NULL OR NUDATAFINAL IS NOT NULL ) THEN
                    IF NUDATAINICIAL IS NULL THEN NUDATAINICIAL := 0; END IF;
                    IF NUDATAFINAL IS NULL THEN NUDATAFINAL := 59; END IF;

                    UT_TRACE.TRACE('condicion de Minutos',20);
                    
                    IF ( TO_NUMBER(TO_CHAR(DTPROXIMAFECHA,'MI')) NOT BETWEEN NUDATAINICIAL AND NUDATAFINAL ) THEN
                        
                        
                        NUCANTASUMAR := MOD(60 - TO_NUMBER(TO_CHAR(DTPROXIMAFECHA,'MI')) + NUDATAINICIAL , 60);
                        DTPROXIMAFECHA := FDTDATENEXFRQVAL(DTPROXIMAFECHA,NUCANTASUMAR,CSBMINUTOS);
                        DTPROXIMAFECHA := TO_DATE(TO_CHAR(DTPROXIMAFECHA,'DD-MM-YYYY HH24:MI') || ':00', 'DD-MM-YYYY HH24:MI:SS');
                        BLVOLVERAREVISAR := TRUE;
                    END IF;
                END IF;
                
                
                
                
                
                
                IF ( ISBFREQUENCY IN ( CSBMINUTOSDH, CSBHORASDH, CSBDIARIODH, CSBSEMANALDH, CSBMENSUALDH, CSBANUALDH ) ) THEN

                    UT_TRACE.TRACE('condicion de Dias Laborales',20);

                    
                    IF ( DAGE_CALENDAR.FBLEXIST( TRUNC ( DTPROXIMAFECHA ), CNUPAIS ) AND
                            DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( DTPROXIMAFECHA ), CNUPAIS ) =
                            GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS') ) THEN

                        
                        
                        DTFECHAAUX := GE_BCCALENDAR.FDTNEXTDAYLABORAL(DTPROXIMAFECHA,CNUPAIS);

                        
                        
                        
                        
                        
                        IF (DTFECHAAUX != UT_DATE.FDTMAXDATE) THEN
                            DTPROXIMAFECHA := DTFECHAAUX;
                            BLVOLVERAREVISAR := TRUE;
                        END IF;
                    END IF;
                END IF;
                
                
                

                IF BLVOLVERAREVISAR THEN
                    UT_TRACE.TRACE('blvolverARevisar TRUE',20);
                ELSE
                    UT_TRACE.TRACE('blvolverARevisar FALSE',20);
                END IF;

                
                IF NOT BLVOLVERAREVISAR OR NUITERACIONES > NUCANTMAXITERACI THEN
                    EXIT;
                END IF;
            END LOOP;
        END IF; 
        
        

        IF (NUITERACIONES > NUCANTMAXITERACI) THEN
            UT_TRACE.TRACE('Entro a nuIteraciones > nuCantMaxIterac');
            DTPROXIMAFECHA := UT_DATE.FDTMAXDATE;
            OBLFOUNDDATE    := FALSE;
        END IF;

        
        
        DTPROXIMAFECHA := TO_DATE(TO_CHAR(DTPROXIMAFECHA, 'DD-MM-YYYY HH24:MI:SS'),'DD-MM-YYYY HH24:MI:SS');

        UT_TRACE.TRACE('Fin: [GE_BOSchedule.fdtGetNxtExeDateByCond]',5);
        
        RETURN DTPROXIMAFECHA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fdtGetNxtExeDateByCond]');
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fdtGetNxtExeDateByCond]');
            RAISE EX.CONTROLLED_ERROR;
    END FDTGETNXTEXEDATEBYCOND;



    














    FUNCTION FBLVALDATEINCONDFRQ
    (
        ISBFRECUENCOND      IN VARCHAR2,
        INUYEARCONDFRQ      IN NUMBER,
        ISBMESESCONDFRQ     IN VARCHAR2,
        ISBDAYWEEKCONDFRQ   IN VARCHAR2,
        INUDAYINICONDFRQ    IN NUMBER,
        INUDAYFINCONDFRQ    IN NUMBER,
        INUHOURINICONDFRQ   IN NUMBER,
        INUHOURFINCONDFRQ   IN NUMBER,
        INUMININICONDFRQ    IN NUMBER,
        INUMINFINCONDFRQ    IN NUMBER,
        IDTFECHAVAL         IN DATE
    ) RETURN BOOLEAN
    IS
        
    BEGIN
        
        
        
        
        IF INUYEARCONDFRQ != -1 THEN
            IF ( TO_NUMBER(TO_CHAR(IDTFECHAVAL, 'YYYY')) > INUYEARCONDFRQ OR
                 TO_NUMBER(TO_CHAR(IDTFECHAVAL, 'YYYY')) < INUYEARCONDFRQ
            ) THEN
                UT_TRACE.TRACE('No cumple la Condicion de A�o',10);
                RETURN FALSE;
            END IF;
        END IF;
        
        
        IF (ISBMESESCONDFRQ IS NOT NULL  ) THEN
            UT_TRACE.TRACE('Condicion de Mes',10);
            
            IF NOT FBLEXISTSNUMINLIST( TO_CHAR(IDTFECHAVAL, 'MM'), ISBMESESCONDFRQ ) THEN
                UT_TRACE.TRACE('No cumple la Condicion de los meses',10);
                RETURN FALSE;
            END IF;
        END IF;
        
        
        IF (ISBDAYWEEKCONDFRQ IS NOT NULL ) THEN
            UT_TRACE.TRACE('condicion de dias de la Semana',10);
            IF NOT FBLEXISTSNUMINLIST( TO_CHAR(IDTFECHAVAL - 1, 'D'), ISBDAYWEEKCONDFRQ ) THEN
                UT_TRACE.TRACE('No cumple la Condicion de los d�as de la semana',10);
                RETURN FALSE;
            END IF;
        END IF;
        
        
        IF (INUDAYINICONDFRQ IS NOT NULL OR INUDAYFINCONDFRQ IS NOT NULL ) THEN

            UT_TRACE.TRACE('condicion de Dia',20);
            
            IF ( TO_NUMBER(TO_CHAR(IDTFECHAVAL,'DD')) NOT BETWEEN INUDAYINICONDFRQ AND INUDAYFINCONDFRQ ) THEN
                UT_TRACE.TRACE('No cumple la condicion del rango de dias ',10);
                RETURN FALSE;
            END IF;
        END IF;
        
        
        IF (INUHOURINICONDFRQ IS NOT NULL OR INUHOURINICONDFRQ IS NOT NULL ) THEN

            UT_TRACE.TRACE('condicion de Horas',20);
            
            IF ( TO_NUMBER(TO_CHAR(IDTFECHAVAL,'HH24')) NOT BETWEEN INUHOURINICONDFRQ AND INUHOURFINCONDFRQ ) THEN
                UT_TRACE.TRACE('No cumple la condicion del rango de horas ',10);
                RETURN FALSE;
            END IF;
        END IF;
        
        
        IF (INUMININICONDFRQ IS NOT NULL OR INUMINFINCONDFRQ IS NOT NULL ) THEN
            UT_TRACE.TRACE('condicion de Minutos',20);
            
            IF ( TO_NUMBER(TO_CHAR(IDTFECHAVAL,'MI')) NOT BETWEEN INUMININICONDFRQ AND INUMINFINCONDFRQ ) THEN
                UT_TRACE.TRACE('No cumple la condicion del rango de minutos',10);
                RETURN FALSE;
            END IF;
        END IF;
        
        
        
        
        
        IF ( ISBFRECUENCOND IN ( CSBSOLOUNAVEZDH, CSBMINUTOSDH, CSBHORASDH, CSBDIARIODH, CSBSEMANALDH, CSBMENSUALDH, CSBANUALDH ) ) THEN

            UT_TRACE.TRACE('condicion de Dias Laborales',20);

            
            IF ( DAGE_CALENDAR.FBLEXIST( TRUNC ( IDTFECHAVAL ), CNUPAIS ) AND
                    DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( IDTFECHAVAL ), CNUPAIS ) =
                    GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS') ) THEN

                UT_TRACE.TRACE('No cumple la condicion de dias laborales',10);
                RETURN FALSE;
            END IF;
        END IF;
        
        
        
        RETURN TRUE;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fblValDateInCondFrq]');
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('CONTROLLED_ERROR :[GE_BOSchedule.fblValDateInCondFrq]');
            RAISE EX.CONTROLLED_ERROR;
    END FBLVALDATEINCONDFRQ;

    













    FUNCTION FRFGETFREQUENCYLOV
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFCURSOR PKCONSTANTE.TYREFCURSOR;
    BEGIN

        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);

        RFCURSOR := GE_BCSCHEDULE.FRFGETFREQUENCYLOV;

        RETURN RFCURSOR;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
            RAISE EX.CONTROLLED_ERROR;
	END FRFGETFREQUENCYLOV;

    


















    PROCEDURE CHANGEJOBSESSIONDATA
    (
        ISBPROCESO  IN  VARCHAR2,
        ISBUSERMASK IN  VARCHAR2,
        ISBPASSWORD IN  VARCHAR2
    )
    IS

        CSBCONST_HEX        CONSTANT VARCHAR2(10) := '__HEX';

        SBUSERTMP           VARCHAR2(100);
        SBPWDTMP            VARCHAR2(100);
        SBINSTANCE          VARCHAR2(100);

        SBCON_ENCRIPT           VARCHAR2(200);
        SBCONEX_ENCRIPT         VARCHAR2(200);
        SBHEX_ENCRIPT           VARCHAR2(200);
        SBCONN_STRING_ENCRIPT   VARCHAR2(200);
        SBPASSBDENCRIPT         VARCHAR2(200);

        RCPROCESS_SCHEDULE  DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
        DTNEWDATE   GE_PROCESS_SCHEDULE.START_DATE_%TYPE;
        SBFREQUENCY GE_PROCESS_SCHEDULE.FREQUENCY%TYPE;
        SBWHAT      GE_PROCESS_SCHEDULE.WHAT%TYPE;
        SBPARAM     GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE;

        CURSOR CUPROCESS
        IS
            SELECT PS.PROCESS_SCHEDULE_ID
              FROM DBA_JOBS J, GE_PROCESS_SCHEDULE PS
            WHERE J.JOB = PS.JOB
              AND J.BROKEN = 'N'
              AND PS.PROCESS_SCHEDULE_ID > -1
              AND PS.LOG_USER = UPPER (ISBUSERMASK)
            ORDER BY PROCESS_SCHEDULE_ID;

        PROCEDURE CODIFICARCONTRASENA
        IS
            
            CSBLLAVE_ENCRIPTACION   CONSTANT    VARCHAR2(20) := '00101000101010';

            
            CNUENCRIPTAR            CONSTANT    NUMBER := 0;

            
            SBCONEXION              VARCHAR2(200);
        BEGIN

            UT_TRACE.TRACE('Inicia GE_BOSchedule.CodificarContrasena',7);

            
            UT_TRACE.TRACE (ISBPROCESO||' Cambio al sbUser '||ISBUSERMASK, 8);

            
            GE_BODATABASECONNECTION.GETCONNECTIONSTRING(SBUSERTMP, SBPWDTMP, SBINSTANCE);

            
            SBCONEXION := ISBUSERMASK || '/' || ISBPASSWORD || '@' || SBINSTANCE;
            

            
            SBCON_ENCRIPT := FA_UIPROCESOSFACT.FSBENCRIPTACADENA( SBCONEXION );
            

            
            SBCONEX_ENCRIPT := BI_BOSERVICIOSDOTNET.FSBCODIFICARCONTRASENA(SBCONEXION);
            

            
            SA_BOPASSWORD.ENCRYPT3(SBCONEXION, SA_BOPASSWORD.CNUENCRYPT, SBHEX_ENCRIPT);
            SBHEX_ENCRIPT := CSBCONST_HEX||GE_BOUTILITIES.FSBCONVERTSTR2HEX(SBHEX_ENCRIPT);
            

            
            PKCONTROLCONEXION.ENCRIPTA
            (
                ISBPASSWORD,
                SBPASSBDENCRIPT,
                CSBLLAVE_ENCRIPTACION,
                CNUENCRIPTAR
            );

            
            SBCONN_STRING_ENCRIPT := ISBUSERMASK || '/' || SBPASSBDENCRIPT || '@' || SBINSTANCE;
            

            UT_TRACE.TRACE('Finaliza GE_BOSchedule.CodificarContrasena',7);

        END CODIFICARCONTRASENA ;

        PROCEDURE ACTUALIZAPARAMETROS
        (
            INUSCHEDULEPROCESS  IN  GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
        ) IS

            SBCONNSTRING    VARCHAR2(1000) := NULL;
            SBCONNSTRINGENC VARCHAR2(1000) := NULL;

            SBCONEX VARCHAR2(20);
            SBLINEA VARCHAR2(1000);

            
            TBWHAT           UT_STRING.TYTB_STRING;
            TBWHAT1          UT_STRING.TYTB_STRING;
            TBPARAM          UT_STRING.TYTB_STRING;

        BEGIN

            UT_TRACE.TRACE('Inicia GE_BOSchedule.ActualizaParametros',7);

            TBWHAT.DELETE;
            TBWHAT1.DELETE;
            TBPARAM.DELETE;

            
            DAGE_PROCESS_SCHEDULE.GETRECORD(INUSCHEDULEPROCESS,RCPROCESS_SCHEDULE);

            
            DTNEWDATE := RCPROCESS_SCHEDULE.START_DATE_;
            SBFREQUENCY := RCPROCESS_SCHEDULE.FREQUENCY;

            
            
            UT_STRING.EXTSTRING (RCPROCESS_SCHEDULE.WHAT, CHR(10), TBWHAT);
            
            UT_STRING.EXTSTRING (RCPROCESS_SCHEDULE.WHAT, ';', TBWHAT1);
            
            UT_STRING.EXTSTRING (RCPROCESS_SCHEDULE.PARAMETERS_, '|', TBPARAM);

            
            SBWHAT  := NULL;

            
            IF (TBWHAT.COUNT>1) THEN
                FOR I IN 1 .. TBWHAT.COUNT LOOP
                    SBLINEA := NULL;
                    IF ( INSTR (TBWHAT(I), 'SetSessionData', 1) > 0 ) THEN
                        
                        SBCONNSTRINGENC := 'GE_BOSchedule.SetSessionData('''||SBHEX_ENCRIPT||''');';
                        SBLINEA := SBCONNSTRINGENC;
                        
                        UT_TRACE.TRACE ('Actualiza PWD en WHAT del Job ', 10);
                    ELSE
                        SBLINEA := TBWHAT(I);
                    END IF;
                    SBWHAT := SBWHAT || CHR(9) || SBLINEA || CHR(10);
                END LOOP;

            
            ELSE
                IF (TBWHAT1.COUNT>0) THEN
                    SBLINEA := NULL;
                    FOR I IN 1 .. TBWHAT1.COUNT LOOP
                        IF ( INSTR (TBWHAT1(I), 'SetSessionData', 1) > 0 ) THEN
                            
                            SBCONNSTRINGENC := 'GE_BOSchedule.SetSessionData('''||SBHEX_ENCRIPT||''');';
                            SBLINEA := SBCONNSTRINGENC;
                            
                            UT_TRACE.TRACE ('Actualiza PWD en WHAT del Job ', 10);
                        ELSE
                            SBLINEA := TBWHAT1(I);
                        END IF;
                    END LOOP;
                    SBWHAT := SBWHAT || CHR(9) || SBLINEA || CHR(10);
                END IF;

            END IF;

            
            SBPARAM := NULL;

            
            IF (TBPARAM.COUNT>0) THEN
                SBLINEA := NULL;
                
                FOR I IN 1 .. TBPARAM.COUNT LOOP
                    
                    IF INSTR (TBPARAM(I), 'CON=', 1 ) > 0 THEN
                        
                        SBLINEA := 'CON='||SBCON_ENCRIPT;
                        
                        UT_TRACE.TRACE ('Actualiza PWD en parameters_ CON= del Schedule ', 10);
                    ELSIF INSTR (TBPARAM(I), 'CONEX=', 1 ) > 0 THEN
                        
                        SBLINEA := 'CONEX='||SBCONEX_ENCRIPT;
                        
                        UT_TRACE.TRACE ('Actualiza PWD en parameters_ CONEX= del Schedule ', 10);
                    ELSIF INSTR (TBPARAM(I), 'CONNECTION_STRING=', 1 ) > 0 THEN
                        
                        SBLINEA := 'CONNECTION_STRING='||SBCONN_STRING_ENCRIPT;
                        
                        UT_TRACE.TRACE ('Actualiza PWD en parameters_ CONNECTION_STRING= del Schedule ', 10);
                    ELSE
                        
                        SBLINEA := TBPARAM(I);
                    END IF;

                    IF (I < TBPARAM.COUNT-1) THEN
                        SBLINEA := SBLINEA || '|';
                    END IF;
                    SBPARAM := SBPARAM || SBLINEA;
                END LOOP;
                IF (NVL (LENGTH (TBPARAM(TBPARAM.COUNT)),0) = 0) THEN
                    SBPARAM := SBPARAM || '|';
                END IF;
            END IF;

            UT_TRACE.TRACE('Finaliza GE_BOSchedule.ActualizaParametros',7);

        END ACTUALIZAPARAMETROS;

        PROCEDURE REPROGRAMAJOBS
        (
            INUPROCSCHEDID  IN      GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE
        )
        IS
        BEGIN

            UT_TRACE.TRACE('Inicia GE_BOSchedule.ReprogramaJobs',7);

            
            GE_BOSCHEDULE.INACTIVESCHEDULE(INUPROCSCHEDID);
            UT_TRACE.TRACE ('ReprogramaJobs Sche ' || INUPROCSCHEDID, 8);
            UT_TRACE.TRACE ('ReprogramaJobs Job Old ' || RCPROCESS_SCHEDULE.JOB, 8);

            
            RCPROCESS_SCHEDULE.STATUS      := CSBACTIVESCHEDULE;
            RCPROCESS_SCHEDULE.WHAT        := SBWHAT;
            RCPROCESS_SCHEDULE.PARAMETERS_ := SBPARAM;

            
            DBMS_JOB.SUBMIT
            (
                RCPROCESS_SCHEDULE.JOB,
                RCPROCESS_SCHEDULE.WHAT,
                DTNEWDATE,
                'GE_BOSchedule.fdtGetJobNextExeDate( to_date( ''' || TO_CHAR( DTNEWDATE, CSBDATE_FORMAT ) || ''', ''' || CSBDATE_FORMAT || ''' ), ''' || SBFREQUENCY || ''' )'
            );

            
            DAGE_PROCESS_SCHEDULE.UPDRECORD(RCPROCESS_SCHEDULE);
            UT_TRACE.TRACE ('ReprogramaJobs Job New  ' || RCPROCESS_SCHEDULE.JOB, 8);

            UT_TRACE.TRACE('Finaliza GE_BOSchedule.ReprogramaJobs',7);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

        END REPROGRAMAJOBS;

    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOSchedule.ChangeJobSessionData',7);

        
        CODIFICARCONTRASENA;

        
        FOR RC IN CUPROCESS LOOP
            
            ACTUALIZAPARAMETROS (RC.PROCESS_SCHEDULE_ID);
            
            REPROGRAMAJOBS  (RC.PROCESS_SCHEDULE_ID);
        END LOOP;

        UT_TRACE.TRACE('Finaliza GE_BOSchedule.ChangeJobSessionData',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END CHANGEJOBSESSIONDATA;

END GE_BOSCHEDULE;