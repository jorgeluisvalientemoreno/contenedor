PACKAGE pkBOReadingGeneration IS





























































































































































































    
    
    
    CSBLECTORA      CONSTANT VARCHAR2(1) := 'L';
    
    CSBFGRL                            CONSTANT VARCHAR2(4) := 'FGRL';
    
    
    
    
    
    
    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2;

    
    PROCEDURE GENLECTURESBYDIVI
    (
        INUDIVI        IN     REACGELE.RAGLDIVI%TYPE,
        INUPERICOSE    IN     PERICOSE.PECSCONS%TYPE,
        ISBPROGID      IN     ESTAPROG.ESPRPROG%TYPE,
        INUIDPROC      IN     NUMBER
    );
    
    PROCEDURE CREATEREREADING
    (
        INULEEMCONS   IN         LECTELME.LEEMCONS%TYPE,
        INUACTIVITYID IN         GE_ITEMS.ITEMS_ID%TYPE,
        ORCREREADING  OUT NOCOPY LECTELME%ROWTYPE
    );
    
END PKBOREADINGGENERATION;

PACKAGE BODY pkBOReadingGeneration IS























































































































































































    CSBVERSION CONSTANT VARCHAR2(250) := 'SAO420737';
    
    
    SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;


    TYPE TYRCCONSUTYPE IS RECORD
	(
        TBCONSUMTYPE DATIPOCONS.TYTBTCONCODI
	);

	TYPE TYTBCONSUTYPE IS TABLE OF TYRCCONSUTYPE INDEX BY BINARY_INTEGER;

    
    CNUAMOUNT    CONSTANT NUMBER := 100;
    
    CNUMAXDIVI   CONSTANT NUMBER := CM_BOCONSTANTS.CNUMAX_FGRL_DIVI;

    CNUACTIVITY             CONSTANT GE_ITEMS.ITEMS_ID%TYPE := GE_BOITEMSCONSTANTS.CNUREADINGACTIVITY;
    CSBTRACE_PATH           CONSTANT PARAMETR.PAMECODI%TYPE := 'RUTA_TRAZA';
    CSBBILL_READING_CAUSE   CONSTANT LECTELME.LEEMCLEC%TYPE := CM_BOCONSTANTS.CSBCAUS_LECT_BILL;
    CSBNO                   CONSTANT VARCHAR2(2)            := GE_BOCONSTANTS.CSBNO;

    
    CNUDIVI_PROCESSED CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900442;
    CNUPROCESS        CONSTANT MENSAJE.MENSCODI%TYPE := 10010;
    CNUSUCCESS        CONSTANT MENSAJE.MENSCODI%TYPE := 4136;
    
    CNUNOCONSTYPESERR CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900449;
    CNUNSERVCLASSSERR CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 5152;
    
    CNUERR_901067    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901067;
    
    
    
    

    BLISLOADED    BOOLEAN := FALSE ;	    

    
    GTBTCONRESET    PKTBLTIPOCONS.TYTCONCODI ;
    
    GRCPERICOSE     PERICOSE%ROWTYPE ;
    
    GNUACTIVITY     NUMBER; 
    
    GNUDIVI         REACGELE.RAGLDIVI%TYPE;

    
    GNUREACGELE         REACGELE.RAGLCONS%TYPE;

    
    GBLCONSUMPTIONGEN   BOOLEAN;
    
    GBLHASERRORS        BOOLEAN;
    
    GSBPATH             VARCHAR2(2000);
    
    GSBERRORFILENAME    VARCHAR2(2000);
    
    GTBTIPOCONS         TYTBCONSUTYPE;
    
    GNUPROGRAM    PROCESOS.PROCCONS%TYPE;
    
    GSBPROGID     ESTAPROG.ESPRPROG%TYPE;
    
    
    GNUTASKTYPEID OR_ROUTE_TASK_TYPE.TASK_TYPE_ID%TYPE;

    
    
    
    
    
    

























FUNCTION FSBVERSION
RETURN VARCHAR2
IS

BEGIN


    PKERRORS.PUSH ('pkBOReadingGeneration.fsbVersion');

    PKERRORS.POP;

    
    RETURN ( CSBVERSION );

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FSBVERSION;








































PROCEDURE GETPARAMETERS
IS
   TBAUX  UT_STRING.TYTB_STRING;
   SBAUX  GE_PARAMETER.VALUE%TYPE;
   NUCONT NUMBER;

BEGIN
    PKERRORS.PUSH ('pkBOReadingGeneration.GetParameters');

    
    IF ( BLISLOADED ) THEN
    
	   PKERRORS.POP;
	   RETURN ;
    
    END IF ;

    
    PKGRLPARAMEXTENDEDMGR.SETCACHEON ;

    
    IF (DAGE_PARAMETER.FBLEXIST('TIPO_CONS_RESET')) THEN
        SBAUX := GE_BOPARAMETER.FSBGET('TIPO_CONS_RESET');
    ELSE
        SBAUX := NULL;
    END IF;
    
    
    UT_STRING.EXTSTRING (SBAUX,
                         '|',
                         TBAUX);

    
    NUCONT := TBAUX.FIRST;
    WHILE ( NUCONT IS NOT NULL ) LOOP
        GTBTCONRESET(NUCONT) := TBAUX(NUCONT);
        NUCONT := TBAUX.NEXT(NUCONT);
    END LOOP;
    
    GNUTASKTYPEID := OR_BCORDERACTIVITIES.FNUGETTASKTYPEBYACTID(CNUACTIVITY);
    
    
    BLISLOADED := TRUE ;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        RAISE;

END GETPARAMETERS;




















PROCEDURE SAVELOGFILE
(
    ISBFILENAME IN VARCHAR2,
    ISBLINE     IN VARCHAR2
)
IS
    RCFILE      UTL_FILE.FILE_TYPE;  
BEGIN
    PKERRORS.PUSH ('pkBOReadingGeneration.SaveLogFile');

    
    RCFILE := PKUTLFILEMGR.FOPEN(GSBPATH,
                                 ISBFILENAME,
                                 'a');
    
    PKUTLFILEMGR.PUT_LINE(RCFILE,
                          ISBLINE);
    
    PKUTLFILEMGR.FCLOSE(RCFILE);

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        RAISE;

END SAVELOGFILE;














































PROCEDURE GETTIPOCONS
(
    INUPRODUCTID    IN         PR_PRODUCT.PRODUCT_ID%TYPE,
    ISBELMECODI     IN         ELEMMEDI.ELMECODI%TYPE,
    INUITEMSGAMAID  IN         GE_ITEMS_GAMA.ID_ITEMS_GAMA%TYPE,
    OTBTIPOCONS     OUT NOCOPY DATIPOCONS.TYTBTCONCODI
)
IS
    TBCONSUMPTIONTYPE   GE_BCCONSTYPEBYGAMA.TYTBCONSUMPTIONTYPE;
    NUIDX NUMBER;
    
    
    
    PROCEDURE INICIALIZAR IS
    BEGIN
        OTBTIPOCONS.DELETE;
    END INICIALIZAR;

BEGIN
    PKERRORS.PUSH ('pkBOReadingGeneration.getTipoCons');

    INICIALIZAR;

    
    
    IF ( INUITEMSGAMAID IS NULL ) THEN
        ERRORS.SETERROR(CNUERR_901067);
        RAISE EX.CONTROLLED_ERROR;
    END IF;
    
    IF ( GTBTIPOCONS.EXISTS(INUITEMSGAMAID) ) THEN
        OTBTIPOCONS := GTBTIPOCONS(INUITEMSGAMAID).TBCONSUMTYPE;
    ELSE
    
        GE_BCCONSTYPEBYGAMA.GETCONSUMPTIONTYPE(INUITEMSGAMAID, TBCONSUMPTIONTYPE);

        
        IF (TBCONSUMPTIONTYPE.COUNT = 0) THEN
            ERRORS.SETERROR(CNUNOCONSTYPESERR,
                            ISBELMECODI||'||['||INUITEMSGAMAID||']');
            RAISE EX.CONTROLLED_ERROR;
        ELSE
            NUIDX := TBCONSUMPTIONTYPE.FIRST;
            WHILE (NUIDX IS NOT NULL) LOOP

                OTBTIPOCONS(NUIDX) := TBCONSUMPTIONTYPE(NUIDX).TCONCODI;

                NUIDX := TBCONSUMPTIONTYPE.NEXT(NUIDX);
            END LOOP;
        END IF;

        GTBTIPOCONS(INUITEMSGAMAID).TBCONSUMTYPE := OTBTIPOCONS;

    END IF;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        RAISE;
        
END GETTIPOCONS;




























































































PROCEDURE INSERTLECTURE
(
    INUPRODUCTID      IN            PR_PRODUCT.PRODUCT_ID%TYPE,
    INUADDRESSID      IN            AB_ADDRESS.ADDRESS_ID%TYPE,
    INUPOS            IN            NUMBER,
    INUROUTEID        IN            OR_ROUTE_PREMISE.ROUTE_ID%TYPE,
    INUCONSECUTIVE    IN            OR_ROUTE_PREMISE.CONSECUTIVE%TYPE,
    INUSUBSCRIBERID   IN            GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
    INUSUBSCRIPTIONID IN            SUSCRIPC.SUSCCODI%TYPE,
    IOTBELEMENTOS     IN OUT NOCOPY PKBCELEMMEDI.TYRCTBELEMMEDI,
    IOTBTIPOCONS      IN OUT NOCOPY DATIPOCONS.TYTBTCONCODI,
    IORCTBLECTELME    IN OUT NOCOPY PKTBLLECTELME.TYTBLECTELME
)
IS
    NUCONT   NUMBER;
    NUPOS    NUMBER;
    
    
    RCSERVSUSC      SERVSUSC%ROWTYPE;

    
    NUSERVCODI      SERVICIO.SERVCODI%TYPE;

    
    RCSERVICIO      SERVICIO%ROWTYPE;

    NUPERIFACT      PERIFACT.PEFACODI%TYPE;

    


    PROCEDURE FILLRECORD
    IS
        NULEAN          LECTELME.LEEMLEAN%TYPE;
        NUFEAN          LECTELME.LEEMFELA%TYPE ;
        NUAUX           NUMBER;
        
        NUORDERID       OR_ORDER.ORDER_ID%TYPE;
        NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;

        


        PROCEDURE GETDATA
        IS
        BEGIN
            PKERRORS.PUSH ('pkBOReadingGeneration.insertLecture.fillRecord.GetData');

            TD('Codigo elmecodi '|| IOTBELEMENTOS.TBELMECODI(INUPOS));
            
            
            PKBCLECTELME.GETLASTLECTURE(IOTBELEMENTOS.TBELMEIDEM(INUPOS), 
                                        IOTBTIPOCONS(NUCONT), 
                                        NULEAN, 
                                        NUFEAN);   

            
            NUAUX := GTBTCONRESET.FIRST;
            WHILE (NUAUX IS NOT NULL ) LOOP
                IF (GTBTCONRESET(NUAUX) =  IOTBTIPOCONS(NUCONT)) THEN
                    NULEAN := 0;
                END IF;
                NUAUX := GTBTCONRESET.NEXT(NUAUX);
            END LOOP;

            PKERRORS.POP;
        EXCEPTION
            WHEN LOGIN_DENIED OR
                PKCONSTANTE.EXERROR_LEVEL2 OR
                EX.CONTROLLED_ERROR THEN
                PKERRORS.POP;
                RAISE;
            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
                RAISE;

        END GETDATA;
    BEGIN
        PKERRORS.PUSH ('pkBOReadingGeneration.insertLecture.FillRecord');

        
        GETDATA;

        IORCTBLECTELME.LEEMELME(NUPOS) := IOTBELEMENTOS.TBELMEIDEM(INUPOS);
        IORCTBLECTELME.LEEMTCON(NUPOS) := IOTBTIPOCONS(NUCONT);

        
        OR_BOORDERACTIVITIES.CREATEACTIVITY(CNUACTIVITY,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            INUADDRESSID,
                                            NULL,
                                            INUSUBSCRIBERID,
                                            INUSUBSCRIPTIONID,
                                            INUPRODUCTID,
                                            NULL,
                                            NULL,
                                            GRCPERICOSE.PECSFECF,
                                            NULL,
                                            NULL,
                                            FALSE,
                                            NULL,
                                            NUORDERID,
                                            NUORDERACTIVITY,
                                            NULL,
                                            CSBNO,
                                            IOTBELEMENTOS.TBELMEPOSI(INUPOS),
                                            INUROUTEID,
                                            INUCONSECUTIVE);

        IORCTBLECTELME.LEEMPEFA(NUPOS) := NUPERIFACT;
        IORCTBLECTELME.LEEMCLEC(NUPOS) := CSBBILL_READING_CAUSE;
        IORCTBLECTELME.LEEMPECS(NUPOS) := GRCPERICOSE.PECSCONS;
        IORCTBLECTELME.LEEMCONS(NUPOS) := CM_BOSEQUENCE.FNULECTELMENEXTSEQVAL;
        IORCTBLECTELME.LEEMFAME(NUPOS) := NULL;
        IORCTBLECTELME.LEEMSESU(NUPOS) := INUPRODUCTID;
        IORCTBLECTELME.LEEMCMSS(NUPOS) := NULL;
        IORCTBLECTELME.LEEMLEAN(NUPOS) := NULEAN ;
        IORCTBLECTELME.LEEMFELA(NUPOS) := NUFEAN ;
        IORCTBLECTELME.LEEMOBLE(NUPOS) := NULL ;
        IORCTBLECTELME.LEEMLETO(NUPOS) := NULL ;
        IORCTBLECTELME.LEEMFELE(NUPOS) := NULL ;
        IORCTBLECTELME.LEEMFLCO(NUPOS) := NULL ;
        IORCTBLECTELME.LEEMPETL(NUPOS) := NULL ;
        IORCTBLECTELME.LEEMOBSB(NUPOS) := NULL ;
        IORCTBLECTELME.LEEMOBSC(NUPOS) := NULL ;
        IORCTBLECTELME.LEEMDOCU(NUPOS) := NUORDERACTIVITY;

        
        NUPOS := NUPOS + 1;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR
            PKCONSTANTE.EXERROR_LEVEL2 OR
            EX.CONTROLLED_ERROR THEN
            IF (IORCTBLECTELME.LEEMCONS.EXISTS(NUPOS)) THEN
                IORCTBLECTELME.LEEMCONS.DELETE(NUPOS);
            END IF;
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            IF (IORCTBLECTELME.LEEMCONS.EXISTS(NUPOS)) THEN
                IORCTBLECTELME.LEEMCONS.DELETE(NUPOS);
            END IF;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
            RAISE;
    END FILLRECORD;
BEGIN
    PKERRORS.PUSH ('pkBOReadingGeneration.insertLecture');

    NUCONT := IOTBTIPOCONS.FIRST ;

    
    
    NUPOS := NVL(IORCTBLECTELME.LEEMCONS.LAST,0)+1;

    
    RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD(INUPRODUCTID);

    
    
    
    NUSERVCODI := RCSERVSUSC.SESUSERV;

    RCSERVICIO := PKTBLSERVICIO.FRCGETRECORD(NUSERVCODI);

    
    PKBCPERIFACT.GETBILLPERBYCONSPER(RCSERVSUSC.SESUCICL,
                                     GRCPERICOSE.PECSCONS,
                                     NUPERIFACT,
                                     RCSERVICIO.SERVTICO);

    
    
    WHILE ( NUCONT IS NOT NULL ) LOOP
        
        FILLRECORD;

        NUCONT := IOTBTIPOCONS.NEXT(NUCONT) ;
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        RAISE;
END INSERTLECTURE;








































































PROCEDURE PROCESSELEMMEDI
(
    INUPRODUCTID      IN            PR_PRODUCT.PRODUCT_ID%TYPE,
    INUADDRESSID      IN            AB_ADDRESS.ADDRESS_ID%TYPE,
    INUROUTEID        IN            OR_ROUTE_PREMISE.ROUTE_ID%TYPE,
    INUCONSECUTIVE    IN            OR_ROUTE_PREMISE.CONSECUTIVE%TYPE,
    INUSUBSCRIBERID   IN            GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
    INUSUBSCRIPTIONID IN            SUSCRIPC.SUSCCODI%TYPE,
    IOTBELEMENTOS     IN OUT NOCOPY PKBCELEMMEDI.TYRCTBELEMMEDI,
    IORCTBLECTELME    IN OUT NOCOPY PKTBLLECTELME.TYTBLECTELME
)
IS
    TBTIPOCONS DATIPOCONS.TYTBTCONCODI;
    NUCONT     NUMBER;
BEGIN
    PKERRORS.PUSH ('pkBOReadingGeneration.processElemmedi');

    
    NUCONT  := IOTBELEMENTOS.TBROWID.FIRST;

    WHILE ( NUCONT IS NOT NULL ) LOOP
        
        IF (NVL(IOTBELEMENTOS.TBELMECLEM(NUCONT),-1) NOT IN (CM_BCCONSTANTS.CNUMEDIDOR_TELEMEDIDO,
                                                             CM_BCCONSTANTS.CNUMACRO_MED_TELEMEDIDO)) THEN
            
            
            GETTIPOCONS(INUPRODUCTID,
                        IOTBELEMENTOS.TBELMECODI(NUCONT),
                        IOTBELEMENTOS.TBGAMAID(NUCONT),
                        TBTIPOCONS);

            
            INSERTLECTURE(INUPRODUCTID,
                          INUADDRESSID,
                          NUCONT,
                          INUROUTEID,
                          INUCONSECUTIVE,
                          INUSUBSCRIBERID,
                          INUSUBSCRIPTIONID,
                          IOTBELEMENTOS,
                          TBTIPOCONS,
                          IORCTBLECTELME);
        END IF;

        NUCONT  := IOTBELEMENTOS.TBROWID.NEXT(NUCONT);

    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        RAISE;
END PROCESSELEMMEDI;









































PROCEDURE PROCESSPRODUCT
(
    INUPRODUCTID   IN            PR_PRODUCT.PRODUCT_ID%TYPE,
    IORCTBLECTELME IN OUT NOCOPY PKTBLLECTELME.TYTBLECTELME
)
IS
    TBELEMMEDI   PKBCELEMMEDI.TYRCTBELEMMEDI;         
    NUERRORCODE  GE_ERROR_LOG.ERROR_LOG_ID%TYPE;      
    SBERRORMSG   GE_ERROR_LOG.DESCRIPTION%TYPE;       
    RCPRODUCT    SERVSUSC%ROWTYPE;                    
    RCPROD       DAPR_PRODUCT.STYPR_PRODUCT;          
    RCTBLECTELME PKTBLLECTELME.TYTBLECTELME;          
    SBDETINCO    INCOFACT.INFADESC%TYPE;              
    
    NUBASEADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE;
    NUPREMISEID     OR_ROUTE_PREMISE.PREMISE_ID%TYPE;
    NUROUTEID       OR_ROUTE_PREMISE.ROUTE_ID%TYPE;
    NUCONSECUTIVE   OR_ROUTE_PREMISE.CONSECUTIVE%TYPE;
BEGIN
    PKERRORS.PUSH ('pkBOReadingGeneration.ProcessProduct');

    SAVEPOINT SPPRODUCT;
    PKBCELEMMEDI.GETELEMMEDIBYPRODUCT(INUPRODUCTID,
                                      GRCPERICOSE.PECSFECF,
                                      TBELEMMEDI);
                                      
    
    IF (GNUPROGRAM IS NULL) THEN
        GNUPROGRAM := GE_BCPROCESOS.FNUGETPROCESS(CSBFGRL);
    END IF;
                                      
    
    IF (TBELEMMEDI.TBROWID.COUNT>0) THEN
        
        DAPR_PRODUCT.GETRECORD(INUPRODUCTID,
                               RCPROD);

        
        NUBASEADDRESSID := AB_BOADDRESS.FNUGETBASEADDR(RCPROD.ADDRESS_ID);
        NUPREMISEID := DAAB_ADDRESS.FNUGETESTATE_NUMBER(NUBASEADDRESSID);
        OR_BCROUTEPREMISE.GETDEDICROUTEPREMTASK(NUPREMISEID,GNUTASKTYPEID,NUROUTEID,NUCONSECUTIVE);
        
        RCTBLECTELME := IORCTBLECTELME;
        PROCESSELEMMEDI(INUPRODUCTID,
                        RCPROD.ADDRESS_ID,
                        NUROUTEID,
                        NUCONSECUTIVE,
                        PKTBLSUSCRIPC.FNUGETCUSTOMER(RCPROD.SUBSCRIPTION_ID),
                        RCPROD.SUBSCRIPTION_ID,
                        TBELEMMEDI,
                        RCTBLECTELME);
        IORCTBLECTELME := RCTBLECTELME;
        TD('Producto con medidores: '||INUPRODUCTID);
    ELSE
        
        RCPRODUCT := PKTBLSERVSUSC.FRCGETRECORD(INUPRODUCTID);
        
        
        CM_BOCONSUMPTIONENGINE.ESTIMATECONSUMPTION(RCPRODUCT,
                                                   GRCPERICOSE);
        GBLCONSUMPTIONGEN := TRUE;
        TD('Producto sin medidores: '||INUPRODUCTID);
    END IF;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        ROLLBACK TO SAVEPOINT SPPRODUCT;
        GBLHASERRORS := TRUE;
        PKERRORS.GETERRORVAR(NUERRORCODE,
                             SBERRORMSG);
       
        SBDETINCO := 'Error procesando el producto: '||INUPRODUCTID||' [' || TO_CHAR(NUERRORCODE) || '] - '||SBERRORMSG;
        
        SAVELOGFILE(GSBERRORFILENAME, SBDETINCO);
        
        
        FA_BOINCOFACT.REPORTINCONSISTENCY
        (
            GSBPROGID,                    
            GNUPROGRAM,                   
            FA_BCINCOFACT.CSBTIPO_PRODUCTO, 
            INUPRODUCTID,                 
            PKCONSTANTE.NULLSB,           
            SBDETINCO,                    
            NULL,                         
            GRCPERICOSE.PECSCONS          
        );
         
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        ROLLBACK TO SAVEPOINT SPPRODUCT;
        GBLHASERRORS := TRUE;
        PKERRORS.GETERRORVAR(NUERRORCODE,
                             SBERRORMSG);
        
        SBDETINCO := 'Error procesando el producto: '||INUPRODUCTID||' [' || TO_CHAR(NUERRORCODE) || '] - '||SBERRORMSG;
        
        SAVELOGFILE(GSBERRORFILENAME,
                    SBDETINCO);
        
        FA_BOINCOFACT.REPORTINCONSISTENCY
        (
            GSBPROGID,                    
            GNUPROGRAM,                   
            FA_BCINCOFACT.CSBTIPO_PRODUCTO, 
            INUPRODUCTID,                 
            PKCONSTANTE.NULLSB,           
            SBDETINCO,                    
            NULL,                         
            GRCPERICOSE.PECSCONS          
        );
END PROCESSPRODUCT;























PROCEDURE PROCESSPRODUCTS
(
    IOTBPRODUCTS    IN OUT NOCOPY DAPR_PRODUCT.TYTBPRODUCT_ID,
    IORCTBLECTELME  IN OUT NOCOPY PKTBLLECTELME.TYTBLECTELME
)
IS
    NUINDEX     NUMBER;  
BEGIN
    PKERRORS.PUSH ('pkBOReadingGeneration.ProcessProducts');

    NUINDEX := IOTBPRODUCTS.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        PROCESSPRODUCT(IOTBPRODUCTS(NUINDEX),
                       IORCTBLECTELME);
        NUINDEX := IOTBPRODUCTS.NEXT(NUINDEX);
    END LOOP;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        RAISE;

END PROCESSPRODUCTS;







































PROCEDURE GENLECTURESBYDIVI
(
    INUDIVI        IN     REACGELE.RAGLDIVI%TYPE,
    INUPERICOSE    IN     PERICOSE.PECSCONS%TYPE,
    ISBPROGID      IN     ESTAPROG.ESPRPROG%TYPE,
    INUIDPROC      IN     NUMBER
)
IS
    RCREACGELE        REACGELE%ROWTYPE;            
    RCTBLECTELME      PKTBLLECTELME.TYTBLECTELME;  
    SBMENSAJES        VARCHAR2(1000);              
    NUPROCESAR        NUMBER(1);                   
    TBPRODUCTS        DAPR_PRODUCT.TYTBPRODUCT_ID; 

    


    PROCEDURE INICIALIZATABLA
    IS
    BEGIN
        PKERRORS.PUSH ('pkBOReadingGeneration.genLecturesbyDivi.inicializaTabla');

        
        RCTBLECTELME.LEEMELME.DELETE ;
        RCTBLECTELME.LEEMTCON.DELETE ;
        RCTBLECTELME.LEEMPEFA.DELETE ;
        RCTBLECTELME.LEEMOBLE.DELETE ;
        RCTBLECTELME.LEEMLEAN.DELETE ;
        RCTBLECTELME.LEEMFELA.DELETE ;
        RCTBLECTELME.LEEMLETO.DELETE ;
        RCTBLECTELME.LEEMFELE.DELETE ;
        RCTBLECTELME.LEEMFAME.DELETE ;
        RCTBLECTELME.LEEMDOCU.DELETE ;
        RCTBLECTELME.LEEMSESU.DELETE ;
        RCTBLECTELME.LEEMCMSS.DELETE ;
        RCTBLECTELME.LEEMCONS.DELETE ;
        RCTBLECTELME.LEEMPECS.DELETE ;
        RCTBLECTELME.LEEMPETL.DELETE ;
        RCTBLECTELME.LEEMCLEC.DELETE;
        RCTBLECTELME.LEEMOBSB.DELETE;
        RCTBLECTELME.LEEMOBSC.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR
            PKCONSTANTE.EXERROR_LEVEL2 OR
            EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
            RAISE;
            
    END INICIALIZATABLA;

    
    PROCEDURE INSERTAREGISTROS
    IS
    BEGIN
        PKERRORS.PUSH ('pkBOReadingGeneration.genLecturesbyDivi.insertaRegistros');

        IF ((RCTBLECTELME.LEEMCONS.COUNT = 0) AND NOT(GBLCONSUMPTIONGEN)) THEN
            PKERRORS.POP;
            RETURN ;
        END IF;

        IF (RCTBLECTELME.LEEMCONS.COUNT > 0) THEN
            RCREACGELE.RAGLREGE := RCREACGELE.RAGLREGE + RCTBLECTELME.LEEMCONS.COUNT;
            PKTBLLECTELME.INSRECORDS(RCTBLECTELME);
            PKTBLREACGELE.UPRECORD(RCREACGELE);
        END IF;

        
        INICIALIZATABLA;

        
        GBLCONSUMPTIONGEN := FALSE;

        PKGENERALSERVICES.COMMITTRANSACTION;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR
            PKCONSTANTE.EXERROR_LEVEL2 OR
            EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
            RAISE;
            
    END INSERTAREGISTROS;

    


    PROCEDURE INICIALIZAR
    IS
    BEGIN
        PKERRORS.PUSH ('pkBOReadingGeneration.genLecturesbyDivi.inicializar');

        
        GNUDIVI := INUDIVI;

        
        GRCPERICOSE := PKTBLPERICOSE.FRCGETRECORD(INUPERICOSE);

        
        NUPROCESAR := 1;

        
        GBLCONSUMPTIONGEN := FALSE;
        
        
        GBLHASERRORS := FALSE;
        
        
        GSBPROGID := ISBPROGID||''||INUIDPROC;

        
        GSBPATH := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE ( CSBTRACE_PATH );
        IF (GSBPATH IS NULL ) THEN
            GSBPATH := '/tmp';
        END IF;
        
        
        GSBERRORFILENAME := 'LogFGRL_'||GRCPERICOSE.PECSCONS||'_'||GNUDIVI||'_'||
                             TO_CHAR(UT_DATE.FDTSYSDATE,
                                     'DD_MM_YYYY_HH24_MI_SS')||'.err';

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR
            PKCONSTANTE.EXERROR_LEVEL2 OR
            EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
            RAISE;
            
    END INICIALIZAR;
    



    PROCEDURE INITIALIZELOG
    IS
        NUERRORCODE GE_ERROR_LOG.ERROR_LOG_ID%TYPE; 
        SBERRORMSG  GE_ERROR_LOG.DESCRIPTION%TYPE;  
    BEGIN
        PKERRORS.PUSH ('pkBOReadingGeneration.genLecturesbyDivi.initializeLog');
        
        PKBCREACGELE.BLOCKTABLE;

        RCREACGELE := PKBCREACGELE.FRCGETREGBYPECSDIVI(GRCPERICOSE.PECSCONS,
                                                       GNUDIVI);
                                                       
        
        
        
        IF (RCREACGELE.RAGLCONS IS NULL ) THEN

            RCREACGELE.RAGLCONS := CM_BOSEQUENCE.FNUREACGELENEXTSEQVAL;
            GNUREACGELE         := RCREACGELE.RAGLCONS;
            RCREACGELE.RAGLPECS := GRCPERICOSE.PECSCONS ;
            RCREACGELE.RAGLDIVI := GNUDIVI ;
            RCREACGELE.RAGLFINA := 'N' ;
            RCREACGELE.RAGLSEID := PKSESSIONMGR.FSBGETPROCSESSION;
            RCREACGELE.RAGLFECH := UT_DATE.FDTSYSDATE;
            RCREACGELE.RAGLRELE := NULL;
            RCREACGELE.RAGLREGE := 0;

            PKTBLREACGELE.INSRECORD(RCREACGELE);

        ELSE
            
            IF ( RCREACGELE.RAGLFINA = 'N' ) THEN
                
                
                
                
                IF (PKSESSIONMGR.FSBGETPROCSESSION != RCREACGELE.RAGLSEID ) THEN
                    IF ( PKSESSIONMGR.FBLEXISTSESSION(RCREACGELE.RAGLSEID ) ) THEN
                        NUPROCESAR := 0;
                        
                        ERRORS.SETERROR(CNUDIVI_PROCESSED,
                                        'ya se encuentra en ejecuci�n|'||GRCPERICOSE.PECSCONS ||'|'|| GNUDIVI);
                        RAISE EX.CONTROLLED_ERROR;
                    ELSE
                        
                        RCREACGELE.RAGLSEID := PKSESSIONMGR.FSBGETPROCSESSION;

                        PKTBLREACGELE.UPRECORD(RCREACGELE);
                    END IF;
                END IF;
                GNUREACGELE := RCREACGELE.RAGLCONS;
            ELSE
                NUPROCESAR := 0;
                
                ERRORS.SETERROR(CNUDIVI_PROCESSED,
                                'ya fue ejecutado|'||GRCPERICOSE.PECSCONS ||'|'|| GNUDIVI);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

        END IF;
        PKGENERALSERVICES.COMMITTRANSACTION;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR
            PKCONSTANTE.EXERROR_LEVEL2 OR
            EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            PKERRORS.GETERRORVAR(NUERRORCODE,
                                 SBERRORMSG);
            SAVELOGFILE(GSBERRORFILENAME,
                        'Error procesando el id de proceso: '||GNUDIVI||' [' || TO_CHAR(NUERRORCODE) || '] - '||SBERRORMSG);
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            PKERRORS.GETERRORVAR(NUERRORCODE,
                                 SBERRORMSG);
            SAVELOGFILE(GSBERRORFILENAME,
                        'Error procesando el id de proceso: '||GNUDIVI||' [' || TO_CHAR(NUERRORCODE) || '] - '||SBERRORMSG);
            
    END INITIALIZELOG;

    


    PROCEDURE ACTAVANCE
    (
        INUPROCESADOS IN NUMBER
    )
    IS
        SBMENSAJEPROCESANDO VARCHAR2(1000);     
        NUPERCENTAGE        NUMBER;             
    BEGIN
        PKERRORS.PUSH ('pkBOReadingGeneration.genLecturesbyDivi.actAvance');
        
        SBMENSAJEPROCESANDO := PKTBLMENSAJE.FSBGETDESCRIPTION(PKCONSTANTE.CSBDIVISION,
                                                              PKCONSTANTE.CSBMOD_GRL,
                                                              CNUPROCESS);

      	PKSTATUSEXEPROGRAMMGR.UPDATEPERCENTAGE(GSBPROGID,
                                               SBMENSAJEPROCESANDO,
                                               INUPROCESADOS,
                                               NUPERCENTAGE);
                                               

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR
            PKCONSTANTE.EXERROR_LEVEL2 OR
            EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
            RAISE;
    
    END ACTAVANCE;
    
    


    PROCEDURE PROCESSENDED
    IS
        SBMENSAJEEXITO      VARCHAR2(1000);     
        NUPERCENTAGE        NUMBER := 100;      
    BEGIN
        PKERRORS.PUSH ('pkBOReadingGeneration.genLecturesbyDivi.ProcessEnded');
        
        SBMENSAJEEXITO := PKTBLMENSAJE.FSBGETDESCRIPTION(PKCONSTANTE.CSBDIVISION,
                                                         PKCONSTANTE.CSBMOD_SAT,
                                                         CNUSUCCESS);
      	PKSTATUSEXEPROGRAMMGR.UPSTATUSEXEPROG(GSBPROGID,
                                              SBMENSAJEEXITO,
                                              NUPERCENTAGE,
                                              NULL);

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR
            PKCONSTANTE.EXERROR_LEVEL2 OR
            EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
            RAISE;
    
    END PROCESSENDED;

BEGIN

    PKERRORS.PUSH ('pkBOReadingGeneration.genLecturesbyDivi');

    
    INICIALIZAR ;
    INICIALIZATABLA ;

    
    GETPARAMETERS ;

    
    INITIALIZELOG ;

    
    IF (NUPROCESAR = 1) THEN
        
        OPEN PR_BCPRODUCT.CUPRODUCTSTOREAD(GRCPERICOSE.PECSCICO,
                                           GNUDIVI,
                                           GRCPERICOSE.PECSCONS);
        LOOP
            PR_BCPRODUCT.GETPRODTOREAD(CNUAMOUNT,
                                       TBPRODUCTS);

            EXIT WHEN TBPRODUCTS.FIRST IS NULL;

            
            PROCESSPRODUCTS(TBPRODUCTS,
                            RCTBLECTELME);

            
            ACTAVANCE(TBPRODUCTS.COUNT);

            
            
            IF (   (RCTBLECTELME.LEEMCONS.COUNT >= 100)
                OR GBLCONSUMPTIONGEN) THEN
                INSERTAREGISTROS ;
            END IF;
        END LOOP;
        
        CLOSE PR_BCPRODUCT.CUPRODUCTSTOREAD;

        
        
        IF (NOT(GBLHASERRORS)) THEN
            RCREACGELE.RAGLFINA := 'S' ;
        END IF;
        
        
        INSERTAREGISTROS ;
        
        PKTBLREACGELE.UPRECORD(RCREACGELE);

    END IF;
    PKGENERALSERVICES.SETTRACEDATAOFF;
    
    IF (INUDIVI = CNUMAXDIVI-1) THEN
        PROCESSENDED();
    END IF;
    
    PKGENERALSERVICES.COMMITTRANSACTION;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        IF (PR_BCPRODUCT.CUPRODUCTSTOREAD%ISOPEN) THEN
            CLOSE PR_BCPRODUCT.CUPRODUCTSTOREAD;
        END IF;
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        IF (PR_BCPRODUCT.CUPRODUCTSTOREAD%ISOPEN) THEN
            CLOSE PR_BCPRODUCT.CUPRODUCTSTOREAD;
        END IF;
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        RAISE;
        
END GENLECTURESBYDIVI;





























PROCEDURE CREATEREREADING
(
    INULEEMCONS   IN         LECTELME.LEEMCONS%TYPE,
    INUACTIVITYID IN         GE_ITEMS.ITEMS_ID%TYPE,
    ORCREREADING  OUT NOCOPY LECTELME%ROWTYPE
)
IS
    RCLECTELME      LECTELME%ROWTYPE;                         
    RCPERICOSE      PERICOSE%ROWTYPE;                         
    NUORDERID       OR_ORDER_ACTIVITY.ORDER_ID%TYPE;          
    NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE; 
    
    
    NUSUBSCRIPTIONID    SUSCRIPC.SUSCCODI%TYPE;
    
    NUSUBSCRIBERID      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
    
    
BEGIN
    PKERRORS.PUSH ('pkBOReadingGeneration.CreateRereading');

    
    RCLECTELME := PKTBLLECTELME.FRCGETRECORD(INULEEMCONS,
                                             PKCONSTANTE.NOCACHE);

    
    PKBOREADINGHISTORY.INSERTHISTORIC(RCLECTELME);
    
    
    RCPERICOSE := PKTBLPERICOSE.FRCGETRECORD(RCLECTELME.LEEMPECS);

    
    NUSUBSCRIPTIONID := DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(RCLECTELME.LEEMSESU);

    
    NUSUBSCRIBERID  := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUSUBSCRIPTIONID);

    
    OR_BOORDERACTIVITIES.CREATEACTIVITY(INUACTIVITYID,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        DAPR_PRODUCT.FNUGETADDRESS_ID(RCLECTELME.LEEMSESU),
                                        NULL,
                                        NUSUBSCRIBERID,
                                        NUSUBSCRIPTIONID,
                                        RCLECTELME.LEEMSESU,
                                        NULL,
                                        NULL,
                                        RCPERICOSE.PECSFECF,
                                        NULL,
                                        NULL,
                                        FALSE,
                                        NULL,
                                        NUORDERID,
                                        NUORDERACTIVITY,
                                        NULL,
                                        CSBNO,
                                        PKTBLELEMMEDI.FNUGETELMEPOSI(RCLECTELME.LEEMELME));
                                        
    
    PKBCLECTELME.SETREADINGCHECKFLAG(INULEEMCONS,
                                     NUORDERACTIVITY);
    RCLECTELME.LEEMDOCU := NUORDERACTIVITY;
    RCLECTELME.LEEMFLCO := 'S';
    








    ORCREREADING        := RCLECTELME;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR
        PKCONSTANTE.EXERROR_LEVEL2 OR
        EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        RAISE;

END CREATEREREADING;

END PKBOREADINGGENERATION;