PACKAGE BODY MO_BOGenericValid AS
    

































































    
    
    
    
    CSBVERSION              CONSTANT VARCHAR2(250)  := 'SAO213317';

    
    CNUERROR_3349           CONSTANT NUMBER(4)      := 3349;
    
    CNUERROR_3195           CONSTANT NUMBER(4)      := 3195;
    
    CNUPROD_MOT_PEND        CONSTANT NUMBER(4)      := 3331;
    
    CNUSUBSCHASACTREQUEST   CONSTANT NUMBER(4)      := 5163;
    
    CNUREQUEST_EXIST        CONSTANT NUMBER(4)      := 1731;
    
    CNUPRODWITHREQ          CONSTANT NUMBER(4)      := 5542;
    
    CNUERROR_62	            CONSTANT NUMBER(4)      := 62;
    
    CNUERROR_118501         CONSTANT NUMBER(6)      :=  118501;
    
    CNUERROR_118480         CONSTANT NUMBER(6)      :=  118480;
    
    CNUATTRTRAFREST         CONSTANT NUMBER(3)      :=  203;
    
    CSBCONEXION             CONSTANT VARCHAR2(1)    := 'C';
    
    CSBDESCONEXION          CONSTANT VARCHAR2(1)    := 'D';
    
    CSBRETIRO               CONSTANT VARCHAR2(1)    := 'R';
    
    
    
    
    GBOPARAMLOADED  BOOLEAN := FALSE;

    
    SBERRMSG        GE_ERROR_LOG.DESCRIPTION%TYPE;

    
    
    

    

















    FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN CSBVERSION;
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END FSBVERSION;

    


















    PROCEDURE EXISTCLASSCOMPINPROD
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        ISBSERVICENUMBER        IN  MO_COMPONENT.SERVICE_NUMBER%TYPE,
        INUCOMPTYPEID           IN  MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCLASSSERVICE         IN  MO_COMPONENT.CLASS_SERVICE_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;

        CURFCHILDDIRCOMP    CONSTANTS.TYREFCURSOR;
        RCCHILDDIRCOMP      DAPR_COMPONENT.STYPR_COMPONENT;

        NUCLASSSERVICEID    NUMBER;
        NUCOMPONENTSTATUSID NUMBER;

        NUCOMPONENTID       PR_COMPONENT.COMPONENT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Servicio MO_BOGenericValid.ExistClassCompInProd',12);

        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;

        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(INUPRODUCTID);

        
        DAPS_CLASS_SERVICE.ACCKEY(INUCLASSSERVICE);

        NUCOMPONENTID := PR_BOCOMPONENT.FNUGETCOMPONENTID(INUPRODUCTID,
                                                          ISBSERVICENUMBER,
                                                          INUCOMPTYPEID
                                                         );
        UT_TRACE.TRACE('Identificador del componente [ '||NUCOMPONENTID||' ]
                        tipo de componente [ '||INUCOMPTYPEID||' ] '||
                        'Nï¿½mero de servicio [ '||ISBSERVICENUMBER||' ] '
                        );
        CURFCHILDDIRCOMP := PR_BCCOMPONENT.FRFGETCHILDDIRECTCOMPONENT(NUCOMPONENTID);
        FETCH CURFCHILDDIRCOMP INTO RCCHILDDIRCOMP;
        WHILE CURFCHILDDIRCOMP%FOUND LOOP
            UT_TRACE.TRACE('Componente          : ['||RCCHILDDIRCOMP.COMPONENT_ID||']',6);
            UT_TRACE.TRACE('Numero de Servicio  : ['||RCCHILDDIRCOMP.SERVICE_NUMBER||']',7);
            UT_TRACE.TRACE('Clase de Servicio   : ['||RCCHILDDIRCOMP.CLASS_SERVICE_ID||']',7);
            UT_TRACE.TRACE('Tipo de Componente  : ['||RCCHILDDIRCOMP.COMPONENT_TYPE_ID||']',7);
            UT_TRACE.TRACE('Estado Componente   : ['||RCCHILDDIRCOMP.COMPONENT_STATUS_ID||']',7);

            NUCLASSSERVICEID := RCCHILDDIRCOMP.CLASS_SERVICE_ID;
            NUCOMPONENTSTATUSID := RCCHILDDIRCOMP.COMPONENT_STATUS_ID;
            
            IF (( RCCHILDDIRCOMP.SERVICE_NUMBER = ISBSERVICENUMBER)) THEN
                
                IF (NUCLASSSERVICEID = INUCLASSSERVICE) THEN
                    
                    IF (PR_BOUTIL.STATUSACTIVE(NUCOMPONENTSTATUSID,PR_BOPARAMETER.FNUGETCOMPSTAT)) THEN
                        OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
                        EXIT;
                    END IF;
                END IF;
                IF (OSBRESPONSE = GE_BOCONSTANTS.CSBYES) THEN
                    EXIT;
                END IF;
            END IF;
            FETCH CURFCHILDDIRCOMP INTO RCCHILDDIRCOMP;
        END LOOP;
        CLOSE CURFCHILDDIRCOMP;
        UT_TRACE.TRACE('Respuesta   : ['||OSBRESPONSE||']',4);

        UT_TRACE.TRACE('Finaliza Servicio MO_BOGenericValid.ExistClassCompInProd',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCHILDDIRCOMP);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCHILDDIRCOMP);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END EXISTCLASSCOMPINPROD;

    



















    PROCEDURE FIRSTPACKACTIVEBYCLIENT
    (
        INUSUBSCRIBERID         IN  MO_PACKAGES.SUBSCRIBER_ID%TYPE,
        ISBTAGNAME              IN  VARCHAR2,
        ONUPACKAGETYPEID        OUT MO_PACKAGES.PACKAGE_TYPE_ID%TYPE,
        ONUPACKAGEID            OUT MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        TBFIELDS    UT_STRING.TYTB_STRING;
        BIINDEX     BINARY_INTEGER  := 1;
        NUMAX       NUMBER          := NULL;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.FirstPackActiveByClient Cliente:['||INUSUBSCRIBERID||']',8);
        UT_TRACE.TRACE('Tag_Name:['||ISBTAGNAME||']',8);

        
        UT_STRING.EXTSTRING(ISBTAGNAME,GE_BOCONSTANTS.CSBDELIMITERBLOCKS,TBFIELDS);

        
        NUMAX := TBFIELDS.COUNT;
        WHILE (BIINDEX <= NUMAX) LOOP
            VALIDPACKAGESACTIVES(INUSUBSCRIBERID,TBFIELDS(BIINDEX),ONUPACKAGEID);
            BIINDEX := BIINDEX + 1;
            IF(ONUPACKAGEID IS NOT NULL) THEN
                EXIT;
            END IF;
        END LOOP;

        
        IF (ONUPACKAGEID IS NOT NULL) THEN
            ONUPACKAGETYPEID := DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID(ONUPACKAGEID);
        END IF;

        UT_TRACE.TRACE('Paquete:['||ONUPACKAGEID||']Tipo:['||ONUPACKAGETYPEID||']',8);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.FirstPackActiveByClient',8);
	EXCEPTION
   	   WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
	   WHEN OTHERS THEN
		 ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
    END FIRSTPACKACTIVEBYCLIENT;

    

























    PROCEDURE FIRSTPRODMOTIVEACTIVE
    (
        INUPRODUCTID            IN  MO_MOTIVE.PRODUCT_ID%TYPE,
        ISBTAGNAME              IN  MO_MOTIVE.TAG_NAME%TYPE,
        ONUMOTIVEID             OUT MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCMOTIVE    DAMO_MOTIVE.STYMO_MOTIVE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.FirstProdMotiveActive. Producto:['||INUPRODUCTID||']Tag_Name:['||ISBTAGNAME||']',12);

        OPEN MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG(INUPRODUCTID,ISBTAGNAME);
        FETCH MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG INTO RCMOTIVE;
        WHILE MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG%FOUND LOOP
            UT_TRACE.TRACE('Motivo:['||RCMOTIVE.MOTIVE_ID||']Estado:['||RCMOTIVE.MOTIVE_STATUS_ID||']',12);
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) THEN
                ONUMOTIVEID := RCMOTIVE.MOTIVE_ID;
                EXIT;
            END IF;
            FETCH MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG INTO RCMOTIVE;
        END LOOP;
        CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG;
        UT_TRACE.TRACE('Motivo Encontrado:['||ONUMOTIVEID||']',12);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.FirstProdMotiveActive',12);
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG;
            END IF;
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            IF (MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG;
            END IF;
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END FIRSTPRODMOTIVEACTIVE;

    
















    FUNCTION  FBLVALISPRODUCTORIGIN
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        ISBCOMPONENTTYPES       IN  VARCHAR2
    )
    RETURN BOOLEAN
    IS
        OBLRESULT   BOOLEAN  :=FALSE;

        FUNCTION FBLORIGINOFCOMPONENT
        RETURN BOOLEAN
        IS
            RESULT          BOOLEAN := FALSE;
            RCCOMPONENT     DAPR_COMPONENT.STYPR_COMPONENT;

        BEGIN
            
            OPEN  PR_BCCOMPONENT.CUCOMPPRODUCTORIGIN(INUPRODUCTID);
            FETCH PR_BCCOMPONENT.CUCOMPPRODUCTORIGIN INTO RCCOMPONENT;
            
            WHILE ((PR_BCCOMPONENT.CUCOMPPRODUCTORIGIN%FOUND) AND (NOT RESULT)) LOOP
            
                UT_TRACE.TRACE('Encontro en componente de productos ['||RCCOMPONENT.COMPONENT_ID||']',11);

                
                IF(INSTR(',' ||ISBCOMPONENTTYPES|| ',' , ',' || RCCOMPONENT.COMPONENT_TYPE_ID || ',') > 0) THEN
                    RESULT:=TRUE;
                END IF;
                FETCH PR_BCCOMPONENT.CUCOMPPRODUCTORIGIN INTO RCCOMPONENT;
            
            END LOOP;

            CLOSE PR_BCCOMPONENT.CUCOMPPRODUCTORIGIN;
            RETURN RESULT;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                IF PR_BCCOMPONENT.CUCOMPPRODUCTORIGIN%ISOPEN THEN
                    CLOSE PR_BCCOMPONENT.CUCOMPPRODUCTORIGIN;
                END IF;
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                IF PR_BCCOMPONENT.CUCOMPPRODUCTORIGIN%ISOPEN THEN
                    CLOSE PR_BCCOMPONENT.CUCOMPPRODUCTORIGIN;
                END IF;
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FBLORIGINOFCOMPONENT;

        FUNCTION FBLORIGINOFMOCOMPONENT
        RETURN BOOLEAN
        IS
            RESULT              BOOLEAN := FALSE;
            RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
            NUMOTIVESTATUSID    MO_MOTIVE.MOTIVE_STATUS_ID%TYPE;
        BEGIN
            
            OPEN  MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN(INUPRODUCTID);
            FETCH MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN INTO RCCOMPONENT;
            
            WHILE ((MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN%FOUND) AND (NOT RESULT)) LOOP
            
                UT_TRACE.TRACE('Encontro en componente de motivos ['||RCCOMPONENT.COMPONENT_ID||']',11);
                NUMOTIVESTATUSID := DAMO_MOTIVE.FNUGETMOTIVE_STATUS_ID(RCCOMPONENT.MOTIVE_ID);

                UT_TRACE.TRACE('Estado del motivo ['||NUMOTIVESTATUSID||']',11);

                IF(NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(NUMOTIVESTATUSID)) AND (INSTR(',' ||ISBCOMPONENTTYPES|| ',' , ',' || RCCOMPONENT.COMPONENT_TYPE_ID || ',') > 0) THEN
                    RESULT:=TRUE;
                END IF;
                
                FETCH MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN INTO RCCOMPONENT;
            
            END LOOP;
            CLOSE MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN;
            RETURN RESULT;
        EXCEPTION
          WHEN EX.CONTROLLED_ERROR THEN
                IF MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN%ISOPEN THEN
                   CLOSE MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN;
                END IF;
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                IF MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN%ISOPEN THEN
                   CLOSE MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN;
                END IF;
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FBLORIGINOFMOCOMPONENT;

    BEGIN
        OBLRESULT := FALSE;
        
        IF FBLORIGINOFMOCOMPONENT THEN
            OBLRESULT     := TRUE;
        ELSE
            
            IF FBLORIGINOFCOMPONENT THEN
                OBLRESULT     := TRUE;
            END IF;
        END IF;

        RETURN OBLRESULT;
    EXCEPTION
          WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END FBLVALISPRODUCTORIGIN;

    




















    FUNCTION FSBEXISTCMPINPROD
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        ISBCOMPTYTAG            IN  PS_COMPONENT_TYPE.TAG_NAME%TYPE,
        INUCLASSSERVICEID       IN  PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE
    ) RETURN VARCHAR2
    IS
        SBRESPONSE      VARCHAR2(1) := GE_BOCONSTANTS.CSBNO;
        NUCOMPTYPEID    PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.fsbExistCmpInProd',8);
        NUCOMPTYPEID := PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEBYTAG(ISBCOMPTYTAG);

        FOR RCPRODCOMP IN PR_BCCOMPONENT.CUCOMPONENTSBYTYPEANDCLASS(INUPRODUCTID,NUCOMPTYPEID,INUCLASSSERVICEID)LOOP
            SBRESPONSE := GE_BOCONSTANTS.CSBYES;
            EXIT;
        END LOOP;
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.fsbExistCmpInProd',8);
        RETURN SBRESPONSE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBEXISTCMPINPROD;

	






















    FUNCTION FSBEXISTPLANWFINTRAM
    (
        INUPRODUCTID            IN  MO_MOTIVE.PRODUCT_ID%TYPE,
        INUMOTIVETYPEID         IN  MO_MOTIVE.MOTIVE_TYPE_ID%TYPE
    )RETURN VARCHAR2
    IS
        NUPLANID             WF_INSTANCE.PLAN_ID%TYPE;
        NUSTATUSID           WF_INSTANCE.STATUS_ID%TYPE;

        SBEXISTPLAN          VARCHAR2(1) := GE_BOCONSTANTS.CSBNO;

        CNUENTITYMOTIVEID    CONSTANT NUMBER := GE_BOENTITY.FNUGETENTITY_ID('MO_MOTIVE');
        CNUENTITYPACKAGEID   CONSTANT NUMBER := GE_BOENTITY.FNUGETENTITY_ID('MO_PACKAGES');

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOGenericValid.fsbExistPlanWFInTram',8);

        

        FOR CUMOTIVES IN MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY(INUPRODUCTID,INUMOTIVETYPEID) LOOP

            
            NUPLANID := WF_BOINSTANCE.FNUGETPLANID(CUMOTIVES.MOTIVE_ID,CNUENTITYMOTIVEID);

            
            IF(NUPLANID IS NULL) THEN
                
                NUPLANID := WF_BOINSTANCE.FNUGETPLANID(CUMOTIVES.PACKAGE_ID,CNUENTITYPACKAGEID);
            END IF;

            
            IF(NUPLANID IS NOT NULL) THEN
                
                NUSTATUSID := DAWF_INSTANCE.FNUGETSTATUS_ID(NUPLANID);

                
                IF(NUSTATUSID != WF_BOCONSTANTS.CNUFINISHED AND NUSTATUSID != WF_BOCONSTANTS.CNUANNULLED) THEN
                    SBEXISTPLAN := GE_BOCONSTANTS.CSBYES;
                    EXIT;
                END IF;
            END IF;
        END LOOP;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOGenericValid.fsbExistPlanWFInTram',8);

        RETURN SBEXISTPLAN;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

    END FSBEXISTPLANWFINTRAM;

    





















    FUNCTION FSBISPRODPROVIBYPRTYP
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPRODTYPEID           IN  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUCHILDPRODUCTID    PR_PRODUCT.PRODUCT_ID%TYPE;
        CURFPRODUCTS        CONSTANTS.TYREFCURSOR;
        SBRESPONSE          VARCHAR2(10);
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOGenericValid.fsbIsProdProviByPrTyp',12);
        UT_TRACE.TRACE('Producto ['||INUPRODUCTID||'] Tipo de producto ['||INUPRODTYPEID||']',12);

        
        SBRESPONSE:= GE_BOCONSTANTS.GETNO;

         
        CURFPRODUCTS := PR_BCCOMPONENT.FRFGETPRODBYPROVISIONPRODUCT(INUPRODUCTID);
        FETCH CURFPRODUCTS INTO NUCHILDPRODUCTID;
        WHILE CURFPRODUCTS%FOUND LOOP
            
            IF (DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(NUCHILDPRODUCTID)=INUPRODTYPEID) THEN
                SBRESPONSE:= GE_BOCONSTANTS.GETYES;
                EXIT;
            END IF;
            FETCH CURFPRODUCTS INTO NUCHILDPRODUCTID;
        END LOOP;

        GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODUCTS);

        UT_TRACE.TRACE('Es producto de provisionamiento '||SBRESPONSE,12);

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.fsbIsProdProviByPrTyp',12);

        RETURN SBRESPONSE;

    EXCEPTION
    	  WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODUCTS);
            RAISE EX.CONTROLLED_ERROR;
    	  WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODUCTS);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBISPRODPROVIBYPRTYP;

    


















    FUNCTION FSBVALCOMPPRODINASSOVOD
    (
        INUCOMPPRODUCTID        IN  PR_COMPONENT.COMP_PROD_PROV_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        CNUTAGTVVOD NUMBER := PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEBYTAG('TV_VIDEO_DEMAN');

        CURSOR CUPRODINASSOVOD
        IS
            SELECT  A.*, A.ROWID
            FROM    PR_COMPONENT A
            WHERE    A.COMP_PROD_PROV_ID    = INUCOMPPRODUCTID
            AND      A.COMPONENT_STATUS_ID  IN (5,8)
            AND     A.COMPONENT_TYPE_ID     = CNUTAGTVVOD;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.fsbValCompProdInAssoVod');

        FOR RC IN CUPRODINASSOVOD LOOP
            RETURN GE_BOCONSTANTS.CSBYES;
        END LOOP;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.fsbValCompProdInAssoVod');

        RETURN GE_BOCONSTANTS.CSBNO;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END FSBVALCOMPPRODINASSOVOD;

    



















    FUNCTION FSBVALCOMPPRODINREGASSOVOD
    (
        INUCOMPPRODUCTID    IN MO_COMPONENT.COMP_PROD_PROV_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        CNUTAGTVVOD NUMBER := PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEBYTAG('TV_VIDEO_DEMAN');

        CURSOR CUPRODINREGASSOVOD
        IS
            SELECT  A.*, A.ROWID
            FROM MO_COMPONENT A
            WHERE   A.COMP_PROD_PROV_ID = INUCOMPPRODUCTID
            AND     A.MOTIVE_STATUS_ID  = 15
            AND     A.COMPONENT_TYPE_ID = CNUTAGTVVOD;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.fsbValProdInRegAssoVod');

        FOR RC IN CUPRODINREGASSOVOD LOOP
            RETURN GE_BOCONSTANTS.CSBYES;
        END LOOP;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.fsbValProdInRegAssoVod');

        RETURN GE_BOCONSTANTS.CSBNO;

    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END FSBVALCOMPPRODINREGASSOVOD;

    


















    FUNCTION FNUGETUNCCUPIEDAPARTM
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN NUMBER
    IS
        NUUNCCUPIEDQUANT        NUMBER;
        NUCONSTYOCCUPIEDAPART   NUMBER;
        NUGAUGTYOCCUPIEDAPART   VARCHAR2(1);
        DTSYSDATE               DATE;

    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.fnuGetUnccupiedApartm inuProductId [ '||INUPRODUCTID||']', 10);

        
        NUCONSTYOCCUPIEDAPART := PKGENERALPARAMETERSMGR.FNUGETNUMBERPARAMETER('TIPO_CONS_UNID_DESO');

        
        NUGAUGTYOCCUPIEDAPART := PKGENERALPARAMETERSMGR.FSBGETSTRINGPARAMETER('TIPO_AFOR_UNID_DESO');

        
        DTSYSDATE := UT_DATE.FDTSYSDATE;

        
        NUUNCCUPIEDQUANT := PKBCAFORSESU.FNUGETGAUGEBYCONSANDTYPE
                                            ( INUPRODUCTID,
                                              NUCONSTYOCCUPIEDAPART,
                                              NUGAUGTYOCCUPIEDAPART,
                                              DTSYSDATE
                                             );

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.fnuGetUnccupiedApartm nuUnccupiedQuant [ '||NUUNCCUPIEDQUANT||']', 10);

        RETURN NUUNCCUPIEDQUANT;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

    END FNUGETUNCCUPIEDAPARTM;

    



















    PROCEDURE GETGAUGETYPEINREGIST
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        ISBFLAGGAUGE            IN  VARCHAR2,
        OSBGAUGETYPE            OUT VARCHAR2
    )
    IS
        SBPRODUCTID         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBINSTANCE          GE_BOINSTANCECONTROL.STYSBNAME;
        NUCONSUTYPEVALUE    NUMBER;
        SBGAUGETYPEPROD     VARCHAR2(1);
        SBGAUGEORD          VARCHAR2(1);
        SBGAUGEEXT          VARCHAR2(1);
        SBGAUGEPER          VARCHAR2(1);

        
        CSBGAUGEORD         CONSTANT VARCHAR2(30) := 'AFORO_ORDINARIO';
        CSBGAUGEEXT         CONSTANT VARCHAR2(30) := 'AFORO_EXTRAORDINARIO';
        CSBGAUGEPER         CONSTANT VARCHAR2(30) := 'AFORO_PERMANENTE';

        
        CSBCONSTYPE         CONSTANT VARCHAR2(30) :='TIPO_RESIDUO_ORDINARIO';

    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.GetGaugeTypeInRegist ',10);

        NUCONSUTYPEVALUE := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE(CSBCONSTYPE);

        
        SBGAUGETYPEPROD := PKBCAFORSESU.FSBGETGAUGETYPE(INUPRODUCTID,NUCONSUTYPEVALUE);

        
        SBGAUGEORD := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE(CSBGAUGEORD);

        SBGAUGEEXT := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE(CSBGAUGEEXT);

        SBGAUGEPER := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE(CSBGAUGEPER);

        IF(SBGAUGETYPEPROD IS NULL ) THEN
            IF (ISBFLAGGAUGE = GE_BOCONSTANTS.CSBNO )THEN
                OSBGAUGETYPE := SBGAUGEORD;
            ELSE
                OSBGAUGETYPE := SBGAUGEPER;
            END IF;
        ELSE
            IF( SBGAUGETYPEPROD = SBGAUGEORD ) THEN
                IF (ISBFLAGGAUGE = GE_BOCONSTANTS.CSBNO )THEN
                    OSBGAUGETYPE := SBGAUGEEXT;
                ELSE
                    OSBGAUGETYPE := SBGAUGEPER;
                END IF;
            ELSE
                IF (ISBFLAGGAUGE = GE_BOCONSTANTS.CSBNO )THEN
                    OSBGAUGETYPE := SBGAUGEEXT;
                ELSE
                    OSBGAUGETYPE := SBGAUGEPER;
                END IF;
            END IF;
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.GetGaugeTypeInRegist ',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETGAUGETYPEINREGIST;

    















    PROCEDURE ISSPONSORSUBSCRIPTION
    (
        INUSUBSCRIPTIONID       IN  MO_MOTIVE.SUBSCRIPTION_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        
        NUNEWSUBSCRIPTION     NUMBER;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOGenericValid.IsSponsorSubscription',5);
        
        OSBRESPONSE := MO_BOPARAMETER.FSBGETNO;
        NUNEWSUBSCRIPTION := MO_BCCOMMERCIALRELAT.FNUGETCONTRATASSOC(INUSUBSCRIPTIONID);
        UT_TRACE.TRACE('nuNewSubscription['|| NUNEWSUBSCRIPTION||']',8);
        
        IF NUNEWSUBSCRIPTION IS NOT NULL THEN
            OSBRESPONSE := MO_BOPARAMETER.FSBGETYES;
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOGenericValid.IsSponsorSubscription',5);
	EXCEPTION
   	   WHEN EX.CONTROLLED_ERROR THEN
         RAISE  EX.CONTROLLED_ERROR;
	   WHEN OTHERS THEN
		 ERRORS.SETERROR;
         RAISE  EX.CONTROLLED_ERROR;
    END ISSPONSORSUBSCRIPTION;

    























    PROCEDURE VALIDACTIVEFINANCE
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        RCCOMPRETIRE              DAPR_COMPONENT_RETIRE.STYPR_COMPONENT_RETIRE;
        NURETIRED_BY_PENDFINANCE  NUMBER := 13;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValidActiveFinance',12);

        
        OPEN PR_BCCOMPONENT_RETIRE.CUCOMPRETIREBYPROD(INUPRODUCTID, NURETIRED_BY_PENDFINANCE);
        FETCH PR_BCCOMPONENT_RETIRE.CUCOMPRETIREBYPROD INTO RCCOMPRETIRE;
        CLOSE PR_BCCOMPONENT_RETIRE.CUCOMPRETIREBYPROD;

        
        IF (RCCOMPRETIRE.COMPONENT_ID IS NOT NULL) THEN
            ERRORS.SETERROR(CNUERROR_3195);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValidActiveFinance',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (PR_BCCOMPONENT_RETIRE.CUCOMPRETIREBYPROD%ISOPEN) THEN
                CLOSE PR_BCCOMPONENT_RETIRE.CUCOMPRETIREBYPROD;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PR_BCCOMPONENT_RETIRE.CUCOMPRETIREBYPROD%ISOPEN) THEN
                CLOSE PR_BCCOMPONENT_RETIRE.CUCOMPRETIREBYPROD;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDACTIVEFINANCE;

    























    PROCEDURE VALIDCOMPWITHOUTREQ
    (
        INUCOMPONENTID          IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUPRODUCTID            IN  PR_COMPONENT.PRODUCT_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValidCompWithOutReq',10);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESBYPRODUCT(INUPRODUCTID) LOOP

            IF (DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(RCMOTIVE.MOTIVE_STATUS_ID) = GE_BOCONSTANTS.CSBNO
                AND RCMOTIVE.TAG_NAME NOT IN (  PS_BOPRODUCTMOTIVE.CSBTAGINDIV_DAMAGE,PS_BOPRODUCTMOTIVE.CSBTAGMASSIVE_DAMAGE,
                                                PS_BOPRODUCTMOTIVE.CSBTAGCLAIMCARGOS, PS_BOPRODUCTMOTIVE.CSBTAGCLAIMCOMMRECORD,
                                                PS_BOPRODUCTMOTIVE.CSBTAGCLAIMPAGNOABON, PS_BOPRODUCTMOTIVE.CSBTAGCLAIMNODETAIL,
                                                PS_BOPRODUCTMOTIVE.CSBTAGCLAIMDUPLFACT, PS_BOPRODUCTMOTIVE.CSBTAGCLAIMINF )) THEN

                FOR RCOMPONENT IN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(RCMOTIVE.MOTIVE_ID) LOOP

                    IF (DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(RCOMPONENT.MOTIVE_STATUS_ID) = GE_BOCONSTANTS.CSBNO) AND
                       (RCOMPONENT.COMPONENT_ID_PROD=INUCOMPONENTID) THEN

                        UT_TRACE.TRACE('Componente en motivos encontrado['||RCOMPONENT.COMPONENT_ID||']',10);
                        OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
                        EXIT;
                    END IF;
                END LOOP;
            END IF;
        END  LOOP;
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValidCompWithOutReq',10);

    EXCEPTION
   	   WHEN EX.CONTROLLED_ERROR THEN
         IF (MO_BCMOTIVE.CUMOTIVESBYPRODUCT%ISOPEN) THEN
            CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODUCT;
         END IF;
         IF (MO_BCCOMPONENT.CUCOMPONENTSBYMOT%ISOPEN) THEN
            CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;
         END IF;
         RAISE  EX.CONTROLLED_ERROR;
	   WHEN OTHERS THEN
         IF (MO_BCMOTIVE.CUMOTIVESBYPRODUCT%ISOPEN) THEN
            CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODUCT;
         END IF;
         IF (MO_BCCOMPONENT.CUCOMPONENTSBYMOT%ISOPEN) THEN
            CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYMOT;
         END IF;
         ERRORS.SETERROR;
         RAISE  EX.CONTROLLED_ERROR;
    END VALIDCOMPWITHOUTREQ;

    
















    PROCEDURE VALIDPACKAGESACTIVES
    (
        INUSUBSCRIBERID         IN  MO_PACKAGES.SUBSCRIBER_ID%TYPE,
        ISBTAGNAME              IN  MO_PACKAGES.TAG_NAME%TYPE,
        ONUPACKAGEID            OUT MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        RCPACKAGE   DAMO_PACKAGES.STYMO_PACKAGES;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValidPackagesActives',10);
        UT_TRACE.TRACE('Cliente['||INUSUBSCRIBERID||']Tag_Name['||ISBTAGNAME||']',10);

        
        OPEN MO_BCPACKAGES.CUPACKACTIVES(INUSUBSCRIBERID,ISBTAGNAME);
        FETCH MO_BCPACKAGES.CUPACKACTIVES INTO RCPACKAGE;
        IF MO_BCPACKAGES.CUPACKACTIVES%FOUND THEN
            ONUPACKAGEID := RCPACKAGE.PACKAGE_ID;
            UT_TRACE.TRACE('Paquete:['||RCPACKAGE.PACKAGE_ID||']Estado:['||RCPACKAGE.MOTIVE_STATUS_ID||']',10);
        END IF;
        CLOSE MO_BCPACKAGES.CUPACKACTIVES;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValidPackagesActives',10);
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCPACKAGES.CUPACKACTIVES%ISOPEN) THEN
                CLOSE MO_BCPACKAGES.CUPACKACTIVES;
            END IF;
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END VALIDPACKAGESACTIVES;

    


























    PROCEDURE VALIDPRODHASMOTSUSPACTIVES
    (
        INUPRODUCTID            IN  MO_MOTIVE.PRODUCT_ID%TYPE,
        ISBTAGNAME              IN  MO_MOTIVE.TAG_NAME%TYPE,
        INUSUSPENSIONTYPEID     IN  MO_SUSPENSION_COMP.SUSPENSION_TYPE_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
	)
    IS
        
        CURSOR CUDATOS IS
        SELECT /*+ INDEX (a IDX_MO_MOTIVE_08)*/
                A.MOTIVE_ID
	    FROM MO_MOTIVE          A
            ,PS_MOTIVE_STATUS   C
            ,MO_COMPONENT       B
            ,MO_SUSPENSION_COMP D
	    WHERE A.PRODUCT_ID         = INUPRODUCTID
	    AND A.TAG_NAME             = ISBTAGNAME
        AND A.MOTIVE_STATUS_ID     = C.MOTIVE_STATUS_ID
  	    AND C.IS_FINAL_STATUS      = GE_BOCONSTANTS.CSBNO
	    AND A.MOTIVE_ID            = B.MOTIVE_ID
		AND B.COMPONENT_ID         = D.COMPONENT_ID
	    AND D.SUSPENSION_TYPE_ID   = INUSUSPENSIONTYPEID
  	    AND ROWNUM                 = 1;
    BEGIN
        UT_TRACE.TRACE('Inicia mï¿½todo MO_BOGenericValid.ValidProdHasMotSuspActives product_id [ '||INUPRODUCTID||' ]',10);
		OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
		FOR RC IN CUDATOS LOOP
			OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
		END LOOP;
		UT_TRACE.TRACE('Finaliza mï¿½todo MO_BOGenericValid.ValidProdHasMotSuspActives product_id [ '||INUPRODUCTID||' ]',10);
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END VALIDPRODHASMOTSUSPACTIVES;

    




















    PROCEDURE VALIDPRODHASPACKAGESACTIVES
    (
        INUSUBSCRIPTIONID   IN  MO_MOTIVE.SUBSCRIPTION_ID%TYPE,
        ISBTAGNAME          IN  MO_PACKAGES.TAG_NAME%TYPE,
        OSBRESPONSE         OUT VARCHAR2,
        ONUPACKAGEID        OUT MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        
        CURSOR CUPRODHASPACKSUBSACTIVES
        IS
            SELECT /*+ INDEX (a IDX_MO_PACKAGES_03)*/
                A.*, A.ROWID
            FROM   MO_PACKAGES A, PS_MOTIVE_STATUS B
                   /*+ Ubicaciï¿½n: MO_BOGenericValid.ValidProdHasPackagesActives */
            WHERE  A.SUBSCRIPTION_PEND_ID   = INUSUBSCRIPTIONID
              AND  A.TAG_NAME || ''         = ISBTAGNAME
              AND  A.MOTIVE_STATUS_ID       = B.MOTIVE_STATUS_ID
              AND  B.IS_FINAL_STATUS        = GE_BOCONSTANTS.CSBNO
              AND  ROWNUM                   = 1;

        
        CURSOR CUPRODHASMOTIVACTIVES
        IS
            SELECT /*+ INDEX (b IDX_MO_MOTIVE_03)*/
                A.*, A.ROWID
            FROM   MO_PACKAGES A, MO_MOTIVE B, PS_MOTIVE_STATUS C
                   /*+ Ubicaciï¿½n: MO_BOGenericValid.ValidProdHasPackagesActives */
            WHERE  B.SUBSCRIPTION_ID    = INUSUBSCRIPTIONID
              AND  B.PACKAGE_ID         = A.PACKAGE_ID
              AND  A.TAG_NAME || ''     = ISBTAGNAME
              AND  A.MOTIVE_STATUS_ID   = C.MOTIVE_STATUS_ID
              AND  C.IS_FINAL_STATUS    = GE_BOCONSTANTS.CSBNO
              AND  ROWNUM               = 1;

        RCPACKAGE   DAMO_PACKAGES.STYMO_PACKAGES;
        BLEXIST     BOOLEAN := FALSE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValidProdHasPackagesActives',10);
        UT_TRACE.TRACE('Suscripciï¿½n['||INUSUBSCRIPTIONID||']Tag_Name['||ISBTAGNAME||']',11);

        OSBRESPONSE := MO_BOPARAMETER.FSBGETNO;

        
        UT_TRACE.TRACE('Consultando Sobre paquetes, con contrato pendiente',11);
        OPEN CUPRODHASPACKSUBSACTIVES;
        FETCH CUPRODHASPACKSUBSACTIVES INTO RCPACKAGE;
        IF CUPRODHASPACKSUBSACTIVES%FOUND THEN
            CLOSE CUPRODHASPACKSUBSACTIVES;
            OSBRESPONSE := MO_BOPARAMETER.FSBGETYES;
            ONUPACKAGEID := RCPACKAGE.PACKAGE_ID;
            BLEXIST := TRUE;
            UT_TRACE.TRACE('Paquete:['||RCPACKAGE.PACKAGE_ID||']Estado:['||RCPACKAGE.MOTIVE_STATUS_ID||']',11);
            UT_TRACE.TRACE('Retorna MO_BOGenericValid.ValidProdHasPackagesActives',10);
            RETURN;
        END IF;
        CLOSE CUPRODHASPACKSUBSACTIVES;

        
        UT_TRACE.TRACE('Consultando Sobre motivos, con contrato',11);
        OPEN CUPRODHASMOTIVACTIVES;
        FETCH CUPRODHASMOTIVACTIVES INTO RCPACKAGE;
        IF CUPRODHASMOTIVACTIVES%FOUND THEN
            CLOSE CUPRODHASMOTIVACTIVES;
            OSBRESPONSE := MO_BOPARAMETER.FSBGETYES;
            ONUPACKAGEID := RCPACKAGE.PACKAGE_ID;
            BLEXIST := TRUE;
            UT_TRACE.TRACE('Paquete:['||RCPACKAGE.PACKAGE_ID||']Estado:['||RCPACKAGE.MOTIVE_STATUS_ID||']',11);
            UT_TRACE.TRACE('Retorna MO_BOGenericValid.ValidProdHasPackagesActives',10);
            RETURN;
        END IF;
        CLOSE CUPRODHASMOTIVACTIVES;
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValidProdHasPackagesActives',10);
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            IF (CUPRODHASPACKSUBSACTIVES%ISOPEN) THEN
                CLOSE CUPRODHASPACKSUBSACTIVES;
            END IF;
            IF (CUPRODHASMOTIVACTIVES%ISOPEN) THEN
                CLOSE CUPRODHASMOTIVACTIVES;
            END IF;
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            IF (CUPRODHASPACKSUBSACTIVES%ISOPEN) THEN
                CLOSE CUPRODHASPACKSUBSACTIVES;
            END IF;
            IF (CUPRODHASMOTIVACTIVES%ISOPEN) THEN
                CLOSE CUPRODHASMOTIVACTIVES;
            END IF;
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END VALIDPRODHASPACKAGESACTIVES;

    





























    PROCEDURE VALIDPRODMULMOTIVESACTIVES
    (
        INUPRODUCTID            IN  MO_MOTIVE.PRODUCT_ID%TYPE,
        ISBTAGNAME              IN  VARCHAR2,
        ONUPRODUCTMOTIVEID      OUT MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        ONUMOTIVEID             OUT MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        TBFIELDS    UT_STRING.TYTB_STRING;
        BIINDEX     BINARY_INTEGER := 1;
        NUMAX       NUMBER := NULL;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValidProdMulMotivesActives. Producto:['||INUPRODUCTID||']',8);
        UT_TRACE.TRACE('Tag_Name:['||ISBTAGNAME||']',8);

        
        UT_STRING.EXTSTRING(ISBTAGNAME,GE_BOCONSTANTS.CSBDELIMITERBLOCKS,TBFIELDS);

        NUMAX := TBFIELDS.COUNT;
        WHILE (BIINDEX <= NUMAX) LOOP
            FIRSTPRODMOTIVEACTIVE(INUPRODUCTID,TBFIELDS(BIINDEX),ONUMOTIVEID);
            BIINDEX := BIINDEX + 1;
            IF (ONUMOTIVEID IS NOT NULL) THEN
                EXIT;
            END IF;
        END LOOP;

        
        IF (ONUMOTIVEID IS NOT NULL) THEN
            ONUPRODUCTMOTIVEID := DAMO_MOTIVE.FNUGETPRODUCT_MOTIVE_ID(ONUMOTIVEID);
        END IF;

        UT_TRACE.TRACE('Motivo:['||ONUMOTIVEID||']Motivo Producto:['||ONUPRODUCTMOTIVEID||']',8);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValidProdMulMotivesActives',8);
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
	    WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END VALIDPRODMULMOTIVESACTIVES;

    

















    PROCEDURE VALIDPRODWITHOUTREQ
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;
        SBDESCRIPTION   PS_PRODUCT_MOTIVE.DESCRIPTION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValidProdWithOutReq',10);

        
        FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESBYPRODUCT(INUPRODUCTID) LOOP
            
            IF (DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(RCMOTIVE.MOTIVE_STATUS_ID) = GE_BOCONSTANTS.CSBNO
                AND RCMOTIVE.TAG_NAME NOT IN (  PS_BOPRODUCTMOTIVE.CSBTAGINDIV_DAMAGE,PS_BOPRODUCTMOTIVE.CSBTAGMASSIVE_DAMAGE,
                                                PS_BOPRODUCTMOTIVE.CSBTAGCLAIMCARGOS, PS_BOPRODUCTMOTIVE.CSBTAGCLAIMCOMMRECORD,
                                                PS_BOPRODUCTMOTIVE.CSBTAGCLAIMPAGNOABON, PS_BOPRODUCTMOTIVE.CSBTAGCLAIMNODETAIL,
                                                PS_BOPRODUCTMOTIVE.CSBTAGCLAIMDUPLFACT, PS_BOPRODUCTMOTIVE.CSBTAGCLAIMINF)) THEN

                UT_TRACE.TRACE('Motivo encontrado['||RCMOTIVE.MOTIVE_ID||']',10);
                SBDESCRIPTION := DAPS_PRODUCT_MOTIVE.FSBGETDESCRIPTION(RCMOTIVE.PRODUCT_MOTIVE_ID);
                ERRORS.SETERROR(CNUPRODWITHREQ,INUPRODUCTID||'|'||SBDESCRIPTION);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END LOOP;

        UT_TRACE.TRACE('Termina MO_BOGenericValid.ValidProdWithOutReq',10);
    EXCEPTION
   	   WHEN EX.CONTROLLED_ERROR THEN
         IF (MO_BCMOTIVE.CUMOTIVESBYPRODUCT%ISOPEN) THEN
            CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODUCT;
         END IF;
         RAISE  EX.CONTROLLED_ERROR;
	   WHEN OTHERS THEN
		 IF (MO_BCMOTIVE.CUMOTIVESBYPRODUCT%ISOPEN) THEN
            CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODUCT;
         END IF;
         ERRORS.SETERROR;
         RAISE  EX.CONTROLLED_ERROR;
    END VALIDPRODWITHOUTREQ;

    


















    PROCEDURE VALIDPRODWITHOUTREQNOCLAIM
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;
        SBDESCRIPTION   PS_PRODUCT_MOTIVE.DESCRIPTION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValidProdWithoutReqNoClaim',10);

        
        FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESBYPRODUCT(INUPRODUCTID) LOOP

            IF (DAPS_MOTIVE_STATUS.FSBGETIS_FINAL_STATUS(RCMOTIVE.MOTIVE_STATUS_ID) = 'N'
                AND RCMOTIVE.PRODUCT_MOTIVE_ID NOT IN (
                PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_GENER_CLAIMCARGOS'),
                PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_GENER_CLAIMCOMMRECORD'),
                PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_GENER_CLAIMPAGNOABON'),
                PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_GENER_CLAIMNODETAIL'),
                PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_GENER_CLAIMDUPLFACT'),
                PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME('M_GENER_CLAIMINF') ) )
            THEN

                UT_TRACE.TRACE('Motivo encontrado['||RCMOTIVE.MOTIVE_ID||']',10);
                SBDESCRIPTION := DAPS_PRODUCT_MOTIVE.FSBGETDESCRIPTION(RCMOTIVE.PRODUCT_MOTIVE_ID);
                ERRORS.SETERROR(CNUPRODWITHREQ,INUPRODUCTID||'|'||SBDESCRIPTION);
                RAISE EX.CONTROLLED_ERROR;

            END IF;

        END LOOP;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValidProdWithoutReqNoClaim',10);
    EXCEPTION
   	   WHEN EX.CONTROLLED_ERROR THEN
         IF (MO_BCMOTIVE.CUMOTIVESBYPRODUCT%ISOPEN) THEN
            CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODUCT;
         END IF;
         RAISE  EX.CONTROLLED_ERROR;
	   WHEN OTHERS THEN
		 IF (MO_BCMOTIVE.CUMOTIVESBYPRODUCT%ISOPEN) THEN
            CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODUCT;
         END IF;
         ERRORS.SETERROR;
         RAISE  EX.CONTROLLED_ERROR;
    END VALIDPRODWITHOUTREQNOCLAIM;

    
















    PROCEDURE VALIDSERVICENUMBERONPRODUCT
    (
        ISBSERVICENUMBER        IN  MO_MOTIVE.SERVICE_NUMBER%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        
        RFCURSOR    CONSTANTS.TYREFCURSOR;
        NUCOMPONENT PR_COMPONENT.COMPONENT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValidServiceNumberOnProduct. Service NUMBER:['||ISBSERVICENUMBER||']',8);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        
        RFCURSOR := PR_BCCOMPONENT.FRFGETCOMPONENTSBYSERVNUMB(ISBSERVICENUMBER);
        FETCH RFCURSOR INTO NUCOMPONENT;
        CLOSE RFCURSOR;
        IF NUCOMPONENT IS NOT NULL THEN
            OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
        END IF;
        UT_TRACE.TRACE('Response : ['||OSBRESPONSE||']',8);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValidServiceNumberOnProduct',8);
    EXCEPTION
   	    WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
	    WHEN OTHERS THEN
		    ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END	VALIDSERVICENUMBERONPRODUCT;

    
















    PROCEDURE VALIDSERVICENUMBERONREQUEST
    (
        ISBSERVICENUMBER        IN  MO_MOTIVE.SERVICE_NUMBER%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValidServiceNumberOnRequest. ServiceNumber:['||ISBSERVICENUMBER||']',8);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
		FOR REC IN MO_BCCOMPONENT.CUCOMPONENTDBYSERVNUM(ISBSERVICENUMBER) LOOP
            OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
		END LOOP;
		UT_TRACE.TRACE('Response : ['||OSBRESPONSE||']',8);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValidServiceNumberOnRequest',8);
	EXCEPTION
   	   WHEN EX.CONTROLLED_ERROR THEN
         RAISE  EX.CONTROLLED_ERROR;
	   WHEN OTHERS THEN
		 ERRORS.SETERROR;
         RAISE  EX.CONTROLLED_ERROR;
    END	VALIDSERVICENUMBERONREQUEST;

    
















    PROCEDURE VALACTIVABLESUSPPRD
    (
        ISBSUSPCLASS            IN  GE_SUSPENSION_TYPE.CLASS_SUSPENSION%TYPE,
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPRODUCTTYPEID        IN  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2

    )
    IS
        NUSUSPTYPEID        NUMBER;
        NUCONTSUSPTYPE      NUMBER :=0;
    BEGIN
        UT_TRACE.TRACE('Inicia mï¿½todo MO_BOGenericValid.ValActivableSuspPrd',10);
        OSBRESPONSE := GE_BOCONSTANTS.GETYES;
        FOR RC IN PR_BCSUSPENSION.CUVALIDSUSPBYPRODUCT(INUPRODUCTID,INUPRODUCTTYPEID,ISBSUSPCLASS) LOOP
            NUCONTSUSPTYPE := NUCONTSUSPTYPE+1;
            NUSUSPTYPEID   := RC.SUSPENSION_TYPE_ID;
            EXIT;
        END LOOP;

        IF NUCONTSUSPTYPE = 0 THEN
            
            OSBRESPONSE := GE_BOCONSTANTS.GETNO;
        END IF;
        UT_TRACE.TRACE('Finaliza mï¿½todo MO_BOGenericValid.ValActivableSuspPrd',10);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END VALACTIVABLESUSPPRD;

    






















    PROCEDURE VALACTSUSPBYPRODRECON
    (
        ISBSUSPCLASS            IN  GE_SUSPENSION_TYPE.CLASS_SUSPENSION%TYPE,
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPRODUCTTYPEID        IN  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        NUSUSPTYPEID        NUMBER;
        NUCONTSUSPTYPE      NUMBER :=0;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValActSuspByProdRecon',10);
        
        OSBRESPONSE := GE_BOCONSTANTS.GETYES;
        FOR RC IN PR_BCSUSPENSION.CUGETSUSPTYPEBYPROD(INUPRODUCTID,INUPRODUCTTYPEID,ISBSUSPCLASS) LOOP
            NUCONTSUSPTYPE := NUCONTSUSPTYPE+1;
            NUSUSPTYPEID   := RC.SUSPENSION_TYPE_ID;
            EXIT;
        END LOOP;

        IF NUCONTSUSPTYPE = 0 THEN
            
            OSBRESPONSE := GE_BOCONSTANTS.GETNO;
        END IF;
        
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValActSuspByProdRecon',10);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                UT_TRACE.TRACE('Error [ex.CONTROLLED_ERROR] MO_BOGenericValid.ValActSuspByProdRecon', 11);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                UT_TRACE.TRACE('Error [others] MO_BOGenericValid.ValActSuspByProdRecon', 11);
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END VALACTSUSPBYPRODRECON;

    




















    PROCEDURE VALCOMPMINNUM
    (
        INUCOMPTYPEID           IN PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE,
        INUPRODUCTID            IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUVALIDNUM             IN NUMBER,
        IBLISACTIVECOMPONENT    IN BOOLEAN DEFAULT FALSE
    )
    IS
        RFCURSOR        CONSTANTS.TYREFCURSOR;
        NUPRODUCTID     PR_PRODUCT.PRODUCT_ID%TYPE;
		RCCOMPONENT     DAPR_COMPONENT.STYPR_COMPONENT;
		NUCOUNT         NUMBER(4):=0;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValCompMinNum',10);
        UT_TRACE.TRACE('Product ['||INUPRODUCTID||'],Component ['||INUCOMPTYPEID||']',10);
    	RFCURSOR := PR_BCPRODUCT.FRFGETTYPESCOMPONENTS(INUPRODUCTID,INUCOMPTYPEID,IBLISACTIVECOMPONENT);
	    FETCH RFCURSOR INTO RCCOMPONENT;
        WHILE RFCURSOR%FOUND LOOP
            FETCH RFCURSOR INTO RCCOMPONENT;
            NUCOUNT := NUCOUNT + 1;
        END LOOP;
        CLOSE RFCURSOR;
        UT_TRACE.TRACE('Count ['||NUCOUNT||'],ValidNumber ['||INUVALIDNUM||']',10);
        
        IF NUCOUNT < INUVALIDNUM THEN
               ERRORS.SETERROR(CNUERROR_3349, DAPS_COMPONENT_TYPE.FSBGETDESCRIPTION(INUCOMPTYPEID));
               RAISE EX.CONTROLLED_ERROR;
        END IF;
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValCompMinNum',10);
	EXCEPTION
	    WHEN EX.CONTROLLED_ERROR THEN
        	GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
        	UT_TRACE.TRACE('Error Controlado MO_BOGenericValid.ValCompMinNum',10);
		    RAISE;

	    WHEN OTHERS THEN
        	GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
		    ERRORS.SETERROR;
		    UT_TRACE.TRACE('Error No Controlado MO_BOGenericValid.ValCompMinNum',10);
	        RAISE EX.CONTROLLED_ERROR;
    END VALCOMPMINNUM;

    























    PROCEDURE VALEXISTCLASSSERVINCOMP
    (
        ISBTAGTOVALIDATE        IN  VARCHAR2,
        INUPRODUCTID            IN  MO_COMPONENT.PRODUCT_ID%TYPE,
        ISBSERVICENUMBER        IN  MO_COMPONENT.SERVICE_NUMBER%TYPE,
        INUCLASSSERVICEID       IN  MO_COMPONENT.CLASS_SERVICE_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS

    BEGIN
        UT_TRACE.TRACE('Inicia mï¿½todo MO_BOGenericValid.ValExistClassServInComp',10);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;

        FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG(INUPRODUCTID, ISBTAGTOVALIDATE) LOOP
            UT_TRACE.TRACE('Motivo:['||RCMOTIVE.MOTIVE_ID||']Estado:['||RCMOTIVE.MOTIVE_STATUS_ID||']',4);

            
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID))
            THEN
                
                
                FOR RCMOCOMPONENT IN MO_BCCOMPONENT.CUCOMPONENTSBYMOT(RCMOTIVE.MOTIVE_ID) LOOP
                    IF ((RCMOCOMPONENT.SERVICE_NUMBER = ISBSERVICENUMBER) AND (RCMOCOMPONENT.CLASS_SERVICE_ID= INUCLASSSERVICEID) ) THEN
                        OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
                        EXIT;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        UT_TRACE.TRACE('Finaliza mï¿½todo MO_BOGenericValid.ValExistClassServInComp ',10);
   	EXCEPTION
    		WHEN EX.CONTROLLED_ERROR THEN
                RAISE  EX.CONTROLLED_ERROR;
    		WHEN OTHERS THEN
    			ERRORS.SETERROR;
                RAISE  EX.CONTROLLED_ERROR;
    END VALEXISTCLASSSERVINCOMP;

    























    PROCEDURE VALMOPENDASPRORGBYTAG
    (
        ISBTAGNAME              IN  MO_MOTIVE.TAG_NAME%TYPE,
        ISBCOMPONENTTYPES       IN  VARCHAR2,
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
        NUMOTIVESTATUSID    MO_MOTIVE.MOTIVE_STATUS_ID%TYPE;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
    BEGIN

        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValMoPendAsPrOrgByTag',12);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        OPEN  MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN(INUPRODUCTID);
        FETCH MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN INTO RCCOMPONENT;

        WHILE ((MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN%FOUND) AND (OSBRESPONSE = GE_BOCONSTANTS.CSBNO)) LOOP
        
            UT_TRACE.TRACE('Encontro en componente de motivos ['||RCCOMPONENT.COMPONENT_ID||']',11);

            DAMO_MOTIVE.GETRECORD(RCCOMPONENT.MOTIVE_ID, RCMOTIVE);
            NUMOTIVESTATUSID := RCMOTIVE.MOTIVE_STATUS_ID;

            UT_TRACE.TRACE('Tag del motivo ['||RCMOTIVE.TAG_NAME||']',11);

            IF (RCMOTIVE.TAG_NAME = ISBTAGNAME) THEN

                UT_TRACE.TRACE('Estado del motivo ['||NUMOTIVESTATUSID||']',11);

                IF(NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(NUMOTIVESTATUSID)) AND (INSTR(',' ||ISBCOMPONENTTYPES|| ',' , ',' || RCCOMPONENT.COMPONENT_TYPE_ID || ',') > 0) THEN
                     OSBRESPONSE:= GE_BOCONSTANTS.CSBYES;
                END IF;
            END IF;
            FETCH MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN INTO RCCOMPONENT;
        
        END LOOP;

        CLOSE MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValMoPendAsPrOrgByTag',12);

        EXCEPTION
          WHEN EX.CONTROLLED_ERROR THEN
                IF MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN%ISOPEN THEN
                   CLOSE MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN;
                END IF;
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                IF MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN%ISOPEN THEN
                   CLOSE MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN;
                END IF;
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

    END VALMOPENDASPRORGBYTAG;

    

















    PROCEDURE VALMOPENDASPRORIGBYMOTY
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUMOTIVETYPE           IN  MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        ISBCOMPONENTTYPES       IN  VARCHAR2,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        RESULT              BOOLEAN:=GE_BOCONSTANTS.GETFALSE;
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
        NUMOTIVESTATUSID    MO_MOTIVE.MOTIVE_STATUS_ID%TYPE;
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        SBDESCPRODMOTIVO    PS_PRODUCT_MOTIVE.DESCRIPTION%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValMoPendAsPrOrigByMoTy',12);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        
        OPEN  MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN(INUPRODUCTID);

        FETCH MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN INTO RCCOMPONENT;

        WHILE ((MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN%FOUND) AND (NOT RESULT)) LOOP
        
            UT_TRACE.TRACE('Encontro en componente de motivos ['||RCCOMPONENT.COMPONENT_ID||']',11);

            DAMO_MOTIVE.GETRECORD(RCCOMPONENT.MOTIVE_ID, RCMOTIVE);
            NUMOTIVESTATUSID := RCMOTIVE.MOTIVE_STATUS_ID;

            UT_TRACE.TRACE('Tipo del motivo ['||RCMOTIVE.MOTIVE_TYPE_ID||']',11);

            IF (RCMOTIVE.MOTIVE_TYPE_ID = INUMOTIVETYPE) THEN

                UT_TRACE.TRACE('Estado del motivo ['||NUMOTIVESTATUSID||']',11);

                IF(NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(NUMOTIVESTATUSID)) AND (INSTR(',' ||ISBCOMPONENTTYPES|| ',' , ',' || RCCOMPONENT.COMPONENT_TYPE_ID || ',') > 0) THEN
                     OSBRESPONSE := GE_BOCONSTANTS.CSBYES;

                END IF;
            END IF;
            
            FETCH MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN INTO RCCOMPONENT;
        
        END LOOP;

        CLOSE MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN;
        UT_TRACE.TRACE('Respuesta   : ['||OSBRESPONSE||']',4);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValMoPendAsPrOrigByMoTy',12);

    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
            IF MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN%ISOPEN THEN
               CLOSE MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN%ISOPEN THEN
               CLOSE MO_BCCOMPONENT.CUCOMPBYPRODUCTORIGIN;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALMOPENDASPRORIGBYMOTY;

    

















    PROCEDURE VALMOPENDPRASSOBYMOTY
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUMOTIVETYPEID         IN  PS_MOTIVE_TYPE.MOTIVE_TYPE_ID%TYPE,
        INUPRODUCTTYPE          IN  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        NUPRODASSOID    PR_PRODUCT.PRODUCT_ID%TYPE;
        SBDESCPRODMOT   PS_PRODUCT_MOTIVE.DESCRIPTION%TYPE;
        SBPRODTYDESC    SERVICIO.SERVDESC%TYPE;
        NUPRODUCTTYPE   PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;
        NUTMPPRODTYPE   PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.fsbMoPendPrAssoByMoTy',12);

        
        OSBRESPONSE := CC_BOCONSTANTS.CSBNO;

        IF (INUPRODUCTTYPE IS NULL) THEN
            NUTMPPRODTYPE  := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCTID);
        END IF;

        NUPRODASSOID:=PR_BOCNFPRODUCT.FNUGETPRODUCTBYPRODIDORIG(INUPRODUCTID,NVL(INUPRODUCTTYPE,NUTMPPRODTYPE));

        IF (NUPRODASSOID IS NOT NULL) THEN
            NUPRODUCTTYPE:= DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(NUPRODASSOID);
            FOR RCMOTIVEBYPRANDMOTTY IN MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY(NUPRODASSOID,INUMOTIVETYPEID) LOOP
                IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVEBYPRANDMOTTY.MOTIVE_STATUS_ID)) THEN
                    OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
                END IF;
            END LOOP;
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValMoPendPrAssoByMoTy',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF(MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF(MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALMOPENDPRASSOBYMOTY;

    
















    PROCEDURE VALMOTPENDBYMOTTY
    (
        INUMOTIVETYPEID         IN  PS_MOTIVE_TYPE.MOTIVE_TYPE_ID%TYPE,
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        NUPRODUCTID     PR_PRODUCT.PRODUCT_ID%TYPE;
        SBDESCPRODMOT   PS_PRODUCT_MOTIVE.DESCRIPTION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValMotPendByMotTy',12);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        FOR RCMOTIVEBYPRANDMOTTY IN MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY(INUPRODUCTID,INUMOTIVETYPEID) LOOP

            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVEBYPRANDMOTTY.MOTIVE_STATUS_ID)) THEN
                    OSBRESPONSE:= GE_BOCONSTANTS.CSBYES;
            END IF;

        END LOOP;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValMotPendByMotTy',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF(MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF(MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALMOTPENDBYMOTTY;

    


























    PROCEDURE VALMOTPENDPRPROVBYMOTY
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUMOTIVETYPEID         IN  MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUPRODUCTTYPEID        IN  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        SBCOMPPRODUCTID         GE_BOINSTANCECONTROL.STYSBVALUE;
        NUCOMPPRODUCTID         PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODPROVISIONID       PR_PRODUCT.PRODUCT_ID%TYPE;
        NUCOMPPRODPROVISIONID   PR_COMPONENT.COMPONENT_ID%TYPE;
        SBDESCPRODMOT           PS_PRODUCT_MOTIVE.DESCRIPTION%TYPE;
        SBPRODTYDESC            SERVICIO.SERVDESC%TYPE;
        NUPRODPROVISIONTYPE     PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia MO_BOGenericValid.valMotPendPrProvByMoTy',12);

        UT_TRACE.TRACE('Tipo motivo ['||INUMOTIVETYPEID||'] Tipo de producto ['||INUPRODUCTTYPEID||']',12);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;

        
        IF (DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCTID) != INUPRODUCTTYPEID) THEN
            RETURN;
        END IF;

        

        
        
        
        FOR RCCOMPONENT IN PR_BCPRODUCT.CUCOMPONENTSPRODUCT( INUPRODUCTID ) LOOP

            NUCOMPPRODUCTID := RCCOMPONENT.COMPONENT_ID;

            
            NUCOMPPRODPROVISIONID:= DAPR_COMPONENT.FNUGETCOMP_PROD_PROV_ID(NUCOMPPRODUCTID);

            
            IF NUCOMPPRODPROVISIONID IS NOT NULL THEN

                
                NUPRODPROVISIONID := DAPR_COMPONENT.FNUGETPRODUCT_ID(NUCOMPPRODPROVISIONID);

                
                NUPRODPROVISIONTYPE:= DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(NUPRODPROVISIONID);

                
                FOR RCMOTIVEBYPRANDMOTTY IN MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY(NUPRODPROVISIONID,INUMOTIVETYPEID) LOOP
                    IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVEBYPRANDMOTTY.MOTIVE_STATUS_ID)) THEN
                           OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;
        UT_TRACE.TRACE('Respuesta   : ['||OSBRESPONSE||']',4);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.valMotPendPrProvByMoTy',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF(MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF(MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVEBYPRANDMOTTY;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALMOTPENDPRPROVBYMOTY;

    
















    PROCEDURE VALPACKACTIVEBYCLIENT
    (
        INUSUBSCRIBERID         IN  MO_PACKAGES.SUBSCRIBER_ID%TYPE,
        ISBTAGNAME              IN  VARCHAR2,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        NUPACKAGEID     NUMBER;
        NUPACKAGETYPEID NUMBER;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValPackActiveByClient. Cliente:['||INUSUBSCRIBERID||']',8);
        UT_TRACE.TRACE('Tag_Name:['||ISBTAGNAME||']',8);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;

        FIRSTPACKACTIVEBYCLIENT(INUSUBSCRIBERID, ISBTAGNAME,NUPACKAGETYPEID,NUPACKAGEID);

        IF(NUPACKAGEID IS NOT NULL) THEN
            OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
        END IF;
        UT_TRACE.TRACE('Response : ['||OSBRESPONSE||']',8);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValPackActiveByClient',8);
	EXCEPTION
   	   WHEN EX.CONTROLLED_ERROR THEN
         RAISE  EX.CONTROLLED_ERROR;
	   WHEN OTHERS THEN
		 ERRORS.SETERROR;
         RAISE  EX.CONTROLLED_ERROR;
    END VALPACKACTIVEBYCLIENT;

    
















    PROCEDURE VALPRDHASRECONPAYORD
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia mï¿½todo MO_BOGenericValid.valPrdHasReconPayOrd product_id [ '||INUPRODUCTID||' ]',10);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        IF PKSUSPCONNSERVICEMGR.FBLHASORDER(INUPRODUCTID,CSBCONEXION) THEN
            OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
        END IF;
        UT_TRACE.TRACE('Termina mï¿½todo MO_BOGenericValid.valPrdHasReconPayOrd',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPRDHASRECONPAYORD;

    
















    PROCEDURE VALPRDHASRETNOPAYORD
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia mï¿½todo MO_BOGenericValid.valPrdHasRetNoPayOrd product_id [ '||INUPRODUCTID||' ]',10);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        IF PKSUSPCONNSERVICEMGR.FBLHASORDER(INUPRODUCTID,CSBRETIRO) THEN
            OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
        END IF;
        UT_TRACE.TRACE('Termina mï¿½todo MO_BOGenericValid.valPrdHasRetNoPayOrd',10);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END VALPRDHASRETNOPAYORD;

    
















    PROCEDURE VALPRDHASSUSPNOPAYORD
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia mï¿½todo MO_BOGenericValid.valPrdHasSuspNoPayOrd product_id [ '||INUPRODUCTID||' ]',10);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        IF PKSUSPCONNSERVICEMGR.FBLHASORDER(INUPRODUCTID,CSBDESCONEXION) THEN
            
            OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
        END IF;
        UT_TRACE.TRACE('Finaliza mï¿½todo MO_BOGenericValid.valPrdHasSuspNoPayOrd',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPRDHASSUSPNOPAYORD;

    


























    PROCEDURE VALPRODHASMOTIVESACTIVES
    (
        INUPRODUCTID            IN  MO_MOTIVE.PRODUCT_ID%TYPE,
        ISBTAGNAME              IN  MO_MOTIVE.TAG_NAME%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        RCMOTIVE    DAMO_MOTIVE.STYMO_MOTIVE;
        NUFIRSTMOTIVE   MO_MOTIVE.MOTIVE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValProdHasMotivesActives. Producto:['||INUPRODUCTID||']Tag_Name:['||ISBTAGNAME||']',12);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        FIRSTPRODMOTIVEACTIVE(INUPRODUCTID,ISBTAGNAME,NUFIRSTMOTIVE);
        IF(NUFIRSTMOTIVE IS NOT NULL)THEN
            OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
        END IF;
        UT_TRACE.TRACE('Motivo Encontrado:['||NUFIRSTMOTIVE||']',12);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValProdHasMotivesActives',12);
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG;
            END IF;
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            IF (MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESBYPRODANDTAG;
            END IF;
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END VALPRODHASMOTIVESACTIVES;

    















    PROCEDURE VALPRODHASMOTSUSPACT
    (
        INUSUSPENSIONTYPE       IN  GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2
    )
    IS
        NUPRODUCTID     PR_PRODUCT.PRODUCT_ID%TYPE;
        SBDESCPRODMOT   PS_PRODUCT_MOTIVE.DESCRIPTION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValProdHasMotSuspAct',12);
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        FOR RCMOTIBYPRANDSUSPTY IN MO_BCMOTIVE.CUMOTIBYPRANDSUSPTY(INUPRODUCTID,INUSUSPENSIONTYPE) LOOP
            IF (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIBYPRANDSUSPTY.MOTIVE_STATUS_ID)) THEN
                OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
            END IF;
        END LOOP;
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValProdHasMotSuspAct',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF(MO_BCMOTIVE.CUMOTIBYPRANDSUSPTY%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIBYPRANDSUSPTY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF(MO_BCMOTIVE.CUMOTIBYPRANDSUSPTY%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIBYPRANDSUSPTY;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPRODHASMOTSUSPACT;

    















    PROCEDURE VALPRODTVINASSVOD
    (
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBRESPONSE         OUT VARCHAR2
    )
    IS
        NUPRODUCTTYPEID     PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;

        SBEXISTASSOPROD     VARCHAR2(1);
        SBEXISTASSMOT       VARCHAR2(1);
        BLEXISTE            BOOLEAN     := GE_BOCONSTANTS.GETFALSE;
        CNUTVCABLE          NUMBER      := PS_BOPRODUCTTYPE.FNUGETPRODUCTTYPEBYTAGNAME('PR_TVCABLE');

    BEGIN
        UT_TRACE.TRACE('Inicializa MO_BOGenericValid.ValProdTVInAssVoD');
        OSBRESPONSE := GE_BOCONSTANTS.CSBNO;

        NUPRODUCTTYPEID := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCTID);

        IF (NUPRODUCTTYPEID = CNUTVCABLE) THEN
            FOR RCCOMPPROD IN PR_BCPRODUCT.CUCOMPONENTSPRODUCT(INUPRODUCTID) LOOP
                SBEXISTASSOPROD := FSBVALCOMPPRODINASSOVOD(RCCOMPPROD.COMPONENT_ID);
                IF(SBEXISTASSOPROD = GE_BOCONSTANTS.CSBNO) THEN
                    SBEXISTASSMOT := FSBVALCOMPPRODINREGASSOVOD(RCCOMPPROD.COMPONENT_ID);
                    IF(SBEXISTASSMOT = GE_BOCONSTANTS.CSBNO) THEN
                        OSBRESPONSE := GE_BOCONSTANTS.CSBYES;
                    END IF;
                END IF;
            END LOOP;
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValProdTVInAssVoD');

    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

    END VALPRODTVINASSVOD;

    























    PROCEDURE VALRESTRAFINDESACTSECCODE
    (
        INUPRODUCTID               IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTID             IN  MO_COMPONENT.COMPONENT_ID%TYPE,
        ISBVALIDSECRETCODE         IN  PS_PROD_MOTI_PARAM.VALUE%TYPE,
        ISBCLASSSERVICE            IN  PR_COMPONENT.CLASS_SERVICE_ID%TYPE
    )
    IS
    SBCLASSSERVICE      GE_PARAMETER.VALUE%TYPE;
    SBVALIDSECRETCODE   PS_PROD_MOTI_PARAM.VALUE%TYPE;
    NUCONTTRAFFICREST   NUMBER;
    SBVALUETRAFFICREST  PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE;
    NUCLASSSERVICEIN    PR_COMPONENT.CLASS_SERVICE_ID%TYPE;


    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValResTrafInDesactSecCode  Servio Suplementario: ['||INUCOMPONENTID||'] Id del producto:['||INUPRODUCTID||']',12);

        NUCLASSSERVICEIN := DAPR_COMPONENT.FNUGETCLASS_SERVICE_ID(INUCOMPONENTID);
        
        SBCLASSSERVICE := CC_BOPARAMETER.FSBGETSERVICE_CLASES;

        IF  SBVALIDSECRETCODE = GE_BOCONSTANTS.CSBYES AND  NUCLASSSERVICEIN = ISBCLASSSERVICE THEN
        
            NUCONTTRAFFICREST := 1;
            LOOP
                SBVALUETRAFFICREST := UT_STRING.EXTSTRFIELD(SBCLASSSERVICE,',',NUCONTTRAFFICREST);
                EXIT WHEN SBVALUETRAFFICREST IS NULL;
                IF  FSBEXISTCMPINPROD(INUPRODUCTID,'RESTRICCION_DE_TRAFICO',SBVALUETRAFFICREST) = GE_BOCONSTANTS.CSBYES THEN
                    GI_BOERRORS.SETERRORCODE(CNUERROR_118501);
                END IF;
                NUCONTTRAFFICREST := NUCONTTRAFFICREST + 1;
            END LOOP;
        END IF;
        UT_TRACE.TRACE('Finaliza mï¿½todo MO_BOGenericValid.ValResTrafInDesactSecCode',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END VALRESTRAFINDESACTSECCODE;

    






















    PROCEDURE VALSECCODINRESTRAFCHANG
    (
        INUPRODUCTID               IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCLASSSERVICEID          IN  PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE,
        ISBCLASSSERVICE            IN  PR_COMPONENT.CLASS_SERVICE_ID%TYPE
    )
    IS
        SBCLASSSERVICE      GE_PARAMETER.VALUE%TYPE;
        SBPACKPARAMVALUE    PS_PACK_TYPE_PARAM.VALUE%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValSecCodInResTrafChang  Restricciï¿½n de Trafico: ['||INUCLASSSERVICEID||'] Id del producto:'||INUPRODUCTID||'',12);

        
        SBPACKPARAMVALUE  := PS_BOPACKTYPEPARAM.FSBGETPACTYPPARBYTAG(PS_BOPACKAGETYPE.CSBTAGCAMBCLASSERV,CNUATTRTRAFREST,TRUE);

        
        SBCLASSSERVICE := CC_BOPARAMETER.FSBGETSERVICE_CLASES;

        
        
        IF    SBPACKPARAMVALUE = GE_BOCONSTANTS.CSBYES
          AND   ( INSTR(',' ||  SBCLASSSERVICE || ',' , ',' || INUCLASSSERVICEID || ',') > 0 )
          AND   FSBEXISTCMPINPROD(INUPRODUCTID,'SERVICIO_SUPLEMENTARIO',ISBCLASSSERVICE)  = GE_BOCONSTANTS.CSBNO
        THEN
            GI_BOERRORS.SETERRORCODE(CNUERROR_118480);
        END IF;
        UT_TRACE.TRACE('Finaliza mï¿½todo MO_BOGenericValid.ValSecCodInResTrafChang',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALSECCODINRESTRAFCHANG;

    
















    PROCEDURE VALSERVNUMBINCOMBYTYPE
    (
        ISBLOGIN                IN  MO_MOTIVE.SERVICE_NUMBER%TYPE,
        ISBCOMPONENTTYPES       IN  VARCHAR2 DEFAULT NULL
    )
    IS
    NUCOMPONENTID   PR_COMPONENT.COMPONENT_ID%TYPE := NULL;
    BEGIN
        UT_TRACE.TRACE('Inicia mï¿½todo MO_BOGenericValid.ValServNumbInComByType',12);
        
        FOR REC IN PR_BCCOMPONENT.CUCOMPONENTDBYSERVNUM(ISBLOGIN) LOOP
            UT_TRACE.TRACE('Componente Producto:['||REC.COMPONENT_ID||']Tipo:['||REC.COMPONENT_TYPE_ID||']',14);

            
            IF  ((ISBCOMPONENTTYPES IS NULL)
                OR
                (INSTR(','||ISBCOMPONENTTYPES||',',','||REC.COMPONENT_TYPE_ID||',') > 0))
            THEN
                NUCOMPONENTID := REC.COMPONENT_ID;
                UT_TRACE.TRACE('Login Encontrado en Componente:['||NUCOMPONENTID||']',14);
                EXIT;
            END IF;
        END LOOP;
         
        IF NUCOMPONENTID IS NOT NULL THEN
            ERRORS.SETERROR(CNUREQUEST_EXIST,ISBLOGIN);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        UT_TRACE.TRACE('Finaliza mï¿½todo MO_BOGenericValid.ValServNumbInComByType',12);
	EXCEPTION
   	   WHEN EX.CONTROLLED_ERROR THEN
         RAISE  EX.CONTROLLED_ERROR;
	   WHEN OTHERS THEN
		 ERRORS.SETERROR;
         RAISE  EX.CONTROLLED_ERROR;
    END VALSERVNUMBINCOMBYTYPE;

    























	PROCEDURE VALSERVNUMBINREQBYPROD
    (
        ISBSERVICENUMBER        IN  MO_MOTIVE.SERVICE_NUMBER%TYPE,
        ISBCOMPONENTTYPES       IN  VARCHAR2 DEFAULT NULL,
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE DEFAULT NULL
    )
    IS
        NUCOMPONENTID   MO_COMPONENT.COMPONENT_ID%TYPE;
        SBDESCRIPTION   PS_PRODUCT_MOTIVE.DESCRIPTION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValServNumbInReqByProd. Nï¿½mero Servicio:['||
                        ISBSERVICENUMBER||']Tipos:['||ISBCOMPONENTTYPES||']',14);

        FOR REC IN MO_BCCOMPONENT.CUCOMPONENTDBYSERVNUM(ISBSERVICENUMBER) LOOP
            UT_TRACE.TRACE('Componente Motivo:['||REC.COMPONENT_ID||']Tipo:['||REC.COMPONENT_TYPE_ID||']',14);

            
            IF  ((ISBCOMPONENTTYPES IS NULL)
                OR
                (INSTR(','||ISBCOMPONENTTYPES||',',','||REC.COMPONENT_TYPE_ID||',') > 0))
            THEN
                IF ((INUPRODUCTID IS NULL) OR
                    (REC.PRODUCT_ID = INUPRODUCTID))
                THEN
                    NUCOMPONENTID := REC.COMPONENT_ID;
                    SBDESCRIPTION := DAPS_PRODUCT_MOTIVE.FSBGETDESCRIPTION(REC.PRODUCT_MOTIVE_ID);
                    UT_TRACE.TRACE('Nï¿½mero encontrado en componente:['||NUCOMPONENTID||']',14);
                    EXIT;
                END IF;
            END IF;
		END LOOP;

        
        IF (NUCOMPONENTID IS NOT NULL) THEN
            ERRORS.SETERROR(CNUPROD_MOT_PEND,ISBSERVICENUMBER||'|'||SBDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValServNumbInReqByProd',14);
	EXCEPTION
   	   WHEN EX.CONTROLLED_ERROR THEN
         RAISE  EX.CONTROLLED_ERROR;
	   WHEN OTHERS THEN
		 ERRORS.SETERROR;
         RAISE  EX.CONTROLLED_ERROR;
    END VALSERVNUMBINREQBYPROD;

    




















    PROCEDURE VALSERVNUMBINREQBYTYPE
    (
        ISBSERVICENUMBER        IN  MO_MOTIVE.SERVICE_NUMBER%TYPE,
        ISBCOMPONENTTYPES       IN  VARCHAR2 DEFAULT NULL
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValServNumbInReqByType. Nï¿½mero Servicio:['|| ISBSERVICENUMBER||']Tipos:['||ISBCOMPONENTTYPES||']',14);
        VALSERVNUMBINREQBYPROD(ISBSERVICENUMBER, ISBCOMPONENTTYPES);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValServNumbInReqByType',14);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALSERVNUMBINREQBYTYPE;

    
































PROCEDURE VALSUBSCRIPTIONINPACKACTIVE
    (
        INUSUBSCRIPTIONID       IN  MO_MOTIVE.SUBSCRIPTION_ID%TYPE,
        ISBTAGNAME              IN  MO_PACKAGES.TAG_NAME%TYPE,
        OSBRESPONSE             OUT VARCHAR2,
        ONUPACKAGEID            OUT MO_PACKAGES.PACKAGE_ID%TYPE,
        IBLSETERROR             IN  BOOLEAN DEFAULT TRUE
    )
    IS
        NUPACKAGETYPEID MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;

        EXSUBSCHASACTREQUEST    EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValSubscriptionInPackActive',12);
        UT_TRACE.TRACE('Suscripcion:['||INUSUBSCRIPTIONID||']Tag_Name:['||ISBTAGNAME||']',13);

        FOR REC IN MO_BCBILL_DATA_CHANGE.CUPACKAGESBYSUBSCRIPTION(INUSUBSCRIPTIONID,ISBTAGNAME) LOOP
            ONUPACKAGEID := REC.PACKAGE_ID;
            NUPACKAGETYPEID := REC.PACKAGE_TYPE_ID;
            UT_TRACE.TRACE('Paquete Encontrado:['||ONUPACKAGEID||']',15);
        END LOOP;
        UT_TRACE.TRACE('Paquete:['||ONUPACKAGEID||']',13);

        
        IF ONUPACKAGEID IS NULL THEN

            OSBRESPONSE := GE_BOCONSTANTS.CSBNO;
        ELSE
            OSBRESPONSE := GE_BOCONSTANTS.CSBYES;

            
            IF IBLSETERROR THEN
                RAISE EXSUBSCHASACTREQUEST;
            END IF;
        END IF;
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValSubscriptionInPackActive. Respuesta:['||OSBRESPONSE||']',12);
    EXCEPTION
        WHEN EXSUBSCHASACTREQUEST THEN
            ERRORS.SETERROR
                (
                CNUSUBSCHASACTREQUEST,
                TO_CHAR(INUSUBSCRIPTIONID) || '|' || DAPS_PACKAGE_TYPE.FSBGETDESCRIPTION(NUPACKAGETYPEID)
                );
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALSUBSCRIPTIONINPACKACTIVE;


    






























    PROCEDURE VALSUBSCMULPACKACTIVES
    (
        INUSUBSCRIPTIONID       IN  MO_MOTIVE.SUBSCRIPTION_ID%TYPE,
        ISBTAGNAME              IN  VARCHAR2,
        ONUPACKAGETYPEID        OUT MO_PACKAGES.PACKAGE_TYPE_ID%TYPE,
        OSBRESPONSE             OUT VARCHAR2,
        ONUPACKAGEID            OUT MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        TBFIELDS    UT_STRING.TYTB_STRING;
        BIINDEX     BINARY_INTEGER := 1;
        NUMAX       NUMBER := NULL;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOGenericValid.ValSubscMulPackActives. Subscripciï¿½n:['||INUSUBSCRIPTIONID||']',8);
        UT_TRACE.TRACE('Tag_Name:['||ISBTAGNAME||']',9);

        
        OSBRESPONSE := MO_BOPARAMETER.FSBGETNO;

        
        UT_STRING.EXTSTRING(ISBTAGNAME,GE_BOCONSTANTS.CSBDELIMITERBLOCKS,TBFIELDS);

        
        NUMAX := TBFIELDS.COUNT;
        WHILE (BIINDEX <= NUMAX) AND (OSBRESPONSE <> MO_BOPARAMETER.FSBGETYES) LOOP
            VALIDPRODHASPACKAGESACTIVES(INUSUBSCRIPTIONID,TBFIELDS(BIINDEX),OSBRESPONSE,ONUPACKAGEID);
            BIINDEX := BIINDEX + 1;
        END LOOP;

        
        IF (ONUPACKAGEID IS NOT NULL) THEN
            ONUPACKAGETYPEID := DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID(ONUPACKAGEID);
        END IF;

        UT_TRACE.TRACE('Paquete:['||ONUPACKAGEID||']Tipo:['||ONUPACKAGETYPEID||']Respuesta:['||OSBRESPONSE||']',9);
        UT_TRACE.TRACE('Finaliza MO_BOGenericValid.ValSubscMulPackActives',8);
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END VALSUBSCMULPACKACTIVES;

    





















    PROCEDURE VALSUSPENSIONPERIOD
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID     IN  NUMBER,
        IDTFECHAAPLICA          IN  DATE,
        IDTFECHAFINAL           IN  DATE
    )
    IS
        NUPRODUCTTYPE           PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;
        NUMAINCOMPTYPEID        PR_COMPONENT.COMPONENT_TYPE_ID%TYPE;
        NUCOMPONENTID           PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODMOTISUSP          PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;

        RCPRODCOMPOSITION       DAPS_PROD_COMPOSITION.STYPS_PROD_COMPOSITION;
    BEGIN
        UT_TRACE.TRACE('Inicia mï¿½todo MO_BOGenericValid.ValSuspensionPeriod',7);
         
        NUPRODUCTTYPE:= DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCTID);
        
        OPEN PS_BCPROD_COMPOSITION.CUMASTCOMPTYBYPRODTY(NUPRODUCTTYPE);
        FETCH PS_BCPROD_COMPOSITION.CUMASTCOMPTYBYPRODTY INTO RCPRODCOMPOSITION;
        CLOSE PS_BCPROD_COMPOSITION.CUMASTCOMPTYBYPRODTY;
        NUMAINCOMPTYPEID := RCPRODCOMPOSITION.COMPONENT_TYPE_ID;
        
        NUCOMPONENTID := PR_BCCOMPONENT.FNUGETCOMPONENTID(INUPRODUCTID,NUMAINCOMPTYPEID);
        
        NUPRODMOTISUSP := PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME(PS_BOPRODUCTMOTIVE.CSBTAGGENERSUSPEVOL);
        
        MO_BOSUSPENSION.VALIDSUSPENSIONPERIOD(IDTFECHAAPLICA,IDTFECHAFINAL,NUPRODMOTISUSP,NUCOMPONENTID);
        UT_TRACE.TRACE('Finaliza mï¿½todo MO_BOGenericValid.ValSuspensionPeriod',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALSUSPENSIONPERIOD;
    
    
















    FUNCTION FNUOBTCANTPRODCLIEPORDIR
    (
        INUADDRESSID            IN     GE_SUBSCRIBER.ADDRESS_ID%TYPE,
        INUSUBSCRIBERID         IN     GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN NUMBER
    IS
            NUPRODCOUNT    NUMBER;
    BEGIN

        UT_TRACE.TRACE('INICIO MO_BOGenericValid.fnuObtCantProdCliePorDir AddressId ['||INUADDRESSID||'] SubscriberId ['||INUSUBSCRIBERID||']', 5);

        
        IF (PR_BCPRODUCT.CUNUMPRODBYSUBSCADDR%ISOPEN ) THEN
            CLOSE PR_BCPRODUCT.CUNUMPRODBYSUBSCADDR;
        END IF;

        
        OPEN PR_BCPRODUCT.CUNUMPRODBYSUBSCADDR(
                                          INUADDRESSID,
                                          INUSUBSCRIBERID
                                         );
        FETCH PR_BCPRODUCT.CUNUMPRODBYSUBSCADDR INTO NUPRODCOUNT;
        CLOSE PR_BCPRODUCT.CUNUMPRODBYSUBSCADDR;

        UT_TRACE.TRACE('FIN MO_BOGenericValid.fnuObtCantProdCliePorDir Total Productos ['||NUPRODCOUNT||']', 5);

        
        RETURN NUPRODCOUNT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF PR_BCPRODUCT.CUNUMPRODBYSUBSCADDR%ISOPEN THEN
               CLOSE PR_BCPRODUCT.CUNUMPRODBYSUBSCADDR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF PR_BCPRODUCT.CUNUMPRODBYSUBSCADDR%ISOPEN THEN
               CLOSE PR_BCPRODUCT.CUNUMPRODBYSUBSCADDR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUOBTCANTPRODCLIEPORDIR;

    




















    FUNCTION FNUGETCONTRACTBYSUBSCRIBER
    (
        INUSUBSCRIBERID     IN      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN SUSCRIPC.SUSCCODI%TYPE
    IS
        CURSOR CUSUBSCRIPTIONBYSUBS
        IS
        SELECT /*+INDEX (s IX_SUSCRIPC017) */
                S.*
        FROM   /*+MO_BOGenericValid.fnuGetContractBySubscriber.cuSubscriptionBySubs*/
                SUSCRIPC S
        WHERE SUSCCLIE = INUSUBSCRIBERID
        AND ROWNUM = 1;

        RCSUBSCRIPTION  CUSUBSCRIPTIONBYSUBS%ROWTYPE;
        
        PROCEDURE CLOSECURSOR
        IS
        BEGIN
            IF(CUSUBSCRIPTIONBYSUBS%ISOPEN)THEN
                CLOSE CUSUBSCRIPTIONBYSUBS;
            END IF;
        END CLOSECURSOR;
    BEGIN
        UT_TRACE.TRACE('BEGIN MO_BOGenericValid.fnuGetContractBySubscriber',10);
        CLOSECURSOR;

        
        IF(DAGE_SUBSCRIBER.FBLEXIST(INUSUBSCRIBERID))THEN
           OPEN CUSUBSCRIPTIONBYSUBS;
           FETCH CUSUBSCRIPTIONBYSUBS INTO RCSUBSCRIPTION;
           CLOSECURSOR;
        END IF;

        UT_TRACE.TRACE('END MO_BOGenericValid.fnuGetContractBySubscriber',10);
        RETURN RCSUBSCRIPTION.SUSCCODI;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCONTRACTBYSUBSCRIBER;
    
    



























    PROCEDURE CONTRACTHASPRODUCTSTYPE
    (
        INUSUBSCRIPTION     IN          PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        INUPRODUCTTYPEID    IN          PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        OSBHASPRODUCTTYP    OUT NOCOPY  VARCHAR2,
        ORCPRODUCT          OUT NOCOPY  DAPR_PRODUCT.STYPR_PRODUCT
    )
    IS
        TBPRODUCTS      DAPR_PRODUCT.TYTBPR_PRODUCT;
        NUPRDTSFLAG     BINARY_INTEGER;
        SBRETURN        VARCHAR2(1) := GE_BOCONSTANTS.CSBNO;
    BEGIN
        UT_TRACE.TRACE('INICIO MO_BOGenericValid.ContractHasProductsType',12);
        TBPRODUCTS := PR_BCPRODUCT.FTBGETPRODBYCONTNTYPE(INUSUBSCRIPTION, INUPRODUCTTYPEID);
        NUPRDTSFLAG := TBPRODUCTS.FIRST;
        
        IF (NUPRDTSFLAG IS NOT NULL) THEN
            SBRETURN := GE_BOCONSTANTS.CSBYES;
            ORCPRODUCT := TBPRODUCTS(NUPRDTSFLAG);
        END IF;
        
        OSBHASPRODUCTTYP := SBRETURN;
        UT_TRACE.TRACE('FIN MO_BOGenericValid.ContractHasProductsType',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CONTRACTHASPRODUCTSTYPE;
    
END MO_BOGENERICVALID;