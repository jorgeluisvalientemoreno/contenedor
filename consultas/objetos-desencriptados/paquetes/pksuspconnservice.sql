PACKAGE pkSuspConnService AS































































































































































































































































































































































































































































































































































































































































    
    
    
    
    
    CSBDESCONEXION      CONSTANT VARCHAR2(1) := 'D' ; 
    CSBCONEXION         CONSTANT VARCHAR2(1) := 'C' ; 
    CSBRETIRO           CONSTANT VARCHAR2(1) := 'R';  
    CSBREVISION         CONSTANT VARCHAR2(1) := 'V';  
    CSBTEMPORAL         CONSTANT VARCHAR2(1) := 'T' ; 
    CSBREINSTALACION    CONSTANT VARCHAR2(1) := 'I' ; 
    
    NUORDER_NUMBER      SUSPCONE.SUCONUOR%TYPE;

    
    
    
    VALORTARIFA		REGLTARI.RETAVABA%TYPE ;	
    
    TYPE TYMEMORYVAR IS RECORD
    (
        NUIDSUSPCONE        SUSPCONE.SUCOIDSC%TYPE,
        NUORDERTYPE         NUMBER,
        NUSERVICE           SERVSUSC.SESUSERV%TYPE,
        NUEVENAPLI          CONFESCO.COECCODI%TYPE,     
        NUNUMESERV          SERVSUSC.SESUNUSE%TYPE,     
        NUORDENUME          SUSPCONE.SUCONUOR%TYPE,     
        NUNUMETHREAD        NUMBER,                     
        SBIDTRACKING        ESTAPROG.ESPRPROG%TYPE,     
        NUINCONUME          REPORTES.REPONUME%TYPE,     
        NULININCO           NUMBER,
        NUSUBSCRIBER        SUSCRIPC.SUSCCODI%TYPE,
        CURRROWIDSUBSSERV   ROWID
    );
    
    RCMEMORYVAR     TYMEMORYVAR;

    
    
    

    FUNCTION FRCGETINSTANCEDATA
    RETURN TYMEMORYVAR;

    PROCEDURE SETINSTANCEDATA
    (
        RCMEMORYDATA IN TYMEMORYVAR
    );

    PROCEDURE SETRECORDTRIGGER
    (
        RCSERVSUSC  IN  SERVSUSC%ROWTYPE
    );

    PROCEDURE CHANGESTPAYMENTSERVNUMBER
	(
	    IRCSERVSUSC    IN    SERVSUSC%ROWTYPE,
	    IRCCONFESCO    IN    CONFESCO%ROWTYPE
	);
	
    PROCEDURE CONNECTIONORDER;
    
    
    PROCEDURE EXESUSPECONNEEVENT
	(
	    INUSERVCODI	    IN      SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI	    IN	    CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE	    IN	    SERVSUSC.SESUNUSE%TYPE,
	    INUDEPACODI	    IN      SERVSUSC.SESUDEPA%TYPE,
	    INULOCACODI	    IN      SERVSUSC.SESULOCA%TYPE,
	    INUSUCONUOR	    IN      SUSPCONE.SUCONUOR%TYPE,
	    INUCICLCODI	    IN      SUSCRIPC.SUSCCICL%TYPE,
	    
	    ISBTITUREPO     IN      REPORTES.REPODESC%TYPE,
	    ONUINCONUME	    OUT     REPORTES.REPONUME%TYPE,
	    ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	    OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
	);

    
    PROCEDURE EXESUSPECONNEEVENT
    (
        ISBPARAMETR     IN       VARCHAR2,
        ISBSUCOOBSE     IN       SUSPCONE.SUCOOBSE%TYPE,
        ISBSTRINGCONN   IN       VARCHAR2,
    	ISBRUTATRAZA    IN	     VARCHAR2,
    	ISBRUTAREPOR	IN	     VARCHAR2,
    	ISBREPORTE	    IN	     VARCHAR2,
        ONUERRORCODE    OUT      GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
        OSBERRORMESSAGE OUT      GE_ERROR_LOG.DESCRIPTION%TYPE
    );
    
    
    PROCEDURE EXESUSPECONNEEVENT
	(
	    INUSERVCODI	    IN     SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI	    IN	   CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE	    IN	   SERVSUSC.SESUNUSE%TYPE,
	    ONUINCONUME	    OUT    REPORTES.REPONUME%TYPE,
	    ONUERRORCODE    OUT    GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	    OSBERRORMESSAGE OUT    GE_ERROR_LOG.DESCRIPTION%TYPE
	);
	
    
    PROCEDURE EXESUSPECONNERULE
    (
        INUCOECCODI	    IN	 CONFESCO.COECCODI%TYPE,
        INUSESUNUSE	    IN	 SERVSUSC.SESUNUSE%TYPE,
        INUCICLCODI	    IN   SUSCRIPC.SUSCCICL%TYPE,
        ISBTITUREPO     IN   REPORTES.REPODESC%TYPE,
        INUCAUSCODE     IN   SUSPCONE.SUCOCACD%TYPE,
        ISBSUCOOBSE     IN   SUSPCONE.SUCOOBSE%TYPE,
        INUTOTALTHREADS IN   NUMBER,
        INUNUMETHREAD   IN   NUMBER,
        ISBCRITERIA     IN   VARCHAR2,
    	ISBIDTRACKING   IN   ESTAPROG.ESPRPROG%TYPE,
    	INUORDENUME     IN   SUSPCONE.SUCONUOR%TYPE,
    	INUREPONUME     IN   REPORTES.REPONUME%TYPE,
    	INUINCONUME     IN   REPORTES.REPONUME%TYPE
    );
    
    
    PROCEDURE EXEWITHDRAWEVENT
	(
	    INUSERVCODI	    IN  SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI	    IN	CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE	    IN	SERVSUSC.SESUNUSE%TYPE,
	    INUDEPACODI	    IN  SERVSUSC.SESUDEPA%TYPE,
	    INULOCACODI	    IN  SERVSUSC.SESULOCA%TYPE,
	    INUCICLCODI	    IN  SUSCRIPC.SUSCCICL%TYPE,
	    
	    ISBTITUREPO     IN  REPORTES.REPODESC%TYPE,
	    INUMOSUCODI     IN  NUMBER,
	    ISBACTARETI     IN  VARCHAR2,
	    ISBSUCOOBSE     IN  SUSPCONE.SUCOOBSE%TYPE,
	    ONUREPONUME	    OUT REPORTES.REPONUME%TYPE,
	    ONUINCONUME	    OUT REPORTES.REPONUME%TYPE,
	    ONUERRORCODE    OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	    OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE
	);
	
	
    PROCEDURE EXEWITHDRAWEVENT
	(
	    INUSERVCODI	    IN      SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI	    IN	    CONFESCO.COECCODI%TYPE,
	    INUDEPAPETI	    IN      NUMBER,
	    INULOCAPETI	    IN      NUMBER,
	    INUNUMEPETI	    IN      NUMBER,
	    INUSESUNUSE	    IN	    SERVSUSC.SESUNUSE%TYPE,
	    INUDEPACODI	    IN      SERVSUSC.SESUDEPA%TYPE,
	    INULOCACODI	    IN      SERVSUSC.SESULOCA%TYPE,
	    INUCICLCODI	    IN      SUSCRIPC.SUSCCICL%TYPE,
	    
	    ISBTITUREPO	    IN      REPORTES.REPODESC%TYPE,
	    ONUREPONUME	    OUT     REPORTES.REPONUME%TYPE,
	    ONUINCONUME	    OUT     REPORTES.REPONUME%TYPE,
	    ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	    OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
	) ;
    PROCEDURE EXEWITHDRAWEVENT
	(
	    INUSERVCODI	    IN    SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI	    IN    CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE	    IN    SERVSUSC.SESUNUSE%TYPE,
	    ISBACTARETI     IN    HISTRETI.HSREACRE%TYPE,
	    ONUERRORCODE    OUT   GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	    OSBERRORMESSAGE OUT   GE_ERROR_LOG.DESCRIPTION%TYPE
	);
	
    PROCEDURE PAYMENTCONNECTION ;
    
    PROCEDURE RENOVATIONORDER
	(
	    INUSESUNUSE	IN      SERVSUSC.SESUNUSE%TYPE,
	    INUCAUSCONE	IN      SUSPCONE.SUCOCACD%TYPE,
	    INUDEPAREPO	IN      SERVSUSC.SESUDEPA%TYPE,
	    INULOCAREPO	IN      SERVSUSC.SESULOCA%TYPE,
	    INUINCONUME	IN      REPORTES.REPONUME%TYPE,
	    ISBSUCOOBSE IN      SUSPCONE.SUCOOBSE%TYPE,
	    ISBSUCOTIPO IN      SUSPCONE.SUCOTIPO%TYPE,
	    INUNUMEORDE	IN      SUSPCONE.SUCONUOR%TYPE,
	    INUEVENAPLI	IN      SUSPCONE.SUCOCOEC%TYPE
	);
	
    PROCEDURE SUSPENSIONORDER   ;
    
    PROCEDURE WITHDRAWTEMPORAL   ;
    
    PROCEDURE ORDERWITHDRAWTEMPORAL   ;
    
    PROCEDURE ORDERINDIVWITHDRAWTEMPORAL
	(
	    IRCPSUCO    IN       NUMBER,
	    IRCCONFESCO    IN    CONFESCO%ROWTYPE
	);
    PROCEDURE WITHDRAWDEFINITIVE  ;
    
    PROCEDURE EXECONNECTIONINCLUDE
    (
    	INUSESUNUSE	    IN	    SERVSUSC.SESUNUSE%TYPE,
    	INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
    	INUCOECCODI	    IN     	CONFESCO.COECCODI%TYPE,
    	ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    );
    

    
    PROCEDURE EXESUSPENSIONINCLUDE
    (
    	INUSESUNUSE	    IN	    SERVSUSC.SESUNUSE%TYPE,
    	INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
    	INUCOECCODI	    IN	    CONFESCO.COECCODI%TYPE,
    	ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    );
    
    PROCEDURE REINSTALLORDER ;
    
    PROCEDURE CHECKORDER ;
    
    PROCEDURE GENERATEWITHDRAWPROCESS ;

    PROCEDURE ATTENINDIVSUSPECONNE
    (
        INUSUCOIDSC	    IN      SUSPCONE.SUCOIDSC%TYPE,
        INUSERVCODI	    IN      SERVSUSC.SESUSERV%TYPE,
    	INUCOECCODI	    IN	    CONFESCO.COECCODI%TYPE,
        IDTSUCOFEAT	    IN      SUSPCONE.SUCOFEAT%TYPE,
        ISBCUMPLIDA	    IN      SUSPCONE.SUCOTIPO%TYPE,
        ISBPROGRAMA     IN      HICAESCO.HCECPROG%TYPE,
    	ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    ) ;

    PROCEDURE ATTENINDIVWITHDRAW
    (
        INUSUCOIDSC	    IN      SUSPCONE.SUCOIDSC%TYPE,
        INUSERVCODI	    IN      SERVSUSC.SESUSERV%TYPE,
    	INUCOECCODI	    IN	    CONFESCO.COECCODI%TYPE,
        IDTSUCOFEAT	    IN      SUSPCONE.SUCOFEAT%TYPE,
    	ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    ) ;

    PROCEDURE INACTIVEBILLING;

    PROCEDURE SETEXPIREACCOUNNUMBER
    (
    	INUEXPACCOUNTNUMBER  IN    NUMBER
    ) ;

    PROCEDURE GETSTATUSCONFDATA
    (
        INUCLIENTTYPE   IN  COECTCPF.CTCPTICL%TYPE,
        INUBILLPLAN     IN  COECTCPF.CTCPPLFA%TYPE,
        INUPRODUCTTYPE  IN  SERVSUSC.SESUSERV%TYPE,
        INUPRODUCT      IN  SERVSUSC.SESUNUSE%TYPE,
        ORCCONFCOSE     OUT CONFCOSE%ROWTYPE,
        IBLSUSPENSION   IN  BOOLEAN DEFAULT FALSE
    );
    
    PROCEDURE ATTENINDIVREINSTALL
    (
        INUSUCOIDSC	    IN      SUSPCONE.SUCOIDSC%TYPE,
        INUSERVCODI	    IN      SERVSUSC.SESUSERV%TYPE,
    	INUCOECCODI	    IN	    CONFESCO.COECCODI%TYPE,
        IDTSUCOFEAT	    IN      SUSPCONE.SUCOFEAT%TYPE,
        ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    );

    PROCEDURE GENSUSPCONEASSO
    (
        INUSUCOIDSC	    IN          SUSPCONE.SUCOIDSC%TYPE,
        INUSESUNUSE	    IN          SERVSUSC.SESUNUSE%TYPE,
        ONUSUCOIDSC     OUT NOCOPY  SUSPCONE.SUCOIDSC%TYPE,
        ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    );


    PROCEDURE CHGTOWITHDRAWDEF
    (
        INUSESUNUSE	    IN      SERVSUSC.SESUNUSE%TYPE,
        ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    );


    PROCEDURE CHGTOPAYMENTAGREE
    (
        INUSESUNUSE	    IN      SERVSUSC.SESUNUSE%TYPE,
        ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    );

    FUNCTION FSBVERSION
    RETURN VARCHAR2;
    
    
    PROCEDURE EXEPRODSUSPCONNEVENT
    (
        INUPRODUCT          IN      SERVSUSC.SESUNUSE%TYPE,
        INUEVENTTOAPPLY     IN      ESTACORT.ESCOCODI%TYPE
    );

    PROCEDURE SUSPORDERBYCONTRACT;

    PROCEDURE WITHDRAWORDERBYCONTRACT;
    
    
    
    FUNCTION FBOHASPENDVOLWITHDRAW
    (
        INUPRODUCTID    IN      SERVSUSC.SESUNUSE%TYPE
    ) RETURN BOOLEAN;
    
    PROCEDURE CONNECTORDERBYSUBSC;

END PKSUSPCONNSERVICE;

/

PACKAGE BODY pkSuspConnService AS




























































































































































































































































































































































































































































































































































    
    
    
    TYPE TYTBPRODUCTS IS TABLE OF SERVSUSC%ROWTYPE INDEX BY BINARY_INTEGER;
    
    
    
    NUSISTEMA		SISTEMA.SISTCODI%TYPE ;     
    SBERRMSG		VARCHAR2(2000);		        
    NUCAUSCARG		CARGOS.CARGCACA%TYPE ;	    
    SBTERM		    SA_TERMINAL.NAME%TYPE ;     
    NULININCO		NUMBER := 0;		        
    NULINEA		    NUMBER := 0;		        
    RCSISTEMA		SISTEMA%ROWTYPE;	        
    SBDOCUSOPO		CARGOS.CARGDOSO%TYPE;	    
    NUORDEN		    SUSPCONE.SUCONUOR%TYPE;     
    SBEVENCARG		VARCHAR2(1) ;		        
    NUESTCORTEINACTIVE ESTACORT.ESCOCODI%TYPE;  

    
    NUNUMEPROC      INSTPROC.INPRCODI%TYPE;     
    NUNUMETHREAD    NUMBER;                     
    NUTOTALTHREADS  NUMBER;                     
    BLSELECTDATA    BOOLEAN;                    
    SBIDTRACKING	ESTAPROG.ESPRPROG%TYPE;     
    SBMESSPROCC	    MENSAJE.MENSDESC%TYPE;      
    NUPERCENTAGE    NUMBER := 0;		        
    NUSERVCODI		CONFESCO.COECSERV%TYPE;     
    NUEVENAPLI		CONFESCO.COECCODI%TYPE;     
    NUNUMESERV		SERVSUSC.SESUNUSE%TYPE;     
    NUCURRSUBSSERV  SERVSUSC.SESUNUSE%TYPE;     
    NUDEPACODI		SERVSUSC.SESUDEPA%TYPE;     
    NULOCACODI		SERVSUSC.SESULOCA%TYPE;     
    NUDEPAORDE		SUSPCONE.SUCODEPA%TYPE;     
    NULOCAORDE		SUSPCONE.SUCOLOCA%TYPE;     
    NUORDENUME		SUSPCONE.SUCONUOR%TYPE;     
    NUCICLCODI		CICLO.CICLCODI%TYPE;	    
    NUAVALPROC		INSTPROC.INPRPRIN%TYPE;	    
    SBTITUREPO		REPORTES.REPODESC%TYPE;	    
    NUREPONUME		REPORTES.REPONUME%TYPE;     
    NUINCONUME		REPORTES.REPONUME%TYPE;	    
    NUCAUSCODE		SUSPCONE.SUCOCACD%TYPE;     
    SBSUCOOBSE		SUSPCONE.SUCOOBSE%TYPE;     
    NUMOSUCODI		NUMBER;                     
    NUDEPAPETI		NUMBER;                     
    NULOCAPETI		NUMBER;             	    
    NUNUMEPETI		NUMBER;	                    
    SBACTARETI		HISTRETI.HSREACRE%TYPE;	    
    NUMOTIVO_RETIRO_POR_NO_PAGO NUMBER;
    SBINTORD_HAB	VARCHAR2(1) ;		    
    NUDESCONEXION	NUMBER                ;    
    NUDIAS_ADICION_FECHA_SUSP       NUMBER ;    
    NULIMITE_DE_USO                 NUMBER ;    
    NUEXPACCOUNTNUMBER              NUMBER ;    
    NUCURRROWIDSUBSSERV             ROWID  ;    
    NUCURRCYCLE     SUSCRIPC.SUSCCICL%TYPE ;    
    NUCURRSUSCCLIE  SUSCRIPC.SUSCCLIE%TYPE ;    
    NUCURRSERVICE   SERVSUSC.SESUSERV%TYPE ;    
    NUCURRSUBSCRIBER SUSCRIPC.SUSCCODI%TYPE;    
    BLISLOADED    BOOLEAN:=FALSE ;          
    GRCTRGSERVSUSC      SERVSUSC%ROWTYPE;  

    
    
    
    
    CSBVERSION   CONSTANT VARCHAR2(250) := 'SAO390034';
    CSBPROGRAM      CONSTANT VARCHAR2(4) := 'FPCA';

    CNUNO_ENCO_REGIS    CONSTANT NUMBER:= 10032;      
    CNUFECAPRONULA	CONSTANT NUMBER:= 4378;	      
    CNUTIENE        CONSTANT NUMBER := 1 ;
    CNUNOTIENE      CONSTANT NUMBER := 0 ;
    CNUNO_TIENE_INCLUSION    CONSTANT NUMBER := 0 ;   
    CNUERROR_HAS_ORDER  CONSTANT NUMBER:=10463;      
    CNUNO_LECT_FACT	CONSTANT NUMBER:=10466;      
    CNUNO_LECT_FASU	CONSTANT NUMBER:=10468;	     
    CNUMESSPROCC  	CONSTANT NUMBER:= 27;
    CNUBULK         CONSTANT NUMBER:= 100;
    CNUINACTIVO     CONSTANT NUMBER:=  96;      
    
    
    
    
    
    
    CURSOR CURETITEMP    (  INUSERV    SUSPCONE.SUCOSERV%TYPE,
			    INUNUSE    SERVSUSC.SESUNUSE%TYPE,
			    INUDEPA    SUSPCONE.SUCODEPA%TYPE,
			    INULOCA    SUSPCONE.SUCOLOCA%TYPE,
			    INUCICL    SUSCRIPC.SUSCCICL%TYPE,
			    INUCTAS    CONFCOSE.COCSNCDX%TYPE,
			   
			    INUESCO    RECAESCO.RCECCOEC%TYPE ) IS
    SELECT SESUNUSE,
           SESUFECO,
           SESUSUSC,
           SESUSERV,
           SESUDEPA,
           SESULOCA,
           SESUCATE,
           SESUSUCA,
           SESUPLFA,
          
           SESUEXCL,
           SESUINCL,

           PKBCSUBSCRIPTION.FNUGETNONAPPLIEDPAY (SUSCCODI) SUSCVRAP,
           
           SUSCCICL
    FROM  SERVSUSC, SUSCRIPC, GE_SUBSCRIBER, GE_SUBSCRIBER_TYPE
    WHERE SESUSERV = INUSERV
    AND   SESUNUSE = DECODE (INUNUSE, PKCONSTANTE.NULLNUM, SESUNUSE, INUNUSE)
    AND   SESUDEPA = DECODE (INUDEPA, PKCONSTANTE.NULLNUM, SESUDEPA, INUDEPA)
    AND   SESULOCA = DECODE (INULOCA, PKCONSTANTE.NULLNUM, SESULOCA, INULOCA)
  
    AND   SESUSUSC = SUSCCODI
    AND   SUSCCICL = DECODE ( INUCICL, PKCONSTANTE.NULLNUM, SUSCCICL, INUCICL )
    AND   SUSCCLIE = SUBSCRIBER_ID
    AND   GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID = GE_SUBSCRIBER_TYPE.SUBSCRIBER_TYPE_ID
    AND   VALID_FOR_DISCONNECT IN ( PKCONSTANTE.SI, CSBTEMPORAL )
 
    AND   EXISTS (   SELECT RCECCOER
                     FROM RECAESCO
			         WHERE  RCECSERV = INUSERV
			         AND    RCECCOEC = INUESCO
                     AND    RCECCOER = SESUESCO );
                     
    RCCUSERVSUSC    CURETITEMP%ROWTYPE;

    
    
    

    PROCEDURE VALORDERDATAFORATTEN 
	(
	    IDTSUCOFEOR     IN    SUSPCONE.SUCOFEOR%TYPE,
	    IDTSUCOFEAT	    IN    SUSPCONE.SUCOFEAT%TYPE,
	    IDTSUCOFEATCURR IN    SUSPCONE.SUCOFEAT%TYPE
	) ;

    PROCEDURE CLEARMEMORY
    ;
    PROCEDURE EXERULECHARGECALCULATE
	(
	    IRCCONFESCO    IN    CONFESCO%ROWTYPE
	);
    PROCEDURE GETPARAMETERS 
    ;
    
    PROCEDURE VALINPUTDATAORE 
	( 
	    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE	IN	    SERVSUSC.SESUNUSE%TYPE,
	    INUDEPACODI	IN      SERVSUSC.SESUDEPA%TYPE,
	    INULOCACODI	IN      SERVSUSC.SESULOCA%TYPE,
	    INUCICLCODI	IN      SUSCRIPC.SUSCCICL%TYPE,
	    
	    INUDEPAPETI	IN      NUMBER,
	    INULOCAPETI	IN      NUMBER,
	    INUNUMEPETI	IN      NUMBER
	);
    
    PROCEDURE VALINPUTDATA
	(
	    INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI     IN      CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE     IN      SERVSUSC.SESUNUSE%TYPE,
	    INUDEPACODI     IN      SERVSUSC.SESUDEPA%TYPE,
	    INULOCACODI     IN      SERVSUSC.SESULOCA%TYPE,
	    INUCICLCODI     IN      SUSCRIPC.SUSCCICL%TYPE
	    
	);
    
    PROCEDURE VALINPUTDATAATL
	(
	    INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI     IN      CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE     IN      SERVSUSC.SESUNUSE%TYPE,
	    INUDEPACODI     IN      SERVSUSC.SESUDEPA%TYPE,
	    INULOCACODI     IN      SERVSUSC.SESULOCA%TYPE,
	    INUSUCONUOR     IN      SUSPCONE.SUCONUOR%TYPE,
	    INUCICLCODI     IN      SUSCRIPC.SUSCCICL%TYPE

	);
    
    PROCEDURE VALINPUTDATA
    (
        INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
        INUCOECCODI     IN      CONFESCO.COECCODI%TYPE,
        INUSESUNUSE     IN      SERVSUSC.SESUNUSE%TYPE,
        INUDEPACODI     IN      SERVSUSC.SESUDEPA%TYPE,
        INULOCACODI     IN      SERVSUSC.SESULOCA%TYPE,
        INUDEPAORDE     IN      SUSPCONE.SUCODEPA%TYPE,
        INULOCAORDE     IN      SUSPCONE.SUCOLOCA%TYPE,
        INUSUCONUOR     IN      SUSPCONE.SUCONUOR%TYPE,
        INUCICLCODI     IN      SUSCRIPC.SUSCCICL%TYPE

    );

    
    PROCEDURE VALINPUTDATADEF
    (
       INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
       INUCOECCODI     IN      CONFESCO.COECCODI%TYPE,
       INUSESUNUSE     IN      SERVSUSC.SESUNUSE%TYPE
    );

    
    PROCEDURE VALINPUTDATAORD
	(
	    INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI     IN      CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE     IN      SERVSUSC.SESUNUSE%TYPE,
	    INUDEPACODI     IN      SERVSUSC.SESUDEPA%TYPE,
	    INULOCACODI     IN      SERVSUSC.SESULOCA%TYPE,
	    INUCICLCODI     IN      SUSCRIPC.SUSCCICL%TYPE,
	   
	    INUCAUSCODE     IN      SUSPCONE.SUCOCACD%TYPE
	);
    
    PROCEDURE VALINPUTDATA
	(
	    INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI     IN      CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE     IN      SERVSUSC.SESUNUSE%TYPE
	) ;
	
    
    PROCEDURE VALINPUTDATA
	(
	    INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI     IN      CONFESCO.COECCODI%TYPE,
	    INUSESUNUSE     IN      SERVSUSC.SESUNUSE%TYPE,
	    INUDEPACODI     IN      SERVSUSC.SESUDEPA%TYPE,
	    INULOCACODI     IN      SERVSUSC.SESULOCA%TYPE,
	    INUCICLCODI     IN      SUSCRIPC.SUSCCICL%TYPE,
	    INUMOSUCODI     IN      NUMBER
	);
	
    PROCEDURE EXECUTEFUNCTIONAPPLY
	(
	    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	    INUCOECCODI	IN	CONFESCO.COECCODI%TYPE
	);
	
	PROCEDURE FILLSERVNUMBERRECORD;

    FUNCTION FSBGETMESSAPROC
    (
        ISBMESSPROCC         IN      VARCHAR2,
        INUPROCSSNUMBER      IN      NUMBER
    )
    RETURN VARCHAR2;
    
    PROCEDURE GENORDERFORCOVEREDPRODS
    (
        ISBORDERTYPE            IN      SUSPCONE.SUCOTIPO%TYPE,
        ITBPRODUCTS             IN      PKBCSERVSUSC.TYTBPRODUCTS,
        INUBILLINGSTATUSID      IN      ESTACORT.ESCOCODI%TYPE
    );
    
    
    
    RCSERVSUSC    SERVSUSC%ROWTYPE;	 




































PROCEDURE NOTIFYERROR
(
    INUINCONUME IN  REPORTES.REPONUME%TYPE,
    INULININCO  IN  OUT NUMBER,
    INUORDENUME IN  SUSPCONE.SUCONUOR%TYPE,
    INUSESUNUSE IN  SERVSUSC.SESUNUSE%TYPE,
    INUSUSCRIPC IN  SERVSUSC.SESUSUSC%TYPE,
    ISBMESSAGE  IN  VARCHAR2
)
IS
BEGIN

    PKERRORS.PUSH ('pkSuspConnService.NotifyError');

    ROLLBACK;

    
    INULININCO := INULININCO + 1;

    PKGENERALSERVICES.TRACEDATA('inuIncoNume'||INUINCONUME);
    PKGENERALSERVICES.TRACEDATA('nuLinInco'||INULININCO);


    IF ( INUSUSCRIPC IS NULL ) THEN
        
        PKREPORTSINCMGR.INSERTREPORTLINE (  INUINCONUME,
                                            INULININCO,
                                            INUORDENUME,
                                            INUSESUNUSE,
                                            ISBMESSAGE
                                         );

    ELSE
        PKREPORTSINCMGR.INSERTREPORTLINE (  INUINCONUME,
                                            INULININCO,
                                            INUORDENUME,
                                            INUSUSCRIPC,
                                            INUSESUNUSE,
                                            NULL,
                                            NULL,
                                            NULL,
                                            ISBMESSAGE
                                         );
    END IF;
    
    PKERRORS.INITIALIZE ;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END NOTIFYERROR ;

























PROCEDURE VALORDERDATAFORATTEN 
    (
	IDTSUCOFEOR     IN    SUSPCONE.SUCOFEOR%TYPE,
	IDTSUCOFEAT	IN    SUSPCONE.SUCOFEAT%TYPE,
	IDTSUCOFEATCURR IN    SUSPCONE.SUCOFEAT%TYPE
    )
IS

BEGIN

    PKERRORS.PUSH('pkSuspConnService.ValOrderDataforAtten');

    
    IF ( IDTSUCOFEATCURR IS NOT NULL ) THEN
    
	PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION,
				PKCONSTANTE.CSBMOD_BIL,
				12512 );
	RAISE LOGIN_DENIED ;
    
    END IF ;

    
    PKSUSPCONNSERVICEMGR.VALDATELESSORDERDATE ( IDTSUCOFEOR, IDTSUCOFEAT );

    
    PKSUSPCONNSERVICEMGR.VALDATELESSCURRENT ( IDTSUCOFEAT );

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALORDERDATAFORATTEN;






























FUNCTION FBOVALCREDITLIMIT
(
    INUPRODUCTID        IN      SERVSUSC.SESUNUSE%TYPE
) RETURN BOOLEAN
IS

    
    NUCREDITLIMIT       PR_PRODUCT.CREDIT_LIMIT%TYPE;
    
    
    NUPRODUCTPENDBAL    NUMBER;

    
    
    BOFLAG              BOOLEAN;

BEGIN

    UT_TRACE.TRACE( 'Inicio: pkSuspConnService.fblValCreditLimit', 1 );

    
    BOFLAG := FALSE;

    
    NUCREDITLIMIT := DAPR_PRODUCT.FNUGETCREDIT_LIMIT( INUPRODUCTID );

    
    NUPRODUCTPENDBAL := PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBAL( INUPRODUCTID );

    
    IF ( NVL( NUCREDITLIMIT, PKBILLCONST.CERO ) <> PKBILLCONST.CERO ) THEN
    
        
        IF ( NUPRODUCTPENDBAL > NUCREDITLIMIT ) THEN
        
            
            BOFLAG := TRUE;
        
        END IF;
    
    END IF;

    UT_TRACE.TRACE( 'Fin: pkSuspConnService.fblValCreditLimit', 1 );

    RETURN BOFLAG;

EXCEPTION

    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	RAISE;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END;





















    PROCEDURE CLEARMEMORY
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ClearMemory]', 5 );

        
        PKTBLPERIFACT.CLEARMEMORY;
        PKTBLSERVSUSC.CLEARMEMORY;
        PKTBLSUSCRIPC.CLEARMEMORY;
        PKTBLCONFCOSE.CLEARMEMORY;
        PKTBLCONFESCO.CLEARMEMORY;
        PKTBLSUSPCONE.CLEARMEMORY;
        PKTBLCUENCOBR.CLEARMEMORY;
        PKTBLSISTEMA.CLEARMEMORY;

        
        CC_BORELACIONCOMERCIAL.LIMPIARMEMORIA;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ClearMemory]', 5 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ClearMemory]', 5 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ClearMemory]', 5 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
    

















PROCEDURE EXERULECHARGECALCULATE
    (
	IRCCONFESCO    IN    CONFESCO%ROWTYPE 
    )
IS
BEGIN
    PKERRORS.PUSH('pkSuspConnService.ExeRuleChargeCalculate');
    
    PKGENERALSERVICES.EXECUTEDYNAMICPLSQL('pkSuspConnService.ValorTarifa:= ' || IRCCONFESCO.COECFUFA || ';' );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END EXERULECHARGECALCULATE;

















PROCEDURE EXECUTEFUNCTIONAPPLY
    (
        INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	CONFESCO.COECCODI%TYPE
    )
IS
BEGIN
    PKERRORS.PUSH('pkSuspConnService.ExecuteFunctionApply');
    
    PKGENERALSERVICES.TRACEDATA('Servicio '||INUSERVCODI);
    PKGENERALSERVICES.TRACEDATA('Evento '||INUCOECCODI);
    PKSUSPCONNSERVICEMGR.EXECUTEFUNCTIONAPPLY ( INUSERVCODI, INUCOECCODI );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END EXECUTEFUNCTIONAPPLY;































































PROCEDURE GETPARAMETERS
IS
BEGIN
    PKERRORS.PUSH ('pkSuspConnService.GetParameters');
    
    
    IF ( BLISLOADED ) THEN
    
        PKERRORS.POP;
        RETURN ;
    
    END IF ;
    
    PKGRLPARAMEXTENDEDMGR.SETCACHEON ;
    
       
    SBMESSPROCC := PKTBLMENSAJE.FSBGETDESCRIPTION
					         (
						    PKCONSTANTE.CSBDIVISION,
						    PKCONSTANTE.CSBMOD_GRL,
						    CNUMESSPROCC
					         );
					         
    
    NUSISTEMA := SA_BOSYSTEM.FNUGETUSERCOMPANYID;
    
    
    RCSISTEMA := PKTBLSISTEMA.FRCGETRECORD ( NUSISTEMA );
					         
    
    NUESTCORTEINACTIVE := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
						('ESTACORT_INACTIVE');
						
    
    NUMOTIVO_RETIRO_POR_NO_PAGO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
					('MOTIVO_RETIRO_POR_NO_PAGO' );
					
    
    SBINTORD_HAB :=PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE('INTORD_HAB');

    
    NUDESCONEXION:=PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE('DESCONEXION');
    
    
    NUDIAS_ADICION_FECHA_SUSP := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE(
                            'DIAS_ADICION_FECHA_SUSP'
                            ) ;


    
    PKGENERALSERVICES.VALVALUEEQUALGREATERZERO( NUDIAS_ADICION_FECHA_SUSP ) ;
    
    
    NULIMITE_DE_USO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE(
                            'LIMITE_DE_USO'
                            ) ;
    
    
    BLISLOADED := TRUE ;							
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2; 
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END;


























PROCEDURE UPDOVERDUEFINANSTAT
(	IRCSERVSUSC	      IN	    SERVSUSC%ROWTYPE )
IS

    
    PRAGMA AUTONOMOUS_TRANSACTION;

    NUMORAPROD     CUENCOBR.CUCOSACU%TYPE;
BEGIN
    PKERRORS.PUSH ('pkSuspConnService.UpdOverdueFinanStat');
    UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.UpdOverdueFinanStat]', 6 );
    
    IF( NVL( IRCSERVSUSC.SESUESFN,PKBILLCONST.CSBEST_AL_DIA ) = PKBILLCONST.CSBEST_EN_DEUDA ) THEN
        UT_TRACE.TRACE( 'Actualizando Estado Financiero - Producto ['||IRCSERVSUSC.SESUNUSE||']', 6 );
        
        NUMORAPROD := PR_BOSUSPENDCRITERIONS.FNUGETPRODEXPTOTALVAL( IRCSERVSUSC.SESUNUSE );

        
        
        IF ( NVL(NUMORAPROD,PKBILLCONST.CERO ) > PKBILLCONST.CERO ) THEN
            PKTBLSERVSUSC.UPDSESUESFN( IRCSERVSUSC.SESUNUSE,
                                       PKBILLCONST.CSBEST_EN_MORA );
            UT_TRACE.TRACE( 'Estado Financiero - [EN MORA]', 6 );
        END IF;
    END IF;
    UT_TRACE.TRACE( 'Fin: [pkSuspConnService.UpdOverdueFinanStat]', 6 );

    
    PKGENERALSERVICES.COMMITTRANSACTION;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END UPDOVERDUEFINANSTAT;








































PROCEDURE VALINPUTDATA 
( 
    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	IN	    SERVSUSC.SESUNUSE%TYPE,
    INUDEPACODI	IN      SERVSUSC.SESUDEPA%TYPE,
    INULOCACODI	IN      SERVSUSC.SESULOCA%TYPE,
    INUCICLCODI	IN      SUSCRIPC.SUSCCICL%TYPE
)
IS
BEGIN
    PKERRORS.PUSH ('pkSuspConnService.ValInputData');
    
    
    PKTBLCONFESCO.ACCKEY ( INUSERVCODI, INUCOECCODI, PKCONSTANTE.NOCACHE );
    
    PKSERVNUMBERMGR.VALIDATENULL( INUSESUNUSE );
    
    PKTBLSERVSUSC.ACCKEY ( INUSESUNUSE, PKCONSTANTE.NOCACHE );
    
    PKTBLDEPARTAM.ACCKEY ( INUDEPACODI, PKCONSTANTE.NOCACHE );
    
    PKTBLLOCALIDA.ACCKEY ( INUDEPACODI, INULOCACODI, PKCONSTANTE.NOCACHE );
    
    PKTBLCICLO.ACCKEY ( INUCICLCODI, PKCONSTANTE.NOCACHE );

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END VALINPUTDATA;





































PROCEDURE VALINPUTDATA
( 
    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	IN	    SERVSUSC.SESUNUSE%TYPE,
    INUDEPACODI	IN      SERVSUSC.SESUDEPA%TYPE,
    INULOCACODI	IN      SERVSUSC.SESULOCA%TYPE,
    INUDEPAORDE	IN      SUSPCONE.SUCODEPA%TYPE,
    INULOCAORDE	IN      SUSPCONE.SUCOLOCA%TYPE,
    INUSUCONUOR	IN      SUSPCONE.SUCONUOR%TYPE,
    INUCICLCODI	IN      SUSCRIPC.SUSCCICL%TYPE
)
IS
BEGIN

    PKERRORS.PUSH ('pkSuspConnService.ValInputData');
    
    
    VALINPUTDATA (  INUSERVCODI, INUCOECCODI, INUSESUNUSE, 
		    INUDEPACODI, INULOCACODI, INUCICLCODI) ;
    
    PKTBLDEPARTAM.ACCKEY ( INUDEPAORDE, PKCONSTANTE.NOCACHE );
    
    PKTBLLOCALIDA.ACCKEY ( INUDEPAORDE, INULOCAORDE, PKCONSTANTE.NOCACHE );
    
    PKSUSPCONNSERVICEMGR.VALEXISTORDER ( INUDEPAORDE, 
					 INULOCAORDE, 
					 INUSUCONUOR );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALINPUTDATA;





































PROCEDURE VALINPUTDATAORE 
( 
    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	IN	    SERVSUSC.SESUNUSE%TYPE,
    INUDEPACODI	IN      SERVSUSC.SESUDEPA%TYPE,
    INULOCACODI	IN      SERVSUSC.SESULOCA%TYPE,
    INUCICLCODI	IN      SUSCRIPC.SUSCCICL%TYPE,
    INUDEPAPETI	IN      NUMBER,
    INULOCAPETI	IN      NUMBER,
    INUNUMEPETI	IN      NUMBER
)
IS
BEGIN

    PKERRORS.PUSH ('pkSuspConnService.ValInputDataORe');
    
    
    VALINPUTDATA (  INUSERVCODI, INUCOECCODI,
		            INUSESUNUSE, INUDEPACODI,
		            INULOCACODI, INUCICLCODI ) ;
    
    PKTBLDEPARTAM.ACCKEY ( INUDEPAPETI, PKCONSTANTE.NOCACHE );
    
    PKTBLLOCALIDA.ACCKEY ( INUDEPAPETI, INULOCAPETI, PKCONSTANTE.NOCACHE );

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALINPUTDATAORE;








































PROCEDURE VALINPUTDATAORD
( 
    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	IN	    SERVSUSC.SESUNUSE%TYPE,
    INUDEPACODI	IN      SERVSUSC.SESUDEPA%TYPE,
    INULOCACODI	IN      SERVSUSC.SESULOCA%TYPE,
    INUCICLCODI	IN      SUSCRIPC.SUSCCICL%TYPE,
	INUCAUSCODE IN      SUSPCONE.SUCOCACD%TYPE
)
IS
BEGIN

    PKERRORS.PUSH ('pkSuspConnService.ValInputDataOrd');
    
    
    VALINPUTDATA (  INUSERVCODI, INUCOECCODI,
        		    INUSESUNUSE, INUDEPACODI,
        		    INULOCACODI, INUCICLCODI
        		 ) ;
    
    PKTBLCAUSCODE.ACCKEY ( INUCAUSCODE, PKCONSTANTE.NOCACHE );
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALINPUTDATAORD;




















PROCEDURE VALINPUTDATA 
( 
    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	IN	SERVSUSC.SESUNUSE%TYPE
)
IS
BEGIN
    PKERRORS.PUSH ('pkSuspConnService.ValInputData');
    
    PKTBLCONFESCO.ACCKEY ( INUSERVCODI, INUCOECCODI, PKCONSTANTE.NOCACHE );
    
    
    
    
    
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END;





































PROCEDURE VALINPUTDATA
( 
    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	IN	    SERVSUSC.SESUNUSE%TYPE,
    INUDEPACODI	IN      SERVSUSC.SESUDEPA%TYPE,
    INULOCACODI	IN      SERVSUSC.SESULOCA%TYPE,
    INUCICLCODI	IN      SUSCRIPC.SUSCCICL%TYPE,
	INUMOSUCODI	IN      NUMBER
)
IS
BEGIN

    PKERRORS.PUSH ('pkSuspConnService.ValInputData');
    
    
    VALINPUTDATA (  INUSERVCODI, INUCOECCODI, INUSESUNUSE, 
        		    INUDEPACODI, INULOCACODI, INUCICLCODI
		         ) ;
		         
    
    DAGE_RETIRE_TYPE.ACCKEY ( INUMOSUCODI );
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALINPUTDATA;




































PROCEDURE VALINPUTDATAATL
( 
    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	IN	    SERVSUSC.SESUNUSE%TYPE,
    INUDEPACODI	IN      SERVSUSC.SESUDEPA%TYPE,
    INULOCACODI	IN      SERVSUSC.SESULOCA%TYPE,
    INUSUCONUOR	IN      SUSPCONE.SUCONUOR%TYPE,
    INUCICLCODI	IN      SUSCRIPC.SUSCCICL%TYPE
)
IS
BEGIN

    PKERRORS.PUSH ('pkSuspConnService.ValInputDataAtl');
    
    
    VALINPUTDATA (  INUSERVCODI, INUCOECCODI, INUSESUNUSE, 
	           	    INUDEPACODI, INULOCACODI, INUCICLCODI
        		 ) ;

    
    PKSUSPCONNSERVICEMGR.VALEXISTORDER ( INUSUCONUOR ); 
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALINPUTDATAATL;










































PROCEDURE VALINPUTDATADEF 
( 
    INUSERVCODI	IN  SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	IN	SERVSUSC.SESUNUSE%TYPE
)
IS
    NUVALORRECLAMO       PKBCSERVSUSC.STYSESUVARE ; 
    NURECLPAGNOABO	     PKBCSERVSUSC.STYSESUVRAP ; 
    CNUTIENE_RECLAMOS    CONSTANT NUMBER := 9565 ;  
    CNUDEPEN_RECLAMOS    CONSTANT NUMBER := 16300 ; 
    CNUORD_GEN_SIN_ATE   CONSTANT NUMBER := 3664 ;  
    CNUCARGO_FACTURA	 CONSTANT NUMBER := 8020 ;  
BEGIN

    PKERRORS.PUSH ('pkSuspConnService.ValInputDataDef');
    
    
    PKTBLCONFESCO.ACCKEY ( INUSERVCODI, INUCOECCODI, PKCONSTANTE.NOCACHE );
    
    
    PKSERVNUMBERMGR.VALIDATENULL( INUSESUNUSE );
    
    
    PKTBLSERVSUSC.ACCKEY ( INUSESUNUSE, PKCONSTANTE.NOCACHE );
    
    
    NUVALORRECLAMO := PR_BOSUSPENDCRITERIONS.FNUGETCLAIMVALUE
                      (
                          INUSESUNUSE
                      );
                      
    
    NURECLPAGNOABO := PR_BOSUSPENDCRITERIONS.FNUGETNONAPPLIEDPAY
                      (
                          INUSESUNUSE
                      );
                      
    IF ( NUVALORRECLAMO > PKBILLCONST.CERO
	     OR
         NURECLPAGNOABO > PKBILLCONST.CERO )
    THEN
    
    	PKERRORS.SETERRORCODE(  PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_SAT,
    				CNUTIENE_RECLAMOS );
    	RAISE LOGIN_DENIED;
    
    END IF ;
    
    
    PKBCDEPENDINGPRODUCT.GETDEPENDINGPRODUCTSCLAIMVALUE
    (
        INUSESUNUSE,
        NUVALORRECLAMO,
        NURECLPAGNOABO
    );

    IF ( NUVALORRECLAMO > PKBILLCONST.CERO OR NURECLPAGNOABO > PKBILLCONST.CERO ) THEN
    
    	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, CNUDEPEN_RECLAMOS );
    	RAISE LOGIN_DENIED;
    
    END IF ;

    
    
    IF ( UPPER( SBINTORD_HAB ) = PKCONSTANTE.SI ) THEN
        NULL;
    END IF;
    
    
    NUMOSUCODI := NULL ;
    
    
    IF PKCHARGEMGR.FBLEXISTCHARGBILLNULLSERVICE ( INUSESUNUSE ) THEN
    
    	PKERRORS.SETERRORCODE(  PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_SAT,
    				CNUCARGO_FACTURA );
    	RAISE LOGIN_DENIED;
    
    END IF;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALINPUTDATADEF;


















PROCEDURE CHANGESTPAYMENTSERVNUMBER
    (
	IRCSERVSUSC    IN    SERVSUSC%ROWTYPE,
	IRCCONFESCO    IN    CONFESCO%ROWTYPE
    )
IS
BEGIN
    PKERRORS.PUSH('pkSuspConnService.ChangeStPaymentServNumber');
    
    PKTBLSERVSUSC.UPSUSPENSIONSTATUS (  IRCSERVSUSC.SESUNUSE, 
					IRCCONFESCO.COECCODI 
				     ); 
    
    PKSUSPCONNSERVICEMGR.APPLYCHARGE ( IRCSERVSUSC, IRCCONFESCO );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END CHANGESTPAYMENTSERVNUMBER;






























































































PROCEDURE CHECKORDER
IS
    
    SBERRORDIV		MENSAJE.MENSDIVI%TYPE ;
    SBERRORMOD		MENSAJE.MENSMODU%TYPE ;
    NUERRORCOD		MENSAJE.MENSCODI%TYPE ;
    SBERRORMES		MENSAJE.MENSDESC%TYPE ;
    NUSESUNUSE		SERVSUSC.SESUNUSE%TYPE:= 0; 
    NUNUMEORDE		SUSPCONE.SUCONUOR%TYPE;     
    NUTCCLTCON      TICOCLSE.TCCLTCON%TYPE;	    
    BLPROCESS		BOOLEAN := FALSE;	        
    RCCONFESCO		CONFESCO%ROWTYPE ;	        
    TBMEASELEM      PKMEASELEMSUBSSERVMGR.TYTBELEMMEDIBYSUBSSERV;

    
    
    
    
    PROCEDURE GETDATA
    IS
    BEGIN
        PKERRORS.PUSH('pkSuspConnService.CheckOrder.GetData');
            	    	
    	
    	RCSERVSUSC := PKSERVNUMBERMGR.FRCGETRECORD( NUCURRROWIDSUBSSERV );
    	
    	
    	TBMEASELEM := PKMEASELEMSUBSSERVMGR.FTBELEMMEDIBYSUBSSERV(RCSERVSUSC.SESUNUSE);
    	
    	
    	NUNUMEORDE := PKSUSPCONNSERVICEMGR.FNUGETORDERNUMBER(RCSERVSUSC.SESUNUSE,
                                                             RCSERVSUSC.SESUFECO);
    	   	
        
        RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO (  RCSERVSUSC.SESUSERV,
                                                             NUEVENAPLI );

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETDATA ;
    
    PROCEDURE VALREADINGS ( RCLECTSUSP	IN	LECTELME%ROWTYPE,
			    RCLECTFACT	IN	LECTELME%ROWTYPE
			  )
    IS
    BEGIN
        PKERRORS.PUSH('pkSuspConnService.CheckOrder.ValReadings');
        
        IF (RCLECTFACT.LEEMLETO IS NULL) THEN
            
            PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL,
                                        CNUNO_LECT_FACT );
            RAISE LOGIN_DENIED ;
        END IF;
        
        IF (RCLECTSUSP.LEEMFELE > RCLECTFACT.LEEMFELE) THEN
                
                PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL,
                                        CNUNO_LECT_FASU );
                RAISE LOGIN_DENIED ;
        END IF;
	
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END VALREADINGS ;
    
    PROCEDURE PROCESSSERVICES( INURECORD    NUMBER )
    IS
        RCLECTSUSP		LECTELME%ROWTYPE;
        RCLECTFACT		LECTELME%ROWTYPE;
        TBCONSUTYPE     GE_BCCONSTYPEBYGAMA.TYTBCONSUMPTIONTYPE;
    BEGIN
        PKERRORS.PUSH('pkSuspConnService.CheckOrder.ProcessServices');

    	
        GE_BCCONSTYPEBYGAMA.GETCONSUMPTYPEBYSERIE(TBMEASELEM(INURECORD).EMSSCOEM, TBCONSUTYPE);

        IF (TBCONSUTYPE.COUNT=0) THEN
        PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, 10026);
        END IF;
        
        NUTCCLTCON:=TBCONSUTYPE(TBCONSUTYPE.FIRST).TCONCODI;

    	
    	PKMEASUREMENTREADINGMGR.GETLASTREADING (
    						    TBMEASELEM(INURECORD).EMSSELME,
    						    NUTCCLTCON,
    						    CM_BOCONSTANTS.CSBCAUS_LECT_RETI,
    						    NUNUMEORDE,
    						    RCLECTSUSP
    						);
    	
    	
    	PKMEASUREMENTREADINGMGR.GETLASTREADING (
    						    TBMEASELEM(INURECORD).EMSSELME,
    						    NUTCCLTCON,
    						    CM_BOCONSTANTS.CSBCAUS_LECT_BILL,
    						    PKCONSTANTE.NULLNUM,
    						    RCLECTFACT
    						);

    	
    	RCLECTSUSP.LEEMFELE := TRUNC(RCLECTSUSP.LEEMFELE);
    	
    	VALREADINGS(RCLECTSUSP,RCLECTFACT);
    	
    	
    	IF (RCLECTSUSP.LEEMLETO <> RCLECTFACT.LEEMLETO OR RCLECTSUSP.LEEMLETO IS NULL) THEN
    	
    	    NULINEA := NULINEA + 1;
    	    
    	    PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
    					    (
    						
    						
    						NUORDENUME,
    						NUREPONUME,
    						NUCAUSCODE,
    						CSBREVISION,
    						SBSUCOOBSE,
    						NULINEA,
    						RCSERVSUSC,
    						RCCONFESCO,
    						NUCICLCODI
    					    );	
    	    
    	    BLPROCESS:= TRUE;
    	     
    	ELSE BLPROCESS := FALSE;
    	
    	END IF;
    	PKERRORS.POP;
    EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END PROCESSSERVICES ;
    
BEGIN
    PKERRORS.PUSH('pkSuspConnService.CheckOrder');
    
    
    GETDATA;

    
    PKSUSPCONNSERVICEMGR.EXECUTEADDVALRULE( RCSERVSUSC.SESUSERV, NUEVENAPLI);

    

    IF ( TBMEASELEM.FIRST IS NULL
         OR
         RCSERVSUSC.SESUCLPR = PKSPONSOREDACCOUNTMGR.CSBSPONSOR) THEN
    
        PKERRORS.POP;
        RETURN;
    
    END IF;

    FOR NURECORD IN TBMEASELEM.FIRST .. TBMEASELEM.LAST LOOP
    
        
        PROCESSSERVICES(NURECORD);
        
        EXIT WHEN BLPROCESS;
    
    END LOOP;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END CHECKORDER;








































































































































































PROCEDURE CONNECTIONORDER
IS
    RCCONFESCO		    CONFESCO%ROWTYPE;	        
    NUCUENSALD		    CONFCOSE.COCSNCDX%TYPE;     
    NUDIASCORT		    CONFESCO.COECDICO%TYPE;     
    
    
    BOISSPONSORPROD             BOOLEAN := FALSE;
    
    
    BOISCOVEREDPROD             BOOLEAN := FALSE;
    
    
    TBCOMMRELDETAILS            DACC_DETAIL_COM_RELA.TYTBCC_DETAIL_COM_RELA;
    
    
    RCCOMMRELDETAIL             DACC_DETAIL_COM_RELA.STYCC_DETAIL_COM_RELA;
    
    NUMASTERPRODUCT             SERVSUSC.SESUNUSE%TYPE;
    
    BOISBUNDLED                 BOOLEAN;
    
    RCDETAIL                    DACC_DET_BUNDLED.STYCC_DET_BUNDLED;
    
    NUSUSPTOTAL                 ESTACORT.ESCOCODI%TYPE;
    
    
    
    
    
    
    PROCEDURE GETDATA
    IS
        RCCONFCOSE	CONFCOSE%ROWTYPE;
        NUCUSTTYPE  GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE;
        NUUSER      FUNCIONA.FUNCUSBA%TYPE;
        RCFUNC      FUNCIONA%ROWTYPE;
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ConnectionOrder.GetData]', 6 );

        
        
        RCCOMMRELDETAIL := CC_BCRELACIONCOMERCIAL.FRCOBTDETPRODAMPARADO
        (
            RCSERVSUSC.SESUNUSE,
            UT_DATE.FDTSYSDATE
        );

        IF ( RCCOMMRELDETAIL.DETAIL_COM_RELA_ID IS NOT NULL ) THEN
        
            
            
            BOISCOVEREDPROD := TRUE;
            BOISSPONSORPROD := FALSE;
        
        
        
        ELSE
        
            TBCOMMRELDETAILS := CC_BCRELACIONCOMERCIAL.FTBOBTDETPRODAMPARADOR
            (
                RCSERVSUSC.SESUNUSE,
                UT_DATE.FDTSYSDATE
            );

            IF ( TBCOMMRELDETAILS.COUNT > 0 ) THEN
            
                
                
                BOISCOVEREDPROD := FALSE;
                BOISSPONSORPROD := TRUE;
            
            ELSE
            
                
                
                BOISCOVEREDPROD := FALSE;
                BOISSPONSORPROD := FALSE;
            
            END IF;
        
        END IF;

        
        RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO
        (
            RCSERVSUSC.SESUSERV,
            NUEVENAPLI
        );

        
        NUDIASCORT := RCCONFESCO.COECDICO;

        
        NUCUSTTYPE := DAGE_SUBSCRIBER.FNUGETSUBSCRIBER_TYPE_ID( NUCURRSUSCCLIE );

        
        NUORDER_NUMBER := NUORDENUME;

        
        PKSUSPCONNSERVICE.GETSTATUSCONFDATA
        (
            NUCUSTTYPE,
            RCSERVSUSC.SESUPLFA,
            RCSERVSUSC.SESUSERV,
            RCSERVSUSC.SESUNUSE,
            RCCONFCOSE,
            TRUE
        );

        
        
        IF ( RCCONFCOSE.COCSNCCX = RCCONFCOSE.COCSNCDX ) THEN
        
            NUCUENSALD := RCCONFCOSE.COCSNCCX - 1;
        
        ELSE
        
            NUCUENSALD := RCCONFCOSE.COCSNCCX;
        
        END IF;

        NUUSER := PKGENERALSERVICES.FSBGETUSERNAME;
        RCFUNC := PKBCFUNCIONA.FRCFUNCIONA( NUUSER );
        PKGENERALSERVICES.SETSERVICEREP( RCFUNC.FUNCCODI );

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ConnectionOrder.GetData]', 6 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ConnectionOrder.GetData]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.ConnectionOrder.GetData]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END GETDATA;
    
    
    














    
    FUNCTION FBLPROCESSSERVSUSC
    RETURN BOOLEAN
    IS
        
        NUCUENSALDSERV	    PKBCSERVSUSC.STYSESUCUSA;
        
        RCCOMMRELATIONTYPE  DACC_RELATION_TYPE.STYCC_RELATION_TYPE;
        
        SBEST_FIN_CASTIGADO CONSTANT SERVSUSC.SESUESFN%TYPE := 'C';
    BEGIN
    
        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ConnectionOrder.fblProcessServsusc]', 6 );

        
        IF ( BOISCOVEREDPROD ) THEN
        
            UT_TRACE.TRACE( 'El producto se encuentra amparado en una relaci�n comercial', 7 );
            
            
            RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( RCCOMMRELDETAIL.COMM_RELATION_ID );

            
            
            IF ( RCCOMMRELATIONTYPE.INDIV_COVERED_CONN = CC_BOCONSTANTS.CSBNO ) THEN
            
                UT_TRACE.TRACE( 'Relaci�n comercial no permite reconexi�n individual de productos amparados, no genera orden', 7 );
                RETURN FALSE;
            
            END IF;
            
            
            IF ( NOT PR_BOSUSPCORTERECONEXION.FBOESVALIDOPARACONEXION( RCSERVSUSC.SESUNUSE ) ) THEN
            
                UT_TRACE.TRACE( 'Producto no es v�lido para conexi�n, no genera orden', 7 );
                RETURN FALSE;
            
            END IF;
        
        END IF;

        
        IF ( NVL( INSTR( RCSERVSUSC.SESUINCL, '|', 2 ), 0 ) > 0 ) THEN
        
            UT_TRACE.TRACE( 'Producto tiene inclusion, no genera orden [' || RCSERVSUSC.SESUINCL || ']', 7 );
            RETURN FALSE;
    	
    	END IF;

        
        IF ( PKSUSPCONNSERVICEMGR.FBLEXISTORDER( RCSERVSUSC.SESUDEPA,
                                                 RCSERVSUSC.SESULOCA,
                                                 RCSERVSUSC.SESUNUSE,
                                                 CSBRETIRO )
        ) THEN
        
            UT_TRACE.TRACE( 'El producto tiene una orden de retiro pendiente de atender, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;

        
        IF ( PKSUSPCONNSERVICEMGR.FBLEXISTORDER( RCSERVSUSC.SESUDEPA,
                                                 RCSERVSUSC.SESULOCA,
                                                 RCSERVSUSC.SESUNUSE,
                                                 CSBCONEXION )
        ) THEN
        
            UT_TRACE.TRACE( 'El producto tiene una orden de reconexi�n pendiente de atender, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;
        
        
        IF   NVL (RCSERVSUSC.SESUESFN, PKCONSTANTE.NULLSB) = SBEST_FIN_CASTIGADO
        THEN
        
            UT_TRACE.TRACE( 'El producto est� castigada, no genera orden', 6 );
            RETURN FALSE;
        
        END IF;

        
	    NUCUENSALDSERV := PKBOEXPIREDACCOUNTS.FNUPERIODSWITHEXPACCOUNTS( RCSERVSUSC.SESUNUSE );

        UT_TRACE.TRACE( 'Valida el n�mero de per�odos vencidos del producto, Per�odos vencidos producto ['
                       || NUCUENSALDSERV || '] -> Per�odos vencidos para reconexi�n [' || NUCUENSALD || ']', 7 );
                       
	    
        
	    IF ( NUCUENSALDSERV > NUCUENSALD ) THEN
	    
            UT_TRACE.TRACE( 'N�mero de per�odos vencidos del producto es mayor al n�mero de per�odos para reconexi�n, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;

    	
        IF ( RCSERVSUSC.SESUROGA = PKWARRANTYMGR.CSBPROPIETARIO) THEN
        
            UT_TRACE.TRACE( 'Producto es propietario, no genera orden ', 7 );
            RETURN FALSE;
        
    	END IF;
    	
        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ConnectionOrder.fblProcessServsusc]', 6 );
        RETURN TRUE;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ConnectionOrder.fblProcessServsusc]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.ConnectionOrder.fblProcessServsusc]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END FBLPROCESSSERVSUSC;
    
    PROCEDURE PROCESSPRODUCT
    IS
        
        RCCOMMRELATIONTYPE  DACC_RELATION_TYPE.STYCC_RELATION_TYPE;
        
        
        TBCOVEREDPRODS      PKBCSERVSUSC.TYTBPRODUCTS;
        
        NUCOVPRODSIDX       BINARY_INTEGER;
    BEGIN

        UT_TRACE.TRACE( 'pkSuspConnService.ConnectionOrder.ProcessProduct', 16 );

        NULINEA := NULINEA + 1;

        
        PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
        (
            NUORDENUME,
            NUREPONUME,
            NUCAUSCODE,
            CSBCONEXION,
            SBSUCOOBSE,
            NULINEA,
            RCSERVSUSC,
            RCCONFESCO,
            NUCURRCYCLE
        );

        
        IF ( BOISSPONSORPROD ) THEN
        
            UT_TRACE.TRACE( 'El producto es amparador en una relaci�n comercial, se genera orden para productos amparados', 7 );

            
            NUCOVPRODSIDX := TBCOMMRELDETAILS.FIRST;

            LOOP
            
                
                EXIT WHEN NUCOVPRODSIDX IS NULL;

                
                
                RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( TBCOMMRELDETAILS( NUCOVPRODSIDX ).COMM_RELATION_ID );

                UT_TRACE.TRACE( 'Producto amparado [' || TO_CHAR( TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID ) || ']', 8 );
                UT_TRACE.TRACE( 'Flag de reconexi�n de producto amparado al reconectar producto amparador [' || RCCOMMRELATIONTYPE.SPONSOR_CONN_COVERED || ']', 8 );

                
                
                
                IF ( RCCOMMRELATIONTYPE.SPONSOR_CONN_COVERED = CC_BOCONSTANTS.CSBSI ) THEN
                
                    
                    
                    
                    TBCOVEREDPRODS( NUCOVPRODSIDX ) := PKTBLSERVSUSC.FRCGETRECORD
                    (
                        TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID
                    );
                
                END IF;

                
                NUCOVPRODSIDX := TBCOMMRELDETAILS.NEXT( NUCOVPRODSIDX );
            
            END LOOP;

            
            GENORDERFORCOVEREDPRODS( CSBCONEXION, TBCOVEREDPRODS, NUEVENAPLI );
        
        END IF;

        UT_TRACE.TRACE( 'Fin pkSuspConnService.ConnectionOrder.ProcessProduct', 16 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSPRODUCT;
    
    PROCEDURE PROCESSPACKAGE
    IS
        NUIDX           BINARY_INTEGER;
        NUORDERTYPE     NUMBER;
        SBORDERPROCESS  VARCHAR2(1);
        NURULEID        GE_ACT_PRODTYPE_STAT.RULE_ID%TYPE;
        TBPACKAGEPRODS  PKBCSERVSUSC.TYTBPRODUCTS;
        ONUERRCODE      NUMBER;
        OSBERRMSG       VARCHAR2(2000);
    BEGIN

        UT_TRACE.TRACE( 'pkSuspConnService.ConnectionOrder.ProcessProduct', 16 );

        
        PR_BOPRODUCTBUNDLE.GETPACKAGEPRODSBYPROD( RCSERVSUSC.SESUNUSE,  
                                                  TBPACKAGEPRODS );     

        NUIDX := TBPACKAGEPRODS.FIRST;

        WHILE ( NUIDX IS NOT NULL ) LOOP

            
            IF ( NVL( TBPACKAGEPRODS(NUIDX).SESUROGA, PKCONSTANTE.NULLSB ) <>
                 PKWARRANTYMGR.CSBPROPIETARIO
            AND  NOT PKSUSPCONNSERVICEMGR.FBLEXISTORDER(
                                                PKCONSTANTE.NULLNUM,
                                                PKCONSTANTE.NULLNUM,
                                                TBPACKAGEPRODS(NUIDX).SESUNUSE,
                                                CSBCONEXION ) )
            THEN

                NULINEA := NULINEA + 1;
                
                
                GC_BOSUSPREMRECONORD.SETPRODUCTID(TBPACKAGEPRODS(NUIDX).SESUNUSE);

                
                PKSUSPCONNSERVICEMGR.INIIDSUSPCONE;

                
                NUORDENUME := PKCONSTANTE.NULLNUM;

                
                NUCURRSUBSSERV := TBPACKAGEPRODS(NUIDX).SESUNUSE;

                
                NUCURRSERVICE := TBPACKAGEPRODS(NUIDX).SESUSERV;

                
                
                PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( FALSE );

                
                PKSUSPCONNSERVICEMGR.GETACTIVITYEXECDATA
                (
                    TBPACKAGEPRODS(NUIDX).SESUSERV,
                    NUEVENAPLI,
                    NURULEID,
            		SBORDERPROCESS
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERPROCESS( SBORDERPROCESS );

                
                BI_BOSUSPCONNWITHDRAW.GETORDERTYPEBYBILLSTATUS
                (
                    NUEVENAPLI,
                    NUORDERTYPE
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERTYPE( NUORDERTYPE );

                
                RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO
                (
                    TBPACKAGEPRODS(NUIDX).SESUSERV,
                    NUEVENAPLI
                );

                
                PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
                (
                    NUORDENUME,
                    NUREPONUME,
                    NUCAUSCODE,
                    CSBCONEXION,
                    SBSUCOOBSE,
                    NULINEA,
                    TBPACKAGEPRODS(NUIDX),
                    RCCONFESCO,
                    NUCURRCYCLE
                );

                
                
                
                IF ( NURULEID IS NOT NULL AND PKSUSPCONNSERVICEMGR.FNUGETIDSUSPCONE > 0 )
                THEN
                
                    
                    
                    PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( TRUE );

                    
                    GR_BOCONFIG_EXPRESSION.EXECUTE(NURULEID, ONUERRCODE, OSBERRMSG);

                END IF;

            END IF;

            NUIDX := TBPACKAGEPRODS.NEXT( NUIDX );

        END LOOP;

        UT_TRACE.TRACE( 'Fin pkSuspConnService.ConnectionOrder.ProcessProduct', 16 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSPACKAGE;
    
    
    
    PROCEDURE PROCESSSERVICES
    IS
    
        
        
        TBCOVEREDPRODS      PKBCSERVSUSC.TYTBPRODUCTS;

        
        NUCOVPRODSIDX       BINARY_INTEGER;
    
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ConnectionOrder.ProcessServices]', 6 );

        
    	IF ( NOT FBLPROCESSSERVSUSC ) THEN
	       RETURN;
    	END IF;

        
        PKSUSPCONNSERVICEMGR.VALIDSUSPENSIONDAYS
        (
            RCSERVSUSC.SESUNUSE,
            NUDIASCORT,
            RCSERVSUSC.SESUFECO,
            NUCUENSALD
        );

        
        PKSUSPCONNSERVICEMGR.EXECUTEADDVALRULE( RCSERVSUSC.SESUSERV, NUEVENAPLI );

        
        IF ( BOISBUNDLED ) THEN

            
            PROCESSPACKAGE;

        ELSE

            
            PROCESSPRODUCT;

        END IF;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ConnectionOrder.ProcessServices]', 6 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ConnectionOrder.ProcessServices]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.ConnectionOrder.ProcessServices]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSSERVICES;
    
BEGIN

    UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ConnectionOrder] Producto [' || NUCURRSUBSSERV || ']', 5 );
    
    
    GETPARAMETERS;
    
    
    RCDETAIL := CC_BCBUNDLED.FRCDETAILBYPRODUCT( NUCURRSUBSSERV );

    
    RCSERVSUSC := PKSERVNUMBERMGR.FRCGETRECORD( NUCURRROWIDSUBSSERV );

    
    NUSUSPTOTAL := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'ESCO_SUSP_TOTAL' );

    
    BOISBUNDLED := RCDETAIL.BUNDLED_ID IS NOT NULL AND
                   RCSERVSUSC.SESUESCO = NUSUSPTOTAL;

    
    IF ( BOISBUNDLED ) THEN

        
        NUMASTERPRODUCT := CC_BOBUNDLE.FNUGETMAINPRODINBUNDL(
                                                            RCDETAIL.BUNDLED_ID );

        
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( NUMASTERPRODUCT );

    END IF;

    
    GETDATA;

    
    PROCESSSERVICES;

    UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ConnectionOrder]', 5 );

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE( 'Error: [pkSuspConnService.ConnectionOrder]', 5 );
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.ConnectionOrder]', 5 );
        RAISE EX.CONTROLLED_ERROR;
END CONNECTIONORDER;





















PROCEDURE EXECONNECTIONINCLUDE
    (
	INUSESUNUSE	IN	SERVSUSC.SESUNUSE%TYPE,
	INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	CONFESCO.COECCODI%TYPE,
	ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS
    
    
    
    




    PROCEDURE INITIALIZE IS
    BEGIN
	PKERRORS.PUSH('pkSuspConnService.Initialize');
	
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE,
			      PKCONSTANTE.INITIALIZE );
	
	NUSERVCODI := INUSERVCODI ;
	NUEVENAPLI := INUCOECCODI ;
	NUNUMESERV := INUSESUNUSE ;
	PKERRORS.POP;
    EXCEPTION
	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE;
    END INITIALIZE;
BEGIN
    PKERRORS.PUSH('pkSuspConnService.ExeConnectionInclude');
    SAVEPOINT SPPKSUSPCONNSERVICE;
    
    INITIALIZE ;
    
    CLEARMEMORY;
    
    GETPARAMETERS;
    
    VALINPUTDATA (  INUSERVCODI, INUCOECCODI, INUSESUNUSE );
    
    EXECUTEFUNCTIONAPPLY ( NUSERVCODI, NUEVENAPLI );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
	ROLLBACK TO SAVEPOINT SPPKSUSPCONNSERVICE;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
	ROLLBACK TO SAVEPOINT SPPKSUSPCONNSERVICE;
END EXECONNECTIONINCLUDE;













































PROCEDURE EXESUSPECONNEEVENT
(
    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
    INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE,
    INUSESUNUSE	IN	    SERVSUSC.SESUNUSE%TYPE,
    INUDEPACODI	IN      SERVSUSC.SESUDEPA%TYPE,
    INULOCACODI	IN      SERVSUSC.SESULOCA%TYPE,
    INUSUCONUOR	IN      SUSPCONE.SUCONUOR%TYPE,
    INUCICLCODI	IN      SUSCRIPC.SUSCCICL%TYPE,
    ISBTITUREPO IN      REPORTES.REPODESC%TYPE,
    ONUINCONUME	OUT     REPORTES.REPONUME%TYPE,
    ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
)
IS
    
    
    
    




    PROCEDURE INITIALIZE
    IS
    BEGIN
    
    	PKERRORS.PUSH('pkSuspConnService.Initialize');
    	
    	
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE,
    			      PKCONSTANTE.INITIALIZE );
    	
    	NUSERVCODI := INUSERVCODI ;
    	NUEVENAPLI := INUCOECCODI ;
    	NUNUMESERV := INUSESUNUSE ;
    	NUDEPACODI := INUDEPACODI ;
    	NULOCACODI := INULOCACODI ;
    	NUORDENUME := INUSUCONUOR ;
    	NUCICLCODI := INUCICLCODI ;
    	SBTITUREPO := ISBTITUREPO ;
    	
    	PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	    PKERRORS.POP;
    	    RAISE;
    
    END INITIALIZE;
BEGIN

    PKERRORS.PUSH('pkSuspConnService.ExeSuspeConneEvent_C');
    
    
    INITIALIZE ;
    
    
    CLEARMEMORY;
    
    
    GETPARAMETERS;
    
    
    VALINPUTDATAATL (  INUSERVCODI, INUCOECCODI, INUSESUNUSE, 
            		   INUDEPACODI, INULOCACODI, INUSUCONUOR,
		               INUCICLCODI
                    );
                    
    
    EXECUTEFUNCTIONAPPLY ( NUSERVCODI, NUEVENAPLI );
    
    
    ONUINCONUME := NUINCONUME ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END EXESUSPECONNEEVENT;








































PROCEDURE EXESUSPECONNEEVENT
    (
        ISBPARAMETR     IN       VARCHAR2,
        ISBSUCOOBSE     IN       SUSPCONE.SUCOOBSE%TYPE,
        ISBSTRINGCONN   IN       VARCHAR2,
    	ISBRUTATRAZA    IN	     VARCHAR2,
    	ISBRUTAREPOR	IN	     VARCHAR2,
    	ISBREPORTE	    IN	     VARCHAR2,    	
        ONUERRORCODE    OUT      GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
        OSBERRORMESSAGE OUT      GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS
    SBSENTENCIA VARCHAR2(2000);  
    SBARCHTRAZA  VARCHAR2(1000); 
    SBSTRINGCONNDESENCRYP   VARCHAR2(500);
    
    
    
    
    




    PROCEDURE INITIALIZE IS
    BEGIN
    	PKERRORS.PUSH('pkSuspConnService.Initialize');
    	
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE,
    			      PKCONSTANTE.INITIALIZE );
    			      
        
        SBARCHTRAZA := 'fpca_'
                       ||PKGENERALSERVICES.FSBGETUSERNAME
                       ||TO_CHAR(SYSDATE,'DD'  )
                       ||TO_CHAR(SYSDATE,'HH24')
                       ||TO_CHAR(SYSDATE,'MI'  )
                       ||'.trc';

    	PKERRORS.POP;
	EXCEPTION
	    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
		PKERRORS.POP;
		RAISE;
    END INITIALIZE;
    

    
    
    
    







    PROCEDURE DESENCRYPTPASSW IS

        SBSTRINGCONN            VARCHAR2(500);  
        SBLOGIN                 VARCHAR2(2000); 
        SBPASSWD                VARCHAR2(2000); 
        SBKEYENCRYPT            VARCHAR2(2000) := '00101000101010'; 
        NUACTIONENCRIPTAR       NUMBER := 1; 
        SBPASSWDDESENCRYP       VARCHAR2(100); 


    BEGIN
    	PKERRORS.PUSH('pkSuspConnService.DesEncryptPassw');

        SBSTRINGCONN := ISBSTRINGCONN;
        SBLOGIN := SUBSTR(SBSTRINGCONN,0,INSTR(SBSTRINGCONN,'/',1));
        
        SBSTRINGCONN := SUBSTR(SBSTRINGCONN,INSTR(SBSTRINGCONN,'/') + 1);
        SBPASSWD := SUBSTR( SBSTRINGCONN,0, INSTR(SBSTRINGCONN,'@')-1);
        
        SBSTRINGCONN := SUBSTR(SBSTRINGCONN,INSTR(SBSTRINGCONN,'@'));
        
        
        PKCONTROLCONEXION.ENCRIPTA( SBPASSWD,
                                    SBPASSWDDESENCRYP,
                                    SBKEYENCRYPT,
                                    NUACTIONENCRIPTAR
                                   );

        
        SBSTRINGCONNDESENCRYP := SBLOGIN||SBPASSWDDESENCRYP||SBSTRINGCONN;
        PKERRORS.POP;
	EXCEPTION
	    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
		PKERRORS.POP;
		RAISE;
    END DESENCRYPTPASSW;

BEGIN
    PKERRORS.PUSH('pkSuspConnService.ExeSuspeConneEvent_P');
    
    
    INITIALIZE ;
    
    CLEARMEMORY;
    
    
    DESENCRYPTPASSW;
    
    SBSENTENCIA := 'fpca ' ||
                   SBSTRINGCONNDESENCRYP || ' "' ||
        		   ISBPARAMETR ||'" "'||
        		   ISBRUTAREPOR||'" "'||
        		   ISBREPORTE  ||'" "'||
                   ISBSUCOOBSE || '" ' || ' > ' || ISBRUTATRAZA ||'/'||
                   SBARCHTRAZA||' 2>'|| CHR(38)||'1 '||CHR(38) ;
    DBMS_OUTPUT.PUT_LINE(SBSENTENCIA);

    PKGENERALSERVICES.TRACEDATA( SBSENTENCIA );
    
    
    LLAMASIST( SBSENTENCIA );
               
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
END EXESUSPECONNEEVENT;






















PROCEDURE EXESUSPECONNEEVENT
    (
        INUSERVCODI	    IN      SERVSUSC.SESUSERV%TYPE,
        INUCOECCODI	    IN	    CONFESCO.COECCODI%TYPE,
        INUSESUNUSE	    IN	    SERVSUSC.SESUNUSE%TYPE,
        ONUINCONUME	    OUT     REPORTES.REPONUME%TYPE,
        ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
        OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS
    
    
    
    




    PROCEDURE INITIALIZE IS
    BEGIN
	PKERRORS.PUSH('pkSuspConnService.Initialize');
	
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE,
			      PKCONSTANTE.INITIALIZE );
	
	NUSERVCODI := INUSERVCODI ; 
	NUEVENAPLI := INUCOECCODI ;
	NUNUMESERV := INUSESUNUSE ;
	PKERRORS.POP;
    EXCEPTION
	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE;
    END INITIALIZE;
BEGIN
    PKERRORS.PUSH('pkSuspConnService.ExeSuspeConneEvent');
    
    INITIALIZE ;
    
    CLEARMEMORY;
    
    GETPARAMETERS;
    
    VALINPUTDATA (  INUSERVCODI, INUCOECCODI, INUSESUNUSE );
    
    EXECUTEFUNCTIONAPPLY ( NUSERVCODI, NUEVENAPLI );
    
    ONUINCONUME := NUINCONUME ;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
END EXESUSPECONNEEVENT;


























































































































PROCEDURE EXESUSPECONNERULE
(
    INUCOECCODI	    IN	 CONFESCO.COECCODI%TYPE,
    INUSESUNUSE	    IN	 SERVSUSC.SESUNUSE%TYPE,
    INUCICLCODI	    IN   SUSCRIPC.SUSCCICL%TYPE,
    ISBTITUREPO     IN   REPORTES.REPODESC%TYPE,
    INUCAUSCODE     IN   SUSPCONE.SUCOCACD%TYPE,
    ISBSUCOOBSE     IN   SUSPCONE.SUCOOBSE%TYPE,
    INUTOTALTHREADS IN   NUMBER,
    INUNUMETHREAD   IN   NUMBER,
    ISBCRITERIA     IN   VARCHAR2,
	ISBIDTRACKING   IN   ESTAPROG.ESPRPROG%TYPE,
	INUORDENUME     IN   SUSPCONE.SUCONUOR%TYPE,
	INUREPONUME     IN   REPORTES.REPONUME%TYPE,
	INUINCONUME     IN   REPORTES.REPONUME%TYPE
)
IS
    
    
    
    NUNUMSUBSSERVICES           NUMBER;
    BLREGTOPROCESS              BOOLEAN;
    RCTBREQSTATES               PKSUSPCONNSERVICEMGR.TYTBSTATES;
    RCTBSUBSSERVICES            PKSUSPCONNSERVICEMGR.TYTBSUBSSERVICES;
    NUMINSUBSSERV               NUMBER :=0;
    NUCURRSTATSUSP              NUMBER;
    
    
    
    CNUCANT_CHANGE_STATUS       CONSTANT MENSAJE.MENSCODI%TYPE := 11111;
    
    
    
    
    PROCEDURE INITIALIZE
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule.Initialize]', 6 );
        
    	
        IF ( PKERRORS.FSBGETAPPLICATION IS NULL ) THEN
        
            PKERRORS.SETAPPLICATION( CSBPROGRAM );
        
        END IF;
        
        NUEVENAPLI     := INUCOECCODI;
    	NUNUMESERV     := INUSESUNUSE;
    	NUCICLCODI     := INUCICLCODI;
    	SBTITUREPO     := ISBTITUREPO;
    	NUCAUSCODE     := INUCAUSCODE;
    	SBSUCOOBSE     := ISBSUCOOBSE;
    	SBIDTRACKING   := ISBIDTRACKING;
    	NUNUMEPROC     := PKSUSPCONNSERVICEMGR.CNUSUSPCONNSERVICE_PROCESS_ID;
    	NUNUMETHREAD   := INUNUMETHREAD;
    	NUTOTALTHREADS := INUTOTALTHREADS;
        NUORDENUME     := INUORDENUME;
        NUORDER_NUMBER := INUORDENUME;
        NUREPONUME     := INUREPONUME;
        NUINCONUME     := INUINCONUME;
        NULININCO      := NUNUMETHREAD * 1000000;
        NULINEA        := NULININCO;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.Initialize]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.Initialize]', 6 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.Initialize]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
    
    
















    PROCEDURE NOTIFYERROR
    (
        ISBMESSAGE      IN      VARCHAR2
    )
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule.NotifyError]', 6 );

        
        NULININCO := NULININCO + 1;

        UT_TRACE.TRACE( 'nuIncoNume  -> ' || TO_CHAR( NUINCONUME ), 7 );
        UT_TRACE.TRACE( 'nuLinInco   -> ' || TO_CHAR( NULININCO ), 7 );

        IF ( NUCURRSUBSCRIBER IS NULL ) THEN
        
            
            PKREPORTSINCMGR.INSERTREPORTLINE
            (
                NUINCONUME,
                NULININCO,
                NUORDENUME,
                NUCURRSUBSSERV,
                ISBMESSAGE
            );
        
        ELSE
        
            PKREPORTSINCMGR.INSERTREPORTLINE
            (
                NUINCONUME,
                NULININCO,
                NUORDENUME,
                NUCURRSUBSCRIBER,
                NUCURRSUBSSERV,
                NULL,
                NULL,
                NULL,
                ISBMESSAGE
            );
        
        END IF;
        
        
        PKERRORS.INITIALIZE;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.NotifyError]', 6 );
        
    EXCEPTION
    
        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.NotifyError]', 6 );
            RAISE;
            
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.NotifyError]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;

    
    PROCEDURE GETDATA
    IS
    
        
        
        RCPRODUCT           SERVSUSC%ROWTYPE;
    
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule.GetData]', 6 );

        
        
        IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NOT NULL ) THEN
        
            
            RCPRODUCT := PKTBLSERVSUSC.FRCGETRECORD( INUSESUNUSE );
            
            
            
            RCTBREQSTATES.TBRCECCOEC( 1 ) := NUEVENAPLI;
            RCTBREQSTATES.TBRCECCOER( 1 ) := RCPRODUCT.SESUESCO;
        
        ELSE
        
            
            RCTBREQSTATES := PKSUSPCONNSERVICEMGR.FTBGETSTATESTOPROCESS( NUEVENAPLI );
        
        END IF;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.GetData]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.GetData]', 6 );
            RAISE;
            
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.GetData]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
    
    PROCEDURE ADDIDTRACKING
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule.AddIdTracking]', 6 );
        
        
        PKSUSPCONNSERVICEMGR.ADDSTATUSREG
        (
            SBIDTRACKING,
            NUORDER_NUMBER,
            INUTOTALTHREADS,
            INUNUMETHREAD,
            NUEVENAPLI,
            NUCICLCODI,
            NUNUMESERV
        );

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.AddIdTracking]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.AddIdTracking]', 6 );
            RAISE;
            
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.AddIdTracking]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
    
    PROCEDURE EXEFUNCTIONBYPRODUCT
    (
        INUPRODUCT          IN  SERVSUSC.SESUNUSE%TYPE,
        INUPRODUCTTYPEID    IN  SERVSUSC.SESUSERV%TYPE
    )
    IS
        
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule.ExeFunctionByProduct]', 6 );

        UT_TRACE.TRACE( 'Va a Ejecutar regla RECAESCO, Evento[' ||
            TO_CHAR( NUEVENAPLI ) || '] Servicio [' || TO_CHAR( INUPRODUCTTYPEID ) ||
            '] Estado de Corte actual [' || TO_CHAR( NUCURRSTATSUSP ) || ']', 7 );

        
        PKSUSPCONNSERVICEMGR.EXECUTEFUNCTIONAPPLY
        (
            INUPRODUCT,
            INUPRODUCTTYPEID,
            NUEVENAPLI,
            NUCURRSTATSUSP
        );

        
        PKGENERALSERVICES.COMMITTRANSACTION;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.ExeFunctionByProduct]', 6 );

    EXCEPTION
        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.ExeFunctionByProduct]', 6 );
            
            
            
            IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NOT NULL ) THEN
            
                RAISE;
            
            ELSE
            
                NOTIFYERROR ( PKERRORS.FSBGETERRORMESSAGE );
            
            END IF;
        WHEN OTHERS THEN
            
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.ExeFunctionByProduct]', 6 );
            
            
            
            IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NOT NULL ) THEN
            
                RAISE;
            
            ELSE
            
                PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                NOTIFYERROR( PKERRORS.FSBGETERRORMESSAGE );
            
            END IF;
    
    END EXEFUNCTIONBYPRODUCT;
    
    PROCEDURE EXEFUNCTIONBYSUBSCRIPTION
    (
        INUREQSTATE      IN      RECAESCO.RCECCOER%TYPE
    )
    IS

        
        PRAGMA AUTONOMOUS_TRANSACTION;

    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule.ExeFunctionBySubscription]', 6 );

        UT_TRACE.TRACE( 'Ejecutando RECAESCO, Evento[' || TO_CHAR( NUEVENAPLI ) ||
            '] Contrato [' || TO_CHAR( NUCURRSUBSCRIBER ) || '] Estado de Corte requerido [' ||
            TO_CHAR( INUREQSTATE ) || ']',7 );

        
        PKSUSPCONNSERVICEMGR.EXECFUNCBYCONTRACT
        (
            NUCURRSUBSCRIBER,
            NUEVENAPLI,
            INUREQSTATE
        );
        
        
        PKGENERALSERVICES.COMMITTRANSACTION;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.ExeFunctionBySubscription]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.ExeFunctionBySubscription]', 6 );

            
            
            IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NOT NULL ) THEN
            
                RAISE;
            
            ELSE
            
                NOTIFYERROR ( PKERRORS.FSBGETERRORMESSAGE );
            
            END IF;

        WHEN OTHERS THEN
            
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.ExeFunctionBySubscription]', 6 );

            
            
            IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NOT NULL ) THEN
            
                RAISE;
            
            ELSE
            
                PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                NOTIFYERROR ( PKERRORS.FSBGETERRORMESSAGE );
            
            END IF;
    
    END;
    
    PROCEDURE PROCESSSUBSSERVICES
    (
        INUREQSTATE     IN      RECAESCO.RCECCOER%TYPE
    )
    IS
    
        NUSESUDEPA      SERVSUSC.SESUDEPA%TYPE;
        NUSESULOCA      SERVSUSC.SESULOCA%TYPE;
        BLEXITSORDEN    BOOLEAN := FALSE;
        
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule.ProcessSubsServices]', 6 );
        
        LOOP
        
    	    
            RCTBSUBSSERVICES := NULL;

    	    
    	    BLREGTOPROCESS := FALSE;
    	    
    	    
            IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NULL ) THEN

                
                BLREGTOPROCESS := PKSUSPCONNSERVICEMGR.FBLGETSUBSSERVICES
                (
                    INUREQSTATE,
                    NUCICLCODI,
                    NUNUMESERV,
                    NUMINSUBSSERV,
                    NUEVENAPLI,
                    NUTOTALTHREADS,
                    NUNUMETHREAD,
                    CNUBULK,
                    RCTBSUBSSERVICES
                );

            ELSE

                
                PKSUSPCONNSERVICEMGR.GETPRODINFO( NUNUMESERV,           
                                                  INUREQSTATE,          
                                                  NUEVENAPLI,           
                                                  RCTBSUBSSERVICES );   

                
                IF ( RCTBSUBSSERVICES.TBSERVROWID.FIRST IS NULL ) THEN

                    
                    PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
                                           PKCONSTANTE.CSBMOD_BIL,
                                           CNUCANT_CHANGE_STATUS );
                    RAISE LOGIN_DENIED;

        	    END IF;

            END IF;

            IF ( RCTBSUBSSERVICES.TBSERVROWID.FIRST IS NULL ) THEN
            
        		EXIT;
            
    	    END IF;

            
        	FOR NURECORD IN RCTBSUBSSERVICES.TBSERVROWID.FIRST .. RCTBSUBSSERVICES.TBSERVROWID.LAST
            LOOP
            
                
                NUCURRROWIDSUBSSERV := RCTBSUBSSERVICES.TBSERVROWID( NURECORD );
                
                
                NUCURRSUBSSERV :=   RCTBSUBSSERVICES.TBSUBSSERVICES( NURECORD );
                
                
                NUSESUDEPA := PKTBLSERVSUSC.FNUGETSTATE( NUCURRSUBSSERV );
                
                
                NUSESULOCA := PKTBLSERVSUSC.FNUGETLOCATION( NUCURRSUBSSERV );
                
                
		        BLEXITSORDEN := PKSUSPCONNSERVICEMGR.FBLEXISTORDER
                (
                    NUSESUDEPA,
                    NUSESULOCA,
                    NUCURRSUBSSERV,
                    PKSUSPCONNSERVICE.CSBCONEXION
                );

                IF ( NOT BLEXITSORDEN ) THEN
                
                    
                    NUCURRSUBSCRIBER := RCTBSUBSSERVICES.TBSUSCCODI( NURECORD );
                    
                    
                    NUCURRCYCLE := RCTBSUBSSERVICES.TBCYCLES( NURECORD );
                    
                    
                    NUCURRSUSCCLIE := RCTBSUBSSERVICES.TBSUSCCLIE( NURECORD );
                    
                    
                    NUCURRSERVICE := RCTBSUBSSERVICES.TBSERVICES( NURECORD );
                    
                    
                    NUCURRSTATSUSP := RCTBSUBSSERVICES.TBESCOSTATES( NURECORD );

                    
                    PKSUSPCONNSERVICEMGR.INIIDSUSPCONE;

                    
                    EXEFUNCTIONBYPRODUCT( NUCURRSUBSSERV,
                                          RCTBSUBSSERVICES.TBSERVICES( NURECORD ) );
                
                END IF;
                
        		
        		SBMESSPROCC := FSBGETMESSAPROC( SBMESSPROCC, NUNUMETHREAD );

        		
        		PKSTATUSEXEPROGRAMMGR.UPDATEPERCENTAGE
        		(
        		    SBIDTRACKING,
        		    SBMESSPROCC,
        		    1,
        		    NUPERCENTAGE,
        		    NUORDENUME
        		);
            
            END LOOP;	
            
            
            EXIT WHEN NOT BLREGTOPROCESS;
            
            
            NUMINSUBSSERV := RCTBSUBSSERVICES.TBSUBSSERVICES( RCTBSUBSSERVICES.TBSUBSSERVICES.LAST );
        
        END LOOP;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.ProcessSubsServices]', 6 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.ProcessSubsServices]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.ExeSuspeConneRule.ProcessSubsServices]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSSUBSSERVICES;
    
    PROCEDURE PROCESSCONTRACTS
    (
        INUREQSTATE     IN      RECAESCO.RCECCOER%TYPE
    )
    IS
    
        TBCONTRACTS     PKSUSPCONNSERVICEMGR.TYTBSUBSSERVICES;
        NUMINCONTRACT   NUMBER := 0;
        NUIDX           BINARY_INTEGER;
        
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule.ProcessContracts]', 6 );

        LOOP
        
    	    
    	    TBCONTRACTS := NULL;

            
            PKSUSPCONNSERVICEMGR.GETCONTRACTS
            (
                INUREQSTATE,
                NUCICLCODI,
                NUNUMESERV,
                NUMINCONTRACT,
                NUEVENAPLI,
                NUTOTALTHREADS,
                NUNUMETHREAD,
                CNUBULK,
                TBCONTRACTS
            );

            NUIDX := TBCONTRACTS.TBSUSCCODI.FIRST;

            
            LOOP
            
                
                EXIT WHEN NUIDX IS NULL;

                
                NUCURRSUBSCRIBER := TBCONTRACTS.TBSUSCCODI( NUIDX );

                
                NUCURRCYCLE := TBCONTRACTS.TBCYCLES( NUIDX );

                
                NUCURRSUSCCLIE := TBCONTRACTS.TBSUSCCLIE( NUIDX );

                
                PKSUSPCONNSERVICEMGR.INIIDSUSPCONE;

                
                
                EXEFUNCTIONBYSUBSCRIPTION( INUREQSTATE );

        		
        		SBMESSPROCC := FSBGETMESSAPROC
                (
                    SBMESSPROCC,
                    NUNUMETHREAD
                );

        		
        		PKSTATUSEXEPROGRAMMGR.UPDATEPERCENTAGE
                (
                    SBIDTRACKING,
                    SBMESSPROCC,
                    1,
                    NUPERCENTAGE,
                    NUORDENUME
                );

                
                NUIDX := TBCONTRACTS.TBSUSCCODI.NEXT( NUIDX );
            
            END LOOP;

            
            EXIT WHEN ( TBCONTRACTS.TBSUSCCODI.COUNT < CNUBULK );

            
            NUMINCONTRACT := NUCURRSUBSCRIBER;
        
        END LOOP;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.ProcessContracts]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.ProcessContracts]', 6 );
            RAISE;
            
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.ProcessContracts]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
    
    PROCEDURE RUNPROCESS
    IS
    
        SBSUSPRETIRECOCONT      PARAMETR.PAMECHAR%TYPE;
        
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule.RunProcess]', 6 );
        
        
        SBSUSPRETIRECOCONT := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE( 'FA_SUSP_RETI_RECO_CONT' );
            
        IF ( RCTBREQSTATES.TBRCECCOEC.FIRST IS NULL ) THEN
        
            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.RunProcess]', 6 );
            RETURN;
        
        END IF;
        
        FOR NUIDX IN RCTBREQSTATES.TBRCECCOEC.FIRST .. RCTBREQSTATES.TBRCECCOEC.LAST LOOP
        
            NUMINSUBSSERV := 0;
            
            
            NUEVENAPLI := RCTBREQSTATES.TBRCECCOEC( NUIDX );

            
            IF ( SBSUSPRETIRECOCONT = PKCONSTANTE.SI ) THEN
            
                
                PROCESSCONTRACTS( RCTBREQSTATES.TBRCECCOER( NUIDX ) );
            
            ELSE
            
                
                PROCESSSUBSSERVICES( RCTBREQSTATES.TBRCECCOER( NUIDX ) );
            
            END IF;
        
        END LOOP;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule.RunProcess]', 6 );
    EXCEPTION
        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.RunProcess]', 6 );
            RAISE;
            
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule.RunProcess]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
    
BEGIN

    UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ExeSuspeConneRule]', 5 );
    
    
    INITIALIZE;

    
    CLEARMEMORY;
    
    
    ADDIDTRACKING;

    
    IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NULL ) THEN

        
        PKINSTANCEPROCESSMGR.VALAVAILABLERESOURCE
        (
            NUNUMEPROC,
            ISBCRITERIA,
            SBIDTRACKING
        );

    END IF;

    
	GETPARAMETERS;
	
	
	GETDATA;
	
    
	RUNPROCESS;

    UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ExeSuspeConneRule]', 5 );

EXCEPTION

    WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKSTATUSEXEPROGRAMMGR.PROCESSFINISHNOKAT( ISBIDTRACKING );
        UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule]', 5 );
        RAISE;
        
    WHEN OTHERS THEN
        PKSTATUSEXEPROGRAMMGR.PROCESSFINISHNOKAT( ISBIDTRACKING );
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        UT_TRACE.TRACE( 'Error: [pkSuspConnService.ExeSuspeConneRule]', 5 );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END EXESUSPECONNERULE;























PROCEDURE EXESUSPENSIONINCLUDE
    (
	INUSESUNUSE	IN	SERVSUSC.SESUNUSE%TYPE,
	INUSERVCODI     IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	CONFESCO.COECCODI%TYPE,
	ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS
    
    
    
    




    PROCEDURE INITIALIZE IS
    BEGIN
	PKERRORS.PUSH('pkSuspConnService.Initialize');
	
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE,
			      PKCONSTANTE.INITIALIZE );
	
	NUSERVCODI := INUSERVCODI ;
	NUEVENAPLI := INUCOECCODI ;
	NUNUMESERV := INUSESUNUSE ;
	PKERRORS.POP;
    EXCEPTION
	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE;
    END INITIALIZE;
BEGIN
    PKERRORS.PUSH('pkSuspConnService.ExeSuspensionInclude');
    SAVEPOINT SPPKSUSPCONNSERVICE;
    
    INITIALIZE ;
    
    CLEARMEMORY;
    
    
    
    VALINPUTDATA (  INUSERVCODI, INUCOECCODI, INUSESUNUSE );
    
    EXECUTEFUNCTIONAPPLY ( NUSERVCODI, NUEVENAPLI );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
	ROLLBACK TO SAVEPOINT SPPKSUSPCONNSERVICE;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
	ROLLBACK TO SAVEPOINT SPPKSUSPCONNSERVICE;
END EXESUSPENSIONINCLUDE;





















PROCEDURE EXEWITHDRAWEVENT
    (
        INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	IN	SERVSUSC.SESUNUSE%TYPE,
	ISBACTARETI     IN      HISTRETI.HSREACRE%TYPE,
	ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS
    
    
    
    




    PROCEDURE INITIALIZE IS
    BEGIN
	PKERRORS.PUSH('pkSuspConnService.Initialize');
	
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE,
			      PKCONSTANTE.INITIALIZE );
	
	NUSERVCODI := INUSERVCODI ; 
	NUEVENAPLI := INUCOECCODI ;
	NUNUMESERV := INUSESUNUSE ;
	SBACTARETI := ISBACTARETI ;
	PKERRORS.POP;
    EXCEPTION
	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE;
    END INITIALIZE;
BEGIN
    PKERRORS.PUSH('pkSuspConnService.ExeWithDrawEvent');
    
    INITIALIZE ;
    
    CLEARMEMORY;
    
    GETPARAMETERS;
    
    VALINPUTDATADEF (   INUSERVCODI, INUCOECCODI, INUSESUNUSE );
    
    EXECUTEFUNCTIONAPPLY ( NUSERVCODI, NUEVENAPLI );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
END EXEWITHDRAWEVENT;








































PROCEDURE EXEWITHDRAWEVENT
(
    INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE,
    INUDEPAPETI	IN      NUMBER,
    INULOCAPETI	IN      NUMBER,
    INUNUMEPETI	IN      NUMBER,
	INUSESUNUSE	IN	    SERVSUSC.SESUNUSE%TYPE,
    INUDEPACODI	IN      SERVSUSC.SESUDEPA%TYPE,
    INULOCACODI	IN      SERVSUSC.SESULOCA%TYPE,
    INUCICLCODI	IN      SUSCRIPC.SUSCCICL%TYPE,
	ISBTITUREPO IN      REPORTES.REPODESC%TYPE,
	ONUREPONUME	OUT     REPORTES.REPONUME%TYPE,
	ONUINCONUME	OUT     REPORTES.REPONUME%TYPE,
	ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS
    
    
    
    




    PROCEDURE  INITIALIZE
    IS
    BEGIN
    
    	PKERRORS.PUSH('pkSuspConnService.Initialize');
    	
    	
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE,
    			      PKCONSTANTE.INITIALIZE );
    	
    	NUSERVCODI := INUSERVCODI ;
    	NUEVENAPLI := INUCOECCODI ;
        NUDEPAPETI := INUDEPAPETI ;
        NULOCAPETI := INULOCAPETI ;
        NUNUMEPETI := INUNUMEPETI ;
    	NUNUMESERV := INUSESUNUSE ;
    	NUDEPACODI := INUDEPACODI ;
    	NULOCACODI := INULOCACODI ;
    	NUCICLCODI := INUCICLCODI ;
    	SBTITUREPO := ISBTITUREPO ;
    	
    	PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	    PKERRORS.POP;
    	    RAISE;
    
    END INITIALIZE;
BEGIN

    PKERRORS.PUSH('pkSuspConnService.ExeWithDrawEvent');
    
    
    INITIALIZE ;
    
    
    CLEARMEMORY;
    
    
    GETPARAMETERS;
    
    
    VALINPUTDATAORE (   INUSERVCODI, INUCOECCODI, INUSESUNUSE, 
	               		INUDEPACODI, INULOCACODI, INUCICLCODI,
		                INUDEPAPETI, INULOCAPETI, INUNUMEPETI
                    );
                    
    
    EXECUTEFUNCTIONAPPLY ( NUSERVCODI, NUEVENAPLI );
    
    
    ONUINCONUME := NUINCONUME ;
    ONUREPONUME := NUREPONUME ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END EXEWITHDRAWEVENT;







































PROCEDURE EXEWITHDRAWEVENT
(
    INUSERVCODI	   IN   SERVSUSC.SESUSERV%TYPE,
	INUCOECCODI	   IN	CONFESCO.COECCODI%TYPE,
	INUSESUNUSE	   IN	SERVSUSC.SESUNUSE%TYPE,
    INUDEPACODI	   IN   SERVSUSC.SESUDEPA%TYPE,
    INULOCACODI	   IN   SERVSUSC.SESULOCA%TYPE,
    INUCICLCODI    IN   SUSCRIPC.SUSCCICL%TYPE,
	ISBTITUREPO    IN   REPORTES.REPODESC%TYPE,
	INUMOSUCODI    IN	NUMBER,
	ISBACTARETI    IN   VARCHAR2,
	ISBSUCOOBSE    IN   SUSPCONE.SUCOOBSE%TYPE,
	ONUREPONUME	   OUT  REPORTES.REPONUME%TYPE,
	ONUINCONUME	   OUT  REPORTES.REPONUME%TYPE,
	ONUERRORCODE   OUT  GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE
)
IS
    
    
    
    




    PROCEDURE INITIALIZE
    IS
    BEGIN
    
    	PKERRORS.PUSH('pkSuspConnService.Initialize');
    	
    	
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE,
    			      PKCONSTANTE.INITIALIZE );
    	
    	NUSERVCODI := INUSERVCODI ;
    	NUEVENAPLI := INUCOECCODI ;
    	NUNUMESERV := INUSESUNUSE ;
    	NUDEPACODI := INUDEPACODI ;
    	NULOCACODI := INULOCACODI ;
    	NUCICLCODI := INUCICLCODI ;
    	SBTITUREPO := ISBTITUREPO ;
    	NUMOSUCODI := INUMOSUCODI ;
    	SBACTARETI := ISBACTARETI ;
    	SBSUCOOBSE := ISBSUCOOBSE ;
    	
    	PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	    PKERRORS.POP;
    	    RAISE;
    
    END INITIALIZE;
BEGIN

    PKERRORS.PUSH('pkSuspConnService.ExeWithDrawEvent');
    
    
    INITIALIZE ;
    
    
    CLEARMEMORY;
    
    
    GETPARAMETERS;
    
    
    VALINPUTDATA (  INUSERVCODI, INUCOECCODI, INUSESUNUSE, 
	           	    INUDEPACODI, INULOCACODI, INUCICLCODI,
		            INUMOSUCODI
                 );
                 
    
    EXECUTEFUNCTIONAPPLY ( NUSERVCODI, NUEVENAPLI );
    
    
    ONUINCONUME := NUINCONUME ;
    ONUREPONUME := NUREPONUME ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END EXEWITHDRAWEVENT;






































































































































PROCEDURE GENERATEWITHDRAWPROCESS
IS

    RCCONFCOSE		    CONFCOSE%ROWTYPE;
    RCCONFESCO		    CONFESCO%ROWTYPE;	    
    NUCUENSALD		    CONFCOSE.COCSNCDX%TYPE; 
    NUDIASCORT		    CONFESCO.COECDICO%TYPE; 
    DTDIASADIC          DATE;                   
    NUDIASADIC          NUMBER;                 
    
    RCTIPOCLIE          DAGE_SUBSCRIBER_TYPE.STYGE_SUBSCRIBER_TYPE;
    NUCUENSALDSERV	    PKBCSERVSUSC.STYSESUCUSA; 
    
    
    CNUCANT_CHANGE_STATUS       CONSTANT MENSAJE.MENSCODI%TYPE := 11111;
    
    BLRAISEERROR                BOOLEAN := FALSE;
    
    
    BOISSPONSORPROD             BOOLEAN := FALSE;
    
    
    BOISCOVEREDPROD             BOOLEAN := FALSE;
    
    
    TBCOMMRELDETAILS            DACC_DETAIL_COM_RELA.TYTBCC_DETAIL_COM_RELA;
    
    
    RCCOMMRELDETAIL             DACC_DETAIL_COM_RELA.STYCC_DETAIL_COM_RELA;
    
    NUMASTERPRODUCT             SERVSUSC.SESUNUSE%TYPE;
    
    BOISBUNDLED                 BOOLEAN;
    
    RCDETAIL            DACC_DET_BUNDLED.STYCC_DET_BUNDLED;
    
    
    
    





















    PROCEDURE GETDATA
    IS
        NUCUSTTYPE  GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE;
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.GenerateWithDrawProcess.GetData]', 6 );
    	
        
        
        RCCOMMRELDETAIL := CC_BCRELACIONCOMERCIAL.FRCOBTDETPRODAMPARADO
        (
            RCSERVSUSC.SESUNUSE,
            UT_DATE.FDTSYSDATE
        );

        IF ( RCCOMMRELDETAIL.DETAIL_COM_RELA_ID IS NOT NULL ) THEN
        
            
            
            BOISCOVEREDPROD := TRUE;
            BOISSPONSORPROD := FALSE;
        
        
        
        ELSE
        
            TBCOMMRELDETAILS := CC_BCRELACIONCOMERCIAL.FTBOBTDETPRODAMPARADOR
            (
                RCSERVSUSC.SESUNUSE,
                UT_DATE.FDTSYSDATE
            );

            IF ( TBCOMMRELDETAILS.COUNT > 0 ) THEN
            
                
                
                BOISCOVEREDPROD := FALSE;
                BOISSPONSORPROD := TRUE;
            
            ELSE
            
                
                
                BOISCOVEREDPROD := FALSE;
                BOISSPONSORPROD := FALSE;
            
            END IF;
        
        END IF;
    	
    	
    	RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO
        (
            RCSERVSUSC.SESUSERV,
            NUEVENAPLI
        );
                        						             
    	
    	NUDIASCORT := RCCONFESCO.COECDICO;
    	    	
        
        NUCUSTTYPE := DAGE_SUBSCRIBER.FNUGETSUBSCRIBER_TYPE_ID( NUCURRSUSCCLIE );

        
        RCTIPOCLIE := DAGE_SUBSCRIBER_TYPE.FRCGETRECORD( NUCUSTTYPE );

    	
        PKSUSPCONNSERVICE.GETSTATUSCONFDATA
        (
            NUCUSTTYPE,
            RCSERVSUSC.SESUPLFA,
            RCSERVSUSC.SESUSERV,
            RCSERVSUSC.SESUNUSE,
            RCCONFCOSE
        );

     

        IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NOT NULL ) THEN
        
            



            PKACCREIVADVANCEMGR.GETEXPIREDBILLPERIODS
            (
                IRCPRODUCT => RCSERVSUSC,
                INUCOLLPLANACTCONS => PKACCREIVADVANCEMGR.GNUACTIVITYCONS,
                ONUPRODEXPBILLPER => NUCUENSALDSERV,
                ONUCOLLPLANEXPBILLPER => NUCUENSALD
            );
        
        ELSE
        
            

            NUCUENSALDSERV := PKBOEXPIREDACCOUNTS.FNUPERIODSWITHEXPACCOUNTS( RCSERVSUSC.SESUNUSE );
        
        END IF;

        


    	NUCUENSALD := NVL( NUCUENSALD, RCCONFCOSE.COCSMNCR );
    	
    	
    	DTDIASADIC := PKHOLIDAYMGR.FDTGETDATENONHOLIDAY( SYSDATE, NUDIAS_ADICION_FECHA_SUSP );

        NUDIASADIC := TO_NUMBER( TRUNC( DTDIASADIC ) - TRUNC( SYSDATE ) );
        
        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.GenerateWithDrawProcess.GetData]', 6 );
    	
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.GenerateWithDrawProcess.GetData]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.GenerateWithDrawProcess.GetData]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END GETDATA;
    
    































    FUNCTION FBLPROCESSSERVSUSC
    RETURN BOOLEAN
    IS
        
        NUVALORRECLAMO      CUENCOBR.CUCOVARE%TYPE;
        
        
        NURECLPAGNOABO      CUENCOBR.CUCOVRAP%TYPE;
        
        RCCOMMRELATIONTYPE  DACC_RELATION_TYPE.STYCC_RELATION_TYPE;
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.GenerateWithDrawProcess.fblProcessServsusc]', 6 );
        
        
        IF ( BOISCOVEREDPROD ) THEN
        
            UT_TRACE.TRACE( 'El producto se encuentra amparado en una relaci�n comercial', 7 );
            
            
            RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( RCCOMMRELDETAIL.COMM_RELATION_ID );

            
            
            IF ( RCCOMMRELATIONTYPE.INDIV_COVERED_RETIRE = CC_BOCONSTANTS.CSBNO ) THEN
            
                UT_TRACE.TRACE( 'Relaci�n comercial no permite retiro individual de productos amparados, no genera orden', 7 );
                RETURN FALSE;
            
            END IF;
        
        END IF;
        
        
        IF ( RCSERVSUSC.SESUESCO = NUESTCORTEINACTIVE ) THEN
        
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'Producto tiene estado de corte inactivo, no genera orden [' || NUESTCORTEINACTIVE || ']', 7 );
            RETURN FALSE;
        
        END IF;

        
        IF ( PKSUSPCONNSERVICEMGR.FBLEXISTORDER( RCSERVSUSC.SESUDEPA,
                                                 RCSERVSUSC.SESULOCA,
                                                 RCSERVSUSC.SESUNUSE,
                                                 CSBRETIRO )
        ) THEN
        
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'El producto tiene una orden de retiro pendiente de atender, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;
        
        
        IF ( NVL( INSTR( RCSERVSUSC.SESUINCL, '|' || TO_CHAR( NUEVENAPLI ) || '|' ), 0 ) > 0 ) THEN
    	
    	    UT_TRACE.TRACE( 'Producto tiene inclusion, genera orden [' || RCSERVSUSC.SESUINCL || ']', 7 );
    	    RETURN TRUE;
    	
    	END IF;
        
        




        IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NULL ) THEN
        
            
        	IF  ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBAL( RCSERVSUSC.SESUNUSE ), 0 ) -
                  ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETCLAIMVALUE( RCSERVSUSC.SESUNUSE ), 0 )  +
                    NVL( PR_BOSUSPENDCRITERIONS.FNUGETNONAPPLIEDPAY( RCSERVSUSC.SESUNUSE ), 0 )
                  ) <= 0
            ) THEN
        	
                
                BLRAISEERROR := TRUE;
                UT_TRACE.TRACE( 'Producto tiene valor en reclamo mayor o igual al saldo saldo pendiente, no genera orden', 7 );
                RETURN FALSE;
        	
        	END IF;

            
            PKBCDEPENDINGPRODUCT.GETDEPENDINGPRODUCTSCLAIMVALUE
            (
                RCSERVSUSC.SESUNUSE,
                NUVALORRECLAMO,
                NURECLPAGNOABO
            );

            
        	IF ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBAL( RCSERVSUSC.SESUNUSE ), 0 ) -
                 ( NUVALORRECLAMO + NURECLPAGNOABO ) <= 0
               )
            THEN
        	
                
                BLRAISEERROR := TRUE;
                UT_TRACE.TRACE( 'El saldo del producto menos el valor en reclamo de los productos dependientes es menor o igual a cero', 6 );
                RETURN FALSE;
        	
        	END IF;
        
        END IF;

        
        IF ( NVL( INSTR( RCSERVSUSC.SESUEXCL, '|' || NUEVENAPLI || '|' ), 0 ) > 0 ) THEN
        
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'Producto tiene exclusi�n, no genera orden [' || RCSERVSUSC.SESUEXCL || ']', 7 );
            RETURN FALSE;
        
        END IF;
           	
    	
        IF ( RCSERVSUSC.SESUROGA = PKWARRANTYMGR.CSBPROPIETARIO ) THEN
        
            UT_TRACE.TRACE( 'Producto es propietario, no genera orden ', 7 );
            RETURN FALSE;
        
    	END IF;
        
        UT_TRACE.TRACE( 'Valida el n�mero de per�odos vencidos del producto, Per�odos vencidos producto ['
                       || NUCUENSALDSERV || '] -> Per�odos vencidos para retiro [' || NUCUENSALD || ']', 7 );

        
        IF ( NUCUENSALDSERV < NUCUENSALD ) THEN
        
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'N�mero de per�odos vencidos del producto es menor al n�mero de per�odos para retiro, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;
    	
        
        IF ( RCTIPOCLIE.VALID_FOR_DISCONNECT NOT IN ( PKCONSTANTE.SI, CSBTEMPORAL ) ) THEN
        
            UT_TRACE.TRACE( 'Tipo de cliente no es v�lido para retiro, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;

        
        IF ( PKSUSPENTERMSFORBILLMGR.FNUHASTERMFORSUSP( RCSERVSUSC.SESUSUSC,
                                                        RCSERVSUSC.SESUNUSE ) =
            CNUTIENE )
        THEN

            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'Producto tiene plazo vigente, no genera orden', 3 );
            RETURN FALSE;

        END IF;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.GenerateWithDrawProcess.fblProcessServsusc]', 6 );
        RETURN TRUE;
        
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.GenerateWithDrawProcess.fblProcessServsusc]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.GenerateWithDrawProcess.fblProcessServsusc]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END FBLPROCESSSERVSUSC;
    
    PROCEDURE PROCESSPRODUCT
    IS
        
        
        TBCOVEREDPRODS      PKBCSERVSUSC.TYTBPRODUCTS;
        
        NUCOVPRODSIDX       BINARY_INTEGER;
        
        RCCOMMRELATIONTYPE  DACC_RELATION_TYPE.STYCC_RELATION_TYPE;
    BEGIN

        UT_TRACE.TRACE( 'pkSuspConnService.GenerateWithDrawProcess.ProcessProduct', 16 );

        
    	NULINEA := NULINEA + 1;

    	
    	PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
        (
            NUORDENUME,
            NUREPONUME,
            NUCAUSCODE,
            CSBRETIRO,
            SBSUCOOBSE,
            NULINEA,
            RCSERVSUSC,
            RCCONFESCO,
            NUCURRCYCLE
        );

        
        IF ( NOT BOISSPONSORPROD ) THEN
            RETURN;
        END IF;

        UT_TRACE.TRACE( 'El producto es amparador en una relaci�n comercial, se genera orden para productos amparados', 7 );

        
        NUCOVPRODSIDX := TBCOMMRELDETAILS.FIRST;

        WHILE ( NUCOVPRODSIDX IS NOT NULL ) LOOP

            
            
            RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( TBCOMMRELDETAILS( NUCOVPRODSIDX ).COMM_RELATION_ID );

            UT_TRACE.TRACE( 'Producto amparado [' || TO_CHAR( TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID ) || ']', 8 );
            UT_TRACE.TRACE( 'Flag de retiro de producto amparado al retirar producto amparador [' || RCCOMMRELATIONTYPE.SPONSOR_RETI_COVERED || ']', 8 );

            
            
            
            IF ( RCCOMMRELATIONTYPE.SPONSOR_RETI_COVERED = CC_BOCONSTANTS.CSBSI ) THEN
            
                
                
                
                TBCOVEREDPRODS( NUCOVPRODSIDX ) := PKTBLSERVSUSC.FRCGETRECORD
                (
                    TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID
                );
            
            END IF;

            
            NUCOVPRODSIDX := TBCOMMRELDETAILS.NEXT( NUCOVPRODSIDX );
        
        END LOOP;

        
        GENORDERFORCOVEREDPRODS( CSBRETIRO, TBCOVEREDPRODS, NUEVENAPLI );

        UT_TRACE.TRACE( 'Fin pkSuspConnService.GenerateWithDrawProcess.ProcessProduct', 16 );
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error pkSuspConnService.GenerateWithDrawProcess.ProcessProduct', 16 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado pkSuspConnService.GenerateWithDrawProcess.ProcessProduct', 16 );
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSPRODUCT;
    
    PROCEDURE PROCESSPACKAGE
    IS
        NUIDX           BINARY_INTEGER;
        NUORDERTYPE     NUMBER;
        SBORDERPROCESS  VARCHAR2(1);
        NURULEID        GE_ACT_PRODTYPE_STAT.RULE_ID%TYPE;
        TBPACKAGEPRODS  PKBCSERVSUSC.TYTBPRODUCTS;
        ONUERRCODE      NUMBER;
        OSBERRMSG       VARCHAR2(2000);
    BEGIN

        UT_TRACE.TRACE( 'pkSuspConnService.GenerateWithDrawProcess.ProcessPackage', 16 );

        
        PR_BOPRODUCTBUNDLE.GETPACKAGEPRODSBYPROD( RCSERVSUSC.SESUNUSE,  
                                                  TBPACKAGEPRODS );     

        NUIDX := TBPACKAGEPRODS.FIRST;

        WHILE ( NUIDX IS NOT NULL ) LOOP

            
            IF ( TBPACKAGEPRODS(NUIDX).SESUESCO <> NUESTCORTEINACTIVE
            AND  NVL( TBPACKAGEPRODS(NUIDX).SESUROGA, PKCONSTANTE.NULLSB ) <>
                 PKWARRANTYMGR.CSBPROPIETARIO
            AND  NOT PKSUSPCONNSERVICEMGR.FBLEXISTORDER(
                                                PKCONSTANTE.NULLNUM,
                                                PKCONSTANTE.NULLNUM,
                                                TBPACKAGEPRODS(NUIDX).SESUNUSE,
                                                CSBDESCONEXION ) )
            THEN

                NULINEA := NULINEA + 1;

                
                GC_BOSUSPREMRECONORD.SETPRODUCTID(TBPACKAGEPRODS(NUIDX).SESUNUSE);

                
                PKSUSPCONNSERVICEMGR.INIIDSUSPCONE;

                
                NUORDENUME := PKCONSTANTE.NULLNUM;

                
                NUCURRSUBSSERV := TBPACKAGEPRODS(NUIDX).SESUNUSE;

                
                NUCURRSERVICE := TBPACKAGEPRODS(NUIDX).SESUSERV;

                
                
                PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( FALSE );

                
                PKSUSPCONNSERVICEMGR.GETACTIVITYEXECDATA
                (
                    TBPACKAGEPRODS(NUIDX).SESUSERV,
                    NUEVENAPLI,
                    NURULEID,
                    SBORDERPROCESS
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERPROCESS( SBORDERPROCESS );

                
                BI_BOSUSPCONNWITHDRAW.GETORDERTYPEBYBILLSTATUS
                (
                    NUEVENAPLI,
                    NUORDERTYPE
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERTYPE( NUORDERTYPE );

                
            	RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO
                (
                    TBPACKAGEPRODS(NUIDX).SESUSERV,
                    NUEVENAPLI
                );
                                
                PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
                (
                    NUORDENUME,
                    NUREPONUME,
                    NUCAUSCODE,
                    CSBRETIRO,
                    SBSUCOOBSE,
                    NULINEA,
                    TBPACKAGEPRODS(NUIDX),
                    RCCONFESCO,
                    NUCURRCYCLE
                );

                
                
                
                IF ( NURULEID IS NOT NULL AND PKSUSPCONNSERVICEMGR.FNUGETIDSUSPCONE > 0 )
                THEN
                
                    
                    
                    PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( TRUE );

                    
                    GR_BOCONFIG_EXPRESSION.EXECUTE(NURULEID, ONUERRCODE, OSBERRMSG);

                END IF;

            END IF;

            NUIDX := TBPACKAGEPRODS.NEXT( NUIDX );
        END LOOP;

        UT_TRACE.TRACE( 'Fin pkSuspConnService.GenerateWithDrawProcess.ProcessPackage', 16 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error pkSuspConnService.GenerateWithDrawProcess.ProcessPackage', 16 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado pkSuspConnService.GenerateWithDrawProcess.ProcessPackage', 16 );
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSPACKAGE;
    
    PROCEDURE PROCESSSERVICES
    IS

        
        
        TBCOVEREDPRODS      PKBCSERVSUSC.TYTBPRODUCTS;

        
        NUCOVPRODSIDX       BINARY_INTEGER;

    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.GenerateWithDrawProcess.ProcessServices]', 6 );

        
    	IF ( NOT FBLPROCESSSERVSUSC ) THEN
    	
            
            
            
            IF ( BLRAISEERROR AND PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NOT NULL ) THEN
            
                
                PKERRORS.SETERRORCODE
                (
                    PKCONSTANTE.CSBDIVISION,
                    PKCONSTANTE.CSBMOD_BIL,
                    CNUCANT_CHANGE_STATUS
                );
                RAISE LOGIN_DENIED;
            
            END IF;

            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.GenerateWithDrawProcess.ProcessServices]', 6 );
    	    RETURN;
        
    	END IF;

    	UT_TRACE.TRACE( '-- Valida si tiene inclusiones', 7 );
        
        IF ( NVL( INSTR( RCSERVSUSC.SESUINCL, '|' || TO_CHAR( NUEVENAPLI ) || '|' ), 0 ) = CNUNOTIENE ) THEN
        
        	
        	PKSUSPCONNSERVICEMGR.VALIDSUSPENSIONDAYS
        	(
        	    RCSERVSUSC.SESUNUSE,
        	    NUDIASCORT,
        	    RCSERVSUSC.SESUFECO,
        	    NUCUENSALD
        	);

            
            UT_TRACE.TRACE( '-- Realiza validaciones adicionales.', 7 );
            PKSUSPCONNSERVICEMGR.EXECUTEADDVALRULE( RCSERVSUSC.SESUSERV, NUEVENAPLI );
        
        END IF;

        
        IF ( BOISBUNDLED ) THEN

            
            PROCESSPACKAGE;

        ELSE

            
            PROCESSPRODUCT;

        END IF;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.GenerateWithDrawProcess.ProcessServices]', 6 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.GenerateWithDrawProcess.ProcessServices]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.GenerateWithDrawProcess.ProcessServices]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSSERVICES;
    
BEGIN

    UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.GenerateWithDrawProcess] Producto [' || NUCURRSUBSSERV || ']', 5 );
    
    
    GETPARAMETERS;
    
    
    UPDOVERDUEFINANSTAT(PKSERVNUMBERMGR.FRCGETRECORD(NUCURRROWIDSUBSSERV));

    
    RCDETAIL := CC_BCBUNDLED.FRCDETAILBYPRODUCT( NUCURRSUBSSERV );

    
    BOISBUNDLED := RCDETAIL.BUNDLED_ID IS NOT NULL;

    
    IF ( BOISBUNDLED ) THEN
        
        NUMASTERPRODUCT := CC_BOBUNDLE.FNUGETMAINPRODINBUNDL(
                                                            RCDETAIL.BUNDLED_ID );

        
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( NUMASTERPRODUCT );
    ELSE
        
        RCSERVSUSC := PKSERVNUMBERMGR.FRCGETRECORD( NUCURRROWIDSUBSSERV );
    END IF;

    
    GETDATA;
    
    
    PROCESSSERVICES;
    
    UT_TRACE.TRACE( 'Fin: [pkSuspConnService.GenerateWithDrawProcess]', 5 );

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE( 'Error: [pkSuspConnService.GenerateWithDrawProcess]', 5 );
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.GenerateWithDrawProcess]', 5 );
        RAISE EX.CONTROLLED_ERROR;
END GENERATEWITHDRAWPROCESS;

































PROCEDURE ORDERINDIVWITHDRAWTEMPORAL
    (
        IRCPSUCO    IN    NUMBER,
    	IRCCONFESCO    IN    CONFESCO%ROWTYPE
    )
IS
    RCSERVSUSC    SERVSUSC%ROWTYPE ;	    
BEGIN
    PKERRORS.PUSH('pkSuspConnService.OrderIndivWithDrawTemporal');
    NULL;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END ORDERINDIVWITHDRAWTEMPORAL;


















PROCEDURE ORDERWITHDRAWTEMPORAL
IS
BEGIN
    NULL;
END ORDERWITHDRAWTEMPORAL;
































PROCEDURE PAYMENTCONNECTION
IS
    SBERRORDIV		MENSAJE.MENSDIVI%TYPE ;
    SBERRORMOD		MENSAJE.MENSMODU%TYPE ;
    NUERRORCOD		MENSAJE.MENSCODI%TYPE ;
    SBERRORMES		MENSAJE.MENSDESC%TYPE ;
    RCCONFESCO		CONFESCO%ROWTYPE ;	    
BEGIN

    PKERRORS.PUSH('pkSuspConnService.PaymentConnection');
    
    
    RCCONFESCO := PKTBLCONFESCO.FRCGETRECORD
                  (
                      NUSERVCODI,
					  NUEVENAPLI,
					  PKCONSTANTE.NOCACHE
                  );
                  
    
    RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD
                  (
                      NUNUMESERV,
					  PKCONSTANTE.NOCACHE
                  );
                  
    NUDEPACODI := RCSERVSUSC.SESUDEPA ;
    NULOCACODI := RCSERVSUSC.SESULOCA ;
     
    
    PKREPORTSMGR.CREATEREPORT
    (
    	'Inconsistencias Conexi�n de Servicio por Pago',
    	NUINCONUME
    );
    
    
    SAVEPOINT SV_SERVSUSC;
    
    BEGIN
    
    	
    	CHANGESTPAYMENTSERVNUMBER
        (
            RCSERVSUSC,
    		RCCONFESCO
        );
    EXCEPTION
    	WHEN LOGIN_DENIED THEN
    	    
    	    ROLLBACK TO SV_SERVSUSC;
    	    
    	    NULININCO := NULININCO + 1;
    	    
    	    PKREPORTSINCMGR.INSERTREPORTLINE (
    						NUINCONUME,
    						NULININCO,
    						NUORDENUME,
    						RCSERVSUSC.SESUSUSC,
    						RCSERVSUSC.SESUNUSE,
    						NULL,
    						NULL,
    						NULL,
    						PKERRORS.FSBGETERRORMESSAGE
    					     );
    	    
    	    PKERRORS.GETERRORVAR(   SBERRORDIV, SBERRORMOD, NUERRORCOD,
    				    SBERRORMES, PKCONSTANTE.INITIALIZE );
    	WHEN OTHERS THEN
    	    
    	    ROLLBACK TO SV_SERVSUSC;
    	    
    	    NULININCO := NULININCO + 1;
    	    
    	    PKREPORTSINCMGR.INSERTREPORTLINE (
    						NUINCONUME,
    						NULININCO,
    						NUORDENUME,
    						RCSERVSUSC.SESUSUSC,
    						RCSERVSUSC.SESUNUSE,
    						NULL,
    						NULL,
    						NULL,
    						SQLERRM
    					     );
    
    END ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END PAYMENTCONNECTION;



























































PROCEDURE REINSTALLORDER
IS
    SBERRORDIV		    MENSAJE.MENSDIVI%TYPE ;
    SBERRORMOD		    MENSAJE.MENSMODU%TYPE ;
    NUERRORCOD		    MENSAJE.MENSCODI%TYPE ;
    SBERRORMES		    MENSAJE.MENSDESC%TYPE ;
    RCCONFESCO		    CONFESCO%ROWTYPE ;	       
    RCCONFCOSE		    CONFCOSE%ROWTYPE ;
    NUCUENSALD		    CONFCOSE.COCSNCDX%TYPE;    
    NUCUENSALDSERV      PKBCSERVSUSC.STYSESUCUSA;  

    
    
    
    PROCEDURE GETDATA
    IS
    BEGIN
        PKERRORS.PUSH('pkSuspConnService.Reinstallorder.GetData');
        
        
        RCSERVSUSC := PKSERVNUMBERMGR.FRCGETRECORD( NUCURRROWIDSUBSSERV );
        
        
        RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO (  RCSERVSUSC.SESUSERV,
                            						         NUEVENAPLI );

        RCCONFCOSE := PKSUSPCONNSERVICEMGR.FRCGETCONFCOSE(RCSERVSUSC.SESUSERV);

        
        NUCUENSALD := RCCONFCOSE.COCSNCRI;
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETDATA ;
    
    
    
    FUNCTION FBLPROCESSSERVSUSC
    RETURN BOOLEAN
    IS
    BEGIN
        PKERRORS.PUSH('pkSuspConnService.ReinstallOrder.fblProcessServsusc');
        
        
        IF ( RCSERVSUSC.SESUCLPR = PKSPONSOREDACCOUNTMGR.CSBSPONSOR ) THEN
            PKERRORS.POP;
            RETURN FALSE;
        END IF;

        IF ( PKSUSPCONNSERVICEMGR.FBLEXISTORDER ( RCSERVSUSC.SESUDEPA,
                                                  RCSERVSUSC.SESULOCA,
                                                  RCSERVSUSC.SESUNUSE,
                                                  CSBREINSTALACION ) )THEN
            PKERRORS.POP;
            RETURN FALSE;
        END IF;

        
    	NUCUENSALDSERV := PKBOEXPIREDACCOUNTS.FNUPERIODSWITHEXPACCOUNTS ( RCSERVSUSC.SESUNUSE );

    	
    	
    	IF ( NUCUENSALDSERV > NUCUENSALD ) THEN
    	    PKERRORS.POP;
	       RETURN FALSE;
    	END IF;
    	
    	
        IF ( RCSERVSUSC.SESUROGA = PKWARRANTYMGR.CSBPROPIETARIO) THEN
    	   PKERRORS.POP;
    	   RETURN FALSE;
    	END IF;
    	
        PKERRORS.POP;
        RETURN TRUE;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END FBLPROCESSSERVSUSC ;
    
    
    PROCEDURE PROCESSSERVICES
    IS
    BEGIN
        PKERRORS.PUSH('pkSuspConnService.ReinstallOrder.ProcessServices');

        IF ( NOT FBLPROCESSSERVSUSC ) THEN
            PKERRORS.POP;
	        RETURN;
        END IF;

    	
    	PKSUSPCONNSERVICEMGR.VALIDSUSPENSIONDAYS
    	    (
    	    RCSERVSUSC.SESUNUSE,
    	    RCCONFESCO.COECDICO,
    	    RCSERVSUSC.SESUFECO,
    	    NUCUENSALD
    	    );

        
        PKSUSPCONNSERVICEMGR.EXECUTEADDVALRULE(RCSERVSUSC.SESUSERV,NUEVENAPLI);

    	NULINEA := NULINEA + 1;
    	
    	PKREINSTALLMGR.ORDERINDIVREINSTALL  (   
                        						
                        						NUORDENUME,
                        						NUREPONUME,
                        						NUCAUSCODE,
                        						CSBREINSTALACION,
                        						SBSUCOOBSE,
                        						RCSERVSUSC,
                        						RCCONFESCO,
                        						TRUE,
                        						NULINEA,
                        						NUCURRCYCLE
                    					     );
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END PROCESSSERVICES ;
    
BEGIN

    PKERRORS.PUSH('pkSuspConnService.ReinstallOrder');
    
    
    GETDATA;
    
    PROCESSSERVICES;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END REINSTALLORDER;











































PROCEDURE RENOVATIONORDER
(
	INUSESUNUSE	IN      SERVSUSC.SESUNUSE%TYPE,
	INUCAUSCONE	IN      SUSPCONE.SUCOCACD%TYPE,
	INUDEPAREPO	IN      SERVSUSC.SESUDEPA%TYPE,
	INULOCAREPO	IN      SERVSUSC.SESULOCA%TYPE,
	INUINCONUME	IN      REPORTES.REPONUME%TYPE,
	ISBSUCOOBSE IN      SUSPCONE.SUCOOBSE%TYPE,
	ISBSUCOTIPO IN      SUSPCONE.SUCOTIPO%TYPE,
	INUNUMEORDE	IN      SUSPCONE.SUCONUOR%TYPE,
	INUEVENAPLI	IN      SUSPCONE.SUCOCOEC%TYPE
)
IS
    SBERRORDIV		MENSAJE.MENSDIVI%TYPE ;
    SBERRORMOD		MENSAJE.MENSMODU%TYPE ;
    NUERRORCOD		MENSAJE.MENSCODI%TYPE ;
    SBERRORMES		MENSAJE.MENSDESC%TYPE ;
    RCSERVSUSC		SERVSUSC%ROWTYPE;	 
    NUCICLO         CICLO.CICLCODI%TYPE;
BEGIN

    PKERRORS.PUSH('pkSuspConnService.RenovationOrder');
    
    
    RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD (  INUSESUNUSE, 
						PKCONSTANTE.NOCACHE );
						
    NUCICLO := PKTBLSUSCRIPC.FNUGETBILLINGCYCLE(RCSERVSUSC.SESUSUSC);						
    
    
    SAVEPOINT SV_RENOVATION ;
    
    
    PKSUSPCONNSERVICEMGR.ANNULORDERPENDING ( RCSERVSUSC.SESUNUSE, 
					     ISBSUCOTIPO 
					   );
					   
    BEGIN
    
    	PKSUSPCONNSERVICEMGR.CREATESUSPCONNE
        (
            PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL('Sqidsuspcone'),
			RCSERVSUSC.SESUDEPA, 
			RCSERVSUSC.SESULOCA, 
			INUNUMEORDE, 
			INUEVENAPLI,
			INUCAUSCONE,
			ISBSUCOTIPO, 
			ISBSUCOOBSE, 
			RCSERVSUSC,
			NUCICLO
	     )  ;
    EXCEPTION
    	WHEN LOGIN_DENIED THEN
    	    
    	    ROLLBACK TO SV_RENOVATION;
    	    
    	    NULININCO := NULININCO + 1;
    	    
    	    PKREPORTSINCMGR.INSERTREPORTLINE
            (
				INUINCONUME,
				NULININCO,
				INUNUMEORDE,
				RCSERVSUSC.SESUSUSC,
				RCSERVSUSC.SESUNUSE,
				NULL,
				NULL,
				NULL,
				PKERRORS.FSBGETERRORMESSAGE
		     );
    	    
    	    PKERRORS.GETERRORVAR(   SBERRORDIV, SBERRORMOD, NUERRORCOD,
    				    SBERRORMES, PKCONSTANTE.INITIALIZE );
    	WHEN OTHERS THEN
    	    
    	    ROLLBACK TO SV_RENOVATION;
    	    
    	    NULININCO := NULININCO + 1;
    	    
    	    PKREPORTSINCMGR.INSERTREPORTLINE
            (
				INUINCONUME,
				NULININCO,
				INUNUMEORDE,
				RCSERVSUSC.SESUSUSC,
				RCSERVSUSC.SESUNUSE,
				NULL,
				NULL,
				NULL,
				SQLERRM
            );
    END ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END RENOVATIONORDER;



























PROCEDURE FILLSERVNUMBERRECORD
IS
BEGIN

    PKERRORS.PUSH('pkSuspConnService.FillServNumberrecord');
    
    RCSERVSUSC := NULL;
    RCSERVSUSC.SESUNUSE :=  RCCUSERVSUSC.SESUNUSE;
    RCSERVSUSC.SESUFECO :=  RCCUSERVSUSC.SESUFECO;
    RCSERVSUSC.SESUSUSC :=  RCCUSERVSUSC.SESUSUSC;
    RCSERVSUSC.SESUSERV :=  RCCUSERVSUSC.SESUSERV;
    RCSERVSUSC.SESUDEPA :=  RCCUSERVSUSC.SESUDEPA;
    RCSERVSUSC.SESULOCA :=  RCCUSERVSUSC.SESULOCA;
    RCSERVSUSC.SESUCATE :=  RCCUSERVSUSC.SESUCATE;
    RCSERVSUSC.SESUSUCA :=  RCCUSERVSUSC.SESUSUCA;
    RCSERVSUSC.SESUPLFA :=  RCCUSERVSUSC.SESUPLFA;
    RCSERVSUSC.SESUEXCL :=  RCCUSERVSUSC.SESUEXCL;
    RCSERVSUSC.SESUINCL :=  RCCUSERVSUSC.SESUINCL;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FILLSERVNUMBERRECORD ;






































































































































































PROCEDURE SUSPENSIONORDER
IS
    RCCONFESCO		        CONFESCO%ROWTYPE ;	        
    RCCONFCOSE		        CONFCOSE%ROWTYPE ;
    NUCUENSALD		        CONFCOSE.COCSNCDX%TYPE;     
    NUDIASCORT		        CONFESCO.COECDICO%TYPE;     
    DTDIASADIC              DATE ;                      
    NUDIASADIC              NUMBER ;                    
    
    RCTIPOCLIE              DAGE_SUBSCRIBER_TYPE.STYGE_SUBSCRIBER_TYPE;
    NUCUENSALDSERV          PKBCSERVSUSC.STYSESUCUSA;     
    
    
    CNUCANT_CHANGE_STATUS       CONSTANT MENSAJE.MENSCODI%TYPE := 11111;
    
    BLRAISEERROR                BOOLEAN := FALSE;
    
    
    BOISSPONSORPROD             BOOLEAN := FALSE;
    
    
    BOISCOVEREDPROD             BOOLEAN := FALSE;
    
    
    TBCOMMRELDETAILS            DACC_DETAIL_COM_RELA.TYTBCC_DETAIL_COM_RELA;
    
    
    RCCOMMRELDETAIL             DACC_DETAIL_COM_RELA.STYCC_DETAIL_COM_RELA;
    
    NUMASTERPRODUCT             SERVSUSC.SESUNUSE%TYPE;
    
    BOISBUNDLED                 BOOLEAN;
    
    RCDETAIL                    DACC_DET_BUNDLED.STYCC_DET_BUNDLED;
    
    
    
    





















    PROCEDURE GETDATA
    IS
        NUCUSTTYPE  GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE;
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.SuspensionOrder.GetData]', 6 );

        
        
        RCCOMMRELDETAIL := CC_BCRELACIONCOMERCIAL.FRCOBTDETPRODAMPARADO
        (
            RCSERVSUSC.SESUNUSE,
            UT_DATE.FDTSYSDATE
        );

        IF ( RCCOMMRELDETAIL.DETAIL_COM_RELA_ID IS NOT NULL ) THEN
        
            
            
            BOISCOVEREDPROD := TRUE;
            BOISSPONSORPROD := FALSE;
        
        
        
        ELSE
        
            TBCOMMRELDETAILS := CC_BCRELACIONCOMERCIAL.FTBOBTDETPRODAMPARADOR
            (
                RCSERVSUSC.SESUNUSE,
                UT_DATE.FDTSYSDATE
            );

            IF ( TBCOMMRELDETAILS.COUNT > 0 ) THEN
            
                
                
                BOISCOVEREDPROD := FALSE;
                BOISSPONSORPROD := TRUE;
            
            ELSE
            
                
                
                BOISCOVEREDPROD := FALSE;
                BOISSPONSORPROD := FALSE;
            
            END IF;
        
        END IF;

        
        RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO
        (
            RCSERVSUSC.SESUSERV,
            NUEVENAPLI
        );

        
        NUDIASCORT := RCCONFESCO.COECDICO;

        
        NUCUSTTYPE := DAGE_SUBSCRIBER.FNUGETSUBSCRIBER_TYPE_ID( NUCURRSUSCCLIE );

        
        RCTIPOCLIE := DAGE_SUBSCRIBER_TYPE.FRCGETRECORD( NUCUSTTYPE );

        
        PKSUSPCONNSERVICE.GETSTATUSCONFDATA
        (
            NUCUSTTYPE,
            RCSERVSUSC.SESUPLFA,
            RCSERVSUSC.SESUSERV,
            RCSERVSUSC.SESUNUSE,
            RCCONFCOSE,
            TRUE
        );

        

        IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NOT NULL ) THEN
        
            



            PKACCREIVADVANCEMGR.GETEXPIREDBILLPERIODS
            (
                IRCPRODUCT => RCSERVSUSC,
                INUCOLLPLANACTCONS => PKACCREIVADVANCEMGR.GNUACTIVITYCONS,
                ONUPRODEXPBILLPER => NUCUENSALDSERV,
                ONUCOLLPLANEXPBILLPER => NUCUENSALD
            );
        
        ELSE
        
            

            NUCUENSALDSERV := PKBOEXPIREDACCOUNTS.FNUPERIODSWITHEXPACCOUNTS( RCSERVSUSC.SESUNUSE );
        
        END IF;

        


        NUCUENSALD := NVL( NUCUENSALD, RCCONFCOSE.COCSNCDX );

    	
    	DTDIASADIC := PKHOLIDAYMGR.FDTGETDATENONHOLIDAY( SYSDATE, NUDIAS_ADICION_FECHA_SUSP );

        NUDIASADIC := TO_NUMBER( TRUNC( DTDIASADIC ) - TRUNC( SYSDATE ) );

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspensionOrder.GetData]', 6 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspensionOrder.GetData]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.SuspensionOrder.GetData]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END GETDATA;
    
    



































    FUNCTION FBLPROCESSSERVSUSC
    RETURN BOOLEAN
    IS
        
        NUVALORRECLAMO      CUENCOBR.CUCOVARE%TYPE;
        
        
        NURECLPAGNOABO      CUENCOBR.CUCOVRAP%TYPE;
        
        RCCOMMRELATIONTYPE  DACC_RELATION_TYPE.STYCC_RELATION_TYPE;
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.SuspensionOrder.fblProcessServsusc]', 6 );

        
        IF ( BOISCOVEREDPROD ) THEN
        
            UT_TRACE.TRACE( 'El producto se encuentra amparado en una relaci�n comercial', 7 );
            
            
            RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( RCCOMMRELDETAIL.COMM_RELATION_ID );

            
            
            IF ( RCCOMMRELATIONTYPE.INDIV_COVERED_SUSP = CC_BOCONSTANTS.CSBNO ) THEN
            
                UT_TRACE.TRACE( 'Relaci�n comercial no permite suspensi�n individual de productos amparados, no genera orden', 7 );
                RETURN FALSE;
            
            END IF;
        
        END IF;

        
        IF ( RCSERVSUSC.SESUESCO = NUESTCORTEINACTIVE ) THEN
        
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'Producto tiene estado de corte inactivo, no genera orden [' || NUESTCORTEINACTIVE || ']', 7 );
            RETURN FALSE;
        
        END IF;

        
        IF ( PKSUSPCONNSERVICEMGR.FBLEXISTORDER( RCSERVSUSC.SESUDEPA,
                                                 RCSERVSUSC.SESULOCA,
                                                 RCSERVSUSC.SESUNUSE,
                                                 CSBDESCONEXION )
        ) THEN
        
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'El producto tiene una orden de desconexi�n pendiente de atender, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;
        
        
        
        IF ( PKSUSPCONNSERVICE.FBOHASPENDVOLWITHDRAW( RCSERVSUSC.SESUNUSE ) ) THEN
        
            UT_TRACE.TRACE( 'Producto tiene solicitud de retiro voluntario pendiente, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;
        
    	
        IF ( NVL( INSTR( RCSERVSUSC.SESUINCL, '|' || NUEVENAPLI || '|' ), 0 ) > 0 ) THEN
    	
    	    UT_TRACE.TRACE( 'Producto tiene inclusion, genera orden [' || RCSERVSUSC.SESUINCL || ']', 7 );
    	    RETURN TRUE;
    	
    	END IF;
    	
     




        IF ( PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NULL ) THEN
        
        	
        	IF  ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBAL( RCSERVSUSC.SESUNUSE ), 0 ) -
                  ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETCLAIMVALUE( RCSERVSUSC.SESUNUSE ), 0 )  +
                    NVL( PR_BOSUSPENDCRITERIONS.FNUGETNONAPPLIEDPAY( RCSERVSUSC.SESUNUSE ), 0 )
                  ) <= 0
            ) THEN
        	
                
                BLRAISEERROR := TRUE;
                UT_TRACE.TRACE( 'Producto tiene valor en reclamo mayor o igual al saldo saldo pendiente, no genera orden', 7 );
                RETURN FALSE;
        	
        	END IF;

            
            PKBCDEPENDINGPRODUCT.GETDEPENDINGPRODUCTSCLAIMVALUE
            (
                RCSERVSUSC.SESUNUSE,
                NUVALORRECLAMO,
                NURECLPAGNOABO
            );

        	
        	IF ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBAL( RCSERVSUSC.SESUNUSE ), 0 ) -
                 ( NUVALORRECLAMO + NURECLPAGNOABO ) <= 0
               )
            THEN
        	
                
                BLRAISEERROR := TRUE;
                UT_TRACE.TRACE( 'Valor en reclamo de los productos dependientes mayor al saldo del producto', 6 );
                RETURN FALSE;
        	
        	END IF;
        
        END IF;

        
        IF ( NVL( INSTR( RCSERVSUSC.SESUEXCL, '|' || NUEVENAPLI || '|' ), 0 ) > 0 ) THEN
    	
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'Producto tiene exclusi�n, no genera orden [' || RCSERVSUSC.SESUEXCL || ']', 7 );
            RETURN FALSE;
    	
    	END IF;
    	
    	
        IF ( RCSERVSUSC.SESUROGA = PKWARRANTYMGR.CSBPROPIETARIO ) THEN
        
            UT_TRACE.TRACE( 'Producto es propietario, no genera orden ', 7 );
            RETURN FALSE;
        
    	END IF;

        UT_TRACE.TRACE( 'Valida el n�mero de per�odos vencidos del producto, Per�odos vencidos producto ['
                       || NUCUENSALDSERV || '] -> Per�odos vencidos para suspensi�n [' || NUCUENSALD || ']', 7 );
                       
        
        IF ( NUCUENSALDSERV < NUCUENSALD ) THEN
        
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'N�mero de per�odos vencidos del producto es menor al n�mero de per�odos para suspensi�n, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;

        
        IF ( RCTIPOCLIE.VALID_FOR_DISCONNECT NOT IN ( PKCONSTANTE.SI, CSBDESCONEXION ) ) THEN
        
            UT_TRACE.TRACE( 'Tipo de cliente no es v�lido para suspensi�n, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;
        
        
        IF ( PKSUSPENTERMSFORBILLMGR.FNUHASTERMFORSUSP( RCSERVSUSC.SESUSUSC,
                                                        RCSERVSUSC.SESUNUSE ) = CNUTIENE
        ) THEN
        
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'Producto tiene plazo vigente para suspensi�n, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;
        
        
        IF ( NULIMITE_DE_USO >= PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBALNOTCURR( RCSERVSUSC.SESUNUSE ) ) THEN
        
            
            BLRAISEERROR := TRUE;
            UT_TRACE.TRACE( 'Saldo pendiente del producto es menor o igual al l�mite de uso para suspensi�n, no genera orden', 7 );
            RETURN FALSE;
        
        END IF;
        
        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspensionOrder.fblProcessServsusc]', 6 );
        RETURN TRUE;
        
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspensionOrder.fblProcessServsusc]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.SuspensionOrder.fblProcessServsusc]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END FBLPROCESSSERVSUSC;
    
    PROCEDURE PROCESSPRODUCT
    IS
        
        
        TBCOVEREDPRODS      PKBCSERVSUSC.TYTBPRODUCTS;
        
        NUCOVPRODSIDX       BINARY_INTEGER;
        
        RCCOMMRELATIONTYPE  DACC_RELATION_TYPE.STYCC_RELATION_TYPE;
    BEGIN

        UT_TRACE.TRACE( 'pkSuspConnService.SuspensionOrder.ProcessProduct', 16 );

        NULINEA := NULINEA + 1;

        
        PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
        (
            NUORDENUME,
            NUREPONUME,
            NUCAUSCODE,
            CSBDESCONEXION,
            SBSUCOOBSE,
            NULINEA,
            RCSERVSUSC,
            RCCONFESCO,
            NUCURRCYCLE
        );

        
        IF ( NOT BOISSPONSORPROD ) THEN
            RETURN;
        END IF;

        UT_TRACE.TRACE( 'El producto es amparador en una relaci�n comercial, se genera orden para productos amparados', 7 );

        
        NUCOVPRODSIDX := TBCOMMRELDETAILS.FIRST;

        WHILE ( NUCOVPRODSIDX  IS NOT NULL ) LOOP
        
            
            
            RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( TBCOMMRELDETAILS( NUCOVPRODSIDX ).COMM_RELATION_ID );

            UT_TRACE.TRACE( 'Producto amparado [' || TO_CHAR( TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID ) || ']', 8 );
            UT_TRACE.TRACE( 'Flag de suspensi�n de producto amparado al suspender producto amparador [' || RCCOMMRELATIONTYPE.SPONSOR_SUSP_COVERED || ']', 8 );

            
            
            
            IF ( RCCOMMRELATIONTYPE.SPONSOR_SUSP_COVERED = CC_BOCONSTANTS.CSBSI ) THEN
            
                
                
                
                TBCOVEREDPRODS( NUCOVPRODSIDX ) := PKTBLSERVSUSC.FRCGETRECORD
                (
                    TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID
                );
            
            END IF;

            
            NUCOVPRODSIDX := TBCOMMRELDETAILS.NEXT( NUCOVPRODSIDX );
        
        END LOOP;

        
        GENORDERFORCOVEREDPRODS( CSBDESCONEXION, TBCOVEREDPRODS, NUEVENAPLI );

        UT_TRACE.TRACE( 'Fin pkSuspConnService.SuspensionOrder.ProcessProduct', 16 );
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSPRODUCT;
    
    PROCEDURE PROCESSPACKAGE
    IS
        NUIDX           BINARY_INTEGER;
        NUORDERTYPE     NUMBER;
        SBORDERPROCESS  VARCHAR2(1);
        NURULEID        GE_ACT_PRODTYPE_STAT.RULE_ID%TYPE;
        TBPACKAGEPRODS  PKBCSERVSUSC.TYTBPRODUCTS;
        ONUERRCODE      NUMBER;
        OSBERRMSG       VARCHAR2(2000);
    BEGIN

        UT_TRACE.TRACE( 'pkSuspConnService.SuspensionOrder.ProcessPackage', 16 );

        
        PR_BOPRODUCTBUNDLE.GETPACKAGEPRODSBYPROD( RCSERVSUSC.SESUNUSE,  
                                                  TBPACKAGEPRODS );     

        NUIDX := TBPACKAGEPRODS.FIRST;

        WHILE ( NUIDX IS NOT NULL ) LOOP

            
            IF ( TBPACKAGEPRODS(NUIDX).SESUESCO <> NUESTCORTEINACTIVE
            AND  NVL( TBPACKAGEPRODS(NUIDX).SESUROGA, PKCONSTANTE.NULLSB ) <>
                 PKWARRANTYMGR.CSBPROPIETARIO
            AND  NOT PKSUSPCONNSERVICEMGR.FBLEXISTORDER(
                                                PKCONSTANTE.NULLNUM,
                                                PKCONSTANTE.NULLNUM,
                                                TBPACKAGEPRODS(NUIDX).SESUNUSE,
                                                CSBDESCONEXION ) )
            THEN

                NULINEA := NULINEA + 1;
                
                
                GC_BOSUSPREMRECONORD.SETPRODUCTID(TBPACKAGEPRODS(NUIDX).SESUNUSE);

                
                PKSUSPCONNSERVICEMGR.INIIDSUSPCONE;

                
                NUORDENUME := PKCONSTANTE.NULLNUM;

                
                NUCURRSUBSSERV := TBPACKAGEPRODS(NUIDX).SESUNUSE;

                
                NUCURRSERVICE := TBPACKAGEPRODS(NUIDX).SESUSERV;

                
                
                PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( FALSE );

                
                PKSUSPCONNSERVICEMGR.GETACTIVITYEXECDATA
                (
                    TBPACKAGEPRODS(NUIDX).SESUSERV,
                    NUEVENAPLI,
                    NURULEID,
            		SBORDERPROCESS
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERPROCESS( SBORDERPROCESS );

                
                BI_BOSUSPCONNWITHDRAW.GETORDERTYPEBYBILLSTATUS
                (
                    NUEVENAPLI,
                    NUORDERTYPE
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERTYPE( NUORDERTYPE );

                
                RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO
                (
                    TBPACKAGEPRODS(NUIDX).SESUSERV,
                    NUEVENAPLI
                );

                
                PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
                (
                    NUORDENUME,
                    NUREPONUME,
                    NUCAUSCODE,
                    CSBDESCONEXION,
                    SBSUCOOBSE,
                    NULINEA,
                    TBPACKAGEPRODS(NUIDX),
                    RCCONFESCO,
                    NUCURRCYCLE
                );

                
                
                
                IF ( NURULEID IS NOT NULL AND PKSUSPCONNSERVICEMGR.FNUGETIDSUSPCONE > 0 )
                THEN
                
                    
                    
                    PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( TRUE );

                    
                    GR_BOCONFIG_EXPRESSION.EXECUTE(NURULEID, ONUERRCODE, OSBERRMSG);

                END IF;

            END IF;

            NUIDX := TBPACKAGEPRODS.NEXT( NUIDX );

        END LOOP;

        UT_TRACE.TRACE( 'Fin pkSuspConnService.SuspensionOrder.ProcessPackage', 16 );
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSPACKAGE;
    
    PROCEDURE PROCESSSERVICES
    IS
    
        
        
        TBCOVEREDPRODS      PKBCSERVSUSC.TYTBPRODUCTS;
        
        
        NUCOVPRODSIDX       BINARY_INTEGER;
    
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.SuspensionOrder.ProcessServices]', 6 );
        
        
        IF ( NOT FBLPROCESSSERVSUSC ) THEN
    	
            
            
            
            IF ( BLRAISEERROR AND PKACCREIVADVANCEMGR.GNUACTIVITYCONS IS NOT NULL ) THEN
            
                
                PKERRORS.SETERRORCODE
                (
                    PKCONSTANTE.CSBDIVISION,
                    PKCONSTANTE.CSBMOD_BIL,
                    CNUCANT_CHANGE_STATUS
                );
                RAISE LOGIN_DENIED;
            
            END IF;

            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspensionOrder.ProcessServices]', 6 );
            RETURN;
        
    	END IF;

        UT_TRACE.TRACE( '-- Valida si tiene inclusiones', 7 );
        
        IF ( NVL( INSTR( RCSERVSUSC.SESUINCL, '|' || NUEVENAPLI || '|' ), 0 ) = CNUNOTIENE ) THEN
        
            
            PKSUSPCONNSERVICEMGR.VALIDSUSPENSIONDAYS
            (
            	RCSERVSUSC.SESUNUSE,
            	NUDIASCORT,
            	RCSERVSUSC.SESUFECO,
            	NUCUENSALD
            );
            UT_TRACE.TRACE( '-- Realiza validaciones adicionales.', 7 );

            
            PKSUSPCONNSERVICEMGR.EXECUTEADDVALRULE( RCSERVSUSC.SESUSERV, NUEVENAPLI );
        
        END IF;

        
        IF ( BOISBUNDLED ) THEN

            
            PROCESSPACKAGE;

        ELSE

            
            PROCESSPRODUCT;

        END IF;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspensionOrder.ProcessServices]', 6 );
   	    
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspensionOrder.ProcessServices]', 6 );
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.SuspensionOrder.ProcessServices]', 6 );
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSSERVICES;
    
BEGIN

    UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.SuspensionOrder] Producto [' || NUCURRROWIDSUBSSERV || ']', 5 );
    
    
    GETPARAMETERS;
    
    
    UPDOVERDUEFINANSTAT(PKSERVNUMBERMGR.FRCGETRECORD(NUCURRROWIDSUBSSERV));

    
    RCDETAIL := CC_BCBUNDLED.FRCDETAILBYPRODUCT( NUCURRSUBSSERV );

    
    BOISBUNDLED := RCDETAIL.BUNDLED_ID IS NOT NULL AND
                   PKSUSPCONNSERVICEMGR.FNUGETORDERTYPE =
                   BI_BOCONSTANTS.CNUSUSPENSIONTOTALVALUE;

    
    IF ( BOISBUNDLED ) THEN
        
        NUMASTERPRODUCT := CC_BOBUNDLE.FNUGETMAINPRODINBUNDL(
                                                            RCDETAIL.BUNDLED_ID );

        
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( NUMASTERPRODUCT );
    ELSE
        
        RCSERVSUSC := PKSERVNUMBERMGR.FRCGETRECORD( NUCURRROWIDSUBSSERV );
    END IF;

    
    GETDATA;

    
    PROCESSSERVICES;

    UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspensionOrder]', 5 );
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspensionOrder]', 5 );
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        UT_TRACE.TRACE( 'Error no controlado: [pkSuspConnService.SuspensionOrder]', 5 );
        RAISE EX.CONTROLLED_ERROR;
END SUSPENSIONORDER;







































PROCEDURE WITHDRAWDEFINITIVE
IS
    SBERRORDIV		MENSAJE.MENSDIVI%TYPE ;
    SBERRORMOD		MENSAJE.MENSMODU%TYPE ;
    NUERRORCOD		MENSAJE.MENSCODI%TYPE ;
    SBERRORMES		MENSAJE.MENSDESC%TYPE ;
    NUERRORCODE		MENSAJE.MENSCODI%TYPE;  
    SBERRORMESSAGE      VARCHAR2(2000);         
    RCCONFESCO		CONFESCO%ROWTYPE ;	
BEGIN

    PKERRORS.PUSH('pkSuspConnService.WithDrawDefinitive');
    
    RCCONFESCO := PKTBLCONFESCO.FRCGETRECORD (  NUSERVCODI, 
						NUEVENAPLI, 
						PKCONSTANTE.NOCACHE );
    
    RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD (  NUNUMESERV,
						PKCONSTANTE.NOCACHE ) ;
    
    PKSUSPCONNSERVICEMGR.VALIDSUSPENSIONDAYS
    (
	RCSERVSUSC.SESUNUSE,
	RCCONFESCO.COECDICO,
	RCSERVSUSC.SESUFECO
    );
    
    PKSUSPCONNSERVICEMGR.APPLYCHARGE ( RCSERVSUSC, RCCONFESCO,NUCICLCODI ); 
    
    PKSUSPCONNREQUESTMGR.REQUESTATTENTION ( NUNUMESERV, SBACTARETI );
    
    PKSPECIALSERVREQMGR.ATTENALLREQSERVNUMBER ( NUNUMESERV,
						NUDESCONEXION );
    
    
    PKWITHDRAWSERVNUMBER.EXECUTEWITHDRAW ( NUNUMESERV, 
					   NUMOSUCODI, 
					   SBACTARETI );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END WITHDRAWDEFINITIVE;














































PROCEDURE WITHDRAWTEMPORAL
IS
    SBERRORDIV		MENSAJE.MENSDIVI%TYPE ;
    SBERRORMOD		MENSAJE.MENSMODU%TYPE ;
    NUERRORCOD		MENSAJE.MENSCODI%TYPE ;
    SBERRORMES		MENSAJE.MENSDESC%TYPE ;
    RCCONFCOSE		CONFCOSE%ROWTYPE ;
    NUNUMEPETI		NUMBER;
    NUERRORCODE		MENSAJE.MENSCODI%TYPE;	    
    SBERRORMESSAGE      VARCHAR2(2000);		    
    RCCONFESCO		CONFESCO%ROWTYPE ;	    
    NUCUENSALD		CONFCOSE.COCSNCDX%TYPE;     
    NUDIASCORT		CONFESCO.COECDICO%TYPE;     
BEGIN

    PKERRORS.PUSH('pkSuspConnService.WithDrawTemporal');
    
    
    RCCONFESCO := PKTBLCONFESCO.FRCGETRECORD (  NUSERVCODI, 
						NUEVENAPLI, 
						PKCONSTANTE.CACHE );
						
    
    NUDIASCORT := RCCONFESCO.COECDICO ;
    
    
    RCCONFCOSE := PKTBLCONFCOSE.FRCGETRECORD (  NUSERVCODI, 
						PKCONSTANTE.CACHE );
						
    
    NUCUENSALD := RCCONFCOSE.COCSMNCR ;
    
    
    PKREPORTSMGR.CREATEREPORT (
				'Informe ' || SBTITUREPO , 
				NUREPONUME );
				
    
    PKREPORTSMGR.CREATEREPORT (
				'Inconsistencias ' || SBTITUREPO , 
				NUINCONUME );
				
    
    OPEN CURETITEMP (   NUSERVCODI, NUNUMESERV, NUDEPACODI, 
			            NULOCACODI, NUCICLCODI, NUCUENSALD,
			            NUEVENAPLI );
			
    FETCH CURETITEMP INTO  RCCUSERVSUSC;
    
    IF ( CURETITEMP%NOTFOUND ) THEN
    
    	
    	CLOSE CURETITEMP ;
    	PKERRORS.SETERRORCODE(  PKCONSTANTE.CSBDIVISION,
    				PKCONSTANTE.CSBMOD_GRL,
    				CNUNO_ENCO_REGIS );
    	RAISE LOGIN_DENIED;
    
    END IF;
    
    LOOP 
	
	SAVEPOINT SV_SERVSUSC;
	FILLSERVNUMBERRECORD;
	BEGIN
	    
	    PKSUSPCONNSERVICEMGR.VALIDSUSPENSIONDAYS
	    (
		RCSERVSUSC.SESUNUSE,
		NUDIASCORT ,
		RCSERVSUSC.SESUFECO,
		NUCUENSALD
	    );

	    IF ( NUERRORCODE <> PKCONSTANTE.EXITO ) THEN
		    RAISE LOGIN_DENIED;
	    END IF ;
	    
	    PKSUSPCONNSERVICEMGR.APPLYCHARGE ( RCSERVSUSC, RCCONFESCO );
	    
	    NULINEA := NULINEA + 1;
	    
	    PKREPORTSINCMGR.INSERTREPORTLINE (
						NUREPONUME, 
						NULINEA, 
						NUNUMEPETI, 
						RCSERVSUSC.SESUNUSE, 
						SBSUCOOBSE 
					     );
	EXCEPTION
	    WHEN LOGIN_DENIED THEN
		
		ROLLBACK TO SV_SERVSUSC;
		
		NULININCO := NULININCO + 1;
		
		PKREPORTSINCMGR.INSERTREPORTLINE (
						    NUINCONUME, 
						    NULININCO, 
						    PKBILLCONST.CERO, 
						    RCSERVSUSC.SESUNUSE, 
						    PKERRORS.FSBGETERRORMESSAGE
						  );
		
		PKERRORS.GETERRORVAR(   SBERRORDIV, SBERRORMOD, NUERRORCOD, 
					SBERRORMES, PKCONSTANTE.INITIALIZE );
	    WHEN OTHERS THEN
		
		ROLLBACK TO SV_SERVSUSC;
		
		NULININCO := NULININCO + 1;
		
		PKREPORTSINCMGR.INSERTREPORTLINE (
						    NUINCONUME, 
						    NULININCO, 
						    PKBILLCONST.CERO, 
						    RCSERVSUSC.SESUNUSE, 
						    SQLERRM 
						 );
	END ;
	
	PKGENERALSERVICES.COMMITTRANSACTION;
	
        FETCH CURETITEMP INTO RCCUSERVSUSC ;
	
	EXIT WHEN ( CURETITEMP%NOTFOUND ) ;
    END LOOP;	
    CLOSE CURETITEMP;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        IF ( CURETITEMP%ISOPEN) THEN
	    CLOSE CURETITEMP ;
        END IF;
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        IF ( CURETITEMP%ISOPEN) THEN
	    CLOSE CURETITEMP ;
        END IF;
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        IF ( CURETITEMP%ISOPEN) THEN
	    CLOSE CURETITEMP ;
        END IF;
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END WITHDRAWTEMPORAL;






































PROCEDURE ATTENINDIVSUSPECONNE
    (
        INUSUCOIDSC	    IN      SUSPCONE.SUCOIDSC%TYPE,
        INUSERVCODI	    IN      SERVSUSC.SESUSERV%TYPE,
    	INUCOECCODI	    IN	    CONFESCO.COECCODI%TYPE,
        IDTSUCOFEAT	    IN      SUSPCONE.SUCOFEAT%TYPE,
        ISBCUMPLIDA	    IN      SUSPCONE.SUCOTIPO%TYPE,
        ISBPROGRAMA     IN      HICAESCO.HCECPROG%TYPE,
    	ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS

    SBROWID	      ROWID;
    RCSUSPCONE    SUSPCONE%ROWTYPE ;		
    RCSERVSUSC    SERVSUSC%ROWTYPE ;		
    RCCONFESCO    CONFESCO%ROWTYPE ;		

    
    
    
    





    PROCEDURE INITIALIZE IS
        SBPROGRAMA HICAESCO.HCECPROG%TYPE;
    BEGIN
    
	PKERRORS.PUSH('pkSuspConnService.AttenIndivSuspeConne.Initialize');

	
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE, PKCONSTANTE.INITIALIZE );
	SBPROGRAMA := PKERRORS.FSBGETAPPLICATION;
	
	IF ( SBPROGRAMA IS NULL )
	THEN
	   SBPROGRAMA := NVL(ISBPROGRAMA,'SES');
	   PKERRORS.SETAPPLICATION(SBPROGRAMA);		
	END IF;

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END INITIALIZE;

    





    PROCEDURE GETDATA 
    IS

	CURSOR CUSUSPCONE
	IS
	SELECT ROWID 
	FROM   SUSPCONE 
	WHERE  SUCOIDSC = INUSUCOIDSC ;

    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.AttenIndivSuspeConne.GetData');

	
	RCSUSPCONE := PKTBLSUSPCONE.FRCGETRECORD ( INUSUCOIDSC ) ;

	OPEN CUSUSPCONE ;
	FETCH CUSUSPCONE INTO SBROWID ;
	CLOSE CUSUSPCONE ;

	
	PKGENERALSERVICES.TRACEDATA('grcTrgServsusc.sesunuse :'||GRCTRGSERVSUSC.SESUNUSE);	
	IF ( GRCTRGSERVSUSC.SESUNUSE IS NULL ) THEN
	    RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD ( RCSUSPCONE.SUCONUSE ) ;
    ELSE
        RCSERVSUSC := GRCTRGSERVSUSC;
    END IF;
	PKGENERALSERVICES.TRACEDATA('rcServsusc.sesunuse :'||RCSERVSUSC.SESUNUSE||' Estado ['||INUCOECCODI||']');

	
	RCCONFESCO := PKTBLCONFESCO.FRCGETRECORD (  INUSERVCODI, 
						    INUCOECCODI, 
						    PKCONSTANTE.NOCACHE );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETDATA;

    





    PROCEDURE VALINPUTDATA IS
    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.AttenIndivSuspeConne.ValInputData');

	
	VALORDERDATAFORATTEN (  RCSUSPCONE.SUCOFEOR, 
				IDTSUCOFEAT,
				RCSUSPCONE.SUCOFEAT ); 

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END VALINPUTDATA;

BEGIN


    PKERRORS.PUSH('pkSuspConnService.AttenIndivSuspeConne');
    
	PKGENERALSERVICES.TRACEDATA('Servcodi :'||INUSERVCODI);
	PKGENERALSERVICES.TRACEDATA('IDSusp   :'||INUSUCOIDSC);
	PKGENERALSERVICES.TRACEDATA('idtSucofeat :'||IDTSUCOFEAT);
	PKGENERALSERVICES.TRACEDATA('isbCumplida	:'||ISBCUMPLIDA);
	PKGENERALSERVICES.TRACEDATA('isbPrograma	:'||ISBPROGRAMA	);
	PKGENERALSERVICES.TRACEDATA('inuCoecCodi	:'||INUCOECCODI	);

    
    INITIALIZE ;

    
    CLEARMEMORY;

    
    GETDATA ;

    
    VALINPUTDATA ;

    
    IF ( GRCTRGSERVSUSC.SESUNUSE IS NOT NULL ) THEN
        PKSUSPCONNSERVICEMGR.SETRECORDTRIGGER(RCSERVSUSC);
    END IF;
    
    PKSUSPCONNSERVICEMGR.ATTENINDIVSUSPECONNE
	(
	    RCSUSPCONE.SUCONUSE,
	    SBROWID,
	    IDTSUCOFEAT,
	    RCSERVSUSC.SESUFECO,
	    RCSUSPCONE.SUCOTIPO,
	    ISBCUMPLIDA,
	    RCCONFESCO,
	    NUCICLCODI
	);

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END ATTENINDIVSUSPECONNE;




































PROCEDURE ATTENINDIVWITHDRAW
(
    INUSUCOIDSC         IN      SUSPCONE.SUCOIDSC%TYPE,
    INUSERVCODI         IN      SERVSUSC.SESUSERV%TYPE,
    INUCOECCODI         IN      CONFESCO.COECCODI%TYPE,
    IDTSUCOFEAT         IN      SUSPCONE.SUCOFEAT%TYPE,
    ONUERRORCODE        OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    OSBERRORMESSAGE     OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
)
IS

    
    RCSUSPCONE                      SUSPCONE%ROWTYPE;
    
    
    RCSERVSUSC                      SERVSUSC%ROWTYPE;
    
    
    RCCONFESCO                      CONFESCO%ROWTYPE;
    NUMOTIVO_RETIRO_POR_NO_PAGO     PARAMETR.PAMENUME%TYPE;

    
    
    
    





    PROCEDURE INITIALIZE
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.AttenIndivWithDraw.Initialize]', 6 );

        
        PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE, PKCONSTANTE.INITIALIZE );

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.AttenIndivWithDraw.Initialize]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw.Initialize]', 6 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw.Initialize]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;

    





    PROCEDURE GETPARAMETERS 
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.AttenIndivWithDraw.GetParameters]', 6 );

        
        NUMOTIVO_RETIRO_POR_NO_PAGO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'MOTIVO_RETIRO_POR_NO_PAGO' );

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.AttenIndivWithDraw.GetParameters]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw.GetParameters]', 6 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw.GetParameters]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;

    





    PROCEDURE GETDATA 
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.AttenIndivWithDraw.GetData]', 6 );

    	
    	RCSUSPCONE := PKTBLSUSPCONE.FRCGETRECORD( INUSUCOIDSC );

    	
    	RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( RCSUSPCONE.SUCONUSE );

    	
    	RCCONFESCO := PKTBLCONFESCO.FRCGETRECORD
        (
            INUSERVCODI,
            INUCOECCODI,
            PKCONSTANTE.NOCACHE
        );
						    
        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.AttenIndivWithDraw.GetData]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw.GetData]', 6 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw.GetData]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;

    





    PROCEDURE VALINPUTDATA
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.AttenIndivWithDraw.ValInputData]', 6 );

    	
    	VALORDERDATAFORATTEN
        (
            RCSUSPCONE.SUCOFEOR,
    		IDTSUCOFEAT,
    		RCSUSPCONE.SUCOFEAT
        );

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.AttenIndivWithDraw.ValInputData]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw.ValInputData]', 6 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw.ValInputData]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
    
BEGIN

    UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.AttenIndivWithDraw]', 5 );

    
    INITIALIZE;

    
    CLEARMEMORY;

    
    GETPARAMETERS;

    
    GETDATA;

    
    VALINPUTDATA;

    
    PKSUSPCONNSERVICEMGR.ATTENINDIVWITHDRAW
	(
	    RCSUSPCONE.SUCONUSE,
	    RCSUSPCONE.SUCOIDSC,
	    IDTSUCOFEAT,
	    RCSERVSUSC.SESUFECO,
	    NUMOTIVO_RETIRO_POR_NO_PAGO,
	    RCCONFESCO,
	    NUCICLCODI
	);

    UT_TRACE.TRACE( 'Fin: [pkSuspConnService.AttenIndivWithDraw]', 5 );

EXCEPTION

    WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw]', 5 );
        PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        UT_TRACE.TRACE( 'Error: [pkSuspConnService.AttenIndivWithDraw]', 5 );
        PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END;



FUNCTION FSBGETMESSAPROC ( ISBMESSPROCC		IN	VARCHAR2,
			   INUPROCSSNUMBER	IN	NUMBER)
RETURN VARCHAR2
IS
	SBMESSAGE	VARCHAR2(200);
BEGIN
    PKERRORS.PUSH('pkSuspConnService.fsbGetMessaProc');

    SBMESSAGE := REPLACE( ISBMESSPROCC,'PROCESS_NUMBER',TO_CHAR(INUPROCSSNUMBER));

    PKERRORS.POP;
    RETURN SBMESSAGE;
END FSBGETMESSAPROC;











































FUNCTION FRCGETINSTANCEDATA RETURN TYMEMORYVAR
IS
BEGIN

    UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.frcGetInstanceData]', 6 );

    RCMEMORYVAR.NUIDSUSPCONE := PKSUSPCONNSERVICEMGR.FNUGETIDSUSPCONE;
    RCMEMORYVAR.NUORDERTYPE  := PKSUSPCONNSERVICEMGR.FNUGETORDERTYPE;
    RCMEMORYVAR.NUSERVICE    := NUCURRSERVICE;
    RCMEMORYVAR.NUEVENAPLI   := NUEVENAPLI;
    RCMEMORYVAR.NUNUMESERV   := NUCURRSUBSSERV;
    RCMEMORYVAR.NUORDENUME   := NUORDENUME;
    RCMEMORYVAR.NUNUMETHREAD := NUNUMETHREAD;
    RCMEMORYVAR.SBIDTRACKING := SBIDTRACKING;
    RCMEMORYVAR.NUINCONUME   := NUINCONUME;
    RCMEMORYVAR.NULININCO    := NULININCO;
    RCMEMORYVAR.NUSUBSCRIBER := NUCURRSUBSCRIBER;

    RCMEMORYVAR.CURRROWIDSUBSSERV := NUCURRROWIDSUBSSERV;

    UT_TRACE.TRACE( 'rcMemoryVar.nuIdSuspcone   -> ' || RCMEMORYVAR.NUIDSUSPCONE, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.nuOrderType    -> ' || RCMEMORYVAR.NUORDERTYPE, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.nuService      -> ' || RCMEMORYVAR.NUSERVICE, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.nuEvenApli     -> ' || RCMEMORYVAR.NUEVENAPLI, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.nuNumeServ     -> ' || RCMEMORYVAR.NUNUMESERV, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.nuOrdeNume     -> ' || RCMEMORYVAR.NUORDENUME, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.nuNumeThread   -> ' || RCMEMORYVAR.NUNUMETHREAD, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.sbIdTracking   -> ' || RCMEMORYVAR.SBIDTRACKING, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.nuIncoNume     -> ' || RCMEMORYVAR.NUINCONUME, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.nuLinInco      -> ' || RCMEMORYVAR.NULININCO, 7 );
    UT_TRACE.TRACE( 'rcMemoryVar.nuSubscriber   -> ' || RCMEMORYVAR.NUSUBSCRIBER, 7 );

    UT_TRACE.TRACE( 'Fin: [pkSuspConnService.frcGetInstanceData]', 6 );
    RETURN RCMEMORYVAR;

END;




















PROCEDURE SETINSTANCEDATA ( RCMEMORYDATA TYMEMORYVAR)
IS
BEGIN
    PKERRORS.PUSH('pkSuspConnService.SetInstanceData');
    NUCURRSERVICE   := RCMEMORYDATA.NUSERVICE;
    NUEVENAPLI      := RCMEMORYDATA.NUEVENAPLI;
    NUCURRSUBSSERV  := RCMEMORYDATA.NUNUMESERV;
    NUORDENUME      := RCMEMORYDATA.NUORDENUME;
    PKERRORS.POP;
END;

























PROCEDURE SETRECORDTRIGGER
    (
        RCSERVSUSC    IN  SERVSUSC%ROWTYPE
    )
IS
    RCTRGSERVSUSNULL SERVSUSC%ROWTYPE;
BEGIN

    PKERRORS.PUSH('pkSuspConnServiceMgr.SetRecordTrigger');
    
    GRCTRGSERVSUSC     := RCTRGSERVSUSNULL;
    
    GRCTRGSERVSUSC := RCSERVSUSC ;

    PKERRORS.POP;


END SETRECORDTRIGGER;









































PROCEDURE INACTIVEBILLING
IS
    SBERRORDIV	 	        MENSAJE.MENSDIVI%TYPE ;
    SBERRORMOD		        MENSAJE.MENSMODU%TYPE ;
    NUERRORCOD		        MENSAJE.MENSCODI%TYPE ;
    SBERRORMES		        MENSAJE.MENSDESC%TYPE ;
    RCCONFESCO		        CONFESCO%ROWTYPE ;	    
    NUDIASCORT		        CONFESCO.COECDICO%TYPE; 
    RCSUSCRIPC		        SUSCRIPC%ROWTYPE;	    
    CNUNO_TIENE_INCLUSION   CONSTANT NUMBER := 0 ;  
    DTDIASADIC              DATE ;                  
    NUDIASADIC              NUMBER ;                
    NUCUENSALDSERV          PKBCSERVSUSC.STYSESUCUSA; 

    
    
    
    
    FUNCTION FBLPROCESSSERVSUSC
    RETURN BOOLEAN
    IS
    BEGIN
        PKERRORS.PUSH('pkSuspConnService.InactiveBilling.fblProcessServsusc');

        
        IF ( NVL(INSTR(RCSERVSUSC.SESUEXCL,'|'||NUEVENAPLI||'|'),0) > 0) THEN
            PKERRORS.POP;
            RETURN FALSE;
        END IF;

    	
        IF ( RCSERVSUSC.SESUROGA = PKWARRANTYMGR.CSBPROPIETARIO) THEN
    	   PKERRORS.POP;
    	   RETURN FALSE;
    	END IF;

        
    	NUCUENSALDSERV := PKBOEXPIREDACCOUNTS.FNUPERIODSWITHEXPACCOUNTS(RCSERVSUSC.SESUNUSE);

        
        IF ( NUCUENSALDSERV < NVL(NUEXPACCOUNTNUMBER,0) )
        THEN
        
            PKERRORS.POP;
            RETURN FALSE;
        
        END IF;
        
        PKERRORS.POP;
        RETURN TRUE;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
	    RAISE;
	WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END FBLPROCESSSERVSUSC ;
    
    PROCEDURE GETDATA
    IS
    BEGIN
        PKERRORS.PUSH('pkSuspConnService.InactiveBilling.GetData');
        
        
        RCSERVSUSC := PKSERVNUMBERMGR.FRCGETRECORD( NUCURRROWIDSUBSSERV );
        
        
        RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO (  RCSERVSUSC.SESUSERV,
                            						         NUEVENAPLI );

        
        NUDIASCORT := RCCONFESCO.COECDICO ;
    						
    	
    	DTDIASADIC := PKHOLIDAYMGR.FDTGETDATENONHOLIDAY( SYSDATE,
                                                         NUDIAS_ADICION_FECHA_SUSP ) ;

        NUDIASADIC := TO_NUMBER(TRUNC( DTDIASADIC ) - TRUNC(SYSDATE) ) ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETDATA ;
    
    PROCEDURE PROCESSSERVICES
    IS
    BEGIN
        PKERRORS.PUSH('pkSuspConnService.InactiveBilling.ProcessServices');

        IF ( NOT  FBLPROCESSSERVSUSC ) THEN
        
            PKERRORS.POP;
            RETURN ;
        
        END IF;

        
        PKSUSPCONNSERVICEMGR.VALIDSUSPENSIONDAYS
            (
            	RCSERVSUSC.SESUNUSE,
            	NUDIASCORT ,
            	RCSERVSUSC.SESUFECO,
                NUEXPACCOUNTNUMBER
            );

        
        PKSUSPCONNSERVICEMGR.EXECUTEADDVALRULE(RCSERVSUSC.SESUSERV,NUEVENAPLI);

        NULINEA := NULINEA + 1;
        
        PKSUSPCONNSERVICEMGR.INACTIVEBILLING (
                                				RCSERVSUSC,
                                				RCCONFESCO,
                                				NUCURRCYCLE
                                			 );
    	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END PROCESSSERVICES ;
BEGIN

    PKERRORS.PUSH('pkSuspConnService.InactiveBilling');
    
    
    GETDATA;
    
    
    PROCESSSERVICES;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END INACTIVEBILLING;



















PROCEDURE SETEXPIREACCOUNNUMBER
    (
	INUEXPACCOUNTNUMBER  IN    NUMBER
    )
IS
BEGIN
    PKERRORS.PUSH('pkSuspConnServiceMgr.setExpireAccounNumber');
    
    NUEXPACCOUNTNUMBER := INUEXPACCOUNTNUMBER;
                    					
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETEXPIREACCOUNNUMBER;








































PROCEDURE GETSTATUSCONFDATA
(
    INUCLIENTTYPE   IN  COECTCPF.CTCPTICL%TYPE,
    INUBILLPLAN     IN  COECTCPF.CTCPPLFA%TYPE,
    INUPRODUCTTYPE  IN  SERVSUSC.SESUSERV%TYPE,
    INUPRODUCT      IN  SERVSUSC.SESUNUSE%TYPE,
    ORCCONFCOSE     OUT CONFCOSE%ROWTYPE,
    IBLSUSPENSION   IN  BOOLEAN DEFAULT FALSE
)
IS
    
    
    
    RCCOECTCPF      COECTCPF%ROWTYPE;

    CNUNULO         CONSTANT NUMBER := PKCONSTANTE.NULLNUM;
    
    
    
    
    PROCEDURE FINDCONFDATARECORD
    (
        INUCUSTOMERTYPE    IN  COECTCPF.CTCPTICL%TYPE,
        INUBILLINGPLAN     IN  COECTCPF.CTCPPLFA%TYPE
    )
    IS
    BEGIN
    
        PKERRORS.PUSH('pkSuspConnService.GetStatusConfData.FindConfDataRecord');

        RCCOECTCPF := PKTBLCOECTCPF.FRCGETRECORD( INUCUSTOMERTYPE , INUBILLINGPLAN );

        
        
        ORCCONFCOSE.COCSNCCX := RCCOECTCPF.CTCPNCCX ;
        ORCCONFCOSE.COCSNCDX := RCCOECTCPF.CTCPNCDX ;
        ORCCONFCOSE.COCSMNCR := RCCOECTCPF.CTCPMNCR ;
        ORCCONFCOSE.COCSPDCX := RCCOECTCPF.CTCPPDCX ;

        PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED THEN
    	    PKERRORS.POP;
    	    
    	    PKERRORS.INITIALIZE;
    	    
    	    RETURN;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
    	WHEN OTHERS THEN
    	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	    PKERRORS.POP;
    	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END FINDCONFDATARECORD;
    
    PROCEDURE SETCONFDATARECORD
    IS
    BEGIN
    
        PKERRORS.PUSH('pkSuspConnService.GetStatusConfData.SetConfDataRecord');

        
        
        FINDCONFDATARECORD ( INUCLIENTTYPE , INUBILLPLAN );
        
        IF ( RCCOECTCPF.CTCPTICL IS NULL ) THEN
        
            
            
            FINDCONFDATARECORD ( INUCLIENTTYPE , CNUNULO );
            
            IF ( RCCOECTCPF.CTCPTICL IS NULL ) THEN
            
                
                
                FINDCONFDATARECORD ( CNUNULO, INUBILLPLAN );
            
            END IF;
        
        END IF;
        
        
        
        
        
        
        IF ( RCCOECTCPF.CTCPTICL IS NULL AND IBLSUSPENSION ) THEN
        
            ORCCONFCOSE.COCSNCDX := PKSUSPCONNSETUPBYSERVSUSCMGR.FNUGETMINNUMSERVSUSCSUSACC
                                    ( INUPRODUCT , INUPRODUCTTYPE );
        
        END IF;

        
        PKGENERALSERVICES.TRACEDATA('Tipo de Cliente  : ' || INUCLIENTTYPE );
        PKGENERALSERVICES.TRACEDATA('Plan Facturacion : ' || INUBILLPLAN );
        PKGENERALSERVICES.TRACEDATA('Tipo de Producto : ' || INUPRODUCTTYPE );
        PKGENERALSERVICES.TRACEDATA('Producto         : ' || INUPRODUCT );
        PKGENERALSERVICES.TRACEDATA('Numero Cuentas para DESCONEXION : ' || ORCCONFCOSE.COCSNCDX );
        PKGENERALSERVICES.TRACEDATA('Numero Cuentas para CONEXION    : ' || ORCCONFCOSE.COCSNCCX );
        PKGENERALSERVICES.TRACEDATA('Numero Cuentas para RETIRO      : ' || ORCCONFCOSE.COCSMNCR );
        PKGENERALSERVICES.TRACEDATA('Porcentaje (%) para CONEXION    : ' || ORCCONFCOSE.COCSPDCX );
        
        
        PKERRORS.POP;
    EXCEPTION
    	WHEN LOGIN_DENIED THEN
    	    PKERRORS.POP;
    	    RAISE;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
    	WHEN OTHERS THEN
    	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	    PKERRORS.POP;
    	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END SETCONFDATARECORD;
    
    
BEGIN

    PKERRORS.PUSH('pkSuspConnService.GetStatusConfData');

    
    ORCCONFCOSE := PKTBLCONFCOSE.FRCGETRECORD( INUPRODUCTTYPE );

    
    SETCONFDATARECORD;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETSTATUSCONFDATA;


























PROCEDURE ATTENINDIVREINSTALL
    (
        INUSUCOIDSC	    IN      SUSPCONE.SUCOIDSC%TYPE,
        INUSERVCODI	    IN      SERVSUSC.SESUSERV%TYPE,
    	INUCOECCODI	    IN	    CONFESCO.COECCODI%TYPE,
        IDTSUCOFEAT	    IN      SUSPCONE.SUCOFEAT%TYPE,
        ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS

    SBROWID	      ROWID;
    RCSUSPCONE    SUSPCONE%ROWTYPE ;		
    RCSERVSUSC    SERVSUSC%ROWTYPE ;		
    RCCONFESCO    CONFESCO%ROWTYPE ;		


    
    
    
    





    PROCEDURE INITIALIZE IS
    BEGIN
    
	PKERRORS.PUSH('pkSuspConnService.AttenIndivReinstall.Initialize');

	
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE, PKCONSTANTE.INITIALIZE );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END INITIALIZE;


    





    PROCEDURE GETDATA
    IS

	CURSOR CUSUSPCONE
	IS
	SELECT ROWID
	FROM   SUSPCONE
	WHERE  SUCOIDSC = INUSUCOIDSC ;

    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.AttenIndivReinstall.GetData');

	
	RCSUSPCONE := PKTBLSUSPCONE.FRCGETRECORD ( INUSUCOIDSC ) ;

	OPEN CUSUSPCONE ;
	FETCH CUSUSPCONE INTO SBROWID ;
	CLOSE CUSUSPCONE ;

	
	RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD ( RCSUSPCONE.SUCONUSE ) ;

	
	RCCONFESCO := PKTBLCONFESCO.FRCGETRECORD (  INUSERVCODI,
						    INUCOECCODI,
						    PKCONSTANTE.NOCACHE );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETDATA;

    





    PROCEDURE VALINPUTDATA IS
    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.AttenIndivReinstall.ValInputData');

    
	VALORDERDATAFORATTEN (  RCSUSPCONE.SUCOFEOR,
				IDTSUCOFEAT,
				RCSUSPCONE.SUCOFEAT );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END VALINPUTDATA;

BEGIN


    PKERRORS.PUSH('pkSuspConnService.AttenIndivReinstall');

    
    INITIALIZE ;

    
    CLEARMEMORY;

    
    GETDATA ;

    
    VALINPUTDATA ;

    
    PKSUSPCONNSERVICEMGR.ATTENINDIVREINSTALL
	(
	    RCSUSPCONE.SUCONUSE,
	    SBROWID,
	    IDTSUCOFEAT,
	    RCSERVSUSC.SESUFECO,
	    RCCONFESCO,
	    NUCICLCODI
	);

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END ATTENINDIVREINSTALL;
























PROCEDURE GENSUSPCONEASSO
    (
        INUSUCOIDSC	    IN          SUSPCONE.SUCOIDSC%TYPE,
        INUSESUNUSE	    IN          SERVSUSC.SESUNUSE%TYPE,
        ONUSUCOIDSC     OUT NOCOPY  SUSPCONE.SUCOIDSC%TYPE,
        ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
    	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS

    NUNUMEORDER   SUSPCONE.SUCONUOR%TYPE;
    RCSUSPCONE    SUSPCONE%ROWTYPE ;		
    RCSERVSUSC    SERVSUSC%ROWTYPE ;		
    RCCONFESCO    CONFESCO%ROWTYPE ;		


    
    
    
    





    PROCEDURE INITIALIZE IS
    BEGIN
    
	PKERRORS.PUSH('pkSuspConnService.GenSuspConeAsso.Initialize');

	
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE, PKCONSTANTE.INITIALIZE );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END INITIALIZE;


    





    PROCEDURE GETDATA
    IS
    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.GenSuspConeAsso.GetData');

	
	RCSUSPCONE := PKTBLSUSPCONE.FRCGETRECORD ( INUSUCOIDSC ) ;

	
	RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD ( INUSESUNUSE ) ;

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETDATA;


    



    PROCEDURE SETDATA
    IS

    CURSOR CUSUSPCONE
	IS
	SELECT SUCOIDSC
	  FROM SUSPCONE
	 WHERE SUCONUOR = NUNUMEORDER
       AND SUCONUSE = INUSESUNUSE;

    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.GenSuspConeAsso.SetData');

	OPEN CUSUSPCONE ;
	FETCH CUSUSPCONE INTO ONUSUCOIDSC ;
	CLOSE CUSUSPCONE ;

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END SETDATA;


BEGIN


    PKERRORS.PUSH('pkSuspConnService.GenSuspConeAsso');

    
    INITIALIZE ;

    
    CLEARMEMORY;

    
    GETDATA ;

    
    PKSUSPCONNSERVICEMGR.CREATEORDERSUSPCONE(
           RCSERVSUSC.SESUNUSE,
           RCSUSPCONE.SUCOCOEC,
           RCSUSPCONE.SUCOCACD,
           NUNUMEORDER,
           RCSUSPCONE.SUCOTIPO,
           RCSUSPCONE.SUCOOBSE
    );

    
    SETDATA;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END GENSUSPCONEASSO;























PROCEDURE CHGTOWITHDRAWDEF
(
    INUSESUNUSE	    IN      SERVSUSC.SESUNUSE%TYPE,
    ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
)IS
    NURET_POR_NO_PAGO   PARAMETR.PAMENUME%TYPE;
    NUCYCLE             SUSCRIPC.SUSCCICL%TYPE;
    RCSERVSUSC          SERVSUSC%ROWTYPE ;		
    RCCONFESCO          CONFESCO%ROWTYPE ;		

    
    
    
    





    PROCEDURE INITIALIZE IS
    BEGIN
    
	PKERRORS.PUSH('pkSuspConnService.ChgToWithDrawDef.Initialize');

	
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE, PKCONSTANTE.INITIALIZE );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END INITIALIZE;

    





    PROCEDURE GETPARAMETERS
    IS

    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.ChgToWithDrawDef.GetParameters');

	
	NURET_POR_NO_PAGO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
					('RETIRO_LINEA_POR_NO_PAGO' );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETPARAMETERS;

    





    PROCEDURE GETDATA
    IS
    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.ChgToWithDrawDef.GetData');

	
	RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD ( INUSESUNUSE ) ;

	
	RCCONFESCO := PKTBLCONFESCO.FRCGETRECORD ( RCSERVSUSC.SESUSERV,
						    NURET_POR_NO_PAGO, PKCONSTANTE.NOCACHE );

    
    NUCYCLE := PKTBLSUSCRIPC.FNUGETBILLINGCYCLE( RCSERVSUSC.SESUSUSC );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETDATA;

BEGIN


    PKERRORS.PUSH('pkSuspConnService.ChgToWithDrawDef');

    
    INITIALIZE ;

    
    CLEARMEMORY ;

    
    GETPARAMETERS ;

    
    GETDATA ;

    
    PKSUSPCONNSERVICEMGR.INACTIVEBILLING ( RCSERVSUSC, RCCONFESCO, NUCYCLE );

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END CHGTOWITHDRAWDEF;
























PROCEDURE CHGTOPAYMENTAGREE
(
    INUSESUNUSE	    IN      SERVSUSC.SESUNUSE%TYPE,
    ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
	OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
)IS
    NUFACT_CONVENIO     PARAMETR.PAMENUME%TYPE;
    NUCYCLE             SUSCRIPC.SUSCCICL%TYPE;
    RCSERVSUSC          SERVSUSC%ROWTYPE ;		
    RCCONFESCO          CONFESCO%ROWTYPE ;		


    
    
    
    





    PROCEDURE INITIALIZE IS
    BEGIN
    
	PKERRORS.PUSH('pkSuspConnService.ChgToPaymentAgree.Initialize');

	
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE, PKCONSTANTE.INITIALIZE );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END INITIALIZE;

    





    PROCEDURE GETPARAMETERS
    IS

    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.ChgToPaymentAgree.GetParameters');

	
	NUFACT_CONVENIO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
					('EST_FACT_CONVENIO' );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETPARAMETERS;

    





    PROCEDURE GETDATA
    IS
    BEGIN
    

	PKERRORS.PUSH('pkSuspConnService.ChgToPaymentAgree.GetData');

	
	RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD ( INUSESUNUSE ) ;

	
	RCCONFESCO := PKTBLCONFESCO.FRCGETRECORD ( RCSERVSUSC.SESUSERV,
						    NUFACT_CONVENIO, PKCONSTANTE.NOCACHE );

    
    NUCYCLE := PKTBLSUSCRIPC.FNUGETBILLINGCYCLE( RCSERVSUSC.SESUSUSC );

	PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETDATA;

BEGIN


    PKERRORS.PUSH('pkSuspConnService.ChgToPaymentAgree');

    
    INITIALIZE ;

    
    CLEARMEMORY;

    
    GETPARAMETERS ;

    
    GETDATA ;

    
    PKSUSPCONNSERVICEMGR.INACTIVEBILLING ( RCSERVSUSC, RCCONFESCO, NUCYCLE );

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END CHGTOPAYMENTAGREE;




















FUNCTION FSBVERSION  RETURN VARCHAR2 IS
BEGIN

    RETURN CSBVERSION;

END;



























    PROCEDURE EXEPRODSUSPCONNEVENT
    (
        INUPRODUCT          IN      SERVSUSC.SESUNUSE%TYPE,
        INUEVENTTOAPPLY     IN      ESTACORT.ESCOCODI%TYPE
    )
    IS

        
        CSBCAUS_DESC                    CONSTANT    PARAMETR.PAMECODI%TYPE := 'CAUS_DESC';

        
        CSBRUTA_REPORTES_SQL            CONSTANT    PARAMETR.PAMECODI%TYPE := 'RUTA_REPORTES_SQL';

        
        RCUSER                          DASA_USER.STYSA_USER;
        
        
        RCPRODUCT                       SERVSUSC%ROWTYPE;
        
        
        NUSUSPCONNCAUSE                 CAUSCODE.CACDCODI%TYPE;

        
        SBSQLREPORTSDIR                 PARAMETR.PAMECHAR%TYPE;

        
        SBREPORTSDIR                    SA_USER.PATH_REPORT%TYPE;

        
        SBDBUSER                        VARCHAR2(100);

        
        SBDBPASSWORD                    VARCHAR2(100);

        
        SBDBINSTANCE                    VARCHAR2(100);

        
        SBCONNECTIONSTRING              GE_BOINSTANCECONTROL.STYSBVALUE;
        
        
        NUORDERNUMBER                   SUSPCONE.SUCOIDSC%TYPE;
        
        
        NUREPORTNUMBER                  REPORTES.REPONUME%TYPE;
        
        
        NUREPORTERROR                   REPORTES.REPONUME%TYPE;
        
        
        SBREPORTTITLE                   REPORTES.REPODESC%TYPE;

        
        SBREPORT                        VARCHAR2(100);
    
    BEGIN

        PKERRORS.PUSH('pkSuspConnService.ExeProdSuspConnEvent');

        
        RCPRODUCT := PKTBLSERVSUSC.FRCGETRECORD( INUPRODUCT );

        
        RCUSER := DASA_USER.FRCGETRECORD( SA_BOUSER.FNUGETUSERID( NULL ) );

        
        NUSUSPCONNCAUSE := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( CSBCAUS_DESC );

        
        SBSQLREPORTSDIR := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE( CSBRUTA_REPORTES_SQL );

        
        GE_BODATABASECONNECTION.GETCONNECTIONSTRING
        (
            SBDBUSER,
            SBDBPASSWORD,
            SBDBINSTANCE
        );
        
        
        SBCONNECTIONSTRING := SBDBUSER || '/' || SBDBPASSWORD || '@' || SBDBINSTANCE;

        
        SBREPORTSDIR := RCUSER.PATH_REPORT;

        
        NUORDERNUMBER := PKSUSPCONNSERVICEMGR.FNUGETNEXTORDERNUMBER;

        
        SBREPORTTITLE := PKTBLESTACORT.FSBGETDESCRIPTION( INUEVENTTOAPPLY );

        
        PKSUSPCONNSERVICEMGR.INSERTREPORT
        (
            SBREPORTTITLE,
            NUORDERNUMBER,
            NUREPORTNUMBER,
            NUREPORTERROR
        );
        
        
        SBREPORT := PKSTATUSEXEPROGRAMMGR.FSBGETPROGRAMID(
                                        PKACCREIVADVANCEMGR.CSBUPER_APP_NAME );
        
        
        PKSUSPCONNSERVICE.EXESUSPECONNERULE
        (
            INUEVENTTOAPPLY,
            INUPRODUCT,
            RCPRODUCT.SESUCICL,
            SBREPORTTITLE,
            NUSUSPCONNCAUSE,
            PKCONSTANTE.NULLSB,
            1,
            1,
            NULL,
            SBREPORT,
            NUORDERNUMBER,
            NUREPORTNUMBER,
            NUREPORTERROR
        );

    	SBSQLREPORTSDIR := SBSQLREPORTSDIR || 'fodcinco.sql';

    	
    	PKSUSPCONNSERVICEMGR.GENERATEORDERFILE
        (
            SBCONNECTIONSTRING,
            PKACCREIVADVANCEMGR.CSBUPER_APP_NAME || 'INCO',
            SBSQLREPORTSDIR,
            SBREPORTSDIR,
            NUORDERNUMBER,
            NUREPORTERROR
        );

        PKERRORS.POP;

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

    END EXEPRODSUSPCONNEVENT;

    





















































    
    PROCEDURE SUSPORDERBYCONTRACT
    IS
        
        
        
        NUIDX                   BINARY_INTEGER;
        NUIDXFILL               BINARY_INTEGER := 1;
        BLISVALID               BOOLEAN := FALSE;
        BLMOREPRODS             BOOLEAN := TRUE;
        RCCONFESCO		        CONFESCO%ROWTYPE;
        RCCONFCOSE		        CONFCOSE%ROWTYPE;
        RCPRODUCT               SERVSUSC%ROWTYPE;
        NUCUENSALD		        CONFCOSE.COCSNCDX%TYPE;
        NUDIASCORT		        CONFESCO.COECDICO%TYPE;
        RCTIPOCLIE              DAGE_SUBSCRIBER_TYPE.STYGE_SUBSCRIBER_TYPE;
        NUCUENSALDSERV          PKBCSERVSUSC.STYSESUCUSA;
        NULASTPRODUCT           SERVSUSC.SESUNUSE%TYPE;
        TBPRODUCTS              PKTBLSERVSUSC.TYSESUNUSE;
        TBCYCLES                PKTBLSERVSUSC.TYSESUCICO;
        TBINSTALLDATE           PKTBLSERVSUSC.TYSESUFEIN;
        TBWITHDRAWDATE          PKTBLSERVSUSC.TYSESUFERE;
        TBRCPRODUCTS            TYTBPRODUCTS;
        
        
        ONUERRCODE              NUMBER;
        OSBERRMSG               VARCHAR2(2000);
        NURULEID                GE_ACT_PRODTYPE_STAT.RULE_ID%TYPE;
        NUORDERPROCESS          VARCHAR2(1);
        NUORDERTYPE             NUMBER;
        
        
        
        BOISSPONSORPROD         BOOLEAN := FALSE;

        
        
        BOISCOVEREDPROD         BOOLEAN := FALSE;

        
        
        TBCOMMRELDETAILS        DACC_DETAIL_COM_RELA.TYTBCC_DETAIL_COM_RELA;

        
        
        RCCOMMRELDETAIL         DACC_DETAIL_COM_RELA.STYCC_DETAIL_COM_RELA;
        RCNULLCOMMRELDETAIL     DACC_DETAIL_COM_RELA.STYCC_DETAIL_COM_RELA;

        
        
        RCCOMMRELATIONTYPE      DACC_RELATION_TYPE.STYCC_RELATION_TYPE;
        RCNULLCOMMRELATIONTYPE  DACC_RELATION_TYPE.STYCC_RELATION_TYPE;

        
        
        TBCOVEREDPRODS          PKBCSERVSUSC.TYTBPRODUCTS;

        
        NUCOVPRODSIDX           BINARY_INTEGER;
        
        
        

        PROCEDURE GETDATA
        IS
        
            NUCUSTTYPE      GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE;
            
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.SuspOrderByContract.GetData]', 6 );

            
            RCPRODUCT := TBRCPRODUCTS( NUIDXFILL );

            
            RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO
            (
                RCPRODUCT.SESUSERV,
                NUEVENAPLI
            );

            
            NUDIASCORT := RCCONFESCO.COECDICO;

            
            NUCUSTTYPE := DAGE_SUBSCRIBER.FNUGETSUBSCRIBER_TYPE_ID( NUCURRSUSCCLIE );

            
            RCTIPOCLIE := DAGE_SUBSCRIBER_TYPE.FRCGETRECORD( NUCUSTTYPE );

            
            PKSUSPCONNSERVICE.GETSTATUSCONFDATA
            (
                NUCUSTTYPE,
                RCPRODUCT.SESUPLFA,
                RCPRODUCT.SESUSERV,
                RCPRODUCT.SESUNUSE,
                RCCONFCOSE,
                TRUE
            );

            NUCUENSALD := RCCONFCOSE.COCSNCDX;

            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.GetData]', 6 );

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract.GetData]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract.GetData]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;

        
        
        PROCEDURE GETCOMMERCIALRELATIONS
        IS
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkChgStSusPaymentMgr.SuspOrderByContract.GetCommercialRelations]', 6 );

            
            BOISSPONSORPROD := FALSE;
            BOISCOVEREDPROD := FALSE;
            RCCOMMRELDETAIL := RCNULLCOMMRELDETAIL;
            RCCOMMRELATIONTYPE := RCNULLCOMMRELATIONTYPE;
            TBCOMMRELDETAILS.DELETE;
            TBCOVEREDPRODS.DELETE;
            NUCOVPRODSIDX := NULL;

            
            
            RCCOMMRELDETAIL := CC_BCRELACIONCOMERCIAL.FRCOBTDETPRODAMPARADO
            (
                RCPRODUCT.SESUNUSE,
                UT_DATE.FDTSYSDATE
            );

            IF ( RCCOMMRELDETAIL.DETAIL_COM_RELA_ID IS NOT NULL ) THEN
            
                
                
                BOISCOVEREDPROD := TRUE;
                BOISSPONSORPROD := FALSE;
            
            
            
            ELSE
            
                TBCOMMRELDETAILS := CC_BCRELACIONCOMERCIAL.FTBOBTDETPRODAMPARADOR
                (
                    RCPRODUCT.SESUNUSE,
                    UT_DATE.FDTSYSDATE
                );

                IF ( TBCOMMRELDETAILS.COUNT > 0 ) THEN
                
                    
                    
                    BOISCOVEREDPROD := FALSE;
                    BOISSPONSORPROD := TRUE;
                
                ELSE
                
                    
                    
                    BOISCOVEREDPROD := FALSE;
                    BOISSPONSORPROD := FALSE;
                
                END IF;
            
            END IF;

            UT_TRACE.TRACE( 'Fin: [pkChgStSusPaymentMgr.SuspOrderByContract.GetCommercialRelations]', 6 );

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkChgStSusPaymentMgr.SuspOrderByContract.GetCommercialRelations]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkChgStSusPaymentMgr.SuspOrderByContract.GetCommercialRelations]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;

        

        FUNCTION FBLPROCESSSERVSUSC RETURN BOOLEAN
        IS

            
            NUVALORRECLAMO          PKBCSERVSUSC.STYSESUVARE;

            
            
            NURECLPAGNOABO          PKBCSERVSUSC.STYSESUVRAP;
            
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );

            
            IF ( RCPRODUCT.SESUESCO = NUESTCORTEINACTIVE ) THEN
            
                UT_TRACE.TRACE( 'Producto tiene estado de corte inactivo, no genera orden [' || NUESTCORTEINACTIVE || ']', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

            
            IF ( PKSUSPCONNSERVICEMGR.FBLEXISTORDER ( RCPRODUCT.SESUDEPA,
                                                      RCPRODUCT.SESULOCA,
                                                      RCPRODUCT.SESUNUSE,
                                                      CSBDESCONEXION )
            ) THEN
            
                UT_TRACE.TRACE( 'El producto tiene una orden de desconexi�n pendiente de atender, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

            
            
            IF ( FBOHASPENDVOLWITHDRAW( RCPRODUCT.SESUNUSE ) ) THEN
            
                UT_TRACE.TRACE( 'Producto tiene solicitud de retiro voluntario pendiente, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

        	
            IF ( NVL( INSTR( RCPRODUCT.SESUINCL, '|' || NUEVENAPLI || '|' ), 0 ) > 0 ) THEN
            
        	    UT_TRACE.TRACE('Producto tiene inclusion, genera orden [' || RCPRODUCT.SESUINCL || ']', 7 );
        	    UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
        	    RETURN TRUE;
            
        	END IF;

            
            IF ( FBOVALCREDITLIMIT( RCPRODUCT.SESUNUSE ) ) THEN
            
                UT_TRACE.TRACE( 'El saldo pendiente del producto excede el l�mite de cr�dito, genera orden.', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN TRUE;
            
            END IF;

            
        	IF  ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBAL( RCPRODUCT.SESUNUSE ), 0 ) -
                  ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETCLAIMVALUE( RCPRODUCT.SESUNUSE ), 0 )  +
                    NVL( PR_BOSUSPENDCRITERIONS.FNUGETNONAPPLIEDPAY( RCPRODUCT.SESUNUSE ), 0 )
                  ) <= 0
            ) THEN
        	
                UT_TRACE.TRACE( 'Producto tiene valor en reclamo mayor o igual al saldo saldo pendiente, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
        	
        	END IF;

            
            PKBCDEPENDINGPRODUCT.GETDEPENDINGPRODUCTSCLAIMVALUE
            (
                RCPRODUCT.SESUNUSE,
                NUVALORRECLAMO,
                NURECLPAGNOABO
            );

            
        	IF ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBAL( RCPRODUCT.SESUNUSE ), 0 ) -
                 ( NUVALORRECLAMO + NURECLPAGNOABO ) <= 0
               )
            THEN
        	
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
        	
        	END IF;

            
            IF ( NVL( INSTR( RCPRODUCT.SESUEXCL, '|' || NUEVENAPLI || '|' ), 0 ) > 0 ) THEN
        	
                UT_TRACE.TRACE( 'Producto tiene exclusi�n, no genera orden [' || RCPRODUCT.SESUEXCL || ']', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
        	
        	END IF;

            
            IF ( RCPRODUCT.SESUROGA = PKWARRANTYMGR.CSBPROPIETARIO ) THEN
            
                UT_TRACE.TRACE( 'Producto es propietario, no genera orden ', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
        	END IF;
        	
        	
            NUCUENSALDSERV := PKBOEXPIREDACCOUNTS.FNUPERIODSWITHEXPACCOUNTS( RCPRODUCT.SESUNUSE );

            UT_TRACE.TRACE( 'Valida el n�mero de per�odos vencidos del producto, Per�odos vencidos producto ['
                           || NUCUENSALDSERV || '] -> Per�odos vencidos para suspensi�n [' || NUCUENSALD || ']', 7 );

            
            IF ( NUCUENSALDSERV < NUCUENSALD ) THEN
            
                UT_TRACE.TRACE( 'N�mero de per�odos vencidos del producto es menor al n�mero de per�odos para suspensi�n, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

            
            IF ( RCTIPOCLIE.VALID_FOR_DISCONNECT NOT IN ( PKCONSTANTE.SI, CSBDESCONEXION ) ) THEN
            
                UT_TRACE.TRACE( 'Tipo de cliente no es v�lido para suspensi�n, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

            
            IF ( PKSUSPENTERMSFORBILLMGR.FNUHASTERMFORSUSP
                 (
                     RCPRODUCT.SESUSUSC,
                     RCPRODUCT.SESUNUSE
                 ) = CNUTIENE
            ) THEN
            
                UT_TRACE.TRACE( 'Producto tiene plazo vigente para suspensi�n, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

            
            IF ( NULIMITE_DE_USO >= PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBALNOTCURR( RCPRODUCT.SESUNUSE ) ) THEN
            
                UT_TRACE.TRACE( 'Saldo pendiente del producto es menor o igual al l�mite de uso para suspensi�n, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;
            
            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
            RETURN TRUE;

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract.fblProcessServsusc]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;

        

        PROCEDURE PROCESSSERVICES
        IS
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.SuspOrderByContract.ProcessServices] Producto [' || RCPRODUCT.SESUNUSE || ']', 6 );

        	IF ( NOT FBLPROCESSSERVSUSC ) THEN
        	
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.ProcessServices]', 6 );
                RETURN;
            
        	END IF;

            UT_TRACE.TRACE( 'Valida si tiene inclusiones', 7 );
            
            IF ( NVL( INSTR( RCPRODUCT.SESUINCL, '|' || NUEVENAPLI || '|' ), 0 ) = CNUNOTIENE ) THEN
            
                
                IF ( PKSUSPCONNSERVICEMGR.FBLVALSUSPENSIONDAYS
                     (
                         RCPRODUCT.SESUNUSE,
                	     NUDIASCORT,
                         RCPRODUCT.SESUFECO,
                         NUCUENSALD
                     )
                ) THEN
                
                    UT_TRACE.TRACE( 'Realiza validaciones adicionales.', 7 );
                    
                    PKSUSPCONNSERVICEMGR.EXECUTEADDVALRULE
                    (
                        RCPRODUCT.SESUSERV,
                        NUEVENAPLI
                    );
                
                END IF;
            
            END IF;

            BLISVALID := TRUE;

            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.ProcessServices]', 6 );

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract.ProcessServices]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract.ProcessServices]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;
        
        
        
        PROCEDURE PROCESSCOVEREDPRODS
        IS
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.SuspOrderByContract.ProcessCoveredProds]', 6 );

            
            IF ( BOISSPONSORPROD ) THEN
            
                UT_TRACE.TRACE( 'El producto [' || TO_CHAR( RCPRODUCT.SESUNUSE ) ||
                     '] es amparador en una relaci�n comercial, se genera orden para productos amparados', 7 );

                
                NUCOVPRODSIDX := TBCOMMRELDETAILS.FIRST;

                LOOP
                
                    
                    EXIT WHEN NUCOVPRODSIDX IS NULL;

                    
                    
                    RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( TBCOMMRELDETAILS( NUCOVPRODSIDX ).COMM_RELATION_ID );

                    UT_TRACE.TRACE( 'Producto amparado [' || TO_CHAR( TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID ) || ']', 8 );
                    UT_TRACE.TRACE( 'Flag de suspensi�n de producto amparado al suspender producto amparador [' || RCCOMMRELATIONTYPE.SPONSOR_SUSP_COVERED || ']', 8 );

                    
                    
                    
                    IF ( RCCOMMRELATIONTYPE.SPONSOR_SUSP_COVERED = CC_BOCONSTANTS.CSBSI ) THEN
                    
                        
                        
                        
                        TBCOVEREDPRODS( NUCOVPRODSIDX ) := PKTBLSERVSUSC.FRCGETRECORD
                        (
                            TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID
                        );
                    
                    END IF;

                    
                    NUCOVPRODSIDX := TBCOMMRELDETAILS.NEXT( NUCOVPRODSIDX );
                
                END LOOP;

                
                GENORDERFORCOVEREDPRODS( CSBDESCONEXION, TBCOVEREDPRODS, NUEVENAPLI );
            
            END IF;

            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract.ProcessCoveredProds]', 6 );

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract.ProcessCoveredProds]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract.ProcessCoveredProds]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;

    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.SuspOrderByContract] Suscripci�n [' || NUCURRSUBSCRIBER || ']', 5 );

        
        GETPARAMETERS;

        NULASTPRODUCT := 0;

        LOOP
        
            
            PKBCSERVSUSC.GETPRODSRANGEBYCONT
            (
                NUCURRSUBSCRIBER,
                NULASTPRODUCT,
                BLMOREPRODS,
                TBPRODUCTS,
                TBCYCLES,
                TBINSTALLDATE,
                TBWITHDRAWDATE
            );
            
            NUIDX := TBPRODUCTS.FIRST;

            
            LOOP
            
                
                EXIT WHEN NUIDX IS NULL;

                
                TBRCPRODUCTS( NUIDXFILL ) := PKTBLSERVSUSC.FRCGETRECORD( TBPRODUCTS( NUIDX ) );

                
                IF ( NOT BLISVALID ) THEN
                
                    
                    GETDATA;

                    
                    PROCESSSERVICES;
                
                END IF;

                
                NUIDXFILL := NUIDXFILL + 1;
                
                
                NUIDX := TBPRODUCTS.NEXT( NUIDX );
            
            END LOOP;

            
            EXIT WHEN ( TBPRODUCTS.COUNT < PKBCSERVSUSC.CNUREGISTERQUANTITY );

            
            NULASTPRODUCT := TBPRODUCTS( TBPRODUCTS.LAST );
        
        END LOOP;

        
        IF ( NOT BLISVALID ) THEN
        
            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract]', 5 );
            RETURN;
        
        END IF;

        NUIDX := TBRCPRODUCTS.FIRST;

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            
            RCPRODUCT := TBRCPRODUCTS( NUIDX );

            
            GETCOMMERCIALRELATIONS;

            
            IF ( BOISCOVEREDPROD ) THEN
            
                UT_TRACE.TRACE( 'El producto [' || TO_CHAR( RCPRODUCT.SESUNUSE ) || '] se encuentra amparado en una relaci�n comercial', 6 );
                
                
                RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( RCCOMMRELDETAIL.COMM_RELATION_ID );
            
            END IF;

            
            IF ( RCPRODUCT.SESUESCO <> NUESTCORTEINACTIVE AND
                 NOT ( BOISCOVEREDPROD AND RCCOMMRELATIONTYPE.INDIV_COVERED_SUSP = CC_BOCONSTANTS.CSBNO ) AND
                 NVL( RCPRODUCT.SESUROGA, PKCONSTANTE.NULLSB ) <> PKWARRANTYMGR.CSBPROPIETARIO AND
                 NOT PKSUSPCONNSERVICEMGR.FBLEXISTORDER ( -1, 
                                                          -1, 
                                                          RCPRODUCT.SESUNUSE,
                                                          CSBDESCONEXION )
            ) THEN
            
                NULINEA := NULINEA + 1;

                
                GC_BOSUSPREMRECONORD.SETPRODUCTID(RCPRODUCT.SESUNUSE);

                
                

                
                PKSUSPCONNSERVICEMGR.INIIDSUSPCONE;
                
                
                NUORDENUME := PKCONSTANTE.NULLNUM;

                
                NUCURRSUBSSERV := RCPRODUCT.SESUNUSE;

                
                NUCURRSERVICE := RCPRODUCT.SESUSERV;

                
                
                PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( FALSE );

                
                PKSUSPCONNSERVICEMGR.GETACTIVITYEXECDATA
                (
                    RCPRODUCT.SESUSERV,
                    NUEVENAPLI,
                    NURULEID,
            		NUORDERPROCESS
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERPROCESS( NUORDERPROCESS );

                
                BI_BOSUSPCONNWITHDRAW.GETORDERTYPEBYBILLSTATUS
                (
                    NUEVENAPLI,
                    NUORDERTYPE
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERTYPE( NUORDERTYPE );

                
                PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
                (
                    
                    
                    NUORDENUME,
                    NUREPONUME,
                    NUCAUSCODE,
                    CSBDESCONEXION,
                    SBSUCOOBSE,
                    NULINEA,
                    RCPRODUCT,
                    RCCONFESCO,
                    NUCURRCYCLE
                );

                
                
                
                IF ( NURULEID IS NOT NULL AND PKSUSPCONNSERVICEMGR.FNUGETIDSUSPCONE > 0 )
                THEN
                
                    
                    
                    PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( TRUE );

                    
                    GR_BOCONFIG_EXPRESSION.EXECUTE(NURULEID, ONUERRCODE, OSBERRMSG);
                
                END IF;
                
                
                PROCESSCOVEREDPRODS;
            
            END IF;

            
            NUIDX := TBRCPRODUCTS.NEXT( NUIDX );
        
        END LOOP;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.SuspOrderByContract]', 5 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract]', 5 );
        	RAISE;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.SuspOrderByContract]', 5 );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;

    


























































    
    PROCEDURE WITHDRAWORDERBYCONTRACT
    IS
        
        
        
        NUIDX                   BINARY_INTEGER;
        NUIDXFILL               BINARY_INTEGER := 1;
        BLISVALID               BOOLEAN := FALSE;
        BLMOREPRODS             BOOLEAN := TRUE;
        RCCONFESCO		        CONFESCO%ROWTYPE;
        RCCONFCOSE		        CONFCOSE%ROWTYPE;
        RCPRODUCT               SERVSUSC%ROWTYPE;
        NUCUENSALD		        CONFCOSE.COCSNCDX%TYPE;
        NUDIASCORT		        CONFESCO.COECDICO%TYPE;
        RCTIPOCLIE              DAGE_SUBSCRIBER_TYPE.STYGE_SUBSCRIBER_TYPE;
        NUCUENSALDSERV          PKBCSERVSUSC.STYSESUCUSA;
        NULASTPRODUCT           SERVSUSC.SESUNUSE%TYPE;
        TBPRODUCTS              PKTBLSERVSUSC.TYSESUNUSE;
        TBCYCLES                PKTBLSERVSUSC.TYSESUCICO;
        TBINSTALLDATE           PKTBLSERVSUSC.TYSESUFEIN;
        TBWITHDRAWDATE          PKTBLSERVSUSC.TYSESUFERE;
        TBRCPRODUCTS            TYTBPRODUCTS;
        
        
        ONUERRCODE              NUMBER;
        OSBERRMSG               VARCHAR2(2000);
        NURULEID                GE_ACT_PRODTYPE_STAT.RULE_ID%TYPE;
        NUORDERPROCESS          VARCHAR2(1);
        NUORDERTYPE             NUMBER;
        
        
        
        BOISSPONSORPROD         BOOLEAN := FALSE;

        
        
        BOISCOVEREDPROD         BOOLEAN := FALSE;

        
        
        TBCOMMRELDETAILS        DACC_DETAIL_COM_RELA.TYTBCC_DETAIL_COM_RELA;

        
        
        RCCOMMRELDETAIL         DACC_DETAIL_COM_RELA.STYCC_DETAIL_COM_RELA;
        RCNULLCOMMRELDETAIL     DACC_DETAIL_COM_RELA.STYCC_DETAIL_COM_RELA;

        
        
        RCCOMMRELATIONTYPE      DACC_RELATION_TYPE.STYCC_RELATION_TYPE;
        RCNULLCOMMRELATIONTYPE  DACC_RELATION_TYPE.STYCC_RELATION_TYPE;

        
        
        TBCOVEREDPRODS          PKBCSERVSUSC.TYTBPRODUCTS;

        
        NUCOVPRODSIDX           BINARY_INTEGER;
        
        
        

        PROCEDURE GETDATA
        IS
        
            NUCUSTTYPE      GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE;
            
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.WithdrawOrderByContract.GetData]', 6 );

            
            RCPRODUCT := TBRCPRODUCTS( NUIDXFILL );

            
            RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO
            (
                RCPRODUCT.SESUSERV,
                NUEVENAPLI
            );

            
            NUDIASCORT := RCCONFESCO.COECDICO;

            
            NUCUSTTYPE := DAGE_SUBSCRIBER.FNUGETSUBSCRIBER_TYPE_ID( NUCURRSUSCCLIE );

            
            RCTIPOCLIE := DAGE_SUBSCRIBER_TYPE.FRCGETRECORD( NUCUSTTYPE );

            
            PKSUSPCONNSERVICE.GETSTATUSCONFDATA
            (
                NUCUSTTYPE,
                RCPRODUCT.SESUPLFA,
                RCPRODUCT.SESUSERV,
                RCPRODUCT.SESUNUSE,
                RCCONFCOSE
            );

        	
            NUCUENSALD := RCCONFCOSE.COCSMNCR;

            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.GetData]', 6 );

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract.GetData]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract.GetData]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;

        
        
        PROCEDURE GETCOMMERCIALRELATIONS
        IS
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkChgStSusPaymentMgr.WithdrawOrderByContract.GetCommercialRelations]', 6 );

            
            BOISSPONSORPROD := FALSE;
            BOISCOVEREDPROD := FALSE;
            RCCOMMRELDETAIL := RCNULLCOMMRELDETAIL;
            RCCOMMRELATIONTYPE := RCNULLCOMMRELATIONTYPE;
            TBCOMMRELDETAILS.DELETE;
            TBCOVEREDPRODS.DELETE;
            NUCOVPRODSIDX := NULL;

            
            
            RCCOMMRELDETAIL := CC_BCRELACIONCOMERCIAL.FRCOBTDETPRODAMPARADO
            (
                RCPRODUCT.SESUNUSE,
                UT_DATE.FDTSYSDATE
            );

            IF ( RCCOMMRELDETAIL.DETAIL_COM_RELA_ID IS NOT NULL ) THEN
            
                
                
                BOISCOVEREDPROD := TRUE;
                BOISSPONSORPROD := FALSE;
            
            
            
            ELSE
            
                TBCOMMRELDETAILS := CC_BCRELACIONCOMERCIAL.FTBOBTDETPRODAMPARADOR
                (
                    RCPRODUCT.SESUNUSE,
                    UT_DATE.FDTSYSDATE
                );

                IF ( TBCOMMRELDETAILS.COUNT > 0 ) THEN
                
                    
                    
                    BOISCOVEREDPROD := FALSE;
                    BOISSPONSORPROD := TRUE;
                
                ELSE
                
                    
                    
                    BOISCOVEREDPROD := FALSE;
                    BOISSPONSORPROD := FALSE;
                
                END IF;
            
            END IF;

            UT_TRACE.TRACE( 'Fin: [pkChgStSusPaymentMgr.WithdrawOrderByContract.GetCommercialRelations]', 6 );

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkChgStSusPaymentMgr.WithdrawOrderByContract.GetCommercialRelations]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkChgStSusPaymentMgr.WithdrawOrderByContract.GetCommercialRelations]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;

        

        FUNCTION FBLPROCESSSERVSUSC
        RETURN BOOLEAN
        IS
        
            
            NUVALORRECLAMO          PKBCSERVSUSC.STYSESUVARE;

            
            
            NURECLPAGNOABO          PKBCSERVSUSC.STYSESUVRAP;
            
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );

            
            IF ( RCPRODUCT.SESUESCO = NUESTCORTEINACTIVE ) THEN
            
                UT_TRACE.TRACE( 'Producto tiene estado de corte inactivo, no genera orden [' || NUESTCORTEINACTIVE || ']', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

            
            IF ( PKSUSPCONNSERVICEMGR.FBLEXISTORDER( RCPRODUCT.SESUDEPA,
                                                     RCPRODUCT.SESULOCA,
                                                     RCPRODUCT.SESUNUSE,
                                                     CSBRETIRO )
            ) THEN
            
                UT_TRACE.TRACE( 'El producto tiene una orden de retiro pendiente de atender, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

            
            IF ( NVL( INSTR( RCPRODUCT.SESUINCL, '|' || TO_CHAR( NUEVENAPLI ) || '|' ), 0 ) > 0 ) THEN
        	
        	    UT_TRACE.TRACE( 'Producto tiene inclusion, genera orden [' || RCPRODUCT.SESUINCL || ']', 7 );
        	    UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
        	    RETURN TRUE;
        	
        	END IF;

            
            IF ( FBOVALCREDITLIMIT( RCPRODUCT.SESUNUSE ) ) THEN
            
                UT_TRACE.TRACE( 'El saldo pendiente del producto excede el l�mite de cr�dito, genera orden.', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
                RETURN TRUE;
            
            END IF;

            
        	IF  ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBAL( RCPRODUCT.SESUNUSE ), 0 ) -
                  ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETCLAIMVALUE( RCPRODUCT.SESUNUSE ), 0 )  +
                    NVL( PR_BOSUSPENDCRITERIONS.FNUGETNONAPPLIEDPAY( RCPRODUCT.SESUNUSE ), 0 )
                  ) <= 0
            ) THEN
        	
                UT_TRACE.TRACE( 'Producto tiene valor en reclamo mayor o igual al saldo saldo pendiente, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
        	
        	END IF;

            
            PKBCDEPENDINGPRODUCT.GETDEPENDINGPRODUCTSCLAIMVALUE
            (
                RCPRODUCT.SESUNUSE,
                NUVALORRECLAMO,
                NURECLPAGNOABO
            );

            
        	IF ( NVL( PR_BOSUSPENDCRITERIONS.FNUGETOUTSTANDBAL( RCPRODUCT.SESUNUSE ), 0 ) -
                 ( NUVALORRECLAMO + NURECLPAGNOABO ) <= 0
               )
            THEN
        	
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
        	
        	END IF;

            
            IF ( NVL( INSTR( RCPRODUCT.SESUEXCL, '|' || NUEVENAPLI || '|' ), 0 ) > 0 ) THEN
            
                UT_TRACE.TRACE( 'Producto tiene exclusi�n, no genera orden [' || RCPRODUCT.SESUEXCL || ']', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

        	
            IF ( RCPRODUCT.SESUROGA = PKWARRANTYMGR.CSBPROPIETARIO ) THEN
            
                UT_TRACE.TRACE( 'Producto es propietario, no genera orden ', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
        	END IF;

            
            NUCUENSALDSERV := PKBOEXPIREDACCOUNTS.FNUPERIODSWITHEXPACCOUNTS( RCPRODUCT.SESUNUSE );

            UT_TRACE.TRACE( 'Valida el n�mero de per�odos vencidos del producto, Per�odos vencidos producto ['
                           || NUCUENSALDSERV || '] -> Per�odos vencidos para retiro [' || NUCUENSALD || ']', 7 );

            
            IF ( NUCUENSALDSERV < NUCUENSALD ) THEN
            
                UT_TRACE.TRACE( 'N�mero de per�odos vencidos del producto es menor al n�mero de per�odos para retiro, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

            
            IF ( RCTIPOCLIE.VALID_FOR_DISCONNECT NOT IN ( PKCONSTANTE.SI, CSBTEMPORAL ) ) THEN
            
                UT_TRACE.TRACE( 'Tipo de cliente no es v�lido para retiro, no genera orden', 7 );
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
                RETURN FALSE;
            
            END IF;

            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
            RETURN TRUE;

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract.fblProcessServsusc]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;

        

        PROCEDURE PROCESSSERVICES
        IS
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.WithdrawOrderByContract.ProcessServices]', 6 );

        	IF ( NOT FBLPROCESSSERVSUSC ) THEN
        	
                UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.ProcessServices]', 6 );
                RETURN;
            
        	END IF;

            UT_TRACE.TRACE( 'Valida si tiene inclusiones', 7 );
            
            IF ( NVL( INSTR( RCPRODUCT.SESUINCL, '|' || TO_CHAR( NUEVENAPLI ) || '|' ), 0 ) = CNUNOTIENE ) THEN
            
                
                IF ( PKSUSPCONNSERVICEMGR.FBLVALSUSPENSIONDAYS( RCPRODUCT.SESUNUSE,
                                                                NUDIASCORT,
                                                                RCPRODUCT.SESUFECO,
                                                                NUCUENSALD ) )
                THEN
                
                    
                    UT_TRACE.TRACE( 'Realiza validaciones adicionales.', 7 );
                    PKSUSPCONNSERVICEMGR.EXECUTEADDVALRULE
                    (
                        RCPRODUCT.SESUSERV,
                        NUEVENAPLI
                    );
                
                END IF;
            
            END IF;

            BLISVALID := TRUE;

            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.ProcessServices]', 6 );

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract.ProcessServices]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract.ProcessServices]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;
        
        

        PROCEDURE PROCESSCOVEREDPRODS
        IS
        BEGIN
        
            UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.WithdrawOrderByContract.ProcessCoveredProds]', 6 );

            
            IF ( BOISSPONSORPROD ) THEN
            
                UT_TRACE.TRACE( 'El producto [' || TO_CHAR( RCPRODUCT.SESUNUSE ) ||
                     '] es amparador en una relaci�n comercial, se genera orden para productos amparados', 7 );

                
                NUCOVPRODSIDX := TBCOMMRELDETAILS.FIRST;

                LOOP
                
                    
                    EXIT WHEN NUCOVPRODSIDX IS NULL;

                    
                    
                    RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( TBCOMMRELDETAILS( NUCOVPRODSIDX ).COMM_RELATION_ID );

                    UT_TRACE.TRACE( 'Producto amparado [' || TO_CHAR( TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID ) || ']', 8 );
                    UT_TRACE.TRACE( 'Flag de retiro de producto amparado al retirar producto amparador [' || RCCOMMRELATIONTYPE.SPONSOR_RETI_COVERED || ']', 8 );

                    
                    
                    
                    IF ( RCCOMMRELATIONTYPE.SPONSOR_RETI_COVERED = CC_BOCONSTANTS.CSBSI ) THEN
                    
                        
                        
                        
                        TBCOVEREDPRODS( NUCOVPRODSIDX ) := PKTBLSERVSUSC.FRCGETRECORD
                        (
                            TBCOMMRELDETAILS( NUCOVPRODSIDX ).CV_PRODUCT_ID
                        );
                    
                    END IF;

                    
                    NUCOVPRODSIDX := TBCOMMRELDETAILS.NEXT( NUCOVPRODSIDX );
                
                END LOOP;

                
                GENORDERFORCOVEREDPRODS( CSBRETIRO, TBCOVEREDPRODS, NUEVENAPLI );
            
            END IF;

            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract.ProcessCoveredProds]', 6 );

        EXCEPTION

            WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract.ProcessCoveredProds]', 6 );
            	RAISE;

            WHEN OTHERS THEN
            	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract.ProcessCoveredProds]', 6 );
            	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
        
        END;

    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.WithdrawOrderByContract] Suscripci�n [' || NUCURRSUBSCRIBER || ']', 5 );

        
        GETPARAMETERS;

        NULASTPRODUCT := 0;

        LOOP
        
            
            PKBCSERVSUSC.GETPRODSRANGEBYCONT
            (
                NUCURRSUBSCRIBER,
                NULASTPRODUCT,
                BLMOREPRODS,
                TBPRODUCTS,
                TBCYCLES,
                TBINSTALLDATE,
                TBWITHDRAWDATE
            );
            
            NUIDX := TBPRODUCTS.FIRST;

            
            LOOP
            
                EXIT WHEN NUIDX IS NULL;

                
                TBRCPRODUCTS( NUIDXFILL ) := PKTBLSERVSUSC.FRCGETRECORD( TBPRODUCTS( NUIDX ) );

                
                IF ( NOT BLISVALID ) THEN
                
                    
                    GETDATA;

                    
                    PROCESSSERVICES;
                
                END IF;

                
                NUIDXFILL := NUIDXFILL + 1;
                
                
                NUIDX := TBPRODUCTS.NEXT( NUIDX );
            
            END LOOP;

            
            EXIT WHEN ( TBPRODUCTS.COUNT < PKBCSERVSUSC.CNUREGISTERQUANTITY );

            
            NULASTPRODUCT := TBPRODUCTS( TBPRODUCTS.LAST );
        
        END LOOP;

        
        IF ( NOT BLISVALID ) THEN
        
            UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract]', 5 );
            RETURN;
        
        END IF;

        NUIDX := TBRCPRODUCTS.FIRST;

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            
            RCPRODUCT := TBRCPRODUCTS( NUIDX );

            
            GETCOMMERCIALRELATIONS;

            
            IF ( BOISCOVEREDPROD ) THEN
            
                UT_TRACE.TRACE( 'El producto [' || TO_CHAR( RCPRODUCT.SESUNUSE ) || '] se encuentra amparado en una relaci�n comercial', 6 );
                
                
                RCCOMMRELATIONTYPE := CC_BORELACIONCOMERCIAL.FRCOBTTIPORELCOMERCIAL( RCCOMMRELDETAIL.COMM_RELATION_ID );
            
            END IF;

            
            IF ( RCPRODUCT.SESUESCO <> NUESTCORTEINACTIVE AND
                 NOT ( BOISCOVEREDPROD AND RCCOMMRELATIONTYPE.INDIV_COVERED_RETIRE = CC_BOCONSTANTS.CSBNO ) AND
                 NVL( RCPRODUCT.SESUROGA, PKCONSTANTE.NULLSB ) <> PKWARRANTYMGR.CSBPROPIETARIO AND
                 NOT PKSUSPCONNSERVICEMGR.FBLEXISTORDER( -1, 
                                                         -1, 
                                                         RCPRODUCT.SESUNUSE,
                                                         CSBRETIRO )
            ) THEN
            
                NULINEA := NULINEA + 1;

                
                GC_BOSUSPREMRECONORD.SETPRODUCTID(RCPRODUCT.SESUNUSE);

                
                

                
                PKSUSPCONNSERVICEMGR.INIIDSUSPCONE;
                
                
                NUORDENUME := PKCONSTANTE.NULLNUM;

                
                NUCURRSUBSSERV := RCPRODUCT.SESUNUSE;

                
                NUCURRSERVICE := RCPRODUCT.SESUSERV;

                
                
                PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( FALSE );

                
                PKSUSPCONNSERVICEMGR.GETACTIVITYEXECDATA
                (
                    RCPRODUCT.SESUSERV,
                    NUEVENAPLI,
                    NURULEID,
            		NUORDERPROCESS
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERPROCESS( NUORDERPROCESS );

                
                BI_BOSUSPCONNWITHDRAW.GETORDERTYPEBYBILLSTATUS
                (
                    NUEVENAPLI,
                    NUORDERTYPE
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERTYPE( NUORDERTYPE );

                
                PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
                (
                    
                    
                    NUORDENUME,
                    NUREPONUME,
                    NUCAUSCODE,
                    CSBRETIRO,
                    SBSUCOOBSE,
                    NULINEA,
                    RCPRODUCT,
                    RCCONFESCO,
                    NUCURRCYCLE
                );

                
                
                
                IF ( NURULEID IS NOT NULL AND PKSUSPCONNSERVICEMGR.FNUGETIDSUSPCONE > 0 )
                THEN
                
                    
                    
                    PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( TRUE );

                    
                    GR_BOCONFIG_EXPRESSION.EXECUTE(NURULEID, ONUERRCODE, OSBERRMSG);
                
                END IF;
                
                
                PROCESSCOVEREDPRODS;
            
            END IF;

            
            NUIDX := TBRCPRODUCTS.NEXT( NUIDX );
        
        END LOOP;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.WithdrawOrderByContract]', 5 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract]', 5 );
        	RAISE;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.WithdrawOrderByContract]', 5 );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
    

    





















    FUNCTION FBOHASPENDVOLWITHDRAW
    (
        INUPRODUCTID    IN      SERVSUSC.SESUNUSE%TYPE
    ) RETURN BOOLEAN
    IS

        
        
        BOPENDVOLWITHDRAW           BOOLEAN := FALSE;
        
        
        NUMOTIVEID                  MO_MOTIVE.MOTIVE_ID%TYPE;
        
        
        NUVOLUNWITHDRAWMOTITYPE     PS_MOTIVE_TYPE.MOTIVE_TYPE_ID%TYPE :=
            PS_BOMOTIVETYPE.FNUGETVOLUNWITHDRAWMOTITYPE;

    BEGIN
    
        PKERRORS.PUSH( 'pkSuspConnService.fbohasPendVolWithdraw' );

        
        IF ( MO_BCMOTIVE.CUMOTIVBYPRANDMOTTYLSTACT%ISOPEN ) THEN
          CLOSE MO_BCMOTIVE.CUMOTIVBYPRANDMOTTYLSTACT;
        END IF;

        
        
        OPEN MO_BCMOTIVE.CUMOTIVBYPRANDMOTTYLSTACT
        (
            INUPRODUCTID,
            TO_CHAR( NUVOLUNWITHDRAWMOTITYPE )
        );
        FETCH MO_BCMOTIVE.CUMOTIVBYPRANDMOTTYLSTACT INTO NUMOTIVEID;
        CLOSE MO_BCMOTIVE.CUMOTIVBYPRANDMOTTYLSTACT;

        
        IF ( NUMOTIVEID IS NOT NULL ) THEN
    	
            
            
            BOPENDVOLWITHDRAW := TRUE;
    	
        END IF;

        PKERRORS.POP;

        RETURN ( BOPENDVOLWITHDRAW );

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;


    


















































    PROCEDURE GENORDERFORCOVEREDPRODS
    (
        ISBORDERTYPE            IN      SUSPCONE.SUCOTIPO%TYPE,
        ITBPRODUCTS             IN      PKBCSERVSUSC.TYTBPRODUCTS,
        INUBILLINGSTATUSID      IN      ESTACORT.ESCOCODI%TYPE
    )
    IS

        
        RCPRODUCT           SERVSUSC%ROWTYPE;

        
        NUPRODSIDX          BINARY_INTEGER;

        
        
        RCCONFESCO          CONFESCO%ROWTYPE;
        
        
        
        RCMEMORYDATA        TYMEMORYVAR;

        
        ONUERRCODE          NUMBER;
        OSBERRMSG           VARCHAR2(2000);
        NURULEID            GE_ACT_PRODTYPE_STAT.RULE_ID%TYPE;
        NUORDERPROCESS      VARCHAR2(1);
        NUORDERTYPE         NUMBER;

    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.GenOrderForCoveredProds]', 6 );

        
        RCMEMORYDATA := FRCGETINSTANCEDATA;

        
        NUPRODSIDX := ITBPRODUCTS.FIRST;

        LOOP
        
            
            EXIT WHEN NUPRODSIDX IS NULL;

            
            RCPRODUCT := ITBPRODUCTS( NUPRODSIDX );
            
            
            RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO
            (
                RCPRODUCT.SESUSERV,
                INUBILLINGSTATUSID
            );

            
            IF ( NOT ( ISBORDERTYPE <> CSBCONEXION AND RCPRODUCT.SESUESCO = NUESTCORTEINACTIVE ) AND
                 NVL( RCPRODUCT.SESUROGA, PKCONSTANTE.NULLSB ) <> PKWARRANTYMGR.CSBPROPIETARIO AND
                 NOT PKSUSPCONNSERVICE.FBOHASPENDVOLWITHDRAW( RCPRODUCT.SESUNUSE ) AND
                 PKTBLRECAESCO.FBLEXIST( RCPRODUCT.SESUSERV,
                                         RCCONFESCO.COECCODI,
                                         RCPRODUCT.SESUESCO ) AND
                 NOT PKSUSPCONNSERVICEMGR.FBLEXISTORDER( RCPRODUCT.SESUDEPA,
                                                         RCPRODUCT.SESULOCA,
                                                         RCPRODUCT.SESUNUSE,
                                                         ISBORDERTYPE )
            ) THEN
            
                NULINEA := NULINEA + 1;

                
                GC_BOSUSPREMRECONORD.SETPRODUCTID(RCPRODUCT.SESUNUSE);

                
                

                
                PKSUSPCONNSERVICEMGR.INIIDSUSPCONE;
                
                
                NUORDENUME := PKCONSTANTE.NULLNUM;

                
                NUCURRSUBSSERV := RCPRODUCT.SESUNUSE;

                
                NUCURRSERVICE := RCPRODUCT.SESUSERV;

                
                
                PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( FALSE );

                
                PKSUSPCONNSERVICEMGR.GETACTIVITYEXECDATA
                (
                    NUCURRSERVICE,
                    INUBILLINGSTATUSID,
                    NURULEID,
            		NUORDERPROCESS
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERPROCESS( NUORDERPROCESS );

                
                BI_BOSUSPCONNWITHDRAW.GETORDERTYPEBYBILLSTATUS
                (
                    INUBILLINGSTATUSID,
                    NUORDERTYPE
                );

                
                PKSUSPCONNSERVICEMGR.SETORDERTYPE( NUORDERTYPE );

                
                PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE
                (
                    
                    
                    NUORDENUME,
                    NUREPONUME,
                    NUCAUSCODE,
                    ISBORDERTYPE,
                    SBSUCOOBSE,
                    NULINEA,
                    RCPRODUCT,
                    RCCONFESCO,
                    NULL
                );

                
                
                
                IF ( NURULEID IS NOT NULL AND PKSUSPCONNSERVICEMGR.FNUGETIDSUSPCONE > 0 )
                THEN
                
                    
                    
                    PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( TRUE );

                    
                    GR_BOCONFIG_EXPRESSION.EXECUTE(NURULEID, ONUERRCODE, OSBERRMSG);
                
                END IF;
            
            END IF;

            
            NUPRODSIDX := ITBPRODUCTS.NEXT( NUPRODSIDX );
        
        END LOOP;

        
        PKSUSPCONNSERVICEMGR.SETIDSUSPCONE( RCMEMORYDATA.NUIDSUSPCONE );
        PKSUSPCONNSERVICEMGR.SETORDERTYPE( RCMEMORYDATA.NUORDERTYPE );
        NUCURRSERVICE := RCMEMORYDATA.NUSERVICE;
        NUEVENAPLI := RCMEMORYDATA.NUEVENAPLI;
        NUCURRSUBSSERV := RCMEMORYDATA.NUNUMESERV;
        NUORDENUME := RCMEMORYDATA.NUORDENUME;
        NUNUMETHREAD := RCMEMORYDATA.NUNUMETHREAD;
        SBIDTRACKING := RCMEMORYDATA.SBIDTRACKING;
        NUINCONUME := RCMEMORYDATA.NUINCONUME;
        NUCURRSUBSCRIBER := RCMEMORYDATA.NUSUBSCRIBER;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.GenOrderForCoveredProds]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.GenOrderForCoveredProds]', 6 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.GenOrderForCoveredProds]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;

    




















    PROCEDURE CONNECTORDERBYSUBSC
    IS
        
        
        
        NUIDX           BINARY_INTEGER;
        NUIDXFILL       BINARY_INTEGER := 1;
        BOMOREPRODS     BOOLEAN := TRUE;
        RCCONFESCO		CONFESCO%ROWTYPE;
        RCPRODUCT       SERVSUSC%ROWTYPE;
        RCSUBSCRIPTION  SUSCRIPC%ROWTYPE;
        NUBILLPLAN      SERVSUSC.SESUPLFA%TYPE;
        NULASTPRODUCT   SERVSUSC.SESUNUSE%TYPE := 0;
        DTWITHDRAWDATE  SERVSUSC.SESUFERE%TYPE := UT_DATE.FDTMAXDATE;
        NUBALANCESUBSC  CUENCOBR.CUCOSACU%TYPE := 0;
        TBPRODUCTS      PKTBLSERVSUSC.TYSESUNUSE;
        TBCYCLES        PKTBLSERVSUSC.TYSESUCICO;
        TBINSTALLDATE   PKTBLSERVSUSC.TYSESUFEIN;
        TBWITHDRAWDATE  PKTBLSERVSUSC.TYSESUFERE;
        TBRCPRODUCTS    TYTBPRODUCTS;
        
        
        
        PROCEDURE GETDATA
        IS
            NUCUSTTYPE  GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE;
            NUUSER      FUNCIONA.FUNCUSBA%TYPE;
            RCFUNC      FUNCIONA%ROWTYPE;
        BEGIN

            UT_TRACE.TRACE( 'pkSuspConnService.ConnectOrderBySubsc.GetData', 16 );

            
            RCPRODUCT := TBRCPRODUCTS( NUIDX );

            
            RCCONFESCO := PKSUSPCONNSERVICEMGR.FRCGETCONFESCO( RCPRODUCT.SESUSERV,
                                						       NUEVENAPLI );

            
            NUCUSTTYPE := DAGE_SUBSCRIBER.FNUGETSUBSCRIBER_TYPE_ID( NUCURRSUSCCLIE );

            
            NUORDER_NUMBER := NUORDENUME;

            NUUSER := PKGENERALSERVICES.FSBGETUSERNAME;
            RCFUNC := PKBCFUNCIONA.FRCFUNCIONA( NUUSER );
            PKGENERALSERVICES.SETSERVICEREP( RCFUNC.FUNCCODI );

            UT_TRACE.TRACE( 'Fin pkSuspConnService.ConnectOrderBySubsc.GetData', 16 );

        EXCEPTION
            WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END GETDATA;
        
        FUNCTION FBLPROCESSSERVSUSC
        RETURN BOOLEAN
        IS
        BEGIN

            UT_TRACE.TRACE( 'pkSuspConnService.ConnectOrderBySubsc.fblProcessServsusc', 16 );

            
            IF ( NOT PKTBLRECAESCO.FBLEXIST( RCPRODUCT.SESUSERV,
                                             RCCONFESCO.COECCODI,
                                             RCPRODUCT.SESUESCO ) )
            THEN

                UT_TRACE.TRACE( 'No existe transici�n de estados para el producto ['||RCPRODUCT.SESUNUSE||']', 3 );
                RETURN FALSE;

            END IF;

            
            IF ( NVL( INSTR( RCPRODUCT.SESUINCL, '|' || NUEVENAPLI || '|' ), 0 ) = CNUTIENE ) THEN

                UT_TRACE.TRACE( 'Producto tiene inclusi�n', 3 );
                RETURN FALSE;

        	END IF;

            
            IF ( RCPRODUCT.SESUCLPR = PKSPONSOREDACCOUNTMGR.CSBSPONSOR ) THEN

                UT_TRACE.TRACE( 'Producto es sponsor', 3 );
                RETURN FALSE;

            END IF;

        	
            IF ( RCPRODUCT.SESUROGA = PKWARRANTYMGR.CSBPROPIETARIO ) THEN

                UT_TRACE.TRACE( 'Producto es propietario', 3 );
                RETURN FALSE;

        	END IF;

            
            IF ( NOT PKSUSPCONNSERVICEMGR.FBLVALSUSPENSIONDAYS (
                                                            RCPRODUCT.SESUNUSE,
                                                            RCCONFESCO.COECDICO,
                                                            RCPRODUCT.SESUFECO ) )
            THEN

                UT_TRACE.TRACE( 'El producto no cumple con los d�as m�nimos en el estado de corte actual, no genera orden', 7 );
                RETURN FALSE;

            END IF;

            
            IF ( PKSUSPCONNSERVICEMGR.FBLEXISTORDER( PKCONSTANTE.NULLNUM,
                                                     PKCONSTANTE.NULLNUM,
                                                     RCPRODUCT.SESUNUSE,
                                                     CSBCONEXION ) )
            THEN

                UT_TRACE.TRACE( 'Producto ya tiene orden', 3 );
                RETURN FALSE;

            END IF;

            UT_TRACE.TRACE( 'Producto es v�lido para reconexi�n', 3 );
            RETURN TRUE;

        EXCEPTION
            WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FBLPROCESSSERVSUSC;
        
        PROCEDURE PROCESSSERVICES
        IS
            NURULEID        GE_ACT_PRODTYPE_STAT.RULE_ID%TYPE;
            ONUERRCODE      NUMBER;
            OSBERRMSG       VARCHAR2(2000);
            NUORDERPROCESS  VARCHAR2(1);
            NUORDERTYPE     NUMBER;
        BEGIN

            UT_TRACE.TRACE('pkSuspConnService.ConnectOrderBySubsc.ProcessServices [Nuse] ['||RCPRODUCT.SESUNUSE||']',5);

            
        	IF ( NOT FBLPROCESSSERVSUSC ) THEN
                RETURN;
        	END IF;

            UT_TRACE.TRACE('Realiza validaciones adicionales.',10);

            
            PKSUSPCONNSERVICEMGR.EXECUTEADDVALRULE( RCPRODUCT.SESUSERV,
                                                    NUEVENAPLI );

            NULINEA := NULINEA + 1;

            
            GC_BOSUSPREMRECONORD.SETPRODUCTID(RCPRODUCT.SESUNUSE);

            
            

            
            PKSUSPCONNSERVICEMGR.INIIDSUSPCONE;

            
            NUCURRSUBSSERV := RCPRODUCT.SESUNUSE;

            
            NUCURRSERVICE := RCPRODUCT.SESUSERV;

            
            
            PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( FALSE );

            
            PKSUSPCONNSERVICEMGR.GETACTIVITYEXECDATA( RCPRODUCT.SESUSERV,
                                                      NUEVENAPLI,
                                                      NURULEID,
                                                      NUORDERPROCESS );

            
            PKSUSPCONNSERVICEMGR.SETORDERPROCESS( NUORDERPROCESS );

            
            BI_BOSUSPCONNWITHDRAW.GETORDERTYPEBYBILLSTATUS( NUEVENAPLI,
                                                            NUORDERTYPE );

            
            PKSUSPCONNSERVICEMGR.SETORDERTYPE( NUORDERTYPE );

            
            PKSUSPCONNSERVICEMGR.ORDERINDIVSUSPECONNE( 
                                                       
                                                       NUORDENUME,
                                                       NUREPONUME,
                                                       NUCAUSCODE,
                                                       CSBCONEXION,
                                                       SBSUCOOBSE,
                                                       NULINEA,
                                                       RCPRODUCT,
                                                       RCCONFESCO,
                                                       NUCURRCYCLE );

            
            
            
            IF ( NURULEID IS NOT NULL AND PKSUSPCONNSERVICEMGR.FNUGETIDSUSPCONE > 0 )
            THEN
            
                
                
                PKSUSPCONNSERVICEMGR.ENABLEEXEACTIVITYRULE( TRUE );

                
                GR_BOCONFIG_EXPRESSION.EXECUTE(NURULEID, ONUERRCODE, OSBERRMSG);
            
            END IF;

            UT_TRACE.TRACE('Fin pkSuspConnService.ConnectOrderBySubsc.ProcessServices',5);

        EXCEPTION
            WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
                ERRORS.INITIALIZE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                ERRORS.INITIALIZE;
        END PROCESSSERVICES;
        
    BEGIN

        UT_TRACE.TRACE( 'pkSuspConnService.ConnectOrderBySubsc', 15 );

        LOOP

            
            PKBCSERVSUSC.GETPRODSRANGEBYCONT( NUCURRSUBSCRIBER,
                                              NULASTPRODUCT,
                                              BOMOREPRODS,
                                              TBPRODUCTS,
                                              TBCYCLES,
                                              TBINSTALLDATE,
                                              TBWITHDRAWDATE );
            NUIDX := TBPRODUCTS.FIRST;

            
            WHILE ( NUIDX IS NOT NULL ) LOOP

                
                TBRCPRODUCTS(NUIDXFILL) := PKTBLSERVSUSC.FRCGETRECORD(
                                                            TBPRODUCTS(NUIDX),
                                                            PKCONSTANTE.NOCACHE );

                
                IF ( TBRCPRODUCTS( NUIDXFILL ).SESUFECO < DTWITHDRAWDATE ) THEN
                    DTWITHDRAWDATE := TBRCPRODUCTS( NUIDXFILL ).SESUFECO;
                END IF;

                
                NUBILLPLAN := TBRCPRODUCTS( NUIDX ).SESUPLFA;

                NUIDXFILL := NUIDXFILL + 1;

                NUIDX := TBPRODUCTS.NEXT( NUIDX );

            END LOOP;

            EXIT WHEN ( TBPRODUCTS.COUNT < PKBCSERVSUSC.CNUREGISTERQUANTITY );

            NULASTPRODUCT := TBPRODUCTS( TBPRODUCTS.LAST );

        END LOOP;

        
        RCSUBSCRIPTION := PKTBLSUSCRIPC.FRCGETRECORD( NUCURRSUBSCRIBER );
        
        NUBALANCESUBSC := PKSUSCRIPCINFO.FNUGETOUTSTANDBAL(RCSUBSCRIPTION.SUSCCODI);

        
        IF ( NOT PKCHGSTSUSPAYMENTMGR.FBLISCONTRACTBALANCEOK(
                                                        RCSUBSCRIPTION,
                                                        NUBALANCESUBSC,
                                                        NUBILLPLAN,
                                                        DTWITHDRAWDATE ) )
        THEN

            UT_TRACE.TRACE( 'La suscripci�n no es v�lida para reconexi�n', 15 );
            RETURN;

        END IF;

        NUIDX := TBRCPRODUCTS.FIRST;

        
        WHILE ( NUIDX IS NOT NULL ) LOOP

            
            GETDATA;

            
            PROCESSSERVICES;

            NUIDX := TBRCPRODUCTS.NEXT( NUIDX );

        END LOOP;

        UT_TRACE.TRACE( 'Fin pkSuspConnService.ConnectOrderBySubsc', 15 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CONNECTORDERBYSUBSC;
    
END PKSUSPCONNSERVICE;