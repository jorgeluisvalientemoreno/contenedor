PACKAGE BODY OR_BOProcessOrder
IS






































































































































	
    CSBVERSION    CONSTANT VARCHAR2(20) := 'SAO410225';
    
    CNUERR_901723 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 901723;
    
    CNUERR_18602  CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 18602;
    
    CNUERR_18603  CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 18603;
    
    CNUERR_3604  CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 3604;
    
    CNUERR_17470  CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 17470;
    
    CNUERR_8182 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 8182;
    
    CNUERR_122062 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 122062;
    
    
    CSBOR_INST_ACTIVITIES GE_PARAMETER.PARAMETER_ID%TYPE := 'OR_INST_ACTIVITIES';


    FUNCTION FSBGETORDERRANGEDESC(INUORDERID IN OR_ORDER.ORDER_ID%TYPE)
    RETURN VARCHAR2
    IS
        RCSCHEDDISPATCH     DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        RCSCHEDAVAILABLE    DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        SBRANGEDESCRIPTION  OR_ORDER_STAT_CHANGE.RANGE_DESCRIPTION%TYPE;
    BEGIN
        SBRANGEDESCRIPTION := NULL;

        IF (NOT OR_BCDISPATCH.FBLGETDISPATCHBYORDER(INUORDERID, RCSCHEDDISPATCH)) THEN
            RETURN NULL;
        END IF;

        
        OR_BCSCHED.GETAVAILABLEBYUDX(RCSCHEDDISPATCH.SCHEDULER_ID,
                                     RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                                     RCSCHEDDISPATCH.OPERATING_ZONE_ID,
                                     RCSCHEDDISPATCH.DATE_,
                                     RCSCHEDAVAILABLE);

        
        SBRANGEDESCRIPTION := OR_BOSCHED.FSBGETAVAILRANGEDESC(
            RCSCHEDDISPATCH.ORDER_ID,
            RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
            RCSCHEDDISPATCH.DATE_,
            RCSCHEDDISPATCH.OPERATING_ZONE_ID,
            RCSCHEDAVAILABLE.HOUR_ENTRANCE,
            RCSCHEDAVAILABLE.HOUR_EXIT,
            RCSCHEDDISPATCH.HOUR_START,
            RCSCHEDDISPATCH.HOUR_END
        );

        RETURN SBRANGEDESCRIPTION;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END FSBGETORDERRANGEDESC;


    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    
















    PROCEDURE VALIDATESTATUS
    (
        INUSTATUS   IN OR_ORDER.ORDER_STATUS_ID%TYPE,
        IRCORDER    IN DAOR_ORDER.STYOR_ORDER,
        INUACTIONID IN OR_TRANSITION.ACTION_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOProcessOrder.validateStatus: ',15);

        IF INUSTATUS <> IRCORDER.ORDER_STATUS_ID THEN
            UT_TRACE.TRACE('LA ORDEN NO ES VALIDA... ',15);
            GE_BOERRORS.SETERRORCODEARGUMENT(OR_BOCONSTANTS.CNUERR_121742,
                INUACTIONID || ' - ' || GE_BOBASICDATASERVICES.FSBGETDESCACTION(INUACTIONID)
                    || '|' || IRCORDER.ORDER_ID
                    || '|' || IRCORDER.ORDER_STATUS_ID || ' - ' || OR_BOBASICDATASERVICES.FSBGETDESCORDERSTATUS(IRCORDER.ORDER_STATUS_ID)
            );
        END IF;
        UT_TRACE.TRACE('FIN OR_BOProcessOrder.validateStatus: OK ',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END VALIDATESTATUS;
    
    
    PROCEDURE UPDBASICDATA
    (
        IORCORDER       IN OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        INUOPERATSECTOR IN OR_ORDER.OPERATING_SECTOR_ID%TYPE,
        INUNUMERATOR    IN OR_ORDER.NUMERATOR_ID%TYPE
    )
    IS
    BEGIN
        
        IORCORDER.OPERATING_SECTOR_ID := NVL(INUOPERATSECTOR, IORCORDER.OPERATING_SECTOR_ID);
        
        IF INUNUMERATOR IS NOT NULL
            AND INUNUMERATOR <> IORCORDER.NUMERATOR_ID
        THEN
            IORCORDER.NUMERATOR_ID  := INUNUMERATOR;
            IORCORDER.SEQUENCE      := NULL;
        END IF;

        
        OR_BOORDEROPERATSECTOR.SETOPERATINGSECTOR(IORCORDER);
        OR_BOORDERNUMERATOR.SETORDERNUMBER(IORCORDER);
        
        
        DAOR_ORDER.UPDRECORD(IORCORDER);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDBASICDATA;
    
    






















    PROCEDURE PROGRAM
    (
        IORCORDER           IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        IDTARRANGED_HOUR    IN  DATE,
        INUCOMMENTTYPE      IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
       INUNEWOPERATINGUNITID   IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    )
    IS
        NUESTADOINI             OR_ORDER.ORDER_STATUS_ID%TYPE;
        RCPROGRAMING        DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        RCSCHEDAVAILABLE    DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        SBRANGEDESCRIPTION  OR_ORDER_STAT_CHANGE.RANGE_DESCRIPTION%TYPE;
        
    BEGIN
      
       UT_TRACE.TRACE('OR_BOProcessOrder.program');
        VALIDATESTATUS(OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED, IORCORDER,
            OR_BOCONSTANTS.CNUORDER_ACTION_PROGRA);
    
        IORCORDER.REPROGRAM_LAST_DATE    := UT_DATE.FDTSYSDATE;
        IORCORDER.EXEC_ESTIMATE_DATE    := IDTARRANGED_HOUR;
        IORCORDER.ARRANGED_HOUR             := IDTARRANGED_HOUR;
    
        
        NUESTADOINI := IORCORDER.ORDER_STATUS_ID;
        
        SBRANGEDESCRIPTION := NULL;
        
        IF (OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(IORCORDER.ORDER_ID, RCPROGRAMING)) THEN
            RCSCHEDAVAILABLE := DAOR_SCHED_AVAILABLE.FRCGETRECORD(RCPROGRAMING.SCHED_AVAILABLE_ID);

            
            SBRANGEDESCRIPTION := OR_BOSCHED.FSBGETAVAILRANGEDESC(
                RCPROGRAMING.ORDER_ID,
                RCPROGRAMING.PROGRAMING_CLASS_ID,
                RCSCHEDAVAILABLE.DATE_,
                RCSCHEDAVAILABLE.OPERATING_ZONE_ID,
                RCSCHEDAVAILABLE.HOUR_ENTRANCE,
                RCSCHEDAVAILABLE.HOUR_EXIT,
                RCPROGRAMING.HOUR_START,
                RCPROGRAMING.HOUR_END
            );
        END IF;

        OR_BOORDERTRANSITION.CHANGESTATUS
        (
        IORCORDER,
        OR_BOCONSTANTS.CNUORDER_ACTION_PROGRA,
        OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED,
        TRUE,
        IORCORDER.EXEC_ESTIMATE_DATE,
        SBRANGEDESCRIPTION,
        IORCORDER.PROGRAMING_CLASS_ID,
        IORCORDER.OPERATING_UNIT_ID,
        INUNEWOPERATINGUNITID,
        INUCOMMENTTYPE,
        NULL
        );

        DAOR_ORDER.UPDRECORD(IORCORDER);
        
        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER,NUESTADOINI);
        
        
        IF NOT (INUCOMMENTTYPE IS NULL) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END PROGRAM;
    
    
    























    PROCEDURE ASSIGNMOBILE
    (
        INUORDERID              IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERATUNIT           IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTEXECDATE             IN  OR_ORDER.EXEC_ESTIMATE_DATE%TYPE,
        ISBASSIGNEDWITH         IN  OR_ORDER.ASSIGNED_WITH%TYPE,
        ONUSTATUSID             OUT OR_ORDER.ORDER_STATUS_ID%TYPE
    )
    IS
        RCORDER     DAOR_ORDER.STYOR_ORDER;
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOProcessOrder.assignMobile: ',15);
        
        
        DAOR_ORDER.LOCKBYPK(INUORDERID,
                            RCORDER);

        IF (RCORDER.ORDER_STATUS_ID NOT IN (OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED,
                                            OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED)) THEN
            ONUSTATUSID := RCORDER.ORDER_STATUS_ID;
            RETURN;
        END IF;

        
        RCORDER.OPERATING_UNIT_ID       := INUOPERATUNIT;
        RCORDER.EXEC_ESTIMATE_DATE      := IDTEXECDATE;
        RCORDER.ARRANGED_HOUR           := IDTEXECDATE;
        RCORDER.ASSIGNED_DATE           := UT_DATE.FDTSYSDATE;

        OR_BOORDERTRANSITION.CHANGESTATUSMOBILE
        (
          RCORDER,
          RCORDER.EXEC_ESTIMATE_DATE,
          'CAMBIO DESDE MOVIL',
          OR_BOCONSTANTS.CNUPROGCLASSUNIT,
          RCORDER.OPERATING_UNIT_ID
        );

        
        OR_BCLOADDATA.UPDINFOORDER(RCORDER.ORDER_ID,
                                   RCORDER.OPERATING_UNIT_ID,
                                   RCORDER.EXEC_ESTIMATE_DATE,
                                   RCORDER.ARRANGED_HOUR,
                                   RCORDER.ORDER_STATUS_ID,
                                   RCORDER.ASSIGNED_DATE,
                                   ISBASSIGNEDWITH);

        
        OR_BCORDERACTIVITIES.UPDOPERATINGUNITSECTOR(RCORDER);
        
        ONUSTATUSID := RCORDER.ORDER_STATUS_ID;
        COMMIT;
        UT_TRACE.TRACE('FIN OR_BOProcessOrder.assignMobile: ',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNMOBILE;
    
    



















































    PROCEDURE ASSIGN
    (
        IORCORDER               IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        INUOPERATUNIT           IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTEXECDATE             IN  DATE,
        IBLVALIDATEOPERATUNIT   IN  BOOLEAN DEFAULT FALSE,
        IBLESTIMATEDATE         IN  BOOLEAN DEFAULT FALSE,
        INUCOMMENTTYPE          IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT  NULL,
        ISBCOMMENT              IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        IBLSHOWERROR            IN  BOOLEAN DEFAULT FALSE ,
        RCSCHEDDISPATCH         IN  DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH DEFAULT NULL,
        IBLINSERTCOMMENT        IN  BOOLEAN DEFAULT TRUE,
        IDTCHANGEDATE           IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL,
        INUSCHEDITINERARYID     IN OR_SCHED_ITINERARY.SCHED_ITINERARY_ID%TYPE DEFAULT NULL
    )
    IS
        CNUERROR_902199         CONSTANT NUMBER := 902199;
        NUESTADOINI             OR_ORDER.ORDER_STATUS_ID%TYPE;
        RCSCHEDAVAILABLE        DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        SBRANGEDESCRIPTION      OR_ORDER_STAT_CHANGE.RANGE_DESCRIPTION%TYPE;
        
        NUCONTRACTORID          GE_CONTRATO.ID_CONTRATISTA%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOProcessOrder.assign: ',15);

        VALIDATESTATUS(OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED, IORCORDER,
            OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN);

        
        IF (INUOPERATUNIT IS NOT NULL AND DAOR_OPERATING_UNIT.FSBGETASSIGN_TYPE(INUOPERATUNIT) = OR_BOCONSTANTS.CNUASSIGNBYCAPACITY) THEN
            IF (OR_BCOPERATINGUNIT.FNUISPOSTOASSORDTOUNIT(IORCORDER.ORDER_ID, INUOPERATUNIT) = GE_BOCONSTANTS.CSBNO ) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_902199,INUOPERATUNIT||'-'||DAOR_OPERATING_UNIT.FSBGETNAME(INUOPERATUNIT));
            END IF;
        END IF;
        
        
        IORCORDER.OPERATING_UNIT_ID    := NVL(INUOPERATUNIT, IORCORDER.OPERATING_UNIT_ID);
        IORCORDER.EXEC_ESTIMATE_DATE   := NVL(IDTEXECDATE, IORCORDER.ARRANGED_HOUR);
        IORCORDER.ARRANGED_HOUR        := NVL(IDTEXECDATE, IORCORDER.ARRANGED_HOUR);
        IORCORDER.SCHED_ITINERARY_ID   := INUSCHEDITINERARYID;
        
        IF IBLESTIMATEDATE THEN
            IORCORDER.EXEC_ESTIMATE_DATE  := NULL;
        ELSE
            IORCORDER.EXEC_ESTIMATE_DATE  := NVL(IDTEXECDATE, IORCORDER.EXEC_ESTIMATE_DATE);
        END IF;
        
        
        OR_BOORDEROPERATINGUNIT.SETOPERATINGUNIT(IORCORDER, IBLVALIDATEOPERATUNIT,IBLSHOWERROR);
        
        
        IF IORCORDER.OPERATING_UNIT_ID IS NULL THEN
            UT_TRACE.TRACE('LA UNIDAD DE TRABAJO ES NULA',15);
            RETURN;
        END IF;

        
        NUESTADOINI := IORCORDER.ORDER_STATUS_ID;
        
        
         
        SBRANGEDESCRIPTION := NULL;
        IF ((RCSCHEDDISPATCH.SCHED_DISPATCH_ID IS NOT NULL) AND
            (IORCORDER.ASSIGNED_WITH = OR_BCORDEROPERATINGUNIT.CSBASSIGN_SCHED)) THEN
            OR_BCSCHED.GETAVAILABLEBYUDX(
                RCSCHEDDISPATCH.SCHEDULER_ID,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                RCSCHEDDISPATCH.OPERATING_ZONE_ID,
                RCSCHEDDISPATCH.DATE_,
                RCSCHEDAVAILABLE
            );
            
            SBRANGEDESCRIPTION := OR_BOSCHED.FSBGETAVAILRANGEDESC(
                RCSCHEDDISPATCH.ORDER_ID,
                RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                RCSCHEDDISPATCH.DATE_,
                RCSCHEDDISPATCH.OPERATING_ZONE_ID,
                RCSCHEDAVAILABLE.HOUR_ENTRANCE,
                RCSCHEDAVAILABLE.HOUR_EXIT,
                RCSCHEDDISPATCH.HOUR_START,
                RCSCHEDDISPATCH.HOUR_END
            );
        END IF;

        
        
        NUCONTRACTORID := DAOR_OPERATING_UNIT.FNUGETCONTRACTOR_ID(IORCORDER.OPERATING_UNIT_ID, 0);

        IF (NUCONTRACTORID IS NOT NULL) THEN
            

            IORCORDER.ESTIMATED_COST := DAOR_TASKTYPE_AVG_COST.FNUGETAVERAGE_COST(IORCORDER.TASK_TYPE_ID, 0);

            
            
        END IF;
        
        
        OR_BOORDERTRANSITION.CHANGESTATUS
        (
          IORCORDER, 
          OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN,
          OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
          TRUE,
          IORCORDER.EXEC_ESTIMATE_DATE,
          SBRANGEDESCRIPTION,
          IORCORDER.PROGRAMING_CLASS_ID,
          NULL,
          IORCORDER.OPERATING_UNIT_ID,
          INUCOMMENTTYPE,
          NULL,
          IDTCHANGEDATE
          );


        
        OR_BCORDERACTIVITIES.UPDOPERATINGUNITSECTOR(IORCORDER);
        
        
        DAOR_ORDER.UPDRECORD(IORCORDER);
        
        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER,NUESTADOINI);
        

        
        OR_BOOPERATINGUNIT.UPDATEUSEDCAPACITY(IORCORDER.ORDER_ID,
                                              IORCORDER.OPERATING_UNIT_ID,
                                              FALSE,
                                              INUSCHEDITINERARYID
                                              );

        
        IF (IBLINSERTCOMMENT AND INUCOMMENTTYPE IS NOT NULL) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;

    UT_TRACE.TRACE('Se asign� la orden ['||IORCORDER.ORDER_ID||'] a la unidad ['||IORCORDER.OPERATING_UNIT_ID||'].',15);
    UT_TRACE.TRACE('FIN OR_BOProcessOrder.assign: ',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGN;

    
    PROCEDURE NOTIFY
    (
        IORCORDER           IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        IBLFORCESTATUS      IN  BOOLEAN DEFAULT FALSE,
        IBLRAISEERRORS      IN  BOOLEAN DEFAULT FALSE,
        INUCOMMENTTYPE      IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        BLSUCCESS BOOLEAN;
        NUERR     GE_ERROR_LOG.MESSAGE_ID%TYPE;
        SBOUT     GE_ERROR_LOG.DESCRIPTION%TYPE;

    BEGIN
        
        BEGIN
           OR_BONOTIFYORDER.NOTIFYORDER(IORCORDER.ORDER_ID);
            BLSUCCESS := TRUE;

        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                IF IBLRAISEERRORS THEN
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
                ERRORS.GETERROR(NUERR, SBOUT);
                BLSUCCESS := FALSE;
                OR_BCLOGORDERACTION.INSRECORD(OR_BOCONSTANTS.CNUORDER_ACTION_NOTIFY,
                    IORCORDER.ORDER_ID, SBOUT);
        END;

        

        IF BLSUCCESS OR IBLFORCESTATUS
            OR IORCORDER.ASSIGNED_WITH = OR_BCORDEROPERATINGUNIT.CSBASSIGN_SCHED
        THEN
            
            STARTEXECUTION(IORCORDER,NULL,NULL,IDTCHANGEDATE);

        END IF;
        
        
        IF NOT (INUCOMMENTTYPE IS NULL) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END NOTIFY;

    




























    PROCEDURE STARTEXECUTION
    (
        IORCORDER               IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        INUCOMMENTTYPE   IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
    
        NUESTADOINI             OR_ORDER.ORDER_STATUS_ID%TYPE;
        
    BEGIN
        
        IF IORCORDER.ORDER_STATUS_ID NOT IN (OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED, OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING ) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(OR_BOCONSTANTS.CNUERR_121742,
                    OR_BOCONSTANTS.CNUORDER_ACTION_NOTIFY || ' - '
                    || GE_BOBASICDATASERVICES.FSBGETDESCACTION(OR_BOCONSTANTS.CNUORDER_ACTION_NOTIFY)
                    || '|' || IORCORDER.ORDER_ID
                    || '|' || IORCORDER.ORDER_STATUS_ID || ' - '
                    || OR_BOBASICDATASERVICES.FSBGETDESCORDERSTATUS(IORCORDER.ORDER_STATUS_ID)
            );
        END IF;

        
        OR_BCORDERACTIVITIES.UPDSTATUSACTIVITYBYORDER(IORCORDER.ORDER_ID,
            OR_BOCONSTANTS.CSBASSIGNEDSTATUS);
            
        
        NUESTADOINI := IORCORDER.ORDER_STATUS_ID;
        
        
        OR_BOORDERTRANSITION.CHANGESTATUS
        (
           IORCORDER,
            OR_BOCONSTANTS.CNUORDER_ACTION_NOTIFY,
            OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING,
            TRUE,
            IORCORDER.EXEC_ESTIMATE_DATE,
            FSBGETORDERRANGEDESC(IORCORDER.ORDER_ID),
            IORCORDER.PROGRAMING_CLASS_ID,
            IORCORDER.OPERATING_UNIT_ID,
            IORCORDER.OPERATING_UNIT_ID,
            INUCOMMENTTYPE,
            NULL,
            IDTCHANGEDATE
            );

        DAOR_ORDER.UPDRECORD(IORCORDER);
        
        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER,NUESTADOINI);
        
        
        IF NOT (INUCOMMENTTYPE IS NULL) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END STARTEXECUTION;

    














    PROCEDURE VALIDENDEXECUTION
    (
        IORCORDER           IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER
    )
    IS
    BEGIN
        
        IF ( IORCORDER.ORDER_STATUS_ID NOT IN
                (
                    OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                    OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING
                )
            ) THEN
            
            GE_BOERRORS.SETERRORCODEARGUMENT(OR_BOCONSTANTS.CNUERR_121742,
                OR_BOCONSTANTS.CNUORDER_ACTION_EXECUT || ' - ' || GE_BOBASICDATASERVICES.FSBGETDESCACTION(OR_BOCONSTANTS.CNUORDER_ACTION_EXECUT)
                    || '|' || IORCORDER.ORDER_ID
                    || '|' || IORCORDER.ORDER_STATUS_ID || ' - ' || OR_BOBASICDATASERVICES.FSBGETDESCORDERSTATUS(IORCORDER.ORDER_STATUS_ID)
            );
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END VALIDENDEXECUTION;

    





















    PROCEDURE ENDEXECWOVALID
    (
        IORCORDER       IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        INUCOMMENTTYPE  IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT      IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        IDTCHANGEDATE   IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        TBACTIVITIES   OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
        NUINDEX        BINARY_INTEGER;
        NUESTADOINI  OR_ORDER.ORDER_STATUS_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia OR_BOProcessOrder.endExecWOValid',15);
        
        IORCORDER.EXECUTION_FINAL_DATE := UT_DATE.FDTSYSDATE;

        
        NUESTADOINI := IORCORDER.ORDER_STATUS_ID;

        
        OR_BOORDERTRANSITION.CHANGESTATUS
        (
          IORCORDER, 
          OR_BOCONSTANTS.CNUORDER_ACTION_EXECUT,
          OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED,
          TRUE,
          IORCORDER.EXEC_ESTIMATE_DATE,
          FSBGETORDERRANGEDESC(IORCORDER.ORDER_ID),
          IORCORDER.PROGRAMING_CLASS_ID,
          IORCORDER.OPERATING_UNIT_ID,
          IORCORDER.OPERATING_UNIT_ID,
          INUCOMMENTTYPE,
          NULL,
          IDTCHANGEDATE
        );

        DAOR_ORDER.UPDRECORD(IORCORDER);

        
        IF_BOELEMENTOUTAGE.CLOSEELEMOUTAGEBYORDER(IORCORDER.ORDER_ID);

        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER,NUESTADOINI);

        
        IF NOT (INUCOMMENTTYPE IS NULL) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    


























    PROCEDURE ENDEXECUTION
    (
        IORCORDER           IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        INUCOMMENTTYPE      IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        TBACTIVITIES    OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
        NUINDEX         BINARY_INTEGER;
        NUESTADOINI     OR_ORDER.ORDER_STATUS_ID%TYPE;

    BEGIN
        
        VALIDENDEXECUTION(IORCORDER);

        
        ENDEXECWOVALID(IORCORDER, INUCOMMENTTYPE, ISBCOMMENT,IDTCHANGEDATE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ENDEXECUTION;

    























    PROCEDURE UNPROGRAM
    (
        IORCORDER         IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        INUCOMMENTTYPE    IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT        IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        IBLINSERTCOMMENT  IN  BOOLEAN DEFAULT TRUE,
        IDTCHANGEDATE     IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
     )
    IS
        NUESTADOINI             OR_ORDER.ORDER_STATUS_ID%TYPE;
        
        
        NUCOMMENTTYPEID         GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE;
        
    BEGIN
        VALIDATESTATUS(OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED, IORCORDER,
            OR_BOCONSTANTS.CNUORDER_ACTION_UNPROG);
    
        IORCORDER.REPROGRAM_LAST_DATE   := UT_DATE.FDTSYSDATE;
        
        
        NUESTADOINI := IORCORDER.ORDER_STATUS_ID;
        
        
        OR_BOORDERTRANSITION.CHANGESTATUS(
            IORCORDER,
            OR_BOCONSTANTS.CNUORDER_ACTION_UNPROG,
            OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED,
            NULL,
            NULL,
            NULL,
            NULL,
            IORCORDER.OPERATING_UNIT_ID,
            NULL,
            INUCOMMENTTYPE,
            NULL,
            IDTCHANGEDATE
            );

        
        IORCORDER.OPERATING_UNIT_ID     := NULL;
        IORCORDER.ASSIGNED_DATE         := NULL;
        IORCORDER.ASSIGNED_WITH         := NULL;
        IORCORDER.EXEC_ESTIMATE_DATE    := NULL;
        IORCORDER.MAX_DATE_TO_LEGALIZE  := NULL;
        IORCORDER.ARRANGED_HOUR         := NULL;
        IORCORDER.APPOINTMENT_CONFIRM   := NULL;

        DAOR_ORDER.UPDRECORD(IORCORDER);

        
        
        OR_BOORDERCOMMENT.UPDATECOMMENTTYPE(IORCORDER.ORDER_ID, NUCOMMENTTYPEID);

        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER,NUESTADOINI);
        
        
        IF (IBLINSERTCOMMENT AND (INUCOMMENTTYPE IS NOT NULL)) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UNPROGRAM;
    
    




























    PROCEDURE TOREASSIGN
    (
        IORCORDER           IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        IDTARRANGED_HOUR    IN  DATE,
        INUCOMMENTTYPE      IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        INUNEWOPERATINGUNITID   IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE DEFAULT NULL
    )
    IS
        NUESTADOINI             OR_ORDER.ORDER_STATUS_ID%TYPE;
        NUOLDOPERATINGUNITID    OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        SBRANGEDESCRIPTION      OR_ORDER_STAT_CHANGE.RANGE_DESCRIPTION%TYPE;
        RCSCHEDPROGRAMING       DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        RCSCHEDAVAILABLE        DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        
    BEGIN
        UT_TRACE.TRACE('OR_BOProcessOrder.toReassign');
        

            
        IF IORCORDER.ORDER_STATUS_ID NOT IN (OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED, OR_BOCONSTANTS.CNUORDER_STAT_WAITING) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(OR_BOCONSTANTS.CNUERR_121742,
                OR_BOCONSTANTS.CNUORDER_ACTION_TOREAS || ' - ' || GE_BOBASICDATASERVICES.FSBGETDESCACTION(OR_BOCONSTANTS.CNUORDER_ACTION_TOREAS)
                    || '|' || IORCORDER.ORDER_ID
                    || '|' || IORCORDER.ORDER_STATUS_ID || ' - ' || OR_BOBASICDATASERVICES.FSBGETDESCORDERSTATUS(IORCORDER.ORDER_STATUS_ID)
            );
        END IF;
    
            
        NUOLDOPERATINGUNITID            := IORCORDER.OPERATING_UNIT_ID;
        IORCORDER.OPERATING_UNIT_ID     := INUNEWOPERATINGUNITID;
        IORCORDER.ASSIGNED_DATE         := UT_DATE.FDTSYSDATE;
        IORCORDER.ASSIGNED_WITH         := NULL;
        IORCORDER.EXEC_ESTIMATE_DATE    := IDTARRANGED_HOUR;
        IORCORDER.REPROGRAM_LAST_DATE   := UT_DATE.FDTSYSDATE;
        IORCORDER.ARRANGED_HOUR         := IDTARRANGED_HOUR;
        
        
        NUESTADOINI := IORCORDER.ORDER_STATUS_ID;
        SBRANGEDESCRIPTION := NULL;
        
        
        IF (OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(IORCORDER.ORDER_ID, RCSCHEDPROGRAMING)) THEN
            
            DAOR_SCHED_AVAILABLE.GETRECORD(RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID,
                                           RCSCHEDAVAILABLE);

            
            SBRANGEDESCRIPTION := OR_BOSCHED.FSBGETAVAILRANGEDESC(
                IORCORDER.ORDER_ID,
                RCSCHEDPROGRAMING.PROGRAMING_CLASS_ID,
                RCSCHEDAVAILABLE.DATE_,
                RCSCHEDAVAILABLE.OPERATING_ZONE_ID,
                RCSCHEDAVAILABLE.HOUR_ENTRANCE,
                RCSCHEDAVAILABLE.HOUR_EXIT,
                RCSCHEDPROGRAMING.HOUR_START,
                RCSCHEDPROGRAMING.HOUR_END
            );
        END IF;
        
        
        OR_BOORDERTRANSITION.CHANGESTATUS(
            IORCORDER,
            OR_BOCONSTANTS.CNUORDER_ACTION_TOREAS,
            OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED,
            TRUE,
            IORCORDER.EXEC_ESTIMATE_DATE,
            SBRANGEDESCRIPTION,
            IORCORDER.PROGRAMING_CLASS_ID,
            NUOLDOPERATINGUNITID,
            IORCORDER.OPERATING_UNIT_ID,
            INUCOMMENTTYPE,
            NULL
        );


        DAOR_ORDER.UPDRECORD(IORCORDER);
        
        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER,NUESTADOINI);

        
        IF NOT (INUCOMMENTTYPE IS NULL) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END TOREASSIGN;
    
    












































    PROCEDURE UNASSIGNORDER
    (
        IORCORDER           IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        INUCOMMENTTYPE      IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        IBLINSERTCOMMENT    IN  BOOLEAN DEFAULT TRUE,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        NUESTADOINI     OR_ORDER.ORDER_STATUS_ID%TYPE;
        
        
        NUCOMMENTTYPEID         GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE;
        
    BEGIN
        

        IF (IORCORDER.OPERATING_UNIT_ID IS NOT NULL)
        THEN 
             OR_BOOPERATINGUNIT.UPDATEUSEDCAPACITY(IORCORDER.ORDER_ID,IORCORDER.OPERATING_UNIT_ID);
        END IF;
        
        
        OR_BOFWLEGALIZEORDERUTIL.LOCKORDER(IORCORDER.ORDER_ID);
        
        
        NUESTADOINI := IORCORDER.ORDER_STATUS_ID;
        
        
        
        OR_BOORDERTRANSITION .CHANGESTATUS
        (
          IORCORDER,
          OR_BOCONSTANTS.CNUORDER_ACTION_UNPROG,
          OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED,
          NULL,
          NULL ,
          NULL ,
          NULL ,
          IORCORDER.OPERATING_UNIT_ID,
          NULL ,
          INUCOMMENTTYPE,
          NULL,
          IDTCHANGEDATE
          );
          
        
        IORCORDER.OPERATING_UNIT_ID     := NULL;
        IORCORDER.ASSIGNED_DATE         := NULL;
        IORCORDER.ASSIGNED_WITH         := NULL;
        IORCORDER.EXEC_ESTIMATE_DATE    := NULL;
        IORCORDER.MAX_DATE_TO_LEGALIZE  := NULL;
        IORCORDER.ARRANGED_HOUR         := NULL;
        IORCORDER.APPOINTMENT_CONFIRM   := NULL;
        

        
        DAOR_ORDER.UPDRECORD(IORCORDER);
        
        
        
        OR_BOORDERCOMMENT.UPDATECOMMENTTYPE(IORCORDER.ORDER_ID, NUCOMMENTTYPEID);

        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER,NUESTADOINI);
        
        
        IF (IBLINSERTCOMMENT AND (INUCOMMENTTYPE IS NOT NULL)) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UNASSIGNORDER;
    
    









































 	PROCEDURE PROCESSORDER
    (
        INUORDERID                 IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERATSECTOR            IN  OR_ORDER.OPERATING_SECTOR_ID%TYPE DEFAULT NULL,
        INUOPERATUNIT              IN  OR_ORDER.OPERATING_UNIT_ID%TYPE DEFAULT NULL,
        IDTEXECDATE                IN  OR_ORDER.ARRANGED_HOUR%TYPE DEFAULT NULL,
        IBLCHECKCONDITIONSTOASSIGN IN  BOOLEAN DEFAULT FALSE,
        INUCOMMENTTYPE             IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT                 IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL
    )
	IS
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        BLSUCCESSNOTIFY     BOOLEAN;

    BEGIN
        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);

        
        IF RCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED THEN
            RETURN;
        END IF;

        

        UPDBASICDATA(RCORDER, INUOPERATSECTOR, NULL);

        ASSIGN(RCORDER, INUOPERATUNIT, IDTEXECDATE, IBLCHECKCONDITIONSTOASSIGN);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSORDER;
    
    



























































    PROCEDURE PROCESSREASSINGORDER
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERATUNIT       IN  OR_ORDER.OPERATING_UNIT_ID%TYPE,
        IDTEXECDATE         IN  OR_ORDER.ARRANGED_HOUR%TYPE,
        BLCHECKSCHED        IN  BOOLEAN DEFAULT TRUE,
        INUCOMMENTTYPE      IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL
    )
    IS
        
        RCORDER         DAOR_ORDER.STYOR_ORDER;
        RCPREVOPERUNIT  DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;
        RCNEWOPERUNIT   DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;
        NUESTADOINI     OR_ORDER.ORDER_STATUS_ID%TYPE;
        SBASSIGNEDWITH  OR_ORDER.ASSIGNED_WITH%TYPE;

        NUCONTRACTORID          GE_CONTRATO.ID_CONTRATISTA%TYPE; 
        
    BEGIN
        UT_TRACE.TRACE('INICIA - or_boprocessorder.ProcessReassingOrder - inuOrderId['||INUORDERID||
        '] - inuOperatUnit['||INUOPERATUNIT||'] - idtExecDate['||TO_CHAR(IDTEXECDATE, 'dd/mm/yyyy HH:MI:SS a.m.')||']',15);

        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);
        
        
        IF (RCORDER.ORDER_STATUS_ID <>  OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_122062, RCORDER.ORDER_STATUS_ID||'|'||INUORDERID);
        END IF;
        
        
        OR_BOFWLEGALIZEORDERUTIL.LOCKORDER(INUORDERID);
        
        
        RCPREVOPERUNIT := DAOR_OPERATING_UNIT.FRCGETRECORD(RCORDER.OPERATING_UNIT_ID);
        SBASSIGNEDWITH := RCORDER.ASSIGNED_WITH;
        
        RCNEWOPERUNIT := DAOR_OPERATING_UNIT.FRCGETRECORD(INUOPERATUNIT);

        
        IF RCORDER.STAGE_ID IS NOT NULL THEN
            
            PM_BOORDERTRANSITION.VALIDATESTATUSORDER(RCORDER.ORDER_ID,RCORDER.STAGE_ID,OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED);
        END IF;

        
        IF BLCHECKSCHED AND OR_BCORDEROPERATINGUNIT.CSBASSIGN_SCHED IN (
            RCPREVOPERUNIT.ASSIGN_TYPE, RCNEWOPERUNIT.ASSIGN_TYPE,
            RCORDER.ASSIGNED_WITH )
        THEN
            GE_BOERRORS.SETERRORCODE(CNUERR_901723);
        END IF;

        
        RCORDER.OPERATING_UNIT_ID   := INUOPERATUNIT;
        RCORDER.ARRANGED_HOUR       := IDTEXECDATE;
        RCORDER.EXEC_ESTIMATE_DATE  := IDTEXECDATE;
        
        NUESTADOINI := RCORDER.ORDER_STATUS_ID;
        
        RCORDER.ORDER_STATUS_ID     := OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED;

        OR_BOORDEROPERATINGUNIT.SETOPERATINGUNIT(RCORDER);


        
        NUCONTRACTORID := DAOR_OPERATING_UNIT.FNUGETCONTRACTOR_ID(RCORDER.OPERATING_UNIT_ID, 0);
        
        RCORDER.DEFINED_CONTRACT_ID  := NULL;

        IF (NUCONTRACTORID IS NULL) THEN
             RCORDER.ESTIMATED_COST := 0;
        END IF;


        
        DAOR_ORDER.UPDRECORD(RCORDER);
        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(RCORDER,NUESTADOINI);
        
        OR_BCORDERACTIVITIES.UPDOPERATINGUNITSECTOR(RCORDER);

        
        OR_BCORDEROPEUNICHAN.INSRECORD(RCORDER.ORDER_ID,
            RCPREVOPERUNIT.OPERATING_UNIT_ID, RCORDER.OPERATING_UNIT_ID);

        
        IF (SBASSIGNEDWITH = OR_BCORDEROPERATINGUNIT.CSBASSIGN_CAPACITY) THEN
            
            OR_BOOPERATINGUNIT.UPDATEUSEDCAPACITY(RCORDER.ORDER_ID,
                                                  RCPREVOPERUNIT.OPERATING_UNIT_ID
                                                  );
            
            OR_BOOPERATINGUNIT.UPDATEUSEDCAPACITY(RCORDER.ORDER_ID,
                                                  RCORDER.OPERATING_UNIT_ID,
                                                  FALSE
                                                  );
        END IF;
        
        
        IF NOT (INUCOMMENTTYPE IS NULL) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                RCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;

        UT_TRACE.TRACE('FIN - or_boprocessorder.ProcessReassingOrder',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END PROCESSREASSINGORDER;
    
    
    FUNCTION FBLISORDERALTERABLE
    (
        IRCORDER IN DAOR_ORDER.STYOR_ORDER
    )
    RETURN BOOLEAN
    IS
        SBFINALSTATUS OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE;

    BEGIN
        SBFINALSTATUS := DAOR_ORDER_STATUS.FSBGETIS_FINAL_STATUS(IRCORDER.ORDER_STATUS_ID);

        RETURN SBFINALSTATUS <> GE_BOCONSTANTS.CSBYES
            AND IRCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_LOCK ;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FBLISORDERALTERABLE;
    
    


























    PROCEDURE REESCHEDULEDASSIGN
    (
        IORCORDER           IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        INUOPERATUNIT       IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTEXECDATE         IN  DATE,
        INUCOMMENTTYPE      IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL
    )
    IS

        NUESTADOINI             OR_ORDER.ORDER_STATUS_ID%TYPE;
        NUOLDOPERATINGUNITID    OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;

    BEGIN
        
        NUOLDOPERATINGUNITID               := IORCORDER.OPERATING_UNIT_ID;
        IORCORDER.OPERATING_UNIT_ID       := NVL(INUOPERATUNIT, IORCORDER.OPERATING_UNIT_ID);
        IORCORDER.ARRANGED_HOUR           := NVL(IDTEXECDATE, IORCORDER.ARRANGED_HOUR);
        IORCORDER.EXEC_ESTIMATE_DATE  := NVL(IDTEXECDATE, IORCORDER.EXEC_ESTIMATE_DATE);

        
        IF IORCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN THEN
            IORCORDER.ASSIGNED_DATE := UT_DATE.FDTSYSDATE;
            IORCORDER.ASSIGNED_WITH := OR_BCORDEROPERATINGUNIT.CSBASSIGN_SCHED;

            
            NUESTADOINI := IORCORDER.ORDER_STATUS_ID;
            
            OR_BOORDERTRANSITION.CHANGESTATUS
            (
                IORCORDER,
                OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN,
                OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                TRUE,
                IORCORDER.EXEC_ESTIMATE_DATE,
                FSBGETORDERRANGEDESC(IORCORDER.ORDER_ID),
                IORCORDER.PROGRAMING_CLASS_ID,
                NUOLDOPERATINGUNITID,
                IORCORDER.OPERATING_UNIT_ID,
                INUCOMMENTTYPE,
                NULL
            );
            
        END IF;

        
        DAOR_ORDER.UPDRECORD(IORCORDER);
        
        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER,NUESTADOINI);

        
        IF NOT (INUCOMMENTTYPE IS NULL) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END REESCHEDULEDASSIGN;
    
    



















    PROCEDURE  PROGRAMPLANNED
    (
        IORCORDER                      IN  OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        IDTARRANGED_HOUR           IN  OR_ORDER.ARRANGED_HOUR%TYPE,
        INUCOMMENTTYPE          IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL, 
        ISBCOMMENT                 IN OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        INUNEWOPERATINGUNITID   IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE 
    )
    IS

        NUESTADOINI             OR_ORDER.ORDER_STATUS_ID%TYPE;
        RCPROGRAMING           DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        RCSCHEDAVAILABLE      DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        SBRANGEDESCRIPTION  OR_ORDER_STAT_CHANGE.RANGE_DESCRIPTION%TYPE;

    BEGIN
        VALIDATESTATUS
        (
        OR_BOCONSTANTS.CNUORDER_STAT_PLANNED, 
        IORCORDER,
        OR_BOCONSTANTS.CNUORDER_ACTION_PROGRA
        );

        IORCORDER.REPROGRAM_LAST_DATE   :=  UT_DATE.FDTSYSDATE;
        IORCORDER.EXEC_ESTIMATE_DATE    := IDTARRANGED_HOUR;
        IORCORDER.ARRANGED_HOUR         := IDTARRANGED_HOUR;

        
        NUESTADOINI := IORCORDER.ORDER_STATUS_ID;
      SBRANGEDESCRIPTION := NULL;

        IF (OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(IORCORDER.ORDER_ID, RCPROGRAMING)) THEN
            RCSCHEDAVAILABLE := DAOR_SCHED_AVAILABLE.FRCGETRECORD(RCPROGRAMING.SCHED_AVAILABLE_ID);
            
            SBRANGEDESCRIPTION := OR_BOSCHED.FSBGETAVAILRANGEDESC(
                RCPROGRAMING.ORDER_ID,
                RCPROGRAMING.PROGRAMING_CLASS_ID,
                RCSCHEDAVAILABLE.DATE_,
                RCSCHEDAVAILABLE.OPERATING_ZONE_ID,
                RCSCHEDAVAILABLE.HOUR_ENTRANCE,
                RCSCHEDAVAILABLE.HOUR_EXIT,
                RCPROGRAMING.HOUR_START,
                RCPROGRAMING.HOUR_END
            );
        END IF;

        OR_BOORDERTRANSITION.CHANGESTATUS(
            IORCORDER,
            OR_BOCONSTANTS.CNUORDER_ACTION_PROGRA,
            OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED,
            TRUE,
            IORCORDER.EXEC_ESTIMATE_DATE,
            SBRANGEDESCRIPTION,
            IORCORDER.PROGRAMING_CLASS_ID,
            IORCORDER.OPERATING_UNIT_ID,
            INUNEWOPERATINGUNITID,
            INUCOMMENTTYPE,
            NULL
        );

        DAOR_ORDER.UPDRECORD(IORCORDER);

        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER,NUESTADOINI);

        
        IF ( INUCOMMENTTYPE IS NOT NULL ) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IORCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
















    PROCEDURE POSTPONEORDER
    (
        IRCORDER        IN OUT  DAOR_ORDER.STYOR_ORDER,
        INUCOMMENTTYPE  IN      OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT      IN      OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL
    )
    IS
        NUESTADOINI     OR_ORDER.ORDER_STATUS_ID%TYPE;
    BEGIN
    
        VALIDATESTATUS
        (
            OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING,
            IRCORDER,
            OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN
        );
        
        
        NUESTADOINI := IRCORDER.ORDER_STATUS_ID;
        
        
        OR_BOORDERTRANSITION.CHANGESTATUS
        (
            IRCORDER,
            OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN,
            OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
            TRUE,
             IRCORDER.EXEC_ESTIMATE_DATE,
              FSBGETORDERRANGEDESC(IRCORDER.ORDER_ID),
              IRCORDER.PROGRAMING_CLASS_ID,
              IRCORDER.OPERATING_UNIT_ID,
              IRCORDER.OPERATING_UNIT_ID,
              INUCOMMENTTYPE,
              NULL
        );
        
        DAOR_ORDER.UPDRECORD(IRCORDER);

        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IRCORDER,NUESTADOINI);
        
        
        IF NOT (INUCOMMENTTYPE IS NULL) THEN
            
            OR_BOORDERCOMMENT.ADDCOMMENT
            (
                IRCORDER.ORDER_ID,
                INUCOMMENTTYPE,
                ISBCOMMENT
            );
        END IF;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END POSTPONEORDER;

    


























    PROCEDURE GENADMINORDERBYORDER (
                                    IORCORDER IN OUT NOCOPY DAOR_ORDER.STYOR_ORDER
                                   )
    IS
        NUADMINBASEID       GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE;
        TBORDERACTIVITIES   OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
        RCORDERACTIVITIES   OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES;
        TBADMINACTIVITIES   OR_BCREGENERAACTIVID.TYTBACTIVIDADREGEN;
        RCADMINACTIVITIES   OR_BCREGENERAACTIVID.STYACTIVIDADREGEN;
        TBFINALADMINACT     TYTBACTIVIDADREGEN;
        RCFINALADMINACT     STYACTIVIDADREGEN;
        SBFINALINDEX        VARCHAR2(16);
        NUINDEX             BINARY_INTEGER;
        NUINDEX2            BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOProcessOrder.genAdminOrderByOrder',5);
        
        IF (IORCORDER.OPERATING_UNIT_ID IS NULL) THEN
            IF (NVL(DAOR_TASK_TYPE.FSBGETGEN_ADMIN_ORDER(IORCORDER.TASK_TYPE_ID),GE_BOCONSTANTS.CSBNO) = GE_BOCONSTANTS.CSBNO) THEN
                RETURN;
            END IF;
        ELSE
            
            NUADMINBASEID := DAOR_OPERATING_UNIT.FNUGETADMIN_BASE_ID(IORCORDER.OPERATING_UNIT_ID);
            IF (NVL(DAOR_TASK_TYPE.FSBGETGEN_ADMIN_ORDER(IORCORDER.TASK_TYPE_ID),GE_BOCONSTANTS.CSBNO) = GE_BOCONSTANTS.CSBNO
               OR NVL(DAOR_OPERATING_UNIT.FSBGETGEN_ADMIN_ORDER(IORCORDER.OPERATING_UNIT_ID),GE_BOCONSTANTS.CSBNO) = GE_BOCONSTANTS.CSBNO
               OR NVL(DAGE_BASE_ADMINISTRA.FSBGETGEN_ADMIN_ORDER(NUADMINBASEID),GE_BOCONSTANTS.CSBNO) = GE_BOCONSTANTS.CSBNO) THEN
                RETURN;
            END IF;
        END IF;

        
        OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER(IORCORDER.ORDER_ID, TBORDERACTIVITIES);

        
        IF ( TBORDERACTIVITIES.COUNT > 0 ) THEN
            NUINDEX := TBORDERACTIVITIES.FIRST;
            WHILE ( NUINDEX IS NOT NULL ) LOOP
                RCORDERACTIVITIES := TBORDERACTIVITIES(NUINDEX);
                GETADMINACTIVITIES
                (
                    RCORDERACTIVITIES.NUACTIVITYID,
                    RCORDERACTIVITIES.NULEGALIZECOUNT,
                    IORCORDER.CAUSAL_ID,
                    IORCORDER.ORDER_STATUS_ID,
                    TBFINALADMINACT
                );
                NUINDEX := TBORDERACTIVITIES.NEXT(NUINDEX);
            END LOOP;
        END IF;
        
        GENADMINACTIVITIES(TBFINALADMINACT,IORCORDER.ORDER_ID,IORCORDER.OPERATING_UNIT_ID);
        
        UT_TRACE.TRACE('FIN OR_BOProcessOrder.genAdminOrderByOrder',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    PROCEDURE VALORDERISADMIN
    (
        INUORDERID      OR_ORDER.ORDER_ID%TYPE
    )
    IS
        SBADMIN         VARCHAR2(1);
    BEGIN
        UT_TRACE.TRACE('-- [INICIO] OR_BOProcessOrder.valOrderIsAdmin',12);

        
        SBADMIN := OR_BCORDERACTIVITIES.FSBISADMINORDER(INUORDERID);
        UT_TRACE.TRACE('inuOrderId :['||INUORDERID||'] - '
            ||'sbAdmin: ['||SBADMIN||']', 13);

        
        IF ( SBADMIN = GE_BOCONSTANTS.CSBNO ) THEN
            ERRORS.SETERROR ( CNUERR_18603, INUORDERID );
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        UT_TRACE.TRACE('-- [FIN] OR_BOProcessOrder.valOrderIsAdmin',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALORDERISADMIN;
    
    

















    PROCEDURE VALORDERNOTISADMIN
    (
        INUORDERID      OR_ORDER.ORDER_ID%TYPE
    )
    IS
        SBADMIN         VARCHAR2(1);
    BEGIN
        UT_TRACE.TRACE('-- [INICIO] OR_BOProcessOrder.valOrderNotIsAdmin',12);

        
        SBADMIN := OR_BCORDERACTIVITIES.FSBISADMINORDER(INUORDERID);
        UT_TRACE.TRACE('inuOrderId :['||INUORDERID||'] - '
            ||'sbAdmin: ['||SBADMIN||']', 13);

        
        IF ( SBADMIN = GE_BOCONSTANTS.CSBYES ) THEN
            ERRORS.SETERROR ( CNUERR_18602, INUORDERID );
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('-- [FIN] OR_BOProcessOrder.valOrderNotIsAdmin',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALORDERNOTISADMIN;
    
    
























    PROCEDURE PROCESSORDERTOEXEC
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERATINGUNITID  IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTEXECDATE         IN  DATE,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        RCORDER             DAOR_ORDER.STYOR_ORDER;
    BEGIN
        
        IF IDTEXECDATE IS NULL THEN
            ERRORS.SETERROR ( CNUERR_8182);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);

        
        IF RCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED THEN
            ERRORS.SETERROR ( CNUERR_17470, INUORDERID||'|'|| OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED||' - '|| DAOR_ORDER_STATUS.FSBGETDESCRIPTION(OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED, 0));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        UPDBASICDATA(RCORDER, NULL, NULL);

        ASSIGN(RCORDER,
               INUOPERATINGUNITID,
               IDTEXECDATE,
               FALSE,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               IDTCHANGEDATE);

        
        IF RCORDER.OPERATING_UNIT_ID IS NULL THEN
            ERRORS.SETERROR ( CNUERR_3604, INUORDERID||'|'||INUOPERATINGUNITID||' - '|| DAOR_OPERATING_UNIT.FSBGETNAME(INUOPERATINGUNITID, 0) );
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);

        NOTIFY(RCORDER,NULL,NULL,NULL,NULL,IDTCHANGEDATE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSORDERTOEXEC;

    
    





















    PROCEDURE GETADMINACTIVITIES
    (
        INUORDERACTIVITY    IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INULEGALIZECOUNT    IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE,
        INUCAUSALID         IN  OR_ORDER.CAUSAL_ID%TYPE,
        INUORDERSTATUS      IN  OR_ORDER.ORDER_STATUS_ID%TYPE,
        IOTBFINALADMINACT   IN OUT  TYTBACTIVIDADREGEN
    )
    IS
        TBADMINACTIVITIES   OR_BCREGENERAACTIVID.TYTBACTIVIDADREGEN;
        RCADMINACTIVITIES   OR_BCREGENERAACTIVID.STYACTIVIDADREGEN;
        NUINDEX            BINARY_INTEGER;
        SBFINALINDEX        VARCHAR2(16);

    BEGIN

        UT_TRACE.TRACE('[INICIO] OR_BOProcessOrder.GetAdminActivities',10);

        OR_BCREGENERAACTIVID.ACTIVIDADESADMIN
        (
          INUORDERACTIVITY,
          INUCAUSALID,
          INUORDERSTATUS,
          INULEGALIZECOUNT,
          TBADMINACTIVITIES
        );

        
        IF ( TBADMINACTIVITIES.COUNT > 0 ) THEN
            NUINDEX := TBADMINACTIVITIES.FIRST;
            WHILE ( NUINDEX IS NOT NULL ) LOOP
                RCADMINACTIVITIES := TBADMINACTIVITIES(NUINDEX);
                SBFINALINDEX := TO_CHAR(RCADMINACTIVITIES.ACTIVIDADREGENERAR);
                IF ( IOTBFINALADMINACT.EXISTS(SBFINALINDEX) ) THEN
                    IF ( IOTBFINALADMINACT(SBFINALINDEX).TIEMPO_ESPERA > RCADMINACTIVITIES.TIEMPO_ESPERA ) THEN
                        IOTBFINALADMINACT(SBFINALINDEX).TIEMPO_ESPERA := RCADMINACTIVITIES.TIEMPO_ESPERA;
                    END IF;
                ELSE
                    IOTBFINALADMINACT(SBFINALINDEX).ACTIVIDADREGENERAR := RCADMINACTIVITIES.ACTIVIDADREGENERAR;
                    IOTBFINALADMINACT(SBFINALINDEX).TIEMPO_ESPERA := RCADMINACTIVITIES.TIEMPO_ESPERA;
                END IF;
                NUINDEX := TBADMINACTIVITIES.NEXT(NUINDEX);
            END LOOP;
        END IF;

        UT_TRACE.TRACE('[FIN] OR_BOProcessOrder.GetAdminActivities',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] OR_BOProcessOrder.GetAdminActivities',10);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS ERROR] OR_BOProcessOrder.GetAdminActivities',10);
            RAISE EX.CONTROLLED_ERROR;
    END GETADMINACTIVITIES;


    


















    PROCEDURE GENADMINACTIVITIES
    (
        ITBFINALADMINACT    IN  TYTBACTIVIDADREGEN,
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERATINGUNITID  IN  OR_ORDER.OPERATING_UNIT_ID%TYPE
    )
    IS
        RCFINALADMINACT     STYACTIVIDADREGEN;
        SBFINALINDEX        VARCHAR2(16);
    BEGIN

        UT_TRACE.TRACE('[INICIO] OR_BOProcessOrder.GenAdminActivities',10);

        
        IF ( ITBFINALADMINACT.COUNT > 0 ) THEN
            SBFINALINDEX := ITBFINALADMINACT.FIRST;
            WHILE ( SBFINALINDEX IS NOT NULL ) LOOP
                RCFINALADMINACT := ITBFINALADMINACT(SBFINALINDEX);
                OR_BOADMINORDER.CREATEORDERJOB
                (
                    RCFINALADMINACT.ACTIVIDADREGENERAR,
                    INUORDERID,
                    INUOPERATINGUNITID,
                    RCFINALADMINACT.TIEMPO_ESPERA
                );

                SBFINALINDEX := ITBFINALADMINACT.NEXT(SBFINALINDEX);
            END LOOP;
        END IF;

        UT_TRACE.TRACE('[FIN] OR_BOProcessOrder.GenAdminActivities',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] OR_BOProcessOrder.GenAdminActivities',10);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS ERROR] OR_BOProcessOrder.GenAdminActivities',10);
            RAISE EX.CONTROLLED_ERROR;
    END GENADMINACTIVITIES;
    
    




















    PROCEDURE ASSIGNWFORDERS
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ITBORDERSTOASSIGN   IN  DAOR_ORDER.TYTBOR_ORDER,
        OBLASSIGNED         OUT BOOLEAN
    )
    IS
        
        NUOPEUNITOFVENDOR   OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;

        
        RCOPERUNIT    DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;

        NUCOUNT             NUMBER := 0;

        NUINDEXORDERS        BINARY_INTEGER;
        
        
        TBORDERSTOASSIGN    DAOR_ORDER.TYTBOR_ORDER;

    BEGIN
        UT_TRACE.TRACE('-- INICIA OR_BOProcessOrder.AssignWFOrders',10);
        UT_TRACE.TRACE(' inupackageId ['||INUPACKAGEID||']',10);

        
        
        
        
        NUOPEUNITOFVENDOR := DAMO_PACKAGES.FNUGETPOS_OPER_UNIT_ID(INUPACKAGEID);

        UT_TRACE.TRACE(' nuOpeUnitOfVendor ['||NUOPEUNITOFVENDOR||']',10);

        TBORDERSTOASSIGN := ITBORDERSTOASSIGN;
        NUINDEXORDERS := TBORDERSTOASSIGN.FIRST;

        LOOP
            EXIT WHEN (NUINDEXORDERS IS NULL);

            
            OR_BCDISPATCH.GETUNITBYFIELDSUP(NUOPEUNITOFVENDOR, TBORDERSTOASSIGN(NUINDEXORDERS).ORDER_ID, RCOPERUNIT);

            UT_TRACE.TRACE(' Orden que se va ha asignar ['||TBORDERSTOASSIGN(NUINDEXORDERS).ORDER_ID||'] - Unidad de Trabajo a la que se asigna la orden ['||RCOPERUNIT.OPERATING_UNIT_ID||']',10);

            IF (RCOPERUNIT.OPERATING_UNIT_ID IS NOT NULL) THEN
                
                OR_BOPROCESSORDER.ASSIGN(TBORDERSTOASSIGN(NUINDEXORDERS), RCOPERUNIT.OPERATING_UNIT_ID, UT_DATE.FDTSYSDATE);
                NUCOUNT := NUCOUNT+1;
            END IF;

            IF (TBORDERSTOASSIGN.COUNT = NUCOUNT) THEN
                OBLASSIGNED := TRUE;
            ELSE
                OBLASSIGNED := FALSE;
            END IF;

            NUINDEXORDERS := TBORDERSTOASSIGN.NEXT(NUINDEXORDERS);

        END LOOP;

        UT_TRACE.TRACE('-- Finaliza OR_BOProcessOrder.AssignWFOrders',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] OR_BOProcessOrder.AssignWFOrders',10);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS ERROR] OR_BOProcessOrder.AssignWFOrders',10);
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNWFORDERS;
    
    






























    PROCEDURE ASSIGNSALESORDERS
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ISBACTIVITIES   IN  GE_PARAMETER.VALUE%TYPE,
        OBLASSIGNED     OUT BOOLEAN
    )
    IS
        
        RFORDERSTOASSIGN    CONSTANTS.TYREFCURSOR;
        
        
        TBORDERSTOASSIGN  DAOR_ORDER.TYTBOR_ORDER;

    BEGIN
        UT_TRACE.TRACE('-- INICIA OR_BOProcessOrder.AssignSalesOrders',10);
        UT_TRACE.TRACE(' inupackageId ['||INUPACKAGEID||']',10);
        
        
        IF(INUPACKAGEID IS NULL) THEN
            RETURN;
        END IF;
        
        
        GE_BOGENERALUTIL.VALCOMAINNUMERISTRING(ISBACTIVITIES);
        
        
        OR_BCORDER.GETREGORDERSBYPACK(INUPACKAGEID, ISBACTIVITIES, RFORDERSTOASSIGN);
        FETCH RFORDERSTOASSIGN BULK COLLECT INTO TBORDERSTOASSIGN;
        CLOSE RFORDERSTOASSIGN;

        
        IF(TBORDERSTOASSIGN.COUNT = 0) THEN
            RETURN;
        END IF;
        
        ASSIGNWFORDERS(INUPACKAGEID, TBORDERSTOASSIGN, OBLASSIGNED);

        UT_TRACE.TRACE('-- Finaliza OR_BOProcessOrder.AssignSalesOrders',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] OR_BOProcessOrder.AssignSalesOrders',10);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS ERROR] OR_BOProcessOrder.AssignSalesOrders',10);
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNSALESORDERS;
    

    























    PROCEDURE ASSIGNORBYINSTPARAMACT
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        OBLASSIGNED     OUT BOOLEAN
    )
    IS
        
        RFORDERSTOASSIGN    CONSTANTS.TYREFCURSOR;
        
        TBORDERSTOASSIGN    DAOR_ORDER.TYTBOR_ORDER;
        
        SBACTIVITIES        GE_PARAMETER.VALUE%TYPE;
        
        NUPACKAGEID         OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('-- INICIA OR_BOProcessOrder.AssignOrByInstParamAct inuOrderId ['||INUORDERID||']',10);
        
        OBLASSIGNED := FALSE;

        
        IF INUORDERID IS NULL THEN
            RETURN;
        END IF;
        
        
        NUPACKAGEID := OR_BCORDERACTIVITIES.FNUGETPACKIDINFIRSTACT( INUORDERID );
        
        
        IF NUPACKAGEID IS NULL THEN
            RETURN;
        END IF;

        
        SBACTIVITIES := GE_BOPARAMETER.FSBGET(CSBOR_INST_ACTIVITIES);
        
        
        IF SBACTIVITIES IS NULL THEN
            RETURN;
        END IF;

        
        GE_BOGENERALUTIL.VALCOMAINNUMERISTRING(SBACTIVITIES);
        
        
        
        OR_BCORDER.GETREGORDERSBYPACK(NUPACKAGEID, SBACTIVITIES, RFORDERSTOASSIGN);
        FETCH RFORDERSTOASSIGN BULK COLLECT INTO TBORDERSTOASSIGN;
        CLOSE RFORDERSTOASSIGN;

        
        IF(TBORDERSTOASSIGN.COUNT = 0) THEN
            RETURN;
        END IF;

        ASSIGNWFORDERS(NUPACKAGEID, TBORDERSTOASSIGN, OBLASSIGNED);

        UT_TRACE.TRACE('-- Finaliza OR_BOProcessOrder.AssignOrByInstParamAct',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] OR_BOProcessOrder.AssignOrByInstParamAct',10);
            IF RFORDERSTOASSIGN%ISOPEN THEN
                CLOSE RFORDERSTOASSIGN;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF RFORDERSTOASSIGN%ISOPEN THEN
                CLOSE RFORDERSTOASSIGN;
            END IF;
            UT_TRACE.TRACE('[OTHERS ERROR] OR_BOProcessOrder.AssignOrByInstParamAct',10);
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNORBYINSTPARAMACT;

    
    
    




















    PROCEDURE ASSIGNMOTIVEORDERS
    (
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        ISBACTIVITIES   IN  GE_PARAMETER.VALUE%TYPE,
        OBLASSIGNED     OUT BOOLEAN
    )
    IS
        
        RFORDERSTOASSIGN    CONSTANTS.TYREFCURSOR;
        
        
        TBORDERSTOASSIGN    DAOR_ORDER.TYTBOR_ORDER;

        
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('-- INICIA OR_BOProcessOrder.AssignMotiveOrders',10);
        UT_TRACE.TRACE(' inuMotiveId ['||INUMOTIVEID||']',10);
        
        
        NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(INUMOTIVEID, 0);

        
        IF(NUPACKAGEID IS NULL) THEN
            RETURN;
        END IF;

        
        GE_BOGENERALUTIL.VALCOMAINNUMERISTRING(ISBACTIVITIES);

        
        OR_BCORDER.GETREGORDERSBYMOTIVE(INUMOTIVEID, ISBACTIVITIES, RFORDERSTOASSIGN);
        FETCH RFORDERSTOASSIGN BULK COLLECT INTO TBORDERSTOASSIGN;
        CLOSE RFORDERSTOASSIGN;

        
        IF(TBORDERSTOASSIGN.COUNT = 0) THEN
            RETURN;
        END IF;
        
        ASSIGNWFORDERS(NUPACKAGEID, TBORDERSTOASSIGN, OBLASSIGNED);

        UT_TRACE.TRACE('-- Finaliza OR_BOProcessOrder.AssignMotiveOrders',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] OR_BOProcessOrder.AssignMotiveOrders',10);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS ERROR] OR_BOProcessOrder.AssignMotiveOrders',10);
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNMOTIVEORDERS;
    
    

















    FUNCTION FBLISORDERALTERABLEBYRELATED
    (
        IRCORDER IN DAOR_ORDER.STYOR_ORDER
    )
    RETURN BOOLEAN
    IS
        SBFINALSTATUS OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE;
    BEGIN

        SBFINALSTATUS := DAOR_ORDER_STATUS.FSBGETIS_FINAL_STATUS(IRCORDER.ORDER_STATUS_ID);

        RETURN SBFINALSTATUS            <> GE_BOCONSTANTS.CSBYES AND
               IRCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_LOCK AND
               IRCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FBLISORDERALTERABLEBYRELATED;
    
    
    
















    PROCEDURE UNASSIGNORDER
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        INUCOMMENTTYPE  IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT      IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE,
        IDTCHANGEDATE IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        RCORDER DAOR_ORDER.STYOR_ORDER;
    BEGIN

        DAOR_ORDER.GETRECORD(INUORDERID, RCORDER);
        UNASSIGNORDER(RCORDER,INUCOMMENTTYPE,ISBCOMMENT, TRUE, IDTCHANGEDATE );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UNASSIGNORDER;

END OR_BOPROCESSORDER;