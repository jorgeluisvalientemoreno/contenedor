PACKAGE GE_BOTechnicalService
IS
    














































































    
    
    

    
    
    

    TYPE TYRCACTIVITY IS RECORD
	(
		ORDER_ACTIVITY_ID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
		ORDER_ID            OR_ORDER_ACTIVITY.ORDER_ID%TYPE
	);

	TYPE TYTBACTIVITY IS TABLE OF TYRCACTIVITY INDEX BY BINARY_INTEGER;
    
    
    
    FUNCTION FSBVERSION
    RETURN VARCHAR2;
    
    




    PROCEDURE GETACTIVITIESBYPACK(
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ORFACTIVITIES   OUT CONSTANTS.TYREFCURSOR
    );
    
    



    PROCEDURE PROCESSSERIALSRECEIPT(
        ICLSERIALSACT       IN  CLOB,
        INUOPERATINGUNIT    IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    );
    
    



    PROCEDURE VALIDATESERIALRECEIPT(
        INUITEMTYPE         IN  GE_ITEMS.ID_ITEMS_TIPO%TYPE,
        ISBSERIE            IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        ONUITEMSERIADOID    OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMID           OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        OSBITEMDESC         OUT NOCOPY GE_ITEMS.DESCRIPTION%TYPE,
        ONUSTOCKSTATUSID    OUT GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        OSBSTOCKSTATUSDESC  OUT NOCOPY GE_ITEMS_ESTADO_INV.DESCRIPCION%TYPE
    );
    
    



    PROCEDURE GETITEMSTORETBYPACK(
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUOPERATINGUNITID  IN  GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE,
        ORFSERIALS          OUT CONSTANTS.TYREFCURSOR
    );
    
    



    PROCEDURE PROCESSSERIALSRETURN(
        ICLSERIALS          IN  CLOB,
        INUOPERATINGUNIT    IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    );
    
    




    FUNCTION FSBITEMHAVEWARRANTYBYSOL
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2;

    




    FUNCTION FNUTYPECAUSALREPAIR
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN GE_CAUSAL.CAUSAL_TYPE_ID%TYPE;
    
    



    PROCEDURE VALRETURNITEMWARRANTY;

    



    PROCEDURE PROCESSITEMWARRANTY;
    
    



    PROCEDURE NOTIFYEQUIPMENTREADY
    (
        IRCITEMSERIADO      IN  DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO,
        RCUNIITEMBALAMOV    IN  DAOR_UNI_ITEM_BALA_MOV.STYOR_UNI_ITEM_BALA_MOV,
        IONUNEWESTADOINV    IN  OUT GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE
    );
    
    






    PROCEDURE ASSIGNORDFOREQACCEPTED
    (
        INUIDITEMSERIADO    IN GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        INUNEWSTATUSSTOCK   IN GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        INUOPERATINGUNITID  IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    );
    
    





    FUNCTION FSBISVALSERTECHTOLEG
    (
        INUUNITID       OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUSERIALITEM   GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN VARCHAR2;
    
    





    FUNCTION FRFGETITEMSRETURN (INUPACKAGEID  MO_PACKAGES.PACKAGE_ID%TYPE)
    RETURN CONSTANTS.TYREFCURSOR;
    
    






    PROCEDURE RETURNITEMS (INUPACKAGEID     IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                           INUSERIALITEMID  IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
                           INUOPERATINGUNIT IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
                           BLNOTIFYWF       IN  BOOLEAN,
                           ONUERRORCODE     OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
                           OSBERRORMESS     OUT GE_ERROR_LOG.DESCRIPTION%TYPE);
    






    PROCEDURE SETRETURNACTIVITY (INUREQUESTID   IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                                 INUWFPLANID    IN   GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE);
                                 
    






    PROCEDURE SETWARRANTYRETACT (INUREQUESTID   IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                                 INUWFPLANID    IN   GE_TECH_SERVICE_DET.WARR_RET_WF_INST_ID%TYPE);

    





    PROCEDURE RECEIPTEQUIPMENT ( ISBSERIAL      IN   GE_ITEMS_SERIADO.SERIE%TYPE,
                                 INUPACKAGEID   IN   MO_PACKAGES.PACKAGE_ID%TYPE);
                                 
    





    PROCEDURE RECEIPTEQBYCOMPONENT
    (
        INUPACKAGEID     IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUPRCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE
    );
                                 
    





    PROCEDURE ASSOCIATEEQUIPMENT ( ISBSERIAL      IN   GE_ITEMS_SERIADO.SERIE%TYPE,
                                 INUPACKAGEID   IN   MO_PACKAGES.PACKAGE_ID%TYPE);

    





    PROCEDURE ASSIGNREPAIRORDER ( ISBSERIAL      IN   GE_ITEMS_SERIADO.SERIE%TYPE,
                                 INUPACKAGEID   IN   MO_PACKAGES.PACKAGE_ID%TYPE);

    





    FUNCTION FRFGETOPERATINGUNITLAB
    RETURN CONSTANTS.TYREFCURSOR;
    
    




    FUNCTION FNUSTATUSFORRECEIPT
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV%TYPE;
    
    



    FUNCTION FSBISTECHNICALSERVICE
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2;
    
    




    FUNCTION FSBISEXTERNTECHSERVICE
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2;


    
END GE_BOTECHNICALSERVICE;

PACKAGE BODY GE_BOTechnicalService
IS
    















































































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO591704';

    
    
    
    CNUNULL_ATTRIBUTE        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 2126;
    CNUOPEUN_NO_VALID        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 143785;
    CNUNOT_EXIST             CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 14746;
    CNUOCCUP_STATUS          CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 13746;
    CNUINV_STATUS            CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 7608;
    CNUNOT_VALID_PACK_STATUS CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 143445;
    CNUEQUIPNOTGARANTE       CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 14751;
    CNUNOTEXIST_ORDER_OPEN   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900299;
    CNUEQUIPNOTFACT          CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900365;
    CNUITEM_BLACKLIST        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 6243;
    CNUERROR_ITEM_USE        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 150009;
    CNUERR_AVAILABLE         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 122263;
    CNUERR_RECEIPT           CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 10729;
    CNUNOT_FINAL_STATUS      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901376;
    
    CNUCAUSALSUCCESSID       CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 1;
    
    CNULABORATORYCLASSIF     CONSTANT OR_OPER_UNIT_CLASSIF.OPER_UNIT_CLASSIF_ID%TYPE := OR_BOCONSTANTS.CNULABORATORYCLASSIF;
    
    CNUREPAIRCENTERCLASSIF   CONSTANT OR_OPER_UNIT_CLASSIF.OPER_UNIT_CLASSIF_ID%TYPE := OR_BOCONSTANTS.CNUREPAIRCENTEROPERUNITCLAS;
    
    
    CSBTECH_SERV            CONSTANT PS_PACKAGE_TYPE.TAG_NAME%TYPE   := 'P_SERVICIO_TECNICO';
    
    CSBTECH_SERV_EXTERN     CONSTANT PS_PACKAGE_TYPE.TAG_NAME%TYPE   := 'P_SOLICITUD_DE_SERVICIO_TECNICO_CLIENTES_EXTERNOS';

     
    
    

    
    
    

    












    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

    





















    PROCEDURE GETACTIVITIESBYPACK(
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ORFACTIVITIES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFACTIVITIES := GE_BCTECHNICALSERVICE.FRFGETACTIVITIESBYPACK(
            INUPACKAGEID
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFACTIVITIES);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFACTIVITIES);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTIVITIESBYPACK;
    
    




























    PROCEDURE PROCESSSERIALSRECEIPT(
        ICLSERIALSACT       IN  CLOB,
        INUOPERATINGUNIT    IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        TBACTSERIAL         UT_STRING.TYTB_STRING;
        TBSERIALS           UT_STRING.TYTB_STRING;
        RCSERIALITEM        DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
        NUDOCUMENTO         GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE;
        NUUNIITEMMOVID      OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE;
        NUIDX               BINARY_INTEGER;
        NUUPDATEDREG        NUMBER;
        RCTECHSERVDET       DAGE_TECH_SERVICE_DET.STYGE_TECH_SERVICE_DET;
        
        NUNEWITEMINVSTATUS  GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio GE_BOTechnicalService.ProcessSerialsReceipt',5);
  
        NUDOCUMENTO := GE_BCITEMSDOCUMENTO.FNUGETITEMSDOCBYDOCEXT(
            GE_BOITEMSCONSTANTS.CNUTIPOENVIOTECNSERV,
            INUOPERATINGUNIT,
            INUPACKAGEID
        );

        
        IF NUDOCUMENTO IS NULL THEN
            
            GE_BOITEMSDOCUMENTO.REGISTRARDOCUMENTO
            (
                GE_BOITEMSCONSTANTS.CNUTIPOENVIOTECNSERV,
                INUOPERATINGUNIT,
                INUOPERATINGUNIT,
                UT_DATE.FDTSYSDATE,
                INUPACKAGEID,
                GE_BOITEMSCONSTANTS.CSBESTADOCERRADO,
                NULL,
                NUDOCUMENTO,
                INUPACKAGEID
            );
        END IF;

        
        UT_STRING.EXTSTRING(ICLSERIALSACT, '|', TBACTSERIAL);

        NUIDX := TBACTSERIAL.FIRST;
        
        
        NUNEWITEMINVSTATUS := FNUSTATUSFORRECEIPT( INUPACKAGEID );
        
        WHILE (NUIDX IS NOT NULL) LOOP

            UT_STRING.EXTSTRING(TBACTSERIAL(NUIDX), ';', TBSERIALS);

            
            RCSERIALITEM := DAGE_ITEMS_SERIADO.FRCGETRECORD(TBSERIALS(2));

            
            
            GE_BCTECHNICALSERVICE.UPDACTIVITYSERIAL(
                INUPACKAGEID,
                TBSERIALS(1),
                TBSERIALS(2),
                REPLACE(REPLACE(TBSERIALS(3), CHR(167), '|'), CHR(169), ';'),
                NUUPDATEDREG
            );
            IF (NUUPDATEDREG = 0) THEN
                GE_BOERRORS.SETERRORCODE(10724);
            END IF;
            
            


            
            
            IF ((RCSERIALITEM.PROPIEDAD NOT IN (GE_BOITEMSCONSTANTS.CSBTRAIDO_CLIENTE,GE_BOITEMSCONSTANTS.CSBVENDIDO_CLIENTE)) AND
                (RCSERIALITEM.OPERATING_UNIT_ID IS NOT NULL)) THEN
                OR_BOITEMSMOVE.REGISTERITEMSMOVE
                (
                    RCSERIALITEM.OPERATING_UNIT_ID,
                    INUOPERATINGUNIT,
                    RCSERIALITEM.ITEMS_ID,
                    RCSERIALITEM,
                    OR_BOITEMSMOVE.CSBDECREASEMOVETYPE,
                    GE_BOITEMSCONSTANTS.CNUMOVCAUSASALTECSER,
                    NUDOCUMENTO,
                    1,
                    RCSERIALITEM.COSTO,
                    NULL,
                    NUNEWITEMINVSTATUS,
                    NUUNIITEMMOVID
                );
            END IF;

            
            OR_BOITEMSMOVE.REGISTERITEMSMOVE
            (
                INUOPERATINGUNIT,
                NVL(RCSERIALITEM.OPERATING_UNIT_ID, INUOPERATINGUNIT),
                RCSERIALITEM.ITEMS_ID,
                RCSERIALITEM,
                OR_BOITEMSMOVE.CSBINCREASEMOVETYPE,
                GE_BOITEMSCONSTANTS.CNUMOVCAUSAINGTECSER,
                NUDOCUMENTO,
                1,
                RCSERIALITEM.COSTO,
                NULL,
                NUNEWITEMINVSTATUS,
                NUUNIITEMMOVID
            );

            
            DAGE_ITEMS_SERIADO.UPDID_ITEMS_ESTADO_INV(
                RCSERIALITEM.ID_ITEMS_SERIADO, NUNEWITEMINVSTATUS
            );
            
            
            
            RCTECHSERVDET.TECH_SERVICE_DET_ID  := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_TECH_SERVICE_DET','SEQ_GE_TECH_SERVICE_175065');
            RCTECHSERVDET.PACKAGE_ID           := INUPACKAGEID;
            RCTECHSERVDET.SERIAL_ITEM_ID       := RCSERIALITEM.ID_ITEMS_SERIADO;
            
            DAGE_TECH_SERVICE_DET.INSRECORD(RCTECHSERVDET);
            
            NUIDX := TBACTSERIAL.NEXT(NUIDX);
        END LOOP;

        UT_TRACE.TRACE('Fin GE_BOTechnicalService.ProcessSerialsReceipt',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.ProcessSerialsReceipt',5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.ProcessSerialsReceipt',5);
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSSERIALSRECEIPT;
    
    































    PROCEDURE VALIDATESERIALRECEIPT(
        INUITEMTYPE         IN  GE_ITEMS.ID_ITEMS_TIPO%TYPE,
        ISBSERIE            IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        ONUITEMSERIADOID    OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMID           OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        OSBITEMDESC         OUT NOCOPY GE_ITEMS.DESCRIPTION%TYPE,
        ONUSTOCKSTATUSID    OUT GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        OSBSTOCKSTATUSDESC  OUT NOCOPY GE_ITEMS_ESTADO_INV.DESCRIPCION%TYPE
    )
    IS
        NUITEMTYPE          GE_ITEMS.ID_ITEMS_TIPO%TYPE;
    BEGIN
        
        GE_BOBAJAEQUIPOS.VAL_EXISTEQUIPOLISTANEGRA(ISBSERIE);
    
        
        GE_BCTECHNICALSERVICE.GETSERIALITEMDATA(
            ISBSERIE,
            ONUITEMSERIADOID,
            ONUITEMID,
            OSBITEMDESC,
            ONUSTOCKSTATUSID,
            OSBSTOCKSTATUSDESC
        );
        
        
        IF (ONUITEMSERIADOID IS NULL) THEN
            RETURN;
        END IF;
        
        
        
        IF (ONUSTOCKSTATUSID NOT IN (GE_BOITEMSCONSTANTS.CNUSTATUS_ENUSO,
                                 GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO,
                                 GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPGARANTIA,
                                 GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE)) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(10725, OSBSTOCKSTATUSDESC);
        END IF;
        
        NUITEMTYPE := DAGE_ITEMS.FNUGETID_ITEMS_TIPO(ONUITEMID);
        
        
        IF (((INUITEMTYPE IS NULL) AND (NUITEMTYPE IS NOT NULL)) OR
            ((INUITEMTYPE IS NOT NULL) AND (NUITEMTYPE IS NULL)) OR
            (INUITEMTYPE <> NUITEMTYPE)) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(10726, DAGE_ITEMS_TIPO.FSBGETDESCRIPCION(INUITEMTYPE,0));
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ONUITEMSERIADOID := NULL;
            ONUITEMID := NULL;
            OSBITEMDESC := NULL;
            ONUSTOCKSTATUSID := NULL;
            OSBSTOCKSTATUSDESC := NULL;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ONUITEMSERIADOID := NULL;
            ONUITEMID := NULL;
            OSBITEMDESC := NULL;
            ONUSTOCKSTATUSID := NULL;
            OSBSTOCKSTATUSDESC := NULL;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATESERIALRECEIPT;
    
    

































    PROCEDURE GETITEMSTORETBYPACK(
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUOPERATINGUNITID  IN  GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE,
        ORFSERIALS          OUT CONSTANTS.TYREFCURSOR
    )
    IS
        
        
        
        TBORDERACTIVITIES   OR_BCORDERACTIVITIES.TYTBORDERANDACTIVITY;
        RFSTATEACCOUNTS     CONSTANTS.TYREFCURSOR;
        
        
        
        NUSTATEACCOUNT      FACTURA.FACTCODI%TYPE;
        NUBALANCE           CUENCOBR.CUCOSACU%TYPE;
        NUTOTALVALUE        CUENCOBR.CUCOVATO%TYPE;

    BEGIN
        
        RFSTATEACCOUNTS := MO_BCPACKAGE_PAYMENT.FRFGETBILLSBYPACKAGE
        (
            INUPACKAGEID
        );

        FETCH RFSTATEACCOUNTS INTO NUSTATEACCOUNT;

        WHILE RFSTATEACCOUNTS%FOUND LOOP
            PKBCCUENCOBR.GETBALANCEBYBILL
            (
                NUSTATEACCOUNT,
                NUBALANCE,
                NUTOTALVALUE
            );
            
            IF( NUBALANCE > 0)THEN
                GE_BOERRORS.SETERRORCODE(10727);
                RAISE LOGIN_DENIED;
            END IF;
            FETCH RFSTATEACCOUNTS INTO NUSTATEACCOUNT;
        END LOOP;

        
        OR_BCORDERACTIVITIES.GETPENDORDACTBYPACK(INUPACKAGEID, TBORDERACTIVITIES);
        IF (TBORDERACTIVITIES.COUNT > 0) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(10728, INUPACKAGEID);
        END IF;

        
        ORFSERIALS := GE_BCTECHNICALSERVICE.FRFGETITEMSTORETBYPACK(
            INUPACKAGEID,
            INUOPERATINGUNITID
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFSERIALS);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFSERIALS);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMSTORETBYPACK;
    
    























    PROCEDURE PROCESSSERIALSRETURN(
        ICLSERIALS          IN  CLOB,
        INUOPERATINGUNIT    IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        TBSERIALS           UT_STRING.TYTB_STRING;
        NUIDX               BINARY_INTEGER;
        RCITEMMOV           DAOR_UNI_ITEM_BALA_MOV.STYOR_UNI_ITEM_BALA_MOV;
        RCSERIALITEM        DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
        NUDOCUMENTO         GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE;
        NUUNIITEMMOVID      OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE;
        NUIDITEMSERIADO     GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        SBITEMSESTADOINV    GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE;
        NUINSTANCEWF        GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE;
        BLEQUIPMENTRETURN   BOOLEAN := FALSE;
    BEGIN

        
        NUDOCUMENTO := GE_BCITEMSDOCUMENTO.FNUGETITEMSDOCBYDOCEXT(
            GE_BOITEMSCONSTANTS.CNUTIPOSALIDATECNSERV,
            INUOPERATINGUNIT,
            INUPACKAGEID
        );
        
        
        IF NUDOCUMENTO IS NULL THEN
            
            GE_BOITEMSDOCUMENTO.REGISTRARDOCUMENTO
            (
                GE_BOITEMSCONSTANTS.CNUTIPOSALIDATECNSERV,
                INUOPERATINGUNIT,
                INUOPERATINGUNIT,
                UT_DATE.FDTSYSDATE,
                INUPACKAGEID,
                GE_BOITEMSCONSTANTS.CSBESTADOCERRADO,
                NULL,
                NUDOCUMENTO,
                INUPACKAGEID
            );
        END IF;

        
        UT_STRING.EXTSTRING(ICLSERIALS, '|', TBSERIALS);

        NUIDX := TBSERIALS.FIRST;

        WHILE (NUIDX IS NOT NULL) LOOP
            
            RCITEMMOV := OR_BCITEMSMOVE.FRCGETMOVBYPACKAGE(INUPACKAGEID, TBSERIALS(NUIDX));

            
            RCSERIALITEM := DAGE_ITEMS_SERIADO.FRCGETRECORD(TBSERIALS(NUIDX));

            
            
            IF ((RCSERIALITEM.PROPIEDAD NOT IN (GE_BOITEMSCONSTANTS.CSBTRAIDO_CLIENTE, GE_BOITEMSCONSTANTS.CSBVENDIDO_CLIENTE)) AND
                (RCITEMMOV.TARGET_OPER_UNIT_ID <> RCITEMMOV.OPERATING_UNIT_ID)) THEN
                OR_BOITEMSMOVE.REGISTERITEMSMOVE
                (
                    RCITEMMOV.TARGET_OPER_UNIT_ID,
                    INUOPERATINGUNIT,
                    RCSERIALITEM.ITEMS_ID,
                    RCSERIALITEM,
                    OR_BOITEMSMOVE.CSBINCREASEMOVETYPE,
                    GE_BOITEMSCONSTANTS.CNUMOVCAUSAINGTECSER,
                    NUDOCUMENTO,
                    1,
                    RCSERIALITEM.COSTO,
                    NULL,
                    RCITEMMOV.INIT_INV_STAT_ITEMS,
                    NUUNIITEMMOVID
                );
            END IF;
            
            
            OR_BOITEMSMOVE.REGISTERITEMSMOVE
            (
                INUOPERATINGUNIT,
                RCITEMMOV.TARGET_OPER_UNIT_ID,
                RCSERIALITEM.ITEMS_ID,
                RCSERIALITEM,
                OR_BOITEMSMOVE.CSBDECREASEMOVETYPE,
                GE_BOITEMSCONSTANTS.CNUMOVCAUSASALTECSER,
                NUDOCUMENTO,
                1,
                RCSERIALITEM.COSTO,
                NULL,
                RCITEMMOV.INIT_INV_STAT_ITEMS,
                NUUNIITEMMOVID
            );

            SBITEMSESTADOINV := GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE;
            IF ((RCSERIALITEM.PROPIEDAD = GE_BOITEMSCONSTANTS.FSBOBTTRAIDOCLIENTE) OR
                (RCSERIALITEM.PROPIEDAD = GE_BOITEMSCONSTANTS.FSBOBTVENDCLIENTE)) THEN
                SBITEMSESTADOINV := GE_BOITEMSCONSTANTS.CNUSTATUS_ENUSO;
            END IF;

            
            RCSERIALITEM.ID_ITEMS_ESTADO_INV := NVL(RCITEMMOV.INIT_INV_STAT_ITEMS, SBITEMSESTADOINV);

            
            RCSERIALITEM.OPERATING_UNIT_ID := NULL;

            
            DAGE_ITEMS_SERIADO.UPDRECORD(RCSERIALITEM);
            BLEQUIPMENTRETURN := TRUE;

            NUIDX := TBSERIALS.NEXT(NUIDX);
        END LOOP;
        
        
        IF BLEQUIPMENTRETURN THEN
            
            NUINSTANCEWF := GE_BCTECHNICALSERVICE.FNUGETRETURNACTIVITY(INUPACKAGEID,RCSERIALITEM.ID_ITEMS_SERIADO);
            IF NUINSTANCEWF IS NOT NULL THEN
                
                WF_BOANSWER_RECEPTOR.ANSWERRECEPTOR(NUINSTANCEWF,CNUCAUSALSUCCESSID);
            END IF;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSSERIALSRETURN;
    
    



















    FUNCTION FSBITEMHAVEWARRANTY
    (
        INUITEMSERIADOID  IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN VARCHAR2
    IS
        DTWARRANTYDATE  GE_ITEMS_SERIADO.FECHA_GARANTIA%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.fsbItemHaveWarranty', 3);

        
        DTWARRANTYDATE := DAGE_ITEMS_SERIADO.FDTGETFECHA_GARANTIA(INUITEMSERIADOID);

        IF DTWARRANTYDATE IS NOT NULL THEN
            IF UT_DATE.FDTSYSDATE <= DTWARRANTYDATE THEN
                RETURN GE_BOCONSTANTS.CSBYES;
            ELSE
                RETURN GE_BOCONSTANTS.CSBNO;
            END IF;
        ELSE
            RETURN GE_BOCONSTANTS.CSBNO;
        END IF;

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.fsbItemHaveWarranty', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('EXCEPTION CONTROLLED_ERROR GE_BOTechnicalService.fsbItemHaveWarranty', 2);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('EXCEPTION OTHERS GE_BOTechnicalService.fsbItemHaveWarranty', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBITEMHAVEWARRANTY;

    

























    FUNCTION FSBITEMHAVEWARRANTYBYSOL
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUIDITEMSERIADO GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        SBSERIAL        GE_ITEMS_SERIADO.SERIE%TYPE;
        NUITEM          GE_ITEMS_SERIADO.ITEMS_ID%TYPE;
        NUSTATUS        GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE;
        NUORDENID       OR_ORDER_ACTIVITY.ORDER_ID%TYPE;
        NUPRODUCTID     PR_PRODUCT.PRODUCT_ID%TYPE;
        RCCOMPONENT     DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
        UT_TRACE.TRACE('[INICIO] GE_BOTechnicalService.fsbItemHaveWarrantyBySol ['||INUPACKAGEID||']',5);
        
        GE_BCTECHNICALSERVICE.GETITEMBYPACK
        (
            INUPACKAGEID,
            NUIDITEMSERIADO,
            SBSERIAL,
            NUITEM,
            NUSTATUS,
            NUORDENID
        );

        
        IF (NUIDITEMSERIADO IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Equipo Anterior');
        END IF;
        
        NUPRODUCTID := MO_BOPACKAGES.FRCGETINITIALMOTIVE(INUPACKAGEID, FALSE).PRODUCT_ID;
        UT_TRACE.TRACE('Producto: '||NUPRODUCTID,6);

        
        RCCOMPONENT := PR_BCCOMPONENT.FRCCOMPONENTBYNUMBERPROD(
            SBSERIAL,
            NUPRODUCTID
        );

        UT_TRACE.TRACE('Componente: '||RCCOMPONENT.COMPONENT_ID,6);
        
        IF RCCOMPONENT.COMPONENT_ID IS NULL THEN
            UT_TRACE.TRACE('[FIN] GE_BOTechnicalService.fsbItemHaveWarrantyBySol [N]',5);
            RETURN GE_BOCONSTANTS.CSBNO;
        END IF;

        UT_TRACE.TRACE('[FIN] GE_BOTechnicalService.fsbItemHaveWarrantyBySol',5);
        RETURN FSBITEMHAVEWARRANTY(NUIDITEMSERIADO);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBITEMHAVEWARRANTYBYSOL;

    


















    FUNCTION FNUTYPECAUSALREPAIR
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN GE_CAUSAL.CAUSAL_TYPE_ID%TYPE
    IS
        NUIDITEMSERIADO GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        SBSERIAL        GE_ITEMS_SERIADO.SERIE%TYPE;
        NUITEM          GE_ITEMS_SERIADO.ITEMS_ID%TYPE;
        NUSTATUS        GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE;
        NUORDENID       OR_ORDER_ACTIVITY.ORDER_ID%TYPE;
        NUCAUSALID      OR_ORDER.CAUSAL_ID%TYPE;
    BEGIN

        
        GE_BCTECHNICALSERVICE.GETITEMBYPACK
        (
            INUPACKAGEID,
            NUIDITEMSERIADO,
            SBSERIAL,
            NUITEM,
            NUSTATUS,
            NUORDENID
        );

        
        IF (NUORDENID IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Orden de Reparaci�n');
        END IF;

        IF NUORDENID IS NOT NULL THEN
            NUCAUSALID :=  DAOR_ORDER.FNUGETCAUSAL_ID(NUORDENID);
            IF NUCAUSALID IS NOT NULL THEN
                RETURN DAGE_CAUSAL.FNUGETCAUSAL_TYPE_ID(NUCAUSALID);
            END IF;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUTYPECAUSALREPAIR;
    
    

















    PROCEDURE VALRETURNITEMWARRANTY
    IS
        SBINSTANCE        GE_BOINSTANCECONTROL.STYSBNAME;
        SBPACKAGEID       GE_BOINSTANCECONTROL.STYSBVALUE;
        NUPACKAGEID       MO_PACKAGES.PACKAGE_ID%TYPE;
        TBORDERACTIVITIES OR_BCORDERACTIVITIES.TYTBORDERANDACTIVITY;
        NUOPERATINGUNITID OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        NUIDITEMSERIADO   GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE;
        SBSERIAL          GE_ITEMS_SERIADO.SERIE%TYPE;
        NUITEM            GE_ITEMS_SERIADO.ITEMS_ID%TYPE;
        NUSTATUS          GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE;
        NUORDENID         OR_ORDER_ACTIVITY.ORDER_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.ValReturnItemWarranty', 1);

        
        NUOPERATINGUNITID := OR_BOOPERUNITPERSON.FNUASSOOPERUNITBYPERSON(GE_BOPERSONAL.FNUGETPERSONID);

        
        IF (NUOPERATINGUNITID IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Unidad');
        END IF;

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE('WORK_INSTANCE', NULL, 'MO_PACKAGES', 'PACKAGE_ID', SBPACKAGEID);

        IF (SBPACKAGEID IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Solicitud');
        END IF;
        NUPACKAGEID := TO_NUMBER(SBPACKAGEID);
        
        
        DAMO_PACKAGES.ACCKEY(NUPACKAGEID);

        
        IF (MO_BOPACKAGES.FBLISFINALSTATUS(NUPACKAGEID)) THEN
            GE_BOERRORS.SETERRORCODE(CNUNOT_VALID_PACK_STATUS);
        END IF;

        
        OR_BCORDERACTIVITIES.GETPENDORDACTBYPACK(NUPACKAGEID, TBORDERACTIVITIES);
        IF (TBORDERACTIVITIES.COUNT <= 0) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNOTEXIST_ORDER_OPEN, NUPACKAGEID);
        END IF;

        
        GE_BCTECHNICALSERVICE.GETITEMBYPACK
        (
            NUPACKAGEID,
            NUIDITEMSERIADO,
            SBSERIAL,
            NUITEM,
            NUSTATUS,
            NUORDENID
        );

        
        IF (NUIDITEMSERIADO IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Equipo Anterior');
        END IF;
        
        
        IF (GE_BOTECHNICALSERVICE.FSBITEMHAVEWARRANTY(NUIDITEMSERIADO) = GE_BOCONSTANTS.CSBNO) THEN
            GE_BOERRORS.SETERRORCODE(CNUEQUIPNOTGARANTE);
        END IF;
        
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTANCE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBINSTANCE, NULL, 'GE_ITEMS_SERIADO', 'OPERATING_UNIT_ID', NUOPERATINGUNITID, TRUE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBINSTANCE, NULL, 'MO_PACKAGES', 'PACKAGE_ID', NUPACKAGEID, TRUE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBINSTANCE, NULL, 'GE_ITEMS_SERIADO', 'ITEMS_ID', NUITEM, TRUE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBINSTANCE, NULL, 'GE_ITEMS_SERIADO', 'SERIE', SBSERIAL, TRUE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBINSTANCE, NULL, 'GE_ITEMS_SERIADO', 'ID_ITEMS_ESTADO_INV', NUSTATUS, TRUE);

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.ValReturnItemWarranty', 1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('EXCEPTION CONTROLLED_ERROR GE_BOTechnicalService.ValReturnItemWarranty', 1);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('EXCEPTION OTHERS GE_BOTechnicalService.ValReturnItemWarranty', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALRETURNITEMWARRANTY;
    
    

















    PROCEDURE MOVENTRYITEMWARRANTY
    (
        INUPACKAGEID       IN MO_PACKAGES.PACKAGE_ID%TYPE,
        IORCITEMSERIADO    IN OUT DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO
    )
    IS
        NUDOCUMENTOID  GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE;
        NUUNIITEMMOVID OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.MovEntryItemWarranty', 2);

         
        NUDOCUMENTOID := GE_BCITEMSDOCUMENTO.FNUGETITEMSDOCBYDOCEXT(
            GE_BOITEMSCONSTANTS.CNUTIPORETURNWARRANTY,
            IORCITEMSERIADO.OPERATING_UNIT_ID,
            INUPACKAGEID
        );

        IF NUDOCUMENTOID IS NULL THEN
            
            GE_BOITEMSDOCUMENTO.REGISTRARDOCUMENTO
            (
                GE_BOITEMSCONSTANTS.CNUTIPORETURNWARRANTY,
                IORCITEMSERIADO.OPERATING_UNIT_ID,
                IORCITEMSERIADO.OPERATING_UNIT_ID,
                UT_DATE.FDTSYSDATE,
                INUPACKAGEID,
                GE_BOITEMSCONSTANTS.CSBESTADOCERRADO,
                NULL,
                NUDOCUMENTOID,
                INUPACKAGEID
            );
        END IF;
        UT_TRACE.TRACE('nuDocumentoId : '||NUDOCUMENTOID, 3);

        
        OR_BOITEMSMOVE.REGISTERITEMSMOVE
        (
            IORCITEMSERIADO.OPERATING_UNIT_ID,
            IORCITEMSERIADO.OPERATING_UNIT_ID,
            IORCITEMSERIADO.ITEMS_ID,
            IORCITEMSERIADO,
            OR_BOITEMSMOVE.CSBNEUTRALMOVETYPE,
            GE_BOITEMSCONSTANTS.CNUMOVCAUSAINGWARRANTY,
            NUDOCUMENTOID,
            1,
            IORCITEMSERIADO.COSTO,
            NULL,
            IORCITEMSERIADO.ID_ITEMS_ESTADO_INV,
            NUUNIITEMMOVID
        );
        UT_TRACE.TRACE('nuUniItemMovId : '||NUDOCUMENTOID, 3);

        
        IORCITEMSERIADO.PROPIEDAD := GE_BOITEMSCONSTANTS.CSBEMPRESA;

        
        IORCITEMSERIADO.FECHA_INGRESO := UT_DATE.FDTSYSDATE;

        
        DAGE_ITEMS_SERIADO.UPDRECORD(IORCITEMSERIADO);


        UT_TRACE.TRACE('FIN GE_BOTechnicalService.MovEntryItemWarranty', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('EXCEPTION CONTROLLED_ERROR GE_BOTechnicalService.MovEntryItemWarranty', 2);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('EXCEPTION OTHERS GE_BOTechnicalService.MovEntryItemWarranty', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END MOVENTRYITEMWARRANTY;

    
























    PROCEDURE MOVEXITITEMWARRANTY
    (
        INUOPERATINGUNITID IN GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE,
        INUPACKAGEID       IN MO_PACKAGES.PACKAGE_ID%TYPE,
        IDTFECHAGARANTIA   IN GE_ITEMS_SERIADO.FECHA_GARANTIA%TYPE,
        IORCITEMSERIADO    IN OUT DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO,
        ISBPROPIEDAD       IN GE_ITEMS_SERIADO.PROPIEDAD%TYPE
    )
    IS
        NUDOCUMENTOID  GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE;
        NUUNIITEMMOVID OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.MovExitItemWarranty', 2);

         
        NUDOCUMENTOID := GE_BCITEMSDOCUMENTO.FNUGETITEMSDOCBYDOCEXT(
            GE_BOITEMSCONSTANTS.CNUTIPORETURNWARRANTY,
            INUOPERATINGUNITID,
            INUPACKAGEID
        );

        IF NUDOCUMENTOID IS NULL THEN
            
            GE_BOITEMSDOCUMENTO.REGISTRARDOCUMENTO
            (
                GE_BOITEMSCONSTANTS.CNUTIPORETURNWARRANTY,
                INUOPERATINGUNITID,
                INUOPERATINGUNITID,
                UT_DATE.FDTSYSDATE,
                INUPACKAGEID,
                GE_BOITEMSCONSTANTS.CSBESTADOCERRADO,
                NULL,
                NUDOCUMENTOID,
                INUPACKAGEID
            );
        END IF;
        UT_TRACE.TRACE('nuDocumentoId : '||NUDOCUMENTOID, 3);

        
        OR_BOITEMSMOVE.REGISTERITEMSMOVE
        (
            INUOPERATINGUNITID,
            INUOPERATINGUNITID,
            IORCITEMSERIADO.ITEMS_ID,
            IORCITEMSERIADO,
            OR_BOITEMSMOVE.CSBDECREASEMOVETYPE,
            GE_BOITEMSCONSTANTS.CNUMOVCAUSASALWARRANTY,
            NUDOCUMENTOID,
            1,
            IORCITEMSERIADO.COSTO,
            NULL,
            IORCITEMSERIADO.ID_ITEMS_ESTADO_INV,
            NUUNIITEMMOVID
        );
        UT_TRACE.TRACE('nuUniItemMovId : '||NUUNIITEMMOVID, 3);

        
        IORCITEMSERIADO.ID_ITEMS_ESTADO_INV := GE_BOITEMSCONSTANTS.CNUSTATUS_ENUSO;

        
        IORCITEMSERIADO.FECHA_SALIDA := UT_DATE.FDTSYSDATE;

        
        IORCITEMSERIADO.PROPIEDAD := ISBPROPIEDAD;

        
        IORCITEMSERIADO.FECHA_GARANTIA := IDTFECHAGARANTIA;
        
        
        IORCITEMSERIADO.OPERATING_UNIT_ID := NULL;
        
        
        DAGE_ITEMS_SERIADO.UPDRECORD(IORCITEMSERIADO);
        
        UT_TRACE.TRACE('FIN GE_BOTechnicalService.MovExitItemWarranty', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('EXCEPTION CONTROLLED_ERROR GE_BOTechnicalService.MovExitItemWarranty', 2);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('EXCEPTION OTHERS GE_BOTechnicalService.MovExitItemWarranty', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END MOVEXITITEMWARRANTY;
    
    

























    PROCEDURE VALITEMWARRANTY
    (
        ISBSERIE           IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        INUOPERATINGUNITID IN  GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE,
        IRCCOMPONENT       IN  DAPR_COMPONENT.STYPR_COMPONENT,
        ONUCLASSSERVICEID  OUT PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE,
        ORCITEMSERIADO     OUT DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.ValItemWarranty', 2);

        
        GE_BOITEMSSERIADO.GETITEMSERBYSERIE(ISBSERIE, ORCITEMSERIADO);

        
        IF ORCITEMSERIADO.ID_ITEMS_SERIADO IS NULL THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNOT_EXIST, ISBSERIE);
        END IF;
        UT_TRACE.TRACE('id_items_seriado: '||ORCITEMSERIADO.ID_ITEMS_SERIADO, 3);

        
        IF ORCITEMSERIADO.OPERATING_UNIT_ID||'a' <> INUOPERATINGUNITID||'a' THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUOPEUN_NO_VALID, ISBSERIE||'|'||INUOPERATINGUNITID);
        END IF;
        UT_TRACE.TRACE('operating_unit_id : '||ORCITEMSERIADO.OPERATING_UNIT_ID, 3);
        
        
        IF ORCITEMSERIADO.ID_ITEMS_ESTADO_INV <> GE_BOITEMSCONSTANTS.FNUOBTDISPONIBLE THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUOCCUP_STATUS, ISBSERIE);
        END IF;
        UT_TRACE.TRACE('id_items_estado_inv : '||ORCITEMSERIADO.ID_ITEMS_ESTADO_INV, 3);
        
        
        IF ORCITEMSERIADO.ESTADO_TECNICO = GE_BOITEMSCONSTANTS.CSBSTATUS_DAMAGE THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUINV_STATUS, ISBSERIE||'|Da�ado');
        END IF;
        UT_TRACE.TRACE('estado_tecnico : '||ORCITEMSERIADO.ESTADO_TECNICO, 3);

        
        IF (GE_BCITEMSSERIADO.FBLITEMBLACKLIST(ISBSERIE)) THEN
            GE_BOERRORS.SETERRORCODE(CNUITEM_BLACKLIST);
        END IF;

        
        IF (PR_BOCOMPONENT.FNUGETCOMPIDBYSERVNUMB(ISBSERIE, IRCCOMPONENT.COMPONENT_TYPE_ID) IS NOT NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_ITEM_USE, ISBSERIE);
        END IF;

        
        ONUCLASSSERVICEID := PS_BCCLASSSERVICE.FNUGETCLASSSERVBYITEMID(ORCITEMSERIADO.ITEMS_ID);
        UT_TRACE.TRACE('onuClassServiceId : '||ONUCLASSSERVICEID, 3);

        
        IF (NOT CC_BOPRODMGTEQUIPMENT.FBLVALIDFACTCLASSSERV(IRCCOMPONENT, ONUCLASSSERVICEID)) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUEQUIPNOTFACT, ISBSERIE);
        END IF;

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.ValItemWarranty', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('EXCEPTION CONTROLLED_ERROR GE_BOTechnicalService.ValItemWarranty', 2);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('EXCEPTION OTHERS GE_BOTechnicalService.ValItemWarranty', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALITEMWARRANTY;

    
    

































    PROCEDURE PROCESSITEMWARRANTY
    IS
        SBOPERATINGUNITID GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKAGEID       GE_BOINSTANCECONTROL.STYSBVALUE;
        SBITEMSOLDID      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSERIEOLD        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSTATUSID        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBITEMSNEWID      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSERIENEW        GE_BOINSTANCECONTROL.STYSBVALUE;
        
        NUOPERATINGUNITID GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE;
        NUPACKAGEID       MO_PACKAGES.PACKAGE_ID%TYPE;
        NUPRODUCTID       MO_MOTIVE.PRODUCT_ID%TYPE;
        RCCOMPONENT       DAPR_COMPONENT.STYPR_COMPONENT;
        NUCLASSSERVICEID  PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE;
        RCITEMSERIADOOLD  DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
        RCITEMSERIADONEW  DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
        TBORDERACTIVITIES OR_BCORDERACTIVITIES.TYTBORDERANDACTIVITY;
        RCORDER           DAOR_ORDER.STYOR_ORDER;
        NUINSTANCEWF      GE_TECH_SERVICE_DET.WARR_RET_WF_INST_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.ProcessItemWarranty', 1);

        SBOPERATINGUNITID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('GE_ITEMS_SERIADO', 'OPERATING_UNIT_ID');
        SBPACKAGEID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('MO_PACKAGES', 'PACKAGE_ID');
        SBITEMSOLDID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('GE_ITEMS_SERIADO', 'ITEMS_ID');
        SBSERIEOLD := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('GE_ITEMS_SERIADO', 'SERIE');
        SBSTATUSID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('GE_ITEMS_SERIADO', 'ID_ITEMS_ESTADO_INV');
        SBSERIENEW := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('MO_MOTIVE', 'SERVICE_NUMBER');

        IF (SBSERIENEW IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNULL_ATTRIBUTE, 'Serie Equipo Nuevo');
        END IF;

        
        NUOPERATINGUNITID := TO_NUMBER(SBOPERATINGUNITID);
        NUPACKAGEID := TO_NUMBER(SBPACKAGEID);

        
        NUPRODUCTID := MO_BOPACKAGES.FRCGETINITIALMOTIVE(NUPACKAGEID, FALSE).PRODUCT_ID;
        
        
        RCCOMPONENT := PR_BCCOMPONENT.FRCCOMPONENTBYNUMBERPROD(
            SBSERIEOLD,
            NUPRODUCTID
        );
        
        
        IF RCCOMPONENT.COMPONENT_ID IS NULL THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNOT_EXIST, 'Componente');
        END IF;

        
        VALITEMWARRANTY
        (
            SBSERIENEW,
            NUOPERATINGUNITID,
            RCCOMPONENT,
            NUCLASSSERVICEID,
            RCITEMSERIADONEW
        );

        
        GE_BOITEMSSERIADO.GETITEMSERBYSERIE(SBSERIEOLD, RCITEMSERIADOOLD);

        
        IF RCITEMSERIADOOLD.ID_ITEMS_SERIADO IS NULL THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNOT_EXIST, SBSERIEOLD);
        END IF;
        
        
        MOVENTRYITEMWARRANTY
        (
            NUPACKAGEID,
            RCITEMSERIADOOLD
        );
        
        
        MOVEXITITEMWARRANTY
        (
            NUOPERATINGUNITID,
            NUPACKAGEID,
            RCITEMSERIADOOLD.FECHA_GARANTIA,
            RCITEMSERIADONEW,
            RCITEMSERIADOOLD.PROPIEDAD
        );
        
        
        PR_BOCNFCOMPONENT.CHANGECOMPONENTPRODUCT
        (
            SBSERIENEW,
            RCCOMPONENT.COMPONENT_ID,
            RCCOMPONENT.COMPONENT_TYPE_ID,
            RCCOMPONENT.PRODUCT_ID,
            NUCLASSSERVICEID
        );

        
        NUINSTANCEWF := GE_BCTECHNICALSERVICE.FNUGETRETWARRACTIVITY(NUPACKAGEID);
        

        IF NUINSTANCEWF IS NOT NULL THEN
            WF_BOANSWER_RECEPTOR.ANSWERRECEPTOR(NUINSTANCEWF,CNUCAUSALSUCCESSID);
        END IF;

        
        COMMIT;
        
        UT_TRACE.TRACE('FIN GE_BOTechnicalService.ProcessItemWarranty', 1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            UT_TRACE.TRACE('EXCEPTION CONTROLLED_ERROR GE_BOTechnicalService.ProcessItemWarranty', 1);
            RAISE;
        WHEN OTHERS THEN
            ROLLBACK;
            UT_TRACE.TRACE('EXCEPTION OTHERS GE_BOTechnicalService.ProcessItemWarranty', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSITEMWARRANTY;
    
    
    



















    PROCEDURE NOTIFYEQUIPMENTREADY
    (
        IRCITEMSERIADO      IN  DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO,
        RCUNIITEMBALAMOV    IN  DAOR_UNI_ITEM_BALA_MOV.STYOR_UNI_ITEM_BALA_MOV,
        IONUNEWESTADOINV    IN  OUT GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE
    )
    IS

    BEGIN

        CF_BOACTIONS.NOTIFYACCEPTITEMS
        (
            IRCITEMSERIADO,
            RCUNIITEMBALAMOV,
            IONUNEWESTADOINV
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END NOTIFYEQUIPMENTREADY;
    
    
    

































    PROCEDURE ASSIGNORDFOREQACCEPTED
    (
        INUIDITEMSERIADO    IN GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        INUNEWSTATUSSTOCK   IN GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        INUOPERATINGUNITID  IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    )
    IS
        NUPACKAGEID        MO_PACKAGES.PACKAGE_ID%TYPE;
        TBORDERACTIVITIES  OR_BCORDERACTIVITIES.TYTBORDERANDACTIVITY;
        RCORDER            DAOR_ORDER.STYOR_ORDER;
        NUINDEX            BINARY_INTEGER;
        
        TYPE TYBTORDERPROCCESSED IS TABLE OF CHAR INDEX BY VARCHAR2(15);
        
        TBORDERPROCCESSED TYBTORDERPROCCESSED;
    BEGIN
        UT_TRACE.TRACE('GE_BOTechnicalService.AssignOrdForEqAccepted ( '||
                        INUIDITEMSERIADO||','||
                        INUNEWSTATUSSTOCK||','||
                        INUOPERATINGUNITID||')', 2);

        
        IF INUNEWSTATUSSTOCK NOT IN (GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA,
                                     GE_BOITEMSCONSTANTS.CNUSTATUS_EN_AISLAMIENTO)
        THEN
            RETURN;
        END IF;

        
        CF_BOACTIONS.GETTECHNICALSERVICEREQ(INUIDITEMSERIADO,NUPACKAGEID);
        UT_TRACE.TRACE('Solicitud de servicio t�cnico para seriado ['||INUIDITEMSERIADO||'] : '||NUPACKAGEID,2);

        
        OR_BCORDERACTIVITIES.GETPENDORDACTBYSERIALITEM(INUIDITEMSERIADO, TBORDERACTIVITIES, OR_BOCONSTANTS.CSBFINISHSTATUS, NUPACKAGEID);

        NUINDEX := TBORDERACTIVITIES.FIRST;
        LOOP
            EXIT WHEN NUINDEX IS NULL;

            IF NOT TBORDERPROCCESSED.EXISTS(TO_CHAR(TBORDERACTIVITIES(NUINDEX).NUORDERID)) THEN
                
                RCORDER := DAOR_ORDER.FRCGETRECORD(TBORDERACTIVITIES(NUINDEX).NUORDERID);

                UT_TRACE.TRACE('Procesar la orden : '||RCORDER.ORDER_ID, 2);
                
                IF (RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED) THEN

                   UT_TRACE.TRACE('Asigna la orden : '||RCORDER.ORDER_ID, 2);

                   OR_BOPROCESSORDER.ASSIGN
                   (
                        RCORDER,
                        INUOPERATINGUNITID,
                        SYSDATE,
                        FALSE,
                        FALSE,
                        NULL,
                        NULL,
                        TRUE
                   );
                END IF;
                
                
                TBORDERPROCCESSED(TO_CHAR(RCORDER.ORDER_ID)) := 'X';
            END IF;
            
            NUINDEX := TBORDERACTIVITIES.NEXT( NUINDEX );
        END LOOP;
        
        TBORDERACTIVITIES.DELETE;
        TBORDERPROCCESSED.DELETE;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNORDFOREQACCEPTED;



    















    FUNCTION FSBISVALSERTECHTOLEG
    (
        INUUNITID       OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUSERIALITEM   GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE
    )
    RETURN VARCHAR2
    IS
        
        NUSERIALUNIT    OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
    BEGIN

        
        NUSERIALUNIT := DAGE_ITEMS_SERIADO.FNUGETOPERATING_UNIT_ID(INUSERIALITEM);

        UT_TRACE.TRACE('-- Unidad Operativa del equipo '||NUSERIALUNIT, 1);

        
        
        IF (NUSERIALUNIT IS NOT NULL) THEN
            IF ((
                NUSERIALUNIT  <> INUUNITID
                AND
                NUSERIALUNIT <> DAOR_OPERATING_UNIT.FNUGETASSO_OPER_UNIT(INUUNITID)
                )
                OR
                DAGE_ITEMS_SERIADO.FNUGETID_ITEMS_ESTADO_INV(INUSERIALITEM)<>GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA
                ) THEN
                RETURN OR_BOCONSTANTS.CSBNO;
            ELSE
                RETURN OR_BOCONSTANTS.CSBSI;
            END IF;
        ELSE
            UT_TRACE.TRACE('-- El Equipo no tiene unidad operativa asociada', 1);

            RETURN OR_BOCONSTANTS.CSBNO;
        END IF;

        EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBISVALSERTECHTOLEG;

    














    FUNCTION FRFGETITEMSRETURN (INUPACKAGEID  MO_PACKAGES.PACKAGE_ID%TYPE)
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFITEMS                 CONSTANTS.TYREFCURSOR;
    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.frfGetItemsReturn',10);

        RFITEMS :=  GE_BCTECHNICALSERVICE.FRFGETITEMSRETURN(INUPACKAGEID);

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.frfGetItemsReturn',10);
        
        RETURN RFITEMS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.frfGetItemsReturn',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.frfGetItemsReturn',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETITEMSRETURN;
    
    
































    PROCEDURE RETURNITEMS (INUPACKAGEID     IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                           INUSERIALITEMID  IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
                           INUOPERATINGUNIT IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
                           BLNOTIFYWF       IN  BOOLEAN,
                           ONUERRORCODE     OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
                           OSBERRORMESS     OUT GE_ERROR_LOG.DESCRIPTION%TYPE)
    IS
        RCITEMMOV           DAOR_UNI_ITEM_BALA_MOV.STYOR_UNI_ITEM_BALA_MOV;
        RCSERIALITEM        DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
        NUDOCUMENTO         GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE;
        NUUNIITEMMOVID      OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE;
        SBITEMSESTADOINV    GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE;
        NUINSTANCEWF        GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.ReturnItems',10);

        
        RCITEMMOV := OR_BCITEMSMOVE.FRCGETMOVBYPACKAGE(INUPACKAGEID, INUSERIALITEMID);

        
        RCSERIALITEM := DAGE_ITEMS_SERIADO.FRCGETRECORD(INUSERIALITEMID);

        
        
        IF ((RCSERIALITEM.PROPIEDAD NOT IN (GE_BOITEMSCONSTANTS.CSBTRAIDO_CLIENTE, GE_BOITEMSCONSTANTS.CSBVENDIDO_CLIENTE)) AND
            (RCITEMMOV.TARGET_OPER_UNIT_ID <> RCITEMMOV.OPERATING_UNIT_ID)) THEN
            OR_BOITEMSMOVE.REGISTERITEMSMOVE
            (
                RCITEMMOV.TARGET_OPER_UNIT_ID,
                INUOPERATINGUNIT,
                RCSERIALITEM.ITEMS_ID,
                RCSERIALITEM,
                OR_BOITEMSMOVE.CSBINCREASEMOVETYPE,
                GE_BOITEMSCONSTANTS.CNUMOVCAUSAINGTECSER,
                NUDOCUMENTO,
                1,
                RCSERIALITEM.COSTO,
                NULL,
                RCITEMMOV.INIT_INV_STAT_ITEMS,
                NUUNIITEMMOVID
            );
        END IF;

        
        OR_BOITEMSMOVE.REGISTERITEMSMOVE
        (
            INUOPERATINGUNIT,
            RCITEMMOV.TARGET_OPER_UNIT_ID,
            RCSERIALITEM.ITEMS_ID,
            RCSERIALITEM,
            OR_BOITEMSMOVE.CSBDECREASEMOVETYPE,
            GE_BOITEMSCONSTANTS.CNUMOVCAUSASALTECSER,
            NUDOCUMENTO,
            1,
            RCSERIALITEM.COSTO,
            NULL,
            RCITEMMOV.INIT_INV_STAT_ITEMS,
            NUUNIITEMMOVID
        );

        SBITEMSESTADOINV := GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE;
        IF ((RCSERIALITEM.PROPIEDAD = GE_BOITEMSCONSTANTS.FSBOBTTRAIDOCLIENTE) OR
            (RCSERIALITEM.PROPIEDAD = GE_BOITEMSCONSTANTS.FSBOBTVENDCLIENTE)) THEN
            SBITEMSESTADOINV := GE_BOITEMSCONSTANTS.CNUSTATUS_ENUSO;
        END IF;

        
        RCSERIALITEM.ID_ITEMS_ESTADO_INV := NVL(RCITEMMOV.INIT_INV_STAT_ITEMS, SBITEMSESTADOINV);

        
        RCSERIALITEM.OPERATING_UNIT_ID := RCITEMMOV.TARGET_OPER_UNIT_ID;

        
        DAGE_ITEMS_SERIADO.UPDRECORD(RCSERIALITEM);
        
        

         IF BLNOTIFYWF THEN
            
            NUINSTANCEWF := GE_BCTECHNICALSERVICE.FNUGETRETURNACTIVITY(INUPACKAGEID,INUSERIALITEMID);
            WF_BOANSWER_RECEPTOR.ANSWERRECEPTOR(NUINSTANCEWF,CNUCAUSALSUCCESSID);
         END IF;

         UT_TRACE.TRACE('FIN GE_BOTechnicalService.ReturnItems',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.ReturnItems',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.ReturnItems',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RETURNITEMS;
    
    

















    PROCEDURE SETRETURNACTIVITY (INUREQUESTID   IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                                 INUWFPLANID    IN   GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE)
    IS

    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.SetReturnActivity',10);

         

        GE_BCTECHNICALSERVICE.SETRETURNACTIVITY(INUREQUESTID, INUWFPLANID);

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.SetReturnActivity',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.SetReturnActivity',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.SetReturnActivity',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETRETURNACTIVITY;
    
    

















    PROCEDURE SETWARRANTYRETACT (INUREQUESTID   IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                                 INUWFPLANID    IN   GE_TECH_SERVICE_DET.WARR_RET_WF_INST_ID%TYPE)
    IS

    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.SetWarrantyRetAct',10);

         
        GE_BCTECHNICALSERVICE.SETWARRANTYRETACT(INUREQUESTID, INUWFPLANID);

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.SetWarrantyRetAct',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.SetWarrantyRetAct',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.SetWarrantyRetAct',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETWARRANTYRETACT;
    
    




















    PROCEDURE RECEIPTEQUIPMENT ( ISBSERIAL      IN   GE_ITEMS_SERIADO.SERIE%TYPE,
                                 INUPACKAGEID   IN   MO_PACKAGES.PACKAGE_ID%TYPE)
    IS
        NUOPERATINGUNIT     OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        RCSERIALITEM        DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
        NUUNIITEMMOVID      OR_UNI_ITEM_BALA_MOV.UNI_ITEM_BALA_MOV_ID%TYPE;
        NUDOCUMENTO         GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE;
        RCTECHSERVDET       DAGE_TECH_SERVICE_DET.STYGE_TECH_SERVICE_DET;
        NUPERSONID          GE_PERSON.PERSON_ID%TYPE;
        TBOPERUNIT          DAOR_OPERATING_UNIT.TYTBOPERATING_UNIT_ID;
        RFACTIVITIES        CONSTANTS.TYREFCURSOR;
        TBACTIVITY          TYTBACTIVITY;
        NUUPDATEDREG        NUMBER;
        
        NUNEWITEMINVSTATUS  GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV%TYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.ReceiptEquipment',10);

        
        GE_BOITEMSSERIADO.GETITEMSERBYSERIE(ISBSERIAL, RCSERIALITEM);
        
        IF RCSERIALITEM.ID_ITEMS_SERIADO IS NULL THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUNOT_EXIST, ISBSERIAL);
        END IF;
        
        
        NUPERSONID :=  GE_BOPERSONAL.FNUGETPERSONID;
        TBOPERUNIT := OR_BCOPERATINGUNIT.FTBGETOPEUNIBYPERSON(NUPERSONID, OR_BOCONSTANTS.CNULABORATORYCLASSIF );
        
        
        NUNEWITEMINVSTATUS := FNUSTATUSFORRECEIPT( INUPACKAGEID );

        
        IF (TBOPERUNIT.COUNT = 0) THEN
                ERRORS.SETERROR(CNUERR_AVAILABLE );
                RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        NUOPERATINGUNIT := TBOPERUNIT(TBOPERUNIT.FIRST);
        
        
        NUDOCUMENTO := GE_BCITEMSDOCUMENTO.FNUGETITEMSDOCBYDOCEXT(
            GE_BOITEMSCONSTANTS.CNUTIPOENVIOTECNSERV,
            NUOPERATINGUNIT,
            INUPACKAGEID
        );
        
        IF NUDOCUMENTO IS NULL THEN
            
            GE_BOITEMSDOCUMENTO.REGISTRARDOCUMENTO
            (
                GE_BOITEMSCONSTANTS.CNUTIPOENVIOTECNSERV,
                NUOPERATINGUNIT,
                NUOPERATINGUNIT,
                UT_DATE.FDTSYSDATE,
                INUPACKAGEID,
                GE_BOITEMSCONSTANTS.CSBESTADOCERRADO,
                NULL,
                NUDOCUMENTO,
                INUPACKAGEID
            );
        END IF;
        
        
        GE_BOTECHNICALSERVICE.GETACTIVITIESBYPACK(INUPACKAGEID,RFACTIVITIES);
        FETCH RFACTIVITIES BULK COLLECT INTO TBACTIVITY;
        
        
        IF TBACTIVITY.FIRST IS NULL THEN
            ERRORS.SETERROR(CNUERR_RECEIPT);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        
        GE_BCTECHNICALSERVICE.UPDACTIVITYSERIAL(
                INUPACKAGEID,
                TBACTIVITY(TBACTIVITY.FIRST).ORDER_ACTIVITY_ID,
                RCSERIALITEM.ID_ITEMS_SERIADO,
                NULL,
                NUUPDATEDREG
            );
        IF (NUUPDATEDREG = 0) THEN
            GE_BOERRORS.SETERRORCODE(10724);
        END IF;
        
        
        
        IF ((RCSERIALITEM.PROPIEDAD NOT IN (GE_BOITEMSCONSTANTS.CSBTRAIDO_CLIENTE,GE_BOITEMSCONSTANTS.CSBVENDIDO_CLIENTE)) AND
            (RCSERIALITEM.OPERATING_UNIT_ID IS NOT NULL)) THEN
            OR_BOITEMSMOVE.REGISTERITEMSMOVE
            (
                RCSERIALITEM.OPERATING_UNIT_ID,
                NUOPERATINGUNIT,
                RCSERIALITEM.ITEMS_ID,
                RCSERIALITEM,
                OR_BOITEMSMOVE.CSBDECREASEMOVETYPE,
                GE_BOITEMSCONSTANTS.CNUMOVCAUSASALTECSER,
                NUDOCUMENTO,
                1,
                RCSERIALITEM.COSTO,
                NULL,
                NUNEWITEMINVSTATUS,
                NUUNIITEMMOVID
            );
        END IF;

        
        OR_BOITEMSMOVE.REGISTERITEMSMOVE
        (
            NUOPERATINGUNIT,
            NVL(RCSERIALITEM.OPERATING_UNIT_ID, NUOPERATINGUNIT),
            RCSERIALITEM.ITEMS_ID,
            RCSERIALITEM,
            OR_BOITEMSMOVE.CSBINCREASEMOVETYPE,
            GE_BOITEMSCONSTANTS.CNUMOVCAUSAINGTECSER,
            NUDOCUMENTO,
            1,
            RCSERIALITEM.COSTO,
            NULL,
            NUNEWITEMINVSTATUS,
            NUUNIITEMMOVID
        );

        
        DAGE_ITEMS_SERIADO.UPDID_ITEMS_ESTADO_INV(
            RCSERIALITEM.ID_ITEMS_SERIADO, NUNEWITEMINVSTATUS
        );

        
        
        RCTECHSERVDET.TECH_SERVICE_DET_ID  := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_TECH_SERVICE_DET','SEQ_GE_TECH_SERVICE_175065');
        RCTECHSERVDET.PACKAGE_ID           := INUPACKAGEID;
        RCTECHSERVDET.SERIAL_ITEM_ID       := RCSERIALITEM.ID_ITEMS_SERIADO;

        DAGE_TECH_SERVICE_DET.INSRECORD(RCTECHSERVDET);

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.ReceiptEquipment',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.ReceiptEquipment',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.ReceiptEquipment',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RECEIPTEQUIPMENT;
    
    
    


















    PROCEDURE RECEIPTEQBYCOMPONENT
    (
        INUPACKAGEID     IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUPRCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
        SBSERIE PR_COMPONENT.SERVICE_NUMBER%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.ReceiptEqByComponent',10);
        
        
        SBSERIE := DAPR_COMPONENT.FSBGETSERVICE_NUMBER( INUPRCOMPONENTID );
        
        
        RECEIPTEQUIPMENT( SBSERIE, INUPACKAGEID );

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.ReceiptEqByComponent',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.ReceiptEqByComponent',10);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.ReceiptEqByComponent',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RECEIPTEQBYCOMPONENT;
    
    

















    PROCEDURE ASSOCIATEEQUIPMENT ( ISBSERIAL      IN   GE_ITEMS_SERIADO.SERIE%TYPE,
                                 INUPACKAGEID   IN   MO_PACKAGES.PACKAGE_ID%TYPE)
    IS
        RCSERIALITEM        DAGE_ITEMS_SERIADO.STYGE_ITEMS_SERIADO;
    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.AssociateEquipment',10);

         
        GE_BOITEMSSERIADO.GETITEMSERBYSERIE(ISBSERIAL, RCSERIALITEM);
        
        GE_BCTECHNICALSERVICE.ASSOCIATEEQUIPMENT(RCSERIALITEM.ID_ITEMS_SERIADO, INUPACKAGEID);

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.AssociateEquipment',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.AssociateEquipment',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.AssociateEquipment',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASSOCIATEEQUIPMENT;
    
    















    PROCEDURE ASSIGNREPAIRORDER ( ISBSERIAL      IN   GE_ITEMS_SERIADO.SERIE%TYPE,
                                 INUPACKAGEID   IN   MO_PACKAGES.PACKAGE_ID%TYPE)
    IS
        NUOPERATINGUNITID    OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        TBORDERACTIVITIES    OR_BCORDERACTIVITIES.TYTBORDERANDACTIVITY;
        RCORDER              DAOR_ORDER.STYOR_ORDER;
        
    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.AssignRepairOrder',10);

        
        NUOPERATINGUNITID := GE_BOITEMSSERIADO.FNUOPERATINGUNITBYSERIE(ISBSERIAL);

         
        OR_BCORDERACTIVITIES.GETPENDORDACTBYPACK(INUPACKAGEID, TBORDERACTIVITIES);

        IF TBORDERACTIVITIES.EXISTS(0) THEN

            FOR I IN TBORDERACTIVITIES.FIRST .. TBORDERACTIVITIES.LAST LOOP

                
                RCORDER := DAOR_ORDER.FRCGETRECORD(TBORDERACTIVITIES(0).NUORDERID);

                UT_TRACE.TRACE('Procesar la orden : '||RCORDER.ORDER_ID, 2);
                
                IF (RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED) THEN

                   
                   UT_TRACE.TRACE('Asigna la orden : '||RCORDER.ORDER_ID, 2);

                   OR_BOPROCESSORDER.ASSIGN
                   (
                        RCORDER,
                        NUOPERATINGUNITID,
                        SYSDATE,
                        FALSE,
                        FALSE,
                        NULL,
                        NULL,
                        TRUE
                   );

                   RETURN;
                END IF;
            END LOOP;
        END IF;
        

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.AssignRepairOrder',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.AssignRepairOrder',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.AssignRepairOrder',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNREPAIRORDER;
    
    












    FUNCTION FRFGETOPERATINGUNITLAB
    RETURN CONSTANTS.TYREFCURSOR
    IS
         RFOPERATINGUNIT CONSTANTS.TYREFCURSOR;
         NUPERSONID          GE_PERSON.PERSON_ID%TYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.frfGetOperatingUnitLab',10);

        NUPERSONID :=  GE_BOPERSONAL.FNUGETPERSONID;
        RFOPERATINGUNIT := OR_BCOPERATINGUNIT.FRFGETOPEUNIBYPERSONANDCLASS(NUPERSONID, OR_BOCONSTANTS.CNULABORATORYCLASSIF);
        
        UT_TRACE.TRACE('FIN GE_BOTechnicalService.frfGetOperatingUnitLab',10);
        
        RETURN RFOPERATINGUNIT;
    EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
             UT_TRACE.TRACE('--[CONTROLLED_ERROR] GE_BOTechnicalService.frfGetOperatingUnitLab', 12);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('--[others] GE_BOTechnicalService.frfGetOperatingUnitLab', 12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETOPERATINGUNITLAB;
    
    
    















    FUNCTION FNUSTATUSFORRECEIPT
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV%TYPE
    IS
        NUPACKAGETYPEID MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
        SBTAGNAME       PS_PACKAGE_TYPE.TAG_NAME%TYPE;
        NUSTATUS        GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV%TYPE;
    BEGIN
        IF FSBISTECHNICALSERVICE( INUPACKAGEID ) = GE_BOCONSTANTS.CSBYES THEN
            NUSTATUS := GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA;
        ELSIF FSBISEXTERNTECHSERVICE( INUPACKAGEID ) = GE_BOCONSTANTS.CSBYES THEN
            NUSTATUS := GE_BOITEMSCONSTANTS.CNUSTATUS_EN_AISLAMIENTO;
        END IF;
        RETURN NUSTATUS;
    EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('--[CONTROLLED_ERROR] GE_BOTechnicalService.fnuStatusForReceipt', 12);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('--[others] GE_BOTechnicalService.fnuStatusForReceipt', 12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUSTATUSFORRECEIPT;

    














    FUNCTION FSBISTECHNICALSERVICE
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUPACKAGETYPEID MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
        SBTAGNAME       PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOTechnicalService.fsbISTechnicalService', 12);
        
        NUPACKAGETYPEID := DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID( INUPACKAGEID, 0 );
        SBTAGNAME       := DAPS_PACKAGE_TYPE.FSBGETTAG_NAME( NUPACKAGETYPEID, 0 );

        
        IF INSTR( SBTAGNAME, CSBTECH_SERV )>0 THEN
            UT_TRACE.TRACE('--[FIN] GE_BOTechnicalService.fsbISTechnicalService-1', 12);
            RETURN GE_BOCONSTANTS.CSBYES;
        END IF;

        UT_TRACE.TRACE('--[FIN] GE_BOTechnicalService.fsbISTechnicalService-2', 12);
        RETURN GE_BOCONSTANTS.CSBNO;
    EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('--[CONTROLLED_ERROR] GE_BOTechnicalService.fsbISTechnicalService', 12);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('--[others] GE_BOTechnicalService.fsbISTechnicalService', 12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBISTECHNICALSERVICE;


    















    FUNCTION FSBISEXTERNTECHSERVICE
    (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUPACKAGETYPEID MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
        SBTAGNAME       PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOTechnicalService.fsbISExternTechService', 12);
        
        NUPACKAGETYPEID := DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID( INUPACKAGEID, 0 );
        SBTAGNAME       := DAPS_PACKAGE_TYPE.FSBGETTAG_NAME( NUPACKAGETYPEID, 0 );

        
        IF INSTR( SBTAGNAME, CSBTECH_SERV_EXTERN )>0 THEN
            UT_TRACE.TRACE('--[FIN] GE_BOTechnicalService.fsbISExternTechService-1', 12);
            RETURN GE_BOCONSTANTS.CSBYES;
        END IF;

        UT_TRACE.TRACE('--[FIN] GE_BOTechnicalService.fsbISExternTechService-2', 12);
        RETURN GE_BOCONSTANTS.CSBNO;
    EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('--[CONTROLLED_ERROR] GE_BOTechnicalService.fsbISExternTechService', 12);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('--[others] GE_BOTechnicalService.fsbISTechnicalService', 12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBISEXTERNTECHSERVICE;


END GE_BOTECHNICALSERVICE;