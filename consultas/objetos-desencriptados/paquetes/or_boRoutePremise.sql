PACKAGE or_boRoutePremise
IS
    













































































































    
    
    
    CSBOR_ROUTE     CONSTANT    GE_ENTITY.NAME_%TYPE := 'OR_ROUTE';
    
    
    
    
    
    
    FUNCTION FSBVERSION
    RETURN UT_DATATYPES.STYSAOVERSION;

    




    PROCEDURE ADDPREMISETOROUTE
    (
        INUROUTEID       IN OR_ROUTE_COMPONENTS.ROUTE_ID%TYPE,
        INUPREMISEID     IN OR_ROUTE_PREMISE.PREMISE_ID%TYPE,
        INUCONSECUTIVE   IN OR_ROUTE_PREMISE.CONSECUTIVE%TYPE
    );

    





    PROCEDURE REMPREMISEOFROUTE
    (
        INUROUTEID       IN OR_ROUTE_COMPONENTS.ROUTE_ID%TYPE,
        INUPREMISEID     IN OR_ROUTE_PREMISE.PREMISE_ID%TYPE
    );

    










    PROCEDURE GETROUTECONSFROMADDRESS
    (
        INUADDRESSID          IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUTASKTYPEID         IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUTASKTYPECLASIFID   IN  OR_TASK_TYPE.TASK_TYPE_CLASSIF%TYPE,
        IBLGROUPBYBASEADDRESS IN  UT_DATATYPES.STYBOOLEAN,
        ONUROUTEID            OUT NOCOPY OR_ROUTE_PREMISE.ROUTE_ID%TYPE,
        ONUCONSECUTIVE        OUT NOCOPY OR_ROUTE_PREMISE.CONSECUTIVE%TYPE
    );

    












    FUNCTION FNUCONSECUTIVEFROMADDRESS
    (
        INUADDRESSID           IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUACTIVITYID          IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    RETURN  OR_ROUTE_PREMISE.CONSECUTIVE%TYPE;

    












    FUNCTION FNUROUTEFROMADDRESS
    (
        INUADDRESSID           IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUACTIVITYID          IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    RETURN  OR_ROUTE_PREMISE.ROUTE_ID%TYPE;

    




    PROCEDURE ADDPREMTONORMALROUTE
    (
        INUROUTE                IN  OR_ROUTE.ROUTE_ID%TYPE,
        INUPREVPREMISE          IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUNEWPREMISE           IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUNEXTPREMISE          IN  AB_PREMISE.PREMISE_ID%TYPE,
        IBLBETWEENADDRESS       IN  UT_DATATYPES.STYBOOLEAN,
        IBLSAVECHANGES          IN  UT_DATATYPES.STYBOOLEAN DEFAULT GE_BOCONSTANTS.GETTRUE
    );

    




    PROCEDURE ADDPREMTODEDICROUTE
    (
        INUROUTE                IN  OR_ROUTE.ROUTE_ID%TYPE,
        INUPREVPREMISE          IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUNEWPREMISE           IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUNEXTPREMISE          IN  AB_PREMISE.PREMISE_ID%TYPE,
        IBLBETWEENADDRESS       IN  UT_DATATYPES.STYBOOLEAN
    );

    






    PROCEDURE REGECONSECUDEDICROUTE
    (
        INUROUTEID      IN      OR_ROUTE.ROUTE_ID%TYPE,
        INUADDRESSID    IN      AB_ADDRESS.ADDRESS_ID%TYPE
    );

    






    PROCEDURE HASCYCLEROUTE
    (
        INUCYCLE      IN      AB_PREMISE.BILLING_CYCLE_ID%TYPE,
        OSBHASROUTE   OUT     UT_DATATYPES.STYYESORNO
    );

    
    
    PROCEDURE GETROUTEANDCONSECUTIVE
    (
        INUADDRESSID    IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        ONUROUTEID      OUT NOCOPY OR_ROUTE_PREMISE.ROUTE_ID%TYPE,
        ONUCONSECUTIVE  OUT NOCOPY OR_ROUTE_PREMISE.CONSECUTIVE%TYPE
    );
    
    





    FUNCTION FNUGETNEWCHILDCONSECUTIVE
    (
        INUOLDBASE              IN  AB_PREMISE.CONSECUTIVE%TYPE,
        INUNEWBASE              IN  AB_PREMISE.CONSECUTIVE%TYPE,
        INUCURRENTCONSECUTIVE   IN  AB_PREMISE.CONSECUTIVE%TYPE
    )
    RETURN AB_PREMISE.CONSECUTIVE%TYPE;
    
    





    PROCEDURE ADDPREMISETOROUTEBYXML
    (
        ICLDATA         IN  UT_DATATYPES.STYCLOB
    );

END OR_BOROUTEPREMISE;

PACKAGE BODY or_boRoutePremise
IS
    


















































































































    
    
    

    TYPE TYTBPREMISEID      IS TABLE OF OR_ROUTE_PREMISE.PREMISE_ID%TYPE INDEX BY UT_DATATYPES.STYNUMBERINDEX;
    TYPE TYTBROUTEID        IS TABLE OF OR_ROUTE_PREMISE.ROUTE_ID%TYPE INDEX BY UT_DATATYPES.STYVARCHARINDEX;
    TYPE TYTBCONSECUTIVE    IS TABLE OF OR_ROUTE_PREMISE.CONSECUTIVE%TYPE INDEX BY UT_DATATYPES.STYVARCHARINDEX;

    
    
    
    CSBVERSION                  CONSTANT UT_DATATYPES.STYSAOVERSION := 'SAO581720';

    
    
    
    
    CNUERROR_900465             CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900465;

    
    CNUERROR_110542             CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 110542;

    
    CNUERROR_900661             CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900661;

    
    CNUERROR900554              CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900554;

    
    CNUERROR_902220             CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 902220;
    
    
    CNUXML_ERROR                CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 6213;

    
    CSBROUTE_ID                 CONSTANT GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE := 'ROUTE_ID';
    CSBCONSECUTIVE              CONSTANT GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE := 'CONSECUTIVE';
    
    
    CSBXSD_ADDPREMISETOROUTE    CONSTANT UT_DATATYPES.STYXMLTAG := 'XSD_OS_AddPremiseToRouteByXML.xsd';

    
    
    
    
    GNUADDRESSLOADID         AB_ADDRESS.ADDRESS_ID%TYPE;

    
    GNUTASKTYPECLASIFLOADID  OR_TASK_TYPE.TASK_TYPE_CLASSIF%TYPE;

    
    GNUTASKTYPELOADID        OR_TASK_TYPE.TASK_TYPE_ID%TYPE;

    
    GNUACTIVITYLOADID        GE_ITEMS.ITEMS_ID%TYPE;

    
    GNUROUTEACTIVITYLOADID   OR_ROUTE_PREMISE.ROUTE_ID%TYPE;

    
    GNUCONSECUTIVEACTIVITYLOAD      OR_ROUTE_PREMISE.CONSECUTIVE%TYPE;

    
    GTBPREMISEID            TYTBPREMISEID;

    
    GTBROUTEID              TYTBROUTEID;
    GTBCONSECUTIVE          TYTBCONSECUTIVE;

    
    
    
    













    FUNCTION FSBVERSION
    RETURN UT_DATATYPES.STYSAOVERSION
    IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

    



















    PROCEDURE LOADTASKTYPECLASIF
    (
        INUTASKTYPEID  IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    IS
    BEGIN
        IF (  INUTASKTYPEID = GNUTASKTYPECLASIFLOADID ) THEN
            RETURN;
        ELSE
            
            GNUTASKTYPECLASIFLOADID := DAOR_TASK_TYPE.FNUGETTASK_TYPE_CLASSIF(INUTASKTYPEID);
            GNUTASKTYPELOADID       := INUTASKTYPEID;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADTASKTYPECLASIF;

    



















    PROCEDURE LOADACTIVITY
    (
        INUACTIVITYID          IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    IS
        NUTASKTYPEID  OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
    BEGIN
        IF ( INUACTIVITYID = GNUACTIVITYLOADID ) THEN
            RETURN;
        ELSE
            
            GNUACTIVITYLOADID:=INUACTIVITYID;

            
            OR_BOTASK_TYPE_ADMIN.GETITEMTASTYP(GNUACTIVITYLOADID, NUTASKTYPEID);

            
            LOADTASKTYPECLASIF(NUTASKTYPEID);

        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
              RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
              ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADACTIVITY;

    




















    PROCEDURE LOADADDRESS
    (
        INUADDRESSID           IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUACTIVITYID          IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    IS
        
        NUROUTEID     OR_ROUTE_PREMISE.ROUTE_ID%TYPE;
        
        NUCONSECUTIVE OR_ROUTE_PREMISE.CONSECUTIVE%TYPE;
    BEGIN
        IF (INUADDRESSID = GNUADDRESSLOADID ) THEN
            RETURN;
        ELSE

            
            GNUADDRESSLOADID := INUADDRESSID;
            LOADACTIVITY(INUACTIVITYID);

            GETROUTECONSFROMADDRESS
            (
                INUADDRESSID,
                GNUTASKTYPELOADID,
                GNUTASKTYPECLASIFLOADID,
                FALSE,
                NUROUTEID,
                NUCONSECUTIVE
            );

            
            GNUROUTEACTIVITYLOADID:= NUROUTEID;

            
            GNUCONSECUTIVEACTIVITYLOAD:= NUCONSECUTIVE;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
              RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
              ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADADDRESS;

    
































    PROCEDURE ADDPREMISETOROUTE
    (
        INUROUTEID       IN OR_ROUTE_COMPONENTS.ROUTE_ID%TYPE,
        INUPREMISEID     IN OR_ROUTE_PREMISE.PREMISE_ID%TYPE,
        INUCONSECUTIVE   IN OR_ROUTE_PREMISE.CONSECUTIVE%TYPE
    )
    IS
        RCROUTEPREMISE      DAOR_ROUTE_PREMISE.STYOR_ROUTE_PREMISE;
        NUROUTEPREMISEID    OR_ROUTE_PREMISE.ROUTE_PREMISE_ID%TYPE;
        
        CNUERROR_901632     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901632;
    BEGIN
        UT_TRACE.TRACE
        (
            'BEGIN or_boroutepremise.addPremiseToRoute ' || CHR(10) ||
            'inuRouteId: ' || INUROUTEID || CHR(10) ||
            'inuPremiseId: ' || INUPREMISEID || CHR(10) ||
            'inuConsecutive: ', 1
        );

        
        DAAB_PREMISE.ACCKEY(INUPREMISEID);

        OR_BOSPECIALIZEDROUTES.VALSPECIALIZEDROUTE(INUROUTEID, INUCONSECUTIVE, INUPREMISEID);
        
        OR_BOSPECIALIZEDROUTES.INSORUPDPREMINROUWCHIL
        (
            INUPREMISEID,
            INUROUTEID,
            INUCONSECUTIVE,
            TRUE,
            TRUE
        );
        
        UT_TRACE.TRACE('END or_boroutepremise.addPremiseToRoute', 1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boroutepremise.addPremiseToRoute', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boroutepremise.addPremiseToRoute', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDPREMISETOROUTE;

    
























    PROCEDURE REMPREMISEOFROUTE
    (
        INUROUTEID       IN OR_ROUTE_COMPONENTS.ROUTE_ID%TYPE,
        INUPREMISEID     IN OR_ROUTE_PREMISE.PREMISE_ID%TYPE
    )
    IS
        NUROUTEPREMISEID    OR_ROUTE_PREMISE.ROUTE_PREMISE_ID%TYPE;
        CNUERROR_901633     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901633; 
        CNUERROR_901763     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901763; 
    BEGIN
        UT_TRACE.TRACE('BEGIN or_boroutepremise.remPremiseOfRoute', 1);
        
        DAOR_ROUTE.ACCKEY(INUROUTEID);

        
        DAAB_PREMISE.ACCKEY(INUPREMISEID);

        
        NUROUTEPREMISEID := OR_BCROUTEPREMISE.FNUGETROUTEPREMISE(INUPREMISEID,INUROUTEID);
        IF (NUROUTEPREMISEID IS NULL) THEN
            ERRORS.SETERROR(CNUERROR_901633,INUPREMISEID||'|'||INUROUTEID||'-'||DAOR_ROUTE.FSBGETNAME(INUROUTEID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF (OR_BCROUTEPREMISE.FBLROUTEHASPREMCOMP(INUROUTEID,
                                                  INUPREMISEID)) THEN
            ERRORS.SETERROR(CNUERROR_901763,
                            INUPREMISEID||'|'||INUROUTEID||'-'||DAOR_ROUTE.FSBGETNAME(INUROUTEID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        OR_BOROUTE.DELETEPREMISEFROMROUTE
        (
            INUROUTEID,
            GE_BOCONSTANTS.CSBYES,
            INUPREMISEID
        );
        UT_TRACE.TRACE('END or_boroutepremise.remPremiseOfRoute', 1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boroutepremise.remPremiseOfRoute', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boroutepremise.remPremiseOfRoute', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REMPREMISEOFROUTE;

    

























    PROCEDURE GETNORMALROUTECONSFROMADDRESS
    (
        INUADDRESSID          IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        IBLGROUPBYBASEADDRESS IN  BOOLEAN,
        ONUROUTEID            OUT OR_ROUTE_PREMISE.ROUTE_ID%TYPE,
        ONUCONSECUTIVE        OUT OR_ROUTE_PREMISE.CONSECUTIVE%TYPE
    )
    IS
    BEGIN

        OR_BOORDERDATA.GETADDRESSROUTE
        (
            INUADDRESSID,
            ONUROUTEID,
            ONUCONSECUTIVE
        );

        

        IF ( ( ONUROUTEID IS NOT NULL )
            AND ( ONUCONSECUTIVE IS NULL )
            AND ( NOT IBLGROUPBYBASEADDRESS) ) THEN

                OR_BOORDERDATA.GETADDRESSROUTE(
                    AB_BOADDRESS.FNUBASEADDRBYCHILD(INUADDRESSID),
                    ONUROUTEID,
                    ONUCONSECUTIVE
                );
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNORMALROUTECONSFROMADDRESS;

    





































    PROCEDURE GETROUTECONSFROMADDRESS
    (
        INUADDRESSID          IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUTASKTYPEID         IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUTASKTYPECLASIFID   IN  OR_TASK_TYPE.TASK_TYPE_CLASSIF%TYPE,
        IBLGROUPBYBASEADDRESS IN  UT_DATATYPES.STYBOOLEAN,
        ONUROUTEID            OUT NOCOPY OR_ROUTE_PREMISE.ROUTE_ID%TYPE,
        ONUCONSECUTIVE        OUT NOCOPY OR_ROUTE_PREMISE.CONSECUTIVE%TYPE
    )
    IS
        SBGROUPBYBASEADDRESS    VARCHAR2(1);
        RCROUTEPREMISE  DAOR_ROUTE_PREMISE.STYOR_ROUTE_PREMISE;
    BEGIN

        ONUROUTEID     := NULL;
        ONUCONSECUTIVE := NULL;

        
        IF ( INUTASKTYPECLASIFID = OR_BCCONSTANTS.CNUROUTEDEDTASKCLASS ) THEN
            
            RCROUTEPREMISE := OR_BCROUTEPREMISE.FRCGETROUTEPREMISE(INUADDRESSID, INUTASKTYPEID);
            ONUROUTEID     := RCROUTEPREMISE.ROUTE_ID;
            ONUCONSECUTIVE := RCROUTEPREMISE.CONSECUTIVE;
        END IF;

        
        IF(ONUROUTEID IS NULL) THEN
            GETNORMALROUTECONSFROMADDRESS(INUADDRESSID, IBLGROUPBYBASEADDRESS, ONUROUTEID, ONUCONSECUTIVE );
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETROUTECONSFROMADDRESS;

    






























    PROCEDURE SETROUTECONSFROMADDRESS
    (
        INUADDRESSID          IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUACTIVITYID          IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    IS
        
        NUROUTEID     OR_ROUTE_PREMISE.ROUTE_ID%TYPE;
        
        NUCONSECUTIVE OR_ROUTE_PREMISE.CONSECUTIVE%TYPE;
    BEGIN

        IF ( INUACTIVITYID IS NULL) THEN

            GETNORMALROUTECONSFROMADDRESS(INUADDRESSID, FALSE, NUROUTEID, NUCONSECUTIVE);

            
            GNUROUTEACTIVITYLOADID:= NUROUTEID;

            
            GNUCONSECUTIVEACTIVITYLOAD:= NUCONSECUTIVE;
        ELSE
            LOADADDRESS(INUADDRESSID, INUACTIVITYID);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETROUTECONSFROMADDRESS;

    





























    FUNCTION FNUROUTEFROMADDRESS
    (
        INUADDRESSID           IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUACTIVITYID          IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    RETURN  OR_ROUTE_PREMISE.ROUTE_ID%TYPE
    IS
        NUROUTEID OR_ROUTE_PREMISE.ROUTE_ID%TYPE;
    BEGIN

        SETROUTECONSFROMADDRESS(INUADDRESSID, INUACTIVITYID);

        
        NUROUTEID := GNUROUTEACTIVITYLOADID;

        RETURN NUROUTEID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUROUTEFROMADDRESS;

    





























    FUNCTION FNUCONSECUTIVEFROMADDRESS
    (
        INUADDRESSID           IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUACTIVITYID          IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    RETURN  OR_ROUTE_PREMISE.CONSECUTIVE%TYPE
    IS
        NUCONSECUTIVE OR_ROUTE_PREMISE.CONSECUTIVE%TYPE;
    BEGIN

        SETROUTECONSFROMADDRESS(INUADDRESSID, INUACTIVITYID);

        
        NUCONSECUTIVE := GNUCONSECUTIVEACTIVITYLOAD;

        RETURN NUCONSECUTIVE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCONSECUTIVEFROMADDRESS;

    


























    PROCEDURE VALREPEATCONSNORMROUTE
    (
        INUCONSECUTIVE  IN          AB_PREMISE.CONSECUTIVE%TYPE,
        INUROUTEID      IN          OR_ROUTE.ROUTE_ID%TYPE,
        OSBREGECONS     OUT NOCOPY  UT_DATATYPES.STYMINVARCHAR
    )
    IS
        SBREGECONS      UT_DATATYPES.STYMINVARCHAR := GE_BOCONSTANTS.CSBNO;
    BEGIN
        UT_TRACE.TRACE('BEGIN or_boRoutePremise.ValRepeatConsNormRoute Consecutive['||INUCONSECUTIVE||']', 1);

        
        IF (NV_BCNORMALROUTES.FBOEXISTCONS(INUROUTEID,INUCONSECUTIVE)) THEN
            
            OR_BOROUTE.REGENERATECONSECUTIVE(INUROUTEID, NULL);
            SBREGECONS := GE_BOCONSTANTS.CSBYES;
        END IF;

        UT_TRACE.TRACE('END or_boRoutePremise.ValRepeatConsNormRoute RegeCons['||OSBREGECONS||']', 1);
        OSBREGECONS := SBREGECONS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boRoutePremise.ValRepeatConsNormRoute', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.ValRepeatConsNormRoute', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALREPEATCONSNORMROUTE;

    
























    FUNCTION FNUGETNEWCONSECUTIVE
    (
        INUINITPREMISEPIVOTE    IN    AB_PREMISE.PREMISE_ID%TYPE,
        INUFINALPREMISEPIVOTE   IN    AB_PREMISE.PREMISE_ID%TYPE,
        INUROUTE                IN    OR_ROUTE.ROUTE_ID%TYPE
    )
    RETURN AB_PREMISE.CONSECUTIVE%TYPE
    IS
        SBDEDICATEDROUTE        OR_ROUTE.DEDICATED_ROUTE%TYPE;
        NUINITCONSECUTIVE       AB_PREMISE.CONSECUTIVE%TYPE;
        NUFINALCONSECUTIVE      AB_PREMISE.CONSECUTIVE%TYPE;
        NUCONSECUTIVE           AB_PREMISE.CONSECUTIVE%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN or_boRoutePremise.fnuGetNewConsecutive'||CHR(10)||
                       'InitPremise['||INUINITPREMISEPIVOTE||'] FinalPremise['||INUFINALPREMISEPIVOTE||']', 1);

        
        SBDEDICATEDROUTE := DAOR_ROUTE.FSBGETDEDICATED_ROUTE(INUROUTE);

        UT_TRACE.TRACE('Route['||INUROUTE||'] IsDedicated['||SBDEDICATEDROUTE||']', 1);

        
        IF (SBDEDICATEDROUTE = GE_BOCONSTANTS.CSBYES) THEN

            
            NUINITCONSECUTIVE  := OR_BCSPECIALIZEDROUTES.FNUMAXCONSBYPREMWCHILD(INUROUTE, INUINITPREMISEPIVOTE);

            
            NUFINALCONSECUTIVE := OR_BCROUTEPREMISE.FNUCONSBYPREMDEDROUTE(INUROUTE, INUFINALPREMISEPIVOTE);

        ELSE 

            
            NUINITCONSECUTIVE  := NV_BCNORMALROUTES.FNUMAXCONSBYPREMWCHILD(INUINITPREMISEPIVOTE);

            
            NUFINALCONSECUTIVE := DAAB_PREMISE.FNUGETCONSECUTIVE(INUFINALPREMISEPIVOTE, 0);
        END IF;

        
        NUCONSECUTIVE := (NUINITCONSECUTIVE + NUFINALCONSECUTIVE) / 2;

        UT_TRACE.TRACE('END or_boRoutePremise.fnuGetNewConsecutive Consecutive['||NUCONSECUTIVE||']', 1);
        RETURN NUCONSECUTIVE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boRoutePremise.fnuGetNewConsecutive', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.fnuGetNewConsecutive', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETNEWCONSECUTIVE;

    


































    PROCEDURE ADDPREMMIDDLENORROUTE
    (
        INUNEWPREMISE           IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUINITPREMISEPIVOTE    IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUFINALPREMISEPIVOTE   IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUROUTE                IN      OR_ROUTE.ROUTE_ID%TYPE
    )
    IS
        NUCONSECUTIVE       AB_PREMISE.CONSECUTIVE%TYPE;
        SBREGECONS          UT_DATATYPES.STYMINVARCHAR;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.addPremMiddleNorRoute'||CHR(10)||
                       'PrevPremisePivote['||INUINITPREMISEPIVOTE||'] NextPremisePivote['||INUFINALPREMISEPIVOTE||'] NewPremise['||INUNEWPREMISE||']',1);

        
        NUCONSECUTIVE := FNUGETNEWCONSECUTIVE(INUINITPREMISEPIVOTE, INUFINALPREMISEPIVOTE, INUROUTE);

        
        VALREPEATCONSNORMROUTE(NUCONSECUTIVE, INUROUTE, SBREGECONS);

        
        IF (SBREGECONS = GE_BOCONSTANTS.CSBYES) THEN

            
            NUCONSECUTIVE := FNUGETNEWCONSECUTIVE(INUINITPREMISEPIVOTE, INUFINALPREMISEPIVOTE, INUROUTE);
        END IF;

        
        NV_BONORMALROUTES.UPDPREMISEWITHCHILDREN(INUNEWPREMISE,INUROUTE,NUCONSECUTIVE);

        
        OR_BOROUTE.UPDNORMALROUTEORDERS(INUROUTE);

        
        OR_BOROUTE.UPDROUTEGEOMETRY(INUROUTE, GE_BOCONSTANTS.CSBNO);

        UT_TRACE.TRACE('[END] or_boRoutePremise.addPremMiddleNorRoute',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boRoutePremise.addPremMiddleNorRoute',1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.addPremMiddleNorRoute',1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDPREMMIDDLENORROUTE;

    








































    PROCEDURE ADDINITPREMNORROUTE
    (
        INUNEWPREMISE           IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUINITPREMISEPIVOTE    IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUROUTE                IN      OR_ROUTE.ROUTE_ID%TYPE
    )
    IS
        NUFIRSTPREMISECONS      AB_PREMISE.CONSECUTIVE%TYPE;
        NUNEWFINALCONSECUTIVE   AB_PREMISE.CONSECUTIVE%TYPE;
        SBREGECONS              UT_DATATYPES.STYMINVARCHAR;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.addInitPremNorRoute'||CHR(10)||
                       'PremisePivote['||INUINITPREMISEPIVOTE||'] NewPremise['||INUNEWPREMISE||']',1);

        
        IF (INUINITPREMISEPIVOTE =  INUNEWPREMISE) THEN

            
            NV_BONORMALROUTES.UPDPREMISEWITHCHILDREN(INUNEWPREMISE, INUROUTE, OR_BOROUTE.CNUINITIALCONSECUTIVE);
        ELSE
            
            NUFIRSTPREMISECONS := AB_BCPREMISE.FNUFIRSTROUTECONS(INUROUTE);

            
            IF (OR_BCROUTEITINERARY.FNUAMOUNTITINERPREMISE(INUINITPREMISEPIVOTE) > 0) THEN
                
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR900554, NUFIRSTPREMISECONS);
            END IF;

            
            NUNEWFINALCONSECUTIVE := ( NUFIRSTPREMISECONS +
                                       OR_BCROUTE.FNUNEXTROUTECONS(INUROUTE,NUFIRSTPREMISECONS) )/2;

            
            VALREPEATCONSNORMROUTE(NUNEWFINALCONSECUTIVE, INUROUTE, SBREGECONS);

            
            IF (SBREGECONS = GE_BOCONSTANTS.CSBYES) THEN

                
                NUFIRSTPREMISECONS := AB_BCPREMISE.FNUFIRSTROUTECONS(INUROUTE);

                
                NUNEWFINALCONSECUTIVE := ( NUFIRSTPREMISECONS +
                                           OR_BCROUTE.FNUNEXTROUTECONS(INUROUTE,NUFIRSTPREMISECONS) )/2;
            END IF;

            
            IF (NUNEWFINALCONSECUTIVE IS NULL) THEN
                
                NUNEWFINALCONSECUTIVE := NUFIRSTPREMISECONS + OR_BOROUTE.CNUINCREMENT;
            END IF;

            
            NV_BONORMALROUTES.UPDPREMISEWITHCHILDREN(INUINITPREMISEPIVOTE,INUROUTE,NUNEWFINALCONSECUTIVE);

            
            NV_BONORMALROUTES.UPDPREMISEWITHCHILDREN(INUNEWPREMISE,INUROUTE,NUFIRSTPREMISECONS);
        END IF;

        
        OR_BOROUTE.UPDNORMALROUTEORDERS(INUROUTE);

        
        OR_BOROUTE.UPDROUTEGEOMETRY(INUROUTE, GE_BOCONSTANTS.CSBNO);

        UT_TRACE.TRACE('[END] or_boRoutePremise.addInitPremNorRoute',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boRoutePremise.addInitPremNorRoute',1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.addInitPremNorRoute',1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDINITPREMNORROUTE;

    


















    PROCEDURE ADDENDPREMNORROUTE
    (
        INUNEWPREMISE           IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUROUTE                IN      OR_ROUTE.ROUTE_ID%TYPE
    )
    IS
        NULASTROUTECONS     AB_PREMISE.CONSECUTIVE%TYPE;
        NUNEWCONSECUTIVE    AB_PREMISE.CONSECUTIVE%TYPE;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.addEndPremNorRoute NewPremise['||INUNEWPREMISE||']',1);

        
        NULASTROUTECONS := AB_BCPREMISE.FNULASTROUTECONS(INUROUTE);

        
        NUNEWCONSECUTIVE := NULASTROUTECONS + OR_BOROUTE.CNUINCREMENT;

        
        NV_BONORMALROUTES.UPDPREMISEWITHCHILDREN(INUNEWPREMISE, INUROUTE, NUNEWCONSECUTIVE);

        
        OR_BOROUTE.UPDNORMALROUTEORDERS(INUROUTE);

        
        OR_BOROUTE.UPDROUTEGEOMETRY(INUROUTE, GE_BOCONSTANTS.CSBNO);

        UT_TRACE.TRACE('[END] or_boRoutePremise.addEndPremNorRoute',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boRoutePremise.addEndPremNorRoute',1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.addEndPremNorRoute',1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDENDPREMNORROUTE;

    


















    PROCEDURE ASSIGNROUTEBYSHAPE
    (
        INUROUTE            IN      OR_ROUTE.ROUTE_ID%TYPE,
        INUNEWPREMISE       IN      AB_PREMISE.PREMISE_ID%TYPE
    )
    IS
        NUROUTE             OR_ROUTE.ROUTE_ID%TYPE;
        NUADDRESSID         AB_ADDRESS.ADDRESS_ID%TYPE;
        SGSHAPE             AB_ADDRESS.SHAPE%TYPE;
        NUCONSECUTIVE       AB_PREMISE.CONSECUTIVE%TYPE;
        NUCICLOFACT         CICLO.CICLCODI%TYPE;
        NUCICLOCONS         CICLO.CICLCICO%TYPE;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.AssignRouteByShape NewPremise['||INUNEWPREMISE||']',10);

        
        NUROUTE := INUROUTE;

        
        NUADDRESSID := AB_BCADDRESS.FNUGETPREMISEADDRESS(INUNEWPREMISE, GE_BOCONSTANTS.CSBYES);

        
        SGSHAPE := DAAB_ADDRESS.FSGGETSHAPE(NUADDRESSID);

        
        AB_BOADDRESS.ASSIGNROUTEBYSHAPE
        (
            NUADDRESSID,
            SGSHAPE,
            NUROUTE,
            NUCONSECUTIVE,
            NUCICLOFACT,
            NUCICLOCONS
        );

        UT_TRACE.TRACE('[END] or_boRoutePremise.AssignRouteByShape',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[ERROR] ex.CONTROLLED_ERROR or_boRoutePremise.AssignRouteByShape',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[ERROR] others or_boRoutePremise.AssignRouteByShape',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNROUTEBYSHAPE;

    
























    PROCEDURE UPDBILLCYCLEPREMISE
    (
        INUNEWPREMISE       IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUROUTE            IN      OR_ROUTE.ROUTE_ID%TYPE
    )
    IS
        NUCICLOFACT         CICLO.CICLCODI%TYPE;

    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.updBillCyclePremise NewPremise['||INUNEWPREMISE||
                       ' inuRoute['||INUROUTE||']',10);

        
        OR_BOROUTE.GETCICLOBYROUTE(INUROUTE, NUCICLOFACT);

        
        IF NUCICLOFACT IS NOT NULL THEN
            
            AB_BOPREMISE.UPDPREMCYCLES(INUNEWPREMISE, NUCICLOFACT, AB_BOGECGC.CSBORGEOAPP);
        END IF;

        UT_TRACE.TRACE('[END] or_boRoutePremise.updBillCyclePremise',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[ERROR] ex.CONTROLLED_ERROR or_boRoutePremise.updBillCyclePremise',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[ERROR] others or_boRoutePremise.updBillCyclePremise',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDBILLCYCLEPREMISE;

    











































    PROCEDURE ADDPREMTONORMALROUTE
    (
        INUROUTE                IN  OR_ROUTE.ROUTE_ID%TYPE,
        INUPREVPREMISE          IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUNEWPREMISE           IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUNEXTPREMISE          IN  AB_PREMISE.PREMISE_ID%TYPE,
        IBLBETWEENADDRESS       IN  UT_DATATYPES.STYBOOLEAN,
        IBLSAVECHANGES          IN  UT_DATATYPES.STYBOOLEAN DEFAULT GE_BOCONSTANTS.GETTRUE
    )
    IS
        NUFIRSTPREMISECONS  AB_PREMISE.CONSECUTIVE%TYPE;
        NUFIRSTPREMISE      AB_PREMISE.PREMISE_ID%TYPE;
        NUPREVPREMISECONS   AB_PREMISE.CONSECUTIVE%TYPE;
        NUPREVPREMISE       AB_PREMISE.PREMISE_ID%TYPE;
        NUNEXTPREMISECONS   AB_PREMISE.CONSECUTIVE%TYPE;
        NUNEXTPREMISE       AB_PREMISE.PREMISE_ID%TYPE;
        
        SBOLDROUTENAME      OR_ROUTE.NAME%TYPE;
        NUNEWROUTEID        OR_ROUTE.ROUTE_ID%TYPE;
        NUOLDCONSECUTIVE    AB_PREMISE.CONSECUTIVE%TYPE;
        NUNEWCONSECUTIVE    AB_PREMISE.CONSECUTIVE%TYPE;
        NUOLDROUTEID        OR_ROUTE.ROUTE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.addPremtoNormalRoute Route['||INUROUTE||']'||CHR(10)||
                       'PrevPremise['||INUPREVPREMISE||'] NewPremise['||INUNEWPREMISE||'] NextPremise['||INUNEXTPREMISE||']',10);

        
        NUOLDROUTEID     := DAAB_PREMISE.FNUGETROUTE_ID(INUNEWPREMISE);

        
        IF NUOLDROUTEID IS NOT NULL THEN
            NUOLDCONSECUTIVE := DAAB_PREMISE.FNUGETCONSECUTIVE(INUNEWPREMISE);
        END IF;

        
        IF (IBLBETWEENADDRESS) THEN

            
            IF (INUPREVPREMISE IS NOT NULL AND INUNEXTPREMISE IS NOT NULL) THEN

                
                ADDPREMMIDDLENORROUTE
                (
                    INUNEWPREMISE,
                    INUPREVPREMISE,
                    INUNEXTPREMISE,
                    INUROUTE
                );

            
            ELSIF (INUPREVPREMISE IS NULL AND INUNEXTPREMISE IS NOT NULL) THEN

                
                NUNEXTPREMISECONS := DAAB_PREMISE.FNUGETCONSECUTIVE(INUNEXTPREMISE, 0);

                
                NUPREVPREMISECONS := OR_BCROUTE.FNUPREVROUTECONS(INUROUTE, NUNEXTPREMISECONS);
                NUPREVPREMISE     := OR_BCROUTE.FNUGETPREMISEBYCONS(INUROUTE, NUPREVPREMISECONS);

                
                ADDPREMMIDDLENORROUTE
                (
                    INUNEWPREMISE,
                    NUPREVPREMISE,
                    INUNEXTPREMISE,
                    INUROUTE
                );

            
            ELSIF (INUPREVPREMISE IS NOT NULL AND INUNEXTPREMISE IS NULL) THEN

                
                NUPREVPREMISECONS := DAAB_PREMISE.FNUGETCONSECUTIVE(INUPREVPREMISE, 0);

                
                NUNEXTPREMISECONS := OR_BCROUTE.FNUNEXTROUTECONS(INUROUTE, NUPREVPREMISECONS);
                NUNEXTPREMISE     := OR_BCROUTE.FNUGETPREMISEBYCONS(INUROUTE, NUNEXTPREMISECONS);

                
                ADDPREMMIDDLENORROUTE
                (
                    INUNEWPREMISE,
                    INUPREVPREMISE,
                    NUNEXTPREMISE,
                    INUROUTE
                );

            ELSE 

                
                IF (DAOR_ROUTE.FSGGETSHAPE(INUROUTE, 0) IS NOT NULL) THEN

                    
                    ASSIGNROUTEBYSHAPE
                    (
                        INUROUTE,
                        INUNEWPREMISE
                    );
                ELSE
                    
                    NUFIRSTPREMISECONS := AB_BCPREMISE.FNUFIRSTROUTECONS(INUROUTE);

                    
                    IF (NUFIRSTPREMISECONS IS NOT NULL) THEN

                        
                        OR_BOROUTE.UPDROUTEGEOMETRY(INUROUTE, GE_BOCONSTANTS.CSBNO);

                        
                        IF (DAOR_ROUTE.FSGGETSHAPE(INUROUTE, 0) IS NOT NULL) THEN

                            
                            ASSIGNROUTEBYSHAPE
                            (
                                INUROUTE,
                                INUNEWPREMISE
                            );
                        ELSE
                            
                            ADDENDPREMNORROUTE
                            (
                                INUNEWPREMISE,
                                INUROUTE
                            );
                        END IF;
                    ELSE
                        
                        ADDINITPREMNORROUTE
                        (
                            INUNEWPREMISE,
                            INUNEWPREMISE,
                            INUROUTE
                        );
                    END IF;
                END IF;
            END IF;

        ELSE 

            
            IF (INUPREVPREMISE IS NULL AND INUNEXTPREMISE IS NOT NULL) THEN

                
                ADDINITPREMNORROUTE
                (
                    INUNEWPREMISE,
                    INUNEXTPREMISE,
                    INUROUTE
                );

            
            ELSIF (INUPREVPREMISE IS NOT NULL AND INUNEXTPREMISE IS NULL) THEN

                
                ADDENDPREMNORROUTE
                (
                    INUNEWPREMISE,
                    INUROUTE
                );

            ELSE 

                
                NUFIRSTPREMISECONS := AB_BCPREMISE.FNUFIRSTROUTECONS(INUROUTE);

                
                IF (NUFIRSTPREMISECONS IS NOT NULL) THEN

                    
                    ADDENDPREMNORROUTE
                    (
                        INUNEWPREMISE,
                        INUROUTE
                    );
                ELSE
                    
                    ADDINITPREMNORROUTE
                    (
                        INUNEWPREMISE,
                        INUNEWPREMISE,
                        INUROUTE
                    );
                END IF;
            END IF;
        END IF;

        
        UPDBILLCYCLEPREMISE(
                             INUNEWPREMISE,
                             INUROUTE
                            );

        
        IF (IBLSAVECHANGES) THEN

            





            
            NUNEWCONSECUTIVE := DAAB_PREMISE.FNUGETCONSECUTIVE(INUNEWPREMISE);

            
            IF (NUOLDROUTEID IS NULL AND INUROUTE IS NOT NULL)  OR
               (NUOLDROUTEID IS NOT NULL AND INUROUTE IS NULL)  OR
               (NUOLDROUTEID <> INUROUTE)                       THEN

                
                IF NUOLDROUTEID IS NOT NULL THEN
                    SBOLDROUTENAME := DSOR_ROUTE.FSBGETMRNAME(NUOLDROUTEID);
                END IF;

                AB_BOPREMISE.SAVECHANGESDATA
                (
                    INUNEWPREMISE,
                    CSBROUTE_ID,
                    NUOLDROUTEID,
                    SBOLDROUTENAME,
                    INUROUTE,
                    DSOR_ROUTE.FSBGETMRNAME(INUROUTE),
                    UT_SESSION.GETMODULE
                );
            END IF;

            
            IF (NUOLDCONSECUTIVE IS NULL AND NUNEWCONSECUTIVE IS NOT NULL)  OR
               (NUOLDCONSECUTIVE IS NOT NULL AND NUNEWCONSECUTIVE IS NULL)  OR
               (NUNEWCONSECUTIVE <> NUOLDCONSECUTIVE)                       THEN
                AB_BOPREMISE.SAVECHANGESDATA
                (
                    INUNEWPREMISE,
                    CSBCONSECUTIVE,
                    NUOLDCONSECUTIVE,
                    NULL,
                    NUNEWCONSECUTIVE,
                    NULL,
                    UT_SESSION.GETMODULE
                );
            END IF;

        END IF;

        UT_TRACE.TRACE('[END] or_boRoutePremise.addPremtoNormalRoute',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[ERROR] ex.CONTROLLED_ERROR or_boRoutePremise.addPremtoNormalRoute',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[ERROR] others or_boRoutePremise.addPremtoNormalRoute',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDPREMTONORMALROUTE;

    





















    PROCEDURE REGECONSECUDEDICROUTE
    (
        INUROUTEID      IN      OR_ROUTE.ROUTE_ID%TYPE,
        INUADDRESSID    IN      AB_ADDRESS.ADDRESS_ID%TYPE
    )
    IS
        NUPREMISEID             AB_PREMISE.PREMISE_ID%TYPE;
        NUPIVOTECONSECUTIVE     OR_ROUTE_PREMISE.CONSECUTIVE%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN or_boRoutePremise.RegeConsecuDedicRoute', 10);

        
        NUPREMISEID         := COALESCE(DAAB_ADDRESS.FNUGETESTATE_NUMBER(INUADDRESSID, 0), OR_BCROUTEPREMISE.FNUFIRSTROUTEPREMISE(INUROUTEID));
        NUPIVOTECONSECUTIVE := OR_BCROUTEPREMISE.FNUCONSBYPREMDEDROUTE(INUROUTEID, NUPREMISEID);

        
        OR_BOROUTE.UPDCONSPREMDEDICROUTE
        (
            INUROUTEID,
            NUPIVOTECONSECUTIVE,    
            NUPIVOTECONSECUTIVE,    
            TRUE                    
        );

        UT_TRACE.TRACE('END or_boRoutePremise.RegeConsecuDedicRoute', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR or_boRoutePremise.RegeConsecuDedicRoute', 5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.RegeConsecuDedicRoute', 5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGECONSECUDEDICROUTE;


    


















    PROCEDURE VALREPEATCONSDEDICROUTE
    (
        INUCONSECUTIVE  IN          AB_PREMISE.CONSECUTIVE%TYPE,
        INUROUTEID      IN          OR_ROUTE.ROUTE_ID%TYPE,
        OSBREGECONS     OUT NOCOPY  UT_DATATYPES.STYMINVARCHAR
    )
    IS
        SBREGECONS      UT_DATATYPES.STYMINVARCHAR := GE_BOCONSTANTS.CSBNO;
    BEGIN
        UT_TRACE.TRACE('BEGIN or_boRoutePremise.ValRepeatConsDedicRoute Consecutive['||INUCONSECUTIVE||']', 10);

        
        IF (OR_BCROUTEPREMISE.FBLEXISTCONSDEDROUTE(INUROUTEID,INUCONSECUTIVE)) THEN

            
            REGECONSECUDEDICROUTE(INUROUTEID, NULL);
            SBREGECONS := GE_BOCONSTANTS.CSBYES;
        END IF;

        UT_TRACE.TRACE('END or_boRoutePremise.ValRepeatConsDedicRoute RegeCons['||OSBREGECONS||']', 10);
        OSBREGECONS := SBREGECONS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR or_boRoutePremise.ValRepeatConsDedicRoute', 5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.ValRepeatConsDedicRoute', 5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALREPEATCONSDEDICROUTE;

    



















    PROCEDURE ADDINITPREMDEDICROUTE
    (
        INUNEWPREMISE           IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUINITPREMISEPIVOTE    IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUROUTE                IN      OR_ROUTE.ROUTE_ID%TYPE
    )
    IS
        NUFIRSTPREMISECONS      AB_PREMISE.CONSECUTIVE%TYPE;
        NUNEWFINALCONSECUTIVE   AB_PREMISE.CONSECUTIVE%TYPE;
        SBREGECONS              UT_DATATYPES.STYMINVARCHAR;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.addInitPremDedicRoute'||CHR(10)||
                       'PremisePivote['||INUINITPREMISEPIVOTE||'] NewPremise['||INUNEWPREMISE||']',10);

        
        IF (INUINITPREMISEPIVOTE =  INUNEWPREMISE) THEN

            
            OR_BOSPECIALIZEDROUTES.INSORUPDPREMINROUWCHIL(INUNEWPREMISE,INUROUTE,OR_BOROUTE.CNUINITIALCONSECUTIVE, TRUE, FALSE);

        ELSE
            
            NUFIRSTPREMISECONS := OR_BCROUTEPREMISE.FNUFIRSTROUTECONS(INUROUTE);

            
            NUNEWFINALCONSECUTIVE := ( NUFIRSTPREMISECONS +
                                       OR_BCROUTEPREMISE.FNUNEXTCONSDEDICROUTE(INUROUTE,NUFIRSTPREMISECONS) )/2;

            
            VALREPEATCONSDEDICROUTE(NUNEWFINALCONSECUTIVE, INUROUTE, SBREGECONS);

            
            IF (SBREGECONS = GE_BOCONSTANTS.CSBYES) THEN

                
                NUFIRSTPREMISECONS  := OR_BCROUTEPREMISE.FNUFIRSTROUTECONS(INUROUTE);

                
                NUNEWFINALCONSECUTIVE := ( NUFIRSTPREMISECONS +
                                           OR_BCROUTEPREMISE.FNUNEXTCONSDEDICROUTE(INUROUTE,NUFIRSTPREMISECONS) )/2;
            END IF;

            
            IF (NUNEWFINALCONSECUTIVE IS NULL) THEN
                
                NUNEWFINALCONSECUTIVE := NUFIRSTPREMISECONS + OR_BOROUTE.CNUINCREMENT;
            END IF;

            
            OR_BOSPECIALIZEDROUTES.INSORUPDPREMINROUWCHIL(INUINITPREMISEPIVOTE,INUROUTE,NUNEWFINALCONSECUTIVE, TRUE, FALSE);

            
            OR_BOSPECIALIZEDROUTES.INSORUPDPREMINROUWCHIL(INUNEWPREMISE,INUROUTE,NUFIRSTPREMISECONS, TRUE, FALSE);
        END IF;

        
        OR_BOROUTE.UPDATEDEDICROUTEORDERS(INUROUTE);

        
        OR_BOROUTE.UPDROUTEGEOMETRY(INUROUTE, GE_BOCONSTANTS.CSBYES);

        UT_TRACE.TRACE('[END] or_boRoutePremise.addInitPremDedicRoute',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[ERROR] ex.CONTROLLED_ERROR or_boRoutePremise.addInitPremDedicRoute',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[ERROR] others or_boRoutePremise.addInitPremDedicRoute',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDINITPREMDEDICROUTE;

    




















    PROCEDURE ADDENDPREMDEDICROUTE
    (
        INUNEWPREMISE           IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUROUTE                IN      OR_ROUTE.ROUTE_ID%TYPE
    )
    IS
        NULASTROUTECONS         OR_ROUTE_PREMISE.CONSECUTIVE%TYPE;
        NUNEWCONSECUTIVE       AB_PREMISE.CONSECUTIVE%TYPE;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.addEndPremDedicRoute NewPremise['||INUNEWPREMISE||']',1);

        
        NULASTROUTECONS := OR_BCROUTEPREMISE.FNULASTROUTECONS(INUROUTE);

        
        NUNEWCONSECUTIVE := NULASTROUTECONS + OR_BOROUTE.CNUINCREMENT;

        
        OR_BOSPECIALIZEDROUTES.INSORUPDPREMINROUWCHIL(INUNEWPREMISE, INUROUTE, NUNEWCONSECUTIVE, TRUE, TRUE);

        UT_TRACE.TRACE('[END] or_boRoutePremise.addEndPremDedicRoute',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boRoutePremise.addEndPremDedicRoute',1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.addEndPremDedicRoute',1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDENDPREMDEDICROUTE;

    






















    PROCEDURE ADDPREMMIDDLEDEDROUTE
    (
        INUNEWPREMISE           IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUINITPREMISEPIVOTE    IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUFINALPREMISEPIVOTE   IN      AB_PREMISE.PREMISE_ID%TYPE,
        INUROUTE                IN      OR_ROUTE.ROUTE_ID%TYPE
    )
    IS
        NUCONSECUTIVE       OR_ROUTE_PREMISE.CONSECUTIVE%TYPE;
        SBREGECONS          UT_DATATYPES.STYMINVARCHAR;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.addPremMiddleDedRoute'||CHR(10)||
                       'PrevPremisePivote['||INUINITPREMISEPIVOTE||'] NextPremisePivote['||INUFINALPREMISEPIVOTE||'] NewPremise['||INUNEWPREMISE||']',1);

        
        NUCONSECUTIVE := FNUGETNEWCONSECUTIVE(INUINITPREMISEPIVOTE, INUFINALPREMISEPIVOTE, INUROUTE);

        
        VALREPEATCONSDEDICROUTE(NUCONSECUTIVE, INUROUTE, SBREGECONS);

        
        IF (SBREGECONS = GE_BOCONSTANTS.CSBYES) THEN

            
            NUCONSECUTIVE := FNUGETNEWCONSECUTIVE(INUINITPREMISEPIVOTE, INUFINALPREMISEPIVOTE, INUROUTE);
        END IF;

        
        OR_BOSPECIALIZEDROUTES.INSORUPDPREMINROUWCHIL(INUNEWPREMISE, INUROUTE, NUCONSECUTIVE, TRUE, TRUE);
        UT_TRACE.TRACE('[END] or_boRoutePremise.addPremMiddleDedRoute',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boRoutePremise.addPremMiddleDedRoute',1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.addPremMiddleDedRoute',1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDPREMMIDDLEDEDROUTE;

    




















    PROCEDURE ADDPREMTODEDICROUTE
    (
        INUROUTE                IN  OR_ROUTE.ROUTE_ID%TYPE,
        INUPREVPREMISE          IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUNEWPREMISE           IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUNEXTPREMISE          IN  AB_PREMISE.PREMISE_ID%TYPE,
        IBLBETWEENADDRESS       IN  UT_DATATYPES.STYBOOLEAN
    )
    IS
        NUFIRSTPREMISECONS  AB_PREMISE.CONSECUTIVE%TYPE;
        NUFIRSTPREMISE      AB_PREMISE.PREMISE_ID%TYPE;
        NUPREVPREMISECONS   AB_PREMISE.CONSECUTIVE%TYPE;
        NUPREVPREMISE       AB_PREMISE.PREMISE_ID%TYPE;
        NUNEXTPREMISECONS   AB_PREMISE.CONSECUTIVE%TYPE;
        NUNEXTPREMISE       AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.AddPremToDedicRoute Route['||INUROUTE||']'||CHR(10)||
                       'PrevPremise['||INUPREVPREMISE||'] NewPremise['||INUNEWPREMISE||'] NextPremise['||INUNEXTPREMISE||']',10);

        
        IF (IBLBETWEENADDRESS) THEN

            
            IF (INUPREVPREMISE IS NOT NULL AND INUNEXTPREMISE IS NOT NULL) THEN

                
                ADDPREMMIDDLEDEDROUTE
                (
                    INUNEWPREMISE,
                    INUPREVPREMISE,
                    INUNEXTPREMISE,
                    INUROUTE
                );
            
            ELSIF (INUPREVPREMISE IS NULL AND INUNEXTPREMISE IS NOT NULL) THEN

                
                NUNEXTPREMISECONS := OR_BCROUTEPREMISE.FNUCONSBYPREMDEDROUTE(INUROUTE, INUNEXTPREMISE);

                
                NUPREVPREMISECONS := OR_BCROUTEPREMISE.FNUPREVCONSDEDICROUTE(INUROUTE, NUNEXTPREMISECONS);
                NUPREVPREMISE     := OR_BCROUTEPREMISE.FNUPREMBYCONSDEDROUTE(INUROUTE, NUPREVPREMISECONS);

                
                ADDPREMMIDDLEDEDROUTE
                (
                    INUNEWPREMISE,
                    NUPREVPREMISE,
                    INUNEXTPREMISE,
                    INUROUTE
                );
            
            ELSIF (INUPREVPREMISE IS NOT NULL AND INUNEXTPREMISE IS NULL) THEN

                
                NUPREVPREMISECONS := OR_BCROUTEPREMISE.FNUCONSBYPREMDEDROUTE(INUROUTE, INUPREVPREMISE);

                
                NUNEXTPREMISECONS := OR_BCROUTEPREMISE.FNUNEXTCONSDEDICROUTE(INUROUTE, NUPREVPREMISECONS);
                NUNEXTPREMISE     := OR_BCROUTEPREMISE.FNUPREMBYCONSDEDROUTE(INUROUTE, NUNEXTPREMISECONS);

                
                ADDPREMMIDDLEDEDROUTE
                (
                    INUNEWPREMISE,
                    INUPREVPREMISE,
                    NUNEXTPREMISE,
                    INUROUTE
                );
            ELSE 

                
                IF (DAOR_ROUTE.FSGGETSHAPE(INUROUTE, 0) IS NOT NULL) THEN

                    
                    ASSIGNROUTEBYSHAPE
                    (
                        INUROUTE,
                        INUNEWPREMISE
                    );
                ELSE
                    
                    NUFIRSTPREMISECONS := OR_BCROUTEPREMISE.FNUFIRSTROUTECONS(INUROUTE);

                    
                    IF (NUFIRSTPREMISECONS IS NOT NULL) THEN

                        
                        OR_BOROUTE.UPDROUTEGEOMETRY(INUROUTE, GE_BOCONSTANTS.CSBYES);

                        
                        IF (DAOR_ROUTE.FSGGETSHAPE(INUROUTE, 0) IS NOT NULL) THEN

                            
                            ASSIGNROUTEBYSHAPE
                            (
                                INUROUTE,
                                INUNEWPREMISE
                            );
                        ELSE
                            
                            ADDENDPREMDEDICROUTE
                            (
                                INUNEWPREMISE,
                                INUROUTE
                            );
                        END IF;
                    ELSE
                        
                        ADDINITPREMDEDICROUTE
                        (
                            INUNEWPREMISE,
                            INUNEWPREMISE,
                            INUROUTE
                        );
                    END IF;
                END IF;
            END IF;

        ELSE 

            
            IF (INUPREVPREMISE IS NULL AND INUNEXTPREMISE IS NOT NULL) THEN

                
                ADDINITPREMDEDICROUTE
                (
                    INUNEWPREMISE,
                    INUNEXTPREMISE,
                    INUROUTE
                );

            
            ELSIF (INUPREVPREMISE IS NOT NULL AND INUNEXTPREMISE IS NULL) THEN

                
                ADDENDPREMDEDICROUTE
                (
                    INUNEWPREMISE,
                    INUROUTE
                );

            ELSE 

                
                NUFIRSTPREMISECONS := OR_BCROUTEPREMISE.FNUFIRSTROUTECONS(INUROUTE);

                
                IF (NUFIRSTPREMISECONS IS NOT NULL) THEN

                    
                    ADDENDPREMDEDICROUTE
                    (
                        INUNEWPREMISE,
                        INUROUTE
                    );

                ELSE
                    
                    ADDINITPREMDEDICROUTE
                    (
                        INUNEWPREMISE,
                        INUNEWPREMISE,
                        INUROUTE
                    );

                END IF;
            END IF;
        END IF;

        UT_TRACE.TRACE('[END] or_boRoutePremise.AddPremToDedicRoute',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[ERROR] ex.CONTROLLED_ERROR or_boRoutePremise.AddPremToDedicRoute',5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[ERROR] others or_boRoutePremise.AddPremToDedicRoute',5);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDPREMTODEDICROUTE;

    


















    PROCEDURE HASCYCLEROUTE
    (
        INUCYCLE      IN      AB_PREMISE.BILLING_CYCLE_ID%TYPE,
        OSBHASROUTE   OUT     UT_DATATYPES.STYYESORNO
    )
    IS
        NUHASROUTE  UT_DATATYPES.STYNUMBERINDEX;
    BEGIN
        UT_TRACE.TRACE('[BEGIN] or_boRoutePremise.hasCycleRoute inuCycle['||INUCYCLE,10);

        OSBHASROUTE := OR_BCROUTEPREMISE.HASCYCLEROUTE(INUCYCLE);

        UT_TRACE.TRACE('[END] or_boRoutePremise.hasCycleRoute',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[ERROR] ex.CONTROLLED_ERROR or_boRoutePremise.hasCycleRoute',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('[ERROR] others or_boRoutePremise.hasCycleRoute',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END HASCYCLEROUTE;























    PROCEDURE GETROUTEANDCONSECUTIVE
    (
        INUADDRESSID    IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        ONUROUTEID      OUT NOCOPY OR_ROUTE_PREMISE.ROUTE_ID%TYPE,
        ONUCONSECUTIVE  OUT NOCOPY OR_ROUTE_PREMISE.CONSECUTIVE%TYPE
    )
    IS
        NUBASEADDRESSID     AB_ADDRESS.ADDRESS_ID%TYPE;
        NUPREMISEID         OR_ROUTE_PREMISE.PREMISE_ID%TYPE;
        SBINDEX             UT_DATATYPES.STYVARCHARINDEX;

        
        NUTASKTYPEID           OR_ROUTE_TASK_TYPE.TASK_TYPE_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('BEGIN or_boRoutePremise.GetRouteAndConsecutive', 10);

        
        NUTASKTYPEID := OR_BOTASKTYPE.FNUTASKTYPEBYACT(PKBOREADINGGENERATION.CNUACTIVITY);

        
        NUBASEADDRESSID := AB_BOADDRESS.FNUGETBASEADDRMEMORY(INUADDRESSID);

        IF(GTBPREMISEID.EXISTS(NUBASEADDRESSID))THEN
            
            NUPREMISEID := GTBPREMISEID(NUBASEADDRESSID);
        ELSE
            
            NUPREMISEID := DAAB_ADDRESS.FNUGETESTATE_NUMBER(NUBASEADDRESSID);
            GTBPREMISEID(NUBASEADDRESSID) := NUPREMISEID;
        END IF;

        SBINDEX := NUPREMISEID||'-'||NUTASKTYPEID;

        IF(GTBROUTEID.EXISTS(SBINDEX) AND GTBCONSECUTIVE.EXISTS(SBINDEX)) THEN
            
            ONUROUTEID := GTBROUTEID(SBINDEX);
            ONUCONSECUTIVE := GTBCONSECUTIVE(SBINDEX);
        ELSE
             
            OR_BCROUTEPREMISE.GETDEDICROUTEPREMTASK(NUPREMISEID, NUTASKTYPEID, ONUROUTEID, ONUCONSECUTIVE);
            GTBROUTEID(SBINDEX) := ONUROUTEID;
            GTBCONSECUTIVE(SBINDEX) := ONUCONSECUTIVE;
        END IF;

        UT_TRACE.TRACE('END or_boRoutePremise.GetRouteAndConsecutive', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Exception in or_boRoutePremise.GetRouteAndConsecutive', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('Others exception in or_boRoutePremise.GetRouteAndConsecutive', 10);
            RAISE EX.CONTROLLED_ERROR;
    END GETROUTEANDCONSECUTIVE;
    
    


















    FUNCTION FNUGETNEWCHILDCONSECUTIVE
    (
        INUOLDBASE              IN  AB_PREMISE.CONSECUTIVE%TYPE,
        INUNEWBASE              IN  AB_PREMISE.CONSECUTIVE%TYPE,
        INUCURRENTCONSECUTIVE   IN  AB_PREMISE.CONSECUTIVE%TYPE
    )
    RETURN AB_PREMISE.CONSECUTIVE%TYPE
    IS
        NUNEWCONSECUTIVE        AB_PREMISE.CONSECUTIVE%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN or_boRoutePremise.fnuGetNewChildConsecutive', 1);
        
        IF INUNEWBASE IS NULL THEN
            NUNEWCONSECUTIVE := NULL;
        ELSE
            NUNEWCONSECUTIVE := (COALESCE(INUCURRENTCONSECUTIVE,0) - COALESCE(INUOLDBASE,0)) + INUNEWBASE;
        END IF;
        
        UT_TRACE.TRACE('END or_boRoutePremise.fnuGetNewChildConsecutive ' || NUNEWCONSECUTIVE, 1);
        
        RETURN NUNEWCONSECUTIVE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR or_boRoutePremise.fnuGetNewChildConsecutive', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS or_boRoutePremise.fnuGetNewChildConsecutive', 1);
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETNEWCHILDCONSECUTIVE;
    
    





























    PROCEDURE ADDPREMISETOROUTEBYXML
    (
        ICLDATA         IN  UT_DATATYPES.STYCLOB
    )
    IS
        XLADDPREMISETOROUTE UT_DATATYPES.STYXML;
        
        SBROUTEINFOPATH     UT_DATATYPES.STYMAXVARCHAR := '/PREMISE_INFO/SPECIALIZED_ROUTES/ROUTE';
        
        SBPREMISEIDPATH     UT_DATATYPES.STYMAXVARCHAR := 'PREMISE_INFO/PREMISE_ID';
        
        SBPREMISEIDNODE     UT_DATATYPES.STYMAXVARCHAR := 'PREMISE_ID';
        
        SBPREMISEID         UT_DATATYPES.STYMAXVARCHAR;
        NUPREMISEID         AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia OR_BORoutePremise.AddPremiseToRouteByXML', 1);

        BEGIN
            
            XLADDPREMISETOROUTE := XMLTYPE(ICLDATA);
        EXCEPTION
        WHEN OTHERS THEN
            
            UT_TRACE.TRACE('Hubo una falla en el procesamiento del XML.', 10);
            ERRORS.SETERROR(CNUXML_ERROR);
            RAISE EX.CONTROLLED_ERROR;
        END;

        
        UT_XMLPARSE.VALSCHEMA(XLADDPREMISETOROUTE, CSBXSD_ADDPREMISETOROUTE);

        
        SBPREMISEID :=  UT_XMLUTILITIES.FSBGETVALUEFROMPATHXML
                        (
                            ICLDATA,
                            SBPREMISEIDPATH,
                            SBPREMISEIDNODE
                        );
        NUPREMISEID := UT_CONVERT.FNUVARCHARTONUMBER(SBPREMISEID);

        
        DAAB_PREMISE.ACCKEY(NUPREMISEID);

        
        OR_BOSPECIALIZEDROUTES.PROCESSSPECIALROUTES
        (
            SBROUTEINFOPATH, 
            ICLDATA,         
            NULL,            
            NUPREMISEID      
        );

        UT_TRACE.TRACE('END OR_BORoutePremise.AddPremiseToRouteByXML', 1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR OR_BORoutePremise.AddPremiseToRouteByXML', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others OR_BORoutePremise.AddPremiseToRouteByXML', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDPREMISETOROUTEBYXML;

END OR_BOROUTEPREMISE;

