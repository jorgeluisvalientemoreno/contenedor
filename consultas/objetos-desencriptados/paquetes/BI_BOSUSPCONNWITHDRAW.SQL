
CREATE OR REPLACE PACKAGE BI_BOSUSPCONNWITHDRAW IS
   TYPE TYREFCURSOR IS REF CURSOR;
   PROCEDURE PRUPDATESUSPFAILUREBILL( INUSUSPCONEID IN SUSPCONE.SUCOIDSC%TYPE, ISBPROCESSSTATUS IN SUSPCONE.PROCESS_STATUS%TYPE, ISBFAILURECAUSEDESC IN SUSPCONE.CAUSE_FAILURE%TYPE );
   PROCEDURE ATTENTPACKPARTIALFAILOSS( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE );
   PROCEDURE ATTENTPACKTOTALFAILOSS( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE );
   PROCEDURE PRUPDATESUSPPROCESSBILL( INUSUSPCONEID IN SUSPCONE.SUCOIDSC%TYPE, ISBPROCESSSTATUS IN SUSPCONE.PROCESS_STATUS%TYPE );
   PROCEDURE PRUPDATEPACKPROCESSBILL( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE, ISBBILPROCESSSTATUS IN BI_PACKAGE_SEND.PROCESS_STATUS%TYPE );
   PROCEDURE INSERTPACKAGE( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE, INUTIPOORDEN IN BI_PACKAGE_SEND.ORDER_TYPE%TYPE );
   PROCEDURE INSERTPACKAGE( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE, INUBILLSTATUS IN SERVSUSC.SESUESCO%TYPE, ISBPROCESSSTATUS IN BI_PACKAGE_SEND.PROCESS_STATUS%TYPE );
   PROCEDURE UPDSTATATUSPACKAGESENDING( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE );
   PROCEDURE DELETEPACKAGE( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE );
   FUNCTION FRCGETPACKAGEBYEXMODULE( INUEXTERNALMODULE IN BI_PACKAGE_SEND.EXTERNAL_MODULE_ID%TYPE )
    RETURN BI_PACKAGE_SEND%ROWTYPE;
   PROCEDURE PRUPDATESUSPFAILUREOSS( INUSERVSUSC IN SUSPCONE.SUCONUSE%TYPE, INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE, ISBCAUSE_FAILURE IN SUSPCONE.CAUSE_FAILURE%TYPE );
   PROCEDURE PRUPDATESUSPPROCESSOSS( INUSERVSUSC IN SUSPCONE.SUCONUSE%TYPE, INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE );
   FUNCTION FRCGETPACKAGEFORPROCESS( INURECORDS IN NUMBER )
    RETURN TYREFCURSOR;
   PROCEDURE PRLOCKPACKRECORD( INUPACKAGESENDID IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE );
   PROCEDURE PRUPDPACKPARTIALFAILOSS( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE );
   PROCEDURE PRUPDPACKTOTALFAILOSS( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE, ISBCAUSE_FAILURE IN SUSPCONE.CAUSE_FAILURE%TYPE );
   PROCEDURE PRUPDATEPACKPROCESSOSS( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE );
   FUNCTION FSBSUSPFAILUREEXIST( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE )
    RETURN VARCHAR2;
   FUNCTION FNUGETPACKAGEORDERTYPE( INUEXTERNALMODULE IN BI_PACKAGE_SEND.EXTERNAL_MODULE_ID%TYPE )
    RETURN NUMBER;
   FUNCTION FSBGETSTATUSPACKFAILPARTIAL
    RETURN VARCHAR2;
   FUNCTION FSBGETSTATUSPACKFAILTOTAL
    RETURN VARCHAR2;
   PROCEDURE GETORDERTYPEBYBILLSTATUS( INUBILLSTATUS IN SERVSUSC.SESUESCO%TYPE, ONUORDERTYPE OUT BI_PACKAGE_SEND.ORDER_TYPE%TYPE );
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
END BI_BOSUSPCONNWITHDRAW;
/


CREATE OR REPLACE PACKAGE BODY BI_BOSUSPCONNWITHDRAW IS
   NUNEWORDENUME SUSPCONE.SUCONUOR%TYPE;
   RCBI_PACKAGE_SEND DABI_PACKAGE_SEND.STYBI_PACKAGE_SEND;
   SBERRMSG VARCHAR2( 2000 );
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO52398';
   PROCEDURE FILLRECORDPACKAGESEND( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE, INUORDERTYPE IN BI_PACKAGE_SEND.ORDER_TYPE%TYPE, INUPROCSTATUS IN BI_PACKAGE_SEND.PROCESS_STATUS%TYPE );
   PROCEDURE FILLRECORDPACKAGESEND( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE, INUORDERTYPE IN BI_PACKAGE_SEND.ORDER_TYPE%TYPE, INUPROCSTATUS IN BI_PACKAGE_SEND.PROCESS_STATUS%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.FillRecordPackageSend' );
      RCBI_PACKAGE_SEND.PACKAGE_SEND_ID := INUORDERNUMBER;
      RCBI_PACKAGE_SEND.ORDER_TYPE := INUORDERTYPE;
      RCBI_PACKAGE_SEND.PROCESS_STATUS := INUPROCSTATUS;
      RCBI_PACKAGE_SEND.EXTERNAL_MODULE_ID := NULL;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FILLRECORDPACKAGESEND;
   PROCEDURE PRUPDATESUSPFAILUREBILL( INUSUSPCONEID IN SUSPCONE.SUCOIDSC%TYPE, ISBPROCESSSTATUS IN SUSPCONE.PROCESS_STATUS%TYPE, ISBFAILURECAUSEDESC IN SUSPCONE.CAUSE_FAILURE%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.prUpdateSuspFailureBILL' );
      DABI_SUSPCONE.UPDCAUSE_FAILURE( INUSUSPCONEID, ISBFAILURECAUSEDESC );
      DABI_SUSPCONE.UPDPROCESS_STATUS( INUSUSPCONEID, ISBPROCESSSTATUS );
      PKERRORS.POP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PRUPDATESUSPFAILUREBILL;
   PROCEDURE ATTENTPACKPARTIALFAILOSS( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
      NUORDERTYPE BI_PACKAGE_SEND.ORDER_TYPE%TYPE;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.AttentPackPartialFailOSS' );
      NUNEWORDENUME := PKSUSPCONNSERVICEMGR.FNUGETNEXTORDERNUMBER;
      NUORDERTYPE := DABI_PACKAGE_SEND.FNUGETORDER_TYPE( INUORDERNUMBER );
      PKGENERALSERVICES.TRACEDATA( 'Orden Procesada.. : ' || INUORDERNUMBER );
      PKGENERALSERVICES.TRACEDATA( 'Nueva Orden .. : ' || NUNEWORDENUME );
      PKGENERALSERVICES.TRACEDATA( 'Nuevo Estado Paquete.. : ' || BI_BOCONSTANTS.CSBPACKAGE_SENDING_OSS );
      PKGENERALSERVICES.TRACEDATA( 'Tipo de Orden del paquete.. : ' || TO_CHAR( NUORDERTYPE ) );
      FILLRECORDPACKAGESEND( NUNEWORDENUME, NUORDERTYPE, BI_BOCONSTANTS.CSBPACKAGE_SENDING_OSS );
      DABI_PACKAGE_SEND.INSRECORD( RCBI_PACKAGE_SEND );
      UPDATE suspcone
        SET suconuor = nuNewOrdeNume, process_status = null,
            cause_failure = null
        WHERE process_status =  bi_boConstants.csbSUSPENSION_FAILURE_OSS AND
              suconuor       = inuOrderNumber;
      UPDATE bi_package_send
        SET process_status = bi_boConstants.csbPACKAGE_PROCESSED_OSS,
            cause_failure = null
        WHERE PACKAGE_send_id = inuOrderNumber;
      PKERRORS.POP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END ATTENTPACKPARTIALFAILOSS;
   PROCEDURE ATTENTPACKTOTALFAILOSS( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.AttentPackTotalFailOSS' );
      PKGENERALSERVICES.TRACEDATA( 'Orden:[' || INUORDERNUMBER || ']' );
      PKGENERALSERVICES.TRACEDATA( 'Nuevo Estado Paqute:[' || BI_BOCONSTANTS.CSBPACKAGE_SENDING_OSS || ']' );
      DABI_PACKAGE_SEND.UPDPROCESS_STATUS( INUORDERNUMBER, BI_BOCONSTANTS.CSBPACKAGE_SENDING_OSS );
      DABI_PACKAGE_SEND.UPDCAUSE_FAILURE( INUORDERNUMBER, NULL );
      UPDATE suspcone
        SET process_status = null , cause_failure = null
        WHERE suconuor = inuOrderNumber
        AND process_status <> BI_BOConstants.csbSUSPENSION_PROCESSED_OSS;
      PKERRORS.POP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END ATTENTPACKTOTALFAILOSS;
   PROCEDURE PRUPDATEPACKPROCESSBILL( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE, ISBBILPROCESSSTATUS IN BI_PACKAGE_SEND.PROCESS_STATUS%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.prUpdatePackProcessBILL' );
      PKGENERALSERVICES.TRACEDATA( 'Orden Procesada .. : ' || INUORDERNUMBER );
      PKGENERALSERVICES.TRACEDATA( 'Estado de EXITO Billing .. : ' || ISBBILPROCESSSTATUS );
      DABI_PACKAGE_SEND.UPDPROCESS_STATUS( INUORDERNUMBER, ISBBILPROCESSSTATUS );
      PKERRORS.POP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PRUPDATEPACKPROCESSBILL;
   PROCEDURE PRUPDATESUSPPROCESSBILL( INUSUSPCONEID IN SUSPCONE.SUCOIDSC%TYPE, ISBPROCESSSTATUS IN SUSPCONE.PROCESS_STATUS%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.prUpdateSuspProcessBILL' );
      DABI_SUSPCONE.UPDPROCESS_STATUS( INUSUSPCONEID, ISBPROCESSSTATUS );
      PKERRORS.POP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PRUPDATESUSPPROCESSBILL;
   PROCEDURE GETORDERTYPEBYBILLSTATUS( INUBILLSTATUS IN SERVSUSC.SESUESCO%TYPE, ONUORDERTYPE OUT BI_PACKAGE_SEND.ORDER_TYPE%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
      CNUCONNECTION_ORDER ESTACORT.ESCOCODI%TYPE;
      CNUSUSPENSION_ORDERPARTIAL ESTACORT.ESCOCODI%TYPE;
      CNUSUSPENSION_ORDERTOTAL ESTACORT.ESCOCODI%TYPE;
      CNU_ORDERWITHDRAW ESTACORT.ESCOCODI%TYPE;
      CNUREINSTALL_ORDER ESTACORT.ESCOCODI%TYPE;
      PROCEDURE GETPARAMETERS
       IS
       BEGIN
         PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.GetOrderTypeByBillStatus.Getparameters' );
         PKGRLPARAMEXTENDEDMGR.SETCACHEON;
         CNUCONNECTION_ORDER := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'CON_ORDEN_DE_CONEXION' );
         CNUSUSPENSION_ORDERPARTIAL := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'CON_ORDEN_DESCONEXION' );
         CNUSUSPENSION_ORDERTOTAL := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'CON_ORDEN_DESCONEXION_TOTAL' );
         CNU_ORDERWITHDRAW := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'TELEF_RETIRO' );
         CNUREINSTALL_ORDER := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'CON_ORDEN_REINSTALACION' );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END GETPARAMETERS;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.GetOrderTypeByBillStatus' );
      ONUORDERTYPE := NULL;
      IF ( INUBILLSTATUS IS NULL ) THEN
         PKERRORS.POP;
         RETURN;
      END IF;
      GETPARAMETERS;
      IF ( INUBILLSTATUS = CNUCONNECTION_ORDER ) THEN
         ONUORDERTYPE := BI_BOCONSTANTS.CNUCONEXION;
         PKERRORS.POP;
         RETURN;
      END IF;
      IF ( INUBILLSTATUS = CNUSUSPENSION_ORDERPARTIAL ) THEN
         ONUORDERTYPE := BI_BOCONSTANTS.CNUSUSPENSIONPARTIALVALUE;
         PKERRORS.POP;
         RETURN;
      END IF;
      IF ( INUBILLSTATUS = CNUSUSPENSION_ORDERTOTAL ) THEN
         ONUORDERTYPE := BI_BOCONSTANTS.CNUSUSPENSIONTOTALVALUE;
         PKERRORS.POP;
         RETURN;
      END IF;
      IF ( INUBILLSTATUS = CNU_ORDERWITHDRAW ) THEN
         ONUORDERTYPE := BI_BOCONSTANTS.CNUWITHDRAW;
         PKERRORS.POP;
         RETURN;
      END IF;
      IF ( INUBILLSTATUS = CNUREINSTALL_ORDER ) THEN
         ONUORDERTYPE := BI_BOCONSTANTS.CNUREINSTALL;
         PKERRORS.POP;
         RETURN;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETORDERTYPEBYBILLSTATUS;
   PROCEDURE INSERTPACKAGE( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE, INUTIPOORDEN IN BI_PACKAGE_SEND.ORDER_TYPE%TYPE )
    IS
      RCBI_PACKAGE_SEND DABI_PACKAGE_SEND.STYBI_PACKAGE_SEND;
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.InsertPackage' );
      RCBI_PACKAGE_SEND.PACKAGE_SEND_ID := INUORDERNUMBER;
      RCBI_PACKAGE_SEND.ORDER_TYPE := INUTIPOORDEN;
      RCBI_PACKAGE_SEND.PROCESS_STATUS := BI_BOCONSTANTS.CSBPACKAGE_SENDING_OSS;
      DABI_PACKAGE_SEND.INSRECORD( RCBI_PACKAGE_SEND );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( NUERRORCODE, SBERRORMESSAGE );
         GW_BOERRORS.CHECKERROR( NUERRORCODE, SBERRORMESSAGE );
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
      WHEN OTHERS THEN
         PKERRORS.POP;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSERTPACKAGE;
   PROCEDURE INSERTPACKAGE( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE, INUBILLSTATUS IN SERVSUSC.SESUESCO%TYPE, ISBPROCESSSTATUS IN BI_PACKAGE_SEND.PROCESS_STATUS%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
      NUORDERTYPE BI_PACKAGE_SEND.ORDER_TYPE%TYPE := NULL;
      RCBI_PACKAGE_SEND DABI_PACKAGE_SEND.STYBI_PACKAGE_SEND;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.InsertPackage' );
      RCBI_PACKAGE_SEND.PACKAGE_SEND_ID := INUORDERNUMBER;
      GETORDERTYPEBYBILLSTATUS( INUBILLSTATUS, NUORDERTYPE );
      RCBI_PACKAGE_SEND.ORDER_TYPE := NUORDERTYPE;
      RCBI_PACKAGE_SEND.PROCESS_STATUS := ISBPROCESSSTATUS;
      DABI_PACKAGE_SEND.INSRECORD( RCBI_PACKAGE_SEND );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( NUERRORCODE, SBERRORMESSAGE );
         GW_BOERRORS.CHECKERROR( NUERRORCODE, SBERRORMESSAGE );
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
      WHEN OTHERS THEN
         PKERRORS.POP;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSERTPACKAGE;
   PROCEDURE UPDSTATATUSPACKAGESENDING( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.UpdStatatusPackageSending' );
      DABI_PACKAGE_SEND.UPDPROCESS_STATUS( INUORDERNUMBER, BI_BOCONSTANTS.CSBPACKAGE_SENDING_OSS );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( NUERRORCODE, SBERRORMESSAGE );
         GW_BOERRORS.CHECKERROR( NUERRORCODE, SBERRORMESSAGE );
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
      WHEN OTHERS THEN
         PKERRORS.POP;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDSTATATUSPACKAGESENDING;
   PROCEDURE DELETEPACKAGE( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.DeletePackage' );
      DABI_PACKAGE_SEND.DELRECORD( INUORDERNUMBER );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( NUERRORCODE, SBERRORMESSAGE );
         GW_BOERRORS.CHECKERROR( NUERRORCODE, SBERRORMESSAGE );
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
      WHEN OTHERS THEN
         PKERRORS.POP;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DELETEPACKAGE;
   FUNCTION FRCGETPACKAGEBYEXMODULE( INUEXTERNALMODULE IN BI_PACKAGE_SEND.EXTERNAL_MODULE_ID%TYPE )
    RETURN BI_PACKAGE_SEND%ROWTYPE
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
      RCBI_PACKAGE_SEND BI_PACKAGE_SEND%ROWTYPE;
      CURSOR CUBI_PACKAGE_SEND IS
SELECT *
        FROM  Bi_package_send
        WHERE Bi_package_send.external_module_id = inuExternalModule
          AND rownum = 1;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.frcGetPackageByExModule' );
      IF ( CUBI_PACKAGE_SEND%ISOPEN ) THEN
         CLOSE CUBI_PACKAGE_SEND;
      END IF;
      OPEN CUBI_PACKAGE_SEND;
      FETCH CUBI_PACKAGE_SEND
         INTO RCBI_PACKAGE_SEND;
      IF ( CUBI_PACKAGE_SEND%NOTFOUND ) THEN
         ERRORS.SETERROR( CONSTANTS.CNURECORD_NOT_EXIST, DAGE_MESSAGE.FSBGETDESCRIPTION( 301 ) || ' external_module_id [' || INUEXTERNALMODULE || ' ]' );
         RAISE EX.CONTROLLED_ERROR;
         CLOSE CUBI_PACKAGE_SEND;
      END IF;
      CLOSE CUBI_PACKAGE_SEND;
      RETURN RCBI_PACKAGE_SEND;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FRCGETPACKAGEBYEXMODULE;
   PROCEDURE PRUPDATESUSPFAILUREOSS( INUSERVSUSC IN SUSPCONE.SUCONUSE%TYPE, INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE, ISBCAUSE_FAILURE IN SUSPCONE.CAUSE_FAILURE%TYPE )
    IS
      NUSUSPCONE_ID SUSPCONE.SUCOIDSC%TYPE;
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
      CURSOR CUSUSPCONE IS
SELECT SUCOIDSC
        FROM   suspcone
        WHERE  suspcone.suconuse  = inuServSusc
          AND  suspcone.suconuor  = inuOrderNumber
          AND  rownum = 1;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.prUpdateSuspFailureOSS' );
      IF ( CUSUSPCONE%ISOPEN ) THEN
         CLOSE CUSUSPCONE;
      END IF;
      OPEN CUSUSPCONE;
      FETCH CUSUSPCONE
         INTO NUSUSPCONE_ID;
      IF ( CUSUSPCONE%NOTFOUND ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_SAT, 4165 );
         RAISE LOGIN_DENIED;
      END IF;
      DABI_SUSPCONE.UPDPROCESS_STATUS( NUSUSPCONE_ID, BI_BOCONSTANTS.CSBSUSPENSION_FAILURE_OSS );
      DABI_SUSPCONE.UPDCAUSE_FAILURE( NUSUSPCONE_ID, ISBCAUSE_FAILURE );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PRUPDATESUSPFAILUREOSS;
   PROCEDURE PRUPDATESUSPPROCESSOSS( INUSERVSUSC IN SUSPCONE.SUCONUSE%TYPE, INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE )
    IS
      NUSUSPCONE_ID SUSPCONE.SUCOIDSC%TYPE;
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
      CURSOR CUSUSPCONE IS
SELECT sucoidsc
        FROM   suspcone
        WHERE  suspcone.suconuse  = inuServSusc
          AND  suspcone.suconuor  = inuOrderNumber
          AND  rownum = 1;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.prUpdateSuspProcessOSS' );
      IF ( CUSUSPCONE%ISOPEN ) THEN
         CLOSE CUSUSPCONE;
      END IF;
      OPEN CUSUSPCONE;
      FETCH CUSUSPCONE
         INTO NUSUSPCONE_ID;
      IF ( CUSUSPCONE%NOTFOUND ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_SAT, 4165 );
         RAISE LOGIN_DENIED;
      END IF;
      DABI_SUSPCONE.UPDPROCESS_STATUS( NUSUSPCONE_ID, BI_BOCONSTANTS.CSBSUSPENSION_PROCESSED_OSS );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PRUPDATESUSPPROCESSOSS;
   FUNCTION FRCGETPACKAGEFORPROCESS( INURECORDS IN NUMBER )
    RETURN TYREFCURSOR
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
      CUBI_PACKAGE_SEND TYREFCURSOR;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.frcGetPackageForProcess' );
      IF ( CUBI_PACKAGE_SEND%ISOPEN ) THEN
         CLOSE CUBI_PACKAGE_SEND;
      END IF;
      OPEN CUBI_PACKAGE_SEND FOR SELECT *
        FROM  Bi_package_send
        WHERE Bi_package_send.process_status = BI_BOConstants.csbPACKAGE_SENDING_OSS
              AND rownum <= inuRecords;
      RETURN CUBI_PACKAGE_SEND;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FRCGETPACKAGEFORPROCESS;
   FUNCTION FSBSUSPFAILUREEXIST( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE )
    RETURN VARCHAR2
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
      NUSUSPFAILURE NUMBER( 10 );
      CURSOR CUSUSPFAILURE IS
SELECT count(*)
        FROM  suspcone
        WHERE suconuor = inuOrderNumber
              AND process_status = BI_BOConstants.csbSUSPENSION_FAILURE_OSS
              AND rownum = 1;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.fsbSuspFailureExist' );
      IF ( CUSUSPFAILURE%ISOPEN ) THEN
         CLOSE CUSUSPFAILURE;
      END IF;
      OPEN CUSUSPFAILURE;
      FETCH CUSUSPFAILURE
         INTO NUSUSPFAILURE;
      IF NUSUSPFAILURE > 0 THEN
         RETURN GE_BOCONSTANTS.CSBYES;
       ELSE
         RETURN GE_BOCONSTANTS.CSBNO;
      END IF;
      CLOSE CUSUSPFAILURE;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBSUSPFAILUREEXIST;
   FUNCTION FNUGETPACKAGEORDERTYPE( INUEXTERNALMODULE IN BI_PACKAGE_SEND.EXTERNAL_MODULE_ID%TYPE )
    RETURN NUMBER
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
      NUORDERNUMBER BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.fnuGetPackageOrderType' );
      NUORDERNUMBER := BI_BOSUSPCONNWITHDRAW.FRCGETPACKAGEBYEXMODULE( INUEXTERNALMODULE ).PACKAGE_SEND_ID;
      RETURN DABI_PACKAGE_SEND.FNUGETORDER_TYPE( NUORDERNUMBER );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETPACKAGEORDERTYPE;
   PROCEDURE PRLOCKPACKRECORD( INUPACKAGESENDID IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE := NULL;
      SBERRORMESSAGE GE_MESSAGE.DESCRIPTION%TYPE := NULL;
      RCPACKAGESEND DABI_PACKAGE_SEND.STYBI_PACKAGE_SEND;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.prLockPackRecord' );
      DABI_PACKAGE_SEND.LOCKBYPK( INUPACKAGESENDID, RCPACKAGESEND );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PRLOCKPACKRECORD;
   PROCEDURE PRUPDPACKPARTIALFAILOSS( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.prUpdPackPartialFailOSS' );
      PKGENERALSERVICES.TRACEDATA( 'Orden Procesada .. : ' || INUORDERNUMBER );
      PKGENERALSERVICES.TRACEDATA( 'Estado de Fallido Parcialmente en OSS .. : ' || BI_BOCONSTANTS.CSBPACK_PARTIAL_FAILURE_OSS );
      DABI_PACKAGE_SEND.UPDPROCESS_STATUS( INUORDERNUMBER, BI_BOCONSTANTS.CSBPACK_PARTIAL_FAILURE_OSS );
      PKERRORS.POP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PRUPDPACKPARTIALFAILOSS;
   PROCEDURE PRUPDPACKTOTALFAILOSS( INUORDERNUMBER IN BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE, ISBCAUSE_FAILURE IN SUSPCONE.CAUSE_FAILURE%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.prUpdPackTotalFailOSS' );
      PKGENERALSERVICES.TRACEDATA( 'Orden Procesada .. : ' || INUORDERNUMBER );
      PKGENERALSERVICES.TRACEDATA( 'Estado de Fallido Totalmente en OSS .. : ' || BI_BOCONSTANTS.CSBPACK_TOTAL_FAILURE_OSS );
      DABI_PACKAGE_SEND.UPDPROCESS_STATUS( INUORDERNUMBER, BI_BOCONSTANTS.CSBPACK_TOTAL_FAILURE_OSS );
      DABI_PACKAGE_SEND.UPDCAUSE_FAILURE( INUORDERNUMBER, ISBCAUSE_FAILURE );
      PKERRORS.POP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PRUPDPACKTOTALFAILOSS;
   PROCEDURE PRUPDATEPACKPROCESSOSS( INUORDERNUMBER IN SUSPCONE.SUCONUOR%TYPE )
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
      PKERRORS.PUSH( 'BI_BOSuspConnWithDraw.prUpdatePackProcessOSS' );
      PKGENERALSERVICES.TRACEDATA( 'Orden Procesada .. : ' || INUORDERNUMBER );
      PKGENERALSERVICES.TRACEDATA( 'Estado de EXITO en OSS .. : ' || BI_BOCONSTANTS.CSBPACKAGE_PROCESSED_BILL );
      DABI_PACKAGE_SEND.UPDPROCESS_STATUS( INUORDERNUMBER, BI_BOCONSTANTS.CSBPACKAGE_PROCESSED_OSS );
      PKERRORS.POP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, NUERRORCODE, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PRUPDATEPACKPROCESSOSS;
   FUNCTION FSBGETSTATUSPACKFAILPARTIAL
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN BI_BOCONSTANTS.CSBPACK_PARTIAL_FAILURE_OSS;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FSBGETSTATUSPACKFAILPARTIAL;
   FUNCTION FSBGETSTATUSPACKFAILTOTAL
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN BI_BOCONSTANTS.CSBPACK_TOTAL_FAILURE_OSS;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FSBGETSTATUSPACKFAILTOTAL;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
END BI_BOSUSPCONNWITHDRAW;
/


