PACKAGE BODY AB_BOPremise IS





























































































































































































































    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO211696';

	
    NUPREMISEIDSET    AB_PREMISE.PREMISE_ID%TYPE := NULL;
    NUADDRESSIDSET    AB_ADDRESS.ADDRESS_ID%TYPE := NULL;
    
    CNUNOGEOGRAPINPREMISE CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 110722;
    
    CNUADDRESSNOTEXIST    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 17565;
    
    CNUVALDATE            CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 6304;
    
    CNUVALDATA            CONSTANT NUMBER    := 14982;
    
    CNUNULL_VALUE         CONSTANT NUMBER    := 7352;
    
    CNUERRDATA            CONSTANT NUMBER    := 901354;
    
    CSBSI                 CONSTANT VARCHAR2(50) := 'S';
    
    CSBYES                CONSTANT VARCHAR2(1)  := GE_BOCONSTANTS.CSBYES;
    CSBNO                 CONSTANT VARCHAR2(1)  := GE_BOCONSTANTS.CSBNO;
    CSBOCCUPIED           CONSTANT VARCHAR2(1)  := AB_BOCONSTANTS.CSBOCCUPIED;
    CSBUNOCUPIED          CONSTANT VARCHAR2(1)  := AB_BOCONSTANTS.CSBUNOCUPIED;


    
    CNUERR3389           CONSTANT NUMBER    :=  3389;
    
    CNUERR346            CONSTANT NUMBER    :=  346;
    
    CNUERR14982          CONSTANT NUMBER    := 14982;
    
    CNUERR10456          CONSTANT NUMBER    := 10456;
    
    CNUERR14941          CONSTANT NUMBER    := 14941;
    
    
    
    
    CNUDEFOCCUPIEDSTATUS  CONSTANT NUMBER  := -1;
        
    
    CSBSETBACKBUILDING       CONSTANT VARCHAR2(50) := 'Edificio Escalonado';
    CSBSERVANTSPASSAGE       CONSTANT VARCHAR2(50) := 'Paso a Servidumre';
    CSBDESCPREMTYPE          CONSTANT VARCHAR2(50) := 'Descripci�n';
    CSBPREMISEID             CONSTANT VARCHAR2(50) := 'Identificador de Predio';
    CSBRING                  CONSTANT VARCHAR2(50) := 'Flag de Anillando';
    CSBCONNECTION            CONSTANT VARCHAR2(50) := 'Flag de Acometida';
    CSBINTERNAL              CONSTANT VARCHAR2(50) := 'Flag de Interna';
    CSBMEASUREMENT           CONSTANT VARCHAR2(50) := 'Flag de Centro de Medici�n';
    CSBENTITYPREMISE         CONSTANT VARCHAR2(50) := 'Predios';
    CSBPREMISETYPEID         CONSTANT VARCHAR2(50) := 'Identificador de Tipo de Predio';
    CSBFIELDOCCUPIED         CONSTANT VARCHAR2(50) := 'Ocupaci�n';
    
    
    
    

    
    PROCEDURE VALIDBLOCKNULL
    (
        INUBLOCK_ID  AB_BLOCK.BLOCK_ID%TYPE
    )
    IS
    BEGIN

        IF INUBLOCK_ID IS NULL THEN
            
            ERRORS.SETERROR(AB_BOMESSAGE_CONSTANTS.CNUERR_BLOCK_NULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE VALIDBLOCKSIDENULL
    (
        ISBBLOCKSIDE  IN AB_PREMISE.BLOCK_SIDE%TYPE
    )
    IS
    BEGIN

        IF ISBBLOCKSIDE IS NULL THEN
            
            ERRORS.SETERROR(AB_BOMESSAGE_CONSTANTS.CNUERR_BLOCK_SIDE_NULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE VALIDZONENULL
    (
        INUZONE IN   AB_BLOCK.ZONE%TYPE
    )
    IS
    BEGIN

        IF INUZONE IS NULL THEN
            
            ERRORS.SETERROR(AB_BOMESSAGE_CONSTANTS.CNUERR_ZONE_NULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE VALIDSECTORNULL
    (
        INUSECTOR  IN   AB_BLOCK.SECTOR%TYPE
    )
    IS
    BEGIN

        IF INUSECTOR IS NULL THEN
            
            ERRORS.SETERROR(AB_BOMESSAGE_CONSTANTS.CNUERR_SECTOR_NULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   PROCEDURE VALIDPREMISENULL
    (
        INUPREMISE   IN   AB_PREMISE.PREMISE%TYPE
    )
    IS
    BEGIN

        IF INUPREMISE IS NULL THEN
            
            ERRORS.SETERROR(AB_BOMESSAGE_CONSTANTS.CNUERR_PREMISE_NULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




    FUNCTION FBLBLOCKIDISNULL
        (
            INUPREMISE    IN AB_PREMISE.PREMISE_ID%TYPE,
            ONUBLOCK_ID  OUT AB_BLOCK.BLOCK_ID%TYPE
        )
    RETURN BOOLEAN
    IS
    BEGIN
        ONUBLOCK_ID := DAAB_PREMISE.FNUGETBLOCK_ID(INUPREMISE);
        IF ( ONUBLOCK_ID IS NULL ) THEN
            RETURN TRUE;
        END IF;
        RETURN FALSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLBLOCKIDISNULL;

    FUNCTION FBLEXISTPREMISEINADDRESS
        (
            INUPREMISE     IN AB_PREMISE.PREMISE_ID%TYPE,
            ONUADDRESS_ID  OUT AB_ADDRESS.ADDRESS_ID%TYPE
        )
    RETURN BOOLEAN
    IS
        CURSOR CUADDRESS
            (
                NUPREMISE  AB_PREMISE.PREMISE_ID%TYPE
            )
        IS
        SELECT AB_ADDRESS.ADDRESS_ID
          FROM AB_ADDRESS
         WHERE AB_ADDRESS.ESTATE_NUMBER = INUPREMISE
           AND ROWNUM = 1;

    BEGIN
        OPEN CUADDRESS(INUPREMISE);
        FETCH CUADDRESS INTO ONUADDRESS_ID;
        CLOSE CUADDRESS;
        IF ( ONUADDRESS_ID IS NULL ) THEN
            RETURN FALSE;
        END IF;
        RETURN TRUE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF(CUADDRESS%ISOPEN)THEN
                CLOSE CUADDRESS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF(CUADDRESS%ISOPEN)THEN
                CLOSE CUADDRESS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTPREMISEINADDRESS;

    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

	
    













    
  	PROCEDURE INITGLOBAL
    IS
    BEGIN
        NUPREMISEIDSET := NULL;
        NUADDRESSIDSET := NULL;
    END;
    













  	PROCEDURE SETPREMISEID
    (
        INUPREMISEID  IN  AB_PREMISE.PREMISE_ID%TYPE
    )
    IS
    BEGIN
        NUPREMISEIDSET := INUPREMISEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    












    FUNCTION GETPREMISEIDSET
    RETURN NUMBER
    IS
    BEGIN

        RETURN NUPREMISEIDSET;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    













  	PROCEDURE SETADDRESSID
    (
        INUADDRESSID  IN  AB_ADDRESS.ADDRESS_ID%TYPE
    )
    IS
    BEGIN
        NUADDRESSIDSET := INUADDRESSID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    












    FUNCTION GETADDRESSIDSET
    RETURN NUMBER
    IS
    BEGIN

        RETURN NUADDRESSIDSET;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
















  	FUNCTION FRFGETPREMISE_TYPE
    RETURN DAAB_PREMISE_TYPE.TYRFRECORDS
  	IS
	    CUPREMISE_TYPE  DAAB_PREMISE_TYPE.TYRFRECORDS;
    BEGIN
        OPEN CUPREMISE_TYPE FOR SELECT AB_PREMISE_TYPE.*, AB_PREMISE_TYPE.ROWID
            FROM AB_PREMISE_TYPE;
        RETURN CUPREMISE_TYPE;
    EXCEPTION
	    WHEN NO_DATA_FOUND THEN
		    ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
                 		    DAGE_MESSAGE.FSBGETDESCRIPTION(CNUTABLEPARAMETER));
		    RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    












  	FUNCTION FRFGETBLOCKS
    RETURN DAAB_BLOCK.TYRFRECORDS
  	IS
	    CUBLOCK  DAAB_BLOCK.TYRFRECORDS;
    BEGIN
        OPEN CUBLOCK FOR SELECT AB_BLOCK.*, AB_BLOCK.ROWID
            FROM AB_BLOCK;
        RETURN CUBLOCK;
    EXCEPTION
	    WHEN NO_DATA_FOUND THEN
		    ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
                 		    DAAB_BLOCK.FSBGETMESSAGEDESCRIPTION
						    );
		    RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;


    
















  	FUNCTION FRFGETPREMISES RETURN DAAB_PREMISE.TYRFRECORDS
  	IS
	    CUPREMISE  DAAB_PREMISE.TYRFRECORDS;
    BEGIN
        OPEN CUPREMISE FOR
            SELECT AB_PREMISE.*, AB_PREMISE.ROWID
            FROM AB_PREMISE;
        RETURN CUPREMISE;
    EXCEPTION
	    WHEN NO_DATA_FOUND THEN
		    ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
                 		    DAGE_MESSAGE.FSBGETDESCRIPTION(CNUTABLEPARAMETER)
						    );
		    RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    
















  	PROCEDURE VALIDATEEXISTBLOCK(
                    INUGEOGRA_LOCATION IN   AB_BLOCK.GEOGRAP_LOCATION_ID%TYPE,
                    INUZONE            IN   AB_BLOCK.ZONE%TYPE,
                    INUSECTOR          IN   AB_BLOCK.SECTOR%TYPE,
                    INUBLOCK           IN   AB_BLOCK.BLOCK_%TYPE,
                    ONUBLOCK_ID        OUT  AB_BLOCK.BLOCK_ID%TYPE
                )
    IS
        CURSOR CUBLOCK  IS
        SELECT BLOCK_ID
        FROM   AB_BLOCK
        WHERE  GEOGRAP_LOCATION_ID = INUGEOGRA_LOCATION
        AND    ZONE                = INUZONE
        AND    SECTOR              = INUSECTOR
        AND    BLOCK_              = INUBLOCK;

    BEGIN
        IF (CUBLOCK%ISOPEN) THEN
            CLOSE CUBLOCK;
        END IF;
        OPEN CUBLOCK;
        FETCH CUBLOCK INTO ONUBLOCK_ID;
        IF (CUBLOCK%NOTFOUND) THEN
    		ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
			                DAGE_MESSAGE.FSBGETDESCRIPTION(4341));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE CUBLOCK;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSE CUBLOCK;
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSE CUBLOCK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    



















  	PROCEDURE VALIDATEEXIST(
                    INUBLOCK_ID        IN   AB_PREMISE.BLOCK_ID%TYPE,
                    ISBBLOCKSIDE       IN   AB_PREMISE.BLOCK_SIDE%TYPE,
                    INUPREMISE         IN   AB_PREMISE.PREMISE%TYPE,
                    INUBUILDING        IN   AB_PREMISE.NUMBER_DIVISION%TYPE,
                    ONUPREMISE_ID      OUT  AB_PREMISE.PREMISE_ID%TYPE
                )
    IS
        CURSOR CUPREMISE  IS
        SELECT PREMISE_ID
        FROM   AB_PREMISE
        WHERE  BLOCK_ID            = INUBLOCK_ID
        AND    BLOCK_SIDE          = ISBBLOCKSIDE
        AND    PREMISE             = INUPREMISE
        AND    NUMBER_DIVISION     = INUBUILDING;

    BEGIN
        IF (CUPREMISE%ISOPEN) THEN
            CLOSE CUPREMISE;
        END IF;
        ONUPREMISE_ID := 0;
        OPEN CUPREMISE;
        FETCH CUPREMISE INTO ONUPREMISE_ID;
        IF (CUPREMISE%NOTFOUND) THEN
    		ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
			                DAGE_MESSAGE.FSBGETDESCRIPTION(4348));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE CUPREMISE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSE CUPREMISE;
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSE CUPREMISE;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE CREATEBUILDINGDIVISION(
             INUPREMISE            IN  AB_BUILDING_DIVISION.PREMISE_ID%TYPE,
             ISBCOMPLEMENT         IN  AB_BUILDING_DIVISION.COMPLEMENT%TYPE,
             ONUBUILDINDIVISION_ID OUT AB_BUILDING_DIVISION.BUILDING_DIVISION_ID%TYPE
             )
    IS
        RCAB_BUILDING_DIVISION DAAB_BUILDING_DIVISION.STYAB_BUILDING_DIVISION;
        CURSOR CUBUILDING_DIVISION IS
        SELECT BUILDING_DIVISION_ID
        FROM   AB_BUILDING_DIVISION
        WHERE  NVL(UPPER(COMPLEMENT),'-') = NVL(UPPER(ISBCOMPLEMENT),'-')
          AND  PREMISE_ID = INUPREMISE;


    BEGIN


        IF (CUBUILDING_DIVISION%ISOPEN) THEN
            CLOSE CUBUILDING_DIVISION;
        END IF;

        OPEN CUBUILDING_DIVISION;
        FETCH CUBUILDING_DIVISION INTO ONUBUILDINDIVISION_ID;

        IF (CUBUILDING_DIVISION%NOTFOUND) THEN
            ONUBUILDINDIVISION_ID := AB_BOSEQUENCE.FNUNEXTBUILDINGDIVISION;
            RCAB_BUILDING_DIVISION.BUILDING_DIVISION_ID := ONUBUILDINDIVISION_ID;
            RCAB_BUILDING_DIVISION.PREMISE_ID := INUPREMISE;
            RCAB_BUILDING_DIVISION.COMPLEMENT := ISBCOMPLEMENT;

            DAAB_BUILDING_DIVISION.INSRECORD( RCAB_BUILDING_DIVISION );
        END IF;
        CLOSE CUBUILDING_DIVISION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUBUILDING_DIVISION%ISOPEN) THEN
                CLOSE CUBUILDING_DIVISION;
            END IF;
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUBUILDING_DIVISION%ISOPEN) THEN
                CLOSE CUBUILDING_DIVISION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE GETRECORD
    (
        INUPREMISE_ID       IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUBUILDINGDIVI     IN  AB_BUILDING_DIVISION.BUILDING_DIVISION_ID%TYPE,
        ONUGEOGRAPLOCAT     OUT AB_BLOCK.GEOGRAP_LOCATION_ID%TYPE,
        ONUBLOCK_ID         OUT AB_BLOCK.BLOCK_ID%TYPE,
        ONUZONA             OUT AB_BLOCK.ZONE%TYPE,
        ONUSECTOR           OUT AB_BLOCK.SECTOR%TYPE,
        ONUBLOCK            OUT AB_BLOCK.BLOCK_%TYPE,
        OSBBLOCKSIDE        OUT AB_PREMISE.BLOCK_SIDE%TYPE,
        ONUPREMISE          OUT AB_PREMISE.PREMISE%TYPE,
        ONUNUMBERDIVI       OUT AB_PREMISE.NUMBER_DIVISION%TYPE,
        ONUPREMISETYPE      OUT AB_PREMISE.PREMISE_TYPE_ID%TYPE,
        OSBADDRESS          OUT AB_ADDRESS.ADDRESS%TYPE,
        ONUZIP_CODE         OUT AB_PREMISE.ZIP_CODE_ID%TYPE,
        OSBCOMPLEMENT       OUT AB_BUILDING_DIVISION.COMPLEMENT%TYPE,
        OSBPREFIXZIPCODE    OUT GE_GEOGRA_LOCATION.PREFIX_ZIP_CODE%TYPE,
        OSBSUFIXZIPCODE     OUT AB_ZIP_CODE.ZIP_CODE%TYPE
    )
    IS
        RCPREMISE    DAAB_PREMISE.STYAB_PREMISE;
        RCBLOCK      DAAB_BLOCK.STYAB_BLOCK;
    BEGIN
        DAAB_PREMISE.ACCKEY( INUPREMISE_ID );
        RCPREMISE := DAAB_PREMISE.FRCGETRECORD( INUPREMISE_ID );
        RCBLOCK   := DAAB_BLOCK.FRCGETRECORD( RCPREMISE.BLOCK_ID );

        ONUGEOGRAPLOCAT     := RCBLOCK.GEOGRAP_LOCATION_ID;
        ONUBLOCK_ID         := RCPREMISE.BLOCK_ID;
        ONUZONA             := RCBLOCK.ZONE;
        ONUSECTOR           := RCBLOCK.SECTOR;
        ONUBLOCK            := RCBLOCK.BLOCK_;
        OSBBLOCKSIDE        := RCPREMISE.BLOCK_SIDE;
        ONUPREMISE          := RCPREMISE.PREMISE;
        ONUNUMBERDIVI       := RCPREMISE.NUMBER_DIVISION;
        ONUPREMISETYPE      := RCPREMISE.PREMISE_TYPE_ID;
        OSBADDRESS          := AB_BCADDRESS.FSBGETADDRMAINDESCBYPREMISE(INUPREMISE_ID);
        ONUZIP_CODE         := RCPREMISE.ZIP_CODE_ID;

        IF  (INUBUILDINGDIVI <> AB_BOCONSTANTS.CNUAPPLICATIONNULL)
            AND
            (INUBUILDINGDIVI > 0 )
        THEN
            OSBCOMPLEMENT := DAAB_BUILDING_DIVISION.FSBGETCOMPLEMENT(INUBUILDINGDIVI);
        END IF;

        IF (RCBLOCK.GEOGRAP_LOCATION_ID IS NOT NULL) THEN
            OSBPREFIXZIPCODE := DAGE_GEOGRA_LOCATION.FSBGETPREFIX_ZIP_CODE(RCBLOCK.GEOGRAP_LOCATION_ID);
        END IF;

        IF (RCPREMISE.ZIP_CODE_ID IS NOT NULL) THEN
            OSBSUFIXZIPCODE := DAAB_ZIP_CODE.FSBGETZIP_CODE(RCPREMISE.ZIP_CODE_ID);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE INSERTPREMISE
        (
        INUBLOCK_ID         IN AB_PREMISE.BLOCK_ID%TYPE,
        ISBBLOCKSIDE        IN AB_PREMISE.BLOCK_SIDE%TYPE,
        INUPREMISE          IN AB_PREMISE.PREMISE%TYPE,
        INUNUMBERDIVI       IN AB_PREMISE.NUMBER_DIVISION%TYPE,
        INUPREMISETYPE      IN AB_PREMISE.PREMISE_TYPE_ID%TYPE,
        ISBADDRESS          IN AB_ADDRESS.ADDRESS%TYPE,
        ISBZIP_CODE         IN AB_PREMISE.ZIP_CODE_ID%TYPE,
        ONUPREMISEID        OUT AB_PREMISE.PREMISE_ID%TYPE
        )
    IS
        RCPREMISE   DAAB_PREMISE.STYAB_PREMISE;
    BEGIN
        ONUPREMISEID                := AB_BOSEQUENCE.FNUNEXTPREMISE;
        RCPREMISE.PREMISE_ID        := ONUPREMISEID;
        RCPREMISE.BLOCK_ID          := INUBLOCK_ID;
        RCPREMISE.BLOCK_SIDE        := ISBBLOCKSIDE;
        RCPREMISE.PREMISE           := INUPREMISE;
        RCPREMISE.NUMBER_DIVISION   := INUNUMBERDIVI;
        RCPREMISE.PREMISE_TYPE_ID   := INUPREMISETYPE;

        IF ( ISBZIP_CODE <> -1 ) THEN
            RCPREMISE.ZIP_CODE_ID     := ISBZIP_CODE;
        END IF;

        
        DAAB_PREMISE.INSRECORD(RCPREMISE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE INSERTPREMISEWITCHSEGMENT
    (
        INUBLOCK_ID         IN AB_PREMISE.BLOCK_ID%TYPE,
        ISBBLOCKSIDE        IN AB_PREMISE.BLOCK_SIDE%TYPE,
        INUPREMISE          IN AB_PREMISE.PREMISE%TYPE,
        INUNUMBERDIVI       IN AB_PREMISE.NUMBER_DIVISION%TYPE,
        INUPREMISETYPE      IN AB_PREMISE.PREMISE_TYPE_ID%TYPE,
        ISBADDRESS          IN AB_ADDRESS.ADDRESS%TYPE,
        ISBZIP_CODE         IN AB_PREMISE.ZIP_CODE_ID%TYPE,
        ONUPREMISEID        OUT AB_PREMISE.PREMISE_ID%TYPE
    )
    IS
        RCPREMISE   DAAB_PREMISE.STYAB_PREMISE;
    BEGIN
        UT_TRACE.TRACE('Inicia AB_BOPremise.InsertPremiseWitchSegment. Bloque:['||INUBLOCK_ID||']',4);
        UT_TRACE.TRACE('Lado:['||INUBLOCK_ID||']Numero Predio:['||INUPREMISE||']Tipo Predio:['||INUPREMISETYPE||']',5);

        
        IF  INUPREMISETYPE IS NOT NULL THEN
            DAAB_PREMISE_TYPE.ACCKEY(INUPREMISETYPE);
        END IF;

        RCPREMISE.BLOCK_ID        := INUBLOCK_ID;
        RCPREMISE.BLOCK_SIDE      := ISBBLOCKSIDE;
        RCPREMISE.PREMISE         := INUPREMISE;
        RCPREMISE.NUMBER_DIVISION := INUNUMBERDIVI;
        RCPREMISE.PREMISE_TYPE_ID := INUPREMISETYPE;

        IF ( ISBZIP_CODE <> -1 ) THEN
            
            DAAB_ZIP_CODE.ACCKEY( ISBZIP_CODE );
            RCPREMISE.ZIP_CODE_ID := ISBZIP_CODE;
        END IF;

        
        IF GETPREMISEIDSET IS NULL THEN

            
            ONUPREMISEID := AB_BOSEQUENCE.FNUNEXTPREMISE;
            RCPREMISE.PREMISE_ID := ONUPREMISEID;
            DAAB_PREMISE.INSRECORD( RCPREMISE );
            UT_TRACE.TRACE('Id Predio Creado:['||ONUPREMISEID||']',5);

            
            AB_BOADDRESS.UPDESTATENUMBER(GETADDRESSIDSET, ONUPREMISEID);
        ELSE

            
            ONUPREMISEID := GETPREMISEIDSET;
            RCPREMISE.PREMISE_ID := ONUPREMISEID;
            UT_TRACE.TRACE('Actualiza Predio:['||ONUPREMISEID||']',5);

            DAAB_PREMISE.UPDRECORD(RCPREMISE);
        END IF;
        UT_TRACE.TRACE('Finaliza AB_BOPremise.InsertPremiseWitchSegment',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FNUINSERTPREMISE
    RETURN AB_PREMISE.PREMISE_ID%TYPE
    IS
        NUPREMISEID    AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN
        INSERTPREMISE   (
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NUPREMISEID
                        );
        RETURN NUPREMISEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

















    FUNCTION FRFGETOWNERS(INUPREMISE_ID     IN  AB_PREMISE.PREMISE_ID%TYPE)
    RETURN DAAB_OWNER_PREMISE.TYRFRECORDS IS

	    CUOWNER_PREMISE  DAAB_OWNER_PREMISE.TYRFRECORDS;
    BEGIN
        OPEN CUOWNER_PREMISE FOR
            SELECT AB_OWNER_PREMISE.*, AB_OWNER_PREMISE.ROWID
            FROM   AB_OWNER_PREMISE
            WHERE  AB_OWNER_PREMISE.PREMISE_ID = INUPREMISE_ID;
        RETURN CUOWNER_PREMISE;
    EXCEPTION
	    WHEN NO_DATA_FOUND THEN
		    ERRORS.SETERROR(CONSTANTS.CNURECORD_NOT_EXIST,
                 		    DAAB_OWNER_PREMISE.FSBGETMESSAGEDESCRIPTION
						    );
		    RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    



















    PROCEDURE REGISTEROWNER(INUPREMISE_ID     IN  AB_PREMISE.PREMISE_ID%TYPE,
                        ISBIDENTIFICATION IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE,
                        INUIDENT_TYPE     IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE)
    IS
        NUSUBSCRIBER_ID   GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        RCOWNER_PREMISE DAAB_OWNER_PREMISE.STYAB_OWNER_PREMISE;

    BEGIN
        
        NUSUBSCRIBER_ID := GE_BOSUBSCRIBER.GETSUBSCRIBERID( INUIDENT_TYPE,
                                                            ISBIDENTIFICATION);

        
        DAAB_PREMISE.ACCKEY( INUPREMISE_ID );

        
        RCOWNER_PREMISE.OWNER_PREMISE_ID := AB_BOSEQUENCE.FNUNEXTOWNERPREMISE;
        RCOWNER_PREMISE.SUBSCRIBER_ID    := NUSUBSCRIBER_ID;
        RCOWNER_PREMISE.PREMISE_ID       := INUPREMISE_ID;

        
        BEGIN
            DAAB_OWNER_PREMISE.INSRECORD(RCOWNER_PREMISE );
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RETURN;
        END;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FNUGETPREMISEBYADDRESS(
        INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE
    ) RETURN NUMBER
    IS
        CURSOR CUPREMISE IS
        SELECT B.PREMISE_ID
        FROM AB_ADDRESS A, AB_PREMISE B
        WHERE A.ESTATE_NUMBER = B.PREMISE_ID
        AND A.ADDRESS_ID = INUADDRESSID;
        
        NUPREMISEID  AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN

         OPEN CUPREMISE;
         
         FETCH CUPREMISE INTO NUPREMISEID;
         
         IF (CUPREMISE%NOTFOUND) THEN
              CLOSE CUPREMISE;
              GE_BOERRORS.SETERRORCODE(490);
              RAISE EX.CONTROLLED_ERROR;
         END IF;
         
         CLOSE CUPREMISE;
         RETURN NUPREMISEID;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETDATASEGMENT
    (
        INUPREMISE_ID     IN AB_PREMISE.PREMISE_ID%TYPE,
        ONUSEGMENT_ID     OUT AB_PREMISE.SEGMENTS_ID%TYPE
    )
    IS
    BEGIN
        ONUSEGMENT_ID :=  DAAB_PREMISE.FNUGETSEGMENTS_ID(INUPREMISE_ID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


  	FUNCTION FBLEXISTPREMISE
    (
        INUBLOCK_ID         IN   AB_PREMISE.BLOCK_ID%TYPE,
        ISBBLOCK_SIDE       IN   AB_PREMISE.BLOCK_SIDE%TYPE,
        INUPREMISE          IN   AB_PREMISE.PREMISE%TYPE,
        INUNUMBER_DIVISION  IN   AB_PREMISE.NUMBER_DIVISION%TYPE
    ) RETURN BOOLEAN IS

        CURSOR CUPREMISE  IS
        SELECT 'x'
        FROM   AB_PREMISE
        WHERE  BLOCK_ID        = INUBLOCK_ID
        AND    BLOCK_SIDE      = ISBBLOCK_SIDE
        AND    PREMISE         = INUPREMISE
        AND    NVL(NUMBER_DIVISION,   AB_BOCONSTANTS.CNUAPPLICATIONNULL ) =
               NVL(INUNUMBER_DIVISION,AB_BOCONSTANTS.CNUAPPLICATIONNULL);
        SBDUMMY  VARCHAR2(1);
        BLRESULT BOOLEAN;

    BEGIN

        OPEN CUPREMISE;

        FETCH CUPREMISE INTO SBDUMMY;

        BLRESULT := CUPREMISE%FOUND;

        CLOSE CUPREMISE;

        RETURN BLRESULT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




















  	FUNCTION FNUGETPREMISEID
    (
        INUBLOCK_ID         IN   AB_PREMISE.BLOCK_ID%TYPE,
        ISBBLOCK_SIDE       IN   AB_PREMISE.BLOCK_SIDE%TYPE,
        INUPREMISE          IN   AB_PREMISE.PREMISE%TYPE,
        INUNUMBER_DIVISION  IN   AB_PREMISE.NUMBER_DIVISION%TYPE
    ) RETURN AB_PREMISE.BLOCK_ID%TYPE
    IS

        CURSOR CUPREMISE  IS
        SELECT PREMISE_ID
        FROM   AB_PREMISE
        WHERE  BLOCK_ID        = INUBLOCK_ID
        AND    BLOCK_SIDE      = ISBBLOCK_SIDE
        AND    PREMISE         = INUPREMISE
        AND    NVL(NUMBER_DIVISION,   AB_BOCONSTANTS.CNUAPPLICATIONNULL ) =
               NVL(INUNUMBER_DIVISION,AB_BOCONSTANTS.CNUAPPLICATIONNULL);

        SBDUMMY  VARCHAR2(1);
        BLRESULT BOOLEAN;

        NUPREMISEID   AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN

        OPEN CUPREMISE;
        FETCH CUPREMISE INTO NUPREMISEID;
        IF ( CUPREMISE%NOTFOUND ) THEN

            CLOSE CUPREMISE;
    		ERRORS.SETERROR
            (
                CONSTANTS.CNURECORD_NOT_EXIST,DAGE_MESSAGE.FSBGETDESCRIPTION(CNUTABLEPARAMETER)
            );
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE CUPREMISE;

        RETURN(NUPREMISEID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE INSPREMISEWITHSEGMENTBLOCK
    (
        INUGEOGRAPLOCATIONID    IN AB_BLOCK.GEOGRAP_LOCATION_ID%TYPE,
        INUZONE                 IN AB_BLOCK.ZONE%TYPE,
        INUSECTOR               IN AB_BLOCK.SECTOR%TYPE,
        INUBLOCK_               IN AB_BLOCK.BLOCK_%TYPE,
        ISBBLOCKSIDE            IN AB_PREMISE.BLOCK_SIDE%TYPE,
        INUPREMISE              IN AB_PREMISE.PREMISE%TYPE,
        INUNUMBERDIVISION       IN AB_PREMISE.NUMBER_DIVISION%TYPE,
        INUPREMISETYPE          IN AB_PREMISE.PREMISE_TYPE_ID%TYPE,
        ISBADDRESS              IN AB_ADDRESS.ADDRESS%TYPE,
        ISBZIP_CODE             IN AB_PREMISE.ZIP_CODE_ID%TYPE,
        ONUPREMISEID            OUT AB_PREMISE.PREMISE_ID%TYPE,
        INUADDRESSID            IN AB_ADDRESS.ADDRESS_ID%TYPE DEFAULT NULL
    )
    IS
        NUBLOCK_ID  AB_BLOCK.BLOCK_ID%TYPE;
        NUPREMISEID AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia AB_BOPremise.InsPremiseWithSegmentBlock. Ubicaci�n:['||INUGEOGRAPLOCATIONID||']',2);
        UT_TRACE.TRACE('Zona:['||INUZONE||']Sector:['||INUSECTOR||']Id Direcci�n:['||INUADDRESSID||']',3);

        
        AB_BOBLOCK.INSERTBLOCK  (
                                INUGEOGRAPLOCATIONID,
                                INUZONE,
                                INUSECTOR,
                                INUBLOCK_,
                                NULL,
                                NULL,
                                NUBLOCK_ID
                                );
        UT_TRACE.TRACE('Id Bloque:['||NUBLOCK_ID||']',5);

        
        IF (FBLEXISTPREMISE(NUBLOCK_ID,ISBBLOCKSIDE,INUPREMISE,INUNUMBERDIVISION)) THEN

            ONUPREMISEID := FNUGETPREMISEID(NUBLOCK_ID,ISBBLOCKSIDE,INUPREMISE,INUNUMBERDIVISION);
            UT_TRACE.TRACE('Id Predio Existente:['||ONUPREMISEID||']',5);

            
            IF  NVL(INUADDRESSID, -1) != -1  AND  INUADDRESSID != 0 THEN
            
                
                AB_BOADDRESS.UPDESTATENUMBER(INUADDRESSID, ONUPREMISEID);
            END IF;
            RETURN;
            
        END IF;
             
        
        IF  (INUADDRESSID IS NOT NULL) THEN
        
            
            AB_BOADDRESS.GETESTATENUMBER(INUADDRESSID, NUPREMISEID);

            
            SETPREMISEID(NUPREMISEID);

            
            SETADDRESSID(INUADDRESSID);
        END IF;

        AB_BOPREMISE.INSERTPREMISEWITCHSEGMENT  (
                                                NUBLOCK_ID,
                                                ISBBLOCKSIDE,
                                                INUPREMISE,
                                                INUNUMBERDIVISION,
                                                INUPREMISETYPE,
                                                ISBADDRESS,
                                                ISBZIP_CODE,
                                                ONUPREMISEID
                                                );
        INITGLOBAL;

        UT_TRACE.TRACE('Finaliza AB_BOPremise.InsPremiseWithSegmentBlock',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            INITGLOBAL;
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            INITGLOBAL;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    


    





















  	PROCEDURE VALIDATEEXISTPREMISE
    (
        INUBLOCK_ID         IN   AB_PREMISE.BLOCK_ID%TYPE,
        ISBBLOCK_SIDE       IN   AB_PREMISE.BLOCK_SIDE%TYPE,
        INUPREMISE          IN   AB_PREMISE.PREMISE%TYPE,
        INUNUMBER_DIVISION  IN   AB_PREMISE.NUMBER_DIVISION%TYPE
    ) IS

    BEGIN

        IF ( NOT  AB_BOPREMISE.FBLEXISTPREMISE
             (
                 INUBLOCK_ID,
                 ISBBLOCK_SIDE,
                 INUPREMISE,
                 INUNUMBER_DIVISION
              )
            )
        THEN

    		ERRORS.SETERROR
            (
                CONSTANTS.CNURECORD_NOT_EXIST,DAGE_MESSAGE.FSBGETDESCRIPTION(CNUTABLEPARAMETER)
            );
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        	
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    





















  	PROCEDURE VALDUPLICATEPREMISE
    (
        INUBLOCK_ID         IN   AB_PREMISE.BLOCK_ID%TYPE,
        ISBBLOCK_SIDE       IN   AB_PREMISE.BLOCK_SIDE%TYPE,
        INUPREMISE          IN   AB_PREMISE.PREMISE%TYPE,
        INUNUMBER_DIVISION  IN   AB_PREMISE.NUMBER_DIVISION%TYPE
    )
    IS
    BEGIN

        IF ( AB_BOPREMISE.FBLEXISTPREMISE
             (
                 INUBLOCK_ID,
                 ISBBLOCK_SIDE,
                 INUPREMISE,
                 INUNUMBER_DIVISION
              )
            )
        THEN

    		ERRORS.SETERROR
            (
                CONSTANTS.CNURECORD_ALREADY_EXIST,DAGE_MESSAGE.FSBGETDESCRIPTION(CNUTABLEPARAMETER)
            );
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        	
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE EXISTPREMISEWITHSEGMENTBLOCK
    (
        INUGEOGRAP_LOCATION_ID  IN   AB_BLOCK.GEOGRAP_LOCATION_ID%TYPE,
        INUZONE                 IN   AB_BLOCK.ZONE%TYPE,
        INUSECTOR               IN   AB_BLOCK.SECTOR%TYPE,
        INUBLOCK_               IN   AB_BLOCK.BLOCK_%TYPE,
        ISBBLOCKSIDE            IN   AB_PREMISE.BLOCK_SIDE%TYPE,
        INUPREMISE              IN   AB_PREMISE.PREMISE%TYPE,
        INUNUMBER_DIVISION      IN   AB_PREMISE.NUMBER_DIVISION%TYPE,
        ONUPREMISEID            OUT  AB_PREMISE.PREMISE_ID%TYPE
    )
    IS

        NUBLOCK_ID  AB_BLOCK.BLOCK_ID%TYPE;

    BEGIN

        
        DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAP_LOCATION_ID );

        
        NUBLOCK_ID := AB_BOBLOCK.FNUGETBLOCKID
                                        (
                                            INUGEOGRAP_LOCATION_ID,
                                            INUZONE,
                                            INUSECTOR,
                                            INUBLOCK_
                                        );
        
        ONUPREMISEID := AB_BOPREMISE.FNUGETPREMISEID
                                        (
                                            NUBLOCK_ID,
                                            ISBBLOCKSIDE,
                                            INUPREMISE,
                                            INUNUMBER_DIVISION
                                        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        	
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE VALIDGEOGRAPLOCATION
    (
        INUGEOGRAPLOCATION IN   AB_BLOCK.GEOGRAP_LOCATION_ID%TYPE,
        INUPREMISE_ID         IN   AB_PREMISE.PREMISE_ID%TYPE
    )
    IS
        NUBLOCKID AB_PREMISE.BLOCK_ID%TYPE;
        NUGEOLOCATIONID AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
    BEGIN
        
        NUBLOCKID := DAAB_PREMISE.FNUGETBLOCK_ID(INUPREMISE_ID);
        
        NUGEOLOCATIONID := DAAB_BLOCK.FNUGETGEOGRAP_LOCATION_ID(NUBLOCKID);
        


        IF  INUGEOGRAPLOCATION <> NUGEOLOCATIONID THEN
            
            ERRORS.SETERROR(AB_BOMESSAGE_CONSTANTS.CNUDIFFERENT, INUGEOGRAPLOCATION||'|'||NUGEOLOCATIONID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        	
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUGETPREMISEGEOGRAPLOCATION
    (
        INUPREMISEID IN AB_PREMISE.PREMISE_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    IS
        NUGEOGRAP_LOCATION_ID GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        NUBLOCK_ID            AB_BLOCK.BLOCK_ID%TYPE;
        NUADDRESS_ID          AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
        NUGEOGRAP_LOCATION_ID := NULL;
        NUBLOCK_ID            := NULL;
        NUADDRESS_ID          := NULL;
        
        
        
        
        
        
        
        
        
        IF ( FBLEXISTPREMISEINADDRESS( INUPREMISEID, NUADDRESS_ID ) ) THEN
        
            NUGEOGRAP_LOCATION_ID := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID(NUADDRESS_ID);
            
        ELSIF ( FBLBLOCKIDISNULL(INUPREMISEID, NUBLOCK_ID) = FALSE ) THEN
        
            NUGEOGRAP_LOCATION_ID := DAAB_BLOCK.FNUGETGEOGRAP_LOCATION_ID(NUBLOCK_ID);
            
        ELSE
            ERRORS.SETERROR( CNUNOGEOGRAPINPREMISE, TO_CHAR(INUPREMISEID) );
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        RETURN NUGEOGRAP_LOCATION_ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPREMISEGEOGRAPLOCATION;
    
    
    FUNCTION FNUGETBUILDINGDIV
        (
        INUPREMISEID    IN AB_PREMISE.PREMISE_ID%TYPE
        )
    RETURN AB_BUILDING_DIVISION.BUILDING_DIVISION_ID%TYPE
    IS
        NUBUILDINDIVID  AB_BUILDING_DIVISION.BUILDING_DIVISION_ID%TYPE;

        CURSOR CUBUILDING_DIVISION IS
        SELECT BUILDING_DIVISION_ID
        FROM   AB_BUILDING_DIVISION
        WHERE  PREMISE_ID = INUPREMISEID;
    BEGIN
        UT_TRACE.TRACE('Inicia m�todo AB_BOPremise.fnuGetBuildingDiv inuPremiseId ['||INUPREMISEID||']',12);

        OPEN CUBUILDING_DIVISION;
        
        FETCH CUBUILDING_DIVISION INTO NUBUILDINDIVID;
        
        IF (CUBUILDING_DIVISION%NOTFOUND) THEN
            NUBUILDINDIVID:=NULL;
        END IF;
        
        CLOSE CUBUILDING_DIVISION;
        
        UT_TRACE.TRACE('Finaliza m�todo AB_BOPremise.fnuGetBuildingDiv nuBuildinDivId ['||NUBUILDINDIVID||']',12);

        RETURN NUBUILDINDIVID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUBUILDING_DIVISION%ISOPEN) THEN
                CLOSE CUBUILDING_DIVISION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUBUILDING_DIVISION%ISOPEN) THEN
                CLOSE CUBUILDING_DIVISION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    FUNCTION FSBGETPREMISEDESC
    (
        INUPREMISEID    IN AB_PREMISE.PREMISE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        RCPREMISE       DAAB_PREMISE.STYAB_PREMISE;
        RCBUILDINGDIV   DAAB_BUILDING_DIVISION.STYAB_BUILDING_DIVISION;
        RCBLOCK         DAAB_BLOCK.STYAB_BLOCK;
        NUBUILDINGDIV   AB_BUILDING_DIVISION.BUILDING_DIVISION_ID%TYPE;
        SBDESCRIPTION   VARCHAR2(100);
    BEGIN
        UT_TRACE.TRACE('Inicia m�todo AB_BOPremise.fsbGetPremiseDesc inuPremiseId ['||INUPREMISEID||']',12);
        
        
        RCPREMISE := DAAB_PREMISE.FRCGETRECORD(INUPREMISEID);
        
        
        NUBUILDINGDIV:=AB_BOPREMISE.FNUGETBUILDINGDIV(INUPREMISEID);

        
        IF (NUBUILDINGDIV IS NOT NULL) THEN
            RCBUILDINGDIV:= DAAB_BUILDING_DIVISION.FRCGETRECORD(NUBUILDINGDIV);
        END IF;

        
        IF (RCPREMISE.BLOCK_ID IS NOT NULL) THEN
            RCBLOCK:= DAAB_BLOCK.FRCGETRECORD(RCPREMISE.BLOCK_ID);
        END IF;

        
        SBDESCRIPTION:=SUBSTR(RCBLOCK.ZONE||' '||RCBLOCK.SECTOR||' '||RCBLOCK.BLOCK_||' '||
                              RCPREMISE.BLOCK_SIDE||' '||RCPREMISE.PREMISE||' '||
                              RCPREMISE.NUMBER_DIVISION||' '||RCBUILDINGDIV.COMPLEMENT,1,100);


        UT_TRACE.TRACE('Finaliza m�todo AB_BOPremise.sbDescription sbDescription ['||SBDESCRIPTION||']',12);
        
        RETURN SBDESCRIPTION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

    PROCEDURE VALIDDATAPREMISE
    (
        INUZONE                 IN AB_BLOCK.ZONE%TYPE,
        INUSECTOR               IN AB_BLOCK.SECTOR%TYPE,
        INUBLOCK_               IN AB_BLOCK.BLOCK_%TYPE,
        ISBBLOCKSIDE            IN AB_PREMISE.BLOCK_SIDE%TYPE,
        INUPREMISE              IN AB_PREMISE.PREMISE%TYPE
    )
    IS
    BEGIN

        
        VALIDBLOCKNULL(INUBLOCK_);
        VALIDBLOCKSIDENULL(ISBBLOCKSIDE);
        VALIDZONENULL(INUZONE);
        VALIDSECTORNULL(INUSECTOR);
        VALIDPREMISENULL(INUPREMISE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    














    FUNCTION FNUINSERTINICIALPREMISE
    (
        INUCATEGORY    IN AB_PREMISE.CATEGORY_%TYPE,
        INUSUBCATEGORY IN AB_PREMISE.SUBCATEGORY_%TYPE
    ) RETURN AB_PREMISE.PREMISE_ID%TYPE
    IS
        NUPREMISEID AB_PREMISE.PREMISE_ID%TYPE;
        RCPREMISE   DAAB_PREMISE.STYAB_PREMISE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.fnuInsertInicialPremise', 3);

        NUPREMISEID := AB_BOSEQUENCE.FNUNEXTPREMISE;
        RCPREMISE.PREMISE_ID := NUPREMISEID;
        RCPREMISE.CATEGORY_ := INUCATEGORY;
        RCPREMISE.SUBCATEGORY_ := INUSUBCATEGORY;

        
        DAAB_PREMISE.INSRECORD(RCPREMISE);
        
        UT_TRACE.TRACE('FIN AB_BOPremise.fnuInsertInicialPremise : '||NUPREMISEID, 3);

        RETURN NUPREMISEID;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.fnuInsertInicialPremise', 3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.fnuInsertInicialPremise', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUINSERTINICIALPREMISE;
    
    















    PROCEDURE UPDPREMISE
    (
        INUPREMISEID   IN AB_PREMISE.PREMISE_ID%TYPE,
        INUCATEGORY    IN AB_PREMISE.CATEGORY_%TYPE,
        INUSUBCATEGORY IN AB_PREMISE.SUBCATEGORY_%TYPE
    )
    IS
        RCPREMISE   DAAB_PREMISE.STYAB_PREMISE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.updPremise : '||INUPREMISEID, 3);
        
        
        DAAB_PREMISE.GETRECORD(INUPREMISEID, RCPREMISE);

        IF RCPREMISE.CATEGORY_ IS NULL OR RCPREMISE.SUBCATEGORY_ IS NULL THEN
            RCPREMISE.CATEGORY_ := INUCATEGORY;
            RCPREMISE.SUBCATEGORY_ := INUSUBCATEGORY;
            
            
            DAAB_PREMISE.UPDRECORD(RCPREMISE);
        END IF;

        UT_TRACE.TRACE('FIN AB_BOPremise.updPremise', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.updPremise', 3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.updPremise', 3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDPREMISE;

    

















    PROCEDURE UPDATECONSECUTIVE
    (
        INUPREMISEID    IN  AB_PREMISE.PREMISE_ID%TYPE,
        INUCONSECUTIVE  IN  AB_PREMISE.CONSECUTIVE%TYPE
    )
    IS
    BEGIN
        
        DAAB_PREMISE.UPDCONSECUTIVE(INUPREMISEID,INUCONSECUTIVE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATECONSECUTIVE;
    
    

















    PROCEDURE UPDATESALEDATE
    (
        INUADDRESSID  IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        IDTSALEDATE   IN  AB_PREMISE.SALEDATE%TYPE
    )
    IS
        NUPREMISEID  AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio AB_BOPremise.updateSaleDate ', 2);
        
        NUPREMISEID := DAAB_ADDRESS.FNUGETESTATE_NUMBER(INUADDRESSID,0);
        
        
        IF (NUPREMISEID IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUADDRESSNOTEXIST,INUADDRESSID);
        END IF;
        
        
        IF (IDTSALEDATE > UT_DATE.FDTSYSDATE) THEN
            GE_BOERRORS.SETERRORCODE(CNUVALDATE);
        END IF;
        
        
        DAAB_PREMISE.UPDSALEDATE(NUPREMISEID,IDTSALEDATE);

        UT_TRACE.TRACE('FIN AB_BOPremise.updateSaleDate ', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.updateSaleDate ', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_BOPremise.updateSaleDate ', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATESALEDATE;
    
    




























    PROCEDURE UPDPREMISE
    (
        INUPREMISEID          IN AB_PREMISE.PREMISE_ID%TYPE,
        INUPREMISE            IN AB_PREMISE.PREMISE%TYPE,
        INUNUMBERDIVISION     IN AB_PREMISE.NUMBER_DIVISION%TYPE,
        INUPREMISETYPEID      IN AB_PREMISE.PREMISE_TYPE_ID%TYPE,
        ISBAPARTAMENTSAMOUNT  IN AB_PREMISE.APARTAMENTS_AMOUNT%TYPE,
        INUFLOORSAMOUNT       IN AB_PREMISE.FLOORS_AMOUNT%TYPE,
        ISBSETBACKBUILDING    IN AB_PREMISE.SETBACK_BUILDING%TYPE,
        ISBSERVANTSPASSAGE    IN AB_PREMISE.SERVANTS_PASSAGE%TYPE,
        INUPREMISESTATUSID    IN AB_PREMISE.PREMISE_STATUS_ID%TYPE,
        INUCATEGORY           IN AB_PREMISE.CATEGORY_%TYPE,
        INUSUBCATEGORY        IN AB_PREMISE.SUBCATEGORY_%TYPE,
        INUCONSECUTIVE        IN AB_PREMISE.CONSECUTIVE%TYPE
    )
    IS
        RCPREMISE             DAAB_PREMISE.STYAB_PREMISE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.UpdPremise', 2);
        DAAB_PREMISE.GETRECORD(INUPREMISEID,RCPREMISE);

        
        RCPREMISE.PREMISE_ID  := INUPREMISEID;
        RCPREMISE.PREMISE  :=   INUPREMISE;
        RCPREMISE.NUMBER_DIVISION  :=   INUNUMBERDIVISION;
        RCPREMISE.PREMISE_TYPE_ID  :=   INUPREMISETYPEID;
        RCPREMISE.APARTAMENTS_AMOUNT  :=   ISBAPARTAMENTSAMOUNT;
        RCPREMISE.FLOORS_AMOUNT  :=   INUFLOORSAMOUNT;
        RCPREMISE.SETBACK_BUILDING  :=   ISBSETBACKBUILDING;
        RCPREMISE.SERVANTS_PASSAGE  :=   ISBSERVANTSPASSAGE;
        RCPREMISE.PREMISE_STATUS_ID  :=   INUPREMISESTATUSID;
        RCPREMISE.CATEGORY_  :=   INUCATEGORY;
        RCPREMISE.SUBCATEGORY_  :=   INUSUBCATEGORY;
        RCPREMISE.CONSECUTIVE  :=   INUCONSECUTIVE;

        
        DAAB_PREMISE.UPDRECORD(RCPREMISE);

        UT_TRACE.TRACE('FIN AB_BOPremise.UpdPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.UpdPremise', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.UpdPremise', 2);
            ERRORS.SETERROR(CNUERRDATA, CSBENTITYPREMISE);
            RAISE EX.CONTROLLED_ERROR;
    END UPDPREMISE;
    
    

































    PROCEDURE VALIDATEDATAPREMISE
    (
        INUPREMISEID          IN AB_PREMISE.PREMISE_ID%TYPE,
        INUPREMISE            IN AB_PREMISE.PREMISE%TYPE,
        INUNUMBERDIVISION     IN AB_PREMISE.NUMBER_DIVISION%TYPE,
        INUPREMISETYPEID      IN AB_PREMISE.PREMISE_TYPE_ID%TYPE,
        ISBAPARTAMENTSAMOUNT  IN AB_PREMISE.APARTAMENTS_AMOUNT%TYPE,
        INUFLOORSAMOUNT       IN AB_PREMISE.FLOORS_AMOUNT%TYPE,
        ISBSETBACKBUILDING    IN AB_PREMISE.SETBACK_BUILDING%TYPE,
        ISBSERVANTSPASSAGE    IN AB_PREMISE.SERVANTS_PASSAGE%TYPE,
        INUPREMISESTATUSID    IN AB_PREMISE.PREMISE_STATUS_ID%TYPE,
        INUCATEGORY           IN AB_PREMISE.CATEGORY_%TYPE,
        INUSUBCATEGORY        IN AB_PREMISE.SUBCATEGORY_%TYPE,
        INUCONSECUTIVE        IN AB_PREMISE.CONSECUTIVE%TYPE
    )
    IS
        NUPREMISEID           AB_PREMISE.PREMISE_ID%TYPE;
        NUPREMISE             AB_PREMISE.PREMISE%TYPE;
        NUNUMBERDIVISION      AB_PREMISE.NUMBER_DIVISION%TYPE;
        NUPREMISETYPEID       AB_PREMISE.PREMISE_TYPE_ID%TYPE;
        SBAPARTAMENTSAMOUNT   AB_PREMISE.APARTAMENTS_AMOUNT%TYPE;
        NUFLOORSAMOUNT        AB_PREMISE.FLOORS_AMOUNT%TYPE;
        SBSETBACKBUILDING     AB_PREMISE.SETBACK_BUILDING%TYPE;
        SBSERVANTSPASSAGE     AB_PREMISE.SERVANTS_PASSAGE%TYPE;
        NUPREMISESTATUSID     AB_PREMISE.PREMISE_STATUS_ID%TYPE;
        NUCATEGORY            AB_PREMISE.CATEGORY_%TYPE;
        NUSUBCATEGORY         AB_PREMISE.SUBCATEGORY_%TYPE;
        NUCONSECUTIVE         AB_PREMISE.CONSECUTIVE%TYPE;
        NUROUTEID             OR_ROUTE.ROUTE_ID%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.ValidateDataPremise', 2);

        NUPREMISEID := INUPREMISEID;
        DAAB_PREMISE.ACCKEY(NUPREMISEID);

        NUPREMISE           := INUPREMISE;
        
        NUNUMBERDIVISION    := INUNUMBERDIVISION;
        
        IF INUPREMISETYPEID IS NOT NULL THEN
            NUPREMISETYPEID     := INUPREMISETYPEID;
            DAAB_PREMISE_TYPE.ACCKEY(NUPREMISETYPEID);
        END IF;
        
        SBAPARTAMENTSAMOUNT := ISBAPARTAMENTSAMOUNT;
        
        NUFLOORSAMOUNT      := INUFLOORSAMOUNT;
        
        IF ISBSETBACKBUILDING IS NOT NULL THEN
            IF ( (UPPER(ISBSETBACKBUILDING) != CSBSI  ) AND (UPPER(ISBSETBACKBUILDING) != GE_BOCONSTANTS.GETNO)) THEN
               ERRORS.SETERROR (CNUVALDATA, CSBSETBACKBUILDING);
               RAISE EX.CONTROLLED_ERROR;
           END IF;
        END IF;

        IF ISBSERVANTSPASSAGE IS NOT NULL THEN
            IF ( (UPPER(ISBSERVANTSPASSAGE) != CSBSI  ) AND (UPPER(ISBSERVANTSPASSAGE) != GE_BOCONSTANTS.GETNO)) THEN
               ERRORS.SETERROR (CNUVALDATA, CSBSERVANTSPASSAGE);
               RAISE EX.CONTROLLED_ERROR;
           END IF;
        END IF;

        IF INUPREMISESTATUSID IS NOT NULL THEN
            NUPREMISESTATUSID   := INUPREMISESTATUSID;
            DAAB_PREMISE_STATUS.ACCKEY(NUPREMISESTATUSID);
        END IF;
        
        IF INUCATEGORY IS NOT NULL OR INUSUBCATEGORY IS NOT NULL THEN
            NUCATEGORY          := INUCATEGORY;
            NUSUBCATEGORY       := INUSUBCATEGORY;
            DASUBCATEG.ACCKEY(NUCATEGORY,NUSUBCATEGORY);
        END IF;
        
        
        NUCONSECUTIVE := DAAB_PREMISE.FNUGETCONSECUTIVE(NUPREMISEID);
        
        IF (NUCONSECUTIVE IS NULL AND INUCONSECUTIVE IS NULL) THEN
            RETURN;
        END IF;

        
        NUROUTEID := AB_BCPREMISE.FNUGETROUTEID(NUPREMISEID);

        IF (NUCONSECUTIVE IS NULL AND INUCONSECUTIVE IS NOT NULL) THEN
            IF (NUROUTEID IS NULL) THEN
                
                GE_BOERRORS.SETERRORCODEARGUMENT(901755,NUPREMISEID);
            END IF;
        END IF;

        IF (INUCONSECUTIVE IS NULL OR INUCONSECUTIVE <> NUCONSECUTIVE) THEN
            IF (INUCONSECUTIVE IS NOT NULL) THEN
                
                OR_BOROUTEITINERARY.VALREPEATCONS(NUROUTEID,INUCONSECUTIVE);
            END IF;
            
            IF (NUCONSECUTIVE IS NOT NULL) THEN
                
                OR_BOROUTEITINERARY.VALEXISTCONSITI(NUROUTEID,NUCONSECUTIVE);
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN AB_BOPremise.ValidateDataPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.ValidateDataPremise', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_BOPremise.ValidateDataPremise', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEDATAPREMISE;
    
     


















    PROCEDURE DELPREMISE
    (
        INUID             IN  AB_PREMISE.PREMISE_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.DelPremise', 1);

        
        DAAB_PREMISE.DELRECORD(INUID);

        UT_TRACE.TRACE('fin AB_BOPremise.DelPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BSPremise.DelPremise', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_BSPremise.DelPremise', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELPREMISE;
    
    
















    PROCEDURE VALIDATEIDPREMISE
    (
        INUPREMISEID          IN AB_PREMISE.PREMISE_ID%TYPE
    )

    IS
        NUPREMISEID           AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.ValidateIdPremise', 2);

        IF (INUPREMISEID IS NOT NULL) THEN
            NUPREMISEID := INUPREMISEID;
            DAAB_PREMISE.ACCKEY(NUPREMISEID);
        ELSE
            ERRORS.SETERROR (CNUNULL_VALUE, CSBPREMISEID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('FIN AB_BOPremise.ValidateIdPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.ValidateIdPremise', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_BOPremise.ValidateIdPremise', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEIDPREMISE;
    
    

































    PROCEDURE GETPREMISE
    (
        INUPREMISEID          IN AB_PREMISE.PREMISE_ID%TYPE,
        ONUPREMISE            OUT AB_PREMISE.PREMISE%TYPE,
        ONUNUMBERDIVISION     OUT AB_PREMISE.NUMBER_DIVISION%TYPE,
        ONUPREMISETYPEID      OUT AB_PREMISE.PREMISE_TYPE_ID%TYPE,
        OSBAPARTAMENTSAMOUNT  OUT AB_PREMISE.APARTAMENTS_AMOUNT%TYPE,
        ONUFLOORSAMOUNT       OUT AB_PREMISE.FLOORS_AMOUNT%TYPE,
        OSBSETBACKBUILDING    OUT AB_PREMISE.SETBACK_BUILDING%TYPE,
        OSBSERVANTSPASSAGE    OUT AB_PREMISE.SERVANTS_PASSAGE%TYPE,
        ONUPREMISESTATUSID    OUT AB_PREMISE.PREMISE_STATUS_ID%TYPE,
        ONUCATEGORY           OUT AB_PREMISE.CATEGORY_%TYPE,
        ONUSUBCATEGORY        OUT AB_PREMISE.SUBCATEGORY_%TYPE,
        ONUCONSECUTIVE        OUT AB_PREMISE.CONSECUTIVE%TYPE,
        ONUCICLFACT           OUT AB_SEGMENTS.CICLCODI%TYPE,
        ONUSECTOROPER         OUT AB_SEGMENTS.OPERATING_SECTOR_ID%TYPE
    )
    IS
        RCPREMISE             DAAB_PREMISE.STYAB_PREMISE;
        NUSEGMENTID           AB_SEGMENTS.SEGMENTS_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.GetPremise inuPremiseId['||INUPREMISEID||']', 2);
        DAAB_PREMISE.GETRECORD(INUPREMISEID,RCPREMISE);

        AB_BCADDRESS.GETSEGMENTBYPREMISE(INUPREMISEID,NUSEGMENTID);
        UT_TRACE.TRACE('nuSegmentId ['||NUSEGMENTID||']', 3);
        
        ONUPREMISE            :=      RCPREMISE.PREMISE;
        ONUNUMBERDIVISION     :=      RCPREMISE.NUMBER_DIVISION;
        ONUPREMISETYPEID      :=      RCPREMISE.PREMISE_TYPE_ID;
        OSBAPARTAMENTSAMOUNT  :=      RCPREMISE.APARTAMENTS_AMOUNT;
        ONUFLOORSAMOUNT       :=      RCPREMISE.FLOORS_AMOUNT;
        OSBSETBACKBUILDING    :=      RCPREMISE.SETBACK_BUILDING;
        OSBSERVANTSPASSAGE    :=      RCPREMISE.SERVANTS_PASSAGE;
        ONUPREMISESTATUSID    :=      RCPREMISE.PREMISE_STATUS_ID;
        ONUCATEGORY           :=      RCPREMISE.CATEGORY_;
        ONUSUBCATEGORY        :=      RCPREMISE.SUBCATEGORY_;
        ONUCONSECUTIVE        :=      RCPREMISE.CONSECUTIVE;
        ONUCICLFACT           :=      DAAB_SEGMENTS.FNUGETCICLCODI(NUSEGMENTID);
        ONUSECTOROPER         :=      DAAB_SEGMENTS.FNUGETOPERATING_SECTOR_ID(NUSEGMENTID);

        UT_TRACE.TRACE('FIN AB_BOPremise.GetPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.GetPremise', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.GetPremise', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPREMISE;
    
    


















    PROCEDURE INSPREMISETYPE
    (
        ISBDESCRIPTION   IN   AB_PREMISE_TYPE.DESCRIPTION%TYPE,
        INUACCESSTIME    IN   AB_PREMISE_TYPE.ACCESS_TIME%TYPE,
        ONUPREMTYPEID    OUT  AB_PREMISE_TYPE.PREMISE_TYPE_ID%TYPE
    )
    IS
        RCPREMISETYPE         DAAB_PREMISE_TYPE.STYAB_PREMISE_TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.InsPremiseType', 2);

        
        ONUPREMTYPEID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('AB_PREMISE_TYPE','SEQ_AB_PREMISE_TYPE_50000898');

        
        RCPREMISETYPE.PREMISE_TYPE_ID := ONUPREMTYPEID;
        RCPREMISETYPE.DESCRIPTION     := ISBDESCRIPTION;
        RCPREMISETYPE.ACCESS_TIME     := INUACCESSTIME;

        
        DAAB_PREMISE_TYPE.INSRECORD(RCPREMISETYPE);

        UT_TRACE.TRACE('FIN AB_BOPremise.InsPremiseType', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.InsPremiseType', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.InsPremiseType', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSPREMISETYPE;
    
    

















    PROCEDURE VALIDATEDATAPREMTYPE
    (
        ISBDESCRIPTION   IN   AB_PREMISE_TYPE.DESCRIPTION%TYPE,
        INUACCESSTIME    IN   AB_PREMISE_TYPE.ACCESS_TIME%TYPE
    )
    IS
        SBDESCRIPTION   AB_PREMISE_TYPE.DESCRIPTION%TYPE;
        NUACCESSTIME    AB_PREMISE_TYPE.ACCESS_TIME%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.ValidateDataPremType', 2);

        IF ISBDESCRIPTION IS NULL THEN
            ERRORS.SETERROR (CNUNULL_VALUE, CSBDESCPREMTYPE);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        SBDESCRIPTION := ISBDESCRIPTION;
        NUACCESSTIME := INUACCESSTIME;

        UT_TRACE.TRACE('FIN AB_BOPremise.ValidateDataPremType', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.ValidateDataPremType', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.ValidateDataPremType', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEDATAPREMTYPE;
    
    






















    PROCEDURE UPDPREMISETYPE
    (
        INUPREMTYPEID    IN  AB_PREMISE_TYPE.PREMISE_TYPE_ID%TYPE,
        ISBDESCRIPTION   IN  AB_PREMISE_TYPE.DESCRIPTION%TYPE,
        INUACCESSTIME    IN  AB_PREMISE_TYPE.ACCESS_TIME%TYPE
    )
    IS
        RCPREMISETYPE             DAAB_PREMISE_TYPE.STYAB_PREMISE_TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.UpdPremiseType', 2);
        DAAB_PREMISE_TYPE.GETRECORD(INUPREMTYPEID,RCPREMISETYPE);

        
        RCPREMISETYPE.PREMISE_TYPE_ID := INUPREMTYPEID;
        RCPREMISETYPE.DESCRIPTION     := ISBDESCRIPTION;
        RCPREMISETYPE.ACCESS_TIME     := INUACCESSTIME;

        
        DAAB_PREMISE_TYPE.UPDRECORD(RCPREMISETYPE);

        UT_TRACE.TRACE('FIN AB_BOPremise.UpdPremiseType', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.UpdPremiseType', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.UpdPremiseType', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDPREMISETYPE;
    
    


















    PROCEDURE VALIDATEIDPREMTYPE
    (
        INUPREMISETYPEID          IN AB_PREMISE_TYPE.PREMISE_TYPE_ID%TYPE
    )

    IS
        NUPREMISETYPEID           AB_PREMISE_TYPE.PREMISE_TYPE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.ValidateIdPremType', 2);

        IF (INUPREMISETYPEID IS NOT NULL) THEN
            NUPREMISETYPEID := INUPREMISETYPEID;
            DAAB_PREMISE_TYPE.ACCKEY(NUPREMISETYPEID);
        ELSE
            ERRORS.SETERROR (CNUNULL_VALUE, CSBPREMISETYPEID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('FIN AB_BOPremise.ValidateIdPremType', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.ValidateIdPremType', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_BOPremise.ValidateIdPremType', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEIDPREMTYPE;
    
     


















    PROCEDURE DELPREMISETYPE
    (
        INUID             IN  AB_PREMISE_TYPE.PREMISE_TYPE_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.DelPremiseType', 2);

        
        DAAB_PREMISE_TYPE.DELRECORD(INUID);

        UT_TRACE.TRACE('FIN AB_BOPremise.DelPremiseType', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BSPremise.DelPremiseType', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_BSPremise.DelPremiseType', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELPREMISETYPE;
    
    




















    PROCEDURE GETPREMISETYPE
    (
        INUPREMTYPEID    IN   AB_PREMISE_TYPE.PREMISE_TYPE_ID%TYPE,
        OSBDESCRIPTION   OUT  AB_PREMISE_TYPE.DESCRIPTION%TYPE,
        ONUACCESSTIME    OUT  AB_PREMISE_TYPE.ACCESS_TIME%TYPE
    )
    IS
    RCPREMISETYPE             DAAB_PREMISE_TYPE.STYAB_PREMISE_TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.GetPremiseType', 2);

        DAAB_PREMISE_TYPE.GETRECORD(INUPREMTYPEID,RCPREMISETYPE);

        
        OSBDESCRIPTION  := RCPREMISETYPE.DESCRIPTION;
        ONUACCESSTIME   := RCPREMISETYPE.ACCESS_TIME;

        UT_TRACE.TRACE('FIN AB_BOPremise.GetPremiseType', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.GetPremiseType', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.GetPremiseType', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPREMISETYPE;
    
    


























    PROCEDURE INSINFOPREMISE
    (
        INUPREMISEID     IN  AB_INFO_PREMISE.PREMISE_ID%TYPE,
        ISBRING          IN  AB_INFO_PREMISE.IS_RING%TYPE,
        IDTDATERING      IN  AB_INFO_PREMISE.DATE_RING%TYPE,
        ISBCONNECTION    IN  AB_INFO_PREMISE.IS_CONNECTION%TYPE,
        ISBINTERNAL      IN  AB_INFO_PREMISE.IS_INTERNAL%TYPE,
        INUINTERNALTYPE  IN  AB_INFO_PREMISE.INTERNAL_TYPE%TYPE,
        ISBMEASUREMENT   IN  AB_INFO_PREMISE.IS_MEASUREMENT%TYPE,
        INUNUMPOINTS     IN  AB_INFO_PREMISE.NUMBER_POINTS%TYPE,
        INULEVELRISK     IN  AB_INFO_PREMISE.LEVEL_RISK%TYPE,
        ISBDESCRISK      IN  AB_INFO_PREMISE.DESCRIPTION_RISK%TYPE
    )
    IS
        RCINFOPREM       DAAB_INFO_PREMISE.STYAB_INFO_PREMISE;
        NUINFOPREMID     AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.InsInfoPremise', 2);

        
        NUINFOPREMID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('AB_INFO_PREMISE','SEQ_AB_INFO_PREMISE_187754');

        
        RCINFOPREM.INFO_PREMISE_ID   :=  NUINFOPREMID;
        RCINFOPREM.PREMISE_ID        :=  INUPREMISEID;
        RCINFOPREM.IS_RING           :=  ISBRING;
        RCINFOPREM.DATE_RING         :=  IDTDATERING;
        RCINFOPREM.IS_CONNECTION     :=  ISBCONNECTION ;
        RCINFOPREM.IS_INTERNAL       :=  ISBINTERNAL;
        RCINFOPREM.INTERNAL_TYPE     :=  INUINTERNALTYPE;
        RCINFOPREM.IS_MEASUREMENT    :=  ISBMEASUREMENT;
        RCINFOPREM.NUMBER_POINTS     :=  INUNUMPOINTS;
        RCINFOPREM.LEVEL_RISK        :=  INULEVELRISK;
        RCINFOPREM.DESCRIPTION_RISK  :=  ISBDESCRISK;

        
        DAAB_INFO_PREMISE.INSRECORD(RCINFOPREM);

        UT_TRACE.TRACE('FIN AB_BOPremise.InsInfoPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.InsInfoPremise', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.InsInfoPremise', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSINFOPREMISE;
    
    


















    PROCEDURE VALDATAINFOPREMISE
    (
        INUPREMISEID     IN  AB_INFO_PREMISE.PREMISE_ID%TYPE,
        ISBRING          IN  AB_INFO_PREMISE.IS_RING%TYPE,
        IDTDATERING      IN  AB_INFO_PREMISE.DATE_RING%TYPE,
        ISBCONNECTION    IN  AB_INFO_PREMISE.IS_CONNECTION%TYPE,
        ISBINTERNAL      IN  AB_INFO_PREMISE.IS_INTERNAL%TYPE,
        INUINTERNALTYPE  IN  AB_INFO_PREMISE.INTERNAL_TYPE%TYPE,
        ISBMEASUREMENT   IN  AB_INFO_PREMISE.IS_MEASUREMENT%TYPE,
        INUNUMPOINTS     IN  AB_INFO_PREMISE.NUMBER_POINTS%TYPE,
        INULEVELRISK     IN  AB_INFO_PREMISE.LEVEL_RISK%TYPE,
        ISBDESCRISK      IN  AB_INFO_PREMISE.DESCRIPTION_RISK%TYPE
    )
    IS
        NUPREMISEID     AB_INFO_PREMISE.PREMISE_ID%TYPE;
        DTDATERING      AB_INFO_PREMISE.DATE_RING%TYPE;
        NUINTERNALTYPE  AB_INFO_PREMISE.INTERNAL_TYPE%TYPE;
        NUNUMPOINTS     AB_INFO_PREMISE.NUMBER_POINTS%TYPE;
        NULEVELRISK     AB_INFO_PREMISE.LEVEL_RISK%TYPE;
        SBDESCRISK      AB_INFO_PREMISE.DESCRIPTION_RISK%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.ValDataInfoPremise', 2);

        IF INUPREMISEID IS NULL THEN
            ERRORS.SETERROR (CNUNULL_VALUE, CSBPREMISEID);
            RAISE EX.CONTROLLED_ERROR;
        ELSE
            NUPREMISEID   := INUPREMISEID;
            DAAB_PREMISE.ACCKEY(NUPREMISEID);
        END IF;
        
        IF ISBRING IS NOT NULL THEN
            IF ( (UPPER(ISBRING) != GE_BOCONSTANTS.GETYES  ) AND (UPPER(ISBRING) != GE_BOCONSTANTS.GETNO)) THEN
               ERRORS.SETERROR (CNUVALDATA, CSBRING);
               RAISE EX.CONTROLLED_ERROR;
           END IF;
        END IF;
        
        DTDATERING := IDTDATERING;
        
        IF ISBCONNECTION IS NOT NULL THEN
            IF ( (UPPER(ISBCONNECTION) != GE_BOCONSTANTS.GETYES  ) AND (UPPER(ISBCONNECTION) != GE_BOCONSTANTS.GETNO)) THEN
               ERRORS.SETERROR (CNUVALDATA, CSBCONNECTION);
               RAISE EX.CONTROLLED_ERROR;
           END IF;
        END IF;
        
        IF ISBINTERNAL IS NOT NULL THEN
            IF ( (UPPER(ISBINTERNAL) != GE_BOCONSTANTS.GETYES  ) AND (UPPER(ISBINTERNAL) != GE_BOCONSTANTS.GETNO)) THEN
               ERRORS.SETERROR (CNUVALDATA, CSBINTERNAL);
               RAISE EX.CONTROLLED_ERROR;
           END IF;
        END IF;
        
        NUINTERNALTYPE := INUINTERNALTYPE;
        
        IF ISBMEASUREMENT IS NOT NULL THEN
            IF ( (UPPER(ISBMEASUREMENT) != GE_BOCONSTANTS.GETYES  ) AND (UPPER(ISBMEASUREMENT) != GE_BOCONSTANTS.GETNO)) THEN
               ERRORS.SETERROR (CNUVALDATA, CSBMEASUREMENT);
               RAISE EX.CONTROLLED_ERROR;
           END IF;
        END IF;

        NUNUMPOINTS := INUNUMPOINTS;
        NULEVELRISK := INULEVELRISK;
        SBDESCRISK  := ISBDESCRISK;

        UT_TRACE.TRACE('FIN AB_BOPremise.ValDataInfoPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.ValDataInfoPremise', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.ValDataInfoPremise', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALDATAINFOPREMISE;
    
    




















    FUNCTION FNUGETIDINFOPREMISE
    (
        INUPREMISEID     IN  AB_INFO_PREMISE.PREMISE_ID%TYPE,
        IBLRAISE         IN  BOOLEAN DEFAULT TRUE
    ) RETURN AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE
    IS
        TBINFOPREMISE         TYTBAB_INFO_PREMISE;
        RFCURSOR              CONSTANTS.TYREFCURSOR;
        NUINFOPREMISEID       AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.fnuGetIdInfoPremise', 2);

        RFCURSOR := AB_BCPREMISE.FRFGETINFOPREMBYPREMISE(INUPREMISEID);

        FETCH RFCURSOR BULK COLLECT INTO TBINFOPREMISE;
        CLOSE RFCURSOR;

        IF (TBINFOPREMISE.FIRST IS NOT NULL) THEN
            NUINFOPREMISEID := TBINFOPREMISE(TBINFOPREMISE.FIRST).INFO_PREMISE_ID;
        ELSE
            IF IBLRAISE THEN
                ERRORS.SETERROR(CNUVALDATA, CSBPREMISEID);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;
        
        RETURN NUINFOPREMISEID;

        UT_TRACE.TRACE('FIN AB_BOPremise.fnuGetIdInfoPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.fnuGetIdInfoPremise', 2);
            IF RFCURSOR%ISOPEN THEN
                CLOSE RFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.fnuGetIdInfoPremise', 2);
            IF RFCURSOR%ISOPEN THEN
                CLOSE RFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETIDINFOPREMISE;
    
    




























    PROCEDURE UPDINFOPREMISE
    (
        INUINFOPREMISEID IN  AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE,
        INUPREMISEID     IN  AB_PREMISE.PREMISE_ID%TYPE,
        ISBRING          IN  AB_INFO_PREMISE.IS_RING%TYPE,
        IDTDATERING      IN  AB_INFO_PREMISE.DATE_RING%TYPE,
        ISBCONNECTION    IN  AB_INFO_PREMISE.IS_CONNECTION%TYPE,
        ISBINTERNAL      IN  AB_INFO_PREMISE.IS_INTERNAL%TYPE,
        INUINTERNALTYPE  IN  AB_INFO_PREMISE.INTERNAL_TYPE%TYPE,
        ISBMEASUREMENT   IN  AB_INFO_PREMISE.IS_MEASUREMENT%TYPE,
        INUNUMPOINTS     IN  AB_INFO_PREMISE.NUMBER_POINTS%TYPE,
        INULEVELRISK     IN  AB_INFO_PREMISE.LEVEL_RISK%TYPE,
        ISBDESCRISK      IN  AB_INFO_PREMISE.DESCRIPTION_RISK%TYPE
    )
    IS
        RCINFOPREMISE         DAAB_INFO_PREMISE.STYAB_INFO_PREMISE;
        TBINFOPREMISE         DAAB_INFO_PREMISE.TYTBAB_INFO_PREMISE;
        RFCURSOR              CONSTANTS.TYREFCURSOR;
        NUINFOPREMISEID       AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.UpdInfoPremise', 2);

        DAAB_INFO_PREMISE.GETRECORD(INUINFOPREMISEID,RCINFOPREMISE);

        
        RCINFOPREMISE.PREMISE_ID        :=  INUPREMISEID;
        RCINFOPREMISE.IS_RING           :=  ISBRING;
        RCINFOPREMISE.DATE_RING         :=  IDTDATERING;
        RCINFOPREMISE.IS_CONNECTION     :=  ISBCONNECTION ;
        RCINFOPREMISE.IS_INTERNAL       :=  ISBINTERNAL;
        RCINFOPREMISE.INTERNAL_TYPE     :=  INUINTERNALTYPE;
        RCINFOPREMISE.IS_MEASUREMENT    :=  ISBMEASUREMENT;
        RCINFOPREMISE.NUMBER_POINTS     :=  INUNUMPOINTS;
        RCINFOPREMISE.LEVEL_RISK        :=  INULEVELRISK;
        RCINFOPREMISE.DESCRIPTION_RISK  :=  ISBDESCRISK;

        
        DAAB_INFO_PREMISE.UPDRECORD(RCINFOPREMISE);

        UT_TRACE.TRACE('FIN AB_BOPremise.UpdInfoPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.UpdInfoPremise', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.UpdInfoPremise', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDINFOPREMISE;
    
     

















    PROCEDURE DELINFOPREMISE
    (
        INUINFOPREMISEID IN  AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.DelInfoPremise', 2);

        
        DAAB_INFO_PREMISE.DELRECORD(INUINFOPREMISEID);

        UT_TRACE.TRACE('FIN AB_BOPremise.DelInfoPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BSPremise.DelInfoPremise', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_BSPremise.DelInfoPremise', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELINFOPREMISE;
    
    


























    PROCEDURE GETINFOPREMISE
    (
        INUPREMISEID     IN  AB_PREMISE.PREMISE_ID%TYPE,
        OSBRING          OUT  AB_INFO_PREMISE.IS_RING%TYPE,
        ODTDATERING      OUT  AB_INFO_PREMISE.DATE_RING%TYPE,
        OSBCONNECTION    OUT  AB_INFO_PREMISE.IS_CONNECTION%TYPE,
        OSBINTERNAL      OUT  AB_INFO_PREMISE.IS_INTERNAL%TYPE,
        ONUINTERNALTYPE  OUT  AB_INFO_PREMISE.INTERNAL_TYPE%TYPE,
        OSBMEAUSERMENT   OUT  AB_INFO_PREMISE.IS_MEASUREMENT%TYPE,
        ONUNUMPOINTS     OUT  AB_INFO_PREMISE.NUMBER_POINTS%TYPE,
        ONULEVELRISK     OUT  AB_INFO_PREMISE.LEVEL_RISK%TYPE,
        OSBDESCRISK      OUT  AB_INFO_PREMISE.DESCRIPTION_RISK%TYPE
    )
    IS
        TBINFOPREMISE         TYTBAB_INFO_PREMISE;
        RFCURSOR              CONSTANTS.TYREFCURSOR;
        NUINFOPREMISEID       AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.GetInfoPremise', 2);

        RFCURSOR := AB_BCPREMISE.FRFGETINFOPREMBYPREMISE(INUPREMISEID);
        FETCH RFCURSOR BULK COLLECT INTO TBINFOPREMISE;
        CLOSE RFCURSOR;

        IF (TBINFOPREMISE.FIRST IS NOT NULL) THEN
            NUINFOPREMISEID := TBINFOPREMISE(TBINFOPREMISE.FIRST).INFO_PREMISE_ID;
            OSBRING         := TBINFOPREMISE(TBINFOPREMISE.FIRST).IS_RING;
            ODTDATERING     := TBINFOPREMISE(TBINFOPREMISE.FIRST).DATE_RING;
            OSBCONNECTION   := TBINFOPREMISE(TBINFOPREMISE.FIRST).IS_CONNECTION;
            OSBINTERNAL     := TBINFOPREMISE(TBINFOPREMISE.FIRST).IS_INTERNAL;
            ONUINTERNALTYPE := TBINFOPREMISE(TBINFOPREMISE.FIRST).INTERNAL_TYPE;
            OSBMEAUSERMENT  := TBINFOPREMISE(TBINFOPREMISE.FIRST).IS_MEASUREMENT;
            ONUNUMPOINTS    := TBINFOPREMISE(TBINFOPREMISE.FIRST).NUMBER_POINTS;
            ONULEVELRISK    := TBINFOPREMISE(TBINFOPREMISE.FIRST).LEVEL_RISK;
            OSBDESCRISK     := TBINFOPREMISE(TBINFOPREMISE.FIRST).DESCRIPTION_RISK;
        ELSE
            ERRORS.SETERROR(CNUVALDATA, CSBPREMISEID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('FIN AB_BOPremise.GetInfoPremise', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.GetInfoPremise', 2);
            IF RFCURSOR%ISOPEN THEN
                CLOSE RFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS  AB_BOPremise.GetInfoPremise', 2);
            IF RFCURSOR%ISOPEN THEN
                CLOSE RFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETINFOPREMISE;
    
    

















    PROCEDURE UPDCOOWNERSHIPRATIO
    (
        INUPREMISEID    IN AB_PREMISE.PREMISE_ID%TYPE ,
        INUCOOWNERRATIO IN AB_PREMISE.COOWNERSHIP_RATIO%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicio AB_BOPremise.updCoownershipRatio ', 2);

        
        DAAB_PREMISE.UPDCOOWNERSHIP_RATIO(INUPREMISEID,INUCOOWNERRATIO);

        UT_TRACE.TRACE('Fin AB_BOPremise.updCoownershipRatio ', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.updCoownershipRatio ', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_BOPremise.updCoownershipRatio ', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDCOOWNERSHIPRATIO;
    
    




















    PROCEDURE UPDPREMISESTATUS
    (
        INUADDRESSID    IN AB_ADDRESS.ADDRESS_ID%TYPE,
        INUPREMSTATUSID IN AB_PREMISE.PREMISE_STATUS_ID%TYPE
    )
    IS
        NUESTATENUMBER AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN  AB_BOPremise.UpdPremiseStatus ', 2);
        UT_TRACE.TRACE('inuAddressId    ['||INUADDRESSID||'] inuPremStatusId ['||
        INUPREMSTATUSID||']', 3);
        
        DAAB_ADDRESS.ACCKEY(INUADDRESSID);
        
        DAAB_PREMISE_STATUS.ACCKEY(INUPREMSTATUSID);
        
        NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER(INUADDRESSID);
        DAAB_PREMISE.ACCKEY(NUESTATENUMBER);
        
        DAAB_PREMISE.UPDPREMISE_STATUS_ID(NUESTATENUMBER, INUPREMSTATUSID);
        
        REGISTERINSTATUSLOG(NUESTATENUMBER, INUPREMSTATUSID);


        UT_TRACE.TRACE('END    AB_BOPremise.UpdPremiseStatus', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.UpdPremiseStatus', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.UpdPremiseStatus', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDPREMISESTATUS;


    


















    FUNCTION FNUGETPREMISESTATUS
    (
        INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE
    )
    RETURN AB_PREMISE.PREMISE_STATUS_ID%TYPE
    IS
        NUESTATENUMBER  AB_PREMISE.PREMISE_ID%TYPE;
        NUPREMSTATUS    AB_PREMISE.PREMISE_STATUS_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN  AB_BOPremise.fnuGetPremiseStatus['||INUADDRESSID||']', 2);

        DAAB_ADDRESS.ACCKEY(INUADDRESSID);
        NUESTATENUMBER := DAAB_ADDRESS.FNUGETESTATE_NUMBER(INUADDRESSID);
        DAAB_PREMISE.ACCKEY(NUESTATENUMBER);
        NUPREMSTATUS := DAAB_PREMISE.FNUGETPREMISE_STATUS_ID(NUESTATENUMBER);

        UT_TRACE.TRACE('END  AB_BOPremise.fnuGetPremiseStatus['||NUPREMSTATUS||']', 2);
        RETURN NUPREMSTATUS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.fnuGetPremiseStatus', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.fnuGetPremiseStatus', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPREMISESTATUS;


    















    FUNCTION FSBISPREMISEOCCUPIED
    (
        INUPREMISESTATUSID IN AB_PREMISE_STATUS.PREMISE_STATUS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBOCCUPIED VARCHAR2(1);
    BEGIN
        UT_TRACE.TRACE('BEGIN  AB_BOPremise.fsbIsPremiseOccupied['||INUPREMISESTATUSID||']', 2);

        SBOCCUPIED := DAAB_PREMISE_STATUS.FSBGETOCCUPIED(INUPREMISESTATUSID,0);

        IF ((SBOCCUPIED IS NULL) OR (SBOCCUPIED = CSBOCCUPIED)) THEN
            UT_TRACE.TRACE('END  AB_BOPremise.fsbIsPremiseOccupied ['||SBOCCUPIED||']', 2);
            RETURN CSBYES;
        ELSE
            UT_TRACE.TRACE('END  AB_BOPremise.fsbIsPremiseOccupied ['||SBOCCUPIED||']', 2);
            RETURN CSBNO;
        END IF;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.fsbIsPremiseOccupied', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.fsbIsPremiseOccupied', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBISPREMISEOCCUPIED;
    
    

    


















    PROCEDURE REGISTERINSTATUSLOG
    (
        INUPREMISEID    IN AB_PREMISE.PREMISE_ID%TYPE,
        INUPREMSTATUSID IN AB_PREMISE_STATUS.PREMISE_STATUS_ID%TYPE
    )
    IS

        RCPREMISELOG       DAAB_PREMISE_STATUS_LOG.STYAB_PREMISE_STATUS_LOG;
        NULASTPRESTATUSLOG AB_PREMISE_STATUS_LOG.PREMISE_STAT_LOG_ID%TYPE;
        












        PROCEDURE FIRSTREGISTERINLOG
        (
            INUPREMISEID    IN AB_PREMISE.PREMISE_ID%TYPE
        )
        IS
            RCFIRSTPREMISELOG  DAAB_PREMISE_STATUS_LOG.STYAB_PREMISE_STATUS_LOG;
        BEGIN
            UT_TRACE.TRACE('BEGIN  FirstRegisterInLog ', 3);

            
            RCFIRSTPREMISELOG.PREMISE_STAT_LOG_ID :=  GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE
                                                 (
                                                    'AB_PREMISE_STATUS_LOG',
                                                    'SEQ_AB_PREMISE_STAT_209134'
                                                 );

            RCFIRSTPREMISELOG.PREMISE_ID   := INUPREMISEID;
            RCFIRSTPREMISELOG.STATUS_ID    := CNUDEFOCCUPIEDSTATUS;
            RCFIRSTPREMISELOG.INITIAL_DATE := TRUNC(UT_DATE.FDTMINDATE);
            RCFIRSTPREMISELOG.FINAL_DATE   := TRUNC(UT_DATE.FDTSYSDATE);

             
            DAAB_PREMISE_STATUS_LOG.INSRECORD(RCFIRSTPREMISELOG);

            UT_TRACE.TRACE('END    FirstRegisterInLog', 3);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                UT_TRACE.TRACE('CONTROLLED_ERROR  FirstRegisterInLog', 3);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                UT_TRACE.TRACE('OTHERS FirstRegisterInLog', 3);
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FIRSTREGISTERINLOG;
    BEGIN
        UT_TRACE.TRACE('BEGIN  AB_BOPremise.RegisterInStatusLog ', 2);
        UT_TRACE.TRACE('inuPremiseId    ['||INUPREMISEID||'] inuPremStatusId ['||
        INUPREMSTATUSID||']', 3);

        
        
        NULASTPRESTATUSLOG := AB_BCPREMISE.FNUEXISTPREMISEINLOG(INUPREMISEID);
        IF NULASTPRESTATUSLOG IS NULL THEN
            FIRSTREGISTERINLOG(INUPREMISEID);
        ELSE
            
            DAAB_PREMISE_STATUS_LOG.UPDFINAL_DATE
            (
                NULASTPRESTATUSLOG,
                TRUNC(UT_DATE.FDTSYSDATE)
            );
        END IF;
        
        
        RCPREMISELOG.PREMISE_STAT_LOG_ID :=  GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE
                                             (
                                                'AB_PREMISE_STATUS_LOG',
                                                'SEQ_AB_PREMISE_STAT_209134'
                                             );
        RCPREMISELOG.PREMISE_ID  := INUPREMISEID;
        RCPREMISELOG.STATUS_ID   := INUPREMSTATUSID;
        RCPREMISELOG.INITIAL_DATE := TRUNC(UT_DATE.FDTSYSDATE);
        RCPREMISELOG.FINAL_DATE   := TRUNC(UT_DATE.FDTMAXDATE);
         
        DAAB_PREMISE_STATUS_LOG.INSRECORD(RCPREMISELOG);

        UT_TRACE.TRACE('END    AB_BOPremise.RegisterInStatusLog', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR  AB_BOPremise.RegisterInStatusLog', 2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.RegisterInStatusLog', 2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGISTERINSTATUSLOG ;
    
    




















    PROCEDURE VALIDATEDATA
    (
        INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE,
        ISBOCCUPIED  IN AB_PREMISE_STATUS.OCCUPIED%TYPE,
        IDTINIDATE   IN AB_PREMISE_STATUS_LOG.INITIAL_DATE%TYPE,
        IDTFINDATE   IN AB_PREMISE_STATUS_LOG.FINAL_DATE%TYPE
    )
    IS
        NUDAYS NUMBER;
    BEGIN
        UT_TRACE.TRACE('Inicia AB_BOPremise.ValidateData',3);
        
        DAAB_ADDRESS.ACCKEY(INUADDRESSID);
        
        
        IF (IDTINIDATE IS NULL OR IDTFINDATE IS NULL) THEN
            ERRORS.SETERROR(CNUERR3389);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (IDTINIDATE >IDTFINDATE) THEN
            ERRORS.SETERROR(CNUERR346);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF ((ISBOCCUPIED IS NULL ) OR ((ISBOCCUPIED != CSBOCCUPIED)AND(ISBOCCUPIED != CSBUNOCUPIED))) THEN
            ERRORS.SETERROR(CNUERR14982,CSBFIELDOCCUPIED);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        UT_TRACE.TRACE('Fin AB_BOPremise.ValidateData',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.ValidateData',3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.ValidateData',3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEDATA;
    
    




















    FUNCTION FNUOCCUPIEDDAYS
    (
        INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE,
        ISBOCCUPIED  IN AB_PREMISE_STATUS.OCCUPIED%TYPE,
        IDTINIDATE   IN AB_PREMISE_STATUS_LOG.INITIAL_DATE%TYPE,
        IDTFINDATE   IN AB_PREMISE_STATUS_LOG.FINAL_DATE%TYPE
    )RETURN NUMBER
    IS
        NUDAYS NUMBER;
        NUPREMISEID AB_PREMISE.PREMISE_ID%TYPE;
        DTINIDATE   AB_PREMISE_STATUS_LOG.INITIAL_DATE%TYPE;
        DTFINDATE   AB_PREMISE_STATUS_LOG.FINAL_DATE%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio AB_BOPremise.fnuOccupiedDays'||CHR(10)||
                        ' Direcci�n['||INUADDRESSID||']'||CHR(10)||
                        ' Ocupaci�n ['||ISBOCCUPIED||']'||CHR(10)||
                        ' Fecha Inicial['||IDTINIDATE||']'||CHR(10)||
                        ' Fecha Final['||IDTFINDATE||']',2);
        
        
        VALIDATEDATA
        (
            INUADDRESSID,
            ISBOCCUPIED,
            IDTINIDATE,
            IDTFINDATE
        );
        
        DTINIDATE := TRUNC(IDTINIDATE);
        DTFINDATE := TRUNC(IDTFINDATE);
        
        
        NUPREMISEID := DAAB_ADDRESS.FNUGETESTATE_NUMBER(INUADDRESSID,0);
        UT_TRACE.TRACE('Predio: '||NUPREMISEID,3);
        DAAB_PREMISE.ACCKEY(NUPREMISEID);

        
        NUDAYS := AB_BCPREMISE.FNUOCCUPIEDDAYS
                  (
                      NUPREMISEID,
                      ISBOCCUPIED,
                      DTINIDATE,
                      DTFINDATE
                  );
        
        
        
        IF (NUDAYS IS NULL) THEN
           IF (ISBOCCUPIED = CSBOCCUPIED) THEN
             UT_TRACE.TRACE('Fin AB_BOPremise.fnuOccupiedDays Indeterminado Ocupado',2);
             RETURN (DTFINDATE - DTINIDATE)+1;
           ELSE
             UT_TRACE.TRACE('Fin AB_BOPremise.fnuOccupiedDays Indeterminado Desocupado',2);
             RETURN 0;
           END IF;
        END IF;

        UT_TRACE.TRACE('Fin AB_BOPremise.fnuOccupiedDays Dias Totales ['||NUDAYS||']',2);
        RETURN NUDAYS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.fnuOccupiedDays',2);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others AB_BOPremise.fnuOccupiedDays',2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUOCCUPIEDDAYS;

   














    PROCEDURE SETPREMISEADDDATA
    (
        IRCPREMISEINFO IN DAAB_INFO_PREMISE.STYAB_INFO_PREMISE
    )
    IS
      RCPREMISEINFO DAAB_INFO_PREMISE.STYAB_INFO_PREMISE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.SetPremiseAddData info_premise_id ['||IRCPREMISEINFO.INFO_PREMISE_ID||']', 1);

        RCPREMISEINFO :=  IRCPREMISEINFO;

        IF RCPREMISEINFO.INFO_PREMISE_ID IS NULL THEN
            
            RCPREMISEINFO.INFO_PREMISE_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('AB_INFO_PREMISE','SEQ_AB_INFO_PREMISE_187754');
            
            
            DAAB_INFO_PREMISE.INSRECORD(RCPREMISEINFO);
        ELSE
            
            DAAB_INFO_PREMISE.UPDRECORD(RCPREMISEINFO);
        END IF;

        UT_TRACE.TRACE('FIN AB_BOPremise.SetPremiseAddData', 1);

    EXCEPTION
       	WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.SetPremiseAddData', 1);
            RAISE EX.CONTROLLED_ERROR;
       	WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.SetPremiseAddData', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END SETPREMISEADDDATA;
	
   














    FUNCTION FSBGETISINTERNALPREMISE
    (
        INUADDRESSID  IN AB_ADDRESS.ADDRESS_ID%TYPE
    )
    RETURN AB_INFO_PREMISE.IS_INTERNAL%TYPE
    IS
        NUPREMISEID AB_PREMISE.PREMISE_ID%TYPE;
        RCPREMISEINFO TYRCAB_INFO_PREMISE;
        RFCURSOR      CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.fsbGetIsInternalPremise Direcci�n['||INUADDRESSID||']', 1);

        
        NUPREMISEID := DAAB_ADDRESS.FNUGETESTATE_NUMBER(INUADDRESSID);
        
        IF  NUPREMISEID IS NOT NULL THEN

            
            RFCURSOR := AB_BCPREMISE.FRFGETINFOPREMBYPREMISE(NUPREMISEID);
            
            FETCH RFCURSOR INTO RCPREMISEINFO;
            IF RFCURSOR%ISOPEN THEN
               CLOSE RFCURSOR;
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN AB_BOPremise.fsbGetIsInternalPremise Interno ['||RCPREMISEINFO.IS_INTERNAL||']', 1);
        RETURN  RCPREMISEINFO.IS_INTERNAL;

    EXCEPTION
       	WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.fsbGetIsInternalPremise', 1);
            IF RFCURSOR%ISOPEN THEN
               CLOSE RFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
       	WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.fsbGetIsInternalPremise', 1);
            IF RFCURSOR%ISOPEN THEN
               CLOSE RFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END FSBGETISINTERNALPREMISE;
	
	
   















    PROCEDURE UPDISINTERNALPREMISE
    (
        INUADDRESSID  IN AB_ADDRESS.ADDRESS_ID%TYPE,
        ISBISINTERNAL IN AB_INFO_PREMISE.IS_INTERNAL%TYPE
    )
    IS
        NUPREMISEID     AB_PREMISE.PREMISE_ID%TYPE;
        NUINFOPREMISEID AB_INFO_PREMISE.INFO_PREMISE_ID%TYPE;
        RCPREMISEINFO   DAAB_INFO_PREMISE.STYAB_INFO_PREMISE;
    BEGIN
        UT_TRACE.TRACE('INICIO AB_BOPremise.fsbGetIsInternalPremise Direcci�n['||INUADDRESSID||']', 1);

        
        
        IF ((ISBISINTERNAL IS NOT NULL) AND (ISBISINTERNAL NOT IN (CSBYES,CSBNO))) THEN
            ERRORS.SETERROR(CNUERR14941,CSBINTERNAL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        NUPREMISEID := DAAB_ADDRESS.FNUGETESTATE_NUMBER(INUADDRESSID);

        
        NUINFOPREMISEID := AB_BOPREMISE.FNUGETIDINFOPREMISE(NUPREMISEID,FALSE);

        IF (NUINFOPREMISEID IS NULL) THEN
           
           
            
            RCPREMISEINFO.INFO_PREMISE_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('AB_INFO_PREMISE','SEQ_AB_INFO_PREMISE_187754');
            RCPREMISEINFO.PREMISE_ID      := NUPREMISEID;
            RCPREMISEINFO.IS_INTERNAL     := ISBISINTERNAL;
            
            DAAB_INFO_PREMISE.INSRECORD(RCPREMISEINFO);
           
        ELSE
            
            DAAB_INFO_PREMISE.UPDIS_INTERNAL(NUINFOPREMISEID,ISBISINTERNAL);
        END IF;
        UT_TRACE.TRACE('FIN AB_BOPremise.UpdIsInternalPremise', 1);

    EXCEPTION
       	WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR AB_BOPremise.UpdIsInternalPremise', 1);
            RAISE EX.CONTROLLED_ERROR;
       	WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS AB_BOPremise.UpdIsInternalPremise', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END UPDISINTERNALPREMISE;
	
	

















	FUNCTION FSBEXISTSINFOPREMISE
    (
        INUADDRESSID     IN     AB_ADDRESS.ADDRESS_ID%TYPE
    )
    RETURN VARCHAR
    IS
        SBEXISTSINFOPREMISE         VARCHAR2(2);
        RFCURSOR                    CONSTANTS.TYREFCURSOR;
        RCINFOPREMISE               AB_INFO_PREMISE%ROWTYPE;
    BEGIN

        UT_TRACE.TRACE('BEGIN AB_BOPremise.fsbExistsInfoPremise', 2);
        UT_TRACE.TRACE('Par�metro: inuAddressId -> ' || INUADDRESSID, 3);

        RFCURSOR :=  AB_BCPREMISE.FRFGETINFOPREMBYADDRESS(INUADDRESSID);

        FETCH RFCURSOR INTO RCINFOPREMISE;
        CLOSE RFCURSOR;

        IF (RCINFOPREMISE.INFO_PREMISE_ID IS NULL) THEN
            SBEXISTSINFOPREMISE := 'N';
        ELSE
            SBEXISTSINFOPREMISE := 'Y';
        END IF;

        UT_TRACE.TRACE('Retorno -> ' || SBEXISTSINFOPREMISE, 3);
        UT_TRACE.TRACE('END AB_BOPremise.fsbExistsInfoPremise', 2);

        RETURN SBEXISTSINFOPREMISE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF RFCURSOR%ISOPEN THEN
                CLOSE RFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF RFCURSOR%ISOPEN THEN
                CLOSE RFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FSBEXISTSINFOPREMISE;

    



















    PROCEDURE GETINFOPREMISEBYADDRESS
    (
        INUADDRESSID     IN     AB_ADDRESS.ADDRESS_ID%TYPE,
        OSBRING          OUT    AB_INFO_PREMISE.IS_RING%TYPE,
        ONULEVELRISK     OUT    AB_INFO_PREMISE.LEVEL_RISK%TYPE,
        OSBDESCRISK      OUT    AB_INFO_PREMISE.DESCRIPTION_RISK%TYPE
    )
    IS
        BOEXISTSINFOPREMISE         BOOLEAN;
        RFCURSOR                    CONSTANTS.TYREFCURSOR;
        RCINFOPREMISE               AB_INFO_PREMISE%ROWTYPE;
    BEGIN

        UT_TRACE.TRACE('BEGIN AB_BOPremise.GetInfoPremiseByAddress', 2);
        UT_TRACE.TRACE('Par�metro: inuAddressId -> ' || INUADDRESSID, 3);

        RFCURSOR :=  AB_BCPREMISE.FRFGETINFOPREMBYADDRESS(INUADDRESSID);

        FETCH RFCURSOR INTO RCINFOPREMISE;
        CLOSE RFCURSOR;

        OSBRING :=  RCINFOPREMISE.IS_RING;
        ONULEVELRISK :=  RCINFOPREMISE.LEVEL_RISK;
        OSBDESCRISK :=  RCINFOPREMISE.DESCRIPTION_RISK;

        UT_TRACE.TRACE('Retorno -> osbRing: ' || OSBRING, 3);
        UT_TRACE.TRACE('Retorno -> onuLevelRisk: ' || ONULEVELRISK, 3);
        UT_TRACE.TRACE('Retorno -> osbDescRisk: ' || OSBDESCRISK, 3);
        UT_TRACE.TRACE('END AB_BOPremise.GetInfoPremiseByAddress', 2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF RFCURSOR%ISOPEN THEN
                CLOSE RFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF RFCURSOR%ISOPEN THEN
                CLOSE RFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END GETINFOPREMISEBYADDRESS;

	
END AB_BOPREMISE;