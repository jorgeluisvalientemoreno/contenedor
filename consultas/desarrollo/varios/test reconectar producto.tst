PL/SQL Developer Test script 3.0
1296
-- Created on 17/04/2020 by DIASAL 
declare 
  -- Local variables here
  i integer;
  errorNumber NUMBER; 
  errorMessage VARCHAR2(4000);
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO234437';
   CNUCATYATTWITHOUTACTIVITY CONSTANT NUMBER( 2 ) := 27;
   CNUCAUSALANULLATENT CONSTANT NUMBER := 460;
   CNUTASKTYPESUSPTV CONSTANT NUMBER := 714;
   CNURETIRETYPEBYPAY CONSTANT NUMBER := 3;
   CNURETIRED_BY_FINANCE CONSTANT NUMBER := 12;
   CNURETIRED_BY_PENDFINANCE CONSTANT NUMBER := 13;
   CNUANNUL_CAUSAL_TYPE CONSTANT NUMBER := 18;
   CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO202549';
   CSBSI CONSTANT VARCHAR2(1) := 'S';
   CSBNO CONSTANT VARCHAR2(1) := 'N';
    CSBPROCESSNAME          CONSTANT VARCHAR2(10) := 'PMEDIATION';
    CNUMOTIVE_TYPE_SUSP     CONSTANT NUMBER(4) := 7;
    CNUMOTIVE_TYPE_CONN     CONSTANT NUMBER(4) := 9;
    CNUSUSPTYPBLOCK         CONSTANT NUMBER := 6;
    CNUSUSPTYPNOTPAY        CONSTANT NUMBER := 2;
    CNUSUSPTYPLC            CONSTANT NUMBER := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'TIPO_SUSP_LIMITE_CREDITO' );
    NUCAUSASINACT        NUMBER := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE('CAUS_ATEN_SIN_ACT_CAMPO');
    CSBDIRECTIONALITYIN   GE_SUSPENSION_TYPE.DIRECTIONALITY_ID%TYPE:='IN'; 
    
    NUSISTEMA    SISTEMA.SISTCODI%TYPE ;     
    SBERRMSG    VARCHAR2(2000);            
    NUCAUSCARG    CARGOS.CARGCACA%TYPE ;      
    SBTERM        SA_TERMINAL.NAME%TYPE ;     
    NULININCO    NUMBER := 0;            
    NULINEA        NUMBER := 0;            
    RCSISTEMA    SISTEMA%ROWTYPE;          
    SBDOCUSOPO    CARGOS.CARGDOSO%TYPE;      
    NUORDEN        SUSPCONE.SUCONUOR%TYPE;     
    SBEVENCARG    VARCHAR2(1) ;            
    NUESTCORTEINACTIVE ESTACORT.ESCOCODI%TYPE;  

    
    NUNUMEPROC      INSTPROC.INPRCODI%TYPE;     
    NUNUMETHREAD    NUMBER;                     
    NUTOTALTHREADS  NUMBER;                     
    BLSELECTDATA    BOOLEAN;                    
    SBIDTRACKING  ESTAPROG.ESPRPROG%TYPE;     
    SBMESSPROCC      MENSAJE.MENSDESC%TYPE;      
    NUPERCENTAGE    NUMBER := 0;            
    NUSERVCODI    CONFESCO.COECSERV%TYPE;     
    NUEVENAPLI    CONFESCO.COECCODI%TYPE;     
    NUNUMESERV    SERVSUSC.SESUNUSE%TYPE;     
    NUCURRSUBSSERV  SERVSUSC.SESUNUSE%TYPE;     
    NUDEPACODI    SERVSUSC.SESUDEPA%TYPE;     
    NULOCACODI    SERVSUSC.SESULOCA%TYPE;     
    NUDEPAORDE    SUSPCONE.SUCODEPA%TYPE;     
    NULOCAORDE    SUSPCONE.SUCOLOCA%TYPE;     
    NUORDENUME    SUSPCONE.SUCONUOR%TYPE;     
    NUCICLCODI    CICLO.CICLCODI%TYPE;      
    NUAVALPROC    INSTPROC.INPRPRIN%TYPE;      
    SBTITUREPO    REPORTES.REPODESC%TYPE;      
    NUREPONUME    REPORTES.REPONUME%TYPE;     
    NUINCONUME    REPORTES.REPONUME%TYPE;      
    NUCAUSCODE    SUSPCONE.SUCOCACD%TYPE;     
    SBSUCOOBSE    SUSPCONE.SUCOOBSE%TYPE;     
    NUMOSUCODI    NUMBER;                     
    NUDEPAPETI    NUMBER;                     
    NULOCAPETI    NUMBER;                   
    NUNUMEPETI    NUMBER;                      
    SBACTARETI    HISTRETI.HSREACRE%TYPE;      
    NUMOTIVO_RETIRO_POR_NO_PAGO NUMBER;
    SBINTORD_HAB  VARCHAR2(1) ;        
    NUDESCONEXION  NUMBER                ;    
    NUDIAS_ADICION_FECHA_SUSP       NUMBER ;    
    NULIMITE_DE_USO                 NUMBER ;    
    NUEXPACCOUNTNUMBER              NUMBER ;    
    NUCURRROWIDSUBSSERV             ROWID  ;    
    NUCURRCYCLE     SUSCRIPC.SUSCCICL%TYPE ;    
    NUCURRSUSCCLIE  SUSCRIPC.SUSCCLIE%TYPE ;    
    NUCURRSERVICE   SERVSUSC.SESUSERV%TYPE ;    
    NUCURRSUBSCRIBER SUSCRIPC.SUSCCODI%TYPE;    
    BLISLOADED    BOOLEAN:=FALSE ;          
    GRCTRGSERVSUSC      SERVSUSC%ROWTYPE;  
    --NUCAUSASINACT	    CAUSCODE.CACDCODI%TYPE ;    
    NUESTCORTESINDX     CONFESCO.COECCODI%TYPE ;    
    RCSERVSUSC          SERVSUSC%ROWTYPE;           
    NULINEA		        NUMBER := 0;
    BLACTPROCCONN       BOOLEAN := TRUE;            
    GRCTBSTATESTOEXEC   PKSUSPCONNSERVICEMGR.TYTBSTATES; 
    GNUAPPLYEVENT        ESTACORT.ESCOCODI%TYPE;    
                                                    
    GNUIDSUSPCONE       SUSPCONE.SUCOIDSC%TYPE ;    
    GNUORDERTYPE        NUMBER ;                          
    GRCTBRECINMEM       PKTBLCONFESCO.TYTBCONFESCO; 
    GRCTBRECCONFINMEM   PKTBLCONFCOSE.TYTBCONFCOSE; 
    NUORDEN	            SUSPCONE.SUCONUOR%TYPE ;	
  CSBDESCONEXION	CONSTANT VARCHAR2(1) := 'D' ; 
    CSBCONEXION		CONSTANT VARCHAR2(1) := 'C' ; 
    CSBRETIRO		CONSTANT VARCHAR2(1) := 'R';
 NUORDESCONEXIONTOTAL     ESTACORT.ESCOCODI%TYPE;     
    NUORDESCONEXIONPARCIAL   ESTACORT.ESCOCODI%TYPE;     
    NUORCONEXION             ESTACORT.ESCOCODI%TYPE;     
    NUORRETIRO               ESTACORT.ESCOCODI%TYPE;     
    NUESCO_ORDEN_REVISION    ESTACORT.ESCOCODI%TYPE;     
    NUESCO_SUSP_TOTAL        ESTACORT.ESCOCODI%TYPE;
    
    
    
    
    CSBVERSION   CONSTANT VARCHAR2(250) := 'SAO390034';
    CSBPROGRAM      CONSTANT VARCHAR2(4) := 'FPCA';

    CNUNO_ENCO_REGIS    CONSTANT NUMBER:= 10032;      
    CNUFECAPRONULA  CONSTANT NUMBER:= 4378;        
    CNUTIENE        CONSTANT NUMBER := 1 ;
    CNUNOTIENE      CONSTANT NUMBER := 0 ;
    CNUNO_TIENE_INCLUSION    CONSTANT NUMBER := 0 ;   
    CNUERROR_HAS_ORDER  CONSTANT NUMBER:=10463;      
    CNUNO_LECT_FACT  CONSTANT NUMBER:=10466;      
    CNUNO_LECT_FASU  CONSTANT NUMBER:=10468;       
    CNUMESSPROCC    CONSTANT NUMBER:= 27;
    CNUBULK         CONSTANT NUMBER:= 100;
    CNUINACTIVO     CONSTANT NUMBER:=  96;      
    
   
    
------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------pkSuspConnServiceMgr.ATTENINDIVSUSPECONNE
FUNCTION FBLHASORDER
(
	INUNUSE    	IN    	SERVSUSC.SESUNUSE%TYPE,
    INUTIPO    	IN    	SUSPCONE.SUCOTIPO%TYPE
)
RETURN BOOLEAN
IS
    
    CURSOR CUSUSPCONE IS
        SELECT /*+ index( suspcone IX_SUCO_NUSE )*/ SUSPCONE.*
        FROM  SUSPCONE
        WHERE SUCONUSE = INUNUSE
        AND   SUCOTIPO = INUTIPO
        AND   SUCOFEAT IS NULL;
        
    BLRESULTADO	BOOLEAN := FALSE;
    RCSUSPCONE	SUSPCONE%ROWTYPE;
BEGIN

    PKERRORS.PUSH ('pkSuspConnServiceMgr.fblHasOrder');
    
    PKGENERALSERVICES.TRACEDATA('Numero Servicio '||INUNUSE);
    PKGENERALSERVICES.TRACEDATA('Tipo '||INUTIPO);

    OPEN CUSUSPCONE;
    FETCH CUSUSPCONE INTO RCSUSPCONE;
    
    IF ( CUSUSPCONE%FOUND ) THEN
	   BLRESULTADO := TRUE;
    END IF;
    
    CLOSE CUSUSPCONE;
    PKERRORS.POP;
    RETURN( BLRESULTADO );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FBLHASORDER;

PROCEDURE ATTENDCOLLECTACTIVITY
(
    INUORDERID      IN      SUSPCONE.SUCOIDSC%TYPE
)
IS

    
    RCSUSPCONE                  SUSPCONE%ROWTYPE;
    
    
    
    NUPENDINGORDERS             NUMBER;

BEGIN

    UT_TRACE.TRACE( 'Inicio: [pkSuspConnServiceMgr.AttendCollectActivity]', 5 );
    
    
    RCSUSPCONE := PKTBLSUSPCONE.FRCGETRECORD( INUORDERID );

    
    
    IF ( RCSUSPCONE.SUCOACGC IS NOT NULL ) THEN
    
        
        
        NUPENDINGORDERS := PKBCSUSPCONE.FNUGETPENDORDERSBYCOLLECTACTIV( RCSUSPCONE.SUCOACGC );

        IF ( NUPENDINGORDERS = 0 ) THEN
        
            
            
            PKBCAVANPCSS.UPDACTSTATE( RCSUSPCONE.SUCOACGC, TRUE );
        
        END IF;
    
    END IF;

    UT_TRACE.TRACE( 'Fin: [pkSuspConnServiceMgr.AttendCollectActivity]', 5 );

EXCEPTION

    WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        UT_TRACE.TRACE( 'Error: [pkSuspConnServiceMgr.AttendCollectActivity]', 5 );
        RAISE;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        UT_TRACE.TRACE( 'Error: [pkSuspConnServiceMgr.AttendCollectActivity]', 5 );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END;


PROCEDURE ATTENINDIVSUSPECONNE2
(
	INUSESUNUSE    IN      SERVSUSC.SESUNUSE%TYPE,
	ISBROWIDSUS    IN      ROWID,
	IDTFECHATEN    IN      SERVSUSC.SESUFECO%TYPE,
	IDTSESUFECO    IN      SERVSUSC.SESUFECO%TYPE,
	ISBSUCOTIPO    IN      SUSPCONE.SUCOTIPO%TYPE,
	ISBFLAGCUMP    IN      SUSPCONE.SUCOTIPO%TYPE,
	IRCCONFESCO    IN OUT  CONFESCO%ROWTYPE,
	INUCICLO       IN      SUSCRIPC.SUSCCICL%TYPE DEFAULT NULL
)
IS

    
    RCSUSPCONE      SUSPCONE%ROWTYPE;

    
    DTSESUFECO    	SERVSUSC.SESUFECO%TYPE;
    
    
    DTATCOFEAT	 	SUSPCONE.SUCOFEAT%TYPE;
    
    
    SBATCOTIPO		SUSPCONE.SUCOTIPO%TYPE;
    
    
    NUPERIFACT		PERIFACT.PEFACODI%TYPE;
    
    
    NUCOECCODI		CONFESCO.COECCODI%TYPE;
   
    
    
    

    PROCEDURE GETPARAMETERS
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnServiceMgr.ATTENINDIVSUSPECONNE2.Getparameters]', 6 );
        
    	
    	NUCAUSASINACT := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'CAUS_ATEN_SIN_ACT_CAMPO');
    	
    	
    	NUESTCORTESINDX := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'EST_SERVICIO_SIN_CORTE' );
    	
        UT_TRACE.TRACE( 'Fin: [pkSuspConnServiceMgr.ATTENINDIVSUSPECONNE2.Getparameters]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnServiceMgr.ATTENINDIVSUSPECONNE2.Getparameters]', 6 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnServiceMgr.ATTENINDIVSUSPECONNE2.Getparameters]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
    
    
    

BEGIN

    UT_TRACE.TRACE( 'Inicio: [pkSuspConnServiceMgr.ATTENINDIVSUSPECONNE2]', 5 );
    
    GETPARAMETERS;

	UT_TRACE.TRACE( 'Sesunuse    -> ' || INUSESUNUSE, 6 );
	UT_TRACE.TRACE( 'IDSusp      -> ' || ISBROWIDSUS, 6 );
	UT_TRACE.TRACE( 'idtfechaten -> ' || IDTFECHATEN, 6 );
	UT_TRACE.TRACE( 'idtsesufeco -> ' || IDTSESUFECO, 6 );
	UT_TRACE.TRACE( 'isbSucotipo -> ' || ISBSUCOTIPO, 6 );
	UT_TRACE.TRACE( 'ircConfesco.coeccodi -> ' || IRCCONFESCO.COECCODI, 6 );
	UT_TRACE.TRACE( 'inuCiclo    ->' || INUCICLO, 6 );

    PKSUSPCONNSERVICEMGR.VALIDSUSPENSIONDAYS
    (
    	INUSESUNUSE,
    	IRCCONFESCO.COECDICO,
    	IDTSESUFECO
    );
    
    
    NUCOECCODI := IRCCONFESCO.COECCODI;
    
    IF ( GRCTRGSERVSUSC.SESUNUSE IS NULL ) THEN
        
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( INUSESUNUSE, PKCONSTANTE.CACHE );
    ELSE
        RCSERVSUSC := GRCTRGSERVSUSC;                                            
  END IF;
  
  
  RCSUSPCONE := PKBCSUSPCONE.FRCGETRECORDBYROWID( ISBROWIDSUS );
  
    
    PKBCSUSPCONE.UPATTENTIONDATE
    (
        RCSUSPCONE.SUCOIDSC,
    NVL( IDTFECHATEN, SYSDATE ),
        NULL
    );
             
    
    ATTENDCOLLECTACTIVITY( RCSUSPCONE.SUCOIDSC );

    
    UT_TRACE.TRACE( 'Estado de corte -> ' || IRCCONFESCO.COECCODI, 6 );
    
    DTSESUFECO := NVL( IDTFECHATEN, SYSDATE );

    
    IF ( ISBSUCOTIPO = CSBCONEXION ) THEN
    
        SBATCOTIPO := CSBDESCONEXION;
        
      IF ( FBLHASORDER( INUSESUNUSE, SBATCOTIPO ) ) THEN
      
          
            PKERRORS.SETERRORCODE
            (
                PKCONSTANTE.CSBDIVISION,
                PKCONSTANTE.CSBMOD_BIL,
          CNUERROR_HAS_ORDER
            );
            
          RAISE LOGIN_DENIED;
        
      END IF;
      
      
      PKSUSPCONNSERVICEMGR.APPLYCHARGE( RCSERVSUSC, IRCCONFESCO, INUCICLO );
    
    
    ELSE
    
        SBATCOTIPO := CSBCONEXION;

        
        IF ( ISBFLAGCUMP = PKCONSTANTE.NO ) THEN
        
            PKSUSPCONNSERVICEMGR.ATTWITHOUTACTORDERPENDING
            (
                INUSESUNUSE,
                SBATCOTIPO,
                SYSDATE,
                NUCAUSASINACT
            );

            NUCOECCODI := NUESTCORTESINDX;

            
            PKTBLSUSPCONE.UPORDERCAUSE( ISBROWIDSUS, NUCAUSASINACT );
        
        ELSE
        
            
            PKSUSPCONNSERVICEMGR.APPLYCHARGE( RCSERVSUSC, IRCCONFESCO, INUCICLO );
        
        END IF;
    
    END IF;
    
    
    IF ( PR_BOSUSPCORTERECONEXION.FBOESESTADOCORTEACTIVO( NUCOECCODI ) ) THEN
        DTSESUFECO := NULL;
    END IF;
    
    
    UT_TRACE.TRACE( 'Estado de corte a aplicar -> ' || NUCOECCODI, 6 );
    IF ( GRCTRGSERVSUSC.SESUNUSE IS NULL ) THEN
    
        
        
        
        IF ( ( NUCOECCODI = NUESCO_ORDEN_REVISION AND RCSERVSUSC.SESUESCO = NUESCO_SUSP_TOTAL )
           OR ( NUCOECCODI = NUESCO_SUSP_TOTAL AND RCSERVSUSC.SESUESCO = NUESCO_ORDEN_REVISION ) )
        THEN
            PKTBLSERVSUSC.UPSUSPENSIONSTATUS( INUSESUNUSE, NUCOECCODI );
        ELSE
            PKTBLSERVSUSC.UPSUSPENSIONSTATUS( INUSESUNUSE, NUCOECCODI, DTSESUFECO );
        END IF;
    
    ELSE
    
        GRCTRGSERVSUSC.SESUFECO := DTSESUFECO;
        GRCTRGSERVSUSC.SESUESCO := NUCOECCODI;
    
    END IF;
    
    UT_TRACE.TRACE( 'Fin: [pkSuspConnServiceMgr.ATTENINDIVSUSPECONNE2]', 5 );

EXCEPTION

    WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        UT_TRACE.TRACE( 'Error: [pkSuspConnServiceMgr.ATTENINDIVSUSPECONNE2]', 5 );
        RAISE;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        UT_TRACE.TRACE( 'Error: [pkSuspConnServiceMgr.ATTENINDIVSUSPECONNE2]', 5 );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END;
-------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
    
    
    PROCEDURE CLEARMEMORY
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkSuspConnService.ClearMemory]', 5 );

        
        PKTBLPERIFACT.CLEARMEMORY;
        PKTBLSERVSUSC.CLEARMEMORY;
        PKTBLSUSCRIPC.CLEARMEMORY;
        PKTBLCONFCOSE.CLEARMEMORY;
        PKTBLCONFESCO.CLEARMEMORY;
        PKTBLSUSPCONE.CLEARMEMORY;
        PKTBLCUENCOBR.CLEARMEMORY;
        PKTBLSISTEMA.CLEARMEMORY;

        
        CC_BORELACIONCOMERCIAL.LIMPIARMEMORIA;

        UT_TRACE.TRACE( 'Fin: [pkSuspConnService.ClearMemory]', 5 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ClearMemory]', 5 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [pkSuspConnService.ClearMemory]', 5 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;

PROCEDURE VALORDERDATAFORATTEN 
    (
  IDTSUCOFEOR     IN    SUSPCONE.SUCOFEOR%TYPE,
  IDTSUCOFEAT  IN    SUSPCONE.SUCOFEAT%TYPE,
  IDTSUCOFEATCURR IN    SUSPCONE.SUCOFEAT%TYPE
    )
IS

BEGIN

    PKERRORS.PUSH('pkSuspConnService.ValOrderDataforAtten');

    
    IF ( IDTSUCOFEATCURR IS NOT NULL ) THEN
    
  PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION,
        PKCONSTANTE.CSBMOD_BIL,
        12512 );
  RAISE LOGIN_DENIED ;
    
    END IF ;

    
    PKSUSPCONNSERVICEMGR.VALDATELESSORDERDATE ( IDTSUCOFEOR, IDTSUCOFEAT );

    
    PKSUSPCONNSERVICEMGR.VALDATELESSCURRENT ( IDTSUCOFEAT );

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
  PKERRORS.POP;
  RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
  PKERRORS.POP;
  RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
  PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
  PKERRORS.POP;
  RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALORDERDATAFORATTEN;    
    
    PROCEDURE ATTENINDIVSUSPECONNE
    (
        INUSUCOIDSC      IN      SUSPCONE.SUCOIDSC%TYPE,
        INUSERVCODI      IN      SERVSUSC.SESUSERV%TYPE,
      INUCOECCODI      IN      CONFESCO.COECCODI%TYPE,
        IDTSUCOFEAT      IN      SUSPCONE.SUCOFEAT%TYPE,
        ISBCUMPLIDA      IN      SUSPCONE.SUCOTIPO%TYPE,
        ISBPROGRAMA     IN      HICAESCO.HCECPROG%TYPE,
      ONUERRORCODE    OUT     GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
      OSBERRORMESSAGE OUT     GE_ERROR_LOG.DESCRIPTION%TYPE
    )
IS

    SBROWID        ROWID;
    RCSUSPCONE    SUSPCONE%ROWTYPE ;    
    RCSERVSUSC    SERVSUSC%ROWTYPE ;    
    RCCONFESCO    CONFESCO%ROWTYPE ;    

    
    
    
    





    PROCEDURE INITIALIZE IS
        SBPROGRAMA HICAESCO.HCECPROG%TYPE;
    BEGIN
    
  PKERRORS.PUSH('pkSuspConnService.AttenIndivSuspeConne.Initialize');

  
  PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE, PKCONSTANTE.INITIALIZE );
  SBPROGRAMA := PKERRORS.FSBGETAPPLICATION;
  
  IF ( SBPROGRAMA IS NULL )
  THEN
     SBPROGRAMA := NVL(ISBPROGRAMA,'SES');
     PKERRORS.SETAPPLICATION(SBPROGRAMA);    
  END IF;

  PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END INITIALIZE;

    





    PROCEDURE GETDATA 
    IS

  CURSOR CUSUSPCONE
  IS
  SELECT ROWID 
  FROM   SUSPCONE 
  WHERE  SUCOIDSC = INUSUCOIDSC ;

    BEGIN
    

  PKERRORS.PUSH('pkSuspConnService.AttenIndivSuspeConne.GetData');

  
  RCSUSPCONE := PKTBLSUSPCONE.FRCGETRECORD ( INUSUCOIDSC ) ;

  OPEN CUSUSPCONE ;
  FETCH CUSUSPCONE INTO SBROWID ;
  CLOSE CUSUSPCONE ;

  
  PKGENERALSERVICES.TRACEDATA('grcTrgServsusc.sesunuse :'||GRCTRGSERVSUSC.SESUNUSE);  
  IF ( GRCTRGSERVSUSC.SESUNUSE IS NULL ) THEN
      RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD ( RCSUSPCONE.SUCONUSE ) ;
    ELSE
        RCSERVSUSC := GRCTRGSERVSUSC;
    END IF;
  PKGENERALSERVICES.TRACEDATA('rcServsusc.sesunuse :'||RCSERVSUSC.SESUNUSE||' Estado ['||INUCOECCODI||']');

  
  RCCONFESCO := PKTBLCONFESCO.FRCGETRECORD (  INUSERVCODI, 
                INUCOECCODI, 
                PKCONSTANTE.NOCACHE );

  PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETDATA;

    





    PROCEDURE VALINPUTDATA IS
    BEGIN
    

  PKERRORS.PUSH('pkSuspConnService.AttenIndivSuspeConne.ValInputData');

  
  VALORDERDATAFORATTEN (  RCSUSPCONE.SUCOFEOR, 
        IDTSUCOFEAT,
        RCSUSPCONE.SUCOFEAT ); 

  PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END VALINPUTDATA;

BEGIN


    PKERRORS.PUSH('pkSuspConnService.AttenIndivSuspeConne');
    
  PKGENERALSERVICES.TRACEDATA('Servcodi :'||INUSERVCODI);
  PKGENERALSERVICES.TRACEDATA('IDSusp   :'||INUSUCOIDSC);
  PKGENERALSERVICES.TRACEDATA('idtSucofeat :'||IDTSUCOFEAT);
  PKGENERALSERVICES.TRACEDATA('isbCumplida  :'||ISBCUMPLIDA);
  PKGENERALSERVICES.TRACEDATA('isbPrograma  :'||ISBPROGRAMA  );
  PKGENERALSERVICES.TRACEDATA('inuCoecCodi  :'||INUCOECCODI  );

    
    INITIALIZE ;

    
    CLEARMEMORY;

    
    GETDATA ;

    
    VALINPUTDATA ;

    
    IF ( GRCTRGSERVSUSC.SESUNUSE IS NOT NULL ) THEN
        PKSUSPCONNSERVICEMGR.SETRECORDTRIGGER(RCSERVSUSC);
    END IF;
    
/*    PKSUSPCONNSERVICEMGR.*/ATTENINDIVSUSPECONNE2
  (
      RCSUSPCONE.SUCONUSE,
      SBROWID,
      IDTSUCOFEAT,
      RCSERVSUSC.SESUFECO,
      RCSUSPCONE.SUCOTIPO,
      ISBCUMPLIDA,
      RCCONFESCO,
      NUCICLCODI
  );

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
  
  PKERRORS.POP;
  PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
  PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
  PKERRORS.POP;
  PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );

END ATTENINDIVSUSPECONNE;  
    
      FUNCTION FBLCOMPONENTSUSPENDALLOWED
    (
        INUCOMPONENTID      IN  PR_COMPONENT.COMPONENT_ID%TYPE
    )
  RETURN BOOLEAN
  IS
        NUCOMPONENTTYPEID   PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
        SBSUSPENDALLOWED    PS_COMPONENT_TYPE.SUSPEND_ALLOWED%TYPE;
    BEGIN

        NUCOMPONENTTYPEID := DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID( INUCOMPONENTID );
        SBSUSPENDALLOWED  := DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED(NUCOMPONENTTYPEID);

        IF SBSUSPENDALLOWED = GE_BOCONSTANTS.CSBYES THEN
            RETURN (TRUE);
        ELSE
            RETURN (FALSE);
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLCOMPONENTSUSPENDALLOWED;


    PROCEDURE COMPONENTCONNECT
        (
        IRCCOMPONENT        IN DAPR_COMPONENT.STYPR_COMPONENT,
        IDTSYSDATE          IN DATE,
        IOBLEXISTCOMPACTIVE IN OUT BOOLEAN,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE DEFAULT -1
        )
    IS
    
        CURFCOMPSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        RCCOMPSUSPENSION    DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
        SBDIRECTIONALITYID  GE_DIRECTIONALITY.DIRECTIONALITY_ID%TYPE;
        NUCOUNTERSUSPEN     NUMBER := 0;    
    BEGIN
        UT_TRACE.TRACE('Componente:['||IRCCOMPONENT.COMPONENT_ID||']',12);

        RCCOMPONENT := IRCCOMPONENT;

        
        IF FBLCOMPONENTSUSPENDALLOWED( RCCOMPONENT.COMPONENT_ID ) THEN
        
            
            SBDIRECTIONALITYID := PR_BOCNFSUSPENSION.FSBGETDIRECFORCONNECBYPAY(RCCOMPONENT.COMPONENT_ID,CNUSUSPTYPBLOCK,CNUSUSPTYPNOTPAY);
            UT_TRACE.TRACE('Direccionalidad:['||SBDIRECTIONALITYID||']',13);

            
            RCCOMPONENT.DIRECTIONALITY_ID := NVL(SBDIRECTIONALITYID,RCCOMPONENT.DIRECTIONALITY_ID);

        END IF;

        
        CURFCOMPSUSPENSION := PR_BCSUSPENSION.FRFCOMPSUSPENSION(RCCOMPONENT.COMPONENT_ID);
        FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        WHILE CURFCOMPSUSPENSION%FOUND LOOP
            UT_TRACE.TRACE('Tipo Suspensi?n:['||RCCOMPSUSPENSION.SUSPENSION_TYPE_ID||']Id:['||RCCOMPSUSPENSION.COMP_SUSPENSION_ID||']',13);

            NUCOUNTERSUSPEN := NUCOUNTERSUSPEN + 1;

            
            IF INUSUSPENSIONTYPEID = RCCOMPSUSPENSION.SUSPENSION_TYPE_ID
                OR INUSUSPENSIONTYPEID <> CNUSUSPTYPLC
                AND RCCOMPSUSPENSION.SUSPENSION_TYPE_ID IN (CNUSUSPTYPBLOCK, CNUSUSPTYPNOTPAY)
            THEN

                
                RCCOMPSUSPENSION.INACTIVE_DATE := IDTSYSDATE;
                RCCOMPSUSPENSION.ACTIVE := GE_BOCONSTANTS.CSBNO;
                
                DAPR_COMP_SUSPENSION.UPDRECORD(RCCOMPSUSPENSION);

                NUCOUNTERSUSPEN := NUCOUNTERSUSPEN - 1;
            END IF;

            FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        END LOOP;
        CLOSE CURFCOMPSUSPENSION;
        UT_TRACE.TRACE('Contador de Suspensiones Activas:['||NUCOUNTERSUSPEN||']',13);

        
        IF NUCOUNTERSUSPEN = 0 THEN

            RCCOMPONENT.COMPONENT_STATUS_ID := PR_BOPARAMETER.FNUGETCOMPACTI;
            RCCOMPONENT.LAST_UPD_DATE := SYSDATE;

            IOBLEXISTCOMPACTIVE := TRUE;

            
            DACOMPSESU.UPDCMSSESCM(RCCOMPONENT.COMPONENT_ID,PR_BOPARAMETER.FNUGETCOMPACTI);
        END IF;

        
        DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);

        
        PR_BOREQUEST.CREATECOMPONENTREQUEST (
                                            MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP,
                                            IDTSYSDATE,
                                            RCCOMPONENT.COMPONENT_ID,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            CNUMOTIVE_TYPE_CONN,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS
                                            );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   
      PROCEDURE PRODUCTCONNECT
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        INUBILLINGSTATUS    IN NUMBER,
        INUEXTERNALORDERID  IN NUMBER,
        INUSERVICE          IN NUMBER,
        IDTATTENTIONDATE    IN DATE,
        ISBFLAGCOMPLETE     IN VARCHAR2
        )
    IS
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
        CURFCOMPONENTS      CONSTANTS.TYREFCURSOR;
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        RCSUSPCONE          SUSPCONE%ROWTYPE;
        CURFPRODSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCPRODSUSPENSION    DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        DTSYSDATE           DATE := SYSDATE;
        BLEXISTCOMPACTIVE   BOOLEAN := FALSE;
        NUSERVICE           NUMBER;
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);

        SBCALLSERVICE   VARCHAR2(2000);
        EXCALLSERVICE   EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo PR_BOSuspension.ProductConnect',10);
        UT_TRACE.TRACE('Producto:['||INUPRODUCTID||']Tipo:['||INUSUSPENSIONTYPEID||']Estado:['||INUBILLINGSTATUS||']',11);
        UT_TRACE.TRACE('Orden:['||INUEXTERNALORDERID||']Servicio:['||INUSERVICE||']Fecha:['||IDTATTENTIONDATE||']',11);

        
        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(INUPRODUCTID);

        IF INUSERVICE IS NOT NULL THEN
            NUSERVICE := INUSERVICE;
        ELSE
            NUSERVICE := RCPRODUCT.PRODUCT_TYPE_ID;
        END IF;

        
        IF ISBFLAGCOMPLETE = CSBNO THEN
            MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
            /*PKSUSPCONNSERVICE.*/ ATTENINDIVSUSPECONNE  (
                                                    INUEXTERNALORDERID,
                                                    NUSERVICE,
                                                    INUBILLINGSTATUS,
                                                    IDTATTENTIONDATE,
                                                    ISBFLAGCOMPLETE, 
                                                    CSBPROCESSNAME,
                                                    NUERRORCODE,
                                                    SBERRORMESSAGE
                                                    );
            IF NVL(NUERRORCODE,GE_BOCONSTANTS.CNUSUCCESS) <> GE_BOCONSTANTS.CNUSUCCESS THEN
                SBCALLSERVICE := 'pkSuspConnService.AttenIndivSuspeConne';
                RAISE EXCALLSERVICE;
            END IF;
            
            
            
            PKSUSPCONNSERVICEMGR.UPDISCHARGEDFLAG(INUPRODUCTID );

            
            RETURN;
         END IF;



        
        CURFCOMPONENTS := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID(INUPRODUCTID);
        FETCH CURFCOMPONENTS INTO RCCOMPONENT;

        
        IF (CURFCOMPONENTS%NOTFOUND ) THEN
            
            BLEXISTCOMPACTIVE := TRUE;
        END IF;
        
        WHILE CURFCOMPONENTS%FOUND LOOP
            
            COMPONENTCONNECT(RCCOMPONENT,DTSYSDATE,BLEXISTCOMPACTIVE,INUSUSPENSIONTYPEID);
            FETCH CURFCOMPONENTS INTO RCCOMPONENT;
        END LOOP;
        CLOSE CURFCOMPONENTS;

        
        CURFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION(INUPRODUCTID);
        FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        WHILE CURFPRODSUSPENSION%FOUND LOOP
            UT_TRACE.TRACE('Tipo Suspensi?n:['||RCPRODSUSPENSION.SUSPENSION_TYPE_ID||']Id:['||RCPRODSUSPENSION.PROD_SUSPENSION_ID||']',13);

            
            IF INUSUSPENSIONTYPEID = RCPRODSUSPENSION.SUSPENSION_TYPE_ID
                OR INUSUSPENSIONTYPEID <> CNUSUSPTYPLC
                AND RCPRODSUSPENSION.SUSPENSION_TYPE_ID IN (CNUSUSPTYPBLOCK, CNUSUSPTYPNOTPAY)
            THEN
                
                RCPRODSUSPENSION.INACTIVE_DATE := DTSYSDATE;
                RCPRODSUSPENSION.ACTIVE := GE_BOCONSTANTS.CSBNO;
                DAPR_PROD_SUSPENSION.UPDRECORD(RCPRODSUSPENSION);
            END IF;

            FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        END LOOP;
        CLOSE CURFPRODSUSPENSION;

        
        IF BLEXISTCOMPACTIVE THEN

            
            RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODACTI;
            RCPRODUCT.SUSPEN_ORD_ACT_ID := NULL;
            DAPR_PRODUCT.UPDRECORD(RCPRODUCT);
        END IF;

        
        PR_BOREQUEST.CREATEREQUESTPRODUCT   (
                                            MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
                                            DTSYSDATE,
                                            INUPRODUCTID,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            CNUMOTIVE_TYPE_CONN,
                                            GE_BOCONSTANTS.CNUSUCCESS
                                            );

        
        IF INUSUSPENSIONTYPEID = CNUSUSPTYPLC THEN
            RCSUSPCONE := PKTBLSUSPCONE.FRCGETRECORD(INUEXTERNALORDERID);
            RCSUSPCONE.SUCOFEAT := NVL(IDTATTENTIONDATE, DTSYSDATE);
            
            IF ISBFLAGCOMPLETE = PKCONSTANTE.NO THEN
                RCSUSPCONE.SUCOCACD := NUCAUSASINACT;
            END IF;
            
            PKTBLSUSPCONE.UPRECORD(RCSUSPCONE);
            RETURN ;
        END IF;

        
        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
        /*PKSUSPCONNSERVICE.*/ ATTENINDIVSUSPECONNE  (
                                                INUEXTERNALORDERID,
                                                NUSERVICE,
                                                INUBILLINGSTATUS,
                                                IDTATTENTIONDATE,
                                                ISBFLAGCOMPLETE, 
                                                CSBPROCESSNAME,
                                                NUERRORCODE,
                                                SBERRORMESSAGE
                                                );
        IF NVL(NUERRORCODE,GE_BOCONSTANTS.CNUSUCCESS) <> GE_BOCONSTANTS.CNUSUCCESS THEN
            SBCALLSERVICE := 'pkSuspConnService.AttenIndivSuspeConne';
            RAISE EXCALLSERVICE;
        END IF;
            
            
            PKSUSPCONNSERVICEMGR.UPDISCHARGEDFLAG( INUPRODUCTID );

        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.ProductConnect',10);
    EXCEPTION
        WHEN EXCALLSERVICE THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                SBCALLSERVICE || '|' || TO_CHAR(NUERRORCODE)||' - '||SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
   
  PROCEDURE CONECTARPRODUCTO( INUIDPRODUCTO IN PR_PRODUCT.PRODUCT_ID%TYPE, INUIDTIPOSUSPENSION IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE, INUIDESTADOCORTE IN NUMBER, INUIDORDENEXTERNA IN NUMBER, INUIDTIPOPRODUCTO IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE, IDTFECHAATENCION IN DATE, ISBEJECACTIVCAMPO IN VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicio: [PR_BOSuspCorteReconexion.ConectarProducto]', 5 );
      /*PR_BOSUSPENSION.*/PRODUCTCONNECT( INUIDPRODUCTO, INUIDTIPOSUSPENSION, INUIDESTADOCORTE, INUIDORDENEXTERNA, INUIDTIPOPRODUCTO, IDTFECHAATENCION, ISBEJECACTIVCAMPO );
      UT_TRACE.TRACE( 'Fin: [PR_BOSuspCorteReconexion.ConectarProducto]', 5 );
    EXCEPTION
      WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         UT_TRACE.TRACE( 'Error: [PR_BOSuspCorteReconexion.ConectarProducto]', 5 );
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         UT_TRACE.TRACE( 'Error: [PR_BOSuspCorteReconexion.ConectarProducto]', 5 );
         RAISE EX.CONTROLLED_ERROR;
   END;
  
  PROCEDURE PRODUCTRECONECT( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUORDERID IN SUSPCONE.SUCOIDSC%TYPE, INUORDERTYPEID IN SUSPCONE.SUCOORDTYPE%TYPE, IDTATTENTIONDATE IN DATE, INUCAUSALID IN GE_CAUSAL.CAUSAL_ID%TYPE := NULL )
    IS
      NUSUSPENSIONTYPEID GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE;
      NUSTATUS NUMBER;
      SBFLAGCOMPLETE VARCHAR2( 1 );
    BEGIN
      UT_TRACE.TRACE( 'Inicio: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
      SM_BOINTERFACE.GETSUSPENSIONTYPEANDSTATUS( INUORDERTYPEID, NUSUSPENSIONTYPEID, NUSTATUS );
      IF ( INUCAUSALID IS NOT NULL AND DAGE_CAUSAL.FNUGETCAUSAL_TYPE_ID( INUCAUSALID ) = CNUCATYATTWITHOUTACTIVITY ) THEN
         SBFLAGCOMPLETE := CSBNO;
       ELSE
         SBFLAGCOMPLETE := CSBSI;
      END IF;
      /*PR_BOSUSPCORTERECONEXION.*/ CONECTARPRODUCTO( INUPRODUCTID, NUSUSPENSIONTYPEID, NUSTATUS, INUORDERID, NULL, IDTATTENTIONDATE, SBFLAGCOMPLETE );
      UT_TRACE.TRACE( 'Fin: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
         RAISE EX.CONTROLLED_ERROR;
   END PRODUCTRECONECT;
  
  
      PROCEDURE RECONBYPAYATTENTION
    (
        INUMOTIVEID      IN   MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        CDTSYSDATE         CONSTANT DATE := UT_DATE.FDTSYSDATE;
        
        














    
    
    
    
    CSBVERSION              CONSTANT VARCHAR2(250)  := 'SAO413861';
    
    CSBWORK_INSTANCE        CONSTANT VARCHAR2(30)   := MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE;
    
    CNUAPLICATIONDATEISNULL CONSTANT NUMBER(4)      := 5225;
    
    CNUENDINGDATEISNULL     CONSTANT NUMBER(4)      := 5226;
    
    CNUCOMPTYPESUSPEND      CONSTANT NUMBER(4)      := 563;
        
    CNUDATESEQUALS          CONSTANT NUMBER(4)      := 483;
    
    CNUANNUL_CAUSAL_TYPE    CONSTANT NUMBER         := 18;

    CNUPERIODMAXSUSP        CONSTANT NUMBER(4)      := 9;
    CNUCALCCURRENTYEAR      CONSTANT NUMBER(4)      := 10;
    
    CNUATTRNUMSUSPVOL       CONSTANT GE_ATTRIBUTES.ATTRIBUTE_ID%TYPE := 201;
    CNUATTRNUMSOLSUSPVOL    CONSTANT GE_ATTRIBUTES.ATTRIBUTE_ID%TYPE := 202;

    
    CSBTAGGENERSUSPEVOL     CONSTANT VARCHAR2(100) := 'M_GENER_SUSPEVOL';
    CNUADMIN_SUPS_TYPE      CONSTANT GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE := PR_BOPARAMETER.FNUGETADMIN_SUSPENSION;


    
    
    
    GNUMOTIVEID  MO_MOTIVE.MOTIVE_ID%TYPE;
        RCBSSORDER         SUSPCONE%ROWTYPE;
        RCORDERACTIVITY    DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        RCORDER            DAOR_ORDER.STYOR_ORDER;

        RCMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGE          DAMO_PACKAGES.STYMO_PACKAGES;
        RCCAUSAL           DAGE_CAUSAL.STYGE_CAUSAL;

        BLREGEN            BOOLEAN;
        NUORDERACTID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        TBCHILDACTIV       DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;
        INDX               BINARY_INTEGER;

    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOSuspension.ReconByPayAttention Motive['||INUMOTIVEID||']',10);

        SAVEPOINT RECONNECT_BY_PAY_PROD;

        
        RCMOTIVE    := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        
        RCBSSORDER  := PKBCSUSPCONE.FRCGETRECORDBYTYPE(RCMOTIVE.PRODUCT_ID, PKSUSPCONNSERVICE.CSBCONEXION);

        
        IF  (RCBSSORDER.SUCOACTIV_ID IS NOT NULL) THEN

            
            NUORDERACTID :=  RCBSSORDER.SUCOACTIV_ID;

            TBCHILDACTIV.DELETE;

             
            OR_BCREGENERAACTIVID.GETCHILDACTIVITIES(NUORDERACTID,TBCHILDACTIV);

            
            IF TBCHILDACTIV.COUNT > 0 THEN
                INDX := TBCHILDACTIV.LAST;
                NUORDERACTID :=  TBCHILDACTIV(INDX).ORDER_ACTIVITY_ID;
            END IF;

            
            
            RCORDER         := DAOR_ORDER.FRCGETRECORD(DAOR_ORDER_ACTIVITY.FNUGETORDER_ID(NUORDERACTID));

            UT_TRACE.TRACE('La orden de reconex encontrada es: ['||RCORDER.ORDER_ID||']',10);

            
            RCCAUSAL        := DAGE_CAUSAL.FRCGETRECORD(RCORDER.CAUSAL_ID);

            
            RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(OR_BCORDERACTIVITIES.FNUGETORIGINORDERACTIVITYID(RCBSSORDER.SUCOACTIV_ID));

            
            PKBCSUSPCONE.UPORDERNUMBER
            (
                RCBSSORDER.SUCOIDSC,
                RCORDERACTIVITY.ORDER_ID,
                RCORDERACTIVITY.ORDER_ACTIVITY_ID,
                RCBSSORDER.SUCOORDTYPE,
                PKCONSTANTE.NO
            );

            
            
            
            

            
            IF  ((RCCAUSAL.CLASS_CAUSAL_ID = MO_BOCAUSAL.FNUGETSUCCESS) AND
                 (RCCAUSAL.CAUSAL_TYPE_ID <> CNUANNUL_CAUSAL_TYPE)) THEN

                
                PRODUCTRECONECT
                (
                    RCMOTIVE.PRODUCT_ID,
                    RCBSSORDER.SUCOIDSC,
                    RCBSSORDER.SUCOORDTYPE,
                    RCORDER.EXECUTION_FINAL_DATE,
                    RCORDER.CAUSAL_ID
                );

            
            ELSIF  (RCCAUSAL.CAUSAL_TYPE_ID = CNUANNUL_CAUSAL_TYPE)
            THEN

                
                OR_BOLEGALACTPRODTYPESTAT.ANULLPRODUCTRECONNECT
                (
                    RCMOTIVE.PRODUCT_ID,
                    RCORDERACTIVITY.ORDER_ACTIVITY_ID
                );

            END IF;
        
        ELSE
            
            PRODUCTRECONECT
            (
                RCMOTIVE.PRODUCT_ID,
                RCBSSORDER.SUCOIDSC,
                RCBSSORDER.SUCOORDTYPE,
                NVL(RCMOTIVE.ATTENTION_DATE, CDTSYSDATE)
            );

        END IF;

        
        FOR RCMOCOMPONENT IN MO_BCCOMPONENT.CUCOMPBYMOTIVEORDERBYFATHER(RCMOTIVE.MOTIVE_ID) LOOP

            RCMOCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(RCMOCOMPONENT.COMPONENT_ID);

            
            IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOCOMPONENT.MOTIVE_STATUS_ID)) AND
                (RCMOCOMPONENT.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_COMP)
            THEN
                
                RCMOCOMPONENT.MEDIATION_DATE    := NVL(RCMOCOMPONENT.MEDIATION_DATE, CDTSYSDATE);
                RCMOCOMPONENT.ATTENTION_DATE    := NVL(RCMOCOMPONENT.ATTENTION_DATE, CDTSYSDATE);

                DAMO_COMPONENT.UPDRECORD(RCMOCOMPONENT);

                
                MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORCOMP(RCMOCOMPONENT.COMPONENT_ID, MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND);

            END IF;

        END LOOP;

        
        RCMOTIVE    := DAMO_MOTIVE.FRCGETRECORD(RCMOTIVE.MOTIVE_ID);

        
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOTIVE.MOTIVE_STATUS_ID)) AND
            (RCMOTIVE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_MOT)
        THEN
            
            IF  (RCMOTIVE.ATTENTION_DATE IS NULL) THEN
                DAMO_MOTIVE.UPDATTENTION_DATE(RCMOTIVE.MOTIVE_ID, CDTSYSDATE);
            END IF;

            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(RCMOTIVE.MOTIVE_ID, MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND);

        END IF;

        
        RCPACKAGE   := DAMO_PACKAGES.FRCGETRECORD(RCMOTIVE.PACKAGE_ID);

        
        IF  (NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCPACKAGE.MOTIVE_STATUS_ID)) AND
            (RCPACKAGE.MOTIVE_STATUS_ID != MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK)
        THEN
            
            IF  (RCPACKAGE.ATTENTION_DATE IS NULL) THEN
                DAMO_PACKAGES.UPDATTENTION_DATE(RCPACKAGE.PACKAGE_ID, CDTSYSDATE);
            END IF;

            
            MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORPACK(RCPACKAGE.PACKAGE_ID, MO_BOACTIONPARAMETER.FNUGETACTION_ATTEND);

        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOSuspension.ReconByPayAttention ',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO RECONNECT_BY_PAY_PROD;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK TO RECONNECT_BY_PAY_PROD;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RECONBYPAYATTENTION;
begin
  -- Test statements here
  RECONBYPAYATTENTION(47169738);
EXCEPTION
  WHEN ex.CONTROLLED_ERROR then
  errors.getError(errorNumber, errorMessage);
  WHEN OTHERS THEN
  errors.setError;
  errors.getError(errorNumber, errorMessage);
end;
0
2
RCMOTIVE.PRODUCT_ID
RCORDER.order_id
