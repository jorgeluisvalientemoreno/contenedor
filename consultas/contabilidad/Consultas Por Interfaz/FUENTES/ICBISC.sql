CREATE OR REPLACE PROCEDURE ICBISC( INUSCHEDULE IN GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE )
 IS
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   NUTHREADS NUMBER;
   NULOGPROCESS GE_LOG_PROCESS.LOG_PROCESS_ID%TYPE;
   SBFRECUENCIA GE_PROCESS_SCHEDULE.FREQUENCY%TYPE;
   CSBGENPROCESS CONSTANT VARCHAR( 10 ) := 'icbisc';
   CSBROLLPROCESS CONSTANT VARCHAR( 10 ) := 'icbrsc';
   SBINSTANCIA VARCHAR2( 100 );
   SBCONEXION VARCHAR2( 100 );
   SBPARAMETROS VARCHAR2( 2000 );
   SBOPERATIONMODE GE_BOINSTANCECONTROL.STYSBVALUE;
   NUOPERATION NUMBER;
   SBINITDATE GE_BOINSTANCECONTROL.STYSBVALUE;
   SBFINALDATE GE_BOINSTANCECONTROL.STYSBVALUE;
   SBDELAYDAYS GE_BOINSTANCECONTROL.STYSBVALUE;
   SBIDPROCESO ESTAPROG.ESPRPROG%TYPE;
   PROCEDURE GETPARAMETERS
    IS
      RCPROGRAMACION DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
    BEGIN
      PKERRORS.PUSH( 'ICBISC.GetParameters' );
      GE_BOSCHEDULE.INSTANCESCHEDULE( INUSCHEDULE );
      NUTHREADS := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE( 'NRO_PROCESOS_PARALELO' );
      RCPROGRAMACION := DAGE_PROCESS_SCHEDULE.FRCGETRECORD( INUSCHEDULE );
      SBOPERATIONMODE := UT_STRING.GETPARAMETERVALUE( RCPROGRAMACION.PARAMETERS_, 'OPERATION_MODE_ID', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
      NUOPERATION := UT_CONVERT.FNUCHARTONUMBER( SBOPERATIONMODE );
      SBINITDATE := UT_STRING.GETPARAMETERVALUE( RCPROGRAMACION.PARAMETERS_, 'DOGEFEMO', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
      SBFINALDATE := UT_STRING.GETPARAMETERVALUE( RCPROGRAMACION.PARAMETERS_, 'DOGEFEGE', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
      SBDELAYDAYS := UT_STRING.GETPARAMETERVALUE( RCPROGRAMACION.PARAMETERS_, 'DPINIDPA', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
      SBCONEXION := UT_STRING.GETPARAMETERVALUE( RCPROGRAMACION.PARAMETERS_, 'CONEX', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
      SBFRECUENCIA := RCPROGRAMACION.FREQUENCY;
      SBCONEXION := BI_BOSERVICIOSDOTNET.FSBCODIFICARCONTRASENA( SBCONEXION, FALSE );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         PKERRORS.POP;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETPARAMETERS;
   PROCEDURE CONCATPARAMETERS
    IS
    BEGIN
      PKERRORS.PUSH( 'ICBISC.ConcatParameters' );
      SBPARAMETROS := '''' || SBFRECUENCIA || '''' || ' ''' || NVL( SBINITDATE, 'NULL' ) || '''' || ' ''' || NVL( SBFINALDATE, 'NULL' ) || '''' || ' ''' || NVL( SBDELAYDAYS, 'NULL' ) || '''';
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         PKERRORS.POP;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CONCATPARAMETERS;
   PROCEDURE INITPROCESSSTATUS( ISBPROCESSNAME IN VARCHAR2, OSBIDPROCESO OUT ESTAPROG.ESPRPROG%TYPE )
    IS
      CNUMENSEJEPROC CONSTANT MENSAJE.MENSCODI%TYPE := 10010;
      SBMENSEJEPROC MENSAJE.MENSDESC%TYPE;
      SBPROCESSNAME VARCHAR2( 10 );
    BEGIN
      PKERRORS.PUSH( 'ICBISC.InitProcessStatus' );
      SBPROCESSNAME := UPPER( ISBPROCESSNAME || '-' );
      OSBIDPROCESO := PKSTATUSEXEPROGRAMMGR.FSBGETPROGRAMID( SBPROCESSNAME );
      PKSTATUSEXEPROGRAMMGR.VALIDATERECORDAT( OSBIDPROCESO );
      SBMENSEJEPROC := PKTBLMENSAJE.FSBGETDESCRIPTION( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_GRL, CNUMENSEJEPROC );
      PKSTATUSEXEPROGRAMMGR.UPSTATUSEXEPROGRAMAT( OSBIDPROCESO, SBMENSEJEPROC, 0, 0 );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         PKERRORS.POP;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INITPROCESSSTATUS;
 BEGIN
   PKERRORS.PUSH( 'ICBISC' );
   GETPARAMETERS;
   CONCATPARAMETERS;
   IF ( NUOPERATION = IC_BOCOMPLETSERVICEINT.CNUGENERATION ) THEN
      GE_BOSCHEDULE.ADDLOGTOSCHEDULEPROCESS( INUSCHEDULE, NUTHREADS, NULOGPROCESS );
      SBPARAMETROS := SBPARAMETROS || ' ' || INUSCHEDULE;
      BI_BOSERVICIOSDOTNET.INVOCARPROC( CSBGENPROCESS, SBCONEXION, SBPARAMETROS );
    ELSIF ( NUOPERATION = IC_BOCOMPLETSERVICEINT.CNUROLLBACK ) THEN
      INITPROCESSSTATUS( CSBROLLPROCESS, SBIDPROCESO );
      SBPARAMETROS := SBPARAMETROS || ' ''' || SBIDPROCESO || '''';
      BI_BOSERVICIOSDOTNET.INVOCARPROC( CSBROLLPROCESS, SBCONEXION, SBPARAMETROS );
   END IF;
   PKERRORS.POP;
 EXCEPTION
   WHEN LOGIN_DENIED THEN
      PKERRORS.POP;
      RAISE LOGIN_DENIED;
   WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
      PKERRORS.POP;
      RAISE PKCONSTANTE.EXERROR_LEVEL2;
   WHEN OTHERS THEN
      PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
      PKERRORS.POP;
      RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END ICBISC;
/


