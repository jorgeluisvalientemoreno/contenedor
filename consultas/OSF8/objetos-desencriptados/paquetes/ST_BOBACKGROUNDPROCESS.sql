PACKAGE ST_BOBackgroundProcess AS




































































    
    
    
    SUBTYPE STYNUMBER   IS NUMBER;
    SUBTYPE STYVARCHAR2 IS VARCHAR2;
    SUBTYPE STYDATE     IS DATE;
    SUBTYPE STYBOOLEAN  IS BOOLEAN;


    SUBTYPE STYENCJSONDATA IS VARCHAR2(32000); 
    SUBTYPE STYRAWJSONDATA IS VARCHAR2(32000); 
    SUBTYPE STYTRACEDATA   IS VARCHAR2(32000); 

    
    
    

    
    CSBEMPTY_PARAMETER      CONSTANT STYVARCHAR2(10) := 'x-null-x';


    
    CNUREGULAR_TRC_LEVEL    CONSTANT STYNUMBER       := 10;
    CNUMEDIUM_TRC_LEVEL     CONSTANT STYNUMBER       := 20;
    CNUDETAIL_TRC_LEVEL     CONSTANT STYNUMBER       := 30;
    CNUEXTREME_TRC_LEVEL    CONSTANT STYNUMBER       := 50;


    
    CSBJSON_OBJECT_TAG      CONSTANT STYVARCHAR2(20) := 'objectToBeCalled';
    CSBJSON_PARAMLIST_TAG   CONSTANT STYVARCHAR2(20) := 'parameters';
    CSBJSON_PARAM_TYPE_TAG  CONSTANT STYVARCHAR2(20) := 'parameterType';
    CSBJSON_PARAM_VAL_TAG   CONSTANT STYVARCHAR2(20) := 'parameterValue';
    CSBJSON_PARAM_NAME_TAG  CONSTANT STYVARCHAR2(20) := 'parameterName';

    

    
    CSBPL_INVOKE_PROCESSOR  CONSTANT ST_BODBTOAPPSERVERBUS.STYPROCESSOR := 'PLProcedureInvoker';
    CSBCONCURRENT_PROCESS   CONSTANT ST_BODBTOAPPSERVERBUS.STYPROCESSOR := 'concurrentProcessor';

    CSBPROJSON_BTRCK_TAG    CONSTANT STYVARCHAR2(20) := 'baseTrackID';
    CSBEXECUTION_ID_TAG     CONSTANT STYVARCHAR2(20) := 'executionID';
    CSBPROJSON_PRGNAME_TAG  CONSTANT STYVARCHAR2(20) := 'programName';
    CSBPROJSON_THREADS_TAG  CONSTANT STYVARCHAR2(20) := 'totalThreads';
    CSBPROJSON_JSONDAT_TAG  CONSTANT STYVARCHAR2(20) := 'jsonData';

    CNUDEFAULT_WAIT_TIME    CONSTANT STYNUMBER       := 172800; 
    CNUTIME_WAIT_CHECK      CONSTANT STYNUMBER       := 240; 

    
    CSBDATEFORMAT           CONSTANT STYVARCHAR2(25) := 'dd-mm-yyyy hh24:mi:ss';
    
    CNUENDED_WITH_ERR       CONSTANT STYNUMBER := 1;
    CNUENDED_WITHOUT_ERR    CONSTANT STYNUMBER := 0;

    
    
    
    

    
    CNUOUT_P                CONSTANT STYNUMBER       := 1;
    CNUIN_P                 CONSTANT STYNUMBER       := 0;

    
    CNUDTY_PROCEDURE        CONSTANT STYNUMBER       := 0; 
    CNUDTY_VARCHAR2         CONSTANT STYNUMBER       := 1;
    CNUDTY_NUMBER           CONSTANT STYNUMBER       := 2;
    CNUDTY_PLS_INTEGER      CONSTANT STYNUMBER       := 3;
    CNUDTY_DATE             CONSTANT STYNUMBER       := 12;
    CNUDTY_TRACKING         CONSTANT STYNUMBER       := -1010;


    
    
    

    
    CSBTRACKING             CONSTANT STYVARCHAR2(10) := 'TRACKING';     
    CSBPARTITION            CONSTANT STYVARCHAR2(10) := 'PARTITION';    
    CSBTOTAL                CONSTANT STYVARCHAR2(10) := 'TOTAL';        


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    FUNCTION FSBVERSION RETURN VARCHAR2;


    


               
               
               

    
    
    

    
    PROCEDURE INITIATEPROCESS
    (
        ISBMETHODNAME       IN  STYVARCHAR2,
        ISBGENERICPARAM1    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM2    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM3    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM4    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM5    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM6    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM7    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM8    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM9    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM10   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM11   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM12   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM13   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM14   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM15   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM16   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM17   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM18   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM19   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM20   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER
    );


    
    
    

    
    FUNCTION FNURUNTHREADEDPROCESS
    (
        ISBMETHODNAME       IN  STYVARCHAR2,
        ISBGENERICPARAM1    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM2    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM3    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM4    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM5    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM6    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM7    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM8    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM9    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM10   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM11   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM12   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM13   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM14   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM15   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM16   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM17   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM18   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM19   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM20   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER
    )
    RETURN STYNUMBER;
    
    

    
    PROCEDURE SETTOTALTHREADS( INUTOTALTHREADS IN STYNUMBER );

    
    PROCEDURE SETBASETRACKING( ISBBASETRACKING IN ESTAPROG.ESPRPROG%TYPE );
    
    
    PROCEDURE SETPROGRAMNAME( ISBPROGRAMNAME IN ESTAPROG.ESPRPROG%TYPE );



    


              
              
              

    
    PROCEDURE GETMETHODPARAMETERS
    (
        ISBMETHODNAME   IN  STYVARCHAR2,
        OTBPARAMLIST    OUT NOCOPY ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST
    );

    FUNCTION FTBCREATEPARAMETERLIST
    (
        ISBMETHODNAME       IN  STYVARCHAR2,
        ISBGENERICPARAM1    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM2    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM3    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM4    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM5    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM6    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM7    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM8    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM9    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM10   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM11   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM12   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM13   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM14   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM15   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM16   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM17   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM18   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM19   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
        ISBGENERICPARAM20   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER
    )
    RETURN ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST;


    PROCEDURE VALANDFORMATPARAMLIST
    (
        IOTBPARAMLIST IN OUT NOCOPY ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST
    );


    PROCEDURE VALFORMATBINDEDPARAMS
    (
        IOTBPARAMLIST IN OUT NOCOPY ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST
    );


    
    PROCEDURE GENERATEMETHODINFOJSON
    (
        ISBMETHODNAME   IN  STYVARCHAR2,
        ITBPARAMLIST    IN  ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST,
        OCLMETHODJSON   OUT NOCOPY CLOB
    );
    

    
    FUNCTION FSBGETEXEDYNAMICSTRING
    (
        ITBPARAMLIST    IN  ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST,
        INUPARTITION_PH IN  STYNUMBER DEFAULT NULL,
        INUTOTAL_PH     IN  STYNUMBER DEFAULT NULL
    )
    RETURN STYVARCHAR2;


              
              
              

    FUNCTION FSBGETSTDMAINTRACK
    (
        ISBBASETRACKINGID IN ESTAPROG.ESPRPROG%TYPE
    )
    RETURN ESTAPROG.ESPRPROG%TYPE;


    FUNCTION FSBGETTHREADSTDTRACK
    (
        ISBBASETRACKINGID IN ESTAPROG.ESPRPROG%TYPE,
        INUEXECUTIONID    IN  STYNUMBER,
        INUTHREADNUMBER   IN STYNUMBER
    )
    RETURN ESTAPROG.ESPRPROG%TYPE;

    PROCEDURE CREATETRACKINGDATA
    (
        OSBBASETRACKINGID   OUT NOCOPY ESTAPROG.ESPRPROG%TYPE,
        OSBLOGGERREF        OUT NOCOPY REPOINCO.REINREPO%TYPE
    );
    
    PROCEDURE CLOSETRACKDATA
    (
        ISBBASETRACKINGID IN    ESTAPROG.ESPRPROG%TYPE,
        IBOSUCCESSFULLY   IN    STYBOOLEAN
    );

    
    
    PROCEDURE CREATECHILDTRACKDATA
    (
        ISBBASETRACKINGID   IN  ESTAPROG.ESPRPROG%TYPE,
        INUEXECUTIONID      IN  STYNUMBER,
        INUTHREADNUMBER     IN  STYNUMBER,
        OSBLOGGERREF        OUT NOCOPY REPOINCO.REINREPO%TYPE
    );
    
    PROCEDURE CLOSECHILDTRACKDATA
    (
        ISBBASETRACKINGID IN    ESTAPROG.ESPRPROG%TYPE,
        INUEXECUTIONID    IN    STYNUMBER,
        INUCURRENTTHREAD  IN    STYNUMBER,
        IBOSUCCESSFULLY   IN    STYBOOLEAN
    );
    
    PROCEDURE WRITEREMOTETHREADLOG
    (
        ISBBASETRACKINGID   IN    ESTAPROG.ESPRPROG%TYPE,
        INUWORKINGTHREADS   IN    STYNUMBER,
        INUWORKINGTIME      IN    STYNUMBER
    );
    
    PROCEDURE WRITEREMOTETHREADERR
    (
        ISBBASETRACKINGID   IN    ESTAPROG.ESPRPROG%TYPE,
        INUEXECUTIONID      IN    STYNUMBER,
        INUFAILINGTHREAD    IN    STYNUMBER
    );
    
    PROCEDURE CREATETRACEFILE
    (
        ISBTRACKINGNAME IN ESTAPROG.ESPRPROG%TYPE
    );

    
    PROCEDURE LOGPROCESS
    (
        ISBLOGGERREF    IN  REPOINCO.REINREPO%TYPE,
        ISBLOGMSG       IN  REPOINCO.REINDES2%TYPE
    );



            
            
            



    PROCEDURE MAINPROCESSWRAPPER(ISBENCJSONDATA  IN  STYENCJSONDATA);   

    PROCEDURE CHILDPROCESSWRAPPER
    (
        ISBBASETRACKID      IN  ESTAPROG.ESPRPROG%TYPE,
        INUEXECUTIONID      IN  STYNUMBER,
        INUTOTALTHREADS     IN  STYNUMBER,
        INUCURRENTTHREAD    IN  STYNUMBER,
        ISBPROGRAMNAME      IN  ESTAPROG.ESPRPROG%TYPE,
        ISBENCJSONDATA      IN  STYENCJSONDATA
    );


              
              
              


    
    PROCEDURE ENQUEUEMAINPROCESS
    (
        ISBJSONDATA IN  STYRAWJSONDATA
    );

    FUNCTION FNUENQUEUECHILDPROCESS
    (
        ISBBASETRACKID  IN  STYVARCHAR2,
        INUTOTALTHREADS IN  STYNUMBER,
        ISBPROGRAMNAME  IN  STYVARCHAR2,
        ISBJSONDATA     IN  STYENCJSONDATA
    )
    RETURN ST_BODBTOAPPSERVERBUS.STYMESSAGEBODY;


    
    PROCEDURE SETPROCESSSTG
    (
        ISBSERVERTAG    IN  ST_BODBTOAPPSERVERBUS.STYSERVER
    );
    
    
    FUNCTION FCLGETPROCESSRESPONSE
    RETURN  ST_BODBTOAPPSERVERBUS.STYMESSAGEBODY;


END ST_BOBACKGROUNDPROCESS;

PACKAGE BODY ST_BOBackgroundProcess AS

































































































































































    
    
    
    
    
    
    CSBVERSION              CONSTANT    UT_DATATYPES.STYSAOVERSION  := 'SAO574143';

    
    CSBTRACK_PROG_NAME      CONSTANT    ESTAPROG.ESPRPROG%TYPE      := 'BP';
    CSBTRACK_MAIN_SUFFIX    CONSTANT    ESTAPROG.ESPRPROG%TYPE      := '_MAIN';
    CSBTRACK_CHILD_SUFFIX   CONSTANT    ESTAPROG.ESPRPROG%TYPE      := '_T';

    
    
    
    
    CSBGENERIC_ERROR        CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(912021);
    
    
    CNUERR_EMPTY_NAME       CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916754;

    
    CNUERR_OBJ_NOT_EXISTS   CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916753;

    
    CNUERR_INVALID_STATE    CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916746;

    
    CNUERR_INVALID_OBJECT   CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916751;

    
    CNUERR_TYP_NOT_SUPPORT  CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916750;

    
    CNUERR_INVALID_PARNUM   CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916749;

    
    CNUERR_NON_NUMERIC_VAL  CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916748;

    
    CNUERR_NON_DATE_VAL     CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916747;

    
    CNUERR_NUMERIC_BIND     CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916757;

    
    CNUERR_VARCHAR_BIND     CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 916755;

    
    
    
    
    CSBLOGGER_0             CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(916766);

    
    CSBLOGGER_1             CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(916765);

    
    CSBLOGGER_2             CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(916764);

    
    CSBLOGGER_3             CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(916763);

    
    CSBLOGGER_4             CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(916762);

    
    CSBLOGGER_5             CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(916761);

    
    CSBLOGGER_6             CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(916760);

    
    CSBLOGGER_7             CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(916759);

    
    CSBLOGGER_8             CONSTANT    GE_MESSAGE.DESCRIPTION%TYPE :=
                                        DAGE_MESSAGE.FSBGETDESCRIPTION(916758);


    
    
    
    CNUDOMAIN_1             CONSTANT    GE_DOMAIN_VALUES.DOMAIN%TYPE    := 36784;
    CSBDOMAIN_1_VALUE_A     CONSTANT    GE_DOMAIN_VALUES.VALUE%TYPE     := 'A'; 
    CSBDOMAIN_1_VALUE_I     CONSTANT    GE_DOMAIN_VALUES.VALUE%TYPE     := 'I'; 
    CSBUSE_IMPROVED_BATCH_P CONSTANT    GE_PARAMETER.PARAMETER_ID%TYPE  := 'USE_IMPROVED_BATCH_P';



    
    
    

    
    GSBMSGERR               GE_ERROR_LOG.DESCRIPTION%TYPE ;

    
    GSBSERVERTAG            ST_BODBTOAPPSERVERBUS.STYSERVER;

                      
                      
                      

    
    
    
    
    
    GNUM1_TOTALTHREADS      STYNUMBER              := 1;

    
    
    
    
    
    
    GSBM2_BASETRACK         ESTAPROG.ESPRPROG%TYPE;

    
    
    
    
    
    GSBM3_PROGRAMNAME       ESTAPROG.ESPRPROG%TYPE := 'DEF_';

    
    
    
    
    
    GNUM4_EXECUTIONCOUNT    STYNUMBER := 0;
    
    
    
    
    
    
    GCLM5_PROCESSRESPONSE   ST_BODBTOAPPSERVERBUS.STYMESSAGEBODY;

    
    
    









    PROCEDURE SETJOBPARAMETERS
    (
        ITBPARAMLIST    IN    ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST
    );



















FUNCTION FSBVERSION RETURN VARCHAR2 IS
BEGIN

    RETURN CSBVERSION;

END FSBVERSION;



               
               
               














































PROCEDURE INITIATEPROCESS
(
    ISBMETHODNAME       IN  STYVARCHAR2,
    ISBGENERICPARAM1    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM2    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM3    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM4    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM5    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM6    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM7    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM8    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM9    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM10   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM11   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM12   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM13   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM14   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM15   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM16   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM17   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM18   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM19   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM20   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER
)
IS
    
    
    
    SBJSONDATA      STYRAWJSONDATA;
    TBPARAMLIST     ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST;

BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.InitiateProcess',CNUREGULAR_TRC_LEVEL);
    UT_TRACE.TRACE('Object to be called ['||ISBMETHODNAME||']',CNUMEDIUM_TRC_LEVEL);

    
    
    
    
    TBPARAMLIST :=
    FTBCREATEPARAMETERLIST
    (
        ISBMETHODNAME,
        ISBGENERICPARAM1,
        ISBGENERICPARAM2,
        ISBGENERICPARAM3,
        ISBGENERICPARAM4,
        ISBGENERICPARAM5,
        ISBGENERICPARAM6,
        ISBGENERICPARAM7,
        ISBGENERICPARAM8,
        ISBGENERICPARAM9,
        ISBGENERICPARAM10,
        ISBGENERICPARAM11,
        ISBGENERICPARAM12,
        ISBGENERICPARAM13,
        ISBGENERICPARAM14,
        ISBGENERICPARAM15,
        ISBGENERICPARAM16,
        ISBGENERICPARAM17,
        ISBGENERICPARAM18,
        ISBGENERICPARAM19,
        ISBGENERICPARAM20
        
    );

    
    
    
    VALANDFORMATPARAMLIST( TBPARAMLIST );  

    
    
    
    

    IF ( DAGE_PARAMETER.FSBGETVALUE(CSBUSE_IMPROVED_BATCH_P) = 'Y' ) THEN
    
        ST_BOBATCHJOBSSERVICES.CREATEJOB(ISBMETHODNAME);
        SETJOBPARAMETERS(TBPARAMLIST);
        ST_BOBATCHJOBSSERVICES.LAUNCHJOB;

    ELSE

        
        
        
        
        GENERATEMETHODINFOJSON
        (
            ISBMETHODNAME,  
            TBPARAMLIST,    
            SBJSONDATA     
        );
        UT_TRACE.TRACE('Generated json length['||LENGTH(SBJSONDATA)||']',CNUMEDIUM_TRC_LEVEL);


        
        
        
        
        ENQUEUEMAINPROCESS(SBJSONDATA);

    
    END IF;
    
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [InitiateProcess]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [InitiateProcess]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END INITIATEPROCESS;








































FUNCTION FNURUNTHREADEDPROCESS
(
    ISBMETHODNAME       IN  STYVARCHAR2,
    ISBGENERICPARAM1    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM2    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM3    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM4    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM5    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM6    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM7    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM8    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM9    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM10   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM11   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM12   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM13   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM14   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM15   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM16   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM17   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM18   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM19   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM20   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER

)
RETURN STYNUMBER
IS
    CSBSTATUS           CONSTANT    STYVARCHAR2(10) := 'status';
    CSBERROR_MESSASE    CONSTANT    STYVARCHAR2(15) := 'processMessage';

    
    
    
    SBJSONDATA      STYRAWJSONDATA;
    TBPARAMLIST     ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST;
    NUJOBID         ST_PROCESSED_JOBS.JOB_ID%TYPE;
    
    



















    PROCEDURE SETERRORINTOPROCRESP
    (
        ISBERRORMESSAGE IN  GE_MESSAGE.DESCRIPTION%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE(
        'ST_BOBackgroundProcess.fnuRunThreadedProcess.SetErrorIntoProcResp',CNUMEDIUM_TRC_LEVEL);

        UT_JSON.INITIALIZE_CLOB_OUTPUT;

        UT_JSON.OPEN_OBJECT();
        
        UT_JSON.WRITE_(CSBSTATUS, CNUENDED_WITH_ERR);
        UT_JSON.WRITE_(CSBERROR_MESSASE, ISBERRORMESSAGE);

        UT_JSON.CLOSE_OBJECT();

        GCLM5_PROCESSRESPONSE := UT_JSON.FCLGET_CLOB_OUTPUT;

    END SETERRORINTOPROCRESP;

    




















    FUNCTION FBOCHECKCHILDSERROR
    (
        ISBBASETRACKINGID IN  ESTAPROG.ESPRPROG%TYPE,
        INUEXECUTIONID    IN  STYNUMBER,
        INUTOTALTHREADS   IN  STYNUMBER
    )
    RETURN UT_DATATYPES.STYBOOLEAN
    IS
        NUPORC                ESTAPROG.ESPRPORC%TYPE;
        SBCHILDTRACKINGID     ESTAPROG.ESPRPROG%TYPE;
        NUINDEX               STYNUMBER;

    BEGIN
        UT_TRACE.TRACE('ST_BOBackgroundProcess.fnuRunThreadedProcess.fboCheckChildsError',CNUREGULAR_TRC_LEVEL);

        FOR NUINDEX IN 1..INUTOTALTHREADS
        LOOP
                
                SBCHILDTRACKINGID := FSBGETTHREADSTDTRACK(ISBBASETRACKINGID,INUEXECUTIONID,NUINDEX);
                
                NUPORC := PKTBLESTAPROG.FNUGETESPRPORC(SBCHILDTRACKINGID);

                IF(NUPORC <> PKSTATUSEXEPROGRAMMGR.CNUTERMINO_OK)THEN
                    RETURN TRUE;
                END IF;
        END LOOP;

        RETURN FALSE;

    EXCEPTION
       WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Exception in [fboCheckChildsError]',CNUREGULAR_TRC_LEVEL);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Others exception in [fboCheckChildsError]',CNUREGULAR_TRC_LEVEL);
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
            RAISE;
    END FBOCHECKCHILDSERROR;
BEGIN
    UT_TRACE.TRACE('ST_BOBackgroundProcess.fnuRunThreadedProcess',CNUREGULAR_TRC_LEVEL);
    UT_TRACE.TRACE('Object to be called ['||ISBMETHODNAME     ||']',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('[M1] Total threads  ['||GNUM1_TOTALTHREADS||']',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('[M2] Base tracking  ['||GSBM2_BASETRACK   ||']',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('[M3] Program name   ['||GSBM3_PROGRAMNAME ||']',CNUMEDIUM_TRC_LEVEL);

    
    
    
    
    
    GCLM5_PROCESSRESPONSE := NULL;

    IF ( GSBM2_BASETRACK IS NULL ) THEN
    
        ST_BOBACKGROUNDPROCESS.SETBASETRACKING
        (
            PKSTATUSEXEPROGRAMMGR.FSBGETPROGRAMID(CSBTRACK_PROG_NAME)
        );
    
    END IF;

    
    
    
    
    TBPARAMLIST :=
    FTBCREATEPARAMETERLIST
    (
        ISBMETHODNAME,
        ISBGENERICPARAM1,
        ISBGENERICPARAM2,
        ISBGENERICPARAM3,
        ISBGENERICPARAM4,
        ISBGENERICPARAM5,
        ISBGENERICPARAM6,
        ISBGENERICPARAM7,
        ISBGENERICPARAM8,
        ISBGENERICPARAM9,
        ISBGENERICPARAM10,
        ISBGENERICPARAM11,
        ISBGENERICPARAM12,
        ISBGENERICPARAM13,
        ISBGENERICPARAM14,
        ISBGENERICPARAM15,
        ISBGENERICPARAM16,
        ISBGENERICPARAM17,
        ISBGENERICPARAM18,
        ISBGENERICPARAM19,
        ISBGENERICPARAM20
    );

    
    
    
    VALFORMATBINDEDPARAMS( TBPARAMLIST );  


    
    
    
    

    IF ( DAGE_PARAMETER.FSBGETVALUE(CSBUSE_IMPROVED_BATCH_P) = 'Y' ) THEN

        ST_BOBATCHJOBSSERVICES.CREATEJOB(ISBMETHODNAME);
        SETJOBPARAMETERS(TBPARAMLIST);
        NUJOBID := ST_BOBATCHJOBSSERVICES.FNURUNTHREADEDJOB(GNUM1_TOTALTHREADS);


        IF (NUJOBID <> 0) THEN
            RETURN CNUENDED_WITH_ERR;
        END IF;

    ELSE

        
        
        
        
        GENERATEMETHODINFOJSON
        (
            ISBMETHODNAME,  
            TBPARAMLIST,    
            SBJSONDATA     
        );
        UT_TRACE.TRACE('Generated json length['||LENGTH(SBJSONDATA)||']',CNUMEDIUM_TRC_LEVEL);


        
        
        
        GCLM5_PROCESSRESPONSE :=
        FNUENQUEUECHILDPROCESS
        (
            GSBM2_BASETRACK,    
            GNUM1_TOTALTHREADS, 
            GSBM3_PROGRAMNAME,  
            SBJSONDATA          
        );

        IF (UT_JSON.FSBPROCESSJSON(CSBSTATUS, GCLM5_PROCESSRESPONSE) = '1') THEN
            RETURN CNUENDED_WITH_ERR;
        ELSE
            
            IF FBOCHECKCHILDSERROR(GSBM2_BASETRACK,GNUM4_EXECUTIONCOUNT,GNUM1_TOTALTHREADS) THEN
                RETURN CNUENDED_WITH_ERR;
            END IF;
        END IF;
    END IF;

    
    RETURN CNUENDED_WITHOUT_ERR;
EXCEPTION
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [fnuRunThreadedProcess]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, PKERRORS.FSBGETERRORMESSAGE, GSBMSGERR );
        UT_TRACE.TRACE('Error: ['||GSBMSGERR||']',CNUREGULAR_TRC_LEVEL);
        SETERRORINTOPROCRESP(GSBMSGERR);
        RETURN CNUENDED_WITH_ERR;
        
END FNURUNTHREADEDPROCESS;






















PROCEDURE SETTOTALTHREADS
(
    INUTOTALTHREADS IN  STYNUMBER
)
IS
BEGIN
    UT_TRACE.TRACE('ST_BOBackgroundProcess.SetTotalThreads',CNUREGULAR_TRC_LEVEL);
    GNUM1_TOTALTHREADS  := INUTOTALTHREADS;

EXCEPTION
   WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [SetTotalThreads]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [SetTotalThreads]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END SETTOTALTHREADS;


































PROCEDURE SETBASETRACKING
(
    ISBBASETRACKING IN ESTAPROG.ESPRPROG%TYPE
)
IS
BEGIN
    UT_TRACE.TRACE('ST_BOBackgroundProcess.SetBaseTracking',CNUREGULAR_TRC_LEVEL);
    GSBM2_BASETRACK := ISBBASETRACKING;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [SetBaseTracking]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [SetBaseTracking]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END SETBASETRACKING;















































PROCEDURE SETPROGRAMNAME
(
    ISBPROGRAMNAME IN ESTAPROG.ESPRPROG%TYPE
)
IS
BEGIN
    UT_TRACE.TRACE('ST_BOBackgroundProcess.SetProgramName',CNUREGULAR_TRC_LEVEL);
    GSBM3_PROGRAMNAME := ISBPROGRAMNAME;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [SetProgramName]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [SetProgramName]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END SETPROGRAMNAME;



              
              
              
























































PROCEDURE GETMETHODPARAMETERS
(
    ISBMETHODNAME   IN  STYVARCHAR2,
    OTBPARAMLIST    OUT NOCOPY ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST
)
IS
    
    
    
    TBMETHODDESCR   GE_TYTB_DESCRIBE;
    NUIDX           BINARY_INTEGER;

    NUPARAMLISTIDX  ST_BCBACKGROUNDPROCESS.STYPARAMLISTIDX;

BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.GetMethodParameters',CNUREGULAR_TRC_LEVEL);

    
    
    
    IF ( ISBMETHODNAME IS NULL ) THEN
    
        
        GE_BOERRORS.SETERRORCODE(CNUERR_EMPTY_NAME);
    
    END IF;


    
    
    
    BEGIN
        TBMETHODDESCR :=
        UT_DESCRIBE.FTBOBJECTDESCRIBE(ISBMETHODNAME);
    EXCEPTION
        WHEN OTHERS THEN
            
            IF ( INSTR(SQLERRM,'10036') > 0 ) THEN
            
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_INVALID_STATE,ISBMETHODNAME);
                RAISE EX.CONTROLLED_ERROR;
            
            END IF;

            
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_OBJ_NOT_EXISTS,ISBMETHODNAME);
            RAISE EX.CONTROLLED_ERROR;
    END;


    NUPARAMLISTIDX := 1;
    NUIDX := TBMETHODDESCR.FIRST;
    LOOP
        EXIT WHEN ( NUIDX IS NULL );

        
        
        
        IF ( NOT TBMETHODDESCR(NUIDX).NUMODE = CNUIN_P ) THEN
        
            
            GE_BOERRORS.SETERRORCODE(CNUERR_INVALID_OBJECT);
        
        END IF;

        
        
        
        IF ( NOT TBMETHODDESCR(NUIDX).NUCOLUMNTYPE IN ( CNUDTY_PROCEDURE,
                                                        CNUDTY_VARCHAR2,
                                                        CNUDTY_NUMBER,
                                                        CNUDTY_PLS_INTEGER,
                                                        CNUDTY_DATE         ) ) THEN
        
            
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_TYP_NOT_SUPPORT,TBMETHODDESCR(NUIDX).SBCOLUMNNAME);
            RAISE EX.CONTROLLED_ERROR;
        
        END IF;

        
        
        
        
        
        IF ( TBMETHODDESCR(NUIDX).SBCOLUMNNAME IS NOT NULL ) THEN
        
            OTBPARAMLIST(NUPARAMLISTIDX).OBJECTTOBECALLED := TBMETHODDESCR(NUIDX).SBOBJECTNAME;
            OTBPARAMLIST(NUPARAMLISTIDX).PARAMETERNAME    := TBMETHODDESCR(NUIDX).SBCOLUMNNAME;
            OTBPARAMLIST(NUPARAMLISTIDX).PARAMETERTYPE    := TBMETHODDESCR(NUIDX).NUCOLUMNTYPE;
            OTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE   := NULL;
        
        END IF;

        NUPARAMLISTIDX := NUPARAMLISTIDX + 1;
        NUIDX := TBMETHODDESCR.NEXT( NUIDX );
    END LOOP;


    UT_TRACE.TRACE('Parameters described ['||OTBPARAMLIST.COUNT||']',CNUMEDIUM_TRC_LEVEL);
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [GetMethodParameters]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [GetMethodParameters]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END GETMETHODPARAMETERS;




































































FUNCTION FTBCREATEPARAMETERLIST
(
    ISBMETHODNAME       IN  STYVARCHAR2,
    ISBGENERICPARAM1    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM2    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM3    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM4    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM5    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM6    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM7    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM8    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM9    IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM10   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM11   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM12   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM13   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM14   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM15   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM16   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM17   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM18   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM19   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER,
    ISBGENERICPARAM20   IN  STYVARCHAR2 DEFAULT CSBEMPTY_PARAMETER
)
RETURN ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST
IS
    
    
    
    NULOOPCOUNT         BINARY_INTEGER;
    NUPARCNT            BINARY_INTEGER;

    SBPARAMETERVALUE    STYVARCHAR2(4000);
    NUPARAMLISTIDX      ST_BCBACKGROUNDPROCESS.STYPARAMLISTIDX;

    TBPARAMLIST         ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST;

BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.ftbCreateParameterList',CNUREGULAR_TRC_LEVEL);


    
    
    
    GETMETHODPARAMETERS
    (
        ISBMETHODNAME,  
        TBPARAMLIST     
    );


    
    
    
    
    NULOOPCOUNT := 1;
    NUPARCNT := 0;
    LOOP
        EXIT WHEN ( NULOOPCOUNT > 20 );

        CASE(NULOOPCOUNT)
            WHEN 1  THEN SBPARAMETERVALUE := ISBGENERICPARAM1;
            WHEN 2  THEN SBPARAMETERVALUE := ISBGENERICPARAM2;
            WHEN 3  THEN SBPARAMETERVALUE := ISBGENERICPARAM3;
            WHEN 4  THEN SBPARAMETERVALUE := ISBGENERICPARAM4;
            WHEN 5  THEN SBPARAMETERVALUE := ISBGENERICPARAM5;
            WHEN 6  THEN SBPARAMETERVALUE := ISBGENERICPARAM6;
            WHEN 7  THEN SBPARAMETERVALUE := ISBGENERICPARAM7;
            WHEN 8  THEN SBPARAMETERVALUE := ISBGENERICPARAM8;
            WHEN 9  THEN SBPARAMETERVALUE := ISBGENERICPARAM9;
            WHEN 10 THEN SBPARAMETERVALUE := ISBGENERICPARAM10;
            WHEN 11 THEN SBPARAMETERVALUE := ISBGENERICPARAM11;
            WHEN 12 THEN SBPARAMETERVALUE := ISBGENERICPARAM12;
            WHEN 13 THEN SBPARAMETERVALUE := ISBGENERICPARAM13;
            WHEN 14 THEN SBPARAMETERVALUE := ISBGENERICPARAM14;
            WHEN 15 THEN SBPARAMETERVALUE := ISBGENERICPARAM15;
            WHEN 16 THEN SBPARAMETERVALUE := ISBGENERICPARAM16;
            WHEN 17 THEN SBPARAMETERVALUE := ISBGENERICPARAM17;
            WHEN 18 THEN SBPARAMETERVALUE := ISBGENERICPARAM18;
            WHEN 19 THEN SBPARAMETERVALUE := ISBGENERICPARAM19;
            WHEN 20 THEN SBPARAMETERVALUE := ISBGENERICPARAM20;
        END CASE;

        IF ( SBPARAMETERVALUE = CSBEMPTY_PARAMETER ) THEN
        
            EXIT;
        
        END IF;

        NUPARCNT := NUPARCNT + 1;
        NULOOPCOUNT := NULOOPCOUNT + 1;
    END LOOP;

    UT_TRACE.TRACE('Method['              ||ISBMETHODNAME     ||
                   ']. Parameters needed['||TBPARAMLIST.COUNT ||
                   ']  Parameters given[' ||NUPARCNT          ||']',CNUMEDIUM_TRC_LEVEL);

    IF ( NOT NUPARCNT = (TBPARAMLIST.COUNT) ) THEN
    
        
        GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_INVALID_PARNUM,ISBMETHODNAME);
    
    END IF;


    
    
    
    NULOOPCOUNT := 1;
    NUPARAMLISTIDX := TBPARAMLIST.FIRST;
    LOOP
        EXIT WHEN ( NUPARAMLISTIDX IS NULL );

        CASE(NULOOPCOUNT)
            WHEN 1  THEN SBPARAMETERVALUE := ISBGENERICPARAM1;
            WHEN 2  THEN SBPARAMETERVALUE := ISBGENERICPARAM2;
            WHEN 3  THEN SBPARAMETERVALUE := ISBGENERICPARAM3;
            WHEN 4  THEN SBPARAMETERVALUE := ISBGENERICPARAM4;
            WHEN 5  THEN SBPARAMETERVALUE := ISBGENERICPARAM5;
            WHEN 6  THEN SBPARAMETERVALUE := ISBGENERICPARAM6;
            WHEN 7  THEN SBPARAMETERVALUE := ISBGENERICPARAM7;
            WHEN 8  THEN SBPARAMETERVALUE := ISBGENERICPARAM8;
            WHEN 9  THEN SBPARAMETERVALUE := ISBGENERICPARAM9;
            WHEN 10 THEN SBPARAMETERVALUE := ISBGENERICPARAM10;
            WHEN 11 THEN SBPARAMETERVALUE := ISBGENERICPARAM11;
            WHEN 12 THEN SBPARAMETERVALUE := ISBGENERICPARAM12;
            WHEN 13 THEN SBPARAMETERVALUE := ISBGENERICPARAM13;
            WHEN 14 THEN SBPARAMETERVALUE := ISBGENERICPARAM14;
            WHEN 15 THEN SBPARAMETERVALUE := ISBGENERICPARAM15;
            WHEN 16 THEN SBPARAMETERVALUE := ISBGENERICPARAM16;
            WHEN 17 THEN SBPARAMETERVALUE := ISBGENERICPARAM17;
            WHEN 18 THEN SBPARAMETERVALUE := ISBGENERICPARAM18;
            WHEN 19 THEN SBPARAMETERVALUE := ISBGENERICPARAM19;
            WHEN 20 THEN SBPARAMETERVALUE := ISBGENERICPARAM20;
        END CASE;

        
        TBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE := SBPARAMETERVALUE;

        NULOOPCOUNT := NULOOPCOUNT + 1;
        NUPARAMLISTIDX := TBPARAMLIST.NEXT( NUPARAMLISTIDX );
    END LOOP;

    RETURN TBPARAMLIST;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [ftbCreateParameterList]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [ftbCreateParameterList]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END FTBCREATEPARAMETERLIST;


























FUNCTION FNUFORMATNUMERICPARAM
(
    ISBPARAMNAME        IN  STYVARCHAR2,
    INUPARAMPOSITION    IN  BINARY_INTEGER,
    ISBVALUE            IN  STYVARCHAR2
)
RETURN STYNUMBER
IS
    
    
    
    NUFORMATEDVALUE STYNUMBER;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.fnuFormatNumericParam',CNUMEDIUM_TRC_LEVEL);

    NUFORMATEDVALUE := TO_NUMBER(ISBVALUE);
    RETURN NUFORMATEDVALUE;
EXCEPTION
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Exception in [fnuFormatNumericParam]',CNUREGULAR_TRC_LEVEL);
        
        GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_NON_NUMERIC_VAL,INUPARAMPOSITION||'|'||ISBPARAMNAME);
        RAISE EX.CONTROLLED_ERROR;
END FNUFORMATNUMERICPARAM;


























FUNCTION FSBFORMATDATEPARAM
(
    ISBPARAMNAME        IN  STYVARCHAR2,
    INUPARAMPOSITION    IN  BINARY_INTEGER,
    ISBVALUE            IN  STYVARCHAR2
)
RETURN STYVARCHAR2
IS
    
    
    
    DTFORMATEDVALUE STYDATE;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.fsbFormatDateParam',CNUMEDIUM_TRC_LEVEL);

    DTFORMATEDVALUE := UT_DATE.FDTDATEWITHFORMAT(ISBVALUE);
    RETURN TO_CHAR(DTFORMATEDVALUE,CSBDATEFORMAT);
EXCEPTION
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Exception in [fsbFormatDateParam]',CNUREGULAR_TRC_LEVEL);
        
        GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_NON_DATE_VAL,INUPARAMPOSITION||'|'||ISBPARAMNAME);
        RAISE EX.CONTROLLED_ERROR;
END FSBFORMATDATEPARAM;













































PROCEDURE VALANDFORMATPARAMLIST
(
    IOTBPARAMLIST IN OUT NOCOPY ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST
)
IS
    
    
    
    NULOOPCOUNT         BINARY_INTEGER;
    NUPARAMLISTIDX      ST_BCBACKGROUNDPROCESS.STYPARAMLISTIDX;

BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.ValAndFormatParamList',CNUREGULAR_TRC_LEVEL);

    NUPARAMLISTIDX := IOTBPARAMLIST.FIRST;
    NULOOPCOUNT := 1;
    LOOP
        EXIT WHEN ( NUPARAMLISTIDX IS NULL );

        
        IF ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERTYPE IN (CNUDTY_NUMBER, CNUDTY_PLS_INTEGER) ) THEN
        
            IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE := FNUFORMATNUMERICPARAM
            ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERNAME,    
              NULOOPCOUNT,                                    
              IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE ); 
        
        END IF;

        
        IF ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERTYPE = CNUDTY_DATE ) THEN
        
            IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE := FSBFORMATDATEPARAM
            ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERNAME,    
              NULOOPCOUNT,                                    
              IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE ); 
        
        END IF;


        NULOOPCOUNT    := NULOOPCOUNT + 1;
        NUPARAMLISTIDX := IOTBPARAMLIST.NEXT( NUPARAMLISTIDX );
    END LOOP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [ValAndFormatParamList]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [ValAndFormatParamList]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END VALANDFORMATPARAMLIST;






















































PROCEDURE VALFORMATBINDEDPARAMS
(
    IOTBPARAMLIST IN OUT NOCOPY ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST
)
IS
    
    
    
    NULOOPCOUNT         BINARY_INTEGER;
    NUPARAMLISTIDX      ST_BCBACKGROUNDPROCESS.STYPARAMLISTIDX;

BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.ValFormatBindedParams',CNUREGULAR_TRC_LEVEL);

    NUPARAMLISTIDX := IOTBPARAMLIST.FIRST;
    NULOOPCOUNT := 1;
    LOOP
        EXIT WHEN ( NUPARAMLISTIDX IS NULL );


        IF ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE IN (CSBTRACKING,CSBPARTITION,CSBTOTAL) ) THEN
        
            

            
            
            
            
            
            
            IF ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE IN (CSBPARTITION, CSBTOTAL) AND
                 NOT IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERTYPE IN (CNUDTY_NUMBER,CNUDTY_PLS_INTEGER) ) THEN
            
                
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_NUMERIC_BIND,IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE);
            
            END IF;

            
            
            
            
            
            
            IF ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE = CSBTRACKING AND
                 NOT IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERTYPE = CNUDTY_VARCHAR2 ) THEN
            
                
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_VARCHAR_BIND,CSBTRACKING);
            
            END IF;


            

            
            
            
            
            
            IF ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE = CSBTRACKING ) THEN
            
                IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERTYPE  := CNUDTY_TRACKING;
                IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE := PKSTATUSEXEPROGRAMMGR.FSBGETPROGRAMID(GSBM3_PROGRAMNAME);
            
            END IF;

        ELSE

            
            IF ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERTYPE IN ( CNUDTY_NUMBER, CNUDTY_PLS_INTEGER )) THEN
            
                IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE := FNUFORMATNUMERICPARAM
                ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERNAME,    
                  NULOOPCOUNT,                                    
                  IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE ); 
            
            END IF;

            
            IF ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERTYPE = CNUDTY_DATE ) THEN
            
                IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE := FSBFORMATDATEPARAM
                ( IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERNAME,    
                  NULOOPCOUNT,                                    
                  IOTBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE ); 
            
            END IF;

        
        END IF;


        NULOOPCOUNT    := NULOOPCOUNT + 1;
        NUPARAMLISTIDX := IOTBPARAMLIST.NEXT( NUPARAMLISTIDX );
    END LOOP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [ValFormatBindedParams]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [ValFormatBindedParams]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END VALFORMATBINDEDPARAMS;














































PROCEDURE GENERATEMETHODINFOJSON
(
    ISBMETHODNAME   IN  STYVARCHAR2,
    ITBPARAMLIST    IN  ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST,
    OCLMETHODJSON   OUT NOCOPY CLOB
)
IS
    
    
    
    NUPARAMLISTIDX  ST_BCBACKGROUNDPROCESS.STYPARAMLISTIDX;


BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.GenerateMethodInfoJSON',CNUREGULAR_TRC_LEVEL);

    UT_JSON.INITIALIZE_CLOB_OUTPUT;
    UT_JSON.OPEN_OBJECT();
    UT_JSON.WRITE_(CSBJSON_OBJECT_TAG, ISBMETHODNAME);      

    UT_JSON.OPEN_ARRAY(CSBJSON_PARAMLIST_TAG); 
    NUPARAMLISTIDX := ITBPARAMLIST.FIRST;
    LOOP
        EXIT WHEN ( NUPARAMLISTIDX IS NULL );

            UT_JSON.OPEN_OBJECT();
                UT_JSON.WRITE_(CSBJSON_PARAM_TYPE_TAG, ITBPARAMLIST(NUPARAMLISTIDX).PARAMETERTYPE);  
                UT_JSON.WRITE_(CSBJSON_PARAM_VAL_TAG,  ITBPARAMLIST(NUPARAMLISTIDX).PARAMETERVALUE); 
                UT_JSON.WRITE_(CSBJSON_PARAM_NAME_TAG, ITBPARAMLIST(NUPARAMLISTIDX).PARAMETERNAME);  
            UT_JSON.CLOSE_OBJECT();

        NUPARAMLISTIDX := ITBPARAMLIST.NEXT( NUPARAMLISTIDX );
    END LOOP;

    UT_JSON.CLOSE_ARRAY();                     
    UT_JSON.CLOSE_OBJECT();
    OCLMETHODJSON := UT_JSON.FCLGET_CLOB_OUTPUT;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [GenerateMethodInfoJSON]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [GenerateMethodInfoJSON]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END GENERATEMETHODINFOJSON;
















































FUNCTION FSBGETEXEDYNAMICSTRING
(
    ITBPARAMLIST    IN  ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST,
    INUPARTITION_PH IN  STYNUMBER DEFAULT NULL,
    INUTOTAL_PH     IN  STYNUMBER DEFAULT NULL
)
RETURN STYVARCHAR2
IS
    
    
    
    NUIDX               ST_BCBACKGROUNDPROCESS.STYPARAMLISTIDX;
    SBDYNAMICSTRING     STYVARCHAR2(5000);


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    FUNCTION FSBGETVARCHARVAL
    RETURN STYVARCHAR2
    IS
    BEGIN
        
        IF ( ITBPARAMLIST(NUIDX).PARAMETERTYPE = CNUDTY_TRACKING ) THEN
        
            RETURN ''''||ITBPARAMLIST(NUIDX).PARAMETERVALUE||'-'||INUPARTITION_PH||'''';
        
        END IF;

        RETURN ''''||ITBPARAMLIST(NUIDX).PARAMETERVALUE||'''';

    END FSBGETVARCHARVAL;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    FUNCTION FSBGETNUMERICVAL
    RETURN STYVARCHAR2
    IS
    BEGIN

        
        IF ( ITBPARAMLIST(NUIDX).PARAMETERVALUE = CSBPARTITION ) THEN
        
            RETURN INUPARTITION_PH;
        
        END IF;
        
        
        IF ( ITBPARAMLIST(NUIDX).PARAMETERVALUE = CSBTOTAL ) THEN
        
            RETURN INUTOTAL_PH;
        
        END IF;

        RETURN ITBPARAMLIST(NUIDX).PARAMETERVALUE||'';

    END FSBGETNUMERICVAL;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    FUNCTION FSBGETDATEVAL
    RETURN STYVARCHAR2
    IS
    BEGIN
        RETURN 'to_date('''||ITBPARAMLIST(NUIDX).PARAMETERVALUE||''','''||CSBDATEFORMAT||''')';

    END FSBGETDATEVAL;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    FUNCTION FSBGETSTRINGCOMMAND
    RETURN STYVARCHAR2
    IS
        
        
        
        SBPARAMETERVALUE    STYVARCHAR2(5000);
    BEGIN

        
        IF ( NUIDX = ITBPARAMLIST.FIRST ) THEN
        
            SBPARAMETERVALUE := ITBPARAMLIST(NUIDX).OBJECTTOBECALLED||'(';
        
        END IF;

        
        IF ( ITBPARAMLIST(NUIDX).PARAMETERTYPE IS NOT NULL ) THEN
        
            IF ( ITBPARAMLIST(NUIDX).PARAMETERVALUE IS NOT NULL ) THEN
            
                CASE(ITBPARAMLIST(NUIDX).PARAMETERTYPE)
                    WHEN CNUDTY_TRACKING    THEN SBPARAMETERVALUE := SBPARAMETERVALUE||FSBGETVARCHARVAL;
                    WHEN CNUDTY_VARCHAR2    THEN SBPARAMETERVALUE := SBPARAMETERVALUE||FSBGETVARCHARVAL;
                    WHEN CNUDTY_NUMBER      THEN SBPARAMETERVALUE := SBPARAMETERVALUE||FSBGETNUMERICVAL;
                    WHEN CNUDTY_PLS_INTEGER THEN SBPARAMETERVALUE := SBPARAMETERVALUE||FSBGETNUMERICVAL;
                    WHEN CNUDTY_DATE        THEN SBPARAMETERVALUE := SBPARAMETERVALUE||FSBGETDATEVAL;
                    ELSE NULL;
                END CASE;

            ELSE
                SBPARAMETERVALUE := SBPARAMETERVALUE||'null';
            
            END IF;
        
        END IF;

        
        IF ( NOT NUIDX = ITBPARAMLIST.LAST ) THEN
        
            SBPARAMETERVALUE := SBPARAMETERVALUE||', ';
        
        END IF;

        RETURN  SBPARAMETERVALUE;

    END FSBGETSTRINGCOMMAND;

BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.fsbGetExeDynamicString',CNUREGULAR_TRC_LEVEL);
    UT_TRACE.TRACE('Parameters count    ['||ITBPARAMLIST.COUNT||']',CNUMEDIUM_TRC_LEVEL);

    SBDYNAMICSTRING := 'BEGIN ';

    NUIDX := ITBPARAMLIST.FIRST;
    LOOP
        EXIT WHEN ( NUIDX IS NULL );

        SBDYNAMICSTRING := SBDYNAMICSTRING||FSBGETSTRINGCOMMAND;

        NUIDX := ITBPARAMLIST.NEXT( NUIDX );
    END LOOP;


    SBDYNAMICSTRING := SBDYNAMICSTRING ||'); END;';
    RETURN SBDYNAMICSTRING;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [fsbGetExeDynamicString]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [fsbGetExeDynamicString]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END FSBGETEXEDYNAMICSTRING;



              
              
              























FUNCTION FSBGETSTDMAINTRACK
(
    ISBBASETRACKINGID IN ESTAPROG.ESPRPROG%TYPE
)
RETURN ESTAPROG.ESPRPROG%TYPE
IS
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.fsbGetStdMainTrack',CNUREGULAR_TRC_LEVEL);
    RETURN ISBBASETRACKINGID||CSBTRACK_MAIN_SUFFIX;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [fsbGetStdMainTrack]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [fsbGetStdMainTrack]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END FSBGETSTDMAINTRACK;


























FUNCTION FSBGETTHREADSTDTRACK
(
    ISBBASETRACKINGID IN ESTAPROG.ESPRPROG%TYPE,
    INUEXECUTIONID    IN  STYNUMBER,
    INUTHREADNUMBER   IN STYNUMBER
)
RETURN ESTAPROG.ESPRPROG%TYPE
IS
BEGIN

    
    RETURN ISBBASETRACKINGID||'-'||INUEXECUTIONID||CSBTRACK_CHILD_SUFFIX||LPAD(INUTHREADNUMBER,3,'0');

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [fsbGetThreadStdTrack]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [fsbGetThreadStdTrack]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END FSBGETTHREADSTDTRACK;




















































PROCEDURE CREATETRACKINGDATA
(
    OSBBASETRACKINGID   OUT NOCOPY ESTAPROG.ESPRPROG%TYPE,
    OSBLOGGERREF        OUT NOCOPY REPOINCO.REINREPO%TYPE
)
IS
    
    
    
    SBTRACKINGID        ESTAPROG.ESPRPROG%TYPE;
    RCREPORTES          REPORTES%ROWTYPE;

PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.CreateTrackingData',CNUREGULAR_TRC_LEVEL);

    
    
    
    OSBBASETRACKINGID :=
    PKSTATUSEXEPROGRAMMGR.FSBGETPROGRAMID(CSBTRACK_PROG_NAME);


    
    SBTRACKINGID := FSBGETSTDMAINTRACK(OSBBASETRACKINGID);


    
    
    
    PKSTATUSEXEPROGRAMMGR.ADDRECORD
    (
        SBTRACKINGID,  
        1
    );
    
    
    
    
    RCREPORTES.REPONUME     := SQ_REPORTES.NEXTVAL;
    RCREPORTES.REPOAPLI     := UT_SESSION.GETMODULE;
    RCREPORTES.REPOFECH     := UT_DATE.FDTSYSDATE;
    RCREPORTES.REPOUSER     := UT_SESSION.GETUSER;
    RCREPORTES.REPODESC     := 'ST_BOBackgroundProcess.InitiateProcess';
    RCREPORTES.REPOSTEJ     := SBTRACKINGID;
    RCREPORTES.EXPIRED_DATA := GE_BOCONSTANTS.CSBNO;

    OSBLOGGERREF            := RCREPORTES.REPONUME;
    PKTBLREPORTES.INSRECORD(RCREPORTES);


    PKGENERALSERVICES.COMMITTRANSACTION;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [CreateTrackingData]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [CreateTrackingData]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END CREATETRACKINGDATA;































PROCEDURE CLOSETRACKDATA
(
    ISBBASETRACKINGID IN    ESTAPROG.ESPRPROG%TYPE,
    IBOSUCCESSFULLY   IN    STYBOOLEAN
)
IS
    
    
    
    SBTRACKINGNAME  ESTAPROG.ESPRPROG%TYPE;

PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.CloseTrackData',CNUREGULAR_TRC_LEVEL);

    
    
    
    SBTRACKINGNAME := FSBGETSTDMAINTRACK( ISBBASETRACKINGID );
    IF ( IBOSUCCESSFULLY ) THEN
    
        PKSTATUSEXEPROGRAMMGR.PROCESSFINISHOK( SBTRACKINGNAME );
    ELSE
        PKSTATUSEXEPROGRAMMGR.PROCESSFINISHNOK( SBTRACKINGNAME );
    
    END IF;

    
    
    
    CREATETRACEFILE( SBTRACKINGNAME );


    PKGENERALSERVICES.COMMITTRANSACTION;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [CloseTrackData]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [CloseTrackData]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END CLOSETRACKDATA;








































PROCEDURE CREATECHILDTRACKDATA
(
    ISBBASETRACKINGID   IN  ESTAPROG.ESPRPROG%TYPE,
    INUEXECUTIONID      IN  STYNUMBER,
    INUTHREADNUMBER     IN  STYNUMBER,
    OSBLOGGERREF        OUT NOCOPY REPOINCO.REINREPO%TYPE
)
IS
    
    
    
    SBTRACKINGID        ESTAPROG.ESPRPROG%TYPE;
    RCREPORTES          REPORTES%ROWTYPE;
    
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.CreateChildTrackData',CNUREGULAR_TRC_LEVEL);

    
    SBTRACKINGID := FSBGETTHREADSTDTRACK(ISBBASETRACKINGID,INUEXECUTIONID,INUTHREADNUMBER);

    
    
    
    PKSTATUSEXEPROGRAMMGR.ADDRECORD
    (
        SBTRACKINGID,  
        1
    );

    
    
    
    RCREPORTES.REPONUME     := SQ_REPORTES.NEXTVAL;
    RCREPORTES.REPOAPLI     := UT_SESSION.GETMODULE;
    RCREPORTES.REPOFECH     := UT_DATE.FDTSYSDATE;
    RCREPORTES.REPOUSER     := UT_SESSION.GETUSER;
    RCREPORTES.REPODESC     := 'ST_BOBackgroundProcess.fnuRunThreadedProcess';
    RCREPORTES.REPOSTEJ     := SBTRACKINGID;
    RCREPORTES.EXPIRED_DATA := GE_BOCONSTANTS.CSBNO;

    OSBLOGGERREF            := RCREPORTES.REPONUME;
    PKTBLREPORTES.INSRECORD(RCREPORTES);

    PKGENERALSERVICES.COMMITTRANSACTION;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [CreateChildTrackData]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [CreateChildTrackData]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END CREATECHILDTRACKDATA;

































PROCEDURE CLOSECHILDTRACKDATA
(
    ISBBASETRACKINGID IN    ESTAPROG.ESPRPROG%TYPE,
    INUEXECUTIONID    IN    STYNUMBER,
    INUCURRENTTHREAD  IN    STYNUMBER,
    IBOSUCCESSFULLY   IN    STYBOOLEAN
)
IS
    
    
    
    SBTRACKINGNAME  ESTAPROG.ESPRPROG%TYPE;

PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.CloseChildTrackData',CNUREGULAR_TRC_LEVEL);

    
    
    
    SBTRACKINGNAME := FSBGETTHREADSTDTRACK(ISBBASETRACKINGID,INUEXECUTIONID,INUCURRENTTHREAD);
    IF ( IBOSUCCESSFULLY ) THEN
    
        PKSTATUSEXEPROGRAMMGR.PROCESSFINISHOK( SBTRACKINGNAME );
    ELSE
        PKSTATUSEXEPROGRAMMGR.PROCESSFINISHNOK( SBTRACKINGNAME );
    
    END IF;

    
    
    
    CREATETRACEFILE( SBTRACKINGNAME );


    PKGENERALSERVICES.COMMITTRANSACTION;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [CloseChildTrackData]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [CloseChildTrackData]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END CLOSECHILDTRACKDATA;


























































PROCEDURE WRITEREMOTETHREADLOG
(
    ISBBASETRACKINGID   IN    ESTAPROG.ESPRPROG%TYPE,
    INUWORKINGTHREADS   IN    STYNUMBER,
    INUWORKINGTIME      IN    STYNUMBER
)
IS
    
    
    
    SBLOGGERREF     REPOINCO.REINREPO%TYPE;
    SBMESSAGE       REPOINCO.REINDES2%TYPE;

PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.WriteRemoteThreadLog',CNUREGULAR_TRC_LEVEL);

    SBLOGGERREF :=                     
    CC_BCUTILREPORTS.FNUGETREPIDBYPROG(FSBGETSTDMAINTRACK(ISBBASETRACKINGID));
    IF ( SBLOGGERREF IS NULL OR INUWORKINGTIME IS NULL ) THEN
    
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RETURN;
    
    END IF;


    IF ( INUWORKINGTHREADS = 0 ) THEN
    
        
        LOGPROCESS(SBLOGGERREF,CSBLOGGER_8);

    ELSIF ( INUWORKINGTIME = 0 ) THEN
    
        
        SBMESSAGE := REPLACE(CSBLOGGER_5,'%s1',INUWORKINGTHREADS);
        LOGPROCESS(SBLOGGERREF,SBMESSAGE);
    ELSE
        
        SBMESSAGE := REPLACE(CSBLOGGER_6,'%s1',INUWORKINGTIME);
        SBMESSAGE := REPLACE(SBMESSAGE,'%s2',INUWORKINGTHREADS);
        LOGPROCESS(SBLOGGERREF,SBMESSAGE);
    
    END IF;

    PKGENERALSERVICES.COMMITTRANSACTION;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [WriteRemoteThreadLog]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [WriteRemoteThreadLog]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END WRITEREMOTETHREADLOG;




























PROCEDURE WRITEREMOTETHREADERR
(
    ISBBASETRACKINGID   IN    ESTAPROG.ESPRPROG%TYPE,
    INUEXECUTIONID      IN    STYNUMBER,
    INUFAILINGTHREAD    IN    STYNUMBER
)
IS
    
    
    
    SBLOGGERREF     REPOINCO.REINREPO%TYPE;
    SBMESSAGE       REPOINCO.REINDES2%TYPE;

PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.WriteRemoteThreadErr',CNUREGULAR_TRC_LEVEL);

    SBLOGGERREF :=                     
    CC_BCUTILREPORTS.FNUGETREPIDBYPROG(FSBGETSTDMAINTRACK(ISBBASETRACKINGID));
    IF ( SBLOGGERREF IS NULL ) THEN
    
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RETURN;
    
    END IF;

    
    SBMESSAGE := REPLACE(CSBLOGGER_7,'%s1',INUFAILINGTHREAD);
    SBMESSAGE := REPLACE(SBMESSAGE,'%s2',FSBGETTHREADSTDTRACK(ISBBASETRACKINGID,INUEXECUTIONID,INUFAILINGTHREAD));
    LOGPROCESS(SBLOGGERREF,SBMESSAGE);
        
    PKGENERALSERVICES.COMMITTRANSACTION;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [WriteRemoteThreadErr]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [WriteRemoteThreadErr]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END WRITEREMOTETHREADERR;

























PROCEDURE CREATETRACEFILE
(
    ISBTRACKINGNAME IN ESTAPROG.ESPRPROG%TYPE
)
IS
    
    
    
    BLFILE          BLOB;
    NUFILEID        CC_FILE.FILE_ID%TYPE;

PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.CreateTraceFile',CNUREGULAR_TRC_LEVEL);


    IF ( UT_TRACE.GETOUTPUT = UT_TRACE.CNUTRACE_MEMORY ) THEN
    
        BLFILE := UT_CLOB.FBLCLOB2BLOB( UT_TRACE.FCLGETTRACEMEMORY );
        GE_BOUPLOADFILE.SAVEFILEBYAPP
        (
            ISBTRACKINGNAME,
            ISBTRACKINGNAME||'.sql',
            BLFILE,
            NULL,
            NUFILEID
        );
        UT_TRACE.TRACE('Created file ['||NUFILEID||']',CNUMEDIUM_TRC_LEVEL);
    
    END IF;

    PKGENERALSERVICES.COMMITTRANSACTION;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [CreateTraceFile]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [CreateTraceFile]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END CREATETRACEFILE;



































PROCEDURE LOGPROCESS
(
    ISBLOGGERREF    IN  REPOINCO.REINREPO%TYPE,
    ISBLOGMSG       IN  REPOINCO.REINDES2%TYPE
)
IS
    
    
    
    RCREPOINCO  REPOINCO%ROWTYPE;
    DTLOGDATE   STYDATE;
    
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.LogProcess',CNUREGULAR_TRC_LEVEL);

    DTLOGDATE := UT_DATE.FDTSYSDATE;
    RCREPOINCO.REINCODI := SEQ.GETNEXT('SQ_REPOINCO_REINCODI');
    RCREPOINCO.REINREPO := ISBLOGGERREF;
    RCREPOINCO.REINDAT1 := DTLOGDATE;
    RCREPOINCO.REINDES2 := '['||REPLACE(TO_CHAR(DTLOGDATE,'dd-Month-yyyy'),' ','')||
                           ' '||TO_CHAR(DTLOGDATE,'hh24:mi:ss')||'] '||ISBLOGMSG;

    PKTBLREPOINCO.INSRECORD(RCREPOINCO);
    PKGENERALSERVICES.COMMITTRANSACTION;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [LogProcess]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [LogProcess]',CNUREGULAR_TRC_LEVEL);
        PKGENERALSERVICES.ROLLBACKTRANSACTION;
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END LOGPROCESS;


            
            
            























































PROCEDURE MAINPROCESSWRAPPER
(
    ISBENCJSONDATA  IN  STYENCJSONDATA
)
IS
    
    
    
    SBJSONDATA      STYRAWJSONDATA;
    TBPARAMLIST     ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST;

    SBDYNAMICSTR    STYVARCHAR2(15000);
    NULOGGER        REPOINCO.REINREPO%TYPE;
    SBMESSAGE       REPOINCO.REINDES2%TYPE;
    SBBASETRACK     ESTAPROG.ESPRPROG%TYPE;

    TSSTARTTIME     TIMESTAMP;
    TSENDTIME       TIMESTAMP;

BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.MainProcessWrapper',CNUREGULAR_TRC_LEVEL);
    UT_TRACE.TRACE('---------------------------',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('-- Main process wrapper  --',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('---------------------------',CNUMEDIUM_TRC_LEVEL);
    PKERRORS.INITIALIZE;

    
    
    
    UT_TRACE.TRACE('[0] Creating tracking data...',CNUMEDIUM_TRC_LEVEL);
    CREATETRACKINGDATA
    (
        SBBASETRACK,    
        NULOGGER        
    );

    
    SETBASETRACKING(SBBASETRACK);


    
    
    
    UT_TRACE.TRACE('[1] Logging initial process parameters...',CNUMEDIUM_TRC_LEVEL);
    
    SBMESSAGE := REPLACE(CSBLOGGER_0,'%s1',UT_SESSION.GETMODULE);
    SBMESSAGE := REPLACE(SBMESSAGE,'%s2',UT_SESSION.GETUSER);
    IF ( UT_TRACE.GETOUTPUT = UT_TRACE.CNUTRACE_MEMORY ) THEN
    
        SBMESSAGE :=
        REPLACE(SBMESSAGE,'%s3',
        GE_BODOMAIN_VALUES.FSBDESCBYVALANDDOMAIN(CSBDOMAIN_1_VALUE_A,CNUDOMAIN_1));
    ELSE
        SBMESSAGE :=
        REPLACE(SBMESSAGE,'%s3',
        GE_BODOMAIN_VALUES.FSBDESCBYVALANDDOMAIN(CSBDOMAIN_1_VALUE_I,CNUDOMAIN_1));
    
    END IF;

    
    LOGPROCESS(NULOGGER,SBMESSAGE);

    
    
    
    UT_TRACE.TRACE('[2] Decoding json...',CNUMEDIUM_TRC_LEVEL);
    
    SBMESSAGE := REPLACE(CSBLOGGER_1,'%s1',LENGTH(ISBENCJSONDATA));
    LOGPROCESS(NULOGGER,SBMESSAGE);
    SBJSONDATA :=
    UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(ISBENCJSONDATA)));



    
    
    
    UT_TRACE.TRACE('[3] Getting parameter list...',CNUMEDIUM_TRC_LEVEL);
    ST_BCBACKGROUNDPROCESS.READJSONDATA
    (
        SBJSONDATA,     
        TBPARAMLIST     
    );


    
    
    
    
    UT_TRACE.TRACE('[4] Building dynamic string...',CNUMEDIUM_TRC_LEVEL);
    SBDYNAMICSTR := FSBGETEXEDYNAMICSTRING(TBPARAMLIST);



    
    
    
    UT_TRACE.TRACE('[5] [EXEC] Execute user process...',CNUMEDIUM_TRC_LEVEL);
    
    SBMESSAGE := REPLACE(CSBLOGGER_2,'%s1',TBPARAMLIST(TBPARAMLIST.FIRST).OBJECTTOBECALLED);
    LOGPROCESS(NULOGGER,SBMESSAGE);

    UT_TRACE.TRACE('- - - - - - -',CNUMEDIUM_TRC_LEVEL);
    TSSTARTTIME := CURRENT_TIMESTAMP;

    EXECUTE IMMEDIATE( SBDYNAMICSTR );

    TSENDTIME   := CURRENT_TIMESTAMP;
    UT_TRACE.TRACE('- - - - - - -',CNUMEDIUM_TRC_LEVEL);


    
    
    
    
    SBMESSAGE := REPLACE(CSBLOGGER_3,'%s1',EXTRACT(DAY    FROM (TSENDTIME-TSSTARTTIME)));
    SBMESSAGE := REPLACE(SBMESSAGE  ,'%s2',EXTRACT(HOUR   FROM (TSENDTIME-TSSTARTTIME)));
    SBMESSAGE := REPLACE(SBMESSAGE  ,'%s3',EXTRACT(MINUTE FROM (TSENDTIME-TSSTARTTIME)));
    SBMESSAGE := REPLACE(SBMESSAGE  ,'%s4',EXTRACT(SECOND FROM (TSENDTIME-TSSTARTTIME)));
    LOGPROCESS(NULOGGER,SBMESSAGE);
    CLOSETRACKDATA(SBBASETRACK,TRUE);
EXCEPTION
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Exception in [MainProcessWrapper]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, PKERRORS.FSBGETERRORMESSAGE, GSBMSGERR );
        UT_TRACE.TRACE('Error: ['||GSBMSGERR||']',CNUREGULAR_TRC_LEVEL);
        UT_TRACE.TRACE('Error: [ORACLE] ['||SQLERRM||']',CNUREGULAR_TRC_LEVEL);
        UT_TRACE.TRACE('- - - - -',CNUMEDIUM_TRC_LEVEL);

        IF (GSBMSGERR IS NOT NULL ) THEN LOGPROCESS(NULOGGER,CSBGENERIC_ERROR||' - ['||GSBMSGERR||']'); END IF;
        LOGPROCESS(NULOGGER,CSBGENERIC_ERROR||' [ORACLE] - ['||SQLERRM||']');
        CLOSETRACKDATA(SBBASETRACK,FALSE);

END MAINPROCESSWRAPPER;

















































































PROCEDURE CHILDPROCESSWRAPPER
(
    ISBBASETRACKID      IN  ESTAPROG.ESPRPROG%TYPE,
    INUEXECUTIONID      IN  STYNUMBER,
    INUTOTALTHREADS     IN  STYNUMBER,
    INUCURRENTTHREAD    IN  STYNUMBER,
    ISBPROGRAMNAME      IN  ESTAPROG.ESPRPROG%TYPE,
    ISBENCJSONDATA      IN  STYENCJSONDATA
)
IS
    
    
    
    SBJSONDATA      STYRAWJSONDATA;
    TBPARAMLIST     ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST;
    SBDYNAMICSTR    STYVARCHAR2(15000);

    SBMESSAGE       REPOINCO.REINDES2%TYPE;
    NULOGGER        REPOINCO.REINREPO%TYPE;

    TSSTARTTIME     TIMESTAMP;
    TSENDTIME       TIMESTAMP;

BEGIN
    UT_TRACE.TRACE('ST_BOBackgroundProcess.ChildProcessWrapper',CNUREGULAR_TRC_LEVEL);
    UT_TRACE.TRACE('----------------------------',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('-- Child process wrapper  --',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('----------------------------',CNUMEDIUM_TRC_LEVEL);
    PKERRORS.INITIALIZE;

    UT_TRACE.TRACE('Base track     ['||ISBBASETRACKID  ||']',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('Execution ID  #['||INUEXECUTIONID  ||']',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('Total threads  ['||INUTOTALTHREADS ||']',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('Current thread ['||INUCURRENTTHREAD||']',CNUMEDIUM_TRC_LEVEL);
    UT_TRACE.TRACE('Program Name   ['||ISBPROGRAMNAME  ||']',CNUMEDIUM_TRC_LEVEL);

    PKERRORS.SETAPPLICATION(ISBPROGRAMNAME);

    
    
    
    UT_TRACE.TRACE('[0] Creating tracking data...',CNUMEDIUM_TRC_LEVEL);
    CREATECHILDTRACKDATA
    (
        ISBBASETRACKID,     
        INUEXECUTIONID,     
        INUCURRENTTHREAD,   
        NULOGGER            
    );

    
    
    
    UT_TRACE.TRACE('[1] Logging initial process parameters...',CNUMEDIUM_TRC_LEVEL);
    
    SBMESSAGE := REPLACE(CSBLOGGER_4,'%s1',ISBBASETRACKID);
    SBMESSAGE := REPLACE(SBMESSAGE  ,'%s2',INUTOTALTHREADS);
    SBMESSAGE := REPLACE(SBMESSAGE  ,'%s3',INUCURRENTTHREAD);
    SBMESSAGE := REPLACE(SBMESSAGE  ,'%s4',ISBPROGRAMNAME);
    LOGPROCESS(NULOGGER,SBMESSAGE);

    
    
    
    UT_TRACE.TRACE('[2] Decoding json...',CNUMEDIUM_TRC_LEVEL);
    SBJSONDATA :=
    UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(ISBENCJSONDATA)));


    
    
    
    UT_TRACE.TRACE('[3] Getting parameter list...',CNUMEDIUM_TRC_LEVEL);
    ST_BCBACKGROUNDPROCESS.READJSONDATA
    (
        SBJSONDATA,     
        TBPARAMLIST     
    );

    
    
    
    
    UT_TRACE.TRACE('[4] Building dynamic string...',CNUMEDIUM_TRC_LEVEL);
    SBDYNAMICSTR :=
    FSBGETEXEDYNAMICSTRING
    (
        TBPARAMLIST,
        INUCURRENTTHREAD,   
        INUTOTALTHREADS     
    );

    
    
    
    
    UT_TRACE.TRACE('[5] [EXEC] Execute user process: ['||TBPARAMLIST(TBPARAMLIST.FIRST).OBJECTTOBECALLED||']',CNUMEDIUM_TRC_LEVEL);
    SBMESSAGE := REPLACE(CSBLOGGER_2,'%s1',TBPARAMLIST(TBPARAMLIST.FIRST).OBJECTTOBECALLED);
    LOGPROCESS(NULOGGER,SBMESSAGE);
    
    UT_TRACE.TRACE('- - - - -',CNUMEDIUM_TRC_LEVEL);
    TSSTARTTIME := CURRENT_TIMESTAMP;

    EXECUTE IMMEDIATE( SBDYNAMICSTR );

    TSENDTIME   := CURRENT_TIMESTAMP;
    UT_TRACE.TRACE('- - - - -',CNUMEDIUM_TRC_LEVEL);


    
    
    
    SBMESSAGE := REPLACE(CSBLOGGER_3,'%s1',EXTRACT(DAY    FROM (TSENDTIME-TSSTARTTIME)));
    SBMESSAGE := REPLACE(SBMESSAGE  ,'%s2',EXTRACT(HOUR   FROM (TSENDTIME-TSSTARTTIME)));
    SBMESSAGE := REPLACE(SBMESSAGE  ,'%s3',EXTRACT(MINUTE FROM (TSENDTIME-TSSTARTTIME)));
    SBMESSAGE := REPLACE(SBMESSAGE  ,'%s4',EXTRACT(SECOND FROM (TSENDTIME-TSSTARTTIME)));
    LOGPROCESS(NULOGGER,SBMESSAGE);

    CLOSECHILDTRACKDATA(ISBBASETRACKID,INUEXECUTIONID,INUCURRENTTHREAD,TRUE);
EXCEPTION
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Exception in [ChildProcessWrapper]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, PKERRORS.FSBGETERRORMESSAGE, GSBMSGERR );
        UT_TRACE.TRACE('Error: ['||GSBMSGERR||']',CNUREGULAR_TRC_LEVEL);
        UT_TRACE.TRACE('Error: [ORACLE] ['||SQLERRM||']',CNUREGULAR_TRC_LEVEL);
        UT_TRACE.TRACE('- - - - -',CNUMEDIUM_TRC_LEVEL);

        IF ( GSBMSGERR IS NOT NULL ) THEN LOGPROCESS(NULOGGER,CSBGENERIC_ERROR||' - ['||GSBMSGERR||']'); END IF;
        LOGPROCESS(NULOGGER,CSBGENERIC_ERROR||' [ORACLE] - ['||SQLERRM||']');

        CLOSECHILDTRACKDATA(ISBBASETRACKID,INUEXECUTIONID,INUCURRENTTHREAD,FALSE);
        RAISE EX.CONTROLLED_ERROR;

END CHILDPROCESSWRAPPER;



              
              
              
























































PROCEDURE ENQUEUEMAINPROCESS
(
    ISBJSONDATA IN  STYRAWJSONDATA
)
IS

    CNUPRIORITY         CONSTANT ST_BODBTOAPPSERVERBUS.STYPRIORITY := 20;

    
    
    
    SBENCJSONDATA   STYENCJSONDATA;
    NUINTCOMMMSGID  ST_BODBTOAPPSERVERBUS.STYMESSAGEID;

BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.EnqueueMainProcess',CNUREGULAR_TRC_LEVEL);

    
    
    
    UT_TRACE.TRACE('Encrypting json...',CNUMEDIUM_TRC_LEVEL);
    SBENCJSONDATA := UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(ISBJSONDATA)));


    
    
    
    
    UT_TRACE.TRACE('Creating processor JSON-Parameters...',CNUMEDIUM_TRC_LEVEL);
    UT_JSON.INITIALIZE_CLOB_OUTPUT;
    UT_JSON.OPEN_OBJECT();
    UT_JSON.WRITE_(CSBPROJSON_JSONDAT_TAG, SBENCJSONDATA);
    UT_JSON.CLOSE_OBJECT();


    
    
    
    
    UT_TRACE.TRACE('Sending message to app server...',CNUMEDIUM_TRC_LEVEL);
    ST_BODBTOAPPSERVERBUS.RUNASYNCPROCESS
    (
        ISBSERVER           => GSBSERVERTAG,               
        ISBPROCESSOR        => CSBPL_INVOKE_PROCESSOR,     
        ICLMESSAGEBODY      => UT_JSON.FCLGET_CLOB_OUTPUT, 
        INUPRIORITY         => CNUPRIORITY,                
        OSBMESSAGEID        => NUINTCOMMMSGID              
    );

    UT_TRACE.TRACE('ICE Message ID ['||NUINTCOMMMSGID||']',CNUMEDIUM_TRC_LEVEL);
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [EnqueueMainProcess]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [EnqueueMainProcess]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END ENQUEUEMAINPROCESS;
















































FUNCTION FNUENQUEUECHILDPROCESS
(
    ISBBASETRACKID  IN  STYVARCHAR2,
    INUTOTALTHREADS IN  STYNUMBER,
    ISBPROGRAMNAME  IN  STYVARCHAR2,
    ISBJSONDATA     IN  STYENCJSONDATA
)
RETURN ST_BODBTOAPPSERVERBUS.STYMESSAGEBODY
IS
    
    
    
    SBENCJSONDATA   STYENCJSONDATA;
    CLENGINERESP    ST_BODBTOAPPSERVERBUS.STYMESSAGEBODY;

BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.fnuEnqueueChildProcess',CNUREGULAR_TRC_LEVEL);


    
    
    
    UT_TRACE.TRACE('Encrypting json...',CNUMEDIUM_TRC_LEVEL);
    SBENCJSONDATA := UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(ISBJSONDATA)));


    
    
    
    
    UT_TRACE.TRACE('Creating processor JSON-Parameters...',CNUMEDIUM_TRC_LEVEL);
    UT_JSON.INITIALIZE_CLOB_OUTPUT;
    UT_JSON.OPEN_OBJECT();

    
    GNUM4_EXECUTIONCOUNT := GNUM4_EXECUTIONCOUNT + 1;
    
    UT_JSON.WRITE_(CSBPROJSON_BTRCK_TAG,   ISBBASETRACKID       ); 
    UT_JSON.WRITE_(CSBEXECUTION_ID_TAG,    GNUM4_EXECUTIONCOUNT ); 
    UT_JSON.WRITE_(CSBPROJSON_THREADS_TAG, INUTOTALTHREADS      ); 
    UT_JSON.WRITE_(CSBPROJSON_PRGNAME_TAG, ISBPROGRAMNAME       ); 
    UT_JSON.WRITE_(CSBPROJSON_JSONDAT_TAG, SBENCJSONDATA        ); 

    UT_JSON.CLOSE_OBJECT();


    
    
    
    
    UT_TRACE.TRACE('Sending message to app server...',CNUMEDIUM_TRC_LEVEL);
    ST_BODBTOAPPSERVERBUS.RUNSYNCPROCESSWREPLY
    (
        ISBSERVER           => GSBSERVERTAG,               
        ISBPROCESSOR        => CSBCONCURRENT_PROCESS,      
        ICLMESSAGEBODY      => UT_JSON.FCLGET_CLOB_OUTPUT, 
        INUWAITTIME         => CNUDEFAULT_WAIT_TIME,       
        INUWAITTIMECHECK    => CNUTIME_WAIT_CHECK,         
        OCLRESPONSE         => CLENGINERESP                
    );

    RETURN CLENGINERESP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [fnuEnqueueChildProcess]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [fnuEnqueueChildProcess]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END FNUENQUEUECHILDPROCESS;























PROCEDURE SETPROCESSSTG
(
    ISBSERVERTAG    IN  ST_BODBTOAPPSERVERBUS.STYSERVER
)
IS
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.SetProcessSTG',CNUMEDIUM_TRC_LEVEL);

    GSBSERVERTAG := ISBSERVERTAG;
    
    IF ( GSBSERVERTAG IS NULL )  THEN
    
        GSBSERVERTAG := DAGE_PARAMETER.FSBGETVALUE('ST_BACKGND_PROC_SERV');
    
    END IF;
    
    
    
    
    
    
    
    IF ( GSBSERVERTAG IS NULL ) THEN
    
        GSBSERVERTAG := ST_BODBTOAPPSERVERBUS.CSBAPP_SERVER;
    
    END IF;

    UT_TRACE.TRACE('Server tag stablished. ['||GSBSERVERTAG||']',CNUREGULAR_TRC_LEVEL);
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [SetProcessSTG]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [SetProcessSTG]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END SETPROCESSSTG;





















FUNCTION FCLGETPROCESSRESPONSE
RETURN  ST_BODBTOAPPSERVERBUS.STYMESSAGEBODY
IS
BEGIN
    UT_TRACE.TRACE('BEGIN ST_BOBackgroundProcess.GetProcessResponse',CNUMEDIUM_TRC_LEVEL);

    RETURN GCLM5_PROCESSRESPONSE;
    
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [GetProcessResponse]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [GetProcessResponse]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END FCLGETPROCESSRESPONSE;






























PROCEDURE SETJOBPARAMETERS
(
    ITBPARAMLIST    IN    ST_BCBACKGROUNDPROCESS.TYTBMETHODPARAMLIST
)
IS
    NUIDX           ST_BCBACKGROUNDPROCESS.STYPARAMLISTIDX;
    NUPLSINTVALUE   PLS_INTEGER;

BEGIN

    NUIDX := ITBPARAMLIST.FIRST;
    LOOP
        EXIT WHEN ( NUIDX IS NULL );
        
        IF (ITBPARAMLIST(NUIDX).PARAMETERTYPE IS NOT NULL) THEN

                CASE(ITBPARAMLIST(NUIDX).PARAMETERTYPE)
                    WHEN CNUDTY_TRACKING    THEN ST_BOBATCHJOBSSERVICES.ADDTRACKBASEPARAM(ITBPARAMLIST(NUIDX).PARAMETERVALUE);
                    WHEN CNUDTY_VARCHAR2    THEN ST_BOBATCHJOBSSERVICES.ADDPARAMETER(ITBPARAMLIST(NUIDX).PARAMETERVALUE);
                    WHEN CNUDTY_NUMBER      THEN
                        CASE (ITBPARAMLIST(NUIDX).PARAMETERVALUE)
                            WHEN CSBPARTITION THEN ST_BOBATCHJOBSSERVICES.ADDCURRENTTHREADPAR;
                            WHEN CSBTOTAL     THEN ST_BOBATCHJOBSSERVICES.ADDTOTALTHREADSPARAM;
                            ELSE ST_BOBATCHJOBSSERVICES.ADDPARAMETER(TO_NUMBER(ITBPARAMLIST(NUIDX).PARAMETERVALUE));
                        END CASE;
                    WHEN CNUDTY_PLS_INTEGER THEN
                        CASE (ITBPARAMLIST(NUIDX).PARAMETERVALUE)
                            WHEN CSBPARTITION THEN ST_BOBATCHJOBSSERVICES.ADDCURRENTTHREADPAR;
                            WHEN CSBTOTAL     THEN ST_BOBATCHJOBSSERVICES.ADDTOTALTHREADSPARAM;
                            ELSE
                                NUPLSINTVALUE := TO_NUMBER(ITBPARAMLIST(NUIDX).PARAMETERVALUE);
                                ST_BOBATCHJOBSSERVICES.ADDPARAMETER(NUPLSINTVALUE);
                        END CASE;
                    WHEN CNUDTY_DATE        THEN ST_BOBATCHJOBSSERVICES.ADDPARAMETER(TO_DATE(ITBPARAMLIST(NUIDX).PARAMETERVALUE,CSBDATEFORMAT));
                    ELSE NULL;
                END CASE;
        ELSE
            
            ST_BOBATCHJOBSSERVICES.ADDPARAMETER(ITBPARAMLIST(NUIDX).PARAMETERVALUE);
        END IF;



        NUIDX := ITBPARAMLIST.NEXT( NUIDX );
    END LOOP;


EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
        UT_TRACE.TRACE('Exception in [SetJobParameters]',CNUREGULAR_TRC_LEVEL);
        RAISE;
    WHEN OTHERS THEN
        UT_TRACE.TRACE('Others exception in [SetJobParameters]',CNUREGULAR_TRC_LEVEL);
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE;
END SETJOBPARAMETERS;







BEGIN

    SETPROCESSSTG(NULL);


END ST_BOBACKGROUNDPROCESS;