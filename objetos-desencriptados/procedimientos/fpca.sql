
CREATE OR REPLACE PROCEDURE FPCA( INUIDPROGPROCESO IN GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE )
 IS
   CSBRUTA_TRAZA CONSTANT PARAMETR.PAMECODI%TYPE := 'RUTA_TRAZA';
   CSBRUTA_REPORTES_SQL CONSTANT PARAMETR.PAMECODI%TYPE := 'RUTA_REPORTES_SQL';
   CSBDIRECTORIO_TEMPORAL CONSTANT PARAMETR.PAMECODI%TYPE := '/tmp';
   RCUSUARIO DASA_USER.STYSA_USER;
   SBRUTAREPORTESSQL PARAMETR.PAMECHAR%TYPE;
   RCPROGPROCESO DAGE_PROCESS_SCHEDULE.STYGE_PROCESS_SCHEDULE;
   SBIDESTADOCORTE GE_BOINSTANCECONTROL.STYSBVALUE;
   SBIDCICLO GE_BOINSTANCECONTROL.STYSBVALUE;
   SBIDCAUSA GE_BOINSTANCECONTROL.STYSBVALUE;
   SBIDPRODUCTO GE_BOINSTANCECONTROL.STYSBVALUE;
   SBOBSERVACION GE_BOINSTANCECONTROL.STYSBVALUE;
   SBCADENACONEXION GE_BOINSTANCECONTROL.STYSBVALUE;
   SBPARAMETROSPROCESO VARCHAR2( 10000 );
   SBRUTATRAZAPROCESO PARAMETR.PAMECHAR%TYPE;
   SBRUTAREPORTES SA_USER.PATH_REPORT%TYPE;
   NUCODIGOERROR MENSAJE.MENSCODI%TYPE;
   SBMENSAJEERROR MENSAJE.MENSDESC%TYPE;
   SBMENSERRORACLE GE_ERROR_LOG.DESCRIPTION%TYPE;
 BEGIN
   UT_TRACE.TRACE( 'Inicio: [FPCA]' );
   GE_BOSCHEDULE.INSTANCESCHEDULE( INUIDPROGPROCESO );
   RCPROGPROCESO := DAGE_PROCESS_SCHEDULE.FRCGETRECORD( INUIDPROGPROCESO );
   SBIDESTADOCORTE := UT_STRING.GETPARAMETERVALUE( RCPROGPROCESO.PARAMETERS_, 'COECCODI', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
   SBIDCICLO := UT_STRING.GETPARAMETERVALUE( RCPROGPROCESO.PARAMETERS_, 'CICLCODI', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
   SBIDCAUSA := UT_STRING.GETPARAMETERVALUE( RCPROGPROCESO.PARAMETERS_, 'CACDCODI', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
   SBIDPRODUCTO := UT_STRING.GETPARAMETERVALUE( RCPROGPROCESO.PARAMETERS_, 'SESUNUSE', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
   SBOBSERVACION := UT_STRING.GETPARAMETERVALUE( RCPROGPROCESO.PARAMETERS_, 'SUCOOBSE', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
   SBCADENACONEXION := UT_STRING.GETPARAMETERVALUE( RCPROGPROCESO.PARAMETERS_, 'CONNECTION_STRING', GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS, GE_BOSCHEDULE.CSBSEPARADOR_VALORES );
   SBPARAMETROSPROCESO := SBIDESTADOCORTE || GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS || SBIDCICLO || GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS || SBIDCAUSA || GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS || SBIDPRODUCTO || GE_BOSCHEDULE.CSBSEPARADOR_PARAMETROS;
   RCUSUARIO := DASA_USER.FRCGETRECORD( SA_BOUSER.FNUGETUSERID( NULL ) );
   SBRUTATRAZAPROCESO := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE( CSBRUTA_TRAZA );
   SBRUTAREPORTESSQL := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE( CSBRUTA_REPORTES_SQL );
   IF ( SBRUTATRAZAPROCESO IS NULL ) THEN
      SBRUTATRAZAPROCESO := CSBDIRECTORIO_TEMPORAL;
   END IF;
   SBRUTAREPORTES := RCUSUARIO.PATH_REPORT;
   UT_TRACE.TRACE( CHR( 9 ) || 'Parametros del Proceso: [' || SBPARAMETROSPROCESO || ']' );
   UT_TRACE.TRACE( CHR( 9 ) || CHR( 9 ) || 'COECCODI=' || SBIDESTADOCORTE );
   UT_TRACE.TRACE( CHR( 9 ) || CHR( 9 ) || 'CICLCODI=' || SBIDCICLO );
   UT_TRACE.TRACE( CHR( 9 ) || CHR( 9 ) || 'CACDCODI=' || SBIDCAUSA );
   UT_TRACE.TRACE( CHR( 9 ) || CHR( 9 ) || 'SESUNUSE=' || SBIDPRODUCTO );
   UT_TRACE.TRACE( CHR( 9 ) || CHR( 9 ) || 'SUCOOBSE=' || SBOBSERVACION );
   UT_TRACE.TRACE( CHR( 9 ) || CHR( 9 ) || 'CONNECTION_STRING=' || SBCADENACONEXION );
   UT_TRACE.TRACE( CHR( 9 ) || 'Ruta de la traza de ejecucion del proceso: [' || SBRUTATRAZAPROCESO || ']' );
   UT_TRACE.TRACE( CHR( 9 ) || 'Ruta de los reportes: [' || SBRUTAREPORTES || ']' );
   PKSUSPCONNSERVICE.EXESUSPECONNEEVENT( SBPARAMETROSPROCESO, SBOBSERVACION, SBCADENACONEXION, SBRUTATRAZAPROCESO, SBRUTAREPORTESSQL, SBRUTAREPORTES, NUCODIGOERROR, SBMENSAJEERROR );
   UT_TRACE.TRACE( 'Fin: [FPCA]' );
 EXCEPTION
   WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
      UT_TRACE.TRACE( 'Error controlado [FPCA]' );
      RAISE;
   WHEN OTHERS THEN
      PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBMENSERRORACLE );
      UT_TRACE.TRACE( 'Error no controlado [FPCA]' );
      RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBMENSERRORACLE );
END FPCA;
/


