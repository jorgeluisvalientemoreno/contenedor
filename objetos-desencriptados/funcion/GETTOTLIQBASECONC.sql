
CREATE OR REPLACE FUNCTION GETTOTLIQBASECONC
 RETURN NUMBER
 IS
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   RCPRODUCT SERVSUSC%ROWTYPE;
   NUCONSPERIOD PERICOSE.PECSCONS%TYPE;
   RCCURRENTBILLPERIOD PERIFACT%ROWTYPE;
   NUCONCEPT CONCEPTO.CONCCODI%TYPE;
   NUTOTAL NUMBER;
   PROCEDURE GETINSTANCEDATA
    IS
    BEGIN
      PKERRORS.PUSH( 'GetTotLiqBaseConc.Process' );
      PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD( RCPRODUCT );
      PKINSTANCEDATAMGR.GETCG_CONSUMPERIOD( NUCONSPERIOD );
      PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD( RCCURRENTBILLPERIOD );
      PKINSTANCEDATAMGR.GETCG_CONCEPT( NUCONCEPT );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END GETINSTANCEDATA;
   PROCEDURE PROCESS
    IS
    BEGIN
      PKERRORS.PUSH( 'GetTotLiqBaseConc.Process' );
      NUTOTAL := FA_BOSERVICIOSLIQPORPRODUCTO.FNUGETTOTLIQBASECONC( RCPRODUCT, RCCURRENTBILLPERIOD, NUCONCEPT, NUCONSPERIOD );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PROCESS;
 BEGIN
   PKERRORS.PUSH( 'GetTotLiqBaseConc' );
   GETINSTANCEDATA;
   PROCESS;
   PKERRORS.POP;
   RETURN NVL( NUTOTAL, 0 );
 EXCEPTION
   WHEN OTHERS THEN
      PKERRORS.POP;
      RAISE;
END GETTOTLIQBASECONC;
/


