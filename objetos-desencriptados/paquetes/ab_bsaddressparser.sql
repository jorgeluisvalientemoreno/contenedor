CREATE OR REPLACE PACKAGE BODY AB_BSADDRESSPARSER IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO161059';
   CNUTABLEPARAMETER CONSTANT NUMBER := 662;
   CNUINSERT_SUCCESS CONSTANT NUMBER := 3015;
   CNURECORD_ALREADY_EXIST CONSTANT NUMBER := CONSTANTS.CNURECORD_ALREADY_EXIST;
   CNUMINUS_ONE_NOT_EXIST CONSTANT NUMBER := -1;
   CNUNOWAIT CONSTANT NUMBER( 1 ) := 1;
   NUESTATENUMBER_SET AB_ADDRESS.ESTATE_NUMBER%TYPE := NULL;
   BLEXISTADDRESS BOOLEAN := FALSE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE INITGLOBAL
    IS
    BEGIN
      NUESTATENUMBER_SET := NULL;
      BLEXISTADDRESS := FALSE;
   END;
   PROCEDURE SETEXISTADDRESS( IBLEXISTADDRESS IN BOOLEAN )
    IS
    BEGIN
      BLEXISTADDRESS := IBLEXISTADDRESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETEXISTADDRESS;
   FUNCTION FBLGETEXISTADDRESS
    RETURN BOOLEAN
    IS
    BEGIN
      RETURN BLEXISTADDRESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLGETEXISTADDRESS;
   PROCEDURE INITIALIZEOUTPUT( ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      ONUERRORCODE := CONSTANTS.CNUSUCCESS;
      OSBERRORMESSAGE := GE_BOCONSTANTS.CSBNOMESSAGE;
   END;
   PROCEDURE CHECKSYNTAX( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      SBADDRESSPARSED AB_ADDRESS.ADDRESS_PARSED%TYPE;
      PROCEDURE RUNPROCESS
       IS
       BEGIN
         DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
         AB_BOADDRESS.VALADDRESSISNOTNULL( ISBADDRESS );
         AB_BOADDRESSPARSER.CHECKSYNTAX( ISBADDRESS, INUGEOLOCATIONID, SBADDRESSPARSED );
      END;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      RUNPROCESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END;
   PROCEDURE CHECKIFADDRESSEXISTSINDB( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ONUPARSER_ID OUT AB_ADDRESS.ADDRESS_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      PROCEDURE RUNPROCESS
       IS
         NUPARSERID AB_ADDRESS.ADDRESS_ID%TYPE;
         NUERROR NUMBER;
         SBMESSAGE VARCHAR2( 2000 );
       BEGIN
         DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
         AB_BOADDRESS.VALADDRESSISNOTNULL( ISBADDRESS );
         NUPARSERID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBADDRESS, INUGEOLOCATIONID, ONUERRORCODE, OSBERRORMESSAGE );
         UT_JAVA.VALIDATEERROR( NVL( ONUERRORCODE, 0 ), OSBERRORMESSAGE );
         IF ( NUPARSERID != CNUMINUS_ONE_NOT_EXIST ) THEN
            ONUPARSER_ID := NUPARSERID;
            ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, DAGE_MESSAGE.FSBGETDESCRIPTION( CNUTABLEPARAMETER ) );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      RUNPROCESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END CHECKIFADDRESSEXISTSINDB;
   PROCEDURE INSERTADDRESS( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUPARSER_ID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, OSBSUCCESSMESSAGE OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2, ISBISURBAN IN VARCHAR2 )
    IS
      PROCEDURE RUNPROCESS
       IS
         NUESTATENUMBER NUMBER;
         NUZIPCODE NUMBER;
       BEGIN
         DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
         AB_BOADDRESS.VALADDRESSISNOTNULL( ISBADDRESS );
         AB_BOADDRESS.VALDUPMAINADDRESS( INUGEOLOCATIONID, ISBADDRESS );
         ONUPARSER_ID := AB_BOSEQUENCE.FNUNEXTADDRESS;
         AB_BOADDRESSPARSER.INSERTADDRESS( ISBADDRESS, INUGEOLOCATIONID, ONUPARSER_ID, INUNEIGHBORTID, OSBADDRESSPARSED, ONUERRORCODE, OSBERRORMESSAGE, ISBISURBAN );
         UT_JAVA.VALIDATEERROR( NVL( ONUERRORCODE, 0 ), OSBERRORMESSAGE );
         DAAB_ADDRESS.UPDZIP_CODE_ID( ONUPARSER_ID, NUZIPCODE );
         DAAB_ADDRESS.UPDIS_MAIN( ONUPARSER_ID, GE_BOCONSTANTS.CSBYES );
         OSBSUCCESSMESSAGE := GE_BOMESSAGE.FSBGETMESSAGE( CNUINSERT_SUCCESS, OSBADDRESSPARSED );
      END RUNPROCESS;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      RUNPROCESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END INSERTADDRESS;
   PROCEDURE INSERTADDRESS( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE, INUNEIGHBORTID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ONUIPARSER_ID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, OSBSUCCESSMESSAGE OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2, ISBISURBAN IN VARCHAR2 )
    IS
      NUERRORMESSAGE NUMBER;
      SBMESSAGEARGUMENT VARCHAR2( 2000 );
      PROCEDURE RUNPROCESS
       IS
         NUESTATENUMBER NUMBER;
         NUZIPCODE NUMBER;
       BEGIN
         DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATIONID );
         AB_BOADDRESS.VALESTATENOTNULL( INUESTATENUMBER );
         AB_BOADDRESS.VALADDRESSISNOTNULL( ISBADDRESS );
         AB_BOADDRESS.VALDUPESTATEADDRESS( INUGEOLOCATIONID, ISBADDRESS, INUESTATENUMBER );
         ONUIPARSER_ID := AB_BOSEQUENCE.FNUNEXTADDRESS;
         AB_BOADDRESSPARSER.INSERTADDRESS( ISBADDRESS, INUGEOLOCATIONID, ONUIPARSER_ID, INUNEIGHBORTID, OSBADDRESSPARSED, ONUERRORCODE, OSBERRORMESSAGE, ISBISURBAN );
         UT_JAVA.VALIDATEERROR( NVL( ONUERRORCODE, 0 ), OSBERRORMESSAGE );
         DAAB_ADDRESS.UPDZIP_CODE_ID( ONUIPARSER_ID, NUZIPCODE );
         DAAB_ADDRESS.UPDESTATE_NUMBER( ONUIPARSER_ID, INUESTATENUMBER );
         DAAB_ADDRESS.UPDIS_MAIN( ONUIPARSER_ID, GE_BOCONSTANTS.CSBNO );
         AB_BOADDRESS.UPDINITCOUNTERLINES( ONUIPARSER_ID );
         OSBSUCCESSMESSAGE := GE_BOMESSAGE.FSBGETMESSAGE( CNUINSERT_SUCCESS, OSBADDRESSPARSED );
      END;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      RUNPROCESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END INSERTADDRESS;
   PROCEDURE INSERTADDRESSONNOTFOUND( INUGEOGRAPLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, OSBSUCCESSMESSAGE OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBISURBAN IN VARCHAR2 := NULL )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      NUZIPCODE NUMBER;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BSAddressParser.InsertAddressOnNotFound. Dirección:[' || ISBADDRESS || ']', 2 );
      UT_TRACE.TRACE( 'Ubicación:[' || INUGEOGRAPLOCATIONID || ']', 3 );
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      INITGLOBAL;
      DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOGRAPLOCATIONID );
      AB_BOADDRESS.VALADDRESSISNOTNULL( ISBADDRESS );
      ONUADDRESSID := AB_BOADDRESSPARSER.CHECKIFADDRESSEXISTSINDB( ISBADDRESS, INUGEOGRAPLOCATIONID );
      UT_TRACE.TRACE( 'Id Dirección:[' || ONUADDRESSID || ']', 3 );
      IF ONUADDRESSID != CNUMINUS_ONE_NOT_EXIST THEN
         RCADDRESS := DAAB_ADDRESS.FRCGETRECORD( ONUADDRESSID );
         OSBADDRESSPARSED := RCADDRESS.ADDRESS_PARSED;
         UT_TRACE.TRACE( 'Dirección Parseada:[' || OSBADDRESSPARSED || ']', 3 );
         SETEXISTADDRESS( TRUE );
         RETURN;
      END IF;
      AB_BOADDRESSPARSER.INSERTADDRESSONNOTFOUND( ISBADDRESS, INUGEOGRAPLOCATIONID, INUNEIGHBORTHOODID, ONUADDRESSID, OSBADDRESSPARSED, ISBISURBAN );
      UT_JAVA.VALIDATEERROR( NVL( ONUERRORCODE, 0 ), OSBERRORMESSAGE );
      UT_TRACE.TRACE( 'Nuevo Id Dirección:[' || ONUADDRESSID || ']', 3 );
      RCADDRESS := DAAB_ADDRESS.FRCGETRECORD( ONUADDRESSID );
      IF RCADDRESS.ZIP_CODE_ID IS NULL THEN
         RCADDRESS.ZIP_CODE_ID := NUZIPCODE;
      END IF;
      RCADDRESS.IS_MAIN := GE_BOCONSTANTS.CSBYES;
      DAAB_ADDRESS.UPDRECORD( RCADDRESS, CNUNOWAIT );
      OSBSUCCESSMESSAGE := GE_BOMESSAGE.FSBGETMESSAGE( CNUINSERT_SUCCESS, OSBADDRESSPARSED );
      UT_TRACE.TRACE( 'Finaliza AB_BSAddressParser.InsertAddressOnNotFound', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END INSERTADDRESSONNOTFOUND;
   PROCEDURE GETADDRESSSEGMENT( ISBADDRESS IN VARCHAR2, INUGEOLOCATION IN NUMBER, ONUSEGMENTID OUT NUMBER, ONUHOUSENUMBER OUT NUMBER, OSBADDRESSSEGMENT OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR )
    IS
      PROCEDURE RUNPROCESS
       IS
       BEGIN
         DAGE_GEOGRA_LOCATION.ACCKEY( INUGEOLOCATION );
         AB_BOADDRESS.VALADDRESSISNOTNULL( ISBADDRESS );
         AB_BOADDRESSPARSER.GETADDRESSSEGMENT( ISBADDRESS, INUGEOLOCATION, ONUSEGMENTID, ONUHOUSENUMBER, OSBADDRESSSEGMENT, ONUERRORCODE, OSBERRORMESSAGE );
         UT_JAVA.VALIDATEERROR( NVL( ONUERRORCODE, 0 ), OSBERRORMESSAGE );
      END;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      RUNPROCESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETADDRESSSEGMENT;
   PROCEDURE SETSTATENUMBER( INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE )
    IS
    BEGIN
      NUESTATENUMBER_SET := INUESTATENUMBER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETSTATENUMBER;
   PROCEDURE INSADDRESSONNOTFOUNDESTATNUMB( INUGEOLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUESTATENUMBER IN AB_ADDRESS.ESTATE_NUMBER%TYPE, ONUPARSERID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, OSBSUCCESSMESSAGE OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE := NULL, ISBISURBAN IN VARCHAR2 := NULL )
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BSAddressParser.InsAddressOnNotFoundEstatNumb. Dirección:[' || ISBADDRESS || ']', 1 );
      UT_TRACE.TRACE( 'Ubicación:[' || INUGEOLOCATIONID || ']Predio:[' || INUESTATENUMBER || ']', 2 );
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      INITGLOBAL;
      SETSTATENUMBER( INUESTATENUMBER );
      IF ( NVL( INUESTATENUMBER, -1 ) != -1 ) THEN
         DAAB_PREMISE.ACCKEY( INUESTATENUMBER );
      END IF;
      INSERTADDRESSONNOTFOUND( INUGEOLOCATIONID, ISBADDRESS, ONUPARSERID, OSBADDRESSPARSED, OSBSUCCESSMESSAGE, ONUERRORCODE, OSBERRORMESSAGE, INUNEIGHBORTHOODID, ISBISURBAN );
      IF ONUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS THEN
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( FBLGETEXISTADDRESS AND ( NVL( INUESTATENUMBER, -1 ) != -1 ) ) THEN
         UT_TRACE.TRACE( 'Actualiza el predio en la dirección si es diferente. Dirección[' || ONUPARSERID || ']Predio:[' || INUESTATENUMBER || ']', 2 );
         AB_BOADDRESS.UPDESTATENUMBER( ONUPARSERID, INUESTATENUMBER );
      END IF;
      INITGLOBAL;
      UT_TRACE.TRACE( 'Finaliza AB_BSAddressParser.InsAddressOnNotFoundEstatNumb', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         INITGLOBAL;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         INITGLOBAL;
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END INSADDRESSONNOTFOUNDESTATNUMB;
   PROCEDURE SPLITADDRESS( ISBADDRESS IN VARCHAR2, INUGEOLOCATION IN NUMBER, OSBADDRESSPARSED OUT VARCHAR2, ONUWAYID OUT NUMBER, ONUWAYTYPE OUT NUMBER, ONUWAYNUMBER OUT NUMBER, OSBWAYLETTER OUT VARCHAR2, OSBWAYGEOSECTOR OUT VARCHAR2, ONUCROSSWAYID OUT NUMBER, ONUCROSSWAYTYPE OUT NUMBER, ONUCROSSWAYNUMBER OUT NUMBER, OSBCROSSWAYLETTER OUT VARCHAR2, OSBCROSSWAYGEOSECTOR OUT VARCHAR2, OSBISURBAN OUT VARCHAR2, ONUHOUSENUMBER OUT NUMBER, OSBHOUSELETTER OUT VARCHAR2, OSBADDRESSCOMPLEMENT OUT VARCHAR2, OSBSEGMENTDESC OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      AB_BOADDRESSPARSER.SPLITADDRESS( ISBADDRESS, INUGEOLOCATION, OSBADDRESSPARSED, ONUWAYID, ONUWAYTYPE, ONUWAYNUMBER, OSBWAYLETTER, OSBWAYGEOSECTOR, ONUCROSSWAYID, ONUCROSSWAYTYPE, ONUCROSSWAYNUMBER, OSBCROSSWAYLETTER, OSBCROSSWAYGEOSECTOR, OSBISURBAN, ONUHOUSENUMBER, OSBHOUSELETTER, OSBADDRESSCOMPLEMENT, OSBSEGMENTDESC, ONUERRORCODE, OSBERRORMESSAGE );
      UT_JAVA.VALIDATEERROR( NVL( ONUERRORCODE, 0 ), OSBERRORMESSAGE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END SPLITADDRESS;
   PROCEDURE GETALL_WAY_TYPES( OCUWAY_TYPE OUT CONSTANTS.TYREFCURSOR, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      OCUWAY_TYPE := AB_BOADDRESS.FRFGETALL_WAY_TYPES;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETALL_WAY_TYPES;
   PROCEDURE INSERTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, ONUWAY_BY_LOCATION_ID OUT AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      SBDESCRIPTION AB_WAY_BY_LOCATION.DESCRIPTION%TYPE;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      SBDESCRIPTION := DAAB_WAY_TYPE.FSBGETDESCRIPTION( INUWAY_TYPE ) || ' ' || TO_CHAR( INUWAY_NUMBER );
      IF ( ISBLETTERS_WAY IS NOT NULL ) THEN
         SBDESCRIPTION := SBDESCRIPTION || ' ' || ISBLETTERS_WAY;
      END IF;
      AB_BOADDRESS.INSERTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUWAY_TYPE, SBDESCRIPTION, INUWAY_NUMBER, ISBLETTERS_WAY, ONUWAY_BY_LOCATION_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END INSERTWAYBYLOCATION;
   PROCEDURE INSERTSEGMENT( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, INUCROSS_WAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, INUCROSS_WAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBCROSS_LETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, INUNEIGHBORTHOODID IN AB_SEGMENTS.NEIGHBORHOOD_ID%TYPE, ONUSEGMENT_ID OUT AB_SEGMENTS.SEGMENTS_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      AB_BOADDRESS.INSERTSEGMENT( INUGEOGRAP_LOCATION_ID, INUWAY_TYPE, INUWAY_NUMBER, ISBLETTERS_WAY, INUCROSS_WAY_TYPE, INUCROSS_WAY_NUMBER, ISBCROSS_LETTERS_WAY, INUNEIGHBORTHOODID, ONUSEGMENT_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END INSERTSEGMENT;
   PROCEDURE INSERTSEGMENT( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_BY_LOCATION_ID IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, INUCROSS_WAY_BY_LOCATION_ID IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, INUNEIGHBORTHOODID IN AB_SEGMENTS.NEIGHBORHOOD_ID%TYPE, ONUSEGMENT_ID OUT AB_SEGMENTS.SEGMENTS_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      NUWAY_TYPE AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE;
      NUWAY_NUMBER AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE;
      SBLETTERS_WAY AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE;
      NUCROSS_WAY_TYPE AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE;
      NUCROSS_WAY_NUMBER AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE;
      SBCROSS_LETTERS_WAY AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE;
      RCWAY_BY_LOCATION DAAB_WAY_BY_LOCATION.STYAB_WAY_BY_LOCATION;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      RCWAY_BY_LOCATION := DAAB_WAY_BY_LOCATION.FRCGETRECORD( INUWAY_BY_LOCATION_ID );
      NUWAY_TYPE := RCWAY_BY_LOCATION.WAY_TYPE_ID;
      NUWAY_NUMBER := RCWAY_BY_LOCATION.WAY_NUMBER;
      SBLETTERS_WAY := RCWAY_BY_LOCATION.LETTERS_WAY;
      RCWAY_BY_LOCATION := DAAB_WAY_BY_LOCATION.FRCGETRECORD( INUCROSS_WAY_BY_LOCATION_ID );
      NUCROSS_WAY_TYPE := RCWAY_BY_LOCATION.WAY_TYPE_ID;
      NUCROSS_WAY_NUMBER := RCWAY_BY_LOCATION.WAY_NUMBER;
      SBCROSS_LETTERS_WAY := RCWAY_BY_LOCATION.LETTERS_WAY;
      AB_BOADDRESS.INSERTSEGMENT( INUGEOGRAP_LOCATION_ID, NUWAY_TYPE, NUWAY_NUMBER, SBLETTERS_WAY, NUCROSS_WAY_TYPE, NUCROSS_WAY_NUMBER, SBCROSS_LETTERS_WAY, INUNEIGHBORTHOODID, ONUSEGMENT_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END INSERTSEGMENT;
   PROCEDURE GETALL_SYNONYM( INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, OCUSYNONYM OUT CONSTANTS.TYREFCURSOR, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      OPEN OCUSYNONYM FOR SELECT ab_way_synonym.way_id,  ab_synonym.description , ab_way_by_location.description way_desc, ab_way_domain.initial_way_id, ab_way_domain.final_way_id
            FROM ab_synonym, ab_way_synonym, ab_way_domain, ab_way_by_location
            WHERE   ab_synonym.geograp_location_id =  inuGeograp_Location_ID
              AND   ab_synonym.synonym_id = ab_way_synonym.synonym_id
              AND  ab_way_synonym.way_synonym_id = ab_way_domain.synonymous_id
              AND  ab_way_by_location.way_by_location_id = ab_way_synonym.way_id
            ORDER BY   ab_way_synonym.way_id ;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETALL_SYNONYM;
   PROCEDURE GETALL_CITY( OCULOCATION OUT CONSTANTS.TYREFCURSOR, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      OPEN OCULOCATION FOR SELECT ciudad.geograp_location_id ID, depa.description STATE, ciudad.description  CITY
            FROM ge_geogra_location ciudad, ge_geogra_location depa
            WHERE ciudad.geog_loca_area_type= 2
              AND ciudad.geo_loca_father_id = depa.geograp_location_id
            ORDER BY   depa.description, ciudad.description;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETALL_CITY;
   PROCEDURE DELETEWAYBYLOCATION( INUWAY_BY_LOCATION_ID IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      DAAB_WAY_BY_LOCATION.DELRECORD( INUWAY_BY_LOCATION_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END DELETEWAYBYLOCATION;
   PROCEDURE DELETESEGMENT( INUSEGMENT_ID IN AB_SEGMENTS.SEGMENTS_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      DAAB_SEGMENTS.DELRECORD( INUSEGMENT_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END DELETESEGMENT;
   PROCEDURE GETSEGMENTCROSSWAYID( INUSEGMENT_ID IN AB_SEGMENTS.SEGMENTS_ID%TYPE, ONUCROSSWAYID OUT AB_SEGMENTS.CROSS_WAY_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      ONUCROSSWAYID := DAAB_SEGMENTS.FNUGETCROSS_WAY_ID( INUSEGMENT_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETSEGMENTCROSSWAYID;
   PROCEDURE EXISTWAYBYLOCATION( INUWAY_BY_LOCATION_ID IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, INUGEOGRAP_LOCATION_ID IN AB_WAY_BY_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAY_TYPE IN AB_WAY_BY_LOCATION.WAY_TYPE_ID%TYPE, INUWAY_NUMBER IN AB_WAY_BY_LOCATION.WAY_NUMBER%TYPE, ISBLETTERS_WAY IN AB_WAY_BY_LOCATION.LETTERS_WAY%TYPE, ONUEXIST OUT NUMBER, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      NUWAY_BY_LOCATION_ID AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE;
      BLEXIST BOOLEAN;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      AB_BOADDRESS.EXISTWAYBYLOCATION( INUGEOGRAP_LOCATION_ID, INUWAY_TYPE, NULL, INUWAY_NUMBER, ISBLETTERS_WAY, BLEXIST, NUWAY_BY_LOCATION_ID );
      IF ( BLEXIST AND INUWAY_BY_LOCATION_ID = NUWAY_BY_LOCATION_ID ) THEN
         ONUEXIST := 1;
       ELSE
         ONUEXIST := 0;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END EXISTWAYBYLOCATION;
   PROCEDURE EXISTSEGMENT( INUSEGMENT_ID IN AB_SEGMENTS.SEGMENTS_ID%TYPE, INUGEOGRAP_LOCATION_ID IN AB_SEGMENTS.GEOGRAP_LOCATION_ID%TYPE, INUWAY_ID IN AB_SEGMENTS.WAY_ID%TYPE, INUCROSS_WAY_ID IN AB_SEGMENTS.CROSS_WAY_ID%TYPE, ONUEXIST OUT NUMBER, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      NUSEGMENT_ID AB_SEGMENTS.SEGMENTS_ID%TYPE;
      BLEXIST BOOLEAN;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      AB_BOSEGMENT.EXISTSEGMENTADDRESS( INUGEOGRAP_LOCATION_ID, INUWAY_ID, INUCROSS_WAY_ID, NULL, BLEXIST, NUSEGMENT_ID );
      IF ( BLEXIST AND INUSEGMENT_ID = NUSEGMENT_ID ) THEN
         ONUEXIST := 1;
       ELSE
         ONUEXIST := 0;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END EXISTSEGMENT;
   PROCEDURE GET_SYNONYMBYSEGMENT( INUSEGMENT_ID IN AB_SEGMENTS.SEGMENTS_ID%TYPE, OCUSYNONYM OUT CONSTANTS.TYREFCURSOR, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      OPEN OCUSYNONYM FOR SELECT ab_way_synonym.way_id, ab_synonym.description
            FROM ab_synonym,
                 ab_way_synonym,
                 ab_way_domain,
                 ab_way_by_location init_cross,
                 ab_way_by_location fin_cross,
                 ab_way_by_location segm_cross,
                 ab_segments
            WHERE  ab_synonym.synonym_id = ab_way_synonym.synonym_id
              AND  ab_way_synonym.way_synonym_id =ab_way_domain.synonymous_id
              AND ab_way_domain.initial_way_id =  init_cross.way_by_location_id
              AND ab_way_domain.final_way_id =  fin_cross.way_by_location_id
              AND ab_way_domain.way_domain_id = ab_segments.way_id
              AND ab_segments.cross_way_id = segm_cross.way_by_location_id
              AND ab_segments.segments_id = inuSegment_id
              AND segm_cross.way_number between  init_cross.way_number AND  fin_cross.way_number
            ORDER BY   ab_synonym.description;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END GET_SYNONYMBYSEGMENT;
   PROCEDURE GET_SYNONYMBYWAY( INUWAY_ID IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, OCUSYNONYM OUT CONSTANTS.TYREFCURSOR, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      OPEN OCUSYNONYM FOR SELECT ab_way_synonym.way_id, ab_synonym.description,  ab_way_domain.initial_way_id, ab_way_domain.final_way_id
            FROM ab_synonym,
                 ab_way_synonym,
                 ab_way_domain
            WHERE  ab_synonym.synonym_id = ab_way_synonym.synonym_id
              AND  ab_way_synonym.way_synonym_id =ab_way_domain.synonymous_id
              AND  ab_way_synonym.way_id =  inuWay_id
            ORDER BY   ab_synonym.description;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END GET_SYNONYMBYWAY;
   PROCEDURE ADDSYNONYMBYDOMAIN( INUMAINWAY IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, INUCROSSWAYINI IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, INUCROSSWAYEND IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, SBSYNONYMNAME IN AB_SYNONYM.DESCRIPTION%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
      NUSYNONYM_ID AB_SYNONYM.SYNONYM_ID%TYPE;
      NUWAY_SYNONYM_ID AB_WAY_SYNONYM.WAY_SYNONYM_ID%TYPE;
      NUWAY_DOMAIN_ID AB_WAY_DOMAIN.WAY_DOMAIN_ID%TYPE;
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      AB_BOADDRESS.ADDSYNONYMBYDOMAIN( INUMAINWAY, INUCROSSWAYINI, INUCROSSWAYEND, SBSYNONYMNAME );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END ADDSYNONYMBYDOMAIN;
   PROCEDURE DELETESYNONYMBYWAY( INUMAINWAY IN AB_WAY_BY_LOCATION.WAY_BY_LOCATION_ID%TYPE, SBSYNONYMNAME IN AB_SYNONYM.DESCRIPTION%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      AB_BOADDRESS.DELETESYNONYMBYWAY( INUMAINWAY, SBSYNONYMNAME );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END DELETESYNONYMBYWAY;
   PROCEDURE GETWAYSYNONYM( INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE, ONUWAYSYNONYMID OUT AB_WAY_SYNONYM.WAY_SYNONYM_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      GE_BOUTILITIES.INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      AB_BOSYNONYM.GETWAYSYNONYM( INUADDRESSID, ONUWAYSYNONYMID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END;
   PROCEDURE GETSYNONYMBYWAY( INUGEOGRALOCATION IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE, INUWAYTYPE IN AB_ADDRESS.WAY_TYPE%TYPE, INUWAYNUMBER IN AB_ADDRESS.WAY_NUMBER%TYPE, ISBWAYLETTER IN AB_ADDRESS.WAY_LETTER%TYPE, ISBWAYGEOSECT IN AB_ADDRESS.WAY_GEO_SECTOR%TYPE, INUCROSSWAYTYPE IN AB_ADDRESS.CROSS_WAY_TYPE%TYPE, INUCROSSWAYNUMBER IN AB_ADDRESS.CROSS_WAY_NUMBER%TYPE, ISBCROSSWAYLETTER IN AB_ADDRESS.CROSS_WAY_LETTER%TYPE, ISBCROSSWAYGEOSECT IN AB_ADDRESS.CROSS_WAY_GEO_SECT%TYPE, ONUWAYSYNONYMID OUT AB_WAY_SYNONYM.WAY_SYNONYM_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      GE_BOUTILITIES.INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      AB_BOSYNONYM.GETSYNONYMBYWAY( INUGEOGRALOCATION, INUWAYTYPE, INUWAYNUMBER, ISBWAYLETTER, ISBWAYGEOSECT, INUCROSSWAYTYPE, INUCROSSWAYNUMBER, ISBCROSSWAYLETTER, ISBCROSSWAYGEOSECT, ONUWAYSYNONYMID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END;
   PROCEDURE GETSYNONYM( ISBCITY IN VARCHAR2, ISBSTATE IN VARCHAR2, ISBZIP IN VARCHAR2, OCUSYNONYM OUT CONSTANTS.TYREFCURSOR, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      GE_BOUTILITIES.INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      AB_BOADDRESSPARSER.GETSYNONYM( ISBCITY, ISBSTATE, ISBZIP, OCUSYNONYM );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END;
   PROCEDURE GETSYNONYM( INUGEOGRAPLOCATIONID IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE, OCUSYNONYM OUT CONSTANTS.TYREFCURSOR, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      GE_BOUTILITIES.INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      AB_BOADDRESSPARSER.GETSYNONYM( INUGEOGRAPLOCATIONID, OCUSYNONYM );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END;
   PROCEDURE CREAACTUALIZADIRECCION( INUGEOGRAPLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBISURBAN IN AB_ADDRESS.IS_URBAN%TYPE := NULL, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, OSBSUCCESSMESSAGE OUT VARCHAR2, ONUERRORCODE OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
      RCADDRESS DAAB_ADDRESS.STYAB_ADDRESS;
      NUZIPCODE NUMBER;
      BLCREARPREDIO BOOLEAN;
    BEGIN
      UT_TRACE.TRACE( 'Inicia AB_BSAddressParser.CreaActualizaDireccion. Dirección:[' || ISBADDRESS || ']', 2 );
      UT_TRACE.TRACE( 'Ubicación:[' || INUGEOGRAPLOCATIONID || ']', 3 );
      INITIALIZEOUTPUT( ONUERRORCODE, OSBERRORMESSAGE );
      INITGLOBAL;
      AB_BOADDRESSPARSER.CREAACTUALIZADIRECCION( INUGEOGRAPLOCATIONID, ISBADDRESS, INUNEIGHBORTHOODID, ISBISURBAN, ONUADDRESSID, OSBADDRESSPARSED );
      OSBSUCCESSMESSAGE := GE_BOMESSAGE.FSBGETMESSAGE( CNUINSERT_SUCCESS, OSBADDRESSPARSED );
      UT_TRACE.TRACE( 'Finaliza AB_BSAddressParser.CreaActualizaDireccion', 2 );
      ONUERRORCODE := 0;
      OSBERRORMESSAGE := '';
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERRORCODE, OSBERRORMESSAGE );
   END CREAACTUALIZADIRECCION;
   PROCEDURE INSERTADDRESSTRANSACTION( INUGEOGRAPLOCATIONID IN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE, ISBADDRESS IN AB_ADDRESS.ADDRESS%TYPE, ONUADDRESSID OUT AB_ADDRESS.ADDRESS_ID%TYPE, OSBADDRESSPARSED OUT AB_ADDRESS.ADDRESS_PARSED%TYPE, OSBSUCCESSMESSAGE OUT VARCHAR2, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2, INUNEIGHBORTHOODID IN AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE, ISBISURBAN IN VARCHAR2 := NULL )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      UT_TRACE.TRACE( 'Inicio AB_BSAddressParser.InsertAddressTransaction', 1 );
      AB_BSADDRESSPARSER.INSERTADDRESSONNOTFOUND( INUGEOGRAPLOCATIONID, ISBADDRESS, ONUADDRESSID, OSBADDRESSPARSED, OSBSUCCESSMESSAGE, ONUERRORCODE, OSBERRORMESSAGE, INUNEIGHBORTHOODID, ISBISURBAN );
      COMMIT;
      UT_TRACE.TRACE( 'Fin AB_BSAddressParser.InsertAddressTransaction', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSERTADDRESSTRANSACTION;
END AB_BSADDRESSPARSER;
/


