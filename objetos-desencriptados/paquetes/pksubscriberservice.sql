
CREATE OR REPLACE PACKAGE PKSUBSCRIBERSERVICE IS
   SBERRMSG VARCHAR2( 2000 );
   PROCEDURE REGISTER( INUSESUCODI IN SERVSUSC.SESUNUSE%TYPE, INUSESUSERV IN SERVSUSC.SESUSERV%TYPE, INUSESUSUSC IN SERVSUSC.SESUSUSC%TYPE, INUSESUCATE IN SERVSUSC.SESUCATE%TYPE, INUSESUSUCA IN SERVSUSC.SESUSUCA%TYPE, IDTSESUFEIN IN SERVSUSC.SESUFEIN%TYPE, INUSESUPLFA IN SERVSUSC.SESUPLFA%TYPE, ISBSESUIMLD IN SERVSUSC.SESUIMLD%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE, INUSESUESCO IN SERVSUSC.SESUESCO%TYPE := NULL, ISBSESUROGA IN SERVSUSC.SESUROGA%TYPE := NULL, ISBSESUROCA IN SERVSUSC.SESUCLPR%TYPE := NULL, INUSESUMULT IN SERVSUSC.SESUMULT%TYPE := 1, INUSESUCICO IN SERVSUSC.SESUCICO%TYPE := NULL, INUSESUCAIN IN SERVSUSC.SESUCAIN%TYPE := NULL, INUSESUDIAD IN SERVSUSC.SESUDIAD%TYPE := -1, INUSESULICR IN SERVSUSC.SESULICR%TYPE := NULL, ISBINSTSERVDEP IN VARCHAR2 := 'Y', INUPLANCOMSERVDEP IN NUMBER := NULL, IBLVALNULLAPPCAT IN BOOLEAN := TRUE, INUSESUSIST IN SERVSUSC.SESUSIST%TYPE := NULL );
   PROCEDURE UPSWITCH( INUSESUCODI IN SERVSUSC.SESUNUSE%TYPE, INUSESUCENT IN CENTRAL.CENTCODI%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE );
   PROCEDURE UPDATEINSTALLATIONDATE( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, IDTFECHAACT IN SERVSUSC.SESUFEIN%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE );
   PROCEDURE UPINSTALLEDCHARGE( INUSESUCODI IN SERVSUSC.SESUNUSE%TYPE, INUSESUCAIN IN SERVSUSC.SESUCAIN%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE );
   PROCEDURE UPDACTIVAMOBILELINE( INUPRODUCT IN SERVSUSC.SESUNUSE%TYPE, IDTACTIVATIONDATE IN SERVSUSC.SESUFEIN%TYPE, ISBPROGRAM IN HICAESCO.HCECPROG%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE );
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
END PKSUBSCRIBERSERVICE;
/


CREATE OR REPLACE PACKAGE BODY PKSUBSCRIBERSERVICE IS
   CSBDIVISION CONSTANT VARCHAR( 3 ) := PKCONSTANTE.CSBDIVISION;
   CSBMOD_CUS CONSTANT VARCHAR( 3 ) := PKCONSTANTE.CSBMOD_CUS;
   CSBMOD_EME CONSTANT VARCHAR( 3 ) := PKCONSTANTE.CSBMOD_EME;
   CSBMOD_SAT CONSTANT VARCHAR( 3 ) := PKCONSTANTE.CSBMOD_SAT;
   CNUNOCACHE CONSTANT VARCHAR( 1 ) := PKCONSTANTE.NOCACHE;
   CNUFECHINVA CONSTANT NUMBER := 10370;
   CNUFECHMAYO CONSTANT NUMBER := 4100;
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO150179';
   PROCEDURE VALIDREGDATE( IDTFECHREGI IN DATE );
   PROCEDURE VALIDREGDATE( IDTFECHREGI IN DATE )
    IS
      CNFECHA_MAYOR_SISTEMA CONSTANT NUMBER := 10034;
      CNFECHA_NULA CONSTANT NUMBER := 4113;
    BEGIN
      PKERRORS.PUSH( 'pkSubscriberService.ValidRegDate' );
      IF IDTFECHREGI IS NULL THEN
         PKERRORS.SETERRORCODE( CNFECHA_NULA );
         RAISE LOGIN_DENIED;
      END IF;
      IF IDTFECHREGI > SYSDATE THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_GRL, CNFECHA_MAYOR_SISTEMA );
         RAISE LOGIN_DENIED;
      END IF;
      PKGENERALSERVICES.VALDATEY2K( IDTFECHREGI );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE;
   END VALIDREGDATE;
   PROCEDURE REGISTER( INUSESUCODI IN SERVSUSC.SESUNUSE%TYPE, INUSESUSERV IN SERVSUSC.SESUSERV%TYPE, INUSESUSUSC IN SERVSUSC.SESUSUSC%TYPE, INUSESUCATE IN SERVSUSC.SESUCATE%TYPE, INUSESUSUCA IN SERVSUSC.SESUSUCA%TYPE, IDTSESUFEIN IN SERVSUSC.SESUFEIN%TYPE, INUSESUPLFA IN SERVSUSC.SESUPLFA%TYPE, ISBSESUIMLD IN SERVSUSC.SESUIMLD%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE, INUSESUESCO IN SERVSUSC.SESUESCO%TYPE := NULL, ISBSESUROGA IN SERVSUSC.SESUROGA%TYPE := NULL, ISBSESUROCA IN SERVSUSC.SESUCLPR%TYPE := NULL, INUSESUMULT IN SERVSUSC.SESUMULT%TYPE := 1, INUSESUCICO IN SERVSUSC.SESUCICO%TYPE := NULL, INUSESUCAIN IN SERVSUSC.SESUCAIN%TYPE := NULL, INUSESUDIAD IN SERVSUSC.SESUDIAD%TYPE := -1, INUSESULICR IN SERVSUSC.SESULICR%TYPE := NULL, ISBINSTSERVDEP IN VARCHAR2 := 'Y', INUPLANCOMSERVDEP IN NUMBER := NULL, IBLVALNULLAPPCAT IN BOOLEAN := TRUE, INUSESUSIST IN SERVSUSC.SESUSIST%TYPE := NULL )
    IS
      RCSERVSUSC SERVSUSC%ROWTYPE;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.Register.Initialize' );
         PKERRORS.INITIALIZE;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.Register.ClearMemory' );
         PKTBLSERVSUSC.CLEARMEMORY;
         PKTBLSERVICIO.CLEARMEMORY;
         PKTBLSUSCRIPC.CLEARMEMORY;
         PKTBLSUBCATEG.CLEARMEMORY;
         PKTBLCATEGORI.CLEARMEMORY;
         DAAB_ADDRESS.CLEARMEMORY;
         PKTBLPLANSUSC.CLEARMEMORY;
         DAGE_SUBSCRIPTION_TYPE.CLEARMEMORY;
         PKTBLSOCIO.CLEARMEMORY;
         PKTBLCENTRAL.CLEARMEMORY;
         PKTBLSISTEMA.CLEARMEMORY;
         PKERRORS.POP;
      END CLEARMEMORY;
      PROCEDURE VALISNOTNULL
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.Register.ValIsNotNull' );
         IF ( IDTSESUFEIN IS NOT NULL ) THEN
            VALIDREGDATE( IDTSESUFEIN );
         END IF;
         IF ( ISBSESUIMLD IS NOT NULL ) THEN
            PKGENERALSERVICES.VALIDATEYESORNOT( ISBSESUIMLD );
         END IF;
         IF ( INUSESUESCO IS NOT NULL ) THEN
            PKTBLESTACORT.ACCKEY( INUSESUESCO );
         END IF;
         IF ( INUSESUSIST IS NOT NULL ) THEN
            PKTBLSISTEMA.ACCKEY( INUSESUSIST );
         END IF;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE;
      END VALISNOTNULL;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.Register.ValInputData' );
         PKSERVICEMGR.VALBASICDATA( INUSESUSERV );
         PKSUBSCRIBERMGR.VALBASICDATA( INUSESUSUSC );
         IF ( IBLVALNULLAPPCAT ) THEN
            PKCATEGORYMGR.VALBASICDATA( INUSESUCATE );
            PKSUBCATEGORYMGR.VALBASICDATA( INUSESUCATE, INUSESUSUCA );
          ELSE
            PKCATEGORYMGR.VALIDATENULL( INUSESUCATE );
            PKSUBCATEGORYMGR.VALIDATENULL( INUSESUCATE, INUSESUSUCA );
         END IF;
         PKBILLINGPLANMGR.VALBASICDATA( INUSESUPLFA );
         VALISNOTNULL;
         IF ( NVL( INUSESUMULT, 0 ) < 1 ) THEN
            PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_BIL, 200058 );
            RAISE LOGIN_DENIED;
         END IF;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE;
      END VALINPUTDATA;
      PROCEDURE GENSERVSUBSCRIBER
       IS
         NUDISTADMIN SERVSUSC.SESUDIAD%TYPE;
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.Register.GenServSubscriber' );
         NUDISTADMIN := NVL( INUSESUDIAD, PKCONSTANTE.NULLNUM );
         PKSERVNUMBERMGR.GENSERVSUBSBASIC( INUSESUSERV, INUSESUSUSC, INUSESUCATE, INUSESUSUCA, IDTSESUFEIN, INUSESUPLFA, INUSESUCODI, ISBSESUIMLD, INUSESUESCO, ISBSESUROGA, ISBSESUROCA, INUSESUMULT, INUSESUCICO, INUSESUCAIN, NUDISTADMIN, INUSESULICR, INUSESUSIST );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE;
      END GENSERVSUBSCRIBER;
    BEGIN
      PKERRORS.PUSH( 'pkSubscriberService.Register' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA;
      GENSERVSUBSCRIBER;
      RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD( INUSESUCODI );
      IF ( ISBINSTSERVDEP = 'Y' ) THEN
         PKBODEPENDINGPRODUCT.CREATECORRELDEPENDINGPRODUCTS( RCSERVSUSC, INUPLANCOMSERVDEP );
      END IF;
      PKBODEPENDINGPRODUCT.CREATECORRELDEPENDINGPRODUCTS( RCSERVSUSC );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END REGISTER;
   PROCEDURE UPSWITCH( INUSESUCODI IN SERVSUSC.SESUNUSE%TYPE, INUSESUCENT IN CENTRAL.CENTCODI%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.INITIALIZE;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := NULL;
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.ClearMemory' );
         PKTBLSERVSUSC.CLEARMEMORY;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END CLEARMEMORY;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.ValInputData' );
         PKTBLSERVSUSC.ACCKEY( INUSESUCODI );
         PKTBLCENTRAL.ACCKEY( INUSESUCENT );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALINPUTDATA;
      PROCEDURE PROCESS
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.Process' );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END PROCESS;
    BEGIN
      PKERRORS.PUSH( 'pkSubscriberService.UpSwitch' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA;
      PROCESS;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END UPSWITCH;
   PROCEDURE UPINSTALLEDCHARGE( INUSESUCODI IN SERVSUSC.SESUNUSE%TYPE, INUSESUCAIN IN SERVSUSC.SESUCAIN%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.INITIALIZE;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := NULL;
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.UpInstalledCharge.ClearMemory' );
         PKTBLSERVSUSC.CLEARMEMORY;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END CLEARMEMORY;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.UpInstalledCharge.ValInputData' );
         PKTBLSERVSUSC.ACCKEY( INUSESUCODI );
         PKGENERALSERVICES.VALVALUEISPOSITIVE( INUSESUCAIN );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALINPUTDATA;
      PROCEDURE PROCESS
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.UpInstalledCharge.Process' );
         PKSERVNUMBERMGR.UPDATEINSTCHARGE( INUSESUCODI, INUSESUCAIN );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END PROCESS;
    BEGIN
      PKERRORS.PUSH( 'pkSubscriberService.UpInstalledCharge' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA;
      PROCESS;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END UPINSTALLEDCHARGE;
   PROCEDURE UPDATEINSTALLATIONDATE( INUSERVSUSC IN SERVSUSC.SESUNUSE%TYPE, IDTFECHAACT IN SERVSUSC.SESUFEIN%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      PROCEDURE INITIALIZE
       IS
       BEGIN
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKTBLSERVSUSC.CLEARMEMORY;
      END CLEARMEMORY;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.UpdateInstallationDate.ValInputData' );
         PKSERVNUMBERMGR.VALBASICDATA( INUSERVSUSC );
         VALIDREGDATE( IDTFECHAACT );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE;
      END VALINPUTDATA;
      PROCEDURE UPDATEDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.UpdateInstallationDate.UpdateData' );
         PKTBLSERVSUSC.UPINSTALLATIONDATE( INUSERVSUSC, IDTFECHAACT );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE;
      END UPDATEDATA;
    BEGIN
      PKERRORS.PUSH( 'pkSubscriberService.UpdateInstallationDate' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA;
      UPDATEDATA;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END UPDATEINSTALLATIONDATE;
   PROCEDURE UPDACTIVAMOBILELINE( INUPRODUCT IN SERVSUSC.SESUNUSE%TYPE, IDTACTIVATIONDATE IN SERVSUSC.SESUFEIN%TYPE, ISBPROGRAM IN HICAESCO.HCECPROG%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.MESSAGE_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.UpdActivaMobileLine.Initialize' );
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.SETAPPLICATION( ISBPROGRAM );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END INITIALIZE;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkSubscriberService.UpdActivaMobileLine.ValInputData' );
         PKSERVNUMBERMGR.VALBASICDATA( INUPRODUCT );
         PKSUBSCRIBERSERVICE.VALIDREGDATE( IDTACTIVATIONDATE );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALINPUTDATA;
    BEGIN
      PKERRORS.PUSH( 'pkSubscriberService.UpdActivaMobileLine' );
      INITIALIZE;
      VALINPUTDATA;
      PKSERVNUMBERMGR.UPDACTIVAMOBILELINE( INUPRODUCT, IDTACTIVATIONDATE );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END UPDACTIVAMOBILELINE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( CSBVERSION );
   END FSBVERSION;
END PKSUBSCRIBERSERVICE;
/


