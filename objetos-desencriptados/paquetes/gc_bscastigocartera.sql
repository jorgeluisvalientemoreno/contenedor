CREATE OR REPLACE PACKAGE BODY GC_BSCASTIGOCARTERA IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO193403';
   CSBNOMBRE_APP CONSTANT VARCHAR2( 6 ) := 'CASCA-';
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      PKERRORS.PUSH( 'GC_BSCastigoCartera.fsbVersion' );
      PKERRORS.POP;
      RETURN GC_BSCASTIGOCARTERA.CSBVERSION;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GC_BSCASTIGOCARTERA.SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GC_BSCASTIGOCARTERA.SBERRMSG );
   END;
   PROCEDURE PORTFOLIOPUNISHMENT( INUPROYECTO IN GC_PROYCAST.PRCACONS%TYPE, ISBFRECUENCIA IN GE_PROCESS_SCHEDULE.FREQUENCY%TYPE, INUTHREADNUMBER IN NUMBER, INUTHREAD IN NUMBER, ISBESTAPROG IN ESTAPROG.ESPRPROG%TYPE )
    IS
      NUERRORCODE GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
      SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
      DTFECHAPROCESO DATE;
      CSBFORMATO_FECHA CONSTANT VARCHAR2( 10 ) := 'DD-MM-YYYY';
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'GC_BSCastigoCartera.PortfolioPunishment.Initialize' );
         PKERRORS.SETAPPLICATION( GC_BSCASTIGOCARTERA.CSBNOMBRE_APP || INUTHREAD );
         PKERRORS.INITIALIZE;
         NUERRORCODE := PKCONSTANTE.EXITO;
         SBERRORMESSAGE := PKCONSTANTE.NULLSB;
         DTFECHAPROCESO := TRUNC( SYSDATE, 'MM' ) - 1;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GC_BSCASTIGOCARTERA.SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GC_BSCASTIGOCARTERA.SBERRMSG );
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'GC_BSCastigoCartera.PortfolioPunishment.ClearMemory' );
         PKTBLESTAPROG.CLEARMEMORY;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GC_BSCASTIGOCARTERA.SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GC_BSCASTIGOCARTERA.SBERRMSG );
      END;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'GC_BSCastigoCartera.PortfolioPunishment.ValInputData' );
         PKSTATUSEXEPROGRAMMGR.VALIDATERECORDAT( ISBESTAPROG );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GC_BSCASTIGOCARTERA.SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GC_BSCASTIGOCARTERA.SBERRMSG );
      END VALINPUTDATA;
      PROCEDURE VALBASICDATA
       IS
         CSBOBJECTO CONSTANT VARCHAR2( 100 ) := 'GC_BSCastigoCartera.PortfolioPunishment';
       BEGIN
         PKERRORS.PUSH( 'GC_BSCastigoCartera.PortfolioPunishment.ValBasicData' );
         PKBOPROCESSCONCURRENCECTRL.GENCONTROLPROCESSAT( TO_CHAR( DTFECHAPROCESO, CSBFORMATO_FECHA ), CSBOBJECTO );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GC_BSCASTIGOCARTERA.SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GC_BSCASTIGOCARTERA.SBERRMSG );
      END VALBASICDATA;
      PROCEDURE PROCESS
       IS
         NUTOTALPROCESAR NUMBER := 0;
       BEGIN
         PKERRORS.PUSH( 'GC_BSCastigoCartera.PortfolioPunishment.Process' );
         NUTOTALPROCESAR := GC_BOCASTIGOCARTERA.FNUGETSUBSCRIBERSTOPROCESS( INUPROYECTO, INUTHREADNUMBER, INUTHREAD );
         PKSTATUSEXEPROGRAMMGR.VALIDATERECORDAT( ISBESTAPROG );
         PKSTATUSEXEPROGRAMMGR.UPSTATUSEXEPROGRAMAT( ISBESTAPROG, 'Inicio proceso Castigo de Cartera', NUTOTALPROCESAR, PKBILLCONST.CERO );
         IF ( NUTOTALPROCESAR > PKBILLCONST.CERO ) THEN
            GC_BOCASTIGOCARTERA.PUNISHSUBSCRIPTIONS( INUPROYECTO, INUTHREADNUMBER, INUTHREAD, ISBESTAPROG );
         END IF;
         PKSTATUSEXEPROGRAMMGR.PROCESSFINISHOKAT( ISBESTAPROG );
         PKERRORS.SETAPPLICATION( GC_BSCASTIGOCARTERA.CSBNOMBRE_APP || INUTHREAD );
         PKBOPROCESSCONCURRENCECTRL.FINCONCURRENCECONTROL( TO_CHAR( DTFECHAPROCESO, CSBFORMATO_FECHA ) );
         PKGENERALSERVICES.COMMITTRANSACTION;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GC_BSCASTIGOCARTERA.SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GC_BSCASTIGOCARTERA.SBERRMSG );
      END PROCESS;
    BEGIN
      PKERRORS.PUSH( 'GC_BSCastigoCartera.PortfolioPunishment' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA;
      VALBASICDATA;
      PROCESS;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( NUERRORCODE, SBERRORMESSAGE );
         PKSTATUSEXEPROGRAMMGR.PROCESSFINISHNOKAT( ISBESTAPROG, SBERRORMESSAGE );
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( NUERRORCODE, SBERRORMESSAGE );
         PKSTATUSEXEPROGRAMMGR.PROCESSFINISHNOKAT( ISBESTAPROG, SBERRORMESSAGE );
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GC_BSCASTIGOCARTERA.SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( NUERRORCODE, SBERRORMESSAGE );
         PKSTATUSEXEPROGRAMMGR.PROCESSFINISHNOKAT( ISBESTAPROG, SBERRORMESSAGE );
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GC_BSCASTIGOCARTERA.SBERRMSG );
   END PORTFOLIOPUNISHMENT;
END GC_BSCASTIGOCARTERA;
/


