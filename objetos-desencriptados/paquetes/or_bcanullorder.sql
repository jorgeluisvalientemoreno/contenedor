PACKAGE BODY OR_BCAnullOrder
IS
















































	
    CSBVERSION CONSTANT VARCHAR2(200) := 'SAO197595';
    
    
    CNUPROCESS_AUTONOM CONSTANT OR_ORDER_ACTIVITY.PROCESS_ID%TYPE := 11;
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    
    FUNCTION FBLISSUPPORTORDER
    (
        INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        NUORDER OR_ORDER.ORDER_ID%TYPE;
    
    BEGIN
        OPEN CUSUPPORTORDERS(INUORDER_ID);
        FETCH CUSUPPORTORDERS INTO NUORDER;
        CLOSE CUSUPPORTORDERS;
        
        RETURN NUORDER IS NOT NULL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUSUPPORTORDERS%ISOPEN THEN
                CLOSE CUSUPPORTORDERS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUSUPPORTORDERS%ISOPEN THEN
                CLOSE CUSUPPORTORDERS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLISSUPPORTORDER;
    
    

















    FUNCTION FBLISELEMENTORDER
    (
        INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS

        BOFLAG      BOOLEAN;
        NUTEMP      NUMBER;
        CURSOR CUGETELEMENTS
        IS
        SELECT 1
            FROM OR_ORDER_ACTIVITY A, OR_TASK_TYPE TT  /*+ OR_BCAnullOrder.fblIsElementOrder SAO166978 */
            WHERE TT.TASK_TYPE_ID = A.TASK_TYPE_ID
            AND TT.IS_ANULL =OR_BOCONSTANTS.CSBSI
            AND A.PROCESS_ID = OR_BOCONSTANTS.CNUPROCESS_ELEM_NET_ORDE
            AND A.ORDER_ID = INUORDER_ID
            AND ROWNUM = 1;
    BEGIN

        IF (CUGETELEMENTS%ISOPEN) THEN
            CLOSE CUGETELEMENTS;
        END IF;

        OPEN CUGETELEMENTS;
         FETCH CUGETELEMENTS INTO NUTEMP;

        IF (CUGETELEMENTS%NOTFOUND) THEN
             BOFLAG:= FALSE;
        ELSE
            BOFLAG := TRUE;
        END IF;

        CLOSE CUGETELEMENTS;

        RETURN BOFLAG;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FBLISELEMENTORDER;

    
    FUNCTION FBLISAUTONOMORDER
    (
        INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        TBACTIVITIES OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
        RCACTIVITY   OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES;
        NUINDEX      BINARY_INTEGER;
    
    BEGIN
        OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER(INUORDER_ID, TBACTIVITIES);
        
        NUINDEX := TBACTIVITIES.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            RCACTIVITY := TBACTIVITIES(NUINDEX);
            
            IF NVL(RCACTIVITY.NUPROCESSID, -1) <> CNUPROCESS_AUTONOM THEN
                RETURN FALSE;
            END IF;
        
            NUINDEX := TBACTIVITIES.NEXT(NUINDEX);
        END LOOP;
        
        RETURN TRUE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FBLISAUTONOMORDER;
    
    
    
    

























    PROCEDURE HASORDERSINMOVEXECSCHED
    (
        INUPACKAGEID       IN MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUORDERID          OUT OR_SCHED_DISPATCH.ORDER_ID%TYPE,
        OSBDISPATCHSTATUS   OUT OR_SCHED_DISPATCH.DISPATCH_STATUS%TYPE,
        ODTDATE             OUT OR_SCHED_DISPATCH.DATE_%TYPE
    )
    IS
       PROCEDURE CLOSECURSORS
       IS
    BEGIN
    
            IF ( CUORDINMOV_EXEC_SCHPROGRAM%ISOPEN ) THEN
                CLOSE CUORDINMOV_EXEC_SCHPROGRAM;
            END IF;
            
            IF ( CUORDINMOV_EXEC_SCHDISPATCH%ISOPEN ) THEN
                CLOSE CUORDINMOV_EXEC_SCHDISPATCH;
            END IF;

       EXCEPTION
           WHEN EX.CONTROLLED_ERROR THEN
               RAISE;
           WHEN OTHERS THEN
               ERRORS.SETERROR;
               RAISE EX.CONTROLLED_ERROR;
       END CLOSECURSORS;
    BEGIN
    
        CLOSECURSORS;

        
        FOR RCDISPATCH IN CUORDINMOV_EXEC_SCHDISPATCH(INUPACKAGEID) LOOP
            UT_TRACE.TRACE('En Paquete ['||INUPACKAGEID||'] Se encontraron ordenes en despacho', 1);
            ONUORDERID := RCDISPATCH.ORDER_ID;
            OSBDISPATCHSTATUS := RCDISPATCH.DISPATCH_STATUS;
            ODTDATE := RCDISPATCH.DATE_;
            RETURN;
        END LOOP;

          
        FOR RCSCHED IN CUORDINMOV_EXEC_SCHPROGRAM(INUPACKAGEID) LOOP
          
            UT_TRACE.TRACE('En Paquete ['||INUPACKAGEID||'] Se encontraron ordenes para despues de hoy', 1);
            ONUORDERID := RCSCHED.ORDER_ID;
        END LOOP;
       
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSORS;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSORS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END HASORDERSINMOVEXECSCHED;


    
    FUNCTION FBLESORDENREPARACION
    (
        INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
       NUORDERACTID    NUMBER;
    BEGIN
        UT_TRACE.TRACE('Inicio de OR_BCAnullOrder.fblEsOrdenReparacion Orden ['||INUORDER_ID||']', 5);

        
        IF (CUISREPARORDER%ISOPEN) THEN
            CLOSE CUISREPARORDER;
        END IF;

        OPEN CUISREPARORDER(INUORDER_ID);
            FETCH CUISREPARORDER INTO NUORDERACTID;
        CLOSE CUISREPARORDER;

        UT_TRACE.TRACE('Resultado ['||NUORDERACTID||']', 6);

      IF (NUORDERACTID IS NULL) THEN
        RETURN FALSE;
      ELSE
        RETURN  TRUE;
      END IF;

      UT_TRACE.TRACE('Fin de OR_BCAnullOrder.fblEsOrdenReparacion', 5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUISREPARORDER%ISOPEN) THEN
                CLOSE CUISREPARORDER;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (CUISREPARORDER%ISOPEN) THEN
                CLOSE CUISREPARORDER;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FBLESORDENDIAGNOSTICO
    (
        INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
       NUORDERACTID    NUMBER := NULL;
    BEGIN
      UT_TRACE.TRACE('Inicio de OR_BCAnullOrder.fblEsOrdenDiagnostico Orden ['||INUORDER_ID||']', 5);

      
        IF (CUISDIAGNOSORDER%ISOPEN) THEN
            CLOSE CUISDIAGNOSORDER;
        END IF;

        OPEN CUISDIAGNOSORDER(INUORDER_ID);
            FETCH CUISDIAGNOSORDER INTO NUORDERACTID;
        CLOSE CUISDIAGNOSORDER;

        UT_TRACE.TRACE('Resultado ['||NUORDERACTID||']', 6);

      IF (NUORDERACTID IS NULL) THEN
        RETURN FALSE;
      ELSE
        RETURN  TRUE;
      END IF;

      UT_TRACE.TRACE('Fin de OR_BCAnullOrder.fblEsOrdenDiagnostico', 5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUISDIAGNOSORDER%ISOPEN) THEN
                CLOSE CUISDIAGNOSORDER;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (CUISDIAGNOSORDER%ISOPEN) THEN
                CLOSE CUISDIAGNOSORDER;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
















    FUNCTION FLBISPROJECTORDER
    (
        INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
		
        NUSTAGEID   OR_ORDER.STAGE_ID%TYPE;
    BEGIN

        NUSTAGEID := DAOR_ORDER.FNUGETSTAGE_ID(INUORDER_ID);
        
        IF ( NUSTAGEID IS NOT NULL ) THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FLBISPROJECTORDER;
    
    
















    FUNCTION FBOISREREADINGORDER
    (
        INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
         NUORDEN NUMBER;
         CURSOR CUSELECT
         IS
         SELECT /*+
                 ordered
                 use_nl(lectelme or_order_activity OR_ORDER)
              */ 1 ORDEN
             FROM   OR_ORDER,
                    OR_ORDER_ACTIVITY,
                    LECTELME
             WHERE LECTELME.LEEMFLCO = PKCONSTANTE.SI
             AND  LECTELME.LEEMDOCU = OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID
             AND  EXISTS (SELECT /*+ index (hileelme IX_HILEELME01) */
                                 'X'
                          FROM   HILEELME
                          WHERE  HILEELME.HLEMELME = LECTELME.LEEMCONS
                          AND    ROWNUM=1)
             AND  OR_ORDER_ACTIVITY.ORDER_ID = OR_ORDER.ORDER_ID
             AND  OR_ORDER.ORDER_ID = INUORDER_ID;
    BEGIN
        OPEN CUSELECT;
        FETCH CUSELECT INTO NUORDEN;
        IF (CUSELECT%FOUND) THEN
            CLOSE CUSELECT;
            RETURN TRUE;
        END IF;
        CLOSE CUSELECT;
        RETURN FALSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSE CUSELECT;
            RAISE;
        WHEN OTHERS THEN
            CLOSE CUSELECT;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOISREREADINGORDER;


END OR_BCANULLORDER;