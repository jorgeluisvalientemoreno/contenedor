PACKAGE BODY FM_BO_NTL_Process
IS







































































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO221238';

    
    
    
    CSBORDER        CONSTANT    VARCHAR2(20)    := 'Orden';
    CSBPRODUCT      CONSTANT    VARCHAR2(20)    := 'Producto';

    
    
    

    
    
    
    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    



















    PROCEDURE EXCLUDENTL
    (
        INUPOSSIBLENTL      IN      FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE,
        ISBCOMMENT          IN      FM_POSSIBLE_NTL.COMMENT_%TYPE
    )
    IS
        RCPOSIBLENTL       DAFM_POSSIBLE_NTL.STYFM_POSSIBLE_NTL;
    BEGIN
        
        DAFM_POSSIBLE_NTL.GETRECORD(INUPOSSIBLENTL,RCPOSIBLENTL);

        
        RCPOSIBLENTL.COMMENT_ := UT_STRING.FSBSUBSTR(RCPOSIBLENTL.COMMENT_ || ' - ' || ISBCOMMENT, 1 , 19990);
        RCPOSIBLENTL.STATUS   := FM_BOCONSTANTS.CSBIGNOREDNTLSTATUS;

        
        DAFM_POSSIBLE_NTL.UPDRECORD(RCPOSIBLENTL);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END EXCLUDENTL;
    
    





















    FUNCTION CREATEBASEPROJECT
    (
        ISBPOSSIBLESNTL     IN      VARCHAR2,
        INUENTITY           IN      GE_ENTITY.ENTITY_ID%TYPE,
        INUACTIVITY         IN      GE_ITEMS.ITEMS_ID%TYPE
    )
    RETURN PM_PROJECT.PROJECT_ID%TYPE
    IS
        
        NUPROJECT           PM_PROJECT.PROJECT_ID%TYPE;
        NUBASE              GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE;

        
        RCPROJECT           DAPM_PROJECT.STYPM_PROJECT;
        RCSTAGE             DAPM_STAGE.STYPM_STAGE;
        RCSTAGETASKITEMS    DAPM_STAGE_TASK_ITEMS.STYPM_STAGE_TASK_ITEMS;
        RCSTAGETASKTYPES    DAPM_STAGE_TASK_TYPE.STYPM_STAGE_TASK_TYPE;

        
        CNUORDERSBYPOP      CONSTANT  GE_OBJECT.OBJECT_ID%TYPE:= 38727;
        CNUPARANOVALOR      CONSTANT  GE_MESSAGE.MESSAGE_ID%TYPE := 787;
        CNUUSERNOBASE       CONSTANT  GE_MESSAGE.MESSAGE_ID%TYPE := 900266;
    BEGIN
        UT_TRACE.TRACE('Inicia FM_BO_NTL_Process.createBaseProject',2);

        
        NUBASE      := FM_BC_NTL_PROCESS.FNUGETADMINBASE(GE_BOPERSONAL.FNUGETPERSONID);

        
        IF NUBASE IS NULL THEN
            UT_TRACE.TRACE('Termina FM_BO_NTL_Process.createBaseProject No existe Base',2);
            ERRORS.SETERROR(CNUUSERNOBASE);
            RAISE EX.CONTROLLED_ERROR;
            RETURN NULL;
        END IF;

        NUPROJECT   := PM_BOSEQUENCE.FNUGETPM_PROJECT;
        
        RCPROJECT.PROJECT_ID            := NUPROJECT;
        RCPROJECT.PROJECT_NAME          := UT_STRING.FSBSUBSTR('NTL_PROJECT_' || ISBPOSSIBLESNTL, 1 , 99);
        RCPROJECT.PROJECT_TYPE_ID       := FM_BC_NTL_PROCESS.FNUGETPROJECTTYPE;
        RCPROJECT.BASE_ADMIN_ID         := NUBASE;
        RCPROJECT.STATUS                := PM_BOCONSTANTS.CSBSTATUS_PLANNING;
        RCPROJECT.PLANNED_INI_DATE      := UT_DATE.FDTSYSDATE;
        RCPROJECT.ENTITY_ID             := INUENTITY;
        RCPROJECT.PROJECT_DESCRIPTION   := UT_STRING.FSBSUBSTR('Proyecto con las posibles pï¿½rdidas de: ' || ISBPOSSIBLESNTL, 1 , 99);
        DAPM_PROJECT.INSRECORD(RCPROJECT);

        
        RCSTAGE.STAGE_ID          := PM_BOSEQUENCE.FNUGETPM_STAGE;
        RCSTAGE.PROJECT_ID        := NUPROJECT;
        RCSTAGE.STAGE_NAME        := UT_STRING.FSBSUBSTR('STAGE_' || ISBPOSSIBLESNTL, 1 , 250);
        RCSTAGE.CRITERION_OBJ_ID  := CNUORDERSBYPOP;
        RCSTAGE.STATUS            := PM_BOCONSTANTS.CSBSTATUS_PLANNING;
        RCSTAGE.LEGALIZED_ORDER   := 0;
        RCSTAGE.TOTAL_ORDER       := 0;
        RCSTAGE.ENTITY_ID         := INUENTITY;
        RCSTAGE.ESTIMATE_INI_DATE := UT_DATE.FDTSYSDATE;
        RCSTAGE.ESTIMAT_END_DATE  := UT_DATE.FDTSYSDATE;
        RCSTAGE.IS_ESTIMATE_TIME  := GE_BOCONSTANTS.CSBYES;
        DAPM_STAGE.INSRECORD(RCSTAGE);
        UT_TRACE.TRACE('STAGE_ID: ' || RCSTAGE.STAGE_ID, 3);

        
        RCSTAGETASKTYPES.STAGE_ID          := RCSTAGE.STAGE_ID;
        RCSTAGETASKTYPES.TASK_TYPE_ID      := OR_BCTASK_TYPE_ADMIN.FNUGETITEMTASTYP(INUACTIVITY);
        RCSTAGETASKTYPES.LEGALIZED_ORDER   := 0;
        RCSTAGETASKTYPES.TOTAL_ORDER       := 0;
        RCSTAGETASKTYPES.ESTIMATE_INI_DATE := UT_DATE.FDTSYSDATE;
        RCSTAGETASKTYPES.ESTIMATE_DURATION := 24;
        RCSTAGETASKTYPES.SEQUENCE_         := 0;
        DAPM_STAGE_TASK_TYPE.INSRECORD(RCSTAGETASKTYPES);
        UT_TRACE.TRACE('TASK_TYPE_ID : ' || RCSTAGETASKTYPES.TASK_TYPE_ID ,3);

        
        RCSTAGETASKITEMS.STAGE_ID       := RCSTAGE.STAGE_ID ;
        RCSTAGETASKITEMS.ITEM_ID        := INUACTIVITY;
        RCSTAGETASKITEMS.TASK_TYPE_ID   := RCSTAGETASKTYPES.TASK_TYPE_ID;
        RCSTAGETASKITEMS.ESTIMATE_TOTAL := 1;
        RCSTAGETASKITEMS.ENABLED        := GE_BOCONSTANTS.CSBYES;
        DAPM_STAGE_TASK_ITEMS.INSRECORD(RCSTAGETASKITEMS);
        UT_TRACE.TRACE('ITEM_ID : ' || INUACTIVITY,3);

        UT_TRACE.TRACE('Termina FM_BO_NTL_Process.createBaseProject',2);
        RETURN NUPROJECT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEBASEPROJECT;

    
    




















    PROCEDURE CREATENTLPROJECT
    (
        ISBPOSSIBLESNTL     IN      VARCHAR2,
        INUACTIVITY         IN      GE_ITEMS.ITEMS_ID%TYPE,
        ONUPROJECTID        OUT     PM_PROJECT.PROJECT_ID%TYPE
    )
    IS
        NUPROJECT                            PM_PROJECT.PROJECT_ID%TYPE;
        NUENTITY                             GE_ENTITY.ENTITY_ID%TYPE;
        NUPOSSIBLENTL                        FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE;

        
        RCTARGETPOP                          DAPM_TARGET_POPULAT.STYPM_TARGET_POPULAT;
        RCPOSSIBLENTL                        DAFM_POSSIBLE_NTL.STYFM_POSSIBLE_NTL;

        
        TBPOSSIBLESNTL                       UT_STRING.TYTB_STRING;
        TBSTAGES                             DAPM_STAGE.TYTBPM_STAGE;

        
        RFSTAGES                             CONSTANTS.TYREFCURSOR;

    BEGIN
        UT_TRACE.TRACE('Inicia FM_BO_NTL_Process.createNTLProject',1);
        
        NUENTITY := GE_BOENTITY.FNUGETENTITY_ID(CSBFM_POSSIBLE_NTL);


        
        NUPROJECT := CREATEBASEPROJECT
                     (
                        ISBPOSSIBLESNTL,
                        NUENTITY,
                        INUACTIVITY
                     );

        UT_TRACE.TRACE('Proyecto creado: '|| NUPROJECT,2);
        
        UT_STRING.EXTSTRING
        (
            ISBPOSSIBLESNTL,
            ',',
            TBPOSSIBLESNTL
        );

        
        RFSTAGES := PM_BCPROJECT.FRFGETSTAGEBYPROJECT(NUPROJECT);
        FETCH RFSTAGES BULK COLLECT INTO TBSTAGES;
        CLOSE RFSTAGES;

        
        FOR INDX IN TBPOSSIBLESNTL.FIRST .. TBPOSSIBLESNTL.LAST LOOP
            NUPOSSIBLENTL := TBPOSSIBLESNTL(INDX);
            UT_TRACE.TRACE('Llenando pm_target_populat nuPossibleNTL: '|| NUPOSSIBLENTL,2);
            FOR IND  IN TBSTAGES.FIRST .. TBSTAGES.LAST LOOP
                UT_TRACE.TRACE('tbStages(ind).stage_id: '|| TBSTAGES(IND).STAGE_ID,3);
                RCTARGETPOP.TARGET_POPULAT_ID := PM_BOSEQUENCE.FNUGETPM_TARGET_POPULATION;
                RCTARGETPOP.PROJECT_ID        := NUPROJECT;
                RCTARGETPOP.STAGE_ID          := TBSTAGES(IND).STAGE_ID;
                RCTARGETPOP.ENTITY_ID         := NUENTITY;
                RCTARGETPOP.EXTERNAL_ID       := NUPOSSIBLENTL;
                DAPM_TARGET_POPULAT.INSRECORD(RCTARGETPOP);
            END LOOP;
            
            DAFM_POSSIBLE_NTL.UPDPROJECT_ID(NUPOSSIBLENTL, NUPROJECT);
            DAFM_POSSIBLE_NTL.UPDSTATUS(NUPOSSIBLENTL, FM_BOCONSTANTS.CSBPROJECTNTLSTATUS);
        END LOOP;

        ONUPROJECTID := NUPROJECT;
        UT_TRACE.TRACE('Termina FM_BO_NTL_Process.createNTLProject',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATENTLPROJECT;

    
    

























    PROCEDURE UPDATENTLFOUND
    (
        INUORDERID      IN  FM_POSSIBLE_NTL.ORDER_ID%TYPE
    )
    IS
        
        TBPOSSIBNTL      DAFM_POSSIBLE_NTL.TYTBFM_POSSIBLE_NTL;
        NUREQUEST        FM_POSSIBLE_NTL.PACKAGE_ID%TYPE;
        NUORDERID        FM_POSSIBLE_NTL.ORDER_ID%TYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO FM_BO_NTL_Process.updateNTLFound',10);
        
        
        
        NUORDERID:= FNUFINDFIRSTRELATORDER(INUORDERID);
        
        
        
        DAFM_POSSIBLE_NTL.GETRECORDS('ORDER_ID = '||NUORDERID,TBPOSSIBNTL);

        IF (TBPOSSIBNTL.COUNT > 0) THEN
            FOR IND IN  TBPOSSIBNTL.FIRST .. TBPOSSIBNTL.LAST LOOP

                
                DAFM_POSSIBLE_NTL.UPDSTATUS(TBPOSSIBNTL(IND).POSSIBLE_NTL_ID,
                                            FM_BOCONSTANTS.CSBPOSITIVENTLSTATUS);

                
                DAFM_POSSIBLE_NTL.UPDREVIEW_DATE(TBPOSSIBNTL(IND).POSSIBLE_NTL_ID,
                                                 UT_DATE.FDTSYSDATE);
                                                 
                FM_BOREQUEST.GENERATEREQUEST(TBPOSSIBNTL(IND).POSSIBLE_NTL_ID, NUREQUEST);
            END LOOP;
        END IF;

        UT_TRACE.TRACE('FIN FM_BO_NTL_Process.updateNTLFound',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATENTLFOUND;


    



















    PROCEDURE UPDATENTLNOTFOUND
    (
        INUORDERID      IN  FM_POSSIBLE_NTL.ORDER_ID%TYPE
    )
    IS
        
        TBPOSSIBNTL          DAFM_POSSIBLE_NTL.TYTBFM_POSSIBLE_NTL;
        NUORDERID        FM_POSSIBLE_NTL.ORDER_ID%TYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO FM_BO_NTL_Process.updateNTLNotFound',10);

         
        
        NUORDERID:= OR_BORELATEDORDER.FNUGETPATHERORDERID(INUORDERID);

        
        
        DAFM_POSSIBLE_NTL.GETRECORDS('ORDER_ID = '||NUORDERID,TBPOSSIBNTL);

        IF (TBPOSSIBNTL.COUNT > 0) THEN
            FOR IND IN  TBPOSSIBNTL.FIRST .. TBPOSSIBNTL.LAST LOOP
                
                DAFM_POSSIBLE_NTL.UPDSTATUS(TBPOSSIBNTL(IND).POSSIBLE_NTL_ID,
                                            FM_BOCONSTANTS.CSBNEGATIVENTLSTATUS);

                
                DAFM_POSSIBLE_NTL.UPDREVIEW_DATE(TBPOSSIBNTL(IND).POSSIBLE_NTL_ID,
                                                UT_DATE.FDTSYSDATE);
            END LOOP;
        END IF;

        UT_TRACE.TRACE('FIN FM_BO_NTL_Process.updateNTLNotFound',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATENTLNOTFOUND;

    












    PROCEDURE OBJUPDATENTLFOUND
    IS
        NUORDER                 OR_ORDER.ORDER_ID%TYPE;
    BEGIN
        
        NUORDER := OR_BOINSTANCE.FNUGETORDERIDFROMINSTANCE;
        
        UPDATENTLFOUND(NUORDER);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    












    PROCEDURE OBJUPDATENTLNOTFOUND
    IS
        NUORDER                 OR_ORDER.ORDER_ID%TYPE;
    BEGIN
        
        NUORDER := OR_BOINSTANCE.FNUGETORDERIDFROMINSTANCE;

        UPDATENTLNOTFOUND(NUORDER);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    















    PROCEDURE OBJUPDATENTLPRODUCT
    IS
        NUORDER                 OR_ORDER.ORDER_ID%TYPE;
        
        TBPOSSIBNTL             DAFM_POSSIBLE_NTL.TYTBFM_POSSIBLE_NTL;
        SBPRODUCT_ID            VARCHAR2(200);
        SBTCONCODI              VARCHAR2(200);
        SBCOSSELME              VARCHAR2(200);
        SBRESTRICTIONTYPE       VARCHAR2(200);
        
        NUPRODUCTID             FM_POSSIBLE_NTL.PRODUCT_ID%TYPE;
        NUTCONCODI              FM_POSSIBLE_NTL.TCONCODI%TYPE;
        NUCOSSELME              FM_POSSIBLE_NTL.COSSELME%TYPE;
        NURESTRICTTYPE          MO_RESTRICTION_TYPE.RESTRICTION_TYPE_ID%TYPE;
    BEGIN

        
        NUORDER := OR_BOINSTANCE.FNUGETORDERIDFROMINSTANCE;
        SBPRODUCT_ID := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('PRODUCT_ID',OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY);
        SBTCONCODI := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('TCONCODI',OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY);
        SBCOSSELME := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('COSSELME',OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY);
        SBRESTRICTIONTYPE := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('RESTRICTION_TYPE_ID',OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY);

        IF SBPRODUCT_ID IS NOT NULL THEN
            NUPRODUCTID := TO_NUMBER(SBPRODUCT_ID);
            NUTCONCODI := TO_NUMBER(SBTCONCODI);
            NUCOSSELME := TO_NUMBER(SBCOSSELME);
            NURESTRICTTYPE := TO_NUMBER(SBRESTRICTIONTYPE);
            
            
            DAFM_POSSIBLE_NTL.GETRECORDS('ORDER_ID = '||NUORDER,TBPOSSIBNTL);

            IF (TBPOSSIBNTL.COUNT > 0) THEN
                FOR IND IN  TBPOSSIBNTL.FIRST .. TBPOSSIBNTL.LAST LOOP
                    
                    DAFM_POSSIBLE_NTL.UPDPRODUCT_ID(TBPOSSIBNTL(IND).POSSIBLE_NTL_ID,
                                                    NUPRODUCTID);
                    DAFM_POSSIBLE_NTL.UPDTCONCODI(TBPOSSIBNTL(IND).POSSIBLE_NTL_ID,
                                                  NUTCONCODI);
                    DAFM_POSSIBLE_NTL.UPDCOSSELME(TBPOSSIBNTL(IND).POSSIBLE_NTL_ID,
                                                  NUCOSSELME);
                    
                    FM_BOREQUEST.CREATEPRODRESTRICTION(TBPOSSIBNTL(IND).POSSIBLE_NTL_ID, NURESTRICTTYPE);
                END LOOP;
            END IF;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    















    PROCEDURE OBJCREATECONFIRMEDNTL
    IS
        NUORDER                 OR_ORDER.ORDER_ID%TYPE;
        
        TBPOSSIBNTL             DAFM_POSSIBLE_NTL.TYTBFM_POSSIBLE_NTL;

        NUPRODUCTID             FM_POSSIBLE_NTL.PRODUCT_ID%TYPE;
        
        NUID                   FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE;
        NUORDERID              OR_ORDER.ORDER_ID%TYPE;
        NUPACKAGEID            MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN

        
        
        NUPRODUCTID := DAOR_ORDER_ACTIVITY.FNUGETPRODUCT_ID(OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY, 1);

        IF NUPRODUCTID IS NOT NULL THEN

            FM_BOREGISTER.REGISTER
            (
                NUPRODUCTID,
                NULL,
                NULL,
                NULL,
                NULL,
                4,
                NULL,
                NULL,
                FM_BOCONSTANTS.CSBPOSITIVENTLSTATUS,
                NULL,
                GE_BOPERSONAL.FNUGETPERSONID,
                NUID,
                NUORDERID,
                NUPACKAGEID
            );

            DAFM_POSSIBLE_NTL.UPDORDER_ID(NUID, OR_BOINSTANCE.FNUGETORDERIDFROMINSTANCE);
            DAFM_POSSIBLE_NTL.UPDCOMMENT_(NUID, OR_BCORDERCOMMENT.FSBLASTCOMMENTBYORDER(OR_BOINSTANCE.FNUGETORDERIDFROMINSTANCE));

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    












    PROCEDURE OBJADDNTLINVOLVEDSUBSC
    IS
        NUORDER                 OR_ORDER.ORDER_ID%TYPE;
        
        TBPOSSIBNTL             DAFM_POSSIBLE_NTL.TYTBFM_POSSIBLE_NTL;
        SBSUBSCRIBER_ID         VARCHAR2(200);
        NUSUBSCRIBERID          FM_INVOLVED_SUBSC.SUBSCRIBER_ID%TYPE;   
        SBCOMMENT               VARCHAR2(200);
        
        RCINVOLVEDSUBSC         DAFM_INVOLVED_SUBSC.STYFM_INVOLVED_SUBSC;
    BEGIN

        
        NUORDER := OR_BOINSTANCE.FNUGETORDERIDFROMINSTANCE;
        SBSUBSCRIBER_ID := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('SUBSCRIBER_ID',OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY);

        IF SBSUBSCRIBER_ID IS NOT NULL THEN

            NUSUBSCRIBERID := TO_NUMBER(SBSUBSCRIBER_ID);
            SBCOMMENT := OR_BOINSTANCEACTIVITIES.FSBGETATTRIBUTEVALUE('COMMENT_',OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY);
            
            
            
            DAFM_POSSIBLE_NTL.GETRECORDS('ORDER_ID = '||NUORDER,TBPOSSIBNTL);

            IF (TBPOSSIBNTL.COUNT > 0) THEN
                FOR IND IN  TBPOSSIBNTL.FIRST .. TBPOSSIBNTL.LAST LOOP
                    
                    RCINVOLVEDSUBSC.INVOLVED_SUBSC_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('fm_involved_subsc', 'SEQ_FM_INVOLVED_SUB_173968');
                    RCINVOLVEDSUBSC.POSSIBLE_NTL_ID := TBPOSSIBNTL(IND).POSSIBLE_NTL_ID;
                    RCINVOLVEDSUBSC.SUBSCRIBER_ID := NUSUBSCRIBERID;
                    RCINVOLVEDSUBSC.COMMENT_ := SBCOMMENT;
                    
                    DAFM_INVOLVED_SUBSC.INSRECORD(RCINVOLVEDSUBSC);
                END LOOP;
            END IF;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

    















    PROCEDURE VALIDDTAREGISTR
    (
        INUORDERID      IN  FM_POSSIBLE_NTL.ORDER_ID%TYPE,
        INUPRODUCTID    IN  FM_POSSIBLE_NTL.PRODUCT_ID%TYPE
    ) IS
        
        CNUERROR_FIELD  CONSTANT NUMBER := 900277;
    BEGIN
        
        UT_TRACE.TRACE('INICIO FM_BO_NTL_Process.validDtaRegistr',12);
        

        
        IF (INUORDERID IS NULL ) THEN
            
            ERRORS.SETERROR(CNUERROR_FIELD,CSBORDER);
            RAISE EX.CONTROLLED_ERROR;
        ELSE
            
            IF (NOT DAOR_ORDER.FBLEXIST(INUORDERID) ) THEN
                
                ERRORS.SETERROR(CNUERROR_FIELD,CSBORDER);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        
        IF (INUPRODUCTID IS NULL) THEN
            
            ERRORS.SETERROR(CNUERROR_FIELD,CSBPRODUCT);
            RAISE EX.CONTROLLED_ERROR;
        ELSE
            
            IF (NOT DAPR_PRODUCT.FBLEXIST(INUPRODUCTID) ) THEN
                
                ERRORS.SETERROR(CNUERROR_FIELD,CSBPRODUCT);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN FM_BO_NTL_Process.validDtaRegistr',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDDTAREGISTR;


    





















    PROCEDURE REGISTERNTL
    (
        INUORDERID      IN  FM_POSSIBLE_NTL.ORDER_ID%TYPE,
        INUPRODUCTID    IN  FM_POSSIBLE_NTL.PRODUCT_ID%TYPE,
        INUADDRESS      IN  FM_POSSIBLE_NTL.ADDRESS_ID%TYPE,
        INUVALUE        IN  FM_POSSIBLE_NTL.VALUE_%TYPE
    )
    IS
        
        CSBNTL_ENTITYNAME   CONSTANT    GE_ENTITY.NAME_%TYPE    := 'FM_POSSIBLE_NTL';
        CSBNTL_SEQNAME      CONSTANT    VARCHAR2(2000)          := 'SEQ_FM_POSSIBLE_NTL_123873';
        RCPOSSIBLENTL       DAFM_POSSIBLE_NTL.STYFM_POSSIBLE_NTL;
        NUPRODUCTTYPEID     FM_POSSIBLE_NTL.PRODUCT_TYPE_ID%TYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO FM_BO_NTL_Process.registerNTL',10);
        

        
        VALIDDTAREGISTR(INUORDERID,INUPRODUCTID);

        
        NUPRODUCTTYPEID := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCTID);

        RCPOSSIBLENTL.POSSIBLE_NTL_ID   := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE(CSBNTL_ENTITYNAME, CSBNTL_SEQNAME);

        RCPOSSIBLENTL.STATUS            := FM_BOCONSTANTS.CSBPOSITIVENTLSTATUS;
        RCPOSSIBLENTL.ORDER_ID          := INUORDERID;
        RCPOSSIBLENTL.PRODUCT_ID        := INUPRODUCTID;
        RCPOSSIBLENTL.ADDRESS_ID        := INUADDRESS;
        RCPOSSIBLENTL.VALUE_            := INUVALUE;
        RCPOSSIBLENTL.REGISTER_DATE     := UT_DATE.FDTSYSDATE;
        RCPOSSIBLENTL.REVIEW_DATE       := UT_DATE.FDTSYSDATE;
        RCPOSSIBLENTL.DISCOVERY_TYPE_ID := FM_BOCONSTANTS.CSBMANUALREGISTRY;

        DAFM_POSSIBLE_NTL.INSRECORD(RCPOSSIBLENTL);

        UT_TRACE.TRACE('FIN FM_BO_NTL_Process.registerNTL',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGISTERNTL;

    















    FUNCTION FBLHASCONFIRMFRAUD
    (
        INUPRODUCTID    IN  FM_POSSIBLE_NTL.PRODUCT_ID%TYPE,
        INUADDRESS      IN  FM_POSSIBLE_NTL.ADDRESS_ID%TYPE,
        IDTDATEFRAUNTL  IN  DATE
    ) RETURN BOOLEAN
    IS
        
        RCPOSSBLENTL        FM_BC_NTL_PROCESS.CUPOSITFRAUDBYDATE%ROWTYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO FM_BO_NTL_Process.fblHasConfirmFraud',10);

        
        
        IF FM_BC_NTL_PROCESS.CUPOSITFRAUDBYDATE%ISOPEN THEN
            CLOSE FM_BC_NTL_PROCESS.CUPOSITFRAUDBYDATE;
        END IF;

        OPEN FM_BC_NTL_PROCESS.CUPOSITFRAUDBYDATE(INUPRODUCTID,INUADDRESS,IDTDATEFRAUNTL);
        FETCH FM_BC_NTL_PROCESS.CUPOSITFRAUDBYDATE INTO RCPOSSBLENTL;

        
        IF ( FM_BC_NTL_PROCESS.CUPOSITFRAUDBYDATE%FOUND) THEN
            CLOSE FM_BC_NTL_PROCESS.CUPOSITFRAUDBYDATE;
            RETURN TRUE;
        END IF;
        CLOSE FM_BC_NTL_PROCESS.CUPOSITFRAUDBYDATE;
        

        RETURN FALSE;

        UT_TRACE.TRACE('FIN FM_BO_NTL_Process.fblHasConfirmFraud',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLHASCONFIRMFRAUD;

    





















    PROCEDURE GETFWNORMALPRODBYNTLID
    (
        ONUPRODUCTID    OUT FM_POSSIBLE_NTL.PRODUCT_ID%TYPE
    )
    IS
        SBNTLID     GE_BOINSTANCECONTROL.STYSBVALUE;
        NUNTLID     FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE;
        NUPKGID     MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO FM_BO_NTL_Process.GetFWNormalProdByNtlId',5);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE('WORK_INSTANCE', NULL, 'FM_POSSIBLE_NTL', 'POSSIBLE_NTL_ID', SBNTLID);

        NUNTLID := TO_NUMBER(SBNTLID);

        
        UT_TRACE.TRACE('nuNtlId ' ||NUNTLID,10);

        
        NUPKGID := DAFM_POSSIBLE_NTL.FNUGETPACKAGE_ID(NUNTLID);

        
        UT_TRACE.TRACE('nuPkgId [' ||NUPKGID||']',10);

        
        IF (NUPKGID IS NULL OR MO_BOPACKAGES.FBLISFINALSTATUS( NUPKGID ) = FALSE)
        THEN
             
             GE_BOERRORS.SETERRORCODE(901238);
        END IF;

        
        ONUPRODUCTID := DAFM_POSSIBLE_NTL.FNUGETNORMALIZED_PROD_ID(TO_NUMBER(SBNTLID), 0);

        UT_TRACE.TRACE('FIN FM_BO_NTL_Process.GetFWNormalProdByNtlId',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETFWNORMALPRODBYNTLID;

    




















    PROCEDURE VALNORMALIZEPROCESS
    (
        INUNTLID        IN FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE,
        INUNORMPRODUCT  IN FM_POSSIBLE_NTL.NORMALIZED_PROD_ID%TYPE
    )
    IS
        
        NUFRAUDULENTPRODUCT FM_POSSIBLE_NTL.PRODUCT_ID%TYPE;
        
        
        NUPACKAGEID         FM_POSSIBLE_NTL.PACKAGE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO FM_BO_NTL_Process.ValNormalizeProcess',10);
        
        
        NUPACKAGEID := DAFM_POSSIBLE_NTL.FNUGETPACKAGE_ID(INUNTLID, 0);
        IF (NUPACKAGEID IS NULL) THEN
             
             GE_BOERRORS.SETERRORCODE(901301);
        END IF;
        
        
        IF (MO_BOPACKAGES.FBLISFINALSTATUS(NUPACKAGEID) = FALSE) THEN
             
             GE_BOERRORS.SETERRORCODE(901238);
        END IF;

        
        NUFRAUDULENTPRODUCT := DAFM_POSSIBLE_NTL.FNUGETPRODUCT_ID(INUNTLID);

        
        IF (DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(NUFRAUDULENTPRODUCT)
            != FM_BOCONSTANTS.CNUCLANDESTINEPRODTYPE) THEN
             
             GE_BOERRORS.SETERRORCODE(901237);
        END IF;

        
        DAPR_PRODUCT.ACCKEY(INUNORMPRODUCT);

        
        IF (DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUNORMPRODUCT)
            = FM_BOCONSTANTS.CNUCLANDESTINEPRODTYPE) THEN
            
            GE_BOERRORS.SETERRORCODE(901768);
        END IF;

        UT_TRACE.TRACE('FIN FM_BO_NTL_Process.ValNormalizeProcess',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALNORMALIZEPROCESS;

    



















    PROCEDURE SETNORMALIZEDPRODUCT
    IS
        
        SBNTLID             VARCHAR2(30);
        NUNTLID             FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE;

        
        NUPRODUCTTODEFINE   FM_POSSIBLE_NTL.NORMALIZED_PROD_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO FM_BO_NTL_Process.SetNormalizedProduct',5);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE('WORK_INSTANCE', NULL, 'FM_POSSIBLE_NTL', 'POSSIBLE_NTL_ID', SBNTLID);
        NUNTLID := TO_NUMBER(SBNTLID);

        
        NUPRODUCTTODEFINE := TO_NUMBER(GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('FM_POSSIBLE_NTL', 'NORMALIZED_PROD_ID'));

        
        VALNORMALIZEPROCESS(NUNTLID, NUPRODUCTTODEFINE);

        
        DAFM_POSSIBLE_NTL.UPDNORMALIZED_PROD_ID(NUNTLID, NUPRODUCTTODEFINE);

        
        COMMIT;

        UT_TRACE.TRACE('FIN FM_BO_NTL_Process.SetNormalizedProduct',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETNORMALIZEDPRODUCT;
    
    














    FUNCTION FSBGETCOSTHASPENDNTLPKG
    (
        INUSUBSCRIBER       IN      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN VARCHAR2
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO]FM_BO_NTL_Process.fsbGetCostHasPendNTLPkg',5);

        RETURN FM_BC_NTL_PROCESS.FSBGETCOSTHASPENDNTLPKG(INUSUBSCRIBER);
        
        UT_TRACE.TRACE('[FIN]FM_BO_NTL_Process.fsbGetCostHasPendNTLPkg',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

    











    PROCEDURE GETACTIVITIES
    (
        OCURESULT           OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OCURESULT := FM_BC_NTL_PROCESS.FRFGETACTIVITIES;
    END;
    
    
    















    FUNCTION FNUFINDFIRSTRELATORDER
    (
        INUORDERID  IN  FM_POSSIBLE_NTL.ORDER_ID%TYPE
    )
    RETURN OR_ORDER.ORDER_ID%TYPE
    IS
        NURELATORDER FM_POSSIBLE_NTL.ORDER_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('[INICIO]FM_BO_NTL_Process.fnuFindFirstRelatOrder('||INUORDERID||')',5);

        NURELATORDER := FM_BC_NTL_PROCESS.FNUFINDFIRSTRELATORDER(INUORDERID);

        UT_TRACE.TRACE('[FIN]FM_BO_NTL_Process.fnuFindFirstRelatOrder=>'||NURELATORDER,5);
        RETURN NURELATORDER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUFINDFIRSTRELATORDER;


END FM_BO_NTL_PROCESS;