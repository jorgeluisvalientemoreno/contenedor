PACKAGE BODY TT_BCElement
IS
    

























































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO203153';

    
    
    

    
    
    
    
    
    
    
    














    CURSOR CUELEMENTBYPACKANDELEMENT
    (
       NUPACKAGE_ID TT_DAMAGE_ELEMENT.PACKAGE_ID%TYPE,
       NUELEMENT_ID TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE
    )
    IS
       SELECT /*+ INDEX(tt_damage_element IDX_TT_DAMAGE_ELEMENT_01) */
              TT_DAMAGE_ELEMENT.*, TT_DAMAGE_ELEMENT.ROWID
         FROM TT_DAMAGE_ELEMENT
              /*+ TT_BCElement.cuElementByPackAndElement SAO69778 */
        WHERE TT_DAMAGE_ELEMENT.PACKAGE_ID = NUPACKAGE_ID
          AND TT_DAMAGE_ELEMENT.ELEMENT_ID = NUELEMENT_ID;

    
    
    

    
    
    
    













    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;
    
    

















    PROCEDURE GETOPENDAMAELEMBYELEM
    (
        INUELEMENTID      IN         TT_DAMAGE.ELEMENT_ID%TYPE,
        OTBDAMAGEELEMENTS OUT NOCOPY DATT_DAMAGE_ELEMENT.TYTBPACKAGE_ID
    )
    IS
        CURSOR CUDAMAELEMBYELEMENT
        IS
            SELECT /*+ INDEX(tt_damage_element IDX_TT_DAMAGE_ELEMENT_02) */
                   DISTINCT TT_DAMAGE_ELEMENT.PACKAGE_ID
            FROM   TT_DAMAGE_ELEMENT
                   /*+ TT_BCElement.GetOpenDamaElemByElem SAO202712 */
            WHERE TT_DAMAGE_ELEMENT.ELEMENT_ID = INUELEMENTID
              AND TT_DAMAGE_ELEMENT.DAMAGE_ELEME_STATUS NOT IN (TT_BCCONSTANTS.CSBCLOSEDAMAGESTATUS,
                                                                TT_BCCONSTANTS.CSBUNFOUNDEDDAMAGESTATUS,
                                                                TT_BCCONSTANTS.CSBWITHDRAWDAMAGESTATUS);

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUDAMAELEMBYELEMENT%ISOPEN) THEN
                CLOSE CUDAMAELEMBYELEMENT;
            END IF;
        END;
    BEGIN
        OTBDAMAGEELEMENTS.DELETE;
    
        
        OPEN CUDAMAELEMBYELEMENT;

        
        FETCH CUDAMAELEMBYELEMENT BULK COLLECT INTO OTBDAMAGEELEMENTS;

        
        CLOSE CUDAMAELEMBYELEMENT;

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END GETOPENDAMAELEMBYELEM;
    
    














    PROCEDURE GETDAMAELEMBYPACKELEM
    (
        INUPACKAGEID        IN         TT_DAMAGE_ELEMENT.PACKAGE_ID%TYPE,
        INUELEMENTID        IN         TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE,
        ORCDAMAGE_ELEMENT   OUT NOCOPY DATT_DAMAGE_ELEMENT.STYTT_DAMAGE_ELEMENT
    )
    IS
        
        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUELEMENTBYPACKANDELEMENT%ISOPEN) THEN
                CLOSE CUELEMENTBYPACKANDELEMENT;
            END IF;
        END;
    BEGIN
        UT_TRACE.TRACE('==> TT_BCElement.GetDamaElemByPackElem <INICIO>',6);
        CLOSECURSORS;

        
        OPEN CUELEMENTBYPACKANDELEMENT(INUPACKAGEID,
                                       INUELEMENTID);

        
        FETCH CUELEMENTBYPACKANDELEMENT INTO ORCDAMAGE_ELEMENT;

        
        CLOSE CUELEMENTBYPACKANDELEMENT;

        UT_TRACE.TRACE('==> TT_BCElement.GetDamaElemByPackElem <FIN>',6);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END GETDAMAELEMBYPACKELEM;

    















    PROCEDURE GETFATHERELEMENTS
    (
        INUFAULTID        IN         TT_DAMAGE.PACKAGE_ID%TYPE,
        OTBDAMAGEELEMENTS OUT NOCOPY DATT_DAMAGE_ELEMENT.TYTBTT_DAMAGE_ELEMENT
    )
    IS
        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUDAMAGEFATHERELEMENTS%ISOPEN) THEN
                CLOSE CUDAMAGEFATHERELEMENTS;
            END IF;
        END;
    BEGIN
        CLOSECURSORS;
        OTBDAMAGEELEMENTS.DELETE;

        
        OPEN CUDAMAGEFATHERELEMENTS(INUFAULTID);

        
        FETCH CUDAMAGEFATHERELEMENTS BULK COLLECT INTO OTBDAMAGEELEMENTS;

        
        CLOSE CUDAMAGEFATHERELEMENTS;

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END GETFATHERELEMENTS;
    
    

















    PROCEDURE UPDATEELEMENTSTATUS
    (
        INUFAULTID      IN TT_DAMAGE_ELEMENT.PACKAGE_ID%TYPE,
        ISBORIGINSTATUS IN TT_DAMAGE_ELEMENT.DAMAGE_ELEME_STATUS%TYPE,
        ISBFINALSTATUS  IN TT_DAMAGE_ELEMENT.DAMAGE_ELEME_STATUS%TYPE
    )
    IS
        NULIMIT             NUMBER := 100;
        NUCOUNT             NUMBER;
        CURSOR CUTT_DAMAGE_ELEMENT
        IS
            SELECT /*+ INDEX(TT_DAMAGE_ELEMENT IDX_TT_DAMAGE_ELEMENT_01) */
                   TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID
            FROM   TT_DAMAGE_ELEMENT
                   /*+ TT_BCElement.UpdateElementStatus SAO181853 */
            WHERE  TT_DAMAGE_ELEMENT.PACKAGE_ID = INUFAULTID
              AND  TT_DAMAGE_ELEMENT.DAMAGE_ELEME_STATUS = ISBORIGINSTATUS;
        TYPE TYNUMARRAY  IS TABLE OF NUMBER      INDEX BY BINARY_INTEGER;
        TBDAMAGES_ELEMENT_ID  TYNUMARRAY;
        NUROWCOUNT            NUMBER := 0;

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUTT_DAMAGE_ELEMENT%ISOPEN) THEN
                CLOSE CUTT_DAMAGE_ELEMENT;
            END IF;
        END;
    BEGIN
        CLOSECURSORS;

        OPEN CUTT_DAMAGE_ELEMENT;
        LOOP
            FETCH CUTT_DAMAGE_ELEMENT
                BULK COLLECT INTO TBDAMAGES_ELEMENT_ID
                LIMIT NULIMIT;
            EXIT WHEN NUROWCOUNT = CUTT_DAMAGE_ELEMENT%ROWCOUNT;
            NUROWCOUNT := CUTT_DAMAGE_ELEMENT%ROWCOUNT;
            NUCOUNT := TBDAMAGES_ELEMENT_ID.COUNT;
            FORALL I IN 1..NUCOUNT
                UPDATE TT_DAMAGE_ELEMENT A
                SET    A.DAMAGE_ELEME_STATUS = ISBFINALSTATUS
                WHERE  A.DAMAGE_ELEMENT_ID = TBDAMAGES_ELEMENT_ID(I);
            COMMIT;
        END LOOP;
        CLOSE CUTT_DAMAGE_ELEMENT;
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            ROLLBACK;
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END UPDATEELEMENTSTATUS;

    


















    PROCEDURE GETCHILDELEMENTS
    (
        INUFAULTID        IN         TT_DAMAGE.PACKAGE_ID%TYPE,
        INUELEMENTID      IN         TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE,
        OTBDAMAGEELEMENTS OUT NOCOPY DATT_DAMAGE_ELEMENT.TYTBTT_DAMAGE_ELEMENT
    )
    IS
        RCDAMAGE_ELEMENT DATT_DAMAGE_ELEMENT.STYTT_DAMAGE_ELEMENT; 
    
        CURSOR CUDAMAGECHILDELEMENTS
        (
            INUFATHERELEMENTID IN TT_DAMAGE_ELEMENT.FATHER_ELEMENT_ID%TYPE
        )
        IS
            SELECT  /*+ INDEX(tt_damage_element IDX_TT_DAMAGE_ELEMENT_01) */
                    TT_DAMAGE_ELEMENT.*,
                    TT_DAMAGE_ELEMENT.ROWID
            FROM    TT_DAMAGE_ELEMENT
                    /*+ TT_BCElement.GetChildElements SAO181853 */
            WHERE   TT_DAMAGE_ELEMENT.PACKAGE_ID = INUFAULTID
            AND     TT_DAMAGE_ELEMENT.DAMAGE_ELEME_STATUS IN (TT_BCCONSTANTS.CSBOPENDAMAGESTATUS,
                                                              TT_BCCONSTANTS.CSBNONPORCESEDDAMAGESTATUS)
            AND     TT_DAMAGE_ELEMENT.FATHER_ELEMENT_ID = INUFATHERELEMENTID;
    
        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUDAMAGECHILDELEMENTS%ISOPEN) THEN
                CLOSE CUDAMAGECHILDELEMENTS;
            END IF;
        END;
    BEGIN
        OTBDAMAGEELEMENTS.DELETE;
        
        GETDAMAELEMBYPACKELEM(INUFAULTID,
                              INUELEMENTID,
                              RCDAMAGE_ELEMENT);
        
        
        OPEN CUDAMAGECHILDELEMENTS(RCDAMAGE_ELEMENT.DAMAGE_ELEMENT_ID);

        
        FETCH CUDAMAGECHILDELEMENTS BULK COLLECT INTO OTBDAMAGEELEMENTS;

        
        CLOSE CUDAMAGECHILDELEMENTS;

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END GETCHILDELEMENTS;
    
    














    FUNCTION FBLHASPENDINGELEMS
    (
        INUFAULTID IN TT_DAMAGE_ELEMENT.PACKAGE_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        RCDAMAGE_ELEMENT DATT_DAMAGE_ELEMENT.STYTT_DAMAGE_ELEMENT; 

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUOPENDAMELEMBYPACK%ISOPEN) THEN
                CLOSE CUOPENDAMELEMBYPACK;
            END IF;
        END;
    BEGIN
        CLOSECURSORS;

        
        OPEN CUOPENDAMELEMBYPACK(INUFAULTID);

        
        FETCH CUOPENDAMELEMBYPACK INTO RCDAMAGE_ELEMENT;

        
        CLOSE CUOPENDAMELEMBYPACK;

        
        IF (RCDAMAGE_ELEMENT.PACKAGE_ID IS NOT NULL) THEN
            RETURN TRUE;
        END IF;
        
        RETURN FALSE;
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END FBLHASPENDINGELEMS;
    
    





















    PROCEDURE GETASSIGRANGE
    (
        INUFAULTID      IN  TT_DAMAGE.PACKAGE_ID%TYPE,
        INUELEMENTID    IN  TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE,
        ONUINITASSIGID  OUT IF_ASSIGNABLE.ID%TYPE,
        ONUFINALASSIGID OUT IF_ASSIGNABLE.ID%TYPE
    )
    IS
        RCDAMAGE_ELEMENT DATT_DAMAGE_ELEMENT.STYTT_DAMAGE_ELEMENT; 
        
        CURSOR CUDAMAGECHILDELEMENTS
        (
            INUFATHERELEMENTID IN TT_DAMAGE_ELEMENT.FATHER_ELEMENT_ID%TYPE
        )
        IS
            SELECT  /*+ leading(tt_damage_element)
                        use_nl(tt_damage_element if_assignable) */
                    MIN(IF_ASSIGNABLE.ID) INITASSIGID,
                    MAX(IF_ASSIGNABLE.ID) FINALASSIGID
            FROM    TT_DAMAGE_ELEMENT,
                    IF_ASSIGNABLE
                    /*+ TT_BCElement.GetAssigRange SAO181853 */
            WHERE   TT_DAMAGE_ELEMENT.PACKAGE_ID = INUFAULTID
            AND     TT_DAMAGE_ELEMENT.DAMAGE_ELEME_STATUS IN (TT_BCCONSTANTS.CSBOPENDAMAGESTATUS,
                                                              TT_BCCONSTANTS.CSBNONPORCESEDDAMAGESTATUS,
                                                              TT_BCCONSTANTS.CSBCLOSEDAMAGESTATUS,
                                                              TT_BCCONSTANTS.CSBUNFOUNDEDDAMAGESTATUS)
            AND     TT_DAMAGE_ELEMENT.FATHER_ELEMENT_ID = INUFATHERELEMENTID
            AND     IF_ASSIGNABLE.ID = TT_DAMAGE_ELEMENT.ELEMENT_ID
            GROUP BY TT_DAMAGE_ELEMENT.FATHER_ELEMENT_ID;

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF (CUDAMAGECHILDELEMENTS%ISOPEN) THEN
                CLOSE CUDAMAGECHILDELEMENTS;
            END IF;
        END;
    BEGIN
        GETDAMAELEMBYPACKELEM(INUFAULTID,
                              INUELEMENTID,
                              RCDAMAGE_ELEMENT);
    
        
        OPEN CUDAMAGECHILDELEMENTS(RCDAMAGE_ELEMENT.DAMAGE_ELEMENT_ID);

        
        FETCH CUDAMAGECHILDELEMENTS INTO ONUINITASSIGID,
                                         ONUFINALASSIGID;

        
        CLOSE CUDAMAGECHILDELEMENTS;

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE;
		WHEN OTHERS THEN
            CLOSECURSORS;
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END GETASSIGRANGE;

    
















    FUNCTION FBLALLELEMENTCLOSED
    (
        INUFAULTID      IN  TT_DAMAGE.PACKAGE_ID%TYPE,
        INUELEMENTID    IN  TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        













        CURSOR CUALLELEMENTCLOSED
        IS
        SELECT  'X'
        FROM  DUAL
        WHERE EXISTS
        (
            SELECT  /*+ index(TT_DAMAGE_ELEMENT IDX_TT_DAMAGE_ELEMENT_01) */ *
            FROM    TT_DAMAGE_ELEMENT
            WHERE   TT_DAMAGE_ELEMENT.PACKAGE_ID = INUFAULTID
            AND     TT_DAMAGE_ELEMENT.FATHER_ELEMENT_ID = NVL(INUELEMENTID, TT_DAMAGE_ELEMENT.FATHER_ELEMENT_ID)
            AND     TT_DAMAGE_ELEMENT.DAMAGE_ELEME_STATUS IN
                    (
                        TT_BOCONSTANTS.CSBOPENDAMAGESTATUS,
                        TT_BOCONSTANTS.CSBNONPORCESEDDAMAGESTATUS
                    )
        );

    BEGIN
        UT_TRACE.TRACE('Inicia TT_BCElement.fblAllElementClosed',15);

        FOR RCROW IN CUALLELEMENTCLOSED LOOP
            UT_TRACE.TRACE('Finaliza TT_BCElement.fblAllElementClosed [false]',15);
            RETURN FALSE;
        END LOOP;

        UT_TRACE.TRACE('Finaliza TT_BCElement.fblAllElementClosed [true]',15);
        RETURN TRUE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    














    FUNCTION FTBGETFAULTELEMENTABSD(INUFAULTID    IN  TT_DAMAGE.PACKAGE_ID%TYPE)
    RETURN DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO
    IS
        TBASSOPACKS DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        
        PROCEDURE CLOSECURSOR
        IS
        BEGIN
            IF (CUGETFAULTELEMENTABSD%ISOPEN) THEN
                CLOSE CUGETFAULTELEMENTABSD;
            END IF;
        END;

    BEGIN
        UT_TRACE.TRACE('Inicia TT_BCElement.ftbGetFaultElementAbsd',15);

        
        CLOSECURSOR;

        
        OPEN CUGETFAULTELEMENTABSD(INUFAULTID);
        FETCH CUGETFAULTELEMENTABSD BULK COLLECT INTO TBASSOPACKS;
        CLOSE CUGETFAULTELEMENTABSD;

        
        RETURN TBASSOPACKS;

        UT_TRACE.TRACE('Finaliza TT_BCElement.ftbGetFaultElementAbsd',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            CLOSECURSOR;
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

END TT_BCELEMENT;