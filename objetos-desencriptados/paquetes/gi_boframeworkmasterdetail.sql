PACKAGE BODY GI_BOFrameWorkMasterDetail IS

































































































































    
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO204530';
    
    CNUERROR_118780     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 118780;

    
    CNUEXECUTABLE_TYPE_ID       NUMBER      := 8;
    CNUEXEC_OPER_TYPE_ID        NUMBER      := 2;
    CNUSUBSYSTEM_ID             NUMBER      := 1;
    CNUFRAMEWORK_MODULE_CODE    NUMBER      := 62;

    SBENTITYDESC        VARCHAR2(32767);
    SBPARENTENTITYDESC  VARCHAR2(32767);

	
    SBSTATEMENT VARCHAR2(32767);

    CURSOR CUMENUOPTION( INUEXECUTABLEID NUMBER )
    IS
	SELECT SA_MENU_OPTION.*,SA_MENU_OPTION.ROWID
	FROM SA_MENU_OPTION
    WHERE EXECUTABLE_ID = INUEXECUTABLEID;

    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    
    FUNCTION FSBGETTOKEN
    (
        ISBLIST     VARCHAR2,
        ISBTOKEN    VARCHAR2
    )
    RETURN VARCHAR2
    IS

        TBVALSTOINS UT_STRING.TYTB_STRING;
        BIINDEX     NUMBER;
        BLNEXT      BOOLEAN;
        SBTOKEN     VARCHAR2(2000);
        OSBTOKEN    VARCHAR2(2000);

        NULONGCADENA    NUMBER;
        NULONGCODIGO    NUMBER;
        NULONGPOSICION  NUMBER;

    BEGIN

        OSBTOKEN := NULL;
        
        UT_STRING.DELETETMPTBL;
        UT_STRING.EXTSTRING(ISBLIST,'|',TBVALSTOINS);
        UT_STRING.TBSTRTMP := TBVALSTOINS;

        BIINDEX := UT_STRING.GETTMPTBL_FIRST;
        
        LOOP

            BLNEXT := UT_STRING.GETVALUETMPTBL_NEXT( SBTOKEN, BIINDEX );

            IF NOT BLNEXT THEN
                EXIT;
            END IF;

            IF (INSTR(UPPER(SBTOKEN), ISBTOKEN) > 0 ) THEN

                NULONGCADENA    := LENGTH(SBTOKEN);
                NULONGCODIGO    := LENGTH(ISBTOKEN);
                NULONGPOSICION  := INSTR(UPPER(SBTOKEN), ISBTOKEN);

                IF ((NULONGPOSICION + NULONGCODIGO - 1) = NULONGCADENA) THEN

                    OSBTOKEN := SUBSTR(SBTOKEN,1,INSTR(SBTOKEN,' '));
                    EXIT;

                END IF;

            END IF;

        END LOOP;
        
        RETURN OSBTOKEN;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETLOVCOLUMNS
    (
        ISBLOVCOLUMNS IN OUT VARCHAR2
    )
    IS

        TBVALSTOINS     UT_STRING.TYTB_STRING;
        BIINDEX         NUMBER;
        BLNEXT          BOOLEAN;
        SBNEWLOVCOLS    VARCHAR2(2000);
        SBTOKEN         VARCHAR2(2000);
        OSBTOKEN        VARCHAR2(2000);

        NULONGCADENA    NUMBER;
        NULONGCODIGO    NUMBER;
        NULONGPOSICION  NUMBER;

        SBCOLUMN        VARCHAR2(2000);
        SBALIAS         VARCHAR2(2000);

    BEGIN

        OSBTOKEN := NULL;

        UT_STRING.DELETETMPTBL;
        UT_STRING.EXTSTRING(ISBLOVCOLUMNS,',',TBVALSTOINS);
        UT_STRING.TBSTRTMP := TBVALSTOINS;

        BIINDEX := UT_STRING.GETTMPTBL_FIRST;

        LOOP

            BLNEXT := UT_STRING.GETVALUETMPTBL_NEXT( SBTOKEN, BIINDEX );

            IF NOT BLNEXT THEN
                EXIT;
            END IF;

            SBCOLUMN := SUBSTR(SBTOKEN,0,INSTR(SBTOKEN,'"')-1);
            SBALIAS  := SUBSTR(SBTOKEN,INSTR(SBTOKEN,'"'));
            SBALIAS  := REPLACE(SBTOKEN,'"','');
            SBALIAS  := REPLACE(SBALIAS,SBCOLUMN,'');

            SBNEWLOVCOLS := SBNEWLOVCOLS || SBCOLUMN || '"' || SUBSTR(SBALIAS,0,29) || '",';

        END LOOP;

        SBNEWLOVCOLS := SBNEWLOVCOLS || 'XXX';
        SBNEWLOVCOLS := REPLACE(SBNEWLOVCOLS,',XXX','');

        ISBLOVCOLUMNS := SBNEWLOVCOLS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETAPPLICATIONPROPERTIES
    (
        INUEXECUTABLEID     IN NUMBER,
        OSBEXECMNEMONIC     OUT VARCHAR2,
        OSBEXECDESCRIPTION  OUT VARCHAR2,
        ONUMODULEID         OUT NUMBER,
        OSBMODULEDESC       OUT VARCHAR2,
        ONUCONFIGTYPEID     OUT NUMBER,
        OSBPATHFILEHELP     OUT VARCHAR2,
        OSBDIRECTEXECUTION  OUT VARCHAR2
    )
	IS
        RCEXECUTABLE    DASA_EXECUTABLE.STYSA_EXECUTABLE;
    BEGIN

        RCEXECUTABLE := DASA_EXECUTABLE.FRCGETRECORD(INUEXECUTABLEID);
        
        OSBEXECDESCRIPTION := RCEXECUTABLE.DESCRIPTION;
        OSBEXECMNEMONIC := RCEXECUTABLE.NAME;
        ONUMODULEID := RCEXECUTABLE.MODULE_ID;
        OSBPATHFILEHELP := RCEXECUTABLE.PATH_FILE_HELP;
        OSBDIRECTEXECUTION := RCEXECUTABLE.DIRECT_EXECUTION;
        
        IF (RCEXECUTABLE.PARENT_EXECUTABLE_ID = GI_BOFRAMEWORKCONSTANTS.CNUMADFWEXECUTABLE) THEN
            ONUCONFIGTYPEID := GI_BOFRAMEWORKCONSTANTS.CNUMASTERDETALFRAMEWORK;
        END IF;
        
        IF (RCEXECUTABLE.PARENT_EXECUTABLE_ID = GI_BOFRAMEWORKCONSTANTS.CNUTABFWEXECUTABLE) THEN
            ONUCONFIGTYPEID := GI_BOFRAMEWORKCONSTANTS.CNUBASICTABLEFRAMEWORK;
        END IF;

        OSBMODULEDESC := DAGE_MODULE.FSBGETDESCRIPTION(ONUMODULEID);
        


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE UPDAPPLICATIONPROPERTIES
    (
        IONUEXECUTABLEID    IN OUT NUMBER,
        ISBEXECMNEMONIC     IN VARCHAR2,
        ISBEXECDESCRIPTION  IN VARCHAR2,
        INUMODULEID         IN NUMBER,
        INUCONFIGTYPEID     IN NUMBER
    )
	IS
		
		RCSA_EXECUTABLE       DASA_EXECUTABLE.STYSA_EXECUTABLE;
		RCGI_CONFIG           DAGI_CONFIG.STYGI_CONFIG;
		RCSA_MENU_OPTION      DASA_MENU_OPTION.STYSA_MENU_OPTION;
		RCSA_ROLE_EXECUTABLES DASA_ROLE_EXECUTABLES.STYSA_ROLE_EXECUTABLES;
		
        NUPARENT_EXECUTABLE_ID NUMBER;

	BEGIN
	
        IF (NOT DAGE_MODULE.FBLEXIST(INUMODULEID)) THEN
            ERRORS.SETERROR(950,'[Modulo]');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        IF (ISBEXECDESCRIPTION IS NULL) THEN
            ERRORS.SETERROR(950,'[Descripcion]');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        IF ( INUCONFIGTYPEID = GI_BOFRAMEWORKCONSTANTS.CNUBASICTABLEFRAMEWORK ) THEN
            NUPARENT_EXECUTABLE_ID := GI_BOFRAMEWORKCONSTANTS.CNUTABFWEXECUTABLE;
        END IF;
            
        IF ( INUCONFIGTYPEID = GI_BOFRAMEWORKCONSTANTS.CNUMASTERDETALFRAMEWORK ) THEN
            NUPARENT_EXECUTABLE_ID := GI_BOFRAMEWORKCONSTANTS.CNUMADFWEXECUTABLE;
        END IF;

        
        IF ( IONUEXECUTABLEID IS NULL ) THEN

            CHECKAPPLICATIONMNEMONIC(ISBEXECMNEMONIC);
            
            RCSA_EXECUTABLE.EXECUTABLE_ID         := SA_BOEXECUTABLE.GETNEXTID;
          	RCSA_EXECUTABLE.NAME                  := ISBEXECMNEMONIC;
           	RCSA_EXECUTABLE.DESCRIPTION           := ISBEXECDESCRIPTION;
       	    RCSA_EXECUTABLE.PATH                  := NULL;
           	RCSA_EXECUTABLE.VERSION               := '1.0';
          	RCSA_EXECUTABLE.EXECUTABLE_TYPE_ID    := CNUEXECUTABLE_TYPE_ID;
       	    RCSA_EXECUTABLE.EXEC_OPER_TYPE_ID     := CNUEXEC_OPER_TYPE_ID;
           	RCSA_EXECUTABLE.MODULE_ID             := INUMODULEID;
           	RCSA_EXECUTABLE.SUBSYSTEM_ID          := CNUSUBSYSTEM_ID;
           	RCSA_EXECUTABLE.PARENT_EXECUTABLE_ID  := NUPARENT_EXECUTABLE_ID;
       	    RCSA_EXECUTABLE.LAST_RECORD_ALLOWED   := 'Y';
           	RCSA_EXECUTABLE.PATH_FILE_HELP        := NULL;
           	RCSA_EXECUTABLE.WITHOUT_RESTR_POLICY  := 'N';
           	
           	IONUEXECUTABLEID := RCSA_EXECUTABLE.EXECUTABLE_ID;

            DASA_EXECUTABLE.INSRECORD(RCSA_EXECUTABLE);
            
            RCSA_ROLE_EXECUTABLES.EXECUTABLE_ID := RCSA_EXECUTABLE.EXECUTABLE_ID;
            RCSA_ROLE_EXECUTABLES.ROLE_ID := 1;
            
            DASA_ROLE_EXECUTABLES.INSRECORD(RCSA_ROLE_EXECUTABLES);
            
        ELSE

            DASA_EXECUTABLE.LOCKBYPK(IONUEXECUTABLEID,RCSA_EXECUTABLE);
            
            IF ( RCSA_EXECUTABLE.NAME <> ISBEXECMNEMONIC ) THEN
                
                SA_BOEXECUTABLE.CHKEXECALREADYEXISTSBYNAME(ISBEXECMNEMONIC);
            END IF;
            
            GI_BOFRAMEWORKAPPLICATION.NOTCANMODIFYAPPLICATION(RCSA_EXECUTABLE.NAME );

            RCSA_EXECUTABLE.NAME                    := ISBEXECMNEMONIC;
           	RCSA_EXECUTABLE.DESCRIPTION             := ISBEXECDESCRIPTION;
           	RCSA_EXECUTABLE.MODULE_ID               := INUMODULEID;
           	RCSA_EXECUTABLE.PARENT_EXECUTABLE_ID    := NUPARENT_EXECUTABLE_ID;

            GI_BOFRAMEWORKAPPLICATION.DELCUSTOMERAPPLICATION(RCSA_EXECUTABLE.NAME);

            DASA_EXECUTABLE.UPDRECORD(RCSA_EXECUTABLE);
            GI_BOFRAMEWORKAPPLICATION.UPDATEEXECUTABLEVERSION(ISBEXECMNEMONIC);
           	
        END IF;

        
        OPEN CUMENUOPTION(RCSA_EXECUTABLE.EXECUTABLE_ID);
        FETCH CUMENUOPTION INTO RCSA_MENU_OPTION;
        CLOSE CUMENUOPTION;
        
        IF ( RCSA_MENU_OPTION.MENU_OPTION_ID IS NOT NULL) THEN
        
            RCSA_MENU_OPTION.NAME := RCSA_EXECUTABLE.NAME;
            RCSA_MENU_OPTION.DESCRIPTION := RCSA_EXECUTABLE.DESCRIPTION;

            DASA_MENU_OPTION.UPDRECORD(RCSA_MENU_OPTION);

        END IF;

        GI_BOFRAMEWORKAPPLICATION.ADDCUSTOMERAPPLICATION(ISBEXECMNEMONIC);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE CHECKENTITYEXIST
    (
        ISBENTITYNAME        IN VARCHAR2,
        ISBENTITYDISPLAYNAME IN VARCHAR2
    )
    IS
    BEGIN

        IF ( NOT UT_OBJECT.FBOEXISTOBJECT(ISBENTITYNAME) ) THEN
            ERRORS.SETERROR(8653, '[' || UPPER(ISBENTITYDISPLAYNAME) || '] (' || UPPER(ISBENTITYNAME) || ')' );
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE CHECKAPPLICATIONMNEMONIC
    (
        ISBEXECMNEMONIC IN VARCHAR2
    )
    IS
    BEGIN

        IF (ISBEXECMNEMONIC IS NULL ) THEN
            ERRORS.SETERROR(950, '[Nombre]');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        SA_BOEXECUTABLE.CHKEXECALREADYEXISTSBYNAME(ISBEXECMNEMONIC);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE DELAPPLICATION
    (
        INUEXECUTABLEID IN NUMBER
    )
    IS
        SBAPPLICATIONNAME SA_EXECUTABLE.NAME%TYPE;
    BEGIN
        SBAPPLICATIONNAME := DASA_EXECUTABLE.FSBGETNAME(INUEXECUTABLEID);
        
        
        SA_BOEXECUTABLESYNON.DELEXECUTABLESYNONBYID(INUEXECUTABLEID);
        
        GI_BOFRAMEWORKAPPLICATION.NOTCANMODIFYAPPLICATION(SBAPPLICATIONNAME);
        GI_BOFRAMEWORKAPPLICATION.DELCUSTOMERAPPLICATION(SBAPPLICATIONNAME);
        
        DELATTRIBUTES(INUEXECUTABLEID);
        DELENTITIES(INUEXECUTABLEID);
        
        GI_BCFRAMEWORKMASTERDETAIL.DELAPPLICATION(INUEXECUTABLEID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE DELENTITIES
    (
        INUEXECUTABLEID IN NUMBER
    )
    IS
    BEGIN

        DELETE GI_ENTITY_DISP_DATA
        WHERE EXECUTABLE_ID = INUEXECUTABLEID;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE CHECKDEFAULTWHERE
    (
        INUENTITYID        NUMBER,
        ISBDEFAULTWHERE    VARCHAR2
    )
    IS
        SBENTITYDESC    VARCHAR2(32767);
    BEGIN

        IF ( ISBDEFAULTWHERE IS NULL ) THEN
            RETURN;
        END IF;
            
        BEGIN
        
            SBENTITYDESC := UPPER(DAGE_ENTITY.FSBGETDISPLAY_NAME(INUENTITYID)) || ' ('
                            || DAGE_ENTITY.FSBGETNAME_(INUENTITYID) || ')';

            SBSTATEMENT := 'SELECT ' || CHR(39) || 'x' || CHR(39)
                           || ' FROM ' || DAGE_ENTITY.FSBGETNAME_(INUENTITYID)
                           || ' WHERE ' || ISBDEFAULTWHERE
                           || ' AND ROWNUM = 1' ;

            EXECUTE IMMEDIATE SBSTATEMENT;

        EXCEPTION

            WHEN EX.CONTROLLED_ERROR THEN
                ERRORS.SETERROR(111304, SBENTITYDESC);
                RAISE EX.CONTROLLED_ERROR;

            WHEN OTHERS THEN
                ERRORS.SETERROR(111304, SBENTITYDESC);
                RAISE EX.CONTROLLED_ERROR;
        END;
        
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE CHECKJOINCONDITION
    (
        INUENTITYID         NUMBER,
        INUPARENTENTITYID   NUMBER,
        ISBJOINCONDITION    VARCHAR2
    )
    IS
    BEGIN

        IF ( INUPARENTENTITYID IS NULL ) THEN
            RETURN;
        END IF;

        SBENTITYDESC := UPPER(DAGE_ENTITY.FSBGETDISPLAY_NAME(INUENTITYID)) || ' ('
                        || DAGE_ENTITY.FSBGETNAME_(INUENTITYID) || ')';

        SBPARENTENTITYDESC := UPPER(DAGE_ENTITY.FSBGETDISPLAY_NAME(INUPARENTENTITYID)) || ' ('
                              || DAGE_ENTITY.FSBGETNAME_(INUPARENTENTITYID) || ')';

        IF ( ISBJOINCONDITION IS NULL ) THEN
            RETURN;
        END IF;
        
        IF INSTR(ISBJOINCONDITION,DAGE_ENTITY.FSBGETNAME_(INUENTITYID)) = 0 OR
          INSTR(ISBJOINCONDITION,DAGE_ENTITY.FSBGETNAME_(INUPARENTENTITYID)) = 0 THEN

            ERRORS.SETERROR(111364, SBENTITYDESC );
            RAISE EX.CONTROLLED_ERROR;

        END IF;

        BEGIN
        
            SBSTATEMENT := 'SELECT ' || CHR(39) || 'x' || CHR(39)
                        || ' FROM ' || DAGE_ENTITY.FSBGETNAME_(INUENTITYID)
                        || ' , ' || DAGE_ENTITY.FSBGETNAME_(INUPARENTENTITYID)
                        || ' WHERE ' || ISBJOINCONDITION
                        || ' AND ROWNUM = 1' ;

            EXECUTE IMMEDIATE SBSTATEMENT;

        EXCEPTION

            WHEN EX.CONTROLLED_ERROR THEN
                ERRORS.SETERROR(111343, SBENTITYDESC || '|' || SBPARENTENTITYDESC );
                RAISE EX.CONTROLLED_ERROR;

            WHEN OTHERS THEN
                ERRORS.SETERROR(111343, SBENTITYDESC || '|' || SBPARENTENTITYDESC );
                RAISE EX.CONTROLLED_ERROR;

        END;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE REPLACETOKENS
    (
        IOSBSTATEMENT   IN OUT NOCOPY VARCHAR2
    )
    IS
        NUPOS           PLS_INTEGER := 1;
        SBCHAR          VARCHAR2(1);
        SBTOKEN         VARCHAR2(4000) := NULL;
        SBNEWSTATEMENT  VARCHAR2(32767) := NULL;
    BEGIN

        IF (LENGTH(IOSBSTATEMENT)) = 0 THEN
            RETURN;
        END IF;
        
        IF (INSTR ('[', SBCHAR) = 0) THEN
            RETURN;
        END IF;
        
        IF (INSTR (']', SBCHAR) = 0) THEN
            RETURN;
        END IF;

        SBNEWSTATEMENT :=  IOSBSTATEMENT;

        WHILE (NUPOS <= LENGTH(IOSBSTATEMENT)) LOOP
             SBCHAR := SUBSTR(IOSBSTATEMENT, NUPOS, 1);
             IF (INSTR ('[', SBCHAR) > 0) THEN 
                WHILE (INSTR(']', SBCHAR) = 0) LOOP
                    SBCHAR := SUBSTR(IOSBSTATEMENT, NUPOS, 1);
                    NUPOS   := NUPOS + 1;
                    SBTOKEN := SBTOKEN || SBCHAR;
             END LOOP;
             SBNEWSTATEMENT := REPLACE(SBNEWSTATEMENT,SBTOKEN,'NULL');
             SBTOKEN := NULL;
         END IF;

         NUPOS := NUPOS + 1;

      END LOOP;

      IOSBSTATEMENT := SBNEWSTATEMENT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE CHECKLISTOFVALUES
    (
        ISBLISTOFVALUES    VARCHAR2
    )
    IS
        SBSTATEMENT VARCHAR2(32767) := NULL;
    BEGIN

        IF ( ISBLISTOFVALUES IS NULL ) THEN
            RETURN;
        END IF;
        
        SBSTATEMENT := ISBLISTOFVALUES;
        
        REPLACETOKENS(SBSTATEMENT);
        
        EXECUTE IMMEDIATE SBSTATEMENT;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.SETERROR(111366);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR(111366);
            RAISE EX.CONTROLLED_ERROR;
    END;


	PROCEDURE INSENTITYPROPERTIES
    (
        INUEXECUTABLEID     IN NUMBER,
        INUENTITYID         IN NUMBER,
        INUPARENTENTITYID   IN NUMBER,
        ISBDISPLAYTYPE      IN VARCHAR2,
        INULEVEL            IN NUMBER,
        INUPOSITIONINLEVEL  IN NUMBER,
        IOBJICON_           IN BLOB,
        ISBDEFAULT_WHERE	IN VARCHAR2,
        ISBJOIN_CONDITION	IN VARCHAR2,
        ISBREAD_ONLY	    IN VARCHAR2,
        ISBALLOW_INSERT	    IN VARCHAR2,
        ISBALLOW_DELETE	    IN VARCHAR2,
        INUFUNCTIONALSET    IN NUMBER
    )
    IS
        RCGI_ENTITY_DISP_DATA    DAGI_ENTITY_DISP_DATA.STYGI_ENTITY_DISP_DATA;
    BEGIN

        CHECKDEFAULTWHERE(INUENTITYID, ISBDEFAULT_WHERE);

        CHECKJOINCONDITION(INUENTITYID, INUPARENTENTITYID, ISBJOIN_CONDITION);

        IF ( INULEVEL > 0 AND ISBJOIN_CONDITION IS NULL ) THEN
            ERRORS.SETERROR(111363, SBENTITYDESC || '|' || SBPARENTENTITYDESC);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        

        RCGI_ENTITY_DISP_DATA.EXECUTABLE_ID     := INUEXECUTABLEID;
        RCGI_ENTITY_DISP_DATA.ENTITY_ID         := INUENTITYID;
        RCGI_ENTITY_DISP_DATA.PARENT_ENTITY_ID  := INUPARENTENTITYID;
        RCGI_ENTITY_DISP_DATA.DISPLAY_TYPE      := ISBDISPLAYTYPE;
        RCGI_ENTITY_DISP_DATA.LEVEL_            := INULEVEL;
        RCGI_ENTITY_DISP_DATA.POSITION_IN_LEVEL := INUPOSITIONINLEVEL;
        RCGI_ENTITY_DISP_DATA.ICON_             := IOBJICON_;
        RCGI_ENTITY_DISP_DATA.DEFAULT_WHERE     := ISBDEFAULT_WHERE;
        RCGI_ENTITY_DISP_DATA.JOIN_CONDITION    := ISBJOIN_CONDITION;
        RCGI_ENTITY_DISP_DATA.READ_ONLY         := ISBREAD_ONLY;
        RCGI_ENTITY_DISP_DATA.ALLOW_INSERT      := ISBALLOW_INSERT;
        RCGI_ENTITY_DISP_DATA.ALLOW_DELETE      := ISBALLOW_DELETE;
        RCGI_ENTITY_DISP_DATA.CONFIGURA_TYPE_ID := INUFUNCTIONALSET;

        DAGI_ENTITY_DISP_DATA.INSRECORD(RCGI_ENTITY_DISP_DATA);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETENTITIES
    (
        INUEXECUTABLEID IN NUMBER,
        ORFENTITIES     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFENTITIES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETENTITIESBYEXECUTABLE(INUEXECUTABLEID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETENTITIESTOSHOW
    (
        INUEXECUTABLEID IN NUMBER,
        ORFENTITIES     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFENTITIES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETENTITIESTOSHOW(INUEXECUTABLEID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETENTITYTOSHOW
    (
        INUEXECUTABLEID IN NUMBER,
        INUENTITYID     IN NUMBER,
        ORFENTITIES     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFENTITIES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETENTITYTOSHOW(INUEXECUTABLEID, INUENTITYID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETENTITYTOSHOWBYNAME
    (
        INUEXECUTABLEID IN NUMBER,
        ISBENTITYNAME   IN VARCHAR2,
        ISBDEFAULTWHERE IN VARCHAR2,
        ORFENTITIES     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFENTITIES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETENTITYTOSHOWBYNAME(INUEXECUTABLEID, ISBENTITYNAME,ISBDEFAULTWHERE);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETATTRIBUTESTOSHOW
    (
        INUEXECUTABLEID IN NUMBER,
        INUENTITYID     IN NUMBER,
        ORFATTRIBUTES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        IF (NOT GI_BCFRAMEWORKMASTERDETAIL.FBLSAMEATTRIBSAMOUNT(INUEXECUTABLEID,INUENTITYID) ) THEN
            ERRORS.SETERROR(CNUERROR_118780,DAGE_ENTITY.FSBGETDISPLAY_NAME(INUENTITYID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        ORFATTRIBUTES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETATTRIBUTESTOSHOW(INUEXECUTABLEID,INUENTITYID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE ISAREFERENTIALRELATION
    (
        INUPARENTENTITYID IN NUMBER,
        INUCHILDENTITYID IN NUMBER,
        OBLRETURN OUT BOOLEAN
    )
    IS
    BEGIN
        OBLRETURN := GI_BCFRAMEWORKMASTERDETAIL.FBLREFERENTIALRELATION(INUPARENTENTITYID, INUCHILDENTITYID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

    
    PROCEDURE GETENTITY
    (
        INUENTITYID IN NUMBER,
        ORFENTITIES     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFENTITIES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETENTITIESBYID(INUENTITYID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETENTITYPRIMARYKEY
    (
        ISBENTITYNAME IN VARCHAR2,
        ORFENTITIES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFENTITIES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETENTITYPRIMARYKEY(ISBENTITYNAME);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETATTRIBUTE
    (
        INUEXECUTABLEID IN NUMBER,
        INUENTITYID     IN NUMBER,
        INUATTRIBUTEID  IN NUMBER,
        ORFATTRIBUTES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFATTRIBUTES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETATTRIBUTEDATA(INUEXECUTABLEID, INUENTITYID, INUATTRIBUTEID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETENTITYATTRIBUTES
    (
        ISBENTITYNAME   IN VARCHAR2,
        ORFATTRIBUTES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUENTITYID NUMBER;
    BEGIN

        NUENTITYID := GE_BOENTITY.GETENTITYIDBYNAME(ISBENTITYNAME);

        ORFATTRIBUTES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETENTITYATTRIBUTES(NUENTITYID);
        
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE DELATTRIBUTES
    (
        INUEXECUTABLEID IN NUMBER
    )
    IS
    BEGIN

        DELETE GI_ATTRIB_DISP_DATA
        WHERE EXECUTABLE_ID = INUEXECUTABLEID;
          
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
	PROCEDURE INSATTRIBUTEPROPERTIES
    (
        INUEXECUTABLEID         IN NUMBER,
        INUENTITYID             IN NUMBER,
        INUENTITYATTRIBUTEID    IN NUMBER,
        ISBLOV                  IN VARCHAR2,
        ISBLOVTYPE              IN VARCHAR2,
        ISBLOVCODE              IN VARCHAR2,
        ISBLOVDESC              IN VARCHAR2,
        ISBLOVATTRS             IN VARCHAR2,
        ISBLOVFROM              IN VARCHAR2,
        ISBLOVWHERE             IN VARCHAR2,
        ISBLOVORDER             IN VARCHAR2,
        ISBLOVPARENTATTR        IN VARCHAR2,
        ISBALLOWUPDATE          IN VARCHAR2,
        ISBUSERULEEDITOR        IN VARCHAR2,
        INUPOSITION             IN NUMBER,
        ISBVISIBLE	            IN VARCHAR2,
        INUENTITYCONFIGTYPE     IN NUMBER,
        INUATTRIBCONFIGTYPE     IN NUMBER,
        ISBSTYLECASE            IN VARCHAR2,
        ISBSELECTIONORDER       IN VARCHAR2,
        INUSELORDERSEQUENCE     IN NUMBER
    )
    IS
        RCGI_ATTRIB_DISP_DATA    DAGI_ATTRIB_DISP_DATA.STYGI_ATTRIB_DISP_DATA;
        
        SBLOVWHERE      VARCHAR2(32767);
        SBLOVSTATEMENT  VARCHAR2(32767);
        SBPARENTATTRIB  VARCHAR2(32767);
        
    BEGIN

        SBLOVWHERE      := ISBLOVWHERE;
        SBLOVSTATEMENT  := ISBLOV;
        
        IF ( ISBLOV IS NOT NULL ) THEN

            IF (INSTR(UPPER(ISBLOV),'GR_CONFIG_EXPRESSION') > 0 ) THEN

                IF (INUENTITYCONFIGTYPE IS NULL AND INUATTRIBCONFIGTYPE IS NULL) THEN

                    ERRORS.SETERROR(112842, '[' || DAGE_ENTITY.FSBGETDISPLAY_NAME(INUENTITYID) || ']');
                    RAISE EX.CONTROLLED_ERROR;

                END IF;
                
                IF (SBLOVWHERE IS NULL) THEN
                
                    SBPARENTATTRIB := DAGE_ENTITY_ATTRIBUTES.FSBGETTECHNICAL_NAME(INUENTITYATTRIBUTEID);
                    SBLOVWHERE := 'WHERE CONFIG_EXPRESSION_ID = ' || SBPARENTATTRIB || '|';
                    SBLOVSTATEMENT := SBLOVSTATEMENT || ' WHERE CONFIG_EXPRESSION_ID = [' || SBPARENTATTRIB || ']';
                    
                END IF;
                
            END IF;
            
            IF (ISBLOVTYPE = 'H') THEN

                SBPARENTATTRIB := DAGE_ENTITY_ATTRIBUTES.FSBGETTECHNICAL_NAME(INUENTITYATTRIBUTEID);

                IF ( SBLOVWHERE IS NULL ) THEN
                    SBLOVWHERE := 'WHERE ' || FSBGETTOKEN(ISBLOVATTRS,ISBLOVCODE) || ' = ' || SBPARENTATTRIB || '|';
                    SBLOVSTATEMENT := SBLOVSTATEMENT || ' WHERE ' || FSBGETTOKEN(ISBLOVATTRS,ISBLOVCODE) || ' = [' || SBPARENTATTRIB || ']';
                END IF;

            END IF;

        END IF;
        
        RCGI_ATTRIB_DISP_DATA.EXECUTABLE_ID       := INUEXECUTABLEID;
        RCGI_ATTRIB_DISP_DATA.ENTITY_ID           := INUENTITYID;
        RCGI_ATTRIB_DISP_DATA.ENTITY_ATTRIBUTE_ID := INUENTITYATTRIBUTEID;
        RCGI_ATTRIB_DISP_DATA.LIST_OF_VALUES      := SBLOVSTATEMENT; 
        RCGI_ATTRIB_DISP_DATA.LIST_OF_VALUE_TYPE  := ISBLOVTYPE;
        RCGI_ATTRIB_DISP_DATA.LIST_OF_VALUE_CODE  := ISBLOVCODE;
        RCGI_ATTRIB_DISP_DATA.LIST_OF_VALUE_DESC  := ISBLOVDESC;

        RCGI_ATTRIB_DISP_DATA.LIST_OF_VALUE_ATTR  := ISBLOVATTRS;
        RCGI_ATTRIB_DISP_DATA.LIST_OF_VALUE_FROM  := ISBLOVFROM;
        RCGI_ATTRIB_DISP_DATA.LIST_OF_VALUE_WHERE := SBLOVWHERE; 
        RCGI_ATTRIB_DISP_DATA.LIST_OF_VALUE_ORDER := ISBLOVORDER;
        RCGI_ATTRIB_DISP_DATA.LIST_OF_VALUE_P_ATTR := ISBLOVPARENTATTR;

        IF (INSTR(UPPER(ISBLOV),'GR_CONFIG_EXPRESSION') > 0 ) THEN
            RCGI_ATTRIB_DISP_DATA.ALLOW_UPDATE := 'N';
        ELSE
            RCGI_ATTRIB_DISP_DATA.ALLOW_UPDATE := ISBALLOWUPDATE;
        END IF;

        RCGI_ATTRIB_DISP_DATA.USE_RULE_EDITOR   := ISBUSERULEEDITOR;
        RCGI_ATTRIB_DISP_DATA.POSITION          := INUPOSITION;
        RCGI_ATTRIB_DISP_DATA.VISIBLE_          := ISBVISIBLE;
        RCGI_ATTRIB_DISP_DATA.STYLE_CASE        := ISBSTYLECASE;
        RCGI_ATTRIB_DISP_DATA.SELECTION_ORDER   := ISBSELECTIONORDER;
        RCGI_ATTRIB_DISP_DATA.SEL_ORDER_SEQ     := INUSELORDERSEQUENCE;
        RCGI_ATTRIB_DISP_DATA.CONFIGURA_TYPE_ID := INUATTRIBCONFIGTYPE;

        DAGI_ATTRIB_DISP_DATA.INSRECORD(RCGI_ATTRIB_DISP_DATA);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETATTRIBALLOWEDVALUES
    (
        INUATTRIBUTEID  IN NUMBER,
        ORFATTRIBUTES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFATTRIBUTES := GI_BCFRAMEWORKMASTERDETAIL.FRCGETATTRIBALLOWEDVALUES(INUATTRIBUTEID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETFRAMEWORKMODULENAME
    (
        OSBMODULEDESC OUT VARCHAR2
    )
	IS
    BEGIN
        OSBMODULEDESC := DAGE_MODULE.FSBGETDESCRIPTION(CNUFRAMEWORK_MODULE_CODE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETMODULENAME
    (
        INUMODULEID   IN  NUMBER,
        OSBMODULEDESC OUT VARCHAR2
    )
	IS
    BEGIN
        OSBMODULEDESC := DAGE_MODULE.FSBGETDESCRIPTION(INUMODULEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETCONFIGTYPENAME
    (
        INUCONFIGTYPEID   IN  NUMBER,
        OSBCONFIGTYPEDESC OUT VARCHAR2
    )
	IS
    BEGIN
        OSBCONFIGTYPEDESC := DAGI_CONFIG_TYPE.FSBGETDESCRIPTION(INUCONFIGTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETENTITYMODULE
    (
        INUENTITYID   IN  NUMBER,
        OSBMODULEID   OUT VARCHAR2,
        OSBMODULEDESC OUT VARCHAR2
    )
	IS
    BEGIN

        OSBMODULEID := DAGE_ENTITY.FNUGETMODULE_ID(INUENTITYID);
        OSBMODULEDESC := DAGE_MODULE.FSBGETDESCRIPTION(OSBMODULEID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETPARENTEXECUTABLE
    (
        INUEXECUTABLEID     IN  NUMBER,
        OSBPARENTEXECUTABLE OUT VARCHAR2
    )
    IS
    BEGIN
        OSBPARENTEXECUTABLE := DASA_EXECUTABLE.FNUGETPARENT_EXECUTABLE_ID(INUEXECUTABLEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE INSNEWRECORD
    (
        ISBSTATEMENT IN VARCHAR,
        OSBROWID OUT VARCHAR2
    )
    IS
        SBSTATEMENT VARCHAR2(32767);
    BEGIN

        SBSTATEMENT := ISBSTATEMENT || ' returning rowid INTO :orowid';
        EXECUTE IMMEDIATE SBSTATEMENT USING OUT OSBROWID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END INSNEWRECORD;

    
    PROCEDURE SETCONFIGEXPRESSION
    (
        INUEXECUTABLEID IN GI_ENTITY_DISP_DATA.EXECUTABLE_ID%TYPE,
        ORFDATA         OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OPEN ORFDATA FOR
            SELECT CONFIG_EXPRESSION_ID EXPRESSION_ID, DESCRIPTION
            FROM GR_CONFIG_EXPRESSION
            WHERE CONFIGURA_TYPE_ID IN (
                SELECT CONFIGURA_TYPE_ID
                FROM GI_ENTITY_DISP_DATA
                WHERE EXECUTABLE_ID = INUEXECUTABLEID
                    AND CONFIGURA_TYPE_ID IS NOT NULL
                UNION
                SELECT CONFIGURA_TYPE_ID
                FROM GI_ATTRIB_DISP_DATA
                WHERE EXECUTABLE_ID = INUEXECUTABLEID
                    AND CONFIGURA_TYPE_ID IS NOT NULL
            ) ;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END SETCONFIGEXPRESSION;

    PROCEDURE GETCONFIGEXPRESSION
    (
        INUENTITYATTRIB   IN GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE,
        OSBSTATEMENT     OUT VARCHAR2
    )
	IS

        
        NUENTITY    NUMBER;
        SBCOLUMN    VARCHAR2(2000);
        SBTABLE     VARCHAR2(2000);

	BEGIN
		

		NUENTITY := DAGE_ENTITY_ATTRIBUTES.FNUGETENTITY_ID(INUENTITYATTRIB);
        SBCOLUMN := DAGE_ENTITY_ATTRIBUTES.FSBGETTECHNICAL_NAME(INUENTITYATTRIB);
        SBTABLE := DAGE_ENTITY.FSBGETNAME_(NUENTITY);

        OSBSTATEMENT := 'SELECT DISTINCT config_expression_id EXPRESSION_ID, description' || CHR(10)
                    || 'FROM gr_config_expression' || CHR(10)
                    || 'WHERE config_expression_id in (' || CHR(10)
                    || 'SELECT ' || SBTABLE || '.' ||SBCOLUMN || ' FROM ' || SBTABLE || CHR(10)
                    || ' WHERE ' || SBTABLE || '.' ||SBCOLUMN || ' IS NOT NULL' || ') ';

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETHEAVYLIST
    (
        INUENTITYATTRIB   IN GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE,
        ISBLOVSTATEMENT   IN GI_ATTRIB_DISP_DATA.LIST_OF_VALUES%TYPE,
        ORFDATA          OUT CONSTANTS.TYREFCURSOR
    )
	IS

        
        NUENTITY        NUMBER;
        SBCOLUMN        VARCHAR2(2000);
        SBTABLE         VARCHAR2(2000);
        SBLOVSTATEMENT  GI_ATTRIB_DISP_DATA.LIST_OF_VALUES%TYPE;
        SBNEWLOVSTATEMENT  GI_ATTRIB_DISP_DATA.LIST_OF_VALUES%TYPE;
        SBLOVCOLUMNS    GI_ATTRIB_DISP_DATA.LIST_OF_VALUES%TYPE;
        SBLOVFROM       GI_ATTRIB_DISP_DATA.LIST_OF_VALUES%TYPE;
	BEGIN
		

		NUENTITY := DAGE_ENTITY_ATTRIBUTES.FNUGETENTITY_ID(INUENTITYATTRIB);
        SBCOLUMN := DAGE_ENTITY_ATTRIBUTES.FSBGETTECHNICAL_NAME(INUENTITYATTRIB);
        SBTABLE := DAGE_ENTITY.FSBGETNAME_(NUENTITY);

        SBLOVSTATEMENT := ISBLOVSTATEMENT;
        SBLOVSTATEMENT := REPLACE(SBLOVSTATEMENT,'= [',' [');
        SBNEWLOVSTATEMENT := ' IN (SELECT ' || SBCOLUMN || ' FROM ' || SBTABLE ||
                             ' WHERE ' || SBCOLUMN || ' IS NOT NULL)';

        SBLOVCOLUMNS := SUBSTR(SBLOVSTATEMENT,0,INSTR(SBLOVSTATEMENT,'FROM')-1);
        SBLOVFROM    := RTRIM(LTRIM(SUBSTR(SBLOVSTATEMENT,INSTR(SBLOVSTATEMENT,'FROM')-1)));
        SBLOVCOLUMNS := REPLACE(SBLOVCOLUMNS,'SELECT','');
        SBLOVCOLUMNS := RTRIM(LTRIM(SBLOVCOLUMNS));
        GETLOVCOLUMNS(SBLOVCOLUMNS);
        SBLOVSTATEMENT := 'SELECT ' || SBLOVCOLUMNS || ' ' || SBLOVFROM;

        SBLOVSTATEMENT := REPLACE(SBLOVSTATEMENT,'['||SBCOLUMN||']',SBNEWLOVSTATEMENT);

        OPEN ORFDATA
        FOR SBLOVSTATEMENT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETCOMPOSELOV
    (
        INUENTITYATTRIB   IN GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE,
        ISBLOVSTATEMENT   IN GI_ATTRIB_DISP_DATA.LIST_OF_VALUES%TYPE,
        ORFDATA          OUT CONSTANTS.TYREFCURSOR
    )
	IS

        CURSOR CULOVENTITY( SBENTITY GE_ENTITY.NAME_%TYPE)
        IS
        SELECT ENTITY_ID
        FROM GE_ENTITY
        WHERE NAME_ = SBENTITY;

        CURSOR CUPRIMKEY( NUENTITY NUMBER)
        IS
        SELECT TECHNICAL_NAME
        FROM GE_ENTITY_ATTRIBUTES
        WHERE ENTITY_ID = NUENTITY
          AND KEY_ = 'Y'
        ORDER BY SECUENCE_;

        
        NUENTITY        NUMBER;
        NULOVENTITY     NUMBER;
        SBCOLUMN        VARCHAR2(2000);
        SBTABLE         VARCHAR2(2000);
        SBPRIMKEY       VARCHAR2(2000);
        SBLOVTABLE      VARCHAR2(2000);
        SBLOVSTATEMENT  GI_ATTRIB_DISP_DATA.LIST_OF_VALUES%TYPE;
        SBNEWLOVSTATEMENT  GI_ATTRIB_DISP_DATA.LIST_OF_VALUES%TYPE;

	BEGIN
		
		NUENTITY := DAGE_ENTITY_ATTRIBUTES.FNUGETENTITY_ID(INUENTITYATTRIB);
        SBCOLUMN := DAGE_ENTITY_ATTRIBUTES.FSBGETTECHNICAL_NAME(INUENTITYATTRIB);
        SBTABLE := DAGE_ENTITY.FSBGETNAME_(NUENTITY);

        SBLOVSTATEMENT := ISBLOVSTATEMENT;
        SBLOVSTATEMENT := REPLACE(SBLOVSTATEMENT,'=','');

        SBLOVSTATEMENT := SUBSTR(SBLOVSTATEMENT,1,INSTR(SBLOVSTATEMENT,'WHERE')-1);

        OPEN ORFDATA
        FOR SBLOVSTATEMENT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETDUPLICATEATTRIBCASE
    (
        INUEXECUTABLEID    IN NUMBER,
        INUATTRIBUTEID     IN NUMBER,
        ISBSTYLECASE       IN VARCHAR2,
        OSBEXECUTABLE     OUT VARCHAR2
    )
    IS
    BEGIN

        OSBEXECUTABLE :=
            GI_BCFRAMEWORKMASTERDETAIL.FSBDUPLICATEATTRIBCASE(INUEXECUTABLEID,INUATTRIBUTEID,ISBSTYLECASE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETORDERBYCOLUMNS
    (
        INUEXECUTABLEID  IN NUMBER,
        INUENTITYID      IN NUMBER,
        ORFDATA          OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
         ORFDATA := GI_BCFRAMEWORKMASTERDETAIL.FRCGETORDERBYCOLUMNS(INUEXECUTABLEID, INUENTITYID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETORDERBY
    (
        INUEXECUTABLEID  IN NUMBER,
        INUENTITYID      IN NUMBER,
        OSBORDERBY       OUT VARCHAR2
    )
    IS
    BEGIN
         OSBORDERBY := GI_BCFRAMEWORKMASTERDETAIL.FSBGETORDERBY(INUEXECUTABLEID,INUENTITYID);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETMODULES
    (
        ORFDATA OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

         ORFDATA := GI_BCFRAMEWORKMASTERDETAIL.FRCGETMODULES;

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETCONFIGTYPES
    (
        INUMODULEID IN  NUMBER,
        ORFDATA     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

         ORFDATA := GI_BCFRAMEWORKMASTERDETAIL.FRCGETCONFIGTYPES(INUMODULEID);

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETEXECUTABLEBYNAME
    (
        ISBEXECUTABLENAME   IN VARCHAR2,
        ONUEXECUTABLEID     OUT NUMBER
    )
    IS
    BEGIN

        IF (UT_CONVERT.IS_NUMBER(ISBEXECUTABLENAME) AND DASA_EXECUTABLE.FBLEXIST(ISBEXECUTABLENAME)) THEN
            ONUEXECUTABLEID := ISBEXECUTABLENAME;
        END IF;
        
        ONUEXECUTABLEID := SA_BOEXECUTABLE.FNUGETEXECUTABLEIDBYNAME(ISBEXECUTABLENAME);
    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
















    PROCEDURE GETENTITIESCHILD
    (
        INUENTITYID         IN  GE_ENTITY.ENTITY_ID%TYPE,
        OCUCHILDENTITIES    OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        GI_BCFRAMEWORKMASTERDETAIL.ENTITIESCHILDRELATED(INUENTITYID, OCUCHILDENTITIES);
    END;

    
















    PROCEDURE GETENTITIESPARENT
    (
        INUENTITYID         IN  GE_ENTITY.ENTITY_ID%TYPE,
        OCUPARENTENTITIES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        GI_BCFRAMEWORKMASTERDETAIL.ENTITIESPARENTRELATED(INUENTITYID, OCUPARENTENTITIES);
    END;

    
    
















    PROCEDURE COLUMNINFO
    (
        INUENTITYID       IN  GE_ENTITY.ENTITY_ID%TYPE,
        OCUCOLUMNINFO     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        GI_BCFRAMEWORKMASTERDETAIL.COLUMNINFO(INUENTITYID, OCUCOLUMNINFO);
    END;
    
    

















    PROCEDURE GETRESULTFROMQUERY
    (
        ISBSTATEMENT        IN      GI_ATTRIB_DISP_DATA.LIST_OF_VALUES%TYPE,
        ORFDATA             OUT     CONSTANTS.TYREFCURSOR
    )
	IS
	BEGIN
        UT_TRACE.TRACE('BEGIN GI_BOFrameWorkMasterDetail.GetResultFromQuery', 2);
        UT_TRACE.TRACE('PARAM isbStatement: ' || ISBSTATEMENT, 3);

        OPEN ORFDATA
        FOR ISBSTATEMENT;
        
        UT_TRACE.TRACE('END GI_BOFrameWorkMasterDetail.GetResultFromQuery', 2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    















    PROCEDURE VALCOLCOUNTEDBYENTID
    (
        INUENTITYID         IN  GE_ENTITY.ENTITY_ID%TYPE,
        INUCOLUMNSCOUNTED   IN  NUMBER
    )
    IS
        NUCOLUMNSCOUNTED    NUMBER;
    BEGIN
    
        NUCOLUMNSCOUNTED := GI_BCFRAMEWORKMASTERDETAIL.FNUCOUNTSCHEMECOL(INUENTITYID);
        
        IF (NUCOLUMNSCOUNTED != INUCOLUMNSCOUNTED) THEN
            ERRORS.SETERROR(CNUERROR_118780,DAGE_ENTITY.FSBGETDISPLAY_NAME(INUENTITYID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    PROCEDURE GETLISTOFVALUESSCHEME
    (
        ISBLISTOFVALUES IN  VARCHAR2,
        ORFLISTOFVALUES OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSTATEMENT VARCHAR2(32767) := NULL;
    BEGIN

        IF ( ISBLISTOFVALUES IS NULL ) THEN
            RETURN;
        END IF;

        SBSTATEMENT := ISBLISTOFVALUES;

        REPLACETOKENS(SBSTATEMENT);

        OPEN ORFLISTOFVALUES FOR SBSTATEMENT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETLISTOFVALUESSCHEME;

END GI_BOFRAMEWORKMASTERDETAIL;