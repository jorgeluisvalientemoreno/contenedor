PACKAGE BODY sa_boPasswordEncrypt
IS
    
    
    
    CSBVERSION CONSTANT VARCHAR2(20) := 'SAO203074';

    CNUINVALID_CHARACTER  CONSTANT NUMBER(4) := 766;
    
    CNUMINLENPW  CONSTANT  NUMBER(2)    := 3;   
    CNUMINLENUSR CONSTANT  NUMBER(2)    := 3;   
    CNUMAXLENPW  CONSTANT  NUMBER(2)    := 30;  

    
    
    

    
    
    
    
    
    
    

    
    
    
    
    
    
    

    










    FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN CSBVERSION;

    END;

    














    FUNCTION FNUGETASCRED
    (
        SBWORD VARCHAR2
    )
    RETURN NUMBER
    IS

    NUASC       NUMBER(10) := 0; 
    NULENGTH    NUMBER(10);
    NUTMPASC    NUMBER(10) := 0;
    SBTMPWORD   VARCHAR2(500) := NULL;

    BEGIN

        
        NULENGTH := LENGTH (SBWORD);

        
        FOR NUPOS IN 1..NULENGTH LOOP
            NUASC := NUASC + ASCII (SUBSTR (SBWORD, NUPOS, 1));
        END LOOP;

        
        WHILE NUASC > 9 LOOP
            NUTMPASC := 0;

            FOR NUPOS IN 1..LENGTH (NUASC) LOOP
                NUTMPASC := NUTMPASC + TO_NUMBER(SUBSTR (NUASC, NUPOS, 1));
            END LOOP;

            NUASC := NUTMPASC;
        END LOOP;

        
        
        
        IF NUASC < CNUMINLENUSR THEN
            NULENGTH := ROUND ((LENGTH (SBWORD) / 2), 0);
            SBTMPWORD := SBWORD || SUBSTR (SBWORD, 1, NULENGTH);

            NUASC := FNUGETASCRED (SBTMPWORD);
        END IF;


        RETURN NUASC;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETASCRED;

    




















    PROCEDURE CODE_PASSWORD
    (
        ISBUSER             IN VARCHAR2,
        ISBPASSWORD         IN VARCHAR2,
        IOSBENCRYPTPASSWORD IN OUT VARCHAR2
    )
    IS
        RWPASSTOENCRYPT     RAW (60);
        RWHASHBYSHA1        RAW (50);
        SBPASSENCRYPT       VARCHAR2 (4000);
        NULENGTH            NUMBER := LENGTH (ISBPASSWORD);
        SBVALOR             VARCHAR2(100) := '';
        SBLASTCHARACTERS    VARCHAR2(100) := '';
        NULASTCHARACTER     NUMBER;
        SBFIRSTCHARACTER    VARCHAR2(1) := SUBSTR(ISBUSER,1,1);
        SBNEWUSER           VARCHAR2(200);
    BEGIN

        IOSBENCRYPTPASSWORD := NULL;

        IF (ISBPASSWORD IS NULL OR ISBPASSWORD = '') THEN
            RETURN;
        END IF;

        IF (ISBUSER IS NULL OR ISBUSER = '') THEN
            RETURN;
        END IF;

        
        FOR NUSTRING  IN  1..NULENGTH  LOOP
            SBVALOR  := SUBSTR (ISBPASSWORD, NUSTRING, 1);

            IF  (INSTR (SA_BOCONSTANT.CSBINVALID_CHARACTERS, SBVALOR)) >= 1 THEN
                ERRORS.SETERROR (CNUINVALID_CHARACTER, SA_BOCONSTANT.CSBINVALID_CHARACTERS);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END LOOP;

        
        IF LENGTH (ISBPASSWORD) < CNUMINLENPW THEN
            RETURN;
        END IF;

        
        IF LENGTH (ISBUSER) < CNUMINLENUSR THEN
            RETURN;
        END IF;

        
        SBNEWUSER := UPPER (ISBUSER);

        
        RWPASSTOENCRYPT := UTL_I18N.STRING_TO_RAW (ISBPASSWORD||SBNEWUSER, 'AL32UTF8');

        
        RWHASHBYSHA1 := DBMS_CRYPTO.HASH (SRC => RWPASSTOENCRYPT, TYP => DBMS_CRYPTO.HASH_SH1);

        
        
        SBPASSENCRYPT := DBMS_OBFUSCATION_TOOLKIT.MD5 (INPUT_STRING => LOWER(RWHASHBYSHA1));

        
        IOSBENCRYPTPASSWORD := RAWTOHEX (UTL_RAW.CAST_TO_RAW (SBPASSENCRYPT));

        
        NULENGTH:= LENGTH(IOSBENCRYPTPASSWORD);

        
        SBLASTCHARACTERS := SUBSTR(IOSBENCRYPTPASSWORD, NULENGTH - 3);

        
        SBVALOR := SUBSTR(IOSBENCRYPTPASSWORD, 1, NULENGTH - 4);

        NULENGTH := LENGTH(SBVALOR);
        WHILE (NULENGTH >= CNUMAXLENPW) LOOP

            NULENGTH := LENGTH(SBVALOR);
            
            SBLASTCHARACTERS := SBLASTCHARACTERS + SUBSTR(SBVALOR, NULENGTH);

            
            SBVALOR := SUBSTR(SBVALOR, 1, NULENGTH - 1);
        END LOOP;

        
        NULASTCHARACTER := FNUGETASCRED(LOWER(SBLASTCHARACTERS));

        
        
        
        IOSBENCRYPTPASSWORD := UPPER (SBFIRSTCHARACTER||SBVALOR||TO_CHAR(NULASTCHARACTER));

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CODE_PASSWORD;

END SA_BOPASSWORDENCRYPT;