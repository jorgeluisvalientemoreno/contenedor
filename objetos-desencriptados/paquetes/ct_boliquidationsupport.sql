PACKAGE BODY CT_BOLiquidationSupport
IS
    


















































































































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO424459';

    CSBGE_CONTRATO              CONSTANT GE_ENTITY.NAME_%TYPE := 'GE_CONTRATO';
    CSBLIST_COST_DATE           CONSTANT GE_PARAMETER.PARAMETER_ID%TYPE := 'LIST_COST_CONTRACT';
    
    
    

    
    
    
    
    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;
    
    




















    PROCEDURE LOADCONTRACTOR
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        INUCONTRACTORID         IN  GE_CONTRATO.ID_CONTRATISTA%TYPE
    )
    IS
        NUENTITY        GE_BOINSTANCECONTROL.STYNUINDEX;
        RCCONTRACTOR    DAGE_CONTRATISTA.STYGE_CONTRATISTA;
    BEGIN
        DAGE_CONTRATISTA.GETRECORD
        (
            INUCONTRACTORID,
            RCCONTRACTOR
        );

        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            NULL,
            NUENTITY
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'STATUS',
            RCCONTRACTOR.STATUS,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'SUBSCRIBER_ID',
            RCCONTRACTOR.SUBSCRIBER_ID,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'COMMON_REG',
            RCCONTRACTOR.COMMON_REG,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'IVA_TAX',
            RCCONTRACTOR.IVA_TAX,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'WITHHOLDING_TAX',
            RCCONTRACTOR.WITHHOLDING_TAX,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'POSITION_TYPE_ID',
            TO_CHAR(RCCONTRACTOR.POSITION_TYPE_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'ID_CONTRATISTA',
            TO_CHAR(RCCONTRACTOR.ID_CONTRATISTA),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'NOMBRE_CONTRATISTA',
            RCCONTRACTOR.NOMBRE_CONTRATISTA,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'DESCRIPCION',
            RCCONTRACTOR.DESCRIPCION,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'CORREO_ELECTRONICO',
            RCCONTRACTOR.CORREO_ELECTRONICO,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'TELEFONO',
            RCCONTRACTOR.TELEFONO,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'NOMBRE_CONTACTO',
            RCCONTRACTOR.NOMBRE_CONTACTO,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'ID_EMPRESA',
            TO_CHAR(RCCONTRACTOR.ID_EMPRESA),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'ID_SUSCRIPTOR',
            TO_CHAR(RCCONTRACTOR.ID_SUSCRIPTOR),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'ID_TIPOAUTORIZACION',
            TO_CHAR(RCCONTRACTOR.ID_TIPOAUTORIZACION),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'ID_TIPOCONTRIBUYENTE',
            TO_CHAR(RCCONTRACTOR.ID_TIPOCONTRIBUYENTE),
            TRUE
        );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCONTRACTOR;
        
    

















    PROCEDURE LOADCONTRACT
    (
         INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
         IRCCONTRACT             IN  DAGE_CONTRATO.STYGE_CONTRATO
    )
    IS
        NUENTITY   GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            NULL,
            NUENTITY
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'ID_CONTRATISTA',
            TO_CHAR(IRCCONTRACT.ID_CONTRATISTA),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'DIAS_FACTURAR',
            TO_CHAR(IRCCONTRACT.DIAS_FACTURAR),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'ALERTA_PORCEN_VALOR',
            TO_CHAR(IRCCONTRACT.ALERTA_PORCEN_VALOR),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'VALOR_ANTICIPO',
            TO_CHAR(IRCCONTRACT.VALOR_ANTICIPO),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'ANTICIPO_AMORTIZADO',
            TO_CHAR(IRCCONTRACT.ANTICIPO_AMORTIZADO),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'PORCEN_FONDO_GARANT',
            TO_CHAR(IRCCONTRACT.PORCEN_FONDO_GARANT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'ACUMUL_FONDO_GARANT',
            TO_CHAR(IRCCONTRACT.ACUMUL_FONDO_GARANT),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'ID_CONTRATO',
            TO_CHAR(IRCCONTRACT.ID_CONTRATO),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'DESCRIPCION',
            IRCCONTRACT.DESCRIPCION,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'FECHA_INICIAL',
            TO_CHAR(IRCCONTRACT.FECHA_INICIAL,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'FECHA_FINAL',
            TO_CHAR(IRCCONTRACT.FECHA_FINAL,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'FECHA_CIERRE',
            TO_CHAR(IRCCONTRACT.FECHA_CIERRE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'VALOR_AUI_ADMIN',
            TO_CHAR(IRCCONTRACT.VALOR_AUI_ADMIN),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'VALOR_AUI_UTIL',
            TO_CHAR(IRCCONTRACT.VALOR_AUI_UTIL),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'VALOR_AUI_IMPREV',
            TO_CHAR(IRCCONTRACT.VALOR_AUI_IMPREV),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'TIPO_MONEDA_LIQUIDAR',
            IRCCONTRACT.TIPO_MONEDA_LIQUIDAR,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'VALOR_TOTAL_CONTRATO',
            TO_CHAR(IRCCONTRACT.VALOR_TOTAL_CONTRATO),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'VALOR_TOTAL_PAGADO',
            TO_CHAR(IRCCONTRACT.VALOR_TOTAL_PAGADO),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'ID_TIPO_CONTRATO',
            TO_CHAR(IRCCONTRACT.ID_TIPO_CONTRATO),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'STATUS',
            IRCCONTRACT.STATUS,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBGE_CONTRATO,
            'PERCENT_NATION_STAMP',
            TO_CHAR(IRCCONTRACT.PERCENT_NATION_STAMP),
            TRUE
        );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCONTRACT;
    
    
    


















    PROCEDURE LOADPERIOD
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        INUPERIODID	            IN  GE_ACTA.ID_PERIODO%TYPE,
        IDTBREAKDATE            IN  GE_ACTA.FECHA_FIN%TYPE
    )
    IS
        NUENTITY        GE_BOINSTANCECONTROL.STYNUINDEX;
        RCPERIOD        DAGE_PERIODO_CERT.STYGE_PERIODO_CERT;       
    BEGIN
        DAGE_PERIODO_CERT.GETRECORD
        (
            INUPERIODID,
            RCPERIOD
        );

        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_PERIODO_CERT',
            NULL,
            NUENTITY
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_PERIODO_CERT',
            'ID_PERIODO',
            TO_CHAR(RCPERIOD.ID_PERIODO),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_PERIODO_CERT',
            'NOMBRE',
            RCPERIOD.NOMBRE,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_PERIODO_CERT',
            'FECHA_INICIAL',
            TO_CHAR(RCPERIOD.FECHA_INICIAL,
            UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_PERIODO_CERT',
            'FECHA_FINAL',
            TO_CHAR(RCPERIOD.FECHA_FINAL, UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_PERIODO_CERT',
            CT_BOCONSTANTS.FSBGETBREAKDATEATTRNAME,
            TO_CHAR(IDTBREAKDATE, UT_DATE.FSBDATE_FORMAT),
            TRUE
        );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADPERIOD;
    
    

















    PROCEDURE LOADCONDITIONSPLAN
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        INUCONDPLANID           IN  CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE
    )
    IS
        NUENTITY   GE_BOINSTANCECONTROL.STYNUINDEX;
        RCCONDPLAN   DACT_CONDITIONS_PLAN.STYCT_CONDITIONS_PLAN; 
    BEGIN
        DACT_CONDITIONS_PLAN.GETRECORD
        (
            INUCONDPLANID,
            RCCONDPLAN
        );

        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS_PLAN',
            NULL,
            NUENTITY
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS_PLAN',
            'CONDITIONS_PLAN_ID',
            TO_CHAR(RCCONDPLAN.CONDITIONS_PLAN_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS_PLAN',
            'DESCRIPTION',
            RCCONDPLAN.DESCRIPTION,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS_PLAN',
            'START_DATE',
            TO_CHAR(RCCONDPLAN.START_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS_PLAN',
            'END_DATE',
            TO_CHAR(RCCONDPLAN.END_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS_PLAN',
            'MINIMUM_ACHIEVEMENT',
            TO_CHAR(RCCONDPLAN.MINIMUM_ACHIEVEMENT),
            TRUE
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCONDITIONSPLAN;
    
    

















    PROCEDURE LOADPERSON
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCPERSON               IN CT_BCCONTRACTOR.TYPERSON
    )
    IS
        NUENTITY   GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_PERSON',
            NULL,
            NUENTITY
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_PERSON',
            'PERSON_ID',
            TO_CHAR(IRCPERSON.PERSON_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_PERSON',
            'PERSONAL_TYPE',
            TO_CHAR(IRCPERSON.PERSONAL_TYPE),
            TRUE
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADPERSON;
    
    
















    PROCEDURE UNLOADTABLE
    (
        ISBTABLENAME            IN VARCHAR2
    )
    IS
    BEGIN
        GE_BOINSTANCECONTROL.DESTROYENTITY
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            ISBTABLENAME
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UNLOADTABLE;
    
    

















    PROCEDURE LOADOBJECTIVEBYPERIOD
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCOBJECTIVEPERI        IN DACT_OBJECTIVES_PERI.STYCT_OBJECTIVES_PERI
    )
    IS
        NUENTITY   GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_OBJECTIVES_PERI',
            NULL,
            NUENTITY
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_OBJECTIVES_PERI',
            'OBJECTIVES_PERI_ID',
            TO_CHAR(IRCOBJECTIVEPERI.OBJECTIVES_PERI_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_OBJECTIVES_PERI',
            'CONDITIONS_ID',
            TO_CHAR(IRCOBJECTIVEPERI.CONDITIONS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_OBJECTIVES_PERI',
            'PERIOD_ID',
            TO_CHAR(IRCOBJECTIVEPERI.PERIOD_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_OBJECTIVES_PERI',
            'OBJECTIVE',
            TO_CHAR(IRCOBJECTIVEPERI.OBJECTIVE),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_OBJECTIVES_PERI',
            'STATUS',
            IRCOBJECTIVEPERI.STATUS,
            TRUE
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADOBJECTIVEBYPERIOD;
    
    



















    PROCEDURE LOADORDER
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCORDER                IN  CT_BCLIQUIDATIONSUPPORT.TYORDERSINFO
    )
    IS
        NUENTITY   GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            NULL,
            NUENTITY
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'DEFINED_CONTRACT_ID',
            TO_CHAR(IRCORDER.DEFINED_CONTRACT_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ROUTE_ID',
            TO_CHAR(IRCORDER.ROUTE_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'CONSECUTIVE',
            TO_CHAR(IRCORDER.CONSECUTIVE),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ORDER_ID',
            TO_CHAR(IRCORDER.ORDER_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'PRIOR_ORDER_ID',
            TO_CHAR(IRCORDER.PRIOR_ORDER_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'NUMERATOR_ID',
            TO_CHAR(IRCORDER.NUMERATOR_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'SEQUENCE',
            TO_CHAR(IRCORDER.SEQUENCE),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'PRIORITY',
            TO_CHAR(IRCORDER.PRIORITY),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'EXTERNAL_ADDRESS_ID',
            TO_CHAR(IRCORDER.EXTERNAL_ADDRESS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'CREATED_DATE',
            TO_CHAR(IRCORDER.CREATED_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'EXEC_INITIAL_DATE',
            TO_CHAR(IRCORDER.EXEC_INITIAL_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'EXECUTION_FINAL_DATE',
            TO_CHAR(IRCORDER.EXECUTION_FINAL_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'EXEC_ESTIMATE_DATE',
            TO_CHAR(IRCORDER.EXEC_ESTIMATE_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ARRANGED_HOUR',
            TO_CHAR(IRCORDER.ARRANGED_HOUR,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'LEGALIZATION_DATE',
            TO_CHAR(IRCORDER.LEGALIZATION_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'REPROGRAM_LAST_DATE',
            TO_CHAR(IRCORDER.REPROGRAM_LAST_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ASSIGNED_DATE',
            TO_CHAR(IRCORDER.ASSIGNED_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ASSIGNED_WITH',
            IRCORDER.ASSIGNED_WITH,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'MAX_DATE_TO_LEGALIZE',
            TO_CHAR(IRCORDER.MAX_DATE_TO_LEGALIZE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ORDER_VALUE',
            TO_CHAR(IRCORDER.ORDER_VALUE),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'PRINTING_TIME_NUMBER',
            TO_CHAR(IRCORDER.PRINTING_TIME_NUMBER),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'LEGALIZE_TRY_TIMES',
            TO_CHAR(IRCORDER.LEGALIZE_TRY_TIMES),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'OPERATING_UNIT_ID',
            TO_CHAR(IRCORDER.OPERATING_UNIT_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ORDER_STATUS_ID',
            TO_CHAR(IRCORDER.ORDER_STATUS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'TASK_TYPE_ID',
            TO_CHAR(IRCORDER.TASK_TYPE_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'OPERATING_SECTOR_ID',
            TO_CHAR(IRCORDER.OPERATING_SECTOR_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'CAUSAL_ID',
            TO_CHAR(IRCORDER.CAUSAL_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ADMINIST_DISTRIB_ID',
            TO_CHAR(IRCORDER.ADMINIST_DISTRIB_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ORDER_CLASSIF_ID',
            TO_CHAR(IRCORDER.ORDER_CLASSIF_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'GEOGRAP_LOCATION_ID',
            TO_CHAR(IRCORDER.GEOGRAP_LOCATION_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'IS_COUNTERMAND',
            IRCORDER.IS_COUNTERMAND,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'REAL_TASK_TYPE_ID',
            TO_CHAR(IRCORDER.REAL_TASK_TYPE_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'SAVED_DATA_VALUES',
            TO_CHAR(IRCORDER.SAVED_DATA_VALUES),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'FOR_AUTOMATIC_LEGA',
            IRCORDER.FOR_AUTOMATIC_LEGA,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ORDER_COST_AVERAGE',
            TO_CHAR(IRCORDER.ORDER_COST_AVERAGE),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ORDER_COST_BY_LIST',
            TO_CHAR(IRCORDER.ORDER_COST_BY_LIST),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'OPERATIVE_AIU_VALUE',
            TO_CHAR(IRCORDER.OPERATIVE_AIU_VALUE),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ADMIN_AIU_VALUE',
            TO_CHAR(IRCORDER.ADMIN_AIU_VALUE),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'CHARGE_STATUS',
            IRCORDER.CHARGE_STATUS,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'PREV_ORDER_STATUS_ID',
            TO_CHAR(IRCORDER.PREV_ORDER_STATUS_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'PROGRAMING_CLASS_ID',
            TO_CHAR(IRCORDER.PROGRAMING_CLASS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'PREVIOUS_WORK',
            IRCORDER.PREVIOUS_WORK,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'APPOINTMENT_CONFIRM',
            IRCORDER.APPOINTMENT_CONFIRM,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'X',
            TO_CHAR(IRCORDER.X),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'Y',
            TO_CHAR(IRCORDER.Y),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'STAGE_ID',
            TO_CHAR(IRCORDER.STAGE_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'LEGAL_IN_PROJECT',
            IRCORDER.LEGAL_IN_PROJECT,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'OFFERED',
            IRCORDER.OFFERED,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ASSO_UNIT_ID',
            TO_CHAR(IRCORDER.ASSO_UNIT_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'SUBSCRIBER_ID',
            TO_CHAR(IRCORDER.SUBSCRIBER_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'ADM_PENDING',
            TO_CHAR(IRCORDER.ADM_PENDING),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER',
            'SCHED_ITINERARY_ID',
            TO_CHAR(IRCORDER.SCHED_ITINERARY_ID),
            TRUE
        );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADORDER;
    
    

















    PROCEDURE LOADCONDITION
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCCONDITION            IN  CT_BCLIQUIDATIONSUPPORT.TYFORMCONDITION
    )
    IS
        NUENTITY   GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS',
            NULL,
            NUENTITY
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS',
            'CONDITIONS_ID',
            TO_CHAR(IRCCONDITION.CONDITIONS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS',
            'DESCRIPTION',
            IRCCONDITION.DESCRIPTION,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS',
            'CONFIG_EXPRESSION_ID',
            TO_CHAR(IRCCONDITION.CONFIG_EXPRESSION_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS',
            'ITEMS_ID',
            TO_CHAR(IRCCONDITION.ITEMS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS',
            'ITEM_CLASSIF_ID',
            TO_CHAR(IRCCONDITION.ITEM_CLASSIF_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS',
            'WEIGHT',
            TO_CHAR(IRCCONDITION.WEIGHT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS',
            'STATUS',
            IRCCONDITION.STATUS,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'CT_CONDITIONS',
            'LEVEL_',
            IRCCONDITION.LEVEL_,
            TRUE
        );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCONDITION;
    
    
















    PROCEDURE LOADCONDITIONBYPLAN
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCCONDITION            IN  CT_BCLIQUIDATIONSUPPORT.TYFORMCONDITION
    )
    IS
        NUENTITY   GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBCT_CONDITIONS_BY_PLAN,
            NULL,
            NUENTITY
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBCT_CONDITIONS_BY_PLAN,
            'CONDITION_BY_PLAN_ID',
            TO_CHAR(IRCCONDITION.CONDITION_BY_PLAN_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBCT_CONDITIONS_BY_PLAN,
            'CONDITIONS_ID',
            TO_CHAR(IRCCONDITION.CONDITIONS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBCT_CONDITIONS_BY_PLAN,
            'FLAG_TYPE',
            IRCCONDITION.FLAG_TYPE,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBCT_CONDITIONS_BY_PLAN,
            'CONDITIONS_PLAN_ID',
            TO_CHAR(IRCCONDITION.CONDITIONS_PLAN_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBCT_CONDITIONS_BY_PLAN,
            'EXEC_ORDER',
            TO_CHAR(IRCCONDITION.EXEC_ORDER),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            CSBCT_CONDITIONS_BY_PLAN,
            'CERTIFICATE_TYPE_ID',
            TO_CHAR(IRCCONDITION.CERTIFICATE_TYPE_ID),
            TRUE
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCONDITIONBYPLAN;

    

















    PROCEDURE LOADITEM
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCITEM                 IN  DAGE_ITEMS.STYGE_ITEMS
    )
    IS
        NUENTITY   GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            NULL,
            NUENTITY
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'RECOVERY',
            IRCITEM.RECOVERY,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'PROVISIONING_TYPE',
            IRCITEM.PROVISIONING_TYPE,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'PLATFORM',
            IRCITEM.PLATFORM,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'RECOVERY_ITEM_ID',
            TO_CHAR(IRCITEM.RECOVERY_ITEM_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'INIT_INV_STATUS_ID',
            TO_CHAR(IRCITEM.INIT_INV_STATUS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'SHARED',
            IRCITEM.SHARED,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'ITEMS_ID',
            TO_CHAR(IRCITEM.ITEMS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'DESCRIPTION',
            IRCITEM.DESCRIPTION,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'ITEM_CLASSIF_ID',
            TO_CHAR(IRCITEM.ITEM_CLASSIF_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'MEASURE_UNIT_ID',
            TO_CHAR(IRCITEM.MEASURE_UNIT_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'TECH_CARD_ITEM_ID',
            TO_CHAR(IRCITEM.TECH_CARD_ITEM_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'CONCEPT',
            TO_CHAR(IRCITEM.CONCEPT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'OBJECT_ID',
            TO_CHAR(IRCITEM.OBJECT_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'USE_',
            IRCITEM.USE_,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'ELEMENT_TYPE_ID',
            TO_CHAR(IRCITEM.ELEMENT_TYPE_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'ELEMENT_CLASS_ID',
            TO_CHAR(IRCITEM.ELEMENT_CLASS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'STANDARD_TIME',
            TO_CHAR(IRCITEM.STANDARD_TIME),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'WARRANTY_DAYS',
            TO_CHAR(IRCITEM.WARRANTY_DAYS),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'DISCOUNT_CONCEPT',
            TO_CHAR(IRCITEM.DISCOUNT_CONCEPT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'ID_ITEMS_TIPO',
            TO_CHAR(IRCITEM.ID_ITEMS_TIPO),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_ITEMS',
            'OBSOLETO',
            IRCITEM.OBSOLETO,
            TRUE
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADITEM;
    
    




















    PROCEDURE LOADOPERUNIT
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCOPERATINGUNIT        IN DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT
    )
    IS
        NUENTITY   GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
             NULL,
             NUENTITY
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ITEM_REQ_FRECUENCY',
            IRCOPERATINGUNIT.ITEM_REQ_FRECUENCY,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'NEXT_ITEM_REQUEST',
            TO_CHAR(IRCOPERATINGUNIT.NEXT_ITEM_REQUEST,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'OPERATING_ZONE_ID',
            TO_CHAR(IRCOPERATINGUNIT.OPERATING_ZONE_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ASSIGN_CAPACITY',
            TO_CHAR(IRCOPERATINGUNIT.ASSIGN_CAPACITY),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'USED_ASSIGN_CAP',
            TO_CHAR(IRCOPERATINGUNIT.USED_ASSIGN_CAP),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ES_INSPECCIONABLE',
            IRCOPERATINGUNIT.ES_INSPECCIONABLE,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'CONTRACTOR_ID',
            TO_CHAR(IRCOPERATINGUNIT.CONTRACTOR_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ADMIN_BASE_ID',
            TO_CHAR(IRCOPERATINGUNIT.ADMIN_BASE_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'UNIT_TYPE_ID',
            TO_CHAR(IRCOPERATINGUNIT.UNIT_TYPE_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ADD_VALUE_ORDER',
            TO_CHAR(IRCOPERATINGUNIT.ADD_VALUE_ORDER),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'OUT_BASE_PREP_TIME',
            TO_CHAR(IRCOPERATINGUNIT.OUT_BASE_PREP_TIME),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'RET_BASE_PREP_TIME',
            TO_CHAR(IRCOPERATINGUNIT.RET_BASE_PREP_TIME),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'SNACK_TIME',
            TO_CHAR(IRCOPERATINGUNIT.SNACK_TIME),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'UNASSIGNABLE',
            IRCOPERATINGUNIT.UNASSIGNABLE,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'NOTIFICATION_FLAG',
            IRCOPERATINGUNIT.NOTIFICATION_FLAG,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'OPERATING_CENTER_ID',
            TO_CHAR(IRCOPERATINGUNIT.OPERATING_CENTER_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'COMPANY_ID',
            TO_CHAR(IRCOPERATINGUNIT.COMPANY_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'STARTING_ADDRESS',
            TO_CHAR(IRCOPERATINGUNIT.STARTING_ADDRESS),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'NOTIFICABLE',
            IRCOPERATINGUNIT.NOTIFICABLE,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ASSO_OPER_UNIT',
            TO_CHAR(IRCOPERATINGUNIT.ASSO_OPER_UNIT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'GEN_ADMIN_ORDER',
            IRCOPERATINGUNIT.GEN_ADMIN_ORDER,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'VALID_FOR_ASSIGN',
            IRCOPERATINGUNIT.VALID_FOR_ASSIGN,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'OPERATING_UNIT_ID',
            TO_CHAR(IRCOPERATINGUNIT.OPERATING_UNIT_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'OPER_UNIT_CODE',
            IRCOPERATINGUNIT.OPER_UNIT_CODE,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'NAME',
            IRCOPERATINGUNIT.NAME,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ASSIGN_TYPE',
            IRCOPERATINGUNIT.ASSIGN_TYPE,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'SUBSCRIBER_ID',
            IRCOPERATINGUNIT.SUBSCRIBER_ID,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ADDRESS',
            IRCOPERATINGUNIT.ADDRESS,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'PHONE_NUMBER',
            IRCOPERATINGUNIT.PHONE_NUMBER,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'FAX_NUMBER',
            IRCOPERATINGUNIT.FAX_NUMBER,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'E_MAIL',
            IRCOPERATINGUNIT.E_MAIL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'BEEPER',
            IRCOPERATINGUNIT.BEEPER,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'EVAL_LAST_DATE',
            TO_CHAR(IRCOPERATINGUNIT.EVAL_LAST_DATE,UT_DATE.FSBDATE_FORMAT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'VEHICLE_NUMBER_PLATE',
            IRCOPERATINGUNIT.VEHICLE_NUMBER_PLATE,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'WORK_DAYS',
            IRCOPERATINGUNIT.WORK_DAYS,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ASSIG_ORDERS_AMOUNT',
            TO_CHAR(IRCOPERATINGUNIT.ASSIG_ORDERS_AMOUNT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'FATHER_OPER_UNIT_ID',
            TO_CHAR(IRCOPERATINGUNIT.FATHER_OPER_UNIT_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'OPER_UNIT_STATUS_ID',
            TO_CHAR(IRCOPERATINGUNIT.OPER_UNIT_STATUS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'OPERATING_SECTOR_ID',
            TO_CHAR(IRCOPERATINGUNIT.OPERATING_SECTOR_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'PERSON_IN_CHARGE',
            TO_CHAR(IRCOPERATINGUNIT.PERSON_IN_CHARGE),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'OPER_UNIT_CLASSIF_ID',
            TO_CHAR(IRCOPERATINGUNIT.OPER_UNIT_CLASSIF_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ORGA_AREA_ID',
            TO_CHAR(IRCOPERATINGUNIT.ORGA_AREA_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'FOR_AUTOMATIC_LEGA',
            IRCOPERATINGUNIT.FOR_AUTOMATIC_LEGA,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'PASSWORD_REQUIRED',
            IRCOPERATINGUNIT.PASSWORD_REQUIRED,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'AIU_VALUE_ADMIN',
            TO_CHAR(IRCOPERATINGUNIT.AIU_VALUE_ADMIN),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'AIU_VALUE_UTIL',
            TO_CHAR(IRCOPERATINGUNIT.AIU_VALUE_UTIL),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'AIU_VALUE_UNEXPECTED',
            TO_CHAR(IRCOPERATINGUNIT.AIU_VALUE_UNEXPECTED),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'GEOCODE',
            TO_CHAR(IRCOPERATINGUNIT.GEOCODE),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'ES_EXTERNA',
            IRCOPERATINGUNIT.ES_EXTERNA,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_OPERATING_UNIT',
            'DIAS_REPOSICION',
            TO_CHAR(IRCOPERATINGUNIT.DIAS_REPOSICION),
            TRUE
        );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADOPERUNIT;

    






















    PROCEDURE LOADORDERITEM
    (
        INUCONTRACTORINSTANCE   IN              GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCORDERITEM            IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYORDERITEMSINFO,
        IRCORDER                IN              CT_BCLIQUIDATIONSUPPORT.TYORDERSINFO
    )
    IS
        NUENTITY    GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN

        IF (IRCORDER.HASADJUSTMENTACTIVITY = GE_BOCONSTANTS.CSBYES) THEN
            IF (IRCORDERITEM.OUT_ = GE_BOCONSTANTS.CSBNO) THEN
                IRCORDERITEM.ASSIGNED_ITEM_AMOUNT := -1 * IRCORDERITEM.ASSIGNED_ITEM_AMOUNT;
                IRCORDERITEM.LEGAL_ITEM_AMOUNT    := -1 * IRCORDERITEM.LEGAL_ITEM_AMOUNT;
            END IF;
        END IF;

        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            NULL,
            NUENTITY
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'ORDER_ID',
            TO_CHAR(IRCORDERITEM.ORDER_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'ITEMS_ID',
            TO_CHAR(IRCORDERITEM.ITEMS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'ASSIGNED_ITEM_AMOUNT',
            TO_CHAR(IRCORDERITEM.ASSIGNED_ITEM_AMOUNT),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'LEGAL_ITEM_AMOUNT',
            TO_CHAR(IRCORDERITEM.LEGAL_ITEM_AMOUNT),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'VALUE',
            TO_CHAR(IRCORDERITEM.VALUE),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'ORDER_ITEMS_ID',
            TO_CHAR(IRCORDERITEM.ORDER_ITEMS_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'TOTAL_PRICE',
            TO_CHAR(IRCORDERITEM.TOTAL_PRICE),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'ELEMENT_CODE',
            IRCORDERITEM.ELEMENT_CODE,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'ORDER_ACTIVITY_ID',
            TO_CHAR(IRCORDERITEM.ORDER_ACTIVITY_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'ELEMENT_ID',
            TO_CHAR(IRCORDERITEM.ELEMENT_ID),
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'REUSED',
            IRCORDERITEM.REUSED,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'SERIAL_ITEMS_ID',
            TO_CHAR(IRCORDERITEM.SERIAL_ITEMS_ID),
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'SERIE',
            IRCORDERITEM.SERIE,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'OR_ORDER_ITEMS',
            'OUT_',
            IRCORDERITEM.OUT_,
            TRUE
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADORDERITEM;
    
    
    
















    PROCEDURE LOADCERTIFICATEDETAIL
    (
        INUCONTRACTORINSTANCE   IN  GE_BOINSTANCECONTROL.STYNUINDEX
    )
    IS
        NUENTITY  GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        GE_BOINSTANCECONTROL.ADDENTITYSTACK
        (
            INUCONTRACTORINSTANCE,
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            NULL,
            NUENTITY
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'TIPO_GENERACION',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'PORCEN_CUMPLIMIENTO',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'ID_UNIDAD_MEDIDA',
            NULL,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'GEOGRAP_LOCATION_ID',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'ID_DETALLE_ACTA',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'ID_ITEMS',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'DESCRIPCION_ITEMS',
            NULL,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'CONDITION_BY_PLAN_ID',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'CANTIDAD',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'VALOR_UNITARIO',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'VALOR_TOTAL',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'ID_ACTA',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'ID_LISTA_UNIT_COSTO',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'ID_ORDEN',
            NULL,
            TRUE
        );

        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'PORCEN_PONDERADO',
            NULL,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'COMMENT_',
            NULL,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'REFERENCE_ITEM_ID',
            NULL,
            TRUE
        );
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_DETALLE_ACTA',
            'BASE_VALUE',
            NULL,
            TRUE
        );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCERTIFICATEDETAIL;
    
    



















    PROCEDURE LOADGLOBALDATA
    (
        INUCONTRACTORINSTANCE   IN OUT NOCOPY  GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCCONTRACT             IN             DAGE_CONTRATO.STYGE_CONTRATO,
        INUPERIODID	            IN             GE_ACTA.ID_PERIODO%TYPE,
        IDTBREAKDATE            IN             GE_ACTA.FECHA_FIN%TYPE
    )
    IS
        BLFOUND     BOOLEAN;
        NUINSTANCE  GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        IF (NOT(GE_BOINSTANCECONTROL.FBLISINITINSTANCECONTROL)) THEN
            
            GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
        END IF;

        
        IF (NOT(GE_BOINSTANCECONTROL.FBLACCKEYINSTANCESTACK(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                            NUINSTANCE))) THEN
            GE_BOINSTANCECONTROL.CREATEINSTANCE
            (
                CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                NULL
            );
        END IF;

        BLFOUND := GE_BOINSTANCECONTROL.FBLACCKEYINSTANCESTACK(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                               INUCONTRACTORINSTANCE);

        
        CT_BOLIQUIDATIONSUPPORT.LOADCONTRACT
        (
            INUCONTRACTORINSTANCE,
            IRCCONTRACT
        );

        
        CT_BOLIQUIDATIONSUPPORT.LOADCONTRACTOR
        (
            INUCONTRACTORINSTANCE,
            IRCCONTRACT.ID_CONTRATISTA
        );

        
        CT_BOLIQUIDATIONSUPPORT.LOADPERIOD
        (
            INUCONTRACTORINSTANCE,
            INUPERIODID,
            IDTBREAKDATE
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADGLOBALDATA;
    
    

































    PROCEDURE GETCERTIFICATE
    (
        INUCERTTYPE                 IN             CT_CONDITIONS_BY_PLAN.CERTIFICATE_TYPE_ID%TYPE,
        INUCONDBYPLANID             IN             CT_CONDITIONS_BY_PLAN.CONDITION_BY_PLAN_ID%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUORDERID                  IN             OR_ORDER.ORDER_ID%TYPE,
        INUITEMID                   IN             GE_ITEMS.ITEMS_ID%TYPE,
        IRCOPERUNIT                 IN             DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT,
        ITBNOADMINBASELIQCERTIFS    IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES          IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES         IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ONUCERTIFICATEID            OUT            GE_ACTA.ID_ACTA%TYPE,
        IBLNOADMINBASELIQCERTIF     IN OUT NOCOPY  BOOLEAN,
        IBLNOADMINBASEBILLCERTIF    IN OUT NOCOPY  BOOLEAN,
        IBLLIQCERTIFICATE           IN OUT NOCOPY  BOOLEAN,
        IBLBILLCERTIFICATE          IN OUT NOCOPY  BOOLEAN
    )
    IS
        
        PROCEDURE ROLLBACKCREATEDCERT
        IS
        BEGIN
            IF (IBLNOADMINBASELIQCERTIF) THEN
                ITBNOADMINBASELIQCERTIFS.DELETE('-');
            ELSIF (IBLLIQCERTIFICATE) THEN
                ITBLIQCERTIFICATES.DELETE(IRCOPERUNIT.ADMIN_BASE_ID);
            ELSIF (IBLNOADMINBASEBILLCERTIF) THEN
                ITBNOADMINBASEBILLCERTIFS.DELETE('-');
            ELSIF (IBLBILLCERTIFICATE) THEN
                ITBBILLCERTIFICATES.DELETE(IRCOPERUNIT.ADMIN_BASE_ID);
            END IF;
        END ROLLBACKCREATEDCERT;
    BEGIN

        IF (INUCERTTYPE = CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE) THEN
            
            
            IF (IRCOPERUNIT.ADMIN_BASE_ID IS NULL) THEN
                
                IF (ITBNOADMINBASELIQCERTIFS.FIRST IS NULL) THEN
                    
                    
                    CT_BOCERTIFICATE.CREATECERTIFICATE
                    (
                        CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE,
                        INUCONTRACTID,
                        INUPERIODID,
                        NULL,
                        IDTBREAKDATE,
                        NULL,
                        ITBNOADMINBASELIQCERTIFS('-')
                    );
                    IBLNOADMINBASELIQCERTIF := TRUE;
                END IF;
                
                ONUCERTIFICATEID := ITBNOADMINBASELIQCERTIFS('-');

                
                
            ELSE
                
                
                
                IF (ITBLIQCERTIFICATES.EXISTS(IRCOPERUNIT.ADMIN_BASE_ID)) THEN
                    
                    ONUCERTIFICATEID := ITBLIQCERTIFICATES(IRCOPERUNIT.ADMIN_BASE_ID);
                ELSE
                    
                    
                    CT_BOCERTIFICATE.CREATECERTIFICATE
                    (
                        CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE,
                        INUCONTRACTID,
                        INUPERIODID,
                        IRCOPERUNIT.ADMIN_BASE_ID,
                        IDTBREAKDATE,
                        NULL,
                        ONUCERTIFICATEID
                    );

                    ITBLIQCERTIFICATES(IRCOPERUNIT.ADMIN_BASE_ID) := ONUCERTIFICATEID;
                    IBLLIQCERTIFICATE := TRUE;
                END IF;
            END IF;
        
        ELSIF (INUCERTTYPE = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE) THEN
            
            
            IF (IRCOPERUNIT.ADMIN_BASE_ID IS NULL) THEN
                
                IF (ITBNOADMINBASEBILLCERTIFS.FIRST IS NULL) THEN
                    
                    
                    CT_BOCERTIFICATE.CREATECERTIFICATE
                    (
                        CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE,
                        INUCONTRACTID,
                        INUPERIODID,
                        NULL,
                        IDTBREAKDATE,
                        NULL,
                        ITBNOADMINBASEBILLCERTIFS('-')
                    );
                    IBLNOADMINBASEBILLCERTIF := TRUE;
                END IF;
                ONUCERTIFICATEID := ITBNOADMINBASEBILLCERTIFS('-');

            
            
            ELSE
                
                
                
                IF (ITBBILLCERTIFICATES.EXISTS(IRCOPERUNIT.ADMIN_BASE_ID)) THEN
                    ONUCERTIFICATEID := ITBBILLCERTIFICATES(IRCOPERUNIT.ADMIN_BASE_ID);
                ELSE
                    
                    
                    CT_BOCERTIFICATE.CREATECERTIFICATE
                    (
                        CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE,
                        INUCONTRACTID,
                        INUPERIODID,
                        IRCOPERUNIT.ADMIN_BASE_ID,
                        IDTBREAKDATE,
                        NULL,
                        ONUCERTIFICATEID
                    );

                    ITBBILLCERTIFICATES(IRCOPERUNIT.ADMIN_BASE_ID) := ONUCERTIFICATEID;
                    IBLBILLCERTIFICATE := TRUE;
                END IF;
            END IF;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                INUORDERID,
                INUITEMID,
                INUCONDBYPLANID
            );
            ROLLBACKCREATEDCERT;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                INUORDERID,
                INUITEMID,
                INUCONDBYPLANID
            );
            ROLLBACKCREATEDCERT;
            RAISE EX.CONTROLLED_ERROR;
    END GETCERTIFICATE;
    
    



























    PROCEDURE GETLISTITEMVALUE
    (
        INUITEMID           IN  GE_ITEMS.ITEMS_ID%TYPE,
        IDTDATE             IN  OR_ORDER.LEGALIZATION_DATE%TYPE,
        INUOPERATINGUNIT    IN  GE_LIST_UNITARY_COST.OPERATING_UNIT_ID%TYPE,
        INUCONTRACT         IN  GE_LIST_UNITARY_COST.CONTRACT_ID%TYPE,
        INUCONTRACTOR       IN  GE_LIST_UNITARY_COST.CONTRACTOR_ID%TYPE,
        INUGEOLOCATION      IN  GE_LIST_UNITARY_COST.GEOGRAP_LOCATION_ID%TYPE,
        ISBTYPE             IN  GE_ACTA.ID_TIPO_ACTA%TYPE,
        ONUPRICELISTID      OUT GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE,
        ONUVALUE            OUT GE_UNIT_COST_ITE_LIS.PRICE%TYPE
    )
    IS
        NUPRICE           GE_UNIT_COST_ITE_LIS.PRICE%TYPE;
        NUSALESVALUE      GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE;

    BEGIN

        
        GE_BCCERTCONTRATISTA.OBTENERCOSTOITEMLISTA
        (
            INUITEMID,
            TRUNC(IDTDATE),
            INUGEOLOCATION,
            INUCONTRACTOR,
            INUOPERATINGUNIT,
            INUCONTRACT,
            ONUPRICELISTID,
            NUPRICE,
            NUSALESVALUE
        );

        
        NUSALESVALUE := NVL(NUSALESVALUE,0);

        IF (ISBTYPE = CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE) THEN
            ONUVALUE := NUPRICE;
        ELSIF (ISBTYPE = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE) THEN
               ONUVALUE := NUSALESVALUE;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETLISTITEMVALUE;
    
    























    PROCEDURE ASSOCORDERCERTIFICATE
    (
        INUORDERID                  IN             CT_ORDER_CERTIFICA.ORDER_ID%TYPE,
        INUCERTIFICATEID            IN             CT_ORDER_CERTIFICA.CERTIFICATE_ID%TYPE,
        ONUCERTIFICATEID            IN OUT NOCOPY  CT_ORDER_CERTIFICA.CERTIFICATE_ID%TYPE,
        ITBORDERWITHCERT            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER
    )
    IS
        NUINDEX                 NUMBER;
    
        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;
        
        SBORDERCERT             VARCHAR2(100);
    BEGIN
        
        RCORDERBYCERTIFICATE.ORDER_ID   := INUORDERID;
        CT_BOCERTIFICATECONTROL.ADDORDERTOCERTIFICATE(RCORDERBYCERTIFICATE);
        
        
        NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS.FIRST;
        
        LOOP
            EXIT WHEN NUINDEX IS NULL;
            
            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).CERTIFICATE_ID    := INUCERTIFICATEID;
            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).VERIFICATION_DATE := NULL;
            
            SBORDERCERT := TO_CHAR(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).ORDER_ID) || '_' || TO_CHAR(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).CERTIFICATE_ID);
            
            IF (NOT ITBORDERWITHCERT.EXISTS(SBORDERCERT)) THEN

                DACT_ORDER_CERTIFICA.INSRECORD(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX));

                
                ITBORDERWITHCERT(SBORDERCERT) := TRUE;

                
                IF (NOT ITBORDERWITHCERT.EXISTS(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).ORDER_ID)) THEN
                    
                    ITBORDERWITHCERT(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).ORDER_ID) := TRUE;
                END IF;
            END IF;

            ONUCERTIFICATEID := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).CERTIFICATE_ID;

            NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS.NEXT(NUINDEX);
        END LOOP;
        
        
        CT_BOCERTIFICATECONTROL.CLEARCERTIFICATEORDERS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASSOCORDERCERTIFICATE;
    
    























    PROCEDURE DELUNNECESARYDETAILS
    (
        INUCONTRACTID       IN  GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	        IN  GE_ACTA.ID_PERIODO%TYPE,
        IDTBREAKDATE        IN  GE_ACTA.FECHA_FIN%TYPE,
        INUCERTIFICATEID    IN  GE_ACTA.ID_ACTA%TYPE,
        INUADMINBASEID      IN  GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
        INUPERSONID         IN  GE_PERSON.PERSON_ID%TYPE
    )
    IS
        NUINDEX         NUMBER;
        TBINDEXESTODEL  DAGE_DETALLE_ACTA.TYTBID_DETALLE_ACTA;
        RCDETAIL        DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;
        NUPOS           NUMBER;
        TBCERTIFDETAILS DAGE_DETALLE_ACTA.TYTBGE_DETALLE_ACTA;

        CNUMESSAGE_DEL_DOWNPAY CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 300141;
        CNUMESSAGE_DEL_WARFUND CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 300142;
    BEGIN
        NUPOS := 1;
        NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.FIRST;
        LOOP
            EXIT WHEN NUINDEX IS NULL;
            RCDETAIL := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX);
            IF (    (RCDETAIL.ID_ITEMS = GE_BOITEMSCONSTANTS.CNUDOWNPAYMENTITEM)
                AND (RCDETAIL.VALOR_TOTAL = 0)) THEN
                TBINDEXESTODEL(NUPOS) := NUINDEX;
                NUPOS := NUPOS + 1;

                
                ERRORS.SETERROR(CNUMESSAGE_DEL_DOWNPAY, INUCERTIFICATEID||'|'||INUADMINBASEID||'|'||INUPERSONID);
                
                CT_BOPROCESSLOG.REGISTERPROCESSLOG(INUCONTRACTID,
                                                   INUPERIODID,
                                                   IDTBREAKDATE,
                                                   NULL,
                                                   NULL,
                                                   NULL);
            ELSIF(    (RCDETAIL.ID_ITEMS = GE_BOITEMSCONSTANTS.CNUWARRANTYFUNDITEM)
                  AND (RCDETAIL.VALOR_TOTAL = 0)) THEN
                  TBINDEXESTODEL(NUPOS) := NUINDEX;
                  NUPOS := NUPOS + 1;

                  
                  ERRORS.SETERROR(CNUMESSAGE_DEL_WARFUND, INUCERTIFICATEID||'|'||INUADMINBASEID||'|'||INUPERSONID);
                  
                  CT_BOPROCESSLOG.REGISTERPROCESSLOG(INUCONTRACTID,
                                                     INUPERIODID,
                                                     IDTBREAKDATE,
                                                     NULL,
                                                     NULL,
                                                     NULL);
            END IF;

            NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.NEXT(NUINDEX);
        END LOOP;

        NUINDEX := TBINDEXESTODEL.FIRST;
        LOOP
            EXIT WHEN NUINDEX IS NULL;

            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.DELETE(TBINDEXESTODEL(NUINDEX));

            NUINDEX := TBINDEXESTODEL.NEXT(NUINDEX);
        END LOOP;

        IF (    (TBINDEXESTODEL.COUNT > 0)
            AND (CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.COUNT > 0)) THEN
            NUPOS := 1;
            
            NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.FIRST;
            LOOP
                EXIT WHEN NUINDEX IS NULL;

                TBCERTIFDETAILS(NUPOS) := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX);

                NUPOS := NUPOS + 1;
                NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.NEXT(NUINDEX);
            END LOOP;

            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS := TBCERTIFDETAILS;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELUNNECESARYDETAILS;
    
    
    




















    PROCEDURE PROCESSCONSIGNMENT
    (
        INUOPERATINGUNITID IN            OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUITEMSID         IN            GE_ITEMS.ITEMS_ID%TYPE,
        IONUAMOUNT         IN OUT NOCOPY GE_DETALLE_ACTA.CANTIDAD%TYPE
    )
    IS
        NUREALAMOUNT NUMBER;
    BEGIN
        
        GE_BOITEMSCONSIGNMT.RETIREITEMCONSIGNMT
        (
            INUOPERATINGUNITID,
            INUITEMSID,
            UT_DATE.FDTSYSDATE,
            IONUAMOUNT,
            NUREALAMOUNT,
            FALSE
        );

        IONUAMOUNT := NUREALAMOUNT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSCONSIGNMENT;
    
    































    PROCEDURE PROCESSORDERITEMBYVALUE
    (
        IRCCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        IRCSIMPLECONDITION          IN             CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN,
        OBLISOK                     IN OUT NOCOPY  BOOLEAN,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY  BOOLEAN,
        ITBORDERWITHCERT            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER
    )
    IS
        NUUNITVALUE             GE_DETALLE_ACTA.VALOR_UNITARIO%TYPE;
        NUACUM                  CT_SIMPLE_CONDITION.MAX_CEILING%TYPE;
        NUMISSING               GE_DETALLE_ACTA.VALOR_TOTAL%TYPE;

        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;
        NUORDERINDEX            BINARY_INTEGER;
        SBORDERCERT             VARCHAR2(100);
        
        NUDETAILINDEX           BINARY_INTEGER;

    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationSupport.ProcessOrderItemByValue',5);
        SAVEPOINT PROCESSBYVALUE;
        
        
        IF IRCSIMPLECONDITION.CONDITION_TYPE = 'T' THEN
            NUACUM := IRCCERTDETAILSBYSIMPLE.VALUE_ACUM;
        ELSIF IRCSIMPLECONDITION.CONDITION_TYPE = 'C' THEN
            NUACUM := IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM;
        
        ELSE
            NUACUM := 0;
        END IF;
        
        UT_TRACE.TRACE('Acumulado: ' || NUACUM,6);

        
        IF (
                NUACUM >= NVL(IRCSIMPLECONDITION.MIN_CEILING, -999999999999.999)
            AND
                NUACUM <= NVL(IRCSIMPLECONDITION.MAX_CEILING, 999999999999.999)
            )
        THEN
            UT_TRACE.TRACE('Cumplio con Topes' ,6);
            
            NUUNITVALUE := TRUNC(IRCSIMPLECONDITION.VALUE_ / IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM,3);

            
            NUMISSING   := IRCSIMPLECONDITION.VALUE_ - (NUUNITVALUE * IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM);

            NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST;
        
            
            LOOP
                EXIT WHEN NUDETAILINDEX IS NULL;
                
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := NUUNITVALUE * IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).NOVELTY_SIGN;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO * IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).CANTIDAD;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
                
                NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.NEXT(NUDETAILINDEX);
            END LOOP;
            
            
            IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).VALOR_TOTAL    := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).VALOR_TOTAL + (NUMISSING * IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS.LAST).NOVELTY_SIGN);
            IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).VALOR_UNITARIO := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).VALOR_TOTAL / IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).CANTIDAD;

            
            DAGE_DETALLE_ACTA.INSRECORDS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS);

            
            NUORDERINDEX := IRCCERTDETAILSBYSIMPLE.TBORDERS.FIRST;
            
            LOOP
                EXIT WHEN NUORDERINDEX IS NULL;
                
                SBORDERCERT := TO_CHAR(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX)) || '_' || TO_CHAR(IRCCERTDETAILSBYSIMPLE.CERTIFICATE_ID);
                
                IF (NOT ITBORDERWITHCERT.EXISTS(SBORDERCERT)) THEN
                    
                    RCORDERBYCERTIFICATE.ORDER_ID           := IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX);
                    RCORDERBYCERTIFICATE.CERTIFICATE_ID     := IRCCERTDETAILSBYSIMPLE.CERTIFICATE_ID;
                    RCORDERBYCERTIFICATE.VERIFICATION_DATE  := NULL;
                    
                    DACT_ORDER_CERTIFICA.INSRECORD(RCORDERBYCERTIFICATE);
                    
                    
                    ITBORDERWITHCERT(SBORDERCERT) := TRUE;
                    
                    
                    IF (NOT ITBORDERWITHCERT.EXISTS(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX))) THEN
                        ITBORDERWITHCERT(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX)) := TRUE;
                    END IF;
                END IF;
                
                NUORDERINDEX := IRCCERTDETAILSBYSIMPLE.TBORDERS.NEXT(NUORDERINDEX);
            END LOOP;

            
            COMMIT;

            OBLISOK := TRUE;

            
            IF (NOT IBLNEWOBLIGATIONS) THEN
                IBLNEWOBLIGATIONS := TRUE;
            END IF;
        END IF;

         UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessOrderItemByValue',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT PROCESSBYVALUE;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessOrderItemByValue Error',5);
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT PROCESSBYVALUE;
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessOrderItemByValue Error',5);
    END PROCESSORDERITEMBYVALUE;
    
    






























    PROCEDURE PROCESSORDERITEMBYPERCENT
    (
        IRCCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        IRCSIMPLECONDITION          IN             CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN,
        OBLISOK                     IN OUT NOCOPY  BOOLEAN,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY  BOOLEAN,
        ITBORDERWITHCERT            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER
    )
    IS
        NUACUM                  CT_SIMPLE_CONDITION.MAX_CEILING%TYPE;

        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;
        NUORDERINDEX            BINARY_INTEGER;
        
        SBORDERCERT             VARCHAR2(100);
        NUDETAILINDEX           PLS_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationSupport.ProcessOrderItemByPercent',5);
        SAVEPOINT SP_PROCESSBYPERCENT;
        
        
        NUACUM := IRCCERTDETAILSBYSIMPLE.VALUE_ACUM;
        
        UT_TRACE.TRACE('Acumulado: ' || NUACUM,6);
        UT_TRACE.TRACE('MIN_CEILING: ' || IRCSIMPLECONDITION.MIN_CEILING,6);
        UT_TRACE.TRACE('MAX_CEILING: ' || IRCSIMPLECONDITION.MAX_CEILING,6);

        
        IF (
                NUACUM >= NVL(IRCSIMPLECONDITION.MIN_CEILING, -999999999999.999)
            AND
                NUACUM <= NVL(IRCSIMPLECONDITION.MAX_CEILING, 999999999999.999)
            )
        THEN
            UT_TRACE.TRACE('Cumple',6);
            
            NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST;
            LOOP
                EXIT WHEN NUDETAILINDEX IS NULL;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).BASE_VALUE            := IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).REFERENCE_VALUE;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUEADJUST * IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).NOVELTY_SIGN * NVL(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).REFERENCE_VALUE, 0) * IRCSIMPLECONDITION.PERCENT / 100;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL / IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).LEGAL_ITEM_AMOUNT;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
                
                  
                IF(DACT_ITEM_NOVELTY.FBLEXIST(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).ITEMS_ID)) THEN
                    
                    IF (CT_BCNOVELTY.FBLISREVERTORDER(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).ORDER_ID))THEN

                        
                          IF(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).NOVELTY_SIGN < 0)THEN
                              IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).BASE_VALUE            := IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).REFERENCE_VALUE;
                              IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := NVL(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).REFERENCE_VALUE, 0) * IRCSIMPLECONDITION.PERCENT / 100;
                              IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL / IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).LEGAL_ITEM_AMOUNT;
                              IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
                          ELSE
                              IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).BASE_VALUE            := IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).REFERENCE_VALUE;
                              IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := NVL(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).REFERENCE_VALUE, 0) * IRCSIMPLECONDITION.PERCENT / 100 * -1;
                              IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL / IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).LEGAL_ITEM_AMOUNT;
                              IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
                          END IF;
                    END IF;
                END IF;

                NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.NEXT(NUDETAILINDEX);
            END LOOP;

            
            DAGE_DETALLE_ACTA.INSRECORDS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS);
            UT_TRACE.TRACE('Se insertan los detalles',6);

            
            NUORDERINDEX := IRCCERTDETAILSBYSIMPLE.TBORDERS.FIRST;
            
            UT_TRACE.TRACE('Se hacen las relaciones entre las �rdenes y el acta',6);
            LOOP
                EXIT WHEN NUORDERINDEX IS NULL;
                
                SBORDERCERT := TO_CHAR(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX)) || '_' || TO_CHAR(IRCCERTDETAILSBYSIMPLE.CERTIFICATE_ID);
                
                IF (NOT ITBORDERWITHCERT.EXISTS(SBORDERCERT)) THEN
                    
                    RCORDERBYCERTIFICATE.ORDER_ID           := IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX);
                    RCORDERBYCERTIFICATE.CERTIFICATE_ID     := IRCCERTDETAILSBYSIMPLE.CERTIFICATE_ID;
                    RCORDERBYCERTIFICATE.VERIFICATION_DATE  := NULL;

                    DACT_ORDER_CERTIFICA.INSRECORD(RCORDERBYCERTIFICATE);

                    
                    ITBORDERWITHCERT(SBORDERCERT) := TRUE;

                    
                    IF (NOT ITBORDERWITHCERT.EXISTS(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX))) THEN
                        ITBORDERWITHCERT(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX)) := TRUE;
                    END IF;
                END IF;

                NUORDERINDEX := IRCCERTDETAILSBYSIMPLE.TBORDERS.NEXT(NUORDERINDEX);

            END LOOP;

            
            COMMIT;

            OBLISOK := TRUE;

            
            IF (NOT IBLNEWOBLIGATIONS) THEN
                IBLNEWOBLIGATIONS := TRUE;
            END IF;
        END IF;
        
        UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessOrderItemByPercent',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSBYPERCENT;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessOrderItemByPercent Error',5);
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSBYPERCENT;
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessOrderItemByPercent Error',5);
    END PROCESSORDERITEMBYPERCENT;
    
    


















    FUNCTION FDTGETDATEORDERITEM
    (
       IDTASSIGNEDDATE     IN  OR_ORDER.ASSIGNED_DATE%TYPE,
       IDTLEGALIZATIONDATE IN OR_ORDER.LEGALIZATION_DATE%TYPE,
       IDTEXECUTIONDATE    IN  OR_ORDER.EXECUTION_FINAL_DATE%TYPE
    )RETURN  OR_ORDER.ASSIGNED_DATE%TYPE
    IS
        SBPARAMLISTCOST  GE_PARAMETER.VALUE%TYPE;
    BEGIN
        GE_BOPARAMETER.SETCACHEON();
        
        SBPARAMLISTCOST:= GE_BOPARAMETER.FSBGET(CSBLIST_COST_DATE);
        
        IF (SBPARAMLISTCOST = CT_BOCONSTANTS.CSBASSIGNED_DATE) THEN
            
            RETURN  IDTASSIGNEDDATE;
        END IF;
        
        IF(SBPARAMLISTCOST = CT_BOCONSTANTS.CSBLEGALIZATION_DATE) THEN
            
            RETURN IDTLEGALIZATIONDATE;
        END IF;

        IF (SBPARAMLISTCOST = CT_BOCONSTANTS.CSBEXECUTION_DATE) THEN
            
            RETURN IDTEXECUTIONDATE;
        ELSE
            RETURN NULL;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
           RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
           ERRORS.SETERROR;
           RAISE EX.CONTROLLED_ERROR;
    END FDTGETDATEORDERITEM;
    
    



































    PROCEDURE PROCESSORDERITEMBYCOSTLIST
    (
        IRCCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUCONTRACTORID             IN             GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        IRCSIMPLECONDITION          IN             CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN,
        OBLISOK                     IN OUT NOCOPY  BOOLEAN,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY  BOOLEAN,
        ITBORDERWITHCERT            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER
    )
    IS
        NUACUM                  CT_SIMPLE_CONDITION.MAX_CEILING%TYPE;

        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;
        NUORDERINDEX            BINARY_INTEGER;

        NUVALUEITEM             GE_DETALLE_ACTA.VALOR_UNITARIO%TYPE;
        NULIST                  GE_DETALLE_ACTA.ID_LISTA_UNIT_COSTO%TYPE;
        SBORDERCERT             VARCHAR2(100);
        
        NUDETAILINDEX           PLS_INTEGER;
        DTDATECOSTLIST          OR_ORDER.ASSIGNED_DATE%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationSupport.ProcessOrderItemByCostList',5);
        SAVEPOINT SP_PROCESSBYCOSTLIST;
        
        NUACUM := IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM;

        UT_TRACE.TRACE('Acumulado: ' || NUACUM,6);
        
        IF (
                NUACUM >= NVL(IRCSIMPLECONDITION.MIN_CEILING, -999999999999.999)
            AND
                NUACUM <= NVL(IRCSIMPLECONDITION.MAX_CEILING, 999999999999.999)
            )
        THEN
            UT_TRACE.TRACE('Cumple',6);
            
            NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST;
            LOOP
                EXIT WHEN NUDETAILINDEX IS NULL;
                
                DTDATECOSTLIST:= CT_BOLIQUIDATIONSUPPORT.FDTGETDATEORDERITEM
                                 (
                                   IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).ASSIGNED_DATE,
                                   IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).LEGALIZATION_DATE,
                                   IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).EXECUTION_DATE
                                 );

                
                CT_BOLIQUIDATIONSUPPORT.GETLISTITEMVALUE
                (
                    IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).ITEMS_ID,
                    NVL(DTDATECOSTLIST,IRCSIMPLECONDITION.INITIAL_DATE),
                    IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).OPERATING_UNIT_ID,
                    INUCONTRACTID,
                    INUCONTRACTORID,
                    IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).GEOGRAP_LOCATION_ID,
                    IRCSIMPLECONDITION.CERTIFICATE_TYPE_ID,
                    NULIST,
                    NUVALUEITEM
                );

                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUEADJUST * IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).NOVELTY_SIGN * NUVALUEITEM;
                
                IF(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUEADJUST < 0 )THEN
                    UT_TRACE.TRACE('Se Ajusta el valor Unitario a Positivo',6);
                    IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO * -1;
                END IF;

                  
                IF(DACT_ITEM_NOVELTY.FBLEXIST(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).ITEMS_ID)) THEN
                    
                    IF(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).NOVELTY_SIGN < 0)THEN
                        IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO     := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO * -1;
                    END IF;

                END IF;

                
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO * IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).LEGAL_ITEM_AMOUNT;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).ID_LISTA_UNIT_COSTO   := NULIST;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;

                NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.NEXT(NUDETAILINDEX);
            END LOOP;

            
            DAGE_DETALLE_ACTA.INSRECORDS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS);

            UT_TRACE.TRACE('Se insertan los detalles',6);
            
            
            NUORDERINDEX := IRCCERTDETAILSBYSIMPLE.TBORDERS.FIRST;
            UT_TRACE.TRACE('Se hacen las relaciones entre las �rdenes y el acta',6);
            LOOP
                EXIT WHEN NUORDERINDEX IS NULL;

                SBORDERCERT := TO_CHAR(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX)) || '_' || TO_CHAR(IRCCERTDETAILSBYSIMPLE.CERTIFICATE_ID);
                
                
                IF (NOT ITBORDERWITHCERT.EXISTS(SBORDERCERT)) THEN
                    
                    RCORDERBYCERTIFICATE.ORDER_ID           := IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX);
                    RCORDERBYCERTIFICATE.CERTIFICATE_ID     := IRCCERTDETAILSBYSIMPLE.CERTIFICATE_ID;
                    RCORDERBYCERTIFICATE.VERIFICATION_DATE  := NULL;

                    DACT_ORDER_CERTIFICA.INSRECORD(RCORDERBYCERTIFICATE);

                    
                    ITBORDERWITHCERT(SBORDERCERT) := TRUE;

                    
                    IF (NOT ITBORDERWITHCERT.EXISTS(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX))) THEN
                        ITBORDERWITHCERT(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX)) := TRUE;
                    END IF;
                END IF;

                NUORDERINDEX := IRCCERTDETAILSBYSIMPLE.TBORDERS.NEXT(NUORDERINDEX);

            END LOOP;

            
            COMMIT;

            OBLISOK := TRUE;

            
            IF (NOT IBLNEWOBLIGATIONS) THEN
                IBLNEWOBLIGATIONS := TRUE;
            END IF;
        END IF;

        UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessOrderItemByCostList',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSBYCOSTLIST;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessOrderItemByCostList Error',5);
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSBYCOSTLIST;
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessOrderItemByCostList Error',5);
    END PROCESSORDERITEMBYCOSTLIST;
    
    






























    PROCEDURE PROCESSBYORDERCOST
    (
        IRCCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        IRCSIMPLECONDITION          IN             CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN,
        OBLISOK                     IN OUT NOCOPY  BOOLEAN,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY  BOOLEAN,
        ITBORDERWITHCERT            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER
    )
    IS
        NUACUM                  CT_SIMPLE_CONDITION.MAX_CEILING%TYPE;

        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;
        NUORDERINDEX            BINARY_INTEGER;

        NUVALUEITEM             GE_DETALLE_ACTA.VALOR_UNITARIO%TYPE;
        NULIST                  GE_DETALLE_ACTA.ID_LISTA_UNIT_COSTO%TYPE;
        
        SBORDERCERT             VARCHAR2(100);
        
        NUDETAILINDEX           PLS_INTEGER;
    BEGIN
       UT_TRACE.TRACE('Inicial CT_BOLiquidationSupport.ProcessByOrderCost',5);
       SAVEPOINT SP_PROCESSBYORDERCOST;
       
        
        NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST;
        LOOP
            EXIT WHEN NUDETAILINDEX IS NULL;
            
            IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).BASE_VALUE            := IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUE;
            IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUEADJUST * IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).NOVELTY_SIGN * NVL(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUE, 0);
            IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL / IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).LEGAL_ITEM_AMOUNT;
            IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
            
            
            IF(DACT_ITEM_NOVELTY.FBLEXIST(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).ITEMS_ID)) THEN
                
                IF (CT_BCNOVELTY.FBLISREVERTORDER(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).ORDER_ID))THEN
                    
                      IF(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).NOVELTY_SIGN < 0)THEN
                          IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).BASE_VALUE            := IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUE;
                          IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := NVL(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUE, 0);
                          IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL / IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).LEGAL_ITEM_AMOUNT;
                          IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
                      ELSE
                          IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).BASE_VALUE            := IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUE;
                          IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := NVL(IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).VALUE, 0)*-1;
                          IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL / IRCCERTDETAILSBYSIMPLE.TBORDERITEMS(NUDETAILINDEX).LEGAL_ITEM_AMOUNT;
                          IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
                      END IF;
                END IF;
            END IF;

            
            NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.NEXT(NUDETAILINDEX);
        END LOOP;

        
        DAGE_DETALLE_ACTA.INSRECORDS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS);
        UT_TRACE.TRACE('Se insertan los detalles',6);

        
        NUORDERINDEX := IRCCERTDETAILSBYSIMPLE.TBORDERS.FIRST;
        UT_TRACE.TRACE('Se hacen las relaciones entre las �rdenes y el acta',6);
        LOOP
            EXIT WHEN NUORDERINDEX IS NULL;

            SBORDERCERT := TO_CHAR(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX)) || '_' || TO_CHAR(IRCCERTDETAILSBYSIMPLE.CERTIFICATE_ID);
            
            IF (NOT ITBORDERWITHCERT.EXISTS(SBORDERCERT)) THEN
                
                RCORDERBYCERTIFICATE.ORDER_ID           := IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX);
                RCORDERBYCERTIFICATE.CERTIFICATE_ID     := IRCCERTDETAILSBYSIMPLE.CERTIFICATE_ID;
                RCORDERBYCERTIFICATE.VERIFICATION_DATE  := NULL;

                DACT_ORDER_CERTIFICA.INSRECORD(RCORDERBYCERTIFICATE);

                
                ITBORDERWITHCERT(SBORDERCERT) := TRUE;

                
                IF (NOT ITBORDERWITHCERT.EXISTS(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX))) THEN
                    ITBORDERWITHCERT(IRCCERTDETAILSBYSIMPLE.TBORDERS(NUORDERINDEX)) := TRUE;

                END IF;
            END IF;

            NUORDERINDEX := IRCCERTDETAILSBYSIMPLE.TBORDERS.NEXT(NUORDERINDEX);

        END LOOP;

        
        COMMIT;

        OBLISOK := TRUE;

        
        IF (NOT IBLNEWOBLIGATIONS) THEN
            IBLNEWOBLIGATIONS := TRUE;
        END IF;
        UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessByOrderCost',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSBYORDERCOST;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessByOrderCost Error',5);
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSBYORDERCOST;
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessByOrderCost Error',5);
    END PROCESSBYORDERCOST;
    
    




























    PROCEDURE PROCESSDETAILSBYORDERITEM
    (
        IRCCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUCONTRACTORID             IN             GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY  BOOLEAN,
        ITBORDERWITHCERT            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER
    )
    IS

        SBINDEX                 VARCHAR2(500);

        TBSIMPLECONDPLAN        CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN;

        BLISOK                  BOOLEAN := FALSE;
    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationSupport.ProcessDetailsByOrderItem',4);
    
        SBINDEX := IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS.FIRST;

        
        LOOP
            EXIT WHEN SBINDEX IS NULL OR BLISOK;

            
            IF(IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS(SBINDEX).VALUE_ IS NOT NULL) THEN
                UT_TRACE.TRACE('Por valor',5);
                
                CT_BOLIQUIDATIONSUPPORT.PROCESSORDERITEMBYVALUE
                (
                    IRCCERTDETAILSBYSIMPLE,
                    IDTBREAKDATE,
                    INUCONTRACTID,
                    INUPERIODID,
                    IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS(SBINDEX),
                    BLISOK,
                    IBLNEWOBLIGATIONS,
                    ITBORDERWITHCERT
                );

            ELSIF (IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS(SBINDEX).PERCENT IS NOT NULL) THEN
                UT_TRACE.TRACE('Por Porcentaje',5);
                
                CT_BOLIQUIDATIONSUPPORT.PROCESSORDERITEMBYPERCENT
                (
                     IRCCERTDETAILSBYSIMPLE,
                     IDTBREAKDATE,
                     INUCONTRACTID,
                     INUPERIODID,
                     IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS(SBINDEX),
                     BLISOK,
                     IBLNEWOBLIGATIONS,
                    ITBORDERWITHCERT
                );

            ELSIF (IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS(SBINDEX).USE_COST_LIST = GE_BOCONSTANTS.CSBYES) THEN
                UT_TRACE.TRACE('Por Lista de Costos',5);
                
                CT_BOLIQUIDATIONSUPPORT.PROCESSORDERITEMBYCOSTLIST
                (
                     IRCCERTDETAILSBYSIMPLE,
                     IDTBREAKDATE,
                     INUCONTRACTID,
                     INUCONTRACTORID,
                     INUPERIODID,
                     IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS(SBINDEX),
                     BLISOK,
                     IBLNEWOBLIGATIONS,
                    ITBORDERWITHCERT
                );

            ELSIF (IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS(SBINDEX).USE_ORDER_COST = GE_BOCONSTANTS.CSBYES) THEN
                UT_TRACE.TRACE('Por Costos de la Orden',5);
                
                CT_BOLIQUIDATIONSUPPORT.PROCESSBYORDERCOST
                (
                     IRCCERTDETAILSBYSIMPLE,
                     IDTBREAKDATE,
                     INUCONTRACTID,
                     INUPERIODID,
                     IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS(SBINDEX),
                     BLISOK,
                     IBLNEWOBLIGATIONS,
                    ITBORDERWITHCERT
                );

            END IF;
        
            SBINDEX := IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS.NEXT(SBINDEX);
            
        END LOOP;

        
        IF (NOT BLISOK) THEN
            
            ERRORS.SETERROR
            (
                901514,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(1).REFERENCE_ITEM_ID||'|'||IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM||'|'||IRCCERTDETAILSBYSIMPLE.VALUE_ACUM
            );
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
        END IF;
        
        UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessDetailsByOrderItem',4);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessDetailsByOrderItem Error',4);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.ProcessDetailsByOrderItem Error',4);
    END PROCESSDETAILSBYORDERITEM;
    
    





















    PROCEDURE PROCESSCERTDETAILBYVALUE
    (
        IRCCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        IRCSIMPLECONDITION          IN             CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN,
        OBLISOK                     IN OUT NOCOPY  BOOLEAN
    )
    IS
        NUUNITVALUE             GE_DETALLE_ACTA.VALOR_UNITARIO%TYPE;
        NUACUM                  CT_SIMPLE_CONDITION.MAX_CEILING%TYPE;
        NUMISSING               GE_DETALLE_ACTA.VALOR_TOTAL%TYPE;

        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;
        
        NUDETAILINDEX           PLS_INTEGER;
    BEGIN
        SAVEPOINT PROCESSCERTBYVALUE;

        
        IF IRCSIMPLECONDITION.CONDITION_TYPE = 'T' THEN
            NUACUM := IRCCERTDETAILSBYSIMPLE.VALUE_ACUM;
        ELSIF IRCSIMPLECONDITION.CONDITION_TYPE = 'C' THEN
            NUACUM := IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM;
        
        ELSE
            NUACUM := 0;
        END IF;

        
        IF (
                NUACUM >= NVL(IRCSIMPLECONDITION.MIN_CEILING, -999999999999.999)
            AND
                NUACUM <= NVL(IRCSIMPLECONDITION.MAX_CEILING, 999999999999.999)
            )
        THEN
            
            NUUNITVALUE := TRUNC(IRCSIMPLECONDITION.VALUE_ / IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM,3);

            
            NUMISSING   := IRCSIMPLECONDITION.VALUE_ - (NUUNITVALUE * IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM);

            
            NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST;
            LOOP
                EXIT WHEN NUDETAILINDEX IS NULL;
                
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := NUUNITVALUE;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := NUUNITVALUE * IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).CANTIDAD;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
                
                NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.NEXT(NUDETAILINDEX);
            END LOOP;

            
            IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).VALOR_TOTAL    := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).VALOR_TOTAL + NUMISSING;
            IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).VALOR_UNITARIO := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).VALOR_TOTAL / IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.LAST).CANTIDAD;

            
            DAGE_DETALLE_ACTA.INSRECORDS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS);

            
            COMMIT;

            OBLISOK := TRUE;

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT PROCESSCERTBYVALUE;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT PROCESSCERTBYVALUE;
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
    END PROCESSCERTDETAILBYVALUE;
    
    




















    PROCEDURE PROCESSCERTDETAILBYPERCENT
    (
        IRCCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        IRCSIMPLECONDITION          IN             CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN,
        OBLISOK                     IN OUT NOCOPY  BOOLEAN
    )
    IS
        NUACUM                  CT_SIMPLE_CONDITION.MAX_CEILING%TYPE;

        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;
        NUDETAILINDEX           PLS_INTEGER;
    BEGIN
        SAVEPOINT SP_PROCESSCERTBYPERCENT;

        
        NUACUM := IRCCERTDETAILSBYSIMPLE.VALUE_ACUM;

        
        IF (
                NUACUM >= NVL(IRCSIMPLECONDITION.MIN_CEILING, -999999999999.999)
            AND
                NUACUM <= NVL(IRCSIMPLECONDITION.MAX_CEILING, 999999999999.999)
            )
        THEN

            
            NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST;
            LOOP
                EXIT WHEN NUDETAILINDEX IS NULL;
                
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).BASE_VALUE            := IRCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS(NUDETAILINDEX).VALOR_TOTAL;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := NVL(IRCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS(NUDETAILINDEX).VALOR_TOTAL, 0) * IRCSIMPLECONDITION.PERCENT / 100;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL / IRCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS(NUDETAILINDEX).CANTIDAD;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
                
                NUDETAILINDEX := IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.NEXT(NUDETAILINDEX);
                
            END LOOP;

            
            DAGE_DETALLE_ACTA.INSRECORDS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS);

            
            COMMIT;

            OBLISOK := TRUE;

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSCERTBYPERCENT;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSCERTBYPERCENT;
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
    END PROCESSCERTDETAILBYPERCENT;
    
    





















    PROCEDURE PROCESSCERTDETAILBYCOSTLIST
    (
        IRCCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUCONTRACTORID             IN             GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        IRCSIMPLECONDITION          IN             CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN,
        OBLISOK                     IN OUT NOCOPY  BOOLEAN
    )
    IS
        NUACUM                  CT_SIMPLE_CONDITION.MAX_CEILING%TYPE;

        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;

        NUVALUEITEM             GE_DETALLE_ACTA.VALOR_UNITARIO%TYPE;
        NULIST                  GE_DETALLE_ACTA.ID_LISTA_UNIT_COSTO%TYPE;
        
        NUDETAILINDEX           PLS_INTEGER;
    BEGIN
        SAVEPOINT SP_PROCESSBYCERTCOSTLIST;
        
        NUACUM := IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM;

        
        IF (
                NUACUM >= NVL(IRCSIMPLECONDITION.MIN_CEILING, -999999999999.999)
            AND
                NUACUM <= NVL(IRCSIMPLECONDITION.MAX_CEILING, 999999999999.999)
            )
        THEN

            
            NUDETAILINDEX :=  IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST;
            LOOP
                EXIT WHEN NUDETAILINDEX IS NULL;
                
                CT_BOLIQUIDATIONSUPPORT.GETLISTITEMVALUE
                (
                    IRCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS(NUDETAILINDEX).ID_ITEMS,
                    NVL(IRCSIMPLECONDITION.INITIAL_DATE, UT_DATE.FDTSYSDATE),
                    NULL,
                    INUCONTRACTID,
                    INUCONTRACTORID,
                    IRCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS(NUDETAILINDEX).GEOGRAP_LOCATION_ID,
                    IRCSIMPLECONDITION.CERTIFICATE_TYPE_ID,
                    NULIST,
                    NUVALUEITEM
                );

                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_UNITARIO        := NUVALUEITEM;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).VALOR_TOTAL           := NUVALUEITEM * IRCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS(NUDETAILINDEX).CANTIDAD;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).ID_LISTA_UNIT_COSTO   := NULIST;
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(NUDETAILINDEX).SIMPLE_CONDITION_ID   := IRCSIMPLECONDITION.SIMPLE_CONDITION_ID;
                
                NUDETAILINDEX :=  IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.NEXT(NUDETAILINDEX);
            END LOOP;

            
            DAGE_DETALLE_ACTA.INSRECORDS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS);

            
            COMMIT;

            OBLISOK := TRUE;

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSBYCERTCOSTLIST;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_PROCESSBYCERTCOSTLIST;
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS.FIRST).ID_ITEMS,
                IRCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
    END PROCESSCERTDETAILBYCOSTLIST;
    
    























    PROCEDURE PROCESSDETAILSBYCERTDETAIL
    (
        IRCCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUCONTRACTORID             IN             GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE
    )
    IS

        SBINDEX                 VARCHAR2(500);

        TBSIMPLECONDPLAN        CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN;

        RCSIMPLECONDITION       CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN;

        BLISOK                  BOOLEAN := FALSE;

    BEGIN
    
        SBINDEX := IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS.FIRST;

        
        LOOP
            EXIT WHEN SBINDEX IS NULL OR BLISOK;

            
            RCSIMPLECONDITION := IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS(SBINDEX);

            
            IF(RCSIMPLECONDITION.VALUE_ IS NOT NULL) THEN
                
                CT_BOLIQUIDATIONSUPPORT.PROCESSCERTDETAILBYVALUE
                (
                    IRCCERTDETAILSBYSIMPLE,
                    IDTBREAKDATE,
                    INUCONTRACTID,
                    INUPERIODID,
                    RCSIMPLECONDITION,
                    BLISOK
                );

            ELSIF (RCSIMPLECONDITION.PERCENT IS NOT NULL) THEN

                
                CT_BOLIQUIDATIONSUPPORT.PROCESSCERTDETAILBYPERCENT
                (
                     IRCCERTDETAILSBYSIMPLE,
                     IDTBREAKDATE,
                     INUCONTRACTID,
                     INUPERIODID,
                     RCSIMPLECONDITION,
                     BLISOK
                );

            ELSIF (RCSIMPLECONDITION.USE_COST_LIST = GE_BOCONSTANTS.CSBYES) THEN

                
                CT_BOLIQUIDATIONSUPPORT.PROCESSCERTDETAILBYCOSTLIST
                (
                     IRCCERTDETAILSBYSIMPLE,
                     IDTBREAKDATE,
                     INUCONTRACTID,
                     INUCONTRACTORID,
                     INUPERIODID,
                     RCSIMPLECONDITION,
                     BLISOK
                );

            END IF;
            SBINDEX := IRCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS.NEXT(SBINDEX);
        END LOOP;

        
        IF (NOT BLISOK) THEN
            
            ERRORS.SETERROR
            (
                901515,
                IRCCERTDETAILSBYSIMPLE.TBCERTDETAILS(1).ID_ITEMS||'|'||IRCCERTDETAILSBYSIMPLE.QUANTITY_ACUM||'|'||IRCCERTDETAILSBYSIMPLE.VALUE_ACUM
            );
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
    END PROCESSDETAILSBYCERTDETAIL;
    
    

















    FUNCTION FSBGETTYPETOGETORDERS
    (
        INUCONTRACTID              IN        GE_ACTA.ID_CONTRATO%TYPE,
        INUCONTRACTTYPEID          IN        GE_CONTRATO.ID_TIPO_CONTRATO%TYPE
    )
    RETURN CT_TASKTYPE_CONTYPE.FLAG_TYPE%TYPE
    IS
    BEGIN

        
        IF CT_BCCONTRACT.FBLHASCONTRACTTASKTYPES(INUCONTRACTID) THEN
            
            RETURN CT_BOCONSTANTS.CSBISCONTRACT;

        
        ELSIF CT_BCCONTRACT.FBLHASCONTTYPETASKTYPES(INUCONTRACTTYPEID) THEN
            
            RETURN CT_BOCONSTANTS.CSBISCONTRACTTYPE;

        END IF;
        
        RETURN NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETTYPETOGETORDERS;
    
    



















    PROCEDURE DELETENONUSEAUTOMORDERS
    (
        INUPERIODID	               IN         GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTID              IN         GE_ACTA.ID_CONTRATO%TYPE,
        IDTBREAKDATE               IN         GE_ACTA.FECHA_FIN%TYPE
    )
    IS
        TBORDERS                    DAOR_ORDER.TYTBORDER_ID;
        
        NUORDERINDEX                PLS_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationSupport.DeleteNonUseAutomOrders',5);
        
        
        CT_BCLIQUIDATIONSUPPORT.GETAUTOMORDERSNONUSE
        (
            TBORDERS,
            INUCONTRACTID
        );
        
        IF TBORDERS.COUNT = 0 THEN
            UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.DeleteNonUseAutomOrders no �rdenes',2);
            RETURN;
        END IF;
        
        
        CT_BONOVELTY.DELAUTOMORDERS(TBORDERS);
        
        
        ERRORS.SETERROR(901750, TBORDERS.COUNT);
        
        CT_BOPROCESSLOG.REGISTERPROCESSLOG
        (
            INUCONTRACTID,
            INUPERIODID,
            IDTBREAKDATE,
            NULL,
            NULL,
            NULL
        );

        UT_TRACE.TRACE('Termina CT_BOLiquidationSupport.DeleteNonUseAutomOrders',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELETENONUSEAUTOMORDERS;
    
    



























    PROCEDURE SETORDERSTOPROCESS
    (
        INUCONTRACTID              IN            GE_ACTA.ID_CONTRATO%TYPE,
        INUADMINBASEID	           IN            GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        IDTBREAKDATE               IN            GE_ACTA.FECHA_FIN%TYPE
    )
    IS
    BEGIN

        
        IF (INUADMINBASEID IS NULL) THEN

            
            CT_BCLIQUIDATIONSUPPORT.UPDTOLIQEXCORDERSWBASE
            (
                IDTBREAKDATE,
                INUCONTRACTID
            );

            
            CT_BOREADS.PROCESSREADBYCONTRACT
            (
                INUCONTRACTID,
                IDTBREAKDATE
            );

            
            CT_BCCONTRACT.SETALLORDERSWBASE
            (
                IDTBREAKDATE,
                INUCONTRACTID
            );

        
        ELSE
            
            CT_BCLIQUIDATIONSUPPORT.UPDTOLIQEXCORDERSABASE
            (
                INUADMINBASEID,
                IDTBREAKDATE,
                INUCONTRACTID
            );

            
            CT_BOREADS.PROCESSREADBYCONTRACT
            (
                INUCONTRACTID,
                IDTBREAKDATE
            );
            
            
            CT_BCCONTRACT.SETALLORDERSABASE
            (
                INUADMINBASEID,
                IDTBREAKDATE,
                INUCONTRACTID
            );
        END IF;
        

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETORDERSTOPROCESS;
    
    




















    PROCEDURE GROUPORDERBYDAY
    (
        INUCONTRACTYPEID    IN  GE_TIPO_CONTRATO.ID_TIPO_CONTRATO%TYPE,
        INUCONTRACTOR       IN  GE_CONTRATISTA.ID_CONTRATISTA%TYPE
    )
    IS

        
        DTBREAKDATE     DATE;

        
        NUPERIODID      GE_PERIODO_CERT.ID_PERIODO%TYPE;

        
        RCPERIOD        DAGE_PERIODO_CERT.STYGE_PERIODO_CERT;

        
        TBCONTRACTS          DAGE_CONTRATO.TYTBID_CONTRATO;

    BEGIN
    
        UT_TRACE.TRACE('Inicia: CT_BOLiquidationSupport.GroupOrderByDay',5);

        PKGENERALSERVICES.SETTRACEDATAON('DB','JCUERVO001');
        TD('Inicia CT_BOLiquidationSupport.GroupOrderByDay');


        
        TBCONTRACTS.DELETE;

        
        DTBREAKDATE := TRUNC(SYSDATE) - 1/86400;

        

        GE_BCPERIODOCERTIFICACION.OBTPERIODO
        (
            DTBREAKDATE,
            NUPERIODID
        );
        
        DBMS_OUTPUT.PUT_LINE('Periodo:'||NUPERIODID);


        
        DAGE_PERIODO_CERT.GETRECORD
        (
            NUPERIODID,
            RCPERIOD
        );

        
        CT_BCCONTRACT.GETOPENCONTRACTSTOPROCESS
        (
            INUCONTRACTYPEID,
            INUCONTRACTOR,
            DTBREAKDATE,
            RCPERIOD.FECHA_INICIAL,
            RCPERIOD.FECHA_FINAL,
            TBCONTRACTS
        );
        
        TD('Contratos a procesar: '||TBCONTRACTS.COUNT);

        IF (TBCONTRACTS.COUNT = 0) THEN
            ERRORS.SETERROR(6482);
            RAISE EX.CONTROLLED_ERROR;
            RETURN;
        END IF;

        
        GE_BOCERTCONTRATISTA.LIMPIARCACHEVALORITEMLISTA;

        
        CT_BOCERTIFICATE.CLEARPRINTTABLEPL;

        
        FOR N IN TBCONTRACTS.FIRST..TBCONTRACTS.LAST LOOP

            TD('Contrato en proceso: '||TBCONTRACTS(N));

            
            CT_BOREADS.PROCESSREADBYCONTRACT
            (
                TBCONTRACTS(N),
                DTBREAKDATE
            );
            
            TD('Fin contrato: '||TBCONTRACTS(N));
        END LOOP;

        PKGENERALSERVICES.SETTRACEDATAOFF;

        UT_TRACE.TRACE('Termina: CT_BOLiquidationSupport.GroupOrderByDay',5);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    
    END GROUPORDERBYDAY;
    
END CT_BOLIQUIDATIONSUPPORT;