
CREATE OR REPLACE PACKAGE MO_BOPACKAGES_ASSO IS
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   FUNCTION FBLISREQUESTCHILD( INUPACKAGE_ID IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN BOOLEAN;
   FUNCTION FNUGETREQUESTID( INUPACKAGE_ID IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN MO_PACKAGES.PACKAGE_ID%TYPE;
   FUNCTION FNUGETSALEREQUESTID( INUPACKAGE_ID IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN MO_PACKAGES.PACKAGE_ID%TYPE;
   FUNCTION FBOPENDINGPACKAGEASSO( INUPACKAGE_ID IN MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE, ISBTAGNAME IN MO_PACKAGES.TAG_NAME%TYPE )
    RETURN BOOLEAN;
   FUNCTION FNUGETPACKAGEFATHER( INUPACKAGECHILD IN MO_PACKAGES_ASSO.PACKAGE_ID%TYPE, ISBTAGNAME IN MO_PACKAGES.TAG_NAME%TYPE )
    RETURN MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE;
   FUNCTION FBOHASACTIVEASSOPACKS( INUPACKAGE_ID IN MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE )
    RETURN BOOLEAN;
   PROCEDURE GETASSOPACKSBYPACK( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, ORFASSOPACKS OUT CONSTANTS.TYREFCURSOR );
END MO_BOPACKAGES_ASSO;
/


CREATE OR REPLACE PACKAGE BODY MO_BOPACKAGES_ASSO IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO183170';
   CNUATTRIB_NULL_STAT_ERR CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 119562;
   CNUATTRIB_VALID_STAT_ERR CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 7352;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION FNUGETREQUESTID( INUPACKAGE_ID IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN MO_PACKAGES.PACKAGE_ID%TYPE
    IS
      NUIDX BINARY_INTEGER;
      TBPACKASSO DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
      RCPACKAGES DAMO_PACKAGES.STYMO_PACKAGES;
      NUREQUESTID MO_PACKAGES.PACKAGE_ID%TYPE := NULL;
    BEGIN
      UT_TRACE.TRACE( 'Inicia mo_boPackages_asso.fnuGetRequestId [' || INUPACKAGE_ID || ']', 15 );
      TBPACKASSO := MO_BCPACKAGES_ASSO.FTBPACKASSOBYPACKID( INUPACKAGE_ID );
      NUIDX := TBPACKASSO.FIRST;
      WHILE ( NUIDX IS NOT NULL )
       LOOP
         RCPACKAGES := DAMO_PACKAGES.FRCGETRECORD( TBPACKASSO( NUIDX ).PACKAGE_ID_ASSO );
         IF ( RCPACKAGES.TAG_NAME IN ( PS_BOPACKAGETYPE.FSBTAGNAMEFEASIBLESALE, PS_BOPACKAGETYPE.FSBTAGNAMERECOVER ) ) THEN
            NUREQUESTID := RCPACKAGES.PACKAGE_ID;
         END IF;
         NUIDX := TBPACKASSO.NEXT( NUIDX );
      END LOOP;
      UT_TRACE.TRACE( 'Termina mo_boPackages_asso.fnuGetRequestId [' || NUREQUESTID || ']', 15 );
      RETURN NUREQUESTID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLISREQUESTCHILD( INUPACKAGE_ID IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      RETURN ( FNUGETREQUESTID( INUPACKAGE_ID ) IS NOT NULL );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETSALEREQUESTID( INUPACKAGE_ID IN MO_PACKAGES.PACKAGE_ID%TYPE )
    RETURN MO_PACKAGES.PACKAGE_ID%TYPE
    IS
      NUIDX BINARY_INTEGER;
      TBPACKASSO DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
      RCPACKAGES DAMO_PACKAGES.STYMO_PACKAGES;
    BEGIN
      TBPACKASSO := MO_BCPACKAGES_ASSO.FTBPACKASSOBYPACKID( INUPACKAGE_ID );
      NUIDX := TBPACKASSO.FIRST;
      WHILE ( NUIDX IS NOT NULL )
       LOOP
         RCPACKAGES := DAMO_PACKAGES.FRCGETRECORD( TBPACKASSO( NUIDX ).PACKAGE_ID_ASSO );
         IF ( RCPACKAGES.TAG_NAME = PS_BOPACKAGETYPE.FSBTAGNAMEFEASIBLESALE ) THEN
            RETURN RCPACKAGES.PACKAGE_ID;
         END IF;
         NUIDX := TBPACKASSO.NEXT( NUIDX );
      END LOOP;
      RETURN NULL;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETSALEREQUESTID;
   FUNCTION FBOPENDINGPACKAGEASSO( INUPACKAGE_ID IN MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE, ISBTAGNAME IN MO_PACKAGES.TAG_NAME%TYPE )
    RETURN BOOLEAN
    IS
      TBPACKAGESASSO DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
      NUINDEXPACKAGEASSO NUMBER;
      RCPACKAGES DAMO_PACKAGES.STYMO_PACKAGES;
      PROCEDURE VALIDATEDATA
       IS
       BEGIN
         IF ( INUPACKAGE_ID IS NULL ) THEN
            ERRORS.SETERROR( CNUATTRIB_NULL_STAT_ERR, 'Identificador de la Solicitud' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         DAMO_PACKAGES.ACCKEY( INUPACKAGE_ID );
         IF ( ISBTAGNAME IS NULL ) THEN
            ERRORS.SETERROR( CNUATTRIB_NULL_STAT_ERR, 'TagName de la Solicitud' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF ( PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( ISBTAGNAME ) IS NULL ) THEN
            ERRORS.SETERROR( CNUATTRIB_VALID_STAT_ERR, 'TagName de la Solicitud [' || ISBTAGNAME || ']' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END VALIDATEDATA;
    BEGIN
      UT_TRACE.TRACE( 'Inicio mo_boPackages_asso.fboPendingPackageAsso', 10 );
      UT_TRACE.TRACE( 'Solicitud Base[' || INUPACKAGE_ID || '] TagName[' || ISBTAGNAME || ']', 12 );
      VALIDATEDATA;
      TBPACKAGESASSO := MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO( INUPACKAGE_ID );
      NUINDEXPACKAGEASSO := TBPACKAGESASSO.FIRST;
      WHILE ( NUINDEXPACKAGEASSO IS NOT NULL )
       LOOP
         RCPACKAGES := DAMO_PACKAGES.FRCGETRECORD( TBPACKAGESASSO( NUINDEXPACKAGEASSO ).PACKAGE_ID );
         UT_TRACE.TRACE( 'Solicitud Asociada[' || RCPACKAGES.PACKAGE_ID || ']', 12 );
         IF ( RCPACKAGES.TAG_NAME = ISBTAGNAME ) AND ( NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS( RCPACKAGES.MOTIVE_STATUS_ID ) ) THEN
            UT_TRACE.TRACE( 'Fin mo_boPackages_asso.fboPendingPackageAsso Solicitudes Pendientes[TRUE]', 10 );
            RETURN TRUE;
         END IF;
         NUINDEXPACKAGEASSO := TBPACKAGESASSO.NEXT( NUINDEXPACKAGEASSO );
      END LOOP;
      UT_TRACE.TRACE( 'Fin mo_boPackages_asso.fboPendingPackageAsso Solicitudes Pendientes[FALSE]', 10 );
      RETURN FALSE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBOPENDINGPACKAGEASSO;
   FUNCTION FNUGETPACKAGEFATHER( INUPACKAGECHILD IN MO_PACKAGES_ASSO.PACKAGE_ID%TYPE, ISBTAGNAME IN MO_PACKAGES.TAG_NAME%TYPE )
    RETURN MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE
    IS
      RCPACKAGEFATHER DAMO_PACKAGES.STYMO_PACKAGES;
      NUPACKAGEFATHER MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE;
      TBFATHERPACKAGES DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
      NUINDEXFATHERPACKAGES NUMBER;
      PROCEDURE VALIDATEDATA
       IS
       BEGIN
         IF ( INUPACKAGECHILD IS NULL ) THEN
            ERRORS.SETERROR( CNUATTRIB_NULL_STAT_ERR, 'Codigo de la Solicitud Asociada' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         DAMO_PACKAGES.ACCKEY( INUPACKAGECHILD );
         IF ( ISBTAGNAME IS NULL ) THEN
            ERRORS.SETERROR( CNUATTRIB_NULL_STAT_ERR, 'TagName de la Solicitud' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         IF ( PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( ISBTAGNAME ) IS NULL ) THEN
            ERRORS.SETERROR( CNUATTRIB_VALID_STAT_ERR, 'TagName de la Solicitud [' || ISBTAGNAME || ']' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
       EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END VALIDATEDATA;
    BEGIN
      UT_TRACE.TRACE( 'Inicia mo_boPackages_asso.fnuGetPackageFather', 15 );
      UT_TRACE.TRACE( 'Solicitud Hija [' || INUPACKAGECHILD || '] TagName[' || ISBTAGNAME || ']', 16 );
      VALIDATEDATA;
      RCPACKAGEFATHER := NULL;
      NUPACKAGEFATHER := NULL;
      TBFATHERPACKAGES := MO_BCPACKAGES_ASSO.FTBPACKASSOBYPACKID( INUPACKAGECHILD );
      NUINDEXFATHERPACKAGES := TBFATHERPACKAGES.FIRST;
      WHILE ( NUINDEXFATHERPACKAGES IS NOT NULL )
       LOOP
         RCPACKAGEFATHER := DAMO_PACKAGES.FRCGETRECORD( TBFATHERPACKAGES( NUINDEXFATHERPACKAGES ).PACKAGE_ID_ASSO );
         UT_TRACE.TRACE( 'Solicitud Padre [' || RCPACKAGEFATHER.PACKAGE_ID || ']', 16 );
         IF ( RCPACKAGEFATHER.TAG_NAME = ISBTAGNAME ) THEN
            NUPACKAGEFATHER := RCPACKAGEFATHER.PACKAGE_ID;
            EXIT;
         END IF;
         NUINDEXFATHERPACKAGES := TBFATHERPACKAGES.NEXT( NUINDEXFATHERPACKAGES );
      END LOOP;
      UT_TRACE.TRACE( 'Termina mo_boPackages_asso.fnuGetPackageFather Solicitud Padre Encontrada[' || NUPACKAGEFATHER || ']', 15 );
      RETURN NUPACKAGEFATHER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETPACKAGEFATHER;
   FUNCTION FBOHASACTIVEASSOPACKS( INUPACKAGE_ID IN MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE )
    RETURN BOOLEAN
    IS
      TBPACKASSO DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
      BOHASCHILD BOOLEAN := FALSE;
    BEGIN
      UT_TRACE.TRACE( 'INICIO mo_boPackages_asso.fboHasActiveAssoPacks', 10 );
      UT_TRACE.TRACE( 'Solicitud de Interaccion [' || INUPACKAGE_ID || ']', 12 );
      TBPACKASSO := MO_BCPACKAGES_ASSO.FTBACTIVEPACKASSOBYPACKASSO( INUPACKAGE_ID );
      IF ( TBPACKASSO.COUNT > 0 ) THEN
         BOHASCHILD := TRUE;
      END IF;
      UT_TRACE.TRACE( 'FIN mo_boPackages_asso.fboHasActiveAssoPacks', 10 );
      RETURN BOHASCHILD;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBOHASACTIVEASSOPACKS;
   PROCEDURE GETASSOPACKSBYPACK( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, ORFASSOPACKS OUT CONSTANTS.TYREFCURSOR )
    IS
      PROCEDURE VALIDATEDATA
       IS
       BEGIN
         IF ( INUPACKAGEID IS NULL ) THEN
            ERRORS.SETERROR( CNUATTRIB_NULL_STAT_ERR, 'Codigo de la Solicitud' );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         DAMO_PACKAGES.ACCKEY( INUPACKAGEID );
      END VALIDATEDATA;
    BEGIN
      UT_TRACE.TRACE( 'Inicia MO_BOPackages_asso.GetAssoPacksByPack Solicitud[' || INUPACKAGEID || ']', 3 );
      VALIDATEDATA;
      MO_BCPACKAGES_ASSO.GETASSOPACKSBYPACK( INUPACKAGEID, ORFASSOPACKS );
      UT_TRACE.TRACE( 'Fin MO_BOPackages_asso.GetAssoPacksByPack', 3 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETASSOPACKSBYPACK;
END MO_BOPACKAGES_ASSO;
/


