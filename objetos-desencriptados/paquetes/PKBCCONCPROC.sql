PACKAGE pkBCConcproc IS

































































    
    
    
    
    
    
    CSBEXECUTE      CONSTANT    CONCPROC.COPRESTA%TYPE := 'E';
    CSBFINISHED     CONSTANT    CONCPROC.COPRESTA%TYPE := 'T';
    CNUROWLIMIT     CONSTANT    NUMBER := 1;
    
    
    
    
    
    
    
    
    

    
    FUNCTION FSBVERSION  RETURN VARCHAR2;
    
    FUNCTION FBLEXECUTINGPROCESS
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE
    )
    RETURN BOOLEAN;
    
    FUNCTION FBLEXECUTINGREVERSE
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE
    )
    RETURN BOOLEAN;
    
    FUNCTION FBLFINISHEDPROCESS
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE DEFAULT NULL
    )
    RETURN BOOLEAN;
    
    FUNCTION FBLFINISHEDREVERSE
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE

    )
    RETURN BOOLEAN;
    
    FUNCTION FBLNOTFINISHEDPROCESS
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE DEFAULT NULL
    )
    RETURN BOOLEAN;

    FUNCTION FNUGETPROCESSID
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE
    )
    RETURN CONCPROC.COPRIDCO%TYPE;
    
    FUNCTION FRCGETRECORDPROCESS
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE
    )
    RETURN CONCPROC%ROWTYPE;
    
    PROCEDURE UPDPROCESSFINISHED
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE
    );
    
    PROCEDURE UPDRECORDSESSION
    (
        INUCOPRIDCO     IN  CONCPROC.COPRIDCO%TYPE
    );
    
    FUNCTION FRCFIRSTFINISHBYPARARANG
    (
        ISBINIPARA IN CONCPROC.COPRPARA%TYPE,
        ISBFINPARA IN CONCPROC.COPRPARA%TYPE
    )
    RETURN CONCPROC%ROWTYPE ;
    
    FUNCTION FBLEXECUTINGPROCESS
    (
     ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
     ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE,
     ISBCOPRPROGREV  IN  CONCPROC.COPRPROG%TYPE,
     ISBESTADO       IN  CONCPROC.COPRESTA%TYPE
    )
    RETURN VARCHAR2;
    
    PROCEDURE UPDNOTFINISHEDPROCS
    (
        ISBCOPRPARA     IN      CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN      CONCPROC.COPRPROG%TYPE
    );
    
    PROCEDURE UPDPROCFINBYSESSION
    (
        ISBCOPRPARA     IN      CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN      CONCPROC.COPRPROG%TYPE,
        ISBCOPRSEID     IN      CONCPROC.COPRSEID%TYPE
    );
    
    
    
    FUNCTION FSBLASTPROCESS
    (
        ISBCOPRPROG IN CONCPROC.COPRPROG%TYPE,
        ISBPROGREVE IN CONCPROC.COPRPROG%TYPE,
        ISBCOPRPARA IN CONCPROC.COPRPARA%TYPE
    )
    RETURN CONCPROC.COPRPARA%TYPE;
    
    
    FUNCTION FSBPREVIOUSPARAM
    (
        ISBCOPRPROG IN CONCPROC.COPRPROG%TYPE,
        ISBPROGREVE IN CONCPROC.COPRPROG%TYPE,
        ISBCOPRPARA IN CONCPROC.COPRPARA%TYPE
    )
    RETURN CONCPROC.COPRPARA%TYPE;
    
    
    FUNCTION FBLFINISHEDREVERSE
    (
        ISBCOPRPARA    IN  CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROGGEN IN  CONCPROC.COPRPROG%TYPE,
        ISBCOPRPROGREV IN  CONCPROC.COPRPROG%TYPE
    )
    RETURN BOOLEAN;

    FUNCTION FDTMAXDATEPARAMETER
    (
        ISBCOPRPROGG    IN  CONCPROC.COPRPROG%TYPE,
        ISBCOPRPROGR    IN  CONCPROC.COPRPROG%TYPE,
        IDTCOPRPARA     IN  DATE
    )
        RETURN DATE;
        
    FUNCTION FBONOTFINISHEDPROCESS
    (
        ISBCOPRPROG IN  CONCPROC.COPRPROG%TYPE,
        ISBCOPRPARA IN  CONCPROC.COPRPARA%TYPE
    )
        RETURN BOOLEAN;
    
END PKBCCONCPROC;

/

PACKAGE BODY pkBCConcproc IS


























































































    
    
    
    
    
    CSBVERSION   CONSTANT VARCHAR2(250) := 'SAO510120';


    
    
    

    SBERRMSG	  GE_ERROR_LOG.DESCRIPTION%TYPE;   

    
    
    
    
    CURSOR  CUCONCPROC
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE
    )
    IS
    SELECT  --+ index(concproc, IX_CONCPROC02)
            *
    FROM    CONCPROC
    WHERE   COPRPARA = ISBCOPRPARA
    AND     COPRPROG = ISBCOPRPROG;
    
    
    

























FUNCTION FSBVERSION
RETURN VARCHAR2
IS

BEGIN

    PKERRORS.PUSH ('pkBCConcproc.fsbVersion');

    PKERRORS.POP;

    
    RETURN ( CSBVERSION );
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END;




























FUNCTION FBLEXECUTINGPROCESS
(
    ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
    ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE
)
RETURN BOOLEAN
IS
    SBRESULT    VARCHAR2(1);

    CURSOR  CUEXECUTE IS
    SELECT  --+ index(concproc, IX_CONCPROC02)
            'x'
    FROM    CONCPROC /*+ pkBCConcproc.fblExecutingProcess */
    WHERE   COPRESTA = CSBEXECUTE
    AND     COPRPARA LIKE ISBCOPRPARA
    AND     COPRPROG LIKE ISBCOPRPROG
    AND     COPRSEID IN (
                            SELECT  AUDSID||','||SID||','||SERIAL#
                            FROM    SYS.V_$SESSION
                        );
BEGIN

    PKERRORS.PUSH ('pkBCConcproc.fblExecutingProcess');
    
    IF CUEXECUTE%ISOPEN THEN
        CLOSE CUEXECUTE;
    END IF;
    
    OPEN CUEXECUTE;

    FETCH CUEXECUTE INTO SBRESULT;
    
    IF SBRESULT IS NOT NULL THEN
        PKERRORS.POP;
        RETURN ( TRUE );
    END IF;

    CLOSE CUEXECUTE;
    
    PKERRORS.POP;
    RETURN ( FALSE );
    
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END;


























FUNCTION FBLEXECUTINGREVERSE
(
    ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
    ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE
)
RETURN BOOLEAN
IS
    SBRESULT    VARCHAR2(1);

    CURSOR  CUEXECREVE IS
    SELECT  --+ index(concproc, IX_CONCPROC02)
            'x'
    FROM    CONCPROC B
    WHERE   COPRESTA IN ( CSBFINISHED,CSBEXECUTE )
    AND     COPRPARA = ISBCOPRPARA
    AND     COPRPROG = PKERRORS.FSBGETAPPLICATION
    AND     EXISTS (
                    SELECT  --+ index(concproc, IX_CONCPROC01)
                            'x'
                    FROM    CONCPROC A
                    WHERE   A.COPRESTA = CSBEXECUTE
                    AND     A.COPRPARA = B.COPRPARA
                    AND     A.COPRPROG = ISBCOPRPROG
                    AND     A.COPRFERE > B.COPRFERE
                    AND     A.COPRSEID IN (
                                            SELECT  AUDSID||','||SID||','||SERIAL#
                                            FROM    SYS.V_$SESSION
                                          )
                    );
BEGIN

    PKERRORS.PUSH ('pkBCConcproc.fblExecutingReverse');

    IF CUEXECREVE%ISOPEN THEN
        CLOSE CUEXECREVE;
    END IF;

    OPEN CUEXECREVE;

    FETCH CUEXECREVE INTO SBRESULT;

    IF SBRESULT IS NOT NULL THEN
        PKERRORS.POP;
        RETURN ( TRUE );
    END IF;

    CLOSE CUEXECREVE;

    PKERRORS.POP;
    RETURN ( FALSE );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END;


































FUNCTION FBLFINISHEDPROCESS
(
    ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
    ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE DEFAULT NULL
)
RETURN BOOLEAN
IS
    SBRESULT    VARCHAR2(1);

    CURSOR  CUFINISH IS
    SELECT  --+ index(concproc, IX_CONCPROC02)
            'x'
    FROM    CONCPROC /*+ pkBCConcproc.fblFinishedProcess */
    WHERE   COPRESTA = CSBFINISHED
    AND     COPRPARA LIKE ISBCOPRPARA
    AND     COPRPROG LIKE NVL(ISBCOPRPROG,PKERRORS.FSBGETAPPLICATION);
BEGIN

    PKERRORS.PUSH ('pkBCConcproc.fblFinishedProcess');

    IF CUFINISH%ISOPEN THEN
        CLOSE CUFINISH;
    END IF;

    OPEN CUFINISH;

    FETCH CUFINISH INTO SBRESULT;

    IF SBRESULT IS NOT NULL THEN
        PKERRORS.POP;
        RETURN ( TRUE );
    END IF;

    CLOSE CUFINISH;

    PKERRORS.POP;
    RETURN ( FALSE );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END;







































FUNCTION FBLFINISHEDREVERSE
(
    ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
    ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE

)
RETURN BOOLEAN
IS
    SBRESULT    VARCHAR2(1);

    
    SBPROGRAM   CONCPROC.COPRPROG%TYPE;

    CURSOR  CUFINISHREVE IS
    SELECT  --+ index(concproc, IX_CONCPROC02)
            'x'
    FROM    CONCPROC A  /*+ pkBCConcproc.fblFinishedReverse */
    WHERE   A.COPRESTA = CSBFINISHED
    AND     A.COPRPARA LIKE ISBCOPRPARA
    AND     A.COPRPROG LIKE SBPROGRAM
    AND     A.COPRFERE < (
                            SELECT  --+ index(concproc, IX_CONCPROC02)
                                    B.COPRFERE
                            FROM    CONCPROC B
                            WHERE   B.COPRPARA = A.COPRPARA
                            AND     B.COPRPROG LIKE ISBCOPRPROG
                            AND     ROWNUM = 1
                         );
BEGIN

    PKERRORS.PUSH ('pkBCConcproc.fblFinishedReverse');

    SBPROGRAM:= PKERRORS.FSBGETAPPLICATION;

    IF CUFINISHREVE%ISOPEN THEN
        CLOSE CUFINISHREVE;
    END IF;

    OPEN CUFINISHREVE;

    FETCH CUFINISHREVE INTO SBRESULT;

    IF SBRESULT IS NOT NULL THEN
        PKERRORS.POP;
        RETURN ( TRUE );
    END IF;

    CLOSE CUFINISHREVE;

    PKERRORS.POP;
    RETURN ( FALSE );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END ;


























FUNCTION FBLNOTFINISHEDPROCESS
(
    ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
    ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE DEFAULT NULL
)
RETURN BOOLEAN
IS
    NUCOPRIDCO    CONCPROC.COPRIDCO%TYPE;

    CURSOR  CUNOTFINISH IS
    SELECT  --+ index(concproc, IX_CONCPROC01)
            COPRIDCO
    FROM    CONCPROC
    WHERE   COPRESTA = CSBEXECUTE
    AND     COPRPARA = ISBCOPRPARA
    AND     COPRPROG = NVL(ISBCOPRPROG,PKERRORS.FSBGETAPPLICATION)
    AND     COPRSEID NOT IN (
                                SELECT  AUDSID||','||SID||','||SERIAL#
                                FROM    SYS.V_$SESSION
                            );
BEGIN

    PKERRORS.PUSH ('pkBCConcproc.fblNotFinishedProcess');

    IF CUNOTFINISH%ISOPEN THEN
        CLOSE CUNOTFINISH;
    END IF;

    OPEN CUNOTFINISH;

    FETCH CUNOTFINISH INTO NUCOPRIDCO;

    CLOSE CUNOTFINISH;
    
    IF NUCOPRIDCO IS NULL THEN
        PKERRORS.POP;
        RETURN ( FALSE );
    END IF;

    PKERRORS.POP;
    RETURN ( TRUE );

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END ;


























FUNCTION FNUGETPROCESSID
(
    ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE
)
RETURN CONCPROC.COPRIDCO%TYPE
IS
    NUCOPRIDCO    CONCPROC.COPRIDCO%TYPE;

    CURSOR  CUPROCESS IS
    SELECT  --+ index(concproc, IX_CONCPROC02)
            COPRIDCO
    FROM    CONCPROC
    WHERE   COPRPARA = ISBCOPRPARA
    AND     COPRPROG = PKERRORS.FSBGETAPPLICATION;

BEGIN

    PKERRORS.PUSH ('pkBCConcproc.fnuGetProcessId');

    IF CUPROCESS%ISOPEN THEN
        CLOSE CUPROCESS;
    END IF;

    OPEN CUPROCESS;

    FETCH CUPROCESS INTO NUCOPRIDCO;

    CLOSE CUPROCESS;

    PKERRORS.POP;
    RETURN ( NUCOPRIDCO );

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END;


























FUNCTION FRCGETRECORDPROCESS
(
    ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
    ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE
)
RETURN CONCPROC%ROWTYPE
IS
    RCCONCPROC    CONCPROC%ROWTYPE;

BEGIN

    PKERRORS.PUSH ('pkBCConcproc.frcGetRecordProcess');

    IF CUCONCPROC%ISOPEN THEN
        CLOSE CUCONCPROC;
    END IF;

    OPEN CUCONCPROC(ISBCOPRPARA,ISBCOPRPROG);

    FETCH CUCONCPROC INTO RCCONCPROC;

    CLOSE CUCONCPROC;

    PKERRORS.POP;
    RETURN ( RCCONCPROC );

EXCEPTION
    WHEN LOGIN_DENIED THEN
        IF CUCONCPROC%ISOPEN THEN
            CLOSE CUCONCPROC;
        END IF;
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	IF CUCONCPROC%ISOPEN THEN
            CLOSE CUCONCPROC;
        END IF;
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        IF CUCONCPROC%ISOPEN THEN
            CLOSE CUCONCPROC;
        END IF;
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END;























PROCEDURE UPDPROCESSFINISHED
(
    ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE
)
IS
BEGIN

    PKERRORS.PUSH('pkBCConcproc.updProcessFinished');

    UPDATE  CONCPROC
    SET     COPRESTA = CSBFINISHED,
            COPRFERE = SYSDATE
    WHERE   COPRPARA = ISBCOPRPARA
    AND     COPRPROG = PKERRORS.FSBGETAPPLICATION;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END ;






























PROCEDURE UPDRECORDSESSION
(
    INUCOPRIDCO     IN  CONCPROC.COPRIDCO%TYPE
)
IS
BEGIN

    PKERRORS.PUSH('pkBCConcproc.updRecordSession');
    
    UPDATE  CONCPROC
    SET     COPRSEID = PKSESSIONMGR.FSBGETPROCSESSION,
            COPRFERE = SYSDATE,
            COPRESTA = CSBEXECUTE,
            COPRUSUA = PKGENERALSERVICES.FSBGETUSERNAME,
            COPRTERM = PKGENERALSERVICES.FSBGETTERMINAL
    WHERE   COPRIDCO = INUCOPRIDCO;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END;

    



















    FUNCTION FRCFIRSTFINISHBYPARARANG
    (
        ISBINIPARA IN CONCPROC.COPRPARA%TYPE,
        ISBFINPARA IN CONCPROC.COPRPARA%TYPE
    )
    RETURN CONCPROC%ROWTYPE
    IS
        CURSOR CUDATA IS
        SELECT  --+ index(concproc, IX_CONCPROC02)
                *
        FROM CONCPROC
        WHERE COPRPARA BETWEEN ISBINIPARA AND ISBFINPARA
            AND COPRPROG = PKERRORS.FSBGETAPPLICATION
            AND COPRESTA = CSBFINISHED ;
            
        RCDATA CONCPROC%ROWTYPE;
    
    BEGIN
    
        PKERRORS.PUSH('pkBCConcproc.frcFirstFinishByParaRang');
        
        IF CUDATA%ISOPEN THEN
            CLOSE CUDATA;
        END IF;
        
        OPEN CUDATA;
        FETCH CUDATA INTO RCDATA;
        CLOSE CUDATA;
        
        PKERRORS.POP;
        RETURN RCDATA ;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            IF CUDATA%ISOPEN THEN
                CLOSE CUDATA;
            END IF;
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            IF CUDATA%ISOPEN THEN
                CLOSE CUDATA;
            END IF;
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            IF CUDATA%ISOPEN THEN
                CLOSE CUDATA;
            END IF;
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END;

        




























    FUNCTION FBLEXECUTINGPROCESS
    (
     ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
     ISBCOPRPROG     IN  CONCPROC.COPRPROG%TYPE,
     ISBCOPRPROGREV  IN  CONCPROC.COPRPROG%TYPE,
     ISBESTADO       IN  CONCPROC.COPRESTA%TYPE
    )
    RETURN VARCHAR2
    IS

        
        SBRESULTEXECUTE    VARCHAR2(1);

        CURSOR  CUEXECUTE
        (
          ISBPARAMETRO    IN  CONCPROC.COPRPARA%TYPE,
          ISBPROGRAMA     IN  CONCPROC.COPRPROG%TYPE,
          ISBPROGRAMAREV  IN  CONCPROC.COPRPROG%TYPE,
          ISBESTADO       IN  CONCPROC.COPRESTA%TYPE
        )
        IS
        SELECT --+ index(concproc,IX_CONCPROC02)
               'X'
          FROM CONCPROC
         WHERE COPRESTA IN (ISBESTADO)
           AND COPRPARA LIKE ISBPARAMETRO
           AND COPRPROG IN (ISBPROGRAMA, ISBPROGRAMAREV);

    BEGIN

        PKERRORS.PUSH ('pkBCConcproc.fblExecutingProcess');

        IF CUEXECUTE%ISOPEN THEN
            CLOSE CUEXECUTE;
        END IF;

        
        OPEN CUEXECUTE(ISBCOPRPARA,ISBCOPRPROG,ISBCOPRPROGREV,ISBESTADO);
        FETCH CUEXECUTE INTO SBRESULTEXECUTE;
        CLOSE CUEXECUTE;

        PKERRORS.POP;

        RETURN ( SBRESULTEXECUTE );


    EXCEPTION
        WHEN LOGIN_DENIED THEN
	       PKERRORS.POP;
	       RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	       
	       PKERRORS.POP;
	       RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
	       PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	       PKERRORS.POP;
	       RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END;
    
    
    























    PROCEDURE UPDNOTFINISHEDPROCS
    (
        ISBCOPRPARA     IN      CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN      CONCPROC.COPRPROG%TYPE
    )
    IS

        
        PRAGMA AUTONOMOUS_TRANSACTION;
    
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [(AT)pkBCConcproc.UpdNotFinishedProcs]', 7 );

        

        UPDATE  /*+ index( concproc, IX_CONCPROC02 ) */
                CONCPROC
        SET     /*+ pkBCConcproc.GetNotFinishedProcs */
                COPRESTA = CSBFINISHED,
                COPRFERE = SYSDATE
        WHERE   COPRESTA = CSBEXECUTE
        AND     COPRPARA = ISBCOPRPARA
        AND     COPRPROG = ISBCOPRPROG
        AND     COPRSEID NOT IN
        (
            SELECT  /*+ opt_param( '_hash_join_enabled', 'true' )
                        opt_param( '_optimizer_sortmerge_join_enabled', 'true' ) */
                    AUDSID || ',' || SID || ',' || SERIAL#
            FROM    SYS.V_$SESSION
        );

        
        PKGENERALSERVICES.COMMITTRANSACTION;

        UT_TRACE.TRACE( 'Fin: [pkBCConcproc.UpdNotFinishedProcs]', 7 );

    EXCEPTION
    
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
            RAISE;

        WHEN OTHERS THEN
            
            PKGENERALSERVICES.ROLLBACKTRANSACTION;
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END UPDNOTFINISHEDPROCS;
    
    
    
























    PROCEDURE UPDPROCFINBYSESSION
    (
        ISBCOPRPARA     IN      CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROG     IN      CONCPROC.COPRPROG%TYPE,
        ISBCOPRSEID     IN      CONCPROC.COPRSEID%TYPE
    )
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkBCConcproc.UpdProcFinBySession]', 7 );

        

        UPDATE  /*+ index( concproc, IX_CONCPROC01 ) */
                CONCPROC
        SET     /*+ pkBCConcproc.UpdProcFinBySession */
                COPRESTA = CSBFINISHED,
                COPRFERE = SYSDATE
        WHERE   COPRESTA = CSBEXECUTE
        AND     COPRPARA = ISBCOPRPARA
        AND     COPRPROG = ISBCOPRPROG
        AND     COPRSEID = ISBCOPRSEID;

        UT_TRACE.TRACE( 'Fin: [pkBCConcproc.UpdProcFinBySession]', 7 );

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END UPDPROCFINBYSESSION;


    































    FUNCTION FSBLASTPROCESS
    (
        ISBCOPRPROG IN CONCPROC.COPRPROG%TYPE,
        ISBPROGREVE IN CONCPROC.COPRPROG%TYPE,
        ISBCOPRPARA IN CONCPROC.COPRPARA%TYPE
    )
    RETURN CONCPROC.COPRPARA%TYPE
    IS
        
        DTRESULTEXECUTE DATE := NULL;

        CURSOR CUEXECUTE
        IS
            SELECT --+ index(concproc, IX_CONCPROC02)
                   MAX(TO_DATE(A.COPRPARA, 'MM-YYYY'))
              FROM CONCPROC A
                   /*+ pkBCConcproc.fsbLastProcess */
             WHERE A.COPRPROG LIKE ISBCOPRPROG||'-%'
               AND A.COPRESTA = CSBFINISHED
               AND TO_DATE(A.COPRPARA, 'MM-YYYY') >= TO_DATE(ISBCOPRPARA,'MM-YYYY')
               AND NOT EXISTS
                   (
                       SELECT --+ index(concproc, IX_CONCPROC02)
                              'x'
                         FROM CONCPROC B
                              /*+ pkBCConcproc.fsbLastProcess */
                        WHERE B.COPRPARA = A.COPRPARA
                          AND B.COPRPROG = ISBPROGREVE
                          AND B.COPRFERE > A.COPRFERE
                          AND ( B.COPRESTA = CSBFINISHED OR
                                ( B.COPRESTA = CSBEXECUTE AND
                                  COPRSEID IN ( SELECT AUDSID||','||SID||','||SERIAL#
                                                  FROM SYS.V_$SESSION
                                              )
                                )
                              )
                   );
    BEGIN
        PKERRORS.PUSH ('pkBCConcproc.fsbLastProcess');

        IF CUEXECUTE%ISOPEN THEN
            CLOSE CUEXECUTE;
        END IF;

        OPEN  CUEXECUTE;
        FETCH CUEXECUTE INTO DTRESULTEXECUTE;
        CLOSE CUEXECUTE;

        RETURN ( TO_CHAR(DTRESULTEXECUTE,'MM-YYYY') );
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            IF CUEXECUTE%ISOPEN THEN
                CLOSE CUEXECUTE;
            END IF;
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            IF CUEXECUTE%ISOPEN THEN
                CLOSE CUEXECUTE;
            END IF;
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            IF CUEXECUTE%ISOPEN THEN
                CLOSE CUEXECUTE;
            END IF;
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END FSBLASTPROCESS;
    

    























    FUNCTION FSBPREVIOUSPARAM
    (
        ISBCOPRPROG IN CONCPROC.COPRPROG%TYPE,
        ISBPROGREVE IN CONCPROC.COPRPROG%TYPE,
        ISBCOPRPARA IN CONCPROC.COPRPARA%TYPE
    )
    RETURN CONCPROC.COPRPARA%TYPE
    IS

        
        SBRESULTEXECUTE VARCHAR2(10) := NULL;
        DTRESULTEXECUTE DATE := NULL;

        CURSOR CUEXECUTE
        IS
            SELECT --+ index(concproc, IX_CONCPROC02)
                   MAX( TO_DATE(A.COPRPARA,'MM-YYYY' ) )
              FROM CONCPROC A
                   /*+ pkBCConcproc.fsbPreviousParam */
             WHERE A.COPRPROG LIKE ISBCOPRPROG||'-%'
               AND A.COPRESTA = CSBFINISHED
               AND TO_DATE(COPRPARA, 'MM-YYYY') < TO_DATE(ISBCOPRPARA, 'MM-YYYY')
               AND NOT EXISTS
                   (
                       SELECT --+ index(concproc, IX_CONCPROC02)
                              'x'
                         FROM CONCPROC B
                              /*+ pkBCConcproc.fsbPreviousParam */
                        WHERE B.COPRPARA = A.COPRPARA
                          AND B.COPRPROG = ISBPROGREVE
                          AND B.COPRFERE > A.COPRFERE
                          AND ( B.COPRESTA = CSBFINISHED OR
                                ( B.COPRESTA = CSBEXECUTE AND
                                  COPRSEID IN ( SELECT AUDSID||','||SID||','||SERIAL#
                                                  FROM SYS.V_$SESSION
                                              )
                                )
                              )
                   );
    BEGIN
        PKERRORS.PUSH('pkBCConcproc.fsbPreviousParam');

        IF CUEXECUTE%ISOPEN THEN
            CLOSE CUEXECUTE;
        END IF;

        OPEN  CUEXECUTE;
        FETCH CUEXECUTE INTO DTRESULTEXECUTE;
        CLOSE CUEXECUTE;

        PKERRORS.POP;

        RETURN ( TO_CHAR(DTRESULTEXECUTE,'MM-YYYY') );
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            IF CUEXECUTE%ISOPEN THEN
                CLOSE CUEXECUTE;
            END IF;
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            IF CUEXECUTE%ISOPEN THEN
                CLOSE CUEXECUTE;
            END IF;
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            IF CUEXECUTE%ISOPEN THEN
                CLOSE CUEXECUTE;
            END IF;
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END FSBPREVIOUSPARAM;




    



































    FUNCTION FBLFINISHEDREVERSE
    (
        ISBCOPRPARA     IN  CONCPROC.COPRPARA%TYPE,
        ISBCOPRPROGGEN  IN  CONCPROC.COPRPROG%TYPE,
        ISBCOPRPROGREV  IN  CONCPROC.COPRPROG%TYPE
    )
    RETURN BOOLEAN
    IS
        SBRESULT        VARCHAR2(1);
        SBCOPRPROGGEN   CONCPROC.COPRPROG%TYPE;

        CURSOR CUFINISHREVE
        (
            ISBCOPRPARA     CONCPROC.COPRPARA%TYPE,
            ISBCOPRPROGGEN  CONCPROC.COPRPROG%TYPE,
            ISBCOPRPROGREV  CONCPROC.COPRPROG%TYPE
        )
        IS
            WITH LASTREGIST
            AS
            (
                SELECT  *
                FROM    (
                            SELECT  *  --+ index(concproc, IX_CONCPROC02)
                            FROM    OPEN.CONCPROC
                            WHERE   COPRPARA LIKE ISBCOPRPARA
                                    AND COPRPROG LIKE ISBCOPRPROGGEN
                                    AND COPRESTA = CSBFINISHED
                            ORDER BY COPRFERE DESC
                        )
                WHERE   ROWNUM <= CNUROWLIMIT
            )
            SELECT  'x' /*+ pkBCConcproc.fblFinishedReverse */
            FROM    OPEN.CONCPROC C, LASTREGIST
            WHERE   C.COPRPROG LIKE ISBCOPRPROGREV
                    AND C.COPRFERE >= LASTREGIST.COPRFERE
                    AND C.COPRPARA = LASTREGIST.COPRPARA;

    BEGIN
        PKERRORS.PUSH ('pkBCConcproc.fblFinishedReverse');

        SBCOPRPROGGEN := REPLACE(ISBCOPRPROGGEN,'-','');

        IF CUFINISHREVE%ISOPEN THEN
            CLOSE CUFINISHREVE;
        END IF;

        OPEN CUFINISHREVE(ISBCOPRPARA,SBCOPRPROGGEN,ISBCOPRPROGREV);

        FETCH CUFINISHREVE INTO SBRESULT;

        IF SBRESULT IS NOT NULL THEN
            PKERRORS.POP;
            RETURN ( TRUE );
        END IF;

        CLOSE CUFINISHREVE;

        PKERRORS.POP;
        
        RETURN ( FALSE );
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END FBLFINISHEDREVERSE;
    
    























    FUNCTION FDTMAXDATEPARAMETER
    (
        ISBCOPRPROGG    IN  CONCPROC.COPRPROG%TYPE,
        ISBCOPRPROGR    IN  CONCPROC.COPRPROG%TYPE,
        IDTCOPRPARA     IN  DATE
    )
        RETURN DATE
    IS
        
        
        
        CURSOR CUPARAMETRO
        (
            ISBPROGGEN  VARCHAR2,
            ISBPROGREV  VARCHAR2,
            ISBESTTERM  VARCHAR2,
            ISBESTEJEC  VARCHAR2,
            IDTPARAM    DATE,
            ISBFORMAT   VARCHAR2
        )
        IS
            SELECT  --+ index(concproc, IX_CONCPROC02)
                    MAX(TO_DATE(A.COPRPARA, ISBFORMAT))
            FROM    CONCPROC A
                    /*+ pkBCConcproc.fdtMaxDateParameter */
            WHERE   A.COPRPROG LIKE ISBPROGGEN
            AND     A.COPRESTA = ISBESTTERM
            AND     TO_DATE(A.COPRPARA, ISBFORMAT) < IDTPARAM
            AND     NOT EXISTS
                    (
                        SELECT  --+ index(concproc, IX_CONCPROC02)
                                'x'
                        FROM    CONCPROC B
                                /*+ pkBCConcproc.fdtMaxDateParameter */
                        WHERE   B.COPRPARA = A.COPRPARA
                        AND     B.COPRPROG = ISBPROGREV
                        AND     B.COPRFERE > A.COPRFERE
                        AND     (
                                    B.COPRESTA = ISBESTTERM
                                    OR
                                    (
                                        B.COPRESTA = ISBESTEJEC
                                        AND
                                        COPRSEID IN
                                        (
                                            SELECT  AUDSID||','||SID||','||SERIAL#
                                            FROM    SYS.V_$SESSION
                                        )
                                    )
                                )
                    );
        
        
        
        
        DTPARAMETRO DATE;
                    
    BEGIN
        PKERRORS.PUSH('pkBCConcproc.fdtMaxDateParameter');

        
        IF ( CUPARAMETRO%ISOPEN ) THEN
            CLOSE CUPARAMETRO;
        END IF;

        
        OPEN    CUPARAMETRO
                (
                    ISBCOPRPROGG,
                    ISBCOPRPROGR,
                    PKBCCONCPROC.CSBFINISHED,
                    PKBCCONCPROC.CSBEXECUTE,
                    IDTCOPRPARA,
                    'dd-mm-yyyy'
                );

        
        FETCH   CUPARAMETRO
        INTO    DTPARAMETRO;

        
        CLOSE   CUPARAMETRO;

        PKERRORS.POP;
        
        
        RETURN DTPARAMETRO;
        
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR
            (
                PKERRORS.FSBLASTOBJECT,
                SQLERRM,
                PKBCCONCPROC.SBERRMSG
            );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR
            (
                PKCONSTANTE.NUERROR_LEVEL2,
                PKBCCONCPROC.SBERRMSG
            );
    END FDTMAXDATEPARAMETER;
    
    





















    FUNCTION FBONOTFINISHEDPROCESS
    (
        ISBCOPRPROG IN  CONCPROC.COPRPROG%TYPE,
        ISBCOPRPARA IN  CONCPROC.COPRPARA%TYPE
    )
        RETURN BOOLEAN
    IS
        
        
        
        CURSOR CUPROCESO
        (
            ISBPROGRAMA     VARCHAR2,
            ISBPARAMETRO    VARCHAR2,
            ISBESTADO       VARCHAR2
        )
        IS
            SELECT  --+ index(concproc,IX_CONCPROC02)
                    'X'
            FROM    CONCPROC
                    /*+pkBCConcproc.fboNotFinishedProcess*/
            WHERE   COPRESTA = ISBESTADO
            AND     COPRPARA = ISBPARAMETRO
            AND     COPRPROG LIKE ISBPROGRAMA;

        
        
        
        
        SBRESULTADO VARCHAR2(1);
        
    BEGIN
        PKERRORS.PUSH('pkBCConcproc.fboNotFinishedProcess');

        
        IF ( CUPROCESO%ISOPEN ) THEN
            CLOSE CUPROCESO;
        END IF;

        
        OPEN    CUPROCESO
                (
                    ISBCOPRPROG,
                    ISBCOPRPARA,
                    PKBCCONCPROC.CSBEXECUTE
                );

        
        FETCH   CUPROCESO
        INTO    SBRESULTADO;

        
        CLOSE   CUPROCESO;

        PKERRORS.POP;
        
        
        RETURN (SBRESULTADO IS NOT NULL);
        
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR
            (
                PKERRORS.FSBLASTOBJECT,
                SQLERRM,
                PKBCCONCPROC.SBERRMSG
            );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR
            (
                PKCONSTANTE.NUERROR_LEVEL2,
                PKBCCONCPROC.SBERRMSG
            );
    END FBONOTFINISHEDPROCESS;
    
END PKBCCONCPROC;