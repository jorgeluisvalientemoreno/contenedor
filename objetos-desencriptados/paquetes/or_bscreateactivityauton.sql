PACKAGE BODY OR_BSCreateActivityAuton
IS




















    
    CSBVERSION CONSTANT VARCHAR2(20) := 'SAO206433';

    

   	

    
    FUNCTION FSBVERSION RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    
    PROCEDURE GETPRODUCTADDRESSIDBYPRODUCT
    (
        INUPRODUCTID IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        ONUADDRESSID OUT PR_PRODUCT.ADDRESS_ID%TYPE,
        ONUERRORCODE OUT NUMBER,
        OSBERRORMESS OUT VARCHAR2
    )
	IS
    BEGIN
        PR_BOADDRESS.GETPARSERADDRESSIDBYPRODUCT(INUPRODUCTID,
                                                 ONUADDRESSID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
	END GETPRODUCTADDRESSIDBYPRODUCT;
	
	
    PROCEDURE GETACTIVITIESLOV
    (
        ISBCONCATSYMBOL IN  VARCHAR2,
        ORFRESULT       OUT CONSTANTS.TYREFCURSOR,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORMESS    OUT VARCHAR2
    )
	IS
	BEGIN
        OR_BOCREATEACTIVITYAUTON.GETACTIVITIESLOV(ISBCONCATSYMBOL, ORFRESULT);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
	END GETACTIVITIESLOV;
	
	
    PROCEDURE GETCREATEDORDERS
    (
        INUACTIVITYGROUPID IN  OR_ORDER_ACTIVITY.ACTIVITY_GROUP_ID%TYPE,
        ORFRESULT          OUT CONSTANTS.TYREFCURSOR,
        ONUERRORCODE       OUT NUMBER,
        OSBERRORMESS       OUT VARCHAR2
    )
	IS
	BEGIN
        OR_BOCREATEACTIVITYAUTON.GETCREATEDORDERS(INUACTIVITYGROUPID, ORFRESULT);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESS);
	END GETCREATEDORDERS;
	
    



































    PROCEDURE CREATEPLANNEDACTIVITY
    (
        INUACTIVITYID       IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUACTIVITYGROUPID  IN  OR_ORDER_ACTIVITY.ACTIVITY_GROUP_ID%TYPE,
        INUSEQUENCE         IN  OR_ORDER_ACTIVITY.SEQUENCE_%TYPE,
        ISBCOMMENT          IN  OR_ORDER_ACTIVITY.COMMENT_%TYPE,
        INUADDRESSID        IN  OR_ORDER_ACTIVITY.ADDRESS_ID%TYPE,
        INUOPERSECTORID     IN  OR_ORDER_ACTIVITY.OPERATING_SECTOR_ID%TYPE,
        INUSUBSCRIPTIONID   IN  OR_ORDER_ACTIVITY.SUBSCRIPTION_ID%TYPE,
        INUSUBSCRIBERID     IN  OR_ORDER_ACTIVITY.SUBSCRIBER_ID%TYPE,
        INUPRODUCTID        IN  OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE,
        INUELEMENTID        IN  OR_ORDER_ACTIVITY.ELEMENT_ID%TYPE,
        INUPROCESSID        IN  OR_ORDER_ACTIVITY.PROCESS_ID%TYPE,
        ONUORDERACTIVITYID  OUT OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE,
        ONUERRORCODE        OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
        OSBERRORMESSAGE     OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS
        NUPRODUCTID        OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE := INUPRODUCTID;
        NUSUBSCRIPTIONID   OR_ORDER_ACTIVITY.SUBSCRIPTION_ID%TYPE := INUSUBSCRIPTIONID;
        NUSUBSCRIBERID     OR_ORDER_ACTIVITY.SUBSCRIBER_ID%TYPE := INUSUBSCRIBERID;
    BEGIN
        GE_BOUTILITIES.INITIALIZEOUTPUT(ONUERRORCODE, OSBERRORMESSAGE);

        IF ((NUPRODUCTID IS NOT NULL) AND (NUSUBSCRIPTIONID IS NULL)) THEN
            NUSUBSCRIPTIONID := DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(INUPRODUCTID);
        END IF;
        
        IF ((NUSUBSCRIPTIONID IS NOT NULL) AND (NUSUBSCRIBERID IS NULL)) THEN
            NUSUBSCRIBERID := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUSUBSCRIPTIONID);
        END IF;

        OR_BOPLANNINGACTIVIT.CREATEPLANNEDACTIVITY(INUACTIVITYID,
                                                   INUACTIVITYGROUPID,
                                                   INUSEQUENCE,
                                                   ISBCOMMENT,
                                                   INUADDRESSID,
                                                   INUOPERSECTORID,
                                                   NUSUBSCRIPTIONID,
                                                   NUSUBSCRIBERID,
                                                   NUPRODUCTID,
                                                   INUELEMENTID,
                                                   INUPROCESSID,
                                                   ONUORDERACTIVITYID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
    END CREATEPLANNEDACTIVITY;
    
    
    PROCEDURE ACTIVATEACTGROUPEXEC
    (
        INUACTIVITYGROUPID   IN  OR_ORDER_ACTIVITY.ACTIVITY_GROUP_ID%TYPE,
        ONUERRORCODE        OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
        OSBERRORMESSAGE     OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] OR_BSCreateActivityAuton.activateActGroupExec', 6);
        GE_BOUTILITIES.INITIALIZEOUTPUT(ONUERRORCODE, OSBERRORMESSAGE);
        OR_BOCREATEACTIVITYAUTON.ACTIVATEACTEXEC(INUACTIVITYGROUPID);
        UT_TRACE.TRACE('[FIN] OR_BSCreateActivityAuton.activateActGroupExec', 6);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
    END;

    




















    PROCEDURE CREATEAUTORDER
    (
        ISBORDERINFO        IN  CLOB,
        OSBORDERID          OUT CLOB,
        ONUERRORCODE        OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
        OSBERRORMESSAGE     OUT GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE;  
        NUACTIVITYGROUPID   OR_ORDER_ACTIVITY.ACTIVITY_GROUP_ID%TYPE; 
        TBORDERACTIVITIES   OR_BOPLANNINGACTIVIT.TYTBACTIVITIES; 
        NUSUBCRIBERID       GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE; 
        NUSUBCRIPTIONID     SUSCRIPC.SUSCCODI%TYPE; 
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE; 
        NUADDRESS_ID        AB_ADDRESS.ADDRESS_ID%TYPE; 
        RFRESULT            CONSTANTS.TYREFCURSOR; 
    BEGIN
        OR_BOPLANNINGACTIVIT.PROCESSXML(ISBORDERINFO,TBORDERACTIVITIES,NUSUBCRIBERID,NUSUBCRIPTIONID,NUPRODUCTID,NUADDRESS_ID);
        OR_BSPLANNINGACTIVIT.GETNEXTEXECGRPID(NUACTIVITYGROUPID,ONUERRORCODE,OSBERRORMESSAGE);
        
        GW_BOERRORS.CHECKERROR(ONUERRORCODE, OSBERRORMESSAGE);
        IF (TBORDERACTIVITIES.COUNT != 0) THEN
            FOR I IN TBORDERACTIVITIES.FIRST..TBORDERACTIVITIES.LAST LOOP
                IF (TBORDERACTIVITIES.EXISTS(I)) THEN
                    CREATEPLANNEDACTIVITY
                    (
                        TBORDERACTIVITIES(I).ACTIVITY_ID,
                        NUACTIVITYGROUPID,
                        TBORDERACTIVITIES(I).SEQUENCE_,
                        TBORDERACTIVITIES(I).COMMENT_,
                        NUADDRESS_ID,
                        TBORDERACTIVITIES(I).OPER_SECTOR_ID,
                        NUSUBCRIPTIONID,
                        NUSUBCRIBERID,
                        NUPRODUCTID,
                        NULL,
                        OR_BOCONSTANTS.CNUPROCESS_AUTONOMOUS,
                        NUORDERACTIVITYID,
                        ONUERRORCODE,
                        OSBERRORMESSAGE
                    );
                    
                    GW_BOERRORS.CHECKERROR(ONUERRORCODE, OSBERRORMESSAGE);
                END IF;
            END LOOP;
        END IF;

        ACTIVATEACTGROUPEXEC
        (
            NUACTIVITYGROUPID,
            ONUERRORCODE,
            OSBERRORMESSAGE
        );
        
        GW_BOERRORS.CHECKERROR(ONUERRORCODE, OSBERRORMESSAGE);
        GETCREATEDORDERS
        (
            NUACTIVITYGROUPID,
            RFRESULT,
            ONUERRORCODE,
            OSBERRORMESSAGE
        );
        
        GW_BOERRORS.CHECKERROR(ONUERRORCODE, OSBERRORMESSAGE);
        
        OR_BOPLANNINGACTIVIT.GETRESULTXML(RFRESULT,OSBORDERID);
        
        OSBORDERID := CONCAT(CONCAT(' <ORDERS>',CHR(10)),OSBORDERID);
        OSBORDERID := CONCAT(CONCAT('<?xml version="1.0" encoding="utf-8" ?>',CHR(10)),OSBORDERID);
        OSBORDERID := CONCAT(OSBORDERID,' </ORDERS>');
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEAUTORDER;
	
END OR_BSCREATEACTIVITYAUTON;