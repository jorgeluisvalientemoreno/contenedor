
  CREATE OR REPLACE PACKAGE "OPEN"."PR_BOSUSPENSION" wrapped
a000000
1f
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
222d 65a
ZqLgZ8XbDGcOW1NwnLbdoltFEBIwg82jzNCGGy+5HovqzmODTCmrgdw9XLFNKAQLH2L7LI8R
6x+1taqz+wUEfkuQkSD9DRMH2Aty3UfPmnTWMavuH8P32Kd50cOMJxWUlHqEJ/7iT3QiM5kK
NKfhtmNXe/FHEEuP8u/iA7bxzpYUnXoQ+YGt+IZyii0i8axmsiskHOQ3MMeO7EFaCnIq3vAg
7melekmbKXjal7uZ5Q6vH8OdpGDXNVVHOUWtts4BueawSPWd6DK+UCp7ln0/oR5lbgExJTSB
DOlX9+M9WuZ1Kvf8VPoQ+hMYfdyKRlSEQcKALvY4jLFlIxqrFaioGaN6yXI/RzRkHP/C7rQO
8Y3FJK82i2W3onjx2i8H81HPS3oWq6FnbrPgkbAl5u/JAUGf1pyJeFR29q+9saAEuYjgmAUS
vz0lBhfWzbDM7VCLPuHByBvcVeTOXXLMtqECF23z/OFv89pRsTe/3EfyAICkKJA5FC8L5/1m
Sk55TiMDBeF4wiFyANCijKQXd4dPbD418vQq6x3dsuCQzY/38LFowE4ar/9IF0Kqqpq18Kk9
f+0DsXqeMgUI7j80ivG+LArHAf58hoZqAf+yaxILVG92IaMFpEZkWNAoM7bXNN3r2NVbmv2P
+z3Brz0Sm2XVWvSryfL9CzwFaxXSDdHaitGf9cqK0+q2fvg3X0wygS+nj6JcPuNs0YkqFtHJ
5WiSHnQu2lWU66JIezsRQlQqr92keKjKtCcA/tcE0bbVWSU0GQPLQGI3k7L/4bJwNmk7Wto1
AJWscE1uZWBCRAKjeMVUkeF/m54e2oBZheErY2Zs6HDXsLT2vuDgREdjsqusKB5dz43DQvpp
Ad04Gg8MKVSqpybC86Trt/PYJFBCqvWnpYVy32XRlLsdp5Dq858fLdeUdZUnuF6aOkBu1aAU
lFzdSbFqSqfODEfKPKu+OvzTZeXiiJURXcPPWl0aPFsqBQqhR3BQjFQYVHwrwkf+H/2zzTUA
vTzHuz/ZodOD3v58B5+Z7OvM4BHcpiFVuwTxHN25M7yaAEkj1ipUFPU9dmdSdrRBMsToVQ2P
pm0Od9DaxsP9DELEeaXAkSqWK9NqBdkmaED/dzhjkhLwSqczYmN8vV9PYr91Pn984hXg2pXW
QzI5FfVCVVDOVg0aMvkYWWpp9NAzwQ8R3LakrJr3I7haihR665mOjsUB35CGu91sMiscjYzR
9G736k2SM0SnQ6DzZSZPma/nBiDjLboHqjo0hUOlkPRVD7HAato0OiIStjLrILt71WrtwHu1
04+naVa0qu1bzwphuwe/IwXdHvrCy1WAqr+6qpw2iqxWA/bJP59wVRLxTFULNNnfFj3MX/ga
oV6xx8+UqbV51r+6aMYRmM6n5sA44Kpmm+TMnG/8Jdhsbe3ELBkxH6BW9vW8cz0QNHnjawDN
9UsRU99H/X4JnJDPTL9BULsPZHquBK5t4BwSGWCDe0CJHHENTDQIc4tqvL7pQX7BCZkDDRHD
9Kva6BzvlODSIGUDMuV42kCQdrdXxOCHeSSVjvPn+KT4lCaeE7W4oKwWbnbXeomg3xb/GciD
V2f0kPmuhe6wqqYOU3dI

PACKAGE BODY PR_BOSUSPENSION AS












































































































    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO202549';


    CSBSI CONSTANT VARCHAR2(1) := 'S';
    CSBNO CONSTANT VARCHAR2(1) := 'N';

    
    NUCAUSASINACT       CONSTANT NUMBER := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE('CAUS_ATEN_SIN_ACT_CAMPO');

   
    CSBDIRECTIONALITYIN   GE_SUSPENSION_TYPE.DIRECTIONALITY_ID%TYPE:='IN';
    

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    
    FUNCTION FBLCOMPONENTSUSPENDALLOWED
    (
        INUCOMPONENTID      IN  PR_COMPONENT.COMPONENT_ID%TYPE
    )
	RETURN BOOLEAN
	IS
        NUCOMPONENTTYPEID   PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
        SBSUSPENDALLOWED    PS_COMPONENT_TYPE.SUSPEND_ALLOWED%TYPE;
    BEGIN

        NUCOMPONENTTYPEID := DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID( INUCOMPONENTID );
        SBSUSPENDALLOWED  := DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED(NUCOMPONENTTYPEID);

        IF SBSUSPENDALLOWED = GE_BOCONSTANTS.CSBYES THEN
            RETURN (TRUE);
        ELSE
            RETURN (FALSE);
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLCOMPONENTSUSPENDALLOWED;

    PROCEDURE VALIDSUSPENSIONSTOTAL
        (
        INUCOMPONENTID      IN PR_COMPONENT.COMPONENT_ID%TYPE,
        IDTCOMPAREDATE      IN DATE,
        INUPERIODSUSPENSION IN NUMBER,
        INUPERIODMAXSUSP    IN NUMBER
        )
    IS
        CURFCOMPSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCCOMPSUSPENSION    DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
        NUSUM               NUMBER := NULL;
        NUDIFERENCE         NUMBER := NULL;

        EXSUMSUSPPERIODGREATER  EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo PR_BOSuspension.ValidSuspensionsTotal',4);
        UT_TRACE.TRACE('Componente :['||INUCOMPONENTID||']Per�odo Suspensi�n Solicitado: ['||INUPERIODSUSPENSION||']',5);
        UT_TRACE.TRACE('Fecha Comparaci�n :['||IDTCOMPAREDATE||']Per�odo M�x. Suspensi�n :['||INUPERIODMAXSUSP||']',5);

        
        NUSUM := INUPERIODSUSPENSION;

        
        CURFCOMPSUSPENSION := PR_BCSUSPENSION.FRFCOMPSUSPENSION(INUCOMPONENTID,IDTCOMPAREDATE);
        FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        WHILE CURFCOMPSUSPENSION%FOUND LOOP
            UT_TRACE.TRACE('Fecha Aplicaci�n :['||RCCOMPSUSPENSION.APLICATION_DATE||']Fecha Finalizaci�n :['||RCCOMPSUSPENSION.INACTIVE_DATE||']',6);

            
            IF (RCCOMPSUSPENSION.APLICATION_DATE < IDTCOMPAREDATE) THEN
                NUDIFERENCE := TRUNC(RCCOMPSUSPENSION.INACTIVE_DATE) - IDTCOMPAREDATE;
            ELSE
                NUDIFERENCE := TRUNC(RCCOMPSUSPENSION.INACTIVE_DATE) - TRUNC(RCCOMPSUSPENSION.APLICATION_DATE);
            END IF;

            NUSUM := NUSUM + NUDIFERENCE;
            UT_TRACE.TRACE('Diferencia :['||NUDIFERENCE||']Suma :['||NUSUM||']',6);

            IF (NUSUM > INUPERIODMAXSUSP) THEN
                RAISE EXSUMSUSPPERIODGREATER;
            END IF;
            FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        END LOOP;
        CLOSE CURFCOMPSUSPENSION;

        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.ValidSuspensionsTotal',4);
    EXCEPTION
        WHEN EXSUMSUSPPERIODGREATER THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            ERRORS.SETERROR(PR_BOCONSTERROR.CNUSUMSUSPPERIODGREATER,TO_CHAR(INUCOMPONENTID));
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE GETALLACTIVESUSPENSION
    (
        INUCOMPONENTID      IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        OCURFCOMPSUSPENSION OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OCURFCOMPSUSPENSION := PR_BCSUSPENSION.FRFCOMPSUSPENSION( INUCOMPONENTID );
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFCOMPSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(OCURFCOMPSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FSBVALIDACTIVEPRODSUSP
    (
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPE   IN  PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
	RETURN VARCHAR2
	IS
		RFPRODSUSPENSION  CONSTANTS.TYREFCURSOR;	
		RCSUSPENSION      DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
    BEGIN
		RFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION( INUPRODUCTID );
		LOOP
			FETCH RFPRODSUSPENSION INTO  RCSUSPENSION;
	        EXIT WHEN RFPRODSUSPENSION%NOTFOUND;
	        IF (RCSUSPENSION.SUSPENSION_TYPE_ID = INUSUSPENSIONTYPE ) THEN
			    RETURN(GE_BOCONSTANTS.CSBYES);
	        END IF;
		END LOOP;
		CLOSE RFPRODSUSPENSION;
		RETURN (GE_BOCONSTANTS.CSBNO);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFPRODSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
	        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFPRODSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
    END FSBVALIDACTIVEPRODSUSP;	
						
    FUNCTION FSBVALIDACTIVECOMPSUSP
    (
        INUCOMPONENTID      IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUSUSPENSIONTYPE   IN  PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
   	RETURN VARCHAR2
	IS
		RFCOMPSUSPENSION  CONSTANTS.TYREFCURSOR;	
		RCSUSPENSION      DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
    BEGIN
		RFCOMPSUSPENSION := PR_BCSUSPENSION.FRFCOMPSUSPENSION( INUCOMPONENTID );
		LOOP
			FETCH RFCOMPSUSPENSION INTO  RCSUSPENSION;
	        EXIT WHEN RFCOMPSUSPENSION%NOTFOUND;
	        IF (RCSUSPENSION.SUSPENSION_TYPE_ID = INUSUSPENSIONTYPE ) THEN
			    RETURN(GE_BOCONSTANTS.CSBYES);
	        END IF;
		END LOOP;
		CLOSE RFCOMPSUSPENSION;
		RETURN (GE_BOCONSTANTS.CSBNO);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCOMPSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
	        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCOMPSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
    END FSBVALIDACTIVECOMPSUSP;	
    
    
    FUNCTION  FNUGETQUANTITYCOMPSUSP(
        INUCOMPONENTID      IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUSUSPENSIONTYPE   IN  PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID%TYPE DEFAULT NULL)
    RETURN NUMBER
    IS
        SBYES   VARCHAR2(5) := GE_BOCONSTANTS.CSBYES;
        NUCANTIDAD NUMBER := 0;
        
        CURSOR CUSUSPACTIVA IS
        SELECT COUNT(*)
        FROM PR_COMP_SUSPENSION A
        WHERE A.COMPONENT_ID = INUCOMPONENTID
          AND A.ACTIVE = SBYES;
          
        CURSOR CUSUSPTYPEACTIVA IS
        SELECT COUNT(*)
        FROM PR_COMP_SUSPENSION A
        WHERE A.COMPONENT_ID = INUCOMPONENTID
        AND   A.SUSPENSION_TYPE_ID =  INUSUSPENSIONTYPE
        AND A.ACTIVE = SBYES;
          
    BEGIN
    
        IF (INUSUSPENSIONTYPE IS NULL) THEN
            OPEN CUSUSPACTIVA;
            FETCH CUSUSPACTIVA INTO NUCANTIDAD;
            CLOSE CUSUSPACTIVA;
        ELSE
            OPEN CUSUSPTYPEACTIVA;
            FETCH CUSUSPTYPEACTIVA INTO NUCANTIDAD;
            CLOSE CUSUSPTYPEACTIVA;
        END IF;
        
        RETURN NUCANTIDAD;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETQUANTITYCOMPSUSP;	
    
    FUNCTION  FNUGETQUANPRODSUSPDIFFPAY(
        INUPRODUCTID      IN  PR_PROD_SUSPENSION.PRODUCT_ID%TYPE
    )
    RETURN NUMBER
    IS
        SBYES   VARCHAR2(5) := GE_BOCONSTANTS.CSBYES;
        NUCANTIDAD NUMBER := 0;

        CURSOR CUSUSPACTIVA IS
         SELECT COUNT(*)
            FROM PR_PROD_SUSPENSION A
            WHERE A.PRODUCT_ID = INUPRODUCTID
            AND A.ACTIVE = 'Y'
            AND SUSPENSION_TYPE_ID NOT IN (CNUSUSPTYPBLOCK,CNUSUSPTYPNOTPAY);

    BEGIN

        IF (CUSUSPACTIVA%ISOPEN) THEN
            CLOSE CUSUSPACTIVA;
        END IF;

        OPEN CUSUSPACTIVA;
        FETCH CUSUSPACTIVA INTO NUCANTIDAD;
        CLOSE CUSUSPACTIVA;

        RETURN NUCANTIDAD;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETQUANPRODSUSPDIFFPAY;


    FUNCTION  FNUGETQUANTITYPRODSUSP(
        INUPRODUCTID      IN  PR_PROD_SUSPENSION.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPE   IN  PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE DEFAULT NULL)
    RETURN NUMBER
    IS
        SBYES   VARCHAR2(5) := GE_BOCONSTANTS.CSBYES;
        NUCANTIDAD NUMBER := 0;

        CURSOR CUSUSPACTIVA IS
        SELECT COUNT(*)
        FROM PR_PROD_SUSPENSION A
        WHERE A.PRODUCT_ID = INUPRODUCTID
          AND A.ACTIVE = SBYES;

        CURSOR CUSUSPTYPEACTIVA IS
        SELECT COUNT(*)
        FROM PR_PROD_SUSPENSION A
        WHERE A.PRODUCT_ID = INUPRODUCTID
        AND   A.SUSPENSION_TYPE_ID =  INUSUSPENSIONTYPE
        AND A.ACTIVE = SBYES;

    BEGIN

        IF (INUSUSPENSIONTYPE IS NULL) THEN
            OPEN CUSUSPACTIVA;
            FETCH CUSUSPACTIVA INTO NUCANTIDAD;
            CLOSE CUSUSPACTIVA;
        ELSE
            OPEN CUSUSPTYPEACTIVA;
            FETCH CUSUSPTYPEACTIVA INTO NUCANTIDAD;
            CLOSE CUSUSPTYPEACTIVA;
        END IF;

        RETURN NUCANTIDAD;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETQUANTITYPRODSUSP;
    

    PROCEDURE DEACTIVATEALLSUSPBYPROD
        (
        INUPRODUCTID    IN PR_PRODUCT.PRODUCT_ID%TYPE
        )
    IS
        CURFPRODSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCPRODSUSPENSION    DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo PR_BOSuspension.DeactivateAllSuspByProd. Producto :['||INUPRODUCTID||']',10);

        
        CURFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION(INUPRODUCTID);
        FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        WHILE CURFPRODSUSPENSION%FOUND LOOP

            UT_TRACE.TRACE('Id Registro:['||RCPRODSUSPENSION.PROD_SUSPENSION_ID||']Tipo Suspension:['||RCPRODSUSPENSION.SUSPENSION_TYPE_ID||']',11);
            RCPRODSUSPENSION.INACTIVE_DATE := SYSDATE;
            RCPRODSUSPENSION.ACTIVE := GE_BOCONSTANTS.CSBNO;
            DAPR_PROD_SUSPENSION.UPDRECORD(RCPRODSUSPENSION);

            FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        END LOOP;
        CLOSE CURFPRODSUSPENSION;
        
        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.DeactivateAllSuspByProd',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE DEACTIVATEALLSUSPBYCOMP
        (
        INUCOMPONENTID  IN PR_COMPONENT.COMPONENT_ID%TYPE
        )
    IS
        CURFCOMPSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCCOMPSUSPENSION    DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo PR_BOSuspension.DeactivateAllSuspByComp. Componente :['||INUCOMPONENTID||']',10);

        
        CURFCOMPSUSPENSION := PR_BCSUSPENSION.FRFCOMPSUSPENSION(INUCOMPONENTID);
        FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        WHILE CURFCOMPSUSPENSION%FOUND LOOP

            UT_TRACE.TRACE('Id Registro:['||RCCOMPSUSPENSION.COMP_SUSPENSION_ID||']Tipo Suspension:['||RCCOMPSUSPENSION.SUSPENSION_TYPE_ID||']',11);
            RCCOMPSUSPENSION.INACTIVE_DATE := SYSDATE;
            RCCOMPSUSPENSION.ACTIVE := GE_BOCONSTANTS.CSBNO;
            DAPR_COMP_SUSPENSION.UPDRECORD(RCCOMPSUSPENSION);

            FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        END LOOP;
        CLOSE CURFCOMPSUSPENSION;

        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.DeactivateAllSuspByComp',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

    PROCEDURE PRODUCTSUSPEND
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        INUBILLINGSTATUS    IN NUMBER,
        INUEXTERNALORDERID  IN NUMBER,
        INUSERVICE          IN NUMBER,
        IDTATTENTIONDATE    IN DATE,
        ISBFLAGCOMPLETE      IN VARCHAR2
        )
    IS
        CURFCOMPONENTS      CONSTANTS.TYREFCURSOR;
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        RCPRODSUSPENSION    DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        NUSERVICE           NUMBER;
        RCSUSPCONE          SUSPCONE%ROWTYPE;
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);
        DTSYSDATE           DATE := SYSDATE;

        SBCALLSERVICE   VARCHAR2(2000);
        EXCALLSERVICE   EXCEPTION;
        NUORDERID          OR_ORDER.ORDER_ID%TYPE;
        NUCAUSALCLIENTPAYID OR_ORDER.CAUSAL_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo PR_BOSuspension.SuspendProduct',10);
        UT_TRACE.TRACE('Producto:['||INUPRODUCTID||']Tipo:['||INUSUSPENSIONTYPEID||']Estado:['||INUBILLINGSTATUS||']',11);
        UT_TRACE.TRACE('Orden:['||INUEXTERNALORDERID||']Servicio:['||INUSERVICE||']Fecha:['||IDTATTENTIONDATE||']',11);

        
        DAPR_PRODUCT.GETRECORD(INUPRODUCTID,RCPRODUCT);

        IF INUSERVICE IS NOT NULL THEN
            NUSERVICE := INUSERVICE;
        ELSE
            NUSERVICE := RCPRODUCT.PRODUCT_TYPE_ID;
        END IF;
        
        
        IF ISBFLAGCOMPLETE = CSBNO THEN
            MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
            PKSUSPCONNSERVICE.ATTENINDIVSUSPECONNE  (
                                                    INUEXTERNALORDERID,
                                                    NUSERVICE,
                                                    INUBILLINGSTATUS,
                                                    IDTATTENTIONDATE,
                                                    ISBFLAGCOMPLETE,
                                                    CSBPROCESSNAME,
                                                    NUERRORCODE,
                                                    SBERRORMESSAGE
                                                    );
            IF NVL(NUERRORCODE,GE_BOCONSTANTS.CNUSUCCESS) <> GE_BOCONSTANTS.CNUSUCCESS THEN
                SBCALLSERVICE := 'pkSuspConnService.AttenIndivSuspeConne';
                RAISE EXCALLSERVICE;
            END IF;
            
            RETURN;
        END IF;
        
        
        CURFCOMPONENTS := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID(INUPRODUCTID);
        LOOP
            FETCH CURFCOMPONENTS INTO RCCOMPONENT;
            EXIT WHEN  CURFCOMPONENTS%NOTFOUND;

            
            PR_BOSUSPENSION.COMPONENTSUSPEND(RCCOMPONENT.COMPONENT_ID,INUSUSPENSIONTYPEID);
        END LOOP;
        CLOSE CURFCOMPONENTS;

		
		RCPRODSUSPENSION.PROD_SUSPENSION_ID   := PR_BOSEQUENCE.GETPRODUCTSUSPENSIONID;
		RCPRODSUSPENSION.PRODUCT_ID           := INUPRODUCTID;
		RCPRODSUSPENSION.SUSPENSION_TYPE_ID   := INUSUSPENSIONTYPEID;
		RCPRODSUSPENSION.REGISTER_DATE        := DTSYSDATE;
		RCPRODSUSPENSION.APLICATION_DATE      := DTSYSDATE;
		RCPRODSUSPENSION.ACTIVE               := GE_BOCONSTANTS.CSBYES;
		DAPR_PROD_SUSPENSION.INSRECORD(RCPRODSUSPENSION);

        
        PR_BOREQUEST.CREATEREQUESTPRODUCT   (
                                            MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
                                            DTSYSDATE,
                                            INUPRODUCTID,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            CNUMOTIVE_TYPE_SUSP,
                                            GE_BOCONSTANTS.CNUSUCCESS
                                            );

        
        RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODSUSP;
        DAPR_PRODUCT.UPDRECORD(RCPRODUCT);
        
        
        IF INUSUSPENSIONTYPEID = CNUSUSPTYPLC THEN
            RCSUSPCONE := PKTBLSUSPCONE.FRCGETRECORD(INUEXTERNALORDERID);
            RCSUSPCONE.SUCOFEAT := NVL(IDTATTENTIONDATE, DTSYSDATE);
            
            IF ISBFLAGCOMPLETE = PKCONSTANTE.NO THEN
                RCSUSPCONE.SUCOCACD := NUCAUSASINACT;
            END IF;
            
            PKTBLSUSPCONE.UPRECORD(RCSUSPCONE);
            RETURN ;
        END IF;

        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
        PKSUSPCONNSERVICE.ATTENINDIVSUSPECONNE  (
                                                INUEXTERNALORDERID,
                                                NUSERVICE,
                                                INUBILLINGSTATUS,
                                                IDTATTENTIONDATE,
                                                ISBFLAGCOMPLETE,
                                                CSBPROCESSNAME,
                                                NUERRORCODE,
                                                SBERRORMESSAGE
                                                );
        IF NVL(NUERRORCODE,GE_BOCONSTANTS.CNUSUCCESS) <> GE_BOCONSTANTS.CNUSUCCESS THEN
            SBCALLSERVICE := 'pkSuspConnService.AttenIndivSuspeConne';
            RAISE EXCALLSERVICE;
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.SuspendProduct',10);
    EXCEPTION
        WHEN EXCALLSERVICE THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                SBCALLSERVICE || '|' || TO_CHAR(NUERRORCODE)||' - '||SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PRODUCTSUSPEND;


    




















    PROCEDURE COMPONENTCONNECT
        (
        IRCCOMPONENT        IN DAPR_COMPONENT.STYPR_COMPONENT,
        IDTSYSDATE          IN DATE,
        IOBLEXISTCOMPACTIVE IN OUT BOOLEAN,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE DEFAULT -1
        )
    IS
    
        CURFCOMPSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        RCCOMPSUSPENSION    DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
        SBDIRECTIONALITYID  GE_DIRECTIONALITY.DIRECTIONALITY_ID%TYPE;
        NUCOUNTERSUSPEN     NUMBER := 0;    
    BEGIN
        UT_TRACE.TRACE('Componente:['||IRCCOMPONENT.COMPONENT_ID||']',12);

        RCCOMPONENT := IRCCOMPONENT;

        
        IF FBLCOMPONENTSUSPENDALLOWED( RCCOMPONENT.COMPONENT_ID ) THEN
        
            
            SBDIRECTIONALITYID := PR_BOCNFSUSPENSION.FSBGETDIRECFORCONNECBYPAY(RCCOMPONENT.COMPONENT_ID,CNUSUSPTYPBLOCK,CNUSUSPTYPNOTPAY);
            UT_TRACE.TRACE('Direccionalidad:['||SBDIRECTIONALITYID||']',13);

            
            RCCOMPONENT.DIRECTIONALITY_ID := NVL(SBDIRECTIONALITYID,RCCOMPONENT.DIRECTIONALITY_ID);

        END IF;

        
        CURFCOMPSUSPENSION := PR_BCSUSPENSION.FRFCOMPSUSPENSION(RCCOMPONENT.COMPONENT_ID);
        FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        WHILE CURFCOMPSUSPENSION%FOUND LOOP
            UT_TRACE.TRACE('Tipo Suspensi�n:['||RCCOMPSUSPENSION.SUSPENSION_TYPE_ID||']Id:['||RCCOMPSUSPENSION.COMP_SUSPENSION_ID||']',13);

            NUCOUNTERSUSPEN := NUCOUNTERSUSPEN + 1;

            
            IF INUSUSPENSIONTYPEID = RCCOMPSUSPENSION.SUSPENSION_TYPE_ID
                OR INUSUSPENSIONTYPEID <> CNUSUSPTYPLC
                AND RCCOMPSUSPENSION.SUSPENSION_TYPE_ID IN (CNUSUSPTYPBLOCK, CNUSUSPTYPNOTPAY)
            THEN

                
                RCCOMPSUSPENSION.INACTIVE_DATE := IDTSYSDATE;
                RCCOMPSUSPENSION.ACTIVE := GE_BOCONSTANTS.CSBNO;
                
                DAPR_COMP_SUSPENSION.UPDRECORD(RCCOMPSUSPENSION);

                NUCOUNTERSUSPEN := NUCOUNTERSUSPEN - 1;
            END IF;

            FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        END LOOP;
        CLOSE CURFCOMPSUSPENSION;
        UT_TRACE.TRACE('Contador de Suspensiones Activas:['||NUCOUNTERSUSPEN||']',13);

        
        IF NUCOUNTERSUSPEN = 0 THEN

            RCCOMPONENT.COMPONENT_STATUS_ID := PR_BOPARAMETER.FNUGETCOMPACTI;
            RCCOMPONENT.LAST_UPD_DATE := SYSDATE;

            IOBLEXISTCOMPACTIVE := TRUE;

            
            DACOMPSESU.UPDCMSSESCM(RCCOMPONENT.COMPONENT_ID,PR_BOPARAMETER.FNUGETCOMPACTI);
        END IF;

        
        DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);

        
        PR_BOREQUEST.CREATECOMPONENTREQUEST (
                                            MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP,
                                            IDTSYSDATE,
                                            RCCOMPONENT.COMPONENT_ID,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            CNUMOTIVE_TYPE_CONN,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS
                                            );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE PRODUCTCONNECT
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        INUBILLINGSTATUS    IN NUMBER,
        INUEXTERNALORDERID  IN NUMBER,
        INUSERVICE          IN NUMBER,
        IDTATTENTIONDATE    IN DATE,
        ISBFLAGCOMPLETE     IN VARCHAR2
        )
    IS
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
        CURFCOMPONENTS      CONSTANTS.TYREFCURSOR;
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        RCSUSPCONE          SUSPCONE%ROWTYPE;
        CURFPRODSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCPRODSUSPENSION    DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        DTSYSDATE           DATE := SYSDATE;
        BLEXISTCOMPACTIVE   BOOLEAN := FALSE;
        NUSERVICE           NUMBER;
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);

        SBCALLSERVICE   VARCHAR2(2000);
        EXCALLSERVICE   EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo PR_BOSuspension.ProductConnect',10);
        UT_TRACE.TRACE('Producto:['||INUPRODUCTID||']Tipo:['||INUSUSPENSIONTYPEID||']Estado:['||INUBILLINGSTATUS||']',11);
        UT_TRACE.TRACE('Orden:['||INUEXTERNALORDERID||']Servicio:['||INUSERVICE||']Fecha:['||IDTATTENTIONDATE||']',11);

        
        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(INUPRODUCTID);

        IF INUSERVICE IS NOT NULL THEN
            NUSERVICE := INUSERVICE;
        ELSE
            NUSERVICE := RCPRODUCT.PRODUCT_TYPE_ID;
        END IF;

        
        IF ISBFLAGCOMPLETE = CSBNO THEN
            MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
            PKSUSPCONNSERVICE.ATTENINDIVSUSPECONNE  (
                                                    INUEXTERNALORDERID,
                                                    NUSERVICE,
                                                    INUBILLINGSTATUS,
                                                    IDTATTENTIONDATE,
                                                    ISBFLAGCOMPLETE, 
                                                    CSBPROCESSNAME,
                                                    NUERRORCODE,
                                                    SBERRORMESSAGE
                                                    );
            IF NVL(NUERRORCODE,GE_BOCONSTANTS.CNUSUCCESS) <> GE_BOCONSTANTS.CNUSUCCESS THEN
                SBCALLSERVICE := 'pkSuspConnService.AttenIndivSuspeConne';
                RAISE EXCALLSERVICE;
            END IF;
            
            
            
            PKSUSPCONNSERVICEMGR.UPDISCHARGEDFLAG(INUPRODUCTID );

            
            RETURN;
         END IF;



        
        CURFCOMPONENTS := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID(INUPRODUCTID);
        FETCH CURFCOMPONENTS INTO RCCOMPONENT;

        
        IF (CURFCOMPONENTS%NOTFOUND ) THEN
            
            BLEXISTCOMPACTIVE := TRUE;
        END IF;
        
        WHILE CURFCOMPONENTS%FOUND LOOP
            
            COMPONENTCONNECT(RCCOMPONENT,DTSYSDATE,BLEXISTCOMPACTIVE,INUSUSPENSIONTYPEID);
            FETCH CURFCOMPONENTS INTO RCCOMPONENT;
        END LOOP;
        CLOSE CURFCOMPONENTS;

        
        CURFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION(INUPRODUCTID);
        FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        WHILE CURFPRODSUSPENSION%FOUND LOOP
            UT_TRACE.TRACE('Tipo Suspensi�n:['||RCPRODSUSPENSION.SUSPENSION_TYPE_ID||']Id:['||RCPRODSUSPENSION.PROD_SUSPENSION_ID||']',13);

            
            IF INUSUSPENSIONTYPEID = RCPRODSUSPENSION.SUSPENSION_TYPE_ID
                OR INUSUSPENSIONTYPEID <> CNUSUSPTYPLC
                AND RCPRODSUSPENSION.SUSPENSION_TYPE_ID IN (CNUSUSPTYPBLOCK, CNUSUSPTYPNOTPAY)
            THEN
                
                RCPRODSUSPENSION.INACTIVE_DATE := DTSYSDATE;
                RCPRODSUSPENSION.ACTIVE := GE_BOCONSTANTS.CSBNO;
                DAPR_PROD_SUSPENSION.UPDRECORD(RCPRODSUSPENSION);
            END IF;

            FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        END LOOP;
        CLOSE CURFPRODSUSPENSION;

        
        IF BLEXISTCOMPACTIVE THEN

            
            RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODACTI;
            RCPRODUCT.SUSPEN_ORD_ACT_ID := NULL;
            DAPR_PRODUCT.UPDRECORD(RCPRODUCT);
        END IF;

        
        PR_BOREQUEST.CREATEREQUESTPRODUCT   (
                                            MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
                                            DTSYSDATE,
                                            INUPRODUCTID,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            CNUMOTIVE_TYPE_CONN,
                                            GE_BOCONSTANTS.CNUSUCCESS
                                            );

        
        IF INUSUSPENSIONTYPEID = CNUSUSPTYPLC THEN
            RCSUSPCONE := PKTBLSUSPCONE.FRCGETRECORD(INUEXTERNALORDERID);
            RCSUSPCONE.SUCOFEAT := NVL(IDTATTENTIONDATE, DTSYSDATE);
            
            IF ISBFLAGCOMPLETE = PKCONSTANTE.NO THEN
                RCSUSPCONE.SUCOCACD := NUCAUSASINACT;
            END IF;
            
            PKTBLSUSPCONE.UPRECORD(RCSUSPCONE);
            RETURN ;
        END IF;

        
        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
        PKSUSPCONNSERVICE.ATTENINDIVSUSPECONNE  (
                                                INUEXTERNALORDERID,
                                                NUSERVICE,
                                                INUBILLINGSTATUS,
                                                IDTATTENTIONDATE,
                                                ISBFLAGCOMPLETE, 
                                                CSBPROCESSNAME,
                                                NUERRORCODE,
                                                SBERRORMESSAGE
                                                );
        IF NVL(NUERRORCODE,GE_BOCONSTANTS.CNUSUCCESS) <> GE_BOCONSTANTS.CNUSUCCESS THEN
            SBCALLSERVICE := 'pkSuspConnService.AttenIndivSuspeConne';
            RAISE EXCALLSERVICE;
        END IF;
            
            
            PKSUSPCONNSERVICEMGR.UPDISCHARGEDFLAG( INUPRODUCTID );

        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.ProductConnect',10);
    EXCEPTION
        WHEN EXCALLSERVICE THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                SBCALLSERVICE || '|' || TO_CHAR(NUERRORCODE)||' - '||SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
     PROCEDURE COMPONENTCONNECTBYSUSPTYPE
    (
        IRCCOMPONENT        IN DAPR_COMPONENT.STYPR_COMPONENT,
        INUSUSPETYPEID      IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTSYSDATE          IN DATE,
        IOBLEXISTCOMPACTIVE IN OUT BOOLEAN
    )
    IS

        CURFCOMPSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        RCCOMPSUSPENSION    DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
        SBDIRECTIONALITYID  GE_DIRECTIONALITY.DIRECTIONALITY_ID%TYPE;
        NUCOUNTERSUSPEN     NUMBER := 0;    
    BEGIN
        UT_TRACE.TRACE('Componente:['||IRCCOMPONENT.COMPONENT_ID||']',12);

        RCCOMPONENT := IRCCOMPONENT;

        
        SBDIRECTIONALITYID := PR_BOCNFSUSPENSION.FSBGETDIRECBYSUSPTYPE(RCCOMPONENT.COMPONENT_ID,INUSUSPETYPEID);
        UT_TRACE.TRACE('Direccionalidad:['||SBDIRECTIONALITYID||']',13);

        
        RCCOMPONENT.DIRECTIONALITY_ID := NVL(SBDIRECTIONALITYID,RCCOMPONENT.DIRECTIONALITY_ID);

        
        CURFCOMPSUSPENSION := PR_BCSUSPENSION.FRFCOMPSUSPENSION(RCCOMPONENT.COMPONENT_ID);
        FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        WHILE CURFCOMPSUSPENSION%FOUND LOOP
            UT_TRACE.TRACE('Tipo Suspensi�n:['||RCCOMPSUSPENSION.SUSPENSION_TYPE_ID||']Id:['||RCCOMPSUSPENSION.COMP_SUSPENSION_ID||']',13);

            NUCOUNTERSUSPEN := NUCOUNTERSUSPEN + 1;

            
            IF  RCCOMPSUSPENSION.SUSPENSION_TYPE_ID = INUSUSPETYPEID THEN
                
                RCCOMPSUSPENSION.INACTIVE_DATE := IDTSYSDATE;
                RCCOMPSUSPENSION.ACTIVE := GE_BOCONSTANTS.CSBNO;
                DAPR_COMP_SUSPENSION.UPDRECORD(RCCOMPSUSPENSION);
                NUCOUNTERSUSPEN := NUCOUNTERSUSPEN - 1;
            END IF;

            FETCH CURFCOMPSUSPENSION INTO RCCOMPSUSPENSION;
        END LOOP;

        CLOSE CURFCOMPSUSPENSION;

        UT_TRACE.TRACE('Contador de Suspensiones Activas:['||NUCOUNTERSUSPEN||']',13);

        
        IF NUCOUNTERSUSPEN = 0 THEN

            RCCOMPONENT.COMPONENT_STATUS_ID := PR_BOPARAMETER.FNUGETCOMPACTI;
            RCCOMPONENT.LAST_UPD_DATE := SYSDATE;

            IOBLEXISTCOMPACTIVE := TRUE;

            
            DACOMPSESU.UPDCMSSESCM(RCCOMPONENT.COMPONENT_ID,PR_BOPARAMETER.FNUGETCOMPACTI);
        END IF;

        
        DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);

        
        PR_BOREQUEST.CREATECOMPONENTREQUEST (
                                            MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP,
                                            IDTSYSDATE,
                                            RCCOMPONENT.COMPONENT_ID,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            CNUMOTIVE_TYPE_CONN,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS
                                            );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE PRODUCTCONNECTBYSUSPETYPE
    (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE
    )
    IS
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
        CURFCOMPONENTS      CONSTANTS.TYREFCURSOR;
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        CURFPRODSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCPRODSUSPENSION    DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        DTSYSDATE           DATE := SYSDATE;
        BLEXISTCOMPACTIVE   BOOLEAN := FALSE;
        NUSERVICE           NUMBER;
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);

        SBCALLSERVICE   VARCHAR2(2000);
        EXCALLSERVICE   EXCEPTION;
    BEGIN

        UT_TRACE.TRACE('PR_BOSuspension.ProductConnectBySuspeType INCIO',5);

        
        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(INUPRODUCTID);

        
        CURFCOMPONENTS := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID(INUPRODUCTID);
        FETCH CURFCOMPONENTS INTO RCCOMPONENT;
        WHILE CURFCOMPONENTS%FOUND LOOP

            
            COMPONENTCONNECTBYSUSPTYPE(RCCOMPONENT, INUSUSPENSIONTYPEID, DTSYSDATE,BLEXISTCOMPACTIVE);
            FETCH CURFCOMPONENTS INTO RCCOMPONENT;
        END LOOP;
        CLOSE CURFCOMPONENTS;

        
        CURFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION(INUPRODUCTID);
        FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        WHILE CURFPRODSUSPENSION%FOUND LOOP
            UT_TRACE.TRACE('PR_BOSuspension.ProductConnectBySuspeType Tipo Suspensi�n:['||RCPRODSUSPENSION.SUSPENSION_TYPE_ID||']Id:['||RCPRODSUSPENSION.PROD_SUSPENSION_ID||']',5);

            
            IF  RCPRODSUSPENSION.SUSPENSION_TYPE_ID = INUSUSPENSIONTYPEID THEN
                UT_TRACE.TRACE('PR_BOSuspension.ProductConnectBySuspeType Actualiza los datos de PR_Prod_Suspension ',5);
                
                RCPRODSUSPENSION.INACTIVE_DATE := DTSYSDATE;
                RCPRODSUSPENSION.ACTIVE := GE_BOCONSTANTS.CSBNO;
                DAPR_PROD_SUSPENSION.UPDRECORD(RCPRODSUSPENSION);

            END IF;

            FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        END LOOP;
        CLOSE CURFPRODSUSPENSION;

        
        IF BLEXISTCOMPACTIVE THEN
            UT_TRACE.TRACE('PR_BOSuspension.ProductConnectBySuspeType Actualiza los datos del producto ',5);
            
            RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODACTI;
            RCPRODUCT.SUSPEN_ORD_ACT_ID := NULL;
            DAPR_PRODUCT.UPDRECORD(RCPRODUCT);
        END IF;

        UT_TRACE.TRACE('PR_BOSuspension.ProductConnectBySuspeType Se inserta registro Pr_Product_Request',5);
        
        PR_BOREQUEST.CREATEREQUESTPRODUCT   (
                                            MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
                                            DTSYSDATE,
                                            INUPRODUCTID,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            CNUMOTIVE_TYPE_CONN,
                                            GE_BOCONSTANTS.CNUSUCCESS
                                            );

        UT_TRACE.TRACE('PR_BOSuspension.ProductConnectBySuspeType FIN', 5);
    EXCEPTION
        WHEN EXCALLSERVICE THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                SBCALLSERVICE || '|' || TO_CHAR(NUERRORCODE)||' - '||SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE COMPONENTSUSPEND
        (
        INUCOMPONENTID      IN PR_COMPONENT.COMPONENT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTREGISTERDATE     IN PR_COMP_SUSPENSION.REGISTER_DATE%TYPE DEFAULT NULL,
        IDTAPPLICATIONDATE  IN PR_COMP_SUSPENSION.APLICATION_DATE%TYPE DEFAULT NULL,
        INUMOCOMPONENTID    IN MO_COMPONENT.COMPONENT_ID%TYPE DEFAULT NULL
        )
    IS
        RCPRCOMPSUSPENSION      DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
        SBCUSTCAREREQUESNUM     MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE ;
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        DTSYSDATE               DATE := UT_DATE.FDTSYSDATE;
        NUDIRECTIONALITY        PR_COMPONENT.DIRECTIONALITY_ID%TYPE;
        RCCOMPONENT             DAPR_COMPONENT.STYPR_COMPONENT;
        SBNEWDIREC              PR_COMPONENT.DIRECTIONALITY_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOSuspension.ComponentSuspend:'||INUCOMPONENTID,12);
        DAPR_COMPONENT.GETRECORD(INUCOMPONENTID,RCCOMPONENT);

        
        IF(RCCOMPONENT.COMPONENT_STATUS_ID =PR_BOPARAMETER.FNUGETCOMPRETI
                OR  RCCOMPONENT.COMPONENT_STATUS_ID = PR_BOCREATIONCOMPONENT.CNUCOMPSTATINSTALLATIONPEND  
                OR  RCCOMPONENT.COMPONENT_STATUS_ID = PR_BOPRODUCT.CNUCOMPSTAUNINSTRET 
        ) THEN
            RETURN;
        END IF;
        
        
        RCPRCOMPSUSPENSION := PR_BCSUSPENSION.FRCGETCOMPSUSP(INUCOMPONENTID,INUSUSPENSIONTYPEID);
        IF (RCPRCOMPSUSPENSION.COMP_SUSPENSION_ID IS NULL) THEN
            
            RCPRCOMPSUSPENSION.COMP_SUSPENSION_ID:= PR_BOSEQUENCE.GETCOMPONENTSUSPENSIONID;
            RCPRCOMPSUSPENSION.COMPONENT_ID:=INUCOMPONENTID;
            RCPRCOMPSUSPENSION.SUSPENSION_TYPE_ID:= INUSUSPENSIONTYPEID;
            RCPRCOMPSUSPENSION.REGISTER_DATE:=NVL(IDTREGISTERDATE,DTSYSDATE);
            RCPRCOMPSUSPENSION.APLICATION_DATE:=NVL(IDTAPPLICATIONDATE,DTSYSDATE);
            RCPRCOMPSUSPENSION.ACTIVE:= GE_BOCONSTANTS.GETYES;

            
            DAPR_COMP_SUSPENSION.INSRECORD(RCPRCOMPSUSPENSION);
        END IF;

        
        IF(INUMOCOMPONENTID IS NOT NULL) THEN

            NUMOTIVEID:=  DAMO_COMPONENT.FNUGETMOTIVE_ID(INUMOCOMPONENTID);
            NUPACKAGEID:= DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVEID);
            SBCUSTCAREREQUESNUM:= DAMO_PACKAGES.FSBGETCUST_CARE_REQUES_NUM(NUPACKAGEID);

        END IF;

        PR_BOREQUEST.CREATECOMPONENTREQUEST(MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP,
                                            DTSYSDATE,
                                            INUCOMPONENTID,
                                            NVL(NUPACKAGEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(NUMOTIVEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            CNUMOTIVE_TYPE_SUSP,
                                            NVL(INUMOCOMPONENTID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(SBCUSTCAREREQUESNUM,GE_BOCONSTANTS.CNUSUCCESS)
                                            );
        
        IF FBLCOMPONENTSUSPENDALLOWED( INUCOMPONENTID ) THEN
            
            SBNEWDIREC:=PR_BOCOMPONENT.ANALYZEDIRECTIONALITYSUSPEND(INUCOMPONENTID ,INUSUSPENSIONTYPEID);
            
            IF(SBNEWDIREC IS NOT NULL) THEN
                RCCOMPONENT.DIRECTIONALITY_ID:=SBNEWDIREC;
            END IF;
        END IF;
        
        IF(RCCOMPONENT.COMPONENT_STATUS_ID=PR_BOPARAMETER.FNUGETCOMPACTI) THEN
             RCCOMPONENT.COMPONENT_STATUS_ID:=PR_BOPARAMETER.FNUGETCOMPSUSP;
        END IF;

        
        RCCOMPONENT.LAST_UPD_DATE := DTSYSDATE;
        DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);

        
        IF(DAGE_SUSPENSION_TYPE.FSBGETDIRECTIONALITY_ID(INUSUSPENSIONTYPEID) <> CSBDIRECTIONALITYIN) THEN
             DACOMPSESU.UPDCMSSESCM(INUCOMPONENTID,PR_BOPARAMETER.FNUGETCOMPSUSP);
        END IF;

        UT_TRACE.TRACE('Termina PR_BOSuspension.ComponentSuspend',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




















    PROCEDURE  SUSPCOMPNOSUSPBYPROD
	   (
		INUPRODUCTID      IN PR_PRODUCT.PRODUCT_ID%TYPE,
		INUSUSPTYPEID     IN PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID%TYPE,
        IDTREGISTERDATE   IN PR_COMP_SUSPENSION.REGISTER_DATE%TYPE,
        IDTAPLICATIONDATE IN PR_COMP_SUSPENSION.APLICATION_DATE%TYPE
	   )
    IS
		RFCURSOR     CONSTANTS.TYREFCURSOR;
		RCCOMPONENT  DAPR_COMPONENT.STYPR_COMPONENT;
		SBCOMPOSUSP  PS_COMPONENT_TYPE.SUSPEND_ALLOWED%TYPE;
		RCSUSPENSION DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
        SBNEWDIREC   PR_COMPONENT.DIRECTIONALITY_ID%TYPE;
    BEGIN
		UT_TRACE.TRACE('Inicio PR_BOSuspension.SuspCompNoSuspbyProd',12);

		
		RFCURSOR := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID(INUPRODUCTID,FALSE);
        LOOP
            FETCH RFCURSOR INTO RCCOMPONENT;
       		EXIT WHEN RFCURSOR%NOTFOUND;
       		
       		SBCOMPOSUSP := DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED (RCCOMPONENT.COMPONENT_TYPE_ID);
			
            IF (SBCOMPOSUSP = GE_BOCONSTANTS.CSBNO) THEN
            
                
                RCSUSPENSION := PR_BCSUSPENSION.FRCGETCOMPSUSP(RCCOMPONENT.COMPONENT_ID,INUSUSPTYPEID);
            
                
                IF (RCSUSPENSION.COMP_SUSPENSION_ID IS NULL) THEN
    				
                    RCSUSPENSION.COMP_SUSPENSION_ID := PR_BOSEQUENCE.GETCOMPONENTSUSPENSIONID;
                    RCSUSPENSION.COMPONENT_ID       := RCCOMPONENT.COMPONENT_ID;
                    RCSUSPENSION.SUSPENSION_TYPE_ID := INUSUSPTYPEID;
                    RCSUSPENSION.REGISTER_DATE      := IDTREGISTERDATE;
                    RCSUSPENSION.APLICATION_DATE    := IDTAPLICATIONDATE;
                    RCSUSPENSION.ACTIVE             := GE_BOCONSTANTS.CSBYES;
                    
                    
                    DAPR_COMP_SUSPENSION.INSRECORD(RCSUSPENSION);
                    DBMS_OUTPUT.PUT_LINE('Despues de insertar registro pr_comp_suspension '||
                                         RCSUSPENSION.COMP_SUSPENSION_ID||'-'||RCCOMPONENT.COMPONENT_ID);
                END IF;

                
                RCCOMPONENT.COMPONENT_STATUS_ID:= PR_BOPARAMETER.FNUGETCOMPSUSP;
                RCCOMPONENT.LAST_UPD_DATE:=UT_DATE.FDTSYSDATE;
                DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);
                
                IF(DAGE_SUSPENSION_TYPE.FSBGETDIRECTIONALITY_ID(INUSUSPTYPEID) <> CSBDIRECTIONALITYIN) THEN
                    DACOMPSESU.UPDCMSSESCM(RCCOMPONENT.COMPONENT_ID,PR_BOPARAMETER.FNUGETCOMPSUSP);
                END IF;

       		END IF;
		END LOOP;
		
		CLOSE RFCURSOR;
		
		UT_TRACE.TRACE('Saliendo de PR_BOSuspension.SuspCompNoSuspbyProd',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END  SUSPCOMPNOSUSPBYPROD;
	
    PROCEDURE SUSPENDVOLPRODUCT
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTREGISTERDATE     IN PR_PROD_SUSPENSION.REGISTER_DATE%TYPE,
        IDTAPPLICATIONDATE  IN PR_PROD_SUSPENSION.APLICATION_DATE%TYPE,
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE
        )
    IS
        RCPRPRODSUSPENSION      DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        SBCUSTCAREREQUESNUM     MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE;
        DTSYSDATE               DATE:= UT_DATE.FDTSYSDATE;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        RCPRODUCT               DAPR_PRODUCT.STYPR_PRODUCT;
        DTMEDIATIONDATE         DATE;
        NUERROR                 MENSAJE.MENSCODI%TYPE;
        SBERROR                 MENSAJE.MENSDESC%TYPE;
        NUSUSPSTATUS            PS_PRODUCT_STATUS.PRODUCT_STATUS_ID%TYPE;
        
    BEGIN
    
        UT_TRACE.TRACE('Inicia PR_BOSuspension.SuspendVolProduct',12);
        
        DAPR_PRODUCT.GETRECORD(INUPRODUCTID,RCPRODUCT);
        
        
        IF(RCPRODUCT.PRODUCT_STATUS_ID =PR_BOPARAMETER.FNUGETPRODRETI) THEN
            RETURN;
        END IF;
        
        
        RCPRPRODSUSPENSION := PR_BCSUSPENSION.FRCGETPRODSUSP(INUPRODUCTID,INUSUSPENSIONTYPEID);
        IF (RCPRPRODSUSPENSION.PROD_SUSPENSION_ID IS NULL) THEN
            
            RCPRPRODSUSPENSION.PROD_SUSPENSION_ID:= PR_BOSEQUENCE.GETPRODUCTSUSPENSIONID;
            RCPRPRODSUSPENSION.PRODUCT_ID:=INUPRODUCTID;
            RCPRPRODSUSPENSION.SUSPENSION_TYPE_ID:=INUSUSPENSIONTYPEID;
            RCPRPRODSUSPENSION.REGISTER_DATE:=IDTREGISTERDATE;
            RCPRPRODSUSPENSION.APLICATION_DATE:=IDTAPPLICATIONDATE;
            RCPRPRODSUSPENSION.ACTIVE:= GE_BOCONSTANTS.GETYES;

            
            DAPR_PROD_SUSPENSION.INSRECORD(RCPRPRODSUSPENSION);
        END IF;

        
        IF(INUMOTIVEID IS NOT NULL) THEN
        
            NUPACKAGEID:= DAMO_MOTIVE.FNUGETPACKAGE_ID(INUMOTIVEID);
            SBCUSTCAREREQUESNUM:= DAMO_PACKAGES.FSBGETCUST_CARE_REQUES_NUM(NUPACKAGEID);

        END IF;

        PR_BOREQUEST.CREATEREQUESTPRODUCT(  MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
                                            DTSYSDATE,
                                            INUPRODUCTID,
                                            NVL(NUPACKAGEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(INUMOTIVEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            CNUMOTIVE_TYPE_SUSP,
                                            NVL(SBCUSTCAREREQUESNUM,GE_BOCONSTANTS.CNUSUCCESS)
                                            );
                                            
        
        SUSPCOMPNOSUSPBYPROD(INUPRODUCTID,INUSUSPENSIONTYPEID,IDTREGISTERDATE,IDTAPPLICATIONDATE);
        
        
        IF(RCPRODUCT.PRODUCT_STATUS_ID= PR_BOPARAMETER.FNUGETPRODACTI) THEN
            RCPRODUCT.PRODUCT_STATUS_ID:= PR_BOPARAMETER.FNUGETPRODSUSP;
        END IF;
        
        
        
        
        NUSUSPSTATUS:=DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(INUPRODUCTID);

        
        
        IF(DAGE_SUSPENSION_TYPE.FSBGETDIRECTIONALITY_ID(INUSUSPENSIONTYPEID) <> CSBDIRECTIONALITYIN) AND
          (NUSUSPSTATUS <> PR_BOPARAMETER.FNUGETPRODSUSP )  THEN
            
            MO_BOMOTIVE.GETDEACTIVATEDDATE(INUPRODUCTID, DTMEDIATIONDATE);
            DTMEDIATIONDATE:= NVL(DTMEDIATIONDATE,UT_DATE.FDTSYSDATE);
            IF( NUERROR <> GE_BOCONSTANTS.OK AND NUERROR IS NOT NULL) THEN
                ERRORS.SETMESSAGE(SBERROR);
                RAISE  EX.CONTROLLED_ERROR;
            END IF;
        END IF;
        
        DAPR_PRODUCT.UPDRECORD(RCPRODUCT);
        
        UT_TRACE.TRACE('Termina PR_BOSuspension.SuspendVolProduct',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE RECONVOLCOMPONENT
        (
        INUCOMPONENTID      IN PR_COMPONENT.COMPONENT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTENDINGDATE       IN PR_COMP_SUSPENSION.INACTIVE_DATE%TYPE ,
        INUMOCOMPONENTID    IN MO_COMPONENT.COMPONENT_ID%TYPE,
        OSBRECONECTBSS      OUT VARCHAR2
        )
    IS
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        SBCUSTCAREREQUESNUM MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE;
        DTSYSDATE           DATE := UT_DATE.FDTSYSDATE;
        SBNEWDIREC          PR_COMPONENT.DIRECTIONALITY_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia PR_BOSuspension.ReconVolComponent',12);
        
        
        OSBRECONECTBSS:= GE_BOCONSTANTS.GETNO;
        
        DAPR_COMPONENT.GETRECORD(INUCOMPONENTID,RCCOMPONENT );
        
        
        IF(RCCOMPONENT.COMPONENT_STATUS_ID =PR_BOPARAMETER.FNUGETCOMPRETI) THEN
            RETURN;
        END IF;
        
        
        PR_BOCOMPONENT.RECONNECT(INUCOMPONENTID,IDTENDINGDATE,INUSUSPENSIONTYPEID);
		
        
        IF(INUMOCOMPONENTID IS NOT NULL) THEN

            NUMOTIVEID:=  DAMO_COMPONENT.FNUGETMOTIVE_ID(INUMOCOMPONENTID);
            NUPACKAGEID:= DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVEID);
            SBCUSTCAREREQUESNUM:= DAMO_PACKAGES.FSBGETCUST_CARE_REQUES_NUM(NUPACKAGEID);

        END IF;

        PR_BOREQUEST.CREATECOMPONENTREQUEST(MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP,
                                            DTSYSDATE,
                                            INUCOMPONENTID,
                                            NVL(NUPACKAGEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(NUMOTIVEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            CNUMOTIVE_TYPE_SUSP,
                                            NVL(INUMOCOMPONENTID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(SBCUSTCAREREQUESNUM,GE_BOCONSTANTS.CNUSUCCESS)
                                            );

        
        IF (PR_BOSUSPENSION.FNUGETQUANTITYCOMPSUSP(INUCOMPONENTID) = 0 ) THEN
            
            RCCOMPONENT.COMPONENT_STATUS_ID:=PR_BOPARAMETER.FNUGETCOMPACTI;
        END IF;
        
        SBNEWDIREC := PR_BOCOMPONENT.ANALYZEDIRECTIONALITYRECONNECT(INUCOMPONENTID,INUSUSPENSIONTYPEID);
        
        IF SBNEWDIREC IS NOT NULL THEN
			RCCOMPONENT.DIRECTIONALITY_ID:=SBNEWDIREC;
			
            
            IF(SBNEWDIREC <> CSBDIRECTIONALITYIN) THEN
                
                DACOMPSESU.UPDCMSSESCM(INUCOMPONENTID,PR_BOPARAMETER.FNUGETCOMPACTI);
                
                OSBRECONECTBSS:= GE_BOCONSTANTS.GETYES;
            END IF;
   		END IF;

        
        RCCOMPONENT.LAST_UPD_DATE:=UT_DATE.FDTSYSDATE;
        
        DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);

        
        UT_TRACE.TRACE('Finaliza PR_BOSuspension.ReconVolComponent',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    


















    
    PROCEDURE  RECONCOMPNOSUSPBYPR
	   (
		INUPRODUCTID      IN PR_PRODUCT.PRODUCT_ID%TYPE,
		INUSUSPTYPEID     IN PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID%TYPE,
        IDTENDINGDATE     IN PR_COMP_SUSPENSION.INACTIVE_DATE%TYPE,
        ISBRECONECTBSS    IN VARCHAR2
	   )
    IS
		RFCURSOR     CONSTANTS.TYREFCURSOR;
		RCCOMPONENT  DAPR_COMPONENT.STYPR_COMPONENT;
		SBCOMPOSUSP  PS_COMPONENT_TYPE.SUSPEND_ALLOWED%TYPE;
		RCSUSPENSION DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;

    BEGIN
		UT_TRACE.TRACE('Inicio PR_BOSuspension.ReconCompNoSuspbyPr',3);

		
		RFCURSOR := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID(INUPRODUCTID,FALSE);
        LOOP
            FETCH RFCURSOR INTO RCCOMPONENT;
       		EXIT WHEN RFCURSOR%NOTFOUND;
       		
       		SBCOMPOSUSP := DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED (RCCOMPONENT.COMPONENT_TYPE_ID);
			
            IF (SBCOMPOSUSP = GE_BOCONSTANTS.CSBNO AND RCCOMPONENT.COMPONENT_STATUS_ID = PR_BOPARAMETER.FNUGETCOMPSUSP) THEN

                PR_BOCOMPONENT.RECONNECT(RCCOMPONENT.COMPONENT_ID,IDTENDINGDATE,INUSUSPTYPEID);
                
                RCCOMPONENT.LAST_UPD_DATE:=UT_DATE.FDTSYSDATE;
                
                IF (PR_BOSUSPENSION.FNUGETQUANTITYCOMPSUSP(RCCOMPONENT.COMPONENT_ID) = 0) THEN
                    
                    RCCOMPONENT.COMPONENT_STATUS_ID:=PR_BOPARAMETER.FNUGETCOMPACTI;
                END IF;
                
                
                IF(ISBRECONECTBSS = GE_BOCONSTANTS.GETYES) THEN
                    
                    DACOMPSESU.UPDCMSSESCM(RCCOMPONENT.COMPONENT_ID,PR_BOPARAMETER.FNUGETCOMPACTI);
                END IF;
                    

                
                DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);
       		END IF;
		END LOOP;

		CLOSE RFCURSOR;

		UT_TRACE.TRACE('Finaliza PR_BOSuspension.ReconCompNoSuspbyPr',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END  RECONCOMPNOSUSPBYPR;
    
    PROCEDURE RECONVOLPRODUCT
    (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTENDINGDATE       IN PR_COMP_SUSPENSION.INACTIVE_DATE%TYPE ,
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        ISBRECONECTBSS      IN VARCHAR2
    )
    IS
        RCPRODSUSPENSION        DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        RCPRODUCT               DAPR_PRODUCT.STYPR_PRODUCT;
        DTSYSDATE               DATE := UT_DATE.FDTSYSDATE;

        RCMOTIVE                DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGE               DAMO_PACKAGES.STYMO_PACKAGES;

        NUERRORCODE             GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBERRORMESSAGE          GE_ERROR_LOG.DESCRIPTION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Finaliza PR_BOSuspension.ReconVolProduct',12);
        
        DAPR_PRODUCT.GETRECORD(INUPRODUCTID,RCPRODUCT);
        
        
        IF  (RCPRODUCT.PRODUCT_STATUS_ID =PR_BOPARAMETER.FNUGETPRODRETI) THEN
            RETURN;
        END IF;
        
        
        RCPRODSUSPENSION := PR_BCSUSPENSION.FRCGETPRODSUSP(RCPRODUCT.PRODUCT_ID,INUSUSPENSIONTYPEID);
        
        IF  (RCPRODSUSPENSION.PROD_SUSPENSION_ID IS NOT NULL) THEN
          
           RCPRODSUSPENSION.INACTIVE_DATE:=IDTENDINGDATE;
           RCPRODSUSPENSION.ACTIVE:= GE_BOCONSTANTS.GETNO;
           DAPR_PROD_SUSPENSION.UPDRECORD(RCPRODSUSPENSION);
        END IF;

        IF  (INUMOTIVEID IS NOT NULL) THEN
            RCMOTIVE    := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);
            RCPACKAGE   := DAMO_PACKAGES.FRCGETRECORD(RCMOTIVE.PACKAGE_ID);
        END IF;

        
        PR_BOREQUEST.CREATEREQUESTPRODUCT
        (
            MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
            DTSYSDATE,
            RCPRODUCT.PRODUCT_ID,
            NVL(RCMOTIVE.PACKAGE_ID,GE_BOCONSTANTS.CNUSUCCESS),
            NVL(RCMOTIVE.MOTIVE_ID,GE_BOCONSTANTS.CNUSUCCESS),
            CNUMOTIVE_TYPE_SUSP,
            NVL(RCPACKAGE.CUST_CARE_REQUES_NUM, GE_BOCONSTANTS.CNUSUCCESS)
        );
                                            
        
        RECONCOMPNOSUSPBYPR(RCPRODUCT.PRODUCT_ID,INUSUSPENSIONTYPEID,IDTENDINGDATE,ISBRECONECTBSS);

        
        
        IF  (PR_BOSUSPENSION.FNUGETQUANTITYPRODSUSP(RCPRODUCT.PRODUCT_ID) = 0) THEN
            RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODACTI;
            RCPRODUCT.SUSPEN_ORD_ACT_ID := NULL;
            DAPR_PRODUCT.UPDRECORD(RCPRODUCT);
            
            GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(PKTBLSUSCRIPC.FNUGETCUSTOMER(RCPRODUCT.SUBSCRIPTION_ID, PKCONSTANTE.NOCACHE));
        END IF;
        
        UT_TRACE.TRACE('Finaliza PR_BOSuspension.ReconVolProduct',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RECONVOLPRODUCT;

    PROCEDURE PRODUCTSUSPENDPBXANALOGO
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        INUBILLINGSTATUS    IN NUMBER,
        INUEXTERNALORDERID  IN NUMBER,
        INUSERVICE          IN NUMBER,
        IDTATTENTIONDATE    IN DATE,
        ISBFLAGCOMPLETE     IN VARCHAR2
        )
    IS
        CURFCOMPONENTS      CONSTANTS.TYREFCURSOR;
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        RCPRODSUSPENSION    DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        NUSERVICE           NUMBER;
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);
        DTSYSDATE           DATE := SYSDATE;

        SBCALLSERVICE   VARCHAR2(2000);
        EXCALLSERVICE   EXCEPTION;
        NUORDERID          OR_ORDER.ORDER_ID%TYPE;
        NUCAUSALCLIENTPAYID OR_ORDER.CAUSAL_ID%TYPE;
        
        CURSOR CUCOMPSUSPENSION
        (
            NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE,
            NUSUSPENSIONTYPEID   PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
        ) IS
        SELECT * FROM PR_COMPONENT
         WHERE PRODUCT_ID = NUPRODUCTID
           AND NOT EXISTS
               (SELECT PR_COMP_SUSPENSION.COMPONENT_ID
                  FROM PR_COMP_SUSPENSION
                 WHERE PR_COMP_SUSPENSION.COMPONENT_ID = PR_COMPONENT.COMPONENT_ID
                   AND PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID = NUSUSPENSIONTYPEID
                   AND PR_COMP_SUSPENSION.ACTIVE = GE_BOCONSTANTS.CSBYES);

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo PR_BOSuspension.ProductSuspendPBXAnalogo',10);
        UT_TRACE.TRACE('Producto:['||INUPRODUCTID||']Tipo:['||INUSUSPENSIONTYPEID||']Estado:['||INUBILLINGSTATUS||']',11);
        UT_TRACE.TRACE('Orden:['||INUEXTERNALORDERID||']Servicio:['||INUSERVICE||']Fecha:['||IDTATTENTIONDATE||']',11);

        
        DAPR_PRODUCT.GETRECORD(INUPRODUCTID,RCPRODUCT);

        IF INUSERVICE IS NOT NULL THEN
            NUSERVICE := INUSERVICE;
        ELSE
            NUSERVICE := RCPRODUCT.PRODUCT_TYPE_ID;
        END IF;

        
        IF ISBFLAGCOMPLETE = CSBNO THEN
            MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
            PKSUSPCONNSERVICE.ATTENINDIVSUSPECONNE  (
                                                    INUEXTERNALORDERID,
                                                    NUSERVICE,
                                                    INUBILLINGSTATUS,
                                                    IDTATTENTIONDATE,
                                                    ISBFLAGCOMPLETE,
                                                    CSBPROCESSNAME,
                                                    NUERRORCODE,
                                                    SBERRORMESSAGE
                                                    );
            IF NVL(NUERRORCODE,GE_BOCONSTANTS.CNUSUCCESS) <> GE_BOCONSTANTS.CNUSUCCESS THEN
                SBCALLSERVICE := 'pkSuspConnService.ProductSuspendPBXAnalogo';
                RAISE EXCALLSERVICE;
            END IF;
            
            RETURN;
        END IF;


        IF DAOR_EXTERN_SYSTEMS_ID.FBLEXIST(INUEXTERNALORDERID) THEN
            
            UT_TRACE.TRACE('PR_BOSuspension.ProductSuspendPBXAnalogo Obtienes los componentes no Retirados',5);
            FOR RCCOMPONENT IN PR_BCCOMPONENT.CUCOMPBYPRODNORETIRED(INUPRODUCTID)
            LOOP
                
                PR_BOSUSPENSION.COMPONENTSUSPEND(RCCOMPONENT.COMPONENT_ID,INUSUSPENSIONTYPEID);
            END LOOP;
        ELSE
        
            UT_TRACE.TRACE('PR_BOSuspension.ProductSuspendPBXAnalogo Obtienes los componentes activos',5);
            FOR RCCOMPONENT IN CUCOMPSUSPENSION(INUPRODUCTID, INUSUSPENSIONTYPEID)
            LOOP
                
                PR_BOSUSPENSION.COMPONENTSUSPEND(RCCOMPONENT.COMPONENT_ID,INUSUSPENSIONTYPEID);
            END LOOP;
        END IF;

		
		RCPRODSUSPENSION.PROD_SUSPENSION_ID   := PR_BOSEQUENCE.GETPRODUCTSUSPENSIONID;
		RCPRODSUSPENSION.PRODUCT_ID           := INUPRODUCTID;
		RCPRODSUSPENSION.SUSPENSION_TYPE_ID   := INUSUSPENSIONTYPEID;
		RCPRODSUSPENSION.REGISTER_DATE        := DTSYSDATE;
		RCPRODSUSPENSION.APLICATION_DATE      := DTSYSDATE;
		RCPRODSUSPENSION.ACTIVE               := GE_BOCONSTANTS.CSBYES;
		DAPR_PROD_SUSPENSION.INSRECORD(RCPRODSUSPENSION);

        UT_TRACE.TRACE('PR_BOSuspension.ProductSuspendPBXAnalogo inserta registro Pr_Product_Request',5);
        
        PR_BOREQUEST.CREATEREQUESTPRODUCT   (
                                            MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
                                            DTSYSDATE,
                                            INUPRODUCTID,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            GE_BOCONSTANTS.CNUSUCCESS,
                                            CNUMOTIVE_TYPE_SUSP,
                                            GE_BOCONSTANTS.CNUSUCCESS
                                            );

        
        RCPRODUCT.PRODUCT_STATUS_ID := PR_BOPARAMETER.FNUGETPRODSUSP;
        UT_TRACE.TRACE('PR_BOSuspension.ProductSuspendPBXAnalogo actualiza registro PR_Product',5);
        DAPR_PRODUCT.UPDRECORD(RCPRODUCT);

        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);
        UT_TRACE.TRACE('PR_BOSuspension.ProductSuspendPBXAnalogo Suspende en BSS',5);
        UT_TRACE.TRACE('PR_BOSuspension.ProductSuspendPBXAnalogo '||
                       ' inuExternalOrderId:'||INUEXTERNALORDERID||
                       ' nuService         :'||NUSERVICE||
                       ' inuBillingStatus  :'||INUBILLINGSTATUS, 5);
        PKSUSPCONNSERVICE.ATTENINDIVSUSPECONNE  (
                                                INUEXTERNALORDERID,
                                                NUSERVICE,
                                                INUBILLINGSTATUS,
                                                IDTATTENTIONDATE,
                                                ISBFLAGCOMPLETE,
                                                CSBPROCESSNAME,
                                                NUERRORCODE,
                                                SBERRORMESSAGE
                                                );
        IF NVL(NUERRORCODE,GE_BOCONSTANTS.CNUSUCCESS) <> GE_BOCONSTANTS.CNUSUCCESS THEN
            SBCALLSERVICE := 'pkSuspConnService.ProductSuspendPBXAnalogo';
            RAISE EXCALLSERVICE;
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.ProductSuspendPBXAnalogo',10);
    EXCEPTION
        WHEN EXCALLSERVICE THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                SBCALLSERVICE || '|' || TO_CHAR(NUERRORCODE)||' - '||SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTS);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PRODUCTSUSPENDPBXANALOGO;


    FUNCTION FNUGETPRDSUSPENSIONSTOTAL
        (
        INUPRODUCTID      IN PR_PRODUCT.PRODUCT_ID%TYPE,
        IDTCOMPAREDATE      IN DATE
        ) RETURN NUMBER
    IS
        CURFPRODSUSPENSION  CONSTANTS.TYREFCURSOR;
        RCPRODSUSPENSION    DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        NUSUM               NUMBER := 0;
        NUDIFERENCE         NUMBER := NULL;

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo PR_BOSuspension.fnuGetPrdSuspensionsTotal',4);
        UT_TRACE.TRACE('Producto :['||INUPRODUCTID||']',5);
        UT_TRACE.TRACE('Fecha Comparaci�n :['||IDTCOMPAREDATE||']',5);

        
        CURFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION(INUPRODUCTID,IDTCOMPAREDATE);
        FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        WHILE CURFPRODSUSPENSION%FOUND LOOP
            UT_TRACE.TRACE('Fecha Aplicaci�n :['||RCPRODSUSPENSION.APLICATION_DATE||']Fecha Finalizaci�n :['||RCPRODSUSPENSION.INACTIVE_DATE||']',6);

            
            IF (RCPRODSUSPENSION.APLICATION_DATE < IDTCOMPAREDATE) THEN
                NUDIFERENCE := TRUNC(RCPRODSUSPENSION.INACTIVE_DATE) - IDTCOMPAREDATE;
            ELSE
                NUDIFERENCE := TRUNC(RCPRODSUSPENSION.INACTIVE_DATE) - TRUNC(RCPRODSUSPENSION.APLICATION_DATE);
            END IF;

            NUSUM := NUSUM + NUDIFERENCE;
            UT_TRACE.TRACE('Diferencia :['||NUDIFERENCE||']Suma :['||NUSUM||']',6);

            FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        END LOOP;
        CLOSE CURFPRODSUSPENSION;

        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.fnuGetPrdSuspensionsTotal',4);
        RETURN NUSUM;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPRDSUSPENSIONSTOTAL;

   PROCEDURE COMPONENTFINALSUSPEND
        (
        INUCOMPONENTID      IN PR_COMPONENT.COMPONENT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTREGISTERDATE     IN PR_COMP_SUSPENSION.REGISTER_DATE%TYPE,
        IDTAPPLICATIONDATE  IN PR_COMP_SUSPENSION.APLICATION_DATE%TYPE,
        INUMOCOMPONENTID    IN MO_COMPONENT.COMPONENT_ID%TYPE DEFAULT NULL
        )
    IS
        RCPRCOMPSUSPENSION      DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
        SBCUSTCAREREQUESNUM     MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE ;
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        DTSYSDATE               DATE := UT_DATE.FDTSYSDATE;
        RCCOMPONENT             DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo PR_BOSuspension.ComponentFinalSuspend',12);
        
        
        DAPR_COMPONENT.GETRECORD(INUCOMPONENTID,RCCOMPONENT);
        
        
        IF(RCCOMPONENT.COMPONENT_STATUS_ID =PR_BOPARAMETER.FNUGETCOMPRETI) THEN
            RETURN;
        END IF;

        
        RCPRCOMPSUSPENSION.COMP_SUSPENSION_ID:= PR_BOSEQUENCE.GETCOMPONENTSUSPENSIONID;
        RCPRCOMPSUSPENSION.COMPONENT_ID:=INUCOMPONENTID;
        RCPRCOMPSUSPENSION.SUSPENSION_TYPE_ID:= INUSUSPENSIONTYPEID;
        RCPRCOMPSUSPENSION.REGISTER_DATE:=NVL(IDTREGISTERDATE,DTSYSDATE);
        RCPRCOMPSUSPENSION.APLICATION_DATE:=NVL(IDTAPPLICATIONDATE,DTSYSDATE);
        RCPRCOMPSUSPENSION.ACTIVE:= GE_BOCONSTANTS.GETYES;

        
        DAPR_COMP_SUSPENSION.INSRECORD(RCPRCOMPSUSPENSION);

        
        IF(INUMOCOMPONENTID IS NOT NULL) THEN

            NUMOTIVEID:=  DAMO_COMPONENT.FNUGETMOTIVE_ID(INUMOCOMPONENTID);
            NUPACKAGEID:= DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVEID);
            SBCUSTCAREREQUESNUM:= DAMO_PACKAGES.FSBGETCUST_CARE_REQUES_NUM(NUPACKAGEID);

        END IF;

        PR_BOREQUEST.CREATECOMPONENTREQUEST(MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP,
                                            DTSYSDATE,
                                            INUCOMPONENTID,
                                            NVL(NUPACKAGEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(NUMOTIVEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            CNUMOTIVE_TYPE_SUSP,
                                            NVL(INUMOCOMPONENTID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(SBCUSTCAREREQUESNUM,GE_BOCONSTANTS.CNUSUCCESS)
                                            );
                                            
        
        IF(RCCOMPONENT.COMPONENT_STATUS_ID=PR_BOPARAMETER.FNUGETCOMPACTI) THEN
            
            RCCOMPONENT.COMPONENT_STATUS_ID:=PR_BOPARAMETER.FNUGETCOMPSUSP;
            
            RCCOMPONENT.LAST_UPD_DATE := DTSYSDATE;
             
            DACOMPSESU.UPDCMSSESCM(INUCOMPONENTID,PR_BOPARAMETER.FNUGETCOMPSUSP);
            
        END IF;

        DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);

        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.ComponentFinalSuspend',12);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE  FINALSUSPCOMPNOSUSPBYPR
	   (
		INUPRODUCTID      IN PR_PRODUCT.PRODUCT_ID%TYPE,
		INUSUSPTYPEID     IN PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID%TYPE,
        IDTREGISTERDATE   IN PR_COMP_SUSPENSION.REGISTER_DATE%TYPE,
        IDTAPLICATIONDATE IN PR_COMP_SUSPENSION.APLICATION_DATE%TYPE
	   )
    IS
        SBSUSPENDALLOWED      PS_COMPONENT_TYPE.SUSPEND_ALLOWED%TYPE;
		RCSUSPENSION      DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;

    BEGIN
		UT_TRACE.TRACE('Inicio PR_BOSuspension.FinalSuspCompNoSuspByPr',12);
		
        
        FOR RCCOMPONENT IN PR_BCCOMPONENT.CUCOMPONENTSBYPRODUCTID(INUPRODUCTID) LOOP
       		
       		SBSUSPENDALLOWED := DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED (RCCOMPONENT.COMPONENT_TYPE_ID);
			
            IF (SBSUSPENDALLOWED = GE_BOCONSTANTS.CSBNO) THEN
				
                RCSUSPENSION.COMP_SUSPENSION_ID := PR_BOSEQUENCE.GETCOMPONENTSUSPENSIONID;
                RCSUSPENSION.COMPONENT_ID       := RCCOMPONENT.COMPONENT_ID;
                RCSUSPENSION.SUSPENSION_TYPE_ID := INUSUSPTYPEID;
                RCSUSPENSION.REGISTER_DATE      := IDTREGISTERDATE;
                RCSUSPENSION.APLICATION_DATE    := IDTAPLICATIONDATE;
                RCSUSPENSION.ACTIVE             := GE_BOCONSTANTS.CSBYES;

                
                DAPR_COMP_SUSPENSION.INSRECORD(RCSUSPENSION);
                
                IF(RCCOMPONENT.COMPONENT_STATUS_ID=PR_BOPARAMETER.FNUGETCOMPACTI) THEN
                    
                    RCCOMPONENT.COMPONENT_STATUS_ID:= PR_BOPARAMETER.FNUGETCOMPSUSP;
                    
                    RCCOMPONENT.LAST_UPD_DATE:=UT_DATE.FDTSYSDATE;
                    
                    DACOMPSESU.UPDCMSSESCM(RCCOMPONENT.COMPONENT_ID,PR_BOPARAMETER.FNUGETCOMPSUSP);
                END IF;
                
                DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);

       		END IF;
		END LOOP;

		UT_TRACE.TRACE('Finaliza PR_BOSuspension.FinalSuspCompNoSuspByPr',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END  FINALSUSPCOMPNOSUSPBYPR;
	
    
    PROCEDURE PRODUCTFINALSUSPEND
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTREGISTERDATE     IN PR_PROD_SUSPENSION.REGISTER_DATE%TYPE,
        IDTAPPLICATIONDATE  IN PR_PROD_SUSPENSION.APLICATION_DATE%TYPE,
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE DEFAULT NULL
        )
    IS
        RCPRODUCT               DAPR_PRODUCT.STYPR_PRODUCT;
        RCPRPRODSUSPENSION      DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        SBCUSTCAREREQUESNUM     MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE;
        DTSYSDATE               DATE:= UT_DATE.FDTSYSDATE;
        NUERROR                 MENSAJE.MENSCODI%TYPE;
        SBERROR                 MENSAJE.MENSDESC%TYPE;

    BEGIN
        UT_TRACE.TRACE('Incia Metodo PR_BOSuspension.ProductFinalSuspend',12);
        
        
        DAPR_PRODUCT.GETRECORD(INUPRODUCTID,RCPRODUCT);

        
        IF(RCPRODUCT.PRODUCT_STATUS_ID =PR_BOPARAMETER.FNUGETPRODRETI) THEN
            RETURN;
        END IF;
        
        
        RCPRPRODSUSPENSION.PROD_SUSPENSION_ID:= PR_BOSEQUENCE.GETPRODUCTSUSPENSIONID;
        RCPRPRODSUSPENSION.PRODUCT_ID:=INUPRODUCTID;
        RCPRPRODSUSPENSION.SUSPENSION_TYPE_ID:=INUSUSPENSIONTYPEID;
        RCPRPRODSUSPENSION.REGISTER_DATE:=IDTREGISTERDATE;
        RCPRPRODSUSPENSION.APLICATION_DATE:=IDTAPPLICATIONDATE;
        RCPRPRODSUSPENSION.ACTIVE:= GE_BOCONSTANTS.GETYES;

        
        DAPR_PROD_SUSPENSION.INSRECORD(RCPRPRODSUSPENSION);

        
        IF(INUMOTIVEID IS NOT NULL) THEN

            NUPACKAGEID:= DAMO_MOTIVE.FNUGETPACKAGE_ID(INUMOTIVEID);
            SBCUSTCAREREQUESNUM:= DAMO_PACKAGES.FSBGETCUST_CARE_REQUES_NUM(NUPACKAGEID);

        END IF;

        PR_BOREQUEST.CREATEREQUESTPRODUCT(  MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
                                            DTSYSDATE,
                                            INUPRODUCTID,
                                            NVL(NUPACKAGEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(INUMOTIVEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            CNUMOTIVE_TYPE_SUSP,
                                            NVL(SBCUSTCAREREQUESNUM,GE_BOCONSTANTS.CNUSUCCESS)
                                            );
                                            
                                            
        
        FINALSUSPCOMPNOSUSPBYPR(INUPRODUCTID,
                                INUSUSPENSIONTYPEID,
                                IDTREGISTERDATE,
                                IDTAPPLICATIONDATE
                               );

        

        
        IF (RCPRODUCT.PRODUCT_STATUS_ID= PR_BOPARAMETER.FNUGETPRODACTI) THEN
            
            RCPRODUCT.PRODUCT_STATUS_ID:= PR_BOPARAMETER.FNUGETPRODSUSP;

            
            BI_BSSUSPCONNWITHDRAW.ATTENTFINALSUSPCONN(INUPRODUCTID,
                                                      BI_BOPARAMETER.FNUGETFINALSUSPENSION,
                                                      IDTAPPLICATIONDATE,
                                                      NUERROR,
                                                      SBERROR);

            IF( NUERROR <> GE_BOCONSTANTS.OK AND NUERROR IS NOT NULL) THEN
                    ERRORS.SETMESSAGE(SBERROR);
                    RAISE  EX.CONTROLLED_ERROR;
            END IF;

        END IF;
        
        DAPR_PRODUCT.UPDRECORD(RCPRODUCT);
        
        UT_TRACE.TRACE('Finaliza Metodo PR_BOSuspension.ProductFinalSuspend',12);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    PROCEDURE COMPRECONBYFINALSUSP
        (
        INUCOMPONENTID      IN PR_COMPONENT.COMPONENT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTENDINGDATE       IN PR_COMP_SUSPENSION.INACTIVE_DATE%TYPE,
        INUMOCOMPONENTID    IN MO_COMPONENT.COMPONENT_ID%TYPE DEFAULT NULL
        )
    IS
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        SBCUSTCAREREQUESNUM MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE;
        DTSYSDATE           DATE := UT_DATE.FDTSYSDATE;
    BEGIN
        DAPR_COMPONENT.GETRECORD(INUCOMPONENTID,RCCOMPONENT );

        
        IF(RCCOMPONENT.COMPONENT_STATUS_ID =PR_BOPARAMETER.FNUGETCOMPRETI) THEN
            RETURN;
        END IF;
        
        
        PR_BOCOMPONENT.RECONNECT(INUCOMPONENTID,IDTENDINGDATE,INUSUSPENSIONTYPEID);

        
        IF(INUMOCOMPONENTID IS NOT NULL) THEN

            NUMOTIVEID:=  DAMO_COMPONENT.FNUGETMOTIVE_ID(INUMOCOMPONENTID);
            NUPACKAGEID:= DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVEID);
            SBCUSTCAREREQUESNUM:= DAMO_PACKAGES.FSBGETCUST_CARE_REQUES_NUM(NUPACKAGEID);

        END IF;

        PR_BOREQUEST.CREATECOMPONENTREQUEST(MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP,
                                            DTSYSDATE,
                                            INUCOMPONENTID,
                                            NVL(NUPACKAGEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(NUMOTIVEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            CNUMOTIVE_TYPE_SUSP,
                                            NVL(INUMOCOMPONENTID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(SBCUSTCAREREQUESNUM,GE_BOCONSTANTS.CNUSUCCESS)
                                            );
                                            
        
        IF (PR_BOSUSPENSION.FNUGETQUANTITYCOMPSUSP(INUCOMPONENTID) = 0 ) THEN
            
            RCCOMPONENT.COMPONENT_STATUS_ID:=PR_BOPARAMETER.FNUGETCOMPACTI;
            
            RCCOMPONENT.LAST_UPD_DATE:=UT_DATE.FDTSYSDATE;
            
            DACOMPSESU.UPDCMSSESCM(INUCOMPONENTID,PR_BOPARAMETER.FNUGETCOMPACTI);
        END IF;
        

        
        DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE  RECONCOMPNOSUSPBYFINALSUSP
        (
        INUPRODUCTID      IN PR_PRODUCT.PRODUCT_ID%TYPE,
		INUSUSPTYPEID     IN PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID%TYPE,
        IDTENDINGDATE     IN PR_COMP_SUSPENSION.INACTIVE_DATE%TYPE
        )
    IS
        RCCOMPONENT           DAPR_COMPONENT.STYPR_COMPONENT;
		SBSUSPENDALLOWED      PS_COMPONENT_TYPE.SUSPEND_ALLOWED%TYPE;
		RCSUSPENSION          DAPR_COMP_SUSPENSION.STYPR_COMP_SUSPENSION;
		
    BEGIN
        
        FOR RCCOMPONENT IN PR_BCCOMPONENT.CUCOMPONENTSBYPRODUCTID(INUPRODUCTID) LOOP
            
       		SBSUSPENDALLOWED := DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED (RCCOMPONENT.COMPONENT_TYPE_ID);
			
            IF (SBSUSPENDALLOWED = GE_BOCONSTANTS.CSBNO AND RCCOMPONENT.COMPONENT_STATUS_ID = PR_BOPARAMETER.FNUGETCOMPSUSP) THEN
                
                PR_BOCOMPONENT.RECONNECT(RCCOMPONENT.COMPONENT_ID,IDTENDINGDATE,INUSUSPTYPEID);
                
                IF (PR_BOSUSPENSION.FNUGETQUANTITYCOMPSUSP(RCCOMPONENT.COMPONENT_ID) = 0) THEN
                    
                    RCCOMPONENT.COMPONENT_STATUS_ID:=PR_BOPARAMETER.FNUGETCOMPACTI;
                    
                    RCCOMPONENT.LAST_UPD_DATE:=UT_DATE.FDTSYSDATE;
                    
                    DACOMPSESU.UPDCMSSESCM(RCCOMPONENT.COMPONENT_ID,PR_BOPARAMETER.FNUGETCOMPACTI);
                END IF;

                
                DAPR_COMPONENT.UPDRECORD(RCCOMPONENT);
            END IF;
        END LOOP;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE RECONPRODUCTBYFINALSUSP
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTENDINGDATE       IN PR_COMP_SUSPENSION.INACTIVE_DATE%TYPE ,
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE DEFAULT NULL
        )
    IS
        RFPRODSUSPENSION    CONSTANTS.TYREFCURSOR;
        RCPRODSUSPENSION    DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        SBCUSTCAREREQUESNUM MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE;
        DTSYSDATE           DATE := UT_DATE.FDTSYSDATE;
        DTMEDIATIONDATE     DATE;
        NUERROR             MENSAJE.MENSCODI%TYPE;
        SBERROR             MENSAJE.MENSDESC%TYPE;
        NUSUSPSTATUS        PS_PRODUCT_STATUS.PRODUCT_STATUS_ID%TYPE;
    BEGIN

        DAPR_PRODUCT.GETRECORD(INUPRODUCTID,RCPRODUCT);

        
        IF(RCPRODUCT.PRODUCT_STATUS_ID =PR_BOPARAMETER.FNUGETPRODRETI) THEN
            RETURN;
        END IF;
        
        
        RFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION(INUPRODUCTID);
		LOOP
			FETCH RFPRODSUSPENSION INTO  RCPRODSUSPENSION;
	        EXIT WHEN RFPRODSUSPENSION%NOTFOUND;
	        
            
	        IF (RCPRODSUSPENSION.SUSPENSION_TYPE_ID = INUSUSPENSIONTYPEID) THEN
	           RCPRODSUSPENSION.INACTIVE_DATE:=IDTENDINGDATE;
	           RCPRODSUSPENSION.ACTIVE:= GE_BOCONSTANTS.GETNO;
               DAPR_PROD_SUSPENSION.UPDRECORD(RCPRODSUSPENSION);
               EXIT;
	        END IF;
		END LOOP;
		CLOSE RFPRODSUSPENSION;
    
        
        IF(INUMOTIVEID IS NOT NULL) THEN

            NUPACKAGEID:= DAMO_MOTIVE.FNUGETPACKAGE_ID(INUMOTIVEID);
            SBCUSTCAREREQUESNUM:= DAMO_PACKAGES.FSBGETCUST_CARE_REQUES_NUM(NUPACKAGEID);

        END IF;

        PR_BOREQUEST.CREATEREQUESTPRODUCT(  MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT,
                                            DTSYSDATE,
                                            INUPRODUCTID,
                                            NVL(NUPACKAGEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            NVL(INUMOTIVEID,GE_BOCONSTANTS.CNUSUCCESS),
                                            CNUMOTIVE_TYPE_SUSP,
                                            NVL(SBCUSTCAREREQUESNUM,GE_BOCONSTANTS.CNUSUCCESS)
                                            );
        RECONCOMPNOSUSPBYFINALSUSP(INUPRODUCTID,INUSUSPENSIONTYPEID,IDTENDINGDATE);

        
        
        IF ( PR_BOSUSPENSION.FNUGETQUANTITYPRODSUSP(INUPRODUCTID) = 0) THEN
            
            RCPRODUCT.PRODUCT_STATUS_ID:= PR_BOPARAMETER.FNUGETPRODACTI;
            RCPRODUCT.SUSPEN_ORD_ACT_ID := NULL;
            
            BI_BSSUSPCONNWITHDRAW.ATTENTFINALSUSPCONN(INUPRODUCTID,
                                                      PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE ('EST_SERVICIO_SIN_CORTE'),
                                                      IDTENDINGDATE,
                                                      NUERROR,
                                                      SBERROR);

            IF( NUERROR <> GE_BOCONSTANTS.OK AND NUERROR IS NOT NULL) THEN
                ERRORS.SETMESSAGE(SBERROR);
                RAISE  EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        DAPR_PRODUCT.UPDRECORD(RCPRODUCT);

        UT_TRACE.TRACE('Finaliza PR_BOSuspension.ReconVolProduct',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFPRODSUSPENSION);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFPRODSUSPENSION);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE FINALSUSPFORNORECOVERY
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
        IDTREGISTERDATE     IN PR_PROD_SUSPENSION.REGISTER_DATE%TYPE,
        IDTAPPLICATIONDATE  IN PR_PROD_SUSPENSION.APLICATION_DATE%TYPE
        )
        
        IS
        RFPRODSUSPENSION     CONSTANTS.TYREFCURSOR;


    BEGIN

        UT_TRACE.TRACE('Finaliza PR_BOSuspension.FinalSuspForNoRecovery',12);

        
        FOR RCPRCOMPONENT IN PR_BCCOMPONENT.CUCOMPONENTSBYPRODUCTID(INUPRODUCTID) LOOP

            
            PR_BOSUSPENSION.COMPONENTFINALSUSPEND( RCPRCOMPONENT.COMPONENT_ID,
                                                   INUSUSPENSIONTYPEID,
                                                   IDTREGISTERDATE,
                                                   IDTAPPLICATIONDATE,
                                                   NULL
                                                 );

        END LOOP;
        
        
          PR_BOSUSPENSION.PRODUCTFINALSUSPEND(INUPRODUCTID,
                                              INUSUSPENSIONTYPEID,
                                              IDTREGISTERDATE,
                                              IDTAPPLICATIONDATE,
                                              NULL
                                              );
        UT_TRACE.TRACE('Finaliza PR_BOSuspension.FinalSuspForNoRecovery',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    FUNCTION FNUCOUNTACTIPRODSUSPS
    (
        INUPRODUCTID        IN  PR_PROD_SUSPENSION.PRODUCT_ID%TYPE,
        INUSUSPENSIONTYPEID IN  PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN  NUMBER
    IS
    BEGIN
        UT_TRACE.TRACE('PR_BOSuspension.fnuCountActiProdSusps['||INUPRODUCTID||']['||INUSUSPENSIONTYPEID||']',10);

        
        RETURN PR_BCSUSPENSION.FNUCOUNTACTIPRODSUSPS(INUPRODUCTID, INUSUSPENSIONTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNTACTIPRODSUSPS;
    
    













    FUNCTION FNUGETLASTPRODSUSPORDERACTI
    (
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN PR_PRODUCT.SUSPEN_ORD_ACT_ID%TYPE
    IS
        NULASTPRODSUSPORDERACTI PR_PRODUCT.SUSPEN_ORD_ACT_ID%TYPE := NULL;
    BEGIN
        UT_TRACE.TRACE('Inicio PR_BOSuspension.fnuGetLastProdSuspOrderActi['||INUPRODUCTID||']',10);

        
        NULASTPRODSUSPORDERACTI := DAPR_PRODUCT.FNUGETSUSPEN_ORD_ACT_ID(INUPRODUCTID);

        UT_TRACE.TRACE('Fin PR_BOSuspension.fnuGetLastProdSuspOrderActi['||NULASTPRODSUSPORDERACTI||']',10);

        RETURN NULASTPRODSUSPORDERACTI;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETLASTPRODSUSPORDERACTI;

    










    PROCEDURE LEGALIZEPRODSUSPORDERACTI
    IS
        
        CNUPRODUCTID        CONSTANT OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE           := OR_BOLEGALIZEACTIVITIES.FNUGETCURRPRODUCT;
        
        CNUORDERACTIVITYID  CONSTANT OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE    := OR_BOLEGALIZEACTIVITIES.FNUGETCURRACTIVITY;
    BEGIN
        UT_TRACE.TRACE('Inicio PR_BOSuspension.LegalizeProdSuspOrderActi['||CNUPRODUCTID||']['||CNUORDERACTIVITYID||']',5);
        
        
        DAPR_PRODUCT.UPDSUSPEN_ORD_ACT_ID(CNUPRODUCTID, CNUORDERACTIVITYID);

        UT_TRACE.TRACE('Fin PR_BOSuspension.LegalizeProdSuspOrderActi',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LEGALIZEPRODSUSPORDERACTI;
    
    
















    PROCEDURE GETSUSPBYPROD
    (
       INUPRODUCTID           IN  PR_PRODUCT.PRODUCT_ID%TYPE,
       ONUSUSPENSIONTYPEID    OUT GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE,
       OSBSUSPENSIONTYPEDESC  OUT GE_SUSPENSION_TYPE.DESCRIPTION%TYPE
    )
    IS
       
       CURFPRODSUSPENSION  CONSTANTS.TYREFCURSOR;
       
       RCPRODSUSPENSION    DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
    BEGIN
        UT_TRACE.TRACE('Inicio PR_BOSuspension.GetSuspByProd['||INUPRODUCTID||']',2);
        
        DAPR_PRODUCT.ACCKEY(INUPRODUCTID);

        
        CURFPRODSUSPENSION := PR_BCSUSPENSION.FRFPRODSUSPENSION(INUPRODUCTID);
        FETCH CURFPRODSUSPENSION INTO RCPRODSUSPENSION;
        CLOSE CURFPRODSUSPENSION;

        ONUSUSPENSIONTYPEID   := RCPRODSUSPENSION.SUSPENSION_TYPE_ID;
        OSBSUSPENSIONTYPEDESC := DAGE_SUSPENSION_TYPE.FSBGETDESCRIPTION(ONUSUSPENSIONTYPEID,0);

        UT_TRACE.TRACE('Fin PR_BOSuspension.GetSuspByProd',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR PR_BOSuspension.GetSuspByProd',2);
            IF (CURFPRODSUSPENSION%ISOPEN) THEN
                CLOSE CURFPRODSUSPENSION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others PR_BOSuspension.GetSuspByProd',2);
            IF (CURFPRODSUSPENSION%ISOPEN) THEN
                CLOSE CURFPRODSUSPENSION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSUSPBYPROD;
    
END PR_BOSUSPENSION;