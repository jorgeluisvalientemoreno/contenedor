
CREATE OR REPLACE PACKAGE BODY PS_BCPACKTY_UNITTY IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO168134';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION FRCGETUNITBYPACKAGE( INUPACKAGETYPEID IN PS_PACKAGE_UNITTYPE.PACKAGE_TYPE_ID%TYPE )
    RETURN DAPS_PACKAGE_UNITTYPE.STYPS_PACKAGE_UNITTYPE
    IS
      RCPACKUNIT DAPS_PACKAGE_UNITTYPE.STYPS_PACKAGE_UNITTYPE;
      CURSOR CUPACKAGEUNIT IS
SELECT a.*, a.rowid
              FROM ps_package_unittype a
             WHERE package_type_id = inuPackageTypeId
               AND product_type_id IS null
               AND product_motive_id IS null;
    BEGIN
      UT_TRACE.TRACE( 'PS_BCPACKTY_UNITTY.frcGetUnitByPackPrd [' || INUPACKAGETYPEID || ']', 13 );
      FOR RC IN CUPACKAGEUNIT
       LOOP
         UT_TRACE.TRACE( 'Encontro [' || RC.PACKAGE_UNITTYPE_ID || ']', 15 );
         RCPACKUNIT := RC;
      END LOOP;
      RETURN RCPACKUNIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUPACKAGEUNIT%ISOPEN ) THEN
            CLOSE CUPACKAGEUNIT;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( CUPACKAGEUNIT%ISOPEN ) THEN
            CLOSE CUPACKAGEUNIT;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETUNITBYPACKPRD( INUPACKAGETYPEID IN PS_PACKAGE_UNITTYPE.PACKAGE_TYPE_ID%TYPE, INUPRODUCTTYPEID IN PS_PACKAGE_UNITTYPE.PRODUCT_TYPE_ID%TYPE )
    RETURN DAPS_PACKAGE_UNITTYPE.STYPS_PACKAGE_UNITTYPE
    IS
      RCPACKUNIT DAPS_PACKAGE_UNITTYPE.STYPS_PACKAGE_UNITTYPE;
      CURSOR CUPACKAGEUNIT IS
SELECT a.*, a.rowid
              FROM ps_package_unittype a
             WHERE package_type_id = inuPackageTypeId
               AND nvl(product_type_id, -1) = nvl(inuProductTypeId, -1)
               AND product_motive_id IS null;
    BEGIN
      UT_TRACE.TRACE( 'PS_BCPACKTY_UNITTY.frcGetUnitByPackPrd [' || INUPACKAGETYPEID || '] [' || INUPRODUCTTYPEID || ']', 13 );
      FOR RC IN CUPACKAGEUNIT
       LOOP
         UT_TRACE.TRACE( 'Encontro [' || RC.PACKAGE_UNITTYPE_ID || ']', 15 );
         RCPACKUNIT := RC;
      END LOOP;
      RETURN RCPACKUNIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUPACKAGEUNIT%ISOPEN ) THEN
            CLOSE CUPACKAGEUNIT;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( CUPACKAGEUNIT%ISOPEN ) THEN
            CLOSE CUPACKAGEUNIT;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETUNITBYPACKMOT( INUPACKAGETYPEID IN PS_PACKAGE_UNITTYPE.PACKAGE_TYPE_ID%TYPE, INUPRODUCTMOTIID IN PS_PACKAGE_UNITTYPE.PRODUCT_MOTIVE_ID%TYPE )
    RETURN DAPS_PACKAGE_UNITTYPE.STYPS_PACKAGE_UNITTYPE
    IS
      RCPACKUNIT DAPS_PACKAGE_UNITTYPE.STYPS_PACKAGE_UNITTYPE;
      CURSOR CUPACKAGEMOTUNIT IS
SELECT a.*, a.rowid
              FROM ps_package_unittype a
             WHERE package_type_id = inuPackageTypeId
               AND product_motive_id = inuProductMotiId
               AND product_type_id IS null;
    BEGIN
      UT_TRACE.TRACE( 'PS_BCPACKTY_UNITTY.frcGetUnitByPackMot [' || INUPACKAGETYPEID || '] [' || INUPRODUCTMOTIID || ']', 13 );
      FOR RC IN CUPACKAGEMOTUNIT
       LOOP
         UT_TRACE.TRACE( 'Encontro [' || RC.PACKAGE_UNITTYPE_ID || ']', 15 );
         RCPACKUNIT := RC;
      END LOOP;
      RETURN RCPACKUNIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUPACKAGEMOTUNIT%ISOPEN ) THEN
            CLOSE CUPACKAGEMOTUNIT;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( CUPACKAGEMOTUNIT%ISOPEN ) THEN
            CLOSE CUPACKAGEMOTUNIT;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBOEXISTUNITBYPACKMOT( INUPACKAGETYPEID IN MO_PACKAGES.PACKAGE_TYPE_ID%TYPE )
    RETURN BOOLEAN
    IS
      BOFLAG BOOLEAN := FALSE;
      CURSOR CUPACKAGEUNITTYPE IS
SELECT a.*, a.rowid
                    FROM ps_package_unittype a
                    WHERE package_type_id = inuPackageTypeId
                    AND product_motive_id IS not null
                    AND product_type_id IS null;
    BEGIN
      UT_TRACE.TRACE( 'Inicio PS_BCPACKTY_UNITTY.fboExistUnitByPackMot [' || INUPACKAGETYPEID || ']', 13 );
      FOR RC IN CUPACKAGEUNITTYPE
       LOOP
         UT_TRACE.TRACE( 'Finalizo  PS_BCPACKTY_UNITTY.fboExistUnitByPackMot', 15 );
         BOFLAG := TRUE;
         EXIT;
      END LOOP;
      RETURN BOFLAG;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUPACKAGEUNITTYPE%ISOPEN ) THEN
            CLOSE CUPACKAGEUNITTYPE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( CUPACKAGEUNITTYPE%ISOPEN ) THEN
            CLOSE CUPACKAGEUNITTYPE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBOEXISTUNITBYPACKMOT;
END PS_BCPACKTY_UNITTY;
/


