
CREATE OR REPLACE PACKAGE BODY OR_BOLEGALACTPRODTYPESTAT IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO234437';
   CNUCATYATTWITHOUTACTIVITY CONSTANT NUMBER( 2 ) := 27;
   CNUCAUSALANULLATENT CONSTANT NUMBER := 460;
   CNUTASKTYPESUSPTV CONSTANT NUMBER := 714;
   CNURETIRETYPEBYPAY CONSTANT NUMBER := 3;
   CNURETIRED_BY_FINANCE CONSTANT NUMBER := 12;
   CNURETIRED_BY_PENDFINANCE CONSTANT NUMBER := 13;
   CNUANNUL_CAUSAL_TYPE CONSTANT NUMBER := 18;
   CSBSI CONSTANT VARCHAR2( 1 ) := 'S';
   CSBNO CONSTANT VARCHAR2( 1 ) := 'N';
   FUNCTION FBLISPBX( INUPRODUCT_ID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN BOOLEAN;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE PRODUCTSUSPEND( IRCORDERACTIVITY IN OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES, INUORDERID IN OR_ORDER.ORDER_ID%TYPE, INUCAUSAL IN GE_CAUSAL.CAUSAL_ID%TYPE )
    IS
      DTEXECUTIONFINALDATE OR_ORDER.EXECUTION_FINAL_DATE%TYPE;
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
      NUSUSPENSIONTYPEID GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE;
      NUSTATUS NUMBER;
      NUSUCOIDSC SUSPCONE.SUCOIDSC%TYPE;
      NUSUCOORDTYPE SUSPCONE.SUCOORDTYPE%TYPE;
      NUCAUSALTYPEID GE_CAUSAL_TYPE.CAUSAL_TYPE_ID%TYPE;
      SBFLAGCOMPLETE VARCHAR2( 1 );
      ORDER_ACTIVITY_ID OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio: [OR_BOLegalActProdTypeStat.ProductSuspend]', 5 );
      IF ( DAOR_ORDER_REGEN.FBLEXIST( IRCORDERACTIVITY.NUTASKTYPE, INUCAUSAL ) ) THEN
         UT_TRACE.TRACE( 'Fin: [OR_BOLegalActProdTypeStat.ProductSuspend]', 5 );
         RETURN;
      END IF;
      NUCAUSALTYPEID := DAGE_CAUSAL.FNUGETCAUSAL_TYPE_ID( INUCAUSAL );
      NUPRODUCTID := IRCORDERACTIVITY.NUPRODUCTID;
      DTEXECUTIONFINALDATE := DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE( INUORDERID );
      ORDER_ACTIVITY_ID := IRCORDERACTIVITY.NUORDERACTIVITY;
      ORDER_ACTIVITY_ID := OR_BCORDERACTIVITIES.FNUGETORIGINORDERACTIVITYID( ORDER_ACTIVITY_ID );
      PKBCSUSPCONE.GETFIELDSUSPCNEBYACTIV( ORDER_ACTIVITY_ID, NUSUCOIDSC, NUSUCOORDTYPE );
      SM_BOINTERFACE.GETSUSPENSIONTYPEANDSTATUS( NUSUCOORDTYPE, NUSUSPENSIONTYPEID, NUSTATUS );
      IF ( CNUCATYATTWITHOUTACTIVITY = NUCAUSALTYPEID ) THEN
         SBFLAGCOMPLETE := CSBNO;
       ELSE
         SBFLAGCOMPLETE := CSBSI;
      END IF;
      IF ( FBLISPBX( NUPRODUCTID ) ) THEN
         UT_TRACE.TRACE( 'Suspende producto PBX', 6 );
         PR_BOSUSPENSION.PRODUCTSUSPENDPBXANALOGO( NUPRODUCTID, NUSUSPENSIONTYPEID, NUSTATUS, NUSUCOIDSC, NULL, DTEXECUTIONFINALDATE, SBFLAGCOMPLETE );
       ELSE
         UT_TRACE.TRACE( 'Suspende producto', 6 );
         PR_BOSUSPCORTERECONEXION.SUSPENDERPRODUCTO( NUPRODUCTID, NUSUSPENSIONTYPEID, NUSTATUS, NUSUCOIDSC, NULL, DTEXECUTIONFINALDATE, SBFLAGCOMPLETE );
      END IF;
      UT_TRACE.TRACE( 'Fin: [OR_BOLegalActProdTypeStat.ProductSuspend]', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductSuspend]', 5 );
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductSuspend]', 5 );
         RAISE EX.CONTROLLED_ERROR;
   END PRODUCTSUSPEND;
   PROCEDURE PRODUCTRECONECT( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE, INUORDERID IN SUSPCONE.SUCOIDSC%TYPE, INUORDERTYPEID IN SUSPCONE.SUCOORDTYPE%TYPE, IDTATTENTIONDATE IN DATE, INUCAUSALID IN GE_CAUSAL.CAUSAL_ID%TYPE := NULL )
    IS
      NUSUSPENSIONTYPEID GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE;
      NUSTATUS NUMBER;
      SBFLAGCOMPLETE VARCHAR2( 1 );
    BEGIN
      UT_TRACE.TRACE( 'Inicio: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
      SM_BOINTERFACE.GETSUSPENSIONTYPEANDSTATUS( INUORDERTYPEID, NUSUSPENSIONTYPEID, NUSTATUS );
      IF ( INUCAUSALID IS NOT NULL AND DAGE_CAUSAL.FNUGETCAUSAL_TYPE_ID( INUCAUSALID ) = CNUCATYATTWITHOUTACTIVITY ) THEN
         SBFLAGCOMPLETE := CSBNO;
       ELSE
         SBFLAGCOMPLETE := CSBSI;
      END IF;
      PR_BOSUSPCORTERECONEXION.CONECTARPRODUCTO( INUPRODUCTID, NUSUSPENSIONTYPEID, NUSTATUS, INUORDERID, NULL, IDTATTENTIONDATE, SBFLAGCOMPLETE );
      UT_TRACE.TRACE( 'Fin: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
         RAISE EX.CONTROLLED_ERROR;
   END PRODUCTRECONECT;
   PROCEDURE PRODUCTRECONECT( IRCORDERACTIVITY IN OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES, INUORDERID IN OR_ORDER.ORDER_ID%TYPE, INUCAUSAL IN GE_CAUSAL.CAUSAL_ID%TYPE )
    IS
      DTEXECUTIONFINALDATE OR_ORDER.EXECUTION_FINAL_DATE%TYPE;
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
      SBFLAGCOMPLETE VARCHAR2( 1 );
      NUSUCOIDSC SUSPCONE.SUCOIDSC%TYPE;
      NUSUCOORDTYPE SUSPCONE.SUCOORDTYPE%TYPE;
      ORDER_ACTIVITY_ID OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
      IF ( DAOR_ORDER_REGEN.FBLEXIST( IRCORDERACTIVITY.NUTASKTYPE, INUCAUSAL ) ) THEN
         UT_TRACE.TRACE( 'Fin: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
         RETURN;
      END IF;
      DTEXECUTIONFINALDATE := DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE( INUORDERID );
      NUPRODUCTID := IRCORDERACTIVITY.NUPRODUCTID;
      ORDER_ACTIVITY_ID := IRCORDERACTIVITY.NUORDERACTIVITY;
      ORDER_ACTIVITY_ID := OR_BCORDERACTIVITIES.FNUGETORIGINORDERACTIVITYID( ORDER_ACTIVITY_ID );
      PKBCSUSPCONE.GETFIELDSUSPCNEBYACTIV( ORDER_ACTIVITY_ID, NUSUCOIDSC, NUSUCOORDTYPE );
      OR_BOLEGALACTPRODTYPESTAT.PRODUCTRECONECT( INUPRODUCTID=>NUPRODUCTID, INUORDERID=>NUSUCOIDSC, INUORDERTYPEID=>NUSUCOORDTYPE, IDTATTENTIONDATE=>DTEXECUTIONFINALDATE, INUCAUSALID=>INUCAUSAL );
      UT_TRACE.TRACE( 'Fin: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductReConect]', 5 );
         RAISE EX.CONTROLLED_ERROR;
   END PRODUCTRECONECT;
   PROCEDURE PRODUCTRETIRE( IRCORDERACTIVITY IN OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES, INUORDERID IN OR_ORDER.ORDER_ID%TYPE, INUCAUSAL IN GE_CAUSAL.CAUSAL_ID%TYPE )
    IS
      DTEXECUTIONFINALDATE OR_ORDER.EXECUTION_FINAL_DATE%TYPE;
      NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
      NUSUSPENSIONTYPEID GE_SUSPENSION_TYPE.SUSPENSION_TYPE_ID%TYPE;
      NUSTATUS NUMBER;
      BLAFORO BOOLEAN;
      NUERROR GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
      SBERROR GE_ERROR_LOG.DESCRIPTION%TYPE;
      NUSUCOIDSC SUSPCONE.SUCOIDSC%TYPE;
      NUSUCOORDTYPE SUSPCONE.SUCOORDTYPE%TYPE;
      ORDER_ACTIVITY_ID OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicio: [OR_BOLegalActProdTypeStat.ProductRetire]', 5 );
      IF ( DAOR_ORDER_REGEN.FBLEXIST( IRCORDERACTIVITY.NUTASKTYPE, INUCAUSAL ) ) THEN
         UT_TRACE.TRACE( 'Fin: [OR_BOLegalActProdTypeStat.ProductRetire]', 5 );
         RETURN;
      END IF;
      DTEXECUTIONFINALDATE := DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE( INUORDERID );
      NUPRODUCTID := IRCORDERACTIVITY.NUPRODUCTID;
      ORDER_ACTIVITY_ID := IRCORDERACTIVITY.NUORDERACTIVITY;
      ORDER_ACTIVITY_ID := OR_BCORDERACTIVITIES.FNUGETORIGINORDERACTIVITYID( ORDER_ACTIVITY_ID );
      PKBCSUSPCONE.GETFIELDSUSPCNEBYACTIV( ORDER_ACTIVITY_ID, NUSUCOIDSC, NUSUCOORDTYPE );
      SM_BOINTERFACE.GETSUSPENSIONTYPEANDSTATUS( NUSUCOORDTYPE, NUSUSPENSIONTYPEID, NUSTATUS );
      PR_BOSUSPCORTERECONEXION.RETIRARPRODUCTO( NUPRODUCTID, CNURETIRETYPEBYPAY, NUSTATUS, NUSUCOIDSC, DTEXECUTIONFINALDATE );
      PKBSAFOROSUBSSERV.VALIDATEAFORADO( NUPRODUCTID, BLAFORO, NUERROR, SBERROR );
      IF ( NUERROR != CONSTANTS.CNUSUCCESS ) THEN
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( BLAFORO ) THEN
         PKBSAFOROSUBSSERV.WITHDRAW_AFORO( NUPRODUCTID, NUERROR, SBERROR );
      END IF;
      IF ( NUERROR != CONSTANTS.CNUSUCCESS ) THEN
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'Fin: [OR_BOLegalActProdTypeStat.ProductRetire]', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductRetire]', 5 );
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         UT_TRACE.TRACE( 'Error: [OR_BOLegalActProdTypeStat.ProductRetire]', 5 );
         RAISE EX.CONTROLLED_ERROR;
   END PRODUCTRETIRE;
   FUNCTION FBLISPBX( INUPRODUCT_ID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN BOOLEAN
    IS
      CNUPRODTYPPBXA CONSTANT PR_PRODUCT.PRODUCT_TYPE_ID%TYPE := 2;
      CNUPRODTYPPBXD CONSTANT PR_PRODUCT.PRODUCT_TYPE_ID%TYPE := 11;
      CNUPRODTYPRDSIBRI CONSTANT PR_PRODUCT.PRODUCT_TYPE_ID%TYPE := 6010;
    BEGIN
      IF INUPRODUCT_ID IS NULL THEN
         RETURN FALSE;
      END IF;
      IF DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID( INUPRODUCT_ID ) IN ( CNUPRODTYPPBXA, CNUPRODTYPPBXD, CNUPRODTYPRDSIBRI ) THEN
         RETURN TRUE;
       ELSE
         RETURN FALSE;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLISPBX;
   PROCEDURE ANULLSUSPPRODUC( IRCORDERACTIVITY IN OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES, INUORDERID IN OR_ORDER.ORDER_ID%TYPE, INUCAUSAL IN GE_CAUSAL.CAUSAL_ID%TYPE )
    IS
      NUPRODUCTID OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
      NUTASKTYPEID OR_ORDER_ACTIVITY.TASK_TYPE_ID%TYPE;
      NUSETTOPBOXID PR_NETWORK_ELEM_OPER.ELEMENT_ID%TYPE;
      NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
      CNUERRCODTOPBOX CONSTANT NUMBER := 117280;
      CNUCATVSETTOPBOX CONSTANT NUMBER := 114;
      RCORDER DAOR_ORDER.STYOR_ORDER;
    BEGIN
      UT_TRACE.TRACE( 'INICIO - OR_boLegalActProdTypeStat.AnullSuspProduc', 15 );
      IF ( DAOR_ORDER_REGEN.FBLEXIST( IRCORDERACTIVITY.NUTASKTYPE, INUCAUSAL ) ) THEN
         RETURN;
      END IF;
      PKERRORS.SETAPPLICATION( SUBSTR( UT_SESSION.GETPROGRAM, 1, 10 ) );
      IF DAGE_CAUSAL.FNUGETCAUSAL_TYPE_ID( INUCAUSAL ) = CNUANNUL_CAUSAL_TYPE THEN
         NUPRODUCTID := IRCORDERACTIVITY.NUPRODUCTID;
         NUORDERACTIVITY := IRCORDERACTIVITY.NUORDERACTIVITY;
         RCORDER := DAOR_ORDER.FRCGETRECORD( INUORDERID );
         NUTASKTYPEID := RCORDER.TASK_TYPE_ID;
         IF NUTASKTYPEID = CNUTASKTYPESUSPTV THEN
            PR_BONETWORK_ELEM_OPER.GETELEMENTIDBYPRODUCTID( NUPRODUCTID, CNUCATVSETTOPBOX, NUSETTOPBOXID );
            IF ( NUSETTOPBOXID IS NOT NULL ) THEN
               GI_BOERRORS.SETERRORCODEARGUMENT( CNUERRCODTOPBOX, NUPRODUCTID );
               RETURN;
            END IF;
         END IF;
         PKSUSPCONNSERVICEMGR.ANULORDSUSPAYMENT( NUPRODUCTID );
      END IF;
      UT_TRACE.TRACE( 'FIN - OR_boLegalActProdTypeStat.AnullSuspProduc', 15 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ANULLSUSPPRODUC;
   PROCEDURE ANULLPRODUCTRECONNECT( INUPRODUCTID IN OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE, INUORDERACTIVITYID IN OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE )
    IS
    BEGIN
      PKERRORS.SETAPPLICATION( SUBSTR( UT_SESSION.GETPROGRAM, 1, 10 ) );
      PKSUSPCONNSERVICEMGR.CHANGETOPREVSUSPSTATUS( INUPRODUCTID, INUORDERACTIVITYID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ANULLPRODUCTRECONNECT;
   PROCEDURE ANULLPRODUCTRECONNECT( IRCORDERACTIVITY IN OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES, INUORDERID IN OR_ORDER.ORDER_ID%TYPE, INUCAUSAL IN GE_CAUSAL.CAUSAL_ID%TYPE )
    IS
    BEGIN
      IF DAOR_ORDER_REGEN.FBLEXIST( IRCORDERACTIVITY.NUTASKTYPE, INUCAUSAL ) THEN
         RETURN;
      END IF;
      OR_BOLEGALACTPRODTYPESTAT.ANULLPRODUCTRECONNECT( IRCORDERACTIVITY.NUPRODUCTID, IRCORDERACTIVITY.NUORDERACTIVITY );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ANULLPRODUCTRECONNECT;
   PROCEDURE ANULLPRODUCTRETIRE( IRCORDERACTIVITY IN OR_BCORDERACTIVITIES.TYRCORDERACTIVITIES, INUORDERID IN OR_ORDER.ORDER_ID%TYPE, INUCAUSAL IN GE_CAUSAL.CAUSAL_ID%TYPE )
    IS
    BEGIN
      IF DAOR_ORDER_REGEN.FBLEXIST( IRCORDERACTIVITY.NUTASKTYPE, INUCAUSAL ) THEN
         RETURN;
      END IF;
      PKERRORS.SETAPPLICATION( UT_SESSION.GETPROGRAM );
      PKSUSPCONNSERVICEMGR.CHANGETOPREVSUSPSTATUS( IRCORDERACTIVITY.NUPRODUCTID, IRCORDERACTIVITY.NUORDERACTIVITY );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END ANULLPRODUCTRETIRE;
END OR_BOLEGALACTPRODTYPESTAT;
/


