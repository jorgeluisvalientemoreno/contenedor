PACKAGE BODY CC_BCProductDamage
IS
    


















    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO379952';

    
    
    

    
    
    

    
    
    

    


















    FUNCTION FBOATTENDWITHLEGALORD
    (
        INUORDERID      IN  OR_ORDER_ACTIVITY.ORDER_ID%TYPE,
        INUPACKAGEID    IN  OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE
    )
    RETURN BOOLEAN IS

        TBORDERACTIVITIES DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF CUACTIDAMAPRODBYORDER%ISOPEN THEN
                CLOSE CUACTIDAMAPRODBYORDER;
            END IF;

            IF (CUOPENACTIBYPACK%ISOPEN) THEN
                CLOSE CUOPENACTIBYPACK;
            END IF;
        END;
    BEGIN

        UT_TRACE.TRACE('Inicia CC_BCProductDamage.fboAttendWithLegalOrd',15);

        CLOSECURSORS;
        TBORDERACTIVITIES.DELETE;
        OPEN CUACTIDAMAPRODBYORDER(INUORDERID);
        FETCH CUACTIDAMAPRODBYORDER BULK COLLECT INTO TBORDERACTIVITIES LIMIT 2;
        CLOSECURSORS;

        
        IF TBORDERACTIVITIES.COUNT = 0 THEN
            TBORDERACTIVITIES.DELETE;
            UT_TRACE.TRACE('Finaliza CC_BCProductDamage.fboAttendWithLegalOrd[FALSE]',15);
            RETURN FALSE;
        END IF;

        TBORDERACTIVITIES.DELETE;

        OPEN CUOPENACTIBYPACK(INUPACKAGEID);
        FETCH CUOPENACTIBYPACK BULK COLLECT INTO TBORDERACTIVITIES LIMIT 2;
        CLOSECURSORS;

        IF (TBORDERACTIVITIES.COUNT > 0) THEN
            TBORDERACTIVITIES.DELETE;
            UT_TRACE.TRACE('Finaliza CC_BCProductDamage.fboAttendWithLegalOrd[FALSE]',15);
            RETURN FALSE;
        END IF;

        UT_TRACE.TRACE('Finaliza CC_BCProductDamage.fboAttendWithLegalOrd[TRUE]',15);
        RETURN TRUE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            TBORDERACTIVITIES.DELETE;
            CLOSECURSORS;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            TBORDERACTIVITIES.DELETE;
            CLOSECURSORS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOATTENDWITHLEGALORD;
    
    


























    PROCEDURE GETDAMAGEDATAFROMORDER
    (
        INUORDERID         IN  OR_ORDER_ACTIVITY.ORDER_ID%TYPE,
        ONUPACKAGEID       OUT TT_DAMAGE_PRODUCT.PACKAGE_ID%TYPE,
        ONUPRODUCTID       OUT TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE,
        ONUACTIVITYORDERID OUT OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        ONUPRODUCTTYPEID   OUT SERVICIO.SERVCODI%TYPE
    )
    IS
        CSBFINISHSTATUS CONSTANT VARCHAR2(1) := OR_BOCONSTANTS.CSBFINISHSTATUS;
        ONUMAINACTID    PS_PACKAGE_ACTIVITIES.ITEMS_ID%TYPE;

        CURSOR CUGETPACKAGESBYORDER
        IS
        SELECT  /*+ ordered
                    index(or_order_activity IDX_OR_ORDER_ACTIVITY_05 )
                    index(mo_packages PK_MO_PACKAGES) */
            DISTINCT OR_ORDER_ACTIVITY.PACKAGE_ID
        FROM    OR_ORDER_ACTIVITY,
                MO_PACKAGES
            /*+  CC_BCProductDamage.GetDamageDataFromOrder */
        WHERE   OR_ORDER_ACTIVITY.ORDER_ID = INUORDERID
        AND     OR_ORDER_ACTIVITY.STATUS <> CSBFINISHSTATUS
        AND     MO_PACKAGES.PACKAGE_ID = OR_ORDER_ACTIVITY.PACKAGE_ID
        AND     MO_PACKAGES.PACKAGE_TYPE_ID = TT_BOCONSTANTS.CNUINDDAMAGE;

        CURSOR CUGETORDERSBYPACKAGE(INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE)
        IS
        SELECT  /*+ index(or_order_activity IDX_OR_ORDER_ACTIVITY_06 ) */
                ORDER_ID
                /*+  CC_BCProductDamage.GetDamageDataFromOrder */
        FROM    OR_ORDER_ACTIVITY
        WHERE   OR_ORDER_ACTIVITY.PACKAGE_ID = INUPACKAGEID
        AND     OR_ORDER_ACTIVITY.ORDER_ID != INUORDERID
        AND     OR_ORDER_ACTIVITY.STATUS <> CSBFINISHSTATUS;

        TBORDERACTIVITIES   DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;
        RCORDERACTIVITIES   DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        TBPACKAGEID         DAMO_PACKAGES.TYTBPACKAGE_ID;
        NUORDERID           OR_ORDER_ACTIVITY.ORDER_ID%TYPE;

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF CUACTIDAMAPRODBYORDER%ISOPEN THEN
                CLOSE CUACTIDAMAPRODBYORDER;
            END IF;

            IF (CUGETPACKAGESBYORDER%ISOPEN) THEN
                CLOSE CUGETPACKAGESBYORDER;
            END IF;

            IF (CUGETORDERSBYPACKAGE%ISOPEN) THEN
                CLOSE CUGETORDERSBYPACKAGE;
            END IF;
        END;
    BEGIN

        UT_TRACE.TRACE('Inicia CC_BCProductDamage.GetDamageDataFromOrder',15);

        CLOSECURSORS;

        
        TBPACKAGEID.DELETE;
        OPEN CUGETPACKAGESBYORDER;
        FETCH CUGETPACKAGESBYORDER BULK COLLECT INTO TBPACKAGEID;
        CLOSECURSORS;

        IF (TBPACKAGEID.COUNT != 1 ) THEN
            UT_TRACE.TRACE('La Orden tiene ['||TBPACKAGEID.COUNT||'] paquetes',15);
            TBPACKAGEID.DELETE;
            RETURN;
        END IF;

        OPEN CUGETORDERSBYPACKAGE(TBPACKAGEID(TBPACKAGEID.FIRST));
        FETCH CUGETORDERSBYPACKAGE INTO NUORDERID;

        IF (CUGETORDERSBYPACKAGE%FOUND) THEN
            UT_TRACE.TRACE('El paquete tiene mas ordenes',15);
            CLOSECURSORS;
            RETURN;
        END IF;

        TBORDERACTIVITIES.DELETE;
        OPEN CUACTIDAMAPRODBYORDER(INUORDERID);
        FETCH CUACTIDAMAPRODBYORDER BULK COLLECT INTO TBORDERACTIVITIES LIMIT 2;
        CLOSECURSORS;

        
        
        IF TBORDERACTIVITIES.COUNT = 0 THEN
            UT_TRACE.TRACE('Finaliza CC_BCProductDamage.GetDamageDataFromOrder',15);
            RETURN;
        END IF;

        RCORDERACTIVITIES := TBORDERACTIVITIES(TBORDERACTIVITIES.FIRST);
        TBORDERACTIVITIES.DELETE;
        
        IF (RCORDERACTIVITIES.PACKAGE_ID IS NOT NULL) THEN
            BEGIN
                
                PS_BOPACKAGE_ACTIVITIES.GETACTIVITYBYPACKAGE
                (
                    RCORDERACTIVITIES.PACKAGE_ID,
                    ONUMAINACTID
                );

                
                
                IF (ONUMAINACTID != RCORDERACTIVITIES.ACTIVITY_ID) THEN
                    RETURN;
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    RETURN;
            END;
        END IF;

        ONUACTIVITYORDERID := RCORDERACTIVITIES.ORDER_ACTIVITY_ID;
        ONUPACKAGEID := RCORDERACTIVITIES.PACKAGE_ID;
        ONUPRODUCTID := RCORDERACTIVITIES.PRODUCT_ID;
        ONUPRODUCTTYPEID := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(ONUPRODUCTID);

        UT_TRACE.TRACE('onuActivityOrderId:['||ONUACTIVITYORDERID||']',16);
        UT_TRACE.TRACE('onuPackageId:['||ONUPACKAGEID||']',16);
        UT_TRACE.TRACE('onuProductId:['||ONUPRODUCTID||']',16);
        UT_TRACE.TRACE('onuProductTypeId:['||ONUPRODUCTTYPEID||']',16);

        UT_TRACE.TRACE('Finaliza CC_BCProductDamage.GetDamageDataFromOrder',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            TBORDERACTIVITIES.DELETE;
            CLOSECURSORS;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            TBORDERACTIVITIES.DELETE;
            CLOSECURSORS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETDAMAGEDATAFROMORDER;
    
    




















    FUNCTION FRCTIMEOUTBYPACKAGEID
    (
        INUPACKAGEID       IN  PR_TIMEOUT_COMPONENT.PACKAGE_ID%TYPE
    )
    RETURN DAPR_TIMEOUT_COMPONENT.STYPR_TIMEOUT_COMPONENT
    IS
        RCTIMEOUTCOMP     DAPR_TIMEOUT_COMPONENT.STYPR_TIMEOUT_COMPONENT;
        
        CURSOR CUGETTIMEOUTBYPACKAGE
        IS
        SELECT  /*+ INDEX(PR_timeout_component IX_PR_TIMEOUT_COMPONENT05)
                    INDEX(mo_packages IDX_MO_PACKAGES_026)
                    INDEX(ps_motive_status PK_PS_MOTIVE_STATUS)
                */
                PR_TIMEOUT_COMPONENT.*,PR_TIMEOUT_COMPONENT.ROWID
        FROM    PR_TIMEOUT_COMPONENT,
                MO_PACKAGES,
                PS_MOTIVE_STATUS
                /*+  CC_BCProductDamage.frcTimeOutByPackageId */
        WHERE   PR_TIMEOUT_COMPONENT.PACKAGE_ID = INUPACKAGEID
        AND     PR_TIMEOUT_COMPONENT.COMPONENT_ID IS NULL
        AND     PR_TIMEOUT_COMPONENT.COMPENSATED_TIME IS NULL
        AND     PR_TIMEOUT_COMPONENT.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
        AND     MO_PACKAGES.PACKAGE_TYPE_ID = TT_BOCONSTANTS.CNUINDDAMAGE
        AND     MO_PACKAGES.MOTIVE_STATUS_ID = PS_MOTIVE_STATUS.MOTIVE_STATUS_ID
        AND     PS_MOTIVE_STATUS.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO;
        

    BEGIN

        UT_TRACE.TRACE('Inicia CC_BCProductDamage.frcTimeOutByPackageId',15);

        IF CUGETTIMEOUTBYPACKAGE%ISOPEN THEN
            CLOSE CUGETTIMEOUTBYPACKAGE;
        END IF;

        OPEN CUGETTIMEOUTBYPACKAGE;
        FETCH CUGETTIMEOUTBYPACKAGE INTO RCTIMEOUTCOMP;
        CLOSE CUGETTIMEOUTBYPACKAGE;

        UT_TRACE.TRACE('Finaliza CC_BCProductDamage.frcTimeOutByPackageId',15);
        RETURN RCTIMEOUTCOMP;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUGETTIMEOUTBYPACKAGE%ISOPEN THEN
                CLOSE CUGETTIMEOUTBYPACKAGE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUGETTIMEOUTBYPACKAGE%ISOPEN THEN
                CLOSE CUGETTIMEOUTBYPACKAGE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRCTIMEOUTBYPACKAGEID;
    
    



















    FUNCTION FBOISDAMAGEABSORBED
    (
        INUPACKAGEID        IN  PR_TIMEOUT_COMPONENT.PACKAGE_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        BOISDMGABSORBED     BOOLEAN := TRUE;
        RCDMGASSO           MO_PACKAGES_ASSO%ROWTYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia CC_BCProductDamage.fboIsDamageAbsorbed',15);

        IF TT_BCDAMAGE.CUGETDAMAGEASSO%ISOPEN THEN
            CLOSE TT_BCDAMAGE.CUGETDAMAGEASSO;
        END IF;

        OPEN TT_BCDAMAGE.CUGETDAMAGEASSO(INUPACKAGEID);
        FETCH TT_BCDAMAGE.CUGETDAMAGEASSO INTO RCDMGASSO;
        IF TT_BCDAMAGE.CUGETDAMAGEASSO%NOTFOUND THEN
            BOISDMGABSORBED := FALSE;
        END IF;
        CLOSE TT_BCDAMAGE.CUGETDAMAGEASSO;

        UT_TRACE.TRACE('Finaliza CC_BCProductDamage.fboIsDamageAbsorbed',15);
        RETURN BOISDMGABSORBED;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF TT_BCDAMAGE.CUGETDAMAGEASSO%ISOPEN THEN
                CLOSE TT_BCDAMAGE.CUGETDAMAGEASSO;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF TT_BCDAMAGE.CUGETDAMAGEASSO%ISOPEN THEN
                CLOSE TT_BCDAMAGE.CUGETDAMAGEASSO;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOISDAMAGEABSORBED;
    
    




















    FUNCTION FRCFORAPPRTIMEOUT
    (
        INUPACKAGEID        IN  PR_TIMEOUT_COMPONENT.PACKAGE_ID%TYPE
    )
    RETURN PR_TIMEOUT_COMPONENT%ROWTYPE
    IS
        RCTIMEOUTCOMP       PR_TIMEOUT_COMPONENT%ROWTYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia CC_BCProductDamage.frcForApprTimeout',15);

        IF CC_BCPRODUCTDAMAGE.CUFORAPPROVALTIMEOUT%ISOPEN THEN
            CLOSE CC_BCPRODUCTDAMAGE.CUFORAPPROVALTIMEOUT;
        END IF;

        OPEN CC_BCPRODUCTDAMAGE.CUFORAPPROVALTIMEOUT(INUPACKAGEID);
        FETCH CC_BCPRODUCTDAMAGE.CUFORAPPROVALTIMEOUT INTO RCTIMEOUTCOMP;
        CLOSE CC_BCPRODUCTDAMAGE.CUFORAPPROVALTIMEOUT;

        UT_TRACE.TRACE('Finaliza CC_BCProductDamage.frcForApprTimeout',15);
        RETURN RCTIMEOUTCOMP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CC_BCPRODUCTDAMAGE.CUFORAPPROVALTIMEOUT%ISOPEN THEN
                CLOSE CC_BCPRODUCTDAMAGE.CUFORAPPROVALTIMEOUT;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CC_BCPRODUCTDAMAGE.CUFORAPPROVALTIMEOUT%ISOPEN THEN
                CLOSE CC_BCPRODUCTDAMAGE.CUFORAPPROVALTIMEOUT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRCFORAPPRTIMEOUT;

    













    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

END CC_BCPRODUCTDAMAGE;