PACKAGE BODY pkBCElemMedi
IS



















































































































    
    
    
    
    
    CSBVERSION   CONSTANT VARCHAR2(250) := 'SAO203366';
    
    CNUMSGMEASELEMNOTEXIST      CONSTANT MENSAJE.MENSCODI%TYPE   := 10008;

    
    CNUNO_AREACOMUN   CONSTANT NUMBER := 20000;

    
    CNUELEMENTO_ASOC  CONSTANT NUMBER := 20001;

    
    CNURECORD_YA_EXISTE                CONSTANT NUMBER :=10010;
    
    
    CNUREGISTERQUANTITY      NUMBER := 100;
    
    
    CNUCOMP_PEND_INST     CONSTANT NUMBER := PR_BOCONSTANTS.CNUCOMP_PEND_INST;
    CNUCOMP_RETIRE        CONSTANT NUMBER := PR_BOCONSTANTS.CNUCOMP_RETIRE;
    CNUCOMP_UNINSTALL_RET CONSTANT NUMBER := PR_BOCONSTANTS.CNUCOMP_UNINSTALL_RET;

    
    
    

    SBERRMSG	  GE_ERROR_LOG.DESCRIPTION%TYPE;   
    BLISLOADED    BOOLEAN:=FALSE ;	    
    
    GTBROWID           TYELEMMEDIROWID          ;
    GTBELMEPOSI        PKTBLELEMMEDI.TYELMEPOSI ;
    GTBELMEFACM        PKTBLELEMMEDI.TYELMEFACM ;
    GTBELMEFACD        PKTBLELEMMEDI.TYELMEFACD ;
    GTBELMETOPE        PKTBLELEMMEDI.TYELMETOPE ;
    GTBELMEIDEM        PKTBLELEMMEDI.TYELMEIDEM ;
    GTBELMECODI        PKTBLELEMMEDI.TYELMECODI ;
    GTBELMECLEM        PKTBLELEMMEDI.TYELMECLEM ;
    GTBELMENUDC        PKTBLELEMMEDI.TYELMENUDC ;
    GTBELMEUIEM        PKTBLELEMMEDI.TYELMEUIEM ;
    GTBGAMAID          DAGE_ITEMS_GAMA.TYTBID_ITEMS_GAMA;

    
    
    

    
    
    

























FUNCTION FSBVERSION
RETURN VARCHAR2
IS

BEGIN


    PKERRORS.PUSH ('pkBCElemMedi.fsbVersion');

    PKERRORS.POP;

    
    RETURN ( CSBVERSION );

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FSBVERSION;
































PROCEDURE UPMEASUREMENTELEMEN
(
    INUIDELEM           ELEMMEDI.ELMEIDEM%TYPE,
    ISBCODIELEM         ELEMMEDI.ELMECODI%TYPE,
    INUCLASELEM         ELEMMEDI.ELMECLEM%TYPE,
    INUNUMEDIGI         ELEMMEDI.ELMENUDC%TYPE,
    INUUBICINST         ELEMMEDI.ELMEUIEM%TYPE,
    INUPOSICION         ELEMMEDI.ELMEPOSI%TYPE,
    INUFACTCONV         ELEMMEDI.ELMEFACM%TYPE,
    INUFACTDEMA         ELEMMEDI.ELMEFACD%TYPE,
    INUTOPE             ELEMMEDI.ELMETOPE%TYPE
)
IS
BEGIN

    PKERRORS.PUSH('UpMeasurementElemen.UpMeasurementElemen');

    UPDATE ELEMMEDI
    SET ELMEIDEM = INUIDELEM,
        ELMECODI = ISBCODIELEM,
        ELMECLEM = INUCLASELEM,
        ELMENUDC = INUNUMEDIGI,
        ELMEUIEM = INUUBICINST,
        ELMEPOSI = INUPOSICION,
        ELMEFACM = INUFACTCONV,
        ELMEFACD = INUFACTDEMA,
        ELMETOPE = INUTOPE
    WHERE ELMEIDEM = INUIDELEM;

    
    IF ( SQL%ROWCOUNT = 0 ) THEN

        PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION,
                                PKCONSTANTE.CSBMOD_EME,
                                CNUMSGMEASELEMNOTEXIST);
        RAISE LOGIN_DENIED;

    END IF;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;

        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END UPMEASUREMENTELEMEN;




















PROCEDURE GETMEASELEMENTBYEMAC
(
   INUIDELEM   IN  ELEMMEDI.ELMEIDEM%TYPE,
   OTBELMEIDEM OUT PKTBLELEMMEDI.TYELMEIDEM
) IS

    CURSOR CUELEMMEDI IS
    SELECT /*+ INDEX(elemmedi ix_elemmedi03) */
           ELMEIDEM
      FROM ELEMMEDI
     WHERE ELMEEMAC = INUIDELEM;

BEGIN

    PKERRORS.PUSH('pkBCElemMedi.GetMeasElementbyEMAC');

    GTBELMEIDEM.DELETE;
    
    
    OPEN CUELEMMEDI;

    FETCH CUELEMMEDI BULK COLLECT INTO GTBELMEIDEM;

    CLOSE CUELEMMEDI;
    
    OTBELMEIDEM := GTBELMEIDEM;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;

        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END GETMEASELEMENTBYEMAC;





















PROCEDURE UPDMEASELEMENT
    (
	   ITBMEASELEM IN TYMEASELEM
	)
IS
BEGIN
    PKERRORS.PUSH('pkBCElemMedi.updMeasElement');
    
    IF ( ITBMEASELEM.FIRST IS NOT NULL ) THEN

    FOR IDX IN ITBMEASELEM.FIRST .. ITBMEASELEM.LAST LOOP
    
        UPDATE ELEMMEDI
        SET ELMEEMAC = ITBMEASELEM(IDX).ELMEEMAC
        WHERE ELMEIDEM = ITBMEASELEM(IDX).ELMEIDEM;
    
    END LOOP;

    END IF;

    IF (SQL%ROWCOUNT = 0) THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    END IF;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END UPDMEASELEMENT;


























PROCEDURE VALMEASELEMBYCOMMONAREA
    (
       INELMECODI  IN  ELEMMEDI.ELMECODI%TYPE
    )
IS
    
    
    CURSOR CUELEMMEASURE IS
        SELECT /*+ index(elemmedi UX_ELME_CODI) */ ELMEIDEM
             ELMEIDEM
        FROM ELEMMEDI
            /*+ pkBCElemmedi.ValMeasElembyCommonArea SAO203366 */
        WHERE ELMECODI = INELMECODI
        AND EXISTS (SELECT /*+ index(e2 IX_ELEMMEDI03) */
                         'X'
                    FROM ELEMMEDI E2
                    WHERE ELEMMEDI.ELMEIDEM = E2.ELMEEMAC);

    NUELEMMEASURE ELEMMEDI.ELMEIDEM%TYPE;

BEGIN
    PKERRORS.PUSH ('pkBCElemmedi.ValMeasElembyCommonArea');

    IF CUELEMMEASURE%ISOPEN THEN
        CLOSE CUELEMMEASURE;
    END IF;

    OPEN CUELEMMEASURE;
    FETCH CUELEMMEASURE INTO NUELEMMEASURE;

    IF NUELEMMEASURE IS NULL THEN
        PKERRORS.SETERRORCODE(
                              PKCONSTANTE.CSBDIVISION,
                              PKCONSTANTE.CSBMOD_BIL,
                              CNUNO_AREACOMUN
                              );
        CLOSE CUELEMMEASURE;

        RAISE LOGIN_DENIED;
    END IF;

    CLOSE CUELEMMEASURE;
    PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        IF CUELEMMEASURE%ISOPEN THEN
            CLOSE CUELEMMEASURE;
        END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF CUELEMMEASURE%ISOPEN THEN
            CLOSE CUELEMMEASURE;
        END IF;
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        IF CUELEMMEASURE%ISOPEN THEN
            CLOSE CUELEMMEASURE;
        END IF;
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALMEASELEMBYCOMMONAREA;


























PROCEDURE VALASSOCMEASELEM
    (
       INELMECODI  IN  ELEMMEDI.ELMECODI%TYPE
    )
IS
    
    
    
    CURSOR CUASSOCMEASUREELEM
    IS
        SELECT ELMEIDEM
        FROM ELEMMEDI, ELMESESU
        WHERE EMSSELME = ELMEIDEM
        AND NOT EXISTS (SELECT /*+ index(e2 IX_ELEMMEDI03) */
                              'X'
                        FROM ELEMMEDI E2
                        WHERE ELEMMEDI.ELMEIDEM = E2.ELMEEMAC )
        AND ELMECODI = INELMECODI
        AND EMSSFEIN <= SYSDATE
        AND EMSSFERE > SYSDATE
        AND ELMEEMAC IS NULL
        ORDER BY EMSSFEIN DESC;

    NUASSOCMEASUREELEM ELEMMEDI.ELMEIDEM%TYPE;

BEGIN
    PKERRORS.PUSH ('pkBCElemmedi.ValAssocMeasElem');

    IF CUASSOCMEASUREELEM%ISOPEN THEN
        CLOSE CUASSOCMEASUREELEM;
    END IF;

    OPEN CUASSOCMEASUREELEM;
    FETCH CUASSOCMEASUREELEM INTO NUASSOCMEASUREELEM;

    IF NUASSOCMEASUREELEM IS NULL THEN
        PKERRORS.SETERRORCODE(
                              PKCONSTANTE.CSBDIVISION,
                              PKCONSTANTE.CSBMOD_BIL,
                              CNUELEMENTO_ASOC
                              );
        CLOSE CUASSOCMEASUREELEM;

        RAISE LOGIN_DENIED;
    END IF;

    CLOSE CUASSOCMEASUREELEM;
    PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        IF CUASSOCMEASUREELEM%ISOPEN THEN
            CLOSE CUASSOCMEASUREELEM;
        END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF CUASSOCMEASUREELEM%ISOPEN THEN
            CLOSE CUASSOCMEASUREELEM;
        END IF;
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        IF CUASSOCMEASUREELEM%ISOPEN THEN
            CLOSE CUASSOCMEASUREELEM;
        END IF;
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END VALASSOCMEASELEM;


























FUNCTION FNUGETSUBSSERVBYMEASELEM
    (
       INELMECODI  IN  ELEMMEDI.ELMECODI%TYPE
    )
RETURN  ELMESESU.EMSSSESU%TYPE
IS
    
    NUSERVSUSC  ELMESESU.EMSSSESU%TYPE;

    
    DTFECHAACTUAL   DATE := SYSDATE;
BEGIN
    PKERRORS.PUSH('pkBCElemmedi.fnuGetSubsServByMeasElem');

    
    
    NUSERVSUSC := PKMEASELEMSUBSSERVMGR.FNUGETSUBSSERVBYMEASELEMCURR
                                            (
                                                INELMECODI,
                                                DTFECHAACTUAL
                                             );

    PKERRORS.POP;

    RETURN  (NUSERVSUSC);

EXCEPTION
        WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FNUGETSUBSSERVBYMEASELEM;





























FUNCTION FNUGETIDENTMEASELEM
    (
        INELMECODI  IN  ELEMMEDI.ELMECODI%TYPE
    )
    RETURN  ELEMMEDI.ELMEIDEM%TYPE
IS
    
    CURSOR CUELEMENT IS
    SELECT ELMEIDEM
    FROM ELEMMEDI
    WHERE ELMECODI = INELMECODI;

    
    NUIDENELEM  ELEMMEDI.ELMEIDEM%TYPE;
BEGIN

    PKERRORS.PUSH('pkBCElemmedi.fnuGetIdentMeasElem');

    IF CUELEMENT%ISOPEN THEN
        CLOSE CUELEMENT;
    END IF;

    OPEN CUELEMENT;
    FETCH CUELEMENT INTO NUIDENELEM;

    IF (CUELEMENT%NOTFOUND) THEN
        CLOSE CUELEMENT;
        PKERRORS.POP;
        PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUMSGMEASELEMNOTEXIST );
        RAISE LOGIN_DENIED;
    END IF;

    CLOSE CUELEMENT;
    PKERRORS.POP;

    RETURN (NUIDENELEM);

EXCEPTION
        WHEN LOGIN_DENIED THEN
        IF CUELEMENT%ISOPEN THEN
            CLOSE CUELEMENT;
        END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF CUELEMENT%ISOPEN THEN
            CLOSE CUELEMENT;
        END IF;
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        IF CUELEMENT%ISOPEN THEN
            CLOSE CUELEMENT;
        END IF;
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FNUGETIDENTMEASELEM;

























PROCEDURE VALDUPLIELEMASSOC
    (
        INELMECODI  IN  ELEMMEDI.ELMECODI%TYPE,
        INELMEEMAC  IN  ELEMMEDI.ELMEEMAC%TYPE
    )
IS
    CURSOR CUDUPLIELEM IS
        SELECT ELMEIDEM
        FROM ELEMMEDI
        WHERE ELMECODI = INELMECODI
        AND   ELMEEMAC = INELMEEMAC;

    NUIDENELEM  ELEMMEDI.ELMEIDEM%TYPE;
BEGIN
    PKERRORS.PUSH('pkBCElemmedi.ValDupliElemAssoc');

    IF CUDUPLIELEM%ISOPEN THEN
        CLOSE CUDUPLIELEM;
    END IF;

    OPEN CUDUPLIELEM;
    FETCH CUDUPLIELEM INTO NUIDENELEM;

    IF NUIDENELEM IS NOT NULL THEN
        CLOSE CUDUPLIELEM;
        PKERRORS.POP;
        PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNURECORD_YA_EXISTE );
        RAISE LOGIN_DENIED;
    END IF;

    CLOSE CUDUPLIELEM;
    PKERRORS.POP;

EXCEPTION
        WHEN LOGIN_DENIED THEN
        IF CUDUPLIELEM%ISOPEN THEN
            CLOSE CUDUPLIELEM;
        END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF CUDUPLIELEM%ISOPEN THEN
            CLOSE CUDUPLIELEM;
        END IF;
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        IF CUDUPLIELEM%ISOPEN THEN
            CLOSE CUDUPLIELEM;
        END IF;
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END VALDUPLIELEMASSOC;





























FUNCTION FNUGETMEASCLASS
(
    INUELMEIDEM  IN  ELEMMEDI.ELMEIDEM%TYPE
)
RETURN  ELEMMEDI.ELMECLEM%TYPE
IS
    
    CURSOR CUELEMENT IS
    SELECT ELMECLEM
    FROM ELEMMEDI
    WHERE ELMEIDEM = INUELMEIDEM;

    
    NUCLASSELEM  ELEMMEDI.ELMECLEM%TYPE;
BEGIN

    PKERRORS.PUSH('pkBCElemmedi.fnuGetMeasClass');

    IF CUELEMENT%ISOPEN THEN
    
        CLOSE CUELEMENT;
    
    END IF;

    OPEN CUELEMENT;
    FETCH CUELEMENT INTO NUCLASSELEM;

    CLOSE CUELEMENT;
    PKERRORS.POP;

    RETURN (NUCLASSELEM);

EXCEPTION
        WHEN LOGIN_DENIED THEN
        IF CUELEMENT%ISOPEN THEN
            CLOSE CUELEMENT;
        END IF;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF CUELEMENT%ISOPEN THEN
            CLOSE CUELEMENT;
        END IF;
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        IF CUELEMENT%ISOPEN THEN
            CLOSE CUELEMENT;
        END IF;
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FNUGETMEASCLASS;



























    FUNCTION FBLMEASISGENERAL
    (
        INUELMEIDEM  IN  ELEMMEDI.ELMEIDEM%TYPE
    )
    RETURN BOOLEAN
    IS
        BLISGENERAL BOOLEAN;
        NUELEMENT   ELEMMEDI.ELMEIDEM%TYPE;

        CURSOR CUISGENERAL IS
        SELECT ELMEIDEM
        FROM ELEMMEDI
        WHERE ELMEEMAC=INUELMEIDEM;

    BEGIN
        PKERRORS.PUSH('pkBCElemMedi.fblMeasIsGeneral');

        BLISGENERAL:=FALSE;

        IF (CUISGENERAL%ISOPEN)THEN
           CLOSE CUISGENERAL;
        END IF;

        OPEN CUISGENERAL;
        FETCH CUISGENERAL INTO NUELEMENT;
        
        IF (NUELEMENT IS NOT NULL) THEN
           BLISGENERAL:=TRUE;
        END IF;
        
        RETURN BLISGENERAL;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    END FBLMEASISGENERAL;



























PROCEDURE UPCOMMONAREAMEASELEM
(
    INUELMEIDEMR    IN  ELEMMEDI.ELMEIDEM%TYPE,
    INUELMEIDEMI    IN  ELEMMEDI.ELMEIDEM%TYPE
)
IS
BEGIN
    PKERRORS.PUSH('pkBCElemMedi.UpCommonAreaMeasElem');

    UPDATE ELEMMEDI
    SET ELMEEMAC = INUELMEIDEMI
    WHERE ELMEEMAC = INUELMEIDEMR;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END UPCOMMONAREAMEASELEM;






























FUNCTION FBOVALEXISTELMECODI
(
    INUELMEIDEM     IN  ELEMMEDI.ELMEIDEM%TYPE,
    ISBELMECODI     IN  ELEMMEDI.ELMECODI%TYPE
) RETURN BOOLEAN
IS
    
    
    BORETORNO   BOOLEAN := FALSE;

    
    NUCANTIDAD  NUMBER := 0;
BEGIN
    PKERRORS.PUSH('pkBCElemMedi.fboValExistElmeCodi');
    UT_TRACE.TRACE('Inicio [pkBCElemMedi.fboValExistElmeCodi]', 15);

    
    
    SELECT  COUNT(ELMEIDEM)
    INTO    NUCANTIDAD
    FROM    ELEMMEDI
    WHERE   ELMECODI = ISBELMECODI
    AND     ELMEIDEM <> INUELMEIDEM;

    
    IF (NUCANTIDAD > 0) THEN
        
        BORETORNO := TRUE;
    END IF;

    
    UT_TRACE.TRACE('Fin [pkBCElemMedi.fboValExistElmeCodi]', 15);
    PKERRORS.POP;

    
    RETURN (BORETORNO);
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        PKERRORS.POP;
        RAISE;

    WHEN OTHERS THEN
        PKERRORS.POP;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END FBOVALEXISTELMECODI;
































PROCEDURE GETELEMMEDIBYPRODUCT
(
    INUPRODUCTID     IN         PR_PRODUCT.PRODUCT_ID%TYPE,
    IDTFINALCONSDATE IN         PERICOSE.PECSFECF%TYPE,
    OTBELEMMEDI      OUT NOCOPY TYRCTBELEMMEDI
)
IS
    CURSOR CUELEMMEDI
    IS
        SELECT
               /*+ leading(elmesesu)
                   use_nl(elmesesu elemmedi) */
              ELEMMEDI.ROWID ,
              ELEMMEDI.ELMEPOSI ,
              ELEMMEDI.ELMEFACM ,
              ELEMMEDI.ELMEFACD ,
              ELEMMEDI.ELMETOPE ,
              ELEMMEDI.ELMEIDEM ,
              ELEMMEDI.ELMECODI ,
              ELEMMEDI.ELMECLEM ,
              ELEMMEDI.ELMENUDC ,
              ELEMMEDI.ELMEUIEM ,
              GE_BCITEMS_GAMA_ITEM.FNUGETGAMMABYSERIE(ELEMMEDI.ELMECODI)
        FROM  ELMESESU,
              ELEMMEDI
              /*+ pkBCElemMedi.getElemMediByProduct SAO186913 */
        WHERE ELMESESU.EMSSSESU = INUPRODUCTID
          AND ELMESESU.EMSSFEIN <= IDTFINALCONSDATE
          AND ELMESESU.EMSSFERE > IDTFINALCONSDATE
          AND ELMESESU.EMSSELME = ELEMMEDI.ELMEIDEM
        ORDER BY ELEMMEDI.ELMEPOSI;
    
    PROCEDURE INIT
    IS
    BEGIN
        
        GTBROWID.DELETE          ;
        GTBELMEPOSI.DELETE       ;
        GTBELMEFACM.DELETE       ;
        GTBELMEFACD.DELETE       ;
        GTBELMETOPE.DELETE       ;
        GTBELMEIDEM.DELETE       ;
        GTBELMECODI.DELETE       ;
        GTBELMECLEM.DELETE       ;
        GTBELMENUDC.DELETE       ;
        GTBELMEUIEM.DELETE       ;
        GTBGAMAID.DELETE ;

        
        OTBELEMMEDI.TBROWID.DELETE          ;
        OTBELEMMEDI.TBELMEPOSI.DELETE       ;
        OTBELEMMEDI.TBELMEFACM.DELETE       ;
        OTBELEMMEDI.TBELMEFACD.DELETE       ;
        OTBELEMMEDI.TBELMETOPE.DELETE       ;
        OTBELEMMEDI.TBELMEIDEM.DELETE       ;
        OTBELEMMEDI.TBELMECODI.DELETE       ;
        OTBELEMMEDI.TBELMECLEM.DELETE       ;
        OTBELEMMEDI.TBELMENUDC.DELETE       ;
        OTBELEMMEDI.TBELMEUIEM.DELETE       ;
        OTBELEMMEDI.TBGAMAID.DELETE ;
    END INIT;
    
    PROCEDURE FILLOUTRECORD
    IS
    BEGIN
        
        OTBELEMMEDI.TBROWID          := GTBROWID          ;
        OTBELEMMEDI.TBELMEPOSI       := GTBELMEPOSI       ;
        OTBELEMMEDI.TBELMEFACM       := GTBELMEFACM       ;
        OTBELEMMEDI.TBELMEFACD       := GTBELMEFACD       ;
        OTBELEMMEDI.TBELMETOPE       := GTBELMETOPE       ;
        OTBELEMMEDI.TBELMEIDEM       := GTBELMEIDEM       ;
        OTBELEMMEDI.TBELMECODI       := GTBELMECODI       ;
        OTBELEMMEDI.TBELMECLEM       := GTBELMECLEM       ;
        OTBELEMMEDI.TBELMENUDC       := GTBELMENUDC       ;
        OTBELEMMEDI.TBELMEUIEM       := GTBELMEUIEM       ;
        OTBELEMMEDI.TBGAMAID := GTBGAMAID ;
    END FILLOUTRECORD;
    
BEGIN
    
    INIT;
    
    OPEN CUELEMMEDI ;
    FETCH CUELEMMEDI  BULK COLLECT INTO GTBROWID          ,
                                        GTBELMEPOSI       ,
                                        GTBELMEFACM       ,
                                        GTBELMEFACD       ,
                                        GTBELMETOPE       ,
                                        GTBELMEIDEM       ,
                                        GTBELMECODI       ,
                                        GTBELMECLEM       ,
                                        GTBELMENUDC       ,
                                        GTBELMEUIEM       ,
                                        GTBGAMAID ;
    CLOSE CUELEMMEDI ;

    
    FILLOUTRECORD;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF (CUELEMMEDI%ISOPEN) THEN
            CLOSE CUELEMMEDI;
        END IF;
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        IF (CUELEMMEDI%ISOPEN) THEN
            CLOSE CUELEMMEDI;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END GETELEMMEDIBYPRODUCT;

    














    FUNCTION FBLISTELEMETERED
    (
        INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE
    )
    RETURN BOOLEAN
    IS
        NUELMECLEM ELEMMEDI.ELMECLEM%TYPE;
        RESULT     BOOLEAN;
    BEGIN
        RESULT := FALSE;
        IF (INUELMEIDEM IS NOT NULL) THEN
            NUELMECLEM := PKTBLELEMMEDI.FNUGETELMECLEM(INUELMEIDEM);
            IF (NUELMECLEM IS NOT NULL) THEN
                IF (NUELMECLEM = CM_BCCONSTANTS.CNUMEDIDOR_TELEMEDIDO) THEN
                    RESULT := TRUE;
                ELSIF (NUELMECLEM = CM_BCCONSTANTS.CNUMACRO_MED_TELEMEDIDO) THEN
                       RESULT := TRUE;
                END IF;
            END IF;
        END IF;

        RETURN RESULT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLISTELEMETERED;
    
    














    FUNCTION FBLISMACROMETER
    (
        INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE
    )
    RETURN BOOLEAN
    IS
        NUELMECLEM ELEMMEDI.ELMECLEM%TYPE;
        RESULT     BOOLEAN;
    BEGIN
        RESULT := FALSE;
        IF (INUELMEIDEM IS NOT NULL) THEN
            NUELMECLEM := PKTBLELEMMEDI.FNUGETELMECLEM(INUELMEIDEM);
            IF (NUELMECLEM IS NOT NULL) THEN
                IF (NUELMECLEM = CM_BCCONSTANTS.CNUMACRO_MEDIDOR) THEN
                    RESULT := TRUE;
                ELSIF (NUELMECLEM = CM_BCCONSTANTS.CNUMACRO_MED_TELEMEDIDO) THEN
                       RESULT := TRUE;
                END IF;
            END IF;
        END IF;

        RETURN RESULT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLISMACROMETER;

END PKBCELEMMEDI;