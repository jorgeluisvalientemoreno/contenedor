PACKAGE MO_BCSuspension
IS


































    
    
    

    
















    CURSOR CUPACKBYPRODSUSPTYP
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPTYPEID   IN  MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
    IS
    SELECT  /*+ ordered index(MO_MOTIVE IX_MO_SUSPENSION01) index(MO_SUSPENSION PK_MO_SUSPENSION)*/MO_MOTIVE.PACKAGE_ID
    FROM    MO_MOTIVE,
            MO_SUSPENSION
            /*+ Ubicaci�n: MO_BCSuspension.cuPackByProdSuspTyp SAO197538 */
    WHERE   MO_SUSPENSION.MOTIVE_ID = MO_MOTIVE.MOTIVE_ID
    AND     MO_SUSPENSION.SUSPENSION_TYPE_ID = INUSUSPTYPEID
    AND     (MO_SUSPENSION.ENDING_DATE IS NULL OR MO_SUSPENSION.ENDING_DATE > SYSDATE)
    AND     MO_MOTIVE.PRODUCT_ID = INUPRODUCTID
    AND     MO_MOTIVE.MOTIVE_STATUS_ID = 11;
    
    
















    CURSOR CUCOUNTREVSUSPBYPROD
    (
        INUPRODUCTID    IN  MO_MOTIVE.PRODUCT_ID%TYPE,
        INUDAYS         IN  NUMBER
    )
    IS
    SELECT  /*+ ordered
                use_nl(MO_MOTIVE MO_SUSPENSION)
                index(MO_MOTIVE IDX_MO_MOTIVE13)
                index(MO_SUSPENSION PK_MO_SUSPENSION)
            */
            COUNT(MO_SUSPENSION.MOTIVE_ID) TOTAL
    FROM    MO_MOTIVE,
            MO_SUSPENSION
    WHERE   MO_SUSPENSION.REGISTER_DATE BETWEEN SYSDATE - NVL(INUDAYS, 0) AND SYSDATE
    AND     MO_SUSPENSION.SUSPENSION_TYPE_ID IN
            (
                GE_BOCONSTANTS.CNUNOREVIEWALLOWED,
                GE_BOCONSTANTS.CNUNOREPAIRALLOWED,
                GE_BOCONSTANTS.CNUNOCERTIFALLOWED
            )
    AND     MO_SUSPENSION.MOTIVE_ID = MO_MOTIVE.MOTIVE_ID
    AND     MO_MOTIVE.PRODUCT_ID = INUPRODUCTID;

    

















    CURSOR CUSUSPREVIEWATTENTION
    (
        INUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
    SELECT  /*+
                ordered
                use_nl(mpa mot)
            */
            MOTIVE_ID
    FROM    MO_PACKAGES_ASSO MPA, MO_MOTIVE MOT
    WHERE   MPA.PACKAGE_ID= MOT.PACKAGE_ID
    AND     MOT.TAG_NAME= PS_BOPRODUCTMOTIVE.CSBTAGGENERSUSPEVOL
    AND     MPA.PACKAGE_ID_ASSO=INUPACKAGEID;
    
    





    CURSOR CUGETPENDPRODSUSPBYMOTITYPE
    (
        INUPRODUCTID           IN    MO_MOTIVE.PRODUCT_ID%TYPE,
        INUMOTIVETYPEID        IN    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUSUSPENSIONTYPEID    IN    MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
    RETURN DAMO_SUSPENSION.STYMO_SUSPENSION;
            
    
    
    
    



    FUNCTION FSBVERSION  RETURN VARCHAR2;
    
    



















	FUNCTION FRFGETSUSPENSIONINFO
    (
        INUMOTIVEID    IN    MO_MOTIVE.MOTIVE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;
    
    






    FUNCTION FTBGETPENDPRODSUSPRECON
    (
        INUPRODUCTID           IN    MO_MOTIVE.PRODUCT_ID%TYPE,
        INUMOTIVETYPEID        IN    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUSUSPENSIONTYPEID    IN    MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN  DAMO_SUSPENSION.TYTBMO_SUSPENSION;

    






    FUNCTION FNUCOUNTPENDPRODSUSPRECON
    (
        INUPRODUCTID           IN    MO_MOTIVE.PRODUCT_ID%TYPE,
        INUMOTIVETYPEID        IN    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUSUSPENSIONTYPEID    IN    MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN  NUMBER;


END MO_BCSUSPENSION;
/
PACKAGE BODY MO_BCSuspension
IS
    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO197538';

    
    
    

    

















    CURSOR CUGETPENDPRODSUSPBYMOTITYPE
    (
        INUPRODUCTID           IN    MO_MOTIVE.PRODUCT_ID%TYPE,
        INUMOTIVETYPEID        IN    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUSUSPENSIONTYPEID    IN    MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
    RETURN DAMO_SUSPENSION.STYMO_SUSPENSION
    IS
        SELECT  /*+ leading(b) index(b IDX_MO_MOTIVE14) */
                A.*,
                A.ROWID
        FROM    MO_SUSPENSION A,
                MO_MOTIVE B,
                PS_MOTIVE_STATUS C
                /*+ MO_BCSuspension.cuGetPendProdSuspByMotiType */
        WHERE   A.SUSPENSION_TYPE_ID = NVL(INUSUSPENSIONTYPEID, A.SUSPENSION_TYPE_ID)
        AND     A.MOTIVE_ID = B.MOTIVE_ID
        AND     B.PRODUCT_ID = INUPRODUCTID
        AND     B.MOTIVE_TYPE_ID = INUMOTIVETYPEID
        AND     B.MOTIVE_STATUS_ID = C.MOTIVE_STATUS_ID
        AND     C.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO;
    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    FUNCTION FRFGETSUSPENSIONINFO
    (
        INUMOTIVEID    IN    MO_MOTIVE.MOTIVE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
	IS
        CRFSUSPENSIONINFO    CONSTANTS.TYREFCURSOR;
	BEGIN
        OPEN CRFSUSPENSIONINFO FOR
            SELECT A.SUSPENSION_TYPE_ID ||' - '|| B.DESCRIPTION SUSPENSION_TYPE_ID,
                   B.DIRECTIONALITY_ID ||' - '|| C.DESCRIPTION DIRECTIONALITY_ID,
                   A.APLICATION_DATE,
                   A.REGISTER_DATE,
                   A.ENDING_DATE
            FROM MO_SUSPENSION A, GE_SUSPENSION_TYPE B, GE_DIRECTIONALITY C
            WHERE MOTIVE_ID = INUMOTIVEID
            AND A.SUSPENSION_TYPE_ID = B.SUSPENSION_TYPE_ID
            AND B.DIRECTIONALITY_ID = C.DIRECTIONALITY_ID
            ORDER BY SUSPENSION_TYPE_ID;

        RETURN CRFSUSPENSIONINFO;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    


















    FUNCTION FTBGETPENDPRODSUSPRECON
    (
        INUPRODUCTID           IN    MO_MOTIVE.PRODUCT_ID%TYPE,
        INUMOTIVETYPEID        IN    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUSUSPENSIONTYPEID    IN    MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN  DAMO_SUSPENSION.TYTBMO_SUSPENSION
    IS
        TBSUSPENSION DAMO_SUSPENSION.TYTBMO_SUSPENSION;
        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (MO_BCSUSPENSION.CUGETPENDPRODSUSPBYMOTITYPE%ISOPEN) THEN
                CLOSE MO_BCSUSPENSION.CUGETPENDPRODSUSPBYMOTITYPE;
            END IF;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
        END;
        
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BCSuspension.ftbGetPendProdSuspRecon',10);
        UT_TRACE.TRACE('Producto['||INUPRODUCTID||'] Tipo de Motivo['||INUMOTIVETYPEID||'] Tipo de Suspensi�n['||INUSUSPENSIONTYPEID||']',10);

        
        CLOSECURSOR;

        
        OPEN    MO_BCSUSPENSION.CUGETPENDPRODSUSPBYMOTITYPE(INUPRODUCTID, INUMOTIVETYPEID, INUSUSPENSIONTYPEID);
        FETCH   MO_BCSUSPENSION.CUGETPENDPRODSUSPBYMOTITYPE BULK COLLECT INTO TBSUSPENSION;
        CLOSE   MO_BCSUSPENSION.CUGETPENDPRODSUSPBYMOTITYPE;

        UT_TRACE.TRACE('Fin MO_BCSuspension.ftbGetPendProdSuspRecon['||TBSUSPENSION.COUNT||']',10);

        
        RETURN TBSUSPENSION;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETPENDPRODSUSPRECON;
    
    


















    FUNCTION FNUCOUNTPENDPRODSUSPRECON
    (
        INUPRODUCTID           IN    MO_MOTIVE.PRODUCT_ID%TYPE,
        INUMOTIVETYPEID        IN    MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUSUSPENSIONTYPEID    IN    MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN  NUMBER
    IS
        NUCOUNTPENDPRODSUSPRECON    NUMBER := 0;
    BEGIN
    
        UT_TRACE.TRACE('Inicia MO_BCSuspension.fnuCountPendProdSuspRecon',10);
        UT_TRACE.TRACE('Producto['||INUPRODUCTID||'] Tipo de Motivo['||INUMOTIVETYPEID||'] Tipo de Suspensi�n['||INUSUSPENSIONTYPEID||']',10);
        
        
        IF  (INUSUSPENSIONTYPEID IS NULL) THEN

            
            SELECT  /*+ leading(b) index(b IDX_MO_MOTIVE14) */
                    COUNT(1)
            INTO    NUCOUNTPENDPRODSUSPRECON
            FROM    MO_SUSPENSION A,
                    MO_MOTIVE B,
                    PS_MOTIVE_STATUS C
                    /*+ MO_BCSuspension.fnuCountPendProdSuspRecon */
            WHERE   A.MOTIVE_ID = B.MOTIVE_ID
            AND     B.PRODUCT_ID = INUPRODUCTID
            AND     B.MOTIVE_TYPE_ID = INUMOTIVETYPEID
            AND     B.MOTIVE_STATUS_ID = C.MOTIVE_STATUS_ID
            AND     C.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO;
        
        ELSE

            
            SELECT  /*+ leading(b) index(b IDX_MO_MOTIVE14) */
                    COUNT(1)
            INTO    NUCOUNTPENDPRODSUSPRECON
            FROM    MO_SUSPENSION A,
                    MO_MOTIVE B,
                    PS_MOTIVE_STATUS C
                    /*+ MO_BCSuspension.fnuCountPendProdSuspRecon */
            WHERE   A.SUSPENSION_TYPE_ID = INUSUSPENSIONTYPEID
            AND     A.MOTIVE_ID = B.MOTIVE_ID
            AND     B.PRODUCT_ID = INUPRODUCTID
            AND     B.MOTIVE_TYPE_ID = INUMOTIVETYPEID
            AND     B.MOTIVE_STATUS_ID = C.MOTIVE_STATUS_ID
            AND     C.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO;
        
        END IF;

        UT_TRACE.TRACE('Fin MO_BCSuspension.fnuCountPendProdSuspRecon['||NUCOUNTPENDPRODSUSPRECON||']',10);

        
        RETURN NVL(NUCOUNTPENDPRODSUSPRECON, 0);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNTPENDPRODSUSPRECON;

END MO_BCSUSPENSION;