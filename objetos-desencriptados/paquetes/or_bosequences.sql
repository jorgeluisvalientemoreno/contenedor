PACKAGE BODY or_bosequences AS





















































































































    
    CSBVERSION   CONSTANT VARCHAR2(20)            := 'SAO197517';


    
    CSBOR_ORDER CONSTANT VARCHAR2(100):='seq_Or_Order';     
    CSBOR_TASK_TYPE CONSTANT VARCHAR2(100):='SEQ_OR_TASK_TYPE_4498';
    CSBOR_ORDER_COMMENT CONSTANT VARCHAR2(100):='seq_Or_Order_Comment';     

    CSBOR_UNI_ITEM_BALA_MOV CONSTANT VARCHAR2(100):='seq_Or_Uni_Item_Bala_Mov';     
    CSBOR_EQUSET_OPESEC_TT CONSTANT VARCHAR2(100):='seq_Or_EquSet_OpeSec_TT';     
    CSBOR_EQUSET_OPESEC_TTC CONSTANT VARCHAR2(100):='seq_Or_EquSet_OpeSec_TTC';     
    CSBOR_OPSE_TASKTYPE_NUM CONSTANT VARCHAR2(100):='seq_Or_OpSe_TaskType_Num';     
    CSBOR_NUMCON_TASKTYPE CONSTANT VARCHAR2(100):='seq_Or_NumCon_TaskType';     
    CSBOR_CONFVAL_OPUNTSTYP CONSTANT VARCHAR2(100):='seq_OR_confval_opuntstyp';
    CSBOR_OPE_UNI_STAT_CHAN CONSTANT VARCHAR2(100):='seq_OR_Ope_Uni_Stat_Chan';
    CSBOR_ORDER_STAT_CHANGE CONSTANT VARCHAR2(100):='seq_Or_Order_Stat_Change';
    CSBOR_OPUN_SCH_DATE_LG CONSTANT VARCHAR2(100):='seq_Or_OpUn_Sch_Date_Lg';
    CSBOR_ORDER_ITEMS CONSTANT VARCHAR2(100):='seq_OR_Order_Items';
    CSBOR_ORDER_NET CONSTANT VARCHAR2(100):='seq_OR_Order_Net';
    CSBOR_PLANNED_ORDER  CONSTANT VARCHAR2(100):='seq_OR_planned_order';
    CSBOR_PLANNED_ITEMS  CONSTANT VARCHAR2(100):='seq_OR_planned_items';
    CSBOR_PLANNED_NET  CONSTANT VARCHAR2(100):='seq_OR_planned_net';
    CSBOR_TASK_TYPE_PROCESS  CONSTANT VARCHAR2(100):='seq_OR_task_Type_Process';
    CSBOR_TASTYP_PRO_MOTCOM  CONSTANT VARCHAR2(100):='seq_or_tastyp_pro_motcom';
    CSBOR_ORDER_OPEUNI_CHAN  CONSTANT VARCHAR2(100):='SEQ_OR_ORDER_OPEUNI_CHAN';

    CSBOR_ORDER_ACTIVITY     CONSTANT VARCHAR2(100):= 'SEQ_OR_ORDER_ACTIVITY';
    CSBOR_ACT_BY_TASK_MOD    CONSTANT VARCHAR2(100):= 'SEQ_OR_ACT_BY_TASK_MOD';
    
    
    CSBOR_TASK_TYPE_GROUP   CONSTANT VARCHAR2(100):= 'SEQ_OR_TASK_TYPE_GROUP';
    CSBOR_OPERATING_ZONE    CONSTANT VARCHAR2(100):= 'SEQ_OR_OPERATING_ZONE';
    CSBOR_SCHEDULER         CONSTANT VARCHAR2(100):= 'SEQ_OR_SCHEDULER';
    
    
    CSBOR_PER_UNIT_BY_DATE  CONSTANT VARCHAR2(100):= 'SEQ_OR_PER_UNIT_BY_DATE';
    CSBOR_SCHED_AVAILABLE   CONSTANT VARCHAR2(100):= 'SEQ_OR_SCHED_AVAILABLE';
    CSBOR_SCHED_CHANGES     CONSTANT VARCHAR2(100):= 'SEQ_OR_SCHED_CHANGES';
    CSBOR_PROGRAMING_CLASS  CONSTANT VARCHAR2(100):= 'SEQ_OR_PROGRAMING_CLASS';
    CSBOR_SCHED_PROGRAMING  CONSTANT VARCHAR2(100):= 'SEQ_OR_SCHED_PROGRAMING';
    CSBOR_SCHED_DISPATCH    CONSTANT VARCHAR2(100):= 'SEQ_OR_SCHED_DISPATCH';
    
    
    CSBOR_LOG_ORDENES_INSPE CONSTANT VARCHAR2(100):= 'SEQ_OR_LOG_ORDENES_INSPE';
    CSBOR_ITEMS_ORDEN_INSPE CONSTANT VARCHAR2(100):= 'SEQ_OR_ITEMS_ORDEN_INSPE';
    
    CSBOR_PERSONA_DISPONIB  CONSTANT VARCHAR2(100):= 'SEQ_OR_PERSONA_DISPONIB';
    CSBOR_REGENERA_ACTIVIDA CONSTANT VARCHAR2(100):= 'SEQ_OR_REGENERA_ACTIVIDA';
    
    CSBOR_OPERATING_SECTOR  CONSTANT VARCHAR2(100):= 'SEQ_OR_OR_OPERATING_SECTOR';
    
    CSBOR_OPERATING_UNIT    CONSTANT VARCHAR2(100):= 'SEQ_OR_OPERATING_UN_4263';
    CSBOR_OPER_UNIT_STATUS  CONSTANT VARCHAR2(100):= 'SEQ_OR_OPER_UNIT_ST_4296';
    CSBOR_OPER_UNIT_CLASSIF CONSTANT VARCHAR2(100):= 'SEQ_OR_OPER_UNIT_CL_4286';
    
    CSBOR_ROUTE_COMPONENTS  CONSTANT VARCHAR2(100):= 'SEQ_OR_ROUTE_COMPON_157994';
    CSBOR_ROUTE_WEEK_DAYS   CONSTANT VARCHAR2(100):= 'SEQ_OR_ROUTE_WEEK_D_157991';
    CSBOR_ROUTE_PREMISE     CONSTANT VARCHAR2(100):= 'SEQ_OR_ROUTE_PREMIS_196985';
    
    
    CSBOR_ORDER_ACT_MEASURE     CONSTANT VARCHAR2(40) := 'OR_ORDER_ACT_MEASURE';
    CSBSEQ_OR_ORDER_ACT_MEASURE CONSTANT VARCHAR2(40) := 'SEQ_OR_ORDER_ACT_ME_125233';

    CSBOR_ORDER_ACT_VAR_DET     CONSTANT VARCHAR2(40) := 'OR_ORDER_ACT_VAR_DET';
    CSBSEQ_OR_ORDER_ACT_VAR_DET CONSTANT VARCHAR2(40) := 'SEQ_OR_ORDER_ACT_VA_125220';

    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
    
        RETURN CSBVERSION;
    
    END;
    
    
    
















    PROCEDURE CHECKSEQUENCES
        IS     
    BEGIN
        IF NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_EQUSET_OPESEC_TT ) THEN  
           SEQ.CREATESEQUENCE( CSBOR_EQUSET_OPESEC_TT );     
        END IF;   
        IF NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_ORDER )  THEN   
            SEQ.CREATESEQUENCE( CSBOR_ORDER );     
        END IF;   
        IF NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_TASK_TYPE )  THEN  
            SEQ.CREATESEQUENCE( CSBOR_TASK_TYPE );     
        END IF;   
        IF NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_ORDER_COMMENT )  THEN  
            SEQ.CREATESEQUENCE( CSBOR_ORDER_COMMENT );     
        END IF;   
        IF NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_UNI_ITEM_BALA_MOV )  THEN
            SEQ.CREATESEQUENCE( CSBOR_UNI_ITEM_BALA_MOV );     
        END IF;   
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_EQUSET_OPESEC_TTC ) THEN   
            SEQ.CREATESEQUENCE( CSBOR_EQUSET_OPESEC_TTC );     
        END IF;   
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_OPSE_TASKTYPE_NUM ) THEN   
            SEQ.CREATESEQUENCE( CSBOR_OPSE_TASKTYPE_NUM );     
        END IF;   
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_NUMCON_TASKTYPE ) THEN
            SEQ.CREATESEQUENCE( CSBOR_NUMCON_TASKTYPE );    
        END IF;   
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_CONFVAL_OPUNTSTYP ) THEN
            SEQ.CREATESEQUENCE( CSBOR_CONFVAL_OPUNTSTYP );
        END IF;
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_OPE_UNI_STAT_CHAN ) THEN
            SEQ.CREATESEQUENCE( CSBOR_OPE_UNI_STAT_CHAN );
        END IF;
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_ORDER_STAT_CHANGE ) THEN
            SEQ.CREATESEQUENCE( CSBOR_ORDER_STAT_CHANGE );
        END IF;
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_OPUN_SCH_DATE_LG ) THEN
            SEQ.CREATESEQUENCE( CSBOR_OPUN_SCH_DATE_LG );
        END IF;
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_ORDER_ITEMS ) THEN
            SEQ.CREATESEQUENCE( CSBOR_ORDER_ITEMS );
        END IF;
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_ORDER_NET ) THEN
            SEQ.CREATESEQUENCE( CSBOR_ORDER_NET );
        END IF;
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_PLANNED_ORDER ) THEN
            SEQ.CREATESEQUENCE( CSBOR_PLANNED_ORDER );
        END IF;
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_PLANNED_ITEMS ) THEN
            SEQ.CREATESEQUENCE( CSBOR_PLANNED_ITEMS );
        END IF;

        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_PLANNED_NET ) THEN
            SEQ.CREATESEQUENCE( CSBOR_PLANNED_NET );
        END IF;

        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_TASK_TYPE_PROCESS ) THEN
            SEQ.CREATESEQUENCE( CSBOR_TASK_TYPE_PROCESS );
        END IF;

        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_TASTYP_PRO_MOTCOM ) THEN
            SEQ.CREATESEQUENCE( CSBOR_TASTYP_PRO_MOTCOM );
        END IF;

        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_ORDER_OPEUNI_CHAN ) THEN
            SEQ.CREATESEQUENCE( CSBOR_ORDER_OPEUNI_CHAN );
        END IF;
        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_ORDER_ACTIVITY ) THEN
            SEQ.CREATESEQUENCE( CSBOR_ORDER_ACTIVITY );
        END IF;

        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_TASK_TYPE_GROUP ) THEN
            SEQ.CREATESEQUENCE( CSBOR_TASK_TYPE_GROUP );
        END IF;

        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_OPERATING_ZONE ) THEN
            SEQ.CREATESEQUENCE( CSBOR_OPERATING_ZONE );
        END IF;

        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_SCHEDULER ) THEN
            SEQ.CREATESEQUENCE( CSBOR_SCHEDULER );
        END IF;

        



        


        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_PER_UNIT_BY_DATE ) THEN
            SEQ.CREATESEQUENCE( CSBOR_PER_UNIT_BY_DATE );
        END IF;
        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_SCHED_AVAILABLE ) THEN
            SEQ.CREATESEQUENCE( CSBOR_SCHED_AVAILABLE );
        END IF;
        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_SCHED_CHANGES ) THEN
            SEQ.CREATESEQUENCE( CSBOR_SCHED_CHANGES );
        END IF;
        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_PROGRAMING_CLASS ) THEN
            SEQ.CREATESEQUENCE( CSBOR_PROGRAMING_CLASS );
        END IF;
        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_SCHED_PROGRAMING ) THEN
            SEQ.CREATESEQUENCE( CSBOR_SCHED_PROGRAMING );
        END IF;
        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_SCHED_DISPATCH ) THEN
            SEQ.CREATESEQUENCE( CSBOR_SCHED_DISPATCH );
        END IF;
        
        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_ITEMS_ORDEN_INSPE ) THEN
            SEQ.CREATESEQUENCE( CSBOR_ITEMS_ORDEN_INSPE );
        END IF;

        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_PERSONA_DISPONIB ) THEN
            SEQ.CREATESEQUENCE( CSBOR_PERSONA_DISPONIB );
        END IF;

        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_LOG_ORDENES_INSPE ) THEN
            SEQ.CREATESEQUENCE( CSBOR_LOG_ORDENES_INSPE );
        END IF;
        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_OPERATING_SECTOR ) THEN
            SEQ.CREATESEQUENCE( CSBOR_OPERATING_SECTOR );
        END IF;
        
        IF  NOT UT_OBJECT.FBOVALIDOBJECT( CSBOR_ROUTE_PREMISE ) THEN
            SEQ.CREATESEQUENCE( CSBOR_ROUTE_PREMISE );
        END IF;
    EXCEPTION     
        WHEN OTHERS THEN     
           RAISE_APPLICATION_ERROR(-20991, 'Or_BOSequence.CheckSequences: '||SQLERRM);     
    END;     
    
    
    FUNCTION FNUNEXTOR_ORDER     
        RETURN NUMBER     
        IS     
        NUNEXT NUMBER;     
    BEGIN     
        LOOP     
            NUNEXT := SEQ.GETNEXT( CSBOR_ORDER );     
            EXIT WHEN NOT DAOR_ORDER.FBLEXIST(NUNEXT); 
        END LOOP;     
        RETURN  NUNEXT;     
    END;     
     
    
    FUNCTION FNUNEXTOR_TASK_TYPE     
        RETURN NUMBER     
        IS     
        NUNEXT NUMBER;     
    BEGIN     
        LOOP     
            NUNEXT := SEQ.GETNEXT( CSBOR_TASK_TYPE );     
            EXIT WHEN NOT DAOR_TASK_TYPE.FBLEXIST(NUNEXT); 
        END LOOP;     
        RETURN  NUNEXT;     
    END;     
     
    
    FUNCTION FNUNEXTOR_ORDER_COMMENT     
        RETURN NUMBER     
        IS     
        NUNEXT NUMBER;     
    BEGIN     
        LOOP     
            NUNEXT := SEQ.GETNEXT( CSBOR_ORDER_COMMENT );     
            EXIT WHEN NOT DAOR_ORDER_COMMENT.FBLEXIST(NUNEXT); 
        END LOOP;     
        RETURN  NUNEXT;     
    END;     
     
    
    FUNCTION FNUNEXTOR_UNI_ITEM_BALA_MOV     
        RETURN NUMBER     
        IS     
        NUNEXT NUMBER;     
    BEGIN     
        LOOP     
            NUNEXT := SEQ.GETNEXT( CSBOR_UNI_ITEM_BALA_MOV );     
            EXIT WHEN NOT DAOR_UNI_ITEM_BALA_MOV.FBLEXIST(NUNEXT); 
        END LOOP;     
        RETURN  NUNEXT;     
    END;     
     
    
    FUNCTION FNUNEXTOR_EQUSET_OPESEC_TT     
        RETURN NUMBER     
        IS     
        NUNEXT NUMBER;     
    BEGIN     
        LOOP     
            NUNEXT := SEQ.GETNEXT( CSBOR_EQUSET_OPESEC_TT );     
            EXIT WHEN NOT DAOR_EQUSET_OPESEC_TT.FBLEXIST(NUNEXT); 
        END LOOP;     
        RETURN  NUNEXT;     
    END;     
     
    
    FUNCTION FNUNEXTOR_EQUSET_OPESEC_TTC     
        RETURN NUMBER     
        IS     
        NUNEXT NUMBER;     
    BEGIN     
        LOOP     
            NUNEXT := SEQ.GETNEXT( CSBOR_EQUSET_OPESEC_TTC );     
            EXIT WHEN NOT DAOR_EQUSET_OPESEC_TTC.FBLEXIST(NUNEXT); 
        END LOOP;     
        RETURN  NUNEXT;     
    END;     
     
    
    FUNCTION FNUNEXTOR_OPSE_TASKTYPE_NUM     
        RETURN NUMBER     
        IS     
        NUNEXT NUMBER;     
    BEGIN     
        LOOP     
            NUNEXT := SEQ.GETNEXT( CSBOR_OPSE_TASKTYPE_NUM );     
            EXIT WHEN NOT DAOR_OPSE_TASKTYPE_NUM.FBLEXIST(NUNEXT); 
        END LOOP;     
        RETURN  NUNEXT;     
    END;     
     
    
    FUNCTION FNUNEXTOR_NUMCON_TASKTYPE     
        RETURN NUMBER     
        IS     
        NUNEXT NUMBER;     
    BEGIN     
        LOOP     
            NUNEXT := SEQ.GETNEXT( CSBOR_NUMCON_TASKTYPE );     
            EXIT WHEN NOT DAOR_NUMCON_TASKTYPE.FBLEXIST(NUNEXT); 
        END LOOP;     
        RETURN  NUNEXT;     
    END;     
         
    
    FUNCTION FNUNEXTOR_CONFVAL_OPUNTSTYP
        RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_CONFVAL_OPUNTSTYP );
            EXIT WHEN NOT DAOR_CONFVAL_OPUNTSTYP.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN  NUNEXT;
    END;
    
    
    FUNCTION FNUNEXTOR_OPE_UNI_STAT_CHAN
        RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_OPE_UNI_STAT_CHAN );
            EXIT WHEN NOT DAOR_OPE_UNI_STAT_CHAN.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN  NUNEXT;
    END;
    
    
    FUNCTION FNUNEXTOR_ORDER_STAT_CHANGE
        RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_ORDER_STAT_CHANGE );
            EXIT WHEN NOT DAOR_ORDER_STAT_CHANGE.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN  NUNEXT;
    END;
    
    
    FUNCTION FNUNEXTOR_OPUN_SCH_DATE_LG
        RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_OPUN_SCH_DATE_LG );
            EXIT WHEN NOT DAOR_OPUN_SCH_DATE_LG.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN  NUNEXT;
    END;
    
    FUNCTION FNUNEXTOR_ORDER_ITEMS RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_ORDER_ITEMS, TRUE );
            EXIT WHEN NOT DAOR_ORDER_ITEMS.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN  NUNEXT;
    END;


    FUNCTION FNUNEXTOR_PLANNED_ITEMS RETURN NUMBER
        IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_PLANNED_ITEMS);
            EXIT WHEN NOT DAOR_PLANNED_ITEMS.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN  NUNEXT;
    END;


    FUNCTION FNUNEXTOR_ORDER_OPEUNI_CHAN RETURN NUMBER
        IS
        NUNEXT NUMBER;
    BEGIN

        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_ORDER_OPEUNI_CHAN);
            EXIT WHEN NOT DAOR_ORDER_OPEUNI_CHAN.FBLEXIST(NUNEXT);
        END LOOP;

        RETURN  NUNEXT;
    END;

    FUNCTION FNUNEXTOR_ORDER_ACTIVITY RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN

        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_ORDER_ACTIVITY);
            EXIT WHEN NOT DAOR_ORDER_ACTIVITY.FBLEXIST(NUNEXT);
        END LOOP;

        RETURN  NUNEXT;
    END;
    
    
    FUNCTION FNUNEXTOR_ACT_BY_TASK_MOD RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN

        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_ACT_BY_TASK_MOD);
            EXIT WHEN NOT DAOR_ACT_BY_TASK_MOD.FBLEXIST(NUNEXT);
        END LOOP;

        RETURN  NUNEXT;

    END;


    

    
    FUNCTION FNUNEXTOR_OPERATING_ZONE RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_OPERATING_ZONE);
            EXIT WHEN NOT DAOR_OPERATING_ZONE.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    FUNCTION FNUNEXTOR_TASK_TYPE_GROUP RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_TASK_TYPE_GROUP);
            EXIT WHEN NOT DAOR_TASK_TYPE_GROUP.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    FUNCTION FNUNEXTOR_SCHEDULER RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_SCHEDULER);
            EXIT WHEN NOT DAOR_SCHEDULER.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    










    
    









    
    
    FUNCTION FNUNEXTOR_PER_UNIT_BY_DATE RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_PER_UNIT_BY_DATE);
            EXIT WHEN NOT DAOR_PER_UNIT_BY_DATE.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    FUNCTION FNUNEXTOR_SCHED_AVAILABLE RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_SCHED_AVAILABLE);
            EXIT WHEN NOT DAOR_SCHED_AVAILABLE.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    FUNCTION FNUNEXTOR_SCHED_CHANGES RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_SCHED_CHANGES);
            EXIT WHEN NOT DAOR_SCHED_CHANGES.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    FUNCTION FNUNEXTOR_PROGRAMING_CLASS RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_PROGRAMING_CLASS);
            EXIT WHEN NOT DAOR_PROGRAMING_CLASS.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    FUNCTION FNUNEXTOR_SCHED_PROGRAMING RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_SCHED_PROGRAMING);
            EXIT WHEN NOT DAOR_SCHED_PROGRAMING.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    FUNCTION FNUNEXTOR_SCHED_DISPATCH RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_SCHED_DISPATCH);
            EXIT WHEN NOT DAOR_SCHED_DISPATCH.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;
    
    
    FUNCTION FNUNEXTOR_LOG_ORDENES_INSPE RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_LOG_ORDENES_INSPE);
            EXIT WHEN NOT DAOR_LOG_ORDENES_INSPE.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    FUNCTION FNUNEXTOR_ITEMS_ORDEN_INSPE RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_ITEMS_ORDEN_INSPE);
            EXIT WHEN NOT DAOR_ITEMS_ORDEN_INSPE.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;
    
    
    FUNCTION FNUNEXTOR_PERSONA_DISPONIB RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT( CSBOR_PERSONA_DISPONIB);
            EXIT WHEN NOT DAOR_PERSONA_DISPONIB.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    
    
    
    FUNCTION FNUNEXTOR_REGENERA_ACTIVIDA RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT(CSBOR_REGENERA_ACTIVIDA);
            EXIT WHEN NOT DAOR_PERSONA_DISPONIB.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;
    

    













    FUNCTION FNUNEXTOR_OPERATING_SECTOR RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT(CSBOR_OPERATING_SECTOR);
            EXIT WHEN NOT DAOR_OPERATING_SECTOR.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END FNUNEXTOR_OPERATING_SECTOR;

    









    FUNCTION FNUNEXTSEQ_OR_OPERATING_UNIT RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT(CSBOR_OPERATING_UNIT);
            EXIT WHEN NOT DAOR_OPERATING_UNIT.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    









    FUNCTION FNUNEXTSEQ_OR_OPER_UNIT_STATUS RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT(CSBOR_OPER_UNIT_STATUS);
            EXIT WHEN NOT DAOR_OPER_UNIT_STATUS.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;

    









    FUNCTION FNUNEXTSEQ_OR_OPER_UNIT_CLAS RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT(CSBOR_OPER_UNIT_CLASSIF);
            EXIT WHEN NOT DAOR_OPER_UNIT_CLASSIF.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;


    








    FUNCTION FNUGETROUTECOMPONENTS RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT(CSBOR_ROUTE_COMPONENTS);
            EXIT WHEN NOT DAOR_ROUTE_COMPONENTS.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;
    
    








    FUNCTION FNUGETROUTEWEEKDAYS RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT(CSBOR_ROUTE_WEEK_DAYS);
            EXIT WHEN NOT DAOR_OPER_UNIT_CLASSIF.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END;
    
    









    FUNCTION FNUGETORDERACTMEASURE RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        RETURN GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE
                    (
                        CSBOR_ORDER_ACT_MEASURE,
                        CSBSEQ_OR_ORDER_ACT_MEASURE
                    );
    END FNUGETORDERACTMEASURE;


    









    FUNCTION FNUGETORDERACTVARDET RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        RETURN GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE
                    (
                        CSBOR_ORDER_ACT_VAR_DET,
                        CSBSEQ_OR_ORDER_ACT_VAR_DET
                    );
    END FNUGETORDERACTVARDET;

    








    FUNCTION FNUGETROUTEPREMISE RETURN NUMBER
    IS
        NUNEXT NUMBER;
    BEGIN
        LOOP
            NUNEXT := SEQ.GETNEXT(CSBOR_ROUTE_PREMISE);
            EXIT WHEN NOT DAOR_ROUTE_PREMISE.FBLEXIST(NUNEXT);
        END LOOP;
        RETURN NUNEXT;
    END FNUGETROUTEPREMISE;


BEGIN    
    CHECKSEQUENCES;
END OR_BOSEQUENCES;