PACKAGE BODY MO_BOINSTANCE_DB AS



















    
    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(50) := 'SAO198603';
    
    CNUINCLUDEDINSELECT    CONSTANT NUMBER(15)   := 1;
    
    CNUNOINCLUDEDINSELECT  CONSTANT NUMBER(15)   := 2;
    

    
    
    

    TYPE TYRCLISTBIND IS RECORD
    (
       SBENTITYNAME   STYVARCHAR,   
       SBATTRIBNAME   STYVARCHAR,   
       NUTYPEATTRIB   STYNUMBER,    
       SBVALUE        STYVARCHAR    
    );
    
    
    
    TYPE TYTBLISTBIND IS TABLE OF TYRCLISTBIND INDEX BY BINARY_INTEGER;
    
    
    
    
    TBENTITY      TYTBINSTANCEDB;
    
    
    TBATTRIBSDB   GE_BOINSTANCE.TYTBINSTANCE;
    
    TBINFOATTRIBS GE_BOINSTANCE.TYTBINSTANCE;
    
    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2
    IS
    BEGIN
        RETURN CSBVERSION;
    END;

    


    PROCEDURE SETENTITY
    (
       ISBENTITY  IN STYVARCHAR,
       INURECORDS IN STYNUMBER := 0
    ) IS
       NUINDEX  STYNUMBER;
    BEGIN
       NUINDEX := DBMS_UTILITY.GET_HASH_VALUE (ISBENTITY, 0, 0);
       IF (NOT TBENTITY.EXISTS(NUINDEX)) THEN
          TBENTITY(NUINDEX).SBENTITYNAME_ := ISBENTITY;
          TBENTITY(NUINDEX).NURECORDS     := INURECORDS;
       END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    PROCEDURE INIT
    IS
    BEGIN
        TBENTITY.DELETE;
        TBATTRIBSDB.DELETE;
        TBINFOATTRIBS.DELETE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    




    PROCEDURE GETENTITYATT_TYPE
    (
        ISBENTITYNAME  IN STYVARCHAR,
        ISBATTRIBNAME  IN STYVARCHAR,
        ONUENTATTID    OUT NOCOPY  STYNUMBER,
        OBLEXISTS      OUT NOCOPY BOOLEAN
    ) IS
        CURSOR CUGETATTRIBTYPE IS
         SELECT B.INTERNAL_TYPE
           FROM GE_ENTITY_ATTRIBUTES A,GE_ATTRIBUTES_TYPE B,GE_ENTITY C
             WHERE A.ATTRIBUTE_TYPE_ID = B.ATTRIBUTE_TYPE_ID AND
                   A.ENTITY_ID  = C.ENTITY_ID AND
                   C.NAME_ = ISBENTITYNAME AND
                   A.TECHNICAL_NAME = ISBATTRIBNAME;
    BEGIN
       FOR RG IN CUGETATTRIBTYPE LOOP
           ONUENTATTID := RG.INTERNAL_TYPE;
       END LOOP;

       OBLEXISTS := ONUENTATTID IS NOT NULL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    PROCEDURE SETATTRIBUTE
    (
        ISBENTITYNAME  IN STYVARCHAR,
        ISBATTRIBNAME  IN STYVARCHAR
    ) IS
       BLEXIST        BOOLEAN := FALSE;
       NUATTTYPE      STYNUMBER;
       NUINDEXTMP     STYNUMBER;
       SBENTITYNAME   STYVARCHAR := UPPER(ISBENTITYNAME);
       SBATTRIBNAME   STYVARCHAR := UPPER(ISBATTRIBNAME);
    BEGIN
       GETENTITYATT_TYPE(SBENTITYNAME,SBATTRIBNAME,NUATTTYPE,BLEXIST);
       
       
       IF (NOT BLEXIST) THEN
          ERRORS.SETERROR(MO_BOCONSTERROR.CNUFAILCONFIGATTRIB,
                          ISBATTRIBNAME||'|'||ISBENTITYNAME);
          RAISE EX.CONTROLLED_ERROR;
       END IF;
       
       
       SETENTITY(SBENTITYNAME);

       
       
       IF (GE_BOINSTANCE.FBLEXISTS(TBATTRIBSDB,SBENTITYNAME,
                                  SBATTRIBNAME,NUINDEXTMP) ) THEN
          TBATTRIBSDB(NUINDEXTMP).SBANY := CNUINCLUDEDINSELECT;
       ELSE
          GE_BOINSTANCE.SETATTRIBUTE
          (TBATTRIBSDB,SBENTITYNAME,SBATTRIBNAME,NUATTTYPE,
           NULL,1,CNUINCLUDEDINSELECT);
       END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    PROCEDURE SETPARAMATTRIB
    (
        ISBENTITYNAME  IN STYVARCHAR,
        ISBATTRIBNAME  IN STYVARCHAR,
        ISBVALUE       IN STYVARCHAR
    ) IS
       BLEXIST       BOOLEAN;
       NUATTRIBTYPE  STYNUMBER;
       NUINDEXTMP    STYNUMBER;
       SBENTITYNAME  STYVARCHAR := UPPER(ISBENTITYNAME);
       SBATTRIBNAME  STYVARCHAR := UPPER(ISBATTRIBNAME);
    BEGIN
       GETENTITYATT_TYPE(SBENTITYNAME,SBATTRIBNAME,NUATTRIBTYPE ,BLEXIST);

       IF (NOT BLEXIST) THEN
          ERRORS.SETERROR(MO_BOCONSTERROR.CNUFAILCONFIGATTRIB,
                          ISBATTRIBNAME||'|'||ISBENTITYNAME);
          RAISE EX.CONTROLLED_ERROR;
       END IF;
       
       IF (ISBVALUE IS NULL) THEN
          ERRORS.SETERROR(MO_BOCONSTERROR.CNUFAILPARAMNULL,
                          ISBATTRIBNAME||'|'||ISBENTITYNAME);
          RAISE EX.CONTROLLED_ERROR;
       END IF;
       
       SETENTITY(SBENTITYNAME);

       IF (GE_BOINSTANCE.FBLEXISTS(TBATTRIBSDB,SBENTITYNAME,
                                  SBATTRIBNAME,NUINDEXTMP) ) THEN
           TBATTRIBSDB(NUINDEXTMP).VALUE_ := ISBVALUE;
       ELSE
          GE_BOINSTANCE.SETATTRIBUTE
          (TBATTRIBSDB,SBENTITYNAME,SBATTRIBNAME,NUATTRIBTYPE,
           ISBVALUE,1,CNUNOINCLUDEDINSELECT);
       END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;
    
    

    



    PROCEDURE GETLISTBIND
    (
        ITBENTATTRIBS  IN GE_BOINSTANCE.TYTBINSTANCE,
        OTBLISTWHERE   IN OUT NOCOPY TYTBLISTBIND
    ) IS
      NUINDEX   STYNUMBER;
    BEGIN
      
      
      NUINDEX := ITBENTATTRIBS.FIRST;
      WHILE (ITBENTATTRIBS.EXISTS(NUINDEX)) LOOP
         
         IF (ITBENTATTRIBS(NUINDEX).VALUE_ IS NOT NULL) THEN
            OTBLISTWHERE(NUINDEX).SBENTITYNAME := ITBENTATTRIBS(NUINDEX).INSTANCE_;
            OTBLISTWHERE(NUINDEX).SBATTRIBNAME := ITBENTATTRIBS(NUINDEX).NAME_ATTRIBUTE;
            OTBLISTWHERE(NUINDEX).NUTYPEATTRIB := ITBENTATTRIBS(NUINDEX).ATTRIBUTE_TYPE;
            OTBLISTWHERE(NUINDEX).SBVALUE :=  ITBENTATTRIBS(NUINDEX).VALUE_;
         END IF;
         NUINDEX := ITBENTATTRIBS.NEXT(NUINDEX);
      END LOOP;
      
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    PROCEDURE EXTRACTSELECTWHERE
    (
       ITBENTATTRIBS  IN GE_BOINSTANCE.TYTBINSTANCE,
       OSBCOLUMNS     OUT NOCOPY  STYVARCHAR,
       OSBWHERE       OUT NOCOPY  STYVARCHAR
    ) IS
       NUINDEX     STYNUMBER;
       TMPCOLUMNS  STYVARCHAR;
       TMPWHERE    STYVARCHAR;
    BEGIN
       NUINDEX := ITBENTATTRIBS.FIRST;
       WHILE (ITBENTATTRIBS.EXISTS(NUINDEX)) LOOP
          
          IF (ITBENTATTRIBS(NUINDEX).SBANY = CNUINCLUDEDINSELECT) THEN
             TMPCOLUMNS := TMPCOLUMNS||','||ITBENTATTRIBS(NUINDEX).NAME_ATTRIBUTE;
          END IF;
          
          
          IF (ITBENTATTRIBS(NUINDEX).VALUE_ IS NOT NULL) THEN
             TMPWHERE := TMPWHERE||
                         ' AND '||ITBENTATTRIBS(NUINDEX).NAME_ATTRIBUTE||'='||
                         ':'||ITBENTATTRIBS(NUINDEX).NAME_ATTRIBUTE;
          END IF;
          
          NUINDEX := ITBENTATTRIBS.NEXT(NUINDEX);
       END LOOP;
       
      
      TMPCOLUMNS := SUBSTR(TMPCOLUMNS,2);
      
      IF ( TMPWHERE IS NOT NULL) THEN
         
         TMPWHERE   := SUBSTR(TMPWHERE,6);
      END IF;

      
      OSBCOLUMNS := TMPCOLUMNS;
      OSBWHERE   := TMPWHERE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE MAKESELECT
    (
      ISBENTITYNAME       IN  STYVARCHAR,
      ITBENTITYATTRIBS    IN  GE_BOINSTANCE.TYTBINSTANCE,
      OSBSELECT           OUT NOCOPY STYVARCHAR
    ) IS
       SBCOLUMNS    STYVARCHAR;
       SBWHERE      STYVARCHAR;
    BEGIN
       
       EXTRACTSELECTWHERE(ITBENTITYATTRIBS,SBCOLUMNS,SBWHERE);
       
       OSBSELECT := 'SELECT '||SBCOLUMNS||
                    ' FROM  '||ISBENTITYNAME||' ';
                    
       IF (SBWHERE IS NOT NULL) THEN
          OSBSELECT := OSBSELECT||' WHERE '||SBWHERE;
       END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    PROCEDURE VALIDATEDATA
    (
        ITBINSTANCE  IN GE_BOINSTANCE.TYTBINSTANCE
    ) IS
       NUINDEX   STYNUMBER;
       BLOK      BOOLEAN := FALSE;
       SBENTITY  STYVARCHAR;
    BEGIN
       NUINDEX := ITBINSTANCE.FIRST;
       
       SBENTITY := ITBINSTANCE(NUINDEX).INSTANCE_;
       WHILE (ITBINSTANCE.EXISTS(NUINDEX)) LOOP
          BLOK := (ITBINSTANCE(NUINDEX).SBANY = CNUINCLUDEDINSELECT);
          IF (BLOK) THEN
             EXIT;
          END IF;
          NUINDEX := ITBINSTANCE.NEXT(NUINDEX);
       END LOOP;
       
       IF (NOT BLOK) THEN
          ERRORS.SETERROR(MO_BOCONSTERROR.CNUNOATTRIBSINSELECT,SBENTITY);
          RAISE EX.CONTROLLED_ERROR;
       END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

    

    FUNCTION FNUGETRECORDSSELECTED
    (
       ISBENTITYNAME IN STYVARCHAR
    )RETURN NUMBER IS
      NUINDEX      STYNUMBER;
      SBENTITYNAME STYVARCHAR := UPPER(ISBENTITYNAME);
    BEGIN
      IF (TBENTITY.COUNT = 0) THEN
         RETURN (0);
      END IF;
      
      NUINDEX := DBMS_UTILITY.GET_HASH_VALUE (SBENTITYNAME, 0, 0);
      IF (NOT TBENTITY.EXISTS(NUINDEX)) THEN
         RETURN (0);
      END IF;
      
      RETURN (TBENTITY(NUINDEX).NURECORDS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    PROCEDURE GETRECORD
    (
       ISBENTITYNAME   IN  STYVARCHAR,
       INURECORDNUMBER IN  STYNUMBER,
       OTBRECORD       OUT NOCOPY GE_BOINSTANCE.TYTBINSTANCE,
       OBLEXISTE        OUT BOOLEAN
    ) IS
       TBTMPRECORD    GE_BOINSTANCE.TYTBINSTANCE;
       NUINDEX        STYNUMBER;
       SBENTITYNAME   STYVARCHAR := UPPER(ISBENTITYNAME);
    BEGIN
       TBTMPRECORD := GE_BOINSTANCE.FINDINSTANCE(TBINFOATTRIBS,
                                                SBENTITYNAME||INURECORDNUMBER,
                                                OBLEXISTE);
       IF (OBLEXISTE) THEN
          NUINDEX := TBTMPRECORD.FIRST;
          WHILE (TBTMPRECORD.EXISTS(NUINDEX)) LOOP
              GE_BOINSTANCE.SETATTRIBUTE(TBTMPRECORD,SBENTITYNAME,
                                         TBTMPRECORD(NUINDEX).NAME_ATTRIBUTE,
                                         TBTMPRECORD(NUINDEX).ATTRIBUTE_TYPE,
                                         TBTMPRECORD(NUINDEX).VALUE_,
                                         TBTMPRECORD(NUINDEX).SBANY);
              NUINDEX := TBTMPRECORD.NEXT(NUINDEX);
          END LOOP;
          GE_BOINSTANCE.DELETEINSTANCE(TBTMPRECORD,SBENTITYNAME||INURECORDNUMBER);
          OTBRECORD := TBTMPRECORD;
       END IF;
       
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    PROCEDURE PRINTRECORDSFETCHED
    (
       ITBINSTANCEDB  IN TYTBINSTANCEDB
    ) IS
       NUINDEX    STYNUMBER;
    BEGIN
       IF (ITBINSTANCEDB.COUNT = 0) THEN
          RETURN;
       END IF;
       
       DBMS_OUTPUT.PUT_LINE ('==ENTIDAD================|=====REGISTROS RECUPERADOS=========');
       
       NUINDEX := ITBINSTANCEDB.FIRST;
       WHILE (ITBINSTANCEDB.EXISTS(NUINDEX) )LOOP
         DBMS_OUTPUT.PUT(RPAD(ITBINSTANCEDB(NUINDEX).SBENTITYNAME_,25));
         DBMS_OUTPUT.PUT_LINE(LPAD(ITBINSTANCEDB(NUINDEX).NURECORDS,5));
         NUINDEX := ITBINSTANCEDB.NEXT(NUINDEX);
       END LOOP;
       
       DBMS_OUTPUT.PUT_LINE('==============================================================');
       
       
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

    










    FUNCTION FNUGETPACKIDINSTANCE
    RETURN NUMBER
    IS
        NUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            NUPACKAGEID
            );

        RETURN NUPACKAGEID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    











    FUNCTION FNUGETMOTIDINSTANCE
    RETURN NUMBER
    IS
        NUMOTIVEID MO_MOTIVE.MOTIVE_ID%TYPE;
    BEGIN
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_MOTIVE,
            MO_BOCONSTANTS.CSBMOTIVE_ID,
            NUMOTIVEID
            );

        RETURN NUMOTIVEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    










    FUNCTION FNUGETCOMPIDINSTANCE
    RETURN NUMBER
    IS
        NUCOMPONENTID   MO_COMPONENT.COMPONENT_ID%TYPE;
    BEGIN
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_COMPONENT,
            MO_BOCONSTANTS.CSBCOMPONENT_ID,
            NUCOMPONENTID
            );

        RETURN NUCOMPONENTID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


END MO_BOINSTANCE_DB;