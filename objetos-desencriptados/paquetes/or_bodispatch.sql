PACKAGE BODY OR_BODispatch
AS

    
    
    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(50) := 'SAO207818';
    
     
    
    TYPE TYRCDISPATCHS IS RECORD
    (
            HOUR_START             OR_SCHED_PROGRAMING.HOUR_START%TYPE,
            HOUR_END               OR_SCHED_PROGRAMING.HOUR_END%TYPE,
            DURATION               OR_SCHED_PROGRAMING.DURATION%TYPE,
            PROGRAMING_CLASS_ID    OR_SCHED_PROGRAMING.PROGRAMING_CLASS_ID%TYPE,
            PROGRAMING_STATUS      OR_SCHED_PROGRAMING.PROGRAMING_STATUS%TYPE,
            TASK_TYPE_ID           OR_SCHED_PROGRAMING.TASK_TYPE_ID%TYPE,
            PACKAGE_ID             OR_SCHED_PROGRAMING.PACKAGE_ID%TYPE,
            ADDRESS_ID             OR_SCHED_PROGRAMING.ADDRESS_ID%TYPE,
            ORDER_ID               OR_SCHED_PROGRAMING.ORDER_ID%TYPE,
            CONFIRMED              OR_SCHED_PROGRAMING.CONFIRMED%TYPE,
            REAL_DURATION          OR_SCHED_PROGRAMING.REAL_DURATION%TYPE,
            SUGGESTED_DATE         OR_SCHED_PROGRAMING.SUGGESTED_DATE%TYPE,
            SUGGESTED_HOUR         OR_SCHED_PROGRAMING.SUGGESTED_HOUR%TYPE,
            SUGGESTED_PROG_CLASS   OR_SCHED_PROGRAMING.SUGGESTED_PROG_CLASS%TYPE
    );

    
    
    TYPE TYTBDISPATCHS IS TABLE OF TYRCDISPATCHS INDEX BY BINARY_INTEGER;


    
    
    
    CSBPAR_TIME_PROMISE         CONSTANT VARCHAR2(25) := 'TIME_PROMISE';
    CSBPAR_TIME_PROMISE_ALERT   CONSTANT VARCHAR2(25) := 'TIME_PROMISE_ALERT';
    CSBPAR_TIME_REFRESH_DISP    CONSTANT VARCHAR2(25) := 'TIME_REFRESH_DISP';
    CSBPAR_TIME_REFRE_TASKDIS   CONSTANT VARCHAR2(25) := 'TIME_REFRE_TASKDIS';
    CSBPAR_REP_ASSIGN_CLASS     CONSTANT VARCHAR2(25) := 'REP_ASSIGN_CLASS';
    
    CNUMAX_REG_REPOSITION       CONSTANT NUMBER(4) := 1000;
    
    CNUPAIS                     GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;

    
    CNUERR_UNIOPER_SELECT       CONSTANT NUMBER(6) := 122163;
    CNUERR_UNIOPER_NOTSELECT    CONSTANT NUMBER(6) := 122164;
    CNUERR_NOACTION             CONSTANT NUMBER(6) := 13785;
    CNUERR_INVALID_ORDERSTAT    CONSTANT NUMBER(5) := 15762;
    CNUERR_NOT_CANCEL_TASK      CONSTANT NUMBER(6) := 17067;
    CSBDISTANCE_GEO_ORDER       CONSTANT VARCHAR2(20) := 'distance=';
    CNUERR_PARAMETER_VALUE      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 119369;
    CNUERR_PARAMETER_NULL       CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 1422;
    CNUERR_FINAL_STATUS         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE :=  5090;
    CNUERR_VAL_PARAMETER        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 13736;
    CNUERROR_17542              CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 17542;
    CNUSRID                     CONSTANT NUMBER := 8192;
    CNUERROR_121822             CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 121822;
    CNUGENERALCOMMENTTYPE       CONSTANT NUMBER:=30;
    CNUDEFAULTCAUSE             CONSTANT NUMBER := 10;
    CNUINVPARAMERR              CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 119369;
    
    CNUERR_PROGCHANGED          CONSTANT    NUMBER := 3355;
    CNUERR_EXISTSPROG           CONSTANT    NUMBER := 121546;
    
    GNUMAXPRIORITY              NUMBER;
    
    GBLISLOADED                 BOOLEAN := FALSE;
    
    
    
    
    FUNCTION FNUGETUSERCOUNTRY
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;

    PROCEDURE GETPARAMETERS;

    











    PROCEDURE GETPARAMETERS
    IS

    BEGIN

        
        IF ( GBLISLOADED ) THEN
            RETURN;
        END IF;

        GNUMAXPRIORITY := GE_BOPARAMETER.FNUGET('PRIOR_ORDER_DELAYED');

        
        GBLISLOADED := TRUE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPARAMETERS;
    
    PROCEDURE CREATEPROGBLOCK (
        INUSCHED_AVAILABLE_ID   IN  OR_SCHED_PROGRAMING.SCHED_AVAILABLE_ID%TYPE,
        INUHOUR_START           IN  OR_SCHED_PROGRAMING.HOUR_START%TYPE,
        INUHOUR_END             IN  OR_SCHED_PROGRAMING.HOUR_END%TYPE,
        INUDURATION             IN  OR_SCHED_PROGRAMING.DURATION%TYPE,
        INUPROGRAMING_CLASS_ID  IN  OR_SCHED_PROGRAMING.PROGRAMING_CLASS_ID%TYPE,
        ISBPROGRAMING_STATUS    IN  OR_SCHED_PROGRAMING.PROGRAMING_STATUS%TYPE,
        INUTASK_TYPE_ID         IN  OR_SCHED_PROGRAMING.TASK_TYPE_ID%TYPE DEFAULT NULL,
        INUPACKAGE_ID           IN  OR_SCHED_PROGRAMING.PACKAGE_ID%TYPE DEFAULT NULL,
        INUADDRESS_ID           IN  OR_SCHED_PROGRAMING.ADDRESS_ID%TYPE DEFAULT NULL,
        INUORDER_ID             IN  OR_SCHED_PROGRAMING.ORDER_ID%TYPE DEFAULT NULL,
        INUCOMMENT_TYPE_ID      IN  OR_SCHED_PROGRAMING.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT_             IN  OR_SCHED_PROGRAMING.COMMENT_%TYPE DEFAULT NULL,
        ISBCONFIRMED            IN  OR_SCHED_PROGRAMING.CONFIRMED%TYPE DEFAULT NULL,
        INUREAL_DURATION        IN  OR_SCHED_PROGRAMING.REAL_DURATION%TYPE DEFAULT 0,
        IDTSUGGESTED_DATE       IN  OR_SCHED_PROGRAMING.SUGGESTED_DATE%TYPE DEFAULT NULL,
        INUSUGGESTED_HOUR       IN  OR_SCHED_PROGRAMING.SUGGESTED_HOUR%TYPE DEFAULT NULL,
        ISBSUGGESTED_PROG_CLASS IN  OR_SCHED_PROGRAMING.SUGGESTED_PROG_CLASS%TYPE DEFAULT NULL
    )
    IS
        RCSCHEDPROGRAMING   DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
    BEGIN
        
        RCSCHEDPROGRAMING.SCHED_PROGRAMING_ID   := OR_BOSEQUENCES.FNUNEXTOR_SCHED_PROGRAMING;
        RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID    := INUSCHED_AVAILABLE_ID;
        RCSCHEDPROGRAMING.HOUR_START            := INUHOUR_START;
        RCSCHEDPROGRAMING.HOUR_END              := INUHOUR_END;
        RCSCHEDPROGRAMING.DURATION              := INUDURATION;
        RCSCHEDPROGRAMING.PROGRAMING_CLASS_ID   := INUPROGRAMING_CLASS_ID;
        RCSCHEDPROGRAMING.PROGRAMING_STATUS     := ISBPROGRAMING_STATUS;
        RCSCHEDPROGRAMING.TASK_TYPE_ID          := INUTASK_TYPE_ID;
        RCSCHEDPROGRAMING.PACKAGE_ID            := INUPACKAGE_ID;
        RCSCHEDPROGRAMING.ADDRESS_ID            := INUADDRESS_ID;
        RCSCHEDPROGRAMING.ORDER_ID              := INUORDER_ID;
        RCSCHEDPROGRAMING.COMMENT_TYPE_ID       := INUCOMMENT_TYPE_ID;
        RCSCHEDPROGRAMING.COMMENT_              := ISBCOMMENT_;
        RCSCHEDPROGRAMING.CONFIRMED             := ISBCONFIRMED;
        RCSCHEDPROGRAMING.REAL_DURATION         := INUREAL_DURATION;
        RCSCHEDPROGRAMING.SUGGESTED_DATE        := IDTSUGGESTED_DATE;
        RCSCHEDPROGRAMING.SUGGESTED_HOUR        := INUSUGGESTED_HOUR;
        RCSCHEDPROGRAMING.SUGGESTED_PROG_CLASS  := ISBSUGGESTED_PROG_CLASS;

        DAOR_SCHED_PROGRAMING.INSRECORD(RCSCHEDPROGRAMING);
    EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
    END CREATEPROGBLOCK;
    
    














    PROCEDURE FIXFREEBLOCK
    (
        INUSCHEDAVAILABLEID     IN  OR_SCHED_PROGRAMING.SCHED_AVAILABLE_ID%TYPE,
        INUHOURSTART            IN  OR_SCHED_PROGRAMING.HOUR_START%TYPE,
        INUHOUREND              IN  OR_SCHED_PROGRAMING.HOUR_END%TYPE
    )
    IS
        NUSCHEDPROGFREEBLOCK    OR_SCHED_PROGRAMING.SCHED_PROGRAMING_ID%TYPE;
        RCSCHEDPROGFREEBLOCK    DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        NUOLDENDHOUFREBLO       OR_SCHED_PROGRAMING.HOUR_END%TYPE;
    BEGIN
        
        NUSCHEDPROGFREEBLOCK := OR_BCSCHED.FNUGETPROGRAMMINGID(INUSCHEDAVAILABLEID, INUHOURSTART, 0);
        
        
        IF (NUSCHEDPROGFREEBLOCK IS NULL) THEN RETURN; END IF;
        
        RCSCHEDPROGFREEBLOCK := DAOR_SCHED_PROGRAMING.FRCGETRECORD(NUSCHEDPROGFREEBLOCK);

        
        
        IF (RCSCHEDPROGFREEBLOCK.HOUR_START = INUHOURSTART) THEN
            
            NUOLDENDHOUFREBLO := RCSCHEDPROGFREEBLOCK.HOUR_END;
            RCSCHEDPROGFREEBLOCK.HOUR_START := INUHOUREND;
            RCSCHEDPROGFREEBLOCK.DURATION := RCSCHEDPROGFREEBLOCK.HOUR_END - RCSCHEDPROGFREEBLOCK.HOUR_START;

            IF(RCSCHEDPROGFREEBLOCK.DURATION < 0) THEN
               RCSCHEDPROGFREEBLOCK.DURATION := 0;
               RCSCHEDPROGFREEBLOCK.PROGRAMING_STATUS := OR_BOCONSTANTS.CSBPROGSTATUSCANCEL;
            END IF;

            DAOR_SCHED_PROGRAMING.UPDRECORD(RCSCHEDPROGFREEBLOCK);
            RETURN;
        END IF;

        
        NUOLDENDHOUFREBLO := RCSCHEDPROGFREEBLOCK.HOUR_END;
        RCSCHEDPROGFREEBLOCK.HOUR_END := INUHOURSTART;
        RCSCHEDPROGFREEBLOCK.DURATION := RCSCHEDPROGFREEBLOCK.HOUR_END - RCSCHEDPROGFREEBLOCK.HOUR_START;

        IF(RCSCHEDPROGFREEBLOCK.DURATION < 0) THEN
            RCSCHEDPROGFREEBLOCK.DURATION := 0;
            RCSCHEDPROGFREEBLOCK.PROGRAMING_STATUS := OR_BOCONSTANTS.CSBPROGSTATUSCANCEL;
        END IF;

        DAOR_SCHED_PROGRAMING.UPDRECORD(RCSCHEDPROGFREEBLOCK);
        
        
        IF (NUOLDENDHOUFREBLO <= INUHOUREND) THEN RETURN; END IF;
        
        
        CREATEPROGBLOCK(
            INUSCHEDAVAILABLEID,
            INUHOUREND,
            NUOLDENDHOUFREBLO,
            NUOLDENDHOUFREBLO - INUHOUREND,
            OR_BOCONSTANTS.CNUPROGCLASSRANGE,
            OR_BOCONSTANTS.CSBPROGSTATUSFREE
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FIXFREEBLOCK;
    
    
    
    
    FUNCTION FSBVERSION RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


    









    
    
    PROCEDURE GETOPERATINGZONESBYPERSON
    (
        INUPERSONID      IN  GE_PERSON.PERSON_ID%TYPE,
        ORFRESULT        OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetOperatingZonesByPerson', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETOPERATINGZONESBYPERSON(INUPERSONID);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetOperatingZonesByPerson', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;


    










    
    
    PROCEDURE GETOPERATINGUNITSBYPERSON
    (
        INUOPERATINGZONEID      IN  OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE,
        INUPERSONID             IN  GE_PERSON.PERSON_ID%TYPE,
        IDTDATE                 IN  OR_SCHED_AVAILABLE.DATE_%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetOperatingUnitsByPerson', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETOPERATINGUNITSBYPERSON(INUOPERATINGZONEID, INUPERSONID, IDTDATE);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetOperatingUnitsByPerson', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;


    











    
    
    PROCEDURE GETOPERATINGSECTORSBYZONE
    (
        ISBOPERATINGZONES   IN  VARCHAR2,
        ORFRESULT           OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetOperatingSectorsByZone', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETOPERATINGSECTORSBYZONE(ISBOPERATINGZONES);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetOperatingSectorsByZone', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;


    










    
    
    PROCEDURE GETOPERATINGSECTORSBYIDS
    (
        ISBSECTORS          IN  VARCHAR2,
        ORFRESULT           OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetOperatingSectorsByIds', 15);
        ORFRESULT := OR_BCDISPATCH.FRFOPERATINGSECTORSBYIDS(ISBSECTORS);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetOperatingSectorsByIds', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;


    










    PROCEDURE GETORDERSBYSECTOR
    (
        ISBOPERATINGZONES   IN  VARCHAR2,
        INUSECTORID         IN  OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE,
        IDTDATE             IN  OR_ORDER.ARRANGED_HOUR%TYPE,
        ORFRESULT           OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetOrdersbySector', 15);

        ORFRESULT := OR_BCDISPATCH.FRFGETORDERSBYSECTOR(ISBOPERATINGZONES, INUSECTORID, IDTDATE);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetOrdersbySector', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;

    









    PROCEDURE GETDISPATCHSBYUNIT
    (
        INUOPERATINGUNITID  IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBOPERATINGZONES   IN  VARCHAR2,
        IDTDATE             IN  OR_SCHED_DISPATCH.DATE_%TYPE,
        ORFCURSOR           OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetDispatchsByUnit', 15);
        ORFCURSOR :=
            OR_BCDISPATCH.FRFGETDISPATCHSBYUNIT
            (
                INUOPERATINGUNITID,
                ISBOPERATINGZONES,
                IDTDATE
            );
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetDispatchsByUnit', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFCURSOR);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFCURSOR);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    



















    
    PROCEDURE SELECTOPERUNITBYPERSON
    (
        INUPERSONID             IN  OR_PER_UNIT_BY_DATE.PERSON_ID%TYPE,
        IDTDATE                 IN  OR_PER_UNIT_BY_DATE.DATE_%TYPE,
        INUOPERATINGUNITID      IN  OR_PER_UNIT_BY_DATE.OPERATING_UNIT_ID%TYPE,
        ISBOPERATINGZONES       IN  VARCHAR2
    )
    IS
        TBLOPERATINGUNIT        UT_STRING.TYTB_STRING;
        RCOPERATINGUNIT         DAOR_PER_UNIT_BY_DATE.STYOR_PER_UNIT_BY_DATE;
        
        NUPAIS                  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.selectOperUnitByPerson', 10);

        
        DAGE_PERSON.ACCKEY(INUPERSONID);

        
        DAOR_OPERATING_UNIT.ACCKEY(INUOPERATINGUNITID);

        
        NUPAIS := FNUGETUSERCOUNTRY;
        DAGE_CALENDAR.ACCKEY(IDTDATE, NUPAIS);

        
        RCOPERATINGUNIT.PER_UNIT_BY_DATE_ID := OR_BOSEQUENCES.FNUNEXTOR_PER_UNIT_BY_DATE;
        RCOPERATINGUNIT.PERSON_ID := INUPERSONID;
        RCOPERATINGUNIT.OPERATING_UNIT_ID := INUOPERATINGUNITID;
        RCOPERATINGUNIT.DATE_ := IDTDATE;
        RCOPERATINGUNIT.ZONES := ISBOPERATINGZONES;

        
        DAOR_PER_UNIT_BY_DATE.INSRECORD(RCOPERATINGUNIT);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.selectOperUnitByPerson', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


  	










    PROCEDURE FREEOPERUNITBYPERSON
    (
        INUPERSONID             IN  OR_PER_UNIT_BY_DATE.PERSON_ID%TYPE,
        IDTDATE                 IN  OR_PER_UNIT_BY_DATE.DATE_%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.freeOperUnitByPerson', 15);

        OR_BCDISPATCH.REMOVEOPERUNITBYPERSON(INUPERSONID, IDTDATE);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.freeOperUnitByPerson', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
  	









    PROCEDURE GETPROGRAMINGCLASS
    (
        ORFQUERY                OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.getProgramingClass', 10);

        ORFQUERY := OR_BCDISPATCH.FRFGETPROGRAMINGCLASS;

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.getProgramingClass', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFQUERY);
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.getProgramingClass', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFQUERY);
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.getProgramingClass', 10);
            RAISE EX.CONTROLLED_ERROR;
    END;


  	











    PROCEDURE GETSCHEDBYOPERUNITS
    (
        ISBOPERATINGZONES       IN  VARCHAR2,
        IDTDATE                 IN  OR_SCHED_AVAILABLE.DATE_%TYPE,
        INUOPERATINGUNITID      IN  OR_SCHED_AVAILABLE.OPERATING_UNIT_ID%TYPE,
        ORFQUERY                OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetSchedByOperUnits', 10);
        UT_TRACE.TRACE('--isbOperatingZones: ['||  ISBOPERATINGZONES
            ||  '] - idtdate: ['               ||  TO_CHAR(IDTDATE, UT_DATE.FSBDATE_FORMAT)
            ||  '] - inuOperatingUnitId: ['    ||  INUOPERATINGUNITID || ']', 10);

        ORFQUERY := OR_BCDISPATCH.FRFGETSCHEDBYOPERUNITS
        (
            ISBOPERATINGZONES,
            TRUNC(IDTDATE),
            INUOPERATINGUNITID
        );

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetSchedByOperUnits', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFQUERY);
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.GetSchedByOperUnits', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFQUERY);
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.GetSchedByOperUnits', 10);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
  	









    PROCEDURE GETTIMEPROMISE
    (
        ONUTIMEPROMISE         OUT NUMBER
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.getTimePromise', 10);

        
        ONUTIMEPROMISE := GE_BOPARAMETER.FNUGET(CSBPAR_TIME_PROMISE);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.getTimePromise', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.getTimePromise', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.getTimePromise', 10);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
  	









    PROCEDURE GETTIMEPROMISEALERT
    (
        ONUTIMEPROMISEALERT     OUT NUMBER
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.getTimePromiseAlert', 10);

        
        ONUTIMEPROMISEALERT := GE_BOPARAMETER.FNUGET(CSBPAR_TIME_PROMISE_ALERT);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.getTimePromiseAlert', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.getTimePromiseAlert', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.getTimePromiseAlert', 10);
            RAISE EX.CONTROLLED_ERROR;
    END;


  	









    PROCEDURE GETTIMEREFRESHDISPATCH
    (
        ONUTIMEREFRESHDISPATCH  OUT NUMBER
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.getTimeRefreshDispatch', 10);

        
        ONUTIMEREFRESHDISPATCH := GE_BOPARAMETER.FNUGET(CSBPAR_TIME_REFRESH_DISP);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.getTimeRefreshDispatch', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.getTimeRefreshDispatch', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.getTimeRefreshDispatch', 10);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
  	





































    PROCEDURE UPDATEORDERSTATUS
    (
        RCSCHEDDISPATCH     IN DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH,
        INUORDERSTATUS        IN OR_ORDER.ORDER_STATUS_ID%TYPE,
        INUCOMMENTTYPEID  IN OR_ORDER_STAT_CHANGE.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        IDTCHANGEDATE IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        RCORDER               DAOR_ORDER.STYOR_ORDER;
        NUADMINORDERID  OR_ORDER.ORDER_ID%TYPE;
        NUESTADOINI        OR_ORDER.ORDER_STATUS_ID%TYPE;
        
                FUNCTION FSBGETRANGEDESCRIPTION RETURN VARCHAR2
        IS
            SBRANGEDESCRIPTION  OR_ORDER_STAT_CHANGE.RANGE_DESCRIPTION%TYPE;
            RCSCHEDAVAILABLE    DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        BEGIN
            
            OR_BCSCHED.GETAVAILABLEBYUDX(RCSCHEDDISPATCH.SCHEDULER_ID,
                                         RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                                         RCSCHEDDISPATCH.OPERATING_ZONE_ID,
                                         RCSCHEDDISPATCH.DATE_,
                                         RCSCHEDAVAILABLE);

            
            SBRANGEDESCRIPTION := OR_BOSCHED.FSBGETAVAILRANGEDESC(
                RCSCHEDDISPATCH.ORDER_ID,
                RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                RCSCHEDDISPATCH.DATE_,
                RCSCHEDDISPATCH.OPERATING_ZONE_ID,
                RCSCHEDAVAILABLE.HOUR_ENTRANCE,
                RCSCHEDAVAILABLE.HOUR_EXIT,
                RCSCHEDDISPATCH.HOUR_START,
                RCSCHEDDISPATCH.HOUR_END
            );
            RETURN SBRANGEDESCRIPTION;
        EXCEPTION
            WHEN OTHERS THEN
                RETURN NULL;
        END FSBGETRANGEDESCRIPTION;

    BEGIN
        UT_TRACE.TRACE(' -- [INICIO] OR_BODispatch.updateOrderStatus', 15);
        UT_TRACE.TRACE('inuOrderId: [' || RCSCHEDDISPATCH.ORDER_ID || '] - '
            || 'inuOrderStatus: [' || INUORDERSTATUS || ']', 16);
        
        
        DAOR_ORDER.GETRECORD(RCSCHEDDISPATCH.ORDER_ID, RCORDER);
        NUESTADOINI := RCORDER.ORDER_STATUS_ID;
        
        
        IF (RCORDER.ORDER_STATUS_ID = INUORDERSTATUS) THEN
            UT_TRACE.TRACE('-- [FIN]  OR_BODispatch.updateOrderStatus', 15);
            RETURN;
        END IF;

        
        IF (RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_WAITING) THEN
            UT_TRACE.TRACE('Ejecuta: [OR_boOrderTransition.changeStatus]',17);
            
            OR_BOORDERTRANSITION.CHANGESTATUS(
                RCORDER,
                OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN,
                OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                TRUE,
                RCORDER.ARRANGED_HOUR,
                FSBGETRANGEDESCRIPTION,
                RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                INUCOMMENTTYPEID,
                NULL,
                IDTCHANGEDATE
            );
            
            DAOR_ORDER.UPDRECORD(RCORDER);
            
            GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(RCORDER,NUESTADOINI);
            UT_TRACE.TRACE('-- [FIN]  OR_boOrderTransition.changeStatus', 15);
        END IF;
        
        
        IF (INUORDERSTATUS = OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING ) THEN
            UT_TRACE.TRACE('-- [INICIO]  Movilizado: ', 16);
           IF (OR_BCDISPATCH.FBLEXDISPMOVBYUNITDATE(RCSCHEDDISPATCH.OPERATING_UNIT_ID, RCSCHEDDISPATCH.ORDER_ID)) THEN 
                GE_BOERRORS.SETERRORCODE(122266);
           END  IF;

            
            OR_BOORDERTRANSITION.CHANGESTATUS(
              RCORDER,
              OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN,
              OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING,
              TRUE,
              RCORDER.ARRANGED_HOUR,
              FSBGETRANGEDESCRIPTION,
              RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
              RCSCHEDDISPATCH.OPERATING_UNIT_ID,
              RCSCHEDDISPATCH.OPERATING_UNIT_ID,
              INUCOMMENTTYPEID,
              NULL,
              IDTCHANGEDATE
            );
            
            DAOR_ORDER.UPDRECORD(RCORDER);
            
            GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(RCORDER,NUESTADOINI);
            UT_TRACE.TRACE(' -- [FIN] Movilizando', 16);
        END IF;

        
        IF (INUORDERSTATUS = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING) THEN
            UT_TRACE.TRACE('Ejecuta: [OR_BOProcessOrder.startExecution]',17);
           IF (OR_BCDISPATCH.FBLEXDISPMOVBYUNITDATE(RCSCHEDDISPATCH.OPERATING_UNIT_ID, RCSCHEDDISPATCH.ORDER_ID)) THEN
                GE_BOERRORS.SETERRORCODE(122266);
           END IF;

            OR_BOPROCESSORDER.STARTEXECUTION(RCORDER,NULL,NULL,IDTCHANGEDATE);
            UT_TRACE.TRACE(' -- [FIN] OR_BODispatch.updateOrderStatus', 15);
        END IF;
        
        
        IF (INUORDERSTATUS = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED) THEN
            UT_TRACE.TRACE('Ejecuta: [OR_BOProcessOrder.endExecution]',17);
            OR_BOPROCESSORDER.ENDEXECUTION(RCORDER,NULL,NULL,IDTCHANGEDATE);
            UT_TRACE.TRACE(' -- [FIN] OR_BODispatch.updateOrderStatus', 15);
            RETURN;
        END IF;
        
        
        IF (INUORDERSTATUS = OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED AND
            (RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING OR
             RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING)) THEN
            UT_TRACE.TRACE('Ejecuta: [OR_boOrderTransition.changeStatus]',17);
            
            OR_BOORDERTRANSITION.CHANGESTATUS(
              RCORDER,
              OR_BOCONSTANTS.CNUORDER_ACTION_POSTPONE,
              OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
              TRUE,
              RCORDER.ARRANGED_HOUR,
              FSBGETRANGEDESCRIPTION,
              RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
              RCSCHEDDISPATCH.OPERATING_UNIT_ID,
              RCSCHEDDISPATCH.OPERATING_UNIT_ID,
              INUCOMMENTTYPEID,
              NULL,
              IDTCHANGEDATE
            );

            
            DAOR_ORDER.UPDRECORD(RCORDER);
            UT_TRACE.TRACE(' -- [FIN] OR_BODispatch.updateOrderStatus', 15);
            RETURN;
        END IF;

        
        IF (INUORDERSTATUS = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED AND
            (RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING OR
             RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING OR
             RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN)) THEN
            UT_TRACE.TRACE('Ejecuta: [OR_boOrderTransition.changeStatus]',17);
            
            OR_BOORDERTRANSITION.CHANGESTATUS(
                RCORDER,
                OR_BOCONSTANTS.CNUORDER_ACTION_POSTPONE,
                OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                TRUE,
                RCORDER.ARRANGED_HOUR,
                FSBGETRANGEDESCRIPTION,
                RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                INUCOMMENTTYPEID,
                NULL,
                IDTCHANGEDATE
            );
            
            DAOR_ORDER.UPDRECORD(RCORDER);
            UT_TRACE.TRACE('--[FIN] OR_BODispatch.updateOrderStatus', 15);
            RETURN;
        END IF;

        
        IF(RCSCHEDDISPATCH.DATE_ = TRUNC(UT_DATE.FDTSYSDATE)) THEN
           OR_BOADMINORDER.GENADMINORDERBYTIME(RCSCHEDDISPATCH,NUADMINORDERID);
        END IF;
        
        UT_TRACE.TRACE(' -- [FIN] OR_BODispatch.updateOrderStatus: '||NUADMINORDERID, 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEORDERSTATUS;
    
    











    PROCEDURE VALIDATEFREESPACE
    (
        INUOPERATINGUNITID  IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        INUHOURSTART        IN  OR_SCHED_DISPATCH.HOUR_START%TYPE,
        INUDURATION         IN  OR_SCHED_DISPATCH.DURATION%TYPE,
        INUORDERID          IN  OR_SCHED_DISPATCH.ORDER_ID%TYPE,
        IDTDATE             IN  OR_SCHED_DISPATCH.DATE_%TYPE
    )
    IS
        BLEXISTBLOCK            BOOLEAN;
    BEGIN
        BLEXISTBLOCK := OR_BCDISPATCH.FBLBLOCKOVERLAPING
                        (
                           INUOPERATINGUNITID,
                           INUHOURSTART,
                           INUHOURSTART + INUDURATION,
                           INUORDERID,
                           IDTDATE
                        );

        IF (BLEXISTBLOCK) THEN
            ERRORS.SETERROR(5909);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATEFREESPACE;
    
    






















































    PROCEDURE UPDATESCHEDDISPATCH
    (
        INUSCHEDDISPATCH    IN  OR_SCHED_DISPATCH.SCHED_DISPATCH_ID%TYPE,
        ISBDISPATHSTATUS    IN  OR_SCHED_DISPATCH.DISPATCH_STATUS%TYPE,
        INUOPERATINGUNIT    IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        INUHOURSTART        IN  OR_SCHED_DISPATCH.HOUR_START%TYPE ,
        INUORDERSTATUS      IN  OR_ORDER.ORDER_STATUS_ID%TYPE DEFAULT NULL,
        INUDURATION         IN  OR_SCHED_DISPATCH.DURATION%TYPE DEFAULT NULL,
        INUSCHEDULER        IN  OR_SCHED_DISPATCH.SCHEDULER_ID%TYPE DEFAULT NULL,
        INUOPERATINGZONE    IN  OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE DEFAULT NULL,
        IDTDATE             IN  OR_SCHED_DISPATCH.DATE_%TYPE DEFAULT NULL,
        INUCOMMENTTYPEID	IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT		    IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        INUORIORDERSTATUS   IN  OR_ORDER.ORDER_STATUS_ID%TYPE DEFAULT NULL,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        DTDATE                  DATE;
        DTDATELTCHGE            DATE;
        RCSCHEDDISPATCH         DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        RCORDER                 DAOR_ORDER.STYOR_ORDER;
        BLCHANGEOPERUNIT        BOOLEAN := FALSE;
        NUSCHEDULER             OR_SCHED_DISPATCH.SCHEDULER_ID%TYPE;
        NUOPERATINGZONE         OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE;
        NUOPERATINGUNIT         OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE;
        RCOLDSCHEDAVAILABLE     DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        RCSCHEDAVAILABLE        DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        BLINSORDERCHANGE        BOOLEAN := TRUE;
        NUOLDOPERUNITID         OR_ORDER.OPERATING_UNIT_ID%TYPE;

        RCSCHEDPROGRAMING       DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        BLEXISTSPROGRAMING      BOOLEAN;
        NUOLDPROGRAMINGSTATUS   OR_SCHED_PROGRAMING.PROGRAMING_STATUS%TYPE;
        NUOLDHOURSTART          OR_SCHED_PROGRAMING.HOUR_START%TYPE;
    BEGIN
        SAVEPOINT BEFOREUPDATE;

        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.updateSchedDispatch', 10);
        UT_TRACE.TRACE('inuSchedDispatch: ['    ||  INUSCHEDDISPATCH
            ||'] - isbDispathStatus: ['         ||  ISBDISPATHSTATUS
            ||'] - inuOperatingUnit: ['         ||  INUOPERATINGUNIT
            ||'] - inuOrderStatus: ['           ||  INUORDERSTATUS
            ||'] - inuCommentTypeId: ['         ||  INUCOMMENTTYPEID
            ||'] - inuHourStart: ['             ||  INUHOURSTART    || ']', 11);


        BEGIN
            
            DAOR_SCHED_DISPATCH.GETRECORD(INUSCHEDDISPATCH, RCSCHEDDISPATCH);
        EXCEPTION
            WHEN OTHERS THEN
                GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END;

        
        OR_BCSCHED.GETAVAILABLEBYUDXBLOQ(
                RCSCHEDDISPATCH.SCHEDULER_ID,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                RCSCHEDDISPATCH.OPERATING_ZONE_ID,
                RCSCHEDDISPATCH.DATE_,
                RCOLDSCHEDAVAILABLE
            );

        IF (RCOLDSCHEDAVAILABLE.SCHED_AVAILABLE_ID IS NULL) THEN
            UT_TRACE.TRACE('No se encontr� la disponibilidad Origen: ['||RCSCHEDDISPATCH.SCHEDULER_ID
                ||']['||RCSCHEDDISPATCH.OPERATING_UNIT_ID
                ||']['||RCSCHEDDISPATCH.OPERATING_ZONE_ID
                ||']['||RCSCHEDDISPATCH.DATE_
                ||']');
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;

        
        BEGIN
            
            DAOR_SCHED_DISPATCH.LOCKBYPK(INUSCHEDDISPATCH, RCSCHEDDISPATCH);
        EXCEPTION
            WHEN OTHERS THEN
                GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END;

        
        DAOR_ORDER.LOCKBYPK(RCSCHEDDISPATCH.ORDER_ID, RCORDER);

        IF ((INUORIORDERSTATUS IS NOT NULL) AND
            (INUORIORDERSTATUS <> RCORDER.ORDER_STATUS_ID)) THEN
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;

        
        
        IF (ISBDISPATHSTATUS = OR_BOCONSTANTS.CSBDISPATCHSTATUSMISSED) THEN
            OR_BOPROGRAMING.DELETERESERVE(
                RCSCHEDDISPATCH.ORDER_ID,
                TRUE,
                NVL(INUCOMMENTTYPEID, OR_BOORDERCOMMENT.FNUGETLASTCOMMTYPE ),
                ISBCOMMENT,
                FALSE
            );
            OR_BOORDERCOMMENT.CLEARLASTCOMMTYPE;
            UT_TRACE.TRACE('--[FIN] OR_BODispatch.updateSchedDispatch [DispatchStatusMissed]', 10);
            RETURN;
        END IF;
        
        
        
        IF (ISBDISPATHSTATUS = OR_BOCONSTANTS.CSBDISPATCHSTATUSREPROG) THEN
            RCSCHEDDISPATCH.DISPATCH_STATUS      := ISBDISPATHSTATUS;
            DAOR_SCHED_DISPATCH.UPDRECORD(RCSCHEDDISPATCH);
            UT_TRACE.TRACE('--[FIN] OR_BODispatch.updateSchedDispatch [DispatchStatusReprog]', 10);
            RETURN;
        END IF;

        NUSCHEDULER := INUSCHEDULER;
        NUOPERATINGZONE := INUOPERATINGZONE;
        DTDATE := IDTDATE;
        NUOPERATINGUNIT := INUOPERATINGUNIT;
        
        IF (INUSCHEDULER IS NULL) THEN
            NUSCHEDULER := RCOLDSCHEDAVAILABLE.SCHEDULER_ID;
        END IF;
        IF (INUOPERATINGZONE IS NULL) THEN
            NUOPERATINGZONE := RCOLDSCHEDAVAILABLE.OPERATING_ZONE_ID;
        END IF;
        IF (IDTDATE IS NULL) THEN
            DTDATE := RCOLDSCHEDAVAILABLE.DATE_;
        END IF;
        IF (INUOPERATINGUNIT IS NULL) THEN
            NUOPERATINGUNIT := RCOLDSCHEDAVAILABLE.OPERATING_UNIT_ID;
        END IF;

        
        OR_BCSCHED.GETAVAILABLEBYUDXBLOQ(
                NUSCHEDULER,
                NUOPERATINGUNIT,
                NUOPERATINGZONE,
                DTDATE,
                RCSCHEDAVAILABLE
            );

        IF (RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID IS NULL) THEN
            UT_TRACE.TRACE('No se encontr� la disponibilidad destino: ['||NUSCHEDULER
                ||']['||NUOPERATINGUNIT
                ||']['||NUOPERATINGZONE
                ||']['||DTDATE
                ||']', 15);
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;

        
        RCSCHEDDISPATCH.DURATION := NVL(INUDURATION,RCSCHEDDISPATCH.DURATION);
        
        
        NUOLDHOURSTART := RCSCHEDDISPATCH.HOUR_START;
        RCSCHEDDISPATCH.HOUR_START           := INUHOURSTART;
        RCSCHEDDISPATCH.HOUR_END             := INUHOURSTART + RCSCHEDDISPATCH.DURATION;

        NUSCHEDULER := INUSCHEDULER;
        NUOPERATINGZONE := INUOPERATINGZONE;
        UT_TRACE.TRACE('nuOldHourStart ['||NUOLDHOURSTART||']',15);
        UT_TRACE.TRACE('rcSchedDispatch.hour_start ['||RCSCHEDDISPATCH.HOUR_START||']',15);
        UT_TRACE.TRACE('rcSchedDispatch.hour_end ['||RCSCHEDDISPATCH.HOUR_END||']',15);

        
        IF (ISBDISPATHSTATUS = OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED) THEN

            
            IF ((RCSCHEDDISPATCH.HOUR_START < RCSCHEDAVAILABLE.HOUR_ENTRANCE) OR
                (RCSCHEDDISPATCH.HOUR_START > RCSCHEDAVAILABLE.HOUR_EXIT) OR
                (RCSCHEDDISPATCH.HOUR_END > RCSCHEDAVAILABLE.HOUR_EXIT))THEN
                UT_TRACE.TRACE('Bloque fuera de la franja'||CHR(10)||
                               'Bloque Hora Ini ['||RCSCHEDDISPATCH.HOUR_START||'] Bloque Hora Fin ['||RCSCHEDDISPATCH.HOUR_END||CHR(10)||
                               'Disp Hora Ini ['||RCSCHEDAVAILABLE.HOUR_ENTRANCE||']'||' Disp Hora Fin ['||RCSCHEDAVAILABLE.HOUR_EXIT||']');
                GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
            END IF;

            
            VALIDATEFREESPACE( INUOPERATINGUNIT,
                               INUHOURSTART,
                               RCSCHEDDISPATCH.DURATION,
                               RCSCHEDDISPATCH.ORDER_ID,
                               IDTDATE
            );
            IF ((INUSCHEDULER IS NULL) OR
                (INUOPERATINGZONE IS NULL)) THEN

                IF (INUSCHEDULER IS NULL) THEN
                    NUSCHEDULER := RCSCHEDAVAILABLE.SCHEDULER_ID;
                END IF;
                IF (INUOPERATINGZONE IS NULL) THEN
                    NUOPERATINGZONE := RCSCHEDAVAILABLE.OPERATING_ZONE_ID;
                END IF;
            END IF;
        END IF;

        
        RCSCHEDDISPATCH.SCHEDULER_ID := NVL(NUSCHEDULER,RCSCHEDDISPATCH.SCHEDULER_ID);
        
        RCSCHEDDISPATCH.OPERATING_ZONE_ID := NVL(NUOPERATINGZONE,RCSCHEDDISPATCH.OPERATING_ZONE_ID);

        
        IF (IDTDATE IS NULL ) THEN
            DTDATE  := UT_DATE.FDTGETDATETIMEADDMINUTES(TRUNC(RCSCHEDDISPATCH.DATE_), INUHOURSTART);
        ELSE
            DTDATE :=  UT_DATE.FDTGETDATETIMEADDMINUTES(TRUNC(IDTDATE), INUHOURSTART);
            RCSCHEDDISPATCH.DATE_ := TRUNC(IDTDATE);
        END IF;

        NUOLDOPERUNITID := RCORDER.OPERATING_UNIT_ID;
        
        IF (RCSCHEDDISPATCH.OPERATING_UNIT_ID    != INUOPERATINGUNIT ) THEN
            RCSCHEDDISPATCH.OPERATING_UNIT_ID    := INUOPERATINGUNIT;
            RCSCHEDDISPATCH.OPERATING_UNIT_DESC  := DAOR_OPERATING_UNIT.FSBGETNAME(INUOPERATINGUNIT);
            BLCHANGEOPERUNIT := TRUE;
        ELSIF (ISBDISPATHSTATUS <> OR_BOCONSTANTS.CSBDISPATCHSTATUSREPROG) THEN
            RCORDER.ARRANGED_HOUR := DTDATE;
            RCORDER.EXEC_ESTIMATE_DATE := DTDATE;
            DAOR_ORDER.UPDRECORD(RCORDER);
        END IF;

        IF (BLCHANGEOPERUNIT) THEN
            
            OR_BOPROCESSORDER.PROCESSREASSINGORDER
            (   RCSCHEDDISPATCH.ORDER_ID,
                INUOPERATINGUNIT,
                DTDATE,
                FALSE
            );
        END IF;

        
        IF ( INUORDERSTATUS IS NOT NULL) THEN
            UPDATEORDERSTATUS(RCSCHEDDISPATCH, INUORDERSTATUS, INUCOMMENTTYPEID,IDTCHANGEDATE);
            BLINSORDERCHANGE := FALSE;
             
            IF(INUORDERSTATUS = OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED) THEN
                IF_BOELEMENTOUTAGE.CLOSEELEMOUTAGEBYORDER(RCSCHEDDISPATCH.ORDER_ID);
            END IF;
        END IF;

        
        RCSCHEDDISPATCH.DISPATCH_STATUS      := ISBDISPATHSTATUS;
        
         
        IF (ISBDISPATHSTATUS = OR_BOCONSTANTS.CSBDISPATCHSTATUSCLOSE OR
            ISBDISPATHSTATUS = OR_BOCONSTANTS.CSBDISPATCHSTATUSLEGALIZED) THEN
            
            
            OR_BOORDERTRANSITION.FIXDISPATCHSIZE(RCSCHEDDISPATCH);
        END IF;
        
        
        DAOR_SCHED_DISPATCH.UPDRECORD(RCSCHEDDISPATCH);

        IF (BLINSORDERCHANGE AND (ISBDISPATHSTATUS NOT IN (OR_BOCONSTANTS.CSBDISPATCHSTATUSLEGALIZED,
                                               OR_BOCONSTANTS.CSBDISPATCHSTATUSREPROG))) THEN
            DAOR_ORDER.GETRECORD(RCSCHEDDISPATCH.ORDER_ID, RCORDER);
            IF (IDTCHANGEDATE IS NOT NULL) THEN
                DTDATELTCHGE := OR_BCORDERSTATCHANG.FDTGETCHANGEDATE(RCSCHEDDISPATCH.ORDER_ID,RCORDER.ORDER_STATUS_ID);
                IF (DTDATELTCHGE IS NOT NULL) THEN
                    OR_BOFWLEGALIZEORDER.VALIDATEFINALDATE(DTDATELTCHGE,IDTCHANGEDATE);
                ELSE
                    OR_BOFWLEGALIZEORDERUTIL.VALIDFINALDATEOFSYSDATE(IDTCHANGEDATE);
                END IF;
            END IF;
            
            OR_BCORDERSTATCHANG.INSRECORD(
                RCSCHEDDISPATCH.ORDER_ID,
                OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN,
                RCORDER.ORDER_STATUS_ID,
                RCORDER.ORDER_STATUS_ID,
                RCORDER.EXEC_ESTIMATE_DATE,
                OR_BOSCHED.FSBGETAVAILRANGEDESC(
                    RCSCHEDDISPATCH.ORDER_ID,
                    RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                    RCSCHEDDISPATCH.DATE_,
                    RCSCHEDDISPATCH.OPERATING_ZONE_ID,
                    RCSCHEDAVAILABLE.HOUR_ENTRANCE,
                    RCSCHEDAVAILABLE.HOUR_EXIT,
                    RCSCHEDDISPATCH.HOUR_START,
                    RCSCHEDDISPATCH.HOUR_END
                ),
                RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                NUOLDOPERUNITID,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                NVL(INUCOMMENTTYPEID, OR_BOORDERCOMMENT.FNUGETLASTCOMMTYPE),
                NULL,
                IDTCHANGEDATE
            );
            OR_BOORDERCOMMENT.CLEARLASTCOMMTYPE;
        END IF;

        IF (ISBDISPATHSTATUS = OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED AND
            NUOLDHOURSTART <> RCSCHEDDISPATCH.HOUR_START OR  BLCHANGEOPERUNIT) THEN
            
            
            BLEXISTSPROGRAMING :=
                OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(RCSCHEDDISPATCH.ORDER_ID, RCSCHEDPROGRAMING);

            
            IF (BLEXISTSPROGRAMING) THEN
                NUOLDPROGRAMINGSTATUS := RCSCHEDPROGRAMING.PROGRAMING_STATUS;
                
                RCSCHEDPROGRAMING.PROGRAMING_STATUS := OR_BOCONSTANTS.CSBPROGSTATUSREPROG;
                
                RCSCHEDPROGRAMING.COMMENT_TYPE_ID := INUCOMMENTTYPEID;
                RCSCHEDPROGRAMING.COMMENT_        := SUBSTR(ISBCOMMENT, 1, 200);
                
                DAOR_SCHED_PROGRAMING.UPDRECORD(RCSCHEDPROGRAMING);

                IF (NUOLDPROGRAMINGSTATUS != OR_BOCONSTANTS.CSBPROGSTATUSOVERLOAD) THEN
                    
                    OR_BOPROGRAMING.GENERATEBLOCK
                    (
                        RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID,
                        RCSCHEDPROGRAMING.HOUR_START,
                        RCSCHEDPROGRAMING.DURATION,
                        RCSCHEDPROGRAMING.SCHED_PROGRAMING_ID
                    );
                END IF;
                
                OR_BOSCHED.RECALAVAILABILITYTIMES(RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID);

                
                
                CREATEPROGBLOCK(
                    RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID,
                    RCSCHEDDISPATCH.HOUR_START,
                    RCSCHEDDISPATCH.HOUR_END,
                    RCSCHEDDISPATCH.DURATION,
                    RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                    OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED,
                    RCSCHEDDISPATCH.TASK_TYPE_ID,
                    RCSCHEDDISPATCH.PACKAGE_ID,
                    RCSCHEDDISPATCH.ADDRESS_ID,
                    RCSCHEDDISPATCH.ORDER_ID,
                    NULL,
                    NULL,
                    RCSCHEDDISPATCH.CONFIRMED,
                    RCSCHEDDISPATCH.DURATION_REQUIRED,
                    RCSCHEDPROGRAMING.SUGGESTED_DATE,
                    RCSCHEDPROGRAMING.SUGGESTED_HOUR,
                    RCSCHEDPROGRAMING.SUGGESTED_PROG_CLASS
                );
                
                FIXFREEBLOCK(RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID, RCSCHEDDISPATCH.HOUR_START, RCSCHEDDISPATCH.HOUR_END);
            END IF;

        END IF;

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.updateSchedDispatch', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.updateSchedDispatch', 10);
            ROLLBACK TO BEFOREUPDATE;
            RAISE EX.CONTROLLED_ERROR;
        WHEN     OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.updateSchedDispatch', 10);
            ROLLBACK TO BEFOREUPDATE;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATESCHEDDISPATCH;

  	












    PROCEDURE UPDATEOPERUNITSTATUS
    (
        INUOPERATINGUNIT        IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUOPERUNITSTATUS       IN  OR_OPERATING_UNIT.OPER_UNIT_STATUS_ID%TYPE
    )
    IS
        RCOPERATINGUNIT         DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.updateOperUnitStatus', 10);
        UT_TRACE.TRACE('inuOperatingUnit: ['    ||  INUOPERATINGUNIT
            ||'] - inuOperUnitStatus: ['        ||  INUOPERUNITSTATUS || ']', 11);

        
        DAOR_OPERATING_UNIT.GETRECORD(INUOPERATINGUNIT, RCOPERATINGUNIT);

        OR_BOOPERATINGUNIT.CHANGESTATUS( INUOPERATINGUNIT, RCOPERATINGUNIT.OPER_UNIT_STATUS_ID, INUOPERUNITSTATUS, CNUDEFAULTCAUSE);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.updateOperUnitStatus', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.updateOperUnitStatus', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.updateOperUnitStatus', 10);
            RAISE EX.CONTROLLED_ERROR;
    END;

  	












    PROCEDURE GETSTATUSOPERUNIT
    (
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.getStatusOperUnit', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETSTATUSOPERUNIT;
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.getStatusOperUnit', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;

  	




















    PROCEDURE GETTASKTYPESBYUNIT
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.getTaskTypesByUnit', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETTASKTYPEBYUNIT(INUOPERATINGUNITID);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.getTaskTypesByUnit', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    










    PROCEDURE GETDISPATCH
    (
        INUSCHEDDISPATCH        IN  OR_SCHED_DISPATCH.SCHED_DISPATCH_ID%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetDispatch', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETDISPATCH(INUSCHEDDISPATCH);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetDispatch', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;


  	












































    PROCEDURE CREATEDISPATCHFORORDER
    (
        INUOPERATINGZONEID      IN  OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE,
        IDTDATE                 IN  OR_SCHED_DISPATCH.DATE_%TYPE,
        INUOPERATINGUNITID      IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        INUSCHEDULERID          IN  OR_SCHED_DISPATCH.SCHEDULER_ID%TYPE,
        INUORDERID              IN  OR_SCHED_DISPATCH.ORDER_ID%TYPE,
        INUTASKTYPE             IN  OR_SCHED_DISPATCH.TASK_TYPE_ID%TYPE,
        INUHOURSTART            IN  OR_SCHED_DISPATCH.HOUR_START%TYPE,
        INUDURATION             IN  OR_SCHED_DISPATCH.DURATION%TYPE,
        INUREALDURATION         IN  OR_SCHED_PROGRAMING.REAL_DURATION%TYPE,
        IDTSUGGESTEDDATE        IN  OR_SCHED_PROGRAMING.SUGGESTED_DATE%TYPE,
        INUSUGGESTEDHOUR        IN  OR_SCHED_PROGRAMING.SUGGESTED_HOUR%TYPE,
        INUSUGGESTEDPROG        IN  OR_SCHED_PROGRAMING.SUGGESTED_PROG_CLASS%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
        RCSCHEDDISPATCH         DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        NUPACKAGEID             OR_SCHED_DISPATCH.PACKAGE_ID%TYPE;
        NUADDRESSID             OR_SCHED_DISPATCH.ADDRESS_ID%TYPE;
        DTDATE                  DATE;
        NUAVAILABILITYID        OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE;
        RCSCHEDPROGRAM          DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        RCORDER                 DAOR_ORDER.STYOR_ORDER;
        NUSUBSCRIBERID          GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUPROGRAMMCLASS         OR_SCHED_PROGRAMING.PROGRAMING_CLASS_ID%TYPE;
        RCSCHEDAVAILABLE        DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        RCSCHEDPROGRAMING       DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        NUPAIS                  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
    BEGIN
        SAVEPOINT BEFOREINSERT;
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.createDispatchForOrder', 11);
        
        UT_TRACE.TRACE('inuOperatingZoneId => ['|| INUOPERATINGZONEID
            || '] - idtDate  => ['              || IDTDATE
            || '] - inuOperatingUnitId => ['    || INUOPERATINGUNITID
            || '] - inuOrderId => ['            || INUORDERID
            || '] - inuTaskType => ['           || INUTASKTYPE
            || '] - inuHourStart => ['          || INUHOURSTART
            || '] - inuDuration => ['           || INUDURATION
            || '] - inuRealDuration => ['       || INUREALDURATION
            || '] - idtSuggestedDate => ['      || IDTSUGGESTEDDATE
            || '] - inuSuggestedHour => ['      || INUSUGGESTEDHOUR
            || '] - inuSuggestedProg => ['      || INUSUGGESTEDPROG || ']',12);

        OR_BCSCHED.GETAVAILABLEBYUDXBLOQ(
            INUSCHEDULERID,
            INUOPERATINGUNITID,
            INUOPERATINGZONEID,
            IDTDATE,
            RCSCHEDAVAILABLE
        );
        
        IF (RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID IS NULL) THEN
            UT_TRACE.TRACE('No se encontr� la disponibilidad: ['||RCSCHEDDISPATCH.SCHEDULER_ID
                ||']['||RCSCHEDDISPATCH.OPERATING_UNIT_ID
                ||']['||RCSCHEDDISPATCH.OPERATING_ZONE_ID
                ||']['||RCSCHEDDISPATCH.DATE_
                ||']');
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;

        
        DAOR_ORDER.LOCKBYPK(INUORDERID, RCORDER);
        
        IF (RCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED) THEN
            IF (OR_BCDISPATCH.FBLEXISTDISPBYORDER(INUORDERID, RCSCHEDDISPATCH)) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_EXISTSPROG, TO_CHAR(RCSCHEDDISPATCH.DATE_ + (RCSCHEDDISPATCH.HOUR_START / 1440), UT_DATE.FSBDATE_FORMAT));
            ELSE
                GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
            END IF;
        END IF;
        
        
        DAOR_TASK_TYPE.ACCKEY(INUTASKTYPE);
        NUPAIS := FNUGETUSERCOUNTRY;
        DAGE_CALENDAR.ACCKEY(TRUNC(IDTDATE), NUPAIS);
        
        
        OR_BCDISPATCH.GETPACKADDRESSBYORDER(INUORDERID, NUPACKAGEID, NUADDRESSID);

        
        OR_BCSCHED.GETAVAILABILITYBYDATEUNIT
        (
            INUOPERATINGUNITID, 
            INUHOURSTART, 
            INUDURATION, 
            IDTDATE, 
            RCSCHEDPROGRAM.SCHED_AVAILABLE_ID 
        );
        
        IF (RCSCHEDPROGRAM.SCHED_AVAILABLE_ID IS NULL) THEN
            
            GE_BOERRORS.SETERRORCODE(2901);
        END IF;

        
        OR_BCSCHED.SCHEDAVAILABLEBLOCK(RCSCHEDPROGRAM.SCHED_AVAILABLE_ID);

        
        
        DAOR_ORDER.GETRECORD(INUORDERID, RCORDER);

        
        RCSCHEDDISPATCH.SCHED_DISPATCH_ID   := OR_BOSEQUENCES.FNUNEXTOR_SCHED_DISPATCH;
        RCSCHEDDISPATCH.OPERATING_ZONE_ID   := INUOPERATINGZONEID;
        RCSCHEDDISPATCH.DATE_               := TRUNC(IDTDATE);
        RCSCHEDDISPATCH.OPERATING_UNIT_ID   := INUOPERATINGUNITID;
        RCSCHEDDISPATCH.OPERATING_UNIT_DESC := DAOR_OPERATING_UNIT.FSBGETNAME(INUOPERATINGUNITID);
        RCSCHEDDISPATCH.SCHED_HOUR_ENTRANCE := INUHOURSTART;
        RCSCHEDDISPATCH.SCHED_HOUR_EXIT     := INUHOURSTART + INUDURATION;
        RCSCHEDDISPATCH.HOUR_START          := INUHOURSTART;
        RCSCHEDDISPATCH.HOUR_END            := INUHOURSTART + INUDURATION;
        RCSCHEDDISPATCH.HOUR_START_PROG     := INUHOURSTART;
        RCSCHEDDISPATCH.DURATION            := INUDURATION;
        RCSCHEDDISPATCH.DURATION_REQUIRED   := INUREALDURATION;

        NUPROGRAMMCLASS := GE_BOPARAMETER.FNUVALORNUMERICO(CSBPAR_REP_ASSIGN_CLASS);
        IF (NUPROGRAMMCLASS NOT IN (OR_BOCONSTANTS.CNUPROGCLASSAPROX,
                                    OR_BOCONSTANTS.CNUPROGCLASSFIXED,
                                    OR_BOCONSTANTS.CNUPROGCLASSFLEX,
                                    OR_BOCONSTANTS.CNUPROGCLASSRANGE,
                                    OR_BOCONSTANTS.CNUPROGCLASSRANGEDAY,
                                    OR_BOCONSTANTS.CNUPROGCLASSUNIT
                                   )) THEN
            ERRORS.SETERROR(CNUINVPARAMERR, CSBPAR_REP_ASSIGN_CLASS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        RCSCHEDDISPATCH.PROGRAMING_CLASS_ID := NUPROGRAMMCLASS;

        RCSCHEDDISPATCH.DISPATCH_STATUS     := OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED;
        RCSCHEDDISPATCH.TASK_TYPE_ID        := INUTASKTYPE;
        RCSCHEDDISPATCH.TASK_TYPE_DESC      := DAOR_TASK_TYPE.FSBGETDESCRIPTION(INUTASKTYPE);
        RCSCHEDDISPATCH.PACKAGE_ID          := NUPACKAGEID;
        RCSCHEDDISPATCH.ORDER_ID            := INUORDERID;
        RCSCHEDDISPATCH.ADDRESS_ID          := NUADDRESSID;
        RCSCHEDDISPATCH.SCHEDULER_ID        := INUSCHEDULERID;
        
        IF (NOT NUADDRESSID IS NULL) THEN
            RCSCHEDDISPATCH.ADDRESS_DESC    := DAAB_ADDRESS.FSBGETADDRESS(NUADDRESSID);
        END IF;
        
        IF RCSCHEDDISPATCH.PACKAGE_ID IS NOT NULL THEN
            NUSUBSCRIBERID := DAMO_PACKAGES.FNUGETSUBSCRIBER_ID(RCSCHEDDISPATCH.PACKAGE_ID);
            
            IF (NUSUBSCRIBERID IS NOT NULL) THEN
                 RCSCHEDDISPATCH.CLIENT_NAME     := DAGE_SUBSCRIBER.FSBGETSUBSCRIBER_NAME(NUSUBSCRIBERID);
                 RCSCHEDDISPATCH.PHONE           := CC_BOOSSSUBSCRIBERDATA.FSBGETPHONE(NUSUBSCRIBERID);
            END IF;
        END IF;

        
        
        IF(RCSCHEDDISPATCH.PHONE IS NULL AND RCSCHEDDISPATCH.ORDER_ID IS NOT NULL)THEN
            NUSUBSCRIBERID :=  DAOR_ORDER.FNUGETSUBSCRIBER_ID(RCSCHEDDISPATCH.ORDER_ID);

            IF (NUSUBSCRIBERID IS NOT NULL) THEN
                RCSCHEDDISPATCH.CLIENT_NAME     := DAGE_SUBSCRIBER.FSBGETSUBSCRIBER_NAME(NUSUBSCRIBERID);
                RCSCHEDDISPATCH.PHONE           := CC_BOOSSSUBSCRIBERDATA.FSBGETPHONE(NUSUBSCRIBERID);
            END IF;
        END IF;



        
        DTDATE  := UT_DATE.FDTGETDATETIMEADDMINUTES(TRUNC(IDTDATE), INUHOURSTART);

        RCORDER.PROGRAMING_CLASS_ID := RCSCHEDDISPATCH.PROGRAMING_CLASS_ID;

        OR_BOPROCESSORDER.ASSIGN(
            RCORDER,
            INUOPERATINGUNITID,
            DTDATE,
            FALSE,
            FALSE,
            OR_BOORDERCOMMENT.FNUGETLASTCOMMTYPE,
            NULL,
            FALSE,
            RCSCHEDDISPATCH,
            FALSE
        );

        OR_BOORDERCOMMENT.CLEARLASTCOMMTYPE;

        
        DAOR_ORDER.UPDPROGRAMING_CLASS_ID(INUORDERID, RCSCHEDDISPATCH.PROGRAMING_CLASS_ID);
        
        
        VALIDATEFREESPACE( INUOPERATINGUNITID,
                           INUHOURSTART,
                           INUDURATION,
                           INUORDERID,
                           IDTDATE
        );
        
        
        DAOR_SCHED_DISPATCH.INSRECORD(RCSCHEDDISPATCH);

        
        CREATEPROGBLOCK(
            RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID,
            RCSCHEDDISPATCH.HOUR_START,
            RCSCHEDDISPATCH.HOUR_END,
            RCSCHEDDISPATCH.DURATION,
            RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
            OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED,
            RCSCHEDDISPATCH.TASK_TYPE_ID,
            RCSCHEDDISPATCH.PACKAGE_ID,
            RCSCHEDDISPATCH.ADDRESS_ID,
            RCSCHEDDISPATCH.ORDER_ID,
            NULL,
            NULL,
            RCSCHEDDISPATCH.CONFIRMED,
            RCSCHEDDISPATCH.DURATION_REQUIRED,
            IDTSUGGESTEDDATE,
            INUSUGGESTEDHOUR,
            INUSUGGESTEDPROG
        );

        
        FIXFREEBLOCK(RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID, RCSCHEDDISPATCH.HOUR_START, RCSCHEDDISPATCH.HOUR_END);

        
        GETDISPATCH(RCSCHEDDISPATCH.SCHED_DISPATCH_ID, ORFRESULT);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.createDispatchForOrder', 11);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            ROLLBACK TO BEFOREINSERT;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            ROLLBACK TO BEFOREINSERT;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEDISPATCHFORORDER;
    
    
    















    PROCEDURE GETOPERATINGUNITSFROMUSER
    (
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUUSERID                SA_USER.USER_ID%TYPE;
        NUPERSONID              GE_PERSON.PERSON_ID%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetOperatingUnitsFromUser', 15);
        
        NUUSERID    :=  SA_BOUSER.FNUGETUSERID;
        NUPERSONID  :=  GE_BCPERSON.FNUGETFIRSTPERSONBYUSERID(NUUSERID);

        UT_TRACE.TRACE('nuPersonId: ['||NUPERSONID||'] - nuUserId: ['||NUUSERID||']', 16);
        
        ORFRESULT := OR_BCDISPATCH.FRFGETOPERATINGUNITSFROMUSER(NUPERSONID);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetOperatingUnitsFromUser', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.GetOperatingUnitsFromUser', 15);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.GetOperatingUnitsFromUser', 15);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    










    PROCEDURE GETSUBSCRIBERBYPACKAGE
    (
        INUPACKAGEID            IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetSubscriberByPackage', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETSUBSCRIBERBYPACKAGE(INUPACKAGEID);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetSubscriberByPackage', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;


    










    PROCEDURE GETDISPATCHINFOBYPACKAGE
    (
        INUPACKAGEID            IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetDispatchInfoByPackage', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETDISPATCHINFOBYPACKAGE(INUPACKAGEID);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetDispatchInfoByPackage', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    
    PROCEDURE GETINBETWEENFREESPACES
    (
        ITBDISPATCHEDRECORDS IN  OR_BCDISPATCH.TYTBDISPRECORDS,
        INUHOURENTRANCE      IN  OR_SCHED_AVAILABLE.HOUR_ENTRANCE%TYPE,
        INUHOUREXIT          IN  OR_SCHED_AVAILABLE.HOUR_EXIT%TYPE,
        OTBFREESPACERECORDS  OUT NOCOPY OR_BCDISPATCH.TYTBFREESPACERECORDS
    )
    IS
        NUFIRST OR_BCDISPATCH.NUNUMBERTYPE%TYPE;
        NULAST  OR_BCDISPATCH.NUNUMBERTYPE%TYPE;
        NUNEXT  OR_BCDISPATCH.NUNUMBERTYPE%TYPE;
        NUINDEX OR_BCDISPATCH.NUNUMBERTYPE%TYPE;
    BEGIN
        NUFIRST := ITBDISPATCHEDRECORDS.FIRST;
        NULAST  := ITBDISPATCHEDRECORDS.LAST;

        IF (NUFIRST IS NOT NULL) THEN
            NUINDEX := 1;
            
            
            IF (INUHOURENTRANCE != ITBDISPATCHEDRECORDS(NUFIRST).HOUR_START) THEN
                OTBFREESPACERECORDS(NUINDEX).HOUR_START := INUHOURENTRANCE;
                OTBFREESPACERECORDS(NUINDEX).HOUR_END   := ITBDISPATCHEDRECORDS(NUFIRST).HOUR_START;
                NUINDEX := NUINDEX + 1;
            END IF;

            FOR I IN NUFIRST..NULAST LOOP
                IF (ITBDISPATCHEDRECORDS.EXISTS(I)) THEN
                    
                    
                    
                    OTBFREESPACERECORDS(NUINDEX).HOUR_START := ITBDISPATCHEDRECORDS(I).HOUR_END;
                    NUNEXT := ITBDISPATCHEDRECORDS.NEXT(I);
                    IF (NUNEXT IS NOT NULL) THEN
                        OTBFREESPACERECORDS(NUINDEX).HOUR_END := ITBDISPATCHEDRECORDS(NUNEXT).HOUR_START;
                        IF (OTBFREESPACERECORDS(NUINDEX).HOUR_START < OTBFREESPACERECORDS(NUINDEX).HOUR_END) THEN
                            NUINDEX := NUINDEX + 1;
                        END IF;
                    END IF;
                END IF;
            END LOOP;
            
            
            IF (INUHOUREXIT != ITBDISPATCHEDRECORDS(NULAST).HOUR_END) THEN
                OTBFREESPACERECORDS(NUINDEX).HOUR_END := INUHOUREXIT;
            ELSE
                OTBFREESPACERECORDS.DELETE(NUINDEX);
            END IF;

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETINBETWEENFREESPACES;

    
    
    
    PROCEDURE LOADFREESPACES
    (
        IDTDATE              IN  OR_SCHED_DISPATCH.DATE_%TYPE,
        INUTASKTYPEID        IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUORDERID           IN  OR_ORDER.ORDER_ID%TYPE DEFAULT NULL,
        OTBCANDIDATESRECORDS OUT NOCOPY OR_BCDISPATCH.TYTBCANDIDATESRECORDS
    )
    IS
        TBOPERUNITRECORDS   OR_BCDISPATCH.TYTBOPERUNITRECORDS;
        TBFREESPACERECORDS  OR_BCDISPATCH.TYTBFREESPACERECORDS;
        TBDISPRECORDS       OR_BCDISPATCH.TYTBDISPRECORDS;
        NUFIRST             OR_BCDISPATCH.NUNUMBERTYPE%TYPE;
        NULAST              OR_BCDISPATCH.NUNUMBERTYPE%TYPE;
        NUFIRSTF            OR_BCDISPATCH.NUNUMBERTYPE%TYPE;
        NULASTF             OR_BCDISPATCH.NUNUMBERTYPE%TYPE;
        NUINDEX             OR_BCDISPATCH.NUNUMBERTYPE%TYPE;
        
        NUADDRESSTIME   AB_PREMISE_TYPE.ACCESS_TIME%TYPE;
        NUIDADDRESS     AB_ADDRESS.ADDRESS_ID%TYPE;

    BEGIN
        
        
        OR_BCDISPATCH.LOADOPERUNITSWITHPROG(IDTDATE,
                                            INUTASKTYPEID,
                                            INUORDERID,
                                            TBOPERUNITRECORDS);

        NUFIRST := TBOPERUNITRECORDS.FIRST;
        NULAST  := TBOPERUNITRECORDS.LAST;

        IF (NUFIRST IS NULL) THEN
            RETURN;
        END IF;
        
        BEGIN

        NUIDADDRESS := OR_BCORDERACTIVITIES.FNUOBTDIRECCIONBYORDER
                        (
                            INUORDERID
                        );

        EXCEPTION
            WHEN OTHERS THEN
                NUIDADDRESS := NULL;
        END;

        NUADDRESSTIME := 0;

        IF NUIDADDRESS IS NOT NULL THEN

            
            NUADDRESSTIME := AB_BCPREDIOINFO.FNUOBTTIEMPOACCESO
                            (
                                NUIDADDRESS
                            );
        END IF;


        NUINDEX := 1;

        FOR I IN NUFIRST..NULAST LOOP
            IF (TBOPERUNITRECORDS.EXISTS(I)) THEN
                
                
                
                TBDISPRECORDS.DELETE;
                OR_BCDISPATCH.LOADOPERUNITDISPPROGS(IDTDATE,
                                                    TBOPERUNITRECORDS(I).OPERATING_UNIT_ID,
                                                    TBOPERUNITRECORDS(I).HOUR_ENTRANCE,
                                                    TBOPERUNITRECORDS(I).HOUR_EXIT,
                                                    TBDISPRECORDS);
                TBFREESPACERECORDS.DELETE;
                
                GETINBETWEENFREESPACES(TBDISPRECORDS,
                                       TBOPERUNITRECORDS(I).HOUR_ENTRANCE,
                                       TBOPERUNITRECORDS(I).HOUR_EXIT,
                                       TBFREESPACERECORDS);
                IF (TBFREESPACERECORDS.FIRST IS NULL) THEN
                    
                    
                    
                    IF (TBDISPRECORDS.FIRST IS NULL) THEN
                        OTBCANDIDATESRECORDS(NUINDEX).SCHED_PROGRAMING_ID := NUINDEX;
                        OTBCANDIDATESRECORDS(NUINDEX).HOUR_START := TBOPERUNITRECORDS(I).HOUR_ENTRANCE;
                        OTBCANDIDATESRECORDS(NUINDEX).HOUR_END := TBOPERUNITRECORDS(I).HOUR_EXIT;
                        OTBCANDIDATESRECORDS(NUINDEX).DURATION := TBOPERUNITRECORDS(I).HOUR_EXIT - TBOPERUNITRECORDS(I).HOUR_ENTRANCE;
                        OTBCANDIDATESRECORDS(NUINDEX).WEIGHT := TBOPERUNITRECORDS(I).SCHEDULER_ID;
                        OTBCANDIDATESRECORDS(NUINDEX).IS_URBAN := NULL;
                        OTBCANDIDATESRECORDS(NUINDEX).WAY_NUMBER := NUADDRESSTIME;
                        OTBCANDIDATESRECORDS(NUINDEX).WAY_TYPE := TBOPERUNITRECORDS(I).OPERATING_UNIT_ID;
                        OTBCANDIDATESRECORDS(NUINDEX).WAY_LETTER := TBOPERUNITRECORDS(I).OPERATING_ZONE_ID;
                        OTBCANDIDATESRECORDS(NUINDEX).WAY_GEO_SECTOR := NULL;
                        OTBCANDIDATESRECORDS(NUINDEX).CROSS_WAY_NUMBER := NULL;
                        OTBCANDIDATESRECORDS(NUINDEX).CROSS_WAY_TYPE := NULL;
                        OTBCANDIDATESRECORDS(NUINDEX).CROSS_WAY_LETTER := INUORDERID;
                        OTBCANDIDATESRECORDS(NUINDEX).CROSS_WAY_GEO_SECT := NULL;
                        NUINDEX := NUINDEX + 1;
                    END IF;
                ELSE
                    NUFIRSTF := TBFREESPACERECORDS.FIRST;
                    NULASTF  := TBFREESPACERECORDS.LAST;
                    FOR J IN NUFIRSTF..NULASTF LOOP
                        IF (TBFREESPACERECORDS.EXISTS(J)) THEN
                            OTBCANDIDATESRECORDS(NUINDEX).SCHED_PROGRAMING_ID := NUINDEX;
                            OTBCANDIDATESRECORDS(NUINDEX).HOUR_START := TBFREESPACERECORDS(J).HOUR_START;
                            OTBCANDIDATESRECORDS(NUINDEX).HOUR_END := TBFREESPACERECORDS(J).HOUR_END;
                            OTBCANDIDATESRECORDS(NUINDEX).DURATION := TBFREESPACERECORDS(J).HOUR_END - TBFREESPACERECORDS(J).HOUR_START;
                            OTBCANDIDATESRECORDS(NUINDEX).WEIGHT := TBOPERUNITRECORDS(I).SCHEDULER_ID;
                            OTBCANDIDATESRECORDS(NUINDEX).IS_URBAN := NULL;
                            OTBCANDIDATESRECORDS(NUINDEX).WAY_NUMBER := NUADDRESSTIME;
                            OTBCANDIDATESRECORDS(NUINDEX).WAY_TYPE := TBOPERUNITRECORDS(I).OPERATING_UNIT_ID;
                            OTBCANDIDATESRECORDS(NUINDEX).WAY_LETTER := TBOPERUNITRECORDS(I).OPERATING_ZONE_ID;
                            OTBCANDIDATESRECORDS(NUINDEX).WAY_GEO_SECTOR := NULL;
                            OTBCANDIDATESRECORDS(NUINDEX).CROSS_WAY_NUMBER := NULL;
                            OTBCANDIDATESRECORDS(NUINDEX).CROSS_WAY_TYPE := NULL;
                            OTBCANDIDATESRECORDS(NUINDEX).CROSS_WAY_LETTER := INUORDERID;
                            OTBCANDIDATESRECORDS(NUINDEX).CROSS_WAY_GEO_SECT := NULL;
                            NUINDEX := NUINDEX + 1;
                        END IF;
                    END LOOP;
                END IF;
            END IF;
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END LOADFREESPACES;

	
    
    
    PROCEDURE GETFREESPACES
    (
        IDTDATE            IN  OR_SCHED_DISPATCH.DATE_%TYPE,
        INUTASKTYPEID      IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUDURATION        IN  OR_SCHED_DISPATCH.DURATION%TYPE,
        INUORDERID         IN  OR_ORDER.ORDER_ID%TYPE DEFAULT NULL,
        ORFRESULT          OUT CONSTANTS.TYREFCURSOR
    )
    IS
        TBCANDIDATESRECORDS OR_BCDISPATCH.TYTBCANDIDATESRECORDS;
        NUTASKTYPEID    OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        
        NUTASKTYPEID := NVL(INUTASKTYPEID, DAOR_ORDER.FNUGETTASK_TYPE_ID(INUORDERID));

        
        LOADFREESPACES(TRUNC(IDTDATE),
                       INUTASKTYPEID,
                       INUORDERID,
                       TBCANDIDATESRECORDS);
        
        IF (TBCANDIDATESRECORDS.FIRST IS NOT NULL) THEN
            OR_BCDISPATCH.LOADTEMPTABLE(TBCANDIDATESRECORDS);
        ELSE
            EXECUTE IMMEDIATE 'TRUNCATE TABLE OR_TMP_OPT_ROUTES';
        END IF;
        
        ORFRESULT := OR_BCDISPATCH.FRFGETFREESPACES(INUDURATION);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END GETFREESPACES;
	
    










    PROCEDURE GETSCHEDORDERSBYSECT
    (
        ISBOPERATINGZONES   IN  VARCHAR2,
        INUSECTORID         IN  OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE,
        IDTDATE             IN  OR_ORDER.ARRANGED_HOUR%TYPE,
        ORFRESULT           OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetSchedOrdersbySect', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETORDERSBYSECTOR(ISBOPERATINGZONES, INUSECTORID, IDTDATE, TRUE);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetSchedOrdersbySect', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;

    





























    PROCEDURE CRTDSPTCHFORPRGORDER
    (
        INUOPERATINGZONEID      IN  OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE,
        IDTDATE                 IN  OR_SCHED_DISPATCH.DATE_%TYPE,
        INUOPERATINGUNITID      IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        INUSCHEDULERID          IN  OR_SCHED_DISPATCH.SCHEDULER_ID%TYPE,
        INUORDERID              IN  OR_SCHED_DISPATCH.ORDER_ID%TYPE,
        INUTASKTYPE             IN  OR_SCHED_DISPATCH.TASK_TYPE_ID%TYPE,
        INUHOURSTART            IN  OR_SCHED_DISPATCH.HOUR_START%TYPE,
        INUDURATION             IN  OR_SCHED_DISPATCH.DURATION%TYPE,
        INUORGDURATION          IN  OR_SCHED_DISPATCH.DURATION_REQUIRED%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR,
        INUPROGRAMMINGCLASSID   IN  OR_SCHED_DISPATCH.PROGRAMING_CLASS_ID%TYPE,
        INUCOMMENTTYPEID	    IN 	OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT		        IN 	OR_ORDER_COMMENT.ORDER_COMMENT%TYPE,
        IDTSUGGESTEDDATE        IN  OR_SCHED_PROGRAMING.SUGGESTED_DATE%TYPE,
        INUSUGGESTEDHOUR        IN  OR_SCHED_PROGRAMING.SUGGESTED_HOUR%TYPE,
        INUSUGGESTEDPROG        IN  OR_SCHED_PROGRAMING.SUGGESTED_PROG_CLASS%TYPE,
        IBLCHANGEAPP            IN  BOOLEAN DEFAULT TRUE
    )
    IS
        RCSCHEDDISPATCH         DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        RCSCHEDDISPATCHOLD      DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        NUPACKAGEID             OR_SCHED_DISPATCH.PACKAGE_ID%TYPE;
        NUADDRESSID             OR_SCHED_DISPATCH.ADDRESS_ID%TYPE;
        DTDATE                  DATE;
        NUAVAILABILITYID        OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE;
        RCSCHEDPROGRAMING       DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        NUSUBSCRIBERID          GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        RCORDER                 DAOR_ORDER.STYOR_ORDER;
        RCSCHEDAVAILABLE        DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        
        NUCOMMENTTYPEID         GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE;
        NUPAIS                  GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
    BEGIN
        SAVEPOINT BEFOREINSERT;
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.crtDsptchForPrgOrder', 11);
        UT_TRACE.TRACE('inuOperatingZoneId => ['|| INUOPERATINGZONEID
            || '] - idtDate => ['               || IDTDATE
            || '] - inuOperatingUnitId => ['    || INUOPERATINGUNITID
            || '] - inuOrderId => ['            || INUORDERID
            || '] - inuTaskType => ['           || INUTASKTYPE
            || '] - inuHourStart => ['          || INUHOURSTART
            || '] - inuDuration => ['           || INUDURATION, 12);

        OR_BCSCHED.GETAVAILABLEBYUDXBLOQ(
            INUSCHEDULERID,
            INUOPERATINGUNITID,
            INUOPERATINGZONEID,
            IDTDATE,
            RCSCHEDAVAILABLE
        );

        IF (RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID IS NULL) THEN
            UT_TRACE.TRACE('No se encontr� la disponibilidad: ['||RCSCHEDDISPATCH.SCHEDULER_ID
                ||']['||RCSCHEDDISPATCH.OPERATING_UNIT_ID
                ||']['||RCSCHEDDISPATCH.OPERATING_ZONE_ID
                ||']['||RCSCHEDDISPATCH.DATE_
                ||']');
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;

        
        DAOR_ORDER.LOCKBYPK(INUORDERID, RCORDER);

        IF ((IBLCHANGEAPP) AND (RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED)) OR
           ((NOT IBLCHANGEAPP) AND (RCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED)) THEN
            IF (IBLCHANGEAPP) THEN
                UT_TRACE.TRACE('iblChangeApp TRUE');
            ELSE
                UT_TRACE.TRACE('iblChangeApp FALSE');
            END IF;
            UT_TRACE.TRACE('rcOrder.order_status_id '||RCORDER.ORDER_STATUS_ID);
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;

        
        DAOR_TASK_TYPE.ACCKEY(INUTASKTYPE);
        NUPAIS := FNUGETUSERCOUNTRY;
        DAGE_CALENDAR.ACCKEY(TRUNC(IDTDATE), NUPAIS);

        
        OR_BCDISPATCH.GETPACKADDRESSBYORDER(INUORDERID, NUPACKAGEID, NUADDRESSID);
        
        
        RCSCHEDDISPATCH.SCHED_DISPATCH_ID   := OR_BOSEQUENCES.FNUNEXTOR_SCHED_DISPATCH;
        RCSCHEDDISPATCH.OPERATING_ZONE_ID   := INUOPERATINGZONEID;
        RCSCHEDDISPATCH.DATE_               := TRUNC(IDTDATE);
        RCSCHEDDISPATCH.OPERATING_UNIT_ID   := INUOPERATINGUNITID;
        RCSCHEDDISPATCH.OPERATING_UNIT_DESC := DAOR_OPERATING_UNIT.FSBGETNAME(INUOPERATINGUNITID);
        RCSCHEDDISPATCH.SCHED_HOUR_ENTRANCE := INUHOURSTART;
        RCSCHEDDISPATCH.SCHED_HOUR_EXIT     := INUHOURSTART + INUDURATION;
        RCSCHEDDISPATCH.HOUR_START          := INUHOURSTART;
        RCSCHEDDISPATCH.HOUR_END            := INUHOURSTART + INUDURATION;
        RCSCHEDDISPATCH.HOUR_START_PROG     := INUHOURSTART;
        RCSCHEDDISPATCH.DURATION            := INUDURATION;
        RCSCHEDDISPATCH.DURATION_REQUIRED   := INUORGDURATION;
        RCSCHEDDISPATCH.DISPATCH_STATUS     := OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED;
        RCSCHEDDISPATCH.TASK_TYPE_ID        := INUTASKTYPE;
        RCSCHEDDISPATCH.TASK_TYPE_DESC      := DAOR_TASK_TYPE.FSBGETDESCRIPTION(INUTASKTYPE);
        RCSCHEDDISPATCH.PACKAGE_ID          := NUPACKAGEID;
        RCSCHEDDISPATCH.ORDER_ID            := INUORDERID;
        RCSCHEDDISPATCH.ADDRESS_ID          := NUADDRESSID;
        RCSCHEDDISPATCH.SCHEDULER_ID        := INUSCHEDULERID;

        IF (OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(INUORDERID, RCSCHEDPROGRAMING)) THEN
            RCSCHEDDISPATCH.PROGRAMING_CLASS_ID := RCSCHEDPROGRAMING.PROGRAMING_CLASS_ID;
        ELSE
            RCSCHEDDISPATCH.PROGRAMING_CLASS_ID := OR_BOCONSTANTS.CNUPROGCLASSRANGE;
        END IF;
        
        IF (OR_BCDISPATCH.FBLEXISTDISPBYORDER(INUORDERID, RCSCHEDDISPATCHOLD)) THEN
            RCSCHEDDISPATCH.PROGRAMING_CLASS_ID := RCSCHEDDISPATCHOLD.PROGRAMING_CLASS_ID;
            RCSCHEDDISPATCHOLD.DISPATCH_STATUS := OR_BOCONSTANTS.CSBDISPATCHSTATUSREPROG;
            DAOR_SCHED_DISPATCH.UPDRECORD(RCSCHEDDISPATCHOLD);
        END IF;
        
        IF (INUPROGRAMMINGCLASSID IS NOT NULL) THEN
            RCSCHEDDISPATCH.PROGRAMING_CLASS_ID := INUPROGRAMMINGCLASSID;
        END IF;

        IF (NOT NUADDRESSID IS NULL) THEN
            RCSCHEDDISPATCH.ADDRESS_DESC    := DAAB_ADDRESS.FSBGETADDRESS(NUADDRESSID);
        END IF;
        
        IF RCSCHEDDISPATCH.PACKAGE_ID IS NOT NULL THEN
            NUSUBSCRIBERID := DAMO_PACKAGES.FNUGETSUBSCRIBER_ID(RCSCHEDDISPATCH.PACKAGE_ID);
            
            IF (NUSUBSCRIBERID IS NOT NULL) THEN
                RCSCHEDDISPATCH.CLIENT_NAME   := DAGE_SUBSCRIBER.FSBGETSUBSCRIBER_NAME(NUSUBSCRIBERID);
                RCSCHEDDISPATCH.PHONE           := CC_BOOSSSUBSCRIBERDATA.FSBGETPHONE(NUSUBSCRIBERID);
            END IF;
        END IF;

        
        
        IF(RCSCHEDDISPATCH.PHONE IS NULL AND RCSCHEDDISPATCH.ORDER_ID IS NOT NULL)THEN
            NUSUBSCRIBERID :=  DAOR_ORDER.FNUGETSUBSCRIBER_ID(RCSCHEDDISPATCH.ORDER_ID);

            IF (NUSUBSCRIBERID IS NOT NULL) THEN
                RCSCHEDDISPATCH.CLIENT_NAME     := DAGE_SUBSCRIBER.FSBGETSUBSCRIBER_NAME(NUSUBSCRIBERID);
                RCSCHEDDISPATCH.PHONE           := CC_BOOSSSUBSCRIBERDATA.FSBGETPHONE(NUSUBSCRIBERID);
            END IF;
        END IF;

        
        VALIDATEFREESPACE( INUOPERATINGUNITID,
                           INUHOURSTART,
                           INUDURATION,
                           INUORDERID,
                           IDTDATE
        );

        
        DAOR_SCHED_DISPATCH.INSRECORD(RCSCHEDDISPATCH);

        
        
        DAOR_ORDER.GETRECORD(INUORDERID, RCORDER);
        
        IF (RCORDER.ORDER_STATUS_ID NOT IN (OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED,
                                            OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED,
                                            OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED)) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(OR_BOCONSTANTS.CNUERR_121742,
                OR_BOCONSTANTS.CNUORDER_ACTION_PROGRA || ' - ' || GE_BOBASICDATASERVICES.FSBGETDESCACTION(OR_BOCONSTANTS.CNUORDER_ACTION_PROGRA)
                    || '|' || RCORDER.ORDER_ID
                    || '|' || RCORDER.ORDER_STATUS_ID || ' - ' || OR_BOBASICDATASERVICES.FSBGETDESCORDERSTATUS(RCORDER.ORDER_STATUS_ID)
            );
        END IF;
        
        
        IF (RCORDER.OPERATING_UNIT_ID <> INUOPERATINGUNITID) THEN
            OR_BCORDEROPEUNICHAN.INSRECORD(RCORDER.ORDER_ID,
                RCORDER.OPERATING_UNIT_ID, INUOPERATINGUNITID);
        END IF;
        
        
        DTDATE  := UT_DATE.FDTGETDATETIMEADDMINUTES(TRUNC(IDTDATE), INUHOURSTART);
        RCORDER.PROGRAMING_CLASS_ID :=  RCSCHEDDISPATCH.PROGRAMING_CLASS_ID;
        OR_BOPROCESSORDER.REESCHEDULEDASSIGN(
            RCORDER,
            INUOPERATINGUNITID,
            DTDATE,
            INUCOMMENTTYPEID,
            ISBCOMMENT
        );

        
        OR_BOPROGRAMING.SETAPNMTTOREESCHED(INUORDERID);
        
        
        CREATEPROGBLOCK(
            RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID,
            RCSCHEDDISPATCH.HOUR_START,
            RCSCHEDDISPATCH.HOUR_END,
            RCSCHEDDISPATCH.DURATION,
            RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
            OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED,
            RCSCHEDDISPATCH.TASK_TYPE_ID,
            RCSCHEDDISPATCH.PACKAGE_ID,
            RCSCHEDDISPATCH.ADDRESS_ID,
            RCSCHEDDISPATCH.ORDER_ID,
            NULL,
            NULL,
            RCSCHEDDISPATCH.CONFIRMED,
            RCSCHEDDISPATCH.DURATION_REQUIRED,
            IDTSUGGESTEDDATE,
            INUSUGGESTEDHOUR,
            INUSUGGESTEDPROG
        );

        
        FIXFREEBLOCK(RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID, RCSCHEDDISPATCH.HOUR_START, RCSCHEDDISPATCH.HOUR_END);

        
        GETDISPATCH(RCSCHEDDISPATCH.SCHED_DISPATCH_ID, ORFRESULT);

        
        
        OR_BOORDERCOMMENT.UPDATECOMMENTTYPE(INUORDERID, NUCOMMENTTYPEID);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.crtDsptchForPrgOrder', 11);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            ROLLBACK TO BEFOREINSERT;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            ROLLBACK TO BEFOREINSERT;
            RAISE EX.CONTROLLED_ERROR;
    END CRTDSPTCHFORPRGORDER;

    PROCEDURE CHANGEAPPNTTOACTUALDAY
    (
        INUOPERATINGZONEID      IN  OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE,
        IDTDATE                 IN  OR_SCHED_DISPATCH.DATE_%TYPE,
        INUOPERATINGUNITID      IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        INUSCHEDULERID          IN  OR_SCHED_DISPATCH.SCHEDULER_ID%TYPE,
        INUORDERID              IN  OR_SCHED_DISPATCH.ORDER_ID%TYPE,
        INUTASKTYPE             IN  OR_SCHED_DISPATCH.TASK_TYPE_ID%TYPE,
        INUHOURSTART            IN  OR_SCHED_DISPATCH.HOUR_START%TYPE,
        INUDURATION             IN  OR_SCHED_DISPATCH.DURATION%TYPE,
        INUORGDURATION          IN  OR_SCHED_DISPATCH.DURATION_REQUIRED%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR,
        INUPROGRAMMINGCLASSID   IN  OR_SCHED_DISPATCH.PROGRAMING_CLASS_ID%TYPE,
        INUCOMMENTTYPEID	    IN 	OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT		        IN 	OR_ORDER_COMMENT.ORDER_COMMENT%TYPE,
        ISBDELAYED              IN  VARCHAR2,
        IDTSUGGESTEDDATE        IN  OR_SCHED_PROGRAMING.SUGGESTED_DATE%TYPE,
        INUSUGGESTEDHOUR        IN  OR_SCHED_PROGRAMING.SUGGESTED_HOUR%TYPE,
        INUSUGGESTEDPROG        IN  OR_SCHED_PROGRAMING.SUGGESTED_PROG_CLASS%TYPE,
        IBLCHANGEAPP            IN  BOOLEAN DEFAULT TRUE
    )
    IS
        NUCOMMENTTYPEID	        OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE;
    BEGIN
        SAVEPOINT BEFOREAPCHANGE;
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.changeAppntToActualDay', 13);

        NUCOMMENTTYPEID := NULL;

        IF (DAGE_COMMENT_TYPE.FBLEXIST(INUCOMMENTTYPEID)) THEN
            NUCOMMENTTYPEID := INUCOMMENTTYPEID;
        END IF;

        
        CRTDSPTCHFORPRGORDER(
            INUOPERATINGZONEID,
            IDTDATE,
            INUOPERATINGUNITID,
            INUSCHEDULERID,
            INUORDERID,
            INUTASKTYPE,
            INUHOURSTART,
            INUDURATION,
            INUORGDURATION,
            ORFRESULT,
            INUPROGRAMMINGCLASSID,
            NUCOMMENTTYPEID,
            ISBCOMMENT,
            IDTSUGGESTEDDATE,
            INUSUGGESTEDHOUR,
            INUSUGGESTEDPROG,
            IBLCHANGEAPP
        );

         
         
        IF (ISBDELAYED = GE_BOCONSTANTS.CSBYES) THEN
            OR_BODISPATCH.MARKORDERASDELAYED(INUORDERID);
        END IF;

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.changeAppntToActualDay', 13);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            ROLLBACK TO BEFOREAPCHANGE;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            ROLLBACK TO BEFOREAPCHANGE;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGEAPPNTTOACTUALDAY;
    
    










    PROCEDURE GETTIMEREFRESHTASKDISP
    (
        ONUTIMEREFRESHDISPATCH  OUT NUMBER
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.getTimeRefreshTaskDisp', 10);

        
        ONUTIMEREFRESHDISPATCH := GE_BOPARAMETER.FNUGET(CSBPAR_TIME_REFRE_TASKDIS);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.getTimeRefreshTaskDisp', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.getTimeRefreshTaskDisp', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.getTimeRefreshTaskDisp', 10);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION FRFGETLASTCOMMENTS
    (
        INUORDERID IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        BEGIN
        UT_TRACE.TRACE(' OR_BODispatch.frcGetLastComments', 2);
        RETURN OR_BCDISPATCH.FRFGETLASTCOMMENTS(INUORDERID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETLASTCOMMENTS;

    










    PROCEDURE GETPACKAGEIDBYORDER
    (
        INUORDERID       IN   OR_ORDER.ORDER_ID%TYPE,
        ONUPACKAGEID     OUT  OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.getPackageIdByOrder', 10);

        
        ONUPACKAGEID := OR_BCDISPATCH.FNUGETPACKAGEIDBYORDER(INUORDERID);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.getPackageIdByOrder', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.getPackageIdByOrder', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.getPackageIdByOrder', 10);
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    











    
    PROCEDURE DEFAULTOPERUNITBYPERSON
    (
        INUPERSONID             IN  OR_UNIT_BY_PERSON.PERSON_ID%TYPE,
        ISBOPERATINGUNITS       IN  VARCHAR2
    )
    IS
        TBLOPERATINGUNIT        UT_STRING.TYTB_STRING;
        NUOPERATINGUNITID       OR_UNIT_BY_PERSON.OPERATING_UNIT_ID%TYPE;
        RCOPERATINGUNIT         DAOR_UNIT_BY_PERSON.STYOR_UNIT_BY_PERSON;

    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.defaultOperUnitByPerson', 10);

        
        DAGE_PERSON.ACCKEY(INUPERSONID);

        
        UT_STRING.EXTSTRING(ISBOPERATINGUNITS, '|', TBLOPERATINGUNIT);

        
        OR_BCUNITBYPERSON.DELETEUNITSBYPERSON(INUPERSONID);
        
        IF (TBLOPERATINGUNIT.COUNT > 0) THEN
            
            FOR IDX IN TBLOPERATINGUNIT.FIRST .. TBLOPERATINGUNIT.LAST LOOP
                IF (TBLOPERATINGUNIT(IDX) IS NOT NULL) THEN
                    NUOPERATINGUNITID := TO_NUMBER(TBLOPERATINGUNIT(IDX));
                    
                    DAOR_OPERATING_UNIT.ACCKEY(NUOPERATINGUNITID);

                    
                    RCOPERATINGUNIT.UNIT_BY_PERSON_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('OR_UNIT_BY_PERSON', 'SEQ_OR_UNIT_BY_PERSON');
                    RCOPERATINGUNIT.PERSON_ID := INUPERSONID;
                    RCOPERATINGUNIT.OPERATING_UNIT_ID := NUOPERATINGUNITID;

                    
                    DAOR_UNIT_BY_PERSON.INSRECORD(RCOPERATINGUNIT);

                END IF;
            END LOOP;
        END IF;

        
        TBLOPERATINGUNIT.DELETE;

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.defaultOperUnitByPerson', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DEFAULTOPERUNITBYPERSON;
    
    
    



















    PROCEDURE CHANGEORDSTAFROMMOBILE
    (
        INUORDER_ID			IN  OR_ORDER.ORDER_ID%TYPE,
        INUORDER_STATUS_ID	IN  OR_ORDER.ORDER_STATUS_ID%TYPE,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        RCSCHEDDISPATCH     DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        NUCURRENTSTATUS     OR_ORDER.ORDER_STATUS_ID%TYPE;
        NUNEWSTATUS         OR_ORDER.ORDER_STATUS_ID%TYPE;
        BLEXISTDISPBYORDER  BOOLEAN;
        SBDISPATCHSTATUS    OR_SCHED_DISPATCH.DISPATCH_STATUS%TYPE;
        CNUGENERALCOMMENTTYPE   CONSTANT NUMBER:=30;

    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.changeOrdStaFromMobile', 10);

        DAOR_ORDER.ACCKEY(INUORDER_ID);
        DAOR_ORDER_STATUS.ACCKEY(INUORDER_STATUS_ID);
        
        BLEXISTDISPBYORDER := OR_BCDISPATCH.FBLEXISTDISPBYORDER(INUORDER_ID, RCSCHEDDISPATCH);
        
        NUCURRENTSTATUS := DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDER_ID);
        
        
        IF(NUCURRENTSTATUS = INUORDER_STATUS_ID) THEN
            ERRORS.SETERROR(CNUERR_FINAL_STATUS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        

         
        IF (INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_LOCK) THEN
            OR_BOFWLOCKORDER.LOCKORDER(
                INUORDER_ID,
                CNUGENERALCOMMENTTYPE,
                NULL,
                FALSE,
                TRUE,
                IDTCHANGEDATE
            );
        ELSE
            
            OR_BODISPATCH.UPDATESCHEDDISPATCH(
                RCSCHEDDISPATCH.SCHED_DISPATCH_ID,
                SBDISPATCHSTATUS,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                RCSCHEDDISPATCH.HOUR_START,
                INUORDER_STATUS_ID,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NUCURRENTSTATUS,
                IDTCHANGEDATE
                );
        END IF;

        
        
        IF ((INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_LOCK) OR
            (INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED)) THEN
            
            OR_BOPROGRAMING.DELETERESERVE(INUORDER_ID, TRUE);
        END IF;
        
        NUNEWSTATUS := DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDER_ID,0);
        
        IF (NUNEWSTATUS != INUORDER_STATUS_ID) THEN
            
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.changeOrdStaFromMobile', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGEORDSTAFROMMOBILE;
    

    




    PROCEDURE GETASIGNORDERSBYUNI
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFORDERBYUNIT          OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        
        DAOR_OPERATING_UNIT.ACCKEY(INUOPERATINGUNITID);
        
        ORFORDERBYUNIT := OR_BCDISPATCH.FRFGETASIGNORDERSBYUNI(INUOPERATINGUNITID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
    



















    PROCEDURE GETTASKTYPESBYUNITS
    (
        ISBOPERATINGUNITIDS     IN  VARCHAR2,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.getTaskTypesByUnit', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETTASKTYPEBYUNITS(ISBOPERATINGUNITIDS);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.getTaskTypesByUnit', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END GETTASKTYPESBYUNITS;

  	



















    PROCEDURE GETROLESBYUNITS
    (
        ISBOPERATINGUNITIDS      IN  VARCHAR2,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetRolesByUnits', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETROLESBYUNITS(ISBOPERATINGUNITIDS);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetRolesByUnits', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END GETROLESBYUNITS;


  	

















    PROCEDURE GETSECTORBYZONE
    (
        INUOPERATINGZONEID      IN  OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE,
        INUSECTORID             IN  OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE,
        ISBDESCRIPTION          IN  OR_OPERATING_SECTOR.DESCRIPTION%TYPE,
        ORFRESULT               OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetSectorByZone', 15);
        ORFRESULT := OR_BCDISPATCH.FRFGETSECTORBYZONE(INUOPERATINGZONEID, INUSECTORID, ISBDESCRIPTION);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetSectorByZone', 15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END GETSECTORBYZONE;

    

























    PROCEDURE GETORDERSBYSECTOR
    (
        INUSCHEDAVAILABLE   IN  OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE,
        INUSECTORID         IN  OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE,
        INUTIPOTRABID       IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ISBESTADOSORDEN     IN  VARCHAR2,
        ISBCONDICIONESORDEN IN  VARCHAR2,
        ISBOTRASCONDICIONES IN  VARCHAR2,
        ORFRESULT           OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetOrdersbySector - inuSectorId['||INUSECTORID||']', 15);

        ORFRESULT := OR_BCDISPATCH.GETORDERSBYSECTOR
                        (
                            INUSCHEDAVAILABLE,
                            INUSECTORID,
                            INUTIPOTRABID,
                            ISBESTADOSORDEN,
                            ISBCONDICIONESORDEN,
                            ISBOTRASCONDICIONES
                        );

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetOrdersbySector', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERSBYSECTOR;

    




    PROCEDURE DAILYREQEQUIPBYUNIT
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFEQUIPBYUNIT          OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
    
        DAOR_OPERATING_UNIT.ACCKEY(INUOPERATINGUNITID);
        ORFEQUIPBYUNIT := OR_BCDISPATCH.FRFDAILYREQEQUIPBYUNIT(INUOPERATINGUNITID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    




    PROCEDURE GETNEXTORDERINFBYUNI
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ONUORDERID              OUT OR_ORDER.ORDER_ID%TYPE,
        ONUTASTTYPE             OUT OR_ORDER.TASK_TYPE_ID%TYPE,
        OSBTASKTYPEDESC         OUT NOCOPY OR_TASK_TYPE.DESCRIPTION%TYPE,
        OSBADDRESS              OUT NOCOPY AB_ADDRESS.ADDRESS%TYPE,
        OSBPROGRAMINGCLASS      OUT NOCOPY VARCHAR2,
        OSBPRIORITY             OUT NOCOPY VARCHAR2,
        ONUSEGMENT              OUT AB_SEGMENTS.SEGMENTS_ID%TYPE,
        ONUSUBSCRIBERID         OUT GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        OSBSUBSCRIBERNAME       OUT NOCOPY VARCHAR2,
        OSBSUBSCRIBERPHONE      OUT NOCOPY VARCHAR2,
        ONUPRODUCTID            OUT PR_PRODUCT.PRODUCT_ID%TYPE,
        ONUPRODUCTSTATUSID      OUT PS_PRODUCT_STATUS.PRODUCT_STATUS_ID%TYPE,
        OSBPRODUCTSTATUS        OUT NOCOPY PS_PRODUCT_STATUS.DESCRIPTION%TYPE,
        ONUMAINCOMPONENTID      OUT PR_COMPONENT.COMPONENT_ID%TYPE,
        OSBCOMMERCIALPLAN       OUT NOCOPY VARCHAR2,
        ONUPACKAGEID            OUT MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUELEMENTID            OUT IF_NODE.ID%TYPE,
        OSBELEMENTCODE          OUT NOCOPY IF_NODE.CODE%TYPE,
        OSBCOMPOSITECODE        OUT NOCOPY IF_NODE.COMPOSITE_CODE%TYPE,
        ONUELEMENTTYPEID        OUT IF_ELEMENT_TYPE.ELEMENT_TYPE_ID%TYPE,
        OSBELEMENTTYPE          OUT NOCOPY IF_ELEMENT_TYPE.DESCRIPTION%TYPE,
        OSBDAMAGETYPE           OUT NOCOPY VARCHAR2,
        ONUORDERSTATUSID        OUT OR_ORDER.ORDER_STATUS_ID%TYPE,
        OSBORDERSTATUSDESC      OUT NOCOPY OR_ORDER_STATUS.DESCRIPTION%TYPE,
        ONUOPERUNITSTATUSID     OUT OR_OPERATING_UNIT.OPER_UNIT_STATUS_ID%TYPE,
        OSBOPERUNITSTATUSDESC   OUT NOCOPY OR_OPER_UNIT_STATUS.DESCRIPTION%TYPE
    )
    IS
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        NUCOMMERCIALPLANID  CC_COMMERCIAL_PLAN.COMMERCIAL_PLAN_ID%TYPE;
        NUDAMAGETYPEID      TT_DAMAGE_TYPE.DAMAGE_TYPE_ID%TYPE;
        NUADDRESSID         AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN


        UT_TRACE.TRACE('INICIA - OR_bodispatch.GetNextOrderInfByUni '||INUOPERATINGUNITID,25);

        
        DAOR_OPERATING_UNIT.ACCKEY(INUOPERATINGUNITID);
        
        IF(OR_BCOPEUNI_TRANSIT.FSBOPEUNIISVALIDFORASIGN(INUOPERATINGUNITID) = OR_BOCONSTANTS.CSBSI) THEN

            RCORDER := OR_BCDISPATCH.FRFGETNEXTORDERINFBYUNI(INUOPERATINGUNITID);

            IF(RCORDER.ORDER_ID IS NOT NULL) THEN

                UT_TRACE.TRACE('Orden := '||RCORDER.ORDER_ID,25);

                ONUORDERID              := RCORDER.ORDER_ID;
                ONUTASTTYPE             := RCORDER.TASK_TYPE_ID;
                OSBTASKTYPEDESC         := DAOR_TASK_TYPE.FSBGETDESCRIPTION(ONUTASTTYPE, 0);
                OSBADDRESS              := OR_BOBASICDATASERVICES.FSBGETADDRESS_PARSED(ONUORDERID);
                OSBPROGRAMINGCLASS      := OR_BOBASICDATASERVICES.FSBGETPROGCLASSDESC(ONUORDERID);
                OSBPRIORITY             := RCORDER.PRIORITY;
                
                ONUORDERSTATUSID        := RCORDER.ORDER_STATUS_ID;
                OSBORDERSTATUSDESC      := DAOR_ORDER_STATUS.FSBGETDESCRIPTION(ONUORDERSTATUSID,0);
                ONUOPERUNITSTATUSID     := DAOR_OPERATING_UNIT.FNUGETOPER_UNIT_STATUS_ID(INUOPERATINGUNITID,0);
                OSBOPERUNITSTATUSDESC   := DAOR_OPER_UNIT_STATUS.FSBGETDESCRIPTION(ONUOPERUNITSTATUSID);

                
                OR_BCORDERACTIVITIES.GETSUBSDATABYORDER(ONUORDERID, ONUSUBSCRIBERID, NUADDRESSID);

                UT_TRACE.TRACE('Suscriptor := '||ONUSUBSCRIBERID,25);
                UT_TRACE.TRACE('Direcci�n := '||NUADDRESSID,25);

                ONUSEGMENT          := DAAB_ADDRESS.FNUGETSEGMENT_ID(NUADDRESSID, 0);
                OSBSUBSCRIBERNAME   := DAGE_SUBSCRIBER.FSBGETSUBSCRIBER_NAME(ONUSUBSCRIBERID,0)||' '||DAGE_SUBSCRIBER.FSBGETSUBS_LAST_NAME(ONUSUBSCRIBERID,0);
                OSBSUBSCRIBERPHONE  := DAGE_SUBSCRIBER.FSBGETPHONE(ONUSUBSCRIBERID, 0);
                ONUPRODUCTID        := OR_BOBASICDATASERVICES.FNUGETPRODUCTID(ONUORDERID);

                
                UT_TRACE.TRACE('onuProductId := '||ONUPRODUCTID,25);
                IF(ONUPRODUCTID IS NOT NULL) THEN
                    
                    ONUPRODUCTSTATUSID  := DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(ONUPRODUCTID);
                    OSBPRODUCTSTATUS    := DAPS_PRODUCT_STATUS.FSBGETDESCRIPTION(ONUPRODUCTSTATUSID);
                    ONUMAINCOMPONENTID  := PR_BCPRODUCT.FNUGETMAINCOMPONENTID(ONUPRODUCTID);
                    NUCOMMERCIALPLANID  := DAPR_PRODUCT.FNUGETCOMMERCIAL_PLAN_ID(ONUPRODUCTID);
                    OSBCOMMERCIALPLAN   := NUCOMMERCIALPLANID||' - '||DACC_COMMERCIAL_PLAN.FSBGETNAME(NUCOMMERCIALPLANID);
                END IF;

                
                ONUPACKAGEID        := OR_BCORDERACTIVITIES.FNUGETPACKIDINFIRSTACT(ONUORDERID);
                UT_TRACE.TRACE('Paquete := '||ONUPACKAGEID,25);

                
                IF(ONUPACKAGEID IS NOT NULL) THEN
                    
                    ONUELEMENTID        := TT_BCDAMAGEELEMENT.FNUGETFATHERBYPACKAGE(ONUPACKAGEID);
                    NUDAMAGETYPEID      := TT_BCDAMAGE.FNUGETDAMAGETYPE(ONUPACKAGEID);
                    IF(NUDAMAGETYPEID IS NOT NULL) THEN
                        OSBDAMAGETYPE       := NUDAMAGETYPEID||' - '||DATT_DAMAGE_TYPE.FSBGETDESCRIPTION(NUDAMAGETYPEID);
                    END IF;
                END IF;

                
                UT_TRACE.TRACE('onuElementId := '||ONUELEMENTID,25);
                IF(ONUELEMENTID IS NOT NULL) THEN
                    OSBELEMENTCODE      := IF_BOSERVICES.FSBGETELEMENTCODE(ONUELEMENTID);
                    ONUELEMENTTYPEID    := IF_BOSERVICES.FNUGETELEMENTTYPEID(ONUELEMENTID);
                    IF(ONUELEMENTTYPEID IS NOT NULL) THEN
                        OSBCOMPOSITECODE    := IF_BOELEMENT.FSBGETCOMPOSITECODE(ONUELEMENTTYPEID, ONUELEMENTID);
                        OSBELEMENTTYPE      := DAIF_ELEMENT_TYPE.FSBGETDESCRIPTION(ONUELEMENTTYPEID);
                    END IF;
                END IF;

            END IF; 
        END IF;

        UT_TRACE.TRACE('FIN - GetNextOrderInfByUni.GetNextOrderInfByUni '||RCORDER.ORDER_ID,25);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    











    FUNCTION FBLZONEWITHDISPATCHSTATUS
    (
        ISBOPERATINGZONES       IN  VARCHAR2,
        ISBOPERATINGUNITS       IN  VARCHAR2,
        IDTDATE                 IN  OR_SCHED_AVAILABLE.DATE_%TYPE,
        ISBSTATES               IN  VARCHAR2
    ) RETURN BOOLEAN
    IS
        RFCURSOR    CONSTANTS.TYREFCURSOR;

        TBSCHEDIDS  DAOR_SCHED_AVAILABLE.TYTBOR_SCHED_AVAILABLE;
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.fblZoneWithDispatchStatus', 10);

        RFCURSOR := OR_BCDISPATCH.FRFGETSCHBYZONESWDISPSTA(ISBOPERATINGZONES, ISBOPERATINGUNITS, IDTDATE, ISBSTATES);

        FETCH RFCURSOR BULK COLLECT INTO TBSCHEDIDS;

        IF (TBSCHEDIDS.COUNT > 0) THEN
            UT_TRACE.TRACE('[FIN] -  OR_BODispatch.fblZoneWithDispatchStatus -> TRUE', 10);
            RETURN TRUE;
        END IF;

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.fblZoneWithDispatchStatus -> FALSE', 10);
        RETURN FALSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLZONEWITHDISPATCHSTATUS;

    
    

















    PROCEDURE VALORDERSTATUS
    (
        INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
    )
    IS
        NUORDERSTATUS OR_ORDER.ORDER_STATUS_ID%TYPE;
        SBORDERSTATUS OR_ORDER_STATUS.DESCRIPTION%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO: or_bodispatch.ValOrderStatus('||INUORDERID||')',5);
        NUORDERSTATUS := DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDERID);
        

        IF NUORDERSTATUS NOT IN (OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                                 OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED,
                                 OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING)
        THEN
            SBORDERSTATUS := DAOR_ORDER_STATUS.FSBGETDESCRIPTION(NUORDERSTATUS,0);
            UT_TRACE.TRACE('sbOrderStatus=['||SBORDERSTATUS||']',5);
            
            ERRORS.SETERROR(CNUERR_INVALID_ORDERSTAT, '['||NUORDERSTATUS||'-'||SBORDERSTATUS||']|['||INUORDERID||']' );
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        UT_TRACE.TRACE('FIN: or_bodispatch.ValOrderStatus OK',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALORDERSTATUS;

    













    PROCEDURE GETORDERDATA
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCDISPATCH.FRFGETORDERDATA(INUORDERID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    














    PROCEDURE GETORDERACTIVITIES
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCDISPATCH.FRFGETORDERACTIVITIES(INUORDERID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE GETITEMSTIPOLOV
    (
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCDISPATCH.FRFGETITEMSTIPOLOV;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    











    PROCEDURE GETMINDURATCOMPR
    (
        ONUTIMEPROMISE         OUT NUMBER
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetMinDuratCompr', 10);

        
        ONUTIMEPROMISE := OR_BOCONSTANTS.CNUMIN_TIME_TO_COMPR;

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetMinDuratCompr', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.GetMinDuratCompr', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.GetMinDuratCompr', 10);
            RAISE EX.CONTROLLED_ERROR;
    END GETMINDURATCOMPR;
    

    










    
    
    PROCEDURE GETOPERATINGZONESBYIDS
    (
        ISBZONES            IN  VARCHAR2,
        ORFRESULT           OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.GetOperatingZonesByIds', 15);
        ORFRESULT := OR_BCDISPATCH.FRFOPERATINGZONESBYIDS(ISBZONES);
        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.GetOperatingZonesByIds', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRESULT);
            RAISE EX.CONTROLLED_ERROR;
    END;


    









    PROCEDURE CANCELVARIABLETASK
    (
        INUSCHEDDISPATCH        IN  OR_SCHED_DISPATCH.SCHED_DISPATCH_ID%TYPE
    )
    IS
        NUPROGRAMING_CLASS OR_SCHED_DISPATCH.PROGRAMING_CLASS_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.CancelVariableTask', 10);
        UT_TRACE.TRACE('CancelVariableTask: ['    ||  INUSCHEDDISPATCH ||']', 11);

        
        DAOR_SCHED_DISPATCH.ACCKEY(INUSCHEDDISPATCH);
        
        
        NUPROGRAMING_CLASS := DAOR_SCHED_DISPATCH.FNUGETPROGRAMING_CLASS_ID(INUSCHEDDISPATCH);
        IF NUPROGRAMING_CLASS IS NULL OR NUPROGRAMING_CLASS != OR_BOCONSTANTS.CNUCLASS_PROG_VAR_ACTIVITY THEN
            ERRORS.SETERROR( CNUERR_NOT_CANCEL_TASK );
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        
        DAOR_SCHED_DISPATCH.UPDDISPATCH_STATUS(INUSCHEDDISPATCH,OR_BOCONSTANTS.CSBDISPATCHSTATUSMISSED);

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.CancelVariableTask', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED_ERROR] -  OR_BODispatch.CancelVariableTask', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN     OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS] -  OR_BODispatch.CancelVariableTask', 10);
            RAISE EX.CONTROLLED_ERROR;
    END;

    

































    PROCEDURE PREPAREOPTIMIZER
    (
        ISBOPERATINGZONES       IN  VARCHAR2,
        ISBOPERATINGUNITS       IN  VARCHAR2,
        IDTDATE                 IN  OR_SCHED_AVAILABLE.DATE_%TYPE,
        IBLSYNCHRONIZEALL       IN  BOOLEAN DEFAULT FALSE
    )
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.prepareOptimizer', 15);

        PREPOPTNOCOMMIT(
            ISBOPERATINGZONES,
            ISBOPERATINGUNITS,
            IDTDATE
        );

        COMMIT;

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.prepareOptimizer', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PREPAREOPTIMIZER;
    
    

























































    PROCEDURE GETORDERSREPOSITION
    (
        INUFIRSTPRIOR           IN  NUMBER,
        INUSHEDAVAILABLEID      IN  OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE,
        INUORDERID              IN  OR_ORDER.ORDER_ID%TYPE,
        IDTDATE                 IN  DATE,
        INUSCHEDDISPATCHER      IN  OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE,
        INUZONEID               IN  OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE,
        ISBFLEXIFLAG            IN  VARCHAR2,
        ISBSEARCHTYPE           IN  VARCHAR2,
        INUDISTANCE             IN  NUMBER,
        INUPOINTINITIALX        IN  NUMBER,
        INUPOINTINITIALY        IN  NUMBER,
        INUPOINTFINALX          IN  NUMBER,
        INUPOINTFINALY          IN  NUMBER,
        INUDAYSFORSEACH         IN  NUMBER,
        ORFCURSOR               OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32000);
        SBFORMATDATE            VARCHAR2(50) := 'DD-MM-YYYY';
        SBDATE                  VARCHAR2(100) := TO_CHAR(IDTDATE, SBFORMATDATE);
        SBMAXDATE               VARCHAR2(100);
        NUMINUTEOFDAY           NUMBER;
        SBCLASSPROGRAM          VARCHAR2(100);
        NUORDER_STAT_REGISTERED NUMBER := OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED;
        NUORDER_STAT_PROGRAMMED NUMBER := OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED;
        NUORDER_STAT_ASSIGNED   NUMBER := OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED;
        NUPRIOR_ORDER_DELAYED   NUMBER;
        DTREGISTERDATE          OR_ORDER_COMMENT.REGISTER_DATE%TYPE := TRUNC(UT_DATE.FDTSYSDATE);
    BEGIN
        UT_TRACE.TRACE('Inicia OR_BODispatch.getOrdersReposition',15);
        
        NUMINUTEOFDAY := UT_DATE.FNUMINUTEOFDAY(IDTDATE);

        SBCLASSPROGRAM := OR_BOCONSTANTS.CNUPROGCLASSRANGE||','||OR_BOCONSTANTS.CNUPROGCLASSFIXED||','||OR_BOCONSTANTS.CNUPROGCLASSAPROX||','
                          ||CHR(10)||OR_BOCONSTANTS.CNUPROGCLASSUNIT||','||OR_BOCONSTANTS.CNUPROGCLASSRANGEDAY;

        IF ISBFLEXIFLAG = GE_BOCONSTANTS.CSBYES THEN
            SBCLASSPROGRAM := SBCLASSPROGRAM||','||OR_BOCONSTANTS.CNUPROGCLASSFLEX;
        END IF;

        SBSQL :=
        '    SELECT /*+ ordered index(or_sched_available PK_OR_SCHED_AVAILABLE)'||CHR(10)||
        '               index(ge_sectorope_zona IDX_GE_SECTOROPE_ZONA_01) '||CHR(10)||
        '               index(or_order IDX_OR_ORDER_09) '||CHR(10)||
        '               index(or_task_type PK_OR_TASK_TYPE) '||CHR(10)||
        '               index(or_operating_sector PK_OR_OPERATING_SECTOR) '||CHR(10)||
        '               index(or_order_status PK_OR_ORDER_STATUS)  */ '||CHR(10)||
        '           or_order.order_id, '||CHR(10)||
        '           or_order.task_type_id ||' || ''' - ''' || '|| or_task_type.description task_type_desc, '||CHR(10)||
        '           or_order.priority, '||CHR(10)||
        '           Or_BoPrograming.fnuGetDuration(or_order.order_id) duration_real, '||CHR(10)||
        '           decode(or_order.order_status_id, 0, '' '', Or_BoPrograming.fsbGetBaseAdmByOrder(or_order.order_id)) base_adm_desc, '||CHR(10)||
        '           decode(or_order.order_status_id, 0, '' '', Or_BoPrograming.fsbGetZoneByOrder(or_order.order_id)) zone_desc, '||CHR(10)||
        '           or_order.operating_sector_id ||' || ''' - ''' || '|| or_operating_sector.description operating_sector_desc, '||CHR(10)||
        '           decode(or_order.order_status_id, 0, '' '', Or_BoPrograming.fsbGetProgClassByOrder (or_order.order_id)) prog_class_desc, '||CHR(10)||
        '           or_order.arranged_hour, '||CHR(10)||
        '           or_order.order_status_id || ' || ''' - ''' || '|| or_order_status.description order_status_desc, '||CHR(10)||
        '           Or_BoOrder.fnuGetAddressByOrder(or_order.order_id) address_id, '||CHR(10)||
        '           Or_BoOrder.fnuGetSubscriberByOrder(or_order.order_id) subscriber_id, '||CHR(10)||
        '           Or_BcOrderComment.fsbLastCommentTypeByOrder(or_order.order_id) LastcommentType, '||CHR(10)||
        '           or_order.appointment_confirm, '||CHR(10)||
        '           OR_BCOrderComment.fsbGetClassCommentByOrder(or_order.order_id) ClientContact '||CHR(10)||
        '      FROM '||CHR(10)||
        '           or_sched_available, '||CHR(10)||
        '           ge_sectorope_zona, '||CHR(10)||
        '           or_order, '||CHR(10)||
        '           or_task_type, '||CHR(10)||
        '           or_operating_sector, '||CHR(10)||
        '           or_order_status  /*+ OR_BODispatch.getOrdersReposition SAO195403 */ '||CHR(10)||
        '     WHERE or_sched_available.sched_available_id = '|| INUSHEDAVAILABLEID ||CHR(10)||
        '       AND rownum <= '||TO_CHAR(CNUMAX_REG_REPOSITION)||CHR(10)||
        '       AND ge_sectorope_zona.id_zona_operativa = or_sched_available.operating_zone_id '||CHR(10)||
        '       AND or_order.operating_sector_id = ge_sectorope_zona.id_sector_operativo '||CHR(10)||
        '       AND or_task_type.task_type_id = or_order.task_type_id '||CHR(10)||
        '       AND or_order.order_status_id in ('||NUORDER_STAT_REGISTERED||','||NUORDER_STAT_PROGRAMMED||','||NUORDER_STAT_ASSIGNED||')'||CHR(10)||
        '       AND or_operating_sector.operating_sector_id = or_order.operating_sector_id '||CHR(10)||
        '       AND (select Or_BCSched.fsbIsValidActOrder '||CHR(10)||
        '                ( '||CHR(10)||
        '                     or_sched_available.rol_exception_flag, '||CHR(10)||
        '                     or_sched_available.sched_available_id, '||CHR(10)||
        '                     or_order.order_id, '||CHR(10)||
        '                     or_sched_available.operating_unit_id '||CHR(10)||
        '                ) FROM dual) = ''' || GE_BOCONSTANTS.CSBYES ||''''||CHR(10)||
        '       AND  not exists  ( SELECT /*+ index(or_sched_dispatch IDX_OR_SCHED_DISPATCH_03) */ 1
                                  from  or_sched_dispatch
                                  WHERE or_sched_dispatch.order_id = or_order.order_id
                                  AND or_sched_available.date_ = or_sched_dispatch.date_
                                  and or_sched_available.operating_unit_id = or_sched_dispatch.operating_unit_id
                                  AND or_sched_dispatch.dispatch_status in ('''||OR_BOCONSTANTS.CSBDISPATCHSTATUSOVERLOAD||''', '''||
                                                                                 OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED||''', '''||
                                                                                 OR_BOCONSTANTS.CSBDISPATCHSTATUSMOVING||''', '''||
                                                                                 OR_BOCONSTANTS.CSBDISPATCHSTATUSEXECUTING||''', '''||
                                                                                 OR_BOCONSTANTS.CSBDISPATCHSTATUSLEGALIZED||''', '''||
                                                                                 OR_BOCONSTANTS.CSBDISPATCHSTATUSCLOSE||'''))'||CHR(10)||
        '       AND  or_order.adm_pending IS NULL '||CHR(10)||
        '       AND or_order_status.order_status_id = or_order.order_status_id  '||CHR(10);
        
        IF INUORDERID IS NOT NULL THEN
            IF (INUSHEDAVAILABLEID IS NOT NULL AND
                OR_BCDISPATCH.FBLORDERASSIGNED
                    (   INUORDERID,
                        DAOR_SCHED_AVAILABLE.FNUGETOPERATING_UNIT_ID(INUSHEDAVAILABLEID),
                        IDTDATE
                    )
                ) THEN
                
                GE_BOERRORS.SETERRORCODE(CNUERROR_121822);
            END IF;
            SBSQL := SBSQL ||
            '    AND or_order.order_id = '|| INUORDERID ||CHR(10)||
            '    AND not exists( SELECT 1 '||CHR(10)||
                '                   FROM    or_order_comment,'||CHR(10)||
                '                           ge_comment_type'||CHR(10)||
                '                   WHERE   or_order_comment.order_id = or_order.order_id'||CHR(10)||
                '                   AND     ge_comment_type.comment_type_id = or_order_comment.comment_type_id'||CHR(10)||
                '                   AND     ge_comment_type.comment_class_id = '''||OR_BOCONSTANTS.CNUCONTACTAFTER||''''||CHR(10)||
                '                   AND     or_order_comment.register_date >'''||DTREGISTERDATE||''''||CHR(10)||
                '                   AND     ROWNUM = 1'||CHR(10)||
                '              )'||CHR(10);
        ELSE

            IF INUFIRSTPRIOR = 1 THEN
                
                NUPRIOR_ORDER_DELAYED := GE_BOPARAMETER.FNUGET(OR_BOCONSTANTS.CSBPRIOR_ORDER_DELAYED);
                IF NUPRIOR_ORDER_DELAYED IS NULL THEN
                    NUPRIOR_ORDER_DELAYED := OR_BOCONSTANTS.CNUDEF_VAL_PRIOR_ORD_DELAY;
                END IF;
                SBSQL := SBSQL ||
                '       AND or_order.priority = '|| NUPRIOR_ORDER_DELAYED ||CHR(10);
                
                IF (ISBFLEXIFLAG = GE_BOCONSTANTS.CSBNO) THEN
                    SBSQL := SBSQL ||
                    '       AND ((or_order.order_status_id = '||OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED||' '||CHR(10)||
                    '            AND not exists ( '||CHR(10)||
                    '               SELECT /*+ index (or_sched_dispatch IDX_OR_SCHED_DISPATCH_03)*/ 1 '||CHR(10)||
                    '                 FROM or_sched_dispatch '||CHR(10)||
                    '                WHERE or_sched_dispatch.programing_class_id = '||OR_BOCONSTANTS.CNUPROGCLASSFLEX||' '||CHR(10)||
                    '                  AND or_sched_dispatch.dispatch_status IN '||
                                          '('''||OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED||''',
                                            '''||OR_BOCONSTANTS.CSBDISPATCHSTATUSOVERLOAD||''',
                                            '''||OR_BOCONSTANTS.CSBDISPATCHSTATUSMOVING||''',
                                            '''||OR_BOCONSTANTS.CSBDISPATCHSTATUSEXECUTING||'''
                                           )'||CHR(10)||
                    '                  AND or_sched_dispatch.order_id = or_order.order_id '||CHR(10)||
                    '                  AND or_sched_dispatch.operating_unit_id = or_sched_available.operating_unit_id '||CHR(10)||
                    '                  AND or_sched_dispatch.date_ = or_sched_available.date_ '||CHR(10)||
                    '                  AND or_sched_dispatch.operating_zone_id = or_sched_available.operating_zone_id '||CHR(10)||
                    '                  AND or_sched_dispatch.scheduler_id = or_sched_available.scheduler_id '||CHR(10)||
                    '               )'||CHR(10)||
                    '           )'||CHR(10)||
                    '       OR (or_order.order_status_id = '||OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED||' '||CHR(10)||
                    '            AND not exists ( '||CHR(10)||
                    '               SELECT /*+ index (or_sched_programing IDX_OR_SCHED_PROGRAMING_02)*/ 1 '||CHR(10)||
                    '                 FROM or_sched_programing '||CHR(10)||
                    '                WHERE or_sched_programing.programing_class_id = '||OR_BOCONSTANTS.CNUPROGCLASSFLEX||' '||CHR(10)||
                    '                  AND or_sched_programing.programing_status IN '||
                                          '('''||OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED||''',
                                            '''||OR_BOCONSTANTS.CSBPROGSTATUSOVERLOAD||'''
                                           )'||CHR(10)||
                    '                  AND or_sched_programing.order_id = or_order.order_id '||CHR(10)||
                    '                  AND or_order.order_status_id = '||OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED||' '||CHR(10)||
                    '                  AND or_sched_programing.sched_available_id = or_sched_available.sched_available_id '||CHR(10)||
                    '               ) '||CHR(10)||
                    '           )'||CHR(10)||
                    '       OR or_order.order_status_id = '||OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED||' '||CHR(10)||
                    '       )'||CHR(10);
                END IF;
            ELSIF INUFIRSTPRIOR = 2 THEN
                
                IF GE_BOPARAMETER.FNUGET('OPER_UNIT_ABSENT') IS NULL THEN
                    
                    GE_BOERRORS.SETERRORCODEARGUMENT(122142,'OPER_UNIT_ABSENT'||' - '|| DAGE_PARAMETER.FSBGETDESCRIPTION('OPER_UNIT_ABSENT'));
                END IF;

                IF GE_BOPARAMETER.FNUGET('OR_DISPATCH_UNITCLAS') IS NULL THEN
                    
                    GE_BOERRORS.SETERRORCODEARGUMENT(122142,'OR_DISPATCH_UNITCLAS'||' - '|| DAGE_PARAMETER.FSBGETDESCRIPTION('OR_DISPATCH_UNITCLAS'));
                END IF;

                SBSQL := SBSQL ||
                '    AND exists '||CHR(10)||
                '    ( '||CHR(10)||
                '    SELECT /*+ index(or_sched_dispatch IDX_OR_SCHED_DISPATCH_03) */ or_sched_dispatch.order_id '||CHR(10)||
                '      FROM or_sched_dispatch '||CHR(10)||
                '     WHERE or_sched_dispatch.order_id = or_order.order_id '||CHR(10)||
                '       AND or_sched_dispatch.date_ = (to_date( '''||SBDATE ||''', '''||SBFORMATDATE||''')) '||CHR(10)||
                '       AND or_sched_dispatch.programing_class_id in ( '||SBCLASSPROGRAM||' ) '||CHR(10)||
                '       AND or_sched_dispatch.dispatch_status IN (''O'', ''S'', ''M'', ''E'' ) '||CHR(10)||
                '       AND or_sched_dispatch.operating_unit_id IN '||CHR(10)||
                '           ( '||CHR(10)||
                '              SELECT operating_unit_id '||CHR(10)||
                '                FROM or_operating_unit '||CHR(10)||
                '               WHERE or_operating_unit.oper_unit_status_id = '|| GE_BOPARAMETER.FNUGET('OPER_UNIT_ABSENT') ||CHR(10)||
                '                 AND OR_operating_unit.oper_unit_classif_id != '|| GE_BOPARAMETER.FNUGET('OR_DISPATCH_UNITCLAS') ||CHR(10)||
                '                 AND or_operating_unit.operating_unit_id IN '||CHR(10)||
                '                   ( '||CHR(10)||
                '                    SELECT or_sched_available.operating_unit_id '||CHR(10)||
                '                      FROM or_sched_available '||CHR(10)||
                '                     WHERE or_sched_available.sched_available_id IN '||CHR(10)||
                '                           ( '||CHR(10)||
                '                            SELECT person_trabajo.id_disponibilidad '||CHR(10)||
                '                              FROM or_persona_disponib person_trabajo '||CHR(10)||
                '                             WHERE person_trabajo.id_persona IN '||CHR(10)||
                '                                 ( '||CHR(10)||
                '                                    SELECT person_dispatcher.id_persona '||CHR(10)||
                '                                      FROM or_persona_disponib person_dispatcher '||CHR(10)||
                '                                     WHERE person_dispatcher.id_disponibilidad = '||INUSCHEDDISPATCHER||CHR(10)||
                '                                 ) '||CHR(10)||
                '                           ) '||CHR(10)||
                '                       AND or_sched_available.sched_available_id != '||INUSCHEDDISPATCHER||CHR(10)||
                '                       AND or_sched_available.date_ = ( to_date( '''||SBDATE ||''', '''||SBFORMATDATE||''')) '||CHR(10)||
                '                   ) '||CHR(10)||
                '           ) '||CHR(10)||
                '    ) '||CHR(10);
            ELSIF INUFIRSTPRIOR = 3 THEN
                
                SBSQL := SBSQL ||
                '    AND exists '||CHR(10)||
                '    ( '||CHR(10)||
                '    SELECT /*+ index(or_sched_dispatch IDX_OR_SCHED_DISPATCH_03) */ or_sched_dispatch.order_id '||CHR(10)||
                '      FROM or_sched_dispatch '||CHR(10)||
                '     WHERE or_sched_dispatch.order_id = or_order.order_id '||CHR(10)||
                '       AND or_sched_dispatch.date_ = (to_date( '''||SBDATE ||''', '''||SBFORMATDATE||''')) '||CHR(10)||
                '       AND or_sched_dispatch.programing_class_id in ( '||SBCLASSPROGRAM||' ) '||CHR(10)||
                '       AND or_sched_dispatch.dispatch_status = '''||OR_BOCONSTANTS.CSBDISPATCHSTATUSOVERLOAD||''''||CHR(10)||
                '       AND or_sched_dispatch.operating_unit_id IN '||CHR(10)||
                '         ( '||CHR(10)||
                '          SELECT operating_unit_id '||CHR(10)||
                '            FROM or_operating_unit '||CHR(10)||
                '             WHERE OR_operating_unit.oper_unit_classif_id != '||GE_BOPARAMETER.FNUGET('OR_DISPATCH_UNITCLAS')||CHR(10)||
                '             AND or_operating_unit.operating_unit_id IN '||CHR(10)||
                '               ( '||CHR(10)||
                '                SELECT or_sched_available.operating_unit_id '||CHR(10)||
                '                  FROM or_sched_available '||CHR(10)||
                '                 WHERE or_sched_available.sched_available_id IN '||CHR(10)||
                '                     ( '||CHR(10)||
                '                        SELECT person_trabajo.id_disponibilidad '||CHR(10)||
                '                          FROM or_persona_disponib person_trabajo '||CHR(10)||
                '                         WHERE person_trabajo.id_persona IN '||CHR(10)||
                '                             ( '||CHR(10)||
                '                                SELECT person_dispatcher.id_persona '||CHR(10)||
                '                                  FROM or_persona_disponib person_dispatcher '||CHR(10)||
                '                                 WHERE person_dispatcher.id_disponibilidad = '||INUSCHEDDISPATCHER||CHR(10)||
                '                             ) '||CHR(10)||
                '                     ) '||CHR(10)||
                '                   AND or_sched_available.sched_available_id != '||INUSCHEDDISPATCHER||CHR(10)||
                '                   AND or_sched_available.date_ = (to_date( '''||SBDATE ||''', '''||SBFORMATDATE||''')) '||CHR(10)||
                '               ) '||CHR(10)||
                '         ) '||CHR(10)||
                '    ) '||CHR(10);

            ELSIF INUFIRSTPRIOR = 4 THEN
                SBMAXDATE := TO_CHAR(IDTDATE + NVL(INUDAYSFORSEACH, OR_BOCONSTANTS.CNUDAYSFORSEACHPROG), SBFORMATDATE);
                
                SBSQL := SBSQL ||
                '    AND or_order_status.order_status_id IN '||CHR(10)||
                '        ( '||OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED||', '||CHR(10)||
                '          '||OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED||' '||CHR(10)||
                '        ) '||CHR(10)||
                '    AND or_order.offered IS NULL '||CHR(10)||
                '    AND exists '||CHR(10)||
                '        ( '||CHR(10)||
                '        SELECT /*+ ordered use_nl(or_sched_programing, or_sched_available)  '||CHR(10)||
                '                   index(or_sched_programing IDX_OR_SCHED_PROGRAMING_02)    '||CHR(10)||
                '                   index(or_sched_available PK_OR_SCHED_AVAILABLE) */       '||CHR(10)||
                '               or_sched_programing.order_id '||CHR(10)||
                '          FROM or_sched_programing, '||CHR(10)||
                '               or_sched_available   '||CHR(10)||
                '         WHERE or_sched_programing.order_id = or_order.order_id '||CHR(10)||
                '           AND or_sched_programing.sched_available_id = or_sched_available.sched_available_id '||CHR(10)||
                '           AND or_sched_programing.programing_class_id in ( '||SBCLASSPROGRAM||' ) '||CHR(10)||
                '           AND or_sched_available.date_ > (to_date( '''||SBDATE ||''', '''||SBFORMATDATE||''')) '||CHR(10)||
                '           AND or_sched_available.date_ <= (to_date( '''|| SBMAXDATE ||''', '''||SBFORMATDATE||''')) '||CHR(10)||
                '           AND or_sched_programing.order_id IS not null '||CHR(10)||
                '           AND or_sched_programing.programing_status in ('''||OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED||''', '||
                                                                         ''''||OR_BOCONSTANTS.CSBPROGSTATUSOVERLOAD||''')'||CHR(10)||
                '        ) '||CHR(10)||
                '    AND not exists( SELECT 1 '||CHR(10)||
                '                       FROM    or_order_comment,'||CHR(10)||
                '                               ge_comment_type'||CHR(10)||
                '                       WHERE   or_order_comment.order_id = or_order.order_id'||CHR(10)||
                '                       AND     ge_comment_type.comment_type_id = or_order_comment.comment_type_id'||CHR(10)||
                '                       AND     ge_comment_type.comment_class_id = '''||OR_BOCONSTANTS.CNUCONTACTAFTER||''''||CHR(10)||
                '                       AND     or_order_comment.register_date >'''||DTREGISTERDATE||''''||CHR(10)||
                '                       AND     ROWNUM = 1'||CHR(10)||
                '             ) '||CHR(10);
            ELSIF INUFIRSTPRIOR = 5 THEN
                
                SBSQL := SBSQL ||
                '    AND or_order.offered IS NULL '||CHR(10)||
                '    AND or_order.order_status_id = '||OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED||CHR(10)||
                '    AND not exists ( SELECT 1 '||CHR(10)||
                '                       FROM    or_order_comment,'||CHR(10)||
                '                               ge_comment_type'||CHR(10)||
                '                       WHERE   or_order_comment.order_id = or_order.order_id'||CHR(10)||
                '                       AND     ge_comment_type.comment_type_id = or_order_comment.comment_type_id'||CHR(10)||
                '                       AND     ge_comment_type.comment_class_id = '''||OR_BOCONSTANTS.CNUCONTACTAFTER||''''||CHR(10)||
                '                       AND     or_order_comment.register_date >'''||DTREGISTERDATE||''''||CHR(10)||
                '                       AND     ROWNUM = 1'||CHR(10)||
                '             )'||CHR(10);
            END IF;

            IF (ISBSEARCHTYPE = 2) THEN
                SBSQL := SBSQL ||
                '    AND  sdo_within_distance( '||CHR(10)||
                '                    OR_order.shape, '||CHR(10)||
                '                    mdsys.sdo_geometry( '||CHR(10)||
                '                                        2001, '||CHR(10)||
                '                                        '||CNUSRID||', '||CHR(10)||
                '                                        NULL, '||CHR(10)||
                '                                        mdsys.sdo_elem_info_array(1,1,1), '||CHR(10)||
                '                                        mdsys.sdo_ordinate_array('||INUPOINTINITIALX||','||INUPOINTINITIALY||') '||CHR(10)||
                '                                       ), '||CHR(10)||
                '                    '''||CSBDISTANCE_GEO_ORDER||INUDISTANCE||''' ) = ''TRUE'' '||CHR(10)||
                '     '||CHR(10);
            ELSIF (ISBSEARCHTYPE = 4) THEN
                SBSQL := SBSQL ||
                '    AND sdo_within_distance( '||CHR(10)||
                '                    or_order.shape, '||CHR(10)||
                '                    mdsys.sdo_geometry '||CHR(10)||
                '                        ( '||CHR(10)||
                '                            2002, '||CHR(10)||
                '                            '||CNUSRID||', '||CHR(10)||
                '                            NULL, '||CHR(10)||
                '                            mdsys.sdo_elem_info_array(1,2,1), '||CHR(10)||
                '                            mdsys.sdo_ordinate_array '||CHR(10)||
                '                                ( '||CHR(10)||
                '                                    '||INUPOINTINITIALX||', '||INUPOINTINITIALY||', '||CHR(10)||
                '                                    '||INUPOINTFINALX||', '||INUPOINTFINALY||' '||CHR(10)||
                '                                ) '||CHR(10)||
                '                        ), '||CHR(10)||
                '                '''||CSBDISTANCE_GEO_ORDER||INUDISTANCE||''' ) = ''TRUE'' '||CHR(10)||
                '    '||CHR(10);
            END IF;
        END IF;

        UT_TRACE.TRACE('SQL1 ['||SUBSTR(SBSQL, 1, LENGTH(SBSQL)/2)||']',15);
        UT_TRACE.TRACE('SQL2 ['||SUBSTR(SBSQL, (LENGTH(SBSQL)/2)+1)||']',15);

        OPEN ORFCURSOR FOR SBSQL;
        
        OR_BOPROGRAMING.CLEARCACHEBYORDER;

        UT_TRACE.TRACE('Finaliza OR_BODispatch.getOrdersReposition',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : OTHERS',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERSREPOSITION;

    
























    PROCEDURE GETFREEBLOCKS
    (
        INUWORKUNITID   IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTDATE         IN  OR_SCHED_AVAILABLE.DATE_%TYPE,
        INUDURATION     IN  NUMBER,
        IONUSCHEDAVAILID IN  OUT OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE,
        ORFCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUSCHEDULERID   OR_SCHED_AVAILABLE.SCHEDULER_ID%TYPE;
        TBAVAILBYUNIT   DAOR_SCHED_AVAILABLE.TYTBOR_SCHED_AVAILABLE;
        RCAVAILUNIT     DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
    BEGIN
        UT_TRACE.TRACE('Inicia OR_BODispatch.GetFreeBlocks',15);
        UT_TRACE.TRACE('inuWorkUnitId ['||INUWORKUNITID||'] - idtDate ['||IDTDATE||'] - inuDuration ['||INUDURATION||'] - ionuSchedAvailId ['||IONUSCHEDAVAILID||']',15);

        IF(IONUSCHEDAVAILID > 0) THEN
            NUSCHEDULERID   := DAOR_SCHED_AVAILABLE.FNUGETSCHEDULER_ID(IONUSCHEDAVAILID);
        ELSE
            
            TBAVAILBYUNIT := OR_BCSCHED.FTBGETAVAILPROCESSBYUNIT(INUWORKUNITID, TRUNC(IDTDATE), UT_DATE.FNUMINUTEOFDAY(SYSDATE));
            UT_TRACE.TRACE('tbAvailByUnit.count ['||TBAVAILBYUNIT.COUNT||']',15);
            IF(TBAVAILBYUNIT.COUNT > 0) THEN
                RCAVAILUNIT :=  TBAVAILBYUNIT(TBAVAILBYUNIT.FIRST);
                IONUSCHEDAVAILID    := RCAVAILUNIT.SCHED_AVAILABLE_ID;
                NUSCHEDULERID       := RCAVAILUNIT.SCHEDULER_ID;

                UT_TRACE.TRACE('ionuSchedAvailId ['||IONUSCHEDAVAILID||'] - nuSchedulerid['||NUSCHEDULERID||']',15);
            ELSE
                ORFCURSOR := NULL;
                UT_TRACE.TRACE('No Encontr� Disponibilidades ',15);
                RETURN;
            END IF;
        END IF;

        ORFCURSOR := OR_BCDISPATCH.FRFGETFREEBLOCKS
                        (
                            INUWORKUNITID,
                            IDTDATE,
                            INUDURATION,
                            NUSCHEDULERID,
                            IONUSCHEDAVAILID
                        );
        
        UT_TRACE.TRACE('Finaliza OR_BODispatch.GetFreeBlocks',15);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : OTHERS',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    













    PROCEDURE UPDATEOLDPROGRAMING
    (
        INUORDERID              IN  OR_SCHED_PROGRAMING.ORDER_ID%TYPE
    )
    IS
        BLEXISTSPROGRAMING      BOOLEAN;
        RCSCHEDPROGRAMING       DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        NUSCHEDPROGRAMINGNEW    OR_SCHED_PROGRAMING.SCHED_PROGRAMING_ID%TYPE;
        NUOLDPROGRAMINGSTATUS   OR_SCHED_PROGRAMING.PROGRAMING_STATUS%TYPE;
        RCSCHEDAVAILABLE        DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;

    BEGIN

        UT_TRACE.TRACE('--[INICIO] OR_BODispatch.UPdateOldPrograming inuOrderId:'||INUORDERID, 10);
        
        BLEXISTSPROGRAMING := OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(INUORDERID, RCSCHEDPROGRAMING);
        
        IF (BLEXISTSPROGRAMING) THEN
            OR_BCSCHED.GETAVAILABLEBYPKBLOQ(RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID, RCSCHEDAVAILABLE);
            IF (RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID IS NOT NULL) THEN
                
                NUOLDPROGRAMINGSTATUS := RCSCHEDPROGRAMING.PROGRAMING_STATUS;
                
                RCSCHEDPROGRAMING.PROGRAMING_STATUS := OR_BOCONSTANTS.CSBPROGSTATUSREPROG;
                
                RCSCHEDPROGRAMING.COMMENT_        := 'Se re-asigno desde el despacho por demanda';
                
                DAOR_SCHED_PROGRAMING.UPDRECORD(RCSCHEDPROGRAMING);
                IF (NUOLDPROGRAMINGSTATUS != OR_BOCONSTANTS.CSBPROGSTATUSOVERLOAD) THEN
                    
                    OR_BOPROGRAMING.GENERATEBLOCK
                    (
                        RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID,
                        RCSCHEDPROGRAMING.HOUR_START,
                        RCSCHEDPROGRAMING.DURATION,
                        NUSCHEDPROGRAMINGNEW
                    );
                END IF;
                
                OR_BOSCHED.RECALAVAILABILITYTIMES(RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID);
            END IF;
        END IF;
        UT_TRACE.TRACE('--[FIN] OR_BODispatch.UPdateOldPrograming _> rcSchedPrograming.sched_available_id:[' || RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID || ']', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEOLDPROGRAMING;
    
    














































    PROCEDURE REASSIGNORDER
    (
        INUORDERID              IN  OR_ORDER.ORDER_ID%TYPE,
        INUWORKUNITID           IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUTARGETDISP           IN  OR_SCHED_DISPATCH.SCHED_DISPATCH_ID%TYPE,
        IDTDATE                 IN  OR_SCHED_DISPATCH.DATE_%TYPE,
        INUSCHEDAVAILABLEID     IN  OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE
    )
    IS
        NUORIGINDISP    OR_SCHED_DISPATCH.SCHED_DISPATCH_ID%TYPE;
        NUTARGETDISP    OR_SCHED_DISPATCH.SCHED_DISPATCH_ID%TYPE;
        NUEXISTBLOCK    OR_SCHED_DISPATCH.SCHED_DISPATCH_ID%TYPE;

        RCTARGETDISP    DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        RCORIGINDISP    DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        
        RCPROGRAMMING   DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        RCAVAILABLE     DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        RCOR_ORDER      DAOR_ORDER.STYOR_ORDER;
        NUDURATION      OR_SCHED_DISPATCH.DURATION%TYPE;
        NUSCHEDAVAID    OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE;
        NUIDADDRESS     AB_ADDRESS.ADDRESS_ID%TYPE;
        NUADDRESSTIME   AB_PREMISE_TYPE.ACCESS_TIME%TYPE;
        NUHOUREND       NUMBER := 0;
        
        RCSCHEDDISPATCH     DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;

    BEGIN
        UT_TRACE.TRACE('Inicia OR_BODispatch.reassignOrder',15);

        UT_TRACE.TRACE(' inuOrderId['|| INUORDERID||'] - inuWorkUnitId['||INUWORKUNITID||'] - inuTargetDisp['||INUTARGETDISP||
                       '] - idtDate['|| IDTDATE||'] - inuSchedAvailableId['||  INUSCHEDAVAILABLEID||']' ,15);
        
        
        
        
        NUDURATION := OR_BCOPTIMUNROUTE.FNUCALCULARDURACION(INUORDERID);
        
        IF (INUTARGETDISP = -1 ) THEN
            UT_TRACE.TRACE('-- obtiene la disponibilidad de la unidad enviada inuTargetDisp = -1 - inuSchedAvailableId['||INUSCHEDAVAILABLEID||']',15);

            
            IF (INUSCHEDAVAILABLEID IS NULL) THEN
                OR_BCSCHED.GETAVAILABILITYBYDATEUNIT
                (
                    INUWORKUNITID, 
                    UT_DATE.FNUMINUTEOFDAY(IDTDATE), 
                    1, 
                    IDTDATE, 
                    NUSCHEDAVAID
                );
                
                
                IF (NUSCHEDAVAID IS NULL) THEN
                    GE_BOERRORS.SETERRORCODEARGUMENT
                    (
                        CNUERROR_17542 ,
                        INUWORKUNITID||'|'||TO_CHAR(IDTDATE, 'DD-MM-YYYY HH24:MI:SS')
                    );
                END IF;
                
            END IF;
            
            
            NUTARGETDISP := OR_BCDISPATCH.FNULASTDISPATCHBLOCK
                                    (
                                        INUWORKUNITID,
                                        IDTDATE,
                                        NVL(INUSCHEDAVAILABLEID, NUSCHEDAVAID)
                                    );
        ELSE
            NUTARGETDISP := INUTARGETDISP;
        END IF;
        
        NUSCHEDAVAID := NVL(INUSCHEDAVAILABLEID, NUSCHEDAVAID);

        UT_TRACE.TRACE('nuTargetDisp['||NUTARGETDISP||'] - nuSchedAvaId: '||NUSCHEDAVAID,15);

        
        OR_BCSCHED.SCHEDAVAILABLEBLOCK(NUSCHEDAVAID);
        
        RCAVAILABLE := DAOR_SCHED_AVAILABLE.FRCGETRECORD(NUSCHEDAVAID);
        
        IF (NUTARGETDISP IS NULL) THEN

            BEGIN

                NUIDADDRESS := OR_BCORDERACTIVITIES.FNUOBTDIRECCIONBYORDER(INUORDERID);

            EXCEPTION
                WHEN OTHERS THEN
                    NUIDADDRESS := NULL;
            END;

            IF (NUIDADDRESS IS NOT NULL) THEN
                
                NUADDRESSTIME := AB_BCPREDIOINFO.FNUOBTTIEMPOACCESO(NUIDADDRESS);
            END IF;

            
            OR_BOPROGRAMING.GETSTANDARDTIMEBYORDER(INUORDERID, NUDURATION);
            
            NUDURATION := NVL(NUDURATION,0) + NVL(NUADDRESSTIME, 0);

            UT_TRACE.TRACE('nuTargetDisp IS null - nuDuration: '||NUDURATION,15);
            
            GETFREEDISPATCHBYUNIT(
                                    INUWORKUNITID,
                                    IDTDATE,
                                    RCAVAILABLE.OPERATING_ZONE_ID,
                                    NUSCHEDAVAID,
                                    ROUND(NUDURATION * (1 + NVL(DAOR_OPERATING_UNIT.FNUGETADD_VALUE_ORDER(INUWORKUNITID), 0)/100)) + DAOR_OPERATING_ZONE.FNUGETTIME_DISPLACEMENT(RCAVAILABLE.OPERATING_ZONE_ID),
                                    RCTARGETDISP
                                 );

            RCTARGETDISP.SCHEDULER_ID := RCAVAILABLE.SCHEDULER_ID;
            RCTARGETDISP.OPERATING_ZONE_ID := RCAVAILABLE.OPERATING_ZONE_ID;
            
            
            
        ELSE
            RCTARGETDISP := DAOR_SCHED_DISPATCH.FRCGETRECORD(NUTARGETDISP);
        END IF;
        
        NUORIGINDISP := OR_BCDISPATCH.FNUGETDISPATCHFROMORDER(INUORDERID);
        UT_TRACE.TRACE('Bloque Predecesor ['||NUTARGETDISP||'] - rcTargetDisp.hour_start['|| RCTARGETDISP.HOUR_START
        ||'] - rcTargetDisp.hour_end['|| RCTARGETDISP.HOUR_END||']Bloque Origen ['||NUORIGINDISP||']',15);
        
        
        IF RCTARGETDISP.HOUR_START + RCTARGETDISP.DURATION > 1440 THEN
            GE_BOERRORS.SETERRORCODE(5280);
        END IF;
        
        RCOR_ORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);
        
        IF (RCOR_ORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED
            AND NUORIGINDISP IS NOT NULL ) THEN
            UT_TRACE.TRACE('La Orden '||INUORDERID||' esta Asignada',15);

            RCORIGINDISP := DAOR_SCHED_DISPATCH.FRCGETRECORD(NUORIGINDISP);
            
            NUDURATION := RCORIGINDISP.DURATION_REQUIRED;
            NUHOUREND := RCTARGETDISP.HOUR_END;
            
            
            NUEXISTBLOCK := OR_BCDISPATCH.FNUBLOCKOVERLAPING
                            (
                               INUWORKUNITID,
                               NUHOUREND, 
                               ROUND(NUHOUREND + NUDURATION * (1 + NVL(DAOR_OPERATING_UNIT.FNUGETADD_VALUE_ORDER(INUWORKUNITID), 0)/100)) + DAOR_OPERATING_ZONE.FNUGETTIME_DISPLACEMENT(RCAVAILABLE.OPERATING_ZONE_ID),
                               INUORDERID,
                               IDTDATE
                            );

            
            IF(NUEXISTBLOCK > 0 AND INUTARGETDISP = -1)THEN
                
                UT_TRACE.TRACE('-- Debe buscar otro bloque donde insertar la orden asignada - nuExistBlock['||NUEXISTBLOCK||']',15);
                GETFREEDISPATCHBYUNIT(
                                        INUWORKUNITID,
                                        IDTDATE,
                                        RCTARGETDISP.OPERATING_ZONE_ID,
                                        NUSCHEDAVAID,
                                        ROUND(NUDURATION * (1 + NVL(DAOR_OPERATING_UNIT.FNUGETADD_VALUE_ORDER(INUWORKUNITID), 0)/100)) + DAOR_OPERATING_ZONE.FNUGETTIME_DISPLACEMENT(RCAVAILABLE.OPERATING_ZONE_ID),
                                        RCTARGETDISP
                                     );
                
                IF(RCTARGETDISP.DURATION = -1)THEN
                    
                    GE_BOERRORS.SETERRORCODE(13754);
                END IF;
                
                NUHOUREND := RCTARGETDISP.HOUR_START;
            
            ELSIF (INUTARGETDISP = -1 AND NUEXISTBLOCK = -1)THEN
                


                UT_TRACE.TRACE('Entr� aqu� ',15);
                NUHOUREND := RCTARGETDISP.HOUR_START;
            END IF;

            UT_TRACE.TRACE('Valida si encontr� registro donde insertar - rcTargetDisp.sched_dispatch_id  ['||RCTARGETDISP.SCHED_DISPATCH_ID ||'] - nuHourEnd['||NUHOUREND||'] ',15);

            UT_TRACE.TRACE('nuOriginDisp ['||NUORIGINDISP||'] - inuWorkUnitId['||INUWORKUNITID||'] ',15);
            UT_TRACE.TRACE(' nuHourEnd['||NUHOUREND||'] - rcAvailable.scheduler_id['||RCAVAILABLE.SCHEDULER_ID||'] ',15);
            UT_TRACE.TRACE(' rcAvailable.operating_zone_id['||RCAVAILABLE.OPERATING_ZONE_ID||'] - idtdate['||IDTDATE||'] ',15);

            
            IF(RCTARGETDISP.SCHED_DISPATCH_ID IS NULL AND NUHOUREND IS NULL)THEN
                GE_BOERRORS.SETERRORCODE(13754);
            END IF;

            OR_BODISPATCH.UPDATESCHEDDISPATCH
            (
                NUORIGINDISP,
                OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED,
                INUWORKUNITID,
                NUHOUREND, 
                RCOR_ORDER.ORDER_STATUS_ID,
                ROUND(NUDURATION * (1 + NVL(DAOR_OPERATING_UNIT.FNUGETADD_VALUE_ORDER(INUWORKUNITID), 0)/100)) + DAOR_OPERATING_ZONE.FNUGETTIME_DISPLACEMENT(RCAVAILABLE.OPERATING_ZONE_ID),
                RCAVAILABLE.SCHEDULER_ID,
                RCAVAILABLE.OPERATING_ZONE_ID,
                IDTDATE
            );

        ELSE  

            
            IF(RCOR_ORDER.ORDER_STATUS_ID IN (
                                                OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING,
                                                OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING,
                                                OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED,
                                                OR_BOCONSTANTS.CNUORDER_STAT_PLANNED,
                                                OR_BOCONSTANTS.CNUORDER_STAT_CLOSED,
                                                OR_BOCONSTANTS.CNUORDER_STAT_LOCK
                                            )
            ) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(845, RCOR_ORDER.ORDER_ID);
            END IF;
            
            UT_TRACE.TRACE(' Valida que el espacio libre no haya sido ocupado - Duracion act+dir['||NUDURATION||'',15);
            

            NUHOUREND := RCTARGETDISP.HOUR_END;

            IF(NUTARGETDISP IS NULL)THEN
                UT_TRACE.TRACE('NEW nuHourEnd: '||NUHOUREND,15);
                
                
                
                NUHOUREND := RCTARGETDISP.HOUR_START;
                UT_TRACE.TRACE('NEW nuHourEnd: '||NUHOUREND,15);
            END IF;

            NUEXISTBLOCK := OR_BCDISPATCH.FNUBLOCKOVERLAPING
                            (
                               INUWORKUNITID,
                               NUHOUREND,
                               NUHOUREND + ROUND(NUDURATION * (1 + NVL(DAOR_OPERATING_UNIT.FNUGETADD_VALUE_ORDER(INUWORKUNITID), 0)/100)) + DAOR_OPERATING_ZONE.FNUGETTIME_DISPLACEMENT(RCTARGETDISP.OPERATING_ZONE_ID),
                               INUORDERID,
                               IDTDATE
                            );

            IF( NUEXISTBLOCK > 0) THEN
                
                UT_TRACE.TRACE('-- Debe buscar otro bloque donde insertar en medio de la franja - nuExistBlock['||NUEXISTBLOCK||']',15);
                GETFREEDISPATCHBYUNIT(
                                        INUWORKUNITID,
                                        IDTDATE,
                                        RCTARGETDISP.OPERATING_ZONE_ID,
                                        NUSCHEDAVAID,
                                        ROUND(NUDURATION * (1 + NVL(DAOR_OPERATING_UNIT.FNUGETADD_VALUE_ORDER(INUWORKUNITID), 0)/100)) + DAOR_OPERATING_ZONE.FNUGETTIME_DISPLACEMENT(RCTARGETDISP.OPERATING_ZONE_ID),
                                        RCTARGETDISP
                                     );
                
                IF(RCTARGETDISP.DURATION = -1)THEN
                    
                    GE_BOERRORS.SETERRORCODE(13754);
                END IF;
                UT_TRACE.TRACE('rcTargetDisp: '||RCTARGETDISP.HOUR_START,15);
                
                
                
                RCTARGETDISP.HOUR_START := RCTARGETDISP.HOUR_START - RCTARGETDISP.DURATION;
            END IF;

            
            IF(RCTARGETDISP.DURATION = -1)THEN
                
                GE_BOERRORS.SETERRORCODE(13754);
            END IF;

            IF(NUTARGETDISP IS NULL)THEN
                UT_TRACE.TRACE('new rcTargetDisp.hour_start: '||RCTARGETDISP.HOUR_START,15);
                
                
                
                RCTARGETDISP.HOUR_START := RCTARGETDISP.HOUR_START - RCTARGETDISP.DURATION;
                UT_TRACE.TRACE('new rcTargetDisp.hour_start: '||RCTARGETDISP.HOUR_START,15);
            END IF;

            OR_BODISPATCH.CREATEDISPATCHBLOCK
            (
                RCTARGETDISP.OPERATING_ZONE_ID,
                IDTDATE,
                INUWORKUNITID,
                INUORDERID,
                RCTARGETDISP.HOUR_START + RCTARGETDISP.DURATION,
                ROUND(NUDURATION * (1 + NVL(DAOR_OPERATING_UNIT.FNUGETADD_VALUE_ORDER(INUWORKUNITID), 0)/100)) + DAOR_OPERATING_ZONE.FNUGETTIME_DISPLACEMENT(RCTARGETDISP.OPERATING_ZONE_ID),
                NUDURATION,
                NULL,
                NUSCHEDAVAID,
                NUIDADDRESS
            );
            
            IF (OR_BCDISPATCH.FBLEXISTDISPBYORDER(INUORDERID, RCSCHEDDISPATCH)) THEN
            
                
                IF ( OR_BCPROGRAMING.FBLEXISTSPROGBYORDER (INUORDERID, RCPROGRAMMING)
                    AND TO_CHAR( SYSDATE, 'YYYY-mm-dd') != TO_CHAR( DAOR_SCHED_AVAILABLE.FDTGETDATE_(RCPROGRAMMING.SCHED_AVAILABLE_ID), 'YYYY-mm-dd')
                    AND RCPROGRAMMING.PROGRAMING_STATUS IN (OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED,OR_BOCONSTANTS.CSBPROGSTATUSOVERLOAD ) )
                THEN
                    UPDATEOLDPROGRAMING(INUORDERID);
                END IF;
            
                CREATEPROGBLOCK(
                    NUSCHEDAVAID,
                    RCSCHEDDISPATCH.HOUR_START,
                    RCSCHEDDISPATCH.HOUR_END,
                    RCSCHEDDISPATCH.DURATION,
                    RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                    OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED,
                    RCSCHEDDISPATCH.TASK_TYPE_ID,
                    RCSCHEDDISPATCH.PACKAGE_ID,
                    RCSCHEDDISPATCH.ADDRESS_ID,
                    RCSCHEDDISPATCH.ORDER_ID,
                    NULL,
                    NULL,
                    RCSCHEDDISPATCH.CONFIRMED,
                    RCSCHEDDISPATCH.DURATION_REQUIRED
                );
                
                
                FIXFREEBLOCK(NUSCHEDAVAID, RCSCHEDDISPATCH.HOUR_START, RCSCHEDDISPATCH.HOUR_END);
            END IF;

        END IF; 
        
        
        
        IF ( OR_BCPROGRAMING.FBLEXISTSPROGBYORDER (INUORDERID, RCPROGRAMMING) 
            AND TO_CHAR( SYSDATE, 'YYYY-mm-dd') != TO_CHAR( DAOR_SCHED_AVAILABLE.FDTGETDATE_(RCPROGRAMMING.SCHED_AVAILABLE_ID), 'YYYY-mm-dd')
            AND RCPROGRAMMING.PROGRAMING_STATUS = OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED ) THEN
            
            DAOR_SCHED_PROGRAMING.UPDPROGRAMING_STATUS
                (RCPROGRAMMING.SCHED_PROGRAMING_ID,OR_BOCONSTANTS.CSBPROGSTATUSREPROG);
        END IF;
        
        UT_TRACE.TRACE('Finaliza OR_BODispatch.reassignOrder',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : OTHERS',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REASSIGNORDER;

    


































    PROCEDURE CREATEDISPATCHBLOCK
    (
        INUOPERATINGZONEID      IN  OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE,
        IDTDATE                 IN  OR_SCHED_DISPATCH.DATE_%TYPE,
        INUOPERATINGUNITID      IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        INUORDERID              IN  OR_SCHED_DISPATCH.ORDER_ID%TYPE,
        INUHOURSTART            IN  OR_SCHED_DISPATCH.HOUR_START%TYPE,
        INUDURATION             IN  OR_SCHED_DISPATCH.DURATION%TYPE,
        INUPARTDURATION         IN  OR_SCHED_DISPATCH.DURATION%TYPE,
        INUSCHEDPROGRAMMINGID   IN  OR_SCHED_PROGRAMING.SCHED_PROGRAMING_ID%TYPE,
        INUSCHEDAVAILABLEID     IN  OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE,
        INUADDRESSID            IN  OR_SCHED_DISPATCH.ADDRESS_ID%TYPE,
        INUINITIALOPERUNIT      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE DEFAULT NULL
    )
    IS
        RCSCHEDDISPATCH     DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        RCSCHEDPROGRAMMING  DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        RCSCHEDAVAILABLE    DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        NUSUBSCRIBERID      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUPROGRAMMCLASS     OR_SCHED_PROGRAMING.PROGRAMING_CLASS_ID%TYPE;
    BEGIN
        
        
        OR_BCSCHED.GETAVAILABLEBYPKBLOQ(INUSCHEDAVAILABLEID, RCSCHEDAVAILABLE);

        IF (RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID IS NULL) THEN
            UT_TRACE.TRACE('No se encontr� la disponibilidad: ['||INUSCHEDAVAILABLEID||']');
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;
        
        
        IF INUSCHEDPROGRAMMINGID IS NOT NULL THEN
            RCSCHEDPROGRAMMING := DAOR_SCHED_PROGRAMING.FRCGETRECORD(INUSCHEDPROGRAMMINGID);
        END IF;

        
        RCSCHEDDISPATCH.SCHED_DISPATCH_ID   := OR_BOSEQUENCES.FNUNEXTOR_SCHED_DISPATCH;
        RCSCHEDDISPATCH.OPERATING_ZONE_ID   := INUOPERATINGZONEID;
        RCSCHEDDISPATCH.DATE_               := TRUNC(IDTDATE);
        RCSCHEDDISPATCH.OPERATING_UNIT_ID   := INUOPERATINGUNITID;
        RCSCHEDDISPATCH.OPERATING_UNIT_DESC := DAOR_OPERATING_UNIT.FSBGETNAME(INUOPERATINGUNITID);
        RCSCHEDDISPATCH.HOUR_START_PROG     := INUHOURSTART;
        RCSCHEDDISPATCH.HOUR_START          := INUHOURSTART;
        RCSCHEDDISPATCH.HOUR_END            := INUHOURSTART + INUDURATION;
        RCSCHEDDISPATCH.DURATION            := INUDURATION;
        RCSCHEDDISPATCH.DURATION_REQUIRED   := INUPARTDURATION;
        RCSCHEDDISPATCH.DISPATCH_STATUS     := OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED;
        RCSCHEDDISPATCH.ORDER_ID            := INUORDERID;
        RCSCHEDDISPATCH.PROGRAMING_CLASS_ID := NVL(RCSCHEDPROGRAMMING.PROGRAMING_CLASS_ID, 6);
        RCSCHEDDISPATCH.CONFIRMED           := RCSCHEDPROGRAMMING.CONFIRMED;

        RCSCHEDDISPATCH.CLIENT_NAME         := RCSCHEDPROGRAMMING.COMMENT_;
        RCSCHEDDISPATCH.ADDRESS_ID                := RCSCHEDPROGRAMMING.ADDRESS_ID;
        
        NUPROGRAMMCLASS := GE_BOPARAMETER.FNUVALORNUMERICO(CSBPAR_REP_ASSIGN_CLASS);
        IF (NUPROGRAMMCLASS NOT IN (OR_BOCONSTANTS.CNUPROGCLASSAPROX,
                                    OR_BOCONSTANTS.CNUPROGCLASSFIXED,
                                    OR_BOCONSTANTS.CNUPROGCLASSFLEX,
                                    OR_BOCONSTANTS.CNUPROGCLASSRANGE,
                                    OR_BOCONSTANTS.CNUPROGCLASSRANGEDAY,
                                    OR_BOCONSTANTS.CNUPROGCLASSUNIT
                                   )) THEN
            ERRORS.SETERROR(CNUINVPARAMERR, CSBPAR_REP_ASSIGN_CLASS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        RCSCHEDDISPATCH.PROGRAMING_CLASS_ID := NVL(RCSCHEDPROGRAMMING.PROGRAMING_CLASS_ID, NUPROGRAMMCLASS);

        RCSCHEDDISPATCH.ADDRESS_ID          := NVL(RCSCHEDPROGRAMMING.ADDRESS_ID, INUADDRESSID);
        IF RCSCHEDDISPATCH.ADDRESS_ID IS NOT NULL THEN
            RCSCHEDDISPATCH.ADDRESS_DESC        := DAAB_ADDRESS.FSBGETADDRESS(RCSCHEDDISPATCH.ADDRESS_ID);
        END IF;

        RCSCHEDDISPATCH.TASK_TYPE_ID        := RCSCHEDPROGRAMMING.TASK_TYPE_ID;
        IF RCSCHEDDISPATCH.TASK_TYPE_ID IS NULL AND RCSCHEDDISPATCH.ORDER_ID IS NOT NULL THEN
            RCSCHEDDISPATCH.TASK_TYPE_ID := DAOR_ORDER.FNUGETTASK_TYPE_ID(RCSCHEDDISPATCH.ORDER_ID);
        END IF;
        IF RCSCHEDDISPATCH.TASK_TYPE_ID IS NOT NULL THEN
            RCSCHEDDISPATCH.TASK_TYPE_DESC      := DAOR_TASK_TYPE.FSBGETDESCRIPTION(RCSCHEDDISPATCH.TASK_TYPE_ID);
        END IF;


        IF (INUSCHEDAVAILABLEID IS NULL) THEN
            
            IF RCSCHEDPROGRAMMING.SCHED_AVAILABLE_ID IS NULL AND RCSCHEDDISPATCH.ORDER_ID IS NOT NULL THEN
                OR_BCSCHED.GETAVAILABILITYBYDATEUNIT
                (
                    RCSCHEDDISPATCH.OPERATING_UNIT_ID, 
                    INUHOURSTART, 
                    INUDURATION, 
                    IDTDATE, 
                    RCSCHEDPROGRAMMING.SCHED_AVAILABLE_ID 
                );
            END IF;
            
        ELSE
            RCSCHEDPROGRAMMING.SCHED_AVAILABLE_ID := INUSCHEDAVAILABLEID;
        END IF;
        
        RCSCHEDAVAILABLE := DAOR_SCHED_AVAILABLE.FRCGETRECORD(RCSCHEDPROGRAMMING.SCHED_AVAILABLE_ID);
        RCSCHEDDISPATCH.SCHEDULER_ID := RCSCHEDAVAILABLE.SCHEDULER_ID;
        RCSCHEDDISPATCH.SCHED_HOUR_ENTRANCE := RCSCHEDAVAILABLE.HOUR_ENTRANCE;
        RCSCHEDDISPATCH.SCHED_HOUR_EXIT     := RCSCHEDAVAILABLE.HOUR_EXIT;

        RCSCHEDDISPATCH.PACKAGE_ID          := RCSCHEDPROGRAMMING.PACKAGE_ID;
        
        IF RCSCHEDDISPATCH.PACKAGE_ID IS NOT NULL THEN
            NUSUBSCRIBERID := DAMO_PACKAGES.FNUGETSUBSCRIBER_ID(RCSCHEDDISPATCH.PACKAGE_ID);
            IF (NUSUBSCRIBERID IS NOT NULL) THEN
                RCSCHEDDISPATCH.CLIENT_NAME     := DAGE_SUBSCRIBER.FSBGETSUBSCRIBER_NAME(NUSUBSCRIBERID);
                RCSCHEDDISPATCH.PHONE              := CC_BOOSSSUBSCRIBERDATA.FSBGETPHONE(NUSUBSCRIBERID);
            END IF;
        END IF;
        
        
        
        IF(RCSCHEDDISPATCH.PHONE IS NULL AND RCSCHEDDISPATCH.ORDER_ID IS NOT NULL)THEN
            NUSUBSCRIBERID :=  DAOR_ORDER.FNUGETSUBSCRIBER_ID(RCSCHEDDISPATCH.ORDER_ID);

            IF (NUSUBSCRIBERID IS NOT NULL) THEN
                RCSCHEDDISPATCH.CLIENT_NAME     := DAGE_SUBSCRIBER.FSBGETSUBSCRIBER_NAME(NUSUBSCRIBERID);
                RCSCHEDDISPATCH.PHONE           := CC_BOOSSSUBSCRIBERDATA.FSBGETPHONE(NUSUBSCRIBERID);
            END IF;
        END IF;

        IF RCSCHEDDISPATCH.ORDER_ID IS NOT NULL THEN
            
            OR_BOPROCESSCHEDULEORDER.ASSIGNOPERATINGUNIT(RCSCHEDDISPATCH.ORDER_ID,
                                                         RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                                                         UT_DATE.FDTGETDATETIMEADDMINUTES(RCSCHEDDISPATCH.DATE_,
                                                             RCSCHEDDISPATCH.HOUR_START),
                                                         OR_BOSCHED.FSBGETAVAILRANGEDESC(
                                                             RCSCHEDDISPATCH.ORDER_ID,
                                                             RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                                                             RCSCHEDDISPATCH.DATE_,
                                                             RCSCHEDDISPATCH.OPERATING_ZONE_ID,
                                                             RCSCHEDDISPATCH.SCHED_HOUR_ENTRANCE,
                                                             RCSCHEDDISPATCH.SCHED_HOUR_EXIT,
                                                             RCSCHEDDISPATCH.HOUR_START,
                                                             RCSCHEDDISPATCH.HOUR_END
                                                         ),
                                                         RCSCHEDDISPATCH.PROGRAMING_CLASS_ID,
                                                         NVL(INUINITIALOPERUNIT,RCSCHEDAVAILABLE.OPERATING_UNIT_ID));
        END IF;

        
        DAOR_SCHED_DISPATCH.INSRECORD(RCSCHEDDISPATCH);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEDISPATCHBLOCK;

    


















    
    PROCEDURE APPOINTMENTCONFIRM
    (
        INUORDERID       IN  OR_ORDER.ORDER_ID%TYPE,
        ISBFLAGCONFIRM   IN  OR_SCHED_PROGRAMING.CONFIRMED%TYPE,
        INUCOMMENTTYPE   IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT       IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE
    )
    IS
        RCORDER DAOR_ORDER.STYOR_ORDER;
    BEGIN
        UT_TRACE.TRACE('[START] OR_BODispatch.AppointmentConfirm', 1);

        
        IF(INUORDERID IS NULL)THEN
            ERRORS.SETERROR(CNUERR_PARAMETER_NULL, 'inuOrderId');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        IF(ISBFLAGCONFIRM IS NULL)THEN
            ERRORS.SETERROR(CNUERR_PARAMETER_NULL, 'isbFlagConfirm');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF(ISBFLAGCONFIRM = GE_BOCONSTANTS.CSBYES)THEN
            OR_BOPROGRAMING.CONFIRMARCITA(INUORDERID, INUCOMMENTTYPE, ISBCOMMENT);
        ELSE
            
            IF(ISBFLAGCONFIRM = GE_BOCONSTANTS.CSBNO)THEN
                
                
                

                
                DAOR_ORDER.GETRECORD(INUORDERID, RCORDER);
                
                RCORDER.OFFERED := GE_BOCONSTANTS.CSBYES;
                
                DAOR_ORDER.UPDRECORD(RCORDER);
            ELSE
                
                ERRORS.SETERROR(CNUERR_PARAMETER_VALUE, 'isbFlagConfirm=['|| ISBFLAGCONFIRM ||']' );
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        UT_TRACE.TRACE('[END] OR_BODispatch.AppointmentConfirm', 1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END APPOINTMENTCONFIRM;

    

















    PROCEDURE MARKORDERASDELAYED
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUCOMMENTTYPEID    IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL
    )
    IS
        NUPRIORITY   OR_ORDER.PRIORITY%TYPE;

        NUPROGRAMINGCLASSID     OR_ORDER_STAT_CHANGE.PROGRAMING_CLASS_ID%TYPE;
        DTAPPOINTMENTDATE       OR_SCHED_DISPATCH.DATE_%TYPE;
        NUOPERATINGZONEID       OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE;
        NUAVAILHOURENTR         OR_SCHED_AVAILABLE.HOUR_ENTRANCE%TYPE;
        NUAVAILHOUREXIT         OR_SCHED_AVAILABLE.HOUR_EXIT%TYPE;
        NUAPPOINTHOURSTART      OR_SCHED_DISPATCH.HOUR_START%TYPE;
        NUAPPOINTHOUREND        OR_SCHED_DISPATCH.HOUR_END%TYPE;
        RCORDER                 DAOR_ORDER.STYOR_ORDER;
        RCSCHEDAVAILABLE        DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        BLHASDISPATCH           BOOLEAN := FALSE;
        SBRANGEDESCRIPTION      OR_ORDER_STAT_CHANGE.RANGE_DESCRIPTION%TYPE;
        RCSCHEDPROGRAMING       DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        RCSCHEDDISPATCH         DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        
    BEGIN
    UT_TRACE.TRACE('[START] OR_BODispatch.MarkOrderAsDelayed', 1);

        
        GETPARAMETERS;
        
        
        NUPRIORITY := GNUMAXPRIORITY;

        
        DAOR_ORDER.UPDPRIORITY(INUORDERID, NUPRIORITY);
        
        
        DAOR_ORDER.GETRECORD(INUORDERID, RCORDER);
        
        
        IF (OR_BCDISPATCH.FBLEXISTDISPBYORDER(INUORDERID, RCSCHEDDISPATCH)) THEN
            
           NUPROGRAMINGCLASSID := RCSCHEDDISPATCH.PROGRAMING_CLASS_ID;
           DTAPPOINTMENTDATE := RCSCHEDDISPATCH.DATE_;
            NUOPERATINGZONEID := RCSCHEDDISPATCH.OPERATING_ZONE_ID;
            NUAPPOINTHOURSTART := RCSCHEDDISPATCH.HOUR_START;
            NUAPPOINTHOUREND := RCSCHEDDISPATCH.HOUR_END;

            
            OR_BCSCHED.GETAVAILABLEBYUDX(RCSCHEDDISPATCH.SCHEDULER_ID,
                                         RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                                         RCSCHEDDISPATCH.OPERATING_ZONE_ID,
                                         RCSCHEDDISPATCH.DATE_,
                                         RCSCHEDAVAILABLE);

            NUAVAILHOURENTR := RCSCHEDAVAILABLE.HOUR_ENTRANCE;
            NUAVAILHOUREXIT := RCSCHEDAVAILABLE.HOUR_EXIT;
            BLHASDISPATCH := TRUE;
        ELSE
            BLHASDISPATCH := FALSE;
        END IF;

        
        IF ((NOT BLHASDISPATCH) AND (OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(INUORDERID, RCSCHEDPROGRAMING))) THEN
           NUPROGRAMINGCLASSID := RCSCHEDPROGRAMING.PROGRAMING_CLASS_ID;
            NUAPPOINTHOURSTART := RCSCHEDPROGRAMING.HOUR_START;
            NUAPPOINTHOUREND := RCSCHEDPROGRAMING.HOUR_END;

            
            DAOR_SCHED_AVAILABLE.GETRECORD(RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID,
                                           RCSCHEDAVAILABLE);

            DTAPPOINTMENTDATE := RCSCHEDAVAILABLE.DATE_;
            NUOPERATINGZONEID := RCSCHEDAVAILABLE.OPERATING_ZONE_ID;
            NUAVAILHOURENTR := RCSCHEDAVAILABLE.HOUR_ENTRANCE;
            NUAVAILHOUREXIT := RCSCHEDAVAILABLE.HOUR_EXIT;
        END IF;

        
        SBRANGEDESCRIPTION := OR_BOSCHED.FSBGETAVAILRANGEDESC(
            INUORDERID,
            NUPROGRAMINGCLASSID,
            DTAPPOINTMENTDATE,
            NUOPERATINGZONEID,
            NUAVAILHOURENTR,
            NUAVAILHOUREXIT,
            NUAPPOINTHOURSTART,
            NUAPPOINTHOUREND
        );
        
        
        OR_BCORDERSTATCHANG.INSRECORD(
            INUORDERID,
            OR_BOCONSTANTS.CNUORDER_ACTION_DELAYED,
            RCORDER.ORDER_STATUS_ID,
            RCORDER.ORDER_STATUS_ID,
            RCORDER.ARRANGED_HOUR,
            SBRANGEDESCRIPTION,
            RCORDER.PROGRAMING_CLASS_ID,
            RCORDER.OPERATING_UNIT_ID,
            RCORDER.OPERATING_UNIT_ID,
            NVL(INUCOMMENTTYPEID, CNUGENERALCOMMENTTYPE),
            NULL
        );


    UT_TRACE.TRACE('[END] OR_BODispatch.MarkOrderAsDelayed', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END MARKORDERASDELAYED;

    




    PROCEDURE GETINVENTORYBYUNIT
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFINVENTORYBYUNIT      OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        DAOR_OPERATING_UNIT.ACCKEY(INUOPERATINGUNITID);
        
        ORFINVENTORYBYUNIT := OR_BCDISPATCH.FRFGETINVENTORYBYUNIT(INUOPERATINGUNITID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
















    PROCEDURE SETLEGALIZEEQUIPMENT
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUORDERACTIVITYID  IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        ISBSERIE            IN  OR_EQUIPMENT_LEGALIZ.SERIE%TYPE,
        INUITEMTYPEID       IN  OR_EQUIPMENT_LEGALIZ.ITEMS_TYPE_ID%TYPE,
        INUSERIALITEMID     IN  OR_EQUIPMENT_LEGALIZ.SERIAL_ITEMS_ID%TYPE
    )
    IS
        RCEQUIPLEGALIZE DAOR_EQUIPMENT_LEGALIZ.STYOR_EQUIPMENT_LEGALIZ;
    BEGIN
        
        OR_BCDISPATCH.DELLEGALIZEEQUIPMENT(INUORDERACTIVITYID);

        RCEQUIPLEGALIZE.EQUIPMENT_LEGALIZE_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('OR_EQUIPMENT_LEGALIZ', 'SEQ_OR_EQUIPMENT_LEGALIZ');
        RCEQUIPLEGALIZE.ITEMS_TYPE_ID := INUITEMTYPEID;
        RCEQUIPLEGALIZE.ORDER_ACTIVITY_ID := INUORDERACTIVITYID;
        RCEQUIPLEGALIZE.ORDER_ID := INUORDERID;
        RCEQUIPLEGALIZE.SERIAL_ITEMS_ID := INUSERIALITEMID;
        RCEQUIPLEGALIZE.SERIE := ISBSERIE;

        DAOR_EQUIPMENT_LEGALIZ.INSRECORD(RCEQUIPLEGALIZE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    




    PROCEDURE VALTIEMPO_ORDEN_COMPRIM
    (
        INUVALUE IN GE_PARAMETER.VALUE%TYPE
    )
    IS
        RCEQUIPLEGALIZE DAOR_EQUIPMENT_LEGALIZ.STYOR_EQUIPMENT_LEGALIZ;
    BEGIN
        IF (INUVALUE < OR_BOCONSTANTS.CNUMIN_ACTIVITY_TIME) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_VAL_PARAMETER, OR_BOCONSTANTS.CNUMIN_ACTIVITY_TIME);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALTIEMPO_ORDEN_COMPRIM;


    














    PROCEDURE GETDISPATCHSUPERVISORS
    (
        INUPERSONID     IN  GE_PERSON.PERSON_ID%TYPE,
        INUBASEID       IN  GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
        ORFSUPERVISORS  OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        ORFSUPERVISORS := OR_BCDISPATCH.FRFGETDISPATCHSUPERVISORS(INUPERSONID, INUBASEID);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE GETUNITSDISPATCHBYPERSONS
    (
        ISBPERSONIDS    IN  VARCHAR2,
        INUMINUTESAGO   IN  NUMBER,
        ORFOPERUNITS    OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        ORFOPERUNITS := OR_BCDISPATCH.FRFGETDISPATCHERS(ISBPERSONIDS, INUMINUTESAGO);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    PROCEDURE GETFIELDSUPERVBYDISPATCH
    (
        INUDISPATCHERID     IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUMINUTESAGO       IN  NUMBER,
        RFSUPERVISORS       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
    
        RFSUPERVISORS := OR_BCDISPATCH.FRFGETFIELDSUPERVBYDISPATCH(INUDISPATCHERID, INUMINUTESAGO);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




















    PROCEDURE GETORDERSDISPATCHUNIT
    (
        INUOPERATINGUNITID  IN      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTDATE             IN      DATE,
        OTBORDERS           IN OUT  OR_BCPROGRAMING.TYTBORDERS
    )
    IS
    BEGIN

        OR_BCDISPATCH.GETORDERSDISPATCHUNIT(
            INUOPERATINGUNITID,
            IDTDATE,
            OTBORDERS
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERSDISPATCHUNIT;

    













    PROCEDURE VALSHEDEDITABLE
    (
        INUSCHEDAVAILABLEID   IN  OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE
    )
    IS
        RCSHEDAVALIABLE DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        CNUERROR_DISPATCH_CREATED   CONSTANT NUMBER := 8786;
    BEGIN
        UT_TRACE.TRACE('[START] OR_BODispatch.ValShedEditable', 1);
        
        
        DAOR_SCHED_AVAILABLE.LOCKBYPK(INUSCHEDAVAILABLEID,RCSHEDAVALIABLE);

        
        IF (OR_BCDISPATCH.FBLEXISTDISPATCH(
            RCSHEDAVALIABLE.OPERATING_UNIT_ID,
            RCSHEDAVALIABLE.OPERATING_ZONE_ID,
            RCSHEDAVALIABLE.SCHEDULER_ID,
            RCSHEDAVALIABLE.DATE_)) THEN

             GE_BOERRORS.SETERRORCODE(CNUERROR_DISPATCH_CREATED);

        END IF;
        
        UT_TRACE.TRACE('[END] OR_BODispatch.ValShedEditable', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALSHEDEDITABLE;

    
















    PROCEDURE UPDSTATUSDISPATCHBYID
    (
        INUDISPATCHID   IN  OR_SCHED_DISPATCH.SCHED_DISPATCH_ID%TYPE,
        ISBSTATUS       IN  OR_SCHED_DISPATCH.DISPATCH_STATUS%TYPE
    )
    IS
    BEGIN
        
        
        
        DAOR_SCHED_DISPATCH.UPDDISPATCH_STATUS(INUDISPATCHID, ISBSTATUS);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE GETLASTDISPATCHBYUNIT
    (
        INUOPERATINGUNITID  IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        IDTDATE             IN  DATE,
        ORFDISPATCHBLOCK    OUT CONSTANTS.TYREFCURSOR
    )
    IS
        DTDATE  DATE;
    BEGIN
    
        UT_TRACE.TRACE('INICIA - OR_BODispatch.GetLastDispatchByUnit
                        inuOperatingUnitId := '||INUOPERATINGUNITID||'
                        idtDate := '||IDTDATE,15);

        DTDATE := TRUNC(IDTDATE);

        ORFDISPATCHBLOCK := OR_BCDISPATCH.FRFGETLASTDISPATCHBLOCK(INUOPERATINGUNITID, DTDATE);
        
        UT_TRACE.TRACE('FIN - OR_BODispatch.GetLastDispatchByUnit',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    PROCEDURE GETMOVEXECORDER
    (
        INUOPERUNITID   IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        ONUORDERID      OUT OR_ORDER.ORDER_ID%TYPE
    )
    IS
        RFEXCMOVORDSBYUNIT  CONSTANTS.TYREFCURSOR;
    BEGIN

        RFEXCMOVORDSBYUNIT := OR_BCDISPATCH.FRFGETORDBYDATEUNIT(INUOPERUNITID);
        
        FETCH RFEXCMOVORDSBYUNIT INTO ONUORDERID;

        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFEXCMOVORDSBYUNIT);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFEXCMOVORDSBYUNIT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFEXCMOVORDSBYUNIT);
            RAISE EX.CONTROLLED_ERROR;
    END GETMOVEXECORDER;
    
    





















    PROCEDURE DELDISPATCHBYSCHED
    (
        INUOPERUNITID   IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        INUOPERZONEID   IN  OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE,
        INUHOURSTART    IN  OR_SCHED_DISPATCH.HOUR_START%TYPE,
        INUHOUREND      IN  OR_SCHED_DISPATCH.HOUR_END%TYPE,
        IDTDATE         IN  OR_SCHED_DISPATCH.DATE_%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] - OR_BODispatch.DelDispatchBySched ',15);
        UT_TRACE.TRACE('inuOperUnitId['||INUOPERUNITID||']'||CHR(10)||
                        'inuOperZoneId['||INUOPERZONEID||']'||CHR(10)||
                        'inuHourStart['||INUHOURSTART||']'||CHR(10)||
                        'inuHourEnd['||INUHOUREND||']'||CHR(10)||
                        'idtDate['||IDTDATE||']',15);

        

        OR_BCDISPATCH.DELBLOCKDISPATCH(INUOPERUNITID,
                                      INUOPERZONEID,
                                      INUHOURSTART,
                                      INUHOUREND,
                                      OR_BOCONSTANTS.CSBDISPATCHSTATUSMISSED,
                                      IDTDATE);
        UT_TRACE.TRACE('[FIN] - OR_BODispatch.DelDispatchBySched ',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELDISPATCHBYSCHED;

    

















    FUNCTION FSBCLIENTNAMEBYORDER
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE
    ) RETURN VARCHAR2
    IS
        RCSUSBCRIBER    DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        NUSUBSCRIBERID  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
    BEGIN
        
        IF (INUORDERID IS NOT NULL) THEN
            
            NUSUBSCRIBERID := DAOR_ORDER.FNUGETSUBSCRIBER_ID(INUORDERID);
            
            IF (NUSUBSCRIBERID IS NOT NULL) THEN
                
            	RCSUSBCRIBER := DAGE_SUBSCRIBER.FRCGETRECORD(NUSUBSCRIBERID);
                
            	RETURN(RCSUSBCRIBER.SUBSCRIBER_NAME||' '||RCSUSBCRIBER.SUBS_LAST_NAME);
            END IF;
        END IF;

        RETURN NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBCLIENTNAMEBYORDER;
    
    














    PROCEDURE GETFREEDISPATCHBYUNIT
    (
        INUOPERUNITID   IN      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTDATE         IN      DATE,
        INUZONEID       IN      OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE,
        INUSCHEDAVAILID IN      OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE,
        INUDURATION     IN      OR_SCHED_DISPATCH.DURATION%TYPE,
        ORCFREEBLOCK    IN OUT  NOCOPY DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH
    )
    IS
        RCAVAILABLE         DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        NUHOURENTRANCE      OR_SCHED_AVAILABLE.HOUR_ENTRANCE%TYPE;
        NUHOUREXIT          OR_SCHED_AVAILABLE.HOUR_EXIT%TYPE;
        TBFREEBLOCKS        DAOR_SCHED_DISPATCH.TYTBOR_SCHED_DISPATCH;
        TBOCCUPIEDBLOCKS    DAOR_SCHED_DISPATCH.TYTBOR_SCHED_DISPATCH;

        NUIDX               BINARY_INTEGER;
    BEGIN

        UT_TRACE.TRACE('INICIA - OR_BODispatch.GetFreeDispatchByUnit
        inuOperUnitId['||INUOPERUNITID||'] - idtDate['||IDTDATE||'] - inuZoneId['||INUZONEID||']'||
        'inuSchedAvailId['||INUSCHEDAVAILID||'] - inuDuration['||INUDURATION||']',15);
        
        RCAVAILABLE := DAOR_SCHED_AVAILABLE.FRCGETRECORD(INUSCHEDAVAILID);
        ORCFREEBLOCK.DURATION := -1;

        
        IF(RCAVAILABLE.HOUR_EXIT < UT_DATE.FNUMINUTEOFDAY(SYSDATE))THEN
            
            GE_BOERRORS.SETERRORCODE(13754);
        END IF;

        IF( TRUNC(SYSDATE) = TRUNC(IDTDATE))THEN
                NUHOURENTRANCE := UT_DATE.FNUMINUTEOFDAY(SYSDATE);
        ELSE
                NUHOURENTRANCE := RCAVAILABLE.HOUR_ENTRANCE;
        END IF;

        
        OR_BCDISPATCH.GETDISPATCHBYUNITZONEDATE(
                                                    INUOPERUNITID,
                                                    IDTDATE,
                                                    INUZONEID,
                                                    RCAVAILABLE.SCHEDULER_ID,
                                                    NUHOURENTRANCE,
                                                    RCAVAILABLE.HOUR_EXIT,
                                                    TBOCCUPIEDBLOCKS
                                                );

        NUHOURENTRANCE := GREATEST(UT_DATE.FNUMINUTEOFDAY(SYSDATE), RCAVAILABLE.HOUR_ENTRANCE);

        UT_TRACE.TRACE('Bloques ocupados: '||TBOCCUPIEDBLOCKS.COUNT||'  - nuHourEntrance: '||NUHOURENTRANCE,15);

        NUIDX := TBOCCUPIEDBLOCKS.FIRST;

        
        IF(     TRUNC(SYSDATE) = TRUNC(IDTDATE)
                AND UT_DATE.FNUMINUTEOFDAY(SYSDATE) < RCAVAILABLE.HOUR_EXIT
          )THEN
            IF(TBOCCUPIEDBLOCKS.COUNT > 0) THEN
                IF(TBOCCUPIEDBLOCKS(NUIDX).HOUR_START > NUHOURENTRANCE + INUDURATION)THEN
                    
                    UT_TRACE.TRACE('-- si existe un bloque ocupado posterior - va a insertar hour_start = sysdate ',15);
                    ORCFREEBLOCK.HOUR_START         := NUHOURENTRANCE;
                    ORCFREEBLOCK.HOUR_END           := TBOCCUPIEDBLOCKS(NUIDX).HOUR_START;
                    ORCFREEBLOCK.SCHED_HOUR_ENTRANCE:= RCAVAILABLE.HOUR_ENTRANCE;
                    ORCFREEBLOCK.SCHED_HOUR_EXIT    := RCAVAILABLE.HOUR_EXIT;
                    ORCFREEBLOCK.DURATION           := ORCFREEBLOCK.HOUR_END - ORCFREEBLOCK.HOUR_START;
                    UT_TRACE.TRACE('Inicio libre ['||ORCFREEBLOCK.HOUR_START||'] - fin['||ORCFREEBLOCK.HOUR_END||'] - Duracion['||ORCFREEBLOCK.DURATION||']',15);
                    RETURN;
                END IF;
            ELSE
                    
                    UT_TRACE.TRACE('-- Si NO tiene bloques ocupados',15);
                    ORCFREEBLOCK.HOUR_START         := NUHOURENTRANCE;
                    ORCFREEBLOCK.HOUR_END           := ORCFREEBLOCK.HOUR_START + INUDURATION;
                    ORCFREEBLOCK.SCHED_HOUR_ENTRANCE:= RCAVAILABLE.HOUR_ENTRANCE;
                    ORCFREEBLOCK.SCHED_HOUR_EXIT    := RCAVAILABLE.HOUR_EXIT;
                    ORCFREEBLOCK.DURATION           := ORCFREEBLOCK.HOUR_END - ORCFREEBLOCK.HOUR_START;
                    UT_TRACE.TRACE('Inicio libre ['||ORCFREEBLOCK.HOUR_START||'] - fin['||ORCFREEBLOCK.HOUR_END||'] - Duracion['||ORCFREEBLOCK.DURATION||']',15);
                    RETURN;
            END IF;
        END IF;

        WHILE NUIDX IS NOT NULL
        LOOP
            UT_TRACE.TRACE('Hora entrada bloque ocupado:'||TBOCCUPIEDBLOCKS(NUIDX).HOUR_START,15);
            UT_TRACE.TRACE('Inicio disponibilidad:'||NUHOURENTRANCE,15);
            
            IF(TBOCCUPIEDBLOCKS.EXISTS(NUIDX+1))THEN
                IF((TBOCCUPIEDBLOCKS(NUIDX+1).HOUR_START - TBOCCUPIEDBLOCKS(NUIDX).HOUR_END) >= INUDURATION) THEN
                    UT_TRACE.TRACE('-- si existe un bloque ocupado posterior ',15);
                    ORCFREEBLOCK.HOUR_START  := TBOCCUPIEDBLOCKS(NUIDX).HOUR_END;
                    ORCFREEBLOCK.HOUR_END    := TBOCCUPIEDBLOCKS(NUIDX+1).HOUR_START;
                    ORCFREEBLOCK.DURATION    := ORCFREEBLOCK.HOUR_END - ORCFREEBLOCK.HOUR_START;
                    ORCFREEBLOCK.SCHED_HOUR_ENTRANCE:= RCAVAILABLE.HOUR_ENTRANCE;
                    ORCFREEBLOCK.SCHED_HOUR_EXIT    := RCAVAILABLE.HOUR_EXIT;
                    UT_TRACE.TRACE('Inicio libre ['||ORCFREEBLOCK.HOUR_START||'] - fin['||ORCFREEBLOCK.HOUR_END||'] - Duracion['||ORCFREEBLOCK.DURATION||']',15);
                    
                    NUIDX := TBOCCUPIEDBLOCKS.LAST;
                END IF;
            ELSE
                IF((RCAVAILABLE.HOUR_EXIT - TBOCCUPIEDBLOCKS(NUIDX).HOUR_END)>= INUDURATION) THEN
                    UT_TRACE.TRACE('-- si NO existe un bloque ocupado posterior ',15);
                    ORCFREEBLOCK.HOUR_START  := TBOCCUPIEDBLOCKS(NUIDX).HOUR_END;
                    ORCFREEBLOCK.HOUR_END    := RCAVAILABLE.HOUR_EXIT;
                    ORCFREEBLOCK.DURATION    := ORCFREEBLOCK.HOUR_END - ORCFREEBLOCK.HOUR_START;
                    ORCFREEBLOCK.SCHED_HOUR_ENTRANCE:= RCAVAILABLE.HOUR_ENTRANCE;
                    ORCFREEBLOCK.SCHED_HOUR_EXIT    := RCAVAILABLE.HOUR_EXIT;
                    UT_TRACE.TRACE('Inicio libre ['||ORCFREEBLOCK.HOUR_START||'] - fin['||ORCFREEBLOCK.HOUR_END||'] - Duracion['||ORCFREEBLOCK.DURATION||']',15);
                    
                    NUIDX := TBOCCUPIEDBLOCKS.LAST;
                END IF;
            END IF;
            NUIDX := TBOCCUPIEDBLOCKS.NEXT(NUIDX);
        END LOOP;

        UT_TRACE.TRACE('FIN - OR_BODispatch.GetFreeDispatchByUnit ',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
     































    PROCEDURE VALIDAORDERCHANGEDISPATCH
    (
        INUSCHEDDISPATCHID      IN  OR_SCHED_DISPATCH.SCHED_DISPATCH_ID%TYPE,
        IDTDATE                 IN  OR_SCHED_DISPATCH.DATE_%TYPE,
        INUORDERID              IN  OR_SCHED_DISPATCH.ORDER_ID%TYPE,
        ISBSTATUS               IN  OR_SCHED_DISPATCH.DISPATCH_STATUS%TYPE,
        INUOPERUNITID           IN  OR_SCHED_DISPATCH.OPERATING_UNIT_ID%TYPE,
        INUHOURSTART            IN  OR_SCHED_DISPATCH.HOUR_START%TYPE,
        INUHOUREND              IN  OR_SCHED_DISPATCH.HOUR_END%TYPE,
        OSBISVALID              OUT OR_SCHED_DISPATCH.CONFIRMED%TYPE
    )
    IS
        RCSCHEDDISPATCH     DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
    BEGIN

        UT_TRACE.TRACE('INICIA - OR_BODispatch.ValidaOrderChangeDispatch',15);
        UT_TRACE.TRACE('inuSchedDispatchId['||INUSCHEDDISPATCHID||'] - idtDate['||IDTDATE||'] - inuOrderId['||INUORDERID||'] - isbStatus['||ISBSTATUS||
                        '] - inuOperUnitId['||INUOPERUNITID||'] - inuHourStart['||INUHOURSTART||'] - inuHourEnd['||INUHOUREND||']' ,15);

        IF(OR_BCDISPATCH.CUSCHEDDISPATCHORDER%ISOPEN) THEN
            CLOSE   OR_BCDISPATCH.CUDISPATCHBYORDER;
        END IF;

        OPEN    OR_BCDISPATCH.CUDISPATCHBYORDER(INUORDERID);
        FETCH   OR_BCDISPATCH.CUDISPATCHBYORDER INTO RCSCHEDDISPATCH;
        CLOSE   OR_BCDISPATCH.CUDISPATCHBYORDER;

         IF  (
                INUSCHEDDISPATCHID = RCSCHEDDISPATCH.SCHED_DISPATCH_ID AND
                TRUNC(IDTDATE)     = RCSCHEDDISPATCH.DATE_             AND
                ISBSTATUS          = RCSCHEDDISPATCH.DISPATCH_STATUS   AND
                INUOPERUNITID      = RCSCHEDDISPATCH.OPERATING_UNIT_ID AND
                INUHOURSTART       = RCSCHEDDISPATCH.HOUR_START        AND
                INUHOUREND         = RCSCHEDDISPATCH.HOUR_END
            )
        THEN
            OSBISVALID := OR_BOCONSTANTS.CSBSI;
        ELSE
            IF (DAOR_SCHED_DISPATCH.FSBGETDISPATCH_STATUS(INUSCHEDDISPATCHID) = OR_BOCONSTANTS.CSBDISPATCHSTATUSOVERLOAD) THEN
                OSBISVALID := OR_BOCONSTANTS.CSBSI;
            ELSE
                OSBISVALID := OR_BOCONSTANTS.CSBNO;
            END IF;
        END IF;



        UT_TRACE.TRACE('INICIA - OR_BODispatch.ValidaOrderChangeDispatch - osbIsValid['||OSBISVALID||']',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF(OR_BCDISPATCH.CUDISPATCHBYORDER%ISOPEN) THEN
                CLOSE   OR_BCDISPATCH.CUDISPATCHBYORDER;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF(OR_BCDISPATCH.CUDISPATCHBYORDER%ISOPEN) THEN
                CLOSE   OR_BCDISPATCH.CUDISPATCHBYORDER;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
















    PROCEDURE MOBILIZEORDER
    (
        INUORDERID  IN  OR_SCHED_DISPATCH.ORDER_ID%TYPE
    )
    IS
        RCSCHEDDISPATCH DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
    BEGIN
        
        IF (OR_BCDISPATCH.FBLEXDISPBYORDASGDATE(INUORDERID, UT_DATE.FDTSYSDATE, RCSCHEDDISPATCH)) THEN
            IF (OR_BCDISPATCH.FBLEXDISPMOVBYUNITDATE(RCSCHEDDISPATCH.OPERATING_UNIT_ID)) THEN
                
                
                GE_BOERRORS.SETERRORCODE(122266);
            END IF;

            OR_BODISPATCH.UPDATESCHEDDISPATCH(
                RCSCHEDDISPATCH.SCHED_DISPATCH_ID,
                OR_BOCONSTANTS.CSBDISPATCHSTATUSMOVING,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                RCSCHEDDISPATCH.HOUR_START,
                OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING
            );
        ELSE
            GE_BOERRORS.SETERRORCODE(900593);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END MOBILIZEORDER;
    
    
















    PROCEDURE DELDEADSCHEDBLOCK
    (
        ISBOPERATINGZONES       IN  VARCHAR2,
        ISBOPERATINGUNITS       IN  VARCHAR2,
        IDTDATE                 IN  OR_SCHED_AVAILABLE.DATE_%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia OR_BODispatch.DelDeadSchedBlock');
        OR_BCDISPATCH.DELDEADSCHEDBLOCK(
            ISBOPERATINGZONES,
            ISBOPERATINGUNITS,
            IDTDATE
        );
        UT_TRACE.TRACE('Fin OR_BODispatch.DelDeadSchedBlock');
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELDEADSCHEDBLOCK;

    

















    PROCEDURE VALSCHEDAVAILCHANGES
    (
        INUSCHEDAVAILABLEID     IN  OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE,
        INUHOURSTART            IN  OR_SCHED_AVAILABLE.HOUR_ENTRANCE%TYPE,
        INUHOUREND              IN  OR_SCHED_AVAILABLE.HOUR_EXIT%TYPE
    )
    IS
        RCAVAILABLE             DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
    BEGIN
        RCAVAILABLE := DAOR_SCHED_AVAILABLE.FRCGETRECORD(INUSCHEDAVAILABLEID);
        
        IF ((RCAVAILABLE.HOUR_ENTRANCE <> INUHOURSTART) OR
            (RCAVAILABLE.HOUR_EXIT <> INUHOUREND)) THEN
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALSCHEDAVAILCHANGES;

    














    PROCEDURE PREPOPTNOCOMMIT
    (
        ISBOPERATINGZONES       IN  VARCHAR2,
        ISBOPERATINGUNITS       IN  VARCHAR2,
        IDTDATE                 IN  OR_SCHED_AVAILABLE.DATE_%TYPE
    )
    IS
        RFCURAVAIL          CONSTANTS.TYREFCURSOR;
        RFCURDISP           CONSTANTS.TYREFCURSOR;
        TBAVAILABLES        DAOR_SCHED_AVAILABLE.TYTBOR_SCHED_AVAILABLE;
        NUIDXAVAIL          NUMBER;
        TBDISPATCHS         TYTBDISPATCHS;
        NUIDXDISPATCH       NUMBER;
        NUHOURINI           OR_SCHED_PROGRAMING.HOUR_START%TYPE;
        NUHOUREND           OR_SCHED_PROGRAMING.HOUR_END%TYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
    BEGIN
        UT_TRACE.TRACE('[INICIO] -  OR_BODispatch.prepOptNoCommit', 15);
        
        RFCURAVAIL := OR_BCDISPATCH.FRFGETSYNCSCHBYZONWDISSTA(ISBOPERATINGZONES, ISBOPERATINGUNITS, IDTDATE);
        FETCH RFCURAVAIL BULK COLLECT INTO TBAVAILABLES;
        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURAVAIL);
        NUIDXAVAIL := TBAVAILABLES.FIRST;
        WHILE (NUIDXAVAIL IS NOT NULL) LOOP
            
            RFCURDISP := OR_BCDISPATCH.FRFGETDISPBYAVAILABLE(
                TBAVAILABLES(NUIDXAVAIL).OPERATING_UNIT_ID,
                TBAVAILABLES(NUIDXAVAIL).OPERATING_ZONE_ID,
                TBAVAILABLES(NUIDXAVAIL).DATE_,
                TBAVAILABLES(NUIDXAVAIL).SCHEDULER_ID
            );
            FETCH RFCURDISP BULK COLLECT INTO TBDISPATCHS;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURDISP);

            
            OR_BCPROGRAMING.CANCELPROGBYSCHED(TBAVAILABLES(NUIDXAVAIL).SCHED_AVAILABLE_ID);
            
            NUHOURINI := TBAVAILABLES(NUIDXAVAIL).HOUR_ENTRANCE;

            NUIDXDISPATCH := TBDISPATCHS.FIRST;
            WHILE (NUIDXDISPATCH IS NOT NULL) LOOP
                
                CREATEPROGBLOCK(
                    TBAVAILABLES(NUIDXAVAIL).SCHED_AVAILABLE_ID,
                    TBDISPATCHS(NUIDXDISPATCH).HOUR_START,
                    TBDISPATCHS(NUIDXDISPATCH).HOUR_END,
                    TBDISPATCHS(NUIDXDISPATCH).DURATION,
                    TBDISPATCHS(NUIDXDISPATCH).PROGRAMING_CLASS_ID,
                    TBDISPATCHS(NUIDXDISPATCH).PROGRAMING_STATUS,
                    TBDISPATCHS(NUIDXDISPATCH).TASK_TYPE_ID,
                    TBDISPATCHS(NUIDXDISPATCH).PACKAGE_ID,
                    TBDISPATCHS(NUIDXDISPATCH).ADDRESS_ID,
                    TBDISPATCHS(NUIDXDISPATCH).ORDER_ID,
                    3,
                    'Reprogramaci�n despacho planeado',
                    TBDISPATCHS(NUIDXDISPATCH).CONFIRMED,
                    TBDISPATCHS(NUIDXDISPATCH).REAL_DURATION,
                    TBDISPATCHS(NUIDXDISPATCH).SUGGESTED_DATE,
                    TBDISPATCHS(NUIDXDISPATCH).SUGGESTED_HOUR,
                    TBDISPATCHS(NUIDXDISPATCH).SUGGESTED_PROG_CLASS

                );

                NUHOUREND := TBDISPATCHS(NUIDXDISPATCH).HOUR_START;

                IF (NUHOUREND > NUHOURINI) THEN
                    
                    CREATEPROGBLOCK(
                        TBAVAILABLES(NUIDXAVAIL).SCHED_AVAILABLE_ID,
                        NUHOURINI,
                        NUHOUREND,
                        NUHOUREND - NUHOURINI,
                        OR_BOCONSTANTS.CNUPROGCLASSRANGE,
                        OR_BOCONSTANTS.CSBPROGSTATUSFREE
                    );
                END IF;

                NUHOURINI := TBDISPATCHS(NUIDXDISPATCH).HOUR_END;

                NUIDXDISPATCH := TBDISPATCHS.NEXT(NUIDXDISPATCH);
            END LOOP;

            NUHOUREND := TBAVAILABLES(NUIDXAVAIL).HOUR_EXIT;

            IF (NUHOUREND > NUHOURINI) THEN
                
                CREATEPROGBLOCK(
                    TBAVAILABLES(NUIDXAVAIL).SCHED_AVAILABLE_ID,
                    NUHOURINI,
                    NUHOUREND,
                    NUHOUREND - NUHOURINI,
                    OR_BOCONSTANTS.CNUPROGCLASSRANGE,
                    OR_BOCONSTANTS.CSBPROGSTATUSFREE
                );
            END IF;

            
            OR_BOSCHED.RECALAVAILABILITYTIMES(TBAVAILABLES(NUIDXAVAIL).SCHED_AVAILABLE_ID);
            NUIDXAVAIL := TBAVAILABLES.NEXT(NUIDXAVAIL);
        END LOOP;

        UT_TRACE.TRACE('[FIN] -  OR_BODispatch.prepOptNoCommit', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURAVAIL);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURDISP);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURAVAIL);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURDISP);
            RAISE EX.CONTROLLED_ERROR;
    END PREPOPTNOCOMMIT;
    
    


















    PROCEDURE VALIDSTATEORDER
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        OSBVALIDSTATUS  OUT VARCHAR2
    )
    IS
    BEGIN

        OSBVALIDSTATUS := OR_BCORDER.FSBISVALIDSTATEORDER(INUORDERID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDSTATEORDER;


    
















    PROCEDURE SETORDERTOEXECUTION
    (
        INUORDER_ID         IN  OR_ORDER.ORDER_ID%TYPE,
        INUORDER_STATUS_ID  IN  OR_ORDER.ORDER_STATUS_ID%TYPE,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        RCSCHEDDISPATCH     DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
        NUCURRENTSTATUS     OR_ORDER.ORDER_STATUS_ID%TYPE;
        NUNEWSTATUS         OR_ORDER.ORDER_STATUS_ID%TYPE;
        BLEXISTDISPBYORDER  BOOLEAN;
        SBDISPATCHSTATUS    OR_SCHED_DISPATCH.DISPATCH_STATUS%TYPE;
    BEGIN
        UT_TRACE.TRACE('--[INICIO] OR_BODispatch.setOrderToExecution', 10);

        DAOR_ORDER.ACCKEY(INUORDER_ID);
        DAOR_ORDER_STATUS.ACCKEY(INUORDER_STATUS_ID);
        
        BLEXISTDISPBYORDER := OR_BCDISPATCH.FBLEXISTDISPBYORDER(INUORDER_ID, RCSCHEDDISPATCH);
        
        NUCURRENTSTATUS := DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDER_ID);
        
        
        IF(NUCURRENTSTATUS = INUORDER_STATUS_ID) THEN
            ERRORS.SETERROR(CNUERR_FINAL_STATUS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED) THEN
            SBDISPATCHSTATUS := OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED;
        END IF;

        
        IF (INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING ) THEN
            SBDISPATCHSTATUS := OR_BOCONSTANTS.CSBDISPATCHSTATUSMOVING;
        END IF;

        
        IF (INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING) THEN
            SBDISPATCHSTATUS := OR_BOCONSTANTS.CSBDISPATCHSTATUSEXECUTING;
        END IF;

        
        IF (INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED) THEN
            SBDISPATCHSTATUS := OR_BOCONSTANTS.CSBDISPATCHSTATUSCLOSE;
        END IF;
        
        
        
        IF (INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED) THEN
            SBDISPATCHSTATUS := OR_BOCONSTANTS.CSBDISPATCHSTATUSMISSED;
        END IF;

        
        
        IF (INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_LOCK) THEN
            OR_BOFWLOCKORDER.LOCKORDER(
                INUORDER_ID,
                CNUGENERALCOMMENTTYPE,
                NULL,
                FALSE,
                TRUE
            );
        ELSE
            
            OR_BODISPATCH.UPDATESCHEDDISPATCH(
                RCSCHEDDISPATCH.SCHED_DISPATCH_ID,
                SBDISPATCHSTATUS,
                RCSCHEDDISPATCH.OPERATING_UNIT_ID,
                RCSCHEDDISPATCH.HOUR_START,
                INUORDER_STATUS_ID,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                IDTCHANGEDATE
                );
        END IF;

        
        
        IF ((INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_LOCK) OR
            (INUORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED)) THEN
            
            OR_BOPROGRAMING.DELETERESERVE(INUORDER_ID, TRUE);
        END IF;

        NUNEWSTATUS := DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDER_ID,0);
        
        IF (NUNEWSTATUS != INUORDER_STATUS_ID) THEN
            
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('--[FIN] OR_BODispatch.setOrderToExecution', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETORDERTOEXECUTION;
    

    














    FUNCTION FNUGETUSERCOUNTRY
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    IS
    BEGIN
        IF CNUPAIS IS NULL THEN
            CNUPAIS := GE_BOCALENDAR.FNUOBTPAISPORUSUARIO;
        END IF;
        
        RETURN CNUPAIS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETUSERCOUNTRY;


END OR_BODISPATCH;