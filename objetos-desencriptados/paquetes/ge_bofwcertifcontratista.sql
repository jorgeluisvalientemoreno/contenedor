PACKAGE BODY Ge_BofwCertifContratista
IS

























































































































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO388050';

    
    
    
    CSBERRORESTADO      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE     := 9481;
    
    CNUERRORFECHAMAYOR  CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE     := 3852;
    
    CNUERRORFECMENPER   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE     := 8021;
    
    CNUERRORFECMAYPER   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE     := 8022;
    
    CNUEXECUTABLE_REP   CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := 15016;
    
    CNUERRORFECFINREQ   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE     := 9883;
    
    CNUERRRFECMNINI     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE     := 9922;
    
    CNUERRRFECMAYFINOR  CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE     := 9983;

    
    
    
    
    SBATTRIBUTES                GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    TBATTRIBUTES                CC_TYTBATTRIBUTE;

    
    
    

    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    





























    PROCEDURE LLENARATRIBUTOSCONTRATISTA
    (
        IOSBCONTRATISTAS  IN OUT     GE_BOUTILITIES.STYSTATEMENT
    )
    IS
        SBEMPRESA                   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBTIPOAUTORIZ               GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBTIPOCONTRIBY              GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBSTATUS                    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBCARGO                     GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBIDENTIFICATION            GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        IF IOSBCONTRATISTAS IS NOT NULL THEN
            RETURN;
        END IF;

        
        SBEMPRESA := 'GE_CONTRATISTA.ID_EMPRESA ' || GE_BOUTILITIES.CSBSEPARATOR ||'Ge_BoCertifContratista.fsbObtNombreEmpresa(GE_CONTRATISTA.ID_EMPRESA)';

        SBTIPOAUTORIZ := '( SELECT fa_tipoauto.tiaucodi ' || GE_BOUTILITIES.CSBSEPARATOR ||'fa_tipoauto.tiaudesc FROM fa_tipoauto WHERE tiaucodi = GE_CONTRATISTA.ID_TIPOAUTORIZACION )';
        SBTIPOCONTRIBY := '( SELECT fa_tipocont.ticocodi ' || GE_BOUTILITIES.CSBSEPARATOR ||'fa_tipocont.ticodesc FROM fa_tipocont WHERE ticocodi = GE_CONTRATISTA.ID_TIPOCONTRIBUYENTE)';
        SBSTATUS := 'ge_contratista.status ' || GE_BOUTILITIES.CSBSEPARATOR || 'ct_boconstants.fsbGetDescStatus(ge_contratista.status)';
        SBCARGO := 'GE_CONTRATISTA.POSITION_TYPE_ID ' || GE_BOUTILITIES.CSBSEPARATOR || 'dage_position_type.fsbgetdescription(GE_CONTRATISTA.POSITION_TYPE_ID, 0)';
        SBIDENTIFICATION := 'decode(GE_CONTRATISTA.SUBSCRIBER_ID, null, null,
               DAGE_IDENTIFICA_TYPE.FSBGETDESCRIPTION(DAGE_SUBSCRIBER.FNUGETIDENT_TYPE_ID(GE_CONTRATISTA.SUBSCRIBER_ID))'|| GE_BOUTILITIES.CSBSEPARATOR ||'DAGE_SUBSCRIBER.FSBGETIDENTIFICATION(GE_CONTRATISTA.SUBSCRIBER_ID))';

        
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.ID_CONTRATISTA','ID_CONTRATISTA',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.NOMBRE_CONTRATISTA','NOMBRE_CONTRATISTA',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.DESCRIPCION','DESCRIPCION',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.CORREO_ELECTRONICO','CORREO_ELECTRONICO',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.TELEFONO','TELEFONO',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.NOMBRE_CONTACTO','NOMBRE_CONTACTO',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE (SBEMPRESA,'ID_EMPRESA',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.ID_SUSCRIPTOR','ID_SUSCRIPTOR',IOSBCONTRATISTAS);
        
        
        GE_BOUTILITIES.ADDATTRIBUTE (SBTIPOAUTORIZ,'ID_TIPOAUTORIZACION',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE (SBTIPOCONTRIBY,'ID_TIPOCONTRIBUYENTE',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE (SBSTATUS,'STATUS',IOSBCONTRATISTAS);

        
        GE_BOUTILITIES.ADDATTRIBUTE (SBIDENTIFICATION,'SUBSCRIBER_ID', IOSBCONTRATISTAS);
        
        
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.COMMON_REG','COMMON_REG',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.IVA_TAX','IVA_TAX',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATISTA.WITHHOLDING_TAX','WITHHOLDING_TAX',IOSBCONTRATISTAS);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCARGO,'POSITION_TYPE_ID',IOSBCONTRATISTAS);


        GE_BOUTILITIES.ADDATTRIBUTE (':parent_id','parent_id',IOSBCONTRATISTAS);

        UT_TRACE.TRACE(IOSBCONTRATISTAS,40);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LLENARATRIBUTOSCONTRATISTA;

    
    
























    PROCEDURE LLENARATRIBUTOSCONTRATO
    (
        IOSBCONTRATO     IN OUT     GE_BOUTILITIES.STYSTATEMENT
    )
    IS
        SBCONTRATISTA       GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBTIPO_CONTRATO     GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBACCOUNTCLASSIF    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBVALORLEGALIZADO   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBPORCENTAJEAVANCE  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBSTATUS            GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        IF IOSBCONTRATO IS NOT NULL THEN
            RETURN;
        END IF;

        
        SBCONTRATISTA   := 'GE_CONTRATO.ID_CONTRATISTA ' || GE_BOUTILITIES.CSBSEPARATOR ||' dage_contratista.fsbGetNombre_contratista(GE_CONTRATO.ID_CONTRATISTA,0)';
        SBTIPO_CONTRATO := 'GE_CONTRATO.ID_TIPO_CONTRATO ' || GE_BOUTILITIES.CSBSEPARATOR ||' dage_tipo_contrato.fsbGetDescripcion(GE_CONTRATO.ID_TIPO_CONTRATO,0)';
        SBACCOUNTCLASSIF := 'GE_CONTRATO.ACCOUNT_CLASSIF_ID ' || GE_BOUTILITIES.CSBSEPARATOR ||' dage_account_classif.fsbGetDescription(GE_CONTRATO.ACCOUNT_CLASSIF_ID,0)';
        SBSTATUS := 'GE_CONTRATO.STATUS ' || GE_BOUTILITIES.CSBSEPARATOR || 'ct_boconstants.fsbGetDescStatus(GE_CONTRATO.STATUS)';
        
        
        SBVALORLEGALIZADO := 'NVL(GE_CONTRATO.VALOR_NO_LIQUIDADO,0) + nvl(GE_CONTRATO.VALOR_LIQUIDADO,0)';
        SBPORCENTAJEAVANCE := 'DECODE(nvl(GE_CONTRATO.VALOR_TOTAL_CONTRATO, 0), 0, 0, round(100* ('|| SBVALORLEGALIZADO||' + NVL(GE_CONTRATO.VALOR_ASIGNADO,0)) /GE_CONTRATO.VALOR_TOTAL_CONTRATO , 2))';
        
        
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.ID_CONTRATO','ID_CONTRATO',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.DESCRIPCION','DESCRIPCION',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCONTRATISTA,'ID_CONTRATISTA',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.FECHA_INICIAL','FECHA_INICIAL',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.FECHA_FINAL','FECHA_FINAL',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.VALOR_AUI_ADMIN','VALOR_AUI_ADMIN',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.VALOR_AUI_UTIL','VALOR_AUI_UTIL',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.VALOR_AUI_IMPREV','VALOR_AUI_IMPREV',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.TIPO_MONEDA_LIQUIDAR','TIPO_MONEDA_LIQUIDAR',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.VALOR_TOTAL_CONTRATO','VALOR_TOTAL_CONTRATO',IOSBCONTRATO);
        
        GE_BOUTILITIES.ADDATTRIBUTE (SBPORCENTAJEAVANCE,'PORCENTAJE_AVANCE',IOSBCONTRATO);
        
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.VALOR_TOTAL_PAGADO','VALOR_TOTAL_PAGADO',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.VALOR_ASIGNADO','VALOR_ASIGNADO',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE (SBVALORLEGALIZADO,'VALOR_LEGALIZADO',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.VALOR_NO_LIQUIDADO','VALOR_NO_LIQUIDADO',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.VALOR_LIQUIDADO','VALOR_LIQUIDADO',IOSBCONTRATO);

        GE_BOUTILITIES.ADDATTRIBUTE (SBTIPO_CONTRATO,'ID_TIPO_CONTRATO',IOSBCONTRATO);

        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.DIAS_FACTURAR','DIAS_FACTURAR',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.ALERTA_PORCEN_VALOR','ALERTA_PORCEN_VALOR',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.VALOR_ANTICIPO','VALOR_ANTICIPO',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.ANTICIPO_AMORTIZADO','ANTICIPO_AMORTIZADO',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.PORCEN_FONDO_GARANT','PORCEN_FONDO_GARANT',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.ACUMUL_FONDO_GARANT','ACUMUL_FONDO_GARANT',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.FECHA_CIERRE','FECHA_CIERRE',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE (SBSTATUS,'STATUS',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_CONTRATO.PERCENT_NATION_STAMP','PERCENT_NATION_STAMP',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE (SBACCOUNTCLASSIF,'ACCOUNT_CLASSIF_ID',IOSBCONTRATO);
        GE_BOUTILITIES.ADDATTRIBUTE ('nvl(:parent_id, GE_CONTRATO.ID_CONTRATISTA)','parent_id',IOSBCONTRATO);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LLENARATRIBUTOSCONTRATO;
    
    































    PROCEDURE LLENARATRIBUTOSACTA
    (
        IOSBACTAS       IN OUT      GE_BOUTILITIES.STYSTATEMENT
    )
    IS
        SBTIPOACTA                  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBBASE                      GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBCONTRATO                  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBVALORTOTAL                GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBPERIODO                   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBPERSONA                   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        IF IOSBACTAS IS NOT NULL THEN
            RETURN;
        END IF;

        
        SBTIPOACTA  := 'GE_ACTA.ID_TIPO_ACTA ' || GE_BOUTILITIES.CSBSEPARATOR ||' ct_boconstants.fsbGetDescCertificateType(GE_ACTA.ID_TIPO_ACTA)';
        SBBASE      := 'GE_ACTA.ID_BASE_ADMINISTRATIVA ' || GE_BOUTILITIES.CSBSEPARATOR ||' dage_base_administra.fsbGetDescripcion(GE_ACTA.ID_BASE_ADMINISTRATIVA,0)';
        SBCONTRATO  := 'GE_ACTA.ID_CONTRATO ' || GE_BOUTILITIES.CSBSEPARATOR ||' dage_contrato.fsbGetDescripcion(GE_ACTA.ID_CONTRATO,0)';


        SBPERIODO := '(SELECT ge_periodo_cert.id_periodo || ' || CHR(39) ||' -  ('|| CHR(39) || ' || ' ||
                     ' to_char(ge_periodo_cert.fecha_inicial, ut_date.fsbSHORT_DATE_FORMAT ) || '|| CHR(39) ||' , '|| CHR(39) || ' || ' ||
                     ' to_char(ge_periodo_cert.fecha_final, ut_date.fsbSHORT_DATE_FORMAT) || '|| CHR(39) ||')'|| CHR(39) || 
                     ' FROM  ge_periodo_cert WHERE ge_periodo_cert.id_periodo = ge_acta.id_periodo)';

        SBPERSONA := 'GE_ACTA.PERSON_ID ' || GE_BOUTILITIES.CSBSEPARATOR || ' dage_person.fsbGetName_(GE_ACTA.PERSON_ID,0)';
        
        

        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.ID_ACTA','ID_ACTA',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE (SBPERIODO,'ID_PERIODO',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.NOMBRE','NOMBRE',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE (SBPERSONA,'PERSON_ID',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE (SBTIPOACTA,'ID_TIPO_ACTA',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.VALOR_TOTAL','VALOR_TOTAL',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.FECHA_CREACION','FECHA_CREACION',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.FECHA_CIERRE','FECHA_CIERRE',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.FECHA_INICIO','FECHA_INICIO',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.FECHA_FIN','FECHA_FIN',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCONTRATO,'ID_CONTRATO',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('decode(GE_ACTA.ESTADO, ge_boconstants.fsbGetActaAbierta,''Abierta'',''Cerrada'')','ESTADO',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE (SBBASE,'ID_BASE_ADMINISTRATIVA',IOSBACTAS);

        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.FECHA_ULT_ACTUALIZAC','FECHA_ULT_ACTUALIZAC',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.NUMERO_FISCAL','NUMERO_FISCAL',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.EXTERN_PAY_DATE','EXTERN_PAY_DATE',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.EXTERN_INVOICE_NUM','EXTERN_INVOICE_NUM',IOSBACTAS);
        GE_BOUTILITIES.ADDATTRIBUTE ('nvl(:parent_id,GE_ACTA.ID_CONTRATO)','parent_id',IOSBACTAS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LLENARATRIBUTOSACTA;
    
    






















    PROCEDURE LLENARATRIBUTOSORDASOC
    (
        IOSBATTRIBUTES       IN OUT      GE_BOUTILITIES.STYSTATEMENT
    )
    IS
        SBNUMERATOR                 GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBTASKTYPE                  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBORDERSTATUS               GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBOPERATINGSECTOR           GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBOPERATINGUNIT             GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBASSIGNEDWITH              GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBORDERCLASSIF              GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBCAUSAL                    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;

        SBREALTASKTYPE              GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBPERSON                    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBCORSCOPR                  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBRUSERUTA                  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBROUTENAME                 GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBADDRESS_PARSED            GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBNEIGHBORTHOOD             GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBGEOGRLOCATION             GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBSUBSCNAME                 GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBSUBSCLAST_NAME            GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBPROGCLASDESC              GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBPRODUCT                   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBSUBSCRIBER                GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBCOMMENT                   GE_BOUTILITIES.STYSTATEMENT;
        SBCOMMENTTYPE               GE_BOUTILITIES.STYSTATEMENT;

    BEGIN


        
        SBNUMERATOR := 'OR_ORDER.numerator_id'||GE_BOUTILITIES.CSBSEPARATOR ||'OR_ORDER.sequence';
        SBTASKTYPE := 'OR_ORDER.TASK_TYPE_ID'||GE_BOUTILITIES.CSBSEPARATOR ||'OR_boBasicDataServices.fsbGetDescTaskType(OR_ORDER.TASK_TYPE_ID)';
        SBORDERSTATUS := 'OR_ORDER.ORDER_STATUS_ID'||GE_BOUTILITIES.CSBSEPARATOR ||'daor_order_status.fsbGetDescription(OR_ORDER.ORDER_STATUS_ID)';
        SBOPERATINGSECTOR := 'OR_ORDER.OPERATING_SECTOR_ID'||GE_BOUTILITIES.CSBSEPARATOR ||'OR_boBasicDataServices.fsbGetDescOperatinSector(OR_ORDER.OPERATING_SECTOR_ID)';
        SBOPERATINGUNIT := 'OR_ORDER.OPERATING_UNIT_ID'||GE_BOUTILITIES.CSBSEPARATOR ||'OR_boBasicDataServices.fsbGetDescOperatingUnit(OR_ORDER.OPERATING_UNIT_ID)';
        SBASSIGNEDWITH := 'OR_ORDER.ASSIGNED_WITH'||GE_BOUTILITIES.CSBSEPARATOR ||'decode(OR_ORDER.ASSIGNED_WITH'||
                                                                                     ',''S'','''||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_S')||
                                                                                   ''',''O'','''||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_O')||
                                                                                   ''',''N'','''||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_N')||
                                                                                   ''',''R'','''||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_R')||
                                                                                   ''',null)';

        SBORDERCLASSIF := 'OR_ORDER.ORDER_CLASSIF_ID'||GE_BOUTILITIES.CSBSEPARATOR ||'OR_boBasicDataServices.fsbGetDescOrderClassif(OR_ORDER.ORDER_CLASSIF_ID)';
        SBCAUSAL := 'OR_ORDER.CAUSAL_ID'||GE_BOUTILITIES.CSBSEPARATOR ||'Ge_boBasicDataServices.fsbGetDescCausal(OR_ORDER.CAUSAL_ID)';

        SBREALTASKTYPE := 'OR_ORDER.REAL_TASK_TYPE_ID'||GE_BOUTILITIES.CSBSEPARATOR ||'OR_boBasicDataServices.fsbGetDescTaskType(OR_ORDER.REAL_TASK_TYPE_ID)';
        SBPROGCLASDESC := 'OR_BOBasicDataServices.fsbGetProgClassDesc(or_order.order_id)';
        SBPERSON := 'OR_boBasicDataServices.fnuGetOrderPersonId(OR_ORDER.ORDER_ID,OR_ORDER.OPERATING_UNIT_ID)'||GE_BOUTILITIES.CSBSEPARATOR ||
                    'Ge_boBasicDataServices.fsbGetDescPerson(OR_boBasicDataServices.fnuGetOrderPersonId(OR_ORDER.ORDER_ID,OR_ORDER.OPERATING_UNIT_ID))';
        SBCORSCOPR := 'or_order.consecutive';
        SBRUSERUTA := 'or_order.route_id';
        SBROUTENAME := '(select OR_route.Name FROM OR_route WHERE OR_route.route_id = or_order.route_id)';
        SBADDRESS_PARSED := 'OR_bobasicdataservices.fsbGetAddress_parsed(or_order.order_id)';
        SBNEIGHBORTHOOD := 'or_bobasicdataservices.fsbGetDescNeighborthood(or_order.order_id)';
        SBGEOGRLOCATION := 'or_bobasicdataservices.fsbGetDescGeograLocation(or_order.order_id)';
        SBSUBSCNAME := 'or_bobasicdataservices.fsbGetDescSubcrName(or_order.order_id)';
        SBSUBSCLAST_NAME := 'or_bobasicdataservices.fsbGetDescSubcrLastName(or_order.order_id)';
        SBPRODUCT := 'or_bobasicdataservices.fnuGetProductId(or_order.order_id)';
        SBSUBSCRIBER := 'or_bobasicdataservices.fnuGetSubscriberId(or_order.order_id)';

        SBCOMMENT     := 'daor_order_comment.fsbGetOrder_comment(or_bcordercomment.fnuGetLastComment(or_order.order_id), 0)';
        SBCOMMENTTYPE := 'daor_order_comment.fnuGetComment_type_id(or_bcordercomment.fnuGetLastComment(or_order.order_id), 0)'||GE_BOUTILITIES.CSBSEPARATOR ||
                         'decode(daor_order_comment.fnuGetComment_type_id(or_bcordercomment.fnuGetLastComment(or_order.order_id), 0), '||
                         'null, NULL, dage_comment_type.fsbgetdescription(daor_order_comment.fnuGetComment_type_id(or_bcordercomment.fnuGetLastComment(or_order.order_id), 0)))';

        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.ORDER_ID','ORDER_ID',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBNUMERATOR,'numerator', IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBTASKTYPE,'TASK_TYPE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBORDERSTATUS,'ORDER_STATUS',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBOPERATINGSECTOR,'OPERATING_SECTOR',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBPRODUCT,'PRODUCT_ID',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBOPERATINGUNIT,'OPERATING_UNIT',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.CREATED_DATE','CREATED_DATE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.ASSIGNED_DATE','ASSIGNED_DATE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBASSIGNEDWITH,'ASSIGNED_WITH',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.EXEC_ESTIMATE_DATE','EXEC_ESTIMATE_DATE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.MAX_DATE_TO_LEGALIZE','MAX_DATE_TO_LEGALIZE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.REPROGRAM_LAST_DATE','REPROGRAM_LAST_DATE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.LEGALIZATION_DATE','LEGALIZATION_DATE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.EXEC_INITIAL_DATE','EXEC_INITIAL_DATE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.EXECUTION_FINAL_DATE','EXECUTION_FINAL_DATE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCAUSAL,'CAUSAL',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBPERSON,'PERSON',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.ORDER_VALUE','ORDER_VALUE',IOSBATTRIBUTES);

        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.PRINTING_TIME_NUMBER','PRINTING_TIME_NUMBER',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.LEGALIZE_TRY_TIMES','LEGALIZE_TRY_TIMES',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.IS_COUNTERMAND','IS_COUNTERMAND',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBREALTASKTYPE,'REAL_TASK_TYPE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.PRIORITY','PRIORITY',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBPROGCLASDESC,'PROGCLASDESC',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE ('OR_ORDER.ARRANGED_HOUR','ARRANGED_HOUR',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCORSCOPR,'CORSCOPR',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBRUSERUTA,'RUSERUTA',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBROUTENAME,'ROUTE_NAME',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBADDRESS_PARSED,'ADDRESS_PARSED',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBNEIGHBORTHOOD,'NEIGHBORTHOOD',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBGEOGRLOCATION,'GEOGRAP_LOCATION',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBSUBSCRIBER,'SUBSCRIBER_ID',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBSUBSCNAME,'SUBSC_NAME',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBSUBSCLAST_NAME,'SUBSC_LAST_NAME',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCOMMENT,'ORDER_COMMENT',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCOMMENTTYPE,'COMMENT_TYPE',IOSBATTRIBUTES);
        GE_BOUTILITIES.ADDATTRIBUTE (':parent_id','parent_id',IOSBATTRIBUTES);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LLENARATRIBUTOSORDASOC;
    
    

























    PROCEDURE LLENARATRIBUTOSDETALLEACTA
    (
        IOSBDETALLEACTA     IN OUT     GE_BOUTILITIES.STYSTATEMENT
    )
    IS
        SBACTA                      GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBDESUNIDADMEDIDA           GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBTIPOGENERACION            GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBITEMDESCR                 GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        IF IOSBDETALLEACTA IS NOT NULL THEN
            RETURN;
        END IF;

        
        SBACTA := 'GE_DETALLE_ACTA.id_acta'||GE_BOUTILITIES.CSBSEPARATOR ||'dage_acta.fsbGetNombre(GE_DETALLE_ACTA.id_acta)';
        
        SBDESUNIDADMEDIDA := '( ge_detalle_acta.id_unidad_medida || '||
                             'decode(ge_detalle_acta.id_unidad_medida,null,null,'' - '') || '||
                             'dage_measure_unit.fsbgetdescription(ge_detalle_acta.id_unidad_medida,0))';

        SBTIPOGENERACION := 'decode(TIPO_GENERACION,''A'',''Autom�tica'',''M'',''Manual'')';
        
        SBITEMDESCR := 'DAGE_ITEMS.FSBGETCODE(GE_DETALLE_ACTA.ID_ITEMS, 0)'||GE_BOUTILITIES.CSBSEPARATOR ||'GE_DETALLE_ACTA.DESCRIPCION_ITEMS';
        
        UT_TRACE.TRACE('sbItemDescr = '||SBITEMDESCR,40);
        
        
        GE_BOUTILITIES.ADDATTRIBUTE (SBACTA,'ID_ACTA',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE ('max(GE_DETALLE_ACTA.ID_DETALLE_ACTA)','ID_DETALLE_ACTA',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE (SBITEMDESCR,'DESCRIPCION_ITEMS',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_DETALLE_ACTA.PORCEN_CUMPLIMIENTO','PORCEN_CUMPLIMIENTO',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_DETALLE_ACTA.PORCEN_PONDERADO','PORCEN_PONDERADO',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE (SBTIPOGENERACION,'TIPO_GENERACION',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE (SBDESUNIDADMEDIDA,'UNIDAD_MEDIDA',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_DETALLE_ACTA.VALOR_UNITARIO','VALOR_UNITARIO',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE ('sum(CANTIDAD)','CANTIDAD',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE ('sum(GE_DETALLE_ACTA.VALOR_TOTAL)','VALOR_TOTAL',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_DETALLE_ACTA.CONDITION_BY_PLAN_ID||''-''||CT_BCConditionPlan.fsbCondNameByCondPlan(GE_DETALLE_ACTA.condition_by_plan_id)','CONDITION_NAME',IOSBDETALLEACTA);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_DETALLE_ACTA.COMMENT_','COMMENT_',IOSBDETALLEACTA);
        
        GE_BOUTILITIES.ADDATTRIBUTE (':parent_id','parent_id',IOSBDETALLEACTA);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LLENARATRIBUTOSDETALLEACTA;
    
    



















    PROCEDURE OBTCONTRATISTABASE
    (
        ISBCONTRATISTA      IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUCONTRATISTA           GE_CONTRATISTA.ID_CONTRATISTA%TYPE;
        SBCONTRATISTAS          GE_BOUTILITIES.STYSTATEMENT;
        

    BEGIN

        LLENARATRIBUTOSCONTRATISTA(SBCONTRATISTAS);

        NUCONTRATISTA := TO_NUMBER(ISBCONTRATISTA);

        SBSQL :=  ' SELECT ' || SBCONTRATISTAS   ||CHR(10)||
                  ' FROM    GE_CONTRATISTA '                   ||CHR(10)||
                  ' WHERE   GE_CONTRATISTA.id_contratista = :nuContratista';

        UT_TRACE.TRACE(SBSQL,40);

         OPEN OCUDATACURSOR FOR SBSQL USING NUCONTRATISTA, NUCONTRATISTA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTCONTRATISTABASE;
    
    





























    PROCEDURE OBTCONTRATISTAS
    (
        INUCONTRATISTA      IN      GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        ISBNOMBRE           IN      GE_CONTRATISTA.NOMBRE_CONTRATISTA%TYPE,
        ISBDESCRIPCION      IN      GE_CONTRATISTA.DESCRIPCION%TYPE,
        ISBMAIL             IN      GE_CONTRATISTA.CORREO_ELECTRONICO%TYPE,
        ISBTELEFONO         IN      GE_CONTRATISTA.TELEFONO%TYPE,
        ISBCONTACTO         IN      GE_CONTRATISTA.NOMBRE_CONTACTO%TYPE,
        INUEMPRESA          IN      GE_CONTRATISTA.ID_EMPRESA%TYPE,
        OCUDATACURSOR       OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        SBCONTRATISTAS          GE_BOUTILITIES.STYSTATEMENT;
        
        NUCONTRATISTA           GE_CONTRATISTA.ID_CONTRATISTA%TYPE;
        SBNOMBRE                GE_CONTRATISTA.NOMBRE_CONTRATISTA%TYPE;
        SBDESCRIPTION           GE_CONTRATISTA.DESCRIPCION%TYPE;
        SBMAIL                  GE_CONTRATISTA.CORREO_ELECTRONICO%TYPE;
        SBTELEFONO              GE_CONTRATISTA.TELEFONO%TYPE;
        SBCONTACTO              GE_CONTRATISTA.NOMBRE_CONTACTO%TYPE;
        NUEMPRESA               GE_CONTRATISTA.ID_EMPRESA%TYPE;
        SBUSERID                VARCHAR2(16);
        

    BEGIN

        NUCONTRATISTA   := NVL(INUCONTRATISTA, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        SBNOMBRE        := TRIM (UPPER(NVL(ISBNOMBRE, CC_BOCONSTANTS.CSBNULLSTRING )));
        SBDESCRIPTION   := TRIM (UPPER(NVL(ISBDESCRIPCION, CC_BOCONSTANTS.CSBNULLSTRING )));
        SBMAIL          := TRIM (UPPER(NVL(ISBMAIL, CC_BOCONSTANTS.CSBNULLSTRING )));
        SBTELEFONO      := TRIM (UPPER(NVL(ISBTELEFONO, CC_BOCONSTANTS.CSBNULLSTRING )));
        SBCONTACTO      := TRIM (UPPER(NVL(ISBCONTACTO, CC_BOCONSTANTS.CSBNULLSTRING )));
        NUEMPRESA      := NVL(INUEMPRESA, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        
        LLENARATRIBUTOSCONTRATISTA(SBCONTRATISTAS);

        SBSQL := ' SELECT '|| SBCONTRATISTAS ||CHR(10)||
                 ' FROM GE_CONTRATISTA '||CHR(10)||
                 ' WHERE ';

        
        IF NUCONTRATISTA != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' id_contratista = :nuContratista'||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| NUCONTRATISTA ||CHR(39)||' = :nuContratista'||CHR(10)||' and ';
        END IF;
        
        
        CT_BOCONTRSECURITY.LOADSECURITYSETTINGS(CT_BOCONSTANTS.CSBSEC_INFO_TYPE_GENERAL);

        IF (CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE) THEN
            
            SBUSERID := TO_CHAR(SA_BOUSER.FNUGETUSERID(UT_SESSION.GETUSER));
            
            SBSQL := SBSQL ||' exists (select 1 from sa_user_contractor_sec ss where
                                   ss.contractor_id = ge_contratista.id_contratista
                               and ss.user_id = '||SBUSERID|| CHR(10) || '
                               and ss.sec_type = '''|| CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE || ''')' ||CHR(10)||' and ';
        ELSIF (CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_AUX_ROLE) THEN
            
            SBUSERID := TO_CHAR(SA_BOUSER.FNUGETUSERID(UT_SESSION.GETUSER));
            
            SBSQL := SBSQL ||' exists (select 1 from sa_user_contractor_sec ss where
                                   ss.contractor_id = ge_contratista.id_contratista
                               and ss.user_id = '||SBUSERID|| CHR(10) || '
                               and ss.sec_type = ''' || CT_BOCONSTANTS.CSBCONTR_AUX_ROLE|| ''')'||CHR(10)||' and ';
        END IF;

        
        IF SBNOMBRE != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBSQL := SBSQL ||'upper(nombre_contratista) LIKE upper(:sbNombre)||'||CHR(39)||'%'||CHR(39)||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| SBNOMBRE ||CHR(39)||' = :sbNombre'||CHR(10)||' and ';
        END IF;
        
        
        IF SBDESCRIPTION != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBSQL := SBSQL ||'upper(descripcion) LIKE upper(:sbDescription)||'||CHR(39)||'%'||CHR(39)||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| SBDESCRIPTION ||CHR(39)||' = :sbDescription'||CHR(10)||' and ';
        END IF;
        
        
        IF SBMAIL != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBSQL := SBSQL ||'upper(correo_electronico) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:sbMail)||'||CHR(39)||'%'||CHR(39)||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| SBMAIL ||CHR(39)||' = :sbMail'||CHR(10)||' and ';
        END IF;
        
        
        IF SBTELEFONO != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBSQL := SBSQL ||'upper(telefono) LIKE '||CHR(39)||'%'||CHR(39)||'||upper(:sbTelefono)||'||CHR(39)||'%'||CHR(39)||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| SBTELEFONO ||CHR(39)||' = :sbTelefono'||CHR(10)||' and ';
        END IF;
        
        
        IF SBCONTACTO != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBSQL := SBSQL ||'upper(nombre_contacto) LIKE upper(:sbContacto)||'||CHR(39)||'%'||CHR(39)||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| SBCONTACTO ||CHR(39)||' = :sbContacto'||CHR(10)||' and ';
        END IF;
        
        
        IF NUEMPRESA != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||'id_empresa = :nuEmpresa'||CHR(10);
        ELSE
            SBSQL := SBSQL ||CHR(39)|| NUEMPRESA ||CHR(39)||' = :nuEmpresa'||CHR(10);
        END IF;

        UT_TRACE.TRACE(SBSQL,40);

        OPEN OCUDATACURSOR FOR SBSQL USING      CC_BOBOSSUTIL.CNUNULL,
                                                NUCONTRATISTA,
                                                SBNOMBRE,
                                                SBDESCRIPTION,
                                                SBMAIL,
                                                SBTELEFONO,
                                                SBCONTACTO,
                                                NUEMPRESA;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTCONTRATISTAS;
    
    



















    PROCEDURE OBTCONTRATOBASE
    (
        ISBCONTRATO      IN      VARCHAR2,
        OCUDATACURSOR       OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUCONTRATO              GE_CONTRATO.ID_CONTRATO%TYPE;
        SBCONTRATO              GE_BOUTILITIES.STYSTATEMENT;
        

    BEGIN

        LLENARATRIBUTOSCONTRATO(SBCONTRATO);

        NUCONTRATO := TO_NUMBER(ISBCONTRATO);

        SBSQL :=  ' SELECT ' || SBCONTRATO   ||CHR(10)||
                  ' FROM    GE_CONTRATO '    ||CHR(10)||
                  ' WHERE   GE_CONTRATO.id_contrato = :nuContrato ';

         OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, NUCONTRATO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTCONTRATOBASE;
    
    



















    PROCEDURE OBTCONTRATOPADRE
    (
        ISBCONTRATISTA      IN      VARCHAR2,
        OCUDATACURSOR       OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUCONTRATISTA           GE_CONTRATO.ID_CONTRATISTA%TYPE;
        SBCONTRATO              GE_BOUTILITIES.STYSTATEMENT;
        

    BEGIN

        LLENARATRIBUTOSCONTRATO(SBCONTRATO);

        NUCONTRATISTA := TO_NUMBER(ISBCONTRATISTA);

        SBSQL :=  ' SELECT /*+ index(GE_CONTRATO IDX_GE_CONTRATO_01)*/' ||CHR(10)||
                    SBCONTRATO   ||CHR(10)||
                  ' FROM    GE_CONTRATO '    ||CHR(10)||
                  ' WHERE   GE_CONTRATO.id_contratista = :nuContratista ';

         OPEN OCUDATACURSOR FOR SBSQL USING NUCONTRATISTA, NUCONTRATISTA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTCONTRATOPADRE;
    
    





























    PROCEDURE OBTCONTRATOS
    (
        INUCONTRATO         IN      GE_CONTRATO.ID_CONTRATO%TYPE,
        INUCONTRATISTA      IN      GE_CONTRATO.ID_CONTRATISTA%TYPE,
        ISBDESCRIPCION      IN      GE_CONTRATO.DESCRIPCION%TYPE,
        IDTFECHAINICIAL     IN      GE_CONTRATO.FECHA_INICIAL%TYPE,
        IDTFECHAFINAL       IN      GE_CONTRATO.FECHA_FINAL%TYPE,
        INUTIPO             IN      GE_CONTRATO.ID_TIPO_CONTRATO%TYPE,
        OCUDATACURSOR       OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                       VARCHAR2(32767);
        SBCONTRATOS                 GE_BOUTILITIES.STYSTATEMENT;

        NUCONTRATO                  GE_CONTRATO.ID_CONTRATO%TYPE;
        NUCONTRATISTA               GE_CONTRATO.ID_CONTRATISTA%TYPE;
        SBDESCRIPCION               GE_CONTRATO.DESCRIPCION%TYPE;
        DTFECHAINICIAL              GE_CONTRATO.FECHA_INICIAL%TYPE;
        DTFECHAFINAL                GE_CONTRATO.FECHA_FINAL%TYPE;
        NUTIPO                      GE_CONTRATO.ID_TIPO_CONTRATO%TYPE;
        

    BEGIN

        NUCONTRATO      := NVL(INUCONTRATO, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUCONTRATISTA   := NVL(INUCONTRATISTA, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        SBDESCRIPCION   := TRIM (UPPER(NVL(ISBDESCRIPCION, CC_BOCONSTANTS.CSBNULLSTRING )));
        DTFECHAINICIAL  := TRUNC(NVL (IDTFECHAINICIAL, UT_DATE.FDTMINDATE));
        DTFECHAFINAL    := TRUNC(NVL (IDTFECHAFINAL, UT_DATE.FDTMAXDATE));
        NUTIPO          := NVL(INUTIPO, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        
        LLENARATRIBUTOSCONTRATO(SBCONTRATOS);

        SBSQL := ' SELECT '|| SBCONTRATOS ||CHR(10)||
                 ' FROM GE_CONTRATO '||CHR(10)||
                 ' WHERE ';
        
        
        IF NUCONTRATO != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' id_contrato = :nuContrato'||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| NUCONTRATO ||CHR(39)||' = :nuContrato'||CHR(10)||' and ';
        END IF;

        
        IF NUCONTRATISTA != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' id_contratista = :nuContratista'||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| NUCONTRATISTA ||CHR(39)||' = :nuContratista'||CHR(10)||' and ';
        END IF;
        

        
        CT_BOCONTRSECURITY.LOADSECURITYSETTINGS(CT_BOCONSTANTS.CSBSEC_INFO_TYPE_GENERAL);

        IF (   CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE
            OR CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_AUX_ROLE)
        THEN
            
            SBSQL := SBSQL ||' CT_BOContrSecurity.fnuCanManageContract(ge_contrato.id_contrato) = 1 '
                           ||CHR(10)||' and ';
        END IF;


        
        IF SBDESCRIPCION != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBSQL := SBSQL ||'upper(descripcion) LIKE upper(:sbDescripcion)||'||CHR(39)||'%'||CHR(39)||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| SBDESCRIPCION ||CHR(39)||' = :sbDescripcion'||CHR(10)||' and ';
        END IF;
        
        
        IF NUTIPO != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' id_tipo_contrato = :nuTipo'||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||CHR(39)|| NUTIPO ||CHR(39)||' = :nuTipo'||CHR(10)||' and ';
        END IF;

        
        IF DTFECHAINICIAL != TRUNC(UT_DATE.FDTMINDATE) THEN
            SBSQL := SBSQL ||' TRUNC(GE_CONTRATO.fecha_inicial) = :dtFechaInicial'||CHR(10)||' and ';
        ELSE
            SBSQL := SBSQL ||' nvl(GE_CONTRATO.fecha_inicial, '||CHR(39)|| DTFECHAINICIAL ||CHR(39)||') >= :dtFechaInicial'||CHR(10)||' and ';
        END IF;

        
        IF DTFECHAFINAL != TRUNC(UT_DATE.FDTMAXDATE) THEN
            SBSQL := SBSQL ||' TRUNC(GE_CONTRATO.fecha_final) = :dtFechaFinal';
        ELSE
            SBSQL := SBSQL ||' nvl(GE_CONTRATO.fecha_final, '||CHR(39)|| DTFECHAINICIAL ||CHR(39)||') <= :dtFechaFinal';
        END IF;
        

        OPEN OCUDATACURSOR FOR SBSQL USING      CC_BOBOSSUTIL.CNUNULL,
                                                NUCONTRATO,
                                                NUCONTRATISTA,
                                                SBDESCRIPCION,
                                                NUTIPO,
                                                DTFECHAINICIAL,
                                                DTFECHAFINAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTCONTRATOS;
    
    























    PROCEDURE OBTACTABASE
    (
        ISBACTA             IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUACTA                  GE_ACTA.ID_ACTA%TYPE;
        SBACTAS                 GE_BOUTILITIES.STYSTATEMENT;
        

    BEGIN

        LLENARATRIBUTOSACTA(SBACTAS);

        NUACTA := TO_NUMBER(ISBACTA);

        SBSQL :=  ' SELECT ' || SBACTAS   ||CHR(10)||
                  ' FROM    GE_ACTA '                   ||CHR(10)||
                  ' WHERE   GE_ACTA.id_acta = :nuActa' ||
                  ' AND     GE_ACTA.id_tipo_acta IN ( ct_boconstants.fnugetBillingCertiType , ct_boconstants.fnugetLiquidationCertiType)';
        
        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, NUACTA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTACTABASE;
    
    























    PROCEDURE OBTACTAPADRE
    (
        ISBCONTRATO         IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUCONTRATO              GE_CONTRATO.ID_CONTRATO%TYPE;
        SBACTAS                 GE_BOUTILITIES.STYSTATEMENT;
        

    BEGIN

        LLENARATRIBUTOSACTA(SBACTAS);

        NUCONTRATO := TO_NUMBER(ISBCONTRATO);

        SBSQL :=  ' SELECT /*+ index(GE_ACTA IDX_GE_ACTA01)*/ ' ||CHR(10)||
                    SBACTAS   ||CHR(10)||
                  ' FROM    GE_ACTA '                   ||CHR(10)||
                  ' WHERE   GE_ACTA.ID_CONTRATO = :nuContrato' ||
                  ' AND     GE_ACTA.id_tipo_acta IN ( ct_boconstants.fnugetBillingCertiType , ct_boconstants.fnugetLiquidationCertiType)';
        
        OPEN OCUDATACURSOR FOR SBSQL USING NUCONTRATO, NUCONTRATO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTACTAPADRE;
    
    






































    PROCEDURE OBTACTAS
    (
        INUACTA                 IN      GE_ACTA.ID_ACTA%TYPE,
        INUCONTRATO             IN      GE_ACTA.ID_CONTRATO%TYPE,
        INUCONTRATISTA          IN      GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        ISBESTADO               IN      GE_ACTA.ESTADO%TYPE,
        INUTIPOACTA             IN      GE_ACTA.ID_TIPO_ACTA%TYPE,
        INUBASE                 IN      GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        IDTFECHACREAC_INI       IN      GE_ACTA.FECHA_CREACION%TYPE,
        IDTFECHACREAC_FIN       IN      GE_ACTA.FECHA_CREACION%TYPE, 
        IDTFECHAINICI           IN      GE_ACTA.FECHA_INICIO%TYPE,
        IDTFECHAFIN             IN      GE_ACTA.FECHA_FIN%TYPE,
        IDTFECHACIERRE_INI      IN      GE_ACTA.FECHA_CIERRE%TYPE,
        IDTFECHACIERRE_FIN      IN      GE_ACTA.FECHA_CIERRE%TYPE,
        IDTFECHAACTUALIZA_INI  	IN      GE_ACTA.FECHA_ULT_ACTUALIZAC%TYPE,
        IDTFECHAACTUALIZA_FIN 	IN      GE_ACTA.FECHA_ULT_ACTUALIZAC%TYPE,
        INUVALORTOTAL_MIN       IN      GE_ACTA.VALOR_TOTAL%TYPE,
        INUVALORTOTAL_MAX 	    IN      GE_ACTA.VALOR_TOTAL%TYPE,
        INUPERIODO 		        IN      GE_ACTA.ID_PERIODO%TYPE,
        INUNUMEROFISCAL	        IN      GE_ACTA.NUMERO_FISCAL%TYPE,
        INUPERSON               IN      GE_ACTA.PERSON_ID%TYPE,
        OCUDATACURSOR           OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                       VARCHAR2(32767);
        SBACTAS                     GE_BOUTILITIES.STYSTATEMENT;

        NUACTA                      GE_ACTA.ID_ACTA%TYPE;
        NUCONTRATO                  GE_ACTA.ID_CONTRATO%TYPE;
        NUCONTRATISTA               GE_CONTRATISTA.ID_CONTRATISTA%TYPE;
        SBESTADO                    VARCHAR2(2);
        NUTIPOACTA                  GE_ACTA.ID_TIPO_ACTA%TYPE;
        NUBASE                      GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE;
        DTFECHACREAC                GE_ACTA.FECHA_CREACION%TYPE;
        DTFECHACREACFIN             GE_ACTA.FECHA_CREACION%TYPE;
        DTFECHAINICI                GE_ACTA.FECHA_INICIO%TYPE;
        DTFECHAFIN                  GE_ACTA.FECHA_FIN%TYPE;
        DTFECHACIERRE               GE_ACTA.FECHA_CIERRE%TYPE;
        DTFECHACIERREFIN            GE_ACTA.FECHA_CIERRE%TYPE;

        DTFECHAACTUALIZA_INI  	    GE_ACTA.FECHA_ULT_ACTUALIZAC%TYPE;
        DTFECHAACTUALIZA_FIN        GE_ACTA.FECHA_ULT_ACTUALIZAC%TYPE;

        NUVALORTOTAL                GE_ACTA.VALOR_TOTAL%TYPE;
        NUVALORTOTALFIN             GE_ACTA.VALOR_TOTAL%TYPE;
        
        NUPERIODO 		            GE_ACTA.ID_PERIODO%TYPE;
        NUNUMEROFISCAL	            GE_ACTA.NUMERO_FISCAL%TYPE;

        NUPERSON_ID                 GE_ACTA.PERSON_ID%TYPE;
        

    BEGIN
        UT_TRACE.TRACE('INICIO Ge_BofwCertifContratista.obtActas',5);


        NUACTA                  := NVL(INUACTA, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUCONTRATO              := NVL(INUCONTRATO, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUCONTRATISTA           := NVL(INUCONTRATISTA, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        SBESTADO                := TRIM (UPPER(NVL(ISBESTADO, CC_BOCONSTANTS.CSBNULLSTRING )));
        NUTIPOACTA              := NVL(INUTIPOACTA, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUBASE                  := NVL(INUBASE, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUPERSON_ID             := NVL(INUPERSON, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        
        DTFECHACREAC            := TRUNC(NVL (IDTFECHACREAC_INI, UT_DATE.FDTMINDATE));
        DTFECHACREACFIN         := TRUNC(NVL (IDTFECHACREAC_FIN, UT_DATE.FDTMAXDATE));
        DTFECHAINICI            := TRUNC(NVL (IDTFECHAINICI, UT_DATE.FDTMINDATE));
        DTFECHAFIN              := TRUNC(NVL (IDTFECHAFIN, UT_DATE.FDTMAXDATE));
        DTFECHACIERRE           := TRUNC(NVL (IDTFECHACIERRE_INI, UT_DATE.FDTMINDATE));
        DTFECHACIERREFIN        := TRUNC(NVL (IDTFECHACIERRE_FIN, UT_DATE.FDTMAXDATE));
        DTFECHAACTUALIZA_INI    := TRUNC(NVL (IDTFECHAACTUALIZA_INI, UT_DATE.FDTMINDATE));
        DTFECHAACTUALIZA_FIN    := TRUNC(NVL (IDTFECHAACTUALIZA_FIN, UT_DATE.FDTMAXDATE));
        NUVALORTOTAL            := NVL(INUVALORTOTAL_MIN, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUVALORTOTALFIN         := NVL(INUVALORTOTAL_MAX, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUPERIODO               := NVL(INUPERIODO, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUNUMEROFISCAL          := NVL(INUNUMEROFISCAL, CC_BOCONSTANTS.CNUAPPLICATIONNULL );


        LLENARATRIBUTOSACTA(SBACTAS);
        

        SBSQL := ' SELECT /*+ index(GE_ACTA IDX_GE_ACTA01)*/ '|| CHR(10)||
                   SBACTAS   ||CHR(10)||
                 ' FROM     GE_ACTA, '      ||CHR(10)||
                 '          GE_CONTRATO '   ||CHR(10)||
                 ' WHERE    GE_ACTA.id_contrato = GE_CONTRATO.id_contrato' ||
                 ' AND     GE_ACTA.id_tipo_acta IN ( ct_boconstants.fnugetBillingCertiType , ct_boconstants.fnugetLiquidationCertiType)';

        
        IF NUACTA != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.id_acta = '|| NUACTA ||CHR(10);
        END IF;

        
        IF NUCONTRATO != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.id_contrato = '|| NUCONTRATO ||CHR(10);
        END IF;
        
        
        IF NUCONTRATISTA != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_CONTRATO.id_contratista = '|| NUCONTRATISTA ||CHR(10);
        END IF;
        
        
        CT_BOCONTRSECURITY.LOADSECURITYSETTINGS(CT_BOCONSTANTS.CSBSEC_INFO_TYPE_GENERAL);

        IF (CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE
        OR CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_AUX_ROLE) THEN
            
            SBSQL := SBSQL ||' AND CT_BOContrSecurity.fnuCanManageContract(ge_acta.id_contrato) = 1 '||CHR(10);
        END IF;

        
        IF SBESTADO != CC_BOCONSTANTS.CSBNULLSTRING THEN
            SBSQL := SBSQL ||' AND upper(GE_ACTA.estado) LIKE upper('||CHR(39)||'%'||SBESTADO||'%'||CHR(39)||')'||CHR(10);
        END IF;
        
        
        IF NUTIPOACTA != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.id_tipo_acta = '||NUTIPOACTA||CHR(10);
        END IF;
        
        
        IF NUBASE != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.id_base_administrativa = '|| NUBASE||CHR(10);
        END IF;
        
        
        IF NUPERSON_ID != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.person_id = '|| NUPERSON_ID||CHR(10);
        END IF;
        
        
        IF DTFECHAINICI != TRUNC(UT_DATE.FDTMINDATE) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_inicio) = '||CHR(39)||DTFECHAINICI||CHR(39)||CHR(10);
        END IF;
        
        
        IF DTFECHAFIN != TRUNC(UT_DATE.FDTMAXDATE) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_fin) = '||CHR(39)||DTFECHAFIN||CHR(39)||CHR(10);
        END IF;

        
        
        IF DTFECHACREAC != TRUNC(UT_DATE.FDTMINDATE) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_creacion) >= '|| CHR(39)|| DTFECHACREAC || CHR(39)|| CHR(10);
        END IF;

        
        IF DTFECHACREACFIN != TRUNC(UT_DATE.FDTMAXDATE ) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_creacion) <= ' || CHR(39)|| DTFECHACREACFIN || CHR(39)|| CHR(10);
        END IF;
        
        
        
        IF DTFECHACIERRE != TRUNC(UT_DATE.FDTMINDATE) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_cierre) >= '|| CHR(39)|| DTFECHACIERRE ||CHR(39)|| CHR(10);
        END IF;

        
        IF DTFECHACIERREFIN != TRUNC(UT_DATE.FDTMAXDATE) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_cierre) <= '|| CHR(39)|| DTFECHACIERREFIN ||CHR(39)|| CHR(10);
        END IF;
        
        
        
        IF DTFECHAACTUALIZA_INI != TRUNC(UT_DATE.FDTMINDATE) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_ult_actualizac) >= '|| CHR(39)|| DTFECHAACTUALIZA_INI ||CHR(39)|| CHR(10);
        END IF;

        
        IF DTFECHAACTUALIZA_FIN != TRUNC(UT_DATE.FDTMAXDATE) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_ult_actualizac) <= '|| CHR(39)|| DTFECHAACTUALIZA_FIN ||CHR(39)|| CHR(10);
        END IF;
        
        
        
        IF NUVALORTOTAL != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.valor_total >= ' || NUVALORTOTAL;
        END IF;
        
        IF NUVALORTOTALFIN != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.valor_total <= ' || NUVALORTOTALFIN;
        END IF;
        

        IF NUPERIODO != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.id_periodo = ' || NUPERIODO;
        END IF;

        IF NUNUMEROFISCAL != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.numero_fiscal = ' || NUNUMEROFISCAL;
        END IF;

        

        UT_TRACE.TRACE(SBSQL,10);
        
        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL;

        UT_TRACE.TRACE('FIN Ge_BofwCertifContratista.obtActas',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTACTAS;
    
    






















    PROCEDURE OBTDETALLEACTABASE
    (
        ISBACTA             IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUACTA                  GE_ACTA.ID_ACTA%TYPE;
        SBDETALLEACTA           GE_BOUTILITIES.STYSTATEMENT;
        

    BEGIN

        LLENARATRIBUTOSDETALLEACTA(SBDETALLEACTA);

        NUACTA := TO_NUMBER(ISBACTA);

        SBSQL :=  ' SELECT /*+ index(GE_DETALLE_ACTA IDX_GE_DETALLE_ACTA_01)*/ ' ||CHR(10)||
                    SBDETALLEACTA                               ||CHR(10)||
                  ' FROM    GE_DETALLE_ACTA  '                  ||CHR(10)||
                  ' WHERE   GE_DETALLE_ACTA.ID_ACTA= :nuActa '  ||CHR(10)||
                  ' GROUP BY id_acta,ID_ITEMS,condition_by_plan_id,descripcion_items,valor_unitario,id_unidad_medida,tipo_generacion,porcen_cumplimiento,porcen_ponderado,comment_'||CHR(10)||
                  ' ORDER BY descripcion_items';

         UT_TRACE.TRACE('--sbSql = '||SBSQL,40);

         
         OPEN OCUDATACURSOR FOR SBSQL USING ISBACTA, NUACTA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTDETALLEACTABASE;
    
    





















    PROCEDURE OBTDETALLEORDASOC
    (
        ISBACTA             IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUACTA                  GE_ACTA.ID_ACTA%TYPE;
        SBORDASOC               GE_BOUTILITIES.STYSTATEMENT;
        

    BEGIN

        LLENARATRIBUTOSORDASOC(SBORDASOC);

        NUACTA := TO_NUMBER(ISBACTA);

        SBSQL :=  ' SELECT ' || SBORDASOC                       ||CHR(10)||
                  ' FROM    OR_ORDER , CT_ORDER_CERTIFICA '     ||CHR(10)||
                  ' WHERE   OR_ORDER.ORDER_ID = CT_ORDER_CERTIFICA.ORDER_ID ' ||CHR(10)||
                  ' AND CT_ORDER_CERTIFICA.CERTIFICATE_ID = :nuActa ';

         OPEN OCUDATACURSOR FOR SBSQL USING ISBACTA, NUACTA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTDETALLEORDASOC;
    
    



















    PROCEDURE OBTCONTRATISTAPORCONTRATO
    (
        INUCONTRATO         IN      GE_CONTRATO.ID_CONTRATO%TYPE,
        ONUCONTRATISTA      OUT     GE_CONTRATO.ID_CONTRATISTA%TYPE
    )
    IS
    BEGIN
        ONUCONTRATISTA := DAGE_CONTRATO.FNUGETID_CONTRATISTA(INUCONTRATO);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTCONTRATISTAPORCONTRATO;
    
    



















    PROCEDURE OBTCONTRATOPORACTA
    (
        INUACTA             IN      GE_ACTA.ID_ACTA%TYPE,
        ONUCONTRATO         OUT     GE_ACTA.ID_CONTRATO%TYPE
    )
    IS
    BEGIN
        ONUCONTRATO := DAGE_ACTA.FNUGETID_CONTRATO(INUACTA);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTCONTRATOPORACTA;
    
    



















    PROCEDURE OBTORDENESINSPECC
    (
        ISBORDER             IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUORDER                  OR_ORDER.ORDER_ID%TYPE;
        SBORDINSPE               GE_BOUTILITIES.STYSTATEMENT;

    BEGIN

        LLENARATRIBUTOSORDASOC(SBORDINSPE);

        NUORDER := TO_NUMBER(ISBORDER);

        SBSQL :=  ' SELECT ' || SBORDINSPE                      ||CHR(10)||
                  ' FROM    OR_ORDER, '                         ||CHR(10)||
                  '         OR_RELATED_ORDER '                  ||CHR(10)||
                  ' WHERE   OR_ORDER.order_id =  OR_RELATED_ORDER.related_order_id' ||CHR(10)||
                  ' AND     OR_RELATED_ORDER.order_id = :nuOrder ' ||CHR(10)||
                  ' AND     OR_RELATED_ORDER.rela_order_type_id = ge_boconstants.fnuGetTipoTransInsp';
                  UT_TRACE.TRACE(SBSQL,12);
         OPEN OCUDATACURSOR FOR SBSQL USING ISBORDER, NUORDER;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTORDENESINSPECC;
    
    





















    PROCEDURE VALIDARACTA
    IS
        NUACTA                      GE_ACTA.ID_ACTA%TYPE;
        SBINSTANCE                  VARCHAR2(300);

    BEGIN

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,
            NULL, 'CT_FW_ACTA', 'ID_ACTA', NUACTA);

        
        UT_TRACE.TRACE('Estado: ' || DAGE_ACTA.FSBGETESTADO(NUACTA) || ' - ' || GE_BOCONSTANTS.CSBACTA_CERRADA, 12);
        IF DAGE_ACTA.FSBGETESTADO(NUACTA) = GE_BOCONSTANTS.CSBACTA_CERRADA THEN
            GE_BOERRORS.SETERRORCODE(CSBERRORESTADO);
        END IF;

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTANCE);
        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE
        (
            SBINSTANCE,NULL,'GE_ACTA','FECHA_CREACION',
            TO_CHAR(DAGE_ACTA.FDTGETFECHA_INICIO(NUACTA), UT_DATE.FSBDATE_FORMAT)
        );

        
        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE
        (  SBINSTANCE,NULL,'GE_ACTA','FECHA_FIN',
           TO_CHAR(DAGE_ACTA.FDTGETFECHA_FIN(NUACTA), UT_DATE.FSBDATE_FORMAT)
        );
        

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDARACTA;
    
    

























    PROCEDURE VALIDARFECHA
    IS
        DTFECHAFINAL              DATE;
        SBFECHA_FINAL             GE_BOINSTANCECONTROL.STYSBVALUE;
        NUACTA                    GE_ACTA.ID_ACTA%TYPE;
        RCACTA                    DAGE_ACTA.STYGE_ACTA;
    BEGIN
        

        SBFECHA_FINAL := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('GE_ACTA','FECHA_FIN');
        DTFECHAFINAL    := TO_DATE(SBFECHA_FINAL, UT_DATE.FSBDATE_FORMAT);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,
                                                NULL, 'CT_FW_ACTA', 'ID_ACTA', NUACTA);

        DAGE_ACTA.GETRECORD(NUACTA,RCACTA);

        IF RCACTA.ID_TIPO_ACTA = CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE THEN

            IF (DTFECHAFINAL IS NULL) THEN
                GE_BOERRORS.SETERRORCODE(CNUERRORFECFINREQ);
                RAISE EX.CONTROLLED_ERROR;
                RETURN;
            END IF;

            
            IF(DTFECHAFINAL > UT_DATE.FDTSYSDATE) THEN
                GE_BOERRORS.SETERRORCODE(CNUERRORFECHAMAYOR);
                RAISE EX.CONTROLLED_ERROR;
                RETURN;
            END IF;

             
            IF(DTFECHAFINAL < RCACTA.FECHA_INICIO) THEN
                GE_BOERRORS.SETERRORCODE(CNUERRRFECMNINI);
                RAISE EX.CONTROLLED_ERROR;
                RETURN;
            END IF;

            
            IF(DTFECHAFINAL > RCACTA.FECHA_FIN) THEN
                GE_BOERRORS.SETERRORCODE(CNUERRRFECMAYFINOR);
                RAISE EX.CONTROLLED_ERROR;
                RETURN;
            END IF;
        ELSIF RCACTA.ID_TIPO_ACTA = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE THEN
            
            IF (DTFECHAFINAL <> RCACTA.FECHA_FIN) THEN
                
                ERRORS.SETERROR(6883);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDARFECHA;
    
    


























    PROCEDURE EJECUTARCIERREACTA
    IS
        DTFECHAFINAL              DATE;
        SBFECHA_FINAL             GE_BOINSTANCECONTROL.STYSBVALUE;
        NUACTA                    GE_ACTA.ID_ACTA%TYPE;

        SBFLAG                    GE_BOINSTANCECONTROL.STYSBVALUE;

        CNUERROR_NO_DETAILS       GE_MESSAGE.MESSAGE_ID%TYPE := 6762;
    BEGIN
        UT_TRACE.TRACE('Inicio EjecutarCierreActa',12);

        GE_BOFWCERTIFCONTRATISTA.VALIDARFECHA();

        SBFECHA_FINAL   := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE
                            (
                                'GE_ACTA',
                                'FECHA_FIN'
                            );

        SBFLAG          := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE
                            (
                                'GE_ACTA',
                                'ESTADO'
                            );
        DTFECHAFINAL    := TO_DATE(SBFECHA_FINAL, UT_DATE.FSBDATE_FORMAT);
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,
            NULL, 'CT_FW_ACTA', 'ID_ACTA', NUACTA);
        UT_TRACE.TRACE('dtFechaFinal: ' || DTFECHAFINAL|| ' - ' || SBFECHA_FINAL,12);

        
        GE_BOCERTIFICATE.LOCKCERTIFICATEBYPK(NUACTA);
        
        IF NOT CT_BCCERTIFICATE.FBLHASDETAILS(NUACTA) THEN
            
            ERRORS.SETERROR(CNUERROR_NO_DETAILS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;


        GE_BOCERTIFCONTRATISTA.CERRARACTA
        (
            NUACTA,
            DTFECHAFINAL,
            SBFLAG
        );
        COMMIT;
        
        UT_TRACE.TRACE('FIN EjecutarCierreActa',12);


        GE_BOIOPENEXECUTABLE.SETONEVENT(CNUEXECUTABLE_REP, 'POST_REGISTER' );
        PROCESOPOSTCERRARACTA(NUACTA);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
    END EJECUTARCIERREACTA;
    
    

















    PROCEDURE LOADINSTACECONTRACTDATA
    (
        INUCONTRACTID  IN GE_CONTRATO.ID_CONTRATO%TYPE
    )
    IS
    BEGIN
        IF (NOT(GE_BOINSTANCECONTROL.FBLISINITINSTANCECONTROL)) THEN
            
            GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
            
            GE_BOINSTANCECONTROL.CREATEINSTANCE(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,
                                                NULL);
        END IF;
        
        GE_BOINSTANCECONTROL.LOADENTITYOLDVALUESID(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,
                                                   NULL,
                                                   'GE_CONTRATO',
                                                   INUCONTRACTID,
                                                   FALSE,
                                                   FALSE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADINSTACECONTRACTDATA;

    
















    
    PROCEDURE GETADJUSTMENTORDER
    (
        ISBORDER            IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        
        SBSQL               VARCHAR2(32767);
        NUORDER             NUMBER; 
        SBADJORD            GE_BOUTILITIES.STYSTATEMENT;
    BEGIN
        
        UT_TRACE.TRACE('INICIO Ge_BoFwCertifContratista.getAdjustmentOrder',10);
        LLENARATRIBUTOSORDASOC(SBADJORD);

        NUORDER := TO_NUMBER(ISBORDER);

        SBSQL :=  ' SELECT ' || SBADJORD ||CHR(10)||
                  ' FROM    OR_ORDER, OR_RELATED_ORDER ' ||CHR(10)||
                  ' WHERE   OR_ORDER.order_id =  OR_RELATED_ORDER.related_order_id' ||CHR(10)||
                  ' AND     OR_RELATED_ORDER.order_id = :nuOrder ' ||CHR(10)||
                  ' AND     OR_RELATED_ORDER.rela_order_type_id = ge_boconstants.fnuGetTransTypeAdjOrder';

        UT_TRACE.TRACE(SBSQL,12);
        OPEN OCUDATACURSOR FOR SBSQL USING ISBORDER, NUORDER;

        UT_TRACE.TRACE('FIN Ge_BoFwCertifContratista.getAdjustmentOrder',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETADJUSTMENTORDER;
    
    

















    PROCEDURE FILLSTATUSCERTIFIATTRIBUTES
    (
        IOSBCERTIFICATE       IN OUT      GE_BOUTILITIES.STYSTATEMENT
    )
    IS
        SBCERTIFICATETYPE           GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBCONTRACT                  GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBCONTRACTOR                GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBCOMMENTTYPE               GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBPERSON                    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBOPERATINGUNIT             GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        IF IOSBCERTIFICATE IS NOT NULL THEN
            RETURN;
        END IF;

        
        SBCERTIFICATETYPE  := 'GE_ACTA.ID_TIPO_ACTA ' || GE_BOUTILITIES.CSBSEPARATOR ||' ct_boconstants.fsbGetDescCertificateType(GE_ACTA.ID_TIPO_ACTA)';
        SBCONTRACT         := 'GE_ACTA.ID_CONTRATO ' || GE_BOUTILITIES.CSBSEPARATOR ||' dage_contrato.fsbGetDescripcion(GE_ACTA.ID_CONTRATO,0)';
        SBCONTRACTOR       := 'GE_ACTA.CONTRACTOR_ID ' || GE_BOUTILITIES.CSBSEPARATOR ||' dage_contratista.fsbGetNombre_Contratista(GE_ACTA.CONTRACTOR_ID,0)';
        SBCOMMENTTYPE      := 'GE_ACTA.COMMENT_TYPE_ID ' || GE_BOUTILITIES.CSBSEPARATOR ||' dage_comment_type.fsbgetdescription(GE_ACTA.COMMENT_TYPE_ID,0)';
        SBPERSON           := 'GE_ACTA.PERSON_ID ' || GE_BOUTILITIES.CSBSEPARATOR || ' dage_person.fsbGetName_(GE_ACTA.PERSON_ID,0)';
        SBOPERATINGUNIT    := 'GE_ACTA.OPERATING_UNIT_ID ' || GE_BOUTILITIES.CSBSEPARATOR || ' daor_operating_unit.fsbGetName(GE_ACTA.OPERATING_UNIT_ID,0)';
        
        

        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.ID_ACTA','ID_ACTA',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.NOMBRE','NOMBRE',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCONTRACT,'ID_CONTRATO',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCONTRACTOR,'CONTRACTOR_ID',IOSBCERTIFICATE);

        GE_BOUTILITIES.ADDATTRIBUTE (SBCERTIFICATETYPE,'ID_TIPO_ACTA',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.VALOR_TOTAL','VALOR_TOTAL',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.VALUE_ADVANCE','VALUE_ADVANCE',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.FECHA_CREACION','FECHA_CREACION',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.FECHA_INICIO','FECHA_INICIO',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.FECHA_FIN','FECHA_FIN',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE (SBOPERATINGUNIT,'OPERATING_UNIT_ID',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE (SBPERSON,'PERSON_ID',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.TERMINAL','TERMINAL',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE (SBCOMMENTTYPE,'COMMENT_TYPE_ID',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE ('GE_ACTA.COMMENT_','COMMENT_',IOSBCERTIFICATE);
        GE_BOUTILITIES.ADDATTRIBUTE ('decode(GE_ACTA.ESTADO, ge_boconstants.fsbGetActaAbierta,''Abierta'',''Cerrada'')','ESTADO',IOSBCERTIFICATE);


       
        GE_BOUTILITIES.ADDATTRIBUTE (':parent_id', 'parent_id',IOSBCERTIFICATE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLSTATUSCERTIFIATTRIBUTES;
    
    




















    PROCEDURE GETSTATUSCERTIFICATE
    (
        ISBCERTIFICATE      IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUCERTIFICATE           GE_ACTA.ID_ACTA%TYPE;
        SBCERTIFICATE           GE_BOUTILITIES.STYSTATEMENT;
    BEGIN

        FILLSTATUSCERTIFIATTRIBUTES(SBCERTIFICATE);

        NUCERTIFICATE := TO_NUMBER(ISBCERTIFICATE);

        SBSQL :=  ' SELECT ' || SBCERTIFICATE   ||CHR(10)||
                  ' FROM    GE_ACTA '                   ||CHR(10)||
                  ' WHERE   GE_ACTA.id_acta = :nuCertificate' ||
                  ' AND     GE_ACTA.id_tipo_acta IN ( ct_boconstants.fnugetActivateCertiType,
                                                     ct_boconstants.fnugetCancelCertiType,
                                                     ct_boconstants.fnugetChangeCertiType,
                                                     ct_boconstants.fnugetOpenCertiType,
                                                     ct_boconstants.fnugetInactivateCertiType,
                                                     ct_boconstants.fnugetSuspendCertiType)';
                  
        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, NUCERTIFICATE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSTATUSCERTIFICATE;
    
    

























    PROCEDURE GETSTATUSCERTIFICATES
    (
        INUCERTIFICATE        IN  GE_ACTA.ID_ACTA%TYPE,
        INUCONTRACT           IN  GE_ACTA.ID_CONTRATO%TYPE,
        INUCONTRACTOR         IN  GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUCERTIFICATETYPE    IN  GE_ACTA.ID_TIPO_ACTA%TYPE,
        IDTCREACDATEINI       IN  GE_ACTA.FECHA_CREACION%TYPE,
        IDTCREACDATEFIN       IN  GE_ACTA.FECHA_CREACION%TYPE,
        OCUDATACURSOR         OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                       VARCHAR2(32767);
        SBCERTIFICATE               GE_BOUTILITIES.STYSTATEMENT;

        NUCERTIFICATE               GE_ACTA.ID_ACTA%TYPE;
        NUCONTRACT                  GE_ACTA.ID_CONTRATO%TYPE;
        NUCONTRACTOR                GE_CONTRATISTA.ID_CONTRATISTA%TYPE;
        NUCERTIFICATETYPE           GE_ACTA.ID_TIPO_ACTA%TYPE;
        DTCREACDATEINI              GE_ACTA.FECHA_CREACION%TYPE;
        DTCREACDATEFIN              GE_ACTA.FECHA_CREACION%TYPE;

    BEGIN
        UT_TRACE.TRACE('INICIO Ge_BofwCertifContratista.getStatusCertificates',5);


        NUCERTIFICATE       := NVL(INUCERTIFICATE, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUCONTRACT          := NVL(INUCONTRACT, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUCONTRACTOR        := NVL(INUCONTRACTOR, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        NUCERTIFICATETYPE   := NVL(INUCERTIFICATETYPE, CC_BOCONSTANTS.CNUAPPLICATIONNULL );
        DTCREACDATEINI      := TRUNC(NVL (IDTCREACDATEINI, UT_DATE.FDTMINDATE));
        DTCREACDATEFIN      := TRUNC(NVL (IDTCREACDATEFIN, UT_DATE.FDTMAXDATE));

        FILLSTATUSCERTIFIATTRIBUTES(SBCERTIFICATE);

        SBSQL := ' SELECT /*+ index(GE_ACTA IDX_GE_ACTA01)*/ '|| CHR(10)||
                   SBCERTIFICATE   ||CHR(10)||
                 ' FROM     GE_ACTA '   ||CHR(10)||
                 ' WHERE    GE_ACTA.id_tipo_acta IN ( ct_boconstants.fnugetActivateCertiType,
                                                     ct_boconstants.fnugetCancelCertiType,
                                                     ct_boconstants.fnugetChangeCertiType,
                                                     ct_boconstants.fnugetOpenCertiType,
                                                     ct_boconstants.fnugetInactivateCertiType,
                                                     ct_boconstants.fnugetSuspendCertiType)';

        
        IF NUCERTIFICATE != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.id_acta = '|| NUCERTIFICATE ||CHR(10);
        END IF;

        
        IF NUCONTRACT != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.id_contrato = '|| NUCONTRACT ||CHR(10);
        END IF;

        
        IF NUCONTRACTOR != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.contractor_id = '|| NUCONTRACTOR ||CHR(10);
        END IF;

        
        IF NUCERTIFICATETYPE != CC_BOCONSTANTS.CNUAPPLICATIONNULL THEN
            SBSQL := SBSQL ||' AND GE_ACTA.id_tipo_acta = '||NUCERTIFICATETYPE||CHR(10);
        END IF;

        
        
        IF DTCREACDATEINI != TRUNC(UT_DATE.FDTMINDATE) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_creacion) >= '|| CHR(39)|| DTCREACDATEINI || CHR(39)|| CHR(10);
        END IF;

        
        IF DTCREACDATEFIN != TRUNC(UT_DATE.FDTMAXDATE ) THEN
            SBSQL := SBSQL ||' AND trunc(GE_ACTA.fecha_creacion) <= ' || CHR(39)|| DTCREACDATEFIN || CHR(39)|| CHR(10);
        END IF;

        UT_TRACE.TRACE(SBSQL,10);

        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL;

        UT_TRACE.TRACE('FIN Ge_BofwCertifContratista.getStatusCertificates',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSTATUSCERTIFICATES;
    
    




















    PROCEDURE GETCERTIFICATESBYCONTRACTOR
    (
        ISBCONTRACTOR         IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUCONTRACTOR              GE_CONTRATO.ID_CONTRATO%TYPE;
        SBCERTIFICATE           GE_BOUTILITIES.STYSTATEMENT;
    BEGIN

        FILLSTATUSCERTIFIATTRIBUTES(SBCERTIFICATE);

        NUCONTRACTOR := TO_NUMBER(ISBCONTRACTOR);

        SBSQL :=  ' SELECT /*+ index(GE_ACTA IDX_GE_ACTA01)*/ ' ||CHR(10)||
                    SBCERTIFICATE   ||CHR(10)||
                  ' FROM    GE_ACTA '                   ||CHR(10)||
                  ' WHERE   GE_ACTA.CONTRACTOR_ID = :nuContractor' ||
                  ' AND     GE_ACTA.id_tipo_acta IN ( ct_boconstants.fnugetActivateCertiType,
                                                     ct_boconstants.fnugetCancelCertiType,
                                                     ct_boconstants.fnugetChangeCertiType,
                                                     ct_boconstants.fnugetOpenCertiType,
                                                     ct_boconstants.fnugetInactivateCertiType,
                                                     ct_boconstants.fnugetSuspendCertiType)';

        OPEN OCUDATACURSOR FOR SBSQL USING NUCONTRACTOR, NUCONTRACTOR;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCERTIFICATESBYCONTRACTOR;
    
        




















    PROCEDURE GETCERTIFICATESBYCONTRACT
    (
        ISBCONTRACT         IN VARCHAR2,
        OCUDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL                   VARCHAR2(32767);
        NUCONTRACT              GE_CONTRATO.ID_CONTRATO%TYPE;
        SBCERTIFICATE           GE_BOUTILITIES.STYSTATEMENT;
    BEGIN

        FILLSTATUSCERTIFIATTRIBUTES(SBCERTIFICATE);

        NUCONTRACT := TO_NUMBER(ISBCONTRACT);

        SBSQL :=  ' SELECT /*+ index(GE_ACTA IDX_GE_ACTA01)*/ ' ||CHR(10)||
                    SBCERTIFICATE   ||CHR(10)||
                  ' FROM    GE_ACTA '                   ||CHR(10)||
                  ' WHERE   GE_ACTA.id_contrato = :nuContract' ||
                  ' AND     GE_ACTA.id_tipo_acta IN (ct_boconstants.fnugetActivateCertiType,
                                                     ct_boconstants.fnugetCancelCertiType,
                                                     ct_boconstants.fnugetChangeCertiType,
                                                     ct_boconstants.fnugetOpenCertiType,
                                                     ct_boconstants.fnugetInactivateCertiType,
                                                     ct_boconstants.fnugetSuspendCertiType)';

        OPEN OCUDATACURSOR FOR SBSQL USING NUCONTRACT, NUCONTRACT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCERTIFICATESBYCONTRACT;
    
    




















    PROCEDURE GETCONTRACTORBYCERTIFICATE
    (
        INUCERTIFICATE      IN      GE_ACTA.ID_ACTA%TYPE,
        ONUCONTRACTOR       OUT     GE_ACTA.CONTRACTOR_ID%TYPE
    )
    IS
    BEGIN
        ONUCONTRACTOR := DAGE_ACTA.FNUGETCONTRACTOR_ID(INUCERTIFICATE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCONTRACTORBYCERTIFICATE;
    
     




















    PROCEDURE GETCONTRACTBYCERTIFICATE
    (
        INUCERTIFICATE      IN      GE_ACTA.ID_ACTA%TYPE,
        ONUCONTRACT         OUT     GE_ACTA.ID_CONTRATO%TYPE
    )
    IS
    BEGIN
        ONUCONTRACT := DAGE_ACTA.FNUGETID_CONTRATO(INUCERTIFICATE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCONTRACTBYCERTIFICATE;

    


















    PROCEDURE FILLOPERATINGUNITATTRIBUTES
    IS

    BEGIN

        SBATTRIBUTES := '';

      	CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.OPERATING_UNIT_ID',    'OPERATING_UNIT_ID',     CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES, TRUE);
    	CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.OPER_UNIT_CODE',       'OPER_UNIT_CODE',        CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.NAME',                 'NAME',                  CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID, null, null,
             OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID ||'||CHR(39)||' - '||CHR(39)||
            '||DAOR_OPER_UNIT_CLASSIF.fsbGetDescription(OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID))',
            'OPER_UNIT_CLASSIF_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        
        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.ASSO_OPER_UNIT, null, null,
             OR_OPERATING_UNIT.ASSO_OPER_UNIT ||'||CHR(39)||' - '||CHR(39)||
            '||DAOR_OPERATING_UNIT.fsbGetName(OR_OPERATING_UNIT.ASSO_OPER_UNIT))',
            'ASSO_OPER_UNIT',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

         CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.FATHER_OPER_UNIT_ID, null, null,
             OR_OPERATING_UNIT.FATHER_OPER_UNIT_ID ||'||CHR(39)||' - '||CHR(39)||
            '||DAOR_OPERATING_UNIT.fsbGetName(OR_OPERATING_UNIT.FATHER_OPER_UNIT_ID))',
            'FATHER_OPER_UNIT_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.PERSON_IN_CHARGE, null, null,
             OR_OPERATING_UNIT.PERSON_IN_CHARGE ||'||CHR(39)||' - '||CHR(39)||
            '||DAGE_PERSON.fsbGetName_(OR_OPERATING_UNIT.PERSON_IN_CHARGE))',
            'PERSON_IN_CHARGE',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.EVAL_LAST_DATE',       'EVAL_LAST_DATE',        CC_BOBOSSUTIL.CNUDATE,     SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.SUBSCRIBER_ID, null, null,
               DAGE_IDENTIFICA_TYPE.FSBGETDESCRIPTION(DAGE_SUBSCRIBER.FNUGETIDENT_TYPE_ID(OR_OPERATING_UNIT.SUBSCRIBER_ID))||'||CHR(39)||' - '||CHR(39)||
                '||DAGE_SUBSCRIBER.FSBGETIDENTIFICATION(OR_OPERATING_UNIT.SUBSCRIBER_ID))',
            'SUBSCRIBER_ID', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.VEHICLE_NUMBER_PLATE', 'VEHICLE_NUMBER_PLATE',  CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.OPER_UNIT_STATUS_ID, null, null,
             OR_OPERATING_UNIT.OPER_UNIT_STATUS_ID ||'||CHR(39)||' - '||CHR(39)||
            '||DAOR_OPER_UNIT_STATUS.fsbGetDescription(OR_OPERATING_UNIT.OPER_UNIT_STATUS_ID))',
            'OPER_UNIT_STATUS_ID',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.VALID_FOR_ASSIGN,''Y'',''Si'',''No'')','VALID_FOR_ASSIGN', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.GEN_ADMIN_ORDER,''Y'',''Si'',''No'')','GEN_ADMIN_ORDER', CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.NOTIFICABLE,''Y'',''Si'',''No'')',    'NOTIFICABLE',     CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (            'decode(OR_OPERATING_UNIT.OPERATING_CENTER_ID, null, null,
             OR_OPERATING_UNIT.OPERATING_CENTER_ID ||'||CHR(39)||' - '||CHR(39)||
            '||DAGE_CENTRO_OPERATIVO.fsbGetDescripcion(OR_OPERATING_UNIT.OPERATING_CENTER_ID))',
         'CENTRO_OPER_ID',  CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.ADMIN_BASE_ID, null, null,
             OR_OPERATING_UNIT.ADMIN_BASE_ID ||'||CHR(39)||' - '||CHR(39)||
            '||DAGE_BASE_ADMINISTRA.fsbGetDescripcion(OR_OPERATING_UNIT.ADMIN_BASE_ID))',
         'ADMIN_BASE_ID',  CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.OPERATING_ZONE_ID, null, null,
             OR_OPERATING_UNIT.OPERATING_ZONE_ID ||'||CHR(39)||' - '||CHR(39)||
            '||DAOR_OPERATING_ZONE.fsbgetdescription(OR_OPERATING_UNIT.OPERATING_ZONE_ID))',
         'OPERATING_ZONE_ID',  CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE (
            'decode(OR_OPERATING_UNIT.ASSIGN_TYPE, '
            ||CHR(39)||'S'||CHR(39)||', '||CHR(39)||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_S')||CHR(39)||', '
            ||CHR(39)||'C'||CHR(39)||', '||CHR(39)||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_C')||CHR(39)||', '
            ||CHR(39)||'N'||CHR(39)||', '||CHR(39)||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_N')||CHR(39)||','
            ||CHR(39)||'R'||CHR(39)||', '||CHR(39)||GE_BOI18N.FSBGETTRASLATION('ASSIGNED_WITH_R')||CHR(39)||')',
            'ASSIGN_TYPE',     CC_BOBOSSUTIL.CNUVARCHAR2,   SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.ASSIGN_CAPACITY',    'ASSIGN_CAPACITY',                  CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.USED_ASSIGN_CAP',    'USED_ASSIGN_CAP',                  CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.AIU_VALUE_UTIL',       'AIU_VALUE_UTIL',        CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.AIU_VALUE_ADMIN',      'AIU_VALUE_ADMIN',       CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.AIU_VALUE_UNEXPECTED', 'AIU_VALUE_UNEXPECTED',  CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('decode(OR_OPERATING_UNIT.PASSWORD_REQUIRED,''Y'',''Si'',''No'')',    'PASSWORD_REQUIRED',     CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.ADDRESS',              'ADDRESS',               CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.PHONE_NUMBER',         'PHONE_NUMBER',          CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.FAX_NUMBER',           'FAX_NUMBER',            CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.BEEPER',               'BEEPER',                CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.E_MAIL',               'E_MAIL',                CC_BOBOSSUTIL.CNUVARCHAR2, SBATTRIBUTES, TBATTRIBUTES);

        CC_BOBOSSUTIL.ADDATTRIBUTE ('OR_OPERATING_UNIT.CONTRACTOR_ID',        'CONTRACTOR_ID',         CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);
        CC_BOBOSSUTIL.ADDATTRIBUTE (':parent_id',                             'parent_id',             CC_BOBOSSUTIL.CNUNUMBER,   SBATTRIBUTES, TBATTRIBUTES);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLOPERATINGUNITATTRIBUTES;

    















    PROCEDURE GETOPERUNITBASE
    (
        INUOPERUNITID IN NUMBER,
        OCUDATACURSOR OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBHINT   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN
        
        FILLOPERATINGUNITATTRIBUTES;

        
        SBHINT :=  '/*+ index(or_operating_unit pk_or_operating_unit) */';

        
        SBSQL := 'SELECT '|| SBHINT || SBATTRIBUTES ||' FROM /*+ Ge_BofwCertifContratista.getOperUnitBase */'
                 ||CHR(10)||' OR_OPERATING_UNIT '||CHR(10);
        SBSQL := SBSQL||' where OR_OPERATING_UNIT.OPERATING_UNIT_ID = :inuOperUnitId';

        
        UT_TRACE.TRACE(SBSQL,10);

        
        OPEN OCUDATACURSOR FOR SBSQL USING CC_BOBOSSUTIL.CNUNULL, INUOPERUNITID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPERUNITBASE;

    
















    PROCEDURE GETFATHEROPERUNIT
    (
        INUCONTRACTORID IN  NUMBER,
        OCUCURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        SBHINT   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN

        
        FILLOPERATINGUNITATTRIBUTES;

        
        SBHINT :=  '/*+ index(or_operating_unit idx_or_operating_unit10) */';

        
        SBSQL := 'select '|| SBHINT ||SBATTRIBUTES ||CHR(10)||'from OR_OPERATING_UNIT /*+ Ge_BofwCertifContratista.getFatherOperUnit */'||CHR(10);
        SBSQL := SBSQL||'where OR_OPERATING_UNIT.CONTRACTOR_ID = :inuContractorId';

        
        DBMS_OUTPUT.PUT_LINE(SBSQL);

        
        OPEN OCUCURSOR FOR SBSQL USING  NVL(INUCONTRACTORID,GE_BOUTILITIES.CSBNULLSTRING), NVL(INUCONTRACTORID,GE_BOUTILITIES.CSBNULLSTRING);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETFATHEROPERUNIT;

    
















    PROCEDURE GETCONTRACTORBYUDT
    (
        INUOPERUNITID    IN      NUMBER,
        ONUCONTRACTORID  OUT     NUMBER
    )
    IS

    BEGIN

        
        ONUCONTRACTORID := DAOR_OPERATING_UNIT.FNUGETCONTRACTOR_ID(INUOPERUNITID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCONTRACTORBYUDT;

    

















    PROCEDURE GETOPERUNITORDERWCERT
    (
        INUORDERID   IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        OCUCURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS
      SBSQL                           GE_BOUTILITIES.STYSTATEMENT;
      SBORDERATTRIBUTES               GE_BOUTILITIES.STYSTATEMENT;
      SBRECORDBIND                    GE_BOUTILITIES.STYSTATEMENT;
      CUCURSOR                        CONSTANTS.TYREFCURSOR;
      SBUSING                         GE_BOUTILITIES.STYSTATEMENT;
    BEGIN

        
        LLENARATRIBUTOSORDASOC(SBORDERATTRIBUTES);

        
        SBSQL :=
         'SELECT /*+ index(or_order pk_or_order)        '||CHR(10)||
         '           leading(or_order)                  '||CHR(10)||
         '           use_nl(or_order ct_excluded_order) '||CHR(10)||
         '           use_nl(ct_excluded_order ec)*/'||CHR(10)|| SBORDERATTRIBUTES ||CHR(10)||
         '     , ct_excluded_order.final_exclusion_date '||CHR(10)||
         '     , ec.comment_type_id||''-''||dage_comment_type.fsbgetdescription(ec.comment_type_id, 0)||''-''||ec.order_comment exclusion_comment'||CHR(10)||
         '     , or_order.defined_contract_id '||CHR(10)||
         '  FROM or_order, ct_excluded_order, or_order_comment ec'||CHR(10)||
                 '       /*+ Ge_BofwCertifContratista.getOperUnitOrderWCert*/ '|| CHR(10)||
                 ' WHERE or_order.order_id = :inuOrderId AND ct_excluded_order.order_id (+) = or_order.order_id'|| CHR(10)||
                 '   AND ct_excluded_order.order_comment_id = ec.order_comment_id (+)';

        UT_TRACE.TRACE(SBSQL, 1);
        
        
        OPEN OCUCURSOR FOR SBSQL USING GE_BOUTILITIES.CSBNULLSTRING
                                     , NVL(INUORDERID,GE_BOUTILITIES.CSBNULLSTRING);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPERUNITORDERWCERT;

    

























    PROCEDURE GETFATHERORDERWCER
    (
        INUOPERATINGUNITID IN  NUMBER,
        OCUCURSOR          OUT CONSTANTS.TYREFCURSOR
    )
    IS
      SBSQL                           GE_BOUTILITIES.STYSTATEMENT;
      SBORDERATTRIBUTES               GE_BOUTILITIES.STYSTATEMENT;
      SBRECORDBIND                    GE_BOUTILITIES.STYSTATEMENT;
      CUCURSOR                        CONSTANTS.TYREFCURSOR;
      SBUSING                         GE_BOUTILITIES.STYSTATEMENT;
    BEGIN

        
        LLENARATRIBUTOSORDASOC(SBORDERATTRIBUTES);

        
        SBSQL := 'SELECT /*+ index(or_order idx_or_order_3)     '||CHR(10)||
                 '     ,     leading(or_order)                  '||CHR(10)||
                 '     ,     use_nl(or_order ct_excluded_order) '||CHR(10)||
                 '     ,     use_nl(ct_excluded_order ec)       '||CHR(10)||
                 '     ,     use_nl(ca cc)                    */'||CHR(10)|| SBORDERATTRIBUTES ||CHR(10)||
                 '     , ct_excluded_order.final_exclusion_date '||CHR(10)||
                 '     , ec.comment_type_id||''-''||dage_comment_type.fsbgetdescription(ec.comment_type_id, 0)||''-''||ec.order_comment exclusion_comment'||CHR(10)||
                 '     , or_order.defined_contract_id '||CHR(10)||
                 ' /*+ Ge_BofwCertifContratista.getFatherOrderWCer SAO214316 */ '||CHR(10)||
                 '  FROM  '||CHR(10)||
                 '   or_order,  '||CHR(10)||
                 '   ct_excluded_order,  '||CHR(10)||
                 '   or_order_comment ec, '||CHR(10)||
                 '   ge_causal ca,  '||CHR(10)||
                 '   ge_class_causal cc  '||CHR(10)||
                 ' WHERE or_order.operating_unit_id = :inuOperatingUnitId '|| CHR(10)||
                 '   AND or_order.order_status_id = '|| TO_CHAR(OR_BOCONSTANTS.CNUORDER_STAT_CLOSED) || CHR(10)||
                 '   AND or_order.is_pending_liq in (''Y'', ''E'') '|| CHR(10)||
                 '   AND ct_excluded_order.order_id (+) = or_order.order_id'|| CHR(10)||
                 '   AND ct_excluded_order.order_comment_id = ec.order_comment_id (+) '|| CHR(10)||
                 '   AND or_order.causal_id   = ca.causal_id '|| CHR(10)||             
                 '   AND ca.class_causal_id   = cc.class_causal_id '|| CHR(10)||
                 '   AND cc.class_causal_id   = or_boconstants.fnuSuccesCausal '|| CHR(10)||
                 '   AND NOT EXISTS ( SELECT /*+  index(or_order_activity IDX_OR_ORDER_ACTIVITY_05)'|| CHR(10)||
                 '                                index(ct_item_novelty PK_CT_ITEM_NOVELTY)'|| CHR(10)||
                 '                           */  ''X'' '|| CHR(10)||
                 '                    FROM ct_item_novelty, or_order_activity '|| CHR(10)||
                 '                    WHERE ct_item_novelty.items_id = or_order_activity.activity_id '|| CHR(10)||
                 '                    AND or_order_activity.order_id = or_order.order_id ) ';

        UT_TRACE.TRACE(SBSQL, 1);
        

        
        OPEN OCUCURSOR FOR SBSQL USING NVL(INUOPERATINGUNITID,GE_BOUTILITIES.CSBNULLSTRING)
                                     , NVL(INUOPERATINGUNITID,GE_BOUTILITIES.CSBNULLSTRING);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETFATHERORDERWCER;

    

















    PROCEDURE GETOPERUNITASSIGNORDER
    (
        INUORDERID   IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        OCUCURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS
      SBSQL                           GE_BOUTILITIES.STYSTATEMENT;
      SBORDERATTRIBUTES               GE_BOUTILITIES.STYSTATEMENT;
      SBRECORDBIND                    GE_BOUTILITIES.STYSTATEMENT;
      
      SBUSING                         GE_BOUTILITIES.STYSTATEMENT;
    BEGIN

        
        LLENARATRIBUTOSORDASOC(SBORDERATTRIBUTES);

        
        SBSQL := 'SELECT /*+ index(or_order pk_or_order) */ '|| SBORDERATTRIBUTES ||CHR(10)||
                 '     , or_order.defined_contract_id '||CHR(10)||
                 '  FROM or_order'||CHR(10)||
                 '       /*+ Ge_BofwCertifContratista.getOperUnitAssignOrder*/ '|| CHR(10)||
                 ' WHERE or_order.order_id = :inuOrderId ';


        
        OPEN OCUCURSOR FOR SBSQL USING GE_BOUTILITIES.CSBNULLSTRING
                                     , NVL(INUORDERID,GE_BOUTILITIES.CSBNULLSTRING);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPERUNITASSIGNORDER;

    

















    PROCEDURE GETFATHERASSIGNORDER
    (
        INUOPERATINGUNITID IN  NUMBER,
        OCUCURSOR          OUT CONSTANTS.TYREFCURSOR
    )
    IS
      SBSQL                           GE_BOUTILITIES.STYSTATEMENT;
      SBORDERATTRIBUTES               GE_BOUTILITIES.STYSTATEMENT;
      SBRECORDBIND                    GE_BOUTILITIES.STYSTATEMENT;
      SBUSING                         GE_BOUTILITIES.STYSTATEMENT;
    BEGIN

        
        LLENARATRIBUTOSORDASOC(SBORDERATTRIBUTES);

        
        SBSQL := 'SELECT /*+ index(or_order idx_or_order_3) */ '|| SBORDERATTRIBUTES ||CHR(10)||
                 '     , or_order.defined_contract_id '||CHR(10)||
                 '  FROM or_order'||CHR(10)||
                 '       /*+ Ge_BofwCertifContratista.getFatherOrderWCer*/ '|| CHR(10)||
                 ' WHERE or_order.operating_unit_id = :inuOperatingUnitId '|| CHR(10)||
                 '   AND or_order.order_status_id <> '|| TO_CHAR(OR_BOCONSTANTS.CNUORDER_STAT_CLOSED);

        
        OPEN OCUCURSOR FOR SBSQL USING NVL(INUOPERATINGUNITID,GE_BOUTILITIES.CSBNULLSTRING)
                                     , NVL(INUOPERATINGUNITID,GE_BOUTILITIES.CSBNULLSTRING);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETFATHERASSIGNORDER;

END GE_BOFWCERTIFCONTRATISTA;