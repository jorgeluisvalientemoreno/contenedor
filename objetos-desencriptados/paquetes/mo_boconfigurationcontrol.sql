PACKAGE mo_boConfigurationControl AS




























































































    
    
    

    CNUNODE_TYPE         CONSTANT NUMBER(1) := 1;
    CNUATTRIBUTE_TYPE    CONSTANT NUMBER(1) := 2;

    CNUPROCESS_OBJECT    CONSTANT NUMBER(1) := -1;
    
    CNUNULL              CONSTANT NUMBER(10) := NULL;
    CCHNULL              CONSTANT VARCHAR2(1) := NULL;
    
    
    
    
    
    









    TYPE TYRCCONFIGRECORD IS RECORD
    (
        ELEMENT_ID            MO_TMP_CONFIG_MOTIVE.ELEMENT_ID%TYPE,
        FATH_ELEM_ID          MO_TMP_CONFIG_MOTIVE.FATH_ELEM_ID%TYPE,
        ELEM_TYPE             MO_TMP_CONFIG_MOTIVE.ELEM_TYPE%TYPE,
        CONFIG_ID             MO_TMP_CONFIG_MOTIVE.CONFIG_ID%TYPE,
        MIN_OBJECT            MO_TMP_CONFIG_MOTIVE.MIN_OBJECT%TYPE,
        MAX_OBJECT            MO_TMP_CONFIG_MOTIVE.MAX_OBJECT%TYPE,
        TAG_NAME              MO_TMP_CONFIG_MOTIVE.TAG_NAME%TYPE,
        I_TABLE               MO_TMP_CONFIG_MOTIVE.I_TABLE%TYPE,
        I_COLUMN              MO_TMP_CONFIG_MOTIVE.I_COLUMN%TYPE,
        IS_ATTRIB_XML_NODE    MO_TMP_CONFIG_MOTIVE.IS_ATTRIB_XML_NODE%TYPE,
        IN_XML                MO_TMP_CONFIG_MOTIVE.IN_XML%TYPE,
        INIT_EXPRESSION_ID    MO_TMP_CONFIG_MOTIVE.INIT_EXPRESSION_ID%TYPE,
        VALID_EXPRESSION_ID   MO_TMP_CONFIG_MOTIVE.VALID_EXPRESSION_ID%TYPE,
        MIRROR_TABLE          MO_TMP_CONFIG_MOTIVE.MIRROR_TABLE%TYPE,
        MIRROR_COLUMN         MO_TMP_CONFIG_MOTIVE.MIRROR_COLUMN%TYPE,
        IS_REQUIRED           MO_TMP_CONFIG_MOTIVE.IS_REQUIRED%TYPE,
        REPLACED              MO_TMP_CONFIG_MOTIVE.REPLACED%TYPE,
        OBJECT_TYPE           MO_TMP_CONFIG_MOTIVE.OBJECT_TYPE%TYPE,
        OBJECT_TYPE_ID        MO_TMP_CONFIG_MOTIVE.OBJECT_TYPE_ID%TYPE,
        PACKAGE_ID            MO_TMP_CONFIG_MOTIVE.PACKAGE_ID%TYPE,
        ELEMENT_CATEGORY_ID   MO_TMP_CONFIG_MOTIVE.ELEMENT_CATEGORY_ID%TYPE,
        XML_PROCESS           MO_TMP_CONFIG_MOTIVE.XML_PROCESS%TYPE
    );

    







    TYPE TYTBCONFIGRECORD IS TABLE OF TYRCCONFIGRECORD INDEX BY BINARY_INTEGER;
    
    
    
    

    NUPACKAGEOBJECT    PLS_INTEGER;
    NUMOTIVEOBJECT     PLS_INTEGER;
    NUCOMPONENTOBJECT  PLS_INTEGER;
    NUPROCESSOBJECT    PLS_INTEGER;
    
    
    
    
    
    






    CURSOR CUCONFIGURATIONRECORDS
    IS
        SELECT COUNT (*)
          FROM MO_TMP_CONFIG_MOTIVE;
          
    





    CURSOR CUPACKAGE
    (
        NUPACKAGETYPE NUMBER
    )
    IS
        SELECT TAG_NAME,
               NUPACKAGEOBJECT,
               PACKAGE_TYPE_ID,
               CNUNULL,
               1,
               1,
               GE_BOCONSTANTS.CSBYES,
               CCHNULL,
               CNUNULL
          FROM PS_PACKAGE_TYPE
         WHERE PACKAGE_TYPE_ID = NUPACKAGETYPE;

    




    
    CURSOR CUPACKAGEATTRIBUTE
    (
        NUPACKAGETYPE NUMBER
    )
    IS
        SELECT PACKAGE_ATTRIBS_ID,
               TAG_NAME,
               HEADER_TAG_XML,
               INCLUDED_XML,
               INIT_EXPRESSION_ID,
               VALID_EXPRESSION_ID,
               REQUIRED,
               GROUP_ATTRIBUTE_TYPE,
               ENTITY_ATTRIBUTE_ID,
               MIRROR_ENTI_ATTRIB,
               INSTANCE_AMOUNT,
               PROCESS_WITH_XML
          FROM PS_PACKAGE_ATTRIBS
         WHERE PACKAGE_TYPE_ID = NUPACKAGETYPE
           AND ACTIVE = GE_BOCONSTANTS.CSBYES
           AND PARENT_ATTRIB_ID IS NULL
           AND MODULE IN (MO_BOCONSTANTS.CSBATTMOTIVE, MO_BOCONSTANTS.CSBATTBOTH)
      ORDER BY PROCESS_SEQUENCE;

    




    
    CURSOR CUGROUPPACKAGEATTRIBUTE
    (
        NUFATHERATTRIBUTE NUMBER
    )
    IS
        SELECT PACKAGE_ATTRIBS_ID,
               TAG_NAME,
               HEADER_TAG_XML,
               INCLUDED_XML,
               INIT_EXPRESSION_ID,
               VALID_EXPRESSION_ID,
               REQUIRED,
               GROUP_ATTRIBUTE_TYPE,
               ENTITY_ATTRIBUTE_ID,
               MIRROR_ENTI_ATTRIB,
               INSTANCE_AMOUNT,
               PROCESS_WITH_XML
          FROM PS_PACKAGE_ATTRIBS
         WHERE ACTIVE = GE_BOCONSTANTS.CSBYES
           AND PARENT_ATTRIB_ID = NUFATHERATTRIBUTE
           AND MODULE IN (MO_BOCONSTANTS.CSBATTMOTIVE, MO_BOCONSTANTS.CSBATTBOTH)
      ORDER BY PROCESS_SEQUENCE;

    












    CURSOR CUPACKAGEMOTIVE
    (
        NUPACKAGETYPE NUMBER,
        NUPRODUCTTYPE NUMBER
    )
    IS
        SELECT PS_PRODUCT_MOTIVE.TAG_NAME,
               NUMOTIVEOBJECT,
               PS_PRD_MOTIV_PACKAGE.PRODUCT_MOTIVE_ID,
               CNUNULL,
               PS_PRD_MOTIV_PACKAGE.MIN_MOTIVE_COMP,
               PS_PRD_MOTIV_PACKAGE.MAX_MOTIVE_COMP,
               GE_BOCONSTANTS.CSBYES,
               PS_PRODUCT_MOTIVE.USE_UNCOMPOSITION,
               CNUNULL
          FROM PS_PRD_MOTIV_PACKAGE, PS_PRODUCT_MOTIVE
         WHERE PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID = PS_PRD_MOTIV_PACKAGE.PRODUCT_MOTIVE_ID
           AND PS_PRD_MOTIV_PACKAGE.PACKAGE_TYPE_ID = NUPACKAGETYPE
           AND PS_PRD_MOTIV_PACKAGE.PRODUCT_TYPE_ID= NVL(NUPRODUCTTYPE,PS_PRD_MOTIV_PACKAGE.PRODUCT_TYPE_ID)
      ORDER BY PS_PRD_MOTIV_PACKAGE.SEQUENCE_NUMBER;

    





    CURSOR CUMOTIVEATTRIBUTE
    (
        NUPRODUCTMOTIVE NUMBER
    )
    IS
        SELECT PROD_MOTI_ATTRIB_ID,
               TAG_NAME,
               HEADER_TAG_XML,
               INCLUDED_XML,
               INIT_EXPRESSION_ID,
               VALID_EXPRESSION_ID,
               REQUIRED,
               GROUP_ATTRIBUTE_TYPE,
               ENTITY_ATTRIBUTE_ID,
               MIRROR_ENTI_ATTRIB,
               INSTANCE_AMOUNT,
               PROCESS_WITH_XML
          FROM PS_PROD_MOTI_ATTRIB
         WHERE PRODUCT_MOTIVE_ID = NUPRODUCTMOTIVE
           AND ACTIVE = GE_BOCONSTANTS.CSBYES
           AND PARENT_ATTRIB_ID IS NULL
           AND MODULE IN (MO_BOCONSTANTS.CSBATTMOTIVE, MO_BOCONSTANTS.CSBATTBOTH)
       ORDER BY PROCESS_SEQUENCE;

    




    
    CURSOR CUGROUPMOTIVEATTRIBUTE
    (
        NUFATHERATTRIBUTE NUMBER
    )
    IS
        SELECT PROD_MOTI_ATTRIB_ID,
               TAG_NAME,
               HEADER_TAG_XML,
               INCLUDED_XML,
               INIT_EXPRESSION_ID,
               VALID_EXPRESSION_ID,
               REQUIRED,
               GROUP_ATTRIBUTE_TYPE,
               ENTITY_ATTRIBUTE_ID,
               MIRROR_ENTI_ATTRIB,
               INSTANCE_AMOUNT,
               PROCESS_WITH_XML
          FROM PS_PROD_MOTI_ATTRIB
         WHERE ACTIVE = GE_BOCONSTANTS.CSBYES
           AND PARENT_ATTRIB_ID = NUFATHERATTRIBUTE
           AND MODULE IN (MO_BOCONSTANTS.CSBATTMOTIVE, MO_BOCONSTANTS.CSBATTBOTH)
       ORDER BY PROCESS_SEQUENCE;

    





    CURSOR CUMAINMOTIVECOMPONENT
    (
        NUPRODUCTMOTIVE NUMBER
    )
    IS
        SELECT TAG_NAME,
               NUCOMPONENTOBJECT,
               PROD_MOTIVE_COMP_ID,
               ELEMENT_CATEGORY_ID,
               MIN_COMPONENTS,
               MAX_COMPONENTS,
               PROCESS_WITH_XML,
               CCHNULL,
               PARENT_COMP
          FROM PS_PROD_MOTIVE_COMP
         WHERE PRODUCT_MOTIVE_ID = NUPRODUCTMOTIVE
           AND ACTIVE = GE_BOCONSTANTS.CSBYES
           AND PARENT_COMP IS NULL;
    
    




    
    CURSOR CUMOTIVECOMPONENT
    (
        NUMOTIVECOMPONENT NUMBER
    )
    IS
        SELECT TAG_NAME,
               NUCOMPONENTOBJECT,
               PROD_MOTIVE_COMP_ID,
               ELEMENT_CATEGORY_ID,
               MIN_COMPONENTS,
               MAX_COMPONENTS,
               PROCESS_WITH_XML,
               CCHNULL,
               PARENT_COMP
          FROM PS_PROD_MOTIVE_COMP
         WHERE PARENT_COMP = NUMOTIVECOMPONENT
           AND ACTIVE = GE_BOCONSTANTS.CSBYES;

    




    
    CURSOR CUCOMPONENTATTRIBUTE
    (
        NUMOTIVECOMPONENT NUMBER
    )
    IS
        SELECT MOTI_COMP_ATTRIBS_ID,
               TAG_NAME,
               HEADER_TAG_XML,
               INCLUDED_XML,
               INIT_EXPRESSION_ID,
               VALID_EXPRESSION_ID,
               REQUIRED,
               GROUP_ATTRIBUTE_TYPE,
               ENTITY_ATTRIBUTE_ID,
               MIRROR_ENTI_ATTRIB,
               INSTANCE_AMOUNT,
               PROCESS_WITH_XML
          FROM PS_MOTI_COMP_ATTRIBS
         WHERE PROD_MOTIVE_COMP_ID = NUMOTIVECOMPONENT
           AND ACTIVE = GE_BOCONSTANTS.CSBYES
           AND PARENT_ATTRIB_ID IS NULL
           AND MODULE IN (MO_BOCONSTANTS.CSBATTMOTIVE, MO_BOCONSTANTS.CSBATTBOTH)
      ORDER BY PROCESS_SEQUENCE;

    




    
    CURSOR CUGROUPCOMPONENTATTRIBUTE
    (
        NUFATHERATTRIBUTE NUMBER
    )
    IS
        SELECT MOTI_COMP_ATTRIBS_ID,
               TAG_NAME,
               HEADER_TAG_XML,
               INCLUDED_XML,
               INIT_EXPRESSION_ID,
               VALID_EXPRESSION_ID,
               REQUIRED,
               GROUP_ATTRIBUTE_TYPE,
               ENTITY_ATTRIBUTE_ID,
               MIRROR_ENTI_ATTRIB,
               INSTANCE_AMOUNT,
               PROCESS_WITH_XML
          FROM PS_MOTI_COMP_ATTRIBS
         WHERE ACTIVE = GE_BOCONSTANTS.CSBYES
           AND PARENT_ATTRIB_ID = NUFATHERATTRIBUTE
           AND MODULE IN (MO_BOCONSTANTS.CSBATTMOTIVE, MO_BOCONSTANTS.CSBATTBOTH)
        ORDER BY PROCESS_SEQUENCE;

    










    CURSOR CUOBJECTCONFIGURATION
    (
        SBOBJECTTYPE   VARCHAR2,
        NUOBJECTTYPEID NUMBER
    )
    IS
        SELECT ELEMENT_ID,
               FATH_ELEM_ID,
               ELEM_TYPE,
               CONFIG_ID,
               MIN_OBJECT,
               MAX_OBJECT,
               TAG_NAME,
               I_TABLE,
               I_COLUMN,
               IS_ATTRIB_XML_NODE,
               IN_XML,
               INIT_EXPRESSION_ID,
               VALID_EXPRESSION_ID,
               MIRROR_TABLE,
               MIRROR_COLUMN,
               IS_REQUIRED,
               REPLACED,
               OBJECT_TYPE,
               OBJECT_TYPE_ID,
               PACKAGE_ID ,
               ELEMENT_CATEGORY_ID,
               XML_PROCESS
          FROM MO_TMP_CONFIG_MOTIVE
         WHERE OBJECT_TYPE = SBOBJECTTYPE
           AND OBJECT_TYPE_ID = NUOBJECTTYPEID;
           
    










    CURSOR CUOBJECTCHILD
    (
        NUFATHERID NUMBER
    )
    IS
        SELECT ELEMENT_ID,
               FATH_ELEM_ID,
               ELEM_TYPE,
               CONFIG_ID,
               MIN_OBJECT,
               MAX_OBJECT,
               TAG_NAME,
               I_TABLE,
               I_COLUMN,
               IS_ATTRIB_XML_NODE,
               IN_XML,
               INIT_EXPRESSION_ID,
               VALID_EXPRESSION_ID,
               MIRROR_TABLE,
               MIRROR_COLUMN,
               IS_REQUIRED,
               REPLACED,
               OBJECT_TYPE,
               OBJECT_TYPE_ID,
               PACKAGE_ID ,
               ELEMENT_CATEGORY_ID,
               XML_PROCESS
          FROM MO_TMP_CONFIG_MOTIVE
         WHERE FATH_ELEM_ID = NUFATHERID
      ORDER BY ELEMENT_ID;

    
    
    
    



    FUNCTION FSBVERSION  RETURN VARCHAR2;

    





    PROCEDURE LOADPACKAGECONFIGURATION
        (
        INUPACKAGETYPE IN NUMBER,
        INUPRODUCTTYPE IN NUMBER DEFAULT NULL
        );
    
    





    PROCEDURE LOADOBJECTCONFIGURATION
    (
        ISBOBJECTTYPE   IN VARCHAR2,
        INUOBJECTTYPEID IN NUMBER
    );

    





    PROCEDURE DOWNOBJECTCONFIGURATION;

    






    PROCEDURE GETFIRSTRECORD
    (
        ORCRECORD OUT NOCOPY TYRCCONFIGRECORD
    );
    
    






    FUNCTION FBLGETNEXTRECORD
    (
        ORCRECORD OUT NOCOPY TYRCCONFIGRECORD
    )
    RETURN BOOLEAN;

    






    PROCEDURE GETNODES
    (
        INUFATHER IN NUMBER,
        OTBTARGET OUT NOCOPY TYTBCONFIGRECORD
    );

    






    PROCEDURE GETATTRIBUTES
    (
        INUFATHER IN NUMBER,
        OTBTARGET OUT NOCOPY TYTBCONFIGRECORD
    );
    
    





    PROCEDURE SETPACKAGEOBJECT
    (
        INUPACKAGEOBJECT IN NUMBER
    );
    
    





    PROCEDURE SETMOTIVEOBJECT
    (
        INUMOTIVEOBJECT IN NUMBER
    );
    
    





    PROCEDURE SETCOMPONENTOBJECT
    (
        INUCOMPONENTOBJECT IN NUMBER
    );
    
    





    PROCEDURE SETPROCESSOBJECT
    (
        INUPROCESSOBJECT IN NUMBER
    );
    
    





    FUNCTION FNUGETPACKAGEOBJECT RETURN NUMBER;

    





    FUNCTION FNUGETMOTIVEOBJECT RETURN NUMBER;

    





    FUNCTION FNUGETCOMPONENTOBJECT RETURN NUMBER;

    





    FUNCTION FNUGETPROCESSOBJECT RETURN NUMBER;
    
    



    PROCEDURE GETCHILDRECORDS
    (
        INUFATHER IN NUMBER,
        INUTYPE   IN NUMBER,
        OTBTARGET OUT NOCOPY TYTBCONFIGRECORD
    );

END MO_BOCONFIGURATIONCONTROL;
/
PACKAGE BODY mo_boConfigurationControl AS
    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO200005';

    CNUNOT_PACKAGE_CONFIGURATION CONSTANT NUMBER := 1198;
    
    
    
    


    





    SUBTYPE STYNUINDEX IS NUMBER(15);

    





    TYPE TYRCTMPOBJECTCONFIG IS RECORD
    (
        SBTAGNAME           MO_TMP_CONFIG_MOTIVE.TAG_NAME%TYPE,
        SBOBJECTTYPE        MO_TMP_CONFIG_MOTIVE.OBJECT_TYPE%TYPE,
        NUOBJECTTYPEID      MO_TMP_CONFIG_MOTIVE.OBJECT_TYPE_ID%TYPE,
        NUCATEGORYID        MO_TMP_CONFIG_MOTIVE.ELEMENT_CATEGORY_ID%TYPE,
        NUMINOBJECTS        MO_TMP_CONFIG_MOTIVE.MIN_OBJECT%TYPE,
        NUMAXOBJECTS        MO_TMP_CONFIG_MOTIVE.MAX_OBJECT%TYPE,
        SBXMLPROCESS        MO_TMP_CONFIG_MOTIVE.XML_PROCESS%TYPE,
        SBUSEUNCOMPOSITION  PS_PRODUCT_MOTIVE.USE_UNCOMPOSITION%TYPE,
        NUFATHER            PS_PROD_MOTIVE_COMP.PARENT_COMP%TYPE
    );

    





    TYPE TYRCTMPATTRIBUTECONFIG IS RECORD
    (
        NUCONFIGID              PS_PACKAGE_ATTRIBS.PACKAGE_ATTRIBS_ID%TYPE,
        SBTAGNAME               PS_PACKAGE_ATTRIBS.TAG_NAME%TYPE,
        SBISNODE                PS_PACKAGE_ATTRIBS.HEADER_TAG_XML%TYPE,
        SBINXML                 PS_PACKAGE_ATTRIBS.INCLUDED_XML%TYPE,
        NUINITIALIZEEXPRESSION  PS_PACKAGE_ATTRIBS.INIT_EXPRESSION_ID%TYPE,
        NUVALIDATEEXPRESSION    PS_PACKAGE_ATTRIBS.VALID_EXPRESSION_ID%TYPE,
        SBISREQUIRED            PS_PACKAGE_ATTRIBS.REQUIRED%TYPE,
        SBGROUPATTRIBUTE        PS_PACKAGE_ATTRIBS.GROUP_ATTRIBUTE_TYPE%TYPE,
        NUATTRIBUTE             PS_PACKAGE_ATTRIBS.ENTITY_ATTRIBUTE_ID%TYPE,
        NUMIRROR                PS_PACKAGE_ATTRIBS.MIRROR_ENTI_ATTRIB%TYPE,
        NUMAXOBJECT             PS_PACKAGE_ATTRIBS.INSTANCE_AMOUNT%TYPE,
        SBXMLPROCESS            PS_PACKAGE_ATTRIBS.PROCESS_WITH_XML%TYPE
    );


    TYPE TYTBTMPOBJECTCONFIG IS TABLE OF TYRCTMPOBJECTCONFIG INDEX BY BINARY_INTEGER;
    
    
    
    

    NUOBJECTSEQUENCE   STYNUINDEX;

    NUPACKAGETYPE  PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    
    NUCURRENTINDEX   STYNUINDEX;

    TBCONFIGRECORD   TYTBCONFIGRECORD;

   
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
















FUNCTION FNUGETSEQUENCE RETURN NUMBER
IS
BEGIN

    NUOBJECTSEQUENCE := NUOBJECTSEQUENCE + 1;

    RETURN (NUOBJECTSEQUENCE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE ENTITYATTRIBUTEDATA
(
   INUENTITYATTRIBUTE IN NUMBER,
   OSBENTITY          OUT NOCOPY VARCHAR2,
   OSBATTRIBUTE       OUT NOCOPY VARCHAR2
)
IS
BEGIN

    IF INUENTITYATTRIBUTE IS NOT NULL THEN
        OSBENTITY :=  DAGE_ENTITY.FSBGETNAME_ (DAGE_ENTITY_ATTRIBUTES.FNUGETENTITY_ID (INUENTITYATTRIBUTE));
        OSBATTRIBUTE := DAGE_ENTITY_ATTRIBUTES.FSBGETTECHNICAL_NAME (INUENTITYATTRIBUTE);
    ELSE
        OSBENTITY :=  NULL;
        OSBATTRIBUTE := NULL;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE ADDOBJECT
(
    INUFATHER   IN NUMBER,
    INUSEQUENCE IN NUMBER,
    IRCOBJECT   IN TYRCTMPOBJECTCONFIG
)
IS

RCTMPRECORD  DAMO_TMP_CONFIG_MOTIVE.STYMO_TMP_CONFIG_MOTIVE;

BEGIN

    RCTMPRECORD := NULL;

    RCTMPRECORD.FATH_ELEM_ID := INUFATHER;
    RCTMPRECORD.ELEMENT_ID := INUSEQUENCE;

    RCTMPRECORD.PACKAGE_ID := NUPACKAGETYPE;

    RCTMPRECORD.ELEM_TYPE  := CNUNODE_TYPE;

    RCTMPRECORD.TAG_NAME := IRCOBJECT.SBTAGNAME;

    RCTMPRECORD.OBJECT_TYPE    := IRCOBJECT.SBOBJECTTYPE;
    RCTMPRECORD.OBJECT_TYPE_ID := IRCOBJECT.NUOBJECTTYPEID;

    RCTMPRECORD.MIN_OBJECT := IRCOBJECT.NUMINOBJECTS;
    RCTMPRECORD.MAX_OBJECT := IRCOBJECT.NUMAXOBJECTS;

    RCTMPRECORD.XML_PROCESS := IRCOBJECT.SBXMLPROCESS;

    RCTMPRECORD.ELEMENT_CATEGORY_ID := IRCOBJECT.NUCATEGORYID;

    IF IRCOBJECT.NUMINOBJECTS < 1 THEN
        RCTMPRECORD.IS_REQUIRED := GE_BOCONSTANTS.CSBNO;
    ELSE
        RCTMPRECORD.IS_REQUIRED := GE_BOCONSTANTS.CSBYES;
    END IF;

    DAMO_TMP_CONFIG_MOTIVE.INSRECORD (RCTMPRECORD);

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;






















PROCEDURE ADDOBJECTATTRIBUTE
(
    INUFATHERSEQUENCE       IN NUMBER,
    INUATTRIBUTESEQUENCE    IN NUMBER,
    IRCATTRIBUTE            IN TYRCTMPATTRIBUTECONFIG,
    INUOBJECTTYPE           IN MO_TMP_CONFIG_MOTIVE.OBJECT_TYPE%TYPE
)
IS

RCTMPRECORD  DAMO_TMP_CONFIG_MOTIVE.STYMO_TMP_CONFIG_MOTIVE;

BEGIN

    RCTMPRECORD := NULL;

    RCTMPRECORD.FATH_ELEM_ID := INUFATHERSEQUENCE;
    RCTMPRECORD.ELEMENT_ID   := INUATTRIBUTESEQUENCE;

    RCTMPRECORD.TAG_NAME := IRCATTRIBUTE.SBTAGNAME;

    RCTMPRECORD.PACKAGE_ID := NUPACKAGETYPE;

    RCTMPRECORD.ELEM_TYPE := CNUATTRIBUTE_TYPE;

    RCTMPRECORD.CONFIG_ID           := IRCATTRIBUTE.NUCONFIGID;

    RCTMPRECORD.IS_ATTRIB_XML_NODE  := IRCATTRIBUTE.SBISNODE;
    RCTMPRECORD.IN_XML              := IRCATTRIBUTE.SBINXML;
    RCTMPRECORD.IS_REQUIRED         := IRCATTRIBUTE.SBISREQUIRED;

    RCTMPRECORD.INIT_EXPRESSION_ID  := IRCATTRIBUTE.NUINITIALIZEEXPRESSION;
    RCTMPRECORD.VALID_EXPRESSION_ID := IRCATTRIBUTE.NUVALIDATEEXPRESSION;

    RCTMPRECORD.MIN_OBJECT  := 1;
    RCTMPRECORD.MAX_OBJECT  := IRCATTRIBUTE.NUMAXOBJECT;

    RCTMPRECORD.XML_PROCESS := IRCATTRIBUTE.SBXMLPROCESS;

    RCTMPRECORD.OBJECT_TYPE := INUOBJECTTYPE;

    ENTITYATTRIBUTEDATA (IRCATTRIBUTE.NUATTRIBUTE, RCTMPRECORD.I_TABLE, RCTMPRECORD.I_COLUMN);

    ENTITYATTRIBUTEDATA (IRCATTRIBUTE.NUMIRROR, RCTMPRECORD.MIRROR_TABLE, RCTMPRECORD.MIRROR_COLUMN);

    DAMO_TMP_CONFIG_MOTIVE.INSRECORD (RCTMPRECORD);

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;
















PROCEDURE LOADGROUPCOMPONENT
(
    INUFATHERATTRIBUTE IN NUMBER,
    INUFATHERSEQUENCE  IN NUMBER
)
IS

NUATTRIBUTESEQUENCE  STYNUINDEX;

RCATTRIBUTE  TYRCTMPATTRIBUTECONFIG;

BEGIN

    OPEN CUGROUPCOMPONENTATTRIBUTE (INUFATHERATTRIBUTE);
    
    LOOP
        FETCH CUGROUPCOMPONENTATTRIBUTE INTO RCATTRIBUTE;
        EXIT WHEN CUGROUPCOMPONENTATTRIBUTE%NOTFOUND;

        NUATTRIBUTESEQUENCE := FNUGETSEQUENCE;

        ADDOBJECTATTRIBUTE (INUFATHERSEQUENCE, NUATTRIBUTESEQUENCE, RCATTRIBUTE, NUCOMPONENTOBJECT);
    END LOOP;
    
    CLOSE CUGROUPCOMPONENTATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CUGROUPCOMPONENTATTRIBUTE%ISOPEN THEN
            CLOSE CUGROUPCOMPONENTATTRIBUTE;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CUGROUPCOMPONENTATTRIBUTE%ISOPEN THEN
            CLOSE CUGROUPCOMPONENTATTRIBUTE;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;
















PROCEDURE LOADCOMPONENTCONFIGURATION
(
    NUFATHERCOMPONENT    IN NUMBER,
    INUCOMPONENTSEQUENCE IN NUMBER,
    IRCCOMPONENT         IN TYRCTMPOBJECTCONFIG
)
IS

RCATTRIBUTE  TYRCTMPATTRIBUTECONFIG;

NUATTRIBUTESEQUENCE  STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('mo_boConfigurationControl.LoadComponentConfiguration ['|| IRCCOMPONENT.SBTAGNAME ||']['|| IRCCOMPONENT.SBOBJECTTYPE ||']['|| IRCCOMPONENT.NUOBJECTTYPEID ||']', 1);

    ADDOBJECT (NUFATHERCOMPONENT, INUCOMPONENTSEQUENCE, IRCCOMPONENT);

    

    OPEN CUCOMPONENTATTRIBUTE (IRCCOMPONENT.NUOBJECTTYPEID );
    LOOP
        FETCH CUCOMPONENTATTRIBUTE INTO RCATTRIBUTE;
        EXIT WHEN CUCOMPONENTATTRIBUTE%NOTFOUND;

        NUATTRIBUTESEQUENCE := FNUGETSEQUENCE;
        
        ADDOBJECTATTRIBUTE (INUCOMPONENTSEQUENCE, NUATTRIBUTESEQUENCE, RCATTRIBUTE, NUCOMPONENTOBJECT);

        IF RCATTRIBUTE.SBGROUPATTRIBUTE = GE_BOCONSTANTS.CSBYES THEN
            LOADGROUPCOMPONENT (RCATTRIBUTE.NUCONFIGID, NUATTRIBUTESEQUENCE);
        END IF;
    END LOOP;
    
    CLOSE CUCOMPONENTATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CUCOMPONENTATTRIBUTE%ISOPEN THEN
            CLOSE CUCOMPONENTATTRIBUTE;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CUCOMPONENTATTRIBUTE%ISOPEN THEN
            CLOSE CUCOMPONENTATTRIBUTE;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;












PROCEDURE LOADCHILDCOMPONENTS
(
    INUFATHERCOMPONENT IN NUMBER,
    INUMOTIVECOMPONENT IN NUMBER,
    INUTRACELEVEL      IN NUMBER
)
IS

NUSEQUENCE   STYNUINDEX;
NUINDEX      STYNUINDEX;
TBCOMPONENT  TYTBTMPOBJECTCONFIG;

BEGIN
    UT_TRACE.TRACE ('mo_boConfigurationControl.LoadChildComponents ['|| INUMOTIVECOMPONENT ||']', 1);

    TBCOMPONENT.DELETE;
    
    OPEN CUMOTIVECOMPONENT (INUMOTIVECOMPONENT);
    
    LOOP
        FETCH CUMOTIVECOMPONENT INTO TBCOMPONENT(TBCOMPONENT.COUNT);
        EXIT WHEN CUMOTIVECOMPONENT%NOTFOUND;
    END LOOP;

    CLOSE CUMOTIVECOMPONENT;
    
    NUINDEX := TBCOMPONENT.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        UT_TRACE.TRACE ('PRODUCT_MOTIVE_COMPONENT ['|| TBCOMPONENT(NUINDEX).NUOBJECTTYPEID ||']['|| DAPS_PROD_MOTIVE_COMP.FSBGETDESCRIPTION (TBCOMPONENT(NUINDEX).NUOBJECTTYPEID) ||']', INUTRACELEVEL);

        NUSEQUENCE := FNUGETSEQUENCE;
        
        LOADCOMPONENTCONFIGURATION (INUFATHERCOMPONENT, NUSEQUENCE, TBCOMPONENT(NUINDEX));
        
        LOADCHILDCOMPONENTS (NUSEQUENCE, TBCOMPONENT(NUINDEX).NUOBJECTTYPEID, INUTRACELEVEL + 1);
        
        NUINDEX := TBCOMPONENT.NEXT(NUINDEX);
    END LOOP;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CUMOTIVECOMPONENT%ISOPEN THEN
            CLOSE CUMOTIVECOMPONENT;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CUMOTIVECOMPONENT%ISOPEN THEN
            CLOSE CUMOTIVECOMPONENT;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;
















PROCEDURE LOADMAINMOTIVECOMPONENT
(
    INUMOTIVESEQUENCE IN NUMBER,
    INUPRODUCTMOTIVE  IN NUMBER
)
IS

NUSEQUENCE   STYNUINDEX;
RCCOMPONENT  TYRCTMPOBJECTCONFIG;

BEGIN
    UT_TRACE.TRACE ('mo_boConfigurationControl.LoadMainMotiveComponent ['|| INUPRODUCTMOTIVE ||']', 1);
    
    OPEN CUMAINMOTIVECOMPONENT (INUPRODUCTMOTIVE);
    LOOP
        FETCH CUMAINMOTIVECOMPONENT INTO RCCOMPONENT;
        EXIT WHEN CUMAINMOTIVECOMPONENT%NOTFOUND;

        UT_TRACE.TRACE ('PRODUCT_MOTIVE_COMPONENT ['|| RCCOMPONENT.NUOBJECTTYPEID ||']['|| DAPS_PROD_MOTIVE_COMP.FSBGETDESCRIPTION (RCCOMPONENT.NUOBJECTTYPEID) ||']', 3);

        NUSEQUENCE := FNUGETSEQUENCE;
        
        LOADCOMPONENTCONFIGURATION (INUMOTIVESEQUENCE, NUSEQUENCE, RCCOMPONENT);
        
        LOADCHILDCOMPONENTS (NUSEQUENCE, RCCOMPONENT.NUOBJECTTYPEID, 4);
    END LOOP;

    CLOSE CUMAINMOTIVECOMPONENT;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CUMAINMOTIVECOMPONENT%ISOPEN THEN
            CLOSE CUMAINMOTIVECOMPONENT;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CUMAINMOTIVECOMPONENT%ISOPEN THEN
            CLOSE CUMAINMOTIVECOMPONENT;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;
















PROCEDURE LOADGROUPMOTIVE
(
    INUFATHERATTRIBUTE IN NUMBER,
    INUFATHERSEQUENCE  IN NUMBER
)
IS

NUATTRIBUTESEQUENCE  STYNUINDEX;

RCATTRIBUTE  TYRCTMPATTRIBUTECONFIG;

BEGIN

    OPEN CUGROUPMOTIVEATTRIBUTE (INUFATHERATTRIBUTE);
    
    LOOP
        FETCH CUGROUPMOTIVEATTRIBUTE INTO RCATTRIBUTE;
        EXIT WHEN CUGROUPMOTIVEATTRIBUTE%NOTFOUND;

        NUATTRIBUTESEQUENCE := FNUGETSEQUENCE;

        ADDOBJECTATTRIBUTE (INUFATHERSEQUENCE, NUATTRIBUTESEQUENCE, RCATTRIBUTE, NUMOTIVEOBJECT);
    END LOOP;
    
    CLOSE CUGROUPMOTIVEATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CUGROUPMOTIVEATTRIBUTE%ISOPEN THEN
            CLOSE CUGROUPMOTIVEATTRIBUTE;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CUGROUPMOTIVEATTRIBUTE%ISOPEN THEN
            CLOSE CUGROUPMOTIVEATTRIBUTE;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;
















PROCEDURE LOADMOTIVECONFIGURATION
(
    INUPACKAGESEQUENCE IN NUMBER,
    IRCMOTIVE          IN TYRCTMPOBJECTCONFIG
)
IS

NUMOTIVESEQUENCE          STYNUINDEX;
NUATTRIBUTESEQUENCE       STYNUINDEX;
NUGROUPATTRIBUTESEQUENCE  STYNUINDEX;

RCATTRIBUTE       TYRCTMPATTRIBUTECONFIG;
RCGROUPATTRIBUTE  TYRCTMPATTRIBUTECONFIG;
RCCOMPONENT       TYRCTMPOBJECTCONFIG;

BEGIN
    UT_TRACE.TRACE ('mo_boConfigurationControl.LoadMotiveConfiguration ['|| IRCMOTIVE.SBTAGNAME ||']['|| IRCMOTIVE.SBOBJECTTYPE ||']['|| IRCMOTIVE.NUOBJECTTYPEID ||']', 1);
    
    NUMOTIVESEQUENCE := FNUGETSEQUENCE;
    
    ADDOBJECT (INUPACKAGESEQUENCE, NUMOTIVESEQUENCE, IRCMOTIVE);

    

    OPEN CUMOTIVEATTRIBUTE (IRCMOTIVE.NUOBJECTTYPEID);
    LOOP
        FETCH CUMOTIVEATTRIBUTE INTO RCATTRIBUTE;
        EXIT WHEN CUMOTIVEATTRIBUTE%NOTFOUND;

        NUATTRIBUTESEQUENCE := FNUGETSEQUENCE;

        ADDOBJECTATTRIBUTE (NUMOTIVESEQUENCE, NUATTRIBUTESEQUENCE, RCATTRIBUTE, NUMOTIVEOBJECT);

        IF RCATTRIBUTE.SBGROUPATTRIBUTE = GE_BOCONSTANTS.CSBYES THEN
            LOADGROUPMOTIVE (RCATTRIBUTE.NUCONFIGID, NUATTRIBUTESEQUENCE);
        END IF;
    END LOOP;
    
    CLOSE CUMOTIVEATTRIBUTE;

    

    IF DAPS_PRODUCT_MOTIVE.FSBGETUSE_UNCOMPOSITION (IRCMOTIVE.NUOBJECTTYPEID) = GE_BOCONSTANTS.CSBYES THEN
        LOADMAINMOTIVECOMPONENT (NUMOTIVESEQUENCE, IRCMOTIVE.NUOBJECTTYPEID);
    END IF;
    
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CUMOTIVEATTRIBUTE%ISOPEN THEN
            CLOSE CUMOTIVEATTRIBUTE;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CUMOTIVEATTRIBUTE%ISOPEN THEN
            CLOSE CUMOTIVEATTRIBUTE;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;
















PROCEDURE LOADGROUPPACKAGE
(
    INUFATHERATTRIBUTE IN NUMBER,
    INUFATHERSEQUENCE  IN NUMBER
)
IS

NUATTRIBUTESEQUENCE  STYNUINDEX;

RCATTRIBUTE  TYRCTMPATTRIBUTECONFIG;

BEGIN

    OPEN CUGROUPPACKAGEATTRIBUTE (INUFATHERATTRIBUTE);
    
    LOOP
        FETCH CUGROUPPACKAGEATTRIBUTE INTO RCATTRIBUTE;
        EXIT WHEN CUGROUPPACKAGEATTRIBUTE%NOTFOUND;

        NUATTRIBUTESEQUENCE := FNUGETSEQUENCE;

        ADDOBJECTATTRIBUTE (INUFATHERSEQUENCE, NUATTRIBUTESEQUENCE, RCATTRIBUTE, NUPACKAGEOBJECT);
    END LOOP;
    
    CLOSE CUGROUPPACKAGEATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CUGROUPPACKAGEATTRIBUTE%ISOPEN THEN
            CLOSE CUGROUPPACKAGEATTRIBUTE;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CUGROUPPACKAGEATTRIBUTE%ISOPEN THEN
            CLOSE CUGROUPPACKAGEATTRIBUTE;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


















PROCEDURE LOADPACKAGECONFIGURATION
(
    IRCPACKAGE IN TYRCTMPOBJECTCONFIG,
    INUPRODUCTTYPE  IN NUMBER DEFAULT NULL
)
IS

NUPACKAGESEQUENCE    STYNUINDEX;
NUATTRIBUTESEQUENCE  STYNUINDEX;

RCMOTIVE     TYRCTMPOBJECTCONFIG;
RCATTRIBUTE  TYRCTMPATTRIBUTECONFIG;

BEGIN
    UT_TRACE.TRACE ('mo_boConfigurationControl.LoadPackageConfiguration ['|| IRCPACKAGE.SBTAGNAME ||']['|| IRCPACKAGE.SBOBJECTTYPE ||']['|| IRCPACKAGE.NUOBJECTTYPEID ||']', 1);
    
    NUPACKAGETYPE := IRCPACKAGE.NUOBJECTTYPEID;

    NUPACKAGESEQUENCE := FNUGETSEQUENCE;

    ADDOBJECT (NULL, NUPACKAGESEQUENCE, IRCPACKAGE);

    

    OPEN CUPACKAGEATTRIBUTE (NUPACKAGETYPE);
    LOOP
        FETCH CUPACKAGEATTRIBUTE INTO RCATTRIBUTE;
        EXIT WHEN CUPACKAGEATTRIBUTE%NOTFOUND;

        NUATTRIBUTESEQUENCE := FNUGETSEQUENCE;

        ADDOBJECTATTRIBUTE (NUPACKAGESEQUENCE, NUATTRIBUTESEQUENCE, RCATTRIBUTE, NUPACKAGEOBJECT);

        IF RCATTRIBUTE.SBGROUPATTRIBUTE = GE_BOCONSTANTS.CSBYES THEN
            LOADGROUPPACKAGE (RCATTRIBUTE.NUCONFIGID, NUATTRIBUTESEQUENCE);
        END IF;
    END LOOP;
    
    CLOSE CUPACKAGEATTRIBUTE;

    

    OPEN CUPACKAGEMOTIVE (IRCPACKAGE.NUOBJECTTYPEID,INUPRODUCTTYPE);
    LOOP
        FETCH CUPACKAGEMOTIVE INTO RCMOTIVE;
        EXIT WHEN CUPACKAGEMOTIVE%NOTFOUND;

        LOADMOTIVECONFIGURATION (NUPACKAGESEQUENCE, RCMOTIVE);
    END LOOP;

    CLOSE CUPACKAGEMOTIVE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CUPACKAGEMOTIVE%ISOPEN THEN
            CLOSE CUPACKAGEMOTIVE;
        END IF;
        IF CUPACKAGEATTRIBUTE%ISOPEN THEN
            CLOSE CUPACKAGEATTRIBUTE;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CUPACKAGEMOTIVE%ISOPEN THEN
            CLOSE CUPACKAGEMOTIVE;
        END IF;
        IF CUPACKAGEATTRIBUTE%ISOPEN THEN
            CLOSE CUPACKAGEATTRIBUTE;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;












FUNCTION FBLISCONFIGURATIONLOAD
RETURN BOOLEAN
IS

NURECORDS PLS_INTEGER;

BEGIN

    OPEN CUCONFIGURATIONRECORDS;
        FETCH CUCONFIGURATIONRECORDS INTO NURECORDS;
    CLOSE CUCONFIGURATIONRECORDS;
    
    IF NURECORDS != 0 THEN
        RETURN TRUE;
    END IF;
    
    RETURN FALSE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE LOADPACKAGECONFIGURATION
        (
        INUPACKAGETYPE IN NUMBER,
        INUPRODUCTTYPE IN NUMBER DEFAULT NULL
        )
IS

RCPACKAGE  TYRCTMPOBJECTCONFIG;

PRAGMA AUTONOMOUS_TRANSACTION;

BEGIN
    UT_TRACE.TRACE ('mo_boConfigurationControl.LoadPackageConfiguration INICIO ['|| INUPACKAGETYPE ||']', 1);

    MO_BOINSERTCONFIGURATION.ENTITYTRUNCATE ('MO_tmp_config_motive');

    NUOBJECTSEQUENCE := 0;

    OPEN CUPACKAGE (INUPACKAGETYPE);

        FETCH CUPACKAGE INTO RCPACKAGE;
        IF CUPACKAGE%NOTFOUND THEN
            ERRORS.SETERROR (CNUNOT_PACKAGE_CONFIGURATION, TO_CHAR (INUPACKAGETYPE) ||'-'|| DAPS_PACKAGE_TYPE.FSBGETDESCRIPTION (INUPACKAGETYPE));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        LOADPACKAGECONFIGURATION (RCPACKAGE,INUPRODUCTTYPE);

    CLOSE CUPACKAGE;

    COMMIT;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        ROLLBACK;
        IF CUPACKAGE%ISOPEN THEN
            CLOSE CUPACKAGE;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        ROLLBACK;
        IF CUPACKAGE%ISOPEN THEN
            CLOSE CUPACKAGE;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE LOADCONFIGURATION
(
    IRCRECORD IN TYRCCONFIGRECORD
)
IS

TBTMPRECORD   TYTBCONFIGRECORD;

BEGIN

    TBTMPRECORD.DELETE;

    OPEN CUOBJECTCHILD (IRCRECORD.ELEMENT_ID);
    
    LOOP
        FETCH CUOBJECTCHILD INTO TBTMPRECORD(TBTMPRECORD.COUNT);
        EXIT WHEN CUOBJECTCHILD%NOTFOUND;
    END LOOP;
    
    CLOSE CUOBJECTCHILD;

    TBCONFIGRECORD(TBCONFIGRECORD.COUNT) := IRCRECORD;

    IF TBTMPRECORD.COUNT != 0 THEN
        FOR NUINDEX IN TBTMPRECORD.FIRST..TBTMPRECORD.LAST LOOP
            LOADCONFIGURATION (TBTMPRECORD(NUINDEX));
        END LOOP;
    END IF;

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        IF CUOBJECTCHILD%ISOPEN THEN
            CLOSE CUOBJECTCHILD;
        END IF;
        RAISE ;

    WHEN OTHERS THEN
        IF CUOBJECTCHILD%ISOPEN THEN
            CLOSE CUOBJECTCHILD;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE LOADOBJECTCONFIGURATION
(
    ISBOBJECTTYPE   IN VARCHAR2,
    INUOBJECTTYPEID IN NUMBER
)
IS

RCRECORD       TYRCCONFIGRECORD;
SBDESCRIPTION  VARCHAR2(200);

BEGIN

    TBCONFIGRECORD.DELETE;

    OPEN CUOBJECTCONFIGURATION (ISBOBJECTTYPE, INUOBJECTTYPEID);
        FETCH CUOBJECTCONFIGURATION INTO RCRECORD;

        IF CUOBJECTCONFIGURATION%NOTFOUND THEN
            CLOSE CUOBJECTCONFIGURATION;

            IF ISBOBJECTTYPE = NUPACKAGEOBJECT THEN
                SBDESCRIPTION := DAPS_PACKAGE_TYPE.FSBGETDESCRIPTION (INUOBJECTTYPEID);

            ELSIF ISBOBJECTTYPE = NUMOTIVEOBJECT THEN
                SBDESCRIPTION := DAPS_PRODUCT_MOTIVE.FSBGETDESCRIPTION (INUOBJECTTYPEID);

            ELSIF ISBOBJECTTYPE = NUCOMPONENTOBJECT THEN
                SBDESCRIPTION := DAPS_PROD_MOTIVE_COMP.FSBGETDESCRIPTION (INUOBJECTTYPEID);
            END IF;

            ERRORS.SETERROR (MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_NOT_CONFIG_OBJECT, TO_CHAR (INUOBJECTTYPEID) ||'-'|| SBDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    CLOSE CUOBJECTCONFIGURATION;

    LOADCONFIGURATION (RCRECORD);

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        IF CUOBJECTCONFIGURATION%ISOPEN THEN
            CLOSE CUOBJECTCONFIGURATION;
        END IF;
        RAISE ;

    WHEN OTHERS THEN
        IF CUOBJECTCONFIGURATION%ISOPEN THEN
            CLOSE CUOBJECTCONFIGURATION;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE DOWNOBJECTCONFIGURATION
IS
BEGIN

    TBCONFIGRECORD.DELETE;

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE GETFIRSTRECORD
(
    ORCRECORD OUT NOCOPY TYRCCONFIGRECORD
)
IS
BEGIN

    ORCRECORD := TBCONFIGRECORD(TBCONFIGRECORD.FIRST);
    
    NUCURRENTINDEX := TBCONFIGRECORD.FIRST;

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;
















FUNCTION FBLGETNEXTRECORD
(
    ORCRECORD OUT NOCOPY TYRCCONFIGRECORD
)
RETURN BOOLEAN
IS
BEGIN

    NUCURRENTINDEX := TBCONFIGRECORD.NEXT(NUCURRENTINDEX);
    
    IF NUCURRENTINDEX IS NULL THEN
        RETURN FALSE;
    END IF;
    
    ORCRECORD := TBCONFIGRECORD(NUCURRENTINDEX);
    
    RETURN TRUE;

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE GETCHILDRECORDS
(
    INUFATHER IN NUMBER,
    INUTYPE   IN NUMBER,
    OTBTARGET OUT NOCOPY TYTBCONFIGRECORD
)
IS
BEGIN

    IF TBCONFIGRECORD.COUNT = 0 THEN
        RETURN;
    END IF;

    OTBTARGET.DELETE;

    FOR NUINDEX IN TBCONFIGRECORD.FIRST..TBCONFIGRECORD.LAST LOOP
        IF TBCONFIGRECORD(NUINDEX).FATH_ELEM_ID = INUFATHER AND TBCONFIGRECORD(NUINDEX).ELEM_TYPE = INUTYPE THEN
           OTBTARGET(OTBTARGET.COUNT) := TBCONFIGRECORD(NUINDEX);
        END IF;
    END LOOP;

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE GETNODES
(
    INUFATHER IN NUMBER,
    OTBTARGET OUT NOCOPY TYTBCONFIGRECORD
)
IS
BEGIN

    GETCHILDRECORDS (INUFATHER, CNUNODE_TYPE, OTBTARGET);

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;















PROCEDURE GETATTRIBUTES
(
    INUFATHER IN NUMBER,
    OTBTARGET OUT NOCOPY TYTBCONFIGRECORD
)
IS
BEGIN

    GETCHILDRECORDS (INUFATHER, CNUATTRIBUTE_TYPE, OTBTARGET);

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;











PROCEDURE SETPACKAGEOBJECT
(
    INUPACKAGEOBJECT IN NUMBER
)
IS
BEGIN

    NUPACKAGEOBJECT := INUPACKAGEOBJECT;

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;











PROCEDURE SETMOTIVEOBJECT
(
    INUMOTIVEOBJECT IN NUMBER
)
IS
BEGIN

    NUMOTIVEOBJECT := INUMOTIVEOBJECT;

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;











PROCEDURE SETCOMPONENTOBJECT
(
    INUCOMPONENTOBJECT IN NUMBER
)
IS
BEGIN

    NUCOMPONENTOBJECT := INUCOMPONENTOBJECT;

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;











PROCEDURE SETPROCESSOBJECT
(
    INUPROCESSOBJECT IN NUMBER
)
IS
BEGIN

    NUPROCESSOBJECT := INUPROCESSOBJECT;

EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;











FUNCTION FNUGETPACKAGEOBJECT
RETURN NUMBER
IS
BEGIN

    RETURN NUPACKAGEOBJECT;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;











FUNCTION FNUGETMOTIVEOBJECT
RETURN NUMBER
IS
BEGIN

    RETURN NUMOTIVEOBJECT;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;











FUNCTION FNUGETCOMPONENTOBJECT
RETURN NUMBER
IS
BEGIN
    RETURN NUCOMPONENTOBJECT;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;











FUNCTION FNUGETPROCESSOBJECT
RETURN NUMBER
IS
BEGIN
    RETURN NUPROCESSOBJECT;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE ;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;
















BEGIN
    NUPACKAGEOBJECT   := GE_BOENTITY.GETENTITYIDBYNAME ('PS_PACKAGE_TYPE');
    NUMOTIVEOBJECT    := GE_BOENTITY.GETENTITYIDBYNAME ('PS_PRODUCT_MOTIVE');
    NUCOMPONENTOBJECT := GE_BOENTITY.GETENTITYIDBYNAME ('PS_PROD_MOTIVE_COMP');
    
    NUPROCESSOBJECT := CNUPROCESS_OBJECT;

END MO_BOCONFIGURATIONCONTROL;