PACKAGE BODY TT_BOValidateRules AS








































































    
    
    
    
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO195395';

    
    CNUINDIVALREADYREPORTED    CONSTANT NUMBER(10) := 12183;
    
    CNUINDIVALREADYABSORBED    CONSTANT NUMBER(10) :=  8962;
    
    CNUMASSIVALREADYREPORTED   CONSTANT NUMBER(10) := 12202;
    
    
    CNUMASSIVALREADYREPORTEDMSS CONSTANT NUMBER(10) := 5467;
    
    CNUELEMENTALREADYREPORTED  CONSTANT NUMBER(10) := 12222;
    
    CNUADDRESSALREADYREPORTED  CONSTANT NUMBER(10) := 12523;
    
    CNUDAMAGETYPECONFNOTFOUND  CONSTANT NUMBER(10) := 117545;
    
    CNUPRODUCTSTATECUTNODAMAGE CONSTANT NUMBER(10) := 12162;
    
    CNUERR_2829                CONSTANT NUMBER(10) := 2829;
    
    CNUERR_2830                CONSTANT NUMBER(10) := 2830;
    
    CNUERR_3007                CONSTANT NUMBER(10) := 3007;
    
    
    CNUMSS_5746                CONSTANT NUMBER(10) := 5746;
    
    CNUDAMAGEELEMENTNOFINISH CONSTANT NUMBER(10) := 147014; 
    
    CNUNOREPAIRORDER         CONSTANT NUMBER(10) := 1570;
    
    
    
    
    
    GSBLASTREPORTEDPRODUCTS GE_BOUTILITIES.STYSTATEMENT;

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    
    


















    PROCEDURE VALELEMENTREPORTED
    IS
        SBELEMENTID         GE_BOINSTANCECONTROL.STYSBVALUE := NULL;
        SBPROCESSINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        SBDAMAGETYPEID      GE_BOINSTANCECONTROL.STYSBVALUE := NULL;
    BEGIN
        UT_TRACE.TRACE('Inicializa TT_BOValidateRules.ValElementReported',7);

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,TT_BOCONSTANTS.CSBTT_DAMAGE_ELEMENT,'ELEMENT_ID',NUINDEX) = GE_BOCONSTANTS.GETTRUE ) THEN

            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,TT_BOCONSTANTS.CSBTT_DAMAGE_ELEMENT,'ELEMENT_ID',SBELEMENTID);

            IF (SBELEMENTID IS NULL) THEN
                RETURN;
            END IF;

            IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,TT_BOCONSTANTS.CSBTT_DAMAGE,'REG_DAMAGE_TYPE_ID',NUINDEX) = GE_BOCONSTANTS.GETTRUE ) THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,TT_BOCONSTANTS.CSBTT_DAMAGE,'REG_DAMAGE_TYPE_ID',SBDAMAGETYPEID);
                IF (SBDAMAGETYPEID IS NULL) THEN
                    RETURN;
                END IF;
            END IF;

            TT_BCDAMAGEELEMENT.VALIDATEELEMENT
            (
                UT_CONVERT.FNUCHARTONUMBER(SBELEMENTID),
                UT_CONVERT.FNUCHARTONUMBER(SBDAMAGETYPEID)
            );

        END IF;

        UT_TRACE.TRACE('Finaliza TT_BOValidateRules.ValElementReported',7);

    EXCEPTION
	  WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
	  WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
    END VALELEMENTREPORTED;

    
    
    
    PROCEDURE VALADDRESSREPORTED
    IS
        SBPROCESSINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        SBPARSERADDRESSID   GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBELEMENTID         GE_BOINSTANCECONTROL.STYSBVALUE;
        NUPARSER            MO_ADDRESS.PARSER_ADDRESS_ID%TYPE;
        NUPACKAGE_TYPE_ID   MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
        NUMOTIVE_STATUS_ID  MO_PACKAGES.MOTIVE_STATUS_ID%TYPE;
        SBADDRESSID         GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
        UT_TRACE.TRACE('Inicializa TT_BOValidateRules.ValAddressReported',7);

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,TT_BOCONSTANTS.CSBTT_DAMAGE_ELEMENT,'ELEMENT_ID',SBELEMENTID);

        IF  (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'MO_PACKAGES','PRODUCT_ID',NUINDEX) = GE_BOCONSTANTS.GETTRUE ) THEN
            
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,'MO_PACKAGES','PRODUCT_ID',SBPRODUCTID);

        END IF;

        IF  (SBPRODUCTID IS NULL) AND (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'MO_MOTIVE','PRODUCT_ID',NUINDEX) = GE_BOCONSTANTS.GETTRUE ) THEN
            
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,'MO_MOTIVE','PRODUCT_ID',SBPRODUCTID);

        END IF;
        
        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'GI_PROCESS','ADDRESS_ID',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,'GI_PROCESS','ADDRESS_ID',SBADDRESSID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,'PARSER_ADDRESS_ID',SBADDRESSID,TRUE);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,'ADDRESS',DAAB_ADDRESS.FSBGETADDRESS(SBADDRESSID) ,TRUE);
        END IF;
        
        
        IF SBELEMENTID IS NOT NULL OR SBPRODUCTID IS NOT NULL THEN
           RETURN;
        END IF;

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYENTITYSTACK(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,NUINDEX) THEN
        
            IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,'PARSER_ADDRESS_ID',NUINDEX) THEN
            
            
            
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,'PARSER_ADDRESS_ID',SBPARSERADDRESSID);
                FOR RCDAMAGEBYADDRESS IN TT_BCDAMAGEELEMENT.CUEXISTDAMAGEBYPARSERADDRESS( UT_CONVERT.FNUCHARTONUMBER(SBPARSERADDRESSID) ) LOOP
                   GE_BOERRORS.SETERRORCODEARGUMENT
                    (
                        CNUADDRESSALREADYREPORTED,
                        RCDAMAGEBYADDRESS.PACKAGE_ID||'-'||DATT_DAMAGE_TYPE.FSBGETDESCRIPTION(
                        NVL(DATT_DAMAGE.FNUGETFINAL_DAMAGE_TYPE_ID(RCDAMAGEBYADDRESS.PACKAGE_ID),DATT_DAMAGE.FNUGETREG_DAMAGE_TYPE_ID(RCDAMAGEBYADDRESS.PACKAGE_ID)))
                        ||'|'||DAPS_MOTIVE_STATUS.FSBGETDESCRIPTION(DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(RCDAMAGEBYADDRESS.PACKAGE_ID))
                    );
                END LOOP;
            
            END IF;
        
        END IF;
        
        UT_TRACE.TRACE('Finaliza TT_BOValidateRules.ValAddressReported',7);

    EXCEPTION
	  WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
	  WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
    END VALADDRESSREPORTED;
    
    
    
    
    PROCEDURE VALTRAMPRODDAMAGE
    IS
        SBPRODUCTID         GE_BOINSTANCECONTROL.STYSBVALUE := NULL;
        SBPROCESSINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        NUREPORT_QUANTITY   TT_DAMAGE.REPORT_QUANTITY%TYPE;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        UT_TRACE.TRACE('Inicializa TT_BOValidateRules.ValTramProdDamage',7);
        
        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,NULL,'PR_PRODUCT','PRODUCT_ID',NUINDEX) = GE_BOCONSTANTS.GETTRUE ) THEN

            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,NULL,'PR_PRODUCT','PRODUCT_ID',SBPRODUCTID);
            UT_TRACE.TRACE('Inicializa TT_BOValidateRules.ValTramProdDamage sbProductId['||SBPRODUCTID||']',7);

            IF (SBPRODUCTID IS NULL) THEN
                COMMIT;
                RETURN;
            END IF;

            FOR RCPACKAGES IN MO_BCPACKAGES.CUPACKAGESBYPRODUCT(UT_CONVERT.FNUCHARTONUMBER(SBPRODUCTID)) LOOP

                IF  RCPACKAGES.PACKAGE_TYPE_ID = TT_BOCONSTANTS.CNUINDDAMAGE
                    AND RCPACKAGES.MOTIVE_STATUS_ID <> TT_BOCONSTANTS.CNUTTATTENSTATUS
                    AND RCPACKAGES.MOTIVE_STATUS_ID <> TT_BOCONSTANTS.CNUTTUNFOUNDEDSTATUS
                THEN
                    
                    NUREPORT_QUANTITY := DATT_DAMAGE.FNUGETREPORT_QUANTITY(RCPACKAGES.PACKAGE_ID);
                    NUREPORT_QUANTITY := NUREPORT_QUANTITY + 1;
                    DATT_DAMAGE.UPDREPORT_QUANTITY(RCPACKAGES.PACKAGE_ID,NUREPORT_QUANTITY);
                    COMMIT;
                    GE_BOERRORS.SETERRORCODEARGUMENT
                    (
                        CNUINDIVALREADYREPORTED,
                        RCPACKAGES.PACKAGE_ID||'-'||DATT_DAMAGE_TYPE.FSBGETDESCRIPTION(
                        NVL(DATT_DAMAGE.FNUGETFINAL_DAMAGE_TYPE_ID(RCPACKAGES.PACKAGE_ID), DATT_DAMAGE.FNUGETREG_DAMAGE_TYPE_ID(RCPACKAGES.PACKAGE_ID)))
                        ||'|'||DAPS_MOTIVE_STATUS.FSBGETDESCRIPTION(RCPACKAGES.MOTIVE_STATUS_ID)
                    );
                END IF;
            END LOOP;

            FOR RCDAMAGEPRODUCT IN TT_BCDAMAGEPRODUCT.CUDAMPRODBYPROD(UT_CONVERT.FNUCHARTONUMBER(SBPRODUCTID)) LOOP

                IF RCDAMAGEPRODUCT.DAMAGE_PRODU_STATUS <> TT_BOCONSTANTS.CSBCLOSEDAMAGESTATUS
                   AND RCDAMAGEPRODUCT.DAMAGE_PRODU_STATUS <> TT_BOCONSTANTS.CSBUNFOUNDEDDAMAGESTATUS
                THEN
                    COMMIT;
                    GE_BOERRORS.SETERRORCODEARGUMENT
                    (
                        CNUMASSIVALREADYREPORTED,
                        RCDAMAGEPRODUCT.PACKAGE_ID||'-'||DATT_DAMAGE_TYPE.FSBGETDESCRIPTION(
                        NVL(DATT_DAMAGE.FNUGETFINAL_DAMAGE_TYPE_ID(RCDAMAGEPRODUCT.PACKAGE_ID), DATT_DAMAGE.FNUGETREG_DAMAGE_TYPE_ID(RCDAMAGEPRODUCT.PACKAGE_ID)))
                        ||'|'||DAPS_MOTIVE_STATUS.FSBGETDESCRIPTION(DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(RCDAMAGEPRODUCT.PACKAGE_ID))
                    );
                END IF;

            END LOOP;

        END IF;

        COMMIT;

        UT_TRACE.TRACE('Finaliza TT_BOValidateRules.ValTramProdDamage',7);

    EXCEPTION
	  WHEN EX.CONTROLLED_ERROR THEN
        ROLLBACK;
        RAISE EX.CONTROLLED_ERROR;
	  WHEN OTHERS THEN
        ROLLBACK;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
    END VALTRAMPRODDAMAGE;


    





    PROCEDURE VALIDATEPRODUCTCUTSTATEBYPROD
    (
        INUPRODUCTID        PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('==> TT_BOValidateRules.ValidateProductCutStateByProd <INICIO>',8);
        UT_TRACE.TRACE('inuProductId : [' || INUPRODUCTID || ']', 10);

        
        IF (PKBCCONFESCO.FSBALLOWREGISTERDAMAGE(INUPRODUCTID)  = GE_BOCONSTANTS.CSBNO) THEN
            GE_BOERRORS.SETERRORCODE(CNUPRODUCTSTATECUTNODAMAGE);
        END IF;
        
        UT_TRACE.TRACE('==> TT_BOValidateRules.ValidateProductCutStateByProd <FIN>',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END VALIDATEPRODUCTCUTSTATEBYPROD;

    










    PROCEDURE VALIDATEPRODUCTCUTSTATE
    IS
        SBPRODUCTID         GE_BOINSTANCECONTROL.STYSBVALUE := NULL;
        SBPROCESSINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBIDINDEX           VARCHAR2(100);
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('==> TT_BOValidateRules.ValidateProductCutState Instance <INICIO>',8);
        
        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, 'PR_PRODUCT', 'PRODUCT_ID', SBIDINDEX) = GE_BOCONSTANTS.GETTRUE )THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, 'PR_PRODUCT', 'PRODUCT_ID', SBPRODUCTID);
        END IF;
        UT_TRACE.TRACE('--> [PR_PRODUCT_WI]  sbProductId: ['||SBPRODUCTID||'] ',6);

        
        IF (SBPRODUCTID IS NULL) THEN
            GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
            IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'MO_PACKAGES','PRODUCT_ID',NUINDEX) = GE_BOCONSTANTS.GETTRUE ) THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,'MO_PACKAGES','PRODUCT_ID', SBPRODUCTID);
            END IF;
            UT_TRACE.TRACE('--> [MO_PACKAGES_CI]  sbProductId: ['||SBPRODUCTID||'] ',6);
        END IF;
        
        
        IF (SBPRODUCTID IS NULL) THEN
            GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
            IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,'MO_MOTIVE','PRODUCT_ID',NUINDEX) = GE_BOCONSTANTS.GETTRUE ) THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,'MO_MOTIVE','PRODUCT_ID', SBPRODUCTID);
            END IF;
            UT_TRACE.TRACE('--> [MO_MOTIVE_CI]  sbProductId: ['||SBPRODUCTID||'] ',6);
        END IF;
        
        
        IF (SBPRODUCTID IS NULL) THEN
            UT_TRACE.TRACE('--> Sale sin validar debido a producto nulo. ',6);
            UT_TRACE.TRACE('==> TT_BOValidateRules.ValidateProductCutState Instance <FIN>',8);
            RETURN;
        END IF;

        NUPRODUCTID := UT_CONVERT.FNUCHARTONUMBER(SBPRODUCTID);

        
        VALIDATEPRODUCTCUTSTATEBYPROD(NUPRODUCTID);
        
        UT_TRACE.TRACE('==> TT_BOValidateRules.ValidateProductCutState Instance <FIN>',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    PROCEDURE VALIDATEELEMTYPEPRODTYPE
    (
        INUELEMENT_TYPE IN TT_ELE_TYP_PROD_TYP.ELEMENT_TYPE_ID%TYPE,
        INUPRODUCT_TYPE IN TT_ELE_TYP_PROD_TYP.PRODUCT_TYPE_ID%TYPE
    )
    IS
        RCCONF DATT_ELE_TYP_PROD_TYP.STYTT_ELE_TYP_PROD_TYP;
    
    BEGIN
        RCCONF := TT_BCELETYPPRODTY.FRCGETCONF(INUELEMENT_TYPE, INUPRODUCT_TYPE);
        IF RCCONF.ELE_TYP_PROD_TYP_ID IS NULL THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_2829,
                INUELEMENT_TYPE || ' - ' || DAIF_ELEMENT_TYPE.FSBGETDESCRIPTION(INUELEMENT_TYPE)
                || '|' || INUPRODUCT_TYPE  || ' - ' || PKTBLSERVICIO.FSBGETDESCRIPTION(INUPRODUCT_TYPE));
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END VALIDATEELEMTYPEPRODTYPE;
    
    
    PROCEDURE VALIDATEELEMTYPEDAMATYPE
    (
        INUELEMENT_TYPE IN TT_ACT_BY_ELEM_TYP.ELEMENT_TYPE_ID%TYPE,
        INUDAMAGE_TYPE  IN TT_ACT_BY_ELEM_TYP.DAMAGE_TYPE_ID%TYPE
    )
    IS
        TBCONF DATT_ACT_BY_ELEM_TYP.TYTBTT_ACT_BY_ELEM_TYP;

    BEGIN
        TBCONF := TT_BCACTBYELEMTYP.FTBGETCONF(INUELEMENT_TYPE, INUDAMAGE_TYPE);
        IF TBCONF.COUNT = 0 THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_2830,
                INUELEMENT_TYPE || ' - ' || DAIF_ELEMENT_TYPE.FSBGETDESCRIPTION(INUELEMENT_TYPE)
                || '|' || INUDAMAGE_TYPE  || ' - ' || DATT_DAMAGE_TYPE.FSBGETDESCRIPTION(INUDAMAGE_TYPE));
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END VALIDATEELEMTYPEDAMATYPE;
    
    
    PROCEDURE RESET
    IS
    BEGIN
        GSBLASTREPORTEDPRODUCTS := '';

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END RESET;

    



















    PROCEDURE VALIDATEASOCDAMPROD
    IS
        SBPACKAGE_ID            GE_BOUTILITIES.STYSTATEMENT;
        SBPORCENTAJE            GE_BOUTILITIES.STYSTATEMENT;
        NUPACKAGESTATUS         MO_PACKAGES.MOTIVE_STATUS_ID%TYPE;
        NUPACKAGETYPEID         MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
        
        NUPACKAGEID             TT_DAMAGE.PACKAGE_ID%TYPE;

        NUINDEX                 GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        UT_TRACE.TRACE('Inicia TT_BOValidateRules.ValidateAsocDamProd',8);
        
        IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK('WORK_INSTANCE',
                                                         NULL,
                                                         'MO_PACKAGES',
                                                         'PACKAGE_ID',
                                                         NUINDEX)) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE
                                (
                                'WORK_INSTANCE',
                                NULL,
                                'MO_PACKAGES',
                                'PACKAGE_ID',
                                SBPACKAGE_ID
                                );
            NUPACKAGEID := TO_NUMBER(SBPACKAGE_ID);
        END IF;
        
        
        TT_BOFAULT.VALFAULTTYPE(NUPACKAGEID);

        
        TT_BOFAULT.VALFAULTSTATUS(NUPACKAGEID);
        
        NUPACKAGESTATUS := DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(NUPACKAGEID);
        IF (NUPACKAGESTATUS NOT IN (TT_BOCONSTANTS.CNUTTDIAGREAPAIRORDERSTATUS,
                                    TT_BOCONSTANTS.CNUTTREPAIRORDERSTATUS,
                                    TT_BOCONSTANTS.CNUTTDIAGORDERSTATUS)) THEN
            GE_BOERRORS.SETERRORCODE(CNUNOREPAIRORDER); 
        END IF;

        
        TT_BOFAULT.VALISINFRASTRUCTURE(NUPACKAGEID);
        
        UT_TRACE.TRACE('Finaliza TT_BOValidateRules.ValidateAsocDamProd',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END VALIDATEASOCDAMPROD;

    




    PROCEDURE VALEXISTSPRODORELEM
    (
        ONUELEMENTID    OUT TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE,
        ONUPRODUCTID    OUT TT_DAMAGE_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        SBPROCESSINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        SBELEMENTID         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID         GE_BOINSTANCECONTROL.STYSBVALUE;
        
        NUCODE              IF_NODE.CODE%TYPE;
        NUTYPE              IF_NODE.ELEMENT_TYPE_ID%TYPE;
        NUCOMPOSITE         IF_NODE.COMPOSITE_CODE%TYPE;
        BLACTIVATIONAUTO   BOOLEAN := FALSE;
        NUELEMENTID         IF_NODE.ID%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('Inicia TT_BOValidateRules.ValExistsProdOrElem',15);
        
        IF NOT GE_BOINSTANCECONTROL.FBLISINITINSTANCECONTROL THEN
            ONUELEMENTID := '';
            ONUPRODUCTID := '';
            RETURN;
        END IF;
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(
                    SBPROCESSINSTANCE,
                    NULL,
                    'TT_DAMAGE_ELEMENT',
                    'ELEMENT_ID',
                    NUINDEX ) = GE_BOCONSTANTS.GETTRUE ) THEN
                    
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(
                    SBPROCESSINSTANCE,
                    NULL,
                    'TT_DAMAGE_ELEMENT',
                    'ELEMENT_ID',
                    SBELEMENTID);
                    
            
            IF SBELEMENTID IS NOT NULL THEN
                IF_BOELEMENT.GETTYPECODEANDCOMPOSITE(TO_NUMBER(SBELEMENTID),
                                                    NUCODE,
                                                    NUTYPE,
                                                    NUCOMPOSITE
                                                    );
                IF SM_BOSERVICEMEDIATION.FBLISELEMENTAUTOMATICACTIV(
                            TO_NUMBER(SBELEMENTID), NUTYPE, BLACTIVATIONAUTO, NUELEMENTID) THEN

                    ONUELEMENTID := SBELEMENTID;
                END IF;
            END IF;

        END IF;
        
        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(
                    SBPROCESSINSTANCE,
                    NULL,
                    'MO_PACKAGES',
                    'PRODUCT_ID',
                    NUINDEX ) = GE_BOCONSTANTS.GETTRUE ) THEN

            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(
                    SBPROCESSINSTANCE,
                    NULL,
                    'MO_PACKAGES',
                    'PRODUCT_ID',
                    SBPRODUCTID);
                    
        END IF;
        
        IF  (SBPRODUCTID IS NULL) AND ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(
                    SBPROCESSINSTANCE,
                    NULL,
                    'MO_MOTIVE',
                    'PRODUCT_ID',
                    NUINDEX ) = GE_BOCONSTANTS.GETTRUE ) THEN

            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(
                    SBPROCESSINSTANCE,
                    NULL,
                    'MO_MOTIVE',
                    'PRODUCT_ID',
                    SBPRODUCTID);

        END IF;


        
        IF SBPRODUCTID IS NOT NULL AND SM_BCEVENTS.FBLPRODHAVEEQUIPMENTAPROV(TO_NUMBER(SBPRODUCTID)) THEN
            ONUPRODUCTID := SBPRODUCTID;
        END IF;
        
        UT_TRACE.TRACE('Finaliza TT_BOValidateRules.ValExistsProdOrElem',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : OTHERS',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    















    PROCEDURE VALPRODABSORB
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
    BEGIN
        
        
        
        
        IF_BCPROCESSOUTAGE.VALIDATEPRODUCT(INUPRODUCTID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPRODABSORB;
END TT_BOVALIDATERULES;