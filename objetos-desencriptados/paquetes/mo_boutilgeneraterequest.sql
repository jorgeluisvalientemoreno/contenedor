PACKAGE BODY MO_BOUtilGenerateRequest AS

    



















    
    CSBVERSION            CONSTANT VARCHAR2(250)  := 'SAO433793';

    
    
    
    
    
    
    
    
    CSBNULLSTRING         CONSTANT  VARCHAR2(1) := '-';
    CSBDEF_SOURCE         CONSTANT  MO_EQUIPMENT.SOURCE_%TYPE := 'E';
    CNUONESECOND          CONSTANT  NUMBER := (1 / UT_DATE.CNUSECONDSBYDAY);

    
    
    
    GBLCONSECUTBYCOMPANY    BOOLEAN;
    GBLONLINE_COMMPLANCHG   BOOLEAN;
    GNUBILLCLASDOCREQ       NUMBER;
    GNUPACKNUMERATOR        NUMBER;

    GNUDEF_COMPANY          SISTEMA.SISTCODI%TYPE;
    GNUDEF_RECEPTIONTYPE    MO_PACKAGES.RECEPTION_TYPE_ID%TYPE;
    GNUDEF_PRIORITY         MO_PACKAGES.PRIORITY_ID%TYPE;

    GNUREGSTATUSPACK        PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
    GNUREGSTATUSMOTI        PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
    GNUREGSTATUSCOMP        PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
    
    GNUNULLSTATUSCOMP       PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
    GNUNULLSTATUSMOTI       PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
    GNUNULLSTATUSPACK       PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
    
    GNUATTENDPRODEXIST      PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
    
    GNUANSWERADDRESSID      CC_ATTENTION_DATA.ADDRESS_ID%TYPE;
    GNUCONTACTID            CC_ATTENTION_DATA.CONTACT_ID%TYPE;

    
    GNUEQUIPO               PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
    GNUSIMCARD              PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
    GNUCOMBO                PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
    
    
    GNUVOLRETIRETYPE        GE_RETIRE_TYPE.RETIRE_TYPE_ID%TYPE;

    
    GNUCAUS_CANCEL_REQUEST      CC_CAUSAL.CAUSAL_ID%TYPE;
    GNUCAUSAL_BUNDLING          CC_CAUSAL.CAUSAL_ID%TYPE;
    GNUCAUSAL_RETENTION         CC_CAUSAL.CAUSAL_ID%TYPE;
    GNUCAUSAL_RECOVER           CC_CAUSAL.CAUSAL_ID%TYPE;
    GNUCAUSAL_WAIT_PLAN_CHG     MO_BILL_DATA_CHANGE.COMM_PLAN_CHANG_CAUS%TYPE;
    GNUCAUSAL_ONLINE_PLAN_CHG   MO_BILL_DATA_CHANGE.COMM_PLAN_CHANG_CAUS%TYPE;


    
    GSBREQUEST_TAGNAME    PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBRECOVER_TAGNAME    PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    
    
    GSBBUNDLING_TAGNAME   PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBUNBUNDLING_TAGNAME PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBSALE_TAGNAME       PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBRETIRE_TAGNAME     PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBCOMPCHG_TAGNAME    PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBPLANCHG_TAGNAME    PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBSUBSCHG_TAGNAME    PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBADDRCHG_TAGNAME    PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBMOVE_TAGNAME       PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBINCLUNIT_TAGNAME   PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBPROMOASSIG_TAGNAME PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBNUMEPREF_TAGNAME   PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    
    
    GSBIUCHG_TAGNAME      PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    GSBUNBUND_TAGNAME     PS_PACKAGE_TYPE.TAG_NAME%TYPE;

    
    GNUREQUEST_TYPE       PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNURECOVER_TYPE       PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;

    
    GSBBUNDLING_TYPE      PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUUNBUNDLING_TYPE    PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUSALE_TYPE          PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNURETIRE_TYPE        PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUCOMPCHG_TYPE       PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUPLANCHG_TYPE       PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUSUBSCHG_TYPE       PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUADDRCHG_TYPE       PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUMOVE_TYPE          PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUINCLUNIT_TYPE      PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GSBPROMOASSIG_TYPE    PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUEQUIPCHNGPACKTYPE  PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNURECEPTIONTYPE      PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUNUMEPREF_TYPE      PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;

    
    GNUIUCHG_TYPE         PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    GNUUNBUND_TYPE        PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;

    
    
    
    
    GNUCOMPONENTNUMBER    NUMBER := 0;
    GTBFINALPERIODDATE    DAMO_MOTIVE.TYTBINITIAL_PROCESS_DATE;

    GDTPROCESSDATE        MO_PACKAGES.REQUEST_DATE%TYPE;
    GNUPERSONID           MO_PACKAGES.PERSON_ID%TYPE;
    GNUPOSID              MO_PACKAGES.OPERATING_UNIT_ID%TYPE;
    
    
    GNUDELIVERYID         MO_EQUIPMENT.DELIVERY_ID%TYPE;
    GNURETURNID           MO_EQUIPMENT.RETURN_ID%TYPE;
    GNUDELADDRESSID       AB_ADDRESS.ADDRESS_ID%TYPE;
    
    
    GNUEQUIPRENTCONDID    CC_RENTING_PLAN.RENTING_PLAN_ID%TYPE;
    GSBEQUIPSALEMODALITY  MO_EQUIPMENT.SALE_MODALITY%TYPE;
    GBOKEEPRENTINGCOND    BOOLEAN := FALSE;
    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    PROCEDURE LOADPARAMETERS
    IS
    BEGIN
        GNUEQUIPO   := PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEQUIPO;
        GNUSIMCARD  := PS_BOCOMPONENTTYPE.FNUGETSIMCARD;
        GNUCOMBO    := PS_BOCOMPONENTTYPE.FNUGETCOMBO;

        GNUDEF_RECEPTIONTYPE :=  GE_BOPARAMETER.FNUGET('IN_OFFICE_RECEP_TYPE');
        GNUDEF_PRIORITY      :=  GE_BOPARAMETER.FNUGET('DEFAULT_PRIORITY');
        GNUDEF_COMPANY       :=  GE_BOPARAMETER.FNUGET('DEFAULT_COMPANY');
        GNUBILLCLASDOCREQ    :=  PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE('BIL_CLASE_DOC_REQUEST');

        GNUREGSTATUSPACK     :=  MO_BOCONSTANTS.CNUSTATUS_REG_PACK;
        GNUREGSTATUSMOTI     :=  GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_MOT);
        GNUREGSTATUSCOMP     :=  GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
        
        GNUNULLSTATUSPACK    :=  GE_BOPARAMETER.FNUGET('STATUS_NULL_PACK');
        GNUNULLSTATUSMOTI    :=  GE_BOPARAMETER.FNUGET('STATUS_NULL_MOTIVE');
        GNUNULLSTATUSCOMP    :=  GE_BOPARAMETER.FNUGET('STATUS_NULL_COMP');
        
        GNUATTENDPRODEXIST   :=  GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI);
        
        
        GNUVOLRETIRETYPE     :=  GE_BOPARAMETER.FNUGET('RETIRETYPESC');
        
        
        GNUPACKNUMERATOR := GE_BOPARAMETER.FNUGET('NUMERADOR_SOLICITUD');
        
        GBLCONSECUTBYCOMPANY :=  (GE_BOPARAMETER.FSBGET('CONSECUT_BY_COMPANY') = GE_BOCONSTANTS.CSBYES);
        
        GBLONLINE_COMMPLANCHG := (MO_BOPARAMETER.FSBGETONLINE_COMMPLANCHG = GE_BOCONSTANTS.CSBYES);

        
        
        GNUCAUSAL_BUNDLING        :=  GE_BOPARAMETER.FNUGET('CAUSAL_BUNDLING');
        GNUCAUSAL_WAIT_PLAN_CHG   :=  GE_BOPARAMETER.FNUGET('CAUSAL_WAIT_PLAN_CHG');
        GNUCAUSAL_ONLINE_PLAN_CHG :=  GE_BOPARAMETER.FNUGET('CAUS_ONLINE_PLAN_CHG');
        GNUCAUS_CANCEL_REQUEST    :=  GE_BOPARAMETER.FNUGET('CAUS_CANCEL_REQUEST');
        GNUCAUSAL_RETENTION       :=  GE_BOPARAMETER.FNUGET('RETENTION_CAUSAL');
        GNUCAUSAL_RECOVER         :=  GE_BOPARAMETER.FNUGET('RECOVER_CAUSAL');

        GSBADDRCHG_TAGNAME    :=  GE_BOPARAMETER.FSBGET('ADDRESS_CHG_PATY');
        GSBSUBSCHG_TAGNAME    :=  GE_BOPARAMETER.FSBGET('SUBSCRIPTIONCHG_PATY');
        GSBIUCHG_TAGNAME      :=  GE_BOPARAMETER.FSBGET('INCLUNITPACK_PATY');
        GSBUNBUND_TAGNAME     :=  GE_BOPARAMETER.FSBGET('UNBUNDLING_PATY');


        
        GSBREQUEST_TAGNAME    :=  PS_BOPACKAGETYPE.FSBTAGNAMEFEASIBLESALE;
        GSBRECOVER_TAGNAME    :=  PS_BOPACKAGETYPE.FSBTAGNAMERECOVER;
        
        
        GSBSALE_TAGNAME       :=  PS_BOPACKAGETYPE.CSBTAGGENERSALE;
        GSBRETIRE_TAGNAME     :=  PS_BOPACKAGETYPE.CSBRETIREPRODUCT;
        GSBCOMPCHG_TAGNAME    :=  PS_BOPACKAGETYPE.CSBSERVCONDCHANG;
        GSBMOVE_TAGNAME       :=  PS_BOPACKAGETYPE.CSBMOVEPRODUCT;
        GSBPLANCHG_TAGNAME    :=  PS_BOPACKAGETYPE.CSBTAGPLANCHANG;
        GSBINCLUNIT_TAGNAME   :=  PS_BOPACKAGETYPE.CSBINCLUNITCHANG;
        GSBBUNDLING_TAGNAME   :=  PS_BOPACKAGETYPE.CSBBUNDLINGPROCESS;
        GSBUNBUNDLING_TAGNAME :=  PS_BOPACKAGETYPE.CSBUNBUNDLINGPROCESS;
        GSBPROMOASSIG_TAGNAME :=  PS_BOPACKAGETYPE.CSBTAGPROMOASSIGN;
        GSBNUMEPREF_TAGNAME   :=  PS_BOPACKAGETYPE.CSBTAGNUMEPREF;

        
        GNUSALE_TYPE        :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBSALE_TAGNAME);
        GNURETIRE_TYPE      :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBRETIRE_TAGNAME);
        GNUCOMPCHG_TYPE     :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBCOMPCHG_TAGNAME);
        GNUPLANCHG_TYPE     :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBPLANCHG_TAGNAME);
        GNUMOVE_TYPE        :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBMOVE_TAGNAME);
        GNUINCLUNIT_TYPE    :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBINCLUNIT_TAGNAME);
        GSBBUNDLING_TYPE    :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBBUNDLING_TAGNAME);
        GNUUNBUNDLING_TYPE  :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBUNBUNDLING_TAGNAME);
        GSBPROMOASSIG_TYPE  :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBPROMOASSIG_TAGNAME);
        GNUNUMEPREF_TYPE    :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBNUMEPREF_TAGNAME);

        GNUREQUEST_TYPE     :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBREQUEST_TAGNAME);
        GNURECOVER_TYPE     :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBRECOVER_TAGNAME);
        
        GNUADDRCHG_TYPE     :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBADDRCHG_TAGNAME);
        GNUSUBSCHG_TYPE     :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBSUBSCHG_TAGNAME);
        GNUIUCHG_TYPE       :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBIUCHG_TAGNAME);
        GNUUNBUND_TYPE      :=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(GSBUNBUND_TAGNAME);
        GNUEQUIPCHNGPACKTYPE:=  PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( PS_BOPACKAGETYPE.CSBTAGCAMB_EQUIPO );


    END;

    PROCEDURE INITPROCESS
    (
        IDTDATEID           IN      MO_PACKAGES.REQUEST_DATE%TYPE,
        INUPOSOPERUNITID    IN      MO_PACKAGES.POS_OPER_UNIT_ID%TYPE,
        INUPERSONID         IN      MO_PACKAGES.PERSON_ID%TYPE,
        INURECEPTIONTYPEID  IN      MO_PACKAGES.RECEPTION_TYPE_ID%TYPE,
        INUANSWERADDRESSID  IN      MO_PACKAGES.ADDRESS_ID%TYPE,
        INUCONTACTID        IN      MO_PACKAGES.CONTACT_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.InitProcess ['||UT_DATE.FSBSTR_DATE(IDTDATEID)||']['||INUPOSOPERUNITID||']['||INUPERSONID||']',2);

        GNUCOMPONENTNUMBER  := 1;
        GDTPROCESSDATE      := IDTDATEID;
        GNUPERSONID         := INUPERSONID;
        GNUPOSID            := INUPOSOPERUNITID;
        GNURECEPTIONTYPE    := INURECEPTIONTYPEID;
        GNUANSWERADDRESSID  := INUANSWERADDRESSID;
        GNUCONTACTID        := INUCONTACTID;

        IF (INURECEPTIONTYPEID IS NULL) THEN
            GNURECEPTIONTYPE := GNUDEF_RECEPTIONTYPE;
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.InitProcess OK',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE SETDELIVERY
    (
        INUDELIVERYID          IN       CC_FORMA_ENTREGA.ID_FORMA_ENTREGA%TYPE,
        INURETURNID            IN       CC_FORMA_ENTREGA.ID_FORMA_ENTREGA%TYPE,
        INUDELIVERYADDRESSID   IN       AB_ADDRESS.ADDRESS_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetDelivery ['||INUDELIVERYID||']['||INURETURNID||']',2);
        GNUDELIVERYID       := INUDELIVERYID;
        GNURETURNID         := INURETURNID;
        GNUDELADDRESSID        := INUDELIVERYADDRESSID;
        UT_TRACE.TRACE('Termina MO_BOUtilGenerateRequest.SetDelivery OK',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FSBREQUEST_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBREQUEST_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBRECOVER_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBRECOVER_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBBUNDLING_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBBUNDLING_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBUNBUNDLING_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBUNBUNDLING_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION FSBINCLUNIT_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBINCLUNIT_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FSBNUMEPREF_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBNUMEPREF_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION FSBSALE_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBSALE_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBRETIRE_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBRETIRE_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBCOMPCHG_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBCOMPCHG_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBPLANCHG_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBPLANCHG_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBPROMOASSIG_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBPROMOASSIG_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBSUBSCHG_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBSUBSCHG_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBUNBUND_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBUNBUND_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBIUCHG_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBIUCHG_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBADDRCHG_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBADDRCHG_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBMOVE_TAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN GSBMOVE_TAGNAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUREQUEST_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUREQUEST_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNURECOVER_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNURECOVER_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUBUNDLING_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GSBBUNDLING_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUUNBUNDLING_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUUNBUNDLING_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUSALE_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUSALE_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNURETIRE_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNURETIRE_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUCOMPCHG_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUCOMPCHG_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUPROMOASSIG_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GSBPROMOASSIG_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUPLANCHG_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUPLANCHG_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUSUBSCHG_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUSUBSCHG_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUIUCHG_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUIUCHG_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUUNBUND_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUUNBUND_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION FNUADDRCHG_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUADDRCHG_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUMOVE_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUMOVE_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION FNUINCLUNIT_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUINCLUNIT_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION  FNUNUMEPREF_TYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUNUMEPREF_TYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    FUNCTION FNUREGSTATUSPACK
    RETURN PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE
    IS
    BEGIN
        RETURN GNUREGSTATUSPACK;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUREGSTATUSMOTI
    RETURN PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE
    IS
    BEGIN
        RETURN GNUREGSTATUSMOTI;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUREGSTATUSCOMP
    RETURN PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE
    IS
    BEGIN
        RETURN GNUREGSTATUSCOMP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUNULLSTATUSPACK
    RETURN PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE
    IS
    BEGIN
        RETURN GNUNULLSTATUSPACK;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUNULLSTATUSMOTI
    RETURN PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE
    IS
    BEGIN
        RETURN GNUNULLSTATUSMOTI;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUNULLSTATUSCOMP
    RETURN PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE
    IS
    BEGIN
        RETURN GNUNULLSTATUSCOMP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FNUATTENDPRODEXIST
    RETURN PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE
    IS
    BEGIN
        RETURN GNUATTENDPRODEXIST;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUCAUSAL_BUNDLING
    RETURN CC_CAUSAL.CAUSAL_ID%TYPE
    IS
    BEGIN
        RETURN GNUCAUSAL_BUNDLING;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCAUSAL_BUNDLING;

    FUNCTION FNUCAUS_CANCEL_REQUEST
    RETURN CC_CAUSAL.CAUSAL_ID%TYPE
    IS
    BEGIN
        RETURN GNUCAUS_CANCEL_REQUEST;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCAUS_CANCEL_REQUEST;

    FUNCTION FNUCAUSAL_RETENTION
    RETURN CC_CAUSAL.CAUSAL_ID%TYPE
    IS
    BEGIN
        RETURN GNUCAUSAL_RETENTION;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCAUSAL_RETENTION;

    FUNCTION FNUCAUSAL_RECOVER
    RETURN CC_CAUSAL.CAUSAL_ID%TYPE
    IS
    BEGIN
        RETURN GNUCAUSAL_RECOVER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCAUSAL_RECOVER;
    
    FUNCTION FNUCAUSAL_BILL_DATA_CHG
    RETURN MO_BILL_DATA_CHANGE.COMM_PLAN_CHANG_CAUS%TYPE
    IS
    BEGIN
        IF (GBLONLINE_COMMPLANCHG) THEN
            RETURN GNUCAUSAL_ONLINE_PLAN_CHG;
        END IF;
        RETURN GNUCAUSAL_WAIT_PLAN_CHG;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE REGPACKAGEASSO
    (
        INUPACKAGEID        IN      MO_PACKAGES_ASSO.PACKAGE_ID%TYPE,
        INUPACKAGEIDASSO    IN      MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE,
        ISBANNULDEPENDENT   IN      MO_PACKAGES_ASSO.ANNUL_DEPENDENT%TYPE
    )
    IS
        RCMO_PACKAGES_ASSO          DAMO_PACKAGES_ASSO.STYMO_PACKAGES_ASSO;
    BEGIN

        IF (DAMO_PACKAGES.FBLEXIST(INUPACKAGEID)) AND (DAMO_PACKAGES.FBLEXIST(INUPACKAGEIDASSO)) THEN
            RCMO_PACKAGES_ASSO.PACKAGES_ASSO_ID := MO_BOSEQUENCES.FNUGETSEQ_MO_PACKAGES_ASSO;
            RCMO_PACKAGES_ASSO.PACKAGE_ID       := INUPACKAGEID;
            RCMO_PACKAGES_ASSO.PACKAGE_ID_ASSO  := INUPACKAGEIDASSO;
            RCMO_PACKAGES_ASSO.ANNUL_DEPENDENT  := ISBANNULDEPENDENT;
            DAMO_PACKAGES_ASSO.INSRECORD(RCMO_PACKAGES_ASSO);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGPACKAGEASSO;

    PROCEDURE REGMOTIVEASSO
    (
        INUMOTIVEID        IN      MO_MOTIVE_ASSO.MOTIVE_ID%TYPE,
        INUMOTIVEIDASSO    IN      MO_MOTIVE_ASSO.MOTIVE_ID_ASSO%TYPE,
        ISBANNULDEPENDENT  IN      MO_MOTIVE_ASSO.ANNUL_DEPENDENT%TYPE
    )
    IS
        RCMO_MOTIVE_ASSO        DAMO_MOTIVE_ASSO.STYMO_MOTIVE_ASSO;
    BEGIN
        IF (DAMO_MOTIVE.FBLEXIST(INUMOTIVEID)) AND (DAMO_MOTIVE.FBLEXIST(INUMOTIVEIDASSO)) THEN
            RCMO_MOTIVE_ASSO.MOTIVE_ASSO_ID := MO_BOSEQUENCES.FNUGETSEQ_MO_MOTIVE_ASSO;
            RCMO_MOTIVE_ASSO.MOTIVE_ID      := INUMOTIVEID;
            RCMO_MOTIVE_ASSO.MOTIVE_ID_ASSO := INUMOTIVEIDASSO;
            RCMO_MOTIVE_ASSO.ANNUL_DEPENDENT:= ISBANNULDEPENDENT;
            DAMO_MOTIVE_ASSO.INSRECORD(RCMO_MOTIVE_ASSO);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGMOTIVEASSO;

    PROCEDURE REGCOMPONENTASSO
    (
        INUCOMPONENTID        IN      MO_COMPONENT_ASSO.COMPONENT_ID%TYPE,
        INUCOMPONENTIDASSO    IN      MO_COMPONENT_ASSO.COMPONENT_ID_ASSO%TYPE,
        ISBANNULDEPENDENT     IN      MO_COMPONENT_ASSO.ANNUL_DEPENDENT%TYPE
    )
    IS
        RCMO_COMPONENT_ASSO     DAMO_COMPONENT_ASSO.STYMO_COMPONENT_ASSO;
    BEGIN
        IF (DAMO_COMPONENT.FBLEXIST(INUCOMPONENTID)) AND (DAMO_COMPONENT.FBLEXIST(INUCOMPONENTIDASSO)) THEN
            RCMO_COMPONENT_ASSO.COMPONENT_ASSO_ID := MO_BOSEQUENCES.FNUGETSEQ_MO_COMPONENT_ASSO;
            RCMO_COMPONENT_ASSO.COMPONENT_ID      := INUCOMPONENTID;
            RCMO_COMPONENT_ASSO.COMPONENT_ID_ASSO := INUCOMPONENTIDASSO;
            RCMO_COMPONENT_ASSO.ANNUL_DEPENDENT   := ISBANNULDEPENDENT;
            DAMO_COMPONENT_ASSO.INSRECORD(RCMO_COMPONENT_ASSO);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGCOMPONENTASSO;


    


















    PROCEDURE SETBILLDATACHANGE
    (
        INUPACKAGEID        IN          MO_PACKAGES.PACKAGE_ID%TYPE,
        IRCOLDPRODUCT       IN          DAPR_PRODUCT.STYPR_PRODUCT,
        IRCNEWPRODUCT       IN          DAPR_PRODUCT.STYPR_PRODUCT
    )
    IS
        RCBILLDATACHANGE    DAMO_BILL_DATA_CHANGE.STYMO_BILL_DATA_CHANGE;
        NUBILLDATACHANGE    MO_BILL_DATA_CHANGE.BILL_DATA_CHANGE_ID%TYPE;
        
        BLSAVE              BOOLEAN := FALSE;
    BEGIN
        
        NUBILLDATACHANGE := MO_BOBILLINGDATACHANGE.FNUGETRECIDBYPACKID(INUPACKAGEID);
        IF (NUBILLDATACHANGE IS NOT NULL) THEN
            RCBILLDATACHANGE := DAMO_BILL_DATA_CHANGE.FRCGETRECORD(NUBILLDATACHANGE);
        END IF;

        
        IF (IRCOLDPRODUCT.COMMERCIAL_PLAN_ID <> IRCNEWPRODUCT.COMMERCIAL_PLAN_ID) THEN
            BLSAVE := TRUE;
            RCBILLDATACHANGE.OLD_COMMERCIAL_PLAN_ID := IRCOLDPRODUCT.COMMERCIAL_PLAN_ID;
            RCBILLDATACHANGE.NEW_COMMERCIAL_PLAN_ID := IRCNEWPRODUCT.COMMERCIAL_PLAN_ID;
        END IF;
        
        
        IF (IRCOLDPRODUCT.CATEGORY_ID||'a' <> IRCNEWPRODUCT.CATEGORY_ID||'a' ) THEN
            BLSAVE := TRUE;
            RCBILLDATACHANGE.OLD_CATEGORY_ID := IRCOLDPRODUCT.CATEGORY_ID;
            RCBILLDATACHANGE.NEW_CATEGORY_ID := IRCNEWPRODUCT.CATEGORY_ID;
        END IF;

        IF (IRCOLDPRODUCT.SUBCATEGORY_ID||'a' <> IRCNEWPRODUCT.SUBCATEGORY_ID||'a') THEN
            BLSAVE := TRUE;
            RCBILLDATACHANGE.OLD_SUBCATEGORY_ID := IRCOLDPRODUCT.SUBCATEGORY_ID;
            RCBILLDATACHANGE.NEW_SUBCATEGORY_ID := IRCNEWPRODUCT.SUBCATEGORY_ID;
        END IF;

        
        IF (IRCOLDPRODUCT.SUBSCRIPTION_ID <> IRCNEWPRODUCT.SUBSCRIPTION_ID) THEN
            BLSAVE := TRUE;
            RCBILLDATACHANGE.OLD_SUBSCRIPTION := IRCOLDPRODUCT.SUBSCRIPTION_ID;
            RCBILLDATACHANGE.NEW_SUBSCRIPTION := IRCNEWPRODUCT.SUBSCRIPTION_ID;
        END IF;
        
        
        IF (IRCOLDPRODUCT.COMPANY_ID <> IRCNEWPRODUCT.COMPANY_ID) THEN
            BLSAVE := TRUE;
            RCBILLDATACHANGE.OLD_COMPANY_ID := IRCOLDPRODUCT.COMPANY_ID;
            RCBILLDATACHANGE.NEW_COMPANY_ID := IRCNEWPRODUCT.COMPANY_ID;
        END IF;

        IF (BLSAVE) THEN
            IF (NUBILLDATACHANGE IS NOT NULL) THEN
                DAMO_BILL_DATA_CHANGE.UPDRECORD(RCBILLDATACHANGE);
            ELSE
                RCBILLDATACHANGE.PACKAGE_ID := INUPACKAGEID;
                RCBILLDATACHANGE.BILL_DATA_CHANGE_ID := MO_BOSEQUENCES.FNUGETSEQ_MO_BILL_DATA_CHANGE;
                DAMO_BILL_DATA_CHANGE.INSRECORD(RCBILLDATACHANGE);
            END IF;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCMOTIVE.CUMOTIVESBYPACKAGE%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESBYPACKAGE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (MO_BCMOTIVE.CUMOTIVESBYPACKAGE%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESBYPACKAGE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
  
    

















    PROCEDURE SETCOMPANY
    (
        INUPACKAGEID     IN     MO_PACKAGES.PACKAGE_ID%TYPE,
        INUCOMPANYID     IN     MO_PACKAGES.COMPANY_ID%TYPE
    )
    IS
        RCMO_PACKAGES    DAMO_PACKAGES.STYMO_PACKAGES;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetCompany ['||INUPACKAGEID||'] ['||INUCOMPANYID||']',18);

        IF (INUCOMPANYID IS NULL) THEN
            RETURN;
        END IF;

        RCMO_PACKAGES := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);
        RCMO_PACKAGES.COMPANY_ID := INUCOMPANYID;

        
        IF (GBLCONSECUTBYCOMPANY) AND (INUCOMPANYID IS NOT NULL) THEN
            
            RCMO_PACKAGES.CUST_CARE_REQUES_NUM := NVL(GE_BONUMERATOR.NEXTNUMERATOR(GNUPACKNUMERATOR), RCMO_PACKAGES.CUST_CARE_REQUES_NUM);
        END IF;

        DAMO_PACKAGES.UPDRECORD(RCMO_PACKAGES);

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.SetCompany - OK',18);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE SETANULLEDPACKAGES
    (
        INUANNULPACKID      IN      MO_PACK_ANNUL_DETAIL.ANNUL_PACKAGE_ID%TYPE,
        INUPACKAGEID        IN      MO_PACK_ANNUL_DETAIL.PACKAGE_ID%TYPE
    )
    IS
        RCPACK_ANNUL_DETAIL      DAMO_PACK_ANNUL_DETAIL.STYMO_PACK_ANNUL_DETAIL;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetAnulledPackages ['||INUANNULPACKID||']['||INUPACKAGEID||']',19);

        RCPACK_ANNUL_DETAIL.ANNUL_PACKAGE_ID     :=  INUANNULPACKID;
        RCPACK_ANNUL_DETAIL.PACKAGE_ID           :=  INUPACKAGEID;
        RCPACK_ANNUL_DETAIL.PACK_ANNUL_DETAIL_ID :=  MO_BOSEQUENCES.FNUGETPACK_ANNUL_DETAIL;

        DAMO_PACK_ANNUL_DETAIL.INSRECORD(RCPACK_ANNUL_DETAIL);

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.SetAnulledPackages - OK',19);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE SETANULLEDCOMPONENT
    (
        INUANNULPACKID      IN      MO_PACK_ANNUL_DETAIL.ANNUL_PACKAGE_ID%TYPE,
        INUPACKAGEID        IN      MO_PACK_ANNUL_DETAIL.PACKAGE_ID%TYPE,
        INUCOMPONENTID      IN      MO_PACK_ANNUL_DETAIL.COMPONENT_ID%TYPE
    )
    IS
        RCPACK_ANNUL_DETAIL      DAMO_PACK_ANNUL_DETAIL.STYMO_PACK_ANNUL_DETAIL;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetAnulledComponent ['||INUANNULPACKID||']['||INUPACKAGEID||']['||INUCOMPONENTID||']',19);

        RCPACK_ANNUL_DETAIL.ANNUL_PACKAGE_ID     :=  INUANNULPACKID;
        RCPACK_ANNUL_DETAIL.PACKAGE_ID           :=  INUPACKAGEID;
        RCPACK_ANNUL_DETAIL.COMPONENT_ID         :=  INUCOMPONENTID;
        RCPACK_ANNUL_DETAIL.PACK_ANNUL_DETAIL_ID :=  MO_BOSEQUENCES.FNUGETPACK_ANNUL_DETAIL;

        DAMO_PACK_ANNUL_DETAIL.INSRECORD(RCPACK_ANNUL_DETAIL);

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.SetAnulledComponent - OK',19);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    





















    PROCEDURE GETRECREQUESTBASIC
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUPACKTYPEID       IN  MO_PACKAGES.PACKAGE_TYPE_ID%TYPE,
        ISBTAGNAME          IN  MO_PACKAGES.TAG_NAME%TYPE,
        IDTREGISTERDATE     IN  MO_PACKAGES.REQUEST_DATE%TYPE,
        INUMOTISTATUSID     IN  MO_PACKAGES.MOTIVE_STATUS_ID%TYPE,
        INUPOSOPERUNITID    IN  MO_PACKAGES.POS_OPER_UNIT_ID%TYPE,
        INUPERSONID         IN  MO_PACKAGES.PERSON_ID%TYPE,
        INUSUBSCRIBERID     IN  MO_PACKAGES.SUBSCRIBER_ID%TYPE,
        INUCOMPANYID        IN  MO_PACKAGES.COMPANY_ID%TYPE,
        ISBCOMMENT          IN  MO_PACKAGES.COMMENT_%TYPE,
        INUCUSTCAREREQNUM   IN  MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE,
        INUANSID            IN  MO_PACKAGES.ANS_ID%TYPE,
        INUDOCTYPEID        IN  MO_PACKAGES.DOCUMENT_TYPE_ID%TYPE,
        INUDOCKEY           IN  MO_PACKAGES.DOCUMENT_KEY%TYPE,
        INURECEPTYPEID      IN  MO_PACKAGES.RECEPTION_TYPE_ID%TYPE,
        INUADDRESSID        IN  MO_PACKAGES.ADDRESS_ID%TYPE,
        INUCONTACTID        IN  MO_PACKAGES.CONTACT_ID%TYPE,
        INULIQUIDMETHOD     IN  MO_PACKAGES.LIQUIDATION_METHOD%TYPE,
        ORCMO_PACKAGES      OUT DAMO_PACKAGES.STYMO_PACKAGES
    )
    IS
        RCPACKAGETYPE       DAPS_PACKAGE_TYPE.STYPS_PACKAGE_TYPE;

        FUNCTION FRCGETPACKAGETYPE
        RETURN DAPS_PACKAGE_TYPE.STYPS_PACKAGE_TYPE
        IS
        BEGIN
            IF  (RCPACKAGETYPE.PACKAGE_TYPE_ID IS NULL) THEN

                IF  (INUPACKTYPEID IS NOT NULL) THEN
                    RCPACKAGETYPE := DAPS_PACKAGE_TYPE.FRCGETRECORD(INUPACKTYPEID);
                ELSIF (ISBTAGNAME IS NOT NULL) THEN
                    RCPACKAGETYPE := DAPS_PACKAGE_TYPE.FRCGETRECORD(PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME(ISBTAGNAME));
                ELSE
                    DAPS_PACKAGE_TYPE.ACCKEY(INUPACKTYPEID);
                END IF;
                
            END IF;

            RETURN RCPACKAGETYPE;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FRCGETPACKAGETYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.GetRecRequestBasic',5);

        ORCMO_PACKAGES.PACKAGE_ID           := INUPACKAGEID;
        ORCMO_PACKAGES.PACKAGE_TYPE_ID      := INUPACKTYPEID;
        ORCMO_PACKAGES.CUST_CARE_REQUES_NUM := INUCUSTCAREREQNUM;
        ORCMO_PACKAGES.SUBSCRIBER_ID        := INUSUBSCRIBERID;
        ORCMO_PACKAGES.REQUEST_DATE         := NVL(IDTREGISTERDATE, GDTPROCESSDATE);
        ORCMO_PACKAGES.TAG_NAME             := ISBTAGNAME;
        ORCMO_PACKAGES.PERSON_ID            := NVL(INUPERSONID, GNUPERSONID);
        ORCMO_PACKAGES.USER_ID              := UT_SESSION.GETUSER;
        ORCMO_PACKAGES.TERMINAL_ID          := UT_SESSION.GETTERMINAL;
        ORCMO_PACKAGES.CONTACT_ID           := NVL(INUCONTACTID, GNUCONTACTID);
        ORCMO_PACKAGES.RECEPTION_TYPE_ID    := NVL(INURECEPTYPEID, NVL(GNURECEPTIONTYPE, GNUDEF_RECEPTIONTYPE));
        ORCMO_PACKAGES.ADDRESS_ID           := NVL(INUADDRESSID, GNUANSWERADDRESSID);
        ORCMO_PACKAGES.COMPANY_ID           := INUCOMPANYID;
        ORCMO_PACKAGES.MOTIVE_STATUS_ID     := NVL(INUMOTISTATUSID, GNUREGSTATUSPACK);
        ORCMO_PACKAGES.POS_OPER_UNIT_ID     := NVL(INUPOSOPERUNITID, GNUPOSID);
        ORCMO_PACKAGES.SALE_CHANNEL_ID      := ORCMO_PACKAGES.POS_OPER_UNIT_ID;
        ORCMO_PACKAGES.ANS_ID               := INUANSID;
        ORCMO_PACKAGES.CLIENT_PRIVACY_FLAG  := GE_BOCONSTANTS.CSBNO;
        ORCMO_PACKAGES.COMM_EXCEPTION       := GE_BOCONSTANTS.CSBNO;
        ORCMO_PACKAGES.DOCUMENT_TYPE_ID     := INUDOCTYPEID;
        ORCMO_PACKAGES.DOCUMENT_KEY         := INUDOCKEY;
        ORCMO_PACKAGES.COMMENT_             := ISBCOMMENT;
        ORCMO_PACKAGES.LIQUIDATION_METHOD   := INULIQUIDMETHOD;

        IF  (ORCMO_PACKAGES.PACKAGE_ID IS NULL) THEN
            ORCMO_PACKAGES.PACKAGE_ID       := MO_BOSEQUENCES.FNUGETPACKAGEID;
        END IF;
        
        IF  (ORCMO_PACKAGES.CUST_CARE_REQUES_NUM IS NULL) THEN
            ORCMO_PACKAGES.CUST_CARE_REQUES_NUM := ORCMO_PACKAGES.PACKAGE_ID;
        END IF;

        IF  (ORCMO_PACKAGES.REQUEST_DATE IS NULL) THEN
            ORCMO_PACKAGES.REQUEST_DATE     := UT_DATE.FDTSYSDATE;
        END IF;

        IF  (ORCMO_PACKAGES.PACKAGE_TYPE_ID IS NULL) THEN
            ORCMO_PACKAGES.PACKAGE_TYPE_ID  := FRCGETPACKAGETYPE().PACKAGE_TYPE_ID;
        END IF;

        IF  (ORCMO_PACKAGES.TAG_NAME IS NULL) THEN
            ORCMO_PACKAGES.TAG_NAME         := FRCGETPACKAGETYPE().TAG_NAME;
        END IF;

        IF  (ORCMO_PACKAGES.PERSON_ID IS NULL) THEN
            ORCMO_PACKAGES.PERSON_ID        := GE_BOPERSONAL.FNUGETPERSONID;
        END IF;

        IF  (ORCMO_PACKAGES.COMPANY_ID IS NULL) THEN
            ORCMO_PACKAGES.COMPANY_ID       := NVL(SA_BOSYSTEM.FNUGETUSERCOMPANYID, GNUDEF_COMPANY);
        END IF;

        IF  (ORCMO_PACKAGES.ANS_ID IS NULL) THEN
            ORCMO_PACKAGES.EXPECT_ATTEN_DATE:= ORCMO_PACKAGES.REQUEST_DATE;
        ELSE
            ORCMO_PACKAGES.EXPECT_ATTEN_DATE:= MO_BOUTILGENERATEREQUEST.FDTGETANSATTENDDATE(ORCMO_PACKAGES.ANS_ID, ORCMO_PACKAGES.REQUEST_DATE);
        END IF;

        IF  (ORCMO_PACKAGES.MOTIVE_STATUS_ID = MO_BOCONSTANTS.CNUSTATUS_ATTEND_PACK) THEN
            ORCMO_PACKAGES.ATTENTION_DATE   := ORCMO_PACKAGES.REQUEST_DATE;
        END IF;

        ORCMO_PACKAGES.MESSAG_DELIVERY_DATE := ORCMO_PACKAGES.REQUEST_DATE;

        UT_TRACE.TRACE('Fin: [ MO_BOUtilGenerateRequest.GetRecRequestBasic]['||ORCMO_PACKAGES.PACKAGE_ID||'] company['||ORCMO_PACKAGES.COMPANY_ID||']',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETRECREQUESTBASIC;



    





















































    PROCEDURE GENERATEPACKAGE
    (
        INUPACKAGEID        IN     MO_PACKAGES.PACKAGE_ID%TYPE,
        INUPACKTYPEID       IN     MO_PACKAGES.PACKAGE_TYPE_ID%TYPE,
        ISBTAGNAME          IN     MO_PACKAGES.TAG_NAME%TYPE,
        IDTREQUESTDATE      IN     MO_PACKAGES.REQUEST_DATE%TYPE,
        INUMOTISTATUSID     IN     MO_PACKAGES.MOTIVE_STATUS_ID%TYPE,
        INUPOSOPERUNITID    IN     MO_PACKAGES.POS_OPER_UNIT_ID%TYPE,
        INUPERSONID         IN     MO_PACKAGES.PERSON_ID%TYPE,
        INUSUBSCRIBERID     IN     MO_PACKAGES.SUBSCRIBER_ID%TYPE,
        INUCOMPANYID        IN     MO_PACKAGES.COMPANY_ID%TYPE,
        ISBCOMMENT          IN     MO_PACKAGES.COMMENT_%TYPE,
        INUCUSTCAREREQNUM   IN     MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE,
        INUANSID            IN     MO_PACKAGES.ANS_ID%TYPE,
        INUDOCTYPEID        IN     MO_PACKAGES.DOCUMENT_TYPE_ID%TYPE,
        INUDOCKEY           IN     MO_PACKAGES.DOCUMENT_KEY%TYPE,
        INURECEPTIONTYPEID  IN     MO_PACKAGES.RECEPTION_TYPE_ID%TYPE,
        INUANSWERADDRESSID  IN     MO_PACKAGES.ADDRESS_ID%TYPE,
        INUCONTACTID        IN     MO_PACKAGES.CONTACT_ID%TYPE,
        INUPARENTPACK       IN     MO_PACKAGES_ASSO.PACKAGE_ID_ASSO%TYPE,
        ISBPARENTDEPENDENT  IN     MO_PACKAGES_ASSO.ANNUL_DEPENDENT%TYPE,
        ORCMO_PACKAGES      OUT    DAMO_PACKAGES.STYMO_PACKAGES,
        IBOPETITIONFLAG     IN     BOOLEAN DEFAULT TRUE,
        INULIQUIDMETHOD     IN     MO_PACKAGES.LIQUIDATION_METHOD%TYPE DEFAULT NULL
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.GeneratePackage['||ISBTAGNAME||'] Parent['||INUPARENTPACK||']',18);

        
        MO_BOUTILGENERATEREQUEST.GETRECREQUESTBASIC
        (
            INUPACKAGEID=>INUPACKAGEID,
            INUPACKTYPEID=>INUPACKTYPEID,
            ISBTAGNAME=>ISBTAGNAME,
            IDTREGISTERDATE=>IDTREQUESTDATE,
            INUMOTISTATUSID=>INUMOTISTATUSID,
            INUPOSOPERUNITID=>INUPOSOPERUNITID,
            INUPERSONID=>INUPERSONID,
            INUSUBSCRIBERID=>INUSUBSCRIBERID,
            INUCOMPANYID=>INUCOMPANYID,
            ISBCOMMENT=>ISBCOMMENT,
            INUCUSTCAREREQNUM=>INUCUSTCAREREQNUM,
            INUANSID=>INUANSID,
            INUDOCTYPEID=>INUDOCTYPEID,
            INUDOCKEY=>INUDOCKEY,
            INURECEPTYPEID=>INURECEPTIONTYPEID,
            INUADDRESSID=>INUANSWERADDRESSID,
            INUCONTACTID=>INUCONTACTID,
            INULIQUIDMETHOD=>INULIQUIDMETHOD,
            ORCMO_PACKAGES=>ORCMO_PACKAGES
        );

        
        DAMO_PACKAGES.INSRECORD(ORCMO_PACKAGES);

        
        IF (INUANSID IS NULL) THEN
            MO_BOPACKAGES.UPDPACKAGEANS( ORCMO_PACKAGES );
        END IF;

        
        IF (INUPARENTPACK IS NOT NULL) THEN
            MO_BOUTILGENERATEREQUEST.REGPACKAGEASSO(ORCMO_PACKAGES.PACKAGE_ID, INUPARENTPACK, ISBPARENTDEPENDENT);
        END IF;

        
        IF (IBOPETITIONFLAG) THEN
            CC_BOPETITIONMGR.REGISTERPETITION(ORCMO_PACKAGES.PACKAGE_ID);
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.GeneratePackage ['||ORCMO_PACKAGES.PACKAGE_ID||'] OK',18);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENERATEPACKAGE;

    






















    PROCEDURE REGPROMOTION
    (
        INUMOTIVEID         IN      MO_MOT_PROMOTION.MOTIVE_ID%TYPE,
        INUCOMPONENTID      IN      MO_MOT_PROMOTION.COMPONENT_ID%TYPE,
        INUPROMOTIONID      IN      MO_MOT_PROMOTION.PROMOTION_ID%TYPE
    )
    IS
        RCMOTPROMOTION      DAMO_MOT_PROMOTION.STYMO_MOT_PROMOTION;
    BEGIN

        RCMOTPROMOTION.MOT_PROMOTION_ID  := SEQ.GETNEXT('SEQ_MO_MOT_PROMOTIO_182911');
        RCMOTPROMOTION.MOTIVE_ID         := INUMOTIVEID;
        RCMOTPROMOTION.COMPONENT_ID      := INUCOMPONENTID;
        RCMOTPROMOTION.PROMOTION_ID      := INUPROMOTIONID;
        RCMOTPROMOTION.REGISTER_DATE     := SYSDATE;
        RCMOTPROMOTION.ACTIVE            := CC_BOCONSTANTS.CSBSI;

        DAMO_MOT_PROMOTION.INSRECORD(RCMOTPROMOTION);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGPROMOTION;

    PROCEDURE SETRETIRE
    (
        IRCMO_MOTIVE        IN      DAMO_MOTIVE.STYMO_MOTIVE
    )
    IS
        RCMORETIRE              DAMO_RETIRE.STYMO_RETIRE;
    BEGIN
        
        IF (IRCMO_MOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNURETIRE_MOTI_TYPE) THEN

            RCMORETIRE.REGISTER_DATE         := IRCMO_MOTIVE.MOTIV_RECORDING_DATE;
            RCMORETIRE.MOTIVE_ID             := IRCMO_MOTIVE.MOTIVE_ID;
            RCMORETIRE.RETIRE_TYPE_ID        := GNUVOLRETIRETYPE;

            DAMO_RETIRE.INSRECORD(RCMORETIRE);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE SETMOTIADDITDATA
    (
        IRCMO_MOTIVE        IN      DAMO_MOTIVE.STYMO_MOTIVE
    )
    IS
    BEGIN
        
        SETRETIRE(IRCMO_MOTIVE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    FUNCTION FNUGETMOTIPERMANENCE
    (
        INUMOTITYPEID   IN MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUCOMMPLANID   IN MO_MOTIVE.COMMERCIAL_PLAN_ID%TYPE
    )
    RETURN MO_MOTIVE.PERMANENCE%TYPE
    IS
    BEGIN
        
        IF  (INUCOMMPLANID IS NOT NULL) AND
            (INUMOTITYPEID IN (PS_BOMOTIVETYPE.FNUPLANCHANGE_MOTI_TYPE, MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE)) THEN
            RETURN DACC_COMMERCIAL_PLAN.FNUGETPERMANENCE(INUCOMMPLANID);
        ELSE
            RETURN NULL;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETMOTIPERMANENCE;

    


















    PROCEDURE GETRECMOTIVEBASIC
    (
        INUPRODMOTIID       IN  MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        ISBTAGNAME          IN  MO_MOTIVE.TAG_NAME%TYPE,
        IDTREGISTERDATE     IN  MO_MOTIVE.MOTIV_RECORDING_DATE%TYPE,
        INUMOTIVETYPEID     IN  MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUMOTISTATUSID     IN  MO_MOTIVE.MOTIVE_STATUS_ID%TYPE,
        INUPACKAGEID        IN  MO_MOTIVE.PACKAGE_ID%TYPE,
        ISBCUSTREQNUM       IN  MO_MOTIVE.CUST_CARE_REQUES_NUM%TYPE,
        INUCOMPANYID        IN  MO_MOTIVE.COMPANY_ID%TYPE,
        INUMOTICAUSAL       IN  MO_MOTIVE.CAUSAL_ID%TYPE,
        INUSUBSCRIPTIONID   IN  MO_MOTIVE.SUBSCRIPTION_ID%TYPE,
        INUPRODUCTID        IN  MO_MOTIVE.PRODUCT_ID%TYPE,
        INUPRODTYPEID       IN  MO_MOTIVE.PRODUCT_TYPE_ID%TYPE,
        ISBSERVICENUMBER    IN  MO_MOTIVE.SERVICE_NUMBER%TYPE,
        INUCOMMPLANID       IN  MO_MOTIVE.COMMERCIAL_PLAN_ID%TYPE,
        INUPERMANECE        IN  MO_MOTIVE.PERMANENCE%TYPE,
        INUCATEGORYID       IN  MO_MOTIVE.CATEGORY_ID%TYPE,
        INUSUBCATEGORYID    IN  MO_MOTIVE.SUBCATEGORY_ID%TYPE,
        ORCMO_MOTIVE        OUT DAMO_MOTIVE.STYMO_MOTIVE
    )
    IS
        RCPACKAGE           DAMO_PACKAGES.STYMO_PACKAGES;
        RCPRODMOTI          DAPS_PRODUCT_MOTIVE.STYPS_PRODUCT_MOTIVE;

        FUNCTION FRCGETPACKAGE
        RETURN DAMO_PACKAGES.STYMO_PACKAGES
        IS
        BEGIN
            IF  (RCPACKAGE.PACKAGE_ID IS NULL) THEN
                RCPACKAGE := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);
            END IF;

            RETURN RCPACKAGE;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FRCGETPACKAGE;

        FUNCTION FRCGETPRODMOTI
        RETURN DAPS_PRODUCT_MOTIVE.STYPS_PRODUCT_MOTIVE
        IS
        BEGIN
            IF  (RCPRODMOTI.PRODUCT_MOTIVE_ID IS NULL) THEN

                IF  (INUPRODMOTIID IS NOT NULL) THEN
                    RCPRODMOTI := PS_BOPRODSERVMANAGER.FRCGETPRODUCTMOTIVE(INUPRODMOTIID);
                ELSIF (ISBTAGNAME IS NOT NULL) THEN
                    RCPRODMOTI := PS_BOPRODSERVMANAGER.FRCGETPRODMOTIBYTAG(ISBTAGNAME);
                ELSIF (INUMOTIVETYPEID IS NOT NULL) THEN
                    RCPRODMOTI := PS_BOPRODUCTMOTIVE.FRCGETPRODMOTIBYPACKTYPE(FRCGETPACKAGE().PACKAGE_TYPE_ID, INUPRODTYPEID, INUMOTIVETYPEID, TRUE);
                ELSE
                    DAPS_PRODUCT_MOTIVE.ACCKEY(INUPRODMOTIID);
                END IF;

            END IF;

            RETURN RCPRODMOTI;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FRCGETPRODMOTI;
    BEGIN
        UT_TRACE.TRACE('Inicio: [ MO_BOUtilGenerateRequest.GetRecMotiveBasic]',10);

        
        ORCMO_MOTIVE.MOTIVE_ID               := MO_BOSEQUENCES.FNUGETMOTIVEID;
        ORCMO_MOTIVE.TAG_NAME                := ISBTAGNAME;
        ORCMO_MOTIVE.PRODUCT_MOTIVE_ID       := INUPRODMOTIID;
        ORCMO_MOTIVE.MOTIVE_TYPE_ID          := INUMOTIVETYPEID;
        ORCMO_MOTIVE.MOTIVE_STATUS_ID        := NVL(INUMOTISTATUSID, GNUREGSTATUSMOTI);
        ORCMO_MOTIVE.PACKAGE_ID              := INUPACKAGEID;
        ORCMO_MOTIVE.CUST_CARE_REQUES_NUM    := ISBCUSTREQNUM;
        ORCMO_MOTIVE.MOTIV_RECORDING_DATE    := NVL(IDTREGISTERDATE, GDTPROCESSDATE);
        ORCMO_MOTIVE.PRODUCT_ID              := INUPRODUCTID;
        ORCMO_MOTIVE.PRODUCT_TYPE_ID         := INUPRODTYPEID;
        ORCMO_MOTIVE.SUBSCRIPTION_ID         := INUSUBSCRIPTIONID;
        ORCMO_MOTIVE.SERVICE_NUMBER          := ISBSERVICENUMBER;
        ORCMO_MOTIVE.COMPANY_ID              := INUCOMPANYID;
        ORCMO_MOTIVE.CATEGORY_ID             := INUCATEGORYID;
        ORCMO_MOTIVE.SUBCATEGORY_ID          := INUSUBCATEGORYID;
        ORCMO_MOTIVE.COMMERCIAL_PLAN_ID      := INUCOMMPLANID;
        ORCMO_MOTIVE.CAUSAL_ID               := INUMOTICAUSAL;
        ORCMO_MOTIVE.PERMANENCE              := INUPERMANECE;
        ORCMO_MOTIVE.PRIORITY                := GNUDEF_PRIORITY;
        ORCMO_MOTIVE.PRIVACY_FLAG            := GE_BOCONSTANTS.CSBNO;
        ORCMO_MOTIVE.PARTIAL_FLAG            := GE_BOCONSTANTS.CSBNO;
        ORCMO_MOTIVE.IS_MULT_PRODUCT_FLAG    := GE_BOCONSTANTS.CSBNO;
        ORCMO_MOTIVE.AUTHORIZ_LETTER_FLAG    := GE_BOCONSTANTS.CSBNO;
        ORCMO_MOTIVE.CLIENT_PRIVACY_FLAG     := GE_BOCONSTANTS.CSBNO;
        ORCMO_MOTIVE.CUSTOM_DECISION_FLAG    := GE_BOCONSTANTS.CSBNO;
        ORCMO_MOTIVE.PROVISIONAL_FLAG        := GE_BOCONSTANTS.CSBNO;
        ORCMO_MOTIVE.IS_IMMEDIATE_ATTENT     := GE_BOCONSTANTS.CSBYES;
        
        IF  (ORCMO_MOTIVE.MOTIV_RECORDING_DATE IS NULL) THEN
            ORCMO_MOTIVE.MOTIV_RECORDING_DATE:= UT_DATE.FDTSYSDATE;
        END IF;

        IF  (ORCMO_MOTIVE.TAG_NAME IS NULL) THEN
            ORCMO_MOTIVE.TAG_NAME            := FRCGETPRODMOTI().TAG_NAME;
        END IF;

        IF  (ORCMO_MOTIVE.PRODUCT_MOTIVE_ID IS NULL) THEN
            ORCMO_MOTIVE.PRODUCT_MOTIVE_ID   := FRCGETPRODMOTI().PRODUCT_MOTIVE_ID;
        END IF;

        IF  (ORCMO_MOTIVE.MOTIVE_TYPE_ID IS NULL) THEN
            ORCMO_MOTIVE.MOTIVE_TYPE_ID      := FRCGETPRODMOTI().MOTIVE_TYPE_ID;
        END IF;

        IF  (ORCMO_MOTIVE.PRODUCT_TYPE_ID IS NULL) THEN
            ORCMO_MOTIVE.PRODUCT_TYPE_ID     := FRCGETPRODMOTI().PRODUCT_TYPE_ID;
        END IF;

        IF  (ORCMO_MOTIVE.PERMANENCE IS NULL) THEN
            ORCMO_MOTIVE.PERMANENCE          := MO_BOUTILGENERATEREQUEST.FNUGETMOTIPERMANENCE(ORCMO_MOTIVE.MOTIVE_TYPE_ID, ORCMO_MOTIVE.COMMERCIAL_PLAN_ID);
        END IF;

        IF  (ORCMO_MOTIVE.CUST_CARE_REQUES_NUM IS NULL) THEN
            ORCMO_MOTIVE.CUST_CARE_REQUES_NUM:= FRCGETPACKAGE().CUST_CARE_REQUES_NUM;
        END IF;

        IF  (ORCMO_MOTIVE.COMPANY_ID IS NULL) THEN
            ORCMO_MOTIVE.COMPANY_ID          := FRCGETPACKAGE().COMPANY_ID;
        END IF;

        IF  (ORCMO_MOTIVE.MOTIVE_STATUS_ID = MO_BOCONSTANTS.CNUSTATUS_ATTEND_MOTI) THEN
            ORCMO_MOTIVE.ATTENTION_DATE      := ORCMO_MOTIVE.MOTIV_RECORDING_DATE;
        END IF;

        UT_TRACE.TRACE('Fin: [ MO_BOUtilGenerateRequest.GetRecMotiveBasic]['||ORCMO_MOTIVE.MOTIVE_ID||'] ',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETRECMOTIVEBASIC;

    










































    PROCEDURE GENERATEMOTIVE
    (
        INUPRODMOTIID       IN  MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        ISBTAGNAME          IN  MO_MOTIVE.TAG_NAME%TYPE,
        IDTREGISTERDATE     IN  MO_MOTIVE.MOTIV_RECORDING_DATE%TYPE,
        INUMOTIVETYPEID     IN  MO_MOTIVE.MOTIVE_TYPE_ID%TYPE,
        INUMOTISTATUSID     IN  MO_MOTIVE.MOTIVE_STATUS_ID%TYPE,
        INUPACKAGEID        IN  MO_MOTIVE.PACKAGE_ID%TYPE,
        INUCUSTREQNUM       IN  MO_MOTIVE.CUST_CARE_REQUES_NUM%TYPE,
        INUCOMPANYID        IN  MO_MOTIVE.COMPANY_ID%TYPE,
        INUMOTICAUSAL       IN  MO_MOTIVE.CAUSAL_ID%TYPE,
        INUSUBSCRIPTIONID   IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        INUPRODUCTID        IN  MO_MOTIVE.PRODUCT_ID%TYPE,
        INUPRODTYPEID       IN  MO_MOTIVE.PRODUCT_TYPE_ID%TYPE,
        ISBSERVICENUMBER    IN  MO_MOTIVE.SERVICE_NUMBER%TYPE,
        INUCOMMPLANID       IN  MO_MOTIVE.COMMERCIAL_PLAN_ID%TYPE,
        INUPERMANECE        IN  MO_MOTIVE.PERMANENCE%TYPE,
        INUCATEGORYID       IN  MO_MOTIVE.CATEGORY_ID%TYPE,
        INUSUBCATEGORYID    IN  MO_MOTIVE.SUBCATEGORY_ID%TYPE,
        INUADDRESSID        IN  MO_ADDRESS.ADDRESS_ID%TYPE,
        ISBADDRESS          IN  MO_ADDRESS.ADDRESS%TYPE,
        INUGEOLOCAID        IN  MO_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        INUPENDINGMOTIVE    IN  MO_MOTIVE_ASSO.MOTIVE_ID%TYPE,
        ISBPENDMOTDEPENDENT IN  MO_MOTIVE_ASSO.ANNUL_DEPENDENT%TYPE,
        ORCMO_MOTIVE        OUT DAMO_MOTIVE.STYMO_MOTIVE
    )
    IS
        RCMOADDRESS             DAMO_ADDRESS.STYMO_ADDRESS;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.GenerateMotive ['||INUPACKAGEID||']['||INUPRODTYPEID||']['||INUPRODUCTID||']',18);

        
        MO_BOUTILGENERATEREQUEST.GETRECMOTIVEBASIC
        (
            INUPRODMOTIID,
            ISBTAGNAME,
            IDTREGISTERDATE,
            INUMOTIVETYPEID,
            INUMOTISTATUSID,
            INUPACKAGEID,
            INUCUSTREQNUM,
            INUCOMPANYID,
            INUMOTICAUSAL,
            INUSUBSCRIPTIONID,
            INUPRODUCTID,
            INUPRODTYPEID,
            ISBSERVICENUMBER,
            INUCOMMPLANID,
            INUPERMANECE,
            INUCATEGORYID,
            INUSUBCATEGORYID,
            ORCMO_MOTIVE
        );
        
        
        DAMO_MOTIVE.INSRECORD(ORCMO_MOTIVE);
        
        
        IF (INUADDRESSID IS NOT NULL) THEN

            RCMOADDRESS.ADDRESS_ID           := MO_BOSEQUENCES.FNUGETADDRESSID;
            RCMOADDRESS.ADDRESS_TYPE_ID      := PR_BOADDRESS.CNUADDRESSTYPEMAIN;
            RCMOADDRESS.MOTIVE_ID            := ORCMO_MOTIVE.MOTIVE_ID;
            RCMOADDRESS.GEOGRAP_LOCATION_ID  := INUGEOLOCAID;
            RCMOADDRESS.ADDRESS              := ISBADDRESS;
            RCMOADDRESS.PARSER_ADDRESS_ID    := INUADDRESSID;
            RCMOADDRESS.IS_ADDRESS_MAIN      := GE_BOCONSTANTS.CSBYES;
            RCMOADDRESS.PACKAGE_ID           := ORCMO_MOTIVE.PACKAGE_ID;

            DAMO_ADDRESS.INSRECORD(RCMOADDRESS);
        END IF;

        
        IF (INUPENDINGMOTIVE IS NOT NULL) THEN
            MO_BOUTILGENERATEREQUEST.REGMOTIVEASSO(ORCMO_MOTIVE.MOTIVE_ID, INUPENDINGMOTIVE, ISBPENDMOTDEPENDENT);
        END IF;

        
        MO_BOUTILGENERATEREQUEST.SETMOTIADDITDATA(ORCMO_MOTIVE);
        
        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.GenerateMotive ['||ORCMO_MOTIVE.MOTIVE_ID||'] OK',18);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENERATEMOTIVE;

    PROCEDURE COPYDATACONNECTION
    (
        IRCCOMPONENT        IN      DAMO_COMPONENT.STYMO_COMPONENT
    )
    IS
        RCPRDATACONNECTION  DAPR_DATA_CONNECTION.STYPR_DATA_CONNECTION;
        RCMODATACONNECTION  DAMO_DATA_CONNECTION.STYMO_DATA_CONNECTION;
    BEGIN
        IF DAPR_DATA_CONNECTION.FBLEXIST(IRCCOMPONENT.COMPONENT_ID_PROD) THEN
            RCPRDATACONNECTION := DAPR_DATA_CONNECTION.FRCGETRECORD(IRCCOMPONENT.COMPONENT_ID_PROD);
            RCMODATACONNECTION.COMPONENT_ID := IRCCOMPONENT.COMPONENT_ID;

            RCMODATACONNECTION.QUANTITY             := RCPRDATACONNECTION.QUANTITY;
            RCMODATACONNECTION.COMMENT_             := RCPRDATACONNECTION.COMMENT_;
            RCMODATACONNECTION.TECHNOLOGY_TYPE_ID   := RCPRDATACONNECTION.TECHNOLOGY_TYPE_ID;
            RCMODATACONNECTION.BANDWIDTH_ID         := RCPRDATACONNECTION.BANDWIDTH_ID;
            RCMODATACONNECTION.PROFILE              := RCPRDATACONNECTION.PROFILE;

            DAMO_DATA_CONNECTION.INSRECORD(RCMODATACONNECTION);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    






















    PROCEDURE COPYEQUIPMENTDATA
    (
        IRCCOMPONENT        IN      DAMO_COMPONENT.STYMO_COMPONENT
    )
    IS
        RCMOEQUIPMENT   DAMO_EQUIPMENT.STYMO_EQUIPMENT;
        BLFOUND         BOOLEAN := FALSE;
    BEGIN
        IF (IRCCOMPONENT.COMPONENT_TYPE_ID = GNUEQUIPO) THEN
            
            FOR RCPREQUIPMENT IN PR_BCEQUIPMENT.CUEQUIPMENTSBYCOMP(IRCCOMPONENT.COMPONENT_ID_PROD) LOOP
                RCMOEQUIPMENT := NULL;
                RCMOEQUIPMENT.EQUIPMENT_ID  := MO_BOSEQUENCES.FNUGETSEQMO_EQUIPMENT;

                RCMOEQUIPMENT.COMPONENT_ID  := IRCCOMPONENT.COMPONENT_ID;
                RCMOEQUIPMENT.MOTIVE_ID     := IRCCOMPONENT.MOTIVE_ID;
                RCMOEQUIPMENT.CODE          := RCPREQUIPMENT.CODE;
                RCMOEQUIPMENT.SOURCE_       := RCPREQUIPMENT.SOURCE_;
                RCMOEQUIPMENT.IS_MAIN       := RCPREQUIPMENT.IS_MAIN;
                RCMOEQUIPMENT.DELIVERY_ID   := GNUDELIVERYID;
                RCMOEQUIPMENT.RETURN_ID     := GNURETURNID;
                RCMOEQUIPMENT.DEL_ADDRESS_ID:= GNUDELADDRESSID;
                RCMOEQUIPMENT.SALE_MODALITY := NVL(GSBEQUIPSALEMODALITY, RCPREQUIPMENT.SALE_MODALITY);

                DAMO_EQUIPMENT.INSRECORD(RCMOEQUIPMENT);
                BLFOUND := TRUE;
            END LOOP;

            
            IF (NOT BLFOUND) THEN
                RCMOEQUIPMENT.EQUIPMENT_ID  := MO_BOSEQUENCES.FNUGETSEQMO_EQUIPMENT;
                RCMOEQUIPMENT.COMPONENT_ID  := IRCCOMPONENT.COMPONENT_ID;
                RCMOEQUIPMENT.MOTIVE_ID     := IRCCOMPONENT.MOTIVE_ID;
                RCMOEQUIPMENT.DELIVERY_ID   := GNUDELIVERYID;
                RCMOEQUIPMENT.RETURN_ID     := GNURETURNID;
                RCMOEQUIPMENT.DEL_ADDRESS_ID:= GNUDELADDRESSID;
                RCMOEQUIPMENT.SOURCE_       := CSBDEF_SOURCE;
                RCMOEQUIPMENT.IS_MAIN       := GE_BOCONSTANTS.CSBNO;
                RCMOEQUIPMENT.SALE_MODALITY := NVL(GSBEQUIPSALEMODALITY, CC_BOPRODMGTEQUIPMENT.CSBBUY_MODALITY);

                DAMO_EQUIPMENT.INSRECORD(RCMOEQUIPMENT);
            END IF;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE SETRETIRECOMP
    (
        IRCCOMPONENT        IN      DAMO_COMPONENT.STYMO_COMPONENT
    )
    IS
        RCMORETIRECOMP          DAMO_RETIRE_COMP.STYMO_RETIRE_COMP;
    BEGIN
        
        IF  (IRCCOMPONENT.MOTIVE_TYPE_ID IN (MO_BOCONSTANTS.CNURETIRE_MOTI_TYPE, MO_BOCONSTANTS.CNURETIRECOMP_MOTI_TYPE))
        AND (IRCCOMPONENT.MOTIVE_STATUS_ID = GNUREGSTATUSCOMP)
        THEN

            RCMORETIRECOMP.REGISTER_DATE         := IRCCOMPONENT.RECORDING_DATE;
            RCMORETIRECOMP.COMPONENT_ID          := IRCCOMPONENT.COMPONENT_ID;
            RCMORETIRECOMP.RETIRE_TYPE_ID        := GNUVOLRETIRETYPE;

            DAMO_RETIRE_COMP.INSRECORD(RCMORETIRECOMP);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


   
































    PROCEDURE ASIGNRENTCONDITIONS
    (
        IRCCOMPONENT        IN      DAMO_COMPONENT.STYMO_COMPONENT
    )
    IS
        RCRENTING   DACC_RENTING.STYCC_RENTING;
    BEGIN
    
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.AsignRentConditions ComponentIdProd ['||IRCCOMPONENT.COMPONENT_ID_PROD||'] ComponentType ['||IRCCOMPONENT.COMPONENT_TYPE_ID||']', 18);
         UT_TRACE.TRACE('ComponentIdProd ['||IRCCOMPONENT.COMPONENT_ID_PROD||'] ',18);
        UT_TRACE.TRACE('ComponentType ['||IRCCOMPONENT.COMPONENT_TYPE_ID||'] ',18);


        
        IF (NOT GBOKEEPRENTINGCOND) THEN
        
             UT_TRACE.TRACE('Tipo de componente['||IRCCOMPONENT.COMPONENT_TYPE_ID||'] gnuEquipRentCondId['||GNUEQUIPRENTCONDID||']',18);
             UT_TRACE.TRACE('Tipo de componente['||IRCCOMPONENT.COMPONENT_TYPE_ID||'] ',19);
             UT_TRACE.TRACE('gnuEquipRentCondId['||GNUEQUIPRENTCONDID||'] ',19);

            
            IF ( IRCCOMPONENT.COMPONENT_TYPE_ID = GNUEQUIPO AND
                 GNUEQUIPRENTCONDID IS NOT NULL ) THEN
            
                UT_TRACE.TRACE('Tipo de Motivo del componente ['||IRCCOMPONENT.MOTIVE_TYPE_ID||']',20);
                
                CC_BCRENTING.GETRENTINGCONDITIONS( IRCCOMPONENT.COMPONENT_ID_PROD, RCRENTING );

                
                
                IF ( IRCCOMPONENT.MOTIVE_TYPE_ID = PS_BOMOTIVETYPE.FNUCHNGEQUIP_MOTI_TYPE ) THEN
                
                    UT_TRACE.TRACE('El tipo de motivo corresponde al de cambio de equipo ',20);
                    
                    
                    CC_BORENTING.CREATERENTING
                    (
                        GNUEQUIPRENTCONDID,
                        IRCCOMPONENT.PACKAGE_ID,
                        NULL,
                        IRCCOMPONENT.COMPONENT_ID
                    );

                ELSE
                    
                    CC_BORENTING.CREATERENTING
                    (
                        GNUEQUIPRENTCONDID,
                        IRCCOMPONENT.PACKAGE_ID,
                        IRCCOMPONENT.COMPONENT_ID_PROD,
                        IRCCOMPONENT.COMPONENT_ID
                    );
                
                END IF;

                
                CC_BOPRODMGTEQUIPMENT.CLEAREQUIPMRENTCOND;

            
            END IF;
        
        END IF;

        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.AsignRentConditions', 18);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASIGNRENTCONDITIONS;

    



















    PROCEDURE SETSERVICENUMBER
    (
        IRCCOMPONENT        IN      DAMO_COMPONENT.STYMO_COMPONENT
    )
    IS
        RCMOEQUIPMENT   DAMO_EQUIPMENT.STYMO_EQUIPMENT;
        BLFOUND         BOOLEAN := FALSE;
        NUSERVICENUMBER NUMBER;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetServiceNumber ComponentIdProd ['||IRCCOMPONENT.COMPONENT_ID_PROD||'] ServiceNumber ['||IRCCOMPONENT.SERVICE_NUMBER||'] ComponentType ['||IRCCOMPONENT.COMPONENT_TYPE_ID||']', 18);

        IF (
            IRCCOMPONENT.COMPONENT_TYPE_ID = GNUEQUIPO OR
            IRCCOMPONENT.COMPONENT_TYPE_ID = GNUSIMCARD
            ) THEN

            NUSERVICENUMBER := NULL;

            IF(UT_CONVERT.FSBIS_NUMBER(IRCCOMPONENT.SERVICE_NUMBER) = CC_BOCONSTANTS.CSBSI) THEN
                NUSERVICENUMBER := UT_CONVERT.FNUCHARTONUMBER(IRCCOMPONENT.SERVICE_NUMBER);
            END IF;

            
            IF ( IRCCOMPONENT.COMPONENT_ID_PROD = NUSERVICENUMBER ) THEN

                
                DAMO_COMPONENT.UPDSERVICE_NUMBER(IRCCOMPONENT.COMPONENT_ID, NULL);

            END IF;
        END IF;
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetServiceNumber', 18);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETSERVICENUMBER;

    













    PROCEDURE SETCOMPADDITDATA
    (
        IRCCOMPONENT        IN      DAMO_COMPONENT.STYMO_COMPONENT
    )
    IS
    BEGIN
    
        UT_TRACE.TRACE('Inicio MO_BOUtilGenerateRequest.SetCompAdditData ',15);

        
        SETRETIRECOMP(IRCCOMPONENT);

        
        COPYDATACONNECTION(IRCCOMPONENT);
        
        
        COPYEQUIPMENTDATA(IRCCOMPONENT);
        
        
        ASIGNRENTCONDITIONS(IRCCOMPONENT);
        
        
        SETSERVICENUMBER(IRCCOMPONENT);
        
        UT_TRACE.TRACE('Fin MO_BOUtilGenerateRequest.SetCompAdditData ',15);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    










































    PROCEDURE GENERATECOMPONENT
    (
        INUPRDMOTCOMPID         IN     MO_COMPONENT.PROD_MOTIVE_COMP_ID%TYPE,
        ISBTAGNAME              IN     MO_COMPONENT.TAG_NAME%TYPE,
        INUMOTISTATUSID         IN     MO_COMPONENT.MOTIVE_STATUS_ID%TYPE,
        INUFATHERCOMP           IN     MO_COMP_LINK.FATHER_COMPONENT_ID%TYPE,
        INUPENDINGCOMP          IN     MO_COMPONENT.COMPONENT_ID%TYPE,
        IRCMOTIVE               IN     DAMO_MOTIVE.STYMO_MOTIVE,
        IRCPRCOMPONENT          IN     DAPR_COMPONENT.STYPR_COMPONENT,
        ORCMO_COMPONENT         OUT    DAMO_COMPONENT.STYMO_COMPONENT,
        ISBPENDCOMPDEPENDENT    IN     MO_COMPONENT_ASSO.ANNUL_DEPENDENT%TYPE,
        
        INUPOINTS               IN     MO_COMPONENT.POINTS%TYPE DEFAULT NULL,
        IDTREGISTERDATE         IN     MO_COMPONENT.RECORDING_DATE%TYPE DEFAULT NULL

    )
    IS
        RCMO_COMPLINK           DAMO_COMP_LINK.STYMO_COMP_LINK;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.GenerateComponent ['||IRCMOTIVE.MOTIVE_TYPE_ID||
        ']['||INUPRDMOTCOMPID||']['||IRCPRCOMPONENT.COMPONENT_ID||']['||INUFATHERCOMP||']',18);
        
        
        CREATECOMPONENT
        (
            INUPRDMOTCOMPID,
            ISBTAGNAME,
            INUMOTISTATUSID,
            IRCMOTIVE,
            IRCPRCOMPONENT,
            INUPOINTS,
            IDTREGISTERDATE,
            ORCMO_COMPONENT
        );

        
        RCMO_COMPLINK.MOTIVE_ID                 := ORCMO_COMPONENT.MOTIVE_ID;
        RCMO_COMPLINK.CHILD_COMPONENT_ID        := ORCMO_COMPONENT.COMPONENT_ID;
        RCMO_COMPLINK.FATHER_COMPONENT_ID       := INUFATHERCOMP;
        DAMO_COMP_LINK.INSRECORD(RCMO_COMPLINK);

        
        IF (INUPENDINGCOMP IS NOT NULL) THEN
            MO_BOUTILGENERATEREQUEST.REGCOMPONENTASSO(ORCMO_COMPONENT.COMPONENT_ID, INUPENDINGCOMP, ISBPENDCOMPDEPENDENT);
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.GenerateComponent ['||ORCMO_COMPONENT.COMPONENT_ID||'] OK',18);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENERATECOMPONENT;
    

    PROCEDURE GETINCLUNITSMOTIVE
    (
        INUREQUESTID        IN          MO_PACKAGES.PACKAGE_ID%TYPE,
        INUPRODUCTID        IN          PR_PRODUCT.PRODUCT_ID%TYPE,
        ONUPACKAGEID        OUT         MO_MOTIVE.PACKAGE_ID%TYPE,
        ONUMOTIVEID         OUT         MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        NUPACKAGEIDX        BINARY_INTEGER;
        TBPACKASSO          DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.GetInclUnitsMotive ['||INUREQUESTID||']['||INUPRODUCTID||']', 11);

        
        ONUPACKAGEID := NULL;
        ONUMOTIVEID  := NULL;

        
        TBPACKASSO := MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO(INUREQUESTID);

        NUPACKAGEIDX := TBPACKASSO.FIRST;

        WHILE (NUPACKAGEIDX IS NOT NULL) LOOP
            FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(TBPACKASSO(NUPACKAGEIDX).PACKAGE_ID) LOOP
                IF  (RCMOTIVE.PRODUCT_ID = INUPRODUCTID) AND
                    (RCMOTIVE.MOTIVE_TYPE_ID IN
                        (
                            MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE,
                            MO_BOCONSTANTS.CNURETIRE_MOTI_TYPE,
                            PS_BOMOTIVETYPE.FNUPLANCHANGE_MOTI_TYPE,
                            PS_BOMOTIVETYPE.FNUINCLUNIT_MOTI_TYPE
                        )
                    )
                THEN
                    ONUPACKAGEID    := RCMOTIVE.PACKAGE_ID;
                    ONUMOTIVEID     := RCMOTIVE.MOTIVE_ID;
                    UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.GetInclUnitsMotive ['||ONUPACKAGEID||']['||ONUMOTIVEID||'] - OK', 11);
                    RETURN;
                END IF;
            END LOOP;

            NUPACKAGEIDX := TBPACKASSO.NEXT(NUPACKAGEIDX);
        END LOOP;

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.GetInclUnitsMotive - No encontr�', 11);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETINCLUNITSMOTIVE;

    PROCEDURE CANCELREQUEST
    (
        INUREQUESTID        IN          MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID         IN          MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
    BEGIN
        IF (DAMO_PACKAGES.FBLEXIST(INUREQUESTID)) THEN
            
            DAMO_PACKAGES.UPDMOTIVE_STATUS_ID(INUREQUESTID, MO_BOCONSTANTS.CNUSTATUS_CANCELED_PACK);
            
            
            
            IF(DAMO_MOTIVE.FBLEXIST(INUMOTIVEID)) THEN
                DAMO_MOTIVE.UPDMOTIVE_STATUS_ID(INUMOTIVEID, MO_BOCONSTANTS.CNUSTATUS_CANCELED_MOTI);
            END IF;

            
            OR_BOANULLORDER.ANULLACTIVITIES( INUREQUESTID, NULL, NULL );

            FOR RCPACKAGE IN MO_BCPACKAGES_ASSO.CUPACKAGEASSOBYPACKASSO(INUREQUESTID) LOOP
                
                DAMO_PACKAGES.UPDMOTIVE_STATUS_ID(RCPACKAGE.PACKAGE_ID, MO_BOCONSTANTS.CNUSTATUS_CANCELED_PACK);

                
                FOR RCMOTIVE IN MO_BCMOTIVE.CUMOTIVESBYPACKAGE(RCPACKAGE.PACKAGE_ID) LOOP
                    DAMO_MOTIVE.UPDMOTIVE_STATUS_ID(RCMOTIVE.MOTIVE_ID, MO_BOCONSTANTS.CNUSTATUS_CANCELED_MOTI);
                END LOOP;

                
                FOR RCCOMPONENT IN MO_BCCOMPONENT.CUCOMPONENTSBYPACKAGE(RCPACKAGE.PACKAGE_ID) LOOP
                    DAMO_COMPONENT.UPDMOTIVE_STATUS_ID(RCCOMPONENT.COMPONENT_ID, MO_BOCONSTANTS.CNUSTATUS_CANCELED_COMP);
                END LOOP;

                
                OR_BOANULLORDER.ANULLACTIVITIES( RCPACKAGE.PACKAGE_ID, NULL, NULL );

            END LOOP;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCPACKAGES_ASSO.CUPACKAGEASSOBYPACKASSO%ISOPEN) THEN
                CLOSE MO_BCPACKAGES_ASSO.CUPACKAGEASSOBYPACKASSO;
            END IF;
            IF (MO_BCMOTIVE.CUMOTIVESBYPACKAGE%ISOPEN) THEN
                CLOSE MO_BCMOTIVE.CUMOTIVESBYPACKAGE;
            END IF;
            IF (MO_BCCOMPONENT.CUCOMPONENTSBYPACKAGE%ISOPEN) THEN
                CLOSE MO_BCCOMPONENT.CUCOMPONENTSBYPACKAGE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE ANNULLPACKAGES
    (
        INUREQUEST      IN     MO_PACKAGES.PACKAGE_ID%TYPE,
        ITBPACKAGES     IN     DAMO_PACKAGES.TYTBPACKAGE_ID
    )
    IS
        NUIDX           BINARY_INTEGER;
        SBANULLIDX      PS_BOPRODSERVMANAGER.STYINDEX;
        TBANULACIONES   PS_BOPRODSERVMANAGER.TYTBNUMBER;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.AnnullPackages ['||INUREQUEST||']['||ITBPACKAGES.COUNT||']', 11);

        IF (ITBPACKAGES.COUNT = 0) THEN
            RETURN;
        END IF;

        
        CC_BOANULASOLICITUD.INICIALIZAR;

        
        NUIDX := ITBPACKAGES.FIRST;
        WHILE (NUIDX IS NOT NULL) LOOP
            CC_BOANULASOLICITUD.AGREGARSOLICITUD(ITBPACKAGES(NUIDX));
            NUIDX := ITBPACKAGES.NEXT(NUIDX);
        END LOOP;

        
        CC_BOANULASOLICITUD.REGISTRARANULACION
        (
            GNUPERSONID,
            GNUPOSID,
            MO_BOUTILGENERATEREQUEST.FNUCAUSAL_RECOVER,
            CSBNULLSTRING,
            NULL,
            GNUANSWERADDRESSID,
            GNURECEPTIONTYPE,
            GNUCONTACTID
        );

        
        TBANULACIONES := CC_BOANULASOLICITUD.FTBOBTENERANULACIONES;

        
        SBANULLIDX := TBANULACIONES.FIRST;
        WHILE (SBANULLIDX IS NOT NULL) LOOP
            MO_BOUTILGENERATEREQUEST.REGPACKAGEASSO(TBANULACIONES(SBANULLIDX), INUREQUEST, CC_BOCONSTANTS.CSBSI);
            SBANULLIDX := TBANULACIONES.NEXT(SBANULLIDX);
        END LOOP;
        
        UT_TRACE.TRACE('Termina MO_BOUtilGenerateRequest.AnnullPackages - OK', 11);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULLPACKAGES;

    FUNCTION FSBEQUIPCHNGTAGNAME
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN PS_BOPACKAGETYPE.CSBTAGCAMB_EQUIPO;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUEQUIPCHNGPACKTYPE
    RETURN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE
    IS
    BEGIN
        RETURN GNUEQUIPCHNGPACKTYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GENERATECOMPONENTCOMMENT
    (
        INUCOMPONENTID   IN     MO_COMMENT_COMP.COMPONENT_ID%TYPE,
        INUCOMMENTYPE    IN     MO_COMMENT_COMP.COMMENT_TYPE_ID%TYPE,
        ISBDESCRIPTION   IN     MO_COMMENT_COMP.COMMENT_COMP%TYPE,
        INUCAUSAL        IN     MO_COMMENT_COMP.CAUSAL_ID%TYPE
    )IS
        RCMO_COMMENT_COMP           DAMO_COMMENT_COMP.STYMO_COMMENT_COMP;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.GenerateComponentComment inuComponentId['||INUCOMPONENTID||
        '] inuCausal['||INUCAUSAL||']',18);

        
        RCMO_COMMENT_COMP.COMMENT_COMP_ID        := MO_BOSEQUENCES.FNUGETSEQ_MO_COMMENT_COMP;
        RCMO_COMMENT_COMP.COMPONENT_ID           := INUCOMPONENTID;
        RCMO_COMMENT_COMP.COMMENT_TYPE_ID        := INUCOMMENTYPE;
        RCMO_COMMENT_COMP.COMMENT_COMP           := ISBDESCRIPTION;
        RCMO_COMMENT_COMP.CAUSAL_ID              := INUCAUSAL;

        
        DAMO_COMMENT_COMP.INSRECORD(RCMO_COMMENT_COMP);

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.GenerateComponentComment ['||RCMO_COMMENT_COMP.COMMENT_COMP_ID||'] OK',18);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
 
    




















    PROCEDURE SETEQUIPMRENTCOND
    (
        INURENTCONDID   IN  CC_RENTING_PLAN.RENTING_PLAN_ID%TYPE
    )
    IS
BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetEquipmRentCond ['||INURENTCONDID||']',19);

        GNUEQUIPRENTCONDID := INURENTCONDID;
        GSBEQUIPSALEMODALITY := CC_BORENTCONDITIONS.FSBGETRENTPLANTAG(INURENTCONDID);

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.SetEquipmRentCond OK',19);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETEQUIPMRENTCOND;


    






















    PROCEDURE CLEAREQUIPMRENTCOND
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.ClearEquipmRentCond ['||GSBEQUIPSALEMODALITY||']',19);

        GSBEQUIPSALEMODALITY := NULL;
        GNUEQUIPRENTCONDID := NULL;
        GBOKEEPRENTINGCOND := FALSE;

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.ClearEquipmRentCond OK',19);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLEAREQUIPMRENTCOND;


    




















    PROCEDURE SETQUOTACCELDISCPERC
    (
        INUPRCOMPID     IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUQUOACCDISC   IN  CC_RENTING.QUOT_ACCEL_DISC_PERC%TYPE
    )
    IS
        RCRENTING       DACC_RENTING.STYCC_RENTING;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetQuotAccelDiscPerc ['||INUPRCOMPID||','||INUQUOACCDISC||']',19);

        
        CC_BCRENTING.GETRENTINGCONDITIONS( INUPRCOMPID, RCRENTING );

        IF ( RCRENTING.RENTING_ID IS NOT NULL ) THEN
        
            UT_TRACE.TRACE('Actualizo '||RCRENTING.RENTING_ID,20);

            
            RCRENTING.QUOT_ACCEL_DISC_PERC := INUQUOACCDISC;
            DACC_RENTING.UPDRECORD(RCRENTING);
        
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.SetQuotAccelDiscPerc OK',19);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETQUOTACCELDISCPERC;


    






















    PROCEDURE SETKEEPRENTING
    (
        IBOKEEPRENTINGCOND  IN  BOOLEAN
    )
    IS
        BOKEEPRENTINGCOND    BOOLEAN;
    BEGIN
    

        
        IF (IBOKEEPRENTINGCOND IS NULL) THEN
           BOKEEPRENTINGCOND := FALSE;
        ELSE
           BOKEEPRENTINGCOND := IBOKEEPRENTINGCOND;
        END IF;

        IF (BOKEEPRENTINGCOND) THEN
            UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetKeepRenting [TRUE]',19);
        ELSE
            UT_TRACE.TRACE('Inicia MO_BOUtilGenerateRequest.SetKeepRenting [FALSE]',19);
        END IF;

        GBOKEEPRENTINGCOND := BOKEEPRENTINGCOND;

        UT_TRACE.TRACE('Finaliza MO_BOUtilGenerateRequest.SetKeepRenting OK',19);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETKEEPRENTING;

    

















    FUNCTION FDTGETANSATTENDDATE  (
        INUANS          IN  MO_PACKAGES.ANS_ID%TYPE,
        IDTREQDATE      IN  MO_PACKAGES.REQUEST_DATE%TYPE,
        IBONONHOLIDAY   IN  BOOLEAN DEFAULT TRUE
    )
    RETURN DATE
    IS
        
        
        
        RCANS       DAGE_ANS.STYGE_ANS;
        RCPACKAGE   DAMO_PACKAGES.STYMO_PACKAGES;
        NUANSDIAS   NUMBER;
        NUFRACCION  NUMBER(10,2);
        SBHORAS     VARCHAR2(20);
        DTFECHA     DATE;
        DTFECHAANS  DATE;
        DTEXPECTATTEND  DATE;

    BEGIN
        UT_TRACE.TRACE('Inicio: [ MO_BOUtilGenerateRequest.fdtGetANSAttendDate]',10);
        
        IF ( INUANS IS NOT NULL ) THEN
            RCANS := DAGE_ANS.FRCGETRCDATA( INUANS );
        END IF;

        NUANSDIAS        :=  NVL((RCANS.HOURS/24),0);
        
        NUFRACCION       :=  NVL((NUANSDIAS - TRUNC(NUANSDIAS)),0);

        DTEXPECTATTEND :=  IDTREQDATE + (NUANSDIAS);

        
        DTFECHA          :=  IDTREQDATE +  NUFRACCION;

        

      



        IF (IBONONHOLIDAY  AND INUANS IS NOT NULL) THEN
            
            NUANSDIAS        :=  TRUNC(NUANSDIAS);
            
            SBHORAS          :=  TO_CHAR(DTFECHA,'hh24:mi:ss');
            

            DTFECHAANS := PKHOLIDAYMGR.FDTGETDATENONHOLIDAY(
                                               DTFECHA,NUANSDIAS);

            
            DTEXPECTATTEND :=  TO_DATE(TO_CHAR(DTFECHAANS,'dd-mm-yyyy')||' '||SBHORAS,'dd-mm-yyyy hh24:mi:ss');
        END IF;

        UT_TRACE.TRACE('Fin: [ MO_BOUtilGenerateRequest.fdtGetANSAttendDate]',10);
        RETURN DTEXPECTATTEND;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTGETANSATTENDDATE;


    
    
















    FUNCTION FNUGETVOLRETIRETYPE
    RETURN GE_RETIRE_TYPE.RETIRE_TYPE_ID%TYPE
    IS

    BEGIN
        RETURN GNUVOLRETIRETYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETVOLRETIRETYPE;
    
    
    




















    PROCEDURE CREATECOMPONENT
    (
        INUPRDMOTCOMPID   IN  MO_COMPONENT.PROD_MOTIVE_COMP_ID%TYPE,
        ISBTAGNAME        IN  MO_COMPONENT.TAG_NAME%TYPE,
        INUMOTISTATUSID   IN  MO_COMPONENT.MOTIVE_STATUS_ID%TYPE,
        IRCMOTIVE         IN  DAMO_MOTIVE.STYMO_MOTIVE,
        IRCPRCOMPONENT    IN  DAPR_COMPONENT.STYPR_COMPONENT,
        INUPOINTS         IN  MO_COMPONENT.POINTS%TYPE DEFAULT NULL,
        IDTREGISTERDATE   IN  MO_COMPONENT.RECORDING_DATE%TYPE DEFAULT NULL,
        ORCMO_COMPONENT   OUT DAMO_COMPONENT.STYMO_COMPONENT
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO: MO_BOUtilGenerateRequest.CreateComponent',9);

        
        ORCMO_COMPONENT.COMPONENT_ID         := MO_BOSEQUENCES.FNUGETCOMPONENTID;
        ORCMO_COMPONENT.TAG_NAME             := ISBTAGNAME;

        ORCMO_COMPONENT.PROD_MOTIVE_COMP_ID  := INUPRDMOTCOMPID;
        ORCMO_COMPONENT.MOTIVE_STATUS_ID     := NVL(INUMOTISTATUSID, GNUREGSTATUSCOMP);

        ORCMO_COMPONENT.COMPONENT_ID_PROD    := IRCPRCOMPONENT.COMPONENT_ID;
        ORCMO_COMPONENT.COMPONENT_TYPE_ID    := IRCPRCOMPONENT.COMPONENT_TYPE_ID;
        ORCMO_COMPONENT.CLASS_SERVICE_ID     := IRCPRCOMPONENT.CLASS_SERVICE_ID;
        ORCMO_COMPONENT.INCLUDED_FEATURES_ID := IRCPRCOMPONENT.INCLUDED_FEATURES_ID;
        ORCMO_COMPONENT.SERVICE_NUMBER       := IRCPRCOMPONENT.SERVICE_NUMBER;
        ORCMO_COMPONENT.IS_MAIN              := IRCPRCOMPONENT.IS_MAIN;
        ORCMO_COMPONENT.IS_INCLUDED          := IRCPRCOMPONENT.IS_INCLUDED;

        ORCMO_COMPONENT.PACKAGE_ID           := IRCMOTIVE.PACKAGE_ID;
        ORCMO_COMPONENT.PRODUCT_MOTIVE_ID    := IRCMOTIVE.PRODUCT_MOTIVE_ID;
        ORCMO_COMPONENT.MOTIVE_TYPE_ID       := IRCMOTIVE.MOTIVE_TYPE_ID;
        ORCMO_COMPONENT.MOTIVE_ID            := IRCMOTIVE.MOTIVE_ID;

        ORCMO_COMPONENT.CATEGORY_ID          := IRCMOTIVE.CATEGORY_ID;
        ORCMO_COMPONENT.SUBCATEGORY_ID       := IRCMOTIVE.SUBCATEGORY_ID;

        ORCMO_COMPONENT.PRODUCT_ID           := IRCMOTIVE.PRODUCT_ID;

        ORCMO_COMPONENT.RECORDING_DATE       := NVL(IDTREGISTERDATE, GDTPROCESSDATE);
        ORCMO_COMPONENT.COMPONENT_NUMBER     := GNUCOMPONENTNUMBER;

        ORCMO_COMPONENT.OBLIGATORY_FLAG      := GE_BOCONSTANTS.CSBNO;
        ORCMO_COMPONENT.KEEP_NUMBER_FLAG     := GE_BOCONSTANTS.CSBNO;
        ORCMO_COMPONENT.OBLIGATORY_CHANGE    := GE_BOCONSTANTS.CSBNO;
        ORCMO_COMPONENT.NOTIFY_ASSIGN_FLAG   := GE_BOCONSTANTS.CSBNO;
        ORCMO_COMPONENT.CUSTOM_DECISION_FLAG := GE_BOCONSTANTS.CSBNO;
        ORCMO_COMPONENT.AUTHORIZ_LETTER_FLAG := GE_BOCONSTANTS.CSBNO;

        
        ORCMO_COMPONENT.POINTS               := INUPOINTS;

        IF (ORCMO_COMPONENT.RECORDING_DATE IS NULL) THEN
            ORCMO_COMPONENT.RECORDING_DATE   := UT_DATE.FDTSYSDATE;
        END IF;

        
        IF (IRCPRCOMPONENT.COMPONENT_TYPE_ID = PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEQUIPO) THEN
            ORCMO_COMPONENT.ADDRESS_ID       := GNUDELADDRESSID;
        END IF;

        ORCMO_COMPONENT.STATUS_CHANGE_DATE   := ORCMO_COMPONENT.RECORDING_DATE;

        
        DAMO_COMPONENT.INSRECORD(ORCMO_COMPONENT);

        
        
        SETCOMPADDITDATA(ORCMO_COMPONENT);

        GNUCOMPONENTNUMBER := GNUCOMPONENTNUMBER+1;

        UT_TRACE.TRACE('FIN: MO_BOUtilGenerateRequest.CreateComponent ['||ORCMO_COMPONENT.COMPONENT_ID||'] OK',9);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATECOMPONENT;
    
    
BEGIN
    LOADPARAMETERS;
END MO_BOUTILGENERATEREQUEST;