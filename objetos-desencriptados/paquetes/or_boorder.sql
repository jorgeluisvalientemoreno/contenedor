PACKAGE BODY Or_BOOrder AS







































































































































































    
    
    
    
    CSBVERSION   CONSTANT VARCHAR2(20)            := 'SAO408953';

    
    CNUERROR_900601     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 900601;
    CNUERROR_120864     CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 120864;
    

    CNUENTITYCOMPONENT CONSTANT NUMBER := GE_BOENTITY.FNUGETENTITY_ID('MO_COMPONENT');
    CNUENTITYMOTIVEID  CONSTANT NUMBER := GE_BOENTITY.FNUGETENTITY_ID('MO_MOTIVE');
    
    
    GNUADMINTIME     NUMBER;

    
    CNUERR_PROJ_ORDER CONSTANT NUMBER := 900386;
    
    
    CNUERR900379  CONSTANT NUMBER :=  900379;
    
    CNUERR900377  CONSTANT NUMBER :=  900377;
    
    
    CNUERR2214      GE_MESSAGE.MESSAGE_ID%TYPE :=  2214;
    
    
    CNUERR901275    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901275;
    
    
    CNUERR9132      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 9132;

    
    CNUERR122062    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 122062;
    
    
    CNUERR_901262   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901262;

    
    CNUERR_901273   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901273;

    
    CNUERR_811      CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 811;
    
    
    CNUERR_14642    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 14642;

    
    CNUERR901274    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901274;
    
    
    CNUERR901476    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901476;
    
    
    CNUERR901478    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901478;

    
    TYPE TYRCSUBSDATABYORDER IS RECORD
    (
        ORDERID       OR_ORDER.ORDER_ID%TYPE,
        SUBSCRIBERID  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        ADDRESSID     AB_ADDRESS.ADDRESS_ID%TYPE
    );

    TYPE TYTB_SUBSDATABYORDER IS TABLE OF TYRCSUBSDATABYORDER INDEX BY BINARY_INTEGER;
    GTBSUBSDATABYORDER TYTB_SUBSDATABYORDER;
    
    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
    
        RETURN CSBVERSION;
    
    END;

    
    PROCEDURE LOADPARAMETER
    IS
        CNUPARM_ADMI_TIME CONSTANT VARCHAR2(40) := 'ADMINISTRATIVE_TIME';
    BEGIN
        
        GNUADMINTIME := NVL(GE_BOPARAMETER.FNUGET(CNUPARM_ADMI_TIME), 0);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADPARAMETER;
    
    





































    FUNCTION FBLEXISTTASKTYPECONF
    (
        INUTASKTYPE        IN  OR_OPSE_TASKTYPE_NUM.TASK_TYPE_ID%TYPE,
        INUOPERSECT        IN  OR_OPSE_TASKTYPE_NUM.OPERATING_SECTOR_ID%TYPE,
        ONUNUMERATOR       OUT OR_ORDER.NUMERATOR_ID%TYPE,
        ONUORDERNUMBER     OUT OR_ORDER.SEQUENCE%TYPE,
        IBLFINDPERTASKTYPE IN  BOOLEAN
    ) RETURN BOOLEAN
    IS
        
        
        
        REFCURORDERNUMBER  OR_BOCONSTANTS.TYRFCURSOR;
        SBSQL              VARCHAR2(2000);
        SBTASKTYPECOND     VARCHAR2(500);
    BEGIN
        
        
        IF (IBLFINDPERTASKTYPE) THEN
            SBTASKTYPECOND := 'a.Task_Type_Id = :nuTaskType';
        ELSE
        
        
            SBTASKTYPECOND := 'a.Task_Type_Id is NULL';
        END IF;

        
        
        
        SBSQL := ' SELECT Numerator_Id' ||
                 ' FROM   Or_OpSe_TaskType_Num a,'||
                        
                        ' ('||
                         ' SELECT Operating_Sector_Id, LEVEL nivel'||
                         ' FROM   Or_Operating_Sector'||
                         ' START WITH Operating_Sector_Id = :nuOpeSec'||
                         ' CONNECT BY Operating_Sector_Id = PRIOR Oper_Sec_Father_Id'||
                        ' ) b,'||
                        
                        
                        ' ('||
                         ' SELECT min(nivel) nivel'||
                         ' FROM   Or_OpSe_TaskType_Num a,'||
                                ' ('||
                                 ' SELECT Operating_Sector_Id, LEVEL nivel'||
                                 ' FROM   Or_Operating_Sector'||
                                 ' START WITH Operating_Sector_Id = :nuOpeSec'||
                                 ' CONNECT BY Operating_Sector_Id = PRIOR Oper_Sec_Father_Id'||
                                ' ) b'||
                         ' WHERE  a.Operating_Sector_Id = b.Operating_Sector_Id'||
                           ' AND ' || SBTASKTYPECOND ||
                        ' ) c'||
                 ' WHERE  a.Operating_Sector_Id = b.Operating_Sector_Id'||
                  ' AND  ' || SBTASKTYPECOND ||
                  ' AND  b.nivel = c.nivel';

        IF (IBLFINDPERTASKTYPE) THEN
            OPEN REFCURORDERNUMBER FOR SBSQL USING INUOPERSECT,INUOPERSECT,
                                                   INUTASKTYPE, INUTASKTYPE;
        ELSE
            OPEN REFCURORDERNUMBER FOR SBSQL USING INUOPERSECT, INUOPERSECT;
        END IF;
        FETCH REFCURORDERNUMBER INTO ONUNUMERATOR;
        
        IF (REFCURORDERNUMBER%NOTFOUND) THEN
            ONUNUMERATOR := NULL;
            ONUORDERNUMBER := NULL;
            RETURN FALSE;
        END IF;
        CLOSE REFCURORDERNUMBER;
        ONUORDERNUMBER := GE_BONUMERATOR.NEXTNUMERATOR(ONUNUMERATOR);
        
        RETURN TRUE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (REFCURORDERNUMBER%ISOPEN) THEN
                CLOSE REFCURORDERNUMBER;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (REFCURORDERNUMBER%ISOPEN) THEN
                CLOSE REFCURORDERNUMBER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTTASKTYPECONF;
    
    
































    FUNCTION FBLEXISTNUMCONFSET
    (
        INUORDER           IN  OR_ORDER.ORDER_ID%TYPE,
        INUTASKTYPE        IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ONUNUMERATOR       OUT OR_ORDER.NUMERATOR_ID%TYPE,
        ONUORDERNUMBER     OUT OR_ORDER.SEQUENCE%TYPE,
        IBLFINDPERTASKTYPE IN  BOOLEAN
    ) RETURN BOOLEAN
    IS
        
        
        
        RCORDER           DAOR_ORDER.STYOR_ORDER;
        RCEXTSYSID        DAOR_EXTERN_SYSTEMS_ID.STYOR_EXTERN_SYSTEMS_ID;
        TBINSTANCE        GE_BOINSTANCE.TYTBINSTANCE;
        NUNUMECONFID      OR_NUMCON_TASKTYPE.NUMERATOR_CONFIG_ID%TYPE;
        CURREFORDERNUMBER OR_BOCONSTANTS.TYRFCURSOR;
        SBTASKTYPECOND    VARCHAR2(500);
        SBSQL             VARCHAR2(2000);
        
        
        
        CNUERRRECUPDATOS  CONSTANT NUMBER := 783;
    BEGIN
        IF (IBLFINDPERTASKTYPE) THEN
            SBTASKTYPECOND := 'Task_Type_Id = :nuTaskType';
        ELSE
            SBTASKTYPECOND := 'Task_Type_Id is NULL';
        END IF;

        SBSQL := ' SELECT Numerator_Config_Id'||
                 ' FROM   Or_NumCon_TaskType'||
                 ' WHERE  ' || SBTASKTYPECOND;
                 
        IF (IBLFINDPERTASKTYPE) THEN
            OPEN CURREFORDERNUMBER FOR SBSQL USING INUTASKTYPE;
        ELSE
            OPEN CURREFORDERNUMBER FOR SBSQL;
        END IF;
        
        FETCH CURREFORDERNUMBER INTO NUNUMECONFID;

        
        IF (CURREFORDERNUMBER%NOTFOUND) THEN
            CLOSE CURREFORDERNUMBER;
            RETURN (FALSE);
        END IF;
        
        
        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDER);
        RCEXTSYSID := DAOR_EXTERN_SYSTEMS_ID.FRCGETRECORD(INUORDER);
        OR_BOINSTANCE.INITPARAMETERSINSTANCE(RCORDER, RCEXTSYSID, TBINSTANCE);

        
        IF (NOT GE_BONUMERATOR.GETNUMERATOR(NUNUMECONFID, TBINSTANCE,
                                            ONUNUMERATOR)) THEN
            
            
            ERRORS.SETERROR(CNUERRRECUPDATOS, TO_CHAR(INUORDER));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        ONUORDERNUMBER := GE_BONUMERATOR.NEXTNUMERATOR(ONUNUMERATOR);
        CLOSE CURREFORDERNUMBER;
        RETURN (TRUE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CURREFORDERNUMBER%ISOPEN) THEN
                CLOSE CURREFORDERNUMBER;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CURREFORDERNUMBER%ISOPEN) THEN
                CLOSE CURREFORDERNUMBER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTNUMCONFSET;

    
    
    
    
    PROCEDURE GETNUMERATORANDSEQUENCE
    (
        INUORDERKEY    IN  OR_ORDER.ORDER_ID%TYPE,
        ONUNUMERATORID OUT OR_ORDER.NUMERATOR_ID%TYPE,
        ONUSEQUENCE    OUT OR_ORDER.SEQUENCE%TYPE
    )
    IS
        
        
        
        CURSOR CU_ORDERKEY
        (
            NUORDER  OR_ORDER.ORDER_ID%TYPE
        )
        IS
            SELECT NUMERATOR_ID, SEQUENCE
            FROM   OR_ORDER
            WHERE  ORDER_ID = NUORDER;
        
        
        
        CNUNOTIENENUMERACION  CONSTANT NUMBER := 2242;
    BEGIN
        OPEN CU_ORDERKEY(INUORDERKEY);
        FETCH CU_ORDERKEY INTO ONUNUMERATORID, ONUSEQUENCE;
        IF (CU_ORDERKEY%NOTFOUND) THEN
            ERRORS.SETERROR(CNUNOTIENENUMERACION, TO_CHAR(INUORDERKEY));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE CU_ORDERKEY;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CU_ORDERKEY%ISOPEN) THEN
                CLOSE CU_ORDERKEY;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CU_ORDERKEY%ISOPEN) THEN
                CLOSE CU_ORDERKEY;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNUMERATORANDSEQUENCE;
    
    
    PROCEDURE GETSBNUMERATORANDSEQUENCE
    (
        INUORDERKEY    IN  OR_ORDER.ORDER_ID%TYPE,
        OSBNUMSEQUENCE OUT VARCHAR2
    )
    IS
        NUNUMERATOR    OR_ORDER.NUMERATOR_ID%TYPE;
        NUSEQUENCE     OR_ORDER.SEQUENCE%TYPE;
    BEGIN
        GETNUMERATORANDSEQUENCE(INUORDERKEY, NUNUMERATOR, NUSEQUENCE);
        IF NUNUMERATOR IS NULL OR NUSEQUENCE IS NULL THEN
            OSBNUMSEQUENCE := TO_CHAR(INUORDERKEY);
        ELSE
            OSBNUMSEQUENCE := TO_CHAR(NUNUMERATOR)||'-'||TO_CHAR(NUSEQUENCE);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSBNUMERATORANDSEQUENCE;
    
    
    FUNCTION FSBGETSBNUMERATORANDSEQUENCE
    (
        INUORDERKEY    IN  OR_ORDER.ORDER_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBNUMSEQUENCE VARCHAR2(100) := NULL;
    BEGIN
        
     	GETSBNUMERATORANDSEQUENCE(INUORDERKEY, SBNUMSEQUENCE);

      	
      	RETURN(SBNUMSEQUENCE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETSBNUMERATORANDSEQUENCE;

    
    
    PROCEDURE GETORDERNUMBER
    (
        INUORDER       IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERSECT    IN  OR_ORDER.OPERATING_SECTOR_ID%TYPE,
        ONUNUMERATORID OUT OR_ORDER.NUMERATOR_ID%TYPE,
        ONUORDERNUMBER OUT OR_ORDER.SEQUENCE%TYPE
    )
    IS
        
        
        
        NUTASKTYPE  OR_ORDER.TASK_TYPE_ID%TYPE;
        SBERROR     VARCHAR2(2000);
        
        
        
         CNUNOEXISCONFPARANUME  CONSTANT NUMBER := 799;
    BEGIN
        
        NUTASKTYPE := DAOR_ORDER.FNUGETTASK_TYPE_ID(INUORDER);
        
        
        
        
        
        IF (FBLEXISTTASKTYPECONF(NUTASKTYPE, INUOPERSECT, ONUNUMERATORID,
                                 ONUORDERNUMBER, TRUE)) THEN
            RETURN;
        END IF;
        
        
        
        IF (FBLEXISTNUMCONFSET(INUORDER, NUTASKTYPE, ONUNUMERATORID,
                               ONUORDERNUMBER, TRUE)) THEN
            RETURN;
        END IF;

        
        
        
        IF (FBLEXISTTASKTYPECONF(NUTASKTYPE, INUOPERSECT, ONUNUMERATORID,
                                 ONUORDERNUMBER, FALSE)) THEN
            RETURN;
        END IF;

        
        
        
        IF (FBLEXISTNUMCONFSET(INUORDER, NUTASKTYPE, ONUNUMERATORID,
                               ONUORDERNUMBER, FALSE)) THEN
            RETURN;
        END IF;

        
        
        SBERROR := TO_CHAR(INUORDER)||'|'||TO_CHAR(NUTASKTYPE);
        ERRORS.SETERROR(CNUNOEXISCONFPARANUME, SBERROR);
        RAISE EX.CONTROLLED_ERROR;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERNUMBER;
    
    
    FUNCTION FDTMAXDATETOLEGALIZE
    (
        INUORDERID     IN  OR_ORDER.ORDER_ID%TYPE,
        IDTASSIGNDATE  IN  OR_ORDER.ASSIGNED_DATE%TYPE,
        IDTEXECESTDATE IN OR_ORDER.EXEC_ESTIMATE_DATE%TYPE
    )
    RETURN DATE
    IS
        
        
        
        NUSTANDTIME         GE_ITEMS.STANDARD_TIME%TYPE := 0;
        NUADMINTIME         NUMBER;
        DTMAXDATELEG        OR_ORDER.MAX_DATE_TO_LEGALIZE%TYPE;
        NUACTIVITYID        OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE;
        TBORDERACTIVITIES   OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
        RCGE_ITEMS          DAGE_ITEMS.STYGE_ITEMS;
        NUINDEX             NUMBER;
        SBWORKDAYS          OR_TASK_TYPE.WORK_DAYS%TYPE;
        NUTASKTYPE          OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
        DTFECHACREACION     OR_ORDER.CREATED_DATE%TYPE;
        NUDIASINC           NUMBER;
        NUMINUTOS           NUMBER;
        NUMINCREATED        NUMBER;
        DTFECHAASIGNACION   OR_ORDER.CREATED_DATE%TYPE;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        SBLABORAL           GE_CALENDAR.LABORAL%TYPE;
        DTINITDATE          OR_ORDER.CREATED_DATE%TYPE;
        
        
        
        CNUMINDIA           CONSTANT NUMBER := 1440;
        CSBDAYWORK          CONSTANT VARCHAR2(1) := 'L'; 
        CSBDAYCALENDAR      CONSTANT VARCHAR2(1) := 'B'; 

    BEGIN

        UT_TRACE.TRACE('INICIO - Or_BOOrder.fdtMaxDateToLegalize', 5 );

        UT_TRACE.TRACE(' inuOrderId: ['||INUORDERID||']', 5 );
        UT_TRACE.TRACE(' idtAssignDate: ['||IDTASSIGNDATE||']', 5 );
        UT_TRACE.TRACE(' idtExecEstDate: ['||IDTEXECESTDATE||']', 5 );
        
        OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER(INUORDERID, TBORDERACTIVITIES);

        NUINDEX := TBORDERACTIVITIES.FIRST;
        
        WHILE NUINDEX IS NOT NULL LOOP

           UT_TRACE.TRACE('tbOrderActivities('||NUINDEX||').nuActivityId = '||TBORDERACTIVITIES(NUINDEX).NUACTIVITYID, 5 );

            
            RCGE_ITEMS := DAGE_ITEMS.FRCGETRECORD(TBORDERACTIVITIES(NUINDEX).NUACTIVITYID);
            UT_TRACE.TRACE('ACtividad = '||RCGE_ITEMS.ITEMS_ID, 5 );
            UT_TRACE.TRACE('tiempo standar = '||RCGE_ITEMS.STANDARD_TIME, 5 );
            NUSTANDTIME := NUSTANDTIME + NVL(RCGE_ITEMS.STANDARD_TIME,0);

            NUINDEX := TBORDERACTIVITIES.NEXT(NUINDEX);

        END LOOP;

        
        NUADMINTIME := GNUADMINTIME;
        
        RCORDER             := DAOR_ORDER.FRCGETRECORD(INUORDERID);
        NUTASKTYPE          := RCORDER.TASK_TYPE_ID;
        DTINITDATE          := IDTASSIGNDATE;

        
        SBWORKDAYS := DAOR_TASK_TYPE.FSBGETWORK_DAYS(NUTASKTYPE);
        
        
        SBLABORAL := DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( DTINITDATE),GE_BOCALENDAR.FNUOBTPAISPORUSUARIO, 0);
        IF SBLABORAL IS NULL THEN
            ERRORS.SETERROR(9942); 
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        
        IF( SBLABORAL = OR_BOCONSTANTS.CSBNO AND SBWORKDAYS = CSBDAYWORK) THEN
            
            WHILE (SBLABORAL = OR_BOCONSTANTS.CSBNO ) LOOP
                DTINITDATE := DTINITDATE+1;
                SBLABORAL := DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( DTINITDATE),GE_BOCALENDAR.FNUOBTPAISPORUSUARIO);
            END LOOP;
        END IF;

        
        DTFECHAASIGNACION := TRUNC(DTINITDATE);
        
        
        NUMINCREATED := TRUNC(( DTINITDATE - DTFECHAASIGNACION) * CNUMINDIA);
        
        
        NUDIASINC   :=  TRUNC ( (NUSTANDTIME + NUMINCREATED ) / CNUMINDIA);
        
        
        NUMINUTOS   :=  ((NUSTANDTIME + NUMINCREATED) - (NUDIASINC * CNUMINDIA)) / CNUMINDIA;

        UT_TRACE.TRACE('Dia Trabajo Tipo Trabajo: ['||SBWORKDAYS||'] - '
            || 'Tiempo Standar: ['||NUSTANDTIME||'] - '
            || 'Dias: ['||NUDIASINC||'] - '
            || 'Minutos: ['||NUMINUTOS||'] ', 5 );

        
        IF (SBWORKDAYS = CSBDAYWORK) THEN
            
            DTMAXDATELEG := PKHOLIDAYMGR.FDTGETDATENONHOLIDAY
                            (
                                DTFECHAASIGNACION,
                                NUDIASINC
                            )   +  NUMINUTOS;

            
            
            IF (  DAGE_CALENDAR.FBLEXIST( TRUNC ( DTMAXDATELEG) ,GE_BOCALENDAR.FNUOBTPAISPORUSUARIO)
                AND  DAGE_CALENDAR.FSBGETLABORAL( TRUNC ( DTMAXDATELEG ),GE_BOCALENDAR.FNUOBTPAISPORUSUARIO)
                    = GE_BOPARAMETER.FSBGET('NO_LABORAL_DAYS') )
                  THEN
                
                NUMINUTOS := DTMAXDATELEG - TRUNC(DTMAXDATELEG);
                DTMAXDATELEG := PKHOLIDAYMGR.FDTGETDATENONHOLIDAY
                            (
                                DTMAXDATELEG,
                                1               
                            )   +  NUMINUTOS;
            END IF;
        ELSE
            
            
            DTMAXDATELEG := DTINITDATE + ((NUSTANDTIME + NUMINCREATED + NUADMINTIME) / CNUMINDIA);
        END IF;

        
        
        
        
        IF (DTMAXDATELEG < IDTEXECESTDATE) THEN
            DTMAXDATELEG := IDTEXECESTDATE +
                            ((NUSTANDTIME + NUADMINTIME)/CNUMINDIA);
        END IF;

        UT_TRACE.TRACE('return dtMaxDateLeg'||DTMAXDATELEG, 5 );

        UT_TRACE.TRACE('FIN - Or_BOOrder.fdtMaxDateToLegalize', 5 );
        
        RETURN (DTMAXDATELEG);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTMAXDATETOLEGALIZE;
    
    
    FUNCTION FDTEXECMAXPRODDATE
    (
        INUORDER    IN  OR_ORDER.ORDER_ID%TYPE
    )
    RETURN DATE
    IS
        
        
        
        NUPROCESSID     OR_PROCESS.WF_PROCESS_ID%TYPE;
        DTEXEMAXDATPROD OR_PROCESS.EXEC_PROD_MAXI_DATE%TYPE:=NULL;
    BEGIN
        
        IF DAOR_WF_INTERFACE.FBLEXIST(INUORDER) THEN
            NUPROCESSID := DAOR_WF_INTERFACE.FNUGETWF_PROCESS_ID(INUORDER);
            DTEXEMAXDATPROD := DAOR_PROCESS.FDTGETEXEC_PROD_MAXI_DATE(NUPROCESSID);
        END IF;
        RETURN DTEXEMAXDATPROD;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTEXECMAXPRODDATE;

    
    FUNCTION FBLHASITEMSASSIGNED
    (
        INUORDER IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        
        
        
        NUCONTA  NUMBER := 0;
        
        
        
        CURSOR CU_ORDERITEMS
        (
            NUORDER   OR_ORDER.ORDER_ID%TYPE
        )
        IS
            SELECT COUNT(*)
            FROM   OR_ORDER_ITEMS
            WHERE  ORDER_ID = NUORDER
              AND  ROWNUM = 1;
    BEGIN
        OPEN CU_ORDERITEMS(INUORDER);
        FETCH CU_ORDERITEMS INTO NUCONTA;
        CLOSE CU_ORDERITEMS;
        IF (NUCONTA = 0) THEN
            RETURN (FALSE);
        END IF;
        RETURN (TRUE);
    EXCEPTION
        WHEN OTHERS THEN
            IF (CU_ORDERITEMS%ISOPEN) THEN
                CLOSE CU_ORDERITEMS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLHASITEMSASSIGNED;
    

    
    FUNCTION FBLHASCOMMENTTYPE
    (
        INUORDER           IN OR_ORDER.ORDER_ID%TYPE,
        INUCUSTCARCOMMTYPE IN GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        
        
        
        NUCONTA   NUMBER := 0;
        
        
        
        CURSOR CU_HASCOMMENTTYPE
        (
            NUORDER     OR_ORDER.ORDER_ID%TYPE,
            NUCOMMTYPE  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE
        )
        IS
            SELECT COUNT(*)
            FROM   OR_ORDER_COMMENT
            WHERE  COMMENT_TYPE_ID = NUCOMMTYPE
              AND  ORDER_ID = NUORDER;
    BEGIN
        OPEN CU_HASCOMMENTTYPE(INUORDER, INUCUSTCARCOMMTYPE);
        FETCH CU_HASCOMMENTTYPE INTO NUCONTA;
        CLOSE CU_HASCOMMENTTYPE;
        IF (NUCONTA = 0) THEN
            RETURN (FALSE);
        ELSE
            RETURN (TRUE);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            IF (CU_HASCOMMENTTYPE%ISOPEN) THEN
                CLOSE CU_HASCOMMENTTYPE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLHASCOMMENTTYPE;
    
    
    FUNCTION FNUGETWFTASKIDORDER
    (
        INUWFTASKID  IN  OR_WF_INTERFACE.WF_TASK_ID%TYPE
    )
    RETURN NUMBER
    IS
        
        
        
        NUORDER  OR_ORDER.ORDER_ID%TYPE;
        
        
        
        CNUERR_NOEXIORDEN  CONSTANT NUMBER := 1042;
        
        
        
        CURSOR CU_WFTASKORDER
        (
            NUWFTASKID  OR_WF_INTERFACE.WF_TASK_ID%TYPE
        )
        IS




            SELECT OR_WF_INTERFACE.ORDER_ID
              FROM OR_WF_INTERFACE, OR_ORDER
             WHERE OR_WF_INTERFACE.WF_TASK_ID = NUWFTASKID
               AND OR_WF_INTERFACE.ORDER_ID = OR_ORDER.ORDER_ID
               ORDER BY OR_ORDER.CREATED_DATE DESC;
              
    BEGIN
        OPEN CU_WFTASKORDER(INUWFTASKID);
        FETCH CU_WFTASKORDER INTO NUORDER;
        IF (CU_WFTASKORDER%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_NOEXIORDEN, TO_CHAR(INUWFTASKID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE CU_WFTASKORDER;
        RETURN NUORDER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CU_WFTASKORDER%ISOPEN) THEN
                CLOSE CU_WFTASKORDER;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CU_WFTASKORDER%ISOPEN) THEN
                CLOSE CU_WFTASKORDER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETWFTASKIDORDER;


    FUNCTION FNUGETWFTASKIDORDERFIRST
    (
        INUWFTASKID  IN  OR_WF_INTERFACE.WF_TASK_ID%TYPE
    )
    RETURN NUMBER
    IS
        
        
        
        NUORDER  OR_ORDER.ORDER_ID%TYPE;
        
        
        
        CNUERR_NOEXIORDEN  CONSTANT NUMBER := 1042;
        
        
        
        CURSOR CU_WFTASKORDER
        (
            NUWFTASKID  OR_WF_INTERFACE.WF_TASK_ID%TYPE
        )
        IS
            SELECT OR_WF_INTERFACE.ORDER_ID
              FROM OR_WF_INTERFACE, OR_ORDER
             WHERE OR_WF_INTERFACE.WF_TASK_ID = NUWFTASKID
               AND OR_WF_INTERFACE.ORDER_ID = OR_ORDER.ORDER_ID
               ORDER BY OR_ORDER.CREATED_DATE ASC;

    BEGIN
        OPEN CU_WFTASKORDER(INUWFTASKID);
        FETCH CU_WFTASKORDER INTO NUORDER;
        IF (CU_WFTASKORDER%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_NOEXIORDEN, TO_CHAR(INUWFTASKID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE CU_WFTASKORDER;
        RETURN NUORDER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CU_WFTASKORDER%ISOPEN) THEN
                CLOSE CU_WFTASKORDER;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CU_WFTASKORDER%ISOPEN) THEN
                CLOSE CU_WFTASKORDER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETWFTASKIDORDERFIRST;

    
    PROCEDURE INSERTINORDERACTIONLOG
    (
        INUACTION  IN OR_LOG_ORDER_ACTION.ACTION_ID%TYPE,
        INUORDER   IN OR_LOG_ORDER_ACTION.ORDER_ID%TYPE,
        ISBERRMESS IN VARCHAR2
    )
    IS
        
        
        
        RCLOGORDERACTION  DAOR_LOG_ORDER_ACTION.STYOR_LOG_ORDER_ACTION;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        RCLOGORDERACTION.ACTION_ID := INUACTION;
        RCLOGORDERACTION.ORDER_ID := INUORDER;
        RCLOGORDERACTION.PROCESS_DATE := SYSDATE;
        RCLOGORDERACTION.ERROR_MESSAGE := ISBERRMESS;
        
        IF NOT(DAOR_LOG_ORDER_ACTION.FBLEXIST(INUACTION, INUORDER)) THEN
            DAOR_LOG_ORDER_ACTION.INSRECORD(RCLOGORDERACTION);
        ELSE
            DAOR_LOG_ORDER_ACTION.UPDRECORD(RCLOGORDERACTION);
        END IF;
        COMMIT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE;
        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSERTINORDERACTIONLOG;
    
    
    PROCEDURE INSERTINORDERACTIONLOG
    (
        INUACTION  IN OR_LOG_ORDER_ACTION.ACTION_ID%TYPE,
        ITBORDERS  IN DAOR_ORDER.TYTBORDER_ID,
        ISBERRMESS IN VARCHAR2
    )
    IS
        RCLOGORDERACTION  DAOR_LOG_ORDER_ACTION.STYOR_LOG_ORDER_ACTION;
        NUINDEX           BINARY_INTEGER;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        RCLOGORDERACTION.ACTION_ID := INUACTION;
        RCLOGORDERACTION.PROCESS_DATE := SYSDATE;
        RCLOGORDERACTION.ERROR_MESSAGE:= ISBERRMESS;
        IF (ITBORDERS.COUNT = 0) THEN
            RETURN;
        END IF;
        NUINDEX := ITBORDERS.FIRST;
        LOOP
            RCLOGORDERACTION.ORDER_ID := ITBORDERS(NUINDEX);
            
            IF NOT(DAOR_LOG_ORDER_ACTION.FBLEXIST(INUACTION,ITBORDERS(NUINDEX)))
            THEN
                DAOR_LOG_ORDER_ACTION.INSRECORD(RCLOGORDERACTION);
            ELSE
                DAOR_LOG_ORDER_ACTION.UPDRECORD(RCLOGORDERACTION);
            END IF;
            EXIT WHEN (NUINDEX = ITBORDERS.LAST);
            NUINDEX := ITBORDERS.NEXT(NUINDEX);
        END LOOP;
        COMMIT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE;
        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSERTINORDERACTIONLOG;

    
    PROCEDURE UPDATEORDERSSTATUS
    (
        ITBORDERS      IN DAOR_ORDER.TYTBORDER_ID,
        INUORDERSTATUS IN OR_ORDER.ORDER_STATUS_ID%TYPE
    )
    IS
    BEGIN
        FORALL NUINDEX IN ITBORDERS.FIRST .. ITBORDERS.LAST
            UPDATE OR_ORDER
            SET ORDER_STATUS_ID = INUORDERSTATUS
            WHERE ORDER_ID = ITBORDERS(NUINDEX);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEORDERSSTATUS;
    
    
    FUNCTION FBLHASTOLEGALIZEITEMS_
    (
        INUORDER IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        
        
        
        BLEXISTNOCONSUM  BOOLEAN := FALSE;  
        TBITEMS          OR_BOITEMS.TYTBITEMS;
        NUINDEX          BINARY_INTEGER;
    BEGIN

















        RETURN FALSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLHASTOLEGALIZEITEMS_;
    
    
    PROCEDURE LOCKORDERFROMQUERY
    (
        ISBQUERY    IN   VARCHAR2 DEFAULT NULL,
        OTBORDERREQ OUT  OR_BOINTERNALSERVICIES.TYTBSBDUMMY,
        ONUAMOUNT   OUT  NUMBER
    )IS
        CUREFORDERSELECTED DAOR_ORDER.TYREFCURSOR;
    	RCORDER			   DAOR_ORDER.STYOR_ORDER;
        NUIDXPL            NUMBER;
    BEGIN
        
    	CUREFORDERSELECTED := DAOR_ORDER.FRFGETRECORDS
	   	   	   	   	   	   	   	(
				ISBQUERY,
				TRUE     
                                );

        
        NUIDXPL := 1;

        FETCH CUREFORDERSELECTED INTO RCORDER;

        WHILE CUREFORDERSELECTED%FOUND LOOP
	        OTBORDERREQ(NUIDXPL) := TO_CHAR(RCORDER.ORDER_ID);
            NUIDXPL := NUIDXPL + 1;
	         FETCH CUREFORDERSELECTED INTO RCORDER;
	    END LOOP;
        IF CUREFORDERSELECTED%ISOPEN THEN
            CLOSE CUREFORDERSELECTED;
        END IF;
        
        ONUAMOUNT := OTBORDERREQ.COUNT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUREFORDERSELECTED%ISOPEN THEN
                CLOSE CUREFORDERSELECTED;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF CUREFORDERSELECTED%ISOPEN THEN
	            CLOSE CUREFORDERSELECTED;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOCKORDERFROMQUERY;
    
    
    FUNCTION FBLEXIST
    (
        INUNUMERATOR IN OR_ORDER.NUMERATOR_ID%TYPE,
        INUSEQUENCE  IN OR_ORDER.SEQUENCE%TYPE
    )
    RETURN BOOLEAN
    IS
        
        
        
        NUCOUNTER NUMBER := 0;
        
        
        
        CURSOR CU_EXIST
        (
            NUNUMERATOR OR_ORDER.NUMERATOR_ID%TYPE,
            NUSEQUENCE  OR_ORDER.SEQUENCE%TYPE
        )
        IS
            SELECT COUNT(*)
            FROM   OR_ORDER
            WHERE  NUMERATOR_ID = NUNUMERATOR
              AND  SEQUENCE = NUSEQUENCE
              AND  ROWNUM = 1;
    BEGIN
        OPEN CU_EXIST(INUNUMERATOR, INUSEQUENCE);
        FETCH CU_EXIST INTO NUCOUNTER;
        CLOSE CU_EXIST;
        IF (NUCOUNTER = 0) THEN
            RETURN FALSE;
        END IF;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            IF (CU_EXIST%ISOPEN) THEN
                CLOSE CU_EXIST;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXIST;

    
    FUNCTION FNUGETRELATEDORDER
    (
        INUORDER        IN OR_RELATED_ORDER.ORDER_ID%TYPE,
        INURELATIONTYPE IN OR_RELATED_ORDER.RELA_ORDER_TYPE_ID%TYPE
    )
    RETURN OR_RELATED_ORDER.RELATED_ORDER_ID%TYPE
    IS
        
        
        
        NURELAORDER   OR_RELATED_ORDER.RELATED_ORDER_ID%TYPE;
        
        
        
        CURSOR CU_RELATEDORDER
        (
            NUORDER        OR_RELATED_ORDER.ORDER_ID%TYPE,
            NURELATIONTYPE OR_RELATED_ORDER.RELA_ORDER_TYPE_ID%TYPE
        )
        IS
            SELECT RELATED_ORDER_ID
            FROM   OR_RELATED_ORDER
            WHERE  ORDER_ID = NUORDER
              AND  RELA_ORDER_TYPE_ID = NURELATIONTYPE
              AND  ROWNUM = 1;
        
        
        
        CNUERR_NOT_EXIST_RELA_ORDER CONSTANT NUMBER := 10510;
    BEGIN
        OPEN CU_RELATEDORDER(INUORDER, INURELATIONTYPE);
        FETCH CU_RELATEDORDER INTO NURELAORDER;
        IF (CU_RELATEDORDER%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_NOT_EXIST_RELA_ORDER, TO_CHAR(INUORDER)||
                 OR_BOCONSTANTS.CSBERRPARASEPA||TO_CHAR(INURELATIONTYPE)||'-'||
                 DAGE_TRANSITION_TYPE.FSBGETDESCRIPTION(INURELATIONTYPE));
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE CU_RELATEDORDER;
        RETURN NURELAORDER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            IF (CU_RELATEDORDER%ISOPEN) THEN
                CLOSE CU_RELATEDORDER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETRELATEDORDER;
    
    
    FUNCTION FBLEXISTORDERWITHTHISINSTANCE
    (
        INUINSTANCEID IN OR_WF_INTERFACE.WF_TASK_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        
        
        
        NUCOUNTER BINARY_INTEGER := 0;
        
        
        
        CURSOR CU_EXISTORDER
        (
            NUINSTANCEID OR_WF_INTERFACE.WF_TASK_ID%TYPE
        )
        IS
            SELECT COUNT(*)
            FROM   OR_WF_INTERFACE
            WHERE  WF_TASK_ID = NUINSTANCEID
            AND    ROWNUM = 1;
    BEGIN
        OPEN CU_EXISTORDER(INUINSTANCEID);
        FETCH CU_EXISTORDER INTO NUCOUNTER;
        CLOSE CU_EXISTORDER;
        IF (NUCOUNTER = 0) THEN
            RETURN FALSE;
        END IF;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            IF (CU_EXISTORDER%ISOPEN) THEN
                CLOSE CU_EXISTORDER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTORDERWITHTHISINSTANCE;
    
    
    FUNCTION FSBGETORDERSNUMBERS
    (
        ITBORDERS IN DAOR_ORDER.TYTBORDER_ID
    )
    RETURN VARCHAR2
    IS
        
        
        
        NUINDEX        BINARY_INTEGER;
        SBORDERS       VARCHAR2(100) := NULL;
        SBORDERNUMBERS VARCHAR2(4000) := NULL;
    BEGIN
        NUINDEX := ITBORDERS.FIRST;
        LOOP
            OR_BOORDER.GETSBNUMERATORANDSEQUENCE(ITBORDERS(NUINDEX), SBORDERS);
            SBORDERNUMBERS := SBORDERNUMBERS || SBORDERS ||', ';
            EXIT WHEN (NUINDEX = ITBORDERS.LAST);
            NUINDEX := ITBORDERS.NEXT(NUINDEX);
        END LOOP;
        
        
        RETURN (SUBSTR(SBORDERNUMBERS, 0, LENGTH(SBORDERNUMBERS)-2));
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETORDERSNUMBERS;
    
    
    FUNCTION FNUGETWFTASKTYPEFROMWFTASKID
    (
        INUTASKCODE IN OR_WF_INTERFACE.WF_TASK_ID%TYPE
    )
    RETURN NUMBER
    IS
        
        
        
        NUWFTASKTYPE OR_WF_INTERFACE.WF_TASK_TYPE_ID%TYPE := NULL;
        
        
        
        CURSOR CU_WFTASKTYPE
        (
            NUINSTANCEID OR_WF_INTERFACE.WF_TASK_ID%TYPE
        )
        IS
            SELECT WF_TASK_TYPE_ID
            FROM   OR_WF_INTERFACE
            WHERE  WF_TASK_ID = NUINSTANCEID
              AND  ROWNUM = 1;
    BEGIN
        OPEN CU_WFTASKTYPE(INUTASKCODE);
        FETCH CU_WFTASKTYPE INTO NUWFTASKTYPE;
        CLOSE CU_WFTASKTYPE;
        RETURN NUWFTASKTYPE;
    EXCEPTION
        WHEN OTHERS THEN
            IF (CU_WFTASKTYPE%ISOPEN) THEN
                CLOSE CU_WFTASKTYPE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETWFTASKTYPEFROMWFTASKID;

    
    FUNCTION FTBGETORDERCOMMENTS
    (
        INUORDER       IN OR_ORDER.ORDER_ID%TYPE,
        INUCOMMENTTYPE IN GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE
    )
    RETURN DAOR_ORDER_COMMENT.TYTBORDER_COMMENT
    IS
        
        
        
        TBCOMMENTS  DAOR_ORDER_COMMENT.TYTBORDER_COMMENT;
        NUINDEX     BINARY_INTEGER := 0;
        SBCOMMENT   OR_ORDER_COMMENT.ORDER_COMMENT%TYPE;
        
        
        
        CURSOR CU_COMMENT
        (
            NUORDER    OR_ORDER.ORDER_ID%TYPE,
            NUCOMMTYPE GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE
        )
        IS
            SELECT ORDER_COMMENT
            FROM   OR_ORDER_COMMENT
            WHERE  ORDER_ID = NUORDER
              AND  COMMENT_TYPE_ID = NUCOMMTYPE;
    BEGIN
        OPEN CU_COMMENT(INUORDER, INUCOMMENTTYPE);
        FETCH CU_COMMENT INTO SBCOMMENT;
        WHILE (CU_COMMENT%FOUND) LOOP
            NUINDEX := NUINDEX + 1;
            TBCOMMENTS(NUINDEX) := SBCOMMENT;
            FETCH CU_COMMENT INTO SBCOMMENT;
        END LOOP;
        CLOSE CU_COMMENT;
        RETURN TBCOMMENTS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CU_COMMENT%ISOPEN) THEN
                CLOSE CU_COMMENT;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CU_COMMENT%ISOPEN) THEN
                CLOSE CU_COMMENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETORDERCOMMENTS;
    
    
    FUNCTION FDTEXECUTIONESTIMATEDATE
    (
        INUASSIGNEDDATE     IN OR_ORDER.ASSIGNED_DATE%TYPE,
        IDTFINALEXECDATE    IN OR_ORDER.EXEC_ESTIMATE_DATE%TYPE,
        IDTINIDATETOCOMPUTE IN OR_ORDER.ASSIGNED_DATE%TYPE,
        INUTIMEAMOUNT       IN OR_OPE_UNI_TASK_TYPE.TIME_FACTOR%TYPE
    )
    RETURN DATE
    IS
        
        
        
        DTFINEXECDATE  OR_ORDER.EXEC_ESTIMATE_DATE%TYPE;
        
        
        
        CNUMINUTESINADAY CONSTANT NUMBER := 1440;
    BEGIN
        
        
        
        
        
        
        
        
        
        
        IF (TRUNC(INUASSIGNEDDATE) = TRUNC(IDTFINALEXECDATE)) THEN
            DTFINEXECDATE := IDTINIDATETOCOMPUTE +
                             NVL(INUTIMEAMOUNT, 0)/CNUMINUTESINADAY;
            RETURN (DTFINEXECDATE);
        END IF;
        RETURN (IDTFINALEXECDATE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTEXECUTIONESTIMATEDATE;
    
    
    FUNCTION FNUGETORDERTIMEAMOUNT
    (
        INUORDER  IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN NUMBER
    IS
        
        
        
        NUSUMHOUR   NUMBER := 0;

    BEGIN
        RETURN NUSUMHOUR;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETORDERTIMEAMOUNT;
    
    
    FUNCTION FTBGETORDERSTATFROMACTION
    (
        INUACTION IN OR_TRANSITION.ACTION_ID%TYPE
    )
    RETURN UT_STRING.TYTB_STRING
    IS
        
        
        
        TBINITSTAT  UT_STRING.TYTB_STRING;
        CURSOR CU_INITSTAT
        IS
            SELECT DISTINCT INITIAL_STATUS_ID
            FROM   OR_TRANSITION
            WHERE  ACTION_ID = INUACTION;
    BEGIN
        OPEN CU_INITSTAT;
        FETCH CU_INITSTAT BULK COLLECT INTO TBINITSTAT;
        CLOSE CU_INITSTAT;
        RETURN TBINITSTAT;
    EXCEPTION
        WHEN OTHERS THEN
           IF (CU_INITSTAT%ISOPEN) THEN
               CLOSE CU_INITSTAT;
           END IF;
           ERRORS.SETERROR;
           RAISE EX.CONTROLLED_ERROR;
    END FTBGETORDERSTATFROMACTION;
    
    
    FUNCTION FSBGETORDERSTATUSFROMACTION
	(
       ITBACTIONS   IN DAOR_TRANSITION.TYTBACTION_ID,
       ISBDELIMITER IN VARCHAR2 DEFAULT ','
	)
	RETURN VARCHAR2
	IS
        
	    
	    
	    
	    TBINITSTAT      UT_STRING.TYTB_STRING;
        NUGENINDEX      BINARY_INTEGER := 0;
        NUINDEX         BINARY_INTEGER := 0;
	    SBINITSTATORDER VARCHAR2(4000) := NULL;
        
	    
	    
	    
	    FUNCTION FBLEXISTINGENERALTABLE
	    (
	        INUSTATUS IN OR_TRANSITION.INITIAL_STATUS_ID%TYPE
	    )
	    RETURN BOOLEAN
	    IS
  	        
	        
	        
	        NUINDEX BINARY_INTEGER;
	    BEGIN
	        IF (TBINITSTAT.COUNT = 0) THEN
	            RETURN FALSE;
	        END IF;
	        NUINDEX := TBINITSTAT.FIRST;
	        LOOP
	            IF (TBINITSTAT(NUINDEX) = INUSTATUS) THEN
	               RETURN TRUE;
	            END IF;
 	            EXIT WHEN (NUINDEX = TBINITSTAT.LAST);
                NUINDEX := TBINITSTAT.NEXT(NUINDEX);
	        END LOOP;
	        RETURN FALSE;
	    EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
	    END FBLEXISTINGENERALTABLE;
	
	    
        PROCEDURE DETERMINATEINITSTATUS
        (
            INUACTION IN OR_TRANSITION.ACTION_ID%TYPE
        )
        IS
            
            
            
            TBAUXILIAR UT_STRING.TYTB_STRING;
            NUINDEX    BINARY_INTEGER;
        BEGIN
            
            TBAUXILIAR := OR_BOORDER.FTBGETORDERSTATFROMACTION(INUACTION);
            IF (TBAUXILIAR.COUNT = 0) THEN
                RETURN;
            END IF;
            NUINDEX := TBAUXILIAR.FIRST;
            LOOP
                
                IF NOT(FBLEXISTINGENERALTABLE(TBAUXILIAR(NUINDEX))) THEN
                    NUGENINDEX := NUGENINDEX + 1;
                    TBINITSTAT(NUGENINDEX) := TBAUXILIAR(NUINDEX);
                END IF;
                EXIT WHEN (NUINDEX = TBAUXILIAR.LAST);
                NUINDEX := TBAUXILIAR.NEXT(NUINDEX);
            END LOOP;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END DETERMINATEINITSTATUS;
	BEGIN
		IF (ITBACTIONS.COUNT = 0) THEN
			RETURN SBINITSTATORDER;
		END IF;
		
		NUINDEX := ITBACTIONS.FIRST;
		LOOP
		    DETERMINATEINITSTATUS(ITBACTIONS(NUINDEX));
		    EXIT WHEN (NUINDEX = ITBACTIONS.LAST);
		    NUINDEX := ITBACTIONS.NEXT(NUINDEX);
		END LOOP;
		
		
		IF (TBINITSTAT.COUNT = 0) THEN
            RETURN SBINITSTATORDER;
		END IF;
		NUINDEX := TBINITSTAT.FIRST;
		LOOP
		    SBINITSTATORDER:=SBINITSTATORDER||TBINITSTAT(NUINDEX)||ISBDELIMITER;
		    EXIT WHEN(NUINDEX = TBINITSTAT.LAST);
		    NUINDEX := TBINITSTAT.NEXT(NUINDEX);
		END LOOP;
		RETURN SUBSTR(SBINITSTATORDER, 0, LENGTH(SBINITSTATORDER)-1);
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
		    RAISE;
		WHEN OTHERS THEN
		    ERRORS.SETERROR;
     	    RAISE EX.CONTROLLED_ERROR;
	END FSBGETORDERSTATUSFROMACTION;

    
    FUNCTION FNUGETORDVALFORCOMPONENTID
    (
        INUEXTERSYSTEID IN OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE
    )
    RETURN NUMBER
    IS
        
        
        
        RFORDERSCOMP  CONSTANTS.TYREFCURSOR;
        NUORDER       OR_ORDER.ORDER_ID%TYPE;
        NUTASKTYPE    OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
        NUOPERUNIT    OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        NUTOTALVALUE  OR_ORDER.ORDER_VALUE%TYPE := 0;
        NUORDERVALUE  OR_ORDER.ORDER_VALUE%TYPE;
        NUCHARGESTATUS OR_ORDER.CHARGE_STATUS%TYPE;
    BEGIN
        

        IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
        END IF;

        OPEN OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID(INUEXTERSYSTEID, CNUENTITYCOMPONENT);

        FETCH OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID INTO NUORDER, NUTASKTYPE, NUOPERUNIT, NUORDERVALUE, NUCHARGESTATUS;

        WHILE (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%FOUND) LOOP
            
            IF OR_BOCHARGESBYORDER.FBLGENERATECHARGEBYSTATUS (NUCHARGESTATUS) THEN
                NUTOTALVALUE := NUTOTALVALUE + NVL(NUORDERVALUE, 0);
            END IF;

            FETCH OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID INTO NUORDER, NUTASKTYPE, NUOPERUNIT, NUORDERVALUE, NUCHARGESTATUS;
        END LOOP;

        IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
        END IF;

        RETURN (NUTOTALVALUE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETORDVALFORCOMPONENTID;
    
    
    FUNCTION FNUGETORDVALFORMOTIVEID
    (
        INUFATHEREXTSYSTEID IN OR_EXTERN_SYSTEMS_ID.FATHE_EXTER_SYSTE_ID%TYPE
    )
    RETURN NUMBER
    IS
        
        
        
        RFORDERSMOT   CONSTANTS.TYREFCURSOR;
        RCORDER       DAOR_ORDER.STYOR_ORDER;
        NUTOTALVALUE  OR_ORDER.ORDER_VALUE%TYPE := 0;
    BEGIN
        
        IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
        END IF;
        OPEN OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID(INUFATHEREXTSYSTEID, CNUENTITYMOTIVEID);
        FETCH OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID INTO RCORDER;
        WHILE (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%FOUND) LOOP
            
           IF OR_BOCHARGESBYORDER.FBLGENERATECHARGEBYSTATUS (RCORDER.CHARGE_STATUS) THEN
                NUTOTALVALUE := NUTOTALVALUE + RCORDER.ORDER_VALUE;
           END IF;
            
            FETCH OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID INTO RCORDER;
        END LOOP;
        IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
        END IF;

        RETURN (NUTOTALVALUE);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETORDVALFORMOTIVEID;

    
    
    FUNCTION FNUGETITEMVALFORCOMPID
    (
        INUEXTERSYSTEID  IN OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE,
        ISBITEMSLIST     IN VARCHAR2,
        ISBINCLUDE       IN VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBYES
    )
    RETURN NUMBER
    IS
        
        
        
        RFORDERSCOMP  CONSTANTS.TYREFCURSOR;
        NUORDER       OR_ORDER.ORDER_ID%TYPE;
        NUTASKTYPE    OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
        NUOPERUNIT    OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        NUTOTALVALUE  OR_ORDER.ORDER_VALUE%TYPE := 0;
        NUGETITEMCLASSIFID GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
        NUORDERVALUE  OR_ORDER.ORDER_VALUE%TYPE;
        NUCHARGESTATUS OR_ORDER.CHARGE_STATUS%TYPE;

    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.fnuGetItemValForCompId, Componente : ' ||INUEXTERSYSTEID,7);

        IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
        END IF;

        
        OPEN OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID(INUEXTERSYSTEID, CNUENTITYCOMPONENT);
        
        FETCH OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID INTO NUORDER, NUTASKTYPE, NUOPERUNIT,NUORDERVALUE, NUCHARGESTATUS;
        WHILE (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%FOUND) LOOP
            UT_TRACE.TRACE('    Orden:'||NUORDER,10);
            
            IF OR_BOCHARGESBYORDER.FBLGENERATECHARGEBYSTATUS (NUCHARGESTATUS) THEN
                FOR RCITEMSINORDER IN OR_BCITEMS.CUITEMSINORDER(NUORDER) LOOP
                    NUGETITEMCLASSIFID := DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(RCITEMSINORDER.ITEMS_ID);
                    UT_TRACE.TRACE('    Item:['||RCITEMSINORDER.ITEMS_ID||'] nuGetItemClassifId:['||NUGETITEMCLASSIFID||']',10);
                    IF ISBINCLUDE = GE_BOCONSTANTS.GETYES THEN
                        IF INSTR(','||ISBITEMSLIST||',',','||RCITEMSINORDER.ITEMS_ID||',') > 0 AND
                           DAGE_ITEM_CLASSIF.FSBGETQUANTITY_CONTROL(NUGETITEMCLASSIFID)  = OR_BOCONSTANTS.CNUDECREASE
                                         THEN
                            NUTOTALVALUE := NUTOTALVALUE + NVL(RCITEMSINORDER.VALUE,0);
                            UT_TRACE.TRACE('        Item:'||RCITEMSINORDER.ITEMS_ID
                                             ||'- Valor:'||RCITEMSINORDER.VALUE,10);
                        END IF;
                    ELSE
                        IF NOT INSTR(','||ISBITEMSLIST||',', ','||RCITEMSINORDER.ITEMS_ID||',') > 0 AND
                           DAGE_ITEM_CLASSIF.FSBGETQUANTITY_CONTROL(NUGETITEMCLASSIFID)  = OR_BOCONSTANTS.CNUDECREASE
                                        THEN
                            NUTOTALVALUE := NUTOTALVALUE + NVL(RCITEMSINORDER.VALUE,0);
                            UT_TRACE.TRACE('        Item:'||RCITEMSINORDER.ITEMS_ID
                                             ||'- Valor:'||RCITEMSINORDER.VALUE,10);
                        END IF;
                    END IF;
                END LOOP;
            END IF;
        FETCH OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID INTO NUORDER, NUTASKTYPE, NUOPERUNIT, NUORDERVALUE, NUCHARGESTATUS;
        END LOOP;
        IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
        END IF;
        UT_TRACE.TRACE('FIN Or_BOOrder.fnuGetItemValForCompId, nuTotalValue :'
                                                              ||NUTOTALVALUE,7);
        RETURN (NUTOTALVALUE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETITEMVALFORCOMPID;

    
    
    FUNCTION FNUGETITEMVALFORMOTID
    (
        INUFATHEREXTSYSTEID IN OR_EXTERN_SYSTEMS_ID.FATHE_EXTER_SYSTE_ID%TYPE,
        ISBITEMSLIST        IN VARCHAR2,
        ISBINCLUDE          IN VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBYES
    )
    RETURN NUMBER
    IS
        
        
        
        RFORDERSMOT   CONSTANTS.TYREFCURSOR;
        RCORDER       DAOR_ORDER.STYOR_ORDER;
        NUTOTALVALUE  OR_ORDER.ORDER_VALUE%TYPE := 0;
        NUGETITEMCLASSIFID GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.fnuGetItemValForMotId, Motivo :'
                                                       ||INUFATHEREXTSYSTEID,7);
        IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
        END IF;

        
        OPEN OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID(INUFATHEREXTSYSTEID, CNUENTITYMOTIVEID);
        
        FETCH OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID INTO RCORDER;
        WHILE (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%FOUND) LOOP
            UT_TRACE.TRACE('    Orden:'||RCORDER.ORDER_ID,10);
            IF OR_BOCHARGESBYORDER.FBLGENERATECHARGEBYSTATUS (RCORDER.CHARGE_STATUS) THEN
                
                FOR RCITEMSINORDER IN OR_BCITEMS.CUITEMSINORDER(RCORDER.ORDER_ID) LOOP
                    NUGETITEMCLASSIFID := DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(RCITEMSINORDER.ITEMS_ID);
                    IF ISBINCLUDE = GE_BOCONSTANTS.CSBYES THEN
                        IF INSTR(','||ISBITEMSLIST||',',
                                         ','||RCITEMSINORDER.ITEMS_ID||',') > 0
                                         AND DAGE_ITEM_CLASSIF.FSBGETQUANTITY_CONTROL(NUGETITEMCLASSIFID)  = OR_BOCONSTANTS.CNUDECREASE
                                         THEN
                            NUTOTALVALUE := NUTOTALVALUE + NVL(RCITEMSINORDER.VALUE, 0);
                            UT_TRACE.TRACE('        Item:'||RCITEMSINORDER.ITEMS_ID
                                             ||'- Valor:'||RCITEMSINORDER.VALUE,10);
                        END IF;
                    ELSE
                        IF NOT INSTR(','||ISBITEMSLIST||',',
                                         ','||RCITEMSINORDER.ITEMS_ID||',') > 0
                                         AND DAGE_ITEM_CLASSIF.FSBGETQUANTITY_CONTROL(NUGETITEMCLASSIFID)  = OR_BOCONSTANTS.CNUDECREASE
                                         THEN
                            NUTOTALVALUE := NUTOTALVALUE + NVL(RCITEMSINORDER.VALUE,0);
                            UT_TRACE.TRACE('        Item:'||RCITEMSINORDER.ITEMS_ID
                                             ||'- Valor:'||RCITEMSINORDER.VALUE,10);
                        END IF;
                    END IF;
                END LOOP;
            END IF;
            FETCH OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID INTO RCORDER;
        END LOOP;
        IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
        END IF;
        UT_TRACE.TRACE('FIN Or_BOOrder.fnuGetItemValForMotId, nuTotalValue := '||NUTOTALVALUE,7);
        RETURN (NUTOTALVALUE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETITEMVALFORMOTID;

    
    
    FUNCTION FNUGETTASTYVALFORCOMPID
    (
        INUEXTERSYSTEID  IN OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE,
        ISBTASKTYPELIST  IN VARCHAR2,
        ISBINCLUDE       IN VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBYES
    )
    RETURN NUMBER
    IS
        
        
        
        RFORDERSCOMP  CONSTANTS.TYREFCURSOR;
        NUORDER       OR_ORDER.ORDER_ID%TYPE;
        NUTASKTYPE    OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
        NUOPERUNIT    OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        NUTOTALVALUE  OR_ORDER.ORDER_VALUE%TYPE := 0;
        NUORDERVALUE  OR_ORDER.ORDER_VALUE%TYPE;
        NUCHARGESTATUS OR_ORDER.CHARGE_STATUS%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.fnuGetTasTyValForCompId, Componente : '
                                                           ||INUEXTERSYSTEID,7);
            IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
            END IF;

        

        OPEN OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID(INUEXTERSYSTEID, CNUENTITYCOMPONENT);
        
        FETCH OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID INTO NUORDER, NUTASKTYPE, NUOPERUNIT,NUORDERVALUE, NUCHARGESTATUS;
        WHILE (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%FOUND) LOOP
            UT_TRACE.TRACE('    nuOrder:'||NUORDER,10);
            
            IF ISBINCLUDE = GE_BOCONSTANTS.CSBYES THEN
                IF INSTR(','||ISBTASKTYPELIST||',',
                                         ','||NUTASKTYPE||',') > 0 THEN
                    IF OR_BOCHARGESBYORDER.FBLGENERATECHARGEBYSTATUS (NUCHARGESTATUS) THEN
                        NUTOTALVALUE := NUTOTALVALUE +
                                        NVL(NUORDERVALUE,0);
                       UT_TRACE.TRACE('        nuTaskType:'||NUTASKTYPE
                            ||'- Valor:'||NUORDERVALUE,10);
                    END IF;
                 END IF;
            ELSE
                IF NOT INSTR(','||ISBTASKTYPELIST||',',
                                         ','||NUTASKTYPE||',') > 0 THEN
                    IF OR_BOCHARGESBYORDER.FBLGENERATECHARGEBYSTATUS (NUCHARGESTATUS) THEN
                        NUTOTALVALUE := NUTOTALVALUE +
                                        NVL(NUORDERVALUE,0);
                       UT_TRACE.TRACE('        nuTaskType:'||NUTASKTYPE
                            ||'- Valor:'||NUORDERVALUE,10);
                    END IF;
                 END IF;
            END IF;
            FETCH OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID INTO NUORDER, NUTASKTYPE, NUOPERUNIT, NUORDERVALUE, NUCHARGESTATUS;
        END LOOP;
        IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
        END IF;
        UT_TRACE.TRACE('FIN Or_BOOrder.fnuGetTasTyValForCompId, nuTotalValue :'
                                                              ||NUTOTALVALUE,7);
        RETURN (NUTOTALVALUE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERBYEXTERNSYSTEMSID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETTASTYVALFORCOMPID;

    
    
    FUNCTION FNUGETTASTYVALFORMOTID
    (
        INUFATHEREXTSYSTEID IN OR_EXTERN_SYSTEMS_ID.FATHE_EXTER_SYSTE_ID%TYPE,
        ISBTASKTYPELIST     IN VARCHAR2,
        ISBINCLUDE          IN VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBYES
    )
    RETURN NUMBER
    IS
        
        
        
        RFORDERSMOT   CONSTANTS.TYREFCURSOR;
        RCORDER       DAOR_ORDER.STYOR_ORDER;
        NUTOTALVALUE  OR_ORDER.ORDER_VALUE%TYPE := 0;
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.fnuGetTasTyValForMotId, Motivo :'||INUFATHEREXTSYSTEID,7);
        
        IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
        END IF;

        
        
        OPEN OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID(INUFATHEREXTSYSTEID, CNUENTITYMOTIVEID);
        
        FETCH OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID INTO RCORDER;
        WHILE (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%FOUND) LOOP
            UT_TRACE.TRACE('    Orden:'||RCORDER.ORDER_ID,10);
            
            IF ISBINCLUDE = GE_BOCONSTANTS.CSBYES THEN
                IF INSTR(','||ISBTASKTYPELIST||',',
                                         ','||RCORDER.TASK_TYPE_ID||',') > 0 THEN
                    IF OR_BOCHARGESBYORDER.FBLGENERATECHARGEBYSTATUS (RCORDER.CHARGE_STATUS) THEN
                        NUTOTALVALUE := NUTOTALVALUE +
                                        NVL(RCORDER.ORDER_VALUE,0);
                       UT_TRACE.TRACE('        nuTaskType:'||RCORDER.TASK_TYPE_ID
                            ||'- Valor:'||RCORDER.ORDER_VALUE,10);
                    END IF;
                 END IF;
            ELSE
                IF NOT INSTR(','||ISBTASKTYPELIST||',',
                                         ','||RCORDER.TASK_TYPE_ID||',') > 0 THEN
                    IF OR_BOCHARGESBYORDER.FBLGENERATECHARGEBYSTATUS (RCORDER.CHARGE_STATUS) THEN
                        NUTOTALVALUE := NUTOTALVALUE +
                                        NVL(RCORDER.ORDER_VALUE,0);
                       UT_TRACE.TRACE('        nuTaskType:'||RCORDER.TASK_TYPE_ID
                            ||'- Valor:'||RCORDER.ORDER_VALUE,10);
                    END IF;
                 END IF;
            END IF;
            FETCH OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID INTO RCORDER;
        END LOOP;
        IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
            CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
        END IF;
        UT_TRACE.TRACE('FIN Or_BOOrder.fnuGetTasTyValForMotId, nuTotalValue := '||NUTOTALVALUE,7);
        RETURN (NUTOTALVALUE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID%ISOPEN) THEN
                CLOSE OR_BCORDER.CUGETORDERSBYFATHEREXTSYSTID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETTASTYVALFORMOTID;

    

    FUNCTION FBLEXIORDOPERWISTATUS
    (
        INUOPERATINUNITID   IN OR_ORDER.OPERATING_UNIT_ID%TYPE,
        INUORDERSTATUSID    IN OR_ORDER.ORDER_STATUS_ID%TYPE
    )
    RETURN BOOLEAN
    IS
    RFORDER CONSTANTS.TYREFCURSOR;
    RWORDERROWID  ROWID;
    BEGIN
        RFORDER := OR_BCORDER.FRFFIRSTORDER(INUOPERATINUNITID, INUORDERSTATUSID);
        FETCH RFORDER INTO RWORDERROWID;
        CLOSE RFORDER;
        RETURN  (RWORDERROWID IS NOT NULL);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (RFORDER%ISOPEN) THEN
                CLOSE RFORDER;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (RFORDER%ISOPEN) THEN
                CLOSE RFORDER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXIORDOPERWISTATUS;
    
    FUNCTION FBLEXISTSRELATEDORDER
    (
        INUORDERID      IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
    CURSOR CUHASRELATEDORDER
    (
        INUORDERID  IN OR_ORDER.ORDER_ID%TYPE
    )
    IS
    SELECT 'x'
    FROM OR_RELATED_ORDER
    WHERE ORDER_ID=INUORDERID
      AND ROWNUM <= 1;
    SBDUMMY VARCHAR2(1);
    BEGIN
        OPEN  CUHASRELATEDORDER(INUORDERID);
        FETCH CUHASRELATEDORDER INTO SBDUMMY;
        CLOSE CUHASRELATEDORDER;
        RETURN SBDUMMY IS NOT NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUHASRELATEDORDER%ISOPEN) THEN
                CLOSE CUHASRELATEDORDER;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CUHASRELATEDORDER%ISOPEN) THEN
                CLOSE CUHASRELATEDORDER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTSRELATEDORDER;
    FUNCTION FBLEXISTSADITIONALDATA
    (
        INUORDERID      IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
    CURSOR CUHASADITIONALDATA
    (
        INUORDERID  IN OR_ORDER.ORDER_ID%TYPE
    )
    IS
    SELECT 'x'
    FROM OR_REQU_DATA_VALUE
    WHERE ORDER_ID=INUORDERID
      AND ROWNUM <= 1;
    SBDUMMY VARCHAR2(1);
    BEGIN
        OPEN  CUHASADITIONALDATA(INUORDERID);
        FETCH CUHASADITIONALDATA INTO SBDUMMY;
        CLOSE CUHASADITIONALDATA;
        RETURN SBDUMMY IS NOT NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUHASADITIONALDATA%ISOPEN) THEN
                CLOSE CUHASADITIONALDATA;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CUHASADITIONALDATA%ISOPEN) THEN
                CLOSE CUHASADITIONALDATA;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTSADITIONALDATA;



    FUNCTION FBLEXISTSCOMMENT
    (
        INUORDERID      IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
        IS
        CURSOR CUHASCOMMENT
        (
            INUORDERID  IN OR_ORDER.ORDER_ID%TYPE
        )
        IS
        SELECT 'x'
        FROM OR_ORDER_COMMENT
        WHERE ORDER_ID=INUORDERID
          AND ROWNUM <= 1;
        SBDUMMY VARCHAR2(1);
    BEGIN
        OPEN  CUHASCOMMENT(INUORDERID);
        FETCH CUHASCOMMENT INTO SBDUMMY;
        CLOSE CUHASCOMMENT;
        RETURN SBDUMMY IS NOT NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUHASCOMMENT%ISOPEN) THEN
                CLOSE CUHASCOMMENT;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CUHASCOMMENT%ISOPEN) THEN
                CLOSE CUHASCOMMENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTSCOMMENT;

    
    
    
    PROCEDURE SETORDEREXECDATE (
                               INUORDERID    IN  OR_ORDER.ORDER_ID%TYPE,
                               IDTEXECDATE   IN  OR_ORDER.ARRANGED_HOUR%TYPE
                               )
    IS
    BEGIN
        DAOR_ORDER.UPDARRANGED_HOUR(INUORDERID, IDTEXECDATE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    
    PROCEDURE UPDPRINTINGTIME (
                                INUORDERID    IN  OR_ORDER.ORDER_ID%TYPE
                              )
    IS
    BEGIN
        DAOR_ORDER.UPDPRINTING_TIME_NUMBER(INUORDERID, NVL(DAOR_ORDER.FNUGETPRINTING_TIME_NUMBER(INUORDERID),0) + 1 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE UPDATEPRINTTIMENUMBER
    (
        ISBORDERTOPRINT IN  VARCHAR2
    )
    IS
        ERRORCODE CONSTANT  GE_MESSAGE.MESSAGE_ID%TYPE := 0;
        TBORDERSIDS         UT_STRING.TYTB_STRING;
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        NUINDEX             BINARY_INTEGER;
    BEGIN

        UT_TRACE.TRACE('or_boorder.fnuUpdatePrintTimeNumber INICIO',3);

        UT_STRING.EXTSTRING(ISBORDERTOPRINT, ',', TBORDERSIDS);
        NUINDEX := TBORDERSIDS.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            UPDPRINTINGTIME(TBORDERSIDS(NUINDEX));
            NUINDEX := TBORDERSIDS.NEXT(NUINDEX);
        END LOOP;

        UT_TRACE.TRACE('or_boorder.fnuUpdatePrintTimeNumber FIN',3);

	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END UPDATEPRINTTIMENUMBER;
	
	FUNCTION FNUGETORDERIDBYNUMSEQ
    (
        INUNUMERATOR    IN  OR_ORDER.NUMERATOR_ID%TYPE,
        INUSEQUENCE     IN  OR_ORDER.SEQUENCE%TYPE
    ) RETURN NUMBER
    IS
        
        NUORDERID  NUMBER;
    BEGIN

        UT_TRACE.TRACE('or_boorder.fnuGetOrderIdByNumSeq INICIO',3);

        NUORDERID := OR_BCORDER.FNUGETORDERIDBYNUMSEQ(INUNUMERATOR, INUSEQUENCE);

        UT_TRACE.TRACE('or_boorder.fnuGetOrderIdByNumSeq FIN',3);
        RETURN  NUORDERID;
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;
 	
















    PROCEDURE LOADSUBSDATABYORDER
	(
		INUORDERID         IN  OR_ORDER.ORDER_ID%TYPE,
		ORCSUBSDATABYORDER OUT TYRCSUBSDATABYORDER
	)
	IS
        NUSUBSCRIBERID  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUADDRESSID     AB_ADDRESS.ADDRESS_ID%TYPE;
	BEGIN

	    
        OR_BCORDERACTIVITIES.GETSUBSDATABYORDER(
            INUORDERID,
            NUSUBSCRIBERID,
            NUADDRESSID);

        
        ORCSUBSDATABYORDER.ORDERID := INUORDERID;
        ORCSUBSDATABYORDER.SUBSCRIBERID := NUSUBSCRIBERID;
        ORCSUBSDATABYORDER.ADDRESSID := NUADDRESSID;

        
        GTBSUBSDATABYORDER(INUORDERID) := ORCSUBSDATABYORDER;

        

	END LOADSUBSDATABYORDER;

    

















    FUNCTION FBLISSUSDATBYORDCACHED
	(
		INUORDER_ID        IN  OR_ORDER.ORDER_ID%TYPE,
        ORCSUBSDATABYORDER OUT TYRCSUBSDATABYORDER
	)
	RETURN BOOLEAN
	IS
	BEGIN
        
        IF (GTBSUBSDATABYORDER.COUNT > 0 ) THEN
           
           IF (GTBSUBSDATABYORDER.EXISTS(INUORDER_ID)) THEN
               
               ORCSUBSDATABYORDER := GTBSUBSDATABYORDER(INUORDER_ID);
               
               
               RETURN TRUE;
           END IF;
        END IF;

        
        RETURN FALSE;

	END FBLISSUSDATBYORDCACHED;
    
    
    FUNCTION FNUGETADDRESSBYORDER
    (
        INUORDERID OR_ORDER.ORDER_ID%TYPE
    )RETURN NUMBER
    IS
        RCSUBSDATABYORDER TYRCSUBSDATABYORDER;
    BEGIN
       

        
        IF (INUORDERID IS NULL)THEN
            RETURN NULL;
        END IF;

        
		IF NOT FBLISSUSDATBYORDCACHED(INUORDERID, RCSUBSDATABYORDER) THEN
            
            LOADSUBSDATABYORDER(INUORDERID, RCSUBSDATABYORDER);
        END IF;

        
        
        RETURN RCSUBSDATABYORDER.ADDRESSID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETADDRESSBYORDER;
    
    
    FUNCTION FNUGETSUBSCRIBERBYORDER
    (
        INUORDERID OR_ORDER.ORDER_ID%TYPE
    )RETURN NUMBER
    IS
        RCSUBSDATABYORDER TYRCSUBSDATABYORDER;
    BEGIN
       

        
        IF (INUORDERID IS NULL)THEN
            RETURN NULL;
        END IF;

        
		IF NOT FBLISSUSDATBYORDCACHED(INUORDERID, RCSUBSDATABYORDER) THEN
            
            LOADSUBSDATABYORDER(INUORDERID, RCSUBSDATABYORDER);
        END IF;

        
        
        RETURN RCSUBSDATABYORDER.SUBSCRIBERID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETSUBSCRIBERBYORDER;

    






















    PROCEDURE GETORDERSASSIGNINFO
    (
        ISBADMINBASEIDS     IN  VARCHAR2,
        ISBZONES            IN  VARCHAR2,
        IDTASSIGNDATE       IN  OR_SCHED_AVAILABLE.DATE_%TYPE,
        OTBOPERUNITS        OUT OR_BCOPERATINGUNIT.TYTBOPERUNIT,
        OTBORDERS           OUT OR_BCORDER.TYTBORDER
    )
    IS
        TBSCHEDSID          OR_TYTBSCHEDAVAILABLEID;
        
        CNUERRBASES         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 13737;
        CNUERRDATE          CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 4069;
        
        RCOPERUNITINFO      OR_BCOPERATINGUNIT.TYRCOPERUNITBASIC;
        
        PROCEDURE GETOPERUNITBASICINFO
        (
            ITBSCHEDSID         IN  OR_TYTBSCHEDAVAILABLEID,
            OTBOPERUNITS        OUT OR_BCOPERATINGUNIT.TYTBOPERUNIT
        )
        IS
            RFOPERUNITINFO  CONSTANTS.TYREFCURSOR;

            SBVALUE         VARCHAR2(32000);
            NUIDX           NUMBER;
            NUTMPSCHEDID    OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE;

            NUPOINTX        AB_ADDRESS.SHAPE.SDO_POINT.X%TYPE;
            NUPOINTY        AB_ADDRESS.SHAPE.SDO_POINT.Y%TYPE;
            
            TBTASKTYPES     DAOR_TASK_TYPE.TYTBTASK_TYPE_ID;
            TBROLES         DAOR_ROL_UNIDAD_TRAB.TYTBID_ROL;
            TBACTIVITIES    DAGE_ITEMS.TYTBITEMS_ID;
            TBSCHEDSBYUNIT  DAOR_SCHED_AVAILABLE.TYTBSCHED_AVAILABLE_ID;
            TBSCHEDULERS    DAOR_SCHEDULER.TYTBSCHEDULER_ID;

        BEGIN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFOPERUNITINFO);

            RFOPERUNITINFO := OR_BCOPERATINGUNIT.FRFGETOPERUNITINFO ( ITBSCHEDSID );
            
            LOOP
                FETCH RFOPERUNITINFO INTO RCOPERUNITINFO;
            EXIT WHEN RFOPERUNITINFO%NOTFOUND;
                
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).OPERATINGUNITID := RCOPERUNITINFO.OPERATINGUNITID;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).NAME := RCOPERUNITINFO.NAME;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).ASSIGNTYPE := RCOPERUNITINFO.ASSIGNTYPE;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).OPERUNITCLASSIFID := RCOPERUNITINFO.OPERUNITCLASSIFID;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).ADMINBASEID := RCOPERUNITINFO.ADMINBASEID;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).OPERUNITCLASSIF := RCOPERUNITINFO.OPERUNITCLASSIF;

                
                OR_BCOPERATINGUNIT.GETGEOREFERENCE(RCOPERUNITINFO.OPERATINGUNITID, NUPOINTX, NUPOINTY);
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).GEOREFERENCE := UT_STRING.FSBCONCAT(NUPOINTX, NUPOINTY, '|');

                
                OR_BCOPE_UNI_TASK_TYPE.GETTASKTYPESBYUNIT(RCOPERUNITINFO.OPERATINGUNITID, TBTASKTYPES);
                SBVALUE := NULL;
                NUIDX := TBTASKTYPES.FIRST;
                WHILE NUIDX IS NOT NULL LOOP
                    IF (NUIDX = TBTASKTYPES.FIRST) THEN
                        SBVALUE := TBTASKTYPES(NUIDX);
                    ELSE
                        SBVALUE := UT_STRING.FSBCONCAT(SBVALUE, TBTASKTYPES(NUIDX), '|');
                    END IF;
                    NUIDX := TBTASKTYPES.NEXT(NUIDX);
                END LOOP;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).TASKTYPES := SBVALUE;

                
                OR_BCROLUNIDADTRAB.GETROLESBYUNIT(RCOPERUNITINFO.OPERATINGUNITID, TBROLES);
                SBVALUE := NULL;
                NUIDX := TBROLES.FIRST;
                WHILE NUIDX IS NOT NULL LOOP
                    IF (NUIDX = TBROLES.FIRST) THEN
                        SBVALUE := TBROLES(NUIDX);
                    ELSE
                        SBVALUE := UT_STRING.FSBCONCAT(SBVALUE, TBROLES(NUIDX), '|');
                    END IF;
                    NUIDX := TBROLES.NEXT(NUIDX);
                END LOOP;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).ROLS := SBVALUE;

                
                OR_BCACTIVIDAD_UNITRAB.GETACTIVITIESBYUNIT(RCOPERUNITINFO.OPERATINGUNITID, TBACTIVITIES);
                SBVALUE := NULL;
                NUIDX := TBACTIVITIES.FIRST;
                WHILE NUIDX IS NOT NULL LOOP
                    IF (NUIDX = TBACTIVITIES.FIRST) THEN
                        SBVALUE := TBACTIVITIES(NUIDX);
                    ELSE
                        SBVALUE := UT_STRING.FSBCONCAT(SBVALUE, TBACTIVITIES(NUIDX), '|');
                    END IF;
                    NUIDX := TBACTIVITIES.NEXT(NUIDX);
                END LOOP;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).ACTIVITIES := SBVALUE;

                
                OR_BCSCHED.GETSCHEDULERSBYUNIT(ITBSCHEDSID, RCOPERUNITINFO.OPERATINGUNITID, TBSCHEDSBYUNIT, TBSCHEDULERS);
                SBVALUE := NULL;
                NUIDX := TBSCHEDULERS.FIRST;
                WHILE NUIDX IS NOT NULL LOOP
                    IF (NUIDX = TBSCHEDULERS.FIRST) THEN
                        SBVALUE := TBSCHEDULERS(NUIDX);
                        NUTMPSCHEDID := TBSCHEDULERS(NUIDX);
                    ELSIF (NUTMPSCHEDID != TBSCHEDULERS(NUIDX)) THEN
                        SBVALUE := UT_STRING.FSBCONCAT(SBVALUE, TBSCHEDULERS(NUIDX), '|');
                        NUTMPSCHEDID := TBSCHEDULERS(NUIDX);
                    END IF;
                    NUIDX := TBSCHEDULERS.NEXT(NUIDX);
                END LOOP;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).SCHEDULERS := SBVALUE;

                
                SBVALUE := NULL;
                NUIDX := TBSCHEDSBYUNIT.FIRST;
                WHILE NUIDX IS NOT NULL LOOP
                    IF (NUIDX = TBSCHEDSBYUNIT.FIRST) THEN
                        SBVALUE := TBSCHEDSBYUNIT(NUIDX);
                    ELSE
                        SBVALUE := UT_STRING.FSBCONCAT(SBVALUE, TBSCHEDSBYUNIT(NUIDX), '|');
                    END IF;
                    NUIDX := TBSCHEDSBYUNIT.NEXT(NUIDX);
                END LOOP;
                OTBOPERUNITS(RCOPERUNITINFO.OPERATINGUNITID).AVAILABILITIES := SBVALUE;
            END LOOP;

            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFOPERUNITINFO);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFOPERUNITINFO);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFOPERUNITINFO);
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END GETOPERUNITBASICINFO;
        
    BEGIN
        IF (ISBADMINBASEIDS IS NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERRBASES);
        END IF;
        
        IF (IDTASSIGNDATE IS NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERRDATE);
        END IF;
        
        
        TBSCHEDSID  :=  OR_BCSCHED.FTBGETSCHEDBYDATE
                        (
                            ISBADMINBASEIDS,
                            ISBZONES,
                            IDTASSIGNDATE
                        );
        IF (TBSCHEDSID.COUNT > 0) THEN
            
            GETOPERUNITBASICINFO(TBSCHEDSID, OTBOPERUNITS);

            
            OTBORDERS := OR_BCORDER.FTBGETORDERSINFO ( TBSCHEDSID );
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERSASSIGNINFO;

    


















    FUNCTION FBLVALORDEREXECUTING
    (
        INUORDERID  OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
    BEGIN

        IF (DAOR_ORDER.FBLEXIST(INUORDERID)
            AND DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDERID) = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING) THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLVALORDEREXECUTING;
    
    














    FUNCTION FSBPROJECTORDER
    (
        INUORDERID      IN      OR_ORDER.ORDER_ID%TYPE
    ) RETURN VARCHAR2
    IS
        SBISPROJECTORDER    VARCHAR2(1) := GE_BOCONSTANTS.CSBNO;
    BEGIN

        IF (DAOR_ORDER.FNUGETSTAGE_ID(INUORDERID) IS NOT NULL) THEN
            SBISPROJECTORDER := GE_BOCONSTANTS.CSBYES;
        END IF;

        RETURN SBISPROJECTORDER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE VALPROJECTORDER
    (
        INUORDERID      IN      OR_ORDER.ORDER_ID%TYPE
    )
    IS
    BEGIN
        IF (FSBPROJECTORDER(INUORDERID) = GE_BOCONSTANTS.CSBYES) THEN
            ERRORS.SETERROR(CNUERR_PROJ_ORDER);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    

















    FUNCTION FNUGETRURALADDRESS
    (
        INUORDERID  IN OR_ORDER.ORDER_ID%TYPE
    )
    RETURN OR_ORDER.EXTERNAL_ADDRESS_ID%TYPE
    IS
       NUADDRESSID     OR_ORDER.EXTERNAL_ADDRESS_ID%TYPE;
       NUSUBSCRIBERID GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.fnuGetRuralAddress',2);

        NUADDRESSID := DAOR_ORDER.FNUGETEXTERNAL_ADDRESS_ID(INUORDERID,0);

        IF NUADDRESSID IS NULL THEN
            OR_BCORDERACTIVITIES.GETSUBSDATABYORDER(INUORDERID,NUSUBSCRIBERID,NUADDRESSID);
            IF NUADDRESSID IS NULL THEN
                GE_BOERRORS.SETERRORCODE(CNUERR900379);
            END IF;
        END IF;

        IF NVL(DAAB_ADDRESS.FSBGETIS_URBAN(NUADDRESSID,0),GE_BOCONSTANTS.CSBYES) = GE_BOCONSTANTS.CSBYES THEN
            GE_BOERRORS.SETERRORCODE(CNUERR900377);
        END IF;

        UT_TRACE.TRACE('FIN Or_BOOrder.fnuGetRuralAddress => '||NUADDRESSID,2);
        RETURN (NUADDRESSID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR Or_BOOrder.fnuGetRuralAddress',2);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS Or_BOOrder.fnuGetRuralAddress',2);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETRURALADDRESS;

    

















    FUNCTION FNUGETORDBYPACKACT
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUACTIVITYID   IN  OR_ACTIVIDAD.ID_ACTIVIDAD%TYPE,
        ISBFINALSTATUS  IN  OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE
    )
    RETURN OR_ORDER.ORDER_ID%TYPE
    IS
        NUORDERID   OR_ORDER.ORDER_ID%TYPE;
    BEGIN
        NUORDERID := OR_BCORDER.FNUGETORDBYPACKACT(
                                                    INUPACKAGEID,
                                                    INUACTIVITYID,
                                                    ISBFINALSTATUS
                                                  );

        RETURN NUORDERID;
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END FNUGETORDBYPACKACT;

    













    FUNCTION FNUGETORDERCAUSAL
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE
    )
    RETURN GE_CAUSAL.CAUSAL_ID%TYPE
    IS
        NUCAUSALID   GE_CAUSAL.CAUSAL_ID%TYPE;
    BEGIN
        NUCAUSALID := DAOR_ORDER.FNUGETCAUSAL_ID(INUORDERID);

        RETURN NUCAUSALID;
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END FNUGETORDERCAUSAL;

    






    PROCEDURE GETORDERBASICDATA
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        ORFORDERDATA    OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        UT_TRACE.TRACE('INICIO - Or_BOOrder.GetOrderBasicData - inuOrderId['||INUORDERID||']',15);

        OR_BCORDER.GETORDERBASICDATA
        (
            INUORDERID,
            ORFORDERDATA
        );
        
        UT_TRACE.TRACE('FIN - Or_BOOrder.GetOrderBasicData',15);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    






































    PROCEDURE UPDATEORDER
    (
        INUORDERID          IN OR_ORDER.ORDER_ID%TYPE,
        INUACTIVITY         IN OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUCAUSAL           IN OR_ORDER.CAUSAL_ID%TYPE,
        INUITEMAMOUNT       IN OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE,
        INUOPERUNITID       IN OR_ORDER.OPERATING_UNIT_ID%TYPE,
        IDTLEGALIZEDATE     IN OR_ORDER.LEGALIZATION_DATE%TYPE,
        INUPERSONID         IN OR_ORDER_PERSON.PERSON_ID%TYPE,
        INUADDRESSID        IN OR_ORDER_ACTIVITY.ADDRESS_ID%TYPE,
        INUCOMMENTTYPEID    IN GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE
    )
    IS
        
        RCORDER         DAOR_ORDER.STYOR_ORDER;

        
        RCORDERPERSON   DAOR_ORDER_PERSON.STYOR_ORDER_PERSON;

    BEGIN

        UT_TRACE.TRACE('INICIO Or_BOOrder.UpdateOrder', 2 );

        
        RCORDER:= DAOR_ORDER.FRCGETRECORD(INUORDERID);

        
        OR_BCORDERACTIVITIES.UPDACTOFORDERTOCLOSE(INUORDERID, OR_BOCONSTANTS.CSBFINISHSTATUS ,IDTLEGALIZEDATE);
        
        
        RCORDER.ORDER_STATUS_ID         := OR_BOCONSTANTS.CNUORDER_STAT_CLOSED;
        RCORDER.CAUSAL_ID               := INUCAUSAL;
        RCORDER.OPERATING_UNIT_ID       := INUOPERUNITID;
        RCORDER.EXTERNAL_ADDRESS_ID     := INUADDRESSID;
        RCORDER.IS_PENDING_LIQ          := GE_BOCONSTANTS.CSBYES;
        RCORDER.LEGALIZATION_DATE       := IDTLEGALIZEDATE;
        RCORDER.ASSIGNED_DATE           := IDTLEGALIZEDATE;
        RCORDER.EXEC_INITIAL_DATE       := IDTLEGALIZEDATE;
        RCORDER.EXECUTION_FINAL_DATE    := IDTLEGALIZEDATE;
        RCORDER.EXEC_ESTIMATE_DATE      := IDTLEGALIZEDATE;
        RCORDER.LEGALIZE_TRY_TIMES      := NVL(RCORDER.LEGALIZE_TRY_TIMES, 0) + 1;
        
        
        DAOR_ORDER.UPDRECORD(RCORDER);

        
        RCORDERPERSON.ORDER_ID := INUORDERID;
        RCORDERPERSON.OPERATING_UNIT_ID := INUOPERUNITID;
        RCORDERPERSON.PERSON_ID := INUPERSONID;

        IF (DAOR_ORDER_PERSON.FBLEXIST(RCORDERPERSON.OPERATING_UNIT_ID, RCORDERPERSON.ORDER_ID) = FALSE) THEN
            
            DAOR_ORDER_PERSON.INSRECORD(RCORDERPERSON);
        END IF;
        
        
        OR_BCORDERSTATCHANG.INSRECORD
            (
                RCORDER.ORDER_ID,
                OR_BOCONSTANTS.CNUORDER_ACTION_ASSIGN,
                OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED,
                OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                IDTLEGALIZEDATE, 
                NULL, 
                NULL, 
                NULL, 
                INUOPERUNITID, 
                INUCOMMENTTYPEID, 
                NULL, 
                IDTLEGALIZEDATE 
            );

        
        OR_BCORDERSTATCHANG.INSRECORD
            (
                RCORDER.ORDER_ID,
                OR_BOCONSTANTS.CNUORDER_ACTION_CLOSE,
                OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                OR_BOCONSTANTS.CNUORDER_STAT_CLOSED,
                NULL, 
                NULL, 
                NULL, 
                INUOPERUNITID, 
                INUOPERUNITID, 
                INUCOMMENTTYPEID, 
                INUCAUSAL, 
                IDTLEGALIZEDATE 
            );
            
         
        DAOR_ORDER_ITEMS.UPDLEGAL_ITEM_AMOUNT
            (
                DAOR_ORDER_ACTIVITY.FNUGETORDER_ITEM_ID(INUACTIVITY),
                INUITEMAMOUNT
            );

        UT_TRACE.TRACE('FIN Or_BOOrder.UpdateOrder', 2 );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEORDER;
    
    























    PROCEDURE FINDORDERS
    (
        INUCONTRACTORID     IN      GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUOPERUNITID       IN      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUCONTRACTID       IN      GE_CONTRATO.ID_CONTRATO%TYPE,
        INUSUBSCRIBERID     IN      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUTASKTYPEID       IN      OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUORDERSTATUSID    IN      OR_ORDER_STATUS.ORDER_STATUS_ID%TYPE,
        IDTINITREGDATE      IN      DATE,
        IDTENDREGDATE       IN      DATE,
        IDTINITEXECDATE     IN      DATE,
        IDTENDEXECDATE      IN      DATE,
        IBOINCLUDENOVELTY   IN      BOOLEAN,
        ORFORDERDATA        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        UT_TRACE.TRACE('BEGIN OR_BOOrder.FindOrders', 1);

        UT_TRACE.TRACE('Param: inuContractorId -> ' || INUCONTRACTORID , 2);
        UT_TRACE.TRACE('Param: inuOperUnitId -> ' || INUOPERUNITID, 2);
        UT_TRACE.TRACE('Param: inuContractId -> ' || INUCONTRACTID, 2);
        UT_TRACE.TRACE('Param: inuSubscriberId -> ' || INUSUBSCRIBERID, 2);
        UT_TRACE.TRACE('Param: inuTaskTypeId -> ' || INUTASKTYPEID, 2);
        UT_TRACE.TRACE('Param: inuOrderStatusId -> ' || INUORDERSTATUSID, 2);
        UT_TRACE.TRACE('Param: idtInitRegDate -> ' || TO_CHAR(IDTINITREGDATE, UT_DATE.FSBDATE_FORMAT), 2);
        UT_TRACE.TRACE('Param: idtEndRegDate -> ' || TO_CHAR(IDTENDREGDATE, UT_DATE.FSBDATE_FORMAT), 2);
        UT_TRACE.TRACE('Param: idtInitExecDate -> ' || TO_CHAR(IDTINITEXECDATE, UT_DATE.FSBDATE_FORMAT), 2);
        UT_TRACE.TRACE('Param: idtEndExecDate -> ' || TO_CHAR(IDTENDEXECDATE, UT_DATE.FSBDATE_FORMAT), 2);
        IF (IBOINCLUDENOVELTY) THEN
            UT_TRACE.TRACE('Param: iboIncludeNovelty -> TRUE', 2);
        ELSE
            UT_TRACE.TRACE('Param: iboIncludeNovelty -> FALSE', 2);
        END IF;

        OR_BCORDER.FINDORDERS
        (
            INUCONTRACTORID     =>  INUCONTRACTORID,
            INUOPERUNITID       =>  INUOPERUNITID,
            INUCONTRACTID       =>  INUCONTRACTID,
            INUSUBSCRIBERID     =>  INUSUBSCRIBERID,
            INUTASKTYPEID       =>  INUTASKTYPEID,
            INUORDERSTATUSID    =>  INUORDERSTATUSID,
            IDTINITREGDATE      =>  IDTINITREGDATE,
            IDTENDREGDATE       =>  IDTENDREGDATE,
            IDTINITEXECDATE     =>  IDTINITEXECDATE,
            IDTENDEXECDATE      =>  IDTENDEXECDATE,
            IBOINCLUDENOVELTY   =>  IBOINCLUDENOVELTY,
            ORFORDERDATA        =>  ORFORDERDATA
        );

        UT_TRACE.TRACE('END OR_BOOrder.FindOrders', 1);

    END FINDORDERS;
    
    































    PROCEDURE VALIDCLOSEORDERDATA
    (
        INUOPERUNITID       IN  OR_ORDER.OPERATING_UNIT_ID%TYPE,
        INUACTIVITY         IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUADDRESSID        IN  OR_ORDER_ACTIVITY.ADDRESS_ID%TYPE,
        IDTFINISHDATE       IN  OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
        INUITEMAMOUNT       IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE DEFAULT 1,
        INUREFVALUE         IN  OR_ORDER_ACTIVITY.VALUE_REFERENCE%TYPE DEFAULT NULL,
        INUCAUSAL           IN  GE_CAUSAL.CAUSAL_ID%TYPE DEFAULT 1,
        INURELATIONTYPE     IN  GE_TRANSITION_TYPE.TRANSITION_TYPE_ID%TYPE DEFAULT NULL,
        IONUORDERID         IN OUT OR_ORDER.ORDER_ID%TYPE,
        INUORDERRELAID      IN  OR_ORDER.ORDER_ID%TYPE DEFAULT NULL,
        INUCOMMENTTYPEID    IN  GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        INUPERSONID         IN  OR_ORDER_PERSON.PERSON_ID%TYPE
    )
    IS
    BEGIN  

        UT_TRACE.TRACE('INICIO Or_BOOrder.ValidCloseOrderData', 2 );
        
        
        DAOR_OPERATING_UNIT.ACCKEY(INUOPERUNITID);
        
        
        DAGE_ITEMS.ACCKEY(INUACTIVITY);
        
        IF (DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(INUACTIVITY) != OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR901275, INUACTIVITY);
        END IF;
        
        
        DAAB_ADDRESS.ACCKEY(INUADDRESSID);
        
        IF (IDTFINISHDATE IS NULL OR IDTFINISHDATE > UT_DATE.FDTSYSDATE ) THEN
            GE_BOERRORS.SETERRORCODE(CNUERR_811);
        END IF;
        
        
        IF (UT_CONVERT.FSBIS_NUMBER(INUITEMAMOUNT) = GE_BOCONSTANTS.CSBNO) THEN
            GE_BOERRORS.SETERRORCODE(CNUERR9132);
        END IF;
        
        
        OR_BOORDERACTIVITIES.VALIDAMOUNTTOLEGALIZE(INUACTIVITY, INUITEMAMOUNT, INUCAUSAL);
        
        
        IF (INUREFVALUE IS NOT NULL) THEN
            IF (UT_CONVERT.FSBIS_NUMBER(INUREFVALUE) = GE_BOCONSTANTS.CSBNO) THEN
                GE_BOERRORS.SETERRORCODE(CNUERR9132);
            END IF;
        END IF;
        
        
        
        IF (INUORDERRELAID IS NOT NULL) THEN
            DAOR_ORDER.ACCKEY(INUORDERRELAID);
            IF (OR_BOORDER.FSBVALSTATE(INUORDERRELAID, OR_BOCONSTANTS.CNUORDER_STAT_CLOSED) = GE_BOCONSTANTS.CSBNO) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR122062,DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDERRELAID)||INUORDERRELAID);
            END IF;
        END IF;

        
        
        IF (IONUORDERID IS NOT NULL) THEN
            DAOR_ORDER.ACCKEY(IONUORDERID);
            IF (OR_BOORDER.FSBVALSTATE(IONUORDERID, OR_BOCONSTANTS.CNUORDER_STAT_CLOSED) = GE_BOCONSTANTS.CSBNO) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR122062,DAOR_ORDER.FNUGETORDER_STATUS_ID(IONUORDERID)||IONUORDERID);
            END IF;
        END IF;

        
        DAGE_PERSON.ACCKEY(INUPERSONID);
        
        
        
        IF (ISBCOMMENT IS NOT NULL) THEN
            DAGE_COMMENT_TYPE.ACCKEY(INUCOMMENTTYPEID);
            IF (GE_BCCOMMENTTYPE.FSBISVALIDTYPE(INUCOMMENTTYPEID) = GE_BOCONSTANTS.CSBNO) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_901262, INUCOMMENTTYPEID);
            END IF;
        END IF;
        
        
        IF (INURELATIONTYPE IS NOT NULL) THEN
            DAGE_TRANSITION_TYPE.ACCKEY(INURELATIONTYPE);
        END IF;

        UT_TRACE.TRACE('FIN Or_BOOrder.ValidCloseOrderData', 2 );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDCLOSEORDERDATA;
    
    


















    FUNCTION FSBVALSTATE
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        INUORDERSTATUS  IN  OR_ORDER_STATUS.ORDER_STATUS_ID%TYPE
    )   RETURN VARCHAR2
    IS
    BEGIN
        UT_TRACE.TRACE('INICIA Or_BOOrder.fsbvalState', 2 );
        
        DAOR_ORDER.ACCKEY(INUORDERID);
        
        
        DAOR_ORDER_STATUS.ACCKEY(INUORDERSTATUS);
        
        
        
        IF (DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDERID) = INUORDERSTATUS) THEN
            UT_TRACE.TRACE('El estado de la orden '||INUORDERID||' es valido', 2 );
            RETURN GE_BOCONSTANTS.CSBYES;
        ELSE
            UT_TRACE.TRACE('El estado de la orden '||INUORDERID||' no es valido', 2 );
            RETURN GE_BOCONSTANTS.CSBNO;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBVALSTATE;
    
    






































    PROCEDURE CREATECLOSEORDER
    (
        INUOPERUNITID       IN  OR_ORDER.OPERATING_UNIT_ID%TYPE,
        INUACTIVITY         IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUADDRESSID        IN  OR_ORDER_ACTIVITY.ADDRESS_ID%TYPE,
        IDTFINISHDATE       IN  OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
        INUITEMAMOUNT       IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE DEFAULT 1,
        INUREFVALUE         IN  OR_ORDER_ACTIVITY.VALUE_REFERENCE%TYPE DEFAULT NULL,
        INUCAUSAL           IN  GE_CAUSAL.CAUSAL_ID%TYPE DEFAULT 1,
        INURELATIONTYPE     IN  GE_TRANSITION_TYPE.TRANSITION_TYPE_ID%TYPE DEFAULT NULL,
        IONUORDERID         IN OUT OR_ORDER.ORDER_ID%TYPE,
        INUORDERRELAID      IN  OR_ORDER.ORDER_ID%TYPE DEFAULT NULL,
        INUCOMMENTTYPEID    IN  GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,
        INUPERSONID         IN  OR_ORDER_PERSON.PERSON_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.CreateCloseOrder', 2 );
        
        
        OR_BOORDER.CLOSEORDERWITHPRODUCT
            (
                INUACTIVITY,
                INUOPERUNITID,
                INUCAUSAL,
                INUPERSONID,
                INUADDRESSID,
                IDTFINISHDATE,
                INUITEMAMOUNT,
                INUREFVALUE,
                INUCOMMENTTYPEID,
                ISBCOMMENT,
                INUORDERRELAID,
                INURELATIONTYPE,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                IONUORDERID
            );

        UT_TRACE.TRACE('FIN Or_BOOrder.CreateCloseOrder', 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATECLOSEORDER;
    
    























    PROCEDURE VALIDDATATOCREATEORDER
    (
        INUACTIVITYID   IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUADDRESSID    IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        IDTEXECESTIDATE IN  OR_ORDER_ACTIVITY.EXEC_ESTIMATE_DATE%TYPE,
        ISBCOMMENT      IN  OR_ORDER_ACTIVITY.COMMENT_%TYPE,
        INUREFVALUE     IN  OR_ORDER_ACTIVITY.VALUE_REFERENCE%TYPE,
        IONUORDERID     IN  OR_ORDER.ORDER_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.ValidDataToCreateOrder', 2 );

        
        IF (DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(INUACTIVITYID) != OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR901275, INUACTIVITYID);
        END IF;

        
        DAAB_ADDRESS.ACCKEY(INUADDRESSID);

        
        
        IF (IDTEXECESTIDATE IS NULL OR IDTEXECESTIDATE < UT_DATE.FDTSYSDATE ) THEN
            GE_BOERRORS.SETERRORCODE(CNUERR_14642);
        END IF;

        
        
        IF (INUREFVALUE IS NOT NULL) THEN
            IF (UT_CONVERT.FSBIS_NUMBER(INUREFVALUE) = GE_BOCONSTANTS.CSBNO) THEN
                GE_BOERRORS.SETERRORCODE(CNUERR9132);
            END IF;
        END IF;

        
        
        IF (IONUORDERID IS NOT NULL) THEN
            DAOR_ORDER.ACCKEY(IONUORDERID);
        END IF;

        UT_TRACE.TRACE('FIN Or_BOOrder.ValidDataToCreateOrder', 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDDATATOCREATEORDER;

    





















    PROCEDURE VALIDDATATORELATEORDERS
    (
        INUORDERID          OR_ORDER.ORDER_ID%TYPE,
        INUORDERIDTORELATE  OR_ORDER.ORDER_ID%TYPE,
        INURELATIONTYPE     GE_TRANSITION_TYPE.TRANSITION_TYPE_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.ValidDataToRelateOrders', 2 );
        
        DAOR_ORDER.ACCKEY(INUORDERID);
        DAOR_ORDER.ACCKEY(INUORDERIDTORELATE);

        
        DAGE_TRANSITION_TYPE.ACCKEY(INURELATIONTYPE);

        
        IF (OR_BORELATEDORDER.FSBEXISTRELATION(INUORDERID, INUORDERIDTORELATE, INURELATIONTYPE) = GE_BOCONSTANTS.CSBYES) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR901274, INUORDERID ||'|'|| INUORDERIDTORELATE);
        END IF;
        UT_TRACE.TRACE('FIN Or_BOOrder.ValidDataToRelateOrders', 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDDATATORELATEORDERS;
    
    



















    PROCEDURE VALIFORDEREXIST
    (
        INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
    )
    IS
    BEGIN

        UT_TRACE.TRACE('INICIO Or_BOOrder.ValIfOrderExist', 2 );
        
        DAOR_ORDER.ACCKEY(INUORDERID);
        UT_TRACE.TRACE('FIN Or_BOOrder.ValIfOrderExist', 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIFORDEREXIST;
    
    

    
   













	PROCEDURE VALORDEREXISTENCE
    (
        INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
    )
    IS
    BEGIN
        
        DAOR_ORDER.ACCKEY(INUORDERID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALORDEREXISTENCE;
    
    















    FUNCTION FRCGETWITHDRAWALACT
    (
        ISBSERIE          IN  GE_ITEMS_SERIADO.SERIE%TYPE
    )
    RETURN DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY
    IS
    BEGIN
        RETURN OR_BCORDER.FRCGETWITHDRAWALACT(ISBSERIE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRCGETWITHDRAWALACT;
    
    
























    PROCEDURE UPDORDERCONTRACT
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        INUCONTRACTID   IN  OR_ORDER.DEFINED_CONTRACT_ID%TYPE
    )
    IS
        
        RCORDERRECORD           DAOR_ORDER.STYOR_ORDER;

        TBACTIVITYITEMS         OR_BCORDERACTIVITIES.TYTBACTIVITYITEMS;
        TBORDERITEMS            DAOR_ORDER_ITEMS.TYTBOR_ORDER_ITEMS;
        TBADITIONALDATA         OR_BOITEMS.TYTBADITIONALDATA;
        TBCONCEPTVALUE          OR_BCCONCEPTVALUE.TBCONCEPTS;
        NUOLDORDERVALUE         OR_ORDER.ORDER_VALUE%TYPE;
        NUNEWORDERVALUE         OR_ORDER.ORDER_VALUE%TYPE;
        SBDOCSOPORTE            VARCHAR2(2000);
        NUERRORCODE	            GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
    	SBERRORMESSAGE	        GE_ERROR_LOG.DESCRIPTION%TYPE;
    	NUPRODUCTID             OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE;
    	NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
    	NUPRODUCTTYPE           SERVICIO.SERVCODI%TYPE;
    	DTFECHA                 DATE;
        NUORDERCHARGECAUSE      CAUSCARG.CACACODI%TYPE;
        NUOLDCONTRACTID         OR_ORDER.DEFINED_CONTRACT_ID%TYPE;
        NUESTIMCOST             OR_ORDER.ESTIMATED_COST%TYPE;
        NUREALCOST              OR_ORDER.ESTIMATED_COST%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.updOrderContract ', 2 );

        
        DAOR_ORDER.GETRECORD(INUORDERID, RCORDERRECORD);

        
        DAGE_CONTRATO.ACCKEY(INUCONTRACTID);

        
        IF(INUCONTRACTID = DAOR_ORDER.FNUGETDEFINED_CONTRACT_ID(INUORDERID)) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR901476, INUORDERID||'|'||INUCONTRACTID);
        END IF;

        
        IF (OR_BOORDER.FSBISVALTOUPDCONTRACT(INUORDERID) = GE_BOCONSTANTS.CSBNO) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR901478, INUORDERID);
        END IF;
        
        
        NUOLDCONTRACTID := RCORDERRECORD.DEFINED_CONTRACT_ID;
        
        
        NUESTIMCOST := RCORDERRECORD.ESTIMATED_COST;

        
        DAOR_ORDER.UPDDEFINED_CONTRACT_ID(INUORDERID, INUCONTRACTID);

        
        
        OR_BOITEMS.UPDITEMSCOST
            (
                INUORDERID,
                RCORDERRECORD.OPERATING_UNIT_ID,
                RCORDERRECORD.ASSIGNED_DATE,
                TBACTIVITYITEMS, 
                GE_BOCONSTANTS.CSBNO,
                TBORDERITEMS,
                TBADITIONALDATA,
                DAGE_CONTRATO.FNUGETID_CONTRATISTA(INUCONTRACTID),
                INUCONTRACTID
            );

        
        NUOLDORDERVALUE :=  RCORDERRECORD.ORDER_VALUE;
            
        
        OR_BOORDERCOST.GETORDERCOST
            (
                RCORDERRECORD
            );

        
        NUNEWORDERVALUE := DAOR_ORDER.FNUGETORDER_VALUE(INUORDERID);
        
        
        IF RCORDERRECORD.ORDER_STATUS_ID = 8 THEN
            UT_TRACE.TRACE('inuContractId: ['||INUCONTRACTID||']',1);
            UT_TRACE.TRACE('nuOldContractId: ['||NUOLDCONTRACTID||']',1);
            UT_TRACE.TRACE('nuEstimCost: ['||NUESTIMCOST||']',1);


            CT_BOCONTRACT.VALCONTRACTOVERRUN(   INUORDERID,
                                                INUCONTRACTID,
                                                NUOLDCONTRACTID,
                                                NUESTIMCOST,
                                                8,
                                                8,
                                                RCORDERRECORD.CAUSAL_ID,
                                                NUREALCOST
                                            );

            DAOR_ORDER.UPDESTIMATED_COST(INUORDERID, NUREALCOST);
            UT_TRACE.TRACE('nuRealCost: ['||NUREALCOST||']',1);
            
        ELSIF RCORDERRECORD.ORDER_STATUS_ID = 5 OR RCORDERRECORD.ORDER_STATUS_ID = 7 THEN
            UT_TRACE.TRACE('inuContractId: ['||INUCONTRACTID||']',1);
            UT_TRACE.TRACE('nuOldContractId: ['||NUOLDCONTRACTID||']',1);
            UT_TRACE.TRACE('nuEstimCost: ['||NUESTIMCOST||']',1);

            CT_BOCONTRACT.VALCONTRACTOVERRUN(   INUORDERID,
                                                INUCONTRACTID,
                                                NUOLDCONTRACTID,
                                                NUESTIMCOST,
                                                5,
                                                5,
                                                NULL,
                                                NUREALCOST
                                            );
        END IF;

        UT_TRACE.TRACE('Valor antiguo de la orden: '||NUOLDORDERVALUE||'. Nuevo Valor de la orden: '||NUNEWORDERVALUE, 2 );
        
        
        IF (NUOLDORDERVALUE < NUNEWORDERVALUE) THEN

            
            NUPACKAGEID := OR_BOORDER.FNUGETPACKAGEID
                                (
                                    INUORDERID
                                );

            IF(NUPACKAGEID IS NOT NULL) THEN
                
                NUPRODUCTID  := MO_BOENGINEERINGSERV.FNUGETENGINSERVPRODUCT(NUPACKAGEID);
            END IF;
            
            
            IF (NUPRODUCTID IS NULL) THEN
                
                NUPRODUCTID := OR_BCORDERACTIVITIES.FNUGETPRODUCTIDBYORDER(INUORDERID);
            END IF;
                                
            
            NUPRODUCTTYPE := PKTBLSERVSUSC.FNUGETSERVICE(NUPRODUCTID);

            
            NUORDERCHARGECAUSE := FA_BOCHARGECAUSES.FNUORDERCHCAUSE(NUPRODUCTTYPE);
            
            
            SBDOCSOPORTE := OR_BOCHARGESGENERATE.CSBPREFIJODOC||OR_BOCHARGESGENERATE.CSBSEPDOCPAYMENT||NUPACKAGEID;

            
            DTFECHA      := UT_DATE.FDTSYSDATE;
        
            
            OR_BOCHARGESGENERATE.GENCHARGES
            (
                NUPRODUCTID,
                PKBILLCONST.DEBITO,
                DAOR_TASK_TYPE.FNUGETCONCEPT(RCORDERRECORD.TASK_TYPE_ID),
                NUORDERCHARGECAUSE,
                (NUNEWORDERVALUE - NUOLDORDERVALUE),
                SBDOCSOPORTE,
                DTFECHA,
                INUORDERID,
	            NUERRORCODE,
            	SBERRORMESSAGE
            );
            
            
    		IF (  NUERRORCODE <> GE_BOCONSTANTS.CNUSUCCESS ) THEN
                RCORDERRECORD.CHARGE_STATUS := OR_BOCONSTANTS.CNUCHARGE_PENDING;
                UT_TRACE.TRACE('Generacion de Cargos pendientes ',15);
                RETURN;
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN Or_BOOrder.updOrderContract ', 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDORDERCONTRACT;
    
    













    FUNCTION FNUGETORDERTASKTYPECLASS
    (
        INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
    )RETURN NUMBER
    IS
        
        NUTASKTYPE          OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
        NUTASKTYPECLASF     GE_TASK_CLASS.TASK_CLASS_ID%TYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO OR_BOORDER.fnuGetOrderTaskTypeClass',5);

        IF ( DAOR_ORDER.FBLEXIST(INUORDERID) ) THEN
            NUTASKTYPE := DAOR_ORDER.FNUGETTASK_TYPE_ID(INUORDERID);
            NUTASKTYPECLASF := DAOR_TASK_TYPE.FNUGETTASK_TYPE_CLASSIF(NUTASKTYPE);
        END IF;

        UT_TRACE.TRACE('FIN OR_BOORDER.fnuGetOrderTaskTypeClass',5);
        RETURN NUTASKTYPECLASF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETORDERTASKTYPECLASS;
    
         













    FUNCTION FNUGETPACKAGEID
    (
        INUORDER      IN    OR_ORDER.ORDER_ID%TYPE
    )RETURN OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE
    IS
        NUPACKAGE    OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE;

        CURSOR CUPACKAGE
        (
            INUORDERID      IN    OR_ORDER.ORDER_ID%TYPE
        )
        IS
        SELECT OR_ORDER_ACTIVITY.PACKAGE_ID
          FROM OR_ORDER_ACTIVITY
          /*+ or_boOrder.fnuGetPackageId SAO185809 */
         WHERE OR_ORDER_ACTIVITY.ORDER_ID = INUORDERID
           AND OR_ORDER_ACTIVITY.PACKAGE_ID IS NOT NULL
           AND ROWNUM = 1;
    BEGIN
        
        UT_TRACE.TRACE('INICIO Or_BOOrder.fnuGetPackageId', 2 );
        IF ( CUPACKAGE%ISOPEN ) THEN
            CLOSE CUPACKAGE;
        END IF;

        OPEN CUPACKAGE(INUORDER);
        FETCH CUPACKAGE INTO NUPACKAGE;
        CLOSE CUPACKAGE;
        
        UT_TRACE.TRACE('FIN Or_BOOrder.fnuGetPackageId', 2 );
        RETURN NUPACKAGE;
    EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF ( CUPACKAGE%ISOPEN ) THEN
            CLOSE CUPACKAGE;
        END IF;
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        IF ( CUPACKAGE%ISOPEN ) THEN
            CLOSE CUPACKAGE;
        END IF;
        RAISE EX.CONTROLLED_ERROR;
    END FNUGETPACKAGEID;

    



















    FUNCTION FSBISVALTOUPDCONTRACT
    (
        INUORDERID  OR_ORDER.ORDER_ID%TYPE
    )RETURN VARCHAR2
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.fsbIsValToUpdContract. inuOrderId '||INUORDERID, 2 );

        IF (OR_BCORDER.FBLORDERHASACTIVITY(INUORDERID, GE_BOITEMSCONSTANTS.CNUADJUSTMENTACTIVITY)
            OR
            OR_BCRELATEDORDER.FSBHASRELATEDORDER(INUORDERID, GE_BOCONSTANTS.FNUGETTRANSTYPEADJORDER) = GE_BOCONSTANTS.CSBYES
        ) THEN
            UT_TRACE.TRACE('FIN Or_BOOrder.fsbIsValToUpdContract. No valido', 2 );
            RETURN GE_BOCONSTANTS.CSBNO;
        ELSE
            UT_TRACE.TRACE('FIN Or_BOOrder.fsbIsValToUpdContract. valido', 2 );
            RETURN GE_BOCONSTANTS.CSBYES;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBISVALTOUPDCONTRACT;
    
    



















    PROCEDURE VALIDFINISHACTIVITY
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERUNITID   IN  OR_ORDER.OPERATING_UNIT_ID%TYPE,
        OSBFINISHACT    OUT VARCHAR2
    )
    IS
       NUORDERSTATUS    OR_ORDER.ORDER_STATUS_ID%TYPE;
    BEGIN
       OSBFINISHACT :=  OR_BOCONSTANTS.CSBNO;
       NUORDERSTATUS := DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDERID);

       IF (NUORDERSTATUS != OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED) THEN
            OSBFINISHACT :=  OR_BOCONSTANTS.CSBSI;
       END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDFINISHACTIVITY;
    
    
    



















    PROCEDURE  GETORDERSASSIGN
    (
        INUOPERUNITID   IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBTASKTYPEUSE  IN OR_TASK_TYPE.USE_%TYPE,
        ORFASSIGNORDERS   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OR_BCORDER.GETORDERSASSIGN(INUOPERUNITID, ISBTASKTYPEUSE, ORFASSIGNORDERS );
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERSASSIGN;

    





















    PROCEDURE ASSIGNNEXTORDER
    (
        INUOPERUNITID   IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTDATE         IN  DATE,
        ISBTASKTYPEUSE  IN  OR_TASK_TYPE.USE_%TYPE,
        OSBDATAEXISTS   OUT VARCHAR2,
        ORFNEXTORDER    OUT CONSTANTS.TYREFCURSOR
    )
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        
        SBROLEXCEPTION  OR_SCHED_AVAILABLE.ROL_EXCEPTION_FLAG%TYPE;
        NUAVAILABLEID   OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE;
        SBPRIORITY      OR_ACTIVIDAD.PRIORIDAD_DESPACHO%TYPE;
        TBORDER_ROWID   DAOR_ORDER.TYTBROWID;
        NUINDEX         BINARY_INTEGER;
        NUOPERATINGZONE OR_SCHED_AVAILABLE.OPERATING_ZONE_ID%TYPE;
        
        PROCEDURE SAVEDATA
        (
            INUOPEUNIDISPATCHID IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
            IRWORDER_ROWID     IN    ROWID 
        )
        IS
           RCORDER   DAOR_ORDER.STYOR_ORDER ;
        BEGIN
            UT_TRACE.TRACE('INICIO OR_BOOrder.SaveData '||'Unidad De Despacho: ['|| INUOPEUNIDISPATCHID || ']', 10);

            IF IRWORDER_ROWID IS NOT NULL THEN
                DAOR_ORDER.LOCKBYROWID(IRWORDER_ROWID,RCORDER);
                RCORDER.OPERATING_UNIT_ID  := INUOPEUNIDISPATCHID;
                OR_BOPROCESSORDER.ASSIGN(RCORDER,INUOPEUNIDISPATCHID, NULL );
            END IF;
            UT_TRACE.TRACE('Fin OR_BOOrder.SaveData',10);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END SAVEDATA;

    BEGIN
        
    
        OR_BOADMINORDER.GETAVAILABLEDISPACH
        (
            INUOPERUNITID,
            IDTDATE,
            SBROLEXCEPTION,
            NUAVAILABLEID,
            SBPRIORITY
        );

        IF NUAVAILABLEID IS NOT NULL THEN
            NUOPERATINGZONE := DAOR_SCHED_AVAILABLE.FNUGETOPERATING_ZONE_ID(NUAVAILABLEID);
            
            OR_BCORDER.GETNEXTORDER
            (
                INUOPERUNITID,
                NUOPERATINGZONE,
                IDTDATE,
                NUAVAILABLEID,
                SBROLEXCEPTION,
                ISBTASKTYPEUSE,
                TBORDER_ROWID
            );
        END IF;
        
        NUINDEX := TBORDER_ROWID.FIRST;
        
        IF ( NUINDEX IS NULL ) THEN
            IF ( ORFNEXTORDER%ISOPEN ) THEN
                CLOSE ORFNEXTORDER;
            END IF;
            
            OSBDATAEXISTS := GE_BOCONSTANTS.CSBNO;
       ELSE
            
            SAVEDATA(INUOPERUNITID,TBORDER_ROWID(NUINDEX));
            IF (ORFNEXTORDER%ISOPEN) THEN
                CLOSE ORFNEXTORDER;
            END IF;
            
            OR_BCORDER.GETORDERBYROWID(TBORDER_ROWID(NUINDEX),ORFNEXTORDER);
            OSBDATAEXISTS := GE_BOCONSTANTS.CSBYES;
        END IF;

        COMMIT;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNNEXTORDER;
    
    





















    PROCEDURE ASSIGNNEXTORDER
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERUNITID   IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFNEXTORDER    OUT CONSTANTS.TYREFCURSOR
    )
    IS
    PRAGMA AUTONOMOUS_TRANSACTION;
        
        RCORDER DAOR_ORDER.STYOR_ORDER;
    BEGIN
        UT_TRACE.TRACE('[INICIO] Or_BOOrder.AssignNextOrder 2['||INUORDERID||']',10);
        
        DAOR_ORDER.LOCKBYPK(INUORDERID,RCORDER);
        
        
        IF (RCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED) THEN
            RCORDER.OPERATING_UNIT_ID  := INUOPERUNITID;
            OR_BOPROCESSORDER.ASSIGN(RCORDER,INUOPERUNITID, NULL );
        END IF;

        
        OR_BCORDER.GETORDERBYROWID(RCORDER.ROWID,ORFNEXTORDER);
        
        
        COMMIT;

        UT_TRACE.TRACE('[FIN] Or_BOOrder.AssignNextOrder 2',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',10);
            ROLLBACK;
                RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',12);
            ERRORS.SETERROR;
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
    END ASSIGNNEXTORDER;
    

    


















    PROCEDURE LOCKORDERRECORD
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('[INICIO] Or_BOOrder.LockOrderRecord 2['||INUORDERID||']',10);

        OR_BCORDERPROCESS.LOCKORDER( INUORDERID );

        UT_TRACE.TRACE('[FIN] Or_BOOrder.LockOrderRecord 2['||INUORDERID||']',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR : Or_BOOrder.LockOrderRecord',10);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('others : Or_BOOrder.LockOrderRecord',10);
            RAISE EX.CONTROLLED_ERROR;
    END LOCKORDERRECORD;
    
    




































    PROCEDURE CLOSEORDERWITHPRODUCT
    (
        INUACTIVITY         IN  GE_ITEMS.ITEMS_ID%TYPE,                                     
        INUOPERUNITID       IN  OR_ORDER.OPERATING_UNIT_ID%TYPE,                            
        INUCAUSALID         IN  OR_ORDER.CAUSAL_ID%TYPE,                                    
        INUPERSONID         IN  GE_PERSON.PERSON_ID%TYPE,                                   
        INUADDRESSID        IN  OR_ORDER_ACTIVITY.ADDRESS_ID%TYPE,                          
        IDTFINISHDATE       IN  OR_ORDER.EXECUTION_FINAL_DATE%TYPE,                         
        INUITEMAMOUNT       IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE DEFAULT NULL,         
        INUREFVALUE         IN  OR_ORDER_ACTIVITY.VALUE_REFERENCE%TYPE DEFAULT NULL,        
        INUCOMMENTTYPEID    IN  GE_COMMENT_TYPE.COMMENT_TYPE_ID%TYPE DEFAULT NULL,          
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL,           
        INUORDERRELAID      IN  OR_ORDER.ORDER_ID%TYPE DEFAULT NULL,                        
        INURELATIONTYPE     IN  GE_TRANSITION_TYPE.TRANSITION_TYPE_ID%TYPE DEFAULT NULL,    
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE DEFAULT NULL,                   
        INUMOTIVEID         IN  MO_MOTIVE.MOTIVE_ID%TYPE DEFAULT NULL,                      
        INUCOMPONENTID      IN  MO_COMPONENT.COMPONENT_ID%TYPE DEFAULT NULL,                
        INUINSTANCEID       IN  WF_INSTANCE.INSTANCE_ID%TYPE DEFAULT NULL,                  
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE DEFAULT NULL,                    
        IONUORDERID         IN OUT OR_ORDER.ORDER_ID%TYPE                                   
    )
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        DTFINISHDATE        OR_ORDER.EXECUTION_FINAL_DATE%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.CloseOrderWithProduct'
                        ||' inuActivity '       ||TO_CHAR(INUACTIVITY)       ||' - '
                        ||' inuOperUnitId '     ||TO_CHAR(INUOPERUNITID)     ||' - '
                        ||' inuCausalId '       ||TO_CHAR(INUCAUSALID)       ||' - '
                        ||' inuPersonId '       ||TO_CHAR(INUPERSONID)       ||' - '
                        ||' inuAddressId '      ||TO_CHAR(INUADDRESSID)      ||' - '
                        ||' idtFinishDate '     ||TO_CHAR(IDTFINISHDATE,  'dd/mm/yyyy hh:mi:ss')     ||' - '
                        ||' inuItemAmount '     ||TO_CHAR(INUITEMAMOUNT)     ||' - '
                        ||' inuRefValue '       ||TO_CHAR(INUREFVALUE)       ||' - '
                        ||' inuCommentTypeId '  ||TO_CHAR(INUCOMMENTTYPEID)  ||' - '
                        ||' isbComment '        ||ISBCOMMENT                 ||' - '
                        ||' inuOrderRelaId'     ||TO_CHAR(INUORDERRELAID)    ||' - '
                        ||' inuRelationType'    ||TO_CHAR(INURELATIONTYPE)   ||' - '
                        ||' inuPackageId '      ||TO_CHAR(INUPACKAGEID)      ||' - '
                        ||' inuMotiveId '       ||TO_CHAR(INUMOTIVEID)       ||' - '
                        ||' inuComponentId '    ||TO_CHAR(INUCOMPONENTID)    ||' - '
                        ||' inuInstanceId '     ||TO_CHAR(INUINSTANCEID)     ||' - '
                        ||' inuProductId '      ||TO_CHAR(INUPRODUCTID)      ||' - '
                        ||' ionuOrderId '       ||TO_CHAR(IONUORDERID)       , 2 );

        
        OR_BOORDERACTIVITIES.CREATEACTIVITY
            (
                INUACTIVITY,
                INUPACKAGEID,
                INUMOTIVEID,
                INUCOMPONENTID,
                INUINSTANCEID,
                INUADDRESSID,
                NULL,
                NULL,
                NULL,
                INUPRODUCTID,
                NULL,
                INUOPERUNITID,
                NULL,
                NULL,
                NULL,
                FALSE,
                NULL,
                IONUORDERID,
                NUORDERACTIVITYID,
                NULL,
                GE_BOCONSTANTS.CSBNO,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                FALSE,
                INUREFVALUE
            );
            
        IF (IDTFINISHDATE IS NULL) THEN
            DTFINISHDATE := UT_DATE.FDTSYSDATE;
        ELSE
            DTFINISHDATE := IDTFINISHDATE;
        END IF;
            
         
        OR_BOORDER.UPDATEORDER
        (
            IONUORDERID,
            NUORDERACTIVITYID,
            INUCAUSALID,
            INUITEMAMOUNT,
            INUOPERUNITID,
            DTFINISHDATE,
            INUPERSONID,
            INUADDRESSID,
            INUCOMMENTTYPEID
        );

        
        IF (INUORDERRELAID IS NOT NULL) THEN
            OR_BORELATEDORDER.RELATEORDERS
                (
                    INUORDERRELAID,
                    IONUORDERID,
                    INURELATIONTYPE
                );
        END IF;

        
        IF (INUCOMMENTTYPEID IS NOT NULL) THEN
            OR_BOORDERCOMMENT.ADDCOMMENT
                (
                    IONUORDERID,
                    INUCOMMENTTYPEID,
                    ISBCOMMENT
                );
        END IF;

        UT_TRACE.TRACE('FIN Or_BOOrder.CloseOrderWithProduct. nuOrderActivityId: '||NUORDERACTIVITYID||', ionuOrderId: '||IONUORDERID, 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLOSEORDERWITHPRODUCT;
    
    













	PROCEDURE VALASSIGNTYPEOFORDER(
                                    IRCORDERID     IN  DAOR_ORDER.STYOR_ORDER,
                                    ISBASSIGNTYPE  IN  OR_ORDER.ASSIGNED_WITH%TYPE
                                  )
    IS
        CNUERROR901331    CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE := 901331;
        CNUERROR900655    CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE := 900655;
    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.ValAssignTypeOfOrder. ircOrderId.order_id: '||IRCORDERID.ORDER_ID||' isbAssignType: '||ISBASSIGNTYPE, 2 );

        
        IF (ISBASSIGNTYPE IS NULL) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR901331);
        END IF;
        
        IF(IRCORDERID.ASSIGNED_WITH IS NULL OR IRCORDERID.ASSIGNED_WITH <> ISBASSIGNTYPE) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR900655);
        END IF;
        UT_TRACE.TRACE('FIN Or_BOOrder.ValAssignTypeOfOrder', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALASSIGNTYPEOFORDER;


    


























    PROCEDURE REVOKEORDER
    (
        INUORDERID     IN  OR_ORDER.ORDER_ID%TYPE,
        INUCAUSALID    IN  OR_ORDER.CAUSAL_ID%TYPE,
        ONUORDERID     OUT OR_ORDER.ORDER_ID%TYPE,
        IDTCHANGEDATE  IN  OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        
        NUSUPPORTORDER          NUMBER := OR_BOSUPPORTORDER.FNUGETSUPPORTORDERTYPE;
        NUORDERID               OR_ORDER.ORDER_ID%TYPE;
        NUORDERACTIVITYID       OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        RCORDERACTIVITY         DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        BLISPROJECTORDER        BOOLEAN := FALSE;
        RCORDERREVOKED          DAOR_ORDER.STYOR_ORDER;
        RCORDER                 DAOR_ORDER.STYOR_ORDER;
        RCRELATEDORDER          DAOR_RELATED_ORDER.STYOR_RELATED_ORDER;

        CURSOR CUORDERACTIVBYORDER
        IS
        SELECT  OR_ORDER_ACTIVITY.*, ROWID
        FROM    OR_ORDER_ACTIVITY
        WHERE   OR_ORDER_ACTIVITY.ORDER_ID = INUORDERID;

        CURSOR CUITEMSINSPECBYORDER
        IS
        SELECT  OR_ITEMS_ORDEN_INSPE.*, ROWID
        FROM    OR_ITEMS_ORDEN_INSPE
        WHERE   OR_ITEMS_ORDEN_INSPE.ID_ORDEN = INUORDERID;

    BEGIN
        UT_TRACE.TRACE('INICIO Or_BOOrder.RevokeOrder',15);


        FOR RCROW IN OR_BCRELATEDORDER.CURELORDERBYORDERANDTYPE(INUORDERID, NUSUPPORTORDER) LOOP
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_900601, INUORDERID);
        END LOOP;
        
        
        DAOR_ORDER.LOCKBYPK(INUORDERID, RCORDERREVOKED);    
        
        
        IF (RCORDERREVOKED.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED) THEN
            GE_BOERRORS.SETERRORCODE(CNUERROR_120864);
        END IF;
        


        FOR RCROW IN CUORDERACTIVBYORDER LOOP
            UT_TRACE.TRACE('Procesa la Actividad ['||RCROW.ORDER_ACTIVITY_ID||']',15);
            
            RCORDERACTIVITY := RCROW;

            RCORDERACTIVITY.ROWID                 := NULL;
            RCORDERACTIVITY.ORIGIN_ACTIVITY_ID    := RCORDERACTIVITY.ORDER_ACTIVITY_ID;
            RCORDERACTIVITY.ORDER_ACTIVITY_ID     := OR_BOSEQUENCES.FNUNEXTOR_ORDER_ACTIVITY;
            RCORDERACTIVITY.ORDER_ID              := NULL;
            RCORDERACTIVITY.OPERATING_UNIT_ID     := NULL;
            RCORDERACTIVITY.ORDER_ITEM_ID         := NULL;

            RCORDERACTIVITY.COMPENSATED           := NULL;
            RCORDERACTIVITY.EXEC_ESTIMATE_DATE    := NULL;
            RCORDERACTIVITY.FINAL_DATE            := NULL;
            RCORDERACTIVITY.REGISTER_DATE         := SYSDATE;
            RCORDERACTIVITY.SEQUENCE_             := NULL;
            RCORDERACTIVITY.VALUE1                := NULL;
            RCORDERACTIVITY.VALUE2                := NULL;
            RCORDERACTIVITY.VALUE3                := NULL;
            RCORDERACTIVITY.VALUE4                := NULL;

            DAOR_ORDER_ACTIVITY.INSRECORD(RCORDERACTIVITY);
            UT_TRACE.TRACE('Se crea la actividad ['|| RCORDERACTIVITY.ORDER_ACTIVITY_ID||']',15);

            IF (RCORDERACTIVITY.ORDER_TEMPLATE_ID IS NOT NULL) THEN
                BLISPROJECTORDER := TRUE;
            END IF;

            
            IF (NUORDERID IS NULL) THEN
                
                OR_BOORDERACTIVITIES.UPDATEACTIVITY
                (
                    RCORDERACTIVITY,
                    RCORDERACTIVITY.ACTIVITY_ID,
                    NUORDERID
                );
                DAOR_ORDER_ACTIVITY.UPDORDER_ID(RCORDERACTIVITY.ORDER_ACTIVITY_ID, NUORDERID);

                
                RCORDER := DAOR_ORDER.FRCGETRECORD(NUORDERID);

                IF (RCORDERREVOKED.EXEC_ESTIMATE_DATE IS NOT NULL) THEN
                    RCORDER.EXEC_ESTIMATE_DATE := RCORDER.CREATED_DATE + (RCORDERREVOKED.EXEC_ESTIMATE_DATE - RCORDERREVOKED.CREATED_DATE);
                END IF;

                IF (RCORDERREVOKED.MAX_DATE_TO_LEGALIZE IS NOT NULL) THEN
                    RCORDER.MAX_DATE_TO_LEGALIZE := RCORDER.CREATED_DATE + (RCORDERREVOKED.MAX_DATE_TO_LEGALIZE - RCORDERREVOKED.CREATED_DATE);
                END IF;

                IF (RCORDERREVOKED.EXTERNAL_ADDRESS_ID IS NOT NULL) THEN
                    RCORDER.EXTERNAL_ADDRESS_ID := RCORDERREVOKED.EXTERNAL_ADDRESS_ID;
                END IF;

                DAOR_ORDER.UPDRECORD(RCORDER);
                
                
                RCRELATEDORDER.ORDER_ID := INUORDERID;
                RCRELATEDORDER.RELATED_ORDER_ID := NUORDERID;
                RCRELATEDORDER.RELA_ORDER_TYPE_ID := OR_BOCONSTANTS.CNURELATEDORD_REVOKED;
                DAOR_RELATED_ORDER.INSRECORD( RCRELATEDORDER );
            ELSE
                RCORDERACTIVITY.ORDER_ID := NUORDERID;

                OR_BOORDERACTIVITIES.INSORUPDORDERACTIVIT
                (
                    RCORDERACTIVITY.ACTIVITY_ID,
                    NUORDERID,
                    RCORDERACTIVITY,
                    RCORDERACTIVITY.ORDER_ACTIVITY_ID
                );
            END IF;

        END LOOP;

        UT_TRACE.TRACE('nuOrderid ['||NUORDERID||']',15);

        
        FOR RCROW IN OR_BCORDERCOMMENT.CUORDERCOMMENT(INUORDERID) LOOP
            RCROW.ROWID := NULL;
            RCROW.ORDER_COMMENT_ID := OR_BOSEQUENCES.FNUNEXTOR_ORDER_COMMENT;
            RCROW.ORDER_ID := NUORDERID;

            DAOR_ORDER_COMMENT.INSRECORD(RCROW);
            UT_TRACE.TRACE('Se copia el comentario ['||RCROW.ORDER_COMMENT_ID||']',15);
        END LOOP;

        
        IF (BLISPROJECTORDER) THEN
            UT_TRACE.TRACE('Es una orden de proyectos',15);
            PM_BORELATEDORDER.UPDATERELATEDORDERS(NUORDERID,TRUE);
        END IF;

        
        FOR RCROW IN CUITEMSINSPECBYORDER LOOP
            RCROW.ROWID                 := NULL;
            RCROW.ID_ORDEN              := NUORDERID;
            RCROW.ID_ITEM_ORDENS_INSPE  := OR_BOSEQUENCES.FNUNEXTOR_ITEMS_ORDEN_INSPE;
            DAOR_ITEMS_ORDEN_INSPE.INSRECORD(RCROW);
            UT_TRACE.TRACE('Se crea el item a inspeccionar ['||RCROW.ID_ITEM_ORDENS_INSPE||']',15);

        END LOOP;

        
        OR_BOANULLORDER.ANULLORDERWITHOUTVAL(INUORDERID,IDTCHANGEDATE);
        
        DAOR_ORDER.UPDCAUSAL_ID(INUORDERID, INUCAUSALID);

        ONUORDERID := NUORDERID;
        
        UT_TRACE.TRACE('FIN Or_BOOrder.RevokeOrder',15);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


BEGIN
    LOADPARAMETER;
END OR_BOORDER;