
Unwrap More Code

PACKAGE OR_BCORDER
AS










































































































































    TYPE TYRCORDER IS RECORD
    (
        ORDERID             OR_ORDER.ORDER_ID%TYPE,
        TASKTYPEID          OR_ORDER.TASK_TYPE_ID%TYPE,
        OPERATINGUNIT       OR_ORDER.OPERATING_UNIT_ID%TYPE,
        ORDERSTATUSID       OR_ORDER.ORDER_STATUS_ID%TYPE,
        PROGRAMINGCLASSID   OR_ORDER.PROGRAMING_CLASS_ID%TYPE,
        ARRANGEDHOUR        OR_ORDER.ARRANGED_HOUR%TYPE,
        DURATIONTIME        OR_SCHED_DISPATCH.DURATION%TYPE,
        CLIENTID            OR_ORDER.SUBSCRIBER_ID%TYPE,
        CLIENTNAME          VARCHAR2(210),
        ADDRESSID           OR_ORDER.EXTERNAL_ADDRESS_ID%TYPE,
        ADDRESS             AB_ADDRESS.ADDRESS%TYPE,
        CLIENTPHONE         GE_SUBSCRIBER.PHONE%TYPE,
        CREATIONDATE        OR_ORDER.CREATED_DATE%TYPE,
        REPROGRAMLASTDATE   OR_ORDER.REPROGRAM_LAST_DATE%TYPE,
        PRIORITY            OR_ORDER.PRIORITY%TYPE,
        ZONEID              OR_SCHED_DISPATCH.OPERATING_ZONE_ID%TYPE
    );
    
    
    TYPE TYTBORDER IS TABLE OF TYRCORDER INDEX BY VARCHAR(16);

    
    TYPE TYRCORDERDATA IS RECORD
    (
        ORDERID             OR_ORDER.ORDER_ID%TYPE,
        OPERATINGUNITID     OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        SUBSCRIBERID        GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        SUBSCRIBERNAME      GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        ADDRESSID           AB_ADDRESS.ADDRESS_ID%TYPE,
        ADDRESSPARSED       AB_ADDRESS.ADDRESS_PARSED%TYPE,
        ADDRESSCOMPLEMENT   AB_ADDRESS.ADDRESS_COMPLEMENT%TYPE,
        FIRSTWAY            AB_SEGMENTS.ENTRECALLE1%TYPE,
        SECONDWAY           AB_SEGMENTS.ENTRECALLE2%TYPE,
        ADDRESSDATA         AB_SEGMENTS.ADITIONAL_DATA%TYPE,
        TASKTYPEID          OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        STARTHOUR           OR_SCHED_DISPATCH.HOUR_START%TYPE,
        ENDHOUR             OR_SCHED_DISPATCH.HOUR_END%TYPE,
        PROGCLASSDESC       OR_PROGRAMING_CLASS.SHORT_NAME%TYPE,
        OPERATINGZONEDESC   OR_OPERATING_ZONE.DESCRIPTION%TYPE,
        CREATEDDATE         OR_ORDER.CREATED_DATE%TYPE,
        ORDERSTATUSID       OR_ORDER.ORDER_STATUS_ID%TYPE,
        RESHEDULE           OR_SCHED_PROGRAMING.PROGRAMING_STATUS%TYPE,
        DAMAGEID            MO_PACKAGES.PACKAGE_ID%TYPE
    );
    
    TYPE TYTBORDERDATA IS TABLE OF TYRCORDERDATA INDEX BY BINARY_INTEGER;



    TYPE TYRCORDERFILE IS RECORD
    (
        ORDERID     OR_ORDER.ORDER_ID%TYPE,
        FILEID      CC_FILE.FILE_ID%TYPE,
        FILENAME    CC_FILE.FILE_NAME%TYPE
    );

    TYPE TYTBORDERFILES IS TABLE OF TYRCORDERFILE INDEX BY BINARY_INTEGER;

    
    
    

        
        CURSOR CUORDERSTATUS
        (
            NUNUMERATOR OR_ORDER.NUMERATOR_ID%TYPE,
            NUSEQUENCE  OR_ORDER.SEQUENCE%TYPE,
            NUSTATUS_ID OR_ORDER.ORDER_STATUS_ID%TYPE
        )
        IS
            SELECT OPERATING_UNIT_ID, ORDER_ID
            FROM   OR_ORDER
            WHERE  NUMERATOR_ID = NUNUMERATOR
              AND  SEQUENCE = NUSEQUENCE
              AND  ORDER_STATUS_ID = NUSTATUS_ID;
              
    CURSOR CUPENDADMORDERBYOPEUNI( INUOPEUNITID IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
                                   INUACTIVITYID IN OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE)
    IS
        SELECT  'Y'
        FROM    OR_ORDER
        WHERE   OR_ORDER.ADM_PENDING = GE_BOCONSTANTS.CSBYES
        AND     OR_ORDER.ASSO_UNIT_ID = INUOPEUNITID
        AND     EXISTS
        (
                SELECT  'X'
                FROM    OR_ORDER_ACTIVITY
                WHERE   OR_ORDER_ACTIVITY.ORDER_ID = OR_ORDER.ORDER_ID
                AND     OR_ORDER_ACTIVITY.ACTIVITY_ID = INUACTIVITYID
        )
        AND     ROWNUM = 1;
    
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2;

    













	FUNCTION GETCOMPONENTORDERS
	(
	    INUCOMPONENTID   IN  OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE
	)
    RETURN CONSTANTS.TYREFCURSOR;

	
	
	FUNCTION GETTBLCOMPONENTORDERS
	(
	    INUCOMPONENTID   IN  OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE
	)
    RETURN GE_TYTBSTRING;


	
	
    FUNCTION GETTBLEXTERNALORDERS
	(
	    INUEXTERMID    IN  OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE,
	    INUIDENTITY    IN  OR_EXTERN_SYSTEMS_ID.EXTERN_ENTITY_ID%TYPE
	)
    RETURN GE_TYTBSTRING;


    

























    FUNCTION FRFGETLASTEXECDATEFROMORDER
    (
        INUWFTASKTYPE     IN OR_WF_INTERFACE.WF_TASK_TYPE_ID%TYPE,
        INUEXTERNSYSTEMID IN OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE,
        INUCLASSCAUSAL    IN GE_CAUSAL.CLASS_CAUSAL_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;

    



















    FUNCTION FRFGETMOTIVEORDERS
    (
        INUFATHEREXTSYSTEMID IN OR_EXTERN_SYSTEMS_ID.FATHE_EXTER_SYSTE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;
    



















    FUNCTION FRFFIRSTORDER
    (
        INUOPERATINUNITID   IN OR_ORDER.OPERATING_UNIT_ID%TYPE,
        INUORDERSTATUSID    IN OR_ORDER.ORDER_STATUS_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;

    



















    FUNCTION FRFORDEROFLISTOPERATINGUNIT
    (
        ITBOPERATINGUNIT    IN OUT NOCOPY GE_TYTBSTRING,
        INUORDERSTATUSID    IN OR_ORDER.ORDER_STATUS_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;


    



















    FUNCTION RFORTEMPORDERLISTOPERUNIT
    (
        ITBOPERATINGUNIT    IN OUT NOCOPY GE_TYTBSTRING,
        INUORDERSTATUSID    IN OR_TEMP_ORDER_TO_LEG.ORDER_STATUS_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;

    


















    PROCEDURE DELORTEMPORDERLISTOPERUNIT
    (
        ITBOPERATINGUNIT    IN OUT NOCOPY GE_TYTBSTRING,
        INUORDERSTATUSID    IN OR_TEMP_ORDER_TO_LEG.ORDER_STATUS_ID%TYPE
    );

    
















	FUNCTION FRFGETORDERSFROMINSTANCE
	(
	    INUWFTASKID IN OR_WF_INTERFACE.WF_TASK_ID%TYPE
	)
    RETURN CONSTANTS.TYREFCURSOR;

    
    













    CURSOR CUORDERBYEXTERID
    (
        INUROOTEXTERID        IN OR_EXTERN_SYSTEMS_ID.FATHE_EXTER_SYSTE_ID%TYPE,
        INUFATHEREXTENTITYID  IN OR_EXTERN_SYSTEMS_ID.FATHER_EXT_ENTITY_ID%TYPE
    )
    IS
        SELECT A.*, A.ROWID
        FROM OR_ORDER A,OR_EXTERN_SYSTEMS_ID B
        WHERE B.FATHE_EXTER_SYSTE_ID = INUROOTEXTERID
        AND B.FATHER_EXT_ENTITY_ID = INUFATHEREXTENTITYID
        AND A.ORDER_ID = B.ORDER_ID;

    















    
    CURSOR CUORDERSLEGALBYWFTASK
    (
        NUWFTASKID        OR_WF_INTERFACE.WF_TASK_ID%TYPE,
        NUORDERSTATUSFIRT OR_ORDER.ORDER_STATUS_ID%TYPE,
        NUORDERSTATUSSECO OR_ORDER.ORDER_STATUS_ID%TYPE
    )
    IS
        SELECT OR_WF_INTERFACE.ORDER_ID
          FROM OR_WF_INTERFACE, OR_ORDER, GE_CAUSAL
         WHERE OR_WF_INTERFACE.WF_TASK_ID = NUWFTASKID
           AND OR_WF_INTERFACE.ORDER_ID = OR_ORDER.ORDER_ID
           AND OR_ORDER.ORDER_STATUS_ID IN (NUORDERSTATUSFIRT,
                                            NUORDERSTATUSSECO)
           AND OR_ORDER.CAUSAL_ID = GE_CAUSAL.CAUSAL_ID
           AND GE_CAUSAL.CLASS_CAUSAL_ID = 1
           ORDER BY OR_ORDER.LEGALIZATION_DATE DESC;
           
    












    












    



















    CURSOR CURELORDERBYORDERANDTYPE
    (
        INUORDERID IN OR_RELATED_ORDER.ORDER_ID%TYPE,
        INURELTYPE IN OR_RELATED_ORDER.RELA_ORDER_TYPE_ID%TYPE
    )
    IS
        SELECT /*+ ORDERED
                    INDEX(or_order PK_OR_ORDER)
                    INDEX(OR_related_order IDX_OR_RELATED_ORDER_02)
                    USE_NL(OR_related_order or_order)
                */
            OR_RELATED_ORDER.*, OR_RELATED_ORDER.ROWID
        FROM   OR_RELATED_ORDER, OR_ORDER
        /*+ OR_BCORDER.cuRelOrderByOrderAndType SAO199000 */
        WHERE  OR_RELATED_ORDER.RELATED_ORDER_ID = OR_ORDER.ORDER_ID
        AND    OR_RELATED_ORDER.ORDER_ID = INUORDERID
        AND    OR_RELATED_ORDER.RELA_ORDER_TYPE_ID = INURELTYPE
        AND NOT EXISTS  (SELECT  /*+ INDEX(OR_order_status PK_OR_ORDER_STATUS) */
                            'x'
                             FROM OR_ORDER_STATUS
                             WHERE OR_ORDER.ORDER_STATUS_ID = OR_ORDER_STATUS.ORDER_STATUS_ID
                             AND    ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_CANCELED
                        );


    











	CURSOR CUGETORDERBYEXTERNSYSTEMSID
	(
	    NUCOMPONENTID    IN  OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE,
	    NUEXTERNENTITYID IN  OR_EXTERN_SYSTEMS_ID.EXTERN_ENTITY_ID%TYPE
	) IS
    SELECT A.ORDER_ID, B.TASK_TYPE_ID, B.OPERATING_UNIT_ID, B.ORDER_VALUE, B.CHARGE_STATUS
      FROM   OR_EXTERN_SYSTEMS_ID A, OR_ORDER B
     WHERE  A.EXTERN_SYSTEM_ID  = NUCOMPONENTID
       AND A.EXTERN_ENTITY_ID= NUEXTERNENTITYID
       AND A.ORDER_ID = B.ORDER_ID;

    











    CURSOR CUGETORDERSBYFATHEREXTSYSTID
    (
        NUFATHEREXTSYSTEMID IN OR_EXTERN_SYSTEMS_ID.FATHE_EXTER_SYSTE_ID%TYPE,
        NUFATHEREXTENTITYID IN OR_EXTERN_SYSTEMS_ID.FATHER_EXT_ENTITY_ID%TYPE
    ) IS
    SELECT A.*, A.ROWID
      FROM   OR_ORDER A,
             OR_EXTERN_SYSTEMS_ID B
     WHERE  A.ORDER_ID = B.ORDER_ID
       AND  ((B.FATHE_EXTER_SYSTE_ID = NUFATHEREXTSYSTEMID AND B.FATHER_EXT_ENTITY_ID = NUFATHEREXTENTITYID)
        OR  (B.EXTERN_SYSTEM_ID  = NUFATHEREXTSYSTEMID AND B.EXTERN_ENTITY_ID = NUFATHEREXTENTITYID));

    


















    FUNCTION FNUGETCOUNTERORDERBYTASKTYPE
    (
        INUTASKTYPEID  IN OR_ORDER.TASK_TYPE_ID%TYPE
    ) RETURN NUMBER;
    
    























    FUNCTION FRFGETORDERBYOPRSETASKTYSQNUM
    (
       INUOPERSECTORID IN OR_ORDER.OPERATING_SECTOR_ID%TYPE,
       INUTASKTYPEID   IN OR_ORDER.TASK_TYPE_ID%TYPE,
       INUSEQUENCE     IN OR_ORDER.SEQUENCE%TYPE,
       INUNUMERATORID  IN OR_ORDER.NUMERATOR_ID%TYPE,
       ISBFILTER        IN VARCHAR := NULL
    )
    RETURN CONSTANTS.TYREFCURSOR;
    
    





















    FUNCTION FNUGETORDERIDBYNUMSEQ
    (
        INUNUMERATOR    IN  OR_ORDER.NUMERATOR_ID%TYPE,
        INUSEQUENCE     IN  OR_ORDER.SEQUENCE%TYPE
    )
    RETURN NUMBER;
    
    FUNCTION FSBISORDERINFINALSTATUS
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE
    ) RETURN VARCHAR2;
    
    



















    FUNCTION FBLGETREGADMINORDERSBYDATE
    (
        IDTDATE         IN  DATE,
        INULASTORDER    IN  OR_ORDER.ORDER_ID%TYPE,
        OTBORDERS       OUT DAOR_ORDER.TYTBOR_ORDER
    )
    RETURN BOOLEAN;
    
    PROCEDURE GETADDCOORDFORORDER
    (
        INUADDRESSID    IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        ONUX            OUT OR_ORDER.X%TYPE,
        ONUY            OUT OR_ORDER.Y%TYPE
    );

    
    
    
    FUNCTION FSBEXISTSORDERS
    (
        INUPACKAGEID    IN  OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
        INUMOTIVEID     IN  OR_ORDER_ACTIVITY.MOTIVE_ID%TYPE,
        INUCOMPONENTID  IN  OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE,
        ISBORDERSTATUS  IN  VARCHAR
    )
    RETURN VARCHAR2;
    
    




    FUNCTION FBLEXISPENDADMORDBYSUBS
    (
        INUSUBSCRIBERID IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUACTIVITYID   IN  OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE
    )
    RETURN BOOLEAN;
    
    




    FUNCTION FTBGETORDERSINFO
    (
        ITBSCHEDSID         IN  OR_TYTBSCHEDAVAILABLEID
    )RETURN OR_BCORDER.TYTBORDER;
    
    PROCEDURE GETORDERINFO
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        ONUTASKTYPEID       OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ONUTASKTYPECLASSIF  OUT GE_TASK_CLASS.TASK_CLASS_ID%TYPE,
        ONUADMINBASEID      OUT GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
        ODTEXECUTIONDATE    OUT OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
        ONUPROJECTID        OUT PM_PROJECT.PROJECT_ID%TYPE,
        ONUOPERUNITID       OUT OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ONUASSOOPEUNI       OUT OR_OPERATING_UNIT.ASSO_OPER_UNIT%TYPE
    );

    




    PROCEDURE GETORDERSFORANULL
    (
        INUPACKAGEID    IN  OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
        INUMOTIVEID     IN  OR_ORDER_ACTIVITY.MOTIVE_ID%TYPE,
        INUCOMPONENTID  IN  OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE,
        ISBORDERSTATUS  IN  VARCHAR,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    );
    

    




    FUNCTION FBLORDERHASACTIVITY
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUACTIVITYID       IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    RETURN BOOLEAN;
    
    




    FUNCTION FBLEXISPENDADMORDBYOPEUNI
    (
        INUOPEUNITID IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUACTIVITYID IN OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE
    )
    RETURN BOOLEAN;
    
    





    FUNCTION FNUGETORDBYPACKACT
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUACTIVITYID   IN  OR_ACTIVIDAD.ID_ACTIVIDAD%TYPE,
        ISBFINALSTATUS  IN  OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE
    )
    RETURN OR_ORDER.ORDER_ID%TYPE;

    




    FUNCTION FSBGETORDERSERIALEQU
    (
        INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
    )
    RETURN GE_ITEMS_SERIADO.SERIE%TYPE;
    
    




    PROCEDURE GETREGORDERSBYPACK
    (
        INUPACKGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ISBACTIVITIES   IN  VARCHAR2,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    );
    
    




    PROCEDURE GETREGORDERSBYMOTIVE
    (
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        ISBACTIVITIES   IN  VARCHAR2,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    );

    



















    PROCEDURE GETORDERBASICDATA
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        ORFORDERDATA    OUT CONSTANTS.TYREFCURSOR
    );

    


























    FUNCTION FSBGETORDEREXISTENCE
    (
        ISBACTIVITIES   VARCHAR2,
        INUCAUSAL       OR_ORDER.CAUSAL_ID%TYPE,
        INUPRODUCT      SERVSUSC.SESUNUSE%TYPE,
        INUINITIALDATE  OR_ORDER.LEGALIZATION_DATE%TYPE,
        IDTREADINGDATE  OR_ORDER.LEGALIZATION_DATE%TYPE
   )
    RETURN OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE;
    
    





    FUNCTION FSBISVALIDSTATEORDER
    (
        INUORDERID    IN  OR_ORDER.ORDER_ID%TYPE
    )   RETURN VARCHAR2;
    
    



    PROCEDURE FINDORDERS
    (
        INUCONTRACTORID     IN      GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUOPERUNITID       IN      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUCONTRACTID       IN      GE_CONTRATO.ID_CONTRATO%TYPE,
        INUSUBSCRIBERID     IN      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUTASKTYPEID       IN      OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUORDERSTATUSID    IN      OR_ORDER_STATUS.ORDER_STATUS_ID%TYPE,
        IDTINITREGDATE      IN      OR_ORDER.CREATED_DATE%TYPE,
        IDTENDREGDATE       IN      OR_ORDER.CREATED_DATE%TYPE,
        IDTINITEXECDATE     IN      OR_ORDER.EXEC_INITIAL_DATE%TYPE,
        IDTENDEXECDATE      IN      OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
        IBOINCLUDENOVELTY   IN      BOOLEAN,
        ORFORDERDATA        OUT     CONSTANTS.TYREFCURSOR
    );
    
    




    FUNCTION FRCGETWITHDRAWALACT
    (
        ISBSERIE          IN  GE_ITEMS_SERIADO.SERIE%TYPE
    )
    RETURN DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;

    



    PROCEDURE  GETORDERSASSIGN
    (
        INUOPERUNITID   IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBTASKTYPEUSE  IN OR_TASK_TYPE.USE_%TYPE,
        ORFASSIGNORDERS   OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE GETNEXTORDER
    (
        INUOPERATINGUNITID  IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUOPERATINGZONE    IN  OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE,
        IDTDATE             IN  OR_SCHED_AVAILABLE.DATE_%TYPE,
        INUAVAILABLEID      IN  OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE,
        ISBROLEXCEPTION     IN  OR_SCHED_AVAILABLE.ROL_EXCEPTION_FLAG%TYPE,
        ISBTASKTYPEUSE      IN  OR_TASK_TYPE.USE_%TYPE,
        OTBORDER_ROWID      OUT DAOR_ORDER.TYTBROWID
    );
    
    PROCEDURE  GETORDERBYROWID
    (
        IRWORDER_ROWID  IN  ROWID,
        ORFASSIGNORDERS OUT CONSTANTS.TYREFCURSOR
    );
    
    FUNCTION FNUEXISTPENDINGORDERS
    (
        INUPRODUCTID    IN OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE,
        ISBACTIVITIES   IN VARCHAR2
    ) RETURN NUMBER;
    
    PROCEDURE UPDSAVECONTRORDERDATA
    (
      INUORDER              OR_ORDER.ORDER_ID%TYPE,
      ISBSAVEDDATAVALUES    OR_ORDER.SAVED_DATA_VALUES%TYPE,
      INUCONTRACT_ID        OR_ORDER.DEFINED_CONTRACT_ID%TYPE
    );

END OR_BCORDER;

PACKAGE BODY OR_BCORDER
AS









































































































































    CSBVERSION CONSTANT VARCHAR2(20) := 'SAO415875';

    CNUENTITYMOTIVEID  NUMBER;
    CNUENTITYCOMPONENT NUMBER;

    
    CNUMAXORDERSTORETURN  CONSTANT NUMBER(4) := 500;
    
    
    CNUSERIALRECOVERYATT  GE_ATTRIBUTES.ATTRIBUTE_ID%TYPE;

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

	
	
	FUNCTION GETCOMPONENTORDERS
	(
	    INUCOMPONENTID   IN  OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE
	)
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        RFCURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        IF CNUENTITYCOMPONENT IS NULL THEN
            CNUENTITYCOMPONENT := GE_BOENTITY.FNUGETENTITY_ID('MO_COMPONENT');
        END IF;
        OPEN RFCURSOR FOR
		    SELECT A.ORDER_ID, B.TASK_TYPE_ID, B.OPERATING_UNIT_ID
		    FROM   OR_EXTERN_SYSTEMS_ID A, OR_ORDER B
		    WHERE  A.EXTERN_SYSTEM_ID  = INUCOMPONENTID
		       AND A.EXTERN_ENTITY_ID=CNUENTITYCOMPONENT
			   AND A.ORDER_ID = B.ORDER_ID;
        RETURN(RFCURSOR);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
    	WHEN OTHERS THEN
	        ERRORS.SETERROR;
	        RAISE EX.CONTROLLED_ERROR;
    END GETCOMPONENTORDERS;

	
	
	FUNCTION GETTBLCOMPONENTORDERS
	(
	    INUCOMPONENTID   IN  OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE
	)
    RETURN GE_TYTBSTRING
    IS
        
        TBLDATOS GE_TYTBSTRING;
    BEGIN
        IF CNUENTITYCOMPONENT IS NULL THEN
            CNUENTITYCOMPONENT := GE_BOENTITY.FNUGETENTITY_ID('MO_COMPONENT');
        END IF;
	    SELECT 'ORDER_ID='||A.ORDER_ID||';TASK_TYPE_ID='|| B.TASK_TYPE_ID||
		       ';OPERATING_UNIT_ID='||B.OPERATING_UNIT_ID
		BULK COLLECT INTO TBLDATOS
		FROM OR_EXTERN_SYSTEMS_ID A, OR_ORDER B
		WHERE A.EXTERN_SYSTEM_ID = INUCOMPONENTID
          AND A.EXTERN_ENTITY_ID=CNUENTITYCOMPONENT
		  AND A.ORDER_ID = B.ORDER_ID;

        RETURN(TBLDATOS);

    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END GETTBLCOMPONENTORDERS;

    




















    FUNCTION GETTBLEXTERNALORDERS
	(
	    INUEXTERMID    IN  OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE,
	    INUIDENTITY    IN  OR_EXTERN_SYSTEMS_ID.EXTERN_ENTITY_ID%TYPE
	)
    RETURN GE_TYTBSTRING
    IS
        
        TBLDATOS GE_TYTBSTRING;
    BEGIN

	    SELECT 'ORDER_ID='||A.ORDER_ID||';TASK_TYPE_ID='|| B.TASK_TYPE_ID||
		       ';OPERATING_UNIT_ID='||B.OPERATING_UNIT_ID
		BULK COLLECT INTO TBLDATOS
		FROM OR_EXTERN_SYSTEMS_ID A, OR_ORDER B
		WHERE A.EXTERN_SYSTEM_ID = INUEXTERMID
          AND A.EXTERN_ENTITY_ID=INUIDENTITY
		  AND A.ORDER_ID = B.ORDER_ID;

        RETURN(TBLDATOS);

    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END GETTBLEXTERNALORDERS;

    
    PROCEDURE DELORTEMPORDERLISTOPERUNIT
    (
        ITBOPERATINGUNIT    IN OUT NOCOPY GE_TYTBSTRING,
        INUORDERSTATUSID    IN OR_TEMP_ORDER_TO_LEG.ORDER_STATUS_ID%TYPE
    )
    IS
    BEGIN
        DELETE
        FROM OR_TEMP_ORDER_TO_LEG
        WHERE OR_TEMP_ORDER_TO_LEG.ROWID IN (
                                             SELECT OR_TEMP_ORDER_TO_LEG.ROWID
                                             FROM OR_TEMP_ORDER_TO_LEG, TABLE(CAST(ITBOPERATINGUNIT AS GE_TYTBSTRING)) UO
                                             WHERE (OPERATING_UNIT_ID = UO.COLUMN_VALUE(+) AND UO.COLUMN_VALUE IS NULL)
                                             )
        OR ORDER_STATUS_ID != INUORDERSTATUSID;                                                             	
        
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELORTEMPORDERLISTOPERUNIT;
    
     



    FUNCTION RFORTEMPORDERLISTOPERUNIT
    (
        ITBOPERATINGUNIT    IN OUT NOCOPY GE_TYTBSTRING,
        INUORDERSTATUSID    IN OR_TEMP_ORDER_TO_LEG.ORDER_STATUS_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        RFCURSOR CONSTANTS.TYREFCURSOR;
    BEGIN

        OPEN RFCURSOR FOR
                SELECT OR_TEMP_ORDER_TO_LEG.*,OR_TEMP_ORDER_TO_LEG.ROWID
                FROM OR_TEMP_ORDER_TO_LEG, TABLE(CAST(ITBOPERATINGUNIT AS GE_TYTBSTRING)) UO
                WHERE OPERATING_UNIT_ID = TO_NUMBER(UO.COLUMN_VALUE)
                AND ORDER_STATUS_ID = INUORDERSTATUSID;
                	
        RETURN(RFCURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            IF (RFCURSOR%ISOPEN) THEN
                CLOSE RFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RFORTEMPORDERLISTOPERUNIT;

    
    FUNCTION FRFGETLASTEXECDATEFROMORDER
    (
        INUWFTASKTYPE     IN OR_WF_INTERFACE.WF_TASK_TYPE_ID%TYPE,
        INUEXTERNSYSTEMID IN OR_EXTERN_SYSTEMS_ID.EXTERN_SYSTEM_ID%TYPE,
        INUCLASSCAUSAL    IN GE_CAUSAL.CLASS_CAUSAL_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        SBSQL    VARCHAR2(4000);
        RFCURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        SBSQL := ' SELECT a.* '||
                 ' FROM   Or_Order a, '||
                 '        Or_Extern_Systems_Id b, '||
                 '        Or_WF_Interface c, '||
                 '        Ge_Causal d '||
                 ' WHERE  a.Order_Id = b.Order_Id '||
                 '   AND  a.Order_Id = c.Order_Id '||
                 '   AND  a.Causal_Id = d.Causal_Id '||
                 '   AND  WF_Task_Type_Id = :1 '||
                 '   AND  d.Class_Causal_Id = :2 '||
                 '   AND  b.Extern_System_Id = :3 '||
                 '   AND  Execution_Final_Date = ( '||
                                         ' SELECT MAX(execution_final_date) '||
                                         ' FROM   Or_Order a, '||
                                         '        Or_Extern_Systems_Id b, '||
                                         '        Or_WF_Interface c, '||
                                         '        Ge_Causal d '||
                                         ' WHERE  a.Order_Id = b.Order_Id '||
                                         '   AND  a.Order_Id = c.Order_Id '||
                                         '   AND  a.Causal_Id = d.Causal_Id '||
                                         '   AND  WF_Task_Type_Id = :4 '||
                                         '   AND  d.Class_Causal_Id = :5 '||
                                         '   AND  b.Extern_System_Id = :6) '||
                 '   AND rownum = 1';
        OPEN RFCURSOR FOR SBSQL USING INUWFTASKTYPE, INUCLASSCAUSAL,
                                      INUEXTERNSYSTEMID, INUWFTASKTYPE,
                                      INUCLASSCAUSAL, INUEXTERNSYSTEMID;
        RETURN RFCURSOR;
    EXCEPTION
        WHEN OTHERS THEN
    	    IF (RFCURSOR%ISOPEN) THEN
    	        CLOSE RFCURSOR;
    	    END IF;
      		ERRORS.SETERROR;
       		RAISE EX.CONTROLLED_ERROR;
    END FRFGETLASTEXECDATEFROMORDER;
    
    
    FUNCTION FRFGETMOTIVEORDERS
    (
        INUFATHEREXTSYSTEMID IN OR_EXTERN_SYSTEMS_ID.FATHE_EXTER_SYSTE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        RFCURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        IF CNUENTITYMOTIVEID IS NULL THEN
            CNUENTITYMOTIVEID  := GE_BOENTITY.FNUGETENTITY_ID('MO_MOTIVE');
        END IF;
        OPEN RFCURSOR FOR
            SELECT A.*, A.ROWID
		    FROM   OR_ORDER A,
                   OR_EXTERN_SYSTEMS_ID B
		    WHERE  A.ORDER_ID = B.ORDER_ID
		      AND  ((B.FATHE_EXTER_SYSTE_ID = INUFATHEREXTSYSTEMID AND B.FATHER_EXT_ENTITY_ID = CNUENTITYMOTIVEID)
                    OR (B.EXTERN_SYSTEM_ID  = INUFATHEREXTSYSTEMID AND B.EXTERN_ENTITY_ID = CNUENTITYMOTIVEID));
        RETURN(RFCURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            IF (RFCURSOR%ISOPEN) THEN
                CLOSE RFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETMOTIVEORDERS;
    
    FUNCTION FRFFIRSTORDER
    (
        INUOPERATINUNITID   IN OR_ORDER.OPERATING_UNIT_ID%TYPE,
        INUORDERSTATUSID    IN OR_ORDER.ORDER_STATUS_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        RFCURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN RFCURSOR FOR
            SELECT ROWID
		    FROM   OR_ORDER
		    WHERE  OPERATING_UNIT_ID = INUOPERATINUNITID
		      AND  ORDER_STATUS_ID   = INUORDERSTATUSID
              AND  ROWNUM <= 1;
        RETURN(RFCURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            IF (RFCURSOR%ISOPEN) THEN
                CLOSE RFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFFIRSTORDER;
    
    FUNCTION FRFORDEROFLISTOPERATINGUNIT
    (
        ITBOPERATINGUNIT    IN OUT NOCOPY GE_TYTBSTRING,
        INUORDERSTATUSID    IN OR_ORDER.ORDER_STATUS_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        RFCURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN RFCURSOR FOR
            SELECT ORD.*, ORD.ROWID
		    FROM   OR_ORDER ORD,
                   TABLE(CAST(ITBOPERATINGUNIT AS GE_TYTBSTRING)) UO
		    WHERE  ORD.OPERATING_UNIT_ID = TO_NUMBER(UO.COLUMN_VALUE)
		      AND  ORDER_STATUS_ID   = INUORDERSTATUSID;
        RETURN(RFCURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            IF (RFCURSOR%ISOPEN) THEN
                CLOSE RFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
   END FRFORDEROFLISTOPERATINGUNIT;

	FUNCTION FRFGETORDERSFROMINSTANCE
	(
	    INUWFTASKID IN OR_WF_INTERFACE.WF_TASK_ID%TYPE
	)
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        RFCURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN RFCURSOR FOR
            SELECT OR_ORDER.ORDER_ID, OR_ORDER.NUMERATOR_ID, OR_ORDER.SEQUENCE
            FROM OR_WF_INTERFACE, OR_ORDER
            WHERE OR_WF_INTERFACE.ORDER_ID =  OR_ORDER.ORDER_ID AND
                WF_TASK_ID = INUWFTASKID
            UNION
            SELECT OR_ORDER.ORDER_ID, OR_ORDER.NUMERATOR_ID, OR_ORDER.SEQUENCE
            FROM OR_ORDER_ACTIVITY, OR_ORDER
            WHERE OR_ORDER_ACTIVITY.ORDER_ID =  OR_ORDER.ORDER_ID AND
                OR_ORDER_ACTIVITY.INSTANCE_ID = INUWFTASKID;
        RETURN(RFCURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            IF (RFCURSOR%ISOPEN) THEN
                CLOSE RFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
   END FRFGETORDERSFROMINSTANCE;



    
    FUNCTION FNUGETCOUNTERORDERBYTASKTYPE
    (
        INUTASKTYPEID IN OR_ORDER.TASK_TYPE_ID%TYPE
    )
    RETURN NUMBER
    IS
        CURSOR CUORDERBYTASKTYPE
        (
            NUTASKTYPEID OR_ORDER.TASK_TYPE_ID%TYPE
        )
        IS
            SELECT COUNT(1)
            FROM OR_ORDER, OR_EXTERN_SYSTEMS_ID , TT_DAMAGE
            WHERE OR_ORDER.TASK_TYPE_ID = NUTASKTYPEID
              AND OR_ORDER.ORDER_ID = OR_EXTERN_SYSTEMS_ID.ORDER_ID
              AND OR_EXTERN_SYSTEMS_ID.PACKAGE_ID = TT_DAMAGE.PACKAGE_ID
              AND OR_ORDER.ORDER_STATUS_ID IN (6, 5, 0);

        RCORDERBYTASKTYPE   CUORDERBYTASKTYPE%ROWTYPE;
        NUCOUNTER  NUMBER;
    BEGIN
        IF CUORDERBYTASKTYPE%ISOPEN THEN
            CLOSE CUORDERBYTASKTYPE;
        END IF;

        OPEN CUORDERBYTASKTYPE(INUTASKTYPEID);
        FETCH CUORDERBYTASKTYPE INTO NUCOUNTER;
        CLOSE CUORDERBYTASKTYPE;
        RETURN NUCOUNTER;
        
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            IF (CUORDERBYTASKTYPE%ISOPEN) THEN
                CLOSE CUORDERBYTASKTYPE;
            END IF;
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            IF (CUORDERBYTASKTYPE%ISOPEN) THEN
                CLOSE CUORDERBYTASKTYPE;
            END IF;
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;

	END FNUGETCOUNTERORDERBYTASKTYPE;
	
	
   
   
   FUNCTION FRFGETORDERBYOPRSETASKTYSQNUM
   (
      INUOPERSECTORID  IN OR_ORDER.OPERATING_SECTOR_ID%TYPE,
      INUTASKTYPEID    IN OR_ORDER.TASK_TYPE_ID%TYPE,
      INUSEQUENCE      IN OR_ORDER.SEQUENCE%TYPE,
      INUNUMERATORID   IN OR_ORDER.NUMERATOR_ID%TYPE,
      ISBFILTER        IN VARCHAR := NULL
   )
   RETURN CONSTANTS.TYREFCURSOR
   IS
      RFWORKORDERS CONSTANTS.TYREFCURSOR;
      SBQUERYWORKORDERS VARCHAR(2000);
   BEGIN
      
      SBQUERYWORKORDERS :='SELECT  OR_order.order_id, OR_order.numerator_id '||
                          'numerator, OR_order.sequence sequence_id,'||
                          'OR_BOBasicDataServices.fsbGetDescTaskType(OR_order.task_type_id) task_type,'
                          ||'OR_BOBasicDataServices.fsbGetDescOperatinSector'||
                          '(OR_order.operating_sector_id) operating_sector, '||
                          'decode(OR_order.operating_unit_id,null,null,OR_order.'||
                          'operating_unit_id|| ''' || ' - ' || ''' ||OR_BOBasicDataServices.'
                          ||'fsbGetDescOperatingUnit(OR_order.operating_unit_id))'
                          ||' operating_unit, OR_order.arranged_hour,OR_order.order_status_id'
                          ||CHR(10)||'FROM OR_order'||CHR(10)||
                          'WHERE (OR_order.numerator_id=:inuNumeratorID or :inuNumeratorID is null)'
                          ||' and (OR_order.sequence=:inuSequence or :inuSequence is null)'
                          ||' and (OR_order.task_type_id=:inuTaskTypeID or :inuTaskTypeID is null)'
                          ||' and (OR_order.operating_sector_id=:inuOperSectorID or :inuOperSectorID is null)';

      
      IF (ISBFILTER IS NOT NULL) THEN
         SBQUERYWORKORDERS:=SBQUERYWORKORDERS||' and '||ISBFILTER;
      END IF;

      
      OPEN RFWORKORDERS FOR SBQUERYWORKORDERS USING INUNUMERATORID,INUNUMERATORID,
                                                    INUSEQUENCE, INUSEQUENCE,
                                                    INUTASKTYPEID, INUTASKTYPEID,
                                                    INUOPERSECTORID, INUOPERSECTORID;
      RETURN RFWORKORDERS;
   EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   
    FUNCTION FNUGETORDERIDBYNUMSEQ
    (
        INUNUMERATOR    IN  OR_ORDER.NUMERATOR_ID%TYPE,
        INUSEQUENCE     IN  OR_ORDER.SEQUENCE%TYPE
    ) RETURN NUMBER
    IS
        CURSOR  CUORDERIDBYNUMSE
        IS
        SELECT ORDER_ID FROM OR_ORDER
        WHERE NUMERATOR_ID = INUNUMERATOR
        AND SEQUENCE = INUSEQUENCE;

        
        NUORDERID  NUMBER;
    BEGIN

        
        IF (CUORDERIDBYNUMSE%ISOPEN) THEN
            CLOSE CUORDERIDBYNUMSE;
        END IF;

        OPEN CUORDERIDBYNUMSE;

        FETCH CUORDERIDBYNUMSE INTO NUORDERID;

        CLOSE CUORDERIDBYNUMSE;

        RETURN  NUORDERID;

	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            IF (CUORDERIDBYNUMSE%ISOPEN) THEN
                CLOSE CUORDERIDBYNUMSE;
            END IF;
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            IF (CUORDERIDBYNUMSE%ISOPEN) THEN
                CLOSE CUORDERIDBYNUMSE;
            END IF;
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;
	
	
























    FUNCTION FSBISORDERINFINALSTATUS
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE
    ) RETURN VARCHAR2
    IS
        CURSOR  CUISORDERINFINALSTATUS
        IS
        SELECT GE_BOCONSTANTS.CSBYES
        FROM OR_ORDER_STATUS, OR_ORDER
        WHERE OR_ORDER.ORDER_STATUS_ID = OR_ORDER_STATUS.ORDER_STATUS_ID
        AND OR_ORDER_STATUS.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBYES
        AND OR_ORDER.ORDER_ID = INUORDERID;

        
        SBFINAL  VARCHAR2(1);
    BEGIN
        
        IF (CUISORDERINFINALSTATUS%ISOPEN) THEN
            CLOSE CUISORDERINFINALSTATUS;
        END IF;

        OPEN CUISORDERINFINALSTATUS;

        FETCH CUISORDERINFINALSTATUS INTO SBFINAL;

        CLOSE CUISORDERINFINALSTATUS;

        IF SBFINAL <> GE_BOCONSTANTS.CSBYES OR SBFINAL IS NULL THEN
            SBFINAL := GE_BOCONSTANTS.CSBNO;
        END IF;
        RETURN  SBFINAL;
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            IF (CUISORDERINFINALSTATUS%ISOPEN) THEN
                CLOSE CUISORDERINFINALSTATUS;
            END IF;
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            IF (CUISORDERINFINALSTATUS%ISOPEN) THEN
                CLOSE CUISORDERINFINALSTATUS;
            END IF;
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;
	
	



















    FUNCTION FBLGETREGADMINORDERSBYDATE
    (
        IDTDATE         IN  DATE,
        INULASTORDER    IN  OR_ORDER.ORDER_ID%TYPE,
        OTBORDERS       OUT DAOR_ORDER.TYTBOR_ORDER
    )
    RETURN BOOLEAN
    IS
    
        BLMORERECORDS   BOOLEAN;
        NUBULKNUM       NUMBER := 100; 

        
        
        
        CURSOR CUREGORDERS
        (
            IDTMAXDATE  IN  DATE,
            INUMINORDER IN  OR_ORDER.ORDER_ID%TYPE
        )
        IS
        SELECT  OR_ORDER.*, OR_ORDER.ROWID
        FROM    OR_ORDER
        WHERE   OR_ORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED
        AND     OR_ORDER.ADM_PENDING = GE_BOCONSTANTS.CSBYES
        AND     OR_ORDER.MAX_DATE_TO_LEGALIZE <= IDTMAXDATE
        AND     OR_ORDER.ORDER_ID > INUMINORDER
        ORDER BY OR_ORDER.ORDER_ID;
    
    BEGIN
    
        IF CUREGORDERS%ISOPEN THEN
            CLOSE CUREGORDERS;
        END IF;
        
        BLMORERECORDS := TRUE;
        
        OPEN CUREGORDERS(IDTDATE, INULASTORDER);
        FETCH CUREGORDERS BULK COLLECT INTO OTBORDERS
        LIMIT NUBULKNUM;

        
        IF ( CUREGORDERS%NOTFOUND) THEN
            BLMORERECORDS := FALSE;
        END IF;
        
        CLOSE CUREGORDERS;
        
        RETURN BLMORERECORDS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUREGORDERS%ISOPEN THEN
                CLOSE CUREGORDERS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUREGORDERS%ISOPEN THEN
                CLOSE CUREGORDERS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    





















    PROCEDURE GETADDCOORDFORORDER
    (
        INUADDRESSID    IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        ONUX            OUT OR_ORDER.X%TYPE,
        ONUY            OUT OR_ORDER.Y%TYPE
    )
    IS
        NUPARSERRESULT  AB_ADDRESS.ADDRESS_ID%TYPE;

        CURSOR CUAB_ADDRESS
        (
            INUADDRESSID AB_ADDRESS.ADDRESS_ID%TYPE
        ) IS
        SELECT /*+ index ( ab_address IDX_AB_ADDRESS_08 ) */
              A.SHAPE.SDO_POINT.X,
              A.SHAPE.SDO_POINT.Y
         FROM AB_ADDRESS A
        WHERE A.ADDRESS_ID = INUADDRESSID
        AND   A.SHAPE IS NOT NULL;

    BEGIN

        OPEN CUAB_ADDRESS( INUADDRESSID );

        FETCH CUAB_ADDRESS INTO ONUX, ONUY;
        IF CUAB_ADDRESS%NOTFOUND THEN
            CLOSE CUAB_ADDRESS;
        END IF;

        IF CUAB_ADDRESS%ISOPEN THEN
           CLOSE CUAB_ADDRESS;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUAB_ADDRESS%ISOPEN THEN CLOSE CUAB_ADDRESS; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUAB_ADDRESS%ISOPEN THEN CLOSE CUAB_ADDRESS; END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETADDCOORDFORORDER;
    
    



















    FUNCTION FSBEXISTSORDERS
    (
        INUPACKAGEID    IN  OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
        INUMOTIVEID     IN  OR_ORDER_ACTIVITY.MOTIVE_ID%TYPE,
        INUCOMPONENTID  IN  OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE,
        ISBORDERSTATUS  IN  VARCHAR
    )
    RETURN VARCHAR2
    IS
        SBORDERSTATUS   VARCHAR2(50);
        TBSTATUS        UT_STRING.TYTB_STRING;
        SBSQL           VARCHAR2(5000);
        
        NURESULT        NUMBER;
        
        RFREFCURSOR     CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('Inicia fsbExistsOrders '||ISBORDERSTATUS,15);
        
        UT_STRING.EXTSTRING(ISBORDERSTATUS,',',TBSTATUS);

        SBORDERSTATUS := '';
        UT_TRACE.TRACE('tbStatus '||TBSTATUS.COUNT,15);
        
        FOR NUINDEX IN TBSTATUS.FIRST..TBSTATUS.LAST LOOP
            SBORDERSTATUS := SBORDERSTATUS||TBSTATUS(NUINDEX)||',';
        END LOOP;

        
        SBORDERSTATUS := SUBSTR(SBORDERSTATUS,1,INSTR(SBORDERSTATUS,',',-1)-1);
        
        
        SBSQL :=    'SELECT count(1) FROM OR_order_Activity , OR_order '||CHR(10)||
                    'WHERE OR_order.order_id =  OR_order_activity.order_id '||CHR(10)||
                    'AND OR_order.order_status_id IN ('||ISBORDERSTATUS||') ';

        IF INUPACKAGEID IS NOT NULL THEN
            SBSQL := SBSQL||CHR(10)||
                     'AND OR_order_Activity.package_id = '||INUPACKAGEID||' ';
        END IF;
        
        IF INUMOTIVEID IS NOT NULL THEN
            SBSQL := SBSQL||CHR(10)||
                     'AND OR_order_Activity.motive_id = '||INUMOTIVEID||' ';
        END IF;
        
        IF INUCOMPONENTID IS NOT NULL THEN
            SBSQL := SBSQL||CHR(10)||
                     'AND OR_order_Activity.component_id = '||INUCOMPONENTID;
        END IF;
        
        UT_TRACE.TRACE('SQL ['||SBSQL||']',15);
        
        OPEN RFREFCURSOR FOR SBSQL;

        FETCH RFREFCURSOR INTO NURESULT;
        
        CLOSE RFREFCURSOR;

        IF NURESULT > 0 THEN
            RETURN GE_BOCONSTANTS.CSBYES;
        END IF;

        RETURN GE_BOCONSTANTS.CSBNO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF(RFREFCURSOR%ISOPEN)THEN
                CLOSE RFREFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF(RFREFCURSOR%ISOPEN)THEN
                CLOSE RFREFCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FSBEXISTSORDERS;
   
    
















    FUNCTION FBLEXISPENDADMORDBYSUBS
    (
        INUSUBSCRIBERID IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUACTIVITYID   IN  OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        SBEXISTS    VARCHAR2(1);
    
        CURSOR CUEXISPENDADMORDERS
        IS
            SELECT 'Y'
              FROM OR_ORDER
             WHERE OR_ORDER.ADM_PENDING = GE_BOCONSTANTS.CSBYES
               AND OR_ORDER.SUBSCRIBER_ID = INUSUBSCRIBERID
            AND     EXISTS
            (
                    SELECT  'X'
                    FROM    OR_ORDER_ACTIVITY
                    WHERE   OR_ORDER_ACTIVITY.ORDER_ID = OR_ORDER.ORDER_ID
                    AND     OR_ORDER_ACTIVITY.ACTIVITY_ID = INUACTIVITYID
            )
            AND     ROWNUM = 1;

    BEGIN

        SBEXISTS := GE_BOCONSTANTS.CSBNO;

        IF(CUEXISPENDADMORDERS%ISOPEN)THEN
            CLOSE CUEXISPENDADMORDERS;
        END IF;

        OPEN    CUEXISPENDADMORDERS;
        FETCH   CUEXISPENDADMORDERS INTO SBEXISTS;
        CLOSE   CUEXISPENDADMORDERS;

        
        RETURN SBEXISTS = GE_BOCONSTANTS.CSBYES;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF(CUEXISPENDADMORDERS%ISOPEN)THEN
                CLOSE CUEXISPENDADMORDERS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF(CUEXISPENDADMORDERS%ISOPEN)THEN
                CLOSE CUEXISPENDADMORDERS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    FUNCTION FTBGETORDERSINFO
    (
        ITBSCHEDSID         IN  OR_TYTBSCHEDAVAILABLEID
    )RETURN OR_BCORDER.TYTBORDER
    IS
        TBORDERS    OR_BCORDER.TYTBORDER;

        CURSOR CUOPERUNITINFO IS
            SELECT /*+ ordered use_nl(or_order)
                       index(ge_subscriber PK_GE_SUBSCRIBER)
                       index(ab_address PK_AB_ADDRESS) */
                   OR_ORDER.ORDER_ID                    ORDERID,
                   OR_ORDER.TASK_TYPE_ID                TASKTYPEID,
                   OR_ORDER.OPERATING_UNIT_ID           OPERATINGUNIT,
                   OR_ORDER.ORDER_STATUS_ID             ORDERSTATUSID,
                   OR_ORDER.PROGRAMING_CLASS_ID         PROGRAMINGCLASSID,
                   OR_ORDER.ARRANGED_HOUR               ARRANGEDHOUR,
                   ORDER_SCHED.DURATION                 DURATIONTIME,
                   OR_ORDER.SUBSCRIBER_ID               CLIENTID,
                   GE_SUBSCRIBER.SUBSCRIBER_NAME||' '||
                   GE_SUBSCRIBER.SUBS_LAST_NAME         CLIENTNAME,
                   OR_ORDER.EXTERNAL_ADDRESS_ID         ADDRESSID,
                   AB_ADDRESS.ADDRESS                   ADDRESS,
                   GE_SUBSCRIBER.PHONE                  CLIENTPHONE,
                   OR_ORDER.CREATED_DATE                CREATIONDATE,
                   OR_ORDER.REPROGRAM_LAST_DATE         REPROGRAMLASTDATE,
                   OR_ORDER.PRIORITY                    PRIORITY,
                   ORDER_SCHED.OPERATING_ZONE_ID        ZONEID
              FROM (
                     SELECT /*+ ordered
                                use_nl(or_sched_available or_sched_programing)
                                index(or_sched_available PK_OR_SCHED_AVAILABLE)
                                index(or_sched_programing IDX_OR_SCHED_PROGRAMING_01)*/
                            OR_SCHED_AVAILABLE.OPERATING_ZONE_ID,
                            OR_SCHED_PROGRAMING.DURATION,
                            OR_SCHED_PROGRAMING.ORDER_ID
                       FROM TABLE(CAST(ITBSCHEDSID AS OR_TYTBSCHEDAVAILABLEID)) SCHED,
                            OR_SCHED_AVAILABLE,
                            OR_SCHED_PROGRAMING
                      WHERE OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID = SCHED.SCHED_AVAILABLE_ID
                        AND OR_SCHED_PROGRAMING.SCHED_AVAILABLE_ID = OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID
                        AND OR_SCHED_AVAILABLE.STATUS = OR_BCDISPATCH.CSBAVAILNOTPROCESSED
                        AND OR_SCHED_PROGRAMING.PROGRAMING_STATUS IN (OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED,
                                                                      OR_BOCONSTANTS.CSBPROGSTATUSOVERLOAD)
                     UNION
                     SELECT /*+ ordered
                                use_nl(or_sched_available or_sched_dispatch)
                                index(or_sched_available PK_OR_SCHED_AVAILABLE)
                                index(or_sched_dispatch IDX_OR_SCHED_DISPATCH_05)*/
                            OR_SCHED_AVAILABLE.OPERATING_ZONE_ID,
                            OR_SCHED_DISPATCH.DURATION,
                            OR_SCHED_DISPATCH.ORDER_ID
                       FROM TABLE(CAST(ITBSCHEDSID AS OR_TYTBSCHEDAVAILABLEID)) SCHED,
                            OR_SCHED_AVAILABLE,
                            OR_SCHED_DISPATCH
                      WHERE OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID = SCHED.SCHED_AVAILABLE_ID
                        AND OR_SCHED_DISPATCH.OPERATING_ZONE_ID = OR_SCHED_AVAILABLE.OPERATING_ZONE_ID
                        AND OR_SCHED_DISPATCH.OPERATING_UNIT_ID = OR_SCHED_AVAILABLE.OPERATING_UNIT_ID
                        AND OR_SCHED_DISPATCH.SCHEDULER_ID = OR_SCHED_AVAILABLE.SCHEDULER_ID
                        AND OR_SCHED_DISPATCH.DATE_ = OR_SCHED_AVAILABLE.DATE_
                        AND OR_SCHED_AVAILABLE.STATUS <> OR_BCDISPATCH.CSBAVAILNOTPROCESSED
                        AND  OR_SCHED_DISPATCH.DISPATCH_STATUS IN ( OR_BOCONSTANTS.CSBDISPATCHSTATUSOCCUPIED,
                                                                    OR_BOCONSTANTS.CSBDISPATCHSTATUSOVERLOAD,
                                                                    OR_BOCONSTANTS.CSBDISPATCHSTATUSMOVING,
                                                                    OR_BOCONSTANTS.CSBDISPATCHSTATUSEXECUTING )
                   ) ORDER_SCHED,
                   OR_ORDER,
                   GE_SUBSCRIBER,
                   AB_ADDRESS
             WHERE OR_ORDER.ORDER_ID = ORDER_SCHED.ORDER_ID
               AND OR_ORDER.SUBSCRIBER_ID = GE_SUBSCRIBER.SUBSCRIBER_ID (+)
               AND OR_ORDER.EXTERNAL_ADDRESS_ID = AB_ADDRESS.ADDRESS_ID (+)
               AND OR_ORDER.ORDER_STATUS_ID IN (OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED,
                                                OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                                                OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING,
                                                OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING
                                               );

        RCORDER     CUOPERUNITINFO%ROWTYPE;
    BEGIN
        IF CUOPERUNITINFO%ISOPEN THEN
            CLOSE CUOPERUNITINFO;
        END IF;
        
        OPEN CUOPERUNITINFO;
        LOOP
            FETCH CUOPERUNITINFO INTO RCORDER;
        EXIT WHEN CUOPERUNITINFO%NOTFOUND;
            TBORDERS(RCORDER.ORDERID).ORDERID           := RCORDER.ORDERID;
            TBORDERS(RCORDER.ORDERID).TASKTYPEID        := RCORDER.TASKTYPEID;
            TBORDERS(RCORDER.ORDERID).OPERATINGUNIT     := RCORDER.OPERATINGUNIT;
            TBORDERS(RCORDER.ORDERID).ORDERSTATUSID     := RCORDER.ORDERSTATUSID;
            TBORDERS(RCORDER.ORDERID).PROGRAMINGCLASSID := RCORDER.PROGRAMINGCLASSID;
            TBORDERS(RCORDER.ORDERID).ARRANGEDHOUR      := RCORDER.ARRANGEDHOUR;
            TBORDERS(RCORDER.ORDERID).DURATIONTIME      := RCORDER.DURATIONTIME;
            TBORDERS(RCORDER.ORDERID).CLIENTID          := RCORDER.CLIENTID;
            TBORDERS(RCORDER.ORDERID).CLIENTNAME        := RCORDER.CLIENTNAME;
            TBORDERS(RCORDER.ORDERID).ADDRESSID         := RCORDER.ADDRESSID;
            TBORDERS(RCORDER.ORDERID).ADDRESS           := RCORDER.ADDRESS;
            TBORDERS(RCORDER.ORDERID).CLIENTPHONE       := RCORDER.CLIENTPHONE;
            TBORDERS(RCORDER.ORDERID).CREATIONDATE      := RCORDER.CREATIONDATE;
            TBORDERS(RCORDER.ORDERID).REPROGRAMLASTDATE := RCORDER.REPROGRAMLASTDATE;
            TBORDERS(RCORDER.ORDERID).PRIORITY          := RCORDER.PRIORITY;
            TBORDERS(RCORDER.ORDERID).ZONEID            := RCORDER.ZONEID;
        END LOOP;
        CLOSE CUOPERUNITINFO;
        
        RETURN TBORDERS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUOPERUNITINFO%ISOPEN THEN
                CLOSE CUOPERUNITINFO;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUOPERUNITINFO%ISOPEN THEN
                CLOSE CUOPERUNITINFO;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETORDERSINFO;
    
    























    PROCEDURE GETORDERINFO (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        ONUTASKTYPEID       OUT OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ONUTASKTYPECLASSIF  OUT GE_TASK_CLASS.TASK_CLASS_ID%TYPE,
        ONUADMINBASEID      OUT GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
        ODTEXECUTIONDATE    OUT OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
        ONUPROJECTID        OUT PM_PROJECT.PROJECT_ID%TYPE,
        ONUOPERUNITID       OUT OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ONUASSOOPEUNI       OUT OR_OPERATING_UNIT.ASSO_OPER_UNIT%TYPE
    )
    IS
        CURSOR CUORDERINFO IS
            SELECT OR_ORDER.TASK_TYPE_ID,
                   OR_TASK_TYPE.TASK_TYPE_CLASSIF,
                   OR_OPERATING_UNIT.ADMIN_BASE_ID,
                   OR_ORDER.EXECUTION_FINAL_DATE,
                   PM_STAGE.PROJECT_ID,
                   OR_ORDER.OPERATING_UNIT_ID,
                   OR_OPERATING_UNIT.ASSO_OPER_UNIT
              FROM OR_ORDER, PM_STAGE, OR_TASK_TYPE, OR_OPERATING_UNIT
             WHERE OR_ORDER.STAGE_ID = PM_STAGE.STAGE_ID (+)
               AND OR_ORDER.TASK_TYPE_ID = OR_TASK_TYPE.TASK_TYPE_ID
               AND OR_ORDER.OPERATING_UNIT_ID = OR_OPERATING_UNIT.OPERATING_UNIT_ID (+)
               AND OR_ORDER.ORDER_ID = INUORDERID;
    BEGIN
        OPEN CUORDERINFO;

        FETCH CUORDERINFO INTO
            ONUTASKTYPEID,
            ONUTASKTYPECLASSIF,
            ONUADMINBASEID,
            ODTEXECUTIONDATE,
            ONUPROJECTID,
            ONUOPERUNITID,
            ONUASSOOPEUNI;

        CLOSE CUORDERINFO;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUORDERINFO%ISOPEN THEN
                CLOSE CUORDERINFO;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUORDERINFO%ISOPEN THEN
                CLOSE CUORDERINFO;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERINFO;
    
    




















    PROCEDURE GETORDERSFORANULL
    (
        INUPACKAGEID    IN  OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
        INUMOTIVEID     IN  OR_ORDER_ACTIVITY.MOTIVE_ID%TYPE,
        INUCOMPONENTID  IN  OR_ORDER_ACTIVITY.COMPONENT_ID%TYPE,
        ISBORDERSTATUS  IN  VARCHAR,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBSQL           VARCHAR2(5000);
    BEGIN
        UT_TRACE.TRACE('Inicia OR_BCORDER.GetOrdersForAnull',15);

        SBSQL :=    'SELECT OR_order.ORDER_id '||CHR(10)||
                    'FROM OR_order_Activity , OR_order, or_order_status '||CHR(10)||
                    'WHERE or_order_status.order_status_id = OR_order.order_status_id '||CHR(10)||
                    'AND or_order_status.is_final_status = '''|| GE_BOCONSTANTS.CSBNO ||''''||CHR(10)||
                    'AND OR_order.order_id =  OR_order_activity.order_id '||CHR(10)||
                    'AND OR_order.order_status_id not IN ('||ISBORDERSTATUS||') ';

        IF INUPACKAGEID IS NOT NULL THEN
            SBSQL := SBSQL||CHR(10)||
                     'AND OR_order_Activity.package_id = '||INUPACKAGEID||' ';
        END IF;

        IF INUMOTIVEID IS NOT NULL THEN
            SBSQL := SBSQL||CHR(10)||
                     'AND OR_order_Activity.motive_id = '||INUMOTIVEID||' ';
        END IF;

        IF INUCOMPONENTID IS NOT NULL THEN
            SBSQL := SBSQL||CHR(10)||
                     'AND OR_order_Activity.component_id = '||INUCOMPONENTID;
        END IF;

        UT_TRACE.TRACE('SQL ['||SBSQL||']',15);

        OPEN ORFREFCURSOR FOR SBSQL;

        UT_TRACE.TRACE('Finaliza OR_BCORDER.GetOrdersForAnull',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            IF (ORFREFCURSOR%ISOPEN) THEN
                CLOSE ORFREFCURSOR;
            END IF;
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            IF (ORFREFCURSOR%ISOPEN) THEN
                CLOSE ORFREFCURSOR;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
















    FUNCTION FBLORDERHASACTIVITY
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUACTIVITYID       IN  GE_ITEMS.ITEMS_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        SBSELECTION VARCHAR2(1);

        CURSOR CUACTIVITIES
        IS
            SELECT 'X'
            FROM   OR_ORDER_ACTIVITY
            WHERE  OR_ORDER_ACTIVITY.ORDER_ID = INUORDERID
              AND  OR_ORDER_ACTIVITY.ACTIVITY_ID = INUACTIVITYID
              AND  ROWNUM < 2;
    BEGIN
        OPEN CUACTIVITIES;
        FETCH CUACTIVITIES INTO SBSELECTION;
        CLOSE CUACTIVITIES;

        IF (SBSELECTION IS NULL) THEN
            RETURN FALSE;
        ELSE
            RETURN TRUE;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUACTIVITIES%ISOPEN) THEN
                CLOSE CUACTIVITIES;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUACTIVITIES%ISOPEN) THEN
                CLOSE CUACTIVITIES;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLORDERHASACTIVITY;
    
    















    FUNCTION FBLEXISPENDADMORDBYOPEUNI
    (
        INUOPEUNITID IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUACTIVITYID IN OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        SBEXISTS    VARCHAR2(1);
    BEGIN

        SBEXISTS := GE_BOCONSTANTS.CSBNO;

        IF(CUPENDADMORDERBYOPEUNI%ISOPEN) THEN
            CLOSE CUPENDADMORDERBYOPEUNI;
        END IF;

        OPEN  CUPENDADMORDERBYOPEUNI(INUOPEUNITID, INUACTIVITYID);
        FETCH CUPENDADMORDERBYOPEUNI INTO SBEXISTS;
        CLOSE CUPENDADMORDERBYOPEUNI;

        
        RETURN SBEXISTS = GE_BOCONSTANTS.CSBYES;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF(CUPENDADMORDERBYOPEUNI%ISOPEN) THEN
                CLOSE CUPENDADMORDERBYOPEUNI;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF(CUPENDADMORDERBYOPEUNI%ISOPEN) THEN
                CLOSE CUPENDADMORDERBYOPEUNI;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
    


















    FUNCTION FNUGETORDBYPACKACT
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUACTIVITYID   IN  OR_ACTIVIDAD.ID_ACTIVIDAD%TYPE,
        ISBFINALSTATUS  IN  OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE
    )
    RETURN OR_ORDER.ORDER_ID%TYPE
    IS
        NUORDERID   OR_ORDER.ORDER_ID%TYPE;
        CURSOR CUORDERBYPACKAGE
        (
            INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
            INUACTIVITYID   IN  OR_ACTIVIDAD.ID_ACTIVIDAD%TYPE,
            ISBFINALSTATUS  IN  OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE
        )
        IS
            SELECT  /*+ index(or_order_activity IDX_OR_ORDER_ACTIVITY_06)
                        index(or_order pk_order)
                        index(or_order_status pk_or_order_status)
                    */
                    OR_ORDER_ACTIVITY.ORDER_ID
            FROM    OR_ORDER_ACTIVITY,
                    OR_ORDER,
                    OR_ORDER_STATUS
                    /*+ OR_bcOrder.fnuGetOrdbyPackAct */
            WHERE   OR_ORDER_ACTIVITY.ACTIVITY_ID = INUACTIVITYID
            AND     OR_ORDER_ACTIVITY.PACKAGE_ID = INUPACKAGEID
            AND     OR_ORDER_ACTIVITY.ORDER_ID = OR_ORDER.ORDER_ID
            AND     OR_ORDER.ORDER_STATUS_ID = OR_ORDER_STATUS.ORDER_STATUS_ID
            AND     OR_ORDER_STATUS.IS_FINAL_STATUS = ISBFINALSTATUS;
    BEGIN
        OPEN CUORDERBYPACKAGE(INUPACKAGEID, INUACTIVITYID, ISBFINALSTATUS);
        FETCH CUORDERBYPACKAGE INTO NUORDERID;
        CLOSE CUORDERBYPACKAGE;

        RETURN NUORDERID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUORDERBYPACKAGE%ISOPEN THEN
                CLOSE CUORDERBYPACKAGE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUORDERBYPACKAGE%ISOPEN THEN
                CLOSE CUORDERBYPACKAGE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETORDBYPACKACT;

    














    FUNCTION FSBGETORDERSERIALEQU
    (
        INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
    )
    RETURN GE_ITEMS_SERIADO.SERIE%TYPE
    IS
        SBSERIE GE_ITEMS_SERIADO.SERIE%TYPE;

        CURSOR CUSERIALBYORDER
        (
            INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
        )
        IS
           SELECT   /*+ index(or_order_activity IDX_OR_ORDER_ACTIVITY_05)
                        index(ge_items_seriado pk_ge_items_seriado) */
                    GE_ITEMS_SERIADO.SERIE
            FROM    OR_ORDER_ACTIVITY, GE_ITEMS_SERIADO
                    /*+ OR_BCOrder.fsbGetOrderSerialEqu */
            WHERE   OR_ORDER_ACTIVITY.ORDER_ID = INUORDERID
            AND     OR_ORDER_ACTIVITY.SERIAL_ITEMS_ID = GE_ITEMS_SERIADO.ID_ITEMS_SERIADO;
    BEGIN
        IF (CUSERIALBYORDER%ISOPEN) THEN
            CLOSE CUSERIALBYORDER;
        END IF;

        OPEN  CUSERIALBYORDER(INUORDERID);
        FETCH CUSERIALBYORDER INTO SBSERIE;
        CLOSE CUSERIALBYORDER;

        RETURN SBSERIE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUSERIALBYORDER%ISOPEN) THEN
                CLOSE CUSERIALBYORDER;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CUSERIALBYORDER%ISOPEN) THEN
                CLOSE CUSERIALBYORDER;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETORDERSERIALEQU;
    
    














    PROCEDURE GETREGORDERSBYPACK
    (
        INUPACKGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ISBACTIVITIES   IN  VARCHAR2,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN
        UT_TRACE.TRACE('-- INICIA OR_BCORDER.GetRegOrdersByPack',10);
        
        OPEN ORFREFCURSOR
        FOR
        'SELECT /*+ Ordered */
            OR_order.*, OR_order.rowid
            FROM OR_order_activity, OR_order
            /*+ OR_BCORDER.GetOrdersByPack SAO178270 */
            WHERE OR_order.order_id = OR_order_activity.order_id
            AND OR_order.order_status_id = :cnuORDER_STAT_REGISTERED
            AND OR_order_activity.activity_id in ('||ISBACTIVITIES||')
            AND OR_order_activity.package_id = :inupackgeId'
            USING OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED, INUPACKGEID;
            
        UT_TRACE.TRACE('-- FINALIZA OR_BCORDER.GetRegOrdersByPack',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] OR_BCORDER.GetRegOrdersByPack',10);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS ERROR] OR_BCORDER.GetRegOrdersByPack',10);
            RAISE EX.CONTROLLED_ERROR;
    END GETREGORDERSBYPACK;
    
    














    PROCEDURE GETREGORDERSBYMOTIVE
    (
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        ISBACTIVITIES   IN  VARCHAR2,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN
        UT_TRACE.TRACE('-- INICIA OR_BCORDER.GetRegOrdersByMotive -->'||INUMOTIVEID,10);

        OPEN ORFREFCURSOR
        FOR
        'SELECT /*+ Ordered
                    index(or_order_activity IDX_OR_ORDER_ACTIVITY_07)
                    index(or_order PK_OR_ORDER) */
            or_order.*, or_order.rowid
            FROM or_order_activity, or_order
            /*+ OR_BCORDER.GetRegOrdersByMotive SAO1221735 */
            WHERE or_order.order_id = or_order_activity.order_id
            AND or_order.order_status_id = :cnuORDER_STAT_REGISTERED
            AND or_order_activity.activity_id in ('||ISBACTIVITIES||')
            AND or_order_activity.motive_id = :inuMotiveId'
            USING OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED, INUMOTIVEID;

        UT_TRACE.TRACE('-- FINALIZA OR_BCORDER.GetRegOrdersByMotive',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('[CONTROLLED ERROR] OR_BCORDER.GetRegOrdersByMotive',10);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('[OTHERS ERROR] OR_BCORDER.GetRegOrdersByMotive',10);
            RAISE EX.CONTROLLED_ERROR;
    END GETREGORDERSBYMOTIVE;

    






    PROCEDURE GETORDERBASICDATA
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        ORFORDERDATA    OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFORDERDATA);

        OPEN ORFORDERDATA
        FOR
            SELECT  /*+ index (OR_order pk_OR_order)
                        use_nl (or_operating_sector or_operating_unit or_order_status OR_task_type)
                    */
                    OR_ORDER.ORDER_STATUS_ID,
                    OR_ORDER_STATUS.DESCRIPTION STATUSDESCRIPTION,
                    OR_ORDER.TASK_TYPE_ID,
                    OR_TASK_TYPE.DESCRIPTION TASKTYPEDESCRIPTION,
                    OR_ORDER.OPERATING_UNIT_ID,
                    OR_OPERATING_UNIT.NAME OPERUNITNAME,
                    OR_ORDER.OPERATING_SECTOR_ID ,
                    OR_OPERATING_SECTOR.DESCRIPTION OPERSECDESCRIPTION
            FROM    OR_ORDER,
                    OR_TASK_TYPE,
                    OR_ORDER_STATUS,
                    OR_OPERATING_UNIT,
                    OR_OPERATING_SECTOR /*+ OR_BCORDER.GetOrderBasicData SAO189774 */
            WHERE   OR_ORDER.ORDER_ID = INUORDERID
            AND     OR_ORDER.TASK_TYPE_ID = OR_TASK_TYPE.TASK_TYPE_ID
            AND     OR_ORDER.ORDER_STATUS_ID = OR_ORDER_STATUS.ORDER_STATUS_ID
            AND     OR_ORDER.OPERATING_SECTOR_ID = OR_OPERATING_SECTOR.OPERATING_SECTOR_ID
            AND     OR_ORDER.OPERATING_UNIT_ID = OR_OPERATING_UNIT.OPERATING_UNIT_ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFORDERDATA);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFORDERDATA);
            RAISE EX.CONTROLLED_ERROR;
    END;


    


























    FUNCTION FSBGETORDEREXISTENCE
    (
        ISBACTIVITIES   VARCHAR2,
        INUCAUSAL       OR_ORDER.CAUSAL_ID%TYPE,
        INUPRODUCT      SERVSUSC.SESUNUSE%TYPE,
        INUINITIALDATE  OR_ORDER.LEGALIZATION_DATE%TYPE,
        IDTREADINGDATE  OR_ORDER.LEGALIZATION_DATE%TYPE
    )
    RETURN OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE

    IS
        SBQUERY              GE_BOUTILITIES.STYSTATEMENT;
        CUREFCURSOR          PKCONSTANTE.TYREFCURSOR;
        SBFLAG               OR_ORDER_STATUS.IS_FINAL_STATUS%TYPE;

    BEGIN

        SBQUERY := ' SELECT
                     /*+ index (a IDX_OR_ORDER_ACTIVITY_010)
                         use_nl_with_index (b PK_OR_ORDER) */
                             ''x''
                     FROM
                             or_order_activity a,
                             or_order b
                     WHERE   b.order_id         = a.order_id
                     AND     a.product_id       = :inuProduct
                     AND     a.activity_id      in ( ' ||  ISBACTIVITIES  || ' )
                     AND     a.status           = :FinishStatus
                     AND     b.order_status_id  = :closedStatus
                     AND     b.legalization_date between :inuInitialDate AND :idtReadingDate
                     AND     rownum             = 1 ';
                     
        IF  (INUCAUSAL IS NOT NULL ) THEN
            SBQUERY := SBQUERY || 'AND     b.causal_id = :inuCausal';
            
            OPEN CUREFCURSOR FOR SBQUERY USING  INUPRODUCT, OR_BOCONSTANTS.CSBFINISHSTATUS, OR_BOCONSTANTS.CNUORDER_STAT_CLOSED, INUINITIALDATE , IDTREADINGDATE,
                                       INUCAUSAL;
        ELSE
        
            OPEN CUREFCURSOR FOR SBQUERY USING INUPRODUCT, OR_BOCONSTANTS.CSBFINISHSTATUS, OR_BOCONSTANTS.CNUORDER_STAT_CLOSED, INUINITIALDATE , IDTREADINGDATE;
        
        END IF;

        FETCH CUREFCURSOR INTO SBFLAG;
        CLOSE CUREFCURSOR;

        RETURN SBFLAG;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETORDEREXISTENCE;
    
    


















    FUNCTION FSBISVALIDSTATEORDER
    (
        INUORDERID    IN  OR_ORDER.ORDER_ID%TYPE
    )   RETURN VARCHAR2
    IS
        RFVALIDSTATE    CONSTANTS.TYREFCURSOR;
        NUVALIDSTATE    NUMBER;

    BEGIN

        IF (RFVALIDSTATE%ISOPEN) THEN
    	        CLOSE RFVALIDSTATE;
    	    END IF;

        OPEN RFVALIDSTATE FOR
            SELECT 1
                FROM OR_ORDER
                /*+ OR_BCORDER.fsbIsValidStateOrder SAO182730 */
                WHERE OR_ORDER.ORDER_ID= INUORDERID
                AND (
                        OR_ORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED
                    OR
                        (
                            OR_ORDER.ORDER_STATUS_ID IN
                                            (
                                                OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                                                OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED
                                            )
                            AND EXISTS
                                (
                                SELECT OR_SCHED_PROGRAMING.ORDER_ID
                                    FROM OR_SCHED_PROGRAMING,
                                         OR_SCHED_AVAILABLE
                                    WHERE OR_SCHED_PROGRAMING.SCHED_AVAILABLE_ID = OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID
                                    AND OR_SCHED_AVAILABLE.DATE_ > UT_DATE.FDTSYSDATE
                                    AND OR_SCHED_PROGRAMING.ORDER_ID = INUORDERID
                                    AND OR_SCHED_PROGRAMING.PROGRAMING_STATUS IN
                                                        (
                                                            OR_BOCONSTANTS.CSBPROGSTATUSOCCUPIED,
                                                            OR_BOCONSTANTS.CSBPROGSTATUSOVERLOAD
                                                        )
                                )
                        )
                    )
                AND ROWNUM=1;

                FETCH RFVALIDSTATE INTO NUVALIDSTATE;

                IF (RFVALIDSTATE%ISOPEN) THEN
        	        CLOSE RFVALIDSTATE;
        	    END IF;

        	    IF (NUVALIDSTATE IS NOT NULL) THEN
                    RETURN OR_BOCONSTANTS.CSBSI;
                ELSE
                    RETURN OR_BOCONSTANTS.CSBNO;
                END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (RFVALIDSTATE%ISOPEN) THEN
    	        CLOSE RFVALIDSTATE;
    	    END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (RFVALIDSTATE%ISOPEN) THEN
    	        CLOSE RFVALIDSTATE;
    	    END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBISVALIDSTATEORDER;
    
    

































    PROCEDURE FINDORDERS
    (
        INUCONTRACTORID     IN      GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUOPERUNITID       IN      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUCONTRACTID       IN      GE_CONTRATO.ID_CONTRATO%TYPE,
        INUSUBSCRIBERID     IN      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
        INUTASKTYPEID       IN      OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUORDERSTATUSID    IN      OR_ORDER_STATUS.ORDER_STATUS_ID%TYPE,
        IDTINITREGDATE      IN      OR_ORDER.CREATED_DATE%TYPE,
        IDTENDREGDATE       IN      OR_ORDER.CREATED_DATE%TYPE,
        IDTINITEXECDATE     IN      OR_ORDER.EXEC_INITIAL_DATE%TYPE,
        IDTENDEXECDATE      IN      OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
        IBOINCLUDENOVELTY   IN      BOOLEAN,
        ORFORDERDATA        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        SBCRITERIA              GE_BOUTILITIES.STYSBINPUTSEARCH;
        SBSQL                   GE_BOUTILITIES.STYSBINPUTSEARCH;
        SBUSING                 GE_BOUTILITIES.STYSTATEMENT;
        SBRECORDBIND            GE_BOUTILITIES.STYSTATEMENT;
        SBFROM                  GE_BOUTILITIES.STYSTATEMENT;
        SBFROMADDITIONAL        GE_BOUTILITIES.STYSTATEMENT;
        SBATTRIBUTES            GE_BOUTILITIES.STYSTATEMENT;
        SBCONTRACTORATTRIBUTE   GE_BOUTILITIES.STYSTATEMENT;
        SBHINTS                 GE_BOUTILITIES.STYSTATEMENT;
        SBAND                   GE_BOUTILITIES.STYSTATEMENT;
        CUCURSOR                CONSTANTS.TYREFCURSOR;
    BEGIN

        UT_TRACE.TRACE('BEGIN OR_bcOrder.FindOrders', 2);

        UT_TRACE.TRACE('Param: inuContractorId -> ' || INUCONTRACTORID || CHR(10) ||
            '        Param: inuOperUnitId -> ' || INUOPERUNITID || CHR(10) ||
            '        Param: inuContractId -> ' || INUCONTRACTID || CHR(10) ||
            '        Param: inuSubscriberId -> ' || INUSUBSCRIBERID || CHR(10) ||
            '        Param: inuTaskTypeId -> ' || INUTASKTYPEID || CHR(10) ||
            '        Param: inuOrderStatusId -> ' || INUORDERSTATUSID || CHR(10) ||
            '        Param: idtInitRegDate -> ' || TO_CHAR(IDTINITREGDATE, UT_DATE.FSBDATE_FORMAT) || CHR(10) ||
            '        Param: idtEndRegDate -> ' || TO_CHAR(IDTENDREGDATE, UT_DATE.FSBDATE_FORMAT) || CHR(10) ||
            '        Param: idtInitExecDate -> ' || TO_CHAR(IDTINITEXECDATE, UT_DATE.FSBDATE_FORMAT) || CHR(10) ||
            '        Param: idtEndExecDate -> ' || TO_CHAR(IDTENDEXECDATE, UT_DATE.FSBDATE_FORMAT) || CHR(10) ||
            '        Param: iboIncludeNovelty -> '|| (CASE WHEN IBOINCLUDENOVELTY = TRUE THEN 'TRUE' ELSE 'FALSE' END), 3);

        SBAND := '';
        
        
        IF ( INUCONTRACTORID IS NOT NULL ) THEN
           SBCONTRACTORATTRIBUTE := '        (SELECT ge_contratista.id_contratista || '''' - '''' || ge_contratista.nombre_contratista FROM ge_contratista WHERE ge_contratista.id_contratista = nvl(ge_acta.contractor_id, or_operating_unit.contractor_id) ) contractor,';
        ELSE
           SBCONTRACTORATTRIBUTE := '        (SELECT ge_contratista.id_contratista || '''' - '''' || ge_contratista.nombre_contratista FROM ge_contratista WHERE ge_contratista.id_contratista = nvl(ge_acta.contractor_id,  (SELECT h.contractor_id FROM OR_operating_unit h WHERE h.operating_unit_id = or_order.operating_unit_id) ) ) contractor,';
        END IF;

        
        SBATTRIBUTES :=
            '         or_order.order_id order_id,' || CHR(10) ||
                      SBCONTRACTORATTRIBUTE || CHR(10) ||
            '         ge_acta.id_contrato contract,' || CHR(10) ||
            '        (SELECT OR_operating_unit.operating_unit_id || '''' - '''' || OR_operating_unit.name  FROM OR_operating_unit WHERE OR_operating_unit.operating_unit_id =  or_order.operating_unit_id ) operating_unit,' || CHR(10) ||
            '        (SELECT ge_subscriber.subscriber_id || '''' - '''' || ge_subscriber.subscriber_name || ''''  '''' || ge_subscriber.subs_last_name FROM ge_subscriber WHERE ge_subscriber.subscriber_id = or_order.subscriber_id) subscriber,' || CHR(10) ||
            '        (SELECT or_task_type.task_type_id || '''' - '''' || or_task_type.description FROM or_task_type WHERE or_task_type.task_type_id = or_order.task_type_id) task_type,' || CHR(10) ||
            '        (SELECT or_order_status.order_status_id|| '''' - '''' || or_order_status.description FROM OR_order_status WHERE OR_order_status.order_status_id = or_order.order_status_id) order_status,' || CHR(10) ||
            '         or_order.created_date created_date,' || CHR(10) ||
            '         or_order.exec_initial_date exec_initial_date,' || CHR(10) ||
            '         or_order.execution_final_date execution_final_date,' || CHR(10) ||
            '        (SELECT ab_address.address_id || '''' - ''''|| ab_address.address_parsed FROM ab_address WHERE ab_address.address_id =  or_order.external_address_id) address,' || CHR(10) ||
            '        (SELECT OR_operating_sector.operating_sector_id || '''' - '''' || OR_operating_sector.description FROM OR_operating_sector WHERE OR_operating_sector.operating_sector_id = Or_order.operating_sector_id ) operating_sector' || CHR(10);

        
        SBHINTS :=   CHR(10);
        SBHINTS := SBHINTS ||
             '            use_nl(or_order, ct_order_certifica, ge_acta, ab_address)' || CHR(10) ||
             '            index(ct_order_certifica idx_ct_order_certifica01)' || CHR(10);


         
        SBFROM := SBFROM ||
            '         or_order' || CHR(10) ||
            '        ,ct_order_certifica' || CHR(10) ||
            '        ,ge_acta' || CHR(10);
            
        IF (IBOINCLUDENOVELTY = FALSE) THEN
            
            SBCRITERIA := SBCRITERIA || SBAND ||
            'not exists' || CHR(10) ||
            '(' || CHR(10) ||
            '    SELECT  /*+' || CHR(10) ||
            '                index(or_order_activity idx_or_order_activity_05)' || CHR(10) ||
            '            */' || CHR(10) ||
            '            or_order_activity.order_id' || CHR(10) ||
            '    FROM    or_order_activity' || CHR(10) ||
            '            ,ct_item_novelty ' || CHR(10) ||
            '    WHERE   or_order_activity.activity_id = ct_item_novelty.items_id ' || CHR(10) ||
            '    AND     or_order.order_id = or_order_activity.order_id ' || CHR(10) ||
            ')' || CHR(10);
            SBAND := 'AND     ';
        END IF;

         IF (INUCONTRACTID IS NOT NULL) THEN

            
            SBCRITERIA := SBCRITERIA || SBAND || 'ct_order_certifica.certificate_id = ge_acta.id_acta' || CHR(10);
            SBAND := 'AND     ';
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.order_id = ct_order_certifica.order_id' || CHR(10);

        ELSE
            
            SBCRITERIA := SBCRITERIA || SBAND || 'ct_order_certifica.certificate_id = ge_acta.id_acta(+)' || CHR(10);
            SBAND := 'AND     ';
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.order_id = ct_order_certifica.order_id(+)' || CHR(10);
        END IF;
            
        
        IF ( INUCONTRACTORID IS NOT NULL) THEN
            SBFROM := SBFROM ||
            '        ,or_operating_unit' || CHR(10);
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.operating_unit_id = OR_operating_unit.operating_unit_id' || CHR(10);
            SBAND := 'AND     ';
            SBCRITERIA := SBCRITERIA || SBAND || 'or_operating_unit.contractor_id = :inuContractorId' || CHR(10);
            SBHINTS := SBHINTS || '            index(or_operating_unit idx_or_operating_unit10)' || CHR(10);
            SBUSING := SBUSING || '''' || INUCONTRACTORID || ''', ';
            SBAND := 'AND     ';
        END IF;

        
        IF ( INUOPERUNITID IS NOT NULL) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.operating_unit_id = :inuOperUnitId' || CHR(10);
            SBHINTS := SBHINTS || '            index(or_order idx_or_order_3)' || CHR(10);
            SBUSING := SBUSING || '''' || INUOPERUNITID || ''', ';
            SBAND := 'AND     ';
        END IF;

         
        IF ( INUCONTRACTID IS NOT NULL) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'ge_acta.id_contrato = :inuContractId' || CHR(10);
            SBHINTS := SBHINTS ||
                '            index(ge_acta idx_ge_acta_01)' || CHR(10) ||
                '            use_nl(or_order, ct_order_certifica, ge_acta)' || CHR(10);
            SBUSING := SBUSING || '''' || INUCONTRACTID || ''', ';
            SBAND := 'AND     ';
        END IF;

        
        IF ( INUSUBSCRIBERID IS NOT NULL) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.subscriber_id = :inuSubscriberId' || CHR(10);
            SBUSING := SBUSING || '''' || INUSUBSCRIBERID || ''', ';
            SBAND := 'AND     ';
        END IF;

        
        IF (INUTASKTYPEID IS NOT NULL) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.task_type_id = :inuTaskTypeId' || CHR(10);
            SBHINTS := SBHINTS || '            index(or_order idx_or_order_012)' || CHR(10);
            SBUSING := SBUSING || '''' || INUTASKTYPEID || ''', ';
            SBAND := 'AND     ';
        END IF;

        
        IF (INUORDERSTATUSID IS NOT NULL) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.order_status_id = :inuOrderStatusId' || CHR(10);
            SBUSING := SBUSING || '''' || INUORDERSTATUSID || ''', ';
            SBAND := 'AND     ';
        END IF;

        
        IF (IDTINITREGDATE IS NOT NULL) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.created_date >= :idtInitRegDate' || CHR(10);
            SBUSING := SBUSING || 'to_date(''' || TO_CHAR(IDTINITREGDATE, UT_DATE.FSBDATE_FORMAT) || ''', ut_date.fsbDATE_FORMAT), ';
            SBAND := 'AND     ';
        END IF;

        
        IF (IDTENDREGDATE IS NOT NULL) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.created_date <= :idtEndRegDate' || CHR(10);
            SBUSING := SBUSING || 'to_date(''' || TO_CHAR(IDTENDREGDATE, UT_DATE.FSBDATE_FORMAT) || ''', ut_date.fsbDATE_FORMAT), ';
            SBAND := 'AND     ';
        END IF;

        
        IF (IDTINITEXECDATE IS NOT NULL) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.exec_initial_date >= :idtInitExecDate' || CHR(10);
            SBUSING := SBUSING || 'to_date(''' || TO_CHAR(IDTINITEXECDATE, UT_DATE.FSBDATE_FORMAT) || ''', ut_date.fsbDATE_FORMAT), ';
            SBAND := 'AND     ';
        END IF;

        
        IF (IDTENDEXECDATE IS NOT NULL) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'or_order.execution_final_date <= :idtEndExecDate' || CHR(10);
            SBUSING := SBUSING || 'to_date(''' || TO_CHAR(IDTENDEXECDATE, UT_DATE.FSBDATE_FORMAT) || ''', ut_date.fsbDATE_FORMAT), ';
            SBAND := 'AND     ';
        END IF;

        
        IF(CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_AUX_ROLE) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'ct_bocontrsecurity.fnuCanManageContract(or_order.defined_contract_id) = 1 ';
            SBAND := 'AND     ';
        ELSIF (CT_BOCONTRSECURITY.SBMYCURRENTROLE = CT_BOCONSTANTS.CSBCONTR_ADMIN_ROLE) THEN
            SBCRITERIA := SBCRITERIA || SBAND || 'ct_bocontrsecurity.fnuCanManageContractor(or_operating_unit.contractor_id) = 1 ';
            SBAND := 'AND     ';
        END IF;
        
        
        SBCRITERIA := SBCRITERIA || SBAND || ' rownum < ' || CNUMAXORDERSTORETURN;

        SBUSING := SUBSTR(SBUSING, 0, (LENGTH(SBUSING)-2));

        SBSQL :=
            'SELECT' || CHR(10) ||
            '        /*+' ||
                            SBHINTS  ||
            '        */' || CHR(10) ||
            SBATTRIBUTES ||
            'FROM /*+ OR_bcOrder.FindOrders SAO188477 */ ' || CHR(10) || SBFROM || SBFROMADDITIONAL ||
            'WHERE   ' || SBCRITERIA;



        SBRECORDBIND := 'BEGIN Open :cuCursor for ''' || SBSQL || ''' using ' || SBUSING || ';  END;';

        UT_TRACE.TRACE('Sentencia:' || CHR(10) || SBRECORDBIND, 3);
        
         EXECUTE IMMEDIATE SBRECORDBIND USING CUCURSOR;

        ORFORDERDATA := CUCURSOR;

        UT_TRACE.TRACE('END OR_bcOrder.FindOrders', 2);

    END FINDORDERS;
    
    




















    FUNCTION FRCGETWITHDRAWALACT
    (
        ISBSERIE          IN  GE_ITEMS_SERIADO.SERIE%TYPE
    )
    RETURN DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY
    IS
        RCORDERACTIVITY DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        CURSOR CUORDERACTINFO IS
            SELECT /*+ ordered use_nl (ge_items_attributes) */ OR_ORDER_ACTIVITY.*, OR_ORDER_ACTIVITY.ROWID
            FROM MO_COMPONENT,
                 MO_MOTIVE,
                 OR_ORDER_ACTIVITY,
                 GE_ITEMS_ATTRIBUTES,
                 OR_ORDER,
                 PS_MOTIVE_STATUS
                 /*+ OR_bcOrder.frcWithdrawalAct SAO181024 */
            WHERE MO_COMPONENT.SERVICE_NUMBER = ISBSERIE
            AND MO_MOTIVE.MOTIVE_ID = MO_COMPONENT.MOTIVE_ID
            AND OR_ORDER_ACTIVITY.COMPONENT_ID = MO_COMPONENT.COMPONENT_ID
            AND MO_MOTIVE.MOTIVE_STATUS_ID = PS_MOTIVE_STATUS.MOTIVE_STATUS_ID
            AND (OR_ORDER_ACTIVITY.INSTANCE_ID IS NULL
                OR
                    (
                        PS_MOTIVE_STATUS.IS_FINAL_STATUS = OR_BOCONSTANTS.CSBNO
                    AND
                        OR_ORDER_ACTIVITY.INSTANCE_ID IS NOT NULL
                    )
                )
            AND OR_ORDER_ACTIVITY.ORDER_ID = OR_ORDER.ORDER_ID
            AND OR_ORDER.ORDER_STATUS_ID IN (OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED,
                                             OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED,
                                             OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                                             OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING,
                                             OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING)
            AND OR_ORDER_ACTIVITY.MOTIVE_ID = MO_MOTIVE.MOTIVE_ID
            AND GE_ITEMS_ATTRIBUTES.ITEMS_ID = OR_ORDER_ACTIVITY.ACTIVITY_ID
            AND CNUSERIALRECOVERYATT       IN (GE_ITEMS_ATTRIBUTES.ATTRIBUTE_1_ID,
                                              GE_ITEMS_ATTRIBUTES.ATTRIBUTE_2_ID,
                                              GE_ITEMS_ATTRIBUTES.ATTRIBUTE_3_ID,
                                              GE_ITEMS_ATTRIBUTES.ATTRIBUTE_4_ID);
    BEGIN
    
        UT_TRACE.TRACE('INICIO OR_BCORDER.frcGetWithdrawalAct. isbSerie: '||ISBSERIE, 2 );
        
            IF CNUSERIALRECOVERYATT IS NULL THEN
                CNUSERIALRECOVERYATT := GE_BCATTRIBUTES.FNUGETATTRIDBYNAME('RECUPERAR_SERIADO');
            END IF;

        OPEN CUORDERACTINFO;

        FETCH CUORDERACTINFO INTO RCORDERACTIVITY;
        CLOSE CUORDERACTINFO;

        UT_TRACE.TRACE('FIN OR_BCORDER.frcGetWithdrawalAct', 2 );
        RETURN RCORDERACTIVITY;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUORDERACTINFO%ISOPEN THEN
                CLOSE CUORDERACTINFO;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUORDERACTINFO%ISOPEN THEN
                CLOSE CUORDERACTINFO;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRCGETWITHDRAWALACT;
    
     


















    PROCEDURE  GETORDERSASSIGN
    (
        INUOPERUNITID   IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBTASKTYPEUSE  IN OR_TASK_TYPE.USE_%TYPE,
        ORFASSIGNORDERS   OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN

        IF (ISBTASKTYPEUSE IS NULL) THEN
            OPEN ORFASSIGNORDERS FOR
            SELECT /*+ leading(OR_order)
                       use_nl(OR_order OR_order_Activity)
                       use_nl(OR_order_Activity ge_items)
                       use_nl(OR_order OR_task_type)
                       use_nl(OR_order or_operating_sector)
                       index(OR_order IDX_OR_ORDER_3)
                       index(OR_order_Activity IDX_OR_ORDER_ACTIVITY_05) */
                OR_ORDER.ORDER_ID,
                OR_ORDER.ORDER_STATUS_ID,
                OR_ORDER.TASK_TYPE_ID,
                OR_TASK_TYPE.DESCRIPTION TASK_TYPE,
                OR_ORDER_ACTIVITY.ACTIVITY_ID,
                GE_ITEMS.DESCRIPTION ACTIVITY_DESC,
                OR_ORDER_ACTIVITY.PACKAGE_ID ,
                OR_ORDER.PRIORITY,
                TT_BCBASICDATASERVICES.FSBGETDESCGEOLOCBYADDR(OR_ORDER.EXTERNAL_ADDRESS_ID) LOCATION,
                OR_OPERATING_SECTOR.OPERATING_SECTOR_ID || CHR(32) || CHR(45) || CHR(32) || OR_OPERATING_SECTOR.DESCRIPTION SECTOR,
                TT_BCBASICDATASERVICES.FSBGETADDRESS(OR_ORDER.EXTERNAL_ADDRESS_ID) ADDRESS
            FROM OR_ORDER,
                 OR_ORDER_ACTIVITY,
                 GE_ITEMS,
                 OR_TASK_TYPE,
                 OR_OPERATING_SECTOR
                 /*+ OR_BCOrder.GetOrdersAssign SAO204585 */
            WHERE OR_ORDER.OPERATING_UNIT_ID = INUOPERUNITID
            AND OR_ORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED
            AND OR_ORDER.ORDER_ID = OR_ORDER_ACTIVITY.ORDER_ID
            AND OR_ORDER_ACTIVITY.ACTIVITY_ID = GE_ITEMS.ITEMS_ID
            AND OR_ORDER.TASK_TYPE_ID = OR_TASK_TYPE.TASK_TYPE_ID
            AND OR_ORDER.OPERATING_SECTOR_ID = OR_OPERATING_SECTOR.OPERATING_SECTOR_ID
            ORDER BY OR_ORDER.PRIORITY;

        ELSIF(ISBTASKTYPEUSE = OR_BCCONSTANTS.CSBCLIENT_MAINTENA_USE)THEN
            OPEN ORFASSIGNORDERS FOR
            SELECT /*+ leading(OR_order)
                       use_nl(OR_order OR_order_Activity)
                       use_nl(OR_order_Activity ge_items)
                       use_nl(OR_order OR_task_type)
                       use_nl(OR_order or_operating_sector)
                       index(OR_order IDX_OR_ORDER_3)
                       index(OR_order_Activity IDX_OR_ORDER_ACTIVITY_05) */
                OR_ORDER.ORDER_ID,
                OR_ORDER.ORDER_STATUS_ID,
                OR_ORDER.TASK_TYPE_ID,
                OR_TASK_TYPE.DESCRIPTION TASK_TYPE,
                OR_ORDER_ACTIVITY.ACTIVITY_ID,
                GE_ITEMS.DESCRIPTION ACTIVITY_DESC,
                OR_ORDER_ACTIVITY.PACKAGE_ID ,
                OR_ORDER.PRIORITY,
                TT_BCBASICDATASERVICES.FSBGETDESCGEOLOCBYADDR(OR_ORDER.EXTERNAL_ADDRESS_ID) LOCATION,
                OR_OPERATING_SECTOR.OPERATING_SECTOR_ID || CHR(32) || CHR(45) || CHR(32) || OR_OPERATING_SECTOR.DESCRIPTION SECTOR,
                TT_BCBASICDATASERVICES.FSBGETADDRESS(OR_ORDER.EXTERNAL_ADDRESS_ID) ADDRESS
            FROM OR_ORDER,
                 OR_ORDER_ACTIVITY,
                 GE_ITEMS,
                 OR_TASK_TYPE,
                 OR_OPERATING_SECTOR
                 /*+ OR_BCOrder.GetOrdersAssign SAO204585 */
            WHERE OR_ORDER.OPERATING_UNIT_ID = INUOPERUNITID
            AND OR_ORDER.ORDER_STATUS_ID IN (OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED, OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING)
            AND OR_ORDER.ORDER_ID = OR_ORDER_ACTIVITY.ORDER_ID
            AND OR_ORDER_ACTIVITY.PACKAGE_ID IS NOT NULL
            AND OR_ORDER_ACTIVITY.ACTIVITY_ID = GE_ITEMS.ITEMS_ID
            AND GE_ITEMS.USE_ IN (OR_BCCONSTANTS.CSBCLIENT_MAINTENA_USE, OR_BCCONSTANTS.CSBDIAGNOSTICUSE)
            AND OR_ORDER.TASK_TYPE_ID = OR_TASK_TYPE.TASK_TYPE_ID
            AND OR_ORDER.OPERATING_SECTOR_ID = OR_OPERATING_SECTOR.OPERATING_SECTOR_ID
            ORDER BY OR_ORDER.PRIORITY;
        END IF;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ORFASSIGNORDERS%ISOPEN THEN
                CLOSE ORFASSIGNORDERS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ORFASSIGNORDERS%ISOPEN THEN
                CLOSE ORFASSIGNORDERS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END  GETORDERSASSIGN;
    
    
     





















    PROCEDURE GETNEXTORDER
    (
        INUOPERATINGUNITID  IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUOPERATINGZONE    IN  OR_OPERATING_ZONE.OPERATING_ZONE_ID%TYPE,
        IDTDATE             IN  OR_SCHED_AVAILABLE.DATE_%TYPE,
        INUAVAILABLEID      IN  OR_SCHED_AVAILABLE.SCHED_AVAILABLE_ID%TYPE,
        ISBROLEXCEPTION     IN  OR_SCHED_AVAILABLE.ROL_EXCEPTION_FLAG%TYPE,
        ISBTASKTYPEUSE      IN  OR_TASK_TYPE.USE_%TYPE,
        OTBORDER_ROWID      OUT DAOR_ORDER.TYTBROWID
    )
    IS
        DTTRUNCDATE DATE;
        
        CURSOR CUNEXTORDER
        IS
            WITH SECTORS AS
            (
                SELECT /*+ index(ge_sectorope_zona IDX_GE_SECTOROPE_ZONA_01)*/
                         ID_SECTOR_OPERATIVO
                    FROM GE_SECTOROPE_ZONA
                WHERE ID_ZONA_OPERATIVA = INUOPERATINGZONE
            ),
            TASKTYPES AS
            (
             SELECT TASK_TYPE_ID FROM OR_OPE_UNI_TASK_TYPE WHERE OPERATING_UNIT_ID = INUOPERATINGUNITID
            ),
            ORDERS AS (
            SELECT /*+ ordered index(OR_order IDX_OR_ORDER_012) */
                OR_ORDER.*
            FROM TASKTYPES, OR_ORDER, SECTORS
            /*+ OR_BCOrder.GetNextOrder SAO180890*/
            WHERE OR_ORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED
            AND OR_ORDER.TASK_TYPE_ID = TASKTYPES.TASK_TYPE_ID
            AND OR_ORDER.OPERATING_SECTOR_ID = SECTORS.ID_SECTOR_OPERATIVO)

            SELECT OR_ORDER.ROWID
            FROM ORDERS, OR_ORDER
            WHERE OR_ORDER.ORDER_ID = ORDERS.ORDER_ID
            AND (SELECT OR_BCSCHED.FSBISVALIDACTORDER(ISBROLEXCEPTION,INUAVAILABLEID,ORDERS.ORDER_ID, INUOPERATINGUNITID)
                FROM DUAL )= GE_BOCONSTANTS.GETYES
            AND ROWNUM < 100
            ORDER BY ORDERS.PRIORITY
            FOR UPDATE  SKIP LOCKED;
        
        
        CURSOR CUNEXTORDERBYUSE
        IS
            SELECT ROWID
            FROM   OR_ORDER
            WHERE  ROWID IN
                (WITH SECTORS AS
                    (
                    SELECT ID_SECTOR_OPERATIVO
                        FROM GE_SECTOROPE_ZONA
                    WHERE ID_ZONA_OPERATIVA = INUOPERATINGZONE
                    ),
                    TASKTYPES AS
                    (
                     SELECT TASK_TYPE_ID
                       FROM OR_OPE_UNI_TASK_TYPE
                      WHERE OPERATING_UNIT_ID = INUOPERATINGUNITID
                    )
                SELECT ROWID
                FROM (
                    SELECT /*+  ordered
                                index(OR_order IDX_OR_ORDER_012)
                                index(OR_order_Activity IDX_OR_ORDER_ACTIVITY_05)
                                index(ge_items pk_ge_items)
                            */
                          OR_ORDER.ROWID
                     FROM SECTORS, TASKTYPES, OR_ORDER, OR_ORDER_ACTIVITY, GE_ITEMS
                           /*+ Ubicaci�n 2: OR_BCOrder.GetNextOrder SAO183881*/
                    WHERE OR_ORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED
                    AND OR_ORDER.TASK_TYPE_ID = TASKTYPES.TASK_TYPE_ID
                    AND OR_ORDER.OPERATING_SECTOR_ID = SECTORS.ID_SECTOR_OPERATIVO
                    AND OR_ORDER_ACTIVITY.ORDER_ID = OR_ORDER.ORDER_ID
                    AND OR_ORDER_ACTIVITY.PACKAGE_ID IS NOT NULL
                    AND GE_ITEMS.ITEMS_ID = OR_ORDER_ACTIVITY.ACTIVITY_ID
                    AND GE_ITEMS.USE_ IN (OR_BCCONSTANTS.CSBCLIENT_MAINTENA_USE, OR_BCCONSTANTS.CSBDIAGNOSTICUSE)
                    AND (SELECT OR_BCSCHED.FSBISVALIDACTORDER(ISBROLEXCEPTION,INUAVAILABLEID,OR_ORDER.ORDER_ID, INUOPERATINGUNITID) FROM DUAL )= GE_BOCONSTANTS.GETYES
                    ORDER BY OR_ORDER.PRIORITY
                    )
                WHERE ROWNUM < 100
                )
            FOR UPDATE  SKIP LOCKED;
    BEGIN
    
        DTTRUNCDATE := TRUNC(UT_DATE.FDTGETDATETIMEADDMINUTES(IDTDATE, 30));
        
        IF (ISBTASKTYPEUSE IS NULL) THEN
            IF CUNEXTORDER%ISOPEN THEN
                CLOSE CUNEXTORDER;
            END IF;

            OPEN CUNEXTORDER();
            FETCH CUNEXTORDER INTO OTBORDER_ROWID(OTBORDER_ROWID.COUNT);
            CLOSE CUNEXTORDER;
            
        ELSIF(ISBTASKTYPEUSE = OR_BCCONSTANTS.CSBCLIENT_MAINTENA_USE)THEN
            IF CUNEXTORDERBYUSE%ISOPEN THEN
                CLOSE CUNEXTORDERBYUSE;
            END IF;

            OPEN CUNEXTORDERBYUSE;
            FETCH CUNEXTORDERBYUSE INTO OTBORDER_ROWID(OTBORDER_ROWID.COUNT);
            CLOSE CUNEXTORDERBYUSE;
            
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUNEXTORDER%ISOPEN THEN
                CLOSE CUNEXTORDER;
            END IF;
            
            IF (CUNEXTORDERBYUSE%ISOPEN) THEN
                CLOSE CUNEXTORDERBYUSE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUNEXTORDER%ISOPEN THEN
                CLOSE CUNEXTORDER;
            END IF;
            IF (CUNEXTORDERBYUSE%ISOPEN) THEN
                CLOSE CUNEXTORDERBYUSE;
            END IF;

            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNEXTORDER;
    
     















    PROCEDURE  GETORDERBYROWID
    (
        IRWORDER_ROWID  IN  ROWID,
        ORFASSIGNORDERS OUT CONSTANTS.TYREFCURSOR
    )
    IS

    BEGIN
            OPEN ORFASSIGNORDERS FOR
            SELECT /*+ leading(OR_order)
                       use_nl(OR_order OR_order_Activity)
                       use_nl(OR_order_Activity ge_items)
                       use_nl(OR_order OR_task_type)
                       use_nl(OR_order or_operating_sector)
                       index(OR_order_Activity IDX_OR_ORDER_ACTIVITY_05) */
                OR_ORDER.ORDER_ID,
                OR_ORDER.ORDER_STATUS_ID,
                OR_ORDER.TASK_TYPE_ID,
                OR_TASK_TYPE.DESCRIPTION TASK_TYPE,
                OR_ORDER_ACTIVITY.ACTIVITY_ID,
                GE_ITEMS.DESCRIPTION ACTIVITY_DESC,
                OR_ORDER_ACTIVITY.PACKAGE_ID ,
                OR_ORDER.PRIORITY,
                TT_BCBASICDATASERVICES.FSBGETDESCGEOLOCBYADDR(OR_ORDER.EXTERNAL_ADDRESS_ID) LOCATION,
                OR_OPERATING_SECTOR.OPERATING_SECTOR_ID || CHR(32) || CHR(45) || CHR(32) || OR_OPERATING_SECTOR.DESCRIPTION SECTOR,
                TT_BCBASICDATASERVICES.FSBGETADDRESS(OR_ORDER.EXTERNAL_ADDRESS_ID) ADDRESS
            FROM OR_ORDER,
                 OR_ORDER_ACTIVITY,
                 GE_ITEMS,
                 OR_TASK_TYPE,
                 OR_OPERATING_SECTOR
                 /*+ OR_BCOrder.GetOrderByRowid SAO204585 */
            WHERE OR_ORDER.ROWID = IRWORDER_ROWID
            AND OR_ORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED
            AND OR_ORDER.ORDER_ID = OR_ORDER_ACTIVITY.ORDER_ID
            AND OR_ORDER_ACTIVITY.ACTIVITY_ID = GE_ITEMS.ITEMS_ID
            AND OR_ORDER.TASK_TYPE_ID = OR_TASK_TYPE.TASK_TYPE_ID
            AND OR_ORDER.OPERATING_SECTOR_ID = OR_OPERATING_SECTOR.OPERATING_SECTOR_ID
            ORDER BY OR_ORDER.PRIORITY;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ORFASSIGNORDERS%ISOPEN THEN
                CLOSE ORFASSIGNORDERS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ORFASSIGNORDERS%ISOPEN THEN
                CLOSE ORFASSIGNORDERS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END  GETORDERBYROWID;



    

















    FUNCTION FNUEXISTPENDINGORDERS
    (
        INUPRODUCTID    IN OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE,
        ISBACTIVITIES   IN VARCHAR2
    ) RETURN NUMBER
    IS
        NUCOUNT NUMBER:= 0;

        CURSOR CUGETPENDORDERS
        IS
        SELECT 1
            FROM OR_ORDER_ACTIVITY, OR_ORDER
        WHERE OR_ORDER_ACTIVITY.PRODUCT_ID = INUPRODUCTID
            AND INSTR(ISBACTIVITIES, ','||OR_ORDER_ACTIVITY.ACTIVITY_ID||',') > 0
            AND OR_ORDER.ORDER_ID = OR_ORDER_ACTIVITY.ORDER_ID
            AND OR_ORDER.ORDER_STATUS_ID NOT IN (8,12)
            AND ROWNUM = 1;

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF( CUGETPENDORDERS%ISOPEN) THEN
                CLOSE CUGETPENDORDERS;
            END IF;
        END;

    BEGIN
        UT_TRACE.TRACE('Init OR_BCORDER.fnuExistPendingOrders',5);

        OPEN CUGETPENDORDERS;
        FETCH CUGETPENDORDERS INTO NUCOUNT;
        CLOSE CUGETPENDORDERS;

        UT_TRACE.TRACE('END OR_BCORDER.fnuExistPendingOrders',5);
        RETURN  NUCOUNT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSORS;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            CLOSECURSORS;
            RAISE EX.CONTROLLED_ERROR;
    END FNUEXISTPENDINGORDERS;

    

















    PROCEDURE UPDSAVECONTRORDERDATA
    (
      INUORDER              OR_ORDER.ORDER_ID%TYPE,
      ISBSAVEDDATAVALUES    OR_ORDER.SAVED_DATA_VALUES%TYPE,
      INUCONTRACT_ID        OR_ORDER.DEFINED_CONTRACT_ID%TYPE
    )
    IS

    BEGIN
        UT_TRACE.TRACE('Init OR_BCORDER.updSaveContrOrderData',5);

        UPDATE OR_ORDER
        SET  SAVED_DATA_VALUES   = ISBSAVEDDATAVALUES,
             DEFINED_CONTRACT_ID = INUCONTRACT_ID
        WHERE ORDER_ID = INUORDER;

        UT_TRACE.TRACE('END OR_BCORDER.updSaveContrOrderData',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDSAVECONTRORDERDATA;
    
    
BEGIN
    CNUENTITYMOTIVEID  := GE_BOENTITY.FNUGETENTITY_ID('MO_MOTIVE');
    CNUENTITYCOMPONENT := GE_BOENTITY.FNUGETENTITY_ID('MO_COMPONENT');
END OR_BCORDER;