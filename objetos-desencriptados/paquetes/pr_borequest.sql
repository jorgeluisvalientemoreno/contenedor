CREATE OR REPLACE PACKAGE BODY PR_BOREQUEST IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO45887';
   RCCOMPONENTREQUEST DAPR_COMPONENT_REQUEST.STYPR_COMPONENT_REQUEST;
   RCPRODUCTREQUEST DAPR_PRODUCT_REQUEST.STYPR_PRODUCT_REQUEST;
   GLOBAL_PROCESSREQUEST BOOLEAN := TRUE;
   CURSOR CUCOMPREQUEST( INUPRCOMPONENTID IN PR_COMPONENT_REQUEST.COMPONENT_ID%TYPE, INUMOTIVEID IN PR_COMPONENT_REQUEST.MOTIVE_ID%TYPE, INUMOTIVETYPEID IN PR_COMPONENT_REQUEST.MOTIVE_TYPE_ID%TYPE ) IS
SELECT a.*, a.rowid
       FROM pr_component_request a
      WHERE component_id = inuPrComponentId
        AND motive_id = inuMotiveId
        AND motive_type_id = inuMotiveTypeId;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE SETPROCESSREQUEST( IBLPROCESSREQUEST IN BOOLEAN )
    IS
    BEGIN
      GLOBAL_PROCESSREQUEST := IBLPROCESSREQUEST;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION GETPROCESSREQUEST
    RETURN BOOLEAN
    IS
    BEGIN
      RETURN ( GLOBAL_PROCESSREQUEST );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETPRODUCTREQUESTINSTANCE
    IS
    BEGIN
      PR_BOUTIL.TRACE( '.. >> Seteando Instancia Petición Producto' );
      RCPRODUCTREQUEST.PRODUCT_REQUEST_ID := PR_BOSEQUENCE.GETPRODUCTREQUESTID;
      RCPRODUCTREQUEST.STATUS_ID := MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT;
      RCPRODUCTREQUEST.ATTENDANCE_DATE := SYSDATE;
      RCPRODUCTREQUEST.PRODUCT_ID := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID );
      IF RCPRODUCTREQUEST.PRODUCT_ID IS NULL THEN
         ERRORS.SETERROR( PR_BOCONSTANTS.CNUPRIDNOIN );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      RCPRODUCTREQUEST.PACKAGE_ID := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'PACKAGE_ID' );
      RCPRODUCTREQUEST.MOTIVE_ID := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'MOTIVE_ID' );
      RCPRODUCTREQUEST.MOTIVE_TYPE_ID := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'MOTIVE_TYPE_ID' );
      RCPRODUCTREQUEST.CUST_CARE_REQUES_NUM := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'CUST_CARE_REQUES_NUM' );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PROCESSPRODUCTREQUEST
    IS
    BEGIN
      PR_BOUTIL.TRACE( '.. >>>>> DENTRO DE ProcessProductRequest <<<<<<<' );
      IF ( PR_BOREQUEST.GETPROCESSREQUEST ) THEN
         SETPRODUCTREQUESTINSTANCE;
         DAPR_PRODUCT_REQUEST.INSRECORD( RCPRODUCTREQUEST );
       ELSE
         PR_BOUTIL.TRACE( '.. No estoy entrando GetProcessRequest ' );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETCOMPONENTREQUESTINSTANCE
    IS
    BEGIN
      PR_BOUTIL.TRACE( '.. >> Seteando Instancia Petición Componente' );
      RCCOMPONENTREQUEST.COMPONENT_REQUEST_ID := PR_BOSEQUENCE.GETCOMPONENTREQUESTID;
      RCCOMPONENTREQUEST.STATUS_ID := MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_COMP;
      RCCOMPONENTREQUEST.ATTENDANCE_DATE := SYSDATE;
      RCCOMPONENTREQUEST.COMPONENT_ID := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID );
      IF RCCOMPONENTREQUEST.COMPONENT_ID IS NULL THEN
         ERRORS.SETERROR( PR_BOCONSTANTS.CNUCOIDNOIN );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      RCCOMPONENTREQUEST.PACKAGE_ID := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'PACKAGE_ID' );
      RCCOMPONENTREQUEST.MOTIVE_ID := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_ID' );
      RCCOMPONENTREQUEST.MOTIVE_TYPE_ID := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_TYPE_ID' );
      RCCOMPONENTREQUEST.MO_COMPONENT_ID := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MO_COMPONENT_ID' );
      RCCOMPONENTREQUEST.CUST_CARE_REQUES_NUM := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'CUST_CARE_REQUES_NUM' );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PROCESSCOMPONENTREQUEST
    IS
    BEGIN
      IF ( PR_BOREQUEST.GETPROCESSREQUEST ) THEN
         SETCOMPONENTREQUESTINSTANCE;
         DAPR_COMPONENT_REQUEST.INSRECORD( RCCOMPONENTREQUEST );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE MAKEREQUESTCOMP_TO_PROD( INUTMPACTIONID IN PR_TMP_ACTION.TMP_ACTION_ID%TYPE, INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    IS
      NUATRID GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE := NULL;
      SBVALUE PR_TMP_ACTION_ATR.VALUE%TYPE := NULL;
    BEGIN
      PR_BOUTIL.TRACE( '.. >> Generando Petición de Producto a partir de Petición de Componente' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'PRODUCT_REQUEST_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, PR_BOSEQUENCE.GETPRODUCTREQUESTID );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'STATUS_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'STATUS_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'ATTENDANCE_DATE' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'ATTENDANCE_DATE' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'PRODUCT_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, INUPRODUCTID );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'PACKAGE_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'PACKAGE_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'MOTIVE_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_TYPE_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'MOTIVE_TYPE_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'CUST_CARE_REQUES_NUM' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'CUST_CARE_REQUES_NUM' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE MAKEREQUESTCOMP_TO_COMP( INUTMPACTIONID IN PR_TMP_ACTION.TMP_ACTION_ID%TYPE, INUCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE )
    IS
      NUATRID GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE := NULL;
      SBVALUE PR_TMP_ACTION_ATR.VALUE%TYPE := NULL;
    BEGIN
      PR_BOUTIL.TRACE( '.. >> Generando Petición de Componente a partir de Petición de Componente' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'COMPONENT_REQUEST_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, PR_BOSEQUENCE.GETCOMPONENTREQUESTID );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'STATUS_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'STATUS_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'ATTENDANCE_DATE' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'ATTENDANCE_DATE' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'COMPONENT_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, INUCOMPONENTID );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'PACKAGE_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'PACKAGE_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MO_COMPONENT_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MO_COMPONENT_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_TYPE_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_TYPE_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'CUST_CARE_REQUES_NUM' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'CUST_CARE_REQUES_NUM' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE MAKEREQUESTPROD_TO_COMP( INUTMPACTIONID IN PR_TMP_ACTION.TMP_ACTION_ID%TYPE, INUCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE )
    IS
      NUATRID GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE := NULL;
      SBVALUE PR_TMP_ACTION_ATR.VALUE%TYPE := NULL;
    BEGIN
      PR_BOUTIL.TRACE( '.. >> Generando Petición de Componente a partir de Petición de Producto ' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'COMPONENT_REQUEST_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, PR_BOSEQUENCE.GETCOMPONENTREQUESTID );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'STATUS_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'STATUS_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'ATTENDANCE_DATE' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'ATTENDANCE_DATE' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'COMPONENT_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, INUCOMPONENTID );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'PACKAGE_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'PACKAGE_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'MOTIVE_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'MOTIVE_TYPE_ID' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'MOTIVE_TYPE_ID' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
      SBVALUE := PR_BOATTRIBUTES.GETVALUE( PR_BOCONSTANTS.PR_PRODUCT_REQUEST, 'CUST_CARE_REQUES_NUM' );
      NUATRID := PR_BOATTRIBUTES.GETATRID( PR_BOCONSTANTS.PR_COMPONENT_REQUEST, 'CUST_CARE_REQUES_NUM' );
      PR_BOACTION.ADDACTIONATR( INUTMPACTIONID, NUATRID, NULL, SBVALUE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END MAKEREQUESTPROD_TO_COMP;
   PROCEDURE CREATEREQUESTPRODUCT( INUSTATUS_ID IN PR_PRODUCT_REQUEST.STATUS_ID%TYPE, IDTATTENDANCE_DATE IN PR_PRODUCT_REQUEST.ATTENDANCE_DATE%TYPE, INUPRODUCT_ID IN PR_PRODUCT_REQUEST.PRODUCT_ID%TYPE, INUPACKAGE_ID IN PR_PRODUCT_REQUEST.PACKAGE_ID%TYPE, INUMOTIVE_ID IN PR_PRODUCT_REQUEST.MOTIVE_ID%TYPE, INUMOTIVE_TYPE_ID IN PR_PRODUCT_REQUEST.MOTIVE_TYPE_ID%TYPE, ISBCUST_CARE_REQUES_NUM IN PR_PRODUCT_REQUEST.CUST_CARE_REQUES_NUM%TYPE )
    IS
      RCREQUEST DAPR_PRODUCT_REQUEST.STYPR_PRODUCT_REQUEST;
    BEGIN
      PR_BOUTIL.TRACE( '.. >> Generando Petición de Producto ' );
      RCREQUEST.PRODUCT_REQUEST_ID := PR_BOSEQUENCE.GETPRODUCTREQUESTID;
      RCREQUEST.STATUS_ID := INUSTATUS_ID;
      RCREQUEST.ATTENDANCE_DATE := IDTATTENDANCE_DATE;
      RCREQUEST.PRODUCT_ID := INUPRODUCT_ID;
      RCREQUEST.PACKAGE_ID := INUPACKAGE_ID;
      RCREQUEST.MOTIVE_ID := INUMOTIVE_ID;
      RCREQUEST.MOTIVE_TYPE_ID := INUMOTIVE_TYPE_ID;
      RCREQUEST.CUST_CARE_REQUES_NUM := ISBCUST_CARE_REQUES_NUM;
      DAPR_PRODUCT_REQUEST.INSRECORD( RCREQUEST );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CREATEREQUESTPRODUCT;
   PROCEDURE CREATECOMPONENTREQUEST( INUSTATUS_ID IN PR_COMPONENT_REQUEST.STATUS_ID%TYPE, IDTATTENDANCE_DATE IN PR_COMPONENT_REQUEST.ATTENDANCE_DATE%TYPE, INUCOMPONENT_ID IN PR_COMPONENT_REQUEST.COMPONENT_ID%TYPE, INUPACKAGE_ID IN PR_COMPONENT_REQUEST.PACKAGE_ID%TYPE, INUMOTIVE_ID IN PR_COMPONENT_REQUEST.MOTIVE_ID%TYPE, INUMOTIVE_TYPE_ID IN PR_COMPONENT_REQUEST.MOTIVE_TYPE_ID%TYPE, INUMO_COMPONENT_ID IN PR_COMPONENT_REQUEST.MO_COMPONENT_ID%TYPE, ISBCUST_CARE_REQUES_NUM IN PR_COMPONENT_REQUEST.CUST_CARE_REQUES_NUM%TYPE )
    IS
      RCREQUEST DAPR_COMPONENT_REQUEST.STYPR_COMPONENT_REQUEST;
    BEGIN
      PR_BOUTIL.TRACE( '.. >> Generando Petición de Componente ' );
      RCREQUEST.COMPONENT_REQUEST_ID := PR_BOSEQUENCE.GETCOMPONENTREQUESTID;
      RCREQUEST.STATUS_ID := INUSTATUS_ID;
      RCREQUEST.ATTENDANCE_DATE := IDTATTENDANCE_DATE;
      RCREQUEST.COMPONENT_ID := INUCOMPONENT_ID;
      RCREQUEST.PACKAGE_ID := INUPACKAGE_ID;
      RCREQUEST.MOTIVE_ID := INUMOTIVE_ID;
      RCREQUEST.MOTIVE_TYPE_ID := INUMOTIVE_TYPE_ID;
      RCREQUEST.MO_COMPONENT_ID := INUMO_COMPONENT_ID;
      RCREQUEST.CUST_CARE_REQUES_NUM := ISBCUST_CARE_REQUES_NUM;
      DAPR_COMPONENT_REQUEST.INSRECORD( RCREQUEST );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CREATECOMPONENTREQUEST;
   FUNCTION FNUGETLASTMOTIVE( INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    RETURN NUMBER
    IS
      CURSOR CUDATA IS
SELECT MOTIVE_ID
            FROM   PR_PRODUCT_REQUEST
            WHERE  PRODUCT_ID = inuProductId
            ORDER BY ATTENDANCE_DATE DESC;
      NUMOTIVE MO_MOTIVE.MOTIVE_ID%TYPE;
    BEGIN
      OPEN CUDATA;
      FETCH CUDATA
         INTO NUMOTIVE;
      CLOSE CUDATA;
      RETURN ( NUMOTIVE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CREATEREQUESTPRODUCTBYMOTIVE( INUMOTIVEID IN PR_PRODUCT_REQUEST.MOTIVE_ID%TYPE )
    IS
    BEGIN
      DAMO_MOTIVE.ACCKEY( INUMOTIVEID );
      PR_BOUTIL.TRACE( '.. >> Generando Petición de producto para motivo [' || INUMOTIVEID || ']' );
      CREATEREQUESTPRODUCT( MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTEND_MOT, TO_CHAR( SYSDATE ), DAMO_MOTIVE.FNUGETPRODUCT_ID( INUMOTIVEID ), DAMO_MOTIVE.FNUGETPACKAGE_ID( INUMOTIVEID ), INUMOTIVEID, DAMO_MOTIVE.FNUGETMOTIVE_TYPE_ID( INUMOTIVEID ), DAMO_MOTIVE.FSBGETCUST_CARE_REQUES_NUM( INUMOTIVEID ) );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CREATEREQUESTPRODUCTBYMOTIVE;
   PROCEDURE DELPRCOMPREQUES( INUPRCOMPONENTID IN PR_COMPONENT_REQUEST.COMPONENT_ID%TYPE, INUMOTIVEID IN PR_COMPONENT_REQUEST.MOTIVE_ID%TYPE, INUMOTIVETYPEID IN PR_COMPONENT_REQUEST.MOTIVE_TYPE_ID%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo PR_BOREQUEST.delPrCompReques', 10 );
      FOR RCREQ IN CUCOMPREQUEST( INUPRCOMPONENTID, INUMOTIVEID, INUMOTIVETYPEID )
       LOOP
         DAPR_COMPONENT_REQUEST.DELBYROWID( RCREQ.ROWID );
      END LOOP;
      UT_TRACE.TRACE( 'Termina Metodo PR_BOREQUEST.delPrCompReques', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUCOMPREQUEST%ISOPEN ) THEN
            CLOSE CUCOMPREQUEST;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUCOMPREQUEST%ISOPEN ) THEN
            CLOSE CUCOMPREQUEST;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDPRCOMPREQUESSTATUS( INUPRCOMPONENTID IN PR_COMPONENT_REQUEST.COMPONENT_ID%TYPE, INUMOTIVEID IN PR_COMPONENT_REQUEST.MOTIVE_ID%TYPE, INUMOTIVETYPEID IN PR_COMPONENT_REQUEST.MOTIVE_TYPE_ID%TYPE, INUSTATUSID IN PR_COMPONENT_REQUEST.STATUS_ID%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo PR_BOREQUEST.updPrCompRequesStatus', 10 );
      FOR RCREQ IN CUCOMPREQUEST( INUPRCOMPONENTID, INUMOTIVEID, INUMOTIVETYPEID )
       LOOP
         RCREQ.STATUS_ID := INUSTATUSID;
         DAPR_COMPONENT_REQUEST.UPDRECORD( RCREQ );
      END LOOP;
      UT_TRACE.TRACE( 'Termina Metodo PR_BOREQUEST.updPrCompRequesStatus', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUCOMPREQUEST%ISOPEN ) THEN
            CLOSE CUCOMPREQUEST;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUCOMPREQUEST%ISOPEN ) THEN
            CLOSE CUCOMPREQUEST;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION GETPRCOMPREQUES( INUPRCOMPONENTID IN PR_COMPONENT_REQUEST.COMPONENT_ID%TYPE, INUMOTIVEID IN PR_COMPONENT_REQUEST.MOTIVE_ID%TYPE, INUMOTIVETYPEID IN PR_COMPONENT_REQUEST.MOTIVE_TYPE_ID%TYPE )
    RETURN PR_COMPONENT_REQUEST.COMPONENT_REQUEST_ID%TYPE
    IS
      NUCOMPREQID PR_COMPONENT_REQUEST.COMPONENT_REQUEST_ID%TYPE := NULL;
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo PR_BOREQUEST.GetPrCompReques', 10 );
      FOR RCREQ IN CUCOMPREQUEST( INUPRCOMPONENTID, INUMOTIVEID, INUMOTIVETYPEID )
       LOOP
         NUCOMPREQID := RCREQ.COMPONENT_REQUEST_ID;
      END LOOP;
      UT_TRACE.TRACE( 'Termina Metodo PR_BOREQUEST.GetPrCompReques [' || NUCOMPREQID || ']', 10 );
      RETURN NUCOMPREQID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUCOMPREQUEST%ISOPEN ) THEN
            CLOSE CUCOMPREQUEST;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUCOMPREQUEST%ISOPEN ) THEN
            CLOSE CUCOMPREQUEST;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
 BEGIN
   SETPROCESSREQUEST( TRUE );
END PR_BOREQUEST;
/


