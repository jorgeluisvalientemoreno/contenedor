PACKAGE GE_BCTechnicalService
IS
    








































    
    
    

    
    
    

    
    
    
    FUNCTION FSBVERSION
    RETURN VARCHAR2;
    
    





    FUNCTION FRFGETACTIVITIESBYPACK(
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE
    ) RETURN CONSTANTS.TYREFCURSOR;
    
    



    PROCEDURE UPDACTIVITYSERIAL(
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUORDERACTIVITYID  IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUSERIALITEMID     IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ISBCOMMENT          IN  OR_ORDER_ACTIVITY.COMMENT_%TYPE,
        ONUUPDATEDREG       OUT NUMBER
    );
    
    



    FUNCTION FRFGETITEMSTORETBYPACK(
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUOPERATINGUNITID  IN  GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE
    ) RETURN CONSTANTS.TYREFCURSOR;
    
    



    PROCEDURE GETSERIALITEMDATA(
        ISBSERIE            IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        ONUITEMSERIADOID    OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMID           OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        OSBITEMDESC         OUT NOCOPY GE_ITEMS.DESCRIPTION%TYPE,
        ONUSTOCKSTATUSID    OUT GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        OSBSTOCKSTATUSDESC  OUT NOCOPY GE_ITEMS_ESTADO_INV.DESCRIPCION%TYPE
    );
    
    




    PROCEDURE GETITEMBYPACK
    (
        INUPACKAGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUIDITEMSERIADO OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OSBSERIAL        OUT GE_ITEMS_SERIADO.SERIE%TYPE,
        ONUITEM          OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        ONUSTATUS        OUT GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        ONUORDENID       OUT OR_ORDER_ACTIVITY.ORDER_ID%TYPE
    );
    
    





    FUNCTION FRFGETITEMSRETURN (INUPACKAGEID  MO_PACKAGES.PACKAGE_ID%TYPE)
    RETURN CONSTANTS.TYREFCURSOR;
    
    
    





    FUNCTION FNUGETRETURNACTIVITY (INUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE,
                                   INUSERIALITEMID  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE)
    RETURN GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE;
    
    






    PROCEDURE SETRETURNACTIVITY (INUREQUESTID   IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                                 INUWFPLANID    IN   GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE);

    






    PROCEDURE SETWARRANTYRETACT (INUREQUESTID   IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                                 INUWFPLANID    IN   GE_TECH_SERVICE_DET.WARR_RET_WF_INST_ID%TYPE);

    





    PROCEDURE ASSOCIATEEQUIPMENT(
        INUSERIALITEMID     IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    );
    
    
    




    FUNCTION FNUGETRETWARRACTIVITY
    (
        INUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE;

    
END GE_BCTECHNICALSERVICE;

PACKAGE BODY GE_BCTechnicalService
IS
    










































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO591704';

    
    
    
    
    CNUUNITCLASIF               CONSTANT NUMBER         := 18;  
    CSBMOVTYPE                  CONSTANT VARCHAR(10)    := 'I'; 
    
    
    

    
    
    

    












    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

    

























    FUNCTION FRFGETACTIVITIESBYPACK(
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    ) RETURN CONSTANTS.TYREFCURSOR
    IS
        RFACTBYPACKAGE  CONSTANTS.TYREFCURSOR;

    BEGIN
        OPEN RFACTBYPACKAGE FOR
            SELECT /*+ index(mo_packages PK_MO_PACKAGES)
                       index(ps_motive_status PK_PS_MOTIVE_STATUS)
                       index(or_order_activity IDX_OR_ORDER_ACTIVITY_06) */
                   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID, OR_ORDER_ACTIVITY.ORDER_ID
              FROM /*+ GE_BCTechnicalService.frfGetActivitiesByPack */
                   MO_PACKAGES, PS_MOTIVE_STATUS, OR_ORDER_ACTIVITY
             WHERE OR_ORDER_ACTIVITY.STATUS <> OR_BOCONSTANTS.CSBFINISHSTATUS
               AND OR_ORDER_ACTIVITY.SERIAL_ITEMS_ID IS NULL
               AND OR_ORDER_ACTIVITY.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
               AND PS_MOTIVE_STATUS.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
               AND PS_MOTIVE_STATUS.MOTIVE_STATUS_ID = MO_PACKAGES.MOTIVE_STATUS_ID
               AND MO_PACKAGES.PACKAGE_ID = INUPACKAGEID;

        RETURN RFACTBYPACKAGE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFACTBYPACKAGE);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFACTBYPACKAGE);
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETACTIVITIESBYPACK;
    
    






























    PROCEDURE UPDACTIVITYSERIAL(
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUORDERACTIVITYID  IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUSERIALITEMID     IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ISBCOMMENT          IN  OR_ORDER_ACTIVITY.COMMENT_%TYPE,
        ONUUPDATEDREG       OUT NUMBER
    )
    IS
    BEGIN
        
        UPDATE /*+ INDEX(or_order_activity IDX_OR_ORDER_ACTIVITY_06) */
               OR_ORDER_ACTIVITY
           SET SERIAL_ITEMS_ID = INUSERIALITEMID,
               COMMENT_ = ISBCOMMENT
         WHERE OR_ORDER_ACTIVITY.SERIAL_ITEMS_ID IS NULL
           AND OR_ORDER_ACTIVITY.STATUS <> OR_BOCONSTANTS.CSBFINISHSTATUS
           AND OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID = INUORDERACTIVITYID
           AND OR_ORDER_ACTIVITY.PACKAGE_ID = INUPACKAGEID
           AND EXISTS (
               SELECT /*+ INDEX( MO_PACKAGES IDX_MO_PACKAGES_026) */ 1
                 FROM /*+ GE_BCTechnicalService.UpdActivitySerial */
                      MO_PACKAGES, PS_MOTIVE_STATUS
                WHERE PS_MOTIVE_STATUS.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                  AND PS_MOTIVE_STATUS.MOTIVE_STATUS_ID = MO_PACKAGES.MOTIVE_STATUS_ID
                  AND MO_PACKAGES.PACKAGE_ID = OR_ORDER_ACTIVITY.PACKAGE_ID
               );

        
        ONUUPDATEDREG := SQL%ROWCOUNT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDACTIVITYSERIAL;
    
    





























    FUNCTION FRFGETITEMSTORETBYPACK(
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUOPERATINGUNITID  IN  GE_ITEMS_SERIADO.OPERATING_UNIT_ID%TYPE
    ) RETURN CONSTANTS.TYREFCURSOR
    IS
        RFITETORETBYPACK    CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN RFITETORETBYPACK FOR
            SELECT /*+ index(ge_tech_service_det IDX_ge_tech_service_det01 )
                       index(ge_items_seriado PK_ge_items_seriado )
                       index(ge_items PK_ge_items )
                       index(ge_items_estado_inv PK_ge_items_estado_inv )*/
                    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO     ID_ITEMS_SERIADO,
                    GE_ITEMS_SERIADO.SERIE                SERIE,
                    GE_ITEMS.ITEMS_ID                     ITEMS_ID,
                    GE_ITEMS.DESCRIPTION                  ITEMS_DESC,
                    GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV  ID_ITEMS_ESTADO_INV,
                    GE_ITEMS_ESTADO_INV.DESCRIPCION       DESC_ITEMS_ESTADO_INV
            FROM   /*+GE_BCTechnicalService.frfGetItemsToRetByPack*/
                   GE_TECH_SERVICE_DET , GE_ITEMS_SERIADO, GE_ITEMS, GE_ITEMS_ESTADO_INV
            WHERE  GE_TECH_SERVICE_DET.PACKAGE_ID          = INUPACKAGEID
            AND    GE_TECH_SERVICE_DET.RETURN_WF_INST_ID   IS NOT NULL
            AND    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO       = GE_TECH_SERVICE_DET.SERIAL_ITEM_ID
            AND    GE_ITEMS.ITEMS_ID                       = GE_ITEMS_SERIADO.ITEMS_ID
            AND    GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV = GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV
            AND    GE_ITEMS_SERIADO.OPERATING_UNIT_ID      = INUOPERATINGUNITID;

        RETURN RFITETORETBYPACK;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFITETORETBYPACK);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFITETORETBYPACK);
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETITEMSTORETBYPACK;
    
    

















    PROCEDURE GETSERIALITEMDATA(
        ISBSERIE            IN  GE_ITEMS_SERIADO.SERIE%TYPE,
        ONUITEMSERIADOID    OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        ONUITEMID           OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        OSBITEMDESC         OUT NOCOPY GE_ITEMS.DESCRIPTION%TYPE,
        ONUSTOCKSTATUSID    OUT GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        OSBSTOCKSTATUSDESC  OUT NOCOPY GE_ITEMS_ESTADO_INV.DESCRIPCION%TYPE
    )
    IS
        CURSOR CUSERIALDATA IS
            SELECT /*+ index(ge_items_seriado unq_serie)
                       index(GE_ITEMS_ESTADO_INV PK_GE_ITEMS_ESTADO_INV)
                       index(ge_items pk_ge_items) */
                   GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
                   GE_ITEMS_SERIADO.ITEMS_ID,
                   GE_ITEMS.DESCRIPTION,
                   GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV,
                   GE_ITEMS_ESTADO_INV.DESCRIPCION
                   /*+ ge_bcTechnicalService.GetSerialItemData */
              FROM GE_ITEMS_SERIADO, GE_ITEMS, GE_ITEMS_ESTADO_INV
             WHERE GE_ITEMS_SERIADO.ITEMS_ID = GE_ITEMS.ITEMS_ID
               AND GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV
               AND GE_ITEMS_SERIADO.SERIE = ISBSERIE;
    BEGIN
        OPEN CUSERIALDATA;
        
        FETCH CUSERIALDATA INTO ONUITEMSERIADOID,
                                ONUITEMID,
                                OSBITEMDESC,
                                ONUSTOCKSTATUSID,
                                OSBSTOCKSTATUSDESC;
        CLOSE CUSERIALDATA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUSERIALDATA%ISOPEN) THEN
                CLOSE CUSERIALDATA;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (CUSERIALDATA%ISOPEN) THEN
                CLOSE CUSERIALDATA;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END GETSERIALITEMDATA;
    
    




























    PROCEDURE GETITEMBYPACK
    (
        INUPACKAGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ONUIDITEMSERIADO OUT GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        OSBSERIAL        OUT GE_ITEMS_SERIADO.SERIE%TYPE,
        ONUITEM          OUT GE_ITEMS_SERIADO.ITEMS_ID%TYPE,
        ONUSTATUS        OUT GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE,
        ONUORDENID       OUT OR_ORDER_ACTIVITY.ORDER_ID%TYPE
    )
    IS
        CURSOR CUITEMBYPACK IS
            SELECT /*+ index(mo_packages PK_MO_PACKAGES)
                       index(or_order_activity IDX_OR_ORDER_ACTIVITY_06)
                       index(ge_items_seriado PK_GE_ITEMS_SERIADO)
                   */
                GE_ITEMS_SERIADO.ID_ITEMS_SERIADO,
                GE_ITEMS_SERIADO.SERIE,
                GE_ITEMS_SERIADO.ITEMS_ID,
                GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV,
                OR_ORDER_ACTIVITY.ORDER_ID
            FROM /*+ GE_BCTechnicalService.GetItemByPack */
                 MO_PACKAGES, OR_ORDER_ACTIVITY, GE_ITEMS_SERIADO
            WHERE MO_PACKAGES.PACKAGE_ID = INUPACKAGEID
                AND OR_ORDER_ACTIVITY.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
                AND OR_ORDER_ACTIVITY.STATUS = OR_BOCONSTANTS.CSBFINISHSTATUS
                AND GE_ITEMS_SERIADO.ID_ITEMS_SERIADO = OR_ORDER_ACTIVITY.SERIAL_ITEMS_ID
                AND GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV = GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA
                AND ROWNUM <= 1;
    BEGIN

        FOR RCITEMBYPACK IN CUITEMBYPACK LOOP
            ONUIDITEMSERIADO := RCITEMBYPACK.ID_ITEMS_SERIADO;
            OSBSERIAL := RCITEMBYPACK.SERIE;
            ONUITEM := RCITEMBYPACK.ITEMS_ID;
            ONUSTATUS := RCITEMBYPACK.ID_ITEMS_ESTADO_INV;
            ONUORDENID := RCITEMBYPACK.ORDER_ID;
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETITEMBYPACK;
    
    
















    FUNCTION FRFGETITEMSRETURN (INUPACKAGEID  MO_PACKAGES.PACKAGE_ID%TYPE)
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFITEMS                 CONSTANTS.TYREFCURSOR;
    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BCTechnicalService.frfGetItemsReturn',10);

        OPEN RFITEMS FOR
            SELECT /*+ index(ge_tech_service_det IDX_ge_tech_service_det01 )
                       index(ge_items_seriado PK_ge_items_seriado )
                       index(ge_items PK_ge_items )
                       index(ge_items_estado_inv PK_ge_items_estado_inv )*/
                     GE_ITEMS_SERIADO.ID_ITEMS_SERIADO ID,
                    GE_ITEMS_SERIADO.SERIE SERIE,
                   ( GE_ITEMS.ITEMS_ID || ' - ' || GE_ITEMS.DESCRIPTION) ITEM,
                   ( GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV || ' - ' || GE_ITEMS_ESTADO_INV.DESCRIPCION) ESTADO
            FROM   GE_TECH_SERVICE_DET , GE_ITEMS_SERIADO, GE_ITEMS, GE_ITEMS_ESTADO_INV
                   /*+GE_BCTechnicalService.frfGetItemsReturn*/
            WHERE  GE_TECH_SERVICE_DET.PACKAGE_ID          = INUPACKAGEID
            AND    GE_TECH_SERVICE_DET.RETURN_WF_INST_ID   IS NOT NULL
            AND    GE_ITEMS_SERIADO.ID_ITEMS_SERIADO       = GE_TECH_SERVICE_DET.SERIAL_ITEM_ID
            AND    GE_ITEMS.ITEMS_ID                       = GE_ITEMS_SERIADO.ITEMS_ID
            AND    GE_ITEMS_ESTADO_INV.ID_ITEMS_ESTADO_INV = GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV
            
            AND     EXISTS (    SELECT  'X'
                                FROM    OR_UNI_ITEM_BALA_MOV A,
                                        OR_OPERATING_UNIT
                                WHERE   A.ID_ITEMS_SERIADO = GE_ITEMS_SERIADO.ID_ITEMS_SERIADO
                                        AND OR_OPERATING_UNIT.OPERATING_UNIT_ID =  A.OPERATING_UNIT_ID
                                        AND OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID = CNUUNITCLASIF  
                                        AND A.MOVEMENT_TYPE = CSBMOVTYPE 
                                        AND A.UNI_ITEM_BALA_MOV_ID = (  SELECT  MAX(UNI_ITEM_BALA_MOV_ID)
                                                                        FROM    OR_UNI_ITEM_BALA_MOV B
                                                                        WHERE   A.ID_ITEMS_SERIADO = B.ID_ITEMS_SERIADO
                                                                     )
                        )
                        ;

        UT_TRACE.TRACE('FIN GE_BCFWItemsTraslado.frfGetItemsReturn',10);
        
        RETURN RFITEMS;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BCTechnicalService.frfGetItemsReturn',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BCTechnicalService.frfGetItemsReturn',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETITEMSRETURN;
    
        













    FUNCTION FNUGETRETURNACTIVITY (INUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE,
                               INUSERIALITEMID  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE)
    RETURN GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE
    IS
    
        NUACTIVITYWF GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE;
        
        CURSOR CUACTIVITY IS
            SELECT /*+ index(ge_tech_service_det IDX_ge_tech_service_det01 )*/
                    GE_TECH_SERVICE_DET.RETURN_WF_INST_ID
              FROM GE_TECH_SERVICE_DET
                     /*+GE_BCTechnicalService.fnuGetReturnActivity*/
             WHERE GE_TECH_SERVICE_DET.PACKAGE_ID = INUPACKAGEID
               AND GE_TECH_SERVICE_DET.SERIAL_ITEM_ID = INUSERIALITEMID;
    BEGIN
         UT_TRACE.TRACE('INICIO GE_BCTechnicalService.fnuGetReturnActivity',10);
         
        OPEN CUACTIVITY;
        FETCH CUACTIVITY INTO NUACTIVITYWF;
        CLOSE CUACTIVITY;

         UT_TRACE.TRACE('FIN GE_BCTechnicalService.fnuGetReturnActivity',10);
         
         RETURN NUACTIVITYWF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BCTechnicalService.fnuGetReturnActivity',10);
            IF (CUACTIVITY%ISOPEN) THEN
                CLOSE CUACTIVITY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others GE_BCTechnicalService.fnuGetReturnActivity',10);
            ERRORS.SETERROR;
            IF (CUACTIVITY%ISOPEN) THEN
                CLOSE CUACTIVITY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETRETURNACTIVITY;
    
    
    













    FUNCTION FNUGETRETWARRACTIVITY
    (
        INUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE
    IS

        NUACTIVITYWF GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE;

        CURSOR CUACTIVITY IS
            SELECT /*+ index(ge_tech_service_det IDX_ge_tech_service_det01 )*/
                    GE_TECH_SERVICE_DET.WARR_RET_WF_INST_ID
              FROM GE_TECH_SERVICE_DET
                   /*+GE_BCTechnicalService.fnuGetReturnActivity*/
             WHERE GE_TECH_SERVICE_DET.PACKAGE_ID = INUPACKAGEID;
    BEGIN
         UT_TRACE.TRACE('INICIO GE_BCTechnicalService.fnuGetRetWarrActivity',10);

        OPEN CUACTIVITY;
        FETCH CUACTIVITY INTO NUACTIVITYWF;
        CLOSE CUACTIVITY;

         UT_TRACE.TRACE('FIN GE_BCTechnicalService.fnuGetRetWarrActivity',10);

         RETURN NUACTIVITYWF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BCTechnicalService.fnuGetRetWarrActivity',10);
            IF (CUACTIVITY%ISOPEN) THEN
                CLOSE CUACTIVITY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others GE_BCTechnicalService.fnuGetRetWarrActivity',10);
            ERRORS.SETERROR;
            IF (CUACTIVITY%ISOPEN) THEN
                CLOSE CUACTIVITY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETRETWARRACTIVITY;

    
    

















    PROCEDURE SETRETURNACTIVITY (INUREQUESTID   IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                                 INUWFPLANID    IN   GE_TECH_SERVICE_DET.RETURN_WF_INST_ID%TYPE)
    IS

    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.SetReturnActivity',10);

        UPDATE /*+ index(ge_tech_service_det IDX_ge_tech_service_det01 ) */
                GE_TECH_SERVICE_DET
        SET GE_TECH_SERVICE_DET.RETURN_WF_INST_ID = INUWFPLANID
        WHERE GE_TECH_SERVICE_DET.PACKAGE_ID = INUREQUESTID;

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.SetReturnActivity',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.SetReturnActivity',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.SetReturnActivity',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETRETURNACTIVITY;
    
        

















    PROCEDURE SETWARRANTYRETACT (INUREQUESTID   IN   MO_PACKAGES.PACKAGE_ID%TYPE,
                                 INUWFPLANID    IN   GE_TECH_SERVICE_DET.WARR_RET_WF_INST_ID%TYPE)
    IS

    BEGIN
        
        UT_TRACE.TRACE('INICIO GE_BOTechnicalService.SetWarrantyRetAct',10);

        UPDATE /*+ index(ge_tech_service_det IDX_ge_tech_service_det01 ) */
                GE_TECH_SERVICE_DET
        SET GE_TECH_SERVICE_DET.WARR_RET_WF_INST_ID = INUWFPLANID
        WHERE GE_TECH_SERVICE_DET.PACKAGE_ID = INUREQUESTID;

        UT_TRACE.TRACE('FIN GE_BOTechnicalService.SetWarrantyRetAct',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR GE_BOTechnicalService.SetWarrantyRetAct',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS GE_BOTechnicalService.SetWarrantyRetAct',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETWARRANTYRETACT;
    
    























    PROCEDURE ASSOCIATEEQUIPMENT(
        INUSERIALITEMID     IN  GE_ITEMS_SERIADO.ID_ITEMS_SERIADO%TYPE,
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
    BEGIN
        
        UPDATE  /*+ index(or_order_activity IDX_or_order_activity_06 ) */
                OR_ORDER_ACTIVITY
           SET SERIAL_ITEMS_ID = INUSERIALITEMID
         WHERE OR_ORDER_ACTIVITY.PACKAGE_ID = INUPACKAGEID
           AND OR_ORDER_ACTIVITY.SERIAL_ITEMS_ID IS NULL
           AND OR_ORDER_ACTIVITY.STATUS = OR_BOCONSTANTS.CSBREGISTERSTATUS
           AND EXISTS (
               SELECT /*+ index(ps_motive_status PK_ps_motive_status)
                          index(mo_packages PK_mo_packages)  */
                      1
                 FROM /*+ GE_BCTechnicalService.AssociateEquipment */
                      MO_PACKAGES, PS_MOTIVE_STATUS
                WHERE PS_MOTIVE_STATUS.IS_FINAL_STATUS = GE_BOCONSTANTS.CSBNO
                  AND PS_MOTIVE_STATUS.MOTIVE_STATUS_ID = MO_PACKAGES.MOTIVE_STATUS_ID
                  AND MO_PACKAGES.PACKAGE_ID = OR_ORDER_ACTIVITY.PACKAGE_ID
               );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ASSOCIATEEQUIPMENT;
    
END GE_BCTECHNICALSERVICE;