PACKAGE BODY MO_BOMotivePayment IS
    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO198061';
    
    
    
    

    CURSOR CUBILLS (INUIDPACKAGE MO_PACKAGE_PAYMENT.PACKAGE_ID%TYPE) IS
        SELECT  /*+ leading(mo_package_payment)*/ MO_MOTIVE_PAYMENT.ACCOUNT
        FROM    MO_MOTIVE_PAYMENT, MO_PACKAGE_PAYMENT
        WHERE   MO_MOTIVE_PAYMENT.ACTIVE = GE_BOCONSTANTS.CSBYES
        AND     MO_MOTIVE_PAYMENT.PACKAGE_PAYMENT_ID = MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID
        AND     MO_PACKAGE_PAYMENT.PACKAGE_ID = INUIDPACKAGE
        AND     MO_MOTIVE_PAYMENT.ACCOUNT IS NOT NULL
        GROUP BY MO_MOTIVE_PAYMENT.ACCOUNT;
    
    CURSOR CUMOTIVEPAYMENT (INUPACKAGEPAYMENTID MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE) IS
	   SELECT  MO_MOTIVE_PAYMENT.MOTIVE_PAYMENT_ID,
               MO_MOTIVE_PAYMENT.ACCOUNT
	     FROM  FACTURA,
               CUENCOBR,
               MO_MOTIVE_PAYMENT
        WHERE  FACTURA.FACTCODI = MO_MOTIVE_PAYMENT.ACCOUNT
          AND  FACTURA.FACTCODI = CUENCOBR.CUCOFACT
          AND  MO_MOTIVE_PAYMENT.PACKAGE_PAYMENT_ID = INUPACKAGEPAYMENTID
          AND  MO_MOTIVE_PAYMENT.ACTIVE = GE_BOCONSTANTS.CSBYES
          AND  ROWNUM = 1;

    CURSOR CUPACKAGEACCBAL (INUIDPACKAGE MO_PACKAGE_PAYMENT.PACKAGE_ID%TYPE) IS
	   SELECT  MO_MOTIVE_PAYMENT.ACCOUNT,
               NVL (SUM( NVL (CUCOVATO, 0)), 0) - NVL (SUM( NVL (CUCOVAAB, 0)), 0) BALANCE
	     FROM  FACTURA,
               CUENCOBR,
               MO_MOTIVE_PAYMENT,
               MO_PACKAGE_PAYMENT
        WHERE  FACTURA.FACTCODI = MO_MOTIVE_PAYMENT.ACCOUNT
          AND  FACTURA.FACTCODI = CUENCOBR.CUCOFACT
          AND  MO_MOTIVE_PAYMENT.PACKAGE_PAYMENT_ID = MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID
          AND  MO_PACKAGE_PAYMENT.PACKAGE_ID = INUIDPACKAGE
          AND  MO_MOTIVE_PAYMENT.ACTIVE = GE_BOCONSTANTS.CSBYES
          AND  ROWNUM = 1
        GROUP BY MO_MOTIVE_PAYMENT.ACCOUNT;

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


	PROCEDURE REGISTER
        (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUPACKAGEID        IN MO_MOTIVE.PACKAGE_ID%TYPE,
        ISBDOCSUPPORT       IN MO_MOTIVE_PAYMENT.SUPPORT_DOCUMENT%TYPE,
        IDTLIMITDATE        IN DATE,
        INUVALOR            IN MO_MOTIVE_PAYMENT.TOTAL_VALUE%TYPE,
        INUCUPON            IN MO_MOTIVE_PAYMENT.COUPON_ID%TYPE,
        INUCUENTA           IN MO_MOTIVE_PAYMENT.ACCOUNT%TYPE DEFAULT NULL,
        INUPAYMENTVALUE     IN MO_MOTIVE_PAYMENT.PAYMENT_VALUE%TYPE DEFAULT 0,
        INUPACKAGEPAYMENTID IN MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE DEFAULT NULL
        )
    IS
        RCMOTIVEPAYMENT     DAMO_MOTIVE_PAYMENT.STYMO_MOTIVE_PAYMENT;
        NUPACKAGEPAYMENTID  MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
        CURFMOTIVEPAYMENT   CONSTANTS.TYREFCURSOR;
	BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOMotivePayment.Register',15);
        UT_TRACE.TRACE('Documento:['||ISBDOCSUPPORT||']Motivo:['||INUMOTIVEID||']Paquete:['||INUPACKAGEID||']',16);

        
        IF (INUPACKAGEPAYMENTID IS NULL) THEN
            MO_BOPACKAGEPAYMENT.GETIDPACKPAYMENT(INUPACKAGEID,NUPACKAGEPAYMENTID);
		ELSE
            NUPACKAGEPAYMENTID := INUPACKAGEPAYMENTID;
		END IF;

        UT_TRACE.TRACE('Id Registro Mo_Package_Payment:['||NUPACKAGEPAYMENTID||']',16);

        

        CURFMOTIVEPAYMENT := MO_BCMOTIVEPAYMENT.FRFMOTIVEPAYMENTBYSUPPDOC(ISBDOCSUPPORT,INUMOTIVEID,NUPACKAGEPAYMENTID);
        FETCH CURFMOTIVEPAYMENT INTO RCMOTIVEPAYMENT;
        WHILE CURFMOTIVEPAYMENT%FOUND LOOP
            UT_TRACE.TRACE('Id Registro:['||RCMOTIVEPAYMENT.MOTIVE_PAYMENT_ID||']',16);

            
            RCMOTIVEPAYMENT.ACTIVE := GE_BOCONSTANTS.CSBNO;
            DAMO_MOTIVE_PAYMENT.UPDRECORD(RCMOTIVEPAYMENT);

            FETCH CURFMOTIVEPAYMENT INTO RCMOTIVEPAYMENT;
        END LOOP;
        CLOSE CURFMOTIVEPAYMENT;

		RCMOTIVEPAYMENT.MOTIVE_PAYMENT_ID := MO_BOSEQUENCES.FNUGETSEQ_MO_MOTIVE_PAYMENT ;
		RCMOTIVEPAYMENT.ACTIVE := GE_BOCONSTANTS.CSBYES;
		RCMOTIVEPAYMENT.LIMIT_DATE := IDTLIMITDATE;
		RCMOTIVEPAYMENT.TOTAL_VALUE := INUVALOR;
		RCMOTIVEPAYMENT.PAYMENT_VALUE := INUPAYMENTVALUE;
		RCMOTIVEPAYMENT.MOTIVE_ID := INUMOTIVEID;
		RCMOTIVEPAYMENT.PACKAGE_PAYMENT_ID := NUPACKAGEPAYMENTID;
		RCMOTIVEPAYMENT.SUPPORT_DOCUMENT := ISBDOCSUPPORT;
		RCMOTIVEPAYMENT.COUPON_ID := INUCUPON;
		RCMOTIVEPAYMENT.ACCOUNT := INUCUENTA;
		
		DAMO_MOTIVE_PAYMENT.INSRECORD(RCMOTIVEPAYMENT);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOMotivePayment.Register',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVEPAYMENT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVEPAYMENT);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;































	PROCEDURE UPDATEPAYMENT (
        ISBDOCSUPPORT       IN  MO_MOTIVE_PAYMENT.SUPPORT_DOCUMENT%TYPE,
        INUVALOR            IN  MO_MOTIVE_PAYMENT.TOTAL_VALUE%TYPE
    )	IS
		
		RCREGISTER    DAMO_MOTIVE_PAYMENT.STYMO_MOTIVE_PAYMENT;
		NUIDPAYMENT   MO_MOTIVE_PAYMENT.MOTIVE_PAYMENT_ID%TYPE;
		NUIDPACKPAY   MO_MOTIVE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
		NUIDPAYMENTOTHER  MO_MOTIVE_PAYMENT.MOTIVE_PAYMENT_ID%TYPE;
		NUIDMOTIVE    MO_MOTIVE.MOTIVE_ID%TYPE;
		NUPAYVALUEACUM    MO_MOTIVE_PAYMENT.PAYMENT_VALUE%TYPE := 0;
		NUTOTALVALUE      MO_MOTIVE_PAYMENT.TOTAL_VALUE%TYPE := 0;

		CURSOR CUMOTIVE IS
		SELECT MOTIVE_PAYMENT_ID, MOTIVE_ID,PACKAGE_PAYMENT_ID, NVL(PAYMENT_VALUE,0) PAYMENT_VALUE,
               TOTAL_VALUE
		FROM MO_MOTIVE_PAYMENT
		WHERE SUPPORT_DOCUMENT = ISBDOCSUPPORT
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES;
        		
		CURSOR CUPAYMENT IS
		SELECT *
		FROM MO_MOTIVE_PAYMENT
		WHERE MOTIVE_ID = NUIDMOTIVE
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES
        AND   PAYMENT_VALUE = 0;
	
		CURSOR CUPAYMENTMOTIVNULL IS
		SELECT *
		FROM MO_MOTIVE_PAYMENT
		WHERE MOTIVE_ID IS NULL
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES
        AND   PAYMENT_VALUE = 0
        AND   SUPPORT_DOCUMENT = ISBDOCSUPPORT;

        RCPAYMENT            CUPAYMENT%ROWTYPE;
        GNUSTANDBYSTATUS     MO_STATUS_ACTIVITY.STATUS_ACTIVITY_ID%TYPE;
        
        FUNCTION ISACTIVITYPAY(ISBDOCUMENT IN    VARCHAR2)
        RETURN BOOLEAN
        IS
          SBTIPO                VARCHAR2(2000);
	      NUPKACTIVITY          NUMBER;
	      NUIDACTIVITY          NUMBER;
	      NUEXTERNALID          NUMBER;
          NUSTATUS              NUMBER;
        BEGIN
            UT_TRACE.TRACE('IsActivityPay Valida que tenga actividades pendientes de espera asociadas a ['||ISBDOCUMENT||']',15) ;
        	CC_BOPAYMENTS.GETACTIVITYBYDOCUMENT(ISBDOCUMENT,
                  SBTIPO,NUPKACTIVITY,NUIDACTIVITY,NUEXTERNALID);
                  UT_TRACE.TRACE('Tipo '||SBTIPO||' actividad '||NUPKACTIVITY,15) ;

            IF (SBTIPO = CC_BOCONSTANTS.CSBTIPODOCPACKAGE) THEN
               DAMO_WF_PACK_INTERFAC.ACCKEY(NUPKACTIVITY);
               NUSTATUS := DAMO_WF_PACK_INTERFAC.FNUGETSTATUS_ACTIVITY_ID(NUPKACTIVITY);
               UT_TRACE.TRACE('Estado '||NUSTATUS,15);
               IF (NUSTATUS != GNUSTANDBYSTATUS) THEN
                   RETURN TRUE;
               ELSE
                   RETURN FALSE;
               END IF;
            ELSE
            
               IF (SBTIPO = CC_BOCONSTANTS.CSBTIPODOCMOTIVE) THEN
                   DAMO_WF_MOTIV_INTERFAC.ACCKEY(NUPKACTIVITY);
                   NUSTATUS := DAMO_WF_MOTIV_INTERFAC.FNUGETSTATUS_ACTIVITY_ID(NUPKACTIVITY);
                   UT_TRACE.TRACE('Estado '||NUSTATUS,15);
                   IF (NUSTATUS != GNUSTANDBYSTATUS) THEN
                       RETURN TRUE;
                   ELSE
                       RETURN FALSE;
                   END IF;
               ELSE
                   DAMO_WF_COMP_INTERFAC.ACCKEY(NUPKACTIVITY);
                   NUSTATUS := DAMO_WF_COMP_INTERFAC.FNUGETSTATUS_ACTIVITY_ID(NUPKACTIVITY);
                   UT_TRACE.TRACE('Estado '||NUSTATUS,15);
                   IF (NUSTATUS != GNUSTANDBYSTATUS) THEN
                       RETURN TRUE;
                   ELSE
                       RETURN FALSE;
                   END IF;
               END IF;
            END IF;
        END;
        PROCEDURE PROCESSPAYMENT (
           IRCMOTPAYMENT IN CUPAYMENT%ROWTYPE
        ) IS
        BEGIN
		    
            UT_TRACE.TRACE('Documento '||RCPAYMENT.SUPPORT_DOCUMENT||' id '||RCPAYMENT.MOTIVE_PAYMENT_ID,15) ;
            
            
            

            UT_TRACE.TRACE('Id Reg mo_motive_payment '||RCPAYMENT.MOTIVE_PAYMENT_ID||' Doc Sop ['||RCPAYMENT.SUPPORT_DOCUMENT||']',15) ;
            IF (ISACTIVITYPAY(IRCMOTPAYMENT.SUPPORT_DOCUMENT)) THEN
               UT_TRACE.TRACE('No esta pendiente la actividad ',15);
               DAMO_MOTIVE_PAYMENT.ACCKEY( IRCMOTPAYMENT.MOTIVE_PAYMENT_ID );
               DAMO_MOTIVE_PAYMENT.UPDACTIVE( IRCMOTPAYMENT.MOTIVE_PAYMENT_ID,CC_BOCONSTANTS.CSBNO );
		    END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUMOTIVE%ISOPEN) THEN CLOSE CUMOTIVE; END IF;
            IF (CUPAYMENT%ISOPEN) THEN CLOSE CUPAYMENT; END IF;
            IF (CUPAYMENTMOTIVNULL%ISOPEN) THEN CLOSE CUPAYMENTMOTIVNULL; END IF;
        END;
        	
	BEGIN
		
	
		OPEN CUMOTIVE;
		FETCH CUMOTIVE INTO  NUIDPAYMENT, NUIDMOTIVE, NUIDPACKPAY, NUPAYVALUEACUM, NUTOTALVALUE;
		
		IF (CUMOTIVE%NOTFOUND) THEN
		    CLOSE CUMOTIVE;
		    ERRORS.SETERROR(CC_BOCONSTERROR.CNUNOEXISDOCPAYMENT,ISBDOCSUPPORT);
		    RAISE EX.CONTROLLED_ERROR;
		END IF;
		CLOSE CUMOTIVE;

        NUPAYVALUEACUM := NUPAYVALUEACUM +  INUVALOR;
		DAMO_MOTIVE_PAYMENT.UPDPAYMENT_VALUE( NUIDPAYMENT ,NUPAYVALUEACUM  );
        UT_TRACE.TRACE('Valor acumulado de pago ['||NUPAYVALUEACUM||']',15);
        UT_TRACE.TRACE('Valor todal de pago esperado ['||NUTOTALVALUE||']',15);

		
        GNUSTANDBYSTATUS := MO_BOSTATUSPARAMETER.FNUGETSTA_ACTIV_STANDBY;
        UT_TRACE.TRACE('Estado en espera ['||GNUSTANDBYSTATUS||']',15);

        IF (NUIDMOTIVE IS NOT NULL) THEN
    		OPEN CUPAYMENT;
    		LOOP
    		
    		    FETCH CUPAYMENT INTO RCPAYMENT;
    		    EXIT WHEN CUPAYMENT%NOTFOUND;
    		    
    		    PROCESSPAYMENT ( RCPAYMENT );
    		
    		END LOOP;

    		CLOSE CUPAYMENT;
        ELSE
    		OPEN CUPAYMENTMOTIVNULL;
    		LOOP
    		
    		    FETCH CUPAYMENTMOTIVNULL INTO RCPAYMENT;
    		    EXIT WHEN CUPAYMENTMOTIVNULL%NOTFOUND;

    		    PROCESSPAYMENT ( RCPAYMENT );
    		
    		END LOOP;

    		CLOSE CUPAYMENTMOTIVNULL;
        END IF;
		CLOSECURSOR ;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            CLOSECURSOR ;
            RAISE EX.CONTROLLED_ERROR;
    END;





















    PROCEDURE PAYMENTMIGRATION (
        INUOLDPACKAGE_PAY_ID  IN    MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE,
        INUNEWPACKAGE_PAY_ID  IN    MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE,
        IDTLIMITDATE          IN    DATE  DEFAULT NULL
    )
    IS
        CURSOR CUPAYMENT IS
        SELECT *
        FROM  MO_MOTIVE_PAYMENT
        WHERE PACKAGE_PAYMENT_ID = INUOLDPACKAGE_PAY_ID
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES;

    BEGIN
    
        FOR RCPAYMENT IN CUPAYMENT LOOP
        
            REGISTER(
                RCPAYMENT.MOTIVE_ID,
                RCPAYMENT.PACKAGE_PAYMENT_ID,
                RCPAYMENT.SUPPORT_DOCUMENT,
                IDTLIMITDATE,
                RCPAYMENT.TOTAL_VALUE,
                RCPAYMENT.COUPON_ID,
                RCPAYMENT.ACCOUNT,
                RCPAYMENT.PAYMENT_VALUE,
                INUNEWPACKAGE_PAY_ID
            );
            
            DAMO_MOTIVE_PAYMENT.UPDACTIVE(
               RCPAYMENT.MOTIVE_PAYMENT_ID, GE_BOCONSTANTS.CSBNO
            );
            
        
        END LOOP;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    


















    PROCEDURE GETPACKAGE (
        ISBDOCSUPPORT       IN  MO_MOTIVE_PAYMENT.SUPPORT_DOCUMENT%TYPE,
        ONUPACKAGE_ID       OUT MO_PACKAGES.PACKAGE_ID%TYPE
    ) IS
        CURSOR CUMOTPAYMENT IS
        SELECT *
        FROM MO_MOTIVE_PAYMENT
		WHERE SUPPORT_DOCUMENT = ISBDOCSUPPORT
		AND   ACTIVE = GE_BOCONSTANTS.CSBYES;

        RCMOTPAYMENT  CUMOTPAYMENT%ROWTYPE;
        NUMOTIVE    MO_MOTIVE.MOTIVE_ID%TYPE;
    BEGIN
    
		OPEN CUMOTPAYMENT;
		FETCH CUMOTPAYMENT INTO RCMOTPAYMENT;
		
		IF (CUMOTPAYMENT%NOTFOUND) THEN
		    CLOSE CUMOTPAYMENT;
		    ERRORS.SETERROR(CC_BOCONSTERROR.CNUNOEXISDOCPAYMENT,ISBDOCSUPPORT);
		    RAISE EX.CONTROLLED_ERROR;
		END IF;
		CLOSE  CUMOTPAYMENT;
		
		IF ( RCMOTPAYMENT.MOTIVE_ID IS NULL) THEN
		    ONUPACKAGE_ID := DAMO_PACKAGE_PAYMENT.FNUGETPACKAGE_ID( RCMOTPAYMENT.PACKAGE_PAYMENT_ID );
        ELSE
            ONUPACKAGE_ID := DAMO_MOTIVE.FNUGETPACKAGE_ID( RCMOTPAYMENT.MOTIVE_ID );
        END IF;		
		
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;






















    PROCEDURE UPDATEACCOUNT (
        INUIDPAYMENT        IN  MO_MOTIVE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE,
        INUMOTIVEID         IN  MO_MOTIVE_PAYMENT.MOTIVE_ID%TYPE,
        INUACCOUNT          IN  MO_MOTIVE_PAYMENT.ACCOUNT%TYPE
    )	IS
		
		RCREGISTER    DAMO_MOTIVE_PAYMENT.STYMO_MOTIVE_PAYMENT;
		NUIDPAYMENT   MO_MOTIVE_PAYMENT.MOTIVE_PAYMENT_ID%TYPE;
		NUIDPAYMENTOTHER  MO_MOTIVE_PAYMENT.MOTIVE_PAYMENT_ID%TYPE;
		NUIDMOTIVE    MO_MOTIVE.MOTIVE_ID%TYPE;
		
		CURSOR CUMOTIVE IS
		SELECT MOTIVE_PAYMENT_ID, MOTIVE_ID
		FROM MO_MOTIVE_PAYMENT
		WHERE PACKAGE_PAYMENT_ID = INUIDPAYMENT
		AND   MOTIVE_ID = INUMOTIVEID
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES
        AND   PAYMENT_VALUE != 0;
        		
		CURSOR CUPAYMENT IS
		SELECT *
		FROM MO_MOTIVE_PAYMENT
		WHERE PACKAGE_PAYMENT_ID = INUIDPAYMENT
		AND   MOTIVE_ID = INUMOTIVEID		
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES
        AND   PAYMENT_VALUE != 0
        AND   ACCOUNT IS NULL ;

		CURSOR CUMOTIVENULL IS
		SELECT MOTIVE_PAYMENT_ID, MOTIVE_ID
		FROM MO_MOTIVE_PAYMENT
		WHERE PACKAGE_PAYMENT_ID = INUIDPAYMENT
		AND   MOTIVE_ID IS NULL
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES
        AND   PAYMENT_VALUE != 0;

		CURSOR CUPAYMENTMOTIVNULL IS
		SELECT *
		FROM MO_MOTIVE_PAYMENT
		WHERE PACKAGE_PAYMENT_ID = INUIDPAYMENT
		AND   MOTIVE_ID IS NULL
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES
        AND   PAYMENT_VALUE != 0
        AND   ACCOUNT IS NULL ;
	
        RCPAYMENT            CUPAYMENT%ROWTYPE;
        GNUSTANDBYSTATUS     MO_STATUS_ACTIVITY.STATUS_ACTIVITY_ID%TYPE;

        	
	BEGIN
		
        IF (INUMOTIVEID IS NOT NULL) THEN
    		OPEN CUMOTIVE;
    		FETCH CUMOTIVE INTO  NUIDPAYMENT, NUIDMOTIVE;

    		IF (CUMOTIVE%NOTFOUND) THEN
    		    CLOSE CUMOTIVE;
    		    ERRORS.SETERROR(CC_BOCONSTERROR.CNUNOEXISDOCPAYMENT,INUACCOUNT);
    		    RAISE EX.CONTROLLED_ERROR;
    		END IF;
    		CLOSE CUMOTIVE;

    		OPEN CUPAYMENT;
    		LOOP
    		
    		    FETCH CUPAYMENT INTO RCPAYMENT;
    		    EXIT WHEN CUPAYMENT%NOTFOUND;

                DAMO_MOTIVE_PAYMENT.ACCKEY( RCPAYMENT.MOTIVE_PAYMENT_ID );
                DAMO_MOTIVE_PAYMENT.UPDACCOUNT( RCPAYMENT.MOTIVE_PAYMENT_ID,INUACCOUNT );

    		
    		END LOOP;

    		CLOSE CUPAYMENT;
		ELSE
    		OPEN CUMOTIVENULL;
    		FETCH CUMOTIVENULL INTO  NUIDPAYMENT, NUIDMOTIVE;

    		IF (CUMOTIVENULL%NOTFOUND) THEN
    		    CLOSE CUMOTIVENULL;
    		    ERRORS.SETERROR(CC_BOCONSTERROR.CNUNOEXISDOCPAYMENT,INUACCOUNT);
    		    RAISE EX.CONTROLLED_ERROR;
    		END IF;
    		CLOSE CUMOTIVENULL;

    		OPEN CUPAYMENTMOTIVNULL;
    		LOOP
    		
    		    FETCH CUPAYMENTMOTIVNULL INTO RCPAYMENT;
    		    EXIT WHEN CUPAYMENTMOTIVNULL%NOTFOUND;

                DAMO_MOTIVE_PAYMENT.ACCKEY( RCPAYMENT.MOTIVE_PAYMENT_ID );
                DAMO_MOTIVE_PAYMENT.UPDACCOUNT( RCPAYMENT.MOTIVE_PAYMENT_ID,INUACCOUNT );

    		
    		END LOOP;

    		CLOSE CUPAYMENTMOTIVNULL;
        END IF;
		
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
























    PROCEDURE GETCOUPONBYMOTIVE (
        INUIDPAYMENT        IN  MO_MOTIVE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE,
        INUMOTIVEID         IN  MO_MOTIVE_PAYMENT.MOTIVE_ID%TYPE,
        ONUCOUPON           OUT  MO_MOTIVE_PAYMENT.COUPON_ID%TYPE
    )	IS
		
		NUIDPAYMENT   MO_MOTIVE_PAYMENT.MOTIVE_PAYMENT_ID%TYPE;
		
		CURSOR CUMOTIVE IS
		SELECT MOTIVE_PAYMENT_ID, COUPON_ID
		FROM MO_MOTIVE_PAYMENT
		WHERE PACKAGE_PAYMENT_ID = INUIDPAYMENT
		AND   MOTIVE_ID = INUMOTIVEID
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES
        AND   PAYMENT_VALUE != 0
        AND   ACCOUNT IS NULL ;

		CURSOR CUMOTIVENULL IS
		SELECT MOTIVE_PAYMENT_ID, COUPON_ID
		FROM MO_MOTIVE_PAYMENT
		WHERE PACKAGE_PAYMENT_ID = INUIDPAYMENT
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES
        AND   PAYMENT_VALUE != 0
		AND   MOTIVE_ID IS NULL
        AND   ACCOUNT IS NULL ;

        NUIDCOUPON           MO_MOTIVE_PAYMENT.COUPON_ID%TYPE;
        	
	BEGIN
		

        IF (INUMOTIVEID IS NOT NULL) THEN
    		OPEN CUMOTIVE;
    		FETCH CUMOTIVE INTO  NUIDPAYMENT, NUIDCOUPON;

    		IF (CUMOTIVE%NOTFOUND) THEN
    		    CLOSE CUMOTIVE;
    		    ERRORS.SETERROR(CC_BOCONSTERROR.CNUNOEXISMOTIVEPAYMENT,INUMOTIVEID);
    		    RAISE EX.CONTROLLED_ERROR;
    		END IF;
    		CLOSE CUMOTIVE;
        ELSE
    		OPEN CUMOTIVENULL;
    		FETCH CUMOTIVENULL INTO  NUIDPAYMENT, NUIDCOUPON;

    		IF (CUMOTIVENULL%NOTFOUND) THEN
    		    CLOSE CUMOTIVENULL;
    		    ERRORS.SETERROR(CC_BOCONSTERROR.CNUNOEXISMOTIVEPAYMENT,INUMOTIVEID);
    		    RAISE EX.CONTROLLED_ERROR;
    		END IF;
    		CLOSE CUMOTIVENULL;
        END IF;
        
        ONUCOUPON := NUIDCOUPON;
		
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

























    PROCEDURE GETACCOUNTBYMOTIVE (
        INUIDPAYMENT        IN  MO_MOTIVE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE,
        INUMOTIVEID         IN  MO_MOTIVE_PAYMENT.MOTIVE_ID%TYPE,
        ONUACCOUNT          OUT  MO_MOTIVE_PAYMENT.ACCOUNT%TYPE
    )	IS
		
		NUIDPAYMENT       MO_MOTIVE_PAYMENT.MOTIVE_PAYMENT_ID%TYPE;
		NUIDPACKPAYMENT   MO_MOTIVE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE;
		
		CURSOR CUMOTIVE IS
		SELECT MOTIVE_PAYMENT_ID, ACCOUNT
		FROM MO_MOTIVE_PAYMENT
		WHERE PACKAGE_PAYMENT_ID = NUIDPACKPAYMENT
		AND   MOTIVE_ID = INUMOTIVEID
        AND   ACTIVE = GE_BOCONSTANTS.CSBYES;

        NUIDACCOUNT           MO_MOTIVE_PAYMENT.ACCOUNT%TYPE;
        	
        PROCEDURE GETIDPACKPAYMENTASSO IS
            NUPACKAGE_ID  MO_PACKAGES.PACKAGE_ID%TYPE;
        BEGIN
            NUIDPACKPAYMENT := INUIDPAYMENT;
            
            IF ( INUIDPAYMENT IS NULL ) THEN
            
                NUPACKAGE_ID := DAMO_MOTIVE.FNUGETPACKAGE_ID( INUMOTIVEID );
                MO_BOPACKAGEPAYMENT.GETIDPACKPAYMENT(NUPACKAGE_ID, NUIDPACKPAYMENT );
                
            END IF;
            
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

        END;	
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUMOTIVE%ISOPEN) THEN
                CLOSE CUMOTIVE;
            END IF;
            IF (CUMOTIVEPAYMENT%ISOPEN) THEN
                CLOSE CUMOTIVEPAYMENT;
            END IF;
        END;
	BEGIN
		

        GETIDPACKPAYMENTASSO ;
        
        IF (INUMOTIVEID IS NOT NULL) THEN
    		OPEN CUMOTIVE;
    		FETCH CUMOTIVE INTO  NUIDPAYMENT, NUIDACCOUNT;

    		IF (CUMOTIVE%NOTFOUND) THEN
    		    CLOSECURSOR;
    		    ERRORS.SETERROR(CC_BOCONSTERROR.CNUNOEXISMOTIVEPAYMENT,INUMOTIVEID);
    		    RAISE EX.CONTROLLED_ERROR;
    		END IF;
    	ELSE
    		OPEN CUMOTIVEPAYMENT(INUIDPAYMENT);
    		FETCH CUMOTIVEPAYMENT INTO  NUIDPAYMENT, NUIDACCOUNT;

    		IF (CUMOTIVEPAYMENT%NOTFOUND) THEN
    		    CLOSECURSOR;
    		    ERRORS.SETERROR(CC_BOCONSTERROR.CNUNOEXISMOTIVEPAYMENT,INUMOTIVEID);
    		    RAISE EX.CONTROLLED_ERROR;
    		END IF;

        END IF;

		CLOSECURSOR;
		
        ONUACCOUNT := NUIDACCOUNT;
		
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR ;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE GETDATACLIENTBYACCOUNT
    (
        INUACCOUNT          IN MO_MOTIVE_PAYMENT.ACCOUNT%TYPE,
        ONUIDENTTYPEID      OUT GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ONUCLIENTIDENT      OUT GE_SUBSCRIBER.IDENTIFICATION%TYPE,
        OSBCLIENTNAME       OUT GE_SUBSCRIBER.SUBSCRIBER_NAME%TYPE,
        OSBCLIENTLASTNAME   OUT GE_SUBSCRIBER.SUBS_LAST_NAME%TYPE
    )
	IS
        NUSUBSCRIBERID  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        
        RCMOTIVEPAYMENT DAMO_MOTIVE_PAYMENT.STYMO_MOTIVE_PAYMENT;
        RCMOTIVE        DAMO_MOTIVE.STYMO_MOTIVE;
        RCSUBSCRIBER    DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;
        
        EXNOTEXISTREQUESTBYBILL EXCEPTION;
	BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOMotivePayment.GetDataClientByAccount. Cuenta:['||INUACCOUNT||']',15);

        
        FOR REC IN MO_BCMOTIVEPAYMENT.CUMOTIVEPAYMENTBYACCOUNT(INUACCOUNT) LOOP
            RCMOTIVEPAYMENT := REC;
        END LOOP;
        UT_TRACE.TRACE('Registro:['||RCMOTIVEPAYMENT.MOTIVE_PAYMENT_ID||']Motivo:['||RCMOTIVEPAYMENT.MOTIVE_ID||']',16);
        
        
        IF RCMOTIVEPAYMENT.MOTIVE_ID IS NULL THEN
            RAISE EXNOTEXISTREQUESTBYBILL;
        END IF;

        
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(RCMOTIVEPAYMENT.MOTIVE_ID);
        
        
        NUSUBSCRIBERID := DAMO_PACKAGES.FNUGETSUBSCRIBER_ID(RCMOTIVE.PACKAGE_ID);

        IF (NUSUBSCRIBERID IS NOT NULL) THEN
            
            RCSUBSCRIBER := DAGE_SUBSCRIBER.FRCGETRECORD(NUSUBSCRIBERID);
        
            ONUIDENTTYPEID := RCSUBSCRIBER.IDENT_TYPE_ID;
            ONUCLIENTIDENT := RCSUBSCRIBER.IDENTIFICATION;
            OSBCLIENTNAME := RCSUBSCRIBER.SUBSCRIBER_NAME;
            OSBCLIENTLASTNAME := RCSUBSCRIBER.SUBS_LAST_NAME;
        END IF;

        UT_TRACE.TRACE('Tipo Ide:['||ONUIDENTTYPEID||']Identificacion:['||ONUCLIENTIDENT||']Nombre:['||OSBCLIENTNAME||']Apellido:['||OSBCLIENTLASTNAME||']',16);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOMotivePayment.GetDataClientByAccount',15);
    EXCEPTION
        WHEN EXNOTEXISTREQUESTBYBILL THEN
            ERRORS.SETERROR(MO_BOCONSTERROR.CNUNOTEXISTREQUESTBYBILL,TO_CHAR(INUACCOUNT));
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END;
	
	
    PROCEDURE ACCOUNTHASPAYMENT
    (
        INUMOPACKAGE_ID       IN    MO_PACKAGE_PAYMENT.PACKAGE_ID%TYPE,
        ONUACCOUNT            OUT   MO_MOTIVE_PAYMENT.ACCOUNT%TYPE,
        ONUBALANCE            OUT   CUENCOBR.CUCOSACU%TYPE
    )
    IS
    	
        NUACCOUNT             MO_MOTIVE_PAYMENT.ACCOUNT%TYPE;
        NUBALANCE             CUENCOBR.CUCOSACU%TYPE;
        TBBILLS               DAMO_MOTIVE_PAYMENT.TYTBACCOUNT;
        NUTOTALVAL            NUMBER;
        NUINDEX               NUMBER;
    BEGIN
        UT_TRACE.TRACE('[INICIO] MO_BOMotivePayment.AccountHasPayment.'
            || ' inuMoPackage_Id: ['||INUMOPACKAGE_ID||']', 5);

        
        IF ( CUBILLS%ISOPEN ) THEN
            CLOSE CUBILLS;
        END IF;

        
        OPEN CUBILLS(INUMOPACKAGE_ID);

        FETCH CUBILLS BULK COLLECT INTO TBBILLS;

        CLOSE CUBILLS;
        
        
        IF ( TBBILLS.FIRST IS NULL ) THEN
            ONUACCOUNT := NULL;
            ONUBALANCE := 0;
        END IF;

        
        NUINDEX := TBBILLS.FIRST;
        WHILE (NUINDEX IS NOT NULL) LOOP
            UT_TRACE.TRACE('Valida saldo de factura ['||TBBILLS(NUINDEX)||']',6);
            PKBCCUENCOBR.GETBALANCEBYBILL(TBBILLS(NUINDEX), ONUBALANCE, NUTOTALVAL);
            
            IF (ONUBALANCE > 0 ) THEN
                UT_TRACE.TRACE('Factura con Saldo: '||ONUBALANCE,6);
                ONUACCOUNT := TBBILLS(NUINDEX);
                EXIT;
            END IF;
            NUINDEX := TBBILLS.NEXT(NUINDEX);
        END LOOP;

        UT_TRACE.TRACE('[FIN] MO_BOMotivePayment.AccountHasPayment.'
            || ' inuMoPackage_Id: ['||INUMOPACKAGE_ID||']', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUBILLS%ISOPEN ) THEN
                CLOSE CUBILLS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUBILLS%ISOPEN ) THEN
                CLOSE CUBILLS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION FBLEXIST
    (    INUPACKPAYMENT IN  MO_PACKAGE_PAYMENT.PACKAGE_PAYMENT_ID%TYPE
    ) RETURN  BOOLEAN
    IS
        NUMOTPAYMENTID        MO_MOTIVE_PAYMENT.MOTIVE_PAYMENT_ID%TYPE;
        NUACCOUNT             MO_MOTIVE_PAYMENT.ACCOUNT%TYPE;
    BEGIN
        UT_TRACE.TRACE('[Inicio] MO_BOMotivePayment.fblExist inuPackPayment: ['||INUPACKPAYMENT||']', 5);
        OPEN CUMOTIVEPAYMENT ( INUPACKPAYMENT );
    	FETCH CUMOTIVEPAYMENT INTO  NUMOTPAYMENTID, NUACCOUNT;

   		IF (CUMOTIVEPAYMENT%FOUND) THEN
            CLOSE CUMOTIVEPAYMENT;
            UT_TRACE.TRACE('[Fin] MO_BOMotivePayment.fblExist RETURN TRUE', 5);
            RETURN TRUE;
        END IF;

        CLOSE CUMOTIVEPAYMENT;
        UT_TRACE.TRACE('[Fin] MO_BOMotivePayment.fblExist RETURN FALSE', 5);
        RETURN FALSE ;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FNUGETPRODUCTBYACCOUNT
    (
        INUACCOUNT          IN MO_MOTIVE_PAYMENT.ACCOUNT%TYPE
    )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE
	IS
        RCMOTIVEPAYMENT DAMO_MOTIVE_PAYMENT.STYMO_MOTIVE_PAYMENT;
        RCPACKAGEPAYMENT DAMO_PACKAGE_PAYMENT.STYMO_PACKAGE_PAYMENT;
        NUPRODUCTID     PR_PRODUCT.PRODUCT_ID%TYPE;

        EXNOTEXISTREQUESTBYBILL EXCEPTION;
	BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOMotivePayment.fnuGetProductByAccount. Cuenta:['||INUACCOUNT||']',15);

        
        FOR REC IN MO_BCMOTIVEPAYMENT.CUMOTIVEPAYMENTBYACCOUNT(INUACCOUNT) LOOP
            RCMOTIVEPAYMENT := REC;
        END LOOP;
        UT_TRACE.TRACE('Registro:['||RCMOTIVEPAYMENT.MOTIVE_PAYMENT_ID||']Motivo:['||RCMOTIVEPAYMENT.MOTIVE_ID||']',16);

        
        IF RCMOTIVEPAYMENT.PACKAGE_PAYMENT_ID IS NULL THEN
            RAISE EXNOTEXISTREQUESTBYBILL;
        END IF;

        
        RCPACKAGEPAYMENT := DAMO_PACKAGE_PAYMENT.FRCGETRECORD(RCMOTIVEPAYMENT.PACKAGE_PAYMENT_ID);

        NUPRODUCTID := MO_BOPACKAGES.FNUFINDPRODUCTID(RCPACKAGEPAYMENT.PACKAGE_ID);

        UT_TRACE.TRACE('Producto:['||NUPRODUCTID||']',16);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOMotivePayment.fnuGetProductByAccount',15);
        RETURN NUPRODUCTID;
    EXCEPTION
        WHEN EXNOTEXISTREQUESTBYBILL THEN
            ERRORS.SETERROR(MO_BOCONSTERROR.CNUNOTEXISTREQUESTBYBILL,TO_CHAR(INUACCOUNT));
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END FNUGETPRODUCTBYACCOUNT;
	
	PROCEDURE ACCOUNTBALANCEBYPACKAGE
    (
        INUMOPACKAGE_ID       IN    MO_PACKAGE_PAYMENT.PACKAGE_ID%TYPE,
        ONUACCOUNT            OUT   MO_MOTIVE_PAYMENT.ACCOUNT%TYPE,
        ONUBALANCE            OUT   CUENCOBR.CUCOSACU%TYPE
    )
    IS
    	
        NUACCOUNT             MO_MOTIVE_PAYMENT.ACCOUNT%TYPE;
        NUBALANCE             CUENCOBR.CUCOSACU%TYPE;
    BEGIN
        UT_TRACE.TRACE('[INICIO] MO_BOMotivePayment.AccountBalanceByPackage.'
            || ' inuMoPackage_Id: ['||INUMOPACKAGE_ID||']', 5);

        
        IF ( CUPACKAGEACCBAL%ISOPEN ) THEN
            CLOSE CUPACKAGEACCBAL;
        END IF;

        
        OPEN CUPACKAGEACCBAL(INUMOPACKAGE_ID);

        FETCH CUPACKAGEACCBAL INTO ONUACCOUNT, ONUBALANCE;

        
        IF ( CUPACKAGEACCBAL%NOTFOUND ) THEN
            ONUACCOUNT := NULL;
            ONUBALANCE := 0;
        END IF;

        CLOSE CUPACKAGEACCBAL;
        UT_TRACE.TRACE('[FIN] MO_BOMotivePayment.AccountBalanceByPackage.'
            || ' nuAccount: ['||NUACCOUNT||']', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPACKAGEACCBAL%ISOPEN ) THEN
                CLOSE CUPACKAGEACCBAL;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPACKAGEACCBAL%ISOPEN ) THEN
                CLOSE CUPACKAGEACCBAL;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ACCOUNTBALANCEBYPACKAGE;
END MO_BOMOTIVEPAYMENT;