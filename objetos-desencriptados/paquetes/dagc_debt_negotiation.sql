PACKAGE BODY DAGC_debt_negotiation
IS

    
    CNURECORD_NOT_EXIST CONSTANT NUMBER(1) := 1;
    CNURECORD_ALREADY_EXIST CONSTANT NUMBER(1) := 2;
    CNUAPPTABLEBUSSY CONSTANT NUMBER(4) := 6951;
    CNUINS_PK_NULL CONSTANT NUMBER(4):= 1682;
    CNURECORD_HAVE_CHILDREN CONSTANT NUMBER(4):= -2292;
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO201151';
    CSBTABLEPARAMETER   CONSTANT VARCHAR2(30) := 'GC_DEBT_NEGOTIATION';
	 CNUGEENTITYID CONSTANT VARCHAR2(30) := 3861; 

	
	CURSOR CULOCKRCBYPK 
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE
	)
	IS
		SELECT GC_DEBT_NEGOTIATION.*,GC_DEBT_NEGOTIATION.ROWID 
		FROM GC_DEBT_NEGOTIATION
		WHERE  DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID
		FOR UPDATE NOWAIT;

	
	CURSOR CULOCKRCBYROWID 
	(
		IRIROWID IN VARCHAR2
	)
	IS
		SELECT GC_DEBT_NEGOTIATION.*,GC_DEBT_NEGOTIATION.ROWID 
		FROM GC_DEBT_NEGOTIATION
		WHERE 
			ROWID = IRIROWID
		FOR UPDATE NOWAIT;


	
	TYPE TYRFGC_DEBT_NEGOTIATION IS REF CURSOR;

	
	RCRECOFTAB TYRCGC_DEBT_NEGOTIATION;

	RCDATA CURECORD%ROWTYPE;

    BLDAO_USE_CACHE    BOOLEAN := NULL;


	
	FUNCTION FSBGETMESSAGEDESCRIPTION
	RETURN VARCHAR2
	IS 
	      SBTABLEDESCRIPTION VARCHAR2(32000);
	BEGIN
	    IF (CNUGEENTITYID > 0 AND DAGE_ENTITY.FBLEXIST (CNUGEENTITYID))  THEN
	          SBTABLEDESCRIPTION:= DAGE_ENTITY.FSBGETDISPLAY_NAME(CNUGEENTITYID);
	    ELSE
	          SBTABLEDESCRIPTION:= CSBTABLEPARAMETER;
	    END IF;

		RETURN SBTABLEDESCRIPTION ;
	END;

	PROCEDURE GETDAO_USE_CACHE
	IS
	BEGIN
	    IF ( BLDAO_USE_CACHE IS NULL ) THEN
	        BLDAO_USE_CACHE :=  GE_BOPARAMETER.FSBGET('DAO_USE_CACHE') = 'Y';
	    END IF;
	END;
	FUNCTION FSBPRIMARYKEY( RCI IN STYGC_DEBT_NEGOTIATION DEFAULT RCDATA )
	RETURN VARCHAR2
	IS
		SBPK VARCHAR2(500);
	BEGIN
		SBPK:='[';
		SBPK:=SBPK||UT_CONVERT.FSBTOCHAR(RCI.DEBT_NEGOTIATION_ID);
		SBPK:=SBPK||']';
		RETURN SBPK;
	END;
	PROCEDURE LOCKBYPK
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		ORCGC_DEBT_NEGOTIATION  OUT STYGC_DEBT_NEGOTIATION
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

		OPEN CULOCKRCBYPK
		(
			INUDEBT_NEGOTIATION_ID
		);

		FETCH CULOCKRCBYPK INTO ORCGC_DEBT_NEGOTIATION;
		IF CULOCKRCBYPK%NOTFOUND  THEN
			CLOSE CULOCKRCBYPK;
			RAISE NO_DATA_FOUND;
		END IF;
		CLOSE CULOCKRCBYPK ;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF CULOCKRCBYPK%ISOPEN THEN
				CLOSE CULOCKRCBYPK;
			END IF;
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '|| FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
		WHEN EX.RESOURCE_BUSY THEN
			IF CULOCKRCBYPK%ISOPEN THEN
				CLOSE CULOCKRCBYPK;
			END IF;
			ERRORS.SETERROR(CNUAPPTABLEBUSSY,FSBPRIMARYKEY(RCERROR)||'|'|| FSBGETMESSAGEDESCRIPTION );
			RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			IF CULOCKRCBYPK%ISOPEN THEN
				CLOSE CULOCKRCBYPK;
			END IF;
			RAISE;
	END;
	PROCEDURE LOCKBYROWID
	(
		IRIROWID    IN  VARCHAR2,
		ORCGC_DEBT_NEGOTIATION  OUT STYGC_DEBT_NEGOTIATION
	)
	IS
	BEGIN
		OPEN CULOCKRCBYROWID
		(
			IRIROWID
		);

		FETCH CULOCKRCBYROWID INTO ORCGC_DEBT_NEGOTIATION;
		IF CULOCKRCBYROWID%NOTFOUND  THEN
			CLOSE CULOCKRCBYROWID;
			RAISE NO_DATA_FOUND;
		END IF;
		CLOSE CULOCKRCBYROWID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF CULOCKRCBYROWID%ISOPEN THEN
				CLOSE CULOCKRCBYROWID;
			END IF;
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' rowid=['||IRIROWID||']');
			RAISE EX.CONTROLLED_ERROR;
		WHEN EX.RESOURCE_BUSY THEN
			IF CULOCKRCBYROWID%ISOPEN THEN
				CLOSE CULOCKRCBYROWID;
			END IF;
			ERRORS.SETERROR(CNUAPPTABLEBUSSY,'rowid=['||IRIROWID||']|'||FSBGETMESSAGEDESCRIPTION );
			RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			IF CULOCKRCBYROWID%ISOPEN THEN
				CLOSE CULOCKRCBYROWID;
			END IF;
			RAISE;
	END;
	PROCEDURE DELRECORDOFTABLES
	(
		ITBGC_DEBT_NEGOTIATION  IN OUT NOCOPY TYTBGC_DEBT_NEGOTIATION
	)
	IS
	BEGIN
			RCRECOFTAB.DEBT_NEGOTIATION_ID.DELETE;
			RCRECOFTAB.PAYMENT_METHOD.DELETE;
			RCRECOFTAB.PROCCONS.DELETE;
			RCRECOFTAB.PACKAGE_ID.DELETE;
			RCRECOFTAB.REQUIRE_SIGNING.DELETE;
			RCRECOFTAB.REQUIRE_PAYMENT.DELETE;
			RCRECOFTAB.COUPON_ID.DELETE;
			RCRECOFTAB.SIGNED.DELETE;
			RCRECOFTAB.SIGN_TERMINAL.DELETE;
			RCRECOFTAB.SIGN_DATE.DELETE;
			RCRECOFTAB.PERSON_ID.DELETE;
			RCRECOFTAB.PAYM_AGREEM_PLAN_ID.DELETE;
			RCRECOFTAB.ROW_ID.DELETE;
	END;
	PROCEDURE FILLRECORDOFTABLES
	(
		ITBGC_DEBT_NEGOTIATION  IN OUT NOCOPY TYTBGC_DEBT_NEGOTIATION,
		OBLUSEROWID OUT BOOLEAN
	)
	IS
	BEGIN
		DELRECORDOFTABLES(ITBGC_DEBT_NEGOTIATION);

		FOR N IN ITBGC_DEBT_NEGOTIATION.FIRST .. ITBGC_DEBT_NEGOTIATION.LAST LOOP
			RCRECOFTAB.DEBT_NEGOTIATION_ID(N) := ITBGC_DEBT_NEGOTIATION(N).DEBT_NEGOTIATION_ID;
			RCRECOFTAB.PAYMENT_METHOD(N) := ITBGC_DEBT_NEGOTIATION(N).PAYMENT_METHOD;
			RCRECOFTAB.PROCCONS(N) := ITBGC_DEBT_NEGOTIATION(N).PROCCONS;
			RCRECOFTAB.PACKAGE_ID(N) := ITBGC_DEBT_NEGOTIATION(N).PACKAGE_ID;
			RCRECOFTAB.REQUIRE_SIGNING(N) := ITBGC_DEBT_NEGOTIATION(N).REQUIRE_SIGNING;
			RCRECOFTAB.REQUIRE_PAYMENT(N) := ITBGC_DEBT_NEGOTIATION(N).REQUIRE_PAYMENT;
			RCRECOFTAB.COUPON_ID(N) := ITBGC_DEBT_NEGOTIATION(N).COUPON_ID;
			RCRECOFTAB.SIGNED(N) := ITBGC_DEBT_NEGOTIATION(N).SIGNED;
			RCRECOFTAB.SIGN_TERMINAL(N) := ITBGC_DEBT_NEGOTIATION(N).SIGN_TERMINAL;
			RCRECOFTAB.SIGN_DATE(N) := ITBGC_DEBT_NEGOTIATION(N).SIGN_DATE;
			RCRECOFTAB.PERSON_ID(N) := ITBGC_DEBT_NEGOTIATION(N).PERSON_ID;
			RCRECOFTAB.PAYM_AGREEM_PLAN_ID(N) := ITBGC_DEBT_NEGOTIATION(N).PAYM_AGREEM_PLAN_ID;
			RCRECOFTAB.ROW_ID(N) := ITBGC_DEBT_NEGOTIATION(N).ROWID;

			
			OBLUSEROWID:=RCRECOFTAB.ROW_ID(N) IS NOT NULL;
		END LOOP;
	END;

	PROCEDURE LOAD
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE
	)
	IS
		RCRECORDNULL CURECORD%ROWTYPE;
	BEGIN
		IF CURECORD%ISOPEN THEN
			CLOSE CURECORD;
		END IF;
		OPEN CURECORD
		(
			INUDEBT_NEGOTIATION_ID
		);

		FETCH CURECORD INTO RCDATA;
		IF CURECORD%NOTFOUND  THEN
			CLOSE CURECORD;
			RCDATA := RCRECORDNULL;
			RAISE NO_DATA_FOUND;
		END IF;
		CLOSE CURECORD;
	END;
	PROCEDURE LOADBYROWID
	(
		IRIROWID IN VARCHAR2
	)
	IS
		RCRECORDNULL CURECORDBYROWID%ROWTYPE;
	BEGIN
		IF CURECORDBYROWID%ISOPEN THEN
			CLOSE CURECORDBYROWID;
		END IF;
		OPEN CURECORDBYROWID
		(
			IRIROWID
		);

		FETCH CURECORDBYROWID INTO RCDATA;
		IF CURECORDBYROWID%NOTFOUND  THEN
			CLOSE CURECORDBYROWID;
			RCDATA := RCRECORDNULL;
			RAISE NO_DATA_FOUND;
		END IF;
		CLOSE CURECORDBYROWID;
	END;
	FUNCTION FBLALREADYLOADED
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE
	)
	RETURN BOOLEAN
	IS
	BEGIN
		IF (
			INUDEBT_NEGOTIATION_ID = RCDATA.DEBT_NEGOTIATION_ID
		   ) THEN
			RETURN ( TRUE );
		END IF;
		RETURN (FALSE);
	END;

	

	
    FUNCTION FSBVERSION
    RETURN VARCHAR2
	IS
	BEGIN
		RETURN CSBVERSION;
	END;
	PROCEDURE CLEARMEMORY
	IS
		RCRECORDNULL CURECORD%ROWTYPE;
	BEGIN
		RCDATA := RCRECORDNULL;
	END;
	FUNCTION FBLEXIST
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE
	)
	RETURN BOOLEAN
	IS
	BEGIN
		LOAD
		(
			INUDEBT_NEGOTIATION_ID
		);
		RETURN(TRUE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN(FALSE);
	END;
	PROCEDURE ACCKEY
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN		RCERROR.DEBT_NEGOTIATION_ID:=INUDEBT_NEGOTIATION_ID;

		LOAD
		(
			INUDEBT_NEGOTIATION_ID
		);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE ACCKEYBYROWID
	(
		IRIROWID    IN ROWID
	)
	IS
	BEGIN
		LOADBYROWID
		(
			IRIROWID
		);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
            ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' rowid=['||IRIROWID||']');
            RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE VALDUPLICATE
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE
	)
	IS
	BEGIN
		LOAD
		( 
			INUDEBT_NEGOTIATION_ID
		);
		ERRORS.SETERROR(CNURECORD_ALREADY_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY);
		RAISE EX.CONTROLLED_ERROR;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			NULL;
	END;
	PROCEDURE GETRECORD
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		ORCRECORD OUT NOCOPY STYGC_DEBT_NEGOTIATION
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN		RCERROR.DEBT_NEGOTIATION_ID:=INUDEBT_NEGOTIATION_ID;

		LOAD
		(
			INUDEBT_NEGOTIATION_ID
		);
		ORCRECORD := RCDATA;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '|| FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	FUNCTION FRCGETRECORD
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE
	)
	RETURN STYGC_DEBT_NEGOTIATION
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID:=INUDEBT_NEGOTIATION_ID;

		LOAD
		(
			INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '|| FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	FUNCTION FRCGETRCDATA
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE
	)
	RETURN STYGC_DEBT_NEGOTIATION
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID:=INUDEBT_NEGOTIATION_ID;
        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
			INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA);
		END IF;
		LOAD
		(
			INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '|| FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;

	FUNCTION FRCGETRCDATA
	RETURN STYGC_DEBT_NEGOTIATION
	IS
	BEGIN
		RETURN(RCDATA);
	END;
	PROCEDURE GETRECORDS
	(
		ISBQUERY IN VARCHAR2,
		OTBRESULT OUT NOCOPY TYTBGC_DEBT_NEGOTIATION
	)
	IS
		RFGC_DEBT_NEGOTIATION TYRFGC_DEBT_NEGOTIATION;
		N NUMBER(4) := 1;
		SBFULLQUERY VARCHAR2 (32000) := 'SELECT GC_debt_negotiation.*, GC_debt_negotiation.rowid FROM GC_debt_negotiation';
		NUMAXTBRECORDS NUMBER(5):=GE_BOPARAMETER.FNUGET('MAXREGSQUERY');
	BEGIN
		OTBRESULT.DELETE;
		IF ISBQUERY IS NOT NULL AND LENGTH(ISBQUERY) > 0 THEN
			SBFULLQUERY := SBFULLQUERY||' WHERE '||ISBQUERY;
		END IF;

		OPEN RFGC_DEBT_NEGOTIATION FOR SBFULLQUERY;

		FETCH RFGC_DEBT_NEGOTIATION BULK COLLECT INTO OTBRESULT;

		CLOSE RFGC_DEBT_NEGOTIATION;
		IF OTBRESULT.COUNT = 0  THEN
			RAISE NO_DATA_FOUND;
		END IF;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
	END;
	FUNCTION FRFGETRECORDS
	(
		ISBCRITERIA IN VARCHAR2 DEFAULT NULL,
		IBLLOCK IN BOOLEAN DEFAULT FALSE
	)
	RETURN TYREFCURSOR
	IS
		RFQUERY TYREFCURSOR;
		SBSQL VARCHAR2 (32000) := 'select GC_debt_negotiation.*, GC_debt_negotiation.rowid FROM GC_debt_negotiation';
	BEGIN
		IF ISBCRITERIA IS NOT NULL THEN
			SBSQL := SBSQL||' where '||ISBCRITERIA;
		END IF;
		IF IBLLOCK THEN
			SBSQL := SBSQL||' for update nowait';
		END IF;
		OPEN RFQUERY FOR SBSQL;
		RETURN(RFQUERY);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE INSRECORD
	(
		IRCGC_DEBT_NEGOTIATION IN STYGC_DEBT_NEGOTIATION
	)
	IS
		RIROWID VARCHAR2(200);
	BEGIN
		INSRECORD(IRCGC_DEBT_NEGOTIATION,RIROWID);
	END;
	PROCEDURE INSRECORD
	(
		IRCGC_DEBT_NEGOTIATION IN STYGC_DEBT_NEGOTIATION,
        ORIROWID   OUT VARCHAR2
	)
	IS
	BEGIN
		IF IRCGC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID IS NULL THEN
			ERRORS.SETERROR(CNUINS_PK_NULL,
			                FSBGETMESSAGEDESCRIPTION||'|Debt_Negotiation_Id');
			RAISE EX.CONTROLLED_ERROR;
		END IF;

		INSERT INTO GC_DEBT_NEGOTIATION
		(
			DEBT_NEGOTIATION_ID,
			PAYMENT_METHOD,
			PROCCONS,
			PACKAGE_ID,
			REQUIRE_SIGNING,
			REQUIRE_PAYMENT,
			COUPON_ID,
			SIGNED,
			SIGN_TERMINAL,
			SIGN_DATE,
			PERSON_ID,
			PAYM_AGREEM_PLAN_ID
		)
		VALUES
		(
			IRCGC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID,
			IRCGC_DEBT_NEGOTIATION.PAYMENT_METHOD,
			IRCGC_DEBT_NEGOTIATION.PROCCONS,
			IRCGC_DEBT_NEGOTIATION.PACKAGE_ID,
			IRCGC_DEBT_NEGOTIATION.REQUIRE_SIGNING,
			IRCGC_DEBT_NEGOTIATION.REQUIRE_PAYMENT,
			IRCGC_DEBT_NEGOTIATION.COUPON_ID,
			IRCGC_DEBT_NEGOTIATION.SIGNED,
			IRCGC_DEBT_NEGOTIATION.SIGN_TERMINAL,
			IRCGC_DEBT_NEGOTIATION.SIGN_DATE,
			IRCGC_DEBT_NEGOTIATION.PERSON_ID,
			IRCGC_DEBT_NEGOTIATION.PAYM_AGREEM_PLAN_ID
		)
            RETURNING
			ROWID
		INTO
			ORIROWID;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			ERRORS.SETERROR(CNURECORD_ALREADY_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(IRCGC_DEBT_NEGOTIATION));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE INSRECORDS
	(
		IOTBGC_DEBT_NEGOTIATION IN OUT NOCOPY TYTBGC_DEBT_NEGOTIATION
	)
	IS
		BLUSEROWID BOOLEAN;
	BEGIN
		FILLRECORDOFTABLES(IOTBGC_DEBT_NEGOTIATION,BLUSEROWID);
		FORALL N IN IOTBGC_DEBT_NEGOTIATION.FIRST..IOTBGC_DEBT_NEGOTIATION.LAST
			INSERT INTO GC_DEBT_NEGOTIATION
			(
				DEBT_NEGOTIATION_ID,
				PAYMENT_METHOD,
				PROCCONS,
				PACKAGE_ID,
				REQUIRE_SIGNING,
				REQUIRE_PAYMENT,
				COUPON_ID,
				SIGNED,
				SIGN_TERMINAL,
				SIGN_DATE,
				PERSON_ID,
				PAYM_AGREEM_PLAN_ID
			)
			VALUES
			(
				RCRECOFTAB.DEBT_NEGOTIATION_ID(N),
				RCRECOFTAB.PAYMENT_METHOD(N),
				RCRECOFTAB.PROCCONS(N),
				RCRECOFTAB.PACKAGE_ID(N),
				RCRECOFTAB.REQUIRE_SIGNING(N),
				RCRECOFTAB.REQUIRE_PAYMENT(N),
				RCRECOFTAB.COUPON_ID(N),
				RCRECOFTAB.SIGNED(N),
				RCRECOFTAB.SIGN_TERMINAL(N),
				RCRECOFTAB.SIGN_DATE(N),
				RCRECOFTAB.PERSON_ID(N),
				RCRECOFTAB.PAYM_AGREEM_PLAN_ID(N)
			);
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			ERRORS.SETERROR(CNURECORD_ALREADY_EXIST,FSBGETMESSAGEDESCRIPTION);
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE DELRECORD
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 1
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;


		DELETE
		FROM GC_DEBT_NEGOTIATION
		WHERE
       		DEBT_NEGOTIATION_ID=INUDEBT_NEGOTIATION_ID;
            IF SQL%NOTFOUND THEN
                RAISE NO_DATA_FOUND;
            END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
         RAISE EX.CONTROLLED_ERROR;
		WHEN EX.RECORD_HAVE_CHILDREN THEN
			ERRORS.SETERROR(CNURECORD_HAVE_CHILDREN,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE DELBYROWID
	(
		IRIROWID    IN ROWID,
		INULOCK IN NUMBER DEFAULT 1
	)
	IS
		RCRECORDNULL CURECORD%ROWTYPE;
		RCERROR  STYGC_DEBT_NEGOTIATION;
	BEGIN
		IF INULOCK=1 THEN
			LOCKBYROWID(IRIROWID,RCDATA);
		END IF;


		DELETE
		FROM GC_DEBT_NEGOTIATION
		WHERE
			ROWID = IRIROWID
		RETURNING
			DEBT_NEGOTIATION_ID
		INTO
			RCERROR.DEBT_NEGOTIATION_ID;
            IF SQL%NOTFOUND THEN
			 RAISE NO_DATA_FOUND;
		    END IF;
            IF RCDATA.ROWID=IRIROWID THEN
			 RCDATA := RCRECORDNULL;
		    END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
            ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' rowid=['||IRIROWID||']');
            RAISE EX.CONTROLLED_ERROR;
		WHEN EX.RECORD_HAVE_CHILDREN THEN
            ERRORS.SETERROR(CNURECORD_HAVE_CHILDREN,FSBGETMESSAGEDESCRIPTION||' '||' rowid=['||IRIROWID||']');
            RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE DELRECORDS
	(
		IOTBGC_DEBT_NEGOTIATION IN OUT NOCOPY TYTBGC_DEBT_NEGOTIATION,
		INULOCK IN NUMBER DEFAULT 1
	)
	IS
		BLUSEROWID BOOLEAN;
		RCAUX STYGC_DEBT_NEGOTIATION;
	BEGIN
		FILLRECORDOFTABLES(IOTBGC_DEBT_NEGOTIATION, BLUSEROWID);
        IF ( BLUSEROWID ) THEN
			IF INULOCK = 1 THEN
				FOR N IN IOTBGC_DEBT_NEGOTIATION.FIRST .. IOTBGC_DEBT_NEGOTIATION.LAST LOOP
					LOCKBYROWID
					(
						RCRECOFTAB.ROW_ID(N),
						RCAUX
					);
				END LOOP;
			END IF;

			FORALL N IN IOTBGC_DEBT_NEGOTIATION.FIRST .. IOTBGC_DEBT_NEGOTIATION.LAST
				DELETE
				FROM GC_DEBT_NEGOTIATION
				WHERE
					ROWID = RCRECOFTAB.ROW_ID(N);
		ELSE
			IF INULOCK = 1 THEN
				FOR N IN IOTBGC_DEBT_NEGOTIATION.FIRST .. IOTBGC_DEBT_NEGOTIATION.LAST LOOP
					LOCKBYPK
					(
						RCRECOFTAB.DEBT_NEGOTIATION_ID(N),
						RCAUX
					);
				END LOOP;
			END IF;

			FORALL N IN IOTBGC_DEBT_NEGOTIATION.FIRST .. IOTBGC_DEBT_NEGOTIATION.LAST
				DELETE
				FROM GC_DEBT_NEGOTIATION
				WHERE
		         	DEBT_NEGOTIATION_ID = RCRECOFTAB.DEBT_NEGOTIATION_ID(N);
		END IF;
	EXCEPTION
            WHEN EX.RECORD_HAVE_CHILDREN THEN
                  ERRORS.SETERROR(CNURECORD_HAVE_CHILDREN,FSBGETMESSAGEDESCRIPTION);
                  RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDRECORD
	(
		IRCGC_DEBT_NEGOTIATION IN STYGC_DEBT_NEGOTIATION,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		NUDEBT_NEGOTIATION_ID	GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE;
	BEGIN
		IF IRCGC_DEBT_NEGOTIATION.ROWID IS NOT NULL THEN
			IF INULOCK=1 THEN
				LOCKBYROWID(IRCGC_DEBT_NEGOTIATION.ROWID,RCDATA);
			END IF;
			UPDATE GC_DEBT_NEGOTIATION
			SET
				PAYMENT_METHOD = IRCGC_DEBT_NEGOTIATION.PAYMENT_METHOD,
				PROCCONS = IRCGC_DEBT_NEGOTIATION.PROCCONS,
				PACKAGE_ID = IRCGC_DEBT_NEGOTIATION.PACKAGE_ID,
				REQUIRE_SIGNING = IRCGC_DEBT_NEGOTIATION.REQUIRE_SIGNING,
				REQUIRE_PAYMENT = IRCGC_DEBT_NEGOTIATION.REQUIRE_PAYMENT,
				COUPON_ID = IRCGC_DEBT_NEGOTIATION.COUPON_ID,
				SIGNED = IRCGC_DEBT_NEGOTIATION.SIGNED,
				SIGN_TERMINAL = IRCGC_DEBT_NEGOTIATION.SIGN_TERMINAL,
				SIGN_DATE = IRCGC_DEBT_NEGOTIATION.SIGN_DATE,
				PERSON_ID = IRCGC_DEBT_NEGOTIATION.PERSON_ID,
				PAYM_AGREEM_PLAN_ID = IRCGC_DEBT_NEGOTIATION.PAYM_AGREEM_PLAN_ID
			WHERE
				ROWID = IRCGC_DEBT_NEGOTIATION.ROWID
			RETURNING
				DEBT_NEGOTIATION_ID
			INTO
				NUDEBT_NEGOTIATION_ID;
		ELSE
			IF INULOCK=1 THEN
				LOCKBYPK
				(
					IRCGC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID,
					RCDATA
				);
			END IF;

			UPDATE GC_DEBT_NEGOTIATION
			SET
				PAYMENT_METHOD = IRCGC_DEBT_NEGOTIATION.PAYMENT_METHOD,
				PROCCONS = IRCGC_DEBT_NEGOTIATION.PROCCONS,
				PACKAGE_ID = IRCGC_DEBT_NEGOTIATION.PACKAGE_ID,
				REQUIRE_SIGNING = IRCGC_DEBT_NEGOTIATION.REQUIRE_SIGNING,
				REQUIRE_PAYMENT = IRCGC_DEBT_NEGOTIATION.REQUIRE_PAYMENT,
				COUPON_ID = IRCGC_DEBT_NEGOTIATION.COUPON_ID,
				SIGNED = IRCGC_DEBT_NEGOTIATION.SIGNED,
				SIGN_TERMINAL = IRCGC_DEBT_NEGOTIATION.SIGN_TERMINAL,
				SIGN_DATE = IRCGC_DEBT_NEGOTIATION.SIGN_DATE,
				PERSON_ID = IRCGC_DEBT_NEGOTIATION.PERSON_ID,
				PAYM_AGREEM_PLAN_ID = IRCGC_DEBT_NEGOTIATION.PAYM_AGREEM_PLAN_ID
			WHERE
				DEBT_NEGOTIATION_ID = IRCGC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID
			RETURNING
				DEBT_NEGOTIATION_ID
			INTO
				NUDEBT_NEGOTIATION_ID;
		END IF;
		IF
			NUDEBT_NEGOTIATION_ID IS NULL
		THEN
			RAISE NO_DATA_FOUND;
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||FSBPRIMARYKEY(IRCGC_DEBT_NEGOTIATION));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDRECORDS
	(
		IOTBGC_DEBT_NEGOTIATION IN OUT NOCOPY TYTBGC_DEBT_NEGOTIATION,
		INULOCK IN NUMBER DEFAULT 1
	)
	IS
		BLUSEROWID BOOLEAN;    
		RCAUX STYGC_DEBT_NEGOTIATION;
	BEGIN
		FILLRECORDOFTABLES(IOTBGC_DEBT_NEGOTIATION,BLUSEROWID);
		IF BLUSEROWID THEN
			IF INULOCK = 1 THEN
				FOR N IN IOTBGC_DEBT_NEGOTIATION.FIRST .. IOTBGC_DEBT_NEGOTIATION.LAST LOOP
					LOCKBYROWID
					(
						RCRECOFTAB.ROW_ID(N),
						RCAUX
					);
				END LOOP;
			END IF;

			FORALL N IN IOTBGC_DEBT_NEGOTIATION.FIRST .. IOTBGC_DEBT_NEGOTIATION.LAST
				UPDATE GC_DEBT_NEGOTIATION
				SET
					PAYMENT_METHOD = RCRECOFTAB.PAYMENT_METHOD(N),
					PROCCONS = RCRECOFTAB.PROCCONS(N),
					PACKAGE_ID = RCRECOFTAB.PACKAGE_ID(N),
					REQUIRE_SIGNING = RCRECOFTAB.REQUIRE_SIGNING(N),
					REQUIRE_PAYMENT = RCRECOFTAB.REQUIRE_PAYMENT(N),
					COUPON_ID = RCRECOFTAB.COUPON_ID(N),
					SIGNED = RCRECOFTAB.SIGNED(N),
					SIGN_TERMINAL = RCRECOFTAB.SIGN_TERMINAL(N),
					SIGN_DATE = RCRECOFTAB.SIGN_DATE(N),
					PERSON_ID = RCRECOFTAB.PERSON_ID(N),
					PAYM_AGREEM_PLAN_ID = RCRECOFTAB.PAYM_AGREEM_PLAN_ID(N)
				WHERE
					ROWID =  RCRECOFTAB.ROW_ID(N);
		ELSE
			IF INULOCK = 1 THEN
				FOR N IN IOTBGC_DEBT_NEGOTIATION.FIRST .. IOTBGC_DEBT_NEGOTIATION.LAST LOOP
					LOCKBYPK
					(
						RCRECOFTAB.DEBT_NEGOTIATION_ID(N),
						RCAUX
					);
				END LOOP;
			END IF;

			FORALL N IN IOTBGC_DEBT_NEGOTIATION.FIRST .. IOTBGC_DEBT_NEGOTIATION.LAST
				UPDATE GC_DEBT_NEGOTIATION
				SET
					PAYMENT_METHOD = RCRECOFTAB.PAYMENT_METHOD(N),
					PROCCONS = RCRECOFTAB.PROCCONS(N),
					PACKAGE_ID = RCRECOFTAB.PACKAGE_ID(N),
					REQUIRE_SIGNING = RCRECOFTAB.REQUIRE_SIGNING(N),
					REQUIRE_PAYMENT = RCRECOFTAB.REQUIRE_PAYMENT(N),
					COUPON_ID = RCRECOFTAB.COUPON_ID(N),
					SIGNED = RCRECOFTAB.SIGNED(N),
					SIGN_TERMINAL = RCRECOFTAB.SIGN_TERMINAL(N),
					SIGN_DATE = RCRECOFTAB.SIGN_DATE(N),
					PERSON_ID = RCRECOFTAB.PERSON_ID(N),
					PAYM_AGREEM_PLAN_ID = RCRECOFTAB.PAYM_AGREEM_PLAN_ID(N)
				WHERE
					DEBT_NEGOTIATION_ID = RCRECOFTAB.DEBT_NEGOTIATION_ID(N)
;
		END IF;
	END;
	PROCEDURE UPDPAYMENT_METHOD
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		ISBPAYMENT_METHOD$ IN GC_DEBT_NEGOTIATION.PAYMENT_METHOD%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			PAYMENT_METHOD = ISBPAYMENT_METHOD$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PAYMENT_METHOD:= ISBPAYMENT_METHOD$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDPROCCONS
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INUPROCCONS$ IN GC_DEBT_NEGOTIATION.PROCCONS%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			PROCCONS = INUPROCCONS$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PROCCONS:= INUPROCCONS$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDPACKAGE_ID
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INUPACKAGE_ID$ IN GC_DEBT_NEGOTIATION.PACKAGE_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			PACKAGE_ID = INUPACKAGE_ID$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PACKAGE_ID:= INUPACKAGE_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDREQUIRE_SIGNING
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		ISBREQUIRE_SIGNING$ IN GC_DEBT_NEGOTIATION.REQUIRE_SIGNING%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			REQUIRE_SIGNING = ISBREQUIRE_SIGNING$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.REQUIRE_SIGNING:= ISBREQUIRE_SIGNING$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDREQUIRE_PAYMENT
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		ISBREQUIRE_PAYMENT$ IN GC_DEBT_NEGOTIATION.REQUIRE_PAYMENT%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			REQUIRE_PAYMENT = ISBREQUIRE_PAYMENT$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.REQUIRE_PAYMENT:= ISBREQUIRE_PAYMENT$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDCOUPON_ID
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INUCOUPON_ID$ IN GC_DEBT_NEGOTIATION.COUPON_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			COUPON_ID = INUCOUPON_ID$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.COUPON_ID:= INUCOUPON_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDSIGNED
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		ISBSIGNED$ IN GC_DEBT_NEGOTIATION.SIGNED%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			SIGNED = ISBSIGNED$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.SIGNED:= ISBSIGNED$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDSIGN_TERMINAL
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		ISBSIGN_TERMINAL$ IN GC_DEBT_NEGOTIATION.SIGN_TERMINAL%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			SIGN_TERMINAL = ISBSIGN_TERMINAL$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.SIGN_TERMINAL:= ISBSIGN_TERMINAL$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDSIGN_DATE
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		IDTSIGN_DATE$ IN GC_DEBT_NEGOTIATION.SIGN_DATE%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			SIGN_DATE = IDTSIGN_DATE$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.SIGN_DATE:= IDTSIGN_DATE$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDPERSON_ID
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INUPERSON_ID$ IN GC_DEBT_NEGOTIATION.PERSON_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			PERSON_ID = INUPERSON_ID$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PERSON_ID:= INUPERSON_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	PROCEDURE UPDPAYM_AGREEM_PLAN_ID
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INUPAYM_AGREEM_PLAN_ID$ IN GC_DEBT_NEGOTIATION.PAYM_AGREEM_PLAN_ID%TYPE,
		INULOCK IN NUMBER DEFAULT 0
	)
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN
		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;
		IF INULOCK=1 THEN
			LOCKBYPK
			(
				INUDEBT_NEGOTIATION_ID,
				RCDATA
			);
		END IF;

		UPDATE GC_DEBT_NEGOTIATION
		SET
			PAYM_AGREEM_PLAN_ID = INUPAYM_AGREEM_PLAN_ID$
		WHERE
			DEBT_NEGOTIATION_ID = INUDEBT_NEGOTIATION_ID;

		IF SQL%NOTFOUND THEN
			RAISE NO_DATA_FOUND;
		END IF;

		RCDATA.PAYM_AGREEM_PLAN_ID:= INUPAYM_AGREEM_PLAN_ID$;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
			RAISE EX.CONTROLLED_ERROR;
	END;
	FUNCTION FNUGETDEBT_NEGOTIATION_ID
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.DEBT_NEGOTIATION_ID);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.DEBT_NEGOTIATION_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETPAYMENT_METHOD
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.PAYMENT_METHOD%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.PAYMENT_METHOD);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.PAYMENT_METHOD);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETPROCCONS
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.PROCCONS%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.PROCCONS);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.PROCCONS);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETPACKAGE_ID
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.PACKAGE_ID%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.PACKAGE_ID);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.PACKAGE_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETREQUIRE_SIGNING
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.REQUIRE_SIGNING%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.REQUIRE_SIGNING);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.REQUIRE_SIGNING);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETREQUIRE_PAYMENT
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.REQUIRE_PAYMENT%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.REQUIRE_PAYMENT);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.REQUIRE_PAYMENT);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETCOUPON_ID
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.COUPON_ID%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.COUPON_ID);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.COUPON_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETSIGNED
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.SIGNED%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.SIGNED);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.SIGNED);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FSBGETSIGN_TERMINAL
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.SIGN_TERMINAL%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.SIGN_TERMINAL);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.SIGN_TERMINAL);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FDTGETSIGN_DATE
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.SIGN_DATE%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.SIGN_DATE);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.SIGN_DATE);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETPERSON_ID
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.PERSON_ID%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.PERSON_ID);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.PERSON_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	FUNCTION FNUGETPAYM_AGREEM_PLAN_ID
	(
		INUDEBT_NEGOTIATION_ID IN GC_DEBT_NEGOTIATION.DEBT_NEGOTIATION_ID%TYPE,
		INURAISEERROR IN NUMBER DEFAULT 1
	)
	RETURN GC_DEBT_NEGOTIATION.PAYM_AGREEM_PLAN_ID%TYPE
	IS
		RCERROR STYGC_DEBT_NEGOTIATION;
	BEGIN

		RCERROR.DEBT_NEGOTIATION_ID := INUDEBT_NEGOTIATION_ID;

        
		IF  BLDAO_USE_CACHE AND FBLALREADYLOADED
			 (
		 		INUDEBT_NEGOTIATION_ID
			 )
		THEN
			 RETURN(RCDATA.PAYM_AGREEM_PLAN_ID);
		END IF;
		LOAD
		(
		 		INUDEBT_NEGOTIATION_ID
		);
		RETURN(RCDATA.PAYM_AGREEM_PLAN_ID);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF INURAISEERROR = 1 THEN
				ERRORS.SETERROR(CNURECORD_NOT_EXIST,FSBGETMESSAGEDESCRIPTION||' '||FSBPRIMARYKEY(RCERROR));
				RAISE EX.CONTROLLED_ERROR;
			ELSE
				RETURN NULL;
			END IF;
	END;
	PROCEDURE SETUSECACHE
	(
		IBLUSECACHE    IN  BOOLEAN
	) IS
	BEGIN
	    BLDAO_USE_CACHE := IBLUSECACHE;
	END;

BEGIN
    GETDAO_USE_CACHE;
END DAGC_DEBT_NEGOTIATION;