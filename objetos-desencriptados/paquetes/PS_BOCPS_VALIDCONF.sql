PACKAGE BODY PS_BOCPS_VALIDCONF AS
    











    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO203210';
    CNUPRODENTITY       NUMBER  :=  GE_BOENTITY.GETENTITYIDBYNAME('SERVICIO'); 
    CNUCOMPENTITY       NUMBER  :=  GE_BOENTITY.GETENTITYIDBYNAME('PS_COMPONENT_TYPE'); 
    
    CNUERR_INTEGRITY_PROD CONSTANT NUMBER := 14102;
    
    CNUERR_INTEGRITY_REQU CONSTANT NUMBER := 14101;

    
    NUERRORCODE NUMBER;
    SBERRORMESSAGE VARCHAR2(4000);

    TYPE TYTBTITLEATTRIBS IS TABLE OF GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE INDEX BY BINARY_INTEGER;
    TBTITLEATTRIBS TYTBTITLEATTRIBS;
    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


    
















    PROCEDURE VALIDPRODENTITYTYPE (INUENTITYVALUE        IN      NUMBER,
                                   INUENTITYID           IN      NUMBER)
    IS
        RCPRODENTITYTYPE DAPS_PROD_ENTITY_TYPE.STYPS_PROD_ENTITY_TYPE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUPRODENTITYTYPE(INUENTITYVALUE, INUENTITYID);
        FETCH PS_BCCPS_VALIDCONF.CUPRODENTITYTYPE INTO RCPRODENTITYTYPE;
        IF (PS_BCCPS_VALIDCONF.CUPRODENTITYTYPE%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_PROD_ENTITY_TYPE.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUPRODENTITYTYPE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUPRODENTITYTYPE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUPRODENTITYTYPE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUPRODENTITYTYPE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUPRODENTITYTYPE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    














    PROCEDURE VALIDEXECUTABLEANDADMINROLE (ISBTAGNAME IN SA_EXECUTABLE.NAME%TYPE)
    IS
        RCEXECUTABLE DASA_EXECUTABLE.STYSA_EXECUTABLE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUEXECUTABLEANDADMINROLE(ISBTAGNAME);
        FETCH PS_BCCPS_VALIDCONF.CUEXECUTABLEANDADMINROLE INTO RCEXECUTABLE;
        IF (PS_BCCPS_VALIDCONF.CUEXECUTABLEANDADMINROLE%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DASA_EXECUTABLE.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUEXECUTABLEANDADMINROLE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUEXECUTABLEANDADMINROLE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUEXECUTABLEANDADMINROLE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUEXECUTABLEANDADMINROLE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUEXECUTABLEANDADMINROLE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE VALIDBSSCONF (INUPRODUCTTYPE        IN      NUMBER)
    IS
        RCCONFESCO PKTBLCONFESCO.CUCONFESCO%ROWTYPE;
    BEGIN

        
        PKTBLCONFCOSE.ACCKEY(INUPRODUCTTYPE);

        
        OPEN PS_BCCPS_VALIDCONF.CUCONFESCO(INUPRODUCTTYPE);
        FETCH PS_BCCPS_VALIDCONF.CUCONFESCO INTO RCCONFESCO;
        IF (PS_BCCPS_VALIDCONF.CUCONFESCO%NOTFOUND) THEN
            PKTBLCONFESCO.ACCKEY(INUPRODUCTTYPE, NULL);
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUCONFESCO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCONFESCO%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCONFESCO;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCONFESCO%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCONFESCO;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    PROCEDURE VALIDPRODTYPEATTRIBS (INUPRODUCTTYPE        IN      NUMBER)
    IS
        RCPRODTYPEATTRIB DAPS_PROD_TYPE_ATTRIB.STYPS_PROD_TYPE_ATTRIB;
    BEGIN

        
        OPEN PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS(INUPRODUCTTYPE, PR_BOCONSTANTS.FNUGETATTRIBBILLINGCYCLE);
        FETCH PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS INTO RCPRODTYPEATTRIB;
        IF (PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_PROD_TYPE_ATTRIB.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS;

        
        OPEN PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS(INUPRODUCTTYPE, PR_BOCONSTANTS.FNUGETATTRIBCONSUMPTIONCYCLE);
        FETCH PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS INTO RCPRODTYPEATTRIB;
        IF (PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_PROD_TYPE_ATTRIB.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS;

        
        OPEN PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS(INUPRODUCTTYPE, GE_BCATTRIBUTES.FNUGETATTRIDBYNAME(PR_BOCONSTANTS.FSBGETATTRIBPRPLAN_BASE));
        FETCH PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS INTO RCPRODTYPEATTRIB;
        IF (PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_PROD_TYPE_ATTRIB.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUPRODTYPEATTRIBS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    FUNCTION FNUVALIDPRODCOMPOSITION (INUPRODUCTTYPE        IN      NUMBER)
    RETURN NUMBER
    IS
        RCPRODCOMPOSITION DAPS_PROD_COMPOSITION.STYPS_PROD_COMPOSITION;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUPRODCOMPOSITION(INUPRODUCTTYPE);
        FETCH PS_BCCPS_VALIDCONF.CUPRODCOMPOSITION INTO RCPRODCOMPOSITION;
        IF (PS_BCCPS_VALIDCONF.CUPRODCOMPOSITION%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_PROD_COMPOSITION.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUPRODCOMPOSITION;

        RETURN RCPRODCOMPOSITION.PRODUCT_MOTIVE_ID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUPRODCOMPOSITION%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUPRODCOMPOSITION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUPRODCOMPOSITION%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUPRODCOMPOSITION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    














    PROCEDURE VALIDUNITTYPE (INUPRODUCTTYPE        IN      NUMBER)
    IS
        RCPACKAGEUNITTYPE DAPS_PACKAGE_UNITTYPE.STYPS_PACKAGE_UNITTYPE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUUNITTYPE(INUPRODUCTTYPE);
        FETCH PS_BCCPS_VALIDCONF.CUUNITTYPE INTO RCPACKAGEUNITTYPE;
        IF (PS_BCCPS_VALIDCONF.CUUNITTYPE%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_PACKAGE_UNITTYPE.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUUNITTYPE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUUNITTYPE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUUNITTYPE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUUNITTYPE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUUNITTYPE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE VALIDATTRIBEQUIV (INUPRODUCTTYPE        IN      NUMBER)
    IS
        RCATTRIBUTESEQUIV DAWF_ATTRIBUTES_EQUIV.STYWF_ATTRIBUTES_EQUIV;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUWFATTRIBEQUIV(INUPRODUCTTYPE);
        FETCH PS_BCCPS_VALIDCONF.CUWFATTRIBEQUIV INTO RCATTRIBUTESEQUIV;
        IF (PS_BCCPS_VALIDCONF.CUWFATTRIBEQUIV%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAWF_ATTRIBUTES_EQUIV.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUWFATTRIBEQUIV;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUWFATTRIBEQUIV%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUWFATTRIBEQUIV;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUWFATTRIBEQUIV%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUWFATTRIBEQUIV;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    FUNCTION FNUVALIDCOMPOSITION (INUEXTERNALTYPE        IN      NUMBER,
                                    INUENTITYTYPE      IN      NUMBER)
    RETURN NUMBER
    IS
        RCCOMPOSITION DAGI_COMPOSITION.STYGI_COMPOSITION;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUCOMPOSITION(INUEXTERNALTYPE, INUENTITYTYPE);
        FETCH PS_BCCPS_VALIDCONF.CUCOMPOSITION INTO RCCOMPOSITION;
        IF (PS_BCCPS_VALIDCONF.CUCOMPOSITION%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAGI_COMPOSITION.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUCOMPOSITION;

        RETURN RCCOMPOSITION.COMPOSITION_ID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCOMPOSITION%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCOMPOSITION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCOMPOSITION%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCOMPOSITION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
















    FUNCTION FNUVALIDCNFMOTIVE (INUPRODUCTMOTIVE        IN      NUMBER)
    RETURN NUMBER
    IS
        RCCNFMOTIVE DAPS_CNF_MOTIVE.STYPS_CNF_MOTIVE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUCNFMOTIVE(INUPRODUCTMOTIVE);
        FETCH PS_BCCPS_VALIDCONF.CUCNFMOTIVE INTO RCCNFMOTIVE;
        IF (PS_BCCPS_VALIDCONF.CUCNFMOTIVE%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_CNF_MOTIVE.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUCNFMOTIVE;

        RETURN RCCNFMOTIVE.INSTANCE_;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCNFMOTIVE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCNFMOTIVE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCNFMOTIVE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCNFMOTIVE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
















    PROCEDURE VALIDCNFINSTANCE (INUOBJECT        IN      NUMBER,
                                    INUOBJECTTYPE      IN      NUMBER)
    IS
        RCCNFINSTANCE DAPS_CNF_INSTANCE.STYPS_CNF_INSTANCE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUCNFINSTANCE(INUOBJECT, INUOBJECTTYPE);
        FETCH PS_BCCPS_VALIDCONF.CUCNFINSTANCE INTO RCCNFINSTANCE;
        IF (PS_BCCPS_VALIDCONF.CUCNFINSTANCE%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_CNF_INSTANCE.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUCNFINSTANCE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCNFINSTANCE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCNFINSTANCE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCNFINSTANCE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCNFINSTANCE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
















    FUNCTION FNUVALIDCOMPATTRIBS (INUEXTERNAL        IN      NUMBER,
                                    INUENTITY      IN      NUMBER)
    RETURN NUMBER
    IS
        RCCOMPATTRIBS DAGI_COMP_ATTRIBS.STYGI_COMP_ATTRIBS;
    BEGIN
		ut_trace.trace('INUEXTERNAL:'||INUEXTERNAL,99);
		ut_trace.trace('INUENTITY:'||INUENTITY,99);
		
        OPEN PS_BCCPS_VALIDCONF.CUCOMPATTRIBS(INUEXTERNAL, INUENTITY);
        FETCH PS_BCCPS_VALIDCONF.CUCOMPATTRIBS INTO RCCOMPATTRIBS;
        IF (PS_BCCPS_VALIDCONF.CUCOMPATTRIBS%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAGI_COMP_ATTRIBS.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUCOMPATTRIBS;

        RETURN RCCOMPATTRIBS.COMP_ATTRIBS_ID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCOMPATTRIBS%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCOMPATTRIBS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCOMPATTRIBS%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCOMPATTRIBS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    














    PROCEDURE VALIDCOMPFRAMEATTRIB (INUCOMPATTRIB  IN  GI_COMP_ATTRIBS.COMP_ATTRIBS_ID%TYPE)
    IS
        RCCOMPFRAMEATTRIB DAGI_COMP_FRAME_ATTRIB.STYGI_COMP_FRAME_ATTRIB;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUCOMPFRAMEATTRIB(INUCOMPATTRIB);
        FETCH PS_BCCPS_VALIDCONF.CUCOMPFRAMEATTRIB INTO RCCOMPFRAMEATTRIB;
        IF (PS_BCCPS_VALIDCONF.CUCOMPFRAMEATTRIB%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAGI_COMP_FRAME_ATTRIB.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUCOMPFRAMEATTRIB;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCOMPFRAMEATTRIB%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCOMPFRAMEATTRIB;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCOMPFRAMEATTRIB%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCOMPFRAMEATTRIB;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
















    PROCEDURE VALIDCNFATTRIBUTE (INUOBJECT        IN      NUMBER,
                                    INUOBJECTTYPE      IN      NUMBER,
                                    INUATTRIBUTE    IN    PS_CNF_ATTRIBUTE.ATTRIBUTE_%TYPE)
    IS
        RCCNFATTRIBUTE DAPS_CNF_ATTRIBUTE.STYPS_CNF_ATTRIBUTE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUCNFATTRIBUTE(INUOBJECT, INUOBJECTTYPE, INUATTRIBUTE);
        FETCH PS_BCCPS_VALIDCONF.CUCNFATTRIBUTE INTO RCCNFATTRIBUTE;
        IF (PS_BCCPS_VALIDCONF.CUCNFATTRIBUTE%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_CNF_ATTRIBUTE.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUCNFATTRIBUTE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCNFATTRIBUTE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCNFATTRIBUTE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCNFATTRIBUTE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCNFATTRIBUTE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    FUNCTION VALIDGICONFIG (INUPACKAGETYPE        IN      NUMBER)
    RETURN NUMBER
    IS
        NUCONFIGID GI_CONFIG.CONFIG_ID%TYPE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUCONFIG(INUPACKAGETYPE);
        FETCH PS_BCCPS_VALIDCONF.CUCONFIG INTO NUCONFIGID;
        
        IF (PS_BCCPS_VALIDCONF.CUCONFIG%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAGI_CONFIG.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        FETCH PS_BCCPS_VALIDCONF.CUCONFIG INTO NUCONFIGID;
        IF (PS_BCCPS_VALIDCONF.CUCONFIG%FOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_REQU, DAGI_CONFIG.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUCONFIG;

        RETURN NUCONFIGID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCONFIG%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCONFIG;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCONFIG%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCONFIG;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    FUNCTION VALIDGICOMPOSITION (INUCONFIGID IN  GI_CONFIG.CONFIG_ID%TYPE)
    RETURN NUMBER
    IS
        NUCOMPOSITIONID GI_COMPOSITION.COMPOSITION_ID%TYPE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUCOMPOSITIONBYCONFIG(INUCONFIGID);
        FETCH PS_BCCPS_VALIDCONF.CUCOMPOSITIONBYCONFIG INTO NUCOMPOSITIONID;
        
        IF (PS_BCCPS_VALIDCONF.CUCOMPOSITIONBYCONFIG%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAGI_COMPOSITION.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        CLOSE PS_BCCPS_VALIDCONF.CUCOMPOSITIONBYCONFIG;

        RETURN NUCOMPOSITIONID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCOMPOSITIONBYCONFIG%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCOMPOSITIONBYCONFIG;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCOMPOSITIONBYCONFIG%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCOMPOSITIONBYCONFIG;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    FUNCTION VALIDGIFRAME (INUCOMPOSITION        IN      GI_COMPOSITION.COMPOSITION_ID%TYPE)
    RETURN NUMBER
    IS
        NUFRAMEID GI_FRAME.FRAME_ID%TYPE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUFRAMEBYCOMPOSITION(INUCOMPOSITION);
        FETCH PS_BCCPS_VALIDCONF.CUFRAMEBYCOMPOSITION INTO NUFRAMEID;
        
        IF (PS_BCCPS_VALIDCONF.CUFRAMEBYCOMPOSITION%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAGI_FRAME.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUFRAMEBYCOMPOSITION;

        RETURN NUFRAMEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUFRAMEBYCOMPOSITION%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUFRAMEBYCOMPOSITION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUFRAMEBYCOMPOSITION%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUFRAMEBYCOMPOSITION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    PROCEDURE VALIDRANGEID (INUID        IN      NUMBER, ISBTABL IN GE_ENTITY.NAME_%TYPE)
    IS
        BOINPERMRANGE BOOLEAN;
    BEGIN

        BOINPERMRANGE := INUID  BETWEEN CNURANGE_P1 AND CNURANGE_P2;

        IF NOT BOINPERMRANGE THEN
            ERRORS.SETERROR(CNUID_OUT_OF_RANGE,
        	    UPPER(ISBTABL)||'|'||CNURANGE_P1||'|'||
                CNURANGE_P2||'|'||INUID );
        	RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    









































    FUNCTION FBLPRODHASINTEGRITY (INUPRODUCTTYPE SERVICIO.SERVCODI%TYPE ) RETURN BOOLEAN
    IS
        NUCOMPONENTTYPE PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
        NUPRODMOTIVE    PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        NUCOMPOSITION   GI_COMPOSITION.COMPOSITION_ID%TYPE;
        NUCOMPATTRIBS   GI_COMP_ATTRIBS.COMP_ATTRIBS_ID%TYPE;
        NUINSTANCE_     PS_CNF_MOTIVE.INSTANCE_%TYPE;
        NUCONFIGID      GI_CONFIG.CONFIG_ID%TYPE;
        NUCOMPOSITIONID     GI_COMPOSITION.COMPOSITION_ID%TYPE;
        NUFRAMEID       GI_FRAME.FRAME_ID%TYPE;
        NUIDVENTA       PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    BEGIN

        
        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [servicio]...['||INUPRODUCTTYPE||']',5);
        PKTBLSERVICIO.ACCKEY(INUPRODUCTTYPE);
        UT_TRACE.TRACE('..[OK]',5);

        
        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_prod_entity_type]',5);
        VALIDPRODENTITYTYPE(INUPRODUCTTYPE, CNUPRODENTITY);
        UT_TRACE.TRACE('..[OK]',5);

        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [sa_executable] y [sa_role_executables]',5);
        VALIDEXECUTABLEANDADMINROLE(PKTBLSERVICIO.FSBGETTAG_NAME(INUPRODUCTTYPE));
        UT_TRACE.TRACE('..[OK]',5);

        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [confcose] y [confesco]',5);
        VALIDBSSCONF(INUPRODUCTTYPE);
        UT_TRACE.TRACE('..[OK]',5);

        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_prod_composition] inuProductType['||INUPRODUCTTYPE||']',5);
        NUPRODMOTIVE := FNUVALIDPRODCOMPOSITION(INUPRODUCTTYPE);
        UT_TRACE.TRACE('..[OK] product_motive_id['||NUPRODMOTIVE||']',5);

        
        UT_TRACE.TRACE('Se validan rangos para el Identificador del Motivo',5);
        VALIDRANGEID(NUPRODMOTIVE, 'PS_PRODUCT_MOTIVE');
        UT_TRACE.TRACE('..[OK]',5);

        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [PS_package_unittype]',5);
        VALIDUNITTYPE(INUPRODUCTTYPE);
        UT_TRACE.TRACE('..[OK]',5);

        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [wf_attributes_equiv]',5);
        VALIDATTRIBEQUIV(INUPRODUCTTYPE);
        UT_TRACE.TRACE('..[OK]',5);

        
        IF (DAPS_PRODUCT_MOTIVE.FSBGETACTIVE(NUPRODMOTIVE) = CC_BOCONSTANTS.CSBNO) THEN
            RETURN TRUE;
        END IF;

        
        UT_TRACE.TRACE('Se valida Configuraci�n GUI de la solicitud de venta 587-P_VENTA [gi_config]',5);
        NUIDVENTA := PS_BOPACKAGETYPE.FNUGETPACKTYPEBYTAGNAME( PS_BOPACKAGETYPE.CSBTAGVENTA );
        NUCONFIGID := VALIDGICONFIG(NUIDVENTA);
        UT_TRACE.TRACE('..[OK] config_id['||NUCONFIGID||']',5);

        UT_TRACE.TRACE('Se valida Composici�n de elemento a representar GUI [gi_composition]',5);
        NUCOMPOSITIONID := VALIDGICOMPOSITION(NUCONFIGID);
        UT_TRACE.TRACE('..[OK] composition_id['||NUCOMPOSITIONID||']',5);

        UT_TRACE.TRACE('Se valida Frames - Contenedores GUI [gi_frame]',5);
        NUFRAMEID := VALIDGIFRAME(NUCOMPOSITIONID);
        UT_TRACE.TRACE('..[OK] frame_id['||NUFRAMEID||']',5);

        

        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [gi_composition]',5);
        NUCOMPOSITION := FNUVALIDCOMPOSITION(NUPRODMOTIVE,GI_BOINSTANCECONSTANT.CNUMOTENTTYPE);
        UT_TRACE.TRACE('..[OK] composition_id['||NUCOMPOSITION||']',5);

        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_cnf_motive]',5);
        NUINSTANCE_ := FNUVALIDCNFMOTIVE(NUPRODMOTIVE);
        UT_TRACE.TRACE('..[OK] instance_['||NUINSTANCE_||']',5);

        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_cnf_instance]',5);
        VALIDCNFINSTANCE(NUPRODMOTIVE, GI_BOINSTANCECONSTANT.CNUMOTENTTYPE);
        UT_TRACE.TRACE('..[OK]',5);

        
        FOR RCPRODMOTIATTRIB IN PS_BCCPS_VALIDCONF.CUPRODMOTIATTRIB(NUPRODMOTIVE) LOOP
            UT_TRACE.TRACE('Se valida configuraci�n en la entidad [gi_comp_attribs] prod_moti_attrib_id['||RCPRODMOTIATTRIB.PROD_MOTI_ATTRIB_ID||']',5);
            NUCOMPATTRIBS := FNUVALIDCOMPATTRIBS(RCPRODMOTIATTRIB.PROD_MOTI_ATTRIB_ID, GE_BOENTITY.GETENTITYIDBYNAME('PS_PROD_MOTI_ATTRIB')); 
            UT_TRACE.TRACE('..[OK] comp_attribs_id['||NUCOMPATTRIBS||']',5);

            UT_TRACE.TRACE('Se valida configuraci�n en la entidad [gi_comp_frame_attrib]',5);
            VALIDCOMPFRAMEATTRIB(NUCOMPATTRIBS);
            UT_TRACE.TRACE('..[OK]',5);

            UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_cnf_attribute] entity_attribute_id['||RCPRODMOTIATTRIB.ENTITY_ATTRIBUTE_ID||']',5);
            VALIDCNFATTRIBUTE(NUPRODMOTIVE, GI_BOINSTANCECONSTANT.CNUMOTENTTYPE, RCPRODMOTIATTRIB.ENTITY_ATTRIBUTE_ID);
            UT_TRACE.TRACE('..[OK]',5);

        END LOOP;
        
        FOR RCPRODMOTIVECOMP IN  PS_BCCPS_VALIDCONF.CUPRODMOTIVECOMP(NUPRODMOTIVE) LOOP

            
            IF (DAPS_PROD_MOTIVE_COMP.FSBGETACTIVE(RCPRODMOTIVECOMP.PROD_MOTIVE_COMP_ID) = CC_BOCONSTANTS.CSBSI) THEN

                UT_TRACE.TRACE('Se valida configuraci�n en la entidad [gi_composition]',5);
                NUCOMPOSITION := FNUVALIDCOMPOSITION(RCPRODMOTIVECOMP.PROD_MOTIVE_COMP_ID,GI_BOINSTANCECONSTANT.CNUCOMPENTTYPE);
                UT_TRACE.TRACE('..[OK] composition_id['||NUCOMPOSITION||']',5);

                UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_cnf_instance]',5);
                VALIDCNFINSTANCE(RCPRODMOTIVECOMP.PROD_MOTIVE_COMP_ID, GI_BOINSTANCECONSTANT.CNUCOMPENTTYPE);
                UT_TRACE.TRACE('..[OK]',5);

                
                FOR RCMOTICOMPATTRIB IN PS_BCCPS_VALIDCONF.CUMOTICOMPATTRIB(RCPRODMOTIVECOMP.PROD_MOTIVE_COMP_ID) LOOP
                    UT_TRACE.TRACE('Se valida configuraci�n en la entidad [gi_comp_attribs] moti_comp_attribs_id['||RCMOTICOMPATTRIB.MOTI_COMP_ATTRIBS_ID||']',5);
                    NUCOMPATTRIBS := FNUVALIDCOMPATTRIBS(RCMOTICOMPATTRIB.MOTI_COMP_ATTRIBS_ID, GE_BOENTITY.GETENTITYIDBYNAME('PS_MOTI_COMP_ATTRIBS')); 
                    UT_TRACE.TRACE('..[OK] comp_attribs_id['||NUCOMPATTRIBS||']',5);

                    UT_TRACE.TRACE('Se valida configuraci�n en la entidad [gi_comp_frame_attrib]',5);
                    VALIDCOMPFRAMEATTRIB(NUCOMPATTRIBS);
                    UT_TRACE.TRACE('..[OK]',5);

                    UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_cnf_attribute] entity_attribute_id['||RCMOTICOMPATTRIB.ENTITY_ATTRIBUTE_ID||']',5);
                    VALIDCNFATTRIBUTE(RCPRODMOTIVECOMP.PROD_MOTIVE_COMP_ID, GI_BOINSTANCECONSTANT.CNUCOMPENTTYPE, RCMOTICOMPATTRIB.ENTITY_ATTRIBUTE_ID);
                    UT_TRACE.TRACE('..[OK]',5);

                END LOOP;
            END IF;

        END LOOP;

        

        RETURN TRUE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            UT_TRACE.TRACE('..[NOK]',5);
            ERRORS.GETERROR(NUERRORCODE, SBERRORMESSAGE);
            RETURN FALSE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('..[NOK]',5);
            ERRORS.SETERROR;
            ERRORS.GETERROR(NUERRORCODE, SBERRORMESSAGE);
            RETURN FALSE;
    END;




    














    FUNCTION FNUVALIDCNFPACKAGE (INUPACKAGETYPE        IN      NUMBER)
    RETURN NUMBER
    IS
        RCCNFPACKAGE DAPS_CNF_PACKAGE.STYPS_CNF_PACKAGE;
    BEGIN

        OPEN PS_BCCPS_VALIDCONF.CUCNFPACKAGE(INUPACKAGETYPE);
        FETCH PS_BCCPS_VALIDCONF.CUCNFPACKAGE INTO RCCNFPACKAGE;
        IF (PS_BCCPS_VALIDCONF.CUCNFPACKAGE%NOTFOUND) THEN
            ERRORS.SETERROR(CNUERR_INTEGRITY_PROD, DAPS_CNF_PACKAGE.FSBGETMESSAGEDESCRIPTION);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        CLOSE PS_BCCPS_VALIDCONF.CUCNFPACKAGE;

        RETURN RCCNFPACKAGE.INSTANCE_;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            IF (PS_BCCPS_VALIDCONF.CUCNFPACKAGE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCNFPACKAGE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (PS_BCCPS_VALIDCONF.CUCNFPACKAGE%ISOPEN) THEN
                CLOSE PS_BCCPS_VALIDCONF.CUCNFPACKAGE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
































    FUNCTION FBLREQUESTHASINTEGRITY (INUPACKAGETYPE PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE ) RETURN BOOLEAN
    IS
        NUCOMPONENTTYPE PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
        NUPRODMOTIVE    PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        NUCOMPOSITION   GI_COMPOSITION.COMPOSITION_ID%TYPE;
        NUCOMPATTRIBS   GI_COMP_ATTRIBS.COMP_ATTRIBS_ID%TYPE;
        NUINSTANCE_     PS_CNF_MOTIVE.INSTANCE_%TYPE;
        NUCONFIGID     GI_CONFIG.CONFIG_ID%TYPE;
        NUCOMPOSITIONID     GI_COMPOSITION.COMPOSITION_ID%TYPE;
        NUFRAMEID     GI_FRAME.FRAME_ID%TYPE;
        
    BEGIN
        
        UT_TRACE.TRACE('Se validan rangos para el Identificador del Tipo de Solicitud',5);
        VALIDRANGEID(INUPACKAGETYPE, 'PS_PACKAGE_TYPE');
        UT_TRACE.TRACE('..[OK]',5);

        
        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_package_type]['||INUPACKAGETYPE||']',5);
        DAPS_PACKAGE_TYPE.ACCKEY(INUPACKAGETYPE);
        UT_TRACE.TRACE('..[OK]',5);

        
        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [sa_executable] y [sa_role_executables]',5);
        VALIDEXECUTABLEANDADMINROLE(DAPS_PACKAGE_TYPE.FSBGETTAG_NAME(INUPACKAGETYPE));
        UT_TRACE.TRACE('..[OK]',5);

        
        UT_TRACE.TRACE('Se valida Configuraci�n GUI [gi_config]',5);
        NUCONFIGID := VALIDGICONFIG(INUPACKAGETYPE);
        UT_TRACE.TRACE('..[OK] config_id['||NUCONFIGID||']',5);

        UT_TRACE.TRACE('Se valida Composici�n de elemento a representar GUI [gi_composition]',5);
        NUCOMPOSITIONID := VALIDGICOMPOSITION(NUCONFIGID);
        UT_TRACE.TRACE('..[OK] composition_id['||NUCOMPOSITIONID||']',5);

        UT_TRACE.TRACE('Se valida Frames - Contenedores GUI [gi_frame]',5);
        NUFRAMEID := VALIDGIFRAME(NUCOMPOSITIONID);
        UT_TRACE.TRACE('..[OK] frame_id['||NUFRAMEID||']',5);

        
        UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_cnf_package]',5);
        NUINSTANCE_ := FNUVALIDCNFPACKAGE(INUPACKAGETYPE);
        UT_TRACE.TRACE('..[OK]',5);

        
        FOR RCPACKATTRIB IN PS_BCCPS_VALIDCONF.CUPACKAGEATTRIBS(INUPACKAGETYPE) LOOP

            UT_TRACE.TRACE('Se valida configuraci�n en la entidad [gi_comp_attribs] package_attribs_id['||RCPACKATTRIB.PACKAGE_ATTRIBS_ID||']',5);
            NUCOMPATTRIBS := FNUVALIDCOMPATTRIBS(RCPACKATTRIB.PACKAGE_ATTRIBS_ID, GE_BOENTITY.GETENTITYIDBYNAME('PS_PACKAGE_ATTRIBS')); 
            UT_TRACE.TRACE('..[OK]',5);

            UT_TRACE.TRACE('Se valida configuraci�n en la entidad [gi_comp_frame_attrib] comp_attribs_id['||NUCOMPATTRIBS||']',5);
            VALIDCOMPFRAMEATTRIB(NUCOMPATTRIBS);
            UT_TRACE.TRACE('..[OK]',5);

            UT_TRACE.TRACE('Se valida configuraci�n en la entidad [ps_cnf_attribute] entity_attribute_id['||RCPACKATTRIB.ENTITY_ATTRIBUTE_ID||']',5);
            VALIDCNFATTRIBUTE(INUPACKAGETYPE, GI_BOINSTANCECONSTANT.CNUPACKENTTYPE, RCPACKATTRIB.ENTITY_ATTRIBUTE_ID);
            UT_TRACE.TRACE('..[OK]',5);

        END LOOP;

        RETURN TRUE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR  THEN
            UT_TRACE.TRACE('..[NOK]',5);
            ERRORS.GETERROR(NUERRORCODE, SBERRORMESSAGE);
            RETURN FALSE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('..[NOK]',5);
            ERRORS.SETERROR;
            ERRORS.GETERROR(NUERRORCODE, SBERRORMESSAGE);
            RETURN FALSE;
    END;

    



















PROCEDURE LOADTITLEATTRIBS
IS
    NUINDEX BINARY_INTEGER := 1;
    NUENTITY GE_ENTITY.ENTITY_ID%TYPE;
BEGIN
    TBTITLEATTRIBS.DELETE;
    NUENTITY := GE_BOENTITY.FNUGETENTITY_ID(PS_BCCPS_VALIDCONF.CNUENTITYTITLE);
   UT_TRACE.TRACE('Cargando Entidad ['||NUENTITY||']',5);
    FOR RCENTITYATT IN PS_BCCPS_VALIDCONF.CUTITLEATT(NUENTITY) LOOP
        UT_TRACE.TRACE('Adicionando el atributo ['||RCENTITYATT.ENTITY_ATTRIBUTE_ID||']',10);
        TBTITLEATTRIBS(NUINDEX) := RCENTITYATT.ENTITY_ATTRIBUTE_ID;
        NUINDEX := TBTITLEATTRIBS.LAST+1;
    END LOOP;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR  THEN
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

    



















FUNCTION FNUGETNEXTTITLEATT RETURN GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE
IS
    NUINDEX BINARY_INTEGER;
    NUTITLEATT GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE := NULL;
BEGIN
    NUINDEX := TBTITLEATTRIBS.LAST;
    UT_TRACE.TRACE('Obteniendo el elemento ['||NUINDEX||']',5);
    IF (NUINDEX IS NOT NULL) THEN
        UT_TRACE.TRACE('No es nulo',12);
        IF (TBTITLEATTRIBS.EXISTS(NUINDEX) ) THEN
            UT_TRACE.TRACE('Existe',12);
            UT_TRACE.TRACE('Indice ['||(NUINDEX)||']',12);
            UT_TRACE.TRACE('Elemento ['||TBTITLEATTRIBS(NUINDEX)||']',10);
            NUTITLEATT := TBTITLEATTRIBS(NUINDEX);
            TBTITLEATTRIBS.DELETE(NUINDEX);
        END IF;
    END IF;
    RETURN NUTITLEATT;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR  THEN
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

BEGIN

TBTITLEATTRIBS.DELETE;

END PS_BOCPS_VALIDCONF;