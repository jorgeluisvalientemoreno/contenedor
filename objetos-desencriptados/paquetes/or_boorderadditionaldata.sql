
  PACKAGE OR_BOOrderAdditionalData
IS























	
    SUBTYPE STYSBCODE IS VARCHAR2(50); 

    TYPE TYRCELEMENTPRODUCTID IS RECORD
    (
        NUPRODUCT_ID        PR_PRODUCT.PRODUCT_ID%TYPE
    );

    TYPE TYTBELEMENTPRODUCTID  IS TABLE OF TYRCELEMENTPRODUCTID INDEX BY STYSBCODE;


	

	
	FUNCTION FSBVERSION  RETURN VARCHAR2;

    

















 	
    PROCEDURE ADDORDERADDDATAFROMFILE
    (
        ISBDIRECTORY         IN VARCHAR2,
        ISBFILENAME          IN VARCHAR2
    );

END OR_BOORDERADDITIONALDATA;

PACKAGE BODY OR_BOOrderAdditionalData
IS























	
    CSBVERSION   CONSTANT VARCHAR2(20)            := 'SAO434835';

    
    CNUMAX_COLUMN       CONSTANT NUMBER(2) := 4;
    CNUCOL_ORDER        CONSTANT NUMBER(2) := 1;
    CNUCOL_ATT_SET      CONSTANT NUMBER(2) := 2;
    CNUCOL_ADITI_DATA   CONSTANT NUMBER(2) := 3;
    CNUCOL_COMMENTS     CONSTANT NUMBER(2) := 4;

    CSBSEPARATOR_1      CONSTANT VARCHAR2(1)    := '|';
    CSBSEPARATOR_2      CONSTANT VARCHAR2(1)    := ';';
    CSBSEPARATOR_3      CONSTANT VARCHAR2(1)    := '=';

        
    CSBFILE_SEPARATOR           CONSTANT VARCHAR2(1) := '/';
    
    CNUERR_UNSTRUCTURED_ADD_DATA            CONSTANT NUMBER := 620;
    
    
    CNUERROR_143554 CONSTANT NUMBER(6) := 143554;
    
    CNUNUMBER                               CONSTANT NUMBER := GE_BOPARAMETER.FNUGET('TYPE_ELEM_NUMBER');
	
    CNUERR_UNSTRUCTURED_FILE                CONSTANT NUMBER(3) := 619;

    
    CNUERR_114703 CONSTANT NUMBER(6) := 114703;
    
    CNUERR_114704 CONSTANT NUMBER(6) := 114704;

    
    CNUERR_850 CONSTANT NUMBER(3) := 850;

    
    CNUERR_143574 CONSTANT NUMBER(6) := 143574;

    
    CNUERR_143594 CONSTANT NUMBER(6) := 143594;

    
    CNUERR_143614 CONSTANT NUMBER(6) := 143614;

    
    CNUACTIVITYTYPE     CONSTANT    NUMBER(2)   := 2;
    
    
    CNU_MESS_HAS_NOT_ORD_FLATFILE           CONSTANT NUMBER(6) := 114712;


	

    FUNCTION FSBVERSION  RETURN VARCHAR2
    IS
    BEGIN
        RETURN CSBVERSION;
    END;

    












    FUNCTION   FNUGETORDER (
                                ISBLINE          IN VARCHAR2
                           )
    RETURN NUMBER
    IS
        TBDATA    UT_STRING.TYTB_STRING;
        NUORDER   OR_ORDER.ORDER_ID%TYPE;
    BEGIN
        UT_STRING.EXTSTRING(ISBLINE, CSBSEPARATOR_1, TBDATA);
        NUORDER := TO_NUMBER(TBDATA(1));
        RETURN NUORDER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

	
    
	
    



















	PROCEDURE VALFILESTRUCTURE
    (
        ISBLINE          IN VARCHAR2,
        INULINENUMBER    IN NUMBER,
        OTBLINEDATA     OUT UT_STRING.TYTB_STRING
    ) IS
        TBDATARECORD     UT_STRING.TYTB_STRING;
        TBDATARECORDNULL UT_STRING.TYTB_STRING;
        TBDATAVALUE      UT_STRING.TYTB_STRING;
        TBDATAVALUE2     UT_STRING.TYTB_STRING;
        TBCOMMENTS       UT_STRING.TYTB_STRING;
        TBCOMMENT        UT_STRING.TYTB_STRING;
        TBDATAVALUENULL  UT_STRING.TYTB_STRING;
        NUINDEX          BINARY_INTEGER;
        SBLINE           VARCHAR2(10000);
	BEGIN
 	    UT_TRACE.TRACE('[OR_BOOrderAdditionalData.valFileStructure] INICIO',3);


	    SBLINE := REPLACE(ISBLINE,CHR(13),'');

        UT_TRACE.TRACE('Validando la cantidad de campos de la linea',4);
        
        
        UT_STRING.EXTSTRING(SBLINE, CSBSEPARATOR_1, OTBLINEDATA);
        UT_TRACE.TRACE('[] Campos:'||OTBLINEDATA.COUNT,3);
        IF (OTBLINEDATA.COUNT <> CNUMAX_COLUMN) THEN
            



            ERRORS.SETERROR(CNUERR_UNSTRUCTURED_FILE, INULINENUMBER);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Validando Datos adicionales',10);
        UT_TRACE.TRACE('Datos a verificar['||OTBLINEDATA(CNUCOL_ADITI_DATA)||']',10);
        
        
        IF (OTBLINEDATA(CNUCOL_ADITI_DATA) IS NOT NULL) THEN
            TBDATARECORD := TBDATARECORDNULL;
            
            UT_STRING.EXTSTRING(OTBLINEDATA(CNUCOL_ADITI_DATA), CSBSEPARATOR_2, TBDATARECORD);
            
            
            NUINDEX := TBDATARECORD.FIRST;
            LOOP
                TBDATAVALUE := TBDATAVALUENULL;
                UT_STRING.EXTSTRING(TBDATARECORD(NUINDEX), CSBSEPARATOR_3, TBDATAVALUE);
                IF (TBDATAVALUE.COUNT <> 2) THEN
                    ERRORS.SETERROR(CNUERR_UNSTRUCTURED_ADD_DATA,INULINENUMBER);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
                EXIT WHEN (NUINDEX = TBDATARECORD.LAST);
                NUINDEX := TBDATARECORD.NEXT(NUINDEX);
            END LOOP;
        END IF;
        
        
        IF (OTBLINEDATA(CNUCOL_COMMENTS) IS NOT NULL) THEN
            TBCOMMENTS := TBDATARECORDNULL;
            UT_STRING.EXTSTRING(OTBLINEDATA(CNUCOL_COMMENTS), CSBSEPARATOR_2, TBCOMMENTS);
            NUINDEX := TBCOMMENTS.FIRST;
            LOOP
                TBCOMMENT := TBDATARECORDNULL;
                UT_STRING.EXTSTRING(TBCOMMENTS(NUINDEX), CSBSEPARATOR_3, TBCOMMENT);
                IF (TBCOMMENT.COUNT <> 2) THEN
                    GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_143554, INULINENUMBER);
                END IF;
                EXIT WHEN (NUINDEX = TBCOMMENTS.LAST);
                NUINDEX := TBCOMMENTS.NEXT(NUINDEX);
            END LOOP;
        END IF;

 	    UT_TRACE.TRACE('[OR_BOOrderAdditionalData.valFileStructure] FIN',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALFILESTRUCTURE;

    























    PROCEDURE LOADANDVALIDINITIALDATA
    (
        ISBLINE          IN VARCHAR2,
        INULINENUMBER    IN NUMBER,
        ONUORDERID      OUT OR_ORDER.ORDER_ID%TYPE,
        ONUATTSET       OUT GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID%TYPE,
        OTBLINE         OUT NOCOPY UT_STRING.TYTB_STRING,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORMESSAGE OUT GE_MESSAGE.DESCRIPTION%TYPE
    )
    IS

        RCORDER             DAOR_ORDER.STYOR_ORDER;
        TBCAUSAL            DAGE_CAUSAL.TYTBCAUSAL_ID;
        NUINDEX             BINARY_INTEGER;
        NUVALCAUSAL         NUMBER := 1;
        RCTEMPLEGORDER      DAOR_TEMP_ORDER_TO_LEG.STYOR_TEMP_ORDER_TO_LEG;

        PROCEDURE VALIDINITIALDATA IS
        BEGIN
            
            IF OTBLINE.COUNT = 0 THEN
                ERRORS.SETERROR(CNUERR_114704, INULINENUMBER);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            IF ONUORDERID  IS NULL THEN
                ERRORS.SETERROR(CNUERR_850, INULINENUMBER);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            IF ONUATTSET  IS NULL THEN
                ERRORS.SETERROR(CNUERR_143574, INULINENUMBER);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDINITIALDATA;
    BEGIN
        UT_TRACE.TRACE('[OR_BOOrderAdditionalData.LoadAndValidInitialData] INICIO',4);
        
        VALFILESTRUCTURE(ISBLINE,INULINENUMBER,OTBLINE);

        
        ONUORDERID := OTBLINE(CNUCOL_ORDER);
        ONUATTSET  := OTBLINE(CNUCOL_ATT_SET);
        

        
        VALIDINITIALDATA;

        UT_TRACE.TRACE('[OR_BOOrderAdditionalData.LoadAndValidInitialData] FIN',4);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
    END;
    
    PROCEDURE VALIDADDDATATOINS
    (
        INUATTSET           IN  GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID%TYPE,
        ITBRECDATAVALUES    IN  UT_STRING.TYTB_STRING,
        INURECORD           IN  NUMBER
    )
    IS
        
        
        CNU_ERR_ATT_AMOU_DO_NOT_EQU CONSTANT NUMBER := 627;
        
        CNU_ERR_143774 CONSTANT NUMBER := 143774;
        
        
        CNU_ERR_143778 CONSTANT NUMBER := 143778;
        
        TBDATAVALUE     UT_STRING.TYTB_STRING;
        TBATTNAMES      DAGE_ATTRIBUTES.TYTBNAME_ATTRIBUTE;
        NUINDEX         BINARY_INTEGER;
        NUCOUNT         NUMBER;
    BEGIN
        
        GE_BCATTRIB_SET_ATTRIB.GETATTNAMESBYATTSET(INUATTSET, TBATTNAMES);
        
        IF ITBRECDATAVALUES.COUNT != TBATTNAMES.COUNT THEN
            ERRORS.SETERROR(CNU_ERR_ATT_AMOU_DO_NOT_EQU, TBATTNAMES.COUNT||'|'||ITBRECDATAVALUES.COUNT||'|'||'ingresada');
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        NUINDEX := ITBRECDATAVALUES.FIRST;
        
        
        
        WHILE NUINDEX IS NOT NULL LOOP
            NUCOUNT := 0;
            UT_STRING.EXTSTRING(ITBRECDATAVALUES(NUINDEX), '=', TBDATAVALUE);
            FOR N IN TBATTNAMES.FIRST .. TBATTNAMES.LAST LOOP
                IF TBATTNAMES(N) = TBDATAVALUE(1) THEN
                    NUCOUNT := NUCOUNT + 1;
                END IF;
            END LOOP;
            
            
            IF NUCOUNT = 0 THEN
                ERRORS.SETERROR(CNU_ERR_143774, TBDATAVALUE(1)||'|'||INUATTSET||'|'||INURECORD);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            
            IF NUCOUNT > 1 THEN
                ERRORS.SETERROR(CNU_ERR_143778, TBDATAVALUE(1)||'|'||INURECORD);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            NUINDEX := ITBRECDATAVALUES.NEXT(NUINDEX);
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDADDDATATOINS;

    








    PROCEDURE LOCKORDER
    (
        INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORMESSAGE OUT GE_MESSAGE.DESCRIPTION%TYPE
    )
    IS
    BEGIN
        OR_BOFWLEGALIZEORDERUTIL.LOCKORDER(INUORDER_ID);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
    END;

    























    PROCEDURE UPDORDERADDITIONALDATA
    (
        IRCREQUDATAVALUE  IN OUT DAOR_REQU_DATA_VALUE.STYOR_REQU_DATA_VALUE,
        ISBADDITIONALDATA IN VARCHAR2
    )
    IS
        
        
        
        NUINDEX          BINARY_INTEGER;
        TBATTRIBUTESSET  OR_BOORDERATTRIBUTESET.TYTBATTSETTASTYPACTION;
        TBRECDATAVALUES  UT_STRING.TYTB_STRING;
        TBDATAVALUE      UT_STRING.TYTB_STRING;
        TBDATAVALUENULL  UT_STRING.TYTB_STRING;
        NUATTRIBUTESET   GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID%TYPE;
        NUATTRIBUTE      GE_ATTRIBUTES.ATTRIBUTE_ID%TYPE;
        NUCOUNTER        NUMBER := 0; 
        
        
        
        
        
        CNU_ERR_DO_NOT_EXIST_ATT    CONSTANT NUMBER := 625;

    BEGIN
        UT_TRACE.TRACE('==>Begin OR_BOOrderAdditionalData.updOrderAdditionalData',4);
        UT_TRACE.TRACE('==>Parametro entrada:Datos adicionales:' || ISBADDITIONALDATA,5);

        
        IF ISBADDITIONALDATA IS NULL THEN
            UT_TRACE.TRACE('Proceso:No existen datos en grupos de atributos ni en datos adicionales' ,6);
            UT_TRACE.TRACE('==>END Or_BoLegalize.LoadToAdditionalDataTempTable (return)',4);
            RETURN;
        END IF;

        
        
        IF  ISBADDITIONALDATA IS NOT NULL THEN
            UT_STRING.EXTSTRING(ISBADDITIONALDATA, ';', TBRECDATAVALUES);
        END IF;

        NUINDEX := TBRECDATAVALUES.FIRST;
        UT_TRACE.TRACE('Proceso: EL valor del indice inicial es : ' || TO_CHAR(NUINDEX),6);
        WHILE NUINDEX IS NOT NULL LOOP
            
            
            
            TBDATAVALUE := TBDATAVALUENULL;
            
            UT_STRING.EXTSTRING(TBRECDATAVALUES(NUINDEX), '=', TBDATAVALUE);

            
            IF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_1) THEN
                IRCREQUDATAVALUE.VALUE_1 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_2) THEN
                IRCREQUDATAVALUE.VALUE_2 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_3) THEN
                IRCREQUDATAVALUE.VALUE_3 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_4) THEN
                IRCREQUDATAVALUE.VALUE_4 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_5) THEN
                IRCREQUDATAVALUE.VALUE_5 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_6) THEN
                IRCREQUDATAVALUE.VALUE_6 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_7) THEN
                IRCREQUDATAVALUE.VALUE_7 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_8) THEN
                IRCREQUDATAVALUE.VALUE_8 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_9) THEN
                IRCREQUDATAVALUE.VALUE_9 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_10) THEN
                IRCREQUDATAVALUE.VALUE_10 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_11) THEN
                IRCREQUDATAVALUE.VALUE_11 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_12) THEN
                IRCREQUDATAVALUE.VALUE_12 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_13) THEN
                IRCREQUDATAVALUE.VALUE_13 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_14) THEN
                IRCREQUDATAVALUE.VALUE_14 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_15) THEN
                IRCREQUDATAVALUE.VALUE_15 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_16) THEN
                IRCREQUDATAVALUE.VALUE_16 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_17) THEN
                IRCREQUDATAVALUE.VALUE_17 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_18) THEN
                IRCREQUDATAVALUE.VALUE_18 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_19) THEN
                IRCREQUDATAVALUE.VALUE_19 := TBDATAVALUE(2);
            ELSIF UPPER(TBDATAVALUE(1)) = UPPER(IRCREQUDATAVALUE.NAME_20) THEN
                IRCREQUDATAVALUE.VALUE_20 := TBDATAVALUE(2);
            ELSE
                ERRORS.SETERROR(CNUERR_143594, TBDATAVALUE(1));
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            NUINDEX := TBRECDATAVALUES.NEXT(NUINDEX);
        END LOOP;

        
        IRCREQUDATAVALUE.READ_DATE := SYSDATE;

        
        DAOR_REQU_DATA_VALUE.UPDRECORD(IRCREQUDATAVALUE);
        UT_TRACE.TRACE('==>END OR_BOOrderAdditionalData.updOrderAdditionalData',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('==>EXCEPTION CONTROLLED_ERROR OR_BOOrderAdditionalData.updOrderAdditionalData',4);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('==>EXCEPTION OTHERS OR_BOOrderAdditionalData.updOrderAdditionalData',4);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDORDERADDITIONALDATA;

    























    PROCEDURE INSORDERADDITIONALDATA
    (
        INUORDERID        IN  OR_ORDER.ORDER_ID%TYPE,
        INUATTSET         IN  GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID%TYPE,
        INUTASKTYPEID     IN  OR_ORDER.TASK_TYPE_ID%TYPE,
        INUACTIONID       IN  GE_ACTION_MODULE.ACTION_ID%TYPE,
        ISBADDITIONALDATA IN  VARCHAR2,
        INURECORD         IN  NUMBER
    )
    IS
        
        
        
        NUINDEX          BINARY_INTEGER;
        TBATTRIBUTESSET  OR_BOORDERATTRIBUTESET.TYTBATTSETTASTYPACTION;
        TBRECDATAVALUES  UT_STRING.TYTB_STRING;
        TBDATAVALUE      UT_STRING.TYTB_STRING;
        TBDATAVALUENULL  UT_STRING.TYTB_STRING;
        NUATTRIBUTESET   GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID%TYPE;
        NUATTRIBUTE      GE_ATTRIBUTES.ATTRIBUTE_ID%TYPE;
        NUCOUNTER        NUMBER := 0; 

        NUCAPTUREORDER  GE_ATTRIB_SET_ATTRIB.CAPTURE_ORDER%TYPE;

        RCREQUDATAVALUE DAOR_REQU_DATA_VALUE.STYOR_REQU_DATA_VALUE;
        
        
        
        
        
        CNU_ERR_DO_NOT_EXIST_ATT    CONSTANT NUMBER := 625;
        
        
        CNU_ERR_ATT_AMOU_DO_NOT_EQU CONSTANT NUMBER := 627;
    BEGIN
        UT_TRACE.TRACE('==>Begin OR_BOOrderAdditionalData.insOrderAdditionalData',4);
        UT_TRACE.TRACE('==>Parametro entrada:Datos adicionales:' || ISBADDITIONALDATA,5);

        
        IF ISBADDITIONALDATA IS NULL THEN
            UT_TRACE.TRACE('Proceso:No existen datos en grupos de atributos ni en datos adicionales' ,6);
            UT_TRACE.TRACE('==>END Or_BoLegalize.LoadToAdditionalDataTempTable (return)',4);
            RETURN;
        END IF;

        
        DAOR_TASKTYPE_ADD_DATA.ACCKEY(INUTASKTYPEID, INUATTSET);
        IF DAOR_TASKTYPE_ADD_DATA.FSBGETACTIVE(INUTASKTYPEID, INUATTSET) = GE_BOCONSTANTS.CSBNO THEN
            
            ERRORS.SETERROR(CNUERR_143614, INUATTSET);
        END IF;

        
        
        IF  ISBADDITIONALDATA IS NOT NULL THEN
            UT_STRING.EXTSTRING(ISBADDITIONALDATA, ';', TBRECDATAVALUES);
        END IF;

        VALIDADDDATATOINS(INUATTSET, TBRECDATAVALUES, INURECORD);

        NUINDEX := TBRECDATAVALUES.FIRST;
        UT_TRACE.TRACE('Proceso: EL valor del indice inicial es : ' || TO_CHAR(NUINDEX),6);
        WHILE NUINDEX IS NOT NULL LOOP
            
            
            
            TBDATAVALUE := TBDATAVALUENULL;
            
            UT_STRING.EXTSTRING(TBRECDATAVALUES(NUINDEX), '=', TBDATAVALUE);

            NUCAPTUREORDER := GE_BCATTRIB_SET_ATTRIB.FNUGETATTPOSINATTSETBYATTNAME(INUATTSET, TBDATAVALUE(1));

            
            IF NUCAPTUREORDER = 1 THEN
                RCREQUDATAVALUE.NAME_1     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_1    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 2 THEN
                RCREQUDATAVALUE.NAME_2     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_2    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 3 THEN
                RCREQUDATAVALUE.NAME_3     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_3    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 4 THEN
                RCREQUDATAVALUE.NAME_4     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_4    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 5 THEN
                RCREQUDATAVALUE.NAME_5     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_5    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 6 THEN
                RCREQUDATAVALUE.NAME_6     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_6    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 7 THEN
                RCREQUDATAVALUE.NAME_7     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_7    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 8 THEN
                RCREQUDATAVALUE.NAME_8     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_8    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 9 THEN
                RCREQUDATAVALUE.NAME_9     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_9    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 10 THEN
                RCREQUDATAVALUE.NAME_10     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_10    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 11 THEN
                RCREQUDATAVALUE.NAME_11     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_11    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 12 THEN
                RCREQUDATAVALUE.NAME_12     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_12    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 13 THEN
                RCREQUDATAVALUE.NAME_13     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_13    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 14 THEN
                RCREQUDATAVALUE.NAME_14     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_14    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 15 THEN
                RCREQUDATAVALUE.NAME_15     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_15    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 16 THEN
                RCREQUDATAVALUE.NAME_16     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_16    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 17 THEN
                RCREQUDATAVALUE.NAME_17     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_17    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 18 THEN
                RCREQUDATAVALUE.NAME_18     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_18    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 19 THEN
                RCREQUDATAVALUE.NAME_19     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_19    := TBDATAVALUE(2);
            ELSIF NUCAPTUREORDER = 20 THEN
                RCREQUDATAVALUE.NAME_20     := TBDATAVALUE(1);
                RCREQUDATAVALUE.VALUE_20    := TBDATAVALUE(2);
            ELSE
                ERRORS.SETERROR(CNUERR_143594, TBDATAVALUE(1));
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            NUINDEX := TBRECDATAVALUES.NEXT(NUINDEX);
        END LOOP;

        
        RCREQUDATAVALUE.ACTION_ID := INUACTIONID;
        RCREQUDATAVALUE.ATTRIBUTE_SET_ID := INUATTSET;
        RCREQUDATAVALUE.ORDER_ID := INUORDERID;
        RCREQUDATAVALUE.TASK_TYPE_ID := INUTASKTYPEID;
        RCREQUDATAVALUE.READ_DATE := SYSDATE;

        
        DAOR_REQU_DATA_VALUE.INSRECORD(RCREQUDATAVALUE);
        UT_TRACE.TRACE('==>END OR_BOOrderAdditionalData.insOrderAdditionalData',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('==>EXCEPTION CONTROLLED_ERROR OR_BOOrderAdditionalData.insOrderAdditionalData',4);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('==>EXCEPTION OTHERS OR_BOOrderAdditionalData.insOrderAdditionalData',4);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSORDERADDITIONALDATA;

    
















    PROCEDURE ADDORDERCOMMENTS
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        ISBCOMMENTSLINE IN  VARCHAR2
    )
    IS
        TBCOMMENTS      UT_STRING.TYTB_STRING;
        TBDATAVALUE     UT_STRING.TYTB_STRING;
        NUINDEX         NUMBER;
        TBORDERCOMMENT  DAOR_ORDER_COMMENT.TYTBORDER_COMMENT;
        NUORDERCOMMENTID    OR_ORDER_COMMENT.ORDER_COMMENT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('==>Init OR_BOOrderAdditionalData.addOrderComments',15);

        IF  ISBCOMMENTSLINE IS NOT NULL THEN
            UT_STRING.EXTSTRING(ISBCOMMENTSLINE, ';', TBCOMMENTS);
        ELSE
            UT_TRACE.TRACE('No Existen Comentarios', 15);
            RETURN;
        END IF;
        
        NUINDEX := TBCOMMENTS.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            
            TBDATAVALUE.DELETE;
            TBORDERCOMMENT.DELETE;
            
            UT_STRING.EXTSTRING(TBCOMMENTS(NUINDEX), CSBSEPARATOR_3, TBDATAVALUE);
            
            DAGE_COMMENT_TYPE.ACCKEY(TBDATAVALUE(1));

            NUORDERCOMMENTID := NULL;

            OR_BOORDERCOMMENT.INSERTORUPDATECOMMENT
            (
                INUORDERID,
                TBDATAVALUE(1),
                TBDATAVALUE(2),
                GE_BOCONSTANTS.GETNO,
                NUORDERCOMMENTID
            );
            UT_TRACE.TRACE('Comentario ['||NUINDEX||'] procesado['||NUORDERCOMMENTID||']',15);
            NUINDEX := TBCOMMENTS.NEXT(NUINDEX);
        END LOOP;

        UT_TRACE.TRACE('==>END OR_BOOrderAdditionalData.addOrderComments',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('==>EXCEPTION CONTROLLED_ERROR OR_BOOrderAdditionalData.addOrderComments',15);
            RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('==>EXCEPTION OTHERS OR_BOOrderAdditionalData.addOrderComments',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDORDERCOMMENTS;



    
































    PROCEDURE ADDORDERADDDATABYLINE
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        INUATTSET       IN  GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID%TYPE,
        ITBLINE         IN  UT_STRING.TYTB_STRING,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORMESSAGE OUT VARCHAR2,
        INURECORD       IN  NUMBER
    )
    IS
        NUTASKTYPEID    OR_ORDER.TASK_TYPE_ID%TYPE;
        NUACTIONID      GE_ACTION_MODULE.ACTION_ID%TYPE;
        CURFGETDATA     CONSTANTS.TYREFCURSOR;
        TBELEMPRODUCT   TYTBELEMENTPRODUCTID;
        DTMAXREADDATE   OR_REQU_DATA_VALUE.READ_DATE%TYPE;
        RCREQUDATAVALUE DAOR_REQU_DATA_VALUE.STYOR_REQU_DATA_VALUE;
    BEGIN
        UT_TRACE.TRACE('[OR_BOOrderAdditionalData.addOrderAddDataByLine] INICIO',3);

        
        NUTASKTYPEID := DAOR_ORDER.FNUGETTASK_TYPE_ID(INUORDERID);

        NUACTIONID := OR_BOCONSTANTS.CNUORDER_ACTION_CLOSE;
        
        

        
        DTMAXREADDATE := OR_BOORDERATTRIBUTESET.FDTMAXDATEFROMDATAVALUERC(INUORDERID, NUTASKTYPEID, INUATTSET, NUACTIONID);

        IF(DAOR_REQU_DATA_VALUE.FBLEXIST(INUORDERID, INUATTSET, NUTASKTYPEID, NUACTIONID, DTMAXREADDATE)) THEN
            DAOR_REQU_DATA_VALUE.GETRECORD(INUORDERID, INUATTSET, NUTASKTYPEID, NUACTIONID, DTMAXREADDATE, RCREQUDATAVALUE);
            UPDORDERADDITIONALDATA(RCREQUDATAVALUE, ITBLINE(CNUCOL_ADITI_DATA));
        ELSE
            INSORDERADDITIONALDATA(INUORDERID, INUATTSET, NUTASKTYPEID, NUACTIONID, ITBLINE(CNUCOL_ADITI_DATA), INURECORD);
        END IF;
        
        ADDORDERCOMMENTS(INUORDERID, ITBLINE(CNUCOL_COMMENTS));
        

        UT_TRACE.TRACE('[OR_BOOrderAdditionalData.addOrderAddDataByLine] FIN',3);

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
    END ADDORDERADDDATABYLINE;

    
    
    
    PROCEDURE ADDORDERADDDATAFROMFILE
    (
        ISBDIRECTORY         IN VARCHAR2,
        ISBFILENAME          IN VARCHAR2
    )
    IS
        
        FPORDERSDATA        UTL_FILE.FILE_TYPE;
        SBLINE              VARCHAR2(10000);
        NURECORD            NUMBER;
        FPORDERERRORS       UTL_FILE.FILE_TYPE;
        SBERRORFILE         VARCHAR2(100);
        SBERRORLINE         VARCHAR2(2000);
        NUORDERID           OR_ORDER.ORDER_ID%TYPE;
        NUCAUSAL            OR_ORDER.CAUSAL_ID%TYPE;
        NUPERSON            GE_PERSON.PERSON_ID%TYPE;
        NUERRORCODE         NUMBER;
        SBERRORMESSAGE      VARCHAR2(2000);
        NUCOMP              NUMBER;
        TBLINE              UT_STRING.TYTB_STRING;
        NUOPERATINGUNITID   OR_ORDER.OPERATING_UNIT_ID%TYPE;
        NUATTSET            GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('[OR_BOOrderAdditionalData.addOrderAddDataFromFile] INICIO',3);
        
        

        
        GE_BOFILEMANAGER.CHECKFILEISEXISTING (ISBDIRECTORY||CSBFILE_SEPARATOR||ISBFILENAME);

        
        SBERRORFILE := SUBSTR(ISBFILENAME,1,INSTR(ISBFILENAME,'.')-1);

        IF SBERRORFILE IS NULL THEN
           SBERRORFILE := ISBFILENAME;
        END IF;

        SBERRORFILE := SBERRORFILE||'.err';

        
        GE_BOFILEMANAGER.FILEOPEN (FPORDERSDATA, ISBDIRECTORY, ISBFILENAME, GE_BOFILEMANAGER.CSBREAD_OPEN_FILE, 10000);
        
        UT_FILE.FILEOPEN(FPORDERERRORS,ISBDIRECTORY,SBERRORFILE,'w', 10000);

        NURECORD := 0;
        
        WHILE TRUE LOOP

            
            GE_BOFILEMANAGER.FILEREAD (FPORDERSDATA, SBLINE);

            EXIT WHEN SBLINE IS NULL;
            NURECORD := NURECORD + 1;
            
            LOADANDVALIDINITIALDATA(SBLINE,NURECORD,NUORDERID, NUATTSET, TBLINE, NUERRORCODE, SBERRORMESSAGE);

            IF NUERRORCODE = GE_BOCONSTANTS.CNUSUCCESS THEN
                LOCKORDER(NUORDERID, NUERRORCODE, SBERRORMESSAGE);  
            END IF;

            IF NUERRORCODE <> GE_BOCONSTANTS.CNUSUCCESS THEN
               NUORDERID := FNUGETORDER(SBLINE);
               SBERRORLINE := NUORDERID ||' '|| NUERRORCODE ||'-'|| SBERRORMESSAGE;
               UT_TRACE.TRACE('Orden ['||NUORDERID||'] Error '||NUERRORCODE||'-'|| SBERRORMESSAGE);
               
               UT_FILE.FILEWRITE(FPORDERERRORS,SBERRORLINE);
               SBERRORLINE := NULL;
            ELSE

                ADDORDERADDDATABYLINE(NUORDERID, NUATTSET, TBLINE, NUERRORCODE, SBERRORMESSAGE, NURECORD);

                IF NUERRORCODE <> GE_BOCONSTANTS.CNUSUCCESS THEN
                   SBERRORLINE := '['||NURECORD ||']['|| NUORDERID ||'] '|| NUERRORCODE ||'-'|| SBERRORMESSAGE;
                   UT_TRACE.TRACE('Error '||NUERRORCODE||'-'|| SBERRORMESSAGE);
                   
                   UT_FILE.FILEWRITE(FPORDERERRORS,SBERRORLINE);
                   SBERRORLINE := NULL;
                   ROLLBACK;
                ELSE
                  
                  COMMIT;
                END IF;
            END IF;
        END LOOP;

        
        IF UTL_FILE.IS_OPEN (FPORDERSDATA) THEN
            GE_BOFILEMANAGER.FILECLOSE (FPORDERSDATA);
        END IF;
        
        IF UTL_FILE.IS_OPEN (FPORDERERRORS) THEN
            GE_BOFILEMANAGER.FILECLOSE (FPORDERERRORS);
        END IF;

        UT_TRACE.TRACE('[OR_BOOrderAdditionalData.addOrderAddDataFromFile] FIN',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
END OR_BOORDERADDITIONALDATA;