
CREATE OR REPLACE PACKAGE BODY GE_BCNOTIFICATION_LOG IS
   CSBVERSION CONSTANT VARCHAR2( 50 ) := 'SAO234144';
   CSBGE_NOTIFICATION_LOG CONSTANT VARCHAR2( 50 ) := 'SEQ_GE_NOTIFICATION_LOG';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION GETNOTIFICATION_LOG( INUROWNUM IN NUMBER )
    RETURN CONSTANTS.TYREFCURSOR
    IS
      CUNOTIFICATION_LOG CONSTANTS.TYREFCURSOR;
    BEGIN
      UT_TRACE.TRACE( 'INICIO: GE_BCNotification_log.GetNotification_log', 4 );
      OPEN CUNOTIFICATION_LOG FOR SELECT /*+FIRST ROWS*/ 
            a.rowid, a.NOTIFICATION_LOG_ID, a.NOTIFICATION_ID, 
            a.NOTIFICATION_TYPE_ID, a.ORIGIN_MODULE_ID, a.TARGET_MODULE_ID, 
            a.EXTERNAL_ID, a.INPUT_DATA, a.PARAMETERS, 
            a.OUTPUT, a.attempt_next, 
            b.XSL_TEMPLATE_ID, b.FORMAT_TYPE, a.ATTEMPT_NUMBER, 
            c.OBJECT_ID, NAME_ , 
            e.TEMPLATE_XSL 
        FROM ge_notification_log a, ge_notification b, ge_notification_type c, 
            ge_object d, ge_xsl_template e 
        WHERE a.notification_id = b.notification_id 
          AND a.notification_type_id = b.notification_type_id 
          AND a.notification_type_id = c.notification_type_id 
          AND c.OBJECT_ID = d.OBJECT_ID (+) 
          AND b.xsl_template_id = e.xsl_template_id (+) 
          AND a.status !=  GE_BONotification.csbStatus_SE 
          AND a.attempt_number < b.attempt_number 
          AND a.attempt_next <= ut_date.fdtSysdate
          AND rownum <= inuRowNum;
      UT_TRACE.TRACE( 'FIN: GE_BCNotification_log.GetNotification_log', 4 );
      RETURN CUNOTIFICATION_LOG;
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETNOTIFICATION_LOG;
   FUNCTION GETFILENAME( INUNOTIFICATION_LOG_ID IN GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE )
    RETURN VARCHAR2
    IS
      CURSOR CUFILENAME IS
SELECT /*+ index( a.PK_GE_NOTIFICATION_LOG)
                    index( b.PK_GE_MODULE)
                    index( c.PK_GE_NOTIFICATION) */
                   C.mnemonic || '_' || A.notification_log_id  ||
                   decode(B.format_type,'C','.HTML','.TXT') fileName
            FROM   ge_notification_log A, ge_notification B, ge_module C
            WHERE  A.notification_log_id = inuNotification_log_id
            AND    A.notification_id     = B.notification_id
            AND    A.origin_module_id    = C.module_id;
      SBFILENAME VARCHAR2( 250 ) := NULL;
    BEGIN
      UT_TRACE.TRACE( 'INICIO: GE_BCNotification_log.GetFileName', 4 );
      UT_TRACE.TRACE( 'inuNotification_log_id: ' || INUNOTIFICATION_LOG_ID, 5 );
      IF ( INUNOTIFICATION_LOG_ID IS NOT NULL AND INUNOTIFICATION_LOG_ID > 0 ) THEN
         IF ( CUFILENAME%ISOPEN ) THEN
            CLOSE CUFILENAME;
         END IF;
         OPEN CUFILENAME;
         FETCH CUFILENAME
            INTO SBFILENAME;
         CLOSE CUFILENAME;
      END IF;
      UT_TRACE.TRACE( 'sbFileName: ' || SBFILENAME, 5 );
      UT_TRACE.TRACE( 'FIN: GE_BCNotification_log.GetFileName', 4 );
      RETURN SBFILENAME;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         IF ( CUFILENAME%ISOPEN ) THEN
            CLOSE CUFILENAME;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( CUFILENAME%ISOPEN ) THEN
            CLOSE CUFILENAME;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETFILENAME;
   FUNCTION FNUJOINNOTIFICATIONFILES( ISBNOTIFYLOGIDS IN VARCHAR2 )
    RETURN NUMBER
    IS
      NUINDEX BINARY_INTEGER;
      RCNEWNOTIFICATIONLOG DAGE_NOTIFICATION_LOG.STYGE_NOTIFICATION_LOG;
      SBROWID VARCHAR2( 100 );
    BEGIN
      UT_TRACE.TRACE( 'INICIO: GE_BCNotification_log.fnuJoinNotificationFiles', 4 );
      NUINDEX := GE_BONOTIFICATION_LOG.GTBNOTIFYIDS.FIRST;
      UT_CLOB.CLEAR;
      LOOP
         EXIT WHEN NUINDEX IS NULL;
         IF ( DAGE_NOTIFICATION_LOG.FSBGETOUTPUT( GE_BONOTIFICATION_LOG.GTBNOTIFYIDS( NUINDEX ) ) = CSBOUTPUT_CLOB ) THEN
            UT_CLOB.ADDVARCHAR2( '<p>' );
            UT_CLOB.ADDCLOB( DAGE_NOTIFICATION_LOG.FCLGETOUTPUT_CLOB( GE_BONOTIFICATION_LOG.GTBNOTIFYIDS( NUINDEX ) ) );
            UT_CLOB.ADDVARCHAR2( '</p>' );
          ELSE
            UT_CLOB.ADDVARCHAR2( '<p>' );
            UT_CLOB.ADDVARCHAR2( DAGE_NOTIFICATION_LOG.FSBGETOUTPUT_TEXT( GE_BONOTIFICATION_LOG.GTBNOTIFYIDS( NUINDEX ) ) );
            UT_CLOB.ADDVARCHAR2( '</p>' );
         END IF;
         NUINDEX := GE_BONOTIFICATION_LOG.GTBNOTIFYIDS.NEXT( NUINDEX );
      END LOOP;
      GE_BONOTIFICATION_LOG.GTBNOTIFYIDS.DELETE;
      RCNEWNOTIFICATIONLOG.NOTIFICATION_LOG_ID := SEQ.GETNEXT( CSBGE_NOTIFICATION_LOG );
      RCNEWNOTIFICATIONLOG.NOTIFICATION_TYPE_ID := 1;
      RCNEWNOTIFICATIONLOG.ORIGIN_MODULE_ID := OR_BOCONSTANTS.CNUOR_MODULE;
      RCNEWNOTIFICATIONLOG.TARGET_MODULE_ID := OR_BOCONSTANTS.CNUOR_MODULE;
      RCNEWNOTIFICATIONLOG.STATUS := GE_BONOTIFICATION.CSBSTATUS_SE;
      RCNEWNOTIFICATIONLOG.OUTPUT := CSBOUTPUT_CLOB;
      RCNEWNOTIFICATIONLOG.OUTPUT_CLOB := UT_CLOB.FSBGETCLOBDATA;
      RCNEWNOTIFICATIONLOG.ATTEMPT_NUMBER := 1;
      RCNEWNOTIFICATIONLOG.ATTEMPT_DATE := UT_DATE.FDTSYSDATE;
      RCNEWNOTIFICATIONLOG.ATTEMPT_NEXT := UT_DATE.FDTSYSDATE;
      DAGE_NOTIFICATION_LOG.INSRECORD( RCNEWNOTIFICATIONLOG, SBROWID );
      UT_TRACE.TRACE( 'FIN: GE_BCNotification_log.fnuJoinNotificationFiles', 4 );
      RETURN RCNEWNOTIFICATIONLOG.NOTIFICATION_LOG_ID;
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUJOINNOTIFICATIONFILES;
END GE_BCNOTIFICATION_LOG;
/


