PACKAGE BODY mo_boRegisterXmlProcess IS
    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO201755';

    CSBWORKINSTANCE CONSTANT GE_BOINSTANCECONTROL.STYSBNAME := MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE;

    
    CNUVALUEINVALIDATTRIB       CONSTANT NUMBER := 3393;
    
    CNUVALUEINVALID             CONSTANT NUMBER := 114207;
    
    CNUSTATUSINVALIDPRODUCT     CONSTANT NUMBER := 116140;
    
    CNUSTATUSINVALIDCOMPONENT   CONSTANT NUMBER := 116141;
    
    CNUSTATUSINVALIDREQUEST     CONSTANT NUMBER := 116142;
    
    CNUINVALIDREQUESTFORPROD    CONSTANT NUMBER := 116581;
    
    CNUINVALIDREQUESTFORCOMP    CONSTANT NUMBER := 116582;
    
    CNUINVALIDREQUESTFORREQ     CONSTANT NUMBER := 116583;

    
    
    

    





    TYPE TYRCREQUIREDATTRIBUTE IS RECORD
    (
        SBTAGNAME    GE_BOINSTANCECONTROL.STYSBNAME,
        SBENTITY     GE_BOINSTANCECONTROL.STYSBNAME,
        SBATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME
    );

    





  

    
    


    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;






















PROCEDURE VALIDATETAGNAME
(
    ISBTAGNAME   IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
IS
BEGIN
    UT_TRACE.TRACE ('mo_boRegisterXmlProcess.ValidateTagName ['|| ISBTAGNAME ||']['|| ISBENTITY ||']['|| ISBATTRIBUTE ||']', 4);
    
    IF ISBTAGNAME IS NULL THEN
        ERRORS.SETERROR (MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_TAG_NULL, ISBATTRIBUTE ||'|'|| ISBENTITY);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;






















PROCEDURE ADDREQUIREDATTRIBUTE
(
    ISBTAGNAME   IN VARCHAR2,
    ISBENTITY    IN VARCHAR2,
    ISBATTRIBUTE IN VARCHAR2
)
IS

NUREQUIREDINDEX  GE_BOINSTANCECONTROL.STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('mo_boRegisterXmlProcess.AddRequiredAttribute ['|| ISBTAGNAME ||']['|| ISBENTITY ||']['|| ISBATTRIBUTE ||']', 4);
    
    NUREQUIREDINDEX := TBREQUIREDATTRIBUTE.COUNT;

    TBREQUIREDATTRIBUTE(NUREQUIREDINDEX).SBTAGNAME   := ISBTAGNAME;
    TBREQUIREDATTRIBUTE(NUREQUIREDINDEX).SBENTITY    := ISBENTITY;
    TBREQUIREDATTRIBUTE(NUREQUIREDINDEX).SBATTRIBUTE := ISBATTRIBUTE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


























PROCEDURE GETGROUPNAME
(
    INDNODE     IN XMLDOM.DOMNODE,
    TBATTRIBUTE IN MO_BOCONFIGURATIONCONTROL.TYTBCONFIGRECORD,
    OSBGROUP    OUT NOCOPY VARCHAR2
)
IS

NUINDEX  GE_BOINSTANCECONTROL.STYNUINDEX;

BEGIN
    UT_TRACE.TRACE ('mo_boRegisterXmlProcess.AddRequiredAttribute', 4);

     OSBGROUP := MO_BODOM.FSBGETATTRIBUTE (INDNODE, 'GROUP');

    IF ( OSBGROUP IS NULL ) THEN
        NUINDEX := TBATTRIBUTE.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            UT_TRACE.TRACE ('tbAttribute(nuIndex).TAG_NAME: ' || TBATTRIBUTE(NUINDEX).TAG_NAME || '-' || TBATTRIBUTE(NUINDEX).IS_ATTRIB_XML_NODE, 1);
            IF TBATTRIBUTE(NUINDEX).IS_ATTRIB_XML_NODE = GE_BOCONSTANTS.CSBYES THEN
                OSBGROUP := OSBGROUP || MO_BODOM.FSBGETATTRIBUTE (INDNODE, TBATTRIBUTE(NUINDEX).TAG_NAME);
                UT_TRACE.TRACE ('osbGroup: ' || OSBGROUP , 1);
            END IF;

            NUINDEX := TBATTRIBUTE.NEXT(NUINDEX);
        END LOOP;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

    



















    PROCEDURE VALIDSTATUS
    (
        ISBTAGNAME              IN VARCHAR2,
        ISBVALUE                IN VARCHAR2,
        INUSTATUS               IN NUMBER,
        ISBTAGNAMEPACKAGETYPE   IN PS_PACKAGE_TYPE.TAG_NAME%TYPE
    )
    IS
        BLSTATUSVALID   BOOLEAN := TRUE;
    BEGIN
        UT_TRACE.TRACE('Estado Actual:['||INUSTATUS||']',20);

        

        FOR REC IN SA_BCTAB.CUTABOPTIONSTATUSBYTABNAME(ISBTAGNAME, ISBTAGNAMEPACKAGETYPE) LOOP
            UT_TRACE.TRACE('Estado Valido:['||REC.STATUS_ID||']',20);
            IF (REC.STATUS_ID = INUSTATUS) THEN
                BLSTATUSVALID := TRUE;
                EXIT;
            ELSE
                BLSTATUSVALID := FALSE;
            END IF;
        END LOOP;

        IF (NOT BLSTATUSVALID) THEN
            IF (ISBTAGNAME = 'PRODUCT') THEN
                ERRORS.SETERROR
                    (
                    CNUSTATUSINVALIDPRODUCT,
                    TO_CHAR(INUSTATUS) || '|' || TO_CHAR(ISBVALUE)
                    );
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            IF (ISBTAGNAME = 'PRODUCT_COMPONENT') THEN
                ERRORS.SETERROR
                    (
                    CNUSTATUSINVALIDCOMPONENT,
                    TO_CHAR(INUSTATUS) || '|' || TO_CHAR(ISBVALUE)
                    );
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            IF (ISBTAGNAME = 'REQUEST') THEN
                ERRORS.SETERROR
                    (
                    CNUSTATUSINVALIDREQUEST,
                    TO_CHAR(INUSTATUS) || '|' || TO_CHAR(ISBVALUE)
                    );
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDSTATUS;


    


































    PROCEDURE LOADINFORMATIONINSTANCE
    (
        ISBTAGNAME              IN VARCHAR2,
        ISBVALUE                IN VARCHAR2,
        ISBTAGNAMEPACKAGETYPE   IN PS_PACKAGE_TYPE.TAG_NAME%TYPE
    )
    IS
        NUSTATUS            NUMBER;
        NUPRODUCTTYPEID     SERVICIO.SERVCODI%TYPE;
        NUPRODUCTID         PR_COMPONENT.PRODUCT_ID%TYPE;
        
    BEGIN
        IF (ISBTAGNAME = 'PRODUCT') THEN
            GI_BOINSTANCEDATA.LOADCLIENTINFORMATION(PKTBLSUSCRIPC.FNUGETCUSTOMER(DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(TO_NUMBER(ISBVALUE))), FALSE);
            GI_BOINSTANCEDATA.LOADCONTRACTINFORMATION(DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(TO_NUMBER(ISBVALUE)), FALSE);
            GI_BOINSTANCEDATA.LOADPRODUCTINFORMATION(TO_NUMBER(ISBVALUE), FALSE);

            
            NUSTATUS := DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(TO_NUMBER(ISBVALUE));

            
            VALIDSTATUS(ISBTAGNAME, ISBVALUE, NUSTATUS, ISBTAGNAMEPACKAGETYPE);

        END IF;
        
        IF (ISBTAGNAME = 'PROD_SERVICE_NUMBER') THEN
            PR_BOPRODUCT.GETPRODUCTIDBYSERVNUM(ISBVALUE,NUPRODUCTID);
            GI_BOINSTANCEDATA.LOADCLIENTINFORMATION(PKTBLSUSCRIPC.FNUGETCUSTOMER(DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(NUPRODUCTID)), FALSE);
            GI_BOINSTANCEDATA.LOADCONTRACTINFORMATION(DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(NUPRODUCTID), FALSE);
            GI_BOINSTANCEDATA.LOADPRODUCTINFORMATION(NUPRODUCTID, FALSE);

            
            NUSTATUS := DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(NUPRODUCTID);

            
            VALIDSTATUS(ISBTAGNAME, NUPRODUCTID, NUSTATUS, ISBTAGNAMEPACKAGETYPE);

        END IF;

        IF (ISBTAGNAME = 'PRODUCT_COMPONENT') THEN
            GI_BOINSTANCEDATA.LOADCLIENTINFORMATION(PKTBLSUSCRIPC.FNUGETCUSTOMER(DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(DAPR_COMPONENT.FNUGETPRODUCT_ID(TO_NUMBER(ISBVALUE)))), FALSE);
            GI_BOINSTANCEDATA.LOADCONTRACTINFORMATION(DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(DAPR_COMPONENT.FNUGETPRODUCT_ID(TO_NUMBER(ISBVALUE))), FALSE);
            GI_BOINSTANCEDATA.LOADPRODUCTINFORMATION(DAPR_COMPONENT.FNUGETPRODUCT_ID(TO_NUMBER(ISBVALUE)), FALSE);
            GI_BOINSTANCEDATA.LOADCOMPONENTINFORMATION(TO_NUMBER(ISBVALUE), FALSE);

            
            NUSTATUS := DAPR_COMPONENT.FNUGETCOMPONENT_STATUS_ID(TO_NUMBER(ISBVALUE));

            
            VALIDSTATUS(ISBTAGNAME, ISBVALUE, NUSTATUS, ISBTAGNAMEPACKAGETYPE);

        END IF;

        IF (ISBTAGNAME = 'CONTRACT') THEN
            GI_BOINSTANCEDATA.LOADCLIENTINFORMATION(PKTBLSUSCRIPC.FNUGETCUSTOMER(TO_NUMBER(ISBVALUE)), FALSE);
            GI_BOINSTANCEDATA.LOADCONTRACTINFORMATION(TO_NUMBER(ISBVALUE), FALSE);
        END IF;

        IF (ISBTAGNAME = 'CUSTOMER') THEN
            GI_BOINSTANCEDATA.LOADCLIENTINFORMATION(TO_NUMBER(ISBVALUE), FALSE);
        END IF;

        IF (ISBTAGNAME = 'REQUEST') THEN
            GI_BOINSTANCEDATA.LOADREQUESTINFORMATION(TO_NUMBER(ISBVALUE), FALSE);

            
            NUSTATUS := DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(TO_NUMBER(ISBVALUE));

            
            VALIDSTATUS(ISBTAGNAME, ISBVALUE, NUSTATUS, ISBTAGNAMEPACKAGETYPE);

        END IF;

        IF (ISBTAGNAME = 'COMMERCIAL_PLAN_ID') OR (ISBTAGNAME = 'PLAN_COMERCIAL') THEN
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(CSBWORKINSTANCE, NULL, 'MO_PACKAGES', 'COMMERCIAL_PLAN_ID', ISBVALUE, TRUE);
        END IF;

        IF (ISBTAGNAME = 'PRODUCT_TYPE_ID') THEN
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(CSBWORKINSTANCE, NULL, 'MO_PACKAGES', 'PRODUCT_TYPE_ID', ISBVALUE, TRUE);
        END IF;

        
        IF (ISBTAGNAME = 'REQUEST_ID_EXTERN') THEN
            GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE ('REQUEST_ID_EXTERN', ISBVALUE);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADINFORMATIONINSTANCE;

    























    PROCEDURE VALIDVALUE
    (
        IOSBVALUE       IN OUT GE_BOINSTANCECONTROL.STYSBVALUE,
        IRCCONFIGRECORD IN MO_BOCONFIGURATIONCONTROL.TYRCCONFIGRECORD,
        INUOBJECTTYPE   IN NUMBER,
        INUOBJECTID     IN NUMBER,
        ISBTAGNAME      IN VARCHAR2
    )
    IS
        RCPACKAGEATTRIBS    DAPS_PACKAGE_ATTRIBS.STYPS_PACKAGE_ATTRIBS;
        RCPRODMOTIATTRIB    DAPS_PROD_MOTI_ATTRIB.STYPS_PROD_MOTI_ATTRIB;
        RCMOTICOMPATTRIBS   DAPS_MOTI_COMP_ATTRIBS.STYPS_MOTI_COMP_ATTRIBS;
        NUENTITYATTRIBUTEID GE_ENTITY_ATTRIBUTES.ENTITY_ATTRIBUTE_ID%TYPE;
        RCENTITYATTRRIBUTES DAGE_ENTITY_ATTRIBUTES.STYGE_ENTITY_ATTRIBUTES;
        NUSTATEMENTID       GE_STATEMENT.STATEMENT_ID%TYPE;
        SBSTYLECASE         GI_COMP_FRAME_ATTRIB.STYLE_CASE%TYPE;

        EXVALUEINVALID      EXCEPTION;
    BEGIN
        
        IF (INUOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT) THEN
            RCPACKAGEATTRIBS := DAPS_PACKAGE_ATTRIBS.FRCGETRECORD(IRCCONFIGRECORD.CONFIG_ID);
            NUENTITYATTRIBUTEID := RCPACKAGEATTRIBS.ENTITY_ATTRIBUTE_ID;
            NUSTATEMENTID := RCPACKAGEATTRIBS.STATEMENT_ID;
        END IF;

        
        IF (INUOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT) THEN
            RCPRODMOTIATTRIB := DAPS_PROD_MOTI_ATTRIB.FRCGETRECORD(IRCCONFIGRECORD.CONFIG_ID);
            NUENTITYATTRIBUTEID := RCPRODMOTIATTRIB.ENTITY_ATTRIBUTE_ID;
            NUSTATEMENTID := RCPRODMOTIATTRIB.STATEMENT_ID;
        END IF;

        
        IF (INUOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT) THEN
            RCMOTICOMPATTRIBS := DAPS_MOTI_COMP_ATTRIBS.FRCGETRECORD(IRCCONFIGRECORD.CONFIG_ID);
            NUENTITYATTRIBUTEID := RCMOTICOMPATTRIBS.ENTITY_ATTRIBUTE_ID;
            NUSTATEMENTID := RCMOTICOMPATTRIBS.STATEMENT_ID;
        END IF;

        
        RCENTITYATTRRIBUTES := DAGE_ENTITY_ATTRIBUTES.FRCGETRECORD(NUENTITYATTRIBUTEID);

        
        IF (RCENTITYATTRRIBUTES.ATTRIBUTE_TYPE_ID = GE_BOENTITYATTRIBUTES.NUMBER_TYPE_CONST) THEN

            
            IF (UT_CONVERT.FSBIS_NUMBER(IOSBVALUE) = GE_BOCONSTANTS.CSBNO) THEN
                RAISE EXVALUEINVALID;
            END IF;
        END IF;

        
        IF (RCENTITYATTRRIBUTES.ATTRIBUTE_TYPE_ID = GE_BOPARAMETER.FNUGET('DATE')) THEN
            
            IF (NOT UT_CONVERT.IS_DATE(IOSBVALUE)) THEN
                RAISE EXVALUEINVALID;
            END IF;
        END IF;

        
        IF (RCENTITYATTRRIBUTES.ATTRIBUTE_TYPE_ID = GE_BOENTITYATTRIBUTES.VARCHAR_TYPE_CONST) THEN
        
            
            FOR REC IN GI_BCCONFIGURATION.CUCOMPFRAMEATTRIBBYATTRIB(INUOBJECTTYPE, INUOBJECTID, NUENTITYATTRIBUTEID) LOOP
                SBSTYLECASE := REC.STYLE_CASE;
            END LOOP;

            IF (SBSTYLECASE = GI_BOCONSTANTS.CSBSTYLE_UPPER) THEN
                IOSBVALUE := UPPER(IOSBVALUE);
            END IF;

            IF (SBSTYLECASE = GI_BOCONSTANTS.CSBSTYLE_LOWER) THEN
                IOSBVALUE := LOWER(IOSBVALUE);
            END IF;
        END IF;

        
        IF (NUSTATEMENTID IS NOT NULL) THEN

            
            IF (NOT GE_BOSTATEMENT.FBOVALUEISVALIDINSTATEMENT(NUSTATEMENTID, IOSBVALUE)) THEN
                ERRORS.SETERROR (CNUVALUEINVALID, IOSBVALUE || '|' || ISBTAGNAME || ' - ' || RCENTITYATTRRIBUTES.DISPLAY_NAME);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

    EXCEPTION
        WHEN EXVALUEINVALID THEN
            ERRORS.SETERROR (
                            CNUVALUEINVALIDATTRIB,
                            IOSBVALUE || '|' ||
                            RCENTITYATTRRIBUTES.DISPLAY_NAME || '|' ||
                            DAGE_ATTRIBUTES_TYPE.FSBGETDESCRIPTION(RCENTITYATTRRIBUTES.ATTRIBUTE_TYPE_ID) || '|' ||
                            IRCCONFIGRECORD.I_TABLE
                            );
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDVALUE;









































PROCEDURE ADDATTRIBUTE
(
    ISBINSTANCE             IN GE_BOINSTANCECONTROL.STYSBNAME,
    INDNODE                 IN XMLDOM.DOMNODE,
    ISBGROUP                IN VARCHAR2,
    IRCATTRIBUTE            IN MO_BOCONFIGURATIONCONTROL.TYRCCONFIGRECORD,
    INUOBJECTTYPE           IN NUMBER,
    INUOBJECTID             IN NUMBER,
    ISBTAGNAMEPACKAGETYPE   IN PS_PACKAGE_TYPE.TAG_NAME%TYPE
)
IS
    SBVALUE             GE_BOINSTANCECONTROL.STYSBVALUE;
    NUINDEXVAL          GE_BOINSTANCECONTROL.STYNUINDEX;
BEGIN
    
            SBVALUE := NULL;

            
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBINSTANCE, ISBGROUP, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN, SBVALUE);

            
            GE_BOINSTANCECONTROL.SETCURRENTDATA (ISBINSTANCE, ISBGROUP, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN);

            

            IF IRCATTRIBUTE.INIT_EXPRESSION_ID IS NOT NULL THEN

                GE_BOINSTANCECONTROL.EXECUTEEXPRESSION (IRCATTRIBUTE.INIT_EXPRESSION_ID);

                GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS (ISBINSTANCE, ISBGROUP, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN, IRCATTRIBUTE.INIT_EXPRESSION_ID, GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION);
            END IF;

            
            IF IRCATTRIBUTE.IN_XML = GE_BOCONSTANTS.CSBYES THEN
                IF IRCATTRIBUTE.TAG_NAME IS NULL THEN
                    ERRORS.SETERROR (MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_NOT_TAG_ATTRIBUTE, IRCATTRIBUTE.I_COLUMN ||'|'|| IRCATTRIBUTE.I_COLUMN);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

                
                IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(ISBINSTANCE, ISBGROUP, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN,NUINDEXVAL)) THEN

                    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(ISBINSTANCE, ISBGROUP, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN,SBVALUE);
                    UT_TRACE.TRACE('Valor Obtenido del XML:['||SBVALUE||']',4);

                END IF;

                
                IF IRCATTRIBUTE.IS_ATTRIB_XML_NODE = GE_BOCONSTANTS.CSBYES THEN
                    SBVALUE := MO_BODOM.FSBGETATTRIBUTE (INDNODE, IRCATTRIBUTE.TAG_NAME);
                ELSE
                    
                    IF (MO_BODOM.FBLTAGEXIST(INDNODE, IRCATTRIBUTE.TAG_NAME)) THEN
                        SBVALUE := MO_BODOM.FSBGETVALTAG (INDNODE, IRCATTRIBUTE.TAG_NAME);
                    END IF;
                END IF;
                UT_TRACE.TRACE('Valor Obtenido del XML:['||SBVALUE||']',4);

                
                IF (SBVALUE IS NOT NULL) THEN

                    
                    LOADINFORMATIONINSTANCE(IRCATTRIBUTE.TAG_NAME, SBVALUE, ISBTAGNAMEPACKAGETYPE);

                    
                    VALIDVALUE(SBVALUE, IRCATTRIBUTE, INUOBJECTTYPE, INUOBJECTID, IRCATTRIBUTE.TAG_NAME);
                    UT_TRACE.TRACE('Valor Despu?s Validaci?n:['||SBVALUE||']',4);

                END IF;

                
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBINSTANCE, ISBGROUP, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN, SBVALUE, TRUE);

            END IF;

            
            IF IRCATTRIBUTE.IS_REQUIRED = GE_BOCONSTANTS.CSBYES THEN

                GE_BOINSTANCECONTROL.SETREQUIREDATTRIBUTE (ISBINSTANCE, ISBGROUP, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN, GE_BOINSTANCECONSTANTS.CNUTRUE);

                
                IF  (IRCATTRIBUTE.IN_XML = GE_BOCONSTANTS.CSBYES)
                    AND
                    (SBVALUE IS NULL)
                THEN
                    ADDREQUIREDATTRIBUTE (IRCATTRIBUTE.TAG_NAME, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN);
                END IF;
            END IF;

            
            MO_BOUNCOMPOSITIONUTIL.ADDMIRRORATTRIBUTE   (
                                                        ISBINSTANCE,
                                                        ISBGROUP,
                                                        IRCATTRIBUTE.I_TABLE,
                                                        IRCATTRIBUTE.I_COLUMN,
                                                        IRCATTRIBUTE.MIRROR_TABLE,
                                                        IRCATTRIBUTE.MIRROR_COLUMN,
                                                        MO_BOUNCOMPOSITIONCONSTANTS.CNUNORMAL_MIRROR
                                                        );
            
            GE_BOINSTANCECONTROL.SETCURRENTDATA (ISBINSTANCE, ISBGROUP, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN);

            

            IF (IRCATTRIBUTE.VALID_EXPRESSION_ID IS NOT NULL) AND ((SBVALUE IS NOT NULL)) THEN

                GE_BOINSTANCECONTROL.EXECUTEEXPRESSION (IRCATTRIBUTE.VALID_EXPRESSION_ID);

                GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS (ISBINSTANCE, ISBGROUP, IRCATTRIBUTE.I_TABLE, IRCATTRIBUTE.I_COLUMN, IRCATTRIBUTE.VALID_EXPRESSION_ID, GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION);
            END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

























PROCEDURE ADDATTRIBUTES
(
    ISBINSTANCE             IN GE_BOINSTANCECONTROL.STYSBNAME,
    INDNODE                 IN XMLDOM.DOMNODE,
    ISBGROUP                IN VARCHAR2,
    ITBATTRIBUTE            IN MO_BOCONFIGURATIONCONTROL.TYTBCONFIGRECORD,
    INUOBJECTTYPE           IN NUMBER,
    INUOBJECTID             IN NUMBER,
    ISBTAGNAMEPACKAGETYPE   IN PS_PACKAGE_TYPE.TAG_NAME%TYPE
)
IS
    SBVALUE             GE_BOINSTANCECONTROL.STYSBVALUE;
    NUINDEXINS          GE_BOINSTANCECONTROL.STYNUINDEX;
    NUINDEXATTRIB       GE_BOINSTANCECONTROL.STYNUINDEX;
    NUINDEXVAL          GE_BOINSTANCECONTROL.STYNUINDEX;
    TBCONFIGATTRIBUTE   MO_BOCONFIGURATIONCONTROL.TYTBCONFIGRECORD;
    NDNODE              XMLDOM.DOMNODE;
    NDCURRENT           XMLDOM.DOMNODE;
    LNNODES             XMLDOM.DOMNODELIST;


    PROCEDURE ADDGROUPATTRIBUTES
    (
        IRCATTRIBUTE            IN MO_BOCONFIGURATIONCONTROL.TYRCCONFIGRECORD

    )
    IS
        LNATTRIBUTESGROUP   XMLDOM.DOMNODELIST;
        NUNODES             GE_BOINSTANCECONTROL.STYNUINDEX;
        NURECORDS           GE_BOINSTANCECONTROL.STYNUINDEX;
        SBGROUP             VARCHAR2(200);
        NUELEMENTID         NUMBER;

        TBATRIBSGROUPED     MO_BOCONFIGURATIONCONTROL.TYTBCONFIGRECORD;

    BEGIN
        LNNODES := MO_BODOM.FLNGETCHILDNODES(INDNODE, IRCATTRIBUTE.TAG_NAME);
        NUNODES := MO_BODOM.FINLEN (LNNODES);
        UT_TRACE.TRACE('Cantidad de Nodos Agrupadores :['||NUNODES||']',4);

        IF ( NUNODES = 0 ) THEN
            RETURN;
        END IF;

        FOR NUNODE IN 1..NUNODES LOOP
            NDCURRENT := XMLDOM.ITEM (LNNODES, NUNODE - 1);

            SBGROUP := MO_BODOM.FSBGETATTRIBUTE (NDCURRENT, 'GROUP');
            UT_TRACE.TRACE('Obtiene Grupo :['||SBGROUP||']',4);

            UT_TRACE.TRACE('Nodo Current :['||XMLDOM.GETNODENAME(NDCURRENT) ||'] ElementId :['|| IRCATTRIBUTE.ELEMENT_ID || ']',4);

            LNATTRIBUTESGROUP := XMLDOM.GETCHILDNODES(NDCURRENT);
            UT_TRACE.TRACE('Atributos enviados por xml :['|| MO_BODOM.FINLEN (LNATTRIBUTESGROUP) ||']',4);

            TBATRIBSGROUPED.DELETE;
            MO_BOCONFIGURATIONCONTROL.GETCHILDRECORDS(IRCATTRIBUTE.ELEMENT_ID, MO_BOCONFIGURATIONCONTROL.CNUATTRIBUTE_TYPE , TBATRIBSGROUPED);
            UT_TRACE.TRACE('Atributos Configurados para el nodo:['|| TBATRIBSGROUPED.COUNT ||']',4);

            NUINDEXATTRIB := TBATRIBSGROUPED.FIRST;
            WHILE (NUINDEXATTRIB IS NOT NULL) LOOP

                MO_BOREGISTERXMLPROCESS.ADDATTRIBUTE(
                    ISBINSTANCE                 ,
                    NDCURRENT                   ,
                    SBGROUP                     ,
                    TBATRIBSGROUPED(NUINDEXATTRIB),
                    INUOBJECTTYPE               ,
                    INUOBJECTID                 ,
                    ISBTAGNAMEPACKAGETYPE   );

                NUINDEXATTRIB := TBATRIBSGROUPED.NEXT(NUINDEXATTRIB);
            END LOOP;

        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

BEGIN
    UT_TRACE.TRACE('Instancia:['||ISBINSTANCE||']Grupo:['||ISBGROUP||']Cant. Atributos:['||ITBATTRIBUTE.COUNT||']',4);

    IF ITBATTRIBUTE.COUNT = 0 THEN
        RETURN;
    END IF;

    FOR NUINDEX IN ITBATTRIBUTE.FIRST..ITBATTRIBUTE.LAST LOOP
        UT_TRACE.TRACE('Tag_Name:['||ITBATTRIBUTE(NUINDEX).TAG_NAME||']Atributo:['||ITBATTRIBUTE(NUINDEX).I_COLUMN||']In_Xml:['||ITBATTRIBUTE(NUINDEX).IN_XML||']Xml_Process:['||ITBATTRIBUTE(NUINDEX).XML_PROCESS||']',4);
        LOOP
            
            IF  (ITBATTRIBUTE(NUINDEX).XML_PROCESS != GE_BOCONSTANTS.CSBYES)
                AND
                (ITBATTRIBUTE(NUINDEX).IN_XML != GE_BOCONSTANTS.CSBYES)
            THEN
                EXIT;
            END IF;

            
            IF  (ITBATTRIBUTE(NUINDEX).IS_ATTRIB_XML_NODE = GE_BOCONSTANTS.CSBYES AND
                ITBATTRIBUTE(NUINDEX).OBJECT_TYPE_ID IS NULL) THEN

                ADDGROUPATTRIBUTES(ITBATTRIBUTE(NUINDEX));

                EXIT;
            END IF;

            ADDATTRIBUTE(
                ISBINSTANCE             ,
                INDNODE                 ,
                ISBGROUP                ,
                ITBATTRIBUTE(NUINDEX)   ,
                INUOBJECTTYPE           ,
                INUOBJECTID             ,
                ISBTAGNAMEPACKAGETYPE   );

            EXIT;

        END LOOP;
    END LOOP;
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END ADDATTRIBUTES;




























PROCEDURE RECORRENODOS
(
    ISBINSTANCEFATHER       IN GE_BOINSTANCECONTROL.STYSBNAME,
    INUOBJECTTYPE           IN NUMBER,
    IRCNODE                 IN MO_BOCONFIGURATIONCONTROL.TYRCCONFIGRECORD,
    INDPREVIOUS             IN XMLDOM.DOMNODE,
    ISBTAGNAMEPACKAGETYPE   IN PS_PACKAGE_TYPE.TAG_NAME%TYPE
)
IS
    TBCONFIGNODE        MO_BOCONFIGURATIONCONTROL.TYTBCONFIGRECORD;
    TBCONFIGATTRIBUTE   MO_BOCONFIGURATIONCONTROL.TYTBCONFIGRECORD;
    SBINSTANCE          GE_BOINSTANCECONTROL.STYSBNAME;
    SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME;
    NUOBJECTTYPE        MO_TMP_CONFIG_MOTIVE.OBJECT_TYPE%TYPE;
    NUXMLRECORDS        GE_BOINSTANCECONTROL.STYNUINDEX;
    NURECORDS           GE_BOINSTANCECONTROL.STYNUINDEX;
    NUNODES             GE_BOINSTANCECONTROL.STYNUINDEX;
    NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
    NDPREVIOUS          XMLDOM.DOMNODE;
    NDNODE              XMLDOM.DOMNODE;
    LNNODES             XMLDOM.DOMNODELIST;
    NUPRODUCTTYPEID     PS_PRODUCT_MOTIVE.PRODUCT_TYPE_ID%TYPE;
    NUPRODUCTMOTIVEID   PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
    SBPRODUCTTYPEID     GE_BOINSTANCECONTROL.STYSBVALUE;
BEGIN
    UT_TRACE.TRACE('Inicia MO_BORegisterXmlProcess.RecorreNodos. Inst Padre:['||ISBINSTANCEFATHER||']',4);
    UT_TRACE.TRACE('Tipo Objeto:['||INUOBJECTTYPE||']Nodo:['||IRCNODE.TAG_NAME||']Tipo Objeto Nodo:['||IRCNODE.OBJECT_TYPE||']',4);

    IF IRCNODE.XML_PROCESS != GE_BOCONSTANTS.CSBYES THEN
        RETURN;
    END IF;

    
    MO_BOCONFIGURATIONCONTROL.GETNODES (IRCNODE.ELEMENT_ID, TBCONFIGNODE);
    UT_TRACE.TRACE('Cantidad Hijos:['||TBCONFIGNODE.COUNT||']',4);

    
    MO_BOCONFIGURATIONCONTROL.GETATTRIBUTES (IRCNODE.ELEMENT_ID, TBCONFIGATTRIBUTE);
    UT_TRACE.TRACE('Cantidad Atributos:['||TBCONFIGATTRIBUTE.COUNT||']',4);

    
    LNNODES := MO_BODOM.FLNGETCHILDNODES (INDPREVIOUS, IRCNODE.TAG_NAME);
    NUNODES := MO_BODOM.FINLEN (LNNODES);
    UT_TRACE.TRACE('Cantidad Nodos:['||NUNODES||']',4);

    
    IF NUNODES = 0 THEN

        

        IF  (IRCNODE.IS_REQUIRED = GE_BOCONSTANTS.CSBYES) THEN

            
            IF (IRCNODE.OBJECT_TYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT) THEN

                
                IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK (CSBWORKINSTANCE, NULL, 'MO_PACKAGES', 'PRODUCT_TYPE_ID', NUINDEX)) THEN
                    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (CSBWORKINSTANCE, NULL, 'MO_PACKAGES', 'PRODUCT_TYPE_ID', SBPRODUCTTYPEID);
                ELSE
                    IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK (CSBWORKINSTANCE, NULL, 'PR_PRODUCT', 'PRODUCT_TYPE_ID', NUINDEX)) THEN
                        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (CSBWORKINSTANCE, NULL, 'PR_PRODUCT', 'PRODUCT_TYPE_ID', SBPRODUCTTYPEID);
                    END IF;
                END IF;

                
                NUPRODUCTMOTIVEID := PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME(IRCNODE.TAG_NAME);
                NUPRODUCTTYPEID := DAPS_PRODUCT_MOTIVE.FNUGETPRODUCT_TYPE_ID(NUPRODUCTMOTIVEID);
                UT_TRACE.TRACE('Tipo Producto Instancia:['||SBPRODUCTTYPEID||']Tipo Producto Configurado:['||NUPRODUCTTYPEID||']',5);

                

                IF (NVL(SBPRODUCTTYPEID,NUPRODUCTTYPEID) = NUPRODUCTTYPEID ) THEN
                    ADDREQUIREDATTRIBUTE (IRCNODE.TAG_NAME, IRCNODE.I_TABLE, IRCNODE.I_COLUMN);
                END IF;
            ELSE
                ADDREQUIREDATTRIBUTE (IRCNODE.TAG_NAME, IRCNODE.I_TABLE, IRCNODE.I_COLUMN);
            END IF;
        END IF;
        RETURN;
    END IF;

    NUXMLRECORDS := 0;
    
    FOR NUNODE IN 1..NUNODES LOOP
        NDPREVIOUS := XMLDOM.ITEM (LNNODES, NUNODE - 1);
        NURECORDS := MO_BODOM.FNUGETNODEQUANTITY (XMLDOM.ITEM (LNNODES, NUNODE - 1));
        UT_TRACE.TRACE('Cantidad Records:['||NURECORDS||']',4);

        FOR NURECORD IN 1..NURECORDS LOOP

            
            IF IRCNODE.OBJECT_TYPE_ID IS NOT NULL THEN

                NUXMLRECORDS := NUXMLRECORDS + 1;
                
                
                GI_BOINSTANCE.CREATEINSTANCE(
                                            IRCNODE.TAG_NAME,
                                            IRCNODE.OBJECT_TYPE,
                                            IRCNODE.OBJECT_TYPE_ID,
                                            ISBINSTANCEFATHER,
                                            SBINSTANCE
                                            );
                SBGROUP := NULL;
                NUOBJECTTYPE := IRCNODE.OBJECT_TYPE;
            ELSE
                GETGROUPNAME (XMLDOM.ITEM (LNNODES, NUNODE - 1), TBCONFIGATTRIBUTE, SBGROUP);
                SBINSTANCE := ISBINSTANCEFATHER;
                NUOBJECTTYPE := INUOBJECTTYPE;
            END IF;

            ADDATTRIBUTES (SBINSTANCE, XMLDOM.ITEM (LNNODES, NUNODE - 1), SBGROUP, TBCONFIGATTRIBUTE, IRCNODE.OBJECT_TYPE, IRCNODE.OBJECT_TYPE_ID, ISBTAGNAMEPACKAGETYPE);

            IF TBCONFIGNODE.COUNT != 0 THEN
                FOR NUINDEX IN TBCONFIGNODE.FIRST..TBCONFIGNODE.LAST LOOP
                    
                    VALIDATETAGNAME (TBCONFIGNODE(NUINDEX).TAG_NAME, TBCONFIGNODE(NUINDEX).I_TABLE, TBCONFIGNODE(NUINDEX).I_COLUMN);
                    NDNODE := MO_BODOM.FNDGETNODE (NDPREVIOUS, TBCONFIGNODE(NUINDEX).TAG_NAME);
                    
                    RECORRENODOS (SBINSTANCE, TBCONFIGNODE(NUINDEX).OBJECT_TYPE, TBCONFIGNODE(NUINDEX), NDPREVIOUS, ISBTAGNAMEPACKAGETYPE);
                END LOOP;
            END IF;
        END LOOP;
    END LOOP;

    
    IF IRCNODE.OBJECT_TYPE_ID IS NOT NULL THEN
        IF NUXMLRECORDS < IRCNODE.MIN_OBJECT THEN
            ERRORS.SETERROR (MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_MIN_XML_COMPONENTS, IRCNODE.TAG_NAME);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        IF NUXMLRECORDS > IRCNODE.MAX_OBJECT THEN
            ERRORS.SETERROR (MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_MAX_XML_COMPONENTS, IRCNODE.TAG_NAME);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    END IF;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END RECORRENODOS;




























PROCEDURE REQUIREDATTRIBUTE
IS

SBERROR   VARCHAR2(2000);
SBSTRING  VARCHAR2(2000);
NUINDEX   PLS_INTEGER;

BEGIN
    UT_TRACE.TRACE ('mo_boRegisterXmlProcess.RequiredAttribute INICIO', 2);

    IF TBREQUIREDATTRIBUTE.COUNT = 0 THEN
        RETURN;
    END IF;

    SBERROR := NULL;

    NUINDEX := TBREQUIREDATTRIBUTE.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        SBSTRING := TBREQUIREDATTRIBUTE(NUINDEX).SBTAGNAME ||' -> '|| TBREQUIREDATTRIBUTE(NUINDEX).SBENTITY ||'.'|| TBREQUIREDATTRIBUTE(NUINDEX).SBATTRIBUTE ||'  ';

        IF (LENGTH (SBERROR) + LENGTH (SBSTRING)) >= MO_BOUNCOMPOSITIONCONSTANTS.CNUERROR_LENGTH THEN
            EXIT;
        END IF;

        SBERROR := SBERROR || SBSTRING;
        
        NUINDEX := TBREQUIREDATTRIBUTE.NEXT(NUINDEX);
    END LOOP;

    ERRORS.SETERROR (MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_NOT_XML_ATTRIBUTE, SBERROR);
    RAISE EX.CONTROLLED_ERROR;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;
    FUNCTION READELEMENTVALUE
            (
            INDNODE         IN XMLDOM.DOMNODE,
            ISBELEMENTNAME  IN VARCHAR2
            )
    RETURN VARCHAR2
    IS
        NDFIRSTCHILD    XMLDOM.DOMNODE;
        SBNODENAME     VARCHAR2(2000);
    BEGIN
        
        NDFIRSTCHILD := XMLDOM.GETFIRSTCHILD (INDNODE);

        WHILE NDFIRSTCHILD.ID != -1 LOOP

            IF XMLDOM.GETNODENAME(NDFIRSTCHILD) = ISBELEMENTNAME THEN
                IF XMLDOM.GETFIRSTCHILD(NDFIRSTCHILD).ID!= -1 THEN
                    SBNODENAME:=XMLDOM.GETNODEVALUE(XMLDOM.GETFIRSTCHILD(NDFIRSTCHILD));
                END IF;
                EXIT;
            END IF;

            NDFIRSTCHILD := XMLDOM.GETNEXTSIBLING (NDFIRSTCHILD);
        END LOOP;
        RETURN SBNODENAME;
   EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
    END;

PROCEDURE LOADINSTANCEXML
(
    INUPACKAGETYPEID    IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE,
    INUDOMID            IN NUMBER
)
IS
    NUPACKAGETYPEID     PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE;
    NUPRODUCTTYPEID     PS_PRD_MOTIV_PACKAGE.PRODUCT_TYPE_ID%TYPE;
    SBNODE              VARCHAR2(100);
    RCNODE              MO_BOCONFIGURATIONCONTROL.TYRCCONFIGRECORD;
    NDPREVIOUS          XMLDOM.DOMNODE;
    NDNODE              XMLDOM.DOMNODE;
    TBINSTANCEHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
    NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
    SBOBJECTTYPE        GE_BOINSTANCECONTROL.STYSBVALUE;
    SBOBJECTID          GE_BOINSTANCECONTROL.STYSBVALUE;
    RCTMPCONFIGURATION  DAGI_TMP_CONFIGURATION.STYGI_TMP_CONFIGURATION;
    SBTAGNAME           PS_PACKAGE_TYPE.TAG_NAME%TYPE;
    RCINSTANCE          MO_BOCONFIGURATIONCACHE.STYINSTANCE;
    SBINSTANCEINDEX     GE_BOINSTANCECONTROL.STYSBVALUE;
BEGIN
    UT_TRACE.TRACE('Inicia MO_BORegisterXmlProcess.LoadInstanceXml. Tipo Paquete:['||INUPACKAGETYPEID||']DOM:['||INUDOMID||']',3);

    
    GE_BOINSTANCECONTROL.CREATEINSTANCE (CSBWORKINSTANCE, NULL);

    
    TBREQUIREDATTRIBUTE.DELETE;
    
    NDPREVIOUS.ID := INUDOMID;
    
    
    NDNODE := XMLDOM.GETFIRSTCHILD (NDPREVIOUS);
    UT_TRACE.TRACE('Primer Nodo:['||NDNODE.ID||']',4);

    WHILE NDNODE.ID != -1 LOOP
        IF XMLDOM.GETNODETYPE (NDNODE) = 1 THEN
            EXIT;
        END IF;

        NDNODE := XMLDOM.GETNEXTSIBLING (NDNODE);
    END LOOP;

    SBNODE := XMLDOM.GETNODENAME (NDNODE);
    UT_TRACE.TRACE('Nodo:['||SBNODE||']',4);
    
    
    NUPACKAGETYPEID := TO_NUMBER (MO_BODOM.FSBGETATTRIBUTE (NDNODE, MO_BOUNCOMPOSITIONCONSTANTS.CSBPACKAGE_ID));
    UT_TRACE.TRACE('Tipo Paquete:['||NUPACKAGETYPEID||']',4);


    
    NUPRODUCTTYPEID:= TO_NUMBER(READELEMENTVALUE(NDNODE, 'PRODUCT_TYPE_ID'));
    UT_TRACE.TRACE('Tipo de Producto ['||NUPRODUCTTYPEID||']',4);

    IF NUPACKAGETYPEID IS NULL THEN
        ERRORS.SETERROR (MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_PACKAGE_ID_NULL);
        RAISE EX.CONTROLLED_ERROR;
    END IF;

    
    SBTAGNAME := DAPS_PACKAGE_TYPE.FSBGETTAG_NAME(NUPACKAGETYPEID);
    IF (SBNODE != SBTAGNAME)  THEN
       ERRORS.SETERROR (MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_INVALID_TAG);
       RAISE EX.CONTROLLED_ERROR;
    END IF;

    IF INUPACKAGETYPEID IS NOT NULL THEN
        IF INUPACKAGETYPEID != NUPACKAGETYPEID THEN
            ERRORS.SETERROR (MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_DIF_PACKAGE_ID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
    END IF;

    
    MO_BOCONFIGURATIONCONTROL.LOADPACKAGECONFIGURATION (NUPACKAGETYPEID,NUPRODUCTTYPEID);

    
    MO_BOCONFIGURATIONCONTROL.LOADOBJECTCONFIGURATION (MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT, NUPACKAGETYPEID);

    
    GI_BOLRUCONFIGMANAGEMENT.LOADCONFIGURATIONBYFRAMECONFIG(NUPACKAGETYPEID, GI_BOFRAMEWORKCONSTANTS.CNUENTITYPS_PACKAGE_TYPE, GI_BOCONSTANTS.CNUCUSTOM_CARE_NEW_CONFIG_TYPE,NUPRODUCTTYPEID);

    GE_BOINSTANCECONTROL.ADDATTRIBUTE(CSBWORKINSTANCE, NULL, 'PS_PACKAGE_TYPE', 'PACKAGE_TYPE_ID', TO_CHAR(NUPACKAGETYPEID), TRUE);

    
    GE_BOINSTANCECONTROL.ADDATTRIBUTE(CSBWORKINSTANCE, NULL, 'MO_PROCESS', 'PACKAGE_TYPE_ID', TO_CHAR(NUPACKAGETYPEID), TRUE);

    
    MO_BOCONFIGURATIONCONTROL.GETFIRSTRECORD (RCNODE);
    
    
    RECORRENODOS (CSBWORKINSTANCE, NULL, RCNODE, NDPREVIOUS, SBTAGNAME);

    
    REQUIREDATTRIBUTE;
    
    
    GE_BOINSTANCECONTROL.INSTANCEHIERARCHY (CSBWORKINSTANCE, TBINSTANCEHIERARCHY);

    NUINDEX := TBINSTANCEHIERARCHY.FIRST;
    WHILE NUINDEX IS NOT NULL LOOP
        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(TBINSTANCEHIERARCHY (NUINDEX).SBINSTANCE, NULL, NULL, NULL);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (TBINSTANCEHIERARCHY (NUINDEX).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE);
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (TBINSTANCEHIERARCHY (NUINDEX).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID,   SBOBJECTID);
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (TBINSTANCEHIERARCHY (NUINDEX).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBINSTANCE_INDEX, SBINSTANCEINDEX);

        FOR REC IN GI_BCTMP_CONFIGURATION.CUTMPCONFIGURATION(TO_NUMBER(SBOBJECTTYPE), TO_NUMBER(SBOBJECTID)) LOOP
            RCTMPCONFIGURATION := REC;
        END LOOP;

        IF TO_NUMBER (SBOBJECTTYPE) IN  (MO_BOCONFIGURATIONCONTROL.FNUGETPACKAGEOBJECT, MO_BOCONFIGURATIONCONTROL.FNUGETMOTIVEOBJECT, MO_BOCONFIGURATIONCONTROL.FNUGETCOMPONENTOBJECT) THEN
            MO_BOCONFIGURATIONCACHE.GETINSTANCERECORD (SBINSTANCEINDEX, RCINSTANCE);
            GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (TBINSTANCEHIERARCHY(NUINDEX).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBELEMENT_CATEGORY, RCINSTANCE.ELEMENT_CATEGORY);
        END IF;

        GE_BOINSTANCECONTROL.EXECUTEEXPRESSION (RCTMPCONFIGURATION.AFTER_EXPRESSION_ID);

        NUINDEX := TBINSTANCEHIERARCHY.NEXT (NUINDEX);
    END LOOP;

    GE_BOINSTANCECONTROL.DSPLYALLATTRIBUTESTACK;
    UT_TRACE.TRACE('Finaliza MO_BORegisterXmlProcess.LoadInstanceXml',3);
EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        GE_BOINSTANCECONTROL.DSPLYALLATTRIBUTESTACK;
        RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
        GE_BOINSTANCECONTROL.DSPLYALLATTRIBUTESTACK;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END LOADINSTANCEXML;

END MO_BOREGISTERXMLPROCESS;