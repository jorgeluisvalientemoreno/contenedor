CREATE OR REPLACE PACKAGE BODY MO_BOACTIONUTIL IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO167884';
   BLEXECACTIONINSTANDBY BOOLEAN := FALSE;
   BLEXECUTERULERSUCCESS BOOLEAN;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE EXEC_ACTION( INUACTION IN NUMBER )
    IS
      NUERRCODE GE_MESSAGE.MESSAGE_ID%TYPE := CONSTANTS.CNUSUCCESS;
      SBERRMSG GE_MESSAGE.DESCRIPTION%TYPE;
      NUEXPRID GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE;
    BEGIN
      NUERRCODE := CONSTANTS.CNUSUCCESS;
      GE_BOACTION.GETEXPRESSION( INUACTION, NUEXPRID );
      IF NUEXPRID IS NULL THEN
         RETURN;
      END IF;
      GR_BOCONFIG_EXPRESSION.EXECUTE( NUEXPRID, NUERRCODE, SBERRMSG );
      ERRORS.CHECKERROR( NUERRCODE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETEXECACTIONINSTANDBY( IBLBOOLEAN IN BOOLEAN )
    IS
    BEGIN
      BLEXECACTIONINSTANDBY := IBLBOOLEAN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLGETEXECACTIONINSTANDBY
    RETURN BOOLEAN
    IS
    BEGIN
      RETURN BLEXECACTIONINSTANDBY;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETEXECUTERULERSUCCESS( IBLBOOLEAN IN BOOLEAN )
    IS
    BEGIN
      BLEXECUTERULERSUCCESS := IBLBOOLEAN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLGETEXECUTERULERSUCCESS
    RETURN BOOLEAN
    IS
    BEGIN
      RETURN BLEXECUTERULERSUCCESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXECEQUIVACTIONSFORMOT( INUMOTIVEID IN MO_MOTIVE.MOTIVE_ID%TYPE, INUACTIONID IN GE_ACTION_MODULE.ACTION_ID%TYPE )
    IS
      RCMOTIVE DAMO_MOTIVE.STYMO_MOTIVE;
      NUTARGETACTIONID PS_PROD_MOTI_ACTION.TARGET_ACTION_ID%TYPE;
      NUPREEXPEXECID PS_PROD_MOTI_ACTION.PRE_EXP_EXEC_ID%TYPE;
      NUPOSEXPEXECID PS_PROD_MOTI_ACTION.POS_EXP_EXEC_ID%TYPE;
      CURFGETTARGETACTION CONSTANTS.TYREFCURSOR;
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE VARCHAR2( 2000 );
      EXEXECVALIDEXPRBYACTION EXCEPTION;
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo MO_BOActionUtil.ExecEquivActionsForMot', 3 );
      UT_TRACE.TRACE( 'Motivo  :[' || INUMOTIVEID || ']', 4 );
      UT_TRACE.TRACE( 'Accion  :[' || INUACTIONID || ']', 4 );
      RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD( INUMOTIVEID );
      DAGE_ACTION_MODULE.ACCKEY( INUACTIONID );
      CURFGETTARGETACTION := PS_BCPROD_MOTI_ACTION.FRFGETTARGETACTION( RCMOTIVE.PRODUCT_MOTIVE_ID, INUACTIONID );
      FETCH CURFGETTARGETACTION
         INTO NUTARGETACTIONID, NUPREEXPEXECID, NUPOSEXPEXECID;
      WHILE CURFGETTARGETACTION%FOUND
       LOOP
         UT_TRACE.TRACE( 'Accion Equivalente  :[' || NUTARGETACTIONID || ']', 5 );
         UT_TRACE.TRACE( 'Regla Pre   :[' || NUPREEXPEXECID || ']', 5 );
         UT_TRACE.TRACE( 'Regla Post  :[' || NUPOSEXPEXECID || ']', 5 );
         BLEXECUTERULERSUCCESS := TRUE;
         GE_BOINSTANCECONTROL.EXECUTEEXPRESSION( NUPREEXPEXECID );
         UT_TRACE.TRACE( 'Ejecuto Regla Pre', 5 );
         IF BLEXECUTERULERSUCCESS THEN
            GE_BSACTION.EXECVALIDEXPRBYACTION( INUACTIONID, GE_BOMODULE.GETMOTIVES_MANAGEMENT, GE_BOMODULE.GETMOTIVES_MANAGEMENT, NUERRORCODE, SBERRORMESSAGE );
            IF ( NUERRORCODE != MO_BOCONSTANTS.CNUOK ) THEN
               RAISE EXEXECVALIDEXPRBYACTION;
            END IF;
            UT_TRACE.TRACE( 'Ejecuto Accion', 5 );
            GE_BOINSTANCECONTROL.EXECUTEEXPRESSION( NUPOSEXPEXECID );
            UT_TRACE.TRACE( 'Ejecuto Regla Post', 5 );
         END IF;
         FETCH CURFGETTARGETACTION
            INTO NUTARGETACTIONID, NUPREEXPEXECID, NUPOSEXPEXECID;
      END LOOP;
      CLOSE CURFGETTARGETACTION;
      UT_TRACE.TRACE( 'Finaliza Metodo MO_BOActionUtil.ExecEquivActionsForMot', 3 );
    EXCEPTION
      WHEN EXEXECVALIDEXPRBYACTION THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFGETTARGETACTION );
         ERRORS.SETERROR( MO_BOCONSTERROR.CNUERRCALLSERVICE, 'GE_BSAction.ExecValidExprByAction' || '|' || TO_CHAR( NUERRORCODE ) || ' - ' || SBERRORMESSAGE );
         ERRORS.GETERROR( NUERRORCODE, SBERRORMESSAGE );
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFGETTARGETACTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFGETTARGETACTION );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END MO_BOACTIONUTIL;
/


