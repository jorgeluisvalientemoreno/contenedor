
CREATE OR REPLACE PACKAGE BODY CC_BOCLIENTREGISTEREXECUTOR IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO174529';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE INIT
    IS
    BEGIN
      GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
      GE_BOINSTANCECONTROL.CREATEINSTANCE( CSBWORK_INSTANCE, NULL );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INIT;
   PROCEDURE STOP
    IS
      NUINSTANCE GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      CC_BOATTACHFILES.REMOVEFILES( CSBWORK_INSTANCE );
      IF ( GE_BOINSTANCECONTROL.FBLACCKEYINSTANCESTACK( CSBWORK_INSTANCE, NUINSTANCE ) ) THEN
         GE_BOINSTANCECONTROL.DESTROYINSTANCE( CSBWORK_INSTANCE );
      END IF;
      GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END STOP;
   PROCEDURE LOCKENTITY( ISBENTITYNAME IN GE_ENTITY.NAME_%TYPE, ISBENTITYKEY IN VARCHAR2 )
    IS
      NUREQUESTRESULT INTEGER := 0;
    BEGIN
      UT_TRACE.TRACE( 'Inicia CC_BOClientRegisterExecutor.LockEntity[' || ISBENTITYNAME || '][' || ISBENTITYKEY || ']', 2 );
      IF ( ISBENTITYNAME IS NOT NULL ) AND ( ISBENTITYKEY IS NOT NULL ) THEN
         DECLARE
            SBLOCKHANDLE VARCHAR2( 2000 );
            SBLOCKNAME VARCHAR2( 1000 ) := 'CCCCR_' || ISBENTITYNAME || '_' || ISBENTITYKEY;
         BEGIN
            EXECUTE IMMEDIATE 'DECLARE PRAGMA AUTONOMOUS_TRANSACTION; BEGIN dbms_lock.allocate_unique(:sbLockName,:sbLockHandle); END;'
                              USING IN SBLOCKNAME, OUT SBLOCKHANDLE;
            NUREQUESTRESULT := DBMS_LOCK.REQUEST( LOCKHANDLE=>SBLOCKHANDLE, TIMEOUT=>0, RELEASE_ON_COMMIT=>TRUE );
          EXCEPTION
            WHEN OTHERS THEN
               UT_TRACE.TRACE( 'WARNING: NO BLOQUEO [' || SBLOCKNAME || ']', 2 );
         END;
         UT_TRACE.TRACE( 'LockRequestResult[' || NUREQUESTRESULT || ']', 2 );
         IF ( NUREQUESTRESULT IN ( 1, 2 ) ) THEN
            UT_TRACE.TRACE( 'End CC_BOClientRegisterExecutor.LockEntity NOK', 2 );
            ERRORS.SETERROR( 6951, '[' || ISBENTITYKEY || ']|' || DAGE_ENTITY.FSBGETDISPLAY_NAME( GE_BOENTITY.FNUGETENTITY_ID( ISBENTITYNAME ) ) );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
      UT_TRACE.TRACE( 'End CC_BOClientRegisterExecutor.LockEntity OK', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END LOCKENTITY;
   PROCEDURE GETCONFIG( IRCCONFIG IN DAGI_CONFIG.STYGI_CONFIG, ORFAPPCONFIG OUT CONSTANTS.TYREFCURSOR, ORFAPPNAVIGEXPR OUT CONSTANTS.TYREFCURSOR, ORFAPPDATA OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      UT_TRACE.TRACE( 'Begin CC_BOClientRegisterExecutor.GetConfig', 5 );
      OPEN ORFAPPCONFIG FOR SELECT  a.*
            FROM    gi_config a
            WHERE   a.config_id = ircConfig.config_id;
      CC_BOCLIENTREGISTEREXECUTOR.GETNAVIGEXPRESSIONDATA( IRCCONFIG.CONFIG_ID, ORFAPPNAVIGEXPR );
      OPEN ORFAPPDATA FOR SELECT  a.*,
                    b.COMPOSITION_ID,
                    d.windows_title DEFAULT_WHERE,
                    e.order_view ORDER_VIEW,
                    decode(a.DATA_TYPE,NULL,'N', dage_entity_attributes.fsbGetKey_( ge_boentityattributes.fnuGetEntityAtt_Id(ge_Boentity.fnuGetEntity_Id(a.ENTITY_NAME),a.ATTRIBUTE_NAME))) KEY_,
                    decode(a.DATA_TYPE,NULL,'N', dage_entity_attributes.fsbGetIs_check_box( ge_boentityattributes.fnuGetEntityAtt_Id(ge_Boentity.fnuGetEntity_Id(a.ENTITY_NAME),a.ATTRIBUTE_NAME))) IS_CHECK_BOX,
                    decode(a.DATA_TYPE,NULL,'N', dage_entity_attributes.fsbGetChecked_value( ge_boentityattributes.fnuGetEntityAtt_Id(ge_Boentity.fnuGetEntity_Id(a.ENTITY_NAME),a.ATTRIBUTE_NAME))) CHECKED_VALUE,
                    decode(a.DATA_TYPE,NULL,'N', dage_entity_attributes.fsbGetUnchecked_value( ge_boentityattributes.fnuGetEntityAtt_Id(ge_Boentity.fnuGetEntity_Id(a.ENTITY_NAME),a.ATTRIBUTE_NAME))) UNCHECKED_VALUE,
                    decode(a.DATA_TYPE,NULL,'N', dage_entity_attributes.fsbGetIs_null(ge_boentityattributes.fnuGetEntityAtt_Id(ge_Boentity.fnuGetEntity_Id(a.ENTITY_NAME),a.ATTRIBUTE_NAME))) IS_NULL
            FROM    gi_tmp_configuration a,
                    gi_frame b,
                    gi_composition c,
                    gi_composition_aditi d,
                    gi_config_comp e
            WHERE   a.frame_id          = b.frame_id
              AND   b.composition_id    = c.composition_id
              AND   c.composition_id    = d.composition_id
              AND   d.composition_id    = e.composition_id
              AND   a.external_type_id  = ircConfig.external_root_id
              AND   a.entity_type_id    = ircConfig.entity_root_id;
      UT_TRACE.TRACE( 'End CC_BOClientRegisterExecutor.GetConfig', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETCONFIG;
   PROCEDURE GETCONFIG( INUEXTERNALENTITYID IN GI_CONFIG.ENTITY_ROOT_ID%TYPE, INUEXTERNALID IN GI_CONFIG.EXTERNAL_ROOT_ID%TYPE, ORFAPPCONFIG OUT CONSTANTS.TYREFCURSOR, ORFAPPNAVIGEXPR OUT CONSTANTS.TYREFCURSOR, ORFAPPDATA OUT CONSTANTS.TYREFCURSOR )
    IS
      RCCONFIG DAGI_CONFIG.STYGI_CONFIG;
    BEGIN
      UT_TRACE.TRACE( 'Begin CC_BOClientRegisterExecutor.GetConfig[' || INUEXTERNALENTITYID || '][' || INUEXTERNALID || ']', 5 );
      CC_BOCLIENTREGISTERCOMPONENT.GETCONFIG( INUEXTERNALENTITYID=>INUEXTERNALENTITYID, INUEXTERNALID=>INUEXTERNALID, ORCCONFIG=>RCCONFIG );
      CC_BOCLIENTREGISTEREXECUTOR.GETCONFIG( IRCCONFIG=>RCCONFIG, ORFAPPCONFIG=>ORFAPPCONFIG, ORFAPPNAVIGEXPR=>ORFAPPNAVIGEXPR, ORFAPPDATA=>ORFAPPDATA );
      UT_TRACE.TRACE( 'End CC_BOClientRegisterExecutor.GetConfig', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETCONFIG;
   PROCEDURE GETDATA( INUEXTERNALENTITYID IN GI_CONFIG.ENTITY_ROOT_ID%TYPE, INUEXTERNALID IN GI_CONFIG.EXTERNAL_ROOT_ID%TYPE, ISBENTITYDATA IN VARCHAR2, ORFDATA OUT CONSTANTS.TYREFCURSOR )
    IS
      RCCONFIG DAGI_CONFIG.STYGI_CONFIG;
    BEGIN
      UT_TRACE.TRACE( 'Begin CC_BOClientRegisterExecutor.GetData[' || INUEXTERNALENTITYID || '][' || INUEXTERNALID || ']', 5 );
      CC_BOCLIENTREGISTERCOMPONENT.GETCONFIG( INUEXTERNALENTITYID=>INUEXTERNALENTITYID, INUEXTERNALID=>INUEXTERNALID, ORCCONFIG=>RCCONFIG );
      CC_BOCCCCR_INSTANCE.GETDATA( ISBINSTANCE=>CSBWORK_INSTANCE, IRCCONFIG=>RCCONFIG, INUEXTERNALID=>INUEXTERNALID, ISBMAINENTITYDATA=>ISBENTITYDATA, ORFDATA=>ORFDATA );
      UT_TRACE.TRACE( 'End CC_BOClientRegisterExecutor.GetData', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETDATA;
   PROCEDURE GETAPPLICATION( INUEXTERNALENTITYID IN GI_CONFIG.ENTITY_ROOT_ID%TYPE, INUEXTERNALID IN GI_CONFIG.EXTERNAL_ROOT_ID%TYPE, ISBENTITYDATA IN VARCHAR2, ORFAPPCONFIG OUT CONSTANTS.TYREFCURSOR, ORFAPPNAVIGEXPR OUT CONSTANTS.TYREFCURSOR, ORFAPPDATA OUT CONSTANTS.TYREFCURSOR, ORFDATA OUT CONSTANTS.TYREFCURSOR )
    IS
      NUERROR NUMBER;
      SBERROR VARCHAR2( 4000 );
      RCCONFIG DAGI_CONFIG.STYGI_CONFIG;
    BEGIN
      UT_TRACE.TRACE( 'Begin CC_BOClientRegisterExecutor.GetApplication[' || INUEXTERNALENTITYID || '][' || INUEXTERNALID || ']', 5 );
      CC_BOCLIENTREGISTERCOMPONENT.GETCONFIG( INUEXTERNALENTITYID=>INUEXTERNALENTITYID, INUEXTERNALID=>INUEXTERNALID, ORCCONFIG=>RCCONFIG );
      CC_BOCLIENTREGISTEREXECUTOR.GETCONFIG( IRCCONFIG=>RCCONFIG, ORFAPPCONFIG=>ORFAPPCONFIG, ORFAPPNAVIGEXPR=>ORFAPPNAVIGEXPR, ORFAPPDATA=>ORFAPPDATA );
      CC_BOCCCCR_INSTANCE.GETDATA( ISBINSTANCE=>CSBWORK_INSTANCE, IRCCONFIG=>RCCONFIG, INUEXTERNALID=>INUEXTERNALID, ISBMAINENTITYDATA=>ISBENTITYDATA, ORFDATA=>ORFDATA );
      UT_TRACE.TRACE( 'End CC_BOClientRegisterExecutor.GetApplication', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETAPPLICATION;
   PROCEDURE GETFRAMETABLE( SQLSTATEMENT IN VARCHAR2, ORFDATA OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      OPEN ORFDATA
           FOR SQLSTATEMENT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SAVEAPPLICATION( INUEXTERNALENTITYID IN GI_CONFIG.ENTITY_ROOT_ID%TYPE, INUEXTERNALID IN GI_CONFIG.EXTERNAL_ROOT_ID%TYPE, OSBMAINENTITYDATA OUT VARCHAR2 )
    IS
      RCCONFIG DAGI_CONFIG.STYGI_CONFIG;
    BEGIN
      UT_TRACE.TRACE( 'Begin CC_BOClientRegisterExecutor.SaveApplication[' || INUEXTERNALENTITYID || '][' || INUEXTERNALID || ']', 5 );
      CC_BOCLIENTREGISTERCOMPONENT.GETCONFIG( INUEXTERNALENTITYID=>INUEXTERNALENTITYID, INUEXTERNALID=>INUEXTERNALID, ORCCONFIG=>RCCONFIG );
      CC_BOCCCCR_INSTANCE.SAVEDATA( ISBINSTANCE=>CSBWORK_INSTANCE, IRCCONFIG=>RCCONFIG, OSBMAINENTITYDATA=>OSBMAINENTITYDATA );
      UT_TRACE.TRACE( 'End CC_BOClientRegisterExecutor.SaveApplication[' || OSBMAINENTITYDATA || ']', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SAVEAPPLICATION;
   PROCEDURE SAVEAPPLICATIONTRANSACTION( INUEXTERNALENTITYID IN GI_CONFIG.ENTITY_ROOT_ID%TYPE, INUEXTERNALID IN GI_CONFIG.EXTERNAL_ROOT_ID%TYPE, OSBMAINENTITYDATA OUT VARCHAR2 )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      UT_TRACE.TRACE( 'Begin CC_BOClientRegisterExecutor.SaveApplicationTransaction', 1 );
      CC_BOCLIENTREGISTEREXECUTOR.SAVEAPPLICATION( INUEXTERNALENTITYID=>INUEXTERNALENTITYID, INUEXTERNALID=>INUEXTERNALID, OSBMAINENTITYDATA=>OSBMAINENTITYDATA );
      COMMIT;
      UT_TRACE.TRACE( 'End CC_BOClientRegisterExecutor.SaveApplicationTransaction', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SAVEAPPLICATIONTRANSACTION;
   PROCEDURE GETNAVIGEXPRESSIONDATA( INUCONFIGID IN NUMBER, ORFNAVIGEXPREDATA OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      OPEN ORFNAVIGEXPREDATA FOR SELECT
                gi_comp_attribs.composition_id,
                dage_entity.fsbGetName_(gi_comp_attribs.entity_id) ENTITY_NAME,
                dage_entity_attributes.fsbGetTechnical_name(gi_comp_attribs.entity_attribute_id) ENTIY_ATTRIBUTE_NAME,
                gi_navig_expression.navig_expression_id,
                gi_navig_expression.expression,
                gi_navig_exp_values.navig_exp_values_id,
                gi_navig_exp_values.expression_value,
                gi_navig_exp_values.attribute_name,
                gi_navig_exp_values.property_name,
                gi_navig_exp_values.property_value
            FROM
                gi_composition,
                gi_comp_attribs,
                gi_navig_expression,
                gi_navig_exp_values
            WHERE
                gi_composition.config_id = inuConfigId
                AND gi_comp_attribs.composition_id = gi_composition.composition_id
                AND gi_navig_expression.external_id = gi_comp_attribs.comp_attribs_id
                AND gi_navig_expression.navig_type_id = 1
                AND gi_navig_exp_values.navig_expression_id = gi_navig_expression.navig_expression_id;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXISTCONTRACT( INUCONTRACTID IN NUMBER, OSBEXIST OUT VARCHAR2 )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      UT_TRACE.TRACE( 'Inicia CC_BOClientRegisterExecutor.ExistContract', 1 );
      OSBEXIST := 'N';
      IF ( PKTBLSUSCRIPC.FBLEXIST( INUCONTRACTID, 0 ) ) THEN
         OSBEXIST := 'Y';
      END IF;
      UT_TRACE.TRACE( 'Fin CC_BOClientRegisterExecutor.ExistContract', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END EXISTCONTRACT;
END CC_BOCLIENTREGISTEREXECUTOR;
/


