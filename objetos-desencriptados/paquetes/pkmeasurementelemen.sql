CREATE OR REPLACE PACKAGE BODY PKMEASUREMENTELEMEN IS
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   RCELEMMEDI ELEMMEDI%ROWTYPE;
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO166076';
   CNUELEMINVA CONSTANT NUMBER := 10032;
   CNUTIPOINVA CONSTANT NUMBER := 10003;
   CNUCLASINVA CONSTANT NUMBER := 10004;
   CNUDIREINVA CONSTANT NUMBER := 10005;
   CNUDIGIINVA CONSTANT NUMBER := 10006;
   CNUUBICINVA CONSTANT NUMBER := 10007;
   SBERRORDIVISION MENSAJE.MENSDIVI%TYPE;
   SBERRORMODULE MENSAJE.MENSMODU%TYPE;
   PROCEDURE VALINPUTDATA( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUCLASELEM IN ELEMMEDI.ELMECLEM%TYPE, INUNUMEDIGI IN ELEMMEDI.ELMENUDC%TYPE, INULUGAINST IN ELEMMEDI.ELMEUIEM%TYPE );
   PROCEDURE VALINPUTDATA( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUCLASELEM IN ELEMMEDI.ELMECLEM%TYPE, INUNUMEDIGI IN ELEMMEDI.ELMENUDC%TYPE, INULUGAINST IN ELEMMEDI.ELMEUIEM%TYPE )
    IS
      SBCODIELEM ELEMMEDI.ELMECODI%TYPE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.ValInputData' );
      SBCODIELEM := UPPER( ISBCODIELEM );
      PKMEASUREMENTELEMENMGR.VALIDATENULL( SBCODIELEM );
      IF ( INUCLASELEM IS NULL ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUCLASINVA );
         RAISE LOGIN_DENIED;
      END IF;
      PKTBLCLASELME.ACCKEY( INUCLASELEM );
      IF ( INUNUMEDIGI IS NOT NULL ) THEN
         IF ( INUNUMEDIGI <= 0 ) THEN
            PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUDIGIINVA );
            RAISE LOGIN_DENIED;
         END IF;
      END IF;
      IF ( INULUGAINST IS NULL ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUUBICINVA );
         RAISE LOGIN_DENIED;
      END IF;
      PKTBLUBINELME.ACCKEY( INULUGAINST );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END VALINPUTDATA;
   PROCEDURE VALINPUTDATA( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUCLASELEM IN ELEMMEDI.ELMECLEM%TYPE, INUNUMEDIGI IN ELEMMEDI.ELMENUDC%TYPE, INUUBICINST IN ELEMMEDI.ELMEUIEM%TYPE, INUPOSICION IN ELEMMEDI.ELMEPOSI%TYPE, INUFACTCONV IN ELEMMEDI.ELMEFACM%TYPE, INUFACTDEMA IN ELEMMEDI.ELMEFACD%TYPE, INUTOPE IN ELEMMEDI.ELMETOPE%TYPE )
    IS
      SBCODIELEM ELEMMEDI.ELMECODI%TYPE;
      CNUPOSIINVA CONSTANT NUMBER := 10048;
      CNUFACOINVA CONSTANT NUMBER := 10050;
      CNUFADEINVA CONSTANT NUMBER := 10051;
      CNUTOPEINVA CONSTANT NUMBER := 10052;
      CNUNOCACHE CONSTANT NUMBER := PKCONSTANTE.NOCACHE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.ValInputData' );
      SBCODIELEM := UPPER( ISBCODIELEM );
      PKMEASUREMENTELEMENMGR.VALIDATENULL( SBCODIELEM );
      PKBOMEASUREELEMENTCLASS.VALBASICDATA( INUCLASELEM );
      PKBOMEASUREELEMLOCINS.VALBASICDATA( INUUBICINST );
      IF ( INUNUMEDIGI IS NULL OR INUNUMEDIGI < 1 ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUDIGIINVA );
         RAISE LOGIN_DENIED;
      END IF;
      IF ( INUPOSICION IS NULL OR INUPOSICION < 1 ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUPOSIINVA );
         RAISE LOGIN_DENIED;
      END IF;
      IF ( INUFACTCONV IS NULL OR INUFACTCONV < 1 ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUFACOINVA );
         RAISE LOGIN_DENIED;
      END IF;
      IF ( INUFACTDEMA IS NULL OR INUFACTDEMA < 1 ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUFADEINVA );
         RAISE LOGIN_DENIED;
      END IF;
      IF ( INUTOPE IS NULL OR INUTOPE < 1 ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUTOPEINVA );
         RAISE LOGIN_DENIED;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END VALINPUTDATA;
   PROCEDURE REGISTER( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUCLASELEM IN ELEMMEDI.ELMECLEM%TYPE, INUNUMEDIGI IN ELEMMEDI.ELMENUDC%TYPE, INULUGAINST IN ELEMMEDI.ELMEUIEM%TYPE, ONUELEMMEDI OUT ELEMMEDI.ELMEIDEM%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      NUCOMPONENT COMPSESU.CMSSIDCO%TYPE;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.Register.Initialize' );
         ONUELEMMEDI := NULL;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.Register.ClearMemory' );
         PKTBLUBINELME.CLEARMEMORY;
         PKTBLCLASELME.CLEARMEMORY;
         DAAB_ADDRESS.CLEARMEMORY;
         DAIF_STATUS.CLEARMEMORY;
         PKTBLELEMMEDI.CLEARMEMORY;
         PKERRORS.POP;
      END CLEARMEMORY;
      PROCEDURE INSERTDATA
       IS
         NUELEMMEDI ELEMMEDI.ELMEIDEM%TYPE;
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.Register.InsertData' );
         PKMEASUREMENTELEMENMGR.GETNEWMEASUREELEMENTID( NUELEMMEDI );
         ONUELEMMEDI := NUELEMMEDI;
         PKMEASUREMENTELEMENMGR.GENMEASUREMENTELEMEN( NUELEMMEDI, ISBCODIELEM, INUCLASELEM, INUNUMEDIGI, INULUGAINST );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
      END INSERTDATA;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.Register' );
      INITIALIZE;
      CLEARMEMORY;
      IF ( PKMEASUREMENTELEMENMGR.FBLEXISTMEASUREELEMENT( ISBCODIELEM, PKCONSTANTE.NOCACHE ) ) THEN
         PKMEASELEMSUBSSERVMGR.VALMEASELEMENTNOTISASSIGNED( ISBCODIELEM );
         ONUELEMMEDI := PKMEASUREMENTELEMENMGR.FNUGETMEASUREELEMENTID( ISBCODIELEM );
       ELSE
         VALINPUTDATA( ISBCODIELEM, INUCLASELEM, INUNUMEDIGI, INULUGAINST );
         INSERTDATA;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END REGISTER;
   PROCEDURE REGISTER( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUCLASELEM IN ELEMMEDI.ELMECLEM%TYPE, INUNUMEDIGI IN ELEMMEDI.ELMENUDC%TYPE, INUUBICINST IN ELEMMEDI.ELMEUIEM%TYPE, INUPOSICION IN ELEMMEDI.ELMEPOSI%TYPE, INUFACTCONV IN ELEMMEDI.ELMEFACM%TYPE, INUFACTDEMA IN ELEMMEDI.ELMEFACD%TYPE, INUTOPE IN ELEMMEDI.ELMETOPE%TYPE, ONUELEMMEDI OUT ELEMMEDI.ELMEIDEM%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      NUCOMPONENT COMPSESU.CMSSIDCO%TYPE;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.Register.Initialize' );
         ONUELEMMEDI := NULL;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.Register.ClearMemory' );
         PKTBLUBINELME.CLEARMEMORY;
         PKTBLCLASELME.CLEARMEMORY;
         DAAB_ADDRESS.CLEARMEMORY;
         PKTBLELEMMEDI.CLEARMEMORY;
         PKERRORS.POP;
      END CLEARMEMORY;
      PROCEDURE INSERTDATA
       IS
         NUELEMMEDI ELEMMEDI.ELMEIDEM%TYPE;
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.Register.InsertData' );
         PKMEASUREMENTELEMENMGR.GETNEWMEASUREELEMENTID( NUELEMMEDI );
         ONUELEMMEDI := NUELEMMEDI;
         PKMEASUREMENTELEMENMGR.GENMEASUREMENTELEMEN( NUELEMMEDI, ISBCODIELEM, INUCLASELEM, INUNUMEDIGI, INUUBICINST, INUPOSICION, INUFACTCONV, INUFACTDEMA, INUTOPE );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
      END INSERTDATA;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.Register' );
      INITIALIZE;
      CLEARMEMORY;
      IF ( PKMEASUREMENTELEMENMGR.FBLEXISTMEASUREELEMENT( ISBCODIELEM, PKCONSTANTE.NOCACHE ) ) THEN
         PKMEASELEMSUBSSERVMGR.VALMEASELEMENTNOTISASSIGNED( ISBCODIELEM );
         ONUELEMMEDI := PKMEASUREMENTELEMENMGR.FNUGETMEASUREELEMENTID( ISBCODIELEM );
         PKERRORS.POP;
         RETURN;
      END IF;
      VALINPUTDATA( ISBCODIELEM, INUCLASELEM, INUNUMEDIGI, INUUBICINST, INUPOSICION, INUFACTCONV, INUFACTDEMA, INUTOPE );
      INSERTDATA;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END REGISTER;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      PKERRORS.PUSH( 'pkMeasElemReadingsMgr.fsbVersion' );
      PKERRORS.POP;
      RETURN ( CSBVERSION );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FSBVERSION;
   PROCEDURE GETMEASUREELEMENTID( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, ONUELEMMEDID OUT ELEMMEDI.ELMEIDEM%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.GetMeasureElementId.Initialize' );
         ONUELEMMEDID := NULL;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.GetMeasureElementId.ClearMemory' );
         PKTBLELEMMEDI.CLEARMEMORY;
         PKERRORS.POP;
      END CLEARMEMORY;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.GetMeasureElementId.ValInputData' );
         PKMEASUREMENTELEMENMGR.VALBASICDATA( ISBCODIELEM );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALINPUTDATA;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.GetMeasureElementId' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA;
      ONUELEMMEDID := PKMEASUREMENTELEMENMGR.FNUGETMEASUREELEMENTID( ISBCODIELEM );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETMEASUREELEMENTID;
   PROCEDURE UPMEASUFACTELEMENT( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUFACTMEDI IN ELEMMEDI.ELMEFACM%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      NUELEMMEDID ELEMMEDI.ELMEIDEM%TYPE;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.UpMeasuFactElement.Initialize' );
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.UpMeasuFactElement.ValInputData' );
         PKMEASUREMENTELEMENMGR.VALBASICDATA( ISBCODIELEM );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALINPUTDATA;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.UpMeasuFactElement' );
      INITIALIZE;
      VALINPUTDATA;
      NUELEMMEDID := PKMEASUREMENTELEMENMGR.FNUGETMEASUREELEMENTID( ISBCODIELEM );
      PKMEASUREMENTELEMENMGR.UPDATEMEASUREMENTFACTOR( NUELEMMEDID, INUFACTMEDI );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END UPMEASUFACTELEMENT;
   PROCEDURE UPELEMTSITUATION( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUUBICELEM IN ELEMMEDI.ELMEUIEM%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      NUELEMMEDID ELEMMEDI.ELMEIDEM%TYPE;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.UpElemtSituation.Initialize' );
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.UpElemtSituation.ValInputData' );
         PKMEASUREMENTELEMENMGR.VALBASICDATA( ISBCODIELEM );
         PKBOMEASUREELEMLOCINS.VALBASICDATA( INUUBICELEM );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALINPUTDATA;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.UpElemtSituation' );
      INITIALIZE;
      VALINPUTDATA;
      NUELEMMEDID := PKMEASUREMENTELEMENMGR.FNUGETMEASUREELEMENTID( ISBCODIELEM );
      PKMEASUREMENTELEMENMGR.UPDATEELEMENTSITUATION( NUELEMMEDID, INUUBICELEM );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END UPELEMTSITUATION;
   PROCEDURE REGISTERORUPDATEIF_EXISTS( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUCLASELEM IN ELEMMEDI.ELMECLEM%TYPE, INUNUMEDIGI IN ELEMMEDI.ELMENUDC%TYPE, INUUBICINST IN ELEMMEDI.ELMEUIEM%TYPE, INUPOSICION IN ELEMMEDI.ELMEPOSI%TYPE, INUFACTCONV IN ELEMMEDI.ELMEFACM%TYPE, INUFACTDEMA IN ELEMMEDI.ELMEFACD%TYPE, INUTOPE IN ELEMMEDI.ELMETOPE%TYPE, ONUELEMMEDI OUT ELEMMEDI.ELMEIDEM%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      NUCOMPONENT COMPSESU.CMSSIDCO%TYPE;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.RegisterOrUpdateIf_Exists.Initialize' );
         ONUELEMMEDI := NULL;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.RegisterOrUpdateIf_Exists.ClearMemory' );
         PKTBLUBINELME.CLEARMEMORY;
         PKTBLCLASELME.CLEARMEMORY;
         DAAB_ADDRESS.CLEARMEMORY;
         PKTBLELEMMEDI.CLEARMEMORY;
         PKERRORS.POP;
      END CLEARMEMORY;
      PROCEDURE INSERTDATA
       IS
         NUELEMMEDI ELEMMEDI.ELMEIDEM%TYPE;
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.RegisterOrUpdateIf_Exists.InsertData' );
         PKMEASUREMENTELEMENMGR.GETNEWMEASUREELEMENTID( NUELEMMEDI );
         ONUELEMMEDI := NUELEMMEDI;
         PKMEASUREMENTELEMENMGR.GENMEASUREMENTELEMEN( NUELEMMEDI, ISBCODIELEM, INUCLASELEM, INUNUMEDIGI, INUUBICINST, INUPOSICION, INUFACTCONV, INUFACTDEMA, INUTOPE );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
      END INSERTDATA;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.RegisterOrUpdateIf_Exists' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA( ISBCODIELEM, INUCLASELEM, INUNUMEDIGI, INUUBICINST, INUPOSICION, INUFACTCONV, INUFACTDEMA, INUTOPE );
      IF ( PKMEASUREMENTELEMENMGR.FBLEXISTMEASUREELEMENT( ISBCODIELEM, PKCONSTANTE.NOCACHE ) ) THEN
         PKMEASELEMSUBSSERVMGR.VALMEASELEMENTNOTISASSIGNED( ISBCODIELEM );
         ONUELEMMEDI := PKMEASUREMENTELEMENMGR.FNUGETMEASUREELEMENTID( ISBCODIELEM );
         PKBCELEMMEDI.UPMEASUREMENTELEMEN( ONUELEMMEDI, ISBCODIELEM, INUCLASELEM, INUNUMEDIGI, INUUBICINST, INUPOSICION, INUFACTCONV, INUFACTDEMA, INUTOPE );
         PKERRORS.POP;
         RETURN;
      END IF;
      INSERTDATA;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END REGISTERORUPDATEIF_EXISTS;
   PROCEDURE VALINPUTDATA( INUFACTCONV IN ELEMMEDI.ELMEFACM%TYPE, INUTOPE IN ELEMMEDI.ELMETOPE%TYPE, INUNUMEDIGI IN ELEMMEDI.ELMENUDC%TYPE, ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUCLASELEM IN ELEMMEDI.ELMECLEM%TYPE )
    IS
      SBCODIELEM ELEMMEDI.ELMECODI%TYPE;
      CNUFACOINVA CONSTANT NUMBER := 10050;
      CNUFADEINVA CONSTANT NUMBER := 10051;
      CNUTOPEINVA CONSTANT NUMBER := 10052;
      CNUNOCACHE CONSTANT NUMBER := PKCONSTANTE.NOCACHE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.ValInputData' );
      SBCODIELEM := UPPER( ISBCODIELEM );
      PKMEASUREMENTELEMENMGR.VALIDATENULL( SBCODIELEM );
      IF ( INUNUMEDIGI IS NULL OR INUNUMEDIGI < 1 ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUDIGIINVA );
         RAISE LOGIN_DENIED;
      END IF;
      IF ( INUTOPE IS NULL OR INUTOPE < 1 ) THEN
         PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_EME, CNUTOPEINVA );
         RAISE LOGIN_DENIED;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END VALINPUTDATA;
   PROCEDURE REGISTER( ISBCODIELEM IN ELEMMEDI.ELMECODI%TYPE, INUCLASELEM IN ELEMMEDI.ELMECLEM%TYPE, INUNUMEDIGI IN ELEMMEDI.ELMENUDC%TYPE, INUFACTCONV IN ELEMMEDI.ELMEFACM%TYPE, INUTOPE IN ELEMMEDI.ELMETOPE%TYPE, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE, ONUELEMMEDI OUT ELEMMEDI.ELMEIDEM%TYPE )
    IS
      NUCOMPONENT COMPSESU.CMSSIDCO%TYPE;
      CSBCLASE_GENERAL CONSTANT PARAMETR.PAMECODI%TYPE := 'CLASE_GENERAL';
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.Register.Initialize' );
         ONUELEMMEDI := NULL;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.Register.ClearMemory' );
         PKTBLCLASELME.CLEARMEMORY;
         PKTBLELEMMEDI.CLEARMEMORY;
         PKERRORS.POP;
      END CLEARMEMORY;
      PROCEDURE INSERTDATA
       IS
         NUELEMMEDI ELEMMEDI.ELMEIDEM%TYPE;
         NUCLASELEM ELEMMEDI.ELMECLEM%TYPE := INUCLASELEM;
         NUFACTDEMA ELEMMEDI.ELMEFACD%TYPE;
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.Register.InsertData' );
         PKMEASUREMENTELEMENMGR.GETNEWMEASUREELEMENTID( NUELEMMEDI );
         ONUELEMMEDI := NUELEMMEDI;
         NUFACTDEMA := 1;
         IF INUCLASELEM IS NULL OR INUCLASELEM = PKCONSTANTE.NULLNUM THEN
            NUCLASELEM := PKTBLPARAMETR.FNUGETVALUENUMBER( CSBCLASE_GENERAL );
         END IF;
         PKMEASUREMENTELEMENMGR.GENMEASUREMENTELEMEN( NUELEMMEDI, ISBCODIELEM, NUCLASELEM, INUNUMEDIGI, NULL, NULL, INUFACTCONV, NUFACTDEMA, INUTOPE );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
      END INSERTDATA;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.Register' );
      INITIALIZE;
      CLEARMEMORY;
      IF ( PKMEASUREMENTELEMENMGR.FBLEXISTMEASUREELEMENT( ISBCODIELEM, PKCONSTANTE.NOCACHE ) ) THEN
         PKMEASELEMSUBSSERVMGR.VALMEASELEMENTNOTISASSIGNED( ISBCODIELEM );
         ONUELEMMEDI := PKMEASUREMENTELEMENMGR.FNUGETMEASUREELEMENTID( ISBCODIELEM );
         PKERRORS.POP;
         RETURN;
      END IF;
      VALINPUTDATA( INUFACTCONV, INUTOPE, INUNUMEDIGI, ISBCODIELEM, INUCLASELEM );
      INSERTDATA;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END REGISTER;
   PROCEDURE GETTYPEMEASELEMBYCON( INUCONTRATO IN SUSCRIPC.SUSCCODI%TYPE, OSBDESCTIPOMED OUT VARCHAR2, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.GetTypeMeasElemByCon.Initialize' );
         OSBDESCTIPOMED := NULL;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.GetTypeMeasElemByCon' );
      INITIALIZE;
      PKTBLSUSCRIPC.ACCKEY( INUCONTRATO );
      OSBDESCTIPOMED := PKMEASUREMENTELEMENMGR.FSBGETTYPEMEASELEMBYCON( INUCONTRATO );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETTYPEMEASELEMBYCON;
   PROCEDURE GETTYPEMEASELEMBYPROD( INUPRODUCTO IN SERVSUSC.SESUNUSE%TYPE, OSBDESCTIPOMED OUT VARCHAR2, ONUERRORCODE OUT MENSAJE.MENSCODI%TYPE, OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE )
    IS
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkMeasurementElemen.GetTypeMeasElemByProd.Initialize' );
         OSBDESCTIPOMED := NULL;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
      END INITIALIZE;
    BEGIN
      PKERRORS.PUSH( 'pkMeasurementElemen.GetTypeMeasElemByProd' );
      INITIALIZE;
      PKTBLSERVSUSC.ACCKEY( INUPRODUCTO );
      OSBDESCTIPOMED := PKMEASUREMENTELEMENMGR.FSBGETTYPEMEASELEMBYPROD( INUPRODUCTO );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END GETTYPEMEASELEMBYPROD;
END PKMEASUREMENTELEMEN;
/


