PACKAGE BODY OR_BOItemValue IS















































































	
	
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO396269';
    
    CNUERR249 CONSTANT NUMBER(3) :=249;
    CNUZERO  CONSTANT NUMBER(1) :=0;
    
    
    
    
    
    
    
    CNUACTIVIDADESSECUNDARIAS           CONSTANT NUMBER(2) := 51;
    
    CNUSUMINISTRUNIDCONSTR              CONSTANT NUMBER(2) := 52;
    

    

    GNUITEMID           GE_ITEMS.ITEMS_ID%TYPE := -0.1;
    GNUOPERUNITID       OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE := -0.1;
    GNUCOSTLISTVALIDITY GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE := NULL;
    
    
    GNUDEFAULTAIU_OPER_ADMIN      NUMBER;
    GNUDEFAULTAIU_OPER_UNEXPECTED NUMBER;
    GNUDEFAULTAIU_OPER_UTIL       NUMBER;
    GBLDEFAULTAIUCOMPUTED         BOOLEAN := FALSE;


    
    CNUERR251 CONSTANT NUMBER(3) := 251;
    
    

    NUPRICELISTID       GE_UNIT_COST_ITE_LIS.LIST_UNITARY_COST_ID%TYPE;

    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    

    

















    FUNCTION FNUGETGENERICVALUE
    (
      INUITEMID    IN GE_ITEMS.ITEMS_ID%TYPE,
      IDTASSIGNED IN OR_ORDER.ASSIGNED_DATE%TYPE
    )
    RETURN GE_UNIT_COST_ITE_LIS.PRICE%TYPE
    IS

        NUPRICELIST GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE;
        NURESULT    GE_UNIT_COST_ITE_LIS.PRICE%TYPE;
    BEGIN

        UT_TRACE.TRACE('[OR_BOItemValue.fnuGetGenericValue] INICIO',3);
        NURESULT:= CNUZERO;

        NUPRICELIST := GE_BCLISTUNITARYCOST.FNUGETGENERICPRICELIST(IDTASSIGNED);
        
        IF NUPRICELIST  IS NULL THEN
            
            RETURN NURESULT;
        END IF;
        
        IF (DAGE_UNIT_COST_ITE_LIS.FBLEXIST(INUITEMID,NUPRICELIST)) THEN
            NURESULT    := DAGE_UNIT_COST_ITE_LIS.FNUGETPRICE(INUITEMID,NUPRICELIST);
        END IF;

        UT_TRACE.TRACE('[OR_BOItemValue.fnuGetGenericValue] FIN nuPriceList:['|| NUPRICELIST ||'] Precio:['||NURESULT||']',3);

        RETURN NURESULT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    



















    PROCEDURE GETCOSTLISTVALUE
    (
        INUITEMID           IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUOPERUNIT         IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTASSIGNED         IN  OR_ORDER.ASSIGNED_DATE%TYPE,
        INUAMOUNT           IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE,
        ONUTOTALVALUEITEM   OUT GE_UNIT_COST_ITE_LIS.PRICE%TYPE,
        INUORDER            IN  OR_ORDER_ITEMS.ORDER_ID%TYPE DEFAULT NULL,
        INUCONTRACTORID     IN  GE_CONTRATO.ID_CONTRATISTA%TYPE DEFAULT NULL,
        INUCONTRACTID       IN  GE_CONTRATO.ID_CONTRATO%TYPE DEFAULT NULL
    )
    IS

        NUVALUE     GE_UNIT_COST_ITE_LIS.PRICE%TYPE;
    BEGIN

        UT_TRACE.TRACE('[OR_BOItemValue.GetCostListValue] INICIO',3);

        
        NUVALUE := FNUGETITEMCOST
            (
                INUITEMID,
                INUOPERUNIT,
                INUORDER,
                INUCONTRACTORID,
                INUCONTRACTID,
                IDTASSIGNED
            );

        ONUTOTALVALUEITEM := INUAMOUNT * NUVALUE;
        
        UT_TRACE.TRACE('[OR_BOItemValue.GetCostListValue] FIN',3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCOSTLISTVALUE;


    





















    PROCEDURE GETAVERAGECOSTVALUE
    (
        INUITEMID   IN GE_ITEMS.ITEMS_ID%TYPE,
        INUOPERUNITID IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUAMOUNT   IN OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE,
        ONUBALANCE        OUT OR_OPE_UNI_ITEM_BALA.BALANCE%TYPE,
        ONUBALANCEPRICE   OUT OR_OPE_UNI_ITEM_BALA.TOTAL_COSTS%TYPE,
        ONUTOTALVALUEITEM OUT OR_OPE_UNI_ITEM_BALA.TOTAL_COSTS%TYPE
    )
    IS
        NUPRICEQUANTITY   OR_OPE_UNI_ITEM_BALA.TOTAL_COSTS%TYPE := 0;
        



        FUNCTION FNUGETAVERAGECOSTVALUEALLOPUN
        (
            INUITEMID IN  GE_ITEMS.ITEMS_ID%TYPE
        )
        RETURN NUMBER
        IS

            NUTOTALVALUE OR_OPE_UNI_ITEM_BALA.TOTAL_COSTS%TYPE := 0;

            CURSOR CUAVERAGECOSTVALUEALLOPUN
            (
                NUITEMID GE_ITEMS.ITEMS_ID%TYPE
            ) IS
            SELECT SUM(TOTAL_COSTS)/SUM(BALANCE)
              FROM OR_OPE_UNI_ITEM_BALA
             WHERE ITEMS_ID = NUITEMID
               AND BALANCE > 0;

            PROCEDURE CLOSECURSORS
            IS
            BEGIN
                 IF CUAVERAGECOSTVALUEALLOPUN%ISOPEN THEN
                    CLOSE CUAVERAGECOSTVALUEALLOPUN;
                 END IF;
            END;

        BEGIN

             OPEN CUAVERAGECOSTVALUEALLOPUN(INUITEMID);

             FETCH CUAVERAGECOSTVALUEALLOPUN INTO NUTOTALVALUE;

             CLOSE CUAVERAGECOSTVALUEALLOPUN;

             RETURN NUTOTALVALUE;

        EXCEPTION
    		WHEN EX.CONTROLLED_ERROR THEN
        		CLOSECURSORS;
    			RAISE;
    		WHEN OTHERS THEN
                CLOSECURSORS;
    			ERRORS.SETERROR;
    			RAISE EX.CONTROLLED_ERROR;
        END;
    BEGIN

        UT_TRACE.TRACE(' INICIO OR_BOItemValue.GetAverageCostValue. inuItemId: '||TO_CHAR(INUITEMID)||'. inuOperUnitId: '||TO_CHAR(INUOPERUNITID)||'. inuAmount: '||TO_CHAR(INUAMOUNT), 2);

        
        
        IF DAOR_OPE_UNI_ITEM_BALA.FBLEXIST(INUITEMID, INUOPERUNITID) THEN
            NUPRICEQUANTITY := OR_BOOPEUNIITEMBALA.FNUGETITEMSPRICE
                (
                    INUITEMID,
                    INUOPERUNITID,
                    INUAMOUNT
                );
        ELSE
            NUPRICEQUANTITY := FNUGETAVERAGECOSTVALUEALLOPUN(INUITEMID);
        END IF;
        
        ONUTOTALVALUEITEM := NUPRICEQUANTITY;

        UT_TRACE.TRACE('FIN OR_BOItemValue.GetAverageCostValue. onuTotalValueItem: '||TO_CHAR(ONUTOTALVALUEITEM), 2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    

    





















































    PROCEDURE GETITEMVALUEANDCOSTMETHOD
    (
        INUITEMID           IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUAMOUNT           IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE,
        INUOPERUNITID       IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTASSIGNED         IN  OR_ORDER.ASSIGNED_DATE%TYPE,
        ISBOUT_             IN  OR_ORDER_ITEMS.OUT_%TYPE,
        ONUBALANCE          OUT OR_OPE_UNI_ITEM_BALA.BALANCE%TYPE,
        ONUBALANCEPRICE     OUT OR_OPE_UNI_ITEM_BALA.TOTAL_COSTS%TYPE,
        ONUTOTALVALUEITEM   OUT OR_ORDER_ITEMS.VALUE%TYPE,
        OSBCOSTMETHOD       OUT GE_ITEM_CLASSIF.COST_METHOD%TYPE,
        OSBQUANTITYCONTROL  OUT GE_ITEM_CLASSIF.QUANTITY_CONTROL%TYPE,
        ISBFORCELISTCOST    IN  VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBNO,
        INUORDER            IN  OR_ORDER.ORDER_ID%TYPE DEFAULT NULL,
        INUCONTRACTORID     IN  GE_CONTRATO.ID_CONTRATISTA%TYPE DEFAULT NULL,
        INUCONTRACTID       IN  GE_CONTRATO.ID_CONTRATO%TYPE DEFAULT NULL,
        INUADRESSID         IN  AB_ADDRESS.ADDRESS_ID%TYPE DEFAULT NULL
    )
    IS
        NUITEMCLASSIFID GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
        NUOPEUNIMOV OR_ORDER.OPERATING_UNIT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('[OR_BOItemValue.GetItemValueAndCostMethod] INICIO',3);

        UT_TRACE.TRACE('[OR_BOItemValue.GetItemValueAndCostMethod] inuItemId:['|| INUITEMID ||'] inuAmount:['|| INUAMOUNT ||'] inuOperUnitId:['|| INUOPERUNITID ||'] IdtAssigned:['||IDTASSIGNED||']',3);

        
        ONUBALANCE      := 0;
        ONUBALANCEPRICE := 0;
        ONUTOTALVALUEITEM := 0;
        
        NUOPEUNIMOV := NVL(DAOR_OPERATING_UNIT.FNUGETASSO_OPER_UNIT(INUOPERUNITID,0), INUOPERUNITID );
        
        NUITEMCLASSIFID := DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(INUITEMID);

        
        
        IF (ISBFORCELISTCOST = GE_BOCONSTANTS.CSBYES) THEN
            UT_TRACE.TRACE('Por Lista de Costos',5);
            OSBCOSTMETHOD := CSBCOSTLIST;
        ELSE
            UT_TRACE.TRACE('Por conf. en ge_item_classif',5);
            OSBCOSTMETHOD := DAGE_ITEM_CLASSIF.FSBGETCOST_METHOD(NUITEMCLASSIFID);
        END IF;
        
        OSBQUANTITYCONTROL  := DAGE_ITEM_CLASSIF.FSBGETQUANTITY_CONTROL(NUITEMCLASSIFID);
        
        UT_TRACE.TRACE('[OR_BOItemValue.GetItemValueAndCostMethod] osbCostMethod:['|| OSBCOSTMETHOD ||'] osbQuantityControl:['|| OSBQUANTITYCONTROL ||']',3);

        IF (
            ( ISBOUT_ IS NULL AND  OSBQUANTITYCONTROL != OR_BOCONSTANTS.CNUINCREASE ) OR
            ( NVL (ISBOUT_,GE_BOCONSTANTS.CSBNO) = GE_BOCONSTANTS.CSBYES )
           )
        THEN
            IF (OSBCOSTMETHOD = CSBCOSTLIST) THEN
            
                
                IF (INUADRESSID IS NOT NULL) THEN
                    ONUTOTALVALUEITEM := OR_BOITEMVALUE.FNUGETITEMCOSTTOCOTI
                        (
                            INUITEMID,
                            NUOPEUNIMOV,
                            INUADRESSID,
                            INUCONTRACTORID,
                            INUCONTRACTID,
                            IDTASSIGNED
                        );
                ELSE
                    
                    GETCOSTLISTVALUE
                        (
                            INUITEMID,
                            NUOPEUNIMOV,
                            IDTASSIGNED,
                            INUAMOUNT,
                            ONUTOTALVALUEITEM,
                            INUORDER,
                            INUCONTRACTORID,
                            INUCONTRACTID
                        );
                END IF;
            ELSE
                
                GETAVERAGECOSTVALUE
                    (
                        INUITEMID,
                        NUOPEUNIMOV,
                        INUAMOUNT,
                        ONUBALANCE,
                        ONUBALANCEPRICE,
                        ONUTOTALVALUEITEM
                    );
            END IF;
        ELSE
            ONUTOTALVALUEITEM := 0;
        END IF;
        
        UT_TRACE.TRACE('[OR_BOItemValue.GetItemValueAndCostMethod] onuBalance:['|| ONUBALANCE ||'] onuBalancePrice:['|| ONUBALANCEPRICE ||'] onuTotalValueItem:['|| ONUTOTALVALUEITEM ||']',3);
        
        UT_TRACE.TRACE('[OR_BOItemValue.GetItemValueAndCostMethod] FIN ',3);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    



    PROCEDURE GETITEMVALUEPLANNEDORDER
    (
        INUORDERID    IN   OR_ORDER.ORDER_ID%TYPE,
        INUITEMID     IN   GE_ITEMS.ITEMS_ID%TYPE,
        INUITEMAMOUNT IN   OR_PLANNED_ITEMS.ITEM_AMOUNT%TYPE,
        ONUITEMVALUE       OUT OR_PLANNED_ITEMS.VALUE%TYPE
    )
    IS
        SBCOMPUTEORDER   VARCHAR2(1);
        DTASSIGNED       OR_ORDER.ASSIGNED_DATE%TYPE;
        NUBALANCE        OR_OPE_UNI_ITEM_BALA.BALANCE%TYPE;
        NUBALANCEPRICE   OR_OPE_UNI_ITEM_BALA.TOTAL_COSTS%TYPE;
        SBCOSTMETHOD     GE_ITEM_CLASSIF.COST_METHOD%TYPE;
        SBQUANTITYCONTROL GE_ITEM_CLASSIF.QUANTITY_CONTROL%TYPE;
        SBOUT_           OR_ORDER_ITEMS.OUT_%TYPE;
    BEGIN

        UT_TRACE.TRACE('[OR_BOItemValue.GetItemValuePlannedOrder] INCIO', 2);

        DTASSIGNED := DAOR_ORDER.FDTGETASSIGNED_DATE(INUORDERID);
        UT_TRACE.TRACE('[OR_BOItemValue.GetItemValuePlannedOrder] dtAssigned:['|| DTASSIGNED ||']',3);

        SBOUT_ := OR_BCLEGALIZEITEMS.FSBISOUT(DAOR_ORDER.FNUGETTASK_TYPE_ID(INUORDERID));
        
        GETITEMVALUEANDCOSTMETHOD
        (
            INUITEMID,
            INUITEMAMOUNT,
            NULL,       
            DTASSIGNED,
            SBOUT_,
            NUBALANCE,
            NUBALANCEPRICE,
            ONUITEMVALUE,
            SBCOSTMETHOD,
            SBQUANTITYCONTROL
        );

        UT_TRACE.TRACE('[OR_BOItemValue.GetItemValuePlannedOrder] FIN', 2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
	PROCEDURE GETPLANNEDITEMSVALUE
    (
        INUPACKAGEID  IN OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
        ISBTASKTYPELIST IN VARCHAR2,
        ISBITEMSLIST IN VARCHAR2,
        ONUVALUE OUT NUMBER
    )
    IS

        SBTASKTYPELIST VARCHAR2(4000);
        SBITEMSLIST VARCHAR2(4000);


    	PROCEDURE GETPLANNEDITEMSVALUEFORTASITE
        (
            INUPACKAGEID  IN OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
            ISBTASKTYPELIST IN VARCHAR2,
            ISBITEMSLIST IN VARCHAR2,
            ONUVALUE OUT NUMBER
        )
        IS
            PROCEDURE CLOSE_CURSOR IS
            BEGIN
                IF  OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTAIT%ISOPEN THEN
                    CLOSE OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTAIT;
                END IF;
            END;
        BEGIN
            CLOSE_CURSOR();

            OPEN OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTAIT (INUPACKAGEID, ISBTASKTYPELIST, ISBITEMSLIST);

            FETCH OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTAIT INTO   ONUVALUE;

            CLOSE  OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTAIT;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                CLOSE_CURSOR();
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                CLOSE_CURSOR();
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

    	PROCEDURE GETPLANNEDITEMSVALUEFORITE
        (
            INUPACKAGEID  IN OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
            ISBITEMSLIST IN VARCHAR2,
            ONUVALUE OUT NUMBER
        )
        IS
            PROCEDURE CLOSE_CURSOR IS
            BEGIN
                IF  OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORIT%ISOPEN THEN
                    CLOSE OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORIT;
                END IF;
            END;
        BEGIN
            CLOSE_CURSOR();

            OPEN OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORIT (INUPACKAGEID, ISBITEMSLIST);

            FETCH OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORIT INTO   ONUVALUE;

            CLOSE  OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORIT;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                CLOSE_CURSOR();
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                CLOSE_CURSOR();
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

    	PROCEDURE GETPLANNEDITEMSVALUEFORTAS
        (
            INUPACKAGEID  IN OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
            ISBTASKTYPELIST IN VARCHAR2,
            ONUVALUE OUT NUMBER
        )
        IS
            PROCEDURE CLOSE_CURSOR IS
            BEGIN
                IF  OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTA%ISOPEN THEN
                    CLOSE OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTA;
                END IF;
            END;
        BEGIN
            
            CLOSE_CURSOR();

            OPEN OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTA (INUPACKAGEID, ISBTASKTYPELIST);

            FETCH OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTA INTO   ONUVALUE;

            CLOSE  OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPENDFORTA;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                CLOSE_CURSOR();
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                CLOSE_CURSOR();
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

    	PROCEDURE GETPLANNEDITEMSVALUEALL
        (
            INUPACKAGEID  IN OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE,
            ONUVALUE OUT NUMBER
        )
        IS
            PROCEDURE CLOSE_CURSOR IS
            BEGIN
                IF  OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPEND%ISOPEN THEN
                    CLOSE OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPEND;
                END IF;
            END;
        BEGIN
            
            CLOSE_CURSOR();

            OPEN OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPEND (INUPACKAGEID);

            FETCH OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPEND INTO   ONUVALUE;

            CLOSE  OR_BCPLANNINGACTIVIT.CUORDERBYPACKAGEIDPEND;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                CLOSE_CURSOR();
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                CLOSE_CURSOR();
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

    	FUNCTION FSBGETCOMPOSESTRING
        (
            ISBSTRING IN VARCHAR2
        ) RETURN VARCHAR2
        IS
            SBRETURN VARCHAR2(4000);
        BEGIN
            SBRETURN := ';'||ISBSTRING||';';
            RETURN SBRETURN;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;
    BEGIN
        UT_TRACE.TRACE('[OR_BOItemValue.GetPlannedItemsValue] INCIO',2);

        
        IF ISBTASKTYPELIST IS NOT NULL AND  ISBITEMSLIST IS NOT NULL THEN
            UT_TRACE.TRACE('OR_BOItemValue.GetPlannedItemsValue GetPlannedItemsValueForTasIte',3);
            SBTASKTYPELIST := FSBGETCOMPOSESTRING(ISBTASKTYPELIST);
            SBITEMSLIST := FSBGETCOMPOSESTRING(ISBITEMSLIST);
            GETPLANNEDITEMSVALUEFORTASITE (INUPACKAGEID, ISBTASKTYPELIST, ISBITEMSLIST,ONUVALUE);
        END IF;

        
        IF ISBTASKTYPELIST IS NULL AND  ISBITEMSLIST IS NOT NULL  THEN
            UT_TRACE.TRACE('OR_BOItemValue.GetPlannedItemsValue GetPlannedItemsValueForIte',3);
            SBITEMSLIST := FSBGETCOMPOSESTRING(ISBITEMSLIST);
            GETPLANNEDITEMSVALUEFORITE (INUPACKAGEID, SBITEMSLIST, ONUVALUE);
        END IF;

        
        IF  ISBTASKTYPELIST IS NOT NULL AND  ISBITEMSLIST IS NULL THEN
            UT_TRACE.TRACE('OR_BOItemValue.GetPlannedItemsValue GetPlannedItemsValueForTas',3);
            SBTASKTYPELIST := FSBGETCOMPOSESTRING(ISBTASKTYPELIST);
            GETPLANNEDITEMSVALUEFORTAS(INUPACKAGEID, SBTASKTYPELIST, ONUVALUE);
        END IF;

        
        IF ISBTASKTYPELIST IS NULL AND  ISBITEMSLIST IS NULL THEN
            UT_TRACE.TRACE('OR_BOItemValue.GetPlannedItemsValue GetPlannedItemsValueAll',3);
            GETPLANNEDITEMSVALUEALL(INUPACKAGEID,ONUVALUE);
        END IF;

        UT_TRACE.TRACE('[OR_BOItemValue.GetPlannedItemsValue] FIN',2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    











































    FUNCTION FNUGETOPERATIVEAIU
    (
        INUORDER        IN  OR_ORDER.ORDER_ID%TYPE,
        INUORDERVALUE   IN  OR_ORDER.ORDER_COST_BY_LIST%TYPE,
        INUITEMID       IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUOPERUNITID   IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE DEFAULT NULL
    )
    RETURN OR_ORDER.OPERATIVE_AIU_VALUE%TYPE
    IS
      NUOPERUNIT      OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
      NURESULT        OR_ORDER.OPERATIVE_AIU_VALUE%TYPE := 0;
      NUPARTICULARAIU NUMBER;
      NUGENERICAIU    NUMBER;
      NUPORCENTAJE    NUMBER := 0;
      RCOPERATINGUNIT   DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;
      RCORDER         DAOR_ORDER.STYOR_ORDER;
      RCCONTRACT      DAGE_CONTRATO.STYGE_CONTRATO;
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOItemValue.fnuGetOperativeAIU. inuItemId= '||INUITEMID, 2 );
        
        
        
        IF DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(INUITEMID) IN
              (
                OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY,
                CNUACTIVIDADESSECUNDARIAS,
                CNUSUMINISTRUNIDCONSTR
              )
        THEN
            
            IF INUORDER IS NOT NULL THEN
                RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDER);
            END IF;

            
            IF INUOPERUNITID IS NULL THEN
                
                NUOPERUNIT := RCORDER.OPERATING_UNIT_ID;
            ELSE
                NUOPERUNIT := INUOPERUNITID;
            END IF;
            
            IF(NUOPERUNIT IS NULL) THEN
                RETURN 0;
            END IF;

            
            RCOPERATINGUNIT := DAOR_OPERATING_UNIT.FRCGETRECORD(NUOPERUNIT);
            
            
            IF RCORDER.DEFINED_CONTRACT_ID IS NOT NULL THEN
                RCCONTRACT := DAGE_CONTRATO.FRCGETRECORD(RCORDER.DEFINED_CONTRACT_ID);
            END IF;
            UT_TRACE.TRACE('Contrato => : '||RCCONTRACT.ID_CONTRATO, 2 );

            
            
            
            IF     ( RCOPERATINGUNIT.AIU_VALUE_ADMIN >0
                     OR RCOPERATINGUNIT.AIU_VALUE_UNEXPECTED >0
                     OR RCOPERATINGUNIT.AIU_VALUE_UTIL >0
                   )
            THEN
                NUPORCENTAJE := NVL(RCOPERATINGUNIT.AIU_VALUE_ADMIN,0) +
                                NVL(RCOPERATINGUNIT.AIU_VALUE_UNEXPECTED,0) +
                                NVL(RCOPERATINGUNIT.AIU_VALUE_UTIL,0);
                UT_TRACE.TRACE('Tiene en cuenta el AIU de la Unidad de Trabajo : '||NUPORCENTAJE, 2 );
            ELSIF 
                   (
                      RCCONTRACT.VALOR_AUI_ADMIN IS NOT NULL
                      OR RCCONTRACT.VALOR_AUI_UTIL IS NOT NULL
                      OR RCCONTRACT.VALOR_AUI_IMPREV IS NOT NULL
                   )
            THEN
                NUPORCENTAJE := NVL(RCCONTRACT.VALOR_AUI_ADMIN,0) +
                                NVL(RCCONTRACT.VALOR_AUI_UTIL,0)  +
                                NVL(RCCONTRACT.VALOR_AUI_IMPREV,0);
                UT_TRACE.TRACE('Tiene en cuenta el AIU del contrato: '||NUPORCENTAJE, 2 );
            ELSE
                
                NUPORCENTAJE := FNUGETDEFAULTAIUOPER;
                UT_TRACE.TRACE('Tiene en cuenta AIU seg�n par�metros del sistema: '||NUPORCENTAJE, 2 );
            END IF;
            

            
            NURESULT := (NUPORCENTAJE*INUORDERVALUE)/100;

            UT_TRACE.TRACE('FIN OR_BOItemValue.fnuGetOperativeAIU=> inuOrderValue: '||INUORDERVALUE||' nuResult: '||NURESULT, 2 );
            RETURN NVL(NURESULT,0);
        END IF;
        
        UT_TRACE.TRACE('FIN OR_BOItemValue.fnuGetOperativeAIU ', 2 );
        
        RETURN 0;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETOPERATIVEAIU;

    

















    FUNCTION FNUGETADMINAIU(
                                INUORDERVALUE IN OR_ORDER.ORDER_COST_BY_LIST%TYPE,
                                INUOPERATIVEAIU IN OR_ORDER.OPERATIVE_AIU_VALUE%TYPE
                           )
    RETURN OR_ORDER.OPERATIVE_AIU_VALUE%TYPE
    IS
      NURESULT   OR_ORDER.OPERATIVE_AIU_VALUE%TYPE;
      NUAIU      NUMBER;
    BEGIN
         NUAIU :=
             NVL(GE_BOPARAMETER.FNUGET('AIU_ADMIN_ADMIN'),0) +
             NVL(GE_BOPARAMETER.FNUGET('AIU_ADMIN_UNEXPECTED'),0) +
             NVL(GE_BOPARAMETER.FNUGET('AIU_ADMIN_UTIL'),0);
         IF (NUAIU = 0) THEN
            RETURN 0;
         END IF;
         NURESULT := (NUAIU*(INUORDERVALUE+INUOPERATIVEAIU))/100;
         RETURN  NVL(NURESULT,0);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    


























    FUNCTION FNUGETITEMVALUE
    (
        INUITEMID           IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUREQUESTOPERUNIT  IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    )
    RETURN GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE
    IS
        NUVALUE             GE_UNIT_COST_ITE_LIS.PRICE%TYPE;
        NUSALESVALUE        GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE;
    BEGIN

        UT_TRACE.TRACE('INICIO OR_BOItemValue.fnuGetItemValue. inuItemId: '||TO_CHAR(INUITEMID)||' inuRequestOperUnit: '||TO_CHAR(INUREQUESTOPERUNIT), 2 );
        
        GE_BCCERTCONTRATISTA.OBTENERCOSTOITEMLISTA
                (
                    INUITEMID,
                    UT_DATE.FDTSYSDATE,
                    NULL,               
                    NULL,               
                    INUREQUESTOPERUNIT, 
                    NULL,               
                    NUPRICELISTID,
                    NUVALUE,
                    NUSALESVALUE
                );
                                                   
        UT_TRACE.TRACE('FIN OR_BOItemValue.fnuGetItemValue. nuSalesValue: '||TO_CHAR(NUSALESVALUE)||' nuPriceListId: '||TO_CHAR(NUPRICELISTID), 2 );
        
        RETURN NVL(NUSALESVALUE,0);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETITEMVALUE;
    
    





























    FUNCTION FNUGETITEMCOST
    (
        INUITEMID           IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUREQUESTOPERUNIT  IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUORDER            IN  OR_ORDER_ITEMS.ORDER_ID%TYPE DEFAULT NULL,
        INUCONTRACTORID     IN  GE_CONTRATO.ID_CONTRATISTA%TYPE DEFAULT NULL,
        INUCONTRACTID       IN  GE_CONTRATO.ID_CONTRATO%TYPE DEFAULT NULL,
        IDTASSIGNED         IN  OR_ORDER.ASSIGNED_DATE%TYPE

    )
    RETURN GE_UNIT_COST_ITE_LIS.PRICE%TYPE
    IS
        NUVALUE             GE_UNIT_COST_ITE_LIS.PRICE%TYPE;
        NUSALESVALUE        GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE;

        
        NULOCATIONID        GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        
        
        PROCEDURE CLEARCACHE
        IS
        BEGIN
            GNUITEMID           := -0.1;
            GNUOPERUNITID       := -0.1;
            GNUCOSTLISTVALIDITY := NULL;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLEARCACHE;

        
        PROCEDURE LOADCACHE
        (
            INUREQUESTITEMID        IN  GE_ITEMS.ITEMS_ID%TYPE,
            INUREQUESTOPERUNITID    IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
            INUUNITARYCOSTID        IN  GE_UNIT_COST_ITE_LIS.LIST_UNITARY_COST_ID%TYPE
        )
        IS
        BEGIN
            IF( GNUITEMID <> INUREQUESTITEMID OR
                GNUOPERUNITID <> INUREQUESTOPERUNITID
              )
            THEN
                CLEARCACHE;
                GNUITEMID           := INUREQUESTITEMID;
                GNUOPERUNITID       := INUREQUESTOPERUNITID;
                GNUCOSTLISTVALIDITY := INUUNITARYCOSTID;
            END IF;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END LOADCACHE;
        
    BEGIN

        UT_TRACE.TRACE('INICIO OR_BOItemValue.fnuGetItemCost', 2 );

        
        IF(INUORDER IS NOT NULL) THEN
            NULOCATIONID := GE_BOCERTCONTRATISTA.FNUGETGEOLOCATIONBYADDRESS
                            (
                                DAOR_ORDER.FNUGETEXTERNAL_ADDRESS_ID(INUORDER)
                            );
        END IF;

        
        GE_BCCERTCONTRATISTA.OBTENERCOSTOITEMLISTA
                                (
                                    INUITEMID,
                                    NVL(GTBADJUSTDATE,UT_DATE.FDTSYSDATE),
                                    NULOCATIONID, 
                                    INUCONTRACTORID, 
                                    INUREQUESTOPERUNIT,
                                    INUCONTRACTID, 
                                    NUPRICELISTID,
                                    NUVALUE,
                                    NUSALESVALUE
                                );

        
        LOADCACHE(INUITEMID, INUREQUESTOPERUNIT, NUPRICELISTID);
        UT_TRACE.TRACE('FIN OR_BOItemValue.fnuGetItemCost. nuValue: '||NUVALUE||' nuPriceListId: '||TO_CHAR(NUPRICELISTID), 2 );
        
        RETURN NVL(NUVALUE,0);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETITEMCOST;



    































    FUNCTION FNUGETITEMOPERCOST
    (
        INUORDER            IN  OR_ORDER.ORDER_ID%TYPE,
        INUITEMID           IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUAMOUNT           IN  OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE,
        INUOPERUNITID       IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTASSIGNED         IN  OR_ORDER.ASSIGNED_DATE%TYPE,
        INUCONTRACTORID     IN  GE_CONTRATO.ID_CONTRATISTA%TYPE DEFAULT NULL,
        INUCONTRACTID       IN  GE_CONTRATO.ID_CONTRATO%TYPE DEFAULT NULL,
        ISBOUT_             IN  OR_ORDER_ITEMS.OUT_%TYPE DEFAULT GE_BOCONSTANTS.CSBYES,
        ISBFORCELISTCOST    IN  VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBNO
    )
    RETURN OR_ORDER_ITEMS.VALUE%TYPE
    IS
        NUPORCENTAJE        OR_OPERATING_UNIT.AIU_VALUE_ADMIN%TYPE;
        NUTOTALVALUEITEM    OR_ORDER_ITEMS.VALUE%TYPE;
        NUBALANCE           OR_OPE_UNI_ITEM_BALA.BALANCE%TYPE;
        NUBALANCEPRICE      OR_OPE_UNI_ITEM_BALA.TOTAL_COSTS%TYPE;
        SBCOSTMETHOD        GE_ITEM_CLASSIF.COST_METHOD%TYPE;
        SBQUANTITYCONTROL   GE_ITEM_CLASSIF.QUANTITY_CONTROL%TYPE;
        NULIQUIDATIONMETHOD PS_PACKAGE_TYPE.LIQUIDATION_METHOD%TYPE;
        NUCONTRACTORID      GE_CONTRATO.ID_CONTRATISTA%TYPE;
        NUCONTRACTID        GE_CONTRATO.ID_CONTRATO%TYPE;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('INICIA - OR_BOItemValue.fnuGetItemOperCost - inuOrder['||INUORDER||']',15);

        IF((INUCONTRACTORID IS NULL OR INUCONTRACTID IS NULL) AND (INUORDER IS NOT NULL)) THEN
            
            CT_BOCONTRACT.GETCONTRACTTOLIQORDER(INUORDER, NUCONTRACTORID, NUCONTRACTID);
        ELSE
            NUCONTRACTORID := INUCONTRACTORID;
            NUCONTRACTID   := INUCONTRACTID;
        END IF;

        
        GETITEMVALUEANDCOSTMETHOD
        (
            INUITEMID           ,
            INUAMOUNT           ,
            INUOPERUNITID       ,
            IDTASSIGNED         ,
            ISBOUT_             ,
            NUBALANCE           ,
            NUBALANCEPRICE      ,
            NUTOTALVALUEITEM    ,
            SBCOSTMETHOD        ,
            SBQUANTITYCONTROL   ,
            ISBFORCELISTCOST    ,
            INUORDER            ,
            NUCONTRACTORID      ,
            NUCONTRACTID
        );

        
        OR_BOITEMVALUE.GETLIQMETHOD(INUORDER, NUPACKAGEID, NULIQUIDATIONMETHOD);
        
        UT_TRACE.TRACE('nuLiquidationMethod['||TO_CHAR(NULIQUIDATIONMETHOD)||'] - nuTotalValueItem sin AIU['||TO_CHAR(NUTOTALVALUEITEM)||']',15);
        IF( NULIQUIDATIONMETHOD = OR_BOCONSTANTS.CNUMETODO_DELEGATE_PRICE)THEN
            
            NUPORCENTAJE := OR_BOOPERATINGUNIT.FNUGETOPERAIUVALUE(INUOPERUNITID);
            UT_TRACE.TRACE('nuPorcentaje['||TO_CHAR(NUPORCENTAJE)||']',15);
            
            NUTOTALVALUEITEM := NUTOTALVALUEITEM * ((1 + (NUPORCENTAJE/100)));
        END IF;
        UT_TRACE.TRACE('FIN OR_BOItemValue.fnuGetItemOperCost - nuTotalValueItem['||TO_CHAR(NUTOTALVALUEITEM)||']',15);
        
        RETURN NUTOTALVALUEITEM;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETITEMOPERCOST;

    




    FUNCTION FNUGETITEMVALUEPLANNEDORDER
    (
        INUACTIVITYID   IN  OR_PLANNED_ACTIVIT.ACTIVITY_ID%TYPE,
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERUNITID   IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IDTASSIGNEDDATE IN  OR_ORDER.ASSIGNED_DATE%TYPE
    )
    RETURN NUMBER
    IS
        NUITEMVALUE       OR_PLANNED_ITEMS.VALUE%TYPE;
    BEGIN
    
        UT_TRACE.TRACE('INICIA OR_BOItemValue.fnuGetItemValuePlannedOrder - inuActivityId['||INUACTIVITYID||']',15);
        UT_TRACE.TRACE('inuOrderId['||INUORDERID||'] - inuOperUnitId['||INUOPERUNITID||'] - idtAssignedDate['||IDTASSIGNEDDATE||']',15);
    
        OR_BOITEMVALUE.GETITEMVALUEPLANNEDORDER
        (
            INUORDERID,
            INUACTIVITYID,
            1,
            NUITEMVALUE
        );
        
        UT_TRACE.TRACE('FIN OR_BOItemValue.fnuGetItemValuePlannedOrder return ['||NUITEMVALUE||']',15);
        
        RETURN NUITEMVALUE;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETITEMVALUEPLANNEDORDER;

    






















    FUNCTION FNUGETITEMCOSTTOCOTI
    (
        INUITEMID           IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUOPERUNIT         IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE DEFAULT NULL,
        INUADRESSID         IN  AB_ADDRESS.ADDRESS_ID%TYPE DEFAULT NULL,
        INUCONTRACTORID     IN  GE_CONTRATO.ID_CONTRATISTA%TYPE DEFAULT NULL,
        INUCONTRACTID       IN  GE_CONTRATO.ID_CONTRATO%TYPE DEFAULT NULL,
        IDTASSIGNED         IN  OR_ORDER.ASSIGNED_DATE%TYPE
    )RETURN GE_UNIT_COST_ITE_LIS.PRICE%TYPE
    IS
        NUVALUE             GE_UNIT_COST_ITE_LIS.PRICE%TYPE;
        NUSALESVALUE        GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE;
        
        NULOCATIONID        GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOItemValue.fnuGetItemCostToCoti. inuItemId: '
                        ||TO_CHAR(INUITEMID)        ||' inuOperUnit: '
                        ||TO_CHAR(INUOPERUNIT)      ||' inuAdressId: '
                        ||TO_CHAR(INUADRESSID)      ||' inuContractorId: '
                        ||TO_CHAR(INUCONTRACTORID)  ||' inuContractId: '
                        ||TO_CHAR(INUCONTRACTID)    , 2 );

        
        IF(INUADRESSID IS NOT NULL) THEN
            NULOCATIONID := GE_BOCERTCONTRATISTA.FNUGETGEOLOCATIONBYADDRESS
                                                (
                                                    INUADRESSID
                                                );
        END IF;

        
        GE_BCCERTCONTRATISTA.OBTENERCOSTOITEMLISTA
                                (
                                    INUITEMID,
                                    NVL(GTBADJUSTDATE,UT_DATE.FDTSYSDATE),
                                    NULOCATIONID,       
                                    INUCONTRACTORID,    
                                    INUOPERUNIT,        
                                    INUCONTRACTID,      
                                    NUPRICELISTID,
                                    NUVALUE,
                                    NUSALESVALUE
                                );

        UT_TRACE.TRACE('FIN OR_BOItemValue.fnuGetItemCostToCoti. nuValue: '||TO_CHAR(NUVALUE)||' nuLocationId: '||TO_CHAR(NULOCATIONID)||' nuPriceListId: '||TO_CHAR(NUPRICELISTID), 2 );
        
        RETURN NVL(NUVALUE,0);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETITEMCOSTTOCOTI;
    
    


















    FUNCTION FNUGETPRICELISTID RETURN GE_UNIT_COST_ITE_LIS.LIST_UNITARY_COST_ID%TYPE
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOItemValue.fnuGetPriceListId', 2 );

        RETURN NUPRICELISTID;

        UT_TRACE.TRACE('FIN OR_BOItemValue.fnuGetPriceListId. nuPriceListId: '||TO_CHAR(NUPRICELISTID), 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPRICELISTID;
    
    
















    PROCEDURE GETLIQMETHOD
    (
        INUORDERID      IN      OR_ORDER.ORDER_ID%TYPE,
        IONUPACKAGEID   IN  OUT MO_PACKAGES.PACKAGE_ID%TYPE,
        ONULIQMETHOD    OUT     PS_PACKAGE_TYPE.LIQUIDATION_METHOD%TYPE
    )
    IS
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;
        NULIQMETHOD     PS_PACKAGE_TYPE.LIQUIDATION_METHOD%TYPE := NULL;
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOItemValue.GetLiqMethod', 2 );

        
        IF (IONUPACKAGEID IS NULL) THEN
            
            IONUPACKAGEID := OR_BOORDER.FNUGETPACKAGEID(INUORDERID);
        END IF;

        
        IF(IONUPACKAGEID IS NOT NULL) THEN
            
            ONULIQMETHOD := MO_BOPACKAGES.FNUGETLIQUIDMETHOD(IONUPACKAGEID);
        END IF;

        
        
        IF (ONULIQMETHOD IS NULL) THEN
            ONULIQMETHOD := OR_BOCONSTANTS.CNUMETODO_PRICE_WITHOUT;
        END IF;
        UT_TRACE.TRACE('FIN OR_BOItemValue.GetLiqMethod', 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETLIQMETHOD;
    
    

























    FUNCTION FNUGETITEMPRICE
    (
        INUITEMID       IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUOPERUNITID   IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUADDRESSID    IN  AB_ADDRESS.ADDRESS_ID%TYPE,
        INUTASKTYPEID   IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )RETURN GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE
    IS
        
        NUCOST              GE_UNIT_COST_ITE_LIS.PRICE%TYPE;
        
        NUPRICE             GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE;
        
        NULOCATIONID        GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE := NULL;
        
        NUCONTRACTORID      GE_CONTRATISTA.ID_CONTRATISTA%TYPE := NULL;
        
        NUCONTRACTID        GE_CONTRATO.ID_CONTRATO%TYPE := NULL;
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOItemValue.fnuGetItemPrice. inuItemId: '
                        ||TO_CHAR(INUITEMID)        ||' inuOperUnitId: '
                        ||TO_CHAR(INUOPERUNITID)    ||' inuAddressId: '
                        ||TO_CHAR(INUADDRESSID)     ||' inuTaskTypeId: '
                        ||TO_CHAR(INUTASKTYPEID)    , 2 );

         
        IF(INUADDRESSID IS NOT NULL) THEN
            NULOCATIONID := GE_BOCERTCONTRATISTA.FNUGETGEOLOCATIONBYADDRESS
                                                (
                                                    INUADDRESSID
                                                );
        END IF;
        
        
        NUCONTRACTORID := DAOR_OPERATING_UNIT.FNUGETCONTRACTOR_ID(INUOPERUNITID, 0);
        
        
        IF (NUCONTRACTORID IS NOT NULL AND INUTASKTYPEID IS NOT NULL) THEN
            NUCONTRACTID := CT_BOCONTRACT.FNUGETCONTRACT
                            (
                                NUCONTRACTORID,
                                INUTASKTYPEID,
                                UT_DATE.FDTSYSDATE
                            );
        END IF;

        
        GE_BCCERTCONTRATISTA.OBTENERCOSTOITEMLISTA
                                (
                                    INUITEMID,
                                    NVL(GTBADJUSTDATE,UT_DATE.FDTSYSDATE),
                                    NULOCATIONID,           
                                    NUCONTRACTORID,         
                                    INUOPERUNITID,          
                                    NUCONTRACTID,           
                                    NUPRICELISTID,
                                    NUCOST,
                                    NUPRICE
                                );

        UT_TRACE.TRACE('FIN OR_BOItemValue.fnuGetItemPrice. nuCost: '
                        ||TO_CHAR(NUCOST)       ||' nuPrice: '
                        ||TO_CHAR(NUPRICE)      ||' nuLocationId: '
                        ||TO_CHAR(NULOCATIONID) ||' nuPriceListId: '
                        ||TO_CHAR(NUPRICELISTID), 2 );

         
        RETURN NVL(NUPRICE, 0);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETITEMPRICE;
    
    
















    FUNCTION FNUGETDEFAULTAIUOPER
    RETURN NUMBER
    IS
        NUOPERAIU NUMBER;
    BEGIN
        NUOPERAIU := 0;
        
        IF NOT GBLDEFAULTAIUCOMPUTED THEN
            GNUDEFAULTAIU_OPER_ADMIN      := NVL(GE_BOPARAMETER.FNUGET('AIU_OPER_ADMIN'), 0);
            GNUDEFAULTAIU_OPER_UNEXPECTED := NVL(GE_BOPARAMETER.FNUGET('AIU_OPER_UNEXPECTED'), 0);
            GNUDEFAULTAIU_OPER_UTIL       := NVL(GE_BOPARAMETER.FNUGET('AIU_OPER_UTIL'), 0);
            
            GBLDEFAULTAIUCOMPUTED  := TRUE;
        END IF;

        
        NUOPERAIU :=    GNUDEFAULTAIU_OPER_ADMIN
                      + GNUDEFAULTAIU_OPER_UNEXPECTED
                      + GNUDEFAULTAIU_OPER_UTIL;
                      

        UT_TRACE.TRACE('OR_BOItemValue.fnuGetDefaultAIUOper: '||NUOPERAIU,10);

        RETURN NUOPERAIU;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETDEFAULTAIUOPER;

END OR_BOITEMVALUE;