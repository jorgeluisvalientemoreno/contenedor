CREATE OR REPLACE PACKAGE BODY OR_BOFWLEGALIZEORDERUTIL IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO128973';
   CUERR_114645 CONSTANT NUMBER( 6 ) := 114645;
   CNUERR_811 CONSTANT NUMBER( 4 ) := 811;
   CNUTABLE_OR_ORDER CONSTANT NUMBER( 10 ) := 143;
   CNURECORD_NOT_EXIST CONSTANT NUMBER( 1 ) := 1;
   CSBFWINSTANCENAME CONSTANT VARCHAR2( 50 ) := 'FW_' || OR_BOCONSTANTS.CSBORDER_INSTANCE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION FNUGETFIRTSOPERUNITPERSONS( INUOPERATINGUNITID IN OR_OPER_UNIT_PERSONS.OPERATING_UNIT_ID%TYPE )
    RETURN OR_OPER_UNIT_PERSONS.PERSON_ID%TYPE
    IS
      CURSOR CUOPERUNITPERSONS( NUOPERATINGUNITID IN OR_OPER_UNIT_PERSONS.OPERATING_UNIT_ID%TYPE ) IS
SELECT a.*, a.rowid
            FROM  or_oper_unit_persons a
            WHERE a.operating_unit_id = nuOperatingUnitId;
      RCOPERUNITPERSONS CUOPERUNITPERSONS%ROWTYPE;
    BEGIN
      IF CUOPERUNITPERSONS%ISOPEN THEN
         CLOSE CUOPERUNITPERSONS;
      END IF;
      OPEN CUOPERUNITPERSONS( INUOPERATINGUNITID );
      FETCH CUOPERUNITPERSONS
         INTO RCOPERUNITPERSONS;
      CLOSE CUOPERUNITPERSONS;
      RETURN RCOPERUNITPERSONS.PERSON_ID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF CUOPERUNITPERSONS%ISOPEN THEN
            CLOSE CUOPERUNITPERSONS;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF CUOPERUNITPERSONS%ISOPEN THEN
            CLOSE CUOPERUNITPERSONS;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETFIRTSOPERUNITPERSONS;
   FUNCTION FNUGETUNIQUECAUSAL( INUORDERID IN OR_ORDER.ORDER_ID%TYPE, INUTASKTYPEID IN OR_ORDER.TASK_TYPE_ID%TYPE )
    RETURN OR_ORDER.CAUSAL_ID%TYPE
    IS
      NUCAUSALID OR_ORDER.CAUSAL_ID%TYPE := NULL;
    BEGIN
      IF INUTASKTYPEID IS NULL OR INUORDERID IS NULL THEN
         RETURN NUCAUSALID;
      END IF;
      NUCAUSALID := DAOR_ORDER.FNUGETCAUSAL_ID( INUORDERID );
      IF NUCAUSALID IS NOT NULL THEN
         RETURN NUCAUSALID;
      END IF;
      NUCAUSALID := OR_BOCAUSAL.FNUGETSUCCESS( INUTASKTYPEID, INUORDERID );
      IF NUCAUSALID IS NULL THEN
         NUCAUSALID := OR_BOLEGALIZEORDER.GETUNIQUECAUSAL( INUORDERID );
      END IF;
      RETURN NUCAUSALID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETUNIQUECAUSAL;
   FUNCTION FNUGETPERSONINCHARGE( INUORDERID IN OR_ORDER.ORDER_ID%TYPE, INUOPERATINGUNITID IN OR_ORDER.OPERATING_UNIT_ID%TYPE )
    RETURN OR_OPERATING_UNIT.PERSON_IN_CHARGE%TYPE
    IS
      NUPERSONINCHARGE OR_OPERATING_UNIT.PERSON_IN_CHARGE%TYPE := NULL;
    BEGIN
      IF INUOPERATINGUNITID IS NULL THEN
         RETURN NUPERSONINCHARGE;
      END IF;
      NUPERSONINCHARGE := OR_BOORDERSAVEDDATAVALUES.FNUGETPERSONID( INUORDERID );
      IF NUPERSONINCHARGE IS NOT NULL THEN
         RETURN NUPERSONINCHARGE;
      END IF;
      NUPERSONINCHARGE := DAOR_OPERATING_UNIT.FNUGETPERSON_IN_CHARGE( INUOPERATINGUNITID );
      IF NUPERSONINCHARGE IS NULL THEN
         NUPERSONINCHARGE := FNUGETFIRTSOPERUNITPERSONS( INUOPERATINGUNITID );
      END IF;
      RETURN NUPERSONINCHARGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETPERSONINCHARGE;
   FUNCTION FNUGETREALTASKTYPEID( INUORDERID IN OR_ORDER.ORDER_ID%TYPE )
    RETURN OR_ORDER.REAL_TASK_TYPE_ID%TYPE
    IS
      NUREALTASKTYPEID OR_ORDER.REAL_TASK_TYPE_ID%TYPE := NULL;
    BEGIN
      NUREALTASKTYPEID := OR_BOORDERSAVEDDATAVALUES.FNUGETTASKTYPEID( INUORDERID );
      IF NUREALTASKTYPEID IS NOT NULL THEN
         RETURN NUREALTASKTYPEID;
      END IF;
      NUREALTASKTYPEID := DAOR_ORDER.FNUGETREAL_TASK_TYPE_ID( INUORDERID );
      IF NUREALTASKTYPEID IS NULL THEN
         NUREALTASKTYPEID := DAOR_ORDER.FNUGETTASK_TYPE_ID( INUORDERID );
      END IF;
      RETURN NUREALTASKTYPEID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETREALTASKTYPEID;
   FUNCTION FDTGETEXECSTIMDATA( INUORDERID IN OR_ORDER.ORDER_ID%TYPE )
    RETURN DATE
    IS
      DTEXECESTIMATEDATE OR_ORDER.EXEC_ESTIMATE_DATE%TYPE := NULL;
    BEGIN
      IF INUORDERID IS NULL THEN
         RETURN DTEXECESTIMATEDATE;
      END IF;
      DTEXECESTIMATEDATE := OR_BOORDERSAVEDDATAVALUES.FDTGETEXECSTIMDATA( INUORDERID );
      IF DTEXECESTIMATEDATE IS NOT NULL THEN
         RETURN DTEXECESTIMATEDATE;
      END IF;
      DTEXECESTIMATEDATE := DAOR_ORDER.FDTGETASSIGNED_DATE( INUORDERID );
      RETURN DTEXECESTIMATEDATE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FDTGETEXECSTIMDATA;
   FUNCTION FDTGETMAXDATETOLEG( INUORDERID IN OR_ORDER.ORDER_ID%TYPE )
    RETURN DATE
    IS
      DTEXECUTIONFINALDATE OR_ORDER.EXECUTION_FINAL_DATE%TYPE := NULL;
    BEGIN
      IF INUORDERID IS NULL THEN
         RETURN DTEXECUTIONFINALDATE;
      END IF;
      IF ( DAOR_ORDER.FNUGETORDER_STATUS_ID( INUORDERID ) = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED ) THEN
         RETURN DAOR_ORDER.FDTGETEXECUTION_FINAL_DATE( INUORDERID );
      END IF;
      DTEXECUTIONFINALDATE := OR_BOORDERSAVEDDATAVALUES.FDTGETMAXDATETOLEG( INUORDERID );
      IF DTEXECUTIONFINALDATE IS NOT NULL THEN
         RETURN DTEXECUTIONFINALDATE;
      END IF;
      DTEXECUTIONFINALDATE := SYSDATE;
      RETURN DTEXECUTIONFINALDATE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FDTGETMAXDATETOLEG;
   PROCEDURE FILLCAUSAL( INUORDERID IN OR_ORDER.ORDER_ID%TYPE )
    IS
      TBCAUSAL1 DAGE_CAUSAL.TYTBCAUSAL_ID;
      NUCAUSALID GE_CAUSAL.CAUSAL_ID%TYPE;
      SBDESCRIPTION GE_CAUSAL.DESCRIPTION%TYPE;
      NUINDEX INTEGER;
    BEGIN
      TBCAUSAL1 := OR_BOLEGALIZEORDER.FTBGETVALIDCAUSALBYORDERLEG( INUORDERID );
      NUINDEX := TBCAUSAL1.FIRST;
      DELETE  ge_tmp_select;
      WHILE NUINDEX IS NOT NULL
       LOOP
         NUCAUSALID := TBCAUSAL1( NUINDEX );
         SBDESCRIPTION := DAGE_CAUSAL.FSBGETDESCRIPTION( NUCAUSALID );
         INSERT INTO ge_tmp_select
                (TMP_SELECT_ID, WORK_STRING)
            VALUES
                (nuCausalId, sbDescription);
         NUINDEX := TBCAUSAL1.NEXT( NUINDEX );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INITINSTANCEDATA( INUORDERID IN OR_ORDER.ORDER_ID%TYPE )
    IS
      TBORDERACTIVITIES OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
      NUINDEX NUMBER := NULL;
      SBCURRENTINSTANCE VARCHAR2( 100 ) := NULL;
    BEGIN
      GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
      GE_BOINSTANCECONTROL.CREATEINSTANCE( CSBFWINSTANCENAME, NULL );
      GE_BOINSTANCECONTROL.LOADENTITYOLDVALUESID( CSBFWINSTANCENAME, NULL, 'OR_ORDER', INUORDERID, FALSE, FALSE );
      GE_BOINSTANCECONTROL.LOADENTITYOLDVALUESID( CSBFWINSTANCENAME, NULL, 'OR_EXTERN_SYSTEMS_ID', INUORDERID, FALSE, FALSE );
      OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER( INUORDERID, TBORDERACTIVITIES );
      NUINDEX := TBORDERACTIVITIES.FIRST;
      UT_TRACE.TRACE( 'INSTANCIAR_ACTIVIDADES', 15 );
      WHILE NUINDEX IS NOT NULL
       LOOP
         SBCURRENTINSTANCE := OR_BOLEGALIZEACTIVITIES.CSBACTIVITYINSTANCE || TBORDERACTIVITIES( NUINDEX ).NUORDERACTIVITY;
         GE_BOINSTANCECONTROL.CREATEINSTANCE( SBCURRENTINSTANCE, CSBFWINSTANCENAME );
         GE_BOINSTANCECONTROL.ADDATTRIBUTE( SBCURRENTINSTANCE, NULL, 'OR_ORDER_ACTIVITY', 'ORDER_ITEM_ID', TBORDERACTIVITIES( NUINDEX ).NUORDERITEMID );
         UT_TRACE.TRACE( 'INSTANCIA_CREADA[' || SBCURRENTINSTANCE || ']', 15 );
         NUINDEX := TBORDERACTIVITIES.NEXT( NUINDEX );
      END LOOP;
      OR_BOLEGALIZEORDER.SETCURRENTORDER( INUORDERID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INITINSTANCEDATA;
   FUNCTION FNUGETINSTANCEORDERID
    RETURN NUMBER
    IS
      SBDATA VARCHAR2( 100 );
    BEGIN
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( CSBFWINSTANCENAME, NULL, 'OR_ORDER', 'ORDER_ID', SBDATA );
      RETURN TO_NUMBER( SBDATA );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETINSTANCEORDERID;
   PROCEDURE STOPINSTANCEDATA
    IS
    BEGIN
      GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END STOPINSTANCEDATA;
   PROCEDURE FILLMESSAGEVALIDATE
    IS
      TYTBSTRING UT_STRING.TYTB_STRPARAMETERS;
      NUCOUNTER NUMBER;
      SBCADENA VARCHAR2( 100 ) := '110055=M;3046=E';
      NUINDEX INTEGER;
    BEGIN
      DELETE  ge_tmp_select;
      UT_STRING.EXTPARAMETERS( SBCADENA, ';', '=', TYTBSTRING );
      FOR NUCOUNTER IN 1..TYTBSTRING.COUNT
       LOOP
         IF TYTBSTRING.EXISTS( NUCOUNTER ) THEN
            INSERT INTO ge_tmp_select
                (TMP_SELECT_ID, WORK_STRING)
                VALUES
                (tytbString (nuCounter).sbParameter, tytbString (nuCounter).sbValue);
         END IF;
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOCKORDER( INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE )
    IS
      CURSOR CULOCKRCBYPK( INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE ) IS
SELECT OR_order.*,OR_order.rowid
    		FROM OR_order
    		WHERE
    			Order_id = inuOrder_id
    		FOR UPDATE NOWAIT;
      RCOR_ORDER CULOCKRCBYPK%ROWTYPE;
    BEGIN
      OPEN CULOCKRCBYPK( INUORDER_ID );
      FETCH CULOCKRCBYPK
         INTO RCOR_ORDER;
      IF CULOCKRCBYPK%NOTFOUND THEN
         CLOSE CULOCKRCBYPK;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CULOCKRCBYPK;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, DAGE_MESSAGE.FSBGETDESCRIPTION( CNUTABLE_OR_ORDER ) || ' ' || TO_CHAR( INUORDER_ID ) );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RESOURCE_BUSY THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         ERRORS.SETERROR( CUERR_114645, INUORDER_ID );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         RAISE;
   END;
   FUNCTION FSBGETSERIALNUMBER( INUELEMENTTYPEID IN IF_ELEMENT_TYPE.ELEMENT_TYPE_ID%TYPE, ISBCODE IN IF_NODE.CODE%TYPE )
    RETURN VARCHAR2
    IS
      SBSERIALNUMBER IF_NODE.SERIAL_NUMBER%TYPE;
      NUCLASSID IF_NODE.CLASS_ID%TYPE;
    BEGIN
      IF INUELEMENTTYPEID IS NULL OR ISBCODE IS NULL THEN
         RETURN NULL;
      END IF;
      IF_BOELEMENTQUERY.GETSERIALNUMBERFROMCODENULL( INUELEMENTTYPEID, ISBCODE, SBSERIALNUMBER, NUCLASSID );
      RETURN SBSERIALNUMBER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBGETSERIALNUMBER;
   FUNCTION GETOPERATINGSECTORDESC( INUELEMENTTYPEID IN IF_ELEMENT_TYPE.ELEMENT_TYPE_ID%TYPE, ISBCODE IN IF_NODE.CODE%TYPE, INUOPERATINGSECTORID IN OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE )
    RETURN VARCHAR2
    IS
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMESSAGE VARCHAR2( 2000 );
      NUELEMENTID IF_NODE.ID%TYPE;
      SBSERIALNUMBER IF_NODE.SERIAL_NUMBER%TYPE;
      NUOPERATINGSECTOR IF_NODE.OPERATING_SECTOR_ID%TYPE;
      NUCLASSID IF_NODE.CLASS_ID%TYPE;
      SBOPERATINGSECTORDESC OR_OPERATING_SECTOR.DESCRIPTION%TYPE;
      NUOPERATINGSECTORID OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE;
    BEGIN
      IF INUOPERATINGSECTORID IS NOT NULL THEN
         SBOPERATINGSECTORDESC := DAOR_OPERATING_SECTOR.FSBGETDESCRIPTION( INUOPERATINGSECTORID );
       ELSE
         IF_BOELEMENTQUERY.GETELEMINFOFROMCODE( INUELEMENTTYPEID, ISBCODE, NUELEMENTID, SBSERIALNUMBER, NUCLASSID, NUOPERATINGSECTOR );
         IF NUOPERATINGSECTOR IS NOT NULL THEN
            SBOPERATINGSECTORDESC := DAOR_OPERATING_SECTOR.FSBGETDESCRIPTION( NUOPERATINGSECTOR );
         END IF;
      END IF;
      RETURN SBOPERATINGSECTORDESC;
    EXCEPTION
      WHEN OTHERS THEN
         RETURN NULL;
   END GETOPERATINGSECTORDESC;
   FUNCTION GETINSTANCECONTROLORDERID
    RETURN VARCHAR2
    IS
      SBRETURN VARCHAR2( 20 );
    BEGIN
      GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE( 'ORDER_ID', SBRETURN );
      RETURN SBRETURN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETINSTANCECONTROLORDERID;
   PROCEDURE GETCONVERTDATETOCHAR( IDTDATE IN DATE, OSBDATE OUT VARCHAR2 )
    IS
    BEGIN
      IF IDTDATE IS NOT NULL THEN
         OSBDATE := UT_CONVERT.FSBTOCHAR( IDTDATE );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETCONVERTDATETOCHAR;
   PROCEDURE VALIDFINALDATEOFSYSDATE( IDTFINALDATE IN OR_ORDER.EXECUTION_FINAL_DATE%TYPE )
    IS
    BEGIN
      IF IDTFINALDATE > SYSDATE THEN
         ERRORS.SETERROR( CNUERR_811 );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALIDFINALDATEOFSYSDATE;
END OR_BOFWLEGALIZEORDERUTIL;
/


