
CREATE OR REPLACE PACKAGE UT_TRACE IS
   CNUDEF_LEVEL CONSTANT NUMBER( 2 ) := 99;
   CNUTRACE_OUTPUT_DB CONSTANT NUMBER( 1 ) := 0;
   CNUTRACE_OUTPUT_FILE CONSTANT NUMBER( 1 ) := 1;
   CNUTRACE_OUTPUT_DBFILE CONSTANT NUMBER( 1 ) := 2;
   CNUTRACE_DBMS_OUTPUT CONSTANT NUMBER( 1 ) := 3;
   CNUTRACE_DBMS_ALERT CONSTANT NUMBER( 1 ) := 4;
   FUNCTION FNDEF_LEVEL
    RETURN NUMBER;
   FUNCTION FNTRACE_OUTPUT_DB
    RETURN NUMBER;
   FUNCTION FNTRACE_OUTPUT_FILE
    RETURN NUMBER;
   FUNCTION FNTRACE_OUTPUT_DBFILE
    RETURN NUMBER;
   FUNCTION FNTRACE_DBMS_OUTPUT
    RETURN NUMBER;
   FUNCTION FNTRACE_DBMS_ALERT
    RETURN NUMBER;
   FUNCTION GETLEVEL
    RETURN NUMBER;
   FUNCTION GETOUTPUT
    RETURN NUMBER;
   PROCEDURE SETOUTPUT( INUOUTPUT IN NUMBER := CNUTRACE_OUTPUT_DB );
   PROCEDURE SETLEVEL( INULEVEL IN NUMBER := CNUDEF_LEVEL );
   PROCEDURE INIT;
   PROCEDURE TRACE( ISBMESSAGE IN VARCHAR2, INULEVEL IN NUMBER := CNUDEF_LEVEL );
   PROCEDURE TRACE( ISBMESSAGE IN VARCHAR2, ISBSTRING IN VARCHAR2, INULEVEL IN NUMBER := CNUDEF_LEVEL );
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   PROCEDURE DELETETRACEBYIDSESSION( ISBID_SESSION IN VARCHAR2 );
   PROCEDURE GETTRACEBYIDSESSION( INUIDSESSION IN GE_LOG_TRACE.ID_SESSION%TYPE, ORFTRACEBYID OUT CONSTANTS.TYREFCURSOR );
END UT_TRACE;
/


CREATE OR REPLACE PACKAGE BODY UT_TRACE IS
   CSBTABLE_TRACE CONSTANT VARCHAR2( 20 ) := 'GE_LOG_TRACE';
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO237567';
   CSBCURRENT_TRACE_USER CONSTANT GE_LOG_TRACE.TERMINAL%TYPE := SUBSTR( UT_SESSION.GETUSER || '@' || UT_SESSION.GETTERMINAL, 0, 100 );
   BOCREATE_TABLE BOOLEAN := FALSE;
   NULEVEL NUMBER( 2 ) := 0;
   NULOGTRACE_ID NUMBER( 32 ) := 0;
   NUOUTPUT NUMBER( 2 ) := CNUTRACE_OUTPUT_DB;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION GETUTLFILEDIR
    RETURN VARCHAR2
    IS
      SBSQL VARCHAR2( 200 ) := 'SELECT VALUE FROM GE_PARAMETER WHERE PARAMETER_ID = ''UTL_FILE_DIR'' ';
      SBUTLFILE VARCHAR2( 250 );
    BEGIN
      EXECUTE IMMEDIATE SBSQL
                        INTO SBUTLFILE;
      RETURN SBUTLFILE;
    EXCEPTION
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20999, 'UT_Trace.GetUtlFileDir : ' || SQLERRM );
   END;
   FUNCTION FNDEF_LEVEL
    RETURN NUMBER
    IS
    BEGIN
      RETURN ( CNUDEF_LEVEL );
   END;
   FUNCTION FNTRACE_OUTPUT_DB
    RETURN NUMBER
    IS
    BEGIN
      RETURN ( CNUTRACE_OUTPUT_DB );
   END;
   FUNCTION FNTRACE_OUTPUT_FILE
    RETURN NUMBER
    IS
    BEGIN
      RETURN ( CNUTRACE_OUTPUT_FILE );
   END;
   FUNCTION FNTRACE_OUTPUT_DBFILE
    RETURN NUMBER
    IS
    BEGIN
      RETURN ( CNUTRACE_OUTPUT_DBFILE );
   END;
   FUNCTION FNTRACE_DBMS_OUTPUT
    RETURN NUMBER
    IS
    BEGIN
      RETURN ( CNUTRACE_DBMS_OUTPUT );
   END;
   FUNCTION FNTRACE_DBMS_ALERT
    RETURN NUMBER
    IS
    BEGIN
      RETURN ( CNUTRACE_DBMS_ALERT );
   END;
   FUNCTION GETLEVEL
    RETURN NUMBER
    IS
    BEGIN
      RETURN NULEVEL;
   END;
   FUNCTION GETOUTPUT
    RETURN NUMBER
    IS
    BEGIN
      RETURN NUOUTPUT;
   END;
   PROCEDURE SETLEVEL( INULEVEL IN NUMBER := CNUDEF_LEVEL )
    IS
    BEGIN
      NULEVEL := INULEVEL;
   END;
   PROCEDURE SETOUTPUT( INUOUTPUT IN NUMBER := CNUTRACE_OUTPUT_DB )
    IS
    BEGIN
      NUOUTPUT := INUOUTPUT;
   END;
   PROCEDURE CREATEFILE
    IS
      FDFILE UTL_FILE.FILE_TYPE;
      SBDIRECTORY VARCHAR2( 250 );
      SBFILE VARCHAR2( 100 ) := REPLACE( LOWER( USERENV( 'TERMINAL' ) ), '\', '_' ) || '.trc';
    BEGIN
      SBDIRECTORY := GETUTLFILEDIR;
      UT_FILEMANAGER.FILEOPEN( FDFILE, SBDIRECTORY, SBFILE, UT_FILEMANAGER.CSBWRITE_OPEN_FILE );
      UT_FILEMANAGER.FILECLOSE( FDFILE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20999, 'UT_Trace.CreateFile(' || SBFILE || '): ' || SQLERRM );
   END;
   PROCEDURE DELETETRACE
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      DELETE GE_LOG_TRACE WHERE TERMINAL = csbCURRENT_TRACE_USER;
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK;
         RAISE_APPLICATION_ERROR( -20999, 'UT_Trace.DeleteTrace: ' || SQLERRM );
   END;
   PROCEDURE INIT
    IS
    BEGIN
      IF NUOUTPUT IN ( CNUTRACE_OUTPUT_DB, CNUTRACE_OUTPUT_DBFILE ) THEN
         BEGIN
            DELETETRACE;
          EXCEPTION
            WHEN OTHERS THEN
               NULL;
         END;
      END IF;
      IF NUOUTPUT IN ( CNUTRACE_OUTPUT_FILE, CNUTRACE_OUTPUT_DBFILE ) THEN
         BEGIN
            CREATEFILE;
          EXCEPTION
            WHEN OTHERS THEN
               NULL;
         END;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CREATE_TABLE_TRACE
    IS
      SBSQLT VARCHAR2( 250 ) := 'CREATE TABLE GE_LOG_TRACE ' || '(' || 'LOG_TRACE_ID  NUMBER        NULL,' || 'ID_SESSION    NUMBER        NULL,' || 'DATE_         DATE          DEFAULT SYSDATE NULL,' || 'MESSAGE       VARCHAR2(4000) NULL,' || 'TERMINAL      VARCHAR2(100)' || ')';
    BEGIN
      EXECUTE IMMEDIATE SBSQLT;
    EXCEPTION
      WHEN OTHERS THEN
         NUOUTPUT := CNUTRACE_OUTPUT_FILE;
         RAISE_APPLICATION_ERROR( -20991, 'UT_Trace.Create_Table_Trace: ' || SQLERRM );
   END;
   PROCEDURE VALIDATE_TRACE
    IS
    BEGIN
      BOCREATE_TABLE := UT_OBJECT.FBOEXISTOBJECT( CSBTABLE_TRACE );
      IF NOT BOCREATE_TABLE THEN
         CREATE_TABLE_TRACE;
      END IF;
      BOCREATE_TABLE := TRUE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         BOCREATE_TABLE := FALSE;
   END;
   PROCEDURE INSERTFILE( ISBMESSAGE IN VARCHAR2 )
    IS
      SBMSG VARCHAR2( 4000 );
      FDFILE UTL_FILE.FILE_TYPE;
      SBDIRECTORY VARCHAR2( 250 );
      SBFILE VARCHAR2( 100 ) := REPLACE( LOWER( USERENV( 'TERMINAL' ) ), '\', '_' ) || '.trc';
    BEGIN
      SBDIRECTORY := GETUTLFILEDIR;
      UT_FILEMANAGER.FILEOPEN( FDFILE, SBDIRECTORY, SBFILE, UT_FILEMANAGER.CSBAPPEND_OPEN_FILE );
      SBMSG := UT_DATE.FSBSTR_SYSDATE || '> ' || ISBMESSAGE;
      UT_FILEMANAGER.FILEWRITE( FDFILE, SBMSG );
      UT_FILEMANAGER.FILECLOSE( FDFILE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR( -20992, 'UT_Trace.InsertFile(' || SBFILE || '): ' || SQLERRM );
   END;
   PROCEDURE INSERTDB( ISBMESSAGE IN OUT NOCOPY VARCHAR2 )
    IS
      SBSQL VARCHAR2( 200 ) := 'INSERT INTO GE_LOG_TRACE VALUES (:1, :2, :3, :4, :5)';
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      IF NOT BOCREATE_TABLE THEN
         RETURN;
      END IF;
      NULOGTRACE_ID := NULOGTRACE_ID + 1;
      EXECUTE IMMEDIATE SBSQL
                        USING IN NULOGTRACE_ID, IN UT_SESSION.GETSESSIONID, IN SYSDATE, IN ISBMESSAGE, IN CSBCURRENT_TRACE_USER;
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK;
         RAISE_APPLICATION_ERROR( -20993, 'UT_Trace.InsertDB: ' || SQLERRM );
   END;
   PROCEDURE SENDALERT( ISBMSG IN VARCHAR2 )
    IS
      NUPARTS NUMBER;
      SBALERT VARCHAR2( 4000 );
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      NUPARTS := FLOOR( LENGTH( ISBMSG ) / 1700 );
      FOR I IN 0..NUPARTS
       LOOP
         SBALERT := UT_STRING.FSBSUBSTR( ISBMSG, ( I * 1700 ) + 1, 1700 );
         IF I = 0 THEN
            DBMS_ALERT.SIGNAL( TO_CHAR( UT_SESSION.GETSESSIONID ), '[' || UT_DATE.FSBSTR_SYSDATE() || '] ' || SBALERT );
          ELSE
            DBMS_ALERT.SIGNAL( TO_CHAR( UT_SESSION.GETSESSIONID ), SBALERT );
         END IF;
         COMMIT;
         DBMS_LOCK.SLEEP( 0.1 );
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         RAISE_APPLICATION_ERROR( -20993, 'UT_Trace.SendAlert: ' || SQLERRM );
   END;
   PROCEDURE LOG( ISBMESSAGE IN VARCHAR2, INULEVEL IN NUMBER )
    IS
      SBMESSAGE VARCHAR2( 4000 ) := NULL;
    BEGIN
      SBMESSAGE := SUBSTR( ISBMESSAGE, 1, ( 4000 - ( INULEVEL * 4 ) ) );
      IF INULEVEL > 1 THEN
         SBMESSAGE := LPAD( '    ', ( INULEVEL - 1 ) * 4, ' ' ) || SBMESSAGE;
      END IF;
      IF NUOUTPUT IN ( CNUTRACE_OUTPUT_DB, CNUTRACE_OUTPUT_DBFILE ) THEN
         BEGIN
            INSERTDB( SBMESSAGE );
          EXCEPTION
            WHEN OTHERS THEN
               NULL;
         END;
      END IF;
      IF NUOUTPUT IN ( CNUTRACE_OUTPUT_FILE, CNUTRACE_OUTPUT_DBFILE ) THEN
         BEGIN
            INSERTFILE( SBMESSAGE );
          EXCEPTION
            WHEN OTHERS THEN
               NULL;
         END;
      END IF;
      IF NUOUTPUT = CNUTRACE_DBMS_OUTPUT THEN
         DBMS_OUTPUT.PUT_LINE( SUBSTR( SBMESSAGE, 1, 255 ) );
      END IF;
      IF NUOUTPUT = CNUTRACE_DBMS_ALERT THEN
         SENDALERT( SBMESSAGE );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE TRACE( ISBMESSAGE IN VARCHAR2, ISBSTRING IN VARCHAR2, INULEVEL IN NUMBER := CNUDEF_LEVEL )
    IS
      SBMSG VARCHAR2( 32000 ) := NULL;
    BEGIN
      IF INULEVEL <= NULEVEL THEN
         SBMSG := ISBMESSAGE || ' ' || ISBSTRING;
         LOG( SBMSG, INULEVEL );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE TRACE( ISBMESSAGE IN VARCHAR2, INULEVEL IN NUMBER := CNUDEF_LEVEL )
    IS
    BEGIN
      IF INULEVEL <= NULEVEL THEN
         LOG( ISBMESSAGE, INULEVEL );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELETETRACEBYIDSESSION( ISBID_SESSION IN VARCHAR2 )
    IS
      SBSQL VARCHAR2( 2000 );
      NUSESSIONID GE_LOG_TRACE.LOG_TRACE_ID%TYPE;
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      SBSQL := 'delete ge_log_trace WHERE id_Session = :inuIdSession';
      EXECUTE IMMEDIATE SBSQL
                        USING IN ISBID_SESSION;
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ROLLBACK;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETTRACEBYIDSESSION( INUIDSESSION IN GE_LOG_TRACE.ID_SESSION%TYPE, ORFTRACEBYID OUT CONSTANTS.TYREFCURSOR )
    IS
      SBSQL VARCHAR2( 2000 );
    BEGIN
      SBSQL := 'Select message FROM ge_log_trace WHERE id_Session = :inuIdSession ORDER BY log_trace_id';
      OPEN ORFTRACEBYID
           FOR SBSQL
           USING IN INUIDSESSION;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
 BEGIN
   NULOGTRACE_ID := UT_STRING.FNUCATNUMBER( UT_SESSION.GETSESSIONID, DBMS_UTILITY.GET_TIME );
   VALIDATE_TRACE;
END UT_TRACE;
/


