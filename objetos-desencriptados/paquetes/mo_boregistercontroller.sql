CREATE OR REPLACE PACKAGE BODY MO_BOREGISTERCONTROLLER IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO235187';
   TYPE TYRCBOOLEAN IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;
   TYPE TYTBREGISTRYINSTANCE IS TABLE OF PLS_INTEGER INDEX BY BINARY_INTEGER;
   TBREGISTRYCONTROL TYRCBOOLEAN;
   SBPACKAGE GE_BOINSTANCECONTROL.STYSBVALUE;
   SBMOTIVE GE_BOINSTANCECONTROL.STYSBVALUE;
   SBCOMPONENT GE_BOINSTANCECONTROL.STYSBVALUE;
   NUTRACELEVEL NUMBER( 6 );
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE SETONALLPROCESS
    IS
      NUINDEX PLS_INTEGER;
    BEGIN
      UT_TRACE.TRACE( 'MO_BORegisterController.SetOnAllProcess INICIO', 1 );
      FOR NUINDEX IN MO_BOUNCOMPOSITIONCONSTANTS.CNUINITIAL_INDEX..MO_BOUNCOMPOSITIONCONSTANTS.CNUFINAL_INDEX
       LOOP
         TBREGISTRYCONTROL( NUINDEX ) := TRUE;
      END LOOP;
      UT_TRACE.TRACE( 'MO_BORegisterController.SetOnAllProcess OK', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETOFFALLPROCESS
    IS
      NUINDEX PLS_INTEGER;
    BEGIN
      UT_TRACE.TRACE( 'MO_BORegisterController.SetOffAllProcess INICIO', 1 );
      FOR NUINDEX IN MO_BOUNCOMPOSITIONCONSTANTS.CNUINITIAL_INDEX..MO_BOUNCOMPOSITIONCONSTANTS.CNUFINAL_INDEX
       LOOP
         TBREGISTRYCONTROL( NUINDEX ) := FALSE;
      END LOOP;
      UT_TRACE.TRACE( 'MO_BORegisterController.SetOffAllProcess OK', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DEFAULTPROCESSEJECUTION
    IS
    BEGIN
      UT_TRACE.TRACE( 'MO_BORegisterController.DefaultProcessEjecution INICIO', 1 );
      SETONALLPROCESS;
      SETPROCESSEJECUTION( MO_BOUNCOMPOSITIONCONSTANTS.CNULOAD_GUI, FALSE );
      UT_TRACE.TRACE( 'MO_BORegisterController.DefaultProcessEjecution OK', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETPROCESSEJECUTION( INUPROCESS IN NUMBER, IBLFLAG IN BOOLEAN )
    IS
    BEGIN
      UT_TRACE.TRACE( 'MO_BORegisterController.SetProcessEjecution INICIO', 1 );
      TBREGISTRYCONTROL( INUPROCESS ) := IBLFLAG;
      UT_TRACE.TRACE( 'MO_BORegisterController.SetProcessEjecution OK', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSTANCEHIERARCHY
    IS
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
      NUINSTANCE GE_BOINSTANCECONTROL.STYNUINDEX;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      UT_TRACE.TRACE( 'MO_BORegisterController.InstanceHierarchy INICIO', 2 );
      SBPACKAGE := 'MO_PACKAGES=';
      SBMOTIVE := 'MO_MOTIVE=';
      SBCOMPONENT := 'MO_COMPONENT=';
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
      UT_TRACE.TRACE( 'MO_BORegisterController.InstanceHierarchy Count [' || TBHIERARCHY.COUNT || ']', 2 );
      IF TBHIERARCHY.COUNT = 0 THEN
         UT_TRACE.TRACE( 'MO_BORegisterController.InstanceHierarchy OK cero', 2 );
         RETURN;
      END IF;
      NUINSTANCE := TBHIERARCHY.FIRST;
      WHILE NUINSTANCE IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINSTANCE ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         IF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINSTANCE ).SBINSTANCE, NULL, 'MO_PACKAGES', 'PACKAGE_ID', SBOBJECTID );
            IF LENGTH( SBPACKAGE ) + LENGTH( SBOBJECTID ) < GE_BOINSTANCECONSTANTS.CNUMAX_SIZE_VALUE THEN
               SBPACKAGE := SBPACKAGE || SBOBJECTID || ',';
            END IF;
          ELSIF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINSTANCE ).SBINSTANCE, NULL, 'MO_MOTIVE', 'MOTIVE_ID', SBOBJECTID );
            IF LENGTH( SBMOTIVE ) + LENGTH( SBOBJECTID ) < GE_BOINSTANCECONSTANTS.CNUMAX_SIZE_VALUE THEN
               SBMOTIVE := SBMOTIVE || SBOBJECTID || ',';
            END IF;
          ELSIF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINSTANCE ).SBINSTANCE, NULL, 'MO_COMPONENT', 'COMPONENT_ID', SBOBJECTID );
            IF LENGTH( SBCOMPONENT ) + LENGTH( SBOBJECTID ) < GE_BOINSTANCECONSTANTS.CNUMAX_SIZE_VALUE THEN
               SBCOMPONENT := SBCOMPONENT || SBOBJECTID || ',';
            END IF;
         END IF;
         NUINSTANCE := TBHIERARCHY.NEXT( NUINSTANCE );
      END LOOP;
      UT_TRACE.TRACE( 'MO_BORegisterController.InstanceHierarchy END loop', 2 );
      SBPACKAGE := SUBSTR( SBPACKAGE, 1, LENGTH( SBPACKAGE ) - 1 );
      SBMOTIVE := SUBSTR( SBMOTIVE, 1, LENGTH( SBMOTIVE ) - 1 );
      SBCOMPONENT := SUBSTR( SBCOMPONENT, 1, LENGTH( SBCOMPONENT ) - 1 );
      UT_TRACE.TRACE( 'MO_BORegisterController.InstanceHierarchy OK [' || SBPACKAGE || '][' || SBMOTIVE || '][' || SBCOMPONENT || ']', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETOBJECTS( IOSBOBJECT IN OUT NOCOPY VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( 'MO_BORegisterController.GetObjects INICIO', 3 );
      IOSBOBJECT := SBPACKAGE;
      IF LENGTH( IOSBOBJECT ) + LENGTH( SBMOTIVE ) < GE_BOINSTANCECONSTANTS.CNUMAX_SIZE_VALUE THEN
         IOSBOBJECT := IOSBOBJECT || '|' || SBMOTIVE;
         IF LENGTH( IOSBOBJECT ) + LENGTH( SBCOMPONENT ) < GE_BOINSTANCECONSTANTS.CNUMAX_SIZE_VALUE THEN
            IOSBOBJECT := IOSBOBJECT || '|' || SBCOMPONENT;
         END IF;
      END IF;
      UT_TRACE.TRACE( 'MO_BORegisterController.GetObjects OK [' || IOSBOBJECT || ']', 3 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VALIDATEREQUIREDINSTANCES
    IS
      SBPACKAGETYPEID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBFIRSTINSTANCE GE_BOINSTANCECONTROL.STYSBINDEX;
      TBREQUIREDINSTANCE MO_BOCONFIGURATIONCACHE.TYTBCONFIGURATIONINSTANCE;
      TBREGISTRYINSTANCE MO_BOCONFIGURATIONCACHE.TYTBCONFIGURATIONINSTANCE;
      TBREQUIREDINSTANCENULL MO_BOCONFIGURATIONCACHE.TYTBCONFIGURATIONINSTANCE;
      TBREGISTRYINSTANCENULL MO_BOCONFIGURATIONCACHE.TYTBCONFIGURATIONINSTANCE;
    BEGIN
      UT_TRACE.TRACE( 'MO_BORegisterController.ValidateRequiredInstances INICIO', 3 );
      GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE( 'PACKAGE_TYPE_ID', SBPACKAGETYPEID );
      MO_BOCONFIGURATIONCACHE.LOADPACKAGEINSTANCES( TO_NUMBER( SBPACKAGETYPEID ), SBFIRSTINSTANCE, TBREQUIREDINSTANCE );
      MO_BOREGISTERVALIDATE.GETREGISTERINSTANCES( TBREGISTRYINSTANCE );
      MO_BOREGISTERVALIDATE.VALIDATEREQUIREDINSTANCES( TO_NUMBER( SBPACKAGETYPEID ), 0, TBREQUIREDINSTANCE, TBREGISTRYINSTANCE );
      TBREQUIREDINSTANCE.DELETE;
      TBREGISTRYINSTANCE.DELETE;
      TBREQUIREDINSTANCE := TBREQUIREDINSTANCENULL;
      TBREGISTRYINSTANCE := TBREGISTRYINSTANCENULL;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE REGISTRY( IBLDELETEDATAINSTANCE IN BOOLEAN := FALSE )
    IS
      NUPACKAGEID NUMBER( 15 );
      NUDOMID NUMBER( 15 );
      NUINSTANCE GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      IF ( NUTRACELEVEL IS NOT NULL ) THEN
         UT_TRACE.SETLEVEL( NUTRACELEVEL );
         UT_TIME.INIT;
      END IF;
      UT_TRACE.SETOUTPUT( UT_TRACE.CNUTRACE_OUTPUT_DB );
      GE_BOINSTANCECONTROL.SETDSPLYMODE( GE_BOINSTANCECONSTANTS.CNUUT_TRACE );
      GE_BOINSTANCECONTROL.DSPLYALLATTRIBUTESTACK;
      UT_TRACE.TRACE( 'Inicio: [MO_BORegisterController.Registry]', 2 );
      IF ( GE_BOINSTANCECONTROL.FBLACCKEYINSTANCESTACK( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NUINSTANCE ) ) THEN
         UT_TIME.STARTTIME( 'mo_boUncompositionUtil.RegisterEnterDate' );
         MO_BOUNCOMPOSITIONUTIL.REGISTERINITDATE;
         UT_TIME.STOPTIME( 'mo_boUncompositionUtil.RegisterEnterDate' );
      END IF;
      SBPACKAGE := NULL;
      SBMOTIVE := NULL;
      SBCOMPONENT := NULL;
      MO_BOUNCOMPOSITIONUTIL.SETDELETEDATAINSTANCE( IBLDELETEDATAINSTANCE );
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUGET_DOM ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuGET_DOM' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry GET_DOM', 3 );
         IN_BOINSTANCEGENERAL.GETDOM_ID( NUDOMID );
         IN_BOINSTANCEGENERAL.GETPACKAGETYPE( NUPACKAGEID );
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuGET_DOM' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUUNCOMPOSITION_UTIL_INIT ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuUNCOMPOSITION_UTIL_INIT' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry Init [' || TO_CHAR( NUPACKAGEID ) || ']', 3 );
         MO_BOUNCOMPOSITIONUTIL.INIT;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuUNCOMPOSITION_UTIL_INIT' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNULOAD_XML ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuLOAD_XML' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry LoadInstanceXml', 3 );
         MO_BOREGISTERXMLPROCESS.LOADINSTANCEXML( NUPACKAGEID, NUDOMID );
         MO_BOREGINCLUDEFEATURE.GENINCLUDEDCOMP;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuLOAD_XML' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNULOAD_GUI ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuLOAD_GUI' );
         UT_TRACE.TRACE( 'Registry LoadInstanceGui', 3 );
         MO_BOREGISTERGUIPROCESS.LOADINSTANCEGUI;
         MO_BOREGINCLUDEFEATURE.GENINCLUDEDCOMP;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuLOAD_GUI' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUUNCOMP_UTIL_LOAD_ATTRIBUTES ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuUNCOMP_UTIL_LOAD_ATTRIBUTES' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry LoadInstanceAttributes MO_BOUncompositionUtil', 3 );
         MO_BOUNCOMPOSITIONUTIL.LOADINSTANCEATTRIBUTES( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE );
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuUNCOMP_UTIL_LOAD_ATTRIBUTES' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUMIRROR_ATTRIBUTE ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuMIRROR_ATTRIBUTE' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry MirrorAttribute', 3 );
         MO_BOUNCOMPOSITIONUTIL.MIRRORATTRIBUTE;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuMIRROR_ATTRIBUTE' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNULOAD_ENTITY_ATTRIBUTES ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuLOAD_ENTITY_ATTRIBUTES' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry LoadInstanceAttributes GE_BOInstanceControl', 3 );
         GE_BOINSTANCECONTROL.LOADINSTANCEATTRIBUTES( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE );
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuLOAD_ENTITY_ATTRIBUTES' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUATTR_PROCESS_EXPRESSION ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuATTR_PROCESS_EXPRESSION' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry ExeAllAttExpressions PROCESS_EXPRESSION', 3 );
         MO_BOUNCOMPOSITIONUTIL.EXEALLATTEXPRESSIONS( GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION );
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuATTR_PROCESS_EXPRESSION' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUVALIDATE_ADDRESS_TYPE ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuVALIDATE_ADDRESS_TYPE' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry SetIsAddressMain', 3 );
         MO_BOUNCOMPOSITIONUTIL.SETISADDRESSMAIN( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE );
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuVALIDATE_ADDRESS_TYPE' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUREQUIRE_CHILD ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuREQUIRE_CHILD' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry ValidateChildComps', 3 );
         MO_BOUNCOMPOSITIONUTIL.VALIDATECHILDCOMPS;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuREQUIRE_CHILD' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUEVENT_PRE_EXPRESSION ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuEVENT_PRE_EXPRESSION' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry ExecuteInstanceExpressions PRE', 3 );
         GE_BOINSTANCECONTROL.EXECUTEINSTANCEEXPRESSIONS( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, GE_BOINSTANCECONSTANTS.CNUEXECUTE_PRE_EXPRESSION, GE_BOINSTANCECONSTANTS.CNUINSERT_EXPRESSION );
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuEVENT_PRE_EXPRESSION' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUEXECUTE_ACTION ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuEXECUTE_ACTION' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry ExecuteAction', 3 );
         MO_BOUNCOMPOSITIONUTIL.EXECUTEACTION( MO_BOACTIONPARAMETER.FNUGETACTION_REGISTER );
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuEXECUTE_ACTION' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUEVENT_POS_EXPRESSION ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuEVENT_POS_EXPRESSION' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry ExecuteInstanceExpressions POS', 3 );
         GE_BOINSTANCECONTROL.EXECUTEINSTANCEEXPRESSIONS( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, GE_BOINSTANCECONSTANTS.CNUEXECUTE_POS_EXPRESSION, GE_BOINSTANCECONSTANTS.CNUINSERT_EXPRESSION );
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuEVENT_POS_EXPRESSION' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUVALIDATE_REQUIRED_INSTANCES ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuVALIDATE_REQUIRED_INSTANCES' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry ValidateRequiredInstances', 3 );
         GE_BOINSTANCECONTROL.DSPLYALLATTRIBUTESTACK;
         VALIDATEREQUIREDINSTANCES;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuVALIDATE_REQUIRED_INSTANCES' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUUPDATE_COMPANY ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuUPDATE_COMPANY' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry UpdateCompany', 3 );
         MO_BOUNCOMPOSITIONUTIL.UPDATECOMPANY;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuUPDATE_COMPANY' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUPROCESS_CAMPAIGN ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuPROCESS_CAMPAIGN' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry ProcessCampaign', 3 );
         MO_BOUNCOMPOSITIONUTIL.PROCESSCAMPAIGN;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuPROCESS_CAMPAIGN' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUPERSISTEN ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuPERSISTEN' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry Persistent', 3 );
         MO_BOUNCOMPOSITIONPERSISTENT.PERSISTENT;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuPERSISTEN' );
         IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUGENERATE_ANS ) ) THEN
            UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuGENERATE_ANS' );
            UT_TRACE.TRACE( 'MO_BORegisterController.Registry UpdPackageANS', 3 );
            MO_BOUNCOMPOSITIONUTIL.UPDPACKAGEANS;
            UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuGENERATE_ANS' );
         END IF;
         IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUREGISTER_PETITION ) ) THEN
            UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuREGISTER_PETITION' );
            UT_TRACE.TRACE( 'MO_BORegisterController.Registry RegisterPetition', 3 );
            MO_BOUNCOMPOSITIONUTIL.REGISTERPETITION;
            UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuREGISTER_PETITION' );
         END IF;
         IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUREGISTER_BATCH ) ) THEN
            UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuREGISTER_BATCH' );
            UT_TRACE.TRACE( 'MO_BORegisterController.Registry RegisterBatch', 3 );
            MO_BOUNCOMPOSITIONUTIL.REGISTERBATCH;
            UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuREGISTER_BATCH' );
         END IF;
      END IF;
      UT_TIME.STARTTIME( 'InstanceHierarchy' );
      UT_TRACE.TRACE( 'MO_BORegisterController.Registry InstanceHierarchy', 3 );
      INSTANCEHIERARCHY;
      UT_TIME.STOPTIME( 'InstanceHierarchy' );
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUREPLICATE ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuREPLICATE' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry Replicate', 3 );
         MO_BOREGISTERREPLICATE.REPLICATE;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuREPLICATE' );
      END IF;
      IF ( TBREGISTRYCONTROL( MO_BOUNCOMPOSITIONCONSTANTS.CNUEXECUTE_ACTION_ATTEND ) ) THEN
         UT_TIME.STARTTIME( 'MO_BOUncompositionConstants.cnuEXECUTE_ACTION_ATTEND' );
         UT_TRACE.TRACE( 'MO_BORegisterController.Registry ExecuteActionAttention', 3 );
         MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONATTENTION;
         UT_TIME.STOPTIME( 'MO_BOUncompositionConstants.cnuEXECUTE_ACTION_ATTEND' );
      END IF;
      IF ( NUTRACELEVEL IS NOT NULL AND NUTRACELEVEL > 0 ) THEN
         UT_TIME.DISPLAYRECORDEDTIMES;
      END IF;
      UT_TRACE.TRACE( 'Fin: [MO_BORegisterController.Registry]', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXECUTEREGISTER
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      UT_TRACE.TRACE( 'MO_BORegisterController.ExecuteRegister INICIO', 1 );
      GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
      SAVEPOINT SP_REGISTRY;
      DEFAULTPROCESSEJECUTION;
      UT_TRACE.TRACE( 'MO_BORegisterController.ExecuteRegister Registry', 1 );
      REGISTRY;
      UT_TRACE.TRACE( 'MO_BORegisterController.ExecuteRegister StopInstanceManager', 1 );
      GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
      UT_TRACE.TRACE( 'MO_BORegisterController.ExecuteRegister commit', 2 );
      COMMIT;
      UT_TRACE.TRACE( 'MO_BORegisterController.ExecuteRegister OK', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ROLLBACK TO SP_REGISTRY;
         GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
         RAISE;
      WHEN OTHERS THEN
         ROLLBACK TO SP_REGISTRY;
         GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETTRACELEVELPARAMETER
    IS
    BEGIN
      NUTRACELEVEL := GE_BOPARAMETER.FNUGET( 'REGISTER_TRACE_LEVEL' );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         NUTRACELEVEL := NULL;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
 BEGIN
   GETTRACELEVELPARAMETER;
   DEFAULTPROCESSEJECUTION;
   SBPACKAGE := NULL;
   SBMOTIVE := NULL;
   SBCOMPONENT := NULL;
END MO_BOREGISTERCONTROLLER;
/


