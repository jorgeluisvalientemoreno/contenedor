PACKAGE BODY MO_BOData_for_order IS

























































    
    
    
    
    CSBVERSION          CONSTANT VARCHAR2(250)  := 'SAO199134';
    
    CSBWORK_INSTANCE    CONSTANT VARCHAR2(30) := MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE;
    
    CSBATTR_ERROR_NULL        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 119562;

    
    
    

    GNUCUSTOMER_CARE_MODULE     GE_PARAMETER.VALUE%TYPE;
    GNUDEFAULT_PRIORITY         GE_PARAMETER.VALUE%TYPE;
    GNUCC_TO_ORD_COMM_TYPE      GE_PARAMETER.VALUE%TYPE;
    GNUPRINADDR                 GE_PARAMETER.VALUE%TYPE;
    GNUGEOLOC_FATHER_CALEN      GE_PARAMETER.VALUE%TYPE;

    GNUENTMO_PACKAGES           GE_ENTITY.ENTITY_ID%TYPE;
    GNUENTMO_MOTIVE             GE_ENTITY.ENTITY_ID%TYPE;
    GNUENTMO_COMPONENT          GE_ENTITY.ENTITY_ID%TYPE;
    GNUENTPS_PACKAGE_TYPE       GE_ENTITY.ENTITY_ID%TYPE;
    GNUENTPS_MOTIVE_TYPE        GE_ENTITY.ENTITY_ID%TYPE;
    GNUENTPS_COMPONENT_TYPE     GE_ENTITY.ENTITY_ID%TYPE;

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    PROCEDURE LOADPARAM
    IS
    BEGIN
        
        GNUCUSTOMER_CARE_MODULE := GE_BOPARAMETER.FNUGET('CUSTOMER_CARE_MODULE');
        GNUDEFAULT_PRIORITY := GE_BOPARAMETER.FNUGET('DEFAULT_PRIORITY');
        GNUPRINADDR := GE_BOPARAMETER.FNUGET('PRINADDR');
        GNUCC_TO_ORD_COMM_TYPE := GE_BOPARAMETER.FNUGET('CC_TO_ORD_COMM_TYPE');
        GNUGEOLOC_FATHER_CALEN := GE_BOPARAMETER.FNUGET('GEOLOC_FATHER_CALEN');
        
        GNUENTMO_PACKAGES := GE_BOENTITY.FNUGETENTITY_ID('MO_PACKAGES');
        GNUENTMO_MOTIVE := GE_BOENTITY.FNUGETENTITY_ID('MO_MOTIVE');
        GNUENTMO_COMPONENT := GE_BOENTITY.FNUGETENTITY_ID('MO_COMPONENT');
        GNUENTPS_MOTIVE_TYPE := GE_BOENTITY.FNUGETENTITY_ID('PS_MOTIVE_TYPE');
        GNUENTPS_PACKAGE_TYPE := GE_BOENTITY.FNUGETENTITY_ID('PS_PACKAGE_TYPE');
        GNUENTPS_COMPONENT_TYPE := GE_BOENTITY.FNUGETENTITY_ID('PS_COMPONENT_TYPE');

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('=>CONTROLLED_ERROR MO_BOData_for_order.LoadParam', 4);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('=>OTHERS_ERROR MO_BOData_for_order.LoadParam', 4);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END LOADPARAM;

    
    PROCEDURE GETSUGGESTACTIVITIES
    (
        INUPACKAGE_ID       IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVE_ID        IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUCOMPONENT_ID     IN MO_COMPONENT.COMPONENT_ID%TYPE,
        OTBMOORDERDATA      OUT DAGE_ITEMS.TYTBITEMS_ID
    )
    IS
        TBMOPACKDATAACT     DAGE_ITEMS.TYTBITEMS_ID;
        TBMOMOTDATAACT      DAGE_ITEMS.TYTBITEMS_ID;
        TBMOCOMPDATAACT     DAGE_ITEMS.TYTBITEMS_ID;
        NUINDEX NUMBER := NULL;
    BEGIN
        OTBMOORDERDATA.DELETE;
        
        
        IF INUPACKAGE_ID IS NOT NULL THEN
            MO_BCDATA_FOR_ORDER.GETITEMSBYPACKAGE(INUPACKAGE_ID, TBMOPACKDATAACT);
        END IF;
        
        IF INUMOTIVE_ID IS NOT NULL THEN
            MO_BCDATA_FOR_ORDER.GETITEMSBYMOTIVE(INUMOTIVE_ID, TBMOMOTDATAACT);
        END IF;

        
        IF INUCOMPONENT_ID IS NOT NULL THEN
            MO_BCDATA_FOR_ORDER.GETITEMSBYMOTIVE(INUCOMPONENT_ID, TBMOCOMPDATAACT);
        END IF;
        
        
        NUINDEX := TBMOPACKDATAACT.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            OTBMOORDERDATA(TBMOPACKDATAACT(NUINDEX)) := TBMOPACKDATAACT(NUINDEX);
            NUINDEX := TBMOPACKDATAACT.NEXT(NUINDEX);
        END LOOP;
        
        NUINDEX := TBMOMOTDATAACT.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            OTBMOORDERDATA(TBMOMOTDATAACT(NUINDEX)) := TBMOMOTDATAACT(NUINDEX);
            NUINDEX := TBMOMOTDATAACT.NEXT(NUINDEX);
        END LOOP;
        
        NUINDEX := TBMOCOMPDATAACT.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            OTBMOORDERDATA(TBMOCOMPDATAACT(NUINDEX)) := TBMOCOMPDATAACT(NUINDEX);
            NUINDEX := TBMOCOMPDATAACT.NEXT(NUINDEX);
        END LOOP;
        
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETSUGGESTACTIVITIES;
    
    PROCEDURE CREATEORDERBYMOTIVE
    (
       INUMOTIVEID           IN MO_MOTIVE.MOTIVE_ID%TYPE
    )
    IS
        RCMOPACKAGE         DAMO_PACKAGES.STYMO_PACKAGES;
        RCMOMOTIVE          DAMO_MOTIVE.STYMO_MOTIVE;
        RCMOCOMPONENT       DAMO_COMPONENT.STYMO_COMPONENT;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;

        NUORDERID           OR_ORDER.ORDER_ID%TYPE;
        TBMODATAACTIVITY    DAGE_ITEMS.TYTBITEMS_ID;


    BEGIN
        
        
        RCMOMOTIVE  := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);
        RCMOPACKAGE := DAMO_PACKAGES.FRCGETRECORD(RCMOMOTIVE.PACKAGE_ID);

        MO_BCDATA_FOR_ORDER.GETITEMSBYMOTIVE(INUMOTIVEID, TBMODATAACTIVITY);
        OR_BOPROGRAMORDERACTIVITY.CREATEINITIALORDERS(RCMOCOMPONENT, RCMOMOTIVE , RCMOPACKAGE,TBMODATAACTIVITY, NUORDERID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END CREATEORDERBYMOTIVE;

    
    PROCEDURE CREATEORDERBYPACK
    (
       INUPACKAGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        RCMOPACKAGE         DAMO_PACKAGES.STYMO_PACKAGES;
        RCMOMOTIVE          DAMO_MOTIVE.STYMO_MOTIVE;
        RCMOCOMPONENT       DAMO_COMPONENT.STYMO_COMPONENT;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;

        NUORDERID           OR_ORDER.ORDER_ID%TYPE;
        TBMODATAACTIVITY    DAGE_ITEMS.TYTBITEMS_ID;


    BEGIN
        
        RCMOPACKAGE         := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);

        MO_BCDATA_FOR_ORDER.GETITEMSBYPACKAGE(INUPACKAGEID, TBMODATAACTIVITY);
        OR_BOPROGRAMORDERACTIVITY.CREATEINITIALORDERS(RCMOCOMPONENT, RCMOMOTIVE , RCMOPACKAGE,TBMODATAACTIVITY, NUORDERID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
            
    END CREATEORDERBYPACK;

    
    PROCEDURE GETDATAFORORDERBYPACK
    (
        INUPACKAGEID        IN MO_DATA_FOR_ORDER.PACKAGE_ID%TYPE,
        ONUOPERATINGUNITID  OUT MO_DATA_FOR_ORDER.OPERATING_UNIT_ID%TYPE,
        ODTORDERDATE        OUT MO_DATA_FOR_ORDER.ORDER_DATE%TYPE,
        ONUTASKTYPEID       OUT MO_DATA_FOR_ORDER.TASK_TYPE_ID%TYPE
    )
    IS
    BEGIN
        FOR REC IN MO_BCDATA_FOR_ORDER.CUDATAFORORDERBYPACKID(INUPACKAGEID) LOOP
            ONUOPERATINGUNITID  := REC.OPERATING_UNIT_ID;
            ODTORDERDATE        := REC.ORDER_DATE;
            ONUTASKTYPEID       := REC.TASK_TYPE_ID;
        END LOOP;
        UT_TRACE.TRACE('Unidad:['||ONUOPERATINGUNITID||']Fecha:['||ODTORDERDATE||']Tipo Orden:['||ONUTASKTYPEID||']',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETDATAFORORDERBYPACK;

    
	FUNCTION FRFGETTASKTYPEDESC
    RETURN CONSTANTS.TYREFCURSOR
	IS
        SBMOTIVEID   GE_BOINSTANCECONTROL.STYSBVALUE := NULL;
	BEGIN
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CSBWORK_INSTANCE, NULL, 'MO_MOTIVE', 'MOTIVE_ID', SBMOTIVEID);

        
        RETURN MO_BCDATA_FOR_ORDER.FRFGETTASKTYPEDESC(TO_NUMBER(SBMOTIVEID));
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    





























    PROCEDURE CREATEORDER
    (
       INUPACKAGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE,
       ONUDISPLAYORDER  OUT OR_ORDER.ORDER_ID%TYPE,
       ISBCOMPENSATE    IN  VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBYES
    )
    IS
        RCMOPACKAGE         DAMO_PACKAGES.STYMO_PACKAGES := NULL;
        RCMOMOTIVE          DAMO_MOTIVE.STYMO_MOTIVE := NULL;
        RCMOCOMPONENT       DAMO_COMPONENT.STYMO_COMPONENT := NULL;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE := NULL;
        NUMAINCOMPONENTID   MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUORDERID           OR_ORDER.ORDER_ID%TYPE := NULL;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;

        NUCURRENTINDEX      NUMBER;
        TBCOMPONENTDATA     DAMO_COMPONENT.TYTBMO_COMPONENT;
        TBMODATAACTIVITY    DAGE_ITEMS.TYTBITEMS_ID;
        NUTECHNOLOGYTYPEID  MO_DATA_CONNECTION.TECHNOLOGY_TYPE_ID%TYPE;
        
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        TBMOPACKAGESASSO    DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUPACKIDX           NUMBER := NULL;
    BEGIN

        UT_TRACE.TRACE(' INICIO MO_BOData_for_order.CreateOrder inuPackageId:['||INUPACKAGEID||']-['||SYSDATE||']',15);
        
        IF GE_BOPARAMETER.FSBGET('CREATE_ACTI_REQUEST') = GE_BOCONSTANTS.CSBNO THEN
            RETURN;
        END IF;
        
        NUPACKAGEID := INUPACKAGEID;

        WHILE (NUPACKAGEID IS NOT NULL) LOOP
        
            
            RCMOPACKAGE := DAMO_PACKAGES.FRCGETRECORD(NUPACKAGEID);

            
            TBMODATAACTIVITY.DELETE;
            RCMOCOMPONENT:= NULL;
            RCMOMOTIVE := NULL;
            NUORDERID := NULL;
            
            
            
            MO_BCDATA_FOR_ORDER.GETITEMSBYPACKAGE(NUPACKAGEID, TBMODATAACTIVITY);
            OR_BOPROGRAMORDERACTIVITY.CREATEINITIALORDERS(RCMOCOMPONENT, RCMOMOTIVE , RCMOPACKAGE,TBMODATAACTIVITY, NUORDERID, NULL, ISBCOMPENSATE);
            ONUDISPLAYORDER := NVL(ONUDISPLAYORDER,NUORDERID);
            
            FOR RGMOTIVE IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(NUPACKAGEID) LOOP

                NUMOTIVEID := RGMOTIVE.MOTIVE_ID;
                RCMOMOTIVE := RGMOTIVE;
                

                NUMAINCOMPONENTID   := MO_BCMOTIVE.FNUGETMAINCOMPONENTID(NUMOTIVEID);
                NUTECHNOLOGYTYPEID  := MO_BOCOMPONENT.FNUGETTECHNOLOGYTYPECOMP(NUMAINCOMPONENTID);

                RCMOCOMPONENT := NULL;

                
                TBMODATAACTIVITY.DELETE;
                NUORDERID := NULL;
                
                MO_BCDATA_FOR_ORDER.GETITEMSBYMOTIVE(NUMOTIVEID, TBMODATAACTIVITY);
                OR_BOPROGRAMORDERACTIVITY.CREATEINITIALORDERS(RCMOCOMPONENT, RCMOMOTIVE , RCMOPACKAGE,TBMODATAACTIVITY, NUORDERID, NULL, ISBCOMPENSATE);
                ONUDISPLAYORDER := NVL(ONUDISPLAYORDER,NUORDERID);

                
                TBCOMPONENTDATA.DELETE;
                TBCOMPONENTDATA := MO_BCCOMPONENT.FTBCOMPACTIVESBYMOTANDDIFTYPE(NUMOTIVEID, -1);
                NUCURRENTINDEX := TBCOMPONENTDATA.FIRST;

                
                
                
                WHILE NUCURRENTINDEX IS NOT NULL LOOP
                    RCMOCOMPONENT := TBCOMPONENTDATA(NUCURRENTINDEX);

                    
                    TBMODATAACTIVITY.DELETE;
                    NUORDERID := NULL;
                    
                    MO_BCDATA_FOR_ORDER.GETITEMSBYCOMPONENT(RCMOCOMPONENT.COMPONENT_ID, TBMODATAACTIVITY);
                    OR_BOPROGRAMORDERACTIVITY.CREATEINITIALORDERS(RCMOCOMPONENT, RCMOMOTIVE , RCMOPACKAGE,TBMODATAACTIVITY, NUORDERID, NULL, ISBCOMPENSATE);
                    ONUDISPLAYORDER := NVL(ONUDISPLAYORDER,NUORDERID);

                    
                    OR_BOPROGRAMORDERACTIVITY.CREATEINITACTREQDAT
                            (
                                RCMOCOMPONENT,
                                RCMOMOTIVE,
                                RCMOPACKAGE,
                                NVL(MO_BOCOMPONENT.FNUGETTECHNOLOGYTYPECOMP(RCMOCOMPONENT.COMPONENT_ID), NUTECHNOLOGYTYPEID ),
                                NUORDERID
                            );

                    ONUDISPLAYORDER := NVL(ONUDISPLAYORDER,NUORDERID);

                    NUCURRENTINDEX := TBCOMPONENTDATA.NEXT(NUCURRENTINDEX);
                END LOOP;
            END LOOP;
            
            IF ( NUPACKAGEID = INUPACKAGEID) THEN
                
               TBMOPACKAGESASSO := MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO(INUPACKAGEID);
               NUPACKIDX := TBMOPACKAGESASSO.FIRST;
            ELSE
               NUPACKIDX := TBMOPACKAGESASSO.NEXT(NUPACKIDX);
            END IF;
            
            NUPACKAGEID := NULL;
            IF (NUPACKIDX IS NOT NULL) THEN
                NUPACKAGEID := TBMOPACKAGESASSO(NUPACKIDX).PACKAGE_ID;
            END IF;
            
        END LOOP;

        UT_TRACE.TRACE(' FIN MO_BOData_for_order.CreateOrder nuOrderId:['||NUORDERID||']-['||SYSDATE||']',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;
    
    PROCEDURE CREATEINITIALORDER
    (
       INUPACKAGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE,
       ISBCOMPENSATE    IN  VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBYES
    )
    IS
       NUDISPLAYORDER   OR_ORDER.ORDER_ID%TYPE := NULL;
       NUTASKTYPE       OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
       SBCOMPCRM        OR_TASK_TYPE.COMPROMISE_CRM%TYPE;
       NUINDEX         PLS_INTEGER;
    BEGIN
        UT_TRACE.TRACE(' INICIO MO_BOData_for_order.CreateInitialOrder inuPackageId:['||INUPACKAGEID||']-['||SYSDATE||']',15);
        CREATEORDER(INUPACKAGEID, NUDISPLAYORDER, ISBCOMPENSATE);
        
        
        IF NUDISPLAYORDER IS NOT NULL THEN
            NUTASKTYPE := DAOR_ORDER.FNUGETTASK_TYPE_ID(NUDISPLAYORDER);
            SBCOMPCRM  := DAOR_TASK_TYPE.FSBGETCOMPROMISE_CRM(NUTASKTYPE);
            IF(SBCOMPCRM = GE_BOCONSTANTS.CSBYES) THEN
                OR_BOPROGRAMING.SETORDERINSTANCE(NUDISPLAYORDER);
            
                
                
                IF (NOT OR_BOPROGRAMING.FBLPROGAUTOMATICA(NUDISPLAYORDER)) THEN
                    UT_TRACE.TRACE('No se programa autom�ticamente, se lanza componente de programaci�n.', 16);
                    GE_BOIOPENEXECUTABLE.SETORDERPROGRAM;
                END IF;
            END IF;
        END IF;
        UT_TRACE.TRACE(' FIN MO_BOData_for_order.CreateInitialOrder nuOrderId:['||NUDISPLAYORDER||']-['||SYSDATE||']',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END CREATEINITIALORDER;

    
    PROCEDURE CREATEORDERBYFEASIBILITY
    (
       INUPACKAGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUDISPLAYORDER  OR_ORDER.ORDER_ID%TYPE := NULL;
        NUINDEX         PLS_INTEGER;
        
        CNUORDERPROGRAMEXECID  CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := 9878;
        SBEVENT VARCHAR2(200) := 'POST_REGISTER';
    BEGIN
        UT_TRACE.TRACE(' INICIO MO_BOData_for_order.CreateOrderByFeasibility inuPackageId:['||INUPACKAGEID||']-['||SYSDATE||']',15);
        CREATEORDER(INUPACKAGEID, NUDISPLAYORDER);
        
        IF NUDISPLAYORDER IS NOT NULL AND GE_BOINSTANCECONTROL.FBLACCKEYINSTANCESTACK(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,NUINDEX) THEN
            OR_BOPROGRAMING.SETORDERINSTANCE(NUDISPLAYORDER);
        END IF;

        UT_TRACE.TRACE(' FIN MO_BOData_for_order.CreateOrderByFeasibility cnuOrderProgramExecId:['||CNUORDERPROGRAMEXECID||']-['||SYSDATE||']',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    
    PROCEDURE ADDCOMPONENTSORDER
    (
       INUPACKAGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        RCMOPACKAGE         DAMO_PACKAGES.STYMO_PACKAGES := NULL;
        RCMOMOTIVE          DAMO_MOTIVE.STYMO_MOTIVE := NULL;
        RCMOCOMPONENT       DAMO_COMPONENT.STYMO_COMPONENT := NULL;

        TBCOMPONENTDATA     DAMO_COMPONENT.TYTBMO_COMPONENT;
        NUCURRENTINDEX      NUMBER;

        NUTECHNOLOGYTYPEID  MO_DATA_CONNECTION.TECHNOLOGY_TYPE_ID%TYPE;
        NUMAINCOMPONENTID   MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUORDERID           OR_ORDER.ORDER_ID%TYPE := NULL;
    BEGIN
        UT_TRACE.TRACE(' INI MO_BOData_for_order.addComponentsOrder nuOrderId:['||NUORDERID||']-['||SYSDATE||']',15);
        
        RCMOPACKAGE := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);

        
        FOR RGMOTIVE IN MO_BCMOTIVE.CUMOTIVESACTIVESBYPACKAGE(INUPACKAGEID) LOOP

            RCMOMOTIVE := RGMOTIVE;

            
            NUMAINCOMPONENTID   := MO_BCMOTIVE.FNUGETMAINCOMPONENTID(RCMOMOTIVE.MOTIVE_ID);
            NUTECHNOLOGYTYPEID  := MO_BOCOMPONENT.FNUGETTECHNOLOGYTYPECOMP(NUMAINCOMPONENTID);

            
            TBCOMPONENTDATA.DELETE;
            TBCOMPONENTDATA := MO_BCCOMPONENT.FTBCOMPACTIVESBYMOTANDDIFTYPE(RCMOMOTIVE.MOTIVE_ID, -1);
            NUCURRENTINDEX := TBCOMPONENTDATA.FIRST;

            
            
            
            WHILE NUCURRENTINDEX IS NOT NULL LOOP
                RCMOCOMPONENT := TBCOMPONENTDATA(NUCURRENTINDEX);

                
                OR_BOPROGRAMORDERACTIVITY.CREATEINITACTREQDAT(RCMOCOMPONENT,RCMOMOTIVE,RCMOPACKAGE,NUTECHNOLOGYTYPEID, NUORDERID);

                NUCURRENTINDEX := TBCOMPONENTDATA.NEXT(NUCURRENTINDEX);
            END LOOP;

        END LOOP;

        UT_TRACE.TRACE(' FIN MO_BOData_for_order.addComponentsOrder nuOrderId:['||NUORDERID||']-['||SYSDATE||']',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDCOMPONENTSORDER;
    
    PROCEDURE ORDTHATNEEDCOMPROMISE
    (
        INUPACKAGEID     IN     MO_PACKAGES.PACKAGE_ID%TYPE,
        OTBORDERID       OUT    DAOR_ORDER_ACTIVITY.TYTBORDER_ID
    )
    IS
        SBCOMPCRM       OR_TASK_TYPE.COMPROMISE_CRM%TYPE;
        NUORDERIDX      BINARY_INTEGER;
        TBORDERID       DAOR_ORDER_ACTIVITY.TYTBORDER_ID;
        RCORDER         DAOR_ORDER.STYOR_ORDER;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOData_for_order.OrdThatNeedCompromise PackageId:['||INUPACKAGEID||']',15);

        
        OR_BCORDERACTIVITIES.GETACTIVPENDBYPACK(INUPACKAGEID, TBORDERID);

        
        NUORDERIDX := TBORDERID.FIRST;
        WHILE (NUORDERIDX IS NOT NULL) LOOP
            
            RCORDER := DAOR_ORDER.FRCGETRECORD(TBORDERID(NUORDERIDX));

            
            SBCOMPCRM := NVL(DAOR_TASK_TYPE.FSBGETCOMPROMISE_CRM(RCORDER.TASK_TYPE_ID), GE_BOCONSTANTS.CSBNO);

            
            IF (SBCOMPCRM = GE_BOCONSTANTS.CSBYES) AND (NOT OR_BOPROGRAMING.FBLPROGAUTOMATICA(RCORDER.ORDER_ID))THEN
                
                OTBORDERID(OTBORDERID.COUNT) := RCORDER.ORDER_ID;
            END IF;

            NUORDERIDX := TBORDERID.NEXT(NUORDERIDX);
        END LOOP;

        UT_TRACE.TRACE('Termina MO_BOData_for_order.OrdThatNeedCompromise ['||OTBORDERID.COUNT||'] - OK',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ORDTHATNEEDCOMPROMISE;


    PROCEDURE ORDTHATNEEDCOMPRBYREQ
    (
        INUREQUESTID     IN     MO_PACKAGES.PACKAGE_ID%TYPE,
        OTBORDERID       OUT    DAOR_ORDER_ACTIVITY.TYTBORDER_ID
    )
    IS
        NUPACKASSOIDX   BINARY_INTEGER;
        TBPACKASSO      DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;

        NUORDERIDX      BINARY_INTEGER;
        TBORDERBYPACK   DAOR_ORDER_ACTIVITY.TYTBORDER_ID;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOData_for_order.OrdThatNeedComprByReq RequestId:['||INUREQUESTID||']',13);


        
        MO_BODATA_FOR_ORDER.ORDTHATNEEDCOMPROMISE(INUREQUESTID, TBORDERBYPACK);

        
        NUORDERIDX := TBORDERBYPACK.FIRST;
        WHILE (NUORDERIDX IS NOT NULL) LOOP

            
            OTBORDERID(OTBORDERID.COUNT) := TBORDERBYPACK(NUORDERIDX);

            NUORDERIDX := TBORDERBYPACK.NEXT(NUORDERIDX);
        END LOOP;

        
        TBPACKASSO := MO_BCPACKAGES_ASSO.FTBPACKAGESBYPACKASSO(INUREQUESTID);
        NUPACKASSOIDX := TBPACKASSO.FIRST;
        WHILE (NUPACKASSOIDX IS NOT NULL) LOOP

            
            MO_BODATA_FOR_ORDER.ORDTHATNEEDCOMPROMISE(TBPACKASSO(NUPACKASSOIDX).PACKAGE_ID, TBORDERBYPACK);

            
            NUORDERIDX := TBORDERBYPACK.FIRST;
            WHILE (NUORDERIDX IS NOT NULL) LOOP

                
                OTBORDERID(OTBORDERID.COUNT) := TBORDERBYPACK(NUORDERIDX);

                NUORDERIDX := TBORDERBYPACK.NEXT(NUORDERIDX);
            END LOOP;

            NUPACKASSOIDX := TBPACKASSO.NEXT(NUPACKASSOIDX);
        END LOOP;

        UT_TRACE.TRACE('Termina MO_BOData_for_order.OrdThatNeedComprByReq ['||OTBORDERID.COUNT||'] - OK',13);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ORDTHATNEEDCOMPRBYREQ;

    













    PROCEDURE CREATEINITORDERBYPACK
    (
       INUPACKAGEID     IN  MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
       NUDISPLAYORDER   OR_ORDER.ORDER_ID%TYPE := NULL;
       NUTASKTYPE       OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
       SBCOMPCRM        OR_TASK_TYPE.COMPROMISE_CRM%TYPE;
       NUINDEX         PLS_INTEGER;
    BEGIN
        UT_TRACE.TRACE(' INICIO MO_BOData_for_order.CreateInitOrderByPack inuPackageId:['||INUPACKAGEID||']-['||SYSDATE||']',15);
        CREATEORDER(INUPACKAGEID, NUDISPLAYORDER);
        
        
        IF NUDISPLAYORDER IS NOT NULL THEN
            NUTASKTYPE := DAOR_ORDER.FNUGETTASK_TYPE_ID(NUDISPLAYORDER);
            SBCOMPCRM  := DAOR_TASK_TYPE.FSBGETCOMPROMISE_CRM(NUTASKTYPE);
            IF(SBCOMPCRM = GE_BOCONSTANTS.CSBYES) THEN
                
                
                IF (NOT OR_BOPROGRAMING.FBLPROGAUTOMATICA(NUDISPLAYORDER)) THEN
                    UT_TRACE.TRACE('No se programa autom�ticamente, se instanci aorden para programar', 16);
                    OR_BOPROGRAMING.SETORDERINSTANCE(NUDISPLAYORDER);
                END IF;
            END IF;
        END IF;
        UT_TRACE.TRACE(' FIN MO_BOData_for_order.CreateInitOrderByPack nuOrderId:['||NUDISPLAYORDER||']-['||SYSDATE||']',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEINITORDERBYPACK;

    
    
























    FUNCTION FBOEXISTACTIVITYBYPROD
    (
        INUPRODUCTID          IN    MO_MOTIVE.PRODUCT_ID%TYPE,
        ISBTAGNAMEPACKTYPE    IN    MO_PACKAGES.TAG_NAME%TYPE,
        INUACTIVITYID         IN    MO_DATA_FOR_ORDER.ITEM_ID%TYPE
    )RETURN BOOLEAN
    IS
    
        
        TBPACKAGES        DAMO_PACKAGES.TYTBMO_PACKAGES;
        
        
        NUINDEXPACKAGES    NUMBER;
        
        
        TBMOPACKDATAACT    DAGE_ITEMS.TYTBITEMS_ID;
        
        
        NUINDEXITEMS       NUMBER;
        
        
        PROCEDURE VALIDATEDATA IS
        BEGIN

            IF (INUPRODUCTID IS NULL) THEN
                ERRORS.SETERROR(CSBATTR_ERROR_NULL,'C�digo del Producto');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            IF (ISBTAGNAMEPACKTYPE IS NULL) THEN
                ERRORS.SETERROR(CSBATTR_ERROR_NULL,'TagName de la Solicitud');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            IF (INUACTIVITYID IS NULL) THEN
                ERRORS.SETERROR(CSBATTR_ERROR_NULL,'C�digo de la Actividad');
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            DAGE_ITEMS.ACCKEY (INUACTIVITYID);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALIDATEDATA;

    
    BEGIN
    
        UT_TRACE.TRACE('Inicia M�todo MO_BOData_for_order.fboExistActivityByProd',12);
        UT_TRACE.TRACE('Producto:['||INUPRODUCTID||'] Tag del tipo paquete:['||ISBTAGNAMEPACKTYPE||'] Actividad['||INUACTIVITYID||']',12);
    
        
        VALIDATEDATA;
    
        
        TBPACKAGES := PS_BOPACKTYPEVALIDATE.FTBGETPACKACTIVESPROD (INUPRODUCTID, ISBTAGNAMEPACKTYPE);
        
        
        NUINDEXPACKAGES := TBPACKAGES.FIRST;
        WHILE (NUINDEXPACKAGES IS NOT NULL) LOOP
            UT_TRACE.TRACE('Solicitud['||TBPACKAGES(NUINDEXPACKAGES).PACKAGE_ID||']',15);
            
            
            MO_BCDATA_FOR_ORDER.GETITEMSBYPACKAGE(TBPACKAGES(NUINDEXPACKAGES).PACKAGE_ID, TBMOPACKDATAACT);
            
            
            NUINDEXITEMS := TBMOPACKDATAACT.FIRST;
            WHILE (NUINDEXITEMS IS NOT NULL) LOOP
                UT_TRACE.TRACE('Actividad['||TBMOPACKDATAACT(NUINDEXITEMS)||']',17);
                
                
                IF (TBMOPACKDATAACT(NUINDEXITEMS) = INUACTIVITYID) THEN
                    UT_TRACE.TRACE('Fin M�todo MO_BOData_for_order.fboExistActivityByProd Existe Actividad[TRUE]',12);
                    RETURN TRUE;
                END IF;

                
                NUINDEXITEMS := TBMOPACKDATAACT.NEXT(NUINDEXITEMS);

            END LOOP;
            
            

            IF (MO_BODATA_FOR_ORDER.FBOEXISTACTIVITYBYMOT(TBPACKAGES(NUINDEXPACKAGES).PACKAGE_ID,INUACTIVITYID)) THEN
                UT_TRACE.TRACE('Fin M�todo MO_BOData_for_order.fboExistActivityByProd Existe Actividad[TRUE]',12);
                RETURN TRUE;
            END IF;
        
            
            NUINDEXPACKAGES := TBPACKAGES.NEXT(NUINDEXPACKAGES);
        
        END LOOP;
        
        UT_TRACE.TRACE('Fin M�todo MO_BOData_for_order.fboExistActivityByProd Existe Actividad[FALSE]',12);
        RETURN FALSE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOEXISTACTIVITYBYPROD;
    
    















    FUNCTION FBOEXISTACTIVITYBYMOT
    (
        INUREQUESTID    IN    MO_DATA_FOR_ORDER.PACKAGE_ID%TYPE,
        INUACTIVITYID   IN    MO_DATA_FOR_ORDER.ITEM_ID%TYPE
    )RETURN BOOLEAN
    IS
        
        TBMOTIVES          DAMO_MOTIVE.TYTBMO_MOTIVE;
        
        
        NUINDEXMOTIVE      NUMBER;
        
        
        TBMOMOTIDATAACT    DAGE_ITEMS.TYTBITEMS_ID;

        
        NUINDEXITEMS       NUMBER;
    
    BEGIN
        UT_TRACE.TRACE('Inicio MO_BOData_for_order.fboExistActivityByMot',12);
        
        
        TBMOTIVES := MO_BCMOTIVE.FTBMOTIVESBYPACKAGE(INUREQUESTID);
        
        
        NUINDEXMOTIVE := TBMOTIVES.FIRST;
        WHILE (NUINDEXMOTIVE IS NOT NULL) LOOP
            UT_TRACE.TRACE('Motivo['||TBMOTIVES(NUINDEXMOTIVE).MOTIVE_ID||']',15);
            
            
            MO_BCDATA_FOR_ORDER.GETITEMSBYMOTIVE(TBMOTIVES(NUINDEXMOTIVE).MOTIVE_ID,TBMOMOTIDATAACT);
            
            
            NUINDEXITEMS := TBMOMOTIDATAACT.FIRST;
            WHILE (NUINDEXITEMS IS NOT NULL) LOOP
                UT_TRACE.TRACE('Actividad['||TBMOMOTIDATAACT(NUINDEXITEMS)||']',17);

                
                IF (TBMOMOTIDATAACT(NUINDEXITEMS) = INUACTIVITYID) THEN
                    UT_TRACE.TRACE('Fin M�todo MO_BOData_for_order.fboExistActivityByMot Existe Actividad[TRUE]',12);
                    RETURN TRUE;
                END IF;

                
                NUINDEXITEMS := TBMOMOTIDATAACT.NEXT(NUINDEXITEMS);
            END LOOP;

            
            NUINDEXMOTIVE := TBMOTIVES.NEXT(NUINDEXMOTIVE);
        END LOOP;
        
        UT_TRACE.TRACE('Fin MO_BOData_for_order.fboExistActivityByMot Existe Actividad[FALSE]',12);
        RETURN FALSE;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOEXISTACTIVITYBYMOT;
    
BEGIN
    LOADPARAM;

END MO_BODATA_FOR_ORDER;