CREATE OR REPLACE PACKAGE IC_BOFINANCIALCONSOLE IS
   TYPE RTYPROCESS IS RECORD
    (
      ID NUMBER,
      DESCRIPTION VARCHAR2( 100 ),
      DOCUMENTTYPE NUMBER,
      EXECUTABLE_ID NUMBER,
      PROCESSNAME VARCHAR2( 50 )
    );
   TYPE TYTBPROCESSCONSOLE IS TABLE OF RTYPROCESS;
   TYPE TYTBPROCESS IS TABLE OF RTYPROCESS INDEX BY BINARY_INTEGER;
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   PROCEDURE GETPROCESS( ORFPROCESS OUT PKCONSTANTE.TYREFCURSOR );
   PROCEDURE GETCONSOLEINFO( INUMONTH IN NUMBER, INUYEAR IN NUMBER, ORFCONSOLE OUT PKCONSTANTE.TYREFCURSOR );
   FUNCTION FTBGETPROCESS
    RETURN TYTBPROCESSCONSOLE
    PIPELINED;
   PROCEDURE SETPROCESS;
   PROCEDURE SCHEDULEPROCESS;
   PROCEDURE PROCESSFINANCIALCONSOLEXML( INUYEAR IN NUMBER, INUMONTH IN NUMBER, ICLXML IN CLOB, ORFCONSOLE OUT PKCONSTANTE.TYREFCURSOR );
   FUNCTION FSBGETFINDATEANDADVAN( ISBSCHEDULEID IN IC_PROGDIPI.PRDPPRPR%TYPE )
    RETURN VARCHAR2;
END IC_BOFINANCIALCONSOLE;
/


CREATE OR REPLACE PACKAGE BODY IC_BOFINANCIALCONSOLE IS
   TBPROCESS TYTBPROCESS;
   CSBVERSION CONSTANT VARCHAR2( 10 ) := 'SAO238093';
   CNUTRAZA CONSTANT NUMBER := 10;
   CSBSQPROGDIPI CONSTANT VARCHAR2( 50 ) := 'SQ_IC_PROGDIPI_187472';
   CSBDATE_FORMAT CONSTANT VARCHAR2( 50 ) := 'YYYY-MM-DD"T"HH24:MI:SS';
   CSBNEWSTATE CONSTANT VARCHAR2( 1 ) := 'N';
   CSBDELSTATE CONSTANT VARCHAR2( 1 ) := 'D';
   CSBEXECUTABLE_PGHE CONSTANT SA_EXECUTABLE.NAME%TYPE := 'ICBGHE';
   CSBEXECUTABLE_PGRC CONSTANT SA_EXECUTABLE.NAME%TYPE := 'ICBGRC';
   CSBEXECUTABLE_ICBPCC CONSTANT SA_EXECUTABLE.NAME%TYPE := 'ICBPCC';
   CSBEXECUTABLE_FRRO CONSTANT SA_EXECUTABLE.NAME%TYPE := 'FGRR';
   CSBEXECUTABLE_ICBGIC CONSTANT SA_EXECUTABLE.NAME%TYPE := 'ICBGIC';
   CSBEXECUTABLE_PPCA CONSTANT SA_EXECUTABLE.NAME%TYPE := 'PPCA';
   CSBEXECUTABLE_FPHE CONSTANT SA_EXECUTABLE.NAME%TYPE := 'FPHE';
   CSBEXECUTABLE_ICBPPA CONSTANT SA_EXECUTABLE.NAME%TYPE := 'ICBPPA';
   CNUIDEXECUTABLE_PGHE CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := IC_BCFINANCIALCONSOLE.FNUGETEXECUTABLEID( CSBEXECUTABLE_PGHE );
   CNUIDEXECUTABLE_PGRC CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := IC_BCFINANCIALCONSOLE.FNUGETEXECUTABLEID( CSBEXECUTABLE_PGRC );
   CNUIDEXECUTABLE_ICBPCC CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := IC_BCFINANCIALCONSOLE.FNUGETEXECUTABLEID( CSBEXECUTABLE_ICBPCC );
   CNUIDEXECUTABLE_FRRO CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := 0;
   CNUIDEXECUTABLE_ICBGIC CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := IC_BCFINANCIALCONSOLE.FNUGETEXECUTABLEID( CSBEXECUTABLE_ICBGIC );
   CNUIDEXECUTABLE_PPCA CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := IC_BCFINANCIALCONSOLE.FNUGETEXECUTABLEID( CSBEXECUTABLE_PPCA );
   CNUIDEXECUTABLE_FPHE CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := IC_BCFINANCIALCONSOLE.FNUGETEXECUTABLEID( CSBEXECUTABLE_FPHE );
   CNUIDEXECUTABLE_ICBPPA CONSTANT SA_EXECUTABLE.EXECUTABLE_ID%TYPE := IC_BCFINANCIALCONSOLE.FNUGETEXECUTABLEID( CSBEXECUTABLE_ICBPPA );
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( CSBVERSION );
   END FSBVERSION;
   PROCEDURE GETPROCESS( ORFPROCESS OUT PKCONSTANTE.TYREFCURSOR )
    IS
    BEGIN
      PKERRORS.PUSH( 'IC_BOFinancialConsole.GetProcess' );
      UT_TRACE.TRACE( 'INICIO [IC_BOFinancialConsole.GetProcess]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
      IC_BOFINANCIALCONSOLE.SETPROCESS;
      IC_BCFINANCIALCONSOLE.GETCONSOLEPROCESS( ORFPROCESS );
      UT_TRACE.TRACE( 'FIN [IC_BOFinancialConsole.GetProcess]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END GETPROCESS;
   PROCEDURE GETCONSOLEINFO( INUMONTH IN NUMBER, INUYEAR IN NUMBER, ORFCONSOLE OUT PKCONSTANTE.TYREFCURSOR )
    IS
      DTINITIALDATE DATE;
      DTFINISHDATE DATE;
      CNUHOURS CONSTANT NUMBER := 0.999991574;
      SBINITIALDAY VARCHAR2( 2 ) := '01';
      SBSEPARATOR VARCHAR2( 1 ) := '/';
      CSBDATE_INIT_FORMAT CONSTANT VARCHAR2( 50 ) := 'DD/MM/YYYY HH:MI:SS A.M.';
    BEGIN
      PKERRORS.PUSH( 'IC_BOFinancialConsole.GetConsoleInfo' );
      UT_TRACE.TRACE( 'INICIO [IC_BOFinancialConsole.GetConsoleInfo]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
      DTINITIALDATE := TO_DATE( SBINITIALDAY || SBSEPARATOR || INUMONTH || SBSEPARATOR || INUYEAR, CSBDATE_INIT_FORMAT );
      DTFINISHDATE := LAST_DAY( DTINITIALDATE ) + CNUHOURS;
      IC_BCPROGDIPI.GETCONSOLEINFO( DTINITIALDATE, DTFINISHDATE, ORFCONSOLE );
      UT_TRACE.TRACE( 'FIN [IC_BOFinancialConsole.GetConsoleInfo]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END GETCONSOLEINFO;
   PROCEDURE SETPROCESS
    IS
      NUIND NUMBER;
    BEGIN
      PKERRORS.PUSH( 'IC_BOFinancialConsole.SetProcess' );
      IF ( IC_BOFINANCIALCONSOLE.TBPROCESS.FIRST IS NOT NULL ) THEN
         IC_BOFINANCIALCONSOLE.TBPROCESS.DELETE;
      END IF;
      NUIND := 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Hechos Economicos FACTURACION';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 71;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGHE;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGHE;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Hechos Economicos NOTAS';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 73;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGHE;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGHE;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Resumenes de Recaudo';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_FRRO;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_FRRO;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Hechos Economicos PAGOS';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 72;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGHE;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGHE;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Hechos Economicos DOCUMENTOS DE RECAUDO';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 74;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGHE;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGHE;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Hechos Economicos CARTERA';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 76;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGHE;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGHE;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Hechos Economicos ACTAS';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 77;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGHE;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGHE;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Informacion Cartera por Comprobante y Concepto';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBGIC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_ICBGIC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Provision de Cartera';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PPCA;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PPCA;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Provision de Facturacion';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_FPHE;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_FPHE;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Provision de Actas';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBPPA;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_ICBPPA;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Registros Contables FACTURACION';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 71;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGRC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGRC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Registros Contables PAGOS';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 72;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGRC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGRC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Registros Contables NOTAS';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 73;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGRC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGRC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Registros Contables DOCUMENTOS DE RECAUDO';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 74;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGRC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGRC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Registros Contables CARTERA';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 76;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGRC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGRC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Generacion de Registros Contables ACTAS';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 77;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGRC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_PGRC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Publicacion de Registros Contables FACTURACION';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 71;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBPCC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_ICBPCC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Publicacion de Registros Contables PAGOS';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 72;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBPCC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_ICBPCC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Publicacion de Registros Contables NOTAS';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 73;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBPCC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_ICBPCC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Publicacion de Registros Contables DOCUMENTOS DE RECAUDO';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 74;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBPCC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_ICBPCC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Publicacion de Registros Contables CARTERA';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 76;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBPCC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_ICBPCC;
      NUIND := NUIND + 1;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DESCRIPTION := 'Publicacion de Registros Contables ACTAS';
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).DOCUMENTTYPE := 77;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).EXECUTABLE_ID := IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBPCC;
      IC_BOFINANCIALCONSOLE.TBPROCESS( NUIND ).PROCESSNAME := IC_BOFINANCIALCONSOLE.CSBEXECUTABLE_ICBPCC;
      NUIND := NUIND + 1;
      IC_BOPROCFINANCONSOLE.GETPROCESSCONSOLE( IC_BOFINANCIALCONSOLE.TBPROCESS, NUIND );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END SETPROCESS;
   FUNCTION FTBGETPROCESS
    RETURN TYTBPROCESSCONSOLE
    PIPELINED
    IS
      RCPROCESS RTYPROCESS;
      NUIDX NUMBER;
    BEGIN
      PKERRORS.PUSH( 'IC_BOFinancialConsole.ftbGetProcess' );
      UT_TRACE.TRACE( 'IC_BOFinancialConsole.tbProcess.count ' || IC_BOFINANCIALCONSOLE.TBPROCESS.COUNT, 1 );
      IF ( IC_BOFINANCIALCONSOLE.TBPROCESS.FIRST IS NULL ) THEN
         PKERRORS.POP;
         RETURN;
      END IF;
      NUIDX := IC_BOFINANCIALCONSOLE.TBPROCESS.FIRST;
      LOOP
         EXIT WHEN NUIDX IS NULL;
         RCPROCESS.ID := NUIDX;
         RCPROCESS.DESCRIPTION := IC_BOFINANCIALCONSOLE.TBPROCESS( NUIDX ).DESCRIPTION;
         RCPROCESS.PROCESSNAME := IC_BOFINANCIALCONSOLE.TBPROCESS( NUIDX ).PROCESSNAME;
         PIPE ROW( RCPROCESS );
         NUIDX := IC_BOFINANCIALCONSOLE.TBPROCESS.NEXT( NUIDX );
      END LOOP;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FTBGETPROCESS;
   PROCEDURE SCHEDULEPROCESS
    IS
      TBPROGDIPI PKTBLIC_PROGDIPI.TYTBIC_PROGDIPI;
      SBCONNECTION VARCHAR2( 1000 );
      CSBPIPE CONSTANT VARCHAR2( 1 ) := '|';
      CSBSEPARATOR CONSTANT VARCHAR2( 1 ) := ',';
      DTPROCESSDATE IC_PROGDIPI.PRDPFECH%TYPE;
      DTFINISHDATE IC_PROGDIPI.PRDPFECH%TYPE;
      RCPROGDIPI IC_PROGDIPI%ROWTYPE;
      CSBDATEFORMAT CONSTANT VARCHAR2( 20 ) := 'DD/MM/YYYY';
      NUIDX NUMBER;
      CNUHOURS CONSTANT NUMBER := 0.999991574;
      CNUIDEXECUTABLE_ICCIF GE_PROCESS_SCHEDULE.EXECUTABLE_ID%TYPE;
      CSBIDEXECUTABLE_ICCIF SA_EXECUTABLE.NAME%TYPE := 'ICCIF';
      PROCEDURE GETCONNECTIONSTRING( OSBCONNECTION OUT NOCOPY VARCHAR2 )
       IS
         SBUSERBD VARCHAR2( 100 );
         SBPASSWORDBD VARCHAR2( 100 );
         SBINSTANCEBD VARCHAR2( 100 );
         SBSEPARATOR VARCHAR2( 1 ) := '/';
         SBARROBAS VARCHAR2( 1 ) := '@';
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.GetConnectionString' );
         GE_BODATABASECONNECTION.GETCONNECTIONSTRING( SBUSERBD, SBPASSWORDBD, SBINSTANCEBD );
         OSBCONNECTION := SBUSERBD || SBSEPARATOR || SBPASSWORDBD || SBARROBAS || SBINSTANCEBD;
         OSBCONNECTION := BI_BOSERVICIOSDOTNET.FSBCODIFICARCONTRASENA( OSBCONNECTION );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      FUNCTION FSBCREATEWHATFRRO( INUSCHEDULEPROCESS IN GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE, IDTPROCESSDATE IN IC_PROGDIPI.PRDPFECH%TYPE )
       RETURN VARCHAR2
       IS
         SBWHAT GE_PROCESS_SCHEDULE.WHAT%TYPE;
         CSBDATEFORMATFRRO CONSTANT VARCHAR2( 20 ) := 'YYYYMMDD';
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.fsbCreateWhatFRRO' );
         SBWHAT := 'BEGIN' || CHR( 10 ) || CHR( 10 ) || CHR( 9 ) || 'SetSystemEnviroment;' || CHR( 10 ) || CHR( 9 ) || 'GE_BOSchedule.SetSessionData(''' || GE_BOSCHEDULE.GETSESSIONDATA || ''');' || CHR( 10 ) || CHR( 9 ) || 'Errors.Initialize;' || CHR( 10 ) || CHR( 9 ) || 'GE_BOSchedule.InstanceSchedule( ' || INUSCHEDULEPROCESS || ' );' || CHR( 10 ) || CHR( 9 ) || 'FA_UIPROCRECFRRO.GENERARESUMEN' || '( ''' || TO_CHAR( IDTPROCESSDATE, CSBDATEFORMATFRRO ) || ''',''' || TO_CHAR( IDTPROCESSDATE, CSBDATEFORMATFRRO ) || ''',' || '''Y'' );' || CHR( 10 ) || CHR( 9 ) || 'if( DAGE_Process_Schedule.fsbGetFrequency( ' || INUSCHEDULEPROCESS || ' ) in ( GE_BOSchedule.csbSoloUnaVez, GE_BOSchedule.csbSoloUnaVezDH ) ) then' || CHR( 10 ) || CHR( 9 ) || CHR( 9 ) || 'GE_BOSchedule.InactiveSchedule( ' || INUSCHEDULEPROCESS || ' );' || CHR( 10 ) || CHR( 9 ) || 'end if; ' || CHR( 10 ) || CHR( 10 ) || 'EXCEPTION' || CHR( 10 ) || CHR( 10 ) || CHR( 9 ) || 'when OTHERS then' || CHR( 10 ) || CHR( 9 ) || CHR( 9 ) || 'Errors.SetError;' || CHR( 10 ) || CHR( 9 ) || CHR( 9 ) || 'if( DAGE_Process_Schedule.fsbGetFrequency( ' || INUSCHEDULEPROCESS || ' ) in ( GE_BOSchedule.csbSoloUnaVez, GE_BOSchedule.csbSoloUnaVezDH ) ) then' || CHR( 10 ) || CHR( 9 ) || CHR( 9 ) || CHR( 9 ) || 'GE_BOSchedule.DropSchedule( ' || INUSCHEDULEPROCESS || ' );' || CHR( 10 ) || CHR( 9 ) || CHR( 9 ) || 'end if; ' || CHR( 10 ) || CHR( 10 ) || 'END;';
         PKERRORS.POP;
         RETURN SBWHAT;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END FSBCREATEWHATFRRO;
      PROCEDURE CREATESCHEDULE( INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE, ISBPARAMETERS IN GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE, IDTEXECUTEDATE IN IC_PROGDIPI.PRDPFECH%TYPE, ONUSCHEDULEID OUT GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE )
       IS
         SBPARAMETERS GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE;
         SBWHAT GE_PROCESS_SCHEDULE.WHAT%TYPE;
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.CreateSchedule' );
         CNUIDEXECUTABLE_ICCIF := IC_BCFINANCIALCONSOLE.FNUGETEXECUTABLEID( CSBIDEXECUTABLE_ICCIF );
         IF ( INUEXECUTABLEID = CNUIDEXECUTABLE_FRRO ) THEN
            GE_BOSCHEDULE.PREPAREGENERICSCHEDULE( CNUIDEXECUTABLE_ICCIF, ISBPARAMETERS, ONUSCHEDULEID );
            SBWHAT := FSBCREATEWHATFRRO( ONUSCHEDULEID, DTPROCESSDATE );
            DAGE_PROCESS_SCHEDULE.UPDWHAT( ONUSCHEDULEID, SBWHAT );
          ELSE
            SBPARAMETERS := ISBPARAMETERS || 'CONEX=' || SBCONNECTION || CSBPIPE;
            GE_BOSCHEDULE.PREPAREGENERICSCHEDULE( INUEXECUTABLEID, SBPARAMETERS, ONUSCHEDULEID );
            DAGE_PROCESS_SCHEDULE.UPDEXECUTABLE_ID( ONUSCHEDULEID, CNUIDEXECUTABLE_ICCIF );
         END IF;
         GE_BOSCHEDULE.SCHEDULEPROCESS( ONUSCHEDULEID, GE_BOSCHEDULE.CSBSOLOUNAVEZ, IDTEXECUTEDATE );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE CONCATPARAMPGHE( INUDOCUMENTTYPE IN IC_TIPODOCO.TIDCCODI%TYPE, OSBPARAMETERS OUT NOCOPY GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE )
       IS
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.ConcatParamPGHE' );
         OSBPARAMETERS := CSBPIPE || 'TIDCCODI=' || INUDOCUMENTTYPE || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'OPERATION_MODE_ID=1' || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'DOGEFEMO=' || TO_CHAR( DTPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'DOGEFEGE=' || TO_CHAR( DTPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'DPINIDPA=' || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'DOGEDETA=' || CSBPIPE;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE CONCATPARAMPGRC( INUVOUCHER IN IC_COMPCONT.COCOCODI%TYPE, INUVOUCHERTYPE IN IC_COMPCONT.COCOTCCO%TYPE, OSBPARAMETERS OUT NOCOPY GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE )
       IS
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.ConcatParamPGRC' );
         OSBPARAMETERS := CSBPIPE || 'TICOCODI=' || INUVOUCHERTYPE || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'COCOCODI=' || INUVOUCHER || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'COGEFEIN=' || TO_CHAR( DTPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'OPERATION_MODE_ID=1' || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'COGEFEFI=' || TO_CHAR( DTPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'DPINIDPA=' || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'COGEOBSE=' || CSBPIPE;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE CONCATPARAMICBPCC( INUVOUCHER IN IC_COMPCONT.COCOCODI%TYPE, INUVOUCHERTYPE IN IC_COMPCONT.COCOTCCO%TYPE, ISBROUTE IN PARAMETR.PAMECHAR%TYPE, OSBPARAMETERS OUT NOCOPY GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE )
       IS
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.ConcatParamICBPCC' );
         OSBPARAMETERS := CSBPIPE || 'COCPARCH=' || 'ICBPCC_' || INUVOUCHER || '_' || TO_CHAR( DTPROCESSDATE, 'YYYYMMDD' ) || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'HIREARLO=' || ISBROUTE || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'COCOCODI=' || INUVOUCHER || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'TICOCODI=' || INUVOUCHERTYPE || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'OPERATION_MODE_ID=1' || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'COGEFEIN=' || TO_CHAR( DTPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'COGEFEFI=' || TO_CHAR( DTPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'DPINIDPA=' || CSBPIPE;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE CONCATPARAMICBGIC( OSBPARAMETERS OUT NOCOPY GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE )
       IS
         CSBOPERATION_MODE_ID CONSTANT VARCHAR2( 100 ) := 'OPERATION_MODE_ID';
         CSBCACCFEGE CONSTANT VARCHAR2( 100 ) := 'CACCFEGE';
         CSBDPINIDPA CONSTANT VARCHAR2( 100 ) := 'DPINIDPA';
         CSBEQUAL CONSTANT VARCHAR2( 1 ) := '=';
         CSBONE CONSTANT VARCHAR2( 1 ) := '1';
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.ConcatParamICBGIC' );
         OSBPARAMETERS := CSBPIPE || CSBOPERATION_MODE_ID || CSBEQUAL || CSBONE || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || CSBCACCFEGE || CSBEQUAL || TO_CHAR( DTPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || CSBDPINIDPA || CSBEQUAL || CSBPIPE;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE CONCATPARAMPPCA( OSBPARAMETERS OUT NOCOPY GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE )
       IS
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.ConcatParamPPCA' );
         OSBPARAMETERS := CSBPIPE || 'OPERATION_MODE_ID=1' || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'CAPRFEGE=' || TO_CHAR( DTPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE CONCATPARAMFPHE( OSBPARAMETERS OUT NOCOPY GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE )
       IS
         DTTMPPROCESSDATE IC_PROGDIPI.PRDPFECH%TYPE := NULL;
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.ConcatParamFPHE' );
         IF ( IC_BOPROCESSPROVISION.FSBPASTMONTHPROV = PKCONSTANTE.NO ) THEN
            DTTMPPROCESSDATE := DTPROCESSDATE;
         END IF;
         OSBPARAMETERS := CSBPIPE || 'OPERATION_MODE_ID=1' || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'CAPRFEGE=' || TO_CHAR( DTTMPPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE CONCATPARAMICBPPA( OSBPARAMETERS OUT NOCOPY GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE )
       IS
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.ConcatParamICBPPA' );
         OSBPARAMETERS := CSBPIPE || 'OPERATION_MODE_ID=1' || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'DOGEFEMO=' || TO_CHAR( DTPROCESSDATE, CSBDATEFORMAT ) || CSBPIPE;
         OSBPARAMETERS := OSBPARAMETERS || 'DPINIDPA=' || CSBPIPE;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE SCHEDULEPGRC( INUDOCUMENTTYPE IN IC_CONFRECO.CORCTIDO%TYPE, INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE )
       IS
         TBVOUCHER IC_BCFINANCIALCONSOLE.TYTBVOUCHER;
         SBPARAMETERS GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE;
         NUSCHEDULEID GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE;
         NUINDEX NUMBER;
         SBSCHEDULEID IC_PROGDIPI.PRDPPRPR%TYPE;
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.SchedulePGRC' );
         IF ( TBVOUCHER.FIRST IS NOT NULL ) THEN
            TBVOUCHER.DELETE;
         END IF;
         IC_BCFINANCIALCONSOLE.GETACCOUNTINGVOUCHER( INUDOCUMENTTYPE, TBVOUCHER );
         NUINDEX := TBVOUCHER.FIRST;
         IF ( NUINDEX IS NOT NULL ) THEN
            LOOP
               EXIT WHEN NUINDEX IS NULL;
               SBPARAMETERS := NULL;
               CONCATPARAMPGRC( TBVOUCHER( NUINDEX ).VOUCHER, TBVOUCHER( NUINDEX ).VOUCHERTYPE, SBPARAMETERS );
               TD( 'sbParameters ' || SBPARAMETERS );
               CREATESCHEDULE( INUEXECUTABLEID, SBPARAMETERS, RCPROGDIPI.PRDPFECH, NUSCHEDULEID );
               NUINDEX := TBVOUCHER.NEXT( NUINDEX );
               IF ( SBSCHEDULEID IS NULL ) THEN
                  SBSCHEDULEID := NUSCHEDULEID;
                ELSE
                  SBSCHEDULEID := SBSCHEDULEID || CSBSEPARATOR || NUSCHEDULEID;
               END IF;
            END LOOP;
          ELSE
            CONCATPARAMPGRC( PKCONSTANTE.NULLNUM, PKCONSTANTE.NULLNUM, SBPARAMETERS );
            TD( 'sbParameters ' || SBPARAMETERS );
            CREATESCHEDULE( INUEXECUTABLEID, SBPARAMETERS, RCPROGDIPI.PRDPFECH, NUSCHEDULEID );
            SBSCHEDULEID := NUSCHEDULEID;
         END IF;
         RCPROGDIPI.PRDPPRPR := SBSCHEDULEID;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE SCHEDULEICBPCC( INUDOCUMENTTYPE IN IC_CONFRECO.CORCTIDO%TYPE, INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE )
       IS
         TBVOUCHER IC_BCFINANCIALCONSOLE.TYTBVOUCHER;
         SBPARAMETERS GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE;
         NUSCHEDULEID GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE;
         NUINDEX NUMBER;
         SBSCHEDULEID IC_PROGDIPI.PRDPPRPR%TYPE;
         SBROUTE PARAMETR.PAMECHAR%TYPE;
         CSBPUBLIC_DIR_ACCOUNT CONSTANT PARAMETR.PAMECODI%TYPE := 'PUBLIC_DIR_ACCOUNT';
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.ScheduleICBPCC' );
         IF ( TBVOUCHER.FIRST IS NOT NULL ) THEN
            TBVOUCHER.DELETE;
         END IF;
         IC_BCFINANCIALCONSOLE.GETACCOUNTINGVOUCHER( INUDOCUMENTTYPE, TBVOUCHER );
         SBROUTE := PKGENERALPARAMETERSMGR.FSBGETSTRINGVALUE( CSBPUBLIC_DIR_ACCOUNT );
         NUINDEX := TBVOUCHER.FIRST;
         IF ( NUINDEX IS NOT NULL ) THEN
            LOOP
               EXIT WHEN NUINDEX IS NULL;
               SBPARAMETERS := NULL;
               CONCATPARAMICBPCC( TBVOUCHER( NUINDEX ).VOUCHER, TBVOUCHER( NUINDEX ).VOUCHERTYPE, SBROUTE, SBPARAMETERS );
               TD( 'sbParameters ' || SBPARAMETERS );
               CREATESCHEDULE( INUEXECUTABLEID, SBPARAMETERS, RCPROGDIPI.PRDPFECH, NUSCHEDULEID );
               NUINDEX := TBVOUCHER.NEXT( NUINDEX );
               IF ( SBSCHEDULEID IS NULL ) THEN
                  SBSCHEDULEID := NUSCHEDULEID;
                ELSE
                  SBSCHEDULEID := SBSCHEDULEID || CSBSEPARATOR || NUSCHEDULEID;
               END IF;
            END LOOP;
          ELSE
            CONCATPARAMICBPCC( PKCONSTANTE.NULLNUM, PKCONSTANTE.NULLNUM, SBROUTE, SBPARAMETERS );
            TD( 'sbParameters ' || SBPARAMETERS );
            CREATESCHEDULE( INUEXECUTABLEID, SBPARAMETERS, RCPROGDIPI.PRDPFECH, NUSCHEDULEID );
            SBSCHEDULEID := NUSCHEDULEID;
         END IF;
         RCPROGDIPI.PRDPPRPR := SBSCHEDULEID;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE EX.CONTROLLED_ERROR;
         WHEN OTHERS THEN
            PKERRORS.POP;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END;
      PROCEDURE SCHEDULE
       IS
         SBPARAMETERS GE_PROCESS_SCHEDULE.PARAMETERS_%TYPE;
         NUPROCESS NUMBER;
         NUSCHEDULEID GE_PROCESS_SCHEDULE.PROCESS_SCHEDULE_ID%TYPE;
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ScheduleProcess.Schedule' );
         NUPROCESS := RCPROGDIPI.PRDPPROC;
         SBPARAMETERS := NULL;
         IF ( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID = IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGHE ) THEN
            CONCATPARAMPGHE( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).DOCUMENTTYPE, SBPARAMETERS );
         END IF;
         IF ( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID = IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PGRC ) THEN
            SCHEDULEPGRC( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).DOCUMENTTYPE, IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID );
         END IF;
         IF ( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID = IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBPCC ) THEN
            SCHEDULEICBPCC( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).DOCUMENTTYPE, IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID );
         END IF;
         IF ( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID = IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBGIC ) THEN
            CONCATPARAMICBGIC( SBPARAMETERS );
         END IF;
         IF ( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID = IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_FPHE ) THEN
            CONCATPARAMFPHE( SBPARAMETERS );
         END IF;
         IF ( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID = IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_PPCA ) THEN
            CONCATPARAMPPCA( SBPARAMETERS );
         END IF;
         IF ( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID = IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_ICBPPA ) THEN
            CONCATPARAMICBPPA( SBPARAMETERS );
         END IF;
         IF ( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID = IC_BOFINANCIALCONSOLE.CNUIDEXECUTABLE_FRRO ) THEN
            SBPARAMETERS := SBPARAMETERS || 'CONEX=' || SBCONNECTION || CSBPIPE;
         END IF;
         TD( 'sbParameters ' || SBPARAMETERS );
         IF ( RCPROGDIPI.PRDPPRPR IS NULL ) THEN
            IF ( SBPARAMETERS IS NULL ) THEN
               IC_BOPROCFINANCONSOLE.SCHEDULEPROCESS( DTPROCESSDATE, NUPROCESS, IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID, SBPARAMETERS );
               TD( 'sbParameters ' || SBPARAMETERS );
            END IF;
            CREATESCHEDULE( IC_BOFINANCIALCONSOLE.TBPROCESS( NUPROCESS ).EXECUTABLE_ID, SBPARAMETERS, RCPROGDIPI.PRDPFECH, NUSCHEDULEID );
            RCPROGDIPI.PRDPPRPR := NUSCHEDULEID;
         END IF;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END SCHEDULE;
    BEGIN
      PKERRORS.PUSH( 'IC_BOFinancialConsole.Scheduleprocess' );
      IF ( TBPROGDIPI.PRDPCONS.FIRST IS NOT NULL ) THEN
         TBPROGDIPI.PRDPCONS.DELETE;
         TBPROGDIPI.PRDPPROC.DELETE;
         TBPROGDIPI.PRDPFECH.DELETE;
         TBPROGDIPI.PRDPPRPR.DELETE;
      END IF;
      DTPROCESSDATE := TRUNC( SYSDATE );
      DTFINISHDATE := DTPROCESSDATE + CNUHOURS;
      IC_BCPROGDIPI.GETSCHEDULEPROCESS( DTPROCESSDATE, DTFINISHDATE, TBPROGDIPI );
      DTPROCESSDATE := DTPROCESSDATE - 1;
      SETPROCESS;
      GETCONNECTIONSTRING( SBCONNECTION );
      NUIDX := TBPROGDIPI.PRDPCONS.FIRST;
      LOOP
         EXIT WHEN NUIDX IS NULL;
         RCPROGDIPI.PRDPCONS := TBPROGDIPI.PRDPCONS( NUIDX );
         RCPROGDIPI.PRDPPROC := TBPROGDIPI.PRDPPROC( NUIDX );
         RCPROGDIPI.PRDPFECH := TBPROGDIPI.PRDPFECH( NUIDX );
         RCPROGDIPI.PRDPPRPR := TBPROGDIPI.PRDPPRPR( NUIDX );
         SCHEDULE;
         PKTBLIC_PROGDIPI.UPRECORD( RCPROGDIPI );
         NUIDX := TBPROGDIPI.PRDPCONS.NEXT( NUIDX );
      END LOOP;
      PKGENERALSERVICES.COMMITTRANSACTION;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END SCHEDULEPROCESS;
   PROCEDURE PROCESSFINANCIALCONSOLEXML( INUYEAR IN NUMBER, INUMONTH IN NUMBER, ICLXML IN CLOB, ORFCONSOLE OUT PKCONSTANTE.TYREFCURSOR )
    IS
      PARSER XMLPARSER.PARSER;
      DMDOCUMENTO XMLDOM.DOMDOCUMENT;
      NDNODOPRIN XMLDOM.DOMNODE;
      SBNOMBNOPR VARCHAR2( 32000 );
      CSBCONSOLELIST CONSTANT VARCHAR2( 300 ) := 'ArrayOfScheduleProcess';
      PROCEDURE PROCESSPROGRAM( INDNODO IN XMLDOM.DOMNODE )
       IS
         NDNODOHIJO XMLDOM.DOMNODE;
         SBNOMBNODO VARCHAR2( 100 );
         NUNODOVALOR XMLDOM.DOMNODE;
         SBVALONODO VARCHAR2( 2000 );
         RCIC_PROGDIPI IC_PROGDIPI%ROWTYPE;
         CSBEXECDATE CONSTANT VARCHAR2( 20 ) := 'Time';
         CSBID CONSTANT VARCHAR2( 20 ) := 'Id';
         CSBPROCESS CONSTANT VARCHAR2( 20 ) := 'Process';
         CSBPROGRAM CONSTANT VARCHAR2( 20 ) := 'ProgrammingCode';
         CSBSTATE CONSTANT VARCHAR2( 20 ) := 'State';
         CNUERROR CONSTANT NUMBER := 901338;
         SBSTATE VARCHAR2( 2 );
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ProcessFinancialConsoleXML.ProcessProgram' );
         UT_TRACE.TRACE( 'INICIO [IC_BOFinancialConsole.ProcessFinancialConsoleXML.ProcessProgram]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
         NDNODOHIJO := XMLDOM.GETFIRSTCHILD( INDNODO );
         WHILE NDNODOHIJO.ID != -1
          LOOP
            SBNOMBNODO := XMLDOM.GETNODENAME( NDNODOHIJO );
            NUNODOVALOR := XMLDOM.GETFIRSTCHILD( NDNODOHIJO );
            IF NUNODOVALOR.ID != -1 AND NUNODOVALOR.ID IS NOT NULL THEN
               SBVALONODO := XMLDOM.GETNODEVALUE( NUNODOVALOR );
               CASE SBNOMBNODO
                  WHEN CSBEXECDATE THEN
                     RCIC_PROGDIPI.PRDPFECH := TO_DATE( SBVALONODO, IC_BOFINANCIALCONSOLE.CSBDATE_FORMAT );
                  WHEN CSBID THEN
                     RCIC_PROGDIPI.PRDPCONS := TO_NUMBER( SBVALONODO );
                  WHEN CSBPROCESS THEN
                     RCIC_PROGDIPI.PRDPPROC := TO_NUMBER( SBVALONODO );
                  WHEN CSBPROGRAM THEN
                     RCIC_PROGDIPI.PRDPPRPR := TO_NUMBER( SBVALONODO );
                  WHEN CSBSTATE THEN
                     SBSTATE := SBVALONODO;
                  ELSE
                     NULL;
               END CASE;
            END IF;
            NDNODOHIJO := XMLDOM.GETNEXTSIBLING( NDNODOHIJO );
         END LOOP;
         CASE SBSTATE
            WHEN IC_BOFINANCIALCONSOLE.CSBNEWSTATE THEN
               IF RCIC_PROGDIPI.PRDPFECH < SYSDATE THEN
                  GE_BOERRORS.SETERRORCODEARGUMENT( CNUERROR, TO_CHAR( RCIC_PROGDIPI.PRDPFECH ) );
                ELSE
                  RCIC_PROGDIPI.PRDPCONS := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL( IC_BOFINANCIALCONSOLE.CSBSQPROGDIPI );
                  PKTBLIC_PROGDIPI.INSRECORD( RCIC_PROGDIPI );
               END IF;
            WHEN IC_BOFINANCIALCONSOLE.CSBDELSTATE THEN
               PKTBLIC_PROGDIPI.DELRECORD( RCIC_PROGDIPI.PRDPCONS );
            ELSE
               NULL;
         END CASE;
         UT_TRACE.TRACE( 'FIN [IC_BOFinancialConsole.ProcessFinancialConsoleXML.ProcessProgram]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END PROCESSPROGRAM;
      PROCEDURE PROCESSCONSOLE( INDNODO IN XMLDOM.DOMNODE )
       IS
         NDNODOHIJO XMLDOM.DOMNODE;
         SBNOMBNODO VARCHAR2( 100 );
         CSBCONSOLE CONSTANT VARCHAR2( 20 ) := 'ScheduleProcess';
       BEGIN
         PKERRORS.PUSH( 'IC_BOFinancialConsole.ProcessFinancialConsoleXML.ProcessConsole' );
         UT_TRACE.TRACE( 'INICIO [IC_BOFinancialConsole.ProcessFinancialConsoleXML.ProcessConsole]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
         NDNODOHIJO := XMLDOM.GETFIRSTCHILD( INDNODO );
         WHILE NDNODOHIJO.ID != -1
          LOOP
            SBNOMBNODO := XMLDOM.GETNODENAME( NDNODOHIJO );
            CASE SBNOMBNODO
               WHEN CSBCONSOLE THEN
                  PROCESSPROGRAM( NDNODOHIJO );
               ELSE
                  NULL;
            END CASE;
            NDNODOHIJO := XMLDOM.GETNEXTSIBLING( NDNODOHIJO );
         END LOOP;
         UT_TRACE.TRACE( 'FIN [IC_BOFinancialConsole.ProcessFinancialConsoleXML.ProcessConsole]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END PROCESSCONSOLE;
    BEGIN
      PKERRORS.PUSH( 'IC_BOFinancialConsole.ProcessFinancialConsoleXML' );
      UT_TRACE.TRACE( 'INICIO [IC_BOFinancialConsole.ProcessFinancialConsoleXML]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
      PARSER := XMLPARSER.NEWPARSER;
      XMLPARSER.PARSECLOB( PARSER, ICLXML );
      DMDOCUMENTO := XMLPARSER.GETDOCUMENT( PARSER );
      XMLPARSER.FREEPARSER( PARSER );
      NDNODOPRIN.ID := DMDOCUMENTO.ID;
      NDNODOPRIN := XMLDOM.GETFIRSTCHILD( NDNODOPRIN );
      WHILE NDNODOPRIN.ID != -1
       LOOP
         SBNOMBNOPR := XMLDOM.GETNODENAME( NDNODOPRIN );
         IF SBNOMBNOPR = CSBCONSOLELIST THEN
            PROCESSCONSOLE( NDNODOPRIN );
         END IF;
         NDNODOPRIN := XMLDOM.GETNEXTSIBLING( NDNODOPRIN );
      END LOOP;
      PKGENERALSERVICES.COMMITTRANSACTION;
      GETCONSOLEINFO( INUMONTH, INUYEAR, ORFCONSOLE );
      UT_TRACE.TRACE( 'FIN [IC_BOFinancialConsole.ProcessFinancialConsoleXML]', IC_BOFINANCIALCONSOLE.CNUTRAZA );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END PROCESSFINANCIALCONSOLEXML;
   FUNCTION FSBGETFINDATEANDADVAN( ISBSCHEDULEID IN IC_PROGDIPI.PRDPPRPR%TYPE )
    RETURN VARCHAR2
    IS
      NUIDX NUMBER;
      TBESTAPROG PKTBLESTAPROG.TYTBESTAPROG;
      DTFINISHDATE IC_PROGDIPI.PRDPFECH%TYPE;
      SBFINISHDATE VARCHAR2( 1 );
      NUTOTALPORC NUMBER := 0;
      NUSUMPORC NUMBER := 0;
    BEGIN
      PKERRORS.PUSH( 'IC_BOFinancialConsole.fsbGetFinDateAndAdvan' );
      UT_TRACE.TRACE( 'Proceso Programado ' || ISBSCHEDULEID, 10 );
      IF ( ISBSCHEDULEID IS NULL ) THEN
         PKERRORS.POP;
         RETURN NULL;
      END IF;
      FA_BCESTAPROG.GETPROCESSBYIDPR( ISBSCHEDULEID, TBESTAPROG );
      IF ( TBESTAPROG.ESPRPROG.FIRST IS NULL ) THEN
         PKERRORS.POP;
         RETURN NULL;
      END IF;
      NUIDX := TBESTAPROG.ESPRPROG.FIRST;
      SBFINISHDATE := PKCONSTANTE.SI;
      DTFINISHDATE := TBESTAPROG.ESPRFEFI( NUIDX );
      LOOP
         EXIT WHEN NUIDX IS NULL;
         UT_TRACE.TRACE( 'Fecha Final ' || TBESTAPROG.ESPRFEFI( NUIDX ), 10 );
         IF ( TBESTAPROG.ESPRFEFI( NUIDX ) IS NULL ) THEN
            SBFINISHDATE := PKCONSTANTE.NO;
          ELSE
            IF ( TBESTAPROG.ESPRFEFI( NUIDX ) > DTFINISHDATE ) THEN
               DTFINISHDATE := TBESTAPROG.ESPRFEFI( NUIDX );
            END IF;
         END IF;
         NUSUMPORC := NUSUMPORC + TBESTAPROG.ESPRPORC( NUIDX );
         NUIDX := TBESTAPROG.ESPRPROG.NEXT( NUIDX );
      END LOOP;
      IF ( SBFINISHDATE = PKCONSTANTE.NO ) THEN
         DTFINISHDATE := NULL;
      END IF;
      NUTOTALPORC := NUSUMPORC / TBESTAPROG.ESPRFEFI.COUNT;
      UT_TRACE.TRACE( 'Porcentaje ' || NUTOTALPORC, 10 );
      RETURN TO_CHAR( DTFINISHDATE, IC_BOFINANCIALCONSOLE.CSBDATE_FORMAT ) || '|' || NUTOTALPORC;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FSBGETFINDATEANDADVAN;
END IC_BOFINANCIALCONSOLE;
/


