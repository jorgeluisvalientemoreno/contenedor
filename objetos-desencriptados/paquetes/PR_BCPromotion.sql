PACKAGE PR_BCPromotion AS
    






















    
    
    
    FUNCTION FSBVERSION RETURN VARCHAR2;

    



    PROCEDURE GETPROMODATESBYCOMP
    (
        INUCOMPONENT        IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        INUPROMOID          IN  PR_PROMOTION.PROMOTION_ID%TYPE,
        ODTINITDATE         OUT DATE,
        ODTFINDATE          OUT DATE
    );
    



    FUNCTION FNUVALIDATEPROMOBYCOMP
    (
        INUCOMPONENT        IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        INUPROMOID          IN  PR_PROMOTION.PROMOTION_ID%TYPE,
        IDTDATE             IN  DATE
    ) RETURN NUMBER;
    



    PROCEDURE GETVALIDPROMOBYCOMP
    (
        INUCOMPONENTID      IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    



    PROCEDURE GETPROMOTIONSBYPROD
    (
        INUPRODUCTID        IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    



    PROCEDURE GETPROMOTIONSBYCOMP
    (
        INUCOMPONENTID      IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    



    FUNCTION FNUVALIDATEPROMOBYPROD
    (
        INUPRODUCTID        IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        INUPROMOID          IN  PR_PROMOTION.ASSO_PROMOTION_ID%TYPE,
        IDTDATE             IN  DATE
    ) RETURN NUMBER;
    




    PROCEDURE GETPROMOSCOMPBETWEEN
    (
        INUPRODUCTID        IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        INUCOMPONENTID      IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        IDTMINDATE          IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        IDTMAXDATE          IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    




    PROCEDURE GETCOMPPROMOSBEFORE
    (
        INUPRODUCTID        IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        INUCOMPONENTID      IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        IDTMAXDATE          IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    




    PROCEDURE GETPRODPROMOSBETWEEN
    (
        INUPRODUCTID        IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        IDTMINDATE          IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        IDTMAXDATE          IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    




    PROCEDURE GETPRODPROMOSBEFORE
    (
        INUPRODUCTID        IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        IDTMAXDATE          IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    



    PROCEDURE GETACTIVEPROMOBYPROD
    (
        INUPRODUCTID        IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    



    PROCEDURE GETACTIVEPROMOBYCOMP
    (
        INUCOMPONENTID      IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );

    



    FUNCTION FBOVALPROMOBYCOMP
    (
        INUCOMPONENTID      IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUPROMOTIONID      IN  CC_PROMOTION.PROMOTION_ID%TYPE
    )
    RETURN BOOLEAN;

    



    PROCEDURE FTBGETPROMOSBYCOMP
    (
        INUCOMPONENTID      IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUPROMOTIONID      IN  CC_PROMOTION.PROMOTION_ID%TYPE,
        OTBCOMPONENTPROMOS  OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );

    




    FUNCTION FNUGETCURRENTMONTH
    (
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPROMOTIONID      IN  CC_PROMOTION.PROMOTION_ID%TYPE,
        IDTINIDATE          IN  CC_PROMOTION.INIT_OFFER_DATE%TYPE,
        IDTENDDATA          IN  CC_PROMOTION.FINAL_OFFER_DATE%TYPE
    )
    RETURN NUMBER;

    



    FUNCTION FNUGETTOTALMONTHS
    (
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPROMOTIONID      IN  CC_PROMOTION.PROMOTION_ID%TYPE,
        IDTINIDATE          IN  CC_PROMOTION.INIT_OFFER_DATE%TYPE,
        IDTENDDATA          IN  CC_PROMOTION.FINAL_OFFER_DATE%TYPE
    )
    RETURN NUMBER;

    




    FUNCTION FBOACTPROMBYPRODCONC
    (
        INUCONCEPT     CC_PROM_DETAIL.CONCEPT_ID%TYPE,
        INUPRODUCT     PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN BOOLEAN;

    





    FUNCTION FTBGETACTPROMBYPRDDT
    (
        INUPRODUCTID        IN      PR_PROMOTION.PRODUCT_ID%TYPE,
        IDTCRITERIA         IN      DATE
    )
    RETURN DAPR_PROMOTION.TYTBPR_PROMOTION;
    
    




    PROCEDURE GETPROMOSTORETBYPROD
    (
        INUPRODUCTID        IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        IDTDATE             IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    
    




    PROCEDURE GETPROMOSTORETBYCOMP
    (
        INUCOMPONENTID      IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        IDTDATE             IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    );
    

END PR_BCPROMOTION;

PACKAGE BODY PR_BCPromotion AS

    
    
    
    
    CSBVERSION          CONSTANT VARCHAR2(250) := 'SAO414923';

    
    
    


    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

    




















    PROCEDURE GETPROMODATESBYCOMP
    (
        INUCOMPONENT       IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        INUPROMOID         IN  PR_PROMOTION.PROMOTION_ID%TYPE,
        ODTINITDATE        OUT DATE,
        ODTFINDATE         OUT DATE
    )
    IS
        
        CURSOR CUPROMOTION
        IS
            SELECT INITIAL_DATE, FINAL_DATE
              FROM PR_PROMOTION
                   /*+ PR_BCPromotion.GetPromoDatesByComp */
             WHERE COMPONENT_ID = INUCOMPONENT
               AND ASSO_PROMOTION_ID = INUPROMOID;
    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.GetPromoDatesByComp', 10);

        
        IF ( CUPROMOTION%ISOPEN ) THEN
            CLOSE CUPROMOTION;
        END IF;

        OPEN CUPROMOTION;
        FETCH CUPROMOTION INTO ODTINITDATE, ODTFINDATE;
        CLOSE CUPROMOTION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTION%ISOPEN ) THEN
                CLOSE CUPROMOTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTION%ISOPEN ) THEN
                CLOSE CUPROMOTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPROMODATESBYCOMP;

    



















    FUNCTION FNUVALIDATEPROMOBYCOMP
    (
        INUCOMPONENT       IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        INUPROMOID         IN  PR_PROMOTION.PROMOTION_ID%TYPE,
        IDTDATE            IN  DATE
    ) RETURN NUMBER
    IS
        
        CURSOR CUVALPROMOTION
        IS
            SELECT 1
              FROM PR_PROMOTION
                   /*+ PR_BCPromotion.ValidatePromoByComp */
             WHERE COMPONENT_ID      = INUCOMPONENT
               AND ASSO_PROMOTION_ID = INUPROMOID
               AND FINAL_DATE        > IDTDATE
               AND CANCELLATION_DATE IS NULL;

        NUVALIDATE  NUMBER := 0;
    BEGIN

        UT_TRACE.TRACE('PR_BCPromotion.ValidatePromoByComp', 10);

        
        IF ( CUVALPROMOTION%ISOPEN ) THEN
            CLOSE CUVALPROMOTION;
        END IF;

        OPEN CUVALPROMOTION;
        FETCH CUVALPROMOTION INTO NUVALIDATE;
        CLOSE CUVALPROMOTION;

        RETURN NUVALIDATE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUVALPROMOTION%ISOPEN ) THEN
                CLOSE CUVALPROMOTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUVALPROMOTION%ISOPEN ) THEN
                CLOSE CUVALPROMOTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUVALIDATEPROMOBYCOMP;

    

















    PROCEDURE GETVALIDPROMOBYCOMP
    (
        INUCOMPONENTID     IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        OTBPROMOTIONS      OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
        
        CURSOR CUPROMOTION
        IS
            SELECT PR_PROMOTION.*,PR_PROMOTION.ROWID
                FROM PR_PROMOTION
                     /*+ PR_BCPromotion.GetValidPromoByComp */
                WHERE
                    UT_DATE.FDTSYSDATE BETWEEN INITIAL_DATE AND FINAL_DATE
                    AND CANCELLATION_DATE IS NULL
                    AND COMPONENT_ID = INUCOMPONENTID;
    BEGIN

        UT_TRACE.TRACE('PR_BCPromotion.GetValidPromoByComp',10);

        
        IF ( CUPROMOTION%ISOPEN ) THEN
            CLOSE CUPROMOTION;
        END IF;

        OPEN CUPROMOTION;
        FETCH CUPROMOTION BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTION%ISOPEN ) THEN
                CLOSE CUPROMOTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTION%ISOPEN ) THEN
                CLOSE CUPROMOTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETVALIDPROMOBYCOMP;

    

















    PROCEDURE GETPROMOTIONSBYPROD
    (
        INUPRODUCTID       IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        OTBPROMOTIONS      OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
        
        CURSOR CUPROMOTION
        IS
            SELECT PR_PROMOTION.*,PR_PROMOTION.ROWID
                FROM PR_PROMOTION
                     /*+ PR_BCPromotion.GetPromotionsByProd */
                WHERE PRODUCT_ID = INUPRODUCTID;
    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.GetPromotionsByProd');

        
        IF ( CUPROMOTION%ISOPEN ) THEN
            CLOSE CUPROMOTION;
        END IF;

        OPEN CUPROMOTION;
        FETCH CUPROMOTION BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTION%ISOPEN ) THEN
                CLOSE CUPROMOTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTION%ISOPEN ) THEN
                CLOSE CUPROMOTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPROMOTIONSBYPROD;

    

















    PROCEDURE GETPROMOTIONSBYCOMP
    (
        INUCOMPONENTID     IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        OTBPROMOTIONS      OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
        
        CURSOR CUPROMOTION
        IS
            SELECT PR_PROMOTION.*,PR_PROMOTION.ROWID
                FROM PR_PROMOTION
                     /*+ PR_BCPromotion.GetPromotionsByComp */
                WHERE COMPONENT_ID = INUCOMPONENTID;
    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.GetPromotionsByComp', 10);

        
        IF ( CUPROMOTION%ISOPEN ) THEN
            CLOSE CUPROMOTION;
        END IF;

        OPEN CUPROMOTION;
        FETCH CUPROMOTION BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTION%ISOPEN ) THEN
                CLOSE CUPROMOTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTION%ISOPEN ) THEN
                CLOSE CUPROMOTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPROMOTIONSBYCOMP;

    



















    FUNCTION FNUVALIDATEPROMOBYPROD
    (
        INUPRODUCTID   IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        INUPROMOID     IN  PR_PROMOTION.ASSO_PROMOTION_ID%TYPE,
        IDTDATE        IN  DATE
    )
    RETURN NUMBER
    IS
        
        NUVALID       NUMBER := 0;

        
        CURSOR CUVALIDPROMOTION
        IS
            SELECT 1
              FROM PR_PROMOTION
                   /*+ PR_BCPromotion.fnuValidatePromoByProd */
             WHERE PRODUCT_ID        = INUPRODUCTID
               AND ASSO_PROMOTION_ID = INUPROMOID
               AND FINAL_DATE        > IDTDATE
               AND CANCELLATION_DATE IS NULL;
    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.fnuValidatePromoByProd', 10);

        
        IF ( CUVALIDPROMOTION%ISOPEN ) THEN
            CLOSE CUVALIDPROMOTION;
        END IF;

        OPEN CUVALIDPROMOTION;
        FETCH CUVALIDPROMOTION INTO NUVALID;
        CLOSE CUVALIDPROMOTION;

        RETURN NUVALID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUVALIDPROMOTION%ISOPEN ) THEN
                CLOSE CUVALIDPROMOTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUVALIDPROMOTION%ISOPEN ) THEN
                CLOSE CUVALIDPROMOTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUVALIDATEPROMOBYPROD;

    





























    PROCEDURE GETPROMOSCOMPBETWEEN
    (
        INUPRODUCTID    IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        INUCOMPONENTID  IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        IDTMINDATE      IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        IDTMAXDATE      IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS   OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
        
        CURSOR CUPROMOTIONS
        (
            INUPRODUCTID     IN  PR_PROMOTION.PRODUCT_ID%TYPE,
            INUCOMPONENTID   IN  PR_PROMOTION.COMPONENT_ID%TYPE,
            IDTMINDATE       IN  PR_PROMOTION.INITIAL_DATE%TYPE,
            IDTMAXDATE       IN  PR_PROMOTION.INITIAL_DATE%TYPE
        )
        IS
            SELECT  PR_PROMOTION.*, PR_PROMOTION.ROWID
            FROM    PR_PROMOTION
                    /*+ PR_BCPromotion.GetPromosCompBetween */
            WHERE   PRODUCT_ID = INUPRODUCTID
            AND     INITIAL_DATE BETWEEN IDTMINDATE AND IDTMAXDATE
            AND     CANCELLATION_DATE IS NULL
            AND     COMPONENT_ID = INUCOMPONENTID;

    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.GetPromosCompBetween',6);

        
        IF ( CUPROMOTIONS%ISOPEN ) THEN
            CLOSE CUPROMOTIONS;
        END IF;

        OPEN CUPROMOTIONS (INUPRODUCTID, INUCOMPONENTID, IDTMINDATE, IDTMAXDATE);
        FETCH CUPROMOTIONS BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTIONS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPROMOSCOMPBETWEEN;

    




























    PROCEDURE GETCOMPPROMOSBEFORE
    (
        INUPRODUCTID    IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        INUCOMPONENTID  IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        IDTMAXDATE      IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS   OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS

        
        CURSOR CUPROMOTIONS
        (
            INUPRODUCTID     IN  PR_PROMOTION.PRODUCT_ID%TYPE,
            INUCOMPONENTID   IN  PR_PROMOTION.COMPONENT_ID%TYPE,
            IDTMAXDATE       IN  PR_PROMOTION.INITIAL_DATE%TYPE
        )
        IS
            SELECT  PR_PROMOTION.*, PR_PROMOTION.ROWID
            FROM    PR_PROMOTION
                    /*+ PR_BCPromotion.GetCompPromosBefore */
            WHERE   PRODUCT_ID = INUPRODUCTID
            AND     INITIAL_DATE <= IDTMAXDATE
            AND     CANCELLATION_DATE IS NULL
            AND     COMPONENT_ID = INUCOMPONENTID;

    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.GetCompPromosBefore',6);

        
        IF ( CUPROMOTIONS%ISOPEN ) THEN
            CLOSE CUPROMOTIONS;
        END IF;

        OPEN CUPROMOTIONS (INUPRODUCTID,INUCOMPONENTID, IDTMAXDATE);
        FETCH CUPROMOTIONS BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTIONS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCOMPPROMOSBEFORE;

    




























    PROCEDURE GETPRODPROMOSBETWEEN
    (
        INUPRODUCTID    IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        IDTMINDATE      IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        IDTMAXDATE      IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS   OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
        
        CURSOR CUPROMOTIONS
        (
            INUPRODUCTID    IN  PR_PROMOTION.PRODUCT_ID%TYPE,
            IDTMINDATE      IN  PR_PROMOTION.INITIAL_DATE%TYPE,
            IDTMAXDATE      IN  PR_PROMOTION.INITIAL_DATE%TYPE
        )
        IS
            SELECT  PR_PROMOTION.*, PR_PROMOTION.ROWID
            FROM    PR_PROMOTION
                    /*+ PR_BCPromotion.GetProdPromosBetween*/
            WHERE   PRODUCT_ID = INUPRODUCTID
            AND     INITIAL_DATE BETWEEN IDTMINDATE AND IDTMAXDATE
            AND     CANCELLATION_DATE IS NULL
            AND     COMPONENT_ID IS NULL;

    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.GetProdPromosBetween',6);

        
        IF ( CUPROMOTIONS%ISOPEN ) THEN
            CLOSE CUPROMOTIONS;
        END IF;

        OPEN CUPROMOTIONS (INUPRODUCTID, IDTMINDATE, IDTMAXDATE);
        FETCH CUPROMOTIONS BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTIONS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODPROMOSBETWEEN;

    




























    PROCEDURE GETPRODPROMOSBEFORE
    (
        INUPRODUCTID    IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        IDTMAXDATE      IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS   OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS

        
        CURSOR CUPROMOTIONS
        (
            INUPRODUCTID    IN  PR_PROMOTION.PRODUCT_ID%TYPE,
            IDTMAXDATE      IN  PR_PROMOTION.INITIAL_DATE%TYPE
        )
        IS
            SELECT  PR_PROMOTION.*, PR_PROMOTION.ROWID
            FROM    PR_PROMOTION
                    /*+ PR_BCPromotion.GetProdPromosBefore */
            WHERE   PRODUCT_ID = INUPRODUCTID
            AND     INITIAL_DATE <= IDTMAXDATE
            AND     CANCELLATION_DATE IS NULL
            AND     COMPONENT_ID IS NULL;


    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.GetProdPromosBefore', 7);

        
        IF ( CUPROMOTIONS%ISOPEN ) THEN
            CLOSE CUPROMOTIONS;
        END IF;

        OPEN CUPROMOTIONS (INUPRODUCTID, IDTMAXDATE);
        FETCH CUPROMOTIONS BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTIONS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODPROMOSBEFORE;

    




























    PROCEDURE GETACTIVEPROMOBYPROD
    (
        INUPRODUCTID         IN     PR_PROMOTION.PRODUCT_ID%TYPE,
        OTBPROMOTIONS        OUT    DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
        
        CURSOR CUPROMOTIONS
        IS
            SELECT PR_PROMOTION.*, PR_PROMOTION.ROWID
            FROM   PR_PROMOTION
                   /*+ PR_BCPromotion.GetActivePromoByProd */
            WHERE
                    PKGENERALSERVICES.FDTGETSYSTEMDATE
                        BETWEEN INITIAL_DATE AND FINAL_DATE AND
                    CANCELLATION_DATE IS NULL AND
                    PRODUCT_ID = INUPRODUCTID;
    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.GetActivePromoByProd', 7);

        
        IF ( CUPROMOTIONS%ISOPEN ) THEN
            CLOSE CUPROMOTIONS;
        END IF;

        OPEN CUPROMOTIONS;
        FETCH CUPROMOTIONS BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTIONS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTIVEPROMOBYPROD;

    






















    PROCEDURE GETACTIVEPROMOBYCOMP
    (
        INUCOMPONENTID  IN     PR_PROMOTION.COMPONENT_ID%TYPE,
        OTBPROMOTIONS   OUT    DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
        
        CURSOR CUPROMOTIONS
        IS
            SELECT PR_PROMOTION.*, PR_PROMOTION.ROWID
                FROM PR_PROMOTION
                     /*+ PR_BCPromotion.GetActivePromoByComp */
                WHERE
                    PKGENERALSERVICES.FDTGETSYSTEMDATE
                        BETWEEN INITIAL_DATE AND FINAL_DATE AND
                    CANCELLATION_DATE IS NULL AND
                    COMPONENT_ID = INUCOMPONENTID;
    BEGIN
        UT_TRACE.TRACE('PR_BCPromotion.GetActivePromoByComp', 7);

        
        IF ( CUPROMOTIONS%ISOPEN ) THEN
            CLOSE CUPROMOTIONS;
        END IF;

        OPEN CUPROMOTIONS;
        FETCH CUPROMOTIONS BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTIONS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTIVEPROMOBYCOMP;

    



















    FUNCTION FBOVALPROMOBYCOMP
    (
        INUCOMPONENTID  IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUPROMOTIONID  IN  CC_PROMOTION.PROMOTION_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        RCPRPROMO   DAPR_PROMOTION.STYPR_PROMOTION;

        CURSOR CUVALPROMOBYCOMP
        IS
            SELECT A.*, A.ROWID
            FROM PR_PROMOTION A
            /*+ PR_BCPromotion.fboValPromoByComp */
            WHERE COMPONENT_ID = INUCOMPONENTID
            AND ASSO_PROMOTION_ID = INUPROMOTIONID;

        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUVALPROMOBYCOMP%ISOPEN) THEN
                CLOSE CUVALPROMOBYCOMP;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLOSECURSOR;

    BEGIN
        UT_TRACE.TRACE('INICIO PR_BCPromotion.fboValPromoByComp Comp['||INUCOMPONENTID||'] Promo['||INUPROMOTIONID||']',5);

        
        CLOSECURSOR;

        
        OPEN CUVALPROMOBYCOMP;
        FETCH CUVALPROMOBYCOMP INTO RCPRPROMO;
        CLOSE CUVALPROMOBYCOMP;

        UT_TRACE.TRACE('FIN PR_BCPromotion.fboValPromoByComp - OK PromId['||RCPRPROMO.PROMOTION_ID||']',5);

        RETURN RCPRPROMO.PROMOTION_ID IS NOT NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOVALPROMOBYCOMP;

    



















    PROCEDURE FTBGETPROMOSBYCOMP
    (
        INUCOMPONENTID      IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUPROMOTIONID      IN  CC_PROMOTION.PROMOTION_ID%TYPE,
        OTBCOMPONENTPROMOS  OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
        TBCOMPPROMOS        DAPR_PROMOTION.TYTBPR_PROMOTION;

        CURSOR CUPROMOSBYCOMP
        IS
            SELECT A.*, A.ROWID
            FROM PR_PROMOTION A
            /*+ PR_BCPromotion.ftbGetPromosByComp */
            WHERE COMPONENT_ID = INUCOMPONENTID
            AND ASSO_PROMOTION_ID = INUPROMOTIONID
            ORDER BY FINAL_DATE DESC;

        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUPROMOSBYCOMP%ISOPEN) THEN
                CLOSE CUPROMOSBYCOMP;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLOSECURSOR;

    BEGIN
        UT_TRACE.TRACE('INICIO PR_BCPromotion.ftbGetPromosByComp Comp['||INUCOMPONENTID||'] Promo['||INUPROMOTIONID||']',5);

        
        CLOSECURSOR;

        
        OPEN CUPROMOSBYCOMP;
        FETCH CUPROMOSBYCOMP BULK COLLECT INTO OTBCOMPONENTPROMOS;
        CLOSE CUPROMOSBYCOMP;

        UT_TRACE.TRACE('FIN PR_BCPromotion.ftbGetPromosByComp - OK TotalPromos['||OTBCOMPONENTPROMOS.COUNT||']',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETPROMOSBYCOMP;

    





























    FUNCTION FNUGETCURRENTMONTH
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPROMOTIONID  IN  CC_PROMOTION.PROMOTION_ID%TYPE,
        IDTINIDATE      IN  CC_PROMOTION.INIT_OFFER_DATE%TYPE,
        IDTENDDATA      IN  CC_PROMOTION.FINAL_OFFER_DATE%TYPE
    )
    RETURN NUMBER
    IS
        
        RCPRODPROMO     DAPR_PROMOTION.STYPR_PROMOTION;

        
        NUCURRENTMONTH  NUMBER := 0;

        
        CURSOR CUPROMOBYPRODUCT
        IS
            SELECT A.*, A.ROWID
            FROM PR_PROMOTION A
            /*+ PR_BCPromotion.fnuGetCurrentMonth */
            WHERE PRODUCT_ID = INUPRODUCTID
            AND ASSO_PROMOTION_ID = INUPROMOTIONID
            AND FINAL_DATE >= IDTINIDATE
            AND INITIAL_DATE <= IDTENDDATA
            AND CANCELLATION_DATE IS NULL;

        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUPROMOBYPRODUCT%ISOPEN) THEN
                CLOSE CUPROMOBYPRODUCT;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLOSECURSOR;

    BEGIN
        UT_TRACE.TRACE('INICIO PR_BCPromotion.fnuGetCurrentMonth Prod['||
                        INUPRODUCTID||'] Promo['||INUPROMOTIONID||
                        '] Fecha Inicial ['||IDTINIDATE||
                        '] Fecha Final['||IDTENDDATA||']',5);

        
        CLOSECURSOR;

        
        OPEN CUPROMOBYPRODUCT;
        FETCH CUPROMOBYPRODUCT INTO RCPRODPROMO;
        CLOSE CUPROMOBYPRODUCT;

        
        IF (RCPRODPROMO.PROMOTION_ID IS NOT NULL) THEN
            
            IF (TRUNC(IDTENDDATA) = TRUNC(RCPRODPROMO.INITIAL_DATE))  THEN
                NUCURRENTMONTH := 1;
            ELSE
             
                NUCURRENTMONTH := CEIL(MONTHS_BETWEEN(IDTENDDATA, RCPRODPROMO.INITIAL_DATE));
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN PR_BCPromotion.fnuGetCurrentMonth - OK',5);

        RETURN NUCURRENTMONTH;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCURRENTMONTH;

    























    FUNCTION FNUGETTOTALMONTHS
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPROMOTIONID  IN  CC_PROMOTION.PROMOTION_ID%TYPE,
        IDTINIDATE      IN  CC_PROMOTION.INIT_OFFER_DATE%TYPE,
        IDTENDDATA      IN  CC_PROMOTION.FINAL_OFFER_DATE%TYPE
    )
    RETURN NUMBER
    IS
        
        RCPRODPROMO     DAPR_PROMOTION.STYPR_PROMOTION;

        
        NUTOTALMONTHS   NUMBER := 0;

        
        CURSOR CUPROMOBYPRODUCT
        IS
            SELECT A.*, A.ROWID
            FROM PR_PROMOTION A
            /*+ PR_BCPromotion.fnuGetTotalMonths */
            WHERE PRODUCT_ID = INUPRODUCTID
            AND ASSO_PROMOTION_ID = INUPROMOTIONID
            AND FINAL_DATE >= IDTINIDATE
            AND INITIAL_DATE <= IDTENDDATA
            AND CANCELLATION_DATE IS NULL;

        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUPROMOBYPRODUCT%ISOPEN) THEN
                CLOSE CUPROMOBYPRODUCT;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLOSECURSOR;

    BEGIN
        UT_TRACE.TRACE('INICIO PR_BCPromotion.fnuGetTotalMonthsn Prod['||INUPRODUCTID||'] Promo['||INUPROMOTIONID||']',5);

        
        CLOSECURSOR;

        
        OPEN CUPROMOBYPRODUCT;
        FETCH CUPROMOBYPRODUCT INTO RCPRODPROMO;
        CLOSE CUPROMOBYPRODUCT;

        
        IF (RCPRODPROMO.PROMOTION_ID IS NOT NULL) THEN
            
            NUTOTALMONTHS := CEIL(MONTHS_BETWEEN(RCPRODPROMO.FINAL_DATE, RCPRODPROMO.INITIAL_DATE));
        END IF;

        UT_TRACE.TRACE('FIN PR_BCPromotion.fnuGetTotalMonths - OK TotMeses['||NUTOTALMONTHS||']',5);

        RETURN NUTOTALMONTHS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETTOTALMONTHS;
    


























    FUNCTION FBOACTPROMBYPRODCONC
    (
        INUCONCEPT     CC_PROM_DETAIL.CONCEPT_ID%TYPE,
        INUPRODUCT     PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        CURSOR CUACTPROMBYPRODCONC IS
        SELECT 'X'
        FROM
            CC_PROM_DETAIL  C
            ,CC_PROMOTION   O
            ,PR_PROMOTION   P
        WHERE /*+PR_BCPromotion.fboActPromByProdConc.cuActPromByProdConc*/
              C.CONCEPT_ID          = INUCONCEPT
          AND C.PROMOTION_ID        = O.PROMOTION_ID
          AND O.PROMOTION_ID        = P.ASSO_PROMOTION_ID
          AND P.PRODUCT_ID          = INUPRODUCT
          AND P.CANCELLATION_DATE   IS NULL
          AND SYSDATE BETWEEN INITIAL_DATE AND FINAL_DATE
          AND ROWNUM                = 1;

        SBDUMMY             VARCHAR2(1);
        BOEXISTEPROMVIG     BOOLEAN := FALSE;

        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUACTPROMBYPRODCONC%ISOPEN) THEN
                CLOSE CUACTPROMBYPRODCONC;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLOSECURSOR;
    BEGIN

        UT_TRACE.TRACE('BEGIN PR_BCPromotion.fboActPromByProdConc',5);

        CLOSECURSOR;

        OPEN PR_BCPROMOTION.FBOACTPROMBYPRODCONC.CUACTPROMBYPRODCONC;
        FETCH PR_BCPROMOTION.FBOACTPROMBYPRODCONC.CUACTPROMBYPRODCONC INTO SBDUMMY;
        CLOSECURSOR;

        IF (SBDUMMY IS NOT NULL) THEN
            BOEXISTEPROMVIG := TRUE;
        END IF;

        UT_TRACE.TRACE('END PR_BCPromotion.fboActPromByProdConc',5);
        RETURN BOEXISTEPROMVIG;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOACTPROMBYPRODCONC;

    




















    FUNCTION FTBGETACTPROMBYPRDDT
    (
        INUPRODUCTID        IN      PR_PROMOTION.PRODUCT_ID%TYPE,
        IDTCRITERIA         IN      DATE
    )
    RETURN DAPR_PROMOTION.TYTBPR_PROMOTION
    IS
        TBACTIVEPROMOS          DAPR_PROMOTION.TYTBPR_PROMOTION;

        CURSOR CUACTIVEPROMBYPRDDT
        IS
        SELECT /*+ INDEX (p IDX_PR_PROMOTION01)*/
                P.*,P.ROWID
        FROM PR_PROMOTION P
            /*+PR_BCPromotion.ftbGetActPromByPrdDt*/
        WHERE CANCELLATION_DATE IS NULL
        AND PRODUCT_ID = INUPRODUCTID
        AND (INITIAL_DATE >= IDTCRITERIA
        OR  FINAL_DATE >= IDTCRITERIA);

        PROCEDURE CLOSECURSOR
        IS
        BEGIN
            IF (CUACTIVEPROMBYPRDDT%ISOPEN)THEN
                CLOSE CUACTIVEPROMBYPRDDT;
            END IF;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLOSECURSOR;

    BEGIN
        UT_TRACE.TRACE('BEGIN PR_BCPromotion.ftbGetActPromByPrdDt',5);
        CLOSECURSOR;
        OPEN CUACTIVEPROMBYPRDDT;
        FETCH CUACTIVEPROMBYPRDDT BULK COLLECT INTO TBACTIVEPROMOS;
        CLOSECURSOR;

        RETURN TBACTIVEPROMOS;
        UT_TRACE.TRACE('END PR_BCPromotion.ftbGetActPromByPrdDt',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETACTPROMBYPRDDT;
    
    
    





















    PROCEDURE GETPROMOSTORETBYPROD
    (
        INUPRODUCTID        IN  PR_PROMOTION.PRODUCT_ID%TYPE,
        IDTDATE             IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
     
        CURSOR CUPROMOTIONS
        (
            INUPRODUCTID     IN  PR_PROMOTION.PRODUCT_ID%TYPE,
            IDTDATE          IN  PR_PROMOTION.FINAL_DATE%TYPE
        )
        IS
            SELECT /*+ INDEX(IDX_PR_PROMOTION01 pr_promotion)*/
            PR_PROMOTION.*, PR_PROMOTION.ROWID
            FROM    PR_PROMOTION
                    /*+ PR_BCPromotion.GetPromosToRetByProd */
            WHERE   PRODUCT_ID = INUPRODUCTID
            AND     IDTDATE < PR_PROMOTION.FINAL_DATE
            AND     INITIAL_DATE != FINAL_DATE
            AND     CANCELLATION_DATE IS NULL;

    BEGIN
        UT_TRACE.TRACE('Inicio PR_BCPromotion.GetPromosToRetByProd',6);

        
        IF ( CUPROMOTIONS%ISOPEN ) THEN
            CLOSE CUPROMOTIONS;
        END IF;

        OPEN CUPROMOTIONS (INUPRODUCTID, IDTDATE);
        FETCH CUPROMOTIONS BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTIONS;
        
        UT_TRACE.TRACE('Fin PR_BCPromotion.GetPromosToRetByProd',6);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPROMOSTORETBYPROD;
    
    
    





















    PROCEDURE GETPROMOSTORETBYCOMP
    (
        INUCOMPONENTID      IN  PR_PROMOTION.COMPONENT_ID%TYPE,
        IDTDATE             IN  PR_PROMOTION.INITIAL_DATE%TYPE,
        OTBPROMOTIONS       OUT DAPR_PROMOTION.TYTBPR_PROMOTION
    )
    IS
     
        CURSOR CUPROMOTIONS
        (
            INUCOMPONENTID   IN  PR_PROMOTION.PRODUCT_ID%TYPE,
            IDTDATE          IN  PR_PROMOTION.FINAL_DATE%TYPE
        )
        IS
            SELECT  /*+ INDEX(IDX_PR_PROMOTION02 pr_promotion)*/
            PR_PROMOTION.*, PR_PROMOTION.ROWID
            FROM    PR_PROMOTION
                    /*+ PR_BCPromotion.GetPromosToRetByComp */
            WHERE   COMPONENT_ID = INUCOMPONENTID
            AND     IDTDATE < PR_PROMOTION.FINAL_DATE
            AND     INITIAL_DATE != FINAL_DATE
            AND     CANCELLATION_DATE IS NULL;

    BEGIN
        UT_TRACE.TRACE('Inicio PR_BCPromotion.GetPromosToRetByComp',6);

        
        IF ( CUPROMOTIONS%ISOPEN ) THEN
            CLOSE CUPROMOTIONS;
        END IF;

        OPEN CUPROMOTIONS (INUCOMPONENTID, IDTDATE);
        FETCH CUPROMOTIONS BULK COLLECT INTO OTBPROMOTIONS;
        CLOSE CUPROMOTIONS;

        UT_TRACE.TRACE('Fin PR_BCPromotion.GetPromosToRetByComp',6);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROMOTIONS%ISOPEN ) THEN
                CLOSE CUPROMOTIONS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPROMOSTORETBYCOMP;
    
END PR_BCPROMOTION;