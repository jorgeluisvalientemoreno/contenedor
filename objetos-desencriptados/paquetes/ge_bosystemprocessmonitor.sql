
CREATE OR REPLACE PACKAGE BODY GE_BOSYSTEMPROCESSMONITOR IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO182746';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE GETQUEUESUSE( OCUCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      OCUCURSOR := GE_BCSYSTEMPROCESSMONITOR.FRFGETQUEUESUSE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETQUEUERECORDS( ISBQUEUETABLE IN VARCHAR2, ISBQUEUENAME IN VARCHAR2, OCUCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      OCUCURSOR := GE_BCSYSTEMPROCESSMONITOR.FRFGETQUEUERECORDS( ISBQUEUETABLE, ISBQUEUENAME );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETMESSAGELOGBYSESSION( INUEXECUTORLOGID IN GE_EXECUTOR_LOG.EXECUTOR_LOG_ID%TYPE, INUTHREADNUMBER IN GE_EXECUTOR_LOG.THREAD_NUMBER%TYPE, INUSESSIONID IN GE_EXECUTOR_LOG.SESSION_ID%TYPE, ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOEXECUTOR_LOG.GETMESSAGELOGBYSESSION( INUEXECUTORLOGID, INUTHREADNUMBER, INUSESSIONID, ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETSERVERMESSAGEBYSESSION( INUPROCESSEXECUTORID IN GE_EXEC_SERVER_MSG.PROCESS_EXECUTOR_ID%TYPE, INUTHREADNUMBER IN GE_EXEC_SERVER_MSG.THREAD_NUMBER%TYPE, INUSESSIONID IN GE_EXEC_SERVER_MSG.SESSION_ID%TYPE, ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOEXEC_SERVER_MSG.GETSERVERMESSAGEBYSESSION( INUPROCESSEXECUTORID, INUTHREADNUMBER, INUSESSIONID, ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETMONITORLOGERROR( ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOMONITOR_LOG_ERROR.GETMONITORLOGERROR( ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SENDCREATE_THREAD( INUTHREAD IN NUMBER, INUHOST IN NUMBER := NULL )
    IS
    BEGIN
      GE_BOPROCESS_SERVER.SENDCREATE_THREAD( INUTHREAD, INUHOST );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE STARTEXECUTORPROCESS( INUPROCEXECUGROUP IN GE_PROCESS_EXECUTOR.PROC_EXECU_GROUP_ID%TYPE )
    IS
    BEGIN
      GE_BOPROCESS_EXECUTOR.STARTEXECUTORPROCESS( INUPROCEXECUGROUP );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ASIGNGROUPAGAIN( INUPROCEXECUGROUP IN GE_PROCE_PRO_EXE_GRO.PROC_EXECU_GROUP_ID%TYPE )
    IS
    BEGIN
      GE_BOPROCEPROEXEGRO.ASIGNGROUPAGAIN( INUPROCEXECUGROUP );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE STOPEXECUTORPROCESS( INUPROCEXECUGROUP IN GE_PROCESS_EXECUTOR.PROC_EXECU_GROUP_ID%TYPE )
    IS
    BEGIN
      GE_BOPROCESS_EXECUTOR.STOPEXECUTORPROCESS( INUPROCEXECUGROUP );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PUT_MSG_STOP_EXIT( INUEPROCESS IN NUMBER, INUTHREAD IN NUMBER, INUSESSION IN NUMBER )
    IS
    BEGIN
      GE_BOEXEC_SERVER_MSG.PUT_MSG_STOP_EXIT( INUEPROCESS, INUTHREAD, INUSESSION );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PUT_MSG_RESET_PARAMS( INUEPROCESS IN NUMBER, INUTHREAD IN NUMBER, INUSESSION IN NUMBER )
    IS
    BEGIN
      GE_BOEXEC_SERVER_MSG.PUT_MSG_RESET_PARAMS( INUEPROCESS, INUTHREAD, INUSESSION );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PUT_MSG_SET_LEVEL_TRACE( INULEVEL IN NUMBER, INUEPROCESS IN NUMBER, INUTHREAD IN NUMBER, INUSESSION IN NUMBER )
    IS
    BEGIN
      GE_BOEXEC_SERVER_MSG.PUT_MSG_SET_LEVEL_TRACE( INULEVEL, INUEPROCESS, INUTHREAD, INUSESSION );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PUT_MSG_SET_OUTPUT_TRACE( INUOUTPUT IN NUMBER, INUEPROCESS IN NUMBER, INUTHREAD IN NUMBER, INUSESSION IN NUMBER )
    IS
    BEGIN
      GE_BOEXEC_SERVER_MSG.PUT_MSG_SET_OUTPUT_TRACE( INUOUTPUT, INUEPROCESS, INUTHREAD, INUSESSION );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PUT_MSG_USER_MESSAGE( ISBMESSAGE IN VARCHAR2, INUEPROCESS IN NUMBER, INUTHREAD IN NUMBER, INUSESSION IN NUMBER )
    IS
    BEGIN
      GE_BOEXEC_SERVER_MSG.PUT_MSG_USER_MESSAGE( ISBMESSAGE, INUEPROCESS, INUTHREAD, INUSESSION );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SENDSHUTDOWNSERVER
    IS
    BEGIN
      GE_BOPROCESS_SERVER.SENDSHUTDOWNSERVER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE STARTSERVER( ONUEXIT OUT NUMBER, OSBOUTPUT OUT VARCHAR2 )
    IS
    BEGIN
      GE_BOPROCESS_SERVER.STARTSERVER( ONUEXIT, OSBOUTPUT );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPARAMETERVALUE( ISBPARAMETERID IN GE_PARAMETER.PARAMETER_ID%TYPE, OSBVALUE OUT GE_PARAMETER.VALUE%TYPE )
    IS
    BEGIN
      OSBVALUE := DAGE_PARAMETER.FSBGETVALUE( ISBPARAMETERID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ISVALIDPROCESSTOEXECUTE( ISBEXECUTABLENAME IN VARCHAR2, ISBCLIENTVERSION IN VARCHAR2, ONUENABLED OUT NUMBER )
    IS
      NUEXECUTABLEID NUMBER;
      NUMODULE NUMBER;
      SBMODULENAME VARCHAR2( 100 );
      SBCLIENTVERSIONRETRVD VARCHAR2( 30 );
      PROCEDURE VALIDATEINPUT
       IS
       BEGIN
         SA_BOEXECUTABLE.VALIDATENAMEDATA( ISBEXECUTABLENAME );
         SA_BOEXECUTABLE.VALIDATEVERSIONDATA( ISBCLIENTVERSION );
      END;
      FUNCTION FBLVALIDATINGPROCESSTOEXECUTE
       RETURN BOOLEAN
       IS
       BEGIN
         SA_BOUSER.SETID( SA_BOSYSTEM.GETSYSTEMUSERID );
         SA_BOUSER.ISENABLEDINSUBSYSTEMFROMEXEC( ISBEXECUTABLENAME );
         SA_BOEXECUTABLE.ISVERSIONMATCHING( ISBEXECUTABLENAME, ISBCLIENTVERSION );
         SA_BOEXECUTABLE.ISEXISTSEXECUTABLEBYNAME( ISBEXECUTABLENAME, NUEXECUTABLEID, SBCLIENTVERSIONRETRVD, NUMODULE );
         SA_BOUSER.SETID( SA_BOSYSTEM.GETSYSTEMUSERID );
         SA_BOUSER.USERHASPERMARUNEXECUTABLES( NUEXECUTABLEID );
         SA_BOSYSTEM.SETSYSTEMPROCESSID( NUEXECUTABLEID );
         SA_BOSYSTEM.SETSYSTEMPROCESSNAME( ISBEXECUTABLENAME );
         SA_BOSYSTEM.SETSYSTEMPROCESSVERSION( ISBCLIENTVERSION );
         SA_BOSYSTEM.SETSYSTEMPROCESSMODULEID( NUMODULE );
         SA_BOEXECUTABLE.SETID( NUEXECUTABLEID );
         SBMODULENAME := SA_BOEXECUTABLE.GETEXECUTABLEMODULEASNAME;
         SA_BOSYSTEM.SETSYSTEMPROCESSMODULENAME( SBMODULENAME );
         RETURN TRUE;
       EXCEPTION
         WHEN OTHERS THEN
            RETURN FALSE;
      END;
    BEGIN
      VALIDATEINPUT;
      IF FBLVALIDATINGPROCESSTOEXECUTE THEN
         ONUENABLED := 1;
       ELSE
         ONUENABLED := 0;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPROCESSEXECSERVER( INUPROCESSEXECUTORID IN GE_PROC_EXEC_HOST.PROCESS_EXECUTOR_ID%TYPE, ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BCSYSTEMPROCESSMONITOR.GETPROCESSEXECSERVER( INUPROCESSEXECUTORID, ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPROCEXECMODULEGROUPINFO( ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOPROCESS_EXECUTOR.GETPROCEXECMODULEGROUPINFO( ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPROCEXECUGROUPBYMODULE( ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOPROC_EXECU_GROUP.GETPROCEXECUGROUPBYMODULE( ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPROCEXECBYMODULEINFO( ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOPROCESS_EXECUTOR.GETPROCEXECBYMODULEINFO( ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETHOST( ISBCRITERIA IN VARCHAR2, ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOHOST.GETHOST( ISBCRITERIA, ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPROCESSEXECUTOR( ISBCRITERIA IN VARCHAR2, ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOPROCESS_EXECUTOR.GETPROCESSEXECUTOR( ISBCRITERIA, ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETALLMODULE( ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      ORFREFCURSOR := GE_BOMODULE.GETALLMODULE();
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETOBJECT( ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOOBJECT.GETOBJECT( ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPROCEXECMESCON( INUPROCESSEXECUTORID IN GE_PROC_EXEC_MES_CON.PROCESS_EXECUTOR_ID%TYPE, ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOPROC_EXEC_MES_CON.GETPROCEXECMESCON( INUPROCESSEXECUTORID, ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETMESSAGE( ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOMESSAGE.GETMESSAGE( ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPROCEXECHOST( INUPROCESSEXECUTORID IN GE_PROC_EXEC_HOST.PROCESS_EXECUTOR_ID%TYPE, ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR )
    IS
    BEGIN
      GE_BOPROC_EXEC_HOST.GETPROCEXECHOST( INUPROCESSEXECUTORID, ORFREFCURSOR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CREATEPROPIERTIESFILE( ISBSTRINGCONEC IN VARCHAR2 )
    IS
      SBPATH VARCHAR2( 200 );
      SBFILENAME VARCHAR2( 100 );
      L_OUTPUT UTL_FILE.FILE_TYPE;
    BEGIN
      SBPATH := GE_BOPARAMETER.FSBGET( 'PATH_PROCESS_SERVER' );
      SBFILENAME := 'general.properties';
      L_OUTPUT := UTL_FILE.FOPEN( SBPATH, SBFILENAME, GE_BOFILEMANAGER.CSBWRITE_OPEN_FILE, 32760 );
      UT_FILE.FILEWRITE( L_OUTPUT, ISBSTRINGCONEC );
      GE_BOFILEMANAGER.FILECLOSE( L_OUTPUT );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CREATEPROPIERTIESFILE;
END GE_BOSYSTEMPROCESSMONITOR;
/


