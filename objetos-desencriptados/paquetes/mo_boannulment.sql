PACKAGE BODY MO_BOAnnulment AS

    
    
    
    
    CSBVERSION          CONSTANT VARCHAR2(250)  := 'SAO216940';

    CSBMOTIVE_INSTANCE  CONSTANT VARCHAR2(250) := MO_BOUNCOMPOSITIONCONSTANTS.CSBMOTIVE_INSTANCE;

    
    CSBRETIREACTTYPE    CONSTANT VARCHAR(1):= 'R';
    
    
    
    GNUENTITY_PACK      NUMBER := MO_BOPARAMETER.FNUGETENTITY_PACKAGES;
    GNUENTITY_MOTIVE    NUMBER := MO_BOPARAMETER.FNUGETENTITY_MOTIVE;
    GNUENTITY_COMP      NUMBER := MO_BOPARAMETER.FNUGETENTITY_COMPONENT;

   
    GNUSTATANNULCOMP    NUMBER := MO_BOSTATUSPARAMETER.FNUGETSTATUS_ANNUL_COMP;
    GNUSTATCOMPPRODEX   NUMBER := MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTE_PROD_EXI;
    GNUSTATANNULMOTIVE  NUMBER := MO_BOSTATUSPARAMETER.FNUGETSTATUS_ANNUL_MOT;

    
    
    
    
    CURSOR CUMOTIVESNOTANULL
    (
        INUPACKAGE IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        SELECT A.*, A.ROWID
        FROM   MO_MOTIVE A
        WHERE  A.PACKAGE_ID = INUPACKAGE
          AND  A.MOTIVE_STATUS_ID NOT IN
               (
                   MO_BOSTATUSPARAMETER.FNUGETSTATUS_ANNUL_MOT,
                   MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_MOT
               );

    
    CURSOR CUPACKAGESNOTANNUL
    (
        INUREQUESTID    IN      MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        SELECT A.PACKAGE_ID
          FROM MO_PACKAGES A, MO_PACKAGES_ASSO B
         WHERE A.PACKAGE_ID = B.PACKAGE_ID
           AND PACKAGE_ID_ASSO = INUREQUESTID
           AND A.MOTIVE_STATUS_ID NOT IN
               (
                   MO_BOSTATUSPARAMETER.FNUGETSTATUS_ANNUL_PACK,
                   MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK
               );

    
    
    
    




















    FUNCTION FBOINANNULPROCESS
    (
        INUMOSTATUSID   IN  PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        
        
        
        BOANSWER    BOOLEAN := FALSE;
    BEGIN

        UT_TRACE.TRACE( 'MO_BOAnnulment.fboInAnnulProcess', 16 );

        
        IF (INUMOSTATUSID IN (
                    MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_COMP,
                    MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_MOT,
                    MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_PACK,
                    MO_BOCONSTANTS.CNUSTATUS_ANNUL_PACK,
                    GNUSTATANNULMOTIVE,
                    GNUSTATANNULCOMP))
        THEN
            BOANSWER := TRUE;
        END IF;

        UT_TRACE.TRACE( 'Fin MO_BOAnnulment.fboInAnnulProcess', 16 );
        RETURN BOANSWER;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOINANNULPROCESS;

    


















    FUNCTION FBLALLREQPACKSANNULED
    (
        INUREQUESTID    IN      MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        RCPACKAGE   DAMO_PACKAGES.STYMO_PACKAGES;
        BORESULT    BOOLEAN;
    BEGIN
        
        IF (INUREQUESTID IS NULL) THEN
            RETURN GE_BOCONSTANTS.GETFALSE;
        END IF;

        
        OPEN  MO_BCANNULMENT.CUNOTANNULREQUESTPACKS( INUREQUESTID );
        FETCH MO_BCANNULMENT.CUNOTANNULREQUESTPACKS INTO RCPACKAGE;
        BORESULT := MO_BCANNULMENT.CUNOTANNULREQUESTPACKS%NOTFOUND;
        CLOSE MO_BCANNULMENT.CUNOTANNULREQUESTPACKS;

        RETURN ( BORESULT );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCANNULMENT.CUNOTANNULREQUESTPACKS%ISOPEN) THEN
                CLOSE MO_BCANNULMENT.CUNOTANNULREQUESTPACKS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (MO_BCANNULMENT.CUNOTANNULREQUESTPACKS%ISOPEN) THEN
                CLOSE MO_BCANNULMENT.CUNOTANNULREQUESTPACKS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLALLREQPACKSANNULED;

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    













    PROCEDURE LOCKEDPACKAGE
    (
        INUPACKAGEID IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        ORCPACKAGE   OUT DAMO_PACKAGES.STYMO_PACKAGES
    )
    IS
        NUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN
        
        ORCPACKAGE := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);

        
        SELECT A.PACKAGE_ID INTO NUPACKAGEID FROM MO_PACKAGES A WHERE A.PACKAGE_ID = INUPACKAGEID FOR UPDATE;

        UT_TRACE.TRACE('Bloquea FOR UPDATE el Paquete:['||INUPACKAGEID||']',4);
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END LOCKEDPACKAGE;

    













    PROCEDURE LOCKEDMOTIVE
    (
        INUMOTIVEID IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        ORCMOTIVE   OUT DAMO_MOTIVE.STYMO_MOTIVE
    )
    IS
        NUMOTIVEID  MO_MOTIVE.MOTIVE_ID%TYPE;
    BEGIN
        
        ORCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        
        SELECT A.MOTIVE_ID INTO NUMOTIVEID FROM MO_MOTIVE A WHERE A.MOTIVE_ID = INUMOTIVEID FOR UPDATE;

        UT_TRACE.TRACE('Bloquea FOR UPDATE el Motivo:['||INUMOTIVEID||']',4);
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END LOCKEDMOTIVE;

    













    PROCEDURE LOCKEDCOMPONENT
    (
        INUCOMPONENTID  IN  MO_COMPONENT.COMPONENT_ID%TYPE,
        ORCCOMPONENT    OUT DAMO_COMPONENT.STYMO_COMPONENT
    )
    IS
        NUCOMPONENTID   MO_COMPONENT.COMPONENT_ID%TYPE;
    BEGIN
        
        ORCCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(INUCOMPONENTID);

        
        SELECT A.COMPONENT_ID INTO NUCOMPONENTID FROM MO_COMPONENT A WHERE A.COMPONENT_ID = INUCOMPONENTID FOR UPDATE;

        UT_TRACE.TRACE('Bloquea FOR UPDATE el Componente:['||INUCOMPONENTID||']',4);
	EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END LOCKEDCOMPONENT;

    

























    PROCEDURE UPDATEOBJECT
    (
        INUEXTERNALID     IN NUMBER,
        ISBENTITYNAME     IN VARCHAR2,
        INUANNULCAUSALID  IN NUMBER,
        INUACTIONID       IN NUMBER,
        IBLNOTIFY         IN BOOLEAN,
        IBLUPDATECAUSA    IN BOOLEAN  
    );

    














    FUNCTION FBLALLCOMPONETSISANULLINMOTIVE
        (
        INUMOTIVE IN MO_MOTIVE.MOTIVE_ID%TYPE
        )
    RETURN BOOLEAN;

    














    FUNCTION FBLALLMOTIVESISANULLINPACKAGE
        (
        INUPACKAGE IN MO_PACKAGES.PACKAGE_ID%TYPE
        )
    RETURN BOOLEAN;

    PROCEDURE ANNULMOTIVEPROCESS
    (
        INUMOTIVEID         IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        INUANNULCAUSALID    IN  CC_CAUSAL.CAUSAL_ID%TYPE,
        INUACTIONID         IN  GE_ACTION_MODULE.ACTION_ID%TYPE,
        IBLNOTIFY           IN  BOOLEAN,
        INUACTIVITYID       IN  MO_WF_MOTIV_INTERFAC.ACTIVITY_ID%TYPE
    );

    














    PROCEDURE ANNULCOMPONENTBYMOTIVE
        (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUANNULCAUSALID    IN GE_CAUSAL.CAUSAL_ID%TYPE,
        INUACTIONID         IN GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUACTIVITYID       IN MO_WF_MOTIV_INTERFAC.ACTIVITY_ID%TYPE
        );

    


















    PROCEDURE CREATEPLANANNULWFBYPACK
    (
        INUPACKAGEID        IN      NUMBER,
        INUORIGINPACK       IN      NUMBER
    );

    
    
    

    

















    PROCEDURE VALPARENTINSTANCES
    (
        INUPARENTID     IN  WF_INSTANCE.PARENT_ID%TYPE
    )
    IS
        RCPARENTACT     DAWF_INSTANCE.STYWF_INSTANCE;
    BEGIN
        
        IF (INUPARENTID IS NULL) THEN
            RETURN;
        END IF;

        
        IF (WF_BOINSTANCE.FBOHASPENDINGTASK(INUPARENTID, INUPARENTID)) THEN
            RETURN;
        END IF;

        
        RCPARENTACT := DAWF_INSTANCE.FRCGETRECORD(INUPARENTID);

        
        IF (RCPARENTACT.STATUS_ID NOT IN (WF_BOCONSTANTS.CNUANNULLED, WF_BOCONSTANTS.CNUDESASSIGNED)) THEN
            DAWF_INSTANCE.UPDSTATUS_ID(RCPARENTACT.INSTANCE_ID, WF_BOCONSTANTS.CNUFINISHED);
        END IF;

        
        IF (RCPARENTACT.PARENT_ID IS NOT NULL AND RCPARENTACT.PARENT_ID != INUPARENTID) THEN
            VALPARENTINSTANCES(RCPARENTACT.PARENT_ID);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
























   PROCEDURE FINISHALLWFACTIVITIES
    (
        INUEXTERNALID   WF_INSTANCE.EXTERNAL_ID%TYPE,
        INUENTITYID     WF_INSTANCE.ENTITY_ID%TYPE
    )
    IS
        NUPLANID        WF_INSTANCE.INSTANCE_ID%TYPE;
        RCPLAN          DAWF_INSTANCE.STYWF_INSTANCE;
        TBACTTOANNUL    DAWF_INSTANCE.TYTBWF_INSTANCE;
        NUINDX          BINARY_INTEGER;
        
    BEGIN

        UT_TRACE.TRACE( 'MO_BOAnnulment.FinishAllWFActivities', 15 );
        UT_TRACE.TRACE( 'inuExternalId: ['||INUEXTERNALID||
                        '] inuEntityId: ['||INUENTITYID||']', 15 );

        
        NUPLANID := WF_BOINSTANCE.FNUGETPLANID(INUEXTERNALID, INUENTITYID);

        UT_TRACE.TRACE( 'nuPlanId: ['||NUPLANID||']', 16 );
        
        IF (NUPLANID IS NULL) THEN
            UT_TRACE.TRACE( 'Fin MO_BOAnnulment.FinishAllWFActivities, No se obtubo plan.', 15 );
            RETURN;

        END IF;

        
        RCPLAN := DAWF_INSTANCE.FRCGETRECORD(NUPLANID);

        
        IF (RCPLAN.STATUS_ID = WF_BOCONSTANTS.CNUANNULLED) THEN
            UT_TRACE.TRACE( 'Fin MO_BOAnnulment.FinishAllWFActivities, El plan estï¿½ anulado.', 15 );
            RETURN;

        END IF;

        
        RCPLAN.PREVIOUS_STATUS_ID := RCPLAN.STATUS_ID;
        RCPLAN.STATUS_ID := WF_BOCONSTANTS.CNUANNULATION_INITIATED;
        DAWF_INSTANCE.UPDRECORD(RCPLAN);

        
        TBACTTOANNUL := MO_BCANNULMENT.FTBALLACTIVITYTOANNUL(INUEXTERNALID,
                                                             INUENTITYID,
                                                             NUPLANID);

        UT_TRACE.TRACE('Actividades Pendientes: '||TBACTTOANNUL.COUNT, 16);
        
        NUINDX := TBACTTOANNUL.FIRST;
        WHILE (NUINDX IS NOT NULL) LOOP
            
            WF_BOINSTANCE_TRANS.UPDACTIVITYTRANS(TBACTTOANNUL(NUINDX).INSTANCE_ID,
                                                 WF_BOCONSTANTS.CNUTRANS_VOID);

            
            DAWF_INSTANCE.UPDSTATUS_ID(TBACTTOANNUL(NUINDX).INSTANCE_ID, WF_BOCONSTANTS.CNUANNULLED);
            
            
            IF (TBACTTOANNUL(NUINDX).STATUS_ID = WF_BOCONSTANTS.CNUACTIVED AND
                TBACTTOANNUL(NUINDX).INITIAL_DATE > SYSDATE ) THEN
                
                WF_BODISPATCHER.UPDATEEXECUTIONDATE(TBACTTOANNUL(NUINDX).INSTANCE_ID, SYSDATE );
                
                DAWF_INSTANCE.UPDINITIAL_DATE(TBACTTOANNUL(NUINDX).INSTANCE_ID, SYSDATE);
            END IF;

            
            IF (TBACTTOANNUL(NUINDX).STATUS_ID = WF_BOCONSTANTS.CNUWAITING_RESULTS) THEN
                
                 WF_BOANSWER_RECEPTOR.ANSWERRECEPTOR(TBACTTOANNUL(NUINDX).INSTANCE_ID, MO_BOCAUSAL.FNUGETFAIL);
            END IF;

            NUINDX := TBACTTOANNUL.NEXT(NUINDX);
        END LOOP;

        UT_TRACE.TRACE( 'rcPlan.external_id ['||RCPLAN.EXTERNAL_ID||
                        '] rcPlan.entity_id ['||RCPLAN.ENTITY_ID||']', 16 );
        
        IF (RCPLAN.EXTERNAL_ID != INUEXTERNALID OR RCPLAN.ENTITY_ID != INUENTITYID) THEN
            
            DAWF_INSTANCE.UPDSTATUS_ID(RCPLAN.INSTANCE_ID, WF_BOCONSTANTS.CNUWAITING_RESULTS);
            
            VALPARENTINSTANCES(RCPLAN.INSTANCE_ID);
        ELSE
            
            DAWF_INSTANCE.UPDSTATUS_ID(RCPLAN.INSTANCE_ID, WF_BOCONSTANTS.CNUANNULLED);
        END IF;

        UT_TRACE.TRACE( 'Fin MO_BOAnnulment.FinishAllWFActivities', 15 );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FINISHALLWFACTIVITIES;

    

















    PROCEDURE CLOSELEADBYANNULREQ
    (
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUREQUESTID         MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.CloseLeadByAnnulReq inuPackageId['||INUPACKAGEID||']', 5);
        
        NUREQUESTID := MO_BOPACKAGES_ASSO.FNUGETREQUESTID(INUPACKAGEID);

        
        IF (NUREQUESTID IS NULL) THEN
            RETURN;
        END IF;

        
        IF NOT MO_BOMOTIVE.FBOHASMOTIVESBYPACKANDMOTITYPE(INUPACKAGEID,  MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE) THEN
            RETURN;
        END IF;

        
        IF (MO_BOANNULMENT.FBOSALESINREQUEST(NUREQUESTID)) THEN
            RETURN;
        END IF;

        
        CC_BOLEAD.CLOSELEADBYANNULREQ(NUREQUESTID);

        UT_TRACE.TRACE('Fin Metodo MO_BOAnnulment.CloseLeadByAnnulReq', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLOSELEADBYANNULREQ;

    PROCEDURE UPDATEOBJECT
        (
        INUEXTERNALID       IN NUMBER,
        ISBENTITYNAME       IN VARCHAR2,
        INUANNULCAUSALID    IN NUMBER,
        INUACTIONID         IN NUMBER,
        IBLNOTIFY           IN BOOLEAN,
        IBLUPDATECAUSA      IN BOOLEAN  
        )
    IS
         NURELATIONSTATUS   PS_MOTIVE_ACTION.MOTI_STATUS_RELATION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.UpdateObject',8);
        UT_TRACE.TRACE('Entidad:['||ISBENTITYNAME||']Identificador:['||INUEXTERNALID||']',9);

        
        GE_BOINSTANCECONTROL.LOADENTITYOLDVALUESID(CSBMOTIVE_INSTANCE,NULL,ISBENTITYNAME,TO_CHAR(INUEXTERNALID));

        


        IF ( IBLUPDATECAUSA ) THEN
            
            GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(CSBMOTIVE_INSTANCE,NULL,ISBENTITYNAME,MO_BOCONSTANTS.CSBANNUL_CAUSAL_ID,TO_CHAR(INUANNULCAUSALID));
        END IF;

        
        IF ( ISBENTITYNAME = MO_BOCONSTANTS.CSBMO_MOTIVE) THEN

            
            MO_BOACTIONCONTROLLER.MOTIVESTATUS(INUACTIONID,NURELATIONSTATUS);

        ELSIF  ( ISBENTITYNAME = MO_BOCONSTANTS.CSBMO_COMPONENT) THEN

            
            MO_BOACTIONCONTROLLER.COMPONENTSTATUS(INUACTIONID,NURELATIONSTATUS);

        ELSIF ( ISBENTITYNAME = MO_BOCONSTANTS.CSBMO_PACKAGES ) THEN

            


            
            MO_BOACTIONCONTROLLER.PACKAGESTATUS(INUACTIONID,NURELATIONSTATUS);

        END IF;

        
        GE_BOINSTANCECONTROL.UPDATEENTITY(CSBMOTIVE_INSTANCE,NULL,ISBENTITYNAME);

        
        GE_BOINSTANCECONTROL.CLEARENTITY(CSBMOTIVE_INSTANCE,NULL,ISBENTITYNAME);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.UpdateObject',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION FBLALLCOMPONETSISANULLINMOTIVE
        (
        INUMOTIVE IN MO_MOTIVE.MOTIVE_ID%TYPE
        )
    RETURN BOOLEAN
    IS
        CURSOR CUCOMPONENTNOTANULL
        (
            INUMOTIVE IN MO_MOTIVE.MOTIVE_ID%TYPE
        ) IS
        SELECT 'x'
        FROM   MO_COMPONENT
        WHERE  MO_COMPONENT.MOTIVE_ID = INUMOTIVE
          AND  MO_COMPONENT.MOTIVE_STATUS_ID NOT IN
               (
                   MO_BOSTATUSPARAMETER.FNUGETSTATUS_ANNUL_COMP,
                   MO_BOCONSTANTS.CNUSTATUS_IN_ANNUL_COMP,
                   MO_BOSTATUSPARAMETER.FNUGETSTATUS_ATTE_PROD_EXI
               );
        BLRESULT    BOOLEAN;
        SBDUMMY     VARCHAR2(1);

    BEGIN

        
        OPEN   CUCOMPONENTNOTANULL ( INUMOTIVE );
        FETCH  CUCOMPONENTNOTANULL INTO SBDUMMY;
        
        BLRESULT := CUCOMPONENTNOTANULL%NOTFOUND;
        CLOSE   CUCOMPONENTNOTANULL;
        RETURN ( BLRESULT );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION FBLALLMOTIVESISANULLINPACKAGE
        (
        INUPACKAGE IN MO_PACKAGES.PACKAGE_ID%TYPE
        )
    RETURN BOOLEAN
    IS

        BLRESULT    BOOLEAN;
        RCMOTIVE    DAMO_MOTIVE.STYMO_MOTIVE;

    BEGIN
        
        OPEN   CUMOTIVESNOTANULL ( INUPACKAGE );
        FETCH  CUMOTIVESNOTANULL INTO RCMOTIVE;
        
        BLRESULT := CUMOTIVESNOTANULL%NOTFOUND;
        CLOSE   CUMOTIVESNOTANULL;

        RETURN ( BLRESULT );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUMOTIVESNOTANULL%ISOPEN) THEN
                CLOSE CUMOTIVESNOTANULL;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CUMOTIVESNOTANULL%ISOPEN) THEN
                CLOSE CUMOTIVESNOTANULL;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    
    FUNCTION FBLALLPACKISANULLINREQ
    (
        INUPACKAGEID        IN          MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN BOOLEAN
    IS

        BLRESULT        BOOLEAN;
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;

    BEGIN
        
        IF (INUPACKAGEID IS NULL) THEN
            RETURN GE_BOCONSTANTS.GETFALSE;
        END IF;
        
        OPEN   CUPACKAGESNOTANNUL ( INUPACKAGEID );
        FETCH  CUPACKAGESNOTANNUL INTO NUPACKAGEID;
        BLRESULT := CUPACKAGESNOTANNUL%NOTFOUND;
        CLOSE   CUPACKAGESNOTANNUL;

        RETURN ( BLRESULT );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUPACKAGESNOTANNUL%ISOPEN) THEN
                CLOSE CUPACKAGESNOTANNUL;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUPACKAGESNOTANNUL%ISOPEN) THEN
                CLOSE CUPACKAGESNOTANNUL;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;

    





























































    PROCEDURE ANNULPACKAGEPROCESS
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUANNULCAUSALID    IN  CC_CAUSAL.CAUSAL_ID%TYPE,
        INUACTIONID         IN  GE_ACTION_MODULE.ACTION_ID%TYPE,
        IBLNOTIFY           IN  BOOLEAN,
        INUACTIVITYID       IN  MO_WF_MOTIV_INTERFAC.ACTIVITY_ID%TYPE
    )
    IS
        
        NUQUOTATIONID       CC_QUOTATION.QUOTATION_ID%TYPE;

        RCPACKAGE           DAMO_PACKAGES.STYMO_PACKAGES;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulPackageProcess',3);

        
        IF ( FBOINANNULPROCESS(DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID)) ) THEN
            UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulPackageProcess',3);
            UT_TRACE.TRACE( 'La solicitud ya se encontraba en proceso de anulaciï¿½n', 4 );
            RETURN;
        END IF;

        
        MO_BOANNULMENT.LOCKEDPACKAGE(INUPACKAGEID,RCPACKAGE);

        
        MO_BOMOTIVEACTIONUTIL.VALIDATEACTIONFORPACK
            (
            RCPACKAGE.PACKAGE_ID,
            RCPACKAGE.MOTIVE_STATUS_ID,
            INUACTIONID,
            RCPACKAGE.PACKAGE_TYPE_ID
            );

        
        CC_BOCLAIMHANDLER.PROCESSCLAIMSANULL(INUPACKAGEID);

        
        TT_BOPRODUCT.ANNULPACKAGE(INUPACKAGEID);

        
        UT_TRACE.TRACE('Anula las ordenes de la solicitud ['||INUPACKAGEID||']',3);
        OR_BOANULLORDER.ANULLACTIVITIES(INUPACKAGEID, NULL, NULL);

        
        NUQUOTATIONID := CC_BCQUOTATION.FNUGETACTQUOTBYPACK( RCPACKAGE.PACKAGE_ID );
        IF ( NUQUOTATIONID IS NOT NULL ) THEN

            UT_TRACE.TRACE('Anula la cotizaciï¿½n asociada ['||NUQUOTATIONID||']',3);
            
            CC_BOQUOTATIONMGR.UPDATEQUOTATIONSTATUS( NUQUOTATIONID, CC_BOQUOTATIONUTIL.FSBGETQUOTATIONANNSTAT );

        END IF;

        
        MO_BOANNULMENT.UPDATEOBJECT
            (
            RCPACKAGE.PACKAGE_ID,
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            INUANNULCAUSALID,
            INUACTIONID,
            IBLNOTIFY,
            FALSE
            );

        
        CC_BOADMINISTRATIVEPROCESS.PROCESSANNULADMINACTIVITY(GNUENTITY_PACK, RCPACKAGE.PACKAGE_ID);

        
        UT_TRACE.TRACE('Retiro de empaquetamientos pendientes de instalaciï¿½n.', 5);
        CC_BOBUNDLINGPROCESS.RETIREBUNDLEBYPACK(RCPACKAGE.PACKAGE_ID);

        
        MO_BOWF_PACK_INTERFAC.FINISHACTIVITIESPACK(RCPACKAGE.PACKAGE_ID);

        
        MO_BOANNULMENT.FINISHALLWFACTIVITIES(RCPACKAGE.PACKAGE_ID, GNUENTITY_PACK);

        
        MO_BOANNULMENT.CLOSELEADBYANNULREQ(INUPACKAGEID);

        
        UT_TRACE.TRACE('Anula los registro de mo_Executor_log_mot asociados.', 5);
        MO_BOEXECUTOR_LOG_MOT.FINISHEXECLOGMOT(RCPACKAGE.PACKAGE_ID, GNUENTITY_PACK);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulPackageProcess',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULPACKAGEPROCESS;

    


















    PROCEDURE VALIDWITHDRAWPROMOSBYMOTI
    (
        IRCMOTIVE  IN   DAMO_MOTIVE.STYMO_MOTIVE
    )
    IS
        NUPROMOIDX      BINARY_INTEGER;
        TBPROMOBYMOTI   DACC_PROMOTION.TYTBPROMOTION_ID;
        TBPROMOCIONES   DAPR_PROMOTION.TYTBPR_PROMOTION;
        



















        FUNCTION FBLCANCELPROMO
        (
            INUPROMOTIONID      IN      CC_PROMOTION.PROMOTION_ID%TYPE
        )
        RETURN BOOLEAN
        IS
            NUIDX   	BINARY_INTEGER;
			BLRETURN    BOOLEAN := FALSE;
        BEGIN
			UT_TRACE.TRACE('BEGIN  MO_BOAnnulment.ValidWithdrawPromosByMoti.fblCancelPromo',7);
            NUIDX := TBPROMOBYMOTI.FIRST;
            WHILE (NUIDX IS NOT NULL) LOOP
                IF (TBPROMOBYMOTI(NUIDX) = INUPROMOTIONID) THEN
                    BLRETURN := TRUE;
                    UT_TRACE.TRACE('Cancela Promociï¿½n',8);
                    EXIT;
                END IF;
                NUIDX := TBPROMOBYMOTI.NEXT(NUIDX);
            END LOOP;
			UT_TRACE.TRACE('END  MO_BOAnnulment.ValidWithdrawPromosByMoti.fblCancelPromo',7);
            RETURN BLRETURN;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FBLCANCELPROMO;
    BEGIN
        UT_TRACE.TRACE('BEGIN MO_BOAnnulment.ValidWithdrawPromosByMoti',5);
        
        IF (IRCMOTIVE.PRODUCT_ID IS NOT NULL) THEN

            
            TBPROMOBYMOTI := MO_BCANNULMENT.FTBGETPROMOSBYMOTIVE(IRCMOTIVE.MOTIVE_ID);
            UT_TRACE.TRACE('Promociones por Motivo ['||IRCMOTIVE.MOTIVE_ID||']['||TBPROMOBYMOTI.COUNT||']',6);

            
            PR_BCPROMOTION.GETPROMOSTORETBYPROD(IRCMOTIVE.PRODUCT_ID,SYSDATE,TBPROMOCIONES);
            UT_TRACE.TRACE('Promociones por Producto ['||IRCMOTIVE.PRODUCT_ID||']['||TBPROMOCIONES.COUNT||']',6);

            NUPROMOIDX := TBPROMOCIONES.FIRST;
            WHILE (NUPROMOIDX IS NOT NULL) LOOP
                UT_TRACE.TRACE('Validar Promociï¿½n ['||TBPROMOCIONES(NUPROMOIDX).ASSO_PROMOTION_ID||']',6);

                
                IF (MO_BOANNULMENT.VALIDWITHDRAWPROMOSBYMOTI.FBLCANCELPROMO(TBPROMOCIONES(NUPROMOIDX).ASSO_PROMOTION_ID)) THEN
                    UT_TRACE.TRACE('Cancelar Promociï¿½n ['||TBPROMOCIONES(NUPROMOIDX).PROMOTION_ID||']',6);
                    
                    CC_BOASSIGNPROMOTION.CANCELPROMOTION(TBPROMOCIONES(NUPROMOIDX).PROMOTION_ID);
                END IF;

                NUPROMOIDX := TBPROMOCIONES.NEXT(NUPROMOIDX);
            END LOOP;
        END IF;
        UT_TRACE.TRACE('END MO_BOAnnulment.ValidWithdrawPromosByMoti',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDWITHDRAWPROMOSBYMOTI;

    


































    PROCEDURE ANNULMOTIVEPROCESS
    (
        INUMOTIVEID         IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        INUANNULCAUSALID    IN  CC_CAUSAL.CAUSAL_ID%TYPE,
        INUACTIONID         IN  GE_ACTION_MODULE.ACTION_ID%TYPE,
        IBLNOTIFY           IN  BOOLEAN,
        INUACTIVITYID       IN  MO_WF_MOTIV_INTERFAC.ACTIVITY_ID%TYPE
    )
    IS
        RCMOTIVE    DAMO_MOTIVE.STYMO_MOTIVE;
        RCADDRESS   DAMO_ADDRESS.STYMO_ADDRESS;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulMotiveProcess. Motivo:['||INUMOTIVEID||']',5);

        
        IF ( FBOINANNULPROCESS(DAMO_MOTIVE.FNUGETMOTIVE_STATUS_ID(INUMOTIVEID)) ) THEN
            UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulMotiveProcess',5);
            UT_TRACE.TRACE( 'El motivo ya se encontraba en proceso de anulaciï¿½n', 7 );
            RETURN;
        END IF;

        
        LOCKEDMOTIVE(INUMOTIVEID,RCMOTIVE);

        
        MO_BOMOTIVEACTIONUTIL.VALIDATEACTIONFORMOT
            (
            RCMOTIVE.MOTIVE_ID,
            RCMOTIVE.MOTIVE_STATUS_ID,
            INUACTIONID,
            RCMOTIVE.PRODUCT_MOTIVE_ID
            );

        
        UT_TRACE.TRACE('Anula las ordenes del motivo ['||INUMOTIVEID||']',3);
        OR_BOANULLORDER.ANULLACTIVITIES(NULL, INUMOTIVEID, NULL);

        
        MO_BOANNULMENT.UPDATEOBJECT
            (
            RCMOTIVE.MOTIVE_ID,
            MO_BOCONSTANTS.CSBMO_MOTIVE,
            INUANNULCAUSALID,
            INUACTIONID,
            IBLNOTIFY,
            TRUE
            );

        
        CC_BOADMINISTRATIVEPROCESS.PROCESSANNULADMINACTIVITY(GNUENTITY_MOTIVE, RCMOTIVE.MOTIVE_ID);

        
        IF (RCMOTIVE.MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE) THEN
            UT_TRACE.TRACE('Actualizaciï¿½n del estado del producto a Retirado sin instalaciï¿½n.', 5);
            PR_BOPRODUCT.UPDPRODRETUNINSTALL(RCMOTIVE.PACKAGE_ID,RCMOTIVE.MOTIVE_ID);
        END IF;

        
        IF (RCMOTIVE.MOTIVE_TYPE_ID IN (MO_BOCONSTANTS.CNURETIRE_MOTI_TYPE, MO_BOCONSTANTS.CNUMOVE_MOTI_TYPE)) THEN
            UT_TRACE.TRACE('Actualizaciï¿½n del estado del producto a Activo ï¿½ Suspendido.', 5);
            PR_BOPRODUCT.UPDPRODPENDRETORPENDTRAS(RCMOTIVE.PACKAGE_ID,RCMOTIVE.MOTIVE_ID);
        END IF;

        
        UT_TRACE.TRACE('Retira de promociones X Motivo.', 5);
        VALIDWITHDRAWPROMOSBYMOTI(RCMOTIVE);

        
        MO_BOWF_MOTIV_INTERFAC.FINISHACTIVITIESMOT(RCMOTIVE.MOTIVE_ID,INUACTIVITYID);

        
        FINISHALLWFACTIVITIES(RCMOTIVE.MOTIVE_ID, GNUENTITY_MOTIVE);

        UT_TRACE.TRACE('Finaliza registros de mo_executor_log_mot.', 5);
        
        MO_BOEXECUTOR_LOG_MOT.FINISHEXECLOGMOT(RCMOTIVE.MOTIVE_ID, GNUENTITY_MOTIVE);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulMotiveProcess',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULMOTIVEPROCESS;

    





















    PROCEDURE VALIDWITHDRAWCOMPBEFOREINST
    (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
        RCMOCOMPONENT     DAMO_COMPONENT.STYMO_COMPONENT;
        RCPRCOMPONENT     DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
        RCMOCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(INUCOMPONENTID);
        UT_TRACE.TRACE('INICIO MO_BOAnnulment.ValidWithdrawCompBeforeInst MOComp:['||RCMOCOMPONENT.COMPONENT_ID||'] TY:['||RCMOCOMPONENT.MOTIVE_TYPE_ID||'] PR:['||RCMOCOMPONENT.COMPONENT_ID_PROD||']',20);

        
        IF (RCMOCOMPONENT.COMPONENT_ID_PROD IS NULL) THEN
            UT_TRACE.TRACE('FIN MO_BOAnnulment.ValidWithdrawCompBeforeInst - No tiene componente de producto',20);
            RETURN;
        END IF;

        
        IF (RCMOCOMPONENT.MOTIVE_TYPE_ID IN (
                                            MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE,
                                            MO_BOCONSTANTS.CNUSERVADD_MOTIVE_TYPE,
                                            PS_BOMOTIVETYPE.FNUBUNDCOMP_MOTI_TYPE
                                            )
        )THEN

            
            RCPRCOMPONENT := DAPR_COMPONENT.FRCGETRECORD(RCMOCOMPONENT.COMPONENT_ID_PROD);

            
            IF (DAPS_PRODUCT_STATUS.FSBGETIS_FINAL_STATUS(RCPRCOMPONENT.COMPONENT_STATUS_ID) = CC_BOCONSTANTS.CSBNO) THEN
                UT_TRACE.TRACE('Retira sin instalaciï¿½n el componente, Estado anterior['||RCPRCOMPONENT.COMPONENT_STATUS_ID||']',21);
                
                PR_BORETIRE.WITHDRAWCOMPBEFOREINST(RCPRCOMPONENT, PR_BOCONSTANTS.CNURETTYPADMINISTRATIVE, SYSDATE);
            END IF;
        END IF;
        UT_TRACE.TRACE('FIN MO_BOAnnulment.ValidWithdrawCompBeforeInst - Ok',20);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDWITHDRAWCOMPBEFOREINST;

    


















    PROCEDURE VALIDWITHDRAWPROMOSBYCOMP
    (
        IRCCOMPONENT  IN  DAMO_COMPONENT.STYMO_COMPONENT
    )
    IS
        NUPROMOIDX      BINARY_INTEGER;
        TBPROMOBYCOMP   DACC_PROMOTION.TYTBPROMOTION_ID;
        TBPROMOCIONES   DAPR_PROMOTION.TYTBPR_PROMOTION;
        



















        FUNCTION FBLCANCELPROMO
        (
            INUPROMOTIONID      IN      CC_PROMOTION.PROMOTION_ID%TYPE
        )
        RETURN BOOLEAN
        IS
            NUIDX       BINARY_INTEGER;
            BLRETURN    BOOLEAN := FALSE;
        BEGIN
            UT_TRACE.TRACE('BEGIN  MO_BOAnnulment.ValidWithdrawPromosByComp.fblCancelPromo',7);
            NUIDX := TBPROMOBYCOMP.FIRST;
            WHILE (NUIDX IS NOT NULL) LOOP
                IF (TBPROMOBYCOMP(NUIDX) = INUPROMOTIONID) THEN
                    BLRETURN := TRUE;
                    UT_TRACE.TRACE('Cancela Promociï¿½n',8);
                    EXIT;
                END IF;
                NUIDX := TBPROMOBYCOMP.NEXT(NUIDX);
            END LOOP;
            UT_TRACE.TRACE('END  MO_BOAnnulment.ValidWithdrawPromosByComp.fblCancelPromo',7);
            RETURN BLRETURN;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FBLCANCELPROMO;
    BEGIN
        UT_TRACE.TRACE('BEGIN MO_BOAnnulment.ValidWithdrawPromosByComp',5);
        
        IF (IRCCOMPONENT.COMPONENT_ID_PROD IS NOT NULL) THEN

            
            TBPROMOBYCOMP := MO_BCANNULMENT.FTBGETPROMOSBYCOMPONENT(IRCCOMPONENT.MOTIVE_ID,IRCCOMPONENT.COMPONENT_ID);
            UT_TRACE.TRACE('Promociones por Componente ['||IRCCOMPONENT.COMPONENT_ID||']['||TBPROMOBYCOMP.COUNT||']',6);

            
            PR_BCPROMOTION.GETPROMOSTORETBYCOMP(IRCCOMPONENT.COMPONENT_ID_PROD,SYSDATE,TBPROMOCIONES);
            UT_TRACE.TRACE('Promociones por Componente ['||IRCCOMPONENT.COMPONENT_ID_PROD||']['||TBPROMOCIONES.COUNT||']',6);

            NUPROMOIDX := TBPROMOCIONES.FIRST;
            WHILE (NUPROMOIDX IS NOT NULL) LOOP
				UT_TRACE.TRACE('Validar Promociï¿½n ['||TBPROMOCIONES(NUPROMOIDX).ASSO_PROMOTION_ID||']',6);

                
                IF (MO_BOANNULMENT.VALIDWITHDRAWPROMOSBYCOMP.FBLCANCELPROMO(TBPROMOCIONES(NUPROMOIDX).ASSO_PROMOTION_ID)) THEN
                    UT_TRACE.TRACE('Cancelar Promociï¿½n ['||TBPROMOCIONES(NUPROMOIDX).PROMOTION_ID||']',6);
                    
                    CC_BOASSIGNPROMOTION.CANCELPROMOTION(TBPROMOCIONES(NUPROMOIDX).PROMOTION_ID);
                END IF;

                NUPROMOIDX := TBPROMOCIONES.NEXT(NUPROMOIDX);
            END LOOP;
        END IF;
        UT_TRACE.TRACE('END MO_BOAnnulment.ValidWithdrawPromosByComp',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDWITHDRAWPROMOSBYCOMP;

    PROCEDURE ANULLSMMESSAGES
    (
        INUCOMPONENTID      IN      MO_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
        TBMESSAGE      DASM_INTERFACE.TYTBSM_INTERFACE;
    BEGIN
        
        TBMESSAGE := MO_BOCOMPONENT.FTBGETSMMESSBYCOMP(INUCOMPONENTID);

        
        IF (TBMESSAGE.COUNT > 0) THEN
            FOR IDX IN TBMESSAGE.FIRST .. TBMESSAGE.LAST LOOP
                
                SM_BCSM_INTERFACE.UPDRECORD
                (
                    TBMESSAGE(IDX).SM_INTERFACE_ID,
                    SM_BOPARAMETERINTERFACE.FNUGETSM_SEND_ORDE_STATUS,
                    GE_BOCONSTANTS.CNUNULLNUM,
                    GE_BOCONSTANTS.CSBNULLSB
                );
            END LOOP;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANULLSMMESSAGES;

    


























































    PROCEDURE ANNULCOMPONENTPROCESS
    (
        INUCOMPONENTID      IN MO_COMPONENT.COMPONENT_ID%TYPE,
        INUANNULCAUSALID    IN CC_CAUSAL.CAUSAL_ID%TYPE,
        INUACTIONID         IN GE_ACTION_MODULE.ACTION_ID%TYPE,
        IBLNOTIFY           IN BOOLEAN,
        INUACTIVITYID       IN MO_WF_MOTIV_INTERFAC.ACTIVITY_ID%TYPE
    )
    IS
        RCMOTIVE                DAMO_MOTIVE.STYMO_MOTIVE;
        RCCOMPONENT             DAMO_COMPONENT.STYMO_COMPONENT;

        CURFGETCHILDCOMPONENT   CONSTANTS.TYREFCURSOR;
        RCGETCHILDCOMPONENT     MO_BCCOMPONENT.STYRCGETCHILDCOMPONENT;
    BEGIN

        UT_TRACE.TRACE( 'MO_BOAnnulment.AnnulComponentProcess. Componente:['||INUCOMPONENTID||']', 4 );

        
        IF ( FBOINANNULPROCESS(DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(INUCOMPONENTID)) ) THEN
            UT_TRACE.TRACE( 'El componente ya se encontraba en proceso de anulaciï¿½n', 5 );
            UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulComponentProcess',4);
            RETURN;

        END IF;

        
        CURFGETCHILDCOMPONENT := MO_BCCOMPONENT.FRFGETCHILDCOMPONENT(INUCOMPONENTID);
        FETCH CURFGETCHILDCOMPONENT INTO RCGETCHILDCOMPONENT;
        WHILE CURFGETCHILDCOMPONENT%FOUND LOOP

            
            IF MO_BOMOTIVEACTIONUTIL.FBLCURRSTATISVALIDGENCOMP
                    (
                    INUACTIONID,
                    DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(RCGETCHILDCOMPONENT.COMPONENT_ID),
                    RCGETCHILDCOMPONENT.PROD_MOTIVE_COMP_ID
                    )
            THEN
                
                ANNULCOMPONENTPROCESS
                    (
                    RCGETCHILDCOMPONENT.COMPONENT_ID,
                    INUANNULCAUSALID,
                    INUACTIONID,
                    FALSE,
                    INUACTIVITYID
                    );
            END IF;

            FETCH CURFGETCHILDCOMPONENT INTO RCGETCHILDCOMPONENT;
        END LOOP;
        GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFGETCHILDCOMPONENT);

        
        LOCKEDCOMPONENT(INUCOMPONENTID,RCCOMPONENT);

        
        LOCKEDMOTIVE(RCCOMPONENT.MOTIVE_ID,RCMOTIVE);

        
        MO_BOMOTIVEACTIONUTIL.VALIDATEACTIONFORCOMP
            (
            RCCOMPONENT.COMPONENT_ID,
            RCCOMPONENT.MOTIVE_STATUS_ID,
            INUACTIONID,
            RCCOMPONENT.PROD_MOTIVE_COMP_ID
            );

        
        UT_TRACE.TRACE('Anula los mensajes en la interfaz ['||INUCOMPONENTID||']',3);
        ANULLSMMESSAGES(INUCOMPONENTID);

        
        UT_TRACE.TRACE('Anula las ordenes del componente ['||INUCOMPONENTID||']',3);
        OR_BOANULLORDER.ANULLACTIVITIES(NULL, NULL, INUCOMPONENTID);

        
        UPDATEOBJECT
            (
            RCCOMPONENT.COMPONENT_ID,
            MO_BOCONSTANTS.CSBMO_COMPONENT,
            INUANNULCAUSALID,
            INUACTIONID,
            IBLNOTIFY,
            TRUE
            );

        
        CC_BOADMINISTRATIVEPROCESS.PROCESSANNULADMINACTIVITY(GNUENTITY_COMP, RCCOMPONENT.COMPONENT_ID);

        
        VALIDWITHDRAWCOMPBEFOREINST(RCCOMPONENT.COMPONENT_ID);

        
        MO_BOCOMPONENT.UPDCOMPPENDRETORTRAS(RCCOMPONENT.COMPONENT_ID);

        
        VALIDWITHDRAWPROMOSBYCOMP(RCCOMPONENT);

        
        MO_BOWF_COMP_INTERFAC.FINISHACTIVITIESCOMP(RCCOMPONENT.COMPONENT_ID,INUACTIVITYID);

        
        FINISHALLWFACTIVITIES(RCCOMPONENT.COMPONENT_ID, GNUENTITY_COMP);

        
        ANNULFATHERCOMPWF(RCCOMPONENT.COMPONENT_ID);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulComponentProcess',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFGETCHILDCOMPONENT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFGETCHILDCOMPONENT);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULCOMPONENTPROCESS;

    PROCEDURE ANNULCOMPONENTBYMOTIVE
        (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUANNULCAUSALID    IN GE_CAUSAL.CAUSAL_ID%TYPE,
        INUACTIONID         IN GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUACTIVITYID       IN MO_WF_MOTIV_INTERFAC.ACTIVITY_ID%TYPE
        )
    IS
        CURFCOMPONENTSBYMOTIVE  CONSTANTS.TYREFCURSOR;
        RCCOMPONENTSBYMOTIVE    MO_BCCOMPONENT.STYRCCOMPONENTSBYMOTIVE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulComponentByMotive. Motivo:['||INUMOTIVEID||']',4);
        
        CURFCOMPONENTSBYMOTIVE := MO_BCCOMPONENT.FRFCOMPONENTSBYMOTIVE(INUMOTIVEID);
        FETCH CURFCOMPONENTSBYMOTIVE INTO RCCOMPONENTSBYMOTIVE ;
        WHILE CURFCOMPONENTSBYMOTIVE%FOUND LOOP
            
            IF  MO_BOMOTIVEACTIONUTIL.FBLCURRSTATISVALIDGENCOMP
                    (
                    INUACTIONID,
                    DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(RCCOMPONENTSBYMOTIVE.COMPONENT_ID),
                    RCCOMPONENTSBYMOTIVE.PROD_MOTIVE_COMP_ID
                    )
            THEN
                
                ANNULCOMPONENTPROCESS
                    (
                    RCCOMPONENTSBYMOTIVE.COMPONENT_ID,
                    INUANNULCAUSALID,
                    INUACTIONID,
                    FALSE,
                    INUACTIVITYID
                    );
            END IF;


            FETCH CURFCOMPONENTSBYMOTIVE INTO RCCOMPONENTSBYMOTIVE ;
        END LOOP;
        GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTSBYMOTIVE);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulComponentByMotive',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTSBYMOTIVE);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTSBYMOTIVE);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    



































    PROCEDURE ANNULPACKAGE
    (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUANNULCAUSALID    IN  CC_CAUSAL.CAUSAL_ID%TYPE,
        INUACTIONID         IN  GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUACTIVITYID       IN  MO_WF_MOTIV_INTERFAC.ACTIVITY_ID%TYPE
    )
    IS
        CURFMOTIVESBYPACKAGE    CONSTANTS.TYREFCURSOR;
        RCMOTIVESBYPACKAGE      DAMO_MOTIVE.STYMO_MOTIVE;
        TBASSOPACKS             DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUIDX                   BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulPackage',2);
        UT_TRACE.TRACE('Paquete:['||INUPACKAGEID||']Causal:['||INUANNULCAUSALID||']Acciï¿½n:['||INUACTIONID||']',3);
        UT_TRACE.TRACE('Actividad:['||INUACTIVITYID||']',4);

        
        IF ( FBOINANNULPROCESS(DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID)) ) THEN
            UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulPackage',2);
            UT_TRACE.TRACE( 'La solicitud ya se encontraba en proceso de anulaciï¿½n', 3 );
            RETURN;

        END IF;

        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;

        
        UT_TRACE.TRACE('Valida que el paquete a anular exista',3);
        DAMO_PACKAGES.ACCKEY(INUPACKAGEID);

        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(CSBMOTIVE_INSTANCE,NULL);

        
        UT_TRACE.TRACE('Verifica que se pueda hacer la anulaciï¿½n del paquete',3);
        MO_BOMOTIVEACTIONUTIL.VALIDATEACTIONFORPACK
            (
            INUPACKAGEID,
            DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID),
            INUACTIONID,
            DAMO_PACKAGES.FNUGETPACKAGE_TYPE_ID(INUPACKAGEID)
            );

        
        CURFMOTIVESBYPACKAGE := MO_BCMOTIVE.FRFMOTIVESBYPACKAGEID(INUPACKAGEID);
        FETCH CURFMOTIVESBYPACKAGE INTO RCMOTIVESBYPACKAGE ;
        WHILE CURFMOTIVESBYPACKAGE%FOUND LOOP

            
            ANNULCOMPONENTBYMOTIVE
                (
                RCMOTIVESBYPACKAGE.MOTIVE_ID,
                INUANNULCAUSALID,
                INUACTIONID,
                INUACTIVITYID
                );

            
            IF  MO_BOMOTIVEACTIONUTIL.FBLCURRSTATISVALIDGENMOT
                    (
                    INUACTIONID,
                    DAMO_MOTIVE.FNUGETMOTIVE_STATUS_ID(RCMOTIVESBYPACKAGE.MOTIVE_ID),
                    RCMOTIVESBYPACKAGE.PRODUCT_MOTIVE_ID
                    )
            THEN
                
                ANNULMOTIVEPROCESS
                    (
                    RCMOTIVESBYPACKAGE.MOTIVE_ID,
                    INUANNULCAUSALID,
                    INUACTIONID,
                    TRUE,
                    INUACTIVITYID
                    );
            END IF;

            FETCH CURFMOTIVESBYPACKAGE INTO RCMOTIVESBYPACKAGE ;
        END LOOP;
        GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVESBYPACKAGE);

        
        UT_TRACE.TRACE('Anula el paquete',3);
        ANNULPACKAGEPROCESS
        (
            INUPACKAGEID,
            INUANNULCAUSALID,
            INUACTIONID,
            TRUE,
            INUACTIVITYID
        );

        
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;

        
        TBASSOPACKS := MO_BCPACKAGES_ASSO.FTBPACKASSOBYPACKID(INUPACKAGEID);
        NUIDX := TBASSOPACKS.FIRST;
        WHILE (NUIDX IS NOT NULL) LOOP

            
            IF (TBASSOPACKS(NUIDX).ANNUL_DEPENDENT = CC_BOCONSTANTS.CSBSI AND
                FBLALLPACKISANULLINREQ(TBASSOPACKS(NUIDX).PACKAGE_ID_ASSO)) THEN

                UT_TRACE.TRACE('Anula la sol Padre, Id['||TBASSOPACKS(NUIDX).PACKAGE_ID_ASSO||']',6);
                ANNULPACKAGE( TBASSOPACKS(NUIDX).PACKAGE_ID_ASSO,
                              INUANNULCAUSALID,
                              INUACTIONID,
                              INUACTIVITYID);

            END IF;
            NUIDX := TBASSOPACKS.NEXT(NUIDX);
        END LOOP;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulPackage',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVESBYPACKAGE);
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVESBYPACKAGE);
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULPACKAGE;

    



























    PROCEDURE ANNULCOMPONENT
    (
        INUCOMPONENTID      IN  MO_COMPONENT.COMPONENT_ID%TYPE,
        INUANNULCAUSALID    IN  CC_CAUSAL.CAUSAL_ID%TYPE,
        INUACTIONID         IN  GE_ACTION_MODULE.ACTION_ID%TYPE,
        INUACTIVITYID       IN  MO_WF_MOTIV_INTERFAC.ACTIVITY_ID%TYPE
    )
    IS
        NUMOTIVE        MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPACKAGEID     MO_PACKAGES.PACKAGE_ID%TYPE;

        
        SBINSTANCE              GE_BOINSTANCECONTROL.STYSBNAME;
        SBGROUP                 GE_BOINSTANCECONTROL.STYSBNAME;
        SBENTITY                GE_BOINSTANCECONTROL.STYSBNAME;
        SBATTRIBUTE             GE_BOINSTANCECONTROL.STYSBNAME;
        TBASSOPACKS             DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUIDX                   BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulComponent. Componente:['||INUCOMPONENTID||']',2);

        
        IF ( FBOINANNULPROCESS(DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(INUCOMPONENTID)) ) THEN
            UT_TRACE.TRACE( 'El componente ya se encontraba en proceso de anulaciï¿½n', 3 );
            UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulComponent',2);
            RETURN;
        END IF;

        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;

        
        DAMO_COMPONENT.ACCKEY(INUCOMPONENTID);

        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(CSBMOTIVE_INSTANCE,NULL);

        
        MO_BOMOTIVEACTIONUTIL.VALIDATEACTIONFORCOMP
            (
            INUCOMPONENTID,
            DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(INUCOMPONENTID),
            INUACTIONID,
            DAMO_COMPONENT.FNUGETPROD_MOTIVE_COMP_ID(INUCOMPONENTID)
            );

        
        NUMOTIVE    := DAMO_COMPONENT.FNUGETMOTIVE_ID(INUCOMPONENTID);
        NUPACKAGEID := DAMO_MOTIVE.FNUGETPACKAGE_ID(NUMOTIVE);

        
        ANNULCOMPONENTPROCESS
        (
            INUCOMPONENTID,
            INUANNULCAUSALID,
            INUACTIONID,
            TRUE,
            INUACTIVITYID
        ) ;

        
        IF ( FBLALLCOMPONETSISANULLINMOTIVE(NUMOTIVE)) THEN

            
            ANNULMOTIVEPROCESS
            (
                NUMOTIVE,
                INUANNULCAUSALID,
                INUACTIONID,
                TRUE,
                INUACTIVITYID
            );

            
            IF (FBLALLMOTIVESISANULLINPACKAGE(NUPACKAGEID)) THEN
                
                ANNULPACKAGEPROCESS
                (
                    NUPACKAGEID,
                    INUANNULCAUSALID,
                    INUACTIONID,
                    TRUE,
                    INUACTIVITYID
                );

                
                GE_BOINSTANCECONTROL.GETCURRENTDATA(SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE);

                
                TBASSOPACKS := MO_BCPACKAGES_ASSO.FTBPACKASSOBYPACKID(NUPACKAGEID);
                NUIDX := TBASSOPACKS.FIRST;
                WHILE (NUIDX IS NOT NULL) LOOP

                    
                    IF (TBASSOPACKS(NUIDX).ANNUL_DEPENDENT = CC_BOCONSTANTS.CSBSI AND
                        FBLALLPACKISANULLINREQ(TBASSOPACKS(NUIDX).PACKAGE_ID_ASSO)) THEN

                        UT_TRACE.TRACE('Anula la sol Padre, Id['||TBASSOPACKS(NUIDX).PACKAGE_ID_ASSO||']',6);
                        ANNULPACKAGE( TBASSOPACKS(NUIDX).PACKAGE_ID_ASSO,
                                      INUANNULCAUSALID,
                                      INUACTIONID,
                                      INUACTIVITYID);

                    END IF;
                    NUIDX := TBASSOPACKS.NEXT(NUIDX);
                END LOOP;

                
                GE_BOINSTANCECONTROL.SETCURRENTDATA(SBINSTANCE, SBGROUP, SBENTITY, SBATTRIBUTE);

            ELSE
                
                UPDATEOBJECT
                (
                    NUPACKAGEID,
                    MO_BOCONSTANTS.CSBMO_PACKAGES,
                    INUANNULCAUSALID,
                    INUACTIONID,
                    FALSE,
                    FALSE
                );
            END IF;
        ELSE
            
            UPDATEOBJECT
            (
                NUMOTIVE,
                MO_BOCONSTANTS.CSBMO_MOTIVE,
                INUANNULCAUSALID,
                INUACTIONID,
                FALSE,
                FALSE
            );
            
            UPDATEOBJECT
            (
                NUPACKAGEID,
                MO_BOCONSTANTS.CSBMO_PACKAGES,
                INUANNULCAUSALID,
                INUACTIONID,
                FALSE,
                FALSE
            );
        END IF;

        
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulComponent',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULCOMPONENT;

    

















































    PROCEDURE ANNULEXTERNAL
    (
        INUPACKAGEID         IN         MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        NUDETAIL            BINARY_INTEGER;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        TBANNULDETAIL       DAMO_PACK_ANNUL_DETAIL.TYTBMO_PACK_ANNUL_DETAIL;
        NUORIGINPACK        MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulExternal. Solicitud:['||INUPACKAGEID||']',2);

        
        RCMOTIVE.MOTIVE_ID := MO_BOPACKAGES.FNUGETINITIALMOTIVE(INUPACKAGEID);
        RCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(RCMOTIVE.MOTIVE_ID);

        
        TBANNULDETAIL := MO_BCDETALLEANULSOLICITUD.FTBOBTDETALLEANULACION(INUPACKAGEID);

        
        NUDETAIL := TBANNULDETAIL.FIRST;
        WHILE (NUDETAIL IS NOT NULL) LOOP

            
            NUORIGINPACK := TBANNULDETAIL(NUDETAIL).PACKAGE_ID;

            
            IF (TBANNULDETAIL(NUDETAIL).COMPONENT_ID IS NOT NULL) THEN

                
                ANNULCOMPONENT
                    (
                    TBANNULDETAIL(NUDETAIL).COMPONENT_ID,
                    RCMOTIVE.CAUSAL_ID,
                    MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_EXTERNA,
                    NULL
                    );
            ELSE
                
                ANNULPACKAGE
                    (
                    TBANNULDETAIL(NUDETAIL).PACKAGE_ID,
                    RCMOTIVE.CAUSAL_ID,
                    MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_EXTERNA,
                    NULL
                    );

            END IF;

            NUDETAIL := TBANNULDETAIL.NEXT(NUDETAIL);
        END LOOP;

        
        UT_TRACE.TRACE('Crea plan de anulaciï¿½n por paquete',3);
        CREATEPLANANNULWFBYPACK
        (
            INUPACKAGEID, NUORIGINPACK
        );

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulExternal',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCCOMMENT.CUCOMMENTSBYPACK%ISOPEN) THEN
                CLOSE MO_BCCOMMENT.CUCOMMENTSBYPACK;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (MO_BCCOMMENT.CUCOMMENTSBYPACK%ISOPEN) THEN
                CLOSE MO_BCCOMMENT.CUCOMMENTSBYPACK;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULEXTERNAL;

    PROCEDURE CREATEPLANANNULWFBYPACK
    (
        INUPACKAGEID        IN      NUMBER,
        INUORIGINPACK       IN      NUMBER
    )
    IS
        NUEXECMAXTIME     NUMBER;
        NUSTDTIME         NUMBER;
        NUINTERFACE       NUMBER;
        NUEXTERNALID      NUMBER;
        NUENTITYID        NUMBER;
        NUPLANID          NUMBER;
        NUEXTPACKAGEID    NUMBER;
        NUUNITTYPEID      NUMBER;

        RCMOTIVE          DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGES        DAMO_PACKAGES.STYMO_PACKAGES;
        RCPS_PACKAGE_TYPE  DAPS_PACKAGE_TYPE.STYPS_PACKAGE_TYPE;
        NUERRORCODE       GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE    VARCHAR2(2000);
        NUPRODUCTTYPEID   PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;
        SBPACKTYPETAG     MO_PACKAGES.TAG_NAME%TYPE;
        SBPRODUCTTYPETAG  SERVICIO.SERVTXML%TYPE;
        RCWFDATAEXTERNAL  DAWF_DATA_EXTERNAL.STYWF_DATA_EXTERNAL;

        EXBUILDEREXECUTOR   EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.CreatePlanAnnulWfByPack. Paquete:['||INUPACKAGEID||']',4);

        
        RCPACKAGES :=  DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);

        
        NUEXTERNALID := INUPACKAGEID;
        NUENTITYID   := GNUENTITY_PACK;
        NUINTERFACE  := MO_BOPARAMETER.FNUGETINTERFACE_ID_PACK;
        UT_TRACE.TRACE('Id Externo:['||NUEXTERNALID||']Entidad:['||NUENTITYID||']Cï¿½digo Interfaz:['||NUINTERFACE||']',4);

         
        RCPS_PACKAGE_TYPE :=  DAPS_PACKAGE_TYPE.FRCGETRECORD(RCPACKAGES.PACKAGE_TYPE_ID);
        SBPACKTYPETAG     :=  RCPS_PACKAGE_TYPE.TAG_NAME;
        NUPRODUCTTYPEID   :=  MO_BOPACKAGES.FRCGETINITIALMOTIVE(INUPACKAGEID, FALSE).PRODUCT_TYPE_ID;
        NUEXTPACKAGEID    :=  INUPACKAGEID;
        IF ( PKTBLSERVICIO.FBLEXIST(NUPRODUCTTYPEID) ) THEN
            SBPRODUCTTYPETAG := PKTBLSERVICIO.FSBGETTAG_NAME(NUPRODUCTTYPEID);
        ELSE
            SBPRODUCTTYPETAG := NULL;
        END IF;
        UT_TRACE.TRACE('PackTag:['||SBPACKTYPETAG||'] ProdTag:['||SBPRODUCTTYPETAG||']',4);

        
        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);

        
        WF_BOCREATIONPLANCONTROL.BUILDEREXECUTOR
            (
            NUEXTERNALID,
            NUENTITYID,
            NUINTERFACE,
            NUEXECMAXTIME,
            NUSTDTIME,
            NUPLANID,
            NUUNITTYPEID,
            NUERRORCODE,
            SBERRORMESSAGE
            );
        IF NVL(NUERRORCODE,MO_BOCONSTANTS.CNUOK) <> MO_BOCONSTANTS.CNUOK THEN
            RAISE EXBUILDEREXECUTOR;
        END IF;

        RCWFDATAEXTERNAL.PLAN_ID          := NUPLANID;
        RCWFDATAEXTERNAL.PACK_TYPE_TAG    := SBPACKTYPETAG;
        RCWFDATAEXTERNAL.PRODUCT_TYPE_TAG := SBPRODUCTTYPETAG;
        RCWFDATAEXTERNAL.PACKAGE_ID       := NVL(INUORIGINPACK,INUPACKAGEID);
        RCWFDATAEXTERNAL.UNIT_TYPE_ID     := NUUNITTYPEID;
        DAWF_DATA_EXTERNAL.INSRECORD( RCWFDATAEXTERNAL );

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.CreatePlanAnnulWfByPack',3);
    EXCEPTION
        WHEN EXBUILDEREXECUTOR THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                'WF_BOCreationPlanControl.BuilderExecutor' || '|' ||
                TO_CHAR(NUERRORCODE) || ' - ' || SBERRORMESSAGE
                );
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    


































    PROCEDURE ANNULCOMPONENTS
        (
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUANNULCAUSALID    IN MO_MOTIVE.ANNUL_CAUSAL_ID%TYPE,
        INUACTIONID         IN GE_ACTION_MODULE.ACTION_ID%TYPE
        )
    IS
        CURFCOMPONENTSBYMOTIVE  CONSTANTS.TYREFCURSOR;
        RCCOMPONENTSBYMOTIVE    MO_BCCOMPONENT.STYRCCOMPONENTSBYMOTIVE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulComponents',4);

        
        CURFCOMPONENTSBYMOTIVE := MO_BCCOMPONENT.FRFCOMPONENTSBYMOTIVE(INUMOTIVEID);
        FETCH CURFCOMPONENTSBYMOTIVE INTO RCCOMPONENTSBYMOTIVE ;
        WHILE CURFCOMPONENTSBYMOTIVE%FOUND LOOP
            UT_TRACE.TRACE('Componente:['||RCCOMPONENTSBYMOTIVE.COMPONENT_ID||']Estado:['||RCCOMPONENTSBYMOTIVE.MOTIVE_STATUS_ID||']',5);

            
            IF MO_BOMOTIVEACTIONUTIL.FBLCURRSTATISVALIDGENCOMP
                    (
                    INUACTIONID,
                    RCCOMPONENTSBYMOTIVE.MOTIVE_STATUS_ID,
                    RCCOMPONENTSBYMOTIVE.PROD_MOTIVE_COMP_ID
                    )
            THEN

                
                UPDATEOBJECT
                    (
                    RCCOMPONENTSBYMOTIVE.COMPONENT_ID,
                    MO_BOCONSTANTS.CSBMO_COMPONENT,
                    INUANNULCAUSALID,
                    INUACTIONID,
                    FALSE,
                    TRUE
                    );


                
                VALIDWITHDRAWCOMPBEFOREINST(RCCOMPONENTSBYMOTIVE.COMPONENT_ID);
            END IF;

            FETCH CURFCOMPONENTSBYMOTIVE INTO RCCOMPONENTSBYMOTIVE ;
        END LOOP;
        CLOSE CURFCOMPONENTSBYMOTIVE;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulComponents',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTSBYMOTIVE);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTSBYMOTIVE);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    











































    PROCEDURE ANNULFINALCOMP
    (
        INUCOMPONENTID  IN MO_COMPONENT.MOTIVE_ID%TYPE
    )
    IS
        RCCOMPONENT             DAMO_COMPONENT.STYMO_COMPONENT;
        RCMOTIVE                DAMO_MOTIVE.STYMO_MOTIVE;
        CURFGETCHILDCOMPONENT   CONSTANTS.TYREFCURSOR;
        RCGETCHILDCOMPONENT     MO_BCCOMPONENT.STYRCGETCHILDCOMPONENT;
        TBASSOPACKS             DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUFATHERIDX             BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulFinalComp. Componente:['||INUCOMPONENTID||']',1);

        
        IF (DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(INUCOMPONENTID) = GNUSTATANNULCOMP) THEN
            UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulFinalComp, El componente ya se encuentra anulado',1);
            RETURN;
        END IF;

        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;

        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(CSBMOTIVE_INSTANCE,NULL);

        
        LOCKEDCOMPONENT(INUCOMPONENTID,RCCOMPONENT);
        
        LOCKEDMOTIVE(RCCOMPONENT.MOTIVE_ID,RCMOTIVE);
        
        MO_BOMOTIVEACTIONUTIL.VALIDATEACTIONFORCOMP
            (
            INUCOMPONENTID,
            RCCOMPONENT.MOTIVE_STATUS_ID,
            MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL,
            RCCOMPONENT.PROD_MOTIVE_COMP_ID
            );

        
        MO_BOACTIONCONTROLLER.COMPONENTINTERNALTRANSITION(INUCOMPONENTID,MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL);

        
        CURFGETCHILDCOMPONENT := MO_BCCOMPONENT.FRFGETCHILDCOMPONENT(INUCOMPONENTID);
        FETCH CURFGETCHILDCOMPONENT INTO RCGETCHILDCOMPONENT;
        WHILE CURFGETCHILDCOMPONENT%FOUND LOOP
            UT_TRACE.TRACE('Anula Comp Hijo:['||RCGETCHILDCOMPONENT.COMPONENT_ID||']Estado:['||RCGETCHILDCOMPONENT.MOTIVE_STATUS_ID||']',3);

            
            IF MO_BOMOTIVEACTIONUTIL.FBLCURRSTATISVALIDGENCOMP
                    (
                    MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL,
                    RCGETCHILDCOMPONENT.MOTIVE_STATUS_ID,
                    RCGETCHILDCOMPONENT.PROD_MOTIVE_COMP_ID
                    )
            THEN
                
                MO_BOACTIONCONTROLLER.COMPONENTINTERNALTRANSITION(RCGETCHILDCOMPONENT.COMPONENT_ID,MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL);
            END IF;

            FETCH CURFGETCHILDCOMPONENT INTO RCGETCHILDCOMPONENT;
        END LOOP;
        CLOSE CURFGETCHILDCOMPONENT;

        UT_TRACE.TRACE('Iniciï¿½ La Transiciï¿½n de Estados del Motivo:['||RCCOMPONENT.MOTIVE_ID||']',2);
        
        MO_BOACTIONCONTROLLER.MOTIVEINTERNALTRANSITION(RCCOMPONENT.MOTIVE_ID,MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL);

        UT_TRACE.TRACE('Iniciï¿½ La Transiciï¿½n de Estados del Paquete:['||RCMOTIVE.PACKAGE_ID||']',2);
        
        MO_BOACTIONCONTROLLER.PACKAGEINTERNALTRANSITION(RCMOTIVE.PACKAGE_ID,MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL);

        
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;

        
        TBASSOPACKS := MO_BCPACKAGES_ASSO.FTBPACKASSOBYPACKID(RCMOTIVE.PACKAGE_ID);
        NUFATHERIDX := TBASSOPACKS.FIRST;
        WHILE (NUFATHERIDX IS NOT NULL) LOOP

            
            IF (TBASSOPACKS(NUFATHERIDX).ANNUL_DEPENDENT = CC_BOCONSTANTS.CSBSI AND
                FBLALLREQPACKSANNULED(TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO)) THEN

                
                UT_TRACE.TRACE('Anula la sol Padre, Id['||TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO||']',6);
                ANNULFINALPACK(TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO);

            END IF;
            NUFATHERIDX := TBASSOPACKS.NEXT(NUFATHERIDX);
        END LOOP;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulFinalComp',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFGETCHILDCOMPONENT);
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFGETCHILDCOMPONENT);
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULFINALCOMP;

    












































    PROCEDURE ANNULFINALPACK
    (
        INUPACKAGEID    IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
	IS
        RCPACKAGES          DAMO_PACKAGES.STYMO_PACKAGES;
        CURFMOTIVE          CONSTANTS.TYREFCURSOR;
        CURFCOMPONENT       CONSTANTS.TYREFCURSOR;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
        NUSTATUSID          MO_PACKAGES.MOTIVE_STATUS_ID%TYPE;
        TBASSOPACKS         DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUFATHERIDX         BINARY_INTEGER;
	BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulFinalPack. Paquete:['||INUPACKAGEID||']',1);

        
        NUSTATUSID := DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID);

        
        IF (NUSTATUSID <> MO_BOCONSTANTS.CNUSTATUS_ANNUL_PACK) THEN

            
            GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;

            
            GE_BOINSTANCECONTROL.CREATEINSTANCE(CSBMOTIVE_INSTANCE,NULL);

            
            LOCKEDPACKAGE(INUPACKAGEID,RCPACKAGES);

            
            MO_BOMOTIVEACTIONUTIL.VALIDATEACTIONFORPACK
            (
                INUPACKAGEID,
                RCPACKAGES.MOTIVE_STATUS_ID,
                MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL,
                RCPACKAGES.PACKAGE_TYPE_ID
            );

            
            CURFMOTIVE := MO_BCMOTIVE.FRFMOTIVESBYPACKAGEID(INUPACKAGEID);
            FETCH CURFMOTIVE INTO RCMOTIVE;
            WHILE CURFMOTIVE%FOUND LOOP
                UT_TRACE.TRACE('Anula Motivo:['||RCMOTIVE.MOTIVE_ID||']Estado:['||RCMOTIVE.MOTIVE_STATUS_ID||']',2);

                
                IF (MO_BOMOTIVEACTIONUTIL.FBLCURRSTATISVALIDGENMOT
                        (
                        MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL,
                        RCMOTIVE.MOTIVE_STATUS_ID,
                        RCMOTIVE.PRODUCT_MOTIVE_ID
                        )
                    )
                THEN

                    
                    CURFCOMPONENT := MO_BCCOMPONENT.FRFCOMPONENTSBYMOTIVE(RCMOTIVE.MOTIVE_ID);
                    FETCH CURFCOMPONENT INTO RCCOMPONENT;
                    WHILE CURFCOMPONENT%FOUND LOOP
                        UT_TRACE.TRACE('Anula Componente:['||RCCOMPONENT.COMPONENT_ID||']Estado:['||RCCOMPONENT.MOTIVE_STATUS_ID ||']',3);

                        
                        IF (MO_BOMOTIVEACTIONUTIL.FBLCURRSTATISVALIDGENCOMP
                                (
                                MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL,
                                RCCOMPONENT.MOTIVE_STATUS_ID,
                                RCCOMPONENT.PROD_MOTIVE_COMP_ID
                                )
                            )
                        THEN

                            UT_TRACE.TRACE('Iniciï¿½ La Transiciï¿½n de Estados del Componente:['||RCCOMPONENT.COMPONENT_ID||']',3);
                             
                            MO_BOACTIONCONTROLLER.COMPONENTINTERNALTRANSITION(RCCOMPONENT.COMPONENT_ID,MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL);
                        END IF;

                        FETCH CURFCOMPONENT INTO RCCOMPONENT;
                    END LOOP;
                    CLOSE CURFCOMPONENT;

                    UT_TRACE.TRACE('Iniciï¿½ La Transiciï¿½n de Estados del Motivo:['||RCMOTIVE.MOTIVE_ID||']',2);
                    
                    MO_BOACTIONCONTROLLER.MOTIVEINTERNALTRANSITION(RCMOTIVE.MOTIVE_ID,MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL);

                END IF;

                FETCH CURFMOTIVE INTO RCMOTIVE;
            END LOOP;
            CLOSE CURFMOTIVE;

            UT_TRACE.TRACE('Iniciï¿½ La Transiciï¿½n de Estados del Paquete:['||INUPACKAGEID||']',2);
            
            MO_BOACTIONCONTROLLER.PACKAGEINTERNALTRANSITION(INUPACKAGEID,MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_FINAL);

            
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;

            
            TBASSOPACKS := MO_BCPACKAGES_ASSO.FTBPACKASSOBYPACKID(INUPACKAGEID);
            NUFATHERIDX := TBASSOPACKS.FIRST;
            WHILE (NUFATHERIDX IS NOT NULL) LOOP

                
                IF (TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO IS NOT NULL) THEN
                    LOCKEDPACKAGE(TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO,RCPACKAGES);
                END IF;
                
                
                IF (TBASSOPACKS(NUFATHERIDX).ANNUL_DEPENDENT = CC_BOCONSTANTS.CSBSI AND
                    FBLALLREQPACKSANNULED(TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO)) THEN

                    
                    UT_TRACE.TRACE('Anula la sol Padre, Id['||TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO||']',6);
                    ANNULFINALPACK(TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO);

                END IF;
                NUFATHERIDX := TBASSOPACKS.NEXT(NUFATHERIDX);
            END LOOP;

        
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulFinalPack',1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVE);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVE);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END ANNULFINALPACK;

    FUNCTION FSBALLCHILDANNULED
    (
        INUCOMPONENTID  IN MO_COMPONENT.COMPONENT_ID%TYPE
    ) RETURN VARCHAR2
    IS
        RFCHILDREN  CONSTANTS.TYREFCURSOR;
        RCCOMPONENT DAMO_COMPONENT.STYMO_COMPONENT;
        CNUANNULCMPSTATUS    CONSTANT NUMBER := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ANNUL_COMP);
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.fsbAllChildAnnuled',1);

        RFCHILDREN  := MO_BCCOMPONENT.FRFGETCHILDCOMPONENT(INUCOMPONENTID);
        FETCH RFCHILDREN INTO  RCCOMPONENT;
        WHILE RFCHILDREN%FOUND LOOP
            IF RCCOMPONENT.MOTIVE_STATUS_ID <> CNUANNULCMPSTATUS THEN
                UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.fsbAllChildAnnuled retorna mo_boparameter.fsbGetNO',1);
                RETURN MO_BOPARAMETER.FSBGETNO;
            END IF;
            FETCH RFCHILDREN INTO  RCCOMPONENT;
        END LOOP;
        GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCHILDREN);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.fsbAllChildAnnuled retorna mo_boparameter.fsbGetYES',1);
        RETURN MO_BOPARAMETER.FSBGETYES;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCHILDREN);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCHILDREN);
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;
    























    PROCEDURE ANNULFINAL
    (
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        TBANNULDETAIL   DAMO_PACK_ANNUL_DETAIL.TYTBMO_PACK_ANNUL_DETAIL;
        NUORIGINPACK    MO_PACKAGES.PACKAGE_ID%TYPE;
        NUDETAIL        BINARY_INTEGER;

    BEGIN
        
        TBANNULDETAIL := MO_BCDETALLEANULSOLICITUD.FTBOBTDETALLEANULACION(INUPACKAGEID);

        
        NUDETAIL := TBANNULDETAIL.FIRST;
        WHILE (NUDETAIL IS NOT NULL) LOOP

            
            IF (TBANNULDETAIL(NUDETAIL).COMPONENT_ID IS NOT NULL) THEN
                
                ANNULFINALCOMP(TBANNULDETAIL(NUDETAIL).COMPONENT_ID);

            ELSE
                
                ANNULFINALPACK(TBANNULDETAIL(NUDETAIL).PACKAGE_ID);
            END IF;

            NUDETAIL := TBANNULDETAIL.NEXT(NUDETAIL);
        END LOOP;

        
        MO_BOATTENTION.ATTENDPACKAGE(INUPACKAGEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULFINAL;

    PROCEDURE ANNULCOMPUNASSIGNINDIV
    (
        IRCCOMPONENT        IN DAMO_COMPONENT.STYMO_COMPONENT,
        INUANNULCAUSALID    IN MO_COMPONENT.ANNUL_CAUSAL_ID%TYPE,
        INURETIRETYPEID     IN PR_COMPONENT_RETIRE.RETIRE_TYPE_ID%TYPE,
        IDTSYSDATE          IN DATE
    )
    IS
        RCCOMPONENTMOT  DAMO_COMPONENT.STYMO_COMPONENT;
        RCCOMPONENTPROD DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
        RCCOMPONENTMOT := IRCCOMPONENT;

        
        RCCOMPONENTMOT.MOTIVE_STATUS_ID := MO_BOSTATUSPARAMETER.FNUGETSTATUS_ANNUL_COMP;
        RCCOMPONENTMOT.ANNUL_CAUSAL_ID := INUANNULCAUSALID;
        RCCOMPONENTMOT.ANNUL_DATE := IDTSYSDATE;
        RCCOMPONENTMOT.STATUS_CHANGE_DATE := IDTSYSDATE;
        DAMO_COMPONENT.UPDRECORD(RCCOMPONENTMOT);

        
        CC_BOADMINISTRATIVEPROCESS.PROCESSANNULADMINACTIVITY(MO_BOPARAMETER.FNUGETENTITY_COMPONENT, IRCCOMPONENT.COMPONENT_ID);

        UT_TRACE.TRACE('Componente Asociado:['||RCCOMPONENTMOT.COMPONENT_ID_PROD||']',13);

        
        IF RCCOMPONENTMOT.COMPONENT_ID_PROD IS NULL THEN
            RETURN;
        END IF;

        
        RCCOMPONENTPROD := DAPR_COMPONENT.FRCGETRECORD(RCCOMPONENTMOT.COMPONENT_ID_PROD);

        IF (RCCOMPONENTPROD.COMPONENT_STATUS_ID <> PR_BOCREATIONCOMPONENT.CNUCOMPSTATINSTALLATIONPEND) THEN

            
            PR_BORETIRE.COMPONENTRETIRE (
                                        RCCOMPONENTPROD,
                                        INURETIRETYPEID,
                                        IDTSYSDATE,
                                        IDTSYSDATE,
                                        RCCOMPONENTMOT.MOTIVE_ID,
                                        TRUE 
                                        ) ;
        ELSE
            
            PR_BORETIRE.WITHDRAWCOMPBEFOREINST(RCCOMPONENTPROD, INURETIRETYPEID, IDTSYSDATE);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE ANNULCOMPONENTUNASSIGN
    (
        INUCOMPONENTID      IN MO_COMPONENT.COMPONENT_ID%TYPE,
        ISBCOMPONENTSTATUS  IN VARCHAR2,
        INUANNULCAUSALID    IN MO_COMPONENT.ANNUL_CAUSAL_ID%TYPE,
        INURETIRETYPEID     IN PR_COMPONENT_RETIRE.RETIRE_TYPE_ID%TYPE,
        INUACTIONID         IN GE_ACTION_MODULE.ACTION_ID%TYPE
    )
    IS
        CURFCOMPONENT       CONSTANTS.TYREFCURSOR;
        CURFCOMPONENTPACK   CONSTANTS.TYREFCURSOR;
        RCCOMPONENT         DAMO_COMPONENT.STYMO_COMPONENT;
        RCCOMPONENTPACK     DAMO_COMPONENT.STYMO_COMPONENT;
        DTSYSDATE           DATE := SYSDATE;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOAnnulment.AnnulComponentUnAssign',10);
        UT_TRACE.TRACE('Componente:['||INUCOMPONENTID||']Estados:['||ISBCOMPONENTSTATUS||']Causa:['||INUANNULCAUSALID||']',11);
        UT_TRACE.TRACE('Tipo:['||INURETIRETYPEID||']Acciï¿½n:['||INUACTIONID||']',11);

        
        RCCOMPONENT := DAMO_COMPONENT.FRCGETRECORD(INUCOMPONENTID);

        NUMOTIVEID := RCCOMPONENT.MOTIVE_ID;
        UT_TRACE.TRACE('Motivo:['||NUMOTIVEID||']',11);

        
        CURFCOMPONENT := MO_BCCOMPONENT.FRFGETCHILDDIRECTCOMPONENT(INUCOMPONENTID);
        LOOP
            FETCH CURFCOMPONENT INTO RCCOMPONENT;
            EXIT WHEN CURFCOMPONENT%NOTFOUND;

            UT_TRACE.TRACE('Componente:['||RCCOMPONENT.COMPONENT_ID||']Estados:['||RCCOMPONENT.MOTIVE_STATUS_ID||']Tipo:['||RCCOMPONENT.COMPONENT_TYPE_ID||']',12);

            
            IF INSTR(',' || ISBCOMPONENTSTATUS|| ',' , ',' || RCCOMPONENT.MOTIVE_STATUS_ID || ',') > 0 THEN

                
                IF  RCCOMPONENT.COMPONENT_TYPE_ID = MO_BOCONSTANTS.CNUCOMPTYPESPECSERV
                    OR
                    RCCOMPONENT.COMPONENT_TYPE_ID = MO_BOCONSTANTS.CNUCOMPTYPEPACSPESER
                THEN

                    
                    ANNULCOMPUNASSIGNINDIV(RCCOMPONENT,INUANNULCAUSALID,INURETIRETYPEID,DTSYSDATE);
                END IF;

                
                IF RCCOMPONENT.COMPONENT_TYPE_ID = MO_BOCONSTANTS.CNUCOMPTYPEPACSPESER THEN

                    
                    CURFCOMPONENTPACK := MO_BCCOMPONENT.FRFGETCHILDDIRECTCOMPONENT(RCCOMPONENT.COMPONENT_ID);
                    FETCH CURFCOMPONENTPACK INTO RCCOMPONENTPACK;
                    WHILE CURFCOMPONENTPACK%FOUND LOOP
                        UT_TRACE.TRACE('Componente Servicio:['||RCCOMPONENTPACK.COMPONENT_ID||']',13);

                        
                        ANNULCOMPUNASSIGNINDIV(RCCOMPONENTPACK,INUANNULCAUSALID,INURETIRETYPEID,DTSYSDATE);

                        FETCH CURFCOMPONENTPACK INTO RCCOMPONENTPACK;
                    END LOOP;
                    CLOSE CURFCOMPONENTPACK;
                END IF;
            END IF;
        END LOOP;
        CLOSE CURFCOMPONENT;

        
        MO_BOMOTIVEACTIONUTIL.EXECTRANSTATUSFORMOT(NUMOTIVEID,INUACTIONID);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAnnulment.AnnulComponentUnAssign',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTPACK);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTPACK);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FBOSALESINREQUEST
    (
        INUPACKAGEID    IN MO_PACKAGES.PACKAGE_ID%TYPE
    )
    RETURN BOOLEAN
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia  MO_BOANNULMENT.fboSalesInRequest inuPackageID:['||INUPACKAGEID||']', 10);

        
        FOR RCPACKAGE IN CUPACKAGESNOTANNUL ( INUPACKAGEID ) LOOP

            
            IF(MO_BOMOTIVE.FBOHASMOTIVESBYPACKANDMOTITYPE(RCPACKAGE.PACKAGE_ID, MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE)) THEN

                UT_TRACE.TRACE('Fin  MO_BOANNULMENT.fboSalesInRequest RETURN True', 10);
                RETURN GE_BOCONSTANTS.GETTRUE;

            END IF;

        END LOOP;

        UT_TRACE.TRACE('Fin  MO_BOANNULMENT.fboSalesInRequest RETURN False', 10);
        RETURN GE_BOCONSTANTS.GETFALSE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUPACKAGESNOTANNUL%ISOPEN) THEN
                CLOSE CUPACKAGESNOTANNUL;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUPACKAGESNOTANNUL%ISOPEN) THEN
                CLOSE CUPACKAGESNOTANNUL;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOSALESINREQUEST;

    





















    PROCEDURE PACKAGEINTTRANSITION
    (
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUANNULCAUSALID    IN MO_MOTIVE.ANNUL_CAUSAL_ID%TYPE
    )
    IS
        RCPACKAGES  DAMO_PACKAGES.STYMO_PACKAGES;
        TBMOTIVES   DAMO_MOTIVE.TYTBMO_MOTIVE;
        NUINDX      BINARY_INTEGER;
        TBASSOPACKS DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUFATHERIDX BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('INICIO MO_BOAnnulment.PackageIntTransition',5);

        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;

        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(CSBMOTIVE_INSTANCE, NULL);

        
        LOCKEDPACKAGE(INUPACKAGEID,RCPACKAGES);

        
        MO_BOMOTIVEACTIONUTIL.VALIDATEACTIONFORPACK(INUPACKAGEID,
                                                    RCPACKAGES.MOTIVE_STATUS_ID,
                                                    MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_INTERNA,
                                                    RCPACKAGES.PACKAGE_TYPE_ID
                                                    );

        
        TBMOTIVES := MO_BCMOTIVE.FTBALLMOTIVESBYPACK(INUPACKAGEID);
        NUINDX := TBMOTIVES.FIRST;
        WHILE (NUINDX IS NOT NULL) LOOP
            UT_TRACE.TRACE('Anula Motivo:['||TBMOTIVES(NUINDX).MOTIVE_ID||']Estado:['||TBMOTIVES(NUINDX).MOTIVE_STATUS_ID||']',6);

            
            IF (MO_BOMOTIVEACTIONUTIL.FBLCURRSTATISVALIDGENMOT(MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_INTERNA,
                                                               TBMOTIVES(NUINDX).MOTIVE_STATUS_ID,
                                                               TBMOTIVES(NUINDX).PRODUCT_MOTIVE_ID)) THEN

                
                ANNULCOMPONENTS(TBMOTIVES(NUINDX).MOTIVE_ID, INUANNULCAUSALID, MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_INTERNA);

                
                UT_TRACE.TRACE('Iniciï¿½ Transiciï¿½n de Estados Para el Motivo',6);
                UPDATEOBJECT(TBMOTIVES(NUINDX).MOTIVE_ID,
                             MO_BOCONSTANTS.CSBMO_MOTIVE,
                             INUANNULCAUSALID,
                             MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_INTERNA,
                             TRUE,
                             TRUE
                             );

                
                IF (TBMOTIVES(NUINDX).MOTIVE_TYPE_ID = MO_BOCONSTANTS.CNUINSTAL_MOTI_TYPE) THEN
                    UT_TRACE.TRACE('Iniciï¿½ la actualizaciï¿½n del estado del producto a Retirado sin instalaciï¿½n.', 6);
                    PR_BOPRODUCT.UPDPRODRETUNINSTALL(TBMOTIVES(NUINDX).PACKAGE_ID, TBMOTIVES(NUINDX).MOTIVE_ID);
                END IF;

                
                IF (TBMOTIVES(NUINDX).MOTIVE_TYPE_ID IN (MO_BOCONSTANTS.CNURETIRE_MOTI_TYPE, MO_BOCONSTANTS.CNUMOVE_MOTI_TYPE)) THEN
                    UT_TRACE.TRACE('Iniciï¿½ la actualizaciï¿½n del estado del producto a Activo ï¿½ Suspendido.', 6);
                    PR_BOPRODUCT.UPDPRODPENDRETORPENDTRAS(TBMOTIVES(NUINDX).PACKAGE_ID, TBMOTIVES(NUINDX).MOTIVE_ID);
                END IF;

                
                IF (TBMOTIVES(NUINDX).MOTIVE_TYPE_ID = PS_BOMOTIVETYPE.FNUBUNDLED_MOTI_TYPE) THEN
                    CC_BOBUNDLINGPROCESS.RETIREBUNDLEDBYPROD(TBMOTIVES(NUINDX).PRODUCT_ID);
                END IF;
            END IF;


            NUINDX := TBMOTIVES.NEXT(NUINDX);
        END LOOP;

        UT_TRACE.TRACE('Iniciï¿½ La Transiciï¿½n de Estados del Paquete:['||INUPACKAGEID||']',6);

        
        MO_BOACTIONCONTROLLER.PACKAGEINTERNALTRANSITION(INUPACKAGEID,MO_BOACTIONPARAMETER.FNUGETACTION_ANNUL_INTERNA);

        
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;

        
        TBASSOPACKS := MO_BCPACKAGES_ASSO.FTBPACKASSOBYPACKID(INUPACKAGEID);
        NUFATHERIDX := TBASSOPACKS.FIRST;
        WHILE (NUFATHERIDX IS NOT NULL) LOOP

            
            IF (TBASSOPACKS(NUFATHERIDX).ANNUL_DEPENDENT = CC_BOCONSTANTS.CSBSI AND
                FBLALLPACKISANULLINREQ(TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO)) THEN

                
                UT_TRACE.TRACE('Anula la sol Padre, Id['||TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO||']',6);
                PACKAGEINTTRANSITION(TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO, INUANNULCAUSALID);

            END IF;
            NUFATHERIDX := TBASSOPACKS.NEXT(NUFATHERIDX);
        END LOOP;

        UT_TRACE.TRACE('FIN MO_BOAnnulment.PackageIntTransition - OK',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PACKAGEINTTRANSITION;

    






















    PROCEDURE ANNULWFPLAN
    (
        INUACTIVITYID   IN  WF_INSTANCE.INSTANCE_ID%TYPE
    )
    IS
        RCACTIVITY      DAWF_INSTANCE.STYWF_INSTANCE;
        NUPACKID        MO_PACKAGES.PACKAGE_ID%TYPE;
        NUFATHERPLANID  WF_INSTANCE.INSTANCE_ID%TYPE;
        TBASSOPACKS     DAMO_PACKAGES_ASSO.TYTBMO_PACKAGES_ASSO;
        NUFATHERIDX     BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('INICIO MO_BOAnnulment.AnnulWFPlan',5);
		UT_TRACE.TRACE('INICIO MO_BOAnnulment.AnnulWFPlan-->INUACTIVITYID:'||INUACTIVITYID,5);
        
        WF_BOINSTANCE.UPDANNULPLANSTATUS(INUACTIVITYID);

        
        RCACTIVITY := DAWF_INSTANCE.FRCGETRECORD(INUACTIVITYID);

        
        NUPACKID := MO_BOPACKAGES.FNUGETPACKIDBYENTITY(RCACTIVITY.EXTERNAL_ID, RCACTIVITY.ENTITY_ID);

        
        TBASSOPACKS := MO_BCPACKAGES_ASSO.FTBPACKASSOBYPACKID(NUPACKID);
        NUFATHERIDX := TBASSOPACKS.FIRST;
        WHILE (NUFATHERIDX IS NOT NULL) LOOP

            
            IF (TBASSOPACKS(NUFATHERIDX).ANNUL_DEPENDENT = CC_BOCONSTANTS.CSBSI AND
                FBLALLPACKISANULLINREQ(TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO)) THEN

                UT_TRACE.TRACE('Anula el plan de la sol Padre, Id['||TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO||']',6);
                
                NUFATHERPLANID := WF_BOINSTANCE.FNUGETPLANID(TBASSOPACKS(NUFATHERIDX).PACKAGE_ID_ASSO, GNUENTITY_PACK);
                
                ANNULWFPLAN(NUFATHERPLANID);

            END IF;
            NUFATHERIDX := TBASSOPACKS.NEXT(NUFATHERIDX);
        END LOOP;

        UT_TRACE.TRACE('FIN MO_BOAnnulment.AnnulWFPlan - OK',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULWFPLAN;

    
















    PROCEDURE ANNULFATHERCOMPWF
    (
        INUCOMPID   IN MO_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
        NUFATHERCOMPID      MO_COMPONENT.COMPONENT_ID%TYPE;
        TBCHILDCOMPS        DAMO_COMPONENT.TYTBMO_COMPONENT;
        NUINDX              BINARY_INTEGER;
        BOANNULFATHERACT    BOOLEAN := TRUE;
    BEGIN
        UT_TRACE.TRACE('INICIO MO_BOAnnulment.AnnulFatherCompWF',15);

        
        IF (DAMO_COMP_LINK.FBLEXIST(INUCOMPID)) THEN
            
            NUFATHERCOMPID := DAMO_COMP_LINK.FNUGETFATHER_COMPONENT_ID(INUCOMPID);
            UT_TRACE.TRACE('Componente padre: '||NUFATHERCOMPID, 16);

            
            IF (NUFATHERCOMPID IS NOT NULL AND
                DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(NUFATHERCOMPID) = GNUSTATCOMPPRODEX) THEN

                
                TBCHILDCOMPS := MO_BCCOMPONENT.FTBGETCHILDCOMPONENT(NUFATHERCOMPID);
                NUINDX := TBCHILDCOMPS.FIRST;
                WHILE (NUINDX IS NOT NULL) LOOP
                    
                    IF (NOT FBOINANNULPROCESS(TBCHILDCOMPS(NUINDX).MOTIVE_STATUS_ID) AND
                        TBCHILDCOMPS(NUINDX).COMPONENT_ID != INUCOMPID) THEN
                        BOANNULFATHERACT := FALSE;
                        UT_TRACE.TRACE('Componente hijo['||TBCHILDCOMPS(NUINDX).COMPONENT_ID||'] estado['||
                                       TBCHILDCOMPS(NUINDX).MOTIVE_STATUS_ID||'] NO se debe anular el padre', 16);
                        EXIT;
                    END IF;
                    NUINDX := TBCHILDCOMPS.NEXT(NUINDX);
                END LOOP;

                
                IF (BOANNULFATHERACT) THEN
                    UT_TRACE.TRACE('Se anulan las actividades del componente['||NUFATHERCOMPID||']', 16);
                    FINISHALLWFACTIVITIES(NUFATHERCOMPID, GNUENTITY_COMP);
                    
                    ANNULFATHERCOMPWF(NUFATHERCOMPID);
                END IF;
            END IF;
        END IF;

        UT_TRACE.TRACE('FIN MO_BOAnnulment.AnnulFatherCompWF - OK', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ANNULFATHERCOMPWF;

END MO_BOANNULMENT;