PACKAGE BODY TT_BCBasicDataServices
IS



































































































































































    
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO204585';

    CSBDISP_PARSER_ADDRESS CONSTANT GE_PARAMETER.VALUE%TYPE := GE_BOPARAMETER.FSBGET('DISP_PARSER_ADDRESS');

    
    
    TYPE TYDAMTYPEDATA IS RECORD
    (
        COMPONENT_TYPE_ID PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE,
        CLASS_SERVICE_ID  PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE
    );

    
    TYPE TYDAMAGEPRODUCTCOUNT IS RECORD
    (
        PRODUCT_COUNT NUMBER
    );

    
    TYPE TYDAMAGETYPE IS RECORD
    (
        DESCRIPTION TT_DAMAGE_TYPE.DESCRIPTION%TYPE
    );

    
    TYPE TYPACKAGE IS RECORD
    (
        PACKAGE_ID TT_DAMAGE.PACKAGE_ID%TYPE,
        ADDRESS_ID AB_ADDRESS.ADDRESS_ID%TYPE
    );

    
    TYPE TYPERSON IS RECORD
    (
        NAME_ GE_PERSON.NAME_%TYPE
    );

    
    TYPE TYTBDAMTYPESDATA IS TABLE OF TYDAMTYPEDATA INDEX BY VARCHAR2(15);

    
    TYPE TYTBDAMAGEPRODUCTSCOUNT IS TABLE OF TYDAMAGEPRODUCTCOUNT INDEX BY VARCHAR2(15);

    
    TYPE TYTBDAMAGETYPES IS TABLE OF TYDAMAGETYPE INDEX BY VARCHAR2(15);

    
    TYPE TYTBPERSONS IS TABLE OF TYPERSON INDEX BY VARCHAR2(15);
    
    
    TYPE TYTBATTRIBUTEDTO IS TABLE OF GE_BOUTILITIES.STYSTATEMENTATTRIBUTE INDEX BY VARCHAR2(15);
    
    
    TYPE TYTBTIMEOUT      IS TABLE OF GE_BOUTILITIES.STYSTATEMENTATTRIBUTE  INDEX BY VARCHAR2(15);

    
    TBPRODDAMTYPEDATACACHE    TYTBDAMTYPESDATA;
    
    TBELEMDAMTYPEDATACACHE    TYTBDAMTYPESDATA;
    
    RCDAMAGEELEMENTCACHE      DATT_DAMAGE_ELEMENT.STYTT_DAMAGE_ELEMENT;
    
    TBDAMAGETYPECACHE         TYTBDAMAGETYPES;
    
    RCPACKAGECACHE            TYPACKAGE;
    
    TBPERSONSCACHE            TYTBPERSONS;
    
    RCADDRESSCACHE            DAAB_ADDRESS.STYAB_ADDRESS;
    
    TBGEOGRALOCATION          DAGE_GEOGRA_LOCATION.TYTBDESCRIPTION;
    
    TBELEMENTTYPE             DAIF_ELEMENT_TYPE.TYTBDISPLAY_NAME;
    
    TBCOMPONENTTYPE           DAPS_COMPONENT_TYPE.TYTBDESCRIPTION;
    
    TBATTRIBUTEDTOCACHE       TYTBATTRIBUTEDTO;
    
    TBTIMEOUTCACHE            TYTBTIMEOUT;

    
    TYPE TYMOTIVESTATUS IS RECORD
    (
        DESCRIPTION PS_MOTIVE_STATUS.DESCRIPTION%TYPE,
        IS_FINAL    PS_MOTIVE_STATUS.IS_ASSIGNED_STATUS%TYPE
    );
    TYPE TYTBMOTIVESTATUS IS TABLE OF TYMOTIVESTATUS INDEX BY BINARY_INTEGER;

    TBMOTIVESTATUS            TYTBMOTIVESTATUS;
    
    TBCAUSAL                  DAGE_CAUSAL.TYTBDESCRIPTION;
    
    TYPE TYTBIF_ELEMENT_CLASS IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(15);
    TBELEMENTCLASS            TYTBIF_ELEMENT_CLASS;
    
    TBOPERSECTOR              DAOR_OPERATING_SECTOR.TYTBDESCRIPTION;
    
    TYPE TYTBELEMENTSTATUS IS TABLE OF VARCHAR2(150) INDEX BY VARCHAR2(15);
    TBELEMENTSTATUS            TYTBELEMENTSTATUS;


	

    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    














    FUNCTION FSBGETOPERSECTOR (INUOPERSECTOR  IN  OR_OPERATING_SECTOR.DESCRIPTION%TYPE)
    RETURN VARCHAR2
    IS

    BEGIN
        IF (INUOPERSECTOR IS NULL) THEN
            RETURN '';
        END IF;

        IF (TBOPERSECTOR.EXISTS(INUOPERSECTOR)) THEN
            RETURN INUOPERSECTOR || ' - ' ||TBOPERSECTOR(INUOPERSECTOR);
        ELSE
            TBOPERSECTOR(INUOPERSECTOR) := DAOR_OPERATING_SECTOR.FSBGETDESCRIPTION(INUOPERSECTOR);
            RETURN INUOPERSECTOR || ' - ' ||TBOPERSECTOR(INUOPERSECTOR);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            ERRORS.SETERROR;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
    END;

    















    FUNCTION FSBGETCLASSELEMENTDESC
    (
        INUELEMENTTYPEID    IN IF_ELEMENT_CLASS.ELEMENT_TYPE_ID%TYPE,
        INUCLASSID          IN IF_ELEMENT_CLASS.CLASS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
    BEGIN
        IF INUELEMENTTYPEID IS NULL OR INUCLASSID IS NULL THEN
            RETURN ' ';
        END IF;

        IF (TBELEMENTCLASS.EXISTS(INUELEMENTTYPEID||'-'||INUCLASSID)) THEN
            RETURN INUCLASSID || ' - ' ||TBELEMENTCLASS(INUELEMENTTYPEID||'-'||INUCLASSID);
        ELSE
            TBELEMENTCLASS(INUELEMENTTYPEID||'-'||INUCLASSID) := DAIF_ELEMENT_CLASS.FSBGETDESCRIPTION(INUELEMENTTYPEID, INUCLASSID, 0);
            RETURN INUCLASSID || ' - ' ||TBELEMENTCLASS(INUELEMENTTYPEID||'-'||INUCLASSID);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
    END;

    















    PROCEDURE SETADDRESSCACHE(INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE)
    IS

    BEGIN

        IF (RCADDRESSCACHE.ADDRESS_ID IS NULL OR RCADDRESSCACHE.ADDRESS_ID != INUADDRESSID) THEN
            RCADDRESSCACHE := DAAB_ADDRESS.FRCGETRECORD(INUADDRESSID);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    FUNCTION FSBGETGEOGRALOCADESC
    (
        INUGEOGRALOCATION IN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    )
    RETURN VARCHAR2
    IS

    BEGIN
        IF (TBGEOGRALOCATION.EXISTS(INUGEOGRALOCATION)) THEN
            RETURN INUGEOGRALOCATION || ' - ' ||TBGEOGRALOCATION(INUGEOGRALOCATION);
        ELSE
            TBGEOGRALOCATION(INUGEOGRALOCATION) := DAGE_GEOGRA_LOCATION.FSBGETDESCRIPTION(INUGEOGRALOCATION);
            RETURN INUGEOGRALOCATION || ' - ' ||TBGEOGRALOCATION(INUGEOGRALOCATION);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    FUNCTION FSBGETMOTIVESTATUSDESC(INUMOTIVESTATUS IN PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE)
    RETURN VARCHAR2
    IS

        RCMOTIVESTATUS      DAPS_MOTIVE_STATUS.STYPS_MOTIVE_STATUS;
    BEGIN

        IF (TBMOTIVESTATUS.EXISTS(INUMOTIVESTATUS)) THEN
            RETURN INUMOTIVESTATUS ||' - '||TBMOTIVESTATUS(INUMOTIVESTATUS).DESCRIPTION;
        ELSE
            RCMOTIVESTATUS := DAPS_MOTIVE_STATUS.FRCGETRECORD(INUMOTIVESTATUS);
            TBMOTIVESTATUS(INUMOTIVESTATUS).IS_FINAL := RCMOTIVESTATUS.IS_FINAL_STATUS;
            TBMOTIVESTATUS(INUMOTIVESTATUS).DESCRIPTION := RCMOTIVESTATUS.DESCRIPTION;

            RETURN INUMOTIVESTATUS ||' - '||TBMOTIVESTATUS(INUMOTIVESTATUS).DESCRIPTION;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
    END;

    















    FUNCTION FSBGETISFINALSTATUS(INUMOTIVESTATUS IN PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE)
    RETURN VARCHAR2
    IS
        RCMOTIVESTATUS      DAPS_MOTIVE_STATUS.STYPS_MOTIVE_STATUS;
    BEGIN

        IF (TBMOTIVESTATUS.EXISTS(INUMOTIVESTATUS)) THEN
            RETURN TBMOTIVESTATUS(INUMOTIVESTATUS).IS_FINAL;
        ELSE
            RCMOTIVESTATUS := DAPS_MOTIVE_STATUS.FRCGETRECORD(INUMOTIVESTATUS);
            TBMOTIVESTATUS(INUMOTIVESTATUS).IS_FINAL := RCMOTIVESTATUS.IS_FINAL_STATUS;
            TBMOTIVESTATUS(INUMOTIVESTATUS).DESCRIPTION := RCMOTIVESTATUS.DESCRIPTION;

            RETURN TBMOTIVESTATUS(INUMOTIVESTATUS).IS_FINAL;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
    END;

    















    FUNCTION FSBGETELEMTYPEDESC(INUELEMENETTYPE IN IF_ELEMENT_TYPE.ELEMENT_TYPE_ID%TYPE)
    RETURN VARCHAR2
    IS

    BEGIN

        IF (TBELEMENTTYPE.EXISTS(INUELEMENETTYPE)) THEN
            RETURN INUELEMENETTYPE||' - '||TBELEMENTTYPE(INUELEMENETTYPE);
        ELSE
            TBELEMENTTYPE(INUELEMENETTYPE) := DAIF_ELEMENT_TYPE.FSBGETDISPLAY_NAME(INUELEMENETTYPE);
            RETURN INUELEMENETTYPE||' - '||TBELEMENTTYPE(INUELEMENETTYPE);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
























    FUNCTION FSBGETPRODUCTTYPE
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBRESULT    VARCHAR2(2000) := NULL;
        NUPRODTYPE  SERVICIO.SERVCODI%TYPE;

    BEGIN
        
        
        IF (INUPRODUCTID IS NOT NULL) THEN
            NUPRODTYPE  := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCTID, 0);
            IF (NUPRODTYPE IS NOT NULL) THEN
                SBRESULT  := NUPRODTYPE||' - '||PKTBLSERVICIO.FSBGETDESCRIPTION(NUPRODTYPE);
            END IF;
        END IF;
        
        RETURN SBRESULT;
        
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;

    






















    FUNCTION FSBGETDAMAGESTATUS
    (
        INUPACKAGEID    IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUDAMAGESTATUS IN MO_PACKAGES.MOTIVE_STATUS_ID%TYPE DEFAULT NULL
    )
    RETURN VARCHAR2
    IS
        SBRESULT            VARCHAR2(2000) := NULL;
        NUDAMAGESTATUS      MO_PACKAGES.MOTIVE_STATUS_ID%TYPE := INUDAMAGESTATUS;
        SBMOTSTATUSDESC     PS_MOTIVE_STATUS.DESCRIPTION%TYPE;

    BEGIN
        IF (INUDAMAGESTATUS IS NULL) THEN
            
            NUDAMAGESTATUS:= DAMO_PACKAGES.FNUGETMOTIVE_STATUS_ID(INUPACKAGEID);
            
        END IF;

        SBRESULT:= FSBGETMOTIVESTATUSDESC(NUDAMAGESTATUS);
        RETURN SBRESULT;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;

    





















    FUNCTION FSBGETDAMAGETYPE
    (
        INUPACKAGEID       IN TT_DAMAGE.PACKAGE_ID%TYPE,
        INUREGDAMAGETYPEID IN TT_DAMAGE.REG_DAMAGE_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN VARCHAR2
    IS
        SBRESULT            VARCHAR2(2000) := NULL;
        NUREGDAMAGETYPEID   TT_DAMAGE.REG_DAMAGE_TYPE_ID%TYPE := INUREGDAMAGETYPEID;
        SBDAMAGETYPEDESC    TT_DAMAGE_TYPE.DESCRIPTION%TYPE;
    BEGIN
        IF (INUREGDAMAGETYPEID IS NULL) THEN
            
            NUREGDAMAGETYPEID:= DATT_DAMAGE.FNUGETREG_DAMAGE_TYPE_ID(INUPACKAGEID);
        END IF;

        
        IF (TBDAMAGETYPECACHE.EXISTS(NUREGDAMAGETYPEID)) THEN
            SBDAMAGETYPEDESC := TBDAMAGETYPECACHE(NUREGDAMAGETYPEID).DESCRIPTION;
        ELSE
            SBDAMAGETYPEDESC := DATT_DAMAGE_TYPE.FSBGETDESCRIPTION(NUREGDAMAGETYPEID);
            TBDAMAGETYPECACHE(NUREGDAMAGETYPEID).DESCRIPTION := SBDAMAGETYPEDESC;
        END IF;

        SBRESULT    := NUREGDAMAGETYPEID||' - '||SBDAMAGETYPEDESC;
        
        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    





















    FUNCTION FSBGETPRODSERVICENUM
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBRESULT            PR_PRODUCT.SERVICE_NUMBER%TYPE := NULL;

    BEGIN
        
        IF (INUPRODUCTID IS NOT NULL) THEN
           SBRESULT  := DAPR_PRODUCT.FSBGETSERVICE_NUMBER(INUPRODUCTID, 0);
        END IF;
        
        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;

    




















    FUNCTION FSBGETDAMAGECAUSAL
    (
        INUDAMAGECAUSAL IN TT_DAMAGE.DAMAGE_CAUSAL_ID%TYPE
    )
    RETURN VARCHAR2
    IS

    BEGIN
        
        IF INUDAMAGECAUSAL IS NOT NULL THEN
            IF (TBCAUSAL.EXISTS(INUDAMAGECAUSAL)) THEN
                RETURN INUDAMAGECAUSAL||' - '|| TBCAUSAL(INUDAMAGECAUSAL);
            ELSE
                TBCAUSAL(INUDAMAGECAUSAL) := DAGE_CAUSAL.FSBGETDESCRIPTION(INUDAMAGECAUSAL);
                RETURN INUDAMAGECAUSAL||' - '|| TBCAUSAL(INUDAMAGECAUSAL);
            END IF;
        END IF;

        RETURN NULL;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN NULL;
    END;
    
    



















    FUNCTION FSBGETDAMAGREGPERSON
    (
        INUPERSONID  IN MO_PACKAGES.PERSON_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBRESULT            VARCHAR2(2000):= NULL;
        SBPERSONNAME        GE_PERSON.NAME_%TYPE;

    BEGIN
        
        
        IF (INUPERSONID IS NOT NULL) THEN
            IF (TBPERSONSCACHE.EXISTS(INUPERSONID)) THEN
                SBPERSONNAME:= TBPERSONSCACHE(INUPERSONID).NAME_;
            ELSE
                SBPERSONNAME:= DAGE_PERSON.FSBGETNAME_(INUPERSONID);
                TBPERSONSCACHE(INUPERSONID).NAME_ := SBPERSONNAME;
            END IF;

            SBRESULT    := INUPERSONID||' - '||SBPERSONNAME;
        END IF;
        
        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    FUNCTION FSBGETDAMAGVALUEITEMS
        (
        INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE
        )
    RETURN VARCHAR2
    IS
        NUVALUERETURN NUMBER := 0;
        CURSOR CUTOTALVALUEITEMS(NUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE)
        IS
            SELECT NVL(SUM(OR_ORDER_ITEMS.VALUE),0) VALUE
            FROM OR_EXTERN_SYSTEMS_ID, OR_ORDER_ITEMS
            WHERE OR_EXTERN_SYSTEMS_ID.PACKAGE_ID=NUPACKAGEID
              AND OR_ORDER_ITEMS.ORDER_ID = OR_EXTERN_SYSTEMS_ID.ORDER_ID;

    BEGIN
        OPEN CUTOTALVALUEITEMS(INUPACKAGEID);
        FETCH CUTOTALVALUEITEMS INTO NUVALUERETURN;
        CLOSE CUTOTALVALUEITEMS;
        RETURN UT_CONVERT.FSBNUMBERTOCHAR(NUVALUERETURN);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUTOTALVALUEITEMS%ISOPEN THEN
                CLOSE CUTOTALVALUEITEMS;
            END IF;
            RETURN UT_CONVERT.FSBNUMBERTOCHAR(NUVALUERETURN);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF CUTOTALVALUEITEMS%ISOPEN THEN
                CLOSE CUTOTALVALUEITEMS;
            END IF;
            RETURN UT_CONVERT.FSBNUMBERTOCHAR(NUVALUERETURN);
    END;

    
    


















    FUNCTION FSBGETDAMAGEELEMTYPE
        (
        INUDAMAGEELEMENTID  IN TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE,
        INUELEMENTTYPEID    IN TT_DAMAGE_ELEMENT.ELEMENT_TYPE_ID%TYPE DEFAULT NULL
        )
    RETURN VARCHAR2
    IS
        SBRESULT            VARCHAR2(2000) := NULL;
        NUELEMENTTYPEID     TT_DAMAGE_ELEMENT.ELEMENT_TYPE_ID%TYPE := INUELEMENTTYPEID;
        SBELEMENTTYDESC     IF_ELEMENT_TYPE.DISPLAY_NAME%TYPE;

    BEGIN
    
        IF (NUELEMENTTYPEID IS NOT NULL) THEN
            
            RETURN FSBGETELEMTYPEDESC(NUELEMENTTYPEID);
        END IF;
        
        IF (INUDAMAGEELEMENTID IS NOT NULL) THEN
            
            NUELEMENTTYPEID:= DATT_DAMAGE_ELEMENT.FNUGETELEMENT_TYPE_ID(INUDAMAGEELEMENTID);
            IF (NUELEMENTTYPEID IS NOT NULL) THEN
                
                SBRESULT := FSBGETELEMTYPEDESC(NUELEMENTTYPEID);
            END IF;
        END IF;
        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    FUNCTION FSBGETDAMAGEELEMDESCRIPTION
        (
        INUDAMAGEELEMENTID IN TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE
        )
    RETURN VARCHAR2
    IS
        SBDESCRIPTION       VARCHAR2(2000) := NULL;
    BEGIN
        IF (INUDAMAGEELEMENTID IS NOT NULL) THEN
            SBDESCRIPTION := IF_BOELEMENT.FSBGETELEMENTDESCRIPTION(INUDAMAGEELEMENTID);
        END IF;

        RETURN SBDESCRIPTION;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBDESCRIPTION;
    END;

    


















    FUNCTION FSBGETDAMAGEELEMSTAT
        (
            INUDAMAGEELEMENTID IN TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE
        )
    RETURN VARCHAR2
    IS
        SBRESULT            VARCHAR2(2000) := NULL;
        RCDAMAGEELEMENT     DATT_DAMAGE_ELEMENT.STYTT_DAMAGE_ELEMENT;
        NUELEMSTATUS        IF_STATUS.STATUS_ID%TYPE;
        SBELEMSTATUSDESC    IF_STATUS.DESCRIPTION%TYPE;
    BEGIN
        IF (INUDAMAGEELEMENTID IS NOT NULL) THEN
            RCDAMAGEELEMENT:= DATT_DAMAGE_ELEMENT.FRCGETRECORD(INUDAMAGEELEMENTID);
            
            IF_BOELEMENT.GETTECHNICALSTATUS(RCDAMAGEELEMENT.ELEMENT_ID,RCDAMAGEELEMENT.ELEMENT_TYPE_ID, NUELEMSTATUS );
            
            
            IF (NUELEMSTATUS IS NOT NULL) THEN
                SBELEMSTATUSDESC:= DAIF_STATUS.FSBGETDESCRIPTION(NUELEMSTATUS);
                SBRESULT        := NUELEMSTATUS||'-'||SBELEMSTATUSDESC;
            END IF;
        END IF;
        
        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    



















    FUNCTION FSBGETDAMAGEELEMCLASS
        (
        INUDAMAGEELEMENTID IN TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE
        )
    RETURN VARCHAR2
    IS
        SBRESULT            VARCHAR2(2000) := NULL;
        NUELEMENTID         TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE;
        NUELEMENTTYPEID     IF_NODE.ELEMENT_TYPE_ID%TYPE;
        SBELEMENTCODE       IF_NODE.CODE%TYPE;
        NUELEMENTCLASSID    IF_NODE.CLASS_ID%TYPE;
        SBELEMCLASSDESC     IF_ELEMENT_CLASS.DESCRIPTION%TYPE;

    BEGIN
        IF (INUDAMAGEELEMENTID IS NOT NULL) THEN
            
            NUELEMENTID:= DATT_DAMAGE_ELEMENT.FNUGETELEMENT_ID(INUDAMAGEELEMENTID);
            
            IF_BOELEMENT.GETELEMENTTYPECODECLASS(NUELEMENTID,NUELEMENTTYPEID, SBELEMENTCODE, NUELEMENTCLASSID);
            
            SBRESULT := FSBGETCLASSELEMENTDESC(NUELEMENTTYPEID,NUELEMENTCLASSID);
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    


















    FUNCTION FSBGETDAMAGEELEMCODE
        (
        INUDAMAGEELEMENTID IN TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE
        )
    RETURN VARCHAR2
    IS
        NUELEMENTID         TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE;
        NUELEMENTTYPEID     IF_NODE.ELEMENT_TYPE_ID%TYPE;
        SBRESULT            IF_NODE.CODE%TYPE;
        NUELEMENTCLASSID    IF_NODE.CLASS_ID%TYPE;
        SBELEMCLASSDESC     IF_ELEMENT_CLASS.DESCRIPTION%TYPE;

    BEGIN
        IF (INUDAMAGEELEMENTID IS NOT NULL) THEN
            
            NUELEMENTID:= DATT_DAMAGE_ELEMENT.FNUGETELEMENT_ID(INUDAMAGEELEMENTID);
            
            IF_BOELEMENT.GETELEMENTTYPECODECLASS(NUELEMENTID,NUELEMENTTYPEID, SBRESULT, NUELEMENTCLASSID);
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    

























    
    FUNCTION FNUCOUNTPRBYDAMAGELEM
    (
        INUDAMAGEELEMENTID IN TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        
        NUELEMENTID     TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE;
        
        NUELEMENTTYPEID TT_DAMAGE_ELEMENT.ELEMENT_TYPE_ID%TYPE;
        
        NUCOUNT         TT_ELEM_PROD_COUNT.PRODUCT_QUANTITY%TYPE := 0;
		
        NUCATESERV      PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE := IM_BOCONSTANTS.CNUCATEGORYSERVICES;

    BEGIN
        IF (INUDAMAGEELEMENTID IS NOT NULL) THEN
            NUELEMENTID := DATT_DAMAGE_ELEMENT.FNUGETELEMENT_ID(INUDAMAGEELEMENTID);
            NUELEMENTTYPEID := DATT_DAMAGE_ELEMENT.FNUGETELEMENT_TYPE_ID(INUDAMAGEELEMENTID);
            
            IF IF_BOELEMENT_TYPE.FBLISASSIGNABLE(NUELEMENTTYPEID) THEN
                SELECT --+ INDEX (pr_component, pk_pr_component)
                    COUNT(DISTINCT PR_COMPONENT.PRODUCT_ID)
                    INTO NUCOUNT
                    FROM PR_COMPONENT, PR_NETWORK_ELEM_OPER
                    WHERE PR_NETWORK_ELEM_OPER.ELEMENT_ID = NUELEMENTID
                        AND PR_NETWORK_ELEM_OPER.CATEGORY_ID = NUCATESERV
                        AND PR_COMPONENT.COMPONENT_ID = PR_NETWORK_ELEM_OPER.COMPONENT_ID
                        AND PR_COMPONENT.COMPONENT_STATUS_ID <> PR_BOPARAMETER.FNUGETCOMPRETI;
             ELSE
                NUCOUNT := DATT_ELEM_PROD_COUNT.FNUGETPRODUCT_QUANTITY(NUELEMENTID);
            END IF;
             
        END IF;
		RETURN UT_CONVERT.FSBNUMBERTOCHAR(NUCOUNT);

    EXCEPTION
	    WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN UT_CONVERT.FSBNUMBERTOCHAR(NUCOUNT);
    END;
    
    FUNCTION FSBGETADDRESSELEM
        (
         INUDAMAGEELEMENTID IN TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE
        )
    RETURN VARCHAR2
    IS
        SBRESULT            VARCHAR2(2000) := NULL;
        NUELEMENTID         TT_DAMAGE_ELEMENT.ELEMENT_ID%TYPE;
    BEGIN
        IF (INUDAMAGEELEMENTID IS NOT NULL) THEN
            
            NUELEMENTID:= DATT_DAMAGE_ELEMENT.FNUGETELEMENT_ID(INUDAMAGEELEMENTID);
            
            SBRESULT:=IF_BOELEMENTQUERY.FSBGETELEMENTADDRESS(NUELEMENTID);
        END IF;
        
        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;

    
    
    
    
    FUNCTION FSBGETADDRESSPROD
    (
        INUDAMAGEPRODUCTID IN TT_DAMAGE_PRODUCT.DAMAGES_PRODUCT_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        SBRESULT            AB_ADDRESS.ADDRESS%TYPE:= NULL;

    BEGIN
        IF (INUDAMAGEPRODUCTID IS NOT NULL) THEN
            
            NUPRODUCTID := DATT_DAMAGE_PRODUCT.FNUGETPRODUCT_ID(INUDAMAGEPRODUCTID);
            
            SBRESULT  := PR_BOADDRESS.FSBADDRESSORPREMISEBYPROD(NUPRODUCTID);
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    FUNCTION FSBDAMAGEPRODSUBSCRIB
        (
        INUDAMAGEPRODUCTID IN TT_DAMAGE_PRODUCT.DAMAGES_PRODUCT_ID%TYPE
        )
    RETURN VARCHAR2
    IS
        SBRESULT            VARCHAR2(2000) := NULL;
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        NUSUBSCRIBERID      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        RCSUBSCRIBER        DAGE_SUBSCRIBER.STYGE_SUBSCRIBER;

    BEGIN
        IF (INUDAMAGEPRODUCTID IS NOT NULL) THEN
            
            NUPRODUCTID := DATT_DAMAGE_PRODUCT.FNUGETPRODUCT_ID(INUDAMAGEPRODUCTID);
            
            NUSUBSCRIBERID:=PR_BCPRODUCT.FNUGETSUBSCRIBERID(NUPRODUCTID);
            IF (NUSUBSCRIBERID IS NOT NULL) THEN
                
                RCSUBSCRIBER:= DAGE_SUBSCRIBER.FRCGETRECORD(NUSUBSCRIBERID);
                SBRESULT:= NUSUBSCRIBERID||'-'||RCSUBSCRIBER.SUBSCRIBER_NAME||' '||RCSUBSCRIBER.SUBS_LAST_NAME;
            END IF;
        END IF;
        
        RETURN  SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    FUNCTION FSBPRODSUBSCRIBERTYP
        (
        INUDAMAGEPRODUCTID IN TT_DAMAGE_PRODUCT.DAMAGES_PRODUCT_ID%TYPE
        )
    RETURN VARCHAR2

    IS
        SBRESULT            VARCHAR2(2000) := NULL;
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        NUSUBSCRIBERID      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUSUBSCRIBERTYPE    GE_SUBSCRIBER.SUBSCRIBER_TYPE_ID%TYPE;

    BEGIN
        IF (INUDAMAGEPRODUCTID IS NOT NULL) THEN
            
            NUPRODUCTID := DATT_DAMAGE_PRODUCT.FNUGETPRODUCT_ID(INUDAMAGEPRODUCTID);
            
            NUSUBSCRIBERID:=PR_BCPRODUCT.FNUGETSUBSCRIBERID(NUPRODUCTID);
            IF (NUSUBSCRIBERID IS NOT NULL) THEN
                
                NUSUBSCRIBERTYPE:= DAGE_SUBSCRIBER.FNUGETSUBSCRIBER_TYPE_ID(NUSUBSCRIBERID);
                SBRESULT:=NUSUBSCRIBERTYPE||'-'||CC_BOOSSDESCRIPTION.FSBSUBSCRIBERTYPE(NUSUBSCRIBERTYPE);
            END IF;
        END IF;
        
        RETURN  SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;


    FUNCTION FSBDESCOPERATINGSECTOR
    (
        INUOPERATINGSECTORID IN TT_DAMAGE.OPERATING_SECTOR_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBRESULT            VARCHAR2(2000) := NULL;

    BEGIN
        IF (INUOPERATINGSECTORID IS NOT NULL) THEN
            SBRESULT:=INUOPERATINGSECTORID||'-'||DAOR_OPERATING_SECTOR.FSBGETDESCRIPTION(INUOPERATINGSECTORID);
        END IF;

        RETURN  SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;

    
















    FUNCTION FSBGETDAMAGATTPERSON
    (
        INUPERSONID IN TT_DAMAGE.ATENTION_PERSON_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBPERSONNAME GE_PERSON.NAME_%TYPE;
        SBRESULT VARCHAR2(2000) := NULL;
    BEGIN
        IF (INUPERSONID IS NOT NULL) THEN
           IF (TBPERSONSCACHE.EXISTS(INUPERSONID)) THEN
               SBPERSONNAME:= TBPERSONSCACHE(INUPERSONID).NAME_;
           ELSE
               SBPERSONNAME:= DAGE_PERSON.FSBGETNAME_(INUPERSONID);
               TBPERSONSCACHE(INUPERSONID).NAME_ := SBPERSONNAME;
           END IF;

           SBRESULT := INUPERSONID||' - '||SBPERSONNAME;
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;

    
















    FUNCTION FSBGETFINALDAMAGETYPE
    (
        INUFINALDAMAGETYPEID IN TT_DAMAGE.FINAL_DAMAGE_TYPE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBRESULT VARCHAR2(2000) := NULL;
        NUFINALDAMAGETYPEID TT_DAMAGE.FINAL_DAMAGE_TYPE_ID%TYPE := INUFINALDAMAGETYPEID;
        SBDAMAGETYPEDESC TT_DAMAGE_TYPE.DESCRIPTION%TYPE;
    BEGIN
        IF (INUFINALDAMAGETYPEID IS NOT NULL) THEN

           
           IF (TBDAMAGETYPECACHE.EXISTS(NUFINALDAMAGETYPEID)) THEN
               SBDAMAGETYPEDESC := TBDAMAGETYPECACHE(NUFINALDAMAGETYPEID).DESCRIPTION;
           ELSE
               SBDAMAGETYPEDESC := DATT_DAMAGE_TYPE.FSBGETDESCRIPTION(NUFINALDAMAGETYPEID);
               TBDAMAGETYPECACHE(NUFINALDAMAGETYPEID).DESCRIPTION := SBDAMAGETYPEDESC;
           END IF;

           SBRESULT := NUFINALDAMAGETYPEID || ' - ' || SBDAMAGETYPEDESC;
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;

    

















    FUNCTION FSBGETGEOGLOCADESC
    (
        INUDAMAELEMID TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUELEMENT_ID    IF_NODE.ID%TYPE;
        NUGEOGLOCA      GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        NURESULT        GE_GEOGRA_LOCATION.DESCRIPTION%TYPE;
    
    BEGIN
        NUELEMENT_ID := DATT_DAMAGE_ELEMENT.FNUGETELEMENT_ID(INUDAMAELEMID);
        IF NUELEMENT_ID IS NOT NULL THEN
            NUGEOGLOCA := IF_BOELEMENTQUERY.FNUGETELEMGEOGLOCA(NUELEMENT_ID);
            IF NUGEOGLOCA IS NOT NULL THEN
                NURESULT := FSBGETGEOGRALOCADESC(NUGEOGLOCA);
            END IF;
        END IF;
        
        RETURN NURESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN NURESULT;
    END;
    
    
    FUNCTION FSBGETNEIGHBORTHOODDESC
    (
        INUDAMAELEMID TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUELEMENT_ID        IF_NODE.ID%TYPE;
        NUNEIGHBORTHOOD     AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
        SBRESULT            VARCHAR2(2000) := NULL;

    BEGIN
        NUELEMENT_ID := DATT_DAMAGE_ELEMENT.FNUGETELEMENT_ID(INUDAMAELEMID);
        IF NUELEMENT_ID IS NOT NULL THEN
            NUNEIGHBORTHOOD := IF_BOELEMENTQUERY.FNUGETELEMNEIGHBORTHOOD(NUELEMENT_ID);
            IF NUNEIGHBORTHOOD IS NOT NULL THEN
                SBRESULT := NUNEIGHBORTHOOD || ' - ' || GE_BOBASICDATASERVICES.FSBGETDESCNEIGHBORTHOOD(NUNEIGHBORTHOOD);
            END IF;
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    

















    FUNCTION FSBGETGEOGLOCAPRODDESC
    (
        INUDAMAPROD TT_DAMAGE_PRODUCT.DAMAGES_PRODUCT_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        NUGEOGLOCAID        GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        SBRESULT            AB_ADDRESS.ADDRESS%TYPE:= NULL;

    BEGIN
        IF (INUDAMAPROD IS NOT NULL) THEN
            NUPRODUCTID := DATT_DAMAGE_PRODUCT.FNUGETPRODUCT_ID(INUDAMAPROD);
            IF NUPRODUCTID IS NOT NULL THEN
                NUGEOGLOCAID := PR_BOADDRESS.FNUGETGEOLOCIDBYPROD(NUPRODUCTID);
                IF NUGEOGLOCAID IS NOT NULL THEN
                    SBRESULT := FSBGETGEOGRALOCADESC(NUGEOGLOCAID);
                END IF;
            END IF;
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;
    
    
    FUNCTION FSBGETNEIGPRODDESC
    (
        INUDAMAPROD TT_DAMAGE_PRODUCT.DAMAGES_PRODUCT_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        SBRESULT            AB_ADDRESS.ADDRESS%TYPE:= NULL;

    BEGIN
        IF (INUDAMAPROD IS NOT NULL) THEN
            NUPRODUCTID := DATT_DAMAGE_PRODUCT.FNUGETPRODUCT_ID(INUDAMAPROD);
            IF NUPRODUCTID IS NOT NULL THEN
                SBRESULT := PR_BOADDRESS.FSBGETNEIGHBORTHOODBYPROD(NUPRODUCTID);
            END IF;
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN SBRESULT;
    END;

    

















    PROCEDURE CLEARDAMDATACACHE
    IS
        RCDAMAGEELEMENTNULL    DATT_DAMAGE_ELEMENT.STYTT_DAMAGE_ELEMENT;
        RCPACKAGENULL          TYPACKAGE;
    BEGIN
        TBPRODDAMTYPEDATACACHE.DELETE;
        TBELEMDAMTYPEDATACACHE.DELETE;
        TBDAMAGETYPECACHE.DELETE;
        TBPERSONSCACHE.DELETE;
        TBGEOGRALOCATION.DELETE;
        TBELEMENTTYPE.DELETE;
        TBCOMPONENTTYPE.DELETE;
        TBMOTIVESTATUS.DELETE;
        TBCAUSAL.DELETE;
        TBELEMENTCLASS.DELETE;
        TBOPERSECTOR.DELETE;
        TBATTRIBUTEDTOCACHE.DELETE;

        RCADDRESSCACHE := NULL;

        RCDAMAGEELEMENTCACHE := RCDAMAGEELEMENTNULL;
        RCPACKAGECACHE := RCPACKAGENULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLEARDAMDATACACHE;

    



















    FUNCTION FSBGETDAMELEMCODEBYPAC
    (
        INUPACKAGEID IN TT_DAMAGE_ELEMENT.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUELEMENTTYPEID     IF_NODE.ELEMENT_TYPE_ID%TYPE;
        SBRESULT            IF_NODE.CODE%TYPE;
        NUELEMENTCLASSID    IF_NODE.CLASS_ID%TYPE;
    BEGIN
        IF ((RCDAMAGEELEMENTCACHE.PACKAGE_ID IS NULL) OR
            (RCDAMAGEELEMENTCACHE.PACKAGE_ID != INUPACKAGEID)) THEN

            IF (TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ISOPEN) THEN
               CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
            END IF;

            OPEN TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS(INUPACKAGEID);
            FETCH TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS INTO RCDAMAGEELEMENTCACHE;
            CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;

        END IF;

        IF (RCDAMAGEELEMENTCACHE.ELEMENT_ID IS NOT NULL) THEN
            
            IF_BOELEMENT.GETELEMENTTYPECODECLASS(RCDAMAGEELEMENTCACHE.ELEMENT_ID,NUELEMENTTYPEID, SBRESULT, NUELEMENTCLASSID);
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ISOPEN) THEN
                CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
            END IF;
            RETURN SBRESULT;
    END FSBGETDAMELEMCODEBYPAC;

    



















    FUNCTION FSBGETDAMELEMTYPEBYPAC
    (
        INUPACKAGEID IN TT_DAMAGE_ELEMENT.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUDAMAGEELEMENTID   TT_DAMAGE_ELEMENT.DAMAGE_ELEMENT_ID%TYPE;

        SBRESULT            VARCHAR2(2000) := NULL;
        NUELEMENTTYPEID     TT_DAMAGE_ELEMENT.ELEMENT_TYPE_ID%TYPE;
        SBELEMENTTYDESC     IF_ELEMENT_TYPE.DISPLAY_NAME%TYPE;
    BEGIN
        IF ((RCDAMAGEELEMENTCACHE.PACKAGE_ID IS NULL) OR
            (RCDAMAGEELEMENTCACHE.PACKAGE_ID != INUPACKAGEID)) THEN

            IF (TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ISOPEN) THEN
               CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
            END IF;

            OPEN TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS(INUPACKAGEID);
            FETCH TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS INTO RCDAMAGEELEMENTCACHE;
            CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;

        END IF;

        IF (RCDAMAGEELEMENTCACHE.ELEMENT_TYPE_ID IS NOT NULL) THEN
            SBRESULT    := FSBGETELEMTYPEDESC(RCDAMAGEELEMENTCACHE.ELEMENT_TYPE_ID);
        END IF;

        RETURN SBRESULT;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ISOPEN) THEN
                CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
            END IF;
            RETURN SBRESULT;
    END FSBGETDAMELEMTYPEBYPAC;

    
























    FUNCTION FSBADDRORPREMISEBYPACK
    (
        INUPACKAGEID        IN MO_ADDRESS.PACKAGE_ID%TYPE,
        INUADDRESSTYPEID    IN MO_ADDRESS.ADDRESS_TYPE_ID%TYPE DEFAULT CNUADDRESSTYPEMAIN
    )
    RETURN VARCHAR2
    IS
        RCADDRESS    DAMO_ADDRESS.STYMO_ADDRESS;
        SBADDRESS    MO_ADDRESS.ADDRESS%TYPE;
        NUADDRESSID     MO_ADDRESS.PARSER_ADDRESS_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOAddress.fsbAddrOrPremiseByPack',7);
        UT_TRACE.TRACE('Paquete :['||INUPACKAGEID||']Tipo Direcci�n:['||INUADDRESSTYPEID||']',7);

        SBADDRESS := NULL;

        NUADDRESSID := TT_BCBASICDATASERVICES.FNUGETPARSADDRIDBYPACK(INUPACKAGEID);

        
        IF (NUADDRESSID IS NOT NULL) THEN

            SETADDRESSCACHE(NUADDRESSID);

            IF (CSBDISP_PARSER_ADDRESS = GE_BOCONSTANTS.CSBYES )THEN
                SBADDRESS := RCADDRESSCACHE.ADDRESS_PARSED;
            ELSE
                SBADDRESS := RCADDRESSCACHE.ADDRESS;
            END IF;
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOAddress.fsbAddressOrPremiseByPack',7);
        RETURN SBADDRESS;

       EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RETURN NULL;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN NULL;
    END FSBADDRORPREMISEBYPACK;

    





















    FUNCTION FSBGETDESCGEOLOCBYADDR
    (
        INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUGEOGRAPLOCATIONID AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
        SBRESULT  VARCHAR2(2000) := NULL;
    BEGIN
        IF (INUADDRESSID IS NOT NULL) THEN
            SETADDRESSCACHE(INUADDRESSID);

            NUGEOGRAPLOCATIONID := RCADDRESSCACHE.GEOGRAP_LOCATION_ID;

            IF (NUGEOGRAPLOCATIONID IS NOT NULL) THEN
                SBRESULT := FSBGETGEOGRALOCADESC(NUGEOGRAPLOCATIONID);
            END IF;
        END IF;
        RETURN SBRESULT;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN  SBRESULT;
    END FSBGETDESCGEOLOCBYADDR;

    





















    FUNCTION FSBGETDESCNEIGHBYADDR
    (
        INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUNEIGHBORTHOODID AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
        SBRESULT  VARCHAR2(2000) := NULL;
    BEGIN
        IF (INUADDRESSID IS NOT NULL) THEN
            SETADDRESSCACHE(INUADDRESSID);
            NUNEIGHBORTHOODID := RCADDRESSCACHE.NEIGHBORTHOOD_ID;

            IF (NUNEIGHBORTHOODID IS NOT NULL) THEN
                SBRESULT := FSBGETGEOGRALOCADESC(NUNEIGHBORTHOODID);
            END IF;
        END IF;
        RETURN SBRESULT;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN  SBRESULT;
    END FSBGETDESCNEIGHBYADDR;


    



















    FUNCTION FNUGETPARSADDRIDBYPACK
    (
        INUPACKAGE_ID MO_ADDRESS.PACKAGE_ID%TYPE
    )
    RETURN MO_ADDRESS.PARSER_ADDRESS_ID%TYPE
    IS
        NURESULT MO_ADDRESS.PARSER_ADDRESS_ID%TYPE := NULL;
    BEGIN
        IF ((RCPACKAGECACHE.PACKAGE_ID IS NULL) OR
            (RCPACKAGECACHE.PACKAGE_ID <> INUPACKAGE_ID)) THEN

            FOR RC IN MO_BCADDRESS.CUADDRESSPACKBYTYPE(INUPACKAGE_ID, CNUADDRESSTYPEMAIN) LOOP
                NURESULT := RC.PARSER_ADDRESS_ID;
            END LOOP;

            RCPACKAGECACHE.PACKAGE_ID := INUPACKAGE_ID;
            RCPACKAGECACHE.ADDRESS_ID := NURESULT;
        END IF;

        RETURN RCPACKAGECACHE.ADDRESS_ID;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN NURESULT;
    END FNUGETPARSADDRIDBYPACK;
    
    
    





















    FUNCTION FSBGETADRRESSDESC
    (
        INUADDRESSID    IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        INUPACKAGEID    IN  TT_DAMAGE_ELEMENT.PACKAGE_ID%TYPE
    )
    RETURN AB_ADDRESS.ADDRESS%TYPE
    IS
        RCDAMAGEELEMENT TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ROWTYPE;
        NUADDRESSID     AB_ADDRESS.ADDRESS_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia TT_BCBasicDataServices.fsbGetAdrressDesc',15);

        IF (INUADDRESSID IS NOT NULL) THEN
            RETURN AB_BOBASICDATASERVICES.FSBGETDESCADDRESSPARSED(INUADDRESSID);
        ELSE
            IF TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ISOPEN THEN
               CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
            END IF;

            OPEN TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS(INUPACKAGEID);
            FETCH TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS INTO RCDAMAGEELEMENT;
            CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;

            IF (RCDAMAGEELEMENT.ELEMENT_ID IS NOT NULL) THEN
                NUADDRESSID := DAIF_NODE.FNUGETADDRESS_ID(RCDAMAGEELEMENT.ELEMENT_ID);
                IF (NUADDRESSID IS NOT NULL) THEN
                    RETURN AB_BOBASICDATASERVICES.FSBGETDESCADDRESSPARSED(NUADDRESSID);
                END IF;
            END IF;
        END IF;

        UT_TRACE.TRACE('Finaliza TT_BCBasicDataServices.fsbGetAdrressDesc',15);
        RETURN ' ';

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RETURN ' ';

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('Error : others',15);
            RETURN ' ';
    END FSBGETADRRESSDESC;
    
    
















    FUNCTION FDTINITIALDATE
    (
        INUPACKAGEID IN TT_DAMAGE.PACKAGE_ID%TYPE
    )
    RETURN TT_DAMAGE.INITIAL_DATE%TYPE
    IS
        DTINITIALDATE   TT_DAMAGE.INITIAL_DATE%TYPE;
        DTMINFAULTDATE  TT_DAMAGE.INITIAL_DATE%TYPE;
        DTMINDAMAGEDATE TT_DAMAGE.INITIAL_DATE%TYPE;

        
        CURSOR CUMINFAULTDATE
        IS
            SELECT /*+ leading(mo_packages_asso)
                       use_nl(mo_packages_asso tt_damage) */
                   MIN(NVL(TT_DAMAGE.INITIAL_DATE,
                           TT_BCBASICDATASERVICES.FDTINITIALDATE(TT_DAMAGE.PACKAGE_ID))) DATE_
            FROM   MO_PACKAGES_ASSO,
                   TT_DAMAGE
                   /*+ Ubicaci�n 1: TT_BCBasicDataServices.fdtInitialDate SAO202805 */
            WHERE  MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = INUPACKAGEID
              AND  MO_PACKAGES_ASSO.PACKAGE_ID = TT_DAMAGE.PACKAGE_ID;
        
        CURSOR CUMINDAMAGEDATE
        IS
            SELECT /*+ leading(mo_packages_asso)
                       use_nl(mo_packages_asso mo_packages)
                       use_nl(mo_packages mo_motive) */
                   MIN(MO_PACKAGES.REQUEST_DATE) DATE_
            FROM   MO_PACKAGES_ASSO,
                   MO_PACKAGES,
                   MO_MOTIVE
                   /*+ Ubicaci�n 2: TT_BCBasicDataServices.fdtInitialDate SAO189355 */
            WHERE  MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = INUPACKAGEID
              AND  MO_PACKAGES_ASSO.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
              AND  MO_PACKAGES.PACKAGE_TYPE_ID = TT_BCCONSTANTS.CNUINDDAMAGE
              AND  MO_PACKAGES.PACKAGE_ID = MO_MOTIVE.PACKAGE_ID
              AND  MO_MOTIVE.PRODUCT_ID IS NOT NULL;
    BEGIN
        DTINITIALDATE := DATT_DAMAGE.FDTGETINITIAL_DATE(INUPACKAGEID);

        IF (DTINITIALDATE IS NULL) THEN
            OPEN CUMINFAULTDATE;
            FETCH CUMINFAULTDATE INTO DTMINFAULTDATE;
            CLOSE CUMINFAULTDATE;

            OPEN CUMINDAMAGEDATE;
            FETCH CUMINDAMAGEDATE INTO DTMINDAMAGEDATE;
            CLOSE CUMINDAMAGEDATE;

            IF ((DTMINFAULTDATE IS NULL) AND
                (DTMINDAMAGEDATE IS NULL)) THEN
                DTINITIALDATE := NULL;
            ELSIF ((DTMINFAULTDATE IS NOT NULL) AND
                   (DTMINDAMAGEDATE IS NULL)) THEN
                   DTINITIALDATE := DTMINFAULTDATE;
            ELSIF ((DTMINFAULTDATE IS NULL) AND
                   (DTMINDAMAGEDATE IS NOT NULL)) THEN
                   DTINITIALDATE := DTMINDAMAGEDATE;
            ELSIF ((DTMINFAULTDATE IS NOT NULL) AND
                   (DTMINDAMAGEDATE IS NOT NULL)) THEN
                   DTINITIALDATE := DTMINDAMAGEDATE;
                   IF (DTINITIALDATE > DTMINFAULTDATE) THEN
                       DTINITIALDATE := DTMINFAULTDATE;
                   END IF;
            END IF;

            
            
            
            IF (DTINITIALDATE IS NULL) THEN
                DTINITIALDATE := DAMO_PACKAGES.FDTGETREQUEST_DATE(INUPACKAGEID);
            END IF;
        END IF;

        RETURN DTINITIALDATE;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (CUMINFAULTDATE%ISOPEN) THEN
                CLOSE CUMINFAULTDATE;
            END IF;
            IF (CUMINDAMAGEDATE%ISOPEN) THEN
                CLOSE CUMINDAMAGEDATE;
            END IF;
            RETURN NULL;
    END FDTINITIALDATE;

    


















    PROCEDURE GETMINENDDATE
    (
        INUPACKAGEID  IN  TT_DAMAGE.PACKAGE_ID%TYPE,
        ODTMINENDDATE OUT TT_DAMAGE.END_DATE%TYPE
    )
    IS
        DTMAXFAULTDATE  TT_DAMAGE.INITIAL_DATE%TYPE;
        DTMAXDAMAGEDATE TT_DAMAGE.INITIAL_DATE%TYPE;

        
        CURSOR CUMAXFAULTDATE
        IS
            SELECT /*+ leading(mo_packages_asso)
                       use_nl(mo_packages_asso tt_damage)  */
                   MAX(NVL(TT_DAMAGE.INITIAL_DATE,
                           TT_BCBASICDATASERVICES.FDTINITIALDATE(TT_DAMAGE.PACKAGE_ID))) DATE_
            FROM   MO_PACKAGES_ASSO,
                   TT_DAMAGE
                   /*+ Ubicaci�n 1: TT_BCBasicDataServices.GetMinEndDate SAO202805 */
            WHERE  MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = INUPACKAGEID
              AND  MO_PACKAGES_ASSO.PACKAGE_ID = TT_DAMAGE.PACKAGE_ID;
        
        CURSOR CUMAXDAMAGEDATE
        IS
            SELECT /*+ leading(mo_packages_asso)
                       use_nl(mo_packages_asso mo_packages)
                       use_nl(mo_motive mo_packages) */
                   MAX(MO_PACKAGES.REQUEST_DATE) DATE_
            FROM   MO_PACKAGES_ASSO,
                   MO_PACKAGES,
                   MO_MOTIVE
                   /*+ Ubicaci�n 2: TT_BCBasicDataServices.GetMinEndDate SAO189355 */
            WHERE  MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = INUPACKAGEID
              AND  MO_PACKAGES_ASSO.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
              AND  MO_PACKAGES.PACKAGE_TYPE_ID = TT_BCCONSTANTS.CNUINDDAMAGE
              AND  MO_PACKAGES.PACKAGE_ID = MO_MOTIVE.PACKAGE_ID
              AND  MO_MOTIVE.PRODUCT_ID IS NOT NULL;
    BEGIN
        OPEN CUMAXFAULTDATE;
        FETCH CUMAXFAULTDATE INTO DTMAXFAULTDATE;
        CLOSE CUMAXFAULTDATE;

        OPEN CUMAXDAMAGEDATE;
        FETCH CUMAXDAMAGEDATE INTO DTMAXDAMAGEDATE;
        CLOSE CUMAXDAMAGEDATE;

        IF ((DTMAXFAULTDATE IS NULL) AND
            (DTMAXDAMAGEDATE IS NULL)) THEN
            ODTMINENDDATE := NULL;
        ELSIF ((DTMAXFAULTDATE IS NOT NULL) AND
               (DTMAXDAMAGEDATE IS NULL)) THEN
               ODTMINENDDATE := DTMAXFAULTDATE;
        ELSIF ((DTMAXFAULTDATE IS NULL) AND
               (DTMAXDAMAGEDATE IS NOT NULL)) THEN
               ODTMINENDDATE := DTMAXDAMAGEDATE;
        ELSIF ((DTMAXFAULTDATE IS NOT NULL) AND
               (DTMAXDAMAGEDATE IS NOT NULL)) THEN
               ODTMINENDDATE := DTMAXDAMAGEDATE;
               IF (ODTMINENDDATE < DTMAXFAULTDATE) THEN
                   ODTMINENDDATE := DTMAXFAULTDATE;
               END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (CUMAXFAULTDATE%ISOPEN) THEN
                CLOSE CUMAXFAULTDATE;
            END IF;
            IF (CUMAXDAMAGEDATE%ISOPEN) THEN
                CLOSE CUMAXDAMAGEDATE;
            END IF;
    END GETMINENDDATE;


    



















    FUNCTION FSBGETATTRIBUTEDTO
    (
        INUCAUSALID     IN    TT_DAMAGE.DAMAGE_CAUSAL_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBATTRIBUTED    GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        
        CURSOR CUATTRIBUTED
        IS
            SELECT /*+ use_nl(ge_attributed_to)
                       use_nl(ge_causal)
                       index(ge_causal pk_ge_causal )
                       index(ge_attributed_to pk_ge_attributed_to)
                       leading(ge_causal,ge_attributed_to)
                    */
                   GE_ATTRIBUTED_TO.ATTRIBUTED_TO||'-'||GE_ATTRIBUTED_TO.DESCRIPTION
              FROM GE_ATTRIBUTED_TO, GE_CAUSAL
                   /*+ Ubicaci�n: TT_BCBasicDataServices.fsbGetAttributedTo */
             WHERE GE_ATTRIBUTED_TO.ATTRIBUTED_TO = GE_CAUSAL.ATTRIBUTED_TO
               AND GE_CAUSAL.CAUSAL_ID = INUCAUSALID;
    BEGIN
        UT_TRACE.TRACE('[INICIO] TT_BCBasicDataServices.fsbGetAttributedTo:
                        Causal['||INUCAUSALID||']',10);
                        
        IF (INUCAUSALID IS NULL) THEN
            SBATTRIBUTED := GE_BOUTILITIES.CSBAPPLICATIONNULL;
        ELSE
            IF (TBATTRIBUTEDTOCACHE.EXISTS(INUCAUSALID)) THEN
                SBATTRIBUTED := TBATTRIBUTEDTOCACHE(INUCAUSALID);
            ELSE
                OPEN CUATTRIBUTED;
                FETCH CUATTRIBUTED INTO SBATTRIBUTED;
                CLOSE CUATTRIBUTED;
                TBATTRIBUTEDTOCACHE(INUCAUSALID) := SBATTRIBUTED;
            END IF;
        END IF;

        UT_TRACE.TRACE('[FIN] TT_BCBasicDataServices.fsbGetAttributedTo',10);
        RETURN SBATTRIBUTED;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUATTRIBUTED%ISOPEN) THEN
                CLOSE CUATTRIBUTED;
            END IF;
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',10);
                RAISE;
        WHEN OTHERS THEN
            IF (CUATTRIBUTED%ISOPEN) THEN
                CLOSE CUATTRIBUTED;
            END IF;
            UT_TRACE.TRACE('Error : others',12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETATTRIBUTEDTO;
    
    

















    FUNCTION FSBGETTIMEOUT
    (
        INUDAMAGETYPEID IN  TT_DAMAGE.FINAL_DAMAGE_TYPE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        
        SBTIMEOUT   GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN
        UT_TRACE.TRACE('[INICIO] TT_BCBasicDataServices.fsbGetTimeOut['||INUDAMAGETYPEID||']',10);
        IF (TBTIMEOUTCACHE.EXISTS(INUDAMAGETYPEID)) THEN
            SBTIMEOUT := TBTIMEOUTCACHE(INUDAMAGETYPEID);
        ELSE
            IF (DATT_DAMAGE_TYPE.FSBGETTIME_OUT(INUDAMAGETYPEID) = GE_BCCONSTANTS.CSBYES ) THEN
                SBTIMEOUT := 'Si';
            ELSE
                SBTIMEOUT := 'No';
            END IF;
        END IF;

        UT_TRACE.TRACE('[FIN] TT_BCBasicDataServices.fsbGetTimeOut',10);
        RETURN SBTIMEOUT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',10);
                RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETTIMEOUT;

    
    

















    FUNCTION FSBELEMCLASSBYPACK
    (
        INUPACKAGEID IN TT_DAMAGE_ELEMENT.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        
        NUELEMENTTYPEID     IF_NODE.ID%TYPE;
        
        SBELEMENTCLASS      GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        
        NUELEMENTCLASSID    IF_NODE.CLASS_ID%TYPE;
    BEGIN
        IF ((RCDAMAGEELEMENTCACHE.PACKAGE_ID IS NULL) OR
            (RCDAMAGEELEMENTCACHE.PACKAGE_ID != INUPACKAGEID)) THEN

            IF (TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ISOPEN) THEN
               CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
            END IF;

            OPEN TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS(INUPACKAGEID);
            FETCH TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS INTO RCDAMAGEELEMENTCACHE;
            CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
        END IF;

        IF (RCDAMAGEELEMENTCACHE.ELEMENT_ID IS NOT NULL) THEN
            
            IF_BOELEMENT.GETELEMENTTYPECODECLASS(RCDAMAGEELEMENTCACHE.ELEMENT_ID,NUELEMENTTYPEID, SBELEMENTCLASS, NUELEMENTCLASSID);
            
            SBELEMENTCLASS := FSBGETCLASSELEMENTDESC(NUELEMENTTYPEID,NUELEMENTCLASSID);
        END IF;

        RETURN SBELEMENTCLASS;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ISOPEN) THEN
                CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
            END IF;
            RETURN SBELEMENTCLASS;
    END FSBELEMCLASSBYPACK;
    
    

    

    

















    FUNCTION FSBGETELEMESTATUS
    (
        INUELEMENTID        IN IF_NODE.ID%TYPE,
        INUELEMENTTYPEID    IN IF_ELEMENT_CLASS.ELEMENT_TYPE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        
        NUELEMSTATUS  IF_ASSIGNABLE.TECHNICAL_STATUS_ID%TYPE;
        
        SBSTATUS      GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        
    BEGIN
        IF (INUELEMENTID IS NULL) OR (INUELEMENTTYPEID IS NULL) THEN
            RETURN ' ';
        END IF;

        IF (TBELEMENTSTATUS.EXISTS(INUELEMENTID)) THEN
            SBSTATUS := TBELEMENTSTATUS(INUELEMENTID);
        ELSE
            IF_BOELEMENT.GETTECHNICALSTATUS(INUELEMENTID,INUELEMENTTYPEID, NUELEMSTATUS );
            SBSTATUS := NUELEMSTATUS||'-'|| DAIF_STATUS.FSBGETDESCRIPTION(NUELEMSTATUS);
            TBELEMENTSTATUS(INUELEMENTID) := SBSTATUS;
        END IF;

        RETURN SBSTATUS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
    END FSBGETELEMESTATUS;
    
    
    

















    FUNCTION FSBELEMSTATUSBYPACK
    (
        INUPACKAGEID IN TT_DAMAGE_ELEMENT.PACKAGE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        
        NUELEMENTTYPEID     IF_NODE.ID%TYPE;
        
        SBELEMENTSTATUS      GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
        
        NUELEMENTCLASSID    IF_NODE.CLASS_ID%TYPE;
        
        NUELEMENTCODE    IF_NODE.CODE%TYPE;
    BEGIN
        IF ((RCDAMAGEELEMENTCACHE.PACKAGE_ID IS NULL) OR
            (RCDAMAGEELEMENTCACHE.PACKAGE_ID != INUPACKAGEID)) THEN

            IF (TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ISOPEN) THEN
               CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
            END IF;

            OPEN TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS(INUPACKAGEID);
            FETCH TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS INTO RCDAMAGEELEMENTCACHE;
            CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
        END IF;

        IF (RCDAMAGEELEMENTCACHE.ELEMENT_ID IS NOT NULL) THEN
            
            IF_BOELEMENT.GETELEMENTTYPECODECLASS(RCDAMAGEELEMENTCACHE.ELEMENT_ID,NUELEMENTTYPEID, NUELEMENTCODE, NUELEMENTCLASSID);
            
            SBELEMENTSTATUS := FSBGETELEMESTATUS(RCDAMAGEELEMENTCACHE.ELEMENT_ID,NUELEMENTTYPEID);
        END IF;

        RETURN SBELEMENTSTATUS;

    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS%ISOPEN) THEN
                CLOSE TT_BCDAMAGEELEMENT.CUMOREHIERARCHYDAMELEMENTS;
            END IF;
            RETURN SBELEMENTSTATUS;
    END FSBELEMSTATUSBYPACK;
    
    

















    PROCEDURE FSBGETCLASSSERVICE
    (
        INUCOMPONENTID  IN  PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE
    )
    IS
        
        NUCLASSSERVICEID    PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE;
        
        SBCLASSSERVICE      GE_BOUTILITIES.STYSTATEMENTATTRIBUTE;
    BEGIN
        IF (INUCOMPONENTID IS NULL) THEN
            SBCLASSSERVICE := GE_BOUTILITIES.CSBAPPLICATIONNULL;
        ELSE
            NUCLASSSERVICEID := DAPR_COMPONENT.FNUGETCLASS_SERVICE_ID(INUCOMPONENTID);
            IF (NUCLASSSERVICEID IS NULL) THEN
                SBCLASSSERVICE := GE_BOUTILITIES.CSBAPPLICATIONNULL;
            ELSE
                SBCLASSSERVICE := NUCLASSSERVICEID||' - '||PS_BOPRODSERVMANAGER.FRCGETCLASSSERVICE(NUCLASSSERVICEID).DESCRIPTION;
            END IF;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error TT_BCBasicDataServices.fsbGetClassService: ex.CONTROLLED_ERROR',10);
                RAISE;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error TT_BCBasicDataServices.fsbGetClassService: others',12);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETCLASSSERVICE;
    
    














    FUNCTION FDTFIRSTABSPACK
    (
        INUPACKAGEID IN TT_DAMAGE.PACKAGE_ID%TYPE
    )
    RETURN TT_DAMAGE.INITIAL_DATE%TYPE
    IS
        DTINITIALDATE   TT_DAMAGE.INITIAL_DATE%TYPE;
        DTMINFAULTDATE  TT_DAMAGE.INITIAL_DATE%TYPE;
        DTMINDAMAGEDATE TT_DAMAGE.INITIAL_DATE%TYPE;

        
        CURSOR CUMINFAULTDATE
        IS
            SELECT /*+ leading(mo_packages_asso)
                       use_nl(mo_packages_asso tt_damage) */
                   MIN(TT_DAMAGE.INITIAL_DATE) DATE_
            FROM   MO_PACKAGES_ASSO,
                   TT_DAMAGE
                   /*+ Ubicaci�n 1: TT_BCBasicDataServices.fdtInitialDate SAO189355 */
            WHERE  MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = INUPACKAGEID
              AND  MO_PACKAGES_ASSO.PACKAGE_ID = TT_DAMAGE.PACKAGE_ID;
        
        CURSOR CUMINDAMAGEDATE
        IS
            SELECT /*+ leading(mo_packages_asso)
                       use_nl(mo_packages_asso mo_packages)
                       use_nl(mo_packages mo_motive) */
                   MIN(MO_PACKAGES.REQUEST_DATE) DATE_
            FROM   MO_PACKAGES_ASSO,
                   MO_PACKAGES,
                   MO_MOTIVE
                   /*+ Ubicaci�n 2: TT_BCBasicDataServices.fdtInitialDate SAO181853 */
            WHERE  MO_PACKAGES_ASSO.PACKAGE_ID_ASSO = INUPACKAGEID
              AND  MO_PACKAGES_ASSO.PACKAGE_ID = MO_PACKAGES.PACKAGE_ID
              AND  MO_PACKAGES.PACKAGE_TYPE_ID = TT_BCCONSTANTS.CNUINDDAMAGE
              AND  MO_PACKAGES.PACKAGE_ID = MO_MOTIVE.PACKAGE_ID
              AND  MO_MOTIVE.PRODUCT_ID IS NOT NULL;
    BEGIN
        OPEN CUMINFAULTDATE;
        FETCH CUMINFAULTDATE INTO DTMINFAULTDATE;
        CLOSE CUMINFAULTDATE;

        OPEN CUMINDAMAGEDATE;
        FETCH CUMINDAMAGEDATE INTO DTMINDAMAGEDATE;
        CLOSE CUMINDAMAGEDATE;

        IF ((DTMINFAULTDATE IS NOT NULL) AND
            (DTMINDAMAGEDATE IS NOT NULL)) THEN
             DTINITIALDATE := DTMINDAMAGEDATE;
            IF (DTINITIALDATE > DTMINFAULTDATE) THEN
                DTINITIALDATE := DTMINFAULTDATE;
            END IF;
        ELSE
            DTINITIALDATE := NVL(DTMINFAULTDATE,
                                 DTMINDAMAGEDATE);
        END IF;

        RETURN DTINITIALDATE;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (CUMINFAULTDATE%ISOPEN) THEN
                CLOSE CUMINFAULTDATE;
            END IF;
            IF (CUMINDAMAGEDATE%ISOPEN) THEN
                CLOSE CUMINDAMAGEDATE;
            END IF;
            RETURN NULL;
    END FDTFIRSTABSPACK;
    
    

















    FUNCTION FSBGETADDRESS
    (
        INUADDRESSID IN AB_ADDRESS.ADDRESS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        SBADDRESS AB_ADDRESS.ADDRESS_PARSED%TYPE; 
    BEGIN
        SBADDRESS := NULL;

        
        IF (INUADDRESSID IS NOT NULL) THEN

            SETADDRESSCACHE(INUADDRESSID);

            SBADDRESS := RCADDRESSCACHE.ADDRESS_PARSED;
            
        END IF;

        RETURN SBADDRESS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RETURN NULL;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RETURN NULL;
    END FSBGETADDRESS;

END TT_BCBASICDATASERVICES;