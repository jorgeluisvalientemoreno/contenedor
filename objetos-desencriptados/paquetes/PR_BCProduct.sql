PACKAGE PR_BCProduct IS

















































































































































































































    
    
    
    TYPE TYRFCURSOR  IS REF CURSOR;
    
    
    
    
    
    
    CNUPRODUCT_INSTALL_PENDING  CONSTANT NUMBER := PR_BOCONSTANTS.CNUPRODUCT_INSTALL_PENDING;
    CNUPRODUCT_RETIRE           CONSTANT NUMBER := PR_BOCONSTANTS.CNUPRODUCT_RETIRE;
    CNUPRODUCT_UNINSTALL_RET    CONSTANT NUMBER := PR_BOCONSTANTS.CNUPRODUCT_UNINSTALL_RET;

    
    
    

    










    CURSOR CUPRODUCTSBYSUBSCRIPTION
        (
        INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
        )
    IS
        SELECT A.*, A.ROWID
        FROM PR_PRODUCT A, PS_PRODUCT_STATUS B
        WHERE A.SUBSCRIPTION_ID = INUSUBSCRIPTIONID
        AND A.PRODUCT_STATUS_ID = B.PRODUCT_STATUS_ID
        AND B.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES;


    

















    CURSOR CULINESFORSUBSCRIPTIONID (
        INUSUBSCRIPTIONID   IN     SUSCRIPC.SUSCCODI%TYPE,
        INUCLASSSERV        IN     PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE
    )
    IS
            SELECT A.*, A.ROWID
              FROM PR_PRODUCT A, PR_COMPONENT B
             WHERE A.PRODUCT_ID = B.PRODUCT_ID
               AND A.PRODUCT_STATUS_ID <> PR_BOPARAMETER.FNUGETPRODRETI
               AND A.PRODUCT_TYPE_ID = DAGE_PARAMETER.FSBGETVALUE('PRODUCT_TYPE_LN')
               AND B.COMPONENT_TYPE_ID = DAGE_PARAMETER.FSBGETVALUE('COMPONENT_TYPE_LN')
               AND B.CLASS_SERVICE_ID = INUCLASSSERV
               AND A.SUBSCRIPTION_ID = INUSUBSCRIPTIONID
               AND A.IS_PROVISIONAL = 'N';


    










    CURSOR CUSUMCHARGEPRODUCT
    (
        DTCREATIONDATE DATE
    ) IS
    SELECT SUM(CHARGE)
      FROM PR_PRODUCT, PR_DATA_UTILITIES
     WHERE PRODUCT_STATUS_ID = PR_BOCONSTANTS.CNUPRODUCT_ACTIVE
       AND CREATION_DATE <= DTCREATIONDATE
       AND PR_PRODUCT.PRODUCT_ID = PR_DATA_UTILITIES.PRODUCT_ID;

    











        CURSOR CUCOUNTERPRODUCT
        (
            DTCREATIONDATE DATE
        ) IS
        SELECT COUNT(1) TOTAL
          FROM PR_PRODUCT
         WHERE PRODUCT_STATUS_ID = PR_BOCONSTANTS.CNUPRODUCT_ACTIVE
           AND CREATION_DATE <= DTCREATIONDATE;



    













        CURSOR CUCOMPONENTSPLAN
        (
            INUPRODUCTID    IN PR_PRODUCT.PRODUCT_ID%TYPE
        )
        IS
            SELECT B.COMPONENT_TYPE_ID, B.CLASS_SERVICE_ID, COUNT(1) QUANTITY
	        FROM  PR_PRODUCT A, PR_COMPONENT B, PS_PRODUCT_STATUS C, CC_COMP_COMM_PLAN D
	        WHERE B.PRODUCT_ID              = INUPRODUCTID
              AND B.PRODUCT_ID              = A.PRODUCT_ID
	          AND B.COMPONENT_STATUS_ID     = C.PRODUCT_STATUS_ID
              AND C.IS_ACTIVE_PRODUCT       = GE_BOCONSTANTS.CSBYES
              AND A.COMMERCIAL_PLAN_ID      = D.COMMERCIAL_PLAN_ID
              AND B.COMPONENT_TYPE_ID       = D.COMPONENT_TYPE_ID
              AND NVL(B.CLASS_SERVICE_ID,-1)= NVL(D.CLASS_SERVICE_ID, -1)
            GROUP BY B.COMPONENT_TYPE_ID, B.CLASS_SERVICE_ID;


    













        CURSOR CUCOMPONENTSPRODUCT
        (
            INUPRODUCTID    IN PR_PRODUCT.PRODUCT_ID%TYPE
        )
        IS
            SELECT B.*, B.ROWID
	        FROM  PR_COMPONENT B, PR_PRODUCT A, PS_PRODUCT_STATUS C
	        WHERE B.PRODUCT_ID              = INUPRODUCTID
              AND B.PRODUCT_ID              = A.PRODUCT_ID
	          AND B.COMPONENT_STATUS_ID     = C.PRODUCT_STATUS_ID
              AND C.IS_ACTIVE_PRODUCT       = GE_BOCONSTANTS.CSBYES;
              
    














        CURSOR CUPRODUCTSBYSUBSANDTYPE
        (
            INUPRODUCTTYPE            PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
            INUPRODUCTSTATUS          PR_PRODUCT.PRODUCT_STATUS_ID%TYPE,
            INUSUBSCRIBER             GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
        )
        IS
        SELECT PR_PRODUCT.PRODUCT_ID
          FROM SUSCRIPC,PR_PRODUCT
         WHERE PR_PRODUCT.SUBSCRIPTION_ID = SUSCRIPC.SUSCCODI
           AND PR_PRODUCT.PRODUCT_TYPE_ID = INUPRODUCTTYPE
           AND PR_PRODUCT.PRODUCT_STATUS_ID = INUPRODUCTSTATUS
           AND SUSCRIPC.SUSCCLIE = INUSUBSCRIBER
      ORDER BY PR_PRODUCT.PRODUCT_ID;

        













        CURSOR CUACTPRODSBYSUBSANDTYPE
        (
            INUSUBSCRIBERID             GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
            INUPRODUCTTYPEID            PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
        )
        IS
        SELECT  A.*,
                A.ROWID
        FROM    PR_PRODUCT A,
                SUSCRIPC B,
                PS_PRODUCT_STATUS C
        WHERE   A.PRODUCT_TYPE_ID   = INUPRODUCTTYPEID
        AND     A.SUBSCRIPTION_ID   = B.SUSCCODI
        AND     A.PRODUCT_STATUS_ID = C.PRODUCT_STATUS_ID
        AND     B.SUSCCLIE          = INUSUBSCRIBERID
        AND     C.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES;

        











        CURSOR CUACTPRODSBYSUBS
        (
            INUSUBSCRIBERID             GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
        )
        IS
        SELECT  A.*,
                A.ROWID
        FROM    PR_PRODUCT A,
                SUSCRIPC B,
                PS_PRODUCT_STATUS C
        WHERE   A.SUBSCRIPTION_ID   = B.SUSCCODI
        AND     A.PRODUCT_STATUS_ID = C.PRODUCT_STATUS_ID
        AND     B.SUSCCLIE          = INUSUBSCRIBERID
        AND     C.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES;

        













        CURSOR CUACTPRODSBYSUBSANDGEOLOC
        (
            INUSUBSCRIBERID             GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE,
            INUGEOGRAPHICLOCATIONID     GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
        )
        IS
        SELECT  A.*,
                A.ROWID
        FROM    PR_PRODUCT A,
                SUSCRIPC B,
                PS_PRODUCT_STATUS C,
                AB_ADDRESS D
        WHERE   A.SUBSCRIPTION_ID   = B.SUSCCODI
        AND     A.ADDRESS_ID        = D.ADDRESS_ID
        AND     A.PRODUCT_STATUS_ID = C.PRODUCT_STATUS_ID
        AND     B.SUSCCLIE          = INUSUBSCRIBERID
        AND     C.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES
        AND     D.GEOGRAP_LOCATION_ID = INUGEOGRAPHICLOCATIONID;

    













        CURSOR CUACTPENDPRODBYSUBS
        (
            INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
        )
        IS
            SELECT A.*, A.ROWID
            FROM PR_PRODUCT A
            WHERE A.SUBSCRIPTION_ID = INUSUBSCRIPTIONID
            AND EXISTS (SELECT 'x'
                        FROM PS_PRODUCT_STATUS B
                        WHERE B.PRODUCT_STATUS_ID = A.PRODUCT_STATUS_ID
                        AND (B.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES));
                        
    

























    CURSOR CUPRODUCTSTOREAD
    (
        INUPECSCICO IN CICLCONS.CICOCODI%TYPE,
        INUDIVI     IN REACGELE.RAGLDIVI%TYPE,
        INUPECSCONS IN PERICOSE.PECSCONS%TYPE
    )
    IS
        WITH PER AS (SELECT PERICOSE.PECSFECF
                     FROM PERICOSE
                     WHERE PERICOSE.PECSCONS = INUPECSCONS)
        SELECT /*+ ORDERED USE_NL(pr_product, servsusc) */
               SERVSUSC.SESUNUSE
        FROM   PER,
               SERVSUSC,
               PR_PRODUCT
               
        WHERE PR_PRODUCT.PRODUCT_ID = SERVSUSC.SESUNUSE
          AND MOD(SERVSUSC.SESUNUSE, 10) = INUDIVI
          AND SERVSUSC.SESUCICO = INUPECSCICO
          AND PR_PRODUCT.PRODUCT_STATUS_ID NOT IN (CNUPRODUCT_INSTALL_PENDING,
                                                   CNUPRODUCT_RETIRE,
                                                   CNUPRODUCT_UNINSTALL_RET)
          AND PR_PRODUCT.ADDRESS_ID IS NOT NULL
          AND TRUNC(SERVSUSC.SESUFEIN) <= TRUNC(PER.PECSFECF)
          AND (   (EXISTS (SELECT /*+ USE_NL(servsusc, elmesesu) */
                                 'X'
                           FROM  ELMESESU
                           WHERE ELMESESU.EMSSSESU = SERVSUSC.SESUNUSE
                             AND ELMESESU.EMSSFEIN <= PER.PECSFECF
                             AND ELMESESU.EMSSFERE > PER.PECSFECF)
                   AND NOT EXISTS (SELECT /*+ USE_NL(servsusc, lectelme) */
                                         'X'
                                   FROM  LECTELME
                                   WHERE LECTELME.LEEMSESU = SERVSUSC.SESUNUSE
                                     AND LECTELME.LEEMCLEC = CM_BOCONSTANTS.CSBCAUS_LECT_BILL
                                     AND LECTELME.LEEMPECS = INUPECSCONS)
                  )
               OR (NOT EXISTS (SELECT /*+ USE_NL(servsusc, elmesesu) */
                                     'X'
                               FROM  ELMESESU
                               WHERE ELMESESU.EMSSSESU = SERVSUSC.SESUNUSE
                                 AND ELMESESU.EMSSFEIN <= PER.PECSFECF
                                 AND ELMESESU.EMSSFERE > PER.PECSFECF)
                   AND NOT EXISTS (SELECT /*+ USE_NL(servsusc, conssesu)
                                              index(conssesu IX_CONSSESU02) first_rows(1) */
                                         'X'
                                   FROM  CONSSESU
                                   WHERE CONSSESU.COSSSESU = SERVSUSC.SESUNUSE
                                     AND CONSSESU.COSSPECS = INUPECSCONS)
                  )
              );

    














    CURSOR CUGETPRODBYSUBSSTATE
    (
        INUSUBSCRIPTIONID    IN    PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        ISBPRODUCTSTATUS     IN    VARCHAR2
    )
    IS
        SELECT  /*+ index(a idx_pr_product_010) */
                A.*, A.ROWID
          FROM  PR_PRODUCT A
                /*+ pr_bcProduct.cuGetProdbySubsState */
         WHERE  A.SUBSCRIPTION_ID = INUSUBSCRIPTIONID
           AND  INSTR(ISBPRODUCTSTATUS, ','||A.PRODUCT_STATUS_ID||',') > 0;
           
           
    













    CURSOR CUNUMPRODBYSUBSCADDR
    (
        INUADDRESSID            IN     GE_SUBSCRIBER.ADDRESS_ID%TYPE,
        INUSUBSCRIBERID         IN     GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS
        SELECT    /*+ leading (suscripc)
                  use_nl(pr_product suscripc)*/
                  COUNT(PRODUCT_ID)
        FROM      PR_PRODUCT, SUSCRIPC,PS_PRODUCT_STATUS /*+ pr_bcProduct.cuNumProdBySubscAddr */
        WHERE     PR_PRODUCT.PRODUCT_STATUS_ID=PS_PRODUCT_STATUS.PRODUCT_STATUS_ID
        AND       PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES
        AND       SUSCRIPC.SUSCCODI=PR_PRODUCT.SUBSCRIPTION_ID
        AND       SUSCRIPC.SUSCCLIE= INUSUBSCRIBERID
        AND       PR_PRODUCT.ADDRESS_ID=INUADDRESSID;

           

    
    
    
    



    FUNCTION FSBVERSION  RETURN VARCHAR2;

    
    
    
    FUNCTION GETCOMPONENTSBYTYPEBYPRODUCT
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID      IN  PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE,
        ICHISACTIVESTATUS       IN  PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT%TYPE DEFAULT GE_BOCONSTANTS.CSBYES,
        ICHISFINALSTATUS        IN  PS_PRODUCT_STATUS.IS_FINAL_STATUS%TYPE DEFAULT GE_BOCONSTANTS.CSBYES
    )
    RETURN TYRFCURSOR;

    
    FUNCTION GETCOMPONENTSBYCOMPONENTID
    (
        INUCOMPONENTID  PR_COMPONENT.COMPONENT_ID%TYPE
    )
    RETURN TYRFCURSOR;

    
    
    
    FUNCTION GETMASTERSCOMPIDBYPRODUCT
    (
        INUPRODUCTID    PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN TYRFCURSOR;


    
    
    

    
    FUNCTION FNUGETFATHERCOMPONENT
    (
    	NUCOMPONENTID   IN PR_COMPONENT_LINK.CHILD_COMPONENT_ID%TYPE
    )
    RETURN PR_COMPONENT_LINK.PARENT_COMPONENT_ID%TYPE;

    
    FUNCTION GETCOMPIDBYPRODUCTID
    (
        INUPRODUCTID    PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN TYRFCURSOR;

    
    FUNCTION GETPRODUCTBOXES
    (
        INUPRODUCTID    PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN TYRFCURSOR;

	
	
	
    
    FUNCTION GETCHILDCOMPONENTS
    (
        INUCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE,
        ISBFLAGSERVSUP IN VARCHAR2,
        ICHSTATUS      IN VARCHAR2
    )
    RETURN TYRFCURSOR;

	
	
	
    

   	PROCEDURE FATHERPRODUCTCOMPONENT
	(
	    INUCOMPONENTID IN NUMBER,
	    ONUFATHERID    OUT NUMBER,
	    ONUFATHERTYPE  OUT NUMBER
	);

	
	
	
    

	PROCEDURE GETPRODUCTCOMPONENT
	(
	    INUPRODUCTID     IN  NUMBER,
	    INUCOMPONENTTYPE IN  NUMBER,
	    ISBSERVICENUMBER IN  VARCHAR2,
	    INUCLASSSERVICE  IN  NUMBER,
	    ONUCOMPONENTID   OUT NUMBER
	);

	
	
	
	
    FUNCTION GETELEMENTASSBYELEMENTID
    (
        INUELEMENTID    IN  PR_NETWORK_ELEM_OPER.ELEMENT_ID%TYPE
    )
    RETURN TYRFCURSOR;

	
	
	
	
    FUNCTION GETSUBSCRIBERID
    (
        INUSERVICENUMBER    IN  PR_PRODUCT.SERVICE_NUMBER%TYPE
    )
    RETURN TYRFCURSOR;

	
	
	
	
    FUNCTION FNUCOUNTSUSPENSION
    (
        INUPRODUCTID   IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN NUMBER;
    FUNCTION FNUCOUNTCOMPSUSPEN
    (
        INUCOMPONENTID   IN  PR_COMPONENT.COMPONENT_ID%TYPE
    )
    RETURN NUMBER;
	
	
	FUNCTION GETPRODUCTCOMPONENT
	(
	    INUPRODUCTID   IN  NUMBER
	)
    RETURN TYRFCURSOR;
	
	PROCEDURE GETFATHERCOMPONENT
	(
	    INUCOMPONENTID    IN   NUMBER,
	    ONUFATHERCOMPID   OUT  NUMBER,
	    ONUFATHERCOMPTYPE OUT  NUMBER
	);
    FUNCTION FBLEXISTPRODSUSPENSION
    (
        INUPRODUCTID   IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENTYPE  IN  PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
    RETURN BOOLEAN;

	
	
	
	
    FUNCTION FBLEXISTCOMPSUSPENSION
    (
        INUCOMPONENTID   IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUSUSPENTYPE    IN  PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
    RETURN BOOLEAN;

    
















    FUNCTION FRFGETMAINCOMPONENTS
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        IBLISACTIVEPRODUCT  IN BOOLEAN DEFAULT FALSE
        )
    RETURN CONSTANTS.TYREFCURSOR;

    




















    FUNCTION FRFGETTYPESCOMPONENTS
        (
        INUPRODUCTID          IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID    IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        IBLISACTIVECOMPONENT  IN BOOLEAN DEFAULT FALSE
		)
    RETURN CONSTANTS.TYREFCURSOR;

    










    FUNCTION FDTLASTPRODUCTRETIRE
    (
        INUPRODUCTID IN NUMBER
    )
    RETURN DATE;

    











    FUNCTION FDTLASTCOMPONENTRETIRE
    (
        INUCOMPONENTID IN NUMBER
    )
    RETURN DATE;

    






    FUNCTION FNUGETMAINCOMPONENT
    (
        INUPRODUCTID IN NUMBER
    )
    RETURN NUMBER;
    
















    FUNCTION FNUGETCOMPONENTCOUNT
    (
        INUPRODUCTID         IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID   IN PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE
    )
    RETURN NUMBER;

    



















    FUNCTION FRFGETCHILDCOMPONENT
    (
        INUPRODUCTID        IN PR_COMPONENT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID  IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCLASSSERVICEID   IN PR_COMPONENT.CLASS_SERVICE_ID%TYPE DEFAULT NULL
    )
    RETURN TYRFCURSOR;
    

    




















	PROCEDURE GETCOMPONENTID
	(
	    INUPRODUCTID     IN  NUMBER,
	    INUCOMPONENTTYPE IN  NUMBER,
	    ISBSERVICENUMBER IN  VARCHAR2,
	    INUCLASSSERVICE  IN  NUMBER,
	    ONUCOMPONENTID   OUT NUMBER
	);

    
















    FUNCTION FNUGETCOUNTCOMPONENTS
        (
        INUPRODUCTID        IN  PR_COMPONENT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID  IN  PR_COMPONENT.COMPONENT_TYPE_ID%TYPE DEFAULT NULL
        )
    RETURN NUMBER;

    















    FUNCTION FNUGETCOMPONENTCOUNT
    (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID  IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCLASSSERVICEID   IN PR_COMPONENT.CLASS_SERVICE_ID%TYPE
    )
    RETURN NUMBER ;

    














    FUNCTION FNUGETACTIVECOMPONENT
    (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN NUMBER ;
    
    

















    
    FUNCTION FNUGETMASTERSCOMPCOUNT
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        ISBDEPENCOMPTYP IN  VARCHAR2
    )
    RETURN NUMBER;
    
    


























   FUNCTION FNUGETMAINCOMPONENTID
        (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        IBLRAISEERROR   IN  BOOLEAN DEFAULT TRUE
        )
    RETURN NUMBER;
    
    


















    FUNCTION FNUGETFIRSTPRODUCTID
    (
        INUPRODUCTTYPE            PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        INUPRODUCTSTATUS          PR_PRODUCT.PRODUCT_STATUS_ID%TYPE,
        INUSUBSCRIBER             GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN NUMBER;
    
    





















    FUNCTION FNUGETMAINACTIVECOMP
        (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
        )
    RETURN NUMBER;
    
    














    FUNCTION FNUGETSUBSCRIBERID
        (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
        )
    RETURN NUMBER;
    
    
















    FUNCTION FNUGETPRCOUNTBYPRPROV
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPRODUCTTYPEID    IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
        )
    RETURN NUMBER;
    
    















    FUNCTION FTBPRODSBYSUBSCID
    (
        INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT;
    
    
    






















    PROCEDURE GETPRODUCTBYADDR
    (
        INUADDRESS_ID     IN PR_PRODUCT.ADDRESS_ID%TYPE,
        INUPRODUCT_ID     IN PR_PRODUCT.PRODUCT_ID%TYPE,
        OBOCONTINUE       OUT BOOLEAN,
        OTBTYPRODID        OUT NOCOPY DAPR_PRODUCT.TYTBPRODUCT_ID
    );
    

    




















    CURSOR CUPRODUCTSBYADDRESS
    (
        INUADDRESSID        IN PR_PRODUCT.ADDRESS_ID%TYPE,
        INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        INUSUBSCRIBERID     IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    IS
    SELECT   A.*, A.ROWID
    FROM     PR_PRODUCT A,
             SUSCRIPC B,
             GE_SUBSCRIBER C
    WHERE    A.ADDRESS_ID = INUADDRESSID
    AND      A.SUBSCRIPTION_ID = NVL(INUSUBSCRIPTIONID, A.SUBSCRIPTION_ID)
    AND      C.SUBSCRIBER_ID = NVL(INUSUBSCRIBERID, C.SUBSCRIBER_ID)
    AND      A.SUBSCRIPTION_ID = B.SUSCCODI
    AND      B.SUSCCLIE = C.SUBSCRIBER_ID
    ORDER BY A.PRODUCT_STATUS_ID;
    
    
    















    CURSOR CUPRODSBYNEWADDRESS
    (
        INUADDRESSID        IN PR_PRODUCT.ADDRESS_ID%TYPE,
        INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    )
    IS
        SELECT A.*, A.ROWID
          FROM PR_PRODUCT A
         WHERE SUBSCRIPTION_ID = INUSUBSCRIPTIONID
           AND ADDRESS_ID <> INUADDRESSID
           AND EXISTS (
                 SELECT 'X'
                   FROM MO_ADDRESS B, MO_MOTIVE C, PS_MOTIVE_STATUS D
                  WHERE B.MOTIVE_ID = C.MOTIVE_ID
                    AND C.MOTIVE_STATUS_ID = D.MOTIVE_STATUS_ID
                    AND C.PRODUCT_ID = A.PRODUCT_ID
                    AND C.TAG_NAME = PS_BOPRODUCTMOTIVE.CSBTAGGENERTRASL
                    AND D.IS_FINAL_STATUS = 'N'
                    AND B.PARSER_ADDRESS_ID = INUADDRESSID
                );

    


















    PROCEDURE GETPRODUCTSBYADDRESS
        (
        INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT,
        INUSUBSCRIBERID     IN  GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE DEFAULT NULL
        );
        
        
    


















    PROCEDURE GETPRODSBYNEWADDRESS
        (
        INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT
        );
        
    













    CURSOR CUPRODUCTSSUBSCRIPTION
        (
        INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
        )
    IS
    SELECT  A.*, A.ROWID
    FROM PR_PRODUCT A
    WHERE A.SUBSCRIPTION_ID= INUSUBSCRIPTIONID;
    
    
    
















    PROCEDURE GETPRODUCTSSUBSCRIPTION
        (
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT
        );
        
    



















    FUNCTION FSBGETLOCAINSTAPROD
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE

    )
    RETURN VARCHAR2;
    
    
    




















    FUNCTION FSBGETDISTADMINPRODBYZONE
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE

    )
    RETURN VARCHAR2;
    
    



















    FUNCTION FSBGETDISTADMINPRODBYCENTER
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE

    )
    RETURN VARCHAR2;
    
    FUNCTION FRCGETLOCAINSTAPROD
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE

    )
    RETURN GE_GEOGRA_LOCATION%ROWTYPE;
    
     FUNCTION FRCGETDISTADMINPRODBYZONE
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_DISTRIBUT_ADMIN%ROWTYPE;
    
    
    FUNCTION FRCGETDISTADMINPRODBYCENTER
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE

    )
    RETURN GE_DISTRIBUT_ADMIN%ROWTYPE;
    
    FUNCTION FNUGETADDRESSID
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN PR_PRODUCT.ADDRESS_ID%TYPE;
    
    FUNCTION FNUGETLOCAINSTAPROD
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
    
    


















    FUNCTION FRFGETPRODBYSUSCANDTYP
    (
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        ISBLISTTYPES        IN  VARCHAR2
    )
    RETURN CONSTANTS.TYREFCURSOR;
    
    









    FUNCTION FRCGETMAINCOMP
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN DAPR_COMPONENT.STYPR_COMPONENT;


    




    FUNCTION FNUGETMAINCOMP(INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE)
    RETURN PR_COMPONENT.COMPONENT_ID%TYPE;
    
    
















    FUNCTION FNUACTANDPENPRBYSUBS
    (
        INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    )
    RETURN NUMBER;

    
    
















    FUNCTION FTBACTPENDPRODBYSUBS
    (
        INUCONTRATO          IN SUSCRIPC.SUSCCODI%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT;
    
    













    FUNCTION FNUGETCOMMUNEINSTALLDIR
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
    
    



    FUNCTION FNUGETLOCAINSTALLDIR
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;


    













    FUNCTION FNUGETDEPINSTALLDIR
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
    
    
    













    FUNCTION FNUGETNEIGHBINSTALLDIR
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;

    














    FUNCTION FNUGETMAINANYSTATUSCOMPONENTID
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        IBLRAISEERROR   IN  BOOLEAN DEFAULT TRUE
    )
    RETURN PR_COMPONENT.COMPONENT_ID%TYPE;
    
    















    FUNCTION FTBGETPRODBYSUBSNTYPE
    (
        INUSUBSCRIPTIONID   PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        INUPRODUCTTYPEID    PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT;
    
    













    FUNCTION FNUGETFIRSTPRODBYSUBS
    (
        INUSUBSCRIPTIONID   PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    )
    RETURN NUMBER;

    













    PROCEDURE GETPRODGEOLOCATION
    (
        INUPRODUCTID     IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        ONUGEOLOCATION   OUT AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ONUNEIGHBORTHOOD OUT AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE
    );
    
     



    FUNCTION FNUCOUNTALLINSTBYCONT
    (
       INUSUBSCRIPTIONID    PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    )
    RETURN NUMBER;
    
    




    FUNCTION FBLISPRODUCTENABLED
    (
        INUPRODUCT_ID   IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN BOOLEAN;

    




    PROCEDURE GETSERVNUMANDSERVICE
    (
        INUPRODUCT_ID       IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBSERVICENUMBER    OUT PR_PRODUCT.SERVICE_NUMBER%TYPE,
        OSBSERVICENAME      OUT SERVICIO.SERVDESC%TYPE
    );
    
    





    FUNCTION FNUGETTOTALPROD
    (
        INUPECSCICO IN CICLCONS.CICOCODI%TYPE,
        INUDIVI     IN REACGELE.RAGLDIVI%TYPE,
        INUPECSCONS IN PERICOSE.PECSCONS%TYPE
    )
    RETURN NUMBER;
    
    




    PROCEDURE GETPRODTOREAD
    (
        INUAMOUNT   IN         INTEGER DEFAULT 100,
        OTBPRODUCTS OUT NOCOPY DAPR_PRODUCT.TYTBPRODUCT_ID
    );
    





    FUNCTION FSBPRODHASCOMPBYTYPE
        (
        INUPRODUCTID        IN      PR_COMPONENT.PRODUCT_ID%TYPE,
        ISBCOMPONENTTYPES   IN      VARCHAR2
        )
    RETURN VARCHAR2;
    



    FUNCTION FTBACTPRODSBYSUBS
    (
        INUSUBSCRIBERID     IN      GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT;

    FUNCTION FNUGETCOUNTPRODBYIDENT
    (
        INUIDENTIFICA_TYPE      IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION       IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE
    )
    RETURN NUMBER;
    
    FUNCTION FNUGETCOUNTCOMPCAT
    (
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID  IN  PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCLASCATID        IN  PS_CLASS_SERVICE.CATEGORY%TYPE
    )
    RETURN NUMBER;
    
    





    FUNCTION FTBGETPRODBYSUBSSTATE
    (
        INUSUBSCRIPTIONID    IN    PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        ISBPRODUCTSTATUS     IN    VARCHAR2
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT;
    
    







    FUNCTION FNUGETPRODBYADDRPRODTYPE
    (
        INUADDRESSID    AB_ADDRESS.ADDRESS_ID%TYPE,
        INUPRODUCTTYPE  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
    )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE;

    FUNCTION FTBGETPRODBYCONTNTYPE
    (
        INUSUBSCRIPTION     IN      PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        INUPRODUCTTYPEID    IN      PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT;
    
    














    PROCEDURE CLEARMEMORY;

    














    PROCEDURE GETPRODSBYADDRESSCACHE
    (
        INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT
    );

    















    PROCEDURE GETPRODSBYSUBSANDADDRCACHE
    (
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT
    );
    
    









    PROCEDURE GETPRODDATABYSUBS
    (
        INUSUBSCRIBERID     IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        ONUACTIPRODCOUNT    OUT NUMBER,
        ODTACTIPRODFIRST    OUT DATE
    );

END PR_BCPRODUCT;

PACKAGE BODY PR_BCProduct IS
















































































































































































































    
    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(250)  := 'SAO330778';
    CNUNOT_MAIN_COMPONENT       CONSTANT NUMBER(4)      := 764;
    
    CNUERRORPRODSTASUBS         CONSTANT NUMBER(10)     := 113762;
    
    CNUERROR_4183               CONSTANT NUMBER(4)      := 4183;
    
    CNUNOT_MAIN_ACT_COMPONENT   CONSTANT NUMBER(10)     := 114322;
    
    CNUBOXTYPE                  CONSTANT NUMBER(4)      := 17;
    
    CNUREGISTERQUANTITY         CONSTANT NUMBER         := 100;
    
    SBERRMSG                GE_ERROR_LOG.DESCRIPTION%TYPE;
    BLLOADPARAMETERS        BOOLEAN := FALSE;
    NUDIST_ADMIN_TIPO_CENT  GE_DISTRIBUT_ADMIN.DISTRI_ADMI_TYPE_ID%TYPE;
    NUDIST_ADMIN_TIPO_ZONA  GE_DISTRIBUT_ADMIN.DISTRI_ADMI_TYPE_ID%TYPE;
    NULOCALIDA_GEO_LOC      GE_GEOGRA_LOCATION.GEOG_LOCA_AREA_TYPE%TYPE;
    
    
    
    
    
    GNUADDRESSID            PR_PRODUCT.ADDRESS_ID%TYPE;
    GTBPRODUCTSBYADDRESS    DAPR_PRODUCT.TYTBPR_PRODUCT;

    
    GSBHASHSUBSCANDADDR             VARCHAR2(25);
    GTBPRODSBYSUBSCANDADDR          DAPR_PRODUCT.TYTBPR_PRODUCT;

    
    
    

    
    
    TYPE TYRCCOMMUNEINSTALLDIR IS RECORD
    (
        NUPRODUCTID       PR_PRODUCT.PRODUCT_ID%TYPE,
        NUCOMMUNE         GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    );
    GRCCOMMUNEINSTALLDIR TYRCCOMMUNEINSTALLDIR;

    TYPE TYRCLOCALITYINSTALLDIR IS RECORD
    (
        NUPRODUCTID       PR_PRODUCT.PRODUCT_ID%TYPE,
        NULOCALITY        GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    );
    GRCLOCALITYINSTALLDIR TYRCLOCALITYINSTALLDIR;

    TYPE TYRCDEPARTMENTINSTALLDIR IS RECORD
    (
        NUPRODUCTID       PR_PRODUCT.PRODUCT_ID%TYPE,
        NUDEPARTMENT      GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    );
    GRCDEPARTMENTINSTALLDIR TYRCDEPARTMENTINSTALLDIR;

    TYPE TYRCNEIGHBORTHOODINSTALLDIR IS RECORD
    (
        NUPRODUCTID       PR_PRODUCT.PRODUCT_ID%TYPE,
        NUNEIGHBORTHOOD   GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    );
    GRCNEIGHBORTHOODINSTALLDIR TYRCNEIGHBORTHOODINSTALLDIR;


    
    
    

    CURSOR CUPRODUCTBYADDR (
                                INUADDRESS_ID  PR_PRODUCT.ADDRESS_ID%TYPE,
                                INUPRODUCT_ID  PR_PRODUCT.PRODUCT_ID%TYPE
                            )
    IS
        SELECT PRODUCT_ID --+ index(pr_product, PK_PR_PRODUCT)
        FROM   PR_PRODUCT
        WHERE  ADDRESS_ID = INUADDRESS_ID
        AND    PRODUCT_ID > INUPRODUCT_ID;
    
    
    
    PROCEDURE LOADPARAMETERS;
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    
    
    
    FUNCTION GETCOMPONENTSBYTYPEBYPRODUCT
    (
        INUPRODUCTID            IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID      IN  PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE,
        ICHISACTIVESTATUS       IN  PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT%TYPE DEFAULT GE_BOCONSTANTS.CSBYES,
        ICHISFINALSTATUS        IN  PS_PRODUCT_STATUS.IS_FINAL_STATUS%TYPE DEFAULT GE_BOCONSTANTS.CSBYES
    )
    RETURN TYRFCURSOR
    IS
        
        RFCURSOR TYRFCURSOR;
    BEGIN

        OPEN RFCURSOR FOR
            SELECT PR_COMPONENT.*
            FROM PR_COMPONENT, PS_PRODUCT_STATUS
            WHERE PR_COMPONENT.PRODUCT_ID = INUPRODUCTID
              AND PR_COMPONENT.COMPONENT_STATUS_ID = PS_PRODUCT_STATUS.PRODUCT_STATUS_ID
              AND PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT = ICHISACTIVESTATUS
              AND PS_PRODUCT_STATUS.IS_FINAL_STATUS = ICHISFINALSTATUS;

        RETURN(RFCURSOR);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END;



    
    FUNCTION GETCOMPONENTSBYCOMPONENTID
    (
        INUCOMPONENTID  PR_COMPONENT.COMPONENT_ID%TYPE
    )
    RETURN TYRFCURSOR
    IS
        
        RFCURSOR TYRFCURSOR;
    BEGIN

        OPEN RFCURSOR FOR
            SELECT CHILD_COMPONENT_ID, PARENT_COMPONENT_ID
            FROM PR_COMPONENT_LINK
            START WITH CHILD_COMPONENT_ID = INUCOMPONENTID
            CONNECT BY PRIOR CHILD_COMPONENT_ID = PARENT_COMPONENT_ID;

        RETURN(RFCURSOR);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION GETMASTERSCOMPIDBYPRODUCT
    (
        INUPRODUCTID    PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN TYRFCURSOR
    IS
        
        RFCURSOR TYRFCURSOR;
    BEGIN

        OPEN RFCURSOR FOR
            SELECT CHILD_COMPONENT_ID
            FROM  PR_COMPONENT_LINK, PR_COMPONENT
            WHERE PR_COMPONENT.COMPONENT_ID = PR_COMPONENT_LINK.CHILD_COMPONENT_ID
              AND PR_COMPONENT_LINK.PARENT_COMPONENT_ID IS NULL
              AND PR_COMPONENT.PRODUCT_ID = INUPRODUCTID;

        RETURN(RFCURSOR);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END;


        
    



















    FUNCTION FNUGETFATHERCOMPONENT
    (
    	NUCOMPONENTID   IN PR_COMPONENT_LINK.CHILD_COMPONENT_ID%TYPE
    )
    RETURN PR_COMPONENT_LINK.PARENT_COMPONENT_ID%TYPE
    IS
    	CURSOR CUPARENT IS
            SELECT PARENT_COMPONENT_ID
            FROM  PR_COMPONENT_LINK
            WHERE CHILD_COMPONENT_ID =  NUCOMPONENTID
              AND ROWNUM = 1;
		NUPARENT  PR_COMPONENT_LINK.PARENT_COMPONENT_ID%TYPE;
    BEGIN

    	FOR RC IN CUPARENT LOOP
    		NUPARENT := RC.PARENT_COMPONENT_ID;
    	END LOOP;

        RETURN(NUPARENT);

    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FNUGETFATHERCOMPONENT;

    
    
    FUNCTION GETCOMPIDBYPRODUCTID
    (
        INUPRODUCTID    PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN TYRFCURSOR
    IS
        
        RFCURSOR TYRFCURSOR;
    BEGIN
	
        OPEN RFCURSOR FOR
            SELECT COMPONENT_ID
            FROM  PR_COMPONENT
            WHERE PRODUCT_ID = INUPRODUCTID
			  AND COMPONENT_STATUS_ID <> PR_BOPARAMETER.FNUGETCOMPRETI;

        RETURN(RFCURSOR);
	
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION GETPRODUCTBOXES
    (
        INUPRODUCTID    PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN TYRFCURSOR
    IS
        
        RFCURSOR TYRFCURSOR;
        NUCATESERV  NUMBER := IM_BOCONSTANTS.CNUCATEGORYSERVICES;
    BEGIN
	
        OPEN RFCURSOR FOR
            SELECT B.ELEMENT_ID BOX_ID
            FROM  PR_COMPONENT A, PR_NETWORK_ELEM_OPER B
            WHERE A.PRODUCT_ID = INUPRODUCTID
			  AND A.COMPONENT_ID = B.COMPONENT_ID
              AND B.ELEMENT_TYPE_ID = CNUBOXTYPE
			  AND B.ELEMENT_ID IS NOT NULL
              AND B.CATEGORY_ID = NUCATESERV
			ORDER BY LAST_UPD_DATE DESC;

        RETURN(RFCURSOR);
	
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END GETPRODUCTBOXES;

	
	
	
    
    FUNCTION GETCHILDCOMPONENTS
    (
        INUCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE,
        ISBFLAGSERVSUP IN VARCHAR2,
        ICHSTATUS      IN VARCHAR2
    )
    RETURN TYRFCURSOR
    IS
        
        RFCURSOR TYRFCURSOR;
    BEGIN
	
        OPEN RFCURSOR FOR
			SELECT PR_COMPONENT.COMPONENT_ID
			  FROM PR_COMPONENT_LINK, PR_COMPONENT, PS_PRODUCT_STATUS
			 WHERE PARENT_COMPONENT_ID = INUCOMPONENTID
			   AND PR_COMPONENT.COMPONENT_ID = PR_COMPONENT_LINK.CHILD_COMPONENT_ID
			   AND PR_COMPONENT.CLASS_SERVICE_ID IS NOT NULL
			   AND PR_COMPONENT.COMPONENT_ID = DECODE (GE_BOCONSTANTS.CSBNO, ISBFLAGSERVSUP, PR_COMPONENT.COMPONENT_ID, NULL)
               AND PS_PRODUCT_STATUS.PRODUCT_STATUS_ID = PR_COMPONENT.COMPONENT_STATUS_ID
               AND PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT = DECODE (ICHSTATUS, NULL, PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT, ICHSTATUS)
			 UNION
			SELECT PR_COMPONENT.COMPONENT_ID
			  FROM PR_COMPONENT_LINK, PR_COMPONENT, PS_PRODUCT_STATUS
			 WHERE PARENT_COMPONENT_ID = INUCOMPONENTID
			   AND PR_COMPONENT.COMPONENT_ID = PR_COMPONENT_LINK.CHILD_COMPONENT_ID
			   AND PR_COMPONENT.CLASS_SERVICE_ID IS NULL
			   AND PR_COMPONENT.COMPONENT_ID = DECODE (GE_BOCONSTANTS.CSBYES, ISBFLAGSERVSUP, PR_COMPONENT.COMPONENT_ID, NULL)
               AND PS_PRODUCT_STATUS.PRODUCT_STATUS_ID = PR_COMPONENT.COMPONENT_STATUS_ID
               AND PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT = DECODE (ICHSTATUS, NULL, PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT, ICHSTATUS);

        RETURN(RFCURSOR);
	
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END GETCHILDCOMPONENTS;


	PROCEDURE FATHERPRODUCTCOMPONENT
	(
	    INUCOMPONENTID IN NUMBER,
	    ONUFATHERID    OUT NUMBER,
	    ONUFATHERTYPE  OUT NUMBER
	)
 IS
    CURSOR CUFATHERPRODUCTCOMPONENT
    (
        NUCOMPONENTID NUMBER
    )
    IS
        SELECT PARENT_COMPONENT_ID,
               COMPONENT_TYPE_ID
          FROM PR_COMPONENT_LINK, PR_COMPONENT
         WHERE CHILD_COMPONENT_ID = NUCOMPONENTID
           AND COMPONENT_ID = PARENT_COMPONENT_ID;

 BEGIN

		OPEN CUFATHERPRODUCTCOMPONENT (INUCOMPONENTID);
	    FETCH CUFATHERPRODUCTCOMPONENT INTO ONUFATHERID, ONUFATHERTYPE;

	    IF CUFATHERPRODUCTCOMPONENT%NOTFOUND THEN
	        ONUFATHERID := NULL;
	        ONUFATHERTYPE := NULL;
	    END IF;
		CLOSE CUFATHERPRODUCTCOMPONENT;

	EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
	END;

	

	PROCEDURE GETPRODUCTCOMPONENT
	(
	    INUPRODUCTID     IN  NUMBER,
	    INUCOMPONENTTYPE IN  NUMBER,
	    ISBSERVICENUMBER IN  VARCHAR2,
	    INUCLASSSERVICE  IN  NUMBER,
	    ONUCOMPONENTID   OUT NUMBER
	)
 IS
	    
	    CNUPRODUC_NOEXISTE   CONSTANT NUMBER := 1756;

	    CURSOR CUGETPRODUCTCOMPONENT
	    (
	        NUPRODUCTID     NUMBER,
	        NUCOMPONENTTYPE NUMBER,
	        SBSERVICENUMBER VARCHAR2,
   	        NUCLASSSERVICE  NUMBER
	    )
     IS
        SELECT COMPONENT_ID
          FROM PR_COMPONENT
         WHERE PRODUCT_ID = NUPRODUCTID
           AND COMPONENT_TYPE_ID = NUCOMPONENTTYPE
           AND SERVICE_NUMBER = SBSERVICENUMBER
           AND CLASS_SERVICE_ID IS NULL
         UNION
        SELECT COMPONENT_ID
          FROM PR_COMPONENT
         WHERE PRODUCT_ID = NUPRODUCTID
           AND COMPONENT_TYPE_ID = NUCOMPONENTTYPE
           AND SERVICE_NUMBER = SBSERVICENUMBER
           AND CLASS_SERVICE_ID = NUCLASSSERVICE;
 BEGIN

	    OPEN CUGETPRODUCTCOMPONENT (INUPRODUCTID, INUCOMPONENTTYPE, ISBSERVICENUMBER, INUCLASSSERVICE);
        FETCH CUGETPRODUCTCOMPONENT INTO ONUCOMPONENTID;

        IF CUGETPRODUCTCOMPONENT%NOTFOUND THEN
            CLOSE CUGETPRODUCTCOMPONENT;
            ERRORS.SETERROR(PR_BOCONSTANTS.ERR_PROD_NOEXISTE,INUPRODUCTID||'|'||INUCOMPONENTTYPE||'|'||ISBSERVICENUMBER);
			RAISE EX.CONTROLLED_ERROR;
        END IF;
	    CLOSE CUGETPRODUCTCOMPONENT;

	EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
	END;

	
	
    FUNCTION GETELEMENTASSBYELEMENTID
    (
        INUELEMENTID    IN  PR_NETWORK_ELEM_OPER.ELEMENT_ID%TYPE
    )
    RETURN TYRFCURSOR
    IS
        
        RFCURSOR TYRFCURSOR;
    BEGIN
	
        OPEN RFCURSOR FOR
        	SELECT *
        	FROM  PR_NETWORK_ELEM_OPER
        	WHERE COMPONENT_ID IN (
				SELECT COMPONENT_ID
				FROM  PR_NETWORK_ELEM_OPER
				WHERE ELEMENT_ID  = INUELEMENTID )
		 	ORDER BY NETWORK_ELEM_OPER_ID;

        RETURN(RFCURSOR);
	
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END GETELEMENTASSBYELEMENTID;

    












    FUNCTION GETSUBSCRIBERID
    (
        INUSERVICENUMBER    IN  PR_PRODUCT.SERVICE_NUMBER%TYPE
    )
    RETURN TYRFCURSOR
    IS
        
        RFCURSOR TYRFCURSOR;
    BEGIN
	
        OPEN RFCURSOR FOR
			SELECT SUSCCLIE
			FROM   PR_PRODUCT A, SUSCRIPC B
			WHERE  A.SUBSCRIPTION_ID = B.SUSCCODI
			  AND  A.SERVICE_NUMBER=   INUSERVICENUMBER
			  AND  ROWNUM = 1;

        RETURN(RFCURSOR);
	
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END GETSUBSCRIBERID;


	
	
	
	
    FUNCTION FNUCOUNTSUSPENSION
    (
        INUPRODUCTID   IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN NUMBER
    IS
        
        CURSOR CUSUSPENSION
        IS
		SELECT COUNT(1) CANT
		FROM   PR_COMPONENT A, PR_COMP_SUSPENSION B
		WHERE  A.PRODUCT_ID    = INUPRODUCTID
		  AND  B.ACTIVE        = GE_BOCONSTANTS.CSBYES
		  AND  A.COMPONENT_ID  = B.COMPONENT_ID;
		
		NUCOUNT NUMBER:=0;
    BEGIN
	
		FOR RC IN CUSUSPENSION LOOP
			NUCOUNT := RC.CANT;
		END LOOP;
        RETURN(NUCOUNT);
	
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNTSUSPENSION;
    FUNCTION FNUCOUNTCOMPSUSPEN
    (
        INUCOMPONENTID   IN  PR_COMPONENT.COMPONENT_ID%TYPE
    )
    RETURN NUMBER
    IS
        
        CURSOR CUSUSPENSION
        IS
		SELECT COUNT(1) CANT
		FROM   PR_COMP_SUSPENSION
		WHERE  COMPONENT_ID  = INUCOMPONENTID
		  AND  ACTIVE        = GE_BOCONSTANTS.CSBYES;

		
		NUCOUNT NUMBER:=0;
    BEGIN
	
		FOR RC IN CUSUSPENSION LOOP
			NUCOUNT := RC.CANT;
		END LOOP;
        RETURN(NUCOUNT);
	
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNTCOMPSUSPEN;

	
	
	FUNCTION GETPRODUCTCOMPONENT
	(
	    INUPRODUCTID   IN  NUMBER
	)
    RETURN TYRFCURSOR
    IS
        
        RFCURSOR TYRFCURSOR;
    BEGIN

        OPEN RFCURSOR FOR
            SELECT COMPONENT_ID, COMPONENT_TYPE_ID,
			       SERVICE_NUMBER,  CLASS_SERVICE_ID
            FROM   PR_COMPONENT A
            WHERE  PRODUCT_ID = INUPRODUCTID
              AND  COMPONENT_STATUS_ID <> PR_BOPARAMETER.FNUGETCOMPRETI;

        RETURN(RFCURSOR);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END GETPRODUCTCOMPONENT;

	
	PROCEDURE GETFATHERCOMPONENT
	(
	    INUCOMPONENTID    IN   NUMBER,
	    ONUFATHERCOMPID   OUT  NUMBER,
	    ONUFATHERCOMPTYPE OUT  NUMBER
	)
    IS
        
        CURSOR CUDATOS
        IS
	    SELECT COMPONENT_ID, COMPONENT_TYPE_ID
	    FROM   PR_COMPONENT
	    WHERE  COMPONENT_ID IN (
			SELECT 	PARENT_COMPONENT_ID
			FROM 	PR_COMPONENT_LINK
			WHERE   CHILD_COMPONENT_ID=INUCOMPONENTID
		  );

    BEGIN
		FOR RC IN CUDATOS LOOP
		    ONUFATHERCOMPID   := RC.COMPONENT_ID;
		    ONUFATHERCOMPTYPE := RC.COMPONENT_TYPE_ID;
		END LOOP;
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END GETFATHERCOMPONENT;
    
	
	
	
	
	
    
    
    FUNCTION FBLEXISTPRODSUSPENSION
    (
        INUPRODUCTID   IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUSUSPENTYPE  IN  PR_PROD_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        
        CURSOR CUSUSPENSION
        IS
		SELECT PRODUCT_ID
		FROM   PR_PROD_SUSPENSION
		WHERE  PRODUCT_ID         = INUPRODUCTID
		  AND  SUSPENSION_TYPE_ID = NVL(INUSUSPENTYPE, SUSPENSION_TYPE_ID)
		  AND  ACTIVE             = GE_BOCONSTANTS.CSBYES;
    BEGIN
	
		FOR RC IN CUSUSPENSION LOOP
			RETURN(TRUE);
		END LOOP;
        RETURN(FALSE);
	
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTPRODSUSPENSION;

	
	
	
	
	
    
    
    FUNCTION FBLEXISTCOMPSUSPENSION
    (
        INUCOMPONENTID   IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUSUSPENTYPE    IN  PR_COMP_SUSPENSION.SUSPENSION_TYPE_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        
        CURSOR CUSUSPENSION
        IS
		SELECT COMPONENT_ID
		FROM   PR_COMP_SUSPENSION
		WHERE  COMPONENT_ID       = INUCOMPONENTID
		  AND  SUSPENSION_TYPE_ID = NVL(INUSUSPENTYPE, SUSPENSION_TYPE_ID)
		  AND  ACTIVE             = GE_BOCONSTANTS.CSBYES;
    BEGIN
	
		FOR RC IN CUSUSPENSION LOOP
			RETURN(TRUE);
		END LOOP;
        RETURN(FALSE);
	
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
    	   		RAISE;
    		WHEN OTHERS THEN
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTCOMPSUSPENSION;


    FUNCTION FRFGETMAINCOMPONENTS
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        IBLISACTIVEPRODUCT  IN BOOLEAN DEFAULT FALSE
        )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFGETMAINCOMPONENTS   CONSTANTS.TYREFCURSOR;
        SBCRITERIA              VARCHAR2(100) := '%';
    BEGIN
        IF IBLISACTIVEPRODUCT THEN
            SBCRITERIA := GE_BOCONSTANTS.CSBYES;
        END IF;

        OPEN CURFGETMAINCOMPONENTS FOR
            SELECT A.*, A.ROWID
	        FROM PR_COMPONENT A, PR_COMPONENT_LINK B
	        WHERE A.PRODUCT_ID  = INUPRODUCTID
            AND A.COMPONENT_ID = B.CHILD_COMPONENT_ID
            AND B.PARENT_COMPONENT_ID IS NULL
	        AND EXISTS
	               (
	               SELECT 'X'
	               FROM PS_PRODUCT_STATUS B
                   WHERE B.PRODUCT_STATUS_ID = A.COMPONENT_STATUS_ID
                   AND B.IS_ACTIVE_PRODUCT LIKE SBCRITERIA
                   );

        RETURN CURFGETMAINCOMPONENTS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

	
    FUNCTION FRFGETTYPESCOMPONENTS
    (
        INUPRODUCTID         IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID   IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        IBLISACTIVECOMPONENT IN BOOLEAN DEFAULT FALSE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        CURFGETCOMPONENTS   CONSTANTS.TYREFCURSOR;
        SBCRITERIA              VARCHAR2(100) := '%';
    BEGIN
        IF IBLISACTIVECOMPONENT THEN
            SBCRITERIA := GE_BOCONSTANTS.CSBYES;
        END IF;

        OPEN CURFGETCOMPONENTS FOR
            SELECT A.*, A.ROWID
	        FROM PR_COMPONENT A, PS_PRODUCT_STATUS B
	        WHERE PRODUCT_ID  = INUPRODUCTID
	        AND A.COMPONENT_STATUS_ID = B.PRODUCT_STATUS_ID
            AND B.IS_ACTIVE_PRODUCT LIKE SBCRITERIA
			AND A.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID;
        RETURN CURFGETCOMPONENTS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETTYPESCOMPONENTS;



















FUNCTION FDTLASTPRODUCTRETIRE
(
    INUPRODUCTID IN NUMBER
)
RETURN DATE
IS

DTLASTRETIRE DATE;

CURSOR CULASTRETIRE
(
    NUPRODUCTID  NUMBER
)
IS
    SELECT RETIRE_DATE
      FROM PR_PRODUCT_RETIRE
     WHERE PRODUCT_ID = NUPRODUCTID
  ORDER BY RETIRE_DATE DESC;

BEGIN

    OPEN CULASTRETIRE (INUPRODUCTID);
        FETCH CULASTRETIRE INTO DTLASTRETIRE;

        IF CULASTRETIRE%NOTFOUND THEN
            DTLASTRETIRE := NULL;
        END IF;

    CLOSE CULASTRETIRE;

    RETURN DTLASTRETIRE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CULASTRETIRE%ISOPEN THEN
            CLOSE CULASTRETIRE;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CULASTRETIRE%ISOPEN THEN
            CLOSE CULASTRETIRE;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;



















FUNCTION FDTLASTCOMPONENTRETIRE
(
    INUCOMPONENTID IN NUMBER
)
RETURN DATE
IS

DTLASTRETIRE DATE;

CURSOR CULASTRETIRE
(
    NUCOMPONENTID  NUMBER
)
IS
    SELECT RETIRE_DATE
      FROM PR_COMPONENT_RETIRE
     WHERE COMPONENT_ID = NUCOMPONENTID
  ORDER BY RETIRE_DATE DESC;

BEGIN

    OPEN CULASTRETIRE (INUCOMPONENTID);
        FETCH CULASTRETIRE INTO DTLASTRETIRE;

        IF CULASTRETIRE%NOTFOUND THEN
            DTLASTRETIRE := NULL;
        END IF;

    CLOSE CULASTRETIRE;

    RETURN DTLASTRETIRE;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CULASTRETIRE%ISOPEN THEN
            CLOSE CULASTRETIRE;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CULASTRETIRE%ISOPEN THEN
            CLOSE CULASTRETIRE;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;


















FUNCTION FNUGETMAINCOMPONENT
(
    INUPRODUCTID IN NUMBER
)
RETURN NUMBER
IS

NUCOMPONENTEID  PR_COMPONENT.COMPONENT_ID%TYPE;

    CURSOR CUMAINCOMPONENT
    (
        NUPRODUCTID IN NUMBER
    )
    IS
        SELECT PR_COMPONENT.COMPONENT_ID
          FROM PR_COMPONENT, PR_PRODUCT, PR_COMPONENT_LINK
         WHERE PR_COMPONENT.PRODUCT_ID = NUPRODUCTID
           AND PR_PRODUCT.PRODUCT_ID = PR_COMPONENT.PRODUCT_ID
           AND PR_COMPONENT.SERVICE_NUMBER = PR_PRODUCT.SERVICE_NUMBER
           AND PR_COMPONENT_LINK.CHILD_COMPONENT_ID = PR_COMPONENT.COMPONENT_ID
           AND PR_COMPONENT_LINK.PARENT_COMPONENT_ID IS NULL;

BEGIN
    OPEN CUMAINCOMPONENT (INUPRODUCTID);
        FETCH CUMAINCOMPONENT INTO NUCOMPONENTEID;

        IF CUMAINCOMPONENT%NOTFOUND THEN
            ERRORS.SETERROR (CNUNOT_MAIN_COMPONENT, TO_CHAR (INUPRODUCTID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    CLOSE CUMAINCOMPONENT;

    RETURN NUCOMPONENTEID;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        IF CUMAINCOMPONENT%ISOPEN THEN
            CLOSE CUMAINCOMPONENT;
        END IF;
        RAISE;

    WHEN OTHERS THEN
        IF CUMAINCOMPONENT%ISOPEN THEN
            CLOSE CUMAINCOMPONENT;
        END IF;
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

    FUNCTION FNUGETCOMPONENTCOUNT
    (
        INUPRODUCTID         IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID   IN PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE
    )
    RETURN NUMBER
    IS
		RFCURSOR CONSTANTS.TYREFCURSOR;
		RCCOMPONENT DAPR_COMPONENT.STYPR_COMPONENT;
		NUCOUNT   NUMBER(4):=0;
    BEGIN
    	RFCURSOR := FRFGETTYPESCOMPONENTS(INUPRODUCTID,INUCOMPONENTTYPEID,TRUE);
	    FETCH RFCURSOR INTO RCCOMPONENT;
        WHILE RFCURSOR%FOUND LOOP
            FETCH RFCURSOR INTO RCCOMPONENT;
            NUCOUNT := NUCOUNT + 1;
        END LOOP;
        CLOSE RFCURSOR;
		RETURN NUCOUNT;
	EXCEPTION
	    WHEN EX.CONTROLLED_ERROR THEN
        	GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
		    RAISE;

	    WHEN OTHERS THEN
        	GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFCURSOR);
		    ERRORS.SETERROR;
	        RAISE EX.CONTROLLED_ERROR;
    END FNUGETCOMPONENTCOUNT;

    FUNCTION FRFGETCHILDCOMPONENT
    (
        INUPRODUCTID        IN PR_COMPONENT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID  IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCLASSSERVICEID   IN PR_COMPONENT.CLASS_SERVICE_ID%TYPE DEFAULT NULL
    )
    RETURN TYRFCURSOR
    IS
        RFCURSOR TYRFCURSOR;
    BEGIN
        OPEN RFCURSOR FOR
            SELECT A.*, A.ROWID
            FROM PR_COMPONENT A, PR_COMPONENT_LINK B, PR_COMPONENT C
            WHERE A.COMPONENT_ID = B.CHILD_COMPONENT_ID
            AND C.COMPONENT_ID = B.PARENT_COMPONENT_ID
            AND A.PRODUCT_ID = INUPRODUCTID
            AND C.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID
            AND C.CLASS_SERVICE_ID  = NVL(INUCLASSSERVICEID ,C.CLASS_SERVICE_ID)
            AND EXISTS  (
                        SELECT 'X'
                        FROM PS_PRODUCT_STATUS C
                        WHERE C.PRODUCT_STATUS_ID = A.COMPONENT_STATUS_ID
                        AND C.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES
                        )
            ORDER BY A.CLASS_SERVICE_ID;

        RETURN RFCURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETCHILDCOMPONENT;

	PROCEDURE GETCOMPONENTID
	(
	    INUPRODUCTID     IN  NUMBER,
	    INUCOMPONENTTYPE IN  NUMBER,
	    ISBSERVICENUMBER IN  VARCHAR2,
	    INUCLASSSERVICE  IN  NUMBER,
	    ONUCOMPONENTID   OUT NUMBER
	)
    IS
    BEGIN
        GETPRODUCTCOMPONENT( INUPRODUCTID, INUCOMPONENTTYPE, ISBSERVICENUMBER,
                             INUCLASSSERVICE, ONUCOMPONENTID
                            );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
        END;
    FUNCTION FNUGETCOUNTCOMPONENTS
    (
        INUPRODUCTID        IN  PR_COMPONENT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID  IN  PR_COMPONENT.COMPONENT_TYPE_ID%TYPE DEFAULT NULL
    )
    RETURN NUMBER
    IS
         NUQUANTITY NUMBER:=0;
    BEGIN
        SELECT  /*+
                    ordered
                    index(a IDX_PR_COMPONENT_2)
                    index(b PK_PS_PRODUCT_STATUS)
                */
                COUNT(1)
        INTO    NUQUANTITY
        FROM    PR_COMPONENT A,
                PS_PRODUCT_STATUS B
                /*+ PR_BCProduct.fnuGetCountComponents */
        WHERE A.PRODUCT_ID          = INUPRODUCTID
        AND   A.COMPONENT_TYPE_ID   = NVL(INUCOMPONENTTYPEID, A.COMPONENT_TYPE_ID)
        AND   B.PRODUCT_STATUS_ID   = A.COMPONENT_STATUS_ID
        AND   B.IS_ACTIVE_PRODUCT   = GE_BOCONSTANTS.CSBYES;
        
        RETURN (NUQUANTITY);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCOUNTCOMPONENTS;

    FUNCTION FNUGETCOMPONENTCOUNT
    (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID  IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCLASSSERVICEID   IN PR_COMPONENT.CLASS_SERVICE_ID%TYPE
    )
    RETURN NUMBER IS
        CURSOR CUCOMPONENTS
        IS
            SELECT COUNT(1) QUANTITY
	        FROM  PR_PRODUCT A, PR_COMPONENT B, PS_PRODUCT_STATUS C
	        WHERE B.PRODUCT_ID               = INUPRODUCTID
			  AND B.COMPONENT_TYPE_ID        = INUCOMPONENTTYPEID
              AND B.CLASS_SERVICE_ID         = INUCLASSSERVICEID
              AND B.PRODUCT_ID               = A.PRODUCT_ID
	          AND B.COMPONENT_STATUS_ID      = C.PRODUCT_STATUS_ID
              AND C.IS_ACTIVE_PRODUCT        = GE_BOCONSTANTS.CSBYES;


        CURSOR CUCLASSSERVICE
        IS
            SELECT COUNT(1) QUANTITY
	        FROM  PR_PRODUCT A, PR_COMPONENT B, PS_PRODUCT_STATUS C
	        WHERE B.PRODUCT_ID               = INUPRODUCTID
			  AND B.COMPONENT_TYPE_ID        = INUCOMPONENTTYPEID
              AND B.PRODUCT_ID               = A.PRODUCT_ID
	          AND B.COMPONENT_STATUS_ID      = C.PRODUCT_STATUS_ID
              AND C.IS_ACTIVE_PRODUCT        = GE_BOCONSTANTS.CSBYES;
         NUQUANTITY NUMBER:=0;
    BEGIN
        IF (INUCLASSSERVICEID IS NOT NULL) THEN
            FOR REC IN CUCOMPONENTS LOOP
                NUQUANTITY := REC.QUANTITY;
            END LOOP;
        ELSE
            FOR REC IN CUCLASSSERVICE LOOP
                NUQUANTITY := REC.QUANTITY;
            END LOOP;
        END IF;
        RETURN (NUQUANTITY);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCOMPONENTCOUNT;


    FUNCTION FNUGETACTIVECOMPONENT
    (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN NUMBER
    IS
         NUQUANTITY NUMBER:=0;
    BEGIN
        SELECT  /*+
                    ordered
                    index(a IDX_PR_COMPONENT_2)
                    index(b PK_PS_PRODUCT_STATUS)
                */
                COUNT(1)
        INTO    NUQUANTITY
        FROM    PR_COMPONENT A,
                PS_PRODUCT_STATUS B
                /*+ PR_BCProduct.fnuGetCountComponents */
        WHERE A.PRODUCT_ID          = INUPRODUCTID
        AND   B.PRODUCT_STATUS_ID   = A.COMPONENT_STATUS_ID
        AND   B.IS_ACTIVE_PRODUCT   = GE_BOCONSTANTS.CSBYES;

        RETURN (NUQUANTITY);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETACTIVECOMPONENT;
    
    
    FUNCTION FNUGETMASTERSCOMPCOUNT
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        ISBDEPENCOMPTYP IN  VARCHAR2
    )
    RETURN NUMBER

    IS
        
        CURSOR CUCOUNTMATERCOMPONENTS IS
            SELECT COUNT(*)
            FROM  PR_COMPONENT_LINK, PR_COMPONENT ,PS_COMPONENT_TYPE
            WHERE PR_COMPONENT.COMPONENT_ID = PR_COMPONENT_LINK.CHILD_COMPONENT_ID
              AND PR_COMPONENT_LINK.PARENT_COMPONENT_ID IS NULL
              AND PR_COMPONENT.PRODUCT_ID = INUPRODUCTID
              AND PR_COMPONENT.COMPONENT_TYPE_ID = PS_COMPONENT_TYPE.COMPONENT_TYPE_ID
              AND PS_COMPONENT_TYPE.IS_DEPENDENT = NVL(ISBDEPENCOMPTYP,PS_COMPONENT_TYPE.IS_DEPENDENT);

        NUCOUNT NUMBER;

    BEGIN

        OPEN CUCOUNTMATERCOMPONENTS;
        FETCH  CUCOUNTMATERCOMPONENTS INTO NUCOUNT;
        IF  CUCOUNTMATERCOMPONENTS%NOTFOUND THEN
            NUCOUNT := 0;
        END IF;
        CLOSE CUCOUNTMATERCOMPONENTS;

        RETURN(NUCOUNT);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                IF CUCOUNTMATERCOMPONENTS%ISOPEN THEN
                    CLOSE CUCOUNTMATERCOMPONENTS;
                END IF;
    	   		RAISE;
    		WHEN OTHERS THEN
                IF CUCOUNTMATERCOMPONENTS%ISOPEN THEN
                    CLOSE CUCOUNTMATERCOMPONENTS;
                END IF;
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FNUGETMASTERSCOMPCOUNT;
    
    


























    FUNCTION FNUGETMAINCOMPONENTID
        (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        IBLRAISEERROR   IN  BOOLEAN DEFAULT TRUE
        )
    RETURN NUMBER
    IS

        NUCOMPONENTID  PR_COMPONENT.COMPONENT_ID%TYPE;

        CURSOR CUMAINCOMPONENT
        (
            NUPRODUCTID IN NUMBER
        )
        IS
               SELECT /*+ ORDERED
                        use_nl(PR_COMPONENT PS_PRODUCT_STATUS)
                        index(PR_COMPONENT IDX_PR_COMPONENT_2) */
                    A.COMPONENT_ID
               FROM PR_COMPONENT A, PS_PRODUCT_STATUS E
               /*+ pr_bcProduct.fnuGetMainComponentId cuMainComponent */
               WHERE A.COMPONENT_STATUS_ID = E.PRODUCT_STATUS_ID
               AND EXISTS (
                    SELECT /*+ ORDERED
                        use_nl(PR_PRODUCT PS_PROD_COMPOSITION)
                        index(PR_PRODUCT PK_PR_PRODUCT) */
                      'X'
                    FROM PR_PRODUCT B, PS_PROD_COMPOSITION D
                    WHERE D.PRODUCT_TYPE_ID = B.PRODUCT_TYPE_ID
                    AND D.COMPONENT_TYPE_ID = A.COMPONENT_TYPE_ID
                    AND D.IS_MAIN =  GE_BOCONSTANTS.CSBYES
                    AND B.PRODUCT_ID = NUPRODUCTID
               )
               AND E.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES
               AND A.PRODUCT_ID = NUPRODUCTID;

        CURSOR CURETPENDCOMPONENT
        (
            NUPRODUCTID IN NUMBER
        )
        IS
            SELECT /*+ ORDERED
                        use_nl(PR_COMPONENT PS_PRODUCT_STATUS)
                        index(PR_COMPONENT IDX_PR_COMPONENT_2) */
                A.COMPONENT_ID
            FROM PR_COMPONENT A, PS_PRODUCT_STATUS E
            /*+ pr_bcProduct.fnuGetMainComponentId cuRetPendComponent */
            WHERE A.COMPONENT_STATUS_ID = E.PRODUCT_STATUS_ID
            AND EXISTS (
                SELECT /*+ ORDERED
                        use_nl(PR_PRODUCT PS_PROD_COMPOSITION)
                        index(PR_PRODUCT PK_PR_PRODUCT) */
                      'X'
                FROM PR_PRODUCT B, PS_PROD_COMPOSITION D
                WHERE D.PRODUCT_TYPE_ID = B.PRODUCT_TYPE_ID
                AND D.COMPONENT_TYPE_ID = A.COMPONENT_TYPE_ID
                AND D.IS_MAIN =  GE_BOCONSTANTS.GETYES
                AND B.PRODUCT_ID = NUPRODUCTID
            )
            AND A.COMPONENT_STATUS_ID = PR_BOPARAMETER.FNUGETRETPENDCOMP
            AND A.PRODUCT_ID = NUPRODUCTID;

    BEGIN
        IF (DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(INUPRODUCTID) = PR_BOPARAMETER.FNUGETRETPENDPROD) THEN

            OPEN CURETPENDCOMPONENT (INUPRODUCTID);
            FETCH CURETPENDCOMPONENT INTO NUCOMPONENTID;

                IF CURETPENDCOMPONENT%NOTFOUND AND IBLRAISEERROR THEN
                    ERRORS.SETERROR (CNUNOT_MAIN_COMPONENT, TO_CHAR (INUPRODUCTID));
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

            CLOSE CURETPENDCOMPONENT;

        ELSE

            OPEN CUMAINCOMPONENT (INUPRODUCTID);
            FETCH CUMAINCOMPONENT INTO NUCOMPONENTID;

                IF CUMAINCOMPONENT%NOTFOUND AND IBLRAISEERROR THEN
                    ERRORS.SETERROR (CNUNOT_MAIN_COMPONENT, TO_CHAR (INUPRODUCTID));
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

            CLOSE CUMAINCOMPONENT;

        END IF;

        RETURN NUCOMPONENTID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUMAINCOMPONENT%ISOPEN THEN
                CLOSE CUMAINCOMPONENT;
            END IF;
            IF CURETPENDCOMPONENT%ISOPEN THEN
                CLOSE CURETPENDCOMPONENT;
            END IF;
            RAISE;

        WHEN OTHERS THEN
            IF CUMAINCOMPONENT%ISOPEN THEN
                CLOSE CUMAINCOMPONENT;
            END IF;
            IF CURETPENDCOMPONENT%ISOPEN THEN
                CLOSE CURETPENDCOMPONENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETMAINCOMPONENTID;

    


    FUNCTION FNUGETFIRSTPRODUCTID
    (
        INUPRODUCTTYPE            PR_PRODUCT.PRODUCT_TYPE_ID%TYPE,
        INUPRODUCTSTATUS          PR_PRODUCT.PRODUCT_STATUS_ID%TYPE,
        INUSUBSCRIBER             GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN NUMBER
    IS
        NUPRODUCTID PR_PRODUCT.PRODUCT_ID%TYPE;
    BEGIN
    
        UT_TRACE.TRACE('Inicia pr_bcProduct.fnuGetFirstProductId',4);

        OPEN CUPRODUCTSBYSUBSANDTYPE (INUPRODUCTTYPE,INUPRODUCTSTATUS,INUSUBSCRIBER);

        FETCH CUPRODUCTSBYSUBSANDTYPE INTO NUPRODUCTID;

            IF CUPRODUCTSBYSUBSANDTYPE%NOTFOUND THEN
                
                ERRORS.SETERROR (
                    CNUERRORPRODSTASUBS,
                    INUPRODUCTTYPE||'-'||PKTBLSERVICIO.FSBGETDESCRIPTION(INUPRODUCTTYPE)||'|'||
                    INUPRODUCTSTATUS||'-'||DAPS_PRODUCT_STATUS.FSBGETDESCRIPTION(INUPRODUCTSTATUS)||'|'||
                    INUSUBSCRIBER||'-'||DAGE_SUBSCRIBER.FSBGETSUBSCRIBER_NAME(INUSUBSCRIBER)||' '||DAGE_SUBSCRIBER.FSBGETSUBS_LAST_NAME(INUSUBSCRIBER)
                );
                RAISE EX.CONTROLLED_ERROR;
            END IF;

        CLOSE CUPRODUCTSBYSUBSANDTYPE;
        
        UT_TRACE.TRACE('Finaliza pr_bcProduct.fnuGetFirstProductId',4);

        RETURN NUPRODUCTID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUPRODUCTSBYSUBSANDTYPE%ISOPEN THEN
                CLOSE CUPRODUCTSBYSUBSANDTYPE;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF CUPRODUCTSBYSUBSANDTYPE%ISOPEN THEN
                CLOSE CUPRODUCTSBYSUBSANDTYPE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUGETMAINACTIVECOMP
        (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
        )
    RETURN NUMBER
    IS
        CURSOR CUCOMPMAINACTIVE IS
        SELECT A.*, A.ROWID
	        FROM  PR_COMPONENT A, PS_PRODUCT_STATUS B
	        WHERE PRODUCT_ID  = INUPRODUCTID
	          AND A.COMPONENT_STATUS_ID = B.PRODUCT_STATUS_ID
              AND B.IS_ACTIVE_PRODUCT   = GE_BOCONSTANTS.CSBYES
              AND A.IS_MAIN = GE_BOCONSTANTS.CSBYES;
              
        RCCOMPMAIN  DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
    
        OPEN CUCOMPMAINACTIVE;
        FETCH CUCOMPMAINACTIVE INTO RCCOMPMAIN;

        IF CUCOMPMAINACTIVE%NOTFOUND THEN
        
            CLOSE CUCOMPMAINACTIVE;
            ERRORS.SETERROR (CNUNOT_MAIN_ACT_COMPONENT, TO_CHAR (INUPRODUCTID));
            RAISE EX.CONTROLLED_ERROR;
        
        END IF;

        CLOSE CUCOMPMAINACTIVE;

        RETURN RCCOMPMAIN.COMPONENT_ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUCOMPMAINACTIVE%ISOPEN THEN
                CLOSE CUCOMPMAINACTIVE;
            END IF;
            RAISE;

        WHEN OTHERS THEN
            IF CUCOMPMAINACTIVE%ISOPEN THEN
                CLOSE CUCOMPMAINACTIVE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    











    FUNCTION FNUGETSUBSCRIBERID
        (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
        )
    RETURN NUMBER
    IS
        NUSUBSCRIBERID  PR_COMPONENT.COMPONENT_ID%TYPE;

        CURSOR CUSUBSCRIBERPROD
            (
            NUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
            )
        IS
            SELECT B.SUSCCLIE
              FROM PR_PRODUCT A, SUSCRIPC B
             WHERE A.PRODUCT_ID = NUPRODUCTID
               AND A.SUBSCRIPTION_ID= B.SUSCCODI;

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo pr_bcProduct.fnuGetSubscriberId',7);
        
        UT_TRACE.TRACE('Identificador del producto ['||INUPRODUCTID||']',7);
        
        OPEN CUSUBSCRIBERPROD (INUPRODUCTID);

        FETCH CUSUBSCRIBERPROD INTO NUSUBSCRIBERID;

        IF CUSUBSCRIBERPROD%NOTFOUND THEN
            NUSUBSCRIBERID:=NULL;
        END IF;

        CLOSE CUSUBSCRIBERPROD;
        
        UT_TRACE.TRACE('Finaliza pr_bcProduct.fnuGetSubscriberId id Cliente ['||NUSUBSCRIBERID||']',7);

        RETURN NUSUBSCRIBERID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUSUBSCRIBERPROD%ISOPEN THEN
                CLOSE CUSUBSCRIBERPROD;
            END IF;
            RAISE;

        WHEN OTHERS THEN
            IF CUSUBSCRIBERPROD%ISOPEN THEN
                CLOSE CUSUBSCRIBERPROD;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION FNUGETPRCOUNTBYPRPROV
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPRODUCTTYPEID    IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
        )
    RETURN NUMBER
    IS
        NUCHILDPRODUCTID    PR_PRODUCT.PRODUCT_ID%TYPE;
        CURFPRODUCTS        CONSTANTS.TYREFCURSOR;
        NUCOUNT             NUMBER:=0;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo pr_bcProduct.fnuGetPrCountByPrProv',7);
        
        CURFPRODUCTS := PR_BCCOMPONENT.FRFGETPRODBYPROVISIONPRODUCT(INUPRODUCTID);
        FETCH CURFPRODUCTS INTO NUCHILDPRODUCTID;
        WHILE CURFPRODUCTS%FOUND LOOP
            
            IF (DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(NUCHILDPRODUCTID)=INUPRODUCTTYPEID) THEN
                NUCOUNT:= NUCOUNT +1;
            END IF;
            FETCH CURFPRODUCTS INTO NUCHILDPRODUCTID;
        END LOOP;
        
        GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODUCTS);
        
        UT_TRACE.TRACE('Cantidad de productos provisionados '||NUCOUNT,7);
        
        UT_TRACE.TRACE('Finaliza Metodo pr_bcProduct.fnuGetPrCountByPrProv ',7);
        RETURN NUCOUNT;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODUCTS);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFPRODUCTS);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    


    FUNCTION FTBPRODSBYSUBSCID
    (
        INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT
    IS
        TBPRODUCTS DAPR_PRODUCT.TYTBPR_PRODUCT;
    BEGIN
        TBPRODUCTS.DELETE;
        OPEN PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION(INUSUBSCRIPTIONID);
        FETCH PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION
            BULK COLLECT INTO TBPRODUCTS;
        CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
        RETURN TBPRODUCTS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION%ISOPEN THEN
                CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION%ISOPEN THEN
                CLOSE PR_BCPRODUCT.CUPRODUCTSBYSUBSCRIPTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FTBPRODSBYSUBSCID;
    
    PROCEDURE GETPRODUCTBYADDR
    (
        INUADDRESS_ID     IN PR_PRODUCT.ADDRESS_ID%TYPE,
        INUPRODUCT_ID     IN PR_PRODUCT.PRODUCT_ID%TYPE,
        OBOCONTINUE       OUT BOOLEAN,
        OTBTYPRODID        OUT NOCOPY DAPR_PRODUCT.TYTBPRODUCT_ID
    )
    IS
    BEGIN
    
         
        OTBTYPRODID.DELETE;

        OPEN CUPRODUCTBYADDR (INUADDRESS_ID,INUPRODUCT_ID);

        
        FETCH CUPRODUCTBYADDR BULK COLLECT INTO OTBTYPRODID
        LIMIT CNUREGISTERQUANTITY;

        CLOSE CUPRODUCTBYADDR;

        OBOCONTINUE := TRUE;

        
        IF ( OTBTYPRODID.FIRST IS NULL ) THEN
            OBOCONTINUE := FALSE;
        END IF ;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUPRODUCTBYADDR%ISOPEN) THEN
    	        CLOSE CUPRODUCTBYADDR;
    	    END IF;
    	    IF (CUPRODUCTBYADDR%ISOPEN) THEN
    	        CLOSE CUPRODUCTBYADDR;
    	    END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUPRODUCTBYADDR%ISOPEN) THEN
    	        CLOSE CUPRODUCTBYADDR;
    	    END IF;
    	    IF (CUPRODUCTBYADDR%ISOPEN) THEN
    	        CLOSE CUPRODUCTBYADDR;
    	    END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
        
    END GETPRODUCTBYADDR;

    PROCEDURE GETPRODUCTSBYADDRESS
        (
        INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT,
        INUSUBSCRIBERID     IN   GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE DEFAULT NULL
        )
    IS
    BEGIN
        OTBPRODUCTS.DELETE;
        OPEN CUPRODUCTSBYADDRESS(INUADDRESSID,INUSUBSCRIPTIONID,INUSUBSCRIBERID);
        FETCH CUPRODUCTSBYADDRESS BULK COLLECT INTO OTBPRODUCTS;
        CLOSE CUPRODUCTSBYADDRESS;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF  CUPRODUCTSBYADDRESS%ISOPEN THEN
                CLOSE CUPRODUCTSBYADDRESS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF  CUPRODUCTSBYADDRESS%ISOPEN THEN
                CLOSE CUPRODUCTSBYADDRESS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODUCTSBYADDRESS;
    
    
    PROCEDURE GETPRODSBYNEWADDRESS
        (
        INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT
        )
    IS
    BEGIN
        OTBPRODUCTS.DELETE;
        OPEN CUPRODSBYNEWADDRESS(INUADDRESSID,INUSUBSCRIPTIONID);
        FETCH CUPRODSBYNEWADDRESS BULK COLLECT INTO OTBPRODUCTS;
        CLOSE CUPRODSBYNEWADDRESS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF  CUPRODSBYNEWADDRESS%ISOPEN THEN
                CLOSE CUPRODSBYNEWADDRESS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF  CUPRODSBYNEWADDRESS%ISOPEN THEN
                CLOSE CUPRODSBYNEWADDRESS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETPRODUCTSSUBSCRIPTION
        (
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT
        )
    IS
    BEGIN
        OTBPRODUCTS.DELETE;
        OPEN CUPRODUCTSSUBSCRIPTION(INUSUBSCRIPTIONID);
        FETCH CUPRODUCTSSUBSCRIPTION BULK COLLECT INTO OTBPRODUCTS;
        CLOSE CUPRODUCTSSUBSCRIPTION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF  CUPRODUCTSSUBSCRIPTION%ISOPEN THEN
                CLOSE CUPRODUCTSSUBSCRIPTION;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF  CUPRODUCTSSUBSCRIPTION%ISOPEN THEN
                CLOSE CUPRODUCTSSUBSCRIPTION;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODUCTSSUBSCRIPTION;
    
    
    
    
    























    FUNCTION FSBGETLOCAINSTAPROD
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE

    )
    RETURN VARCHAR2

    IS
        
        CURSOR CUGEOGRALOCA IS
            SELECT GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID||'-'|| GE_GEOGRA_LOCATION.DESCRIPTION
              FROM GE_GEOGRA_LOCATION, PR_PRODUCT, AB_ADDRESS
             WHERE GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID = AB_ADDRESS.GEOGRAP_LOCATION_ID
                   AND AB_ADDRESS.ADDRESS_ID = PR_PRODUCT.ADDRESS_ID
                   AND GE_GEOGRA_LOCATION.GEOG_LOCA_AREA_TYPE = NULOCALIDA_GEO_LOC
                   AND PR_PRODUCT.PRODUCT_ID = INUPRODUCTID;


        SBDESCRIPTION VARCHAR2(400);

    BEGIN
        LOADPARAMETERS;

        SBDESCRIPTION := NULL;

        IF ( CUGEOGRALOCA%ISOPEN ) THEN
            CLOSE CUGEOGRALOCA;
        END IF;
        
        OPEN CUGEOGRALOCA;
        FETCH  CUGEOGRALOCA INTO SBDESCRIPTION;
        CLOSE CUGEOGRALOCA;

        RETURN(SBDESCRIPTION);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                IF CUGEOGRALOCA%ISOPEN THEN
                    CLOSE CUGEOGRALOCA;
                END IF;
    	   		RAISE;
    		WHEN OTHERS THEN
                IF CUGEOGRALOCA%ISOPEN THEN
                    CLOSE CUGEOGRALOCA;
                END IF;
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FSBGETLOCAINSTAPROD;
    
    
    

























    FUNCTION FSBGETDISTADMINPRODBYZONE
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN VARCHAR2

    IS
        
        CURSOR CUDISTADMINBYZONE IS
            SELECT GE_DISTRIBUT_ADMIN.DISTRIBUT_ADMIN_ID ||'-'|| GE_DISTRIBUT_ADMIN.DESCRIPTION
            FROM    PR_PRODUCT, GE_DISTADMI_GEOGLOCA, GE_DISTRIBUT_ADMIN, AB_ADDRESS
            WHERE   PR_PRODUCT.PRODUCT_ID = INUPRODUCTID
            AND     PR_PRODUCT.ADDRESS_ID = AB_ADDRESS.ADDRESS_ID
            AND     AB_ADDRESS.GEOGRAP_LOCATION_ID  = GE_DISTADMI_GEOGLOCA.GEOGRAP_LOCATION_ID
            AND     GE_DISTADMI_GEOGLOCA.DISTRIBUT_ADMIN_ID =GE_DISTRIBUT_ADMIN.DISTRIBUT_ADMIN_ID
            AND     GE_DISTRIBUT_ADMIN.DISTRI_ADMI_TYPE_ID = NUDIST_ADMIN_TIPO_ZONA;

        SBDESCRIPTION VARCHAR2(400);

    BEGIN
        LOADPARAMETERS;

        SBDESCRIPTION := NULL;

        IF ( CUDISTADMINBYZONE%ISOPEN ) THEN
            CLOSE CUDISTADMINBYZONE;
        END IF;

        OPEN CUDISTADMINBYZONE;
        FETCH  CUDISTADMINBYZONE INTO SBDESCRIPTION;
        CLOSE CUDISTADMINBYZONE;

        RETURN(SBDESCRIPTION);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                IF CUDISTADMINBYZONE%ISOPEN THEN
                    CLOSE CUDISTADMINBYZONE;
                END IF;
    	   		RAISE;
    		WHEN OTHERS THEN
                IF CUDISTADMINBYZONE%ISOPEN THEN
                    CLOSE CUDISTADMINBYZONE;
                END IF;
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FSBGETDISTADMINPRODBYZONE;
    
    
    
    

























    FUNCTION FSBGETDISTADMINPRODBYCENTER
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE

    )
    RETURN VARCHAR2

    IS
        
        CURSOR CUDISTADMINBYCENTER IS
            SELECT GE_DISTRIBUT_ADMIN.DISTRIBUT_ADMIN_ID ||'-'|| GE_DISTRIBUT_ADMIN.DESCRIPTION
            FROM    PR_PRODUCT, AB_ADDRESS, GE_DISTADMI_GEOGLOCA, GE_DISTRIBUT_ADMIN
            WHERE   PR_PRODUCT.PRODUCT_ID = INUPRODUCTID
            AND     PR_PRODUCT.ADDRESS_ID = AB_ADDRESS.ADDRESS_ID
            AND     AB_ADDRESS.GEOGRAP_LOCATION_ID  = GE_DISTADMI_GEOGLOCA.GEOGRAP_LOCATION_ID
            AND     GE_DISTADMI_GEOGLOCA.DISTRIBUT_ADMIN_ID =GE_DISTRIBUT_ADMIN.DISTRIBUT_ADMIN_ID
            AND     GE_DISTRIBUT_ADMIN.DISTRI_ADMI_TYPE_ID = NUDIST_ADMIN_TIPO_CENT; 

        SBDESCRIPTION VARCHAR2(400);

    BEGIN
        LOADPARAMETERS;

        SBDESCRIPTION := NULL;

        IF ( CUDISTADMINBYCENTER%ISOPEN ) THEN
            CLOSE CUDISTADMINBYCENTER;
        END IF;

        OPEN CUDISTADMINBYCENTER;
        FETCH  CUDISTADMINBYCENTER INTO SBDESCRIPTION;
        CLOSE CUDISTADMINBYCENTER;

        RETURN(SBDESCRIPTION);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                IF CUDISTADMINBYCENTER%ISOPEN THEN
                    CLOSE CUDISTADMINBYCENTER;
                END IF;
    	   		RAISE;
    		WHEN OTHERS THEN
                IF CUDISTADMINBYCENTER%ISOPEN THEN
                    CLOSE CUDISTADMINBYCENTER;
                END IF;
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FSBGETDISTADMINPRODBYCENTER;
    
    
    






























    FUNCTION FRCGETLOCAINSTAPROD
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION%ROWTYPE

    IS
        CURSOR CUGEOLOC
        IS
            SELECT GE_GEOGRA_LOCATION.*
              FROM GE_GEOGRA_LOCATION, PR_PRODUCT, AB_ADDRESS
             WHERE GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID = AB_ADDRESS.GEOGRAP_LOCATION_ID
                   AND AB_ADDRESS.ADDRESS_ID = PR_PRODUCT.ADDRESS_ID
                   AND GE_GEOGRA_LOCATION.GEOG_LOCA_AREA_TYPE = NULOCALIDA_GEO_LOC
                   AND PR_PRODUCT.PRODUCT_ID = INUPRODUCTID
        ;

        RCLOCAINSTAPROD GE_GEOGRA_LOCATION%ROWTYPE;

    BEGIN
        LOADPARAMETERS;
        
        FOR RCLOCA IN CUGEOLOC LOOP
           RCLOCAINSTAPROD := RCLOCA;
        END LOOP;

        RETURN(RCLOCAINSTAPROD);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	   		RAISE;
		WHEN OTHERS THEN
      		ERRORS.SETERROR;
       		RAISE EX.CONTROLLED_ERROR;
    END FRCGETLOCAINSTAPROD;


    























    FUNCTION FRCGETDISTADMINPRODBYZONE
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_DISTRIBUT_ADMIN%ROWTYPE

    IS
        
        CURSOR CUDISTADMINBYZONE IS
            SELECT GE_DISTRIBUT_ADMIN.*
            FROM    PR_PRODUCT, AB_ADDRESS, GE_DISTADMI_GEOGLOCA, GE_DISTRIBUT_ADMIN
            WHERE   PR_PRODUCT.PRODUCT_ID = INUPRODUCTID
            AND     PR_PRODUCT.ADDRESS_ID = AB_ADDRESS.ADDRESS_ID
            AND     AB_ADDRESS.GEOGRAP_LOCATION_ID  = GE_DISTADMI_GEOGLOCA.GEOGRAP_LOCATION_ID
            AND     GE_DISTADMI_GEOGLOCA.DISTRIBUT_ADMIN_ID =GE_DISTRIBUT_ADMIN.DISTRIBUT_ADMIN_ID
            AND     GE_DISTRIBUT_ADMIN.DISTRI_ADMI_TYPE_ID = NUDIST_ADMIN_TIPO_ZONA;

        RCDISTADMINBYZONE GE_DISTRIBUT_ADMIN%ROWTYPE;

    BEGIN
        LOADPARAMETERS;

        RCDISTADMINBYZONE := NULL;

        IF ( CUDISTADMINBYZONE%ISOPEN ) THEN
            CLOSE CUDISTADMINBYZONE;
        END IF;

        OPEN CUDISTADMINBYZONE;
        FETCH  CUDISTADMINBYZONE INTO RCDISTADMINBYZONE;
        CLOSE CUDISTADMINBYZONE;

        RETURN(RCDISTADMINBYZONE);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                IF CUDISTADMINBYZONE%ISOPEN THEN
                    CLOSE CUDISTADMINBYZONE;
                END IF;
    	   		RAISE;
    		WHEN OTHERS THEN
                IF CUDISTADMINBYZONE%ISOPEN THEN
                    CLOSE CUDISTADMINBYZONE;
                END IF;
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FRCGETDISTADMINPRODBYZONE;



    























    FUNCTION FRCGETDISTADMINPRODBYCENTER
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE

    )
    RETURN GE_DISTRIBUT_ADMIN%ROWTYPE

    IS
        
        CURSOR CUDISTADMINBYCENTER IS
            SELECT GE_DISTRIBUT_ADMIN.*
              FROM PR_PRODUCT, AB_ADDRESS, GE_DISTADMI_GEOGLOCA, GE_DISTRIBUT_ADMIN
             WHERE PR_PRODUCT.PRODUCT_ID = INUPRODUCTID
                   AND PR_PRODUCT.ADDRESS_ID = AB_ADDRESS.ADDRESS_ID
                   AND AB_ADDRESS.GEOGRAP_LOCATION_ID  = GE_DISTADMI_GEOGLOCA.GEOGRAP_LOCATION_ID
                   AND GE_DISTADMI_GEOGLOCA.DISTRIBUT_ADMIN_ID =GE_DISTRIBUT_ADMIN.DISTRIBUT_ADMIN_ID
                   AND GE_DISTRIBUT_ADMIN.DISTRI_ADMI_TYPE_ID = NUDIST_ADMIN_TIPO_CENT;

        RCDISTADMINBYCENTER GE_DISTRIBUT_ADMIN%ROWTYPE;

    BEGIN
        LOADPARAMETERS;

        RCDISTADMINBYCENTER := NULL;

        IF ( CUDISTADMINBYCENTER%ISOPEN ) THEN
            CLOSE CUDISTADMINBYCENTER;
        END IF;

        OPEN  CUDISTADMINBYCENTER;
        FETCH CUDISTADMINBYCENTER INTO RCDISTADMINBYCENTER;
        CLOSE CUDISTADMINBYCENTER;

        RETURN(RCDISTADMINBYCENTER);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                IF CUDISTADMINBYCENTER%ISOPEN THEN
                    CLOSE CUDISTADMINBYCENTER;
                END IF;
    	   		RAISE;
    		WHEN OTHERS THEN
                IF CUDISTADMINBYCENTER%ISOPEN THEN
                    CLOSE CUDISTADMINBYCENTER;
                END IF;
	      		ERRORS.SETERROR;
	       		RAISE EX.CONTROLLED_ERROR;
    END FRCGETDISTADMINPRODBYCENTER;
    
    
    

















    FUNCTION FNUGETADDRESSID
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN PR_PRODUCT.ADDRESS_ID%TYPE
    IS
        
        CURSOR CUADDRESS IS
            SELECT  PR_PRODUCT.ADDRESS_ID
            FROM    PR_PRODUCT, AB_ADDRESS
            WHERE   PR_PRODUCT.PRODUCT_ID = INUPRODUCTID
            AND     PR_PRODUCT.ADDRESS_ID = AB_ADDRESS.ADDRESS_ID;
            
        RCADDRESS CUADDRESS%ROWTYPE;

    BEGIN

        OPEN  CUADDRESS;
        FETCH CUADDRESS INTO RCADDRESS;
        CLOSE CUADDRESS;

        RETURN(RCADDRESS.ADDRESS_ID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUADDRESS%ISOPEN THEN
                CLOSE CUADDRESS;
            END IF;
	   		RAISE;
		WHEN OTHERS THEN
            IF CUADDRESS%ISOPEN THEN
                CLOSE CUADDRESS;
            END IF;
      		ERRORS.SETERROR;
       		RAISE EX.CONTROLLED_ERROR;
    END FNUGETADDRESSID;
    
    


















    FUNCTION FNUGETLOCAINSTAPROD
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN   AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE
    IS
        RCLOCAINSTAPROD GE_GEOGRA_LOCATION%ROWTYPE;
    BEGIN
        RCLOCAINSTAPROD := FRCGETLOCAINSTAPROD( INUPRODUCTID );

        RETURN RCLOCAINSTAPROD.GEOGRAP_LOCATION_ID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	   		RAISE;
		WHEN OTHERS THEN
      		ERRORS.SETERROR;
       		RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    















    PROCEDURE LOADPARAMETERS
    IS
    BEGIN
        IF BLLOADPARAMETERS THEN
            RETURN;
        END IF;

        NUDIST_ADMIN_TIPO_CENT := GE_BOPARAMETER.FNUGET('DIST_ADMIN_TIPO_CENT');
        NUDIST_ADMIN_TIPO_ZONA := GE_BOPARAMETER.FNUGET('DIST_ADMIN_TIPO_ZONA');
        NULOCALIDA_GEO_LOC     := GE_BOPARAMETER.FNUGET('LOCALIDA_GEO_LOC');
        
        BLLOADPARAMETERS := TRUE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	   		RAISE;
		WHEN OTHERS THEN
      		ERRORS.SETERROR;
       		RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    




    FUNCTION FRFGETPRODBYSUSCANDTYP
    (
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        ISBLISTTYPES        IN  VARCHAR2
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFCURDATA   CONSTANTS.TYREFCURSOR;
        SBTYPES     VARCHAR2(2000);
    BEGIN

        SBTYPES := ISBLISTTYPES;
        
        
         SBTYPES := ','||SBTYPES||',';

        OPEN RFCURDATA FOR
            SELECT B.*, B.ROWID
            FROM  PR_PRODUCT B, PS_PRODUCT_STATUS C
            WHERE B.SUBSCRIPTION_ID = INUSUBSCRIPTIONID
            AND  B.PRODUCT_STATUS_ID = C.PRODUCT_STATUS_ID
            AND  INSTR(SBTYPES, ','||PRODUCT_TYPE_ID||',')>0
            AND  C.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES
            AND  B.SERVICE_NUMBER IS NOT NULL
            ORDER BY B.CREATION_DATE;

        RETURN RFCURDATA;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FRFGETPRODBYSUSCANDTYP;
    
    














    FUNCTION FRCGETMAINCOMP
    (
        INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN DAPR_COMPONENT.STYPR_COMPONENT
    IS
        RCCOMPONENT DAPR_COMPONENT.STYPR_COMPONENT;

        CURSOR CUCOMP (INUPRODUCTID IN NUMBER) IS
               SELECT /*+ index(A IDX_PR_COMPONENT_2) */
                    A.*,
                    A.ROWID
               FROM PR_COMPONENT A

               /*+ pr_bcProduct.frcGetMainComp */
               WHERE EXISTS (
                    SELECT /*+ ORDERED
                        use_nl(B D)
                        index(B PK_PR_PRODUCT) */
                      'X'
                    FROM PR_PRODUCT B, PS_PROD_COMPOSITION D
                    WHERE D.PRODUCT_TYPE_ID = B.PRODUCT_TYPE_ID
                    AND D.COMPONENT_TYPE_ID = A.COMPONENT_TYPE_ID
                    AND D.IS_MAIN =  GE_BOCONSTANTS.CSBYES
                    AND B.PRODUCT_ID = INUPRODUCTID
               )
               AND A.PRODUCT_ID = INUPRODUCTID;
    BEGIN
        FOR RC IN CUCOMP(INUPRODUCTID) LOOP
            RCCOMPONENT := RC;
            EXIT;
        END LOOP;

        RETURN RCCOMPONENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRCGETMAINCOMP;

    














    FUNCTION FNUGETMAINCOMP(INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE)
    RETURN PR_COMPONENT.COMPONENT_ID%TYPE
    IS
    BEGIN
        RETURN PR_BCPRODUCT.FRCGETMAINCOMP(INUPRODUCTID).COMPONENT_ID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETMAINCOMP;
    


















    FUNCTION FNUACTANDPENPRBYSUBS
    (
        INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    )
    RETURN NUMBER
    IS
        NUCOUNT NUMBER;

        CURSOR CUCOUNTACTPENDPRODBYSUBS
            (
            INUSUBSCRIPTIONID   IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE
            )
        IS
            SELECT COUNT(1)
            FROM PR_PRODUCT A
            WHERE A.SUBSCRIPTION_ID = INUSUBSCRIPTIONID
            AND EXISTS (SELECT 'x'
                        FROM PS_PRODUCT_STATUS B
                        WHERE B.PRODUCT_STATUS_ID = A.PRODUCT_STATUS_ID
                        AND (B.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES));

    BEGIN
        OPEN CUCOUNTACTPENDPRODBYSUBS(INUSUBSCRIPTIONID);
        FETCH CUCOUNTACTPENDPRODBYSUBS INTO NUCOUNT;
        CLOSE CUCOUNTACTPENDPRODBYSUBS;

        RETURN NUCOUNT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUCOUNTACTPENDPRODBYSUBS%ISOPEN) THEN
                CLOSE CUCOUNTACTPENDPRODBYSUBS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUCOUNTACTPENDPRODBYSUBS%ISOPEN) THEN
                CLOSE CUCOUNTACTPENDPRODBYSUBS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    



    FUNCTION FTBACTPENDPRODBYSUBS
    (
        INUCONTRATO          IN SUSCRIPC.SUSCCODI%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT
    IS
        TBPR_PRODUCT   DAPR_PRODUCT.TYTBPR_PRODUCT;
    BEGIN
        UT_TRACE.TRACE('Inicio de pr_bcproduct.ftbActPendProdBySubs', 5);
        UT_TRACE.TRACE('Contrato ['||INUCONTRATO||']', 5);

        OPEN CUACTPENDPRODBYSUBS(INUCONTRATO);
            FETCH CUACTPENDPRODBYSUBS BULK COLLECT INTO TBPR_PRODUCT;
        CLOSE CUACTPENDPRODBYSUBS;

        UT_TRACE.TRACE('Fin de pr_bcproduct.ftbActPendProdBySubs', 5);

        RETURN TBPR_PRODUCT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUACTPENDPRODBYSUBS%ISOPEN) THEN
                CLOSE CUACTPENDPRODBYSUBS;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF (CUACTPENDPRODBYSUBS%ISOPEN) THEN
                CLOSE CUACTPENDPRODBYSUBS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;



    













    FUNCTION FNUGETCOMMUNEINSTALLDIR
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    IS
        NUADDRESSINSTALLID  AB_ADDRESS.ADDRESS_ID%TYPE;
        NUCOMMUNEINSTALLDIR GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        NUNEIGBORTHOODID    AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('inicio pr_bcproduct.fnuGetCommuneInstallDir ('||INUPRODUCTID||')',5);
        IF INUPRODUCTID IS NULL THEN
            UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetCommuneInstallDir ('||INUPRODUCTID||') =>['||NUCOMMUNEINSTALLDIR||']',5);
            
            RETURN NUCOMMUNEINSTALLDIR;
        END IF;

        IF INUPRODUCTID = GRCCOMMUNEINSTALLDIR.NUPRODUCTID THEN
            UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetCommuneInstallDir ('||INUPRODUCTID||') =>['||GRCCOMMUNEINSTALLDIR.NUCOMMUNE||']',5);
            
            RETURN GRCCOMMUNEINSTALLDIR.NUCOMMUNE;
        END IF;

        NUADDRESSINSTALLID := PR_BCPRODUCT.FNUGETADDRESSID( INUPRODUCTID );
        IF NUADDRESSINSTALLID IS NOT NULL THEN
            NUNEIGBORTHOODID    := DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUADDRESSINSTALLID );
            NUCOMMUNEINSTALLDIR := GE_BCGEOGRA_LOCATION.FNUGETCOMMUNE( NUNEIGBORTHOODID );

            
            GRCCOMMUNEINSTALLDIR.NUPRODUCTID := INUPRODUCTID;
            GRCCOMMUNEINSTALLDIR.NUCOMMUNE   := NUCOMMUNEINSTALLDIR;
        END IF;

        UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetCommuneInstallDir ('||INUPRODUCTID||') =>['||NUCOMMUNEINSTALLDIR||']',5);
        RETURN NUCOMMUNEINSTALLDIR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GRCCOMMUNEINSTALLDIR := NULL;
            RAISE;
        WHEN OTHERS THEN
            GRCCOMMUNEINSTALLDIR := NULL;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    FUNCTION FNUGETLOCAINSTALLDIR
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    IS
        NUADDRESSINSTALLID  AB_ADDRESS.ADDRESS_ID%TYPE;
        NULOCAINSTALLDIR    GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('inicio pr_bcproduct.fnuGetLocaInstallDir ('||INUPRODUCTID||')',5);
        IF INUPRODUCTID IS NULL THEN
            UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetLocaInstallDir ('||INUPRODUCTID||') =>['||NULOCAINSTALLDIR||']',5);
            
            RETURN NULOCAINSTALLDIR;
        END IF;

        IF INUPRODUCTID = GRCLOCALITYINSTALLDIR.NUPRODUCTID THEN
            UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetLocaInstallDir ('||INUPRODUCTID||') =>['||GRCLOCALITYINSTALLDIR.NULOCALITY||']',5);
            
            RETURN GRCLOCALITYINSTALLDIR.NULOCALITY;
        END IF;

        NUADDRESSINSTALLID := PR_BCPRODUCT.FNUGETADDRESSID( INUPRODUCTID );
        IF NUADDRESSINSTALLID IS NOT NULL THEN
            NULOCAINSTALLDIR    := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID(NUADDRESSINSTALLID);

            
            GRCLOCALITYINSTALLDIR.NUPRODUCTID  := INUPRODUCTID;
            GRCLOCALITYINSTALLDIR.NULOCALITY   := NULOCAINSTALLDIR;
        END IF;

        UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetLocaInstallDir ('||INUPRODUCTID||') =>['||NULOCAINSTALLDIR||']',5);
        RETURN NULOCAINSTALLDIR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GRCLOCALITYINSTALLDIR := NULL;
            RAISE;
        WHEN OTHERS THEN
            GRCLOCALITYINSTALLDIR := NULL;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    













    FUNCTION FNUGETDEPINSTALLDIR
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    IS
        NUADDRESSINSTALLID  AB_ADDRESS.ADDRESS_ID%TYPE;
        NUDEPAINSTALLDIR    GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
        NUNEIGBORTHOODID    AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('inicio pr_bcproduct.fnuGetDepInstallDir ('||INUPRODUCTID||')',5);
        IF INUPRODUCTID IS NULL THEN
            UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetDepInstallDir ('||INUPRODUCTID||') =>['||NUDEPAINSTALLDIR||']',5);
            
            RETURN NUDEPAINSTALLDIR;
        END IF;

        IF INUPRODUCTID = GRCDEPARTMENTINSTALLDIR.NUPRODUCTID THEN
            UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetDepInstallDir ('||INUPRODUCTID||') =>['||GRCDEPARTMENTINSTALLDIR.NUDEPARTMENT||']',5);
            
            RETURN GRCDEPARTMENTINSTALLDIR.NUDEPARTMENT;
        END IF;

        NUADDRESSINSTALLID := PR_BCPRODUCT.FNUGETADDRESSID( INUPRODUCTID );
        IF NUADDRESSINSTALLID IS NOT NULL THEN
            NUNEIGBORTHOODID    := DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUADDRESSINSTALLID );
            NUDEPAINSTALLDIR    := GE_BCGEOGRA_LOCATION.FNUGETDEPARTMENT( NUNEIGBORTHOODID );

            
            GRCDEPARTMENTINSTALLDIR.NUPRODUCTID  := INUPRODUCTID;
            GRCDEPARTMENTINSTALLDIR.NUDEPARTMENT := NUDEPAINSTALLDIR;
        END IF;

        UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetDepInstallDir ('||INUPRODUCTID||') =>['||NUDEPAINSTALLDIR||']',5);
        RETURN NUDEPAINSTALLDIR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GRCDEPARTMENTINSTALLDIR := NULL;
            RAISE;
        WHEN OTHERS THEN
            GRCDEPARTMENTINSTALLDIR := NULL;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    













    FUNCTION FNUGETNEIGHBINSTALLDIR
    (
        INUPRODUCTID   IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE
    IS
        NUADDRESSINSTALLID      AB_ADDRESS.ADDRESS_ID%TYPE;
        NUNEIGBORTHOODID        AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('inicio pr_bcproduct.fnuGetNeighBInstallDir ('||INUPRODUCTID||')',5);
        IF INUPRODUCTID IS NULL THEN
            UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetNeighBInstallDir ('||INUPRODUCTID||') =>['||NUNEIGBORTHOODID||']',5);
            
            RETURN NUNEIGBORTHOODID;
        END IF;

        IF INUPRODUCTID = GRCNEIGHBORTHOODINSTALLDIR.NUPRODUCTID THEN
            UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetNeighBInstallDir ('||INUPRODUCTID||') =>['||GRCNEIGHBORTHOODINSTALLDIR.NUPRODUCTID||']',5);
            
            RETURN GRCNEIGHBORTHOODINSTALLDIR.NUPRODUCTID;
        END IF;

        NUADDRESSINSTALLID := PR_BCPRODUCT.FNUGETADDRESSID( INUPRODUCTID );
        IF NUADDRESSINSTALLID IS NOT NULL THEN
            NUNEIGBORTHOODID    := DAAB_ADDRESS.FNUGETNEIGHBORTHOOD_ID( NUADDRESSINSTALLID );

            
            GRCNEIGHBORTHOODINSTALLDIR.NUPRODUCTID     := INUPRODUCTID;
            GRCNEIGHBORTHOODINSTALLDIR.NUNEIGHBORTHOOD := NUNEIGBORTHOODID;
        END IF;

        UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetBarrInstalDir ('||INUPRODUCTID||') =>['||NUNEIGBORTHOODID||']',5);
        RETURN NUNEIGBORTHOODID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GRCNEIGHBORTHOODINSTALLDIR := NULL;
            RAISE;
        WHEN OTHERS THEN
            GRCNEIGHBORTHOODINSTALLDIR := NULL;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    FUNCTION FNUGETMAINANYSTATUSCOMPONENTID
    (
        INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        IBLRAISEERROR   IN  BOOLEAN DEFAULT TRUE
    )
    RETURN PR_COMPONENT.COMPONENT_ID%TYPE
    IS
        
        NUCOMPONENTID  PR_COMPONENT.COMPONENT_ID%TYPE;

        
        CURSOR CUMAINCOMPONENT( NUPRODUCTID IN NUMBER )
        IS
            SELECT A.COMPONENT_ID
            FROM PR_COMPONENT A, PR_PRODUCT B, PR_COMPONENT_LINK C, PS_PROD_COMPOSITION D
            WHERE A.PRODUCT_ID = NUPRODUCTID
            AND B.PRODUCT_ID = A.PRODUCT_ID
            AND C.CHILD_COMPONENT_ID = A.COMPONENT_ID
            AND C.PARENT_COMPONENT_ID IS NULL
            AND D.COMPONENT_TYPE_ID = A.COMPONENT_TYPE_ID
            AND D.PRODUCT_TYPE_ID = B.PRODUCT_TYPE_ID
            AND D.IS_MAIN = GE_BOCONSTANTS.GETYES;


    BEGIN
        UT_TRACE.TRACE('inicio pr_bcproduct.fnuGetMainAnyStatusComponentId ('||INUPRODUCTID||')',5);
        IF INUPRODUCTID IS NULL THEN
            
            RETURN NUCOMPONENTID;
        END IF;

        OPEN CUMAINCOMPONENT (INUPRODUCTID);
        FETCH CUMAINCOMPONENT INTO NUCOMPONENTID;

        IF CUMAINCOMPONENT%NOTFOUND AND IBLRAISEERROR THEN
            ERRORS.SETERROR (CNUNOT_MAIN_COMPONENT, TO_CHAR (INUPRODUCTID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        CLOSE CUMAINCOMPONENT;

        UT_TRACE.TRACE('Fin pr_bcproduct.fnuGetMainAnyStatusComponentId ('||INUPRODUCTID||')',5);
        RETURN NUCOMPONENTID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GRCNEIGHBORTHOODINSTALLDIR := NULL;
            RAISE;
        WHEN OTHERS THEN
            GRCNEIGHBORTHOODINSTALLDIR := NULL;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FTBGETPRODBYSUBSNTYPE
    (
        INUSUBSCRIPTIONID   PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        INUPRODUCTTYPEID    PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT
    IS
        TBPRODS DAPR_PRODUCT.TYTBPR_PRODUCT;
        
        CURSOR CUPRODSBYSUBSANDTYPE IS
            SELECT A.*, A.ROWID
            FROM PR_PRODUCT A
            WHERE A.SUBSCRIPTION_ID = INUSUBSCRIPTIONID
            AND A.PRODUCT_TYPE_ID = INUPRODUCTTYPEID
            AND EXISTS (SELECT 'x'
                        FROM PS_PRODUCT_STATUS B
                        WHERE B.PRODUCT_STATUS_ID = A.PRODUCT_STATUS_ID
                        AND B.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES);
        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUPRODSBYSUBSANDTYPE%ISOPEN) THEN
                CLOSE CUPRODSBYSUBSANDTYPE;
            END IF;
        END;
    BEGIN
        
        CLOSECURSOR;
        
        
        OPEN CUPRODSBYSUBSANDTYPE;
        FETCH CUPRODSBYSUBSANDTYPE BULK COLLECT INTO TBPRODS;
        CLOSE CUPRODSBYSUBSANDTYPE;
        
        
        RETURN TBPRODS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    FUNCTION FNUGETFIRSTPRODBYSUBS
    (
        INUSUBSCRIPTIONID   PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    )
    RETURN NUMBER
    IS
        TBPRODUCTS      DAPR_PRODUCT.TYTBPR_PRODUCT;
        NUINDPROD       BINARY_INTEGER;
        NUIDPRODUCT     PR_PRODUCT.PRODUCT_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia: PR_BCPRODUCT.fnuGetFirstProdBySubs',5);
        NUIDPRODUCT := NULL;
        
        
        PR_BCPRODUCT.GETPRODUCTSSUBSCRIPTION(INUSUBSCRIPTIONID, TBPRODUCTS);
        
        
        NUINDPROD := TBPRODUCTS.FIRST;
        IF (NUINDPROD IS NOT NULL) THEN
            NUIDPRODUCT   :=    TBPRODUCTS(NUINDPROD).PRODUCT_ID;
        END IF;
        
        UT_TRACE.TRACE('Primer Producto encontrado: '||NUIDPRODUCT, 5);
        UT_TRACE.TRACE('Finaliza: PR_BCPRODUCT.fnuGetFirstProdBySubs', 5);
        
        RETURN NUIDPRODUCT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    


    





















    PROCEDURE GETPRODGEOLOCATION
    (
        INUPRODUCTID     IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        ONUGEOLOCATION   OUT AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE,
        ONUNEIGHBORTHOOD OUT AB_ADDRESS.NEIGHBORTHOOD_ID%TYPE
    )
    IS
        CURSOR CUPRODUCT (
                            INUPRODUCT IN PR_PRODUCT.PRODUCT_ID%TYPE
                         ) IS
            SELECT  AB_ADDRESS.GEOGRAP_LOCATION_ID, AB_ADDRESS.NEIGHBORTHOOD_ID
            FROM    PR_PRODUCT, AB_ADDRESS
            WHERE   PR_PRODUCT.ADDRESS_ID = AB_ADDRESS.ADDRESS_ID
            AND     PR_PRODUCT.PRODUCT_ID = INUPRODUCT;
    BEGIN
        UT_TRACE.TRACE
        (
            '[pr_bcProduct.GetProdGeoLocation] INICIO'
        );

        IF ( CUPRODUCT%ISOPEN ) THEN
            CLOSE CUPRODUCT;
        END IF;
        
        OPEN CUPRODUCT( INUPRODUCTID);
        
        FETCH CUPRODUCT INTO ONUGEOLOCATION, ONUNEIGHBORTHOOD;
        
        CLOSE CUPRODUCT;

        UT_TRACE.TRACE
        (
            '[pr_bcProduct.GetProdGeoLocation] FIN'
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    


    


















    FUNCTION FNUCOUNTALLINSTBYCONT
    (
        INUSUBSCRIPTIONID    PR_PRODUCT.SUBSCRIPTION_ID%TYPE
    )
    RETURN NUMBER

    IS

    NUCOUNT     NUMBER;

        CURSOR CUCOUNTALLINSTBYCONT
        (
          INUSUBSCRIPTIONID    PR_PRODUCT.SUBSCRIPTION_ID%TYPE
        )
        IS
            SELECT COUNT(1)
            FROM PR_PRODUCT
            WHERE SUBSCRIPTION_ID = INUSUBSCRIPTIONID
            AND PRODUCT_STATUS_ID NOT IN
                (PR_BOCONSTANTS.CNUPRODUCT_INSTALL_PENDING,
                 PR_BOCONSTANTS.CNUPRODUCT_UNINSTALL_RET);

        PROCEDURE CLOSECURSOR
        IS
        BEGIN
            
            IF ( CUCOUNTALLINSTBYCONT%ISOPEN ) THEN
                CLOSE CUCOUNTALLINSTBYCONT;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
               GE_BOERRORS.SETERROR;
        END CLOSECURSOR;
    BEGIN
        CLOSECURSOR;

        OPEN  CUCOUNTALLINSTBYCONT(INUSUBSCRIPTIONID);
        FETCH CUCOUNTALLINSTBYCONT  INTO NUCOUNT;
        CLOSE CUCOUNTALLINSTBYCONT;
        RETURN NUCOUNT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNTALLINSTBYCONT;


    


















    FUNCTION FBLISPRODUCTENABLED
    (
        INUPRODUCT_ID   IN  PR_PRODUCT.PRODUCT_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        
        SBSTATUS  PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT%TYPE;
        
        
        CURESULT  CONSTANTS.TYREFCURSOR;

        
        PROCEDURE CLOSECUR IS
        BEGIN
            IF (CURESULT%ISOPEN) THEN
                CLOSE CURESULT;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

    BEGIN
        
          OPEN CURESULT
           FOR
        SELECT PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT
          FROM PR_PRODUCT, PS_PRODUCT_STATUS
         WHERE PS_PRODUCT_STATUS.PRODUCT_STATUS_ID = PR_PRODUCT.PRODUCT_STATUS_ID
           AND PR_PRODUCT.PRODUCT_ID = INUPRODUCT_ID;

        
        FETCH CURESULT INTO SBSTATUS;
        CLOSE CURESULT;
        
        
        IF (SBSTATUS IS NULL) THEN
            RETURN FALSE;
        END IF;
        
        
        IF (SBSTATUS = GE_BOCONSTANTS.CSBYES)THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECUR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            CLOSECUR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLISPRODUCTENABLED;
    
    
   




















    PROCEDURE GETSERVNUMANDSERVICE
    (
        INUPRODUCT_ID       IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        OSBSERVICENUMBER    OUT PR_PRODUCT.SERVICE_NUMBER%TYPE,
        OSBSERVICENAME      OUT SERVICIO.SERVDESC%TYPE
    )
    IS
        
        CURESULT  CONSTANTS.TYREFCURSOR;

        
        PROCEDURE CLOSECUR IS
        BEGIN
            IF (CURESULT%ISOPEN) THEN
                CLOSE CURESULT;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

    BEGIN
        
        OSBSERVICENUMBER := NULL;
        OSBSERVICENAME := NULL;
        
        
          OPEN CURESULT
           FOR
        SELECT PR_PRODUCT.SERVICE_NUMBER,
               SERVICIO.SERVDESC
          FROM PR_PRODUCT, SERVICIO
         WHERE PR_PRODUCT.PRODUCT_TYPE_ID = SERVICIO.SERVCODI
           AND PR_PRODUCT.PRODUCT_ID = INUPRODUCT_ID
        ;

        
        FETCH CURESULT INTO OSBSERVICENUMBER, OSBSERVICENAME;
        
        
        CLOSECUR;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECUR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            CLOSECUR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSERVNUMANDSERVICE;
    
    


























    FUNCTION FNUGETTOTALPROD
    (
        INUPECSCICO IN CICLCONS.CICOCODI%TYPE,
        INUDIVI     IN REACGELE.RAGLDIVI%TYPE,
        INUPECSCONS IN PERICOSE.PECSCONS%TYPE
    )
    RETURN NUMBER
    IS
        NUTOTALPRODS NUMBER;

        CURSOR CUPRODUCTS
        IS
            WITH PER AS (SELECT PERICOSE.PECSFECF
                         FROM PERICOSE
                         WHERE PERICOSE.PECSCONS = INUPECSCONS)
            SELECT /*+ ORDERED USE_NL(pr_product, servsusc) */
                   COUNT(1)
            FROM   PER,
                   SERVSUSC,
                   PR_PRODUCT
                   
            WHERE PR_PRODUCT.PRODUCT_ID = SERVSUSC.SESUNUSE
              AND MOD(SERVSUSC.SESUNUSE, 10) = INUDIVI
              AND SERVSUSC.SESUCICO = INUPECSCICO
              AND PR_PRODUCT.PRODUCT_STATUS_ID NOT IN (CNUPRODUCT_INSTALL_PENDING,
                                                       CNUPRODUCT_RETIRE,
                                                       CNUPRODUCT_UNINSTALL_RET)
              AND PR_PRODUCT.ADDRESS_ID IS NOT NULL
              AND (   (EXISTS (SELECT /*+ USE_NL(servsusc, elmesesu) */
                                     'X'
                               FROM  ELMESESU
                               WHERE ELMESESU.EMSSSESU = SERVSUSC.SESUNUSE
                                 AND ELMESESU.EMSSFEIN <= PER.PECSFECF
                                 AND ELMESESU.EMSSFERE > PER.PECSFECF)
                       AND NOT EXISTS (SELECT /*+ USE_NL(servsusc, lectelme) */
                                             'X'
                                       FROM  LECTELME
                                       WHERE LECTELME.LEEMSESU = SERVSUSC.SESUNUSE
                                         AND LECTELME.LEEMCLEC = CM_BOCONSTANTS.CSBCAUS_LECT_BILL
                                         AND LECTELME.LEEMPECS = INUPECSCONS)
                      )
                   OR (NOT EXISTS (SELECT /*+ USE_NL(servsusc, elmesesu) */
                                         'X'
                                   FROM  ELMESESU
                                   WHERE ELMESESU.EMSSSESU = SERVSUSC.SESUNUSE
                                     AND ELMESESU.EMSSFEIN <= PER.PECSFECF
                                     AND ELMESESU.EMSSFERE > PER.PECSFECF)
                       AND NOT EXISTS (SELECT /*+ USE_NL(servsusc, conssesu)
                                                  index(conssesu IX_CONSSESU02) first_rows(1) */
                                             'X'
                                       FROM  CONSSESU
                                       WHERE CONSSESU.COSSSESU = SERVSUSC.SESUNUSE
                                         AND CONSSESU.COSSPECS = INUPECSCONS)
                      )
                  );
    BEGIN
        OPEN CUPRODUCTS;
        FETCH CUPRODUCTS INTO NUTOTALPRODS;
        CLOSE CUPRODUCTS;

        RETURN NUTOTALPRODS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUPRODUCTS%ISOPEN) THEN
                CLOSE CUPRODUCTS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUPRODUCTS%ISOPEN) THEN
                CLOSE CUPRODUCTS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETTOTALPROD;
    
    


















    PROCEDURE GETPRODTOREAD
    (
        INUAMOUNT   IN         INTEGER DEFAULT 100,
        OTBPRODUCTS OUT NOCOPY DAPR_PRODUCT.TYTBPRODUCT_ID
    )
    IS
    BEGIN
        OTBPRODUCTS.DELETE;
    
        FETCH CUPRODUCTSTOREAD BULK COLLECT INTO OTBPRODUCTS
                               LIMIT INUAMOUNT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODTOREAD;

    















    FUNCTION FSBPRODHASCOMPBYTYPE
    (
        INUPRODUCTID        IN      PR_COMPONENT.PRODUCT_ID%TYPE,
        ISBCOMPONENTTYPES   IN      VARCHAR2
    )
    RETURN VARCHAR2
    IS
        RCCOMPONENT           DAPR_COMPONENT.STYPR_COMPONENT;
        CURFCOMPONENTS        CONSTANTS.TYREFCURSOR;
        SBDESCCOMPONENT       VARCHAR2(1024);
        SBRESPONSE            VARCHAR2(1) :=GE_BOCONSTANTS.CSBNO;
    BEGIN
        UT_TRACE.TRACE('Inicia funci�n pr_bcProduct.fsbProdHasCompByType',7);
        CURFCOMPONENTS := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID(INUPRODUCTID);
        FETCH CURFCOMPONENTS INTO RCCOMPONENT;
        WHILE(CURFCOMPONENTS%FOUND) LOOP
            UT_TRACE.TRACE('Tipo de componente -' ||RCCOMPONENT.COMPONENT_TYPE_ID,10);
            IF(INSTR(',' || ISBCOMPONENTTYPES || ',' , ',' ||RCCOMPONENT.COMPONENT_TYPE_ID || ',') >0) THEN
                 SBDESCCOMPONENT := DAPS_COMPONENT_TYPE.FSBGETDESCRIPTION(RCCOMPONENT.COMPONENT_TYPE_ID);
                 SBRESPONSE      := GE_BOCONSTANTS.CSBYES;
                 EXIT;
            END IF;
            FETCH CURFCOMPONENTS INTO RCCOMPONENT;
        END LOOP;
        CLOSE CURFCOMPONENTS;

        UT_TRACE.TRACE('Finaliza funci�n pr_bcProduct.fsbProdHasCompByType',7);
        RETURN SBRESPONSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error Controlado',7);
            IF CURFCOMPONENTS%ISOPEN THEN
                CLOSE CURFCOMPONENTS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error No Controlado',7);
            IF CURFCOMPONENTS%ISOPEN THEN
                CLOSE CURFCOMPONENTS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBPRODHASCOMPBYTYPE;

    












    FUNCTION FTBACTPRODSBYSUBS
    (
        INUSUBSCRIBERID   IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT
    IS
        CURSOR CUACTPRODSBYSUBS
        (
            INUSUBSCRIBERID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE
        )
        IS
            SELECT  A.*,
                    A.ROWID
            FROM    PR_PRODUCT A,
                    SUSCRIPC B,
                    PS_PRODUCT_STATUS C
            WHERE   A.SUBSCRIPTION_ID   = B.SUSCCODI
            AND     A.PRODUCT_STATUS_ID = C.PRODUCT_STATUS_ID
            AND     B.SUSCCLIE          = INUSUBSCRIBERID
            AND     C.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES;

        TBPRODUCTS DAPR_PRODUCT.TYTBPR_PRODUCT;
    BEGIN
        TBPRODUCTS.DELETE;
        OPEN CUACTPRODSBYSUBS(INUSUBSCRIBERID);
        FETCH CUACTPRODSBYSUBS
            BULK COLLECT INTO TBPRODUCTS;
        CLOSE CUACTPRODSBYSUBS;

        RETURN TBPRODUCTS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBACTPRODSBYSUBS;

    















    FUNCTION FNUGETCOUNTPRODBYIDENT
    (
        INUIDENTIFICA_TYPE      IN  GE_SUBSCRIBER.IDENT_TYPE_ID%TYPE,
        ISBIDENTIFICATION       IN  GE_SUBSCRIBER.IDENTIFICATION%TYPE
    )
    RETURN NUMBER
    IS
        CURSOR CUPRODUCTSCLIENT
        IS
            SELECT COUNT(1)
            FROM GE_SUBSCRIBER      A
                ,SUSCRIPC           B
                ,PR_PRODUCT         C
                ,PS_PRODUCT_STATUS  D
            WHERE A.IDENT_TYPE_ID       =   INUIDENTIFICA_TYPE
                AND A.IDENTIFICATION    =   ISBIDENTIFICATION
                AND B.SUSCCLIE          =   A.SUBSCRIBER_ID
                AND C.SUBSCRIPTION_ID   =   B.SUSCCODI
                AND D.PRODUCT_STATUS_ID =   C.PRODUCT_STATUS_ID
                AND D.IS_ACTIVE_PRODUCT =   GE_BOCONSTANTS.CSBYES;
        NUCOUNT  NUMBER(15):=0;
    BEGIN
        
        OPEN CUPRODUCTSCLIENT;
        FETCH CUPRODUCTSCLIENT INTO NUCOUNT;
        CLOSE CUPRODUCTSCLIENT;
        RETURN NUCOUNT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUPRODUCTSCLIENT%ISOPEN THEN
                CLOSE CUPRODUCTSCLIENT;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUPRODUCTSCLIENT%ISOPEN THEN
                CLOSE CUPRODUCTSCLIENT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCOUNTPRODBYIDENT;

    


















    FUNCTION FNUGETCOUNTCOMPCAT
    (
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID  IN  PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCLASCATID        IN  PS_CLASS_SERVICE.CATEGORY%TYPE
    )
    RETURN NUMBER
    IS
        NURETURN    NUMBER;

        CURSOR CUACTIVECOMPONENTSBYPDTTPESTAT
        IS SELECT COUNT(1)
        FROM PR_COMPONENT       A
            ,PS_PRODUCT_STATUS  B
            ,PS_CLASS_SERVICE   C
        WHERE A.PRODUCT_ID          =  INUPRODUCTID
        AND A.COMPONENT_TYPE_ID     =  INUCOMPONENTTYPEID
        AND A.COMPONENT_STATUS_ID   =  B.PRODUCT_STATUS_ID
        AND B.IS_ACTIVE_PRODUCT     =  GE_BOCONSTANTS.GETYES
        AND A.CLASS_SERVICE_ID      =  C.CLASS_SERVICE_ID
        AND C.CATEGORY              =  INUCLASCATID;
        
    BEGIN
        OPEN CUACTIVECOMPONENTSBYPDTTPESTAT;
        FETCH CUACTIVECOMPONENTSBYPDTTPESTAT INTO NURETURN;
        CLOSE CUACTIVECOMPONENTSBYPDTTPESTAT;
        
        RETURN NURETURN;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUACTIVECOMPONENTSBYPDTTPESTAT%ISOPEN THEN
                CLOSE CUACTIVECOMPONENTSBYPDTTPESTAT;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CUACTIVECOMPONENTSBYPDTTPESTAT%ISOPEN THEN
                CLOSE CUACTIVECOMPONENTSBYPDTTPESTAT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCOUNTCOMPCAT;
    
    
















    FUNCTION FTBGETPRODBYSUBSSTATE
    (
        INUSUBSCRIPTIONID    IN    PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        ISBPRODUCTSTATUS     IN    VARCHAR2
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT
    IS
    
        
        TBPRODUCTS    DAPR_PRODUCT.TYTBPR_PRODUCT;
        
        
        SBPRODUCTSTATUS    VARCHAR2(2000);
    
        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (PR_BCPRODUCT.CUGETPRODBYSUBSSTATE%ISOPEN) THEN
                CLOSE PR_BCPRODUCT.CUGETPRODBYSUBSSTATE;
            END IF;
        END CLOSECURSOR;

    BEGIN
    
    UT_TRACE.TRACE('Inicio pr_bcProduct.ftbGetProdbySubsState', 4);
    UT_TRACE.TRACE('Contrato['||INUSUBSCRIPTIONID||'] Estados Producto['||ISBPRODUCTSTATUS||']', 5);
    
    
    CLOSECURSOR;
    
    

    SBPRODUCTSTATUS := ','||ISBPRODUCTSTATUS||',';
    
    
    OPEN PR_BCPRODUCT.CUGETPRODBYSUBSSTATE (INUSUBSCRIPTIONID, SBPRODUCTSTATUS);
    FETCH PR_BCPRODUCT.CUGETPRODBYSUBSSTATE BULK COLLECT INTO TBPRODUCTS;
    CLOSE PR_BCPRODUCT.CUGETPRODBYSUBSSTATE;
    
    UT_TRACE.TRACE('Fin pr_bcProduct.ftbGetProdbySubsState', 4);

    
    RETURN TBPRODUCTS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            CLOSECURSOR;
            RAISE EX.CONTROLLED_ERROR;

    END FTBGETPRODBYSUBSSTATE;
    
    





















    FUNCTION FNUGETPRODBYADDRPRODTYPE
    (
        INUADDRESSID    AB_ADDRESS.ADDRESS_ID%TYPE,
        INUPRODUCTTYPE  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
    )
    RETURN PR_PRODUCT.PRODUCT_ID%TYPE
    IS
        
        
        
        CURSOR CUGETPRODUCT
        (
            INUADDRESSID    PR_PRODUCT.ADDRESS_ID%TYPE,
            INUPRODUCTTYPE  PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
        )
        IS
            SELECT /*+ index (PR_Product IDX_PR_PRODUCT_09)
                   use_nl_with_index(ps_product_status PK_PS_PRODUCT_STATUS)
                   */
            PRODUCT_ID
            FROM PR_PRODUCT,PS_PRODUCT_STATUS
            /*+ pr_bcProduct.fnuGetProdByAddrProdType cuGetProduct*/
            WHERE ADDRESS_ID = INUADDRESSID
            AND PRODUCT_TYPE_ID = INUPRODUCTTYPE
            AND PR_PRODUCT.PRODUCT_STATUS_ID = PS_PRODUCT_STATUS.PRODUCT_STATUS_ID
            AND  IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES
            AND ROWNUM = 1;

        
        
        
        NUPRODUCTID         PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPRODUCTIDNULL     PR_PRODUCT.PRODUCT_ID%TYPE;

    BEGIN

        IF (CUGETPRODUCT%ISOPEN) THEN
            CLOSE CUGETPRODUCT;
        END IF;

        OPEN CUGETPRODUCT (INUADDRESSID, INUPRODUCTTYPE);

        FETCH CUGETPRODUCT INTO NUPRODUCTID;

        IF (CUGETPRODUCT%NOTFOUND) THEN
            CLOSE CUGETPRODUCT;
            RETURN NUPRODUCTIDNULL;
        END IF;

        CLOSE CUGETPRODUCT;

        RETURN NUPRODUCTID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUGETPRODUCT%ISOPEN THEN
                CLOSE CUGETPRODUCT;
            END IF;
            RAISE;
        WHEN OTHERS THEN
            IF CUGETPRODUCT%ISOPEN THEN
              CLOSE CUGETPRODUCT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FNUGETPRODBYADDRPRODTYPE;

    



















    FUNCTION FTBGETPRODBYCONTNTYPE
    (
        INUSUBSCRIPTION     IN      PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        INUPRODUCTTYPEID    IN      PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
    )
    RETURN DAPR_PRODUCT.TYTBPR_PRODUCT
    IS
        CURSOR CUPRODSBYCONTRNTYPE
        IS
        SELECT  /*+ INDEX (p IDX_PR_PRODUCT_010)
                    USE_NL_WITH_INDEX(p PK_PS_PRODUCT_STATUS)*/
                P.*, P.ROWID
        FROM    /*+PR_BCProduct.ftbGetProdByContNType.cuProdsByContrNType*/
                PR_PRODUCT          P
                ,PS_PRODUCT_STATUS  S
        WHERE P.SUBSCRIPTION_ID = INUSUBSCRIPTION
        AND   P.PRODUCT_TYPE_ID = INUPRODUCTTYPEID
        AND   P.PRODUCT_STATUS_ID = S.PRODUCT_STATUS_ID
        AND   S.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES;
        
        TBRESULT  DAPR_PRODUCT.TYTBPR_PRODUCT;

        PROCEDURE CLOSECURSOR
        IS
        BEGIN
            IF(CUPRODSBYCONTRNTYPE%ISOPEN)THEN
                CLOSE CUPRODSBYCONTRNTYPE;
            END IF;
        END CLOSECURSOR;
        
    BEGIN
        UT_TRACE.TRACE('BEGIN PR_BCProduct.ftbGetProdByContNType',11);
        CLOSECURSOR;
        
        OPEN CUPRODSBYCONTRNTYPE;
        FETCH CUPRODSBYCONTRNTYPE BULK COLLECT INTO TBRESULT;
        CLOSECURSOR;
        
        UT_TRACE.TRACE('END PR_BCProduct.ftbGetProdByContNType',11);
        RETURN TBRESULT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR;
            RAISE;
        WHEN OTHERS THEN
            CLOSECURSOR;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETPRODBYCONTNTYPE;
    
  
    PROCEDURE CLEARMEMORY
    IS
    BEGIN
        
        GNUADDRESSID := NULL;
        GTBPRODUCTSBYADDRESS.DELETE;

        
        GSBHASHSUBSCANDADDR := NULL;
        GTBPRODSBYSUBSCANDADDR.DELETE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLEARMEMORY;

    
    PROCEDURE GETPRODSBYADDRESSCACHE
    (
        INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT
    )
    IS
        
        CURSOR CUPRODSBYADDRESSID
        (
            INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE
        )
        IS
        SELECT  /*+ INDEX (PR_PRODUCT, IDX_PR_PRODUCT_09)*/
                A.*, A.ROWID
        FROM    PR_PRODUCT A /*+ PR_BCProduct.GetProdsByAddressCache */
        WHERE   A.ADDRESS_ID = INUADDRESSID;

    BEGIN
        OTBPRODUCTS.DELETE;
        
        IF( GNUADDRESSID IS NOT NULL AND GNUADDRESSID = INUADDRESSID ) THEN
            OTBPRODUCTS := GTBPRODUCTSBYADDRESS;
            UT_TRACE.TRACE('Obtiene los productos de la Cache',1);
        ELSE
            UT_TRACE.TRACE('Obtiene los productos accediendo a disco',1);
            
            IF  CUPRODSBYADDRESSID%ISOPEN THEN
                CLOSE CUPRODSBYADDRESSID;
            END IF;

            
            GNUADDRESSID := NULL;
            GTBPRODUCTSBYADDRESS.DELETE;

            
            OPEN CUPRODSBYADDRESSID(INUADDRESSID);
            FETCH CUPRODSBYADDRESSID BULK COLLECT INTO OTBPRODUCTS;
            CLOSE CUPRODSBYADDRESSID;
            
            GNUADDRESSID := INUADDRESSID;
            GTBPRODUCTSBYADDRESS := OTBPRODUCTS;

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF  CUPRODSBYADDRESSID%ISOPEN THEN
                CLOSE CUPRODSBYADDRESSID;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF  CUPRODSBYADDRESSID%ISOPEN THEN
                CLOSE CUPRODSBYADDRESSID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODSBYADDRESSCACHE;

    
    PROCEDURE GETPRODSBYSUBSANDADDRCACHE
    (
        INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE,
        OTBPRODUCTS         OUT DAPR_PRODUCT.TYTBPR_PRODUCT
    )
    IS

        
        SBHASHSUBSCANDADDR  VARCHAR2(25);

        
        CURSOR CUPRODSBYSUBSANDADDRID
        (
            INUSUBSCRIPTIONID   IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
            INUADDRESSID        IN  PR_PRODUCT.ADDRESS_ID%TYPE
        )
        IS
        SELECT  /*+ INDEX (PR_PRODUCT, IDX_PR_PRODUCT_010)*/
                A.*, A.ROWID
        FROM    PR_PRODUCT A /*+ PR_BCProduct.GetProdsBySubsAndAddrCache */
        WHERE   A.SUBSCRIPTION_ID = INUSUBSCRIPTIONID
        AND     A.ADDRESS_ID = INUADDRESSID;

    BEGIN
        OTBPRODUCTS.DELETE;

        
        SBHASHSUBSCANDADDR := TO_CHAR(INUSUBSCRIPTIONID,'FM00000009')||
                              TO_CHAR(INUADDRESSID,'FM000000000000009');

        
        IF( GSBHASHSUBSCANDADDR IS NOT NULL AND
            GSBHASHSUBSCANDADDR = SBHASHSUBSCANDADDR )
        THEN
            OTBPRODUCTS := GTBPRODSBYSUBSCANDADDR;
            UT_TRACE.TRACE('Obtiene los productos de la Cache',1);
        ELSE
            UT_TRACE.TRACE('Obtiene los productos accediendo a disco',1);
            
            IF  CUPRODSBYSUBSANDADDRID%ISOPEN THEN
                CLOSE CUPRODSBYSUBSANDADDRID;
            END IF;

            
            GSBHASHSUBSCANDADDR := NULL;
            GTBPRODSBYSUBSCANDADDR.DELETE;

            
            OPEN CUPRODSBYSUBSANDADDRID(INUSUBSCRIPTIONID, INUADDRESSID);
            FETCH CUPRODSBYSUBSANDADDRID BULK COLLECT INTO OTBPRODUCTS;
            CLOSE CUPRODSBYSUBSANDADDRID;

            
            GSBHASHSUBSCANDADDR := SBHASHSUBSCANDADDR;
            GTBPRODSBYSUBSCANDADDR := OTBPRODUCTS;

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF  CUPRODSBYSUBSANDADDRID%ISOPEN THEN
                CLOSE CUPRODSBYSUBSANDADDRID;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF  CUPRODSBYSUBSANDADDRID%ISOPEN THEN
                CLOSE CUPRODSBYSUBSANDADDRID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODSBYSUBSANDADDRCACHE;
    
    














    PROCEDURE GETPRODDATABYSUBS
    (
        INUSUBSCRIBERID     IN  PR_PRODUCT.SUBSCRIPTION_ID%TYPE,
        ONUACTIPRODCOUNT    OUT NUMBER,
        ODTACTIPRODFIRST    OUT DATE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN PR_BCProduct.GetProdDataBySubs['||INUSUBSCRIBERID||']',20);

        SELECT  /*+
                    USE_NL(a b c)
                    INDEX(a IX_SUSCRIPC017)
                    INDEX(b IDX_PR_PRODUCT_010)
                    INDEX(c PK_PS_PRODUCT_STATUS)
                */
                COUNT(*),
                MIN(B.CREATION_DATE)
        INTO    ONUACTIPRODCOUNT,
                ODTACTIPRODFIRST
        FROM    SUSCRIPC A,
                PR_PRODUCT B,
                PS_PRODUCT_STATUS C
                /*+ PR_BCProduct.GetProdDataBySubs*/
        WHERE   A.SUSCCLIE = INUSUBSCRIBERID
        AND     B.SUBSCRIPTION_ID = A.SUSCCODI
        AND     C.PRODUCT_STATUS_ID = B.PRODUCT_STATUS_ID
        AND     C.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES;

        UT_TRACE.TRACE('END PR_BCProduct.GetProdDataBySubs['||ONUACTIPRODCOUNT||']['||ODTACTIPRODFIRST||']', 20);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODDATABYSUBS;
    
END PR_BCPRODUCT;