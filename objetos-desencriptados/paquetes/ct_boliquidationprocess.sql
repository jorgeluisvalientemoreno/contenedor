PACKAGE BODY CT_BOLiquidationProcess
IS
    






























































































































































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO424459';
    
    CNUERROR_CONTRACT_ADMINBASE CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 6342;
    
    CNUCONCERROR        CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 905041;
    
    CSBGE_CONTRATO              CONSTANT GE_ENTITY.NAME_%TYPE       := 'GE_CONTRATO';
    CNUCONSIGMENT_ACTIVITY      CONSTANT GE_ITEMS.ITEMS_ID%TYPE     := GE_BOITEMSCONSTANTS.CNUCONSIGMENTACTIVITY;
    CNUADJUSTMENT_ACTIVITY      CONSTANT GE_ITEMS.ITEMS_ID%TYPE     := GE_BOITEMSCONSTANTS.CNUADJUSTMENTACTIVITY;
    
    CNUMESSAGE_PROCESS_OK       CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 300008;
    CNUMESS_NO_CONPLAN          CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 300041;
    CNUMESS_NO_PERSON           CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 300042;
    
    
    

    
    
    

    
    
    

    
    
    
    
    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;
    
    
    
    PROCEDURE UPDLIQUIDATIONVALUES(IDACTA IN GE_ACTA.ID_ACTA%TYPE, INUCONTRACTID IN  GE_ACTA.ID_CONTRATO%TYPE)
    IS
        NUVALORLIQUIDADO        GE_ACTA.VALOR_LIQUIDADO%TYPE;
        NUVALORLIQCONTRATO      GE_CONTRATO.VALOR_LIQUIDADO%TYPE;
        NUVALORNOLIQCONTRATO    GE_CONTRATO.VALOR_NO_LIQUIDADO%TYPE;
        
        NUESTIMCOSTTOT          OR_ORDER.ESTIMATED_COST%TYPE;
    BEGIN
    

        IF (INUCONTRACTID IS NOT NULL) THEN

            NUVALORLIQUIDADO := GE_BCDETALLEACTA.FNUGETLIQUIDATIONITEMS(IDACTA);
            
            DAGE_ACTA.UPDVALOR_LIQUIDADO(IDACTA, NUVALORLIQUIDADO);

            NUVALORLIQCONTRATO := NVL(DAGE_CONTRATO.FNUGETVALOR_LIQUIDADO(INUCONTRACTID), 0);
            
            
            DAGE_CONTRATO.UPDVALOR_LIQUIDADO(INUCONTRACTID, NUVALORLIQCONTRATO + NUVALORLIQUIDADO);
            
            
            NUESTIMCOSTTOT := CT_BCCONTRACT.FNUGETESTIMCOSTBYCONT(IDACTA);
            
            
            NUVALORNOLIQCONTRATO := NVL(DAGE_CONTRATO.FNUGETVALOR_NO_LIQUIDADO(INUCONTRACTID, 0), 0);
            
            
            NUVALORNOLIQCONTRATO := NUVALORNOLIQCONTRATO - NUESTIMCOSTTOT;
            
            
            DAGE_CONTRATO.UPDVALOR_NO_LIQUIDADO(INUCONTRACTID, NUVALORNOLIQCONTRATO);

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDLIQUIDATIONVALUES;
    





















    PROCEDURE PREPAREOUTPUT
    (
        ITBLIQCERTIFICATES    IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES   IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        OTBCERTIFICATES       IN OUT NOCOPY   DAGE_ACTA.TYTBID_ACTA,
        INUCONTRACTID         IN              GE_ACTA.ID_CONTRATO%TYPE
    )
    IS
        NUINDEX  BINARY_INTEGER := 1;
        SBINDEX  VARCHAR2(15);
        
        BLCOMMIT     BOOLEAN := FALSE;
    BEGIN
        OTBCERTIFICATES.DELETE;

        SBINDEX := ITBLIQCERTIFICATES.FIRST;

        LOOP
            EXIT WHEN SBINDEX IS NULL;
            
            IF CT_BCCERTIFICATE.FBLHASDETAILS(ITBLIQCERTIFICATES(SBINDEX)) THEN
                OTBCERTIFICATES(NUINDEX) := ITBLIQCERTIFICATES(SBINDEX);
                
                UPDLIQUIDATIONVALUES(OTBCERTIFICATES(NUINDEX), INUCONTRACTID);

                NUINDEX := NUINDEX + 1;
                BLCOMMIT := TRUE;
            ELSE
                DAGE_ACTA.DELRECORD(ITBLIQCERTIFICATES(SBINDEX));
                BLCOMMIT := TRUE;
            END IF;

            SBINDEX := ITBLIQCERTIFICATES.NEXT(SBINDEX);
        END LOOP;

        NUINDEX := OTBCERTIFICATES.LAST;

        IF (NUINDEX IS NULL) THEN
            NUINDEX := 0;
        END IF;
        NUINDEX := NUINDEX + 1;

        SBINDEX := ITBBILLCERTIFICATES.FIRST;

        LOOP
            EXIT WHEN SBINDEX IS NULL;

            IF CT_BCCERTIFICATE.FBLHASDETAILS(ITBBILLCERTIFICATES(SBINDEX)) THEN
                OTBCERTIFICATES(NUINDEX) := ITBBILLCERTIFICATES(SBINDEX);
                NUINDEX := NUINDEX + 1;
            ELSE
                DAGE_ACTA.DELRECORD(ITBBILLCERTIFICATES(SBINDEX));
                BLCOMMIT := TRUE;
            END IF;


            SBINDEX := ITBBILLCERTIFICATES.NEXT(SBINDEX);
        END LOOP;
        
        IF BLCOMMIT THEN
            COMMIT;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PREPAREOUTPUT;

    





















    PROCEDURE PREPAREOUTPUTNOADMINBASE
    (
        ITBNOADMINBASELIQCERTIFS    IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS   IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        OTBCERTIFICATES             IN OUT NOCOPY   DAGE_ACTA.TYTBID_ACTA,
        INUCONTRACTID               IN              GE_ACTA.ID_CONTRATO%TYPE
    )
    IS
        NUINDEX      BINARY_INTEGER;
        SBINDEX      VARCHAR2(15);
        
        BLCOMMIT     BOOLEAN := FALSE;
    BEGIN
        NUINDEX := OTBCERTIFICATES.LAST;

        IF (NUINDEX IS NULL) THEN
            NUINDEX := 0;
        END IF;
        NUINDEX := NUINDEX + 1;

        SBINDEX := ITBNOADMINBASELIQCERTIFS.FIRST;

        LOOP
            EXIT WHEN SBINDEX IS NULL;

            IF CT_BCCERTIFICATE.FBLHASDETAILS(ITBNOADMINBASELIQCERTIFS(SBINDEX)) THEN
                OTBCERTIFICATES(NUINDEX) := ITBNOADMINBASELIQCERTIFS(SBINDEX);

                UPDLIQUIDATIONVALUES(OTBCERTIFICATES(NUINDEX), INUCONTRACTID);
                
                NUINDEX := NUINDEX + 1;
                BLCOMMIT := TRUE;
            ELSE
                DAGE_ACTA.DELRECORD(ITBNOADMINBASELIQCERTIFS(SBINDEX));
                BLCOMMIT := TRUE;
            END IF;

            SBINDEX := ITBNOADMINBASELIQCERTIFS.NEXT(SBINDEX);
        END LOOP;

        NUINDEX := OTBCERTIFICATES.LAST;

        IF (NUINDEX IS NULL) THEN
            NUINDEX := 0;
        END IF;
        NUINDEX := NUINDEX + 1;

        SBINDEX := ITBNOADMINBASEBILLCERTIFS.FIRST;

        LOOP
            EXIT WHEN SBINDEX IS NULL;
            
            IF CT_BCCERTIFICATE.FBLHASDETAILS(ITBNOADMINBASEBILLCERTIFS(SBINDEX)) THEN
                OTBCERTIFICATES(NUINDEX) := ITBNOADMINBASEBILLCERTIFS(SBINDEX);
                NUINDEX := NUINDEX + 1;
            ELSE
                DAGE_ACTA.DELRECORD(ITBNOADMINBASEBILLCERTIFS(SBINDEX));
                BLCOMMIT := TRUE;
            END IF;

            SBINDEX := ITBNOADMINBASEBILLCERTIFS.NEXT(SBINDEX);
        END LOOP;
        
        IF BLCOMMIT THEN
            COMMIT;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PREPAREOUTPUTNOADMINBASE;
    
    































    PROCEDURE PROCESSSIMPLECONDWITHOUTLEVEL
    (
        IRCSIMPLECONDPLAN           IN             CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN,
        ITBNOADMINBASELIQCERTIFS    IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUADDRESSID                IN             AB_ADDRESS.ADDRESS_ID%TYPE,
        INUOPERUNITID               IN             OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY  BOOLEAN
    )
    IS
        RCCERTDETAIL            DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;
        NUCERTIFICATEID         GE_ACTA.ID_ACTA%TYPE;

        BLNOADMINBASELIQCERTIF  BOOLEAN := FALSE;
        BLNOADMINBASEBILLCERTIF BOOLEAN := FALSE;
        
        NUORDER                 OR_ORDER.ORDER_ID%TYPE;
        
        RCORDERBYCERTIFICATE    DACT_ORDER_CERTIFICA.STYCT_ORDER_CERTIFICA;

    BEGIN
        SAVEPOINT SP_SIMPLECONDWITHOUTLEVEL;

        
        IF (IRCSIMPLECONDPLAN.CERTIFICATE_TYPE_ID = CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE) THEN

            
            IF (ITBNOADMINBASELIQCERTIFS.FIRST IS NULL) THEN

                
                
                CT_BOCERTIFICATE.CREATECERTIFICATE
                (
                    CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE,
                    INUCONTRACTID,
                    INUPERIODID,
                    NULL,
                    IDTBREAKDATE,
                    NULL,
                    ITBNOADMINBASELIQCERTIFS('-')
                );

                
                BLNOADMINBASELIQCERTIF := TRUE;

            END IF;
            
            NUCERTIFICATEID := ITBNOADMINBASELIQCERTIFS('-');

        
        ELSIF (IRCSIMPLECONDPLAN.CERTIFICATE_TYPE_ID = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE) THEN

            
            IF (ITBNOADMINBASEBILLCERTIFS.FIRST IS NULL) THEN

                
                
                CT_BOCERTIFICATE.CREATECERTIFICATE
                (
                    CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE,
                    INUCONTRACTID,
                    INUPERIODID,
                    NULL,
                    IDTBREAKDATE,
                    NULL,
                    ITBNOADMINBASEBILLCERTIFS('-')
                );

                
                BLNOADMINBASEBILLCERTIF := TRUE;

            END IF;
            
            NUCERTIFICATEID := ITBNOADMINBASEBILLCERTIFS('-');
        END IF;
        
        
        OR_BOORDER.CREATECLOSEORDER
        (
            INUOPERUNITID    => INUOPERUNITID,
            INUACTIVITY      => IRCSIMPLECONDPLAN.ITEMS_ID,
            INUADDRESSID     => INUADDRESSID,
            IDTFINISHDATE    => NULL,
            INUITEMAMOUNT    => 1,
            INUREFVALUE      => NULL,
            INUCAUSAL        => OR_BOCONSTANTS.CNUSUCCESCAUSAL,
            INURELATIONTYPE  => NULL,
            IONUORDERID      => NUORDER,
            INUORDERRELAID   => NULL,
            INUCOMMENTTYPEID => NULL,
            ISBCOMMENT       => NULL,
            INUPERSONID      => GE_BOPERSONAL.FNUGETPERSONID
        );

        
        RCCERTDETAIL.ID_DETALLE_ACTA        := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
        RCCERTDETAIL.REFERENCE_ITEM_ID      := IRCSIMPLECONDPLAN.ITEMS_ID;
        RCCERTDETAIL.CONDITION_BY_PLAN_ID   := IRCSIMPLECONDPLAN.CONDITION_BY_PLAN_ID;
        RCCERTDETAIL.ID_ITEMS               := IRCSIMPLECONDPLAN.ITEMS_ID;
        RCCERTDETAIL.DESCRIPCION_ITEMS      := IRCSIMPLECONDPLAN.ITEMS_ID || ' - ' || IRCSIMPLECONDPLAN.ITEM_DESCRIPTION;
        RCCERTDETAIL.CANTIDAD               := 1;
        RCCERTDETAIL.VALOR_UNITARIO         := IRCSIMPLECONDPLAN.VALUE_;
        RCCERTDETAIL.VALOR_TOTAL            := IRCSIMPLECONDPLAN.VALUE_;
        RCCERTDETAIL.ID_ACTA                := NUCERTIFICATEID;
        RCCERTDETAIL.TIPO_GENERACION        := CT_BOCONSTANTS.FSBGETAUTODETGENTYPE;
        RCCERTDETAIL.ID_UNIDAD_MEDIDA       := IRCSIMPLECONDPLAN.ITEM_MEASURE_UNIT_ID;
        RCCERTDETAIL.SIMPLE_CONDITION_ID    := IRCSIMPLECONDPLAN.SIMPLE_CONDITION_ID;
        RCCERTDETAIL.ID_ORDEN               := NUORDER;
        RCCERTDETAIL.GEOGRAP_LOCATION_ID    := GE_BOCERTCONTRATISTA.FNUGETGEOLOCATIONBYADDRESS(INUADDRESSID);
        
        
        
        RCCERTDETAIL.AFFECT_CONTRACT_VAL := 'Y';
        IF (DACT_EXCL_ITEM_CONT_VAL.FBLEXIST(RCCERTDETAIL.ID_ITEMS) ) THEN
            RCCERTDETAIL.AFFECT_CONTRACT_VAL := 'N';
        END IF;
        
        
        DAGE_DETALLE_ACTA.INSRECORD(RCCERTDETAIL);
        
        
        
        CT_BCLIQUIDATIONSUPPORT.UPDAUTORDERSIMPLE(NUORDER);
        
        
        RCORDERBYCERTIFICATE.ORDER_ID           := NUORDER;
        RCORDERBYCERTIFICATE.CERTIFICATE_ID     := NUCERTIFICATEID;
        RCORDERBYCERTIFICATE.VERIFICATION_DATE  := NULL;

        DACT_ORDER_CERTIFICA.INSRECORD(RCORDERBYCERTIFICATE);
        
        
        COMMIT;

        
        IF (NOT IBLNEWOBLIGATIONS) THEN
            IBLNEWOBLIGATIONS := TRUE;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_SIMPLECONDWITHOUTLEVEL;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCSIMPLECONDPLAN.ITEMS_ID,
                IRCSIMPLECONDPLAN.CONDITION_BY_PLAN_ID
            );
            
            IF (BLNOADMINBASELIQCERTIF) THEN
                ITBNOADMINBASELIQCERTIFS.DELETE('-');
            ELSIF (BLNOADMINBASEBILLCERTIF) THEN
                   ITBNOADMINBASEBILLCERTIFS.DELETE('-');
            END IF;
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_SIMPLECONDWITHOUTLEVEL;
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                IRCSIMPLECONDPLAN.ITEMS_ID,
                IRCSIMPLECONDPLAN.CONDITION_BY_PLAN_ID
            );
            
            IF (BLNOADMINBASELIQCERTIF) THEN
                ITBNOADMINBASELIQCERTIFS.DELETE('-');
            ELSIF (BLNOADMINBASEBILLCERTIF) THEN
                ITBNOADMINBASEBILLCERTIFS.DELETE('-');
            END IF;
    END PROCESSSIMPLECONDWITHOUTLEVEL;
    
    

























    PROCEDURE PROCSIMPLECONDWITHOUTLEVEL
    (
        INUCONDPLANID               IN             CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTORID             IN             GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        ITBNOADMINBASELIQCERTIFS    IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY  BOOLEAN
    )
    IS
        TBSIMPLECONDPLAN        CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN;
        
        NUSUBSCRIBERID          GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        NUADDRESSID             AB_ADDRESS.ADDRESS_ID%TYPE;
        NUOPERUNITID           OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        
        NUCONDINDEX             PLS_INTEGER;
    BEGIN

        
        IF INUCONDPLANID IS NULL THEN
            RETURN;
        END IF;
        
        
        NUSUBSCRIBERID := DAGE_CONTRATISTA.FNUGETSUBSCRIBER_ID(INUCONTRACTORID);
        IF (NUSUBSCRIBERID IS NULL) THEN
            
            
            ERRORS.SETERROR
            (
                901668,
                INUCONDPLANID ||'|'||INUCONTRACTORID
            );

            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
            RETURN;
        END IF;
        
        
        NUADDRESSID := DAGE_SUBSCRIBER.FNUGETADDRESS_ID(NUSUBSCRIBERID);
        IF (NUADDRESSID IS NULL) THEN
            
            
            ERRORS.SETERROR
            (
                901668,
                INUCONDPLANID ||'|'||INUCONTRACTORID
            );

            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
            RETURN;
        END IF;
        
        
        NUOPERUNITID := CT_BCCONTRACTOR.FNUGETFIRSTUNITBYCONTRACTOR(INUCONTRACTORID);

        
        IF (NUOPERUNITID IS NULL) THEN
            
            
            ERRORS.SETERROR
            (
                901670,
                INUCONDPLANID ||'|'||INUCONTRACTORID
            );

            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
            RETURN;
        END IF;

        
        CT_BCCONDITIONPLAN.GETSIMPLESWITHOUTLEVEL
        (
            INUCONDPLANID,
            IDTBREAKDATE,
            TBSIMPLECONDPLAN
        );

        
        IF (TBSIMPLECONDPLAN.COUNT = 0) THEN

            
            ERRORS.SETERROR(901265, INUCONDPLANID);

            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
            RETURN;
        END IF;
        
        
        NUCONDINDEX := TBSIMPLECONDPLAN.FIRST;
        LOOP
            EXIT WHEN NUCONDINDEX IS NULL;
            
            CT_BOLIQUIDATIONPROCESS.PROCESSSIMPLECONDWITHOUTLEVEL
            (
                TBSIMPLECONDPLAN(NUCONDINDEX),
                ITBNOADMINBASELIQCERTIFS,
                ITBNOADMINBASEBILLCERTIFS,
                INUPERIODID,
                INUCONTRACTID,
                IDTBREAKDATE,
                NUADDRESSID,
                NUOPERUNITID,
                IBLNEWOBLIGATIONS
            );

            NUCONDINDEX := TBSIMPLECONDPLAN.NEXT(NUCONDINDEX);
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCSIMPLECONDWITHOUTLEVEL;
    
    




























































    PROCEDURE PROCESSSIMPLECONDORDERITEM
    (
        ITBORDERITEMSINCACHE        IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMS,
        INUITEMCACHEINDEX           IN              PLS_INTEGER,
        INUITEMPROCESS              IN              NUMBER,
        ITBSIMPLECONDITEM           IN OUT NOCOPY   CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN,
        IDTBREAKDATE                IN              GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN              GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN              GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTORID             IN              GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        IRCOPERUNIT                 IN              DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT,
        IRCORDER                    IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYORDERSINFO,
        ITBNOADMINBASELIQCERTIFS    IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS   IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES          IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES         IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY   BOOLEAN,
        ITBCERTDETAILSBYSIMPLE      IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTDETAILSBYSIMPLE,
        ITBITEMLOCSIMPLE            IN OUT NOCOPY   CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN_VARCHAR,
        IBLHASADJUSTACT             IN              BOOLEAN,
        IBLHASCONSIGNACT            IN              BOOLEAN,
        ITBITEMNOVELSIGN            IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBNOVELTYITEMS
    )
    IS
        RCCERTDETAIL            DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;

        RCSIMPLECONDITION       CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN;
        SBINDEX                 VARCHAR2(45);
        TBCERTDETAILS           DAGE_DETALLE_ACTA.TYTBGE_DETALLE_ACTA;
        
        NUCERTIFICATEID         GE_ACTA.ID_ACTA%TYPE;
        
        RCCERTDETAILSBYSIMPLE   CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE;
        
        NUVALUEITEM             GE_DETALLE_ACTA.VALOR_UNITARIO%TYPE;
        NULIST                  GE_DETALLE_ACTA.ID_LISTA_UNIT_COSTO%TYPE;
        
        SBGEOLOCATION           VARCHAR2(50) := 'nulo';
        SBADMINBASE             VARCHAR2(50) := 'nulo';
        
        BLNOADMINBASELIQCERTIF  BOOLEAN := FALSE;
        BLNOADMINBASEBILLCERTIF BOOLEAN := FALSE;
        BLLIQCERTIFICATE        BOOLEAN := FALSE;
        BLBILLCERTIFICATE       BOOLEAN := FALSE;
        
        NUAMOUNT                GE_DETALLE_ACTA.CANTIDAD%TYPE;
        NUORIGINALAMOUNT        GE_DETALLE_ACTA.CANTIDAD%TYPE;
        
        NUITEMID                GE_ITEMS.ITEMS_ID%TYPE;
        NUITEMCLASSIF           GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
        
        NUCOUNT                 NUMBER;
        
        BLHASWITHGEO            BOOLEAN := FALSE;
        
        TBSIMPLECONDPLAN        CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN;
        
        SBITEMLOC               VARCHAR2(50);
        NUPLANITEMBASE          PLS_INTEGER;

        PROCEDURE ROLLBACKCREATEDCERT
        IS
        BEGIN
            IF (BLNOADMINBASELIQCERTIF) THEN
                ITBNOADMINBASELIQCERTIFS.DELETE('-');
            ELSIF (BLLIQCERTIFICATE) THEN
                ITBLIQCERTIFICATES.DELETE(IRCOPERUNIT.ADMIN_BASE_ID);
            ELSIF (BLNOADMINBASEBILLCERTIF) THEN
                ITBNOADMINBASEBILLCERTIFS.DELETE('-');
            ELSIF (BLBILLCERTIFICATE) THEN
                ITBBILLCERTIFICATES.DELETE(IRCOPERUNIT.ADMIN_BASE_ID);
            END IF;
        END ROLLBACKCREATEDCERT;
    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationProcess.ProcessSimpleCondOrderItem',5);
        
        IF ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).GEOGRAP_LOCATION_ID IS NOT NULL THEN
            SBGEOLOCATION := TO_CHAR(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).GEOGRAP_LOCATION_ID);
        END IF;
        
        IF IRCOPERUNIT.ADMIN_BASE_ID IS NOT NULL THEN
            SBADMINBASE := TO_CHAR(IRCOPERUNIT.ADMIN_BASE_ID);
        END IF;
        
        SBITEMLOC := TO_CHAR(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID) || '_' || SBGEOLOCATION || '_' || TO_CHAR(INUITEMPROCESS);
        
        NUCOUNT := 1;
        
        
        IF (NOT ITBITEMLOCSIMPLE.EXISTS(SBITEMLOC)) THEN
            UT_TRACE.TRACE('No existe alguna condici�n simple que aplique para el �tem _ ubicaci�n:' || SBITEMLOC ,6);
            SBINDEX := ITBSIMPLECONDITEM.FIRST;
            LOOP
                EXIT WHEN SBINDEX IS NULL;

                
                IF (ITBSIMPLECONDITEM(SBINDEX).GEOGRAP_LOCATION_ID IS NULL) THEN
                    UT_TRACE.TRACE('Si la condici�n simple no tiene ubicaci�n, es la que aplica' ,6);
                    
                    IF
                    (
                        ITBSIMPLECONDITEM(SBINDEX).ALL_ITEMS = GE_BOCONSTANTS.CSBYES
                    OR
                        CT_BCSIMPLECONDITION.FBLISITEMASOC
                        (
                            ITBSIMPLECONDITEM(SBINDEX).SIMPLE_CONDITION_ID,
                            ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID
                        )
                    )
                    THEN
                        UT_TRACE.TRACE('Aplica para el �tem de la orden' ,6);
                        
                        IF( NOT BLHASWITHGEO) THEN
                            UT_TRACE.TRACE('Se asocia si no se han encontrado regsitros previos que apliquen por ubicaci�n' ,6);
                            RCSIMPLECONDITION := ITBSIMPLECONDITEM(SBINDEX);
                            TBSIMPLECONDPLAN(NUCOUNT) := RCSIMPLECONDITION;
                            NUCOUNT := NUCOUNT + 1;
                            UT_TRACE.TRACE('Termina la asociaci�n' ,6);
                        END IF;
                    END IF;
                    
                
                
                ELSIF (
                            ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).GEOGRAP_LOCATION_ID IS NOT NULL
                      AND
                            ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).GEOGRAP_LOCATION_ID = ITBSIMPLECONDITEM(SBINDEX).GEOGRAP_LOCATION_ID
                       )
                THEN
                    UT_TRACE.TRACE('La condici� tiene ubicaci�n y es la que aplica' ,6);
                    
                    IF
                    (
                        ITBSIMPLECONDITEM(SBINDEX).ALL_ITEMS = GE_BOCONSTANTS.CSBYES
                    OR
                        CT_BCSIMPLECONDITION.FBLISITEMASOC(ITBSIMPLECONDITEM(SBINDEX).SIMPLE_CONDITION_ID, ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID)
                    )
                    THEN
                        UT_TRACE.TRACE('Aplica para el �tem de la orden' ,6);
                        RCSIMPLECONDITION := ITBSIMPLECONDITEM(SBINDEX);
                        TBSIMPLECONDPLAN(NUCOUNT) := RCSIMPLECONDITION;
                        BLHASWITHGEO := TRUE;
                        NUCOUNT := NUCOUNT + 1;
                        UT_TRACE.TRACE('Termina la asociaci�n' ,6);
                    END IF;
                END IF;
                
                SBINDEX := ITBSIMPLECONDITEM.NEXT(SBINDEX);
            END LOOP;
            
            ITBITEMLOCSIMPLE(SBITEMLOC).TBSIMPLECONDPLAN := TBSIMPLECONDPLAN;
        ELSE
            UT_TRACE.TRACE('Ya existe alguna condici�n simple que aplique para el �tem _ ubicaci�n:' || SBITEMLOC ,6);
            
            IF (ITBITEMLOCSIMPLE(SBITEMLOC).TBSIMPLECONDPLAN.COUNT = 0) THEN
                UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessSimpleCondOrderItem Conteo de las condiciones es Cero',5);
                RETURN;
            END IF;
            RCSIMPLECONDITION := ITBITEMLOCSIMPLE(SBITEMLOC).TBSIMPLECONDPLAN(1);
            UT_TRACE.TRACE('La Obtuvo' ,6);
        END IF;

        
        IF (NOT ITBITEMLOCSIMPLE.EXISTS(SBITEMLOC)) THEN
            UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessSimpleCondOrderItem No encontro para el �tem: ' || SBITEMLOC,5);
            RETURN;
        ELSIF (ITBITEMLOCSIMPLE(SBITEMLOC).TBSIMPLECONDPLAN.COUNT = 0) THEN
            UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessSimpleCondOrderItem Conteo de las condiciones es Cero',5);
            RETURN;
        END IF;
        
        NUITEMID := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID;
        UT_TRACE.TRACE('El �tem es: '||NUITEMID,5);
        NUITEMCLASSIF := DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(NUITEMID) ;
        IF  RCSIMPLECONDITION.CERTIFICATE_TYPE_ID = CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE
            AND
            NUITEMCLASSIF IN (8,21)
        THEN
            UT_TRACE.TRACE('No se procesa...es liquidaci�n y clasificaci�n 8 � 21',10);
            RETURN;
        END IF;
        
        IF  IBLHASADJUSTACT AND (ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).OUT_ = GE_BOCONSTANTS.CSBNO) AND ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).VALUEADJUST  = 1  THEN
            UT_TRACE.TRACE('Usa la actividad de ajuste' ,6);
            ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ASSIGNED_ITEM_AMOUNT := -1 * ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ASSIGNED_ITEM_AMOUNT;
            ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT    := -1 * ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT;
            ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).VALUEADJUST          := -1;
        END IF;

        
        IF (NOT ITBITEMNOVELSIGN.EXISTS(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID)) THEN
            IF(DACT_ITEM_NOVELTY.FBLEXIST(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID)) THEN
                ITBITEMNOVELSIGN(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID).BLISNOVELTY := TRUE;
                ITBITEMNOVELSIGN(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID).INUSIGN     := DACT_ITEM_NOVELTY.FNUGETLIQUIDATION_SIGN(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID);
            ELSE
                ITBITEMNOVELSIGN(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID).BLISNOVELTY := FALSE;
            END IF;
        END IF;

        
        IF(ITBITEMNOVELSIGN(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID).BLISNOVELTY) THEN
            UT_TRACE.TRACE('Es una novedad' ,6);
            
            ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).NOVELTY_SIGN := ITBITEMNOVELSIGN(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID).INUSIGN;
             
            IF(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).NOVELTY_SIGN < 0 AND ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT > 0)THEN
                ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT  := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT * -1;
            END IF;
            
            IF CT_BCNOVELTY.FBLISREVERTORDER(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ORDER_ID) THEN
                UT_TRACE.TRACE('de Reversi�n' ,6);
                IF(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).NOVELTY_SIGN > 0 AND ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT > 0)THEN
                    ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT  := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT * -1;
                END IF;

                IF(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).NOVELTY_SIGN < 0 AND ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT < 0)THEN
                    ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT  := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT * -1;

                END IF;

            END IF;

        END IF;
        
        
        IF (
            RCSIMPLECONDITION.CERTIFICATE_TYPE_ID = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE
        AND
            NOT IBLHASCONSIGNACT
            )
        THEN
            UT_TRACE.TRACE('Es facturaci�n' ,6);
            IF ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEM_CLASSIF_ID NOT IN (OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY,
                                                    OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF,
                                                    CT_BOCONSTANTS.FNUGETOBLIGATIONSITEMCLASSIF) THEN

                NUAMOUNT         := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT;
                NUORIGINALAMOUNT := NUAMOUNT;

                CT_BOLIQUIDATIONSUPPORT.PROCESSCONSIGNMENT
                (
                    IRCOPERUNIT.OPERATING_UNIT_ID,
                    ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID,
                    NUAMOUNT
                );

                
                IF (NUAMOUNT <> NUORIGINALAMOUNT) THEN
                    
                    ERRORS.SETERROR
                    (
                        8602,
                        TO_CHAR(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID)||'|'||TO_CHAR(IRCORDER.ORDER_ID)||'|'||TO_CHAR(NUORIGINALAMOUNT)||'|'||TO_CHAR(NUAMOUNT)
                    );
                    
                    CT_BOPROCESSLOG.REGISTERPROCESSLOG
                    (
                        INUCONTRACTID,
                        INUPERIODID,
                        IDTBREAKDATE,
                        IRCORDER.ORDER_ID,
                        ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID,
                        RCSIMPLECONDITION.CONDITION_BY_PLAN_ID
                    );

                    ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT := NUAMOUNT;
                END IF;
            END IF;
        END IF;
        
        UT_TRACE.TRACE('Se arma el registro' ,6);
        
        RCCERTDETAIL.ID_DETALLE_ACTA        := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
        RCCERTDETAIL.REFERENCE_ITEM_ID      := RCSIMPLECONDITION.ITEMS_ID;
        RCCERTDETAIL.CONDITION_BY_PLAN_ID   := RCSIMPLECONDITION.CONDITION_BY_PLAN_ID;
        RCCERTDETAIL.ID_ITEMS               := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID;
        RCCERTDETAIL.DESCRIPCION_ITEMS      := TO_CHAR(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID) || ' - ' || ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).DESCRIPTION;
        RCCERTDETAIL.CANTIDAD               := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT;
        RCCERTDETAIL.TIPO_GENERACION        := CT_BOCONSTANTS.FSBGETAUTODETGENTYPE;
        RCCERTDETAIL.ID_UNIDAD_MEDIDA       := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).MEASURE_UNIT_ID;
        RCCERTDETAIL.ID_ORDEN               := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ORDER_ID;
        RCCERTDETAIL.GEOGRAP_LOCATION_ID    := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).GEOGRAP_LOCATION_ID;
        
        
        RCCERTDETAIL.AFFECT_CONTRACT_VAL    := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).AFFECT_CONTRACT_VAL;
        
        NUPLANITEMBASE := UT_STRING.FNUGETHASH_STRING(TO_CHAR(RCSIMPLECONDITION.CONDITION_BY_PLAN_ID) || '_' || TO_CHAR(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID) || '_' || SBADMINBASE);

        
        
        IF ITBCERTDETAILSBYSIMPLE.EXISTS(NUPLANITEMBASE) THEN
            
            UT_TRACE.TRACE('Para otras �rdenes se han generado registros para el mismo �tem: ' ||  NUPLANITEMBASE,6);
            
            
            IF (NOT ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).TBORDERS.EXISTS(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ORDER_ID)) THEN
                ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).TBORDERS(IRCORDER.ORDER_ID) := IRCORDER.ORDER_ID;
            END IF;
            
            
            
            RCCERTDETAIL.ID_ACTA                    := ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).CERTIFICATE_ID;
                
            
            ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).QUANTITY_ACUM     := ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).QUANTITY_ACUM + ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT;
            ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).VALUE_ACUM        := ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).VALUE_ACUM + NVL(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).REFERENCE_VALUE, 0);
            
            
            ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).TBCERTDETAILS(ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).TBCERTDETAILS.COUNT + 1) := RCCERTDETAIL;
            
            
            ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).TBORDERITEMS(ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE).TBORDERITEMS.COUNT + 1) := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX);

        ELSE
            UT_TRACE.TRACE('Para otras �rdenes NO se han generado registros para el mismo �tem: ' ||  NUPLANITEMBASE,6);
            
            CT_BOLIQUIDATIONSUPPORT.GETCERTIFICATE
            (
                RCSIMPLECONDITION.CERTIFICATE_TYPE_ID,
                RCSIMPLECONDITION.CONDITION_BY_PLAN_ID,
                INUPERIODID,
                INUCONTRACTID,
                IDTBREAKDATE,
                IRCORDER.ORDER_ID,
                ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID,
                IRCOPERUNIT,
                ITBNOADMINBASELIQCERTIFS,
                ITBNOADMINBASEBILLCERTIFS,
                ITBLIQCERTIFICATES,
                ITBBILLCERTIFICATES,
                NUCERTIFICATEID,
                BLNOADMINBASELIQCERTIF,
                BLNOADMINBASEBILLCERTIF,
                BLLIQCERTIFICATE,
                BLBILLCERTIFICATE
            );
                
            
            
            RCCERTDETAIL.ID_ACTA                 := NUCERTIFICATEID;
                
            
            
            TBCERTDETAILS(1) := RCCERTDETAIL;
            
            
            RCCERTDETAILSBYSIMPLE.CERTIFICATE_ID       := NUCERTIFICATEID;
            RCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS   := ITBITEMLOCSIMPLE(SBITEMLOC).TBSIMPLECONDPLAN;
                
            
            IF (NOT RCCERTDETAILSBYSIMPLE.TBORDERS.EXISTS(IRCORDER.ORDER_ID)) THEN
                RCCERTDETAILSBYSIMPLE.TBORDERS(IRCORDER.ORDER_ID) := IRCORDER.ORDER_ID;
            END IF;

            
            RCCERTDETAILSBYSIMPLE.TBCERTDETAILS        := TBCERTDETAILS;
                
            
            RCCERTDETAILSBYSIMPLE.TBORDERITEMS(1) := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX);
                
            
            RCCERTDETAILSBYSIMPLE.QUANTITY_ACUM        := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).LEGAL_ITEM_AMOUNT;
            RCCERTDETAILSBYSIMPLE.VALUE_ACUM           := NVL(ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).REFERENCE_VALUE, 0);

            
            ITBCERTDETAILSBYSIMPLE(NUPLANITEMBASE) := RCCERTDETAILSBYSIMPLE;
                
        END IF;

        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessSimpleCondOrderItem',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                IRCORDER.ORDER_ID,
                ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID,
                RCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            ROLLBACKCREATEDCERT;
            UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessSimpleCondOrderItem Error',5);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                IRCORDER.ORDER_ID,
                ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(INUITEMCACHEINDEX).ITEMS_ID,
                RCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
            ROLLBACKCREATEDCERT;
            UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessSimpleCondOrderItem Error',5);
    END PROCESSSIMPLECONDORDERITEM;
    
    



















































    PROCEDURE PROCESSORDERSIMPLECOND
    (
        IRCORDER                    IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYORDERSINFO,
        ITBSIMPLECONDITEM           IN OUT NOCOPY  DACT_SIMPLE_CONDITION.TYTBITEMS_ID,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        INUADMINBASEID	            IN             GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        INUCONTRACTORID             IN             GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        ITBNOADMINBASELIQCERTIFS    IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES          IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES         IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY  BOOLEAN,
        ITBORDERITEMSINCACHE        IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMS,
        ITBOPERUNITSINCACHE         IN OUT NOCOPY  DAOR_OPERATING_UNIT.TYTBOR_OPERATING_UNIT,
        ITBCERTDETAILSBYITEM        IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTDETAILSBYSIMPLE,
        ITBITEMLOCSIMPLE            IN OUT NOCOPY  CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN_VARCHAR,
        ITBITEMNOVELSIGN            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBNOVELTYITEMS,
        ITBSIMPLECONDPLANCACHE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBSIMPLECONDPLANCACHE
    )
    IS
        RCOPERUNIT              DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;
        
        TBORDERITEMS            CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMSINFO;
        RCREGORDERITEM          CT_BCLIQUIDATIONSUPPORT.TYORDERITEMS;
        
        TBSIMPLECONDITEM        CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN;
        
        NUSIMPLEITEMINDEX       PLS_INTEGER;
        NUITEMINDEX             PLS_INTEGER;

    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationProcess.ProcessOrderSimpleCond',4);

        RCOPERUNIT := ITBOPERUNITSINCACHE(IRCORDER.OPERATING_UNIT_ID);

        
        IF  (NOT ITBORDERITEMSINCACHE.EXISTS(IRCORDER.ORDER_ID)) THEN
            
            CT_BCLIQUIDATIONSUPPORT.GETORDERITEMS
            (
                IRCORDER.ORDER_ID,
                IRCORDER.REAL_GEOGRA_LOCA,
                TBORDERITEMS
            );

            RCREGORDERITEM.TBORDERITEMSINCACHE  := TBORDERITEMS;
            ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID)    := RCREGORDERITEM;
        END IF;

        
        NUITEMINDEX := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE.FIRST;

        LOOP
            EXIT WHEN NUITEMINDEX IS NULL;

            
            IF ((ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE(NUITEMINDEX).ITEMS_ID NOT IN(CNUCONSIGMENT_ACTIVITY,
                                                     CNUADJUSTMENT_ACTIVITY))) THEN
                
                NUSIMPLEITEMINDEX := ITBSIMPLECONDITEM.FIRST;
                LOOP
                    EXIT WHEN NUSIMPLEITEMINDEX IS NULL;
                    
                    UT_TRACE.TRACE('Se procesa el �tem de la orden',5);
                    
                    CT_BOLIQUIDATIONPROCESS.PROCESSSIMPLECONDORDERITEM
                    (
                        ITBORDERITEMSINCACHE,
                        NUITEMINDEX,
                        ITBSIMPLECONDITEM(NUSIMPLEITEMINDEX),
                        ITBSIMPLECONDPLANCACHE(ITBSIMPLECONDITEM(NUSIMPLEITEMINDEX)),
                        IDTBREAKDATE,
                        INUCONTRACTID,
                        INUPERIODID,
                        INUCONTRACTORID,
                        RCOPERUNIT,
                        IRCORDER,
                        ITBNOADMINBASELIQCERTIFS,
                        ITBNOADMINBASEBILLCERTIFS,
                        ITBLIQCERTIFICATES,
                        ITBBILLCERTIFICATES,
                        IBLNEWOBLIGATIONS,
                        ITBCERTDETAILSBYITEM,
                        ITBITEMLOCSIMPLE,
                        IRCORDER.HASADJUSTMENTACTIVITY = GE_BOCONSTANTS.CSBYES,
                        IRCORDER.HASCONSIGMENT_ACTIVITY = GE_BOCONSTANTS.CSBYES,
                        ITBITEMNOVELSIGN
                    );
                    
                    NUSIMPLEITEMINDEX := ITBSIMPLECONDITEM.NEXT(NUSIMPLEITEMINDEX);
                    
                END LOOP;
            END IF;
            
            NUITEMINDEX := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE.NEXT(NUITEMINDEX);
        END LOOP;

        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessOrderSimpleCond',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessOrderSimpleCond Error',4);
            RETURN;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessOrderSimpleCond Error',4);
            RETURN;
    END PROCESSORDERSIMPLECOND;

    
















    PROCEDURE DOWNLOADCERTIFICATEDETAIL
    IS
        SBITEMS_ID            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCANTIDAD            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBVALOR_UNITARIO      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBVALOR_TOTAL         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBID_LISTA_UNIT_COSTO GE_BOINSTANCECONTROL.STYSBVALUE;
        SBID_ORDEN            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBID_UNIDAD_MEDIDA    GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPORCEN_CUMPLIMIENTO GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPORCEN_PONDERADO    GE_BOINSTANCECONTROL.STYSBVALUE;
        SBREFITEMID           GE_BOINSTANCECONTROL.STYSBVALUE;
        SBBASE_VALUE          GE_BOINSTANCECONTROL.STYSBVALUE;

        RCCERTIFICATEDETAIL DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;
    BEGIN
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'ID_ITEMS',
                                                  SBITEMS_ID);

        RCCERTIFICATEDETAIL.ID_ITEMS := TO_NUMBER(SBITEMS_ID);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'DESCRIPCION_ITEMS',
                                                  RCCERTIFICATEDETAIL.DESCRIPCION_ITEMS);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'CANTIDAD',
                                                  SBCANTIDAD);

        RCCERTIFICATEDETAIL.CANTIDAD := TO_NUMBER(SBCANTIDAD);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'VALOR_UNITARIO',
                                                  SBVALOR_UNITARIO);

        RCCERTIFICATEDETAIL.VALOR_UNITARIO := TO_NUMBER(SBVALOR_UNITARIO);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'VALOR_TOTAL',
                                                  SBVALOR_TOTAL);

        RCCERTIFICATEDETAIL.VALOR_TOTAL := TO_NUMBER(SBVALOR_TOTAL);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'ID_LISTA_UNIT_COSTO',
                                                  SBID_LISTA_UNIT_COSTO);

        RCCERTIFICATEDETAIL.ID_LISTA_UNIT_COSTO := TO_NUMBER(SBID_LISTA_UNIT_COSTO);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'ID_ORDEN',
                                                  SBID_ORDEN);

        RCCERTIFICATEDETAIL.ID_ORDEN := TO_NUMBER(SBID_ORDEN);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'ID_UNIDAD_MEDIDA',
                                                  SBID_UNIDAD_MEDIDA);

        RCCERTIFICATEDETAIL.ID_UNIDAD_MEDIDA := TO_NUMBER(SBID_UNIDAD_MEDIDA);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'PORCEN_CUMPLIMIENTO',
                                                  SBPORCEN_CUMPLIMIENTO);

        RCCERTIFICATEDETAIL.PORCEN_CUMPLIMIENTO := TO_NUMBER(SBPORCEN_CUMPLIMIENTO);

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'PORCEN_PONDERADO',
                                                  SBPORCEN_PONDERADO);

        RCCERTIFICATEDETAIL.PORCEN_PONDERADO := TO_NUMBER(SBPORCEN_PONDERADO);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'REFERENCE_ITEM_ID',
                                                  SBREFITEMID);

        RCCERTIFICATEDETAIL.REFERENCE_ITEM_ID  := TO_NUMBER(SBREFITEMID);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                  NULL,
                                                  'GE_DETALLE_ACTA',
                                                  'BASE_VALUE',
                                                  SBBASE_VALUE);

        RCCERTIFICATEDETAIL.BASE_VALUE := TO_NUMBER(SBBASE_VALUE);
        
        
        
        RCCERTIFICATEDETAIL.AFFECT_CONTRACT_VAL := 'Y';
        IF (DACT_EXCL_ITEM_CONT_VAL.FBLEXIST(RCCERTIFICATEDETAIL.ID_ITEMS) ) THEN
            RCCERTIFICATEDETAIL.AFFECT_CONTRACT_VAL := 'N';
        END IF;

        CT_BOCERTIFICATECONTROL.ADDCERTIFICATEDETAIL(RCCERTIFICATEDETAIL);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DOWNLOADCERTIFICATEDETAIL;

    










































    PROCEDURE PROCESSORDERCONDITION
    (
        IRCORDER                        IN      CT_BCLIQUIDATIONSUPPORT.TYORDERSINFO,
        INUITEMID                       IN      OR_ORDER_ITEMS.ITEMS_ID%TYPE,
        IRCOPERUNIT                     IN      DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT,
        INUCONDPLANID                   IN      CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        IDTBREAKDATE                    IN      GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID                   IN      GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                    IN      GE_ACTA.ID_PERIODO%TYPE,
        INUADMINBASEID	                IN      GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        IRCCONTRACT                     IN      DAGE_CONTRATO.STYGE_CONTRATO,
        INUCONTRACTORINSTANCE           IN OUT NOCOPY  GE_BOINSTANCECONTROL.STYNUINDEX,
        ITBNOADMINBASELIQCERTIFS        IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS       IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES              IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES             IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        IBLNEWOBLIGATIONS               IN OUT NOCOPY  BOOLEAN,
        ITBORDERITEMSINCACHE            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMS,
        ITBITEMSCACHE                   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBITEMSCACHE,
        IRCCONDITION                    IN      CT_BCLIQUIDATIONSUPPORT.TYFORMCONDITION,
        ONUCERTIFICATEID                OUT     GE_ACTA.ID_ACTA%TYPE,
        ITBITEMNOVELSIGN                IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBNOVELTYITEMS,
        ITBORDERWITHCERT                IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER,
        ITBOBJECTSBYPERIOD              IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBOBJECTSBYPERIOD
    )
    IS
    
        RCOBJECTIVEPERI         DACT_OBJECTIVES_PERI.STYCT_OBJECTIVES_PERI;
        
        SBOBJECTIVEPERI         CT_BCLIQUIDATIONSUPPORT.TYIDXOBJBYPER;
        
        NUSTATEMENTERROR        GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBSTATEMENTERROR        GE_ERROR_LOG.DESCRIPTION%TYPE;
        
        SBDETAILITEMSID         GE_BOINSTANCECONTROL.STYSBVALUE;
        
        NUINDEX                 NUMBER;

        NUCERTIFICATEID         GE_ACTA.ID_ACTA%TYPE;
        
        NUITEMSID               GE_ITEMS.ITEMS_ID%TYPE;
        NUITEMCLASSIFID         GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE;
        NUAMOUNT                GE_DETALLE_ACTA.CANTIDAD%TYPE;
        NUORIGINALAMOUNT        GE_DETALLE_ACTA.CANTIDAD%TYPE;
        
        RCITEM                  DAGE_ITEMS.STYGE_ITEMS;
        
        BLNOADMINBASELIQCERTIF  BOOLEAN := FALSE;
        BLNOADMINBASEBILLCERTIF BOOLEAN := FALSE;
        BLLIQCERTIFICATE        BOOLEAN := FALSE;
        BLBILLCERTIFICATE       BOOLEAN := FALSE;
        BLINCLUYEITEM           BOOLEAN := TRUE;
        
        NUSIGN                  CT_ITEM_NOVELTY.LIQUIDATION_SIGN%TYPE;
        
        PROCEDURE ROLLBACKCREATEDCERT
        IS
        BEGIN
            IF (BLNOADMINBASELIQCERTIF) THEN
                ITBNOADMINBASELIQCERTIFS.DELETE('-');
            ELSIF (BLLIQCERTIFICATE) THEN
                ITBLIQCERTIFICATES.DELETE(IRCOPERUNIT.ADMIN_BASE_ID);
            ELSIF (BLNOADMINBASEBILLCERTIF) THEN
                ITBNOADMINBASEBILLCERTIFS.DELETE('-');
            ELSIF (BLBILLCERTIFICATE) THEN
                ITBBILLCERTIFICATES.DELETE(IRCOPERUNIT.ADMIN_BASE_ID);
            END IF;
        END ROLLBACKCREATEDCERT;

    BEGIN
        UT_TRACE.TRACE('Inicio CT_BOLiquidationProcess.ProcessOrderCondition',2);

        ONUCERTIFICATEID := NULL;

        
        CT_BOLIQUIDATIONSUPPORT.LOADCONDITION
        (
            INUCONTRACTORINSTANCE,
            IRCCONDITION
        );
        
        
        CT_BOLIQUIDATIONSUPPORT.LOADCONDITIONBYPLAN
        (
            INUCONTRACTORINSTANCE,
            IRCCONDITION
        );
        
        SBOBJECTIVEPERI := TO_CHAR(IRCCONDITION.CONDITIONS_ID) || '_' || TO_CHAR(INUPERIODID);
        
        IF ITBOBJECTSBYPERIOD.EXISTS(SBOBJECTIVEPERI) THEN
            RCOBJECTIVEPERI := ITBOBJECTSBYPERIOD(SBOBJECTIVEPERI);
        
        ELSE
            
            CT_BCOBJECTIVESBYPERIOD.GETCONDOBJBYPERIOD
            (
                IRCCONDITION.CONDITIONS_ID,
                INUPERIODID,
                RCOBJECTIVEPERI
            );
            ITBOBJECTSBYPERIOD(SBOBJECTIVEPERI) := RCOBJECTIVEPERI;
        END IF;
        
        
        CT_BOLIQUIDATIONSUPPORT.LOADOBJECTIVEBYPERIOD
        (
            INUCONTRACTORINSTANCE,
            RCOBJECTIVEPERI
        );

        
        CT_BOCERTIFICATECONTROL.BLINSERTDETAILS := TRUE;
        
        
        GR_BOCONFIG_EXPRESSION.EXECUTE
        (
            IRCCONDITION.CONFIG_EXPRESSION_ID,
            NUSTATEMENTERROR,
            SBSTATEMENTERROR
        );
        
        
        IF (NUSTATEMENTERROR <> GE_BOCONSTANTS.CNUSUCCESS) THEN
            ERRORS.SETERROR(NUSTATEMENTERROR);
            ERRORS.SETMESSAGE(SBSTATEMENTERROR);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (CT_BOCERTIFICATECONTROL.BLINSERTDETAILS) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE
            (
                CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                NULL,
                'GE_DETALLE_ACTA',
                'ID_ITEMS',
                SBDETAILITEMSID
            );
            
            
            
            IF (SBDETAILITEMSID IS NOT NULL) THEN
                CT_BOLIQUIDATIONPROCESS.DOWNLOADCERTIFICATEDETAIL;
            END IF;
            
            IF (CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.COUNT > 0) THEN
                
                CT_BOLIQUIDATIONSUPPORT.GETCERTIFICATE
                (
                    IRCCONDITION.CERTIFICATE_TYPE_ID,
                    IRCCONDITION.CONDITION_BY_PLAN_ID,
                    INUPERIODID,
                    INUCONTRACTID,
                    IDTBREAKDATE,
                    IRCORDER.ORDER_ID,
                    INUITEMID,
                    IRCOPERUNIT,
                    ITBNOADMINBASELIQCERTIFS,
                    ITBNOADMINBASEBILLCERTIFS,
                    ITBLIQCERTIFICATES,
                    ITBBILLCERTIFICATES,
                    NUCERTIFICATEID,
                    BLNOADMINBASELIQCERTIF,
                    BLNOADMINBASEBILLCERTIF,
                    BLLIQCERTIFICATE,
                    BLBILLCERTIFICATE
                );
                
                
                IF (IRCCONDITION.CERTIFICATE_TYPE_ID = CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE) THEN
                
                    
                    NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.FIRST;

                    LOOP
                        EXIT WHEN NUINDEX IS NULL;
                        
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_DETALLE_ACTA  := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ACTA          := NUCERTIFICATEID;            
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ORDEN         := IRCORDER.ORDER_ID;
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).TIPO_GENERACION  := CT_BOCONSTANTS.FSBGETAUTODETGENTYPE;
                        
                        IF(IRCORDER.ORDER_ID IS NOT NULL)THEN
                            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).GEOGRAP_LOCATION_ID := IRCORDER.REAL_GEOGRA_LOCA;
                        END IF;
                        
                        IF (CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID IS NULL) THEN
                            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID        := IRCCONDITION.CONDITIONS_ID;
                            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITION_BY_PLAN_ID := IRCCONDITION.CONDITION_BY_PLAN_ID;
                        END IF;
                        
                        
                        IF (NOT ITBITEMNOVELSIGN.EXISTS(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS)) THEN
                            IF(DACT_ITEM_NOVELTY.FBLEXIST(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS)) THEN
                                ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).BLISNOVELTY := TRUE;
                                ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).INUSIGN     := DACT_ITEM_NOVELTY.FNUGETLIQUIDATION_SIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS);
                            ELSE
                                ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).BLISNOVELTY := FALSE;
                            END IF;
                        END IF;

                        
                        IF(ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).BLISNOVELTY) THEN

                            
                            NUSIGN := ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).INUSIGN;
                            
                            IF CT_BCNOVELTY.FBLISREVERTORDER(IRCORDER.ORDER_ID) THEN
                                NUSIGN := NUSIGN * -1;
                                CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CANTIDAD := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CANTIDAD * -1;
                            END IF;
                            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).VALOR_TOTAL := NUSIGN * CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).VALOR_TOTAL;
                        END IF;

                        NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.NEXT(NUINDEX);
                    END LOOP;
                    
                
                ELSIF (IRCCONDITION.CERTIFICATE_TYPE_ID = CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE) THEN
                
                    
                    NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.FIRST;
                    LOOP
                        EXIT WHEN NUINDEX IS NULL;
                        
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_DETALLE_ACTA  := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ACTA          := NUCERTIFICATEID;
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ORDEN         := IRCORDER.ORDER_ID;
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).TIPO_GENERACION  := CT_BOCONSTANTS.FSBGETAUTODETGENTYPE;
                        IF (CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID IS NULL) THEN
                            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID        := IRCCONDITION.CONDITIONS_ID;
                            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITION_BY_PLAN_ID := IRCCONDITION.CONDITION_BY_PLAN_ID;
                        END IF;
                        
                        
                        IF (NOT ITBITEMNOVELSIGN.EXISTS(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS)) THEN
                            IF(DACT_ITEM_NOVELTY.FBLEXIST(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS)) THEN
                                ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).BLISNOVELTY := TRUE;
                                ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).INUSIGN     := DACT_ITEM_NOVELTY.FNUGETLIQUIDATION_SIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS);
                            ELSE
                                ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).BLISNOVELTY := FALSE;
                            END IF;
                        END IF;

                        
                        IF(ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).BLISNOVELTY) THEN

                            
                            NUSIGN := ITBITEMNOVELSIGN(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS).INUSIGN;
                            
                            IF CT_BCNOVELTY.FBLISREVERTORDER(IRCORDER.ORDER_ID) THEN
                                NUSIGN := NUSIGN * -1;
                                CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CANTIDAD := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CANTIDAD * -1;
                            END IF;
                            CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).VALOR_TOTAL := NUSIGN * CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).VALOR_TOTAL;
                        END IF;

                        
                        
                        
                        
                        NUITEMSID := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ITEMS;
                        IF (ITBITEMSCACHE.EXISTS(NUITEMSID)) THEN
                            NUITEMCLASSIFID := ITBITEMSCACHE(NUITEMSID).ITEM_CLASSIF_ID;
                        ELSE
                            DAGE_ITEMS.GETRECORD(NUITEMSID,
                                                 RCITEM);
                            ITBITEMSCACHE(NUITEMSID) := RCITEM;
                            NUITEMCLASSIFID := RCITEM.ITEM_CLASSIF_ID;
                        END IF;

                        NUAMOUNT         := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CANTIDAD;
                        NUORIGINALAMOUNT := NUAMOUNT;
                        IF (    (NVL(NUAMOUNT,0) > 0)
                            AND (NUITEMCLASSIFID NOT IN(OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY,
                                                        OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF,
                                                        CT_BOCONSTANTS.FNUGETOBLIGATIONSITEMCLASSIF))
                            AND (NOT(IRCORDER.HASCONSIGMENT_ACTIVITY = GE_BOCONSTANTS.CSBYES))) THEN

                            CT_BOLIQUIDATIONSUPPORT.PROCESSCONSIGNMENT
                            (
                                IRCOPERUNIT.OPERATING_UNIT_ID,
                                NUITEMSID,
                                NUAMOUNT
                            );
                            
                            
                            IF (NUAMOUNT <> NUORIGINALAMOUNT) THEN
                                
                                ERRORS.SETERROR(8602,
                                                NUITEMSID||'|'||IRCORDER.ORDER_ID||'|'||NUORIGINALAMOUNT||'|'||NUAMOUNT);
                                
                                CT_BOPROCESSLOG.REGISTERPROCESSLOG
                                (
                                    INUCONTRACTID,
                                    INUPERIODID,
                                    IDTBREAKDATE,
                                    IRCORDER.ORDER_ID,
                                    NUITEMSID,
                                    IRCCONDITION.CONDITION_BY_PLAN_ID
                                );

                                CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CANTIDAD := NUAMOUNT;
                                CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).VALOR_TOTAL := NUAMOUNT * CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).VALOR_UNITARIO;
                            END IF;
                        END IF;

                        NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.NEXT(NUINDEX);
                    END LOOP;
                
                END IF;
                
                DAGE_DETALLE_ACTA.INSRECORDS(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS);

                
                CT_BOCERTIFICATECONTROL.CLEARCERTIFICATEDETAILS;
                
                
                CT_BOLIQUIDATIONSUPPORT.ASSOCORDERCERTIFICATE
                (
                    IRCORDER.ORDER_ID,
                    NUCERTIFICATEID,
                    ONUCERTIFICATEID,
                    ITBORDERWITHCERT
                );
                
            END IF;
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_DETALLE_ACTA');
            CT_BOLIQUIDATIONSUPPORT.LOADCERTIFICATEDETAIL(INUCONTRACTORINSTANCE);
        ELSE
        
            
            
            
            NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.FIRST;
            LOOP
                EXIT WHEN NUINDEX IS NULL;
                IF (CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID IS NULL) THEN
                    CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID        := IRCCONDITION.CONDITIONS_ID;
                    CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITION_BY_PLAN_ID := IRCCONDITION.CONDITION_BY_PLAN_ID;
                END IF;

                NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.NEXT(NUINDEX);
            END LOOP;
        
        END IF;
        
        
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_OBJECTIVES_PERI');

        
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_CONDITIONS');
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE(CT_BOLIQUIDATIONSUPPORT.CSBCT_CONDITIONS_BY_PLAN);

        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessOrderCondition',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_OBJECTIVES_PERI');
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_CONDITIONS');
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE(CT_BOLIQUIDATIONSUPPORT.CSBCT_CONDITIONS_BY_PLAN);
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                IRCORDER.ORDER_ID,
                INUITEMID,
                IRCCONDITION.CONDITION_BY_PLAN_ID
            );
            ROLLBACKCREATEDCERT;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_OBJECTIVES_PERI');
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_CONDITIONS');
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE(CT_BOLIQUIDATIONSUPPORT.CSBCT_CONDITIONS_BY_PLAN);
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                IRCORDER.ORDER_ID,
                INUITEMID,
                IRCCONDITION.CONDITION_BY_PLAN_ID
            );
            ROLLBACKCREATEDCERT;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSORDERCONDITION;
        
    








































    PROCEDURE PROCESSORDERITEM
    (
        IRCORDERITEM                    IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYORDERITEMSINFO,
        IRCOPERUNIT                     IN             DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT,
        INUCONDPLANID                   IN             CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        IDTBREAKDATE                    IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID                   IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                    IN             GE_ACTA.ID_PERIODO%TYPE,
        INUADMINBASEID	                IN             GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        IRCCONTRACT                     IN             DAGE_CONTRATO.STYGE_CONTRATO,
        INUCONTRACTORINSTANCE           IN OUT NOCOPY  GE_BOINSTANCECONTROL.STYNUINDEX,
        ITBNOADMINBASELIQCERTIFS        IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS       IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES              IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES             IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        IBLNEWOBLIGATIONS               IN OUT NOCOPY  BOOLEAN,
        ITBORDERITEMSINCACHE            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMS,
        ITBCONDITIONSBYITEMCACHE        IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCONDITIONSBYITEMCACHE,
        ITBITEMSCACHE                   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBITEMSCACHE,
        ITBCONDSBYITEMCLASSIFCACHE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCONDITIONSBYITEMCLCACHE,
        ONUCERTIFICATEID                OUT            GE_ACTA.ID_ACTA%TYPE,
        IRCORDER                        IN             CT_BCLIQUIDATIONSUPPORT.TYORDERSINFO,
        ITBITEMNOVELSIGN                IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBNOVELTYITEMS,
        ITBORDERWITHCERT                IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER,
        ITBOBJECTSBYPERIOD              IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBOBJECTSBYPERIOD

    )
    IS
        RCITEM                  DAGE_ITEMS.STYGE_ITEMS;
        RCCONDITION             CT_BCLIQUIDATIONSUPPORT.TYFORMCONDITION;
    BEGIN
        UT_TRACE.TRACE('Inicio CT_BOLiquidationProcess.ProcessOrderItem',2);
        ONUCERTIFICATEID := NULL;
        
        
        IF (ITBCONDITIONSBYITEMCACHE.EXISTS(IRCORDERITEM.ITEMS_ID)) THEN
            RCCONDITION := ITBCONDITIONSBYITEMCACHE(IRCORDERITEM.ITEMS_ID);
        ELSE
            CT_BCCONDITIONS.GETITEMCONDBYCONPLAN
            (
                INUCONDPLANID,
                IRCORDERITEM.ITEMS_ID,
                NULL,
                CT_BOCONSTANTS.FSBGETITEMCONDLEVEL,
                RCCONDITION
            );
            ITBCONDITIONSBYITEMCACHE(IRCORDERITEM.ITEMS_ID) := RCCONDITION;
        END IF;

        
        IF (ITBITEMSCACHE.EXISTS(IRCORDERITEM.ITEMS_ID)) THEN
            RCITEM := ITBITEMSCACHE(IRCORDERITEM.ITEMS_ID);
        ELSE
            DAGE_ITEMS.GETRECORD(IRCORDERITEM.ITEMS_ID, RCITEM);
            ITBITEMSCACHE(IRCORDERITEM.ITEMS_ID) := RCITEM;
        END IF;
        
        
        
        IF (RCCONDITION.CONDITIONS_ID IS NULL) THEN
            IF (ITBCONDSBYITEMCLASSIFCACHE.EXISTS(RCITEM.ITEM_CLASSIF_ID)) THEN
                RCCONDITION := ITBCONDSBYITEMCLASSIFCACHE(RCITEM.ITEM_CLASSIF_ID);
            ELSE
                CT_BCCONDITIONS.GETITEMCLASSIFCONDBYCONPLAN
                (
                    INUCONDPLANID,
                    RCITEM.ITEM_CLASSIF_ID,
                    NULL,
                    CT_BOCONSTANTS.FSBGETITEMCONDLEVEL,
                    RCCONDITION
                );
                ITBCONDSBYITEMCLASSIFCACHE(RCITEM.ITEM_CLASSIF_ID) := RCCONDITION;
            END IF;
        END IF;
        
        
        IF (RCCONDITION.CONDITIONS_ID IS NOT NULL) THEN
            
            CT_BOLIQUIDATIONSUPPORT.LOADORDERITEM
            (
                INUCONTRACTORINSTANCE,
                IRCORDERITEM,
                IRCORDER
            );

            CT_BOLIQUIDATIONSUPPORT.LOADITEM(INUCONTRACTORINSTANCE,RCITEM);

            
            CT_BOCERTIFICATECONTROL.CLEARCERTIFICATEDETAILS;

            
            CT_BOLIQUIDATIONSUPPORT.LOADCERTIFICATEDETAIL(INUCONTRACTORINSTANCE);

            
            CT_BOLIQUIDATIONPROCESS.PROCESSORDERCONDITION
            (
                IRCORDER,
                IRCORDERITEM.ITEMS_ID,
                IRCOPERUNIT,
                INUCONDPLANID,
                IDTBREAKDATE,
                INUCONTRACTID,
                INUPERIODID,
                INUADMINBASEID,
                IRCCONTRACT,
                INUCONTRACTORINSTANCE,
                ITBNOADMINBASELIQCERTIFS,
                ITBNOADMINBASEBILLCERTIFS,
                ITBLIQCERTIFICATES,
                ITBBILLCERTIFICATES,
                IBLNEWOBLIGATIONS,
                ITBORDERITEMSINCACHE,
                ITBITEMSCACHE,
                RCCONDITION,
                ONUCERTIFICATEID,
                ITBITEMNOVELSIGN,
                ITBORDERWITHCERT,
                ITBOBJECTSBYPERIOD
            );

            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_DETALLE_ACTA');

            
             CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ITEMS');

            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('OR_ORDER_ITEMS');
        END IF;

        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessOrderItem',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_DETALLE_ACTA');
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ITEMS');
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('OR_ORDER_ITEMS');
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_DETALLE_ACTA');
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ITEMS');
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('OR_ORDER_ITEMS');
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSORDERITEM;
    
    




















































    PROCEDURE PROCESSORDER
    (
        INUCONDPLANID                   IN              CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        IDTBREAKDATE                    IN              GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID                   IN              GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                    IN              GE_ACTA.ID_PERIODO%TYPE,
        INUADMINBASEID	                IN              GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        IRCCONTRACT                     IN              DAGE_CONTRATO.STYGE_CONTRATO,
        INUCONTRACTORINSTANCE           IN OUT NOCOPY   GE_BOINSTANCECONTROL.STYNUINDEX,
        ITBNOADMINBASELIQCERTIFS        IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS       IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES              IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES             IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        IBLNEWOBLIGATIONS               IN OUT NOCOPY   BOOLEAN,
        ITBORDERITEMSINCACHE            IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMS,
        ITBCONDITIONSBYITEMCACHE        IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCONDITIONSBYITEMCACHE,
        ITBITEMSCACHE                   IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBITEMSCACHE,
        ITBCONDSBYITEMCLASSIFCACHE      IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCONDITIONSBYITEMCLCACHE,
        IRCORDER                        IN              CT_BCLIQUIDATIONSUPPORT.TYORDERSINFO,
        ITBCONDITIONS                   IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS,
        ITBITEMNOVELSIGN                IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBNOVELTYITEMS,
        ITBORDERWITHCERT                IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER,
        IRCOPERATINGUNIT                IN              DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT,
        ITBOBJECTSBYPERIOD              IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBOBJECTSBYPERIOD
    )
    IS
        TBORDERITEMS                    CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMSINFO;
        RCREGORDERITEM                  CT_BCLIQUIDATIONSUPPORT.TYORDERITEMS;

        RCITEM                          DAGE_ITEMS.STYGE_ITEMS;
        
        NUCERTIFICATEID                 GE_ACTA.ID_ACTA%TYPE;
        
        NUORDERITEMINDEX                PLS_INTEGER;
        NUCONDINDEX                     PLS_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicio CT_BOLiquidationProcess.ProcessOrder',2);

        SAVEPOINT SP_ORDER;
        
        
        IF  ITBORDERITEMSINCACHE.EXISTS(IRCORDER.ORDER_ID) THEN
            TBORDERITEMS := ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID).TBORDERITEMSINCACHE;
        ELSE

            
            CT_BCLIQUIDATIONSUPPORT.GETORDERITEMS
            (
                IRCORDER.ORDER_ID,
                IRCORDER.REAL_GEOGRA_LOCA,
                TBORDERITEMS
            );

            RCREGORDERITEM.TBORDERITEMSINCACHE  := TBORDERITEMS;
            ITBORDERITEMSINCACHE(IRCORDER.ORDER_ID)    := RCREGORDERITEM;
        END IF;
        
        
        NUORDERITEMINDEX := TBORDERITEMS.FIRST;
        LOOP
            EXIT WHEN NUORDERITEMINDEX IS NULL;
            
            IF (TBORDERITEMS(NUORDERITEMINDEX).ITEMS_ID NOT IN(CNUCONSIGMENT_ACTIVITY,
                                                     CNUADJUSTMENT_ACTIVITY)) THEN
                
                CT_BOLIQUIDATIONPROCESS.PROCESSORDERITEM
                (
                    TBORDERITEMS(NUORDERITEMINDEX),
                    IRCOPERATINGUNIT,
                    INUCONDPLANID,
                    IDTBREAKDATE,
                    INUCONTRACTID,
                    INUPERIODID,
                    INUADMINBASEID,
                    IRCCONTRACT,
                    INUCONTRACTORINSTANCE,
                    ITBNOADMINBASELIQCERTIFS,
                    ITBNOADMINBASEBILLCERTIFS,
                    ITBLIQCERTIFICATES,
                    ITBBILLCERTIFICATES,
                    IBLNEWOBLIGATIONS,
                    ITBORDERITEMSINCACHE,
                    ITBCONDITIONSBYITEMCACHE,
                    ITBITEMSCACHE,
                    ITBCONDSBYITEMCLASSIFCACHE,
                    NUCERTIFICATEID,
                    IRCORDER,
                    ITBITEMNOVELSIGN,
                    ITBORDERWITHCERT,
                    ITBOBJECTSBYPERIOD
                );

            END IF;
            
            NUORDERITEMINDEX := TBORDERITEMS.NEXT(NUORDERITEMINDEX);
        END LOOP;
        
        BEGIN
            
            CT_BOCERTIFICATECONTROL.CLEARCERTIFICATEDETAILS;

            
            CT_BOLIQUIDATIONSUPPORT.LOADCERTIFICATEDETAIL(INUCONTRACTORINSTANCE);

            
            IF (ITBCONDITIONS.COUNT > 0) THEN
                NUCONDINDEX := ITBCONDITIONS.FIRST;
                
                LOOP
                    EXIT WHEN NUCONDINDEX IS NULL;
                    BEGIN
                        
                        IF (ITBITEMSCACHE.EXISTS(ITBCONDITIONS(NUCONDINDEX).ITEMS_ID)) THEN
                            RCITEM := ITBITEMSCACHE(ITBCONDITIONS(NUCONDINDEX).ITEMS_ID);
                        ELSE
                            DAGE_ITEMS.GETRECORD
                            (
                                ITBCONDITIONS(NUCONDINDEX).ITEMS_ID,
                                RCITEM
                            );
                            ITBITEMSCACHE(ITBCONDITIONS(NUCONDINDEX).ITEMS_ID) := RCITEM;
                        END IF;

                        CT_BOLIQUIDATIONSUPPORT.LOADITEM
                        (
                            INUCONTRACTORINSTANCE,
                            RCITEM
                        );

                        
                        CT_BOLIQUIDATIONPROCESS.PROCESSORDERCONDITION
                        (
                            IRCORDER,
                            ITBCONDITIONS(NUCONDINDEX).ITEMS_ID,
                            IRCOPERATINGUNIT,
                            INUCONDPLANID,
                            IDTBREAKDATE,
                            INUCONTRACTID,
                            INUPERIODID,
                            INUADMINBASEID,
                            IRCCONTRACT,
                            INUCONTRACTORINSTANCE,
                            ITBNOADMINBASELIQCERTIFS,
                            ITBNOADMINBASEBILLCERTIFS,
                            ITBLIQCERTIFICATES,
                            ITBBILLCERTIFICATES,
                            IBLNEWOBLIGATIONS,
                            ITBORDERITEMSINCACHE,
                            ITBITEMSCACHE,
                            ITBCONDITIONS(NUCONDINDEX),
                            NUCERTIFICATEID,
                            ITBITEMNOVELSIGN,
                            ITBORDERWITHCERT,
                            ITBOBJECTSBYPERIOD
                        );

                    EXCEPTION
                        WHEN EX.CONTROLLED_ERROR THEN
                            RAISE EX.CONTROLLED_ERROR;
                        WHEN OTHERS THEN
                            ERRORS.SETERROR;
                            RAISE EX.CONTROLLED_ERROR;
                    END;
                    
                    NUCONDINDEX := ITBCONDITIONS.NEXT(NUCONDINDEX);
                END LOOP;

                 
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ITEMS');
            END IF;

            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_DETALLE_ACTA');

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_ORDER;
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_ORDER;
        	ERRORS.SETERROR;
    END PROCESSORDER;
    
    


























    PROCEDURE PROCESSCERTIFICATECONDITION
    (
        INUCONDPLANID           IN               CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        IDTBREAKDATE            IN               GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID           IN               GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	            IN               GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTORINSTANCE   IN               GE_BOINSTANCECONTROL.STYNUINDEX,
        INUCERTIFICATEID        IN              GE_ACTA.ID_ACTA%TYPE,
        IRCCONDITION            IN              CT_BCLIQUIDATIONSUPPORT.TYFORMCONDITION,
        INUADMINBASEID          IN              GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
        INUPERSONID             IN              GE_PERSON.PERSON_ID%TYPE,
        ITBOBJECTSBYPERIOD      IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBOBJECTSBYPERIOD
    )
    IS
        RCOBJECTIVEPERI         DACT_OBJECTIVES_PERI.STYCT_OBJECTIVES_PERI;
        SBOBJECTIVEPERI         CT_BCLIQUIDATIONSUPPORT.TYIDXOBJBYPER;
        NUCONTRATORID           GE_CONTRATISTA.ID_CONTRATISTA%TYPE;


        NUSTATEMENTERROR        GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBSTATEMENTERROR        GE_ERROR_LOG.DESCRIPTION%TYPE;

        SBDETAILITEMSID         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSUBSCRIBERID          GE_BOINSTANCECONTROL.STYSBVALUE;

        NUSUBCRIBERADDRES       GE_SUBSCRIBER.ADDRESS_ID%TYPE;
        NUGEGRALOCATION         GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;

        NUINDEX NUMBER;

        NUERRORCODE             CT_PROCESS_LOG.ERROR_CODE%TYPE;
        SBERRORMSG              CT_PROCESS_LOG.ERROR_MESSAGE%TYPE;
    BEGIN
    
        
        CT_BOLIQUIDATIONSUPPORT.LOADCONDITION
        (
            INUCONTRACTORINSTANCE,
            IRCCONDITION
        );
        
        
        CT_BOLIQUIDATIONSUPPORT.LOADCONDITIONBYPLAN
        (
            INUCONTRACTORINSTANCE,
            IRCCONDITION
        );
        
        SBOBJECTIVEPERI := TO_CHAR(IRCCONDITION.CONDITIONS_ID) || '_' || TO_CHAR(INUPERIODID);
        
        IF ITBOBJECTSBYPERIOD.EXISTS(SBOBJECTIVEPERI) THEN
            RCOBJECTIVEPERI := ITBOBJECTSBYPERIOD(SBOBJECTIVEPERI);
        
        ELSE
            
            CT_BCOBJECTIVESBYPERIOD.GETCONDOBJBYPERIOD
            (
                IRCCONDITION.CONDITIONS_ID,
                INUPERIODID,
                RCOBJECTIVEPERI
            );
            ITBOBJECTSBYPERIOD(SBOBJECTIVEPERI) := RCOBJECTIVEPERI;
        END IF;
        
         
        NUCONTRATORID:= DAGE_CONTRATO.FNUGETID_CONTRATISTA(INUCONTRACTID);
        
        CT_BOLIQUIDATIONSUPPORT.LOADCONTRACTOR
        (
          INUCONTRACTORINSTANCE,
          NUCONTRATORID

        );
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE
        (
            CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
            NULL,
            'GE_CONTRATISTA',
            'SUBSCRIBER_ID',
            SBSUBSCRIBERID
        );

        
        IF (SBSUBSCRIBERID IS NOT NULL)THEN
            
            NUSUBCRIBERADDRES := DAGE_SUBSCRIBER.FNUGETADDRESS_ID(UT_CONVERT.FNUCHARTONUMBER(SBSUBSCRIBERID));
            
            IF(NUSUBCRIBERADDRES IS NOT NULL)THEN
                NUGEGRALOCATION := GE_BOCERTCONTRATISTA.FNUGETGEOLOCATIONBYADDRESS(NUSUBCRIBERADDRES);
            END IF;

        END IF;

        
        
        CT_BOLIQUIDATIONSUPPORT.LOADOBJECTIVEBYPERIOD
        (
            INUCONTRACTORINSTANCE,
            RCOBJECTIVEPERI
        );
        
        
        CT_BOCERTIFICATECONTROL.BLINSERTDETAILS := TRUE;
        
        
        GR_BOCONFIG_EXPRESSION.EXECUTE
        (
            IRCCONDITION.CONFIG_EXPRESSION_ID,
            NUSTATEMENTERROR,
            SBSTATEMENTERROR
        );
        
        IF (NUSTATEMENTERROR <> GE_BOCONSTANTS.CNUSUCCESS) THEN
            ERRORS.SETERROR(NUSTATEMENTERROR);
            ERRORS.SETMESSAGE(SBSTATEMENTERROR);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (CT_BOCERTIFICATECONTROL.BLINSERTDETAILS) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                                                      NULL,
                                                      'GE_DETALLE_ACTA',
                                                      'ID_ITEMS',
                                                      SBDETAILITEMSID);

            
            
            IF (SBDETAILITEMSID IS NOT NULL) THEN
                CT_BOLIQUIDATIONPROCESS.DOWNLOADCERTIFICATEDETAIL;
            END IF;

            
            CT_BOLIQUIDATIONSUPPORT.DELUNNECESARYDETAILS
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                INUCERTIFICATEID,
                INUADMINBASEID,
                INUPERSONID
            );

            
            IF (CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.COUNT > 0) THEN
                
                NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.FIRST;
                LOOP
                    EXIT WHEN NUINDEX IS NULL;
                    
                    CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_DETALLE_ACTA  := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
                    CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).ID_ACTA          := INUCERTIFICATEID;
                    CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).TIPO_GENERACION  := CT_BOCONSTANTS.FSBGETAUTODETGENTYPE;
                    CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).GEOGRAP_LOCATION_ID  := NUGEGRALOCATION;

                    
                    
                    IF (CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID IS NULL) THEN
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID        := IRCCONDITION.CONDITIONS_ID;
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITION_BY_PLAN_ID := IRCCONDITION.CONDITION_BY_PLAN_ID;
                    END IF;

                    NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.NEXT(NUINDEX);
                END LOOP;

                
                DAGE_DETALLE_ACTA.INSRECORDS(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS);

                
                CT_BOCERTIFICATECONTROL.CLEARCERTIFICATEDETAILS;

                
                NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS.FIRST;
                LOOP
                    EXIT WHEN NUINDEX IS NULL;
                    
                    CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).CERTIFICATE_ID       := INUCERTIFICATEID;
                    CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).VERIFICATION_DATE    := NULL;

                    
                    IF (NOT(DACT_ORDER_CERTIFICA.FBLEXIST(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).ORDER_ID,
                                                          CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX).CERTIFICATE_ID))) THEN
                        DACT_ORDER_CERTIFICA.INSRECORD(CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS(NUINDEX));
                    END IF;

                    NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFICATEORDERS.NEXT(NUINDEX);
                END LOOP;

                
                CT_BOCERTIFICATECONTROL.CLEARCERTIFICATEORDERS;
            END IF;

            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_DETALLE_ACTA');
            CT_BOLIQUIDATIONSUPPORT.LOADCERTIFICATEDETAIL
            (
                INUCONTRACTORINSTANCE
            );
        ELSE
            
            

            
            NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.FIRST;
            LOOP
                EXIT WHEN NUINDEX IS NULL;
                IF (CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID IS NULL) THEN
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITIONS_ID        := IRCCONDITION.CONDITIONS_ID;
                        CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS(NUINDEX).CONDITION_BY_PLAN_ID := IRCCONDITION.CONDITION_BY_PLAN_ID;
                    END IF;

                NUINDEX := CT_BOCERTIFICATECONTROL.TBGLOBALCERTIFDETAILS.NEXT(NUINDEX);
            END LOOP;
        END IF;

        
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_OBJECTIVES_PERI');

        
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_CONDITIONS');
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE(CT_BOLIQUIDATIONSUPPORT.CSBCT_CONDITIONS_BY_PLAN);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
                
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_OBJECTIVES_PERI');
                
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_CONDITIONS');
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE(CT_BOLIQUIDATIONSUPPORT.CSBCT_CONDITIONS_BY_PLAN);
                
                ERRORS.GETERROR(NUERRORCODE,
                                SBERRORMSG);
    			ERRORS.SETMESSAGE('Se present� un error al procesar la condici�n '||IRCCONDITION.CONDITIONS_ID||
                                  ' para el acta '||INUCERTIFICATEID||' - Detalle del error: ['||SBERRORMSG||']');
                CT_BOPROCESSLOG.REGISTERPROCESSLOG(INUCONTRACTID,
                                                   INUPERIODID,
                                                   IDTBREAKDATE,
                                                   NULL,
                                                   IRCCONDITION.ITEMS_ID,
                                                   IRCCONDITION.CONDITION_BY_PLAN_ID);
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_OBJECTIVES_PERI');
                
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_CONDITIONS');
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE(CT_BOLIQUIDATIONSUPPORT.CSBCT_CONDITIONS_BY_PLAN);
                
                ERRORS.GETERROR(NUERRORCODE,
                                SBERRORMSG);
    			ERRORS.SETMESSAGE('Se present� un error al procesar la condici�n '||IRCCONDITION.CONDITIONS_ID||
                                  ' para el acta '||INUCERTIFICATEID||' - Detalle del error: ['||SBERRORMSG||']');
                CT_BOPROCESSLOG.REGISTERPROCESSLOG(INUCONTRACTID,
                                                   INUPERIODID,
                                                   IDTBREAKDATE,
                                                   NULL,
                                                   IRCCONDITION.ITEMS_ID,
                                                   IRCCONDITION.CONDITION_BY_PLAN_ID);
                RAISE EX.CONTROLLED_ERROR;
    END PROCESSCERTIFICATECONDITION;
    
    

























    PROCEDURE PROCESSCERTIFICATE
    (
        IDTBREAKDATE            IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID           IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	            IN             GE_ACTA.ID_PERIODO%TYPE,
        INUCONDPLANID           IN             CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        INUCONTRACTORINSTANCE   IN             GE_BOINSTANCECONTROL.STYNUINDEX,
        ITBITEMSCACHE           IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBITEMSCACHE,
        INUCERTIFICATEID        IN             GE_ACTA.ID_ACTA%TYPE,
        INUADMINBASEID          IN             GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE,
        ITBCONDITIONS           IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS,
        ITBOBJECTSBYPERIOD      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBOBJECTSBYPERIOD,
        INUPERSONID             IN             GE_PERSON.PERSON_ID%TYPE DEFAULT NULL,
        IBLSUCCESSLOG           IN             BOOLEAN DEFAULT TRUE
    )
    IS
        RCITEM          DAGE_ITEMS.STYGE_ITEMS;

        NUENTITY        GE_BOINSTANCECONTROL.STYNUINDEX;

        RCCERTIFICATE   DAGE_ACTA.STYGE_ACTA;
        NUCONDINDEX     PLS_INTEGER;
    BEGIN
        SAVEPOINT SP_CERTIFICATE;
        
        
        IF (ITBCONDITIONS.COUNT > 0) THEN
            BEGIN
                
                GE_BOINSTANCECONTROL.ADDENTITYSTACK
                (
                    INUCONTRACTORINSTANCE,
                    CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                    NULL,
                    'GE_ACTA',
                    NULL,
                    NUENTITY
                );

                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                (
                    CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                    NULL,
                    'GE_ACTA',
                    'ID_ACTA',
                    TO_CHAR(INUCERTIFICATEID),
                    TRUE
                );

                DAGE_ACTA.GETRECORD(INUCERTIFICATEID, RCCERTIFICATE);

                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                (
                    CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                    NULL,
                    'GE_ACTA',
                    'FECHA_CREACION',
                    TO_CHAR(RCCERTIFICATE.FECHA_CREACION,UT_DATE.FSBDATE_FORMAT),
                    TRUE
                );

                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                (
                    CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                    NULL,
                    'GE_ACTA',
                    'FECHA_INICIO',
                    TO_CHAR(RCCERTIFICATE.FECHA_INICIO,
                    UT_DATE.FSBDATE_FORMAT),
                    TRUE
                );

                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                (
                    CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                    NULL,
                    'GE_ACTA',
                    'FECHA_FIN',
                    TO_CHAR(RCCERTIFICATE.FECHA_FIN, UT_DATE.FSBDATE_FORMAT),
                    TRUE
                );

                
                GE_BOINSTANCECONTROL.ADDENTITYSTACK
                (
                    INUCONTRACTORINSTANCE,
                    CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                    NULL,
                    'GE_BASE_ADMINISTRA',
                    NULL,
                    NUENTITY
                );

                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                (
                    CT_BOCONSTANTS.FSBGETCONTRACTORINSTANCENAME,
                    NULL,
                    'GE_BASE_ADMINISTRA',
                    'ID_BASE_ADMINISTRA',
                    TO_CHAR(INUADMINBASEID),
                    TRUE
                );

                
                CT_BOCERTIFICATECONTROL.CLEARCERTIFICATEDETAILS;

                
                CT_BOLIQUIDATIONSUPPORT.LOADCERTIFICATEDETAIL(INUCONTRACTORINSTANCE);

                
                NUCONDINDEX := ITBCONDITIONS.FIRST;
                LOOP
                    EXIT WHEN NUCONDINDEX IS NULL;
                    BEGIN
                        
                        IF (ITBITEMSCACHE.EXISTS(ITBCONDITIONS(NUCONDINDEX).ITEMS_ID)) THEN
                            RCITEM := ITBITEMSCACHE(ITBCONDITIONS(NUCONDINDEX).ITEMS_ID);
                        ELSE
                            DAGE_ITEMS.GETRECORD(ITBCONDITIONS(NUCONDINDEX).ITEMS_ID,
                                                 RCITEM);
                            ITBITEMSCACHE(ITBCONDITIONS(NUCONDINDEX).ITEMS_ID) := RCITEM;
                        END IF;

                        CT_BOLIQUIDATIONSUPPORT.LOADITEM
                        (
                            INUCONTRACTORINSTANCE,
                            RCITEM
                        );

                        
                        CT_BOLIQUIDATIONPROCESS.PROCESSCERTIFICATECONDITION
                        (
                            INUCONDPLANID,
                            IDTBREAKDATE,
                            INUCONTRACTID,
                            INUPERIODID,
                            INUCONTRACTORINSTANCE,
                            INUCERTIFICATEID,
                            ITBCONDITIONS(NUCONDINDEX),
                            INUADMINBASEID,
                            INUPERSONID,
                            ITBOBJECTSBYPERIOD
                        );

                        
                         CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ITEMS');
                    EXCEPTION
                        WHEN EX.CONTROLLED_ERROR THEN
                            
                             CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ITEMS');
                            RAISE EX.CONTROLLED_ERROR;
                        WHEN OTHERS THEN
                            ERRORS.SETERROR;
                            
                             CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ITEMS');
                            RAISE EX.CONTROLLED_ERROR;
                    END;
                    
                    NUCONDINDEX := ITBCONDITIONS.NEXT(NUCONDINDEX);
                END LOOP;

                
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_DETALLE_ACTA');

                
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_BASE_ADMINISTRA');

                
                CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ACTA');
            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    
                    CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_DETALLE_ACTA');
                    
                    CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_BASE_ADMINISTRA');
                    
                    CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ACTA');
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    ERRORS.SETERROR;
                    
                    CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_DETALLE_ACTA');
                    
                    CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_BASE_ADMINISTRA');
                    
                    CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_ACTA');
                    RAISE EX.CONTROLLED_ERROR;
            END;
        END IF;
        
        DECLARE
            NUERRORCODE        CT_PROCESS_LOG.ERROR_CODE%TYPE;
            SBERRORMSG         CT_PROCESS_LOG.ERROR_MESSAGE%TYPE;
        BEGIN
            
            CT_BCCERTIFICATE.UPDCERTIFICATE
            (
                INUCERTIFICATEID,
                CT_BCCERTIFICATE.FNUCALCULATECERTIFTOTALVALUE(INUCERTIFICATEID),
                UT_DATE.FDTSYSDATE
            );
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                
                ERRORS.GETERROR(NUERRORCODE,
                                SBERRORMSG);
    			ERRORS.SETMESSAGE('Se present� un error al actualizar el acta '||INUCERTIFICATEID||
                                  ' - Detalle del error: ['||SBERRORMSG||']');
                CT_BOPROCESSLOG.REGISTERPROCESSLOG
                (
                    INUCONTRACTID,
                    INUPERIODID,
                    IDTBREAKDATE,
                    NULL,
                    NULL,
                    NULL
                );
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                
                ERRORS.GETERROR(NUERRORCODE,
                                SBERRORMSG);
    			ERRORS.SETMESSAGE('Se present� un error al actualizar el acta '||INUCERTIFICATEID||
                                  ' - Detalle del error: ['||SBERRORMSG||']');
                CT_BOPROCESSLOG.REGISTERPROCESSLOG
                (
                    INUCONTRACTID,
                    INUPERIODID,
                    IDTBREAKDATE,
                    NULL,
                    NULL,
                    NULL
                );
                RAISE EX.CONTROLLED_ERROR;
        END;

        
        COMMIT;

        
        IF (IBLSUCCESSLOG) THEN
            
            ERRORS.SETERROR(CNUMESSAGE_PROCESS_OK,
                            INUCERTIFICATEID||'|'||INUADMINBASEID||'|'||INUPERSONID);
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_CERTIFICATE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ROLLBACK TO SAVEPOINT SP_CERTIFICATE;
    END PROCESSCERTIFICATE;
    
    






























    PROCEDURE PROCESSCONTRACTNOSTATEMENT
    (
        INUCONDPLANID               IN             CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        INUADMINBASEID	            IN             GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        INUCONTRACTORINSTANCE       IN             GE_BOINSTANCECONTROL.STYNUINDEX,
        IBLNEWOBLIGATIONS           IN OUT NOCOPY  BOOLEAN,
        ITBNOADMINBASELIQCERTIFS    IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES          IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES         IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBITEMSCACHE               IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBITEMSCACHE,
        IRCPERSON                   IN             CT_BCCONTRACTOR.TYPERSON,
        ITBOBJECTSBYPERIOD          IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBOBJECTSBYPERIOD
    )
    IS
        TBLIQCONDITIONS                 CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS;
        TBBILLCONDITIONS                CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS;

        NUNOADMINBASELIQCERTIFID        GE_ACTA.ID_ACTA%TYPE;
        NUNOADMINBASEBILLCERTIFID       GE_ACTA.ID_ACTA%TYPE;

        SBINDEX                         VARCHAR2(15) := NVL(TO_CHAR(IRCPERSON.PERSON_ID),'-');

        CNUMESSAGE_CERT_DEL CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 300038;
        
        BLPROCESS                       BOOLEAN := FALSE;
    BEGIN
        
        CT_BOLIQUIDATIONSUPPORT.LOADPERSON
        (
            INUCONTRACTORINSTANCE,
            IRCPERSON
        );

        
        CT_BCCONDITIONS.GETCONDITIONSBYCONPLAN
        (
            INUCONDPLANID,
            CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE,
            CT_BOCONSTANTS.FSBGETCERTIFICATECONDLEVEL,
            TBLIQCONDITIONS
        );

        
        IF (TBLIQCONDITIONS.COUNT > 0) THEN
        
            
            BLPROCESS := TRUE;
            
            
            IF (ITBNOADMINBASELIQCERTIFS.EXISTS(SBINDEX)) THEN
                
                NUNOADMINBASELIQCERTIFID := ITBNOADMINBASELIQCERTIFS(SBINDEX);
            ELSE
                
                
                CT_BOCERTIFICATE.CREATECERTIFICATE
                (
                    CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE,
                    INUCONTRACTID,
                    INUPERIODID,
                    NULL,
                    IDTBREAKDATE,
                    IRCPERSON.PERSON_ID,
                    NUNOADMINBASELIQCERTIFID
                );
                
                ITBNOADMINBASELIQCERTIFS(SBINDEX) := NUNOADMINBASELIQCERTIFID;
            END IF;
            
            CT_BOLIQUIDATIONPROCESS.PROCESSCERTIFICATE
            (
                IDTBREAKDATE,
                INUCONTRACTID,
                INUPERIODID,
                INUCONDPLANID,
                INUCONTRACTORINSTANCE,
                ITBITEMSCACHE,
                NUNOADMINBASELIQCERTIFID,
                NULL,
                TBLIQCONDITIONS,
                ITBOBJECTSBYPERIOD,
                IRCPERSON.PERSON_ID,
                FALSE
            );

            
            IF (NOT(CT_BCCERTIFICATE.FBLHASDETAILS(NUNOADMINBASELIQCERTIFID))) THEN
                
                CT_BCCERTIFICATE.DELORDERSFROMCERTIF(NUNOADMINBASELIQCERTIFID);
                
                IF (DAGE_ACTA.FBLEXIST(NUNOADMINBASELIQCERTIFID)) THEN
                    DAGE_ACTA.DELRECORD(NUNOADMINBASELIQCERTIFID);
                END IF;
                ITBNOADMINBASELIQCERTIFS.DELETE(SBINDEX);
                NUNOADMINBASELIQCERTIFID := NULL;
                
                COMMIT;
            ELSE
                IBLNEWOBLIGATIONS := TRUE;

                
                ERRORS.SETERROR(CNUMESSAGE_PROCESS_OK,
                                NUNOADMINBASELIQCERTIFID||'|'||NULL||'|'||IRCPERSON.PERSON_ID);
                
                CT_BOPROCESSLOG.REGISTERPROCESSLOG
                (
                    INUCONTRACTID,
                    INUPERIODID,
                    IDTBREAKDATE,
                    NULL,
                    NULL,
                    NULL
                );
            END IF;
        END IF;

        
        CT_BCCONDITIONS.GETCONDITIONSBYCONPLAN
        (
            INUCONDPLANID,
            CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE,
            CT_BOCONSTANTS.FSBGETCERTIFICATECONDLEVEL,
            TBBILLCONDITIONS
        );

        
        IF (TBBILLCONDITIONS.COUNT > 0) THEN
        
            
            BLPROCESS := TRUE;
            
            
            IF (ITBNOADMINBASEBILLCERTIFS.EXISTS(SBINDEX)) THEN
                
                NUNOADMINBASEBILLCERTIFID := ITBNOADMINBASEBILLCERTIFS(SBINDEX);
            ELSE
                
                
                CT_BOCERTIFICATE.CREATECERTIFICATE(CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE,
                                                   INUCONTRACTID,
                                                   INUPERIODID,
                                                   NULL,
                                                   IDTBREAKDATE,
                                                   IRCPERSON.PERSON_ID,
                                                   NUNOADMINBASEBILLCERTIFID);

                ITBNOADMINBASEBILLCERTIFS(SBINDEX) := NUNOADMINBASEBILLCERTIFID;
            END IF;

            
            CT_BOLIQUIDATIONPROCESS.PROCESSCERTIFICATE
            (
                IDTBREAKDATE,
                INUCONTRACTID,
                INUPERIODID,
                INUCONDPLANID,
                INUCONTRACTORINSTANCE,
                ITBITEMSCACHE,
                NUNOADMINBASEBILLCERTIFID,
                NULL,
                TBBILLCONDITIONS,
                ITBOBJECTSBYPERIOD,
                IRCPERSON.PERSON_ID,
                FALSE
            );

            
            IF (NOT(CT_BCCERTIFICATE.FBLHASDETAILS(NUNOADMINBASEBILLCERTIFID))) THEN
                
                CT_BCCERTIFICATE.DELORDERSFROMCERTIF(NUNOADMINBASEBILLCERTIFID);
                
                IF (DAGE_ACTA.FBLEXIST(NUNOADMINBASEBILLCERTIFID)) THEN
                    DAGE_ACTA.DELRECORD(NUNOADMINBASEBILLCERTIFID);
                END IF;
                ITBNOADMINBASEBILLCERTIFS.DELETE(SBINDEX);
                NUNOADMINBASEBILLCERTIFID := NULL;
                
                COMMIT;
            ELSE
                IBLNEWOBLIGATIONS := TRUE;

                
                ERRORS.SETERROR(CNUMESSAGE_PROCESS_OK,
                                NUNOADMINBASEBILLCERTIFID||'|'||NULL||'|'||IRCPERSON.PERSON_ID);
                
                CT_BOPROCESSLOG.REGISTERPROCESSLOG(INUCONTRACTID,
                                                   INUPERIODID,
                                                   IDTBREAKDATE,
                                                   NULL,
                                                   NULL,
                                                   NULL);
            END IF;
        END IF;

        
        IF (    (NUNOADMINBASELIQCERTIFID IS NULL)
            AND (NUNOADMINBASEBILLCERTIFID IS NULL) AND BLPROCESS) THEN
            
            
            ERRORS.SETERROR(CNUMESSAGE_CERT_DEL,
                            NULL||'|'||IRCPERSON.PERSON_ID);
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG(INUCONTRACTID,
                                               INUPERIODID,
                                               IDTBREAKDATE,
                                               NULL,
                                               NULL,
                                               NULL);
        END IF;

        
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_PERSON');
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_PERSON');
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            
            CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('GE_PERSON');
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSCONTRACTNOSTATEMENT;
    
    
































    PROCEDURE PROCESSSIMPLECONDCERTITEM
    (
        IRCCERTDETAIL               IN             DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA,
        ITBSIMPLECONDITEM           IN OUT NOCOPY  CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTORID             IN             GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUCERTIFICATEID            IN             GE_ACTA.ID_ACTA%TYPE,
        ITBCERTDETAILSBYSIMPLE      IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTDETAILSBYSIMPLE,
        ITBITEMLOCSIMPLE            IN OUT NOCOPY  CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN_VARCHAR
    )
    IS
        RCCERTDETAIL            DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;

        RCSIMPLECONDITION       CT_BCCONDITIONPLAN.TYSIMPLECONDPLAN;
        SBINDEX                 VARCHAR2(45);
        TBCERTDETAILS           DAGE_DETALLE_ACTA.TYTBGE_DETALLE_ACTA;
        
        RCCERTDETAILSBYSIMPLE   CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE;
        
        NUVALUEITEM             GE_DETALLE_ACTA.VALOR_UNITARIO%TYPE;
        NULIST                  GE_DETALLE_ACTA.ID_LISTA_UNIT_COSTO%TYPE;

        SBGEOLOCATION           VARCHAR2(50) := 'nulo';
        
        NUCOUNT                 NUMBER;
        
        BLHASWITHGEO            BOOLEAN := FALSE;
        
        SBITEMGEO               VARCHAR2(50);
    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationProcess.ProcessSimpleCondCertItem',6);

        IF IRCCERTDETAIL.GEOGRAP_LOCATION_ID IS NOT NULL THEN
            SBGEOLOCATION := TO_CHAR(IRCCERTDETAIL.GEOGRAP_LOCATION_ID);
        END IF;
        
        NUCOUNT := 1;

        SBITEMGEO := TO_CHAR(IRCCERTDETAIL.ID_ITEMS) || '_' || SBGEOLOCATION;
        
        IF ITBITEMLOCSIMPLE.EXISTS(SBITEMGEO) THEN
        
            IF (ITBITEMLOCSIMPLE(SBITEMGEO).TBSIMPLECONDPLAN.COUNT = 0) THEN
                RETURN;
            END IF;

            RCSIMPLECONDITION := ITBITEMLOCSIMPLE(SBITEMGEO).TBSIMPLECONDPLAN(NUCOUNT);

        
        ELSE

            SBINDEX := ITBSIMPLECONDITEM.FIRST;

            LOOP
                EXIT WHEN SBINDEX IS NULL;

                
                IF (ITBSIMPLECONDITEM(SBINDEX).GEOGRAP_LOCATION_ID IS NULL) THEN

                    
                    IF
                    (
                        ITBSIMPLECONDITEM(SBINDEX).ALL_ITEMS = GE_BOCONSTANTS.CSBYES
                    OR
                        CT_BCSIMPLECONDITION.FBLISITEMASOC(ITBSIMPLECONDITEM(SBINDEX).SIMPLE_CONDITION_ID, IRCCERTDETAIL.ID_ITEMS)
                    )
                    THEN
                        
                        IF( NOT BLHASWITHGEO) THEN

                            RCSIMPLECONDITION := ITBSIMPLECONDITEM(SBINDEX);
                            ITBITEMLOCSIMPLE(SBITEMGEO).TBSIMPLECONDPLAN(NUCOUNT) := RCSIMPLECONDITION;
                            NUCOUNT := NUCOUNT + 1;
                            
                        END IF;
                    END IF;

                
                
                ELSIF (
                            IRCCERTDETAIL.GEOGRAP_LOCATION_ID IS NOT NULL
                      AND
                            IRCCERTDETAIL.GEOGRAP_LOCATION_ID = ITBSIMPLECONDITEM(SBINDEX).GEOGRAP_LOCATION_ID
                       )
                THEN

                    
                    IF
                    (
                        ITBSIMPLECONDITEM(SBINDEX).ALL_ITEMS = GE_BOCONSTANTS.CSBYES
                    OR
                        CT_BCSIMPLECONDITION.FBLISITEMASOC(ITBSIMPLECONDITEM(SBINDEX).SIMPLE_CONDITION_ID, IRCCERTDETAIL.ID_ITEMS)
                    )
                    THEN
                        RCSIMPLECONDITION := ITBSIMPLECONDITEM(SBINDEX);
                        ITBITEMLOCSIMPLE(SBITEMGEO).TBSIMPLECONDPLAN(NUCOUNT) := RCSIMPLECONDITION;
                        BLHASWITHGEO := TRUE;
                        NUCOUNT := NUCOUNT + 1;
                    END IF;
                END IF;
                
                SBINDEX := ITBSIMPLECONDITEM.NEXT(SBINDEX);
            END LOOP;
        END IF;
        
        
        IF (NOT ITBITEMLOCSIMPLE.EXISTS(SBITEMGEO)) THEN
            RETURN;
        ELSIF (ITBITEMLOCSIMPLE(SBITEMGEO).TBSIMPLECONDPLAN.COUNT = 0) THEN
            RETURN;
        END IF;
        
        
        RCCERTDETAIL.ID_DETALLE_ACTA        := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
        RCCERTDETAIL.REFERENCE_ITEM_ID      := IRCCERTDETAIL.ID_ITEMS;
        RCCERTDETAIL.CONDITION_BY_PLAN_ID   := RCSIMPLECONDITION.CONDITION_BY_PLAN_ID;
        RCCERTDETAIL.ID_ITEMS               := RCSIMPLECONDITION.ITEMS_ID;
        RCCERTDETAIL.DESCRIPCION_ITEMS      := RCSIMPLECONDITION.ITEMS_ID || ' - ' || RCSIMPLECONDITION.ITEM_DESCRIPTION;
        RCCERTDETAIL.CANTIDAD               := IRCCERTDETAIL.CANTIDAD;
        RCCERTDETAIL.TIPO_GENERACION        := CT_BOCONSTANTS.FSBGETAUTODETGENTYPE;
        RCCERTDETAIL.ID_UNIDAD_MEDIDA       := RCSIMPLECONDITION.ITEM_MEASURE_UNIT_ID;
        RCCERTDETAIL.ID_ORDEN               := IRCCERTDETAIL.ID_ORDEN;
        RCCERTDETAIL.GEOGRAP_LOCATION_ID    := IRCCERTDETAIL.GEOGRAP_LOCATION_ID;
        
        
        RCCERTDETAIL.AFFECT_CONTRACT_VAL := 'Y';
        
        IF (DACT_EXCL_ITEM_CONT_VAL.FBLEXIST(RCSIMPLECONDITION.ITEMS_ID) ) THEN
            RCCERTDETAIL.AFFECT_CONTRACT_VAL := 'N';
        END IF;

        
        RCCERTDETAIL.ID_ACTA                := INUCERTIFICATEID;
        RCCERTDETAIL.COMMENT_               := 'Detalle Base: ' || IRCCERTDETAIL.ID_DETALLE_ACTA;


        
        
        IF ITBCERTDETAILSBYSIMPLE.EXISTS(RCSIMPLECONDITION.CONDITION_BY_PLAN_ID) THEN

            
            RCCERTDETAILSBYSIMPLE := ITBCERTDETAILSBYSIMPLE(RCSIMPLECONDITION.CONDITION_BY_PLAN_ID);

            
            RCCERTDETAILSBYSIMPLE.QUANTITY_ACUM     := RCCERTDETAILSBYSIMPLE.QUANTITY_ACUM + IRCCERTDETAIL.CANTIDAD;
            RCCERTDETAILSBYSIMPLE.VALUE_ACUM        := RCCERTDETAILSBYSIMPLE.VALUE_ACUM + NVL(IRCCERTDETAIL.VALOR_TOTAL, 0);

            
            RCCERTDETAILSBYSIMPLE.TBCERTDETAILS(RCCERTDETAILSBYSIMPLE.TBCERTDETAILS.COUNT + 1) := RCCERTDETAIL;

            
            RCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS(RCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS.COUNT + 1) := IRCCERTDETAIL;
            
            ITBCERTDETAILSBYSIMPLE(RCSIMPLECONDITION.CONDITION_BY_PLAN_ID) := RCCERTDETAILSBYSIMPLE;
        ELSE

            
            
            TBCERTDETAILS(1) := RCCERTDETAIL;

            
            RCCERTDETAILSBYSIMPLE.CERTIFICATE_ID       := INUCERTIFICATEID;
            RCCERTDETAILSBYSIMPLE.TBSIMPLECONDITIONS   := ITBITEMLOCSIMPLE(SBITEMGEO).TBSIMPLECONDPLAN;

            
            RCCERTDETAILSBYSIMPLE.TBCERTDETAILS        := TBCERTDETAILS;
            
            
            RCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS(RCCERTDETAILSBYSIMPLE.TBBASECERTDETAILS.COUNT + 1) := IRCCERTDETAIL;

            
            RCCERTDETAILSBYSIMPLE.QUANTITY_ACUM        := IRCCERTDETAIL.CANTIDAD;
            RCCERTDETAILSBYSIMPLE.VALUE_ACUM           := NVL(IRCCERTDETAIL.VALOR_TOTAL, 0);

            
            ITBCERTDETAILSBYSIMPLE(RCSIMPLECONDITION.CONDITION_BY_PLAN_ID) := RCCERTDETAILSBYSIMPLE;

        END IF;

        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessSimpleCondCertItem',6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                IRCCERTDETAIL.ID_ORDEN,
                IRCCERTDETAIL.ID_ITEMS,
                RCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                IRCCERTDETAIL.ID_ORDEN,
                IRCCERTDETAIL.ID_ITEMS,
                RCSIMPLECONDITION.CONDITION_BY_PLAN_ID
            );
    END PROCESSSIMPLECONDCERTITEM;
    
    






















    PROCEDURE PROCESSCERTIFICATEDETAILS
    (
        INUCONDPLANID               IN            CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        INUITEMSIMPLECONDID         IN            CT_SIMPLE_CONDITION.ITEMS_ID%TYPE,
        ITBSIMPLECONDITEM           IN OUT NOCOPY CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN,
        IDTBREAKDATE                IN            GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN            GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN            GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTORID             IN            GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUCERTIFICATEID            IN            GE_ACTA.ID_ACTA%TYPE
    )
    IS
        TBITEMLOCSIMPLE         CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN_VARCHAR;
        
        TBCERTDETAILS           DAGE_DETALLE_ACTA.TYTBGE_DETALLE_ACTA;

        TBCERTDETAILSBYSIMPLE   CT_BCLIQUIDATIONSUPPORT.TYTBCERTDETAILSBYSIMPLE;
        RCCERTDETAILSBYSIMPLE   CT_BCLIQUIDATIONSUPPORT.TYCERTDETAILSBYSIMPLE;
        
        SBINDEX                 VARCHAR2(500);
        NUERRORCODE             CT_PROCESS_LOG.ERROR_CODE%TYPE;
        SBERRORMSG              CT_PROCESS_LOG.ERROR_MESSAGE%TYPE;
        
        BLISUSED                BOOLEAN := FALSE;
        
        NUCERTINDEX             BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationProcess.ProcessCertificateDetails',5);
        SAVEPOINT SP_CERTDETAILS;
        
        
        CT_BCLIQUIDATIONSUPPORT.GETCERTDETAILS
        (
            INUCERTIFICATEID,
            TBCERTDETAILS
        );
        
        
        IF TBCERTDETAILS.COUNT = 0 THEN
            RETURN;
        END IF;
        
        
        NUCERTINDEX := TBCERTDETAILS.FIRST;
        LOOP
            EXIT WHEN NUCERTINDEX IS NULL;
            
            CT_BOLIQUIDATIONPROCESS.PROCESSSIMPLECONDCERTITEM
            (
                TBCERTDETAILS(NUCERTINDEX),
                ITBSIMPLECONDITEM,
                IDTBREAKDATE,
                INUCONTRACTID,
                INUPERIODID,
                INUCONTRACTORID,
                INUCERTIFICATEID,
                TBCERTDETAILSBYSIMPLE,
                TBITEMLOCSIMPLE
            );
            
            NUCERTINDEX := TBCERTDETAILS.NEXT(NUCERTINDEX);
            
        END LOOP;
        
        
        
        
        IF TBCERTDETAILSBYSIMPLE.COUNT > 0 THEN

            SBINDEX := TBCERTDETAILSBYSIMPLE.FIRST;
            LOOP
                EXIT WHEN SBINDEX IS NULL;

                
                RCCERTDETAILSBYSIMPLE := TBCERTDETAILSBYSIMPLE(SBINDEX);

                
                CT_BOLIQUIDATIONSUPPORT.PROCESSDETAILSBYCERTDETAIL
                (
                    RCCERTDETAILSBYSIMPLE,
                    IDTBREAKDATE,
                    INUCONTRACTID,
                    INUCONTRACTORID,
                    INUPERIODID
                );

                SBINDEX := TBCERTDETAILSBYSIMPLE.NEXT(SBINDEX);

            END LOOP;
        END IF;
        
        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessCertificateDetails',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_CERTDETAILS;
            ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
    		ERRORS.SETMESSAGE('Se present� un error al procesar la condici�n simple del �tem'||INUITEMSIMPLECONDID||
                              ' para el acta '||INUCERTIFICATEID||' - Detalle del error: ['||SBERRORMSG||']');
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                ITBSIMPLECONDITEM(ITBSIMPLECONDITEM.FIRST).CONDITION_BY_PLAN_ID
            );
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_CERTDETAILS;
            ERRORS.SETERROR;
            ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
    		ERRORS.SETMESSAGE('Se present� un error al procesar la condici�n simple del �tem'||INUITEMSIMPLECONDID||
                              ' para el acta '||INUCERTIFICATEID||' - Detalle del error: ['||SBERRORMSG||']');
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                ITBSIMPLECONDITEM(ITBSIMPLECONDITEM.FIRST).CONDITION_BY_PLAN_ID
            );
    END PROCESSCERTIFICATEDETAILS;
    
    





















    PROCEDURE PROCESSSIMPLECERTIFICATE
    (
        INUCONDPLANID               IN            CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        ITBSIMPLECONDCERT           IN OUT NOCOPY DACT_SIMPLE_CONDITION.TYTBITEMS_ID,
        IDTBREAKDATE                IN            GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN            GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN            GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTORID             IN            GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUCERTIFICATEID            IN            GE_ACTA.ID_ACTA%TYPE
    )
    IS
        TBSIMPLECONDITEM        CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN;
        
        NUCERTINDEX             BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationProcess.ProcessSimpleCertificate',4);

        
        NUCERTINDEX := ITBSIMPLECONDCERT.FIRST;
        LOOP
            EXIT WHEN NUCERTINDEX IS NULL;
            
            
            CT_BCCONDITIONPLAN.GETSIMPLESCONDITIONSBYITEM
            (
                INUCONDPLANID,
                ITBSIMPLECONDCERT(NUCERTINDEX),
                IDTBREAKDATE,
                CT_BOCONSTANTS.CSBCERTIFICATETYPE,
                TBSIMPLECONDITEM
            );
            
            
            CT_BOLIQUIDATIONPROCESS.PROCESSCERTIFICATEDETAILS
            (
                INUCONDPLANID,
                ITBSIMPLECONDCERT(NUCERTINDEX),
                TBSIMPLECONDITEM,
                IDTBREAKDATE,
                INUCONTRACTID,
                INUPERIODID,
                INUCONTRACTORID,
                INUCERTIFICATEID
            );
            
            NUCERTINDEX := ITBSIMPLECONDCERT.NEXT(NUCERTINDEX);
        END LOOP;
        
        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessSimpleCertificate',4);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSSIMPLECERTIFICATE;

    
























    PROCEDURE PROCESSSIMPLECONDCERTIFICATE
    (
        INUCONDPLANID               IN             CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        ITBSIMPLECONDCERT           IN OUT NOCOPY  DACT_SIMPLE_CONDITION.TYTBITEMS_ID,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTORID             IN             GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        ITBNOADMINBASECERTIFS       IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBCERTIFICATES             IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID
    )
    IS
        SBINDEX                     VARCHAR2(15);
        NUADMINBASEID               GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia CT_BOLiquidationProcess.ProcessSimpleCondCertificate',3);
        
        
        IF (ITBNOADMINBASECERTIFS.COUNT > 0) THEN
            SBINDEX := ITBNOADMINBASECERTIFS.FIRST;
            LOOP
                EXIT WHEN SBINDEX IS NULL;

                CT_BOLIQUIDATIONPROCESS.PROCESSSIMPLECERTIFICATE
                (
                    INUCONDPLANID,
                    ITBSIMPLECONDCERT,
                    IDTBREAKDATE,
                    INUCONTRACTID,
                    INUPERIODID,
                    INUCONTRACTORID,
                    ITBNOADMINBASECERTIFS(SBINDEX)
                );

                SBINDEX := ITBNOADMINBASECERTIFS.NEXT(SBINDEX);
            END LOOP;
        END IF;
        
        
        IF (ITBCERTIFICATES.COUNT > 0) THEN
            NUADMINBASEID := ITBCERTIFICATES.FIRST;
            LOOP
                EXIT WHEN NUADMINBASEID IS NULL;

                CT_BOLIQUIDATIONPROCESS.PROCESSSIMPLECERTIFICATE
                (
                    INUCONDPLANID,
                    ITBSIMPLECONDCERT,
                    IDTBREAKDATE,
                    INUCONTRACTID,
                    INUPERIODID,
                    INUCONTRACTORID,
                    ITBCERTIFICATES(NUADMINBASEID)
                );

                NUADMINBASEID := ITBCERTIFICATES.NEXT(NUADMINBASEID);
            END LOOP;
        END IF;

        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessSimpleCondCertificate',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSSIMPLECONDCERTIFICATE;
    
    
























    PROCEDURE PROCSIMPLECONDLEVCERT
    (
        INUCONDPLANID               IN             CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        IRCCONTRACT                 IN             DAGE_CONTRATO.STYGE_CONTRATO,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        ITBNOADMINBASELIQCERTIFS    IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES          IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES         IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID
    )
    IS
        TBSIMPLECONDCERT       DACT_SIMPLE_CONDITION.TYTBITEMS_ID;
    BEGIN
        UT_TRACE.TRACE('Inicio CT_BOLiquidationProcess.ProcSimpleCondLevCert',2);
        
        IF INUCONDPLANID IS NULL THEN
            UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcSimpleCondLevCert inuCondPlanId IS Null',2);
            RETURN;
        END IF;
        
        
        
        CT_BCCONDITIONPLAN.GETSIMPLEITEMS
        (
            INUCONDPLANID,
            IDTBREAKDATE,
            CT_BOCONSTANTS.CSBCERTIFICATETYPE,
            CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE,
            TBSIMPLECONDCERT
        );

        
        IF (TBSIMPLECONDCERT.COUNT > 0) THEN
            
            
            CT_BOLIQUIDATIONPROCESS.PROCESSSIMPLECONDCERTIFICATE
            (
                INUCONDPLANID,
                TBSIMPLECONDCERT,
                IDTBREAKDATE,
                IRCCONTRACT.ID_CONTRATO,
                INUPERIODID,
                IRCCONTRACT.ID_CONTRATISTA,
                ITBNOADMINBASELIQCERTIFS,
                ITBLIQCERTIFICATES
            );

        ELSE
            
            ERRORS.SETERROR(901268, INUCONDPLANID);

            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                IRCCONTRACT.ID_CONTRATO,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
        END IF;
        
        
        
        CT_BCCONDITIONPLAN.GETSIMPLEITEMS
        (
            INUCONDPLANID,
            IDTBREAKDATE,
            CT_BOCONSTANTS.CSBCERTIFICATETYPE,
            CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE,
            TBSIMPLECONDCERT
        );

        
        IF (TBSIMPLECONDCERT.COUNT > 0) THEN

            
            
            CT_BOLIQUIDATIONPROCESS.PROCESSSIMPLECONDCERTIFICATE
            (
                INUCONDPLANID,
                TBSIMPLECONDCERT,
                IDTBREAKDATE,
                IRCCONTRACT.ID_CONTRATO,
                INUPERIODID,
                IRCCONTRACT.ID_CONTRATISTA,
                ITBNOADMINBASEBILLCERTIFS,
                ITBBILLCERTIFICATES
            );

        ELSE
            
            ERRORS.SETERROR(901269, INUCONDPLANID);

            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                IRCCONTRACT.ID_CONTRATO,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
        END IF;
        
        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcSimpleCondLevCert',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCSIMPLECONDLEVCERT;
    
    






































    PROCEDURE PROCESSNOVELTY
    (
        INUCONTRACTORINSTANCE           IN OUT NOCOPY  GE_BOINSTANCECONTROL.STYNUINDEX,
        ITBCONDITIONS                   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS
    )
    IS
        NUCONDINDEX                     PLS_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicio CT_BOLiquidationProcess.ProcessNovelty',2);
        SAVEPOINT SP_NOV;
        
        
        CT_BOCERTIFICATECONTROL.BLINSERTNOVORDERS := FALSE;

        
        NUCONDINDEX := ITBCONDITIONS.FIRST;
        LOOP
            EXIT WHEN NUCONDINDEX IS NULL;

            DECLARE
                NUSTATEMENTERROR        GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
                SBSTATEMENTERROR        GE_ERROR_LOG.DESCRIPTION%TYPE;
            BEGIN
                
                CT_BOLIQUIDATIONSUPPORT.LOADCONDITION
                (
                    INUCONTRACTORINSTANCE,
                    ITBCONDITIONS(NUCONDINDEX)
                );

                
                CT_BOLIQUIDATIONSUPPORT.LOADCONDITIONBYPLAN
                (
                    INUCONTRACTORINSTANCE,
                    ITBCONDITIONS(NUCONDINDEX)
                );

                
                GR_BOCONFIG_EXPRESSION.EXECUTE
                (
                    ITBCONDITIONS(NUCONDINDEX).CONFIG_EXPRESSION_ID,
                    NUSTATEMENTERROR,
                    SBSTATEMENTERROR
                );
                
                
                IF (NUSTATEMENTERROR <> GE_BOCONSTANTS.CNUSUCCESS) THEN
                    ERRORS.SETERROR(NUSTATEMENTERROR);
                    ERRORS.SETMESSAGE(SBSTATEMENTERROR);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;
            END;
            
            NUCONDINDEX := ITBCONDITIONS.NEXT(NUCONDINDEX);
        END LOOP;
        
        
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_CONDITIONS');
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE(CT_BOLIQUIDATIONSUPPORT.CSBCT_CONDITIONS_BY_PLAN);

        
        COMMIT;
        
        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessNovelty',2);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_NOV;
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_NOV;
        	ERRORS.SETERROR;
    END PROCESSNOVELTY;
    
    




































    PROCEDURE PROCESSEXCLUSION
    (
        INUCONTRACTORINSTANCE           IN OUT NOCOPY  GE_BOINSTANCECONTROL.STYNUINDEX,
        IRCORDER                        IN             CT_BCLIQUIDATIONSUPPORT.TYORDERSINFO,
        ITBEXCLCONDITIONS               IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS
    )
    IS
        RCOPERATINGUNIT                 DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;

        NUEXCCONDINDEX                  PLS_INTEGER;

    BEGIN
        UT_TRACE.TRACE('Inicio CT_BOLiquidationProcess.ProcessExclusion',2);
        SAVEPOINT SP_EXC;

        
        NUEXCCONDINDEX := ITBEXCLCONDITIONS.FIRST;
        LOOP
            EXIT WHEN NUEXCCONDINDEX IS NULL;

            DECLARE
                NUSTATEMENTERROR        GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
                SBSTATEMENTERROR        GE_ERROR_LOG.DESCRIPTION%TYPE;
            BEGIN
                
                CT_BOLIQUIDATIONSUPPORT.LOADCONDITION
                (
                    INUCONTRACTORINSTANCE,
                    ITBEXCLCONDITIONS(NUEXCCONDINDEX)
                );

                
                CT_BOLIQUIDATIONSUPPORT.LOADCONDITIONBYPLAN
                (
                    INUCONTRACTORINSTANCE,
                    ITBEXCLCONDITIONS(NUEXCCONDINDEX)
                );

                
                GR_BOCONFIG_EXPRESSION.EXECUTE
                (
                    ITBEXCLCONDITIONS(NUEXCCONDINDEX).CONFIG_EXPRESSION_ID,
                    NUSTATEMENTERROR,
                    SBSTATEMENTERROR
                );

                
                IF (NUSTATEMENTERROR <> GE_BOCONSTANTS.CNUSUCCESS) THEN
                    ERRORS.SETERROR(NUSTATEMENTERROR);
                    ERRORS.SETMESSAGE(SBSTATEMENTERROR);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;
            END;
            NUEXCCONDINDEX := ITBEXCLCONDITIONS.NEXT(NUEXCCONDINDEX);
        END LOOP;

        
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE('CT_CONDITIONS');
        CT_BOLIQUIDATIONSUPPORT.UNLOADTABLE(CT_BOLIQUIDATIONSUPPORT.CSBCT_CONDITIONS_BY_PLAN);

        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessExclusion',2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SAVEPOINT SP_EXC;
        WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT SP_EXC;
        	ERRORS.SETERROR;
    END PROCESSEXCLUSION;
    
    















































    PROCEDURE EXECUTECONDITIONSBYORDEN
    (
        INUCONDPLANID                   IN              CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        IDTBREAKDATE                    IN              GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID                   IN              GE_ACTA.ID_CONTRATO%TYPE,
        INUPERIODID	                    IN              GE_ACTA.ID_PERIODO%TYPE,
        INUADMINBASEID	                IN              GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        IRCCONTRACT                     IN              DAGE_CONTRATO.STYGE_CONTRATO,
        INUCONTRACTORID                 IN             GE_CONTRATO.ID_CONTRATISTA%TYPE,
        INUCONTRACTORINSTANCE           IN OUT NOCOPY   GE_BOINSTANCECONTROL.STYNUINDEX,
        ITBOPERUNITSINCACHE             IN OUT NOCOPY   DAOR_OPERATING_UNIT.TYTBOR_OPERATING_UNIT,
        IRCORDER                        IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYORDERSINFO,
        ITBEXCLCONDITIONS               IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS,
        ITBNOVCONDITIONS                IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS,
        ITBSIMPLECONDITEM               IN OUT NOCOPY   DACT_SIMPLE_CONDITION.TYTBITEMS_ID,
        ITBFORMCONDITIONS               IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS,
        IBLISONLYREGEN                  IN              BOOLEAN,
        IBLNEWOBLIGATIONS               IN OUT NOCOPY   BOOLEAN,
        ITBNOADMINBASELIQCERTIFS        IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS       IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES              IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES             IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBORDERITEMSINCACHE            IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMS,
        ITBCERTDETAILSBYITEM            IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCERTDETAILSBYSIMPLE,
        ITBITEMLOCSIMPLE                IN OUT NOCOPY   CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN_VARCHAR,
        ITBITEMNOVELSIGN                IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBNOVELTYITEMS,
        ITBORDERWITHCERT                IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER,
        ITBSIMPLECONDPLANCACHE          IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBSIMPLECONDPLANCACHE,
        ITBCONDITIONSBYITEMCACHE        IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCONDITIONSBYITEMCACHE,
        ITBCONDITIONSBYITEMCLASSCACHE   IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBCONDITIONSBYITEMCLCACHE,
        ITBITEMSCACHE                   IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBITEMSCACHE,
        IBLUSEINSTANCE                  IN              BOOLEAN,
        IBLHASORITLEVELFORMCON          IN              BOOLEAN,
        ITBOBJECTSBYPERIOD              IN OUT NOCOPY   CT_BCLIQUIDATIONSUPPORT.TYTBOBJECTSBYPERIOD
    )
    IS
        RCOPERATINGUNIT                 DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;
        TBNEWNOVORDERS                  CT_BCLIQUIDATIONSUPPORT.TYTBORDERS;
        NUEXCCONDINDEX                  PLS_INTEGER;
        
        NUORDERINDEX                PLS_INTEGER;

    BEGIN
        UT_TRACE.TRACE('Inicio CT_BOLiquidationProcess.ExecuteConditionsByOrden ORDER: ' || IRCORDER.ORDER_ID,2);
        
        CT_BOCERTIFICATECONTROL.BLISEXCLUDE := FALSE;
        
        
        IF (ITBOPERUNITSINCACHE.EXISTS(IRCORDER.OPERATING_UNIT_ID)) THEN
            RCOPERATINGUNIT := ITBOPERUNITSINCACHE(IRCORDER.OPERATING_UNIT_ID);
        ELSE
            DAOR_OPERATING_UNIT.GETRECORD
            (
                IRCORDER.OPERATING_UNIT_ID,
                RCOPERATINGUNIT
            );
            ITBOPERUNITSINCACHE(IRCORDER.OPERATING_UNIT_ID) := RCOPERATINGUNIT;
        END IF;

        
        IF (INUADMINBASEID IS NOT NULL) THEN
            
            
            IF (   (RCOPERATINGUNIT.ADMIN_BASE_ID IS NULL)
                OR (RCOPERATINGUNIT.ADMIN_BASE_ID <> INUADMINBASEID)) THEN
                ERRORS.SETERROR(6382, IRCORDER.ORDER_ID||'|'||INUADMINBASEID);

                
                CT_BOPROCESSLOG.REGISTERPROCESSLOG
                (
                    INUCONTRACTID,
                    INUPERIODID,
                    IDTBREAKDATE,
                    IRCORDER.ORDER_ID,
                    NULL,
                    NULL
                );

                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;
        IF IBLUSEINSTANCE THEN
            
            CT_BOLIQUIDATIONSUPPORT.LOADORDER
            (
                INUCONTRACTORINSTANCE,
                IRCORDER
            );

            
            CT_BOLIQUIDATIONSUPPORT.LOADOPERUNIT
            (
                INUCONTRACTORINSTANCE,
                RCOPERATINGUNIT
            );
        END IF;
        
        
        IF ITBEXCLCONDITIONS.COUNT > 0 THEN
            
            CT_BOLIQUIDATIONPROCESS.PROCESSEXCLUSION
            (
                INUCONTRACTORINSTANCE,
                IRCORDER,
                ITBEXCLCONDITIONS
            );
        END IF;

        
        IF (ITBNOVCONDITIONS.COUNT > 0 AND CT_BOCERTIFICATECONTROL.BLISEXCLUDE = FALSE) THEN
            
            
            IF(IRCORDER.IS_NOVELTY <> GE_BOCONSTANTS.CSBYES) THEN
                CT_BOLIQUIDATIONPROCESS.PROCESSNOVELTY
                (
                    INUCONTRACTORINSTANCE,
                    ITBNOVCONDITIONS
                );
                
                IF CT_BOCERTIFICATECONTROL.BLINSERTNOVORDERS THEN
                    
                    CT_BCLIQUIDATIONSUPPORT.GETCREATEDNOVELTYORDERS
                    (
                        IRCORDER.ORDER_ID,
                        INUCONTRACTID,
                        TBNEWNOVORDERS
                    );
                    
                    
                    NUORDERINDEX := TBNEWNOVORDERS.FIRST;
                    LOOP
                        EXIT WHEN NUORDERINDEX IS NULL;
                        CT_BOLIQUIDATIONPROCESS.EXECUTECONDITIONSBYORDEN
                        (
                            INUCONDPLANID,
                            IDTBREAKDATE,
                            INUCONTRACTID,
                            INUPERIODID,
                            INUADMINBASEID,
                            IRCCONTRACT,
                            INUCONTRACTORID,
                            INUCONTRACTORINSTANCE,
                            ITBOPERUNITSINCACHE,
                            TBNEWNOVORDERS(NUORDERINDEX),
                            ITBEXCLCONDITIONS,
                            ITBNOVCONDITIONS,
                            ITBSIMPLECONDITEM,
                            ITBFORMCONDITIONS,
                            TRUE,
                            IBLNEWOBLIGATIONS,
                            ITBNOADMINBASELIQCERTIFS,
                            ITBNOADMINBASEBILLCERTIFS,
                            ITBLIQCERTIFICATES,
                            ITBBILLCERTIFICATES,
                            ITBORDERITEMSINCACHE,
                            ITBCERTDETAILSBYITEM,
                            ITBITEMLOCSIMPLE,
                            ITBITEMNOVELSIGN,
                            ITBORDERWITHCERT,
                            ITBSIMPLECONDPLANCACHE,
                            ITBCONDITIONSBYITEMCACHE,
                            ITBCONDITIONSBYITEMCLASSCACHE,
                            ITBITEMSCACHE,
                            IBLUSEINSTANCE,
                            IBLHASORITLEVELFORMCON,
                            ITBOBJECTSBYPERIOD
                        );

                        IF NOT CT_BOCERTIFICATECONTROL.BLISEXCLUDE THEN
                            DAOR_ORDER.UPDIS_PENDING_LIQ(TBNEWNOVORDERS(NUORDERINDEX).ORDER_ID, NULL);
                        END IF;

                        
                        NUORDERINDEX := TBNEWNOVORDERS.NEXT(NUORDERINDEX);
                    END LOOP;
                    CT_BOCERTIFICATECONTROL.BLISEXCLUDE := FALSE;
                END IF;
            END IF;
        END IF;
        
        
        IF IRCORDER.HASBILLING_ACTIVITY = GE_BOCONSTANTS.CSBYES THEN
            ERRORS.SETERROR(6962, IRCORDER.ORDER_ID);
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                IRCORDER.ORDER_ID,
                NULL,
                NULL
            );
        ELSIF (CT_BOCERTIFICATECONTROL.BLISEXCLUDE = FALSE) THEN
            IF ITBSIMPLECONDITEM.COUNT > 0 THEN
                
                CT_BOLIQUIDATIONPROCESS.PROCESSORDERSIMPLECOND
                (
                    IRCORDER,
                    ITBSIMPLECONDITEM,
                    IDTBREAKDATE,
                    INUCONTRACTID,
                    INUPERIODID,
                    INUADMINBASEID,
                    INUCONTRACTORID,
                    ITBNOADMINBASELIQCERTIFS,
                    ITBNOADMINBASEBILLCERTIFS,
                    ITBLIQCERTIFICATES,
                    ITBBILLCERTIFICATES,
                    IBLNEWOBLIGATIONS,
                    ITBORDERITEMSINCACHE,
                    ITBOPERUNITSINCACHE,
                    ITBCERTDETAILSBYITEM,
                    ITBITEMLOCSIMPLE,
                    ITBITEMNOVELSIGN,
                    ITBSIMPLECONDPLANCACHE
                );
            END IF;
            
            IF(IBLHASORITLEVELFORMCON) THEN
                
                CT_BOLIQUIDATIONPROCESS.PROCESSORDER
                (
                    INUCONDPLANID,
                    IDTBREAKDATE,
                    INUCONTRACTID,
                    INUPERIODID,
                    INUADMINBASEID,
                    IRCCONTRACT,
                    INUCONTRACTORINSTANCE,
                    ITBNOADMINBASELIQCERTIFS,
                    ITBNOADMINBASEBILLCERTIFS,
                    ITBLIQCERTIFICATES,
                    ITBBILLCERTIFICATES,
                    IBLNEWOBLIGATIONS,
                    ITBORDERITEMSINCACHE,
                    ITBCONDITIONSBYITEMCACHE,
                    ITBITEMSCACHE,
                    ITBCONDITIONSBYITEMCLASSCACHE,
                    IRCORDER,
                    ITBFORMCONDITIONS,
                    ITBITEMNOVELSIGN,
                    ITBORDERWITHCERT,
                    RCOPERATINGUNIT,
                    ITBOBJECTSBYPERIOD
                );
            END IF;
        END IF;
        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ExecuteConditionsByOrden',2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            NULL;
        WHEN OTHERS THEN
        	ERRORS.SETERROR;
    END EXECUTECONDITIONSBYORDEN;
    
    






































    PROCEDURE PROCESSCONDITIONS
    (
        INUCONDPLANID               IN             CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE,
        IRCCONTRACT                 IN             DAGE_CONTRATO.STYGE_CONTRATO,
        IDTBREAKDATE                IN             GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID               IN             GE_ACTA.ID_CONTRATO%TYPE,
        INUCONTRACTTYPEID           IN             GE_CONTRATO.ID_TIPO_CONTRATO%TYPE,
        INUCONTRACTORID             IN             GE_CONTRATO.ID_CONTRATISTA%TYPE,
        INUPERIODID	                IN             GE_ACTA.ID_PERIODO%TYPE,
        INUADMINBASEID	            IN             GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        INUCONTRACTORINSTANCE       IN OUT NOCOPY  GE_BOINSTANCECONTROL.STYNUINDEX,
        ITBOPERUNITSINCACHE         IN OUT NOCOPY  DAOR_OPERATING_UNIT.TYTBOR_OPERATING_UNIT,
        IBLISONLYREGEN              IN             BOOLEAN,
        IBLISCLOSINGCONTRACT        IN             BOOLEAN,
        ITBNOADMINBASELIQCERTIFS    IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS   IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES          IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES         IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBITEMNOVELSIGN            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBNOVELTYITEMS,
        ITBORDERWITHCERT            IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER,
        ITBORDERITEMSINCACHE        IN OUT NOCOPY  CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMS,
        ITBCONDPLANSBYPERSON        IN OUT NOCOPY  CT_BCCONTRACT.TYTBCONDITIONSPLANID,
        ITBCONDPLANSBYPERSONTYPE    IN OUT NOCOPY  CT_BCCONTRACT.TYTBCONDITIONSPLANID
    )
    IS

        TBEXCCONDITIONS             CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS;
        TBNOVCONDITIONS             CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS;
        TBFORMCONDITIONS            CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS;
        
        TBCONDITIONSBYITEMCACHE         CT_BCLIQUIDATIONSUPPORT.TYTBCONDITIONSBYITEMCACHE;
        TBCONDITIONSBYITEMCLASSIFCACHE  CT_BCLIQUIDATIONSUPPORT.TYTBCONDITIONSBYITEMCLCACHE;
        TBITEMSCACHE                CT_BCLIQUIDATIONSUPPORT.TYTBITEMSCACHE;
        
        NUORDERINDEX                PLS_INTEGER;
        

        BLNEWOBLIGATIONS            BOOLEAN;                                    
        
        TBSIMPLECONDBYITEM      DACT_SIMPLE_CONDITION.TYTBITEMS_ID;
        
        NUITEMSIMPLEINDEX       BINARY_INTEGER;
        TBSIMPLECONDPLANCACHE   CT_BCLIQUIDATIONSUPPORT.TYTBSIMPLECONDPLANCACHE;
        SBINDEX                 VARCHAR2(500);
        
        RCCERTDETAIL            DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;
        NUCERTIFICATEID         GE_ACTA.ID_ACTA%TYPE;

        BLNOADMINBASELIQCERTIF  BOOLEAN := FALSE;
        BLLIQCERTIFICATE        BOOLEAN := FALSE;
        BLNOADMINBASEBILLCERTIF BOOLEAN := FALSE;
        BLBILLCERTIFICATE       BOOLEAN := FALSE;

        TBCERTDETAILSBYITEM     CT_BCLIQUIDATIONSUPPORT.TYTBCERTDETAILSBYSIMPLE;
        TBSIMPLECONDITEM        CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN;
        TBITEMLOCSIMPLE         CT_BCCONDITIONPLAN.TYTBSIMPLECONDPLAN_VARCHAR;
        
        TBLIQCONDITIONS         CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS;
        TBBILLCONDITIONS        CT_BCLIQUIDATIONSUPPORT.TYTBFORMCONDITIONS;
        NUADMINBASEID           GE_BASE_ADMINISTRA.ID_BASE_ADMINISTRA%TYPE;
        
        BLUSEINSTANCE           BOOLEAN := FALSE;
        BLHASORITLEVELFORMCON   BOOLEAN := FALSE;
        
        TBPERSONS               CT_BCCONTRACTOR.TYTBPERSON;
        NUCONDPLANID            CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE;
        
        TBOBJECTSBYPERIOD       CT_BCLIQUIDATIONSUPPORT.TYTBOBJECTSBYPERIOD;
        
        TBORDERSTOPROCESS       CT_BCLIQUIDATIONSUPPORT.TYTBORDERS;
        SBPIVOT                 TMP_VARCHAR.FIELD%TYPE := '0';
        BLPROCESSORDERS         BOOLEAN := TRUE;
        
        SBTYPETOGETORDERS       CT_TASKTYPE_CONTYPE.FLAG_TYPE%TYPE;         
        
    BEGIN

        UT_TRACE.TRACE('Inicio CT_BOLiquidationProcess.ProcessConditions',2);
        SAVEPOINT SP_SIMPLECONDWITHLEVEL;
        
        IF NOT IBLISONLYREGEN THEN
            
            SBTYPETOGETORDERS := CT_BOLIQUIDATIONSUPPORT.FSBGETTYPETOGETORDERS(INUCONTRACTID,INUCONTRACTTYPEID);
            
            
            CT_BOLIQUIDATIONSUPPORT.SETORDERSTOPROCESS
            (
                INUCONTRACTID,
                INUADMINBASEID,
                IDTBREAKDATE
            );
        END IF;
        
        
        BLNEWOBLIGATIONS := FALSE;

        
        
        IF (NOT IBLISCLOSINGCONTRACT) THEN
        
             
            CT_BOLIQUIDATIONPROCESS.PROCSIMPLECONDWITHOUTLEVEL
            (
                INUCONDPLANID,
                IDTBREAKDATE,
                INUCONTRACTID,
                INUPERIODID,
                IRCCONTRACT.ID_CONTRATISTA,
                ITBNOADMINBASELIQCERTIFS,
                ITBNOADMINBASEBILLCERTIFS,
                BLNEWOBLIGATIONS
            );

        END IF;
        
        
        CT_BCLIQUIDATIONSUPPORT.GETORDERSBLOCK
        (
            TBORDERSTOPROCESS,
            SBPIVOT
        );
        
        
        IF TBORDERSTOPROCESS.COUNT = 0 THEN
            
            ERRORS.SETERROR(5784, INUCONTRACTID);
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
        
        ELSIF INUCONDPLANID IS NOT NULL THEN
        
            
            CT_BCCONDITIONS.GETNOLIQCONDBYPLAN
            (
                INUCONDPLANID,
                CT_BOCONSTANTS.FSBGETEXCLUSIONCONDLEVEL,
                TBEXCCONDITIONS
            );

            
            CT_BCCONDITIONS.GETNOLIQCONDBYPLAN
            (
                INUCONDPLANID,
                CT_BOCONSTANTS.FSBGETNOVELTYCONDLEVEL,
                TBNOVCONDITIONS
            );

            
            CT_BCCONDITIONPLAN.GETSIMPLEITEMS
            (
                INUCONDPLANID,
                IDTBREAKDATE,
                CT_BOCONSTANTS.CSBORDERLEVEL,
                NULL,
                TBSIMPLECONDBYITEM
            );

            
            CT_BCCONDITIONS.GETCONDITIONSBYCONPLAN
            (
                INUCONDPLANID,
                NULL,
                CT_BOCONSTANTS.FSBGETORDERCONDLEVEL,
                TBFORMCONDITIONS
            );


            
            IF  (TBEXCCONDITIONS.COUNT > 0 OR TBNOVCONDITIONS.COUNT > 0 OR
                TBFORMCONDITIONS.COUNT > 0)  THEN
                BLUSEINSTANCE := TRUE;
                
                BLHASORITLEVELFORMCON := CT_BCCONDITIONS.FBLPLANHASORITLEVELCON
                                         (
                                            INUCONDPLANID
                                         );
            END IF;
            
            
            IF (TBSIMPLECONDBYITEM.COUNT = 0) THEN

                
                ERRORS.SETERROR(901267, INUCONDPLANID);

                
                CT_BOPROCESSLOG.REGISTERPROCESSLOG
                (
                    IRCCONTRACT.ID_CONTRATO,
                    INUPERIODID,
                    IDTBREAKDATE,
                    NULL,
                    NULL,
                    NULL
                );

            ELSE
                
                NUITEMSIMPLEINDEX := TBSIMPLECONDBYITEM.FIRST;
                LOOP
                    EXIT WHEN NUITEMSIMPLEINDEX IS NULL;
                    
                    
                    CT_BCCONDITIONPLAN.GETSIMPLESCONDITIONSBYITEM
                    (
                        INUCONDPLANID,
                        TBSIMPLECONDBYITEM(NUITEMSIMPLEINDEX),
                        IDTBREAKDATE,
                        CT_BOCONSTANTS.CSBORDERLEVEL,
                        TBSIMPLECONDITEM
                    );

                    
                    TBSIMPLECONDPLANCACHE(TBSIMPLECONDBYITEM(NUITEMSIMPLEINDEX)) := TBSIMPLECONDITEM;

                    NUITEMSIMPLEINDEX :=  TBSIMPLECONDBYITEM.NEXT(NUITEMSIMPLEINDEX);

                END LOOP;
            END IF;
            IF BLUSEINSTANCE THEN
                
                CT_BOLIQUIDATIONSUPPORT.LOADGLOBALDATA
                (
                    INUCONTRACTORINSTANCE,
                    IRCCONTRACT,
                    INUPERIODID,
                    IDTBREAKDATE
                );

                
                CT_BOLIQUIDATIONSUPPORT.LOADCONDITIONSPLAN
                (
                    INUCONTRACTORINSTANCE,
                    INUCONDPLANID
                );
            END IF;
            
            LOOP
                EXIT WHEN TBORDERSTOPROCESS.COUNT = 0;
                
                NUORDERINDEX := TBORDERSTOPROCESS.FIRST;
                LOOP
                    EXIT WHEN NUORDERINDEX IS NULL;

                    CT_BOLIQUIDATIONPROCESS.EXECUTECONDITIONSBYORDEN
                    (
                        INUCONDPLANID,
                        IDTBREAKDATE,
                        INUCONTRACTID,
                        INUPERIODID,
                        INUADMINBASEID,
                        IRCCONTRACT,
                        INUCONTRACTORID,
                        INUCONTRACTORINSTANCE,
                        ITBOPERUNITSINCACHE,
                        TBORDERSTOPROCESS(NUORDERINDEX),
                        TBEXCCONDITIONS,
                        TBNOVCONDITIONS,
                        TBSIMPLECONDBYITEM,
                        TBFORMCONDITIONS,
                        IBLISONLYREGEN,
                        BLNEWOBLIGATIONS,
                        ITBNOADMINBASELIQCERTIFS,
                        ITBNOADMINBASEBILLCERTIFS,
                        ITBLIQCERTIFICATES,
                        ITBBILLCERTIFICATES,
                        ITBORDERITEMSINCACHE,
                        TBCERTDETAILSBYITEM,
                        TBITEMLOCSIMPLE,
                        ITBITEMNOVELSIGN,
                        ITBORDERWITHCERT,
                        TBSIMPLECONDPLANCACHE,
                        TBCONDITIONSBYITEMCACHE,
                        TBCONDITIONSBYITEMCLASSIFCACHE,
                        TBITEMSCACHE,
                        BLUSEINSTANCE,
                        BLHASORITLEVELFORMCON,
                        TBOBJECTSBYPERIOD
                    );
                
                    
                    
                    IF NOT CT_BOCERTIFICATECONTROL.BLISEXCLUDE THEN
                        DAOR_ORDER.UPDIS_PENDING_LIQ(TBORDERSTOPROCESS(NUORDERINDEX).ORDER_ID, NULL);
                    END IF;
                    
                    NUORDERINDEX := TBORDERSTOPROCESS.NEXT(NUORDERINDEX);
                END LOOP;
                
                SBPIVOT := TBORDERSTOPROCESS(TBORDERSTOPROCESS.LAST).FIELD;
                
                TBORDERSTOPROCESS.DELETE;
                
                
                CT_BCLIQUIDATIONSUPPORT.GETORDERSBLOCK
                (
                    TBORDERSTOPROCESS,
                    SBPIVOT
                );
            END LOOP;

            
            
            IF TBCERTDETAILSBYITEM.COUNT > 0 THEN

                SBINDEX := TBCERTDETAILSBYITEM.FIRST;
                LOOP
                    EXIT WHEN SBINDEX IS NULL;

                    
                    CT_BOLIQUIDATIONSUPPORT.PROCESSDETAILSBYORDERITEM
                    (
                        TBCERTDETAILSBYITEM(SBINDEX),
                        IDTBREAKDATE,
                        INUCONTRACTID,
                        INUCONTRACTORID,
                        INUPERIODID,
                        BLNEWOBLIGATIONS,
                        ITBORDERWITHCERT
                    );

                    SBINDEX := TBCERTDETAILSBYITEM.NEXT(SBINDEX);
                END LOOP;
            END IF;

            
            IF (   (ITBNOADMINBASELIQCERTIFS.COUNT > 0)
                OR (ITBLIQCERTIFICATES.COUNT > 0)) THEN
                BLNEWOBLIGATIONS := TRUE;
                
                CT_BCCONDITIONS.GETCONDITIONSBYCONPLAN
                (
                    INUCONDPLANID,
                    CT_BOCONSTANTS.FNUGETLIQUIDATIONCERTITYPE,
                    CT_BOCONSTANTS.FSBGETCERTIFICATECONDLEVEL,
                    TBLIQCONDITIONS
                );

                
                IF (ITBNOADMINBASELIQCERTIFS.COUNT > 0) THEN
                    SBINDEX := ITBNOADMINBASELIQCERTIFS.FIRST;
                    LOOP
                        EXIT WHEN SBINDEX IS NULL;

                        CT_BOLIQUIDATIONPROCESS.PROCESSCERTIFICATE
                        (
                            IDTBREAKDATE,
                            INUCONTRACTID,
                            INUPERIODID,
                            INUCONDPLANID,
                            INUCONTRACTORINSTANCE,
                            TBITEMSCACHE,
                            ITBNOADMINBASELIQCERTIFS(SBINDEX),
                            NULL,
                            TBLIQCONDITIONS,
                            TBOBJECTSBYPERIOD
                        );

                        SBINDEX := ITBNOADMINBASELIQCERTIFS.NEXT(SBINDEX);
                    END LOOP;
                END IF;

                
                IF (ITBLIQCERTIFICATES.COUNT > 0) THEN
                    NUADMINBASEID := ITBLIQCERTIFICATES.FIRST;
                    LOOP
                        EXIT WHEN NUADMINBASEID IS NULL;

                        CT_BOLIQUIDATIONPROCESS.PROCESSCERTIFICATE
                        (
                            IDTBREAKDATE,
                            INUCONTRACTID,
                            INUPERIODID,
                            INUCONDPLANID,
                            INUCONTRACTORINSTANCE,
                            TBITEMSCACHE,
                            ITBLIQCERTIFICATES(NUADMINBASEID),
                            NUADMINBASEID,
                            TBLIQCONDITIONS,
                            TBOBJECTSBYPERIOD
                        );

                        NUADMINBASEID := ITBLIQCERTIFICATES.NEXT(NUADMINBASEID);
                    END LOOP;
                END IF;
            END IF;

            
            IF (   (ITBNOADMINBASEBILLCERTIFS.COUNT > 0)
                OR (ITBBILLCERTIFICATES.COUNT > 0)) THEN
                BLNEWOBLIGATIONS := TRUE;
                
                CT_BCCONDITIONS.GETCONDITIONSBYCONPLAN
                (
                    INUCONDPLANID,
                    CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE,
                    CT_BOCONSTANTS.FSBGETCERTIFICATECONDLEVEL,
                    TBBILLCONDITIONS
                );

                
                IF (ITBNOADMINBASEBILLCERTIFS.COUNT > 0) THEN
                    SBINDEX := ITBNOADMINBASEBILLCERTIFS.FIRST;
                    LOOP
                        EXIT WHEN SBINDEX IS NULL;

                        CT_BOLIQUIDATIONPROCESS.PROCESSCERTIFICATE
                        (
                            IDTBREAKDATE,
                            INUCONTRACTID,
                            INUPERIODID,
                            INUCONDPLANID,
                            INUCONTRACTORINSTANCE,
                            TBITEMSCACHE,
                            ITBNOADMINBASEBILLCERTIFS(SBINDEX),
                            NULL,
                            TBBILLCONDITIONS,
                            TBOBJECTSBYPERIOD
                        );

                        SBINDEX := ITBNOADMINBASEBILLCERTIFS.NEXT(SBINDEX);
                    END LOOP;
                END IF;
                
                IF (ITBBILLCERTIFICATES.COUNT > 0) THEN
                    NUADMINBASEID := ITBBILLCERTIFICATES.FIRST;
                    LOOP
                        EXIT WHEN NUADMINBASEID IS NULL;

                        CT_BOLIQUIDATIONPROCESS.PROCESSCERTIFICATE
                        (
                            IDTBREAKDATE,
                            INUCONTRACTID,
                            INUPERIODID,
                            INUCONDPLANID,
                            INUCONTRACTORINSTANCE,
                            TBITEMSCACHE,
                            ITBBILLCERTIFICATES(NUADMINBASEID),
                            NUADMINBASEID,
                            TBBILLCONDITIONS,
                            TBOBJECTSBYPERIOD
                        );

                        NUADMINBASEID := ITBBILLCERTIFICATES.NEXT(NUADMINBASEID);
                    END LOOP;
                END IF;
            END IF;

            
            IF ((NOT BLHASORITLEVELFORMCON) AND BLUSEINSTANCE) THEN
                DECLARE
                    RCPERSON CT_BCCONTRACTOR.TYPERSON;
                BEGIN
                    IF INUADMINBASEID IS NOT NULL  THEN
                        ERRORS.SETERROR(CNUERROR_CONTRACT_ADMINBASE,
                                INUCONTRACTID||'|'||INUADMINBASEID||'|'||INUCONDPLANID);
                        
                        CT_BOPROCESSLOG.REGISTERPROCESSLOG(INUCONTRACTID,
                                                   INUPERIODID,
                                                   IDTBREAKDATE,
                                                   NULL,
                                                   NULL,
                                                   NULL);
                    ELSE
                        
                        CT_BOLIQUIDATIONPROCESS.PROCESSCONTRACTNOSTATEMENT
                        (
                            INUCONDPLANID,
                            IDTBREAKDATE,
                            INUCONTRACTID,
                            INUPERIODID,
                            INUADMINBASEID,
                            INUCONTRACTORINSTANCE,
                            BLNEWOBLIGATIONS,
                            ITBNOADMINBASELIQCERTIFS,
                            ITBNOADMINBASEBILLCERTIFS,
                            ITBLIQCERTIFICATES,
                            ITBBILLCERTIFICATES,
                            TBITEMSCACHE,
                            RCPERSON,
                            TBOBJECTSBYPERIOD
                        );
                    END IF;
                END;
            END IF;
        END IF;
        
        
        IF (   (ITBCONDPLANSBYPERSON.COUNT <> 0)
            OR (ITBCONDPLANSBYPERSONTYPE.COUNT <> 0)) THEN
            
            IF (INUCONDPLANID IS NULL) THEN
                ERRORS.SETERROR(CNUMESS_NO_CONPLAN);
                
                CT_BOPROCESSLOG.REGISTERPROCESSLOG(INUCONTRACTID,
                                               INUPERIODID,
                                               IDTBREAKDATE,
                                               NULL,
                                               NULL,
                                               NULL);
            END IF;
            
            IF INUADMINBASEID IS NOT NULL  THEN
                ERRORS.SETERROR(CNUERROR_CONTRACT_ADMINBASE,
                        INUCONTRACTID||'|'||INUADMINBASEID||'|'||INUCONDPLANID);
                
                CT_BOPROCESSLOG.REGISTERPROCESSLOG(INUCONTRACTID,
                                           INUPERIODID,
                                           IDTBREAKDATE,
                                           NULL,
                                           NULL,
                                           NULL);
            ELSE
                
                CT_BCCONTRACTOR.GETPERSONS
                (
                    IRCCONTRACT.ID_CONTRATISTA,
                    TBPERSONS
                );
                
                IF (TBPERSONS.COUNT > 0) THEN
                    FOR N IN TBPERSONS.FIRST..TBPERSONS.LAST LOOP
                        IF (ITBCONDPLANSBYPERSON.EXISTS(TBPERSONS(N).PERSON_ID)) THEN
                            NUCONDPLANID := ITBCONDPLANSBYPERSON(TBPERSONS(N).PERSON_ID);
                            
                            CT_BOLIQUIDATIONSUPPORT.LOADCONDITIONSPLAN
                            (
                                INUCONTRACTORINSTANCE,
                                NUCONDPLANID
                            );

                            
                            CT_BOLIQUIDATIONPROCESS.PROCESSCONTRACTNOSTATEMENT
                            (
                                NUCONDPLANID,
                                IDTBREAKDATE,
                                INUCONTRACTID,
                                INUPERIODID,
                                INUADMINBASEID,
                                INUCONTRACTORINSTANCE,
                                BLNEWOBLIGATIONS,
                                ITBNOADMINBASELIQCERTIFS,
                                ITBNOADMINBASEBILLCERTIFS,
                                ITBLIQCERTIFICATES,
                                ITBBILLCERTIFICATES,
                                TBITEMSCACHE,
                                TBPERSONS(N),
                                TBOBJECTSBYPERIOD
                            );
                        ELSE
                            IF (ITBCONDPLANSBYPERSONTYPE.EXISTS(TBPERSONS(N).PERSONAL_TYPE)) THEN
                                NUCONDPLANID := ITBCONDPLANSBYPERSONTYPE(TBPERSONS(N).PERSONAL_TYPE);
                                
                                CT_BOLIQUIDATIONSUPPORT.LOADCONDITIONSPLAN
                                (
                                    INUCONTRACTORINSTANCE,
                                    NUCONDPLANID
                                );
                                
                                CT_BOLIQUIDATIONPROCESS.PROCESSCONTRACTNOSTATEMENT
                                (
                                    NUCONDPLANID,
                                    IDTBREAKDATE,
                                    INUCONTRACTID,
                                    INUPERIODID,
                                    INUADMINBASEID,
                                    INUCONTRACTORINSTANCE,
                                    BLNEWOBLIGATIONS,
                                    ITBNOADMINBASELIQCERTIFS,
                                    ITBNOADMINBASEBILLCERTIFS,
                                    ITBLIQCERTIFICATES,
                                    ITBBILLCERTIFICATES,
                                    TBITEMSCACHE,
                                    TBPERSONS(N),
                                    TBOBJECTSBYPERIOD
                                );
                            ELSE
                                
                                ERRORS.SETERROR(CNUMESS_NO_PERSON,
                                                TBPERSONS(N).PERSON_ID);
                                
                                CT_BOPROCESSLOG.REGISTERPROCESSLOG
                                (
                                    INUCONTRACTID,
                                    INUPERIODID,
                                    IDTBREAKDATE,
                                    NULL,
                                    NULL,
                                    NULL
                                );
                            END IF;
                        END IF;
                    END LOOP;
                END IF;
            END IF;
        END IF;
        
        
        
        IF (IBLISCLOSINGCONTRACT AND BLNEWOBLIGATIONS) THEN

             
            CT_BOLIQUIDATIONPROCESS.PROCSIMPLECONDWITHOUTLEVEL
            (
                INUCONDPLANID,
                IDTBREAKDATE,
                INUCONTRACTID,
                INUPERIODID,
                IRCCONTRACT.ID_CONTRATISTA,
                ITBNOADMINBASELIQCERTIFS,
                ITBNOADMINBASEBILLCERTIFS,
                BLNEWOBLIGATIONS
            );

        END IF;
        
        
        CT_BOLIQUIDATIONPROCESS.PROCSIMPLECONDLEVCERT
        (
            INUCONDPLANID,
            IDTBREAKDATE,
            IRCCONTRACT,
            INUPERIODID,
            ITBNOADMINBASELIQCERTIFS,
            ITBNOADMINBASEBILLCERTIFS,
            ITBLIQCERTIFICATES,
            ITBBILLCERTIFICATES
        );
        
        
        IF (NOT(BLNEWOBLIGATIONS)) THEN
            ERRORS.SETERROR(7682, INUCONTRACTID);
            
            CT_BOPROCESSLOG.REGISTERPROCESSLOG
            (
                INUCONTRACTID,
                INUPERIODID,
                IDTBREAKDATE,
                NULL,
                NULL,
                NULL
            );
        END IF;

        UT_TRACE.TRACE('Termina CT_BOLiquidationProcess.ProcessConditions',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSCONDITIONS;

    










































































    PROCEDURE GENERATECONTRACTOBLIG
    (
        INUPERIODID	               IN            GE_ACTA.ID_PERIODO%TYPE,
        INUCONTRACTID              IN            GE_ACTA.ID_CONTRATO%TYPE,
        INUADMINBASEID	           IN            GE_ACTA.ID_BASE_ADMINISTRATIVA%TYPE,
        IDTBREAKDATE               IN            GE_ACTA.FECHA_FIN%TYPE,
        ITBNOADMINBASELIQCERTIFS   IN OUT NOCOPY CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBNOADMINBASEBILLCERTIFS  IN OUT NOCOPY CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBLIQCERTIFICATES         IN OUT NOCOPY CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        ITBBILLCERTIFICATES        IN OUT NOCOPY CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID,
        IBLISONLYREGEN             IN            BOOLEAN,
        OTBCERTIFICATES            IN OUT NOCOPY DAGE_ACTA.TYTBID_ACTA,
        IBLISCLOSINGCONTRACT       IN            BOOLEAN DEFAULT FALSE

    )
    IS
        RCCONTRACT                  DAGE_CONTRATO.STYGE_CONTRATO;               
        
        NUCONDPLANID                CT_CONDITIONS_PLAN.CONDITIONS_PLAN_ID%TYPE; 
        
        TBCONDPLANSBYPERSON         CT_BCCONTRACT.TYTBCONDITIONSPLANID;         
        TBCONDPLANSBYPERSONTYPE     CT_BCCONTRACT.TYTBCONDITIONSPLANID;         
        
        TBORDERS                    CT_BCLIQUIDATIONSUPPORT.TYTBORDERS;         
        
        TBORDERITEMSINCACHE         CT_BCLIQUIDATIONSUPPORT.TYTBORDERITEMS;
        TBOPERUNITSINCACHE          DAOR_OPERATING_UNIT.TYTBOR_OPERATING_UNIT;
        TBORDERSVERS                CT_BCLIQUIDATIONSUPPORT.TYTBORDERSVER;
        
        NUCONTRACTORINSTANCE        GE_BOINSTANCECONTROL.STYNUINDEX;            
        
        TBITEMNOVELSIGN             CT_BCLIQUIDATIONSUPPORT.TYTBNOVELTYITEMS;   
        
        TBORDERWITHCERT             CT_BCLIQUIDATIONSUPPORT.TYTBORDERSWITHCER;  
        BLCOMMIT                    BOOLEAN;
        
        NURESPLOCK          NUMBER;

        
        CSBPROCESS          CONSTANT VARCHAR2(20) := 'CTCCO_GEN';
    


    BEGIN
        
        BLCOMMIT := NVL(NOT IBLISONLYREGEN,TRUE);
        
        
        NURESPLOCK := UT_LOCK.FNULOCK(CSBPROCESS||INUCONTRACTID,
                                      DBMS_LOCK.X_MODE,
                                      0,
                                      FALSE,
                                      0);

        IF ( NURESPLOCK IN (1,2) ) THEN
            ERRORS.SETERROR(CNUCONCERROR, INUCONTRACTID);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        
        DAGE_CONTRATO.GETRECORD
        (
            INUCONTRACTID,
            RCCONTRACT
        );

        
        CT_BCCONTRACT.GETCONDITIONSPLAN
        (
            INUCONTRACTID,
            IDTBREAKDATE,
            NUCONDPLANID
        );

        
        IF (NUCONDPLANID IS NULL) THEN
            CT_BCCONTRACTTYPE.GETCONDITIONSPLAN
            (
                RCCONTRACT.ID_TIPO_CONTRATO,
                IDTBREAKDATE,
                NUCONDPLANID
            );
        END IF;

        
        CT_BCCONTRACT.GETCONDPLANSBYPERSON
        (
            INUCONTRACTID,
            IDTBREAKDATE,
            TBCONDPLANSBYPERSON
        );

        
        CT_BCCONTRACT.GETCONDPLANSBYPERSONTYPE
        (
            INUCONTRACTID,
            IDTBREAKDATE,
            TBCONDPLANSBYPERSONTYPE
        );

        
        IF (
                (NUCONDPLANID IS NULL)
            AND (TBCONDPLANSBYPERSON.COUNT = 0)
            AND (TBCONDPLANSBYPERSONTYPE.COUNT = 0)
            ) THEN
            ERRORS.SETERROR
            (
                5782,
                INUCONTRACTID||'|'||RCCONTRACT.ID_TIPO_CONTRATO||'|'||TO_CHAR(IDTBREAKDATE, UT_DATE.FSBDATE_FORMAT)
            );
            RAISE EX.CONTROLLED_ERROR;
            RETURN;
        END IF;

        
        CT_BOLIQUIDATIONPROCESS.PROCESSCONDITIONS
        (
            NUCONDPLANID,
            RCCONTRACT,
            IDTBREAKDATE,
            INUCONTRACTID,
            RCCONTRACT.ID_TIPO_CONTRATO,
            RCCONTRACT.ID_CONTRATISTA,
            INUPERIODID,
            INUADMINBASEID,
            NUCONTRACTORINSTANCE,
            TBOPERUNITSINCACHE,
            IBLISONLYREGEN,
            IBLISCLOSINGCONTRACT,
            ITBNOADMINBASELIQCERTIFS,
            ITBNOADMINBASEBILLCERTIFS,
            ITBLIQCERTIFICATES,
            ITBBILLCERTIFICATES,
            TBITEMNOVELSIGN,
            TBORDERWITHCERT,
            TBORDERITEMSINCACHE,
            TBCONDPLANSBYPERSON,
            TBCONDPLANSBYPERSONTYPE
        );

        
        CT_BOLIQUIDATIONSUPPORT.DELETENONUSEAUTOMORDERS
        (
            INUPERIODID,
            INUCONTRACTID,
            IDTBREAKDATE
        );
        
        
        CT_BCLIQUIDATIONSUPPORT.SETORDERSTOPENDING(BLCOMMIT);

        
        CT_BOLIQUIDATIONPROCESS.PREPAREOUTPUT
        (
            ITBLIQCERTIFICATES,
            ITBBILLCERTIFICATES,
            OTBCERTIFICATES,
            INUCONTRACTID
        );
        
        CT_BOLIQUIDATIONPROCESS.PREPAREOUTPUTNOADMINBASE
        (
            ITBNOADMINBASELIQCERTIFS,
            ITBNOADMINBASEBILLCERTIFS,
            OTBCERTIFICATES,
            INUCONTRACTID
        );
        
        UT_LOCK.UNLOCKAT(CSBPROCESS||INUCONTRACTID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_LOCK.UNLOCKAT(CSBPROCESS||INUCONTRACTID);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_LOCK.UNLOCKAT(CSBPROCESS||INUCONTRACTID);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GENERATECONTRACTOBLIG;
    
END CT_BOLIQUIDATIONPROCESS;