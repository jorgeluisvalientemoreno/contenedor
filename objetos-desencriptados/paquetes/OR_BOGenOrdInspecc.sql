PACKAGE BODY OR_BOGenOrdInspecc
IS
















































	

    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO419909';

	
	
	FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    PROCEDURE VALIDGENORDINSPECC
    (
        INUIDORDEN  IN  OR_ORDER.ORDER_ID%TYPE
    )
	IS
        TBORDENESRELACIONADAS   DAOR_RELATED_ORDER.TYTBOR_RELATED_ORDER;
		
    BEGIN
		
		UT_TRACE.TRACE('<---------------------Inicia ValidGenOrdInspecc', 15);
		UT_TRACE.TRACE('inuIdOrden: '||INUIDORDEN, 16);

        OR_BCRELATEDORDER.GETORDERSUPPORTBYORDERID(INUIDORDEN, GE_BOCONSTANTS.FNUGETTIPOTRANSINSP(), TBORDENESRELACIONADAS);
		
        UT_TRACE.TRACE('N�mero de �rdenes relacionadas: '||TBORDENESRELACIONADAS.COUNT, 16);
        IF TBORDENESRELACIONADAS.FIRST IS NOT NULL THEN
            FOR I IN TBORDENESRELACIONADAS.FIRST .. TBORDENESRELACIONADAS.LAST LOOP
                IF DAOR_ORDER_STATUS.FSBGETIS_FINAL_STATUS(DAOR_ORDER.FNUGETORDER_STATUS_ID(TBORDENESRELACIONADAS(I).RELATED_ORDER_ID)) = OR_BOCONSTANTS.CSBNO OR 
                   DAOR_ORDER.FNUGETCAUSAL_ID(TBORDENESRELACIONADAS(I).RELATED_ORDER_ID) IS NULL OR 
                   DAGE_CAUSAL.FNUGETATTRIBUTED_TO(DAOR_ORDER.FNUGETCAUSAL_ID(TBORDENESRELACIONADAS(I).RELATED_ORDER_ID)) = GE_BOCONSTANTS.FNUGETIMPUTABLEEMPRESA THEN 


                    ERRORS.SETERROR(6461, INUIDORDEN);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            END LOOP;
        END IF;
		UT_TRACE.TRACE('Fin ValidGenOrdInspecc--------------------->', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FNUCALCTIEMPOINSPECCION
    (
        INUTIEMPOINSPECCION     IN      OR_ACT_INSP_POR_ACT.TIEMPO_INSPECCION%TYPE,
        INUTIPOTRABAJO          IN      OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    RETURN OR_SCHED_PROGRAMING.DURATION%TYPE
    IS
        NUTAMANOBLOQUE      OR_TASK_TYPE_GROUP.SIZE_BLOCK%TYPE := 1;

        RCTIPOTRABAJO       DAOR_TASK_TYPE.STYOR_TASK_TYPE;
        
        NURESULT            NUMBER := 0;
    BEGIN

        RCTIPOTRABAJO := DAOR_TASK_TYPE.FRCGETRECORD(INUTIPOTRABAJO);

        IF RCTIPOTRABAJO.TASK_TYPE_GROUP_ID IS NOT NULL THEN
            NUTAMANOBLOQUE := DAOR_TASK_TYPE_GROUP.FNUGETSIZE_BLOCK(RCTIPOTRABAJO.TASK_TYPE_GROUP_ID);
        END IF;

        IF NUTAMANOBLOQUE > 0 THEN
            NURESULT := (CEIL(INUTIEMPOINSPECCION/NUTAMANOBLOQUE))*NUTAMANOBLOQUE;
        ELSE
            NURESULT := INUTIEMPOINSPECCION;
        END IF;
        
        IF NURESULT > 9999 THEN
            NURESULT := 9999;
        END IF;
        
        RETURN NURESULT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;
    
    

























    PROCEDURE GETORDERALLITEMBYORD
    (
      INUORDERID   IN OR_ORDER_ITEMS.ORDER_ID%TYPE,
      OTBORDERITEM OUT NOCOPY OR_BOGENORDINSPECC.TYTBORDERITEMS
    )
    IS
        CURSOR CUORDERITEM
        (
            NUORDERID       OR_ORDER_ITEMS.ORDER_ID%TYPE
        )
        IS
        
            SELECT
                    OR_ORDER_ITEMS.ORDER_ITEMS_ID,
                    OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT,
                    OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID,
                    OR_ORDER_ITEMS.ITEMS_ID,
                    OR_ORDER_ACTIVITY.ACTIVITY_ID,
                    OR_ORDER_ITEMS.ASSIGNED_ITEM_AMOUNT,
                    OR_ORDER_ITEMS.SERIAL_ITEMS_ID,
                    GE_ITEMS.ITEM_CLASSIF_ID,
                    OR_ACT_INSP_POR_ACT.ID_ACT_INSPECCION,
                    OR_ACT_INSP_POR_ACT.TIEMPO_INSPECCION,
                    OR_ORDER_ACTIVITY.ADDRESS_ID,
                    OR_ORDER_ACTIVITY.SUBSCRIBER_ID
            FROM  OR_ORDER, OR_ORDER_ITEMS, OR_ORDER_ACTIVITY, OR_ACT_INSP_POR_ACT, GE_ITEMS
            WHERE OR_ORDER.ORDER_ID = NUORDERID AND
                  OR_ORDER.ORDER_ID = OR_ORDER_ITEMS.ORDER_ID AND
                  OR_ORDER_ITEMS.ORDER_ITEMS_ID = OR_ORDER_ACTIVITY.ORDER_ITEM_ID(+) AND
                  OR_ORDER_ITEMS.ITEMS_ID = GE_ITEMS.ITEMS_ID AND
                  OR_ORDER_ITEMS.ITEMS_ID =  OR_ACT_INSP_POR_ACT.ID_ACTIVIDAD (+);

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF CUORDERITEM%ISOPEN THEN CLOSE CUORDERITEM; END IF;
        END;

    BEGIN
        
        UT_TRACE.TRACE('INICIO OR_BOGenOrdInspecc.GetOrderAllItemByOrd',15);

        OTBORDERITEM.DELETE;

        
        OPEN CUORDERITEM(INUORDERID);
        FETCH CUORDERITEM BULK COLLECT INTO OTBORDERITEM;
        
        
        CLOSECURSORS;

        UT_TRACE.TRACE('FIN OR_BOGenOrdInspecc.GetOrderAllItemByOrd',15);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
    		CLOSECURSORS;
			RAISE;
        WHEN OTHERS THEN
            CLOSECURSORS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    





































































    PROCEDURE GENERARORDENINSPECCION
    (
        INUIDORDEN              IN      OR_ORDER.ORDER_ID%TYPE,
        ONUIDORDENINSPECCION    OUT     OR_ORDER.ORDER_ID%TYPE,
        IBLVALIDAR              IN      BOOLEAN DEFAULT TRUE,
        IBLNOTIFICAR            IN      BOOLEAN DEFAULT TRUE,
        IBLAGENDAR              IN      BOOLEAN DEFAULT TRUE
    )
    IS
    
        TBITEMSORDEN                TYTBORDERITEMS;
        TBITEMSORDENINSPECC         DAOR_ITEMS_ORDEN_INSPE.TYTBOR_ITEMS_ORDEN_INSPE;

        RCRELACIONORDEN             DAOR_RELATED_ORDER.STYOR_RELATED_ORDER;

        NUIXITEMSORDENINSPECC       BINARY_INTEGER;
        NUIXITEMSORDEN              VARCHAR2(32);
    
        NUACTIVIDADINSPECCION       GE_ITEMS.ITEMS_ID%TYPE;
        NUORDERACTIVIDADINSPECCION  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUITEMORDEN                 GE_ITEMS.ITEMS_ID%TYPE;
        NUDIRECCIONORDEN            OR_ORDER_ACTIVITY.ADDRESS_ID%TYPE;
        NUTIEMPOINSPECCION          OR_ACT_INSP_POR_ACT.TIEMPO_INSPECCION%TYPE := 0;
        NUTIPOTRABAJOINSPECCION     OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
        NUOPSECINSPECCION           OR_OPERATING_SECTOR.OPERATING_SECTOR_ID%TYPE;
        
        CNUDIASBUSQUEDA             CONSTANT NUMBER(2) := 10;
        
        RFBLOQUESLIBRES             CONSTANTS.TYREFCURSOR;
        NUAGENDA                    OR_SCHED_PROGRAMING.SCHED_PROGRAMING_ID%TYPE;
        NUHORAINICIO                OR_SCHED_PROGRAMING.HOUR_START%TYPE;
        
        NUDUMMY                     NUMBER;
        DTDUMMY                     DATE;
        SBDUMMY                     VARCHAR2(4000);
        RIDUMMY                     ROWID;

        NUDURACIONREAL              OR_ACT_INSP_POR_ACT.TIEMPO_INSPECCION%TYPE := 0;

        RCORIGORDER                 DAOR_ORDER.STYOR_ORDER;
        RCINSPORDER                 DAOR_ORDER.STYOR_ORDER;
        NUTIEMPOINS                 OR_ACT_INSP_POR_ACT.TIEMPO_INSPECCION%TYPE;
        RCSELACTIVITY               DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        NUSELACTIVITY               OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        RCINSPACTIVITY              DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;

        NUCONTRACTID                GE_CONTRATO.ID_CONTRATO%TYPE;
    BEGIN
    
        UT_TRACE.TRACE('<---------------------Inicia GenerarOrdenInspeccion', 15);
        UT_TRACE.TRACE('inuIdOrden: '||INUIDORDEN, 16);

        IF IBLVALIDAR AND NOT OR_BCGENORDINSPECC.FBLVALIDOINSPECCIONAR(INUIDORDEN) THEN
            ERRORS.SETERROR(6461, INUIDORDEN);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        NUCONTRACTID := DAOR_ORDER.FNUGETDEFINED_CONTRACT_ID(INUIDORDEN);
        IF (NUCONTRACTID IS NOT NULL AND DAGE_CONTRATO.FSBGETSTATUS(NUCONTRACTID) = CT_BOCONSTANTS.FSBGETCLOSEDSTATUS) THEN
            
            IF (NVL(CT_BCCONTRACT.FNUCOUNTNOCLOSEOCONTRACTS(DAGE_CONTRATO.FNUGETID_CONTRATISTA(NUCONTRACTID)),0) = 0) THEN
                ERRORS.SETERROR(913139, INUIDORDEN);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        DAOR_ORDER.GETRECORD(INUIDORDEN, RCORIGORDER);

        GETORDERALLITEMBYORD(INUIDORDEN, TBITEMSORDEN);
        
        UT_TRACE.TRACE('Cantidad de �tems en la orden: '||TBITEMSORDEN.COUNT, 16);

        NUIXITEMSORDENINSPECC := 0;
        NUIXITEMSORDEN := TBITEMSORDEN.FIRST;

        WHILE NUIXITEMSORDEN IS NOT NULL LOOP

            UT_TRACE.TRACE('tbItemsOrden('||NUIXITEMSORDEN||').order_items_id; '||TBITEMSORDEN(NUIXITEMSORDEN).ORDER_ITEMS_ID, 17);
            
            IF (NVL(TBITEMSORDEN(NUIXITEMSORDEN).LEGAL_ITEM_AMOUNT, 0) > 0) THEN
                NUIXITEMSORDENINSPECC := NUIXITEMSORDENINSPECC + 1;

                TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).ID_ITEM_ORDENS_INSPE := OR_BOSEQUENCES.FNUNEXTOR_ITEMS_ORDEN_INSPE;
                TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).ID_ITEM_ORDEN        := TBITEMSORDEN(NUIXITEMSORDEN).ITEMS_ID;
                TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).ID_ACTIVIDAD         := TBITEMSORDEN(NUIXITEMSORDEN).ACTIVITY_ID;
                TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).CANT_ITEM_ASIGNADA   := TBITEMSORDEN(NUIXITEMSORDEN).ASSIGNED_ITEM_AMOUNT;
                TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).CANT_ITEM_LEGALIZADA := NVL(TBITEMSORDEN(NUIXITEMSORDEN).LEGAL_ITEM_AMOUNT, 0);
                TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).INSPECCIONADA        := OR_BOCONSTANTS.CSBNO;
                TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).MODO_INSERCION       := OR_BOCONSTANTS.CSBMODOINSERCIONCLONADO;
                TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).ID_ITEMS_SERIADO     := TBITEMSORDEN(NUIXITEMSORDEN).SERIAL_ITEMS_ID;

                IF TBITEMSORDEN(NUIXITEMSORDEN).ID_ACT_INSPECCION IS NOT NULL THEN

                    IF (NVL(TBITEMSORDEN(NUIXITEMSORDEN).TIEMPO_INSPECCION, 0) > 0) THEN

                        NUITEMORDEN := TBITEMSORDEN(NUIXITEMSORDEN).ITEMS_ID;
                        NUACTIVIDADINSPECCION := TBITEMSORDEN(NUIXITEMSORDEN).ID_ACT_INSPECCION;
                        NUTIEMPOINSPECCION := NUTIEMPOINSPECCION + TBITEMSORDEN(NUIXITEMSORDEN).TIEMPO_INSPECCION;

                        IF (RCORIGORDER.SUBSCRIBER_ID IS NULL OR
                           RCORIGORDER.SUBSCRIBER_ID = TBITEMSORDEN(NUIXITEMSORDEN).SUBSCRIBER_ID) AND
                           NUSELACTIVITY IS NULL THEN
                            NUSELACTIVITY := TBITEMSORDEN(NUIXITEMSORDEN).ORDER_ACTIVITY_ID;
                        END IF;
                    END IF;

                    IF (NUDIRECCIONORDEN IS NULL) THEN
                        NUDIRECCIONORDEN := TBITEMSORDEN(NUIXITEMSORDEN).ADDRESS_ID;
                    END IF;

                    IF TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).ID_ACTIVIDAD IS NULL THEN

                        TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).ID_ACTIVIDAD := TBITEMSORDEN(NUIXITEMSORDEN).ITEMS_ID;

                    END IF;

                END IF;
            END IF;
            
            NUIXITEMSORDEN := TBITEMSORDEN.NEXT(NUIXITEMSORDEN);
        END LOOP;
        
        IF NUACTIVIDADINSPECCION IS NULL THEN
            ERRORS.SETERROR(9661, ''||INUIDORDEN||'|'||NUITEMORDEN);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        UT_TRACE.TRACE('Actividad de inspecci�n: '||NUACTIVIDADINSPECCION, 16);

        NUOPSECINSPECCION := RCORIGORDER.OPERATING_SECTOR_ID;
        
        DAOR_ORDER_ACTIVITY.GETRECORD(NUSELACTIVITY, RCSELACTIVITY);
        
        OR_BOORDERACTIVITIES.CREATEACTIVITY
        (
            NUACTIVIDADINSPECCION,
            NULL,
            NULL,
            NULL,
            NULL,
            NUDIRECCIONORDEN,
            RCSELACTIVITY.ELEMENT_ID,
            RCSELACTIVITY.SUBSCRIBER_ID,
            RCSELACTIVITY.SUBSCRIPTION_ID,
            RCSELACTIVITY.PRODUCT_ID,
            NUOPSECINSPECCION,
            NULL,
            NULL,
            NULL,
            NULL,
            FALSE,
            NULL,
            ONUIDORDENINSPECCION,
            NUORDERACTIVIDADINSPECCION
        );

        DAOR_ORDER_ACTIVITY.GETRECORD(NUORDERACTIVIDADINSPECCION, RCINSPACTIVITY);

        
        
        
        
        RCINSPACTIVITY.ELEMENT_ID          := RCSELACTIVITY.ELEMENT_ID;
        RCINSPACTIVITY.SUBSCRIBER_ID       := RCSELACTIVITY.SUBSCRIBER_ID;
        RCINSPACTIVITY.SUBSCRIPTION_ID     := RCSELACTIVITY.SUBSCRIPTION_ID;
        RCINSPACTIVITY.PRODUCT_ID          := RCSELACTIVITY.PRODUCT_ID;
        RCINSPACTIVITY.OPERATING_SECTOR_ID := RCSELACTIVITY.OPERATING_SECTOR_ID;
        
        RCINSPACTIVITY.COMMENT_            := RCSELACTIVITY.COMMENT_;

        DAOR_ORDER_ACTIVITY.UPDRECORD(RCINSPACTIVITY);

        
        DAOR_ORDER.GETRECORD(ONUIDORDENINSPECCION,
                             RCINSPORDER);
        OR_BOORDERNUMERATOR.SETORDERNUMBER(RCINSPORDER);

        RCINSPORDER.OPERATING_SECTOR_ID := NUOPSECINSPECCION;

        RCINSPORDER.PRIORITY := RCORIGORDER.PRIORITY;

        
        DAOR_ORDER.UPDRECORD(RCINSPORDER);

        
        IF IBLNOTIFICAR THEN
            GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT( RCINSPORDER, NULL);
        END IF;
                                          
        UT_TRACE.TRACE('Orden generada, c�digo: '||ONUIDORDENINSPECCION||', actividad: '||NUORDERACTIVIDADINSPECCION, 16);

        NUIXITEMSORDENINSPECC := TBITEMSORDENINSPECC.FIRST;

        WHILE NUIXITEMSORDENINSPECC IS NOT NULL LOOP
            TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).ID_ORDEN     := ONUIDORDENINSPECCION;
            
            IF TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).ID_ACTIVIDAD IS NULL THEN
                TBITEMSORDENINSPECC(NUIXITEMSORDENINSPECC).ID_ACTIVIDAD := NUITEMORDEN;
            END IF;

            
            NUIXITEMSORDENINSPECC := TBITEMSORDENINSPECC.NEXT(NUIXITEMSORDENINSPECC);
        END LOOP;
    
        DAOR_ITEMS_ORDEN_INSPE.INSRECORDS(TBITEMSORDENINSPECC);
        
        UT_TRACE.TRACE('Actividades clonadas', 16);

        RCRELACIONORDEN.ORDER_ID            := INUIDORDEN;
        RCRELACIONORDEN.RELATED_ORDER_ID    := ONUIDORDENINSPECCION;
        RCRELACIONORDEN.RELA_ORDER_TYPE_ID  := GE_BOCONSTANTS.FNUGETTIPOTRANSINSP;
        
        DAOR_RELATED_ORDER.INSRECORD(RCRELACIONORDEN);
        
        UT_TRACE.TRACE('Registro de relaci�n de �rdenes insertado', 16);
        
        
        IF (IBLAGENDAR) THEN
            NUTIPOTRABAJOINSPECCION := RCINSPORDER.TASK_TYPE_ID;
            NUOPSECINSPECCION       := RCINSPORDER.OPERATING_SECTOR_ID;
            NUTIEMPOINSPECCION      := FNUCALCTIEMPOINSPECCION(NUTIEMPOINSPECCION, NUTIPOTRABAJOINSPECCION);

            OR_BOPROGRAMING.GETBLOCKSFREE
            (
                NUOPSECINSPECCION,
                UT_DATE.FDTADDDATE(UT_DATE.FDTSYSDATE, 1, 1),
                NUTIPOTRABAJOINSPECCION,
                NUTIEMPOINSPECCION,
                CNUDIASBUSQUEDA,
                ONUIDORDENINSPECCION,
                RFBLOQUESLIBRES
            );

            FETCH RFBLOQUESLIBRES INTO NUDUMMY,            
                                       NUDUMMY,            
                                       DTDUMMY,            
                                       NUDUMMY,            
                                       NUDUMMY,            
                                       NUDUMMY,            
                                       NUDUMMY,            
                                       NUAGENDA,           
                                       NUHORAINICIO,       
                                       NUDUMMY,            
                                       NUDUMMY,            
                                       RIDUMMY,            
                                       NUDURACIONREAL,     
                                       NUDUMMY,            
                                       SBDUMMY,            
                                       NUDUMMY;            

            IF RFBLOQUESLIBRES%FOUND THEN

                UT_TRACE.TRACE('*****************************rfBloquesLibres%found*********************', 16);

                UT_TRACE.TRACE('nuAgenda: '||NUAGENDA||', nuHoraInicio: '||NUHORAINICIO||', nuTiempoInspeccion: '||NUTIEMPOINSPECCION||'nuTipoTrabajoInspeccion, '||NUTIPOTRABAJOINSPECCION, 16);

                OR_BOPROGRAMING.RESERVETIMEBLOCK
                (
                    NUAGENDA,
                    NUHORAINICIO,
                    NUDURACIONREAL,
                    OR_BOCONSTANTS.CNUPROGCLASSRANGE,
                    NUTIPOTRABAJOINSPECCION,
                    ONUIDORDENINSPECCION,
                    NUDIRECCIONORDEN,
                    NULL,
                    NUTIEMPOINSPECCION,
                    TRUE,
                    NULL,
                    NULL
                );
            END IF;

            IF RFBLOQUESLIBRES%ISOPEN THEN
                CLOSE RFBLOQUESLIBRES;
            END IF;
            
        END IF;
        
        UT_TRACE.TRACE('Fin GenerarOrdenInspeccion--------------------->', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF RFBLOQUESLIBRES%ISOPEN THEN
               CLOSE RFBLOQUESLIBRES;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF RFBLOQUESLIBRES%ISOPEN THEN
               CLOSE RFBLOQUESLIBRES;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE FWGENERACIONINDIVIDUAL
    IS

        CNUNULL_ATTRIBUTE CONSTANT NUMBER := 2126;
        CNUSUCCESS        CONSTANT NUMBER := 9301;

        SBORDER_ID          GE_BOINSTANCECONTROL.STYSBVALUE;
        NUORDENINSPECCION   OR_ORDER.ORDER_ID%TYPE;

        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESS         GE_MESSAGE.DESCRIPTION%TYPE;
        
    BEGIN
        UT_TRACE.TRACE('<---------------------Inicia FWGeneracionIndividual', 15);
        
        SBORDER_ID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('OR_ORDER', 'ORDER_ID');

        UT_TRACE.TRACE('sbORDER_ID: '||SBORDER_ID, 16);
        
        
        

        IF (SBORDER_ID IS NULL) THEN
            ERRORS.SETERROR (CNUNULL_ATTRIBUTE, 'C�digo');
            RAISE EX.CONTROLLED_ERROR;
        END IF;


        
        
        

        GENERARORDENINSPECCION(TO_NUMBER(SBORDER_ID), NUORDENINSPECCION);
        
        COMMIT;
        
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE('WORK_INSTANCE',
                                          NULL,
                                          'SUCCESS_MESSAGE_ENTITY',
                                          'SUCCESS_MESSAGE_ATTRIBUTE',
                                          CNUSUCCESS);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE('WORK_INSTANCE',
                                          NULL,
                                          'SUCCESS_MESSAGE_ARGUMENTS_ENTITY',
                                          'SUCCESS_MESSAGE_ARGUMENTS_ATTRIBUTE',
                                          NUORDENINSPECCION);
        
        UT_TRACE.TRACE('Fin FWGeneracionIndividual--------------------->', 15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            ERRORS.GETERROR(NUERRORCODE, SBERRORMESS);
            WRITELOG(TO_NUMBER(SBORDER_ID), NUERRORCODE||' - '||SBERRORMESS);
            RAISE;
        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            ERRORS.GETERROR(NUERRORCODE, SBERRORMESS);
            WRITELOG(TO_NUMBER(SBORDER_ID), NUERRORCODE||' - '||SBERRORMESS);
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE WRITELOG
    (
        INUIDORDEN      IN      OR_ORDER.ORDER_ID%TYPE,
        ISBMENSAJE      IN      GE_LOG_ERR_INSPECC.MENSAJE_ERROR%TYPE
    )
    IS
        RCERROR     DAGE_LOG_ERR_INSPECC.STYGE_LOG_ERR_INSPECC;

        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
    
        RCERROR.ID_LOG_ERROR_INSP   := GE_BOSEQUENCE.FNUNEXTGE_LOG_ERR_INSPECC;
        RCERROR.FECHA_PROCESO       := UT_DATE.FDTSYSDATE;
        RCERROR.ID_ORDEN            := INUIDORDEN;
        RCERROR.MENSAJE_ERROR       := ISBMENSAJE;
        
        DAGE_LOG_ERR_INSPECC.INSRECORD(RCERROR);
        COMMIT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


END OR_BOGENORDINSPECC;