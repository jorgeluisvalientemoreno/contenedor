PACKAGE BODY GR_BOObject AS

































    
    
    
    CSBVERSION CONSTANT VARCHAR2(10) := 'SAO200181';
    
    
    
    
   

    FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN CSBVERSION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
   
    PROCEDURE EXECOBJECTBYNAME_IMMEDIATE   
    (   
       ISBNAME   IN  VARCHAR2,   
       ONUERRCOD OUT NUMBER,   
       OSBERRMSG OUT NOCOPY VARCHAR   
    )   
    IS   
       SBSTATEMENT VARCHAR2(200);   
    BEGIN   
       SBSTATEMENT := 'BEGIN ' || ISBNAME ||'(:1, :2);' || ' END;';   
   
       EXECUTE IMMEDIATE SBSTATEMENT USING OUT ONUERRCOD, OUT OSBERRMSG;   
   
       EXCEPTION  
        WHEN  EX.CONTROLLED_ERROR THEN  
           RAISE;  
  
       WHEN OTHERS THEN  
            ERRORS.SETERROR;   
            ERRORS.GETERROR(ONUERRCOD, OSBERRMSG);   
    END;   
   
    


















    PROCEDURE EXECOBJECTBYNAME_DBMS_SQL
    (   
       ISBNAME   IN  VARCHAR2,   
       ONUERRCOD OUT NUMBER,   
       OSBERRMSG OUT NOCOPY VARCHAR2,   
       ONUCURSOR IN OUT NOCOPY NUMBER 
    )   
    IS   
       NUFETCH NUMBER;   
       SBSTATEMENT VARCHAR2(200);   
    BEGIN   
       IF ONUCURSOR IS NULL OR NOT DBMS_SQL.IS_OPEN(ONUCURSOR) THEN

          SBSTATEMENT := 'BEGIN ' || ISBNAME ||'(:Err, :Msg);' || ' END;'; 
          ONUCURSOR   := DBMS_SQL.OPEN_CURSOR; 
   
          DBMS_SQL.PARSE(ONUCURSOR, SBSTATEMENT, DBMS_SQL.NATIVE);   
   
          DBMS_SQL.BIND_VARIABLE (ONUCURSOR, ':Err', ONUERRCOD);   
          DBMS_SQL.BIND_VARIABLE (ONUCURSOR, ':Msg', OSBERRMSG, 2000);
       END IF;   
       NUFETCH := DBMS_SQL.EXECUTE(ONUCURSOR); 
 
       DBMS_SQL.VARIABLE_VALUE(ONUCURSOR, ':Err', ONUERRCOD);   
       DBMS_SQL.VARIABLE_VALUE(ONUCURSOR, ':Msg', OSBERRMSG);
  
       EXCEPTION  
        WHEN  EX.CONTROLLED_ERROR THEN  
           RAISE;  
  
       WHEN OTHERS THEN  
            ERRORS.SETERROR;   
            ERRORS.GETERROR(ONUERRCOD, OSBERRMSG);   
    END EXECOBJECTBYNAME_DBMS_SQL;
   
    


















   PROCEDURE CLOSE (ONUCURSOR IN OUT NOCOPY NUMBER) IS
   BEGIN   
      IF ONUCURSOR IS NOT NULL AND DBMS_SQL.IS_OPEN(ONUCURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(ONUCURSOR);
      END IF;   
   END CLOSE;

    















    PROCEDURE EXECFUNCTIONBYNAME_IMMEDIATE
    (
        ISBNAME   IN VARCHAR2,
        ONUVALOR OUT NOCOPY VARCHAR
    )
    IS
        SBSTATEMENT VARCHAR2(200);
    BEGIN

        SBSTATEMENT := 'BEGIN :1 := ' || ISBNAME ||';' || ' END;';
        EXECUTE IMMEDIATE SBSTATEMENT USING OUT ONUVALOR;

    EXCEPTION

        WHEN  EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END;
   
    


















    PROCEDURE EXECFUNCTIONBYNAME_DBMS_SQL
    (
        ISBNAME   IN  VARCHAR2,
        ONUVALOR OUT NOCOPY VARCHAR,
        ONUCURSOR IN OUT NOCOPY NUMBER
    )
    IS
        NUFETCH NUMBER;
        SBSTATEMENT VARCHAR2(200);
    BEGIN
        IF ONUCURSOR IS NULL OR NOT DBMS_SQL.IS_OPEN(ONUCURSOR) THEN

            SBSTATEMENT := 'BEGIN :Value := ' || ISBNAME ||';' || ' END;';
            ONUCURSOR   := DBMS_SQL.OPEN_CURSOR;

            DBMS_SQL.PARSE(ONUCURSOR, SBSTATEMENT, DBMS_SQL.NATIVE);

            DBMS_SQL.BIND_VARIABLE (ONUCURSOR, ':Value', ONUVALOR, 2000);

        END IF;

        NUFETCH := DBMS_SQL.EXECUTE(ONUCURSOR);
        DBMS_SQL.VARIABLE_VALUE(ONUCURSOR, ':Value', ONUVALOR);

    EXCEPTION

        WHEN  EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END EXECFUNCTIONBYNAME_DBMS_SQL;

END GR_BOOBJECT;
