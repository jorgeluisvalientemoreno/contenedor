PACKAGE BODY MO_BOEXECUTOR_LOG_MOT AS
    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO335688';

    GNUERRORCODE    GE_MESSAGE.MESSAGE_ID%TYPE;
    GSBERRORMESSAGE VARCHAR2(2000);

    
    CNURECORDSTOPROCESS CONSTANT NUMBER := 3;
    
    CNUMESSAGEINTERFACECODE CONSTANT NUMBER := 7025;

    
    
    
    TYPE TYROWID            IS TABLE OF ROWID INDEX BY BINARY_INTEGER ;
    TYPE TYEXECUTORLOGMOTID IS TABLE OF MO_EXECUTOR_LOG_MOT.EXECUTOR_LOG_MOT_ID%TYPE INDEX BY BINARY_INTEGER;
    TYPE TYPACKAGEID        IS TABLE OF MO_EXECUTOR_LOG_MOT.PACKAGE_ID%TYPE INDEX BY BINARY_INTEGER;
    TYPE TYMOTIVEID         IS TABLE OF MO_EXECUTOR_LOG_MOT.MOTIVE_ID%TYPE INDEX BY BINARY_INTEGER;
    TYPE TYACTIONID         IS TABLE OF MO_EXECUTOR_LOG_MOT.ACTION_ID%TYPE INDEX BY BINARY_INTEGER;
    TYPE TYSTATUSEXECLOGID  IS TABLE OF MO_EXECUTOR_LOG_MOT.STATUS_EXEC_LOG_ID%TYPE INDEX BY BINARY_INTEGER;
    TYPE TYLOGDATE          IS TABLE OF MO_EXECUTOR_LOG_MOT.LOG_DATE%TYPE INDEX BY BINARY_INTEGER;
    TYPE TYTRYAMOUNT        IS TABLE OF MO_EXECUTOR_LOG_MOT.TRY_AMOUNT%TYPE INDEX BY BINARY_INTEGER;
    TYPE TYEXECUTORLOGID    IS TABLE OF MO_EXECUTOR_LOG_MOT.EXECUTOR_LOG_ID%TYPE INDEX BY BINARY_INTEGER;

    TYPE TYTBEXECUTORLOGMOT IS RECORD
    (
        TBROWID             TYROWID,
        TBEXECUTORLOGMOTID  TYEXECUTORLOGMOTID,
        TBPACKAGEID         TYPACKAGEID,
        TBMOTIVEID          TYMOTIVEID,
        TBACTIONID          TYACTIONID,
        TBSTATUSEXECLOGID   TYSTATUSEXECLOGID,
        TBLOGDATE           TYLOGDATE,
        TBTRYAMOUNT         TYTRYAMOUNT,
        TBEXECUTORLOGID     TYEXECUTORLOGID
	);

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;


    













    PROCEDURE GETRECORDS
        (
        INUPACKAGEID        IN MO_EXECUTOR_LOG_MOT.PACKAGE_ID%TYPE,
        INUSTATUSEXECLOGID  IN MO_EXECUTOR_LOG_MOT.STATUS_EXEC_LOG_ID%TYPE,
        OTBEXECUTORLOGMOT   OUT NOCOPY TYTBEXECUTORLOGMOT
        )
    IS
        TBROWID             TYROWID;
        TBEXECUTORLOGMOTID  TYEXECUTORLOGMOTID;
        TBPACKAGEID         TYPACKAGEID;
        TBMOTIVEID          TYMOTIVEID;
        TBACTIONID          TYACTIONID;
        TBSTATUSEXECLOGID   TYSTATUSEXECLOGID;
        TBLOGDATE           TYLOGDATE;
        TBTRYAMOUNT         TYTRYAMOUNT;
        TBEXECUTORLOGID     TYEXECUTORLOGID;
    BEGIN

        OPEN MO_BCEXECUTOR_LOG_MOT.CUEXECUTORLOGMOTBYPACK(INUPACKAGEID,INUSTATUSEXECLOGID);

        
        TBROWID.DELETE;
        TBEXECUTORLOGMOTID.DELETE;
        TBPACKAGEID.DELETE;
        TBMOTIVEID.DELETE;
        TBACTIONID.DELETE;
        TBSTATUSEXECLOGID.DELETE;
        TBLOGDATE.DELETE;
        TBTRYAMOUNT.DELETE;
        TBEXECUTORLOGID.DELETE;

        FETCH MO_BCEXECUTOR_LOG_MOT.CUEXECUTORLOGMOTBYPACK BULK COLLECT INTO TBROWID, TBEXECUTORLOGMOTID,
            TBPACKAGEID, TBMOTIVEID, TBACTIONID, TBSTATUSEXECLOGID, TBLOGDATE, TBTRYAMOUNT, TBEXECUTORLOGID
        LIMIT CNURECORDSTOPROCESS;

        
    	OTBEXECUTORLOGMOT.TBROWID              := TBROWID;
    	OTBEXECUTORLOGMOT.TBEXECUTORLOGMOTID   := TBEXECUTORLOGMOTID;
    	OTBEXECUTORLOGMOT.TBPACKAGEID          := TBPACKAGEID;
    	OTBEXECUTORLOGMOT.TBMOTIVEID           := TBMOTIVEID;
    	OTBEXECUTORLOGMOT.TBACTIONID           := TBACTIONID;
    	OTBEXECUTORLOGMOT.TBSTATUSEXECLOGID    := TBSTATUSEXECLOGID;
    	OTBEXECUTORLOGMOT.TBLOGDATE            := TBLOGDATE;
    	OTBEXECUTORLOGMOT.TBTRYAMOUNT          := TBTRYAMOUNT;
    	OTBEXECUTORLOGMOT.TBEXECUTORLOGID      := TBEXECUTORLOGID;

        CLOSE MO_BCEXECUTOR_LOG_MOT.CUEXECUTORLOGMOTBYPACK;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (MO_BCEXECUTOR_LOG_MOT.CUEXECUTORLOGMOTBYPACK%ISOPEN) THEN
                CLOSE MO_BCEXECUTOR_LOG_MOT.CUEXECUTORLOGMOTBYPACK;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (MO_BCEXECUTOR_LOG_MOT.CUEXECUTORLOGMOTBYPACK%ISOPEN) THEN
                CLOSE MO_BCEXECUTOR_LOG_MOT.CUEXECUTORLOGMOTBYPACK;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE INSTANCEDATA
        (
        IRCEXECUTORLOGMOT   IN DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT
        )
    IS
    BEGIN
        
        GE_BOINSTANCE.INIT;
        
        GE_BOINSTANCE.SETVALUE
            (
            MO_BOCONSTANTS.CSBMO_PACKAGES,
            MO_BOCONSTANTS.CSBPACKAGE_ID,
            IRCEXECUTORLOGMOT.PACKAGE_ID,
            GE_BOCONSTANTS.CNUNUMBER
            );
        
        GE_BOINSTANCE.SETVALUE
            (
            MO_BOCONSTANTS.CSBMO_MOTIVE,
            MO_BOCONSTANTS.CSBMOTIVE_ID,
            IRCEXECUTORLOGMOT.MOTIVE_ID,
            GE_BOCONSTANTS.CNUNUMBER
            );
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;


    













    FUNCTION FBLLOCKRECORD
        (
        INUEXECUTORLOGMOTID IN MO_EXECUTOR_LOG_MOT.EXECUTOR_LOG_MOT_ID%TYPE,
        ORCEXECUTORLOGMOT   OUT NOCOPY DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT
        )
    RETURN BOOLEAN
    IS
    BEGIN
        
        DAMO_EXECUTOR_LOG_MOT.LOCKBYPK(INUEXECUTORLOGMOTID,ORCEXECUTORLOGMOT);
        
        RETURN TRUE;
    EXCEPTION
		WHEN OTHERS THEN
           RETURN FALSE;
	END;


    PROCEDURE REPORTLOG
         (
         INUERRORCODE  IN NUMBER,
         ISBERRORMSG   IN VARCHAR2,
         SBMESSAGE     IN VARCHAR2,
         ONUREPORLOGID OUT NOCOPY NUMBER
        )
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        GE_BOEXECUTOR_LOG.INSERT_DEFAULT
            (
            INUERRORCODE,
            ISBERRORMSG,
            SBMESSAGE,
            ONUREPORLOGID
            );
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             RAISE EX.CONTROLLED_ERROR;
    END;


    















    PROCEDURE PROCESSERROR
        (
        IRCEXECUTORLOGMOT   IN DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT,
        INUERRORCODE        IN GE_MESSAGE.MESSAGE_ID%TYPE,
        ISBERRORMESSAGE     IN VARCHAR2
        )
    IS
        NUREPORTLOGID       NUMBER(15);
        RCEXECUTORLOGMOT    DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT;
    BEGIN
        UT_TRACE.TRACE('Inicia Proceso de Error:['||INUERRORCODE||']-['||SUBSTR(ISBERRORMESSAGE,1,2000)||']',3);

        RCEXECUTORLOGMOT := IRCEXECUTORLOGMOT;
        
        REPORTLOG
            (
            INUERRORCODE,
            ISBERRORMESSAGE,
            MO_BOCONSTANTS.CSBMOTIVE_ID || '-' || RCEXECUTORLOGMOT.MOTIVE_ID,
            NUREPORTLOGID
            );
        UT_TRACE.TRACE('Id Reporte Error:['||NUREPORTLOGID||']',3);
        RCEXECUTORLOGMOT.EXECUTOR_LOG_ID := NUREPORTLOGID;

        
        IF (NVL(INUERRORCODE,MO_BOCONSTANTS.CNUOK) <> MO_BOCONSTANTS.CNUOK) THEN
            
            RCEXECUTORLOGMOT.STATUS_EXEC_LOG_ID := MO_BOSTATUSPARAMETER.FNUGETSTATUS_RESTART_EXEC;
            
            RCEXECUTORLOGMOT.TRY_AMOUNT := RCEXECUTORLOGMOT.TRY_AMOUNT + 1;
        ELSE
            
            RCEXECUTORLOGMOT.STATUS_EXEC_LOG_ID := MO_BOSTATUSPARAMETER.FNUGETSTATUS_PROCESS_EXEC;
        END IF;

        
        DAMO_EXECUTOR_LOG_MOT.UPDRECORD(RCEXECUTORLOGMOT);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
    		RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

    
















    PROCEDURE PROCESSACTION
        (
        IRCEXECUTORLOGMOT   IN OUT DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT,
        ONUERRORCODE        OUT NOCOPY GE_MESSAGE.MESSAGE_ID%TYPE,
        OSBERRORMESSAGE     OUT NOCOPY VARCHAR2,
        IBOOVERRIDELOGDATE  IN BOOLEAN DEFAULT FALSE
        )
    IS
        NUERRORCODE    GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE VARCHAR2(2000);

        EXCALLSERVICE   EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Ejecuci?n de Acci?n:['||IRCEXECUTORLOGMOT.ACTION_ID||']',3);

        SAVEPOINT SVPROCESSACTION;
        
        IF( IBOOVERRIDELOGDATE )THEN
            IRCEXECUTORLOGMOT.LOG_DATE := SYSDATE;
            UT_TRACE.TRACE('ircExecutorLogMot.log_date '|| TO_CHAR(IRCEXECUTORLOGMOT.LOG_DATE, UT_DATE.FSBDATE_FORMAT),5);
        END IF;

        
        INSTANCEDATA(IRCEXECUTORLOGMOT);

        
        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);

        
        GE_BSACTION.EXECVALIDEXPRBYACTION
            (
            IRCEXECUTORLOGMOT.ACTION_ID,
            GE_BOMODULE.GETWORKFLOW,
            GE_BOMODULE.GETMOTIVES_MANAGEMENT,
            NUERRORCODE,
            SBERRORMESSAGE
            );
            
        IRCEXECUTORLOGMOT.EXECUTION_DATE := SYSDATE;
        
        IF (NVL(NUERRORCODE,MO_BOCONSTANTS.CNUOK) <> MO_BOCONSTANTS.CNUOK) THEN
            RAISE EXCALLSERVICE;
        END IF;

    EXCEPTION
        WHEN EXCALLSERVICE THEN
            ROLLBACK TO SVPROCESSACTION;
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                'GE_BSAction.ExecValidExprByAction' || '|' ||
                TO_CHAR(NUERRORCODE) || ' - ' || SBERRORMESSAGE
                );
			ERRORS.GETERROR(ONUERRORCODE,OSBERRORMESSAGE);
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SVPROCESSACTION;
			ERRORS.GETERROR(ONUERRORCODE,OSBERRORMESSAGE);
        WHEN OTHERS THEN
            ROLLBACK TO SVPROCESSACTION;
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE,OSBERRORMESSAGE);
    END;

    














    PROCEDURE PROCESSRECORD
    (
        IRCEXECUTORLOGMOT IN OUT DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT,
        IBOOVERRIDELOGDATE  IN BOOLEAN DEFAULT FALSE
    )
    IS
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);
    BEGIN
        UT_TRACE.TRACE('Inicia Proceso Registro:['||IRCEXECUTORLOGMOT.EXECUTOR_LOG_MOT_ID||']',3);

        
        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);

        
        PROCESSACTION(IRCEXECUTORLOGMOT,NUERRORCODE,SBERRORMESSAGE, IBOOVERRIDELOGDATE);

        
        PROCESSERROR(IRCEXECUTORLOGMOT,NUERRORCODE,SBERRORMESSAGE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;


    















    PROCEDURE PROCESSBLOCK
    (
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUSTATUSEXECLOGID  IN MO_EXECUTOR_LOG_MOT.STATUS_EXEC_LOG_ID%TYPE,
        IBOOVERRIDELOGDATE  IN BOOLEAN DEFAULT FALSE
    )
    IS
        TBEXECUTORLOGMOT        TYTBEXECUTORLOGMOT;
        TBEXECUTORLOGMOTEMPTY   TYTBEXECUTORLOGMOT;
        RCEXECUTORLOGMOT        DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT;
        NUINDEX                 BINARY_INTEGER;
    BEGIN
        LOOP
            
            TBEXECUTORLOGMOT := TBEXECUTORLOGMOTEMPTY;

            
            GETRECORDS(INUPACKAGEID,INUSTATUSEXECLOGID,TBEXECUTORLOGMOT);

            
            UT_TRACE.TRACE('Registros Obtenidos:['||TBEXECUTORLOGMOT.TBROWID.COUNT||']',3);
            EXIT WHEN TBEXECUTORLOGMOT.TBROWID.COUNT = 0;

            
        	FOR NUINDEX IN TBEXECUTORLOGMOT.TBROWID.FIRST..TBEXECUTORLOGMOT.TBROWID.LAST LOOP

                
                RCEXECUTORLOGMOT.ROWID              := TBEXECUTORLOGMOT.TBROWID(NUINDEX);
                RCEXECUTORLOGMOT.EXECUTOR_LOG_MOT_ID:= TBEXECUTORLOGMOT.TBEXECUTORLOGMOTID(NUINDEX);
                RCEXECUTORLOGMOT.PACKAGE_ID         := TBEXECUTORLOGMOT.TBPACKAGEID(NUINDEX);
                RCEXECUTORLOGMOT.MOTIVE_ID          := TBEXECUTORLOGMOT.TBMOTIVEID(NUINDEX);
                RCEXECUTORLOGMOT.ACTION_ID          := TBEXECUTORLOGMOT.TBACTIONID(NUINDEX);
                RCEXECUTORLOGMOT.STATUS_EXEC_LOG_ID := TBEXECUTORLOGMOT.TBSTATUSEXECLOGID(NUINDEX);
                RCEXECUTORLOGMOT.LOG_DATE           := TBEXECUTORLOGMOT.TBLOGDATE(NUINDEX);
                RCEXECUTORLOGMOT.TRY_AMOUNT         := TBEXECUTORLOGMOT.TBTRYAMOUNT(NUINDEX);
                RCEXECUTORLOGMOT.EXECUTOR_LOG_ID    := TBEXECUTORLOGMOT.TBEXECUTORLOGID(NUINDEX);

                
                PROCESSRECORD(RCEXECUTORLOGMOT, IBOOVERRIDELOGDATE);
            END LOOP;
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    























    PROCEDURE EXECUTEACTIONATTENTION
        (
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE DEFAULT NULL,
        INUSTATUSEXECLOGID  IN MO_EXECUTOR_LOG_MOT.STATUS_EXEC_LOG_ID%TYPE DEFAULT NULL
        )
     IS
        NUPACKAGEID             MO_EXECUTOR_LOG_MOT.PACKAGE_ID%TYPE;
        SBPACKAGEID             GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKAGES              GE_BOINSTANCECONTROL.STYSBVALUE;
        NUSTATUSEXECLOGID       MO_EXECUTOR_LOG_MOT.STATUS_EXEC_LOG_ID%TYPE;
        SBOBJECTS               VARCHAR2(32000);
        SBREPLICPACKAGES        VARCHAR2(32000);
        TBPACKAGES              UT_STRING.TYTB_STRING;
        TBPACKAGESREG           UT_STRING.TYTB_STRING;
        NUINDEX                 BINARY_INTEGER;
        BOOVERRIDELOGDATE       BOOLEAN := FALSE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOExecutor_Log_Mot.ExecuteActionAttention. Paquete:['||INUPACKAGEID||']',2);

        TBPACKAGESREG.DELETE;

        IF INUSTATUSEXECLOGID IS NOT NULL THEN
            NUSTATUSEXECLOGID := INUSTATUSEXECLOGID;
        ELSE
            NUSTATUSEXECLOGID := MO_BOSTATUSPARAMETER.FNUGETSTATUS_REGISTER_EXEC;
        END IF;

        IF (INUPACKAGEID IS NOT NULL) THEN
            TBPACKAGESREG(TBPACKAGESREG.COUNT):= UT_CONVERT.FSBNUMBERTOCHAR(INUPACKAGEID);
        END IF;

        IF TBPACKAGESREG.FIRST IS NULL THEN
            
            MO_BOREGISTERCONTROLLER.GETOBJECTS(SBOBJECTS);

            
            SBPACKAGES := UT_STRING.GETPARAMETERVALUE(SBOBJECTS,'MO_PACKAGES','|');
            UT_TRACE.TRACE('Paquetes '||SBPACKAGES,5);
            UT_STRING.EXTSTRING(SBPACKAGES,',',TBPACKAGESREG);

            
            BOOVERRIDELOGDATE := TRUE;

            

            IF TBPACKAGESREG.FIRST IS NULL THEN

                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE
                    (
                    MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,
                    NULL,
                    'MO_PACKAGES',
                    'PACKAGE_ID',
                    SBPACKAGEID
                    );

                TBPACKAGESREG(TBPACKAGESREG.COUNT):=SBPACKAGEID;
                UT_TRACE.TRACE('Paquete Work_Instance:['||NUPACKAGEID||']',3);
            END IF;
        END IF;
        NUINDEX := TBPACKAGESREG.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            
            UT_TRACE.TRACE('Se procesa acci?n para el paquete '||TBPACKAGESREG(NUINDEX),5);
            PROCESSBLOCK(TBPACKAGESREG(NUINDEX),NUSTATUSEXECLOGID, BOOVERRIDELOGDATE);
            NUINDEX := TBPACKAGESREG.NEXT(NUINDEX);
        END LOOP;

        
        SBREPLICPACKAGES := MO_BOREGISTERREPLICATE.FSBREPLICPACKAGES;
        UT_TRACE.TRACE('Paquetes Replicados:['||SBREPLICPACKAGES||']',3);

        UT_STRING.EXTSTRING(SBREPLICPACKAGES,'|',TBPACKAGES);
        NUINDEX := TBPACKAGES.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            UT_TRACE.TRACE('Paquete Replicado:['||TBPACKAGES(NUINDEX)||']',3);

            
            IF (TBPACKAGES(NUINDEX) IS NOT NULL) THEN

                
                PROCESSBLOCK(TBPACKAGES(NUINDEX),NUSTATUSEXECLOGID, BOOVERRIDELOGDATE);
            END IF;

            NUINDEX := TBPACKAGES.NEXT(NUINDEX);
        END LOOP;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOExecutor_Log_Mot.ExecuteActionAttention',2);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;

    PROCEDURE MANUALSEND
        (
        INUEXECUTORLOGMOTID IN MO_EXECUTOR_LOG_MOT.EXECUTOR_LOG_MOT_ID%TYPE,
        INUSTATUSEXECLOGID  IN MO_EXECUTOR_LOG_MOT.STATUS_EXEC_LOG_ID%TYPE DEFAULT NULL
        )
    IS
        NUERRORCODE         GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE      VARCHAR2(2000);
        RCEXECUTORLOGMOT    DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT;

        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOExecutor_Log_Mot.ManualSend',1);

        
        IF FBLLOCKRECORD(INUEXECUTORLOGMOTID,RCEXECUTORLOGMOT) THEN

            
            IF (RCEXECUTORLOGMOT.STATUS_EXEC_LOG_ID = NVL(INUSTATUSEXECLOGID,MO_BOSTATUSPARAMETER.FNUGETSTATUS_RESTART_EXEC)) THEN

                
                MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);

                
                PROCESSACTION(RCEXECUTORLOGMOT,NUERRORCODE,SBERRORMESSAGE);

                
                PROCESSERROR(RCEXECUTORLOGMOT,NUERRORCODE,SBERRORMESSAGE);

            END IF;
        END IF;
        COMMIT;

        GNUERRORCODE := NUERRORCODE;
        GSBERRORMESSAGE := SBERRORMESSAGE;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOExecutor_Log_Mot.ManualSend',1);

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            ROLLBACK;
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;

    PROCEDURE MANUALSEND
        (
        INUEXECUTORLOGMOTID IN MO_EXECUTOR_LOG_MOT.EXECUTOR_LOG_MOT_ID%TYPE,
        INUSTATUSEXECLOGID  IN MO_EXECUTOR_LOG_MOT.STATUS_EXEC_LOG_ID%TYPE,
        ONUERRORCODE        OUT GE_MESSAGE.MESSAGE_ID%TYPE,
        ONUERRORMESSAGE     OUT VARCHAR
        )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOEXECUTOR_LOG_MOT.ManualSend',1);
        GE_BOUTILITIES.INITIALIZEOUTPUT(GNUERRORCODE,GSBERRORMESSAGE);
        MANUALSEND(INUEXECUTORLOGMOTID, INUSTATUSEXECLOGID);
        ONUERRORCODE := GNUERRORCODE;
        ONUERRORMESSAGE := GSBERRORMESSAGE;
        UT_TRACE.TRACE('Finaliza MO_BOEXECUTOR_LOG_MOT.ManualSend',1);

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;

    PROCEDURE INSERTRECORD
    (
        INUPACKAGEID        IN MO_EXECUTOR_LOG_MOT.PACKAGE_ID%TYPE,
        INUMOTIVEID         IN MO_EXECUTOR_LOG_MOT.MOTIVE_ID%TYPE,
        INUACTIONID         IN MO_EXECUTOR_LOG_MOT.ACTION_ID%TYPE,
        INUSTATUSEXECLOGID  IN MO_EXECUTOR_LOG_MOT.STATUS_EXEC_LOG_ID%TYPE DEFAULT MO_BOSTATUSPARAMETER.FNUGETSTATUS_REGISTER_EXEC
    )
    IS
        RCEXECUTORLOGMOT    DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BOExecutor_log_mot.InsertRecord['||INUPACKAGEID||']['||INUMOTIVEID||']['||INUACTIONID||']['||INUSTATUSEXECLOGID||']',7);

        
        IF  (INUACTIONID IS NULL) THEN
            ERRORS.SETERROR(MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_EXEC_LOG_ACTION_NULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF  (INUSTATUSEXECLOGID IS NULL) THEN
            ERRORS.SETERROR(MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_EXEC_LOG_STATUS_NULL);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        RCEXECUTORLOGMOT.EXECUTOR_LOG_MOT_ID    := MO_BOSEQUENCES.FNUGETSEQEXECUTOR_LOG_MOT;
        RCEXECUTORLOGMOT.PACKAGE_ID             := INUPACKAGEID;
        RCEXECUTORLOGMOT.MOTIVE_ID              := INUMOTIVEID;
        RCEXECUTORLOGMOT.ACTION_ID              := INUACTIONID;
        RCEXECUTORLOGMOT.LOG_DATE               := UT_DATE.FDTSYSDATE;
        RCEXECUTORLOGMOT.STATUS_EXEC_LOG_ID     := INUSTATUSEXECLOGID;
        RCEXECUTORLOGMOT.TRY_AMOUNT             := MO_BOCONSTANTS.CNUOK;

        
        DAMO_EXECUTOR_LOG_MOT.INSRECORD(RCEXECUTORLOGMOT);

        
        MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONATTENTION(RCEXECUTORLOGMOT.PACKAGE_ID, MO_BOSTATUSPARAMETER.FNUGETSTATUS_REGISTER_EXEC);

        UT_TRACE.TRACE('End MO_BOExecutor_log_mot.InsertRecord['||RCEXECUTORLOGMOT.EXECUTOR_LOG_MOT_ID||']',7);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END INSERTRECORD;


    PROCEDURE SENDMESSAGETOQUEUE
        (
        INUEXECUTORLOGMOTID IN MO_EXECUTOR_LOG_MOT.EXECUTOR_LOG_MOT_ID%TYPE,
        INUACTIONID         IN MO_EXECUTOR_LOG_MOT.ACTION_ID%TYPE
        )
    IS
        SBMESSAGE       VARCHAR2(2000);
        NUERRORCODE     GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE  VARCHAR2(2000);
        RWMESSAGEHANDLE RAW(16);

        EXCALLSERVICE   EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOExecutor_Log_Mot.SendMessageToQueue',7);
        UT_TRACE.TRACE('Registro:['||INUEXECUTORLOGMOTID||']Acci?n:['||INUACTIONID||']',7);

        SBMESSAGE := 'HEADER>ORIG_MODULE_ID=5;DEST_MODULE_ID=5;ACTION_ID='||INUACTIONID||';'||CHR(10)
                ||'ADDITIONAL_DATA>EXECUTOR_LOG_MOT_ID='||INUEXECUTORLOGMOTID||';';
        UT_TRACE.TRACE('Mensaje:['||SBMESSAGE||']',7);

        
        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);

        
        IN_BSMESSAGESENDINTERFACE.MESSAGESEND
            (
            CNUMESSAGEINTERFACECODE,  
            'Null',
            'Null',
            UT_SESSION.GETTERMINAL,
            SYSDATE,
            SYSDATE,
            INUEXECUTORLOGMOTID,
            NULL,
            SBMESSAGE,
            NULL,
            NULL,
            RWMESSAGEHANDLE,
            NUERRORCODE,
            SBERRORMESSAGE
            );
        IF (NVL(NUERRORCODE,MO_BOCONSTANTS.CNUOK) <> MO_BOCONSTANTS.CNUOK) THEN
            RAISE EXCALLSERVICE;
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOExecutor_Log_Mot.SendMessageToQueue',7);
    EXCEPTION
        WHEN EXCALLSERVICE THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                'IN_BSMessageSend.MessageSend' || '|' ||
                TO_CHAR(NUERRORCODE) || ' - ' || SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
		WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;


    PROCEDURE PROCESSMESSAGE
    IS
        NUEXECUTORLOGMOTID  MO_EXECUTOR_LOG_MOT.EXECUTOR_LOG_MOT_ID%TYPE;
        RCEXECUTORLOGMOT    DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT;

        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOExecutor_Log_Mot.ProcessMessage',2);

        
        GE_BOINT_MESSAGE.INIT;

        
        GE_BOINT_MESSAGE.GETATTRIBUTE(GE_BOINT_MESSAGE.CSBADDITIONAL_DATA,'EXECUTOR_LOG_MOT_ID',NUEXECUTORLOGMOTID);
        UT_TRACE.TRACE('Registro:['||NUEXECUTORLOGMOTID||']',3);

        
        RCEXECUTORLOGMOT := DAMO_EXECUTOR_LOG_MOT.FRCGETRECORD(NUEXECUTORLOGMOTID);

        
        PROCESSRECORD(RCEXECUTORLOGMOT);

        COMMIT;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOExecutor_Log_Mot.ProcessMessage',2);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE  EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            ROLLBACK;
			ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
	END;
    




















	PROCEDURE EXECDEBNEGACTIONREG
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE DEFAULT NULL
    )
    IS
        RCPACKAGE           DAMO_PACKAGES.STYMO_PACKAGES;
        RCPACKAGETYPE       DAPS_PACKAGE_TYPE.STYPS_PACKAGE_TYPE;
        NUREPORLOGID        NUMBER;
        NUEXECUTORLOGMOTID  MO_EXECUTOR_LOG_MOT.EXECUTOR_LOG_MOT_ID%TYPE;

        PROCEDURE INSERTRECORD
        (
            INUPACKAGEID        IN MO_EXECUTOR_LOG_MOT.PACKAGE_ID%TYPE,
            INUMOTIVEID         IN MO_EXECUTOR_LOG_MOT.MOTIVE_ID%TYPE,
            INUACTIONID         IN MO_EXECUTOR_LOG_MOT.ACTION_ID%TYPE,
            INUSTATUSEXECLOGID  IN MO_EXECUTOR_LOG_MOT.STATUS_EXEC_LOG_ID%TYPE DEFAULT MO_BOSTATUSPARAMETER.FNUGETSTATUS_REGISTER_EXEC,
            OEXECUTORLOGMOTID   OUT MO_EXECUTOR_LOG_MOT.EXECUTOR_LOG_MOT_ID%TYPE
        )
        IS
            PRAGMA AUTONOMOUS_TRANSACTION;
            RCEXECUTORLOGMOT    DAMO_EXECUTOR_LOG_MOT.STYMO_EXECUTOR_LOG_MOT;
        BEGIN
            UT_TRACE.TRACE('Begin MO_BOExecutor_log_mot.InsertRecord['||INUPACKAGEID||']['||INUMOTIVEID||']['||INUACTIONID||']['||INUSTATUSEXECLOGID||']',7);

            
            IF  (INUACTIONID IS NULL) THEN
                ERRORS.SETERROR(MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_EXEC_LOG_ACTION_NULL);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            IF  (INUSTATUSEXECLOGID IS NULL) THEN
                ERRORS.SETERROR(MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_EXEC_LOG_STATUS_NULL);
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            RCEXECUTORLOGMOT.EXECUTOR_LOG_MOT_ID    := MO_BOSEQUENCES.FNUGETSEQEXECUTOR_LOG_MOT;
            RCEXECUTORLOGMOT.PACKAGE_ID             := INUPACKAGEID;
            RCEXECUTORLOGMOT.MOTIVE_ID              := INUMOTIVEID;
            RCEXECUTORLOGMOT.ACTION_ID              := INUACTIONID;
            RCEXECUTORLOGMOT.LOG_DATE               := UT_DATE.FDTSYSDATE;
            RCEXECUTORLOGMOT.STATUS_EXEC_LOG_ID     := INUSTATUSEXECLOGID;
            RCEXECUTORLOGMOT.TRY_AMOUNT             := MO_BOCONSTANTS.CNUOK;

            
            DAMO_EXECUTOR_LOG_MOT.INSRECORD(RCEXECUTORLOGMOT);

            OEXECUTORLOGMOTID := RCEXECUTORLOGMOT.EXECUTOR_LOG_MOT_ID;
            
            COMMIT;
            UT_TRACE.TRACE('End MO_BOExecutor_log_mot.InsertRecord['||RCEXECUTORLOGMOT.EXECUTOR_LOG_MOT_ID||']',7);
        EXCEPTION
    		WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
    		WHEN OTHERS THEN
    			ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    	END INSERTRECORD;

    BEGIN

        REPORTLOG
            (
                14041,
                'Registro de la acci?n - Registro seguimiento SAO 304909',
                'PACKAGE_ID-'||INUPACKAGEID,
                NUREPORLOGID
            );
        UT_TRACE.TRACE('Begin MO_BOExecutor_log_mot.ExecDebNegActionReg['||INUPACKAGEID||']['||INUMOTIVEID||']',7);

        
        RCPACKAGE       := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);
        RCPACKAGETYPE   := DAPS_PACKAGE_TYPE.FRCGETRECORD(RCPACKAGE.PACKAGE_TYPE_ID);
        
        IF  (RCPACKAGETYPE.INDICATOR_REGIS_EXEC = MO_BOUNCOMPOSITIONCONSTANTS.CSBPACKAGE_EXECUTOR_LOG) THEN

            INSERTRECORD
            (
                RCPACKAGE.PACKAGE_ID,
                NULL,
                RCPACKAGETYPE.ACTION_REGIS_EXEC,
                RCPACKAGETYPE.STAT_INI_REGIS_EXEC,
                NUEXECUTORLOGMOTID
            );

        ELSIF  (RCPACKAGETYPE.INDICATOR_REGIS_EXEC = MO_BOUNCOMPOSITIONCONSTANTS.CSBMOTIVE_EXECUTOR_LOG) THEN

            INSERTRECORD
            (
                RCPACKAGE.PACKAGE_ID,
                INUMOTIVEID,
                RCPACKAGETYPE.ACTION_REGIS_EXEC,
                RCPACKAGETYPE.STAT_INI_REGIS_EXEC,
                NUEXECUTORLOGMOTID
            );

        END IF;

        MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONATTENTION(RCPACKAGE.PACKAGE_ID, MO_BOSTATUSPARAMETER.FNUGETSTATUS_REGISTER_EXEC);

        UT_TRACE.TRACE('End MO_BOExecutor_log_mot.ExecDebNegActionReg - OK',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END EXECDEBNEGACTIONREG;


	PROCEDURE EXECUTEACTIONREGISTER
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE DEFAULT NULL
    )
    IS
        RCPACKAGE       DAMO_PACKAGES.STYMO_PACKAGES;
        RCPACKAGETYPE   DAPS_PACKAGE_TYPE.STYPS_PACKAGE_TYPE;
        
        CNUDEBNEGPACKTYPE CONSTANT NUMBER := 328;
        CNUCHANGECONDPACKTYPE CONSTANT NUMBER := 280;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BOExecutor_log_mot.ExecuteActionRegister['||INUPACKAGEID||']['||INUMOTIVEID||']',7);

        
        RCPACKAGE       := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);
        RCPACKAGETYPE   := DAPS_PACKAGE_TYPE.FRCGETRECORD(RCPACKAGE.PACKAGE_TYPE_ID);

        IF RCPACKAGETYPE.PACKAGE_TYPE_ID IN (CNUDEBNEGPACKTYPE, CNUCHANGECONDPACKTYPE) THEN
            EXECDEBNEGACTIONREG(INUPACKAGEID,INUMOTIVEID);
        ELSE

            
            IF  (RCPACKAGETYPE.ACTION_REGIS_EXEC IS NULL) THEN
                UT_TRACE.TRACE('End MO_BOExecutor_log_mot.ExecuteActionRegister - Acci?n Nula',7);
                RETURN;
            END IF;

            
            IF  (RCPACKAGETYPE.INDICATOR_REGIS_EXEC IS NULL) THEN
                UT_TRACE.TRACE('End MO_BOExecutor_log_mot.ExecuteActionRegister - Indicador de Registro Nulo',7);
                RETURN;
            END IF;


            
            IF  (RCPACKAGETYPE.INDICATOR_REGIS_EXEC = MO_BOUNCOMPOSITIONCONSTANTS.CSBPACKAGE_EXECUTOR_LOG) THEN

                MO_BOEXECUTOR_LOG_MOT.INSERTRECORD
                (
                    RCPACKAGE.PACKAGE_ID,
                    NULL,
                    RCPACKAGETYPE.ACTION_REGIS_EXEC,
                    RCPACKAGETYPE.STAT_INI_REGIS_EXEC
                );

            ELSIF  (RCPACKAGETYPE.INDICATOR_REGIS_EXEC = MO_BOUNCOMPOSITIONCONSTANTS.CSBMOTIVE_EXECUTOR_LOG) THEN

                MO_BOEXECUTOR_LOG_MOT.INSERTRECORD
                (
                    RCPACKAGE.PACKAGE_ID,
                    INUMOTIVEID,
                    RCPACKAGETYPE.ACTION_REGIS_EXEC,
                    RCPACKAGETYPE.STAT_INI_REGIS_EXEC
                );

            END IF;
            
        END IF;

        UT_TRACE.TRACE('End MO_BOExecutor_log_mot.ExecuteActionRegister - OK',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END EXECUTEACTIONREGISTER;

    






















    PROCEDURE FINISHEXECLOGMOT
    (
        INUEXTERNALID   MO_EXECUTOR_LOG_MOT.PACKAGE_ID%TYPE,
        INUENTITYID     WF_INSTANCE.ENTITY_ID%TYPE
    )
    IS
        NUENTITYPACK  NUMBER;
        NUENTITYMOT   NUMBER;
        TBACTTOANNUL    DAMO_EXECUTOR_LOG_MOT.TYTBMO_EXECUTOR_LOG_MOT;
        NUINDX          BINARY_INTEGER;

    BEGIN
        UT_TRACE.TRACE('Inicia Mo_boExecutor_log_mot.FinishExecLogMot  Entidad['||INUENTITYID||']External['||INUEXTERNALID||']',5);
        NUENTITYPACK  := GE_BOENTITY.FNUGETENTITY_ID('MO_PACKAGES');
        NUENTITYMOT   := GE_BOENTITY.FNUGETENTITY_ID('MO_MOTIVE');

        

        IF ( INUENTITYID = NUENTITYPACK) THEN
            UT_TRACE.TRACE('Entidad es paquete',6);

            
            TBACTTOANNUL := MO_BCEXECUTOR_LOG_MOT.FTBALLEXECBYPACKACTIVE(INUEXTERNALID);

            
            NUINDX := TBACTTOANNUL.FIRST;
            WHILE (NUINDX IS NOT NULL) LOOP

                DAMO_EXECUTOR_LOG_MOT.UPDSTATUS_EXEC_LOG_ID(TBACTTOANNUL(NUINDX).EXECUTOR_LOG_MOT_ID, MO_BOCONSTANTS.CNUSTATUS_PROCESS_EXEC);

                NUINDX := TBACTTOANNUL.NEXT(NUINDX);
            END LOOP;
        ELSE
        
            IF ( INUENTITYID = NUENTITYMOT) THEN
                UT_TRACE.TRACE('Entidad es motivo',6);
                
                TBACTTOANNUL := MO_BCEXECUTOR_LOG_MOT.FTBALLEXECBYMOTACTIVE(INUEXTERNALID);

                
                NUINDX := TBACTTOANNUL.FIRST;
                WHILE (NUINDX IS NOT NULL) LOOP

                    DAMO_EXECUTOR_LOG_MOT.UPDSTATUS_EXEC_LOG_ID(TBACTTOANNUL(NUINDX).EXECUTOR_LOG_MOT_ID, MO_BOCONSTANTS.CNUSTATUS_PROCESS_EXEC);

                    NUINDX := TBACTTOANNUL.NEXT(NUINDX);
                END LOOP;
            END IF;
        END IF;
        UT_TRACE.TRACE('Termina Mo_boExecutor_log_mot.FinishExecLogMot',5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FINISHEXECLOGMOT;


END MO_BOEXECUTOR_LOG_MOT;