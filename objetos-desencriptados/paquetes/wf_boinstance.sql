PACKAGE BODY WF_BOInstance AS



    BLSTOPINSTANCE BOOLEAN := FALSE;
    CNUPACKAGEENTITY CONSTANT NUMBER := 17;
    CNUMOTIVEENTITY  CONSTANT NUMBER := 8;

    
    
    CSBVERSION       CONSTANT VARCHAR2(25)  := 'SAO216940';

    GSBLISTEXTERNAL  VARCHAR2(20000);
    
    
    

    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    
    
    
    
    
    PROCEDURE INSRECORD
	(
		IRCWF_INSTANCE IN DAWF_INSTANCE.STYWF_INSTANCE
	)
    IS
    BEGIN
        
        DAWF_INSTANCE.INSRECORD(IRCWF_INSTANCE);
        
        
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR ;
    END;

    








	PROCEDURE DELRECORD
	(
		INUINSTANCE_ID IN WF_INSTANCE.INSTANCE_ID%TYPE
	)
    IS
    BEGIN
        
        DELETE WF_INSTANCE_DATA_MAP
        WHERE
        WF_INSTANCE_DATA_MAP.INSTANCE_DATA_MAP_ID IN (
            SELECT WF_INSTANCE_DATA_MAP.INSTANCE_DATA_MAP_ID
            FROM WF_INSTANCE_DATA_MAP, WF_INSTANCE_ATTRIB SOURCE, WF_INSTANCE_ATTRIB TARGET
            WHERE
                WF_INSTANCE_DATA_MAP.SOURCE_ID = SOURCE.INSTANCE_ATTRIB_ID AND
                WF_INSTANCE_DATA_MAP.TARGET = TARGET.INSTANCE_ATTRIB_ID AND
                (TARGET.INSTANCE_ID = INUINSTANCE_ID OR SOURCE.INSTANCE_ID = INUINSTANCE_ID));
        
        DELETE WF_INSTANCE_ATTRIB
            WHERE WF_INSTANCE_ATTRIB.INSTANCE_ID = INUINSTANCE_ID;

        DAWF_INSTANCE.DELRECORD(INUINSTANCE_ID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN EX.RECORD_HAVE_CHILDREN THEN
            ERRORS.SETERROR(CONSTANTS.CNURECORD_HAVE_CHILDREN,
            DAGE_MESSAGE.FSBGETDESCRIPTION(WF_BOUNIT.CNUUNITTABLEPARAMETER));
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FRFGETPROCESSNODES
    (
        INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE
    )
    RETURN TYRFRECORDS
    IS
        RFQUERY TYRFRECORDS;
    BEGIN
        OPEN RFQUERY FOR
            SELECT WF_UNIT_TYPE.DISPLAY,
                WF_UNIT_TYPE.ICON, CATEGORY_ID,
                WF_INSTANCE.*
            FROM WF_UNIT_TYPE, WF_INSTANCE
            WHERE
                WF_INSTANCE.UNIT_TYPE_ID = WF_UNIT_TYPE.UNIT_TYPE_ID AND
                (WF_INSTANCE.PARENT_ID = INUPARENTID OR
                 WF_INSTANCE.INSTANCE_ID = INUPARENTID);
        RETURN (RFQUERY);
    EXCEPTION

		WHEN EX.CONTROLLED_ERROR THEN
			RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

    
	FUNCTION FRFGETSUBPROCESS
    (
        INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE
    )
	RETURN TYRFINSTRECORDS
    IS
        RFQUERY TYRFINSTRECORDS;
    BEGIN
        OPEN RFQUERY FOR
            SELECT WF_INSTANCE.INSTANCE_ID,
                   WF_INSTANCE.EXTERNAL_ID,
                   DISPLAY,
                   WF_UNIT_TYPE.DESCRIPTION,
                   WF_INSTANCE.STATUS_ID,
                   WF_UNIT_TYPE.CATEGORY_ID
            FROM WF_UNIT_TYPE, WF_INSTANCE
            WHERE
                WF_UNIT_TYPE.UNIT_TYPE_ID = WF_INSTANCE.UNIT_TYPE_ID AND
                (WF_UNIT_TYPE.CATEGORY_ID = WF_BOCONSTANTS.CNUPROCESS OR
                WF_UNIT_TYPE.CATEGORY_ID = WF_BOCONSTANTS.CNUACTIVITY) AND
                WF_INSTANCE.PARENT_ID = INUPARENTID;
        RETURN (RFQUERY);
    EXCEPTION

		WHEN EX.CONTROLLED_ERROR THEN
			RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION FNUSUSPENDINSTANCE
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN NUMBER
    IS
        NUID NUMBER;
        NUSTATUS NUMBER;
    BEGIN
        
        
        
        NUSTATUS := DAWF_INSTANCE.FNUGETSTATUS_ID(INUINSTANCEID);

        IF (NUSTATUS != WF_BOCONSTANTS.CNUCREATED) AND
           (NUSTATUS != WF_BOCONSTANTS.CNUWAITING_RESULTS) THEN
            RETURN -1;
        END IF;

        
        
        DAWF_INSTANCE.UPDSTATUS_ID(INUINSTANCEID, WF_BOCONSTANTS.CNUSUSPENDED);

        DAWF_INSTANCE.UPDPREVIOUS_STATUS_ID(INUINSTANCEID, NUSTATUS);

        
        RETURN WF_BOCONSTANTS.CNUSUSPENDED;
    EXCEPTION

		WHEN EX.CONTROLLED_ERROR THEN
			RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;


    
    FUNCTION FNUREACTIVATEINSTANCE
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN NUMBER
    IS
        CURSOR CUR_EDO
        IS
            SELECT
            	STATUS_ID, PREVIOUS_STATUS_ID
            FROM
            	WF_INSTANCE
            WHERE
            	INSTANCE_ID = INUINSTANCEID;

        NUSTATUS NUMBER;
        NUPREVIOUSSTATUS NUMBER;

    BEGIN
        
        NUSTATUS := DAWF_INSTANCE.FNUGETSTATUS_ID(INUINSTANCEID);

        NUPREVIOUSSTATUS := DAWF_INSTANCE.FNUGETPREVIOUS_STATUS_ID(INUINSTANCEID);

        IF(NUSTATUS != WF_BOCONSTANTS.CNUSUSPENDED) THEN
            RETURN -1;
        END IF;

        
        
        
        

        

        DAWF_INSTANCE.UPDSTATUS_ID(INUINSTANCEID, NUPREVIOUSSTATUS);

        DAWF_INSTANCE.UPDPREVIOUS_STATUS_ID(INUINSTANCEID, WF_BOCONSTANTS.CNUSUSPENDED);

        
        RETURN NUPREVIOUSSTATUS;
    EXCEPTION

		WHEN EX.CONTROLLED_ERROR THEN
			RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;



	FUNCTION FRFGETEXECUTABLEINSTANCE
    (
        INUSTATUSID IN WF_INSTANCE.STATUS_ID%TYPE,
        INUTHREADNUMBER IN NUMBER
    )
    RETURN NUMBER
    IS
        CURSOR CURINS
        IS
            SELECT ROWID
            FROM WF_INSTANCE
            WHERE STATUS_ID = INUSTATUSID
            AND ROWNUM <= INUTHREADNUMBER;

        CURSOR CURINSUPD (RID ROWID)
        IS
            SELECT INSTANCE_ID
            FROM WF_INSTANCE
            WHERE ROWID = RID
            FOR UPDATE NOWAIT ;

    BEGIN
        
        
        FOR REG IN CURINS LOOP
            BEGIN
	        	FOR REGID IN CURINSUPD(REG.ROWID) LOOP
               BEGIN
    	        	RETURN (REGID.INSTANCE_ID);
               END;
            END LOOP;

            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        END LOOP;
    	RETURN -99;
    EXCEPTION

		WHEN EX.CONTROLLED_ERROR THEN
			RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
	END;


FUNCTION FRFGETORDERNUMBER
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN NUMBER
    IS
        CURSOR CUR_INS
        IS
            SELECT EXTERNAL_ID
            FROM WF_INSTANCE
            WHERE INSTANCE_ID = INUINSTANCEID;

        ORDERNUMBER NUMBER;

    BEGIN
        OPEN CUR_INS;
        FETCH CUR_INS INTO ORDERNUMBER;
        CLOSE CUR_INS;
        RETURN ORDERNUMBER;
    END;
    
    
























    PROCEDURE GETPLANEXTERNALENTITY
    (
        INUINSTANCEID   IN  WF_INSTANCE.INSTANCE_ID%TYPE,
        ONUPLANID       OUT WF_INSTANCE.PLAN_ID%TYPE,
        OSBEXTERNALID   OUT WF_INSTANCE.EXTERNAL_ID%TYPE,
        ONUENTITYID     OUT WF_INSTANCE.ENTITY_ID%TYPE
    )
    IS
    BEGIN

        
        ONUPLANID := DAWF_INSTANCE.FNUGETPLAN_ID( INUINSTANCEID );
        
        
        OSBEXTERNALID := DAWF_INSTANCE.FSBGETEXTERNAL_ID( ONUPLANID );

        
        ONUENTITYID := DAWF_INSTANCE.FNUGETENTITY_ID( ONUPLANID );

    EXCEPTION

		WHEN EX.CONTROLLED_ERROR THEN
			RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

	



	PROCEDURE RECOVERINS(NUERRLOGID IN NUMBER, NUCODERROR OUT NUMBER, SBMSGERROR OUT VARCHAR2)
	AS LANGUAGE JAVA
    NAME 'os.wf.engine.kernel.ExceptionAgent.recover(int, int[], java.lang.String[])';

	PROCEDURE RECOVERINSTANCE
	(
        INUEXCLOGID IN WF_EXCEPTION_LOG.EXCEPTION_LOG_ID%TYPE
	)
    IS
       SBMSGERROR VARCHAR2(2000);
       NUCODERROR NUMBER(5);
    BEGIN
		RECOVERINS(INUEXCLOGID,NUCODERROR,SBMSGERROR);
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
    
    
    FUNCTION FNUGETCAUSALCLASSBYINSTID
    (
        INUINSTANCEID  IN WF_INSTANCE.INSTANCE_ID%TYPE
    )RETURN NUMBER
    IS

        CURSOR CUGETCAUSALCLASS (INUINSTANCEID IN NUMBER) IS
            SELECT C.CLASS_CAUSAL_ID
              FROM WF_INSTANCE_ATTRIB IA, GE_CAUSAL C
             WHERE IA.INSTANCE_ID = INUINSTANCEID
               AND IA.ATTRIBUTE_ID = WF_BOCONSTANTS.CNUCAUSAL
               AND C.CAUSAL_ID = IA.VALUE;

        NUCAUSALCLASS   NUMBER;
    BEGIN
        FOR RG IN CUGETCAUSALCLASS(INUINSTANCEID) LOOP
            NUCAUSALCLASS := RG.CLASS_CAUSAL_ID;
            EXIT;
        END LOOP;

        RETURN (NUCAUSALCLASS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

	
    
    
    FUNCTION FNUGETCAUSAL
    (
        INUINSTANCEID  IN WF_INSTANCE.INSTANCE_ID%TYPE
    )RETURN NUMBER
    IS

        CURSOR CUGETCAUSAL(INUINSTANCEID IN NUMBER) IS
        	SELECT VALUE
			FROM WF_INSTANCE_ATTRIB
			WHERE ATTRIBUTE_ID = WF_BOCONSTANTS.CNUCAUSAL
			AND INSTANCE_ID = INUINSTANCEID;

        NUVALUE   NUMBER;
    BEGIN
        FOR RG IN CUGETCAUSAL(INUINSTANCEID) LOOP
            NUVALUE := RG.VALUE;
            EXIT;
        END LOOP;

        RETURN (NUVALUE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;


    
    
    
    FUNCTION FNUGETCAUSALCLASS
    (
        INUCAUSALID  IN GE_CAUSAL.CAUSAL_ID%TYPE
    )RETURN NUMBER
    IS

        CURSOR CUGETCAUSALCLASS (INUCAUSALID IN NUMBER) IS
            SELECT CLASS_CAUSAL_ID
              FROM GE_CAUSAL
             WHERE CAUSAL_ID = INUCAUSALID;

        NUCAUSALCLASS   NUMBER;
    BEGIN
        FOR RG IN CUGETCAUSALCLASS(INUCAUSALID) LOOP
            NUCAUSALCLASS := RG.CLASS_CAUSAL_ID;
            EXIT;
        END LOOP;

        RETURN (NUCAUSALCLASS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
















































    

	PROCEDURE LOADRULEDATA
	(
		INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
	)
	IS
    	
    	NUERROR     NUMBER;
    	SBERROR     VARCHAR2(2000);
    	SBINSTANCE	VARCHAR2(30);
    	SBCAUSAL	VARCHAR2(30);
    	SBTBLINS		VARCHAR2(30);
    	SBTBLINSATT	VARCHAR2(30);
    	SBFIELD		VARCHAR2(30);
    	CAUSALID	NUMBER;
		NUINDEX    GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN

    	SBTBLINS		:=	'WF_INSTANCE';
    	CAUSALID	:=	WF_BOCONSTANTS.CNUCAUSAL;

	
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;

    	SBINSTANCE	:= 'CAUSAL';
    	SBTBLINSATT		:=	'WF_INSTANCE_ATTRIB';
        
		
        GE_BOINSTANCECONTROL.CREATEINSTANCE (SBINSTANCE, NULL);
        
        GE_BOINSTANCECONTROL.INITMULTISELECT (SBINSTANCE, SBTBLINSATT);
        SBFIELD		:=	'INSTANCE_ID';
        GE_BOINSTANCECONTROL.SETMULTISELECTATTRIBUTE (GE_BOINSTANCECONSTANTS.CNUWHERE_ATTRIBUTE, SBFIELD, INUINSTANCEID);
        SBFIELD		:=	'ATTRIBUTE_ID';
        GE_BOINSTANCECONTROL.SETMULTISELECTATTRIBUTE (GE_BOINSTANCECONSTANTS.CNUWHERE_ATTRIBUTE, SBFIELD, CAUSALID);
        GE_BOINSTANCECONTROL.SETMULTISELECTATTRIBUTE (GE_BOINSTANCECONSTANTS.CNUGROUP_ATTRIBUTE, SBFIELD);
        GE_BOINSTANCECONTROL.EXECUTEMULTISELECT (FALSE);

		SBFIELD		:=	'VALUE';
	    IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK (SBINSTANCE, CAUSALID, SBTBLINSATT, SBFIELD, NUINDEX) THEN
	        
	        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (SBINSTANCE, CAUSALID, SBTBLINSATT, SBFIELD, SBCAUSAL);
	    ELSE
	        SBCAUSAL := TO_CHAR (WF_BOCONSTANTS.CNUNUMERIC_NULL);
	    END IF;

        
    	SBINSTANCE	:= 'INS';
		GE_BOINSTANCECONTROL.CREATEINSTANCE (SBINSTANCE, NULL);
		
        GE_BOINSTANCECONTROL.LOADENTITYOLDVALUESID (SBINSTANCE, NULL, SBTBLINS, INUINSTANCEID);

        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBINSTANCE, NULL, SBTBLINS, 'CAUSAL', SBCAUSAL);
        

    	
        
    




        
        

    EXCEPTION
        WHEN OTHERS THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            ERRORS.GETERROR (NUERROR, SBERROR);
            DBMS_OUTPUT.PUT_LINE ('['|| SUBSTR (SBERROR, 0, 200) ||']');
            DBMS_OUTPUT.PUT_LINE ('['|| SUBSTR (SQLERRM, 0, 250) ||']');
    END;


    

    FUNCTION FNUTASKSWITHATTRINGIVENSTATUS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
     	INUCOMPONENTTYPE  IN  MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
     	INUATTRIBUTE  IN  WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE,
     	ISBVALUE IN  WF_INSTANCE_ATTRIB.VALUE%TYPE
    )
    RETURN NUMBER
    IS
        CURSOR CUINSTANCES (INUINSTANCEID IN NUMBER) IS
            SELECT COUNT(*)
              FROM WF_INSTANCE I, MO_COMPONENT C, WF_INSTANCE_ATTRIB IA
             WHERE (I.INSTANCE_ID = INUINSTANCEID OR
                   I.ORIGINAL_TASK = INUINSTANCEID)
               AND I.INSTANCE_ID = IA.INSTANCE_ID
               AND IA.ATTRIBUTE_ID = INUATTRIBUTE
               AND IA.VALUE = ISBVALUE
               AND C.COMPONENT_ID = I.EXTERNAL_ID
               AND C.COMPONENT_TYPE_ID = INUCOMPONENTTYPE;


        NUCOUNTER  NUMBER := 0;
        NUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE;

        OSBINSTANCE VARCHAR2(256);
        ONUIDCURRMEMORYINSTANCE WF_INSTANCE.INSTANCE_ID%TYPE;
        NUIDORIGCURRMEMINST WF_INSTANCE.INSTANCE_ID%TYPE;

    BEGIN

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(OSBINSTANCE);
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(OSBINSTANCE,NULL,'WF_INSTANCE','INSTANCE_ID',ONUIDCURRMEMORYINSTANCE);
        UT_TRACE.TRACE('Instancia Actual en Memoria :'||ONUIDCURRMEMORYINSTANCE);
        
        NUIDORIGCURRMEMINST := DAWF_INSTANCE.FNUGETORIGINAL_TASK(ONUIDCURRMEMORYINSTANCE);
        
        NUIDORIGCURRMEMINST := NVL(NUIDORIGCURRMEMINST, ONUIDCURRMEMORYINSTANCE);
        UT_TRACE.TRACE('Bloqueo de la Instancia Original en Memoria :'||NUIDORIGCURRMEMINST);
        WF_BOINSTANCE.LOCKINSTANCE(NUIDORIGCURRMEMINST);

        
        NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK(INUINSTANCEID);
        
        NUORIGINAL := NVL(NUORIGINAL, INUINSTANCEID);

        OPEN CUINSTANCES(NUORIGINAL);
        FETCH CUINSTANCES INTO NUCOUNTER;
        CLOSE CUINSTANCES;
        DBMS_OUTPUT.PUT_LINE('counter = '||NUCOUNTER);
        RETURN NUCOUNTER;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION FNUCOUNTCOPIESNOTINSTATUS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
		INUSTATUS IN NUMBER
    )
    RETURN NUMBER
    IS
		CURSOR CUINSTANCES (INUINSTANCEID IN NUMBER) IS
    		SELECT COUNT(*)
    		FROM WF_INSTANCE A, WF_INSTANCE B
            WHERE
            (
                (
                	(
                 		B.ORIGINAL_TASK = A.ORIGINAL_TASK
                		OR B.INSTANCE_ID = A.ORIGINAL_TASK
                 	)
                	AND A.INSTANCE_ID = INUINSTANCEID
                	AND B.INSTANCE_ID <> INUINSTANCEID
                )
                OR B.ORIGINAL_TASK = INUINSTANCEID
            )
            AND B.STATUS_ID <> INUSTATUS;

    NUCOUNTER  NUMBER := 0;
    BEGIN
		OPEN CUINSTANCES(INUINSTANCEID);
		FETCH CUINSTANCES INTO NUCOUNTER;
		CLOSE CUINSTANCES;
		RETURN NUCOUNTER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;

    END;

    
    FUNCTION FSBISACTIVITY
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUUNITCATEGORYID  WF_UNIT_CATEGORY.CATEGORY_ID%TYPE;
        NUUNITTYPEID WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE;
    BEGIN
        
        NUUNITTYPEID := DAWF_INSTANCE.FNUGETUNIT_TYPE_ID(INUINSTANCEID);

        
        NUUNITCATEGORYID := DAWF_UNIT_TYPE.FNUGETCATEGORY_ID(NUUNITTYPEID);

        
        IF NUUNITCATEGORYID = WF_BOCONSTANTS.CNUACTIVITY THEN
            RETURN GE_BOCONSTANTS.CSBYES;
        END IF;

        
        RETURN GE_BOCONSTANTS.CSBNO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
    
    























    PROCEDURE UPDPLANSTATUS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
     	INUSTATUSID IN WF_INSTANCE.STATUS_ID%TYPE
    )
    IS
    BEGIN
    
        IF (INUSTATUSID = WF_BOCONSTANTS.CNUANNULLED) THEN
        
            MO_BOANNULMENT.ANNULWFPLAN(INUINSTANCEID);
        
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END UPDPLANSTATUS;

    






















    PROCEDURE UPDANNULPLANSTATUS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    IS
        NUPLANID  WF_INSTANCE.PLAN_ID%TYPE;
        NUSTATUSID   WF_INSTANCE.STATUS_ID%TYPE := WF_BOCONSTANTS.CNUANNULLED;
    BEGIN
        
        NUPLANID := DAWF_INSTANCE.FNUGETPLAN_ID(INUINSTANCEID);

        
        DAWF_INSTANCE.UPDSTATUS_ID(NUPLANID, NUSTATUSID);

         
        
        UPDATE WF_INSTANCE
           SET STATUS_ID = NUSTATUSID
         WHERE PLAN_ID = NUPLANID
         AND STATUS_ID IN
            ( WF_BOCONSTANTS.CNUKEEP,
              WF_BOCONSTANTS.CNUDESASSIGNED,
              WF_BOCONSTANTS.CNUEXCEPTION,
              WF_BOCONSTANTS.CNUCOMPLETED,
              WF_BOCONSTANTS.CNUWAITING_RESULTS,
              WF_BOCONSTANTS.CNUACTIVED,
              WF_BOCONSTANTS.CNUINITIATED
            )
         AND INSTANCE_ID <> INUINSTANCEID;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END UPDANNULPLANSTATUS;

	



	PROCEDURE RECOVERRETAINEDINS(INUINSTANCEID IN NUMBER, NUCODERROR OUT NUMBER, SBMSGERROR OUT VARCHAR2)
	AS LANGUAGE JAVA
    NAME 'os.wf.engine.kernel.ExceptionAgent.moveRejectedIns(int, int[], java.lang.String[])';
    
	PROCEDURE RECOVERRETAINEDINSTANCE
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    IS
       SBMSGERROR VARCHAR2(2000);
       NUCODERROR NUMBER(5);
    BEGIN
		RECOVERRETAINEDINS(INUINSTANCEID,NUCODERROR,SBMSGERROR);
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;
    
    
    FUNCTION FSBISBASICPROCESS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUUNITCATEGORYID  WF_UNIT_CATEGORY.CATEGORY_ID%TYPE;
        NUUNITTYPEID WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE;
    BEGIN
        
        NUUNITTYPEID := DAWF_INSTANCE.FNUGETUNIT_TYPE_ID(INUINSTANCEID);

        
        NUUNITCATEGORYID := DAWF_UNIT_TYPE.FNUGETCATEGORY_ID(NUUNITTYPEID);

        
        IF NUUNITCATEGORYID = WF_BOCONSTANTS.CNUPROCESS THEN
            RETURN GE_BOCONSTANTS.CSBYES;
        END IF;

        
        RETURN GE_BOCONSTANTS.CSBNO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION FSBISMAINPROCESS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUUNITCATEGORYID  WF_UNIT_CATEGORY.CATEGORY_ID%TYPE;
        NUUNITTYPEID WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE;
    BEGIN
        
        NUUNITTYPEID := DAWF_INSTANCE.FNUGETUNIT_TYPE_ID(INUINSTANCEID);

        
        NUUNITCATEGORYID := DAWF_UNIT_TYPE.FNUGETCATEGORY_ID(NUUNITTYPEID);

        
        IF NUUNITCATEGORYID = WF_BOCONSTANTS.CNUMAINPROCESS THEN
            RETURN GE_BOCONSTANTS.CSBYES;
        END IF;

        
        RETURN GE_BOCONSTANTS.CSBNO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION FSBISPROCESS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUUNITCATEGORYID  WF_UNIT_CATEGORY.CATEGORY_ID%TYPE;
        NUUNITTYPEID WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE;
    BEGIN
        
        NUUNITTYPEID := DAWF_INSTANCE.FNUGETUNIT_TYPE_ID(INUINSTANCEID);

        
        NUUNITCATEGORYID := DAWF_UNIT_TYPE.FNUGETCATEGORY_ID(NUUNITTYPEID);

        
        IF NUUNITCATEGORYID = WF_BOCONSTANTS.CNUPROCESS OR
           NUUNITCATEGORYID = WF_BOCONSTANTS.CNUMAINPROCESS
        THEN
            RETURN GE_BOCONSTANTS.CSBYES;
        END IF;

        
        RETURN GE_BOCONSTANTS.CSBNO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    

    FUNCTION FSBPREVTASKCLONESINSTATUS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
     	INUINSTANCESTATUSID IN WF_INSTANCE_STATUS.INSTANCE_STATUS_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        NUPREVIOUSINSTANCEID  WF_INSTANCE.PREVIOUS_INSTANCE_ID%TYPE;
        NUCOUNTER NUMBER := 0;
    BEGIN
        
        NUPREVIOUSINSTANCEID := DAWF_INSTANCE.FNUGETPREVIOUS_INSTANCE_ID
                                (
                                    INUINSTANCEID
                                );
                                
        
        NUCOUNTER := WF_BOINSTANCE.FNUCOUNTCOPIESNOTINSTATUS
                     (
                         NUPREVIOUSINSTANCEID,
                         INUINSTANCESTATUSID
                     );
        IF NUCOUNTER = 0 THEN
            RETURN GE_BOCONSTANTS.CSBYES;
        ELSE
            RETURN GE_BOCONSTANTS.CSBNO;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
    FUNCTION FNUCHILDRENTASKSWITHSTATUS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
     	INUUNITTYPEID IN WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE,
     	INUINSTANCESTATUSID IN WF_INSTANCE_STATUS.INSTANCE_STATUS_ID%TYPE
    )
    RETURN NUMBER
    IS
        CURSOR CUINSTANCES IS
            SELECT COUNT(*)
              FROM WF_INSTANCE
             WHERE PARENT_ID = INUINSTANCEID
               AND UNIT_TYPE_ID = INUUNITTYPEID
               AND STATUS_ID = INUINSTANCESTATUSID;

        NUCOUNTER NUMBER := 0;
    BEGIN
        OPEN CUINSTANCES;
        FETCH CUINSTANCES INTO NUCOUNTER;
		CLOSE CUINSTANCES;
		RETURN NUCOUNTER;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    

    FUNCTION FTBGETTASKCLONESDATA
    (
        INUINSTANCEID   WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN GE_TYTBVARCHAR2
    IS
        TBTASKCLONESDATA  GE_TYTBVARCHAR2;
        
        NUATTRIBUTEID  WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE := 20063;
    BEGIN

        UT_TRACE.TRACE('wf_boinstance.ftbGetTaskClonesData(inuInstanceId = '||
                       INUINSTANCEID||')',2);

        SELECT CAST(
            MULTISET(
                SELECT 'INSTANCE_ID='||I.INSTANCE_ID||';'||
                       'EXTERNAL_ID='||EXTERNAL_ID||';'||
                       'IM_PROCESS_ID='||VALUE
                  FROM WF_INSTANCE I, WF_INSTANCE_ATTRIB IA
                 WHERE (I.INSTANCE_ID = INUINSTANCEID
                    OR I.ORIGINAL_TASK = INUINSTANCEID)
                   AND I.INSTANCE_ID = IA.INSTANCE_ID
                   AND IA.ATTRIBUTE_ID = NUATTRIBUTEID
              ORDER BY I.INSTANCE_ID
            ) AS GE_TYTBVARCHAR2
        )
        INTO TBTASKCLONESDATA
        FROM DUAL;


        RETURN (TBTASKCLONESDATA);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    
    
    
    FUNCTION FNUGETTASKSETAMOUNT
    (
        INUINSTANCEID     IN  WF_INSTANCE.INSTANCE_ID%TYPE,
        INUATTRIBUTEID    IN  WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE,
        ISBATTRIBUTEVALUE IN  WF_INSTANCE_ATTRIB.VALUE%TYPE,
        INUOCURRENCES     IN  NUMBER
    )
    RETURN NUMBER
    IS
        NUORIGINAL  WF_INSTANCE.INSTANCE_ID%TYPE;
        NUCOUNT NUMBER;
        SBEXTERNALID WF_INSTANCE.EXTERNAL_ID%TYPE;
        NUCOUNTER NUMBER := 0;

        CURSOR CUGETCLONES(INUORIGINAL IN WF_INSTANCE.INSTANCE_ID%TYPE) IS
            SELECT I.EXTERNAL_ID, COUNT(*)
              FROM WF_INSTANCE I, WF_INSTANCE_ATTRIB IA
             WHERE (I.INSTANCE_ID = NUORIGINAL
                OR I.ORIGINAL_TASK = NUORIGINAL)

               AND I.INSTANCE_ID = IA.INSTANCE_ID
               AND IA.ATTRIBUTE_ID = INUATTRIBUTEID
               AND IA.VALUE = ISBATTRIBUTEVALUE
          GROUP BY I.EXTERNAL_ID
            HAVING COUNT(*) = INUOCURRENCES;
    BEGIN
        
        NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK(INUINSTANCEID);
        
        NUORIGINAL := NVL(NUORIGINAL, INUINSTANCEID);

        OPEN CUGETCLONES(NUORIGINAL);
        FETCH CUGETCLONES INTO SBEXTERNALID, NUCOUNT;
        NUCOUNTER := CUGETCLONES%ROWCOUNT;
        CLOSE CUGETCLONES;
        RETURN NUCOUNTER;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    
    
    
    
    FUNCTION FSBISTASKSETACCOMPLISHED
    (
        INUINSTANCEID     IN  WF_INSTANCE.INSTANCE_ID%TYPE,
        INUOCURRENCES     IN  NUMBER
    )
    RETURN VARCHAR2
    IS
        NUORIGINAL  WF_INSTANCE.INSTANCE_ID%TYPE;
        NUCOUNT NUMBER;
        SBEXT WF_INSTANCE.EXTERNAL_ID%TYPE;
        SBEXTERNALID WF_INSTANCE.EXTERNAL_ID%TYPE;

        CURSOR CUGETCLONES(INUORIGINAL IN WF_INSTANCE.INSTANCE_ID%TYPE,
                           SBEXTERNALID IN WF_INSTANCE.EXTERNAL_ID%TYPE) IS
            SELECT I.EXTERNAL_ID, COUNT(*)
              FROM WF_INSTANCE I
             WHERE (I.INSTANCE_ID = NUORIGINAL
                OR I.ORIGINAL_TASK = NUORIGINAL)
               AND I.EXTERNAL_ID = SBEXTERNALID
               AND I.STATUS_ID NOT IN ( WF_BOCONSTANTS.CNUANNULLED, WF_BOCONSTANTS.CNUDESASSIGNED)
          GROUP BY I.EXTERNAL_ID
            HAVING COUNT(*) >= INUOCURRENCES;
    BEGIN
        
        NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK(INUINSTANCEID);
        
        NUORIGINAL := NVL(NUORIGINAL, INUINSTANCEID);
        
        
        SBEXTERNALID := DAWF_INSTANCE.FSBGETEXTERNAL_ID(INUINSTANCEID);

        OPEN CUGETCLONES(NUORIGINAL, SBEXTERNALID);
        FETCH CUGETCLONES INTO SBEXTERNALID, NUCOUNT;
        
        IF CUGETCLONES%NOTFOUND THEN
            CLOSE CUGETCLONES;
            RETURN GE_BOCONSTANTS.CSBNO;
        END IF;
        CLOSE CUGETCLONES;
        RETURN GE_BOCONSTANTS.CSBYES;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    
    
    
    FUNCTION FNUGETTASKSBYATTRVALUEAMOUNT
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
     	INUATTRIBUTEID  IN  WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE,
     	ISBVALUE IN  WF_INSTANCE_ATTRIB.VALUE%TYPE
    )
    RETURN NUMBER
    IS

        NUORIGINAL  WF_INSTANCE.INSTANCE_ID%TYPE;
        NUCOUNTER   NUMBER := 0;

        CURSOR CUGETCLONES(INUORIGINAL IN WF_INSTANCE.INSTANCE_ID%TYPE) IS
            SELECT COUNT(*)
              FROM WF_INSTANCE I, WF_INSTANCE_ATTRIB IA
             WHERE (I.INSTANCE_ID = NUORIGINAL
                OR I.ORIGINAL_TASK = NUORIGINAL)
               AND I.INSTANCE_ID = IA.INSTANCE_ID
               AND IA.ATTRIBUTE_ID = INUATTRIBUTEID
               AND IA.VALUE = ISBVALUE;

    BEGIN
        
        NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK(INUINSTANCEID);
        
        NUORIGINAL := NVL(NUORIGINAL, INUINSTANCEID);
        
        OPEN CUGETCLONES(NUORIGINAL);
        FETCH CUGETCLONES INTO NUCOUNTER;
        CLOSE CUGETCLONES;
        RETURN NUCOUNTER;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
	FUNCTION FNUGETINSTANCEBYCOMPONENT
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
		INUCOMPONENTTYPE IN NUMBER
    )
    RETURN NUMBER
    IS

        NUORIGINAL  WF_INSTANCE.INSTANCE_ID%TYPE;

		CURSOR CUINSTANCES (INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE) IS
            SELECT INSTANCE_ID, EXTERNAL_ID
              FROM WF_INSTANCE
             WHERE INSTANCE_ID = NUORIGINAL
                OR ORIGINAL_TASK = NUORIGINAL;

		NUINSTID WF_INSTANCE.INSTANCE_ID%TYPE;
		NUCOMPTYPE NUMBER;
	BEGIN
        
        NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK(INUINSTANCEID);
        
        NUORIGINAL := NVL(NUORIGINAL, INUINSTANCEID);

        FOR RG IN CUINSTANCES(NUORIGINAL)
        LOOP
            
            NUCOMPTYPE := DAMO_COMPONENT.FNUGETCOMPONENT_TYPE_ID(RG.EXTERNAL_ID);
            IF (NUCOMPTYPE = INUCOMPONENTTYPE) THEN
                NUINSTID := RG.INSTANCE_ID;
	            RETURN NUINSTID;
            END IF;
        END LOOP;
        RETURN WF_BOCONSTANTS.CNUNUMERIC_NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE  EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
    
    
    
    
    FUNCTION FSBDELETECOPIESBYEXTERNALID
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        CURSOR CUTASKSTODELETE
               (
                   INUORIGINALTASK IN WF_INSTANCE.INSTANCE_ID%TYPE,
                   INUEXTERNALID IN WF_INSTANCE.EXTERNAL_ID%TYPE
               )
        IS
            SELECT INSTANCE_ID
            FROM WF_INSTANCE
            WHERE (INSTANCE_ID = INUORIGINALTASK
               OR ORIGINAL_TASK = INUORIGINALTASK)
              AND EXTERNAL_ID = INUEXTERNALID
              AND INSTANCE_ID <> INUINSTANCEID;
              
        NUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE;
        NUEXTERNALID  WF_INSTANCE.EXTERNAL_ID%TYPE;

    BEGIN
        
        NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK(INUINSTANCEID);
        NUORIGINAL := NVL(NUORIGINAL, INUINSTANCEID);
        
        
        NUEXTERNALID := DAWF_INSTANCE.FSBGETEXTERNAL_ID(INUINSTANCEID);

        
        IF INUINSTANCEID != NUORIGINAL THEN
            
            
            FOR RC IN CUTASKSTODELETE(NUORIGINAL, NUEXTERNALID) LOOP
                IF RC.INSTANCE_ID = NUORIGINAL THEN
                    RETURN GE_BOCONSTANTS.CSBNO;
                END IF;
            END LOOP;
        END IF;

        
        FOR RC IN CUTASKSTODELETE(NUORIGINAL, NUEXTERNALID) LOOP
            WF_BOINSTANCE_TRANS.DELTRANSITIONS(RC.INSTANCE_ID);
            WF_BOINSTANCE_TRANS.DELEXCEPTIONLOGS(RC.INSTANCE_ID);
            WF_BOINSTANCE.DELRECORD(RC.INSTANCE_ID);
        END LOOP;

        RETURN GE_BOCONSTANTS.CSBYES;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    
    
    
    FUNCTION FNUCOUNTNOTFINISHEDTASKS
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN NUMBER
    IS
    
        NUPLANID   WF_INSTANCE.INSTANCE_ID%TYPE;
        NUPARENTID WF_INSTANCE.PARENT_ID%TYPE;
        NUCOUNTER NUMBER;
        CNUNOT_PLAN_FOUND CONSTANT NUMBER := 2219;
        
        CURSOR CUNOTFINISHEDTASKS(INUPLANID IN WF_INSTANCE.INSTANCE_ID%TYPE)
        IS
        SELECT COUNT(*)
          FROM WF_INSTANCE
         WHERE PLAN_ID = INUPLANID
           AND INSTANCE_ID != INUPLANID
           AND STATUS_ID NOT IN (WF_BOCONSTANTS.CNUCREATED,WF_BOCONSTANTS.CNUFINISHED);
               
        CURSOR CULOCKPARENTINS IS
             SELECT INSTANCE_ID
             FROM   WF_INSTANCE
             WHERE  INSTANCE_ID = NUPARENTID
             FOR UPDATE;

        PROCEDURE LOCKPARENTINS
        IS
        BEGIN
             IF CULOCKPARENTINS%ISOPEN THEN
                 CLOSE CULOCKPARENTINS;
             END IF;
             
             
             OPEN CULOCKPARENTINS;
             
             
             
             CLOSE CULOCKPARENTINS;
             
        EXCEPTION
             WHEN OTHERS THEN
                 ERRORS.SETERROR;
                 RAISE EX.CONTROLLED_ERROR;
        END LOCKPARENTINS;

    BEGIN
        
        NUPLANID := DAWF_INSTANCE.FNUGETPLAN_ID(INUINSTANCEID);
        
        NUPARENTID := DAWF_INSTANCE.FNUGETPARENT_ID(INUINSTANCEID);
        
        IF( NUPLANID IS NULL OR NUPLANID = WF_BOCONSTANTS.CNUNUMERIC_NULL ) THEN
            ERRORS.SETERROR(CNUNOT_PLAN_FOUND, 'plan_id|instancia|'||TO_CHAR(INUINSTANCEID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        LOCKPARENTINS;
        
        OPEN CUNOTFINISHEDTASKS(NUPLANID);
        FETCH CUNOTFINISHEDTASKS INTO NUCOUNTER;
        CLOSE CUNOTFINISHEDTASKS;
        RETURN NUCOUNTER;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNTNOTFINISHEDTASKS;


    
	PROCEDURE LOCKINSTANCE
	(
		INUINSTANCE_ID IN WF_INSTANCE.INSTANCE_ID%TYPE
	)
    IS
        NUINSTANCE WF_INSTANCE.INSTANCE_ID%TYPE;
    BEGIN
        SELECT INSTANCE_ID INTO NUINSTANCE
          FROM WF_INSTANCE
         WHERE INSTANCE_ID = INUINSTANCE_ID
           FOR UPDATE NOWAIT;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    
    
    
    FUNCTION FNUCOUNOTFINTASKEXCLCURR
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN NUMBER
    IS

        NUPLANID   WF_INSTANCE.INSTANCE_ID%TYPE;
        NUPARENTID WF_INSTANCE.PARENT_ID%TYPE;
        NUCOUNTER NUMBER;
        CNUNOT_PLAN_FOUND CONSTANT NUMBER := 2219;

        CURSOR CUNOTFINISHEDTASKS(INUPLANID IN WF_INSTANCE.INSTANCE_ID%TYPE,INUCURRENTINSID IN WF_INSTANCE.INSTANCE_ID%TYPE)
        IS
        SELECT COUNT(*)
          FROM WF_INSTANCE
         WHERE PLAN_ID = INUPLANID
           AND INSTANCE_ID NOT IN (INUPLANID, INUCURRENTINSID)
           AND STATUS_ID NOT IN (WF_BOCONSTANTS.CNUCREATED,WF_BOCONSTANTS.CNUFINISHED);

        CURSOR CULOCKPARENTINS IS
             SELECT INSTANCE_ID
             FROM   WF_INSTANCE
             WHERE  INSTANCE_ID = NUPARENTID
             FOR UPDATE;

        PROCEDURE LOCKPARENTINS
        IS
        BEGIN
             IF CULOCKPARENTINS%ISOPEN THEN
                 CLOSE CULOCKPARENTINS;
             END IF;

             
             OPEN CULOCKPARENTINS;

             
             
             CLOSE CULOCKPARENTINS;

        EXCEPTION
             WHEN OTHERS THEN
                 ERRORS.SETERROR;
                 RAISE EX.CONTROLLED_ERROR;
        END LOCKPARENTINS;

    BEGIN
        
        NUPLANID := DAWF_INSTANCE.FNUGETPLAN_ID(INUINSTANCEID);

        NUPARENTID := DAWF_INSTANCE.FNUGETPARENT_ID(INUINSTANCEID);

        IF( NUPLANID IS NULL OR NUPLANID = WF_BOCONSTANTS.CNUNUMERIC_NULL ) THEN
            ERRORS.SETERROR(CNUNOT_PLAN_FOUND, 'plan_id|instancia|'||TO_CHAR(INUINSTANCEID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        LOCKPARENTINS;

        OPEN CUNOTFINISHEDTASKS(NUPLANID,INUINSTANCEID);
        FETCH CUNOTFINISHEDTASKS INTO NUCOUNTER;
        CLOSE CUNOTFINISHEDTASKS;
        RETURN NUCOUNTER;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCOUNOTFINTASKEXCLCURR;

    
	
    
    
    FUNCTION FNUGETTASKBYTWOATTRVALUEAMOUNT
    (  	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
     	INUATTRID1 IN WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE,
     	ISBATTRVALUE1 IN WF_INSTANCE_ATTRIB.VALUE%TYPE,
     	INUATTRID2 IN WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE,
     	ISBATTRVALUE2 IN WF_INSTANCE_ATTRIB.VALUE%TYPE,
     	INUSTATUSID NUMBER
    )
    RETURN NUMBER
    IS
        NUORIGINAL  WF_INSTANCE.INSTANCE_ID%TYPE;
  		NUCOUNTER NUMBER;

        CURSOR CUGETCLONES( INUORIGINAL IN WF_INSTANCE.INSTANCE_ID%TYPE,
             				NUATTRID1 IN WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE,
     						SBATTRVALUE1 IN WF_INSTANCE_ATTRIB.VALUE%TYPE,
     						NUATTRID2 IN WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE,
     						SBATTRVALUE2 IN WF_INSTANCE_ATTRIB.VALUE%TYPE,
     						NUSTATUSID NUMBER
     						) IS
            SELECT COUNT(*)
              FROM WF_INSTANCE I, WF_INSTANCE_ATTRIB IA,WF_INSTANCE_ATTRIB IAA
             WHERE (I.INSTANCE_ID = INUORIGINAL
                OR I.ORIGINAL_TASK = INUORIGINAL)
               AND I.STATUS_ID = NUSTATUSID
               AND I.INSTANCE_ID = IA.INSTANCE_ID
               AND IA.ATTRIBUTE_ID = NUATTRID1
               AND IA.VALUE = SBATTRVALUE1
               AND I.INSTANCE_ID = IAA.INSTANCE_ID
			   AND IAA.ATTRIBUTE_ID = NUATTRID2
               AND IAA.VALUE = SBATTRVALUE2;			

        CURSOR CULOCKINS (INUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE)IS
             SELECT INSTANCE_ID
             FROM   WF_INSTANCE
             WHERE  INSTANCE_ID = INUORIGINAL
             FOR UPDATE;

        PROCEDURE LOCKINS (INUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE)
        IS
        BEGIN
             IF CULOCKINS%ISOPEN THEN
                 CLOSE CULOCKINS;
             END IF;
             
             OPEN CULOCKINS(INUORIGINAL);
             
             CLOSE CULOCKINS;
        EXCEPTION
             WHEN OTHERS THEN
                 ERRORS.SETERROR;
                 RAISE EX.CONTROLLED_ERROR;
        END LOCKINS;
        
    BEGIN
        
        NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK(INUINSTANCEID);
        
        NUORIGINAL := NVL(NUORIGINAL, INUINSTANCEID);

        
        LOCKINS(NUORIGINAL);

        OPEN CUGETCLONES(NUORIGINAL, INUATTRID1, ISBATTRVALUE1, INUATTRID2, ISBATTRVALUE2,INUSTATUSID);
        FETCH CUGETCLONES INTO NUCOUNTER;
        CLOSE CUGETCLONES;
		
        RETURN NUCOUNTER;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETTASKBYTWOATTRVALUEAMOUNT;

	
    
	
    
    
    
    
    















































	
    
    
    
    
    
	FUNCTION FNUCOUNOFINISHTASKNPROCESBYEXT
	(
		INUINSTANCEID WF_INSTANCE.INSTANCE_ID%TYPE,
		INUUNITTYPEEXCL WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE
	) RETURN NUMBER	IS

        CURSOR CUCOUNTNOTFINTASKS(NUPARENT IN WF_INSTANCE.INSTANCE_ID%TYPE,
                                  NUCURINS IN WF_INSTANCE.INSTANCE_ID%TYPE,
                                  SBEXTID WF_INSTANCE.EXTERNAL_ID%TYPE,
                                  NUUNTYPEXCL WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE,
                                  NUENTITY WF_INSTANCE.ENTITY_ID%TYPE)
        IS
            SELECT COUNT(*) FROM WF_INSTANCE
            WHERE
                INSTANCE_ID != NUCURINS AND
                INSTANCE_ID != NUPARENT  AND
                EXTERNAL_ID = SBEXTID AND
                ENTITY_ID = NUENTITY AND
                STATUS_ID NOT IN (WF_BOCONSTANTS.CNUCREATED,
                WF_BOCONSTANTS.CNUFINISHED, WF_BOCONSTANTS.CNUANNULATION_INITIATED,
                WF_BOCONSTANTS.CNUANNULATION_FAILED,WF_BOCONSTANTS.CNURECOVERY_INITIATED,
                WF_BOCONSTANTS.CNUANNULLED,WF_BOCONSTANTS.CNUDESASSIGNED) AND
                WF_BOINSTANCE.FSBISACTIVITY(INSTANCE_ID)=GE_BOCONSTANTS.CSBYES AND
                UNIT_TYPE_ID NOT IN (NUUNTYPEXCL)
            START WITH INSTANCE_ID = NUPARENT
            CONNECT BY PRIOR INSTANCE_ID = PARENT_ID;

        NUCOUNTER NUMBER;
        NUPARENTID WF_INSTANCE.PARENT_ID%TYPE;
        SBEXTERNALID WF_INSTANCE.EXTERNAL_ID%TYPE;
        CNUNOT_PLAN_FOUND CONSTANT NUMBER := 2219;
        NUENTITYID WF_INSTANCE.ENTITY_ID%TYPE;
	BEGIN
	
		
        NUPARENTID := DAWF_INSTANCE.FNUGETPARENT_ID(INUINSTANCEID );
        
        SBEXTERNALID := DAWF_INSTANCE.FSBGETEXTERNAL_ID(INUINSTANCEID);
        
        NUENTITYID := DAWF_INSTANCE.FNUGETENTITY_ID(INUINSTANCEID);
        
        IF(NUPARENTID IS NULL OR NUPARENTID = WF_BOCONSTANTS.CNUNUMERIC_NULL) THEN
            ERRORS.SETERROR(CNUNOT_PLAN_FOUND, 'parent_id|instancia|'||TO_CHAR(INUINSTANCEID));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    	OPEN CUCOUNTNOTFINTASKS(NUPARENTID,INUINSTANCEID,SBEXTERNALID,INUUNITTYPEEXCL,NUENTITYID);
    	FETCH CUCOUNTNOTFINTASKS INTO NUCOUNTER;
    	CLOSE CUCOUNTNOTFINTASKS;





		RETURN NUCOUNTER;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUCOUNTNOTFINTASKS%ISOPEN)THEN
                CLOSE CUCOUNTNOTFINTASKS;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUCOUNTNOTFINTASKS%ISOPEN)THEN
                CLOSE CUCOUNTNOTFINTASKS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END FNUCOUNOFINISHTASKNPROCESBYEXT;

	
    
    
	
    FUNCTION FDTGETINITIALDATE
    (
        ISBEXTERNALID    WF_INSTANCE.EXTERNAL_ID%TYPE,
        INUENTITYID      WF_INSTANCE.ENTITY_ID%TYPE,
        INUUNITTYPEID    WF_INSTANCE.UNIT_TYPE_ID%TYPE
    ) RETURN DATE
    IS
        NUPLANID           WF_INSTANCE.PLAN_ID%TYPE;
        CNUNOT_PLAN_FOUND  CONSTANT NUMBER := 1976;
        NUATTRIBUTEID      WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE;
        DTINITIALDATE      WF_INSTANCE.INITIAL_DATE%TYPE;

        CURSOR CUGETPOSTPONABLETASKS
        IS
        SELECT I.INITIAL_DATE
          FROM WF_INSTANCE I, WF_INSTANCE_ATTRIB IA
         WHERE I.PLAN_ID = NUPLANID
           AND I.UNIT_TYPE_ID = INUUNITTYPEID
           AND I.INSTANCE_ID = IA.INSTANCE_ID
           AND IA.ATTRIBUTE_ID = NUATTRIBUTEID
      ORDER BY I.INSTANCE_ID DESC;
    BEGIN

        
        NUPLANID := WF_BOENTITY_PROCESS.FNUGETPLANID(ISBEXTERNALID, INUENTITYID);

        
        IF (NVL(NUPLANID, WF_BOCONSTANTS.CNUNUMERIC_NULL) = WF_BOCONSTANTS.CNUNUMERIC_NULL)
        THEN
            
            ERRORS.SETERROR
            (
                CNUNOT_PLAN_FOUND,
                '['||DAGE_ENTITY.FSBGETDISPLAY_NAME(INUENTITYID)||']|['||ISBEXTERNALID||']'
            );
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        NUATTRIBUTEID := WF_BOPARAMETER.FNUGETINITIALDATE;

        OPEN CUGETPOSTPONABLETASKS;
        FETCH CUGETPOSTPONABLETASKS INTO DTINITIALDATE;
        CLOSE CUGETPOSTPONABLETASKS;

        RETURN DTINITIALDATE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END FDTGETINITIALDATE;

	
    
    
	
    FUNCTION FNUGETPLANID
    (
        ISBEXTERNALID    WF_INSTANCE.EXTERNAL_ID%TYPE,
        INUENTITYID      WF_INSTANCE.ENTITY_ID%TYPE
    )
    RETURN NUMBER
    IS
        NUPLANID  WF_INSTANCE.PLAN_ID%TYPE;

        CURSOR CUPLANID IS
        SELECT PLAN_ID
          FROM WF_INSTANCE
         WHERE EXTERNAL_ID = ISBEXTERNALID
           AND ENTITY_ID = INUENTITYID
           AND INITIAL_DATE IS NOT NULL
      ORDER BY INITIAL_DATE DESC;

    BEGIN
        OPEN CUPLANID;
        FETCH CUPLANID INTO NUPLANID;
        CLOSE CUPLANID;
        RETURN NUPLANID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPLANID;
    
    
    FUNCTION FTBGETINSTBYEXTERNAL
    (
        ISBEXTERNALID    WF_INSTANCE.EXTERNAL_ID%TYPE,
        INUENTITYID      WF_INSTANCE.ENTITY_ID%TYPE
    )
    RETURN DAWF_INSTANCE.TYTBWF_INSTANCE
    IS
        TBINSTANCE  DAWF_INSTANCE.TYTBWF_INSTANCE;

        CURSOR CUINSTANCE IS
        SELECT WF_INSTANCE.*, WF_INSTANCE.ROWID
          FROM WF_INSTANCE
         WHERE EXTERNAL_ID = ISBEXTERNALID
           AND ENTITY_ID = INUENTITYID
           AND STATUS_ID NOT IN (WF_BOCONSTANTS.CNUCREATED,WF_BOCONSTANTS.CNUFINISHED)
      ORDER BY INITIAL_DATE DESC;

    BEGIN
        OPEN   CUINSTANCE;
        FETCH  CUINSTANCE BULK COLLECT INTO TBINSTANCE;
        CLOSE  CUINSTANCE;
        RETURN TBINSTANCE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FTBGETINSTBYEXTERNAL;
    
    PROCEDURE UNLOADRULEDATA
    IS
    BEGIN
	GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
    END;

    FUNCTION FSBVALTASKINSTATUS
    (
        INUPACKAGE_ID  IN WF_INSTANCE.EXTERNAL_ID%TYPE,
        INUMOTIVE_ID  IN WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBUNIT_TYPE  IN VARCHAR2,
        INUSTATUS IN WF_INSTANCE.STATUS_ID%TYPE
    )
    RETURN VARCHAR2  IS
        NUPLAN_ID WF_INSTANCE.PLAN_ID%TYPE;
        NUINSTANCE_ID WF_INSTANCE.INSTANCE_ID%TYPE;
        SBRESULT  VARCHAR2(1);
        
        CURSOR CUTASKINSTATUS (
            INUPLAN_ID IN WF_INSTANCE.PLAN_ID%TYPE,
            INUSTATUS IN WF_INSTANCE.STATUS_ID%TYPE,
            ISBUNIT_TYPE  IN VARCHAR2
        )IS
        SELECT INSTANCE_ID
        FROM WF_INSTANCE
        WHERE PLAN_ID = INUPLAN_ID
          AND STATUS_ID = INUSTATUS
          AND INSTR( '|'||ISBUNIT_TYPE||'|','|'||UNIT_TYPE_ID||'|') > 0;


    BEGIN
    
        NUPLAN_ID :=  WF_BOINSTANCE.FNUGETPLANID(  INUPACKAGE_ID, CNUPACKAGEENTITY );
        IF ( NUPLAN_ID IS NULL ) THEN
            NUPLAN_ID :=  WF_BOINSTANCE.FNUGETPLANID(  INUPACKAGE_ID, CNUMOTIVEENTITY );
        END IF;
        OPEN CUTASKINSTATUS( NUPLAN_ID, INUSTATUS, ISBUNIT_TYPE );
        FETCH CUTASKINSTATUS INTO NUINSTANCE_ID;
        
        IF ( CUTASKINSTATUS%FOUND ) THEN
            SBRESULT := GE_BOPARAMETER.FSBGET('YES');
        ELSE
            SBRESULT := GE_BOPARAMETER.FSBGET('NO');
        END IF;
        CLOSE CUTASKINSTATUS;

        RETURN SBRESULT;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBVALTASKINSTATUS;

    
    
    

    FUNCTION FNUGETCHILDNODEBYTYPE
    (
	INUPROCESSID    IN    WF_INSTANCE.PARENT_ID%TYPE,
	INUNODETYPE     IN    WF_INSTANCE.NODE_TYPE_ID%TYPE
    ) 
    RETURN WF_INSTANCE.INSTANCE_ID%TYPE IS

    CNUNOT_PLAN_FOUND CONSTANT NUMBER := 2219;

	CURSOR CUCHILDNODE
	(
	    INUPROCESSID    IN    WF_INSTANCE.PARENT_ID%TYPE,
	    INUNODETYPE     IN    WF_INSTANCE.NODE_TYPE_ID%TYPE
	)
	IS
        SELECT INSTANCE_ID
        FROM   WF_INSTANCE
        WHERE  PARENT_ID    = INUPROCESSID
        AND    NODE_TYPE_ID = INUNODETYPE;

	NUINSTANCEID    WF_INSTANCE.INSTANCE_ID%TYPE;

    BEGIN

        OPEN  CUCHILDNODE(INUPROCESSID, INUNODETYPE);
        FETCH CUCHILDNODE INTO NUINSTANCEID;

    	IF CUCHILDNODE%NOTFOUND THEN

    	    CLOSE  CUCHILDNODE;
                ERRORS.SETERROR( CNUNOT_PLAN_FOUND, 'plan_id|instancia|'||
    			     TO_CHAR(INUPROCESSID));
                RAISE EX.CONTROLLED_ERROR;

      	END IF;
 
        CLOSE  CUCHILDNODE;
        RETURN NUINSTANCEID;

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FNUGETCHILDNODEBYTYPE;

    
    
    
    








    FUNCTION FRCGETINSTANCE 
    (
	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN WF_BOINSTANCE.TYINSTANCE IS

	CURSOR CUINSTANCE
	(
	    INUINSTANCEID    IN    WF_INSTANCE.INSTANCE_ID%TYPE
	)
	IS
	SELECT  A.INSTANCE_ID, 
		A.DESCRIPTION, 
		A.PARENT_ID,
		A.ORIGINAL_TASK,
		A.PLAN_ID,
		A.UNIT_ID,
		A.STATUS_ID,
		A.PREVIOUS_STATUS_ID,
		A.ONLINE_EXEC_ID,
		A.ACTION_ID,
		A.PRE_EXPRESSION_ID,
		A.POS_EXPRESSION_ID,
		A.QUANTITY,
		A.SINCRONIC_TIMEOUT,
		A.ASINCRONIC_TIMEOUT,
		A.LAYER_ID,
		A.EXTERNAL_ID,
		A.GEOMETRY,
		A.TRY_NUMBER,
		A.UNIT_TYPE_ID,
		A.MULTI_INSTANCE,
		A.FUNCTION_TYPE,
		A.NODE_TYPE_ID,
		A.MODULE_ID,
		A.IS_COUNTABLE,
		A.TOTAL_TIME,
		A.PARENT_EXTERNAL_ID,
		A.ENTITY_ID,
		A.PAR_EXT_ENTITY_ID,
		A.GROUP_ID,
		A1.EXTERNAL_ID ROOTEXTERNID,
		A1.ENTITY_ID ROOTEXTERNENTITYID,
		C.CATEGORY_ID,
		A.MIN_GROUP_SIZE,
		A.NOTIFICATION_ID,
		A.PREVIOUS_INSTANCE_ID,
		A.INITIAL_DATE 
	FROM    WF_INSTANCE A, WF_INSTANCE A1, WF_UNIT_TYPE C
	WHERE   A.INSTANCE_ID = INUINSTANCEID
	AND     A1.INSTANCE_ID = A.PLAN_ID
	AND     A.UNIT_TYPE_ID = C.UNIT_TYPE_ID;

	RCINSTANCE    WF_BOINSTANCE.TYINSTANCE;

    BEGIN

	RCINSTANCE := NULL;

	FOR RCRECORD IN CUINSTANCE(INUINSTANCEID) LOOP

	     RCINSTANCE.NUINSTANCE_ID := RCRECORD.INSTANCE_ID;
	     RCINSTANCE.SBDESCRIPTION := RCRECORD.DESCRIPTION;
	     RCINSTANCE.NUPARENT_ID := RCRECORD.PARENT_ID;
	     RCINSTANCE.NUORIGINAL_TASK := RCRECORD.ORIGINAL_TASK;
	     RCINSTANCE.NUPLAN_ID := RCRECORD.PLAN_ID;
	     RCINSTANCE.NUUNIT_ID := RCRECORD.UNIT_ID;
	     RCINSTANCE.NUSTATUS_ID := RCRECORD.STATUS_ID;
	     RCINSTANCE.NUPREVIOUS_STATUS_ID :=	RCRECORD.PREVIOUS_STATUS_ID;
	     RCINSTANCE.NUONLINE_EXEC_ID := RCRECORD.ONLINE_EXEC_ID;
	     RCINSTANCE.NUACTION_ID := RCRECORD.ACTION_ID;
	     RCINSTANCE.NUPRE_EXPRESSION_ID := RCRECORD.PRE_EXPRESSION_ID;
	     RCINSTANCE.NUPOS_EXPRESSION_ID := RCRECORD.POS_EXPRESSION_ID;
	     RCINSTANCE.NUQUANTITY := RCRECORD.QUANTITY;
	     RCINSTANCE.NUSINCRONIC_TIMEOUT := RCRECORD.SINCRONIC_TIMEOUT;
	     RCINSTANCE.NUASINCRONIC_TIMEOUT := RCRECORD.ASINCRONIC_TIMEOUT;
	     RCINSTANCE.NULAYER_ID := RCRECORD.LAYER_ID;
	     RCINSTANCE.SBEXTERNAL_ID := RCRECORD.EXTERNAL_ID;
	     RCINSTANCE.SBGEOMETRY := RCRECORD.GEOMETRY;
	     RCINSTANCE.NUTRY_NUMBER := RCRECORD.TRY_NUMBER;
	     RCINSTANCE.NUUNIT_TYPE_ID := RCRECORD.UNIT_TYPE_ID;
	     RCINSTANCE.SBMULTI_INSTANCE := RCRECORD.MULTI_INSTANCE;
	     RCINSTANCE.NUFUNCTION_TYPE := RCRECORD.FUNCTION_TYPE;
	     RCINSTANCE.NUNODE_TYPE_ID := RCRECORD.NODE_TYPE_ID;
	     RCINSTANCE.NUMODULE_ID := RCRECORD.MODULE_ID;
	     RCINSTANCE.SBIS_COUNTABLE := RCRECORD.IS_COUNTABLE;
	     RCINSTANCE.NUTOTAL_TIME := RCRECORD.TOTAL_TIME;
	     RCINSTANCE.SBPARENT_EXTERNAL_ID := RCRECORD.PARENT_EXTERNAL_ID;
	     RCINSTANCE.NUENTITY_ID := RCRECORD.ENTITY_ID;
	     RCINSTANCE.NUPAR_EXT_ENTITY_ID := 	RCRECORD.PAR_EXT_ENTITY_ID;
	     RCINSTANCE.NUGROUP_ID := RCRECORD.GROUP_ID;
	     RCINSTANCE.NUROOTEXTERNID := RCRECORD.ROOTEXTERNID;
	     RCINSTANCE.NUROOTEXTERNENTITYID := RCRECORD.ROOTEXTERNENTITYID;
	     RCINSTANCE.NUCATEGORY_ID := RCRECORD.CATEGORY_ID;
	     RCINSTANCE.NUMIN_GROUP_SIZE := RCRECORD.MIN_GROUP_SIZE;
	     RCINSTANCE.NUNOTIFICATION_ID := RCRECORD.NOTIFICATION_ID;
	     RCINSTANCE.NUPREVIOUS_INSTANCE_ID := RCRECORD.PREVIOUS_INSTANCE_ID;
	     RCINSTANCE.DTINITIAL_DATE := RCRECORD.INITIAL_DATE;

	END LOOP;

	RETURN RCINSTANCE;

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FRCGETINSTANCE;

    
    
    

    FUNCTION FBOHASPENDINGTASK
    (
	INUPARENTID    IN    WF_INSTANCE.PARENT_ID%TYPE,
	INULASTTASK    IN    WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN BOOLEAN IS

	CURSOR CUPENDINGTASK
	(
	    INUPARENTID    IN    WF_INSTANCE.PARENT_ID%TYPE,
	    INULASTTASK    IN    WF_INSTANCE.INSTANCE_ID%TYPE
	)
	IS
	SELECT INSTANCE_ID
	FROM   WF_INSTANCE
	WHERE  PARENT_ID = INUPARENTID
	AND    ((STATUS_ID NOT IN (WF_BOCONSTANTS.CNUCREATED,
				   WF_BOCONSTANTS.CNUFINISHED,
				   WF_BOCONSTANTS.CNUANNULLED)
	AND    NODE_TYPE_ID NOT IN (WF_BOCONSTANTS.CNUEND))
	OR    (NODE_TYPE_ID = WF_BOCONSTANTS.CNUEND
		AND STATUS_ID NOT IN (WF_BOCONSTANTS.CNUFINISHED,
				      WF_BOCONSTANTS.CNUANNULLED,
				      WF_BOCONSTANTS.CNUCOMPLETED,
				      WF_BOCONSTANTS.CNUCREATED)))
        AND    INSTANCE_ID != INULASTTASK
	AND    ROWNUM = 1;


    BEGIN

	FOR RCRECORD IN CUPENDINGTASK(INUPARENTID, INULASTTASK) LOOP
	    RETURN(TRUE);
	END LOOP;

	RETURN(FALSE);

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FBOHASPENDINGTASK;

    
    
    

    FUNCTION FNUGETSTARTNODE
    (
	INUINST    IN    WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN WF_INSTANCE.INSTANCE_ID%TYPE IS

	CURSOR CUSTARTNODE
	(
	    INUINST    IN    WF_INSTANCE.INSTANCE_ID%TYPE
	)
	IS
	SELECT INSTANCE_ID
	FROM   WF_INSTANCE
	WHERE  NODE_TYPE_ID = WF_BOCONSTANTS.CNUSTART
	AND    PARENT_ID    = INUINST;
	

	NUSTARTNODE    WF_INSTANCE.INSTANCE_ID%TYPE:=NULL;

    BEGIN

	FOR RCRECORD IN CUSTARTNODE(INUINST) LOOP
	    NUSTARTNODE := RCRECORD.INSTANCE_ID;
	END LOOP;

	RETURN(NUSTARTNODE);

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FNUGETSTARTNODE;

    
    
    

    PROCEDURE UPDATEINSTANCE
    (

        INUINST                 IN      WF_INSTANCE.INSTANCE_ID%TYPE,
        ISBCLONABLE             IN      WF_INSTANCE.MULTI_INSTANCE%TYPE,
        INUENTITYID             IN      WF_INSTANCE.ENTITY_ID%TYPE,
        ISBEXTERNALID           IN      WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBFINALDATE            IN      WF_INSTANCE.FINAL_DATE%TYPE,
        INUGROUPID              IN      WF_INSTANCE.GROUP_ID%TYPE,
        ISBINITIALDATE          IN      WF_INSTANCE.INITIAL_DATE%TYPE,
        INUPARENTEXTERNENTITYID IN      WF_INSTANCE.PAR_EXT_ENTITY_ID%TYPE,
        ISBPARENTEXTERNID       IN      WF_INSTANCE.PARENT_EXTERNAL_ID%TYPE,
        INUPREVIOUSINSTANCEID   IN      WF_INSTANCE.PREVIOUS_INSTANCE_ID%TYPE,
        INUSTATUS               IN      WF_INSTANCE.STATUS_ID%TYPE,
        INUPREVSTATUS           IN      WF_INSTANCE.STATUS_ID%TYPE,
        INUTRYNUMBER            IN      WF_INSTANCE.TRY_NUMBER%TYPE

    )
    IS
    BEGIN

    


        UPDATE WF_INSTANCE
        SET    MULTI_INSTANCE       = ISBCLONABLE,
               ENTITY_ID            = INUENTITYID,
               EXTERNAL_ID          = ISBEXTERNALID,
               FINAL_DATE           = ISBFINALDATE,
               GROUP_ID             = INUGROUPID,
               INITIAL_DATE         = ISBINITIALDATE,
               PAR_EXT_ENTITY_ID    = INUPARENTEXTERNENTITYID,
               PARENT_EXTERNAL_ID   = ISBPARENTEXTERNID,
               PREVIOUS_INSTANCE_ID = INUPREVIOUSINSTANCEID,
               STATUS_ID	    = INUSTATUS,
               PREVIOUS_STATUS_ID   = INUPREVSTATUS,
               TRY_NUMBER           = INUTRYNUMBER
        WHERE  INSTANCE_ID          = INUINST;

    

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END UPDATEINSTANCE;
    
    
    
    

    FUNCTION FNUGETENDNODE
    (
	INUINSTANCEID    IN    WF_INSTANCE.INSTANCE_ID%TYPE
    )
    RETURN WF_INSTANCE.INSTANCE_ID%TYPE IS

	CURSOR CUENDNODE
	(
	    INUINSTANCEID    IN    WF_INSTANCE.INSTANCE_ID%TYPE
	)
	IS
	SELECT INSTANCE_ID
	FROM   WF_INSTANCE
	WHERE  NODE_TYPE_ID = WF_BOCONSTANTS.CNUEND
	AND    PARENT_ID    = INUINSTANCEID;

	NUENDNODE    WF_INSTANCE.INSTANCE_ID%TYPE:=NULL;

    BEGIN

	FOR RCWFINSTANCE IN CUENDNODE(INUINSTANCEID) LOOP
	    NUENDNODE := RCWFINSTANCE.INSTANCE_ID;
	END LOOP;

	RETURN(NUENDNODE);

    EXCEPTION

        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END FNUGETENDNODE;

    
    
    

    
    FUNCTION FNUGETFINPROCBYEXT
    (
        INUINSTANCEID   IN WF_INSTANCE.INSTANCE_ID%TYPE,
        INUENTITYID     IN WF_INSTANCE.ENTITY_ID%TYPE,
        ISBLISTEXTERNAL IN VARCHAR2
    )
        RETURN NUMBER
        
    IS
    
        NUENDINSTANCEID   WF_INSTANCE.INSTANCE_ID%TYPE;
        NURESULT          NUMBER;
    
    BEGIN
        UT_TRACE.TRACE ('Inicio WF_BOINSTANCE.fnuGetFinProcByExt date ['||SYSDATE||']-inuInstanceId:['||INUINSTANCEID||']-inuEntityId:['||INUENTITYID||']-isbListExternal:['||ISBLISTEXTERNAL||']',25);
        NURESULT := WF_BOCONSTANTS.CNUSUCCESS;
        NUENDINSTANCEID := FNUGETENDNODE(INUINSTANCEID);
        LOCKINSTANCE(NUENDINSTANCEID);
        FOR RCINSTANCE IN WF_BOINSTANCE.CUINSTANCEBYPROCESS(INUINSTANCEID) LOOP
        IF RCINSTANCE.INSTANCE_ID NOT IN (NUENDINSTANCEID,INUINSTANCEID) THEN
            IF WF_BOINSTANCE.FSBISACTIVITY(RCINSTANCE.INSTANCE_ID) = GE_BOCONSTANTS.CSBYES
                AND RCINSTANCE.STATUS_ID NOT IN (1,6,10,11,12,14,15)
                AND INSTR (','||ISBLISTEXTERNAL||',',','||RCINSTANCE.EXTERNAL_ID||',') >0
                AND RCINSTANCE.ENTITY_ID = INUENTITYID  THEN
                NURESULT := WF_BOCONSTANTS.CNUFAIL;
                EXIT;
            END IF;
        END IF;
        END LOOP;
        UT_TRACE.TRACE ('Fin WF_BOINSTANCE.fnuGetFinProcByExt date ['||SYSDATE||'] - nuResult:'||NURESULT ,25);
        RETURN NURESULT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETFINPROCBYEXT;
    
    PROCEDURE PUTLISTEXTERNAL
    (
        ISBLISTEXTERNAL IN VARCHAR2
    )

    IS

    BEGIN
        UT_TRACE.TRACE ('Inicio putListExternal date ['||SYSDATE||']-isbListExternal:['||ISBLISTEXTERNAL||']',25);
        GSBLISTEXTERNAL := ISBLISTEXTERNAL;
        UT_TRACE.TRACE ('Fin putListExternal date ['||SYSDATE||'] - gsbListExternal:'||GSBLISTEXTERNAL ,25);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PUTLISTEXTERNAL;
    
    FUNCTION FSBGETLISTEXTERNAL
    RETURN VARCHAR2

    IS

    BEGIN
        UT_TRACE.TRACE ('Inicio fsbGetListExternal date ['||SYSDATE||']-gsbListExternal:['||GSBLISTEXTERNAL||']',25);
        RETURN GSBLISTEXTERNAL;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETLISTEXTERNAL;
    
    
    FUNCTION FSBHASUNITTYPEACTIVE
        (
        INUPLANID       IN WF_INSTANCE.PLAN_ID%TYPE,
        INUUNITTYPEID   IN WF_INSTANCE.UNIT_TYPE_ID%TYPE
        )
    RETURN VARCHAR2
    IS
        SBRESULT        VARCHAR2(100);
        NUINSTANCEID    WF_INSTANCE.INSTANCE_ID%TYPE;
        
        CURSOR CUTASKACTBYPLANUNITTY
            (
            INUPLANID       IN WF_INSTANCE.PLAN_ID%TYPE,
            INUUNITTYPEID   IN WF_INSTANCE.UNIT_TYPE_ID%TYPE
            )
        IS
        SELECT A.INSTANCE_ID
        FROM WF_INSTANCE A
        WHERE A.PLAN_ID =INUPLANID
          AND A.UNIT_TYPE_ID =INUUNITTYPEID
          AND EXISTS(
            SELECT 'X' FROM WF_INSTANCE_STATUS B
            WHERE B.ACTIVE_FLAG = GE_BOCONSTANTS.CSBYES
            AND  B.INSTANCE_STATUS_ID = A.STATUS_ID);
    
    BEGIN
        OPEN CUTASKACTBYPLANUNITTY(INUPLANID, INUUNITTYPEID);
        FETCH CUTASKACTBYPLANUNITTY INTO NUINSTANCEID;
        IF ( CUTASKACTBYPLANUNITTY%FOUND ) THEN
            SBRESULT := GE_BOCONSTANTS.GETYES;
        ELSE
            SBRESULT := GE_BOCONSTANTS.GETNO;
        END IF;
        CLOSE CUTASKACTBYPLANUNITTY;
        RETURN SBRESULT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUTASKACTBYPLANUNITTY%ISOPEN) THEN
                CLOSE CUTASKACTBYPLANUNITTY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CUTASKACTBYPLANUNITTY%ISOPEN) THEN
                CLOSE CUTASKACTBYPLANUNITTY;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBHASUNITTYPEACTIVE;
    
    
    PROCEDURE UPDSTATUSINSTANCE
    (
     	INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
     	INUSTATUSID IN WF_INSTANCE.STATUS_ID%TYPE
    )
    IS
    BEGIN
        
        UPDATE WF_INSTANCE
           SET STATUS_ID = INUSTATUSID
         WHERE INSTANCE_ID = INUINSTANCEID;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE  EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE  EX.CONTROLLED_ERROR;
    END;

    



























    PROCEDURE ATTENDINSTANCERELAT
    (
        INUPACKAGEID    MO_PACKAGES.PACKAGE_ID%TYPE,
        ISBUNITTYPESID  VARCHAR2
    )
    IS
        NUERRORCODE     GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMSG      GE_ERROR_LOG.DESCRIPTION%TYPE;

        CURSOR CUATTENDINSTANCE(
                                NUPACKAGEID    MO_PACKAGES.PACKAGE_ID%TYPE,
                                SBUNITTYPESID   VARCHAR2
                                )
        IS
        SELECT  WF_INSTANCE.INSTANCE_ID
        FROM    WF_INSTANCE
        WHERE   ENTITY_ID =  17
                AND STATUS_ID+0 =3
                AND INSTR(','||SBUNITTYPESID||',',','||UNIT_TYPE_ID||',') >0
                AND EXTERNAL_ID IN
                    (SELECT TO_CHAR(PACKAGE_ID)
                       FROM MO_COMPONENT
                      WHERE COMP_PROD_PROV_ID IN ( SELECT MO_COMPONENT.COMPONENT_ID_PROD
                                                     FROM MO_COMPONENT, MO_MOTIVE
                                                    WHERE MO_COMPONENT.MOTIVE_ID = MO_MOTIVE.MOTIVE_ID
                                                          AND MO_MOTIVE.PACKAGE_ID = NUPACKAGEID
                                                 )
                    );
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo WF_BOInstance.AttendInstanceRelat', 2);
        FOR RGATTENDINST IN CUATTENDINSTANCE(INUPACKAGEID,ISBUNITTYPESID ) LOOP
            BEGIN
                WF_BODISPATCHER.UPDATEEXECUTIONDATE(RGATTENDINST.INSTANCE_ID, SYSDATE-1);
                UT_TRACE.TRACE('UpdatingExecutionDate='||RGATTENDINST.INSTANCE_ID, 20);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
                    UT_TRACE.TRACE('ErrorUpdatingExecutionDate='||RGATTENDINST.INSTANCE_ID,15);
            END ;

        END LOOP;
        UT_TRACE.TRACE('Termina Metodo WF_BOInstance.AttendInstanceRelat', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUATTENDINSTANCE%ISOPEN THEN
                CLOSE CUATTENDINSTANCE;
            END IF;
		    ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
            RAISE_APPLICATION_ERROR(WF_BOCONSTANTS.CNUGENAPPERROR,NUERRORCODE||'-'||SBERRORMSG);
		WHEN OTHERS THEN
            IF CUATTENDINSTANCE%ISOPEN THEN
                CLOSE CUATTENDINSTANCE;
            END IF;
            ERRORS.SETERROR;
		    ERRORS.GETERROR(NUERRORCODE,SBERRORMSG);
            RAISE_APPLICATION_ERROR(WF_BOCONSTANTS.CNUGENAPPERROR,NUERRORCODE||'-'||SBERRORMSG);
    END ATTENDINSTANCERELAT;

    















    FUNCTION FNUCHILDINPROCESS
    (
        INUPARENTID     IN WF_INSTANCE.PARENT_ID%TYPE,
        INUUNITTYPEID   IN WF_INSTANCE.UNIT_TYPE_ID%TYPE,
        INUENTITYID     IN WF_INSTANCE.ENTITY_ID%TYPE,
        ISBEXTERNALID   IN WF_INSTANCE.EXTERNAL_ID%TYPE
    ) RETURN NUMBER
    IS
        NUINSTANCEID    WF_INSTANCE.INSTANCE_ID%TYPE := NULL;

        CURSOR CUPROCESSBYENTEXTUNTY
        (
            INUPARENTID     IN WF_INSTANCE.PARENT_ID%TYPE,
            INUUNITTYPEID   IN WF_INSTANCE.UNIT_TYPE_ID%TYPE,
            INUENTITYID     IN WF_INSTANCE.ENTITY_ID%TYPE,
            ISBEXTERNALID   IN WF_INSTANCE.EXTERNAL_ID%TYPE
        )
        IS
            SELECT  WF_INSTANCE.INSTANCE_ID
            FROM    WF_INSTANCE
            WHERE   WF_INSTANCE.PARENT_ID = INUPARENTID
            AND     WF_INSTANCE.UNIT_TYPE_ID = INUUNITTYPEID
            AND     WF_INSTANCE.ENTITY_ID = INUENTITYID
            AND     WF_INSTANCE.EXTERNAL_ID = ISBEXTERNALID;

    BEGIN

        OPEN CUPROCESSBYENTEXTUNTY(INUPARENTID, INUUNITTYPEID,
                        INUENTITYID,ISBEXTERNALID);
        FETCH CUPROCESSBYENTEXTUNTY INTO NUINSTANCEID;
        CLOSE CUPROCESSBYENTEXTUNTY;

        RETURN NUINSTANCEID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUPROCESSBYENTEXTUNTY%ISOPEN ) THEN
                CLOSE CUPROCESSBYENTEXTUNTY;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUPROCESSBYENTEXTUNTY%ISOPEN ) THEN
                CLOSE CUPROCESSBYENTEXTUNTY;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUCHILDINPROCESS;

   
















    PROCEDURE UPDATEEXECUTIONDATE
    (
        INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE,
        IDTNEWDATE    IN DATE
    ) IS
        SBSTATEMENT    VARCHAR2(2000);
    BEGIN
    
        SBSTATEMENT  := 'BEGIN ' ||
                            'WF_BODispatcher.UpdateExecutionDate (:1,:2); '||
                        'END;';

        EXECUTE IMMEDIATE SBSTATEMENT
        USING IN  INUINSTANCEID, IN  IDTNEWDATE;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    FUNCTION FNUGETSTATUS
    (
        INUINSTANCEID     IN WF_INSTANCE.INSTANCE_ID%TYPE
    ) RETURN NUMBER
    IS

    BEGIN

        RETURN DAWF_INSTANCE.FNUGETSTATUS_ID( INUINSTANCEID );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETSTATUS;
    
    
    















    FUNCTION FNUGETINSTANCEINPLAN
    (
        INUENTITYID         IN WF_INSTANCE.ENTITY_ID%TYPE,
        ISBEXTERNALID       IN WF_INSTANCE.EXTERNAL_ID%TYPE,
        INUUNITTYPEID       IN WF_INSTANCE.UNIT_TYPE_ID%TYPE,
        INUUNITTYPEPLANID   IN WF_UNIT_TYPE.UNIT_TYPE_ID%TYPE
    ) RETURN NUMBER
    IS
        NUINSTANCEID    WF_INSTANCE.INSTANCE_ID%TYPE := NULL;
        TBINSTANCEID    DAWF_INSTANCE.TYTBINSTANCE_ID;
        TBPLANID        DAWF_INSTANCE.TYTBPLAN_ID;
        
        NUINDEX         BINARY_INTEGER;

        CURSOR CUINSTACEBYPLAN
        (
            INUUNITTYPEID       IN WF_INSTANCE.UNIT_TYPE_ID%TYPE,
            INUENTITYID         IN WF_INSTANCE.ENTITY_ID%TYPE,
            ISBEXTERNALID       IN WF_INSTANCE.EXTERNAL_ID%TYPE
        )
        IS
            SELECT  /*+INDEX(wf_instance IDX_WF_INSTANCE_08) */
                    WF_INSTANCE.INSTANCE_ID, WF_INSTANCE.PLAN_ID
            FROM    WF_INSTANCE /*+WF_BOInstance.fnuGetInstanceInPlan*/
            WHERE   WF_INSTANCE.UNIT_TYPE_ID = INUUNITTYPEID
            AND     WF_INSTANCE.ENTITY_ID = INUENTITYID
            AND     WF_INSTANCE.EXTERNAL_ID = ISBEXTERNALID;

    BEGIN
    
        UT_TRACE.TRACE('Inicio WF_BOInstance.fnuGetInstanceInPlan', 10);

        UT_TRACE.TRACE('inuUnitTypeId[' ||INUUNITTYPEID||']', 10);
        UT_TRACE.TRACE('inuEntityId['   ||INUENTITYID||']', 10);
        UT_TRACE.TRACE('isbExternalId[' ||ISBEXTERNALID||']', 10);
        UT_TRACE.TRACE('inuUnitTypePlanId[' ||INUUNITTYPEPLANID||']', 10);

        IF ( CUINSTACEBYPLAN%ISOPEN ) THEN
            CLOSE CUINSTACEBYPLAN;
        END IF;
            
        OPEN CUINSTACEBYPLAN(INUUNITTYPEID,INUENTITYID,ISBEXTERNALID);
        FETCH CUINSTACEBYPLAN BULK COLLECT INTO TBINSTANCEID, TBPLANID;
        CLOSE CUINSTACEBYPLAN;

        NUINDEX := TBINSTANCEID.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP

            IF ( DAWF_INSTANCE.FNUGETUNIT_TYPE_ID(TBPLANID(NUINDEX) ) = INUUNITTYPEPLANID ) THEN
                NUINSTANCEID := TBINSTANCEID(NUINDEX);
                EXIT;
            END IF;
            
            NUINDEX := TBINSTANCEID.NEXT(NUINDEX);
        END LOOP;


        UT_TRACE.TRACE('Inicio WF_BOInstance.fnuGetInstanceInPlan InstanceId: [' || NUINSTANCEID || ']', 10);
        RETURN NUINSTANCEID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF ( CUINSTACEBYPLAN%ISOPEN ) THEN
                CLOSE CUINSTACEBYPLAN;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF ( CUINSTACEBYPLAN%ISOPEN ) THEN
                CLOSE CUINSTACEBYPLAN;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETINSTANCEINPLAN;
    

END WF_BOINSTANCE;