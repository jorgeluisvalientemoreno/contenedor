CREATE OR REPLACE PACKAGE BODY PKTBLELEMMEDI IS
   RCELEMMEDI CUELEMMEDI%ROWTYPE;
   RCRECORDNULL ELEMMEDI%ROWTYPE;
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO165059';
   CACHE CONSTANT NUMBER := 1;
   CNURECORD_NO_EXISTE CONSTANT NUMBER( 1 ) := 1;
   CNURECORD_YA_EXISTE CONSTANT NUMBER( 1 ) := 2;
   CBSTABLE CONSTANT VARCHAR2( 30 ) := 'ELEMMEDI';
   CNUGEENTITYID CONSTANT VARCHAR2( 30 ) := 437;
   FUNCTION FSBGETMESSAGEDESCRIPTION( INUMENSCODI IN NUMBER )
    RETURN VARCHAR2
    IS
      SBMESSAGE VARCHAR2( 32000 );
      SBTABLEDESCRIPTION VARCHAR2( 32000 );
    BEGIN
      IF ( CNUGEENTITYID > 0 AND DAGE_ENTITY.FBLEXIST( CNUGEENTITYID ) ) THEN
         SBTABLEDESCRIPTION := DAGE_ENTITY.FSBGETDISPLAY_NAME( CNUGEENTITYID );
      END IF;
      SBMESSAGE := DAGE_MESSAGE.FSBGETDESCRIPTION( INUMENSCODI );
      IF SBTABLEDESCRIPTION IS NULL THEN
         SBMESSAGE := REPLACE( SBMESSAGE, '%s1', CBSTABLE );
       ELSE
         SBMESSAGE := REPLACE( SBMESSAGE, '%s1', '(' || CBSTABLE || ' - ' || SBTABLEDESCRIPTION || ')' );
      END IF;
      RETURN SBMESSAGE;
   END FSBGETMESSAGEDESCRIPTION;
   FUNCTION FBLINMEMORY( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fblInMemory' );
      IF ( RCELEMMEDI.ELMEIDEM = INUELMEIDEM ) THEN
         PKERRORS.POP;
         RETURN ( TRUE );
      END IF;
      PKERRORS.POP;
      RETURN ( FALSE );
   END FBLINMEMORY;
   PROCEDURE LOADRECORD( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.LoadRecord' );
      IF CUELEMMEDI%ISOPEN THEN
         CLOSE CUELEMMEDI;
      END IF;
      OPEN CUELEMMEDI( INUELMEIDEM );
      FETCH CUELEMMEDI
         INTO RCELEMMEDI;
      IF ( CUELEMMEDI%NOTFOUND ) THEN
         CLOSE CUELEMMEDI;
         PKERRORS.POP;
         RCELEMMEDI := RCRECORDNULL;
         RETURN;
      END IF;
      CLOSE CUELEMMEDI;
      PKERRORS.POP;
   END LOADRECORD;
   PROCEDURE LOAD( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.Load' );
      LOADRECORD( INUELMEIDEM );
      IF ( RCELEMMEDI.ELMEIDEM IS NULL ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END LOAD;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END FSBVERSION;
   PROCEDURE ACCKEY( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.AccKey' );
      IF ( INUCACHE = CACHE ) THEN
         IF ( FBLINMEMORY( INUELMEIDEM ) ) THEN
            PKERRORS.POP;
            RETURN;
         END IF;
      END IF;
      LOAD( INUELMEIDEM );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END ACCKEY;
   PROCEDURE CLEARMEMORY
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.ClearMemory' );
      RCELEMMEDI := RCRECORDNULL;
      PKERRORS.POP;
   END CLEARMEMORY;
   PROCEDURE DELRECORD( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.DelRecord' );
      DELETE Elemmedi
		WHERE
       		Elmeidem=inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END DELRECORD;
   PROCEDURE DELRECORDS( INUELMEIDEM IN OUT NOCOPY TYELMEIDEM )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.DelRecords' );
      FORALL INDX IN INUELMEIDEM.FIRST..INUELMEIDEM.LAST
         DELETE Elemmedi
		WHERE 
            Elmeidem = inuElmeidem(indx);
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END DELRECORDS;
   PROCEDURE INSFOREACHCOLUMN( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, ISBELMECODI IN ELEMMEDI.ELMECODI%TYPE, INUELMECLEM IN ELEMMEDI.ELMECLEM%TYPE, INUELMENUDC IN ELEMMEDI.ELMENUDC%TYPE, INUELMEUIEM IN ELEMMEDI.ELMEUIEM%TYPE, INUELMEPOSI IN ELEMMEDI.ELMEPOSI%TYPE, INUELMEFACM IN ELEMMEDI.ELMEFACM%TYPE, INUELMEFACD IN ELEMMEDI.ELMEFACD%TYPE, INUELMETOPE IN ELEMMEDI.ELMETOPE%TYPE, INUELMEEMAC IN ELEMMEDI.ELMEEMAC%TYPE )
    IS
      RCRECORD ELEMMEDI%ROWTYPE;
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.InsForEachColumn' );
      RCRECORD.ELMEIDEM := INUELMEIDEM;
      RCRECORD.ELMECODI := ISBELMECODI;
      RCRECORD.ELMECLEM := INUELMECLEM;
      RCRECORD.ELMENUDC := INUELMENUDC;
      RCRECORD.ELMEUIEM := INUELMEUIEM;
      RCRECORD.ELMEPOSI := INUELMEPOSI;
      RCRECORD.ELMEFACM := INUELMEFACM;
      RCRECORD.ELMEFACD := INUELMEFACD;
      RCRECORD.ELMETOPE := INUELMETOPE;
      RCRECORD.ELMEEMAC := INUELMEEMAC;
      INSRECORD( RCRECORD );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END INSFOREACHCOLUMN;
   PROCEDURE INSFOREACHCOLUMNBULK( INUELMEIDEM IN OUT NOCOPY TYELMEIDEM, ISBELMECODI IN OUT NOCOPY TYELMECODI, INUELMECLEM IN OUT NOCOPY TYELMECLEM, INUELMENUDC IN OUT NOCOPY TYELMENUDC, INUELMEUIEM IN OUT NOCOPY TYELMEUIEM, INUELMEPOSI IN OUT NOCOPY TYELMEPOSI, INUELMEFACM IN OUT NOCOPY TYELMEFACM, INUELMEFACD IN OUT NOCOPY TYELMEFACD, INUELMETOPE IN OUT NOCOPY TYELMETOPE, INUELMEEMAC IN OUT NOCOPY TYELMEEMAC )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.InsForEachColumnBulk' );
      FORALL INDX IN INUELMEIDEM.FIRST..INUELMEIDEM.LAST
         INSERT INTO Elemmedi
		(
			Elmeidem,
			Elmecodi,
			Elmeclem,
			Elmenudc,
			Elmeuiem,
			Elmeposi,
			Elmefacm,
			Elmefacd,
			Elmetope,
			Elmeemac
		)
		VALUES
		(
			inuElmeidem(indx),
			isbElmecodi(indx),
			inuElmeclem(indx),
			inuElmenudc(indx),
			inuElmeuiem(indx),
			inuElmeposi(indx),
			inuElmefacm(indx),
			inuElmefacd(indx),
			inuElmetope(indx),
			inuElmeemac(indx)
		);
      PKERRORS.POP;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETBSSERROR( CNURECORD_YA_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_YA_EXISTE ) );
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END INSFOREACHCOLUMNBULK;
   PROCEDURE INSRECORD( IRCRECORD IN ELEMMEDI%ROWTYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.InsRecord' );
      INSERT INTO Elemmedi
		(
			Elmeidem,
			Elmecodi,
			Elmeclem,
			Elmenudc,
			Elmeuiem,
			Elmeposi,
			Elmefacm,
			Elmefacd,
			Elmetope,
			Elmeemac
		)
		VALUES
		(
			ircRecord.Elmeidem,
			ircRecord.Elmecodi,
			ircRecord.Elmeclem,
			ircRecord.Elmenudc,
			ircRecord.Elmeuiem,
			ircRecord.Elmeposi,
			ircRecord.Elmefacm,
			ircRecord.Elmefacd,
			ircRecord.Elmetope,
			ircRecord.Elmeemac
		);
      PKERRORS.POP;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETBSSERROR( CNURECORD_YA_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_YA_EXISTE ) );
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END INSRECORD;
   PROCEDURE INSRECORDS( IRCTBRECORD IN OUT NOCOPY TYTBELEMMEDI )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.InsRecords' );
      FORALL INDX IN IRCTBRECORD.ELMEIDEM.FIRST..IRCTBRECORD.ELMEIDEM.LAST
         INSERT INTO Elemmedi
		(
			Elmeidem,
			Elmecodi,
			Elmeclem,
			Elmenudc,
			Elmeuiem,
			Elmeposi,
			Elmefacm,
			Elmefacd,
			Elmetope,
			Elmeemac
		)
		VALUES
		(
			irctbRecord.Elmeidem(indx),
			irctbRecord.Elmecodi(indx),
			irctbRecord.Elmeclem(indx),
			irctbRecord.Elmenudc(indx),
			irctbRecord.Elmeuiem(indx),
			irctbRecord.Elmeposi(indx),
			irctbRecord.Elmefacm(indx),
			irctbRecord.Elmefacd(indx),
			irctbRecord.Elmetope(indx),
			irctbRecord.Elmeemac(indx)
		);
      PKERRORS.POP;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETBSSERROR( CNURECORD_YA_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_YA_EXISTE ) );
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END INSRECORDS;
   PROCEDURE UPRECORD( IRCRECORD IN ELEMMEDI%ROWTYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpRecord' );
      UPDATE Elemmedi
		SET
				Elmecodi = ircRecord.Elmecodi,
				Elmeclem = ircRecord.Elmeclem,
				Elmenudc = ircRecord.Elmenudc,
				Elmeuiem = ircRecord.Elmeuiem,
				Elmeposi = ircRecord.Elmeposi,
				Elmefacm = ircRecord.Elmefacm,
				Elmefacd = ircRecord.Elmefacd,
				Elmetope = ircRecord.Elmetope,
				Elmeemac = ircRecord.Elmeemac
		WHERE	Elmeidem = ircRecord.Elmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPRECORD;
   PROCEDURE VALIDATEDUPVALUES( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.ValidateDupValues' );
      IF ( FBLEXIST( INUELMEIDEM, INUCACHE ) ) THEN
         ERRORS.SETBSSERROR( CNURECORD_YA_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_YA_EXISTE ) );
         RAISE LOGIN_DENIED;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END VALIDATEDUPVALUES;
   FUNCTION FBLEXIST( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN BOOLEAN
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fblExist' );
      IF ( INUCACHE = CACHE ) THEN
         IF ( FBLINMEMORY( INUELMEIDEM ) ) THEN
            PKERRORS.POP;
            RETURN ( TRUE );
         END IF;
      END IF;
      LOADRECORD( INUELMEIDEM );
      IF ( RCELEMMEDI.ELMEIDEM IS NULL ) THEN
         PKERRORS.POP;
         RETURN ( FALSE );
      END IF;
      PKERRORS.POP;
      RETURN ( TRUE );
   END FBLEXIST;
   FUNCTION FRCGETRECORD( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI%ROWTYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.frcGetRecord' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FRCGETRECORD;
   PROCEDURE UPDELMECODI( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, ISBELMECODI$ IN ELEMMEDI.ELMECODI%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdElmecodi' );
      UPDATE Elemmedi
		SET
			Elmecodi = isbElmecodi$
		WHERE  Elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDELMECODI;
   PROCEDURE UPDELMECLEM( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMECLEM$ IN ELEMMEDI.ELMECLEM%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdElmeclem' );
      UPDATE Elemmedi
		SET
			Elmeclem = inuElmeclem$
		WHERE  Elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDELMECLEM;
   PROCEDURE UPDELMENUDC( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMENUDC$ IN ELEMMEDI.ELMENUDC%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdElmenudc' );
      UPDATE Elemmedi
		SET
			Elmenudc = inuElmenudc$
		WHERE  Elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDELMENUDC;
   PROCEDURE UPDELMEUIEM( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMEUIEM$ IN ELEMMEDI.ELMEUIEM%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdElmeuiem' );
      UPDATE Elemmedi
		SET
			Elmeuiem = inuElmeuiem$
		WHERE  Elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDELMEUIEM;
   PROCEDURE UPDELMEPOSI( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMEPOSI$ IN ELEMMEDI.ELMEPOSI%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdElmeposi' );
      UPDATE Elemmedi
		SET
			Elmeposi = inuElmeposi$
		WHERE  Elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDELMEPOSI;
   PROCEDURE UPDELMEFACM( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMEFACM$ IN ELEMMEDI.ELMEFACM%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdElmefacm' );
      UPDATE Elemmedi
		SET
			Elmefacm = inuElmefacm$
		WHERE  Elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDELMEFACM;
   PROCEDURE UPDELMEFACD( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMEFACD$ IN ELEMMEDI.ELMEFACD%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdElmefacd' );
      UPDATE Elemmedi
		SET
			Elmefacd = inuElmefacd$
		WHERE  Elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDELMEFACD;
   PROCEDURE UPDELMETOPE( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMETOPE$ IN ELEMMEDI.ELMETOPE%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdElmetope' );
      UPDATE Elemmedi
		SET
			Elmetope = inuElmetope$
		WHERE  Elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDELMETOPE;
   PROCEDURE UPDELMEEMAC( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMEEMAC$ IN ELEMMEDI.ELMEEMAC%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdElmeemac' );
      UPDATE Elemmedi
		SET
			Elmeemac = inuElmeemac$
		WHERE  Elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDELMEEMAC;
   FUNCTION FNUGETELMEIDEM( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMEIDEM%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetElmeidem' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMEIDEM );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETELMEIDEM;
   FUNCTION FSBGETELMECODI( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMECODI%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fsbGetElmecodi' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMECODI );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FSBGETELMECODI;
   FUNCTION FNUGETELMECLEM( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMECLEM%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetElmeclem' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMECLEM );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETELMECLEM;
   FUNCTION FNUGETELMENUDC( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMENUDC%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetElmenudc' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMENUDC );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETELMENUDC;
   FUNCTION FNUGETELMEUIEM( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMEUIEM%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetElmeuiem' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMEUIEM );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETELMEUIEM;
   FUNCTION FNUGETELMEPOSI( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMEPOSI%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetElmeposi' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMEPOSI );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETELMEPOSI;
   FUNCTION FNUGETELMEFACM( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMEFACM%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetElmefacm' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMEFACM );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETELMEFACM;
   FUNCTION FNUGETELMEFACD( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMEFACD%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetElmefacd' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMEFACD );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETELMEFACD;
   FUNCTION FNUGETELMETOPE( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMETOPE%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetElmetope' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMETOPE );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETELMETOPE;
   FUNCTION FNUGETELMEEMAC( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMEEMAC%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetElmeemac' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMEEMAC );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETELMEEMAC;
   FUNCTION FSBGETMEASELEMCODE( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMECODI%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fsbGetMeasElemCode' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMECODI );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FSBGETMEASELEMCODE;
   FUNCTION FNUGETMEASCLASS( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMECLEM%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetMeasClass' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMECLEM );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETMEASCLASS;
   FUNCTION FNUGETMEASGENERAL( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMEEMAC%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetMeasGeneral' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMEEMAC );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETMEASGENERAL;
   PROCEDURE UPDATECLASSELEMENT( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMECLEM IN ELEMMEDI.ELMECLEM%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdateClassElement' );
      UPDATE elemmedi
     SET    elmeclem = inuElmeclem
     WHERE  elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDATECLASSELEMENT;
   PROCEDURE UPDATEDIGITSNUMBER( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMENUDC IN ELEMMEDI.ELMENUDC%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdateDigitsNumber' );
      UPDATE elemmedi
     SET    elmenudc = inuElmenudc
     WHERE  elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDATEDIGITSNUMBER;
   PROCEDURE UPDATEELEMENTSITUATE( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMEUIEM IN ELEMMEDI.ELMEUIEM%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdateElementSituate' );
      UPDATE elemmedi
     SET    elmeuiem = inuElmeuiem
     WHERE  elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDATEELEMENTSITUATE;
   PROCEDURE UPDATEMEASUREFACTOR( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMEFACM IN ELEMMEDI.ELMEFACM%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdateMeasureFactor' );
      UPDATE elemmedi
         SET    elmefacm = inuElmeFacm
         WHERE  elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDATEMEASUREFACTOR;
   PROCEDURE UPDATEDEPENDENTCOMMONAREA( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUELMEEMAC IN ELEMMEDI.ELMEEMAC%TYPE )
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.UpdateDependentCommonArea' );
      UPDATE elemmedi
        SET    elmeemac = inuElmeEmac
        WHERE  elmeidem = inuElmeidem;
      IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
      END IF;
      PKERRORS.POP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR( CNURECORD_NO_EXISTE, FSBGETMESSAGEDESCRIPTION( CNURECORD_NO_EXISTE ) );
         RAISE LOGIN_DENIED;
   END UPDATEDEPENDENTCOMMONAREA;
   FUNCTION FNUGETPOSITION( INUELMEIDEM IN ELEMMEDI.ELMEIDEM%TYPE, INUCACHE IN NUMBER := 1 )
    RETURN ELEMMEDI.ELMEPOSI%TYPE
    IS
    BEGIN
      PKERRORS.PUSH( 'pktblElemmedi.fnuGetPosition' );
      ACCKEY( INUELMEIDEM, INUCACHE );
      PKERRORS.POP;
      RETURN ( RCELEMMEDI.ELMEPOSI );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
   END FNUGETPOSITION;
END PKTBLELEMMEDI;
/


