PACKAGE BODY LDC_BOParameter AS















































    TYPE TYTBPARAMETER IS TABLE OF GE_PARAMETER%ROWTYPE INDEX BY BINARY_INTEGER;
    
    
    
    CSBVERSION CONSTANT VARCHAR2(10) := 'SAO209517';

    CNUPARAMETERNOTFOUND CONSTANT NUMBER := 4640;
    CNUINVALIDVALUEYESORNOT CONSTANT NUMBER := 3225;

    
    GNUCODIGOERROR          GE_ERROR_LOG.MESSAGE_ID%TYPE;
    
    GSBMENSAJEERROR         GE_ERROR_LOG.DESCRIPTION%TYPE;
    
    GCNUNIVELTRAZA          CONSTANT NUMBER := 3;
    
    GCSBTIPONUMERICO        CONSTANT GE_PARAMETER.DATA_TYPE%TYPE := 'NUMBER';
    
    GCSBTIPOALFANUMERICO    CONSTANT GE_PARAMETER.DATA_TYPE%TYPE := 'VARCHAR2';
    
    GCSBTIPOFECHA           CONSTANT GE_PARAMETER.DATA_TYPE%TYPE := 'DATE';
    
    GCNUMENSTIPODATOPARAM   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE  := 12164;
    
    GCNUMENSVALORNONUMERO   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE  := 12161;
    
    GCNUMENSVALORNOFECHA    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE  := 12163;
    
    GCNUMENSPARAMNULO       CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE  := 1422;

    
    
    
    TBPARAMETER  TYTBPARAMETER; 
    NUHASHVALUE  NUMBER;        
    BLCACHE      BOOLEAN;
    EXINVALID_PARAMETER EXCEPTION;

    
    
    
    FUNCTION FSBVERSION RETURN VARCHAR2
    IS
    BEGIN
       RETURN CSBVERSION;
    END;
    
    PROCEDURE CLEARMEMORY
    IS
    BEGIN
        TBPARAMETER.DELETE;
    END;
    
    PROCEDURE SETCACHEON
    IS
    BEGIN
        BLCACHE := TRUE;
    END;

    PROCEDURE SETCAHEOFF
    IS
    BEGIN
      BLCACHE := FALSE;
    END;

    PROCEDURE  VALYESNO( NEWVAL VARCHAR2)
    IS
    BEGIN

        IF (NEWVAL != CSBYES  AND
            NEWVAL != CSBNO) THEN
            ERRORS.SETERROR(CNUINVALIDVALUEYESORNOT);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    END VALYESNO;
    

    PROCEDURE GETRECORD
        (
            ISBPARAMETER_ID IN GE_PARAMETER.PARAMETER_ID%TYPE,
            ORCPARAMETER OUT GE_PARAMETER%ROWTYPE
        )
    IS
        CURSOR CUPARAMETER(ISBCODE GE_PARAMETER.PARAMETER_ID%TYPE) IS
            SELECT *
            FROM GE_PARAMETER
            WHERE PARAMETER_ID = ISBPARAMETER_ID;
    BEGIN
        OPEN CUPARAMETER(ISBPARAMETER_ID);
        FETCH CUPARAMETER INTO ORCPARAMETER;

        IF (CUPARAMETER%NOTFOUND) THEN
            CLOSE CUPARAMETER;
            RAISE NO_DATA_FOUND;
        END IF;

        CLOSE CUPARAMETER;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETERROR(CNUPARAMETERNOTFOUND,ISBPARAMETER_ID);
			RAISE EX.CONTROLLED_ERROR;

		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;
    PROCEDURE GETCACHERECORD
    (
        ISBPARAMETER_ID IN GE_PARAMETER.PARAMETER_ID%TYPE,
        ORCPARAMETER IN OUT NOCOPY GE_PARAMETER%ROWTYPE
    )
    IS
    RCPARAMETER GE_PARAMETER%ROWTYPE;
    NUHASHIDX   PLS_INTEGER;
    BEGIN
       
       IF NUHASHVALUE IS NULL THEN
            GETRECORD
            (
                'HASH_SIZE',
                RCPARAMETER
            );
            NUHASHVALUE := RCPARAMETER.VALUE;
       END IF;
       NUHASHIDX := DBMS_UTILITY.GET_HASH_VALUE(ISBPARAMETER_ID,0, NUHASHVALUE);
       IF TBPARAMETER.EXISTS(NUHASHIDX) THEN
            ORCPARAMETER:=  TBPARAMETER(NUHASHIDX);
       ELSE
            GETRECORD
            (
                ISBPARAMETER_ID,
                ORCPARAMETER
            );
            TBPARAMETER(NUHASHIDX):=ORCPARAMETER;
       END IF;
    EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
           RAISE;

		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

    


    FUNCTION EXCUTEDYNAMICSQL (IRCPARAMETER GE_PARAMETER%ROWTYPE)
    RETURN BOOLEAN
    IS
    SBSTATEMENT GE_PARAMETER.VAL_FUNCTION%TYPE;
    BEGIN
        SBSTATEMENT := RTRIM(LTRIM(IRCPARAMETER.VAL_FUNCTION));
        SBSTATEMENT := 'BEGIN '||
                        SBSTATEMENT ||
                        '(:variable); '||
                        ' END;' ;

        IF( IRCPARAMETER.DATA_TYPE = 'NUMBER') THEN
            EXECUTE IMMEDIATE  SBSTATEMENT
            USING IN  TO_NUMBER(IRCPARAMETER.VALUE);
        ELSE
            EXECUTE IMMEDIATE  SBSTATEMENT
            USING IN  IRCPARAMETER.VALUE;
        END IF;

        RETURN TRUE;
	EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
           ERRORS.SETERROR(2673,IRCPARAMETER.PARAMETER_ID);
           RAISE;

		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;

    END;

    
    FUNCTION VALIDATEFUNCTION (ISBPARAMETER_ID IN GE_PARAMETER.PARAMETER_ID%TYPE)
    RETURN BOOLEAN
    IS
        BLEXITO         BOOLEAN := FALSE;
        RCPARAMETER     GE_PARAMETER%ROWTYPE;

    BEGIN
        GETRECORD(ISBPARAMETER_ID,RCPARAMETER);
        IF (RCPARAMETER.VAL_FUNCTION IS NOT NULL ) THEN
            BLEXITO := EXCUTEDYNAMICSQL(RCPARAMETER);
        END IF;
        RETURN BLEXITO;
	EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
           RAISE;

		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
    END;

	FUNCTION FNUGET
    (
        ISBPARAMETER_ID IN GE_PARAMETER.PARAMETER_ID%TYPE,
        ISBVALIDATENULL IN VARCHAR2 DEFAULT CSBNO
    )
	RETURN NUMBER
	IS
        RCPARAMETER GE_PARAMETER%ROWTYPE;
	BEGIN
	    IF BLCACHE  THEN
            GETCACHERECORD(ISBPARAMETER_ID,RCPARAMETER);
	    ELSE
    		GETRECORD(ISBPARAMETER_ID,RCPARAMETER);
		END IF;
        
		IF(RCPARAMETER.DATA_TYPE='NUMBER') THEN
		
            IF ISBVALIDATENULL = CSBYES AND
               RCPARAMETER.VALUE IS NULL THEN
                
                ERRORS.SETERROR
                (
                    GCNUMENSPARAMNULO           ,
                    RCPARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;
            END IF;
		
			RETURN(TO_NUMBER(RCPARAMETER.VALUE));
		END IF;
        RAISE EXINVALID_PARAMETER;
    EXCEPTION
        WHEN EXINVALID_PARAMETER THEN
            ERRORS.SETERROR(5971);  
            RAISE EX.CONTROLLED_ERROR;

        WHEN  EX.CONTROLLED_ERROR THEN
           RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
	END;

	FUNCTION FSBGET
    (
        ISBPARAMETER_ID IN GE_PARAMETER.PARAMETER_ID%TYPE,
        ISBVALIDATENULL IN VARCHAR2 DEFAULT CSBNO
    )
	RETURN VARCHAR2
	IS
        RCPARAMETER GE_PARAMETER%ROWTYPE;
	BEGIN
	    IF BLCACHE  THEN
            GETCACHERECORD(ISBPARAMETER_ID,RCPARAMETER);
	    ELSE
    		GETRECORD(ISBPARAMETER_ID,RCPARAMETER);
		END IF;
		IF(RCPARAMETER.DATA_TYPE='VARCHAR2') THEN
		
            IF ISBVALIDATENULL = CSBYES AND
               RCPARAMETER.VALUE IS NULL THEN
                
                ERRORS.SETERROR
                (
                    GCNUMENSPARAMNULO           ,
                    RCPARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;
            END IF;
			RETURN(RCPARAMETER.VALUE);
		END IF;
        RAISE EXINVALID_PARAMETER;

 EXCEPTION
        WHEN EXINVALID_PARAMETER THEN
            ERRORS.SETERROR(5971);  
            RAISE EX.CONTROLLED_ERROR;

        WHEN  EX.CONTROLLED_ERROR THEN
           RAISE;

		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
	END;

	FUNCTION FDTGET
    (
        ISBPARAMETER_ID IN GE_PARAMETER.PARAMETER_ID%TYPE,
        ISBVALIDATENULL IN VARCHAR2 DEFAULT CSBNO
    )
	RETURN DATE
	IS
        RCPARAMETER GE_PARAMETER%ROWTYPE;
	BEGIN
	    IF BLCACHE  THEN
            GETCACHERECORD(ISBPARAMETER_ID,RCPARAMETER);
	    ELSE
    		GETRECORD(ISBPARAMETER_ID,RCPARAMETER);
		END IF;
		IF(RCPARAMETER.DATA_TYPE='DATE') THEN
		
            IF ISBVALIDATENULL = CSBYES AND
               RCPARAMETER.VALUE IS NULL THEN
                
                ERRORS.SETERROR
                (
                    GCNUMENSPARAMNULO           ,
                    RCPARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
			RETURN(TO_DATE(RCPARAMETER.VALUE, UT_DATE.FSBDATE_FORMAT ));
		END IF;
        RAISE EXINVALID_PARAMETER;

    EXCEPTION
        WHEN EXINVALID_PARAMETER THEN
            ERRORS.SETERROR(5971);  
            RAISE EX.CONTROLLED_ERROR;

        WHEN  EX.CONTROLLED_ERROR THEN
           RAISE;

		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;
	END;

    PROCEDURE UPDATEPARAMETERVALUE(ISBPARAMETER_ID IN VARCHAR2, SBVALUE IN VARCHAR2) IS
    BEGIN
           DAGE_PARAMETER.UPDVALUE(ISBPARAMETER_ID,SBVALUE);
    EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
           RAISE;
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			RAISE EX.CONTROLLED_ERROR;

    END;

    PROCEDURE  VALANALISE_YES_OR_NOT( NEWVAL VARCHAR2)
    IS BEGIN
	   VALYESNO(NEWVAL);
    END VALANALISE_YES_OR_NOT;
    
    
    
    

    PROCEDURE LOADPARAMETERS
    (
        ISBMODULE_ID        IN                GE_PARAMETER.MODULE_ID%TYPE,
        OTBPARAMETER_ID     IN OUT NOCOPY     LDC_BOParameter.TYTBPARAMETER_ID,
        OTBDATA_TYPE        IN OUT NOCOPY     LDC_BOParameter.TYTBDATA_TYPE,
        OTBVALUE            IN OUT NOCOPY     LDC_BOParameter.TYTBVALUE
    )
    IS

        CURSOR CUGE_PARAMETER
        IS
        SELECT PARAMETER_ID, DATA_TYPE, VALUE
        FROM   GE_PARAMETER
        WHERE  MODULE_ID = ISBMODULE_ID;

        NUINDEX     NUMBER(4):=0;

    BEGIN

        FOR RGPARAMETER IN CUGE_PARAMETER LOOP
            NUINDEX := NUINDEX + 1;
            OTBPARAMETER_ID(NUINDEX) := RGPARAMETER.PARAMETER_ID;
            OTBDATA_TYPE(NUINDEX)    := RGPARAMETER.DATA_TYPE;
            OTBVALUE(NUINDEX)        := RGPARAMETER.VALUE;
        END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	    RAISE;
	WHEN OTHERS THEN
	    ERRORS.SETERROR;
	    RAISE EX.CONTROLLED_ERROR;

    END LOADPARAMETERS;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    FUNCTION GETALLPARAMETER RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFRESULT CONSTANTS.TYREFCURSOR;
    BEGIN
       
       OPEN ORFRESULT FOR SELECT PARAMETER_ID,
                                 DESCRIPTION,
                                 VALUE,
                                 VAL_FUNCTION,
                                 MODULE_ID,
                                 DATA_TYPE,
                                 ALLOW_UPDATE
                            FROM GE_PARAMETER;
       RETURN ORFRESULT;

     EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ORFRESULT%ISOPEN THEN
            CLOSE ORFRESULT;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ORFRESULT%ISOPEN THEN
            CLOSE ORFRESULT;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;

    END GETALLPARAMETER;
    
    




















    PROCEDURE GETSTRINGPARAMVALUE
    (
        ISBPARAMETERID      IN  GE_PARAMETER.PARAMETER_ID%TYPE,
        OSBPARAMETERVALUE   OUT GE_PARAMETER.VALUE%TYPE
    )
    IS
    BEGIN

        
        OSBPARAMETERVALUE := FSBGET(ISBPARAMETERID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	    RAISE;
	WHEN OTHERS THEN
	    ERRORS.SETERROR;
	    RAISE EX.CONTROLLED_ERROR;
    END;
    
    


























    FUNCTION FNUVALORNUMERICO
    (
        ISBCODIGO   IN  GE_PARAMETER.PARAMETER_ID%TYPE
    )
        RETURN NUMBER
    IS
    
        
        
        

        
        RCGE_PARAMETER  GE_PARAMETER%ROWTYPE;
        
        
        
        
        
        
























        
        FUNCTION FRCPARAMETRO
        (
            ISBCODIGO   IN  GE_PARAMETER.PARAMETER_ID%TYPE
        )
            RETURN GE_PARAMETER%ROWTYPE
        IS
        
            
            
            

            
            RCGE_PARAMETER  GE_PARAMETER%ROWTYPE;
        
        BEGIN

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fnuValorNumerico.frcParametro] INICIO',
                GCNUNIVELTRAZA
            );
            
            
            IF( BLCACHE ) THEN
                
                GETCACHERECORD
                (
                    ISBCODIGO,
                    RCGE_PARAMETER
                );
            ELSE
                
                GETRECORD
                (
                    ISBCODIGO,
                    RCGE_PARAMETER
                );
            END IF;
            
            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fnuValorNumerico.frcParametro] FIN',
                GCNUNIVELTRAZA
            );
            
            RETURN RCGE_PARAMETER;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FRCPARAMETRO;
        
        




















        PROCEDURE VALDATOSBASICOS
        (
            IRCGE_PARAMETER IN  GE_PARAMETER%ROWTYPE
        )
        IS
        BEGIN

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fnuValorNumerico.ValDatosBasicos] INICIO',
                GCNUNIVELTRAZA
            );
            
            
            IF( IRCGE_PARAMETER.DATA_TYPE <> GCSBTIPONUMERICO ) THEN
            
                
                ERRORS.SETERROR
                (
                    GCNUMENSTIPODATOPARAM                                           ,
                    IRCGE_PARAMETER.DATA_TYPE || '|' || IRCGE_PARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;
                
            END IF;
            
            
            IF( IRCGE_PARAMETER.VALUE IS NULL ) THEN
            
                
                ERRORS.SETERROR
                (
                    GCNUMENSPARAMNULO           ,
                    IRCGE_PARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;

            END IF;
            
            
            IF( NOT UT_CONVERT.IS_NUMBER( IRCGE_PARAMETER.VALUE ) ) THEN

                
                ERRORS.SETERROR
                (
                    GCNUMENSVALORNONUMERO       ,
                    IRCGE_PARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fnuValorNumerico.ValDatosBasicos] FIN',
                GCNUNIVELTRAZA
            );

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALDATOSBASICOS;
        
        





















        PROCEDURE EJECFUNCVALIDACION
        (
            IRCGE_PARAMETER IN  GE_PARAMETER%ROWTYPE
        )
        IS

            
            
            

            
            SBFUNCVALIDACION    VARCHAR2(2000);
        
        BEGIN

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fnuValorNumerico.EjecFuncValidacion] INICIO',
                GCNUNIVELTRAZA
            );

            
            IF( IRCGE_PARAMETER.VAL_FUNCTION IS NOT NULL ) THEN
                
                
                SBFUNCVALIDACION := TRIM( IRCGE_PARAMETER.VAL_FUNCTION ) || '(' || IRCGE_PARAMETER.VALUE || ');';
                
                UT_TRACE.TRACE
                (
                    '[sbFuncValidacion : ' || SBFUNCVALIDACION || ' ]',
                    GCNUNIVELTRAZA
                );
                
                
                PKGENERALSERVICES.EXECUTEDYNAMICPLSQL
                (
                    SBFUNCVALIDACION
                );

            END IF;

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fnuValorNumerico.EjecFuncValidacion] FIN',
                GCNUNIVELTRAZA
            );

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END EJECFUNCVALIDACION;

        
    
    
    BEGIN

        UT_TRACE.TRACE
        (
            '[LDC_BOParameter.fnuValorNumerico] INICIO',
            GCNUNIVELTRAZA
        );
        
        
        RCGE_PARAMETER :=   FRCPARAMETRO
                            (
                                ISBCODIGO
                            );

        
        VALDATOSBASICOS
        (
            RCGE_PARAMETER
        );
        
        
        EJECFUNCVALIDACION
        (
            RCGE_PARAMETER
        );

        UT_TRACE.TRACE
        (
            '[LDC_BOParameter.fnuValorNumerico] FIN',
            GCNUNIVELTRAZA
        );
        
        
        RETURN TO_NUMBER( RCGE_PARAMETER.VALUE );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUVALORNUMERICO;
    
    


























    FUNCTION FSBVALORALFANUMERICO
    (
        ISBCODIGO   IN  GE_PARAMETER.PARAMETER_ID%TYPE
    )
        RETURN VARCHAR2
    IS

        
        
        

        
        RCGE_PARAMETER  GE_PARAMETER%ROWTYPE;

        
        
        

        

























        FUNCTION FRCPARAMETRO
        (
            ISBCODIGO   IN  GE_PARAMETER.PARAMETER_ID%TYPE
        )
            RETURN GE_PARAMETER%ROWTYPE
        IS

            
            
            

            
            RCGE_PARAMETER  GE_PARAMETER%ROWTYPE;

        BEGIN

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fsbValorAlfanumerico.frcParametro] INICIO',
                GCNUNIVELTRAZA
            );

            
            IF( BLCACHE ) THEN
                
                GETCACHERECORD
                (
                    ISBCODIGO,
                    RCGE_PARAMETER
                );
            ELSE
                
                GETRECORD
                (
                    ISBCODIGO,
                    RCGE_PARAMETER
                );
            END IF;

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fsbValorAlfanumerico.frcParametro] FIN',
                GCNUNIVELTRAZA
            );

            RETURN RCGE_PARAMETER;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FRCPARAMETRO;

        




















        PROCEDURE VALDATOSBASICOS
        (
            IRCGE_PARAMETER IN  GE_PARAMETER%ROWTYPE
        )
        IS
        BEGIN

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fsbValorAlfanumerico.ValDatosBasicos] INICIO',
                GCNUNIVELTRAZA
            );

            
            IF( IRCGE_PARAMETER.DATA_TYPE <> GCSBTIPOALFANUMERICO ) THEN

                
                ERRORS.SETERROR
                (
                    GCNUMENSTIPODATOPARAM                                           ,
                    IRCGE_PARAMETER.DATA_TYPE || '|' || IRCGE_PARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            
            IF( IRCGE_PARAMETER.VALUE IS NULL ) THEN

                
                ERRORS.SETERROR
                (
                    GCNUMENSPARAMNULO           ,
                    IRCGE_PARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fsbValorAlfanumerico.ValDatosBasicos] FIN',
                GCNUNIVELTRAZA
            );

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALDATOSBASICOS;

        





















        PROCEDURE EJECFUNCVALIDACION
        (
            IRCGE_PARAMETER IN  GE_PARAMETER%ROWTYPE
        )
        IS

            
            
            

            
            SBFUNCVALIDACION    VARCHAR2(2000);

        BEGIN

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fsbValorAlfanumerico.EjecFuncValidacion] INICIO',
                GCNUNIVELTRAZA
            );

            
            IF( IRCGE_PARAMETER.VAL_FUNCTION IS NOT NULL ) THEN

                
                SBFUNCVALIDACION := TRIM( IRCGE_PARAMETER.VAL_FUNCTION ) || '(''' || IRCGE_PARAMETER.VALUE || ''');';

                UT_TRACE.TRACE
                (
                    '[sbFuncValidacion : ' || SBFUNCVALIDACION || ' ]',
                    GCNUNIVELTRAZA
                );

                
                PKGENERALSERVICES.EXECUTEDYNAMICPLSQL
                (
                    SBFUNCVALIDACION
                );

            END IF;

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fsbValorAlfanumerico.EjecFuncValidacion] FIN',
                GCNUNIVELTRAZA
            );

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END EJECFUNCVALIDACION;

        


    BEGIN

        UT_TRACE.TRACE
        (
            '[LDC_BOParameter.fsbValorAlfanumerico] INICIO',
            GCNUNIVELTRAZA
        );

        
        RCGE_PARAMETER :=   FRCPARAMETRO
                            (
                                ISBCODIGO
                            );

        
        VALDATOSBASICOS
        (
            RCGE_PARAMETER
        );

        
        EJECFUNCVALIDACION
        (
            RCGE_PARAMETER
        );

        UT_TRACE.TRACE
        (
            '[LDC_BOParameter.fsbValorAlfanumerico] FIN',
            GCNUNIVELTRAZA
        );

        
        RETURN RCGE_PARAMETER.VALUE;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBVALORALFANUMERICO;

    


























    FUNCTION FDTVALORFECHA
    (
        ISBCODIGO   IN  GE_PARAMETER.PARAMETER_ID%TYPE
    )
        RETURN DATE
    IS

        
        
        

        
        RCGE_PARAMETER  GE_PARAMETER%ROWTYPE;

        
        
        

        

























        FUNCTION FRCPARAMETRO
        (
            ISBCODIGO   IN  GE_PARAMETER.PARAMETER_ID%TYPE
        )
            RETURN GE_PARAMETER%ROWTYPE
        IS

            
            
            

            
            RCGE_PARAMETER  GE_PARAMETER%ROWTYPE;

        BEGIN

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fdtValorFecha.frcParametro] INICIO',
                GCNUNIVELTRAZA
            );

            
            IF( BLCACHE ) THEN
                
                GETCACHERECORD
                (
                    ISBCODIGO,
                    RCGE_PARAMETER
                );
            ELSE
                
                GETRECORD
                (
                    ISBCODIGO,
                    RCGE_PARAMETER
                );
            END IF;

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fdtValorFecha.frcParametro] FIN',
                GCNUNIVELTRAZA
            );

            RETURN RCGE_PARAMETER;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FRCPARAMETRO;

        




















        PROCEDURE VALDATOSBASICOS
        (
            IRCGE_PARAMETER IN  GE_PARAMETER%ROWTYPE
        )
        IS
        BEGIN

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fdtValorFecha.ValDatosBasicos] INICIO',
                GCNUNIVELTRAZA
            );

            
            IF( IRCGE_PARAMETER.DATA_TYPE <> GCSBTIPOFECHA ) THEN

                
                ERRORS.SETERROR
                (
                    GCNUMENSTIPODATOPARAM                                           ,
                    IRCGE_PARAMETER.DATA_TYPE || '|' || IRCGE_PARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            
            IF( IRCGE_PARAMETER.VALUE IS NULL ) THEN

                
                ERRORS.SETERROR
                (
                    GCNUMENSPARAMNULO           ,
                    IRCGE_PARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            
            IF( NOT UT_CONVERT.IS_DATE( IRCGE_PARAMETER.VALUE, UT_DATE.FSBDATE_FORMAT ) ) THEN

                
                ERRORS.SETERROR
                (
                    GCNUMENSVALORNOFECHA        ,
                    IRCGE_PARAMETER.PARAMETER_ID
                );

                
                RAISE EX.CONTROLLED_ERROR;

            END IF;

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fdtValorFecha.ValDatosBasicos] FIN',
                GCNUNIVELTRAZA
            );

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALDATOSBASICOS;

        





















        PROCEDURE EJECFUNCVALIDACION
        (
            IRCGE_PARAMETER IN  GE_PARAMETER%ROWTYPE
        )
        IS

            
            
            

            
            SBFUNCVALIDACION    VARCHAR2(2000);

        BEGIN

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fdtValorFecha.EjecFuncValidacion] INICIO',
                GCNUNIVELTRAZA
            );

            
            IF( IRCGE_PARAMETER.VAL_FUNCTION IS NOT NULL ) THEN

                
                SBFUNCVALIDACION := TRIM( IRCGE_PARAMETER.VAL_FUNCTION ) || '( to_date( ''' || IRCGE_PARAMETER.VALUE || ''', UT_Date.fsbDate_Format ) );';

                UT_TRACE.TRACE
                (
                    '[sbFuncValidacion : ' || SBFUNCVALIDACION || ' ]',
                    GCNUNIVELTRAZA
                );

                
                PKGENERALSERVICES.EXECUTEDYNAMICPLSQL
                (
                    SBFUNCVALIDACION
                );

            END IF;

            UT_TRACE.TRACE
            (
                '[LDC_BOParameter.fdtValorFecha.EjecFuncValidacion] FIN',
                GCNUNIVELTRAZA
            );

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END EJECFUNCVALIDACION;

        


    BEGIN

        UT_TRACE.TRACE
        (
            '[LDC_BOParameter.fdtValorFecha] INICIO',
            GCNUNIVELTRAZA
        );

        
        RCGE_PARAMETER :=   FRCPARAMETRO
                            (
                                ISBCODIGO
                            );

        
        VALDATOSBASICOS
        (
            RCGE_PARAMETER
        );

        
        EJECFUNCVALIDACION
        (
            RCGE_PARAMETER
        );

        UT_TRACE.TRACE
        (
            '[LDC_BOParameter.fdtValorFecha] FIN',
            GCNUNIVELTRAZA
        );

        
        RETURN TO_DATE( RCGE_PARAMETER.VALUE, UT_DATE.FSBDATE_FORMAT );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FDTVALORFECHA;
    
    
















    PROCEDURE VALPERCENTAGELESS100
    (
    	INUPORCENTAJE	IN	NUMBER
    )
    IS
        CNUBAD_PERCENTAGE	CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 8231; 
        CNUMAXPERC		    CONSTANT NUMBER := 100.00;	 
        CNUMINPERC		    CONSTANT NUMBER := 0.00;	 
    BEGIN
        UT_TRACE.TRACE('LDC_BOParameter.ValPercentageLess100');

        
        IF ( INUPORCENTAJE IS NULL ) THEN
        	RETURN;
        END IF;

        
        IF ( INUPORCENTAJE >= CNUMAXPERC OR INUPORCENTAJE < CNUMINPERC ) THEN
            ERRORS.SETERROR(CNUBAD_PERCENTAGE);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPERCENTAGELESS100;
    
    
    















    PROCEDURE VALISPOSITIVE
    (
        INUVALUE        IN      NUMBER
    )
    IS
    
        
        CNUNEGATIVE_VALUE_ERR   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 901675;
    
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [LDC_BOParameter.ValIsPositive]', 5 );

        

        IF ( INUVALUE IS NOT NULL AND INUVALUE < 0 ) THEN
        
            
            GE_BOERRORS.SETERRORCODE( CNUNEGATIVE_VALUE_ERR );
        
        END IF;

        UT_TRACE.TRACE( 'Fin: [LDC_BOParameter.ValIsPositive]', 5 );

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    
    END VALISPOSITIVE;
    
    
















    PROCEDURE VALPARAMLISTCOST
    (
        SBNEWVALUE VARCHAR2
    )
    IS
    BEGIN
    
        IF (SBNEWVALUE != CT_BOCONSTANTS.CSBASSIGNED_DATE AND
            SBNEWVALUE != CT_BOCONSTANTS.CSBLEGALIZATION_DATE  AND
            SBNEWVALUE != CT_BOCONSTANTS.CSBEXECUTION_DATE  ) THEN
            ERRORS.SETERROR(CNUINVALIDVALUEYESORNOT);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALPARAMLISTCOST;

BEGIN
    BLCACHE:=TRUE;

END LDC_BOParameter;