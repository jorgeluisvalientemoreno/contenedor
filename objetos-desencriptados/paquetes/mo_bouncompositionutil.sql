
CREATE OR REPLACE PACKAGE BODY MO_BOUNCOMPOSITIONUTIL IS
   CSBVERSION CONSTANT VARCHAR2( 10 ) := 'SAO233885';
   CSBYES CONSTANT VARCHAR2( 1 ) := 'Y';
   CSBINIT_REGISTER_DATE GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE := 'INIT_REGISTER_DATE';
   TYPE TYRCINSTANCEEQUIVALENCE IS RECORD
    (
      SBWORKFATHER GE_BOINSTANCECONTROL.STYSBNAME,
      SBWORKINSTANCE GE_BOINSTANCECONTROL.STYSBNAME,
      SBDATAINSTANCE GE_BOINSTANCECONTROL.STYSBNAME,
      SBTAGNAME GE_BOINSTANCECONTROL.STYSBNAME,
      NUOBJECTTYPE VARCHAR2( 1 ),
      NUOBJECTID NUMBER( 10 ),
      NUELEMENTCATEGORY NUMBER( 4 )
    );
   TYPE TYTBINSTANCEEQUIVALENCE IS TABLE OF TYRCINSTANCEEQUIVALENCE INDEX BY BINARY_INTEGER;
   TYPE TYTBINSTANCE IS TABLE OF GE_BOINSTANCECONTROL.STYSBNAME INDEX BY BINARY_INTEGER;
   BLDELETEDATAINSTANCE BOOLEAN;
   TBMIRRORINSTANCE TYTBMIRRORINSTANCE;
   TBMIRRORATTRIBUTE TYTBMIRRORATTRIBUTE;
   NUUNCOMPATTRIBUTEMAP GE_ENTITY_MAP.ENTITY_MAP_TYPE_ID%TYPE;
   NUCOMPONENTNUMBER MO_COMPONENT.COMPONENT_NUMBER%TYPE;
   NUINSTANCESEQUENCE NUMBER( 6 );
   RCEXECUTORLOGCONTROL TYRCEXECUTORLOGCONTROL;
   TBROLLBACKMIRRORINSTANCE TYTBMIRRORINSTANCE;
   TBROLLBACKMIRRORATTRIBUTE TYTBMIRRORATTRIBUTE;
   NUROLLBACKINSTANCESEQUENCE NUMBER( 6 );
   GNUDEF_COMPANY_ID NUMBER := GE_BOPARAMETER.FNUGET( 'DEFAULT_COMPANY' );
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADMOTCOMPBYPRODCOMP( ISBFATHERINSTANCE IN VARCHAR2, IOSBNODEINSTANCE IN OUT VARCHAR2, INUPRODUCTMOTIVEID IN NUMBER, INUCOMPONENTID IN NUMBER, IBLCREATEINSTANCE IN BOOLEAN := TRUE, IBLLOADADDRESS IN BOOLEAN := TRUE, IDTPRODUCTRETIREDATE IN DATE := NULL )
    IS
      NUFATHERCOMPID MO_COMPONENT.COMPONENT_ID%TYPE;
      NUFATHERCOMPTYPEID MO_COMPONENT.COMPONENT_TYPE_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.LoadMotCompByProdComp INICIO [' || ISBFATHERINSTANCE || '][' || INUCOMPONENTID || ']', 6 );
      PR_BCPRODUCT.FATHERPRODUCTCOMPONENT( INUCOMPONENTID, NUFATHERCOMPID, NUFATHERCOMPTYPEID );
      LOADCOMPPRCOMPINFATY( INUCOMPONENTID, NUFATHERCOMPTYPEID, INUPRODUCTMOTIVEID, ISBFATHERINSTANCE, IOSBNODEINSTANCE, IBLCREATEINSTANCE, IBLLOADADDRESS, IDTPRODUCTRETIREDATE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADCOMPPRCOMPINFATY( INUCOMPONENTID IN NUMBER, INUFATHERCOMPTYPEID IN NUMBER, INUPRODUCTMOTIVEID IN NUMBER, ISBFATHERINSTANCE IN VARCHAR2, IOSBNODEINSTANCE IN OUT VARCHAR2, IBLCREATEINSTANCE IN BOOLEAN := TRUE, IBLLOADADDRESS IN BOOLEAN := TRUE, IDTPRODUCTRETIREDATE IN DATE := NULL )
    IS
      SBCURRENTINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      SBCURRENTGROUP GE_BOINSTANCECONTROL.STYSBNAME;
      SBCURRENTENTITY GE_BOINSTANCECONTROL.STYSBNAME;
      SBCURRENTATTRIBUTE GE_BOINSTANCECONTROL.STYSBNAME;
      SBDATAINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      SBCOMPONENTTYPEID GE_BOINSTANCECONTROL.STYSBVALUE;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      TBENTITY TYTBENTITY;
      NUPRODMOTIVECOMPID PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE;
      NUELEMENTCATEGORYID PS_PROD_MOTIVE_COMP.ELEMENT_CATEGORY_ID%TYPE;
      SBTAGNAME PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
      SBACTIVE PS_PROD_MOTIVE_COMP.ACTIVE%TYPE;
      NUCOMPONENTTYPEID MO_COMPONENT.COMPONENT_TYPE_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.LoadCompPrCompInFaTy [' || ISBFATHERINSTANCE || '] Comp [' || INUCOMPONENTID || '] FathType [' || INUFATHERCOMPTYPEID || ']', 12 );
      IF NOT FBLVALIDATERETIREDATE( IDTPRODUCTRETIREDATE, INUCOMPONENTID ) THEN
         RETURN;
      END IF;
      GE_BOINSTANCECONTROL.GETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
      GETINSTANCENAME( MO_BOUNCOMPOSITIONCONSTANTS.CSBDATA_INSTANCE || '_PRODUCT_COMPONENT_' || TO_CHAR( INUCOMPONENTID ), SBDATAINSTANCE );
      GE_BOINSTANCECONTROL.CREATEINSTANCE( SBDATAINSTANCE, NULL );
      INSTANCEPRODUCTCOMPONENT( SBDATAINSTANCE, INUCOMPONENTID );
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( SBDATAINSTANCE, NULL, 'PR_COMPONENT', 'COMPONENT_TYPE_ID', SBCOMPONENTTYPEID );
      NUCOMPONENTTYPEID := TO_NUMBER( SBCOMPONENTTYPEID );
      IF NOT FBLCONFIGURATIONCOMPONENTDATA( INUPRODUCTMOTIVEID, INUFATHERCOMPTYPEID, NUCOMPONENTTYPEID, NUPRODMOTIVECOMPID, NUELEMENTCATEGORYID, SBTAGNAME, SBACTIVE ) THEN
         GE_BOINSTANCECONTROL.SETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
         RETURN;
      END IF;
      IF SBACTIVE != GE_BOCONSTANTS.CSBYES THEN
         GE_BOINSTANCECONTROL.SETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
         RETURN;
      END IF;
      IF NOT FBLLOADMOTIVECOMPONENTENTITY( NUPRODMOTIVECOMPID, TBENTITY ) THEN
         GE_BOINSTANCECONTROL.SETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
         RETURN;
      END IF;
      IF IBLCREATEINSTANCE THEN
         GETINSTANCENAME( SBTAGNAME, IOSBNODEINSTANCE );
         CREATEINSTANCE( ISBFATHERINSTANCE, IOSBNODEINSTANCE, MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT, NUPRODMOTIVECOMPID, NUELEMENTCATEGORYID, GE_BOCONSTANTS.INSERT_ );
       ELSE
         IOSBNODEINSTANCE := ISBFATHERINSTANCE;
      END IF;
      GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( SBDATAINSTANCE, NUENTITY );
      WHILE NUENTITY IS NOT NULL
       LOOP
         LOOP
            GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
            IF RCENTITY.SBENTITY = 'PR_PREMISE_COMP' THEN
               EXIT;
            END IF;
            IF NOT IBLLOADADDRESS THEN
               IF RCENTITY.SBENTITY = 'PR_COMPONENT_ADDRESS' THEN
                  EXIT;
               END IF;
            END IF;
            EQUIVALENCEENTITY( IOSBNODEINSTANCE, SBDATAINSTANCE, RCENTITY, TBENTITY );
            EXIT;
         END LOOP;
         GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
      END LOOP;
      GE_BOINSTANCECONTROL.DESTROYINSTANCE( SBDATAINSTANCE );
      GE_BOINSTANCECONTROL.SETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADPRODCOMPCHILDS( ISBFATHERINSTANCE IN GE_BOINSTANCECONTROL.STYSBNAME, INUPRODUCTMOTIVEID IN PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE, INUCOMPONENTID IN PR_COMPONENT.COMPONENT_ID%TYPE, IBLLOADADDRESS IN BOOLEAN, IBLLOADALLCOMPONENT IN BOOLEAN, IDTPRODUCTRETIREDATE IN DATE := NULL )
    IS
      CURFGETCHILDDIRECTCOMPONENT CONSTANTS.TYREFCURSOR;
      RCCOMPONENT DAPR_COMPONENT.STYPR_COMPONENT;
      SBCOMPONENTINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.LoadProdCompChilds [' || ISBFATHERINSTANCE || '][' || INUPRODUCTMOTIVEID || '][' || INUCOMPONENTID || ']', 3 );
      CURFGETCHILDDIRECTCOMPONENT := PR_BCCOMPONENT.FRFGETCHILDDIRECTCOMPONENT( INUCOMPONENTID, IBLLOADALLCOMPONENT );
      FETCH CURFGETCHILDDIRECTCOMPONENT
         INTO RCCOMPONENT;
      WHILE CURFGETCHILDDIRECTCOMPONENT%FOUND
       LOOP
         LOADMOTCOMPBYPRODCOMP( ISBFATHERINSTANCE, SBCOMPONENTINSTANCE, INUPRODUCTMOTIVEID, RCCOMPONENT.COMPONENT_ID, TRUE, IBLLOADADDRESS, IDTPRODUCTRETIREDATE );
         LOADPRODCOMPCHILDS( SBCOMPONENTINSTANCE, INUPRODUCTMOTIVEID, RCCOMPONENT.COMPONENT_ID, IBLLOADADDRESS, IBLLOADALLCOMPONENT, IDTPRODUCTRETIREDATE );
         FETCH CURFGETCHILDDIRECTCOMPONENT
            INTO RCCOMPONENT;
      END LOOP;
      CLOSE CURFGETCHILDDIRECTCOMPONENT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFGETCHILDDIRECTCOMPONENT );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFGETCHILDDIRECTCOMPONENT );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETMOTIVEINSTANCE( ISBINSTANCE IN VARCHAR2, IOSBFATHER IN OUT VARCHAR2 )
    IS
      NUATTRIBUTE GE_BOINSTANCECONTROL.STYNUINDEX;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.fblGetMotiveInstance INICIO [' || ISBINSTANCE || ']', 2 );
      GE_BOINSTANCECONTROL.GETFATHERINSTANCE( ISBINSTANCE, IOSBFATHER );
      WHILE IOSBFATHER IS NOT NULL
       LOOP
         IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( IOSBFATHER, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, NUATTRIBUTE ) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( IOSBFATHER, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
            IF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT THEN
               RETURN;
            END IF;
         END IF;
         GE_BOINSTANCECONTROL.GETFATHERINSTANCE( IOSBFATHER, SBINSTANCE );
         IOSBFATHER := SBINSTANCE;
      END LOOP;
      ERRORS.SETERROR( MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_NOT_MOTIVE_FATHER, ISBINSTANCE );
      RAISE EX.CONTROLLED_ERROR;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETDELETEDATAINSTANCE( IBLDELETEDATAINSTANCE IN BOOLEAN )
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.SetDeleteDataInstance INICIO', 2 );
      BLDELETEDATAINSTANCE := IBLDELETEDATAINSTANCE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLDELETEDATAINSTANCE
    RETURN BOOLEAN
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.fblDeleteDataInstance OK', 2 );
      RETURN ( BLDELETEDATAINSTANCE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INITMIRRORATTRIBUTE
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.InitMirrorAttribute INICIO', 2 );
      TBMIRRORINSTANCE.DELETE;
      TBMIRRORATTRIBUTE.DELETE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INIT
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.Init INICIO', 2 );
      INITMIRRORATTRIBUTE;
      NUINSTANCESEQUENCE := 1;
      RCEXECUTORLOGCONTROL := NULL;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE MULTILOADENTITY( ISBINSTANCE IN VARCHAR2, ISBENTITY IN VARCHAR2, ISBWHEREATTRIBUTE IN VARCHAR2, ISBWHEREVALUE IN VARCHAR2, ISBGROUPATTRIBUTE IN VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.MultiLoadEntity INICIO [' || ISBINSTANCE || '][' || ISBENTITY || '][' || ISBWHEREATTRIBUTE || '][' || ISBWHEREVALUE || '][' || ISBGROUPATTRIBUTE || ']', 2 );
      GE_BOINSTANCECONTROL.INITMULTISELECT( ISBINSTANCE, ISBENTITY );
      GE_BOINSTANCECONTROL.SETMULTISELECTATTRIBUTE( GE_BOINSTANCECONSTANTS.CNUWHERE_ATTRIBUTE, ISBWHEREATTRIBUTE, ISBWHEREVALUE );
      IF ISBGROUPATTRIBUTE IS NOT NULL THEN
         GE_BOINSTANCECONTROL.SETMULTISELECTATTRIBUTE( GE_BOINSTANCECONSTANTS.CNUGROUP_ATTRIBUTE, ISBGROUPATTRIBUTE );
      END IF;
      GE_BOINSTANCECONTROL.EXECUTEMULTISELECT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLVALIDATERETIREDATE( IDTPRODUCTRETIREDATE IN DATE, INUPRODUCTCOMPONENTID IN NUMBER )
    RETURN BOOLEAN
    IS
      DTCOMPONENTRETIREDATE DATE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.fblValidateRetireDate INICIO [' || IDTPRODUCTRETIREDATE || '][' || INUPRODUCTCOMPONENTID || ']', 10 );
      IF IDTPRODUCTRETIREDATE IS NULL THEN
         RETURN TRUE;
      END IF;
      DTCOMPONENTRETIREDATE := PR_BCPRODUCT.FDTLASTCOMPONENTRETIRE( INUPRODUCTCOMPONENTID );
      IF DTCOMPONENTRETIREDATE IS NULL THEN
         RETURN FALSE;
      END IF;
      IF TRUNC( DTCOMPONENTRETIREDATE ) != TRUNC( IDTPRODUCTRETIREDATE ) THEN
         RETURN FALSE;
      END IF;
      RETURN TRUE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSTANCEPRODUCTCOMPONENT( ISBINSTANCE IN VARCHAR2, INUCOMPONENTID IN NUMBER )
    IS
      NUERROR NUMBER( 10 );
      SBERROR VARCHAR2( 1000 );
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.InstanceProductComponent INICIO [' || ISBINSTANCE || '][' || INUCOMPONENTID || ']', 10 );
      PR_BSCOMPONENT.INSTANCEDATA( INUCOMPONENTID, ISBINSTANCE, NUERROR, SBERROR );
      ERRORS.CHECKERROR( NUERROR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLGETENTITY( INUOBJECTTYPE IN NUMBER, INUOBJECTID IN NUMBER, IOTBENTITY IN OUT NOCOPY TYTBENTITY )
    RETURN BOOLEAN
    IS
      RCENTITY MO_BOCONFIGURATIONCACHE.STYENTITY;
      RCINSTANCE MO_BOCONFIGURATIONCACHE.STYINSTANCE;
      SBINDEXENTITY GE_BOINSTANCECONTROL.STYSBINDEX;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.fblGetEntity INICIO [' || INUOBJECTTYPE || '][' || INUOBJECTID || ']', 15 );
      IOTBENTITY.DELETE;
      MO_BOCONFIGURATIONCACHE.GETINSTANCERECORD( INUOBJECTTYPE, INUOBJECTID, RCINSTANCE );
      SBINDEXENTITY := TO_CHAR( RCINSTANCE.FIRST_ENTITY );
      WHILE SBINDEXENTITY IS NOT NULL
       LOOP
         MO_BOCONFIGURATIONCACHE.GETENTITYRECORD( SBINDEXENTITY, RCENTITY );
         IOTBENTITY( RCENTITY.ENTITY ) := RCENTITY.ENTITY;
         SBINDEXENTITY := TO_CHAR( RCENTITY.NEXT_ );
      END LOOP;
      IF IOTBENTITY.COUNT = 0 THEN
         RETURN FALSE;
      END IF;
      RETURN TRUE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADPRODUCTCOMPONENT( ISBFATHERINSTANCE IN VARCHAR2, IOSBNODEINSTANCE IN OUT VARCHAR2, INUPRODUCTMOTIVE IN NUMBER, INUCOMPONENTID IN NUMBER, IBLCREATEINSTANCE IN BOOLEAN, IBLLOADADDRESS IN BOOLEAN := TRUE, IDTPRODUCTRETIREDATE IN DATE := NULL )
    IS
      SBCURRENTINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      SBCURRENTGROUP GE_BOINSTANCECONTROL.STYSBNAME;
      SBCURRENTENTITY GE_BOINSTANCECONTROL.STYSBNAME;
      SBCURRENTATTRIBUTE GE_BOINSTANCECONTROL.STYSBNAME;
      SBDATAINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      SBCOMPONENTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      NUPRODMOTIVECOMPID PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE;
      NUELEMENTCATEGORY PS_PROD_MOTIVE_COMP.ELEMENT_CATEGORY_ID%TYPE;
      SBTAGNAME PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
      SBACTIVE PS_PROD_MOTIVE_COMP.ACTIVE%TYPE;
      NUFATHERID MO_COMPONENT.COMPONENT_ID%TYPE;
      NUFATHERTYPE MO_COMPONENT.COMPONENT_TYPE_ID%TYPE;
      NUCOMPONENTTYPE MO_COMPONENT.COMPONENT_TYPE_ID%TYPE;
      TBENTITY TYTBENTITY;
      NUCOMPONENTNUMBER NUMBER( 4 );
      NUERROR NUMBER( 10 );
      SBERROR VARCHAR2( 1000 );
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.LoadProductComponent INICIO [' || INUCOMPONENTID || ']', 2 );
      IF NOT FBLVALIDATERETIREDATE( IDTPRODUCTRETIREDATE, INUCOMPONENTID ) THEN
         RETURN;
      END IF;
      GE_BOINSTANCECONTROL.GETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
      GETINSTANCENAME( MO_BOUNCOMPOSITIONCONSTANTS.CSBDATA_INSTANCE || '_PRODUCT_COMPONENT_' || TO_CHAR( INUCOMPONENTID ), SBDATAINSTANCE );
      GE_BOINSTANCECONTROL.CREATEINSTANCE( SBDATAINSTANCE, NULL );
      INSTANCEPRODUCTCOMPONENT( SBDATAINSTANCE, INUCOMPONENTID );
      PR_BCPRODUCT.FATHERPRODUCTCOMPONENT( INUCOMPONENTID, NUFATHERID, NUFATHERTYPE );
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( SBDATAINSTANCE, NULL, 'PR_COMPONENT', 'COMPONENT_TYPE_ID', SBCOMPONENTTYPE );
      NUCOMPONENTTYPE := TO_NUMBER( SBCOMPONENTTYPE );
      IF NOT MO_BOCONFIGURATIONCACHE.FBLCONFIGURATIONCOMPONENTDATA( INUPRODUCTMOTIVE, NUFATHERTYPE, NUCOMPONENTTYPE, NUPRODMOTIVECOMPID, NUELEMENTCATEGORY, SBTAGNAME, SBACTIVE ) THEN
         GE_BOINSTANCECONTROL.SETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
         RETURN;
      END IF;
      IF SBACTIVE != GE_BOCONSTANTS.CSBYES THEN
         GE_BOINSTANCECONTROL.SETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
         RETURN;
      END IF;
      IF NOT FBLGETENTITY( MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT, NUPRODMOTIVECOMPID, TBENTITY ) THEN
         GE_BOINSTANCECONTROL.SETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
         RETURN;
      END IF;
      IF IBLCREATEINSTANCE THEN
         GETINSTANCENAME( SBTAGNAME, IOSBNODEINSTANCE );
         CREATEINSTANCE( ISBFATHERINSTANCE, IOSBNODEINSTANCE, MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT, NUPRODMOTIVECOMPID, NUELEMENTCATEGORY, GE_BOCONSTANTS.INSERT_ );
       ELSE
         IOSBNODEINSTANCE := ISBFATHERINSTANCE;
      END IF;
      GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( SBDATAINSTANCE, NUENTITY );
      WHILE NUENTITY IS NOT NULL
       LOOP
         LOOP
            GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
            IF RCENTITY.SBENTITY = 'PR_PREMISE_COMP' THEN
               EXIT;
            END IF;
            IF NOT IBLLOADADDRESS THEN
               IF RCENTITY.SBENTITY = 'PR_COMPONENT_ADDRESS' THEN
                  EXIT;
               END IF;
            END IF;
            EQUIVALENCEENTITY( IOSBNODEINSTANCE, SBDATAINSTANCE, RCENTITY, TBENTITY );
            EXIT;
         END LOOP;
         GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
      END LOOP;
      GE_BOINSTANCECONTROL.DESTROYINSTANCE( SBDATAINSTANCE );
      GE_BOINSTANCECONTROL.SETCURRENTDATA( SBCURRENTINSTANCE, SBCURRENTGROUP, SBCURRENTENTITY, SBCURRENTATTRIBUTE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADPRODUCTCOMPONENT( ISBFATHERINSTANCE IN GE_BOINSTANCECONTROL.STYSBNAME, IOSBNODEINSTANCE IN OUT GE_BOINSTANCECONTROL.STYSBNAME, INUPRODUCTMOTIVE IN NUMBER, INUCOMPONENTID IN NUMBER, IBLCREATEINSTANCE IN BOOLEAN, IBLCHILDLOAD IN BOOLEAN, IBLLOADALLCOMPONENT IN BOOLEAN, IBLLOADADDRESS IN BOOLEAN, IDTPRODUCTRETIREDATE IN DATE )
    IS
      SBINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      NUCOMPONENTID MO_COMPONENT.COMPONENT_ID%TYPE;
      CHSTATUS PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT%TYPE;
      RFCURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.LoadProductComponent [' || ISBFATHERINSTANCE || '][' || IOSBNODEINSTANCE || '][' || INUPRODUCTMOTIVE || '][' || INUCOMPONENTID || ']', 2 );
      IF NOT FBLVALIDATERETIREDATE( IDTPRODUCTRETIREDATE, INUCOMPONENTID ) THEN
         RETURN;
      END IF;
      IF IBLLOADALLCOMPONENT THEN
         CHSTATUS := NULL;
       ELSE
         CHSTATUS := GE_BOCONSTANTS.CSBYES;
      END IF;
      LOADPRODUCTCOMPONENT( ISBFATHERINSTANCE, IOSBNODEINSTANCE, INUPRODUCTMOTIVE, INUCOMPONENTID, IBLCREATEINSTANCE, IBLLOADADDRESS, IDTPRODUCTRETIREDATE );
      IF IBLCHILDLOAD THEN
         RFCURSOR := PR_BCPRODUCT.GETCHILDCOMPONENTS( INUCOMPONENTID, GE_BOCONSTANTS.CSBNO, CHSTATUS );
         LOOP
            FETCH RFCURSOR
               INTO NUCOMPONENTID;
            EXIT WHEN RFCURSOR%NOTFOUND;
            LOADPRODUCTCOMPONENT( IOSBNODEINSTANCE, SBINSTANCE, INUPRODUCTMOTIVE, NUCOMPONENTID, TRUE, IBLLOADADDRESS, IDTPRODUCTRETIREDATE );
         END LOOP;
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( RFCURSOR );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( RFCURSOR );
         RAISE;
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( RFCURSOR );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ADDCONFIGURATIONATTRIBUTE( ISBINSTANCE IN VARCHAR2, ISBGROUP IN VARCHAR2, ISBENTITY IN VARCHAR2, IRCATTRIBUTE IN MO_BOCONFIGURATIONCACHE.STYATTRIBUTE )
    IS
      NUATTRIBUTE GE_BOINSTANCECONTROL.STYNUINDEX;
      RCATTRIBUTE GE_BOINSTANCECONTROL.TYRCATTRIBUTESTACK;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.AddConfigurationAttribute INICIO [' || ISBINSTANCE || '][' || ISBGROUP || '][' || ISBENTITY || '][' || IRCATTRIBUTE.ATTRIBUTE_NAME || ']', 2 );
      IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( ISBINSTANCE, ISBGROUP, ISBENTITY, IRCATTRIBUTE.ATTRIBUTE_NAME, NUATTRIBUTE ) THEN
         GE_BOINSTANCECONTROL.GETATTRIBUTE( NUATTRIBUTE, RCATTRIBUTE );
         IF RCATTRIBUTE.NUPROCESSEXPRESSION IS NULL THEN
            GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS( ISBINSTANCE, ISBGROUP, ISBENTITY, IRCATTRIBUTE.ATTRIBUTE_NAME, IRCATTRIBUTE.VALIDATE_EXPRESSION, GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION );
         END IF;
       ELSE
         GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, ISBGROUP, ISBENTITY, IRCATTRIBUTE.ATTRIBUTE_NAME, NULL );
         GE_BOINSTANCECONTROL.SETCURRENTDATA( ISBINSTANCE, ISBGROUP, ISBENTITY, IRCATTRIBUTE.ATTRIBUTE_NAME );
         IF IRCATTRIBUTE.INITIALIZE_EXPRESSION IS NOT NULL THEN
            GE_BOINSTANCECONTROL.EXECUTEEXPRESSION( IRCATTRIBUTE.INITIALIZE_EXPRESSION );
         END IF;
         GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS( ISBINSTANCE, ISBGROUP, ISBENTITY, IRCATTRIBUTE.ATTRIBUTE_NAME, IRCATTRIBUTE.VALIDATE_EXPRESSION, GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION );
      END IF;
      ADDMIRRORATTRIBUTE( ISBINSTANCE, ISBGROUP, ISBENTITY, IRCATTRIBUTE.ATTRIBUTE_NAME, IRCATTRIBUTE.MIRROR_ENTITY_NAME, IRCATTRIBUTE.MIRROR_ATTRIBUTE_NAME, MO_BOUNCOMPOSITIONCONSTANTS.CNUNORMAL_MIRROR );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADINSTANCEATTRIBUTES( ISBINSTANCE IN VARCHAR2, INUOBJECTTYPE IN NUMBER, INUOBJECTID IN NUMBER )
    IS
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      RCCONFIGURATIONATTRIBUTE MO_BOCONFIGURATIONCACHE.STYATTRIBUTE;
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      SBCONFIGURATIONENTITY GE_BOINSTANCECONTROL.STYSBINDEX;
      SBCONFIGURATIONATTRIBUTE GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.LoadInstanceAttributes INICIO [' || ISBINSTANCE || '][' || INUOBJECTTYPE || '][' || INUOBJECTID || ']', 2 );
      IF INUOBJECTTYPE NOT IN ( MO_BOCONFIGURATIONCONTROL.FNUGETPACKAGEOBJECT, MO_BOCONFIGURATIONCONTROL.FNUGETMOTIVEOBJECT, MO_BOCONFIGURATIONCONTROL.FNUGETCOMPONENTOBJECT ) THEN
         RETURN;
      END IF;
      GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( ISBINSTANCE, NUENTITY );
      WHILE NUENTITY IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
         UT_TRACE.TRACE( 'rcEntity.sbEntity ' || RCENTITY.SBENTITY, 10 );
         IF MO_BOCONFIGURATIONCACHE.FBLEXISTENTITY( INUOBJECTTYPE, INUOBJECTID, RCENTITY.SBENTITY, SBCONFIGURATIONENTITY ) THEN
            MO_BOCONFIGURATIONCACHE.GETFIRSTENTITYATTRIBUTE( SBCONFIGURATIONENTITY, SBCONFIGURATIONATTRIBUTE );
            WHILE SBCONFIGURATIONATTRIBUTE IS NOT NULL
             LOOP
               MO_BOCONFIGURATIONCACHE.GETATTRIBUTERECORD( SBCONFIGURATIONATTRIBUTE, RCCONFIGURATIONATTRIBUTE );
               IF ( RCCONFIGURATIONATTRIBUTE.ENTITY_NAME = RCENTITY.SBENTITY ) THEN
                  UT_TRACE.TRACE( 'rcConfigurationAttribute ' || RCCONFIGURATIONATTRIBUTE.ENTITY_NAME || '-' || RCCONFIGURATIONATTRIBUTE.ATTRIBUTE_NAME, 16 );
                  ADDCONFIGURATIONATTRIBUTE( ISBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, RCCONFIGURATIONATTRIBUTE );
               END IF;
               MO_BOCONFIGURATIONCACHE.GETNEXTENTITYATTRIBUTE( SBCONFIGURATIONATTRIBUTE );
            END LOOP;
         END IF;
         GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADINSTANCEATTRIBUTES( ISBINSTANCE IN VARCHAR2 )
    IS
      TBINSTANCEHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.LoadInstanceAttributes INICIO [' || ISBINSTANCE || ']', 4 );
      IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, NUINDEX ) THEN
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
         LOADINSTANCEATTRIBUTES( ISBINSTANCE, SBOBJECTTYPE, SBOBJECTID );
      END IF;
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( ISBINSTANCE, TBINSTANCEHIERARCHY );
      IF TBINSTANCEHIERARCHY.COUNT != 0 THEN
         NUINDEX := TBINSTANCEHIERARCHY.FIRST;
         WHILE NUINDEX IS NOT NULL
          LOOP
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBINSTANCEHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBINSTANCEHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
            LOADINSTANCEATTRIBUTES( TBINSTANCEHIERARCHY( NUINDEX ).SBINSTANCE, SBOBJECTTYPE, SBOBJECTID );
            NUINDEX := TBINSTANCEHIERARCHY.NEXT( NUINDEX );
         END LOOP;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLLOADPRODUCTMOTIVEENTITY( INUPRODUCTMOTIVE IN NUMBER, IOTBENTITY IN OUT TYTBENTITY )
    RETURN BOOLEAN
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.LoadInstanceAttributes INICIO [' || INUPRODUCTMOTIVE || ']', 4 );
      IF FBLGETENTITY( MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT, INUPRODUCTMOTIVE, IOTBENTITY ) THEN
         RETURN TRUE;
      END IF;
      RETURN FALSE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLLOADMOTIVECOMPONENTENTITY( INUPRODMOTIVECOMPID IN NUMBER, IOTBENTITY IN OUT TYTBENTITY )
    RETURN BOOLEAN
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.fblLoadMotiveComponentEntity INICIO [' || INUPRODMOTIVECOMPID || ']', 4 );
      IF FBLGETENTITY( MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT, INUPRODMOTIVECOMPID, IOTBENTITY ) THEN
         RETURN TRUE;
      END IF;
      RETURN FALSE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLADDRESSTYPEISALLOW( ISBWORKINSTANCE IN VARCHAR2, ISBDATAINSTANCE IN VARCHAR2, IRCENTITY IN GE_BOINSTANCECONTROL.TYRCENTITYSTACK )
    RETURN BOOLEAN
    IS
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBADDRESSTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBINDEX GE_BOINSTANCECONTROL.STYSBINDEX;
    BEGIN
      UT_TRACE.TRACE( 'WARNING Inicia Metodo MO_BOUncompositionUtil.fblAddressTypeIsAllow', 9 );
      UT_TRACE.TRACE( 'Instancia Destino:[' || ISBWORKINSTANCE || ']Instancia Origen:[' || ISBDATAINSTANCE || ']Entidad:[' || IRCENTITY.SBENTITY || ']', 10 );
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( ISBWORKINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( ISBWORKINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( ISBDATAINSTANCE, IRCENTITY.SBGROUP, IRCENTITY.SBENTITY, 'ADDRESS_TYPE_ID', SBADDRESSTYPE );
      UT_TRACE.TRACE( 'Objeto:[' || SBOBJECTID || ']Tipo:[' || SBOBJECTTYPE || ']Tipo Direccion:[' || SBADDRESSTYPE || ']', 10 );
      IF MO_BOCONFIGURATIONCACHE.FBLADDRESSTYPEINDEX( TO_NUMBER( SBOBJECTTYPE ), TO_NUMBER( SBOBJECTID ), TO_NUMBER( SBADDRESSTYPE ), SBINDEX ) THEN
         UT_TRACE.TRACE( 'Direccion es Permitida', 10 );
         RETURN TRUE;
       ELSE
         IF ( SBADDRESSTYPE = AB_BOPARAMETER.FSBGETINSTALL_ADDRESS_TYPE ) THEN
            UT_TRACE.TRACE( 'Direccion es Permitida', 10 );
            RETURN TRUE;
          ELSE
            UT_TRACE.TRACE( 'Direccion No es Permitida', 10 );
            RETURN FALSE;
         END IF;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLADDRESSTYPEISALLOW;
   PROCEDURE EQUIVALENCEENTITY( ISBWORKINSTANCE IN VARCHAR2, ISBDATAINSTANCE IN VARCHAR2, IRCENTITY IN GE_BOINSTANCECONTROL.TYRCENTITYSTACK, ITBENTITY IN TYTBENTITY )
    IS
      RCATTRIBUTE GE_BOINSTANCECONTROL.TYRCATTRIBUTESTACK;
      NUATTRIBUTEINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      NUATTRIBUTE GE_BOINSTANCECONTROL.STYNUINDEX;
      SBVALUE GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.EquivalenceEntity INICIO [' || ISBWORKINSTANCE || '][' || ISBDATAINSTANCE || '][' || IRCENTITY.SBENTITY || ']', 9 );
      IF IRCENTITY.SBENTITY = 'PR_PRODUCT_ADDRESS' OR IRCENTITY.SBENTITY = 'PR_COMPONENT_ADDRESS' THEN
         IF NOT FBLADDRESSTYPEISALLOW( ISBWORKINSTANCE, ISBDATAINSTANCE, IRCENTITY ) THEN
            RETURN;
         END IF;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF MO_BCUNCOMPOSITIONCURSORS.CUEQUIVALENCEATTRIBUTE%ISOPEN THEN
            CLOSE MO_BCUNCOMPOSITIONCURSORS.CUEQUIVALENCEATTRIBUTE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF MO_BCUNCOMPOSITIONCURSORS.CUEQUIVALENCEATTRIBUTE%ISOPEN THEN
            CLOSE MO_BCUNCOMPOSITIONCURSORS.CUEQUIVALENCEATTRIBUTE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EQUIVALENCEINSTANCE( ISBWORKINSTANCE IN VARCHAR2, ISBDATAINSTANCE IN VARCHAR2, ISBOBJECTTYPE IN VARCHAR2, INUOBJECTID IN NUMBER )
    IS
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      TBENTITY TYTBENTITY;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.EquivalenceInstance INICIO [' || ISBWORKINSTANCE || '][' || ISBDATAINSTANCE || '][' || INUOBJECTID || '][' || INUOBJECTID || ']', 2 );
      IF ISBDATAINSTANCE IS NULL THEN
         RETURN;
      END IF;
      IF NOT FBLGETENTITY( ISBOBJECTTYPE, TO_NUMBER( INUOBJECTID ), TBENTITY ) THEN
         RETURN;
      END IF;
      GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( ISBDATAINSTANCE, NUENTITY );
      WHILE NUENTITY IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
         EQUIVALENCEENTITY( ISBWORKINSTANCE, ISBDATAINSTANCE, RCENTITY, TBENTITY );
         GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETINSTANCENAME( ISBINSTANCE IN VARCHAR2, OSBINSTANCE OUT NOCOPY VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.GetInstanceName INICIO [' || ISBINSTANCE || ']', 2 );
      OSBINSTANCE := ISBINSTANCE || GE_BOINSTANCECONSTANTS.CSBINSTANCE_NAME_DELIMITER || TO_CHAR( NUINSTANCESEQUENCE );
      NUINSTANCESEQUENCE := NUINSTANCESEQUENCE + 1;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE COMPONENTLINK( INURECORD IN NUMBER )
    IS
      SBINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.ComponentLink INICIO [' || INURECORD || ']', 2 );
      GE_BOINSTANCECONTROL.GETCURRENTINSTANCE( SBINSTANCE );
      GE_BOINSTANCECONTROL.LOADENTITYATTRIBUTES( SBINSTANCE, NULL, 'MO_COMP_LINK' );
      ADDMIRRORATTRIBUTE( SBINSTANCE, NULL, 'MO_COMP_LINK', 'CHILD_COMPONENT_ID', 'MO_COMPONENT', 'COMPONENT_ID', MO_BOUNCOMPOSITIONCONSTANTS.CNUCOMPONENT_LINK_MIRROR );
      ADDMIRRORATTRIBUTE( SBINSTANCE, NULL, 'MO_COMP_LINK', 'MOTIVE_ID', 'MO_COMPONENT', 'MOTIVE_ID', MO_BOUNCOMPOSITIONCONSTANTS.CNUCOMPONENT_LINK_MIRROR );
      IF INURECORD >= 2 THEN
         ADDMIRRORATTRIBUTE( SBINSTANCE, NULL, 'MO_COMP_LINK', 'FATHER_COMPONENT_ID', 'MO_COMPONENT', 'COMPONENT_ID', MO_BOUNCOMPOSITIONCONSTANTS.CNUCOMPONENT_LINK_MIRROR, MO_BOUNCOMPOSITIONCONSTANTS.CNUSTART_FATHER_INSTANCE );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXECUTORLOG( ISBINSTANCE IN VARCHAR2 )
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.ExecutorLog INICIO [' || ISBINSTANCE || '][' || RCEXECUTORLOGCONTROL.CHREGISTERTYPE || ']', 6 );
      IF RCEXECUTORLOGCONTROL.NUACTION IS NULL THEN
         ERRORS.SETERROR( MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_EXEC_LOG_ACTION_NULL );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF RCEXECUTORLOGCONTROL.NUINITIALSTATUS IS NULL THEN
         ERRORS.SETERROR( MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_EXEC_LOG_STATUS_NULL );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_EXECUTOR_LOG_MOT', 'ACTION_ID', TO_CHAR( RCEXECUTORLOGCONTROL.NUACTION ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_EXECUTOR_LOG_MOT', 'STATUS_EXEC_LOG_ID', TO_CHAR( RCEXECUTORLOGCONTROL.NUINITIALSTATUS ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_EXECUTOR_LOG_MOT', 'PACKAGE_ID', NULL );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_EXECUTOR_LOG_MOT', 'MOTIVE_ID', NULL );
      ADDMIRRORATTRIBUTE( ISBINSTANCE, NULL, 'MO_EXECUTOR_LOG_MOT', 'PACKAGE_ID', 'MO_PACKAGES', 'PACKAGE_ID', MO_BOUNCOMPOSITIONCONSTANTS.CNUCOMPONENT_LINK_MIRROR );
      IF RCEXECUTORLOGCONTROL.CHREGISTERTYPE = MO_BOUNCOMPOSITIONCONSTANTS.CSBMOTIVE_EXECUTOR_LOG THEN
         ADDMIRRORATTRIBUTE( ISBINSTANCE, NULL, 'MO_EXECUTOR_LOG_MOT', 'MOTIVE_ID', 'MO_MOTIVE', 'MOTIVE_ID', MO_BOUNCOMPOSITIONCONSTANTS.CNUCOMPONENT_LINK_MIRROR );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADEXECUTORLOGCONTROL( IRCPACKAGETYPE IN DAPS_PACKAGE_TYPE.STYPS_PACKAGE_TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo MO_BOUncompositionUtil.LoadExecutorLogControl', 10 );
      UT_TRACE.TRACE( 'Indicador:[' || IRCPACKAGETYPE.INDICATOR_REGIS_EXEC || ']Accion:[' || IRCPACKAGETYPE.ACTION_REGIS_EXEC || ']Estado:[' || IRCPACKAGETYPE.STAT_INI_REGIS_EXEC || ']', 11 );
      RCEXECUTORLOGCONTROL.NUPACKAGETYPE := IRCPACKAGETYPE.PACKAGE_TYPE_ID;
      RCEXECUTORLOGCONTROL.CHREGISTERTYPE := IRCPACKAGETYPE.INDICATOR_REGIS_EXEC;
      RCEXECUTORLOGCONTROL.NUACTION := IRCPACKAGETYPE.ACTION_REGIS_EXEC;
      RCEXECUTORLOGCONTROL.NUINITIALSTATUS := IRCPACKAGETYPE.STAT_INI_REGIS_EXEC;
      UT_TRACE.TRACE( 'Finaliza Metodo MO_BOUncompositionUtil.LoadExecutorLogControl', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE PACKAGEINSTANCEDATA( ISBINSTANCE IN VARCHAR2, INUPACKAGETYPE IN NUMBER, INUEVENT IN NUMBER, IRCINSTANCE IN MO_BOCONFIGURATIONCACHE.STYINSTANCE )
    IS
      RCPACKAGETYPE DAPS_PACKAGE_TYPE.STYPS_PACKAGE_TYPE;
      SBDATE VARCHAR2( 2000 );
      NUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo MO_BOUncompositionUtil.PackageInstanceData', 6 );
      UT_TRACE.TRACE( 'Instancia:[' || ISBINSTANCE || ']Tipo Paquete:[' || INUPACKAGETYPE || ']Evento:[' || INUEVENT || ']Tag:[' || IRCINSTANCE.INSTANCE_NAME || ']', 7 );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_INSTANCE, IRCINSTANCE.INSTANCE_NAME, TRUE );
      NUPACKAGEID := MO_BOSEQUENCES.FNUGETPACKAGEID;
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_PACKAGES', 'PACKAGE_ID', TO_CHAR( NUPACKAGEID ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, 'MO_PACKAGES', 'PACKAGE_NEW_ID', TO_CHAR( NUPACKAGEID ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_PACKAGES', 'CUST_CARE_REQUES_NUM', NULL );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_PACKAGES', 'PACKAGE_TYPE_ID', TO_CHAR( INUPACKAGETYPE ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_PACKAGES', 'TAG_NAME', IRCINSTANCE.INSTANCE_NAME );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, MO_BOCONSTANTS.CSBMO_PACKAGES, CSBINIT_REGISTER_DATE, NULL );
      RCPACKAGETYPE := DAPS_PACKAGE_TYPE.FRCGETRECORD( INUPACKAGETYPE );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'PACKAGE_TYPE_ID', TO_CHAR( INUPACKAGETYPE ) );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( MO_BOUNCOMPOSITIONCONSTANTS.CSBPACKAGE_TYPE, TO_CHAR( INUPACKAGETYPE ) || '-' || RCPACKAGETYPE.DESCRIPTION );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'PACKAGE_TAG_NAME', IRCINSTANCE.INSTANCE_NAME );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'PACKAGE_ID', TO_CHAR( NUPACKAGEID ) );
      SBDATE := TO_CHAR( UT_DATE.FDTSYSDATE, 'DD-MM-YYYY HH24:MI:SS' );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'FECHASISTEMA', SBDATE );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'FECHASISTEMABD', UT_DATE.FSBSTR_SYSDATE );
      LOADEXECUTORLOGCONTROL( RCPACKAGETYPE );
      IF INUEVENT = GE_BOCONSTANTS.INSERT_ AND RCEXECUTORLOGCONTROL.CHREGISTERTYPE = MO_BOUNCOMPOSITIONCONSTANTS.CSBPACKAGE_EXECUTOR_LOG THEN
         EXECUTORLOG( ISBINSTANCE );
      END IF;
      UT_TRACE.TRACE( 'Finaliza Metodo MO_BOUncompositionUtil.PackageInstanceData', 6 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE MOTIVEINSTANCEDATA( ISBINSTANCE IN VARCHAR2, INUPRODUCTMOTIVE IN NUMBER, INUEVENT IN NUMBER, IRCINSTANCE IN MO_BOCONFIGURATIONCACHE.STYINSTANCE )
    IS
      SBPACKAGETYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      RCPACKAGEMOTIVE MO_BOCONFIGURATIONCACHE.STYPACKAGEMOTIVE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.MotiveInstanceData INICIO [' || ISBINSTANCE || '][' || INUPRODUCTMOTIVE || '][' || INUEVENT || ']Tag:[' || IRCINSTANCE.INSTANCE_NAME || ']', 6 );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_INSTANCE, IRCINSTANCE.INSTANCE_NAME, TRUE );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_MOTIVE', 'PRODUCT_MOTIVE_ID', TO_CHAR( INUPRODUCTMOTIVE ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_MOTIVE', 'MOTIVE_TYPE_ID', TO_CHAR( IRCINSTANCE.MOTIVE_TYPE ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_MOTIVE', 'PRODUCT_TYPE_ID', TO_CHAR( IRCINSTANCE.PRODUCT_TYPE ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_MOTIVE', 'TAG_NAME', IRCINSTANCE.INSTANCE_NAME );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'PRODUCT_MOTIVE_ID', TO_CHAR( INUPRODUCTMOTIVE ) );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'MOTIVE_TYPE_ID', TO_CHAR( IRCINSTANCE.MOTIVE_TYPE ) );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'PRODUCT_TYPE_ID', TO_CHAR( IRCINSTANCE.PRODUCT_TYPE ) );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'MOTIVE_TAG_NAME', IRCINSTANCE.INSTANCE_NAME );
      NUCOMPONENTNUMBER := 0;
      IF INUEVENT = GE_BOCONSTANTS.INSERT_ AND RCEXECUTORLOGCONTROL.CHREGISTERTYPE = MO_BOUNCOMPOSITIONCONSTANTS.CSBMOTIVE_EXECUTOR_LOG THEN
         EXECUTORLOG( ISBINSTANCE );
      END IF;
      GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE( 'PACKAGE_TYPE_ID', SBPACKAGETYPE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE COMPONENTINSTANCEDATA( ISBINSTANCE IN VARCHAR2, INUMOTIVECOMPONENT IN NUMBER, INUEVENT IN NUMBER, IRCINSTANCE IN MO_BOCONFIGURATIONCACHE.STYINSTANCE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.ComponentInstanceData INICIO [' || ISBINSTANCE || '][' || INUMOTIVECOMPONENT || '][' || INUEVENT || ']Tag:[' || IRCINSTANCE.INSTANCE_NAME || ']', 6 );
      NUCOMPONENTNUMBER := NUCOMPONENTNUMBER + 1;
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_INSTANCE, IRCINSTANCE.INSTANCE_NAME, TRUE );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_COMPONENT', 'PROD_MOTIVE_COMP_ID', TO_CHAR( INUMOTIVECOMPONENT ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_COMPONENT', 'MOTIVE_TYPE_ID', TO_CHAR( IRCINSTANCE.MOTIVE_TYPE ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_COMPONENT', 'COMPONENT_TYPE_ID', TO_CHAR( IRCINSTANCE.COMPONENT_TYPE ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_COMPONENT', 'COMPONENT_NUMBER', TO_CHAR( NUCOMPONENTNUMBER ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, 'MO_COMPONENT', 'TAG_NAME', IRCINSTANCE.INSTANCE_NAME );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'PROD_MOTIVE_COMP_ID', TO_CHAR( INUMOTIVECOMPONENT ) );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'MOTIVE_TYPE_ID', TO_CHAR( IRCINSTANCE.MOTIVE_TYPE ) );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'COMPONENT_TYPE_ID', TO_CHAR( IRCINSTANCE.COMPONENT_TYPE ) );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'COMPONENT_NUMBER', TO_CHAR( NUCOMPONENTNUMBER ) );
      GE_BOINSTANCECONTROL.ADDGLOBALATTRIBUTE( 'COMPONENT_TAG_NAME', IRCINSTANCE.INSTANCE_NAME );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CREATEINSTANCE( ISBFATHER IN VARCHAR2, ISBINSTANCE IN VARCHAR2, ISBOBJECTTYPE IN VARCHAR2, INUOBJECTID IN NUMBER, INUOBJECTCATEGORY IN NUMBER, INUEVENT IN NUMBER )
    IS
      RCINSTANCE MO_BOCONFIGURATIONCACHE.STYINSTANCE;
      SBFATHER GE_BOINSTANCECONTROL.STYSBNAME;
      SBFATHERTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.CreateInstance INICIO [' || ISBFATHER || '][' || ISBINSTANCE || '][' || ISBOBJECTTYPE || '][' || INUOBJECTID || ']', 6 );
      GE_BOINSTANCECONTROL.CREATEINSTANCE( ISBINSTANCE, ISBFATHER );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, ISBOBJECTTYPE );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, TO_CHAR( INUOBJECTID ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBELEMENT_CATEGORY, TO_CHAR( INUOBJECTCATEGORY ) );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBINSTANCE_INDEX, '0' );
      GE_BOINSTANCECONTROL.ADDATTRIBUTE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_INSTANCE, NULL );
      IF TO_NUMBER( ISBOBJECTTYPE ) NOT IN ( MO_BOCONFIGURATIONCONTROL.FNUGETPACKAGEOBJECT, MO_BOCONFIGURATIONCONTROL.FNUGETMOTIVEOBJECT, MO_BOCONFIGURATIONCONTROL.FNUGETCOMPONENTOBJECT ) THEN
         RETURN;
      END IF;
      IF TO_NUMBER( ISBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT THEN
         MO_BOCONFIGURATIONCACHE.LOADPACKAGECONFIGURATION( TO_NUMBER( INUOBJECTID ) );
      END IF;
      MO_BOCONFIGURATIONCACHE.GETINSTANCERECORD( TO_NUMBER( ISBOBJECTTYPE ), TO_NUMBER( INUOBJECTID ), RCINSTANCE );
      IF ISBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT THEN
         PACKAGEINSTANCEDATA( ISBINSTANCE, INUOBJECTID, INUEVENT, RCINSTANCE );
       ELSIF ISBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT THEN
         MOTIVEINSTANCEDATA( ISBINSTANCE, INUOBJECTID, INUEVENT, RCINSTANCE );
       ELSIF ISBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT THEN
         COMPONENTINSTANCEDATA( ISBINSTANCE, INUOBJECTID, INUEVENT, RCINSTANCE );
         GE_BOINSTANCECONTROL.GETFATHERINSTANCE( ISBINSTANCE, SBFATHER );
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( SBFATHER, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBFATHERTYPE );
         IF SBFATHERTYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT THEN
            COMPONENTLINK( 1 );
          ELSE
            COMPONENTLINK( 2 );
         END IF;
      END IF;
      GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( ISBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBINSTANCE_INDEX, TO_CHAR( RCINSTANCE.SEQUENCE_ ) );
      GE_BOINSTANCECONTROL.SETINSTANCEEXPRESSIONS( ISBINSTANCE, RCINSTANCE.INSERT_BEFORE_EXPRESSION, RCINSTANCE.INSERT_AFTER_EXPRESSION, RCINSTANCE.UPDATE_BEFORE_EXPRESSION, RCINSTANCE.UPDATE_AFTER_EXPRESSION, RCINSTANCE.DELETE_BEFORE_EXPRESSION, RCINSTANCE.DELETE_AFTER_EXPRESSION );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ADDMIRRORATTRIBUTE( ISBINSTANCE IN VARCHAR2, ISBGROUP IN VARCHAR2, ISBENTITY IN VARCHAR2, ISBATTRIBUTE IN VARCHAR2, ISBMIRRORENTITY IN VARCHAR2, ISBMIRRORATTRIBUTE IN VARCHAR2, INUMIRRORTYPE IN NUMBER, INUSTARTMODE IN NUMBER := MO_BOUNCOMPOSITIONCONSTANTS.CNUSTART_CURRENT_INSTANCE )
    IS
      NUINSTANCE GE_BOINSTANCECONTROL.STYNUINDEX;
      NUATTRIBUTE GE_BOINSTANCECONTROL.STYNUINDEX;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.AddMirrorAttribute [' || ISBINSTANCE || '][' || ISBENTITY || '][' || ISBATTRIBUTE || ']->[' || ISBMIRRORENTITY || '][' || ISBMIRRORATTRIBUTE || ']', 21 );
      IF ISBMIRRORENTITY IS NULL AND ISBMIRRORATTRIBUTE IS NULL THEN
         RETURN;
      END IF;
      GE_BOINSTANCECONTROL.ACCKEYINSTANCESTACK( ISBINSTANCE, NUINSTANCE );
      GE_BOINSTANCECONTROL.ACCKEYATTRIBUTESTACK( ISBINSTANCE, ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUATTRIBUTE );
      IF NOT TBMIRRORINSTANCE.EXISTS( NUINSTANCE ) THEN
         TBMIRRORINSTANCE( NUINSTANCE ).NUINDEX := NUINSTANCE;
         TBMIRRORINSTANCE( NUINSTANCE ).SBINSTANCE := ISBINSTANCE;
         TBMIRRORINSTANCE( NUINSTANCE ).NUFIRSTNORMAL := NULL;
         TBMIRRORINSTANCE( NUINSTANCE ).NULASTNORMAL := NULL;
         TBMIRRORINSTANCE( NUINSTANCE ).NUFIRSTLINK := NULL;
         TBMIRRORINSTANCE( NUINSTANCE ).NULASTLINK := NULL;
         TBMIRRORINSTANCE( NUINSTANCE ).NUNORMAL := NUINSTANCE * 1000;
         TBMIRRORINSTANCE( NUINSTANCE ).NULINK := ( NUINSTANCE * 1000 ) + 600;
      END IF;
      IF INUMIRRORTYPE = MO_BOUNCOMPOSITIONCONSTANTS.CNUNORMAL_MIRROR THEN
         NUINDEX := TBMIRRORINSTANCE( NUINSTANCE ).NUNORMAL;
         IF TBMIRRORINSTANCE( NUINSTANCE ).NUFIRSTNORMAL IS NULL THEN
            TBMIRRORINSTANCE( NUINSTANCE ).NUFIRSTNORMAL := NUINDEX;
         END IF;
         TBMIRRORINSTANCE( NUINSTANCE ).NULASTNORMAL := NUINDEX;
         TBMIRRORINSTANCE( NUINSTANCE ).NUNORMAL := TBMIRRORINSTANCE( NUINSTANCE ).NUNORMAL + 1;
       ELSE
         NUINDEX := TBMIRRORINSTANCE( NUINSTANCE ).NULINK;
         IF TBMIRRORINSTANCE( NUINSTANCE ).NUFIRSTLINK IS NULL THEN
            TBMIRRORINSTANCE( NUINSTANCE ).NUFIRSTLINK := NUINDEX;
         END IF;
         TBMIRRORINSTANCE( NUINSTANCE ).NULASTLINK := NUINDEX;
         TBMIRRORINSTANCE( NUINSTANCE ).NULINK := TBMIRRORINSTANCE( NUINSTANCE ).NULINK + 1;
      END IF;
      TBMIRRORATTRIBUTE( NUINDEX ).NUINDEX := NUINDEX;
      TBMIRRORATTRIBUTE( NUINDEX ).NUATTRIBUTE := NUATTRIBUTE;
      TBMIRRORATTRIBUTE( NUINDEX ).NUMIRROR := NULL;
      TBMIRRORATTRIBUTE( NUINDEX ).NUTYPE := INUMIRRORTYPE;
      TBMIRRORATTRIBUTE( NUINDEX ).NUSTARTMODE := INUSTARTMODE;
      GE_BOINSTANCECONTROL.GETFATHERINSTANCE( ISBINSTANCE, TBMIRRORATTRIBUTE( NUINDEX ).SBFATHER );
      TBMIRRORATTRIBUTE( NUINDEX ).SBINSTANCE := ISBINSTANCE;
      TBMIRRORATTRIBUTE( NUINDEX ).SBGROUP := ISBGROUP;
      TBMIRRORATTRIBUTE( NUINDEX ).SBENTITY := ISBENTITY;
      TBMIRRORATTRIBUTE( NUINDEX ).SBATTRIBUTE := ISBATTRIBUTE;
      TBMIRRORATTRIBUTE( NUINDEX ).SBMIRRORENTITY := ISBMIRRORENTITY;
      TBMIRRORATTRIBUTE( NUINDEX ).SBMIRRORATTRIBUTE := ISBMIRRORATTRIBUTE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETMIRRORATTRIBUTE( IORCMIRROR IN OUT TYRCMIRRORATTRIBUTE )
    IS
      RCATTRIBUTE GE_BOINSTANCECONTROL.TYRCATTRIBUTESTACK;
      NUATTRIBUTE GE_BOINSTANCECONTROL.STYNUINDEX;
      SBFATHER GE_BOINSTANCECONTROL.STYSBNAME;
      SBINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      SBVALUE GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.GetMirrorAttribute INICIO [' || IORCMIRROR.SBINSTANCE || '][' || IORCMIRROR.SBGROUP || '][' || IORCMIRROR.SBENTITY || '][' || IORCMIRROR.SBATTRIBUTE || '] -> [' || IORCMIRROR.SBMIRRORENTITY || '][' || IORCMIRROR.SBMIRRORATTRIBUTE || ']', 7 );
      IF IORCMIRROR.NUMIRROR IS NULL THEN
         IF IORCMIRROR.NUSTARTMODE = MO_BOUNCOMPOSITIONCONSTANTS.CNUSTART_CURRENT_INSTANCE THEN
            SBINSTANCE := IORCMIRROR.SBINSTANCE;
          ELSE
            SBINSTANCE := IORCMIRROR.SBFATHER;
         END IF;
         WHILE SBINSTANCE IS NOT NULL
          LOOP
            IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( SBINSTANCE, NULL, IORCMIRROR.SBMIRRORENTITY, IORCMIRROR.SBMIRRORATTRIBUTE, NUATTRIBUTE ) THEN
               IF NUATTRIBUTE != IORCMIRROR.NUATTRIBUTE THEN
                  IORCMIRROR.NUMIRROR := NUATTRIBUTE;
                  GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( SBINSTANCE, NULL, IORCMIRROR.SBMIRRORENTITY, IORCMIRROR.SBMIRRORATTRIBUTE, SBVALUE );
                  GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( IORCMIRROR.SBINSTANCE, IORCMIRROR.SBGROUP, IORCMIRROR.SBENTITY, IORCMIRROR.SBATTRIBUTE, SBVALUE );
                  RETURN;
               END IF;
            END IF;
            GE_BOINSTANCECONTROL.GETFATHERINSTANCE( SBINSTANCE, SBFATHER );
            SBINSTANCE := SBFATHER;
         END LOOP;
         ERRORS.SETERROR( MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_NOT_MIRROR_ATTRIBUTE, IORCMIRROR.SBATTRIBUTE || '|' || IORCMIRROR.SBINSTANCE || '.' || IORCMIRROR.SBENTITY );
         RAISE EX.CONTROLLED_ERROR;
       ELSE
         GE_BOINSTANCECONTROL.GETATTRIBUTE( IORCMIRROR.NUMIRROR, RCATTRIBUTE );
         GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( IORCMIRROR.SBINSTANCE, IORCMIRROR.SBGROUP, IORCMIRROR.SBENTITY, IORCMIRROR.SBATTRIBUTE, RCATTRIBUTE.SBNEWVALUE );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE MIRRORATTRIBUTE( ISBINSTANCE IN VARCHAR2 := NULL )
    IS
      NUINSTANCE GE_BOINSTANCECONTROL.STYNUINDEX;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      NULAST GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.MirrorAttribute INICIO [' || ISBINSTANCE || ']', 6 );
      IF TBMIRRORATTRIBUTE.COUNT = 0 THEN
         RETURN;
      END IF;
      NUINDEX := TBMIRRORATTRIBUTE.FIRST;
      NULAST := TBMIRRORATTRIBUTE.LAST;
      IF ISBINSTANCE IS NOT NULL THEN
         GE_BOINSTANCECONTROL.ACCKEYINSTANCESTACK( ISBINSTANCE, NUINSTANCE );
         IF NOT TBMIRRORINSTANCE.EXISTS( NUINSTANCE ) THEN
            RETURN;
         END IF;
         IF TBMIRRORINSTANCE( NUINSTANCE ).NUFIRSTNORMAL IS NOT NULL THEN
            NUINDEX := TBMIRRORINSTANCE( NUINSTANCE ).NUFIRSTNORMAL;
          ELSE
            NUINDEX := TBMIRRORINSTANCE( NUINSTANCE ).NUFIRSTLINK;
         END IF;
         IF TBMIRRORINSTANCE( NUINSTANCE ).NULASTLINK IS NOT NULL THEN
            NULAST := TBMIRRORINSTANCE( NUINSTANCE ).NULASTLINK;
          ELSE
            NULAST := TBMIRRORINSTANCE( NUINSTANCE ).NULASTNORMAL;
         END IF;
      END IF;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GETMIRRORATTRIBUTE( TBMIRRORATTRIBUTE( NUINDEX ) );
         EXIT WHEN NUINDEX = NULAST;
         NUINDEX := TBMIRRORATTRIBUTE.NEXT( NUINDEX );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETFIRSTMIRRORATTRIBUTE( ORCMIRROR OUT TYRCMIRRORATTRIBUTE )
    IS
    BEGIN
      IF TBMIRRORATTRIBUTE.FIRST IS NULL THEN
         ORCMIRROR.NUINDEX := NULL;
       ELSE
         ORCMIRROR := TBMIRRORATTRIBUTE( TBMIRRORATTRIBUTE.FIRST );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETNEXTMIRRORATTRIBUTE( IORCMIRROR IN OUT TYRCMIRRORATTRIBUTE )
    IS
    BEGIN
      IF TBMIRRORATTRIBUTE.NEXT( IORCMIRROR.NUINDEX ) IS NULL THEN
         IORCMIRROR.NUINDEX := NULL;
       ELSE
         IORCMIRROR := TBMIRRORATTRIBUTE( TBMIRRORATTRIBUTE.NEXT( IORCMIRROR.NUINDEX ) );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLDELETEMIRROR( ISBMIRRORINSTANCE IN VARCHAR2, ITBINSTANCE IN TYTBINSTANCE )
    RETURN BOOLEAN
    IS
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.fblDeleteMirror INICIO [' || ISBMIRRORINSTANCE || ']', 6 );
      NUINDEX := ITBINSTANCE.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         IF ISBMIRRORINSTANCE = ITBINSTANCE( NUINDEX ) THEN
            RETURN TRUE;
         END IF;
         NUINDEX := ITBINSTANCE.NEXT( NUINDEX );
      END LOOP;
      RETURN FALSE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DESTROYINSTANCE( ISBINSTANCE IN VARCHAR2 )
    IS
      NUMIRRORINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      NUINSTANCEINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      NUCURRENT GE_BOINSTANCECONTROL.STYNUINDEX;
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      TBINSTANCE TYTBINSTANCE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.DestroyInstance INICIO [' || ISBINSTANCE || ']', 6 );
      TBINSTANCE.DELETE;
      TBINSTANCE( TBINSTANCE.COUNT ) := ISBINSTANCE;
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( ISBINSTANCE, TBHIERARCHY );
      IF TBHIERARCHY.COUNT != 0 THEN
         NUINSTANCEINDEX := TBHIERARCHY.FIRST;
         WHILE NUINSTANCEINDEX IS NOT NULL
          LOOP
            TBINSTANCE( TBINSTANCE.COUNT ) := TBHIERARCHY( NUINSTANCEINDEX ).SBINSTANCE;
            NUINSTANCEINDEX := TBHIERARCHY.NEXT( NUINSTANCEINDEX );
         END LOOP;
      END IF;
      IF TBMIRRORATTRIBUTE.COUNT != 0 THEN
         NUMIRRORINDEX := TBMIRRORATTRIBUTE.FIRST;
         WHILE NUMIRRORINDEX IS NOT NULL
          LOOP
            NUCURRENT := NUMIRRORINDEX;
            NUMIRRORINDEX := TBMIRRORATTRIBUTE.NEXT( NUMIRRORINDEX );
            IF FBLDELETEMIRROR( TBMIRRORATTRIBUTE( NUCURRENT ).SBINSTANCE, TBINSTANCE ) THEN
               TBMIRRORATTRIBUTE.DELETE( NUCURRENT );
            END IF;
         END LOOP;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VALIDATESTATUS( INUOBJECTTYPE IN NUMBER, INUOBJECTID IN NUMBER, INUPRODUCTOBJECT IN NUMBER )
    IS
      SBINDEX GE_BOINSTANCECONTROL.STYSBINDEX;
      SBPACKAGETYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBSERVICENUMBER PR_PRODUCT.SERVICE_NUMBER%TYPE;
      SBDESCRIPTION PS_COMPONENT_TYPE.DESCRIPTION%TYPE;
      SBCLASSSERVICE PS_CLASS_SERVICE.DESCRIPTION%TYPE;
      NUPRODUCTTYPE PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;
      NUCOMPONENTTYPE PR_COMPONENT.COMPONENT_TYPE_ID%TYPE;
      NUCLASSSERVICE PR_COMPONENT.CLASS_SERVICE_ID%TYPE;
      SBMENSAGE VARCHAR2( 2000 );
      NUSTATUS PR_PRODUCT.PRODUCT_STATUS_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.ValidateStatus INICIO [' || INUOBJECTTYPE || '][' || INUOBJECTID || '][' || INUPRODUCTOBJECT || ']', 9 );
      IF INUPRODUCTOBJECT IS NULL THEN
         RETURN;
      END IF;
      IF INUOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT THEN
         DAPR_PRODUCT.ACCKEY( INUPRODUCTOBJECT );
         NUSTATUS := DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID( INUPRODUCTOBJECT );
       ELSE
         DAPR_COMPONENT.ACCKEY( INUPRODUCTOBJECT );
         NUSTATUS := DAPR_COMPONENT.FNUGETCOMPONENT_STATUS_ID( INUPRODUCTOBJECT );
      END IF;
      UT_TRACE.TRACE( 'Estado Actual:[' || NUSTATUS || ']', 10 );
      IF MO_BOCONFIGURATIONCACHE.FBLVALIDSTATUSINDEX( INUOBJECTTYPE, INUOBJECTID, NUSTATUS, SBINDEX ) THEN
         RETURN;
      END IF;
      GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE( MO_BOUNCOMPOSITIONCONSTANTS.CSBPACKAGE_TYPE, SBPACKAGETYPE );
      IF INUOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT THEN
         SBSERVICENUMBER := DAPR_PRODUCT.FSBGETSERVICE_NUMBER( INUPRODUCTOBJECT );
         NUPRODUCTTYPE := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID( INUPRODUCTOBJECT );
         SBDESCRIPTION := PKTBLSERVICIO.FSBGETDESCRIPTION( NUPRODUCTTYPE );
         SBMENSAGE := INUPRODUCTOBJECT || ' (' || SBDESCRIPTION || ' - ' || SBSERVICENUMBER || ')';
         ERRORS.SETERROR( MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_NO_VALID_PRODUCT_STATUS, SBMENSAGE || '|' || SBPACKAGETYPE );
         RAISE EX.CONTROLLED_ERROR;
       ELSE
         SBSERVICENUMBER := DAPR_COMPONENT.FSBGETSERVICE_NUMBER( INUPRODUCTOBJECT );
         NUCOMPONENTTYPE := DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID( INUPRODUCTOBJECT );
         NUCLASSSERVICE := DAPR_COMPONENT.FNUGETCLASS_SERVICE_ID( INUPRODUCTOBJECT );
         DAPS_COMPONENT_TYPE.ACCKEY( NUCOMPONENTTYPE );
         SBDESCRIPTION := DAPS_COMPONENT_TYPE.FSBGETDESCRIPTION( NUCOMPONENTTYPE );
         IF NUCLASSSERVICE IS NULL THEN
            SBMENSAGE := INUPRODUCTOBJECT || ' (' || SBDESCRIPTION || ' - ' || SBSERVICENUMBER || ')';
          ELSE
            DAPS_CLASS_SERVICE.ACCKEY( NUCLASSSERVICE );
            SBCLASSSERVICE := DAPS_CLASS_SERVICE.FSBGETDESCRIPTION( NUCLASSSERVICE );
            SBMENSAGE := INUPRODUCTOBJECT || ' (' || SBDESCRIPTION || ' ' || SBCLASSSERVICE || ' - ' || SBSERVICENUMBER || ')';
         END IF;
         ERRORS.SETERROR( MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_NO_VALID_COMP_STATUS, SBMENSAGE || '|' || SBPACKAGETYPE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VALIDATESERVICECLASS( ISBINSTANCE IN GE_BOINSTANCECONTROL.STYSBNAME, INUOBJECTTYPE IN NUMBER, INUOBJECTID IN NUMBER )
    IS
      SBINDEX GE_BOINSTANCECONTROL.STYSBINDEX;
      SBSERVICECLASS GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.ValidateServiceClass INICIO [' || ISBINSTANCE || '][' || INUOBJECTTYPE || '][' || INUOBJECTID || ']', 6 );
      GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( ISBINSTANCE, NULL, 'MO_COMPONENT', 'CLASS_SERVICE_ID', SBSERVICECLASS );
      IF SBSERVICECLASS IS NULL THEN
         RETURN;
      END IF;
      IF MO_BOCONFIGURATIONCACHE.FBLSERVICECLASSINDEX( INUOBJECTTYPE, INUOBJECTID, TO_NUMBER( SBSERVICECLASS ), SBINDEX ) THEN
         RETURN;
      END IF;
      ERRORS.SETERROR( PS_BOCONSTERROR.CNUERRCLASSSERVPRODCOMPNOEXIS, SBSERVICECLASS || '-' || DAPS_CLASS_SERVICE.FSBGETDESCRIPTION( SBSERVICECLASS ) || '|' || INUOBJECTID || '-' || DAPS_PROD_MOTIVE_COMP.FSBGETDESCRIPTION( INUOBJECTID ) );
      RAISE EX.CONTROLLED_ERROR;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSTANCEGENERICVALIDATE( IBLVALIDATEADDRESSTYPE IN BOOLEAN, IBLVALIDATESTATUS IN BOOLEAN, IBLVALIDATESERVICECLASS IN BOOLEAN )
    IS
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBPRODUCTID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBCOMPONENTID GE_BOINSTANCECONTROL.STYSBVALUE;
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo mo_boUncompositionUtil.ValidGeneric', 2 );
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
      IF TBHIERARCHY.COUNT = 0 THEN
         RETURN;
      END IF;
      NUINDEX := TBHIERARCHY.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
         IF IBLVALIDATESTATUS THEN
            IF TO_NUMBER( SBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT THEN
               GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, 'MO_MOTIVE', 'PRODUCT_ID', SBPRODUCTID );
               VALIDATESTATUS( TO_NUMBER( SBOBJECTTYPE ), TO_NUMBER( SBOBJECTID ), TO_NUMBER( SBPRODUCTID ) );
             ELSIF TO_NUMBER( SBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT THEN
               GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, 'MO_COMPONENT', 'COMPONENT_ID_PROD', SBCOMPONENTID );
               VALIDATESTATUS( TO_NUMBER( SBOBJECTTYPE ), TO_NUMBER( SBOBJECTID ), TO_NUMBER( SBCOMPONENTID ) );
            END IF;
         END IF;
         IF IBLVALIDATESERVICECLASS THEN
            IF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT THEN
               VALIDATESERVICECLASS( TBHIERARCHY( NUINDEX ).SBINSTANCE, TO_NUMBER( SBOBJECTTYPE ), TO_NUMBER( SBOBJECTID ) );
            END IF;
         END IF;
         NUINDEX := TBHIERARCHY.NEXT( NUINDEX );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXECUTEACTION( INUACTIONTYPE IN NUMBER )
    IS
      TBINSTANCEHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      NURELATIONSTATUS PS_MOTIVE_ACTION.MOTI_STATUS_RELATION%TYPE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.ExecuteAction INICIO [' || INUACTIONTYPE || ']', 2 );
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBINSTANCEHIERARCHY );
      IF TBINSTANCEHIERARCHY.COUNT = 0 THEN
         RETURN;
      END IF;
      NUINDEX := TBINSTANCEHIERARCHY.LAST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBINSTANCEHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         GE_BOINSTANCECONTROL.SETCURRENTDATA( TBINSTANCEHIERARCHY( NUINDEX ).SBINSTANCE, NULL, NULL, NULL );
         IF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT THEN
            MO_BOACTIONCONTROLLER.PACKAGESTATUS( INUACTIONTYPE, NURELATIONSTATUS );
          ELSIF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT THEN
            MO_BOACTIONCONTROLLER.MOTIVESTATUS( INUACTIONTYPE, NURELATIONSTATUS );
          ELSIF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT THEN
            MO_BOACTIONCONTROLLER.COMPONENTSTATUS( INUACTIONTYPE, NURELATIONSTATUS );
         END IF;
         NUINDEX := TBINSTANCEHIERARCHY.PRIOR( NUINDEX );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETSAVEPOINT
    IS
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      GE_BOINSTANCECONTROL.SETSAVEPOINT;
      TBROLLBACKMIRRORINSTANCE.DELETE;
      TBROLLBACKMIRRORATTRIBUTE.DELETE;
      NUROLLBACKINSTANCESEQUENCE := NUINSTANCESEQUENCE;
      NUINDEX := TBMIRRORINSTANCE.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         TBROLLBACKMIRRORINSTANCE( NUINDEX ) := TBMIRRORINSTANCE( NUINDEX );
         NUINDEX := TBMIRRORINSTANCE.NEXT( NUINDEX );
      END LOOP;
      NUINDEX := TBMIRRORATTRIBUTE.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         TBROLLBACKMIRRORATTRIBUTE( NUINDEX ) := TBMIRRORATTRIBUTE( NUINDEX );
         NUINDEX := TBMIRRORATTRIBUTE.NEXT( NUINDEX );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ROLLBACKSAVEPOINT
    IS
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      GE_BOINSTANCECONTROL.ROLLBACKSAVEPOINT;
      TBMIRRORINSTANCE.DELETE;
      TBMIRRORATTRIBUTE.DELETE;
      NUINSTANCESEQUENCE := NUROLLBACKINSTANCESEQUENCE;
      NUINDEX := TBROLLBACKMIRRORINSTANCE.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         TBMIRRORINSTANCE( NUINDEX ) := TBROLLBACKMIRRORINSTANCE( NUINDEX );
         NUINDEX := TBROLLBACKMIRRORINSTANCE.NEXT( NUINDEX );
      END LOOP;
      NUINDEX := TBROLLBACKMIRRORATTRIBUTE.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         TBMIRRORATTRIBUTE( NUINDEX ) := TBROLLBACKMIRRORATTRIBUTE( NUINDEX );
         NUINDEX := TBROLLBACKMIRRORATTRIBUTE.NEXT( NUINDEX );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FBLCONFIGURATIONCOMPONENTDATA( INUPRODUCTMOTIVEID IN NUMBER, INUFATHERCOMPTYPEID IN NUMBER, INUCOMPONENTTYPEID IN NUMBER, ONUPRODMOTIVECOMPID OUT NOCOPY NUMBER, ONUELEMENTCATEGORY OUT NOCOPY NUMBER, OSBTAGNAME OUT NOCOPY VARCHAR2, OSBACTIVE OUT NOCOPY VARCHAR2 )
    RETURN BOOLEAN
    IS
    BEGIN
      RETURN ( MO_BOCONFIGURATIONCACHE.FBLCONFIGURATIONCOMPONENTDATA( INUPRODUCTMOTIVEID, INUFATHERCOMPTYPEID, INUCOMPONENTTYPEID, ONUPRODMOTIVECOMPID, ONUELEMENTCATEGORY, OSBTAGNAME, OSBACTIVE ) );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADHIERARCHYNODECOMPONENT( ISBFATHERINSTANCE IN VARCHAR2, IOSBNODEINSTANCE IN OUT VARCHAR2, INUPRODUCTMOTIVEID IN NUMBER, INUCOMPONENTIDPROD IN NUMBER, IBLCREATEINSTANCE IN BOOLEAN, IBLLOADCHILD IN BOOLEAN, IBLLOADALLCOMPONENT IN BOOLEAN, IBLLOADADDRESS IN BOOLEAN, IDTPRODUCTRETIREDATE IN DATE := NULL )
    IS
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.LoadHierarchyNodeComponent', 4 );
      LOADMOTCOMPBYPRODCOMP( ISBFATHERINSTANCE, IOSBNODEINSTANCE, INUPRODUCTMOTIVEID, INUCOMPONENTIDPROD, IBLCREATEINSTANCE, IBLLOADADDRESS, IDTPRODUCTRETIREDATE );
      IF IBLLOADCHILD THEN
         LOADPRODCOMPCHILDS( IOSBNODEINSTANCE, INUPRODUCTMOTIVEID, INUCOMPONENTIDPROD, IBLLOADADDRESS, IBLLOADALLCOMPONENT, IDTPRODUCTRETIREDATE );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CREATECOMPFROMPROD( INUPRODUCTMOTIVEID IN MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE, INUPRODUCTID IN MO_MOTIVE.PRODUCT_ID%TYPE, ISBMOTIVEINSTANCE IN GE_BOINSTANCECONTROL.STYSBNAME, IBLLOADCHILD IN BOOLEAN, IBLLOADALLCOMPONENT IN BOOLEAN, IBLLOADADDRESS IN BOOLEAN := TRUE )
    IS
      SBCOMPONENTINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      SBINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
      SBISACTIVEPRODUCT PS_PRODUCT_STATUS.IS_ACTIVE_PRODUCT%TYPE;
      CURFGETMAINCOMPONENTS CONSTANTS.TYREFCURSOR;
      RCGETMAINCOMPONENTS DAPR_COMPONENT.STYPR_COMPONENT;
      CURFGETCHILDCOMPONENTS CONSTANTS.TYREFCURSOR;
      NUCOMPONENTID PR_COMPONENT.COMPONENT_ID%TYPE;
      DTPRODUCTRETIREDATE DATE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.CreateCompFromProd [' || INUPRODUCTMOTIVEID || '][' || INUPRODUCTID || '][' || ISBMOTIVEINSTANCE || ']', 6 );
      IF IBLLOADALLCOMPONENT THEN
         DTPRODUCTRETIREDATE := PR_BCPRODUCT.FDTLASTPRODUCTRETIRE( INUPRODUCTID );
       ELSE
         DTPRODUCTRETIREDATE := NULL;
      END IF;
      CURFGETMAINCOMPONENTS := PR_BCPRODUCT.FRFGETMAINCOMPONENTS( INUPRODUCTID, NOT IBLLOADALLCOMPONENT );
      FETCH CURFGETMAINCOMPONENTS
         INTO RCGETMAINCOMPONENTS;
      WHILE CURFGETMAINCOMPONENTS%FOUND
       LOOP
         SBCOMPONENTINSTANCE := NULL;
         LOADHIERARCHYNODECOMPONENT( ISBMOTIVEINSTANCE, SBCOMPONENTINSTANCE, INUPRODUCTMOTIVEID, RCGETMAINCOMPONENTS.COMPONENT_ID, TRUE, IBLLOADCHILD, IBLLOADALLCOMPONENT, IBLLOADADDRESS, DTPRODUCTRETIREDATE );
         FETCH CURFGETMAINCOMPONENTS
            INTO RCGETMAINCOMPONENTS;
      END LOOP;
      CLOSE CURFGETMAINCOMPONENTS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFGETMAINCOMPONENTS );
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFGETCHILDCOMPONENTS );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFGETMAINCOMPONENTS );
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFGETCHILDCOMPONENTS );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXEALLATTEXPRESSIONS( INUEXPRESSIONTYPE IN NUMBER )
    IS
      RCINSTANCE GE_BOINSTANCECONTROL.TYRCINSTANCESTACK;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      IF ( GE_BOINSTANCECONTROL.FBLACCKEYINSTANCESTACK( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NUINDEX ) ) THEN
         GE_BOINSTANCECONTROL.GETINSTANCE( NUINDEX, RCINSTANCE );
         UT_TRACE.TRACE( 'Inicia MO_BUncompositionUtil.ExeAllAttExpressions. Instancia :[' || RCINSTANCE.SBINSTANCE || ']', 5 );
         NUINDEX := RCINSTANCE.NUFIRSTCHILDINSTANCE;
         WHILE NUINDEX IS NOT NULL
          LOOP
            GE_BOINSTANCECONTROL.GETINSTANCE( NUINDEX, RCINSTANCE );
            UT_TRACE.TRACE( 'Instancia Hija:[' || RCINSTANCE.SBINSTANCE || ']', 6 );
            GE_BOINSTANCECONTROL.EXEINSTANCEATTEXPRESSIONS( RCINSTANCE.SBINSTANCE, INUEXPRESSIONTYPE );
            NUINDEX := RCINSTANCE.NUNEXTBROTHERINSTANCE;
         END LOOP;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END EXEALLATTEXPRESSIONS;
   PROCEDURE SETISADDRESSMAIN( ISBINSTANCE IN VARCHAR2 )
    IS
      RCINSTANCE MO_BOCONFIGURATIONCACHE.STYINSTANCE;
      SBADDRESSTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBPRODUCTID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBCOMPONENTID GE_BOINSTANCECONTROL.STYSBVALUE;
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.SetIsAddressMain INICIO [' || ISBINSTANCE || ']', 5 );
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( ISBINSTANCE, TBHIERARCHY );
      IF TBHIERARCHY.COUNT = 0 THEN
         RETURN;
      END IF;
      NUINDEX := TBHIERARCHY.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
         IF TO_NUMBER( SBOBJECTTYPE ) IN ( MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT, MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT ) THEN
            MO_BOCONFIGURATIONCACHE.GETINSTANCERECORD( TO_NUMBER( SBOBJECTTYPE ), TO_NUMBER( SBOBJECTID ), RCINSTANCE );
            GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( TBHIERARCHY( NUINDEX ).SBINSTANCE, NUENTITY );
            WHILE NUENTITY IS NOT NULL
             LOOP
               GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
               IF RCENTITY.SBENTITY IN ( 'MO_ADDRESS', 'MO_ADDRESS_COMP' ) THEN
                  GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'ADDRESS_TYPE_ID', SBADDRESSTYPE );
                  IF TO_NUMBER( SBADDRESSTYPE ) = RCINSTANCE.MAIN_ADDRESS_TYPE THEN
                     GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'IS_ADDRESS_MAIN', GE_BOCONSTANTS.CSBYES );
                  END IF;
               END IF;
               GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
            END LOOP;
            GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
         END IF;
         NUINDEX := TBHIERARCHY.NEXT( NUINDEX );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE LOADOBJECTATTRIBUTES( ISBINSTANCE IN GE_BOINSTANCECONTROL.STYSBNAME, INUOBJECTTYPE IN NUMBER, INUOBJECTID IN NUMBER )
    IS
    BEGIN
      UT_TRACE.TRACE( 'Inicia mo_boUncompositionUtil.LoadObjectAttributes Tipo objeto [' || INUOBJECTTYPE || '] objeto[' || INUOBJECTID || ']', 5 );
      FOR RCOBJECTATTRIBUTES IN MO_BOCONFIGURATIONCACHE.CUOBJECTATTRIBUTES( INUOBJECTTYPE, INUOBJECTID )
       LOOP
         IF ( RCOBJECTATTRIBUTES.XML_PROCESS = GE_BOCONSTANTS.GETYES OR RCOBJECTATTRIBUTES.IN_GUI = GE_BOCONSTANTS.GETYES ) THEN
            MO_BOUNCOMPOSITIONUTIL.ADDCONFIGURATIONATTRIBUTE( ISBINSTANCE, NULL, RCOBJECTATTRIBUTES.ENTITY_NAME, RCOBJECTATTRIBUTES );
         END IF;
      END LOOP;
      UT_TRACE.TRACE( ' Finaliza mo_boUncompositionUtil.LoadObjectAttributes ', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDATECOMPANY
    IS
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBCOMPANYID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBPACKAGEID GE_BOINSTANCECONTROL.STYSBVALUE;
      TBGROUPWITHMOT GE_BOINSTANCECONTROL.TYTBSBNAME;
      NUDUMMYIDX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBCUSTCAREREQNUM GE_BOINSTANCECONTROL.STYSBVALUE;
      SBCONSBYCOMPANY GE_PARAMETER.VALUE%TYPE;
      NUCUSTCAREREQNUM MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE;
      NUINDX BINARY_INTEGER;
      NUNUMERADOR GE_NUMERATORS.NUMERATOR_ID%TYPE;
      SBFATHERINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.UpdateCompany INICIO', 5 );
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
      IF TBHIERARCHY.COUNT = 0 THEN
         RETURN;
      END IF;
      NUINDEX := TBHIERARCHY.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
         IF ( TO_NUMBER( SBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT ) THEN
            GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( TBHIERARCHY( NUINDEX ).SBINSTANCE, NUENTITY );
            WHILE NUENTITY IS NOT NULL
             LOOP
               GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
               IF ( RCENTITY.SBENTITY = MO_BOCONSTANTS.CSBMO_PACKAGES ) THEN
                  GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'COMPANY_ID', SBCOMPANYID );
                  IF ( SBCOMPANYID IS NULL ) THEN
                     SBCOMPANYID := TO_CHAR( GNUDEF_COMPANY_ID );
                     GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'COMPANY_ID', SBCOMPANYID );
                  END IF;
                  IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'CUST_CARE_REQUES_NUM', NUDUMMYIDX ) ) THEN
                     GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'CUST_CARE_REQUES_NUM', SBCUSTCAREREQNUM );
                  END IF;
                  IF ( SBCUSTCAREREQNUM IS NULL ) THEN
                     SBCONSBYCOMPANY := GE_BOPARAMETER.FSBGET( 'CONSECUT_BY_COMPANY' );
                     IF ( SBCONSBYCOMPANY = CSBYES ) THEN
                        NUNUMERADOR := GE_BOPARAMETER.FNUGET( 'NUMERADOR_SOLICITUD' );
                        NUCUSTCAREREQNUM := GE_BONUMERATOR.NEXTNUMERATOR( NUNUMERADOR );
                        SBCUSTCAREREQNUM := TO_CHAR( NUCUSTCAREREQNUM );
                     END IF;
                     IF ( SBCUSTCAREREQNUM IS NULL ) THEN
                        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'PACKAGE_ID', SBPACKAGEID );
                        SBCUSTCAREREQNUM := SBPACKAGEID;
                     END IF;
                     GE_BOINSTANCECONTROL.ADDATTRIBUTE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'CUST_CARE_REQUES_NUM', SBCUSTCAREREQNUM, TRUE );
                  END IF;
               END IF;
               GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
            END LOOP;
            GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
         END IF;
         IF ( TO_NUMBER( SBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT ) THEN
            IF ( SBCUSTCAREREQNUM IS NULL ) THEN
               GE_BOINSTANCECONTROL.GETFATHERINSTANCE( TBHIERARCHY( NUINDEX ).SBINSTANCE, SBFATHERINSTANCE );
               IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( SBFATHERINSTANCE, NULL, MO_BOCONSTANTS.CSBMO_PACKAGES, 'CUST_CARE_REQUES_NUM', NUDUMMYIDX ) ) THEN
                  GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( SBFATHERINSTANCE, NULL, MO_BOCONSTANTS.CSBMO_PACKAGES, 'CUST_CARE_REQUES_NUM', SBCUSTCAREREQNUM );
               END IF;
            END IF;
            IF ( GE_BOINSTANCECONTROL.FBLGETENTITYGROUP( TBHIERARCHY( NUINDEX ).SBINSTANCE, MO_BOCONSTANTS.CSBMO_MOTIVE, TBGROUPWITHMOT ) ) THEN
               FOR NUINDX IN TBGROUPWITHMOT.FIRST..TBGROUPWITHMOT.LAST
                LOOP
                  GE_BOINSTANCECONTROL.ADDATTRIBUTE( TBHIERARCHY( NUINDEX ).SBINSTANCE, TBGROUPWITHMOT( NUINDX ), MO_BOCONSTANTS.CSBMO_MOTIVE, 'CUST_CARE_REQUES_NUM', SBCUSTCAREREQNUM, TRUE );
               END LOOP;
            END IF;
         END IF;
         NUINDEX := TBHIERARCHY.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.UpdateCompany FIN', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDPACKAGEANS
    IS
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBANSID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBPACKAGEID GE_BOINSTANCECONTROL.STYSBVALUE;
      NUDUMMYIDX GE_BOINSTANCECONTROL.STYNUINDEX;
      RCPACKAGE DAMO_PACKAGES.STYMO_PACKAGES;
    BEGIN
      UT_TRACE.TRACE( 'MO_BOUncompositionUtil.UpdPackageANS', 15 );
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
      IF ( TBHIERARCHY.COUNT = 0 ) THEN
         RETURN;
      END IF;
      NUINDEX := TBHIERARCHY.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         IF ( TO_NUMBER( SBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT ) THEN
            GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( TBHIERARCHY( NUINDEX ).SBINSTANCE, NUENTITY );
            WHILE NUENTITY IS NOT NULL
             LOOP
               GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
               IF ( RCENTITY.SBENTITY = MO_BOCONSTANTS.CSBMO_PACKAGES ) THEN
                  IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'ANS_ID', NUDUMMYIDX ) ) THEN
                     GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'ANS_ID', SBANSID );
                  END IF;
                  IF ( SBANSID IS NULL ) THEN
                     GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'PACKAGE_ID', SBPACKAGEID );
                     RCPACKAGE := DAMO_PACKAGES.FRCGETRECORD( SBPACKAGEID );
                     MO_BOPACKAGES.UPDPACKAGEANS( RCPACKAGE );
                  END IF;
               END IF;
               GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
            END LOOP;
         END IF;
         NUINDEX := TBHIERARCHY.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'Fin MO_BOUncompositionUtil.UpdPackageANS', 15 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDPACKAGEANS;
   PROCEDURE PROCESSCAMPAIGN
    IS
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBCAMPAIGNID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBPACKAGEID GE_BOINSTANCECONTROL.STYSBVALUE;
      TBGROUPWITHMOT GE_BOINSTANCECONTROL.TYTBSBNAME;
      NUDUMMYIDX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBCUSTCAREREQNUM GE_BOINSTANCECONTROL.STYSBVALUE;
      SBCONSBYCOMPANY GE_PARAMETER.VALUE%TYPE;
      NUCUSTCAREREQNUM MO_PACKAGES.CUST_CARE_REQUES_NUM%TYPE;
      NUINDX BINARY_INTEGER;
      NUNUMERADOR GE_NUMERATORS.NUMERATOR_ID%TYPE;
      SBFATHERINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.ProcessCampaign INICIO', 5 );
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
      IF TBHIERARCHY.COUNT = 0 THEN
         RETURN;
      END IF;
      NUINDEX := TBHIERARCHY.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
         IF ( TO_NUMBER( SBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT ) THEN
            GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( TBHIERARCHY( NUINDEX ).SBINSTANCE, NUENTITY );
            WHILE NUENTITY IS NOT NULL
             LOOP
               GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
               IF ( RCENTITY.SBENTITY = MO_BOCONSTANTS.CSBMO_PACKAGES ) THEN
                  IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, RCENTITY.SBENTITY, 'PROJECT_ID', NUDUMMYIDX ) ) THEN
                     GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, RCENTITY.SBENTITY, 'PROJECT_ID', SBCAMPAIGNID );
                  END IF;
                  IF ( SBCAMPAIGNID IS NOT NULL ) THEN
                     GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'PROJECT_ID', SBCAMPAIGNID );
                  END IF;
               END IF;
               GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
            END LOOP;
            GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
         END IF;
         NUINDEX := TBHIERARCHY.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.ProcessCampaign FIN', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PROCESSCAMPAIGN;
   PROCEDURE REGISTERPETITION
    IS
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBPACKAGEID GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.RegisterPetition INICIO', 5 );
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
      IF TBHIERARCHY.COUNT = 0 THEN
         RETURN;
      END IF;
      NUINDEX := TBHIERARCHY.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
         IF ( TO_NUMBER( SBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT ) THEN
            GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( TBHIERARCHY( NUINDEX ).SBINSTANCE, NUENTITY );
            WHILE NUENTITY IS NOT NULL
             LOOP
               GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
               IF ( RCENTITY.SBENTITY = MO_BOCONSTANTS.CSBMO_PACKAGES ) THEN
                  GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'PACKAGE_ID', SBPACKAGEID );
                  CC_BOPETITIONMGR.REGISTERPETITION( SBPACKAGEID );
               END IF;
               GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
            END LOOP;
            GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
         END IF;
         NUINDEX := TBHIERARCHY.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.RegisterPetition FIN', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END REGISTERPETITION;
   PROCEDURE REGISTERBATCH
    IS
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBPACKAGEID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBPETITIONID GE_BOINSTANCECONTROL.STYSBVALUE;
      SBTAGNAME GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.RegisterBatch INICIO', 5 );
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
      IF TBHIERARCHY.COUNT = 0 THEN
         RETURN;
      END IF;
      NUINDEX := TBHIERARCHY.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
         IF ( TO_NUMBER( SBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT ) THEN
            GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( TBHIERARCHY( NUINDEX ).SBINSTANCE, NUENTITY );
            WHILE NUENTITY IS NOT NULL
             LOOP
               GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
               IF ( RCENTITY.SBENTITY = MO_BOCONSTANTS.CSBMO_PACKAGES ) THEN
                  GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'TAG_NAME', SBTAGNAME );
                  IF ( SBTAGNAME = PS_BOPACKAGETYPE.CSBTAGVENTA_FORMULARIO OR SBTAGNAME = PS_BOPACKAGETYPE.CSBTAGFROM_SALE ) THEN
                     GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'PACKAGE_ID', SBPACKAGEID );
                     GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, 'MO_PROCESS', 'VALUE_1', SBPETITIONID );
                     CC_BOPETITIONMGR.REGISTERBATCH( SBPACKAGEID, SBPETITIONID );
                  END IF;
               END IF;
               GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
            END LOOP;
            GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
         END IF;
         NUINDEX := TBHIERARCHY.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'mo_boUncompositionUtil.RegisterBatch FIN', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END REGISTERBATCH;
   PROCEDURE DELETEMIRRORENTITY( ISBINSTANCE IN VARCHAR2, ISBGROUP IN VARCHAR2, ISBENTITY IN VARCHAR2 )
    IS
      NUCURRENT GE_BOINSTANCECONTROL.STYNUINDEX;
      NUMIRRORINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      UT_TRACE.TRACE( ' Inicio mo_boUncompositionUtil.DeleteMirrorEntity [' || ISBINSTANCE || '][' || ISBGROUP || '][' || ISBENTITY || ']', 15 );
      IF TBMIRRORATTRIBUTE.COUNT != 0 THEN
         NUMIRRORINDEX := TBMIRRORATTRIBUTE.FIRST;
         WHILE NUMIRRORINDEX IS NOT NULL
          LOOP
            NUCURRENT := NUMIRRORINDEX;
            NUMIRRORINDEX := TBMIRRORATTRIBUTE.NEXT( NUMIRRORINDEX );
            UT_TRACE.TRACE( ' tbMirrorAttribute[' || NUCURRENT || ']', 15 );
            UT_TRACE.TRACE( ' tbMirrorAttribute(nuCurrent).sbInstance ' || TBMIRRORATTRIBUTE( NUCURRENT ).SBINSTANCE, 15 );
            UT_TRACE.TRACE( ' tbMirrorAttribute(nuCurrent).sbGroup ' || TBMIRRORATTRIBUTE( NUCURRENT ).SBGROUP, 15 );
            UT_TRACE.TRACE( ' tbMirrorAttribute(nuCurrent).sbEntity ' || TBMIRRORATTRIBUTE( NUCURRENT ).SBENTITY, 15 );
            IF ( TBMIRRORATTRIBUTE( NUCURRENT ).SBINSTANCE = ISBINSTANCE AND TBMIRRORATTRIBUTE( NUCURRENT ).SBGROUP = ISBGROUP AND TBMIRRORATTRIBUTE( NUCURRENT ).SBENTITY = ISBENTITY ) THEN
               UT_TRACE.TRACE( ' tbMirrorAttribute(nuCurrent).sbAttribute ' || TBMIRRORATTRIBUTE( NUCURRENT ).SBATTRIBUTE, 15 );
               TBMIRRORATTRIBUTE.DELETE( NUCURRENT );
            END IF;
         END LOOP;
      END IF;
      UT_TRACE.TRACE( ' Fin mo_boUncompositionUtil.DeleteMirrorEntity ', 15 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DELETEMIRRORENTITY;
   PROCEDURE GETPARENTCOMPS( OTBCOMPONENTID OUT NOCOPY MO_BOUNCOMPOSITIONUTIL.TYTBNUMBER, OTBPARENTCOMP OUT NOCOPY MO_BOUNCOMPOSITIONUTIL.TYTBNUMBER )
    IS
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      RCATTRIBUTE GE_BOINSTANCECONTROL.TYRCATTRIBUTESTACK;
      NUHIERARCHYINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      NUENTITYINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      NUATTRIBUTEINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      SBPRODMOTIVECOMPID VARCHAR2( 15 );
      SBCOMPONENTID VARCHAR2( 15 );
      SBFATHERCOMPONENT VARCHAR2( 15 );
    BEGIN
      UT_TRACE.TRACE( 'INICIO: mo_boUncompositionUtil.GetParentComps', 10 );
      OTBCOMPONENTID.DELETE;
      OTBPARENTCOMP.DELETE;
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
      NUHIERARCHYINDEX := TBHIERARCHY.FIRST;
      WHILE ( NUHIERARCHYINDEX IS NOT NULL )
       LOOP
         GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( TBHIERARCHY( NUHIERARCHYINDEX ).NUINSTANCE, NUENTITYINDEX );
         WHILE ( NUENTITYINDEX IS NOT NULL )
          LOOP
            GE_BOINSTANCECONTROL.GETENTITY( NUENTITYINDEX, RCENTITY );
            UT_TRACE.TRACE( 'Instancia[' || RCENTITY.SBINSTANCE || '] Grupo[' || RCENTITY.SBGROUP || '] Entidad[' || RCENTITY.SBENTITY || ']', 15 );
            IF ( RCENTITY.SBENTITY = 'MO_COMPONENT' ) THEN
               IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'PROD_MOTIVE_COMP_ID', NUATTRIBUTEINDEX ) ) THEN
                  GE_BOINSTANCECONTROL.GETATTRIBUTE( NUATTRIBUTEINDEX, RCATTRIBUTE );
                  SBPRODMOTIVECOMPID := RCATTRIBUTE.SBNEWVALUE;
                  UT_TRACE.TRACE( 'Atributo PROD_MOTIVE_COMP_ID[' || SBPRODMOTIVECOMPID || ']', 15 );
                ELSE
                  SBPRODMOTIVECOMPID := NULL;
               END IF;
               IF ( SBPRODMOTIVECOMPID IS NOT NULL AND DAPS_PROD_MOTIVE_COMP.FSBGETREQUIRES_CHILDREN( TO_NUMBER( SBPRODMOTIVECOMPID ) ) = 'Y' ) THEN
                  IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'COMPONENT_ID', NUATTRIBUTEINDEX ) ) THEN
                     GE_BOINSTANCECONTROL.GETATTRIBUTE( NUATTRIBUTEINDEX, RCATTRIBUTE );
                     SBCOMPONENTID := RCATTRIBUTE.SBNEWVALUE;
                     UT_TRACE.TRACE( 'Atributo COMPONENT_ID[' || SBCOMPONENTID || ']', 15 );
                   ELSE
                     SBCOMPONENTID := NULL;
                  END IF;
                  IF ( SBCOMPONENTID IS NOT NULL ) THEN
                     OTBCOMPONENTID( SBCOMPONENTID ) := NUENTITYINDEX;
                  END IF;
               END IF;
            END IF;
            IF ( RCENTITY.SBENTITY = 'MO_COMP_LINK' ) THEN
               IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'FATHER_COMPONENT_ID', NUATTRIBUTEINDEX ) ) THEN
                  GE_BOINSTANCECONTROL.GETATTRIBUTE( NUATTRIBUTEINDEX, RCATTRIBUTE );
                  SBFATHERCOMPONENT := RCATTRIBUTE.SBNEWVALUE;
                  UT_TRACE.TRACE( 'Atributo FATHER_COMPONENT_ID[' || SBFATHERCOMPONENT || ']', 15 );
                ELSE
                  SBFATHERCOMPONENT := NULL;
               END IF;
               IF ( SBFATHERCOMPONENT IS NOT NULL AND NOT OTBPARENTCOMP.EXISTS( SBFATHERCOMPONENT ) ) THEN
                  OTBPARENTCOMP( SBFATHERCOMPONENT ) := TO_NUMBER( SBFATHERCOMPONENT );
               END IF;
            END IF;
            GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITYINDEX );
         END LOOP;
         NUHIERARCHYINDEX := TBHIERARCHY.NEXT( NUHIERARCHYINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'FIN: mo_boUncompositionUtil.GetParentComps', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         UT_TRACE.TRACE( 'ERROR: mo_boUncompositionUtil.GetParentComps', 10 );
         RAISE;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'ERROR: mo_boUncompositionUtil.GetParentComps', 10 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETPARENTCOMPS;
   PROCEDURE VALIDATECHILDCOMPS
    IS
      TBCOMPONENTID MO_BOUNCOMPOSITIONUTIL.TYTBNUMBER;
      TBPARENTCOMP MO_BOUNCOMPOSITIONUTIL.TYTBNUMBER;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      RCATTRIBUTE GE_BOINSTANCECONTROL.TYRCATTRIBUTESTACK;
      NUATTRIBUTEINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
      NUCOMPINDEX MO_BOUNCOMPOSITIONUTIL.STYINDEX;
      SBCOMPONENTTYPE VARCHAR2( 4 );
      SBSERVICECLASS VARCHAR2( 4 );
      SBERRORMESSAGE VARCHAR2( 250 );
    BEGIN
      UT_TRACE.TRACE( 'INICIO: mo_boUncompositionUtil.ValidateChildComps', 10 );
      GETPARENTCOMPS( TBCOMPONENTID, TBPARENTCOMP );
      NUCOMPINDEX := TBCOMPONENTID.FIRST;
      WHILE ( NUCOMPINDEX IS NOT NULL )
       LOOP
         UT_TRACE.TRACE( 'Componente Requiere Hijo:[' || NUCOMPINDEX || ']', 15 );
         IF ( NOT TBPARENTCOMP.EXISTS( NUCOMPINDEX ) ) THEN
            SBERRORMESSAGE := '';
            GE_BOINSTANCECONTROL.GETENTITY( TBCOMPONENTID( NUCOMPINDEX ), RCENTITY );
            IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'COMPONENT_TYPE_ID', NUATTRIBUTEINDEX ) ) THEN
               GE_BOINSTANCECONTROL.GETATTRIBUTE( NUATTRIBUTEINDEX, RCATTRIBUTE );
               SBCOMPONENTTYPE := RCATTRIBUTE.SBNEWVALUE;
               UT_TRACE.TRACE( 'Atributo COMPONENT_TYPE_ID[' || SBCOMPONENTTYPE || ']', 15 );
               SBERRORMESSAGE := DAPS_COMPONENT_TYPE.FSBGETDESCRIPTION( TO_NUMBER( SBCOMPONENTTYPE ), 0 );
             ELSE
               SBCOMPONENTTYPE := NULL;
            END IF;
            IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, 'CLASS_SERVICE_ID', NUATTRIBUTEINDEX ) ) THEN
               GE_BOINSTANCECONTROL.GETATTRIBUTE( NUATTRIBUTEINDEX, RCATTRIBUTE );
               SBSERVICECLASS := RCATTRIBUTE.SBNEWVALUE;
               UT_TRACE.TRACE( 'Atributo CLASS_SERVICE_ID[' || SBSERVICECLASS || ']', 15 );
               IF ( SBSERVICECLASS IS NOT NULL ) THEN
                  SBERRORMESSAGE := SBERRORMESSAGE || ' - ' || DAPS_CLASS_SERVICE.FSBGETDESCRIPTION( TO_NUMBER( SBSERVICECLASS ), 0 );
               END IF;
             ELSE
               SBSERVICECLASS := NULL;
            END IF;
            ERRORS.SETERROR( MO_BOUNCOMPOSITIONCONSTANTS.CNUMSG_REQUIRE_CHILD, SBERRORMESSAGE );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         NUCOMPINDEX := TBCOMPONENTID.NEXT( NUCOMPINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'FIN: mo_boUncompositionUtil.ValidateChildComps', 10 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR OR LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         UT_TRACE.TRACE( 'ERROR: mo_boUncompositionUtil.ValidateChildComps', 10 );
         RAISE;
      WHEN OTHERS THEN
         UT_TRACE.TRACE( 'ERROR: mo_boUncompositionUtil.ValidateChildComps', 10 );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALIDATECHILDCOMPS;
   PROCEDURE REGISTERINITDATE
    IS
      NUENTITY GE_BOINSTANCECONTROL.STYNUINDEX;
      RCENTITY GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
      SBOBJECTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;
      SBOBJECTID GE_BOINSTANCECONTROL.STYSBVALUE;
      TBHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
      NUINDEX GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
      UT_TRACE.TRACE( 'INICIO mo_boUncompositionUtil.RegisterInitDate', 5 );
      GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
      IF TBHIERARCHY.COUNT = 0 THEN
         RETURN;
      END IF;
      NUINDEX := TBHIERARCHY.FIRST;
      WHILE NUINDEX IS NOT NULL
       LOOP
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, SBOBJECTTYPE );
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE( TBHIERARCHY( NUINDEX ).SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, SBOBJECTID );
         IF ( TO_NUMBER( SBOBJECTTYPE ) = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT ) THEN
            GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY( TBHIERARCHY( NUINDEX ).SBINSTANCE, NUENTITY );
            WHILE NUENTITY IS NOT NULL
             LOOP
               GE_BOINSTANCECONTROL.GETENTITY( NUENTITY, RCENTITY );
               IF ( RCENTITY.SBENTITY = MO_BOCONSTANTS.CSBMO_PACKAGES ) THEN
                  GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE( RCENTITY.SBINSTANCE, RCENTITY.SBGROUP, RCENTITY.SBENTITY, CSBINIT_REGISTER_DATE, TO_CHAR( UT_DATE.FDTSYSDATE, 'DD-MM-YYYY HH24:MI:SS' ) );
               END IF;
               GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY( NUENTITY );
            END LOOP;
            GE_BOINSTANCECONTROL.INSTANCEHIERARCHY( MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, TBHIERARCHY );
         END IF;
         NUINDEX := TBHIERARCHY.NEXT( NUINDEX );
      END LOOP;
      UT_TRACE.TRACE( 'FIN mo_boUncompositionUtil.RegisterInitDate', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END REGISTERINITDATE;
 BEGIN
   BLDELETEDATAINSTANCE := FALSE;
   NUUNCOMPATTRIBUTEMAP := GE_BOPARAMETER.FNUGET( 'UNCOMP_ATTR_MAP' );
   TBROLLBACKMIRRORINSTANCE.DELETE;
   TBROLLBACKMIRRORATTRIBUTE.DELETE;
   NUROLLBACKINSTANCESEQUENCE := NULL;
END MO_BOUNCOMPOSITIONUTIL;
/


