PACKAGE BODY GI_BOFrameWorkApplication IS

    CSBVERSION CONSTANT VARCHAR2(20) := 'SAO204148';

    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    FUNCTION GETNEXTVERSION
    (
        ISBVERSION          VARCHAR2,
        INUINCREMENTBY      NUMBER DEFAULT 1
    ) RETURN VARCHAR2
    IS
    BEGIN
      IF (ISBVERSION IS NULL OR UT_CONVERT.FSBIS_NUMBER(ISBVERSION) != 'Y' ) THEN
         RETURN 1;
      ELSE
        RETURN TO_CHAR(TO_NUMBER(ISBVERSION) + INUINCREMENTBY);
      END IF;
    END;

    FUNCTION GETEXECUTABLEBYNAME(ISBAPPLICATIONNAME IN SA_EXECUTABLE.NAME%TYPE)
    RETURN  DASA_EXECUTABLE.STYSA_EXECUTABLE
    IS
        RCEXECUTABLE  DASA_EXECUTABLE.STYSA_EXECUTABLE;
        RCNULLEXECUTABLE DASA_EXECUTABLE.STYSA_EXECUTABLE;
    BEGIN
        RCEXECUTABLE := SA_BOEXECUTABLE.GETEXECUTABLEBYNAME(ISBAPPLICATIONNAME);
        RETURN RCEXECUTABLE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RETURN  RCNULLEXECUTABLE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION  FNUGETGROUPINGAPPLICATION(INUAPPLICATIONTYPEID IN GI_CONFIG.CONFIG_TYPE_ID%TYPE)
    RETURN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE
    IS
    BEGIN
        IF (INUAPPLICATIONTYPEID = GI_BOFRAMEWORKCONSTANTS.CNUPRESENTACIONFRAMEWORK) THEN
            RETURN  GI_BOFRAMEWORKCONSTANTS.CNUPREFWEXECUTABLE;
        ELSIF (INUAPPLICATIONTYPEID = GI_BOFRAMEWORKCONSTANTS.CNUPROCESSFRAMEWORK) THEN
            RETURN  GI_BOFRAMEWORKCONSTANTS.CNUPROFWEXECUTABLE;
        ELSIF (INUAPPLICATIONTYPEID = GI_BOFRAMEWORKCONSTANTS.CNUMASTERDETALFRAMEWORK) THEN
            RETURN GI_BOFRAMEWORKCONSTANTS.CNUMADFWEXECUTABLE;
        END IF;
        RETURN NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE CREATEEXECUTABLE
    (
        IONUEXECUTABLEID        IN OUT SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        IOSBEXECUTABLENAME      IN OUT SA_EXECUTABLE.NAME%TYPE,
        ISBDESCRIPTION          IN SA_EXECUTABLE.DESCRIPTION%TYPE,
        INUMODULEID             IN SA_EXECUTABLE.MODULE_ID%TYPE,
        INUEXECUTABLETYPE       IN SA_EXECUTABLE.EXECUTABLE_TYPE_ID%TYPE,
        INUPARENTEXECUTABLEID   IN SA_EXECUTABLE.PARENT_EXECUTABLE_ID%TYPE,
        ISBWITHOUTRESTRPOLICY   IN SA_EXECUTABLE.WITHOUT_RESTR_POLICY%TYPE,
        ISBPATHFILEHELP         IN SA_EXECUTABLE.PATH_FILE_HELP%TYPE DEFAULT '',
        ISBDIRECTEXECUTION      IN SA_EXECUTABLE.DIRECT_EXECUTION%TYPE DEFAULT 'Y'
    )
    IS
	RCEXECUTABLE   DASA_EXECUTABLE.STYSA_EXECUTABLE;
	RCROLEEXECUTABLES DASA_ROLE_EXECUTABLES.STYSA_ROLE_EXECUTABLES;
    BEGIN
        
        SA_BOEXECUTABLE.CHKEXECALREADYEXISTSBYNAME(IOSBEXECUTABLENAME);
        
        RCEXECUTABLE.DESCRIPTION:=ISBDESCRIPTION;
        RCEXECUTABLE.EXEC_OPER_TYPE_ID:=2;
        RCEXECUTABLE.EXECUTABLE_ID:=SA_BOEXECUTABLE.GETNEXTID;
        RCEXECUTABLE.EXECUTABLE_TYPE_ID:= INUEXECUTABLETYPE;
        RCEXECUTABLE.LAST_RECORD_ALLOWED:='N';
        RCEXECUTABLE.MODULE_ID:=INUMODULEID;
        RCEXECUTABLE.NAME := NVL(IOSBEXECUTABLENAME,'MENU_OBJECT_'||TO_CHAR(RCEXECUTABLE.EXECUTABLE_ID));
        RCEXECUTABLE.PARENT_EXECUTABLE_ID:=INUPARENTEXECUTABLEID;
        RCEXECUTABLE.PATH:=NULL;
        RCEXECUTABLE.PATH_FILE_HELP:=ISBPATHFILEHELP;
        RCEXECUTABLE.SUBSYSTEM_ID:=1;
        RCEXECUTABLE.VERSION:='1.0';
        RCEXECUTABLE.WITHOUT_RESTR_POLICY:= ISBWITHOUTRESTRPOLICY;
        RCEXECUTABLE.DIRECT_EXECUTION:=ISBDIRECTEXECUTION;
        DASA_EXECUTABLE.INSRECORD(RCEXECUTABLE);
        IONUEXECUTABLEID := RCEXECUTABLE.EXECUTABLE_ID;
        RCROLEEXECUTABLES.ROLE_ID :=1;
        RCROLEEXECUTABLES.EXECUTABLE_ID := IONUEXECUTABLEID;
        IF (NOT DASA_ROLE_EXECUTABLES.FBLEXIST(RCROLEEXECUTABLES.ROLE_ID, RCEXECUTABLE.EXECUTABLE_ID)) THEN
            DASA_ROLE_EXECUTABLES.INSRECORD(RCROLEEXECUTABLES);
        END IF;
        IOSBEXECUTABLENAME := RCEXECUTABLE.NAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE CREATEEXECUTABLEWITHNAMEPLUSID
    (
        IONUEXECUTABLEID        IN OUT SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        IOSBEXECUTABLENAME       IN OUT SA_EXECUTABLE.NAME%TYPE,
        ISBDESCRIPTION          IN SA_EXECUTABLE.DESCRIPTION%TYPE,
        INUMODULEID             IN SA_EXECUTABLE.MODULE_ID%TYPE,
        INUEXECUTABLETYPE       IN SA_EXECUTABLE.EXECUTABLE_TYPE_ID%TYPE,
        INUPARENTEXECUTABLEID   IN SA_EXECUTABLE.PARENT_EXECUTABLE_ID%TYPE,
        ISBWITHOUTRESTRPOLICY   IN SA_EXECUTABLE.WITHOUT_RESTR_POLICY%TYPE,
        ISBPATHFILEHELP         IN SA_EXECUTABLE.PATH_FILE_HELP%TYPE DEFAULT '',
        ISBDIRECTEXECUTION      IN SA_EXECUTABLE.DIRECT_EXECUTION%TYPE DEFAULT 'Y'
    )
    IS
	RCEXECUTABLE   DASA_EXECUTABLE.STYSA_EXECUTABLE;
	RCROLEEXECUTABLES DASA_ROLE_EXECUTABLES.STYSA_ROLE_EXECUTABLES;
    BEGIN

        
        RCEXECUTABLE.DESCRIPTION:=ISBDESCRIPTION;
        RCEXECUTABLE.EXEC_OPER_TYPE_ID:=2;
        RCEXECUTABLE.EXECUTABLE_ID:=SA_BOEXECUTABLE.GETNEXTID;
        
        
        SA_BOEXECUTABLE.CHKEXECALREADYEXISTSBYNAME(IOSBEXECUTABLENAME || TO_CHAR(RCEXECUTABLE.EXECUTABLE_ID));
        
        RCEXECUTABLE.EXECUTABLE_TYPE_ID:= INUEXECUTABLETYPE;
        RCEXECUTABLE.LAST_RECORD_ALLOWED:='N';
        RCEXECUTABLE.MODULE_ID:=INUMODULEID;
        RCEXECUTABLE.NAME := IOSBEXECUTABLENAME || TO_CHAR(RCEXECUTABLE.EXECUTABLE_ID);
        RCEXECUTABLE.PARENT_EXECUTABLE_ID:=INUPARENTEXECUTABLEID;
        RCEXECUTABLE.PATH:=NULL;
        RCEXECUTABLE.PATH_FILE_HELP:=ISBPATHFILEHELP;
        RCEXECUTABLE.SUBSYSTEM_ID:=1;
        RCEXECUTABLE.VERSION:='1.0';
        RCEXECUTABLE.WITHOUT_RESTR_POLICY:= ISBWITHOUTRESTRPOLICY;
        RCEXECUTABLE.DIRECT_EXECUTION:=ISBDIRECTEXECUTION;
        DASA_EXECUTABLE.INSRECORD(RCEXECUTABLE);
        IONUEXECUTABLEID := RCEXECUTABLE.EXECUTABLE_ID;
        RCROLEEXECUTABLES.ROLE_ID :=1;
        RCROLEEXECUTABLES.EXECUTABLE_ID := IONUEXECUTABLEID;
        IF (NOT DASA_ROLE_EXECUTABLES.FBLEXIST(RCROLEEXECUTABLES.ROLE_ID, RCEXECUTABLE.EXECUTABLE_ID)) THEN
            DASA_ROLE_EXECUTABLES.INSRECORD(RCROLEEXECUTABLES);
        END IF;
        IOSBEXECUTABLENAME := RCEXECUTABLE.NAME;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
























	PROCEDURE CREATEAPPLICATION
    (
        IONUEXECUTABLEID        IN OUT SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ISBAPPLICATIONNAME      IN SA_EXECUTABLE.NAME%TYPE,
        ISBDESCRIPTION          IN SA_EXECUTABLE.DESCRIPTION%TYPE,
        INUMODULEID             IN SA_EXECUTABLE.MODULE_ID%TYPE,
        INUAPLICATIONTYPEID     IN GI_CONFIG_TYPE.CONFIG_TYPE_ID%TYPE DEFAULT GI_BOFRAMEWORKCONSTANTS.CNUPRESENTACIONFRAMEWORK,
        ISBWITHOUTRESTRPOLICY   IN SA_EXECUTABLE.WITHOUT_RESTR_POLICY%TYPE DEFAULT 'N',
        ISBPATHFILEHELP         IN SA_EXECUTABLE.PATH_FILE_HELP%TYPE DEFAULT '',
        ISBDIRECTEXECUTION      IN SA_EXECUTABLE.DIRECT_EXECUTION%TYPE DEFAULT 'Y'
    )
	IS
	RCGI_CONFIG    DAGI_CONFIG. STYGI_CONFIG;
	NUEXECUTABLEID SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
	SBAPPLICATIONNAME SA_EXECUTABLE.NAME%TYPE := ISBAPPLICATIONNAME;
    BEGIN
       CREATEEXECUTABLE
       (
            NUEXECUTABLEID,
            SBAPPLICATIONNAME,
            ISBDESCRIPTION,
            INUMODULEID,
            GI_BOFRAMEWORKCONSTANTS.CNUGROUPEDAPPLICATIONTYPE,
            FNUGETGROUPINGAPPLICATION(INUAPLICATIONTYPEID),
            ISBWITHOUTRESTRPOLICY,
            ISBPATHFILEHELP,
            ISBDIRECTEXECUTION
       );
        
        
        IF (
              INUAPLICATIONTYPEID=GI_BOFRAMEWORKCONSTANTS.CNUPRESENTACIONFRAMEWORK OR
              INUAPLICATIONTYPEID=GI_BOFRAMEWORKCONSTANTS.CNUPROCESSFRAMEWORK
            ) THEN
            
            RCGI_CONFIG.CONFIG_ID := GI_BOSEQUENCES.FNUGETNEXTCONFIGID;
            RCGI_CONFIG.CONFIG_TYPE_ID := INUAPLICATIONTYPEID;
            RCGI_CONFIG.ENTITY_ROOT_ID := GI_BOFRAMEWORKCONSTANTS.CNUENTITYEXECUTABLE;
            RCGI_CONFIG.EXTERNAL_ROOT_ID := NUEXECUTABLEID;
            RCGI_CONFIG.EXTERNAL_ROOT_TYPE := GI_BOFRAMEWORKCONSTANTS.CSBFORM_TYPE;
            DAGI_CONFIG.INSRECORD(RCGI_CONFIG);
        END IF;
        IONUEXECUTABLEID := NUEXECUTABLEID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE VALAPPLICATIONROLE(INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE)
    IS
    CURSOR CUAPPLICATIONROLE(INUEXECUTABLEID SA_EXECUTABLE.EXECUTABLE_ID%TYPE)
    IS
    SELECT 'x'
    FROM SA_ROLE_EXECUTABLES
    WHERE EXECUTABLE_ID = INUEXECUTABLEID
    AND ROWNUM <=1;
    SBDUMMY VARCHAR2(1);
    BEGIN
        OPEN CUAPPLICATIONROLE(INUEXECUTABLEID);
        FETCH  CUAPPLICATIONROLE INTO  SBDUMMY;
        CLOSE CUAPPLICATIONROLE;
        IF (SBDUMMY IS NOT NULL) THEN
            
           GE_BOERRORS.SETERRORCODEARGUMENT(112342,DASA_EXECUTABLE.FSBGETDESCRIPTION(INUEXECUTABLEID)||'|'||DASA_EXECUTABLE.FSBGETNAME(INUEXECUTABLEID));
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE VALAPPLICATIONMENU(INUEXECUTABLEID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE)
    IS
    CURSOR CUAPPLICATIONMENU(INUEXECUTABLEID SA_EXECUTABLE.EXECUTABLE_ID%TYPE)
    IS
    SELECT 'x'
    FROM SA_MENU_OPTION
    WHERE EXECUTABLE_ID = INUEXECUTABLEID
    AND ROWNUM <=1;
    SBDUMMY VARCHAR2(1);
    BEGIN
        OPEN CUAPPLICATIONMENU(INUEXECUTABLEID);
        FETCH CUAPPLICATIONMENU INTO  SBDUMMY;
        CLOSE CUAPPLICATIONMENU;
        IF (SBDUMMY IS NOT NULL) THEN
            
           GE_BOERRORS.SETERRORCODEARGUMENT
           (
                112343,
                DASA_EXECUTABLE.FSBGETDESCRIPTION(INUEXECUTABLEID)||'|'||DASA_EXECUTABLE.FSBGETNAME(INUEXECUTABLEID)
           );
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




















	PROCEDURE REMOVEAPPLICATION
    (
        INUAPPLICATIONID   IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE
    )
    IS
    NUCONFIGID GI_CONFIG.CONFIG_ID%TYPE;
    SBAPPLICATIONNAME SA_EXECUTABLE.NAME%TYPE;
    BEGIN
       IF (INUAPPLICATIONID IS NOT NULL) THEN
       
            SBAPPLICATIONNAME := DASA_EXECUTABLE.FSBGETNAME(INUAPPLICATIONID);
            
            
            GI_BOFRAMEWORKAPPLICATION.NOTCANMODIFYAPPLICATION(SBAPPLICATIONNAME);

            
            VALAPPLICATIONROLE(INUAPPLICATIONID);

            
            VALAPPLICATIONMENU(INUAPPLICATIONID);

            
            SA_BOEXECUTABLESYNON.DELEXECUTABLESYNONBYID(INUAPPLICATIONID);

            
            GI_BOFRAMEWORKQUERYNODE.REMOVEQUERYNODESFROMAPP(INUAPPLICATIONID);

            
            GI_BOFRAMEWORKMENU.REMOVEMENUSFROMAPP(INUAPPLICATIONID);

            
            GI_BOFRAMEWORKTOOLBAR.REMOVETOOLBARFROMAPP(INUAPPLICATIONID);

            
            NUCONFIGID       := GI_BOCONFIG.FNUGETCONFIG
            (
                GI_BOFRAMEWORKCONSTANTS.CNUENTITYEXECUTABLE,
                INUAPPLICATIONID,
                GI_BOFRAMEWORKCONSTANTS.CNUPRESENTACIONFRAMEWORK
            );

            
            IF(NUCONFIGID IS NOT NULL) THEN
                DAGI_CONFIG.DELRECORD(NUCONFIGID);
            END IF;

            
            IF (DASA_ROLE_EXECUTABLES.FBLEXIST(1, INUAPPLICATIONID)) THEN
                DASA_ROLE_EXECUTABLES.DELRECORD(1,INUAPPLICATIONID) ;
            END IF;

            
            GI_BOFRAMEWORKUSERCONFIG.DELETEUSERCONFIGURATION(SBAPPLICATIONNAME);
            
            
            DASA_EXECUTABLE.DELRECORD(INUAPPLICATIONID);
            
            
            DELCUSTOMERAPPLICATION(SBAPPLICATIONNAME);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
























    PROCEDURE UPDATEAPPLICATION
    (
        ISBAPPLICATIONNAME      IN SA_EXECUTABLE.NAME%TYPE,
        ISBDESCRIPTION          IN SA_EXECUTABLE.DESCRIPTION%TYPE,
        INUMODULEID             IN SA_EXECUTABLE.MODULE_ID%TYPE,
        INUAPLICATIONTYPEID     IN GI_CONFIG_TYPE.CONFIG_TYPE_ID%TYPE DEFAULT GI_BOFRAMEWORKCONSTANTS.CNUPRESENTACIONFRAMEWORK,
        ISBWITHOUTRESTRPOLICY   IN SA_EXECUTABLE.WITHOUT_RESTR_POLICY%TYPE DEFAULT 'N',
        ISBPATHFILEHELP         IN SA_EXECUTABLE.PATH_FILE_HELP%TYPE DEFAULT '',
        ISBDIRECTEXECUTION      IN SA_EXECUTABLE.DIRECT_EXECUTION%TYPE DEFAULT 'Y',
        IRCEXECUTABLEROW        IN OUT NOCOPY DASA_EXECUTABLE.STYSA_EXECUTABLE
    ) IS
    BEGIN
            
        IF (ISBAPPLICATIONNAME!=IRCEXECUTABLEROW.NAME) THEN
            SA_BOEXECUTABLE.CHKEXECALREADYEXISTSBYNAME(ISBAPPLICATIONNAME);
        END IF;
        IRCEXECUTABLEROW.NAME := ISBAPPLICATIONNAME;
        IRCEXECUTABLEROW.DESCRIPTION:= ISBDESCRIPTION;
        IRCEXECUTABLEROW.MODULE_ID:=INUMODULEID;
        IRCEXECUTABLEROW.WITHOUT_RESTR_POLICY := ISBWITHOUTRESTRPOLICY;
        IRCEXECUTABLEROW.VERSION := GETNEXTVERSION(IRCEXECUTABLEROW.VERSION);
        IRCEXECUTABLEROW.PATH_FILE_HELP := ISBPATHFILEHELP;
        IRCEXECUTABLEROW.DIRECT_EXECUTION := ISBDIRECTEXECUTION;
        SA_BOEXECUTABLE.UPDATEEXECUTABLE(IRCEXECUTABLEROW);

        
        UPDATE SA_MENU_OPTION SET DESCRIPTION = ISBDESCRIPTION,
                                  NAME = ISBAPPLICATIONNAME
        WHERE EXECUTABLE_ID = IRCEXECUTABLEROW.EXECUTABLE_ID;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


























    PROCEDURE ADDAPPLICATION
    (
        IONUEXECUTABLEID        IN OUT SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ISBAPPLICATIONNAME      IN SA_EXECUTABLE.NAME%TYPE,
        ISBDESCRIPTION          IN SA_EXECUTABLE.DESCRIPTION%TYPE,
        INUMODULEID             IN SA_EXECUTABLE.MODULE_ID%TYPE,
        INUAPLICATIONTYPEID     IN GI_CONFIG_TYPE.CONFIG_TYPE_ID%TYPE DEFAULT GI_BOFRAMEWORKCONSTANTS.CNUPRESENTACIONFRAMEWORK,
        ISBWITHOUTRESTRPOLICY   IN SA_EXECUTABLE.WITHOUT_RESTR_POLICY%TYPE DEFAULT 'N',
        ISBPATHFILEHELP         IN SA_EXECUTABLE.PATH_FILE_HELP%TYPE DEFAULT '',
        ISBDIRECTEXECUTION      IN SA_EXECUTABLE.DIRECT_EXECUTION%TYPE DEFAULT 'Y'
    ) IS
        RCEXECUTABLEROW DASA_EXECUTABLE.STYSA_EXECUTABLE;
        SBPREVIOUSAPPLICATION SA_EXECUTABLE.NAME%TYPE;
    BEGIN
    
        IF (IONUEXECUTABLEID IS NULL) THEN
            CREATEAPPLICATION
            (
                IONUEXECUTABLEID,
                ISBAPPLICATIONNAME,
                ISBDESCRIPTION,
                INUMODULEID,
                INUAPLICATIONTYPEID,
                ISBWITHOUTRESTRPOLICY,
                ISBPATHFILEHELP,
                ISBDIRECTEXECUTION
            );
        ELSE
            DASA_EXECUTABLE.LOCKBYPK(IONUEXECUTABLEID, RCEXECUTABLEROW);
            SBPREVIOUSAPPLICATION :=  RCEXECUTABLEROW.NAME;
            NOTCANMODIFYAPPLICATION(SBPREVIOUSAPPLICATION);
            DELCUSTOMERAPPLICATION(SBPREVIOUSAPPLICATION);
            UPDATEAPPLICATION
            (
                ISBAPPLICATIONNAME,
                ISBDESCRIPTION,
                INUMODULEID,
                INUAPLICATIONTYPEID,
                ISBWITHOUTRESTRPOLICY,
                ISBPATHFILEHELP,
                ISBDIRECTEXECUTION,
                RCEXECUTABLEROW
            );
            IF SBPREVIOUSAPPLICATION <> ISBAPPLICATIONNAME THEN
                UPDATE SA_TAB SET APLICA_EXECUTABLE= ISBAPPLICATIONNAME
                WHERE APLICA_EXECUTABLE=SBPREVIOUSAPPLICATION;
            END IF;
        END IF;
        ADDCUSTOMERAPPLICATION(ISBAPPLICATIONNAME);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
























    PROCEDURE GETAPPLICATIONS
    (
        INUMODULEID IN SA_EXECUTABLE.MODULE_ID%TYPE,
        INUAPPLICATIONTYPEID    IN GI_COMPOSITION.CONFIG_TYPE_ID%TYPE,
        OCULISTOFAPPLICATIONS OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OCULISTOFAPPLICATIONS := GI_BCFRAMEWORKAPPLICATION.FRFAPPLICATIONS
        (
            INUMODULEID,
            INUAPPLICATIONTYPEID
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
    
    
    PROCEDURE GETAPPLICATIONSFROMQUERYNODE
    (
        INUQUERYNODEID          IN GE_ENTITY.ENTITY_ID%TYPE,
        OCULISTOFAPPLICATIONS   OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBENTITYNAME GE_ENTITY.NAME_%TYPE;
    BEGIN
        SBENTITYNAME := DAGE_ENTITY.FSBGETNAME_(INUQUERYNODEID);
        OCULISTOFAPPLICATIONS := GI_BCFRAMEWORKAPPLICATION.FRFAPPLICATIONFROMQUERYNODE
        (
            SBENTITYNAME
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    PROCEDURE GETAPPLICATIONPATH
    (
        INUAPPLICATIONID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        OSBPATH          OUT GE_MODULE.PATH_MODULE%TYPE
    )
    IS

        CURSOR CUPATH
        (
            NUAPPLICATIONID SA_EXECUTABLE.EXECUTABLE_ID%TYPE
        )
        IS
            SELECT GE_MODULE.PATH_MODULE ||'\'||
                   SA_EXECUTABLE_TYPE.PATH ||'\'||
                   SA_EXECUTABLE.NAME||'\'||
                   SA_EXECUTABLE.NAME ||'.'||
                   SA_EXECUTABLE_TYPE.EXTENSION APPLICATION_PATH
              FROM SA_EXECUTABLE,
                   GE_MODULE,
                   SA_EXECUTABLE_TYPE
             WHERE GE_MODULE.MODULE_ID = SA_EXECUTABLE.MODULE_ID
               AND SA_EXECUTABLE_TYPE.EXECUTABLE_TYPE_ID = SA_EXECUTABLE.EXECUTABLE_TYPE_ID
               AND SA_EXECUTABLE.EXECUTABLE_ID = NUAPPLICATIONID;

    BEGIN
        OSBPATH := NULL;

        FOR RCPATH IN CUPATH (INUAPPLICATIONID) LOOP
            OSBPATH := RCPATH.APPLICATION_PATH;
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    

    PROCEDURE GETAPPLICATIONPATH
    (
        INUAPPLICATIONID IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        OSBPATH          OUT GE_MODULE.PATH_MODULE%TYPE,
        OSBNAME          OUT SA_EXECUTABLE.NAME%TYPE,
        OSBDESCRIPTION   OUT SA_EXECUTABLE.DESCRIPTION%TYPE
    )
    IS
    BEGIN
        DASA_EXECUTABLE.ACCKEY (INUAPPLICATIONID);

        OSBNAME :=  DASA_EXECUTABLE.FSBGETNAME (INUAPPLICATIONID);
        OSBDESCRIPTION := DASA_EXECUTABLE.FSBGETDESCRIPTION (INUAPPLICATIONID);

        IF (DASA_EXECUTABLE.FNUGETEXECUTABLE_TYPE_ID (INUAPPLICATIONID) != GI_BOFRAMEWORKCONSTANTS.CNUGROUPEDAPPLICATIONTYPE) THEN
            GETAPPLICATIONPATH (INUAPPLICATIONID, OSBPATH);
        ELSE
            GETAPPLICATIONPATH (DASA_EXECUTABLE.FNUGETPARENT_EXECUTABLE_ID (INUAPPLICATIONID), OSBPATH);
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    PROCEDURE GETAPPLICATIONMODULE
    (
        INUAPPLICATIONID IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        OSBMODULE        OUT GE_MODULE.DESCRIPTION%TYPE
    )
    IS
    NUMODULEID GE_MODULE.MODULE_ID%TYPE;
    BEGIN
        NUMODULEID := DASA_EXECUTABLE.FNUGETMODULE_ID(INUAPPLICATIONID);
        OSBMODULE := DAGE_MODULE.FSBGETDESCRIPTION(NUMODULEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    PROCEDURE GETAPPLICATIONBYNAME
    (
        ISBAPPLICATIONNAME          IN SA_EXECUTABLE.NAME%TYPE,
        ONUAPPLICATIONID            OUT SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        OSBAPPLICATIONDESCRIPTION   OUT SA_EXECUTABLE.DESCRIPTION%TYPE
    )
    IS
    RCEXECUTABLE  DASA_EXECUTABLE.STYSA_EXECUTABLE;
    BEGIN
       RCEXECUTABLE := SA_BOEXECUTABLE.GETEXECUTABLEBYNAME(ISBAPPLICATIONNAME);
       ONUAPPLICATIONID := RCEXECUTABLE.EXECUTABLE_ID;
       OSBAPPLICATIONDESCRIPTION := RCEXECUTABLE.DESCRIPTION;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FSBISPRODUCTIONENVIROMENT  RETURN VARCHAR2 IS
    BEGIN
        RETURN GE_BOCUSTOMERCONFIG.FSBISPRODUCTIONENVIROMENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION FSBCANMODIFYAPPLICATION(
       ISBAPPLICATIONNAME  IN SA_EXECUTABLE.NAME%TYPE
    )
    RETURN VARCHAR2 IS
    BEGIN
        RETURN GE_BOCUSTOMERCONFIG.FSBCANMODIFYREGISTER(ISBAPPLICATIONNAME);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE ADDCUSTOMERAPPLICATION(
        ISBAPPLICATIONNAME  IN SA_EXECUTABLE.NAME%TYPE
    )
    IS
    BEGIN
        GE_BOCUSTOMERCONFIG.ADDCUSTOMERCONFIG(ISBAPPLICATIONNAME);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE DELCUSTOMERAPPLICATION(
        ISBAPPLICATIONNAME  IN SA_EXECUTABLE.NAME%TYPE
    )
    IS
    BEGIN
        GE_BOCUSTOMERCONFIG.DELCUSTOMERCONFIG(ISBAPPLICATIONNAME);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE NOTCANMODIFYAPPLICATION(
       ISBAPPLICATIONNAME  IN SA_EXECUTABLE.NAME%TYPE
    )
    IS
    BEGIN
        GE_BOCUSTOMERCONFIG.NOTCANMODIFYREGISTER(ISBAPPLICATIONNAME);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    FUNCTION FSBISCUSTOMERAPPLICATION(
       ISBAPPLICATIONNAME  IN SA_EXECUTABLE.NAME%TYPE
    ) RETURN VARCHAR2
    IS
    BEGIN
        RETURN GE_BOCUSTOMERCONFIG.FSBISCUSTOMERREGISTER(ISBAPPLICATIONNAME);
    END;
    PROCEDURE GETAPPLICATIONPROPERTIES
    (
        INUAPPLICATIONID            IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        OSBAPPLICATIONNAME          OUT SA_EXECUTABLE.NAME%TYPE,
        OSBAPPLICATIONDESCRIPTION   OUT SA_EXECUTABLE.DESCRIPTION%TYPE,
        OSBAPPLICATIONVERSION       OUT SA_EXECUTABLE.VERSION%TYPE,
        OSBMODULE                   OUT GE_MODULE.DESCRIPTION%TYPE
    )
    IS
    BEGIN
        OSBAPPLICATIONNAME := DASA_EXECUTABLE.FSBGETNAME(INUAPPLICATIONID);
        OSBAPPLICATIONDESCRIPTION := DASA_EXECUTABLE.FSBGETDESCRIPTION(INUAPPLICATIONID);
        OSBAPPLICATIONVERSION :=  DASA_EXECUTABLE.FSBGETVERSION(INUAPPLICATIONID);
        GETAPPLICATIONMODULE(INUAPPLICATIONID, OSBMODULE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE UPDATEEXECUTABLEVERSION
    (
        ISBEXECUTABLENAME           IN SA_EXECUTABLE.NAME%TYPE,
        INUINCREMENTBY              IN NUMBER DEFAULT 1
    )
    IS
        NUEXECUTABLEID          SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
        RCEXECUTABLE            DASA_EXECUTABLE.STYSA_EXECUTABLE;
        SBNEWVERSION            SA_EXECUTABLE.VERSION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia GI_BOFrameWorkApplication.UpdateExecutableVersion', 2);
        UT_TRACE.TRACE('isbExecutableName [' || ISBEXECUTABLENAME || ']', 3);
        UT_TRACE.TRACE('inuIncrementBy    [' || INUINCREMENTBY || ']', 3);
        
        IF (SA_BOEXECUTABLE.EXECUTAEXISTINGBYNAME(ISBEXECUTABLENAME)) THEN
            NUEXECUTABLEID := SA_BOEXECUTABLE.FNUGETEXECUTABLEIDBYNAME(ISBEXECUTABLENAME, FALSE);
            IF (NUEXECUTABLEID IS NOT NULL) THEN
                RCEXECUTABLE := DASA_EXECUTABLE.FRCGETRECORD(NUEXECUTABLEID);
                UT_TRACE.TRACE('rcExecutable.version [' || RCEXECUTABLE.VERSION || ']', 3);
                SBNEWVERSION := GETNEXTVERSION(RCEXECUTABLE.VERSION, INUINCREMENTBY);
                RCEXECUTABLE.VERSION := SBNEWVERSION;
                UT_TRACE.TRACE('sbNewVersion [' || SBNEWVERSION || ']', 3);
                DASA_EXECUTABLE.UPDRECORD(RCEXECUTABLE);
            END IF;
        END IF;
        UT_TRACE.TRACE('Finaliza GI_BOFrameWorkApplication.UpdateExecutableVersion', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE UPDATEPATHFILEHELP
    (
        INUEXECUTABLEID             IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ISBPATHFILEHELP             IN SA_EXECUTABLE.PATH_FILE_HELP%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia GI_BOFrameWorkApplication.UpdatePathFileHelp', 2);
        UT_TRACE.TRACE('inuExecutableId [' || INUEXECUTABLEID || ']', 3);
        UT_TRACE.TRACE('isbPathFileHelp [' || ISBPATHFILEHELP || ']', 3);

        DASA_EXECUTABLE.UPDPATH_FILE_HELP(INUEXECUTABLEID, ISBPATHFILEHELP);
        
        UT_TRACE.TRACE('Finaliza GI_BOFrameWorkApplication.UpdatePathFileHelp', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE UPDATEDIRECTEXECUTION
    (
        INUEXECUTABLEID             IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ISBDIRECTEXECUTION          IN SA_EXECUTABLE.DIRECT_EXECUTION%TYPE
    )
    IS
        RCSAEXECUTABLE  DASA_EXECUTABLE.STYSA_EXECUTABLE;
        SBVERSION       SA_EXECUTABLE.VERSION%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia GI_BOFrameWorkApplication.UpdateDirectExecution', 2);
        UT_TRACE.TRACE('inuExecutableId     [' || INUEXECUTABLEID || ']', 3);
        UT_TRACE.TRACE('isbDirectExecution  [' || ISBDIRECTEXECUTION || ']', 3);

        DASA_EXECUTABLE.UPDDIRECT_EXECUTION(INUEXECUTABLEID, ISBDIRECTEXECUTION);

        UT_TRACE.TRACE('Finaliza GI_BOFrameWorkApplication.UpdateDirectExecution', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE COMPILEPACKAGEBODY
    (
        ISBPACKAGENAME              IN VARCHAR2
    )IS
    BEGIN
        EXECUTE IMMEDIATE 'alter PACKAGE ' || ISBPACKAGENAME || ' compile body';
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    
















    
    PROCEDURE GETAPPLICATIONPARENT
    (
        INUAPPLICATIONID            IN  SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        OSBPARENTAPPLICATIONNAME    OUT SA_EXECUTABLE.NAME%TYPE
    )
    IS
        NUPARENTAPPLICATIONID       SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
    BEGIN
        NUPARENTAPPLICATIONID := DASA_EXECUTABLE.FNUGETPARENT_EXECUTABLE_ID(INUAPPLICATIONID);
        IF NUPARENTAPPLICATIONID IS NOT NULL THEN
            OSBPARENTAPPLICATIONNAME := DASA_EXECUTABLE.FSBGETNAME(NUPARENTAPPLICATIONID);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETAPPLICATIONBYNAME
    (
        ISBAPPLICATIONNAME          IN  SA_EXECUTABLE.NAME%TYPE,
        ONUAPPLICATIONID            OUT SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        OSBDESCRIPTION              OUT SA_EXECUTABLE.DESCRIPTION%TYPE,
        OSBVERSION                  OUT SA_EXECUTABLE.VERSION%TYPE,
        OSBMODULE                   OUT GE_MODULE.DESCRIPTION%TYPE
    )
    IS
        RCEXECUTABLE  DASA_EXECUTABLE.STYSA_EXECUTABLE;
    BEGIN

       RCEXECUTABLE := SA_BOEXECUTABLE.GETEXECUTABLEBYNAME(ISBAPPLICATIONNAME);

       ONUAPPLICATIONID := RCEXECUTABLE.EXECUTABLE_ID;
       OSBDESCRIPTION   := RCEXECUTABLE.DESCRIPTION;
       OSBVERSION       := RCEXECUTABLE.VERSION;
       OSBMODULE        := DAGE_MODULE.FSBGETDESCRIPTION(RCEXECUTABLE.MODULE_ID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETAPPLICATIONCONFIG
    (
        INUAPPLICATIONID            IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
        ISBGETCONFIGURATION         IN VARCHAR2,
        ORCATTRIBUTESSECURITY       OUT CONSTANTS.TYREFCURSOR,
        ORCNODESSECURITY            OUT CONSTANTS.TYREFCURSOR,
        ORCMENUSSECURITY            OUT CONSTANTS.TYREFCURSOR,
        ORCTOOLBARSECURITY          OUT CONSTANTS.TYREFCURSOR,
        ORCCONTEXTUALMENUSECURITY   OUT CONSTANTS.TYREFCURSOR,
        ORCNODES                    OUT CONSTANTS.TYREFCURSOR,
        ORCATTRIBUTES               OUT CONSTANTS.TYREFCURSOR,
        ORCSEARCHATTRIBUTES         OUT CONSTANTS.TYREFCURSOR,
        ORCDEPENDENCY               OUT CONSTANTS.TYREFCURSOR,
        ORCALTERNATIVESEARCHNODES   OUT CONSTANTS.TYREFCURSOR,
        ORCALTERNSEARCHNODESATTS    OUT CONSTANTS.TYREFCURSOR,
        ORCMENUS                    OUT CONSTANTS.TYREFCURSOR,
        ORCTOOLBARITEMS             OUT CONSTANTS.TYREFCURSOR,
        ORCCONTEXTUALMENUITEMS      OUT CONSTANTS.TYREFCURSOR,
        ORCSEARCHCONTEXTS           OUT CONSTANTS.TYREFCURSOR,
        ORCCONTROLPROVIDERS         OUT CONSTANTS.TYREFCURSOR
    )
    IS
        SBAPPLICATIONNAME            SA_EXECUTABLE.NAME%TYPE;
    BEGIN

        SBAPPLICATIONNAME := DASA_EXECUTABLE.FSBGETNAME(INUAPPLICATIONID);
    
        
        SA_BOATTRROLEEXEC.GETTATTRESTBYPIEXECUTABLE
        (
            INUAPPLICATIONID,
            ORCATTRIBUTESSECURITY
        );

        
        IF (ISBGETCONFIGURATION = GE_BOCONSTANTS.CSBNO) THEN

            
            
            
            
            GI_BOFRAMEWORKQUERYNODE.GETQUERYNODESSECURITY
            (
                INUAPPLICATIONID,
                ORCNODESSECURITY
            );

            
            GI_BOFRAMEWORKMENU.GETMENUSSECURITY
            (
                INUAPPLICATIONID,
                ORCMENUSSECURITY
            );

            
            GI_BOFRAMEWORKTOOLBAR.GETTOOLBARSECURITY
            (
                SBAPPLICATIONNAME,
                ORCTOOLBARSECURITY
            );
            
            
            GI_BOTAB.GETCONTEXTMENUSECURITY
            (
                SBAPPLICATIONNAME,
                ORCCONTEXTUALMENUSECURITY
            );
            
            
            
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCNODES);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCATTRIBUTES);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCSEARCHATTRIBUTES);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCDEPENDENCY);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCALTERNATIVESEARCHNODES);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCALTERNSEARCHNODESATTS);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCMENUS);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCTOOLBARITEMS);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCCONTEXTUALMENUITEMS);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCSEARCHCONTEXTS);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCCONTROLPROVIDERS);
            
        ELSE

            
            
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCNODESSECURITY);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCMENUSSECURITY);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCTOOLBARSECURITY);
            GE_BOGENERALUTIL.OPEN_REFCURSOR(ORCCONTEXTUALMENUSECURITY);

            
            GI_BOFRAMEWORKQUERYNODE.GETQUERYNODESFROMAPPLICATION
            (
                INUAPPLICATIONID,
                ORCNODES
            );
            
            
            GI_BOFRAMEWORKQUERYATTRIBUTE.GETATTRIBUTESFROMAPPLICATION
            (
                INUAPPLICATIONID,
                GE_BOCONSTANTS.CSBYES,
                ORCATTRIBUTES
            );
            
            
            GI_BOFRAMEWORKSEARCHATTRIBUTE.GETSEARCHATTRIBUTESINAPP
            (
                INUAPPLICATIONID,
                ORCSEARCHATTRIBUTES
            );
            
            
            GI_BOFRAMEWORKQUERYDEPENDENCY.GETQUERYDEPENDENCY
            (
                INUAPPLICATIONID,
                ORCDEPENDENCY
            );
            
            
            GI_BOFRAMEWORKQUERYNODE.GETALTERNATIVEQUERYSEARCH
            (
                INUAPPLICATIONID,
                ORCALTERNATIVESEARCHNODES
            );
            
            
            GI_BOFRAMEWORKSEARCHATTRIBUTE.GETALTERNATQUERYATTSINAPP
            (
                INUAPPLICATIONID,
                ORCALTERNSEARCHNODESATTS
            );
            
            
            GI_BOFRAMEWORKMENU.GETMENUSFROMAPPLICATION
            (
                INUAPPLICATIONID,
                ORCMENUS
            );
            
            
            GI_BOFRAMEWORKTOOLBAR.GETTOOLBARITEMSFROMAPPLICATION
            (
                SBAPPLICATIONNAME,
                ORCTOOLBARITEMS
            );
            
            
            GI_BOTAB.GETCONTEXTMENUOPTIONS
            (
                SBAPPLICATIONNAME,
                ORCCONTEXTUALMENUITEMS
            );
            
            
            GI_BOFRAMEWORKQUERYNODE.GETCONTEXTFROMAPPLICATION
            (
                INUAPPLICATIONID,
                ORCSEARCHCONTEXTS
            );
            
            
            GI_BOFRAMEWORKUSERCONTROL.GETCONTROLPROVIDERS
            (
                INUAPPLICATIONID,
                ORCCONTROLPROVIDERS
            );
            
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE GETAPPREPORTNOTCONTAINER
    (
        INUMODULEID             IN SA_EXECUTABLE.MODULE_ID%TYPE,
        OCULISTOFAPPLICATIONS   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OCULISTOFAPPLICATIONS := GI_BCFRAMEWORKAPPLICATION.FRFAPPREPORTNOTCONTAINER
        (
            INUMODULEID
        );
    END;
    
    PROCEDURE GETSTATEMENTSBYREPORT
    (
        INUREPORTID             IN GE_REPORT_STATEMENT.EXECUTABLE_ID%TYPE,
        OCULISTOFAPPLICATIONS   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OCULISTOFAPPLICATIONS := GI_BCFRAMEWORKAPPLICATION.FRFSTATEMENTSBYREPORT
        (
            INUREPORTID
        );
    END;
    
    
    


    PROCEDURE ISAPPLICATIONWITHREFERENCES
    (
      INUEXECUTABLEID     IN SA_EXECUTABLE.EXECUTABLE_ID%TYPE,
      OBLEXISTSREFERENCES OUT BOOLEAN
    )
    IS
       NUCOUNT PLS_INTEGER;
    BEGIN
       NUCOUNT := GI_BCFRAMEWORKAPPLICATION.FNUEXISTSREFERENCES(INUEXECUTABLEID);
       IF (NUCOUNT = 0 ) THEN
         OBLEXISTSREFERENCES := FALSE;
       ELSE
         OBLEXISTSREFERENCES := TRUE;
       END IF;
    END;
    
    
    PROCEDURE ISAPPNAMEWITHREFS
    (
        ISBNAME    IN SA_EXECUTABLE.NAME%TYPE,
        OBLHASREFS OUT BOOLEAN
    )
    IS
        NUEXECUTABLE_ID SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
        NUCOUNT         PLS_INTEGER;

    BEGIN
        UT_TRACE.TRACE('GI_BOFrameWorkApplication.IsAppNameWithRefs');

        NUEXECUTABLE_ID := SA_BCEXECUTABLE.FNUGETEXECBYNAME(ISBNAME);
        NUCOUNT         := GI_BCFRAMEWORKAPPLICATION.FNUEXISTSREFERENCES(NUEXECUTABLE_ID);
        OBLHASREFS      := NUCOUNT > 0;

        UT_TRACE.TRACE('GI_BOFrameWorkApplication.IsAppNameWithRefs END');

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END ISAPPNAMEWITHREFS;
    
    















    PROCEDURE LISTAPPLICATIONWITHREFERS
    (
      ISBEXECUTABLENAMES IN VARCHAR2,
      OSBEXISTSREFERENCE OUT VARCHAR2
    )
    IS
        TBEXECUTABLESNAMES      UT_STRING.TYTB_STRING;
        BLWITHREFERENCE         BOOLEAN;
    BEGIN
        UT_TRACE.TRACE(' Inicio - ListApplicationWithRefers',5);
        OSBEXISTSREFERENCE := '';


        UT_STRING.EXTSTRING (ISBEXECUTABLENAMES,  '|',  TBEXECUTABLESNAMES);

        FOR V_COUNTER IN 1 .. TBEXECUTABLESNAMES.COUNT LOOP

            IF TBEXECUTABLESNAMES.EXISTS (V_COUNTER) THEN

                ISAPPNAMEWITHREFS(TBEXECUTABLESNAMES(V_COUNTER), BLWITHREFERENCE);

                IF ( OSBEXISTSREFERENCE IS NULL ) THEN
                    IF ( BLWITHREFERENCE) THEN
                        OSBEXISTSREFERENCE := 'TRUE';
                    ELSE
                        OSBEXISTSREFERENCE := 'FALSE';
                    END IF;
                ELSE
                    IF ( BLWITHREFERENCE) THEN
                        OSBEXISTSREFERENCE := UT_STRING.FSBCONCAT(OSBEXISTSREFERENCE, 'TRUE', '|');
                    ELSE
                        OSBEXISTSREFERENCE := UT_STRING.FSBCONCAT(OSBEXISTSREFERENCE, 'FALSE', '|');
                    END IF;
                END IF;
            END IF;

        END LOOP;

        UT_TRACE.TRACE(' osbExistsReference := ' || OSBEXISTSREFERENCE,10);

        UT_TRACE.TRACE(' Final - ListApplicationWithRefers',5);
    END;

    















    FUNCTION FBLAPPLICATIONWITHINVALIDREFER
    (
      ISBEXECUTABLENAME     IN SA_TAB.APLICA_EXECUTABLE%TYPE
    ) RETURN BOOLEAN
    IS
       BLINVALIDREFERENCES BOOLEAN;
       NUCOUNT PLS_INTEGER;
       RFCURSOR CONSTANTS.TYREFCURSOR;
    BEGIN

       RFCURSOR := GI_BCFRAMEWORKAPPLICATION.FRFINVALIDREFERENCES(ISBEXECUTABLENAME);

       FETCH RFCURSOR INTO NUCOUNT;

       IF RFCURSOR%FOUND THEN
          BLINVALIDREFERENCES := TRUE;
       ELSE
          BLINVALIDREFERENCES := FALSE;
       END IF;

       CLOSE RFCURSOR;

       RETURN BLINVALIDREFERENCES;
    END;

    















    PROCEDURE LISTINVALIDREFERENCE
    (
      ISBEXECUTABLENAMES IN VARCHAR2,
      OSBEXISTSREFERENCE OUT VARCHAR2
    )
    IS
        TBEXECUTABLESNAMES     UT_STRING.TYTB_STRING;
        BLWITHREFERENCE BOOLEAN;
    BEGIN
        UT_TRACE.TRACE(' Inicio - ListInvalidReference',5);
        OSBEXISTSREFERENCE := '';


        UT_STRING.EXTSTRING (ISBEXECUTABLENAMES,  '|',  TBEXECUTABLESNAMES);

        FOR V_COUNTER IN 1 .. TBEXECUTABLESNAMES.COUNT LOOP

            IF TBEXECUTABLESNAMES.EXISTS (V_COUNTER) THEN

                BLWITHREFERENCE := FBLAPPLICATIONWITHINVALIDREFER(TBEXECUTABLESNAMES(V_COUNTER));

                IF ( OSBEXISTSREFERENCE IS NULL ) THEN
                    IF ( BLWITHREFERENCE) THEN
                        OSBEXISTSREFERENCE := 'TRUE';
                    ELSE
                        OSBEXISTSREFERENCE := 'FALSE';
                    END IF;
                ELSE
                    IF ( BLWITHREFERENCE) THEN
                        OSBEXISTSREFERENCE := UT_STRING.FSBCONCAT(OSBEXISTSREFERENCE, 'TRUE', '|');
                    ELSE
                        OSBEXISTSREFERENCE := UT_STRING.FSBCONCAT(OSBEXISTSREFERENCE, 'FALSE', '|');
                    END IF;
                END IF;
            END IF;

        END LOOP;

        UT_TRACE.TRACE(' osbExistsReference := ' || OSBEXISTSREFERENCE,10);

        UT_TRACE.TRACE(' Final - ListInvalidReference',5);
    END;
    
 




















    PROCEDURE GETREPORTAPPLICATIONSBYMODULE
    (
        INUMODULEID             IN SA_EXECUTABLE.MODULE_ID%TYPE,
        OCULISTOFAPPLICATIONS   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OCULISTOFAPPLICATIONS := GI_BCFRAMEWORKAPPLICATION.FRFREPORTAPPLICATIONSBYMODULE
        ( INUMODULEID  );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    



















    FUNCTION FSBEXISTSENTITYPI
    (
        ISBENTITYNAME   IN  GI_COMPOSITION.TAG_NAME%TYPE
    )
    RETURN VARCHAR2
    IS
    BEGIN

        GI_BOFRAMEWORKQUERYNODE.REMOVEQUERYNODEALONE(GE_BOENTITY.GETENTITYIDBYNAME(ISBENTITYNAME));

        RETURN GE_BOCONSTANTS.CSBYES;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBEXISTSENTITYPI;

END GI_BOFRAMEWORKAPPLICATION;