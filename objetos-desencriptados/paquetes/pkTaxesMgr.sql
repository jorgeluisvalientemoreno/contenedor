PACKAGE pkTaxesMgr AS























































































































































































    
    
    
    
    
    
    
    
    
    TYPE TYACCOUNTCHARGES IS RECORD
    (
        CARGCUCO  CARGOS.CARGCUCO%TYPE,
        CARGCONC  CARGOS.CARGCONC%TYPE,
        CARGSIGN  CARGOS.CARGSIGN%TYPE,
        CARGVALO  CARGOS.CARGVALO%TYPE
    );
     
    
    
    TYPE TYTBACCOUNTCHARGES IS TABLE OF TYACCOUNTCHARGES
    INDEX BY BINARY_INTEGER;
    
    
    
    TYPE TYCHARGESACCOUNT IS RECORD
    (
    	NUCONCEPT   CARGOS.CARGCONC%TYPE,
    	NUVALUE     CARGOS.CARGVALO%TYPE,
    	SBDOCUSOPO  CARGOS.CARGDOSO%TYPE
    );
    
    
    
    TYPE TYTBCHARGESACCOUNT IS TABLE OF TYCHARGESACCOUNT 
    INDEX BY BINARY_INTEGER;
    
    
    
    TYPE TYTAXESRERATINGCHARGES IS RECORD
    (
    	CARGNUSE   CARGOS.CARGNUSE%TYPE,
    	CARGCUCO   CARGOS.CARGCUCO%TYPE,
    	CARGFACT   FACTURA.FACTCODI%TYPE,
    	CARGCONC   CARGOS.CARGCONC%TYPE,
    	CARGCACA   CARGOS.CARGCACA%TYPE,
    	CARGVALO   CARGOS.CARGVALO%TYPE,
    	CARGSIGN   CARGOS.CARGSIGN%TYPE,
    	CARGDOSO   CARGOS.CARGDOSO%TYPE,
    	NUTIPOCARGO NUMBER   ,
    	CARGVABL   CARGOS.CARGVABL%TYPE
    );
    
    
    TYPE TYTBTAXESRERATINGCHARGES IS TABLE OF TYTAXESRERATINGCHARGES 
    INDEX BY BINARY_INTEGER;
    
    
    
    
    
    SBERRMSG		GE_ERROR_LOG.DESCRIPTION%TYPE;
    
    
    
    
    
    CNUTAXCANCELCHARGE  CONSTANT NUMBER := 0;
    
    CNUTAXRATINGCHARGE  CONSTANT NUMBER := 1;
    
    
    
    

    
    
    PROCEDURE INITIALIZETAXRERATING;

    
    PROCEDURE CLEARGLOBALDATA;

    
    
    FUNCTION FBLISTAXCONCEPT
    (
        INUCONCEPTO  IN  CONCEPTO.CONCCODI%TYPE
    ) RETURN BOOLEAN;
    
    
    
    
    FUNCTION FBLCATEGTAXEXISTS 
    (
    	INUCONCEPT 	    IN	CONCCAIM.COCMCONC%TYPE,
    	ONUCATEGORYTAX	OUT	CONCCAIM.COCMCAIM%TYPE,
    	INUCACHE	    IN	NUMBER DEFAULT 1
    )
    RETURN BOOLEAN;

    
    
    PROCEDURE SETACCOUNTCOLLECTOR 
    (
	    INUACCOUCOLLE	IN	CUENCOBR.CUCOCODI%TYPE
    );
    
    
    
    FUNCTION FNUGETACCOUNTCOLLECTOR RETURN CUENCOBR.CUCOCODI%TYPE;
    
    
    
    PROCEDURE SETPERCAPPLIEDTAX 
    (
	    INUPERCTAX	IN	CATEIMPU.CAIMPORC%TYPE
    );
    
    
    
    FUNCTION FNUGETPERCAPPLIEDTAX RETURN CATEIMPU.CAIMPORC%TYPE;
    
    
    
    PROCEDURE SETDOCUSUPPORT 
    (
	    ISBDOCUSUPPORT  IN  CARGOS.CARGDOSO%TYPE DEFAULT 'IMPUESTO'
    );
    
    
    
    FUNCTION FSBGETDOCUSUPPORT RETURN CARGOS.CARGDOSO%TYPE;
    
    
    
    PROCEDURE SETTAXMINTOP 
    (
	    INUMINIMUMTOP	IN	CATEIMPU.CAIMTOMI%TYPE
    );
    
    
    
    FUNCTION FNUGETTAXMINTOP RETURN CATEIMPU.CAIMTOMI%TYPE;
    
    
    
    PROCEDURE SETVALBASELIQTAX 
    (
	    INUVALUEBASE	IN	CARGOS.CARGVALO%TYPE
    );
    
    
    
    FUNCTION FNUGETVALBASELIQTAX RETURN CARGOS.CARGVALO%TYPE;
    
    
    PROCEDURE GETRERATINGPROCESSDATA
    (
	    INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
	    INUCUENTA    IN  CUENCOBR.CUCOCODI%TYPE
    ) ;
    
    
    PROCEDURE GETTAXCONCEPTSONACCOUNT
    (
	    INUCUENTA  IN  CUENCOBR.CUCOCODI%TYPE
    );
    
    PROCEDURE GETTAXCONCEPTSONACCOUNT
    (
    	INUCUENTA  IN  CUENCOBR.CUCOCODI%TYPE,
    	ITBCARGOS  IN  PKTAXESMGR.TYTBACCOUNTCHARGES
    );
    
    PROCEDURE GETTAXVALUE
    (
        IRCPRODUCT            IN     SERVSUSC%ROWTYPE,
        INUBILLINGPERIOD      IN     PERIFACT.PEFACODI%TYPE,
    	IOTBCHARGES           IN OUT PKBORATINGMEMORYMGR.TYTBLIQCHARGES,
    	IBLRAISEERROR         IN     BOOLEAN DEFAULT TRUE,
    	ONUTAXVALUEDEFER      OUT    CARGOS.CARGVALO%TYPE,
    	ONUTAXVALUENODEFER    OUT    CARGOS.CARGVALO%TYPE,
    	OTBTAXCHARGES         OUT    PKBORATINGMEMORYMGR.TYTBLIQCHARGES
    );
    
    
    PROCEDURE CANCELPREVIOUSTAXCHARGES ;
    
    
    
    PROCEDURE SETTAXRATINGDATA ;
    
    
    PROCEDURE RATINGTAX
    (
        INUCONCEPTO  IN  CONCEPTO.CONCCODI%TYPE,
	    ISBREGLAFAC  IN  CONCPLSU.COPSFUFA%TYPE
    ) ;
    
    
    PROCEDURE GENERATETAX;
    
    
    PROCEDURE TAXESRERATING
    (
    	INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    	INUCUENTA    IN  CUENCOBR.CUCOCODI%TYPE,
    	INUSERVSUSCCON  IN  SERVSUSC.SESUNUSE%TYPE DEFAULT NULL
    ) ;
    
    
    
    
    FUNCTION FBLISTAXBASEVALUECONCEPT
    (
    	INUCONCEPTO  IN  CONCEPTO.CONCCODI%TYPE,
    	INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    	INUCUENCOBR  IN  CUENCOBR.CUCOCODI%TYPE,
    	INUSERVSUSCCON  IN  SERVSUSC.SESUNUSE%TYPE DEFAULT NULL
    )
    RETURN BOOLEAN ;
    
    
    
    FUNCTION FNUCALCULATEVALUEBASELIQTAX
    (
    	INUTAXCONCEPT       IN  CONCEPTO.CONCCODI%TYPE,
    	INUSERVSUSC         IN  SERVSUSC.SESUNUSE%TYPE,
    	INUCUENCOBR         IN  CUENCOBR.CUCOCODI%TYPE,
    	IDTFINALDATEMOVE    IN  DATE
    )
    RETURN CARGOS.CARGVALO%TYPE ;
    
    
    
    
    PROCEDURE ADDBASEVALUECHARGES
    (
    	INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    	INUCUENCOBR  IN  CUENCOBR.CUCOCODI%TYPE,
    	ITBADDCHARGES IN OUT NOCOPY PKTAXESMGR.TYTBCHARGESACCOUNT
    ) ;
    
    
    
    PROCEDURE APPLYADDBASEVALCHARGES
    (
    	INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    	INUCUENCOBR  IN  CUENCOBR.CUCOCODI%TYPE
    ) ;
    
    
    
    
    PROCEDURE GENERATETAXCHARGE
    (
    	INUCONCEPTO IN  CARGOS.CARGCONC%TYPE,
    	INUVALOR    IN  CARGOS.CARGVALO%TYPE,
    	ISBSIGNO    IN  CARGOS.CARGSIGN%TYPE,
    	ISBDOCUSOPO IN  CARGOS.CARGDOSO%TYPE,
    	INUTIPOCARG IN  NUMBER
    );
    
    
    
    PROCEDURE GETTAXESRERATINGCHARGES
    (
    	INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    	INUCUENTA    IN  CUENCOBR.CUCOCODI%TYPE,
    	OTBTAXESCHARGES IN OUT NOCOPY PKTAXESMGR.TYTBTAXESRERATINGCHARGES,
    	INUSERVSUSCCON IN  SERVSUSC.SESUNUSE%TYPE DEFAULT NULL
    );
    
    PROCEDURE GETTAXVALUEWITHROUND
    (
        IRCPRODUCT          IN  SERVSUSC%ROWTYPE,
        INUBILLINGPERIOD    IN  PERIFACT.PEFACODI%TYPE,
        ITBCHARGES          IN  PKBORATINGMEMORYMGR.TYTBLIQCHARGES,
        ONUTAXVALUEDEFER    OUT CARGOS.CARGVALO%TYPE,
        ONUTAXVALUENODEFER  OUT CARGOS.CARGVALO%TYPE,
        OTBTAXCHARGES       OUT NOCOPY PKBORATINGMEMORYMGR.TYTBLIQCHARGES
    );
    
    
    PROCEDURE CLEANADDBASEVALCHARGESTABLE ;

    FUNCTION GETADDBASEVALCHARGESTABLE
    RETURN TYTBCHARGESACCOUNT;
    
    
    
    FUNCTION FNUGETTAXVALUE
    (
        IRCPRODUCT          IN  SERVSUSC%ROWTYPE,
        INUBILLINGPERIOD    IN  PERIFACT.PEFACODI%TYPE,
    	IOTBCHARGES         IN OUT PKBORATINGMEMORYMGR.TYTBLIQCHARGES,
    	IBLRAISEERROR       IN  BOOLEAN DEFAULT TRUE
    ) RETURN NUMBER;
    
    
    
    FUNCTION FNUGETSERVSUSC RETURN SERVSUSC.SESUNUSE%TYPE;

    FUNCTION FSBVERSION RETURN VARCHAR2 ;

END PKTAXESMGR;

/
PACKAGE BODY pkTaxesMgr AS































































































































































































    
    
    TYPE TRRCBASETAXCONC IS RECORD
    (
    	NUTAXCONCEPT	CONCEPTO.CONCCODI%TYPE,
    	NUBASECONCEPT	CONCEPTO.CONCCODI%TYPE
    );
    
    
    TYPE TYTBBASETAXCONC IS TABLE OF TRRCBASETAXCONC INDEX BY BINARY_INTEGER;

    
    
    TYPE TYTAXCONCACCOUNT IS RECORD
    (
    	NUCUENTA     CARGOS.CARGCUCO%TYPE,
    	NUCONCEPTO   CARGOS.CARGCONC%TYPE,
    	NUVALOR      CARGOS.CARGVALO%TYPE
    );
    
    
    TYPE TYTBTAXCONCACCOUNT IS TABLE OF TYTAXCONCACCOUNT 
    INDEX BY BINARY_INTEGER;
    
    
    TYPE TYTBPRODCONCEPTS IS TABLE OF PKBILLINGCONCEPTSMGR.TYTBSERVSUSCCONCEPTS
    INDEX BY VARCHAR2(200);
    



    
    TBCONCIMPCUENTA         TYTBTAXCONCACCOUNT;
    
    TBCONCEPTO    	        PKTBLCONCEPTO.TYCONCTICL;
    
    GTBCONCIMPNUSE          PKBILLINGCONCEPTSMGR.TYTBSERVSUSCCONCEPTS;
    
    GTBBASETAXCONC          TYTBBASETAXCONC;
    
    GTBCHARGESACCOUNT       PKBORATINGMEMORYMGR.TYTBLIQCHARGES;
    
    GTBADDCHARGESACCOUNT    TYTBCHARGESACCOUNT;
    
    GTBTAXESRERATINGCHARGES TYTBTAXESRERATINGCHARGES;
    
    GNUACCOUNTNUMBER        CUENCOBR.CUCOCODI%TYPE := NULL;
    
    
    GNUACCOUNTNUMBERADDCHG  CUENCOBR.CUCOCODI%TYPE := NULL;
    
    GNUSUBSERVICE           SERVSUSC.SESUNUSE%TYPE := NULL;
    
    
    GNUSUBSERVICEADDCHG     SERVSUSC.SESUNUSE%TYPE := NULL;
    
    GNUSESUDATA             SERVSUSC.SESUNUSE%TYPE := NULL;

     
    GNUSESUDATACOPY         SERVSUSC.SESUNUSE%TYPE := NULL;

    
    GNUCUCODATA             SERVSUSC.SESUNUSE%TYPE := NULL;
    
    NUACCOUNTCOLLECTOR	    CUENCOBR.CUCOCODI%TYPE;
    
    NUPERCAPPLIEDTAX	    CATEIMPU.CAIMPORC%TYPE;
    
    NUTAXMINTOP	            CATEIMPU.CAIMTOMI%TYPE;
    
     NUVALBASELIQ	        CARGOS.CARGVALO%TYPE;
    
    NUCONCUDEATAX	        CONCEPTO.CONCCODI%TYPE;
    
    NUCONCTIMBRETAX	        CONCEPTO.CONCCODI%TYPE;
    
    NUCONCTIMBRETAXCOMP	    CONCEPTO.CONCCODI%TYPE;
    
    NUTYPECONCRTEFTE	    TIPOCONC.TICOCODI%TYPE;
    
    SBDOCUSUPPORT	        CARGOS.CARGDOSO%TYPE;
    
    
    
    BLOUTMEMORYTABLE        BOOLEAN := FALSE;
    
    RCSERVSUSC	            SERVSUSC%ROWTYPE;
    RCSUSCRIPC              SUSCRIPC%ROWTYPE;

    RCSERVSUSCCOPY	        SERVSUSC%ROWTYPE;
    RCSUSCRIPCCOPY          SUSCRIPC%ROWTYPE;

    RCCUENCOBR              CUENCOBR%ROWTYPE;
    RCPERIFACT              PERIFACT%ROWTYPE;
    
    
    GNUSESUCONC             SERVSUSC.SESUNUSE%TYPE := NULL;
    
    GNUCUCOCONC             SERVSUSC.SESUNUSE%TYPE := NULL;
    
    
    GNUSERVSUSCCON          SERVSUSC.SESUNUSE%TYPE := NULL;
    
    GTBPRODCONCEPTS         TYTBPRODCONCEPTS;







    
    CNUNUM_REC_FETCHED CONSTANT NUMBER := 100;

    
    CSBVERSION   CONSTANT VARCHAR2(250) := 'SAO300355';



    
    
    PROCEDURE UPDACCRECCAUSETAX
    (
    	INUCONCEPTO   IN  CONCEPTO.CONCCODI%TYPE,
    	INUVALORCARGO IN  CARGOS.CARGVALO%TYPE,
    	ISBSIGNO      IN  CARGOS.CARGSIGN%TYPE
    ) ;
    
    
    
    PROCEDURE GETTAXESCONCEPTS
    (
        INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
        INUCUENCOBR  IN  CUENCOBR.CUCOCODI%TYPE
    ) ;

    
    PROCEDURE SETPRODUCTOMADRECONSORCIO;

    
    PROCEDURE SETPRODUCTOHIJOCONSORCIO;
    























































PROCEDURE GETTAXESCONCEPTS
(
    INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    INUCUENCOBR IN  CUENCOBR.CUCOCODI%TYPE
)
IS
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.GetTaxesConcepts');

    UT_TRACE.TRACE( 'pkTaxesMgr.GetTaxesConcepts', 15 );
    
    
    IF (GNUSESUCONC IS NOT NULL AND GNUCUCOCONC IS NOT NULL AND
         GNUSESUCONC = INUSERVSUSC AND GNUCUCOCONC = INUCUENCOBR )
    THEN
        PKERRORS.POP;
        RETURN;
    END IF;
    
    
    GNUSESUCONC := INUSERVSUSC;
    GNUCUCOCONC := INUCUENCOBR;

    
    PKTAXESMGR.GETRERATINGPROCESSDATA(INUSERVSUSC, INUCUENCOBR);
    
    
    
    
    GTBCONCIMPNUSE.DELETE;

    PKBILLINGCONCEPTSMGR.GETBILLINGCONCEPTS( RCSERVSUSC.SESUNUSE,
                                        RCSUSCRIPC.SUSCCODI,
                                        RCSERVSUSC.SESUSERV,
                                        RCSERVSUSC.SESUPLFA,
                                        RCSUSCRIPC.SUSCCICL,
                                        RCPERIFACT.PEFAFIMO,
                                        RCPERIFACT.PEFAFFMO,
                                        PKBILLCONST.FNUOBTTIPOIMP,
                                             GTBCONCIMPNUSE );

    UT_TRACE.TRACE( 'Fin pkTaxesMgr.GetTaxesConcepts', 15 );
    
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETTAXESCONCEPTS;








































PROCEDURE INITIALIZETAXRERATING
IS
    
    
    
    
    
    
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.InitializeTaxReRating');
    
    
    GTBCONCIMPNUSE.DELETE;
    
    
    GTBCHARGESACCOUNT.DELETE;
    
    
    GNUACCOUNTNUMBER    := NULL;
    GNUSUBSERVICE       := NULL;
    GNUSESUDATA         := NULL;
    GNUCUCODATA         := NULL;
    GNUSESUCONC         := NULL;
    GNUCUCOCONC         := NULL;
    GNUSERVSUSCCON      := NULL;
    GNUSESUDATACOPY     := NULL;

    PKERRORS.POP;
    
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END INITIALIZETAXRERATING;


















PROCEDURE CLEARGLOBALDATA
IS
    
    SBERRMSG        GE_ERROR_LOG.DESCRIPTION%TYPE;
BEGIN
    PKERRORS.PUSH ('pkTaxesMgr.ClearGlobalData');

    
    GTBCONCIMPNUSE.DELETE;
    GTBCHARGESACCOUNT.DELETE;
    GTBADDCHARGESACCOUNT.DELETE;
    GTBTAXESRERATINGCHARGES.DELETE;
    GTBBASETAXCONC.DELETE;
    TBCONCEPTO.DELETE;
    TBCONCIMPCUENTA.DELETE;
    GTBPRODCONCEPTS.DELETE;
    
    
    GNUACCOUNTNUMBER := NULL;
    GNUSUBSERVICE := NULL;
    GNUCUCODATA := NULL;
    GNUSESUCONC := NULL;
    GNUCUCOCONC := NULL;
    GNUSERVSUSCCON := NULL;
    GNUSESUDATA:= NULL;
    GNUSESUDATACOPY := NULL;
    GNUACCOUNTNUMBERADDCHG := NULL;
    GNUSUBSERVICEADDCHG := NULL;
    NUACCOUNTCOLLECTOR := NULL;
    NUTAXMINTOP := NULL;
    NUPERCAPPLIEDTAX := NULL;
    NUVALBASELIQ := NULL;
    SBDOCUSUPPORT := NULL;

    
    RCSERVSUSC := NULL;
    RCSUSCRIPC := NULL;
    RCSERVSUSCCOPY := NULL;
    RCSUSCRIPCCOPY := NULL;
    RCCUENCOBR := NULL;
    RCPERIFACT := NULL;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END CLEARGLOBALDATA;




















































PROCEDURE UPDACCRECCAUSETAX
(
    INUCONCEPTO   IN  CONCEPTO.CONCCODI%TYPE,
    INUVALORCARGO IN  CARGOS.CARGVALO%TYPE,
    ISBSIGNO      IN  CARGOS.CARGSIGN%TYPE
)
IS
    
    
    
    
    
    
    
    
    
BEGIN

    PKERRORS.PUSH('pkTaxesMgr.UpdAccRecCauseTax');
    
    
    IF ( RCCUENCOBR.CUCOCODI = PKBILLCONST.NULOSAT ) THEN
    
    	PKERRORS.POP;
    	RETURN ;
    
    END IF;
    
    
    PKUPDACCORECEIV.UPDACCOREC
    (
        PKBILLCONST.CNUSUMA_CARGO,
		RCCUENCOBR.CUCOCODI,
		RCSUSCRIPC.SUSCCODI,
		RCSERVSUSC.SESUNUSE,
		INUCONCEPTO,
		ISBSIGNO,
		ABS(INUVALORCARGO),
		PKBILLCONST.CNUNO_UPDATE_DB
    );
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END UPDACCRECCAUSETAX;









































PROCEDURE ADDBASEVALUECHARGES
(
    INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    INUCUENCOBR  IN  CUENCOBR.CUCOCODI%TYPE,
    ITBADDCHARGES IN OUT NOCOPY PKTAXESMGR.TYTBCHARGESACCOUNT
)
IS
    
    
    
    
    
    
    
    NUINDICE NUMBER;
    NUIDXIN  NUMBER;
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.AddBaseValueCharges');
    
    GTBADDCHARGESACCOUNT.DELETE;
    
    GNUSUBSERVICEADDCHG := INUSERVSUSC ;
    GNUACCOUNTNUMBERADDCHG := INUCUENCOBR ;
    
    
    NUINDICE := 1;
    
    
    PKGENERALSERVICES.TRACEDATA('Cargos adicionados a la cuenta de cobro');
    NUIDXIN := ITBADDCHARGES.FIRST;
    LOOP
	EXIT WHEN NUIDXIN IS NULL;
	GTBADDCHARGESACCOUNT(NUINDICE).NUCONCEPT := 
					ITBADDCHARGES (NUIDXIN).NUCONCEPT;
	GTBADDCHARGESACCOUNT(NUINDICE).NUVALUE :=
					ITBADDCHARGES (NUIDXIN).NUVALUE;
    GTBADDCHARGESACCOUNT(NUINDICE).SBDOCUSOPO :=
					ITBADDCHARGES (NUIDXIN).SBDOCUSOPO;
	
	PKGENERALSERVICES.TRACEDATA('Concepto: '||
				     ITBADDCHARGES (NUIDXIN).NUCONCEPT||' '||
				    'Valor: '||ITBADDCHARGES (NUIDXIN).NUVALUE);
	
	
	NUIDXIN := ITBADDCHARGES.NEXT(NUIDXIN);
	NUINDICE := NUINDICE + 1;
    END LOOP;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END ADDBASEVALUECHARGES;
















































PROCEDURE APPLYADDBASEVALCHARGES
(
    INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    INUCUENCOBR  IN  CUENCOBR.CUCOCODI%TYPE
)
IS
    
    
    
    
    
    
    
    NUINDICE NUMBER;
    NUIDXADD  NUMBER;
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.ApplyAddBaseValCharges');
    
    
    
    IF (GNUACCOUNTNUMBERADDCHG = INUCUENCOBR AND 
	GNUSUBSERVICEADDCHG    = INUSERVSUSC ) THEN
	
	
	IF (GTBCHARGESACCOUNT.FIRST IS NOT NULL) THEN
	    NUINDICE := GTBCHARGESACCOUNT.LAST + 1;
	ELSE
	    NUINDICE := 1;
	END IF;
	
	
	NUIDXADD := GTBADDCHARGESACCOUNT.FIRST;
	LOOP
	    EXIT WHEN NUIDXADD IS NULL;
	    GTBCHARGESACCOUNT(NUINDICE).NUCONCEPT := 
				    GTBADDCHARGESACCOUNT (NUIDXADD).NUCONCEPT;
	    GTBCHARGESACCOUNT(NUINDICE).NUVALUE := 
				    GTBADDCHARGESACCOUNT (NUIDXADD).NUVALUE;
	    
	    NUIDXADD := GTBADDCHARGESACCOUNT.NEXT(NUIDXADD);
	    NUINDICE := NUINDICE + 1;
	END LOOP;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END APPLYADDBASEVALCHARGES;













































PROCEDURE CANCELPREVIOUSTAXCHARGES
IS
    
    
    
    
    
    
    NUCONCEPTO CARGOS.CARGCONC%TYPE;
    NUVALOR    CARGOS.CARGVALO%TYPE;
    SBSIGNO    CARGOS.CARGSIGN%TYPE;
    NUINDICE   NUMBER;
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.CancelPreviousTaxCharges');
    
    PKGENERALSERVICES.TRACEDATA('CARGOS DE CANCELACION DE IMPUESTOS:');
    
    NUINDICE := TBCONCIMPCUENTA.FIRST;
    LOOP
	EXIT WHEN NUINDICE IS NULL;
	NUCONCEPTO := TBCONCIMPCUENTA(NUINDICE).NUCONCEPTO;
	NUVALOR    := TBCONCIMPCUENTA(NUINDICE).NUVALOR;
	
	SBSIGNO    := PKCHARGEMGR.FSBGETCANCELSIGN(NUVALOR);
	NUVALOR    := ABS(NUVALOR);
	
	PKTAXESMGR.GENERATETAXCHARGE
				(
				    NUCONCEPTO,
				    NUVALOR,
				    SBSIGNO,
				    PKBILLCONST.CSBDOC_RELIQ_IMPUESTOS,
				    PKTAXESMGR.CNUTAXCANCELCHARGE
				);
	NUINDICE := TBCONCIMPCUENTA.NEXT(NUINDICE);
    END LOOP;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END CANCELPREVIOUSTAXCHARGES;


































PROCEDURE CLEANADDBASEVALCHARGESTABLE
IS
    
    
    
    
    
    
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.CleanAddBaseValChargesTable');
    GTBADDCHARGESACCOUNT.DELETE;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END CLEANADDBASEVALCHARGESTABLE;


























































PROCEDURE GENERATETAX
IS
    
    
    
    
    
    
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.GenerateTax');

    UT_TRACE.TRACE( 'pkTaxesMgr.GenerateTax', 15 );
    
    
    
    
    PKTAXESMGR.GETTAXESCONCEPTS(RCSERVSUSC.SESUNUSE,
                                 RCCUENCOBR.CUCOCODI
                                );
    
    
    
    
    PKTAXESMGR.SETTAXRATINGDATA;
    
    
    
    
    
    
    
    
    IF (GTBCONCIMPNUSE.FIRST IS NOT NULL) THEN

	FOR NUINDICE IN GTBCONCIMPNUSE.FIRST .. GTBCONCIMPNUSE.LAST LOOP
	    
	    PKTAXESMGR.RATINGTAX(   GTBCONCIMPNUSE(NUINDICE).NUCONCEPTO,
    				            GTBCONCIMPNUSE(NUINDICE).SBREGLA
				            );
	END LOOP;

    END IF;

    UT_TRACE.TRACE( 'Fin pkTaxesMgr.GenerateTax', 15 );
    
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GENERATETAX;

















































































PROCEDURE GENERATETAXCHARGE
(
    INUCONCEPTO IN  CARGOS.CARGCONC%TYPE,
    INUVALOR    IN  CARGOS.CARGVALO%TYPE,
    ISBSIGNO    IN  CARGOS.CARGSIGN%TYPE,
    ISBDOCUSOPO IN  CARGOS.CARGDOSO%TYPE,
    INUTIPOCARG IN  NUMBER
)
IS
    
    
    
    
    
    
    NUCUENTA            CARGOS.CARGCUCO%TYPE;
    NUSESUNUSE          CARGOS.CARGNUSE%TYPE;
    NUVALOR             CARGOS.CARGVALO%TYPE;
    NUCAUSCARG          CARGOS.CARGCACA%TYPE;
    NUINDICE            NUMBER;
    DTFECHAGENERACION   DATE;
    NUNOTANUME          NOTAS.NOTANUME%TYPE;
    NUTIPODOCU          NUMBER;
    SBSUPPORTDOC        CARGOS.CARGDOSO%TYPE;
    NUDOCUMENTCODE      CARGOS.CARGCODO%TYPE;
    
    
    
BEGIN

    PKERRORS.PUSH( 'pkTaxesMgr.GenerateTaxCharge' );
    
    
    IF ( INUVALOR = PKBILLCONST.CERO ) THEN
    
    	PKERRORS.POP;
    	RETURN;
	
    END IF;
    
    
    NUCUENTA   := RCCUENCOBR.CUCOCODI;
    NUSESUNUSE := RCSERVSUSC.SESUNUSE;
    
    
    NUVALOR    := ABS( INUVALOR );
    
    
    NUCAUSCARG := FA_BOCHARGECAUSES.FNUGENERICCHCAUSE(PKCONSTANTE.NULLNUM);

    
    DTFECHAGENERACION := PKGENERALSERVICES.FDTGETSYSTEMDATE;

    
    IF ( BLOUTMEMORYTABLE ) THEN
	
    	PKGENERALSERVICES.TRACEDATA( 'Cargo adicionado a memoria' );
    	
        
        IF ( GTBTAXESRERATINGCHARGES.FIRST IS NOT NULL ) THEN
            NUINDICE := GTBTAXESRERATINGCHARGES.LAST + 1;
        ELSE
            NUINDICE := 1;
        END IF;
        
    	
    	GTBTAXESRERATINGCHARGES( NUINDICE ).CARGNUSE := NUSESUNUSE;
    	GTBTAXESRERATINGCHARGES( NUINDICE ).CARGCUCO := NUCUENTA;
    	GTBTAXESRERATINGCHARGES( NUINDICE ).CARGCONC := INUCONCEPTO;
    	GTBTAXESRERATINGCHARGES( NUINDICE ).CARGCACA := NUCAUSCARG;
    	GTBTAXESRERATINGCHARGES( NUINDICE ).CARGVALO := NUVALOR;
    	GTBTAXESRERATINGCHARGES( NUINDICE ).CARGSIGN := ISBSIGNO;
    	GTBTAXESRERATINGCHARGES( NUINDICE ).CARGDOSO := ISBDOCUSOPO;
    	PKCHARGEMGR.GETBASEVALUE( GTBTAXESRERATINGCHARGES( NUINDICE ).CARGVABL );
    	GTBTAXESRERATINGCHARGES( NUINDICE ).CARGVABL := ABS( GTBTAXESRERATINGCHARGES( NUINDICE ).CARGVABL );
    	GTBTAXESRERATINGCHARGES( NUINDICE ).NUTIPOCARGO := INUTIPOCARG;
    
    ELSE
	
    	PKGENERALSERVICES.TRACEDATA( 'Cargo adicionado a la base de datos' );

        
        PKBILLINGNOTEMGR.GETNOTENUMBERCREATED( NUNOTANUME );
        PKBILLINGNOTEMGR.GETDOCUMSOP( SBSUPPORTDOC );
        
        
        NUDOCUMENTCODE := NUNOTANUME;
        
        
        
        
        IF ( SBSUPPORTDOC IS NULL ) THEN
        
            SBSUPPORTDOC := ISBDOCUSOPO;
            NUDOCUMENTCODE := PKBILLCONST.CERO;
        
        END IF;

    	
    	PKCHARGEMGR.GENERATECHARGE
		(
            NUSESUNUSE,
		    NUCUENTA,
		    INUCONCEPTO,
		    NUCAUSCARG,
		    NUVALOR,
		    ISBSIGNO,
		    SBSUPPORTDOC,
		    PKBILLCONST.POST_FACTURACION,
            NUDOCUMENTCODE
		);
		
    	
    	UPDACCRECCAUSETAX( INUCONCEPTO, NUVALOR, ISBSIGNO );
    
    END IF;
    
    
	PKCHARGEMGR.SETBASEVALUE( NULL );
    
    
    PKGENERALSERVICES.TRACEDATA( 'CARGO...' );
    PKGENERALSERVICES.TRACEDATA( 'Concepto :' || INUCONCEPTO );
    PKGENERALSERVICES.TRACEDATA( 'Valor :' || NUVALOR );
    PKGENERALSERVICES.TRACEDATA( 'Causa cargo :' || NUCAUSCARG );
    PKGENERALSERVICES.TRACEDATA( 'Signo :' || ISBSIGNO );
    PKGENERALSERVICES.TRACEDATA( 'DocuSoporte :' || SBSUPPORTDOC );

    PKERRORS.POP;
    
EXCEPTION

    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GENERATETAXCHARGE;






















































PROCEDURE GETRERATINGPROCESSDATA
(
    INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    INUCUENTA    IN  CUENCOBR.CUCOCODI%TYPE
)
IS
    
    
    
    
    
    
    RCFACTURA   FACTURA%ROWTYPE;
    
    
    
BEGIN

    PKERRORS.PUSH('pkTaxesMgr.GetReRatingProcessData');
    
    
    
    
    
    
    IF (RCSERVSUSC.SESUNUSE IS NOT NULL AND GNUSESUDATA IS NOT NULL
        AND GNUCUCODATA IS NOT NULL AND GNUSESUDATA = INUSERVSUSC AND
        GNUCUCODATA = INUCUENTA ) THEN
	
    	PKERRORS.POP;
    	RETURN;
    
    END IF;
    
    
    GNUSESUDATA := INUSERVSUSC;
    GNUSESUDATACOPY := GNUSESUDATA;
    GNUCUCODATA := INUCUENTA;
    
    
    
    RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD (INUSERVSUSC,
					      PKCONSTANTE.CACHE);
    RCSUSCRIPC := PKTBLSUSCRIPC.FRCGETRECORD (RCSERVSUSC.SESUSUSC,
					      PKCONSTANTE.CACHE);
					      
    RCSERVSUSCCOPY := RCSERVSUSC;
    RCSUSCRIPCCOPY := RCSUSCRIPC;
					      
    
    
    
    
    
    IF (INUCUENTA = PKBILLCONST.NULOSAT ) THEN
    
    	RCCUENCOBR := NULL;
    	RCCUENCOBR.CUCOCODI := -1;
    	RCCUENCOBR.CUCOFACT := -1;
    	RCPERIFACT := PKBILLINGPERIODMGR.FRCGETACCCURRENTPERIOD
    						    (RCSUSCRIPC.SUSCCICL);
    
    ELSE
    
    	RCCUENCOBR := PKTBLCUENCOBR.FRCGETRECORD (INUCUENTA,
    					      PKCONSTANTE.CACHE);
    	RCFACTURA  := PKTBLFACTURA.FRCGETRECORD(RCCUENCOBR.CUCOFACT);
    	RCPERIFACT := PKTBLPERIFACT.FRCGETRECORD (RCFACTURA.FACTPEFA,
    					      PKCONSTANTE.CACHE);
    
    END IF;

    IF (GNUSERVSUSCCON IS NOT NULL) THEN
        SETPRODUCTOHIJOCONSORCIO;
    END IF;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRERATINGPROCESSDATA;








































PROCEDURE GETTAXCONCEPTSONACCOUNT
(
    INUCUENTA  IN  CUENCOBR.CUCOCODI%TYPE
)
IS
    
    
    
    
    
    
    NUINDICE NUMBER := 1;
    
    
    
    CURSOR CUCONCIMPCUENTA
    IS
	SELECT  --+ INDEX (CONCEPTO PK_CONCEPTO)
        CARGCUCO,CARGCONC,
		NVL( SUM( DECODE( UPPER( CARGSIGN ), PKBILLCONST.DEBITO,
						    CARGVALO,
						    PKBILLCONST.CREDITO,
						    -CARGVALO,
						    0 ) ), 0 ) CARGVALO
	FROM   CARGOS,CONCEPTO
	WHERE  CONCTICL = PKBILLCONST.FNUOBTTIPOIMP
	AND    CARGCUCO = INUCUENTA
	AND    CARGCONC = CONCCODI 
	GROUP BY CARGCUCO,CARGCONC ;
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.GetTaxConceptsOnAccount');
    
    TBCONCIMPCUENTA.DELETE;
    
    IF (CUCONCIMPCUENTA%ISOPEN) THEN
	CLOSE CUCONCIMPCUENTA;
    END IF;
    OPEN CUCONCIMPCUENTA;
    
    PKGENERALSERVICES.TRACEDATA('CONCEPTOS DE IMPUESTO EN LA CUENTA /');
    PKGENERALSERVICES.TRACEDATA('VALOR CANCELACION IMPUESTO');
    LOOP
	FETCH CUCONCIMPCUENTA INTO TBCONCIMPCUENTA(NUINDICE).NUCUENTA,
				   TBCONCIMPCUENTA(NUINDICE).NUCONCEPTO,
				   TBCONCIMPCUENTA(NUINDICE).NUVALOR;
        EXIT WHEN CUCONCIMPCUENTA%NOTFOUND;
	
	
	PKGENERALSERVICES.TRACEDATA(TBCONCIMPCUENTA(NUINDICE).NUCONCEPTO);
	PKGENERALSERVICES.TRACEDATA(TBCONCIMPCUENTA(NUINDICE).NUVALOR);
	NUINDICE := NUINDICE + 1;
    END LOOP;
    CLOSE CUCONCIMPCUENTA;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETTAXCONCEPTSONACCOUNT;




































PROCEDURE GETTAXCONCEPTSONACCOUNT
(
    INUCUENTA  IN  CUENCOBR.CUCOCODI%TYPE,
    ITBCARGOS  IN  PKTAXESMGR.TYTBACCOUNTCHARGES
)
IS
    
    
    
    
    
    
    NUINDICE NUMBER; 
    NUIDX    NUMBER;
    TBAUX    PKTAXESMGR.TYTBTAXCONCACCOUNT;
    
    NUCONCEPTO CONCEPTO.CONCCODI%TYPE;
    
    NUVALOR    CARGOS.CARGVALO%TYPE;
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.GetTaxConceptsOnAccount');
    
    TBCONCIMPCUENTA.DELETE;
    
    
    NUINDICE := ITBCARGOS.FIRST;
    LOOP
	EXIT WHEN NUINDICE IS NULL;
	IF (FBLISTAXCONCEPT(ITBCARGOS(NUINDICE).CARGCONC)) THEN
	    NUCONCEPTO := ITBCARGOS(NUINDICE).CARGCONC;
	    IF ( NOT(TBAUX.EXISTS(NUCONCEPTO)) ) THEN
		TBAUX(NUCONCEPTO).NUCONCEPTO := NUCONCEPTO;
		TBAUX(NUCONCEPTO).NUCUENTA := INUCUENTA;
		TBAUX(NUCONCEPTO).NUVALOR := PKBILLCONST.CERO;
	    END IF;
	    
	    NUVALOR := 0;
	    
	    IF (UPPER(ITBCARGOS(NUINDICE).CARGSIGN) = PKBILLCONST.DEBITO) THEN
		NUVALOR :=  NVL(ITBCARGOS(NUINDICE).CARGVALO,0);
	    END IF;
	    IF (UPPER(ITBCARGOS(NUINDICE).CARGSIGN) = PKBILLCONST.CREDITO) THEN
		NUVALOR := -1 * NVL(ITBCARGOS(NUINDICE).CARGVALO,0);
	    END IF;
	    TBAUX(NUCONCEPTO).NUVALOR := TBAUX(NUCONCEPTO).NUVALOR + NUVALOR;
	    
	END IF;
	NUINDICE := ITBCARGOS.NEXT(NUINDICE);
    END LOOP;
    
    PKGENERALSERVICES.TRACEDATA('CONCEPTOS DE IMPUESTO EN LA CUENTA /');
    PKGENERALSERVICES.TRACEDATA('VALOR CANCELACION IMPUESTO');
    
    
    NUINDICE := 1;
    NUIDX    := TBAUX.FIRST;
    LOOP
	
	
	EXIT WHEN NUIDX IS NULL;
	TBCONCIMPCUENTA(NUINDICE).NUCUENTA   := TBAUX(NUIDX).NUCUENTA;
	TBCONCIMPCUENTA(NUINDICE).NUCONCEPTO := TBAUX(NUIDX).NUCONCEPTO;
	TBCONCIMPCUENTA(NUINDICE).NUVALOR    := TBAUX(NUIDX).NUVALOR;
	
	
	PKGENERALSERVICES.TRACEDATA(TBCONCIMPCUENTA(NUINDICE).NUCONCEPTO);
	PKGENERALSERVICES.TRACEDATA(TBCONCIMPCUENTA(NUINDICE).NUVALOR);
	NUINDICE := NUINDICE + 1;
	NUIDX    := TBAUX.NEXT(NUIDX);
    END LOOP;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETTAXCONCEPTSONACCOUNT;
























































PROCEDURE GETTAXESRERATINGCHARGES
(
    INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    INUCUENTA    IN  CUENCOBR.CUCOCODI%TYPE,
    OTBTAXESCHARGES IN OUT NOCOPY PKTAXESMGR.TYTBTAXESRERATINGCHARGES,
    INUSERVSUSCCON IN  SERVSUSC.SESUNUSE%TYPE DEFAULT NULL
)
IS
    
    
    
    
    
    
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.GetTaxesReRatingCharges');
    
    UT_TRACE.TRACE( 'pkTaxesMgr.GetTaxesReRatingCharges', 15 );

    
    GTBTAXESRERATINGCHARGES.DELETE;
    
    BLOUTMEMORYTABLE := TRUE;
    
    PKTAXESMGR.TAXESRERATING( INUSERVSUSC,
                              INUCUENTA,
                              INUSERVSUSCCON );
    
    OTBTAXESCHARGES := GTBTAXESRERATINGCHARGES;
    
    
    BLOUTMEMORYTABLE := FALSE;

    UT_TRACE.TRACE( 'Fin pkTaxesMgr.GetTaxesReRatingCharges', 15 );
    PKERRORS.POP;
    
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETTAXESRERATINGCHARGES;































































PROCEDURE RATINGTAX
(
    INUCONCEPTO  IN  CONCEPTO.CONCCODI%TYPE,
    ISBREGLAFAC  IN  CONCPLSU.COPSFUFA%TYPE
)
IS
    
    
    
    
    
    
    
    NUVALORCARGO CARGOS.CARGVALO%TYPE := 0;
    
    SBSIGNO 	 CARGOS.CARGSIGN%TYPE;
    
    NUBASE       CARGOS.CARGVABL%TYPE;
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.RatingTax');

    
    PKINSTANCEDATAMGR.SETCG_CONCEPT ( INUCONCEPTO );

    
    PKINSTANCEDATAMGR.SETCG_CONCEPT(INUCONCEPTO);
    
    
    PKGENERALSERVICES.TRACEDATA('CONCEPTO A LIQUIDAR '||INUCONCEPTO);
    
    PKGENERALSERVICES.EXECDYNAMICFUNCTION(ISBREGLAFAC,NUVALORCARGO);
    NUVALORCARGO := NVL(NUVALORCARGO,0);
    
    IF (NUVALORCARGO < PKBILLCONST.CERO) THEN
    	SBSIGNO := PKBILLCONST.CREDITO;
    ELSE
    	SBSIGNO := PKBILLCONST.DEBITO;
    END IF;
    NUVALORCARGO := ABS(NUVALORCARGO);

    
    IF (GNUSERVSUSCCON IS NOT NULL) THEN
        SETPRODUCTOMADRECONSORCIO;
    END IF;

    
    PKTAXESMGR.GENERATETAXCHARGE
			    (
				INUCONCEPTO,
				NUVALORCARGO,
				SBSIGNO,
				PKBILLCONST.CSBTOKEN_IMPUESTO,
				PKTAXESMGR.CNUTAXRATINGCHARGE
			    );

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END RATINGTAX;



















PROCEDURE SETACCOUNTCOLLECTOR 
    (
	INUACCOUCOLLE	IN	CUENCOBR.CUCOCODI%TYPE
    )
    IS
BEGIN
    PKERRORS.PUSH ('pkTaxesMgr.SetAccountCollector');
    
    NUACCOUNTCOLLECTOR := INUACCOUCOLLE;
    PKERRORS.POP;
EXCEPTION
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR
	    (
		PKERRORS.FSBLASTOBJECT,
		SQLERRM,
		SBERRMSG
	    );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END SETACCOUNTCOLLECTOR;
























PROCEDURE SETDOCUSUPPORT 
    (
	ISBDOCUSUPPORT  IN  CARGOS.CARGDOSO%TYPE DEFAULT 'IMPUESTO'
    )
    IS
BEGIN
    PKERRORS.PUSH ('pkTaxesMgr.SetDocuSupport');
    
    SBDOCUSUPPORT := ISBDOCUSUPPORT;
    PKERRORS.POP;
EXCEPTION
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR
	    (
		PKERRORS.FSBLASTOBJECT,
		SQLERRM,
		SBERRMSG
	    );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END SETDOCUSUPPORT;



















PROCEDURE SETPERCAPPLIEDTAX 
    (
	INUPERCTAX	IN	CATEIMPU.CAIMPORC%TYPE
    )
    IS
BEGIN
    PKERRORS.PUSH ('pkTaxesMgr.SetPercAppliedTax');
    
    PKTAXESMGR.NUPERCAPPLIEDTAX := INUPERCTAX;
    PKERRORS.POP;
EXCEPTION
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR
	    (
		PKERRORS.FSBLASTOBJECT,
		SQLERRM,
		SBERRMSG
	    );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END SETPERCAPPLIEDTAX;




















PROCEDURE SETTAXMINTOP 
    (
	INUMINIMUMTOP	IN	CATEIMPU.CAIMTOMI%TYPE
    )
    IS
BEGIN
    PKERRORS.PUSH ('pkTaxesMgr.SetTaxMinTop');
    
    PKTAXESMGR.NUTAXMINTOP := INUMINIMUMTOP;
    PKERRORS.POP;
EXCEPTION
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR
	    (
		PKERRORS.FSBLASTOBJECT,
		SQLERRM,
		SBERRMSG
	    );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END SETTAXMINTOP;








































































PROCEDURE SETTAXRATINGDATA
IS
    
    
    
    
    
    
    SBMODE      VARCHAR2(1);
    RCFACTURA   FACTURA%ROWTYPE;
    
    
    
BEGIN

    PKERRORS.PUSH('pkTaxesMgr.SetTaxRatingData');
    
    
    PKTAXESMGR.SETACCOUNTCOLLECTOR(RCCUENCOBR.CUCOCODI);
    
    RCFACTURA := PKTBLFACTURA.FRCGETRECORD(RCCUENCOBR.CUCOFACT);
    
    
    PKINSTANCEDATAMGR.SETCG_GENERATIONDATE( RCFACTURA.FACTFEGE );
    
    PKINSTANCEDATAMGR.SETCG_SUBSCRIBER( RCSUSCRIPC.SUSCCODI );
    
    PKINSTANCEDATAMGR.SETCG_BILLPERIODRECORD( RCPERIFACT );
    
	PKINSTANCEDATAMGR.SETCG_SUBSSERVICE(RCSERVSUSC.SESUNUSE);
    
	PKINSTANCEDATAMGR.SETCG_CATEGORY(RCSERVSUSC.SESUCATE);
	
	PKINSTANCEDATAMGR.SETCG_SUBCATEGORY(RCSERVSUSC.SESUSUCA);
	
	PKINSTANCEDATAMGR.SETCG_SERVICE(RCSERVSUSC.SESUSERV);
	
	PKINSTANCEDATAMGR.GETTG_EXEMODE( SBMODE );
	PKINSTANCEDATAMGR.SETTG_EXEMODE ( NVL( SBMODE, PKBOLIQUIDATETAX.FSBGETRERATINGMODE ) );
    
    PKINSTANCEDATAMGR.SETCG_PRODUCTRECORD( RCSERVSUSC );
    
    PKINSTANCEDATAMGR.SETCG_BILLPLAN( RCSERVSUSC.SESUPLFA );
    
    PKINSTANCEDATAMGR.SETCG_CATEGORY( RCSERVSUSC.SESUCATE );
    
    PKINSTANCEDATAMGR.SETCG_CONSUMPTIONCYCLE( RCSERVSUSC.SESUCICO );
    
    PKINSTANCEDATAMGR.SETCG_INSTALLDATE( RCSERVSUSC.SESUFEIN );
    
    
    
    PKINSTANCEDATAMGR.SETCG_LOCALITY( RCSERVSUSC.SESULOCA );
    
    PKINSTANCEDATAMGR.SETCG_QUITDATE( RCSERVSUSC.SESUFERE );
    
    PKINSTANCEDATAMGR.SETCG_SERVICE( RCSERVSUSC.SESUSERV );
    
    PKINSTANCEDATAMGR.SETCG_STATE( RCSERVSUSC.SESUDEPA );
    
    PKINSTANCEDATAMGR.SETCG_SUSPENSIONSTATUS( RCSERVSUSC.SESUESCO );
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETTAXRATINGDATA;




















PROCEDURE SETVALBASELIQTAX 
    (
	INUVALUEBASE	IN	CARGOS.CARGVALO%TYPE
    )
    IS
BEGIN
    PKERRORS.PUSH ('pkTaxesMgr.SetValBaseLiqTax');
    
    PKTAXESMGR.NUVALBASELIQ := INUVALUEBASE;
    PKERRORS.POP;
EXCEPTION
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR
	    (
		PKERRORS.FSBLASTOBJECT,
		SQLERRM,
		SBERRMSG
	    );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END SETVALBASELIQTAX;























































































PROCEDURE TAXESRERATING
(
    INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    INUCUENTA    IN  CUENCOBR.CUCOCODI%TYPE,
    INUSERVSUSCCON  IN  SERVSUSC.SESUNUSE%TYPE DEFAULT NULL
)
IS
    
    NUFACTURA          CUENCOBR.CUCOFACT%TYPE;
    NULASTCUCO         CUENCOBR.CUCOCODI%TYPE := -1;
    BOCONTINUE         BOOLEAN;
    TBCUCOCODIRANGE    PKBCCUENCOBR.TYTBCUCOCODIRANGE;
    TBCUCONUSERANGE    PKBCCUENCOBR.TYTBCUCONUSERANGE;
BEGIN

    PKERRORS.PUSH( 'pkTaxesMgr.TaxesReRating' );

    UT_TRACE.TRACE( 'pkTaxesMgr.TaxesReRating', 15 );
    
    
    IF ( INUCUENTA = PKBILLCONST.NULOSAT ) THEN
    
        PKERRORS.POP;
    	RETURN;
    
    END IF;

    
    NUFACTURA := PKTBLCUENCOBR.FNUGETACCOUNTSTATUS(INUCUENTA);

    LOOP
    
    	
    	BOCONTINUE := FALSE;

        
        
        PKBCCUENCOBR.GETACCRECEIVRANGEBILL
        (
            NUFACTURA,
            NULASTCUCO,
            BOCONTINUE,
            TBCUCOCODIRANGE,
            TBCUCONUSERANGE
        );

    	
        IF (TBCUCOCODIRANGE.FIRST IS NULL) THEN
    	    EXIT;
        END IF;

        
        FOR NUIND IN TBCUCOCODIRANGE.FIRST..TBCUCOCODIRANGE.LAST LOOP
        
            
            INITIALIZETAXRERATING;

            
            
            IF (INUSERVSUSC = TBCUCONUSERANGE(NUIND)) THEN
                GNUSERVSUSCCON := INUSERVSUSCCON;
            END IF;


            
            GETRERATINGPROCESSDATA
            (
                TBCUCONUSERANGE(NUIND),
                TBCUCOCODIRANGE(NUIND)
            );

            
            PKTAXESMGR.GENERATETAX;

            
            
            
            IF ( NOT BLOUTMEMORYTABLE ) THEN
            
                
                PKACTCART.UPDPORTFOLIO(  
                                       RCCUENCOBR.CUCOCODI,
                                       FA_BOCHARGECAUSES.FNUGENERICCHCAUSE(PKCONSTANTE.NULLNUM),
                                       RCSERVSUSC.SESUNUSE
                                       );

            
            END IF;

            
            RCCUENCOBR := NULL;
            RCSERVSUSC := NULL;

            
            NULASTCUCO := TBCUCOCODIRANGE(NUIND);
        
        END LOOP;

    	
        EXIT WHEN NOT BOCONTINUE;
    
    END LOOP;
    
    UT_TRACE.TRACE( 'Fin pkTaxesMgr.TaxesReRating', 15 );
    PKERRORS.POP;
     
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END TAXESRERATING;













































PROCEDURE GETTAXVALUE
(
    IRCPRODUCT            IN     SERVSUSC%ROWTYPE,
    INUBILLINGPERIOD      IN     PERIFACT.PEFACODI%TYPE,
	IOTBCHARGES           IN OUT PKBORATINGMEMORYMGR.TYTBLIQCHARGES,
	IBLRAISEERROR         IN     BOOLEAN DEFAULT TRUE,
	ONUTAXVALUEDEFER      OUT    CARGOS.CARGVALO%TYPE,
	ONUTAXVALUENODEFER    OUT    CARGOS.CARGVALO%TYPE,
	OTBTAXCHARGES         OUT    PKBORATINGMEMORYMGR.TYTBLIQCHARGES
)
IS

    
    RCSUBSCRIPTION      SUSCRIPC%ROWTYPE;

    
    
    RCBILLINGPERIOD     PERIFACT%ROWTYPE;
    
    
    TBRCTAXCONCEPTS     PKBILLINGCONCEPTSMGR.TYTBSERVSUSCCONCEPTS;

    
    TBNUTAXCONCLIQ      PKTBLCONCEPTO.TYCONCCODI;

    
    TBNUCONCEPTS        PKBCCONCBALI.TYCOBLCONC;

    
    NUTAXVALUE          CARGOS.CARGVALO%TYPE;

    
    NUCHARGESIDX        BINARY_INTEGER;

    
    NUTAXCONCIDX        BINARY_INTEGER;

    
    NUCONCIDX           BINARY_INTEGER;

    
    SBINDEX             VARCHAR2(200);

    
    RCSERVICIO          SERVICIO%ROWTYPE;

    
    RCCONCEPTO          CONCEPTO%ROWTYPE;

    
    NUPERICOSE          PERICOSE.PECSCONS%TYPE;
    
    
    NUINDEXTAXCHARGE    NUMBER;

BEGIN

    PKERRORS.PUSH(' pkTaxesMgr.GetTaxValue ');

    
    PKBORATINGMEMORYMGR.CLEARCONCEPTCACHE;
    PKBORATINGMEMORYMGR.CLEARPRODUCTCACHE;
    PKBORATINGMEMORYMGR.CLEARINSTANCEDATACNC;

    
    RCSUBSCRIPTION := PKTBLSUSCRIPC.FRCGETRECORD( IRCPRODUCT.SESUSUSC );

    
    IF ( INUBILLINGPERIOD IS NOT NULL ) THEN
    
        
        PKINSTANCEDATAMGR.GETRECORDBILLINGPERIOD( INUBILLINGPERIOD, RCBILLINGPERIOD );
    
    ELSE
    
        
        PKINSTANCEDATAMGR.GETRECORDBILLINGPERIODCURRENT( RCSUBSCRIPTION.SUSCCICL, RCBILLINGPERIOD );
    
    END IF;

    
    SBINDEX := IRCPRODUCT.SESUNUSE                          || '|' ||
               IRCPRODUCT.SESUSUSC                          || '|' ||
               IRCPRODUCT.SESUSERV                          || '|' ||
               IRCPRODUCT.SESUPLFA                          || '|' ||
               IRCPRODUCT.SESUCICL                          || '|' ||
               TO_CHAR(RCBILLINGPERIOD.PEFAFIMO,'ddmmyyyy') || '|' ||
               TO_CHAR(RCBILLINGPERIOD.PEFAFFMO,'ddmmyyyy') || '|' ||
               PKBILLCONST.FNUOBTTIPOIMP;

    UT_TRACE.TRACE( 'sbIndex: '||SBINDEX, 3 );
    
    IF ( NOT GTBPRODCONCEPTS.EXISTS( SBINDEX ) ) THEN

        UT_TRACE.TRACE( 'no se ha consultado para los criterios, accediendo a la vista...', 3 );
        
        PKBILLINGCONCEPTSMGR.GETBILLINGCONCEPTS( IRCPRODUCT.SESUNUSE,
                                                 IRCPRODUCT.SESUSUSC,
                                                 IRCPRODUCT.SESUSERV,
                                                 IRCPRODUCT.SESUPLFA,
                                                 IRCPRODUCT.SESUCICL,
                                                 RCBILLINGPERIOD.PEFAFIMO,
                                                 RCBILLINGPERIOD.PEFAFFMO,
                                                 PKBILLCONST.FNUOBTTIPOIMP,
                                                 GTBPRODCONCEPTS( SBINDEX ) );  
    END IF;

    TBRCTAXCONCEPTS := GTBPRODCONCEPTS( SBINDEX );

	
    PKSERVICEMGR.GETRECORD(IRCPRODUCT.SESUSERV, RCSERVICIO);

    UT_TRACE.TRACE( '--N�mero de conceptos de impuesto que aplican [' || TBRCTAXCONCEPTS.COUNT || ']', 3 );


    
    PKINSTANCEDATAMGR.SETCG_PRODUCTRECORD( IRCPRODUCT );
    
    PKINSTANCEDATAMGR.SETCG_BILLPERIODRECORD( RCBILLINGPERIOD );
    
    PKINSTANCEDATAMGR.SETCG_SUBSSERVICE (IRCPRODUCT.SESUNUSE);

    
    
    PKINSTANCEDATAMGR.SETTG_EXEMODE( PKBOLIQUIDATETAX.FSBGETBILLMODE );

    
    
    
    NUCHARGESIDX := IOTBCHARGES.FIRST;

    LOOP
    
        
        EXIT WHEN NUCHARGESIDX IS NULL;


        
        PKINSTANCEDATAMGR.SETCG_CONCEPT( IOTBCHARGES( NUCHARGESIDX ).NUCONCEPT );
        PKBORATINGMEMORYMGR.ADDCHARGE
        (
            IOTBCHARGES( NUCHARGESIDX ).NUVALUE,
            PKBILLCONST.CERO,
            PKCONSTANTE.NULLSB
        );

        TD( 'Concepto base [' || IOTBCHARGES( NUCHARGESIDX ).NUCONCEPT || ']' );
        TD( 'Valor [' || IOTBCHARGES( NUCHARGESIDX ).NUVALUE || ']' );

        
        PKBCCONCBALI.GETCONCEPTSBYBASECONC
        (
            IOTBCHARGES( NUCHARGESIDX ).NUCONCEPT,
            TBNUCONCEPTS
        );

        
        
        NUCONCIDX := TBNUCONCEPTS.FIRST;

        LOOP
        
            
            EXIT WHEN NUCONCIDX IS NULL;

            
            
            IF ( NOT TBNUTAXCONCLIQ.EXISTS( TBNUCONCEPTS( NUCONCIDX ) ) ) THEN
            
                TD( 'Concepto de impuesto [' || TBNUCONCEPTS( NUCONCIDX ) || ']' );

                
                
                TBNUTAXCONCLIQ( TBNUCONCEPTS( NUCONCIDX ) ) := TBNUCONCEPTS( NUCONCIDX );
            
            END IF;

            
            
            NUCONCIDX := TBNUCONCEPTS.NEXT( NUCONCIDX );
        
        END LOOP;

        
        TBNUCONCEPTS.DELETE;

        
        NUCHARGESIDX := IOTBCHARGES.NEXT( NUCHARGESIDX );
    
    END LOOP;

    
    
    NUTAXCONCIDX := TBRCTAXCONCEPTS.FIRST;

    
    ONUTAXVALUEDEFER := 0;
    ONUTAXVALUENODEFER := 0;
    
    
    OTBTAXCHARGES.DELETE;

    LOOP
    
        
        EXIT WHEN NUTAXCONCIDX IS NULL;

        UT_TRACE.TRACE('Concepto: '||TBRCTAXCONCEPTS( NUTAXCONCIDX ).NUCONCEPTO, 5);

        IF ( TBNUTAXCONCLIQ.EXISTS( TBRCTAXCONCEPTS( NUTAXCONCIDX ).NUCONCEPTO ) ) THEN
        
            
            PKINSTANCEDATAMGR.SETCG_CONCEPT( TBRCTAXCONCEPTS( NUTAXCONCIDX ).NUCONCEPTO );

            
            PKCONCEPTMGR.GETRECORD
            (
                TBRCTAXCONCEPTS( NUTAXCONCIDX ).NUCONCEPTO,
                RCCONCEPTO
            );

            
            PKBCPERICOSE.GETCACHECONSPERBYBILLPER
            (
                IRCPRODUCT.SESUCICO,
                RCBILLINGPERIOD.PEFACODI,
                NUPERICOSE,
                RCSERVICIO.SERVTICO,
                RCCONCEPTO.CONCTICC
            );

            
            PKINSTANCEDATAMGR.INSTANCIARPERACTUAL(NUPERICOSE);

            BEGIN
            
                TD( 'Procesando concepto de impuesto [' || TBRCTAXCONCEPTS( NUTAXCONCIDX ).NUCONCEPTO || ']' );
                TD( 'Ejecutando regla [' || TBRCTAXCONCEPTS( NUTAXCONCIDX ).SBREGLA || ']' );

                
                PKGENERALSERVICES.EXECDYNAMICFUNCTION
                (
                    TBRCTAXCONCEPTS( NUTAXCONCIDX ).SBREGLA,
                    NUTAXVALUE
                );

                UT_TRACE.TRACE('nuTaxValue: '||NUTAXVALUE, 3);

                
                IF ( PKCONCEPTMGR.FBLDEFERABLE(TBRCTAXCONCEPTS( NUTAXCONCIDX ).NUCONCEPTO) ) THEN
                    
                    ONUTAXVALUEDEFER:= ONUTAXVALUEDEFER + NUTAXVALUE;
                ELSE
                    
                    ONUTAXVALUENODEFER:= ONUTAXVALUENODEFER + NUTAXVALUE;
                END IF;
                
                
                NUINDEXTAXCHARGE := OTBTAXCHARGES.COUNT + 1;
                OTBTAXCHARGES(NUINDEXTAXCHARGE).NUCONCEPT := TBRCTAXCONCEPTS( NUTAXCONCIDX ).NUCONCEPTO;
                OTBTAXCHARGES(NUINDEXTAXCHARGE).NUVALUE   := NUTAXVALUE;
                
                PKCHARGEMGR.GETBASEVALUE( OTBTAXCHARGES(NUINDEXTAXCHARGE).NUBASEVAL );

                UT_TRACE.TRACE( 'Valor financiable impuestos [' || ONUTAXVALUEDEFER || ']',5);
                UT_TRACE.TRACE( 'Valor no financiable impuestos [' || ONUTAXVALUENODEFER || ']',5);

            EXCEPTION
                WHEN OTHERS THEN
                    
                    IF ( IBLRAISEERROR ) THEN
                        RAISE;
                    END IF;
            END;

            
        	PKCHARGEMGR.SETBASEVALUE( NULL );
        
        END IF;

        
        NUTAXCONCIDX := TBRCTAXCONCEPTS.NEXT( NUTAXCONCIDX );
    
    END LOOP;
    
    
    PKINSTANCEDATAMGR.SETTG_EXEMODE(NULL);

    PKERRORS.POP;


EXCEPTION

    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
    	RAISE;

    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
END GETTAXVALUE;


























FUNCTION FBLCATEGTAXEXISTS 
    (
	INUCONCEPT 	IN	CONCCAIM.COCMCONC%TYPE,
	ONUCATEGORYTAX	OUT	CONCCAIM.COCMCAIM%TYPE,
	INUCACHE	IN	NUMBER DEFAULT 1
    )
    RETURN BOOLEAN IS
	
    BOCATEGTAXEXISTS	BOOLEAN := TRUE;
BEGIN
    PKERRORS.PUSH ('pkTaxesMgr.fblCategTaxExists');
    
    BEGIN
	ONUCATEGORYTAX := PKTBLCONCCAIM.FNUGETCATEGORYTAX (INUCONCEPT, INUCACHE);
    EXCEPTION
	WHEN LOGIN_DENIED THEN
	    BOCATEGTAXEXISTS := FALSE;
    END;
    PKERRORS.POP;
    RETURN (BOCATEGTAXEXISTS);
EXCEPTION
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	PKERRORS.POP;
	RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR
	    (
		PKERRORS.FSBLASTOBJECT,
		SQLERRM,
		SBERRMSG
	    );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
END FBLCATEGTAXEXISTS;






















































FUNCTION FBLISTAXBASEVALUECONCEPT
(
    INUCONCEPTO  IN  CONCEPTO.CONCCODI%TYPE,
    INUSERVSUSC  IN  SERVSUSC.SESUNUSE%TYPE,
    INUCUENCOBR  IN  CUENCOBR.CUCOCODI%TYPE,
    INUSERVSUSCCON  IN  SERVSUSC.SESUNUSE%TYPE DEFAULT NULL
)
RETURN BOOLEAN
IS
    
    
    
    
    
    
    
    TNUTAXCONCEPTO_TMP   PKTBLCONCEPTO.TYCONCCODI; 
    TNUTAXBASECONC_TMP   PKTBLCONCEPTO.TYCONCCODI; 
    
    BLISTAXBASE BOOLEAN := FALSE;
    BLSEARCHEND BOOLEAN := FALSE;
    
    NUINDICE NUMBER;
    NUINDCONCIMP NUMBER;
    
    NUTAXCONCEPT  CONCEPTO.CONCCODI%TYPE;
    
    
    
    
    
    CURSOR CUTAXBASECONCEPTS 
    IS
	SELECT --+ INDEX (CONCEPTO PK_CONCEPTO)
           COBLCONC,COBLCOBA
	FROM   CONCBALI, CONCEPTO
	WHERE  CONCTICL = PKBILLCONST.FNUOBTTIPOIMP
	AND    COBLCONC =CONCCODI
	ORDER BY COBLCONC;
    
    
    
    
    PROCEDURE GETTAXBASECONCEPTS
    IS
        NUINDX	        NUMBER :=0;
    BEGIN
        PKERRORS.PUSH('pkTaxesMgr.fblIsTaxBaseValueConcept.GetTaxBaseConcepts');
        UT_TRACE.TRACE( 'pkTaxesMgr.fblIsTaxBaseValueConcept.GetTaxBaseConcepts', 16 );
	
	
	IF (CUTAXBASECONCEPTS%ISOPEN) THEN
	    CLOSE CUTAXBASECONCEPTS;
	END IF;
    	
	OPEN CUTAXBASECONCEPTS;
    	
	
	LOOP
    	
	    FETCH CUTAXBASECONCEPTS BULK COLLECT INTO   TNUTAXCONCEPTO_TMP,
						        TNUTAXBASECONC_TMP
	    LIMIT CNUNUM_REC_FETCHED;
	    
	    IF ( TNUTAXCONCEPTO_TMP.FIRST IS NULL ) THEN
		EXIT ;
	    END IF ;
	    NUINDICE := TNUTAXCONCEPTO_TMP.FIRST;
	    
	    LOOP
		EXIT WHEN NUINDICE IS NULL;
		NUINDX := NUINDX + 1;
		GTBBASETAXCONC(NUINDX).NUTAXCONCEPT := 
						TNUTAXCONCEPTO_TMP (NUINDICE);
		GTBBASETAXCONC(NUINDX).NUBASECONCEPT := 
						TNUTAXBASECONC_TMP (NUINDICE);
		NUINDICE := TNUTAXCONCEPTO_TMP.NEXT (NUINDICE);
	    END LOOP;
	    
	    TNUTAXCONCEPTO_TMP.DELETE;
	    TNUTAXBASECONC_TMP.DELETE;
	    
	    EXIT WHEN CUTAXBASECONCEPTS%NOTFOUND;

	END LOOP;
    	
	CLOSE CUTAXBASECONCEPTS;

        UT_TRACE.TRACE( 'Fin pkTaxesMgr.fblIsTaxBaseValueConcept.GetTaxBaseConcepts', 16 );
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
    	    PKERRORS.POP;
    	    RAISE;
    	WHEN OTHERS THEN
    	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	    PKERRORS.POP;
    	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

    END GETTAXBASECONCEPTS;
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.fblIsTaxBaseValueConcept');
    
    UT_TRACE.TRACE( 'pkTaxesMgr.fblIsTaxBaseValueConcept', 15 );
    
    

    IF (GTBBASETAXCONC.COUNT = 0) THEN
	GETTAXBASECONCEPTS;
    END IF;

    
    IF (INUSERVSUSCCON IS NOT NULL) THEN
        GNUSERVSUSCCON := INUSERVSUSCCON;
    END IF;

    
    
    PKTAXESMGR.GETTAXESCONCEPTS( INUSERVSUSC, INUCUENCOBR);
    
    
    
    NUINDCONCIMP := GTBCONCIMPNUSE.FIRST;

    LOOP
    
	EXIT WHEN NUINDCONCIMP IS NULL OR BLSEARCHEND;
	NUTAXCONCEPT := GTBCONCIMPNUSE(NUINDCONCIMP).NUCONCEPTO; 
	
	
	NUINDICE := GTBBASETAXCONC.FIRST;
	LOOP

	    EXIT WHEN NUINDICE IS NULL OR BLSEARCHEND;

	    IF ( GTBBASETAXCONC(NUINDICE).NUTAXCONCEPT  = NUTAXCONCEPT AND
		 GTBBASETAXCONC(NUINDICE).NUBASECONCEPT = INUCONCEPTO
	       )
	   THEN

		BLISTAXBASE := TRUE;
		BLSEARCHEND := TRUE;
		EXIT;

	   END IF;

	    
	    NUINDICE := GTBBASETAXCONC.NEXT(NUINDICE);

	END LOOP;

	
	NUINDCONCIMP := GTBCONCIMPNUSE.NEXT(NUINDCONCIMP);

    END LOOP;
    
    
    GNUSERVSUSCCON := NULL;

    UT_TRACE.TRACE( 'Fin pkTaxesMgr.fblIsTaxBaseValueConcept', 15 );
    PKERRORS.POP;
    RETURN BLISTAXBASE;
    

EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FBLISTAXBASEVALUECONCEPT;








































FUNCTION FBLISTAXCONCEPT
(	
    INUCONCEPTO  IN  CONCEPTO.CONCCODI%TYPE
) RETURN BOOLEAN
IS
    
    
    
    
    
    
    NUTIPOCOLI  CONCEPTO.CONCTICL%TYPE;
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.fblIsTaxConcept');
    
    IF (TBCONCEPTO.EXISTS(INUCONCEPTO)) THEN
	NUTIPOCOLI := TBCONCEPTO(INUCONCEPTO);
    ELSE
        
	NUTIPOCOLI := PKTBLCONCEPTO.FNUOBTTIPOCOLI (INUCONCEPTO);
	TBCONCEPTO(INUCONCEPTO) := NUTIPOCOLI;
    END IF;
    IF (NUTIPOCOLI = PKBILLCONST.FNUOBTTIPOIMP) THEN
        PKERRORS.POP;
	RETURN TRUE;
    END IF;
    PKERRORS.POP;
    RETURN FALSE;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FBLISTAXCONCEPT;

    


































































FUNCTION FNUCALCULATEVALUEBASELIQTAX
(
	INUTAXCONCEPT	IN  CONCEPTO.CONCCODI%TYPE,
	INUSERVSUSC 	IN  SERVSUSC.SESUNUSE%TYPE,
	INUCUENCOBR		IN  CUENCOBR.CUCOCODI%TYPE,
	IDTFINALDATEMOVE    IN  DATE
)
RETURN CARGOS.CARGVALO%TYPE
IS
    
    
    
    CSBFGCA CONSTANT VARCHAR2(10):= 'FGCA';
    CSBFGCT CONSTANT VARCHAR2(10):= 'FGCT';

    
    
    
     
    TNUCHARGECONCEPT_TMP   PKTBLCARGOS.TYCARGCONC; 
    TNUCHARGEVALUE_TMP     PKTBLCARGOS.TYCARGVALO; 

    
    NUPERCTAX           CONCBALI.COBLPOIM%TYPE;

    
    NUINDICE NUMBER;

    
    NUVALUEBASELIQUID  CARGOS.CARGVALO%TYPE := 0;

    
    SBPROGEXE	VARCHAR2(10);

    
    
    
    
    
    CURSOR CUSELECHARGESLIQ
	(
	    INUSUBSSERVICE          SERVSUSC.SESUNUSE%TYPE,
	    INUACCOUNTCOLLECTOR     CUENCOBR.CUCOCODI%TYPE,
	    IDTENDDATEMOV           PERIFACT.PEFAFFMO%TYPE
	)
    IS
          SELECT --+ INDEX (cargos IX_CARG_NUSE_CUCO_CONC)
                 CARGCONC CONCEPT,
                 DECODE (CARGSIGN, PKBILLCONST.DEBITO, CARGVALO,
                                   PKBILLCONST.CREDITO, CARGVALO * -1,
                                   PKBILLCONST.CERO) VALUECHARGE
          FROM   CARGOS
          WHERE  CARGNUSE = INUSUBSSERVICE
          AND    CARGCUCO = INUACCOUNTCOLLECTOR
                
                
                
                
                
                
                
                
                
          AND    CARGFECR  <= DECODE (INUACCOUNTCOLLECTOR,
                                     PKCONSTANTE.NULLNUM, IDTENDDATEMOV,
                                     CARGFECR)
          AND    CARGSIGN IN (PKBILLCONST.DEBITO, PKBILLCONST.CREDITO);

    
    
    

    PROCEDURE GETTAXBASECHARGES
    IS
        NUINDX          NUMBER :=0;
    BEGIN
        PKERRORS.PUSH('pkTaxesMgr.GetTaxBaseCharges');
        
    	
        IF (CUSELECHARGESLIQ%ISOPEN) THEN
            CLOSE CUSELECHARGESLIQ;
        END IF;
        OPEN CUSELECHARGESLIQ ( INUSERVSUSC, 
				INUCUENCOBR, 
			        IDTFINALDATEMOVE);
    	PKGENERALSERVICES.TRACEDATA('Cargando cargos base para impuesto ...');
        
    	GTBCHARGESACCOUNT.DELETE;
        LOOP
            FETCH CUSELECHARGESLIQ BULK COLLECT INTO TNUCHARGECONCEPT_TMP,
                                                      TNUCHARGEVALUE_TMP
            LIMIT CNUNUM_REC_FETCHED;
            
            IF ( TNUCHARGECONCEPT_TMP.FIRST IS NULL ) THEN
                EXIT ;
            END IF ;
            NUINDICE := TNUCHARGECONCEPT_TMP.FIRST;
            
            LOOP
                EXIT WHEN NUINDICE IS NULL;
                NUINDX := NUINDX + 1;
                GTBCHARGESACCOUNT(NUINDX).NUCONCEPT :=
                                                TNUCHARGECONCEPT_TMP (NUINDICE);
                GTBCHARGESACCOUNT(NUINDX).NUVALUE :=
                                                TNUCHARGEVALUE_TMP (NUINDICE);
                NUINDICE := TNUCHARGECONCEPT_TMP.NEXT (NUINDICE);
            END LOOP;
            
            TNUCHARGECONCEPT_TMP.DELETE;
            TNUCHARGEVALUE_TMP.DELETE;
            
            EXIT WHEN CUSELECHARGESLIQ%NOTFOUND;
        END LOOP;
        CLOSE CUSELECHARGESLIQ;
	
	PKTAXESMGR.APPLYADDBASEVALCHARGES(INUSERVSUSC,INUCUENCOBR);
	PKERRORS.POP;
    EXCEPTION
	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE;
	WHEN OTHERS THEN
	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	    PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETTAXBASECHARGES;
    
    PROCEDURE GETBASEVALUE
    IS
	NUIDX NUMBER;
    BEGIN
	PKERRORS.PUSH('pkTaxesMgr.GetBaseValue');
        
        
        
	NUIDX := GTBCHARGESACCOUNT.FIRST;
	LOOP
	    
	    EXIT WHEN NUIDX IS NULL;
            
	    
	    
            IF ( PKBASELIQCONCEPTMGR.FBLISTAXCONCLIQUIDBASE 
					(
					    INUTAXCONCEPT, 
					    GTBCHARGESACCOUNT(NUIDX).NUCONCEPT,
					    NUPERCTAX 
					)
		)
            THEN
                
                NUVALUEBASELIQUID := NUVALUEBASELIQUID + 
					    GTBCHARGESACCOUNT(NUIDX).NUVALUE ;
		PKGENERALSERVICES.TRACEDATA('Adiciona al valor base '||
					    GTBCHARGESACCOUNT(NUIDX).NUVALUE||
					    ' por el concepto '||
					    GTBCHARGESACCOUNT(NUIDX).NUCONCEPT);
            END IF;
	    
	    NUIDX := GTBCHARGESACCOUNT.NEXT(NUIDX);
	END LOOP;
	
	PKERRORS.POP;
    EXCEPTION
	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE;
	WHEN OTHERS THEN
	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	    PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETBASEVALUE;
    
    

    
    
    FUNCTION FBLISCALLEDBYCHARGEGENERATION
    RETURN BOOLEAN
    IS
    BEGIN
	PKERRORS.PUSH('
		pkTaxesMgr.fnuCalculateValueBaseLiqTax.fblIsCalledByChargeGeneration');
	
	SBPROGEXE := PKERRORS.FSBGETAPPLICATION;
	IF (SBPROGEXE IN (CSBFGCT, CSBFGCA)) THEN
	    PKERRORS.POP;
	    RETURN TRUE;
	END IF;
	PKERRORS.POP;
	RETURN FALSE;
    EXCEPTION
	WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
	    PKERRORS.POP;
	    RAISE;
	WHEN OTHERS THEN
	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	    PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END FBLISCALLEDBYCHARGEGENERATION;
    
    PROCEDURE GETTAXBASECHARGESFROMMEMORY
    IS
    BEGIN
        PKERRORS.PUSH('
                pkTaxesMgr.fnuCalculateValueBaseLiqTax.GetTaxBaseChargesFromMemory');
	GTBCHARGESACCOUNT.DELETE;
	
	PKBORATINGMEMORYMGR.GETRATEDCHRGARRAY(GTBCHARGESACCOUNT);
	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETTAXBASECHARGESFROMMEMORY;
    
    BEGIN
    PKERRORS.PUSH('pkTaxesMgr.fnuCalculateValueBaseLiqTax');
    
    
    IF (GNUACCOUNTNUMBER IS NULL OR GNUSUBSERVICE IS NULL OR
        GNUACCOUNTNUMBER <> INUCUENCOBR OR GNUSUBSERVICE <> INUSERVSUSC) THEN
	IF ( FBLISCALLEDBYCHARGEGENERATION ) THEN
	    PKGENERALSERVICES.TRACEDATA('Obtiene cargos de memoria');
	    
	    GETTAXBASECHARGESFROMMEMORY;
	ELSE 
	    PKGENERALSERVICES.TRACEDATA('Obtiene cargos de disco');
	    
	    GETTAXBASECHARGES;
	END IF;
	
	GNUACCOUNTNUMBER := INUCUENCOBR;
	
	GNUSUBSERVICE := INUSERVSUSC;
    END IF;
    
    GETBASEVALUE;
    
    PKERRORS.POP;
    RETURN NUVALUEBASELIQUID;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FNUCALCULATEVALUEBASELIQTAX;

    




















FUNCTION FNUGETACCOUNTCOLLECTOR RETURN CUENCOBR.CUCOCODI%TYPE IS
BEGIN
    
    RETURN (PKTAXESMGR.NUACCOUNTCOLLECTOR);
END FNUGETACCOUNTCOLLECTOR;





















FUNCTION FNUGETPERCAPPLIEDTAX RETURN CATEIMPU.CAIMPORC%TYPE IS
BEGIN
    
    RETURN (PKTAXESMGR.NUPERCAPPLIEDTAX);
END FNUGETPERCAPPLIEDTAX;



















FUNCTION FNUGETTAXMINTOP RETURN CATEIMPU.CAIMTOMI%TYPE IS
BEGIN
    
    RETURN (PKTAXESMGR.NUTAXMINTOP);
END FNUGETTAXMINTOP;



















FUNCTION FNUGETVALBASELIQTAX RETURN CARGOS.CARGVALO%TYPE IS
BEGIN
    
    RETURN (PKTAXESMGR.NUVALBASELIQ);
END FNUGETVALBASELIQTAX;




















FUNCTION FSBGETDOCUSUPPORT RETURN CARGOS.CARGDOSO%TYPE IS
BEGIN
    
    RETURN (PKTAXESMGR.SBDOCUSUPPORT);
END FSBGETDOCUSUPPORT;































FUNCTION GETADDBASEVALCHARGESTABLE
RETURN TYTBCHARGESACCOUNT
IS
    
    
    
    
    
    
    
    
    
BEGIN
    PKERRORS.PUSH('pkTaxesMgr.GetAddBaseValChargesTable');
    RETURN GTBADDCHARGESACCOUNT;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETADDBASEVALCHARGESTABLE;


    



















































    FUNCTION FNUGETTAXVALUE
    (
        IRCPRODUCT          IN  SERVSUSC%ROWTYPE,
        INUBILLINGPERIOD    IN  PERIFACT.PEFACODI%TYPE,
    	IOTBCHARGES         IN OUT PKBORATINGMEMORYMGR.TYTBLIQCHARGES,
    	IBLRAISEERROR       IN  BOOLEAN DEFAULT TRUE
    )
    RETURN NUMBER
    IS
        
        ONUTAXVALUEDEFER      CARGOS.CARGVALO%TYPE;
        ONUTAXVALUENODEFER    CARGOS.CARGVALO%TYPE;
        
        
        TBTAXCHARGES          PKBORATINGMEMORYMGR.TYTBLIQCHARGES;
    BEGIN
    
         PKERRORS.PUSH(' pkTaxesMgr.fnuGetTaxValue ');

        GETTAXVALUE
        (
            IRCPRODUCT,
            INUBILLINGPERIOD,
        	IOTBCHARGES,
        	IBLRAISEERROR,
        	ONUTAXVALUEDEFER,
        	ONUTAXVALUENODEFER,
        	TBTAXCHARGES
        );

        PKERRORS.POP;

        
        RETURN ONUTAXVALUEDEFER + ONUTAXVALUENODEFER;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END FNUGETTAXVALUE;

    





















    PROCEDURE SETPRODUCTOMADRECONSORCIO
    IS
    BEGIN
        GNUSESUDATA := GNUSESUDATACOPY;
        RCSERVSUSC := RCSERVSUSCCOPY;
        RCSUSCRIPC := RCSUSCRIPCCOPY;

        PKGENERALSERVICES.TRACEDATA('Seteando a producto madre consorcio:');
        PKGENERALSERVICES.TRACEDATA('Producto:' || GNUSESUDATA );
        PKGENERALSERVICES.TRACEDATA('Contrato:' || RCSERVSUSC.SESUSUSC );

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END SETPRODUCTOMADRECONSORCIO;

    




















    PROCEDURE SETPRODUCTOHIJOCONSORCIO
    IS
    BEGIN
        
        
        GNUSESUDATA := GNUSERVSUSCCON;

        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD (GNUSERVSUSCCON,
        				      PKCONSTANTE.CACHE);
        RCSUSCRIPC := PKTBLSUSCRIPC.FRCGETRECORD (RCSERVSUSC.SESUSUSC,
            					      PKCONSTANTE.CACHE);

        PKGENERALSERVICES.TRACEDATA('Reliquidando Impuesto con producto hijo consorcio:');
        PKGENERALSERVICES.TRACEDATA('Producto:' || GNUSESUDATA );
        PKGENERALSERVICES.TRACEDATA('Contrato:' || RCSUSCRIPC.SUSCCODI );
    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END SETPRODUCTOHIJOCONSORCIO;
    
    






























    PROCEDURE GETTAXVALUEWITHROUND
    (
        IRCPRODUCT          IN  SERVSUSC%ROWTYPE,
        INUBILLINGPERIOD    IN  PERIFACT.PEFACODI%TYPE,
        ITBCHARGES          IN  PKBORATINGMEMORYMGR.TYTBLIQCHARGES,
        ONUTAXVALUEDEFER    OUT CARGOS.CARGVALO%TYPE,
        ONUTAXVALUENODEFER  OUT CARGOS.CARGVALO%TYPE,
        OTBTAXCHARGES       OUT NOCOPY PKBORATINGMEMORYMGR.TYTBLIQCHARGES
    )
    IS
        
        NUTAXVALUEDEFER     CARGOS.CARGVALO%TYPE;
        NUTAXVALUENODEFER   CARGOS.CARGVALO%TYPE;

        
        TBBASECHARGES       PKBORATINGMEMORYMGR.TYTBLIQCHARGES;

        
        NUIDX               NUMBER;

    BEGIN
        UT_TRACE.TRACE('Inicio - pkTaxesMgr.GetTaxValueWithRound',5);

        
        TBBASECHARGES := ITBCHARGES;

        
        ONUTAXVALUEDEFER    := 0;
        ONUTAXVALUENODEFER  := 0;
        OTBTAXCHARGES.DELETE;

        
        GETTAXVALUE
        (
            IRCPRODUCT,
            INUBILLINGPERIOD,
        	TBBASECHARGES,
        	PKCONSTANTE.VERDADERO,
        	NUTAXVALUEDEFER,
        	NUTAXVALUENODEFER,
            OTBTAXCHARGES
        );
        
        

        FA_BOPOLITICAREDONDEO.APLICAPOLITICA
        (
          IRCPRODUCT.SESUNUSE,
          NUTAXVALUEDEFER
        );
        
        FA_BOPOLITICAREDONDEO.APLICAPOLITICA
        (
          IRCPRODUCT.SESUNUSE,
          NUTAXVALUENODEFER
        );
        
        ONUTAXVALUEDEFER := NUTAXVALUEDEFER;
        ONUTAXVALUENODEFER := NUTAXVALUENODEFER;
        
        
        NUIDX := OTBTAXCHARGES.FIRST;

        
        WHILE (NUIDX IS NOT NULL) LOOP

            

            FA_BOPOLITICAREDONDEO.APLICAPOLITICA
            (
                IRCPRODUCT.SESUNUSE,
                OTBTAXCHARGES(NUIDX).NUVALUE
            );
            
            UT_TRACE.TRACE('Valor imp. redondeado: '||OTBTAXCHARGES(NUIDX).NUVALUE,5);
            

            

            FA_BOPOLITICAREDONDEO.APLICAPOLITICA
            (
                IRCPRODUCT.SESUNUSE,
                OTBTAXCHARGES(NUIDX).NUBASEVAL
            );

            
            NUIDX := OTBTAXCHARGES.NEXT(NUIDX);
        END LOOP;

        UT_TRACE.TRACE('Fin - pkTaxesMgr.GetTaxValueWithRound',5);

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE;

        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETTAXVALUEWITHROUND;
    
    


















    FUNCTION FNUGETSERVSUSC RETURN SERVSUSC.SESUNUSE%TYPE IS
    BEGIN
        
        RETURN (PKTAXESMGR.GNUSESUDATACOPY);
    END FNUGETSERVSUSC;


























FUNCTION FSBVERSION RETURN VARCHAR2 IS

BEGIN
    
    RETURN (CSBVERSION);
END FSBVERSION;

    

END PKTAXESMGR;