PACKAGE BODY SA_BOSystem AS












































































































































    
    
    
    
    CSBVERSION   CONSTANT VARCHAR2(20)            := 'SAO220346';

    SYSTEM_DEFAULT_SCHEMA_VAR      CONSTANT VARCHAR2(30) := 'DEFAULT_SCHEMA'; 
    SYS_SECURITY_CONTEXT_CONST     CONSTANT VARCHAR2(30) := 'APO_SEC_CONTEXT';
    SYSTEM_MANAGER_ID_CONST        CONSTANT NUMBER(2)    := 1; 

    
    ORACLE_CONTEXT_NAME_CONST      CONSTANT VARCHAR2(30) := 'USERENV';
    ORACLE_CURRENT_SCHEMA_CONST    CONSTANT VARCHAR2(30) := 'CURRENT_SCHEMA';
    ORACLE_CURRENT_USER_CONST      CONSTANT VARCHAR2(30) := 'CURRENT_USER';
    ORACLE_SESSION_USER_CONST      CONSTANT VARCHAR2(30) := 'SESSION_USER';

    
    SYSTEM_USER_NAME_CONST         CONSTANT VARCHAR2(30) := 'SYSTEM_USER_NAME';
    SYSTEM_USER_ID_CONST           CONSTANT VARCHAR2(30) := 'SYSTEM_USER_ID';
    SYSTEM_USER_MASK_CONST         CONSTANT VARCHAR2(30) := 'SYSTEM_USER_MASK';
    SYSTEM_USER_TYPE_CONST         CONSTANT VARCHAR2(30) := 'SYSTEM_USER_TYPE';

    
    SYSTEM_PROCESS_NAME_CONST      CONSTANT VARCHAR2(30) := 'SYSTEM_PROCESS_NAME';
    SYSTEM_PROCESS_ID_CONST        CONSTANT VARCHAR2(30) := 'SYSTEM_PROCESS_ID';
    SYSTEM_PROCESS_VERSION_CONST   CONSTANT VARCHAR2(30) := 'SYSTEM_PROCESS_VERSION';

    SYSTEM_PROCESS_MODULE_ID_CONST CONSTANT VARCHAR2(30) := 'SYSTEM_PROCESS_MODULE_ID';
    SYSTEM_PROCESS_MOD_NAME_CONST  CONSTANT VARCHAR2(30) := 'SYSTEM_PROCESS_MODULE_NAME';
    SYSTEM_PROCESS_MENU_ID_CONST   CONSTANT VARCHAR2(30) := 'SYSTEM_PROCESS_MENU_ID';
    SYSTEM_PROCESS_MENU_NAME_CONST CONSTANT VARCHAR2(100):= 'SYSTEM_PROCESS_MENU_NAME';
    SYSTEM_PACKAGE_NAME_CONST      CONSTANT VARCHAR2(30) := 'SYSTEM_PACKAGE_NAME';

    SYSTEM_IS_SETTING_CONTEXT      CONSTANT VARCHAR2(30) := 'SYSTEM_IS_SETTING_CONTEXT';

	 
    USER_ACCESS_LEVEL_CREATE_CONST CONSTANT VARCHAR2(40) := 'ACCESS_LEVEL_CREATE';
    USER_GRAN_DISTR_ADMIN_CONST    CONSTANT VARCHAR2(40) := 'GRANTED_DISTRI_ADMIN';
    USER_CHILD_GRAN_DISADM_CONST   CONSTANT VARCHAR2(40) := 'CHILD_GRANTED_DIST_ADMIN';
    USER_ALL_GRAN_DIST_LEVEL_CONST CONSTANT VARCHAR2(40) := 'ALL_GRANTED_DIST_ADMIN_LEVEL';

    
    CNUUSER_ACCESS_ROLE_PRIVACY   CONSTANT VARCHAR2(40) := 'USER_ACCESS_ROLE_PRIVACY';
    
    CSBUSER_ACCESS_ROLE_POLICY  CONSTANT VARCHAR2(30) :=   'USER_ACCESS_ROLE_POLICY';
    
    CSBEXEC_WITHOUT_RESTR_POLICY  CONSTANT VARCHAR2(30) := 'EXEC_WITHOUT_RESTR_POLICY';
    
    
    CSBUSER_COMPANY_ID  CONSTANT VARCHAR2(30) := 'USER_COMPANY_ID';

    
    PACKAGE_NAME_CONST             CONSTANT VARCHAR2(30) := 'SA_BOSystem';

    
    SYSTEM_PREDEFINED_PASSWORD     CONSTANT VARCHAR2(30) := 'DEFAULT_SYSTEM_PASSW';
    MINIMUM_PASSWORD_LEN_CONST     CONSTANT VARCHAR2(30) := 'MINIMUM_PASSWORD_LEN';
    MAXIMUM_PASSWORD_LEN_CONST     CONSTANT VARCHAR2(30) := 'MAXIMUM_PASSWORD_LEN';
    TERMINAL_ACCESS_ENABLED_CONST  CONSTANT VARCHAR2(30) := 'TERMINAL_ACCESS_ENAB';

    ACCESS_ENABLED_IP              CONSTANT VARCHAR2(20) := 'IP'; 
    ACCESS_ENABLED_TERMINAL        CONSTANT VARCHAR2(20) := 'TERMINAL'; 
    NONE_STRING_CONST              CONSTANT VARCHAR2(10) := 'Ninguno';
    CONSOLE_MENU_CONST             CONSTANT VARCHAR2(10) := 'Consola';

    NONE_NUMBER_CONST              CONSTANT NUMBER(22)   := -1;
    NULL_PROCESS_ID_CONST          CONSTANT NUMBER(1)    := -1;
    NULL_USER_ID_CONST             CONSTANT NUMBER(1)    := -1;
    MINIMUM_PASSWORD_LENGTH        CONSTANT NUMBER(3)    := 30;

    
    CNUERR3654 CONSTANT NUMBER(4) := 3654; 
                                           
    CNUERR1095 CONSTANT NUMBER(4) := 1095; 
                                           
    CNUERR2071 CONSTANT NUMBER(4) := 2071; 
                                           
    CNUERR874  CONSTANT NUMBER(4) := 874;  
                                              
    CNUERR1487 CONSTANT NUMBER(4) := 1487; 
    CNUERR846  CONSTANT NUMBER(6) := 846;  
    CNUERR1840 CONSTANT NUMBER(6) := 1840; 
    CNUERR839  CONSTANT NUMBER(6) := 839;  
                                           
    CNUERR837  CONSTANT NUMBER(6) := 837;  
    CNUERR838  CONSTANT NUMBER(6) := 838;  

    ENVIROMENT_RAISE_APP_CONST  CONSTANT NUMBER(6):= -20433;

    
    CSBMIN_LENGTH_FOR_MASK   CONSTANT VARCHAR2(20) := 'MIN_LENGTH_FOR_MASK';
	 CSBMAX_LENGTH_FOR_MASK   CONSTANT VARCHAR2(20) := 'MAX_LENGTH_FOR_MASK';
	 CSBPASSWD_VALID_DAYS     CONSTANT VARCHAR2(20) := 'PASSWD_VALID_DAYS';
	 CSBTERMINAL_ACCESS_ENAB  CONSTANT VARCHAR2(20) := 'TERMINAL_ACCESS_ENAB';
	 CSBIDLE_TIME_BEFORE_CLO  CONSTANT VARCHAR2(20) := 'IDLE_TIME_BEFORE_CLO';

    
    

    
    
    

    BENTEREDSYSDATE    BOOLEAN := FALSE;

    TYPE ARRTYPEOBJECTS IS VARRAY(100) OF VARCHAR2(30);

    
    
    
    



















    
    PROCEDURE GRANTROLETOUSER
    (
        INUUSERTYPEID IN NUMBER
    ) AS

    BEGIN
        
        IF SA_BOSYSTEM.GETSYSTEMUSERID = SYSTEM_MANAGER_ID_CONST OR
           GETCURRENTORACLESCHEMA = SA_BOCONSTANT.CSBUSER_NVM THEN
            RETURN;
        END IF;

        
        IF  INUUSERTYPEID IN (SA_BOCONSTANT.CNUMANAGER_USER_TYPE_CONST,SA_BOCONSTANT.CNUDELEGATE_USER_TYPE_CONST) THEN
            
            DBMS_SESSION.SET_ROLE(SA_BOCONSTANT.CSBCONNECT_ROLE||','||
                                  SA_BOCONSTANT.CSBSYSTEM_OBJ_PRIVS_ROLE||','||
                                  SA_BOCONSTANT.CSBADMIN_SYSTEM_ROLE);
        ELSIF SA_BOCONSTANT.CNUPUBLIC_USER_TYPE_CONST = INUUSERTYPEID THEN
            
            DBMS_SESSION.SET_ROLE(SA_BOCONSTANT.CSBCONNECT_ROLE||','||
                                  SA_BOCONSTANT.CSBSYSTEM_OBJ_PRIVS_ROLE||','||
                                  SA_BOCONSTANT.CSBPUBLIC_SYSTEM_ROLE );
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
    
        RETURN CSBVERSION;
    
    END;

    PROCEDURE VALIDATENULL(SBVALUE IN VARCHAR2) IS
    BEGIN
        IF (SBVALUE IS NULL OR LENGTH ( SBVALUE ) = 0 ) THEN
			RAISE EX.CONTROLLED_ERROR;
		END IF;
    END;

    FUNCTION GETSYSTEMCURRENTSCHEMA RETURN VARCHAR2 IS
    BEGIN
         
         RETURN UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, ORACLE_CURRENT_SCHEMA_CONST);
    END;

    FUNCTION GETSYSTEMREPOSITORYSCHEMA RETURN VARCHAR2 IS
    BEGIN
       IF (GETSYSTEMCURRENTSCHEMA IS NULL) THEN
	       RETURN UPPER(GE_BOPARAMETER.FSBGET(SYSTEM_DEFAULT_SCHEMA_VAR)); 
       ELSE
           RETURN GETSYSTEMCURRENTSCHEMA;
       END IF;
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            
            ERRORS.SETERROR(SA_BOSYSTEM.CNUERR2071);
   		   RAISE EX.CONTROLLED_ERROR;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    FUNCTION GETSYSTEMCONTEXTNAME RETURN VARCHAR2 IS
    BEGIN
       RETURN SYS_SECURITY_CONTEXT_CONST||'_'||GETCURRENTORACLESCHEMA;
    END;

    FUNCTION GETCURRENTORACLESCHEMA RETURN VARCHAR2 IS
    

    BEGIN
        
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE(ORACLE_CONTEXT_NAME_CONST, ORACLE_CURRENT_SCHEMA_CONST);
    END;

    FUNCTION GETCURRENTORACLEUSER RETURN VARCHAR2 IS
    

    BEGIN
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE(ORACLE_CONTEXT_NAME_CONST, ORACLE_SESSION_USER_CONST);
    END;

    PROCEDURE SETSYSTEMUSERNAME(SBUSERNAME VARCHAR2) IS
    BEGIN
         
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_USER_NAME_CONST,
            SBUSERNAME);
    END;

    FUNCTION GETSYSTEMUSERNAME RETURN VARCHAR2 IS
    BEGIN
         RETURN UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_USER_NAME_CONST);
    END;

    PROCEDURE SETSYSTEMPACKAGENAME(SBPACKAGENAME VARCHAR2) IS
    BEGIN
         
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_PACKAGE_NAME_CONST,
            SBPACKAGENAME);
    END;

    FUNCTION GETSYSTEMPACKAGENAME RETURN VARCHAR2 IS
    BEGIN
         RETURN UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_PACKAGE_NAME_CONST);
    END;

    PROCEDURE SETSYSTEMUSERID(NUUSERID NUMBER) IS
    BEGIN
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_USER_ID_CONST,
            TO_CHAR(NUUSERID));
    END;

    PROCEDURE SETSYSTEMUSERMASK(SBVALUE VARCHAR2) IS
    BEGIN
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_USER_MASK_CONST, SBVALUE);
    END;


    FUNCTION GETSYSTEMUSERID RETURN NUMBER IS
    BEGIN
         RETURN NVL(TO_NUMBER(UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_USER_ID_CONST)),SA_BOUSER.FNUGETUSERID(SA_BOSYSTEM.GETCURRENTORACLEUSER));
    END;

    FUNCTION GETSYSTEMUSERMASK RETURN VARCHAR2 IS
    SBVALUE VARCHAR2(50);
    BEGIN
		SBVALUE:= UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_USER_MASK_CONST);
	    IF (SBVALUE IS NULL OR LENGTH(SBVALUE) = 0) THEN
            RETURN UT_CONTEXT.GETCONTEXTVARIABLE(ORACLE_CONTEXT_NAME_CONST, ORACLE_CURRENT_USER_CONST);
	    ELSE
	        RETURN SBVALUE;
	    END IF;
    END;

    FUNCTION GETSYSTEMUSERTYPE RETURN NUMBER IS
    BEGIN
       RETURN UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_USER_TYPE_CONST);
    END;

    PROCEDURE SETSYSTEMUSERTYPE(NUVALUE IN NUMBER) IS
    BEGIN
        UT_CONTEXT.SETCONTEXTVARIABLE
        (
           GETSYSTEMCONTEXTNAME,
           SYSTEM_USER_TYPE_CONST, TO_CHAR(NUVALUE)
        ) ;
    END;

    FUNCTION CHECKCURRENTUSERISSYSTEM RETURN NUMBER IS
    

       NUID    NUMBER := NULL;
       USERROW SA_USER%ROWTYPE;
    BEGIN
         
         
         UT_TRACE.TRACE('Looking DB User Name......',5);
         IF (SA_BCUSER.ISCURRENTUSERINDBUSERNAMEFIELD(GETCURRENTORACLEUSER,USERROW) = FALSE ) THEN
	          UT_TRACE.TRACE('Looking in User Mask......',5);
              
              IF(SA_BCUSER.ISCURRENTUSERINDBMASKFIELD(GETCURRENTORACLEUSER,USERROW) = FALSE ) THEN
	              RAISE EX.CONTROLLED_ERROR;
              END IF;
         END IF;
         
         RETURN NUID;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR OR NO_DATA_FOUND THEN
            
            ERRORS.SETERROR(SA_BOSYSTEM.CNUERR874,GETCURRENTORACLEUSER);
   		    RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    FUNCTION USEREXISEXISTINGINSYSTEM RETURN NUMBER IS
    BEGIN
       RETURN CHECKCURRENTUSERISSYSTEM;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    PROCEDURE SETSYSTEMCONTEXTFROMUSER (SBUSERMASK SA_USER.MASK%TYPE DEFAULT NULL) IS
    

       SBUSERNAME VARCHAR2(150) := NULL;
       USERROW    SA_USER%ROWTYPE;
       BISINDB    BOOLEAN;

       
       NUPERSONID GE_PERSON.PERSON_ID%TYPE;
    BEGIN
        
        
        UT_TRACE.TRACE('-> Retrieving System''s User information from SA_USER...',5);

        IF (SBUSERMASK IS NULL) THEN
            BISINDB := SA_BCUSER.ISCURRENTUSERINDBUSERNAMEFIELD(GETCURRENTORACLEUSER,USERROW);

            IF (BISINDB = FALSE) THEN
    	        BISINDB := SA_BCUSER.ISCURRENTUSERINDBMASKFIELD(GETCURRENTORACLEUSER,USERROW);

    	        IF (BISINDB = FALSE) THEN
    	           RAISE EX.CONTROLLED_ERROR;
    	        END IF;
            END IF;
        ELSE
	        BISINDB := SA_BCUSER.ISCURRENTUSERINDBMASKFIELD(SBUSERMASK,USERROW);

	        IF (BISINDB = FALSE) THEN
	           RAISE EX.CONTROLLED_ERROR;
	        END IF;
        END IF;

        NUPERSONID := GE_BCPERSON.FNUGETFIRSTPERSONBYUSERID(USERROW.USER_ID);
        IF (NUPERSONID IS NULL) THEN
            SBUSERNAME := RTRIM(USERROW.MASK);
        ELSE
            SBUSERNAME := RTRIM(DAGE_PERSON.FSBGETNAME_(NUPERSONID));
        END IF;

        




        UT_TRACE.TRACE('-> Putting System''s User information in System Context :'||GETSYSTEMCONTEXTNAME,5);

        SETSYSTEMUSERNAME(SBUSERNAME);
        SETSYSTEMUSERID(USERROW.USER_ID);
        SETSYSTEMUSERMASK(UPPER(TRIM(USERROW.MASK)));
        SETSYSTEMUSERTYPE(USERROW.USER_TYPE_ID);

        SETSYSTEM_IS_SETTING_CONTEXT (CONSTANTS.CNUTRUE);

        UT_TRACE.TRACE('-> Seting user ID :'||USERROW.USER_ID,5);

        

        UT_TRACE.TRACE('-> Is Setting Context :'||GETSYSTEM_IS_SETTING_CONTEXT,5);
















        
        SETUSERACCESSROLEPRIVACY
        (
           SA_BOUSERACCESSROLE.FNUGETUSERROLEPRIVACY(USERROW.USER_ID)
        );

        
        SETUSERACCESSROLEPOLICES
        (
            SA_BOROLEPOLICES.FSBGETROLEPOLICESUSER(GETSYSTEMUSERID)
        );


        SETEXECUTWITHOUTRESTRICPOLICY
        (
            SA_BOEXECUTABLE.FSBGETWITHOUTRESTRPOLICY
        );

        
        SETUSERCOMPANYID
        (
            USERROW.COMPANY_ID
        );

        UT_TRACE.TRACE('-> Retrieving System''s User information from SA_USER... Was success,5');

        SETSYSTEM_IS_SETTING_CONTEXT (CONSTANTS.CNUFALSE);
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            SETSYSTEM_IS_SETTING_CONTEXT (CONSTANTS.CNUFALSE);
            RAISE EX.CONTROLLED_ERROR;

       WHEN NO_DATA_FOUND THEN
            SETSYSTEM_IS_SETTING_CONTEXT (CONSTANTS.CNUFALSE);
            NULL;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            SETSYSTEM_IS_SETTING_CONTEXT (CONSTANTS.CNUFALSE);
            UT_TRACE.TRACE('-> ERROR :' ||SQLERRM,5);
            RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION GETSYSTEMPROCESSID RETURN NUMBER IS
    BEGIN
         
         RETURN NVL(TO_NUMBER(UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_ID_CONST)), NULL_PROCESS_ID_CONST);
    END;

    PROCEDURE SETSYSTEMPROCESSID(PROCCESSID IN NUMBER) IS
    BEGIN
         
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME, SYSTEM_PROCESS_ID_CONST,
            TO_CHAR(PROCCESSID)) ;
    END;

    PROCEDURE SETSYSTEMPROCESSNAME(PROCCESSNAME IN VARCHAR2) IS
    BEGIN
         
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_NAME_CONST,PROCCESSNAME) ;
    END;

    FUNCTION GETSYSTEMPROGRAM RETURN VARCHAR2 IS
    BEGIN
         
         RETURN UT_SESSION.GETPROGRAM;
    END;

    FUNCTION GETSYSTEMPROCESSNAME RETURN VARCHAR2 IS
    BEGIN
         
         RETURN NVL(UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            	SYSTEM_PROCESS_NAME_CONST),GETSYSTEMPROGRAM);
    END;

    PROCEDURE SETSYSTEMPROCESSVERSION(PROCCESVERSION IN VARCHAR2) IS
    BEGIN
         
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_VERSION_CONST,PROCCESVERSION) ;
    END;

    FUNCTION GETSYSTEMPROCESSVERSION RETURN VARCHAR2 IS
    BEGIN
         
         RETURN UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_VERSION_CONST);
    END;

    PROCEDURE SETSYSTEMPROCESSMODULEID(PROCCESMODULE IN VARCHAR2) IS
    BEGIN
         
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_MODULE_ID_CONST,PROCCESMODULE) ;
    END;

    FUNCTION GETSYSTEMPROCESSMODULEID RETURN VARCHAR2 IS
    BEGIN
         
         RETURN UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_MODULE_ID_CONST);
    END;

    PROCEDURE SETSYSTEMPROCESSMODULENAME(MODULENAME IN VARCHAR2) IS
    BEGIN
         
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_MOD_NAME_CONST,MODULENAME) ;
    END;

    FUNCTION GETSYSTEMPROCESSMODULENAME RETURN VARCHAR2 IS
    BEGIN
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_MOD_NAME_CONST);
    END;

    FUNCTION GETSYSTEMPROCESSMENUNAME RETURN VARCHAR2 IS
    BEGIN
        RETURN NVL(UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_MENU_NAME_CONST),CONSOLE_MENU_CONST);
    END;

    FUNCTION GETSYSTEMPROCESSMENUID RETURN NUMBER IS
    BEGIN
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_MENU_ID_CONST);
    END;


    PROCEDURE SETSYSTEMPROCESSMENUID(PROCCESMENUID IN NUMBER) IS
    BEGIN
         
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_MENU_ID_CONST,PROCCESMENUID) ;
    END;

    PROCEDURE SETSYSTEMPROCESSMENUNAME(PROCCESMENUNAME IN VARCHAR2) IS
    BEGIN
         
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            SYSTEM_PROCESS_MENU_NAME_CONST,PROCCESMENUNAME) ;
    END;

    PROCEDURE CREATESYSTEMCONTEXT IS
    BEGIN
        UT_CONTEXT.CREATECONTEXT(GETSYSTEMCONTEXTNAME, PACKAGE_NAME_CONST);
    EXCEPTION
        WHEN OTHERS THEN
            IF (SQLCODE = UT_CONTEXT.CNUORACLECONTEXTEXISTS) THEN
               RETURN;
            ELSE
       		   ERRORS.SETERROR;
               RAISE EX.CONTROLLED_ERROR;
            END IF;
         RETURN;
    END;

    PROCEDURE DROPSYSTEMCONTEXT IS
    BEGIN
        UT_CONTEXT.DROPCONTEXT(GETSYSTEMCONTEXTNAME);
    EXCEPTION
        WHEN OTHERS THEN
            IF (SQLCODE = UT_CONTEXT.CNUORACLECONTEXTNOTEXISTS) THEN
               RETURN;
            ELSE
       			ERRORS.SETERROR;
               RAISE  EX.CONTROLLED_ERROR;
            END IF;
         RETURN;
    END;

    PROCEDURE CREATECONTEXTANDDELETEFIRST IS
    BEGIN
         DROPSYSTEMCONTEXT;
         CREATESYSTEMCONTEXT;
    END;

    PROCEDURE SETSYSTEMCURRENTSCHEMA(SBSCHEMANAME VARCHAR2) IS
    BEGIN
         UT_CONTEXT.SETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
            ORACLE_CURRENT_SCHEMA_CONST, SBSCHEMANAME);
    END;

    PROCEDURE SETSYSTEMCONTEXTENVIROMENT (SBUSERMASK SA_USER.MASK%TYPE DEFAULT NULL)
     IS
    BEGIN

        UT_TRACE.TRACE('-> Creating context...'||GETSYSTEMCONTEXTNAME,5);
        CREATESYSTEMCONTEXT;
        

        UT_TRACE.TRACE('-> Set System''s User Current Shema... ',5);
        SETSYSTEMCURRENTSCHEMA(SA_BOSYSTEM.GETSYSTEMREPOSITORYSCHEMA);

        UT_TRACE.TRACE('-> Set System''s System Proccess ID to NULL...'||NULL_PROCESS_ID_CONST,5);
        SETSYSTEMPROCESSID(NULL_PROCESS_ID_CONST);

        UT_TRACE.TRACE('-> SET System''s System Proccess Name to NONE...'||CONSOLE_MENU_CONST,5);
        SETSYSTEMPROCESSNAME(CONSOLE_MENU_CONST);

        UT_TRACE.TRACE('-> Set System''s User Enviroment from USER data...',5);
        
       IF (SBUSERMASK IS NULL) THEN
        SETSYSTEMCONTEXTFROMUSER;
       ELSE
        SETSYSTEMCONTEXTFROMUSER(SBUSERMASK);
       END IF;

    EXCEPTION
  		  WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             RAISE  EX.CONTROLLED_ERROR;
    END;

    PROCEDURE VALIDATEENVIROMENT IS
    BEGIN
	    UT_TRACE.TRACE(' Validating User Name...',5);
       VALIDATENULL(GETSYSTEMUSERNAME) ;

	    UT_TRACE.TRACE(' Validating User Mask...',5);
       VALIDATENULL(GETSYSTEMUSERMASK) ;

	    UT_TRACE.TRACE(' Validating System User Id...',5);
       VALIDATENULL(GETSYSTEMUSERID) ;

	    UT_TRACE.TRACE(' Validating success completed ..',5);
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			  ERRORS.SETERROR(SA_BOSYSTEM.CNUERR1095);
   		  RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
			  ERRORS.SETERROR;
			  RAISE EX.CONTROLLED_ERROR;
    END;

    FUNCTION GETMAXIMUMPASSLENGTH RETURN VARCHAR2 IS
       
    BEGIN
       RETURN GE_BOPARAMETER.FNUGET(MAXIMUM_PASSWORD_LEN_CONST);
    END;

    FUNCTION GETMINIMUMPASSLENGTH RETURN VARCHAR2 IS
       
    BEGIN
       RETURN GE_BOPARAMETER.FNUGET(MINIMUM_PASSWORD_LEN_CONST);
    END;
    
    FUNCTION GETPASSCOMPFLAG
    (
       ISBMASK VARCHAR2
    )
    RETURN VARCHAR2 IS
       
       SBMASK SA_USER_VERIFIER.MASK%TYPE;
       CURSOR CUCURSOR IS
            SELECT MASK
            FROM SA_USER_VERIFIER
            WHERE MASK = UPPER(ISBMASK);
    BEGIN
       OPEN CUCURSOR;
       FETCH CUCURSOR INTO SBMASK;
       
       IF (CUCURSOR%FOUND) THEN
           CLOSE CUCURSOR;
           RETURN GE_BOCONSTANTS.CSBNO;
       END IF;

       RETURN GE_BOCONSTANTS.CSBYES;
    EXCEPTION
       WHEN OTHERS THEN
           IF (CUCURSOR%ISOPEN) THEN
                CLOSE CUCURSOR;
           END IF;
           RETURN GE_BOCONSTANTS.CSBNO;
    END GETPASSCOMPFLAG;
    
    PROCEDURE ENPASSCOMPCHECK
    (
       ISBMASK VARCHAR2
    )
    IS
       PRAGMA AUTONOMOUS_TRANSACTION;
       
    BEGIN
       DELETE FROM SA_USER_VERIFIER
       WHERE UPPER(MASK) = UPPER(ISBMASK);
       COMMIT;
    EXCEPTION
         WHEN OTHERS THEN
            NULL;
    END ENPASSCOMPCHECK;
    
    PROCEDURE DISPASSCOMPCHECK
    (
       ISBMASK VARCHAR2
    )
    IS
       PRAGMA AUTONOMOUS_TRANSACTION;
       
    BEGIN
       INSERT INTO SA_USER_VERIFIER (MASK)
       VALUES (UPPER(ISBMASK));
       COMMIT;
    EXCEPTION
         WHEN OTHERS THEN
            NULL;
    END DISPASSCOMPCHECK;

    PROCEDURE ASSGNROLETOSESSION(SBRUNTIMEROLENAME IN VARCHAR2,
        SBROLEPASSWORD IN VARCHAR2) IS
    BEGIN
        
        EXECUTE IMMEDIATE 'SET ROLE '||SBRUNTIMEROLENAME||
          ' IDENTIFIED BY '|| SBROLEPASSWORD;
        RETURN;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    PROCEDURE ASSGNROLETOSESSION(SBRUNTIMEROLENAME IN VARCHAR2) IS
    BEGIN
        DBMS_SESSION.SET_ROLE (SBRUNTIMEROLENAME);
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    PROCEDURE CHANGESCHEMATOCRNTUSER(SBREPOSITORYSCHEMA VARCHAR2) IS
    BEGIN
        EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = "'||
            SBREPOSITORYSCHEMA||'"';
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE CHECKGRANTEDROLECONNECTION IS
    

       NUCOUNT NUMBER(10) := 0;
    BEGIN
        
        
        
        IF NOT SA_BOROLE.FBLEXISTROLEBYUSER(GETSYSTEMUSERID,SA_BOROLE.SYSTEM_CONN_ROLE_VALUE) THEN
            
            ERRORS.SETERROR(SA_BOSYSTEM.CNUERR3654);
   		    RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE  EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE CHECKIPADDRESS IS
       NUCOUNT NUMBER(10) := 0;
    BEGIN
        IF NOT SA_BOTERMINAL.FBLEXISTUSERIPADDRESS(SA_BOSYSTEM.GETSYSTEMUSERID, UT_SESSION.GETIP) THEN
            
            ERRORS.SETERROR(SA_BOSYSTEM.CNUERR1487);
   		    RAISE EX.CONTROLLED_ERROR;
        END IF;
    EXCEPTION
        WHEN  EX.CONTROLLED_ERROR THEN
           RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE  EX.CONTROLLED_ERROR;
    END;

    
    PROCEDURE CHECKTERMINALNAMEACCESS IS
       NUCOUNT NUMBER(10) := 0;
    BEGIN

        IF NOT SA_BOTERMINAL.FBLEXISTUSERTERMINALNAME(SA_BOSYSTEM.GETSYSTEMUSERID, UT_SESSION.GETTERMINAL) THEN
            
            ERRORS.SETERROR(SA_BOSYSTEM.CNUERR1487);
   		   RAISE EX.CONTROLLED_ERROR;
        END IF;
        RETURN;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE  EX.CONTROLLED_ERROR;
    END;


    FUNCTION ISTERMINALACCESSENABLED RETURN VARCHAR2 IS
    


    BEGIN
        RETURN GE_BOPARAMETER.FSBGET(TERMINAL_ACCESS_ENABLED_CONST);
    END;

    PROCEDURE CHECKMIMIMUMPRIVILEGES IS
    BEGIN
       CHECKGRANTEDROLECONNECTION;

       IF SA_BOSYSTEM.GETSYSTEMUSERID = SYSTEM_MANAGER_ID_CONST THEN
          RETURN;
       END IF;

       IF ISTERMINALACCESSENABLED = ACCESS_ENABLED_TERMINAL THEN
            
           CHECKTERMINALNAMEACCESS;
       ELSIF ISTERMINALACCESSENABLED = ACCESS_ENABLED_IP THEN
            
	       CHECKIPADDRESS;
	   END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE  EX.CONTROLLED_ERROR;
    END;

    PROCEDURE CHANGEUSERLASTSUCCESLOGONDATE(INUUSERID IN NUMBER) IS
    
    
    BEGIN
        UPDATE SA_USER
        SET LAST_SUCC_LOGON_DATE = SYSDATE
        WHERE USER_ID = INUUSERID;

        COMMIT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             RAISE;

        WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE  EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE VALIDPASSWDEXPIRATION
    IS

        NUPASSWDDAYS    NUMBER;
        NUUSERTYPE      NUMBER;
        NUUSERID        SA_USER.USER_ID%TYPE;
        DTLASTLOGON     DATE;
        DTLASTUPDATE    DATE;

    BEGIN
        
        NUPASSWDDAYS := GE_BOPARAMETER.FNUGET('PASSWD_VALID_DAYS');
        NUUSERID := GETSYSTEMUSERID;
        NUUSERTYPE := DASA_USER.FNUGETUSER_TYPE_ID(NUUSERID);

        IF NUUSERTYPE <> 1 THEN

            DTLASTLOGON  := DASA_USER.FDTGETLAST_SUCC_LOGON_DATE(NUUSERID);
            DTLASTUPDATE := DASA_USER.FDTGETLAST_UPDATE_DATE(NUUSERID);


            IF (DTLASTLOGON IS NULL) THEN
                DTLASTLOGON := DASA_USER.FDTGETCREATION_DATE(NUUSERID);
            END IF;

            IF (DTLASTUPDATE IS NULL) THEN
                DTLASTUPDATE := DASA_USER.FDTGETCREATION_DATE(NUUSERID);
            END IF;
            
            
            IF (DTLASTLOGON IS NULL OR DTLASTUPDATE IS NULL ) THEN
                ERRORS.SETERROR(121722,TO_CHAR(NUPASSWDDAYS));
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            IF (SYSDATE - DTLASTLOGON > NUPASSWDDAYS AND SYSDATE - DTLASTUPDATE > NUPASSWDDAYS) THEN
                ERRORS.SETERROR(121722,TO_CHAR(NUPASSWDDAYS));
                RAISE EX.CONTROLLED_ERROR;
            END IF;

        END IF;

    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE SETSECURITYENVIROMENT(SBREPOSITORYESQUEMA IN VARCHAR2,
       SBUSERMASK SA_USER.MASK%TYPE DEFAULT NULL
    ) IS
    


       NUERRORCODE  GE_MESSAGE.MESSAGE_ID%TYPE;
       OSBERRORTEXT GE_MESSAGE.DESCRIPTION%TYPE;
       NUID         NUMBER(21);
    BEGIN
        
        
        UT_TRACE.TRACE('Inicio SETSecurityEnviroment',3);
        UT_TRACE.TRACE('SETSecurityEnviroment getCurrentOracleSchema:'||GETCURRENTORACLESCHEMA,3);
        UT_TRACE.TRACE('SETSecurityEnviroment sbRepositoryEsquema   :'||SBREPOSITORYESQUEMA,3);
        IF GETCURRENTORACLESCHEMA <> SBREPOSITORYESQUEMA THEN
	        CHANGESCHEMATOCRNTUSER(SBREPOSITORYESQUEMA);
	        UT_TRACE.TRACE('Changing the schema to '|| SBREPOSITORYESQUEMA,5);
	    END IF;
        UT_TRACE.TRACE('User is already in '|| SBREPOSITORYESQUEMA,5);

        
        UT_TRACE.TRACE('Checking if current user is existing..',5);
        NUID:= USEREXISEXISTINGINSYSTEM;
        
        
        UT_TRACE.TRACE('-> Establishing the System''s Security Context...',5);
       IF (SBUSERMASK IS NULL) THEN
        SETSYSTEMCONTEXTENVIROMENT;
       ELSE
        SETSYSTEMCONTEXTENVIROMENT(SBUSERMASK);
       END IF;

        IF GETSYSTEMUSERID IS NOT NULL THEN

           
           UT_TRACE.TRACE('-> Activa roles para el tipo de usuario: '||GETSYSTEMUSERTYPE,5);
           GRANTROLETOUSER(GETSYSTEMUSERTYPE);


           UT_TRACE.TRACE('-> Checking the minimum Connect privilege for User: '||GETSYSTEMUSERID,5);
           CHECKMIMIMUMPRIVILEGES;
           
           VALIDPASSWDEXPIRATION;

           UT_TRACE.TRACE('-> Updating the last sucess logon System',5);
           
           CHANGEUSERLASTSUCCESLOGONDATE(GETSYSTEMUSERID);
           UT_TRACE.TRACE('-> System Enviroment was successfully stablished ..',5);
        END IF;
        
    EXCEPTION
  	     WHEN EX.CONTROLLED_ERROR THEN
             ERRORS.GETERROR(NUERRORCODE, OSBERRORTEXT);
             UT_TRACE.TRACE('SETSecurityEnviroment :'||NUERRORCODE||OSBERRORTEXT,5);
             RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
		       ERRORS.SETERROR;
			    RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE SETSYSTEMENVIROMENT
    (
       SBPASSWORD VARCHAR2 DEFAULT NULL,
       RAISEAPPERROR BOOLEAN DEFAULT FALSE,
       SBUSERMASK SA_USER.MASK%TYPE DEFAULT NULL
    )
    IS
       NUERRORCODE  GE_MESSAGE.MESSAGE_ID%TYPE;
       OSBERRORTEXT GE_MESSAGE.DESCRIPTION%TYPE;
       SBSCHEMA     VARCHAR2(30);
    BEGIN

       SBSCHEMA := GETSYSTEMREPOSITORYSCHEMA;

       IF (SBUSERMASK IS NULL) THEN
        SETSECURITYENVIROMENT(SBSCHEMA);
       ELSE
        SETSECURITYENVIROMENT(SBSCHEMA, SBUSERMASK);
       END IF;

       SETOPTIMIZERENVIRONMENT;
       
       UT_TRACE.TRACE('SETSystemEnviroment FIN User:'||GETSYSTEMUSERID||':'||GETCURRENTORACLESCHEMA,3);
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(NUERRORCODE, OSBERRORTEXT);
            
            RAISE EX.CONTROLLED_ERROR; 
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR(NUERRORCODE, OSBERRORTEXT);
            RAISE_APPLICATION_ERROR(ENVIROMENT_RAISE_APP_CONST,OSBERRORTEXT);
    END;

    PROCEDURE SETOPTIMIZERENVIRONMENT
    IS
    BEGIN

        UT_SESSION.ENABLESORTMERGEJOINS(FALSE);
        UT_SESSION.ENABLEHASHJOINS(FALSE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE ISSECURITYENVIROMENTENABLED(IBRAISEAPLICATIONERROR IN BOOLEAN DEFAULT TRUE) IS
       NUERRORCODE NUMBER;
       OSBERRORTEXT VARCHAR2(256);
    BEGIN
        VALIDATEENVIROMENT;
    EXCEPTION
  		WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.GETERROR(NUERRORCODE, OSBERRORTEXT);
            IF (IBRAISEAPLICATIONERROR = TRUE) THEN
                DBMS_SESSION.RESET_PACKAGE;
                RAISE_APPLICATION_ERROR(ENVIROMENT_RAISE_APP_CONST,OSBERRORTEXT,FALSE);
            ELSE
                RAISE  EX.CONTROLLED_ERROR;
            END IF;
        WHEN OTHERS THEN
           RAISE  EX.CONTROLLED_ERROR;
    END;

    PROCEDURE UPDATEMINPASSWORDLENGTH(INULENGTH IN NUMBER) IS
    
    BEGIN
          GE_BOPARAMETER.UPDATEPARAMETERVALUE(MINIMUM_PASSWORD_LEN_CONST,INULENGTH);
    END;

    PROCEDURE SETTOBLANKPROCESSINFO IS
    


    BEGIN
        SA_BOSYSTEM.SETSYSTEMPROCESSID(NULL_PROCESS_ID_CONST);
        SA_BOSYSTEM.SETSYSTEMPROCESSNAME(CONSOLE_MENU_CONST);
        SA_BOSYSTEM.SETSYSTEMPROCESSVERSION(NONE_STRING_CONST);
        SA_BOSYSTEM.SETSYSTEMPROCESSMODULEID(NONE_NUMBER_CONST);
        SA_BOSYSTEM.SETSYSTEMPROCESSMODULENAME(NONE_STRING_CONST);
        SA_BOSYSTEM.SETSYSTEMPROCESSMENUID(NONE_NUMBER_CONST);
        SA_BOSYSTEM.SETSYSTEMPROCESSMENUNAME(NONE_STRING_CONST);
    END;

    PROCEDURE SETTOBLANKMENUOPTIONINFO IS
    



    BEGIN
        SA_BOSYSTEM.SETSYSTEMPROCESSMENUID(NONE_NUMBER_CONST);
        SA_BOSYSTEM.SETSYSTEMPROCESSMENUNAME(NONE_STRING_CONST);
    END;

    FUNCTION GETDEFINEDUSERPASSWORD RETURN VARCHAR2 IS
    
    BEGIN
       RETURN GE_BOPARAMETER.FSBGET(SA_BOSYSTEM.SYSTEM_PREDEFINED_PASSWORD);
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE VALIDATMINIMUMPASSLENGTHDATA(ISBVALUE IN VARCHAR2) IS
       NUVALUE NUMBER;
    BEGIN
  	   IF (UT_CONVERT.IS_NUMBER(ISBVALUE) = FALSE) THEN
   	       
       	   ERRORS.SETERROR(SA_BOSYSTEM.CNUERR846);
           RAISE  EX.CONTROLLED_ERROR;
  	   ELSE
 		   NUVALUE := ISBVALUE;
		   IF(NUVALUE IS NULL OR NUVALUE <= 0 OR (CEIL(NUVALUE) != NUVALUE ) OR NUVALUE > MINIMUM_PASSWORD_LENGTH) THEN
		   	   
        	   ERRORS.SETERROR(SA_BOSYSTEM.CNUERR846);
		       RAISE  EX.CONTROLLED_ERROR;
	       END IF;
       END IF;
    END;

    PROCEDURE VALIDATDEFAULTPASSWORD(ISBVALUE IN VARCHAR2) IS
    BEGIN
       IF (ISBVALUE IS NULL ) THEN
           
           ERRORS.SETERROR(SA_BOSYSTEM.CNUERR1840);
           RAISE  EX.CONTROLLED_ERROR;
       END IF;
    END;

    PROCEDURE UPDATEDEFAULTPASSWORD(SBPASSWORD IN VARCHAR2) IS
    
    BEGIN
       GE_BOPARAMETER.UPDATEPARAMETERVALUE(SYSTEM_PREDEFINED_PASSWORD,SBPASSWORD);
    END;

    PROCEDURE VALIDATFAILEDLOGONATTEMPTSDATA(ISBVALUE IN OUT VARCHAR2) IS
    BEGIN
       
       SA_BOPROFILE.VALIDATEGLOBALPARAMETERDATA(ISBVALUE, SA_BOSYSTEM.CNUERR839,TRUE);
    END;

    PROCEDURE VALIDATEPASSWORDGRACETIMEDATA(ISBVALUE IN OUT VARCHAR2) IS
    BEGIN
       
       SA_BOPROFILE.VALIDATEGLOBALPARAMETERDATA(ISBVALUE, SA_BOSYSTEM.CNUERR838);
    END;

    PROCEDURE VALIDATPASSWORDREUSEMAXDATA(ISBVALUE IN OUT VARCHAR2) IS
    BEGIN
    	
        SA_BOPROFILE.VALIDATEGLOBALPARAMETERDATA(ISBVALUE, SA_BOSYSTEM.CNUERR837,TRUE);
    END;

    FUNCTION GETGRANTEDADMINDISTRIBUTIONS RETURN VARCHAR2 IS
    BEGIN
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE
               (
                 GETSYSTEMCONTEXTNAME,
                 USER_GRAN_DISTR_ADMIN_CONST
               );
    END;

    FUNCTION GETCHILDGRANTDADMINDISTRI RETURN VARCHAR2 IS
    BEGIN
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE
               (
                 GETSYSTEMCONTEXTNAME,
                 USER_CHILD_GRAN_DISADM_CONST
               );
    END;
    
    FUNCTION GETUSERACCESSROLEPRIVACY RETURN VARCHAR2 IS
    BEGIN
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE
               (
                 GETSYSTEMCONTEXTNAME,
                 CNUUSER_ACCESS_ROLE_PRIVACY
               );
    END;


    FUNCTION GETUSERACCESSROLEPOLICES RETURN VARCHAR2 IS
    BEGIN
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE
               (
                 GETSYSTEMCONTEXTNAME,
                 CSBUSER_ACCESS_ROLE_POLICY
               );
    END;

    FUNCTION GETEXECUTWITHOUTRESTRICPOLICY RETURN VARCHAR2 IS
    BEGIN
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE
               (
                 GETSYSTEMCONTEXTNAME,
                 CSBEXEC_WITHOUT_RESTR_POLICY
               );
    END;


    FUNCTION FNUGETUSERCOMPANYID RETURN NUMBER IS
        NUVARIABLE NUMBER;
    BEGIN
        NUVARIABLE := TO_NUMBER(UT_CONTEXT.GETCONTEXTVARIABLE(GETSYSTEMCONTEXTNAME,
                                                              CSBUSER_COMPANY_ID));
        IF(NUVARIABLE IS NULL) THEN
            RETURN GE_BOPARAMETER.FNUGET('DEFAULT_COMPANY');
        END IF;

        RETURN NUVARIABLE;
    END;

    
    PROCEDURE SETGRANTEDADMINDISTRIBUTIONS(SBADMINDISARRAY IN VARCHAR2) IS
    BEGIN
       UT_CONTEXT.SETCONTEXTVARIABLE
       (
          GETSYSTEMCONTEXTNAME,
          USER_GRAN_DISTR_ADMIN_CONST,
          SBADMINDISARRAY
       );
    END;

    
    PROCEDURE SETCHILDGRANTDADMINDISTRI(SBCHILDADMINDISTRI IN VARCHAR2) IS
    BEGIN
       UT_CONTEXT.SETCONTEXTVARIABLE
       (
          GETSYSTEMCONTEXTNAME,
          USER_CHILD_GRAN_DISADM_CONST,
          SBCHILDADMINDISTRI
       );
    END;

    
    PROCEDURE SETUSERACCESSROLEPRIVACY(SBUSERACCESSROLEPRIVACY IN VARCHAR2) IS
    BEGIN
       UT_CONTEXT.SETCONTEXTVARIABLE
       (
          GETSYSTEMCONTEXTNAME,
          CNUUSER_ACCESS_ROLE_PRIVACY,
          SBUSERACCESSROLEPRIVACY
       );
    END;

    PROCEDURE SETUSERACCESSROLEPOLICES(SBUSERACCESSROLEPOLICES IN VARCHAR2) IS
    BEGIN
       

       UT_CONTEXT.SETCONTEXTVARIABLE
       (
          GETSYSTEMCONTEXTNAME,
          CSBUSER_ACCESS_ROLE_POLICY,
          SBUSERACCESSROLEPOLICES
       );
    END;


    PROCEDURE SETEXECUTWITHOUTRESTRICPOLICY(SBEXECUTWITHOUTRESTRIC IN VARCHAR2) IS
    BEGIN
       

       UT_CONTEXT.SETCONTEXTVARIABLE
       (
          GETSYSTEMCONTEXTNAME,
          CSBEXEC_WITHOUT_RESTR_POLICY,
          SBEXECUTWITHOUTRESTRIC
       );
    END;


    
    PROCEDURE SETUSERCOMPANYID (INUCOMPANYID IN SA_USER.COMPANY_ID%TYPE) IS
    BEGIN
       

       UT_CONTEXT.SETCONTEXTVARIABLE
       (
          GETSYSTEMCONTEXTNAME,
          CSBUSER_COMPANY_ID,
          TO_CHAR(INUCOMPANYID)
       );
    END;

    PROCEDURE SETSYSTEM_IS_SETTING_CONTEXT(SBADMINDISARRAY IN VARCHAR2) IS
    BEGIN
       UT_CONTEXT.SETCONTEXTVARIABLE
       (
          GETSYSTEMCONTEXTNAME,
          SYSTEM_IS_SETTING_CONTEXT,
          SBADMINDISARRAY
       );
    END;

    FUNCTION GETSYSTEM_IS_SETTING_CONTEXT RETURN VARCHAR2 IS
    BEGIN
        RETURN UT_CONTEXT.GETCONTEXTVARIABLE
               (
                 GETSYSTEMCONTEXTNAME,
                 SYSTEM_IS_SETTING_CONTEXT
               );
   END;

   PROCEDURE GRANTPKGFUNPRO IS
        SBROLENAME VARCHAR2(80):= 'SYSTEM_OBJ_PRIVS_ROLE';
        ARRPROCTOEXECOBJ ARRTYPEOBJECTS:= ARRTYPEOBJECTS
            (
                'ERRORS','UT_',
                'AB_BS','AB_BO','DAAB_','AB_BC',
                'AU_BS','AU_BO','DAAU_','AU_BC',
                'IF_BS','IF_BO','DAIF_','IF_BC',
                'IM_BS','IM_BO','DAIM_','IM_BC',
                'IN_BS','IN_BO','DAIN_','IN_BC',
                'MO_BS','MO_BO','DAMO_','MO_BC',
                'OR_BS','OR_BO','DAOR_','OR_BC',
                'PR_BS','PR_BO','DAPR_','PR_BC',
                'PS_BS','PS_BO','DAPS_','PS_BC',
                'GE_BS','GE_BO','DAGE_','GE_BC',
                'GR_BS','GR_BO','DAGR_','GR_BC',
                'SA_BS','SA_BO','DASA_','SA_BC',
                'WF_BS','WF_BO','DAWF_','WF_BC'
            );
        CURSOR CUR_OBJ IS
            SELECT OBJECT_NAME FROM USER_OBJECTS
            WHERE OBJECT_TYPE IN ('PACKAGE','FUNCTION','PROCEDURE');
    BEGIN
        
        FOR OB_REC IN CUR_OBJ LOOP
            FOR I IN 1..ARRPROCTOEXECOBJ.COUNT LOOP
                IF SUBSTR(OB_REC.OBJECT_NAME, 1,UPPER(LENGTH(ARRPROCTOEXECOBJ(I)))) = ARRPROCTOEXECOBJ(I) THEN
                   EXECUTE IMMEDIATE 'GRANT EXECUTE ON '||OB_REC.OBJECT_NAME||' to '||SBROLENAME;
                   
                END IF;
            END LOOP;
        END LOOP;
    END;

   PROCEDURE GRANTTABLEVIEW IS
        SBROLENAME VARCHAR2(80):= 'SYSTEM_OBJ_PRIVS_ROLE';
        ARRTABLESOBJ ARRTYPEOBJECTS:= ARRTYPEOBJECTS
            (
                'ERRORLOG','USERPACKAGES',
                'AB_','AU_','IF_','IM_','IN_','MO_',
                'OR_','PR_','PS_','GE_','GR_','SA_','WF_'
            );
        CURSOR CUR_TABLES IS
            SELECT OBJECT_NAME FROM USER_OBJECTS
            WHERE OBJECT_TYPE IN ('TABLE','VIEW');
    BEGIN
        
        FOR TAB_REC IN CUR_TABLES LOOP
            FOR I IN 1..ARRTABLESOBJ.COUNT LOOP
                IF SUBSTR(TAB_REC.OBJECT_NAME, 1,UPPER(LENGTH(ARRTABLESOBJ(I)))) = ARRTABLESOBJ(I) THEN
                  
                     EXECUTE IMMEDIATE 'GRANT SELECT ON '||TAB_REC.OBJECT_NAME||' to '||SBROLENAME;
                    
                END IF;
            END LOOP;
        END LOOP;
    END;


    PROCEDURE INSTANCEUSERCONTEXT
    IS
    BEGIN
        CREATESYSTEMCONTEXT;

        UT_TRACE.TRACE('-> Set System''s User Current Shema... ',5);
        SETSYSTEMCURRENTSCHEMA(SA_BOSYSTEM.GETSYSTEMREPOSITORYSCHEMA);

        UT_TRACE.TRACE('-> Set System''s User Enviroment from USER data...',5);
        
        SETSYSTEMCONTEXTFROMUSER;

        IF GETSYSTEMUSERID IS NOT NULL THEN
           UT_TRACE.TRACE('-> Updating the last sucess logon System',5);
           CHANGEUSERLASTSUCCESLOGONDATE(GETSYSTEMUSERID);
           UT_TRACE.TRACE('-> System Enviroment was successfully stablished ..',5);
        END IF;
    EXCEPTION
  		  WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             RAISE  EX.CONTROLLED_ERROR;
    END;
    
    FUNCTION FNUGETMINLENGTHFORMASK
    RETURN NUMBER
    IS
    BEGIN
        RETURN GE_BOPARAMETER.FNUGET(CSBMIN_LENGTH_FOR_MASK);
    EXCEPTION
  		  WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             RAISE  EX.CONTROLLED_ERROR;
    END FNUGETMINLENGTHFORMASK;
    
    FUNCTION FNUGETMAXLENGTHFORMASK
    RETURN NUMBER
    IS
    BEGIN
        RETURN GE_BOPARAMETER.FNUGET(CSBMAX_LENGTH_FOR_MASK);
    EXCEPTION
  		  WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             RAISE  EX.CONTROLLED_ERROR;
    END FNUGETMAXLENGTHFORMASK;
    
    PROCEDURE UPDATEPASSVALIDDAYS
    (
        INUPASSVALIDDAYS IN  NUMBER
    )
    IS
    BEGIN
        GE_BOPARAMETER.UPDATEPARAMETERVALUE(CSBPASSWD_VALID_DAYS,
                                            TO_CHAR(INUPASSVALIDDAYS));
    EXCEPTION
  		  WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             RAISE  EX.CONTROLLED_ERROR;
    END UPDATEPASSVALIDDAYS;
    
    PROCEDURE UPDATEMASKMINLENGTH
    (
        INUMINIMUMMASKLENGTH IN  NUMBER
    )
    IS
    BEGIN
        GE_BOPARAMETER.UPDATEPARAMETERVALUE(CSBMIN_LENGTH_FOR_MASK,
                                            TO_CHAR(INUMINIMUMMASKLENGTH));
    EXCEPTION
  		  WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             RAISE  EX.CONTROLLED_ERROR;
    END UPDATEMASKMINLENGTH;
    
    PROCEDURE UPDATEMASKMAXLENGTH
    (
        INUMAXIMUMMASKLENGTH IN  NUMBER
    )
    IS
    BEGIN
        GE_BOPARAMETER.UPDATEPARAMETERVALUE(CSBMAX_LENGTH_FOR_MASK,
                                            TO_CHAR(INUMAXIMUMMASKLENGTH));
    EXCEPTION
  		  WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             RAISE  EX.CONTROLLED_ERROR;
    END UPDATEMASKMAXLENGTH;

    PROCEDURE UPDATETERMINALACCESS
    (
        ISBTERMINALACCESS IN  VARCHAR2
    )
    IS
    BEGIN
        GE_BOPARAMETER.UPDATEPARAMETERVALUE(CSBTERMINAL_ACCESS_ENAB,
                                            ISBTERMINALACCESS);
    EXCEPTION
  		  WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             RAISE  EX.CONTROLLED_ERROR;
    END UPDATETERMINALACCESS;
    
    PROCEDURE UPDATEIDLETIMEBEFCLO
    (
        INUIDLETIMEBEFCLO IN  NUMBER
    )
    IS
    BEGIN
        GE_BOPARAMETER.UPDATEPARAMETERVALUE(CSBIDLE_TIME_BEFORE_CLO,
                                            TO_CHAR(INUIDLETIMEBEFCLO));
    EXCEPTION
  		  WHEN EX.CONTROLLED_ERROR THEN
             RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
             RAISE  EX.CONTROLLED_ERROR;
    END UPDATEIDLETIMEBEFCLO;
    
    



    PROCEDURE RECOVERPASSWORD
    (
        ISBMASK     IN      VARCHAR2
    ) IS
    
        NUPERSON_ID   GE_PERSON.PERSON_ID%TYPE;
    
        SBPASSWORD      VARCHAR2(8);      
        SBCODEDPASS     VARCHAR2(2000);
        SBEMAIL         GE_PERSON.E_MAIL%TYPE;
        
        
        CSBSUBJECT      CONSTANT VARCHAR2(32767) :=
            'Recuperaci?n de Contrase?a de Ingreso SmartFlex';
        SBBODY                  VARCHAR2(32767) :=
            'Estimado usuario {PERSON_NAME}: '||CHR(10)||CHR(10)||
            'Hemos recibido una petici?n de reinicio de la contrase?a de su usuario ({LOGIN}) del SmartFlex.'||CHR(10)||
            'Por esto la contrase?a de su cuenta ha sido cancelada y se le ha otorgado una contrase?a temporal.'||CHR(10)||CHR(10)||
            'La nueva contrase?a de inicio de sesi?n es: {PASSWORD}'||CHR(10)||CHR(10)||
            'Cuando inicie sesi?n de nuevo, se le pedir? que cambie la clave por una propia.'||CHR(10)||CHR(10)||
            'Los datos de la solicitud son los siguientes: '||CHR(10)||
            'Fecha: {DATE}'||CHR(10)||
            'Terminal: {TERMINAL} (IP: {IP}) '||CHR(10)||CHR(10)||
            'Usuario de la terminal: {OS_USER}'||CHR(10)||CHR(10)||
            'Si tiene alguna inquietud, por favor contacte al administrador del sistema.';
        
    BEGIN

        UT_TRACE.TRACE('Inicio [SA_BOSystem.RecoverPassword - isbMask: '||ISBMASK||']', 1);

        NUPERSON_ID := GE_BCPERSON.FNUGETFIRSTPERSONBYUSERID(SA_BOUSER.FNUGETUSERID(ISBMASK));

        SA_BOUSER.SETID(SA_BOUSER.FNUGETUSERID(ISBMASK));
        SETSYSTEMCONTEXTFROMUSER(ISBMASK);
        
        SBPASSWORD := DBMS_RANDOM.STRING('x', 8);
        
        SA_BOPASSWORDENCRYPT.CODE_PASSWORD(SA_BOUSER.GETORACLEUSERNAME, SBPASSWORD, SBCODEDPASS);
        
        SA_BOUSER.ALTERSYSTEMUSERPASSWORD(SBCODEDPASS);
        
        SA_BOUSER.ALTERSYSTEMUSEREXPIREPASSWORD;

        SBEMAIL    := DAGE_PERSON.FSBGETE_MAIL(NUPERSON_ID, 0);
        UT_TRACE.TRACE('nuPerson_id: '||NUPERSON_ID, 2);
        
        UT_TRACE.TRACE('sbEmail: '||SBEMAIL, 2);
        
        IF SBEMAIL IS NOT NULL THEN
        
            SBBODY := UT_STRING.STRREPLACE(SBBODY, '{PERSON_NAME}', DAGE_PERSON.FSBGETNAME_(NUPERSON_ID, 0));
            SBBODY := UT_STRING.STRREPLACE(SBBODY, '{LOGIN}', ISBMASK);
            SBBODY := UT_STRING.STRREPLACE(SBBODY, '{PASSWORD}', SBPASSWORD);
            SBBODY := UT_STRING.STRREPLACE(SBBODY, '{DATE}', UT_DATE.FDTSYSDATE);
            SBBODY := UT_STRING.STRREPLACE(SBBODY, '{TERMINAL}', UT_SESSION.GETMACHINE);
            SBBODY := UT_STRING.STRREPLACE(SBBODY, '{IP}', UT_SESSION.GETIP);
            SBBODY := UT_STRING.STRREPLACE(SBBODY, '{OS_USER}', UT_SESSION.GETOSUSER);

            GE_BONOTIFICATIONMAIL.SENDMAILADMNOTIF
            (
                SBEMAIL,           
                NULL,              
                CSBSUBJECT,        
                NULL,              
                SBBODY             
                                   
                                   
                                   
            );

        END IF;

        UT_TRACE.TRACE('Fin [SA_BOSystem.RecoverPassword]', 1);

    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    





    END;
END;