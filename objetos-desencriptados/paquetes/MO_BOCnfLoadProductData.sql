PACKAGE BODY MO_BOCnfLoadProductData IS
    
    
    
    
    CSBVERSION                      CONSTANT VARCHAR2(250)  := 'SAO202549';
    
    CNUERROR_110037                 CONSTANT NUMBER := 110037;
    CNUERROR_2008                   CONSTANT NUMBER := 2008;
    CNUERROR_113342                 CONSTANT NUMBER := 113342;
    CNUERROR_113442                 CONSTANT NUMBER := 113442;
    CNUERROR_114162                 CONSTANT NUMBER := 114162;

    
    CNUAUTRETTYP                    CONSTANT NUMBER := GE_BOPARAMETER.FNUGET('PROV_RETIRE_TYPE');

    
    CSBMO_EXECUTOR_LOG_MOT          CONSTANT VARCHAR2(20) := 'MO_EXECUTOR_LOG_MOT';
    CSBMO_RETIRE                    CONSTANT VARCHAR2(20) := 'MO_RETIRE';
    CSBMO_RETIRE_COMP               CONSTANT VARCHAR2(20) := 'MO_RETIRE_COMP';
    CSBMO_SUSPENSION                CONSTANT VARCHAR2(20) := 'MO_SUSPENSION';
    CSBMO_SUSPENSION_COMP           CONSTANT VARCHAR2(20) := 'MO_SUSPENSION_COMP';
    CSBMO_ADDRESS_COMP              CONSTANT VARCHAR2(20) := 'MO_ADDRESS_COMP';
    CSBMO_BILL_DATA_CHANGE          CONSTANT VARCHAR2(20) := 'MO_BILL_DATA_CHANGE';
    CSBMO_DATA_CONNECTION           CONSTANT VARCHAR2(20) := 'MO_DATA_CONNECTION';
    CSBMOPROCESS                    CONSTANT VARCHAR2(20) := 'MO_PROCESS';
    CSBMOEQUIPMENT                  CONSTANT VARCHAR2(20) := 'MO_EQUIPMENT';
    CSBMO_SPECIAL_SERVICE           CONSTANT VARCHAR2(20) := 'MO_SPECIAL_SERVICE';
    CSBMO_PBX_COMPONENT             CONSTANT VARCHAR2(20) := 'MO_PBX_COMPONENT';
    CSBMO_PACKAGES_ASSO             CONSTANT VARCHAR2(20) := 'MO_PACKAGES_ASSO';

    
    CSBTAGIBACAMBIOTECNO            CONSTANT VARCHAR2(100) := 'P_INTERNETBA_CAMBIOTECNO';

    
    CSBTAGPRMOGENERSUSPEVOL         CONSTANT VARCHAR2(100) := PS_BOPRODUCTMOTIVE.CSBTAGGENERSUSPEVOL;
    
    CSBTAGPRMOGENERRECONVOL         CONSTANT VARCHAR2(100) := PS_BOPRODUCTMOTIVE.CSBTAGGENERRECONVOL;
    
    CSBTAGGENADICIONEXT             CONSTANT VARCHAR2(100) := 'M_GEN_ADICIONEXT';
    
    CSBTAGGENERACTUNIDHA            CONSTANT VARCHAR2(100) := 'M_GENER_ACTUNIDHABIT';
    
    CSBTAGGENREINST                 CONSTANT VARCHAR2(100) := 'M_GENER_REINSTAL';
    
    CSBTAGIBACAMBIOPRODASOC         CONSTANT VARCHAR2(100) := PS_BOPRODUCTMOTIVE.CSBTAGIBACAMBIOPRODASOC;
     
    CSBTAGGENEQUIRECUPMO            CONSTANT VARCHAR2(100) :='M_GENER_EQUIRECUP';
    
    CSBTAGGENDESACTSS               CONSTANT VARCHAR2(100) :='M_GENER_DESACTIVSS';
    
    CSBTAGGENDESPROGPBXMO           CONSTANT VARCHAR2(100) :='M_GENER_DESPROGPBX';

    
    CSBTAGADICIONEXT                CONSTANT VARCHAR2(100) := 'C_GEN_ADICIONEXT_GEN';
    
    CSBTAGACTUNIDHAB                CONSTANT VARCHAR2(100) := 'C_GENER_ACTUNIDHABIT';
    
    CSBTAGGENEQUIRECUPCO            CONSTANT VARCHAR2(100) := 'C_GENER_EQUIRECUP';
    
    CSBTAGGENEQUIRECUPCHILD         CONSTANT VARCHAR2(100) := 'C_GEN_EQUIRECUP_CHILD';
    
    CSBTAGGENDESACTIVSS             CONSTANT VARCHAR2(100) :='C_GENER_DESACTIVSS';
    
    CSBTAGGENDESACTIVSSCHILD        CONSTANT VARCHAR2(100) :='C_GENER_DESACTIVSS_CHILD';
    
    CSBTAGGENDESPROGPBXCO           CONSTANT VARCHAR2(100) :='C_GENER_DESPROGPBX';

    
    CSBTAGGENERSUSPVOL              CONSTANT VARCHAR2(100) := 'C_GENER_SUSPVOL';
    
    CSBTAGGENERRECONVOL             CONSTANT VARCHAR2(100) := 'C_GENER_RECONVOL';
    
    CSBTAGGENERTRASLCHILD           CONSTANT VARCHAR2(100) := 'C_GENER_TRASL_CHILD';
    
    CSBTAGGENERCHANNUM              CONSTANT VARCHAR2(100) := 'C_GENER_CAMBNUM';
    
    CSBTAGGENERCHANNUMCHILD         CONSTANT VARCHAR2(100) := 'C_GENER_CAMBNUM_CHILD';
    
    CSBTAGGENEREINSTCOMP            CONSTANT VARCHAR2(100) := 'C_GENER_REINSTAL';
    
    CSBTAGIBACAMBPRDASOCINT         CONSTANT VARCHAR2(100) := 'C_INTERNETBA_CAMBIOPRODASOC_INTERNET';
    
    CSBTAGGENEQUICHANGE             CONSTANT VARCHAR2(100) := 'C_GENER_EQUICHANGE';
    
    CSBTAGGENEQUICHANGECHILD        CONSTANT VARCHAR2(100) := 'C_GENER_EQUICHANGE_CHILD';
    
    CSBTAGGEN                       CONSTANT VARCHAR2(100) :='C_GENER';
    
    CSBTAGGENERCAMBIOTECNO          CONSTANT VARCHAR2(100) :='C_GENER_CAMBIOTECNO';
    
    CSBTAGGENERCAMBIOTECNOCHILD     CONSTANT VARCHAR2(100) :='C_GENER_CAMBIOTECNO_CHILD';

    CSBCOMPONENT_ID_PROD            CONSTANT VARCHAR2(50) := 'COMPONENT_ID_PROD';
    CSBMO_INTEL_NETW_COMP           CONSTANT VARCHAR2(50) := 'MO_INTEL_NETW_COMP';
    CSBPERCENT                      CONSTANT VARCHAR2(50) := 'PERCENT';
    CSBMO_COMMENT_COMP              CONSTANT VARCHAR2(50) := 'MO_COMMENT_COMP';
    CSBCOMMENT_COMP                 CONSTANT VARCHAR2(50) := 'COMMENT_COMP';

    GSBTY_ELEM_CHANG_NUMBER GE_PARAMETER.VALUE%TYPE;
    GNUELEMENTS_SUGGES_SYST GE_PARAMETER.VALUE%TYPE;
    GNUTYPE_ELEM_NUMBER     GE_PARAMETER.VALUE%TYPE;
    GNUELEMENTS_TO_RELEASE  GE_PARAMETER.VALUE%TYPE;
    GNUELEMENTS_SUGGESTED   GE_PARAMETER.VALUE%TYPE;
    GNUELEMENTS_OBLIGATED   GE_PARAMETER.VALUE%TYPE;
    GNUIMGRO_SFRAME_ANALOG  GE_PARAMETER.VALUE%TYPE;

    GNUVOLRETTYP            GE_PARAMETER.VALUE%TYPE;
    GNUPAYRETTYP            GE_PARAMETER.VALUE%TYPE;

    GNUREGSTATUSCOMP        GE_PARAMETER.VALUE%TYPE;
    GNUATTENDPRODEXIST      GE_PARAMETER.VALUE%TYPE;

    GNUCOMPONENTNUMBER      MO_COMPONENT.COMPONENT_NUMBER%TYPE;

    
    
    
    TYPE TYRCCHILDSINFO IS RECORD(NUPARENTINDEX     NUMBER,
                                  NUCHILDINDEX      NUMBER,
                                  NUSTATUSREGISTER  NUMBER,         
                                  NUADDRESSID       NUMBER,         
                                  NUPREMISEID       NUMBER,         
                                  SBTAGNAME         VARCHAR2(1024), 
                                  NUMOTCOMP         NUMBER,         
                                  NUCATEGORYFORELEMS NUMBER,
                                  NUCOMPONENTTYPEID  NUMBER
                                  );

    
    
    
    TYPE TYTBCOMPCHILD  IS TABLE OF TYRCCHILDSINFO INDEX BY BINARY_INTEGER;

    
    
    
    TYPE TYTBCOMPCHILDS  IS TABLE OF TYTBCOMPCHILD INDEX BY BINARY_INTEGER;

    









    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    











    PROCEDURE LOADPARAM
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadParam',3);

        GSBTY_ELEM_CHANG_NUMBER := GE_BOPARAMETER.FSBGET('TY_ELEM_CHANG_NUMBER');
        GNUELEMENTS_SUGGES_SYST := GE_BOPARAMETER.FNUGET('ELEMENTS_SUGGES_SYST');
        GNUTYPE_ELEM_NUMBER := GE_BOPARAMETER.FNUGET('TYPE_ELEM_NUMBER');
        GNUELEMENTS_TO_RELEASE := IM_BOCONSTANTS.CNUCATEGORYWITHDRAW;
        GNUELEMENTS_SUGGESTED := GE_BOPARAMETER.FNUGET('ELEMENTS_SUGGESTED');
        GNUELEMENTS_OBLIGATED := GE_BOPARAMETER.FNUGET('ELEMENTS_OBLIGATED');
        
        GNUVOLRETTYP := GE_BOPARAMETER.FNUGET('RETIRETYPESC');
        
        GNUPAYRETTYP := GE_BOPARAMETER.FNUGET('PAY_RETI_TYPE');
        
        GNUIMGRO_SFRAME_ANALOG := GE_BOPARAMETER.FNUGET('IMGRO_SFRAME_ANALOG');


        GNUREGSTATUSCOMP    :=  GE_BOPARAMETER.FNUGET('STATUS_REG_COMP');
        GNUATTENDPRODEXIST  :=  GE_BOPARAMETER.FNUGET('STATUS_ATTE_PROD_EXI');

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadParam',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADPARAM;


    




























    PROCEDURE GETINSTANCEDATA
        (
        IBLLOADALLCOMPONENT IN BOOLEAN,
        OSBCURRENTINSTANCE  OUT NOCOPY VARCHAR2,
        ONUPRODUCTID        OUT NOCOPY NUMBER,
        ONUPRODUCTMOTIVEID  OUT NOCOPY NUMBER,
        ONUPRODMOTIVECOMPID OUT NOCOPY NUMBER,
        ONUCOMPONENTIDPROD  OUT NOCOPY NUMBER
        )
    IS
        SBPRODUCTID         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTMOTIVEID   GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODMOTIVECOMPID  GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCOMPONENTTYPEID   GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSERVICENUMBER     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCLASSSERVICEID    GE_BOINSTANCECONTROL.STYSBVALUE;

        CURFCOMPONENTPROD   CONSTANTS.TYREFCURSOR;
        RCCOMPONENTPROD     DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.GetInstanceData',3);
        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,OSBCURRENTINSTANCE);

        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('PRODUCT_ID',SBPRODUCTID);
        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('PRODUCT_MOTIVE_ID',SBPRODUCTMOTIVEID);
        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('PROD_MOTIVE_COMP_ID',SBPRODMOTIVECOMPID);

        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('COMPONENT_TYPE_ID',SBCOMPONENTTYPEID);
        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('SERVICE_NUMBER',SBSERVICENUMBER);
        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('CLASS_SERVICE_ID',SBCLASSSERVICEID);

        UT_TRACE.TRACE('Producto:['||SBPRODUCTID||']Motivo Producto:['||SBPRODUCTMOTIVEID||']Composici�n:['||SBPRODMOTIVECOMPID||']',4);
        UT_TRACE.TRACE('Tipo Componente:['||SBCOMPONENTTYPEID||']N�mero de Servicio:['||SBSERVICENUMBER||']Clase de Servicio:['||SBCLASSSERVICEID||']',4);

        ONUPRODUCTID := TO_NUMBER(SBPRODUCTID);
        ONUPRODUCTMOTIVEID := TO_NUMBER(SBPRODUCTMOTIVEID);
        ONUPRODMOTIVECOMPID := TO_NUMBER(SBPRODMOTIVECOMPID);

        
        CURFCOMPONENTPROD := PR_BCCOMPONENT.FRFGETCOMPONENTSBYPRODUCTID(ONUPRODUCTID,IBLLOADALLCOMPONENT);
        FETCH CURFCOMPONENTPROD INTO RCCOMPONENTPROD;
        WHILE CURFCOMPONENTPROD%FOUND LOOP
            UT_TRACE.TRACE('Tipo Componente:['||RCCOMPONENTPROD.COMPONENT_TYPE_ID||']N�mero de Servicio:['||RCCOMPONENTPROD.SERVICE_NUMBER||']',18);
            UT_TRACE.TRACE('Clase de Servicio:['||RCCOMPONENTPROD.CLASS_SERVICE_ID||']',18);

            
            IF  RCCOMPONENTPROD.COMPONENT_TYPE_ID = TO_NUMBER(SBCOMPONENTTYPEID)
                AND
                RCCOMPONENTPROD.SERVICE_NUMBER = SBSERVICENUMBER
            THEN
                
                IF (SBCLASSSERVICEID IS NOT NULL) THEN
                    IF (RCCOMPONENTPROD.CLASS_SERVICE_ID = SBCLASSSERVICEID) THEN
                        ONUCOMPONENTIDPROD := RCCOMPONENTPROD.COMPONENT_ID;
                        EXIT;
                    END IF;
                ELSE
                    ONUCOMPONENTIDPROD := RCCOMPONENTPROD.COMPONENT_ID;
                    EXIT;
                END IF;
            END IF;

            FETCH CURFCOMPONENTPROD INTO RCCOMPONENTPROD;
        END LOOP;
        CLOSE CURFCOMPONENTPROD;

        UT_TRACE.TRACE('Componente del Producto:['||ONUCOMPONENTIDPROD||']',4);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.GetInstanceData',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTPROD);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENTPROD);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    





























    PROCEDURE LOADDATACOMPONENT (
            IBLLOADCHILD        IN BOOLEAN,
            IBLLOADALLCOMPONENT IN BOOLEAN,
            IBLLOADADDRESS      IN BOOLEAN DEFAULT TRUE,
            ISBINSTANCE         IN GE_BOINSTANCECONTROL.STYSBVALUE,
            INUPRODUCTID        IN MO_MOTIVE.PRODUCT_ID%TYPE,
            INUPRODUCTMOTIVEID  IN MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
            INUCOMPONENTIDPROD  IN MO_COMPONENT.COMPONENT_ID_PROD%TYPE
        )
    IS
           DTPRODUCTRETIREDATE DATE;
           SBNODEINSTANCE      GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadDataComponent',3);
        
        IF IBLLOADALLCOMPONENT THEN
            DTPRODUCTRETIREDATE := PR_BCPRODUCT.FDTLASTPRODUCTRETIRE(INUPRODUCTID);
        ELSE
            DTPRODUCTRETIREDATE := NULL;
        END IF;
        UT_TRACE.TRACE('Fecha de Retiro :['||DTPRODUCTRETIREDATE||']',3);

        
        MO_BOUNCOMPOSITIONUTIL.LOADHIERARCHYNODECOMPONENT
                                (
                                ISBINSTANCE,
                                SBNODEINSTANCE, 
                                INUPRODUCTMOTIVEID,
                                INUCOMPONENTIDPROD,
                                FALSE,
                                IBLLOADCHILD,
                                IBLLOADALLCOMPONENT,
                                IBLLOADADDRESS,
                                DTPRODUCTRETIREDATE
                                );
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadDataComponent',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE LOADPRODUCTCOMPONENTNODE
        (
        IBLLOADCHILD        IN BOOLEAN,
        IBLLOADALLCOMPONENT IN BOOLEAN,
        IBLLOADADDRESS      IN BOOLEAN DEFAULT TRUE
        )
    IS
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        SBWORKINSTANCE      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBNODEINSTANCE      GE_BOINSTANCECONTROL.STYSBNAME;
        NUPRODUCTID         MO_MOTIVE.PRODUCT_ID%TYPE;
        NUPRODUCTMOTIVEID   MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        NUPRODMOTIVECOMPID  MO_COMPONENT.PROD_MOTIVE_COMP_ID%TYPE;
        NUCOMPONENTIDPROD   MO_COMPONENT.COMPONENT_ID_PROD%TYPE;
        DTPRODUCTRETIREDATE DATE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadProductComponentNode',2);

        
        GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        
        GETINSTANCEDATA(IBLLOADALLCOMPONENT,SBWORKINSTANCE,NUPRODUCTID,NUPRODUCTMOTIVEID,NUPRODMOTIVECOMPID,NUCOMPONENTIDPROD);

         
         LOADDATACOMPONENT (
                IBLLOADCHILD,
                IBLLOADALLCOMPONENT,
                IBLLOADADDRESS,
                SBWORKINSTANCE,
                NUPRODUCTID,
                NUPRODUCTMOTIVEID,
                NUCOMPONENTIDPROD);

        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadProductComponentNode',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE LOADPRODUCT
        (
        IBLLOADCHILD        IN BOOLEAN,
        IBLLOADALLCOMPONENT IN BOOLEAN,
        IBLLOADADDRESS      IN BOOLEAN DEFAULT TRUE
        )
    IS
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        SBWORKINSTANCE      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBNODEINSTANCE      GE_BOINSTANCECONTROL.STYSBNAME;

        NUPRODUCTID         MO_MOTIVE.PRODUCT_ID%TYPE;
        NUPRODUCTMOTIVEID   MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        NUPRODMOTIVECOMPID  MO_COMPONENT.PROD_MOTIVE_COMP_ID%TYPE;
        NUCOMPONENTIDPROD   MO_COMPONENT.COMPONENT_ID_PROD%TYPE;
        DTPRODUCTRETIREDATE DATE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadProduct',2);

        
        GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        
        GETINSTANCEDATA(IBLLOADALLCOMPONENT,SBWORKINSTANCE,NUPRODUCTID,NUPRODUCTMOTIVEID,NUPRODMOTIVECOMPID,NUCOMPONENTIDPROD);
        
        IF IBLLOADALLCOMPONENT THEN
            DTPRODUCTRETIREDATE := PR_BCPRODUCT.FDTLASTPRODUCTRETIRE(NUPRODUCTID);
        ELSE
            DTPRODUCTRETIREDATE := NULL;
        END IF;
        UT_TRACE.TRACE('Fecha de Retiro :['||DTPRODUCTRETIREDATE||']',3);

        
        MO_BOUNCOMPOSITIONUTIL.LOADHIERARCHYNODECOMPONENT
                                (
                                SBWORKINSTANCE,
                                SBNODEINSTANCE,
                                NUPRODUCTMOTIVEID,
                                NUCOMPONENTIDPROD,
                                FALSE,
                                TRUE,
                                IBLLOADALLCOMPONENT,
                                IBLLOADADDRESS,
                                DTPRODUCTRETIREDATE
                                );

        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadProduct',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    





















    PROCEDURE GETINSTLOADALLPRODUCT
        (
        OSBCURRENTINSTANCE  OUT NOCOPY VARCHAR2,
        ONUPRODUCTID        OUT NOCOPY NUMBER,
        ONUPRODUCTMOTIVEID  OUT NOCOPY NUMBER
        )
    IS
        SBPRODUCTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTMOTIVEID  GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.GetInstLoadAllProduct',3);
        
        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,OSBCURRENTINSTANCE);
        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('PRODUCT_ID',SBPRODUCTID);
        GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE('PRODUCT_MOTIVE_ID',SBPRODUCTMOTIVEID);

        ONUPRODUCTID := TO_NUMBER(SBPRODUCTID);
        ONUPRODUCTMOTIVEID := TO_NUMBER(SBPRODUCTMOTIVEID);

        UT_TRACE.TRACE('Instancia:['||OSBCURRENTINSTANCE||']Producto:['||ONUPRODUCTID||']Motivo Producto:['||ONUPRODUCTMOTIVEID||']',4);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.GetInstLoadAllProduct',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    

















    FUNCTION FBLEXISTINSTANCECOMP
        (
        INUPRODUCTMOTIVEID  IN MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        INUCOMPONENTTYPE    IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        ISBSERVICENUMBER    IN PR_COMPONENT.SERVICE_NUMBER%TYPE,
        ITBINSTANCE         IN GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY,
        OSBINSTANCE         OUT GE_BOINSTANCECONTROL.STYSBNAME
        )
    RETURN BOOLEAN
    IS
        NUPRODMOTIVECOMPID  PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE;
        NUELEMENTCATEGORYID PS_PROD_MOTIVE_COMP.ELEMENT_CATEGORY_ID%TYPE;
        SBTAGNAME           PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        SBACTIVE            PS_PROD_MOTIVE_COMP.ACTIVE%TYPE;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        NUINDEXATTRIBUTE    GE_BOINSTANCECONTROL.STYNUINDEX;
        SBSERVICENUMBER     GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
        UT_TRACE.TRACE ('Inicia Metodo MO_BOCnfLoadProductData.fblExistInstanceComp', 4);

        
        IF NOT MO_BOUNCOMPOSITIONUTIL.FBLCONFIGURATIONCOMPONENTDATA(INUPRODUCTMOTIVEID,NULL,INUCOMPONENTTYPE,NUPRODMOTIVECOMPID,NUELEMENTCATEGORYID,SBTAGNAME,SBACTIVE)
        THEN
            UT_TRACE.TRACE ('No se Encontr� Configuraci�n', 5);
            RETURN FALSE;
        END IF;

        UT_TRACE.TRACE ('Nombre del Tag_Name del Componente:['||SBTAGNAME||']',5);

        NUINDEX := ITBINSTANCE.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            UT_TRACE.TRACE ('Instancia Hija:['||ITBINSTANCE(NUINDEX).SBINSTANCE||']',5);

            
            IF INSTR (ITBINSTANCE (NUINDEX).SBINSTANCE, SBTAGNAME) <> 0 THEN
                
                IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(ITBINSTANCE(NUINDEX).SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_COMPONENT,MO_BOCONSTANTS.CSBSERVICE_NUMBER,NUINDEXATTRIBUTE)
                THEN
                    
                    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(ITBINSTANCE(NUINDEX).SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_COMPONENT,MO_BOCONSTANTS.CSBSERVICE_NUMBER,SBSERVICENUMBER);

                    UT_TRACE.TRACE ('N�mero de Servicio:['||SBSERVICENUMBER||']',6);
                    
                    IF SBSERVICENUMBER = ISBSERVICENUMBER THEN
                        OSBINSTANCE := ITBINSTANCE (NUINDEX).SBINSTANCE;

                        UT_TRACE.TRACE ('Instancia Encontrada:['||OSBINSTANCE||']',6);
                        RETURN TRUE;
                    END IF;
                END IF;
            END IF;
            NUINDEX := ITBINSTANCE.NEXT (NUINDEX);
        END LOOP;
        UT_TRACE.TRACE ('Instancia No Encontrada:['||OSBINSTANCE||']',6);
        RETURN FALSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE LOADALLPRODUCT
        (
        IBLLOADCHILD        IN BOOLEAN,
        IBLLOADALLCOMPONENT IN BOOLEAN,
        IBLLOADADDRESS      IN BOOLEAN DEFAULT TRUE
        )
    IS
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        SBFATHERINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
        SBMOTIVEINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
        SBCOMPONENTINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
        TBINSTANCE          GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
        NUPRODUCTID         MO_MOTIVE.PRODUCT_ID%TYPE;
        NUPRODUCTMOTIVEID   MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        BLCREATEINSTANCE    BOOLEAN;
        DTPRODUCTRETIREDATE DATE;

        CURFGETMAINCOMPONENTS  CONSTANTS.TYREFCURSOR;
        RCGETMAINCOMPONENTS    DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadAllProduct',2);

        
        GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);

        
        GETINSTLOADALLPRODUCT(SBMOTIVEINSTANCE,NUPRODUCTID,NUPRODUCTMOTIVEID);

        
        IF IBLLOADALLCOMPONENT THEN
            DTPRODUCTRETIREDATE := PR_BCPRODUCT.FDTLASTPRODUCTRETIRE(NUPRODUCTID);
        ELSE
            DTPRODUCTRETIREDATE := NULL;
        END IF;
        UT_TRACE.TRACE('Fecha de Retiro:['||DTPRODUCTRETIREDATE||']',3);

        
        GE_BOINSTANCECONTROL.INSTANCEHIERARCHY(SBMOTIVEINSTANCE,TBINSTANCE);

        
        CURFGETMAINCOMPONENTS := PR_BCPRODUCT.FRFGETMAINCOMPONENTS(NUPRODUCTID, NOT IBLLOADALLCOMPONENT);
        LOOP
            FETCH CURFGETMAINCOMPONENTS INTO RCGETMAINCOMPONENTS;
            EXIT WHEN CURFGETMAINCOMPONENTS%NOTFOUND;

            UT_TRACE.TRACE('Componente:['||RCGETMAINCOMPONENTS.COMPONENT_ID ||']Tipo:['||RCGETMAINCOMPONENTS.COMPONENT_TYPE_ID ||']', 4);
            UT_TRACE.TRACE('Estado:['||RCGETMAINCOMPONENTS.COMPONENT_STATUS_ID ||']N�mero de Servicio:['||RCGETMAINCOMPONENTS.SERVICE_NUMBER ||']', 4);

            BLCREATEINSTANCE := TRUE;
            SBFATHERINSTANCE := SBMOTIVEINSTANCE;

            
            IF FBLEXISTINSTANCECOMP(NUPRODUCTMOTIVEID,RCGETMAINCOMPONENTS.COMPONENT_TYPE_ID,RCGETMAINCOMPONENTS.SERVICE_NUMBER,TBINSTANCE,SBCOMPONENTINSTANCE)
            THEN
                UT_TRACE.TRACE('Ya Existe la Instancia', 4);
                BLCREATEINSTANCE := FALSE;
                SBFATHERINSTANCE := SBCOMPONENTINSTANCE;
            END IF;

            
            MO_BOUNCOMPOSITIONUTIL.LOADHIERARCHYNODECOMPONENT
                                    (
                                    SBFATHERINSTANCE,
                                    SBCOMPONENTINSTANCE,
                                    NUPRODUCTMOTIVEID,
                                    RCGETMAINCOMPONENTS.COMPONENT_ID,
                                    BLCREATEINSTANCE,
                                    TRUE,
                                    IBLLOADALLCOMPONENT,
                                    IBLLOADADDRESS,
                                    DTPRODUCTRETIREDATE
                                    );
        END LOOP;
        CLOSE CURFGETMAINCOMPONENTS;

        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadAllProduct', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFGETMAINCOMPONENTS);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFGETMAINCOMPONENTS);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
















    PROCEDURE EQUIVALINSTANCEBYENTITY
        (
        ISBINSTANCETAGET    IN VARCHAR2,
        ISBINSTANCESOURCE   IN VARCHAR2,
        INUPRODUCTMOTIVEID  IN MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        ISBENTITYNAME       IN VARCHAR2
        )
    IS
        RCENTITY    GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
        NUENTITY    GE_BOINSTANCECONTROL.STYNUINDEX;
        TBENTITY    MO_BOUNCOMPOSITIONUTIL.TYTBENTITY;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.EquivalInstanceByEntity',7);
        UT_TRACE.TRACE('Instancia Destino:['||ISBINSTANCETAGET||']Instancia Origen:['||ISBINSTANCESOURCE||']',8);
        UT_TRACE.TRACE('Motivo Producto:['||INUPRODUCTMOTIVEID||']Entidad:['||ISBENTITYNAME||']',8);

        IF ISBINSTANCESOURCE IS NULL THEN
            RETURN;
        END IF;
        
        IF NOT MO_BOUNCOMPOSITIONUTIL.FBLLOADPRODUCTMOTIVEENTITY(INUPRODUCTMOTIVEID,TBENTITY) THEN
            RETURN;
        END IF;
        
        GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY(ISBINSTANCESOURCE,NUENTITY);
        WHILE NUENTITY IS NOT NULL LOOP
            GE_BOINSTANCECONTROL.GETENTITY(NUENTITY,RCENTITY);
            UT_TRACE.TRACE('Entidad Encontrada  :['||RCENTITY.SBENTITY||']',10);

            IF (RCENTITY.SBENTITY = ISBENTITYNAME) THEN
                
                MO_BOUNCOMPOSITIONUTIL.EQUIVALENCEENTITY(ISBINSTANCETAGET,ISBINSTANCESOURCE,RCENTITY,TBENTITY);
            END IF;

            GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY(NUENTITY);
        END LOOP;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.EquivalInstanceByEntity',7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE LOADDATABYENTITY
        (
        INUPRODUCTID    IN MO_MOTIVE.PRODUCT_ID%TYPE,
        ISBENTITYNAME   IN VARCHAR2
        )
    IS
        SBCURRENTINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;
        SBGROUPCURRENT          GE_BOINSTANCECONTROL.STYSBNAME;
        SBENTITYCURRENT         GE_BOINSTANCECONTROL.STYSBNAME;
        SBATTRIBUTECURRENT      GE_BOINSTANCECONTROL.STYSBNAME;
        SBDATAINSTANCE          GE_BOINSTANCECONTROL.STYSBNAME;
        SBPRODUCTMOTIVEID       GE_BOINSTANCECONTROL.STYSBVALUE;
        NUERRORCODE             GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE          VARCHAR2(2000);
        EXCALLSERVICE           EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadDataByEntity',3);
        UT_TRACE.TRACE('Producto:['||INUPRODUCTID||']Entidad:['||ISBENTITYNAME||']',4);

        
        GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBGROUPCURRENT,SBENTITYCURRENT,SBATTRIBUTECURRENT);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBCURRENTINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_MOTIVE,MO_BOCONSTANTS.CSBPRODUCT_MOTIVE_ID,SBPRODUCTMOTIVEID);
        UT_TRACE.TRACE('Motivo Producto:['||SBPRODUCTMOTIVEID||']',4);

        
        SBDATAINSTANCE := MO_BOUNCOMPOSITIONCONSTANTS.CSBDATA_INSTANCE||'_'||SBPRODUCTMOTIVEID;
        GE_BOINSTANCECONTROL.CREATEINSTANCE(SBDATAINSTANCE,NULL);
        UT_TRACE.TRACE('Instancia de Datos:['||SBDATAINSTANCE||']',4);

        
        PR_BSPRODUCT.INSTANCE(INUPRODUCTID,NUERRORCODE,SBERRORMESSAGE,SBDATAINSTANCE);
        IF (NVL(NUERRORCODE,MO_BOCONSTANTS.CNUOK) <> MO_BOCONSTANTS.CNUOK) THEN
            RAISE EXCALLSERVICE;
        END IF;

        
        EQUIVALINSTANCEBYENTITY
            (
            SBCURRENTINSTANCE,
            SBDATAINSTANCE,
            TO_NUMBER(SBPRODUCTMOTIVEID),
            ISBENTITYNAME
            );

        GE_BOINSTANCECONTROL.DESTROYINSTANCE(SBDATAINSTANCE);

        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBGROUPCURRENT,SBENTITYCURRENT,SBATTRIBUTECURRENT);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadDataByEntity',3);
    EXCEPTION
        WHEN EXCALLSERVICE THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                'PR_BSProduct.Instance'||'|'||TO_CHAR(NUERRORCODE)||' - '||SBERRORMESSAGE
                );
            RAISE  EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    





















    FUNCTION FNUGETCHILDCOMPBYTYPEANDCAT
        (
        INUCOMPONENTID      IN PR_COMPONENT.COMPONENT_ID%TYPE,
        INUCOMPONENTTYPEID  IN PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUCATEGORY         IN PS_CLASS_SERVICE.CATEGORY%TYPE,
        IBLLOADALLCOMPONENT IN BOOLEAN
        )
    RETURN NUMBER
    IS
        CURFCOMPONENT   CONSTANTS.TYREFCURSOR;
        RCCOMPONENT     DAPR_COMPONENT.STYPR_COMPONENT;
        RCCLASSSERVICE  DAPS_CLASS_SERVICE.STYPS_CLASS_SERVICE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.fnuGetChildCompByTypeAndCat',8);
        UT_TRACE.TRACE('Componente:['||INUCOMPONENTID||']Tipo:['||INUCOMPONENTTYPEID||']Categoria:['||INUCATEGORY||']',9);

        
        CURFCOMPONENT := PR_BCCOMPONENT.FRFGETCHILDDIRECTCOMPONENT(INUCOMPONENTID,IBLLOADALLCOMPONENT);
        FETCH CURFCOMPONENT INTO RCCOMPONENT;
        WHILE CURFCOMPONENT%FOUND LOOP
            UT_TRACE.TRACE('Componente:['||RCCOMPONENT.COMPONENT_ID||']Tipo:['||RCCOMPONENT.COMPONENT_TYPE_ID||']Clase:['||RCCOMPONENT.CLASS_SERVICE_ID||']',12);

            
            IF (RCCOMPONENT.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID) THEN

                
                IF (RCCOMPONENT.CLASS_SERVICE_ID IS NOT NULL) THEN
                    RCCLASSSERVICE := DAPS_CLASS_SERVICE.FRCGETRECORD(RCCOMPONENT.CLASS_SERVICE_ID);

                    UT_TRACE.TRACE('Categoria:['||RCCLASSSERVICE.CATEGORY||']',13);
                    IF (RCCLASSSERVICE.CATEGORY = INUCATEGORY) THEN
                        CLOSE CURFCOMPONENT;
                        RETURN RCCOMPONENT.COMPONENT_ID;
                    END IF;
                END IF;

            END IF;
            FETCH CURFCOMPONENT INTO RCCOMPONENT;
        END LOOP;
        CLOSE CURFCOMPONENT;

        RETURN NULL;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.fnuGetChildCompByTypeAndCat',8);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




















    PROCEDURE GETMAINCOMPONENT
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPEID  IN PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE,
        IBLLOADALLCOMPONENT IN BOOLEAN,
        ONUCOMPONENTID      OUT NOCOPY PR_COMPONENT.COMPONENT_ID%TYPE
        )
    IS
        CURFCOMPONENT   CONSTANTS.TYREFCURSOR;
        RCCOMPONENT     DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.GetMainComponent',10);
        UT_TRACE.TRACE('Producto:['||INUPRODUCTID||']Tipo Componente:['||INUCOMPONENTTYPEID||']',11);

        
        CURFCOMPONENT := PR_BCPRODUCT.FRFGETMAINCOMPONENTS(INUPRODUCTID, NOT IBLLOADALLCOMPONENT);
        FETCH CURFCOMPONENT INTO RCCOMPONENT;
        WHILE CURFCOMPONENT%FOUND LOOP
            UT_TRACE.TRACE('Componente:['||RCCOMPONENT.COMPONENT_ID||']Tipo:['||RCCOMPONENT.COMPONENT_TYPE_ID||']',12);

            
            IF (RCCOMPONENT.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID) THEN
                ONUCOMPONENTID := RCCOMPONENT.COMPONENT_ID;
                EXIT;
            END IF;
            FETCH CURFCOMPONENT INTO RCCOMPONENT;
        END LOOP;
        CLOSE CURFCOMPONENT;

        UT_TRACE.TRACE('Componente Encontrado:['||ONUCOMPONENTID||']',11);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.GetMainComponent',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE LOADFROMMAINCOMP
        (
        INUCOMPONENTTYPEIDMAIN  IN PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE,
        INUCOMPONENTTYPEID      IN PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE,
        INUCATEGORY             IN PS_CLASS_SERVICE.CATEGORY%TYPE,
        IBLLOADCHILD            IN BOOLEAN,
        IBLLOADALLCOMPONENT     IN BOOLEAN,
        IBLLOADADDRESS          IN BOOLEAN DEFAULT TRUE
        )
    IS
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        SBMOTIVEINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
        SBNODEINSTANCE      GE_BOINSTANCECONTROL.STYSBNAME;
        SBMAINNODEINSTANCE  GE_BOINSTANCECONTROL.STYSBNAME;
        NUPRODUCTID         MO_MOTIVE.PRODUCT_ID%TYPE;
        NUPRODUCTMOTIVEID   MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        DTPRODUCTRETIREDATE DATE;
        NUCOMPONENTID       PR_COMPONENT.COMPONENT_ID%TYPE;
        NUMAINCOMPONENTID   PR_COMPONENT.COMPONENT_ID%TYPE;

        EXCOMPNOEXIBYTYPANDCAT  EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadFromMainComp',2);
        UT_TRACE.TRACE('Tipo Comp Princ:['||INUCOMPONENTTYPEIDMAIN||']Tipo Comp:['||INUCOMPONENTTYPEID||']Categoria:['||INUCATEGORY||']',3);

        
        GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);

        
        GETINSTLOADALLPRODUCT(SBMOTIVEINSTANCE,NUPRODUCTID,NUPRODUCTMOTIVEID);

        
        IF IBLLOADALLCOMPONENT THEN
            DTPRODUCTRETIREDATE := PR_BCPRODUCT.FDTLASTPRODUCTRETIRE(NUPRODUCTID);
        ELSE
            DTPRODUCTRETIREDATE := NULL;
        END IF;
        UT_TRACE.TRACE('Fecha de Retiro :['||DTPRODUCTRETIREDATE||']',3);

        
        GETMAINCOMPONENT(NUPRODUCTID,INUCOMPONENTTYPEIDMAIN,IBLLOADALLCOMPONENT,NUMAINCOMPONENTID);

        
        IF (NUMAINCOMPONENTID IS NULL) THEN
            UT_TRACE.TRACE('No se Encontr� Componente Principal',3);
            
            GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
            RETURN;
        END IF;

        
        MO_BOUNCOMPOSITIONUTIL.LOADMOTCOMPBYPRODCOMP
            (
            SBMOTIVEINSTANCE,
            SBMAINNODEINSTANCE,
            NUPRODUCTMOTIVEID,
            NUMAINCOMPONENTID,
            TRUE,
            IBLLOADADDRESS,
            DTPRODUCTRETIREDATE
            );

        

        NUCOMPONENTID := FNUGETCHILDCOMPBYTYPEANDCAT(NUMAINCOMPONENTID,INUCOMPONENTTYPEID,INUCATEGORY,IBLLOADALLCOMPONENT);

        
        IF (NUCOMPONENTID IS NULL) THEN
            RAISE EXCOMPNOEXIBYTYPANDCAT;
        END IF;

        
        MO_BOUNCOMPOSITIONUTIL.LOADHIERARCHYNODECOMPONENT
                                (
                                SBMAINNODEINSTANCE,
                                SBNODEINSTANCE,
                                NUPRODUCTMOTIVEID,
                                NUCOMPONENTID,
                                TRUE,
                                IBLLOADCHILD,
                                IBLLOADALLCOMPONENT,
                                IBLLOADADDRESS,
                                DTPRODUCTRETIREDATE
                                );

        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadFromMainComp',2);
    EXCEPTION
        WHEN EXCOMPNOEXIBYTYPANDCAT THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUCOMPNOEXIBYTYPANDCAT,
                TO_CHAR(NUPRODUCTID)||'|'||TO_CHAR(INUCOMPONENTTYPEID)||'|'||TO_CHAR(INUCATEGORY)
                );
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;











PROCEDURE ADDCOMPONENT
(
    INUOBJECTTYPE          IN NUMBER,
    INUPRODUCTMOTIVE       IN NUMBER,
    INUFATHERCOMPONENTTYPE IN NUMBER,
    INUCOMPONENTTYPE       IN NUMBER,
    INULEVEL               IN NUMBER,
    INUFATHERINDEX         IN PLS_INTEGER,
    IONUCHILDINDEX         IN OUT PLS_INTEGER,
    IOTBPRODUCTINSTANCE    IN OUT NOCOPY MO_BOCONFIGURATIONCACHE.TYTBCONFIGURATIONINSTANCE
)
IS

NUMOTIVECOMPONENT  PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE;
NUELEMENTCATEGORY  PS_PROD_MOTIVE_COMP.ELEMENT_CATEGORY_ID%TYPE;
SBTAGNAME          PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
SBACTIVE           PS_PROD_MOTIVE_COMP.ACTIVE%TYPE;

BEGIN
    IF NOT MO_BOCONFIGURATIONCACHE.FBLCONFIGURATIONCOMPONENTDATA (INUPRODUCTMOTIVE, INUFATHERCOMPONENTTYPE, INUCOMPONENTTYPE, NUMOTIVECOMPONENT, NUELEMENTCATEGORY, SBTAGNAME, SBACTIVE) THEN
        NUMOTIVECOMPONENT := NULL;
        NUELEMENTCATEGORY := NULL;
        SBTAGNAME         := NULL;
        SBACTIVE          := NULL;
    END IF;

    

    IONUCHILDINDEX := IOTBPRODUCTINSTANCE.COUNT;

    IOTBPRODUCTINSTANCE(IONUCHILDINDEX).NUFIRSTCHILD := NULL;
    IOTBPRODUCTINSTANCE(IONUCHILDINDEX).NULASTCHILD  := NULL;
    IOTBPRODUCTINSTANCE(IONUCHILDINDEX).NUNEXT       := NULL;

    IOTBPRODUCTINSTANCE(IONUCHILDINDEX).NUOBJECTTYPE := INUOBJECTTYPE;

    IF INUOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT THEN
        IOTBPRODUCTINSTANCE(IONUCHILDINDEX).NUOBJECTID := INUPRODUCTMOTIVE;
    ELSE
        IOTBPRODUCTINSTANCE(IONUCHILDINDEX).NUOBJECTID := NUMOTIVECOMPONENT;
    END IF;

    IOTBPRODUCTINSTANCE(IONUCHILDINDEX).NUMINIMUM  := 1;
    IOTBPRODUCTINSTANCE(IONUCHILDINDEX).NUMAXIMUM  := 1;
    IOTBPRODUCTINSTANCE(IONUCHILDINDEX).SBINSTANCE := SBTAGNAME;

    

    IF INUFATHERINDEX IS NULL THEN
        RETURN;
    END IF;

    IF IOTBPRODUCTINSTANCE(INUFATHERINDEX).NUFIRSTCHILD IS NULL THEN
        IOTBPRODUCTINSTANCE(INUFATHERINDEX).NUFIRSTCHILD := IONUCHILDINDEX;
    END IF;

    IF IOTBPRODUCTINSTANCE(INUFATHERINDEX).NULASTCHILD IS NOT NULL THEN
        IOTBPRODUCTINSTANCE(IOTBPRODUCTINSTANCE(INUFATHERINDEX).NULASTCHILD).NUNEXT := IONUCHILDINDEX;
    END IF;

    IOTBPRODUCTINSTANCE(INUFATHERINDEX).NULASTCHILD := IONUCHILDINDEX;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;












PROCEDURE LOADCOMPONENTS
(
    INUPRODUCTMOTIVE       IN NUMBER,
    INUCOMPONENTID         IN NUMBER,
    INUFATHERCOMPONENTTYPE IN NUMBER,
    INULEVEL               IN NUMBER,
    INUFATHERINDEX         IN PLS_INTEGER,
    IOTBPRODUCTINSTANCE    IN OUT NOCOPY MO_BOCONFIGURATIONCACHE.TYTBCONFIGURATIONINSTANCE
)
IS

NUCHILDINDEX    PLS_INTEGER;
CURFCOMPONENTS  CONSTANTS.TYREFCURSOR;
RCCOMPONENT     DAPR_COMPONENT.STYPR_COMPONENT;

BEGIN
    CURFCOMPONENTS := PR_BCCOMPONENT.FRFGETCHILDDIRECTCOMPONENT (INUCOMPONENTID, TRUE);
    LOOP
        FETCH CURFCOMPONENTS INTO RCCOMPONENT;
        EXIT WHEN CURFCOMPONENTS%NOTFOUND;

        ADDCOMPONENT (MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT, INUPRODUCTMOTIVE, INUFATHERCOMPONENTTYPE, RCCOMPONENT.COMPONENT_TYPE_ID, INULEVEL + 1, INUFATHERINDEX, NUCHILDINDEX, IOTBPRODUCTINSTANCE);

        LOADCOMPONENTS (INUPRODUCTMOTIVE, RCCOMPONENT.COMPONENT_ID, RCCOMPONENT.COMPONENT_TYPE_ID, INULEVEL + 1, NUCHILDINDEX, IOTBPRODUCTINSTANCE);
    END LOOP;

    CLOSE CURFCOMPONENTS;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        GE_BOGENERALUTIL.CLOSE_REFCURSOR (CURFCOMPONENTS);
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        GE_BOGENERALUTIL.CLOSE_REFCURSOR (CURFCOMPONENTS);
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;












PROCEDURE LOADPRODUCTSTRUCT
(
    INUPRODUCTMOTIVE    IN NUMBER,
    INUPRODUCTID        IN NUMBER,
    IOTBPRODUCTINSTANCE IN OUT NOCOPY MO_BOCONFIGURATIONCACHE.TYTBCONFIGURATIONINSTANCE
)
IS

CURFMAINCOMPONENTS  CONSTANTS.TYREFCURSOR;
RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
NUFATHERINDEX       PLS_INTEGER;
NUCHILDINDEX        PLS_INTEGER;

BEGIN
    IOTBPRODUCTINSTANCE.DELETE;

    ADDCOMPONENT (MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT, INUPRODUCTMOTIVE, NULL, NULL, 2, NULL, NUFATHERINDEX, IOTBPRODUCTINSTANCE);

    IOTBPRODUCTINSTANCE(NUFATHERINDEX).SBINSTANCE := DAPS_PRODUCT_MOTIVE.FSBGETDESCRIPTION (INUPRODUCTMOTIVE);

    CURFMAINCOMPONENTS := PR_BCPRODUCT.FRFGETMAINCOMPONENTS (INUPRODUCTID, TRUE);
    LOOP
        FETCH CURFMAINCOMPONENTS INTO RCCOMPONENT;
        EXIT WHEN CURFMAINCOMPONENTS%NOTFOUND;

        ADDCOMPONENT (MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT, INUPRODUCTMOTIVE, NULL, RCCOMPONENT.COMPONENT_TYPE_ID, 3, NUFATHERINDEX, NUCHILDINDEX, IOTBPRODUCTINSTANCE);

        LOADCOMPONENTS (INUPRODUCTMOTIVE, RCCOMPONENT.COMPONENT_ID, RCCOMPONENT.COMPONENT_TYPE_ID, 3, NUCHILDINDEX, IOTBPRODUCTINSTANCE);
    END LOOP;

    CLOSE CURFMAINCOMPONENTS;

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        GE_BOGENERALUTIL.CLOSE_REFCURSOR (CURFMAINCOMPONENTS);
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        GE_BOGENERALUTIL.CLOSE_REFCURSOR (CURFMAINCOMPONENTS);
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;












PROCEDURE VALIDATEPRODUCTSTRUCT
(
    INUPRODUCTMOTIVE IN NUMBER,
    INUPRODUCTID     IN NUMBER
)
IS

TBREQUIREDINSTANCE  MO_BOCONFIGURATIONCACHE.TYTBCONFIGURATIONINSTANCE;
TBPRODUCTINSTANCE   MO_BOCONFIGURATIONCACHE.TYTBCONFIGURATIONINSTANCE;

SBMESSAGE  GE_BOINSTANCECONTROL.STYSBVALUE;

SBFIRSTINSTANCE  GE_BOINSTANCECONTROL.STYSBINDEX;

BEGIN
    UT_TRACE.TRACE ('mo_boCnfLoadProductData.ValidateProductStruct INICIO ['|| INUPRODUCTMOTIVE ||']['|| INUPRODUCTID ||']', 3);

    DAPS_PRODUCT_MOTIVE.ACCKEY (INUPRODUCTMOTIVE);

    SBMESSAGE := TO_CHAR (INUPRODUCTMOTIVE) ||' - '|| DAPS_PRODUCT_MOTIVE.FSBGETDESCRIPTION (INUPRODUCTMOTIVE);

    MO_BOCONFIGURATIONCACHE.LOADMOTIVECONFIGURATION (INUPRODUCTMOTIVE, FALSE);

    MO_BOCONFIGURATIONCACHE.LOADPRODUCTMOTIVEINSTANCES (INUPRODUCTMOTIVE, SBFIRSTINSTANCE, TBREQUIREDINSTANCE);

    LOADPRODUCTSTRUCT (INUPRODUCTMOTIVE, INUPRODUCTID, TBPRODUCTINSTANCE);

    MO_BOREGISTERVALIDATE.VALIDATEREQUIREDINSTANCES (SBMESSAGE, 0, TBREQUIREDINSTANCE, TBPRODUCTINSTANCE);

EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
        RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
END;

    























    PROCEDURE CREATEMOTPRODYIELDED
        (
        INUPRODUCTID        IN PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPRODUCTMOTIVEID  IN PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        ISBPACKAGEINSTANCE  IN GE_BOINSTANCECONTROL.STYSBNAME,
        IBLLOADALLCOMPONENT IN BOOLEAN DEFAULT TRUE
        )
    IS
        TBHIERARCHY         GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        SBOBJECTTYPE        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBOBJECTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKAGEINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBMOTIVEINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
        SBCOMPONENTINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
        RCPRODUCTMOTIVE     DAPS_PRODUCT_MOTIVE.STYPS_PRODUCT_MOTIVE;
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
        DTPRODUCTRETIREDATE DATE;

        CURFGETMAINCOMPONENTS  CONSTANTS.TYREFCURSOR;
        RCGETMAINCOMPONENTS    DAPR_COMPONENT.STYPR_COMPONENT;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMotProdYielded',3);
        UT_TRACE.TRACE('Producto:['||INUPRODUCTID||']Motivo Producto:['||INUPRODUCTMOTIVEID||']Instacia Paquete:['||ISBPACKAGEINSTANCE||']',4);

        SBPACKAGEINSTANCE := ISBPACKAGEINSTANCE;

        
        IF SBPACKAGEINSTANCE IS NULL THEN

            
            GE_BOINSTANCECONTROL.INSTANCEHIERARCHY(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,TBHIERARCHY);

            NUINDEX := TBHIERARCHY.FIRST;
            WHILE NUINDEX IS NOT NULL LOOP
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(TBHIERARCHY(NUINDEX).SBINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY,MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE,SBOBJECTTYPE);
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(TBHIERARCHY(NUINDEX).SBINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY,MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID,SBOBJECTID);

                
                IF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT THEN
                    SBPACKAGEINSTANCE := TBHIERARCHY(NUINDEX).SBINSTANCE;
                    EXIT;
                END IF;

                NUINDEX := TBHIERARCHY.NEXT(NUINDEX);
            END LOOP;
            UT_TRACE.TRACE('Instancia Paquete:['||SBPACKAGEINSTANCE||']',4);
        END IF;

        
        RCPRODUCTMOTIVE := DAPS_PRODUCT_MOTIVE.FRCGETRECORD(INUPRODUCTMOTIVEID);

        
        MO_BOUNCOMPOSITIONUTIL.GETINSTANCENAME(RCPRODUCTMOTIVE.TAG_NAME,SBMOTIVEINSTANCE);
        MO_BOUNCOMPOSITIONUTIL.CREATEINSTANCE(SBPACKAGEINSTANCE,SBMOTIVEINSTANCE,MO_BOCONFIGURATIONCONTROL.NUMOTIVEOBJECT,INUPRODUCTMOTIVEID,NULL,GE_BOCONSTANTS.INSERT_);
        UT_TRACE.TRACE('Instancia del Motivo:['||SBMOTIVEINSTANCE||']',4);

        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBMOTIVEINSTANCE,NULL,'MO_MOTIVE_ASSO','MOTIVE_ID',NULL);

        
        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(INUPRODUCTID);

        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBMOTIVEINSTANCE,NULL,'MO_MOTIVE','PRODUCT_ID',TO_CHAR(INUPRODUCTID));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBMOTIVEINSTANCE,NULL,'MO_MOTIVE','SERVICE_NUMBER',RCPRODUCT.SERVICE_NUMBER);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBMOTIVEINSTANCE,NULL,'MO_MOTIVE','CATEGORY_ID',RCPRODUCT.CATEGORY_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBMOTIVEINSTANCE,NULL,'MO_MOTIVE','SUBCATEGORY_ID',RCPRODUCT.SUBCATEGORY_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBMOTIVEINSTANCE,NULL,'MO_MOTIVE','DISTRIBUT_ADMIN_ID',RCPRODUCT.DISTRIBUT_ADMIN_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBMOTIVEINSTANCE,NULL,'MO_MOTIVE','DISTRICT_ID',NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBMOTIVEINSTANCE,NULL,'MO_MOTIVE','BUILDING_ID',NULL);

        
        IF IBLLOADALLCOMPONENT THEN
            DTPRODUCTRETIREDATE := PR_BCPRODUCT.FDTLASTPRODUCTRETIRE(INUPRODUCTID);
        ELSE
            DTPRODUCTRETIREDATE := NULL;
        END IF;
        UT_TRACE.TRACE('Fecha de Retiro:['||DTPRODUCTRETIREDATE||']',3);

        
        CURFGETMAINCOMPONENTS := PR_BCPRODUCT.FRFGETMAINCOMPONENTS(INUPRODUCTID, NOT IBLLOADALLCOMPONENT);
        LOOP
            FETCH CURFGETMAINCOMPONENTS INTO RCGETMAINCOMPONENTS;
            EXIT WHEN CURFGETMAINCOMPONENTS%NOTFOUND;

            UT_TRACE.TRACE('Componente:['||RCGETMAINCOMPONENTS.COMPONENT_ID ||']Tipo:['||RCGETMAINCOMPONENTS.COMPONENT_TYPE_ID ||']', 4);
            UT_TRACE.TRACE('Estado:['||RCGETMAINCOMPONENTS.COMPONENT_STATUS_ID ||']N�mero de Servicio:['||RCGETMAINCOMPONENTS.SERVICE_NUMBER ||']', 4);

            
            MO_BOUNCOMPOSITIONUTIL.LOADHIERARCHYNODECOMPONENT
                                    (
                                    SBMOTIVEINSTANCE,
                                    SBCOMPONENTINSTANCE,
                                    INUPRODUCTMOTIVEID,
                                    RCGETMAINCOMPONENTS.COMPONENT_ID,
                                    TRUE,
                                    TRUE,
                                    IBLLOADALLCOMPONENT,
                                    FALSE,
                                    DTPRODUCTRETIREDATE
                                    );
        END LOOP;
        CLOSE CURFGETMAINCOMPONENTS;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMotProdYielded',3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFGETMAINCOMPONENTS);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFGETMAINCOMPONENTS);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE LOADPRODYIELDEDRETIRE
        (
        INUPRODUCTMOTIVEID  IN PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE
        )
    IS
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        SBCOMPONENTINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
        NUINDEXATTRIBUTE    GE_BOINSTANCECONTROL.STYNUINDEX;
        SBPRODUCTORIGINID   GE_BOINSTANCECONTROL.STYSBVALUE;
        NUCOMPONENTIDPROD   PR_COMPONENT.COMPONENT_ID%TYPE;
        RCPRODUCT           DAPR_PRODUCT.STYPR_PRODUCT;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadProdYieldedRetire. Motivo Producto:['||INUPRODUCTMOTIVEID||']',2);

        
        GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        SBCOMPONENTINSTANCE := SBCURRENTINSTANCE;
        UT_TRACE.TRACE('Instancia Actual:['||SBCOMPONENTINSTANCE||']',3);

        
        IF NOT GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBCOMPONENTINSTANCE,NULL,'mo_component','PRODUCT_ORIGIN_ID',NUINDEXATTRIBUTE)
        THEN
            UT_TRACE.TRACE('No se Encontr� Producto Cedido',3);
            GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
            RETURN;
        END IF;

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBCOMPONENTINSTANCE,NULL,'mo_component','PRODUCT_ORIGIN_ID',SBPRODUCTORIGINID);
        UT_TRACE.TRACE('Producto Cedido:['||SBPRODUCTORIGINID||']',3);

        
        IF SBPRODUCTORIGINID IS NULL THEN
            UT_TRACE.TRACE('No se Encontr� Producto Cedido',3);
            GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
            RETURN;
        END IF;

        
        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(TO_NUMBER(SBPRODUCTORIGINID));

        
        PR_BOCOMPONENT.GETCOMPONENTID(RCPRODUCT.PRODUCT_ID,RCPRODUCT.SERVICE_NUMBER,MO_BOCONSTANTS.CNUCOMPTYPELN,NUCOMPONENTIDPROD);
        UT_TRACE.TRACE('Componente de Producto:['||NUCOMPONENTIDPROD||']',3);

        
        MO_BOUNCOMPOSITIONUTIL.LOADMOTCOMPBYPRODCOMP(SBCURRENTINSTANCE,SBCOMPONENTINSTANCE,INUPRODUCTMOTIVEID,NUCOMPONENTIDPROD,FALSE,FALSE);

        
        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(SBCOMPONENTINSTANCE,NULL,'mo_component','COMPONENT_ID_PROD',NULL);

        
        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(SBCOMPONENTINSTANCE,NULL,'mo_component','CLASS_SERVICE_ID',NULL);

        
        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(SBCOMPONENTINSTANCE,NULL,'mo_component','PRODUCT_ID',NULL);

        
        CREATEMOTPRODYIELDED(TO_NUMBER(SBPRODUCTORIGINID),INUPRODUCTMOTIVEID,NULL,FALSE);

        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadProdYieldedRetire', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE LOADPRODYIELDEDACTIVATION
        (
        INUPRODUCTMOTIVEID  IN PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE
        )
    IS
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        NUINDEXATTRIBUTE    GE_BOINSTANCECONTROL.STYNUINDEX;
        SBPRODUCTORIGINID   GE_BOINSTANCECONTROL.STYSBVALUE;
        TBHIERARCHY         GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        SBOBJECTTYPE        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBOBJECTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKAGEINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCOMPONENTINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadProdYieldedActivation. Motivo Producto:['||INUPRODUCTMOTIVEID||']',2);

        
        GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        UT_TRACE.TRACE('Instancia Actual:['||SBCURRENTINSTANCE||']',3);

        
        GE_BOINSTANCECONTROL.INSTANCEHIERARCHY(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,TBHIERARCHY);

        
        NUINDEX := TBHIERARCHY.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(TBHIERARCHY(NUINDEX).SBINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY,MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE,SBOBJECTTYPE);
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(TBHIERARCHY(NUINDEX).SBINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY,MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID,SBOBJECTID);

            
            IF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUPACKAGEOBJECT THEN
                SBPACKAGEINSTANCE := TBHIERARCHY(NUINDEX).SBINSTANCE;
            END IF;

            
            IF SBOBJECTTYPE = MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT THEN

                SBCOMPONENTINSTANCE := TBHIERARCHY(NUINDEX).SBINSTANCE;
                UT_TRACE.TRACE('Instancia Componente:['||SBCOMPONENTINSTANCE||']',3);

                
                IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBCOMPONENTINSTANCE,NULL,'mo_component','PRODUCT_ORIGIN_ID',NUINDEXATTRIBUTE)
                THEN
                    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBCOMPONENTINSTANCE,NULL,'mo_component','PRODUCT_ORIGIN_ID',SBPRODUCTORIGINID);
                    UT_TRACE.TRACE('Producto Cedido:['||SBPRODUCTORIGINID||']',3);

                    
                    IF SBPRODUCTORIGINID IS NOT NULL THEN

                        
                        CREATEMOTPRODYIELDED(TO_NUMBER(SBPRODUCTORIGINID),INUPRODUCTMOTIVEID,SBPACKAGEINSTANCE,TRUE);
                    END IF;
                END IF;
            END IF;

            NUINDEX := TBHIERARCHY.NEXT(NUINDEX);
        END LOOP;

        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadProdYieldedActivation', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE LOADDATAPRODUCTCOMPONENT
        (
        INUPRODUCTMOTIVEID  IN MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        INUCOMPONENTIDPROD  IN MO_COMPONENT.COMPONENT_ID_PROD%TYPE,
        IBLLOADCHILD        IN BOOLEAN,
        IBLLOADALLCOMPONENT IN BOOLEAN,
        IBLLOADADDRESS      IN BOOLEAN DEFAULT TRUE
        )
    IS
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        SBWORKINSTANCE      GE_BOINSTANCECONTROL.STYSBVALUE;
        NUPRODUCTID         MO_MOTIVE.PRODUCT_ID%TYPE;
    BEGIN

     UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadDataProductComponent',2);
     GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);

     
     GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBWORKINSTANCE);

     UT_TRACE.TRACE('Instancia de Motivos:['||SBWORKINSTANCE||']',3);

     NUPRODUCTID := DAPR_COMPONENT.FNUGETPRODUCT_ID(INUCOMPONENTIDPROD) ;

     

    LOADDATACOMPONENT (
            IBLLOADCHILD,
            IBLLOADALLCOMPONENT,
            IBLLOADADDRESS,
            SBWORKINSTANCE,
            NUPRODUCTID,
            INUPRODUCTMOTIVEID,
            INUCOMPONENTIDPROD);

        
    GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);

    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadDataProductComponent',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE LOADVIRTUALCX
        (
        INUPRODUCTID         MO_MOTIVE.PRODUCT_ID%TYPE,
        INUPRODUCTMOTIVEID  IN MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        INUCOMPONENTIDPROD  IN MO_COMPONENT.COMPONENT_ID_PROD%TYPE,
        IBLLOADCHILD        IN BOOLEAN,
        IBLLOADALLCOMPONENT IN BOOLEAN,
        IBLLOADADDRESS      IN BOOLEAN DEFAULT TRUE
        )
    IS
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        SBFATHERINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
        SBMOTIVEINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
        SBCOMPONENTINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
        TBINSTANCE          GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
        BLCREATEINSTANCE    BOOLEAN;
        DTPRODUCTRETIREDATE DATE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadVirtualCx',2);

        
        GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBMOTIVEINSTANCE);

        UT_TRACE.TRACE('Instancia de Motivos:['||SBMOTIVEINSTANCE||']',3);
        
        IF IBLLOADALLCOMPONENT THEN
            DTPRODUCTRETIREDATE := PR_BCPRODUCT.FDTLASTPRODUCTRETIRE(INUPRODUCTID);
        ELSE
            DTPRODUCTRETIREDATE := NULL;
        END IF;
        UT_TRACE.TRACE('Fecha de Retiro:['||DTPRODUCTRETIREDATE||']',3);

        
        GE_BOINSTANCECONTROL.INSTANCEHIERARCHY(SBMOTIVEINSTANCE,TBINSTANCE);

        
        FOR RCCOMPONENTS  IN  PR_BCVIRTUAL_CX.CUCOMPSBYCOMPOPER(INUCOMPONENTIDPROD) LOOP
            BLCREATEINSTANCE := TRUE;
            SBFATHERINSTANCE := SBMOTIVEINSTANCE;

            
            IF FBLEXISTINSTANCECOMP(INUPRODUCTMOTIVEID,RCCOMPONENTS.COMPONENT_TYPE_ID,RCCOMPONENTS.SERVICE_NUMBER,TBINSTANCE,SBCOMPONENTINSTANCE)
            THEN
                UT_TRACE.TRACE('Ya Existe la Instancia', 4);
                BLCREATEINSTANCE := FALSE;
                SBFATHERINSTANCE := SBCOMPONENTINSTANCE;
            END IF;

            
            MO_BOUNCOMPOSITIONUTIL.LOADHIERARCHYNODECOMPONENT
                                    (
                                    SBFATHERINSTANCE,
                                    SBCOMPONENTINSTANCE,
                                    INUPRODUCTMOTIVEID,
                                    RCCOMPONENTS.COMPONENT_ID,
                                    BLCREATEINSTANCE,
                                    TRUE,
                                    IBLLOADALLCOMPONENT,
                                    IBLLOADADDRESS,
                                    DTPRODUCTRETIREDATE
                                    );
        END LOOP;
        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadVirtualCx', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    
    
    
    
    
    


    

















    PROCEDURE GETMOFATHERCOMPONENT
        (
         ISBPROCESSINSTANCE     IN      GE_BOINSTANCECONTROL.STYSBVALUE,
         IORCPRCOMPONENTLINK    IN OUT  DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK,
         ONUMOFATHERCOMPID      OUT     MO_COMPONENT.COMPONENT_ID%TYPE
        )
    IS

        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUFATHERCOMPTYPE     PR_COMPONENT.COMPONENT_TYPE_ID%TYPE;
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;

    BEGIN

    ONUMOFATHERCOMPID := NULL;
    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.GetMoFatherComponent',12);
    
    UT_TRACE.TRACE('        Entrada: iorcPrComponentLink.parent_component_id:['||IORCPRCOMPONENTLINK.PARENT_COMPONENT_ID||']',17);
    IF PR_BOCOMPONENT.GETCOMPONENTTYPE(IORCPRCOMPONENTLINK.PARENT_COMPONENT_ID) = GE_BOPARAMETER.FNUGET('CC_COMP_INCLUDED') THEN
        PR_BOCOMPONENT.GETFATHERCOMPONENT(IORCPRCOMPONENTLINK.PARENT_COMPONENT_ID,IORCPRCOMPONENTLINK.PARENT_COMPONENT_ID,NUFATHERCOMPTYPE);
    END IF;
    DAPR_COMPONENT.GETRECORD(IORCPRCOMPONENTLINK.PARENT_COMPONENT_ID, RCCOMPBYPROD);
    
    IF  GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(ISBPROCESSINSTANCE,
                            MO_BOCONSTANTS.CSBMO_COMPONENT||IORCPRCOMPONENTLINK.PARENT_COMPONENT_ID,
                            MO_BOCONSTANTS.CSBMO_COMPONENT,'COMPONENT_ID',NUINDEX)  THEN
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(ISBPROCESSINSTANCE,
                                MO_BOCONSTANTS.CSBMO_COMPONENT||IORCPRCOMPONENTLINK.PARENT_COMPONENT_ID,
                                MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID', ONUMOFATHERCOMPID);
    END IF;
    UT_TRACE.TRACE('        Salida: iorcPrComponentLink.parent_component_id:['||IORCPRCOMPONENTLINK.PARENT_COMPONENT_ID||']-onuMoFatherCompId:['||ONUMOFATHERCOMPID||']',17);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.GetMoFatherComponent',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETMOFATHERCOMPONENT;

    

















    PROCEDURE CREATEMOEXECLOGMOT
    (
        ISBPACKAGEID          IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBMOTIVEID           IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBACTIONID           IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
    )

    IS

    SBGROUP      GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMoExecLogMot',12);
    SBGROUP :=  CSBMO_EXECUTOR_LOG_MOT||ISBMOTIVEID;
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_EXECUTOR_LOG_MOT, 'EXECUTOR_LOG_MOT_ID',MO_BOSEQUENCES.FNUGETSEQEXECUTOR_LOG_MOT);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_EXECUTOR_LOG_MOT, 'PACKAGE_ID', ISBPACKAGEID);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_EXECUTOR_LOG_MOT, 'MOTIVE_ID', ISBMOTIVEID);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_EXECUTOR_LOG_MOT, 'ACTION_ID', ISBACTIONID);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_EXECUTOR_LOG_MOT, 'STATUS_EXEC_LOG_ID', MO_BOSTATUSPARAMETER.FNUGETSTATUS_REGISTER_EXEC);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_EXECUTOR_LOG_MOT, 'LOG_DATE', UT_DATE.FSBSTR_SYSDATE);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_EXECUTOR_LOG_MOT, 'TRY_AMOUNT', MO_BOCONSTANTS.CNUOK);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMoExecLogMot',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMOEXECLOGMOT;

    
















    PROCEDURE CREATEMORETIRE
    (
        INUMOTIVEID           IN        MO_MOTIVE.MOTIVE_ID%TYPE,
        INURETIRETYPEID       IN        MO_RETIRE.RETIRE_TYPE_ID%TYPE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
    )

    IS

    SBGROUP      GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

    SBGROUP := CSBMO_RETIRE||INUMOTIVEID;
    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMoRetire',12);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_RETIRE, 'MOTIVE_ID',INUMOTIVEID );
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_RETIRE, 'RETIRE_TYPE_ID', INURETIRETYPEID);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_RETIRE, 'REGISTER_DATE', UT_DATE.FSBSTR_SYSDATE);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_RETIRE, 'RETIRE_DATE', NULL);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMoRetire',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMORETIRE;

    
















    PROCEDURE CREATEMORETIRECOMP
    (
        INUCOMPONENTID        IN        MO_COMPONENT.COMPONENT_ID%TYPE,
        INURETIRETYPEID       IN        MO_RETIRE_COMP.RETIRE_TYPE_ID%TYPE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
    )

    IS

    SBGROUP      GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMoRetireComp',12);
    SBGROUP := CSBMO_RETIRE_COMP||INUCOMPONENTID;
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_RETIRE_COMP, 'COMPONENT_ID',INUCOMPONENTID );
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_RETIRE_COMP, 'RETIRE_TYPE_ID', INURETIRETYPEID);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_RETIRE_COMP, 'REGISTER_DATE', UT_DATE.FSBSTR_SYSDATE);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_RETIRE_COMP, 'RETIRE_DATE', NULL);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMoRetireComp',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMORETIRECOMP;

    


















    PROCEDURE CREATEMOSUSPENSION
    (
        INUMOTIVEID           IN        MO_MOTIVE.MOTIVE_ID%TYPE,
        INUSUSPENSIONTYPEID   IN        MO_SUSPENSION.SUSPENSION_TYPE_ID%TYPE,
        ISBAPLICATIONDATE     IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBENDINGDATE         IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
    )

    IS

    SBGROUP      GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMoSuspension',12);
    SBGROUP := CSBMO_SUSPENSION||INUMOTIVEID;
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION, 'MOTIVE_ID',INUMOTIVEID );
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION, 'SUSPENSION_TYPE_ID', INUSUSPENSIONTYPEID);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION, 'REGISTER_DATE', UT_DATE.FSBSTR_SYSDATE);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION, 'APLICATION_DATE', ISBAPLICATIONDATE);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION, 'ENDING_DATE', ISBENDINGDATE);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMoSuspension',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMOSUSPENSION;

    



















    PROCEDURE CREATEMOSUSPENCOMP
    (
        INUCOMPONENTID        IN        MO_COMPONENT.COMPONENT_ID%TYPE,
        INUSUSPENSIONTYPEID   IN        MO_SUSPENSION_COMP.SUSPENSION_TYPE_ID%TYPE,
        ISBAPLICATIONDATE     IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBENDINGDATE         IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
    )

    IS

    SBGROUP      GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMoSuspenComp',12);
    SBGROUP := CSBMO_SUSPENSION_COMP||INUCOMPONENTID;
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION_COMP, 'COMPONENT_ID',INUCOMPONENTID );
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION_COMP, 'SUSPENSION_TYPE_ID', INUSUSPENSIONTYPEID);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION_COMP, 'REGISTER_DATE', UT_DATE.FSBSTR_SYSDATE);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION_COMP, 'APLICATION_DATE', ISBAPLICATIONDATE);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_SUSPENSION_COMP, 'ENDING_DATE', ISBENDINGDATE );
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMoSuspenComp',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMOSUSPENCOMP;

    






























    PROCEDURE LOADNETWORKELEM
    (
        INUCOMPIDPROD         IN        PR_COMPONENT.COMPONENT_ID%TYPE,
        INUCOMPIDMOT          IN        MO_COMPONENT.COMPONENT_ID%TYPE,
        INUCATEGORYID         IN        PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
    )

    IS

        NUNETWORKELEMOPER       PR_NETWORK_ELEM_OPER.NETWORK_ELEM_OPER_ID%TYPE;
        SBGROUPRED              GE_BOINSTANCECONTROL.STYSBNAME := NULL;
        CURFGETELEMBYCOMPID     CONSTANTS.TYREFCURSOR;
        RCPRNETELEMOPER         DAPR_NETWORK_ELEM_OPER.STYPR_NETWORK_ELEM_OPER;
        TBMONETELEMOPER         DAPR_NETWORK_ELEM_OPER.TYTBPR_NETWORK_ELEM_OPER;
        NUINDEX                 BINARY_INTEGER;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadNetworkElem',12);

        
        TBMONETELEMOPER.DELETE;
        NUINDEX := 1;
        CURFGETELEMBYCOMPID := PR_BCNETWORK_ELEM_OPER.FRFGETELEMENTSBYCOMPONENTID(INUCOMPIDPROD);
        FETCH CURFGETELEMBYCOMPID INTO RCPRNETELEMOPER;
        WHILE CURFGETELEMBYCOMPID%FOUND LOOP
            NUNETWORKELEMOPER :=  PR_BOSEQUENCE.GETNETWORKELEMOPERID;
            TBMONETELEMOPER(NUINDEX).NETWORK_ELEM_OPER_ID   := NUNETWORKELEMOPER;
            TBMONETELEMOPER(NUINDEX).SEQUENCE_ELEMENT       := RCPRNETELEMOPER.SEQUENCE_ELEMENT;
            TBMONETELEMOPER(NUINDEX).CATEGORY_ID            := INUCATEGORYID;
            TBMONETELEMOPER(NUINDEX).COMPONENT_ID           := INUCOMPIDPROD;
            TBMONETELEMOPER(NUINDEX).ELEMENT_CODE           := RCPRNETELEMOPER.ELEMENT_CODE;
            TBMONETELEMOPER(NUINDEX).ELEMENT_ID             := RCPRNETELEMOPER.ELEMENT_ID;
            TBMONETELEMOPER(NUINDEX).ELEMENT_TYPE_ID        := RCPRNETELEMOPER.ELEMENT_TYPE_ID;
            TBMONETELEMOPER(NUINDEX).JUMP_NUM               := RCPRNETELEMOPER.JUMP_NUM;
            TBMONETELEMOPER(NUINDEX).LOCATION_ID            := RCPRNETELEMOPER.LOCATION_ID;
            TBMONETELEMOPER(NUINDEX).PRODUCT_ID             := RCPRNETELEMOPER.PRODUCT_ID;


           NUINDEX := NUINDEX + 1;
           FETCH CURFGETELEMBYCOMPID INTO RCPRNETELEMOPER;
        END LOOP;
        CLOSE CURFGETELEMBYCOMPID;

        
        IF TBMONETELEMOPER.COUNT <> 0 THEN
            FOR NUINDEX IN TBMONETELEMOPER.FIRST .. TBMONETELEMOPER.LAST LOOP
                SBGROUPRED := MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER||INUCOMPIDMOT||'_'||TBMONETELEMOPER(NUINDEX).NETWORK_ELEM_OPER_ID;
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'NETWORK_ELEM_OPER_ID',TBMONETELEMOPER(NUINDEX).NETWORK_ELEM_OPER_ID );
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'SEQUENCE_ELEMENT', TBMONETELEMOPER(NUINDEX).SEQUENCE_ELEMENT);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'CATEGORY_ID', TBMONETELEMOPER(NUINDEX).CATEGORY_ID);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'COMPONENT_ID', TBMONETELEMOPER(NUINDEX).COMPONENT_ID);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'ELEMENT_CODE', TBMONETELEMOPER(NUINDEX).ELEMENT_CODE);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'ELEMENT_ID', TBMONETELEMOPER(NUINDEX).ELEMENT_ID);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'ELEMENT_TYPE_ID', TBMONETELEMOPER(NUINDEX).ELEMENT_TYPE_ID);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'JUMP_NUM', TBMONETELEMOPER(NUINDEX).JUMP_NUM);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'LOCATION_ID', TBMONETELEMOPER(NUINDEX).LOCATION_ID);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUPRED, MO_BOCONSTANTS.CSBMO_NETWORK_ELEM_OPER, 'PRODUCT_ID', TBMONETELEMOPER(NUINDEX).PRODUCT_ID);
            END LOOP;
        END IF;

    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadNetworkElem',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFGETELEMBYCOMPID%ISOPEN THEN
                CLOSE  CURFGETELEMBYCOMPID;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFGETELEMBYCOMPID%ISOPEN THEN
                CLOSE  CURFGETELEMBYCOMPID;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADNETWORKELEM;


    



























    PROCEDURE LOADCOMPADDRORPREM
    (
        INUCOMPONENTID        IN       PR_COMPONENT.COMPONENT_ID%TYPE,
        INUMOTICOMPID         IN       MO_COMPONENT.COMPONENT_ID%TYPE,
        IOSBPROCESSINSTANCE IN  OUT    GE_BOINSTANCECONTROL.STYSBNAME
    )

    IS

        RCCOMPONENTADDRESS  PR_BCADDRESS.STYCUCOMPADDRESSBYCOMPONENT;

        NUADDRESSTYPEID     NUMBER;
        SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadCompAddrOrPrem',12);
        NUADDRESSTYPEID := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBADDRESS_TYPE_PRINCIP);
        
        RCCOMPONENTADDRESS := PR_BOADDRESS.FRCCOMPONENTADDRESS(INUCOMPONENTID);
        IF(RCCOMPONENTADDRESS.ADDRESS_ID IS NOT NULL) THEN
        SBGROUP := CSBMO_ADDRESS_COMP||INUCOMPONENTID;
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_ADDRESS_COMP, 'ADDRESS_COMP_ID', RCCOMPONENTADDRESS.ADDRESS_ID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_ADDRESS_COMP, 'COMPONENT_ID', INUMOTICOMPID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_ADDRESS_COMP, 'ADDRESS', RCCOMPONENTADDRESS.ADDRESS);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_ADDRESS_COMP, 'PARSER_ADDRESS_ID', RCCOMPONENTADDRESS.ADDRESS_ID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_ADDRESS_COMP, 'GEOGRAP_LOCATION_ID', RCCOMPONENTADDRESS.GEOGRAP_LOCATION_ID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_ADDRESS_COMP, 'ADDRESS_TYPE_ID', '1');
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_ADDRESS_COMP, 'IS_ADDRESS_MAIN', GE_BOCONSTANTS.CSBYES);
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadCompAddrOrPrem',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCOMPADDRORPREM;

   




















    PROCEDURE LOADDATACONNECT
        (
        INUCOMPONENTID        IN       PR_COMPONENT.COMPONENT_ID%TYPE,
        INUMOTICOMPID         IN       MO_COMPONENT.COMPONENT_ID%TYPE,
        IOSBPROCESSINSTANCE IN  OUT    GE_BOINSTANCECONTROL.STYSBNAME
        )

    IS
        RCDATACONNECTION    DAPR_DATA_CONNECTION.STYPR_DATA_CONNECTION;
        SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadDataConnect',12);

        
        IF (NOT DAPR_DATA_CONNECTION.FBLEXIST(INUCOMPONENTID)) THEN
            RETURN;
        END IF;

        
        DAPR_DATA_CONNECTION.GETRECORD(INUCOMPONENTID,RCDATACONNECTION);

        SBGROUP := CSBMO_DATA_CONNECTION||INUMOTICOMPID;
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_DATA_CONNECTION, 'COMPONENT_ID', INUMOTICOMPID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_DATA_CONNECTION, 'QUANTITY', RCDATACONNECTION.QUANTITY);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_DATA_CONNECTION, 'COMMENT_', RCDATACONNECTION.COMMENT_);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_DATA_CONNECTION, 'TECHNOLOGY_TYPE_ID', RCDATACONNECTION.TECHNOLOGY_TYPE_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_DATA_CONNECTION, 'BANDWIDTH_ID', RCDATACONNECTION.BANDWIDTH_ID);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadDataConnect',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




















    PROCEDURE LOADSPECIALSERVICE
        (
        INUCOMPONENTID        IN       PR_COMPONENT.COMPONENT_ID%TYPE,
        INUMOTICOMPID         IN       MO_COMPONENT.COMPONENT_ID%TYPE,
        IOSBPROCESSINSTANCE IN  OUT    GE_BOINSTANCECONTROL.STYSBNAME
        )

    IS
        RCSPECIALSERVICE    DAPR_SPECIAL_SERVICE.STYPR_SPECIAL_SERVICE;
        SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadSpecialService',12);

        
        IF (NOT DAPR_SPECIAL_SERVICE.FBLEXIST(INUCOMPONENTID)) THEN
            RETURN;
        END IF;

        
        DAPR_SPECIAL_SERVICE.GETRECORD(INUCOMPONENTID,RCSPECIALSERVICE);

        SBGROUP := CSBMO_SPECIAL_SERVICE||INUMOTICOMPID;
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP,  CSBMO_SPECIAL_SERVICE, 'COMPONENT_ID', INUMOTICOMPID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP,  CSBMO_SPECIAL_SERVICE, 'CLASS_SERVICE_ID', DAPR_COMPONENT.FNUGETCLASS_SERVICE_ID(INUCOMPONENTID));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP,  CSBMO_SPECIAL_SERVICE, 'SECRET_CODE', RCSPECIALSERVICE.SECRET_CODE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP,  CSBMO_SPECIAL_SERVICE, 'NUMBER_B', RCSPECIALSERVICE.NUMBER_B);


        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadSpecialService',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    





















































    PROCEDURE LOADCOMPONENT
    (
        INUPACKAGEID          IN        MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID           IN        MO_MOTIVE.MOTIVE_ID%TYPE,
        ISBTAGMOTIV           IN        MO_MOTIVE.TAG_NAME%TYPE,
        INUFATHCOMPIDMOT      IN        MO_COMPONENT.COMPONENT_ID%TYPE,
        ISBTAGMOTICOMP        IN        MO_COMPONENT.TAG_NAME%TYPE,
        INUCONSECUT           IN        MO_COMPONENT.COMPONENT_NUMBER%TYPE,
        INUCOMPSTATUSID       IN        MO_COMPONENT.MOTIVE_STATUS_ID%TYPE,
        INUCLASSSERVICE       IN        MO_COMPONENT.CLASS_SERVICE_ID%TYPE,
        INUCOMPIDPROD         IN        PR_COMPONENT.COMPONENT_ID%TYPE,
        INUELEMCATEGORY       IN        PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE,
        IBLLOADADDRESS        IN        BOOLEAN,
        IBLNUMBERCHANG        IN        BOOLEAN,
        INUELECATFORNUMBER    IN        GE_ELE_CATEGORY_TYPE.CATEGORY_ID%TYPE,
        ISBSUGGESTNUMBER      IN        MO_COMPONENT.SUGGESTED_NUMBER%TYPE,
        ISBOBLIGATORYFLAG     IN        MO_COMPONENT.OBLIGATORY_FLAG%TYPE,
        ISBOBLIGATORYCHANGE   IN        MO_COMPONENT.OBLIGATORY_CHANGE%TYPE,
        ISBCATEGORYID         IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBSUBCATEGORYID      IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        INUPRODORIGID         IN        MO_COMPONENT.PRODUCT_ORIGIN_ID%TYPE,
        IBLLOADNET            IN        BOOLEAN,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME,
        ONUCOMPIDMOT          OUT       MO_COMPONENT.COMPONENT_ID%TYPE,
        IBLLOADGROUP          IN        BOOLEAN DEFAULT FALSE,
        ISBFLAGPRESERVENUMBER IN        VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBNO
    )
    IS

        RCCOMPBYPROD        DAPR_COMPONENT.STYPR_COMPONENT;
        NUASSIGNROUTEID     MO_COMPONENT.ASSIGN_ROUTE_ID%TYPE;
        SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadComponent',12);
        DAPR_COMPONENT.GETRECORD(INUCOMPIDPROD, RCCOMPBYPROD);
        ONUCOMPIDMOT := MO_BOSEQUENCES.FNUGETCOMPONENTID;
        NUASSIGNROUTEID := RCCOMPBYPROD.ASSIGN_ROUTE_ID;

        IF(IBLLOADGROUP = FALSE) THEN
            
            SBGROUP := MO_BOCONSTANTS.CSBMO_COMPONENT||INUCOMPIDPROD;
        ELSE
            SBGROUP := MO_BOCONSTANTS.CSBMO_COMPONENT||INUMOTIVEID||INUCOMPIDPROD;
        END IF;

        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID', ONUCOMPIDMOT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_NUMBER', INUCONSECUT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SUGGESTED_NUMBER', ISBSUGGESTNUMBER);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'OBLIGATORY_FLAG', NVL(ISBOBLIGATORYFLAG,GE_BOCONSTANTS.CSBNO));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'OBLIGATORY_CHANGE', NVL(ISBOBLIGATORYCHANGE,GE_BOCONSTANTS.CSBNO));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'NOTIFY_ASSIGN_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'AUTHORIZ_LETTER_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ESTIMATED_INST_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ASSIGN_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ATTENTION_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ANNUL_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'STATUS_CHANGE_DATE', UT_DATE.FSBSTR_SYSDATE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'RECORDING_DATE', UT_DATE.FSBSTR_SYSDATE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'DIRECTIONALITY_ID', RCCOMPBYPROD.DIRECTIONALITY_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ASSIGN_TYPE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'STUDY_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'STUDY_NUMBER', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'CUSTOM_DECISION_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'KEEP_NUMBER_FLAG', ISBFLAGPRESERVENUMBER);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'MOTIVE_ID', INUMOTIVEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'DISTRICT_ID', RCCOMPBYPROD.DISTRICT_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'BUILDING_ID', RCCOMPBYPROD.BUILDING_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'DISTRIBUT_ADMIN_ID', RCCOMPBYPROD.DISTRIBUT_ADMIN_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ANNUL_CAUSAL_ID', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'CATEGORY_ID', NVL(ISBCATEGORYID,RCCOMPBYPROD.CATEGORY_ID));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SUBCATEGORY_ID', NVL(ISBSUBCATEGORYID,RCCOMPBYPROD.SUBCATEGORY_ID));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PROD_MOTIVE_COMP_ID', PS_BOPRODUCTMOTIVECOMP.FNUGETPRODMOTICOMPBYTAGNAME(ISBTAGMOTICOMP));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_TYPE_ID', RCCOMPBYPROD.COMPONENT_TYPE_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'MOTIVE_TYPE_ID', DAPS_PRODUCT_MOTIVE.FNUGETMOTIVE_TYPE_ID(PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME(ISBTAGMOTIV)));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ASSIGN_ROUTE_ID', RCCOMPBYPROD.ASSIGN_ROUTE_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'MOTIVE_STATUS_ID', INUCOMPSTATUSID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PRODUCT_MOTIVE_ID', PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME(ISBTAGMOTIV));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'UNDOASSIGN_CAUSAL_ID',NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'CLASS_SERVICE_ID', NVL(INUCLASSSERVICE,RCCOMPBYPROD.CLASS_SERVICE_ID));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PACKAGE_ID',INUPACKAGEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PRODUCT_ID', RCCOMPBYPROD.PRODUCT_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SERVICE_NUMBER', RCCOMPBYPROD.SERVICE_NUMBER);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID_PROD', RCCOMPBYPROD.COMPONENT_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'MEDIATION_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SERVICE_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'UNCHARGED_TIME', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PRODUCT_ORIGIN_ID', NVL(INUPRODORIGID,RCCOMPBYPROD.PRODUCT_ORIGIN_ID));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'QUANTITY', RCCOMPBYPROD.QUANTITY);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'TAG_NAME', ISBTAGMOTICOMP);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'IS_MAIN', RCCOMPBYPROD.IS_MAIN);

        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMP_LINK, 'CHILD_COMPONENT_ID', ONUCOMPIDMOT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMP_LINK, 'FATHER_COMPONENT_ID',INUFATHCOMPIDMOT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMP_LINK, 'MOTIVE_ID', INUMOTIVEID);

        
        IF IBLLOADNET THEN
            
            UT_TRACE.TRACE('componente_producto: '||INUCOMPIDPROD|| ' => rcCompByProd.COMPONENT_ID:'||RCCOMPBYPROD.COMPONENT_ID,5); 

            LOADNETWORKELEM(RCCOMPBYPROD.COMPONENT_ID,    
                            ONUCOMPIDMOT,                 
                            INUELEMCATEGORY,              
                            IOSBPROCESSINSTANCE           
                            );
        END IF;

        
        LOADDATACONNECT(RCCOMPBYPROD.COMPONENT_ID,ONUCOMPIDMOT,IOSBPROCESSINSTANCE);

        
        IF IBLLOADADDRESS THEN
            LOADCOMPADDRORPREM(RCCOMPBYPROD.COMPONENT_ID,ONUCOMPIDMOT,IOSBPROCESSINSTANCE);
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadComponent. Componente Creado:['||ONUCOMPIDMOT||']',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCOMPONENT;

    
























    PROCEDURE LOADADDRESSORPREMIS
    (
        INUPRODUCTID        IN       PR_PRODUCT.PRODUCT_ID%TYPE,
        INUMOTIVEID         IN       MO_MOTIVE.MOTIVE_ID%TYPE,
        IOSBPROCESSINSTANCE IN  OUT  GE_BOINSTANCECONTROL.STYSBNAME
    )
    IS
        RCPRODUCTADDRESS    DAAB_ADDRESS.STYAB_ADDRESS;
        NUADDRESSTYPE       MO_ADDRESS.ADDRESS_TYPE_ID%TYPE;
        SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadAddressOrPremis',12);
        NUADDRESSTYPE := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBADDRESS_TYPE_PRINCIP);
        SBGROUP := MO_BOCONSTANTS.CSBMO_ADDRESS||INUMOTIVEID;
        
        RCPRODUCTADDRESS := PR_BOADDRESS.FRCPRODUCTADDRESS(INUPRODUCTID);
        IF(RCPRODUCTADDRESS.ADDRESS_ID IS NOT NULL) THEN
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'ADDRESS_ID', MO_BOSEQUENCES.FNUGETADDRESSID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'MOTIVE_ID', INUMOTIVEID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'ADDRESS', RCPRODUCTADDRESS.ADDRESS);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'PARSER_ADDRESS_ID', RCPRODUCTADDRESS.ADDRESS_ID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'GEOGRAP_LOCATION_ID', RCPRODUCTADDRESS.GEOGRAP_LOCATION_ID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'ADDRESS_TYPE_ID', '1');
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'IS_ADDRESS_MAIN', GE_BOCONSTANTS.CSBYES);
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadAddressOrPremis',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADADDRESSORPREMIS;


    
















































    PROCEDURE CREATEMOTIVEBYPRODUCT
    (
        INUPRODUCTID         IN     PR_PRODUCT.PRODUCT_ID%TYPE,
        INUPACKAGEID         IN     MO_PACKAGES.PACKAGE_ID%TYPE,
        ISBTAGMOTIV          IN     PS_PRODUCT_MOTIVE.TAG_NAME%TYPE,
        ISBPROVINITDAT       IN     GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBPROVENDDAT        IN     GE_BOINSTANCECONTROL.STYSBVALUE,
        IBLLOADADDRESS       IN     BOOLEAN,
        INUPRODUCTTYPEID     IN     MO_MOTIVE.PRODUCT_TYPE_ID%TYPE,
        ISBPRIORITY          IN     GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBCATEGORYID        IN     GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBSUBCATEGORYID     IN     GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBPARTIALFLAG       IN     GE_BOINSTANCECONTROL.STYSBVALUE,
        ISBINITPROCESSDATE   IN     GE_BOINSTANCECONTROL.STYSBVALUE,
        IOSBPROCESSINSTANCE  IN OUT GE_BOINSTANCECONTROL.STYSBNAME,
        ONUMOTIVEID          OUT    MO_MOTIVE.MOTIVE_ID%TYPE,
        INUCREDITLIMIT       IN     MO_MOTIVE.CREDIT_LIMIT%TYPE DEFAULT NULL,
        INUCAUSALID          IN     MO_MOTIVE.CAUSAL_ID%TYPE DEFAULT NULL
    )
    IS
		RCPRODUCT             DAPR_PRODUCT.STYPR_PRODUCT;
        RCSUBSCRIPTION        SUSCRIPC%ROWTYPE;
        NUPACKAGEID           MO_PACKAGES.PACKAGE_ID%TYPE := INUPACKAGEID;
        NUGEOGRAPLOCATIONID   AB_ADDRESS.GEOGRAP_LOCATION_ID%TYPE;
        SBPROVFLAG            MO_MOTIVE.PROVISIONAL_FLAG%TYPE;
        SBGROUP               GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMotiveByProduct',12);

        
        DAPR_PRODUCT.GETRECORD(INUPRODUCTID, RCPRODUCT );

        RCSUBSCRIPTION := PKTBLSUSCRIPC.FRCGETRECORD(RCPRODUCT.SUBSCRIPTION_ID);

        
        ONUMOTIVEID := MO_BOSEQUENCES.FNUGETMOTIVEID;
        NUGEOGRAPLOCATIONID := PR_BOADDRESS.FNUGETPRODGEOGRLOCATION(INUPRODUCTID);

        IF(ISBPROVENDDAT IS NOT NULL) THEN
           SBPROVFLAG := GE_BOCONSTANTS.CSBYES;
        ELSE
           SBPROVFLAG := GE_BOCONSTANTS.CSBNO;
        END IF;

        SBGROUP := MO_BOCONSTANTS.CSBMO_MOTIVE||ONUMOTIVEID;
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'MOTIVE_ID', ONUMOTIVEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PRIVACY_FLAG', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'CLIENT_PRIVACY_FLAG', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PROVISIONAL_FLAG', SBPROVFLAG);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'IS_MULT_PRODUCT_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'AUTHORIZ_LETTER_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'IS_IMMEDIATE_ATTENT', GE_BOCONSTANTS.CSBYES);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PARTIAL_FLAG', NVL(ISBPARTIALFLAG,GE_BOCONSTANTS.CSBNO));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PROV_INITIAL_DATE', ISBPROVINITDAT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PROV_FINAL_DATE', ISBPROVENDDAT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'INITIAL_PROCESS_DATE', NVL(ISBINITPROCESSDATE,UT_DATE.FSBSTR_SYSDATE));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PRIORITY', NVL(ISBPRIORITY,MO_BOPARAMETER.FNUGETDEFAULT_PRIORITY));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'MOTIV_RECORDING_DATE', UT_DATE.FSBSTR_SYSDATE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'ESTIMATED_INST_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'ASSIGN_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'ATTENTION_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'ANNUL_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'STATUS_CHANGE_DATE', UT_DATE.FSBSTR_SYSDATE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'STUDY_NUM_TRANSFEREN', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'CUSTOM_DECISION_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'EXECUTION_MAX_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'STANDARD_TIME', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'SERVICE_NUMBER', RCPRODUCT.SERVICE_NUMBER);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'CATEGORY_ID', NVL(ISBCATEGORYID,RCPRODUCT.CATEGORY_ID));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'SUBCATEGORY_ID', NVL(ISBSUBCATEGORYID,RCPRODUCT.SUBCATEGORY_ID));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PRODUCT_MOTIVE_ID', PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME(ISBTAGMOTIV));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'DISTRIBUT_ADMIN_ID', RCPRODUCT.DISTRIBUT_ADMIN_ID );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'DISTRICT_ID', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'BUILDING_ID', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'ANNUL_CAUSAL_ID', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PRODUCT_ID',RCPRODUCT.PRODUCT_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'MOTIVE_TYPE_ID',
                                                DAPS_PRODUCT_MOTIVE.FNUGETMOTIVE_TYPE_ID(PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME(ISBTAGMOTIV)));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PRODUCT_TYPE_ID',NVL(INUPRODUCTTYPEID,RCPRODUCT.PRODUCT_TYPE_ID));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'MOTIVE_STATUS_ID', GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_MOT));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'SUBSCRIPTION_ID', RCPRODUCT.SUBSCRIPTION_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'PACKAGE_ID', NUPACKAGEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'UNDOASSIGN_CAUSAL_ID', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'GEOGRAP_LOCATION_ID', NUGEOGRAPLOCATIONID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'CREDIT_LIMIT', INUCREDITLIMIT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'CREDIT_LIMIT_COVERED', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'CUST_CARE_REQUES_NUM', NUPACKAGEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'VALUE_TO_DEBIT', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'TAG_NAME', ISBTAGMOTIV);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_MOTIVE, 'CAUSAL_ID', INUCAUSALID);

        
        IF IBLLOADADDRESS THEN
            LOADADDRESSORPREMIS(INUPRODUCTID,ONUMOTIVEID,IOSBPROCESSINSTANCE);
        END IF;

    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMotiveByProduct, Motivo Creado['|| ONUMOTIVEID ||']',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMOTIVEBYPRODUCT;

   























    PROCEDURE CREATMOTBYDATACHANG
    (
        ISBTAGMOTIV           IN        MO_MOTIVE.TAG_NAME%TYPE,
        ISBTAGMOTICOMP        IN        MO_COMPONENT.TAG_NAME%TYPE,
        ONUMOTIVEID           OUT       MO_MOTIVE.MOTIVE_ID%TYPE,
        ONUCOMPONENTID        OUT       MO_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
        SBCOMPONENTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRIORITY           GE_BOINSTANCECONTROL.STYSBVALUE;
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
		NUPRIORITY           MO_MOTIVE.PRIORITY%TYPE := NULL;
        SBCAUSALID           GE_BOINSTANCECONTROL.STYSBVALUE;
		NUCAUSALID           MO_MOTIVE.CAUSAL_ID%TYPE := NULL;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByDataChang',12);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

        
        GNUCOMPONENTNUMBER := 1;

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
        NUPACKAGEID := TO_NUMBER(SBPACKAGE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);
        NUCOMPIDPROD := TO_NUMBER(SBCOMPONENTID);

        DAPR_COMPONENT.ACCKEY(NUCOMPIDPROD);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
        NUPRODUCTID := TO_NUMBER(SBPRODUCTID);
        DAPR_PRODUCT.ACCKEY(NUPRODUCTID);

        
        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'PRIORITY', SBPRIORITY) ) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'PRIORITY', SBPRIORITY);
            NUPRIORITY := TO_NUMBER(SBPRIORITY);
        END IF;

        
        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID) ) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID);
            NUCAUSALID := TO_NUMBER(SBCAUSALID);
        END IF;

        
        CREATEMOTIVEBYPRODUCT
        (
            NUPRODUCTID,      
            NUPACKAGEID,      
            ISBTAGMOTIV,      
            NULL,             
            NULL,             
            TRUE,             
            NULL,             
            NUPRIORITY,       
            NULL,             
            NULL,             
            NULL,             
            NULL,             
            SBPROCESSINSTANCE,
            ONUMOTIVEID,      
            NULL,             
            NUCAUSALID        
        );

        
        UT_TRACE.TRACE('Inicia - Creacion de componentes',5);
        FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUFATHCOMPONENTS(NUCOMPIDPROD) LOOP
            DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);
            
            IF(NUCOMPIDPROD = RCPRCOMPONENTLINK.CHILD_COMPONENT_ID ) THEN
                NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
                LOADCOMPONENT   (
                                NUPACKAGEID,
                                ONUMOTIVEID,
                                ISBTAGMOTIV,
                                NUFATHCOMPIDMOT,
                                ISBTAGMOTICOMP,
                                GNUCOMPONENTNUMBER,
                                NUCOMPSTATUSID,
                                NULL,
                                RCPRCOMPONENTLINK.CHILD_COMPONENT_ID,
                                NULL,
                                TRUE,
                                FALSE,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,   
                                NULL,   
                                NULL,
                                FALSE,
                                SBPROCESSINSTANCE,
                                NUCOMPIDMOT
                                );
                ONUCOMPONENTID := NUCOMPIDMOT;
            ELSE
                NUCOMPSTATUSID  :=  GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI);
                LOADCOMPONENT   (
                                NUPACKAGEID,
                                ONUMOTIVEID,
                                ISBTAGMOTIV,
                                NUFATHCOMPIDMOT,
                                ISBTAGMOTICOMP,
                                GNUCOMPONENTNUMBER,
                                NUCOMPSTATUSID,
                                NULL,
                                RCPRCOMPONENTLINK.CHILD_COMPONENT_ID,
                                NULL ,
                                TRUE,
                                FALSE,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,    
                                NULL,    
                                NULL,
                                FALSE,
                                SBPROCESSINSTANCE,
                                NUCOMPIDMOT
                                );
            END IF;

            NUFATHCOMPIDMOT := NUCOMPIDMOT;
            GNUCOMPONENTNUMBER := GNUCOMPONENTNUMBER + 1;
        END LOOP;
        UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByDataChang',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYDATACHANG;

    

    PROCEDURE CREATMOTBYCLASCHANG

    IS
        RCENTITY    GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
        RCENTITY_NULL    GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
        NUENTITY    GE_BOINSTANCECONTROL.STYNUINDEX;
        TBENTITY    MO_BOUNCOMPOSITIONUTIL.TYTBENTITY;
        SBENTITYGROUP VARCHAR2(200);
        SBDATACOMPONENTID VARCHAR2(200);
        
        CNUEQUIV_535      CONSTANT  GE_EQUIVALENCE_SET.EQUIVALENCE_SET_ID%TYPE := 535;
        
        CNUERROR_EQUIV_32 CONSTANT  GE_MESSAGE.MESSAGE_ID%TYPE := 32;
        
        CNUCOMPO_TYPE_8   CONSTANT  PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE := 8;
        NUBANDWIDTHID   PR_DATA_CONNECTION.BANDWIDTH_ID%TYPE;
        SBCOMPONENTTYPE GE_BOINSTANCECONTROL.STYSBVALUE;

        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        SBCOMPONENTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCLASSSERVICE       GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByClasChang',12);
    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
    
    CREATMOTBYDATACHANG
    (
        PS_BOPRODUCTMOTIVE.CSBTAGCAMBCLASSERV,
        PS_BOPRODUCTMOTIVECOMP.CSBTAGCAMBCLASSERV,
        NUMOTIVEID,
        NUCOMPONENTID
    );
    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_1',SBCLASSSERVICE);
    
    GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, MO_BOCONSTANTS.CSBMO_COMPONENT , 'CLASS_SERVICE_ID', SBCLASSSERVICE);

    
    
    
    GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY(SBPROCESSINSTANCE,NUENTITY);
    WHILE NUENTITY IS NOT NULL LOOP
        RCENTITY :=  RCENTITY_NULL;
        SBCOMPONENTTYPE := NULL;
        SBDATACOMPONENTID := NULL;
        GE_BOINSTANCECONTROL.GETENTITY(NUENTITY,RCENTITY);
        IF (RCENTITY.SBENTITY = MO_BOCONSTANTS.CSBMO_COMPONENT) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (SBPROCESSINSTANCE,  RCENTITY.SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_TYPE_ID', SBCOMPONENTTYPE);
            IF  SBCOMPONENTTYPE = CNUCOMPO_TYPE_8 THEN
                UT_TRACE.TRACE('Entidad Encontrada  :['||RCENTITY.SBENTITY||']',1);
                UT_TRACE.TRACE('Grupo  :['||RCENTITY.SBGROUP||']',1);
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (SBPROCESSINSTANCE,  RCENTITY.SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID', SBDATACOMPONENTID);
                SBENTITYGROUP :=  RCENTITY.SBGROUP;
                IF (GE_BOEQUIVALENCVALUES.FBLEXISTEQUIVORIGIN(CNUEQUIV_535, SBCLASSSERVICE)) THEN
                    
                    NUBANDWIDTHID := GE_BOEQUIVALENCVALUES.FSBGETORIGINVALUE(CNUEQUIV_535, SBCLASSSERVICE);
                ELSE
                    ERRORS.SETERROR(CNUERROR_EQUIV_32, SBCLASSSERVICE||'|'||CNUEQUIV_535);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;

                GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, CSBMO_DATA_CONNECTION||SBDATACOMPONENTID, CSBMO_DATA_CONNECTION, 'BANDWIDTH_ID', NUBANDWIDTHID);

                EXIT;
            END IF;
        END IF;
        GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY(NUENTITY);
    END LOOP;

    UT_TRACE.TRACE('sbClassService:['||SBCLASSSERVICE||']',12);
    UT_TRACE.TRACE('nuBandwidthId :['||NUBANDWIDTHID||']',12);


    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByClasChang sbClassService:['||SBCLASSSERVICE||']' ,12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYCLASCHANG;

    

    PROCEDURE CREATMOTBYAPARTCHANG

    IS

        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        SBAPARMENTQUANTITY   GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFLAG               GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCOMPONENTID        GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';

        SBUNCCUPIEDAPART     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBOLDAPARTQUANT      GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByApartChang',12);

    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
    
    CREATMOTBYDATACHANG
    (
        CSBTAGGENERACTUNIDHA,
        CSBTAGACTUNIDHAB,
        NUMOTIVEID,
        NUCOMPONENTID
    );

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE',SBAPARMENTQUANTITY);
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG',SBFLAG);
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_10',SBUNCCUPIEDAPART);
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_7',SBOLDAPARTQUANT);

    
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, NULL, 'MO_DATA_UTILITIES', 'APARTMENT_UNOCCUPIED', SBUNCCUPIEDAPART);
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, NULL, 'MO_DATA_UTILITIES', 'MOTIVE_ID', TO_CHAR(NUMOTIVEID));
    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, NULL, 'MO_DATA_UTILITIES', 'APARTMENT_QUANTITY', NVL(TRIM(SBAPARMENTQUANTITY),SBOLDAPARTQUANT));

    
    GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, MO_BOCONSTANTS.CSBMO_COMPONENT , 'AUTHORIZ_LETTER_FLAG', SBFLAG);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByApartChang sbAparmentQuantity:['||SBAPARMENTQUANTITY||']' ,12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYAPARTCHANG;

    


























    PROCEDURE CREATMOTBYGENERRETI

        (
         ISBPACKAGEID           IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBPRODUCTID           IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBRETIRETYPEID        IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBINITPROCESSDATE     IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBTAGMOTIV            IN    MO_MOTIVE.TAG_NAME%TYPE,
         ISBTAGMOTICOMP         IN    MO_COMPONENT.TAG_NAME%TYPE,
         ONUMOTIVEID            OUT   MO_MOTIVE.MOTIVE_ID%TYPE
        )

    IS
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
		NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
        SBCAUSALID           GE_BOINSTANCECONTROL.STYSBVALUE;
		NUCAUSALID           MO_MOTIVE.CAUSAL_ID%TYPE := NULL;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByGenerReti',12);

    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
    NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
    NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(ISBTAGMOTICOMP);
    NUPRODUCTID := TO_NUMBER(ISBPRODUCTID);
    NUPACKAGEID := TO_NUMBER(ISBPACKAGEID);
    
    
    IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID) ) THEN
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID);
        NUCAUSALID := TO_NUMBER(SBCAUSALID);
    END IF;

    
    CREATEMOTIVEBYPRODUCT
    (
        NUPRODUCTID,      
        NUPACKAGEID,      
        ISBTAGMOTIV,      
        NULL,             
        NULL,             
        TRUE,             
        NULL,             
        NULL,             
        NULL,             
        NULL,             
        NULL,             
        ISBINITPROCESSDATE, 
        SBPROCESSINSTANCE,
        ONUMOTIVEID,      
        NULL,
        NUCAUSALID
    );

    
    GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBPROCESSINSTANCE,NULL,'MO_PROCESS','MOTIVE_ID',ONUMOTIVEID,TRUE);
    
    CREATEMORETIRE(ONUMOTIVEID, ISBRETIRETYPEID,SBPROCESSINSTANCE);

    UT_TRACE.TRACE('Inicia - Creacion de componentes',5);
    
    CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);
 LOOP
		FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
		EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;
		DAPR_COMPONENT.GETRECORD(NUMASTERCOMPPRODID, RCCOMPBYPROD);

		
		IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
            AND
            (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
        THEN
            
            LOADCOMPONENT(NUPACKAGEID,ONUMOTIVEID, ISBTAGMOTIV, NULL,
                            ISBTAGMOTICOMP, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                            NUMASTERCOMPPRODID, NUELEMCATEGORY, TRUE,
                            FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE, NUCOMPIDMOT);
            
            CREATEMORETIRECOMP(NUCOMPIDMOT,ISBRETIRETYPEID,SBPROCESSINSTANCE);
            NUFATHCOMPIDMOT := NUCOMPIDMOT;
            NUCONSECUTIVE := NUCONSECUTIVE + 1;
        	
            FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP
                DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);
                
                GETMOFATHERCOMPONENT(SBPROCESSINSTANCE,RCPRCOMPONENTLINK,NUFATHCOMPIDMOT);

                
        		IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (NUFATHCOMPIDMOT IS NOT NULL)
                THEN
                    
                    LOADCOMPONENT(NUPACKAGEID,ONUMOTIVEID,ISBTAGMOTIV,NUFATHCOMPIDMOT,
                                    ISBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                    RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATEGORY , TRUE,
                                    FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);
                    
                    CREATEMORETIRECOMP(NUCOMPIDMOT,ISBRETIRETYPEID,SBPROCESSINSTANCE);
                    NUFATHCOMPIDMOT := NUCOMPIDMOT;
                    NUCONSECUTIVE := NUCONSECUTIVE + 1;
                END IF;
            END LOOP;
        END IF;
	END LOOP;
    UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);
	CLOSE CURFMASTERCOMPONENTS;
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByGenerReti',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYGENERRETI;


    
    PROCEDURE CREATMOTBYGENVOLRET

    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBINITIALPROCESSDATE GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
		NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByGenVolRet',12);
    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
    DAPR_PRODUCT.ACCKEY(TO_NUMBER(SBPRODUCTID));
    
    SBINITIALPROCESSDATE := NULL;
    IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',NUINDEX)
    THEN
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',SBINITIALPROCESSDATE);
    END IF;
    
    CREATMOTBYGENERRETI
        (
         SBPACKAGE,
         SBPRODUCTID,
         GNUVOLRETTYP,
         SBINITIALPROCESSDATE,
         PS_BOPRODUCTMOTIVE.CSBTAGGENERRETIRVOL,
         PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL,
         NUMOTIVEID
        );
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByGenVolRet',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYGENVOLRET;

    






























    PROCEDURE CREATMOTBYSUSPRECON
        (
         ISBPACKAGEID           IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBPRODUCTID           IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBSUSPENSIONTYPEID    IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBTAGMOTIV            IN    MO_MOTIVE.TAG_NAME%TYPE,
         ISBTAGMOTICOMP         IN    MO_COMPONENT.TAG_NAME%TYPE,
         ISBAPLICATIONDATE      IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBENDINGDATE          IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ONUMOTIVEID            OUT   MO_MOTIVE.MOTIVE_ID%TYPE
        )

    IS

        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;

        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';

        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;

        SBCAUSALID           GE_BOINSTANCECONTROL.STYSBVALUE;
		NUCAUSALID           MO_MOTIVE.CAUSAL_ID%TYPE := NULL;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotBySuspRecon',12);
    NUPRODUCTID := TO_NUMBER(ISBPRODUCTID);
    NUPACKAGEID := TO_NUMBER(ISBPACKAGEID);

    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
    
    NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

    
    IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID) ) THEN
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID);
        NUCAUSALID := TO_NUMBER(SBCAUSALID);
    END IF;

    

    CREATEMOTIVEBYPRODUCT
    (
        NUPRODUCTID,      
        NUPACKAGEID,      
        ISBTAGMOTIV,      
        NULL,             
        NULL,             
        TRUE,             
        NULL,             
        NULL,             
        NULL,             
        NULL,             
        NULL,             
        NULL,             
        SBPROCESSINSTANCE,
        ONUMOTIVEID,      
        NULL,
        NUCAUSALID
    );

    
    CREATEMOSUSPENSION(ONUMOTIVEID, ISBSUSPENSIONTYPEID,ISBAPLICATIONDATE,ISBENDINGDATE,SBPROCESSINSTANCE);

    UT_TRACE.TRACE('Inicia - Creacion de componentes',5);

    
    CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);
 LOOP
		FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
		EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;
		DAPR_COMPONENT.GETRECORD(NUMASTERCOMPPRODID, RCCOMPBYPROD);

        IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
            AND
            (DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
        THEN
            
            LOADCOMPONENT(NUPACKAGEID,ONUMOTIVEID, ISBTAGMOTIV, NULL,
                            ISBTAGMOTICOMP, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                            NUMASTERCOMPPRODID, NULL, TRUE,
                            FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,FALSE,SBPROCESSINSTANCE, NUCOMPIDMOT);
            
            CREATEMOSUSPENCOMP(NUCOMPIDMOT, ISBSUSPENSIONTYPEID,ISBAPLICATIONDATE,ISBENDINGDATE,SBPROCESSINSTANCE);
            NUFATHCOMPIDMOT := NUCOMPIDMOT;
            NUCONSECUTIVE := NUCONSECUTIVE + 1;
        	
            FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP
                DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);
                
                GETMOFATHERCOMPONENT(SBPROCESSINSTANCE,RCPRCOMPONENTLINK,NUFATHCOMPIDMOT);

                
                IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (DAPS_COMPONENT_TYPE.FSBGETSUSPEND_ALLOWED(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (NUFATHCOMPIDMOT IS NOT NULL)
                THEN
                    
                    LOADCOMPONENT(NUPACKAGEID,ONUMOTIVEID,ISBTAGMOTIV,NUFATHCOMPIDMOT,
                                    ISBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                    RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NULL, TRUE,
                                    FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,FALSE,SBPROCESSINSTANCE,NUCOMPIDMOT);
                    
                    CREATEMOSUSPENCOMP(NUCOMPIDMOT, ISBSUSPENSIONTYPEID,ISBAPLICATIONDATE,ISBENDINGDATE,SBPROCESSINSTANCE);
                    NUFATHCOMPIDMOT := NUCOMPIDMOT;
                    NUCONSECUTIVE := NUCONSECUTIVE + 1;
                END IF;
            END LOOP;
        END IF;
	END LOOP;
    UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);
	CLOSE CURFMASTERCOMPONENTS;
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotBySuspRecon',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;

            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYSUSPRECON;

   














    PROCEDURE CREATMOTBYGENERSUSP

    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        SBAPLICATIONDATE     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBENDINGDATE         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSUSPENSIONTYPEID   GE_BOINSTANCECONTROL.STYSBVALUE;
        STYNUINDEX           GE_BOINSTANCECONTROL.STYNUINDEX;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByGenerSusp',12);
    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,'MO_PROCESS','SUSPENSION_TYPE_ID',SBSUSPENSIONTYPEID);
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,'MO_PROCESS','APLICATION_DATE',SBAPLICATIONDATE);
    
    IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL,'MO_PROCESS','ENDING_DATE',STYNUINDEX) THEN
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,'MO_PROCESS','ENDING_DATE',SBENDINGDATE);
    ELSE
        SBENDINGDATE := NULL;
    END IF;
    
    CREATMOTBYSUSPRECON
        (
         SBPACKAGE,
         SBPRODUCTID,
         SBSUSPENSIONTYPEID,
         CSBTAGPRMOGENERSUSPEVOL,
         CSBTAGGENERSUSPVOL,
         SBAPLICATIONDATE,
         SBENDINGDATE,
         NUMOTIVEID
        );

    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByGenerSusp',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYGENERSUSP;

    

    PROCEDURE CREATMOTBYGENERRECON

    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;

		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';

        SBAPLICATIONDATE     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBENDINGDATE         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSUSPENSIONTYPEID   GE_BOINSTANCECONTROL.STYSBVALUE;
        STYNUINDEX           GE_BOINSTANCECONTROL.STYNUINDEX;

        RCPRODSUSPENSION     DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        
        NUPACKAGESUSP        MO_PACKAGES.PACKAGE_ID%TYPE;
        
        RCPACKASSO  DAMO_PACKAGES_ASSO.STYMO_PACKAGES_ASSO;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByGenerRecon',12);
    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,'MO_PROCESS','SUSPENSION_TYPE_ID',SBSUSPENSIONTYPEID);
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,'MO_PROCESS','ENDING_DATE',SBENDINGDATE);

    FOR RCPRODSUSPENSION IN PR_BCSUSPENSION.CUPRODSUPENSION(TO_NUMBER(SBPRODUCTID),TO_NUMBER(SBSUSPENSIONTYPEID)) LOOP
    SBAPLICATIONDATE := UT_DATE.FSBSTR_DATE(RCPRODSUSPENSION.APLICATION_DATE);
    END LOOP;

    

    CREATMOTBYSUSPRECON
        (
         SBPACKAGE,
         SBPRODUCTID,
         SBSUSPENSIONTYPEID,
         CSBTAGPRMOGENERRECONVOL,
         CSBTAGGENERRECONVOL,
         SBAPLICATIONDATE,
         SBENDINGDATE,
         NUMOTIVEID
        );

    
    FOR RCROW IN MO_BCSUSPENSION.CUPACKBYPRODSUSPTYP(SBPRODUCTID, SBSUSPENSIONTYPEID) LOOP
        UT_TRACE.TRACE('Solicitud Encontrada: '||RCROW.PACKAGE_ID,15);
        NUPACKAGESUSP := RCROW.PACKAGE_ID;
    END LOOP;
    
    IF (NUPACKAGESUSP IS NOT NULL) THEN
    
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBPROCESSINSTANCE, NULL, CSBMO_PACKAGES_ASSO, 'PACKAGE_ID', SBPACKAGE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBPROCESSINSTANCE, NULL, CSBMO_PACKAGES_ASSO, 'PACKAGE_ID_ASSO', NUPACKAGESUSP);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBPROCESSINSTANCE, NULL, CSBMO_PACKAGES_ASSO, 'PACKAGES_ASSO_ID', MO_BOSEQUENCES.FNUGETSEQ_MO_PACKAGES_ASSO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBPROCESSINSTANCE, NULL, CSBMO_PACKAGES_ASSO, 'ANNUL_DEPENDENT', GE_BOCONSTANTS.CSBNO);

    END IF;

    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByGenerRecon',12);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYGENERRECON;

    

    PROCEDURE CREATMOTBYRECONAUTO

    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;

		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';

        SBAPLICATIONDATE     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBENDINGDATE         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSUSPENSIONTYPEID   GE_BOINSTANCECONTROL.STYSBVALUE;
        STYNUINDEX           GE_BOINSTANCECONTROL.STYNUINDEX;

        RCPRODSUSPENSION     DAPR_PROD_SUSPENSION.STYPR_PROD_SUSPENSION;
        RCMOMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        RCMOSUSPENSION       DAMO_SUSPENSION.STYMO_SUSPENSION;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NURECONMOTIVEID      MO_MOTIVE.MOTIVE_ID%TYPE;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByReconAuto',12);
    
    GE_BOINSTANCE.GETVALUE
        (
        MO_BOCONSTANTS.CSBMO_MOTIVE,
        MO_BOCONSTANTS.CSBMOTIVE_ID,
        NUMOTIVEID
        );
    DAMO_MOTIVE.GETRECORD(NUMOTIVEID,RCMOMOTIVE);

    
    IF DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(RCMOMOTIVE.PRODUCT_ID) = PR_BOPARAMETER.FNUGETPRODRETI THEN
       RETURN;
    END IF;

    DAMO_SUSPENSION.GETRECORD(NUMOTIVEID,RCMOSUSPENSION);
     
    GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
     
    GE_BOINSTANCECONTROL.CREATEINSTANCE(SBPROCESSINSTANCE,NULL);

    
    CREATMOTBYSUSPRECON
        (
         TO_CHAR(RCMOMOTIVE.PACKAGE_ID),
         TO_CHAR(RCMOMOTIVE.PRODUCT_ID),
         TO_CHAR(RCMOSUSPENSION.SUSPENSION_TYPE_ID),
         CSBTAGPRMOGENERRECONVOL,
         CSBTAGGENERRECONVOL,
         UT_DATE.FSBSTR_DATE(RCMOSUSPENSION.APLICATION_DATE),
         UT_DATE.FSBSTR_DATE(RCMOSUSPENSION.ENDING_DATE),
         NURECONMOTIVEID
        );

    
    CREATEMOEXECLOGMOT
    (
        RCMOMOTIVE.PACKAGE_ID,
        NURECONMOTIVEID,
        MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN,
        SBPROCESSINSTANCE
    );

    
    GE_BOINSTANCECONTROL.INSERTINSTANCE(SBPROCESSINSTANCE);
    GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
    
    DAMO_PACKAGES.UPDMOTIVE_STATUS_ID(RCMOMOTIVE.PACKAGE_ID,MO_BOCONSTANTS.CNUSTATUS_REG_PACK);
    
    MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONATTENTION(RCMOMOTIVE.PACKAGE_ID);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByReconAuto',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYRECONAUTO;


    

    PROCEDURE CREATMOTBYRETIRAUTO

    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        RCMOMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        RCPRODUCT            DAPR_PRODUCT.STYPR_PRODUCT;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NURETIMOTIVEID       MO_MOTIVE.MOTIVE_ID%TYPE;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByRetirAuto',12);
    
    GE_BOINSTANCE.GETVALUE
        (
        MO_BOCONSTANTS.CSBMO_MOTIVE,
        MO_BOCONSTANTS.CSBMOTIVE_ID,
        NUMOTIVEID
        );
    DAMO_MOTIVE.GETRECORD(NUMOTIVEID,RCMOMOTIVE);

    
    RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(RCMOMOTIVE.PRODUCT_ID);
    IF (RCPRODUCT.PRODUCT_STATUS_ID IN (PR_BOPARAMETER.FNUGETRETPENDPROD, PR_BOPARAMETER.FNUGETPRODRETI)) THEN
        UT_TRACE.TRACE('Termina Metodo MO_BOCnfLoadProductData.CreatMotByRetirAuto - El producto est� retirado',12);
       RETURN;
    END IF;
     
    GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
     
    GE_BOINSTANCECONTROL.CREATEINSTANCE(SBPROCESSINSTANCE,NULL);
    
    CREATMOTBYGENERRETI
        (
         TO_CHAR(RCMOMOTIVE.PACKAGE_ID),
         TO_CHAR(RCMOMOTIVE.PRODUCT_ID),
         CNUAUTRETTYP,
         NULL,
         PS_BOPRODUCTMOTIVE.CSBTAGGENERRETIRVOL,
         PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL,
         NURETIMOTIVEID
        );

    
    CREATEMOEXECLOGMOT
    (
        RCMOMOTIVE.PACKAGE_ID,
        NURETIMOTIVEID,
        MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN,
        SBPROCESSINSTANCE
    );

    
    GE_BOINSTANCECONTROL.INSERTINSTANCE(SBPROCESSINSTANCE);
    GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;

    
    DAPR_PRODUCT.UPDPRODUCT_STATUS_ID(RCPRODUCT.PRODUCT_ID, PR_BOPARAMETER.FNUGETRETPENDPROD);

    
    GE_BOSUBSCRIBER.SETSUBSCRIBERSTATUS(PKTBLSUSCRIPC.FNUGETCUSTOMER(RCPRODUCT.SUBSCRIPTION_ID, PKCONSTANTE.NOCACHE));
        
    FOR RCCOMPONENT IN PR_BCCOMPONENT.CUCOMPONENTSBYPRODUCTID(RCPRODUCT.PRODUCT_ID) LOOP
        DAPR_COMPONENT.UPDCOMPONENT_STATUS_ID(RCCOMPONENT.COMPONENT_ID, PR_BOPARAMETER.FNUGETRETPENDCOMP);
    END LOOP;

    
    DAMO_PACKAGES.UPDMOTIVE_STATUS_ID(RCMOMOTIVE.PACKAGE_ID, MO_BOCONSTANTS.CNUSTATUS_REG_PACK);

    
    MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONATTENTION(RCMOMOTIVE.PACKAGE_ID);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByRetirAuto',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYRETIRAUTO;

    


























    PROCEDURE CREATENEWMOADDORPRE
    (
        ISBMOTIVEID           IN        GE_BOINSTANCECONTROL.STYSBVALUE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
    )

    IS

    SBGROUP               GE_BOINSTANCECONTROL.STYSBNAME;
    SBMANUALPREMISEID     GE_BOINSTANCECONTROL.STYSBVALUE;
    SBPARSERADDRESSID     GE_BOINSTANCECONTROL.STYSBVALUE;
    SBGEOGRAPLOCATIONID   GE_BOINSTANCECONTROL.STYSBVALUE;
    SBDESCRIPTION         GE_BOINSTANCECONTROL.STYSBVALUE;
    NUINDEX               GE_BOINSTANCECONTROL.STYNUINDEX;
    RCAB_ADDRESS          DAAB_ADDRESS.STYAB_ADDRESS;
    RCAB_PREMISE          DAAB_PREMISE.STYAB_PREMISE;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateNewMoAddOrPre',12);

    
    
    IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(IOSBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,'PARSER_ADDRESS_ID',NUINDEX) THEN
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(IOSBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,'PARSER_ADDRESS_ID',SBPARSERADDRESSID);
        UT_TRACE.TRACE('    Existe direccion en la instancia sbParserAddressId:['||SBPARSERADDRESSID||']',12);
        SBGROUP := MO_BOCONSTANTS.CSBMO_ADDRESS||ISBMOTIVEID;
        RCAB_ADDRESS := DAAB_ADDRESS.FRCGETRECORD(SBPARSERADDRESSID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'ADDRESS_ID', MO_BOSEQUENCES.FNUGETADDRESSID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'MOTIVE_ID', ISBMOTIVEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'ADDRESS', RCAB_ADDRESS.ADDRESS);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'PARSER_ADDRESS_ID', RCAB_ADDRESS.ADDRESS_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'GEOGRAP_LOCATION_ID', RCAB_ADDRESS.GEOGRAP_LOCATION_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'ADDRESS_TYPE_ID', GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBADDRESS_TYPE_PRINCIP));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'IS_ADDRESS_MAIN', GE_BOCONSTANTS.CSBYES);
    END IF;

    
    MO_BOCNFINSTANCE.GETVALUEENTITYATTRIB(IOSBPROCESSINSTANCE,'MO_ADDRESS_COMP','PARSER_ADDRESS_ID',SBPARSERADDRESSID);

    IF SBPARSERADDRESSID IS NOT NULL THEN
        UT_TRACE.TRACE('    Existe direccion de componente en la instancia sbParserAddressId:['||SBPARSERADDRESSID||']',12);
        SBGROUP := MO_BOCONSTANTS.CSBMO_ADDRESS||ISBMOTIVEID;
        RCAB_ADDRESS := DAAB_ADDRESS.FRCGETRECORD(SBPARSERADDRESSID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'ADDRESS_ID', MO_BOSEQUENCES.FNUGETADDRESSID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'MOTIVE_ID', ISBMOTIVEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'ADDRESS', RCAB_ADDRESS.ADDRESS);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'PARSER_ADDRESS_ID', RCAB_ADDRESS.ADDRESS_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'GEOGRAP_LOCATION_ID', RCAB_ADDRESS.GEOGRAP_LOCATION_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'ADDRESS_TYPE_ID', GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBADDRESS_TYPE_PRINCIP));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_ADDRESS, 'IS_ADDRESS_MAIN', GE_BOCONSTANTS.CSBYES);
    END IF;

    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateNewMoAddOrPre',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATENEWMOADDORPRE;

    












    FUNCTION FBLACCKEYGLOBALATT
    (
        ISBATTRIBUTE    IN      GE_BOINSTANCECONTROL.STYSBNAME
    )
    RETURN BOOLEAN
    IS
        NUATTRIBUTE     GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        RETURN GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(
                    GE_BOINSTANCECONSTANTS.CSBGLOBAL_INSTANCE, NULL,
                    GE_BOINSTANCECONSTANTS.CSBGLOBAL_ENTITY,
                    ISBATTRIBUTE, NUATTRIBUTE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    





































    PROCEDURE SETPROVISIONBASEID
    (
        ISBGROUP                IN      GE_BOINSTANCECONTROL.STYSBNAME,
        ISBDATAGROUP            IN      GE_BOINSTANCECONTROL.STYSBNAME,
        ISBPROCESSINSTANCE      IN      GE_BOINSTANCECONTROL.STYSBNAME,
        IBLLOADTECHNOLOGY       IN      BOOLEAN
    )IS
        CSBCOMP_PROD_PROV_ID        CONSTANT    VARCHAR2(50)    :=  'COMP_PROD_PROV_ID';
        CSBCOMP_MOTIVE_PROV_ID      CONSTANT    VARCHAR2(50)    :=  'COMP_MOTIVE_PROV_ID';
        CSBTECHNOLOGY_TYPE_ID       CONSTANT    VARCHAR2(50)    :=  'TECHNOLOGY_TYPE_ID';

        NUMOTIPROVISIONID       GE_BOINSTANCECONTROL.STYSBNAME;
        NUPRODPROVISIONID       GE_BOINSTANCECONTROL.STYSBNAME;
        NUTECHNOLOGYTYPE        GE_BOINSTANCECONTROL.STYSBNAME;

        NUDUMMY                 GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.SetProvisionBaseId',12);

        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBPROCESSINSTANCE, ISBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, CSBCOMP_MOTIVE_PROV_ID, NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBPROCESSINSTANCE, ISBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, CSBCOMP_PROD_PROV_ID, NULL);

        
        IF (FBLACCKEYGLOBALATT(CSBCOMP_MOTIVE_PROV_ID)) THEN
            GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE(CSBCOMP_MOTIVE_PROV_ID, NUMOTIPROVISIONID);
            IF (NUMOTIPROVISIONID IS NOT NULL) THEN

                IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(ISBPROCESSINSTANCE,ISBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT,CSBCOMP_MOTIVE_PROV_ID,NUDUMMY) THEN
                    GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(ISBPROCESSINSTANCE,ISBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT,CSBCOMP_MOTIVE_PROV_ID,NUMOTIPROVISIONID);
                ELSE
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBPROCESSINSTANCE, ISBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, CSBCOMP_MOTIVE_PROV_ID, NUMOTIPROVISIONID);
                END IF;

            END IF;
        END IF;

        
        IF (FBLACCKEYGLOBALATT(CSBCOMP_PROD_PROV_ID)) THEN
            GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE(CSBCOMP_PROD_PROV_ID, NUPRODPROVISIONID);
            IF (NUPRODPROVISIONID IS NOT NULL) THEN

                IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(ISBPROCESSINSTANCE,ISBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT,CSBCOMP_PROD_PROV_ID,NUDUMMY) THEN
                    GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(ISBPROCESSINSTANCE,ISBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT,CSBCOMP_PROD_PROV_ID,NUPRODPROVISIONID);
                ELSE
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBPROCESSINSTANCE, ISBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, CSBCOMP_PROD_PROV_ID, NUPRODPROVISIONID);
                END IF;

            END IF;
        END IF;

        
        IF (IBLLOADTECHNOLOGY) THEN
            IF (FBLACCKEYGLOBALATT(CSBTECHNOLOGY_TYPE_ID)) THEN
                GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE(CSBTECHNOLOGY_TYPE_ID, NUTECHNOLOGYTYPE);
                IF (NUTECHNOLOGYTYPE IS NOT NULL) THEN

                    IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(ISBPROCESSINSTANCE,ISBDATAGROUP,CSBMO_DATA_CONNECTION,CSBTECHNOLOGY_TYPE_ID,NUDUMMY) THEN
                        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(ISBPROCESSINSTANCE, ISBDATAGROUP, CSBMO_DATA_CONNECTION, CSBTECHNOLOGY_TYPE_ID, NUTECHNOLOGYTYPE);
                    ELSE
                        GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBPROCESSINSTANCE, ISBDATAGROUP,CSBMO_DATA_CONNECTION, CSBTECHNOLOGY_TYPE_ID, NUTECHNOLOGYTYPE);
                    END IF;

                ELSE
                    GE_BOERRORS.SETERRORCODE(CNUERROR_113342);
                END IF;
            ELSE
                GE_BOERRORS.SETERRORCODE(CNUERROR_113342);
            END IF;
        ELSE
            IF (FBLACCKEYGLOBALATT(CSBTECHNOLOGY_TYPE_ID)) THEN
                GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE(CSBTECHNOLOGY_TYPE_ID, NUTECHNOLOGYTYPE);
                IF (NUTECHNOLOGYTYPE IS NOT NULL) THEN

                    IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(ISBPROCESSINSTANCE,ISBDATAGROUP,CSBMO_DATA_CONNECTION,CSBTECHNOLOGY_TYPE_ID,NUDUMMY) THEN
                        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(ISBPROCESSINSTANCE, ISBDATAGROUP, CSBMO_DATA_CONNECTION, CSBTECHNOLOGY_TYPE_ID, NUTECHNOLOGYTYPE);
                    ELSE
                        GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBPROCESSINSTANCE, ISBDATAGROUP,CSBMO_DATA_CONNECTION, CSBTECHNOLOGY_TYPE_ID, NUTECHNOLOGYTYPE);
                    END IF;

                END IF;
            END IF;
        END IF;

        UT_TRACE.TRACE('Termina MO_BOCnfLoadProductData.SetProvisionBaseId',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    














    PROCEDURE LOADBASEPROVISIONID
        (
        INUMOTICOMPID            IN      MO_COMPONENT.COMPONENT_ID%TYPE,
        INUPRODCOMPID            IN      PR_COMPONENT.COMPONENT_ID%TYPE,
        INUPRODUCTTYPEID         IN      MO_MOTIVE.PRODUCT_TYPE_ID%TYPE,
        ISBPROCESSINSTANCE       IN      GE_BOINSTANCECONTROL.STYSBNAME
        )
    IS
        BLLOADTECHNOLOGY        BOOLEAN;
        SBGROUP                 GE_BOINSTANCECONTROL.STYSBNAME;
        SBDATAGROUP             GE_BOINSTANCECONTROL.STYSBNAME;
        CSBLOADTECHNOLOGY       GE_BOINSTANCECONTROL.STYSBNAME:='LOAD_TECHNOLOGY';
        SBLOADTECHNO            GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.LoadBaseProvisionId ['||INUMOTICOMPID||']['||INUPRODCOMPID||']',12);

        BLLOADTECHNOLOGY:= GE_BOCONSTANTS.GETFALSE;

        
        SBGROUP := MO_BOCONSTANTS.CSBMO_COMPONENT||INUPRODCOMPID;
        SBDATAGROUP := CSBMO_DATA_CONNECTION||INUMOTICOMPID;

        IF (FBLACCKEYGLOBALATT(CSBLOADTECHNOLOGY)) THEN
            GE_BOINSTANCECONTROL.GETGLOBALATTRIBUTE(CSBLOADTECHNOLOGY, SBLOADTECHNO);
            IF (SBLOADTECHNO = GE_BOCONSTANTS.GETYES) THEN
                BLLOADTECHNOLOGY:= GE_BOCONSTANTS.GETTRUE;
            END IF;
        END IF;
        
        SETPROVISIONBASEID(SBGROUP, SBDATAGROUP, ISBPROCESSINSTANCE,BLLOADTECHNOLOGY);

        UT_TRACE.TRACE('Termina MO_BOCnfLoadProductData.LoadBaseProvisionId',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    


















    FUNCTION FNUGETPRODTYPIDASSO
        (
        INUCOMPONENTTYPEID IN  PS_PROD_COMPOSITION.COMPONENT_TYPE_ID%TYPE
        )
    RETURN  NUMBER
    IS

        NUPRODUCTTYPEID  PS_PROD_COMPOSITION.PRODUCT_TYPE_ID%TYPE := NULL;
        NUCOUNT          NUMBER;

    BEGIN
        UT_TRACE.TRACE('    Inicio FUNCION fnugetProdTypIdAsso inuComponentTypeId: ['||INUCOMPONENTTYPEID||']-['||SYSDATE||']',12);
        
        FOR RGPROD IN PS_BCPROD_COMPOSITION.CUPRODTYBYMASTCOMPTY(INUCOMPONENTTYPEID) LOOP
        NUCOUNT := 0;
            UT_TRACE.TRACE('        Evaluando product_type_id: ['||RGPROD.PRODUCT_TYPE_ID||']',20);
            
            FOR RGCOMP IN PS_BCPROD_COMPOSITION.CUMASTCOMPTYBYPRODTY(RGPROD.PRODUCT_TYPE_ID) LOOP
                
                NUCOUNT := NUCOUNT + 1;
                EXIT WHEN NUCOUNT = 2;
                UT_TRACE.TRACE('            Evaluando component_type_id: ['||RGCOMP.COMPONENT_TYPE_ID||']',20);
            END LOOP;
            IF  NUCOUNT = 1 THEN
                NUPRODUCTTYPEID := RGPROD.PRODUCT_TYPE_ID;
                EXIT;
            END IF;
        END LOOP;
        UT_TRACE.TRACE('    Fin FUNCION fnugetProdTypIdAsso nuProductTypeId: ['||NUPRODUCTTYPEID||']-['||SYSDATE||']',12);
        RETURN NUPRODUCTTYPEID;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPRODTYPIDASSO;

    
























    FUNCTION FNUGETPRODTYPBASIC
        (
        INUPRODUCTID IN  PR_PRODUCT.PRODUCT_ID%TYPE
        )
    RETURN  NUMBER
    IS

        NUPRODUCTTYPEID     PS_PROD_COMPOSITION.PRODUCT_TYPE_ID%TYPE := NULL;
        NUMASTERCOMPPRODID  PR_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPONENTTYPEID   PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        CURFCOMPONENTS       CONSTANTS.TYREFCURSOR;
        RCPRODCOMP           DAPS_PROD_COMPOSITION.STYPS_PROD_COMPOSITION;
    BEGIN
        UT_TRACE.TRACE('    Inicio FUNCION fnugetProdTypBasic inuProductId: ['||INUPRODUCTID||']-['||SYSDATE||']',12);
        NUPRODUCTTYPEID := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCTID);
        
        CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(INUPRODUCTID);
        LOOP
        	FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
        	EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;

        	NUCOMPONENTTYPEID := DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID(NUMASTERCOMPPRODID);
            UT_TRACE.TRACE('    Analizando nuComponentTypeId:'||NUCOMPONENTTYPEID,50);

            FOR RCCOMPONENTS  IN  PS_BCPROD_COMPOSITION.CUPRODCOMPOSITION (NUPRODUCTTYPEID, NUCOMPONENTTYPEID )
            LOOP
                IF ( RCCOMPONENTS.IS_MAIN = GE_BOCONSTANTS.CSBYES) THEN
                    UT_TRACE.TRACE('    Encontro nuComponentTypeId:'||NUCOMPONENTTYPEID,50);
                    NUPRODUCTTYPEID  := FNUGETPRODTYPIDASSO(NUCOMPONENTTYPEID);
                    EXIT;
                END IF;
            END LOOP;

        END LOOP;
        CLOSE CURFMASTERCOMPONENTS;
        UT_TRACE.TRACE('    Fin FUNCION fnugetProdTypBasic nuProductTypeId: ['||NUPRODUCTTYPEID||']-['||SYSDATE||']',12);
        RETURN NUPRODUCTTYPEID;
    EXCEPTION
        WHEN OTHERS THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                CLOSE  CURFMASTERCOMPONENTS;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPRODTYPBASIC;


    




















        PROCEDURE CREATEMOBILLDACHANBYCHANSTRAT
        (
            ISBPACKAGEID          IN        GE_BOINSTANCECONTROL.STYSBVALUE,
            ISBNEWCATEGORYID      IN        GE_BOINSTANCECONTROL.STYSBVALUE,
            ISBNEWSUBCATEGORYID   IN        GE_BOINSTANCECONTROL.STYSBVALUE,
            INUPRODUCTID          IN        PR_PRODUCT.PRODUCT_ID%TYPE,
            IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
        )

        IS
            NUOLDCATEGORYID       PR_PRODUCT.CATEGORY_ID%TYPE;
            NUOLDSUBCATEGORYID    PR_PRODUCT.SUBCATEGORY_ID%TYPE;
        BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMoBillDaChanByChanStrat',12);
        NUOLDCATEGORYID    := DAPR_PRODUCT.FNUGETCATEGORY_ID(INUPRODUCTID);
        NUOLDSUBCATEGORYID := DAPR_PRODUCT.FNUGETSUBCATEGORY_ID(INUPRODUCTID);
        IF (TO_CHAR(NUOLDCATEGORYID)||'a' <> ISBNEWCATEGORYID||'a') OR
           (TO_CHAR(NUOLDSUBCATEGORYID)||'a' <> ISBNEWSUBCATEGORYID||'a') THEN
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, NULL, CSBMO_BILL_DATA_CHANGE, 'BILL_DATA_CHANGE_ID', MO_BOSEQUENCES.FNUGETSEQ_MO_BILL_DATA_CHANGE);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, NULL, CSBMO_BILL_DATA_CHANGE, 'PACKAGE_ID', ISBPACKAGEID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, NULL, CSBMO_BILL_DATA_CHANGE, 'NEW_CATEGORY_ID',    ISBNEWCATEGORYID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, NULL, CSBMO_BILL_DATA_CHANGE, 'NEW_SUBCATEGORY_ID', ISBNEWSUBCATEGORYID);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, NULL, CSBMO_BILL_DATA_CHANGE, 'OLD_CATEGORY_ID', TO_CHAR(NUOLDCATEGORYID));
            GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, NULL, CSBMO_BILL_DATA_CHANGE, 'OLD_SUBCATEGORY_ID', TO_CHAR(NUOLDSUBCATEGORYID));
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMoBillDaChanByChanStrat',12);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CREATEMOBILLDACHANBYCHANSTRAT;

    
















































    PROCEDURE CREATMOTMOVEGEN
    (
         SBPROCESSINSTANCE      IN OUT GE_BOINSTANCECONTROL.STYSBNAME,
         INUPRODUCTID           IN PR_PRODUCT.PRODUCT_ID%TYPE,

         ISBFLAGCHANGNUMBER     IN MO_COMPONENT.OBLIGATORY_CHANGE%TYPE,
         ISBSUGGESTEDNUMBER     IN MO_COMPONENT.SUGGESTED_NUMBER%TYPE,
         ISBFLAGREQNUMBER       IN MO_COMPONENT.OBLIGATORY_FLAG%TYPE,
         IBLFINDPRODUCTTYPEID   IN BOOLEAN  DEFAULT TRUE,
         ISBFLAGPRESERVENUMBER  IN VARCHAR2 DEFAULT GE_BOCONSTANTS.CSBNO
    )
    IS
        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKTYPEID         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBUSO                GE_BOINSTANCECONTROL.STYSBVALUE;
        SBESTRATO            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBESTRSOCI           GE_BOINSTANCECONTROL.STYSBVALUE;
        SBINITIALPROCESSDATE GE_BOINSTANCECONTROL.STYSBVALUE;
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
        SBTAGMOTIV           MO_MOTIVE.TAG_NAME%TYPE;
        SBTAGMOTICOMP        MO_COMPONENT.TAG_NAME%TYPE;
        SBTEMPTAGMOTICOMP    MO_COMPONENT.TAG_NAME%TYPE;
        SBTAGMOTICOMPCHILD   MO_COMPONENT.TAG_NAME%TYPE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE := NULL;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
        NUPACKTYPEID         MO_PACKAGES.PACKAGE_TYPE_ID%TYPE;
        SBTAGPACK            MO_PACKAGES.TAG_NAME%TYPE;
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODUCTTYPEID      MO_MOTIVE.PRODUCT_TYPE_ID%TYPE := NULL;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUCOUNTMASTERCOMP    NUMBER;
        SBPARTIALFLAG        VARCHAR2(1) := NULL;
        SBSUGGESTEDNUMBER    MO_COMPONENT.SUGGESTED_NUMBER%TYPE;
        SBFLAGREQNUMBER      MO_COMPONENT.OBLIGATORY_FLAG%TYPE;
        SBFLAGCHANGNUMBER    MO_COMPONENT.OBLIGATORY_CHANGE%TYPE;
        
        SBCAUSALID           GE_BOINSTANCECONTROL.STYSBVALUE;
		NUCAUSALID           MO_MOTIVE.CAUSAL_ID%TYPE := NULL;

    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotMoveGen',12);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);

        NUPACKAGEID := UT_CONVERT.FNUCHARTONUMBER(SBPACKAGE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,'PACKAGE_TYPE_ID',SBPACKTYPEID);

        NUPACKTYPEID := UT_CONVERT.FNUCHARTONUMBER(SBPACKTYPEID);

        
        SBTAGPACK := DAPS_PACKAGE_TYPE.FSBGETTAG_NAME(NUPACKTYPEID);

        
        IF(SBTAGPACK = CSBTAGIBACAMBIOTECNO)THEN

            
            SBTAGMOTIV :=           PS_BOPRODUCTMOTIVE.CSBTAGGENERCAMBIOTECNO;
            SBTAGMOTICOMP:=         CSBTAGGENERCAMBIOTECNO;
            SBTAGMOTICOMPCHILD:=    CSBTAGGENERCAMBIOTECNOCHILD;

        ELSE
            
            SBTAGMOTIV :=           PS_BOPRODUCTMOTIVE.CSBTAGGENERTRASL;
            SBTAGMOTICOMP:=         PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERTRASL;
            SBTAGMOTICOMPCHILD:=    CSBTAGGENERTRASLCHILD;
        END IF;

        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'PARTIAL_FLAG',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'PARTIAL_FLAG',SBPARTIALFLAG);
        END IF;
        
        
        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID) ) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID);
            NUCAUSALID := TO_NUMBER(SBCAUSALID);
        END IF;
        
        


        IF IBLFINDPRODUCTTYPEID THEN
            NUCOUNTMASTERCOMP := PR_BCPRODUCT.FNUGETMASTERSCOMPCOUNT(INUPRODUCTID,GE_BOCONSTANTS.CSBNO);
        ELSE
            NUCOUNTMASTERCOMP := 1;
            IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,NULL,'MO_PACKAGES',PR_BOCONSTANTS.PRODUCT_TYPE_ID,NUINDEX) THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,NULL,'MO_PACKAGES',PR_BOCONSTANTS.PRODUCT_TYPE_ID,NUPRODUCTTYPEID);
            END IF;
        END IF;


        
        IF NUCOUNTMASTERCOMP = 1 THEN
            NUPRODUCTTYPEID := FNUGETPRODTYPBASIC(INUPRODUCTID);
        END IF;

        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'USE',NUINDEX) AND
           GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'STRATUM',NUINDEX)
        THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'USE',SBUSO);
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'STRATUM',SBESTRATO);
            
            CREATEMOBILLDACHANBYCHANSTRAT(SBPACKAGE,SBUSO,SBESTRATO,INUPRODUCTID,SBPROCESSINSTANCE);
        END IF;

        
        SBINITIALPROCESSDATE := NULL;
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',NUINDEX)
        THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',SBINITIALPROCESSDATE);
        END IF;

        UT_TRACE.TRACE('Inicia - Creacion de componentes',5);

        

        CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(INUPRODUCTID);
        LOOP
        	FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
        	EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;
        	DAPR_COMPONENT.GETRECORD(NUMASTERCOMPPRODID, RCCOMPBYPROD);

        	
        	IF NUPRODUCTTYPEID  IS NULL OR NUCOUNTMASTERCOMP > 1 THEN
            	NUPRODUCTTYPEID := FNUGETPRODTYPIDASSO(RCCOMPBYPROD.COMPONENT_TYPE_ID);
            END IF;

        	IF (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
               AND
               (DAPS_COMPONENT_TYPE.FSBGETIS_MOVEABLE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
               AND
               (NUPRODUCTTYPEID IS NOT NULL)
            THEN

                SBSUGGESTEDNUMBER := NULL;
                SBFLAGREQNUMBER := GE_BOCONSTANTS.CSBNO;
                SBFLAGCHANGNUMBER := GE_BOCONSTANTS.CSBNO;

                IF DAPS_COMPONENT_TYPE.FSBGETIS_MEASURABLE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES AND
                    DAPS_COMPONENT_TYPE.FNUGETELEMENT_TYPE_ID(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GNUTYPE_ELEM_NUMBER THEN

                        SBSUGGESTEDNUMBER := ISBSUGGESTEDNUMBER ;
                        SBFLAGREQNUMBER := ISBFLAGREQNUMBER;
                        SBFLAGCHANGNUMBER := ISBFLAGCHANGNUMBER;

                END IF;

                



                IF  NUMOTIVEID IS NULL OR NUCOUNTMASTERCOMP > 1 THEN
                    CREATEMOTIVEBYPRODUCT
                    (
                        INUPRODUCTID,         
                        NUPACKAGEID,          
                        SBTAGMOTIV,           
                        NULL,                 
                        NULL,                 
                        FALSE,                
                        NUPRODUCTTYPEID,      
                        NULL,                 
                        SBUSO,                
                        SBESTRATO,            
                        SBPARTIALFLAG,        
                        SBINITIALPROCESSDATE, 
                        SBPROCESSINSTANCE,    
                        NUMOTIVEID,           
                        NULL,                 
                        NUCAUSALID            
                    );
                    
                    
                    CREATENEWMOADDORPRE(NUMOTIVEID,SBPROCESSINSTANCE);

                END IF;

               





                 IF DAPS_COMPONENT_TYPE.FSBGETIS_DEPENDENT(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBNO THEN
                    SBTEMPTAGMOTICOMP := SBTAGMOTICOMP;
                 ELSE
                    SBTEMPTAGMOTICOMP := SBTAGMOTICOMPCHILD;
                 END IF;

                LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID, SBTAGMOTIV, NULL,
                                SBTEMPTAGMOTICOMP, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                                NUMASTERCOMPPRODID, NULL, FALSE,
                                FALSE,NULL,SBSUGGESTEDNUMBER,SBFLAGREQNUMBER,
                                SBFLAGCHANGNUMBER,SBUSO,SBESTRATO,RCCOMPBYPROD.PRODUCT_ORIGIN_ID,FALSE,
                                SBPROCESSINSTANCE, NUCOMPIDMOT, FALSE, ISBFLAGPRESERVENUMBER);

                NUFATHCOMPIDMOT := NUCOMPIDMOT;
                NUCONSECUTIVE := NUCONSECUTIVE + 1;

                
                LOADBASEPROVISIONID(NUCOMPIDMOT,NUMASTERCOMPPRODID,NUPRODUCTTYPEID,SBPROCESSINSTANCE);


            	
                FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP
                    DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);
                    
                    GETMOFATHERCOMPONENT(SBPROCESSINSTANCE,RCPRCOMPONENTLINK,NUFATHCOMPIDMOT);

                    
                    IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                        AND
                        (DAPS_COMPONENT_TYPE.FSBGETIS_MOVEABLE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                        AND
                        (NUFATHCOMPIDMOT IS NOT NULL)
                    THEN
                            
                           LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIV,NUFATHCOMPIDMOT,
                                            SBTAGMOTICOMPCHILD,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                            RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NULL , FALSE,
                                            FALSE,NULL,NULL,NULL,NULL,SBUSO,SBESTRATO,RCCOMPBYPROD.PRODUCT_ORIGIN_ID,
                                            FALSE,SBPROCESSINSTANCE,NUCOMPIDMOT, FALSE, ISBFLAGPRESERVENUMBER);
                           NUFATHCOMPIDMOT := NUCOMPIDMOT;
                           NUCONSECUTIVE := NUCONSECUTIVE + 1;
                    END IF;
                END LOOP;

            END IF;
        END LOOP;

        UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);
        CLOSE CURFMASTERCOMPONENTS;


        
        
        IF NUMOTIVEID IS NULL THEN
            ERRORS.SETERROR(CNUERROR_110037);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotMoveGen',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;

            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTMOVEGEN;

    

   
































    PROCEDURE CREATMOTBYGENERTRASL
    (
        IBLFINDPRODUCTTYPEID IN BOOLEAN DEFAULT TRUE
    )
    IS
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFLAGCHANNUMBER     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSUGGESTEDNUMBER    GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFLAGREQNUMBER      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFLAGCHANGBILLADDR  GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPARSERADDRESSID    GE_BOINSTANCECONTROL.STYSBVALUE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
        NUPRODASSOID         PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPRODTYPEASSO       MO_MOTIVE.PRODUCT_TYPE_ID%TYPE;
        SBFLAGPRESERVENUMBER GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByGenerTrasl',12);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
        NUPRODUCTID := UT_CONVERT.FNUCHARTONUMBER(SBPRODUCTID);

        SBSUGGESTEDNUMBER   := NULL;
        SBFLAGREQNUMBER     := GE_BOCONSTANTS.CSBNO;
        SBFLAGCHANNUMBER    := GE_BOCONSTANTS.CSBNO;
        SBFLAGCHANGBILLADDR := GE_BOCONSTANTS.CSBNO;
        SBFLAGPRESERVENUMBER := GE_BOCONSTANTS.CSBNO;

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG_2',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG_2',SBFLAGCHANNUMBER);
        END IF;

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'SERVICE_NUMBER',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'SERVICE_NUMBER',SBSUGGESTEDNUMBER);
        END IF;

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG_1',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG_1',SBFLAGREQNUMBER);
        END IF;

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'PRESERVE_NUMBER',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'PRESERVE_NUMBER',SBFLAGPRESERVENUMBER);
        END IF;

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG',SBFLAGCHANGBILLADDR);
        END IF;

        
        CREATMOTMOVEGEN  (  SBPROCESSINSTANCE,
                            NUPRODUCTID,
                            SBFLAGCHANNUMBER,
                            SBSUGGESTEDNUMBER,
                            SBFLAGREQNUMBER,
                            IBLFINDPRODUCTTYPEID,
                            SBFLAGPRESERVENUMBER
                        );

        






        
        IF GE_BOINSTANCECONTROL.FBLACCKEYENTITYSTACK(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,NUINDEX) THEN
            
            IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,'PARSER_ADDRESS_ID',NUINDEX) THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,'PARSER_ADDRESS_ID',SBPARSERADDRESSID);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'PARSER_ADDRESS_ID',SBPARSERADDRESSID,TRUE);
             END IF;
            GE_BOINSTANCECONTROL.DESTROYENTITY(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS);
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByGenerTrasl',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYGENERTRASL;


    

   




























    PROCEDURE CREATMOTBYGENERNUMCHANG

    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSUGGESTEDNUMBER    GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFLAGREQNUMBER      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPARTIALFLAG        GE_BOINSTANCECONTROL.STYSBVALUE := NULL;

		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;

        SBTAGMOTIV           MO_MOTIVE.TAG_NAME%TYPE;
        SBTAGMOTICOMP        MO_COMPONENT.TAG_NAME%TYPE;
        SBTAGMOTICOMPCHILD   MO_COMPONENT.TAG_NAME%TYPE;
        SBTEMPTAGMOTICOMP    MO_COMPONENT.TAG_NAME%TYPE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE := NULL;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODUCTTYPEID      MO_MOTIVE.PRODUCT_TYPE_ID%TYPE := NULL;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUCOUNTMASTERCOMP    NUMBER;
        SBCAUSALID           GE_BOINSTANCECONTROL.STYSBVALUE;
		NUCAUSALID           MO_MOTIVE.CAUSAL_ID%TYPE := NULL;

    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByGenerNumChang',12);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'PARTIAL_FLAG',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'PARTIAL_FLAG',SBPARTIALFLAG);
        END IF;
        
        
        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID) ) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'CAUSAL_ID', SBCAUSALID);
            NUCAUSALID := TO_NUMBER(SBCAUSALID);
        END IF;

        NUPRODUCTID := TO_NUMBER(SBPRODUCTID);
        NUPACKAGEID := TO_NUMBER(SBPACKAGE);
        SBTAGMOTIV := PS_BOPRODUCTMOTIVE.CSBTAGGENERCHANGNUMB;
        SBTAGMOTICOMP:= CSBTAGGENERCHANNUM;
        SBTAGMOTICOMPCHILD:= CSBTAGGENERCHANNUMCHILD;

        
        NUCOUNTMASTERCOMP := PR_BCPRODUCT.FNUGETMASTERSCOMPCOUNT(NUPRODUCTID,GE_BOCONSTANTS.CSBNO);
        
        IF NUCOUNTMASTERCOMP = 1 THEN
            NUPRODUCTTYPEID := FNUGETPRODTYPBASIC(NUPRODUCTID);
        END IF;
        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        UT_TRACE.TRACE('Inicia - Creacion de componentes',5);

        
        CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);
        LOOP
        	FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
        	EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;
        	DAPR_COMPONENT.GETRECORD(NUMASTERCOMPPRODID, RCCOMPBYPROD);
        	
        	
        	IF NUPRODUCTTYPEID  IS NULL OR NUCOUNTMASTERCOMP > 1 THEN
            	NUPRODUCTTYPEID := FNUGETPRODTYPIDASSO(RCCOMPBYPROD.COMPONENT_TYPE_ID);
            END IF;

        	IF (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
               AND
               (DAPS_COMPONENT_TYPE.FSBGETIS_MOVEABLE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
               AND
               (NUPRODUCTTYPEID IS NOT NULL)
            THEN
                
                SBSUGGESTEDNUMBER := NULL;
                SBFLAGREQNUMBER := GE_BOCONSTANTS.CSBNO;
                IF DAPS_COMPONENT_TYPE.FSBGETIS_MEASURABLE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES AND
                    DAPS_COMPONENT_TYPE.FNUGETELEMENT_TYPE_ID(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GNUTYPE_ELEM_NUMBER THEN
                    
                    IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'SERVICE_NUMBER',NUINDEX) THEN
                        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'SERVICE_NUMBER',SBSUGGESTEDNUMBER);
                        
                        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG_1',NUINDEX) THEN
                            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG_1',SBFLAGREQNUMBER);
                        END IF;
                    END IF;
                END IF;

                



                IF  NUMOTIVEID IS NULL OR NUCOUNTMASTERCOMP > 1 THEN
                    CREATEMOTIVEBYPRODUCT
                    (
                        NUPRODUCTID,      
                        NUPACKAGEID,      
                        SBTAGMOTIV,       
                        NULL,             
                        NULL,             
                        TRUE,             
                        NUPRODUCTTYPEID,  
                        NULL,             
                        NULL,             
                        NULL,             
                        SBPARTIALFLAG,    
                        NULL,             
                        SBPROCESSINSTANCE,
                        NUMOTIVEID,       
                        NULL,             
                        NUCAUSALID        
                    );
                END IF;

                 




                 IF DAPS_COMPONENT_TYPE.FSBGETIS_DEPENDENT(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBNO THEN
                    SBTEMPTAGMOTICOMP := SBTAGMOTICOMP;
                 ELSE
                    SBTEMPTAGMOTICOMP := SBTAGMOTICOMPCHILD;
                 END IF;

                LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID, SBTAGMOTIV, NULL,
                                SBTEMPTAGMOTICOMP, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                                NUMASTERCOMPPRODID, NULL, FALSE,
                                TRUE,NULL,SBSUGGESTEDNUMBER,SBFLAGREQNUMBER,
                                NULL,NULL,NULL,NULL,FALSE,SBPROCESSINSTANCE, NUCOMPIDMOT);
                NUFATHCOMPIDMOT := NUCOMPIDMOT;
                NUCONSECUTIVE := NUCONSECUTIVE + 1;

            	
                FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP
                    DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);
                    
                    GETMOFATHERCOMPONENT(SBPROCESSINSTANCE,RCPRCOMPONENTLINK,NUFATHCOMPIDMOT);
                    
                    
                    IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                        AND
                        (DAPS_COMPONENT_TYPE.FSBGETIS_MOVEABLE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                        AND
                        (NUFATHCOMPIDMOT IS NOT NULL)
                    THEN
                            
                           LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIV,NUFATHCOMPIDMOT,
                                            SBTAGMOTICOMPCHILD,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                            RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NULL , FALSE,
                                            TRUE,GNUELEMENTS_SUGGES_SYST,NULL,NULL,NULL,NULL,NULL,NULL,FALSE,
                                            SBPROCESSINSTANCE,NUCOMPIDMOT);
                           NUFATHCOMPIDMOT := NUCOMPIDMOT;
                           NUCONSECUTIVE := NUCONSECUTIVE + 1;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;
        UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);
        CLOSE CURFMASTERCOMPONENTS;

        






        
        IF GE_BOINSTANCECONTROL.FBLACCKEYENTITYSTACK(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,NUINDEX) THEN
            GE_BOINSTANCECONTROL.DESTROYENTITY(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS);
        END IF;

        
        
        IF NUMOTIVEID IS NULL THEN
            ERRORS.SETERROR(CNUERROR_110037);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByGenerNumChang',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;

            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYGENERNUMCHANG;



    PROCEDURE LOADDATACONNECTION
        (
        INUCOMPONENTID        IN       MO_COMPONENT.COMPONENT_ID%TYPE,
        INUQUANTITYEXT        IN       MO_DATA_CONNECTION.QUANTITY%TYPE,
        ISBCOMMENT            IN       MO_DATA_CONNECTION.COMMENT_%TYPE,
        IOSBPROCESSINSTANCE   IN  OUT  GE_BOINSTANCECONTROL.STYSBNAME
        )

    IS
        SBGROUP     GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadDataConnection',12);

        SBGROUP := CSBMO_DATA_CONNECTION||INUCOMPONENTID;
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP,CSBMO_DATA_CONNECTION, 'COMPONENT_ID', INUCOMPONENTID,TRUE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP,CSBMO_DATA_CONNECTION, 'QUANTITY', INUQUANTITYEXT,TRUE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP,CSBMO_DATA_CONNECTION, 'COMMENT_', ISBCOMMENT,TRUE);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadDataConnection',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADDATACONNECTION;

    























    PROCEDURE CREATEMOTMODDATACONN
        (
         ISBPACKAGEID           IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBPRODUCTID           IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBCOMPONENTID         IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBQUANTITYDATACONN    IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBCOMMENT             IN    GE_BOINSTANCECONTROL.STYSBVALUE,
         ISBTAGMOTIV            IN    MO_MOTIVE.TAG_NAME%TYPE,
         ISBTAGMOTICOMP         IN    MO_COMPONENT.TAG_NAME%TYPE,
         ONUMOTIVEID            OUT   MO_MOTIVE.MOTIVE_ID%TYPE
        )
    IS
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME ;
        NUQUANTITY           MO_DATA_CONNECTION.QUANTITY%TYPE;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;

        STYNUINDEX           GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.createMotModDataConn ',12);

        NUPRODUCTID     := UT_CONVERT.FNUCHARTONUMBER(ISBPRODUCTID);
        NUPACKAGEID     := UT_CONVERT.FNUCHARTONUMBER(ISBPACKAGEID);
        NUCOMPONENTID   := UT_CONVERT.FNUCHARTONUMBER(ISBCOMPONENTID);
        NUQUANTITY      := UT_CONVERT.FNUCHARTONUMBER(ISBQUANTITYDATACONN);

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

        

        CREATEMOTIVEBYPRODUCT(NUPRODUCTID,      
                              NUPACKAGEID,      
                              ISBTAGMOTIV,      
                              NULL,             
                              NULL,             
                              TRUE,             
                              NULL,             
                              NULL,             
                              NULL,             
                              NULL,             
                              NULL,             
                              NULL,             
                              SBPROCESSINSTANCE,
                              ONUMOTIVEID);     

        
        UT_TRACE.TRACE('Inicia - Creaci�n de componentes',5);
        FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUFATHCOMPONENTS(NUCOMPONENTID) LOOP
            DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);

            
            IF(NUCOMPONENTID= RCPRCOMPONENTLINK.CHILD_COMPONENT_ID ) THEN

                NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
                LOADCOMPONENT(  NUPACKAGEID,ONUMOTIVEID, ISBTAGMOTIV, NUFATHCOMPIDMOT,
                                ISBTAGMOTICOMP, NUCONSECUTIVE, NUCOMPSTATUSID, RCCOMPBYPROD.CLASS_SERVICE_ID,
                                NUCOMPONENTID, NULL, TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,FALSE,SBPROCESSINSTANCE, NUCOMPIDMOT);

                LOADDATACONNECTION(NUCOMPIDMOT,NUQUANTITY,ISBCOMMENT,SBPROCESSINSTANCE);
            ELSE

                NUCOMPSTATUSID  :=  GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI);
                LOADCOMPONENT(  NUPACKAGEID,ONUMOTIVEID, ISBTAGMOTIV,NUFATHCOMPIDMOT,
                                ISBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,RCCOMPBYPROD.CLASS_SERVICE_ID,
                                RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NULL ,TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,FALSE,SBPROCESSINSTANCE,NUCOMPIDMOT);
            END IF;

            NUFATHCOMPIDMOT := NUCOMPIDMOT;
            NUCONSECUTIVE   := NUCONSECUTIVE + 1;
        END LOOP;

        UT_TRACE.TRACE('Finaliza - Creaci�n de componentes',5);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.createMotModDataConn',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMOTMODDATACONN;

    PROCEDURE CREATMOTBYADDITIONEXT

    IS

        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        SBCOMPONENTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBQUANTITYEXT        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBTECHDATE           GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN

    UT_TRACE.TRACE('Inicia M�todo MO_BOCnfLoadProductData.CreatMotByAdditionExt',12);
    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_8',SBQUANTITYEXT);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'COMMENTARY',SBTECHDATE);

    CREATEMOTMODDATACONN( SBPACKAGE,
                          SBPRODUCTID,
                          SBCOMPONENTID,
                          SBQUANTITYEXT,
                          SBTECHDATE,
                          CSBTAGGENADICIONEXT,
                          CSBTAGADICIONEXT,
                          NUMOTIVEID
        );

    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByAdditionExtt',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYADDITIONEXT;

    PROCEDURE CREATMOTBYRETIREEXT

    IS

        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        SBCOMPONENTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBQUANTITYEXT        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBTECHDATE           GE_BOINSTANCECONTROL.STYSBVALUE;
        SBTAGMOTIV           PS_PRODUCT_MOTIVE.TAG_NAME%TYPE;
        SBTAGMOTICOMP        MO_COMPONENT.TAG_NAME%TYPE;
        SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN

    UT_TRACE.TRACE('Inicia M�todo MO_BOCnfLoadProductData.CreatMotByRetireExt',12);
    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_8',SBQUANTITYEXT);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'COMMENTARY',SBTECHDATE);

    
    SBTAGMOTIV := PS_BOPRODUCTMOTIVE.FSBGENRETIROSERV;

    SBTAGMOTICOMP := PS_BOPRODUCTMOTIVECOMP.FSBGETGENERRETSERV;

    CREATEMOTMODDATACONN( SBPACKAGE,
                          SBPRODUCTID,
                          SBCOMPONENTID,
                          SBQUANTITYEXT,
                          SBTECHDATE,
                          SBTAGMOTIV,
                          SBTAGMOTICOMP,
                          NUMOTIVEID
                        );

    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByRetireExt',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYRETIREEXT;


    
















    PROCEDURE CREATECOMPPAYRET

    IS
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
		NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;

        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFATHERINSTANCE     GE_BOINSTANCECONTROL.STYSBNAME;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBTAGMOTIVE          PS_PRODUCT_MOTIVE.TAG_NAME%TYPE;
        SBTAGMOTICOMP        PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        SBMOTIVEID           GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN
    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

    
    GE_BOINSTANCECONTROL.GETFATHERCURRENTINSTANCE(SBFATHERINSTANCE);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBFATHERINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
    NUPACKAGEID:=UT_CONVERT.FNUCHARTONUMBER(SBPACKAGE);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, MO_BOCONSTANTS.CSBMO_MOTIVE, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
    NUPRODUCTID:=UT_CONVERT.FNUCHARTONUMBER(SBPRODUCTID);

    
    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_MOTIVE,MO_BOCONSTANTS.CSBMOTIVE_ID,SBMOTIVEID);
    NUMOTIVEID :=UT_CONVERT.FNUCHARTONUMBER(SBMOTIVEID);

    
    NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

    
    SBTAGMOTICOMP:=PS_BOPRODUCTMOTIVECOMP.FSBGETGENERRETSERV;

    
    NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGMOTICOMP);

    
    MO_BOCNFINSTANCE.GETATTRIBUTEVALUE(MO_BOCONSTANTS.CSBMO_MOTIVE, 'TAG_NAME', SBTAGMOTIVE);

    
    CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);

 LOOP
		FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
		EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;
		DAPR_COMPONENT.GETRECORD(NUMASTERCOMPPRODID, RCCOMPBYPROD);

        IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
            AND
            (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
        THEN
            
            LOADCOMPONENT(  NUPACKAGEID,NUMOTIVEID, SBTAGMOTIVE, NULL,
                            SBTAGMOTICOMP, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                            NUMASTERCOMPPRODID, NUELEMCATEGORY, TRUE,
                            FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE, NUCOMPIDMOT);
            
            CREATEMORETIRECOMP(NUCOMPIDMOT,GNUPAYRETTYP,SBPROCESSINSTANCE);
            NUFATHCOMPIDMOT := NUCOMPIDMOT;
            NUCONSECUTIVE := NUCONSECUTIVE + 1;
        	
            FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP
                DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);

                
                IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,MO_BOCONSTANTS.CSBMO_COMPONENT||RCPRCOMPONENTLINK.PARENT_COMPONENT_ID,MO_BOCONSTANTS.CSBMO_COMPONENT,'COMPONENT_ID',NUINDEX))
                THEN
                    
                    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,
                                MO_BOCONSTANTS.CSBMO_COMPONENT||RCPRCOMPONENTLINK.PARENT_COMPONENT_ID,
                                MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID', NUFATHCOMPIDMOT);
                    
                    LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIVE,NUFATHCOMPIDMOT,
                                    SBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                    RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATEGORY , TRUE,
                                    FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);
                    
                    CREATEMORETIRECOMP(NUCOMPIDMOT,GNUPAYRETTYP,SBPROCESSINSTANCE);
                    NUFATHCOMPIDMOT := NUCOMPIDMOT;
                    NUCONSECUTIVE := NUCONSECUTIVE + 1;
                END IF;
            END LOOP;
        END IF;
	END LOOP;
    UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);
	CLOSE CURFMASTERCOMPONENTS;
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByGenerReti',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATECOMPPAYRET;

   























    PROCEDURE CREATMOTBYRETCOMPAUTO

    IS

		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        SBINITIALPROCESSDATE GE_BOINSTANCECONTROL.STYSBVALUE;
        RCMOMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        RCMOCHILDCOMPONENT   DAMO_COMPONENT.STYMO_COMPONENT;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NURETIMOTIVEID       MO_MOTIVE.MOTIVE_ID%TYPE;

        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        RCFATHPRCOMP         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
		NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
		NUMOTIVETYPEID       MO_COMPONENT.MOTIVE_TYPE_ID%TYPE;

       	SBTAGNAMEPRODMOTI    PS_PRODUCT_MOTIVE.TAG_NAME%TYPE;

		CNUMOTIVETYPEADDSERVANUNC CONSTANT PS_MOTIVE_TYPE.MOTIVE_TYPE_ID%TYPE := 150;

		CSBTAGRETSERVANUNCIADOR   CONSTANT PS_PRODUCT_MOTIVE.TAG_NAME%TYPE := 'M_LIBAS_RETSERVANUNCIADOR';

        CURFCHILDMOCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUINDEX               GE_BOINSTANCECONTROL.STYNUINDEX;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByRetCompAuto',12);
    
    GE_BOINSTANCE.GETVALUE
        (
        MO_BOCONSTANTS.CSBMO_MOTIVE,
        MO_BOCONSTANTS.CSBMOTIVE_ID,
        NUMOTIVEID
        );

    DAMO_MOTIVE.GETRECORD(NUMOTIVEID,RCMOMOTIVE);
    
    IF DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(RCMOMOTIVE.PRODUCT_ID) = PR_BOPARAMETER.FNUGETPRODRETI THEN
       RETURN;
    END IF;
    
    IF NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOMOTIVE.MOTIVE_STATUS_ID) THEN
        ERRORS.SETERROR(CNUERROR_2008,
                        RCMOMOTIVE.MOTIVE_STATUS_ID||'|'||
                        NUMOTIVEID
                        );
        RAISE EX.CONTROLLED_ERROR;
    END IF;

     
    GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
     
    GE_BOINSTANCECONTROL.CREATEINSTANCE(SBPROCESSINSTANCE,NULL);

    NUMOTIVETYPEID := RCMOMOTIVE.MOTIVE_TYPE_ID;

    UT_TRACE.TRACE('Tipo Motivo['||NUMOTIVETYPEID||'] - Movivo Id['||NUMOTIVEID||']',13);

    
    IF (NUMOTIVETYPEID = CNUMOTIVETYPEADDSERVANUNC) THEN
        UT_TRACE.TRACE('Tipo de motivo si es Adici�n de Servicio Anunciador',13);
        SBTAGNAMEPRODMOTI := CSBTAGRETSERVANUNCIADOR;
    ELSE
        UT_TRACE.TRACE('Tipo de motivo no es Adici�n de Servicio Anunciador',13);
        SBTAGNAMEPRODMOTI := PS_BOPRODUCTMOTIVE.CSBTAGGENRETIROSERV;
    END IF;

    

    CREATEMOTIVEBYPRODUCT(RCMOMOTIVE.PRODUCT_ID,      
                          RCMOMOTIVE.PACKAGE_ID,      
                          SBTAGNAMEPRODMOTI,      
                          NULL,             
                          NULL,             
                          TRUE,             
                          NULL,             
                          NULL,             
                          NULL,             
                          NULL,             
                          NULL,             
                          SBINITIALPROCESSDATE, 
                          SBPROCESSINSTANCE,
                          NURETIMOTIVEID);     

    
    CREATEMORETIRE(NURETIMOTIVEID, CNUAUTRETTYP,SBPROCESSINSTANCE);

    NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
    NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL);
    UT_TRACE.TRACE('Inicia - Creacion de componentes',7);
    
    FOR RCMOMASTERCOMPONENT IN MO_BCCOMPONENT.CUMAINCOMPONENTS(NUMOTIVEID) LOOP
		DAPR_COMPONENT.GETRECORD(RCMOMASTERCOMPONENT.COMPONENT_ID_PROD, RCCOMPBYPROD);

        IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
            AND
            (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
        THEN
            
            IF RCMOMASTERCOMPONENT.MOTIVE_STATUS_ID = GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI) THEN
                NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI);
            ELSE
                NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
            END IF;
            
            LOADCOMPONENT(RCMOMOTIVE.PACKAGE_ID,NURETIMOTIVEID, PS_BOPRODUCTMOTIVE.CSBTAGGENRETIROSERV, NULL,
                            PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                            RCCOMPBYPROD.COMPONENT_ID, NUELEMCATEGORY, TRUE,
                            FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE, NUCOMPIDMOT);
            
            CREATEMORETIRECOMP(NUCOMPIDMOT,CNUAUTRETTYP,SBPROCESSINSTANCE);
            NUFATHCOMPIDMOT := NUCOMPIDMOT;
            NUCONSECUTIVE := NUCONSECUTIVE + 1;
        	
            CURFCHILDMOCOMPONENTS := MO_BCCOMPONENT.FRFGETCHILDCOMPONENT(RCMOMASTERCOMPONENT.COMPONENT_ID);
            LOOP
            	FETCH CURFCHILDMOCOMPONENTS INTO RCMOCHILDCOMPONENT;
            	EXIT WHEN CURFCHILDMOCOMPONENTS%NOTFOUND;
            	
                DAPR_COMPONENT.GETRECORD(RCMOCHILDCOMPONENT.COMPONENT_ID_PROD, RCCOMPBYPROD);
                
                RCFATHPRCOMP := PR_BCCOMPONENT.FRCCOMPONENTFATHER(RCMOCHILDCOMPONENT.COMPONENT_ID_PROD);

                
                IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,MO_BOCONSTANTS.CSBMO_COMPONENT||RCFATHPRCOMP.COMPONENT_ID,MO_BOCONSTANTS.CSBMO_COMPONENT,'COMPONENT_ID',NUINDEX))
                THEN

                    
                    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,
                                MO_BOCONSTANTS.CSBMO_COMPONENT||RCFATHPRCOMP.COMPONENT_ID,
                                MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID', NUFATHCOMPIDMOT);
                    
                    IF RCMOCHILDCOMPONENT.MOTIVE_STATUS_ID = GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI) THEN
                        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI);
                    ELSE
                        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
                    END IF;
                    
                    LOADCOMPONENT(RCMOMOTIVE.PACKAGE_ID,NURETIMOTIVEID,PS_BOPRODUCTMOTIVE.CSBTAGGENRETIROSERV,
                                    NUFATHCOMPIDMOT,PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL,NUCONSECUTIVE,
                                    NUCOMPSTATUSID,NULL,RCCOMPBYPROD.COMPONENT_ID, NUELEMCATEGORY , TRUE,
                                    FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);
                    
                    CREATEMORETIRECOMP(NUCOMPIDMOT,CNUAUTRETTYP,SBPROCESSINSTANCE);
                    NUFATHCOMPIDMOT := NUCOMPIDMOT;
                    NUCONSECUTIVE := NUCONSECUTIVE + 1;
                END IF;
            END LOOP;
        END IF;
	END LOOP;
    UT_TRACE.TRACE('Finaliza - Creacion de componentes',7);

    

    CREATEMOEXECLOGMOT
    (
        RCMOMOTIVE.PACKAGE_ID,
        NURETIMOTIVEID,
        MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN,
        SBPROCESSINSTANCE
    );

    
    GE_BOINSTANCECONTROL.INSERTINSTANCE(SBPROCESSINSTANCE);
    GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
    
    DAMO_PACKAGES.UPDMOTIVE_STATUS_ID(RCMOMOTIVE.PACKAGE_ID,MO_BOCONSTANTS.CNUSTATUS_REG_PACK);
    
    MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONATTENTION(RCMOMOTIVE.PACKAGE_ID);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByRetCompAuto',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFCHILDMOCOMPONENTS%ISOPEN THEN
                	CLOSE CURFCHILDMOCOMPONENTS;
             END IF;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFCHILDMOCOMPONENTS%ISOPEN THEN
                	CLOSE CURFCHILDMOCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYRETCOMPAUTO;

    



















    





















    PROCEDURE LOADCOMPANDCHILDINRET
        (
        INUCOMPONENTID      IN PR_COMPONENT.PRODUCT_ID%TYPE,
        INUPACKAGEID        IN MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID         IN MO_MOTIVE.MOTIVE_ID%TYPE,
        INUFATHCOMPIDMOT    IN MO_COMPONENT.COMPONENT_ID%TYPE,
        ISBTAGMOTIVE        IN MO_MOTIVE.TAG_NAME%TYPE,
        ISBTAGMOTICOMP      IN MO_COMPONENT.TAG_NAME%TYPE,
        INUCONSECUTIVE      IN  OUT NUMBER,
        INURETIRETYPEID     IN MO_RETIRE_COMP.RETIRE_TYPE_ID%TYPE
        )
    IS
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE;
        SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
        
        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(ISBTAGMOTICOMP);
        DAPR_COMPONENT.GETRECORD(INUCOMPONENTID, RCCOMPBYPROD);

        IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
            AND
            (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
        THEN

            
            LOADCOMPONENT(  INUPACKAGEID,INUMOTIVEID, ISBTAGMOTIVE, INUFATHCOMPIDMOT,
                            ISBTAGMOTICOMP, INUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                            INUCOMPONENTID, NUELEMCATEGORY, TRUE,
                            FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE, NUCOMPIDMOT);
            
            CREATEMORETIRECOMP(NUCOMPIDMOT,INURETIRETYPEID,SBPROCESSINSTANCE);
            NUFATHCOMPIDMOT := NUCOMPIDMOT;
            INUCONSECUTIVE := INUCONSECUTIVE + 1;
            
            FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(INUCOMPONENTID) LOOP
                DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);

                
                IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||RCPRCOMPONENTLINK.PARENT_COMPONENT_ID, MO_BOCONSTANTS.CSBMO_COMPONENT,MO_BOCONSTANTS.CSBCOMPONENT_ID,NUINDEX))
                THEN

                    
                    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,
                    MO_BOCONSTANTS.CSBMO_COMPONENT||RCPRCOMPONENTLINK.PARENT_COMPONENT_ID,
                    MO_BOCONSTANTS.CSBMO_COMPONENT,MO_BOCONSTANTS.CSBCOMPONENT_ID, NUFATHCOMPIDMOT);
                    
                    LOADCOMPONENT(  INUPACKAGEID,INUMOTIVEID,ISBTAGMOTIVE,NUFATHCOMPIDMOT,
                                    ISBTAGMOTICOMP,INUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                    RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATEGORY , TRUE,
                                    FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);
                    
                    CREATEMORETIRECOMP(NUCOMPIDMOT,INURETIRETYPEID,SBPROCESSINSTANCE);
                    NUFATHCOMPIDMOT := NUCOMPIDMOT;
                    INUCONSECUTIVE := INUCONSECUTIVE + 1;
                END IF;
            END LOOP;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ;

    



















    PROCEDURE LOADONECOMPONENT
    (
        IBLLOADADDRESS        IN        BOOLEAN  DEFAULT TRUE
    )
    IS
        SBPROCESSINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        RCCOMPBYPROD        DAPR_COMPONENT.STYPR_COMPONENT;
        NUASSIGNROUTEID     MO_COMPONENT.ASSIGN_ROUTE_ID%TYPE;
        SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME := NULL;
        SBTAGMOTICOMP       GE_BOINSTANCECONTROL.STYSBNAME;
        SBCOMPIDMOT         GE_BOINSTANCECONTROL.STYSBNAME;
        SBCOMPIDPROD        GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadOneComponent',12);

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'TAG_NAME', SBTAGMOTICOMP);
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID', SBCOMPIDMOT);
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID_PROD', SBCOMPIDPROD);

        DAPR_COMPONENT.GETRECORD(TO_NUMBER(SBCOMPIDPROD), RCCOMPBYPROD);

        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'OBLIGATORY_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'OBLIGATORY_CHANGE', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'NOTIFY_ASSIGN_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'AUTHORIZ_LETTER_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'STATUS_CHANGE_DATE', UT_DATE.FSBSTR_SYSDATE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'RECORDING_DATE', UT_DATE.FSBSTR_SYSDATE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'DIRECTIONALITY_ID', RCCOMPBYPROD.DIRECTIONALITY_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'CUSTOM_DECISION_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'KEEP_NUMBER_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'DISTRICT_ID', RCCOMPBYPROD.DISTRICT_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'BUILDING_ID', RCCOMPBYPROD.BUILDING_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'DISTRIBUT_ADMIN_ID', RCCOMPBYPROD.DISTRIBUT_ADMIN_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'CATEGORY_ID', RCCOMPBYPROD.CATEGORY_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SUBCATEGORY_ID', RCCOMPBYPROD.SUBCATEGORY_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_TYPE_ID', RCCOMPBYPROD.COMPONENT_TYPE_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ASSIGN_ROUTE_ID', RCCOMPBYPROD.ASSIGN_ROUTE_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'CLASS_SERVICE_ID', RCCOMPBYPROD.CLASS_SERVICE_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PRODUCT_ID', RCCOMPBYPROD.PRODUCT_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SERVICE_NUMBER', RCCOMPBYPROD.SERVICE_NUMBER);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID_PROD', RCCOMPBYPROD.COMPONENT_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PRODUCT_ORIGIN_ID', RCCOMPBYPROD.PRODUCT_ORIGIN_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'QUANTITY', RCCOMPBYPROD.QUANTITY);

        
        IF IBLLOADADDRESS THEN
            LOADCOMPADDRORPREM(RCCOMPBYPROD.COMPONENT_ID,SBCOMPIDMOT,SBPROCESSINSTANCE);
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadOneComponent',12);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END LOADONECOMPONENT;

    PROCEDURE LOADNETWORKELEMCOMP
        (
        INUCOMPIDPROD         IN        PR_COMPONENT.COMPONENT_ID%TYPE,
        INUCOMPIDMOT          IN        MO_COMPONENT.COMPONENT_ID%TYPE,
        INUCATEGORYID         IN        PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE,
        INUASSIGNROUTEID      IN        MO_COMPONENT.ASSIGN_ROUTE_ID%TYPE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
        )
    IS
    BEGIN
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadNetworkElemComp',12);

        

        LOADNETWORKELEM(INUCOMPIDPROD,                
                        INUCOMPIDMOT,                 
                        INUCATEGORYID,                
                        IOSBPROCESSINSTANCE           
                        );

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadNetworkElemComp',12);
    EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;


    


















    PROCEDURE CREATMOTBYREINSTALL
    IS
        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';

        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
		RCPRODUCT            DAPR_PRODUCT.STYPR_PRODUCT;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;

		NUPRODUCTID          MO_MOTIVE.PRODUCT_ID%TYPE;
		NUPACKAGEID          MO_MOTIVE.PACKAGE_ID%TYPE;
		NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
		NUMOCOMPID           MO_COMPONENT.COMPONENT_ID%TYPE;
        NUFATHMOCOMPID       MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUMASTERCOMPPRODID   MO_COMPONENT.COMPONENT_ID_PROD%TYPE;

        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        DTRETIREDATE         PR_PRODUCT_RETIRE.RETIRE_DATE%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByReinstall',12);

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);


        
        NUPACKAGEID := TO_NUMBER(SBPACKAGE);
        NUPRODUCTID := TO_NUMBER(SBPRODUCTID);
        RCPRODUCT := DAPR_PRODUCT.FRCGETRECORD(NUPRODUCTID);


        
        UT_TRACE.TRACE('Inicia - Creacion de motivo',14);
        
        CREATEMOTIVEBYPRODUCT(NUPRODUCTID,NUPACKAGEID,CSBTAGGENREINST,NULL,NULL,TRUE,
                              RCPRODUCT.PRODUCT_TYPE_ID,NULL,RCPRODUCT.CATEGORY_ID,RCPRODUCT.SUBCATEGORY_ID,
                              GE_BOCONSTANTS.CSBNO,NULL,SBPROCESSINSTANCE,NUMOTIVEID);

        
        UT_TRACE.TRACE('Inicia - Creacion de componentes',14);
        DTRETIREDATE := PR_BCPRODUCT.FDTLASTPRODUCTRETIRE(NUPRODUCTID);
        NUCOMPSTATUSID := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        
        CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);

     LOOP
    		FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
    		EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;

            RCCOMPBYPROD := DAPR_COMPONENT.FRCGETRECORD(NUMASTERCOMPPRODID);

            IF  (RCCOMPBYPROD.COMPONENT_STATUS_ID = PR_BOPARAMETER.FNUGETCOMPRETI)
                AND
                (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                AND
                (PR_BCPRODUCT.FDTLASTCOMPONENTRETIRE(NUMASTERCOMPPRODID) = DTRETIREDATE)
            THEN

                
                LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID, CSBTAGGENREINST, NULL,
                                CSBTAGGENEREINSTCOMP, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                                NUMASTERCOMPPRODID, NULL, TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,FALSE,SBPROCESSINSTANCE, NUMOCOMPID);

                NUFATHMOCOMPID := NUMOCOMPID;
                NUCONSECUTIVE := NUCONSECUTIVE + 1;

            	
                FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP

                    DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);
                    
                    GETMOFATHERCOMPONENT(SBPROCESSINSTANCE,RCPRCOMPONENTLINK,NUFATHMOCOMPID);

                    
                    
            		IF (PR_BCPRODUCT.FDTLASTCOMPONENTRETIRE(NUMASTERCOMPPRODID) = DTRETIREDATE) AND
                       (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES) AND
                       (NUFATHMOCOMPID IS NOT NULL)
                    THEN
                        
                        LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,CSBTAGGENREINST,NUFATHMOCOMPID,
                                        CSBTAGGENEREINSTCOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                        RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NULL , TRUE,
                                        FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,FALSE,SBPROCESSINSTANCE,NUMOCOMPID);

                        NUFATHMOCOMPID := NUMOCOMPID;
                        NUCONSECUTIVE := NUCONSECUTIVE + 1;
                    END IF;
                END LOOP;
            END IF;
    	END LOOP;

        UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);
    	CLOSE CURFMASTERCOMPONENTS;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByReinstall',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CURFMASTERCOMPONENTS%ISOPEN) THEN
                CLOSE CURFMASTERCOMPONENTS;
            END IF;

            IF (PR_BCCOMPONENT.CUCOMPSORDERBYPAREN%ISOPEN) THEN
                CLOSE PR_BCCOMPONENT.CUCOMPSORDERBYPAREN;
            END IF;

            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (CURFMASTERCOMPONENTS%ISOPEN) THEN
                CLOSE CURFMASTERCOMPONENTS;
            END IF;

            IF (PR_BCCOMPONENT.CUCOMPSORDERBYPAREN%ISOPEN) THEN
                CLOSE PR_BCCOMPONENT.CUCOMPSORDERBYPAREN;
            END IF;

            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    



















    PROCEDURE CREATMOTRETAUTOPRASSO
        (
        INUPRODUCTTYPE IN PR_PRODUCT.PRODUCT_TYPE_ID%TYPE
        )
    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        RCMOMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE;
        NURETIMOTIVEID       MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotRetAutoPrAsso',12);
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_COMPONENT,
            MO_BOCONSTANTS.CSBCOMPONENT_ID,
            NUCOMPONENTID
            );

        IF (NUCOMPONENTID IS NULL) THEN
            
            GE_BOINSTANCE.GETVALUE
                (
                MO_BOCONSTANTS.CSBMO_MOTIVE,
                MO_BOCONSTANTS.CSBMOTIVE_ID,
                NUMOTIVEID
                );
        ELSE
            NUMOTIVEID:=DAMO_COMPONENT.FNUGETMOTIVE_ID(NUCOMPONENTID);
        END IF;

        DAMO_MOTIVE.GETRECORD(NUMOTIVEID,RCMOMOTIVE);

        
        NUPRODUCTID:=PR_BOCNFPRODUCT.FNUGETPRODUCTBYPRODIDORIG(RCMOMOTIVE.PRODUCT_ID,INUPRODUCTTYPE);

        
        IF DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(NUPRODUCTID) = PR_BOPARAMETER.FNUGETPRODRETI THEN
            RETURN;
        END IF;
        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(SBPROCESSINSTANCE,NULL);
        
        CREATMOTBYGENERRETI
            (
             TO_CHAR(RCMOMOTIVE.PACKAGE_ID),
             TO_CHAR(NUPRODUCTID),
             CNUAUTRETTYP,
             NULL,
             PS_BOPRODUCTMOTIVE.CSBTAGGENERRETIRVOL,
             PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL,
             NURETIMOTIVEID
            );

        
        CREATEMOEXECLOGMOT
            (
            RCMOMOTIVE.PACKAGE_ID,
            NURETIMOTIVEID,
            MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN,
            SBPROCESSINSTANCE
            );

        
        GE_BOINSTANCECONTROL.INSERTINSTANCE(SBPROCESSINSTANCE);
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
        
        DAMO_PACKAGES.UPDMOTIVE_STATUS_ID(RCMOMOTIVE.PACKAGE_ID,MO_BOCONSTANTS.CNUSTATUS_REG_PACK);
        
        MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONATTENTION(RCMOMOTIVE.PACKAGE_ID);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotRetAutoPrAsso',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTRETAUTOPRASSO;


    




















    PROCEDURE CREATCOMPRETPRCOMP
        (
        INUPRCOMPONENTID      IN PR_COMPONENT.COMPONENT_ID%TYPE,
        INUCOMPONENTSTATUS  IN MO_COMPONENT.MOTIVE_STATUS_ID%TYPE
        )
    IS
        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        RCMOMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE;
        NURETIMOTIVEID       MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUELEMCATEGORY       GE_ELE_CATEGORY_TYPE.CATEGORY_ID%TYPE;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCONSECUTIVE        NUMBER;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatCompRetPrComp',12);
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_COMPONENT,
            MO_BOCONSTANTS.CSBCOMPONENT_ID,
            NUCOMPONENTID
            );

        IF (NUCOMPONENTID IS NULL) THEN
        
            GE_BOINSTANCE.GETVALUE
                (
                MO_BOCONSTANTS.CSBMO_MOTIVE,
                MO_BOCONSTANTS.CSBMOTIVE_ID,
                NUMOTIVEID
                );
        ELSE
            NUMOTIVEID:=DAMO_COMPONENT.FNUGETMOTIVE_ID(NUCOMPONENTID);
        END IF;

        DAMO_MOTIVE.GETRECORD(NUMOTIVEID,RCMOMOTIVE);


        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(SBPROCESSINSTANCE,NULL);

        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL);

        NUCONSECUTIVE := MO_BCMOTIVE.FNUGETQUANTITYCOMP(NUMOTIVEID)+1;
        
        LOADCOMPONENT(  RCMOMOTIVE.PACKAGE_ID,NUMOTIVEID,PS_BOPRODUCTMOTIVE.CSBTAGGENERRETIRVOL,NULL,
                        PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL,NUCONSECUTIVE,INUCOMPONENTSTATUS,NULL,
                        INUPRCOMPONENTID, NUELEMCATEGORY , TRUE,
                        FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);

        
        GE_BOINSTANCECONTROL.INSERTINSTANCE(SBPROCESSINSTANCE);
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatCompRetPrComp',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
    END CREATCOMPRETPRCOMP;


    PROCEDURE CREATMOTRETAUTOPRORIG
        (
        ISBTAGPRODMOTIVE IN MO_MOTIVE.TAG_NAME%TYPE
        )
    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        RCMOMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE;
        NURETIMOTIVEID       MO_MOTIVE.MOTIVE_ID%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
    BEGIN

         UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotRetAutoPrOrig',12);
        
        GE_BOINSTANCE.GETVALUE
            (
            MO_BOCONSTANTS.CSBMO_COMPONENT,
            MO_BOCONSTANTS.CSBCOMPONENT_ID,
            NUCOMPONENTID
            );

        IF (NUCOMPONENTID IS NULL) THEN
            
            GE_BOINSTANCE.GETVALUE
                (
                MO_BOCONSTANTS.CSBMO_MOTIVE,
                MO_BOCONSTANTS.CSBMOTIVE_ID,
                NUMOTIVEID
                );
        ELSE
            NUMOTIVEID:=DAMO_COMPONENT.FNUGETMOTIVE_ID(NUCOMPONENTID);
        END IF;

        DAMO_MOTIVE.GETRECORD(NUMOTIVEID,RCMOMOTIVE);

        
        NUPRODUCTID:=PR_BOCNFPRODUCT.FNUGETPRODUCTORIGIN(RCMOMOTIVE.PRODUCT_ID);

        
        IF DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(NUPRODUCTID) = PR_BOPARAMETER.FNUGETPRODRETI THEN
            RETURN;
        END IF;
        
        GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
        
        GE_BOINSTANCECONTROL.CREATEINSTANCE(SBPROCESSINSTANCE,NULL);
        
        CREATMOTBYGENERRETI
            (
             TO_CHAR(RCMOMOTIVE.PACKAGE_ID),
             TO_CHAR(NUPRODUCTID),
             CNUAUTRETTYP,
             NULL,
             ISBTAGPRODMOTIVE,
             PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL,
             NURETIMOTIVEID
            );

        
        CREATEMOEXECLOGMOT
            (
            RCMOMOTIVE.PACKAGE_ID,
            NURETIMOTIVEID,
            MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN,
            SBPROCESSINSTANCE
            );

        
        GE_BOINSTANCECONTROL.INSERTINSTANCE(SBPROCESSINSTANCE);
        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
        
        DAMO_PACKAGES.UPDMOTIVE_STATUS_ID(RCMOMOTIVE.PACKAGE_ID,MO_BOCONSTANTS.CNUSTATUS_REG_PACK);
        
        MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONATTENTION(RCMOMOTIVE.PACKAGE_ID);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotRetAutoPrOrig',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTRETAUTOPRORIG;


    















































    PROCEDURE LOADHIERARCHYCOMP
    (
        INUCOMPONENTID          IN      PR_COMPONENT.COMPONENT_ID%TYPE,
        IOTBCURRENTHIERARCHY    IN OUT  TYTBCOMPCHILDS,
        INUADDRESSID            IN      AB_ADDRESS.ADDRESS_ID%TYPE,
        INUPREMISEID            IN      AB_PREMISE.PREMISE_ID%TYPE,
        SBTAGNAME               IN      VARCHAR2,
        INUCATEGORYFORCOMP      IN      NUMBER,
        INUCATEGORYFORPARENT    IN      NUMBER,
        IBLLOADCHILDS           IN      BOOLEAN,
        ISBISMOVEABLE           IN      VARCHAR2,
        ONUMAINCOMP             OUT     NUMBER
    )
    IS
        NUCMPPPALINDEX      NUMBER;
        BLEXISTSPARENT      BOOLEAN := FALSE;
        NUCOMPTYPINCLUDED   NUMBER :=  GE_BOPARAMETER.FNUGET('CC_COMP_INCLUDED');
        NUPARENTCOMPID      PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPARENTCOMPTYID    PR_COMPONENT.COMPONENT_TYPE_ID%TYPE;


        SBISMOVEABLE        VARCHAR2(1);
        BLCREATENODE        BOOLEAN;
        INUCOMPTYPECHILDID  PR_COMPONENT.COMPONENT_TYPE_ID%TYPE;

        CURSOR CUHIERARCHY
        (
            INUCOMPONENTID  NUMBER
        )
        IS
        SELECT *
                FROM PR_COMPONENT_LINK
                START WITH CHILD_COMPONENT_ID = INUCOMPONENTID
                CONNECT BY PRIOR PARENT_COMPONENT_ID = CHILD_COMPONENT_ID;

        CURSOR CUHIERARCHYDESC
        (
            INUCOMPONENTID  NUMBER
        )
        IS
            SELECT B.*
            FROM  PR_COMPONENT A,
                    (
                    SELECT *
                    FROM PR_COMPONENT_LINK
                    START WITH PARENT_COMPONENT_ID = INUCOMPONENTID
                    CONNECT BY PRIOR CHILD_COMPONENT_ID = PARENT_COMPONENT_ID
                    ) B
            WHERE B.CHILD_COMPONENT_ID = A.COMPONENT_ID
            AND EXISTS  (
                        SELECT 'X'
                        FROM PS_PRODUCT_STATUS C
                        WHERE C.PRODUCT_STATUS_ID = A.COMPONENT_STATUS_ID
                        AND C.IS_ACTIVE_PRODUCT = GE_BOCONSTANTS.CSBYES
                        );

    






























        PROCEDURE CREATENODEFOR
        (
            INUPARENTCOMPONENTID         IN     OUT NOCOPY NUMBER,
            INUCHILDCOMPONENTID          IN     OUT NOCOPY NUMBER,
            IOTBCHILDSINFO               IN     OUT NOCOPY TYTBCOMPCHILDS,
            INUCATEGORYFORPARENT         IN     NUMBER,
            IBLISREGSTATUS               IN     BOOLEAN,
            INUCOMPONENTTYPEID           IN     NUMBER,
            OBLEXISTSPARENT              OUT    BOOLEAN,
            ONUCMPPPALINDEX              OUT    NUMBER
        )
        IS
            NUINDCHLDSOFPARENT  NUMBER;
            TBCHILDTABLE        TYTBCOMPCHILD;
            NUPARENTINDEX       NUMBER;

            RCCURRENTCHILD      TYRCCHILDSINFO;
            TBCURRENTCHILDLIST  TYTBCOMPCHILD;

        BEGIN
            
            

            UT_TRACE.TRACE('Inicia el m�todo mo_bocnfloadproductdata.loadHierarchyComp.createNodeFor'
                          ,16);

            UT_TRACE.TRACE('loadHierarchyComp inuParentComponentId '||INUPARENTCOMPONENTID||
                           'inuChildComponentId '||INUCHILDCOMPONENTID||
                           'inuChildComponentId ['||INUCHILDCOMPONENTID||']'
                          ,18);

            IF INUPARENTCOMPONENTID IS NULL THEN
                
                INUPARENTCOMPONENTID := 0;
                ONUCMPPPALINDEX := INUCHILDCOMPONENTID;
                UT_TRACE.TRACE('Viene padre nulo',18);
            END IF;

            
            
            
            IF NOT(IOTBCHILDSINFO.EXISTS( INUPARENTCOMPONENTID)) THEN
                OBLEXISTSPARENT := GE_BOCONSTANTS.GETFALSE;
            ELSE
                OBLEXISTSPARENT := GE_BOCONSTANTS.GETTRUE;
            END IF;

            
            

            RCCURRENTCHILD.NUPARENTINDEX := INUPARENTCOMPONENTID;
            RCCURRENTCHILD.NUCHILDINDEX  := INUCHILDCOMPONENTID;

            
            

            RCCURRENTCHILD.NUCOMPONENTTYPEID := INUCOMPONENTTYPEID;

            IF (INUCHILDCOMPONENTID = INUCOMPONENTID OR IBLISREGSTATUS) THEN


                RCCURRENTCHILD.SBTAGNAME:= SBTAGNAME;

                IF (INUADDRESSID IS NOT NULL) THEN
                    RCCURRENTCHILD.NUADDRESSID := INUADDRESSID ;
                END IF;

                IF (INUPREMISEID IS NOT NULL) THEN
                    RCCURRENTCHILD.NUPREMISEID := INUPREMISEID ;
                END IF;


                RCCURRENTCHILD.NUCATEGORYFORELEMS := INUCATEGORYFORCOMP;
                RCCURRENTCHILD.NUSTATUSREGISTER := GNUREGSTATUSCOMP; 
            ELSE
                RCCURRENTCHILD.NUCATEGORYFORELEMS := INUCATEGORYFORPARENT;
                RCCURRENTCHILD.NUSTATUSREGISTER := GNUATTENDPRODEXIST; 
                RCCURRENTCHILD.SBTAGNAME:= SBTAGNAME;
            END IF;
            
            
            BEGIN
                UT_TRACE.TRACE('Se va a insertar el registro',18);
                
                TBCURRENTCHILDLIST := IOTBCHILDSINFO(INUPARENTCOMPONENTID);
                
                IF NOT TBCURRENTCHILDLIST.EXISTS(INUCHILDCOMPONENTID) THEN
                    TBCURRENTCHILDLIST(INUCHILDCOMPONENTID) := RCCURRENTCHILD;
                    
                    IOTBCHILDSINFO(INUPARENTCOMPONENTID) := TBCURRENTCHILDLIST;
                END IF;

                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        
                        
                        UT_TRACE.TRACE('Se inserta el registro inicial de hijos para el '||INUPARENTCOMPONENTID,18);
                        TBCURRENTCHILDLIST(INUCHILDCOMPONENTID) := RCCURRENTCHILD;
                        
                        IOTBCHILDSINFO(INUPARENTCOMPONENTID) := TBCURRENTCHILDLIST;
                    WHEN OTHERS THEN
                        ERRORS.SETERROR;
                        RAISE EX.CONTROLLED_ERROR;
            END;

                
                
            BEGIN
                TBCURRENTCHILDLIST := IOTBCHILDSINFO(INUCHILDCOMPONENTID);
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        
                        RCCURRENTCHILD.NUPARENTINDEX := NULL;
                        RCCURRENTCHILD.NUCHILDINDEX  := NULL;
                        RCCURRENTCHILD.NUSTATUSREGISTER := NULL;
                        TBCURRENTCHILDLIST.DELETE;
                        TBCURRENTCHILDLIST(1) := RCCURRENTCHILD;
                        IOTBCHILDSINFO(INUCHILDCOMPONENTID) := TBCURRENTCHILDLIST;

                    WHEN OTHERS THEN
                        ERRORS.SETERROR;
                        RAISE EX.CONTROLLED_ERROR;

            END;

            UT_TRACE.TRACE('Termina loadHierarchyComp inuParentComponentId '||INUPARENTCOMPONENTID||
               'inuChildComponentId '||INUCHILDCOMPONENTID
              ,16);

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    UT_TRACE.TRACE('Error '||ERRORS.SBERRORMESSAGE,1);
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    UT_TRACE.TRACE('Error others'||ERRORS.SBERRORMESSAGE,1);
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;

        END CREATENODEFOR;

    BEGIN
        UT_TRACE.TRACE( ' Inicia el m�todo mo_bocnfloadproductdata.loadHierarchyComp',12);

        FOR RCPRCOMP IN CUHIERARCHY(INUCOMPONENTID) LOOP
            UT_TRACE.TRACE('subiendo la jerarqu�a padre '||RCPRCOMP.PARENT_COMPONENT_ID,14);
            UT_TRACE.TRACE('subiendo la jerarqu�a hijo '||RCPRCOMP.CHILD_COMPONENT_ID,14);

            UT_TRACE.TRACE('subiendo la jerarqu�a hijo inuCategoryForElems ['||INUCATEGORYFORPARENT||' ]',14);
            NUPARENTCOMPID:=RCPRCOMP.PARENT_COMPONENT_ID;

            IF (RCPRCOMP.PARENT_COMPONENT_ID IS NOT NULL) THEN
                IF  (DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID(RCPRCOMP.PARENT_COMPONENT_ID)=NUCOMPTYPINCLUDED) THEN
                    PR_BOCOMPONENT.GETFATHERCOMPONENT(RCPRCOMP.PARENT_COMPONENT_ID,NUPARENTCOMPID,NUPARENTCOMPTYID);
                END IF;
            END IF;

            IF  NOT (DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID(RCPRCOMP.CHILD_COMPONENT_ID)=NUCOMPTYPINCLUDED) THEN
                
                CREATENODEFOR(  NUPARENTCOMPID,
                                RCPRCOMP.CHILD_COMPONENT_ID,
                                IOTBCURRENTHIERARCHY,
                                INUCATEGORYFORPARENT,
                                GE_BOCONSTANTS.GETFALSE,
                                DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID(RCPRCOMP.CHILD_COMPONENT_ID),
                                BLEXISTSPARENT,
                                NUCMPPPALINDEX
                             );
                IF NUCMPPPALINDEX IS NOT NULL THEN
                    ONUMAINCOMP := NUCMPPPALINDEX;
                END IF;
                IF BLEXISTSPARENT THEN
                    UT_TRACE.TRACE( 'Ya existe el padre',12);
                    EXIT;
                END IF;
            END IF;
        END LOOP;

        
        IF IBLLOADCHILDS THEN
            FOR RCPRCOMP IN CUHIERARCHYDESC(INUCOMPONENTID) LOOP

                
                IF(ISBISMOVEABLE = GE_BOCONSTANTS.GETYES) THEN

                    INUCOMPTYPECHILDID :=  DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID(RCPRCOMP.CHILD_COMPONENT_ID);

                    SBISMOVEABLE := DAPS_COMPONENT_TYPE.FSBGETIS_MOVEABLE(INUCOMPTYPECHILDID);

                    
                    IF(SBISMOVEABLE = GE_BOCONSTANTS.GETYES) THEN

                        BLCREATENODE := GE_BOCONSTANTS.GETTRUE;
                    ELSE
                        BLCREATENODE := GE_BOCONSTANTS.GETFALSE;
                    END IF;
                ELSE
                    BLCREATENODE := GE_BOCONSTANTS.GETTRUE;
                END IF;

                IF(BLCREATENODE) THEN
                    
                    CREATENODEFOR(
                                    RCPRCOMP.PARENT_COMPONENT_ID,
                                    RCPRCOMP.CHILD_COMPONENT_ID,
                                    IOTBCURRENTHIERARCHY,
                                    INUCATEGORYFORCOMP,
                                    GE_BOCONSTANTS.GETTRUE,
                                    DAPR_COMPONENT.FNUGETCOMPONENT_TYPE_ID(RCPRCOMP.CHILD_COMPONENT_ID),
                                    BLEXISTSPARENT,
                                    NUCMPPPALINDEX
                                 );
                END IF;
            END LOOP;
        END IF;
        UT_TRACE.TRACE( ' Termina el m�todo mo_bocnfloadproductdata.loadHierarchyComp',12);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END LOADHIERARCHYCOMP;


    


















    PROCEDURE DESTROYENTITIES
    (
        ISBCURRENTINSTANCE  IN  GE_BOINSTANCECONTROL.STYSBNAME
    )
    IS
        TYTBALLCHILDINSTANCES   GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
        NUINDEX                 BINARY_INTEGER;
    BEGIN
        UT_TRACE.TRACE('Inicia m�todo mo_bocnfloadproductdata.destroyEntities ',12);

        GE_BOINSTANCECONTROL.INSTANCEHIERARCHY(ISBCURRENTINSTANCE,TYTBALLCHILDINSTANCES) ;
        NUINDEX := TYTBALLCHILDINSTANCES.LAST;
        GE_BOINSTANCECONTROL.CLEARINSTANCE(ISBCURRENTINSTANCE);
        WHILE NUINDEX IS NOT NULL LOOP
            UT_TRACE.TRACE('Limpia instancia '||TYTBALLCHILDINSTANCES(NUINDEX).SBINSTANCE,14);
            GE_BOINSTANCECONTROL.CLEARINSTANCE(TYTBALLCHILDINSTANCES(NUINDEX).SBINSTANCE);
            NUINDEX := TYTBALLCHILDINSTANCES.PRIOR(NUINDEX);
        END LOOP;

        UT_TRACE.TRACE('Termina m�todo mo_bocnfloadproductdata.destroyEntities ',12);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;


    













































    PROCEDURE REGISTERCOMPHIERARCHY
    (
        INUMAINCOMPINDEX        NUMBER,
        TBCURRENTHIERARCHY      IN OUT TYTBCOMPCHILDS,
        INULEVEL                NUMBER,
        ISBINSTANCENAME         IN  OUT GE_BOINSTANCECONTROL.STYSBNAME,
        INUMOTIVEID             NUMBER,
        ISBTAGMOTIV             MO_MOTIVE.TAG_NAME%TYPE,
        ISBTAGCHILDMOTCOMP      MO_COMPONENT.TAG_NAME%TYPE,
        INUPACKAGEID            NUMBER,
        IBLLOADNET              BOOLEAN,
        IOTBCHILDOFNODE         IN OUT TYTBCOMPCHILD,
        INUCOMPIDMOTFATHER      MO_COMPONENT.COMPONENT_ID%TYPE DEFAULT NULL,
        INUCONSECUTIVE          NUMBER DEFAULT 1
    )
    IS

        NUINDEX                 BINARY_INTEGER;
        NUCOMPIDMOT             NUMBER := NULL;

        NUCHILDCOMPIDMOT        NUMBER := NULL;
        SBTAGFORCOMPONENT       MO_COMPONENT.TAG_NAME%TYPE;
        BLLOADNET               BOOLEAN;
    BEGIN
        UT_TRACE.TRACE('Inicia el m�todo  mo_bocnfloadproductdata.registerCompHierarchy',12);
        SBTAGFORCOMPONENT   := NULL;

        IF INUMAINCOMPINDEX IS NULL THEN
            RETURN;
        END IF;

        NUINDEX := IOTBCHILDOFNODE.FIRST;
        IF INUMAINCOMPINDEX <> 0 THEN
            SBTAGFORCOMPONENT := ISBTAGCHILDMOTCOMP;
            BLLOADNET := IBLLOADNET;
        ELSE
            BLLOADNET := FALSE;
        END IF;

        WHILE NUINDEX IS NOT NULL LOOP
            UT_TRACE.TRACE('Indice '||NUINDEX||' '||INUCONSECUTIVE||' '||IOTBCHILDOFNODE(NUINDEX).NUCHILDINDEX,14);
            UT_TRACE.TRACE('El tag name para el componente '||NVL(SBTAGFORCOMPONENT, IOTBCHILDOFNODE(NUINDEX).SBTAGNAME ),10);

            IF (IOTBCHILDOFNODE(NUINDEX).NUCHILDINDEX IS NOT NULL) THEN
                MO_BOCNFLOADPRODUCTDATA.LOADCOMPONENT(INUPACKAGEID,
                      INUMOTIVEID,
                      ISBTAGMOTIV,
                      INUCOMPIDMOTFATHER,              
                      NVL(SBTAGFORCOMPONENT, IOTBCHILDOFNODE(NUINDEX).SBTAGNAME ), 
                      INUCONSECUTIVE,     
                      IOTBCHILDOFNODE(NUINDEX).NUSTATUSREGISTER ,    
                      NULL,               
                      IOTBCHILDOFNODE(NUINDEX).NUCHILDINDEX, 
                      IOTBCHILDOFNODE(NUINDEX).NUCATEGORYFORELEMS,   
                      FALSE,              
                      FALSE,              
                      NULL,               
                      NULL,               
                      NULL,               
                      NULL,               
                      NULL,               
                      NULL,               
                      NULL,               
                      BLLOADNET,          
                      ISBINSTANCENAME,    
                      NUCOMPIDMOT         
                      );

                IOTBCHILDOFNODE(NUINDEX).NUMOTCOMP := NUCOMPIDMOT;

                
                REGISTERCOMPHIERARCHY
                (
                 IOTBCHILDOFNODE(NUINDEX).NUCHILDINDEX,
                 TBCURRENTHIERARCHY ,
                 INULEVEL+1,
                 ISBINSTANCENAME,
                 INUMOTIVEID,
                 ISBTAGMOTIV,
                 ISBTAGCHILDMOTCOMP,
                 INUPACKAGEID,
                 IBLLOADNET,
                 TBCURRENTHIERARCHY(IOTBCHILDOFNODE(NUINDEX).NUCHILDINDEX),
                 NUCOMPIDMOT,
                 (INUCONSECUTIVE +1)
                );
            END IF;
            NUINDEX := IOTBCHILDOFNODE.NEXT(NUINDEX);
        END LOOP;

        TBCURRENTHIERARCHY(INUMAINCOMPINDEX) := IOTBCHILDOFNODE;
        UT_TRACE.TRACE('Termina el m�todo  mo_bocnfloadproductdata.registerCompHierarchy',12);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END REGISTERCOMPHIERARCHY;

    





















    PROCEDURE MOVECOMPREGISTER
    IS

        SBTAGMOTIV              PS_PRODUCT_MOTIVE.TAG_NAME%TYPE;
        SBTAGWITHADDMOTCMP      PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        SBTAGCHILDMOTCMP        PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        SBTAGWITHOUTADDMOTCMP   PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        NUPRODUCTID             PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        SBPROCESSINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;
        NUCOUNTMASTERCOMP       NUMBER;
        NUPRODUCTTYPEID         NUMBER;
        SBINITIALPROCESSDATE    GE_BOINSTANCECONTROL.STYSBVALUE;
        NUMOTIVEID              NUMBER := NULL;
        SBCURRENTINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;

        SBUSO                   GE_BOINSTANCECONTROL.STYSBVALUE;
        SBESTRATO               GE_BOINSTANCECONTROL.STYSBVALUE;
        SBESTRSOCI              GE_BOINSTANCECONTROL.STYSBVALUE;
        NUINDEX                 BINARY_INTEGER;

        PROCEDURE GETDATA
        IS
            SBPACKAGE       GE_BOINSTANCECONTROL.STYSBVALUE;
            SBPRODUCTID     GE_BOINSTANCECONTROL.STYSBVALUE;
            NUINDEX         BINARY_INTEGER;
        BEGIN

            UT_TRACE.TRACE('Inicia m�todo mo_bocnfloadproductdata.MoveCompRegister.getData ',12);

            GE_BOINSTANCECONTROL.GETFATHERCURRENTINSTANCE(SBPROCESSINSTANCE);

            
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
            
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
            NUPRODUCTID := TO_NUMBER(SBPRODUCTID);
            NUPACKAGEID := TO_NUMBER(SBPACKAGE);

            SBTAGMOTIV  := 'M_COMPMOVE';
            SBTAGWITHADDMOTCMP := 'C_MOVECOMP_COMPOWITHADDRESS';
            SBTAGCHILDMOTCMP := 'C_COMPMOVECHILD_COMP';

            NUCOUNTMASTERCOMP := PR_BCPRODUCT.FNUGETMASTERSCOMPCOUNT(NUPRODUCTID,GE_BOCONSTANTS.CSBNO);
            
            IF NUCOUNTMASTERCOMP = 1 THEN
                NUPRODUCTTYPEID := FNUGETPRODTYPBASIC(NUPRODUCTID);
            END IF;

            SBINITIALPROCESSDATE := NULL;

            IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',NUINDEX)
            THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',SBINITIALPROCESSDATE);
            END IF;

            IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'USE',NUINDEX)
            THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',SBINITIALPROCESSDATE);
            END IF;

            UT_TRACE.TRACE('Finaliza m�todo mo_bocnfloadproductdata.MoveCompRegister.getData ',12);

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;
        END;

    
























        PROCEDURE REGISTERADDRESSINFORMATION
        (
            TBCURRENTHIERARCHY     TYTBCOMPCHILDS,
            INUMAINCOMPINDEX       NUMBER,
            SBINSTANCENAME         GE_BOINSTANCECONTROL.STYSBVALUE
        )
        IS
            NUINDEX                 BINARY_INTEGER;
            NUCOMPIDMOT             NUMBER := NULL;

            PROCEDURE LOADENTITYADDRESS
            (
                INUADDRESSID        IN  NUMBER,
                INUPREMISEID        IN  NUMBER,
                INUMOTICOMPID       IN  NUMBER,
                ISBPROCESSINSTANCE  IN  GE_BOINSTANCECONTROL.STYSBNAME
            )
            IS
                RCPREMISECOMP       DAAB_PREMISE.STYAB_PREMISE;
                RCADDRESSCOMP       DAAB_ADDRESS.STYAB_ADDRESS;
                SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME;
                NUGEOGRAPLOCATIONID GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE;
                NUBUILDINGDIVISION  AB_BUILDING_DIVISION.BUILDING_DIVISION_ID%TYPE;
                SBDESCRIPTION       GE_BOINSTANCECONTROL.STYSBNAME;
            BEGIN
                UT_TRACE.TRACE('Inicia m�todo mo_bocnfloadproductdata.MoveCompRegister.registerAddressInformation.loadEntityAddress ',12);
                UT_TRACE.TRACE('inuPremiseId [ '||INUPREMISEID||' ]',12);
                UT_TRACE.TRACE('inuAddressId [ '||INUADDRESSID||' ]',12);
                UT_TRACE.TRACE('inuMotiCompId [ '||INUMOTICOMPID||' ]',12);
                UT_TRACE.TRACE('isbProcessInstance [ '||ISBPROCESSINSTANCE||' ]',12);


                IF(INUADDRESSID IS NOT NULL ) THEN
                    SBGROUP := CSBMO_ADDRESS_COMP||INUMOTICOMPID;
                    RCADDRESSCOMP := DAAB_ADDRESS.FRCGETRECORD(INUADDRESSID);
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBPROCESSINSTANCE, SBGROUP,
                                                        MO_BOCONSTANTS.CSBMO_COMPONENT,
                                                        'ADDRESS_ID',
                                                        RCADDRESSCOMP.ADDRESS_ID
                                                       );
               































                END IF;
                UT_TRACE.TRACE('Termina m�todo mo_bocnfloadproductdata.MoveCompRegister.registerAddressInformation.loadEntityAddress ',12);
            END;

            
            
            

            
            
            
            
            
            PROCEDURE VALCHANGEADDRESS
            (
                INUADDRESSID        IN  NUMBER,
                INUPREMISEID        IN  NUMBER,
                INUPRCOMPONENTID    IN  NUMBER
            )
            IS
                NUERROR3655          CONSTANT NUMBER := 3655;
                RFCOMPADDRESS        CONSTANTS.TYREFCURSOR;
                NUPRODUCTID          PR_COMPONENT.PRODUCT_ID%TYPE;
                NUOLDADDRESSID       AB_ADDRESS.ADDRESS_ID%TYPE;
                NUOLDPREMISEID       AB_PREMISE.PREMISE_ID%TYPE;
                NUERR                NUMBER;
                SBMESS               VARCHAR2(1024);

            BEGIN

                
                RFCOMPADDRESS := PR_BOADDRESS.FRFGETCOMPADDRESSID( INUPRCOMPONENTID );
          LOOP
			    FETCH RFCOMPADDRESS INTO NUPRODUCTID,NUOLDADDRESSID;
			         EXIT WHEN RFCOMPADDRESS%NOTFOUND;
		        END LOOP;
		        CLOSE RFCOMPADDRESS;

                
                






                IF (INUADDRESSID IS NOT NULL AND NUOLDADDRESSID IS NOT NULL) THEN

                    IF (INUADDRESSID = NUOLDADDRESSID) THEN
                        ERRORS.SETERROR(NUERROR3655 );
                        RAISE EX.CONTROLLED_ERROR;
                    END IF;

                END IF;

                











         END ;


        BEGIN
            UT_TRACE.TRACE('Inicia m�todo mo_bocnfloadproductdata.MoveCompRegister.registerAddressInformation ',10);
            
            IF INUMAINCOMPINDEX IS NULL THEN
                RETURN;
            END IF;

            NUINDEX := TBCURRENTHIERARCHY(INUMAINCOMPINDEX).FIRST;
            WHILE NUINDEX IS NOT NULL LOOP
                
                
                
                UT_TRACE.TRACE('antes IF nuIndex '||NUINDEX,12);
                UT_TRACE.TRACE('Status [ ... '||TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUSTATUSREGISTER,12);

                
                

                IF NVL(TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUSTATUSREGISTER,-1) = GNUREGSTATUSCOMP
                    AND DAPS_COMPONENT_TYPE.FSBGETIS_MOVEABLE (TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCOMPONENTTYPEID) = GE_BOCONSTANTS.CSBYES
                THEN
                    UT_TRACE.TRACE('nuIndex '||NUINDEX,12);
                    UT_TRACE.TRACE('tbChildOfNode(nuIndex).nuMotComp ['|| TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUMOTCOMP||' ]',12);
                    UT_TRACE.TRACE('tbChildOfNode(nuIndex).nuChildIndex ['||TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCHILDINDEX||' ]',12);



                    VALCHANGEADDRESS(TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUADDRESSID,
                                     TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUPREMISEID,
                                     TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCHILDINDEX

                    );

                    
                    LOADENTITYADDRESS(TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUADDRESSID ,
                                      TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUPREMISEID ,
                                      TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUMOTCOMP,
                                      SBINSTANCENAME
                                      );



                END IF;

                REGISTERADDRESSINFORMATION
                (
                    TBCURRENTHIERARCHY,
                    TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCHILDINDEX,
                    SBINSTANCENAME
                );
                NUINDEX := TBCURRENTHIERARCHY(INUMAINCOMPINDEX).NEXT(NUINDEX);
            END LOOP;

            UT_TRACE.TRACE('Termina m�todo mo_bocnfloadproductdata.MoveCompRegister.registerAddressInformation ',10);

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;
        END REGISTERADDRESSINFORMATION;

        




        PROCEDURE REGISTERMOVECOMP
        (
            ISBPROCESSINSTANCE  IN OUT  GE_BOINSTANCECONTROL.STYSBNAME ,
            INUMOTIVEID         IN      NUMBER
        )
        IS
            TBCURRENTHIERARCHY  TYTBCOMPCHILDS;

            TBSELECTEDCOMPS     GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
            SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;

            SBCURRRENDATA       GE_BOINSTANCECONTROL.STYSBVALUE;
            NUINDEX             BINARY_INTEGER;
            SBADDRESSID         GE_BOINSTANCECONTROL.STYSBVALUE;
            SBPREMISEID         GE_BOINSTANCECONTROL.STYSBVALUE;
            SBTAGNAME           GE_BOINSTANCECONTROL.STYSBVALUE;
            NUMAINCOMPINDEX     NUMBER;
            NUATTRIBUTE         GE_BOINSTANCECONTROL.STYNUINDEX;

        BEGIN
            GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBCURRENTINSTANCE);
            GE_BOINSTANCECONTROL.INSTANCECHILDS(SBCURRENTINSTANCE,TBSELECTEDCOMPS) ;

            NUINDEX := TBSELECTEDCOMPS.FIRST;
            UT_TRACE.TRACE('Cantidad instancias '||NUINDEX,12);
            
            WHILE NUINDEX IS NOT NULL LOOP

                
                SBADDRESSID:=NULL;
                SBPREMISEID:=NULL;

                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (
                                                            TBSELECTEDCOMPS(NUINDEX).SBINSTANCE,
                                                            NULL,
                                                            'MO_PROCESS',
                                                            'VALUE',
                                                            SBCURRRENDATA
                                                            );


                IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(TBSELECTEDCOMPS(NUINDEX).SBINSTANCE,NULL,'MO_PROCESS','ADDRESS_MAIN_COMP',NUATTRIBUTE) THEN
                    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (
                                                              TBSELECTEDCOMPS(NUINDEX).SBINSTANCE,
                                                              NULL,
                                                             'MO_PROCESS',
                                                             'ADDRESS_MAIN_COMP',
                                                              SBADDRESSID
                                                              );

                END IF;


                











                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (
                                                            TBSELECTEDCOMPS(NUINDEX).SBINSTANCE,
                                                            NULL,
                                                            'mo_component',
                                                            'TAG_NAME',
                                                            SBTAGNAME
                                                            );


                UT_TRACE.TRACE('Id del componente'||SBCURRRENDATA,12);
                UT_TRACE.TRACE('Id de direcci�n'|| SBADDRESSID,12);
                UT_TRACE.TRACE('Id de predio'|| SBPREMISEID,12);
                UT_TRACE.TRACE('tag name '|| SBTAGNAME,12);

                LOADHIERARCHYCOMP
                (
                    TO_NUMBER(SBCURRRENDATA),
                    TBCURRENTHIERARCHY,
                    TO_NUMBER(SBADDRESSID),
                    TO_NUMBER(SBPREMISEID),
                    SBTAGNAME,
                    NULL,
                    NULL,
                    GE_BOCONSTANTS.GETTRUE,
                    GE_BOCONSTANTS.GETYES,
                    NUMAINCOMPINDEX
                );
                NUINDEX := TBSELECTEDCOMPS.NEXT(NUINDEX);
            END LOOP;
            UT_TRACE.TRACE('salio del FOR  ',12);
            UT_TRACE.TRACE('tabla jerarquia  '||TBCURRENTHIERARCHY.COUNT,12);
            
            REGISTERCOMPHIERARCHY
            (
                    0,
                    TBCURRENTHIERARCHY  ,
                    0,
                    ISBPROCESSINSTANCE,
                    INUMOTIVEID,
                    SBTAGMOTIV,
                    SBTAGCHILDMOTCMP,
                    NUPACKAGEID,
                    FALSE,
                    TBCURRENTHIERARCHY(0)
            );

            
            REGISTERADDRESSINFORMATION
            (
                TBCURRENTHIERARCHY,
                0,
                ISBPROCESSINSTANCE
            );

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    GE_BOINSTANCECONTROL.DSPLYALLATTRIBUTESTACK;
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;
        END;

BEGIN
    UT_TRACE.TRACE('Inicia m�todo  mo_bocnfloadproductdata.MoveCompRegister',10);
    
    GETDATA;
    
    
    CREATEMOTIVEBYPRODUCT(NUPRODUCTID,      
                          NUPACKAGEID,      
                          SBTAGMOTIV,       
                          NULL,             
                          NULL,             
                          FALSE,            
                          NUPRODUCTTYPEID,  
                          NULL,             
                          NULL,             
                          NULL,             
                          GE_BOCONSTANTS.CSBYES,    
                          SBINITIALPROCESSDATE, 
                          SBPROCESSINSTANCE,
                          NUMOTIVEID        
                         );

    IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'USE',NUINDEX) AND
       GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'STRATUM',NUINDEX)
    THEN
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'USE',SBUSO);
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'STRATUM',SBESTRATO);
        
        CREATEMOBILLDACHANBYCHANSTRAT(NUPACKAGEID,SBUSO,SBESTRATO,NUPRODUCTID,SBPROCESSINSTANCE);
    END IF;


    
    REGISTERMOVECOMP
    (
        SBPROCESSINSTANCE,
        NUMOTIVEID
    );
    

    
    
    GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBCURRENTINSTANCE);
    DESTROYENTITIES(SBCURRENTINSTANCE);

    UT_TRACE.TRACE('Termina m�todo  mo_bocnfloadproductdata.MoveCompRegister',10);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
END;

    



















    PROCEDURE CREATMOTBYASOCPRDCHANG
    IS
        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
        NUPRODUCTID          MO_MOTIVE.PRODUCT_ID%TYPE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        SBTAGMOTICOMP        MO_COMPONENT.TAG_NAME%TYPE;
        SBSERVNUMB           MO_COMPONENT.SERVICE_NUMBER%TYPE;
        NUPRODORIGID         MO_COMPONENT.PRODUCT_ORIGIN_ID%TYPE;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByAsocPrdChang',10);

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);

        NUPACKAGEID := TO_NUMBER(SBPACKAGE);
        NUPRODUCTID := TO_NUMBER(SBPRODUCTID);

        SBTAGMOTICOMP:= CSBTAGIBACAMBPRDASOCINT;

        
        UT_TRACE.TRACE('Inicia - Creacion de motivo',12);

        
        CREATEMOTIVEBYPRODUCT(NUPRODUCTID,      
                              NUPACKAGEID,      
                              CSBTAGIBACAMBIOPRODASOC,       
                              NULL,             
                              NULL,             
                              TRUE,             
                              NULL,             
                              NULL,             
                              NULL,             
                              NULL,             
                              NULL,             
                              NULL,             
                              SBPROCESSINSTANCE,
                              NUMOTIVEID);      

        UT_TRACE.TRACE('Finaliza - Creacion de motivo',12);

        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'SERVICE_NUMBER',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'SERVICE_NUMBER',SBSERVNUMB);
        END IF;

        
        PR_BOPRODUCT.GETPRODUCTIDBYSERVNUM(SBSERVNUMB, NUPRODORIGID);

        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);

        UT_TRACE.TRACE('Inicia - Creacion de componentes',12);

     LOOP
    		FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
    		EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;

    		UT_TRACE.TRACE('nuMasterCompProdId'||NUMASTERCOMPPRODID,14);

            
            LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID, CSBTAGIBACAMBIOPRODASOC, NULL,
                                SBTAGMOTICOMP, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                                NUMASTERCOMPPRODID, NULL, TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NUPRODORIGID,FALSE,
                                SBPROCESSINSTANCE, NUCOMPIDMOT);
        END LOOP;

        UT_TRACE.TRACE('Finaliza - Creacion de componentes',12);
        CLOSE CURFMASTERCOMPONENTS;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByAsocPrdChang nuProdOrigId:['||NUPRODORIGID||']' ,10);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

    END CREATMOTBYASOCPRDCHANG;

     



















    PROCEDURE CREATMOTMOVEPRODASSO
        (
        INUPRODUCTTYPEID IN MO_MOTIVE.PRODUCT_TYPE_ID%TYPE,
        ISBINSTANCE      IN OUT GE_BOINSTANCECONTROL.STYSBNAME
        )
    IS
        SBPRODUCTID             GE_BOINSTANCECONTROL.STYSBVALUE;
        NUPRODUCTID             PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPRODASSOID            PR_PRODUCT.PRODUCT_ID%TYPE;
        SBFLAGCHANGBILLADDR     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPROCESSINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
        NUPRODUCTID := UT_CONVERT.FNUCHARTONUMBER(SBPRODUCTID);

        
        SBFLAGCHANGBILLADDR:= GE_BOCONSTANTS.CSBNO;

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG',NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'FLAG',SBFLAGCHANGBILLADDR);
        END IF;

        
        NUPRODASSOID:=PR_BOCNFPRODUCT.FNUGETPRODUCTBYPRODIDORIG(NUPRODUCTID,INUPRODUCTTYPEID);

        IF (NUPRODASSOID IS NOT NULL) THEN

            
            CREATMOTMOVEGEN( ISBINSTANCE,
                             NUPRODASSOID,

                             GE_BOCONSTANTS.CSBNO,
                             GE_BOCONSTANTS.CSBNO,
                             GE_BOCONSTANTS.CSBNO
                           );
        END IF;

     EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

    END;

    





















   PROCEDURE CREATMOTBYGENEQUICHAN
    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSUGGESTEDNUMBER    GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFLAGREQNUMBER      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPARTIALFLAG        GE_BOINSTANCECONTROL.STYSBVALUE := NULL;

		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;

        SBTAGMOTIV           MO_MOTIVE.TAG_NAME%TYPE;
        SBTAGMOTICOMP        MO_COMPONENT.TAG_NAME%TYPE;
        SBTAGMOTICOMPCHILD   MO_COMPONENT.TAG_NAME%TYPE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE := NULL;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
		NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        NUPRODUCTTYPEID      MO_MOTIVE.PRODUCT_TYPE_ID%TYPE;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUELEMCATECHILD      PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        SBCOMPONENTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE;
        SBCLASSSERVICE       GE_BOINSTANCECONTROL.STYSBVALUE;
        NUEQUIPMENTID        MO_EQUIPMENT.EQUIPMENT_ID%TYPE;
        SBSOURCE             GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCODE               GE_BOINSTANCECONTROL.STYSBVALUE;
        SBDESCRIPTION        GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByGenEquiChan',12);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
        NUPACKAGEID := TO_NUMBER(SBPACKAGE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
        NUPRODUCTID := TO_NUMBER(SBPRODUCTID);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);
        NUCOMPIDPROD := TO_NUMBER(SBCOMPONENTID);
        
        DAPR_COMPONENT.ACCKEY(NUCOMPIDPROD);

        SBTAGMOTIV := PS_BOPRODUCTMOTIVE.CSBTAGGENEQUICHANGE;
        SBTAGMOTICOMP := CSBTAGGENEQUICHANGE;
        SBTAGMOTICOMPCHILD := CSBTAGGENEQUICHANGECHILD;

        
        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGMOTICOMP);
        NUELEMCATECHILD:= PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGMOTICOMPCHILD);
        
        NUEQUIPMENTID:=MO_BOSEQUENCES.FNUGETSEQMO_EQUIPMENT;
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'SOURCE_',SBSOURCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'SERIAL_NUMBER',SBCODE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'DESCRIPTION',SBDESCRIPTION);

        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        
        CREATEMOTIVEBYPRODUCT(        NUPRODUCTID,      
                                      NUPACKAGEID,      
                                      SBTAGMOTIV,       
                                      NULL,             
                                      NULL,             
                                      TRUE,             
                                      NUPRODUCTTYPEID,  
                                      NULL,             
                                      NULL,             
                                      NULL,             
                                      SBPARTIALFLAG,    
                                      NULL,             
                                      SBPROCESSINSTANCE,
                                      NUMOTIVEID);      

        UT_TRACE.TRACE('Inicia - Creacion de componentes',5);

        FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUFATHCOMPONENTS(NUCOMPIDPROD) LOOP
            DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);

            IF(NUCOMPIDPROD = RCPRCOMPONENTLINK.CHILD_COMPONENT_ID ) THEN

                NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

                LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIV,NUFATHCOMPIDMOT,
                                SBTAGMOTICOMPCHILD,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATECHILD ,TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);

                
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, CSBMOEQUIPMENT||SBCOMPONENTID, CSBMOEQUIPMENT, 'EQUIPMENT_ID', NUEQUIPMENTID);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, CSBMOEQUIPMENT||SBCOMPONENTID, CSBMOEQUIPMENT, 'MOTIVE_ID', NUMOTIVEID);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, CSBMOEQUIPMENT||SBCOMPONENTID, CSBMOEQUIPMENT, 'COMPONENT_ID', NUCOMPIDMOT);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, CSBMOEQUIPMENT||SBCOMPONENTID, CSBMOEQUIPMENT, 'CODE', SBCODE);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, CSBMOEQUIPMENT||SBCOMPONENTID, CSBMOEQUIPMENT, 'SOURCE_', SBSOURCE);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, CSBMOEQUIPMENT||SBCOMPONENTID, CSBMOEQUIPMENT, 'DESCRIPTION', SBDESCRIPTION);

                NUCOMPONENTID := NUCOMPIDMOT;

            ELSE
                NUCOMPSTATUSID  :=  GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI);
                LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIV,NUFATHCOMPIDMOT,
                                SBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATEGORY ,TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);

            END IF;

            NUFATHCOMPIDMOT := NUCOMPIDMOT;
            NUCONSECUTIVE := NUCONSECUTIVE + 1;

        END LOOP;
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_1',SBCLASSSERVICE);
        
        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, MO_BOCONSTANTS.CSBMO_COMPONENT , 'CLASS_SERVICE_ID', SBCLASSSERVICE);
        
        
        IF NUMOTIVEID IS NULL THEN
            ERRORS.SETERROR(CNUERROR_110037);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByGenEquiChan',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;

            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYGENEQUICHAN;

    





















    PROCEDURE CREATMOTBYGENEQUIRECUP
    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSUGGESTEDNUMBER    GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFLAGREQNUMBER      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPARTIALFLAG        GE_BOINSTANCECONTROL.STYSBVALUE := NULL;

		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;

        SBTAGMOTIV           MO_MOTIVE.TAG_NAME%TYPE;
        SBTAGMOTICOMP        MO_COMPONENT.TAG_NAME%TYPE;
        SBTAGMOTICOMPCHILD   MO_COMPONENT.TAG_NAME%TYPE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE := NULL;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
		NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        NUPRODUCTTYPEID      MO_MOTIVE.PRODUCT_TYPE_ID%TYPE;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUELEMCATECHILD      PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        SBCOMPONENTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE;
        SBCLASSSERVICE       GE_BOINSTANCECONTROL.STYSBVALUE;
        NUEQUIPMENTID        MO_EQUIPMENT.EQUIPMENT_ID%TYPE;
        SBSOURCE             GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSERIALNUMBER       GE_BOINSTANCECONTROL.STYSBVALUE;
        SBDESCRIPTION        GE_BOINSTANCECONTROL.STYSBVALUE;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByGenEquiRecup',12);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
        NUPACKAGEID := TO_NUMBER(SBPACKAGE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
        NUPRODUCTID := TO_NUMBER(SBPRODUCTID);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);
        NUCOMPIDPROD := TO_NUMBER(SBCOMPONENTID);
        
        DAPR_COMPONENT.ACCKEY(NUCOMPIDPROD);

        SBTAGMOTIV := CSBTAGGENEQUIRECUPMO;
        SBTAGMOTICOMP:= CSBTAGGENEQUIRECUPCO;
        SBTAGMOTICOMPCHILD:= CSBTAGGENEQUIRECUPCHILD;

        
        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGMOTICOMP);
        NUELEMCATECHILD:= PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGMOTICOMPCHILD);

        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        
        CREATEMOTIVEBYPRODUCT(        NUPRODUCTID,      
                                      NUPACKAGEID,      
                                      SBTAGMOTIV,       
                                      NULL,             
                                      NULL,             
                                      TRUE,             
                                      NUPRODUCTTYPEID,  
                                      NULL,             
                                      NULL,             
                                      NULL,             
                                      SBPARTIALFLAG,    
                                      NULL,             
                                      SBPROCESSINSTANCE,
                                      NUMOTIVEID);      

        UT_TRACE.TRACE('Inicia - Creacion de componentes',5);

        FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUFATHCOMPONENTS(NUCOMPIDPROD) LOOP
            DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);

            IF(NUCOMPIDPROD = RCPRCOMPONENTLINK.CHILD_COMPONENT_ID ) THEN

                NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

                LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIV,NUFATHCOMPIDMOT,
                                SBTAGMOTICOMPCHILD,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATECHILD ,TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);
                NUCOMPONENTID := NUCOMPIDMOT;

            ELSE
                NUCOMPSTATUSID  :=  GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI);
                LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIV,NUFATHCOMPIDMOT,
                                SBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATEGORY ,TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);

            END IF;

            NUFATHCOMPIDMOT := NUCOMPIDMOT;
            NUCONSECUTIVE := NUCONSECUTIVE + 1;
        END LOOP;

        
        
        IF NUMOTIVEID IS NULL THEN
            ERRORS.SETERROR(CNUERROR_110037);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByGenEquiRecup',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;

            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTBYGENEQUIRECUP;

    




















    PROCEDURE DESACTSSCOMPREGISTER
    IS

        SBTAGMOTIV              PS_PRODUCT_MOTIVE.TAG_NAME%TYPE;
        SBTAGDESACTMOTCMP       PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        SBTAGCHILDMOTCMP        PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        SBTAGWITHOUTADDMOTCMP   PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        NUELEMCATEGORY          GE_ELE_CATEGORY_TYPE.CATEGORY_ID%TYPE ;
        NUELEMCATEGORYPARENT    GE_ELE_CATEGORY_TYPE.CATEGORY_ID%TYPE ;
        NUPRODUCTID             PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        SBPROCESSINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;
        NUCOUNTMASTERCOMP       NUMBER;
        NUPRODUCTTYPEID         NUMBER;
        SBINITIALPROCESSDATE    GE_BOINSTANCECONTROL.STYSBVALUE;
        NUMOTIVEID              NUMBER := NULL;
        SBCURRENTINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;

        SBUSO                   GE_BOINSTANCECONTROL.STYSBVALUE;
        SBESTRATO               GE_BOINSTANCECONTROL.STYSBVALUE;
        SBESTRSOCI              GE_BOINSTANCECONTROL.STYSBVALUE;
        NUINDEX                 BINARY_INTEGER;

        PROCEDURE GETDATA
        IS
            SBPACKAGE       GE_BOINSTANCECONTROL.STYSBVALUE;
            SBPRODUCTID     GE_BOINSTANCECONTROL.STYSBVALUE;
            NUINDEX         BINARY_INTEGER;
        BEGIN

            UT_TRACE.TRACE('Inicia m�todo mo_bocnfloadproductdata.MoveCompRegister.getData ',12);

            GE_BOINSTANCECONTROL.GETFATHERCURRENTINSTANCE(SBPROCESSINSTANCE);

            
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
            
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
            NUPRODUCTID := TO_NUMBER(SBPRODUCTID);
            NUPACKAGEID := TO_NUMBER(SBPACKAGE);

            SBTAGMOTIV  := CSBTAGGENDESACTSS;
            SBTAGDESACTMOTCMP := CSBTAGGENDESACTIVSS;
            SBTAGCHILDMOTCMP := CSBTAGGENDESACTIVSSCHILD;

            NUELEMCATEGORYPARENT:=PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGDESACTMOTCMP);
            NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGCHILDMOTCMP);

            NUCOUNTMASTERCOMP := PR_BCPRODUCT.FNUGETMASTERSCOMPCOUNT(NUPRODUCTID,GE_BOCONSTANTS.CSBNO);
            
            IF NUCOUNTMASTERCOMP = 1 THEN
                NUPRODUCTTYPEID := FNUGETPRODTYPBASIC(NUPRODUCTID);
            END IF;

            SBINITIALPROCESSDATE := NULL;

            IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',NUINDEX)
            THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',SBINITIALPROCESSDATE);
            END IF;

            IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'USE',NUINDEX)
            THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',SBINITIALPROCESSDATE);
            END IF;

            UT_TRACE.TRACE('Finaliza m�todo mo_bocnfloadproductdata.MoveCompRegister.getData ',12);

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;
        END;

    

       PROCEDURE REGISTERRETIRECOMP
        (
            TBCURRENTHIERARCHY     TYTBCOMPCHILDS,
            INUMAINCOMPINDEX       NUMBER,
            ISBRETIRETYPEID        GE_BOINSTANCECONTROL.STYSBVALUE,
            SBINSTANCENAME         IN OUT GE_BOINSTANCECONTROL.STYSBNAME
        )
        IS
            NUINDEX                 BINARY_INTEGER;
            NUCOMPIDMOT             NUMBER := NULL;


        BEGIN
            UT_TRACE.TRACE('Inicia m�todo mo_bocnfloadproductdata.DesactSSCompRegister.registerRetireComp ',10);
            
            IF INUMAINCOMPINDEX IS NULL THEN
                RETURN;
            END IF;

            NUINDEX := TBCURRENTHIERARCHY(INUMAINCOMPINDEX).FIRST;
            WHILE NUINDEX IS NOT NULL LOOP
                
                
                
                UT_TRACE.TRACE('antes IF nuIndex '||NUINDEX,12);
                UT_TRACE.TRACE('Status [ ... '||TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUSTATUSREGISTER,12);

                
                

                IF NVL(TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUSTATUSREGISTER,-1) = GNUREGSTATUSCOMP
                    AND DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCOMPONENTTYPEID) = GE_BOCONSTANTS.CSBYES
                THEN
                    UT_TRACE.TRACE('nuIndex '||NUINDEX,12);
                    UT_TRACE.TRACE('tbChildOfNode(nuIndex).nuMotComp ['|| TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUMOTCOMP||' ]',12);
                    UT_TRACE.TRACE('tbChildOfNode(nuIndex).nuChildIndex ['||TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCHILDINDEX||' ]',12);


                     CREATEMORETIRECOMP(TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUMOTCOMP,
                                        ISBRETIRETYPEID,
                                        SBINSTANCENAME);

                END IF;

                REGISTERRETIRECOMP
                    (
                    TBCURRENTHIERARCHY,
                    TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCHILDINDEX,
                    ISBRETIRETYPEID,
                    SBINSTANCENAME
                    );
                NUINDEX := TBCURRENTHIERARCHY(INUMAINCOMPINDEX).NEXT(NUINDEX);
            END LOOP;

            UT_TRACE.TRACE('Termina m�todo mo_bocnfloadproductdata.DesactSSCompRegister.registerRetireComp ',10);

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;
        END REGISTERRETIRECOMP;

        PROCEDURE REGSPECIALSERVCOMP
        (
            TBCURRENTHIERARCHY     TYTBCOMPCHILDS,
            INUMAINCOMPINDEX       NUMBER,
            SBINSTANCENAME         IN OUT GE_BOINSTANCECONTROL.STYSBNAME
        )
        IS
            NUINDEX                 BINARY_INTEGER;
            NUCOMPIDMOT             NUMBER := NULL;


        BEGIN
            UT_TRACE.TRACE('Inicia m�todo mo_bocnfloadproductdata.DesactSSCompRegister.regSpecialServComp ',10);
            
            IF INUMAINCOMPINDEX IS NULL THEN
                RETURN;
            END IF;

            NUINDEX := TBCURRENTHIERARCHY(INUMAINCOMPINDEX).FIRST;
            WHILE NUINDEX IS NOT NULL LOOP
                
                
                
                UT_TRACE.TRACE('antes IF nuIndex '||NUINDEX,12);
                UT_TRACE.TRACE('Status [ ... '||TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUSTATUSREGISTER,12);

                
                
               IF NVL(TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUSTATUSREGISTER,-1) = GNUREGSTATUSCOMP
                  AND DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCOMPONENTTYPEID) = GE_BOCONSTANTS.CSBYES
                THEN
                    UT_TRACE.TRACE('nuIndex '||NUINDEX,12);
                    UT_TRACE.TRACE('tbChildOfNode(nuIndex).nuMotComp ['|| TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUMOTCOMP||' ]',12);
                    UT_TRACE.TRACE('tbChildOfNode(nuIndex).nuChildIndex ['||TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCHILDINDEX||' ]',12);


                     LOADSPECIALSERVICE(TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCHILDINDEX,
                                        TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUMOTCOMP,
                                        SBINSTANCENAME);

                END IF;

                REGSPECIALSERVCOMP
                    (
                    TBCURRENTHIERARCHY,
                    TBCURRENTHIERARCHY(INUMAINCOMPINDEX)(NUINDEX).NUCHILDINDEX,
                    SBINSTANCENAME
                    );
                NUINDEX := TBCURRENTHIERARCHY(INUMAINCOMPINDEX).NEXT(NUINDEX);
            END LOOP;

            UT_TRACE.TRACE('Termina m�todo mo_bocnfloadproductdata.DesactSSCompRegister.regSpecialServComp ',10);

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;
        END REGSPECIALSERVCOMP;

    


        PROCEDURE REGISTERDESACTSSCOMP
            (
            ISBPROCESSINSTANCE  IN OUT  GE_BOINSTANCECONTROL.STYSBNAME ,
            INUMOTIVEID         IN      NUMBER
            )
        IS
            TBCURRENTHIERARCHY  TYTBCOMPCHILDS;

            TBSELECTEDCOMPS     GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
            SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;

            SBCURRRENDATA       GE_BOINSTANCECONTROL.STYSBVALUE;
            NUINDEX             BINARY_INTEGER;
            SBADDRESSDATA       GE_BOINSTANCECONTROL.STYSBVALUE;
            SBADDRESSCLASS      GE_BOINSTANCECONTROL.STYSBVALUE;
            SBTAGNAME           GE_BOINSTANCECONTROL.STYSBVALUE;
            NUMAINCOMPINDEX     NUMBER;

        BEGIN
            GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBCURRENTINSTANCE);
            GE_BOINSTANCECONTROL.INSTANCECHILDS(SBCURRENTINSTANCE,TBSELECTEDCOMPS) ;

            IF (TBSELECTEDCOMPS.COUNT=0) THEN
                GE_BOERRORS.SETERRORCODE(CNUERROR_113442);
            END IF;

            NUINDEX := TBSELECTEDCOMPS.FIRST;
            
            WHILE NUINDEX IS NOT NULL LOOP
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (
                                                            TBSELECTEDCOMPS(NUINDEX).SBINSTANCE,
                                                            NULL,
                                                            'MO_PROCESS',
                                                            'COMPONENT_ID',
                                                            SBCURRRENDATA
                                                            );

                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (
                                                            TBSELECTEDCOMPS(NUINDEX).SBINSTANCE,
                                                            NULL,
                                                            'mo_component',
                                                            'TAG_NAME',
                                                            SBTAGNAME
                                                            );

                LOADHIERARCHYCOMP
                    (
                    TO_NUMBER(SBCURRRENDATA),
                    TBCURRENTHIERARCHY,
                    NULL,
                    NULL,
                    SBTAGNAME,
                    NUELEMCATEGORY,
                    NUELEMCATEGORYPARENT,
                    GE_BOCONSTANTS.GETTRUE,
                    GE_BOCONSTANTS.GETNO,
                    NUMAINCOMPINDEX
                    );
                NUINDEX := TBSELECTEDCOMPS.NEXT(NUINDEX);
            END LOOP;

            
            REGISTERCOMPHIERARCHY
                    (
                    0,
                    TBCURRENTHIERARCHY  ,
                    0,
                    ISBPROCESSINSTANCE,
                    INUMOTIVEID,
                    SBTAGMOTIV,
                    SBTAGCHILDMOTCMP,
                    NUPACKAGEID,
                    TRUE,
                    TBCURRENTHIERARCHY(0)
                    );

            
            REGISTERRETIRECOMP
                (
                TBCURRENTHIERARCHY,
                0,
                1,
                ISBPROCESSINSTANCE
                );

             
            REGSPECIALSERVCOMP
                (
                TBCURRENTHIERARCHY,
                0,
                ISBPROCESSINSTANCE
                );

            EXCEPTION
                WHEN EX.CONTROLLED_ERROR THEN
                    RAISE EX.CONTROLLED_ERROR;
                WHEN OTHERS THEN
                    ERRORS.SETERROR;
                    RAISE EX.CONTROLLED_ERROR;
        END;

    BEGIN
        UT_TRACE.TRACE('Inicia m�todo  mo_bocnfloadproductdata.DesactSSCompRegister',10);
        
        GETDATA;

        
        CREATEMOTIVEBYPRODUCT(NUPRODUCTID,      
                              NUPACKAGEID,      
                              SBTAGMOTIV,       
                              NULL,             
                              NULL,             
                              TRUE,            
                              NUPRODUCTTYPEID,  
                              NULL,             
                              NULL,             
                              NULL,             
                              GE_BOCONSTANTS.CSBYES,    
                              SBINITIALPROCESSDATE, 
                              SBPROCESSINSTANCE,
                              NUMOTIVEID        
                             );


        
        REGISTERDESACTSSCOMP
            (
            SBPROCESSINSTANCE,
            NUMOTIVEID
            );

        
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBCURRENTINSTANCE);
        DESTROYENTITIES(SBCURRENTINSTANCE);

        UT_TRACE.TRACE('Termina m�todo  mo_bocnfloadproductdata.DesactSSCompRegister',10);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;

    

















    PROCEDURE CREATEMOPBXCOMPONENT
        (
        INUCOMPONENTID        IN        MO_COMPONENT.COMPONENT_ID%TYPE,
        ISBSEARCHMODE         IN        MO_PBX_COMPONENT.SEARCH_MODE%TYPE,
        ISBRATING             IN        MO_PBX_COMPONENT.RATING%TYPE,
        ISBOPERMODE           IN        MO_PBX_COMPONENT.OPERATION_MODE%TYPE,
        INUCOMPPILOTID        IN        MO_PBX_COMPONENT.COMP_PILOT_ID%TYPE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME
        )
    IS
        SBGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMoPBXComponent',12);
        SBGROUP := CSBMO_PBX_COMPONENT||INUCOMPONENTID;
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT ,'COMPONENT_ID',INUCOMPONENTID );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'OPERATION_MODE', ISBOPERMODE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'RATING', ISBRATING );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'SEARCH_MODE', ISBSEARCHMODE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'COMP_PILOT_ID',INUCOMPPILOTID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'SEQUENCE_PBX',GE_BOGENERALUTIL.GETNEXTCOUNTER);
        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMoPBXComponent',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMOPBXCOMPONENT;


    

















    PROCEDURE LOADPBXCOMPONENT
        (
        INUCOMPONENTID        IN       PR_COMPONENT.COMPONENT_ID%TYPE,
        INUMOTICOMPID         IN       MO_COMPONENT.COMPONENT_ID%TYPE,
        IOSBPROCESSINSTANCE IN  OUT    GE_BOINSTANCECONTROL.STYSBNAME
        )
    IS
        RCPBXCOMPONENT      DAPR_PBX_COMPONENT.STYPR_PBX_COMPONENT;
        SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadPBXComponent',12);

        
        IF (NOT DAPR_PBX_COMPONENT.FBLEXIST(INUCOMPONENTID)) THEN
            RETURN;
        END IF;

        
        DAPR_PBX_COMPONENT.GETRECORD(INUCOMPONENTID,RCPBXCOMPONENT);

        SBGROUP := CSBMO_PBX_COMPONENT||INUMOTICOMPID;
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT ,'COMPONENT_ID',INUMOTICOMPID );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'OPERATION_MODE', RCPBXCOMPONENT.OPERATION_MODE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'RATING', RCPBXCOMPONENT.RATING );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'SEARCH_MODE', RCPBXCOMPONENT.SEARCH_MODE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'COMP_PILOT_ID',RCPBXCOMPONENT.COMP_PILOT_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, CSBMO_PBX_COMPONENT, 'SEQUENCE_PBX',RCPBXCOMPONENT.SEQUENCE_PBX);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadPBXComponent',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    


















    PROCEDURE CREATCOMPPBXAREQUEST

    IS
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
		NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFATHERINSTANCE     GE_BOINSTANCECONTROL.STYSBNAME;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBTAGMOTIVE          PS_PRODUCT_MOTIVE.TAG_NAME%TYPE;
        SBTAGMOTICOMP        PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        SBMOTIVEID           GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODPILOTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        NUPRODPILOTID        PR_PRODUCT.PRODUCT_ID%TYPE;
        NUCOMPPILOTID        PR_COMPONENT.COMPONENT_ID%TYPE;
        SBDIRECTIONALITY     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBSEARCHMODE         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBRATING             GE_BOINSTANCECONTROL.STYSBVALUE;
        NUPRODUCTTYPEID      PR_PRODUCT.PRODUCT_TYPE_ID%TYPE;
        BLLOADCHILD          BOOLEAN;

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.creatCompPBXARequest',12);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

        
        GE_BOINSTANCECONTROL.GETFATHERCURRENTINSTANCE(SBFATHERINSTANCE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBFATHERINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
        NUPACKAGEID:=UT_CONVERT.FNUCHARTONUMBER(SBPACKAGE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, MO_BOCONSTANTS.CSBMO_MOTIVE, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
        NUPRODUCTID:=UT_CONVERT.FNUCHARTONUMBER(SBPRODUCTID);

        
        NUPRODUCTTYPEID:= DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(NUPRODUCTID);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_MOTIVE,MO_BOCONSTANTS.CSBMOTIVE_ID,SBMOTIVEID);
        NUMOTIVEID :=UT_CONVERT.FNUCHARTONUMBER(SBMOTIVEID);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,
                                                  NULL, PR_BOCONSTANTS.PR_PRODUCT,
                                                  PR_BOCONSTANTS.PRODUCT_ID,SBPRODPILOTID);
        NUPRODPILOTID :=UT_CONVERT.FNUCHARTONUMBER(SBPRODPILOTID);

        
        NUCOMPPILOTID:= PR_BCPRODUCT.FNUGETMAINCOMPONENTID(NUPRODPILOTID);


        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'DIRECTIONALITY', NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS,'DIRECTIONALITY', SBDIRECTIONALITY);
        END IF;

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'VARCHAR_1', NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS,'VARCHAR_1', SBSEARCHMODE);
        END IF;

        
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, NULL, CSBMOPROCESS, 'VARCHAR_2', NUINDEX) THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS,'VARCHAR_2', SBRATING);
        END IF;

        
        SBTAGMOTICOMP:=CSBTAGGEN;

        
        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGMOTICOMP);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_MOTIVE, 'TAG_NAME', SBTAGMOTIVE);

        
        CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);

        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        UT_TRACE.TRACE('Inicia - Creacion de componentes',5);
        LOOP
        	FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
        	EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;

            
        	DAPR_COMPONENT.GETRECORD(NUMASTERCOMPPRODID, RCCOMPBYPROD);

            
            IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                AND
                (PS_BCPROD_COMPOSITION.FSBISMAINCOMPTYINPRTY(RCCOMPBYPROD.COMPONENT_TYPE_ID,NUPRODUCTTYPEID)= GE_BOCONSTANTS.GETYES)
            THEN

                
                LOADCOMPONENT(  NUPACKAGEID,NUMOTIVEID, SBTAGMOTIVE, NULL,
                                SBTAGMOTICOMP, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                                NUMASTERCOMPPRODID, NUELEMCATEGORY, TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE, NUCOMPIDMOT);

                
                BLLOADCHILD:= GE_BOCONSTANTS.GETTRUE;

                
                
                IF (DAPR_PBX_COMPONENT.FBLEXIST(NUMASTERCOMPPRODID)) THEN

                     
                     LOADPBXCOMPONENT(NUMASTERCOMPPRODID,NUCOMPIDMOT,SBPROCESSINSTANCE);

                     
                     IF (NUMASTERCOMPPRODID=NUCOMPPILOTID) THEN
                        BLLOADCHILD:= GE_BOCONSTANTS.GETFALSE;
                     END IF;
                ELSE
                    
                    CREATEMOPBXCOMPONENT(NUCOMPIDMOT,SBSEARCHMODE, SBRATING,SBDIRECTIONALITY,NUCOMPPILOTID,SBPROCESSINSTANCE);
                END  IF;


                NUFATHCOMPIDMOT := NUCOMPIDMOT;
                NUCONSECUTIVE := NUCONSECUTIVE + 1;

            	
            	IF  BLLOADCHILD   THEN

                    FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP

                        DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);

                        
                        IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                            AND
                            (NUFATHCOMPIDMOT IS NOT NULL)
                        THEN
                            
                           GETMOFATHERCOMPONENT(SBPROCESSINSTANCE,RCPRCOMPONENTLINK,NUFATHCOMPIDMOT);
                            
                            LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIVE,NUFATHCOMPIDMOT,
                                            SBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                            RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATEGORY , TRUE,
                                            FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);

                            
                            LOADSPECIALSERVICE(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID,NUCOMPIDMOT,SBPROCESSINSTANCE);

                            NUCONSECUTIVE := NUCONSECUTIVE + 1;
                        END IF;

                    END LOOP;

                END IF;

            END IF;

        END LOOP;

        UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);

        CLOSE CURFMASTERCOMPONENTS;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.creatCompPBXARequest',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFMASTERCOMPONENTS%ISOPEN THEN
                	CLOSE CURFMASTERCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATCOMPPBXAREQUEST;

    

















    PROCEDURE CREATEMOTDESPROGPBXA
    IS
        SBPROCESSINSTANCE GE_BOINSTANCECONTROL.STYSBNAME;
        SBFATHERINSTANCE  GE_BOINSTANCECONTROL.STYSBNAME;
        RCCOMPBYPROD      DAPR_COMPONENT.STYPR_COMPONENT;
        SBPACKAGE         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        NUPACKAGEID       MO_PACKAGES.PACKAGE_ID%TYPE;
        NUPRODUCTID       PR_PRODUCT.PRODUCT_ID%TYPE;
        SBTAGMOTIV        PS_PRODUCT_MOTIVE.TAG_NAME%TYPE;
        SBTAGMOTICOMP     PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        NUELEMCATEGORY    PS_PROD_MOTIVE_COMP.ELEMENT_CATEGORY_ID%TYPE;
        NUCOMPSTATUSID    PS_MOTIVE_STATUS.MOTIVE_STATUS_ID%TYPE;
        NUCOMPPILOTID     PR_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPIDMOT       MO_COMPONENT.COMPONENT_ID%TYPE;
        NUFATHCOMPIDMOT   MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCONSECUTIVE     NUMBER;
        NUMOTIVEID        MO_MOTIVE.MOTIVE_ID%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.createMotDesprogPBXA',12);

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
        NUPACKAGEID:=UT_CONVERT.FNUCHARTONUMBER(SBPACKAGE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE,
                                                  NULL, PR_BOCONSTANTS.PR_PRODUCT,
                                                  PR_BOCONSTANTS.PRODUCT_ID ,SBPRODUCTID);
        NUPRODUCTID:=UT_CONVERT.FNUCHARTONUMBER(SBPRODUCTID);

        
        SBTAGMOTIV := CSBTAGGENDESPROGPBXMO;

        
        SBTAGMOTICOMP:= CSBTAGGENDESPROGPBXCO;

        
        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGMOTICOMP);

        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        
        NUCOMPPILOTID:= PR_BCPRODUCT.FNUGETMAINCOMPONENTID(NUPRODUCTID);

         UT_TRACE.TRACE('Inicia - Creacion de componentes',5);

        
        FOR RCPBXCOMPONENT IN PR_BCPBXCOMPONENT.CUCOMPPBXBYCOMPPILOT(NUCOMPPILOTID) LOOP

            
            DAPR_COMPONENT.GETRECORD(RCPBXCOMPONENT.COMPONENT_ID, RCCOMPBYPROD);

            
            IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES) THEN

                
                CREATEMOTIVEBYPRODUCT(RCCOMPBYPROD.PRODUCT_ID,      
                                      NUPACKAGEID,      
                                      SBTAGMOTIV,       
                                      NULL,             
                                      NULL,             
                                      TRUE,             
                                      NULL,  
                                      NULL,             
                                      NULL,             
                                      NULL,             
                                      NULL,    
                                      NULL,             
                                      SBPROCESSINSTANCE,
                                      NUMOTIVEID);
                NUCONSECUTIVE:=1;
                
                LOADCOMPONENT(  NUPACKAGEID,NUMOTIVEID, SBTAGMOTIV, NULL,
                                SBTAGMOTICOMP, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                                RCCOMPBYPROD.COMPONENT_ID, NUELEMCATEGORY, TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE, NUCOMPIDMOT);

                
                LOADPBXCOMPONENT(RCCOMPBYPROD.COMPONENT_ID,NUCOMPIDMOT,SBPROCESSINSTANCE);

                NUCONSECUTIVE := NUCONSECUTIVE + 1;

                
                FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(RCCOMPBYPROD.COMPONENT_ID) LOOP
                    
                    DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);

                    
                    GETMOFATHERCOMPONENT(SBPROCESSINSTANCE,RCPRCOMPONENTLINK,NUFATHCOMPIDMOT);

                    
                    IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                        AND
                        (NUFATHCOMPIDMOT IS NOT NULL)
                    THEN
                        
                        LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIV,NUFATHCOMPIDMOT,
                                    SBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                    RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATEGORY , TRUE,
                                    FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);

                        
                        LOADSPECIALSERVICE(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID,NUCOMPIDMOT,SBPROCESSINSTANCE);

                        NUCONSECUTIVE := NUCONSECUTIVE + 1;
                    END IF;

                END LOOP;

            END IF;

        END LOOP;

        UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.createMotDesprogPBXA',12);
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMOTDESPROGPBXA;


    PROCEDURE SETPROVISIONBASEID
    (
        ISBPROCESSINSTANCE       IN      GE_BOINSTANCECONTROL.STYSBNAME,
        IBLLOADTECHNOLOGY        IN      BOOLEAN
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.SetProvisionBaseId',10);

        
        SETPROVISIONBASEID(NULL,NULL,ISBPROCESSINSTANCE,IBLLOADTECHNOLOGY);

        UT_TRACE.TRACE('Termina MO_BOCnfLoadProductData.SetProvisionBaseId',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    






















    PROCEDURE CREATMOTCREDLIMICHANG
    IS

        SBPACKAGE            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;



		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;

        SBTAGMOTIV           MO_MOTIVE.TAG_NAME%TYPE;
        SBTAGMOTICOMP        MO_COMPONENT.TAG_NAME%TYPE;
        SBTAGMOTICOMPCHILD   MO_COMPONENT.TAG_NAME%TYPE;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE := NULL;
        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
        RCPRCOMPONENTLINK    DAPR_COMPONENT_LINK.STYPR_COMPONENT_LINK;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
		NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        NUPRODUCTTYPEID      MO_MOTIVE.PRODUCT_TYPE_ID%TYPE;
        SBCOMPONENTID        GE_BOINSTANCECONTROL.STYSBVALUE;
        NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE;
        SBCREDITLIMIT        GE_BOINSTANCECONTROL.STYSBVALUE;
        NUCREDITLIMIT        MO_MOTIVE.CREDIT_LIMIT%TYPE;
    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotCredLimiChang',12);

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGE);
        NUPACKAGEID := UT_CONVERT.FNUCHARTONUMBER(SBPACKAGE);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL, CSBMOPROCESS,'VALUE_9',SBCREDITLIMIT);
        NUCREDITLIMIT   := UT_CONVERT.FNUCHARTONUMBER(SBCREDITLIMIT);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
        NUPRODUCTID := UT_CONVERT.FNUCHARTONUMBER(SBPRODUCTID);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);
        NUCOMPIDPROD := UT_CONVERT.FNUCHARTONUMBER(SBCOMPONENTID);

        
        SBTAGMOTIV := 'M_GENER_CREDLIMITCHANGE';
        SBTAGMOTICOMP:= 'C_GENER_CREDLIMITCHANGE';

        DAPR_COMPONENT.ACCKEY(NUCOMPIDPROD);
        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(SBTAGMOTICOMP);

        
        CREATEMOTIVEBYPRODUCT
        (
            NUPRODUCTID,      
            NUPACKAGEID,      
            SBTAGMOTIV,       
            NULL,             
            NULL,             
            TRUE,             
            NUPRODUCTTYPEID,  
            NULL,             
            NULL,             
            NULL,             
            NULL,             
            NULL,             
            SBPROCESSINSTANCE,
            NUMOTIVEID,       
            NUCREDITLIMIT     
        );

        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        
        
        LOADCOMPONENT(NUPACKAGEID,NUMOTIVEID,SBTAGMOTIV,NULL,
                      SBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                      NUCOMPIDPROD, NUELEMCATEGORY ,TRUE,
                      FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);

        
        
        IF NUMOTIVEID IS NULL THEN
            ERRORS.SETERROR(CNUERROR_110037);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotCredLimiChang',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTCREDLIMICHANG;


    






























    PROCEDURE CREATEMOTBYCLASSCHANGETOBORDER
    IS
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID           MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        SBCOMPONENTID           GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCLASSSERVICEID        GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPROCESSINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;
        SBPACKAGEID             GE_BOINSTANCECONTROL.STYSBVALUE;
        NUCOMPSTATUSID          MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUELEMCATEGORY          PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        NUCOMPONENTIDFATHER     MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCOMPIDMOT             MO_COMPONENT.COMPONENT_ID%TYPE;
        CSBGEN_CAM_CL_EXT       CONSTANT VARCHAR2(100) := 'M_GENER_CAMBIO_CLASE_EXTREMO';
        CSBGEN_CAM_CL_EXT_COMP  CONSTANT VARCHAR2(100) := 'C_GENER_CAMBIO_CLASE_EXTREMO';
        NUEQUIPMENTID           MO_EQUIPMENT.EQUIPMENT_ID%TYPE;
   BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMotByClassChangeToBorder',12);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_1',SBCLASSSERVICEID);

        
        CREATMOTBYDATACHANG (CSBGEN_CAM_CL_EXT, CSBGEN_CAM_CL_EXT_COMP, NUMOTIVEID, NUCOMPONENTID );

        NUCOMPONENTIDFATHER := NUCOMPONENTID;

        
        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, MO_BOCONSTANTS.CSBMO_COMPONENT , 'CLASS_SERVICE_ID', SBCLASSSERVICEID);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGEID);
        
        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(CSBGEN_CAM_CL_EXT_COMP);
        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);

        
        
        FOR RCCOMPBYPROD IN PR_BCCOMPONENT.CUCHILDCOMPONENTS(SBCOMPONENTID) LOOP
            UT_TRACE.TRACE('Componente['||RCCOMPBYPROD.COMPONENT_ID||'] Tipo ['||RCCOMPBYPROD.COMPONENT_TYPE_ID||']',12);

            LOADCOMPONENT   (
                            TO_NUMBER(SBPACKAGEID),
                            NUMOTIVEID,
                            CSBGEN_CAM_CL_EXT,
                            NUCOMPONENTIDFATHER,    
                            CSBGEN_CAM_CL_EXT_COMP,
                            GNUCOMPONENTNUMBER,      
                            NUCOMPSTATUSID,     
                            NULL,     
                            RCCOMPBYPROD.COMPONENT_ID,
                            NUELEMCATEGORY,     
                            TRUE,               
                            FALSE,              
                            NULL,               
                            NULL,               
                            NULL,               
                            NULL,               
                            NULL,               
                            NULL,               
                            NULL,               
                            TRUE,               
                            SBPROCESSINSTANCE,  
                            NUCOMPIDMOT         
                            );

            
            
            IF (RCCOMPBYPROD.COMPONENT_TYPE_ID = PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEQUIPO  ) THEN
               FOR RCPREQUIPMENT IN PR_BCEQUIPMENT.CUEQUIPMENTSBYCOMP(RCCOMPBYPROD.COMPONENT_ID) LOOP
                    NUEQUIPMENTID := MO_BOSEQUENCES.FNUGETSEQMO_EQUIPMENT;
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_EQUIPMENT' , 'EQUIPMENT_ID', NUEQUIPMENTID);
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_EQUIPMENT' , 'EQUIPMENT_TYPE_ID', NULL);
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_EQUIPMENT' , 'MOTIVE_ID', NUMOTIVEID);
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_EQUIPMENT' , 'DESCRIPTION', NULL);
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_EQUIPMENT' , 'COMPONENT_ID', NUCOMPIDMOT);
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_EQUIPMENT' , 'CODE', RCPREQUIPMENT.CODE);
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_EQUIPMENT' , 'SOURCE_', RCPREQUIPMENT.SOURCE_);
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_EQUIPMENT' , 'IS_MAIN', RCPREQUIPMENT.IS_MAIN);
                   UT_TRACE.TRACE('Equipment Instanciado EquipmentID['||NUEQUIPMENTID||']',12);
               END LOOP;
            END IF;

            NUCOMPONENTIDFATHER := NUCOMPIDMOT;
            GNUCOMPONENTNUMBER := GNUCOMPONENTNUMBER + 1;

        END LOOP;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMotByClassChangeToBorder',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMOTBYCLASSCHANGETOBORDER;


    PROCEDURE CREATEMOTBYDATACHANGETOCHANNEL
    IS
        NUMOTIVEID              MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID           MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        SBCOMPONENTID           GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCLASSSERVICEIDNEW     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPROTOCOLID            GE_BOINSTANCECONTROL.STYSBVALUE;
        SBBANDWIDTHID           GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCONNECTIONTYPEID      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPROCESSINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;
        NUPACKAGEID             MO_PACKAGES.PACKAGE_ID%TYPE;
        NUCOMPSTATUSID          MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUELEMCATEGORY          PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        NUCOMPIDMOT             MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCLASSSERVICEIDCURRENT PS_CLASS_SERVICE.CLASS_SERVICE_ID%TYPE;
        CSBGEN_CAM_DT_CAN       CONSTANT VARCHAR2(100) := 'M_GENER_CAMBIO_DATOS_CANAL';
        CSBGEN_CAM_DT_CAN_COMP  CONSTANT VARCHAR2(100) := 'C_GENER_CAMBIO_DATOS_CANAL';
        BLVALUECHG              BOOLEAN := FALSE;
        NUDATATRANSMISSIONID    MO_DATA_TRANSMISSION.DATA_TRANSMISSION_ID%TYPE;
        RCDATATRANSMISSION      DAPR_DATA_TRANSMISSION.STYPR_DATA_TRANSMISSION;
   BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreateMotByDataChangeToChannel',12);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_COMPONENT, PR_BOCONSTANTS.COMPONENT_ID, SBCOMPONENTID);

        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_1',SBCLASSSERVICEIDNEW);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_2',SBPROTOCOLID);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_3',SBBANDWIDTHID);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'VALUE_4',SBCONNECTIONTYPEID);

        
        NUCLASSSERVICEIDCURRENT := DAPR_COMPONENT.FNUGETCLASS_SERVICE_ID(TO_NUMBER(SBCOMPONENTID));

        
        IF (NUCLASSSERVICEIDCURRENT <> NVL(SBCLASSSERVICEIDNEW,NUCLASSSERVICEIDCURRENT)) THEN
            BLVALUECHG := TRUE;
        END IF;

        
        FOR REC IN PR_BCDATA_TRANSMISSION.CUDATATRANSBYCOMPID(SBCOMPONENTID) LOOP
            RCDATATRANSMISSION := REC;
        END LOOP;

        
        IF (RCDATATRANSMISSION.PROTOCOL_ID <> NVL(SBPROTOCOLID,RCDATATRANSMISSION.PROTOCOL_ID)) THEN
            BLVALUECHG := TRUE;
        END IF;

        
        IF (RCDATATRANSMISSION.BANDWIDTH_ID <> NVL(SBBANDWIDTHID,RCDATATRANSMISSION.BANDWIDTH_ID)) THEN
            BLVALUECHG := TRUE;
        END IF;

        
        IF (RCDATATRANSMISSION.CONNECTION_TYPE_ID <> NVL(SBCONNECTIONTYPEID,RCDATATRANSMISSION.CONNECTION_TYPE_ID)) THEN
            BLVALUECHG := TRUE;
        END IF;

        
        IF (NOT BLVALUECHG) THEN
            ERRORS.SETERROR(CNUERROR_114162);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        CREATMOTBYDATACHANG(CSBGEN_CAM_DT_CAN, CSBGEN_CAM_DT_CAN_COMP, NUMOTIVEID, NUCOMPONENTID );

        
        NUDATATRANSMISSIONID := MO_BOSEQUENCES.FNUGETSEQ_MO_DATA_TRANSMISSION;
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'DATA_TRANSMISSION_ID',NUDATATRANSMISSIONID );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'COMPONENT_ID',NUCOMPONENTID );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'DISPONIBILITY_PERC',RCDATATRANSMISSION.DISPONIBILITY_PERC );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'CAPACITY',RCDATATRANSMISSION.CAPACITY );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'ORIGIN',RCDATATRANSMISSION.ORIGIN );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'TARGET',RCDATATRANSMISSION.TARGET );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'SYMMETRY',RCDATATRANSMISSION.SYMMETRY );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'PROTOCOL_ID',RCDATATRANSMISSION.PROTOCOL_ID );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'CONNECTION_TYPE_ID',RCDATATRANSMISSION.CONNECTION_TYPE_ID );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'CHANNEL_IDENTIFICAT',RCDATATRANSMISSION.CHANNEL_IDENTIFICAT );
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION', 'BANDWIDTH_ID',RCDATATRANSMISSION.BANDWIDTH_ID );

        
        IF (NUCLASSSERVICEIDCURRENT <> NVL(SBCLASSSERVICEIDNEW,NUCLASSSERVICEIDCURRENT)) THEN
            GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, MO_BOCONSTANTS.CSBMO_COMPONENT , 'CLASS_SERVICE_ID', SBCLASSSERVICEIDNEW);
        END IF;

        
        IF (RCDATATRANSMISSION.PROTOCOL_ID <> NVL(SBPROTOCOLID,RCDATATRANSMISSION.PROTOCOL_ID)) THEN
            GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION' , 'PROTOCOL_ID', SBPROTOCOLID);
        END IF;

        
        IF (RCDATATRANSMISSION.BANDWIDTH_ID <> NVL(SBBANDWIDTHID,RCDATATRANSMISSION.BANDWIDTH_ID)) THEN
            GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION' , 'BANDWIDTH_ID', SBBANDWIDTHID);
        END IF;

        
        IF (RCDATATRANSMISSION.CONNECTION_TYPE_ID <> NVL(SBCONNECTIONTYPEID,RCDATATRANSMISSION.CONNECTION_TYPE_ID)) THEN
            GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||SBCOMPONENTID, 'MO_DATA_TRANSMISSION' , 'CONNECTION_TYPE_ID', SBCONNECTIONTYPEID);
        END IF;

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreateMotByDataChangeToChannel',12);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEMOTBYDATACHANGETOCHANNEL;


    





















    PROCEDURE CREATMOTBYRETCOMPPROVI
    IS

		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
        SBINITIALPROCESSDATE GE_BOINSTANCECONTROL.STYSBVALUE;
        RCMOMOTIVE           DAMO_MOTIVE.STYMO_MOTIVE;
        RCMOCHILDCOMPONENT   DAMO_COMPONENT.STYMO_COMPONENT;
        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NURETIMOTIVEID       MO_MOTIVE.MOTIVE_ID%TYPE;

        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        RCFATHPRCOMP         DAPR_COMPONENT.STYPR_COMPONENT;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
		NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
		NUCOMPONENTID        MO_COMPONENT.COMPONENT_ID%TYPE;
		NUCOMPMOTSTATUSID    MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;

        CURFCHILDMOCOMPONENTS CONSTANTS.TYREFCURSOR;
        NUINDEX               GE_BOINSTANCECONTROL.STYNUINDEX;

    BEGIN

    UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.CreatMotByRetCompProvi',12);

    
    GE_BOINSTANCE.GETVALUE
        (
        MO_BOCONSTANTS.CSBMO_COMPONENT,
        MO_BOCONSTANTS.CSBCOMPONENT_ID,
        NUCOMPONENTID
        );

    NUMOTIVEID := DAMO_COMPONENT.FNUGETMOTIVE_ID(NUCOMPONENTID);

    DAMO_MOTIVE.GETRECORD(NUMOTIVEID,RCMOMOTIVE);
    
    IF DAPR_PRODUCT.FNUGETPRODUCT_STATUS_ID(RCMOMOTIVE.PRODUCT_ID) = PR_BOPARAMETER.FNUGETPRODRETI THEN
       RETURN;
    END IF;

    
    IF NOT PS_BOMOTIVESTATUS.FBLISFINALSTATUS(RCMOMOTIVE.MOTIVE_STATUS_ID) THEN
        ERRORS.SETERROR(CNUERROR_2008,
                        RCMOMOTIVE.MOTIVE_STATUS_ID||'|'||
                        NUMOTIVEID
                        );
        RAISE EX.CONTROLLED_ERROR;
    END IF;

     
    GE_BOINSTANCECONTROL.INITINSTANCEMANAGER;
     
    GE_BOINSTANCECONTROL.CREATEINSTANCE(SBPROCESSINSTANCE,NULL);

    

    MO_BOCNFLOADPRODUCTDATA.CREATEMOTIVEBYPRODUCT(RCMOMOTIVE.PRODUCT_ID,      
                          RCMOMOTIVE.PACKAGE_ID,      
                          PS_BOPRODUCTMOTIVE.CSBTAGGENRETIROSERV,      
                          NULL,             
                          NULL,             
                          TRUE,             
                          NULL,             
                          NULL,             
                          NULL,             
                          NULL,             
                          NULL,             
                          SBINITIALPROCESSDATE, 
                          SBPROCESSINSTANCE,
                          NURETIMOTIVEID);  

    
    CREATEMORETIRE(NURETIMOTIVEID, CNUAUTRETTYP,SBPROCESSINSTANCE);

    NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
    NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL);

    UT_TRACE.TRACE('Inicia - Creacion de componente a retirar',7);

	NUCOMPIDPROD := DAMO_COMPONENT.FNUGETCOMPONENT_ID_PROD(NUCOMPONENTID);

	DAPR_COMPONENT.GETRECORD(NUCOMPIDPROD, RCCOMPBYPROD);

    IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
        AND
        (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
    THEN

        NUCOMPMOTSTATUSID :=  DAMO_COMPONENT.FNUGETMOTIVE_STATUS_ID(NUCOMPONENTID);

        
        IF NUCOMPMOTSTATUSID = GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI) THEN
            NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI);
        ELSE
            NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
            DAPR_COMPONENT.UPDCOMPONENT_STATUS_ID(NUCOMPIDPROD, PR_BOPARAMETER.FNUGETRETPENDCOMP);
        END IF;

        
        LOADCOMPONENT(RCMOMOTIVE.PACKAGE_ID,NURETIMOTIVEID, PS_BOPRODUCTMOTIVE.CSBTAGGENRETIROSERV, NULL,
                        PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL, NUCONSECUTIVE, NUCOMPSTATUSID, NULL,
                        RCCOMPBYPROD.COMPONENT_ID, NUELEMCATEGORY, TRUE,
                        FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE, NUCOMPIDMOT);

        
        CREATEMORETIRECOMP(NUCOMPIDMOT,CNUAUTRETTYP,SBPROCESSINSTANCE);
        NUFATHCOMPIDMOT := NUCOMPIDMOT;
        NUCONSECUTIVE := NUCONSECUTIVE + 1;

        
        
        CURFCHILDMOCOMPONENTS := MO_BCCOMPONENT.FRFGETCHILDCOMPONENT(NUCOMPONENTID);
        LOOP
        	FETCH CURFCHILDMOCOMPONENTS INTO RCMOCHILDCOMPONENT;
        	EXIT WHEN CURFCHILDMOCOMPONENTS%NOTFOUND;
        	
            DAPR_COMPONENT.GETRECORD(RCMOCHILDCOMPONENT.COMPONENT_ID_PROD, RCCOMPBYPROD);
            
            RCFATHPRCOMP := PR_BCCOMPONENT.FRCCOMPONENTFATHER(RCMOCHILDCOMPONENT.COMPONENT_ID_PROD);

            
            IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                AND
                (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE, MO_BOCONSTANTS.CSBMO_COMPONENT||RCFATHPRCOMP.COMPONENT_ID, MO_BOCONSTANTS.CSBMO_COMPONENT,'COMPONENT_ID',NUINDEX))
            THEN
                
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,
                            MO_BOCONSTANTS.CSBMO_COMPONENT||RCFATHPRCOMP.COMPONENT_ID,
                            MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID', NUFATHCOMPIDMOT);

                
                IF RCMOCHILDCOMPONENT.MOTIVE_STATUS_ID = GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI) THEN
                    NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_ATTE_PROD_EXI);
                ELSE
                    NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
                    DAPR_COMPONENT.UPDCOMPONENT_STATUS_ID(RCCOMPBYPROD.COMPONENT_ID, PR_BOPARAMETER.FNUGETRETPENDCOMP);
                END IF;

                
                LOADCOMPONENT(RCMOMOTIVE.PACKAGE_ID,NURETIMOTIVEID,PS_BOPRODUCTMOTIVE.CSBTAGGENRETIROSERV,
                                NUFATHCOMPIDMOT,PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL,NUCONSECUTIVE,
                                NUCOMPSTATUSID,NULL,RCCOMPBYPROD.COMPONENT_ID, NUELEMCATEGORY , TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);
                
                CREATEMORETIRECOMP(NUCOMPIDMOT,CNUAUTRETTYP,SBPROCESSINSTANCE);
                NUFATHCOMPIDMOT := NUCOMPIDMOT;
                NUCONSECUTIVE := NUCONSECUTIVE + 1;
            END IF;
        END LOOP;
    END IF;

    UT_TRACE.TRACE('Finaliza - Creacion de componente a retirar',7);

    
    CREATEMOEXECLOGMOT
    (
        RCMOMOTIVE.PACKAGE_ID,
        NURETIMOTIVEID,
        MO_BOACTIONPARAMETER.FNUGETACTION_CREATE_PLAN,
        SBPROCESSINSTANCE
    );

    
    GE_BOINSTANCECONTROL.INSERTINSTANCE(SBPROCESSINSTANCE);
    GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;

    
    DAMO_PACKAGES.UPDMOTIVE_STATUS_ID(RCMOMOTIVE.PACKAGE_ID,MO_BOCONSTANTS.CNUSTATUS_REG_PACK);
    

    MO_BOEXECUTOR_LOG_MOT.EXECUTEACTIONATTENTION(RCMOMOTIVE.PACKAGE_ID);
    UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.CreatMotByRetCompProvi',12);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CURFCHILDMOCOMPONENTS%ISOPEN THEN
                	CLOSE CURFCHILDMOCOMPONENTS;
             END IF;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CURFCHILDMOCOMPONENTS%ISOPEN THEN
                	CLOSE CURFCHILDMOCOMPONENTS;
             END IF;
            ERRORS.SETERROR;
            GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;
            RAISE EX.CONTROLLED_ERROR;

    END CREATMOTBYRETCOMPPROVI;

    





















    PROCEDURE LOADCOMPONENTMOT
    (
        INUPACKAGEID          IN        MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID           IN        MO_MOTIVE.MOTIVE_ID%TYPE,
        ISBTAGMOTIV           IN        MO_MOTIVE.TAG_NAME%TYPE,
        INUMOTIVETYPEID       IN        MO_COMPONENT.MOTIVE_TYPE_ID%TYPE,
        INUFATHCOMPIDMOT      IN        MO_COMPONENT.COMPONENT_ID%TYPE,
        INUCOMPTYPEID         IN        MO_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        ISBTAGMOTICOMP        IN        MO_COMPONENT.TAG_NAME%TYPE,
        INUCONSECUT           IN        MO_COMPONENT.COMPONENT_NUMBER%TYPE,
        INUCOMPSTATUSID       IN        MO_COMPONENT.MOTIVE_STATUS_ID%TYPE,
        INUCLASSSERVICE       IN        MO_COMPONENT.CLASS_SERVICE_ID%TYPE,
        INUPRODUCTID          IN        MO_COMPONENT.PRODUCT_ID%TYPE,
        ISBSERVICENUMBER      IN        MO_COMPONENT.SERVICE_NUMBER%TYPE,
        ISBSUGGESTNUMBER      IN        MO_COMPONENT.SUGGESTED_NUMBER%TYPE,
        ISBOBLIGATORYFLAG     IN        MO_COMPONENT.OBLIGATORY_FLAG%TYPE,
        ISBOBLIGATORYCHANGE   IN        MO_COMPONENT.OBLIGATORY_CHANGE%TYPE,
        ISBCATEGORYID         IN        MO_COMPONENT.CATEGORY_ID%TYPE,
        ISBSUBCATEGORYID      IN        MO_COMPONENT.SUBCATEGORY_ID%TYPE,
        INUPRODORIGID         IN        MO_COMPONENT.PRODUCT_ORIGIN_ID%TYPE,
        ISBISMAIN             IN        MO_COMPONENT.IS_MAIN%TYPE,
        INUAGREEMENTID        IN        NUMBER,
        INUASSIGNROUTEID      IN        MO_COMPONENT.ASSIGN_ROUTE_ID%TYPE,
        ISBDISTRICTID         IN        MO_COMPONENT.DISTRICT_ID%TYPE,
        INUBUILDINGID         IN        MO_COMPONENT.BUILDING_ID%TYPE,
        INUDISTADMINID        IN        MO_COMPONENT.DISTRIBUT_ADMIN_ID%TYPE,
        ISBDIRECTIONALITYID   IN        MO_COMPONENT.DIRECTIONALITY_ID%TYPE,
        IOSBPROCESSINSTANCE   IN  OUT   GE_BOINSTANCECONTROL.STYSBNAME,
        ONUCOMPIDMOT          OUT       MO_COMPONENT.COMPONENT_ID%TYPE
    )
    IS
        SBGROUP             GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.LoadComponentMot',12);

        ONUCOMPIDMOT := MO_BOSEQUENCES.FNUGETCOMPONENTID;

        
        SBGROUP := MO_BOCONSTANTS.CSBMO_COMPONENT||ONUCOMPIDMOT;

        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID', ONUCOMPIDMOT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_NUMBER', INUCONSECUT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SUGGESTED_NUMBER', ISBSUGGESTNUMBER);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'OBLIGATORY_FLAG', NVL(ISBOBLIGATORYFLAG,GE_BOCONSTANTS.CSBNO));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'OBLIGATORY_CHANGE', NVL(ISBOBLIGATORYCHANGE,GE_BOCONSTANTS.CSBNO));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'NOTIFY_ASSIGN_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'AUTHORIZ_LETTER_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ESTIMATED_INST_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ASSIGN_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ATTENTION_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ANNUL_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'STATUS_CHANGE_DATE', UT_DATE.FSBSTR_SYSDATE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'RECORDING_DATE', UT_DATE.FSBSTR_SYSDATE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'DIRECTIONALITY_ID', NVL(ISBDIRECTIONALITYID,MO_BOCONSTANTS.CSBBI));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ASSIGN_TYPE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'STUDY_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'STUDY_NUMBER', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'CUSTOM_DECISION_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'KEEP_NUMBER_FLAG', GE_BOCONSTANTS.CSBNO);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'MOTIVE_ID', INUMOTIVEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'DISTRICT_ID', ISBDISTRICTID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'BUILDING_ID', INUBUILDINGID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'DISTRIBUT_ADMIN_ID', INUDISTADMINID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ANNUL_CAUSAL_ID', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'CATEGORY_ID', ISBCATEGORYID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SUBCATEGORY_ID', ISBSUBCATEGORYID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PROD_MOTIVE_COMP_ID', PS_BOPRODUCTMOTIVECOMP.FNUGETPRODMOTICOMPBYTAGNAME(ISBTAGMOTICOMP));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_TYPE_ID', INUCOMPTYPEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'MOTIVE_TYPE_ID', INUMOTIVETYPEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'ASSIGN_ROUTE_ID', INUASSIGNROUTEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'MOTIVE_STATUS_ID', INUCOMPSTATUSID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PRODUCT_MOTIVE_ID', PS_BOPRODUCTMOTIVE.FNUGETPRODMOTIVEBYTAGNAME(ISBTAGMOTIV));
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'UNDOASSIGN_CAUSAL_ID',NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'CLASS_SERVICE_ID', INUCLASSSERVICE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PACKAGE_ID',INUPACKAGEID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PRODUCT_ID', INUPRODUCTID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SERVICE_NUMBER', ISBSERVICENUMBER);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'COMPONENT_ID_PROD', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'MEDIATION_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'SERVICE_DATE', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'UNCHARGED_TIME', NULL);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'PRODUCT_ORIGIN_ID', INUPRODORIGID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'QUANTITY', 1);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'TAG_NAME', ISBTAGMOTICOMP);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'IS_MAIN', ISBISMAIN);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMPONENT, 'AGREEMENT_ID', INUAGREEMENTID);

        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMP_LINK, 'CHILD_COMPONENT_ID', ONUCOMPIDMOT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMP_LINK, 'FATHER_COMPONENT_ID',INUFATHCOMPIDMOT);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE (IOSBPROCESSINSTANCE, SBGROUP, MO_BOCONSTANTS.CSBMO_COMP_LINK, 'MOTIVE_ID', INUMOTIVEID);

        UT_TRACE.TRACE('Finaliza Metodo MO_BOCnfLoadProductData.LoadComponentMot. Componente Creado:['||ONUCOMPIDMOT||']',12);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;

    END LOADCOMPONENTMOT;


    





















    PROCEDURE LOADCOMPONENTSFROMPRODUCT
    (
        INUPRODUCTID        IN  PR_PRODUCT.PRODUCT_ID%TYPE,
        INUCOMPONENTTYPE    IN  PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
        INUPRODMOTICOMPID   IN  PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE,
        ISBTAGNAMECMPNEW    IN  PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE,
        INURELATEDELEMENT   IN  PR_NETWORK_ELEM_OPER.ELEMENT_TYPE_ID%TYPE DEFAULT NULL
    )
    IS
        CNUPACKENTTYPE  CONSTANT NUMBER := 2012;

        
        
        CURSOR CUCOMPONENTSBYPRDRELELEM
        (
            INUPRODUCTID    IN  PR_PRODUCT.PRODUCT_ID%TYPE,
            INUCOMPONENTTYPE    IN  PR_COMPONENT.COMPONENT_TYPE_ID%TYPE,
            INURELATEDELEMENT   IN  PR_NETWORK_ELEM_OPER.ELEMENT_TYPE_ID%TYPE
        )
        IS
        SELECT A.*,A.ROWID
        FROM PR_COMPONENT A, PR_NETWORK_ELEM_OPER B , PS_PRODUCT_STATUS C
        WHERE A.COMPONENT_ID = B.COMPONENT_ID AND
              A.COMPONENT_TYPE_ID = INUCOMPONENTTYPE AND
              B.ELEMENT_TYPE_ID = INURELATEDELEMENT AND
              A.COMPONENT_STATUS_ID =  C.PRODUCT_STATUS_ID AND
              C.IS_ACTIVE_PRODUCT   =  GE_BOCONSTANTS.CSBYES AND
              A.PRODUCT_ID = INUPRODUCTID AND
              B.CATEGORY_ID = IM_BOCONSTANTS.CNUCATEGORYSERVICES;


        CURSOR CUCOMPATTRIBS
        (
            ISBENTITY       GE_ENTITY.NAME_%TYPE,
            ISBATTRIBUTE    GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE
        )
        IS
        SELECT A.VALID_EXPRESSION_ID
        FROM GI_COMP_ATTRIBS A, GI_COMPOSITION B
        WHERE B.TAG_NAME = ISBTAGNAMECMPNEW AND
              A.COMPOSITION_ID = B.COMPOSITION_ID AND
              ENTITY_ATTRIBUTE_ID IN
              (
                SELECT ENTITY_ATTRIBUTE_ID
                FROM GE_ENTITY_ATTRIBUTES A, GE_ENTITY B
                WHERE NAME_ = ISBENTITY AND A.TECHNICAL_NAME = ISBATTRIBUTE
                       AND A.ENTITY_ID = B.ENTITY_ID
              );

        TBDATA                  DAPR_COMPONENT.TYTBPR_COMPONENT;
        TBEQUIPMENT             DAPR_EQUIPMENT.TYTBPR_EQUIPMENT;
        SBCURRENTINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;
        SBNEWINSTANCE           GE_BOINSTANCECONTROL.STYSBNAME;
        NUERROR                 GE_ERROR_LOG.MESSAGE_ID%TYPE;
        SBERROR                 GE_ERROR_LOG.DESCRIPTION%TYPE;

        RCPRODMOTIVECOMP    DAPS_PROD_MOTIVE_COMP.STYPS_PROD_MOTIVE_COMP;
        NUINSTANCEQUANTITY  NUMBER;
        NUCOUNTINDEX        NUMBER := 0;
        CSBEQUIPMENTSOURCE  CONSTANT VARCHAR2(1024) := 'SOURCE_';
        NUMOTCOMPID         MO_COMPONENT.COMPONENT_ID%TYPE;
        IOTBINSTANCE        GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
        NUINDEX             PLS_INTEGER ;
        NUPRODMOTICOMPIDNEW PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE;
        BLHASEQUIPMENT      BOOLEAN;

        NUATTRIBUTE         GE_BOINSTANCECONTROL.STYNUINDEX ;
        SBCURRTAGNAME       GE_BOINSTANCECONTROL.STYSBVALUE ;

        SBPACKAGETYPETAGNAME    MO_PACKAGES.TAG_NAME%TYPE;

    BEGIN
        UT_TRACE.TRACE('Inicia creacion de instancias inuProductId [ '||INUPRODUCTID||' ]
        inuComponentType  [ '||INUCOMPONENTTYPE||' ]
        inuProdMotiCompId [ '||INUPRODMOTICOMPID||' ]
        isbTagNameCmpNew  [ '||ISBTAGNAMECMPNEW||' ]
        inuRelatedElement [ '||INURELATEDELEMENT||']',4);

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBCURRENTINSTANCE);

        MO_BOCNFINSTANCE.GETATTRIBUTEVALUE(MO_BOCONSTANTS.CSBMO_PACKAGES,'TAG_NAME',SBPACKAGETYPETAGNAME);

        IF( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBCURRENTINSTANCE,NULL,CSBMOPROCESS,'COUNT_EXECTUTIONS',NUINDEX)) THEN
            UT_TRACE.TRACE('Ya se subieron los datos a la instancia ',4);
            RETURN;
        END IF;

        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBCURRENTINSTANCE,NULL,CSBMOPROCESS,'COUNT_EXECTUTIONS','1');

        IF(INURELATEDELEMENT IS NOT NULL) THEN
            FOR RC IN CUCOMPONENTSBYPRDRELELEM(INUPRODUCTID, INUCOMPONENTTYPE, INURELATEDELEMENT) LOOP
                UT_TRACE.TRACE('Adicionando a la tabla '||RC.COMPONENT_ID,4);
                TBDATA(NUCOUNTINDEX) := RC;
                NUCOUNTINDEX := NUCOUNTINDEX + 1 ;
            END LOOP;
        ELSE
            FOR RC IN PR_BCCOMPONENT.CUCOMPONENTSBYTYPE(INUPRODUCTID, INUCOMPONENTTYPE) LOOP
                UT_TRACE.TRACE('count '||TBDATA.COUNT,4);
                TBDATA(TBDATA.COUNT) := RC;
            END LOOP;
        END IF;
        UT_TRACE.TRACE('Creada tabla de datos para la instancia ',4);

        
        FOR NUCOMP IN 0..(TBDATA.COUNT-1) LOOP
            UT_TRACE.TRACE('Buscando equipos para el componente '||TBDATA(NUCOMP).COMPONENT_ID,4);
            BLHASEQUIPMENT := GE_BOCONSTANTS.GETFALSE;
            FOR RCEQUIPMENT IN PR_BCEQUIPMENT.CUEQUIPMENTSBYCOMP(TBDATA(NUCOMP).COMPONENT_ID) LOOP
                
                UT_TRACE.TRACE('Equipo para el componente ',4);
                TBEQUIPMENT(TBDATA(NUCOMP).COMPONENT_ID) := RCEQUIPMENT;
                BLHASEQUIPMENT := GE_BOCONSTANTS.GETTRUE;
            END LOOP;
            IF NOT BLHASEQUIPMENT THEN
                UT_TRACE.TRACE('El componente no tiene equipos ',10);
                RETURN ;
            END IF;
        END LOOP;

        GE_BOINSTANCECONTROL.INSTANCEHIERARCHY (SBCURRENTINSTANCE,IOTBINSTANCE);

        NUINDEX := IOTBINSTANCE.FIRST;

        
        WHILE(NUINDEX IS NOT NULL) LOOP
            IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(IOTBINSTANCE(NUINDEX).SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_COMPONENT,'TAG_NAME',NUATTRIBUTE)
               THEN
               GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(IOTBINSTANCE(NUINDEX).SBINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_COMPONENT,'TAG_NAME',SBCURRTAGNAME);
               UT_TRACE.TRACE('sbCurrTagName '||SBCURRTAGNAME||' isbTagNameCmpNew '||ISBTAGNAMECMPNEW,10);

                IF SBCURRTAGNAME = ISBTAGNAMECMPNEW THEN
                    UT_TRACE.TRACE('Destruye instancia [ '||IOTBINSTANCE(NUINDEX).SBINSTANCE||' ]',4);
                    GE_BOINSTANCECONTROL.DESTROYINSTANCE(IOTBINSTANCE(NUINDEX).SBINSTANCE);
                    NUINDEX := IOTBINSTANCE.NEXT(NUINDEX);
                END IF;
            END IF;
        END LOOP ;


        NUPRODMOTICOMPIDNEW := PS_BOPRODUCTMOTIVECOMP.FNUGETPRODMOTICOMPBYTAGNAME(ISBTAGNAMECMPNEW);
        RCPRODMOTIVECOMP := DAPS_PROD_MOTIVE_COMP.FRCGETRECORD(NUPRODMOTICOMPIDNEW);

        UT_TRACE.TRACE('Composition tag name '||RCPRODMOTIVECOMP.TAG_NAME||' isbTagNameCmpNew '||ISBTAGNAMECMPNEW,4);

        
        IF RCPRODMOTIVECOMP.PROD_MOTIVE_COMP_ID IS NULL THEN
            UT_TRACE.TRACE('No Encontr� Composici�n, Retorna',4);
            RETURN;
        END IF;

        FOR X IN 0..(TBDATA.COUNT - 1) LOOP
            MO_BOUNCOMPOSITIONUTIL.GETINSTANCENAME(RCPRODMOTIVECOMP.TAG_NAME,SBNEWINSTANCE);
            MO_BOUNCOMPOSITIONUTIL.CREATEINSTANCE(
            SBCURRENTINSTANCE,
            SBNEWINSTANCE,
            MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT,
            RCPRODMOTIVECOMP.PROD_MOTIVE_COMP_ID,
            NULL,
            GE_BOCONSTANTS.INSERT_);


            UT_TRACE.TRACE('Instancia Creada:['||SBNEWINSTANCE||']',4);

            
            NUMOTCOMPID := MO_BOSEQUENCES.FNUGETCOMPONENTID;
            


            UT_TRACE.TRACE('Instancia Creada:[1] '||TBDATA(X).COMPONENT_ID,4);
            UT_TRACE.TRACE('Instancia Creada:[1] '||TBEQUIPMENT(TBDATA(X).COMPONENT_ID).CODE,4);
            UT_TRACE.TRACE('Instancia Creada:[1] '||TBEQUIPMENT.COUNT,4);

            GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBNEWINSTANCE,NULL,CSBMOEQUIPMENT,'CODE',TBEQUIPMENT(TBDATA(X).COMPONENT_ID).CODE,TRUE);

            
            
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBNEWINSTANCE,NULL,CSBMOEQUIPMENT,CSBEQUIPMENTSOURCE,TBEQUIPMENT(TBDATA(X).COMPONENT_ID).SOURCE_,TRUE);
            IF (SBPACKAGETYPETAGNAME = 'P_SEG_VEH_TRANFER_VLU_TO_TRANSP_CARGA'
                
                ) THEN
                GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBNEWINSTANCE,NULL,CSBMOEQUIPMENT,'IS_MAIN',GE_BOCONSTANTS.GETNO,TRUE);
            ELSE
                GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBNEWINSTANCE,NULL,CSBMOEQUIPMENT,'IS_MAIN',TBEQUIPMENT(TBDATA(X).COMPONENT_ID).IS_MAIN,TRUE);
            END IF;

            GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBNEWINSTANCE,NULL,CSBMOPROCESS,'VARCHAR_2',TBEQUIPMENT(TBDATA(X).COMPONENT_ID).SOURCE_,TRUE);

            UT_TRACE.TRACE('Instancia Creada:[2]',4);

            FOR RCCMPATT IN CUCOMPATTRIBS(CSBMOEQUIPMENT,CSBEQUIPMENTSOURCE) LOOP
                GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS(SBNEWINSTANCE,
                                                         NULL,CSBMOEQUIPMENT,
                                                         CSBEQUIPMENTSOURCE,
                                                         RCCMPATT.VALID_EXPRESSION_ID,
                                                         GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION);
                EXIT;
            END LOOP;
            UT_TRACE.TRACE('Instancia Creada:[3]',4);
            
            
            
            
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBNEWINSTANCE,NULL,'mo_component','COMPONENT_ID',NUMOTCOMPID,TRUE);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBNEWINSTANCE,NULL,'mo_component','CLASS_SERVICE_ID',TBDATA(X).CLASS_SERVICE_ID,TRUE);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBNEWINSTANCE,NULL,'mo_component','SERVICE_NUMBER',TBEQUIPMENT(TBDATA(X).COMPONENT_ID).CODE,TRUE);

            UT_TRACE.TRACE('Instancia Creada:[4]',4);

        END LOOP;
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCOMPONENTSFROMPRODUCT;



    PROCEDURE FILLADDRESSDATA
    (
        INUSUBSCRIPTIONPENDID    IN  MO_PACKAGES.SUBSCRIPTION_PEND_ID%TYPE,
        INUPACKAGEID             IN   MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        RCMOSUBSCRIPTION    SUSCRIPC%ROWTYPE;
        RCABADDRESS         DAAB_ADDRESS.STYAB_ADDRESS;
        NUADDRESSID         MO_ADDRESS.ADDRESS_ID%TYPE;
        NUSUBSCRIPTIONPENDID    MO_PACKAGES.SUBSCRIPTION_PEND_ID%TYPE;
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN

        RCMOSUBSCRIPTION := PKTBLSUSCRIPC.FRCGETRECORD(INUSUBSCRIPTIONPENDID);
        RCABADDRESS := DAAB_ADDRESS.FRCGETRECORD(RCMOSUBSCRIPTION.SUSCIDDI);

        NUADDRESSID := MO_BOSEQUENCES.FNUGETADDRESSID;
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBCURRENTINSTANCE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBCURRENTINSTANCE,NULL,'MO_ADDRESS','ADDRESS_ID',NUADDRESSID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBCURRENTINSTANCE,NULL,'MO_ADDRESS','PARSER_ADDRESS_ID',RCABADDRESS.ADDRESS_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBCURRENTINSTANCE,NULL,'MO_ADDRESS','GEOGRAP_LOCATION_ID',RCABADDRESS.GEOGRAP_LOCATION_ID);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBCURRENTINSTANCE,NULL,'MO_ADDRESS','IS_ADDRESS_MAIN',GE_BOCONSTANTS.CSBYES);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBCURRENTINSTANCE,NULL,'MO_ADDRESS','ADDRESS',RCABADDRESS.ADDRESS);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBCURRENTINSTANCE,NULL,'MO_ADDRESS','PACKAGE_ID',INUPACKAGEID);

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			RAISE EX.CONTROLLED_ERROR;
		WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLADDRESSDATA;


    
















    
















    
































    




















    PROCEDURE CREATCMPRETMOT
    (
        INUCOMPONENTTYPEID      PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE,
        INUELEMENTTYPEASSOID    PR_NETWORK_ELEM_OPER.ELEMENT_TYPE_ID%TYPE
    )
    IS
        SBINITIALPROCESSDATE GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPROCESSINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME := 'PROCESS_INSTANCE';
		NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;

        NUMOTIVEID           MO_MOTIVE.MOTIVE_ID%TYPE;
        NURETIMOTIVEID       MO_MOTIVE.MOTIVE_ID%TYPE;
        NUFATHCOMPIDMOT      MO_COMPONENT.COMPONENT_ID%TYPE := NULL;
        NUCONSECUTIVE        MO_COMPONENT.COMPONENT_NUMBER%TYPE := 1;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUCOMPIDPROD         PR_COMPONENT.COMPONENT_ID%TYPE;
		NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
        CURFMASTERCOMPONENTS CONSTANTS.TYREFCURSOR;

        NUPRODUCTID          PR_PRODUCT.PRODUCT_ID%TYPE;
        NUPACKAGEID          MO_PACKAGES.PACKAGE_ID%TYPE;
        SBPRODUCTID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKAGEID          GE_BOINSTANCECONTROL.STYSBVALUE;
        NUMASTERCOMPPRODID   PR_COMPONENT.COMPONENT_ID%TYPE;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;

        FUNCTION HASELEMENTTYPEASSO
        (
            INUCOMPONENTID  PR_COMPONENT.COMPONENT_ID%TYPE,
            INUELEMENTTYID  PR_NETWORK_ELEM_OPER.ELEMENT_TYPE_ID%TYPE
        )
        RETURN BOOLEAN
        IS

        BEGIN

            FOR RCPRNETELEM IN PR_BCNETWORK_ELEM_OPER.CUNETELEMENTSTYPEBYCOMPONENT(INUCOMPONENTID, INUELEMENTTYID) LOOP
                RETURN GE_BOCONSTANTS.GETTRUE ;
            END LOOP;

            RETURN GE_BOCONSTANTS.GETFALSE ;


        EXCEPTION
    		WHEN EX.CONTROLLED_ERROR THEN
    			RAISE EX.CONTROLLED_ERROR;
    		WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END;
    BEGIN

        UT_TRACE.TRACE('Inicia m�todo MO_BOCnfLoadProductData.creatCmpRetMot ',7);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE, NULL,MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,SBPACKAGEID);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE, NULL, PR_BOCONSTANTS.PR_PRODUCT, PR_BOCONSTANTS.PRODUCT_ID, SBPRODUCTID);
        DAPR_PRODUCT.ACCKEY(TO_NUMBER(SBPRODUCTID));
        
        SBINITIALPROCESSDATE := NULL;
        IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',NUINDEX)
        THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOUNCOMPOSITIONCONSTANTS.CSBMO_PROCESS,'INITIAL_PROCESS_DATE',SBINITIALPROCESSDATE);
        END IF;

        CREATEMOTIVEBYPRODUCT(TO_NUMBER(SBPRODUCTID),      
                              TO_NUMBER(SBPACKAGEID),      
                              PS_BOPRODUCTMOTIVE.CSBTAGGENRETIROSERV,      
                              NULL,             
                              NULL,             
                              TRUE,             
                              NULL,             
                              NULL,             
                              NULL,             
                              NULL,             
                              NULL,             
                              SBINITIALPROCESSDATE, 
                              SBPROCESSINSTANCE,
                              NURETIMOTIVEID);     


        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBPROCESSINSTANCE,NULL,'MO_PROCESS','MOTIVE_ID',NURETIMOTIVEID,TRUE);

        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL);
        UT_TRACE.TRACE('Inicia - Creacion de componentes',7);



        NUPRODUCTID := TO_NUMBER(SBPRODUCTID);
        NUPACKAGEID := TO_NUMBER(SBPACKAGEID);

        CURFMASTERCOMPONENTS := PR_BCPRODUCT.GETMASTERSCOMPIDBYPRODUCT(NUPRODUCTID);
     LOOP
    		FETCH CURFMASTERCOMPONENTS INTO NUMASTERCOMPPRODID;
    		EXIT WHEN CURFMASTERCOMPONENTS%NOTFOUND;
    		DAPR_COMPONENT.GETRECORD(NUMASTERCOMPPRODID, RCCOMPBYPROD);

            IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                AND
                (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
            THEN
                
                LOADCOMPONENT(NUPACKAGEID,NURETIMOTIVEID, PS_BOPRODUCTMOTIVE.CSBTAGGENRETIROSERV, NULL,
                                PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL, NUCONSECUTIVE, GNUATTENDPRODEXIST , NULL,
                                NUMASTERCOMPPRODID, NUELEMCATEGORY, TRUE,
                                FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE, NUCOMPIDMOT);

                NUFATHCOMPIDMOT := NUCOMPIDMOT;
                NUCONSECUTIVE   := NUCONSECUTIVE + 1;

            	
                FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUMASTERCOMPPRODID) LOOP
                    DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);
                    
                    GETMOFATHERCOMPONENT(SBPROCESSINSTANCE,RCPRCOMPONENTLINK,NUFATHCOMPIDMOT);

                    

                    IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                        AND
                        (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                        AND
                        (NUFATHCOMPIDMOT IS NOT NULL)
                        AND
                        (RCCOMPBYPROD.COMPONENT_TYPE_ID = INUCOMPONENTTYPEID)
                        AND
                        (HASELEMENTTYPEASSO(RCCOMPBYPROD.COMPONENT_ID, INUELEMENTTYPEASSOID))
                    THEN
                        
                        LOADCOMPONENT(NUPACKAGEID,NURETIMOTIVEID,PS_BOPRODUCTMOTIVE.CSBTAGGENRETIROSERV,NUFATHCOMPIDMOT,
                                        PS_BOPRODUCTMOTIVECOMP.CSBTAGGENERRETVOL,NUCONSECUTIVE,GNUREGSTATUSCOMP,NULL,
                                        RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATEGORY , TRUE,
                                        FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);
                        
                        CREATEMORETIRECOMP(NUCOMPIDMOT,GNUVOLRETTYP,SBPROCESSINSTANCE);
                        NUFATHCOMPIDMOT := NUCOMPIDMOT;
                        NUCONSECUTIVE := NUCONSECUTIVE + 1;
                    END IF;
                END LOOP;
            END IF;
    	END LOOP;
        UT_TRACE.TRACE('Finaliza - Creacion de componentes',5);
    	CLOSE CURFMASTERCOMPONENTS;

       	UT_TRACE.TRACE('Termina m�todo MO_BOCnfLoadProductData.creatCmpRetMot ',7);

	EXCEPTION
    		WHEN EX.CONTROLLED_ERROR THEN
    			RAISE EX.CONTROLLED_ERROR;
    		WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE CREATCORRESPONDMOTRET
    IS

        CNUVLUCOMPTYPE      CONSTANT    PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE := PS_BOCOMPONENTTYPE.FNUGETCOMPTYPEQUIPO;
        CNUVLUELEMTYPEID    CONSTANT    PS_COMPONENT_TYPE.COMPONENT_TYPE_ID%TYPE := 130;
        SBFLAGVALUE         GE_BOINSTANCECONTROL.STYSBVALUE ;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOCnfLoadProductData.creatCorrespondMotRet',12);

        
        MO_BOCNFINSTANCE.GETATTRIBUTEVALUE(CSBMOPROCESS, 'FLAG',SBFLAGVALUE);

        IF SBFLAGVALUE = GE_BOCONSTANTS.GETYES THEN
            
            CREATMOTBYGENVOLRET ;
        ELSE
            
            CREATCMPRETMOT(CNUVLUCOMPTYPE,CNUVLUELEMTYPEID);
        END IF;


        UT_TRACE.TRACE('Termina Metodo MO_BOCnfLoadProductData.creatCorrespondMotRet',12);
        EXCEPTION
    		WHEN EX.CONTROLLED_ERROR THEN
    			RAISE EX.CONTROLLED_ERROR;
    		WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;

    






















    PROCEDURE LOADCHILDINRET
        (
        ISBTAGMOTICOMP        IN        MO_COMPONENT.TAG_NAME%TYPE
        )
    IS
        SBPROCESSINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBPRODUCTID         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPACKAGEID         GE_BOINSTANCECONTROL.STYSBVALUE;
        SBMOTIVEID          GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCOMPONENTID       GE_BOINSTANCECONTROL.STYSBVALUE;
        SBFATHCOMPIDMOT     GE_BOINSTANCECONTROL.STYSBVALUE;
        SBTAGMOTICOMP       PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        NUCOMPSTATUSID       MO_COMPONENT.MOTIVE_STATUS_ID%TYPE;
        NUPACKAGEID         MO_PACKAGES.PACKAGE_ID%TYPE;
        NUMOTIVEID          MO_MOTIVE.MOTIVE_ID%TYPE;
        NUCOMPONENTID       MO_COMPONENT.COMPONENT_ID%TYPE;
        NUPRODMOTIVEID      GE_BOINSTANCECONTROL.STYSBVALUE;
        SBTAGNAMEPRODMOT    PS_PRODUCT_MOTIVE.TAG_NAME%TYPE;
        NUPRODMOTCOMPID     PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE;
        RCCOMPBYPROD         DAPR_COMPONENT.STYPR_COMPONENT;
        NUINDEX              GE_BOINSTANCECONTROL.STYNUINDEX;
        NUELEMCATEGORY       PR_NETWORK_ELEM_OPER.CATEGORY_ID%TYPE;
        NUCOMPIDMOT          MO_COMPONENT.COMPONENT_ID%TYPE;
        NUFATHCOMPIDMOT     MO_COMPONENT.COMPONENT_ID%TYPE;
        NUCONSECUTIVE       NUMBER;
    BEGIN
         UT_TRACE.TRACE('Inicia m�todo mo_bocnfloadproductdata.LoadChildInRet [ '||ISBTAGMOTICOMP||' ]',4);
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBPROCESSINSTANCE);
        
        MO_BOCNFINSTANCE.GETATTRIBUTEVALUE(MO_BOCONSTANTS.CSBMO_MOTIVE,MO_BOCONSTANTS.CSBPRODUCT_MOTIVE_ID,NUPRODMOTIVEID);
        
        SBTAGNAMEPRODMOT:= DAPS_PRODUCT_MOTIVE.FSBGETTAG_NAME(NUPRODMOTIVEID);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_COMPONENT,MO_BOCONSTANTS.CSBMOTIVE_ID, SBMOTIVEID);
        NUMOTIVEID:=UT_CONVERT.FNUCHARTONUMBER(SBMOTIVEID);
        
         MO_BOCNFINSTANCE.GETATTRIBUTEVALUE(MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,NUPACKAGEID);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_COMPONENT,'COMPONENT_ID_PROD', SBCOMPONENTID);
        NUCOMPONENTID := UT_CONVERT.FNUCHARTONUMBER(SBCOMPONENTID);
        
         GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_COMPONENT,'COMPONENT_ID', SBFATHCOMPIDMOT);
        NUFATHCOMPIDMOT := UT_CONVERT.FNUCHARTONUMBER(SBFATHCOMPIDMOT);
        
        NUCOMPSTATUSID  := GE_BOPARAMETER.FNUGET(MO_BOCONSTANTS.CSBSTATUS_REG_COMP);
        
        NUELEMCATEGORY := PS_BOPRODUCTMOTIVECOMP.FNUGETELEMCATBYTAGNAME(ISBTAGMOTICOMP);
        DAPR_COMPONENT.GETRECORD(NUCOMPONENTID, RCCOMPBYPROD);
        
         NUCONSECUTIVE:=2;
         UT_TRACE.TRACE('antes del for1 mo_bocnfloadproductdata.LoadChildInRet [ producto motivo '||NUPRODMOTIVEID||'tag pm '||SBTAGNAMEPRODMOT||'id de motivo '||NUMOTIVEID||'packid '||NUPACKAGEID||'id comp '||NUCOMPONENTID||' ]',4);
         UT_TRACE.TRACE('antes del for2 mo_bocnfloadproductdata.LoadChildInRet [ estado del comp '||NUCOMPSTATUSID||'cat del elem '||NUELEMCATEGORY||' ]',4);
           
            FOR RCPRCOMPONENTLINK IN PR_BCCOMPONENT.CUCOMPSORDERBYPAREN(NUCOMPONENTID) LOOP
                DAPR_COMPONENT.GETRECORD(RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, RCCOMPBYPROD);

                
                IF  (DAPS_PRODUCT_STATUS.FSBGETIS_ACTIVE_PRODUCT(RCCOMPBYPROD.COMPONENT_STATUS_ID) = GE_BOCONSTANTS.CSBYES)
                    AND
                    (DAPS_COMPONENT_TYPE.FSBGETVALIDATE_RETIRE(RCCOMPBYPROD.COMPONENT_TYPE_ID) = GE_BOCONSTANTS.CSBYES)
                THEN

                     UT_TRACE.TRACE('entra al FOR mo_bocnfloadproductdata.LoadChildInRet  hijo [ '||RCPRCOMPONENTLINK.CHILD_COMPONENT_ID||' ]',4);
                    
                    LOADCOMPONENT(  NUPACKAGEID,NUMOTIVEID,SBTAGNAMEPRODMOT,NUFATHCOMPIDMOT,
                                    ISBTAGMOTICOMP,NUCONSECUTIVE,NUCOMPSTATUSID,NULL,
                                    RCPRCOMPONENTLINK.CHILD_COMPONENT_ID, NUELEMCATEGORY , TRUE,
                                    FALSE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,SBPROCESSINSTANCE,NUCOMPIDMOT);
                    
                    CREATEMORETIRECOMP(NUCOMPIDMOT,GNUVOLRETTYP,SBPROCESSINSTANCE);
                    NUCONSECUTIVE := NUCONSECUTIVE + 1;
                END IF;
            END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    






















    





















    PROCEDURE CREATMOTMOVEGENBYPROD
    (
        ISBPROCESSINSTANCE     IN GE_BOINSTANCECONTROL.STYSBNAME,
        INUPRODUCTID           IN PR_PRODUCT.PRODUCT_ID%TYPE
    )
    IS
        NUINDEX                GE_BOINSTANCECONTROL.STYNUINDEX;
        SBPROCESSINSTANCE      GE_BOINSTANCECONTROL.STYSBNAME;

    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.CreatMotMoveGenByProd',5);

        SBPROCESSINSTANCE := ISBPROCESSINSTANCE;

        UT_TRACE.TRACE('isbProcessInstance['||SBPROCESSINSTANCE||']',6);
        UT_TRACE.TRACE('inuProductId ['||INUPRODUCTID||']',6);

        CREATMOTMOVEGEN( SBPROCESSINSTANCE,
                         INUPRODUCTID,
                         GE_BOCONSTANTS.CSBNO,
                         NULL,
                         GE_BOCONSTANTS.CSBNO
                        );

        






        
        IF GE_BOINSTANCECONTROL.FBLACCKEYENTITYSTACK(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS,NUINDEX) THEN
            GE_BOINSTANCECONTROL.DESTROYENTITY(SBPROCESSINSTANCE,NULL,MO_BOCONSTANTS.CSBMO_ADDRESS);
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOCnfLoadProductData.CreatMotMoveGenByProd',5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATMOTMOVEGENBYPROD;

    





















    PROCEDURE LOADADDITIONALDATA
    (
        ISBWORKINSTANCE IN VARCHAR2,
        ISBDATAINSTANCE IN VARCHAR2,
        IRCENTITY       IN GE_BOINSTANCECONTROL.TYRCENTITYSTACK
    )
    IS
        
        RCATTRIBUTE       GE_BOINSTANCECONTROL.TYRCATTRIBUTESTACK;

        
        TYPE RCENTITIESEQUIVALENCES IS RECORD
        (
            SBTARGET_ENTITY_NAME    VARCHAR2(50),
            SBTARGET_ATTRIBUTE_NAME VARCHAR2(50)
        );

        
        TYPE TYTBENTITIESEQUIVALENCES IS TABLE OF RCENTITIESEQUIVALENCES
        INDEX BY VARCHAR2(100);

        
        SBVALUE                 GE_BOINSTANCECONTROL.STYSBVALUE;

        
        TBENTITIESEQUIVALENCES  TYTBENTITIESEQUIVALENCES;

        
        NUATTRIBUTEINDEX        GE_BOINSTANCECONTROL.STYNUINDEX;

        
        NUATTRIBUTE             GE_BOINSTANCECONTROL.STYNUINDEX;
        
        SBSOURCEATTRIBUTENAME   VARCHAR2(500);


        










        PROCEDURE LOADENTITIES
        IS
        BEGIN
            UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.LoadAdditionalData.LoadEntities', 7);

            TBENTITIESEQUIVALENCES('PR_COMPONENT.SERVICE_NUMBER').SBTARGET_ENTITY_NAME := MO_BOCONSTANTS.CSBMO_COMPONENT;
            TBENTITIESEQUIVALENCES('PR_COMPONENT.SERVICE_NUMBER').SBTARGET_ATTRIBUTE_NAME := MO_BOCONSTANTS.CSBSERVICE_NUMBER;

            TBENTITIESEQUIVALENCES('PR_COMPONENT.COMPONENT_ID').SBTARGET_ENTITY_NAME := MO_BOCONSTANTS.CSBMO_COMPONENT;
            TBENTITIESEQUIVALENCES('PR_COMPONENT.COMPONENT_ID').SBTARGET_ATTRIBUTE_NAME := CSBCOMPONENT_ID_PROD;

            TBENTITIESEQUIVALENCES('PR_INTEL_NETW_COMP.PERCENT').SBTARGET_ENTITY_NAME := CSBMO_INTEL_NETW_COMP;
            TBENTITIESEQUIVALENCES('PR_INTEL_NETW_COMP.PERCENT').SBTARGET_ATTRIBUTE_NAME := CSBPERCENT;

            TBENTITIESEQUIVALENCES('MO_COMMENT_COMP.COMMENT_COMP').SBTARGET_ENTITY_NAME := CSBMO_COMMENT_COMP;
            TBENTITIESEQUIVALENCES('MO_COMMENT_COMP.COMMENT_COMP').SBTARGET_ATTRIBUTE_NAME := CSBCOMMENT_COMP;

            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGBUSSY.NUMBER_TO_SEND').SBTARGET_ENTITY_NAME := 'MO_IN_COMP_PROGBUSSY';
            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGBUSSY.NUMBER_TO_SEND').SBTARGET_ATTRIBUTE_NAME := 'NUMBER_TO_SEND';

            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGBUSSY.ORDER_').SBTARGET_ENTITY_NAME := 'MO_IN_COMP_PROGBUSSY';
            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGBUSSY.ORDER_').SBTARGET_ATTRIBUTE_NAME := 'ORDER_';

            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGTIME.WEEK_DAY_ID').SBTARGET_ENTITY_NAME := 'MO_IN_COMP_PROGTIME';
            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGTIME.WEEK_DAY_ID').SBTARGET_ATTRIBUTE_NAME := 'WEEK_DAY_ID';

            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGTIME.INITIAL_HOUR').SBTARGET_ENTITY_NAME := 'MO_IN_COMP_PROGTIME';
            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGTIME.INITIAL_HOUR').SBTARGET_ATTRIBUTE_NAME := 'INITIAL_HOUR';

            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGTIME.FINAL_HOUR').SBTARGET_ENTITY_NAME := 'MO_IN_COMP_PROGTIME';
            TBENTITIESEQUIVALENCES('PR_IN_COMP_PROGTIME.FINAL_HOUR').SBTARGET_ATTRIBUTE_NAME := 'FINAL_HOUR';

            UT_TRACE.TRACE('Finaliza MO_BOCnfLoadProductData.LoadAdditionalData.LoadEntities', 7);
        END LOADENTITIES;

    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.LoadAdditionalData. Instancia Actual[' || ISBWORKINSTANCE || '] Instancia de Datos [' || ISBDATAINSTANCE || ']', 5);

        
        LOADENTITIES;

        
        NUATTRIBUTEINDEX := IRCENTITY.NUFIRSTATTRIBUTE;

        WHILE NUATTRIBUTEINDEX IS NOT NULL LOOP
            
            GE_BOINSTANCECONTROL.GETATTRIBUTE (NUATTRIBUTEINDEX, RCATTRIBUTE);
            SBSOURCEATTRIBUTENAME:= IRCENTITY.SBENTITY || '.' || RCATTRIBUTE.SBATTRIBUTE;

            IF TBENTITIESEQUIVALENCES.EXISTS(SBSOURCEATTRIBUTENAME) THEN
                
                IF GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK (ISBWORKINSTANCE, IRCENTITY.SBGROUP, TBENTITIESEQUIVALENCES(SBSOURCEATTRIBUTENAME).SBTARGET_ENTITY_NAME,  TBENTITIESEQUIVALENCES(SBSOURCEATTRIBUTENAME).SBTARGET_ATTRIBUTE_NAME, NUATTRIBUTE) THEN
                    GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE (ISBWORKINSTANCE, IRCENTITY.SBGROUP, TBENTITIESEQUIVALENCES(SBSOURCEATTRIBUTENAME).SBTARGET_ENTITY_NAME, TBENTITIESEQUIVALENCES(SBSOURCEATTRIBUTENAME).SBTARGET_ATTRIBUTE_NAME, SBVALUE);
                    IF SBVALUE IS NULL THEN
                        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE (ISBWORKINSTANCE, IRCENTITY.SBGROUP, TBENTITIESEQUIVALENCES(SBSOURCEATTRIBUTENAME).SBTARGET_ENTITY_NAME, TBENTITIESEQUIVALENCES(SBSOURCEATTRIBUTENAME).SBTARGET_ATTRIBUTE_NAME, RCATTRIBUTE.SBNEWVALUE);
                    END IF;
                
                ELSE
                    GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBWORKINSTANCE, IRCENTITY.SBGROUP,TBENTITIESEQUIVALENCES(SBSOURCEATTRIBUTENAME).SBTARGET_ENTITY_NAME, TBENTITIESEQUIVALENCES(SBSOURCEATTRIBUTENAME).SBTARGET_ATTRIBUTE_NAME, RCATTRIBUTE.SBNEWVALUE);
                END IF;
            END IF;
            
            NUATTRIBUTEINDEX := RCATTRIBUTE.NUNEXTENTITYATTRIBUTE;
        END LOOP;

        UT_TRACE.TRACE('Finaliza MO_BOCnfLoadProductData.LoadAdditionalData', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADADDITIONALDATA;
    
    
























    PROCEDURE LOADCOMPONENTINTELLNETIND
    (
        INUPRODUCTMOTIVEID  IN PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE,
        IRCCOMPONENT        IN DAPR_COMPONENT.STYPR_COMPONENT,
        IRCCOMPONENTCHILD   IN DAPR_COMPONENT.STYPR_COMPONENT,
        ISBINSTANCEFATHER   IN GE_BOINSTANCECONTROL.STYSBNAME
    )
    IS
        SBINSTANCEDATA      GE_BOINSTANCECONTROL.STYSBNAME;
        SBINSTANCECOMPONENT GE_BOINSTANCECONTROL.STYSBNAME;
        NUPRODMOTIVECOMPID  PS_PROD_MOTIVE_COMP.PROD_MOTIVE_COMP_ID%TYPE;
        NUELEMENTCATEGORYID PS_PROD_MOTIVE_COMP.ELEMENT_CATEGORY_ID%TYPE;
        SBTAGNAME           PS_PROD_MOTIVE_COMP.TAG_NAME%TYPE;
        SBACTIVE            PS_PROD_MOTIVE_COMP.ACTIVE%TYPE;
        TBENTITY            MO_BOUNCOMPOSITIONUTIL.TYTBENTITY;
        RCENTITY            GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
        NUENTITY            GE_BOINSTANCECONTROL.STYNUINDEX;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.LoadComponentIntellNetInd', 5);
        
        SBINSTANCEDATA := MO_BOUNCOMPOSITIONCONSTANTS.CSBDATA_INSTANCE ||
                            '_PRODUCT_COMPONENT_'|| TO_CHAR(IRCCOMPONENTCHILD.COMPONENT_ID);
        GE_BOINSTANCECONTROL.CREATEINSTANCE(SBINSTANCEDATA,NULL);

        
        PR_BOINTELLIGENTNETWORK.INSTANCEDATA
                                (
                                    IRCCOMPONENTCHILD.COMPONENT_ID
                                    ,IRCCOMPONENTCHILD.COMPONENT_TYPE_ID
                                    ,SBINSTANCEDATA
                                );

        
        IF NOT MO_BOUNCOMPOSITIONUTIL.FBLCONFIGURATIONCOMPONENTDATA
                                        (
                                            INUPRODUCTMOTIVEID,
                                            IRCCOMPONENT.COMPONENT_TYPE_ID,
                                            IRCCOMPONENTCHILD.COMPONENT_TYPE_ID,
                                            NUPRODMOTIVECOMPID,
                                            NUELEMENTCATEGORYID,
                                            SBTAGNAME,
                                            SBACTIVE
                                        ) THEN

            UT_TRACE.TRACE('No Encontr� Configuraci�n para la Composici�n',3);
            
            GE_BOINSTANCECONTROL.DESTROYINSTANCE (SBINSTANCEDATA);
            UT_TRACE.TRACE('Finaliza MO_BOCnfLoadProductData.LoadComponentIntellNetInd', 5);
            RETURN;
        END IF;
        UT_TRACE.TRACE('Composici�n:['||NUPRODMOTIVECOMPID||']Categoria:['||NUELEMENTCATEGORYID||']Tag:['||SBTAGNAME||']Activo:['||SBACTIVE||']',3);

        
        IF SBACTIVE <> GE_BOCONSTANTS.CSBYES THEN

            UT_TRACE.TRACE('La Configuraci�n para la Composici�n, No Est� Activa',3);

            
            GE_BOINSTANCECONTROL.DESTROYINSTANCE (SBINSTANCEDATA);
            UT_TRACE.TRACE('Finaliza MO_BOCnfLoadProductData.LoadComponentIntellNetInd', 5);
            RETURN;
        END IF;

        
        IF NOT MO_BOUNCOMPOSITIONUTIL.FBLLOADMOTIVECOMPONENTENTITY(NUPRODMOTIVECOMPID,TBENTITY) THEN

            UT_TRACE.TRACE('No Encontr� Entidades Configuradas para la Composici�n',3);

            
            GE_BOINSTANCECONTROL.DESTROYINSTANCE (SBINSTANCEDATA);
            UT_TRACE.TRACE('Finaliza MO_BOCnfLoadProductData.LoadComponentIntellNetInd', 5);
            RETURN;
        END IF;

        
        MO_BOUNCOMPOSITIONUTIL.GETINSTANCENAME(SBTAGNAME,SBINSTANCECOMPONENT);
        MO_BOUNCOMPOSITIONUTIL.CREATEINSTANCE(ISBINSTANCEFATHER, SBINSTANCECOMPONENT, MO_BOCONFIGURATIONCONTROL.NUCOMPONENTOBJECT, NUPRODMOTIVECOMPID, NUELEMENTCATEGORYID, GE_BOCONSTANTS.INSERT_);
        UT_TRACE.TRACE('Instancia Motivos:['||SBINSTANCECOMPONENT||']',3);

        GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY(SBINSTANCEDATA,NUENTITY);
        WHILE NUENTITY IS NOT NULL LOOP
            GE_BOINSTANCECONTROL.GETENTITY(NUENTITY,RCENTITY);
            UT_TRACE.TRACE('Entidad:['||NUENTITY||']-['||RCENTITY.SBENTITY||']',3);

            
            LOADADDITIONALDATA(SBINSTANCECOMPONENT, SBINSTANCEDATA, RCENTITY);

            GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY(NUENTITY);
        END LOOP;

        
        GE_BOINSTANCECONTROL.DESTROYINSTANCE (SBINSTANCEDATA);
        UT_TRACE.TRACE('Finaliza MO_BOCnfLoadProductData.LoadComponentIntellNetInd', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END LOADCOMPONENTINTELLNETIND;
    

























    PROCEDURE LOADCOMPONENTINTELLNET
    (
        INUCOMPONENTID          IN MO_COMPONENT.COMPONENT_ID_PROD%TYPE,
        INUPRODUCTMOTIVEID      IN PS_PRODUCT_MOTIVE.PRODUCT_MOTIVE_ID%TYPE
    )
	IS
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        CURFCOMPONENT       CONSTANTS.TYREFCURSOR;
        RCCOMPONENT         DAPR_COMPONENT.STYPR_COMPONENT;
        RCCOMPONENTCHILD    DAPR_COMPONENT.STYPR_COMPONENT;
        TBINSTANCEHIERARCHY GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
	BEGIN
        UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.LoadComponentIntellNet',2);
        UT_TRACE.TRACE('Componente:['||INUCOMPONENTID||']Motivo Producto:['||INUPRODUCTMOTIVEID||']',3);

        
        GE_BOINSTANCECONTROL.GETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        UT_TRACE.TRACE('Instancia Actual:['||SBCURRENTINSTANCE||']',3);

        
        GE_BOINSTANCECONTROL.INSTANCEHIERARCHY(SBCURRENTINSTANCE,TBINSTANCEHIERARCHY);
        IF (TBINSTANCEHIERARCHY.COUNT > 0) THEN
            UT_TRACE.TRACE('Ya Existen las Instancias',4);
            
            GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
            RETURN;
        END IF;

        
        RCCOMPONENT := DAPR_COMPONENT.FRCGETRECORD(INUCOMPONENTID);
        UT_TRACE.TRACE('Tipo Componente:['||RCCOMPONENT.COMPONENT_TYPE_ID||']',3);

        
        CURFCOMPONENT := PR_BCCOMPONENT.FRFGETCHILDDIRECTCOMPONENT(INUCOMPONENTID,FALSE);
        FETCH CURFCOMPONENT INTO RCCOMPONENTCHILD;
        WHILE CURFCOMPONENT%FOUND LOOP

            
            LOADCOMPONENTINTELLNETIND(INUPRODUCTMOTIVEID,RCCOMPONENT,RCCOMPONENTCHILD,SBCURRENTINSTANCE);

            FETCH CURFCOMPONENT INTO RCCOMPONENTCHILD;
        END LOOP;
        CLOSE CURFCOMPONENT;

        
        GE_BOINSTANCECONTROL.SETCURRENTDATA(SBCURRENTINSTANCE,SBCURRENTGROUP,SBCURRENTENTITY,SBCURRENTATTRIBUTE);
        UT_TRACE.TRACE('Finaliza MO_BOCnfLoadProductData.LoadComponentIntellNet',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFCOMPONENT);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END LOADCOMPONENTINTELLNET;

    















    PROCEDURE LOADUTILITIESDATABYCOMPONENT
    (
        INUCOMPONENTID          IN  PR_COMPONENT.COMPONENT_ID%TYPE,
        INUADDRESSID            IN  AB_ADDRESS.ADDRESS_ID%TYPE
    )IS
		
		SBINSTANCE                VARCHAR2(2000);
		SBENTIDADDATAUTILITIES    VARCHAR2(2000) := 'MO_DATA_UTILITIES';
		NUGRUPO                   NUMBER := NULL;
		NUPRODUCTID               PR_PRODUCT.PRODUCT_ID%TYPE;
        NUUTILITIESDATAID         PR_DATA_UTILITIES.DATA_UTILITIES_ID%TYPE;
		SBDTVALIDEZ               VARCHAR2(2000);
		NUROUTE                   NUMBER;
		SBMEASURER                VARCHAR2(2000);
		NUOPERSECT                NUMBER;
		TBSEGMENT                 DAAB_SEGMENTS.TYTBAB_SEGMENTS;
		NUSEGINDEX                PLS_INTEGER;
		RCDATAUTILITIES           DAPR_DATA_UTILITIES.STYPR_DATA_UTILITIES;
	BEGIN
	    UT_TRACE.TRACE('Loading Utilities Data for componentId ['||INUCOMPONENTID||']',5);

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE( SBINSTANCE );

        IF(INUCOMPONENTID = GE_BOPARAMETER.FNUGET('DEFAULT_NEIGH_METER') ) THEN
            
            
            
            
            UT_TRACE.TRACE( 'No se encontr� producto vecino -> Se colocan los defaults');
            SBMEASURER      :=  DAPR_COMPONENT.FSBGETSERVICE_NUMBER( GE_BOPARAMETER.FNUGET('DEFAULT_NEIGH_METER') ) ;
            NUOPERSECT      :=  GE_BOPARAMETER.FNUGET('DEFAULT_CONS_SECTOR');
            NUROUTE         :=  GE_BOPARAMETER.FNUGET('DEFAULT_SEQ_CONS_ROU');
            UT_TRACE.TRACE( 'sbMEASURER['||SBMEASURER||']nuOperSect['||NUOPERSECT||']nuRoute['||NUROUTE);

            GE_BOINSTANCECONTROL.ADDATTRIBUTE
                                    (SBINSTANCE,NUGRUPO,SBENTIDADDATAUTILITIES,'MEASURER',
                                     SBMEASURER, TRUE);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE
                                    (SBINSTANCE,NUGRUPO,SBENTIDADDATAUTILITIES,'OPERATING_SECTOR',
                                     NUOPERSECT, TRUE);
            GE_BOINSTANCECONTROL.ADDATTRIBUTE
                                    (SBINSTANCE,NUGRUPO,SBENTIDADDATAUTILITIES,'ROUTE',
                                     NUROUTE, TRUE);
        ELSE
            
    	    NUPRODUCTID := DAPR_COMPONENT.FNUGETPRODUCT_ID(INUCOMPONENTID);
            NUUTILITIESDATAID := PR_BODATAUTILITIES.FNUGETUILITIESDATAID(NUPRODUCTID);

            UT_TRACE.TRACE('Current Instance['||SBINSTANCE||']',6);
            UT_TRACE.TRACE('ProductId['||NUPRODUCTID||']',6);
            UT_TRACE.TRACE('UtilitiesDataId['||NUUTILITIESDATAID||']',6);

            IF( NUPRODUCTID IS NOT NULL ) THEN
                SBMEASURER := DAPR_COMPONENT.FSBGETSERVICE_NUMBER(INUCOMPONENTID);
                TBSEGMENT := PR_BCNETWORKELEMENT.FTBGETOPSECROUTEBYADDID(INUADDRESSID);
                NUSEGINDEX := TBSEGMENT.FIRST;
                NUROUTE := TBSEGMENT(NUSEGINDEX).ROUTE_ID;
                DAPR_DATA_UTILITIES.GETRECORD(NUUTILITIESDATAID,RCDATAUTILITIES);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                                        (SBINSTANCE,NUGRUPO,SBENTIDADDATAUTILITIES,'MEASURER',
                                         SBMEASURER, TRUE);

                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                                        (SBINSTANCE,NUGRUPO,SBENTIDADDATAUTILITIES,'OPERATING_SECTOR',
                                         RCDATAUTILITIES.OPERATING_SECTOR,
                                         TRUE);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                                        (SBINSTANCE,NUGRUPO,SBENTIDADDATAUTILITIES,'IS_EXEMPT_REAC_ENERGY',
                                         RCDATAUTILITIES.IS_EXEMPT_REAC_ENERGY,
                                         TRUE);

                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                                        (SBINSTANCE,NUGRUPO,SBENTIDADDATAUTILITIES,'ROUTE',
                                         NUROUTE, TRUE);
                GE_BOINSTANCECONTROL.ADDATTRIBUTE
                                        (SBINSTANCE,NUGRUPO,SBENTIDADDATAUTILITIES,'VOLTAGE',
                                         RCDATAUTILITIES.VOLTAGE,
                                         TRUE);
            END IF;
        END IF;

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END LOADUTILITIESDATABYCOMPONENT;

    



















    PROCEDURE INITNEXTDOORMETER
    IS
        SBINSTANCE          GE_BOINSTANCECONTROL.STYSBNAME;
        SBFATHERINSTANCE    GE_BOINSTANCECONTROL.STYSBNAME;
        NUADDRESSID         NUMBER;
        NUPRODTYPE          NUMBER;
        NUCOMPONENTID       PR_COMPONENT.COMPONENT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOCnfLoadProductData.InitNextDoorMeter',2);

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTANCE);

        IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBINSTANCE, NULL, 'MO_ADDRESS', 'PARSER_ADDRESS_ID', NUADDRESSID) ) THEN
            
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE, NULL, 'MO_ADDRESS', 'PARSER_ADDRESS_ID', NUADDRESSID);
            UT_TRACE.TRACE('nuAddressId1:['||NUADDRESSID||']',3);
        ELSE
            
            GE_BOINSTANCECONTROL.GETFATHERINSTANCE(SBINSTANCE,SBFATHERINSTANCE);
            IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBFATHERINSTANCE, NULL, 'MO_ADDRESS', 'PARSER_ADDRESS_ID', NUADDRESSID) )
            THEN
                
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBFATHERINSTANCE, NULL, 'MO_ADDRESS', 'PARSER_ADDRESS_ID', NUADDRESSID);
                UT_TRACE.TRACE('nuAddressId1:['||NUADDRESSID||']',3);
            END IF;
        END IF;

        IF ( NUADDRESSID IS NULL ) THEN
            
            IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK('WORK_INSTANCE', NULL, 'MO_BILLING_ADDRESS','ADDRESS_ID', NUADDRESSID) )
            THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE('WORK_INSTANCE', NULL, 'MO_BILLING_ADDRESS','ADDRESS_ID', NUADDRESSID);
                UT_TRACE.TRACE('nuAddressId2:['||NUADDRESSID||']',3);
            END IF;
        END IF;

        IF ( NUADDRESSID IS NULL ) THEN
            
            IF ( GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK('WORK_INSTANCE', NULL, 'MO_PROCESS','EXTERNAL_ADDRESS_ID', NUADDRESSID) )
            THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE('WORK_INSTANCE', NULL, 'MO_PROCESS','EXTERNAL_ADDRESS_ID', NUADDRESSID);
            END IF;
        END IF;

        IF ( NUADDRESSID IS NOT NULL ) THEN
            
            IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(SBINSTANCE, NULL, 'MO_MOTIVE', 'PRODUCT_TYPE_ID', NUPRODTYPE)) THEN
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE, NULL, 'MO_MOTIVE', 'PRODUCT_TYPE_ID', NUPRODTYPE);
            END IF;
            PR_BOCOMPONENT.FINDNEXTDOORPRODCOMP(NUADDRESSID, NUPRODTYPE, NUCOMPONENTID, 3);
            UT_TRACE.TRACE('nuAddressId, nuProdType:['||NUADDRESSID || ']['|| NUPRODTYPE|| ']',3);
            GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NUCOMPONENTID);

            
        END IF;

        IF ( NUCOMPONENTID IS NULL ) THEN
            NUCOMPONENTID := GE_BOPARAMETER.FNUGET('DEFAULT_NEIGH_METER');
            GE_BOINSTANCECONTROL.SETENTITYATTRIBUTE(NUCOMPONENTID);
        END IF;

        UT_TRACE.TRACE('Componente:['||NUCOMPONENTID||']',3);
        
        LOADUTILITIESDATABYCOMPONENT(NUCOMPONENTID, NUADDRESSID);

        UT_TRACE.TRACE('Finaliza MO_BOCnfLoadProductData.InitNextDoorMeter',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INITNEXTDOORMETER;

BEGIN
    LOADPARAM;
END MO_BOCNFLOADPRODUCTDATA;