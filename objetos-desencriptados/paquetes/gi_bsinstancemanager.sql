PACKAGE BODY gi_bsInstanceManager IS
    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO206073';

	
    SBTRACE             VARCHAR2(2000):= 'N';
    NUTRACELEVEL        NUMBER := 30;
    GNUGENERICPRODUCT   NUMBER := MO_BOCONSTANTS.CNUGENERICPRODUCTTYPE ;

    CURSOR CUINSTANCE (NUOBJTYPE NUMBER, SBOBJID NUMBER)IS
        SELECT INSTANCENAME,FATHERINSTANCE, OBJECTTYPEID, OBJECTID
        FROM GI_TMP_INSTANCE
        WHERE OBJECTTYPEID = NUOBJTYPE
        AND   OBJECTID = SBOBJID;

    PROCEDURE SETTRACEON IS
    BEGIN
        SBTRACE := 'Y';
        NUTRACELEVEL := 30;
    END;
    
    











    PROCEDURE SETTRACEON (
        INUTRACELEVEL   IN  NUMBER,
        ISBTRACEDATE    IN  VARCHAR2)
    IS
    BEGIN
        IF (TO_CHAR(SYSDATE,'dd/mm/yyyy') = ISBTRACEDATE) THEN
            NUTRACELEVEL := INUTRACELEVEL;
            SBTRACE := 'Y';
        END IF;
    END;

    PROCEDURE SETTRACEOFF IS
    BEGIN
        SBTRACE := 'N';
    END;
    
	
	
	
	PROCEDURE INITVARERROR (
         ONUERRORCODE  OUT  NUMBER,
         OSBERRORTEXT  OUT  VARCHAR2)
	IS
	BEGIN
         ONUERRORCODE := GE_BOCONSTANTS.CNUSUCCESS;
         OSBERRORTEXT := GE_BOCONSTANTS.CSBNOMESSAGE;
	END;

    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
    
        RETURN CSBVERSION;
    
    END;
    
    PROCEDURE INITREFCURSOR
    (
        ORFREFCURSOR    IN  OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        SBQUERY  VARCHAR2(100) := 'SELECT NULL DUMMY FROM DUAL WHERE 1=2';
    BEGIN
       IF (NOT ORFREFCURSOR%ISOPEN) THEN
            OPEN ORFREFCURSOR FOR SBQUERY;
       END IF;
    END;














	
	PROCEDURE GETPRODTYPEINST (
        ONUPRODTYPEID   IN OUT  NUMBER
    ) IS
        NUINDEX  NUMBER;
    BEGIN
        ONUPRODTYPEID := NULL;
        
        IF  (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK ( 'WORK_INSTANCE',NULL,
                        'MO_PACKAGES','PRODUCT_TYPE_ID', NUINDEX))
        THEN
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE('WORK_INSTANCE',
              NULL,'MO_PACKAGES','PRODUCT_TYPE_ID',ONUPRODTYPEID);
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRODTYPEINST;

    PROCEDURE LOADPARAMETER (
        ISBINSTANCE     IN  VARCHAR2,
        ISBOBJECT_TYPE  IN  NUMBER,
        ISBOBJECT_ID    IN  NUMBER,
        ONUERRORCODE      OUT   NUMBER,
        OSBERRORTEXT      OUT   VARCHAR2
    )
    IS
        SBENTPRODMOTIVE     NUMBER:= GE_BOENTITY.GETENTITYIDBYNAME('PS_PRODUCT_MOTIVE');
        SBENTMOTIVECOMP     NUMBER:= GE_BOENTITY.GETENTITYIDBYNAME('PS_PROD_MOTIVE_COMP');
        SBENTPACKAGETYPE    NUMBER:= GE_BOENTITY.GETENTITYIDBYNAME('PS_PACKAGE_TYPE');

        RCPRODMOTIVE CONSTANTS.TYREFCURSOR;
        RCMOTIVECOMP CONSTANTS.TYREFCURSOR;
        RCPACKTYPEPARAM CONSTANTS.TYREFCURSOR;
        
        RCPARAMETER  PS_BCPARAMETER.STYPS_PROD_MOTI_PARAM;

        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (RCMOTIVECOMP%ISOPEN) THEN CLOSE RCMOTIVECOMP; END IF;
            IF (RCPRODMOTIVE%ISOPEN) THEN CLOSE RCPRODMOTIVE; END IF;
            IF (RCPACKTYPEPARAM%ISOPEN) THEN CLOSE RCPACKTYPEPARAM; END IF;

        END;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        IF (ISBOBJECT_TYPE = SBENTPACKAGETYPE) THEN
            UT_TRACE.TRACE('Load Parameter - Paquete ['||ISBOBJECT_TYPE||'-'||ISBOBJECT_ID||']',5);

            RCPACKTYPEPARAM := PS_BCPARAMETER.FRFGETPACKTYPEPARAM(ISBOBJECT_ID);

            LOOP
            
                FETCH RCPACKTYPEPARAM INTO RCPARAMETER;
                EXIT WHEN RCPACKTYPEPARAM%NOTFOUND;
                GE_BOINSTANCECONTROL.ADDATTRIBUTE(ISBINSTANCE,NULL,'PROCESS_PARAMETER',
                                        RCPARAMETER.NAME_ATTRIBUTE, RCPARAMETER.VALUE);

            
            END LOOP;
            CLOSE RCPACKTYPEPARAM;

            
            
        END IF;

        IF (ISBOBJECT_TYPE = SBENTMOTIVECOMP) THEN
            UT_TRACE.TRACE('Load Parameter - componente ['||ISBOBJECT_TYPE||'-'||ISBOBJECT_ID||']',5);

            RCMOTIVECOMP := PS_BCPARAMETER.FRFGETMOTCOMPPARAM(ISBOBJECT_ID);
            
            LOOP
            
                FETCH RCMOTIVECOMP INTO RCPARAMETER;
                EXIT WHEN RCMOTIVECOMP%NOTFOUND;
                GE_BOINSTANCECONTROL.ADDATTRIBUTE(ISBINSTANCE,NULL,'PROCESS_PARAMETER',
                                        RCPARAMETER.NAME_ATTRIBUTE, RCPARAMETER.VALUE);
                                        
            
            END LOOP;
            CLOSE RCMOTIVECOMP;

        END IF;
        IF (ISBOBJECT_TYPE = SBENTPRODMOTIVE) THEN
            UT_TRACE.TRACE('Load Parameter - producto motivo['||ISBOBJECT_TYPE||'-'||ISBOBJECT_ID||']',5);
            RCPRODMOTIVE := PS_BCPARAMETER.FRFGETPRODMOTPARAM(ISBOBJECT_ID);
            LOOP
            
                FETCH RCPRODMOTIVE INTO RCPARAMETER;
                EXIT WHEN RCPRODMOTIVE%NOTFOUND;
                GE_BOINSTANCECONTROL.ADDATTRIBUTE(ISBINSTANCE,NULL,'PROCESS_PARAMETER',
                                        RCPARAMETER.NAME_ATTRIBUTE, RCPARAMETER.VALUE);

            
            END LOOP;
            CLOSE RCPRODMOTIVE;

        END IF;

        CLOSECURSOR ;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            CLOSECURSOR ;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
	
    













	
	PROCEDURE INITMANAGER (
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2  )
    IS
	BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
	    
		GE_BOINSTANCECONTROL.INITINSTANCEMANAGER ;
		
		MO_BOUNCOMPOSITIONUTIL.INIT ;
	
        MO_BOCONFIGURATIONCONTROL.SETPACKAGEOBJECT(GE_BOENTITY.GETENTITYIDBYNAME('PS_PACKAGE_TYPE'));
        MO_BOCONFIGURATIONCONTROL.SETMOTIVEOBJECT(GE_BOENTITY.GETENTITYIDBYNAME('PS_PRODUCT_MOTIVE'));
        MO_BOCONFIGURATIONCONTROL.SETCOMPONENTOBJECT(GE_BOENTITY.GETENTITYIDBYNAME('PS_PROD_MOTIVE_COMP'));
	
	    GE_BOINSTANCECONTROL.SETATTRIBUTENAME(GE_BOINSTANCECONSTANTS.CNUDSPLY_NAME);
	    
	    IF ( SBTRACE = GE_BOCONSTANTS.CSBYES ) THEN
          UT_TRACE.SETLEVEL (NUTRACELEVEL);
          UT_TRACE.SETOUTPUT (UT_TRACE.CNUTRACE_OUTPUT_DB);
          GE_BOINSTANCECONTROL.SETDSPLYMODE (GE_BOINSTANCECONSTANTS.CNUUT_TRACE);
        END IF;
		
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
    END;

    


















	PROCEDURE CREATEINSTANCEWORK (
        OSBNAME         OUT VARCHAR2,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2 )
	IS
	BEGIN
		
        INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

		OSBNAME :=  MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE;
		
		GE_BOINSTANCECONTROL.CREATEINSTANCE (OSBNAME, NULL);
		
    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
    END;

    


































    PROCEDURE CREATEINSTANCE (
        ISBNAMEINIT     IN  VARCHAR2,
        ISBOBJECT_TYPE  IN  NUMBER,
        ISBOBJECT_ID    IN  NUMBER,
        ISBPARENT       IN  VARCHAR2,
        OSBCREATENAME   OUT VARCHAR2,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2
    )
	IS
		

        SBVALUE  GE_BOINSTANCECONTROL.STYSBVALUE;
        SBOBJTYPEPROCESS  VARCHAR2(200) := MO_BOCONFIGURATIONCONTROL.FNUGETPROCESSOBJECT ;

	BEGIN
		
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

		MO_BOUNCOMPOSITIONUTIL.GETINSTANCENAME (ISBNAMEINIT, OSBCREATENAME);

        IF (ISBOBJECT_TYPE != MO_BOCONSTANTS.CNUGI_PROCESSENTITY) THEN
            MO_BOUNCOMPOSITIONUTIL.CREATEINSTANCE (ISBPARENT, OSBCREATENAME, ISBOBJECT_TYPE, ISBOBJECT_ID, NULL, GE_BOCONSTANTS.INSERT_);
            LOADPARAMETER ( OSBCREATENAME,ISBOBJECT_TYPE,ISBOBJECT_ID, ONUERRORCODE, OSBERRORTEXT);
        ELSE
            MO_BOUNCOMPOSITIONUTIL.CREATEINSTANCE (ISBPARENT, OSBCREATENAME, SBOBJTYPEPROCESS, ISBOBJECT_ID, NULL, GE_BOCONSTANTS.INSERT_);
        END IF;

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
    END;

    

















    PROCEDURE SETATTRIBUTEINITEXPRESSIONS
    (
        ISBINSTANCE       IN VARCHAR2,
        ISBGROUP          IN VARCHAR2,
        ISBENTITY         IN VARCHAR2,
        ISBATTRIBUTE      IN VARCHAR2,
        INUEXPRESSION     IN NUMBER,
        ONUERRORCODE      OUT   NUMBER,
        OSBERRORTEXT      OUT   VARCHAR2
    )
	IS
		
        NUEXPRESSIONTYPE  NUMBER;
	BEGIN
		
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
		
		NUEXPRESSIONTYPE := GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION;
		
        GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS(ISBINSTANCE,ISBGROUP,
                    ISBENTITY, ISBATTRIBUTE, INUEXPRESSION, NUEXPRESSIONTYPE );

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
    END;

    



























































	PROCEDURE PROCESSINSTANCE
    (
        ONUERRORCODE            OUT NUMBER,
        OSBERRORTEXT            OUT VARCHAR2,
        IBOACTIVEEXECUTEACTION  BOOLEAN DEFAULT TRUE,
        IBOUPDPROCESS           BOOLEAN DEFAULT FALSE
    )
	IS
 	    SBINSTCURRENT VARCHAR2(2000);
	BEGIN
		
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
		
        MO_BOREGISTERCONTROLLER.SETONALLPROCESS;

        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNULOAD_CONFIGURATION,             FALSE);
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUGET_DOM,                        FALSE);
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUUNCOMPOSITION_UTIL_INIT,        FALSE);
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNULOAD_XML,                       FALSE);
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUATTR_PROCESS_EXPRESSION,        FALSE);
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUVALIDATE_ADDRESS_TYPE,          TRUE);
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNULOAD_GUI,                       TRUE);
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUVALIDATE_REQUIRED_INSTANCES,    FALSE);
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUVALIDATE_SERVICE_CLASS,         FALSE);
        MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUREPLICATE,                      FALSE);

        
        IF (NOT IBOACTIVEEXECUTEACTION) THEN

            
            MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUEXECUTE_ACTION_ATTEND, FALSE);
        END IF;

        

        IF (IBOACTIVEEXECUTEACTION) THEN
            MO_BOUNCOMPOSITIONUTIL.SETSAVEPOINT  ;
        END IF;

        

        IF (IBOUPDPROCESS) THEN
            MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUGENERATE_ANS, FALSE);
            MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUGENERATE_ACTIVITY, FALSE);
            MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUREGISTER_PETITION, FALSE);
            MO_BOREGISTERCONTROLLER.SETPROCESSEJECUTION (MO_BOUNCOMPOSITIONCONSTANTS.CNUREGISTER_BATCH, FALSE);
        END IF;

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTCURRENT);
		MO_BOREGISTERCONTROLLER.REGISTRY (FALSE) ;
        GE_BOINSTANCECONTROL.SETCURRENTDATA( SBINSTCURRENT, NULL, NULL, NULL);

    EXCEPTION
		WHEN EX.CONTROLLED_ERROR THEN
            IF (IBOACTIVEEXECUTEACTION) THEN
    		    MO_BOUNCOMPOSITIONUTIL.ROLLBACKSAVEPOINT ;
            END IF;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
		WHEN OTHERS THEN
            IF (IBOACTIVEEXECUTEACTION) THEN
    		    MO_BOUNCOMPOSITIONUTIL.ROLLBACKSAVEPOINT ;
            END IF;
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORTEXT);
    END;

    



















    PROCEDURE  ADDATTRIBUTE
    (
        ISBINSTANCE  IN VARCHAR2,
        ISBGROUP     IN VARCHAR2,
        ISBENTITY    IN VARCHAR2,
        ISBATTRIBUTE IN VARCHAR2,
        ISBVALUE     IN VARCHAR2,
        ONUERRORCODE     OUT NUMBER,
        OSBERRORTEXT     OUT VARCHAR2
    )
    IS
        NUINDEX NUMBER;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        IF NOT (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK ( ISBINSTANCE,
                        ISBGROUP, ISBENTITY, ISBATTRIBUTE, NUINDEX))
        THEN

            GE_BOINSTANCECONTROL.ADDATTRIBUTE (ISBINSTANCE, ISBGROUP,
             ISBENTITY, ISBATTRIBUTE, ISBVALUE);
             
        ELSE
        
            GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(ISBINSTANCE, ISBGROUP,
             ISBENTITY, ISBATTRIBUTE, ISBVALUE);
             
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	       ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;

    
















    PROCEDURE STOPINSTANCEMANAGER
    (
        ONUERRORCODE OUT NUMBER,
        OSBERRORTEXT OUT VARCHAR2
    )
    IS
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        GE_BOINSTANCECONTROL.STOPINSTANCEMANAGER;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;

    
















    PROCEDURE SETCURRENTINSTANCE
    (   ISBINSTANCE     IN VARCHAR2,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        GE_BOINSTANCECONTROL.SETCURRENTDATA(ISBINSTANCE,NULL,NULL,NULL);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;

    
















    PROCEDURE SETATTRIBUTEVALUE
    (
        ISBINSTANCE  IN VARCHAR2,
        ISBGROUP     IN VARCHAR2,
        ISBENTITY    IN VARCHAR2,
        ISBATTRIBUTE IN VARCHAR2,
        ISBVALUE     IN VARCHAR2,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2
    )IS
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        GE_BOINSTANCECONTROL.SETATTRIBUTENEWVALUE(ISBINSTANCE,ISBGROUP,ISBENTITY,
                                         ISBATTRIBUTE,ISBVALUE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    
















    PROCEDURE GETATTRIBUTEVALUE
    (
        ISBINSTANCE  IN VARCHAR2,
        ISBGROUP     IN VARCHAR2,
        ISBENTITY    IN VARCHAR2,
        ISBATTRIBUTE IN VARCHAR2,
        OSBVALUE    OUT VARCHAR2,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2
    )IS
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(ISBINSTANCE,ISBGROUP,ISBENTITY,
                                        ISBATTRIBUTE,OSBVALUE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	       ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    
















    PROCEDURE GETCURRENTINSTANCE
    (
        OSBINSTANCE  OUT VARCHAR2,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2
    ) IS
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(OSBINSTANCE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	       ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    

























    
    PROCEDURE EXECEXPRESSIONATTFRAMEFORSALE
    (
        ISBINSTANCE         IN  VARCHAR2,
        INUOBJECT_TYPE      IN  NUMBER,
        INUOBJECT_ID        IN  NUMBER,
        INUFRAME            IN  NUMBER,
        ISBPRODUCTTYPEIDS   IN  VARCHAR2,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    ) IS

        NUINDEX         NUMBER;
        CUCOMPOSITION   CONSTANTS.TYREFCURSOR;
        RCREG           GI_TMP_CONFIGURATION%ROWTYPE;
        SBISVISIBLE VARCHAR2(1);
        SBGLOBALSELECT  VARCHAR2(2000);
        
        SBINSTCURRENT       VARCHAR2(2000);
        NUEXPRESSIONTYPE    NUMBER;
        NUEXPVALIDTYPE      NUMBER;

        NUVALIDEXPRESSIONTYPE NUMBER;
        SBVALOR VARCHAR2(2000);
        SBGRUPO             VARCHAR2(2000) := NULL;
        
        FUNCTION  GENSELECT
        RETURN VARCHAR2
        IS
            SBSELECT    VARCHAR2(2000);

        BEGIN
            
            SBSELECT := 'SELECT *
                        FROM  Gi_Tmp_Configuration
                        WHERE Gi_Tmp_Configuration.external_type_id = :inuObject_Id ' ||
                        'AND   Gi_Tmp_Configuration.entity_type_id = :inuObject_type ' ||
                        'AND   Gi_Tmp_Configuration.frame_id = :inuFrame ' ||
                        'AND   (Gi_Tmp_Configuration.is_visible = ''Y'' OR' ||
                        '       Gi_Tmp_Configuration.is_visible = ''C'' OR' ||
                        '       Gi_Tmp_Configuration.is_visible = :sbIsVisible '||') ';

            IF(ISBPRODUCTTYPEIDS IS NOT NULL) THEN
                SBSELECT := SBSELECT||'
                        AND Gi_Tmp_Configuration.external_root_id IN ('||ISBPRODUCTTYPEIDS||','||GNUGENERICPRODUCT||')';
            END IF;

            SBSELECT := SBSELECT||'
                        ORDER BY Gi_Tmp_Configuration.process_sequence';

            UT_TRACE.TRACE('==>>[Select [ '||SBSELECT||' ]',10);
            
            RETURN SBSELECT;
        END;

        FUNCTION HASVALUE (
            ISBINSTANCE  IN VARCHAR2,
            ISBGRUPO     IN VARCHAR2,
            ISBENTITY_NAME   IN VARCHAR2,
            ISBATTRIBUTE_NAME    IN VARCHAR2
        )
        RETURN BOOLEAN
        IS
            SBVALUE VARCHAR2(2000):= NULL;
        BEGIN
           RETURN FALSE;
        END;
        
        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF( CUCOMPOSITION%ISOPEN) THEN  CLOSE CUCOMPOSITION  ; END IF;
            NULL;
        END;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        NUEXPRESSIONTYPE := GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION;
        NUEXPVALIDTYPE   := GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION;

        SBISVISIBLE := 'X';
        
        SBGLOBALSELECT := GENSELECT;
        
        UT_TRACE.TRACE('==>>[Antes de ejecutar el using ',10);
        
        OPEN CUCOMPOSITION FOR SBGLOBALSELECT USING INUOBJECT_ID, INUOBJECT_TYPE, INUFRAME, SBISVISIBLE;
        
        UT_TRACE.TRACE('==>>[Despues de ejecutar el using ',10);
        
        
        
            LOOP
               FETCH CUCOMPOSITION INTO RCREG;
               EXIT WHEN CUCOMPOSITION%NOTFOUND;
               
                IF ( RCREG.INIT_EXPRESSION_ID IS NOT NULL OR
                     RCREG.INIT_BASIC_EXP_ID IS NOT NULL
                 ) THEN
                    
                    
                    BEGIN
                        GE_BOINSTANCECONTROL.EXEATTEXPRESSIONS(ISBINSTANCE,SBGRUPO,
                                                        RCREG.ENTITY_NAME,
                                                        RCREG.ATTRIBUTE_NAME,
                                                        NUEXPRESSIONTYPE);
                     EXCEPTION
                        WHEN OTHERS THEN
                            NULL;




                     END;

                END IF;

            END LOOP;
        
        
        CLOSECURSORS ;
        
        UT_TRACE.TRACE('==>>[Fin ExecExpressionAttFrameForSale ',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSORS ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            CLOSECURSORS ;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    







    PROCEDURE EXECEXPRESSIONATTFRAME
    (
        ISBINSTANCE     IN  VARCHAR2,
        INUOBJECT_TYPE  IN  NUMBER,
        INUOBJECT_ID    IN  NUMBER,
        INUFRAME        IN  NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        NUPRODUCTTYPEID NUMBER;
    BEGIN
           INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

	    UT_TRACE.TRACE('==>>[Inicia ExecExpressionAttFrame [ isbInstance '|| ISBINSTANCE ||' inuObject_type '|| INUOBJECT_TYPE ||' inuObject_id ' || INUOBJECT_ID ||'  inuFrame '|| INUFRAME ||' ]',10);

        GETPRODTYPEINST(NUPRODUCTTYPEID);

        UT_TRACE.TRACE('==>>[Tipo de producto Instanciado [ '||TO_CHAR(NUPRODUCTTYPEID)||' ]',10);

        EXECEXPRESSIONATTFRAMEFORSALE
        (
            ISBINSTANCE,
            INUOBJECT_TYPE,
            INUOBJECT_ID,
            INUFRAME,
            TO_CHAR(NUPRODUCTTYPEID),
            ONUERRORCODE,
            OSBERRORTEXT
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;

    































    PROCEDURE ADDATTRIBUTEFRAME
    (
        ISBINSTANCE     IN  VARCHAR2,
        INUOBJECT_TYPE  IN  NUMBER,
        INUOBJECT_ID    IN  NUMBER,
        INUFRAME        IN  NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    ) IS
    
        NUPRODTYPEID    NUMBER;
        
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
	    
	    UT_TRACE.TRACE('==>>[Inicia AddAttributeFrame  isbInstance[ '||ISBINSTANCE||' , '|| INUOBJECT_TYPE||' , '|| INUOBJECT_ID||' , '|| INUFRAME ||' ]',10);

        GETPRODTYPEINST(NUPRODTYPEID);
        
        UT_TRACE.TRACE('==>>[Productos Instanciado [ '||TO_CHAR(NUPRODTYPEID)||' ]',10);

        ADDATTRIBUTEFRAMEFORSALE
        (
            ISBINSTANCE,
            INUOBJECT_TYPE,
            INUOBJECT_ID,
            INUFRAME,
            TO_CHAR(NUPRODTYPEID),
            ONUERRORCODE,
            OSBERRORTEXT
        );
                                
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;

    




















    PROCEDURE SETEXPRESSIONATTRIBUTEINSTANCE
    (
        ISBINSTANCENAME IN VARCHAR2,
        ISBGROUPNAME    IN VARCHAR2,
        ISBENTITYNAME   IN VARCHAR2,
        ISBATTRIBUTENAME IN VARCHAR2,
        INUINITEXPRESSION       GI_TMP_CONFIGURATION.INIT_BASIC_EXP_ID%TYPE,
        INUVALIDATEEXPRESSION   GI_TMP_CONFIGURATION.VALID_BASIC_EXP_ID%TYPE
    )
    IS
    BEGIN
        IF (INUINITEXPRESSION IS NOT NULL) THEN
            GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS(ISBINSTANCENAME,ISBGROUPNAME,
                      ISBENTITYNAME,
                      ISBATTRIBUTENAME,
                      INUINITEXPRESSION,
                      GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION );
        END IF;
        IF (INUVALIDATEEXPRESSION IS NOT NULL) THEN
           GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS(ISBINSTANCENAME,ISBGROUPNAME,
                      ISBENTITYNAME,
                      ISBATTRIBUTENAME,
                      INUVALIDATEEXPRESSION,
                      GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION);
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETEXPRESSIONATTRIBUTEINSTANCE;

    


























    PROCEDURE ADDATTRIBUTEINFRAME
    (
        ISBINSTANCE         IN  VARCHAR2,
        ISBGROUPNAME        IN  VARCHAR2,
        ISBENTITYNAME       IN  VARCHAR2,
        ISBATTRIBUTENAME    IN  VARCHAR2,
        ISBMIRRENTITYNAME   IN  VARCHAR2,
        ISBMIRRATTRIBNAME   IN  VARCHAR2,
        INUINITEXPRID       IN  NUMBER,
        INUINITBASICEXPID   IN  NUMBER,
        INUVALIDEXPRID      IN  NUMBER,
        INUVALIDBASICEXPID  IN  NUMBER,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2
    )
    IS
    BEGIN
        
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(ISBINSTANCE,ISBGROUPNAME,
                            ISBENTITYNAME,ISBATTRIBUTENAME,NULL);

            
            IF (ISBMIRRENTITYNAME IS NOT NULL) THEN

                MO_BOUNCOMPOSITIONUTIL.ADDMIRRORATTRIBUTE(ISBINSTANCE,ISBGROUPNAME,
                     ISBENTITYNAME, ISBATTRIBUTENAME,
                     ISBMIRRENTITYNAME,ISBMIRRATTRIBNAME,
                     MO_BOUNCOMPOSITIONCONSTANTS.CNUNORMAL_MIRROR);

            END IF;

            SETEXPRESSIONATTRIBUTEINSTANCE
            (
                ISBINSTANCE,
                ISBGROUPNAME,
                ISBENTITYNAME,
                ISBATTRIBUTENAME,
                NVL(INUINITEXPRID,INUINITBASICEXPID),
                NVL(INUVALIDEXPRID,INUVALIDBASICEXPID)
            );

            UT_TRACE.TRACE('Establecer regla al atributo: '||NVL(INUINITEXPRID,INUINITBASICEXPID),1);

     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END ADDATTRIBUTEINFRAME;


     























    PROCEDURE ADDATTRIBUTEFRAMEFORSALE
    (
        ISBINSTANCE     IN  VARCHAR2,
        INUOBJECT_TYPE  IN  NUMBER,
        INUOBJECT_ID    IN  NUMBER,
        INUFRAME        IN  NUMBER,
        ISBPRODTYPEIDS   IN  VARCHAR2,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    ) IS

        
        NUINDEX         NUMBER;
        SBSELECT        VARCHAR2(2000);
        CUATFRAME       CONSTANTS.TYREFCURSOR ;
        RCREG GI_TMP_CONFIGURATION%ROWTYPE;

        SBINSTCURRENT       VARCHAR2(2000);
        NUEXPRESSIONTYPE    NUMBER;
        NUVALIDEXPRESSIONTYPE NUMBER;
        SBVALOR VARCHAR2(2000);
        SBVALUE VARCHAR2(2000);
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        UT_TRACE.TRACE('==>>[Tipos de Producto [ '||TO_CHAR(ISBPRODTYPEIDS)||' ]',10);

        NUEXPRESSIONTYPE := GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION;
        NUVALIDEXPRESSIONTYPE := GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION;
        UT_TRACE.TRACE('==>>[AddAtributeFrame',10);

        SBSELECT :=  'SELECT *
        FROM  Gi_Tmp_Configuration
        WHERE Gi_Tmp_Configuration.external_type_id = :inuObject_Id '||
        ' AND   Gi_Tmp_Configuration.entity_type_id = :inuObject_type '||
        ' AND   Gi_Tmp_Configuration.frame_id = :inuFrame '||
        ' AND   ( Gi_Tmp_Configuration.group_attribute_type <> ''Y''
                AND Gi_Tmp_Configuration.parent_group_attr_id IS null )'||
        ' AND   (Gi_Tmp_Configuration.is_visible = ''Y'' OR
                Gi_Tmp_Configuration.is_visible = ''C'' OR
                Gi_Tmp_Configuration.is_visible = ''X'' )';
        IF(ISBPRODTYPEIDS IS NOT NULL) THEN
            SBSELECT := SBSELECT||'AND Gi_Tmp_Configuration.external_root_id IN ('||ISBPRODTYPEIDS||','||GNUGENERICPRODUCT||')';
        END IF;
        SBSELECT := SBSELECT||' ORDER BY Gi_Tmp_Configuration.process_sequence';

        UT_TRACE.TRACE('==>>[Select [ '||SBSELECT||' ]',10);

        OPEN CUATFRAME FOR SBSELECT USING INUOBJECT_ID, INUOBJECT_TYPE, INUFRAME;

        LOOP
        FETCH  CUATFRAME INTO RCREG;
        EXIT WHEN CUATFRAME%NOTFOUND;

            UT_TRACE.TRACE('==>>['|| ISBINSTANCE ||']['|| RCREG.ENTITY_NAME ||']['|| RCREG.ATTRIBUTE_NAME ||']['|| RCREG.DEFAULT_VALUE ||']',15);

            ADDATTRIBUTEINFRAME
            (
                ISBINSTANCE         ,
                NULL                ,
                RCREG.ENTITY_NAME   ,
                RCREG.ATTRIBUTE_NAME ,
                RCREG.MIRROR_ENTITY_NAME ,
                RCREG.MIRROR_ATTRIBUTE_NAME ,
                RCREG.INIT_EXPRESSION_ID ,
                RCREG.INIT_BASIC_EXP_ID  ,
                RCREG.VALID_EXPRESSION_ID      ,
                RCREG.VALID_BASIC_EXP_ID  ,
                ONUERRORCODE    ,
                OSBERRORTEXT
            );

            IF ( ONUERRORCODE <> 0) THEN
                CLOSE CUATFRAME;
                RETURN ;
            END IF;

        
        END LOOP;
        CLOSE CUATFRAME;

        EXECEXPRESSIONATTFRAMEFORSALE (ISBINSTANCE ,INUOBJECT_TYPE,INUOBJECT_ID,
                                INUFRAME, ISBPRODTYPEIDS, ONUERRORCODE, OSBERRORTEXT);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;


    






















    PROCEDURE ADDATTRIBUTEFRAMEBYEXT
    (
        ISBINSTANCE         IN  VARCHAR2,
        INUENTITYTYPE       IN  NUMBER,
        INUEXTERNALTYPE     IN  NUMBER,
        INUEXTERNALROOT     IN  NUMBER,
        INUFRAME            IN  NUMBER,
        INUPARENTCONF       IN  NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        CURSOR CUATFRAME
        IS
           SELECT *
           FROM GI_TMP_CONFIGURATION
           WHERE GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUENTITYTYPE
                AND  GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUEXTERNALTYPE
                AND  GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID = INUEXTERNALROOT
                AND  GI_TMP_CONFIGURATION.FRAME_ID   = INUFRAME
                AND  NVL(GI_TMP_CONFIGURATION.PARENT_CONF_ID,-1) = NVL(INUPARENTCONF,-1)
                AND  GI_TMP_CONFIGURATION.IS_VISIBLE IN ('Y','C','X')
                AND  GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 2;
    BEGIN
        FOR RCREG IN CUATFRAME LOOP
            SETEXPRESSIONATTRIBUTEINSTANCE
            (
                ISBINSTANCE,
                NULL,
                RCREG.ENTITY_NAME,
                RCREG.ATTRIBUTE_NAME,
                NVL(RCREG.INIT_EXPRESSION_ID,RCREG.INIT_BASIC_EXP_ID),
                NVL(RCREG.VALID_EXPRESSION_ID,RCREG.VALID_BASIC_EXP_ID)
            );
         END LOOP;
    EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END ADDATTRIBUTEFRAMEBYEXT;


    PROCEDURE ADDATTRIBUTEFRAMEWEB
    (
        ISBINSTANCE         IN VARCHAR2,
        INUENTITYTYPEID     IN GI_TMP_CONFIGURATION.ENTITY_TYPE_ID%TYPE,
        INUEXTERNALTYPEID   IN GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID%TYPE,
        INUFRAMEID          IN GI_TMP_CONFIGURATION.FRAME_ID%TYPE,
        INUENTITYID         IN GI_TMP_CONFIGURATION.ENTITY_ID%TYPE,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        NUPRODTYPEID  NUMBER;

        CURSOR CUATFRAME IS
        SELECT *
        FROM  GI_TMP_CONFIGURATION
        WHERE GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUEXTERNALTYPEID
        AND   GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUENTITYTYPEID
        AND   GI_TMP_CONFIGURATION.FRAME_ID = INUFRAMEID
        AND   (GI_TMP_CONFIGURATION.IS_VISIBLE = 'Y' OR
               GI_TMP_CONFIGURATION.IS_VISIBLE = 'C' OR
               GI_TMP_CONFIGURATION.IS_VISIBLE = 'W' )
        AND (NVL(GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID,-1) = NVL(NUPRODTYPEID,-1)
        OR  GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID = GNUGENERICPRODUCT )
        ORDER BY GI_TMP_CONFIGURATION.PROCESS_SEQUENCE;

        CURSOR CUATFRAMEPARENT IS
        SELECT *
        FROM GI_TMP_CONFIGURATION
        WHERE GI_TMP_CONFIGURATION.FRAME_ID = INUFRAMEID
        AND   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1;

        RCATRPARENTFRAME    CUATFRAMEPARENT%ROWTYPE;
        NUEXPRESSIONTYPE    NUMBER;
        NUVALIDEXPRESSIONTYPE NUMBER;
        SBVALUE VARCHAR2(2000);
        NUIDPERSON            NUMBER;
        NURECEPTYPEID         NUMBER;

        TBSBATTRIBUTES    OWA_OPT_LOCK.VCARRAY;
    BEGIN
        UT_TRACE.TRACE('Inicia GI_BSInstanceManager.AddAttributeFrameWEB. Instancia:['||ISBINSTANCE||']Frame:['||INUFRAMEID||']',9);
        UT_TRACE.TRACE('Tipo Entidad:['||INUENTITYTYPEID||']External Type:['||INUEXTERNALTYPEID||']Entidad:['||INUENTITYID||']',9);

	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
        NUEXPRESSIONTYPE := GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION;
        NUVALIDEXPRESSIONTYPE := GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION;

        GETPRODTYPEINST(NUPRODTYPEID);

        OPEN CUATFRAMEPARENT;
        FETCH CUATFRAMEPARENT INTO RCATRPARENTFRAME;
        CLOSE CUATFRAMEPARENT;

        FOR RCREG IN CUATFRAME LOOP
            UT_TRACE.TRACE('Enidad:['|| RCREG.ENTITY_NAME || ']Atributo:['|| RCREG.ATTRIBUTE_NAME ||']Valor:['|| RCREG.DEFAULT_VALUE ||']',10);

            
            GE_BOINSTANCECONTROL.ADDATTRIBUTE(ISBINSTANCE,NULL, RCREG.ENTITY_NAME,RCREG.ATTRIBUTE_NAME, NULL);

            
            IF (RCREG.MIRROR_ENTITY_NAME IS NOT NULL) THEN

                MO_BOUNCOMPOSITIONUTIL.ADDMIRRORATTRIBUTE   (
                                                            ISBINSTANCE,NULL,
                                                            RCREG.ENTITY_NAME,
                                                            RCREG.ATTRIBUTE_NAME,
                                                            RCREG.MIRROR_ENTITY_NAME,
                                                            RCREG.MIRROR_ATTRIBUTE_NAME,
                                                            MO_BOUNCOMPOSITIONCONSTANTS.CNUNORMAL_MIRROR
                                                            );
            END IF;

            
            IF ( RCREG.INIT_EXPRESSION_ID IS NOT NULL ) THEN

                GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS    (
                                                                ISBINSTANCE,NULL,
                                                                RCREG.ENTITY_NAME,
                                                                RCREG.ATTRIBUTE_NAME,
                                                                RCREG.INIT_EXPRESSION_ID,
                                                                NUEXPRESSIONTYPE
                                                                );
            ELSE
  		        IF ( RCREG.INIT_BASIC_EXP_ID IS NOT NULL) THEN

                    GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS(
                                                                ISBINSTANCE,
                                                                NULL,
                                                                RCREG.ENTITY_NAME,
                                                                RCREG.ATTRIBUTE_NAME,
                                                                RCREG.INIT_BASIC_EXP_ID,
                                                                NUEXPRESSIONTYPE
                                                                );
                END IF;
            END IF;
            SBVALUE := NULL;

            IF ( RCREG.VALID_EXPRESSION_ID IS NOT NULL) THEN
                GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS    (
                                                                ISBINSTANCE,NULL,
                                                                RCREG.ENTITY_NAME,
                                                                RCREG.ATTRIBUTE_NAME,
                                                                RCREG.VALID_EXPRESSION_ID,
                                                                NUVALIDEXPRESSIONTYPE
                                                                );
            ELSE
                 IF ( RCREG.VALID_BASIC_EXP_ID IS NOT NULL) THEN
                     GE_BOINSTANCECONTROL.SETATTRIBUTEEXPRESSIONS   (
                                                                    ISBINSTANCE,
                                                                    NULL,
                                                                    RCREG.ENTITY_NAME,
                                                                    RCREG.ATTRIBUTE_NAME,
                                                                    RCREG.VALID_BASIC_EXP_ID,
                                                                    NUVALIDEXPRESSIONTYPE
                                                                    );
                 END IF;
            END IF;

        
        END LOOP;

        


        EXECEXPRESSIONATTFRAME (ISBINSTANCE ,INUENTITYTYPEID,INUEXTERNALTYPEID, INUFRAMEID, ONUERRORCODE, OSBERRORTEXT);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END ADDATTRIBUTEFRAMEWEB;


    
















    PROCEDURE   ADDMIRRORATTRIBUTE
    (
        ISBINSTANCE     IN  VARCHAR2,
        ISBGRUPO        IN  VARCHAR2,
        ISBENTITY       IN  VARCHAR2,
        ISBATTRIBUTE    IN  VARCHAR2,
        ISBENTITYMIRROR IN  VARCHAR2,
        ISBATTRIBMIRROR IN  VARCHAR2,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2 )
    IS
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        MO_BOUNCOMPOSITIONUTIL.ADDMIRRORATTRIBUTE(ISBINSTANCE,ISBGRUPO,ISBENTITY,
                        ISBATTRIBUTE,ISBENTITYMIRROR,ISBATTRIBMIRROR,
                        MO_BOUNCOMPOSITIONCONSTANTS.CNUNORMAL_MIRROR);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;

    















    PROCEDURE GETINITVALUE
    (
        ISBINSTANCE     IN  VARCHAR2,
        ISBGRUPO        IN  VARCHAR2,
        ISBENTITY       IN  VARCHAR2,
        ISBATTRIBUTE    IN  VARCHAR2,
        OSBVALOR        OUT VARCHAR2,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        NUEXPRESSIONTYPE NUMBER;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(ISBINSTANCE,ISBGRUPO,ISBENTITY,
                                     ISBATTRIBUTE,OSBVALOR);

        IF (OSBVALOR IS NOT NULL) THEN
             
             DBMS_OUTPUT.PUT_LINE('salio por no nulo');
             RETURN;
        END IF;

        
        
        
        NUEXPRESSIONTYPE := GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION;

        GE_BOINSTANCECONTROL.EXEATTEXPRESSIONS(ISBINSTANCE,ISBGRUPO,ISBENTITY,
                                     ISBATTRIBUTE,NUEXPRESSIONTYPE);
                                     
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(ISBINSTANCE,ISBGRUPO,
                                  ISBENTITY,ISBATTRIBUTE,OSBVALOR);
                                  
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    

















    PROCEDURE VALIDATEVALUE
    (   ISBINSTANCE     IN  VARCHAR2,
        ISBGRUPO        IN  VARCHAR2,
        ISBENTITY       IN  VARCHAR2,
        ISBATTRIBUTE    IN  VARCHAR2,
        OSBVALID        OUT VARCHAR2,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )IS
        NUEXPRESSIONTYPE NUMBER;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
        OSBVALID := GE_BOCONSTANTS.CSBYES;
        
        
        

        NUEXPRESSIONTYPE := GE_BOINSTANCECONSTANTS.CNUPROCESS_EXPRESSION;

        GE_BOINSTANCECONTROL.EXEATTEXPRESSIONS(ISBINSTANCE,ISBGRUPO,ISBENTITY,
                                     ISBATTRIBUTE,NUEXPRESSIONTYPE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
            OSBVALID := GE_BOCONSTANTS.CSBNO;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
            OSBVALID := GE_BOCONSTANTS.CSBNO;
    END;

    























    PROCEDURE DROPINSTANCE
    (   ISBINSTANCE     IN  VARCHAR2,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
    BEGIN
    
        INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
        
        MO_BOUNCOMPOSITIONUTIL.DESTROYINSTANCE (ISBINSTANCE);
        GE_BOINSTANCECONTROL.DESTROYINSTANCE (ISBINSTANCE, TRUE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

    END;

    















    PROCEDURE VALIDINSTANCE(
         ISBINSTANCE    IN  VARCHAR2,
         OSBEXISTE      OUT VARCHAR2,
         ONUERRORCODE   OUT NUMBER,
         OSBERRORTEXT   OUT VARCHAR2
    )
    IS
    BEGIN

        INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        OSBEXISTE := GE_BOCONSTANTS.CSBNO;
        IF (GI_BOINSTANCE.FBLEXISTINSTANCE(ISBINSTANCE)) THEN
             OSBEXISTE  := GE_BOCONSTANTS.CSBYES;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
            OSBEXISTE := GE_BOCONSTANTS.CSBNO;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
            OSBEXISTE := GE_BOCONSTANTS.CSBNO;
    END;
    
















    PROCEDURE SETCURRENTATTRIBUTE
    (   ISBINSTANCE     IN VARCHAR2,
        ISBGRUPO        IN VARCHAR2,
        ISBENTITY       IN  VARCHAR2,
        ISBATTRIBUTE    IN  VARCHAR2,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )  IS
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        GE_BOINSTANCECONTROL.SETCURRENTDATA(ISBINSTANCE,ISBGRUPO,
                                ISBENTITY,ISBATTRIBUTE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    






    PROCEDURE VALIDATEATTRREQUIREDINST
    (
        INUOBJECT_TYPE  IN    NUMBER,
        INUOBJECT_ID    IN    NUMBER,
        INUFRAME        IN    NUMBER,
        SBINSTANCE      IN   VARCHAR2
    )
    IS
        NUPRODTYPEID  NUMBER;
        NUINDEX       NUMBER;

        CURSOR CUATFRAME IS
        SELECT *
        FROM  GI_TMP_CONFIGURATION
        WHERE GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUOBJECT_ID
        AND   GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUOBJECT_TYPE
        AND   GI_TMP_CONFIGURATION.FRAME_ID   = INUFRAME
        AND   (GI_TMP_CONFIGURATION.IS_VISIBLE = GE_BOCONSTANTS.CSBYES  OR
               GI_TMP_CONFIGURATION.IS_VISIBLE = 'X' )
        AND   GI_TMP_CONFIGURATION.REQUIRED   = GE_BOCONSTANTS.CSBYES
        
        
        ORDER BY GI_TMP_CONFIGURATION.DISPLAY_ORDER;

        SBVALOR         VARCHAR2(2000);
    BEGIN

        UT_TRACE.TRACE('Inicia ValidateAttrRequiredInst', 2);
        UT_TRACE.TRACE('inuObject_type [' || INUOBJECT_TYPE || ']', 3);
        UT_TRACE.TRACE('inuObject_id [' || INUOBJECT_ID || ']', 3);
        UT_TRACE.TRACE('inuFrame [' || INUFRAME || ']', 3);
        UT_TRACE.TRACE('sbInstance [' || SBINSTANCE || ']', 3);

          FOR RCREG IN CUATFRAME LOOP
          
            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE,NULL,
                            RCREG.ENTITY_NAME,RCREG.ATTRIBUTE_NAME,
                            SBVALOR);

            IF (SBVALOR IS NULL OR SBVALOR = '-1') THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(2126, RCREG.DISPLAY_NAME );
                RAISE EX.CONTROLLED_ERROR;
            END IF;
          
          END LOOP;

        UT_TRACE.TRACE('Finaliza ValidateAttrRequiredInst', 2);
    END;

    
    PROCEDURE VALIDATTRREQINSTBYEXT
    (
        INUENTITYTYPE   IN    NUMBER,
        INUEXTERNALTYPE IN    NUMBER,
        INUEXTERNALROOT IN    NUMBER,
        INUFRAME        IN    NUMBER,
        INUPARENTCONF   IN    NUMBER,
        SBINSTANCE      IN    VARCHAR2,
        ONUERRORCODE    OUT   NUMBER,
        OSBERRORTEXT    OUT   VARCHAR2
    )
    IS
        CURSOR CUATFRAME
        IS
           SELECT *
             FROM GI_TMP_CONFIGURATION
            WHERE GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUENTITYTYPE
            AND   GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUEXTERNALTYPE
            AND   GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID = INUEXTERNALROOT
            AND   GI_TMP_CONFIGURATION.FRAME_ID   = INUFRAME
            AND   NVL(GI_TMP_CONFIGURATION.PARENT_CONF_ID,-1) = NVL(INUPARENTCONF,-1)
            AND   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 2
            AND   GI_TMP_CONFIGURATION.REQUIRED   = GE_BOCONSTANTS.CSBYES
            AND   GI_TMP_CONFIGURATION.IS_VISIBLE = GE_BOCONSTANTS.CSBYES
            ORDER BY GI_TMP_CONFIGURATION.DISPLAY_ORDER;
            
        SBVALOR         VARCHAR2(2000);
    BEGIN
           FOR RCREG IN CUATFRAME LOOP
           
                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE,NULL,RCREG.ENTITY_NAME,RCREG.ATTRIBUTE_NAME,SBVALOR);
                IF (SBVALOR IS NULL OR SBVALOR = '-1') THEN
                    GE_BOERRORS.SETERRORCODEARGUMENT(2126, RCREG.DISPLAY_NAME);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
           
           END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUATFRAME%ISOPEN) THEN
                CLOSE CUATFRAME;
            END IF;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
        WHEN OTHERS THEN
            IF (CUATFRAME%ISOPEN) THEN
                CLOSE CUATFRAME;
            END IF;
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    

























    PROCEDURE VALIDATEATTRIBUTEREQUIREDFRAME
    (
        INUOBJECT_TYPE      NUMBER,
        INUOBJECT_ID        NUMBER,
        INUFRAME            NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    ) IS

        NUPRODTYPEID  NUMBER;
        NUINDEX       NUMBER;

        CURSOR CUATFRAME IS
        SELECT *
        FROM  GI_TMP_CONFIGURATION
        WHERE GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUOBJECT_ID
        AND   GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUOBJECT_TYPE
        AND   GI_TMP_CONFIGURATION.FRAME_ID   = INUFRAME
        AND   (GI_TMP_CONFIGURATION.IS_VISIBLE = GE_BOCONSTANTS.CSBYES  OR
               GI_TMP_CONFIGURATION.IS_VISIBLE = 'X' )
        AND   GI_TMP_CONFIGURATION.REQUIRED   = GE_BOCONSTANTS.CSBYES
        AND (NVL(GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID,-1) = NVL(NUPRODTYPEID,-1)
        OR  GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID = GNUGENERICPRODUCT )
        ORDER BY GI_TMP_CONFIGURATION.DISPLAY_ORDER;

        SBINSTCURRENT       VARCHAR2(2000);
        SBINSTPADRE         VARCHAR2(2000);
        NUEXPRESSIONTYPE    NUMBER;
        NUVALIDEXPRESSIONTYPE NUMBER;
        SBVALOR         VARCHAR2(2000);
        SBDISPLAY       VARCHAR2(2000);
        SBTIPO      NUMBER;
        SBID        NUMBER;
        NUCANTIDAD  NUMBER;

        CURSOR CUCOMPOSITION ( SBOBJECT_ID NUMBER, NUENTITY NUMBER) IS
        SELECT GI_TMP_CONFIGURATION.ENTITY_ID,
               GI_TMP_CONFIGURATION.EXTERNAL_ID,
               GI_TMP_CONFIGURATION.MIN_INSTANCE,
               GI_TMP_CONFIGURATION.MAX_INSTANCE,
               GI_TMP_CONFIGURATION.TAG_NAME
        FROM  GI_TMP_CONFIGURATION
        WHERE GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1
        AND GI_TMP_CONFIGURATION.MIN_INSTANCE > 0
        AND GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = NUENTITY
        AND GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = SBOBJECT_ID
        AND (NVL(GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID,-1) = NVL(NUPRODTYPEID,-1)
        OR  GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID = GNUGENERICPRODUCT )
        ORDER BY GI_TMP_CONFIGURATION.CONFIGURATION_ID;

        RCCOMPOSITION CUCOMPOSITION%ROWTYPE;

        CURSOR CUINSTANCE (NUOBJTYPE NUMBER, SBOBJID NUMBER)IS
        SELECT INSTANCENAME,FATHERINSTANCE, OBJECTTYPEID, OBJECTID
        FROM GI_TMP_INSTANCE
        WHERE OBJECTTYPEID = NUOBJTYPE
        AND   OBJECTID = SBOBJID;

        RCINSTANCE  CUINSTANCE%ROWTYPE;
        NUTYPEOBJ  NUMBER;
        NUIDOBJ    NUMBER;

        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUCOMPOSITION%ISOPEN) THEN  CLOSE CUCOMPOSITION ;   END IF;
            IF (CUINSTANCE%ISOPEN)    THEN CLOSE  CUINSTANCE;       END IF;
        END;

    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTCURRENT);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTCURRENT, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, NUTYPEOBJ);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTCURRENT, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, NUIDOBJ);

        
        GE_BOINSTANCECONTROL.GETFATHERCURRENTINSTANCE(  SBINSTPADRE );

        GETPRODTYPEINST(NUPRODTYPEID);


        GI_BOINSTANCE.CHARGEINSTANCEINTMP(SBINSTPADRE);

        OPEN CUINSTANCE ( NUTYPEOBJ,  NUIDOBJ );
        LOOP
        
            FETCH CUINSTANCE INTO RCINSTANCE;
            EXIT WHEN CUINSTANCE%NOTFOUND;

            IF (RCINSTANCE.FATHERINSTANCE = SBINSTPADRE) THEN
                VALIDATEATTRREQUIREDINST( INUOBJECT_TYPE,INUOBJECT_ID,INUFRAME,RCINSTANCE.INSTANCENAME );
            END IF;

        
        END LOOP;
        CLOSE CUINSTANCE;

        NUCANTIDAD  := MO_BOCNFINSTANCE.FNUGETBROTHERINSTANCES ;
        SBTIPO :=GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('PROCESS_ENTITY','OBJECT_TYPE');
        SBID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('PROCESS_ENTITY','OBJECT_ID');
        
        GETPRODTYPEINST(NUPRODTYPEID);

        OPEN CUCOMPOSITION (SBTIPO, SBID);
        FETCH CUCOMPOSITION INTO RCCOMPOSITION;
        CLOSE CUCOMPOSITION;
    
        GI_BOINSTANCE.DOWNTMPINSTANCE ;
    
        IF (NUCANTIDAD > RCCOMPOSITION.MAX_INSTANCE) THEN
             GE_BOERRORS.SETERRORCODEARGUMENT( 281, RCCOMPOSITION.MAX_INSTANCE||' ('||NUCANTIDAD||')|'||GE_BOI18N.FSBGETTRASLATION(RCCOMPOSITION.TAG_NAME));
             RAISE EX.CONTROLLED_ERROR;
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            CLOSECURSOR ;
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;

    
















    PROCEDURE VALIDREQUIREDOBJECTRECURSIVE
    (
        IRCCONFIGURATION    IN  DAGI_TMP_CONFIGURATION.STYGI_TMP_CONFIGURATION,
        INUPARENTINSTANCEID IN  GI_TMP_INSTANCE.INSTANCEID%TYPE DEFAULT NULL
    )
    IS
        TBINSTANCE              DAGI_TMP_INSTANCE.TYTBGI_TMP_INSTANCE;
        TBCONFIGURATION         DAGI_TMP_CONFIGURATION.TYTBGI_TMP_CONFIGURATION;

        

        CURSOR CUINSTANCE
        (
            NUOBJECTTYPEID      GI_TMP_INSTANCE.OBJECTTYPEID%TYPE,
            SBOBJECTID          GI_TMP_INSTANCE.OBJECTID%TYPE,
            NUFATHERINSTANCEID  GI_TMP_INSTANCE.FATHERINSTANCEID%TYPE
        )
        IS
            SELECT  GI_TMP_INSTANCE.*,
                    GI_TMP_INSTANCE.ROWID
            FROM    GI_TMP_INSTANCE
            WHERE   OBJECTTYPEID        = NUOBJECTTYPEID
            AND     OBJECTID            = SBOBJECTID
            AND     FATHERINSTANCEID    = NUFATHERINSTANCEID;

        
            
        CURSOR CUROOTINSTANCE
        (
            NUOBJECTTYPEID      GI_TMP_INSTANCE.OBJECTTYPEID%TYPE,
            SBOBJECTID          GI_TMP_INSTANCE.OBJECTID%TYPE
        )
        IS
            SELECT  GI_TMP_INSTANCE.*,
                    GI_TMP_INSTANCE.ROWID
            FROM    GI_TMP_INSTANCE
            WHERE   OBJECTTYPEID        = NUOBJECTTYPEID
            AND     OBJECTID            = SBOBJECTID;

        

        CURSOR CUCHILDCONFIGURATION
        (
            INUCONFIGURATION_ID IN GI_TMP_CONFIGURATION.CONFIGURATION_ID%TYPE
        )
        IS
            SELECT  GI_TMP_CONFIGURATION.*,
                    GI_TMP_CONFIGURATION.ROWID
            FROM    GI_TMP_CONFIGURATION
            WHERE   PARENT_CONF_ID = INUCONFIGURATION_ID
            AND     TYPE_ATTRIB_ID = 1;

        

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF  CUINSTANCE%ISOPEN THEN
                CLOSE CUINSTANCE;
            END IF;
            
            IF  CUROOTINSTANCE%ISOPEN THEN
                CLOSE CUROOTINSTANCE;
            END IF;
            
            IF  CUCHILDCONFIGURATION%ISOPEN THEN
                CLOSE CUCHILDCONFIGURATION;
            END IF;
        END;
        
    BEGIN
        UT_TRACE.TRACE('inicia gi_bsInstanceManager.ValidRequiredObjectRecursive',2);

        UT_TRACE.TRACE('ConfigurationID ['||IRCCONFIGURATION.CONFIGURATION_ID||']  ',2);
        UT_TRACE.TRACE('EntityID ['||IRCCONFIGURATION.ENTITY_ID||']  ',2);
        UT_TRACE.TRACE('ExternalID ['||IRCCONFIGURATION.EXTERNAL_ID||']  ',2);
        UT_TRACE.TRACE('ParentInstanceID ['||INUPARENTINSTANCEID||']  ',2);
        
        CLOSECURSORS;

        
        IF  IRCCONFIGURATION.PARENT_CONF_ID IS NULL THEN
            
            OPEN    CUROOTINSTANCE(IRCCONFIGURATION.ENTITY_ID, IRCCONFIGURATION.EXTERNAL_ID);
            FETCH   CUROOTINSTANCE BULK COLLECT INTO TBINSTANCE;
            CLOSE   CUROOTINSTANCE;
        ELSE
            
            OPEN    CUINSTANCE(IRCCONFIGURATION.ENTITY_ID, IRCCONFIGURATION.EXTERNAL_ID, INUPARENTINSTANCEID);
            FETCH   CUINSTANCE BULK COLLECT INTO TBINSTANCE;
            CLOSE   CUINSTANCE;
        END IF;

        IF  TBINSTANCE.COUNT = 0 THEN

            
            IF  IRCCONFIGURATION.MIN_INSTANCE > 0 THEN
                
                GE_BOERRORS.SETERRORCODEARGUMENT(262, GE_BOI18N.FSBGETTRASLATION(IRCCONFIGURATION.TAG_NAME));
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
        ELSE
            
            IF  TBINSTANCE.COUNT > IRCCONFIGURATION.MAX_INSTANCE THEN
                
                GE_BOERRORS.SETERRORCODEARGUMENT(281, IRCCONFIGURATION.MAX_INSTANCE||' ('||TBINSTANCE.COUNT||')|'||GE_BOI18N.FSBGETTRASLATION(IRCCONFIGURATION.TAG_NAME));
                RAISE EX.CONTROLLED_ERROR;
            END IF;

            
            OPEN    CUCHILDCONFIGURATION(IRCCONFIGURATION.CONFIGURATION_ID);
            FETCH   CUCHILDCONFIGURATION BULK COLLECT INTO TBCONFIGURATION;
            CLOSE   CUCHILDCONFIGURATION;

            IF  TBCONFIGURATION.FIRST IS NOT NULL THEN
                
                FOR IDX_INS IN TBINSTANCE.FIRST .. TBINSTANCE.LAST LOOP
                    
                    FOR IDX_CNF IN TBCONFIGURATION.FIRST .. TBCONFIGURATION.LAST LOOP
                        
                        VALIDREQUIREDOBJECTRECURSIVE(TBCONFIGURATION(IDX_CNF), TBINSTANCE(IDX_INS).INSTANCEID);
                    END LOOP;
                END LOOP;
            END IF;
        END IF;

        UT_TRACE.TRACE('finaliza gi_bsInstanceManager.ValidRequiredObjectRecursive',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSORS;
	        RAISE EX.CONTROLLED_ERROR;

        WHEN OTHERS THEN
            CLOSECURSORS;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















	
    PROCEDURE VALIDATEREQUIREDOBJECT
    (
        INUOBJECT_ID        IN NUMBER,
        INUPRODUCTTYPEID    IN NUMBER,
        INUENTITYTYPEID     IN NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        CUCOMPOSITION       CONSTANTS.TYREFCURSOR;

        RCCOMPOSITION       DAGI_TMP_CONFIGURATION.STYGI_TMP_CONFIGURATION;
        
        

        PROCEDURE CLOSECURSORS IS
        BEGIN
            IF  CUCOMPOSITION%ISOPEN THEN
                CLOSE CUCOMPOSITION;
            END IF;
        END;
    BEGIN
    
    UT_TRACE.TRACE('inicia gi_bsInstanceManager.ValidateRequiredObject',1);

    UT_TRACE.TRACE('ObjectID['||INUOBJECT_ID||']',2);
    UT_TRACE.TRACE('ProductTypeID['||INUPRODUCTTYPEID||']',2);
    UT_TRACE.TRACE('EntityTypeID['||INUENTITYTYPEID||']',2);
    
    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

    GI_BOINSTANCE.CHARGEINSTANCEINTMP(MO_BOUNCOMPOSITIONCONSTANTS.CSBWORK_INSTANCE);

    IF  INUPRODUCTTYPEID IS NULL THEN
        
        OPEN CUCOMPOSITION FOR
            SELECT  GI_TMP_CONFIGURATION.*,
                    GI_TMP_CONFIGURATION.ROWID
            FROM    GI_TMP_CONFIGURATION
            WHERE   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1
            AND     GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUENTITYTYPEID
            AND     GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUOBJECT_ID
            AND     GI_TMP_CONFIGURATION.PARENT_CONF_ID IS NULL
            ORDER BY GI_TMP_CONFIGURATION.CONFIGURATION_ID;
    ELSE
        
        OPEN CUCOMPOSITION FOR
            SELECT  GI_TMP_CONFIGURATION.*,
                    GI_TMP_CONFIGURATION.ROWID
            FROM    GI_TMP_CONFIGURATION
            WHERE   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1
            AND     GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUENTITYTYPEID
            AND     GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUOBJECT_ID
            AND     GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID IN (INUPRODUCTTYPEID, GNUGENERICPRODUCT)
            AND     GI_TMP_CONFIGURATION.PARENT_CONF_ID IS NULL
            ORDER BY GI_TMP_CONFIGURATION.CONFIGURATION_ID;
    END IF;

    FETCH CUCOMPOSITION INTO RCCOMPOSITION;

    IF  CUCOMPOSITION%FOUND THEN

        
        VALIDREQUIREDOBJECTRECURSIVE (RCCOMPOSITION);
       
    END IF;

    GI_BOINSTANCE.DOWNTMPINSTANCE;

    UT_TRACE.TRACE('finaliza gi_bsInstanceManager.ValidateRequiredObject',1);
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSORS ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            CLOSECURSORS;
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    

























	
	PROCEDURE VALIDATEREQUIREDOBJECT
    (
        ISBOBJECT_ID    IN  NUMBER,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2
    )
    IS
        NUPRODUCTTYPEID     NUMBER;
    BEGIN
    
        INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

	    UT_TRACE.TRACE('==>>[Inicia ValidateRequiredObject  isbObject_id[ '|| ISBOBJECT_ID ||' ]',10);

        GETPRODTYPEINST(NUPRODUCTTYPEID);

        UT_TRACE.TRACE('==>>[Tipo de producto Instanciado [ '||TO_CHAR(NUPRODUCTTYPEID)||' ]',10);

        VALIDATEREQUIREDOBJECT
        (
            ISBOBJECT_ID,
            NUPRODUCTTYPEID,
            GE_BOENTITY.GETENTITYIDBYNAME('PS_PACKAGE_TYPE'),
            ONUERRORCODE,
            OSBERRORTEXT
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    PROCEDURE GETLINEDBMS ( SBLINEA IN OUT VARCHAR2, NUSTATUS IN OUT NUMBER )
    IS
       LINEA VARCHAR2(2000);
    BEGIN
       SYS.DBMS_OUTPUT.GET_LINE(LINEA, NUSTATUS);
       
       SBLINEA := SUBSTR(LINEA,1,150);
       
    EXCEPTION
        WHEN OTHERS THEN
            SBLINEA := 'Error obteniendo buffer';
            
    END;

    PROCEDURE FINDGROUP
	(
		ISBINSTANCE  IN  VARCHAR2,
		OSBGROUP     OUT VARCHAR2
	)
	IS
		RCENTITY  GE_BOINSTANCECONTROL.TYRCENTITYSTACK;
		NUENTITY  NUMBER;
	BEGIN
		
		GE_BOINSTANCECONTROL.GETFIRSTINSTANCEENTITY (ISBINSTANCE, NUENTITY);
		WHILE NUENTITY IS NOT NULL LOOP
			GE_BOINSTANCECONTROL.GETENTITY (NUENTITY, RCENTITY);
			GE_BOINSTANCECONTROL.GETNEXTINSTANCEENTITY (NUENTITY);
		END LOOP;
		OSBGROUP := RCENTITY.SBGROUP;
	END;

    





























    PROCEDURE EXISTFIELDVALIDATE
    (
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2
    )
    IS
        SBVALUE     GE_BOINSTANCECONTROL.STYSBVALUE;
		TBLINSTANCE GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
		NUTBLINDEX      PLS_INTEGER;
		SBINSTANCE      VARCHAR2(200);
		SBCURRENTVALUE GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPADRE         VARCHAR2(200);
		SBGROUP         VARCHAR2(100);
		NUINDEX	        NUMBER;
		SBENTITY        VARCHAR2(255);
		SBFIELD         VARCHAR2(255);
		CNUERROR	    CONSTANT NUMBER := 400; 
	BEGIN
     INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
		
		GE_BOINSTANCECONTROL.GETCURRENTDATA(SBINSTANCE,SBGROUP,SBENTITY,SBFIELD);

		
		GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE,SBGROUP,
		                                          SBENTITY,SBFIELD,SBCURRENTVALUE);


		
		


        UT_TRACE.TRACE(SBINSTANCE||'-'||SBENTITY||'-'||SBFIELD||'-'||SBCURRENTVALUE,5);

		UT_TRACE.TRACE('Datos Actuales sbInstance['||SBINSTANCE||
		               '] sbGroup['||SBGROUP||
		               '] sbEntity['||SBENTITY||'] sbField['||SBFIELD||
					   '] Valor['||SBCURRENTVALUE||']',5);
		
		GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTANCE);
		GE_BOINSTANCECONTROL.GETFATHERINSTANCE(SBINSTANCE,SBPADRE);

		
		GE_BOINSTANCECONTROL.INSTANCECHILDS(SBPADRE,TBLINSTANCE);


	    NUINDEX := TBLINSTANCE.FIRST;
	    WHILE NUINDEX IS NOT NULL LOOP
			UT_TRACE.TRACE('['||TBLINSTANCE(NUINDEX).SBINSTANCE||']',5);
			
			FINDGROUP (TBLINSTANCE(NUINDEX).SBINSTANCE, SBGROUP);

	    	
			IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(TBLINSTANCE(NUINDEX).SBINSTANCE,
			                                          SBGROUP,
													  SBENTITY,SBFIELD,NUTBLINDEX)) THEN

				
				GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(TBLINSTANCE(NUINDEX).SBINSTANCE,
			                                          SBGROUP,
													  SBENTITY,SBFIELD,SBVALUE);

		        UT_TRACE.TRACE('-->'||TBLINSTANCE(NUINDEX).SBINSTANCE||'-'||SBENTITY||'-'||SBFIELD||'-'||SBVALUE,5);
				
				
				IF (TBLINSTANCE(NUINDEX).SBINSTANCE <> SBINSTANCE  AND
				    SBVALUE = SBCURRENTVALUE ) THEN
				    UT_TRACE.TRACE('InProceso['||TBLINSTANCE(NUINDEX).SBINSTANCE||
					               '] Contra['||SBINSTANCE||']',5);
					UT_TRACE.TRACE('sbValue['||SBVALUE||
					               '] sbCurrentValue['||SBCURRENTVALUE||']',5);
			        GE_BOERRORS.SETERRORCODEARGUMENT( CNUERROR,SBCURRENTVALUE);
		            RAISE EX.CONTROLLED_ERROR;
				END IF;
			ELSE
				UT_TRACE.TRACE('No existe el Dato para esta instancia',6);
		    END IF;
			
	        NUINDEX := TBLINSTANCE.NEXT(NUINDEX);
		END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END EXISTFIELDVALIDATE;
    
    



















    PROCEDURE EXECAFTEREXPRESSIONFRAME
    (
        INUOBJECT_TYPE      NUMBER,
        INUOBJECT_ID        NUMBER,
        INUFRAME            NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    ) IS


        NUINDEX            GE_BOINSTANCECONTROL.STYNUINDEX;
        NUPRODTYPEID  NUMBER;

        CURSOR CUATFRAME IS
        SELECT GI_TMP_CONFIGURATION.AFTER_EXPRESSION_ID
        FROM  GI_TMP_CONFIGURATION
        WHERE GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUOBJECT_ID
        AND   GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUOBJECT_TYPE
        AND   GI_TMP_CONFIGURATION.FRAME_ID   = INUFRAME
        AND   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1
        AND (NVL(GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID,-1) = NVL(NUPRODTYPEID,-1)
        OR  GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID = GNUGENERICPRODUCT );

        CURSOR CUBROTHERINSTANCE (NUOBJTYPE NUMBER, SBOBJID NUMBER)IS
        SELECT INSTANCENAME,FATHERINSTANCE, OBJECTTYPEID, OBJECTID
        FROM GI_TMP_INSTANCE
        WHERE OBJECTTYPEID = NUOBJTYPE
        AND   OBJECTID = SBOBJID;

        SBINSTANCE       VARCHAR2(2000);
        SBINSTPADRE      VARCHAR2(2000);
		TBLINSTANCE     GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
        NUTYPEOBJ       NUMBER;
        NUIDOBJ         NUMBER;
        RCINSTANCE      CUBROTHERINSTANCE%ROWTYPE;
        SBGRUPO         VARCHAR2(2000);
        SBENTIDAD       VARCHAR2(2000);
        SBATRIBUTO      VARCHAR2(2000);
        
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUBROTHERINSTANCE%ISOPEN) THEN
                 CLOSE CUBROTHERINSTANCE;
            END IF;
            IF (CUATFRAME%ISOPEN) THEN
                 CLOSE CUATFRAME;
            END IF;

        END;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

  		
   		
   		GE_BOINSTANCECONTROL.GETCURRENTDATA(SBINSTANCE, SBGRUPO, SBENTIDAD, SBATRIBUTO);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, NUTYPEOBJ);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, NUIDOBJ);

        
        GE_BOINSTANCECONTROL.GETFATHERCURRENTINSTANCE(  SBINSTPADRE );

        GETPRODTYPEINST(NUPRODTYPEID);

        GI_BOINSTANCE.CHARGEINSTANCEINTMP(SBINSTPADRE);
        
        FOR RCREG IN CUATFRAME LOOP
        
            OPEN CUBROTHERINSTANCE ( NUTYPEOBJ,  NUIDOBJ );
            LOOP
            
                FETCH CUBROTHERINSTANCE INTO RCINSTANCE;  
                EXIT WHEN CUBROTHERINSTANCE%NOTFOUND;

                IF (RCINSTANCE.FATHERINSTANCE = SBINSTPADRE) THEN
                    GE_BOINSTANCECONTROL.SETCURRENTDATA(RCINSTANCE.INSTANCENAME,NULL,NULL,NULL);
                	UT_TRACE.TRACE('Expresion ['||RCREG.AFTER_EXPRESSION_ID||']',5);
                    GE_BOINSTANCECONTROL.EXECUTEEXPRESSION(RCREG.AFTER_EXPRESSION_ID);
                END IF;

            
            END LOOP;
            CLOSE CUBROTHERINSTANCE;
        
        END LOOP;

    	GE_BOINSTANCECONTROL.SETCURRENTDATA(SBINSTANCE, SBGRUPO, SBENTIDAD, SBATRIBUTO);

        GI_BOINSTANCE.DOWNTMPINSTANCE ;
        
        CLOSECURSOR ;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
        
            CLOSECURSOR ;
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    







    PROCEDURE EXECAFTEREXPRESSFRAMEONLY
    (
        INUOBJECT_TYPE      NUMBER,
        INUOBJECT_ID        NUMBER,
        INUFRAME            NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    ) IS
        NUPRODTYPEID    NUMBER;

        CURSOR CUATFRAME IS
        SELECT GI_TMP_CONFIGURATION.AFTER_EXPRESSION_ID
        FROM  GI_TMP_CONFIGURATION
        WHERE GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUOBJECT_ID
        AND   GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUOBJECT_TYPE
        AND   GI_TMP_CONFIGURATION.FRAME_ID   = INUFRAME
        AND   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1;
        
        


        SBINSTANCE       VARCHAR2(2000);
        SBINSTPADRE      VARCHAR2(2000);
		TBLINSTANCE     GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
		NUINDEX	        NUMBER;
        NUTYPEOBJ       NUMBER;
        NUIDOBJ         NUMBER;
        SBGRUPO         VARCHAR2(2000);
        SBENTIDAD       VARCHAR2(2000);
        SBATRIBUTO      VARCHAR2(2000);

        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUATFRAME%ISOPEN) THEN
                 CLOSE CUATFRAME;
            END IF;

        END;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

  		
   		
   		GE_BOINSTANCECONTROL.GETCURRENTDATA(SBINSTANCE, SBGRUPO, SBENTIDAD, SBATRIBUTO);

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_TYPE, NUTYPEOBJ);
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(SBINSTANCE, NULL, MO_BOUNCOMPOSITIONCONSTANTS.CSBPROCESS_ENTITY, MO_BOUNCOMPOSITIONCONSTANTS.CSBOBJECT_ID, NUIDOBJ);

        
        
        FOR RCREG IN CUATFRAME LOOP
        
            GE_BOINSTANCECONTROL.SETCURRENTDATA(SBINSTANCE,NULL,NULL,NULL);
        	UT_TRACE.TRACE('Expresion ['||RCREG.AFTER_EXPRESSION_ID||']',5);
            GE_BOINSTANCECONTROL.EXECUTEEXPRESSION(RCREG.AFTER_EXPRESSION_ID);
        
        END LOOP;
        CLOSECURSOR ;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN

            CLOSECURSOR ;
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;


    




















    PROCEDURE EXECBEFOREEXPRESSIONFRAME
    (
        INUOBJECT_TYPE      NUMBER,
        INUOBJECT_ID        NUMBER,
        INUFRAME            NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    ) IS

        NUINDEX            GE_BOINSTANCECONTROL.STYNUINDEX;
        NUPRODTYPEID  NUMBER;

        CURSOR CUATFRAME IS
        SELECT GI_TMP_CONFIGURATION.BEFORE_EXPRESSION_ID
        FROM  GI_TMP_CONFIGURATION
        WHERE GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUOBJECT_ID
        AND   GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUOBJECT_TYPE
        AND   GI_TMP_CONFIGURATION.FRAME_ID   = INUFRAME
        AND   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1;
        
        

        SBINSTCURRENT       VARCHAR2(2000);
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUATFRAME%ISOPEN) THEN
                 CLOSE CUATFRAME;
            END IF;
        END;

    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        
        

        FOR RCREG IN CUATFRAME LOOP
        
            GE_BOINSTANCECONTROL.EXECUTEEXPRESSION(RCREG.BEFORE_EXPRESSION_ID);
        
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            CLOSECURSOR ;
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
     
















    PROCEDURE EXECBEFEXPFRAMEFORSALE
    (
        INUOBJECT_TYPE      NUMBER,
        INUOBJECT_ID        NUMBER,
        INUFRAME            NUMBER,
        INUPRODTYPEID       NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    ) IS

        NUINDEX            GE_BOINSTANCECONTROL.STYNUINDEX;
        NUPRODTYPEID  NUMBER;

        CURSOR CUATFRAME IS
        SELECT GI_TMP_CONFIGURATION.BEFORE_EXPRESSION_ID
        FROM  GI_TMP_CONFIGURATION
        WHERE GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUOBJECT_ID
        AND   GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUOBJECT_TYPE
        AND   GI_TMP_CONFIGURATION.FRAME_ID   = INUFRAME
        AND   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1
        AND (NVL(GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID,-1) = NVL(NUPRODTYPEID,-1)
        OR  GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID = GNUGENERICPRODUCT );

        SBINSTCURRENT       VARCHAR2(2000);
        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUATFRAME%ISOPEN) THEN
                 CLOSE CUATFRAME;
            END IF;
        END;

    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        
        NUPRODTYPEID := INUPRODTYPEID;

        FOR RCREG IN CUATFRAME LOOP
        
            GE_BOINSTANCECONTROL.EXECUTEEXPRESSION(RCREG.BEFORE_EXPRESSION_ID);
        
        END LOOP;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            CLOSECURSOR ;
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;


    PROCEDURE EXECBEFOREEXPRESSBYEXT
    (
        INUENTITYTYPE   IN    NUMBER,
        INUEXTERNALTYPE IN    NUMBER,
        INUEXTERNALROOT IN    NUMBER,
        INUFRAME        IN    NUMBER,
        INUPARENTCONF   IN    NUMBER,
        ONUERRORCODE    OUT   NUMBER,
        OSBERRORTEXT    OUT   VARCHAR2
    )
    IS
        SBINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;
        SBGRUPO          GE_BOINSTANCECONTROL.STYSBNAME;
        SBENTIDAD        GE_BOINSTANCECONTROL.STYSBNAME;
        SBATRIBUTO       GE_BOINSTANCECONTROL.STYSBNAME;

        CURSOR CUFRAME IS
            SELECT *
             FROM GI_TMP_CONFIGURATION
            WHERE GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUENTITYTYPE
            AND   GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUEXTERNALTYPE
            AND   GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID = INUEXTERNALROOT
            AND   GI_TMP_CONFIGURATION.FRAME_ID = INUFRAME
            AND   NVL(GI_TMP_CONFIGURATION.PARENT_CONF_ID,-1) = NVL(INUPARENTCONF,-1)
            AND   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID IN (1,3)
            AND   ROWNUM = 1;

        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUFRAME%ISOPEN) THEN
                 CLOSE CUFRAME;
            END IF;

        END;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        
   		GE_BOINSTANCECONTROL.GETCURRENTDATA(SBINSTANCE, SBGRUPO, SBENTIDAD, SBATRIBUTO);

        FOR RCREG IN CUFRAME LOOP
        
            GE_BOINSTANCECONTROL.SETCURRENTDATA(SBINSTANCE,NULL,NULL,NULL);
        	UT_TRACE.TRACE('Expresion ['||RCREG.BEFORE_EXPRESSION_ID||']',5);
            GE_BOINSTANCECONTROL.EXECUTEEXPRESSION(RCREG.BEFORE_EXPRESSION_ID);
        
        END LOOP;
        
        
      	GE_BOINSTANCECONTROL.SETCURRENTDATA(SBINSTANCE, SBGRUPO, SBENTIDAD, SBATRIBUTO);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN

            CLOSECURSOR ;
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    
    PROCEDURE EXECAFTEREXPRESSBYEXT
    (
        INUENTITYTYPE   IN    NUMBER,
        INUEXTERNALTYPE IN    NUMBER,
        INUEXTERNALROOT IN    NUMBER,
        INUFRAME        IN    NUMBER,
        INUPARENTCONF   IN    NUMBER,
        ONUERRORCODE    OUT   NUMBER,
        OSBERRORTEXT    OUT   VARCHAR2
    )
    IS
        SBINSTANCE       GE_BOINSTANCECONTROL.STYSBNAME;
        SBGRUPO          GE_BOINSTANCECONTROL.STYSBNAME;
        SBENTIDAD        GE_BOINSTANCECONTROL.STYSBNAME;
        SBATRIBUTO       GE_BOINSTANCECONTROL.STYSBNAME;

        CURSOR CUFRAME IS
            SELECT *
             FROM GI_TMP_CONFIGURATION
            WHERE GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUENTITYTYPE
            AND   GI_TMP_CONFIGURATION.EXTERNAL_TYPE_ID = INUEXTERNALTYPE
            AND   GI_TMP_CONFIGURATION.EXTERNAL_ROOT_ID = INUEXTERNALROOT
            AND   GI_TMP_CONFIGURATION.FRAME_ID   = INUFRAME
            AND   NVL(GI_TMP_CONFIGURATION.PARENT_CONF_ID,-1) = NVL(INUPARENTCONF,-1)
            AND   GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID IN (1,3)
            AND   ROWNUM = 1;

        PROCEDURE CLOSECURSOR IS
        BEGIN
            IF (CUFRAME%ISOPEN) THEN
                 CLOSE CUFRAME;
            END IF;

        END;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        
   		GE_BOINSTANCECONTROL.GETCURRENTDATA(SBINSTANCE, SBGRUPO, SBENTIDAD, SBATRIBUTO);

        FOR RCREG IN CUFRAME LOOP
        
            GE_BOINSTANCECONTROL.SETCURRENTDATA(SBINSTANCE,NULL,NULL,NULL);
        	UT_TRACE.TRACE('Expresion ['||RCREG.AFTER_EXPRESSION_ID||']',5);
            GE_BOINSTANCECONTROL.EXECUTEEXPRESSION(RCREG.AFTER_EXPRESSION_ID);
        
        END LOOP;

        
      	GE_BOINSTANCECONTROL.SETCURRENTDATA(SBINSTANCE, SBGRUPO, SBENTIDAD, SBATRIBUTO);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            CLOSECURSOR ;
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN

            CLOSECURSOR ;
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;

    















    PROCEDURE DROPENTITY
    (   ISBINSTANCE     IN VARCHAR2,
        ISBGRUPO        IN VARCHAR2,
        ISBENTITY       IN  VARCHAR2,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )  IS
        NUINDEX NUMBER;
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        IF (GE_BOINSTANCECONTROL.FBLACCKEYENTITYSTACK(ISBINSTANCE,
                        ISBGRUPO, ISBENTITY,  NUINDEX))
        THEN

            GE_BOINSTANCECONTROL.DESTROYENTITY (ISBINSTANCE,ISBGRUPO,ISBENTITY);
             
        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    

















    PROCEDURE GETREFINSTANCE (
        ISBINSTANCE     IN  VARCHAR2,
        ISBOBJECTTYPE   IN  VARCHAR2,
        ISBOBJECTID     IN  VARCHAR2,
        ORFINSTANCE     OUT CONSTANTS.TYREFCURSOR,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
	    
        IF NOT (GI_BOINSTANCE.FBLTMPINSTANCE ) THEN
            GI_BOINSTANCE.CHARGEINSTANCEINTMP(ISBINSTANCE);
        END IF;
        
        ORFINSTANCE :=
                 GI_BOINSTANCE.GETREFINSTANCE(ISBOBJECTTYPE,
                                              ISBOBJECTID,
                                              ISBINSTANCE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    
    PROCEDURE GETINSTANCEBYEXT
    (
        ISBINSTANCE     IN  VARCHAR2,
        ISBOBJECTTYPE   IN  VARCHAR2,
        ISBOBJECTID     IN  VARCHAR2,
        ISBEXTERNALID   IN  VARCHAR2,
        ORFINSTANCE     OUT CONSTANTS.TYREFCURSOR,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2
    )
    IS

    BEGIN
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        GI_BOINSTANCE.CHARGEINSTANCEINTMP(ISBINSTANCE);

        IF (GI_BOINSTANCE.FBLEXISTINSTANCE(ISBINSTANCE,ISBOBJECTTYPE,ISBOBJECTID,ISBEXTERNALID)) THEN
            ORFINSTANCE := GI_BOINSTANCE.GETREFINSTANCE
                            (
                                ISBOBJECTTYPE,
                                ISBOBJECTID,
                                ISBINSTANCE,
                                ISBEXTERNALID
                            );
        ELSE
            ORFINSTANCE := GI_BOINSTANCE.GETREFINSTANCE
                            (
                                MO_BOCONFIGURATIONCONTROL.FNUGETPROCESSOBJECT,
                                ISBOBJECTID,
                                ISBINSTANCE,
                                ISBEXTERNALID
                            );
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            INITREFCURSOR(ORFINSTANCE);
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
        WHEN OTHERS THEN
            INITREFCURSOR(ORFINSTANCE);
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;
    
    
    
















    PROCEDURE CLEARTMPINSTANCE (
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
    BEGIN
    
	    INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );
	    
        GI_BOINSTANCE.DOWNTMPINSTANCE ;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;

    





















    PROCEDURE SUMFIELDVALUE
    (
        ISBENTITY           IN  VARCHAR2,
        ISBFIELD            IN  VARCHAR2,
        ONUVALUE            OUT NUMBER,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        SBVALUE         GE_BOINSTANCECONTROL.STYSBVALUE;
		TBLINSTANCE     GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
		NUTBLINDEX      PLS_INTEGER;
		SBINSTANCE      VARCHAR2(200);
		SBCURRENTVALUE  GE_BOINSTANCECONTROL.STYSBVALUE;
		SBPADRE         VARCHAR2(200);
		SBGROUP         VARCHAR2(100);
		NUINDEX	        NUMBER;
	BEGIN
        INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        ONUVALUE := 0;

		
		GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTANCE);
		GE_BOINSTANCECONTROL.GETFATHERINSTANCE(SBINSTANCE,SBPADRE);

		
		GE_BOINSTANCECONTROL.INSTANCECHILDS(SBPADRE,TBLINSTANCE);

	    NUINDEX := TBLINSTANCE.FIRST;
	    WHILE NUINDEX IS NOT NULL LOOP
			UT_TRACE.TRACE('['||TBLINSTANCE(NUINDEX).SBINSTANCE||']',5);
			
			FINDGROUP (TBLINSTANCE(NUINDEX).SBINSTANCE, SBGROUP);

	    	
			IF (GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(TBLINSTANCE(NUINDEX).SBINSTANCE,
			                                          SBGROUP,
													  ISBENTITY,ISBFIELD,NUTBLINDEX)) THEN

				
				GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(TBLINSTANCE(NUINDEX).SBINSTANCE,
			                                          SBGROUP,
													  ISBENTITY,ISBFIELD,SBVALUE);

		        UT_TRACE.TRACE('-->'||TBLINSTANCE(NUINDEX).SBINSTANCE||'-'||ISBENTITY||'-'||ISBFIELD||'-'||SBVALUE,5);

            	IF ( UT_CONVERT.IS_NUMBER(SBVALUE) ) THEN
                    ONUVALUE := ONUVALUE + TO_NUMBER(NVL(SBVALUE,0));
                END IF;
			ELSE
				UT_TRACE.TRACE('No existe el Dato para esta instancia',6);
		    END IF;
			
	        NUINDEX := TBLINSTANCE.NEXT(NUINDEX);
		END LOOP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END SUMFIELDVALUE;
    
    

























	PROCEDURE PROCESSINSTANCETRANSACTION
    (
        ONUERRORCODE            OUT NUMBER,
        OSBERRORTEXT            OUT VARCHAR2,
        IBOACTIVEEXECUTEACTION  BOOLEAN DEFAULT TRUE,
        IBOUPDPROCESS           BOOLEAN DEFAULT FALSE
    )
    IS
    BEGIN

        SAVEPOINT SP_PROCESSINSTANCETRANSACTION;

        PROCESSINSTANCE
        (
            ONUERRORCODE,
            OSBERRORTEXT,
            IBOACTIVEEXECUTEACTION,
            IBOUPDPROCESS
        );

        IF(ONUERRORCODE <> GE_BOCONSTANTS.CNUSUCCESS) THEN

            ROLLBACK TO SAVEPOINT SP_PROCESSINSTANCETRANSACTION;

        ELSE

            COMMIT;

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	       ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END;


    






















    PROCEDURE GETINSTANCEVALUES
    (
        SBINSTANCENAME      IN VARCHAR2,
        IBLEXECUTERULES     IN BOOLEAN,
        TBATTRIBUTES        IN OUT NOCOPY GE_TYTBSTRING,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        
        RCATTRIBUTE         GE_BOINSTANCECONTROL.TYRCATTRIBUTESTACK;
        
        NUATTRIBUTEINDEX    GE_BOINSTANCECONTROL.STYNUINDEX;
        
        SBATTRIBUTEVALUE    VARCHAR2(4000);
    BEGIN
        UT_TRACE.TRACE('Inicio gi_bsInstanceManager.GetInstanceValues ', 15);
        
        GE_BOINSTANCECONTROL.GETFIRSTINSTANCEATTRIBUTE(SBINSTANCENAME, NUATTRIBUTEINDEX);

        WHILE NUATTRIBUTEINDEX IS NOT NULL LOOP

            TBATTRIBUTES.EXTEND(1);

            GE_BOINSTANCECONTROL.GETATTRIBUTE(NUATTRIBUTEINDEX, RCATTRIBUTE);

            UT_TRACE.TRACE('entidad [' || RCATTRIBUTE.SBENTITY || '] ' ||
                           'atributo [' || RCATTRIBUTE.SBATTRIBUTE || '] ' ||
                           'initExpr [' || RCATTRIBUTE.NUINITIALIZEEXPRESSION || '] ', 1);

            GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(RCATTRIBUTE.SBINSTANCE,
                                                      RCATTRIBUTE.SBGROUP,
                                                      RCATTRIBUTE.SBENTITY,
                                                      RCATTRIBUTE.SBATTRIBUTE,
                                                      SBATTRIBUTEVALUE);
            

            IF (IBLEXECUTERULES AND RCATTRIBUTE.NUINITIALIZEEXPRESSION IS NOT NULL) THEN

                GE_BOINSTANCECONTROL.EXEATTEXPRESSIONS(RCATTRIBUTE.SBINSTANCE,
                                                       RCATTRIBUTE.SBGROUP,
                                                       RCATTRIBUTE.SBENTITY,
                                                       RCATTRIBUTE.SBATTRIBUTE,
                                                       GE_BOINSTANCECONSTANTS.CNUINITIALIZE_EXPRESSION);

                GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(RCATTRIBUTE.SBINSTANCE,
                                                       RCATTRIBUTE.SBGROUP,
                                                       RCATTRIBUTE.SBENTITY,
                                                       RCATTRIBUTE.SBATTRIBUTE,
                                                       SBATTRIBUTEVALUE);
            END IF;


            TBATTRIBUTES(TBATTRIBUTES.COUNT) := RCATTRIBUTE.SBINSTANCE  || '|' ||
                                                RCATTRIBUTE.SBGROUP     || '|' ||
                                                RCATTRIBUTE.SBENTITY    || '|' ||
                                                RCATTRIBUTE.SBATTRIBUTE || '|' ||
                                                SBATTRIBUTEVALUE;

            GE_BOINSTANCECONTROL.GETNEXTINSTANCEATTRIBUTE(NUATTRIBUTEINDEX);

        END LOOP;
        
        UT_TRACE.TRACE('Fin gi_bsInstanceManager.GetInstanceValues ', 15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

    END GETINSTANCEVALUES;

    






















    PROCEDURE GETINSTANCEVALUES
    (
        SBINSTANCENAME      IN VARCHAR2,
        IBLEXECUTERULES     IN BOOLEAN,
        ORCATTRIBUTES       OUT CONSTANTS.TYREFCURSOR,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        
        TBATTRIBUTES        GE_TYTBSTRING;
        NUINSTANCESTACK     NUMBER;
    BEGIN
        INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        OPEN ORCATTRIBUTES FOR SELECT 1 FROM DUAL;

        
        IF (NOT GE_BOINSTANCECONTROL.FBLACCKEYINSTANCESTACK (SBINSTANCENAME, NUINSTANCESTACK)) THEN
            UT_TRACE.TRACE('GetInstanceValues No existe la instancia ' || SBINSTANCENAME,1);
            RETURN;
        END IF;

        TBATTRIBUTES := GE_TYTBSTRING();

        GETINSTANCEVALUES(SBINSTANCENAME,IBLEXECUTERULES,TBATTRIBUTES,ONUERRORCODE,OSBERRORTEXT);

        OPEN ORCATTRIBUTES FOR
    		SELECT 	UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',1) INSTANCE_NAME,
    	   			UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',2) GROUP_NAME,
    	   			UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',3) ENTITY_NAME,
    	   			UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',4) ATTRIBUTE_NAME,
    	   			UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',5) VALUE
            FROM TABLE(CAST(TBATTRIBUTES AS GE_TYTBSTRING)) A;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

    END GETINSTANCEVALUES;
    
    






















    PROCEDURE GETHIERARCHYINSTVALUES
    (
        SBINSTANCENAME      IN VARCHAR2,
        IBLEXECUTERULES     IN BOOLEAN,
        ORCATTRIBUTES       OUT CONSTANTS.TYREFCURSOR,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        TBHIERARCHY         GE_BOINSTANCECONTROL.TYTBINSTANCEHIERARCHY;
        NUINDEX             GE_BOINSTANCECONTROL.STYNUINDEX;
        TBATTRIBUTES        GE_TYTBSTRING;
        NUINSTANCESTACK     NUMBER;
    BEGIN
        UT_TRACE.TRACE('Inicio gi_bsInstanceManager.GetHierarchyInstValues ', 5);
        INITVARERROR ( ONUERRORCODE, OSBERRORTEXT );

        OPEN ORCATTRIBUTES FOR SELECT 1 FROM DUAL;

        TBATTRIBUTES := GE_TYTBSTRING();

        
        IF (NOT GE_BOINSTANCECONTROL.FBLACCKEYINSTANCESTACK (SBINSTANCENAME, NUINSTANCESTACK)) THEN
            UT_TRACE.TRACE('No existe la instancia ' || SBINSTANCENAME, 5);
            RETURN;
        END IF;
        
        GETINSTANCEVALUES(SBINSTANCENAME,IBLEXECUTERULES,TBATTRIBUTES,ONUERRORCODE,OSBERRORTEXT);

        GE_BOINSTANCECONTROL.INSTANCEHIERARCHY (SBINSTANCENAME, TBHIERARCHY);

        
        NUINDEX := TBHIERARCHY.FIRST;
        WHILE NUINDEX IS NOT NULL LOOP

            GETINSTANCEVALUES(TBHIERARCHY(NUINDEX).SBINSTANCE,IBLEXECUTERULES,TBATTRIBUTES,ONUERRORCODE,OSBERRORTEXT);

            NUINDEX := TBHIERARCHY.NEXT(NUINDEX);
        END LOOP;

        NUINDEX := TBATTRIBUTES.COUNT;

        UT_TRACE.TRACE('tbAttributes: '||TBATTRIBUTES.COUNT,20);
        
        OPEN ORCATTRIBUTES FOR
    		SELECT 	UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',1) INSTANCE_NAME,
    	   			UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',2) GROUP_NAME,
    	   			UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',3) ENTITY_NAME,
    	   			UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',4) ATTRIBUTE_NAME,
    	   			UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',5) VALUE
            FROM TABLE(CAST(TBATTRIBUTES AS GE_TYTBSTRING)) A;

        UT_TRACE.TRACE('Fin gi_bsInstanceManager.GetHierarchyInstValues ', 5);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

    END GETHIERARCHYINSTVALUES;

    






















    PROCEDURE DROPREBUILDINSTANCES
    (
        ISBPARENTINSTANCE   IN VARCHAR2,
        INUOBJECT_TYPE      IN    NUMBER,
        INUOBJECT_ID        IN    NUMBER,
        ORFATTRIBUTES       OUT CONSTANTS.TYREFCURSOR,
        ONUERRORCODE        OUT NUMBER,
        OSBERRORTEXT        OUT VARCHAR2
    )
    IS
        CURSOR CUCURRENTCONFIGURATION IS
            SELECT * FROM  GI_TMP_CONFIGURATION
            WHERE  GI_TMP_CONFIGURATION.ENTITY_TYPE_ID = INUOBJECT_TYPE
            AND  GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1
            AND  GI_TMP_CONFIGURATION.EXTERNAL_ID = INUOBJECT_ID  ;

        CURSOR CUCHILDRENBYCONFIG
        (
            INUCONFIGURATION_ID    IN  GI_TMP_CONFIGURATION.CONFIGURATION_ID%TYPE
        )
        IS
            SELECT * FROM  GI_TMP_CONFIGURATION
            WHERE  GI_TMP_CONFIGURATION.PARENT_CONF_ID = INUCONFIGURATION_ID
            AND  GI_TMP_CONFIGURATION.TYPE_ATTRIB_ID = 1;

        RCINSTANCECONF  CUCURRENTCONFIGURATION%ROWTYPE;
        TYPE TYTBCONFIG IS TABLE OF  CUCURRENTCONFIGURATION%ROWTYPE INDEX BY BINARY_INTEGER;
        SBINSTANCENAME  GI_TMP_INSTANCE.INSTANCENAME%TYPE;

        PROCEDURE GETCURRENTCONFIGURATION
        IS
        BEGIN
            OPEN CUCURRENTCONFIGURATION;
            FETCH CUCURRENTCONFIGURATION INTO RCINSTANCECONF;
            CLOSE CUCURRENTCONFIGURATION;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END GETCURRENTCONFIGURATION;

        FUNCTION FSBFIRSTCHILDINSTANCE
        (
            SBFATHERINSTANCE    IN  VARCHAR2,
            ISBOBJECTTYPE       IN  VARCHAR2,
            ISBOBJECTID         IN  VARCHAR2
        )RETURN VARCHAR2
        IS
            RFCURSOR    CONSTANTS.TYREFCURSOR;

            SBINSTANCE      GI_TMP_INSTANCE.INSTANCENAME%TYPE;
            SBFATHERINTANCE GI_TMP_INSTANCE.FATHERINSTANCE%TYPE;
            SBOBJECTTYPEID  GI_TMP_INSTANCE.OBJECTTYPEID%TYPE;
            SBOBJECTID      GI_TMP_INSTANCE.OBJECTID%TYPE;

        BEGIN
             IF NOT (GI_BOINSTANCE.FBLTMPINSTANCE ) THEN
                GI_BOINSTANCE.CHARGEINSTANCEINTMP(SBFATHERINSTANCE);
             END IF;

             RFCURSOR := GI_BOINSTANCE.GETREFINSTANCE(ISBOBJECTTYPE,ISBOBJECTID,SBFATHERINSTANCE );
             FETCH RFCURSOR INTO SBINSTANCE,SBFATHERINTANCE,SBOBJECTTYPEID,SBOBJECTID ;
             CLOSE RFCURSOR;

             UT_TRACE.TRACE('Child Instance '||SBINSTANCE, 5);
             RETURN SBINSTANCE;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END FSBFIRSTCHILDINSTANCE;

        PROCEDURE CREATEINSTANCES
        (
            RCINSTANCECONFIG    IN CUCURRENTCONFIGURATION%ROWTYPE,
            SBPARENTINSTANCE    IN GE_BOINSTANCECONTROL.STYSBNAME
        )
        IS
            SBNEWINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
            NUINDEX         BINARY_INTEGER;
            TBCONFIG        TYTBCONFIG;
            NUERROR         NUMBER;
            SBERROR         VARCHAR2(2000);
        BEGIN
            UT_TRACE.TRACE('Inicio gi_bsInstanceManager.DropRebuildInstaces.createInstances sbParentInstance: '|| SBPARENTINSTANCE, 5);

            IF(RCINSTANCECONFIG.ENTITY_ID IS NULL) THEN
                RETURN;
            END IF;

            GI_BSINSTANCEMANAGER.CREATEINSTANCE(RCINSTANCECONFIG.TAG_NAME,RCINSTANCECONFIG.ENTITY_ID, RCINSTANCECONFIG.EXTERNAL_ID,SBPARENTINSTANCE, SBNEWINSTANCE,NUERROR,SBERROR);
            GI_BSINSTANCEMANAGER.ADDATTRIBUTEFRAME(SBNEWINSTANCE,RCINSTANCECONFIG.ENTITY_TYPE_ID, RCINSTANCECONFIG.EXTERNAL_TYPE_ID, RCINSTANCECONFIG.FRAME_ID, NUERROR, SBERROR);
            GI_BSINSTANCEMANAGER.EXECBEFOREEXPRESSIONFRAME(RCINSTANCECONFIG.ENTITY_TYPE_ID, RCINSTANCECONFIG.EXTERNAL_TYPE_ID, RCINSTANCECONFIG.FRAME_ID, NUERROR, SBERROR);

            OPEN CUCHILDRENBYCONFIG(RCINSTANCECONFIG.CONFIGURATION_ID);
            FETCH CUCHILDRENBYCONFIG BULK COLLECT INTO TBCONFIG;
            CLOSE CUCHILDRENBYCONFIG;

            UT_TRACE.TRACE('Instancias a Crear '||TBCONFIG.COUNT, 5);

            NUINDEX := TBCONFIG.FIRST;
            WHILE (NUINDEX IS NOT NULL) LOOP
                CREATEINSTANCES(TBCONFIG(NUINDEX),SBNEWINSTANCE);
                NUINDEX := TBCONFIG.NEXT(NUINDEX);
            END LOOP;

            UT_TRACE.TRACE('Termina gi_bsInstanceManager.DropRebuildInstaces.createInstances sbParentInstance: '|| SBPARENTINSTANCE, 5);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CREATEINSTANCES;

    BEGIN
        UT_TRACE.TRACE('Inicio gi_bsInstanceManager.DropRebuildInstaces', 5);

        
        SBINSTANCENAME := FSBFIRSTCHILDINSTANCE(ISBPARENTINSTANCE, INUOBJECT_TYPE, INUOBJECT_ID);

        
        GI_BSINSTANCEMANAGER.DROPINSTANCE(SBINSTANCENAME,ONUERRORCODE,OSBERRORTEXT);

        IF ( ONUERRORCODE <> GE_BOCONSTANTS.CNUSUCCESS ) THEN
            RETURN;
        END IF;
        
        GETCURRENTCONFIGURATION;

        
        CREATEINSTANCES( RCINSTANCECONF, ISBPARENTINSTANCE);

        
        SBINSTANCENAME := FSBFIRSTCHILDINSTANCE(ISBPARENTINSTANCE, INUOBJECT_TYPE , INUOBJECT_ID);

        
        GI_BSINSTANCEMANAGER.GETHIERARCHYINSTVALUES(SBINSTANCENAME,FALSE,ORFATTRIBUTES,ONUERRORCODE,OSBERRORTEXT);

        UT_TRACE.TRACE('Fin gi_bsInstanceManager.DropRebuildInstaces', 5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END DROPREBUILDINSTANCES;
    
    






















    PROCEDURE DROPENTITYANDMIRROR
    (
        ISBINSTANCE     IN VARCHAR2,
        ISBGRUPO        IN VARCHAR2,
        ISBENTITY       IN  VARCHAR2,
        ONUERRORCODE    OUT NUMBER,
        OSBERRORTEXT    OUT VARCHAR2
    )
    IS
    BEGIN

        GI_BSINSTANCEMANAGER.DROPENTITY(ISBINSTANCE,ISBGRUPO,ISBENTITY, ONUERRORCODE, OSBERRORTEXT);

        
        IF ( ONUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS ) THEN
            RETURN;
        END IF;
        
        
        MO_BOUNCOMPOSITIONUTIL.DELETEMIRRORENTITY(ISBINSTANCE,ISBGRUPO,ISBENTITY);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
	        ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ERRORS.GETERROR (ONUERRORCODE, OSBERRORTEXT);
    END DROPENTITYANDMIRROR;
    

END GI_BSINSTANCEMANAGER;