PACKAGE BODY Ge_BoAlertMessageParam
IS






























































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO203401';

    
    
    

    
    
    

    
    
    

    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    


















    PROCEDURE GETALERTMESSAGEPARAM
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        
        GE_BCALERTMESSAGEPARAM.GETALERTMESSAGEPARAM(ORFREFCURSOR);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETALERTMESSAGEPARAM;
    
    


















    PROCEDURE GETLEGCAUSAL
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        
        GE_BCALERTMESSAGEPARAM.GETLEGCAUSAL(ORFREFCURSOR);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETLEGCAUSAL;
    
    


















    PROCEDURE GETDAMAGETYPE
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        
        GE_BCALERTMESSAGEPARAM.GETDAMAGETYPE(ORFREFCURSOR);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETDAMAGETYPE;
    
    


















    PROCEDURE GETORDERSTATUS
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        
        GE_BCALERTMESSAGEPARAM.GETORDERSTATUS(ORFREFCURSOR);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERSTATUS;
    
    





















    PROCEDURE GETFINALORDERSTATUS
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        
        GE_BCALERTMESSAGEPARAM.GETFINALORDERSTATUS(ORFREFCURSOR);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETFINALORDERSTATUS;
    
    


















    PROCEDURE GETOPERUNITSSTATUS
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        
        GE_BCALERTMESSAGEPARAM.GETOPERUNITSSTATUS(ORFREFCURSOR);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETOPERUNITSSTATUS;
    
    


















    PROCEDURE GETALLNOTIFICATIONS
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        
        GE_BCALERTMESSAGEPARAM.GETALLNOTIFICATIONS(ORFREFCURSOR);


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETALLNOTIFICATIONS;
    
    


















    PROCEDURE GETPERSONSNOTIF
    (
        INUALERTMESSAGEID   IN      GE_MESG_ALERT.MESG_ALERT_ID%TYPE,
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        
        GE_BCALERTMESSAGEPARAM.GETPERSONSNOTIF
        (
            INUALERTMESSAGEID,
            ORFREFCURSOR
        );


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPERSONSNOTIF;
    
    


















    PROCEDURE GETADMINBASE
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        
        GE_BCALERTMESSAGEPARAM.GETADMINBASE(ORFREFCURSOR);


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETADMINBASE;
    
    



















    PROCEDURE GETVALIDNOTIFTYPE
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        
        GE_BCALERTMESSAGEPARAM.GETVALIDNOTIFTYPE(ORFREFCURSOR);


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETVALIDNOTIFTYPE;
    
    
































    PROCEDURE INSALERTMESSAGEPARAM
    (
        ISBNAME             IN      GE_MESG_ALERT.NAME%TYPE,
        INUNOTIFID          IN      GE_MESG_ALERT.NOTIFICATION_ID%TYPE,
        INUENTITYID         IN      GE_MESG_ALERT.ENTITY_ID%TYPE,
        ISBREFERENCE        IN      GE_MESG_ALERT.REFERENCE%TYPE,
        INUINITSTATUS       IN      GE_MESG_ALERT.INITIAL_STATUS%TYPE,
        INUFINALSTATUS      IN      GE_MESG_ALERT.FINAL_STATUS%TYPE,
        IDTINITDATE         IN      GE_MESG_ALERT.INITIAL_DATE%TYPE,
        INUFINALDATE        IN      GE_MESG_ALERT.FINAL_DATE%TYPE,
        ISBISTEMPEVENT      IN      GE_MESG_ALERT.IS_TEMP_EVENT%TYPE,
        INUDAMAGETYPE       IN      GE_MESG_ALERT.TYPE_DAMAGE%TYPE,
        INULEGCAUSAL        IN      GE_MESG_ALERT.CAUSAL_LEGALIZATION%TYPE,
        INUOBJECTID         IN      GE_MESG_ALERT.OBJECT_ID%TYPE,
        ISBISACTIVE         IN      GE_MESG_ALERT.ACTIVE%TYPE,
        INUCONFIGID         IN      GE_MESG_ALERT.CONFIG_EXPRESSION_ID%TYPE,
        ONUID               OUT     GE_MESG_ALERT.MESG_ALERT_ID%TYPE
    )
    IS
        RCALERTMESSAPAR             DAGE_MESG_ALERT.STYGE_MESG_ALERT;
    BEGIN

        
        ONUID := GE_BOSEQUENCE.FNUNEXTGE_MESG_ALERT;

        
        RCALERTMESSAPAR.MESG_ALERT_ID       := ONUID;
        RCALERTMESSAPAR.NAME                := ISBNAME;
        RCALERTMESSAPAR.NOTIFICATION_ID     := INUNOTIFID;
        RCALERTMESSAPAR.ENTITY_ID           := INUENTITYID;
        RCALERTMESSAPAR.REFERENCE           := ISBREFERENCE;
        RCALERTMESSAPAR.INITIAL_STATUS      := INUINITSTATUS;
        RCALERTMESSAPAR.FINAL_STATUS        := INUFINALSTATUS;
        RCALERTMESSAPAR.INITIAL_DATE        := IDTINITDATE;
        RCALERTMESSAPAR.FINAL_DATE          := INUFINALDATE;
        RCALERTMESSAPAR.IS_TEMP_EVENT       := ISBISTEMPEVENT;
        RCALERTMESSAPAR.TYPE_DAMAGE         := INUDAMAGETYPE;
        RCALERTMESSAPAR.CAUSAL_LEGALIZATION := INULEGCAUSAL;
        RCALERTMESSAPAR.OBJECT_ID           := INUOBJECTID;
        RCALERTMESSAPAR.ACTIVE              := ISBISACTIVE;
        RCALERTMESSAPAR.CONFIG_EXPRESSION_ID:= INUCONFIGID;
        
        IF(INUENTITYID IS NOT NULL) THEN
            RCALERTMESSAPAR.ENTITY_NAME         := DAGE_ENTITY.FSBGETNAME_(INUENTITYID);
        END IF;
        
        
        DAGE_MESG_ALERT.INSRECORD(RCALERTMESSAPAR);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSALERTMESSAGEPARAM;
    
    
































    PROCEDURE UPDALERTMESSAGEPARAM
    (
        INUID               IN      GE_MESG_ALERT.MESG_ALERT_ID%TYPE,
        ISBNAME             IN      GE_MESG_ALERT.NAME%TYPE,
        INUNOTIFID          IN      GE_MESG_ALERT.NOTIFICATION_ID%TYPE,
        INUENTITYID         IN      GE_MESG_ALERT.ENTITY_ID%TYPE,
        ISBREFERENCE        IN      GE_MESG_ALERT.REFERENCE%TYPE,
        INUINITSTATUS       IN      GE_MESG_ALERT.INITIAL_STATUS%TYPE,
        INUFINALSTATUS      IN      GE_MESG_ALERT.FINAL_STATUS%TYPE,
        IDTINITDATE         IN      GE_MESG_ALERT.INITIAL_DATE%TYPE,
        INUFINALDATE        IN      GE_MESG_ALERT.FINAL_DATE%TYPE,
        ISBISTEMPEVENT      IN      GE_MESG_ALERT.IS_TEMP_EVENT%TYPE,
        INUDAMAGETYPE       IN      GE_MESG_ALERT.TYPE_DAMAGE%TYPE,
        INULEGCAUSAL        IN      GE_MESG_ALERT.CAUSAL_LEGALIZATION%TYPE,
        INUOBJECTID         IN      GE_MESG_ALERT.OBJECT_ID%TYPE,
        ISBISACTIVE         IN      GE_MESG_ALERT.ACTIVE%TYPE,
        INUCONFIGID         IN      GE_MESG_ALERT.CONFIG_EXPRESSION_ID%TYPE
    )
    IS
        RCALERTMESSAPAR             DAGE_MESG_ALERT.STYGE_MESG_ALERT;
    BEGIN

        
        DAGE_MESG_ALERT.GETRECORD(INUID, RCALERTMESSAPAR);

        
        RCALERTMESSAPAR.NAME                := ISBNAME;
        RCALERTMESSAPAR.NOTIFICATION_ID     := INUNOTIFID;
        RCALERTMESSAPAR.ENTITY_ID           := INUENTITYID;
        RCALERTMESSAPAR.REFERENCE           := ISBREFERENCE;
        RCALERTMESSAPAR.INITIAL_STATUS      := INUINITSTATUS;
        RCALERTMESSAPAR.FINAL_STATUS        := INUFINALSTATUS;
        RCALERTMESSAPAR.INITIAL_DATE        := IDTINITDATE;
        RCALERTMESSAPAR.FINAL_DATE          := INUFINALDATE;
        RCALERTMESSAPAR.IS_TEMP_EVENT       := ISBISTEMPEVENT;
        RCALERTMESSAPAR.TYPE_DAMAGE         := INUDAMAGETYPE;
        RCALERTMESSAPAR.CAUSAL_LEGALIZATION := INULEGCAUSAL;
        RCALERTMESSAPAR.OBJECT_ID           := INUOBJECTID;
        RCALERTMESSAPAR.ACTIVE              := ISBISACTIVE;
        RCALERTMESSAPAR.CONFIG_EXPRESSION_ID:= INUCONFIGID;
        
        IF(INUENTITYID IS NOT NULL) THEN
            RCALERTMESSAPAR.ENTITY_NAME         := DAGE_ENTITY.FSBGETNAME_(INUENTITYID);
        END IF;
        
        
        DAGE_MESG_ALERT.UPDRECORD(RCALERTMESSAPAR);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDALERTMESSAGEPARAM;
    
    

















    PROCEDURE DELALERTMESSAGEPARAM
    (
        INUID               IN      GE_MESG_ALERT.MESG_ALERT_ID%TYPE
    )
    IS
    BEGIN
        
        DAGE_MESG_ALERT.DELRECORD(INUID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELALERTMESSAGEPARAM;
    
    






























    PROCEDURE INSPERSONALERT
    (
        INUMESGALERTID      IN      GE_PERSON_ALERT.MESG_ALERT_ID%TYPE,
        INUPERSON           IN      GE_PERSON_ALERT.PERSON_ID%TYPE,
        INUBASE             IN      GE_PERSON_ALERT.BASE_ADMIN_ID%TYPE,
        INUZONE             IN      GE_PERSON_ALERT.ZONE_ID%TYPE,
        INUNOTIFTYPE        IN      GE_PERSON_ALERT.NOTIFICATION_TYPE_ID%TYPE,
        ISBISACTIVE         IN      GE_PERSON_ALERT.ACTIVE%TYPE,
        ISBNEEDVERIFY       IN      VARCHAR2,
        ONUID               OUT     GE_PERSON_ALERT.PERSON_ALERT_ID%TYPE
    )
    IS
        RCPERSONALERT               DAGE_PERSON_ALERT.STYGE_PERSON_ALERT;
    BEGIN
    
        
        IF  GE_BCALERTMESSAGEPARAM.FBLEXIST
            (
                INUMESGALERTID,
                INUPERSON,
                INUBASE,
                INUZONE,
                INUNOTIFTYPE,
                ISBNEEDVERIFY,
                -9999
            )
            THEN
                ERRORS.SETERROR(12521, DAGE_MESG_ALERT.FSBGETNAME(INUMESGALERTID));
                RAISE EX.CONTROLLED_ERROR;
                RETURN;
        END IF;

        
        ONUID := GE_BOSEQUENCE.FNUNEXTGE_PERSON_ALERT;

        
        RCPERSONALERT.PERSON_ALERT_ID       := ONUID;
        RCPERSONALERT.MESG_ALERT_ID         := INUMESGALERTID;
        RCPERSONALERT.PERSON_ID             := INUPERSON;
        RCPERSONALERT.BASE_ADMIN_ID         := INUBASE;
        RCPERSONALERT.ZONE_ID               := INUZONE;
        RCPERSONALERT.NOTIFICATION_TYPE_ID  := INUNOTIFTYPE;
        RCPERSONALERT.ACTIVE                := ISBISACTIVE;

        
        DAGE_PERSON_ALERT.INSRECORD(RCPERSONALERT);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSPERSONALERT;
    
    





























    PROCEDURE UPDPERSONALERT
    (
        INUID               IN      GE_PERSON_ALERT.PERSON_ALERT_ID%TYPE,
        INUMESGALERTID      IN      GE_PERSON_ALERT.MESG_ALERT_ID%TYPE,
        INUPERSON           IN      GE_PERSON_ALERT.PERSON_ID%TYPE,
        INUBASE             IN      GE_PERSON_ALERT.BASE_ADMIN_ID%TYPE,
        INUZONE             IN      GE_PERSON_ALERT.ZONE_ID%TYPE,
        INUNOTIFTYPE        IN      GE_PERSON_ALERT.NOTIFICATION_TYPE_ID%TYPE,
        ISBISACTIVE         IN      GE_PERSON_ALERT.ACTIVE%TYPE,
        ISBNEEDVERIFY       IN      VARCHAR2
    )
    IS
        RCPERSONALERT               DAGE_PERSON_ALERT.STYGE_PERSON_ALERT;
    BEGIN
    
        
        IF  GE_BCALERTMESSAGEPARAM.FBLEXIST
            (
                INUMESGALERTID,
                INUPERSON,
                INUBASE,
                INUZONE,
                INUNOTIFTYPE,
                ISBNEEDVERIFY,
                INUID
            )
            THEN
                ERRORS.SETERROR(12521, DAGE_MESG_ALERT.FSBGETNAME(INUMESGALERTID));
                RAISE EX.CONTROLLED_ERROR;
                RETURN;
        END IF;
        
        
        DAGE_PERSON_ALERT.GETRECORD(INUID, RCPERSONALERT);

        
        RCPERSONALERT.MESG_ALERT_ID         := INUMESGALERTID;
        RCPERSONALERT.PERSON_ID             := INUPERSON;
        RCPERSONALERT.BASE_ADMIN_ID         := INUBASE;
        RCPERSONALERT.ZONE_ID               := INUZONE;
        RCPERSONALERT.NOTIFICATION_TYPE_ID  := INUNOTIFTYPE;
        RCPERSONALERT.ACTIVE                := ISBISACTIVE;

        
        DAGE_PERSON_ALERT.UPDRECORD(RCPERSONALERT);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDPERSONALERT;
    
    

















    PROCEDURE DELPERSONALERT
    (
        INUID               IN      GE_PERSON_ALERT.PERSON_ALERT_ID%TYPE
    )
    IS
    BEGIN
        
        DAGE_PERSON_ALERT.DELRECORD(INUID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELPERSONALERT;
    
    



























    PROCEDURE GETSYSTEMUSERDATA
    (
        ONUPERSONID         OUT     GE_PERSON.PERSON_ID%TYPE,
        OSBAREA             OUT     GE_ORGANIZAT_AREA.DISPLAY_DESCRIPTION%TYPE,
        OSBNAME             OUT     GE_PERSON.NAME_%TYPE,
        OSBPERSONTYPE       OUT     GE_PERSONAL_TYPE.DESCRIPTION%TYPE,
        OBLHASADMINROLE     OUT     BOOLEAN,
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        NUUSERID          GE_PERSON.PERSON_ID%TYPE;
    BEGIN
        
        NUUSERID := SA_BOSYSTEM.GETSYSTEMUSERID;

        
        ONUPERSONID := GE_BCPERSON.FNUGETFIRSTPERSONBYUSERID(NUUSERID);
        
        
        OSBNAME := DAGE_PERSON.FSBGETNAME_(ONUPERSONID);
        
        
        IF DAGE_PERSON.FNUGETORGANIZAT_AREA_ID(ONUPERSONID) IS NOT NULL THEN
            OSBAREA := DAGE_ORGANIZAT_AREA.FSBGETDISPLAY_DESCRIPTION
                        (
                            DAGE_PERSON.FNUGETORGANIZAT_AREA_ID(ONUPERSONID)
                        );
        ELSE
            OSBAREA := '';
        END IF;

                    
        
        IF DAGE_PERSON.FNUGETPOSITION_TYPE_ID(ONUPERSONID) IS NOT NULL THEN
            OSBPERSONTYPE := DAGE_POSITION_TYPE.FSBGETNAME
                            (
                                DAGE_PERSON.FNUGETPOSITION_TYPE_ID(ONUPERSONID)
                            );
        ELSE
            OSBPERSONTYPE := '';
        END IF;

        
        OBLHASADMINROLE := SA_BCUSER.USERHASADMINROLE(NUUSERID);
        
        
        GE_BCALERTMESSAGEPARAM.GETALERTSBYPERSON(ONUPERSONID, ORFREFCURSOR);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSYSTEMUSERDATA;
    
    
























    PROCEDURE GETFINDUSERDATA
    (
        INUPERSONID         IN      GE_PERSON.PERSON_ID%TYPE,
        OSBAREA             OUT     GE_ORGANIZAT_AREA.DISPLAY_DESCRIPTION%TYPE,
        OSBNAME             OUT     GE_PERSON.NAME_%TYPE,
        OSBPERSONTYPE       OUT     GE_PERSONAL_TYPE.DESCRIPTION%TYPE,
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        NUUSERID          GE_PERSON.PERSON_ID%TYPE;
    BEGIN

        
        OSBNAME := DAGE_PERSON.FSBGETNAME_(INUPERSONID);

        
        IF DAGE_PERSON.FNUGETORGANIZAT_AREA_ID(INUPERSONID) IS NOT NULL THEN
             
            OSBAREA := DAGE_ORGANIZAT_AREA.FSBGETDISPLAY_DESCRIPTION
                    (
                        DAGE_PERSON.FNUGETORGANIZAT_AREA_ID(INUPERSONID)
                    );
        ELSE
            OSBAREA := '';
        END IF;

        
        IF DAGE_PERSON.FNUGETPOSITION_TYPE_ID(INUPERSONID) IS NOT NULL THEN
            OSBPERSONTYPE := DAGE_POSITION_TYPE.FSBGETNAME
                            (
                                DAGE_PERSON.FNUGETPOSITION_TYPE_ID(INUPERSONID)
                            );
        ELSE
            OSBPERSONTYPE := '';
        END IF;

        
        GE_BCALERTMESSAGEPARAM.GETALERTSBYPERSON(INUPERSONID, ORFREFCURSOR);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETFINDUSERDATA;
    
    

















    PROCEDURE GETSERVICES
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        
        GE_BCALERTMESSAGEPARAM.GETSERVICES
        (
            GE_BOCONSTANTS.CNUOBJECTTYPENOTIF,
            ORFREFCURSOR
        );
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSERVICES;
    
    



















    PROCEDURE GETENTITYNOTIF
    (
        INUENTITY_ID        IN      GE_MESG_ALERT.ENTITY_ID%TYPE,
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        TBENTITY        UT_STRING.TYTB_STRING;
        SBSELECT        VARCHAR2(32767);
        V_COUNTER       NUMBER;
        CUCURSOR        CONSTANTS.TYREFCURSOR;

    BEGIN
        
        GE_BCALERTMESSAGEPARAM.GETCHILDENT
        (
            INUENTITY_ID,
            CUCURSOR
        );
        FETCH CUCURSOR BULK COLLECT INTO TBENTITY;
        CLOSE CUCURSOR;

        
        SBSELECT := 'SELECT  NOTIFICATION_ID Id,' || CHR(10) ||
                    '        DESCRIPTION'         || CHR(10) ||
                    'FROM    ge_notification'     || CHR(10) ||
                    'WHERE   ge_notification.parameters in (''ENTITY_ID=' || INUENTITY_ID || '''';

        
        FOR V_COUNTER IN 1 .. TBENTITY.COUNT
        LOOP
            SBSELECT := SBSELECT || ',''ENTITY_ID=' || TBENTITY(V_COUNTER) || '''';
        END LOOP;
        SBSELECT := SBSELECT || ')';

        OPEN ORFREFCURSOR FOR SBSELECT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETENTITYNOTIF;
    
    



















    PROCEDURE GETSELECTSTATEMENT
    (
        INUENTITYID         IN      GE_MESG_ALERT.ENTITY_ID%TYPE,
        OSBSELECTSTATEMENT  OUT     GE_STATEMENT.STATEMENT%TYPE,
        OSBENTITYDESC       OUT     GE_ENTITY.DISPLAY_NAME%TYPE
    )
    IS
        V_COUNTER           NUMBER;
        CUCURSOR            CONSTANTS.TYREFCURSOR;
        TBFIELDS            DAGE_ENTITY_ATTRIBUTES.TYTBGE_ENTITY_ATTRIBUTES;
        TBSELECT            UT_STRING.TYTB_STRING;
        SBWHERE             VARCHAR2(32767);
        CNUENTITYORDER      CONSTANT GE_ENTITY.ENTITY_ID%TYPE := 3294;
        CNUENTITYTASKTYPE   CONSTANT GE_ENTITY.ENTITY_ID%TYPE := 3313;
    BEGIN
        UT_TRACE.TRACE('Inicia Ge_BoAlertMessageParam.GetSelectStatement',1);

        
        GE_BCUTILITIES.GETTECHNAMES
        (
            INUENTITYID,
            CUCURSOR
        );
        FETCH CUCURSOR BULK COLLECT INTO TBFIELDS;
        CLOSE CUCURSOR;

        
        GE_BCUTILITIES.GETFIRSTLOVDESCENT
        (
            INUENTITYID,
            CUCURSOR
        );
        FETCH CUCURSOR BULK COLLECT INTO TBSELECT;
        CLOSE CUCURSOR;

        
        IF(TBSELECT.COUNT = 0) THEN
            TBSELECT.DELETE;
            GE_BCUTILITIES.GETFIRSTVAR2FIELDENT
            (
                INUENTITYID,
                CUCURSOR
            );
            FETCH CUCURSOR BULK COLLECT INTO TBSELECT;
            CLOSE CUCURSOR;
        END IF;

        
        IF(TBSELECT.COUNT = 0) THEN
            TBSELECT.DELETE;
            TBSELECT(1) :=  TBFIELDS(1).TECHNICAL_NAME;
        END IF;

         
        FOR V_COUNTER IN 1 .. TBFIELDS.COUNT
            LOOP

            IF SBWHERE IS NULL THEN
                SBWHERE := '(' || TBFIELDS(V_COUNTER).TECHNICAL_NAME;
            ELSE
                SBWHERE := SBWHERE || ' || ''|'' || ' || TBFIELDS(V_COUNTER).TECHNICAL_NAME;
            END IF;
        END LOOP;

        SBWHERE := SBWHERE || ')';
        OSBSELECTSTATEMENT := 'Select upper' || SBWHERE || ' Id, ' || TBSELECT(1) || ' Description ' ||  'FROM ' || DAGE_ENTITY.FSBGETNAME_(INUENTITYID)||  ' ' || CHR(64) ||'WHERE' || CHR(64) || ' ' || CHR(64) ||' upper' || SBWHERE || ' LIKE ''%'' || :id || ''%'' ' || CHR(64) ||
                              CHR(64) || ' upper(' || TBSELECT(1) || ') like ''%'' || :description || ''%''' || CHR(64);

        OSBENTITYDESC := DAGE_ENTITY.FSBGETDISPLAY_NAME(INUENTITYID);
        UT_TRACE.TRACE(OSBSELECTSTATEMENT,1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CUCURSOR%ISOPEN THEN
                CLOSE CUCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF CUCURSOR%ISOPEN THEN
                CLOSE CUCURSOR;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
    END GETSELECTSTATEMENT;
    
    


























    PROCEDURE SENDNOTIFY
    (
        INUMESGALERTID      IN      GE_MESG_ALERT.MESG_ALERT_ID%TYPE,
        ISBREFNOTIF         IN      GE_MESG_ALERT.REFERENCE%TYPE,
        ONUNOTIFID          OUT     GE_NOTIFICATION.NOTIFICATION_ID%TYPE,
        IOSBLOGNOTIF     IN OUT     VARCHAR2,
        IDTCHANGEDATE       IN      OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        TBFIELDSNOTIF       UT_STRING.TYTB_STRING;
        NUNOTITYPE          GE_NOTIFICATION.NOTIFICATION_TYPE_ID%TYPE;
        NULOGNOTIF          GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE := NULL;
        NUNOTIFID           GE_NOTIFICATION.NOTIFICATION_ID%TYPE := NULL;
        TBSTRING            UT_STRING.TYTB_STRING;
        CUCURSOR            CONSTANTS.TYREFCURSOR;
        TBFIELDS            DAGE_ENTITY_ATTRIBUTES.TYTBGE_ENTITY_ATTRIBUTES;
        SBINPUT             VARCHAR2(2000);
        NUORGMDLE           GE_NOTIFICATION.ORIGIN_MODULE_ID%TYPE;
        NUCLASSNOTIF        GE_NOTIFICATION.NOTIFICATION_CLASS_ID%TYPE;
        
        SBTIPOFORMATO       GE_NOTIFICATION.FORMAT_TYPE%TYPE;
        SBSALIDATEXTO       GE_NOTIFICATION_LOG.OUTPUT_TEXT%TYPE;
        SBSALIDACLOB        GE_NOTIFICATION_LOG.OUTPUT_CLOB%TYPE;
        SBNAME              GE_OBJECT.NAME_%TYPE;
        SBUSING             GE_BOUTILITIES.STYSTATEMENT;
        TBPERSTONOTIFY      GE_BOFWPARAMETMESGALERT.TYTBPERSONS;
        SBIDX               VARCHAR2(20);
        CSBPERSONID         CONSTANT VARCHAR2(20) := 'PERSON_ID';
        CSBNOTIF_TYPE       CONSTANT VARCHAR2(20) := 'NOTIFICATION_TYPE_ID';
        CSBMESG_ALERT       CONSTANT VARCHAR2(20) := 'MESG_ALERT_ID';
        NUEXTERNAL          NUMBER := INUMESGALERTID;
        NUNOTIFICATIONLOG   GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;
        NUERROR             GE_ERROR_LOG.ERROR_LOG_ID%TYPE := GE_BOCONSTANTS.CNUSUCCESS;
        SBERROR             GE_ERROR_LOG.DESCRIPTION%TYPE := GE_BOCONSTANTS.CSBNOMESSAGE;
        SBINPUTDTA          VARCHAR2(1024);
        SBOUTTEXT           VARCHAR2(4000);
        NUOBJECT            GE_OBJECT.OBJECT_ID%TYPE;
        TBENTITY            UT_STRING.TYTB_STRING;
    BEGIN
        UT_TRACE.TRACE('Inicia Ge_BoAlertMessageParam.SendNotify', 2);
        SBUSING := NULL;
        
        NUNOTIFID := DAGE_MESG_ALERT.FNUGETNOTIFICATION_ID(INUMESGALERTID);
        ONUNOTIFID := NUNOTIFID;

        
        NUNOTITYPE := DAGE_NOTIFICATION.FNUGETNOTIFICATION_TYPE_ID(NUNOTIFID);
        
        
        NUORGMDLE    := DAGE_NOTIFICATION.FNUGETORIGIN_MODULE_ID(NUNOTIFID);

        
        NUCLASSNOTIF := DAGE_NOTIFICATION.FNUGETNOTIFICATION_CLASS_ID(NUNOTIFID);
        
        
        UT_STRING.EXTSTRING (ISBREFNOTIF, '|', TBSTRING);

        
        UT_STRING.EXTSTRING
        (
            DAGE_NOTIFICATION.FSBGETPARAMETERS(NUNOTIFID),
            '=',
            TBENTITY
        );

        
        GE_BCUTILITIES.GETTECHNAMES
        (
            TBENTITY(2),
            CUCURSOR
        );
        
        FETCH CUCURSOR BULK COLLECT INTO TBFIELDS;
        CLOSE CUCURSOR;

        
        
        IF TBFIELDS.COUNT <> TBSTRING.COUNT THEN
            UT_TRACE.TRACE('Termina Ge_BoAlertMessageParam.SendNotify, par�metros incorrectos', 2);
            RETURN;
        END IF;
        
        FOR INDX IN TBFIELDS.FIRST .. TBFIELDS.LAST LOOP
            
            
            IF TBFIELDS(INDX).ATTRIBUTE_TYPE_ID = GE_BOCONSTANTS.CNUATTRTYPEVARCHAR2 THEN

                
                GE_BOXSLTRANSFORMATION.SETATTRIBUTETEXT
                (
                    SBINPUT,
                    UPPER(TBFIELDS(INDX).TECHNICAL_NAME),
                    TBSTRING(INDX)
                );

            ELSE

                
                GE_BOXSLTRANSFORMATION.SETATTRIBUTENUMBER
                (
                    SBINPUT,
                    UPPER(TBFIELDS(INDX).TECHNICAL_NAME),
                    TBSTRING(INDX)
                );

            END IF;
            
            IF SBUSING IS NOT NULL THEN
                SBUSING      := SBUSING || ', ''' || TBSTRING(INDX) || '''';
            ELSE
                SBUSING      := '''' || TBSTRING(INDX) || '''';
            END IF;
        END LOOP;
        UT_TRACE.TRACE('Using: ' || SBUSING, 1);

        
        GE_BOXSLTRANSFORMATION.GETXSLTRANSFORMATION
        (
            NUNOTIFID,
            NUORGMDLE,
            SBINPUT,
            SBTIPOFORMATO,
            SBSALIDATEXTO,
            SBSALIDACLOB
        );


        SBOUTTEXT := SBSALIDATEXTO;
        SBINPUTDTA := SBINPUT;
        
        
        NUOBJECT := DAGE_MESG_ALERT.FNUGETOBJECT_ID
                    (
                        INUMESGALERTID
                    );
        UT_TRACE.TRACE('nuObject: ' || NUOBJECT, 1);
        
        IF ( NUOBJECT IS NOT NULL ) THEN
            SBNAME := DAGE_OBJECT.FSBGETNAME_
            (
                NUOBJECT
            );
        END IF;

        IF SBNAME IS NOT NULL THEN
            GE_BONOTIFSERVICES.GTBFIELDSNOTIF.DELETE;
            
            EXECUTE IMMEDIATE 'Begin ' || SBNAME || '(' || SBUSING || '); END;';

            TBFIELDSNOTIF := GE_BONOTIFSERVICES.GTBFIELDSNOTIF;
        END IF;
        
        
        GE_BOFWPARAMETMESGALERT.GETPERSONTONOTIF
        (
            INUMESGALERTID,
            NUNOTITYPE,
            TBPERSTONOTIFY
        );
        
        
        SBIDX := TBPERSTONOTIFY.FIRST;

        
        LOOP
            EXIT WHEN SBIDX IS NULL;

            SBINPUT := NULL;
            
            GE_BONOTIFICATION.SETATTRIBUTE(SBINPUT,CSBPERSONID,TBPERSTONOTIFY(SBIDX).PERSON_ID);
            
            GE_BONOTIFICATION.SETATTRIBUTE(SBINPUT,CSBNOTIF_TYPE,TBPERSTONOTIFY(SBIDX).NOTIFICATION_TYPE_ID);
            
            GE_BONOTIFICATION.SETATTRIBUTE(SBINPUT,CSBMESG_ALERT,INUMESGALERTID);
            
            FOR INDX IN TBFIELDS.FIRST .. TBFIELDS.LAST LOOP
            
                
                GE_BONOTIFICATION.SETATTRIBUTE
                (
                    SBINPUT,
                    UPPER(TBFIELDS(INDX).TECHNICAL_NAME),
                    TBSTRING(INDX)
                );

            END LOOP;

            
            IF NOT UT_LOB.BLLOBCLOB_ISNULL(SBSALIDACLOB) THEN
                UT_TRACE.TRACE('NOT ut_lob.blLobCLOB_IsNULL(sbSalidaClob)', 1);
                GE_BONOTIFICATION.SENDNOTIFYWITHOUTPROCESS
                (
                    NUNOTIFID,
                    TBPERSTONOTIFY(SBIDX).NOTIFICATION_TYPE_ID,
                    NUORGMDLE,
                    SBINPUT,
                    NUEXTERNAL,
                    SBSALIDACLOB,
                    NUNOTIFICATIONLOG,
                    NUERROR,
                    SBERROR,
                    IDTCHANGEDATE
                );
            ELSE
                UT_TRACE.TRACE('sbSalidaClob', 1);
                GE_BONOTIFICATION.SENDNOTIFYWITHOUTPROCESS
                (
                    NUNOTIFID,
                    TBPERSTONOTIFY(SBIDX).NOTIFICATION_TYPE_ID,
                    NUORGMDLE,
                    SBINPUT,
                    NUEXTERNAL,
                    SBSALIDATEXTO,
                    NUNOTIFICATIONLOG,
                    NUERROR,
                    SBERROR,
                    IDTCHANGEDATE
                );
            END IF;
            
            
            IF IOSBLOGNOTIF IS NULL THEN
                IOSBLOGNOTIF := NUNOTIFICATIONLOG;
            ELSE
                IOSBLOGNOTIF := IOSBLOGNOTIF || '|' || NUNOTIFICATIONLOG;
            END IF;

            SBINPUTDTA := SBINPUT;

            SBIDX := TBPERSTONOTIFY.NEXT(SBIDX);
        END LOOP;
        
        
        SBIDX := TBFIELDSNOTIF.FIRST;
        
        LOOP
            EXIT WHEN SBIDX IS NULL;
            SBINPUT := NULL;
            
            
            GE_BONOTIFICATION.SETATTRIBUTE
            (
                SBINPUT,
                'FIELD',
                TBFIELDSNOTIF(SBIDX)
            );
            
            
            GE_BONOTIFICATION.SETATTRIBUTE(SBINPUT,CSBNOTIF_TYPE,NUNOTITYPE);
            
            GE_BONOTIFICATION.SETATTRIBUTE(SBINPUT,CSBMESG_ALERT,INUMESGALERTID);

            FOR INDX IN TBFIELDS.FIRST .. TBFIELDS.LAST LOOP

                
                GE_BONOTIFICATION.SETATTRIBUTE
                (
                    SBINPUT,
                    UPPER(TBFIELDS(INDX).TECHNICAL_NAME),
                    TBSTRING(INDX)
                );

            END LOOP;

            
             IF NOT UT_LOB.BLLOBCLOB_ISNULL(SBSALIDACLOB) THEN
                GE_BONOTIFICATION.SENDNOTIFYWITHOUTPROCESS
                (
                    NUNOTIFID,
                    NUNOTITYPE,
                    NUORGMDLE,
                    SBINPUT,
                    NUEXTERNAL,
                    SBSALIDACLOB,
                    NUNOTIFICATIONLOG,
                    NUERROR,
                    SBERROR,
                    IDTCHANGEDATE
                );
            ELSE
                GE_BONOTIFICATION.SENDNOTIFYWITHOUTPROCESS
                (
                    NUNOTIFID,
                    NUNOTITYPE,
                    NUORGMDLE,
                    SBINPUT,
                    NUEXTERNAL,
                    SBSALIDATEXTO,
                    NUNOTIFICATIONLOG,
                    NUERROR,
                    SBERROR,
                    IDTCHANGEDATE
                );
            END IF;
            

            IF IOSBLOGNOTIF IS NULL THEN
                IOSBLOGNOTIF := NUNOTIFICATIONLOG;
            ELSE
                IOSBLOGNOTIF := IOSBLOGNOTIF || '|' || NUNOTIFICATIONLOG;
            END IF;

            SBINPUTDTA := SBINPUT;
            SBIDX := TBFIELDSNOTIF.NEXT(SBIDX);
        END LOOP;
        UT_TRACE.TRACE('Termina Ge_BoAlertMessageParam.SendNotify', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR: Ge_BoAlertMessageParam.SendNotify', 2);
            ERRORS.GETERROR(NUERROR, SBERROR);
            GE_BONOTIFMESGALERT.SAVELOGNOTIF(NUNOTIFID,NUERROR,SBERROR,GE_BONOTIFMESGALERT.CSBSTATUS_ES,SBOUTTEXT,SBINPUTDTA,NUEXTERNAL,NULOGNOTIF);
        WHEN OTHERS THEN
            UT_TRACE.TRACE('ERROR: Ge_BoAlertMessageParam.SendNotify', 2);
            ERRORS.SETERROR;
            ERRORS.GETERROR(NUERROR, SBERROR);
            GE_BONOTIFMESGALERT.SAVELOGNOTIF(NUNOTIFID,NUERROR, SBERROR,GE_BONOTIFMESGALERT.CSBSTATUS_ES,SBOUTTEXT,SBINPUTDTA,NUEXTERNAL,NULOGNOTIF);
    END SENDNOTIFY;
    
    






























    PROCEDURE VERANDSENDNOTIF
    (
        INUENTITYID         IN      GE_MESG_ALERT.ENTITY_ID%TYPE,
        ISBKEYID            IN      GE_MESG_ALERT.REFERENCE%TYPE,
        ISBREFNOTIF         IN      GE_MESG_ALERT.REFERENCE%TYPE,
        INUMESGALERTID      IN      GE_MESG_ALERT.MESG_ALERT_ID%TYPE,
        OSBNOTIFSENDS       OUT     VARCHAR2,
        OSBLOGNOTIF         OUT     VARCHAR2,
        IDTCHANGEDATE       IN      OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        V_COUNTER           NUMBER;
        TBPARAMSID          DAGE_MESG_ALERT.TYTBMESG_ALERT_ID;
        BLEXIST             BOOLEAN;
        SBPARAM             GE_MESG_ALERT.REFERENCE%TYPE;
        NUNOTIF             GE_NOTIFICATION.NOTIFICATION_ID%TYPE;
        
        SBCURRENTINSTANCE   GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTGROUP      GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTENTITY     GE_BOINSTANCECONTROL.STYSBNAME;
        SBCURRENTATTRIBUTE  GE_BOINSTANCECONTROL.STYSBNAME;
        BLEXISTINSTANCE     BOOLEAN;
        
    BEGIN
        UT_TRACE.TRACE('Inicia Ge_BoAlertMessageParam.VerAndSendNotif', 1);
        OSBNOTIFSENDS := '';
        OSBLOGNOTIF   := '';
        BLEXIST := FALSE;
        
        IF INUENTITYID IS NULL OR ISBKEYID IS NULL THEN
            RETURN;
        END IF;

        IF ISBREFNOTIF IS NOT NULL THEN
            SBPARAM := ISBREFNOTIF;
        ELSE
            SBPARAM := ISBKEYID;
        END IF;
        
        
        BLEXISTINSTANCE := GE_BOINSTANCECONTROL.FBLISINITINSTANCECONTROL;
        
        IF BLEXISTINSTANCE THEN
            
            GE_BOINSTANCECONTROL.GETCURRENTDATA
            (
                SBCURRENTINSTANCE,
                SBCURRENTGROUP,
                SBCURRENTENTITY,
                SBCURRENTATTRIBUTE
            );

        END IF;


        
        IF (NOT GE_BOUTILITIES.FBOSETVALUES(INUENTITYID,ISBKEYID)) THEN
            UT_TRACE.TRACE('Error al setear los par�metros: EntityId['||INUENTITYID||'] -
                           KeyId['||ISBKEYID||']',10);
            RETURN;
        END IF;

        
        GE_BCALERTMESSAGEPARAM.GETPARAMS
        (
            DAGE_ENTITY.FSBGETNAME_(INUENTITYID),
            ISBKEYID,
            TBPARAMSID
        );
        
        
        GE_BOUTILITIES.DESTROYTABLE(INUENTITYID);
        
        IF BLEXISTINSTANCE THEN
            
            GE_BOINSTANCECONTROL.SETCURRENTDATA
            (
                SBCURRENTINSTANCE,
                SBCURRENTGROUP,
                SBCURRENTENTITY,
                SBCURRENTATTRIBUTE
            );

        END IF;


        
        IF TBPARAMSID.COUNT = 0 THEN
            RETURN;
        END IF;

        IF INUMESGALERTID IS NOT NULL THEN

            V_COUNTER := 1;
            
            WHILE V_COUNTER <= TBPARAMSID.COUNT
                LOOP
                IF TBPARAMSID(V_COUNTER) = INUMESGALERTID THEN
                    BLEXIST := TRUE;
                    V_COUNTER := TBPARAMSID.COUNT + 1;
                END IF;
                V_COUNTER :=V_COUNTER + 1;
            END LOOP;

            
            IF BLEXIST THEN
                UT_TRACE.TRACE('Ge_BoAlertMessageParam.VerAndSendNotif llamando ParamId: ' || INUMESGALERTID, 1);
                GE_BOALERTMESSAGEPARAM.SENDNOTIFY
                (
                    INUMESGALERTID,
                    SBPARAM,
                    NUNOTIF,
                    OSBLOGNOTIF,
                    IDTCHANGEDATE
                );
                OSBNOTIFSENDS := NUNOTIF;
            END IF;
        ELSE
            OSBNOTIFSENDS := '';
             V_COUNTER := 1;
            UT_TRACE.TRACE('Ge_BoAlertMessageParam.VerAndSendNotif con Param Null', 1);
            
            WHILE V_COUNTER <= TBPARAMSID.COUNT LOOP
                UT_TRACE.TRACE('Ge_BoAlertMessageParam.VerAndSendNotif llamando ParamId: ' || TBPARAMSID(V_COUNTER), 1);
                GE_BOALERTMESSAGEPARAM.SENDNOTIFY
                (
                    TBPARAMSID(V_COUNTER),
                    SBPARAM,
                    NUNOTIF,
                    OSBLOGNOTIF,
                    IDTCHANGEDATE
                );
                IF V_COUNTER = 1 THEN
                    OSBNOTIFSENDS := NUNOTIF;
                ELSE
                    OSBNOTIFSENDS := OSBNOTIFSENDS || '|' || NUNOTIF;
                END IF;
                V_COUNTER :=V_COUNTER + 1;
            END LOOP;
        END IF;
        UT_TRACE.TRACE('Termina Ge_BoAlertMessageParam.VerAndSendNotif', 1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR Ge_BoAlertMessageParam.VerAndSendNotif', 1);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('ERROR Ge_BoAlertMessageParam.VerAndSendNotif', 1);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VERANDSENDNOTIF;
    
    



















    FUNCTION FSBGETNONPERSKEYATTR
    (
        INUENTITYID         IN      GE_MESG_ALERT.ENTITY_ID%TYPE
    )
    RETURN GE_ENTITY_ATTRIBUTES.DISPLAY_NAME%TYPE
    IS
        SBNAME      GE_ENTITY_ADITIONAL.PRIMARY_KEY_ATTRIBUTE%TYPE;
        SBDISPLAY   GE_ENTITY_ATTRIBUTES.DISPLAY_NAME%TYPE;
    BEGIN

        
        SBNAME := DAGE_ENTITY_ADITIONAL.FSBGETPRIMARY_KEY_ATTRIBUTE(INUENTITYID);

        
        SBDISPLAY := GE_BCALERTMESSAGEPARAM.FSBGETDISPLAYNAME(SBNAME);
        
        
        IF SBDISPLAY IS NULL THEN
            RETURN SBNAME;
        ELSE
            RETURN SBDISPLAY;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETNONPERSKEYATTR;
    
    

















    PROCEDURE GETRULES
    (
        ORFREFCURSOR        OUT     CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        
        ORFREFCURSOR := GE_BCALERTMESSAGEPARAM.FRFGETEXISTINGRULES;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETRULES;
    
    






















    PROCEDURE VERANDSENDNOTIFPI
    (
        ISBENTITYID         IN      GE_ENTITY.NAME_%TYPE,
        ISBKEYID            IN      GE_MESG_ALERT.REFERENCE%TYPE
    )
    IS
        SBNOTIFSENDS        VARCHAR2(2000);
        SBLOGNOTIF          VARCHAR2(2000);
    BEGIN
        UT_TRACE.TRACE('Inicia Ge_BoAlertMessageParam.VerAndSendNotifPI ' || CHR(10) ||
                       'isbEntityId ' || ISBENTITYID || ' isbKeyId: ' || ISBKEYID , 1);

        GE_BOALERTMESSAGEPARAM.VERANDSENDNOTIF
        (
            GE_BOENTITY.GETENTITYIDBYNAME(ISBENTITYID),
            ISBKEYID,
            NULL,
            NULL,
            SBNOTIFSENDS,
            SBLOGNOTIF
        );
        
        UT_TRACE.TRACE('Termina Ge_BoAlertMessageParam.VerAndSendNotifPI', 1);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VERANDSENDNOTIFPI;
    
    


















    PROCEDURE GETNOTIFANDENTBYALERT
    (
        INUMESGALERTID      IN      GE_MESG_ALERT.MESG_ALERT_ID%TYPE,
        ONUNOTIFID          OUT     GE_MESG_ALERT.NOTIFICATION_ID%TYPE,
        ONUENTITYID         OUT     GE_MESG_ALERT.ENTITY_ID%TYPE
    )
    IS
        SBPARAM         GE_NOTIFICATION.PARAMETERS%TYPE;
    BEGIN

        
        ONUNOTIFID := DAGE_MESG_ALERT.FNUGETNOTIFICATION_ID(INUMESGALERTID);
        
        
        ONUENTITYID := DAGE_MESG_ALERT.FNUGETENTITY_ID(INUMESGALERTID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNOTIFANDENTBYALERT;
    
END GE_BOALERTMESSAGEPARAM;