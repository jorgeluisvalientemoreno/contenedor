CREATE OR REPLACE PACKAGE BODY PKHOLIDAYMGR IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO145871';
   CNUPAIS CONSTANT GE_GEOGRA_LOCATION.GEOGRAP_LOCATION_ID%TYPE := GE_BOCALENDAR.FNUOBTPAISPORUSUARIO;
   SBERRMSG VARCHAR2( 2000 );
   CURSOR CUFECHAFEST( DTFECHINIC IN GE_CALENDAR.DATE_%TYPE, DTFECHNEXT IN GE_CALENDAR.DATE_%TYPE ) IS
SELECT  count(*)
    FROM    ge_calendar
    WHERE   ge_calendar.laboral = GE_BOParameter.fsbget( 'NO_LABORAL_DAYS' )
    AND     TRUNC( ge_calendar.date_ ) > dtFechInic
    AND     TRUNC( ge_calendar.date_ ) <= dtFechNext
    AND     ge_calendar.country_id = cnuPais;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN ( CSBVERSION );
   END FSBVERSION;
   FUNCTION FDTGETDATENONHOLIDAY( IDTFECHINIC IN GE_CALENDAR.DATE_%TYPE, INUNUMEDIAS IN NUMBER )
    RETURN GE_CALENDAR.DATE_%TYPE
    IS
      DTFECHINIC GE_CALENDAR.DATE_%TYPE;
      NUNUMEDIAS NUMBER;
    BEGIN
      DTFECHINIC := TRUNC( IDTFECHINIC );
      NUNUMEDIAS := NVL( INUNUMEDIAS, 0 );
      IF ( NUNUMEDIAS = PKBILLCONST.CERO ) THEN
         RETURN ( DTFECHINIC );
       ELSE
         IF NUNUMEDIAS > 0 THEN
            DTFECHINIC := DTFECHINIC + 1;
          ELSE
            DTFECHINIC := DTFECHINIC - 1;
         END IF;
         IF ( NOT ( DAGE_CALENDAR.FBLEXIST( TRUNC( DTFECHINIC ), CNUPAIS ) AND DAGE_CALENDAR.FSBGETLABORAL( TRUNC( DTFECHINIC ), CNUPAIS ) = GE_BOPARAMETER.FSBGET( 'NO_LABORAL_DAYS' ) ) ) THEN
            IF NUNUMEDIAS > 0 THEN
               NUNUMEDIAS := NUNUMEDIAS - 1;
             ELSE
               NUNUMEDIAS := NUNUMEDIAS + 1;
            END IF;
         END IF;
         DTFECHINIC := FDTGETDATENONHOLIDAY( DTFECHINIC, NUNUMEDIAS );
      END IF;
      RETURN ( DTFECHINIC );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FDTGETDATENONHOLIDAY;
   FUNCTION FDTGETNEXTDATENONHOLIDAY( IDTFECHA IN GE_CALENDAR.DATE_%TYPE )
    RETURN GE_CALENDAR.DATE_%TYPE
    IS
      DTFECHA GE_CALENDAR.DATE_%TYPE;
      NUACUMDIAS NUMBER := 0;
      CNUMAX_DIAS CONSTANT NUMBER := 365;
    BEGIN
      PKERRORS.PUSH( 'pkHolidayMgr.fdtGetNextDateNonHoliday' );
      DTFECHA := TRUNC( IDTFECHA );
      LOOP
         EXIT WHEN ( NUACUMDIAS = CNUMAX_DIAS );
         IF ( NOT ( DAGE_CALENDAR.FBLEXIST( DTFECHA, CNUPAIS ) AND DAGE_CALENDAR.FSBGETLABORAL( DTFECHA, CNUPAIS ) = GE_BOPARAMETER.FSBGET( 'NO_LABORAL_DAYS' ) ) ) THEN
            EXIT;
         END IF;
         DTFECHA := DTFECHA + 1;
         NUACUMDIAS := NUACUMDIAS + 1;
      END LOOP;
      PKERRORS.POP;
      RETURN ( DTFECHA );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FDTGETNEXTDATENONHOLIDAY;
   FUNCTION FNUGETNUMOFDAYNONHOLIDAY( IDTFECHAINI IN DATE, IDTFECHAFIN IN DATE )
    RETURN NUMBER
    IS
      NUHOLIDAYS NUMBER;
      NUTOTALDAYS NUMBER;
      NUDAYSNONHOLIDAY NUMBER;
    BEGIN
      PKERRORS.PUSH( 'pkHolidayMgr.fnuGetNumOfDayNonHoliday' );
      IF CUFECHAFEST%ISOPEN THEN
         CLOSE CUFECHAFEST;
      END IF;
      OPEN CUFECHAFEST( TRUNC( IDTFECHAINI ), TRUNC( IDTFECHAFIN ) );
      FETCH CUFECHAFEST
         INTO NUHOLIDAYS;
      CLOSE CUFECHAFEST;
      NUTOTALDAYS := TRUNC( IDTFECHAFIN ) - TRUNC( IDTFECHAINI );
      NUDAYSNONHOLIDAY := NUTOTALDAYS - NUHOLIDAYS;
      RETURN NUDAYSNONHOLIDAY;
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FNUGETNUMOFDAYNONHOLIDAY;
   FUNCTION FBOISNONHOLIDAY( IDTFECHA IN GE_CALENDAR.DATE_%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      PKERRORS.PUSH( 'pkHolidayMgr.fboIsNonHoliday' );
      IF ( DAGE_CALENDAR.FBLEXIST( TRUNC( IDTFECHA ), CNUPAIS ) AND DAGE_CALENDAR.FSBGETLABORAL( TRUNC( IDTFECHA ), CNUPAIS ) = GE_BOPARAMETER.FSBGET( 'NO_LABORAL_DAYS' ) ) THEN
         PKERRORS.POP;
         RETURN FALSE;
       ELSE
         PKERRORS.POP;
         RETURN TRUE;
      END IF;
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FBOISNONHOLIDAY;
END PKHOLIDAYMGR;
/


