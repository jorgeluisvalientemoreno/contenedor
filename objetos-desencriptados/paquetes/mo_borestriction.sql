
CREATE OR REPLACE PACKAGE MO_BORESTRICTION IS
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   PROCEDURE ADDRESTRICTION( INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE, INUSUBCRIBERID IN MO_PACKAGES.SUBSCRIBER_ID%TYPE );
   PROCEDURE ADDCUSTOMERRESTRICTION( INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE, INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, INUCCRESTRICTIONID IN CC_RESTRICTION.RESTRICTION_ID%TYPE := NULL );
   PROCEDURE DISABLERESTBYSOURCE( INURESTRICTIONSOURCE IN MO_RESTRICTION.RESTRICTION_SOURCE%TYPE );
   PROCEDURE DISABLERESTRICTION( IRCRESTRICTION IN DAMO_RESTRICTION.STYMO_RESTRICTION );
   PROCEDURE ADDRESTRICTIONGENERIC( INUPACKAGEID IN MO_RESTRICTION.PACKAGE_ID%TYPE, INURESTRICTIONTYPEID IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE, INURESTRICTIONSOURCE IN MO_RESTRICTION.RESTRICTION_SOURCE%TYPE := NULL );
   PROCEDURE DISABLERESTANDNOTIFY( INURESTRICTIONID IN MO_RESTRICTION.RESTRICTION_ID%TYPE, INUFINALPACKAGEID IN MO_RESTRICTION.FINAL_PACKAGE_ID%TYPE );
END MO_BORESTRICTION;
/


CREATE OR REPLACE PACKAGE BODY MO_BORESTRICTION IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO183615';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE INSRESTRICTION( INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, INURESTRICTIONTYPEID IN MO_RESTRICTION_TYPE.RESTRICTION_TYPE_ID%TYPE, INURESTRICTIONSOURCE IN CC_RESTRICTION.RESTRICTION_ID%TYPE := NULL )
    IS
      RCRESTRICTION DAMO_RESTRICTION.STYMO_RESTRICTION;
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo MO_BORestriction.InsRestriction', 11 );
      DAMO_PACKAGES.ACCKEY( INUPACKAGEID );
      DAMO_RESTRICTION_TYPE.ACCKEY( INURESTRICTIONTYPEID );
      RCRESTRICTION.PACKAGE_ID := INUPACKAGEID;
      RCRESTRICTION.RESTRICTION_TYPE_ID := INURESTRICTIONTYPEID;
      RCRESTRICTION.REGISTER_DATE := SYSDATE;
      RCRESTRICTION.ACTIVE_FLAG := MO_BOPARAMETER.FSBGETYES;
      RCRESTRICTION.RESTRICTION_ID := MO_BOSEQUENCES.FNUGETSEQRESTRICTION;
      RCRESTRICTION.RESTRICTION_SOURCE := INURESTRICTIONSOURCE;
      DAMO_RESTRICTION.INSRECORD( RCRESTRICTION );
      UT_TRACE.TRACE( 'Finaliza Metodo MO_BORestriction.InsRestriction', 11 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DISABLERESTRICTION( IRCRESTRICTION IN DAMO_RESTRICTION.STYMO_RESTRICTION )
    IS
      RCRESTRICTION DAMO_RESTRICTION.STYMO_RESTRICTION;
    BEGIN
      RCRESTRICTION := IRCRESTRICTION;
      RCRESTRICTION.ACTIVE_FLAG := MO_BOPARAMETER.FSBGETNO;
      RCRESTRICTION.ENDING_DATE := SYSDATE;
      DAMO_RESTRICTION.UPDRECORD( RCRESTRICTION );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ADDRESTRICTION( INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE, INUSUBCRIBERID IN MO_PACKAGES.SUBSCRIBER_ID%TYPE )
    IS
      CURFPACKAGESBYSUBSCRIBER CONSTANTS.TYREFCURSOR;
      RCPACKAGESBYSUBSCRIBER DAMO_PACKAGES.STYMO_PACKAGES;
      SBEXIST VARCHAR2( 3 );
    BEGIN
      CURFPACKAGESBYSUBSCRIBER := MO_BCPACKAGES.FRFPACKAGESBYSUBSCRIBER( INUSUBCRIBERID );
      FETCH CURFPACKAGESBYSUBSCRIBER
         INTO RCPACKAGESBYSUBSCRIBER;
      WHILE CURFPACKAGESBYSUBSCRIBER%FOUND
       LOOP
         SBEXIST := MO_BCRESTRICTION.FBSEXISTSANCTIONRESTRICTION( RCPACKAGESBYSUBSCRIBER.PACKAGE_ID, INURESTRICTIONTYPE );
         IF ( SBEXIST = GE_BOCONSTANTS.CSBNO ) THEN
            MO_BORESTRICTION.INSRESTRICTION( RCPACKAGESBYSUBSCRIBER.PACKAGE_ID, INURESTRICTIONTYPE );
         END IF;
         FETCH CURFPACKAGESBYSUBSCRIBER
            INTO RCPACKAGESBYSUBSCRIBER;
      END LOOP;
      CLOSE CURFPACKAGESBYSUBSCRIBER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPACKAGESBYSUBSCRIBER );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFPACKAGESBYSUBSCRIBER );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ADDCUSTOMERRESTRICTION( INURESTRICTIONTYPE IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE, INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE, INUCCRESTRICTIONID IN CC_RESTRICTION.RESTRICTION_ID%TYPE := NULL )
    IS
      CURFMOTIVEBYSUBSCRIBER CONSTANTS.TYREFCURSOR;
      RCMOTIVEBYSUBSCRIBER MO_BCMOTIVE.STYRCMOTIVEBYSUBSCRIBER;
      SBEXIST VARCHAR2( 3 );
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo MO_BORestriction.AddCustomerRestriction', 6 );
      SBEXIST := MO_BCRESTRICTION.FBSEXISTCUSTOMERRESTRICTION( INUPACKAGEID, INURESTRICTIONTYPE, INUCCRESTRICTIONID );
      UT_TRACE.TRACE( 'Ya Existe Restriccion?  :[' || SBEXIST || ']', 7 );
      IF ( SBEXIST = GE_BOCONSTANTS.CSBNO ) THEN
         MO_BORESTRICTION.INSRESTRICTION( INUPACKAGEID, INURESTRICTIONTYPE, INUCCRESTRICTIONID );
      END IF;
      UT_TRACE.TRACE( 'Finaliza Metodo MO_BORestriction.AddCustomerRestriction', 6 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DISABLERESTBYSOURCE( INURESTRICTIONSOURCE IN MO_RESTRICTION.RESTRICTION_SOURCE%TYPE )
    IS
      CURFRESTRICTION CONSTANTS.TYREFCURSOR;
      RCRESTRICTION MO_BCRESTRICTION.STYRCRESTRICTION;
    BEGIN
      CURFRESTRICTION := MO_BCRESTRICTION.FRFRESTRICTIONBYSOURCE( INURESTRICTIONSOURCE );
      LOOP
         FETCH CURFRESTRICTION
            INTO RCRESTRICTION;
         EXIT WHEN CURFRESTRICTION%NOTFOUND;
         MO_BORESTRICTION.DISABLERESTRICTION( RCRESTRICTION );
      END LOOP;
      CLOSE CURFRESTRICTION;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFRESTRICTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         GE_BOGENERALUTIL.CLOSE_REFCURSOR( CURFRESTRICTION );
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ADDRESTRICTIONGENERIC( INUPACKAGEID IN MO_RESTRICTION.PACKAGE_ID%TYPE, INURESTRICTIONTYPEID IN MO_RESTRICTION.RESTRICTION_TYPE_ID%TYPE, INURESTRICTIONSOURCE IN MO_RESTRICTION.RESTRICTION_SOURCE%TYPE := NULL )
    IS
      SBEXIST VARCHAR2( 1 );
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo MO_BORestriction.AddRestrictionGeneric', 4 );
      UT_TRACE.TRACE( 'Paquete :[' || INUPACKAGEID || ']', 5 );
      UT_TRACE.TRACE( 'Tipo de Restriccion :[' || INURESTRICTIONTYPEID || ']', 5 );
      DAMO_PACKAGES.ACCKEY( INUPACKAGEID );
      DAMO_RESTRICTION_TYPE.ACCKEY( INURESTRICTIONTYPEID );
      IF ( INURESTRICTIONTYPEID = MO_BOCONSTANTS.CNURESTTYPECUSTCARE ) THEN
         ADDCUSTOMERRESTRICTION( INURESTRICTIONTYPEID, INUPACKAGEID, INURESTRICTIONSOURCE );
         RETURN;
      END IF;
      SBEXIST := MO_BCRESTRICTION.FBSEXISTSANCTIONRESTRICTION( INUPACKAGEID, INURESTRICTIONTYPEID );
      UT_TRACE.TRACE( 'Ya Existe Restriccion?  :[' || SBEXIST || ']', 5 );
      IF ( SBEXIST = GE_BOCONSTANTS.CSBNO ) THEN
         INSRESTRICTION( INUPACKAGEID, INURESTRICTIONTYPEID );
      END IF;
      UT_TRACE.TRACE( 'Finaliza Metodo MO_BORestriction.AddRestrictionGeneric', 4 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DISABLERESTANDNOTIFY( INURESTRICTIONID IN MO_RESTRICTION.RESTRICTION_ID%TYPE, INUFINALPACKAGEID IN MO_RESTRICTION.FINAL_PACKAGE_ID%TYPE )
    IS
      RCRESTRICTION DAMO_RESTRICTION.STYMO_RESTRICTION;
    BEGIN
      UT_TRACE.TRACE( 'Inicia Metodo MO_BORestriction.DisableRestAndNotify', 4 );
      UT_TRACE.TRACE( 'Id de Restriccion :[' || INURESTRICTIONID || ']', 5 );
      DAMO_RESTRICTION.GETRECORD( INURESTRICTIONID, RCRESTRICTION );
      RCRESTRICTION.FINAL_PACKAGE_ID := INUFINALPACKAGEID;
      DISABLERESTRICTION( RCRESTRICTION );
      CC_BORESTRICTION.VALIDRESTRICTIONFORNOTIFY( RCRESTRICTION.PACKAGE_ID );
      UT_TRACE.TRACE( 'Finaliza Metodo MO_BORestriction.AddRestrictionGeneric', 4 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END MO_BORESTRICTION;
/


