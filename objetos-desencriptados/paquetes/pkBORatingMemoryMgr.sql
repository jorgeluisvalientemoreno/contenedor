PACKAGE BODY pkBORatingMemoryMgr AS























































































































































































































































































































































































































































































    
    
    

    
    CSBVERSION CONSTANT VARCHAR2(250) := 'SAO520552';

    
    CSBTOKEN_PERIODO_CURR CONSTANT VARCHAR2(3) := 'CO-' ;
    CSBTOKEN_PERIODO_RECU CONSTANT VARCHAR2(3) := 'PR-' ;
    CSBTOKEN_TIPOCONS CONSTANT VARCHAR2(3) := 'TC-' ;
    CSB_CONTRIBUCION CONSTANT VARCHAR2(1) := 'C' ;
    CSBTIPOSUBSIDIO  CONSTANT VARCHAR2(1) := 'S';
    
    CSBCLUSTERTYPE  CONSTANT    SERVSUSC.SESUCLPR%TYPE := 'G';

    
    
    
    
    
    

    
    
    

    
    SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;

    
    BLISLOADED BOOLEAN := FALSE ;

    
    GBLIMPUESTOINCLUIDO  BOOLEAN := FALSE ;

    
    GNUIDXMEM   NUMBER;

    
    
    
    
    
    
    

    TBCARGCONCCNC PKTBLCARGOS.TYCARGCONC ;
    TBCARGVALOCNC PKTBLCARGOS.TYCARGVALO ;
    TBCARGSIGNCNC PKTBLCARGOS.TYCARGSIGN ;
    TBCARGUNIDCNC PKTBLCARGOS.TYCARGUNID ;
    TBCARGDOSOCNC PKTBLCARGOS.TYCARGDOSO ;
    TBCARGCODOCNC PKTBLCARGOS.TYCARGCODO ;
    TBCARGCACACNC PKTBLCARGOS.TYCARGCACA ;
    TBCARGCOLLCNC PKTBLCARGOS.TYCARGCOLL ;
    TBCARGVABLCNC PKTBLCARGOS.TYCARGVABL ;
    TBCARGPECOCNC PKTBLCARGOS.TYCARGPECO ;
    TBCARGTICOCNC PKTBLCARGOS.TYCARGTICO ;
    TBCARGTACOCNC PKTBLCARGOS.TYCARGTACO ;
    TBCARGNUSECNC PKTBLCARGOS.TYCARGNUSE ;
    TBCARGFECRCNC PKTBLCARGOS.TYCARGFECR ;
    TBCARGPROGCNC PKTBLCARGOS.TYCARGPROG ;
    TBCARGPEFACNC PKTBLCARGOS.TYCARGPEFA ;

    
    
    

    TBCARGNUSEPRO PKTBLCARGOS.TYCARGNUSE ;
    TBCARGCONCPRO PKTBLCARGOS.TYCARGCONC ;
    TBCARGCACAPRO PKTBLCARGOS.TYCARGCACA ;
    TBCARGSIGNPRO PKTBLCARGOS.TYCARGSIGN ;
    TBCARGVALOPRO PKTBLCARGOS.TYCARGVALO ;
    TBCARGDOSOPRO PKTBLCARGOS.TYCARGDOSO ;
    TBCARGCODOPRO PKTBLCARGOS.TYCARGCODO ;
    TBCARGUNIDPRO PKTBLCARGOS.TYCARGUNID ;
    TBCARGCOLLPRO PKTBLCARGOS.TYCARGCOLL ;
    TBCARGVABLPRO PKTBLCARGOS.TYCARGVABL ;
    TBCARGPECOPRO PKTBLCARGOS.TYCARGPECO ;
    TBCARGTICOPRO PKTBLCARGOS.TYCARGTICO ;
    TBCARGTACOPRO PKTBLCARGOS.TYCARGTACO ;
    TBCARGFECRPRO PKTBLCARGOS.TYCARGFECR ;
    TBCARGPROGPRO PKTBLCARGOS.TYCARGPROG ;
    TBCARGPEFAPRO PKTBLCARGOS.TYCARGPEFA ;

    
    
    

    TBCARGCUCO PKTBLCARGOS.TYCARGCUCO ;
    TBCARGNUSE PKTBLCARGOS.TYCARGNUSE ;
    TBCARGCONC PKTBLCARGOS.TYCARGCONC ;
    TBCARGCACA PKTBLCARGOS.TYCARGCACA ;
    TBCARGSIGN PKTBLCARGOS.TYCARGSIGN ;
    TBCARGPEFA PKTBLCARGOS.TYCARGPEFA ;
    TBCARGVALO PKTBLCARGOS.TYCARGVALO ;
    TBCARGDOSO PKTBLCARGOS.TYCARGDOSO ;
    TBCARGCODO PKTBLCARGOS.TYCARGCODO ;
    TBCARGUSUA PKTBLCARGOS.TYCARGUSUA ;
    TBCARGTIPR PKTBLCARGOS.TYCARGTIPR ;
    TBCARGUNID PKTBLCARGOS.TYCARGUNID ;
    TBCARGFECR PKTBLCARGOS.TYCARGFECR ;
    TBCARGPROG PKTBLCARGOS.TYCARGPROG ;
    TBCARGCOLL PKTBLCARGOS.TYCARGCOLL ;
    TBCARGVABL PKTBLCARGOS.TYCARGVABL ;
    TBCARGPECO PKTBLCARGOS.TYCARGPECO ;
    TBCARGTICO PKTBLCARGOS.TYCARGTICO ;
    TBCARGTACO PKTBLCARGOS.TYCARGTACO ;


    
    
    
    
    
    TYPE TYTBMEMORY IS TABLE OF VARCHAR2(1) INDEX BY BINARY_INTEGER;
    
    TBMEMCARGCONC PKTBLCARGOS.TYCARGCONC ;
    TBMEMCARGNUSE PKTBLCARGOS.TYCARGNUSE ;
    TBMEMCARGSIGN PKTBLCARGOS.TYCARGSIGN ;
    TBMEMCARGDOSO PKTBLCARGOS.TYCARGDOSO ;
    TBMEMCARGVALO PKTBLCARGOS.TYCARGVALO ;
    TBMEMCARGUNID PKTBLCARGOS.TYCARGUNID ;
    TBMEMCARGTIPR PKTBLCARGOS.TYCARGTIPR ;
    TBMEMCARGPEFA PKTBLCARGOS.TYCARGPEFA ;
    TBMEMCARGCODO PKTBLCARGOS.TYCARGCODO ;
    TBMEMCARGVABL PKTBLCARGOS.TYCARGVABL ;
    TBMEMCARGTICO PKTBLTIPOCONS.TYTCONCODI;
    TBMEMCARGPECO PKTBLCARGOS.TYCARGPECO;
    TBMEMCARGMEMO TYTBMEMORY ;
    TBMEMCARGTACO PKTBLCARGOS.TYCARGTACO ;
    TBMEMCARGCACA   PKTBLCARGOS.TYCARGCACA;
    TBMEMCARGFECR PKTBLCARGOS.TYCARGFECR ;
    TBMEMCARGPROG PKTBLCARGOS.TYCARGPROG ;

    
    
    
    TBDEPPSESUCNC    PKTBLFA_DETAPUPR.TYDEPPSESU;
    TBDEPPPEFACNC    PKTBLFA_DETAPUPR.TYDEPPPEFA;
    TBDEPPCONCCNC    PKTBLFA_DETAPUPR.TYDEPPCONC;
    TBDEPPPUNTCNC    PKTBLFA_DETAPUPR.TYDEPPPUNT;
    
    
    
    
    TBDEPPSESUPRO    PKTBLFA_DETAPUPR.TYDEPPSESU;
    TBDEPPPEFAPRO    PKTBLFA_DETAPUPR.TYDEPPPEFA;
    TBDEPPCONCPRO    PKTBLFA_DETAPUPR.TYDEPPCONC;
    TBDEPPPUNTPRO    PKTBLFA_DETAPUPR.TYDEPPPUNT;

    
    
    
    TBDEPPACPC       PKTBLFA_DETAPUPR.TYDEPPACPC;
    TBDEPPSESU       PKTBLFA_DETAPUPR.TYDEPPSESU;
    TBDEPPPEFA       PKTBLFA_DETAPUPR.TYDEPPPEFA;
    TBDEPPCONC       PKTBLFA_DETAPUPR.TYDEPPCONC;
    TBDEPPPUNT       PKTBLFA_DETAPUPR.TYDEPPPUNT;
    TBDEPPTIMO       PKTBLFA_DETAPUPR.TYDEPPTIMO;
    TBDEPPFEMO       PKTBLFA_DETAPUPR.TYDEPPFEMO;
    TBDEPPPROG       PKTBLFA_DETAPUPR.TYDEPPPROG;
    TBDEPPUSUA       PKTBLFA_DETAPUPR.TYDEPPUSUA;
    TBDEPPTERM       PKTBLFA_DETAPUPR.TYDEPPTERM;

    
    
    

    TBBIINCOIN PKTBLBITAINCO.TYBIINCOIN ;
    TBBIINIDPR PKTBLBITAINCO.TYBIINIDPR ;
    TBBIINSUSC PKTBLBITAINCO.TYBIINSUSC ;
    TBBIINSESU PKTBLBITAINCO.TYBIINSESU ;
    TBBIINCOMP PKTBLBITAINCO.TYBIINCOMP ;
    TBBIINCONC PKTBLBITAINCO.TYBIINCONC ;
    TBBIINCAUS PKTBLBITAINCO.TYBIINCAUS ;
    TBBIINPEFA PKTBLBITAINCO.TYBIINPEFA ;
    TBBIINCICL PKTBLBITAINCO.TYBIINCICL ;
    TBBIINSERV PKTBLBITAINCO.TYBIINSERV ;
    TBBIINFECH PKTBLBITAINCO.TYBIINFECH ;
    TBBIINUSUA PKTBLBITAINCO.TYBIINUSUA ;
    TBBIINTERM PKTBLBITAINCO.TYBIINTERM ;
    TBBIINPROG PKTBLBITAINCO.TYBIINPROG ;

    
    
    

    TBREINCOIN PKTBLREGIINCO.TYREINCOIN ;
    TBREINIDPR PKTBLREGIINCO.TYREINIDPR ;
    TBREINSUSC PKTBLREGIINCO.TYREINSUSC ;
    TBREINSESU PKTBLREGIINCO.TYREINSESU ;
    TBREINPEFA PKTBLREGIINCO.TYREINPEFA ;
    TBREINSERV PKTBLREGIINCO.TYREINSERV ;
    TBREINTIIN PKTBLREGIINCO.TYREINTIIN ;

    
    
    
    
    TBRANGLIQUCNC   PKBCRANGLIQU.TTYRANGLIQU;

    
    TBRANGLIQUPRO   PKBCRANGLIQU.TTYRANGLIQU;

    
    TBRANGLIQU      PKBCRANGLIQU.TTYRANGLIQU;

    
    
    

    
    GTBVIGELIQUCNC   TA_BCVIGELIQU.TYTBTA_VIGELIQU;

    
    GTBVIGELIQUPRO   TA_BCVIGELIQU.TYTBTA_VIGELIQU;

    
    GTBVIGELIQU      TA_BCVIGELIQU.TYTBTA_VIGELIQU;

    
    
    

    
    TBCOSSROWID PKTBLCONSSESU.TYTBROWID ;
    TBCOSSTCON PKTBLCONSSESU.TYCOSSTCON ;
    TBCOSSPEFA PKTBLCONSSESU.TYCOSSPEFA ;
    TBCOSSPECS PKTBLCONSSESU.TYCOSSPECS ;
    TBCOSSCOCA PKTBLCONSSESU.TYCOSSCOCA ;
    TBCOSSCMSS PKTBLCONSSESU.TYCOSSCMSS ;
    TBCOSSELME PKTBLCONSSESU.TYCOSSELME ;
    TBCOSSFERE PKTBLCONSSESU.TYCOSSFERE ;
    TBCOSSSESU PKTBLCONSSESU.TYCOSSSESU ;
    TBCOSSCOFA PKTBLCONSSESU.TYCOSSFLLI ;
    TBCOSSCONS PKTBLCONSSESU.TYCOSSCONS ;
    
    
    

    
    TBCSMPCONSECNC PKTBLCONSSESU.TYCOSSCONS ;
    TBCSMPROWIDCNC PKTBLCONSSESU.TYTBROWID ;

    
    TBCSMPCONSEPRO PKTBLCONSSESU.TYCOSSCONS ;
    TBCSMPROWIDPRO PKTBLCONSSESU.TYTBROWID ;

    
    TBCSMPCONSE PKTBLCONSSESU.TYCOSSCONS ;
    TBCSMPROWID PKTBLCONSSESU.TYTBROWID ;

    
    
    
    
    TBACUMFACTCNC   LE_BCACUMFACT.TYTBACUMFACT;

    
    TBACUMFACTPRO   LE_BCACUMFACT.TYTBACUMFACT;

    
    TBACUMFACT      LE_BCACUMFACT.TYTBACUMFACT;

    
    
    
    
    
    TBBILLEDPACKCNC   LE_BOLIQCARGOBASICOUI.TYTBBILLEDPACKAGES;

    
    TBBILLEDPACKPRO   LE_BOLIQCARGOBASICOUI.TYTBBILLEDPACKAGES;

    
    TBBILLEDPACK      LE_BOLIQCARGOBASICOUI.TYTBBILLEDPACKAGES;


    
    
    

    TBDELREINSESU PKTBLREGIINCO.TYREINSESU ;
    TBDELREINSERV PKTBLREGIINCO.TYREINSERV ;
    TBDELREINPEFA PKTBLREGIINCO.TYREINPEFA ;

    
    
    
    
    TBDERMCONS         PKTBLDETAREMO.TYDERMCONS;
    TBDERMCODO         PKTBLDETAREMO.TYDERMCODO;
    TBDERMTIDO         PKTBLDETAREMO.TYDERMTIDO;
    TBDERMNUFI         PKTBLDETAREMO.TYDERMNUFI;
    TBDERMVABA         PKTBLDETAREMO.TYDERMVABA;
    TBDERMPOIA         PKTBLDETAREMO.TYDERMPOIA;
    TBDERMFILR         PKTBLDETAREMO.TYDERMFILR;
    TBDERMFFLR         PKTBLDETAREMO.TYDERMFFLR;
    TBDERMFLDE         PKTBLDETAREMO.TYDERMFLDE;

    
    TBDERMCONSPRO      PKTBLDETAREMO.TYDERMCONS;
    TBDERMCODOPRO      PKTBLDETAREMO.TYDERMCODO;
    TBDERMTIDOPRO      PKTBLDETAREMO.TYDERMTIDO;
    TBDERMNUFIPRO      PKTBLDETAREMO.TYDERMNUFI;
    TBDERMVABAPRO      PKTBLDETAREMO.TYDERMVABA;
    TBDERMPOIAPRO      PKTBLDETAREMO.TYDERMPOIA;
    TBDERMFILRPRO      PKTBLDETAREMO.TYDERMFILR;
    TBDERMFFLRPRO      PKTBLDETAREMO.TYDERMFFLR;
    TBDERMFLDEPRO      PKTBLDETAREMO.TYDERMFLDE;

    
    TBDERMCONSCNC      PKTBLDETAREMO.TYDERMCONS;
    TBDERMCODOCNC      PKTBLDETAREMO.TYDERMCODO;
    TBDERMTIDOCNC      PKTBLDETAREMO.TYDERMTIDO;
    TBDERMNUFICNC      PKTBLDETAREMO.TYDERMNUFI;
    TBDERMVABACNC      PKTBLDETAREMO.TYDERMVABA;
    TBDERMPOIACNC      PKTBLDETAREMO.TYDERMPOIA;
    TBDERMFILRCNC      PKTBLDETAREMO.TYDERMFILR;
    TBDERMFFLRCNC      PKTBLDETAREMO.TYDERMFFLR;
    TBDERMFLDECNC      PKTBLDETAREMO.TYDERMFLDE;

    
    
    

    TYPE TYTBPERIODOCURR IS TABLE OF PERICOSE.PECSCONS%TYPE
    INDEX BY BINARY_INTEGER;
    
    
    TYPE TYTBPERICOSE  IS TABLE OF PERICOSE.PECSCONS%TYPE INDEX BY VARCHAR2(20);
    

    
    TBPERICONSCURR TYTBPERIODOCURR ;
    
    
    
    
    
    TYPE TYRCCONSDOCU IS RECORD
    (
        TBCARGCONC  PKBCCARGOS.TYTBCARGCONC,
        TBCARGCODO  PKTBLCARGOS.TYCARGCODO
    );
    
    
    
    TYPE TYTBCONSDOCU IS TABLE OF TYRCCONSDOCU INDEX BY VARCHAR2(20);
    GTBCONSDOCU     TYTBCONSDOCU;


    TYPE TYTBPECSCONS  IS TABLE OF PERICOSE.PECSCONS%TYPE INDEX BY VARCHAR2(20);

    
    
    
    
    
    
    
    PROCEDURE CLEARPRODCONSUM;
    
    PROCEDURE COMMITLIQRANKCONC;
    
    PROCEDURE COMMITCONSUMCNC;
    
    PROCEDURE GETCHRGINFOFROMCACHE
    (
        INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
        ISBTIPOPROC IN CARGOS.CARGTIPR%TYPE,
        OSBSIGNO    OUT CARGOS.CARGSIGN%TYPE,
        ONUVALOR    OUT CARGOS.CARGVALO%TYPE,
        ONUUNIDADES OUT CARGOS.CARGUNID%TYPE
    );

    FUNCTION FBLCONSUMPTIONINCACHE RETURN BOOLEAN ;

    PROCEDURE LOADPRODUCTCONSUMPTION
    (
    	INUBASECONCEPT	IN	NUMBER DEFAULT NULL
    ) ;

    PROCEDURE ADDGENCHRGRECORD
    (
        INUIDX IN NUMBER
    ) ;

    PROCEDURE DELGENCHRGSRECORDS
    (
        INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
        ISBDOCUMENTO IN CARGOS.CARGDOSO%TYPE
    ) ;

    PROCEDURE CLEARGENERATEDCHRGSARR ;

    FUNCTION FBLVALIDATEPERIOD
    (
        IRCPERIFACTLIQ  IN PERIFACT%ROWTYPE,
        INUPERIFACTCONS IN PERIFACT.PEFACODI%TYPE
    )RETURN BOOLEAN;
    
    PROCEDURE LOADPRODCONSUMLIQ;

    PROCEDURE LOADPRODCONSUMNOTLIQ;
    
    PROCEDURE LOADPRODCONSUMBILL
    (
        INUPRODUCT      IN  SERVSUSC.SESUNUSE%TYPE,
        ITBCNCCONSU     IN  PKTBLCONCEPTO.TYCONCCODI
    );

    PROCEDURE GETCONSUMSPERIODS
    (
        OTBCONSPERI OUT TYTBPECSCONS
    );

    PROCEDURE GETCONSUMSCONCEPTS
    (
        OTBCONSCONC     OUT PKTBLCARGOS.TYCARGCONC
    );

    
    
    
    PROCEDURE CLEARACUMFACTCNCMEM;

    PROCEDURE CLEARACUMFACTPROMEM;

    PROCEDURE CLEARACUMFACTMEM;

    PROCEDURE COMMITACUMFACTPRO;

    PROCEDURE COMMITACUMFACTCNC;
    
    PROCEDURE SYNCHACUMFACT;
    

    
    
    
    
    PROCEDURE CLEARBILLEDPACKCNCMEM;

    PROCEDURE CLEARBILLEDPACKPROMEM;

    PROCEDURE CLEARBILLEDPACKMEM;

    PROCEDURE COMMITBILLEDPACKPRO;

    PROCEDURE COMMITBILLEDPACKCNC;

    PROCEDURE SYNCHBILLEDPACK;
    














































PROCEDURE ADDGENCHRGRECORD
(
    INUIDX IN NUMBER
)
IS
    NUIDXMEM NUMBER ;

    
    RCPRODUCTO SERVSUSC%ROWTYPE ;

    
    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddGenChrgRecord.GIData');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCPRODUCTO) ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.AddGenChrgRecord');

    
    GETINSTANCEDATA ;

    
    NUIDXMEM := NVL (TBMEMCARGCONC.LAST,0) + 1 ;

    
    
    TBMEMCARGCONC (NUIDXMEM) := TBCARGCONCCNC (INUIDX) ;
    TBMEMCARGNUSE (NUIDXMEM) := NVL(TBCARGNUSECNC(INUIDX), RCPRODUCTO.SESUNUSE);
    TBMEMCARGSIGN (NUIDXMEM) := TBCARGSIGNCNC (INUIDX) ;
    TBMEMCARGDOSO (NUIDXMEM) := TBCARGDOSOCNC (INUIDX) ;
    TBMEMCARGUNID (NUIDXMEM) := TBCARGUNIDCNC (INUIDX) ;
    TBMEMCARGVALO (NUIDXMEM) := TBCARGVALOCNC (INUIDX) ;
    TBMEMCARGTIPR (NUIDXMEM) := PKBILLCONST.AUTOMATICO ;
    TBMEMCARGPEFA (NUIDXMEM) := RCPERIODO.PEFACODI ;
    TBMEMCARGPEFA (NUIDXMEM) := TBCARGPEFACNC (INUIDX) ;
    TBMEMCARGCODO (NUIDXMEM) := TBCARGCODOCNC (INUIDX) ;
    TBMEMCARGTICO (NUIDXMEM) := TBCARGTICOCNC (INUIDX) ;
    TBMEMCARGPECO (NUIDXMEM) := TBCARGPECOCNC (INUIDX) ;
    TBMEMCARGMEMO (NUIDXMEM) := 'S' ;
    TBMEMCARGVABL (NUIDXMEM) := TBCARGVABLCNC (INUIDX) ;
    TBMEMCARGTACO (NUIDXMEM) := TBCARGTACOCNC (INUIDX) ;
    TBMEMCARGCACA (NUIDXMEM) := TBCARGCACACNC (INUIDX) ;
    TBMEMCARGFECR (NUIDXMEM) := TBCARGFECRCNC (INUIDX) ;
    TBMEMCARGPROG (NUIDXMEM) := TBCARGPROGCNC (INUIDX) ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ADDGENCHRGRECORD;

































PROCEDURE CLEARGENERATEDCHRGSARR
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearGeneratedChrgsArr');

    TBMEMCARGCONC.DELETE ;
    TBMEMCARGNUSE.DELETE ;
    TBMEMCARGSIGN.DELETE ;
    TBMEMCARGDOSO.DELETE ;
    TBMEMCARGUNID.DELETE ;
    TBMEMCARGVALO.DELETE ;
    TBMEMCARGTIPR.DELETE ;
    TBMEMCARGPEFA.DELETE ;
    TBMEMCARGCODO.DELETE ;
    TBMEMCARGTICO.DELETE ;
    TBMEMCARGPECO.DELETE ;
    TBMEMCARGVABL.DELETE ;
    TBMEMCARGMEMO.DELETE ;
    TBMEMCARGTACO.DELETE ;
    TBMEMCARGCACA.DELETE ;
    TBMEMCARGFECR.DELETE ;
    TBMEMCARGPROG.DELETE ;

    PKERRORS.POP ;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARGENERATEDCHRGSARR ;





































PROCEDURE DELGENCHRGSRECORDS
(
    INUCONCEPTO  IN CARGOS.CARGCONC%TYPE,
    ISBDOCUMENTO IN CARGOS.CARGDOSO%TYPE
)
IS
    
    NUIDX NUMBER ;
    NUIDXTMP NUMBER ;
    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.DelGenChrgsRecords.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
    
    PROCEDURE DELRECORD IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.DelGenChrgsRecs.DelRecord');

        TBMEMCARGCONC.DELETE (NUIDXTMP);
        TBMEMCARGNUSE.DELETE (NUIDXTMP);
        TBMEMCARGSIGN.DELETE (NUIDXTMP);
        TBMEMCARGDOSO.DELETE (NUIDXTMP);
        TBMEMCARGUNID.DELETE (NUIDXTMP);
        TBMEMCARGVALO.DELETE (NUIDXTMP);
        TBMEMCARGTIPR.DELETE (NUIDXTMP);
        TBMEMCARGPEFA.DELETE (NUIDXTMP);
        TBMEMCARGCODO.DELETE (NUIDXTMP);
        TBMEMCARGTICO.DELETE (NUIDXTMP);
        TBMEMCARGPECO.DELETE (NUIDXTMP);
        TBMEMCARGVABL.DELETE (NUIDXTMP);
        TBMEMCARGMEMO.DELETE (NUIDXTMP);
        TBMEMCARGTACO.DELETE (NUIDXTMP);
        TBMEMCARGCACA.DELETE (NUIDXTMP);
        TBMEMCARGFECR.DELETE (NUIDXTMP);
        TBMEMCARGPROG.DELETE (NUIDXTMP);

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END DELRECORD ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.DelGenChrgsRecords');

    
    GETINSTANCEDATA;

    
    NUIDX := TBMEMCARGCONC.FIRST ;

    
    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        IF (TBMEMCARGTIPR (NUIDX) = PKBILLCONST.AUTOMATICO AND
            TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
            TBMEMCARGDOSO (NUIDX) = ISBDOCUMENTO AND
            TBMEMCARGPEFA (NUIDX) = RCPERIODO.PEFACODI AND
            TBMEMCARGMEMO (NUIDX) = 'S')
        THEN
            NUIDXTMP := NUIDX ;

            
            NUIDX := TBMEMCARGCONC.NEXT (NUIDX) ;

            
            DELRECORD ;
        ELSE
            
            NUIDX := TBMEMCARGCONC.NEXT (NUIDX) ;
        END IF;
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END DELGENCHRGSRECORDS;

































PROCEDURE LOADPRODUCTCONSUMPTION
(
	INUBASECONCEPT	IN	NUMBER DEFAULT NULL
)
IS
    NUPRODUCTO SERVSUSC.SESUNUSE%TYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProductConsumption.gid');

        
        PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUPRODUCTO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProductConsumption');

    
    GETINSTANCEDATA ;

    
    CLEARPRODCONSUM ;

    IF (INUBASECONCEPT IS NULL) THEN
    	
    	PKBCCONSSESU.GETNOTRATEDRECSBYPRODBM
    	(
    		NUPRODUCTO,
    		TBCOSSROWID,
    		TBCOSSTCON,
    		TBCOSSPEFA,
    		TBCOSSPECS,
    		TBCOSSCOCA,
    		TBCOSSCMSS,
    		TBCOSSELME,
    		TBCOSSFERE
    	) ;
    ELSE
    	
    	
        GETCONSUMPBYLIQCONCEPT
	    ( 
    		INUBASECONCEPT,
    		TBCOSSROWID,
    		TBCOSSTCON,
    		TBCOSSPEFA,
    		TBCOSSPECS,
    		TBCOSSCOCA,
    		TBCOSSCMSS,
    		TBCOSSELME,
    		TBCOSSFERE,
    		TBCOSSCONS
	    );
    END IF ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END LOADPRODUCTCONSUMPTION;





























PROCEDURE LOADPRODUCTCONSUMPTIONNI
(
    INUPRODUCTO IN SERVSUSC.SESUNUSE%TYPE
)
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProductConsumptionNI');

    
    CLEARPRODCONSUM ;

    
    PKBCCONSSESU.GETNOTRATEDRECSBYPRODCLUS
    (
        INUPRODUCTO,
        TBCOSSROWID,
        TBCOSSTCON,
        TBCOSSPEFA,
        TBCOSSPECS,
        TBCOSSCOCA,
        TBCOSSCMSS,
        TBCOSSELME,
        TBCOSSFERE
    ) ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END LOADPRODUCTCONSUMPTIONNI;























FUNCTION FBLCONSUMPTIONINCACHE
RETURN BOOLEAN
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.fblConsumptionInCache');

    
    
    IF (TBCOSSTCON.FIRST IS NULL) THEN
        PKERRORS.POP;
        RETURN (FALSE) ;
    END IF;

    PKERRORS.POP;
    RETURN (TRUE) ;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FBLCONSUMPTIONINCACHE;



















































































































































PROCEDURE ADDCHARGE
(
    IONUVALOR     IN OUT CARGOS.CARGVALO%TYPE,
    INUUNIDADES   IN CARGOS.CARGUNID%TYPE,
    ISBDOCUMENTO  IN CARGOS.CARGDOSO%TYPE,
    INUMODOCONSE  IN NUMBER                 DEFAULT CNUCONSEC_ON_NEW,
    INUPERIODOC   IN PERICOSE.PECSCONS%TYPE DEFAULT NULL,
    INUTIPOCONS   IN TIPOCONS.TCONCODI%TYPE DEFAULT NULL,
    INUPRODUCTO   IN SERVSUSC.SESUNUSE%TYPE DEFAULT NULL,
    INUPERIODOF   IN CARGOS.CARGPEFA%TYPE   DEFAULT NULL
)
IS
    
    NUCONSECUTIVO       NUMBER ;

    NUIDX               NUMBER ;
    
    
    NUPOINTSCNCIDX      NUMBER;
    
    
    NUCONCEPTO          CARGOS.CARGCONC%TYPE ;
    
    
    RCCONCEPT           CONCEPTO%ROWTYPE;

    
    NUVALOR             CARGOS.CARGVALO%TYPE ;

    
    NUCONSCDR           CARGOS.CARGCOLL%TYPE ;

    
    NUVLRBASELIQ        CARGOS.CARGVABL%TYPE ;

    
    RCPRODUCTO          SERVSUSC%ROWTYPE ;
    
    
    NUIDTARIFA          CARGOS.CARGTACO%TYPE;
    
    
    NUPERICOSE          PERICOSE.PECSCONS%TYPE;
    
    
    RCPERIODOFACT       PERIFACT%ROWTYPE;
    
    
    NUCOMMERCIALPLAN    CC_COMMERCIAL_PLAN.COMMERCIAL_PLAN_ID%TYPE;
    
    
    SBACCUMULATEPOINTS  VARCHAR2(1);
    
    
    NUCONSUMTYPE        CARGOS.CARGTICO%TYPE;

    
    NUPROGRAMA          CARGOS.CARGPROG%TYPE;

    PROCEDURE GETINSTANCEDATA IS
       NUBILLINGPERIODTOGEN    PERIFACT.PEFACODI%TYPE;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddCharge.GetInstanceData');

        
        PKINSTANCEDATAMGR.GETCG_CONCEPT (NUCONCEPTO) ;

        
        PKINSTANCEDATAMGR.GETCG_CDRCONS (NUCONSCDR) ;

        
        PKINSTANCEDATAMGR.GETCG_BASEVALUE (NUVLRBASELIQ) ;

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCPRODUCTO) ;

        
        TA_BOTARIFASLIQUIDADAS.OBTCONSECUTIVOTARIFA(NUIDTARIFA);
        
        
        PKINSTANCEDATAMGR.GETCG_CONSUMPERIOD(NUPERICOSE);
        
        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODOFACT) ;
        
        
        IF( INUPERIODOF IS NOT NULL ) THEN
            NUBILLINGPERIODTOGEN := INUPERIODOF;
        ELSE
            PKINSTANCEDATAMGR.GETCG_BILLPERIODTOGEN(NUBILLINGPERIODTOGEN);
        END IF;

        
        IF( NUBILLINGPERIODTOGEN IS NOT NULL
            AND NUBILLINGPERIODTOGEN <> RCPERIODOFACT.PEFACODI) THEN
            PKBILLINGPERIODMGR.GETRECORD(NUBILLINGPERIODTOGEN, RCPERIODOFACT);
        END IF;

        
        PKINSTANCEDATAMGR.GETCG_PROGRAM (NUPROGRAMA) ;

        
        PKINSTANCEDATAMGR.GETCG_CONSUMPTIONTYPE (NUCONSUMTYPE) ;
        NUCONSUMTYPE := NVL(INUTIPOCONS, NUCONSUMTYPE);

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;

    PROCEDURE FILLRECORD IS
        NUIMPUESTO      CARGOS.CARGVALO%TYPE;
        NUBASEIMP       CARGOS.CARGVALO%TYPE;
        NUVALORBASE     NUMBER;
        
        
        NUPRODTYPE      SERVICIO.SERVCODI%TYPE;
        
        
        NUCHARGECAUSE   CAUSCARG.CACACODI%TYPE;
        
        
        SBPROGRAM       VARCHAR2(10);
        
        
        CSBPROGFGCT    	    CONSTANT VARCHAR2(4) := 'FGCT';
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddCharge.FillRecord');

        
        RCPRODUCTO.SESUNUSE := NVL (INUPRODUCTO, RCPRODUCTO.SESUNUSE);
        
        
        NUPRODTYPE := PKTBLSERVSUSC.FNUGETSERVICE(RCPRODUCTO.SESUNUSE);
        
        
        SBPROGRAM := PKERRORS.FSBGETAPPLICATION;

        
        IF (SBPROGRAM = PKFGCA.CSBPROGFGCA OR SBPROGRAM = CSBPROGFGCT) THEN
            NUCHARGECAUSE := FA_BOCHARGECAUSES.FNUFGCACHCAUSE(NUPRODTYPE);
        ELSIF (SBPROGRAM = PKFGFC.CSBPROGFGFC) THEN
            NUCHARGECAUSE := FA_BOCHARGECAUSES.FNUFGFCCHCAUSE(NUPRODTYPE);
        ELSIF (SBPROGRAM = PKFGCA.CSBPROGDEFE) THEN
            NUCHARGECAUSE := FA_BOCHARGECAUSES.FNUDEFQUOTACHCAUSE(NUPRODTYPE);
        ELSE
            
            NUCHARGECAUSE := FA_BOCHARGECAUSES.FNUGENERICCHCAUSE(NUPRODTYPE);
        END IF;

        IF (NUVLRBASELIQ IS NOT NULL) THEN
            
            FA_BOPOLITICAREDONDEO.APLICAPOLITICA (RCPRODUCTO.SESUNUSE, NUVLRBASELIQ);

            
            NUBASEIMP := NUVLRBASELIQ;
        ELSE
            
            FA_BOIVAMODEMGR.GETVALUESCHARGE(
                RCPRODUCTO.SESUNUSE,
                NUCONCEPTO,
                IONUVALOR,
                NULL,
                NUIMPUESTO,
                NUBASEIMP
            );
        END IF;

        NUVALOR := IONUVALOR ;

        TBCARGCONCCNC (NUIDX) := NUCONCEPTO ;
        TBCARGNUSECNC (NUIDX) := INUPRODUCTO ;
        TBCARGUNIDCNC (NUIDX) := INUUNIDADES ;
        TBCARGDOSOCNC (NUIDX) := NVL(ISBDOCUMENTO,PKCONSTANTE.NULLSB) ;
        TBCARGCODOCNC (NUIDX) := NVL(NUCONSECUTIVO,0) ;

        TBCARGCACACNC (NUIDX) := NUCHARGECAUSE;
        TBCARGCOLLCNC (NUIDX) := NUCONSCDR ;
        TBCARGVABLCNC (NUIDX) := ABS(NUBASEIMP) ;

        
        
        TBCARGFECRCNC (NUIDX) := NULL;
        TBCARGPROGCNC (NUIDX) := NUPROGRAMA;

    	
        NUPERICOSE:= NVL(INUPERIODOC, NUPERICOSE) ;
        TBCARGPECOCNC (NUIDX) := NUPERICOSE;
    	TBCARGTICOCNC (NUIDX) := NUCONSUMTYPE ;
    	
    	
    	TBCARGPEFACNC (NUIDX) := RCPERIODOFACT.PEFACODI ;

        
        IF (NUVALOR >= 0) THEN
            TBCARGSIGNCNC (NUIDX) := 'DB' ;
        ELSE
            TBCARGSIGNCNC (NUIDX) := 'CR' ;
            NUVALOR := ABS (NUVALOR) ;
        END IF;

        TBCARGVALOCNC (NUIDX) := NUVALOR ;
        TBCARGTACOCNC (NUIDX) := NUIDTARIFA;

        
        PKINSTANCEDATAMGR.SETCG_BASEVALUE (NULL) ;

        GBLIMPUESTOINCLUIDO := FALSE;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END FILLRECORD ;
    

    PROCEDURE ADDTARIFFRANGES
    IS
        TBRANGLIQUTMP  PKBCRANGLIQU.TTYRANGLIQU;
        NUINDICE    NUMBER;
        NUINDCNC    NUMBER;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddCharge.AddTariffRanges');

        
        
        IF ( NUIDTARIFA IS NULL ) THEN
            
            TA_BOTARIFASLIQUIDADAS.LIMPIARMEMORIA();
            PKERRORS.POP;
            RETURN;
        END IF;
        
        TA_BOTARIFASLIQUIDADAS.SINCRONIZARRANGOS(
                                            NVL(NUCONSECUTIVO,0),
                                            RCPRODUCTO.SESUNUSE,
                                            RCPERIODOFACT.PEFACODI ,
                                            NUPERICOSE,
                                            NVL(NUCONSUMTYPE, PKCONSTANTE.NULLNUM),
                                            NUCONCEPTO
                                                 );

        
        TA_BOTARIFASLIQUIDADAS.OBTRANGOSLIQUIDADOS( TBRANGLIQUTMP );

        
        TA_BOTARIFASLIQUIDADAS.LIMPIARMEMORIA();

        
        NUINDICE := TBRANGLIQUTMP.FIRST;
        WHILE (NUINDICE IS NOT NULL) LOOP
            NUINDCNC :=NVL(TBRANGLIQUCNC.LAST,0) + 1;
            TBRANGLIQUCNC(NUINDCNC) := TBRANGLIQUTMP(NUINDICE);
            NUINDICE := TBRANGLIQUTMP.NEXT(NUINDICE);
        END LOOP;

        TBRANGLIQUTMP.DELETE;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END ADDTARIFFRANGES;
    
    PROCEDURE ADDTARIFFDATES
    IS
        TBVIGENCIAS TA_BCVIGELIQU.TYTBTA_VIGELIQU;
        NUINDEX     NUMBER;
        NUINDCNC    NUMBER;
        NUPROGRAMA  PROCESOS.PROCCODI%TYPE;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddCharge.AddTariffDates');

        
        
        IF ( NUIDTARIFA IS NULL ) THEN
            
            TA_BOTARIFASLIQUIDADAS.LIMPIARMEMORIA();
            PKERRORS.POP;
            RETURN;
        END IF;

        PKINSTANCEDATAMGR.GETCG_PROGRAM (NUPROGRAMA) ;
        TA_BOTARIFASLIQUIDADAS.SINCRONIZARVIGENCIAS(    RCPERIODOFACT.PEFACODI,
                                                        RCPRODUCTO.SESUSERV,
                                                        NVL(NUCONSECUTIVO,0),
                                                        NUPROGRAMA
                                                    );

        
        TA_BOTARIFASLIQUIDADAS.OBTVIGENCIAPORTARIFAS ( TBVIGENCIAS );

        
        NUINDEX := TBVIGENCIAS.FIRST;
        WHILE (NUINDEX IS NOT NULL) LOOP
            NUINDCNC :=NVL(GTBVIGELIQUCNC.LAST,0) + 1;
            GTBVIGELIQUCNC(NUINDCNC) := TBVIGENCIAS(NUINDEX);
            NUINDEX := TBVIGENCIAS.NEXT(NUINDEX);
        END LOOP;

        TBVIGENCIAS.DELETE;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END ADDTARIFFDATES;

    
    PROCEDURE ADDPOINTSRECORD
    IS
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddCharge.AddPointsRecord');
        
        
        NUPOINTSCNCIDX := NVL (TBDEPPCONCCNC.LAST,0) + 1 ;

        TBDEPPSESUCNC(NUPOINTSCNCIDX) := RCPRODUCTO.SESUNUSE;
        TBDEPPPEFACNC(NUPOINTSCNCIDX) := RCPERIODOFACT.PEFACODI;
        TBDEPPCONCCNC(NUPOINTSCNCIDX) := NUCONCEPTO;
        TBDEPPPUNTCNC(NUPOINTSCNCIDX) := IONUVALOR;
        
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END ADDPOINTSRECORD;

BEGIN


    PKERRORS.PUSH ('pkBORatingMemoryMgr.AddCharge');

    
    GETINSTANCEDATA ;

    
    IF (IONUVALOR != 0) THEN
        
        FA_BOPOLITICAREDONDEO.APLICAPOLITICA (RCPRODUCTO.SESUNUSE, IONUVALOR);
    END IF;

    
    IF (IONUVALOR = 0) THEN
        
        TA_BOTARIFASLIQUIDADAS.LIMPIARMEMORIA();

        PKERRORS.POP;
        RETURN;
    END IF;

    
    PKCONCEPTMGR.GETRECORD(NUCONCEPTO, RCCONCEPT);

    
    IF (RCCONCEPT.CONCTICL = PKBILLCONST.FNUOBTTIPOASIGPUNTOS) THEN
    
        
        NUCOMMERCIALPLAN := DAPR_PRODUCT.FNUGETCOMMERCIAL_PLAN_ID(RCPRODUCTO.SESUNUSE);
        
        
        SBACCUMULATEPOINTS := DACC_COMMERCIAL_PLAN.FSBGETACCUMULATE_POINTS(NUCOMMERCIALPLAN);

        
        IF (SBACCUMULATEPOINTS = CC_BOCONSTANTS.CSBSI) THEN

            
            ADDPOINTSRECORD;
        END IF;
    ELSE
        NUCONSECUTIVO := NULL ;

        
        IF (INUMODOCONSE = CNUCONSEC_ON_NEW) THEN
            
            PKINSTANCEDATAMGR.SETCG_CONSECCACHE ;
            PKINSTANCEDATAMGR.GETCG_CONSECCACHE (NUCONSECUTIVO) ;

        ELSIF (INUMODOCONSE = CNUCONSEC_ON_OLD) THEN
            
            PKINSTANCEDATAMGR.GETCG_CONSECCACHE (NUCONSECUTIVO) ;
        END IF;

        
        NUIDX := NVL (TBCARGCONCCNC.LAST, 0) + 1 ;

        
        FILLRECORD ;
        
        
        ADDTARIFFDATES();

        
        ADDTARIFFRANGES();

        
        ADDGENCHRGRECORD (NUIDX) ;

    END IF;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ADDCHARGE;
























PROCEDURE ADDINCOPRODUCT
(
    ISBTIPO IN REGIINCO.REINTIIN%TYPE
)
IS
    
    NUIDX NUMBER ;

    NUIDPROCESO BITAINCO.BIINIDPR%TYPE ;
    NUCONTRATO BITAINCO.BIINSUSC%TYPE ;
    NUPRODUCTO BITAINCO.BIINSESU%TYPE ;
    RCPERIODO PERIFACT%ROWTYPE ;
    NUSERVICIO BITAINCO.BIINSERV%TYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddIncoProd.GetInstanceData');

        
        PKINSTANCEDATAMGR.GETCG_TRACKPROCESSID (NUIDPROCESO) ;

        
        PKINSTANCEDATAMGR.GETCG_SUBSCRIBER (NUCONTRATO) ;

        
        PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUPRODUCTO) ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        
        PKINSTANCEDATAMGR.GETCG_SERVICE (NUSERVICIO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.AddIncoProduct');

    
    GETINSTANCEDATA ;

    
    NUIDX := NVL (TBREINCOIN.LAST,0) + 1 ;

    
    TBREINCOIN (NUIDX) := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
                            ('SQ_REGIINCO_REINCOIN') ;
    TBREINIDPR (NUIDX) := NUIDPROCESO ;
    TBREINSUSC (NUIDX) := NUCONTRATO ;
    TBREINSESU (NUIDX) := NUPRODUCTO ;
    TBREINPEFA (NUIDX) := RCPERIODO.PEFACODI ;
    TBREINSERV (NUIDX) := NUSERVICIO ;
    TBREINTIIN (NUIDX) := ISBTIPO ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ADDINCOPRODUCT;
























PROCEDURE ADDINCORECTODEL
IS
    
    NUIDX NUMBER ;

    NUPRODUCTO BITAINCO.BIINSESU%TYPE ;
    NUSERVICIO REGIINCO.REINSERV%TYPE ;
    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddIncoProd.GetInstanceData');

        
        PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUPRODUCTO) ;

    	
    	PKINSTANCEDATAMGR.GETCG_SERVICE (NUSERVICIO) ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.AddIncoRecToDel');

    
    GETINSTANCEDATA ;

    
    NUIDX := NVL (TBDELREINSESU.LAST,0) + 1 ;

    
    TBDELREINSESU (NUIDX) := NUPRODUCTO ;
    TBDELREINSERV (NUIDX) := NUSERVICIO ;
    TBDELREINPEFA (NUIDX) := RCPERIODO.PEFACODI ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ADDINCORECTODEL;


























PROCEDURE ADDINCONSISTENCE
(
    INUCOMPONENTE   IN BITAINCO.BIINCOMP%TYPE,
    ISBCAUSA        IN BITAINCO.BIINCAUS%TYPE
)
IS
    
    NUIDX NUMBER ;

    NUIDPROCESO BITAINCO.BIINIDPR%TYPE ;
    NUCONTRATO  BITAINCO.BIINSUSC%TYPE ;
    NUPRODUCTO  BITAINCO.BIINSESU%TYPE ;
    NUCONCEPTO  BITAINCO.BIINCONC%TYPE ;
    RCPERIODO   PERIFACT%ROWTYPE ;
    NUSERVICIO  BITAINCO.BIINSERV%TYPE ;
    SBUSUARIO   BITAINCO.BIINUSUA%TYPE ;
    SBTERMINAL  BITAINCO.BIINTERM%TYPE ;
    SBPROGRAMA  BITAINCO.BIINPROG%TYPE ;

    NUUSUARIO   CARGOS.CARGUSUA%TYPE ;
    NUPROGRAMA  CARGOS.CARGPROG%TYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddInco.GetInstanceData');

        
        PKINSTANCEDATAMGR.GETCG_TRACKPROCESSID (NUIDPROCESO) ;

        
        PKINSTANCEDATAMGR.GETCG_SUBSCRIBER (NUCONTRATO) ;

        
        PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUPRODUCTO) ;

        
        PKINSTANCEDATAMGR.GETCG_CONCEPT (NUCONCEPTO) ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        
        PKINSTANCEDATAMGR.GETCG_SERVICE (NUSERVICIO) ;

        
        PKINSTANCEDATAMGR.GETCG_USER (NUUSUARIO) ;
        SBUSUARIO := DASA_USER.FSBGETMASK(NUUSUARIO);

        
        PKINSTANCEDATAMGR.GETCG_TERMINAL (SBTERMINAL) ;

        
        PKINSTANCEDATAMGR.GETCG_PROGRAM (NUPROGRAMA) ;
        SBPROGRAMA := PKTBLPROCESOS.FSBGETPROCESS(NUPROGRAMA);

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.AddInconsistence');

    
    GETINSTANCEDATA ;

    
    NUIDX := NVL (TBBIINCOIN.LAST,0) + 1 ;

    
    TBBIINCOIN (NUIDX) := PKGENERALSERVICES.FNUGETNEXTSEQUENCEVAL
                            ('SQ_BITAINCO_BIINCOIN') ;
    TBBIINIDPR (NUIDX) := NUIDPROCESO ;
    TBBIINSUSC (NUIDX) := NUCONTRATO ;
    TBBIINSESU (NUIDX) := NUPRODUCTO ;
    TBBIINCOMP (NUIDX) := INUCOMPONENTE ;
    TBBIINCONC (NUIDX) := NUCONCEPTO ;
    TBBIINCAUS (NUIDX) := ISBCAUSA ;
    TBBIINPEFA (NUIDX) := RCPERIODO.PEFACODI ;
    TBBIINCICL (NUIDX) := RCPERIODO.PEFACICL ;
    TBBIINSERV (NUIDX) := NUSERVICIO ;
    TBBIINFECH (NUIDX) := SYSDATE ;
    TBBIINUSUA (NUIDX) := SBUSUARIO ;
    TBBIINTERM (NUIDX) := SBTERMINAL ;
    TBBIINPROG (NUIDX) := SBPROGRAMA ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ADDINCONSISTENCE;



































PROCEDURE ADDINDIVCHARGE
(
    IONUVALOR       IN OUT CARGOS.CARGVALO%TYPE
)
IS
    
    NUUNIDADES CARGOS.CARGUNID%TYPE ;

    
    SBDOCUMENTO CARGOS.CARGDOSO%TYPE ;

    
    NUMODOCONSE NUMBER ;

    
    NUCONSECUTIVO NUMBER ;
    
    
    NUPECO      PERICOSE.PECSCONS%TYPE;
    

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.AddIndivCharge.GetInstanceData');

        
        PKINSTANCEDATAMGR.GETCG_UNITS (NUUNIDADES) ;

        
        PKINSTANCEDATAMGR.GETCG_SUPPDOCU (SBDOCUMENTO) ;

        
        PKINSTANCEDATAMGR.GETCG_CONSECUTIVEMODE (NUMODOCONSE) ;
        
        
        PKINSTANCEDATAMGR.GETCG_CONSUMPERIOD(NUPECO);
        
        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.AddIndivCharge');

    
    GETINSTANCEDATA ;

    
    IF (IONUVALOR = 0) THEN
        PKERRORS.POP;
        RETURN;
    END IF;

    PKBORATINGMEMORYMGR.ADDCHARGE
    (
        IONUVALOR,
        NUUNIDADES,
        SBDOCUMENTO,
        NVL(NUMODOCONSE, CNUCONSEC_ON_NEW),
        NUPECO
    ) ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ADDINDIVCHARGE;










































































PROCEDURE UPDRANKSCONSSUBSVAL
(
	INUTIPOCONS	   IN	TIPOCONS.TCONCODI%TYPE,
	INUCONCEPTO	   IN	CONCEPTO.CONCCODI%TYPE,
	INUPERIODOC	   IN	PERICOSE.PECSCONS%TYPE,
	IBLENMEMORIA   IN	BOOLEAN,
	INUCONSCARGO   IN	RANGLIQU.RALICODO%TYPE,
	INUPRODUCTO	   IN	RANGLIQU.RALISESU%TYPE
)
IS
    
    NUIDXS	NUMBER ;
    
    NUIDXC	NUMBER ;
    
    NUIDX	NUMBER ;
    
    NUIDXCRGS   NUMBER;
    
    
    NUCARGCODO  CARGOS.CARGCODO%TYPE;
    
    
    DTDATE  DATE;
    
    
    RCPERICOSE  PERICOSE%ROWTYPE;
    
    
    RCPERIFACT  PERIFACT%ROWTYPE;
    
    NUPERIFACT      PERIFACT.PEFACODI%TYPE;
    
    
    SBDOCSOPC   CARGOS.CARGDOSO%TYPE;
    
    SBDOCSOPR   CARGOS.CARGDOSO%TYPE;
    
    
    NULIQVALUE  RANGLIQU.RALIVAUL%TYPE;

    
    
    BLFOUNDRANKS    BOOLEAN := FALSE;

    
    TBRANGLIQUTMP     PKBCRANGLIQU.TTYRANGLIQU;
    
    TBRANGLIQUCNCTMP    PKBCRANGLIQU.TTYRANGLIQU;

    
    TBCARGCONC  PKTBLCARGOS.TYCARGCONC;
    TBCARGNUSE  PKTBLCARGOS.TYCARGNUSE;
    TBCARGSIGN  PKTBLCARGOS.TYCARGSIGN;
    TBCARGDOSO  PKTBLCARGOS.TYCARGDOSO;
    TBCARGVALO  PKTBLCARGOS.TYCARGVALO;
    TBCARGUNID  PKTBLCARGOS.TYCARGUNID;
    TBCARGPEFA  PKTBLCARGOS.TYCARGPEFA;
    TBCARGCODO  PKTBLCARGOS.TYCARGCODO;
    TBCARGTICO  PKTBLTIPOCONS.TYTCONCODI;
    TBCARGPECO  PKTBLPERICOSE.TYPECSCONS;
    TBCARGFECR  PKTBLCARGOS.TYCARGFECR;
    TBCARGTIPR  PKTBLCARGOS.TYCARGTIPR;
    
    
    RCSERVSUSC      SERVSUSC%ROWTYPE;

    
    NUSERVCODI      SERVICIO.SERVCODI%TYPE;
    
    RCSERVICIO      SERVICIO%ROWTYPE;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.UpdRanksConsSubsVal');

    
    TBRANGLIQUCNCTMP := TBRANGLIQUCNC;
    IF(TBRANGLIQUCNCTMP.FIRST IS NULL) THEN

        
        
        TA_BOTARIFASLIQUIDADAS.OBTRANGOSLIQUIDADOS( TBRANGLIQUCNCTMP );
    END IF;
    
    
    
    
    
    
    IF (NOT IBLENMEMORIA) THEN

        
    	
        PKBCRANGLIQU.OBTREGSPORCONSECUTIVO
    	(
    		INUCONSCARGO,
    		INUPRODUCTO,
    		TBRANGLIQUTMP
    	);

    	
    	NUIDX := TBRANGLIQUCNCTMP.FIRST ;

        
        
        IF TBRANGLIQUTMP.FIRST IS NULL THEN
            GOTO BUSCACONSUMO;
        END IF;

    	LOOP
    	

            EXIT WHEN NUIDX IS NULL ;

    	    IF (NOT TBRANGLIQUTMP.EXISTS (NUIDX)) THEN
    	   	    
    	       	GOTO PROXIMO ;
    	    END IF;

            
            

            PKBCRANGLIQU.GETRANKVALBYCONSEC
    		(
    		    TBRANGLIQUTMP(NUIDX).RALICODO,
    		    TBRANGLIQUTMP(NUIDX).RALISESU,
    		    TBRANGLIQUTMP(NUIDX).RALILIIR,
    		    NULIQVALUE
    		);

            IF (NULIQVALUE!= 0) THEN
                
        	    
        	    PKBCRANGLIQU.UPSUBSVALBYCONSEC
        		(
        		    TBRANGLIQUTMP(NUIDX).RALICODO,
        		    TBRANGLIQUTMP(NUIDX).RALISESU,
        		    TBRANGLIQUTMP(NUIDX).RALILIIR,
        		    TBRANGLIQUCNCTMP(NUIDX).RALIVAUL
        		) ;
            END IF;

    	    << PROXIMO >>

    	    NUIDX := TBRANGLIQUCNCTMP.NEXT (NUIDX) ;
    	
    	END LOOP ;

        PKERRORS.POP ;
    	RETURN ;

    END IF;
    
    
    
    

    
    
    NUIDXS := TBRANGLIQUCNCTMP.FIRST ;

    IF (NUIDXS IS NULL) THEN
        PKERRORS.POP;
        RETURN;
    END IF;

    LOOP
        EXIT WHEN NUIDXS IS NULL ;

        
        
        NUIDXC := TBRANGLIQUPRO.FIRST ;

        LOOP
    	    EXIT WHEN NUIDXC IS NULL ;

            
    	    
      	    
            
    	    IF (TBRANGLIQUPRO(NUIDXC).RALITICO = INUTIPOCONS
                AND TBRANGLIQUPRO(NUIDXC).RALICONC = INUCONCEPTO
                AND TBRANGLIQUPRO(NUIDXC).RALIPECO = INUPERIODOC
                AND TBRANGLIQUPRO(NUIDXC).RALILIIR = TBRANGLIQUCNCTMP(NUIDXS).RALILIIR
                AND TBRANGLIQUPRO(NUIDXC).RALILISR = TBRANGLIQUCNCTMP(NUIDXS).RALILISR)
            THEN
                IF TBRANGLIQUPRO(NUIDXC).RALIVAUL = 0 THEN
                    TBRANGLIQUPRO(NUIDXC).RALIVASU := 0;
                ELSE
                    TBRANGLIQUPRO(NUIDXC).RALIVASU  := TBRANGLIQUCNCTMP(NUIDXS).RALIVAUL  ;
                END IF;

                BLFOUNDRANKS := TRUE;
                
                EXIT ;
    	    END IF ;

            
            NUIDXC := TBRANGLIQUPRO.NEXT (NUIDXC) ;
        END LOOP ;

        
        NUIDXS := TBRANGLIQUCNCTMP.NEXT (NUIDXS) ;
    
    END LOOP;
    
    
    
    
    
    
    
    

    <<BUSCACONSUMO>>

    
    
    IF NOT BLFOUNDRANKS THEN
    
        
        PKBCPERICOSE.GETCACHERECORD(INUPERIODOC, RCPERICOSE);

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD(RCSERVSUSC);
        
        
        IF (RCSERVSUSC.SESUNUSE IS NULL OR RCSERVSUSC.SESUNUSE <> INUPRODUCTO) THEN
            
            RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD(INUPRODUCTO);
        END IF;

        
        
        
        NUSERVCODI := RCSERVSUSC.SESUSERV;
        PKSERVICEMGR.GETRECORD(NUSERVCODI, RCSERVICIO);

        PKBCPERIFACT.GETBILLPERBYCONSPER(
            RCSERVSUSC.SESUCICL,
            RCPERICOSE.PECSCONS,
            NUPERIFACT,
            RCSERVICIO.SERVTICO);

        PKBILLINGPERIODMGR.GETRECORD(NUPERIFACT, RCPERIFACT);

        
    	SBDOCSOPC := PKBOSUPPORTDOCUMENTMGR.FSBGETCONSUMBYPERIODSD
    	(
    	    RCPERIFACT.PEFAANO,
    	    RCPERIFACT.PEFAMES,
    	    INUTIPOCONS,
    	    PKCONSTANTE.SI	
    	) ;

    	
    	SBDOCSOPR := PKBOSUPPORTDOCUMENTMGR.FSBGETCONSUMBYPERIODSD
    	(
             RCPERIFACT.PEFAANO,
             RCPERIFACT.PEFAMES,
             INUTIPOCONS,
             PKCONSTANTE.NO	
        ) ;
        
        
        
        PKBCCARGOS.GETCNSMPCHRGS
    	(
    		INUPRODUCTO,
    		INUCONCEPTO,
    		SBDOCSOPC,
    		SBDOCSOPR,
    		TBCARGCONC,
    		TBCARGNUSE,
    		TBCARGSIGN,
    		TBCARGDOSO,
    		TBCARGUNID,
    		TBCARGVALO,
    		TBCARGTIPR,
    		TBCARGPEFA,
    		TBCARGCODO,
    		TBCARGFECR
    	) ;

    	NUIDXCRGS := TBCARGCODO.FIRST;
    	
        
        IF ( NUIDXCRGS IS NULL ) THEN
            PKERRORS.POP;
            RETURN;
        END IF;

        
        DTDATE := TBCARGFECR(NUIDXCRGS);
        NUCARGCODO := TBCARGCODO(NUIDXCRGS);

    	
        LOOP
            EXIT WHEN NUIDXCRGS IS NULL;

            IF TBCARGFECR(NUIDXCRGS) > DTDATE THEN
                NUCARGCODO := TBCARGCODO(NUIDXCRGS);
                DTDATE := TBCARGFECR(NUIDXCRGS);
            END IF;

            NUIDXCRGS := TBCARGCODO.NEXT(NUIDXCRGS);
        END LOOP;

        
        PKBCRANGLIQU.OBTREGSPORCONSECUTIVO
    	(
    		NUCARGCODO,
    		INUPRODUCTO,
    		TBRANGLIQUTMP
    	) ;

        
        
        NUIDXS := TBRANGLIQUTMP.FIRST ;

        LOOP
            EXIT WHEN NUIDXS IS NULL;

            
            TBRANGLIQUTMP(NUIDXS).RALICODO := INUCONSCARGO;

            
            NUIDXC := TBRANGLIQUCNCTMP.FIRST ;

            LOOP
        	    EXIT WHEN NUIDXC IS NULL ;

        	    
        	    
        	    IF (TBRANGLIQUTMP(NUIDXS).RALILIIR  = TBRANGLIQUCNCTMP(NUIDXC).RALILIIR
                    AND TBRANGLIQUTMP(NUIDXS).RALILISR = TBRANGLIQUCNCTMP(NUIDXC).RALILISR)
        	    THEN
                    TBRANGLIQUTMP(NUIDXS).RALIVASU := TBRANGLIQUCNCTMP(NUIDXC).RALIVASU ;

                    
                    EXIT ;
        	    END IF ;

                
                NUIDXC := TBRANGLIQUCNCTMP.NEXT (NUIDXC) ;
            END LOOP ;

            
            NUIDXS := TBRANGLIQUTMP.NEXT (NUIDXS) ;
        
        END LOOP;

        
        
        
        CLEARLIQRANKCONCMEM;

        TBRANGLIQUCNC := TBRANGLIQUTMP;

        
        NUIDXC := TBRANGLIQUCNC.FIRST;
        
        LOOP
        
            EXIT WHEN NUIDXC IS NULL ;

            
            NUIDXS := NVL (TBRANGLIQUPRO.LAST, 0) + 1 ;

            
            
            TBRANGLIQUPRO (NUIDXS) := TBRANGLIQUCNC (NUIDXC) ;

            
            NUIDXC := TBRANGLIQUCNC.NEXT (NUIDXC) ;
        
        END LOOP ;
    END IF;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END UPDRANKSCONSSUBSVAL;






























PROCEDURE GETRANKSCONSSUBSVAL
(
	IBLENMEMORIA	IN	BOOLEAN,
	INUCONSCARGO	IN	RANGLIQU.RALICODO%TYPE,
	INUPRODUCTO     IN  SERVSUSC.SESUNUSE%TYPE,
	ORCTBRANGLIQU   OUT PKTBLRANGLIQU.TYTBRANGLIQU
)
IS
    NUIDX	NUMBER ;
    
    TBRALICODOTMP     PKTBLRANGLIQU.TYRALICODO;
    TBRALISESUTMP     PKTBLRANGLIQU.TYRALISESU;
    TBRALIPEFATMP     PKTBLRANGLIQU.TYRALIPEFA;
    TBRALIPECOTMP     PKTBLRANGLIQU.TYRALIPECO;
    TBRALITICOTMP     PKTBLRANGLIQU.TYRALITICO;
    TBRALIIDRETMP     PKTBLRANGLIQU.TYRALIIDRE;
    TBRALICONCTMP     PKTBLRANGLIQU.TYRALICONC;
    TBRALILIIRTMP     PKTBLRANGLIQU.TYRALILIIR;
    TBRALILISRTMP     PKTBLRANGLIQU.TYRALILISR;
    TBRALIUNLITMP     PKTBLRANGLIQU.TYRALIUNLI;
    TBRALIVAULTMP     PKTBLRANGLIQU.TYRALIVAUL;
    TBRALIVASUTMP     PKTBLRANGLIQU.TYRALIVASU;
    TBRALIFECRTMP     PKTBLRANGLIQU.TYRALIFECR;

    NUIDXSAL    NUMBER;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetRanksConsSubsVal');

    
    IF (NOT IBLENMEMORIA) THEN
    	
    	
    	PKBCRANGLIQU.GETRECORDSBYCONS
    	(
    		INUCONSCARGO,
    		INUPRODUCTO,
    		ORCTBRANGLIQU.RALICODO,
    		ORCTBRANGLIQU.RALISESU,
    		ORCTBRANGLIQU.RALIPEFA,
    		ORCTBRANGLIQU.RALIPECO,
    		ORCTBRANGLIQU.RALITICO,
    		ORCTBRANGLIQU.RALIIDRE,
    		ORCTBRANGLIQU.RALICONC,
    		ORCTBRANGLIQU.RALILIIR,
    		ORCTBRANGLIQU.RALILISR,
    		ORCTBRANGLIQU.RALIUNLI,
    		ORCTBRANGLIQU.RALIVAUL,
    		ORCTBRANGLIQU.RALIVASU,
    		ORCTBRANGLIQU.RALIFECR,
    		ORCTBRANGLIQU.RALIPORC,
    		ORCTBRANGLIQU.RALIVALO,
    		ORCTBRANGLIQU.RALIVACO
    	) ;
    	
        PKERRORS.POP;
        RETURN;
     END IF;

    
    
    NUIDX := TBRANGLIQUPRO.FIRST ;
    NUIDXSAL := 1;

	LOOP
	
	    EXIT WHEN NUIDX IS NULL ;
        
	    
	    IF (TBRANGLIQUPRO(NUIDX).RALICODO = INUCONSCARGO)THEN
	    
            ORCTBRANGLIQU.RALICODO(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALICODO;
            ORCTBRANGLIQU.RALIPECO(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALIPECO;
            ORCTBRANGLIQU.RALITICO(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALITICO;
            ORCTBRANGLIQU.RALIIDRE(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALIIDRE;
            ORCTBRANGLIQU.RALICONC(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALICONC;
            ORCTBRANGLIQU.RALILIIR(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALILIIR;
            ORCTBRANGLIQU.RALILISR(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALILISR;
            ORCTBRANGLIQU.RALIUNLI(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALIUNLI;
            ORCTBRANGLIQU.RALIVAUL(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALIVAUL;
            ORCTBRANGLIQU.RALIVASU(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALIVASU;
            ORCTBRANGLIQU.RALIPORC(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALIPORC;
            ORCTBRANGLIQU.RALIVALO(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALIVALO;
            ORCTBRANGLIQU.RALIVACO(NUIDXSAL) := TBRANGLIQUPRO(NUIDX).RALIVACO;
            NUIDXSAL := NUIDXSAL + 1;
	    
	    END IF ;

	    
	    NUIDX := TBRANGLIQUPRO.NEXT (NUIDX) ;
	
	END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRANKSCONSSUBSVAL;































PROCEDURE CLEARCHRGARRDB
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearChrgArrDB');

    
    TBCARGCUCO.DELETE ;
    TBCARGNUSE.DELETE ;
    TBCARGCONC.DELETE ;
    TBCARGCACA.DELETE ;
    TBCARGSIGN.DELETE ;
    TBCARGPEFA.DELETE ;
    TBCARGVALO.DELETE ;
    TBCARGDOSO.DELETE ;
    TBCARGCODO.DELETE ;
    TBCARGUSUA.DELETE ;
    TBCARGTIPR.DELETE ;
    TBCARGUNID.DELETE ;
    TBCARGFECR.DELETE ;
    TBCARGPROG.DELETE ;
    TBCARGCOLL.DELETE ;
    TBCARGVABL.DELETE ;
    TBCARGPECO.DELETE ;
    TBCARGTICO.DELETE ;
    TBCARGTACO.DELETE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END CLEARCHRGARRDB;


    

















    PROCEDURE CLEARPOINTSARRDB
    IS
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearPointsArrDB');
        
        
        TBDEPPACPC.DELETE ;
        TBDEPPSESU.DELETE ;
        TBDEPPPEFA.DELETE ;
        TBDEPPCONC.DELETE ;
        TBDEPPPUNT.DELETE ;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END CLEARPOINTSARRDB;






































PROCEDURE CLEARCHRGCONCMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearChrgConcMem');

    
    TBCARGCONCCNC.DELETE ;
    TBCARGVALOCNC.DELETE ;
    TBCARGSIGNCNC.DELETE ;
    TBCARGUNIDCNC.DELETE ;
    TBCARGDOSOCNC.DELETE ;
    TBCARGCODOCNC.DELETE ;
    TBCARGCACACNC.DELETE ;
    TBCARGCOLLCNC.DELETE ;
    TBCARGVABLCNC.DELETE ;
    TBCARGPECOCNC.DELETE ;
    TBCARGTICOCNC.DELETE ;
    TBCARGTACOCNC.DELETE ;
    TBCARGNUSECNC.DELETE ;
    TBCARGFECRCNC.DELETE ;
    TBCARGPROGCNC.DELETE ;
    TBCARGPEFACNC.DELETE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END CLEARCHRGCONCMEM;

    
















    PROCEDURE CLEARPOINTSCONCMEM
    IS
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearPointsConcMem');

        
        TBDEPPSESUCNC.DELETE;
        TBDEPPPEFACNC.DELETE;
        TBDEPPCONCCNC.DELETE;
        TBDEPPPUNTCNC.DELETE;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END CLEARPOINTSCONCMEM;



























PROCEDURE CLEARCHRGPRODUCTMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearChrgProductMem');

    
    TBCARGNUSEPRO.DELETE ;
    TBCARGCONCPRO.DELETE ;
    TBCARGCACAPRO.DELETE ;
    TBCARGSIGNPRO.DELETE ;
    TBCARGVALOPRO.DELETE ;
    TBCARGDOSOPRO.DELETE ;
    TBCARGCODOPRO.DELETE ;
    TBCARGUNIDPRO.DELETE ;
    TBCARGCOLLPRO.DELETE ;
    TBCARGVABLPRO.DELETE ;
    TBCARGPECOPRO.DELETE ;
    TBCARGTICOPRO.DELETE ;
    TBCARGTACOPRO.DELETE ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END CLEARCHRGPRODUCTMEM;


    
















    PROCEDURE CLEARPOINTSPRODUCTMEM
    IS
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearPointsProductMem');

        
        TBDEPPSESUPRO.DELETE ;
        TBDEPPPEFAPRO.DELETE ;
        TBDEPPCONCPRO.DELETE ;
        TBDEPPPUNTPRO.DELETE ;
        
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END CLEARPOINTSPRODUCTMEM;

    



















    PROCEDURE LIMPIARDETRECARGOCONC
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LimpiarDetRecargoConc');

        TBDERMCONSCNC.DELETE ;
        TBDERMCODOCNC.DELETE ;
        TBDERMTIDOCNC.DELETE ;
        TBDERMNUFICNC.DELETE ;
        TBDERMVABACNC.DELETE ;
        TBDERMPOIACNC.DELETE ;
        TBDERMFILRCNC.DELETE ;
        TBDERMFFLRCNC.DELETE ;
        TBDERMFLDECNC.DELETE ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END LIMPIARDETRECARGOCONC;
    
    























    PROCEDURE   CLEARTARIFFDATESCNCMEM
    IS
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.ClearTariffDatesCncMem');
        GTBVIGELIQUCNC.DELETE;
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END CLEARTARIFFDATESCNCMEM;

    























    PROCEDURE   CLEARTARIFFDATESPROMEM
    IS
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.ClearTariffDatesProMem');
        GTBVIGELIQUPRO.DELETE;
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END CLEARTARIFFDATESPROMEM;

    























    PROCEDURE   CLEARTARIFFDATESMEM
    IS
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.ClearTariffDatesMem');
        GTBVIGELIQU.DELETE;
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END CLEARTARIFFDATESMEM;

    

























    PROCEDURE COMMITTARIFFDATESCNC
    IS
        NUIDX   NUMBER;
        NUIDXP  NUMBER;
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.CommitTariffDatesCnc');

        
        IF (TBCARGCONCCNC.FIRST IS NULL) THEN
            
            CLEARTARIFFDATESCNCMEM ;
            PKERRORS.POP;
            RETURN;
        END IF;

        
        NUIDX := GTBVIGELIQUCNC.FIRST ;

        LOOP
        
            EXIT WHEN NUIDX IS NULL ;

            
            
            NUIDXP := NVL (GTBVIGELIQUPRO.LAST, 0) + 1 ;

            
            
            GTBVIGELIQUPRO (NUIDXP) := GTBVIGELIQUCNC (NUIDX) ;

            
            NUIDX := GTBVIGELIQUCNC.NEXT (NUIDX) ;
        
        END LOOP ;

        
        CLEARTARIFFDATESCNCMEM ;
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END COMMITTARIFFDATESCNC;

    

























    PROCEDURE COMMITTARIFFDATESPROD
    IS
        NUIDX   NUMBER;
        NUIDXP  NUMBER;
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.CommitTariffDatesProd');

        
        NUIDX := GTBVIGELIQUPRO.FIRST ;

        LOOP
        
            EXIT WHEN NUIDX IS NULL ;

            
            
            NUIDXP := NVL (GTBVIGELIQU.LAST, 0) + 1 ;

            
            
            GTBVIGELIQU (NUIDXP) := GTBVIGELIQUPRO (NUIDX) ;

            
            NUIDX := GTBVIGELIQUPRO.NEXT (NUIDX) ;
        
        END LOOP ;

        
        CLEARTARIFFDATESPROMEM ;
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END COMMITTARIFFDATESPROD;



































PROCEDURE CLEARCONCEPTCACHE
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearConceptCache');

    
    CLEARCHRGCONCMEM ;

    
    CLEARPOINTSCONCMEM;
    
    
    CLEARLIQRANKCONCMEM ;

    
    CLEARTARIFFDATESCNCMEM;

    
    CLEARCSMPCNCMEM ;
    
    
    LIMPIARDETRECARGOCONC ;

    
    CLEARACUMFACTCNCMEM;
    
    
    CLEARBILLEDPACKCNCMEM;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END CLEARCONCEPTCACHE;





















PROCEDURE CLEARCONSUMPTIONMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearConsumptionMem');

    
    TBCSMPCONSE.DELETE ;
    TBCSMPROWID.DELETE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARCONSUMPTIONMEM;





















PROCEDURE CLEARCSMPCNCMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearCsmpCncMem');

    
    TBCSMPCONSECNC.DELETE ;
    TBCSMPROWIDCNC.DELETE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARCSMPCNCMEM;





















PROCEDURE CLEARCSMPPROMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearCsmpProMem');

    
    TBCSMPCONSEPRO.DELETE ;
    TBCSMPROWIDPRO.DELETE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARCSMPPROMEM;




















PROCEDURE CLEARINCOMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearIncoMem');

    
    TBBIINCOIN.DELETE ;
    TBBIINIDPR.DELETE ;
    TBBIINSUSC.DELETE ;
    TBBIINSESU.DELETE ;
    TBBIINCOMP.DELETE ;
    TBBIINCONC.DELETE ;
    TBBIINCAUS.DELETE ;
    TBBIINPEFA.DELETE ;
    TBBIINCICL.DELETE ;
    TBBIINSERV.DELETE ;
    TBBIINFECH.DELETE ;
    TBBIINUSUA.DELETE ;
    TBBIINTERM.DELETE ;
    TBBIINPROG.DELETE ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARINCOMEM;




















PROCEDURE CLEARINCOPRODMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearIncoProdMem');

    
    TBREINCOIN.DELETE ;
    TBREINIDPR.DELETE ;
    TBREINSUSC.DELETE ;
    TBREINSESU.DELETE ;
    TBREINPEFA.DELETE ;
    TBREINSERV.DELETE ;
    TBREINTIIN.DELETE ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARINCOPRODMEM;























PROCEDURE CLEARINCORECTODELMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearIncoRecToDelMem');

    
    TBDELREINSESU.DELETE ;
    TBDELREINSERV.DELETE ;
    TBDELREINPEFA.DELETE ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARINCORECTODELMEM;































PROCEDURE CLEARINSTANCEDATACNC
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearInstanceDataCnc');

    
    PKINSTANCEDATAMGR.SETCG_CONCEPT (NULL) ;

    
    PKINSTANCEDATAMGR.SETCG_MEASUNIT (NULL) ;

    
    PKINSTANCEDATAMGR.SETCG_CDRCONS (NULL) ;

    
    PKINSTANCEDATAMGR.SETCG_BASEVALUE (NULL) ;

    
    PKINSTANCEDATAMGR.SETCG_UNITS (NULL) ;

    
    PKINSTANCEDATAMGR.SETCG_SUPPDOCU (NULL) ;

    
    PKINSTANCEDATAMGR.SETCG_CONSECUTIVEMODE (NULL) ;
    
    
    PKINSTANCEDATAMGR.SETCG_CONSUMPTIONTYPE(NULL);

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARINSTANCEDATACNC;























PROCEDURE CLEARINSTANCEDATAPRO
IS
    RCSERVSUSCNULL SERVSUSC%ROWTYPE ;
BEGIN


    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearInstanceDataPro');

    
    PKINSTANCEDATAMGR.SETCG_PRODUCTRECORD (RCSERVSUSCNULL) ;

    
    PKINSTANCEDATAMGR.SETCG_SUBSCRIBER (NULL) ;

    
    PKINSTANCEDATAMGR.SETCG_SUBSSERVICE (NULL) ;

    
    PKINSTANCEDATAMGR.SETCG_SERVICE (NULL) ;

    
    PKINSTANCEDATAMGR.SETCG_CONSUMPTIONCYCLE (NULL) ;
    
    
    PKINSTANCEDATAMGR.SETCG_DISCOUNTVALUE(NULL);

    
    PKINSTANCEDATAMGR.SETCG_DISCOUNTPERCENT(NULL);

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARINSTANCEDATAPRO;





































PROCEDURE CLEARLIQRANKCONCMEM
IS
    NUIDX NUMBER ;
    NUIDXTMP NUMBER ;

BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearLiqRankConcMem');
    
    TBRANGLIQUCNC.DELETE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARLIQRANKCONCMEM;





























PROCEDURE CLEARLIQRANKMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearLiqRankMem');

    
    TBRANGLIQU.DELETE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARLIQRANKMEM;






























PROCEDURE CLEARLIQRANKPRODMEM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearLiqRankProdMem');

    
    TBRANGLIQUPRO.DELETE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARLIQRANKPRODMEM;
























PROCEDURE CLEARPRODCONSUM
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearProdConsum');

    
    TBCOSSROWID.DELETE ;
    TBCOSSTCON.DELETE ;
    TBCOSSPEFA.DELETE ;
    TBCOSSPECS.DELETE ;
    TBCOSSCOCA.DELETE ;
    TBCOSSCMSS.DELETE ;
    TBCOSSELME.DELETE ;
    TBCOSSFERE.DELETE ;
    TBCOSSCOFA.DELETE ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARPRODCONSUM;

    



















    PROCEDURE LIMPIARDETRECARGOPROD
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LimpiarDetRecargoProd');

        TBDERMCONSPRO.DELETE ;
        TBDERMCODOPRO.DELETE ;
        TBDERMTIDOPRO.DELETE ;
        TBDERMNUFIPRO.DELETE ;
        TBDERMVABAPRO.DELETE ;
        TBDERMPOIAPRO.DELETE ;
        TBDERMFILRPRO.DELETE ;
        TBDERMFFLRPRO.DELETE ;
        TBDERMFLDEPRO.DELETE ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END LIMPIARDETRECARGOPROD;
    
    

































PROCEDURE CLEARPRODUCTCACHE
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearProductCache');

    
    CLEARCHRGPRODUCTMEM ;
    
    
    CLEARPOINTSPRODUCTMEM ;

    
    CLEARGENERATEDCHRGSARR ;

    
    CLEARLIQRANKPRODMEM ;
    
    
    CLEARTARIFFDATESPROMEM;

    
    CLEARCSMPPROMEM ;

    
    CLEARPRODCONSUM ;
    
    
    LIMPIARDETRECARGOPROD;

    
    CLEARACUMFACTPROMEM;
    
    
    CLEARBILLEDPACKPROMEM;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARPRODUCTCACHE;

    



















    PROCEDURE LIMPIARDETRECARGO
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LimpiarDetRecargo');

        TBDERMCONS.DELETE ;
        TBDERMCODO.DELETE ;
        TBDERMTIDO.DELETE ;
        TBDERMNUFI.DELETE ;
        TBDERMVABA.DELETE ;
        TBDERMPOIA.DELETE ;
        TBDERMFILR.DELETE ;
        TBDERMFFLR.DELETE ;
        TBDERMFLDE.DELETE ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END LIMPIARDETRECARGO;




































PROCEDURE CLEARSYNCRARRAYS
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearSyncrArrays');

    
    CLEARCHRGARRDB ;
    
    
    CLEARPOINTSARRDB;

    
    CLEARLIQRANKMEM ;
    
    
    CLEARTARIFFDATESMEM;

    
    CLEARCONSUMPTIONMEM ;

    
    CLEARINCOMEM ;

    
    CLEARINCOPRODMEM ;

    
    CLEARINCORECTODELMEM ;
    
    
    LIMPIARDETRECARGO;

    
    CLEARACUMFACTMEM;

    
    CLEARBILLEDPACKMEM;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END CLEARSYNCRARRAYS;

















































PROCEDURE COMMITCHRGCONC
IS
    NUIDX NUMBER ;
    NUIDXP NUMBER ;
    
    
    NUPOINTSIDXCNC  NUMBER;
    NUPOINTSIDXPRO  NUMBER;
    
    
    NUPRODUCTO SERVSUSC.SESUNUSE%TYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitChrgConc.GIData');

        
        PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUPRODUCTO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
    
    
    PROCEDURE COPYCHRGCONC
    IS
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitChrgConc.CopyChrgConc');


        
        NUIDX := TBCARGCONCCNC.FIRST ;

        LOOP
        
            
            EXIT WHEN NUIDX IS NULL ;

            
            NUIDXP := NVL (TBCARGCONCPRO.LAST, 0) + 1 ;

            
            
            TBCARGCONCPRO (NUIDXP) := TBCARGCONCCNC (NUIDX) ;
            TBCARGSIGNPRO (NUIDXP) := TBCARGSIGNCNC (NUIDX) ;
            TBCARGVALOPRO (NUIDXP) := TBCARGVALOCNC (NUIDX) ;
            TBCARGUNIDPRO (NUIDXP) := TBCARGUNIDCNC (NUIDX) ;
            TBCARGDOSOPRO (NUIDXP) := TBCARGDOSOCNC (NUIDX) ;
            TBCARGCODOPRO (NUIDXP) := TBCARGCODOCNC (NUIDX) ;
            TBCARGCACAPRO (NUIDXP) := TBCARGCACACNC (NUIDX) ;
            TBCARGCOLLPRO (NUIDXP) := TBCARGCOLLCNC (NUIDX) ;
            TBCARGVABLPRO (NUIDXP) := TBCARGVABLCNC (NUIDX) ;
            TBCARGPECOPRO (NUIDXP) := TBCARGPECOCNC (NUIDX) ;
            TBCARGTICOPRO (NUIDXP) := TBCARGTICOCNC (NUIDX) ;
            TBCARGNUSEPRO (NUIDXP) := NVL(TBCARGNUSECNC(NUIDX) , NUPRODUCTO) ;
            TBCARGTACOPRO (NUIDXP) := TBCARGTACOCNC (NUIDX) ;
            TBCARGFECRPRO (NUIDXP) := TBCARGFECRCNC (NUIDX) ;
            TBCARGPROGPRO (NUIDXP) := TBCARGPROGCNC (NUIDX) ;
            TBCARGPEFAPRO (NUIDXP) := TBCARGPEFACNC (NUIDX) ;

            
            NUIDX := TBCARGCONCCNC.NEXT (NUIDX) ;
        
        END LOOP ;

        
        CLEARCHRGCONCMEM ;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END COPYCHRGCONC;
    
    
    PROCEDURE COPYPOINTSCONC
    IS
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitChrgConc.CopyPointsConc');

        
        NUPOINTSIDXCNC := TBDEPPCONCCNC.FIRST ;

        LOOP

            
            EXIT WHEN NUPOINTSIDXCNC IS NULL ;

            
            NUPOINTSIDXPRO := NVL (TBDEPPCONCPRO.LAST, 0) + 1 ;

            
            TBDEPPSESUPRO(NUPOINTSIDXPRO) := TBDEPPSESUCNC(NUPOINTSIDXCNC) ;
            TBDEPPPEFAPRO(NUPOINTSIDXPRO) := TBDEPPPEFACNC(NUPOINTSIDXCNC) ;
            TBDEPPCONCPRO(NUPOINTSIDXPRO) := TBDEPPCONCCNC(NUPOINTSIDXCNC) ;
            TBDEPPPUNTPRO(NUPOINTSIDXPRO) := TBDEPPPUNTCNC(NUPOINTSIDXCNC) ;

            
            NUPOINTSIDXCNC := TBDEPPCONCCNC.NEXT (NUPOINTSIDXCNC) ;

        END LOOP ;

        
        CLEARPOINTSCONCMEM ;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END COPYPOINTSCONC;

BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitChrgConc');

    
    GETINSTANCEDATA ;
    
    
    COPYCHRGCONC;
    
    
    COPYPOINTSCONC;


    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END COMMITCHRGCONC;



















































PROCEDURE COMMITCHRGPROD
IS
    NUIDX                   NUMBER ;
    NUIDXP                  NUMBER ;

    
    NUPOINTSPRODIDX         NUMBER;
    NUPOINTSDEFIDX          NUMBER;
    
    
    SBPOINTSMOVTYPE         VARCHAR2(1);

    
    RCPRODUCTO              SERVSUSC%ROWTYPE ;

    
    RCPERIODO               PERIFACT%ROWTYPE ;

    
    DTFECHACURR             DATE ;
    
    
    NUCARGTIPR              CARGOS.CARGTIPR%TYPE;

    NUUSUARIO               CARGOS.CARGUSUA%TYPE ;
    SBTERMINAL              SA_TERMINAL.NAME%TYPE ;
    NUPROGRAMA              CARGOS.CARGPROG%TYPE ;

    PROCEDURE GETINSTANCEDATA
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitChrgProd.GIData');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCPRODUCTO) ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        
        PKINSTANCEDATAMGR.GETCG_USER (NUUSUARIO) ;

        
        PKINSTANCEDATAMGR.GETCG_TERMINAL (SBTERMINAL) ;

        
        PKINSTANCEDATAMGR.GETCG_PROGRAM (NUPROGRAMA) ;

        
        PKINSTANCEDATAMGR.GETCG_CURRDATE (DTFECHACURR) ;
        
        
        PKINSTANCEDATAMGR.GETCG_TIPOPROC(NUCARGTIPR);

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;


    
    PROCEDURE COPYCHRGPROD
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitChrgProd.CopyChrgProd');
        
        
        NUIDXP := TBCARGCONCPRO.FIRST ;

        LOOP
        
            EXIT WHEN NUIDXP IS NULL ;

            
            NUIDX := NVL (TBCARGCONC.LAST, 0) + 1 ;

            
            
            TBCARGNUSE (NUIDX) := TBCARGNUSEPRO (NUIDXP) ;
            TBCARGCONC (NUIDX) := TBCARGCONCPRO (NUIDXP) ;
            TBCARGCACA (NUIDX) := TBCARGCACAPRO (NUIDXP) ;
            TBCARGSIGN (NUIDX) := TBCARGSIGNPRO (NUIDXP) ;
            TBCARGVALO (NUIDX) := TBCARGVALOPRO (NUIDXP) ;
            TBCARGDOSO (NUIDX) := TBCARGDOSOPRO (NUIDXP) ;
            TBCARGCODO (NUIDX) := TBCARGCODOPRO (NUIDXP) ;
            TBCARGUNID (NUIDX) := TBCARGUNIDPRO (NUIDXP) ;
            TBCARGCOLL (NUIDX) := TBCARGCOLLPRO (NUIDXP) ;
            TBCARGVABL (NUIDX) := TBCARGVABLPRO (NUIDXP) ;
            TBCARGPECO (NUIDX) := TBCARGPECOPRO (NUIDXP) ;
            TBCARGTICO (NUIDX) := TBCARGTICOPRO (NUIDXP) ;
            TBCARGCUCO (NUIDX) := PKCONSTANTE.NULLNUM ;
            TBCARGPEFA (NUIDX) := TBCARGPEFAPRO (NUIDXP) ;
            TBCARGFECR (NUIDX) := NVL(TBCARGFECRPRO (NUIDXP), DTFECHACURR);
            TBCARGUSUA (NUIDX) := NUUSUARIO ;
            TBCARGPROG (NUIDX) := NVL(TBCARGPROGPRO (NUIDXP), NUPROGRAMA) ;
            TBCARGTIPR (NUIDX) := NVL(NUCARGTIPR,PKBILLCONST.AUTOMATICO) ;
            TBCARGTACO (NUIDX) := TBCARGTACOPRO (NUIDXP) ;

            
            NUIDXP := TBCARGCONCPRO.NEXT (NUIDXP) ;
        
        END LOOP ;

        
        CLEARCHRGPRODUCTMEM ;

        
        CLEARGENERATEDCHRGSARR ;


        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END COPYCHRGPROD ;
    
    
    PROCEDURE COPYPOINTSPROD
    IS
    BEGIN
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitChrgProd.CopyPointsProd');

        
        SBPOINTSMOVTYPE := PKBILLCONST.CSBTIPO_OTORGADO;

        
        NUPOINTSPRODIDX := TBDEPPCONCPRO.FIRST ;

        LOOP

            EXIT WHEN NUPOINTSPRODIDX IS NULL ;

            
            NUPOINTSDEFIDX := NVL (TBDEPPCONC.LAST, 0) + 1 ;

            
            
            TBDEPPACPC(NUPOINTSDEFIDX) := -1                            ;
            TBDEPPSESU(NUPOINTSDEFIDX) := TBDEPPSESUPRO(NUPOINTSPRODIDX);
            TBDEPPPEFA(NUPOINTSDEFIDX) := TBDEPPPEFAPRO(NUPOINTSPRODIDX);
            TBDEPPCONC(NUPOINTSDEFIDX) := TBDEPPCONCPRO(NUPOINTSPRODIDX);
            TBDEPPPUNT(NUPOINTSDEFIDX) := TBDEPPPUNTPRO(NUPOINTSPRODIDX);
            TBDEPPTIMO(NUPOINTSDEFIDX) := SBPOINTSMOVTYPE               ;
            TBDEPPFEMO(NUPOINTSDEFIDX) := DTFECHACURR                   ;
            TBDEPPPROG(NUPOINTSDEFIDX) := NUPROGRAMA                    ;
            TBDEPPUSUA(NUPOINTSDEFIDX) := NUUSUARIO                     ;
            TBDEPPTERM(NUPOINTSDEFIDX) := SBTERMINAL                    ;

            
            NUPOINTSPRODIDX := TBDEPPCONCPRO.NEXT(NUPOINTSPRODIDX) ;

        END LOOP ;

        
        CLEARPOINTSPRODUCTMEM ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END COPYPOINTSPROD ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitChrgProd');

    
    GETINSTANCEDATA ;

    
    
    COPYCHRGPROD ;
    
    
    
    COPYPOINTSPROD ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END COMMITCHRGPROD;

    


















    PROCEDURE COMMITDETALLERECARGOCONC
    IS
        NUINDICE    NUMBER;
        NUINDICEP   NUMBER;
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.CommitDetalleRecargoConc');

        
        IF (TBDERMCONSCNC.FIRST IS NULL) THEN
        
            
            LIMPIARDETRECARGOCONC;
            PKERRORS.POP;
            RETURN;
        
        END IF;

        
        NUINDICE := TBDERMCONSCNC.FIRST ;

        LOOP
        
            EXIT WHEN NUINDICE IS NULL ;

            
            NUINDICEP := NVL (TBDERMCONSPRO.LAST, 0) + 1 ;

            
            
            TBDERMCONSPRO (NUINDICEP) := TBDERMCONSCNC (NUINDICE) ;
            TBDERMCODOPRO (NUINDICEP) := TBDERMCODOCNC (NUINDICE) ;
            TBDERMTIDOPRO (NUINDICEP) := TBDERMTIDOCNC (NUINDICE) ;
            TBDERMNUFIPRO (NUINDICEP) := TBDERMNUFICNC (NUINDICE) ;
            TBDERMVABAPRO (NUINDICEP) := TBDERMVABACNC (NUINDICE) ;
            TBDERMPOIAPRO (NUINDICEP) := TBDERMPOIACNC (NUINDICE) ;
            TBDERMFILRPRO (NUINDICEP) := TBDERMFILRCNC (NUINDICE) ;
            TBDERMFFLRPRO (NUINDICEP) := TBDERMFFLRCNC (NUINDICE) ;
            TBDERMFLDEPRO (NUINDICEP) := TBDERMFLDECNC (NUINDICE) ;

            
            NUINDICE := TBDERMCONSCNC.NEXT (NUINDICE) ;
        
        END LOOP;

        
        LIMPIARDETRECARGOCONC ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END COMMITDETALLERECARGOCONC;

































PROCEDURE COMMITCONCEPT
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitConcept');

    
    COMMITCONSUMCNC;

    
    COMMITACUMFACTCNC;

    
    COMMITBILLEDPACKCNC;

    
    COMMITLIQRANKCONC;
    
    
    COMMITTARIFFDATESCNC;

    
    COMMITDETALLERECARGOCONC;

    
    COMMITCHRGCONC ;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);


END COMMITCONCEPT;






























PROCEDURE COMMITCONSUMCNC
IS
    NUIDX NUMBER ;
    NUIDXP NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitConsumCnc');

    
    NUIDX := TBCSMPCONSECNC.FIRST ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        NUIDXP := NVL (TBCSMPCONSEPRO.LAST, 0) + 1 ;
        
        
        TBCSMPROWIDPRO (NUIDXP) := TBCSMPROWIDCNC (NUIDX) ;
        TBCSMPCONSEPRO (NUIDXP) := TBCSMPCONSECNC (NUIDX) ;

        
        NUIDX := TBCSMPCONSECNC.NEXT (NUIDX) ;
    
    END LOOP ;

    
    CLEARCSMPCNCMEM;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END COMMITCONSUMCNC;























PROCEDURE COMMITCONSUMPRO
IS
    NUIDX NUMBER ;
    NUIDXP NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitConsumPro');

    
    NUIDXP := TBCSMPCONSEPRO.FIRST ;

    LOOP
    
        
        EXIT WHEN NUIDXP IS NULL ;

        
        NUIDX := NVL (TBCSMPCONSE.LAST, 0) + 1 ;

        
        
        TBCSMPROWID (NUIDX) := TBCSMPROWIDPRO (NUIDXP) ;
        TBCSMPCONSE (NUIDX) := TBCSMPCONSEPRO (NUIDXP) ;

        
        NUIDXP := TBCSMPCONSEPRO.NEXT (NUIDXP) ;
    
    END LOOP ;

    
    CLEARCSMPPROMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END COMMITCONSUMPRO;



































PROCEDURE COMMITLIQRANKCONC
IS
    NUIDX NUMBER ;
    NUIDXP NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitLiqRankConc');
    
    
    IF (TBCARGCONCCNC.FIRST IS NULL) THEN
        
        CLEARLIQRANKCONCMEM ;
        PKERRORS.POP;
        RETURN;
    END IF;

    
    NUIDX := TBRANGLIQUCNC.FIRST ;

    LOOP
    
        EXIT WHEN NUIDX IS NULL ;

        
        NUIDXP := NVL (TBRANGLIQUPRO.LAST, 0) + 1 ;

        
        
        TBRANGLIQUPRO (NUIDXP) := TBRANGLIQUCNC (NUIDX) ;

        
        NUIDX := TBRANGLIQUCNC.NEXT (NUIDX) ;
    
    END LOOP ;

    
    CLEARLIQRANKCONCMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END COMMITLIQRANKCONC;




































PROCEDURE COMMITLIQRANKPROD
IS
    NUIDX NUMBER ;
    NUIDXP NUMBER ;

    RCPERIODO PERIFACT%ROWTYPE ;
    NUPRODUCTO RANGLIQU.RALISESU%TYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitLiqRankProd.GetInstData');

        
        PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUPRODUCTO) ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitLiqRankProd');

    
    GETINSTANCEDATA ;

    
    NUIDX := TBRANGLIQUPRO.FIRST ;

    LOOP
    
        EXIT WHEN NUIDX IS NULL ;

        
        
        NUIDXP := NVL (TBRANGLIQU.LAST, 0) + 1 ;

        
        
        TBRANGLIQU (NUIDXP) := TBRANGLIQUPRO (NUIDX) ;
        
        
        

        
        NUIDX := TBRANGLIQUPRO.NEXT (NUIDX) ;
    
    END LOOP ;

    
    CLEARLIQRANKPRODMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END COMMITLIQRANKPROD;

    


















    PROCEDURE COMMITDETALLERECARGOPROD
    IS
        NUINDICE    NUMBER;
        NUINDICEP   NUMBER;
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.CommitDetalleRecargoProd');

        
        IF (TBDERMCONSPRO.FIRST IS NULL) THEN
        
            
            LIMPIARDETRECARGOPROD;
            PKERRORS.POP;
            RETURN;
        
        END IF;

        
        NUINDICE := TBDERMCONSPRO.FIRST ;

        LOOP
        
            EXIT WHEN NUINDICE IS NULL ;

            
            NUINDICEP := NVL (TBDERMCONS.LAST, 0) + 1 ;

            
            
            TBDERMCONS (NUINDICEP) := TBDERMCONSPRO (NUINDICE) ;
            TBDERMCODO (NUINDICEP) := TBDERMCODOPRO (NUINDICE) ;
            TBDERMTIDO (NUINDICEP) := TBDERMTIDOPRO (NUINDICE) ;
            TBDERMNUFI (NUINDICEP) := TBDERMNUFIPRO (NUINDICE) ;
            TBDERMVABA (NUINDICEP) := TBDERMVABAPRO (NUINDICE) ;
            TBDERMPOIA (NUINDICEP) := TBDERMPOIAPRO (NUINDICE) ;
            TBDERMFILR (NUINDICEP) := TBDERMFILRPRO (NUINDICE) ;
            TBDERMFFLR (NUINDICEP) := TBDERMFFLRPRO (NUINDICE) ;
            TBDERMFLDE (NUINDICEP) := TBDERMFLDEPRO (NUINDICE) ;

            
            NUINDICE := TBDERMCONSPRO.NEXT (NUINDICE) ;
        
        END LOOP;

        
        LIMPIARDETRECARGOPROD ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END COMMITDETALLERECARGOPROD;


































PROCEDURE COMMITPRODUCT
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitProduct');

    
    COMMITCHRGPROD ;

    
    COMMITCONSUMPRO ;

    
    COMMITACUMFACTPRO ;

    
    COMMITBILLEDPACKPRO ;

    
    COMMITLIQRANKPROD ;
    
    
    COMMITTARIFFDATESPROD;

    
    COMMITDETALLERECARGOPROD;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END COMMITPRODUCT;



























PROCEDURE COMPLETECONSUMREC
(
    INURECINI IN NUMBER,
    INURECFIN IN NUMBER,
    INUCONSEC IN CONSSESU.COSSCONS%TYPE
)
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CompleteConsumRec');

    
    FOR IDX IN INURECINI .. INURECFIN LOOP
    
        
        TBCSMPCONSECNC (IDX) := INUCONSEC ;
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END COMPLETECONSUMREC;























PROCEDURE COMPLETECONSUMREC
(
    ITBIDXCONS  IN  TYTBIDXNUMBER,
    INUCONSEC   IN  CONSSESU.COSSCONS%TYPE
)
IS
    
    NUIDX       NUMBER;
    
    
    NUIDXCOSS   NUMBER;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.CompleteConsumRec');

    
    NUIDX := ITBIDXCONS.FIRST;

    
    WHILE (NUIDX IS NOT NULL) LOOP

        
        NUIDXCOSS := ITBIDXCONS(NUIDX);

        
        
        TBCSMPCONSECNC (NUIDXCOSS) := NVL(TBCOSSCONS(NUIDXCOSS), INUCONSEC);

        
        NUIDX := ITBIDXCONS.NEXT(NUIDX);
    END LOOP;


    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END COMPLETECONSUMREC;





































PROCEDURE GETAUTOMATICCONCEPTVALUE
(
    INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
    OSBSIGNO OUT CARGOS.CARGSIGN%TYPE,
    ONUVALOR OUT CARGOS.CARGVALO%TYPE,
    ONUUNIDADES OUT CARGOS.CARGUNID%TYPE
)
IS
    
    NUVALOR CARGOS.CARGVALO%TYPE ;
    NUUNID CARGOS.CARGUNID%TYPE ;
    SBSIGNO CARGOS.CARGSIGN%TYPE ;

BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetAutomaticConceptValue');

    
    NUVALOR := 0;
    NUUNID  := 0;
    SBSIGNO := NULL ;

    
    GETCHRGINFOFROMCACHE
    (
        INUCONCEPTO,
        PKBILLCONST.AUTOMATICO,
        SBSIGNO,
        NUVALOR,
        NUUNID
    ) ;

    
    OSBSIGNO := SBSIGNO ;
    ONUVALOR := NUVALOR ;
    ONUUNIDADES := NUUNID ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETAUTOMATICCONCEPTVALUE;















































PROCEDURE GETCACHEPERENABTORCV
(
    INUCICLOC IN CICLCONS.CICOCODI%TYPE,
    OTBPECSCONS OUT NOCOPY PKTBLPERICOSE.TYPECSCONS,
    OTBPECSCICO OUT NOCOPY PKTBLPERICOSE.TYPECSCICO,
    OTBPECSPEFA OUT NOCOPY PKTBLPERIFACT.TYPEFACODI,
    OTBPECSFECI OUT NOCOPY PKTBLPERICOSE.TYPECSFECI,
    OTBPECSFECF OUT NOCOPY PKTBLPERICOSE.TYPECSFECF,
    ISBTIPOCOBR IN  SERVICIO.SERVTICO%TYPE DEFAULT 'V'
)
IS
    NUNUMPER  NUMBER ;
    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
        NUSERVICIO SERVICIO.SERVCODI%TYPE ;
        RCSERVICIO SERVICIO%ROWTYPE ;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetCachePerEnabToRcv.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        
        PKINSTANCEDATAMGR.GETCG_SERVICE (NUSERVICIO) ;

        
        PKSERVICEMGR.GETRECORD (NUSERVICIO, RCSERVICIO) ;
        NUNUMPER := NVL( RCSERVICIO.SERVNPRC, 0 ) + 1 ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
     END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetCachePerEnabToRcv');

    OTBPECSCONS.DELETE ;
    OTBPECSCICO.DELETE ;
    OTBPECSPEFA.DELETE ;
    OTBPECSFECI.DELETE ;
    OTBPECSFECF.DELETE ;

    
    GETINSTANCEDATA ;

    
    PKBCPERICOSE.GETCACHEPERENABTORCV
    (
        INUCICLOC,
        RCPERIODO.PEFACODI,
        NUNUMPER,
        OTBPECSCONS,
        OTBPECSCICO,
        OTBPECSPEFA,
        OTBPECSFECI,
        OTBPECSFECF,
        ISBTIPOCOBR
    ) ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCACHEPERENABTORCV;







































PROCEDURE GETCHRGINFOBYPERIOD
(
    INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
    IBLCURRPERIOD IN BOOLEAN,
    OSBSIGNO OUT CARGOS.CARGSIGN%TYPE,
    ONUVALOR OUT CARGOS.CARGVALO%TYPE,
    ONUUNIDADES OUT CARGOS.CARGUNID%TYPE
)
IS
    
    NUIDX NUMBER ;

    
    NUVALOR CARGOS.CARGVALO%TYPE ;
    NUUNID CARGOS.CARGUNID%TYPE ;
    SBSIGNO CARGOS.CARGSIGN%TYPE ;

    NUSIGNO NUMBER ;

    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgInfoByPeriod.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgInfoByPeriod');

    
    GETINSTANCEDATA ;

    
    NUVALOR := 0;
    NUUNID := 0;
    SBSIGNO := NULL ;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (IBLCURRPERIOD) THEN
        
            
            IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
                TBMEMCARGPEFA (NUIDX) = RCPERIODO.PEFACODI)
            THEN
            
                
                NUSIGNO := 1;

                
                IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
                    NUSIGNO := -1;
                END IF;

                
                NUVALOR := NUVALOR + (TBMEMCARGVALO (NUIDX) * NUSIGNO);
                NUUNID := NUUNID + (TBMEMCARGUNID (NUIDX) * NUSIGNO);
            
            END IF;
        
        ELSE
        
            
            IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
                TBMEMCARGPEFA (NUIDX) != RCPERIODO.PEFACODI)
            THEN
            
                
                NUSIGNO := 1;

                
                IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
                    NUSIGNO := -1;
                END IF;

                
                NUVALOR := NUVALOR + (TBMEMCARGVALO (NUIDX) * NUSIGNO);
                NUUNID := NUUNID + (TBMEMCARGUNID (NUIDX) * NUSIGNO);
            
            END IF;
        
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    
    IF (NUVALOR >= 0) THEN
        SBSIGNO := PKBILLCONST.DEBITO ;
    ELSE
        SBSIGNO := PKBILLCONST.CREDITO ;

        NUVALOR := ABS (NUVALOR) ;
        NUUNID := ABS (NUUNID) ;
    END IF;

    
    OSBSIGNO := SBSIGNO ;
    ONUVALOR := NUVALOR ;
    ONUUNIDADES := NUUNID ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCHRGINFOBYPERIOD;







































PROCEDURE GETCHRGINFOFROMCACHE
(
    INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
    ISBTIPOPROC IN CARGOS.CARGTIPR%TYPE,
    OSBSIGNO    OUT CARGOS.CARGSIGN%TYPE,
    ONUVALOR    OUT CARGOS.CARGVALO%TYPE,
    ONUUNIDADES OUT CARGOS.CARGUNID%TYPE
)
IS
    
    NUIDX NUMBER ;

    
    NUVALOR CARGOS.CARGVALO%TYPE ;
    NUUNID  CARGOS.CARGUNID%TYPE ;
    SBSIGNO CARGOS.CARGSIGN%TYPE ;

    NUSIGNO NUMBER ;

    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgInfoFromCache.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgInfoFromCache');

    
    GETINSTANCEDATA ;

    
    NUVALOR := 0;
    NUUNID := 0;
    SBSIGNO := NULL ;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
            TBMEMCARGTIPR (NUIDX) = ISBTIPOPROC AND
            TBMEMCARGPEFA (NUIDX) = RCPERIODO.PEFACODI)
        THEN
        
            
            NUSIGNO := 1;

            
            IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
                NUSIGNO := -1;
            END IF;

            
            NUVALOR := NUVALOR + (TBMEMCARGVALO (NUIDX) * NUSIGNO);
            NUUNID := NUUNID + (TBMEMCARGUNID (NUIDX) * NUSIGNO);
        
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    
    IF (NUVALOR >= 0) THEN
        SBSIGNO := PKBILLCONST.DEBITO ;
    ELSE
        SBSIGNO := PKBILLCONST.CREDITO ;

        NUVALOR := ABS (NUVALOR) ;
        NUUNID := ABS (NUUNID) ;
    END IF;

    
    OSBSIGNO := SBSIGNO ;
    ONUVALOR := NUVALOR ;
    ONUUNIDADES := NUUNID ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCHRGINFOFROMCACHE;











































PROCEDURE GETCHRGINFOBYDOC
(
    INUCONCEPTO	IN	CARGOS.CARGCONC%TYPE,
    ISBTIPOPROC	IN	CARGOS.CARGTIPR%TYPE,
	ISBDOCSOP	IN	CARGOS.CARGDOSO%TYPE,
	OSBSIGNO	OUT	CARGOS.CARGSIGN%TYPE,
	ONUVALOR	OUT	CARGOS.CARGVALO%TYPE,
	ONUUNIDADES	OUT	CARGOS.CARGUNID%TYPE,
	ONUPERIODOF	OUT	PERIFACT.PEFACODI%TYPE,
	ONUCONSECUT	OUT	CARGOS.CARGCODO%TYPE,
	ONUTIPOCONS	OUT	TIPOCONS.TCONCODI%TYPE,
	ONUPERIODOC	OUT	PERICOSE.PECSCONS%TYPE,
	ONUFLAGMEMO	OUT	VARCHAR2
)
IS
    
    NUIDX NUMBER ;

    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgInfoByDoc.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgInfoByDoc');

    
    GETINSTANCEDATA ;

    
    OSBSIGNO	:= NULL;
    ONUVALOR	:= 0;
    ONUUNIDADES	:= NULL;
    ONUPERIODOF	:= NULL;
    ONUCONSECUT	:= NULL;
    ONUTIPOCONS	:= NULL;
    ONUPERIODOC	:= NULL;
    ONUFLAGMEMO	:= NULL;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
            TBMEMCARGTIPR (NUIDX) = ISBTIPOPROC AND
            TBMEMCARGDOSO (NUIDX) = ISBDOCSOP   AND
            TBMEMCARGPEFA (NUIDX) = RCPERIODO.PEFACODI)
        THEN
        
            
    	    OSBSIGNO	:= TBMEMCARGSIGN (NUIDX) ;
    	    ONUVALOR	:= TBMEMCARGVALO (NUIDX) ;
    	    ONUUNIDADES	:= TBMEMCARGUNID (NUIDX) ;
    	    ONUPERIODOF	:= TBMEMCARGPEFA (NUIDX) ;
    	    ONUCONSECUT	:= TBMEMCARGCODO (NUIDX) ;
    	    ONUTIPOCONS	:= TBMEMCARGTICO (NUIDX) ;
    	    ONUPERIODOC	:= TBMEMCARGPECO (NUIDX) ;
    	    ONUFLAGMEMO	:= TBMEMCARGMEMO (NUIDX) ;

    	    
	        EXIT ;
        
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCHRGINFOBYDOC;











































PROCEDURE GETCHRGARRBYCONC
(
    INUCONCEPTO	IN		        CARGOS.CARGCONC%TYPE,
	OTBCARGNUSE	IN OUT NOCOPY	PKTBLCARGOS.TYCARGNUSE,
	OTBCARGSIGN	IN OUT NOCOPY	PKTBLCARGOS.TYCARGSIGN,
	OTBCARGDOSO	IN OUT NOCOPY	PKTBLCARGOS.TYCARGDOSO,
	OTBCARGVALO	IN OUT NOCOPY	PKTBLCARGOS.TYCARGVALO,
	OTBCARGUNID	IN OUT NOCOPY	PKTBLCARGOS.TYCARGUNID,
	OTBCARGTIPR	IN OUT NOCOPY	PKTBLCARGOS.TYCARGTIPR,
	OTBCARGPEFA	IN OUT NOCOPY	PKTBLCARGOS.TYCARGPEFA,
	OTBCARGCODO	IN OUT NOCOPY	PKTBLCARGOS.TYCARGCODO,
	OTBCARGTICO	IN OUT NOCOPY	PKTBLTIPOCONS.TYTCONCODI,
	OTBCARGPECO	IN OUT NOCOPY	PKTBLPERICOSE.TYPECSCONS,
	OTBCARGMEMO	IN OUT NOCOPY	PKBCCARGOS.TYTBCARGFLFA
)
IS
    
    NUIDX NUMBER ;

    NUIDXNEW	NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgArrByConc');

    
    OTBCARGNUSE.DELETE ;
    OTBCARGSIGN.DELETE ;
    OTBCARGDOSO.DELETE ;
    OTBCARGVALO.DELETE ;
    OTBCARGUNID.DELETE ;
    OTBCARGTIPR.DELETE ;
    OTBCARGPEFA.DELETE ;
    OTBCARGCODO.DELETE ;
    OTBCARGTICO.DELETE ;
    OTBCARGPECO.DELETE ;
    OTBCARGMEMO.DELETE ;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO) THEN
        
    	    
	        NUIDXNEW := NVL (OTBCARGNUSE.LAST,0) + 1;

            
    	    OTBCARGNUSE (NUIDXNEW) := TBMEMCARGNUSE (NUIDX) ;
    	    OTBCARGSIGN (NUIDXNEW) := TBMEMCARGSIGN (NUIDX) ;
    	    OTBCARGDOSO (NUIDXNEW) := TBMEMCARGDOSO (NUIDX) ;
    	    OTBCARGVALO	(NUIDXNEW) := TBMEMCARGVALO (NUIDX) ;
            OTBCARGUNID (NUIDXNEW) := TBMEMCARGUNID (NUIDX) ;
    	    OTBCARGTIPR (NUIDXNEW) := TBMEMCARGTIPR (NUIDX) ;
    	    OTBCARGPEFA (NUIDXNEW) := TBMEMCARGPEFA (NUIDX) ;
    	    OTBCARGCODO	(NUIDXNEW) := TBMEMCARGCODO (NUIDX) ;
    	    OTBCARGTICO	(NUIDXNEW) := TBMEMCARGTICO (NUIDX) ;
    	    OTBCARGPECO (NUIDXNEW) := TBMEMCARGPECO (NUIDX) ;
    	    OTBCARGMEMO	(NUIDXNEW) := TBMEMCARGMEMO (NUIDX) ;
        
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCHRGARRBYCONC;





































PROCEDURE GETCHRGTOLIQFROMCACHE
(
    INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
    OSBSIGNO    OUT CARGOS.CARGSIGN%TYPE,
    ONUVALOR    OUT CARGOS.CARGVALO%TYPE,
    ONUUNIDADES OUT CARGOS.CARGUNID%TYPE
)
IS
    
    NUIDX NUMBER ;

    
    NUVALOR CARGOS.CARGVALO%TYPE ;
    NUUNID CARGOS.CARGUNID%TYPE ;
    SBSIGNO CARGOS.CARGSIGN%TYPE ;

    NUSIGNO NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgToLiqFromCache');

    
    NUVALOR := 0;
    NUUNID := 0;
    SBSIGNO := NULL ;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO) THEN
        
            
            NUSIGNO := 1;

            
            IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
                NUSIGNO := -1;
            END IF;

            
            NUVALOR := NUVALOR + (TBMEMCARGVALO (NUIDX) * NUSIGNO);
            NUUNID := NUUNID + (TBMEMCARGUNID (NUIDX) * NUSIGNO);
        
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    
    IF (NUVALOR >= 0) THEN
        SBSIGNO := PKBILLCONST.DEBITO ;
    ELSE
        SBSIGNO := PKBILLCONST.CREDITO ;

        NUVALOR := ABS (NUVALOR) ;
        NUUNID := ABS (NUUNID) ;
    END IF;

    
    OSBSIGNO := SBSIGNO ;
    ONUVALOR := NUVALOR ;
    ONUUNIDADES := NUUNID ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCHRGTOLIQFROMCACHE;





































PROCEDURE GETBILLEDVALBYPRODUCT
(
    ONUVALOR	OUT	CARGOS.CARGVALO%TYPE
)
IS
    
    NUIDX	NUMBER ;

    NUSIGNO	NUMBER ;

    
    NUVALOR	CARGOS.CARGVALO%TYPE;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetBilledValByProduct');

    
    NUVALOR  := 0;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

    	
    	NUSIGNO := 1;

    	
    	IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
    	    NUSIGNO := -1;
    	END IF;

    	
    	NUVALOR  := NUVALOR  + (TBMEMCARGVALO (NUIDX) * NUSIGNO);

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    
    ONUVALOR := NUVALOR ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETBILLEDVALBYPRODUCT;































PROCEDURE GETCONSBYCONSEC
(
	IOTBCONSCARG    IN	PKTBLCARGOS.TYCARGCODO,
    OTBCONSXPERI	OUT TYTBCONSXPERIODO
)
IS
    
    NUCICLCONS  SERVSUSC.SESUCICO%TYPE ;

    
    NUMULTIFAM  SERVSUSC.SESUMULT%TYPE ;

    
    RCSERVSUSC  SERVSUSC%ROWTYPE ;

    
    NUPERICONSCURR PERICOSE.PECSCONS%TYPE ;
    NUPECOCURR  PERICOSE.PECSCONS%TYPE ;

    
    RCPERIODO   PERIFACT%ROWTYPE ;

    
    NUIDXCONS   NUMBER ;

    
    NUIDX       NUMBER ;

    
    SBINDPERI   VARCHAR2(200) ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsByConsec.gid');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCSERVSUSC) ;

        NUCICLCONS := RCSERVSUSC.SESUCICO ;
        NUMULTIFAM := RCSERVSUSC.SESUMULT ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsByConsec');

    
    GETINSTANCEDATA ;

    OTBCONSXPERI.DELETE ;

    
    PKBCCONSSESU.GETRECSBYCONSEC
	(
	    IOTBCONSCARG,
	    TBCOSSROWID,
	    TBCOSSTCON,
	    TBCOSSPEFA,
	    TBCOSSPECS,
	    TBCOSSCOCA,
	    TBCOSSCMSS,
	    TBCOSSELME,
	    TBCOSSFERE
	) ;

    
    
    
    NUIDX := TBCOSSTCON.FIRST ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;

        
        
        IF (TBPERICONSCURR.EXISTS (NUCICLCONS)) THEN
            
            NUPERICONSCURR := TBPERICONSCURR (NUCICLCONS) ;
        ELSE
            
            PKBCPERICOSE.GETCURRPERBYCONSCYCLE
            (
                NUCICLCONS,
                RCPERIODO.PEFACODI,
                NUPERICONSCURR
            ) ;

            
            TBPERICONSCURR (NUCICLCONS) := NUPERICONSCURR ;
        END IF;

        
        SBINDPERI := TO_CHAR (TBCOSSPEFA (NUIDX), 'FM000009') ||
                     TO_CHAR (TBCOSSPECS (NUIDX), 'FM000000000000009');

        
        IF (OTBCONSXPERI.EXISTS (SBINDPERI)) THEN
        
            
            OTBCONSXPERI (SBINDPERI).NUCONSUMO :=
                OTBCONSXPERI (SBINDPERI).NUCONSUMO +
                (TBCOSSCOCA (NUIDX) / NUMULTIFAM) ;
            OTBCONSXPERI (SBINDPERI).NURECFIN := NUIDXCONS ;
        
        ELSE
        
            
            OTBCONSXPERI (SBINDPERI).NUPERIODOC := TBCOSSPECS (NUIDX) ;
            OTBCONSXPERI (SBINDPERI).NUPERIODOF := TBCOSSPEFA (NUIDX) ;
            OTBCONSXPERI (SBINDPERI).NUCONSUMO :=
                TBCOSSCOCA (NUIDX) / NUMULTIFAM ;
            OTBCONSXPERI (SBINDPERI).NURECINI := NUIDXCONS ;
            OTBCONSXPERI (SBINDPERI).NURECFIN := NUIDXCONS ;

            
            IF (TBCOSSPEFA (NUIDX) = RCPERIODO.PEFACODI) THEN
            
                
                IF (TBCOSSPECS (NUIDX) = NUPERICONSCURR) THEN
                    OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'S';
                ELSE
                    OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'N';
                END IF ;

            
            ELSE
            
                
                
                
                
                
                
                
                
                PKBCPERICOSE.GETCURRPERBYCONSCYCLE
                (
                    NUCICLCONS,
                    TBCOSSPEFA (NUIDX),
                    NUPECOCURR
                ) ;

                
                
                IF (TBCOSSPECS (NUIDX) = NUPECOCURR) THEN
                    OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'S';
                ELSE
                    OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'N';
                END IF;
            
            END IF ;
        
        END IF;

        
        TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWID (NUIDX) ;
        TBCSMPCONSECNC (NUIDXCONS) := NULL ;

        <<PROXIMO>>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETCONSBYCONSEC;






























































PROCEDURE GETCONINFBYTYPEANDPERIOD
(
    INUTIPOCONS	IN	CONSSESU.COSSTCON%TYPE,
    OTBCONSXPERI	OUT	TYTBCONSXPERIODO,
	IBLCAMBIAEST	IN	BOOLEAN DEFAULT TRUE,
	INUBASECONCEPT	IN	NUMBER DEFAULT NULL
)
IS
    
    NUCICLCONS SERVSUSC.SESUCICO%TYPE ;

    
    NUMULTIFAM SERVSUSC.SESUMULT%TYPE ;

    
    RCSERVSUSC SERVSUSC%ROWTYPE ;

    
    NUPERICONSCURR PERICOSE.PECSCONS%TYPE ;
    NUPECOCURR PERICOSE.PECSCONS%TYPE ;

    
    RCPERIODO PERIFACT%ROWTYPE ;
    
    
    RCPERICOSE  PERICOSE%ROWTYPE;

    
    SBINDPERI VARCHAR2(200) ;

    
    NUIDXCONS NUMBER ;

    
    NUIDX NUMBER ;
    
    
    DTMAXPECO   DATE;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConInfByTypeAndPeriod.gid');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCSERVSUSC) ;

        NUCICLCONS := RCSERVSUSC.SESUCICO ;
        NUMULTIFAM := RCSERVSUSC.SESUMULT ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConInfByTypeAndPeriod 1');

    
    GETINSTANCEDATA ;

    OTBCONSXPERI.DELETE ;

    
    
    IF (NOT FBLCONSUMPTIONINCACHE) THEN
        
        LOADPRODUCTCONSUMPTION (INUBASECONCEPT) ;
    END IF;
    
    
    
    
    NUIDX := TBCOSSTCON.FIRST ;
    
    
    
    IF NUIDX IS NOT NULL THEN
        PKBCPERICOSE.GETCACHERECORD(TBCOSSPECS(NUIDX),RCPERICOSE);
        DTMAXPECO := RCPERICOSE.PECSFECI;
        
        TBPERICONSCURR (NUCICLCONS) := TBCOSSPECS(NUIDX) ;
    END IF;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        IF (TBCOSSTCON (NUIDX) != INUTIPOCONS) THEN
            GOTO PROXIMO ;
        END IF;

        PKBCPERICOSE.GETCACHERECORD(TBCOSSPECS(NUIDX),RCPERICOSE);
        
        IF ( RCPERICOSE.PECSFECI > DTMAXPECO ) THEN
            DTMAXPECO := RCPERICOSE.PECSFECI;
            
            TBPERICONSCURR (NUCICLCONS) := TBCOSSPECS(NUIDX);

        END IF;
        
        <<PROXIMO>>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;
    
    

    
    
    NUIDX := TBCOSSTCON.FIRST ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        IF (TBCOSSTCON (NUIDX) != INUTIPOCONS) THEN
            GOTO PROXIMO ;
        END IF;

        
        NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;

        
        
        IF ( FBLVALIDATEPERIOD( RCPERIODO, TBCOSSPEFA (NUIDX) ) ) THEN
        
            
            SBINDPERI := TO_CHAR (TBCOSSPEFA (NUIDX), 'FM000009') ||
                         TO_CHAR (TBCOSSPECS (NUIDX), 'FM000000000000009');

            
            IF (OTBCONSXPERI.EXISTS (SBINDPERI)) THEN
            
                
                OTBCONSXPERI (SBINDPERI).NUCONSUMO :=
                    OTBCONSXPERI (SBINDPERI).NUCONSUMO +
                    (TBCOSSCOCA (NUIDX) / NUMULTIFAM) ;
                OTBCONSXPERI (SBINDPERI).NURECFIN := NUIDXCONS ;
            
            ELSE
            
                
                OTBCONSXPERI (SBINDPERI).NUPERIODOC := TBCOSSPECS (NUIDX) ;
                OTBCONSXPERI (SBINDPERI).NUPERIODOF := TBCOSSPEFA (NUIDX) ;
                OTBCONSXPERI (SBINDPERI).NUCONSUMO :=
                    TBCOSSCOCA (NUIDX) / NUMULTIFAM ;
                OTBCONSXPERI (SBINDPERI).NURECINI := NUIDXCONS ;
                OTBCONSXPERI (SBINDPERI).NURECFIN := NUIDXCONS ;

                
                IF (TBCOSSPECS (NUIDX) = TBPERICONSCURR (NUCICLCONS)) THEN
                    OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'S';
                ELSE
                    OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'N';
                END IF ;

            
            END IF;

        	
        	
        	IF (IBLCAMBIAEST) THEN
        	    
        	    TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWID (NUIDX) ;
        	    TBCSMPCONSECNC (NUIDXCONS) := NULL ;
        	END IF;
        
        END IF;

        <<PROXIMO>>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETCONINFBYTYPEANDPERIOD;



































PROCEDURE GETCONSUMINFOBYTYPE
(
    INUTIPOCONS	IN	CONSSESU.COSSTCON%TYPE,
    OTBCONSXPERI	OUT	TYTBCONSXPERIODO,
	IBLCAMBIAEST	IN	BOOLEAN DEFAULT TRUE
)
IS
    
    NUIDXCONS NUMBER ;

    
    NUIDX NUMBER ;

    
    NUITERA	NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsumInfoByType');

    
    
    IF (NOT FBLCONSUMPTIONINCACHE) THEN
        
        LOADPRODUCTCONSUMPTION ;
    END IF;

    
    
    NUIDX := TBCOSSTCON.FIRST ;

    
    NUITERA := 1 ;

    LOOP
    
        EXIT WHEN NUIDX IS NULL ;

        
        IF (NOT TBCOSSTCON (NUIDX) = INUTIPOCONS) THEN
            GOTO PROXIMO ;
        END IF;

    	
    	NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;

    	
    	IF (NUITERA = 1) THEN
    	    OTBCONSXPERI (1).NURECINI := NUIDXCONS ;
    	    OTBCONSXPERI (1).NURECFIN := NUIDXCONS ;
    	    OTBCONSXPERI (1).NUCONSUMO := TBCOSSCOCA (NUIDX) ;
    	ELSE
    	    
    	    OTBCONSXPERI (1).NUCONSUMO :=
    		OTBCONSXPERI (1).NUCONSUMO + TBCOSSCOCA (NUIDX) ;
    	    OTBCONSXPERI (1).NURECFIN := NUIDXCONS ;
    	END IF;

    	NUITERA := NUITERA + 1 ;

    	
    	
    	IF (IBLCAMBIAEST) THEN
    	    
    	    TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWID (NUIDX) ;
    	    TBCSMPCONSECNC (NUIDXCONS) := NULL ;
    	END IF;

        << PROXIMO >>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETCONSUMINFOBYTYPE;






































PROCEDURE GETPREVPERCHRGINFOFROMCACHE
(
    INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
    ISBTIPOPROC IN CARGOS.CARGTIPR%TYPE,
    OSBSIGNO    OUT CARGOS.CARGSIGN%TYPE,
    ONUVALOR    OUT CARGOS.CARGVALO%TYPE,
    ONUUNIDADES OUT CARGOS.CARGUNID%TYPE
)
IS
    
    NUIDX NUMBER ;

    
    NUVALOR CARGOS.CARGVALO%TYPE ;
    NUUNID CARGOS.CARGUNID%TYPE ;
    SBSIGNO CARGOS.CARGSIGN%TYPE ;

    NUSIGNO NUMBER ;

    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetPrevPerChrgInfoFromCache.GID');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetPrevPerChrgInfoFromCache');

    
    GETINSTANCEDATA ;

    
    NUVALOR := 0;
    NUUNID := 0;
    SBSIGNO := NULL ;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
            TBMEMCARGTIPR (NUIDX) = ISBTIPOPROC AND
            TBMEMCARGPEFA (NUIDX) != RCPERIODO.PEFACODI)
        THEN
        
            
            NUSIGNO := 1;

            
            IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
                NUSIGNO := -1;
            END IF;

            
            NUVALOR := NUVALOR + (TBMEMCARGVALO (NUIDX) * NUSIGNO);
            NUUNID := NUUNID + (TBMEMCARGUNID (NUIDX) * NUSIGNO);
        
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    
    IF (NUVALOR >= 0) THEN
        SBSIGNO := PKBILLCONST.DEBITO ;
    ELSE
        SBSIGNO := PKBILLCONST.CREDITO ;

        NUVALOR := ABS (NUVALOR) ;
        NUUNID := ABS (NUUNID) ;
    END IF;

    
    OSBSIGNO    := SBSIGNO ;
    ONUVALOR    := NUVALOR ;
    ONUUNIDADES := NUUNID ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETPREVPERCHRGINFOFROMCACHE;











































PROCEDURE GETRATEDCHRGARRAY
(
    OTBCARGOSGEN OUT NOCOPY TYTBLIQCHARGES
)
IS
    
    NUSIGNO NUMBER(1);

    
    NUIDX NUMBER;

    
    NUCONCEPTO CARGOS.CARGCONC%TYPE;
    
    NUSESUNUSE  SERVSUSC.SESUNUSE%TYPE;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetRatedChrgArray.GIData');

        
        PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUSESUNUSE) ;


        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;

BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetRatedChrgArray');

    
    GETINSTANCEDATA ;

    
    OTBCARGOSGEN.DELETE ;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGNUSE (NUIDX) != NUSESUNUSE ) THEN
            GOTO PROXIMO ;
        END IF;

        

        IF ( (INSTR('-'||TBMEMCARGDOSO(NUIDX)||'-','-'||PKBILLCONST.CSBTOKEN_DIFERIDO) > 0 OR
              INSTR('-'||TBMEMCARGDOSO(NUIDX)||'-','-'||PKBILLCONST.CSBTOKEN_CUOTA_EXTRA) > 0 OR
              INSTR('-'||TBMEMCARGDOSO(NUIDX)||'-','-'||PKBILLCONST.CSBTOKEN_FINANCIACION) > 0
             )
           ) THEN
            GOTO PROXIMO;
        END IF;

        
        NUCONCEPTO := TBMEMCARGCONC (NUIDX) ;

        
        NUSIGNO := 1;

        
        IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
            NUSIGNO := -1;
        END IF;

        
        IF (OTBCARGOSGEN.EXISTS (NUCONCEPTO)) THEN
            
            OTBCARGOSGEN (NUCONCEPTO).NUVALUE :=
            OTBCARGOSGEN (NUCONCEPTO).NUVALUE + (TBMEMCARGVALO(NUIDX)*NUSIGNO);
            OTBCARGOSGEN (NUCONCEPTO).NUBASEVAL :=
            OTBCARGOSGEN (NUCONCEPTO).NUBASEVAL + (TBMEMCARGVABL(NUIDX)*NUSIGNO);
        ELSE
            
            OTBCARGOSGEN (NUCONCEPTO).NUCONCEPT := NUCONCEPTO ;
            OTBCARGOSGEN (NUCONCEPTO).NUVALUE := TBMEMCARGVALO(NUIDX)*NUSIGNO;
            OTBCARGOSGEN (NUCONCEPTO).NUBASEVAL := TBMEMCARGVABL(NUIDX)*NUSIGNO;
        END IF;

        <<PROXIMO>>

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRATEDCHRGARRAY;






























PROCEDURE GETRATEDCHARGESARRAY
(
    INUPRODUCTO     IN  CARGOS.CARGNUSE%TYPE,
    INUCONCEPTO     IN  CARGOS.CARGCONC%TYPE,
    INUPERIFACT     IN  CARGOS.CARGPEFA%TYPE,
    INUPERICONS     IN  CARGOS.CARGPECO%TYPE,
    OTBCARGOSGEN    OUT NOCOPY PKBCCARGOS.TYTBRCCARGOS
)
IS
    
    NUIDX           NUMBER;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetRatedChargesArray');

    
    OTBCARGOSGEN.DELETE ;

    
    NUIDX := TBMEMCARGCONC.FIRST;
    TD('Cargos en memoria: '||TBMEMCARGCONC.COUNT);
    TD('[Producto][Concepto][PeriodoF][PeriodoC]');
    TD('Entra ['||INUPRODUCTO||']['||INUCONCEPTO||']['||
        INUPERIFACT||']['||INUPERICONS||']');
    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        TD('Mem ['||TBMEMCARGNUSE (NUIDX)||']['||
                    TBMEMCARGCONC (NUIDX)||']['||
                    TBMEMCARGPEFA (NUIDX)||']['||
                    TBMEMCARGPECO (NUIDX)||']');

        
        IF (TBMEMCARGNUSE (NUIDX) = INUPRODUCTO AND
            TBMEMCARGCONC (NUIDX) = NVL(INUCONCEPTO, TBMEMCARGCONC (NUIDX)) AND
            TBMEMCARGPEFA (NUIDX) = NVL(INUPERIFACT, TBMEMCARGPEFA (NUIDX)) AND
            TBMEMCARGPECO (NUIDX) = NVL(INUPERICONS, TBMEMCARGPECO (NUIDX)) )
            THEN

            
            OTBCARGOSGEN (NUIDX).CARGNUSE := TBMEMCARGNUSE(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGCONC := TBMEMCARGCONC(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGSIGN := TBMEMCARGSIGN(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGDOSO := TBMEMCARGDOSO(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGVALO := TBMEMCARGVALO(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGUNID := TBMEMCARGUNID(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGTIPR := TBMEMCARGTIPR(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGPEFA := TBMEMCARGPEFA(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGCODO := TBMEMCARGCODO(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGVABL := TBMEMCARGVABL(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGPECO := TBMEMCARGPECO(NUIDX);
            OTBCARGOSGEN (NUIDX).CARGTICO := TBMEMCARGTICO(NUIDX);
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRATEDCHARGESARRAY;







































PROCEDURE GETRATEDCHARGES
(
    OTBCARGOSGEN OUT NOCOPY TYTBLIQCHARGES
)
IS
    
    NUSIGNO NUMBER(1);

    
    NUIDX NUMBER;

    NUSESUNUSE  SERVSUSC.SESUNUSE%TYPE;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetRatedCharges.GIData');

        
        PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUSESUNUSE) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA;

BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetRatedCharges');

    
    GETINSTANCEDATA ;

    
    OTBCARGOSGEN.DELETE ;

    
    NUIDX := TBMEMCARGCONC.FIRST;
    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;
        
        
        IF (TBMEMCARGNUSE (NUIDX) = NUSESUNUSE) THEN

            
            NUSIGNO := 1;

            
            IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
                NUSIGNO := -1;
            END IF;

            
            OTBCARGOSGEN (NUIDX).NUCONCEPT := TBMEMCARGCONC(NUIDX);
            OTBCARGOSGEN (NUIDX).NUVALUE := TBMEMCARGVALO(NUIDX)*NUSIGNO;
            OTBCARGOSGEN (NUIDX).NUBASEVAL := TBMEMCARGVABL(NUIDX)*NUSIGNO;
            OTBCARGOSGEN (NUIDX).SBDOCUSOPO := TBMEMCARGDOSO(NUIDX);

        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETRATEDCHARGES;


























PROCEDURE GETUNITSFROMMEMORY
(
    INUCONCEPTO IN  CARGOS.CARGCONC%TYPE,
    INUNUMSERV  IN  CARGOS.CARGNUSE%TYPE,
    ONUUNIDADES OUT CARGOS.CARGUNID%TYPE
)
IS
    
    NUIDX NUMBER ;

    
    NUUNID CARGOS.CARGUNID%TYPE ;
    RCPERIODO PERIFACT%ROWTYPE ;

    NUSIGNO NUMBER ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetUnitsFromMemory.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetUnitsFromMemory');

    
    GETINSTANCEDATA ;

    
    NUUNID := 0;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
            TBMEMCARGTIPR (NUIDX) = PKBILLCONST.AUTOMATICO AND
            TBMEMCARGPEFA (NUIDX) = RCPERIODO.PEFACODI)
        THEN
        
            
            NUSIGNO := 1;

            
            IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
                NUSIGNO := -1;
            END IF;

            
            NUUNID := NUUNID + (TBMEMCARGUNID (NUIDX) * NUSIGNO);
        
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    
    ONUUNIDADES := NUUNID ;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETUNITSFROMMEMORY;
































PROCEDURE GETVALUESFROMMEMORY
(
    INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
    INUNUMSERV  IN CARGOS.CARGNUSE%TYPE,
    ONUVALOR    OUT CARGOS.CARGVALO%TYPE
)
IS
    
    NUIDX NUMBER ;

    
    NUVALOR CARGOS.CARGVALO%TYPE ;
    RCPERIODO PERIFACT%ROWTYPE ;

    NUSIGNO NUMBER ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetValuesFromMemory.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetValuesFromMemory');

    
    GETINSTANCEDATA ;

    
    NUVALOR := 0;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
            TBMEMCARGTIPR (NUIDX) = PKBILLCONST.AUTOMATICO AND
            TBMEMCARGPEFA (NUIDX) = RCPERIODO.PEFACODI)
        THEN
        
            
            NUSIGNO := 1;

            
            IF (TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO) THEN
                NUSIGNO := -1;
            END IF;

            
            NUVALOR := NUVALOR + (TBMEMCARGVALO (NUIDX) * NUSIGNO);
        
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    
    ONUVALOR := NUVALOR ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETVALUESFROMMEMORY;






























































PROCEDURE LOADCHRGSMEMFROMDB
(
   IBOFILTERBYDATEBILLPERIOD  IN  BOOLEAN DEFAULT TRUE
)
IS
    RCPRODUCTO SERVSUSC%ROWTYPE ;
    RCPERIODO  PERIFACT%ROWTYPE ;
    DTDATE     DATE;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadChrgsMemFromDB.gid');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCPRODUCTO) ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;

    FUNCTION FBLCONSUMCHARGE
    (
        ISBDOCU IN CARGOS.CARGDOSO%TYPE
    ) RETURN BOOLEAN IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LdChrgsMemFromDB.fblCnsmChrg');

        
        
        
        IF ( ( SUBSTR (ISBDOCU,1,3) = CSBTOKEN_PERIODO_CURR ) AND
           ( ( SUBSTR (ISBDOCU, 11, 3) = CSBTOKEN_TIPOCONS  ) OR
           ( SUBSTR (ISBDOCU, 14, 3) = CSBTOKEN_TIPOCONS  ) ) )
        THEN
            PKERRORS.POP ;
            RETURN (TRUE) ;
        END IF;
        PKERRORS.POP ;
        RETURN (FALSE) ;
    
    END FBLCONSUMCHARGE ;

    PROCEDURE COMPLETEINFO
    IS
        
        NUIDX NUMBER ;

        
        SBDOCUMENTO CARGOS.CARGDOSO%TYPE ;

        
        NUANO PERIFACT.PEFAANO%TYPE;
        NUMES PERIFACT.PEFAMES%TYPE;

        NUFROM  NUMBER ;

        
        NUPEFA PERIFACT.PEFACODI%TYPE ;

        
        NUPECO PERICOSE.PECSCONS%TYPE ;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LdChrgsMemFromDB.CompleteInfo');

        
        
        NUIDX := TBMEMCARGCONC.FIRST ;

        LOOP
        
            
            EXIT WHEN NUIDX IS NULL ;

            
            SBDOCUMENTO := TBMEMCARGDOSO (NUIDX) ;

            
            
            IF (FBLCONSUMCHARGE (SBDOCUMENTO)) THEN
            
                
                IF (INSTR (SBDOCUMENTO, PKBILLCONST.CSBTOKEN_PERIODO_RECUP)>0)
                THEN
                    
                    NUFROM := INSTR
                              (SBDOCUMENTO, PKBILLCONST.CSBTOKEN_PERIODO_RECUP);
                ELSE
                    
                    NUFROM := INSTR
                              (SBDOCUMENTO, PKBILLCONST.CSBTOKEN_CONSUMO);
                END IF;

                
                NUANO := SUBSTR (SBDOCUMENTO,NUFROM+3,4) ;
                NUMES := SUBSTR (SBDOCUMENTO,NUFROM+7,2) ;

                
                PKBCPERIFACT.GETCACHEPERIODBYDATE
                (
                    RCPRODUCTO.SESUCICL,
                    NUANO,
                    NUMES,
                    NUPEFA
                ) ;

                
                PKBCPERICOSE.GETCACHECONSPERBYBILLPER
                (
                    RCPRODUCTO.SESUCICO,
                    NUPEFA,
                    NUPECO
                ) ;

                
                TBMEMCARGPECO (NUIDX) := NUPECO ;

                
                TBMEMCARGTICO (NUIDX) := SUBSTR (SBDOCUMENTO,
		                 INSTR(SBDOCUMENTO,CSBTOKEN_TIPOCONS)+3,4);
            
            ELSE
                TBMEMCARGTICO (NUIDX) := NULL ;
            END IF;

            
            TBMEMCARGMEMO (NUIDX) := 'N' ;

            
            NUIDX := TBMEMCARGCONC.NEXT (NUIDX) ;
        
        END LOOP;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END COMPLETEINFO ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadChrgsMemFromDB');

    
    GETINSTANCEDATA ;

    
    IF IBOFILTERBYDATEBILLPERIOD THEN
       DTDATE := RCPERIODO.PEFAFFMO;
    ELSE
       DTDATE := UT_DATE.FDTMAXDATE;
    END IF;

    
    PKBCCARGOS.GETNOTBILLEDCHRGSINDB
    (
        RCPRODUCTO.SESUNUSE,
        DTDATE,
        TBMEMCARGCONC,
        TBMEMCARGNUSE,
        TBMEMCARGSIGN,
        TBMEMCARGDOSO,
        TBMEMCARGUNID,
        TBMEMCARGVALO,
        TBMEMCARGTIPR,
        TBMEMCARGPEFA,
        TBMEMCARGCODO,
        TBMEMCARGVABL,
        TBMEMCARGPECO,
        TBMEMCARGTACO,
        TBMEMCARGCACA,
        TBMEMCARGFECR,
        TBMEMCARGPROG
    ) ;

    
    
    COMPLETEINFO ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END LOADCHRGSMEMFROMDB;




























PROCEDURE ROLLBACKCHRGCNCMEM
IS
    NUIDX NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.RollbackChrgCncMem');

    
    NUIDX := TBCARGCONCCNC.FIRST ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        DELGENCHRGSRECORDS (TBCARGCONCCNC (NUIDX), TBCARGDOSOCNC (NUIDX)) ;

        
        NUIDX := TBCARGCONCCNC.NEXT (NUIDX) ;
    
    END LOOP

    
    CLEARCHRGCONCMEM ;
    
    
    CLEARPOINTSCONCMEM;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ROLLBACKCHRGCNCMEM;




























PROCEDURE ROLLBACKCHRGPROMEM
IS
    NUIDX NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.RollbackChrgProMem');

    
    CLEARGENERATEDCHRGSARR ;

    
    CLEARCHRGPRODUCTMEM ;
    
    
    CLEARPOINTSPRODUCTMEM;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ROLLBACKCHRGPROMEM;








































PROCEDURE ROLLBACKCONCEPT
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.RollbackConcept');

    
    CLEARLIQRANKCONCMEM ;
    
    
    CLEARTARIFFDATESCNCMEM;

    
    CLEARCSMPCNCMEM ;

    
    CLEARACUMFACTCNCMEM ;

    
    CLEARBILLEDPACKCNCMEM;

    
    LIMPIARDETRECARGOCONC;

    
    ROLLBACKCHRGCNCMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ROLLBACKCONCEPT;








































PROCEDURE ROLLBACKPRODUCT
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.RollbackProduct');

    
    CLEARLIQRANKPRODMEM ;
    
    
    CLEARTARIFFDATESPROMEM;

    
    CLEARCSMPPROMEM ;
    
    
    CLEARACUMFACTPROMEM;
    
    
    CLEARBILLEDPACKPROMEM;

    
    LIMPIARDETRECARGOPROD ;

    
    ROLLBACKCHRGPROMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END ROLLBACKPRODUCT;















































PROCEDURE SYNCHCHARGES
IS

    
    PROCEDURE INSERTCHARGES
    IS
        
        NUIDX NUMBER ;
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchCharges.InsertCharges');
        
        
        IF (TBCARGNUSE.FIRST IS NULL) THEN
            PKERRORS.POP ;
            RETURN ;
        END IF;

        FORALL NUIDX IN TBCARGNUSE.FIRST..TBCARGNUSE.LAST
            INSERT INTO CARGOS
                (
                    CARGNUSE, CARGCONC, CARGCACA,
                    CARGSIGN, CARGVALO, CARGDOSO,
                    CARGCODO, CARGUNID, CARGCOLL,
                    CARGCUCO, CARGPEFA, CARGFECR,
                    CARGUSUA, CARGPROG, CARGTIPR,
            		CARGVABL, CARGPECO, CARGTICO,
                    CARGTACO
                )
            VALUES
                (
                    TBCARGNUSE (NUIDX), TBCARGCONC (NUIDX), TBCARGCACA (NUIDX),
                    TBCARGSIGN (NUIDX), TBCARGVALO (NUIDX), TBCARGDOSO (NUIDX),
                    TBCARGCODO (NUIDX), TBCARGUNID (NUIDX), TBCARGCOLL (NUIDX),
                    TBCARGCUCO (NUIDX), TBCARGPEFA (NUIDX), TBCARGFECR (NUIDX),
                    TBCARGUSUA (NUIDX), TBCARGPROG (NUIDX), TBCARGTIPR (NUIDX),
            		TBCARGVABL (NUIDX), TBCARGPECO (NUIDX), TBCARGTICO (NUIDX),
                    TBCARGTACO (NUIDX)
                ) ;

        
        CLEARCHRGARRDB ;


        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END INSERTCHARGES;

    
    PROCEDURE INSERTPOINTS
    IS
        
        NUIDX NUMBER ;

        
        NUCODE      FA_DETAPUPR.DEPPCONS%TYPE;
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchCharges.InsertPoints');

        
        IF (TBDEPPSESU.FIRST IS NULL) THEN
            PKERRORS.POP ;
            RETURN ;
        END IF;

        
        NUIDX := TBDEPPSESU.FIRST;
        
        LOOP
        
            EXIT WHEN NUIDX IS NULL;
            
            
            FA_BCPOINTSDETAILSERV.GENPRODPOINTSDETAILS
                           (TBDEPPACPC(NUIDX),
                            TBDEPPSESU(NUIDX),
                            TBDEPPPEFA(NUIDX),
                            TBDEPPCONC(NUIDX),
                            TBDEPPPUNT(NUIDX),
                            TBDEPPTIMO(NUIDX),
                            TBDEPPFEMO(NUIDX),
                            NULL,
                            TBDEPPPROG(NUIDX),
                            TBDEPPUSUA(NUIDX),
                            TBDEPPTERM(NUIDX),
                            NUCODE           );
                            
            
            NUIDX := TBDEPPSESU.NEXT(NUIDX);
            
        END LOOP;

        
        CLEARPOINTSARRDB;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
    	PKERRORS.POP;
    	RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END INSERTPOINTS;

BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchCharges');

    
    INSERTCHARGES;
    
    
    INSERTPOINTS;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END SYNCHCHARGES;

























PROCEDURE SYNCHCONSUMPTIONS
IS
    NUIDX NUMBER;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchConsumptions');

    
    IF (TBCSMPROWID.FIRST IS NULL) THEN
        PKERRORS.POP ;
        RETURN ;
    END IF;

    FORALL NUIDX IN TBCSMPROWID.FIRST..TBCSMPROWID.LAST
        UPDATE CONSSESU
        SET COSSFLLI = 'S',
               COSSCONS = TBCSMPCONSE (NUIDX)
        WHERE ROWID = TBCSMPROWID (NUIDX) ;

    
    CLEARCONSUMPTIONMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END SYNCHCONSUMPTIONS;

























PROCEDURE SYNCHINCOPRODS
IS
    NUIDX NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchIncoProds');

    
    
    IF (TBREINCOIN.FIRST IS NULL) THEN
        PKERRORS.POP ;
        RETURN ;
    END IF;

    FORALL NUIDX IN TBREINCOIN.FIRST..TBREINCOIN.LAST
        INSERT INTO REGIINCO
            (
                REINCOIN, REINIDPR, REINSUSC, REINSESU, REINPEFA, REINSERV,
                REINTIIN
            )
        VALUES
            (
                TBREINCOIN (NUIDX), TBREINIDPR (NUIDX), TBREINSUSC (NUIDX),
                TBREINSESU (NUIDX), TBREINPEFA (NUIDX), TBREINSERV (NUIDX),
                TBREINTIIN (NUIDX)
            ) ;

    
    CLEARINCOPRODMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END SYNCHINCOPRODS;





























PROCEDURE SYNCHINCORECTODEL
IS
    NUIDX NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchIncoRecToDel');

    
    
    IF (TBDELREINSESU.FIRST IS NULL) THEN
        PKERRORS.POP ;
        RETURN ;
    END IF;

    FORALL NUIDX IN TBDELREINSESU.FIRST..TBDELREINSESU.LAST
        DELETE REGIINCO
        WHERE REINPEFA = TBDELREINPEFA (NUIDX)
	    AND   REINSERV = TBDELREINSERV (NUIDX)
        AND   REINSESU = TBDELREINSESU (NUIDX) ;

    
    CLEARINCORECTODELMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END SYNCHINCORECTODEL;



























PROCEDURE SYNCHINCONSISTENCIES
IS
    NUIDX NUMBER ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchInconsistencies');

    
    
    IF (TBBIINCOIN.FIRST IS NULL) THEN
        PKERRORS.POP ;
        RETURN ;
    END IF;

    FORALL NUIDX IN TBBIINCOIN.FIRST..TBBIINCOIN.LAST
        INSERT INTO BITAINCO
            (
                BIINCOIN, BIINIDPR, BIINSUSC, BIINSESU, BIINCOMP, BIINCONC,
                BIINCAUS, BIINPEFA, BIINCICL, BIINSERV, BIINFECH, BIINUSUA,
                BIINTERM, BIINPROG
            )
        VALUES
            (
                TBBIINCOIN (NUIDX), TBBIINIDPR (NUIDX), TBBIINSUSC (NUIDX),
                TBBIINSESU (NUIDX), TBBIINCOMP (NUIDX), TBBIINCONC (NUIDX),
                TBBIINCAUS (NUIDX), TBBIINPEFA (NUIDX), TBBIINCICL (NUIDX),
                TBBIINSERV (NUIDX), TBBIINFECH (NUIDX), TBBIINUSUA (NUIDX),
                TBBIINTERM (NUIDX), TBBIINPROG (NUIDX)
            ) ;

    
    CLEARINCOMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END SYNCHINCONSISTENCIES;








































PROCEDURE SYNCHLIQRANKS
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchLiqRanks');

    
    PKBCRANGLIQU.GUARDARTABLA(TBRANGLIQU);

    
    CLEARLIQRANKMEM ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END SYNCHLIQRANKS;

    
























    PROCEDURE SYNCHTARIFFDATES
    IS
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.SynchTariffDates');
        TA_BOTARIFASLIQUIDADAS.GUARDARVIGENCIASLIQ( GTBVIGELIQU );
        CLEARTARIFFDATESMEM;
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);
    
    END SYNCHTARIFFDATES;


    


















    PROCEDURE SINCRDETALLERECARGO
    IS
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.SincrDetalleRecargo');

        
        IF (TBDERMCONS.FIRST IS NULL) THEN
        
            
            LIMPIARDETRECARGO;
            PKERRORS.POP;
            RETURN;
        
        END IF;

        FORALL NUINDICE IN TBDERMCONS.FIRST..TBDERMCONS.LAST
            INSERT INTO DETAREMO
                (
                    DERMCONS, DERMCODO , DERMTIDO,
                    DERMNUFI, DERMVABA , DERMPOIA,
                    DERMFILR, DERMFFLR , DERMFLDE
                )
            VALUES
                (
                    TBDERMCONS (NUINDICE), TBDERMCODO (NUINDICE), TBDERMTIDO (NUINDICE),
                    TBDERMNUFI (NUINDICE), TBDERMVABA (NUINDICE), TBDERMPOIA (NUINDICE),
                    TBDERMFILR (NUINDICE), TBDERMFFLR (NUINDICE), TBDERMFLDE (NUINDICE)
                ) ;

        
        LIMPIARDETRECARGO ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END SINCRDETALLERECARGO;



































PROCEDURE SYNCHRONIZE
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.Synchronize');

    
    SYNCHCHARGES ;

    
    SYNCHLIQRANKS ;
    
    
    SYNCHTARIFFDATES;
    
    
    SYNCHCONSUMPTIONS ;
    
    
    SYNCHACUMFACT ;

    
    SYNCHBILLEDPACK ;

    
    SINCRDETALLERECARGO;

    
    SYNCHINCONSISTENCIES ;

    
    SYNCHINCOPRODS ;

    
    SYNCHINCORECTODEL ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END SYNCHRONIZE;






























FUNCTION FBLCHRGFORCONCEPT
(
    INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
    ISBTIPOPROC IN CARGOS.CARGTIPR%TYPE
)
RETURN BOOLEAN
IS
    
    NUIDX NUMBER ;

    
    BLRETORNO BOOLEAN ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.fblChrgForConcept');

    
    BLRETORNO := FALSE;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
            TBMEMCARGTIPR (NUIDX) = ISBTIPOPROC )
        THEN
            
            BLRETORNO := TRUE;
            EXIT ;
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    PKERRORS.POP;
    RETURN (BLRETORNO) ;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FBLCHRGFORCONCEPT;








































FUNCTION FBLISCHRGGENERATED
(
    ISBTIPOPROC IN CARGOS.CARGTIPR%TYPE,
    INUCONCEPTO IN CARGOS.CARGCONC%TYPE,
    ISBDOCUSOPO IN CARGOS.CARGDOSO%TYPE,
    IBLPENOCURR IN BOOLEAN DEFAULT FALSE,
    IBOCONTINUA IN BOOLEAN DEFAULT FALSE
)
RETURN BOOLEAN
IS

    
    RCPERIODO PERIFACT%ROWTYPE ;

    
    BLFOUND BOOLEAN ;
    
    
    NUPEFACOMP  PERIFACT.PEFACODI%TYPE;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.fblIsChrgGenerated.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.fblIsChrgGenerated');

    
    GETINSTANCEDATA ;

    
    IF
        (NOT IBOCONTINUA) OR
        (GNUIDXMEM IS NULL)
    THEN
        GNUIDXMEM := TBMEMCARGCONC.FIRST;
    ELSE
        GNUIDXMEM := TBMEMCARGCONC.NEXT(GNUIDXMEM);
    END IF;

    
    BLFOUND := FALSE ;

    LOOP
    
        
        EXIT WHEN GNUIDXMEM IS NULL ;

        
        
        IF IBLPENOCURR THEN
            NUPEFACOMP := TBMEMCARGPEFA (GNUIDXMEM);
        ELSE
            NUPEFACOMP := RCPERIODO.PEFACODI;
        END IF;

        
        IF (ISBDOCUSOPO IS NOT NULL) THEN
        
            IF (ISBTIPOPROC = TBMEMCARGTIPR (GNUIDXMEM) AND
                INUCONCEPTO = TBMEMCARGCONC (GNUIDXMEM) AND
                ISBDOCUSOPO = TBMEMCARGDOSO (GNUIDXMEM) AND
                NUPEFACOMP  = TBMEMCARGPEFA (GNUIDXMEM) AND
                TBMEMCARGPROG (GNUIDXMEM) IN (  PKBILLCONST.FNUGETFGCT,
                                            PKBILLCONST.FNUGETFGCA,
                                            PKBILLCONST.FNUGETFGFC))
            THEN
                BLFOUND := TRUE ;
                EXIT ;
            END IF;
        ELSE
            IF (ISBTIPOPROC = TBMEMCARGTIPR (GNUIDXMEM) AND
                INUCONCEPTO = TBMEMCARGCONC (GNUIDXMEM) AND
                NUPEFACOMP  = TBMEMCARGPEFA (GNUIDXMEM) AND
                TBMEMCARGPROG (GNUIDXMEM) IN (  PKBILLCONST.FNUGETFGCT,
                                            PKBILLCONST.FNUGETFGCA,
                                            PKBILLCONST.FNUGETFGFC))
            THEN
                BLFOUND := TRUE ;
                EXIT ;
            END IF;

        
        END IF;

        
        GNUIDXMEM := TBMEMCARGCONC.NEXT (GNUIDXMEM) ;
    
    END LOOP ;

    PKERRORS.POP;
    RETURN (BLFOUND) ;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FBLISCHRGGENERATED;

    




















    PROCEDURE GETCURRENTCHARGECAUSE
    (
        ONUCARGCACA OUT CARGOS.CARGCACA%TYPE
    )
    IS
    BEGIN
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetCurrentChargeCause');

        
        IF
            GNUIDXMEM IS NULL
        THEN
            ONUCARGCACA := NULL;
        ELSE
            ONUCARGCACA := TBMEMCARGCACA(GNUIDXMEM);
        END IF;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETCURRENTCHARGECAUSE;

    




















    PROCEDURE CLOSECURRCHARGESEARCH
    IS
    BEGIN
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CloseCurrChargeSearch');

        GNUIDXMEM := NULL;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END CLOSECURRCHARGESEARCH;


























FUNCTION FBLSYNCHRONIZE
(
    INUMAXCHARGES IN NUMBER
)
RETURN BOOLEAN
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.fblSynchronize');

    
    IF (TBCARGNUSE.COUNT >= INUMAXCHARGES) THEN
        PKERRORS.POP;
        RETURN (TRUE) ;
    END IF ;

    PKERRORS.POP;
    RETURN (FALSE) ;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FBLSYNCHRONIZE;

























FUNCTION FNUNUMGENCHRGS
RETURN NUMBER
IS
    
    NUIDX NUMBER ;

    
    NURECS NUMBER ;
    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.fnuNumGenChrgs.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.fnuNumGenChrgs');

    
    GETINSTANCEDATA ;

    
    NURECS := 0;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGPEFA (NUIDX) = RCPERIODO.PEFACODI) THEN
            
            NURECS := NURECS + 1;
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    
    PKERRORS.POP;
    RETURN (NURECS) ;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FNUNUMGENCHRGS;

























PROCEDURE GETCNSMINFOBYCONC
(
	OTBROWID	OUT	PKTBLCONSSESU.TYTBROWID,
	OTBCONSCARGO	OUT	PKTBLCONSSESU.TYCOSSCONS
)
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetCnsmInfoByConc');

    
    OTBROWID     := TBCSMPROWIDCNC ;
    OTBCONSCARGO := TBCSMPCONSECNC ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETCNSMINFOBYCONC;






















FUNCTION FSBVERSION
RETURN VARCHAR2
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.fsbVersion');

    PKERRORS.POP;
    
    RETURN (CSBVERSION);
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END FSBVERSION;

























PROCEDURE GETRANKPRODARRAYSBYCONC
(
	INUPRODUCT  IN  SERVSUSC.SESUNUSE%TYPE,
	INUCONCEPTO IN  CONCEPTO.CONCCODI%TYPE,
	ORCTBRANGLIQU   OUT PKTBLRANGLIQU.TYTBRANGLIQU
)
IS
    
    NUINDEXOUT  NUMBER;

    
    NUINDEX     NUMBER;
BEGIN

    PKERRORS.PUSH('pkBORatingMemoryMgr.GetRankProdArraysByConc');
    
    NUINDEX := TBRANGLIQUPRO.FIRST;
    
    LOOP
    
        EXIT WHEN NUINDEX IS NULL;
        
        IF (TBRANGLIQUPRO(NUINDEX).RALICONC = INUCONCEPTO) THEN
	    
            NUINDEXOUT := NVL(ORCTBRANGLIQU.RALIIDRE.LAST,0)+1;
            
            ORCTBRANGLIQU.RALIIDRE(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIIDRE;
            ORCTBRANGLIQU.RALILIIR(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALILIIR;
            ORCTBRANGLIQU.RALILISR(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALILISR;
            ORCTBRANGLIQU.RALIUNLI(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIUNLI;
            ORCTBRANGLIQU.RALIVAUL(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIVAUL;
            ORCTBRANGLIQU.RALIVASU(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIVASU;
            ORCTBRANGLIQU.RALIPECO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIPECO;
            ORCTBRANGLIQU.RALICODO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALICODO;
            ORCTBRANGLIQU.RALITICO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALITICO;
            ORCTBRANGLIQU.RALICONC(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALICONC;
            ORCTBRANGLIQU.RALIVALO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIVALO;
            ORCTBRANGLIQU.RALIPORC(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIPORC;
            ORCTBRANGLIQU.RALIVACO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIVACO;
	    
        END IF;

        NUINDEX :=  TBRANGLIQUPRO.NEXT(NUINDEX);
    
    END LOOP;
    
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETRANKPRODARRAYSBYCONC;























PROCEDURE LOADPRODUCTCONSUMPBX
IS
    NUPRODUCTO SERVSUSC.SESUNUSE%TYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProductConsumPBX.gid');

        
        PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUPRODUCTO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProductConsumPBX');

    
    GETINSTANCEDATA ;

    
    CLEARPRODCONSUM ;

    
    PKBCCONSUMCONFPBX.LOADPRODUCTCONSUMPBX
    (
        NUPRODUCTO,
        TBCOSSROWID,
        TBCOSSTCON,
        TBCOSSPEFA,
        TBCOSSPECS,
        TBCOSSCOCA,
        TBCOSSCMSS,
        TBCOSSELME,
        TBCOSSFERE
    ) ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END LOADPRODUCTCONSUMPBX;








































PROCEDURE GETCONSBYTYPEANDPERIODPBX
(
    INUTIPOCONS	    IN	CONSSESU.COSSTCON%TYPE,
    OTBCONSXPERI	OUT	TYTBCONSXPERIODO,
	IBLCAMBIAEST	IN	BOOLEAN DEFAULT TRUE
)
IS
    
    NUCICLCONS SERVSUSC.SESUCICO%TYPE ;

    
    NUMULTIFAM SERVSUSC.SESUMULT%TYPE ;

    
    RCSERVSUSC SERVSUSC%ROWTYPE ;

    
    NUPERICONSCURR PERICOSE.PECSCONS%TYPE ;
    NUPECOCURR PERICOSE.PECSCONS%TYPE ;

    
    RCPERIODO PERIFACT%ROWTYPE ;

    
    SBINDPERI VARCHAR2(200) ;

    
    NUIDXCONS NUMBER ;

    
    NUIDX NUMBER ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsByTypeAndPeriodPBX.gid');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCSERVSUSC) ;

        NUCICLCONS := RCSERVSUSC.SESUCICO ;
        NUMULTIFAM := RCSERVSUSC.SESUMULT ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsByTypeAndPeriodPBX');

    
    GETINSTANCEDATA ;

    OTBCONSXPERI.DELETE ;

    
    
    IF (NOT FBLCONSUMPTIONINCACHE) THEN
        
        LOADPRODUCTCONSUMPBX ;
    END IF;

    
    
    NUIDX := TBCOSSTCON.FIRST ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        IF (TBCOSSTCON (NUIDX) != INUTIPOCONS) THEN
            GOTO PROXIMO ;
        END IF;

        
        NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;

        
        
        IF (TBPERICONSCURR.EXISTS (NUCICLCONS)) THEN
            
            NUPERICONSCURR := TBPERICONSCURR (NUCICLCONS) ;
        ELSE
            
            PKBCPERICOSE.GETCURRPERBYCONSCYCLE
            (
                NUCICLCONS,
                RCPERIODO.PEFACODI,
                NUPERICONSCURR
            ) ;

            
            TBPERICONSCURR (NUCICLCONS) := NUPERICONSCURR ;
        END IF;

        
        
        IF ( FBLVALIDATEPERIOD( RCPERIODO, TBCOSSPEFA (NUIDX) ) ) THEN
        
            
            SBINDPERI := TO_CHAR (TBCOSSPEFA (NUIDX), 'FM000009') ||
                      TO_CHAR (TBCOSSPECS (NUIDX), 'FM000000000000009');

            
            IF (OTBCONSXPERI.EXISTS (SBINDPERI)) THEN
            
                
                OTBCONSXPERI (SBINDPERI).NUCONSUMO :=
                    OTBCONSXPERI (SBINDPERI).NUCONSUMO +
                    (TBCOSSCOCA (NUIDX) / NUMULTIFAM) ;
                OTBCONSXPERI (SBINDPERI).NURECFIN := NUIDXCONS ;
            
            ELSE
            
                
                OTBCONSXPERI (SBINDPERI).NUPERIODOC := TBCOSSPECS (NUIDX) ;
                OTBCONSXPERI (SBINDPERI).NUPERIODOF := TBCOSSPEFA (NUIDX) ;
                OTBCONSXPERI (SBINDPERI).NUCONSUMO :=
                    TBCOSSCOCA (NUIDX) / NUMULTIFAM ;
                OTBCONSXPERI (SBINDPERI).NURECINI := NUIDXCONS ;
                OTBCONSXPERI (SBINDPERI).NURECFIN := NUIDXCONS ;

                
                IF (TBCOSSPEFA (NUIDX) = RCPERIODO.PEFACODI) THEN
                
                    
                    IF (TBCOSSPECS (NUIDX) = NUPERICONSCURR) THEN
                        OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'S';
                    ELSE
                        OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'N';
                    END IF ;
                
                ELSE
                
                    
                    
                    
                    
                    
                    
                    
                    
                    PKBCPERICOSE.GETCURRPERBYCONSCYCLE
                    (
                        NUCICLCONS,
                        TBCOSSPEFA (NUIDX),
                        NUPECOCURR
                    ) ;

                    
                    
                    IF (TBCOSSPECS (NUIDX) = NUPECOCURR) THEN
                        OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'S';
                    ELSE
                        OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'N';
                    END IF;
                
                END IF ;
            
            END IF;

        	
        	
        	IF (IBLCAMBIAEST) THEN
        	    
        	    TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWID (NUIDX) ;
        	    TBCSMPCONSECNC (NUIDXCONS) := NULL ;
        	END IF;
        
        END IF;

        <<PROXIMO>>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETCONSBYTYPEANDPERIODPBX;



















































PROCEDURE GETCONINFBYTYPEANDPERIODCLUS
(
    INUTIPOCONS	    IN	CONSSESU.COSSTCON%TYPE,
    OTBCONSXPERI	OUT	TYTBCONSXPERIODO,
    IBLCAMBIAEST	IN	BOOLEAN DEFAULT TRUE
)
IS
    
    NUCICLCONS SERVSUSC.SESUCICO%TYPE ;

    
    NUMULTIFAM SERVSUSC.SESUMULT%TYPE ;

    
    RCSERVSUSCAGR SERVSUSC%ROWTYPE ;

    
    RCSERVSUSC SERVSUSC%ROWTYPE ;
    NUSSAMSEAM SESUAMPA.SSAMSEAM%TYPE;

    
    NUPERICONSCURR PERICOSE.PECSCONS%TYPE ;
    NUPECOCURR PERICOSE.PECSCONS%TYPE ;

    
    RCPERIODO PERIFACT%ROWTYPE ;
    
    
    RCPERICOSE PERICOSE%ROWTYPE;

    
    SBINDPERI VARCHAR2(200) ;

    
    NUIDXCONS NUMBER ;

    
    NUIDX NUMBER ;

    
    NUIDXAGR    NUMBER;

    
    TBSSAMSEAM  PKTBLSESUAMPA.TYSSAMSEAM;
    
    
    DTMAXPECO   DATE;

    PROCEDURE GETPRODUCTINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConInfByTypeAndPeriodClus.GPID');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCSERVSUSCAGR) ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        NUCICLCONS := RCSERVSUSCAGR.SESUCICO ;
        NUMULTIFAM := RCSERVSUSCAGR.SESUMULT ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETPRODUCTINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConInfByTypeAndPeriodClus');

    
    GETPRODUCTINSTANCEDATA ;

    OTBCONSXPERI.DELETE ;

    
    IF (NOT PKTBLSERVSUSC.FSBGETPRODUCTCLASS(RCSERVSUSCAGR.SESUNUSE) = CSBCLUSTERTYPE)    
    THEN
    	
    	
    	RETURN ;
    END IF;

    
    LOADPRODUCTCONSUMPTIONNI(RCSERVSUSCAGR.SESUNUSE) ;
    
    
    
    
    NUIDX := TBCOSSTCON.FIRST ;

    PKBCPERICOSE.GETCACHERECORD(TBCOSSPECS(NUIDX),RCPERICOSE);
    DTMAXPECO := RCPERICOSE.PECSFECI;
    
    TBPERICONSCURR (NUCICLCONS) := TBCOSSPECS(NUIDX) ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        IF (TBCOSSTCON (NUIDX) != INUTIPOCONS) THEN
            GOTO PROXIMO ;
        END IF;

        PKBCPERICOSE.GETCACHERECORD(TBCOSSPECS(NUIDX),RCPERICOSE);

        IF ( RCPERICOSE.PECSFECI > DTMAXPECO ) THEN
            DTMAXPECO := RCPERICOSE.PECSFECI;
            
            TBPERICONSCURR (NUCICLCONS) := TBCOSSPECS(NUIDX);

        END IF;

        <<PROXIMO>>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;

    
    
    NUIDX := TBCOSSTCON.FIRST ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        IF (TBCOSSTCON (NUIDX) != INUTIPOCONS) THEN
            GOTO PROXIMO ;
        END IF;

        
        NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;

        
        
        IF ( FBLVALIDATEPERIOD( RCPERIODO, TBCOSSPEFA (NUIDX) ) ) THEN
        
            
            SBINDPERI := TO_CHAR (TBCOSSPEFA (NUIDX), 'FM000009') ||
        	             TO_CHAR (TBCOSSPECS (NUIDX), 'FM000000000000009');

            
            IF (OTBCONSXPERI.EXISTS (SBINDPERI)) THEN
            
        		
        		OTBCONSXPERI (SBINDPERI).NUCONSUMO :=
        		    OTBCONSXPERI (SBINDPERI).NUCONSUMO +
        		    (TBCOSSCOCA (NUIDX) / NUMULTIFAM) ;
        		OTBCONSXPERI (SBINDPERI).NURECFIN := NUIDXCONS ;
            
            ELSE
            
        		
        		OTBCONSXPERI (SBINDPERI).NUPERIODOC := TBCOSSPECS (NUIDX) ;
        		OTBCONSXPERI (SBINDPERI).NUPERIODOF := TBCOSSPEFA (NUIDX) ;
        		OTBCONSXPERI (SBINDPERI).NUCONSUMO :=
        		    TBCOSSCOCA (NUIDX) / NUMULTIFAM ;
        		OTBCONSXPERI (SBINDPERI).NURECINI := NUIDXCONS ;
        		OTBCONSXPERI (SBINDPERI).NURECFIN := NUIDXCONS ;

                
                IF (TBCOSSPECS (NUIDX) = TBPERICONSCURR (NUCICLCONS)) THEN
                    OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'S';
                ELSE
                    OTBCONSXPERI (SBINDPERI).SBFLAGCURR := 'N';
                END IF ;
                
            
            END IF;

            
            
            IF (IBLCAMBIAEST) THEN
        		
        		TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWID (NUIDX) ;
        		TBCSMPCONSECNC (NUIDXCONS) := NULL ;
            END IF;
        
        END IF;

        <<PROXIMO>>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETCONINFBYTYPEANDPERIODCLUS;



































PROCEDURE GETCONSUMPBYLIQCONCEPT
( 
   	INUBASECONCEPT	IN	            NUMBER,
	IOTBROWID	    IN OUT NOCOPY	PKTBLCONSSESU.TYTBROWID,
	IOTBCOSSTCON	IN OUT NOCOPY	PKTBLCONSSESU.TYCOSSTCON,
	IOTBCOSSPEFA	IN OUT NOCOPY	PKTBLCONSSESU.TYCOSSPEFA,
	IOTBCOSSPECS	IN OUT NOCOPY	PKTBLCONSSESU.TYCOSSPECS,
	IOTBCOSSCOCA	IN OUT NOCOPY	PKTBLCONSSESU.TYCOSSCOCA,
	IOTBCOSSCMSS	IN OUT NOCOPY	PKTBLCONSSESU.TYCOSSCMSS,
	IOTBCOSSELME	IN OUT NOCOPY	PKTBLCONSSESU.TYCOSSELME,
	IOTBCOSSFERE	IN OUT NOCOPY	PKTBLCONSSESU.TYCOSSFERE,
	IOTBCOSSCONS	IN OUT NOCOPY	PKTBLCONSSESU.TYCOSSCONS
)
IS
    
    TBPRIVCARGCONC  PKTBLCARGOS.TYCARGCONC ;
    TBPRIVCARGNUSE  PKTBLCARGOS.TYCARGNUSE ;
    TBPRIVCARGSIGN  PKTBLCARGOS.TYCARGSIGN ;
    TBPRIVCARGDOSO  PKTBLCARGOS.TYCARGDOSO ;
    TBPRIVCARGVALO  PKTBLCARGOS.TYCARGVALO ;
    TBPRIVCARGUNID  PKTBLCARGOS.TYCARGUNID ;
    TBPRIVCARGTIPR  PKTBLCARGOS.TYCARGTIPR ;
    TBPRIVCARGPEFA  PKTBLCARGOS.TYCARGPEFA ;
    TBPRIVCARGCODO  PKTBLCARGOS.TYCARGCODO ;
    TBPRIVCARGTICO  PKTBLTIPOCONS.TYTCONCODI ;
    TBPRIVCARGPECO  PKTBLPERICOSE.TYPECSCONS ;
    TBPRIVCARGMEMO  PKBCCARGOS.TYTBCARGFLFA ;
    TBPRIVCARGFECR  PKTBLCARGOS.TYCARGFECR ;
    
    
    NUIDX NUMBER;
    NUIDXAUX NUMBER;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsumpByLiqConcept');

    
    PKBORATINGMEMORYMGR.GETCHRGARRBYCONC
    (
        INUBASECONCEPT,
        TBPRIVCARGNUSE,
        TBPRIVCARGSIGN,
        TBPRIVCARGDOSO,
        TBPRIVCARGVALO,
        TBPRIVCARGUNID,
        TBPRIVCARGTIPR,
        TBPRIVCARGPEFA,
        TBPRIVCARGCODO,
        TBPRIVCARGTICO,
        TBPRIVCARGPECO,
        TBPRIVCARGMEMO
    );
    
    
    LOOP
      EXIT WHEN NUIDX IS NULL;
      IF NOT PKBCCONSSESU.FBLVALIDATECONSPROD(TBPRIVCARGCODO(NUIDX),TBPRIVCARGNUSE(NUIDX)) THEN
        NUIDXAUX := NUIDX;
        NUIDX := TBPRIVCARGCODO.NEXT(NUIDX);
        TBPRIVCARGCODO.DELETE(NUIDXAUX);
        CONTINUE;
      END IF;
        NUIDX := TBPRIVCARGCODO.NEXT(NUIDX);
    END LOOP;
    
    
    PKBCCONSSESU.GETCONSUMPBYCONSEC
    (
        TBPRIVCARGCODO,
        IOTBROWID,
        IOTBCOSSTCON,
        IOTBCOSSPEFA,
        IOTBCOSSPECS,
        IOTBCOSSCOCA,
        IOTBCOSSCMSS,
        IOTBCOSSELME,
        IOTBCOSSFERE,
        IOTBCOSSCONS
    );

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETCONSUMPBYLIQCONCEPT;
























PROCEDURE DELETECONSUMREC
(
    INURECINI IN NUMBER,
    INURECFIN IN NUMBER
)
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.DeleteConsumRec');

    
    FOR NUIDX IN INURECINI .. INURECFIN LOOP
    
        TBCSMPCONSECNC.DELETE(NUIDX);
        TBCSMPROWIDCNC.DELETE(NUIDX);
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END DELETECONSUMREC;



























PROCEDURE LOADPRODUCTCONSPERIOD
(
	ITBROWID	IN  PKTBLCONSSESU.TYTBROWID,
	ITBCOSSTCON	IN  PKTBLCONSSESU.TYCOSSTCON,
	ITBCOSSPEFA	IN  PKTBLCONSSESU.TYCOSSPEFA,
	ITBCOSSPECS	IN  PKTBLCONSSESU.TYCOSSPECS,
	ITBCOSSCOCA	IN  PKTBLCONSSESU.TYCOSSCOCA,
	ITBCOSSCMSS	IN  PKTBLCONSSESU.TYCOSSCMSS,
	ITBCOSSELME	IN  PKTBLCONSSESU.TYCOSSELME,
	ITBCOSSFERE	IN  PKTBLCONSSESU.TYCOSSFERE,
	ITBCOSSCONS	IN  PKTBLCONSSESU.TYCOSSCONS,
    ITBCOSSCOFA IN  PKTBLCONSSESU.TYCOSSFLLI
) 
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProductConsPeriod');

    
    CLEARPRODCONSUM;

    
    TBCOSSROWID := ITBROWID;
    TBCOSSTCON := ITBCOSSTCON;
    TBCOSSPEFA := ITBCOSSPEFA;
    TBCOSSPECS := ITBCOSSPECS;
    TBCOSSCOCA := ITBCOSSCOCA;
    TBCOSSCMSS := ITBCOSSCMSS;
    TBCOSSELME := ITBCOSSELME;
    TBCOSSFERE := ITBCOSSFERE;
    TBCOSSCONS := ITBCOSSCONS;
    TBCOSSCOFA := ITBCOSSCOFA;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END LOADPRODUCTCONSPERIOD;


























PROCEDURE SETCNSMINFOBYCONC
(
	ITBROWID	   IN	PKTBLCONSSESU.TYTBROWID,
	ITBCONSCARGO   IN	PKTBLCONSSESU.TYCOSSCONS
)
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetCnsmInfoByConc');

    
    CLEARCSMPCNCMEM;

    
    TBCSMPROWIDCNC := ITBROWID;
    TBCSMPCONSECNC := ITBCONSCARGO;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END SETCNSMINFOBYCONC;























PROCEDURE SETCONSUMPTIONINFO
(
	IRCPRODCONS    TYRCCONSPECOTICO
)
IS
    
    NUIDX       NUMBER;
    
    
    NUIDXREC    NUMBER;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.SetConsumptionInfo');

    
    NUIDX := IRCPRODCONS.TBIDXCONS.FIRST;

    
    WHILE (NUIDX IS NOT NULL) LOOP

        
        NUIDXREC := IRCPRODCONS.TBIDXCONS(NUIDX);
        
        
        TBCSMPROWIDCNC(NUIDXREC) := TBCOSSROWID(NUIDXREC);
        TBCSMPCONSECNC(NUIDXREC) := TBCOSSCONS(NUIDXREC);

        
        NUIDX := IRCPRODCONS.TBIDXCONS.NEXT(NUIDX);
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END SETCONSUMPTIONINFO;

























PROCEDURE GETRANKCONCARRAYS
(
    ORCTBRANGLIQU   OUT PKTBLRANGLIQU.TYTBRANGLIQU
)
IS
    
    NUINDEXOUT  NUMBER;
    
    NUINDEX     NUMBER;
BEGIN

    PKERRORS.PUSH('pkBORatingMemoryMgr.GetRankConcArrays');

    NUINDEX := TBRANGLIQUCNC.FIRST;

    LOOP
    
        EXIT WHEN NUINDEX IS NULL;

        NUINDEXOUT := NVL(ORCTBRANGLIQU.RALIIDRE.LAST,0)+1;

        ORCTBRANGLIQU.RALIIDRE(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALIIDRE;
        ORCTBRANGLIQU.RALILIIR(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALILIIR;
        ORCTBRANGLIQU.RALILISR(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALILISR;
        ORCTBRANGLIQU.RALIUNLI(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALIUNLI;
        ORCTBRANGLIQU.RALIVAUL(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALIVAUL;
        ORCTBRANGLIQU.RALIVASU(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALIVASU;
        ORCTBRANGLIQU.RALIPECO(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALIPECO;
        ORCTBRANGLIQU.RALICODO(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALICODO;
        ORCTBRANGLIQU.RALITICO(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALITICO;
        ORCTBRANGLIQU.RALICONC(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALICONC;
        ORCTBRANGLIQU.RALIVALO(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALIVALO;
        ORCTBRANGLIQU.RALIPORC(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALIPORC;
        ORCTBRANGLIQU.RALIVACO(NUINDEXOUT) := TBRANGLIQUCNC(NUINDEX).RALIVACO;

        NUINDEX :=  TBRANGLIQUCNC.NEXT(NUINDEX);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETRANKCONCARRAYS;

























PROCEDURE GETCNSMINFOBYPROD
(
	OTBROWID	   OUT	PKTBLCONSSESU.TYTBROWID,
	OTBCONSCARGO   OUT	PKTBLCONSSESU.TYCOSSCONS
)
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetCnsmInfoByProd');

    
    OTBROWID     := TBCSMPROWIDPRO ;
    OTBCONSCARGO := TBCSMPCONSEPRO ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END GETCNSMINFOBYPROD;

































FUNCTION FBLVALIDATEPERIOD
(
    IRCPERIFACTLIQ  IN PERIFACT%ROWTYPE,
    INUPERIFACTCONS IN PERIFACT.PEFACODI%TYPE
)
RETURN BOOLEAN
IS
    RCPERIFACTCONS      PERIFACT%ROWTYPE;
    DTYEARMONTHLIQ      DATE;
    DTYEARMONTHCONS     DATE;
    
     
     SBADJUSTMODE    FA_APROMOFA.APMOPRGA%TYPE;
     
     SBCONSUMMODE   FA_APROMOFA.APMOPRGA%TYPE;

BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.fblValidatePeriod');
    
    
    SBADJUSTMODE := FA_BOAPPROBILLADJUSTMOV.FSBGETAPPROVALMODE;
    
    SBCONSUMMODE := FA_BOAPPROBILLADJUSTMOV.CSBCONSUMP;
    
    IF ( SBADJUSTMODE = SBCONSUMMODE) THEN
        PKERRORS.POP;
        RETURN (TRUE);
    END IF;
    
    
    DTYEARMONTHLIQ := TO_DATE(IRCPERIFACTLIQ.PEFAMES||'-'||
                              IRCPERIFACTLIQ.PEFAANO,
                              'mm-yyyy');
                              
    
    RCPERIFACTCONS := PKBCPERIFACT.FRCGETPERIOD(INUPERIFACTCONS);

    DTYEARMONTHCONS := TO_DATE(RCPERIFACTCONS.PEFAMES||'-'||
                              RCPERIFACTCONS.PEFAANO,
                              'mm-yyyy');
                              
    
    IF ( DTYEARMONTHCONS <= DTYEARMONTHLIQ ) THEN
        PKERRORS.POP;
        RETURN (TRUE) ;
    END IF ;

    PKERRORS.POP;
    RETURN (FALSE) ;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END FBLVALIDATEPERIOD;





















PROCEDURE UPDRANKSCONSGIFT
(
    INUGIFTMINUT IN NUMBER,
    INUCONSPERI  IN PERICOSE.PECSCONS%TYPE,
    INUCARGCODO  IN RANGLIQU.RALICODO%TYPE
)
IS
    
    NUINDEXORD  NUMBER;
    
    
    NUINDEX          NUMBER;
    
    
    RCTBRANGLIQUORD  PKTBLRANGLIQU.TYTBRANGLIQU;
    
    
    NURANGO           NUMBER;
    
    
    NUDISCGIFT         NUMBER;
    
    
    NUUNIDGIFT         CARGOS.CARGUNID%TYPE;
    
    
    NUVALOUNSU        RANGLIQU.RALIVALO%TYPE;
    
    
    NUUNIDADESP NUMBER;

    
    NUACUMUNID  NUMBER;

BEGIN

    PKERRORS.PUSH('pkBORatingMemoryMgr.UpdRanksConsGift');

    NUINDEX := TBRANGLIQUCNC.FIRST;

    
    NURANGO := 1;

    
    NUUNIDADESP := 0;

    
    NUACUMUNID := 0;
    
    LOOP
    
        EXIT WHEN NUINDEX IS NULL;

        IF TBRANGLIQUPRO(NUINDEX).RALIPECO = INUCONSPERI AND
        
            (TBRANGLIQUPRO(NUINDEX).RALICODO = INUCARGCODO) THEN

            
            IF NURANGO != 1 THEN
            
                
                
                NUACUMUNID := NUACUMUNID + TBRANGLIQUPRO(NUINDEX).RALIUNLI;

               
               IF NUUNIDADESP < INUGIFTMINUT THEN
               
                    IF NUACUMUNID <= INUGIFTMINUT THEN
                    
                        NUUNIDGIFT := TBRANGLIQUPRO(NUINDEX).RALIUNLI;
                    ELSE
                        NUUNIDGIFT := INUGIFTMINUT - NUUNIDADESP;
                    
                    END IF;

                    
                    NUVALOUNSU := TBRANGLIQUPRO(NUINDEX).RALIVASU / TBRANGLIQUPRO(NUINDEX).RALIUNLI;
                   
                    
                    
                    TBRANGLIQUPRO(NUINDEX).RALIVASU :=
                    (TBRANGLIQUPRO(NUINDEX).RALIUNLI - NUUNIDGIFT) * NUVALOUNSU;

                    
                    NUUNIDADESP  := NUUNIDADESP + NUUNIDGIFT;
                
                END IF;
            
            END IF;

            
            NURANGO := NURANGO + 1;
        
        END IF;
        
        NUINDEX :=  TBRANGLIQUPRO.NEXT(NUINDEX);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END UPDRANKSCONSGIFT;






























PROCEDURE UPDLIQCONSUMCURRPERIOD
(
    INUTIPOCONS IN	CONSSESU.COSSTCON%TYPE,
    INUCONSECUT IN	CONSSESU.COSSCONS%TYPE
)
IS
    
    NUCICLCONS SERVSUSC.SESUCICO%TYPE ;

    
    NUMULTIFAM SERVSUSC.SESUMULT%TYPE ;

    
    RCSERVSUSC SERVSUSC%ROWTYPE ;

    
    NUPERICONSCURR PERICOSE.PECSCONS%TYPE ;
    NUPECOCURR PERICOSE.PECSCONS%TYPE ;

    
    RCPERIODO PERIFACT%ROWTYPE ;

    
    NUIDXCONS NUMBER ;

    
    NUIDX NUMBER ;

    
    TBCOSSROWIDTMP PKTBLCONSSESU.TYTBROWID ;
    TBCOSSTCONTMP PKTBLCONSSESU.TYCOSSTCON ;
    TBCOSSPEFATMP PKTBLCONSSESU.TYCOSSPEFA ;
    TBCOSSPECSTMP PKTBLCONSSESU.TYCOSSPECS ;
    TBCOSSCOCATMP PKTBLCONSSESU.TYCOSSCOCA ;
    TBCOSSCMSSTMP PKTBLCONSSESU.TYCOSSCMSS ;
    TBCOSSELMETMP PKTBLCONSSESU.TYCOSSELME ;
    TBCOSSFERETMP PKTBLCONSSESU.TYCOSSFERE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.UpdLiqConsumCurrPeriod.gid');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCSERVSUSC) ;

        NUCICLCONS := RCSERVSUSC.SESUCICO ;
        NUMULTIFAM := RCSERVSUSC.SESUMULT ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.UpdLiqConsumCurrPeriod');

    
    GETINSTANCEDATA ;

    
    TBCOSSROWIDTMP.DELETE;
    TBCOSSTCONTMP.DELETE;
    TBCOSSPEFATMP.DELETE;
    TBCOSSPECSTMP.DELETE;
    TBCOSSCOCATMP.DELETE;
    TBCOSSCMSSTMP.DELETE;
    TBCOSSELMETMP.DELETE;
    TBCOSSFERETMP.DELETE;

    
	PKBCCONSSESU.GETNOTRATEDRECSBYPRODBM
	(
		RCSERVSUSC.SESUNUSE,
		TBCOSSROWIDTMP,
		TBCOSSTCONTMP,
		TBCOSSPEFATMP,
		TBCOSSPECSTMP,
		TBCOSSCOCATMP,
		TBCOSSCMSSTMP,
		TBCOSSELMETMP,
		TBCOSSFERETMP
    ) ;

    
    
    NUIDX := TBCOSSTCONTMP.FIRST ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        IF (TBCOSSTCONTMP (NUIDX) != INUTIPOCONS) THEN
        
            GOTO PROXIMO ;
        
        END IF;

        
        
        IF (TBPERICONSCURR.EXISTS (NUCICLCONS)) THEN
        
            
            NUPERICONSCURR := TBPERICONSCURR (NUCICLCONS) ;
        ELSE
            
            PKBCPERICOSE.GETCURRPERBYCONSCYCLE
            (
                NUCICLCONS,
                RCPERIODO.PEFACODI,
                NUPERICONSCURR
            ) ;
            
            TBPERICONSCURR (NUCICLCONS) := NUPERICONSCURR ;
        
        END IF;

        IF TBCOSSPECSTMP(NUIDX) = NUPERICONSCURR THEN
        
            
            NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;

            
    	    TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWIDTMP (NUIDX) ;
    	    TBCSMPCONSECNC (NUIDXCONS) := NULL ;
            
            TBCSMPCONSECNC (NUIDXCONS) := INUCONSECUT ;
        
        END IF;

        <<PROXIMO>>
        
        NUIDX := TBCOSSTCONTMP.NEXT (NUIDX) ;
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

END UPDLIQCONSUMCURRPERIOD;

























































PROCEDURE UPDRANKSCONSCONTVAL
(
	INUTIPOCONS	IN	TIPOCONS.TCONCODI%TYPE,
	INUCONCEPTO	IN	CONCEPTO.CONCCODI%TYPE,
	INUPERIODOC	IN	PERICOSE.PECSCONS%TYPE,
	IBLENMEMORIA	IN	BOOLEAN,
	INUCONSCARGO	IN	RANGLIQU.RALICODO%TYPE,
	INUPRODUCTO	    IN	RANGLIQU.RALISESU%TYPE
)
IS
    
    NUIDXS	NUMBER ;

    
    NUIDXC	NUMBER ;

    NUIDX	NUMBER ;

    
    NUIDXCRGS   NUMBER;

    
    NUCARGCODO  CARGOS.CARGCODO%TYPE;

    
    DTDATE  DATE;

    
    RCPERICOSE  PERICOSE%ROWTYPE;

    
    RCPERIFACT  PERIFACT%ROWTYPE;

    
    SBDOCSOPC   CARGOS.CARGDOSO%TYPE;

    
    SBDOCSOPR   CARGOS.CARGDOSO%TYPE;

    
    NULIQVALUE  RANGLIQU.RALIVAUL%TYPE;

    
    
    BLFOUNDRANKS    BOOLEAN := FALSE;

    TBRANGLIQUTMP    PKBCRANGLIQU.TTYRANGLIQU;

    
    TBCARGCONC       PKTBLCARGOS.TYCARGCONC ;
    TBCARGNUSE       PKTBLCARGOS.TYCARGNUSE ;
    TBCARGSIGN       PKTBLCARGOS.TYCARGSIGN ;
    TBCARGDOSO       PKTBLCARGOS.TYCARGDOSO ;
    TBCARGVALO       PKTBLCARGOS.TYCARGVALO ;
    TBCARGUNID       PKTBLCARGOS.TYCARGUNID ;
    TBCARGPEFA       PKTBLCARGOS.TYCARGPEFA ;
    TBCARGCODO       PKTBLCARGOS.TYCARGCODO ;
    TBCARGTICO       PKTBLTIPOCONS.TYTCONCODI ;
    TBCARGPECO       PKTBLPERICOSE.TYPECSCONS ;
    TBCARGFECR       PKTBLCARGOS.TYCARGFECR ;
    
    
    RCSERVSUSC      SERVSUSC%ROWTYPE;

    
    NUSERVCODI      SERVICIO.SERVCODI%TYPE;

    
    RCSERVICIO      SERVICIO%ROWTYPE;

    NUPERIFACT      PERIFACT.PEFACODI%TYPE;

BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.UpdRanksConsContVal');

    
    IF (NOT IBLENMEMORIA) THEN
    
    	
    	
        PKBCRANGLIQU.OBTREGSPORCONSECUTIVO
    	(
    		INUCONSCARGO,
    		INUPRODUCTO,
            TBRANGLIQUTMP
    	) ;

    	
    	NUIDX := TBRANGLIQUCNC.FIRST ;

        
        
        IF TBRANGLIQUTMP.FIRST IS NULL THEN
            GOTO BUSCACONSUMO;
        END IF;

    	LOOP
    	
    	    EXIT WHEN NUIDX IS NULL ;

    	    IF (NOT TBRANGLIQUTMP.EXISTS (NUIDX)) THEN
        		
        		GOTO PROXIMO ;
    	    END IF;

            
            
            PKBCRANGLIQU.GETRANKVALBYCONSEC
    		(
    		    TBRANGLIQUTMP(NUIDX).RALICODO,
    		    TBRANGLIQUTMP(NUIDX).RALISESU,
    		    TBRANGLIQUTMP(NUIDX).RALILIIR,
    		    NULIQVALUE
    		) ;

            IF (NULIQVALUE!= 0) THEN
                
        	    
        	    PKBCRANGLIQU.UPCONTVALBYCONSEC
        		(
        		    TBRANGLIQUTMP(NUIDX).RALICODO,
        		    TBRANGLIQUTMP(NUIDX).RALISESU,
        		    TBRANGLIQUTMP(NUIDX).RALILIIR,
        		    TBRANGLIQUCNC(NUIDX).RALIVACO
        		) ;
            END IF;

    	    << PROXIMO >>

    	    NUIDX := TBRANGLIQUCNC.NEXT (NUIDX) ;
    	
    	END LOOP ;

    	PKERRORS.POP ;
    	RETURN ;
    
    END IF;

    
    
    NUIDXS := TBRANGLIQUCNC.FIRST ;

    IF (NUIDXS IS NULL) THEN
    
        PKERRORS.POP;
        RETURN;
    
    END IF;

    LOOP
    
        EXIT WHEN NUIDXS IS NULL ;

        
        
        NUIDXC := TBRANGLIQUPRO.FIRST ;

        LOOP
        
    	    EXIT WHEN NUIDXC IS NULL ;

            
    	    
      	    
            
            
    	    IF ( TBRANGLIQUPRO(NUIDXC).RALITICO = INUTIPOCONS
            AND TBRANGLIQUPRO(NUIDXC).RALICONC  = INUCONCEPTO
            AND TBRANGLIQUPRO(NUIDXC).RALIPECO  = INUPERIODOC
            AND TBRANGLIQUPRO(NUIDXC).RALILIIR  = TBRANGLIQUCNC(NUIDXS).RALILIIR
            AND TBRANGLIQUPRO(NUIDXC).RALILISR  = TBRANGLIQUCNC(NUIDXS).RALILISR)
            THEN
            
                IF TBRANGLIQUPRO(NUIDXC).RALIVAUL = 0 THEN
                    TBRANGLIQUPRO(NUIDXC).RALIVACO := 0;
                ELSE
                    TBRANGLIQUPRO(NUIDXC).RALIVACO := TBRANGLIQUCNC(NUIDXS).RALIVACO;
                END IF;

                BLFOUNDRANKS := TRUE;

                
                EXIT ;
            
    	    END IF ;

            
            NUIDXC := TBRANGLIQUPRO.NEXT (NUIDXC) ;
        
        END LOOP ;

        
        NUIDXS := TBRANGLIQUCNC.NEXT (NUIDXS) ;
    
    END LOOP;

    <<BUSCACONSUMO>>

    
    
    
    IF NOT BLFOUNDRANKS THEN
    
        
        PKBCPERICOSE.GETCACHERECORDEX(INUPERIODOC, RCPERICOSE);

        
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD(INUPRODUCTO);

        
        
        
        NUSERVCODI := RCSERVSUSC.SESUSERV;

        PKSERVICEMGR.GETRECORD(NUSERVCODI, RCSERVICIO);

        PKBCPERIFACT.GETBILLPERBYCONSPER
        (
            RCSERVSUSC.SESUCICL,
            RCPERICOSE.PECSCONS,
            NUPERIFACT,
            RCSERVICIO.SERVTICO
        );

        RCPERIFACT := PKBCPERIFACT.FRCGETPERIOD(NUPERIFACT);

        
    	SBDOCSOPC := PKBOSUPPORTDOCUMENTMGR.FSBGETCONSUMBYPERIODSD
    	(
    	   RCPERIFACT.PEFAANO,
    	   RCPERIFACT.PEFAMES,
    	   INUTIPOCONS,
    	   'S'	
    	) ;

    	
    	SBDOCSOPR := PKBOSUPPORTDOCUMENTMGR.FSBGETCONSUMBYPERIODSD
    	(
            RCPERIFACT.PEFAANO,
            RCPERIFACT.PEFAMES,
            INUTIPOCONS,
            'N'	
        ) ;

        
        
        PKBCCARGOS.GETCNSMPCHRGS
    	(
    		INUPRODUCTO,
    		INUCONCEPTO,
    		SBDOCSOPC,
    		SBDOCSOPR,
    		TBCARGCONC,
    		TBCARGNUSE,
    		TBCARGSIGN,
    		TBCARGDOSO,
    		TBCARGUNID,
    		TBCARGVALO,
    		TBCARGTIPR,
    		TBCARGPEFA,
    		TBCARGCODO,
    		TBCARGFECR
    	) ;

    	NUIDXCRGS := TBCARGCODO.FIRST;

        
        IF ( NUIDXCRGS IS NULL ) THEN
        
            PKERRORS.POP;
            RETURN;
        
        END IF;

        
        DTDATE := TBCARGFECR(NUIDXCRGS);
        NUCARGCODO := TBCARGCODO(NUIDXCRGS);

    	
        LOOP
        
            EXIT WHEN NUIDXCRGS IS NULL;

            IF TBCARGFECR(NUIDXCRGS) > DTDATE THEN
            
                NUCARGCODO := TBCARGCODO(NUIDXCRGS);
                DTDATE := TBCARGFECR(NUIDXCRGS);
            
            END IF;
            NUIDXCRGS := TBCARGCODO.NEXT(NUIDXCRGS);
        
        END LOOP;

        
        PKBCRANGLIQU.OBTREGSPORCONSECUTIVO
    	(
    		NUCARGCODO,
    		INUPRODUCTO,
            TBRANGLIQUTMP
    	) ;

        
        
        NUIDXS := TBRANGLIQUTMP.FIRST ;

        LOOP
        
            EXIT WHEN NUIDXS IS NULL;

            
            TBRANGLIQUTMP(NUIDXS).RALICODO := INUCONSCARGO;

            
            NUIDXC := TBRANGLIQUCNC.FIRST ;

            LOOP
            
        	    EXIT WHEN NUIDXC IS NULL ;

        	    
        	    
        	    IF (TBRANGLIQUTMP(NUIDXS).RALILIIR = TBRANGLIQUCNC(NUIDXC).RALILIIR AND TBRANGLIQUTMP(NUIDXS).RALILISR = TBRANGLIQUCNC(NUIDXC).RALILISR)
        	    THEN
        	    
                    TBRANGLIQUTMP(NUIDXS).RALIVACO := TBRANGLIQUCNC(NUIDXC).RALIVACO;

                    
                    EXIT ;
                
        	    END IF ;

                
                NUIDXC := TBRANGLIQUCNC.NEXT (NUIDXC) ;
            
            END LOOP ;

            
            NUIDXS := TBRANGLIQUTMP.NEXT (NUIDXS) ;
        
        END LOOP;

        
        
        

        CLEARLIQRANKCONCMEM;

        TBRANGLIQUCNC := TBRANGLIQUTMP;

        
        NUIDXC := TBRANGLIQUCNC.FIRST;

        LOOP
        
            EXIT WHEN NUIDXC IS NULL ;

            
            NUIDXS := NVL (TBRANGLIQUPRO.LAST, 0) + 1 ;

            
            
            TBRANGLIQUPRO (NUIDXS) := TBRANGLIQUCNC (NUIDXC) ;

            
            NUIDXC := TBRANGLIQUCNC.NEXT (NUIDXC) ;
        
        END LOOP ;
    
    END IF;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END UPDRANKSCONSCONTVAL;











































PROCEDURE GETCHRGINFOBYDOCSUB
(
    INUCONCEPTO	IN	CARGOS.CARGCONC%TYPE,
    ISBTIPOPROC	IN	CARGOS.CARGTIPR%TYPE,
	ISBDOCSOP	IN	CARGOS.CARGDOSO%TYPE,
	OSBSIGNO	OUT	CARGOS.CARGSIGN%TYPE,
	ONUVALOR	OUT	CARGOS.CARGVALO%TYPE,
	ONUUNIDADES	OUT	CARGOS.CARGUNID%TYPE,
	ONUPERIODOF	OUT	PERIFACT.PEFACODI%TYPE,
	ONUCONSECUT	OUT	CARGOS.CARGCODO%TYPE,
	ONUTIPOCONS	OUT	TIPOCONS.TCONCODI%TYPE,
	ONUPERIODOC	OUT	PERICOSE.PECSCONS%TYPE,
	ONUFLAGMEMO	OUT	VARCHAR2
)
IS
    
    NUIDX NUMBER ;

    RCPERIODO PERIFACT%ROWTYPE ;

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgInfoByDocSub.GIData');

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETINSTANCEDATA ;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgInfoByDocSub');

    
    GETINSTANCEDATA ;

    
    OSBSIGNO	:= NULL;
    ONUVALOR	:= 0;
    ONUUNIDADES	:= NULL;
    ONUPERIODOF	:= NULL;
    ONUCONSECUT	:= NULL;
    ONUTIPOCONS	:= NULL;
    ONUPERIODOC	:= NULL;
    ONUFLAGMEMO	:= NULL;

    
    NUIDX := TBMEMCARGCONC.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;

        
        IF (TBMEMCARGCONC (NUIDX) = INUCONCEPTO AND
            TBMEMCARGTIPR (NUIDX) = ISBTIPOPROC AND
            INSTR(TBMEMCARGDOSO (NUIDX),ISBDOCSOP,1) > 0  AND
            TBMEMCARGPEFA (NUIDX) = RCPERIODO.PEFACODI)
        THEN
        
            
    	    OSBSIGNO	:= TBMEMCARGSIGN (NUIDX) ;
    	    ONUVALOR	:= TBMEMCARGVALO (NUIDX) ;
       	    ONUUNIDADES	:= TBMEMCARGUNID (NUIDX) ;
    	    ONUPERIODOF	:= TBMEMCARGPEFA (NUIDX) ;
    	    ONUCONSECUT	:= TBMEMCARGCODO (NUIDX) ;
    	    ONUTIPOCONS	:= TBMEMCARGTICO (NUIDX) ;
    	    ONUPERIODOC	:= TBMEMCARGPECO (NUIDX) ;
    	    ONUFLAGMEMO	:= TBMEMCARGMEMO (NUIDX) ;

    	    
    	    EXIT ;
        
        END IF;

        
        NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCHRGINFOBYDOCSUB;






















































PROCEDURE GETCHRGARRBYPROANDDOC
(
    INUPRODUCTO	    IN  SERVSUSC.SESUNUSE%TYPE,
    INUTIPOCONS     IN  TIPOCONS.TCONCODI%TYPE,
    INUPERIFACT     IN  PERIFACT.PEFACODI%TYPE,
	OTBCARGNUSE	    IN OUT NOCOPY	PKTBLCARGOS.TYCARGNUSE,
	OTBCARGSIGN	    IN OUT NOCOPY	PKTBLCARGOS.TYCARGSIGN,
	OTBCARGDOSO	    IN OUT NOCOPY	PKTBLCARGOS.TYCARGDOSO,
	OTBCARGVALO	    IN OUT NOCOPY	PKTBLCARGOS.TYCARGVALO,
	OTBCARGUNID	    IN OUT NOCOPY	PKTBLCARGOS.TYCARGUNID,
	OTBCARGTIPR	    IN OUT NOCOPY	PKTBLCARGOS.TYCARGTIPR,
	OTBCARGPEFA	    IN OUT NOCOPY	PKTBLCARGOS.TYCARGPEFA,
	OTBCARGCODO	    IN OUT NOCOPY	PKTBLCARGOS.TYCARGCODO,
	OTBCARGTICO	    IN OUT NOCOPY	PKTBLTIPOCONS.TYTCONCODI,
	OTBCARGPECO	    IN OUT NOCOPY	PKTBLPERICOSE.TYPECSCONS,
	OTBCARGMEMO	    IN OUT NOCOPY	PKBCCARGOS.TYTBCARGFLFA
)
IS
    
    NUIDX NUMBER ;

    NUIDXNEW	NUMBER ;
    
    
    NUCARGCONC  CARGOS.CARGCONC%TYPE := NULL;
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgArrByProAndDoc');

    
    OTBCARGNUSE.DELETE ;
    OTBCARGSIGN.DELETE ;
    OTBCARGDOSO.DELETE ;
    OTBCARGVALO.DELETE ;
    OTBCARGUNID.DELETE ;
    OTBCARGTIPR.DELETE ;
    OTBCARGPEFA.DELETE ;
    OTBCARGCODO.DELETE ;
    OTBCARGTICO.DELETE ;
    OTBCARGPECO.DELETE ;
    OTBCARGMEMO.DELETE ;

    
    NUIDX := TBMEMCARGNUSE.FIRST;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL;
        
        
        IF ( NUCARGCONC IS NULL ) THEN
            NUCARGCONC := TBMEMCARGCONC(NUIDX);
        END IF;

        
        IF
        (
            TBMEMCARGNUSE (NUIDX) = INUPRODUCTO
            AND
            (
                (
                    INSTR(TBMEMCARGDOSO (NUIDX),'CO-') = 1
                    AND
                    INSTR(TBMEMCARGDOSO (NUIDX),'TC-'||TO_CHAR (INUTIPOCONS,'FM0000')||'-') = 11
                )
                OR
                (
                    INSTR(TBMEMCARGDOSO (NUIDX),'CO-PR-') = 1
                    AND
                    INSTR(TBMEMCARGDOSO (NUIDX),'TC-'||TO_CHAR (INUTIPOCONS,'FM0000')||'-') = 14
                )
            )
            AND
            TBMEMCARGPEFA(NUIDX) = INUPERIFACT
            AND
            TBMEMCARGTIPR(NUIDX) = PKBILLCONST.AUTOMATICO
            AND
            TBMEMCARGCONC(NUIDX) = NUCARGCONC
        ) THEN
        

    	    
    	    NUIDXNEW := NVL (OTBCARGNUSE.LAST,0) + 1;

            
    	    OTBCARGNUSE (NUIDXNEW) := TBMEMCARGNUSE (NUIDX) ;
    	    OTBCARGSIGN (NUIDXNEW) := TBMEMCARGSIGN (NUIDX) ;
    	    OTBCARGDOSO (NUIDXNEW) := TBMEMCARGDOSO (NUIDX) ;
    	    OTBCARGVALO	(NUIDXNEW) := TBMEMCARGVALO (NUIDX) ;
      	    OTBCARGUNID (NUIDXNEW) := TBMEMCARGUNID (NUIDX) ;
    	    OTBCARGTIPR (NUIDXNEW) := TBMEMCARGTIPR (NUIDX) ;
    	    OTBCARGPEFA (NUIDXNEW) := TBMEMCARGPEFA (NUIDX) ;
    	    OTBCARGCODO	(NUIDXNEW) := TBMEMCARGCODO (NUIDX) ;
    	    OTBCARGTICO	(NUIDXNEW) := TBMEMCARGTICO (NUIDX) ;
    	    OTBCARGPECO (NUIDXNEW) := TBMEMCARGPECO (NUIDX) ;
    	    OTBCARGMEMO	(NUIDXNEW) := TBMEMCARGMEMO (NUIDX) ;
        
        END IF;

        
        NUIDX := TBMEMCARGNUSE.NEXT (NUIDX);
    
    END LOOP;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END GETCHRGARRBYPROANDDOC;



























PROCEDURE LOADPRODUCTCONSUMPTIONNIMUL
(
    INUPRODUCTO IN SERVSUSC.SESUNUSE%TYPE
)
IS
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProductConsumptionNIMUL');

    
    CLEARPRODCONSUM ;

    
    PKBCCONSSESU.GETNOTRATEDRECSBYPRODCLUSMUL
    (
        INUPRODUCTO,
        TBCOSSROWID,
        TBCOSSTCON,
        TBCOSSPEFA,
        TBCOSSPECS,
        TBCOSSCOCA,
        TBCOSSCMSS,
        TBCOSSELME,
        TBCOSSFERE,
        TBCOSSSESU
    ) ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);


END LOADPRODUCTCONSUMPTIONNIMUL;



















































PROCEDURE GETCONINFBYTYPANDPRDCLUSMULT
(
    ISBTIPOCONS	    IN	VARCHAR2,
    OTBCONSXPERI	OUT	TYTBCONSXPERIODO,
    IBLCAMBIAEST	IN	BOOLEAN DEFAULT TRUE
)
IS
    
    NUCICLCONS SERVSUSC.SESUCICO%TYPE ;

    
    NUMULTIFAM SERVSUSC.SESUMULT%TYPE ;

    
    RCSERVSUSCAGR SERVSUSC%ROWTYPE ;

    
    RCSERVSUSC SERVSUSC%ROWTYPE ;
    NUSSAMSEAM SESUAMPA.SSAMSEAM%TYPE;

    
    NUPERICONSCURR PERICOSE.PECSCONS%TYPE ;
    NUPECOCURR PERICOSE.PECSCONS%TYPE ;

    
    RCPERIODO PERIFACT%ROWTYPE ;

    
    NUINDPER NUMBER ;

    
    NUIDXCONS NUMBER ;

    
    NUIDX NUMBER ;

    
    NUIDXAGR    NUMBER;

    
    SBPERI VARCHAR2(200) ;

    
    TBSSAMSEAM  PKTBLSESUAMPA.TYSSAMSEAM;
    
    
    RCPERICOSE  PERICOSE%ROWTYPE;
    
    
    DTMAXPECO   DATE;
    
    
    PROCEDURE GETPRODUCTINSTANCEDATA IS
    BEGIN
    

        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConInfByTypAndPrdClusMult.GPID');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCSERVSUSCAGR) ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        NUCICLCONS := RCSERVSUSCAGR.SESUCICO ;
        NUMULTIFAM := RCSERVSUSCAGR.SESUMULT ;

        PKERRORS.POP ;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    
    END GETPRODUCTINSTANCEDATA ;
    
BEGIN

    PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConInfByTypAndPrdClusMult');

    
    GETPRODUCTINSTANCEDATA ;

    OTBCONSXPERI.DELETE ;
    PKGENERALSERVICES.TRACEDATA('pkBORatingMemoryMgr.GetConInfByTypAndPrdClusMult'||ISBTIPOCONS);
    
    IF (NOT PKTBLSERVSUSC.FSBGETPRODUCTCLASS(RCSERVSUSCAGR.SESUNUSE) = CSBCLUSTERTYPE)
    THEN
    	
    	
    	RETURN ;
    END IF;

    
    LOADPRODUCTCONSUMPTIONNIMUL(RCSERVSUSCAGR.SESUNUSE) ;
    
    
    
    
    NUIDX := TBCOSSTCON.FIRST ;

    PKBCPERICOSE.GETCACHERECORD(TBCOSSPECS(NUIDX),RCPERICOSE);
    DTMAXPECO := RCPERICOSE.PECSFECI;
    
    TBPERICONSCURR (NUCICLCONS) := TBCOSSPECS(NUIDX) ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        IF (INSTR( ISBTIPOCONS,'|'||TO_CHAR(TBCOSSTCON (NUIDX)||'|')) = 0) THEN
            GOTO PROXIMO ;
        END IF;

        PKBCPERICOSE.GETCACHERECORD(TBCOSSPECS(NUIDX),RCPERICOSE);

        IF ( RCPERICOSE.PECSFECI > DTMAXPECO ) THEN
            DTMAXPECO := RCPERICOSE.PECSFECI;
            
            TBPERICONSCURR (NUCICLCONS) := TBCOSSPECS(NUIDX);

        END IF;

        <<PROXIMO>>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;

    
    
    NUIDX := TBCOSSTCON.FIRST ;

    LOOP
    
        
        EXIT WHEN NUIDX IS NULL ;

        
        IF (INSTR( ISBTIPOCONS,'|'||TO_CHAR(TBCOSSTCON (NUIDX)||'|')) = 0) THEN
            GOTO PROXIMO ;
        END IF;

        
        NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;
        PKGENERALSERVICES.TRACEDATA('Tipo Consumo '||TO_CHAR(TBCOSSTCON (NUIDX)));

        
        
        IF ( FBLVALIDATEPERIOD( RCPERIODO, TBCOSSPEFA (NUIDX) ) ) THEN
        
            
            PKGENERALSERVICES.TRACEDATA('Rowid '||TO_CHAR(TBCOSSSESU (NUIDX),'FM00000000000000009'));
            
            
            
            SBPERI := TO_CHAR (TBCOSSPEFA (NUIDX), 'FM000009') ||
        	          TO_CHAR (TBCOSSPECS (NUIDX), 'FM000000000000009')||
        	          TO_CHAR(TO_CHAR(TBCOSSSESU (NUIDX), 'FM00000000009'))||
                      TO_CHAR (TBCOSSTCON (NUIDX),'FM0009');

            
            IF (OTBCONSXPERI.EXISTS (SBPERI)) THEN
            
        		
        		OTBCONSXPERI (SBPERI).NUCONSUMO :=
        		    OTBCONSXPERI (SBPERI).NUCONSUMO +
        		    (TBCOSSCOCA (NUIDX) / NUMULTIFAM) ;
        		    
                OTBCONSXPERI (SBPERI).NURECFIN := NUIDXCONS ;
            
            ELSE
            
        		
        		OTBCONSXPERI (SBPERI).NUPERIODOC := TBCOSSPECS (NUIDX) ;
        		OTBCONSXPERI (SBPERI).NUPERIODOF := TBCOSSPEFA (NUIDX) ;
        		OTBCONSXPERI (SBPERI).NUCONSUMO :=
        		    TBCOSSCOCA (NUIDX) / NUMULTIFAM ;
        		OTBCONSXPERI (SBPERI).NURECINI := NUIDXCONS ;
        		OTBCONSXPERI (SBPERI).NURECFIN := NUIDXCONS ;
        		
                 
                 
                IF (TBCOSSPECS (NUIDX) = TBPERICONSCURR (NUCICLCONS)) THEN
                    OTBCONSXPERI (SBPERI).SBFLAGCURR := 'S';
                ELSE
                    OTBCONSXPERI (SBPERI).SBFLAGCURR := 'N';
                END IF ;
            
            END IF;

            
            
            IF (IBLCAMBIAEST) THEN
        		
        		TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWID (NUIDX) ;
        		TBCSMPCONSECNC (NUIDXCONS) := NULL ;
            END IF;
        
        END IF;

        <<PROXIMO>>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);


END GETCONINFBYTYPANDPRDCLUSMULT;

    





























    PROCEDURE ADICIONARDETALLERECARGO
    (
        INUDERMCONS    DETAREMO.DERMCONS%TYPE,
        INUDERMCODO    DETAREMO.DERMCODO%TYPE,
        INUDERMTIDO    DETAREMO.DERMTIDO%TYPE,
        INUDERMNUFI    DETAREMO.DERMNUFI%TYPE,
        INUDERMVABA    DETAREMO.DERMVABA%TYPE,
        INUDERMPOIA    DETAREMO.DERMPOIA%TYPE,
        IDTDERMFILR    DETAREMO.DERMFILR%TYPE,
        IDTDERMFFLR    DETAREMO.DERMFFLR%TYPE,
        ISBDERMFLDE    DETAREMO.DERMFLDE%TYPE,
        INUINDICE      NUMBER
    )
    IS
    BEGIN
    
        PKERRORS.PUSH('pkBORatingMemoryMgr.AdicionarDetalleRecargo');
        
        
        TBDERMCONSCNC(INUINDICE) := INUDERMCONS;
        
        
        TBDERMCODOCNC(INUINDICE) := INUDERMCODO;
        
        
        TBDERMTIDOCNC(INUINDICE) := INUDERMTIDO;

        
        TBDERMNUFICNC(INUINDICE) := INUDERMNUFI;

        
        TBDERMVABACNC(INUINDICE) := INUDERMVABA;

        
        TBDERMPOIACNC(INUINDICE) := INUDERMPOIA;

        
        TBDERMFILRCNC(INUINDICE) := IDTDERMFILR;

        
        TBDERMFFLRCNC(INUINDICE) := IDTDERMFFLR;

        
        TBDERMFLDECNC(INUINDICE) := ISBDERMFLDE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END ADICIONARDETALLERECARGO;






















PROCEDURE SETVALORIMPUESTOINCLUIDO
IS
BEGIN

    PKERRORS.PUSH('pkBORatingMemoryMgr.SetValorImpuestoIncluido');

    GBLIMPUESTOINCLUIDO := TRUE;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
    	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END SETVALORIMPUESTOINCLUIDO;





























PROCEDURE OBTCONSTIPOSDECONSUMOS
    (
        ITBTIPOSCONS    IN  UT_STRING.TYTB_STRING,
        OTBCONSXPERI    OUT TYTBCONSXPERIODO,
    	IBLCAMBIAEST	IN  BOOLEAN DEFAULT TRUE,
    	INUBASECONCEPT	IN	NUMBER DEFAULT NULL
    )
    IS

    
    NUCICLCONS SERVSUSC.SESUCICO%TYPE ;

    
    NUMULTIFAM SERVSUSC.SESUMULT%TYPE ;

    
    RCSERVSUSC SERVSUSC%ROWTYPE ;

    
    NUPERICONSCURR PERICOSE.PECSCONS%TYPE ;
    NUPECOCURR PERICOSE.PECSCONS%TYPE ;

    
    RCPERIODO PERIFACT%ROWTYPE ;

    
    SBINDPER VARCHAR2(200) ;

    
    NUIDXCONS NUMBER ;

    
    NUIDX NUMBER ;

    
    SBPERI VARCHAR2(25) ;

    

    PROCEDURE GETINSTANCEDATA IS
    BEGIN
    

        PKERRORS.PUSH ('pkBORatingMemoryMgr.ObtConsTiposdeConsumos.gid');

        
        PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCSERVSUSC) ;

        NUCICLCONS := RCSERVSUSC.SESUCICO ;
        NUMULTIFAM := RCSERVSUSC.SESUMULT ;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

        PKERRORS.POP ;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    
    END GETINSTANCEDATA ;

    
    FUNCTION  FBOEXISTECONSUMO(
                                ISBVALUE   IN NUMBER
                              )
    RETURN BOOLEAN
    IS
        NUINDEX PLS_INTEGER;
    BEGIN
        PKERRORS.PUSH ('pkBORatingMemoryMgr.ObtConsTiposdeConsumos.fboExisteConsumo');
        FOR NUINDEX IN ITBTIPOSCONS.FIRST .. ITBTIPOSCONS.LAST LOOP
            IF ITBTIPOSCONS.EXISTS(NUINDEX) THEN
                IF ITBTIPOSCONS(NUINDEX) = ISBVALUE THEN
                    RETURN (TRUE);
                END IF;
            END IF;
        END LOOP;
        PKERRORS.POP;
        RETURN FALSE;
     EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END FBOEXISTECONSUMO;

    

BEGIN


    PKERRORS.PUSH ('pkBORatingMemoryMgr.ObtConsTiposdeConsumos');

    
    GETINSTANCEDATA ;

    OTBCONSXPERI.DELETE ;

    
    
    IF (NOT FBLCONSUMPTIONINCACHE) THEN
        
        LOADPRODUCTCONSUMPTION (INUBASECONCEPT) ;
    END IF;

    
    
    NUIDX := TBCOSSTCON.FIRST ;

    
    PKBCPERICOSE.GETCURRPERBYCONSCYCLE(
                                        NUCICLCONS,
                                        RCPERIODO.PEFACODI,
                                        NUPERICONSCURR
                                      );

    LOOP
    

        
        EXIT WHEN NUIDX IS NULL ;

        
        IF NOT FBOEXISTECONSUMO(TBCOSSTCON (NUIDX)) THEN
            GOTO PROXIMO ;
        END IF;
        
        NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;

        
        
        IF (TBPERICONSCURR.EXISTS (NUCICLCONS)) THEN
            
            NUPERICONSCURR := TBPERICONSCURR (NUCICLCONS) ;
        ELSE
            
            TBPERICONSCURR (NUCICLCONS) := NUPERICONSCURR ;
        END IF;
        
        
        IF ( FBLVALIDATEPERIOD( RCPERIODO, TBCOSSPEFA (NUIDX) ) ) THEN
        
            
            SBPERI := TO_CHAR (TBCOSSPEFA (NUIDX), 'FM000009') ||
                      TO_CHAR (TBCOSSPECS (NUIDX), 'FM000000000000009');
                      
            SBINDPER := SBPERI;

            
            IF (OTBCONSXPERI.EXISTS (SBINDPER)) THEN
            
                
                OTBCONSXPERI (SBINDPER).NUCONSUMO :=
                    OTBCONSXPERI (SBINDPER).NUCONSUMO +
                    (TBCOSSCOCA (NUIDX) / NUMULTIFAM) ;
                OTBCONSXPERI (SBINDPER).NURECFIN := NUIDXCONS ;
            
            ELSE
            
                
                OTBCONSXPERI (SBINDPER).NUPERIODOC := TBCOSSPECS (NUIDX) ;
                OTBCONSXPERI (SBINDPER).NUPERIODOF := TBCOSSPEFA (NUIDX) ;
                OTBCONSXPERI (SBINDPER).NUCONSUMO :=
                    TBCOSSCOCA (NUIDX) / NUMULTIFAM ;
                OTBCONSXPERI (SBINDPER).NURECINI := NUIDXCONS ;
                OTBCONSXPERI (SBINDPER).NURECFIN := NUIDXCONS ;

                
                IF (TBCOSSPECS (NUIDX) = NUPERICONSCURR) THEN
                    OTBCONSXPERI (SBINDPER).SBFLAGCURR := 'S';
                ELSE
                    OTBCONSXPERI (SBINDPER).SBFLAGCURR := 'N';
                END IF ;
                
            
            END IF;

        	
        	
        	IF (IBLCAMBIAEST) THEN
        	    
        	    TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWID (NUIDX) ;
        	    TBCSMPCONSECNC (NUIDXCONS) := NULL ;
        	END IF;
        
        END IF;

        <<PROXIMO>>
        
        NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
    
    END LOOP ;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);


END OBTCONSTIPOSDECONSUMOS;

    























    PROCEDURE OBTCARGOSPORSESUPEFACOBA
    (
        INUSESUNUSE     IN  SERVSUSC.SESUNUSE%TYPE,
        INUPERIFACT     IN  PERIFACT.PEFACODI%TYPE,
        INUCONCBASE     IN  CONCEPTO.CONCCODI%TYPE,
        OTBCARGVALO     OUT NOCOPY  PKTBLCARGOS.TYCARGVALO,
        OTBCARGDOSO     OUT NOCOPY  PKTBLCARGOS.TYCARGDOSO,
        OTBCARGUNID     OUT NOCOPY  PKTBLCARGOS.TYCARGUNID
    )
    IS
        
        NUINDICE    NUMBER ;

        NUINDSALIDA	NUMBER ;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.ObtCargosPorSesuPefaCoba');

        
        OTBCARGVALO.DELETE ;
        OTBCARGUNID.DELETE ;
        OTBCARGDOSO.DELETE ;

        
        NUINDICE := TBMEMCARGCONC.FIRST;

        LOOP
        
            
            EXIT WHEN NUINDICE IS NULL;

            
            IF ( TBMEMCARGCONC (NUINDICE) = INUCONCBASE AND
                 TBMEMCARGPEFA (NUINDICE) = INUPERIFACT AND
                 TBMEMCARGTIPR (NUINDICE) = PKBILLCONST.AUTOMATICO AND
                 TBMEMCARGNUSE (NUINDICE) = INUSESUNUSE AND
                 TBMEMCARGDOSO (NUINDICE) LIKE PKBILLCONST.CSBTOKEN_CARGO_BASICO_PROD||'%')
            THEN
            
        	    
        	    NUINDSALIDA := NVL (OTBCARGDOSO.LAST,0) + 1;

                
        	    OTBCARGDOSO (NUINDSALIDA) := TBMEMCARGDOSO (NUINDICE) ;
        	    OTBCARGVALO	(NUINDSALIDA) := TBMEMCARGVALO (NUINDICE) ;
        	    OTBCARGUNID (NUINDSALIDA) := TBMEMCARGUNID (NUINDICE) ;
            
            END IF;

            
            NUINDICE := TBMEMCARGCONC.NEXT (NUINDICE);
        
        END LOOP;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END OBTCARGOSPORSESUPEFACOBA;
    
    














    PROCEDURE OBTENERCONSPERIODO
    (
        INUTIPOCONS     IN 	CONSSESU.COSSTCON%TYPE,
        OTBCONSXPERI	OUT	TYTBCONSXPERIODO,
        INUPERIODO      IN  PERICOSE.PECSCONS%TYPE,
    	IBLCAMBIAEST	IN 	BOOLEAN DEFAULT TRUE,
    	INUBASECONCEPT	IN 	NUMBER DEFAULT NULL
    )
    IS

        
        NUCICLCONS      SERVSUSC.SESUCICO%TYPE ;

        
        NUMULTIFAM      SERVSUSC.SESUMULT%TYPE ;

        
        RCSERVSUSC      SERVSUSC%ROWTYPE ;

        
        NUPERICONSCURR  PERICOSE.PECSCONS%TYPE ;
        NUPECOCURR      PERICOSE.PECSCONS%TYPE ;

        
        RCPERIODO       PERIFACT%ROWTYPE ;

        
        NUINDPER        NUMBER ;

        
        NUIDXCONS       NUMBER ;

        
        NUIDX           NUMBER ;

        
        SBPERI          VARCHAR2(25) ;

        















        PROCEDURE OBTDATAINSTANCIA IS
        BEGIN

            PKERRORS.PUSH ('pkBORatingMemoryMgr.ObtenerConsPeriodo.ObtDataInstancia');
            UT_TRACE.TRACE('Inicio [pkBORatingMemoryMgr.ObtenerConsPeriodo.ObtDataInstancia]');

            
            PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCSERVSUSC) ;

            NUCICLCONS := RCSERVSUSC.SESUCICO ;
            NUMULTIFAM := RCSERVSUSC.SESUMULT ;

            
            PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

            UT_TRACE.TRACE('Fin [pkBORatingMemoryMgr.ObtenerConsPeriodo.ObtDataInstancia]');
            PKERRORS.POP ;

        EXCEPTION
            WHEN LOGIN_DENIED THEN
                PKERRORS.POP;
                RAISE LOGIN_DENIED;

            WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
                
                PKERRORS.POP;
                RAISE PKCONSTANTE.EXERROR_LEVEL2;

            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

        END OBTDATAINSTANCIA ;

    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.ObtenerConsPeriodo');
        UT_TRACE.TRACE('Inicio [pkBORatingMemoryMgr.ObtenerConsPeriodo]');
        
        OBTDATAINSTANCIA ;

        
        OTBCONSXPERI.DELETE ;

        
        
        IF (NOT FBLCONSUMPTIONINCACHE) THEN

            
            LOADPRODUCTCONSUMPTION (INUBASECONCEPT) ;
        END IF;

        
        
        NUIDX := TBCOSSTCON.FIRST ;

        LOOP
            
            EXIT WHEN NUIDX IS NULL ;

            
            IF (TBCOSSTCON (NUIDX) != INUTIPOCONS) THEN
                GOTO PROXIMO;
            END IF;

            
            IF (TBCOSSPECS (NUIDX) != INUPERIODO) THEN
                GOTO PROXIMO;
            END IF;

            
            NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;

            
            
            IF (TBPERICONSCURR.EXISTS (NUCICLCONS)) THEN
                
                NUPERICONSCURR := TBPERICONSCURR (NUCICLCONS) ;
            ELSE
                
                PKBCPERICOSE.GETCURRPERBYCONSCYCLE
                    (
                        NUCICLCONS,
                        RCPERIODO.PEFACODI,
                        NUPERICONSCURR
                    ) ;

                
                TBPERICONSCURR (NUCICLCONS) := NUPERICONSCURR ;
            END IF;

            
            
            IF ( FBLVALIDATEPERIOD( RCPERIODO, TBCOSSPEFA (NUIDX) ) ) THEN
            
                
                SBPERI := TO_CHAR (TBCOSSPEFA (NUIDX), 'FM000009') ||
                          TO_CHAR (TBCOSSPECS (NUIDX), 'FM000000000000009');

                
                IF (OTBCONSXPERI.EXISTS (SBPERI)) THEN
                
                    
                    OTBCONSXPERI (SBPERI).NUCONSUMO :=
                        OTBCONSXPERI (SBPERI).NUCONSUMO +
                        (TBCOSSCOCA (NUIDX) / NUMULTIFAM) ;
                    OTBCONSXPERI (SBPERI).NURECFIN := NUIDXCONS ;
                
                ELSE
                
                    
                    OTBCONSXPERI (SBPERI).NUPERIODOC := TBCOSSPECS (NUIDX) ;
                    OTBCONSXPERI (SBPERI).NUPERIODOF := TBCOSSPEFA (NUIDX) ;
                    OTBCONSXPERI (SBPERI).NUCONSUMO :=
                        TBCOSSCOCA (NUIDX) / NUMULTIFAM ;
                    OTBCONSXPERI (SBPERI).NURECINI := NUIDXCONS ;
                    OTBCONSXPERI (SBPERI).NURECFIN := NUIDXCONS ;

                    
                    IF (TBCOSSPEFA (NUIDX) = RCPERIODO.PEFACODI) THEN
                        
                        IF (TBCOSSPECS (NUIDX) = NUPERICONSCURR) THEN
                            OTBCONSXPERI (SBPERI).SBFLAGCURR := 'S';
                        ELSE
                            OTBCONSXPERI (SBPERI).SBFLAGCURR := 'N';
                        END IF ;
                    ELSE
                    
                        
                        
                        PKBCPERICOSE.GETCURRPERBYCONSCYCLE
                            (
                                NUCICLCONS,
                                TBCOSSPEFA (NUIDX),
                                NUPECOCURR
                            ) ;
                        
                        
                        IF (TBCOSSPECS (NUIDX) = NUPECOCURR) THEN
                            OTBCONSXPERI (SBPERI).SBFLAGCURR := 'S';
                        ELSE
                            OTBCONSXPERI (SBPERI).SBFLAGCURR := 'N';
                        END IF;
                    END IF ;
                END IF;

            	
            	
            	IF (IBLCAMBIAEST) THEN
            	    
            	    TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWID (NUIDX) ;
            	    TBCSMPCONSECNC (NUIDXCONS) := NULL ;
            	END IF;
            END IF;
            <<PROXIMO>>
            
            NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
        END LOOP ;

        UT_TRACE.TRACE('Fin [pkBORatingMemoryMgr.ObtenerConsPeriodo]');
        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;

        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END OBTENERCONSPERIODO;

    



















    PROCEDURE GETPRESUPPOSECHARGES
    (
        ORCTBCARGOS     OUT PKCHARGEMGR.TYRCTBCHARGES
    )
    IS
        
        NUIND       NUMBER;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetPresupposeCharges');

        ORCTBCARGOS.CARGCUCO := TBCARGCUCO;
        ORCTBCARGOS.CARGNUSE := TBCARGNUSE;
        ORCTBCARGOS.CARGCONC := TBCARGCONC;
        ORCTBCARGOS.CARGCACA := TBCARGCACA;
        ORCTBCARGOS.CARGSIGN := TBCARGSIGN;
        ORCTBCARGOS.CARGPEFA := TBCARGPEFA;
        ORCTBCARGOS.CARGVALO := TBCARGVALO;
        ORCTBCARGOS.CARGDOSO := TBCARGDOSO;
        ORCTBCARGOS.CARGCODO := TBCARGCODO;
        ORCTBCARGOS.CARGUSUA := TBCARGUSUA;
        ORCTBCARGOS.CARGTIPR := TBCARGTIPR;
        ORCTBCARGOS.CARGUNID := TBCARGUNID;
        ORCTBCARGOS.CARGFECR := TBCARGFECR;
        ORCTBCARGOS.CARGPROG := TBCARGPROG;
        ORCTBCARGOS.CARGCOLL := TBCARGCOLL;
        ORCTBCARGOS.CARGVABL := TBCARGVABL;
        ORCTBCARGOS.CARGPECO := TBCARGPECO;
        ORCTBCARGOS.CARGTICO := TBCARGTICO;
        ORCTBCARGOS.CARGTACO := TBCARGTACO;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETPRESUPPOSECHARGES;

    

























    PROCEDURE LOADCHARGES
    (
        INUSESUNUSE     IN  SERVSUSC.SESUNUSE%TYPE
    )
    IS
        
        NUIDX       NUMBER ;
        NUIDXNEW	NUMBER ;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadCharges');

        
        TBMEMCARGCONC.DELETE ;
        TBMEMCARGNUSE.DELETE ;
        TBMEMCARGSIGN.DELETE ;
        TBMEMCARGDOSO.DELETE ;
        TBMEMCARGVALO.DELETE ;
        TBMEMCARGUNID.DELETE ;
        TBMEMCARGTIPR.DELETE ;
        TBMEMCARGPEFA.DELETE ;
        TBMEMCARGCODO.DELETE ;
        TBMEMCARGVABL.DELETE ;
        TBMEMCARGTICO.DELETE ;
        TBMEMCARGPECO.DELETE ;
        TBMEMCARGMEMO.DELETE ;
        TBMEMCARGTACO.DELETE ;
        TBMEMCARGCACA.DELETE ;
        TBMEMCARGFECR.DELETE ;
        TBMEMCARGPROG.DELETE ;

        
        NUIDX := TBCARGNUSE.FIRST;

        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            
            IF ( INUSESUNUSE = TBCARGNUSE (NUIDX) ) THEN
            
        	    
    	        NUIDXNEW := NVL (TBMEMCARGNUSE.LAST,0) + 1;

                
                TBMEMCARGNUSE(NUIDXNEW) := TBCARGNUSE (NUIDX);
                TBMEMCARGCONC(NUIDXNEW) := TBCARGCONC (NUIDX);
                TBMEMCARGSIGN(NUIDXNEW) := TBCARGSIGN (NUIDX);
                TBMEMCARGDOSO(NUIDXNEW) := TBCARGDOSO (NUIDX);
                TBMEMCARGVALO(NUIDXNEW) := TBCARGVALO (NUIDX);
                TBMEMCARGUNID(NUIDXNEW) := TBCARGUNID (NUIDX);
                TBMEMCARGTIPR(NUIDXNEW) := TBCARGTIPR (NUIDX);
                TBMEMCARGPEFA(NUIDXNEW) := TBCARGPEFA (NUIDX);
                TBMEMCARGCODO(NUIDXNEW) := TBCARGCODO (NUIDX);
                TBMEMCARGVABL(NUIDXNEW) := TBCARGVABL (NUIDX);
                TBMEMCARGTICO(NUIDXNEW) := TBCARGTICO (NUIDX);
                TBMEMCARGPECO(NUIDXNEW) := TBCARGPECO (NUIDX);
                TBMEMCARGTACO(NUIDXNEW) := TBCARGTACO (NUIDX);
                TBMEMCARGMEMO(NUIDXNEW) := 'S';
                TBMEMCARGCACA(NUIDXNEW) := TBCARGCACA (NUIDX);
                TBMEMCARGFECR(NUIDXNEW) := TBCARGFECR (NUIDX);
                TBMEMCARGPROG(NUIDXNEW) := TBCARGPROG (NUIDX);
            
            END IF;

            
            NUIDX := TBCARGNUSE.NEXT (NUIDX);
        
        END LOOP;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END LOADCHARGES;

    



























    FUNCTION FBOACTUALIZARPRODUCTO
    (
        INUSESUSOURCE   IN  SERVSUSC.SESUNUSE%TYPE,
        INUCONCEPT      IN  CONCEPTO.CONCCODI%TYPE,
        INUPERICOSE     IN  PERICOSE.PECSCONS%TYPE,
        INUPERIFACT     IN  PERIFACT.PEFACODI%TYPE,
        INUSESUTARGET   IN  SERVSUSC.SESUNUSE%TYPE
    )
    RETURN BOOLEAN
    IS
        
        NUIDX           NUMBER;

        
        RCPERIFACT      PERIFACT%ROWTYPE;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.fboActualizarProducto');

        
        NUIDX := TBCARGNUSEPRO.FIRST;

        
        PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD(RCPERIFACT);

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            TD('inuSesuSource: '||INUSESUSOURCE);
            TD('inuConcept: '||INUCONCEPT);
            TD('inuPericose: '||INUPERICOSE);
            TD('inuPerifact: '||INUPERIFACT);
            TD('rcPerifact.pefacodi: '||RCPERIFACT.PEFACODI);

            
            IF
            (
                INUSESUSOURCE = TBCARGNUSEPRO(NUIDX) AND
                INUCONCEPT = TBCARGCONCPRO(NUIDX)    AND
                INUPERICOSE = TBCARGPECOPRO(NUIDX)   AND
                INUPERIFACT = RCPERIFACT.PEFACODI
            )
            THEN
            
                TD('inuSesuTarget: '||INUSESUTARGET);
        	    
        	    TBCARGNUSEPRO(NUIDX) := INUSESUTARGET;
        	    TD('tbCargnusePro(nuIdx): '||TBCARGNUSEPRO(NUIDX));
                
        	    PKERRORS.POP;
        	    RETURN TRUE;

            
            END IF;

            
            NUIDX := TBCARGNUSEPRO.NEXT (NUIDX);
        
        END LOOP;

        PKERRORS.POP;
        RETURN FALSE;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
   END FBOACTUALIZARPRODUCTO;

    































    PROCEDURE GETCHARGEVALUE
    (
        INUPRODUCT        IN  SERVSUSC.SESUNUSE%TYPE,
        INUBILLPERIOD     IN  PERIFACT.PEFACODI%TYPE,
        INUCONSPERIOD     IN  PERICOSE.PECSCONS%TYPE,
        INUCONCEPT        IN  CONCEPTO.CONCCODI%TYPE,
        ONUCHARGEVALUE    OUT CARGOS.CARGVALO%TYPE
    )
    IS
        
        NUINDEX    NUMBER ;

    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChargeValue');

        
        ONUCHARGEVALUE := 0;
        
        
        NUINDEX := TBMEMCARGCONC.FIRST;

        LOOP

            
            EXIT WHEN NUINDEX IS NULL;
            
            

            IF ( NOT (INSTR('-'||TBMEMCARGDOSO(NUINDEX)||'-','-'||PKBILLCONST.CSBTOKEN_DIFERIDO) > 0 OR
                      INSTR('-'||TBMEMCARGDOSO(NUINDEX)||'-','-'||PKBILLCONST.CSBTOKEN_CUOTA_EXTRA) > 0
                     )
               ) THEN

                
                IF ( TBMEMCARGNUSE(NUINDEX) = INUPRODUCT              AND
                     TBMEMCARGPEFA(NUINDEX) = INUBILLPERIOD           AND
                     TBMEMCARGPECO(NUINDEX) = INUCONSPERIOD           AND
                     TBMEMCARGCONC(NUINDEX) = INUCONCEPT              )
                THEN
                    IF
                        TBMEMCARGSIGN(NUINDEX) = PKBILLCONST.DEBITO
                    THEN
                        ONUCHARGEVALUE := ONUCHARGEVALUE + TBMEMCARGVALO(NUINDEX);
                    END IF;

                    IF
                        TBMEMCARGSIGN(NUINDEX) = PKBILLCONST.CREDITO
                    THEN
                        ONUCHARGEVALUE := ONUCHARGEVALUE - TBMEMCARGVALO(NUINDEX);
                    END IF;
                END IF;
                
            END IF;
            
            NUINDEX := TBMEMCARGCONC.NEXT (NUINDEX);

        END LOOP;
        
        TD('Valor encontrado: ' || ONUCHARGEVALUE);

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END GETCHARGEVALUE;

    


























    PROCEDURE ADDACUMFACTCONCEPT
    (
        RCLE_ACUMFACT   IN  LE_ACUMFACT%ROWTYPE,
        ISBTIPOGEN      IN  LE_ACUMFACT.ACFAPRFA%TYPE
    )
    IS
        NUINDICE    NUMBER;
    BEGIN
        PKERRORS.PUSH('pkBORatingMemoryMgr.AddAcumFactConcept');

        
        NUINDICE := NVL( TBACUMFACTCNC.LAST, 0 ) + 1;

        
        TBACUMFACTCNC(NUINDICE).ACFACONS := RCLE_ACUMFACT.ACFACONS;

        

        TBACUMFACTCNC(NUINDICE).ACFAPEFA := RCLE_ACUMFACT.ACFAPEFA;

        
        IF  ISBTIPOGEN = LE_BCACUMFACT.CSBPROC_VALOR_TOTAL THEN
          TBACUMFACTCNC(NUINDICE).BLISTOTAL    := TRUE;
          TBACUMFACTCNC(NUINDICE).BLISAIRE     := FALSE;
          TBACUMFACTCNC(NUINDICE).BLISINTERCNX := FALSE;
        END IF;

        IF  ISBTIPOGEN = LE_BCACUMFACT.CSBPROC_VALOR_AIRE THEN
          TBACUMFACTCNC(NUINDICE).BLISTOTAL    := FALSE;
          TBACUMFACTCNC(NUINDICE).BLISAIRE     := TRUE;
          TBACUMFACTCNC(NUINDICE).BLISINTERCNX := FALSE;
        END IF;

        IF  ISBTIPOGEN = LE_BCACUMFACT.CSBPROC_INTERCONEX THEN
          TBACUMFACTCNC(NUINDICE).BLISTOTAL    := FALSE;
          TBACUMFACTCNC(NUINDICE).BLISAIRE     := FALSE;
          TBACUMFACTCNC(NUINDICE).BLISINTERCNX := TRUE;
        END IF;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END ADDACUMFACTCONCEPT;

    



















    PROCEDURE CLEARACUMFACTCNCMEM
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearAcumFactCncMem');

        
        TBACUMFACTCNC.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END CLEARACUMFACTCNCMEM;


    



















    PROCEDURE CLEARACUMFACTPROMEM
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearAcumFactProMem');

        
        TBACUMFACTPRO.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END CLEARACUMFACTPROMEM;


    



















    PROCEDURE CLEARACUMFACTMEM
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearAcumFactMem');

        
        TBACUMFACT.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END CLEARACUMFACTMEM;


    




















    PROCEDURE COMMITACUMFACTCNC
    IS
        NUIDX NUMBER ;
        NUIDXPROD NUMBER ;
        NUIDXP NUMBER ;
        BLENCONTRO BOOLEAN;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitAcumFactCnc');

        
        NUIDX := TBACUMFACTCNC.FIRST ;

        LOOP
        
            
            EXIT WHEN NUIDX IS NULL ;
            
            
            
            
            
            NUIDXPROD := TBACUMFACTPRO.FIRST;
            BLENCONTRO := FALSE;
            
            LOOP
                EXIT WHEN NUIDXPROD IS NULL;
                IF TBACUMFACTPRO(NUIDXPROD).ACFACONS = TBACUMFACTCNC(NUIDX).ACFACONS THEN
                    UT_TRACE.TRACE('Encontro acumulador en producto: '|| TBACUMFACTCNC(NUIDX).ACFACONS, 5);

                    IF TBACUMFACTCNC(NUIDX).BLISTOTAL THEN
                       TBACUMFACTPRO(NUIDXPROD).BLISTOTAL := TRUE;
                    END IF;

                    IF TBACUMFACTCNC(NUIDX).BLISAIRE THEN
                       TBACUMFACTPRO(NUIDXPROD).BLISAIRE := TRUE;
                    END IF;

                    IF TBACUMFACTCNC(NUIDX).BLISINTERCNX THEN
                       TBACUMFACTPRO(NUIDXPROD).BLISINTERCNX := TRUE;
                    END IF;

                    BLENCONTRO := TRUE;
                    EXIT;
                END IF;
                
                NUIDXPROD := TBACUMFACTPRO.NEXT (NUIDXPROD) ;
            END LOOP;
            

            
            
            
            
            IF NOT BLENCONTRO THEN
                
                NUIDXP := NVL (TBACUMFACTPRO.LAST, 0) + 1 ;

                
                
                TBACUMFACTPRO (NUIDXP).ACFACONS := TBACUMFACTCNC (NUIDX).ACFACONS;
                TBACUMFACTPRO (NUIDXP).ACFAPEFA := TBACUMFACTCNC (NUIDX).ACFAPEFA;
                TBACUMFACTPRO (NUIDXP).BLISTOTAL := TBACUMFACTCNC (NUIDX).BLISTOTAL;
                TBACUMFACTPRO (NUIDXP).BLISAIRE := TBACUMFACTCNC (NUIDX).BLISAIRE;
                TBACUMFACTPRO (NUIDXP).BLISINTERCNX := TBACUMFACTCNC (NUIDX).BLISINTERCNX;
            END IF;
            

            
            NUIDX := TBACUMFACTCNC.NEXT (NUIDX) ;
        END LOOP ;

        
        CLEARACUMFACTCNCMEM ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END COMMITACUMFACTCNC;


    





















    PROCEDURE COMMITACUMFACTPRO
    IS
        NUIDX NUMBER ;
        NUIDXP NUMBER ;
    BEGIN
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitAcumFactPro');

        
        NUIDXP := TBACUMFACTPRO.FIRST ;

        LOOP
            
            EXIT WHEN NUIDXP IS NULL ;

            
            NUIDX := NVL (TBACUMFACT.LAST, 0) + 1 ;

            
            
            TBACUMFACT (NUIDX).ACFACONS   := TBACUMFACTPRO (NUIDXP).ACFACONS ;
            TBACUMFACT (NUIDX).ACFAPEFA  := TBACUMFACTPRO (NUIDXP).ACFAPEFA;
            TBACUMFACT (NUIDX).BLISTOTAL := TBACUMFACTPRO (NUIDXP).BLISTOTAL;
            TBACUMFACT (NUIDX).BLISAIRE  := TBACUMFACTPRO (NUIDXP).BLISAIRE;
            TBACUMFACT (NUIDX).BLISINTERCNX := TBACUMFACTPRO (NUIDXP).BLISINTERCNX;

            
            NUIDXP := TBACUMFACTPRO.NEXT (NUIDXP) ;
        END LOOP ;

        
        CLEARACUMFACTPROMEM ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END COMMITACUMFACTPRO;


    





















    PROCEDURE SYNCHACUMFACT
    IS
        NUIDX         NUMBER;
        RCACUMULADOR  LE_ACUMFACT%ROWTYPE;
        SBPROCFACT    LE_ACUMFACT.ACFAPRFA%TYPE;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchAcumFact');

        
        IF (TBACUMFACT.FIRST IS NULL) THEN
            PKERRORS.POP ;
            RETURN ;
        END IF;

        
        NUIDX := TBACUMFACT.FIRST;

        LOOP
           
           EXIT WHEN NUIDX IS NULL ;

           
           RCACUMULADOR :=  PKTBLLE_ACUMFACT.FRCGETRECORD(TBACUMFACT(NUIDX).ACFACONS);
           
           
           SBPROCFACT := RCACUMULADOR.ACFAPRFA;
           
           
           IF TBACUMFACT(NUIDX).BLISTOTAL THEN
                SBPROCFACT := LE_BOACUMFACT.FSBAGREGAPROCESOSFACT
                              (
                                SBPROCFACT,
                                LE_BCACUMFACT.CSBPROC_VALOR_TOTAL
                              );
           END IF;

           
           IF TBACUMFACT(NUIDX).BLISAIRE THEN
                SBPROCFACT := LE_BOACUMFACT.FSBAGREGAPROCESOSFACT
                              (
                                SBPROCFACT,
                                LE_BCACUMFACT.CSBPROC_VALOR_AIRE
                              );
           END IF;

           
           IF TBACUMFACT(NUIDX).BLISINTERCNX THEN
                SBPROCFACT := LE_BOACUMFACT.FSBAGREGAPROCESOSFACT
                              (
                                SBPROCFACT,
                                LE_BCACUMFACT.CSBPROC_INTERCONEX
                              );
           END IF;
           
           
           RCACUMULADOR.ACFAPEFA := TBACUMFACT(NUIDX).ACFAPEFA;

           
           RCACUMULADOR.ACFAPRFA := SBPROCFACT;

           
           PKTBLLE_ACUMFACT.UPRECORD(RCACUMULADOR);
           
            
            NUIDX := TBACUMFACT.NEXT (NUIDX) ;
        END LOOP;

        
        CLEARACUMFACTMEM ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END SYNCHACUMFACT;

             
    



















    FUNCTION FRCGETACUMFACT
    (
        INUACFACONS IN LE_ACUMFACT.ACFACONS%TYPE
    )
    RETURN LE_BCACUMFACT.TYRCACUMFACT
    IS
        NUIDXP         NUMBER;
        RCACUMULADOR   LE_ACUMFACT%ROWTYPE;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.frcGetAcumfact');

         
        NUIDXP := TBACUMFACTPRO.FIRST ;

        LOOP
            
            EXIT WHEN NUIDXP IS NULL ;

            
            IF TBACUMFACTPRO(NUIDXP).ACFACONS = INUACFACONS THEN
                RETURN TBACUMFACTPRO(NUIDXP);
            END IF;

            
            NUIDXP := TBACUMFACTPRO.NEXT (NUIDXP) ;
        END LOOP;
        
        RETURN NULL;
        
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END FRCGETACUMFACT;


    
    
    
    

    




























    PROCEDURE ADDBILLEDPACKCONCEPT
    (
         INUPUISCONS   LE_PAUNINSE.PUISCONS%TYPE,
         INUCARGCODO   CARGOS.CARGCODO%TYPE
    )
    IS
        NUINDICE    NUMBER;
    BEGIN
        PKERRORS.PUSH('pkBORatingMemoryMgr.AddBilledPackConcept');

        TBBILLEDPACKCNC(INUPUISCONS) := INUCARGCODO;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END ADDBILLEDPACKCONCEPT;

    



















    PROCEDURE CLEARBILLEDPACKCNCMEM
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearBilledPackCncMem');

        
        TBBILLEDPACKCNC.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END CLEARBILLEDPACKCNCMEM;


    






















    PROCEDURE CLEARBILLEDPACKPROMEM
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearBilledPackProMem');

        
        TBBILLEDPACKPRO.DELETE;
        
        
        LE_BOLIQCARGOBASICOUI.GTBBILLEDPACKAGESUI.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END CLEARBILLEDPACKPROMEM;


    



















    PROCEDURE CLEARBILLEDPACKMEM
    IS
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.ClearBilledPackMem');

        
        TBBILLEDPACK.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END CLEARBILLEDPACKMEM;


    




















    PROCEDURE COMMITBILLEDPACKCNC
    IS
        SBPUISCONS  VARCHAR2(20);
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitBilledPackCnc');

        
        SBPUISCONS := TBBILLEDPACKCNC.FIRST ;

        LOOP
            
            EXIT WHEN SBPUISCONS IS NULL ;
            
            IF NOT TBBILLEDPACKPRO.EXISTS(SBPUISCONS) THEN
              TBBILLEDPACKPRO(SBPUISCONS) := TBBILLEDPACKCNC(SBPUISCONS);
            END IF;

            
            SBPUISCONS := TBBILLEDPACKCNC.NEXT(SBPUISCONS);
        END LOOP ;

        
        CLEARBILLEDPACKCNCMEM;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END COMMITBILLEDPACKCNC;


    





















    PROCEDURE COMMITBILLEDPACKPRO
    IS
        SBPUISCONS VARCHAR2(20);
    BEGIN
        PKERRORS.PUSH ('pkBORatingMemoryMgr.CommitBilledPackPro');

        
        SBPUISCONS := TBBILLEDPACKPRO.FIRST ;

        LOOP
            
            EXIT WHEN SBPUISCONS IS NULL ;

            
            
            TBBILLEDPACK(SBPUISCONS) := TBBILLEDPACKPRO(SBPUISCONS);

            
            SBPUISCONS := TBBILLEDPACKPRO.NEXT (SBPUISCONS) ;
        END LOOP ;

        
        CLEARBILLEDPACKPROMEM ;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END COMMITBILLEDPACKPRO;


    




















    PROCEDURE SYNCHBILLEDPACK
    IS
        SBPUISCONS    VARCHAR2(20);
        NUPUISCONS    LE_PAUNINSE.PUISCONS%TYPE;
        RCLEPAUNINSE  LE_PAUNINSE%ROWTYPE;
    BEGIN
        PKERRORS.PUSH ('pkBORatingMemoryMgr.SynchBilledPack');

        
        
        IF (TBBILLEDPACK.FIRST IS NULL) THEN
            PKERRORS.POP ;
            RETURN ;
        END IF;

        
        SBPUISCONS := TBBILLEDPACK.FIRST;

        LOOP
           
           EXIT WHEN SBPUISCONS IS NULL;
           
           
           NUPUISCONS := TO_NUMBER(SBPUISCONS);

           
           RCLEPAUNINSE :=  PKTBLLE_PAUNINSE.FRCGETRECORD(NUPUISCONS);
           
           
           
           RCLEPAUNINSE.PUISCODO := TBBILLEDPACK(SBPUISCONS);

           
           PKTBLLE_PAUNINSE.UPRECORD(RCLEPAUNINSE);

           
           SBPUISCONS := TBBILLEDPACK.NEXT (SBPUISCONS);
        END LOOP;

        
        CLEARBILLEDPACKMEM;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END SYNCHBILLEDPACK;


    



















    FUNCTION BLEXISTSBILLEDPACK(INUPUISCONS NUMBER)
    RETURN BOOLEAN
    IS
    BEGIN
       IF TBBILLEDPACKCNC.EXISTS(INUPUISCONS) THEN
         RETURN TRUE;
       END IF;

       IF TBBILLEDPACKPRO.EXISTS(INUPUISCONS) THEN
         RETURN TRUE;
       END IF;

       RETURN FALSE;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END;
    





















    FUNCTION FSBHASHCONSUM
    (
        INUCONSTYPE     IN  CONSSESU.COSSTCON%TYPE,
        INUCONSPERIOD   IN  CARGOS.CARGPECO%TYPE
    )
    RETURN VARCHAR2
    IS
        
        SBHASH          VARCHAR2(200) ;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.fsbHashConsum');

        
        SBHASH := TO_CHAR (INUCONSTYPE, 'FM0009') ||
                  TO_CHAR (INUCONSPERIOD, 'FM000000000000009');

        PKERRORS.POP;
        RETURN SBHASH;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END FSBHASHCONSUM;

    














































    PROCEDURE GETCONSUMPRODUCT
    (
        ITBCNCCONSU     IN  PKTBLCONCEPTO.TYCONCCODI,
        OTBCONSXPERI	OUT	TYTBCONSPECOTICO,
        OTBPERICONS	    OUT	PKTBLPERICOSE.TYPECSCONS,
        OTBTIPOCONS	    OUT PKTBLTIPOCONS.TYTCONCODI
    )
    IS
        
        NUCICLCONS SERVSUSC.SESUCICO%TYPE ;

        
        NUMULTIFAM SERVSUSC.SESUMULT%TYPE ;

        
        RCPERIODO PERIFACT%ROWTYPE ;

        
        RCSERVSUSC      SERVSUSC%ROWTYPE;
            
        
        RCPERICOSE  PERICOSE%ROWTYPE;

        
        SBINDPERI VARCHAR2(200) ;

        
        NUIDXCONS NUMBER ;

        
        NUIDX NUMBER ;
        
        
        SBIDX VARCHAR2(100);

        
        DTMAXPECO   DATE;
        
        
        NUINDICE    NUMBER;
        
        
        TBPERICONSTMP       TYTBPERICOSE;
        
        SBDATEINDEX         VARCHAR2(20);

        PROCEDURE GETINSTANCEDATA
        IS
        BEGIN
        
            PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsumProduct.GetInstanceData');

            
            PKINSTANCEDATAMGR.GETCG_PRODUCTRECORD (RCSERVSUSC) ;

            NUCICLCONS := RCSERVSUSC.SESUCICO ;
            NUMULTIFAM := RCSERVSUSC.SESUMULT ;

            
            PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCPERIODO) ;

            PKERRORS.POP ;
        EXCEPTION
            WHEN LOGIN_DENIED THEN
                PKERRORS.POP;
                RAISE LOGIN_DENIED;
            WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
                
                PKERRORS.POP;
                RAISE PKCONSTANTE.EXERROR_LEVEL2;
            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
        
        END GETINSTANCEDATA;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsumProduct');

        
        
        
        
        
        
        GETINSTANCEDATA ;

        OTBCONSXPERI.DELETE ;

        
        
        
        TBCOSSTCON.DELETE;

        
        IF ( NOT FBLCONSUMPTIONINCACHE ) THEN
        
            
            TBCOSSCOFA.DELETE;
            
            
            PKBORATINGMEMORYMGR.LOADPRODCONSUMNOTLIQ;

            
            PKBORATINGMEMORYMGR.LOADPRODCONSUMLIQ;

            
            PKBORATINGMEMORYMGR.LOADPRODCONSUMBILL(RCSERVSUSC.SESUNUSE, ITBCNCCONSU);
            
        
        END IF;

        
        
        
        NUIDX := TBCOSSTCON.FIRST ;

        
        
        IF NUIDX IS NOT NULL THEN

            
            PKBCPERICOSE.GETCACHERECORD(TBCOSSPECS(NUIDX),RCPERICOSE);
            
            
            DTMAXPECO := RCPERICOSE.PECSFECI;
            
            
            TBPERICONSCURR (NUCICLCONS) := TBCOSSPECS(NUIDX);
            
        END IF;

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL ;

            
            PKBCPERICOSE.GETCACHERECORD(TBCOSSPECS(NUIDX), RCPERICOSE);

            
            IF ( RCPERICOSE.PECSFECI > DTMAXPECO ) THEN
            
                
                DTMAXPECO := RCPERICOSE.PECSFECI;

                
                TBPERICONSCURR (NUCICLCONS) := TBCOSSPECS(NUIDX);
            
            END IF;

            
            NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
        
        END LOOP ;
        
        
        
        
        
        NUIDX := TBCOSSTCON.FIRST ;

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL ;

            
            NUIDXCONS := NVL(TBCSMPROWIDCNC.LAST,0) +1 ;

            
            
            IF ( FBLVALIDATEPERIOD( RCPERIODO, TBCOSSPEFA (NUIDX) ) ) THEN
            
                
                SBINDPERI := FSBHASHCONSUM(TBCOSSTCON(NUIDX), TBCOSSPECS(NUIDX));

                
                IF (OTBCONSXPERI.EXISTS (SBINDPERI)) THEN
                
                    
                    OTBCONSXPERI (SBINDPERI).NUCONSUMO :=
                        OTBCONSXPERI (SBINDPERI).NUCONSUMO +
                        NVL((TBCOSSCOCA (NUIDX) / NUMULTIFAM),0);
                    
                    OTBCONSXPERI (SBINDPERI).TBIDXCONS(NUIDX) := NUIDX;
                    
                    
                    IF ( TBCOSSCOFA(NUIDX) = PKCONSTANTE.SI  ) THEN
                    
                        
                        OTBCONSXPERI(SBINDPERI).NUCONSFACT :=
                            NVL(OTBCONSXPERI (SBINDPERI).NUCONSFACT,0) +
                            NVL((TBCOSSCOCA (NUIDX) / NUMULTIFAM),0);
                    
                    END IF;
                
                ELSE
                
                    



                    RCPERICOSE := NULL;
                    PKBCPERICOSE.GETCACHERECORD(TBCOSSPECS(NUIDX), RCPERICOSE);
                    SBDATEINDEX := TO_CHAR(RCPERICOSE.PECSFECI,'YYYY-MM-DD');
                    TBPERICONSTMP(SBDATEINDEX) := TBCOSSPECS (NUIDX);
                    
                    OTBTIPOCONS(TBCOSSTCON (NUIDX)) := TBCOSSTCON (NUIDX);

                    
                    OTBCONSXPERI (SBINDPERI).NUPERIODOC := TBCOSSPECS (NUIDX) ;
                    OTBCONSXPERI (SBINDPERI).NUPERIODOF := TBCOSSPEFA (NUIDX) ;
                    OTBCONSXPERI (SBINDPERI).NUCONSUMO := NVL(TBCOSSCOCA (NUIDX),0) / NUMULTIFAM ;
                    OTBCONSXPERI (SBINDPERI).TBIDXCONS(NUIDX) := NUIDX;
                    OTBCONSXPERI (SBINDPERI).NUCONSFACT := PKBILLCONST.CERO;

                    
                    IF ( TBCOSSCOFA(NUIDX) = PKCONSTANTE.SI ) THEN
                    
                        
                        OTBCONSXPERI (SBINDPERI).NUCONSFACT := TBCOSSCOCA (NUIDX) / NUMULTIFAM;
                    
                    END IF;

                    
                    IF (TBCOSSPECS (NUIDX) = TBPERICONSCURR (NUCICLCONS)) THEN
                        OTBCONSXPERI (SBINDPERI).SBFLAGCURR := PKCONSTANTE.SI;
                    ELSE
                        OTBCONSXPERI (SBINDPERI).SBFLAGCURR := PKCONSTANTE.NO;
                    END IF ;

                
                END IF;
                
          	    
           	    TBCSMPROWIDCNC (NUIDXCONS) := TBCOSSROWID (NUIDX) ;
           	    TBCSMPCONSECNC (NUIDXCONS) := TBCOSSCONS (NUIDX) ;
           	    
            
            END IF;

            
            NUIDX := TBCOSSTCON.NEXT (NUIDX) ;
            
        
        END LOOP ;

        
        
        
        
        
        
        NUINDICE := 1;
        
        
        SBIDX := TBPERICONSTMP.LAST;

        LOOP
        
            
            EXIT WHEN SBIDX IS NULL;

            
            OTBPERICONS(NUINDICE) := TBPERICONSTMP(SBIDX);
            
            
            NUINDICE := NUINDICE +1;
            
            
            SBIDX := TBPERICONSTMP.PRIOR(SBIDX);
        
        END LOOP;
        
        
        TBPERICONSTMP.DELETE;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETCONSUMPRODUCT;

    





















    PROCEDURE GETCONSUMSCONCEPTS
    (
        OTBCONSCONC     OUT PKTBLCARGOS.TYCARGCONC
    )
    IS
        
        NUIDX           NUMBER;

        
        RCCONCEPT      CONCEPTO%ROWTYPE;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsumsConcepts');

        
        OTBCONSCONC.DELETE;

        
        NUIDX := TBMEMCARGCONC.FIRST;

        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            
            
            IF ( NOT OTBCONSCONC.EXISTS(TBMEMCARGCONC(NUIDX))) THEN
            
                
                PKCONCEPTMGR.GETRECORD(TBMEMCARGCONC(NUIDX), RCCONCEPT);

                
                IF ( RCCONCEPT.CONCTICC = PKCONSTANTE.CSBCONSUMO ) THEN
                
                    
                    OTBCONSCONC(TBMEMCARGCONC (NUIDX)) := TBMEMCARGCONC (NUIDX);
                
                END IF;
            
            END IF;

            
            NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
        
        END LOOP;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETCONSUMSCONCEPTS;

    




















    PROCEDURE LOADPRODCONSUMNOTLIQ
    IS

        
        NUPRODUCT      SERVSUSC.SESUNUSE%TYPE;
        
        
        NUIDX       NUMBER;
        
        



















        
        PROCEDURE GETINSTANCEDATA IS
        BEGIN
        
            PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProdConsumNotLiq.GetInstanceData');

            
            PKINSTANCEDATAMGR.GETCG_SUBSSERVICE (NUPRODUCT) ;

            PKERRORS.POP ;
        EXCEPTION
            WHEN LOGIN_DENIED THEN
                PKERRORS.POP;
                RAISE LOGIN_DENIED;
            WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
                
                PKERRORS.POP;
                RAISE PKCONSTANTE.EXERROR_LEVEL2;
            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
        
        END GETINSTANCEDATA ;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProdConsumNotLiq');

        
        GETINSTANCEDATA;
        
    	
    	PKBCCONSSESU.GETCONSUMPNOTRATBYPROD
    	(
    		NUPRODUCT,
    		TBCOSSROWID,
    		TBCOSSTCON,
    		TBCOSSPEFA,
    		TBCOSSPECS,
    		TBCOSSCOCA,
    		TBCOSSCMSS,
    		TBCOSSELME,
    		TBCOSSFERE,
    		TBCOSSCONS
    	);

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END LOADPRODCONSUMNOTLIQ;

    























    PROCEDURE GETCONSUMSPERIODS
    (
        OTBCONSPERI OUT TYTBPECSCONS
    )
    IS
        
        NUIDX           NUMBER;

        
        RCCONCEPT      CONCEPTO%ROWTYPE;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsumsPeriods');

        
        OTBCONSPERI.DELETE;

        
        NUIDX := TBCOSSPECS.FIRST;

        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            
            
            IF (NOT OTBCONSPERI.EXISTS(TBCOSSPECS(NUIDX))) THEN
                
                OTBCONSPERI(TBCOSSPECS(NUIDX)) := TBCOSSPECS(NUIDX);
            END IF;

            
            NUIDX := TBCOSSPECS.NEXT (NUIDX);
        
        END LOOP;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETCONSUMSPERIODS;
    
    



























    PROCEDURE LOADPRODCONSUMBILL
    (
        INUPRODUCT      IN  SERVSUSC.SESUNUSE%TYPE,
        ITBCNCCONSU     IN  PKTBLCONCEPTO.TYCONCCODI
    )
    IS
        
        TBPERICOSE      TYTBPECSCONS;

        
        NUIDX           NUMBER;

        
        NUIDX1          NUMBER;

        
        NUNEXT          NUMBER;
        
        
        TBCARGCONCTMP   PKBCCARGOS.TYTBCARGCONC;
        
        
        TBCARGCODOTMP   PKTBLCARGOS.TYCARGCODO;
        
        TBCARGCONS      PKTBLCARGOS.TYCARGCODO;
        
        TBCARGCONSCTRL  TYTBCARGCODO;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProdConsumBill');

        
        PKBORATINGMEMORYMGR.GETCONSUMSPERIODS(TBPERICOSE);

        
        NUIDX := TBPERICOSE.LAST;

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            
            PKBCCARGOS.GETBILLEDCONSUMCHARGES
    	    (
                INUPRODUCT,
                TBPERICOSE(NUIDX),
                TBCARGCONCTMP,
                TBCARGCODOTMP
            );

            
            GTBCONSDOCU(TBPERICOSE(NUIDX)).TBCARGCONC := TBCARGCONCTMP;
            GTBCONSDOCU(TBPERICOSE(NUIDX)).TBCARGCODO := TBCARGCODOTMP;
            
            
            NUIDX := TBPERICOSE.PRIOR(NUIDX);
        
        END LOOP;
        
        
        NUIDX := TBCARGCONCTMP.FIRST;

        
        NUIDX1 := 1;

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            
            IF ( ITBCNCCONSU.EXISTS(TBCARGCONCTMP(NUIDX))) THEN
            
                
                

                IF((NOT TBCARGCONSCTRL.EXISTS(TBCARGCODOTMP(NUIDX))) AND
                    (PKBCCONSSESU.FBLVALIDATECONSPROD(TBCARGCODOTMP(NUIDX),INUPRODUCT)) ) THEN
                    
                    TBCARGCONS(NUIDX1) := TBCARGCODOTMP(NUIDX);
                    TBCARGCONSCTRL(TBCARGCODOTMP(NUIDX)) := TBCARGCODOTMP(NUIDX);
                    
                    NUIDX1 := NUIDX1 + 1;
                END IF;

            
            END IF;
            
            
            NUIDX := TBCARGCONCTMP.NEXT(NUIDX);
        
        END LOOP;
        
        
        TBCARGCONCTMP.DELETE;
        TBCARGCODOTMP.DELETE;
        
        
        NUIDX := TBCOSSTCON.FIRST;
        NUNEXT := TBCOSSTCON.LAST+1;

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            
            TBCOSSCOFA(NUIDX) := PKCONSTANTE.NO;

            
            NUIDX := TBCOSSTCON.NEXT(NUIDX);
        
        END LOOP;

        
        PKBCCONSSESU.GETCONSUMPBYCONSEC
        (
            TBCARGCONS,
    		TBCOSSROWID,
    		TBCOSSTCON,
    		TBCOSSPEFA,
    		TBCOSSPECS,
    		TBCOSSCOCA,
    		TBCOSSCMSS,
    		TBCOSSELME,
    		TBCOSSFERE,
    		TBCOSSCONS
        );
        
        
        IF(TBCOSSTCON.EXISTS(NUNEXT)) THEN
            NUIDX := NUNEXT;
        ELSE
            NUIDX := NULL;
        END IF;

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            
            TBCOSSCOFA(NUIDX) := PKCONSTANTE.SI;

            
            NUIDX := TBCOSSTCON.NEXT(NUIDX);
        
        END LOOP;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END LOADPRODCONSUMBILL;
    
    




























    PROCEDURE LOADPRODCONSUMLIQ
    IS
        
        TBCONSCONCMEM     PKTBLCARGOS.TYCARGCONC;
        
        NUIDXCNC        NUMBER;
        
        
        NUPRODUCT       SERVSUSC.SESUNUSE%TYPE;
        
        RCBILLPERIOD    PERIFACT%ROWTYPE;
        
        
        TBGENCHARGES    PKBCCARGOS.TYTBRCCARGOS;
        
        NUIDXCHRG       NUMBER;
        
        
        TBCARGCODOCTRL  TYTBCARGCODO;
        
        NUCARGCODO      CARGOS.CARGCODO%TYPE;
        
        TBCARGCODOTMP   PKTBLCARGOS.TYCARGCODO ;
        
        NUIDXCONS       NUMBER;
        
        
        PROCEDURE GETINSTANCEDATA
        IS
        BEGIN
        
            PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProdConsumLiq.GetInstanceData');

            
            PKINSTANCEDATAMGR.GETCG_SUBSSERVICE(NUPRODUCT) ;
            
            
            PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCBILLPERIOD) ;

            PKERRORS.POP ;
        EXCEPTION
            WHEN LOGIN_DENIED THEN
                PKERRORS.POP;
                RAISE LOGIN_DENIED;
            WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
                
                PKERRORS.POP;
                RAISE PKCONSTANTE.EXERROR_LEVEL2;
            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
        
        END GETINSTANCEDATA;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.LoadProdConsumLiq');
        
        
        GETINSTANCEDATA;

        
        
        
        
        PKBORATINGMEMORYMGR.GETCONSUMSCONCEPTS(TBCONSCONCMEM);

        
        NUIDXCNC := TBCONSCONCMEM.FIRST;

        LOOP
        
            
            EXIT WHEN NUIDXCNC IS NULL;
    	    
    	    
            
            
            PKBORATINGMEMORYMGR.GETRATEDCHARGESARRAY
            (
                NUPRODUCT,
                TBCONSCONCMEM(NUIDXCNC),
                RCBILLPERIOD.PEFACODI,
                NULL,
                TBGENCHARGES
            );

            
            
            
            
            
            
            
            
            TBCARGCODOTMP.DELETE;
            NUIDXCONS := 1;
            
            
            NUIDXCHRG := TBGENCHARGES.FIRST;

            
            WHILE (NUIDXCHRG IS NOT NULL) LOOP

                
                NUCARGCODO := TBGENCHARGES(NUIDXCHRG).CARGCODO;
                
                TD('nuCargcodo '||NUCARGCODO);
                TD('nuProduct '||NUPRODUCT);
                
                
                IF((NOT TBCARGCODOCTRL.EXISTS(NUCARGCODO)) AND
                    (PKBCCONSSESU.FBLVALIDATECONSPROD(NUCARGCODO,NUPRODUCT)) ) THEN

                    
                    TBCARGCODOTMP(NUIDXCONS) := NUCARGCODO;
                    TBCARGCODOCTRL(NUCARGCODO) := NUCARGCODO;
                    
                    NUIDXCONS := NUIDXCONS + 1;
                END IF;

                
                NUIDXCHRG := TBGENCHARGES.NEXT(NUIDXCHRG);
            END LOOP;

            
            
            

            
            IF ( TBCARGCODOTMP.FIRST IS NOT NULL ) THEN

                
                PKBCCONSSESU.GETCONSUMPBYCONSEC
                (
                    TBCARGCODOTMP,
                    TBCOSSROWID,
                    TBCOSSTCON,
                    TBCOSSPEFA,
                    TBCOSSPECS,
                    TBCOSSCOCA,
                    TBCOSSCMSS,
                    TBCOSSELME,
                    TBCOSSFERE,
                    TBCOSSCONS
                );
            END IF;

            
            NUIDXCNC := TBCONSCONCMEM.NEXT (NUIDXCNC);
        
        END LOOP;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END LOADPRODCONSUMLIQ;
    
    























    PROCEDURE GETCONSBILLCHARGES
    (
        INUCONCEPT      IN  CARGOS.CARGNUSE%TYPE,
        INUCONSPERIOD   IN  CARGOS.CARGPECO%TYPE,
        ONUCONSECUT     OUT CARGOS.CARGCODO%TYPE
    )
    IS
        
        NUIDX   NUMBER;
        
        
        TBCARGCONCTMP   PKBCCARGOS.TYTBCARGCONC;
        
        TBCARGCODOTMP   PKTBLCARGOS.TYCARGCODO;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetConsBillCharges');
        
        IF (GTBCONSDOCU.EXISTS(INUCONSPERIOD)) THEN

            
            TBCARGCONCTMP := GTBCONSDOCU(INUCONSPERIOD).TBCARGCONC;
            TBCARGCODOTMP := GTBCONSDOCU(INUCONSPERIOD).TBCARGCODO;

            
            NUIDX := TBCARGCONCTMP.FIRST;

            
            WHILE (NUIDX IS NOT NULL) LOOP

                
                IF( TBCARGCONCTMP(NUIDX) = INUCONCEPT ) THEN
                    ONUCONSECUT := TBCARGCODOTMP(NUIDX);
                    EXIT;
                END IF;
                
                
                NUIDX := TBCARGCONCTMP.NEXT(NUIDX);
            END LOOP;
        END IF;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETCONSBILLCHARGES;

    























    FUNCTION FNUGETCONSUNITBILLPERTYPE
    (
        INUCONSTYPE     IN  CONSSESU.COSSTCON%TYPE,
        INUCONSPERIOD   IN  CARGOS.CARGPECO%TYPE
    )
    RETURN NUMBER
    IS
        
        TBPRODCONS      PKBORATINGMEMORYMGR.TYTBCONSPECOTICO;
        
        
        SBHASH          VARCHAR2(200);
        
        
        NUUNITBILL      NUMBER;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.fnuGetConsUnitBillPerType');

        
        SBHASH := FSBHASHCONSUM(INUCONSTYPE, INUCONSPERIOD);
        
        
        PKINSTANCEDATAMGR.GETCG_CONSUMDATATABLE( TBPRODCONS );

         
         IF ( TBPRODCONS.EXISTS(SBHASH) ) THEN
         
            
            NUUNITBILL := TBPRODCONS(SBHASH).NUCONSFACT;
         
         END IF;

        
        NUUNITBILL := NVL(NUUNITBILL,0);

        PKERRORS.POP;
        RETURN NUUNITBILL;
        
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END FNUGETCONSUNITBILLPERTYPE;
    
    






















    FUNCTION FNUGETCONSUNITPERTYPE
    (
        INUCONSTYPE     IN  CONSSESU.COSSTCON%TYPE,
        INUCONSPERIOD   IN  CARGOS.CARGPECO%TYPE
    )
    RETURN NUMBER
    IS
        
        TBPRODCONS      PKBORATINGMEMORYMGR.TYTBCONSPECOTICO;

        
        SBHASH          VARCHAR2(200);

        
        NUUNITS        NUMBER;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.fnuGetConsUnitPerType');

        
        SBHASH := FSBHASHCONSUM(INUCONSTYPE, INUCONSPERIOD);

        
        PKINSTANCEDATAMGR.GETCG_CONSUMDATATABLE( TBPRODCONS );

         
         IF ( TBPRODCONS.EXISTS(SBHASH) ) THEN
         
            
            NUUNITS := TBPRODCONS(SBHASH).NUCONSUMO;
         
         END IF;

        
        NUUNITS := NVL(NUUNITS,0);

        PKERRORS.POP;
        RETURN NUUNITS;
        
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END FNUGETCONSUNITPERTYPE;
    
    


























    PROCEDURE GETRANKPRODARRAYSBYCONCANDPER
    (
    	INUCONCEPT     IN  CONCEPTO.CONCCODI%TYPE,
    	INUPERIOD      IN  PERICOSE.PECSCONS%TYPE,
    	INUPRODUCT     IN  CARGOS.CARGNUSE%TYPE,
    	ORCTBRANGLIQU  OUT NOCOPY PKTBLRANGLIQU.TYTBRANGLIQU
    )
    IS
        
        NUINDEXOUT  NUMBER;

        
        NUINDEX     NUMBER;
    BEGIN

        PKERRORS.PUSH('pkBORatingMemoryMgr.GetRankProdArraysByConcAndPer');

        NUINDEX := TBRANGLIQUPRO.FIRST;

        LOOP

            EXIT WHEN NUINDEX IS NULL;

            IF (
                    TBRANGLIQUPRO(NUINDEX).RALICONC = INUCONCEPT AND
                    TBRANGLIQUPRO(NUINDEX).RALIPECO = INUPERIOD AND
                    TBRANGLIQUPRO(NUINDEX).RALISESU = INUPRODUCT
               ) THEN

                NUINDEXOUT := NVL(ORCTBRANGLIQU.RALIIDRE.LAST,0)+1;

                ORCTBRANGLIQU.RALIIDRE(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIIDRE;
                ORCTBRANGLIQU.RALILIIR(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALILIIR;
                ORCTBRANGLIQU.RALILISR(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALILISR;
                ORCTBRANGLIQU.RALIUNLI(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIUNLI;
                ORCTBRANGLIQU.RALIVAUL(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIVAUL;
                ORCTBRANGLIQU.RALIVASU(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIVASU;
                ORCTBRANGLIQU.RALIPECO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIPECO;
                ORCTBRANGLIQU.RALICODO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALICODO;
                ORCTBRANGLIQU.RALITICO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALITICO;
                ORCTBRANGLIQU.RALICONC(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALICONC;
                ORCTBRANGLIQU.RALIVALO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIVALO;
                ORCTBRANGLIQU.RALIPORC(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIPORC;
                ORCTBRANGLIQU.RALIVACO(NUINDEXOUT) := TBRANGLIQUPRO(NUINDEX).RALIVACO;

            END IF;

            NUINDEX :=  TBRANGLIQUPRO.NEXT(NUINDEX);

        END LOOP;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);

    END GETRANKPRODARRAYSBYCONCANDPER;

    




































    PROCEDURE GETCHRGARRBYCONCANDPER
    (
        INUCONCEPT	    IN CARGOS.CARGCONC%TYPE,
        INUPERICOSE	    IN CARGOS.CARGPECO%TYPE,
        INUPRODUCT      IN CARGOS.CARGNUSE%TYPE,
    	OTBCARGNUSE	   OUT NOCOPY	PKTBLCARGOS.TYCARGNUSE,
    	OTBCARGSIGN	   OUT NOCOPY	PKTBLCARGOS.TYCARGSIGN,
    	OTBCARGDOSO	   OUT NOCOPY	PKTBLCARGOS.TYCARGDOSO,
    	OTBCARGVALO	   OUT NOCOPY	PKTBLCARGOS.TYCARGVALO,
    	OTBCARGUNID	   OUT NOCOPY	PKTBLCARGOS.TYCARGUNID,
    	OTBCARGTIPR	   OUT NOCOPY	PKTBLCARGOS.TYCARGTIPR,
    	OTBCARGPEFA	   OUT NOCOPY	PKTBLCARGOS.TYCARGPEFA,
    	OTBCARGCODO	   OUT NOCOPY	PKTBLCARGOS.TYCARGCODO,
    	OTBCARGTICO	   OUT NOCOPY	PKTBLTIPOCONS.TYTCONCODI,
    	OTBCARGPECO	   OUT NOCOPY	PKTBLPERICOSE.TYPECSCONS,
    	OTBCARGMEMO	   OUT NOCOPY	PKBCCARGOS.TYTBCARGFLFA
    )
    IS
        
        NUIDX NUMBER ;

        NUIDXNEW	NUMBER ;
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgArrByConcAndPer');

        
        OTBCARGNUSE.DELETE ;
        OTBCARGSIGN.DELETE ;
        OTBCARGDOSO.DELETE ;
        OTBCARGVALO.DELETE ;
        OTBCARGUNID.DELETE ;
        OTBCARGTIPR.DELETE ;
        OTBCARGPEFA.DELETE ;
        OTBCARGCODO.DELETE ;
        OTBCARGTICO.DELETE ;
        OTBCARGPECO.DELETE ;
        OTBCARGMEMO.DELETE ;

        
        NUIDX := TBMEMCARGCONC.FIRST;

        LOOP

            
            EXIT WHEN NUIDX IS NULL;

            
            IF ( TBMEMCARGCONC (NUIDX) = INUCONCEPT AND
                 TBMEMCARGPECO (NUIDX) = INUPERICOSE AND
                 TBMEMCARGNUSE (NUIDX) = INUPRODUCT
                ) THEN

        	    
    	        NUIDXNEW := NVL (OTBCARGNUSE.LAST,0) + 1;

                
        	    OTBCARGNUSE (NUIDXNEW) := TBMEMCARGNUSE (NUIDX) ;
        	    OTBCARGSIGN (NUIDXNEW) := TBMEMCARGSIGN (NUIDX) ;
        	    OTBCARGDOSO (NUIDXNEW) := TBMEMCARGDOSO (NUIDX) ;
        	    OTBCARGVALO	(NUIDXNEW) := TBMEMCARGVALO (NUIDX) ;
                OTBCARGUNID (NUIDXNEW) := TBMEMCARGUNID (NUIDX) ;
        	    OTBCARGTIPR (NUIDXNEW) := TBMEMCARGTIPR (NUIDX) ;
        	    OTBCARGPEFA (NUIDXNEW) := TBMEMCARGPEFA (NUIDX) ;
        	    OTBCARGCODO	(NUIDXNEW) := TBMEMCARGCODO (NUIDX) ;
        	    OTBCARGTICO	(NUIDXNEW) := TBMEMCARGTICO (NUIDX) ;
        	    OTBCARGPECO (NUIDXNEW) := TBMEMCARGPECO (NUIDX) ;
        	    OTBCARGMEMO	(NUIDXNEW) := TBMEMCARGMEMO (NUIDX) ;

            END IF;

            
            NUIDX := TBMEMCARGCONC.NEXT (NUIDX);

        END LOOP;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

    END GETCHRGARRBYCONCANDPER;

    






























    PROCEDURE GETRATEDCHRGARRAYPOST
    (
        OTBCARGOSGEN OUT NOCOPY TYTBLIQCHARGES
    )
    IS
        
        NUSIGNO     NUMBER(1);

        
        NUIDX       NUMBER;

        
        NUCONCEPTO  CARGOS.CARGCONC%TYPE;

        
        NUPERICOSE  PERICOSE.PECSCONS%TYPE;

        
        RCPERICOSE  PERICOSE%ROWTYPE;

        
        RCPERICARG  PERICOSE%ROWTYPE;

        PROCEDURE GETINSTANCEDATA
        IS
        BEGIN
        
            PKERRORS.PUSH ('pkBORatingMemoryMgr.GetRatedChrgArrayPost.GIData');

            
            PKINSTANCEDATAMGR.OBTPERACTUAL( NUPERICOSE );

            PKERRORS.POP ;
        EXCEPTION
            WHEN LOGIN_DENIED THEN
                PKERRORS.POP;
                RAISE LOGIN_DENIED;
            WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
                
                PKERRORS.POP;
                RAISE PKCONSTANTE.EXERROR_LEVEL2;
            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
        
        END GETINSTANCEDATA ;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetRatedChrgArrayPost');

        
        GETINSTANCEDATA;

        
        OTBCARGOSGEN.DELETE ;

        
        PKBCPERICOSE.GETCACHERECORD(NUPERICOSE, RCPERICOSE);

        
        NUIDX := TBMEMCARGCONC.FIRST;

        
        LOOP
        
            
            EXIT WHEN NUIDX IS NULL;

            

            IF ( NOT (INSTR('-'||TBMEMCARGDOSO(NUIDX)||'-','-'||PKBILLCONST.CSBTOKEN_DIFERIDO) > 0 OR
                      INSTR('-'||TBMEMCARGDOSO(NUIDX)||'-','-'||PKBILLCONST.CSBTOKEN_CUOTA_EXTRA) > 0 OR
                      INSTR('-'||TBMEMCARGDOSO(NUIDX)||'-','-'||PKBILLCONST.CSBTOKEN_FINANCIACION) > 0
                     )
               ) THEN
            

                
                NUCONCEPTO := TBMEMCARGCONC (NUIDX) ;

                
                NUSIGNO := 1;

                
                IF ( TBMEMCARGSIGN (NUIDX) = PKBILLCONST.CREDITO )
                THEN
                    
                    NUSIGNO := -1;
                END IF;

                
                IF ( TBMEMCARGPECO(NUIDX) IS NOT NULL ) THEN
                
                    
                    PKBCPERICOSE.GETCACHERECORD(TBMEMCARGPECO(NUIDX), RCPERICARG);

                    
                    IF ( RCPERICOSE.PECSFECI < RCPERICARG.PECSFECI AND
                         RCPERICOSE.PECSFECF < RCPERICARG.PECSFECF AND
                         RCPERICOSE.PECSFEAI < RCPERICARG.PECSFEAI AND
                         RCPERICOSE.PECSFEAF < RCPERICARG.PECSFEAF )
                    THEN
                    
                        
                        IF (OTBCARGOSGEN.EXISTS (NUCONCEPTO)) THEN
                        
                            
                            OTBCARGOSGEN (NUCONCEPTO).NUVALUE :=
                            OTBCARGOSGEN (NUCONCEPTO).NUVALUE + (TBMEMCARGVALO(NUIDX)*NUSIGNO);

                            OTBCARGOSGEN (NUCONCEPTO).NUBASEVAL :=
                            OTBCARGOSGEN (NUCONCEPTO).NUBASEVAL + (TBMEMCARGVABL(NUIDX)*NUSIGNO);
                        
                        ELSE
                        
                            
                            OTBCARGOSGEN (NUCONCEPTO).NUCONCEPT := NUCONCEPTO ;

                            OTBCARGOSGEN (NUCONCEPTO).NUVALUE := TBMEMCARGVALO(NUIDX)*NUSIGNO;

                            OTBCARGOSGEN (NUCONCEPTO).NUBASEVAL := TBMEMCARGVABL(NUIDX)*NUSIGNO;
                        
                        END IF;
                    
                    END IF;
                
                END IF;
            
            END IF;

            
            NUIDX := TBMEMCARGCONC.NEXT (NUIDX);
        
        END LOOP;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETRATEDCHRGARRAYPOST;


    
































    PROCEDURE GETCHRGBYSESUPEFACONCFECH
    (
        INUPRODUCT      IN  SERVSUSC.SESUNUSE%TYPE,
        INUBILLPERIOD   IN  PERIFACT.PEFACODI%TYPE,
        INUCONCEPT      IN  CONCEPTO.CONCCODI%TYPE,
        OTBCHARGES      OUT NOCOPY  PKTBLCARGOS.TYTBCARGOS
    )
    IS
        
        NUIDXMEM        NUMBER ;

        
        NUIDXOUT        NUMBER ;
    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChrgBySesuPefaConcFech');
        TD ('pkBORatingMemoryMgr.GetChrgBySesuPefaConcFech');

        
        NUIDXMEM := TBMEMCARGCONC.FIRST;
        TD('Cargos en memoria: '||TBMEMCARGCONC.COUNT);
        TD('inuProduct: '||INUPRODUCT||' inuBillPeriod: '||INUBILLPERIOD||
           ' inuConcept: '||INUCONCEPT);

        LOOP
            
            EXIT WHEN NUIDXMEM IS NULL;

            TD('tbMemCargconc: '||TBMEMCARGCONC (NUIDXMEM)||
            ' tbMemCargpeco: '||TBMEMCARGPECO (NUIDXMEM)||
            ' tbMemCargnuse: '||TBMEMCARGNUSE (NUIDXMEM)||
            ' tbMemCargfecr: '||TBMEMCARGFECR (NUIDXMEM)||
            ' tbMemCargpefa: '||TBMEMCARGPEFA (NUIDXMEM));

            
            IF ( TBMEMCARGCONC (NUIDXMEM) = INUCONCEPT AND
                 TBMEMCARGNUSE (NUIDXMEM) = INUPRODUCT AND
                 TBMEMCARGPEFA (NUIDXMEM) = INUBILLPERIOD )
            THEN
            

        	    
        	    NUIDXOUT := NVL (OTBCHARGES.CARGCONC.LAST,0) + 1;

                
        	    OTBCHARGES.CARGCONC (NUIDXOUT) := TBMEMCARGCONC (NUIDXMEM) ;
                OTBCHARGES.CARGNUSE (NUIDXOUT) := TBMEMCARGNUSE (NUIDXMEM) ;
                OTBCHARGES.CARGSIGN (NUIDXOUT) := TBMEMCARGSIGN (NUIDXMEM) ;
                OTBCHARGES.CARGDOSO (NUIDXOUT) := TBMEMCARGDOSO (NUIDXMEM) ;
                OTBCHARGES.CARGVALO (NUIDXOUT) := TBMEMCARGVALO (NUIDXMEM) ;
                OTBCHARGES.CARGUNID (NUIDXOUT) := TBMEMCARGUNID (NUIDXMEM) ;
                OTBCHARGES.CARGTIPR (NUIDXOUT) := TBMEMCARGTIPR (NUIDXMEM) ;
                OTBCHARGES.CARGPEFA (NUIDXOUT) := TBMEMCARGPEFA (NUIDXMEM) ;
                OTBCHARGES.CARGCODO (NUIDXOUT) := TBMEMCARGCODO (NUIDXMEM) ;
                OTBCHARGES.CARGVABL (NUIDXOUT) := TBMEMCARGVABL (NUIDXMEM) ;
                OTBCHARGES.CARGTICO (NUIDXOUT) := TBMEMCARGTICO (NUIDXMEM) ;
                OTBCHARGES.CARGPECO (NUIDXOUT) := TBMEMCARGPECO (NUIDXMEM) ;
                OTBCHARGES.CARGFECR (NUIDXOUT) := TBMEMCARGFECR (NUIDXMEM) ;
                OTBCHARGES.CARGPROG (NUIDXOUT) := TBMEMCARGPROG (NUIDXMEM) ;
            
            END IF;

            
            NUIDXMEM := TBMEMCARGCONC.NEXT (NUIDXMEM);
        
        END LOOP;

        TD('Cargos encontrados: '||OTBCHARGES.CARGCONC.COUNT);

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETCHRGBYSESUPEFACONCFECH;

    
























    PROCEDURE GETCHARGESBYPRODANDPEFA
    (
        INUPRODUCT      IN  CARGOS.CARGNUSE%TYPE,
        OTBCHARGES      OUT NOCOPY  PKTBLCARGOS.TYTBCARGOS
    )
    IS
        
        RCBILLPERIOD    PERIFACT%ROWTYPE ;

        
        NUIDXMEM        NUMBER ;

        
        NUIDXOUT        NUMBER ;

        PROCEDURE GETINSTANCEDATA IS
        BEGIN
        
            PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChargesByProdAndPefa.GetInstanceData');

            
            PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD (RCBILLPERIOD) ;

            PKERRORS.POP ;
        EXCEPTION
            WHEN LOGIN_DENIED THEN
                PKERRORS.POP;
                RAISE LOGIN_DENIED;
            WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
                
                PKERRORS.POP;
                RAISE PKCONSTANTE.EXERROR_LEVEL2;
            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
        
        END GETINSTANCEDATA ;

    BEGIN
    
        PKERRORS.PUSH ('pkBORatingMemoryMgr.GetChargesByProdAndPefa');
        TD ('pkBORatingMemoryMgr.GetChargesByProdAndPefa');

        
        GETINSTANCEDATA;

        
        NUIDXMEM := TBMEMCARGCONC.FIRST;
        TD('Cargos en memoria: '||TBMEMCARGCONC.COUNT);
        TD('inuProduct: '||INUPRODUCT||' BillPeriod: '||RCBILLPERIOD.PEFACODI);

        LOOP
            
            EXIT WHEN NUIDXMEM IS NULL;

            TD(' tbMemCargnuse: '||TBMEMCARGNUSE (NUIDXMEM)||
            ' tbMemCargpefa: '||TBMEMCARGPEFA (NUIDXMEM));

            
            IF ( TBMEMCARGNUSE (NUIDXMEM) = INUPRODUCT AND
                 TBMEMCARGPEFA (NUIDXMEM) = RCBILLPERIOD.PEFACODI )
            THEN
            

        	    
        	    NUIDXOUT := NVL (OTBCHARGES.CARGCONC.LAST,0) + 1;

                
        	    OTBCHARGES.CARGCONC (NUIDXOUT) := TBMEMCARGCONC (NUIDXMEM) ;
                OTBCHARGES.CARGNUSE (NUIDXOUT) := TBMEMCARGNUSE (NUIDXMEM) ;
                OTBCHARGES.CARGSIGN (NUIDXOUT) := TBMEMCARGSIGN (NUIDXMEM) ;
                OTBCHARGES.CARGDOSO (NUIDXOUT) := TBMEMCARGDOSO (NUIDXMEM) ;
                OTBCHARGES.CARGVALO (NUIDXOUT) := TBMEMCARGVALO (NUIDXMEM) ;
                OTBCHARGES.CARGUNID (NUIDXOUT) := TBMEMCARGUNID (NUIDXMEM) ;
                OTBCHARGES.CARGTIPR (NUIDXOUT) := TBMEMCARGTIPR (NUIDXMEM) ;
                OTBCHARGES.CARGPEFA (NUIDXOUT) := TBMEMCARGPEFA (NUIDXMEM) ;
                OTBCHARGES.CARGCODO (NUIDXOUT) := TBMEMCARGCODO (NUIDXMEM) ;
                OTBCHARGES.CARGVABL (NUIDXOUT) := TBMEMCARGVABL (NUIDXMEM) ;
                OTBCHARGES.CARGTICO (NUIDXOUT) := TBMEMCARGTICO (NUIDXMEM) ;
                OTBCHARGES.CARGPECO (NUIDXOUT) := TBMEMCARGPECO (NUIDXMEM) ;
                OTBCHARGES.CARGFECR (NUIDXOUT) := TBMEMCARGFECR (NUIDXMEM) ;
                OTBCHARGES.CARGPROG (NUIDXOUT) := TBMEMCARGPROG (NUIDXMEM) ;
            
            END IF;

            
            NUIDXMEM := TBMEMCARGCONC.NEXT (NUIDXMEM);
        
        END LOOP;

        TD('Cargos encontrados: '||OTBCHARGES.CARGCONC.COUNT);

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END GETCHARGESBYPRODANDPEFA;
    
    






















    FUNCTION FBOEXISTSBILLCONSUMPT
    (
        IRCPRODCONS     IN  TYRCCONSPECOTICO
    ) RETURN BOOLEAN
    IS

        
        NUIDX       NUMBER;

        
        BOEXISTS    BOOLEAN := FALSE;
        
        
        NUIDXREC    NUMBER;
    BEGIN

        PKERRORS.PUSH ('pkBORatingMemoryMgr.fboExistsBillConsumpt');

        
        NUIDX := IRCPRODCONS.TBIDXCONS.FIRST;

        
        WHILE (NUIDX IS NOT NULL) LOOP

            
            NUIDXREC := IRCPRODCONS.TBIDXCONS(NUIDX);

            
            IF ( TBCOSSCOFA(NUIDXREC) = PKCONSTANTE.SI ) THEN
                BOEXISTS := TRUE;
                EXIT;
            END IF;

            
            NUIDX := IRCPRODCONS.TBIDXCONS.NEXT(NUIDX);
        END LOOP;

        PKERRORS.POP;

        
        RETURN BOEXISTS;
        
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    
    END FBOEXISTSBILLCONSUMPT;

END PKBORATINGMEMORYMGR;