PACKAGE BODY CM_BOConsumptionEngine AS






























































































    
    
    
    SUBTYPE STYSOURCE IS VARCHAR2(120);
    TYPE TYTBCONSBYSOURCE IS TABLE OF TYTBUPLOADEDCONS INDEX BY STYSOURCE;
    
    
    
    
    
    
    

    
    
    CSBVERSION           CONSTANT VARCHAR2(25)     := 'SAO405563';

    
    CNUSITUATIONACTIVITY CONSTANT NUMBER           := 102010;
    CNUTRANSITIONTYPE    CONSTANT NUMBER           := 11;


    
    CNUMSG_ERROR_1       CONSTANT NUMBER           := 901096;
    
    
    CNUMSG_ERROR_2       CONSTANT NUMBER           := 901097;

    
    CNUDEFAULT_REVIEW    CONSTANT NUMBER           :=
    PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE('GRADE_VARIATION');

    
    
    
    
    
    
    
    
    
    
    
    

    GSBMSGERR               GE_ERROR_LOG.DESCRIPTION%TYPE ;  

    

    GRCPRODUCT              SERVSUSC%ROWTYPE;           
    GRCREADINGREGISTRY      LECTELME%ROWTYPE;           
    GRCORDER                DAOR_ORDER.STYOR_ORDER;     
    GNUREADINGSCENARY       REMEVACO.RMVCACTI%TYPE;     
    GRCACTIVERULE           REMEVACO%ROWTYPE;           
    GRCCONSPERIOD           PERICOSE%ROWTYPE;           

    
    
    
    
    
    TBCONSBYSOURCE          TYTBCONSBYSOURCE;           
    GSBSOURCECONSUMPTION    CONSSESU.COSSFUFA%TYPE;     

    GBOCOMMONDATALOADED     BOOLEAN := FALSE;
    GNUUSERCODE             FUNCIONA.FUNCCODI%TYPE;



    
    
    
    TBORRELATIONSHIP        DAOR_RELATED_ORDER.TYTBOR_RELATED_ORDER;
    RCTBANALYSISORDER       PKTBLCM_ORDECRIT.TYTBCM_ORDECRIT;
    GNURELATIONCOUNT        NUMBER:= 0;
    GNUORDERSCOUNT          NUMBER:= 0;


    
    
    
    FUNCTION FBOFINDANDEXECUTERULES
    (
        INUCONSUMPTIONMETHOD    IN  REMEVACO.RMVCMEVC%TYPE,
        INUCONSUMPTIONTYPE      IN  REMEVACO.RMVCTICO%TYPE,
        INUREADINGSCENARY       IN  REMEVACO.RMVCACTI%TYPE
    )
    RETURN BOOLEAN;

    FUNCTION FBOFINDEXEESTIMRULES
    (
        INUCONSUMPTIONMETHOD    IN  REMEVACO.RMVCMEVC%TYPE
    )
    RETURN BOOLEAN;

    PROCEDURE SETDOWNANALYSISORDER;

    PROCEDURE REGISTERANALYSISORDER
    (
        INUPRODUCT              CM_ORDECRIT.ORCRSESU%TYPE,
        INUPRIORITY             CALIVACO.CAVCPROR%TYPE,
        INUCONSUMPTIONPERIOD    CM_ORDECRIT.ORCRPECO%TYPE,
        INUCONSUMPTIONTYPE      CM_ORDECRIT.ORCRTICO%TYPE,
        INUREADING              CM_ORDECRIT.ORCRLECT%TYPE,
        INUREADINGORDER         OR_ORDER.ORDER_ID%TYPE
    );

    PROCEDURE CLEANMEMORYANALYSISPROC;
    


















FUNCTION FSBVERSION RETURN VARCHAR2 IS
BEGIN

    RETURN CSBVERSION;

END FSBVERSION;























PROCEDURE STD
(
    ISBMSG   IN VARCHAR2,
    INULEVEL IN PLS_INTEGER DEFAULT 60
)
IS
BEGIN

    $IF $$DEBUG $THEN
        UT_TRACE.TRACE(ISBMSG, INULEVEL);
        TD(ISBMSG);
    $ELSE
        NULL;
    $END

END STD;









































PROCEDURE CALCULATECONSUMPTION
(
    IRCREADINGREGISTRY  IN  LECTELME%ROWTYPE,
    IRCORDER            IN  DAOR_ORDER.STYOR_ORDER,
    INUREADINGSCENARY   IN  OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE
)
IS
    
    
    
    BORULESFOUND        BOOLEAN := FALSE;
    TBINSERTEDDATA      GE_TYTBSTRING;

BEGIN
    STD('BEGIN CM_BOConsumptionEngine.CalculateConsumption',90);
    STD('-- Calculating Consumptions -- ');
    STD('   Reading ['||IRCREADINGREGISTRY.LEEMCONS||'] Producto ['||IRCREADINGREGISTRY.LEEMSESU||']');
    STD('   Order   ['||IRCORDER.ORDER_ID||']');
    STD('   Scenary ['||INUREADINGSCENARY||']');

    CLEARALLENGINEMEMORY;

    
    SETENGINEMEMORYDATA
    (
        IRCREADINGREGISTRY,                                                         
        IRCORDER,                                                                   
        PKTBLSERVSUSC.FRCGETRECORD(IRCREADINGREGISTRY.LEEMSESU,PKCONSTANTE.CACHE),  
        INUREADINGSCENARY,                                                          
        PKTBLPERICOSE.FRCGETRECORD(IRCREADINGREGISTRY.LEEMPECS,PKCONSTANTE.CACHE)   
    );

    
    
    
    
    BORULESFOUND :=
    FBOFINDANDEXECUTERULES
    (
        GRCPRODUCT.SESUMECV,            
        GRCREADINGREGISTRY.LEEMTCON,    
        GNUREADINGSCENARY               
        
    );

    IF ( NOT BORULESFOUND ) THEN
    
        STD('--(!) No hay reglas para Ejecutar --');

        
        
        GE_BOERRORS.SETERRORCODEARGUMENT(CNUMSG_ERROR_1,TO_CHAR(GRCPRODUCT.SESUMECV)||'|'||
                                                        TO_CHAR(GRCREADINGREGISTRY.LEEMTCON)||'|'||
                                                        TO_CHAR(GNUREADINGSCENARY));
    
    END IF;

    
    
    
    
    SETDOWNCONSUMPTIONS(TRUE,GSBSOURCECONSUMPTION,TBINSERTEDDATA);

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END CALCULATECONSUMPTION;







































PROCEDURE ESTIMATECONSUMPTION
(
    IRCPRODUCT           IN  SERVSUSC%ROWTYPE,
    IRCCONSUMPTIONPERIOD IN  PERICOSE%ROWTYPE
)
IS
    
    
    
    BORULESFOUND        BOOLEAN := FALSE;
    RCLECTELME          LECTELME%ROWTYPE;

BEGIN
    STD('BEGIN CM_BOConsumptionEngine.EstimateConsumption',90);
    STD('-- Estimating Consumptions -- ');
    STD('   Product ['||IRCPRODUCT.SESUNUSE||']');
    STD('   Period  ['||IRCCONSUMPTIONPERIOD.PECSCONS||']');
    
    
    
    RCLECTELME.LEEMPECS := IRCCONSUMPTIONPERIOD.PECSCONS;

    CLEARALLENGINEMEMORY;
    
    SETENGINEMEMORYDATA
    (
        RCLECTELME,          
        NULL,                
        IRCPRODUCT,          
        NULL,                
        IRCCONSUMPTIONPERIOD 
    );

    
    
    
    
    BORULESFOUND :=
    FBOFINDEXEESTIMRULES
    (
        GRCPRODUCT.SESUMECV 
    );

    IF ( NOT BORULESFOUND ) THEN
    
        STD('--(!) No hay reglas para Ejecutar --');

        
        GE_BOERRORS.SETERRORCODEARGUMENT(CNUMSG_ERROR_2,TO_CHAR(GRCPRODUCT.SESUMECV));
    
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END ESTIMATECONSUMPTION;





































FUNCTION FBOFINDEXEESTIMRULES
(
    INUCONSUMPTIONMETHOD    IN  REMEVACO.RMVCMEVC%TYPE
)
RETURN BOOLEAN
IS
    
    
    
    TBREMEVACO          CM_BOREMEVACO.TYTBRULELIST;
    NUIDX               CM_BOREMEVACO.STYRULECOUNT;
    
    SBDYNAMICPROCEDURE  REMEVACO.RMVCFUFA%TYPE;
    NUERRORCODE         GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 0;
    SBERRORMESSAGE      GE_ERROR_LOG.DESCRIPTION%TYPE  := NULL;
    
    TBINSERTEDDATA      GE_TYTBSTRING;

BEGIN
    STD('BEGIN CM_BOConsumptionEngine.fboFindExeEstimRules',90);

    CM_BOREMEVACO.GETRULESBYMETHOD
    (
        INUCONSUMPTIONMETHOD,   
        TBREMEVACO              
    );
    
    STD('Rules to Execute Count ['||TBREMEVACO.COUNT||']');
    NUIDX := TBREMEVACO.FIRST;

    
    IF ( NUIDX IS NULL ) THEN
    

        RETURN FALSE;
    
    END IF;

    LOOP
    EXIT WHEN ( NUIDX IS NULL );
        STD('-- -->> EXE ['||TBREMEVACO(NUIDX).RMVCFUFA||'] <<-- --');

        
        
        
        SETENGINEPROCMEMDATA( TBREMEVACO(NUIDX) );

        
        SBDYNAMICPROCEDURE := TBREMEVACO(NUIDX).RMVCFUFA;
        SBDYNAMICPROCEDURE := 'BEGIN '||SBDYNAMICPROCEDURE||
                              '(:nuErrorCode, :nuErrorMessage); END;';

        EXECUTE IMMEDIATE SBDYNAMICPROCEDURE USING OUT NUERRORCODE, OUT SBERRORMESSAGE;
        
        IF ( NUERRORCODE != 0 ) THEN
        
            STD('Error en regla ['||SBERRORMESSAGE||']');
            RAISE LOGIN_DENIED;
        
        END IF;

        
        
        
        
        SETDOWNCONSUMPTIONS(TRUE,GSBSOURCECONSUMPTION,TBINSERTEDDATA);

        CLEARCONSUMPTIONTABLE;
        SETCONSUMPTIONSOURCE(NULL);


        NUIDX := TBREMEVACO.NEXT( NUIDX );
    END LOOP;

    STD('All rules executed');
    RETURN TRUE;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END FBOFINDEXEESTIMRULES;






























FUNCTION FBOFINDANDEXECUTERULES
(
    INUCONSUMPTIONMETHOD    IN  REMEVACO.RMVCMEVC%TYPE,
    INUCONSUMPTIONTYPE      IN  REMEVACO.RMVCTICO%TYPE,
    INUREADINGSCENARY       IN  REMEVACO.RMVCACTI%TYPE
)
RETURN BOOLEAN
IS
    
    
    
    RCREMEVACO REMEVACO%ROWTYPE;
    SBDYNAMICPROCEDURE  REMEVACO.RMVCFUFA%TYPE;
    NUERRORCODE         GE_ERROR_LOG.ERROR_LOG_ID%TYPE := 0;
    SBERRORMESSAGE      GE_ERROR_LOG.DESCRIPTION%TYPE  := NULL;

BEGIN
    STD('BEGIN CM_BOConsumptionEngine.fboFindAndExecuteRules',90);
    
    
    
    
    RCREMEVACO :=
    CM_BOREMEVACO.FRCGETRULEBYMETHCTYACT
    (
        INUCONSUMPTIONMETHOD,  
        INUCONSUMPTIONTYPE,    
        INUREADINGSCENARY      
    );
    STD('ID Regla por mï¿½todo ['||RCREMEVACO.RMVCCONS||']');

    
    IF ( RCREMEVACO.RMVCCONS IS NULL ) THEN
    
        RETURN FALSE;
    
    END IF;

    
    
    
    SETENGINEPROCMEMDATA( RCREMEVACO );


    
    STD('-- -->> EXE ['||RCREMEVACO.RMVCFUFA||'] <<-- --');

    SBDYNAMICPROCEDURE := RCREMEVACO.RMVCFUFA;
    SBDYNAMICPROCEDURE := 'BEGIN '||SBDYNAMICPROCEDURE||
                          '(:nuErrorCode, :nuErrorMessage); END;';

    EXECUTE IMMEDIATE SBDYNAMICPROCEDURE USING OUT NUERRORCODE, OUT SBERRORMESSAGE;

    IF ( NUERRORCODE != 0 ) THEN
    
        STD('Error en regla ['||SBERRORMESSAGE||']');
        RAISE LOGIN_DENIED;
    
    END IF;

    RETURN TRUE;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END FBOFINDANDEXECUTERULES;






















PROCEDURE SETMEMCONSQUALIFICAT
(
    INUIDX               IN  NUMBER,
    ISBCONSUMPTIONSOURCE IN  CONSSESU.COSSFUFA%TYPE,
    INUQUALIFICATION     IN  CONSSESU.COSSCAVC%TYPE
)
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetMemConsQualificat',90);


    IF ( TBCONSBYSOURCE.EXISTS(ISBCONSUMPTIONSOURCE) AND
         TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).EXISTS( INUIDX ) ) THEN
    
        STD('Setting Qualification Idx['||INUIDX||'] Q['||INUQUALIFICATION||']');
        TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(INUIDX).NUQUALIFICATION := INUQUALIFICATION; 
    
    ELSE
        STD('Could not Qualify: Source ['||ISBCONSUMPTIONSOURCE||'] Position ['||INUIDX||'] does not exists');
    END IF;


EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SETMEMCONSQUALIFICAT;





















PROCEDURE SETSOURCEQUALIFICATION
(
    ISBCONSUMPTIONSOURCE IN  CONSSESU.COSSFUFA%TYPE,
    INUQUALIFICATION     IN  CONSSESU.COSSCAVC%TYPE
)
IS
    
    
    
    NUIDX   NUMBER;
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetSourceQualification',90);

    IF ( TBCONSBYSOURCE.EXISTS(ISBCONSUMPTIONSOURCE) ) THEN
    
        NUIDX := TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).FIRST;
        LOOP
            EXIT WHEN ( NUIDX IS NULL );
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUQUALIFICATION :=
            INUQUALIFICATION;

            NUIDX := TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).NEXT( NUIDX );
        END LOOP;
    ELSE
        STD('No Consumptions for given Source. ['||ISBCONSUMPTIONSOURCE||']');
    
    END IF;


EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SETSOURCEQUALIFICATION;
























PROCEDURE SETFACTORANDMODIFYCON
(
    INUIDX               IN  NUMBER,
    ISBCONSUMPTIONSOURCE IN  CONSSESU.COSSFUFA%TYPE,
    INUCORRECTFACTOR     IN  CONSSESU.COSSFCCO%TYPE,
    INUNEWCONSUMPTION    IN  CONSSESU.COSSCOCA%TYPE
)
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetFactorAndModifyCon',90);

    IF ( TBCONSBYSOURCE.EXISTS(ISBCONSUMPTIONSOURCE) AND
         TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).EXISTS( INUIDX ) ) THEN
    
        STD('Setting Factor and New Consumption Idx['||INUIDX           ||
           '] F['                                   ||INUCORRECTFACTOR ||
           '] NewC['                                ||INUNEWCONSUMPTION||']');
        
        TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(INUIDX).NUCORRECTFACTOR := INUCORRECTFACTOR;  
        TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(INUIDX).NUCONSUMPTION   := INUNEWCONSUMPTION; 
    
    ELSE
        STD('Could not SET Correct Factor: Source ['||ISBCONSUMPTIONSOURCE||'] Position ['||INUIDX||'] does not exists');
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SETFACTORANDMODIFYCON;





















PROCEDURE DELETECONSUMPTION
(
    ISBCONSUMPTIONSOURCE IN  CONSSESU.COSSFUFA%TYPE,
    INUIDX               IN  NUMBER
)
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.DeleteConsumption',90);

    IF ( TBCONSBYSOURCE.EXISTS(ISBCONSUMPTIONSOURCE) ) THEN
    
        STD('S['||ISBCONSUMPTIONSOURCE||'] idx['||INUIDX||'] deleted!');
        TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).DELETE(INUIDX);
    ELSE
        STD('Source not Found! ['||ISBCONSUMPTIONSOURCE||']');
    
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END DELETECONSUMPTION;






































































PROCEDURE SETDOWNCONSUMPTIONS
(
    IBOGENANALYSISORDER  IN BOOLEAN,
    ISBCONSUMPTIONSOURCE IN CONSSESU.COSSFUFA%TYPE,
    OTBINSERTEDDATA      OUT NOCOPY GE_TYTBSTRING
)
IS
    
    
    
    RCQUALIFICATION         CALIVACO%ROWTYPE;
    NUIDX                   NUMBER;

    TBROWIDS                GE_TYTBSTRING;
    TBDATAINSERTED          GE_TYTBSTRING;

    NUROUNDEDCONSUMPTION    CONSSESU.COSSCOCA%TYPE;
    NUAUTOQUALIFICATION     CONSSESU.COSSCAVC%TYPE;
    
    NUBILLPERIOD            CONSSESU.COSSPEFA%TYPE;
    
    SBCLOSEDPERIOD          VARCHAR2(10);

    
    
    
    

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        PROCEDURE LOADCOMMONDATA
        IS
            
            
            
            SBUSER  FUNCIONA.FUNCUSBA%TYPE;

        BEGIN
            STD('BEGIN CM_BOConsumptionEngine.SetDownConsumptions.LoadCommonData',90);
            

            BEGIN
            
                SBUSER      := PKGENERALSERVICES.FSBGETUSERNAME;
                GNUUSERCODE := PKBCFUNCIONA.FRCFUNCIONA(SBUSER).FUNCCODI;

            EXCEPTION
            
                WHEN OTHERS THEN
                GNUUSERCODE := PKBCFUNCIONA.FNUGETFUNCIONA(GRCREADINGREGISTRY.LEEMPETL);
            END;

            GBOCOMMONDATALOADED := TRUE;
        EXCEPTION
            WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                RAISE;
            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
                RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

        END LOADCOMMONDATA;
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        PROCEDURE LOADINDIVIDUALDATA
        IS
            
            
            
            RCINDIVIDUALPRODUCT SERVSUSC%ROWTYPE;
            NUBILLINGCYCLE      SERVSUSC.SESUCICL%TYPE;
            
        BEGIN
            STD('CM_BOConsumptionEngine.SetDownConsumptions.LoadIndividualData');
        
            
            
            
            
            
            IF ( GRCPRODUCT.SESUNUSE IS NULL OR
                 GRCPRODUCT.SESUNUSE != TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUPRODUCT ) THEN
            
                STD(' ...Diff Product');
                RCINDIVIDUALPRODUCT :=
                PKTBLSERVSUSC.FRCGETRECORD(TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUPRODUCT);
                NUBILLINGCYCLE := RCINDIVIDUALPRODUCT.SESUCICL;
            ELSE

                NUBILLINGCYCLE := GRCPRODUCT.SESUCICL;
            
            END IF;
            
            
            
            BEGIN
                NUBILLPERIOD := PKBCPERIFACT.FNUBILLPERBYCONSPER(TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTIONPERIOD);
            EXCEPTION
                WHEN OTHERS THEN
                NUBILLPERIOD := PKBILLINGPERIODMGR.FRCGETCACHEDCURRENTPER(NUBILLINGCYCLE).PEFACODI;
            END;

        EXCEPTION
            WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                STD('Error en: CM_BOConsumptionEngine.SetDownConsumptions.LoadIndividualData');
                RAISE;
            WHEN OTHERS THEN
                STD('Error en: CM_BOConsumptionEngine.SetDownConsumptions.LoadIndividualData');
                PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
                RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

        END LOADINDIVIDUALDATA;


    

BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetDownConsumptions',90);

    
    
    
    IF ( ISBCONSUMPTIONSOURCE IS NULL OR
         NOT TBCONSBYSOURCE.EXISTS(ISBCONSUMPTIONSOURCE) ) THEN
    
        STD('Did not SetDown: Empty Source: ['||ISBCONSUMPTIONSOURCE||']');
        RETURN;
    
    END IF;


    STD('Total Consumptions to Register ['||TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).COUNT||']');
    CLEANMEMORYANALYSISPROC;
    NUIDX := TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).FIRST;

    
    IF ( NOT GBOCOMMONDATALOADED AND NUIDX IS NOT NULL) THEN
    
        LOADCOMMONDATA;
    
    END IF;

    IF ( IBOGENANALYSISORDER AND GRCREADINGREGISTRY.LEEMCONS IS NOT NULL ) THEN

        
        

        CM_BOAVGCONSSERV.UPDATEAVERAGECONSUMP(ISBCONSUMPTIONSOURCE);
            
    END IF;

    LOOP
        EXIT WHEN ( NUIDX IS NULL );
        STD('S['   ||TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUPRODUCT           ||
           '] TC['||TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTIONTYPE   ||
           '] PC['||TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTIONPERIOD ||
           '] El['||TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUMEASUREELEMENT    ||
           '] Co['||TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTION||']');

        
        
        
        NUROUNDEDCONSUMPTION :=
        ROUND(TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTION,CNUCONS_PRECISION);
        
        
        
        
        
        NUAUTOQUALIFICATION  :=
        NVL(TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUQUALIFICATION,CNUDEFAULT_REVIEW);
        
        
        
        
        
        LOADINDIVIDUALDATA;

        CM_BCCONSUMPTIONENGINE.REGISTERCONSUMPTIONS
        (
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUPRODUCT,          
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTIONTYPE,  
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUMEASUREELEMENT,   
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTIONPERIOD,
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCALCMETHOD,       
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).SBCALCFUNC,         
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NURULEID,           
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTIONDAYS,  
            NUAUTOQUALIFICATION,                                            
            NUROUNDEDCONSUMPTION,                                           
            NUBILLPERIOD,                                                   
            GNUUSERCODE,                                                    
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).DTCONSUMPTIONDATE,  
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCORRECTFACTOR,    
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).SBREGISTERMODE,     
            TBROWIDS                                                        
        );

        
        TBDATAINSERTED :=
        CM_BCCONSUMPTIONENGINE.FTBAPPENDDATA(TBDATAINSERTED,TBROWIDS);

        
        
        
        RCQUALIFICATION :=
        CM_BOCALIVACO.FRCGETRECORD( NUAUTOQUALIFICATION );

        
        IF ( IBOGENANALYSISORDER AND RCQUALIFICATION.CAVCPROR IS NOT NULL ) THEN
        
            REGISTERANALYSISORDER
            (
                TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUPRODUCT,           
                RCQUALIFICATION.CAVCPROR,                                        
                TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTIONPERIOD, 
                TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).NUCONSUMPTIONTYPE,   
                GRCREADINGREGISTRY.LEEMCONS,                                     
                GRCORDER.ORDER_ID                                                
            );
        
        END IF;

        NUIDX := TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).NEXT( NUIDX );
    END LOOP;

    
    
    
    STD('Setting Down Orders...');
    SETDOWNANALYSISORDER;
    OTBINSERTEDDATA := TBDATAINSERTED;
    STD('All Consumption Registered');
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SETDOWNCONSUMPTIONS;

























PROCEDURE SIMULATIONSETDOWNCONS
(
    ISBCONSUMPTIONSOURCE IN CONSSESU.COSSFUFA%TYPE
)
IS
    
    
    
    TBINSERTEDDATA      GE_TYTBSTRING;

BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SimulationSetDownCons',90);
    STD('-- -- -- SIMULATION -- -- --');
    STD('Setting SAVEPOINT');
    SAVEPOINT CONSUMPTIONSIMULATION;
    
    SETDOWNCONSUMPTIONS(FALSE,ISBCONSUMPTIONSOURCE,TBINSERTEDDATA);
    STD('-- -- SIMULATION Ready -- --');
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SIMULATIONSETDOWNCONS;






















PROCEDURE ROLLBACKSIMULATION
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.RollBackSimulation',90);
    STD('Undoing to Savepoint!');
    ROLLBACK TO SAVEPOINT CONSUMPTIONSIMULATION;

    STD('-- -- -- END OF SIMULATION -- -- --');
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END ROLLBACKSIMULATION;






















PROCEDURE SETENGINEPROCMEMDATA
(
    IRCACTIVERULE   IN REMEVACO%ROWTYPE
)
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetEngineProcMemData',90);

    GRCACTIVERULE   := IRCACTIVERULE;  

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SETENGINEPROCMEMDATA;




























PROCEDURE SETENGINEMEMORYDATA
(
    IRCCURRENTREADING    IN LECTELME%ROWTYPE,
    IRCORDER             IN DAOR_ORDER.STYOR_ORDER,
    IRCPRODUCT           IN SERVSUSC%ROWTYPE,
    INUACTIVITY          IN REMEVACO.RMVCACTI%TYPE,
    IRCCONSUMPTIONPERIOD IN PERICOSE%ROWTYPE
)
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetEngineMemoryData',90);

    GRCREADINGREGISTRY    := IRCCURRENTREADING;      
    GRCORDER              := IRCORDER;               
    GRCPRODUCT            := IRCPRODUCT;             
    GNUREADINGSCENARY     := INUACTIVITY;            
    GRCCONSPERIOD         := IRCCONSUMPTIONPERIOD;   

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SETENGINEMEMORYDATA;



















PROCEDURE SETENGINEMEMORYDATA
(
    IRCCURRENTREADING    IN LECTELME%ROWTYPE
)
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetEngineMemoryData',90);

    GRCREADINGREGISTRY := IRCCURRENTREADING; 

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SETENGINEMEMORYDATA;

























PROCEDURE GETENGINEMEMORYDATA
(
    ORCCURRENTREADING    OUT NOCOPY LECTELME%ROWTYPE,
    ORCORDER             OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
    ORCPRODUCT           OUT NOCOPY SERVSUSC%ROWTYPE,
    ONUACTIVITY          OUT NOCOPY REMEVACO.RMVCACTI%TYPE,
    ORCACTIVERULE        OUT NOCOPY REMEVACO%ROWTYPE,
    ORCCONSUMPTIONPERIOD OUT NOCOPY PERICOSE%ROWTYPE
)
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.GetEngineMemoryData',90);

    ORCCURRENTREADING    := GRCREADINGREGISTRY;      
    ORCORDER             := GRCORDER;                
    ORCPRODUCT           := GRCPRODUCT;              
    ONUACTIVITY          := GNUREADINGSCENARY;       
    ORCACTIVERULE        := GRCACTIVERULE;           
    ORCCONSUMPTIONPERIOD := GRCCONSPERIOD;           

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END GETENGINEMEMORYDATA;




















FUNCTION FTBGETREGCONSMEMORYDATA
(
    ISBCONSUMPTIONSOURCE IN CONSSESU.COSSFUFA%TYPE
)
RETURN TYTBUPLOADEDCONS
IS
    
    
    
    TBCONSUMTIONS TYTBUPLOADEDCONS;
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.ftbGetRegConsMemoryData',90);
    TBCONSUMTIONS.DELETE;

    IF ( TBCONSBYSOURCE.EXISTS(ISBCONSUMPTIONSOURCE) ) THEN
    
        TBCONSUMTIONS := TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE);
    ELSE
        STD('Did not find Consumptions.');
        STD('No Consumptions for Source['||ISBCONSUMPTIONSOURCE||']');
    
    END IF;

    RETURN TBCONSUMTIONS;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END FTBGETREGCONSMEMORYDATA;













































PROCEDURE SETCONSUMPTIONSOURCE
(
    ISBCONSUMPTIONSOURCE IN CONSSESU.COSSFUFA%TYPE
)
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetConsumptionSource',90);

    GSBSOURCECONSUMPTION := ISBCONSUMPTIONSOURCE;
    STD('Source Established ['||GSBSOURCECONSUMPTION||']');

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SETCONSUMPTIONSOURCE;


































PROCEDURE REGISTERCONSUMPTION
(
    IRCCONSUMPTION          IN TYRCCONSUMPTION,
    ISBCONSUMPTIONSOURCE    IN CONSSESU.COSSFUFA%TYPE
)
IS
    
    
    
    NUCONSINDEX     NUMBER;
    
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.RegisterConsumption',90);

    
    
    
    IF ( TBCONSBYSOURCE.EXISTS(ISBCONSUMPTIONSOURCE) ) THEN
    
        NUCONSINDEX := NVL((TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).LAST),0)+1;
    ELSE
        NUCONSINDEX := 1;
    
    END IF;

    
    
    
    IF ( ISBCONSUMPTIONSOURCE IS NOT NULL ) THEN
    
        TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUCONSINDEX) := IRCCONSUMPTION;
        STD('New Consumption on ['||NUCONSINDEX||'] index.');
        STD('Source['||ISBCONSUMPTIONSOURCE||']');
    ELSE
        STD('No source given. No consumptions where Registered');
    
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END REGISTERCONSUMPTION;




















PROCEDURE CLEARCONSUMPTIONTABLE
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.ClearConsumptionTable',90);

    TBCONSBYSOURCE.DELETE;
    STD('All Consumption Cleared');

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END CLEARCONSUMPTIONTABLE;
























PROCEDURE CLEARALLENGINEMEMORY
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.ClearAllEngineMemory',90);
    STD('Cleaning Memory...');
    
    GSBMSGERR   := NULL;

    

    GRCPRODUCT          := NULL; 
    GRCREADINGREGISTRY  := NULL; 
    GRCORDER            := NULL; 
    GNUREADINGSCENARY   := NULL; 
    GRCACTIVERULE       := NULL; 
    GRCCONSPERIOD       := NULL; 

    CLEARCONSUMPTIONTABLE;       
    SETCONSUMPTIONSOURCE(NULL);  


    GBOCOMMONDATALOADED := FALSE;
    GNUUSERCODE         := NULL;


    
    CM_BOMEASCONSUMPTIONS.SYNCREADINGSMEMORY;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END CLEARALLENGINEMEMORY;


















PROCEDURE CLEANMEMORYANALYSISPROC
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.CleanMemoryAnalysisProc',90);

    GNURELATIONCOUNT := 0;
    GNUORDERSCOUNT   := 0;

    
    RCTBANALYSISORDER.ORCRORDE.DELETE;
    RCTBANALYSISORDER.ORCRSESU.DELETE;
    RCTBANALYSISORDER.ORCRPECO.DELETE;
    RCTBANALYSISORDER.ORCRTICO.DELETE;
    RCTBANALYSISORDER.ORCRLECT.DELETE;
    RCTBANALYSISORDER.ORCRNOFU.DELETE;

    
    TBORRELATIONSHIP.DELETE;

END CLEANMEMORYANALYSISPROC;











































PROCEDURE REGISTERANALYSISORDER
(
    INUPRODUCT              CM_ORDECRIT.ORCRSESU%TYPE,
    INUPRIORITY             CALIVACO.CAVCPROR%TYPE,
    INUCONSUMPTIONPERIOD    CM_ORDECRIT.ORCRPECO%TYPE,
    INUCONSUMPTIONTYPE      CM_ORDECRIT.ORCRTICO%TYPE,
    INUREADING              CM_ORDECRIT.ORCRLECT%TYPE,
    INUREADINGORDER         OR_ORDER.ORDER_ID%TYPE
)
IS
    
    
    
    NUORDERID       OR_ORDER_ACTIVITY.ORDER_ID%TYPE;          
    NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE; 

    RCESTIMATEOBSER CM_OBSESESA%ROWTYPE;
    NUANALYSISORDER CM_ORDECRIT.ORCRORDE%TYPE;
    NUORDERSTATUS   OR_ORDER.ORDER_STATUS_ID%TYPE;
    
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.RegisterAnalysisOrder',90);
    STD('--------------------------------');
    STD('-- Generando Orden de Crï¿½tica --');
    STD('--------------------------------');

    
    CM_BCORDECRIT.GETPRODANALYSISORDER
    (
        INUPRODUCT,             
        INUCONSUMPTIONPERIOD,   
        NUANALYSISORDER,        
        NUORDERSTATUS           
    );
    STD('Order ['||NUANALYSISORDER||'] Status ['||NUORDERSTATUS||']');

    IF ( NUANALYSISORDER IS NOT NULL ) THEN
    
        STD('Order already created: ['||NUANALYSISORDER||']');
        RETURN;
    
    END IF;


    IF ( INUCONSUMPTIONPERIOD != GRCCONSPERIOD.PECSCONS ) THEN
    
        STD('Process period differs from Current');
        STD('May not generate Analysis Order');
        RETURN;
    
    END IF;

    
    NUORDERID :=
    CM_BOORDERSUTIL.FNUGENERATE
    (
        CNUSITUATIONACTIVITY,               
        INUPRODUCT,                         
        PKGENERALSERVICES.FDTGETSYSTEMDATE, 
        INUPRIORITY                         
    );

    STD('Order ['||NUORDERID||'] Activity ['||NUORDERACTIVITY||']');

    IF ( INUREADING IS NULL ) THEN
    
        STD('Intentando obtener Observaciones de Aforo...');
        RCESTIMATEOBSER := NULL;
        
        
        BEGIN
        
            RCESTIMATEOBSER :=
            CM_BCOBSESESA.FRCOBSESESAPORSESUPECO
            (
                RCTBANALYSISORDER.ORCRSESU(GNUORDERSCOUNT), 
                RCTBANALYSISORDER.ORCRPECO(GNUORDERSCOUNT)  
            );
        EXCEPTION
        
            WHEN OTHERS THEN
                RCESTIMATEOBSER := NULL;
        
        END;
        STD('Observ['||RCESTIMATEOBSER.OBSECONS||']');
        
    
    END IF;

    
    
    
    
    GNUORDERSCOUNT := GNUORDERSCOUNT + 1;
    RCTBANALYSISORDER.ORCRORDE(GNUORDERSCOUNT) := NUORDERID;
    RCTBANALYSISORDER.ORCRSESU(GNUORDERSCOUNT) := INUPRODUCT;
    RCTBANALYSISORDER.ORCRPECO(GNUORDERSCOUNT) := INUCONSUMPTIONPERIOD;
    RCTBANALYSISORDER.ORCRTICO(GNUORDERSCOUNT) := INUCONSUMPTIONTYPE;
    RCTBANALYSISORDER.ORCRLECT(GNUORDERSCOUNT) := INUREADING; 
    RCTBANALYSISORDER.ORCRNOFU(GNUORDERSCOUNT) := PKCONSTANTE.NO;
    RCTBANALYSISORDER.ORCROBPA(GNUORDERSCOUNT) := RCESTIMATEOBSER.OBSECONS;

    
    
    
    
    IF ( INUREADINGORDER IS NOT NULL ) THEN
    
        GNURELATIONCOUNT := GNURELATIONCOUNT + 1;
        TBORRELATIONSHIP(GNURELATIONCOUNT).ORDER_ID           := NUORDERID;         
        TBORRELATIONSHIP(GNURELATIONCOUNT).RELATED_ORDER_ID   := INUREADINGORDER;   
        TBORRELATIONSHIP(GNURELATIONCOUNT).RELA_ORDER_TYPE_ID := CNUTRANSITIONTYPE; 
    
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END REGISTERANALYSISORDER;




















PROCEDURE SETDOWNANALYSISORDER
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetDownAnalysisOrder',90);

    
    IF ( RCTBANALYSISORDER.ORCRORDE.FIRST IS NOT NULL ) THEN
    
        STD('Registrando ï¿½rdenes de crï¿½tica');
        PKTBLCM_ORDECRIT.INSRECORDS(RCTBANALYSISORDER);
        
        IF ( TBORRELATIONSHIP.FIRST IS NOT NULL ) THEN
        
            STD('Registrando relaciones entre ï¿½rdenes');
            DAOR_RELATED_ORDER.INSRECORDS(TBORRELATIONSHIP);
        
        END IF;
    
    END IF;
    
    CLEANMEMORYANALYSISPROC;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END SETDOWNANALYSISORDER;
























PROCEDURE SETPREFIXFUNCTION
(
    ISBCONSUMPTIONSOURCE    IN CONSSESU.COSSFUFA%TYPE,
    ISBPREFIX               IN CONSSESU.COSSFUFA%TYPE
)
IS
    
    
    
    NUIDX   NUMBER;
    
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.SetPrefixFunction',90);

    IF ( TBCONSBYSOURCE.EXISTS(ISBCONSUMPTIONSOURCE) ) THEN
    
        NUIDX := TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).FIRST;
        LOOP
            EXIT WHEN ( NUIDX IS NULL );
            TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).SBCALCFUNC :=
            SUBSTR
            (
                '['||ISBPREFIX ||'] - '||TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE)(NUIDX).SBCALCFUNC,
                1,
                100
            );

            NUIDX := TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).NEXT( NUIDX );
        END LOOP;
    ELSE
        STD('No Consumptions for given Source. ['||ISBCONSUMPTIONSOURCE||']');
    
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);
        
END SETPREFIXFUNCTION;



















PROCEDURE CLEANMEMORYBYSOURCE
(
    ISBCONSUMPTIONSOURCE    IN CONSSESU.COSSFUFA%TYPE
)
IS
BEGIN
    STD('BEGIN CM_BOConsumptionEngine.CleanMemoryBySource',90);
    STD('Cleaning Consumptions for Source ['||ISBCONSUMPTIONSOURCE||']');

    IF ( TBCONSBYSOURCE.EXISTS(ISBCONSUMPTIONSOURCE) ) THEN
    
        TBCONSBYSOURCE(ISBCONSUMPTIONSOURCE).DELETE;
    
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, GSBMSGERR );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, GSBMSGERR);

END CLEANMEMORYBYSOURCE;



END CM_BOCONSUMPTIONENGINE;