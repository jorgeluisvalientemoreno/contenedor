PACKAGE BODY CT_BOContract
IS


































































































    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(15) := 'SAO424459';

    CNUERRORVALUES          CONSTANT NUMBER(18) := 900902;
    CNUERRORDATES           CONSTANT NUMBER(18) := 900995;
    CNUERRORNOCHANGED       CONSTANT NUMBER(18) := 900996;
    CNUERRORVALUESADVANCE   CONSTANT NUMBER(18) := 900997;
    CNUERRORSTATUSCONTRACT  CONSTANT NUMBER(18) := 900899;
    CNUCONTRACTOVERRUN      CONSTANT NUMBER(5)  := GE_BOPARAMETER.FNUGET('CONTRACT_OVERRUN');
    
    
    

    
    
    

    FUNCTION FSBVERSION
    RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

    







































































    PROCEDURE CLOSECONTRACT
    IS
        NUINDEX       GE_BOINSTANCECONTROL.STYNUINDEX;

        SBID_CONTRATO VARCHAR2(100);
        NUCONTRACTID  GE_CONTRATO.ID_CONTRATO%TYPE;

        RCCONTRACT    DAGE_CONTRATO.STYGE_CONTRATO;

        DTBREAKDATE   GE_PERIODO_CERT.FECHA_FINAL%TYPE;
        DTENDDATE     GE_CONTRATO.FECHA_FINAL%TYPE;

        NUPERIODID    GE_PERIODO_CERT.ID_PERIODO%TYPE;

        NUADDCERTIFICATEID  GE_ACTA.ID_ACTA%TYPE;
        RCACTA              DAGE_ACTA.STYGE_ACTA; 

        RCDETALLEACTA       DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;
        RCDETALLEWARRANTY   DAGE_DETALLE_ACTA.STYGE_DETALLE_ACTA;

        RCITEM              DAGE_ITEMS.STYGE_ITEMS;
        RCITEMWARRANTY      DAGE_ITEMS.STYGE_ITEMS;
        NUDOWNPAYMENTDISC   GE_CONTRATO.VALOR_ANTICIPO%TYPE;

        CNUMESS_ADV_PAY_WARNING CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 3598;

        CNUITEMFONDOGARANTIA    CONSTANT GE_ITEMS.ITEMS_ID%TYPE := GE_BOPARAMETER.FNUVALORNUMERICO('ITEM_FONDO_GARANTIA');
        NUWARRANTYVAL           GE_CONTRATO.ACUMUL_FONDO_GARANT%TYPE;
    
        PROCEDURE PROCESSCONTRACT
        IS
            TBCERTIFICATES              DAGE_ACTA.TYTBID_ACTA;

            SBCERTIFICATESLIST          VARCHAR2(32000);
            NUCERTIFICATEID             GE_ACTA.ID_ACTA%TYPE;

            TBLIQCERTIFICATES           CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID;
            TBBILLCERTIFICATES          CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID;

            TBNOADMINBASELIQCERTIFS     CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID;
            TBNOADMINBASEBILLCERTIFS    CT_BCLIQUIDATIONSUPPORT.TYTBCERTIFICATEID;

            NUERRORCODE     GE_ERROR_LOG.MESSAGE_ID%TYPE;
            SBERRORMESSAGE  GE_ERROR_LOG.DESCRIPTION%TYPE;
        BEGIN
            
            CT_BCLIQUIDATIONSUPPORT.CLEARTMPORDERSTABLE;

            
            CT_BOCONSIGNMENTBILLING.ITEMCONSIGNBILLINGBYCON(NUCONTRACTID);

            
            CT_BOLIQUIDATIONPROCESS.GENERATECONTRACTOBLIG(NUPERIODID,
                                                          NUCONTRACTID,
                                                          NULL,
                                                          DTBREAKDATE,
                                                          TBNOADMINBASELIQCERTIFS,
                                                          TBNOADMINBASEBILLCERTIFS,
                                                          TBLIQCERTIFICATES,
                                                          TBBILLCERTIFICATES,
                                                          FALSE,
                                                          TBCERTIFICATES,
                                                          TRUE);

            
            IF (TBCERTIFICATES.COUNT > 0) THEN
                FOR N IN TBCERTIFICATES.FIRST..TBCERTIFICATES.LAST LOOP
                    NUCERTIFICATEID := TBCERTIFICATES(N);
                    IF (N = 1) THEN
                        SBCERTIFICATESLIST := SBCERTIFICATESLIST || NUCERTIFICATEID;
                    ELSIF (N = TBCERTIFICATES.LAST) THEN
                           SBCERTIFICATESLIST := SBCERTIFICATESLIST ||', y '|| NUCERTIFICATEID;
                    ELSE
                        SBCERTIFICATESLIST := SBCERTIFICATESLIST ||', '|| NUCERTIFICATEID;
                    END IF;
                END LOOP;
                
                
                ERRORS.SETERROR(7044,
                                SBCERTIFICATESLIST);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                ERRORS.GETERROR(NUERRORCODE,
                                SBERRORMESSAGE);
                
                IF (NUERRORCODE <> 5784) THEN
                    
                    
                    ERRORS.SETERROR(900254, NUERRORCODE||' - '||SBERRORMESSAGE);
                    RAISE EX.CONTROLLED_ERROR;
                END IF;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                ERRORS.GETERROR(NUERRORCODE, SBERRORMESSAGE);
                ERRORS.SETERROR(900254, NUERRORCODE||' - '||SBERRORMESSAGE);
                RAISE EX.CONTROLLED_ERROR;
            


        END PROCESSCONTRACT;
    BEGIN
        
        IF (NOT(GE_BOINSTANCECONTROL.FBLACCKEYATTRIBUTESTACK(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,
                                                             NULL,
                                                             'GE_CONTRATO',
                                                             'ID_CONTRATO',
                                                             NUINDEX))) THEN
           
           RETURN;
        END IF;

        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(GE_BOINSTANCECONSTANTS.CSBWORK_INSTANCE,
                                                  NULL,
                                                  'GE_CONTRATO',
                                                  'ID_CONTRATO',
                                                  SBID_CONTRATO);

        NUCONTRACTID := TO_NUMBER(SBID_CONTRATO);

        
        DAGE_CONTRATO.GETRECORD(NUCONTRACTID,
                                RCCONTRACT);

        
        IF (RCCONTRACT.FECHA_CIERRE IS NOT NULL) THEN
            
            ERRORS.SETERROR(6982);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

         
        IF (RCCONTRACT.STATUS != CT_BOCONSTANTS.FSBGETOPENSTATUS) THEN
            
            ERRORS.SETERROR(CNUERRORSTATUSCONTRACT, CT_BOCONSTANTS.FSBGETDESCSTATUS(CT_BOCONSTANTS.FSBGETOPENSTATUS) || '|' || 'Cierre de Contrato');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        DTBREAKDATE := UT_DATE.FDTSYSDATE;
        
        
     








        
        GE_BOCERTCONTRATISTA.LIMPIARCACHEVALORITEMLISTA;

        
        
        GE_BCPERIODOCERTIFICACION.OBTPERIODO(DTBREAKDATE,
                                             NUPERIODID);

        
        IF (NUPERIODID IS NULL) THEN
            
            
            
            ERRORS.SETERROR(7022,
                            TO_CHAR(DTBREAKDATE,
                                    UT_DATE.FSBDATE_FORMAT));
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        PROCESSCONTRACT;

        
        IF (CT_BCCONTRACT.FBLHASOPENEDCERTIFS(NUCONTRACTID)) THEN
            
            
            ERRORS.SETERROR(7043);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        
        
        IF (CT_BCCONTRACT.FBLVALPENDORDERS(NUCONTRACTID)) THEN
            ERRORS.SETERROR(913178);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        NUDOWNPAYMENTDISC := NVL(RCCONTRACT.VALOR_ANTICIPO,
                                 0) - NVL(RCCONTRACT.ANTICIPO_AMORTIZADO,
                                          0) - NVL(CT_BCCONTRACT.FNUCALBILLCERTDOWNPAYMENT(NUCONTRACTID),
                                                   0);

        
        NUWARRANTYVAL := NVL(RCCONTRACT.ACUMUL_FONDO_GARANT,0) - NVL(CT_BCCONTRACT.FNUCALBILLCERTWARRANTY(NUCONTRACTID), 0);

        
        IF( NUWARRANTYVAL > 0) THEN

            DAGE_ITEMS.GETRECORD(CNUITEMFONDOGARANTIA, RCITEMWARRANTY);

            RCDETALLEWARRANTY.ID_ITEMS := CNUITEMFONDOGARANTIA;
            RCDETALLEWARRANTY.REFERENCE_ITEM_ID := CNUITEMFONDOGARANTIA;
            RCDETALLEWARRANTY.DESCRIPCION_ITEMS := RCITEMWARRANTY.DESCRIPTION;
            RCDETALLEWARRANTY.CANTIDAD := NULL;
            RCDETALLEWARRANTY.VALOR_UNITARIO := NULL;
            RCDETALLEWARRANTY.VALOR_TOTAL := NUWARRANTYVAL;
            RCDETALLEWARRANTY.ID_LISTA_UNIT_COSTO := NULL;
            RCDETALLEWARRANTY.ID_ORDEN := NULL;
            RCDETALLEWARRANTY.TIPO_GENERACION := CT_BOCONSTANTS.FSBGETAUTODETGENTYPE;
            RCDETALLEWARRANTY.PORCEN_CUMPLIMIENTO := NULL;
            RCDETALLEWARRANTY.PORCEN_PONDERADO := NULL;
            RCDETALLEWARRANTY.ID_UNIDAD_MEDIDA := RCITEMWARRANTY.MEASURE_UNIT_ID;

        END IF;


        
        
        IF (NUDOWNPAYMENTDISC > NUWARRANTYVAL ) THEN
            
            CT_BOCERTIFICATE.CREATECERTIFICATE(CT_BOCONSTANTS.FNUGETBILLINGCERTITYPE,
                                               NUCONTRACTID,
                                               NUPERIODID,
                                               NULL,
                                               DTBREAKDATE,
                                               NULL,
                                               NUADDCERTIFICATEID);

            
            DAGE_ITEMS.GETRECORD(GE_BOITEMSCONSTANTS.CNUDOWNPAYMENTITEM,
                                 RCITEM);

            RCDETALLEACTA.ID_DETALLE_ACTA := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
            RCDETALLEACTA.ID_ITEMS := GE_BOITEMSCONSTANTS.CNUDOWNPAYMENTITEM;
            RCDETALLEACTA.REFERENCE_ITEM_ID := GE_BOITEMSCONSTANTS.CNUDOWNPAYMENTITEM;
            RCDETALLEACTA.DESCRIPCION_ITEMS := RCITEM.DESCRIPTION;
            RCDETALLEACTA.CANTIDAD := NULL;
            RCDETALLEACTA.VALOR_UNITARIO := NULL;
            RCDETALLEACTA.VALOR_TOTAL := NUDOWNPAYMENTDISC;
            RCDETALLEACTA.ID_ACTA := NUADDCERTIFICATEID;
            RCDETALLEACTA.ID_LISTA_UNIT_COSTO := NULL;
            RCDETALLEACTA.ID_ORDEN := NULL;
            
            RCDETALLEACTA.TIPO_GENERACION := CT_BOCONSTANTS.FSBGETAUTODETGENTYPE;
            RCDETALLEACTA.PORCEN_CUMPLIMIENTO := NULL;
            RCDETALLEACTA.PORCEN_PONDERADO := NULL;
            RCDETALLEACTA.ID_UNIDAD_MEDIDA := RCITEM.MEASURE_UNIT_ID;

            DAGE_DETALLE_ACTA.INSRECORD(RCDETALLEACTA);

            
            IF( NUWARRANTYVAL > 0) THEN
                RCDETALLEWARRANTY.ID_DETALLE_ACTA := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
                RCDETALLEWARRANTY.ID_ACTA := NUADDCERTIFICATEID;
                RCDETALLEWARRANTY.VALOR_TOTAL := (-1)*NUWARRANTYVAL; 
                DAGE_DETALLE_ACTA.INSRECORD(RCDETALLEWARRANTY);

            END IF;

            
            CT_BCCERTIFICATE.UPDCERTIFICATE(NUADDCERTIFICATEID,
                                            NUDOWNPAYMENTDISC - NUWARRANTYVAL,
                                            UT_DATE.FDTSYSDATE);

            COMMIT;

            
            
            ERRORS.SETERROR(CNUMESS_ADV_PAY_WARNING,
                            NUADDCERTIFICATEID);
            RAISE EX.CONTROLLED_ERROR;


        ELSIF (NUWARRANTYVAL > 0 )  THEN
            

            
            RCACTA.NOMBRE           :=   'Devolucion Fondo Garantias ' || DAGE_CONTRATO.FSBGETDESCRIPCION(NUCONTRACTID);
            RCACTA.ID_ACTA          :=   GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_ACTA', 'SEQ_GE_ACTA');
            RCACTA.ID_TIPO_ACTA       := 1;  
            RCACTA.FECHA_CREACION     := UT_DATE.FDTSYSDATE;
            RCACTA.ESTADO             := CT_BOCONSTANTS.FSBGETCLOSEDCERTIFSTATUS;
            RCACTA.ID_CONTRATO        := NUCONTRACTID;
            RCACTA.VALOR_TOTAL        := 0;
            RCACTA.FECHA_INICIO       := UT_DATE.FDTSYSDATE;
            RCACTA.FECHA_FIN          := UT_DATE.FDTSYSDATE;
            RCACTA.PERSON_ID          := GE_BOPERSONAL.FNUGETPERSONID;
            RCACTA.TERMINAL           := UT_SESSION.GETTERMINAL;
            RCACTA.CONTRACTOR_ID      := DAGE_CONTRATO.FNUGETID_CONTRATISTA(NUCONTRACTID);
            RCACTA.IS_PENDING         := 0;
            
            DAGE_ACTA.INSRECORD(RCACTA);

            NUADDCERTIFICATEID      := RCACTA.ID_ACTA;

            RCDETALLEWARRANTY.ID_DETALLE_ACTA := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
            RCDETALLEWARRANTY.ID_ACTA := NUADDCERTIFICATEID;

            DAGE_DETALLE_ACTA.INSRECORD(RCDETALLEWARRANTY);


            
            IF (NUDOWNPAYMENTDISC > 0) THEN
                
                DAGE_ITEMS.GETRECORD(GE_BOITEMSCONSTANTS.CNUDOWNPAYMENTITEM,
                                     RCITEM);

                RCDETALLEACTA.ID_DETALLE_ACTA := GE_BOSEQUENCE.FNUNEXTGE_DETALLE_ACTA;
                RCDETALLEACTA.ID_ITEMS := GE_BOITEMSCONSTANTS.CNUDOWNPAYMENTITEM;
                RCDETALLEACTA.REFERENCE_ITEM_ID := GE_BOITEMSCONSTANTS.CNUDOWNPAYMENTITEM;
                RCDETALLEACTA.DESCRIPCION_ITEMS := RCITEM.DESCRIPTION;
                RCDETALLEACTA.CANTIDAD := NULL;
                RCDETALLEACTA.VALOR_UNITARIO := NULL;
                RCDETALLEACTA.VALOR_TOTAL := (-1)*NUDOWNPAYMENTDISC; 
                RCDETALLEACTA.ID_ACTA := NUADDCERTIFICATEID;
                RCDETALLEACTA.ID_LISTA_UNIT_COSTO := NULL;
                RCDETALLEACTA.ID_ORDEN := NULL;
                RCDETALLEACTA.TIPO_GENERACION := CT_BOCONSTANTS.FSBGETAUTODETGENTYPE;
                RCDETALLEACTA.PORCEN_CUMPLIMIENTO := NULL;
                RCDETALLEACTA.PORCEN_PONDERADO := NULL;
                RCDETALLEACTA.ID_UNIDAD_MEDIDA := RCITEM.MEASURE_UNIT_ID;

                DAGE_DETALLE_ACTA.INSRECORD(RCDETALLEACTA);
            END IF;

            
            CT_BCCERTIFICATE.UPDCERTIFICATE(NUADDCERTIFICATEID,
                                            NUWARRANTYVAL - NUDOWNPAYMENTDISC,
                                            UT_DATE.FDTSYSDATE);

        END IF;

        
        IF (NUDOWNPAYMENTDISC > 0) THEN
            DAGE_CONTRATO.UPDANTICIPO_AMORTIZADO(NUCONTRACTID, NVL(RCCONTRACT.VALOR_ANTICIPO, 0) );
        END IF;

        
        DAGE_CONTRATO.UPDFECHA_CIERRE(NUCONTRACTID,
                                      UT_DATE.FDTSYSDATE);

        
        DAGE_CONTRATO.UPDSTATUS(NUCONTRACTID, CT_BOCONSTANTS.FSBGETCLOSEDSTATUS);

        
        COMMIT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CLOSECONTRACT;

    
















    FUNCTION FSBGETSTATUSCONTRACT( NUCONTRACTID   GE_CONTRATO.ID_CONTRATO%TYPE)
    RETURN GE_CONTRATO.STATUS%TYPE
    IS

        
        SBSTATUS  GE_CONTRATO.STATUS%TYPE;

    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BOContractor.fsbGetStatusContract',10);

        SBSTATUS := DAGE_CONTRATO.FSBGETSTATUS(NUCONTRACTID,0);

        UT_TRACE.TRACE('FIN CT_BOContractor.fsbGetStatusContract',10);

        RETURN SBSTATUS;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ERROR - CONTROLLED_ERROR CT_BOContractor.fsbGetStatusContract',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('ERROR - OTHERS CT_BOContractor.fsbGetStatusContract',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETSTATUSCONTRACT;

    
























    PROCEDURE INITIALIZECONTRACT(INUCONTRACTID    IN  GE_ACTA.ID_CONTRATO%TYPE,
                                   INUVALUETOTAL    IN  GE_ACTA.VALOR_TOTAL%TYPE,
                                   INUVALUEADVANCE  IN  GE_ACTA.VALUE_ADVANCE%TYPE,
                                   IDTINITIALDATE   IN  GE_ACTA.FECHA_INICIO%TYPE,
                                   IDTFINALDATE     IN  GE_ACTA.FECHA_FIN%TYPE,
                                   INUCOMMENTTYPEID IN  GE_ACTA.COMMENT_TYPE_ID%TYPE,
                                   ISBCOMMENT       IN  GE_ACTA.COMMENT_%TYPE)
    IS

        

        SBNEWSTATUSCONTRACT    GE_CONTRATISTA.STATUS%TYPE;
        NUCERTIFICATETYPE      GE_ACTA.ID_TIPO_ACTA%TYPE;
        RCCONTRACT             DAGE_CONTRATO.STYGE_CONTRATO;
        SBCOMMENT              VARCHAR2(2000);
        LIQ_ANTICIPO           VARCHAR2(1);
        NUITEMSANTICIPO       GE_ITEMS.ITEMS_ID%TYPE;
    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BOContractor.InitializeContract',10);


        
        SBNEWSTATUSCONTRACT := CT_BOCONSTANTS.FSBGETOPENSTATUS;

        
        NUCERTIFICATETYPE := CT_BOCONSTANTS.FNUGETOPENCERTITYPE;

        
        DAGE_CONTRATO.GETRECORD(INUCONTRACTID,RCCONTRACT);

        RCCONTRACT.STATUS               := SBNEWSTATUSCONTRACT;
        RCCONTRACT.FECHA_INICIAL        := IDTINITIALDATE;
        RCCONTRACT.FECHA_FINAL          := IDTFINALDATE;
        RCCONTRACT.VALOR_ANTICIPO       := INUVALUEADVANCE;
        RCCONTRACT.VALOR_TOTAL_CONTRATO := INUVALUETOTAL;
        
        
        NUITEMSANTICIPO := GE_BOPARAMETER.FNUVALORNUMERICO ('ITEM_ANTICIPO');
            
        IF(NOT DACT_EXCL_ITEM_CONT_VAL.FBLEXIST(NUITEMSANTICIPO)) THEN
            RCCONTRACT.VALOR_TOTAL_PAGADO := INUVALUEADVANCE;
        END IF;

        
        DAGE_CONTRATO.UPDRECORD(RCCONTRACT);

        
        CT_BOCERTIFICATE.CREATESTATUSCERTICONTRACT(NUCERTIFICATETYPE,INUCONTRACTID, INUVALUETOTAL,
                                                 INUVALUEADVANCE, IDTINITIALDATE, IDTFINALDATE, ISBCOMMENT, INUCOMMENTTYPEID);


        LIQ_ANTICIPO := GE_BOPARAMETER.FSBVALORALFANUMERICO('LIQUIDA_ANTICIPO');

        IF  NVL(INUVALUEADVANCE,0) > 0 AND NVL(LIQ_ANTICIPO,'N') = 'Y' THEN

            UT_TRACE.TRACE('Se crea acta para liquidaci�n de anticipo',5 );


            CT_BOCERTIFICATE.CREATELIQADMINCERTIFICATE(INUCONTRACTID,
                                                       INUVALUETOTAL,
                                                       INUVALUEADVANCE,
                                                       ISBCOMMENT,
                                                       INUCOMMENTTYPEID);
        END IF;

        UT_TRACE.TRACE('FIN CT_BOContractor.InitializeContract',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ERROR - CONTROLLED_ERROR CT_BOContractor.InitializeContract',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('ERROR - OTHERS CT_BOContractor.InitializeContract',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INITIALIZECONTRACT;

    





































    PROCEDURE CHANGECONTRACT(   INUCONTRACTID       IN  GE_ACTA.ID_CONTRATO%TYPE,
                                INUNEWVALUETOTAL    IN  GE_ACTA.VALOR_TOTAL%TYPE,
                                INUNEWVALUEADVANCE  IN  GE_ACTA.VALUE_ADVANCE%TYPE,
                                IDTINITIALDATE      IN  GE_ACTA.FECHA_INICIO%TYPE,
                                IDTNEWFINALDATE     IN  GE_ACTA.FECHA_FIN%TYPE,
                                INUCOMMENTTYPEID    IN  GE_ACTA.COMMENT_TYPE_ID%TYPE,
                                ISBCOMMENT          IN  GE_ACTA.COMMENT_%TYPE)
    IS

        

         SBNEWSTATUSCONTRACT    GE_CONTRATO.STATUS%TYPE;
         NUCERTIFICATETYPE      GE_ACTA.ID_TIPO_ACTA%TYPE;
         RCCONTRACT             DAGE_CONTRATO.STYGE_CONTRATO;
         BLRESULT               BOOLEAN := TRUE;

         
        
        NUVALUETOTAL          GE_ACTA.VALOR_TOTAL%TYPE;

        
        NUVALUEADVANCE        GE_ACTA.VALUE_ADVANCE%TYPE;

        
        DTFINALDATE           GE_ACTA.FECHA_FIN%TYPE;

        NUDIFEANTICIPO        GE_ACTA.VALUE_ADVANCE%TYPE;

        LIQ_ANTICIPO            VARCHAR2(1);

    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BOContract.ChangeContract',10);

        
        NUCERTIFICATETYPE := CT_BOCONSTANTS.FNUGETCHANGECERTITYPE;

        
        DAGE_CONTRATO.GETRECORD(INUCONTRACTID,RCCONTRACT);

        
        DTFINALDATE    :=  RCCONTRACT.FECHA_FINAL;
        NUVALUEADVANCE :=  RCCONTRACT.VALOR_ANTICIPO;
        NUVALUETOTAL   :=  RCCONTRACT.VALOR_TOTAL_CONTRATO;

        
        IF ( (TRUNC(IDTNEWFINALDATE) = TRUNC(DTFINALDATE)) AND (INUNEWVALUEADVANCE = NUVALUEADVANCE) AND (INUNEWVALUETOTAL = NUVALUETOTAL) ) THEN
            UT_TRACE.TRACE('Error - No se realiz� ninguna modificaci�n',11);
            ERRORS.SETERROR(CNUERRORNOCHANGED);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        
        IF IDTNEWFINALDATE IS NOT NULL THEN
            
            
            IF ( TRUNC(IDTNEWFINALDATE ) < TRUNC( DTFINALDATE ) ) THEN
                 UT_TRACE.TRACE('Error - La nueva fecha final del contrato es menor a la fecha final actual del contrato',11);
                 ERRORS.SETERROR(CNUERRORDATES);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            RCCONTRACT.FECHA_FINAL := IDTNEWFINALDATE;

            
            GE_BOCONTRATO.VALPLANCONDITIONS(RCCONTRACT.ID_CONTRATO,RCCONTRACT.FECHA_INICIAL,RCCONTRACT.FECHA_FINAL);

        END IF;

        IF INUNEWVALUETOTAL IS NOT NULL THEN
            
            
            IF ( INUNEWVALUETOTAL < NUVALUETOTAL ) THEN
                UT_TRACE.TRACE('Error - El nuevo valor total del contrato es menor al valor actual del contrato ',11);
                ERRORS.SETERROR(CNUERRORVALUES);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            RCCONTRACT.VALOR_TOTAL_CONTRATO := INUNEWVALUETOTAL;
        END IF;

        IF INUNEWVALUEADVANCE IS NOT NULL THEN
            
            
            IF ( (INUNEWVALUEADVANCE < NUVALUEADVANCE) OR INUNEWVALUEADVANCE >= INUNEWVALUETOTAL ) THEN
                UT_TRACE.TRACE('Error - El nuevo valor del anticipo del contrato es menor al valor actual del anticipo del contrato o
                                  Es mayor o igual que el nuevo valor del contrato ',11);
                ERRORS.SETERROR(CNUERRORVALUESADVANCE);
                RAISE EX.CONTROLLED_ERROR;
            END IF;
            
            RCCONTRACT.VALOR_TOTAL_PAGADO  :=  NVL (RCCONTRACT.VALOR_TOTAL_PAGADO,0) + NVL(INUNEWVALUEADVANCE,0) - NVL(RCCONTRACT.VALOR_ANTICIPO,0);

            
            RCCONTRACT.VALOR_ANTICIPO      :=   INUNEWVALUEADVANCE;

        END IF;

        
        DAGE_CONTRATO.UPDRECORD(RCCONTRACT);

        
        CT_BOCERTIFICATE.CREATESTATUSCERTICONTRACT(NUCERTIFICATETYPE,INUCONTRACTID, INUNEWVALUETOTAL,
                                                 INUNEWVALUEADVANCE, IDTINITIALDATE, RCCONTRACT.FECHA_FINAL, ISBCOMMENT, INUCOMMENTTYPEID);

        UT_TRACE.TRACE('Creaci�n de acta de liquidaci�n de anticipo',6);

        NUDIFEANTICIPO := NVL(INUNEWVALUEADVANCE,NUVALUEADVANCE) - NUVALUEADVANCE;

        LIQ_ANTICIPO := GE_BOPARAMETER.FSBVALORALFANUMERICO('LIQUIDA_ANTICIPO');

        IF  NVL(NUDIFEANTICIPO,0) > 0 AND NVL(LIQ_ANTICIPO,'N') = 'Y' THEN

            CT_BOCERTIFICATE.CREATELIQADMINCERTIFICATE(INUCONTRACTID,
                                                        INUNEWVALUETOTAL,
                                                        NUDIFEANTICIPO,
                                                        ISBCOMMENT,
                                                        INUCOMMENTTYPEID);
         END IF;

        UT_TRACE.TRACE('FIN CT_BOContract.ChangeContract',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ERROR - CONTROLLED_ERROR CT_BOContract.ChangeContract',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('ERROR - OTHERS CT_BOContract.ChangeContract',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGECONTRACT;

            














    PROCEDURE CHANGESTATUSCONTRACT( INUCONTRACTID       IN  GE_ACTA.ID_CONTRATO%TYPE,
                                    INUCOMMENTTYPEID    IN  GE_ACTA.COMMENT_TYPE_ID%TYPE,
                                    ISBCOMMENT          IN  GE_ACTA.COMMENT_%TYPE,
                                    ISBNEWSTATUS        IN  GE_CONTRATO.STATUS%TYPE)
    IS

        

         NUCERTIFICATETYPE      GE_ACTA.ID_TIPO_ACTA%TYPE;
         RCCONTRACT             DAGE_CONTRATO.STYGE_CONTRATO;
         BLRESULT               BOOLEAN := TRUE;

    BEGIN
        UT_TRACE.TRACE('INICIO CT_BOContract.ChangeStatusContract',10);

        
        IF ISBNEWSTATUS = CT_BOCONSTANTS.FSBGETSUSPENDSTATUS THEN
            
            NUCERTIFICATETYPE := CT_BOCONSTANTS.FNUGETSUSPENDCERTITYPE;
        
        ELSIF ISBNEWSTATUS = CT_BOCONSTANTS.FSBGETOPENSTATUS THEN
            
             NUCERTIFICATETYPE := CT_BOCONSTANTS.FNUGETACTIVATECERTITYPE;
        
        ELSIF ISBNEWSTATUS = CT_BOCONSTANTS.FSBGETCANCELSTATUS THEN
            
            NUCERTIFICATETYPE := CT_BOCONSTANTS.FNUGETCANCELCERTITYPE;
        END IF;

        
        DAGE_CONTRATO.UPDSTATUS(INUCONTRACTID,ISBNEWSTATUS);

        
        CT_BOCERTIFICATE.CREATESTATUSCERTICONTRACT(NUCERTIFICATETYPE,INUCONTRACTID, NULL, NULL, NULL, NULL, ISBCOMMENT, INUCOMMENTTYPEID);


        UT_TRACE.TRACE('FIN CT_BOContract.ChangeStatusContract',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ERROR - CONTROLLED_ERROR CT_BOContract.ChangeStatusContract',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('ERROR - OTHERS CT_BOContract.ChangeStatusContract',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CHANGESTATUSCONTRACT;

     














    PROCEDURE GETCONTRACTTYPELOV
    (
        ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN CT_BOContract.GetContractTypeLov', 1);

        CT_BCCONTRACT.GETCONTRACTTYPELOV(ORFREFCURSOR);

        UT_TRACE.TRACE('END CT_BOContract.GetContractTypeLov', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCONTRACTTYPELOV;

    














    PROCEDURE GETCASHTYPELOV
    (
        ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN CT_BOContract.GetCashTypeLov', 1);

        CT_BCCONTRACT.GETCASHTYPELOV(ORFREFCURSOR);

        UT_TRACE.TRACE('END CT_BOContract.GetCashTypeLov', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCASHTYPELOV;

    
















    PROCEDURE GETCONTRACTSBYCONTRACTOR
    (
       INUCONTRACTORID IN  GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
       ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        
        CT_BCCONTRACT.GETCONTRACTSBYCONTRACTOR(INUCONTRACTORID,ORFREFCURSOR);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END GETCONTRACTSBYCONTRACTOR;

    










































    PROCEDURE INSCONTRACT
    (
       ISBDESCRIPTION      IN  GE_CONTRATO.DESCRIPCION%TYPE,
       INUVALUEAUIADM      IN  GE_CONTRATO.VALOR_AUI_ADMIN%TYPE,
       INUVALUEAUIUTIL     IN GE_CONTRATO.VALOR_AUI_UTIL%TYPE,
       INUVALUEAUIIMPRE    IN GE_CONTRATO.VALOR_AUI_IMPREV%TYPE,
       INUTYPEMONEYLIQ     IN GE_CONTRATO.TIPO_MONEDA_LIQUIDAR%TYPE,
       INUTYPECONTRACTID   IN GE_CONTRATO.ID_TIPO_CONTRATO%TYPE,
       INUCONTRACTORID     IN GE_CONTRATO.ID_CONTRATISTA%TYPE,
       INUDAYTOBILL        IN GE_CONTRATO.DIAS_FACTURAR%TYPE,
       INUALERTPORCVALUE   IN GE_CONTRATO.ALERTA_PORCEN_VALOR%TYPE,
       INUPORCENTFONGARANT IN GE_CONTRATO.PORCEN_FONDO_GARANT%TYPE,
       ISBSTATUS           IN GE_CONTRATO.STATUS%TYPE,
       INUPERCENTNATSTAMP  IN GE_CONTRATO.PERCENT_NATION_STAMP%TYPE,
       INUACCOUNTCLASSIF   IN GE_CONTRATO.ACCOUNT_CLASSIF_ID%TYPE,
       ONUCONTRACTID      OUT GE_CONTRATO.ID_CONTRATO%TYPE
    )
    IS
         RCCONTRACT       DAGE_CONTRATO.STYGE_CONTRATO;
    BEGIN
         
         ONUCONTRACTID:= CT_BOSEQUENCE.FNUNEXT_GE_CONTRATO();

         RCCONTRACT.ID_CONTRATO         :=ONUCONTRACTID;
         RCCONTRACT.DESCRIPCION         :=ISBDESCRIPTION;
         RCCONTRACT.VALOR_AUI_ADMIN     :=INUVALUEAUIADM;
         RCCONTRACT.VALOR_AUI_UTIL      :=INUVALUEAUIUTIL;
         RCCONTRACT.VALOR_AUI_IMPREV    :=INUVALUEAUIIMPRE;
         RCCONTRACT.TIPO_MONEDA_LIQUIDAR:=INUTYPEMONEYLIQ;
         RCCONTRACT.ID_TIPO_CONTRATO    :=INUTYPECONTRACTID;
         RCCONTRACT.ID_CONTRATISTA      :=INUCONTRACTORID;
         RCCONTRACT.DIAS_FACTURAR       :=INUDAYTOBILL;
         RCCONTRACT.ALERTA_PORCEN_VALOR :=INUALERTPORCVALUE;
         RCCONTRACT.PORCEN_FONDO_GARANT :=INUPORCENTFONGARANT;
         RCCONTRACT.STATUS              :=ISBSTATUS;
         RCCONTRACT.PERCENT_NATION_STAMP:=INUPERCENTNATSTAMP;
         RCCONTRACT.ACCOUNT_CLASSIF_ID  :=INUACCOUNTCLASSIF;


         
         DAGE_CONTRATO.INSRECORD(RCCONTRACT);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END INSCONTRACT;

    










































    PROCEDURE UPDCONTRACT
    (
       INUCONTRACTID       IN GE_CONTRATO.ID_CONTRATO%TYPE,
       ISBDESCRIPTION      IN GE_CONTRATO.DESCRIPCION%TYPE,
       INUVALUEAUIADM      IN GE_CONTRATO.VALOR_AUI_ADMIN%TYPE,
       INUVALUEAUIUTIL     IN GE_CONTRATO.VALOR_AUI_UTIL%TYPE,
       INUVALUEAUIIMPRE    IN GE_CONTRATO.VALOR_AUI_IMPREV%TYPE,
       INUTYPEMONEYLIQ     IN GE_CONTRATO.TIPO_MONEDA_LIQUIDAR%TYPE,
       INUTYPECONTRACTID   IN GE_CONTRATO.ID_TIPO_CONTRATO%TYPE,
       INUDAYTOBILL        IN GE_CONTRATO.DIAS_FACTURAR%TYPE,
       INUALERTPORCVALUE   IN GE_CONTRATO.ALERTA_PORCEN_VALOR%TYPE,
       INUPORCENTFONGARANT IN GE_CONTRATO.PORCEN_FONDO_GARANT%TYPE,
       INUPERCENTNATSTAMP  IN GE_CONTRATO.PERCENT_NATION_STAMP%TYPE,
       INUACCOUNTCLASSIF   IN GE_CONTRATO.ACCOUNT_CLASSIF_ID%TYPE
    )
    IS
       RCCONTRACT          DAGE_CONTRATO.STYGE_CONTRATO;

    BEGIN
        
        RCCONTRACT:= DAGE_CONTRATO.FRCGETRECORD(INUCONTRACTID);

        
         RCCONTRACT.DESCRIPCION         :=ISBDESCRIPTION;
         RCCONTRACT.VALOR_AUI_ADMIN     :=INUVALUEAUIADM;
         RCCONTRACT.VALOR_AUI_UTIL      :=INUVALUEAUIUTIL;
         RCCONTRACT.VALOR_AUI_IMPREV    :=INUVALUEAUIIMPRE;
         RCCONTRACT.TIPO_MONEDA_LIQUIDAR:=INUTYPEMONEYLIQ;
         RCCONTRACT.ID_TIPO_CONTRATO    :=INUTYPECONTRACTID;
         RCCONTRACT.DIAS_FACTURAR       :=INUDAYTOBILL;
         RCCONTRACT.ALERTA_PORCEN_VALOR :=INUALERTPORCVALUE;
         RCCONTRACT.PORCEN_FONDO_GARANT :=INUPORCENTFONGARANT;
         RCCONTRACT.PERCENT_NATION_STAMP:=INUPERCENTNATSTAMP;
         RCCONTRACT.ACCOUNT_CLASSIF_ID  :=INUACCOUNTCLASSIF;

        
        DAGE_CONTRATO.UPDRECORD(RCCONTRACT);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END UPDCONTRACT;

    














    PROCEDURE DELCONTRACT
    (
        INUCONTRACTID   IN  GE_CONTRATO.ID_CONTRATO%TYPE,
        INUPROCESSID    IN  GE_TMP_MESSAGE_PROC.PROCESS_ID%TYPE,
        OSBCANDELETED   OUT VARCHAR2
    )
    IS
         SBPROCESSID            VARCHAR2(250);
         SBTYPECONTRAC          VARCHAR2(5);
    BEGIN
           
           CT_BOCONTRACT.VALIDATEDELCONTRACT(INUCONTRACTID,SBTYPECONTRAC);

           IF SBTYPECONTRAC = CT_BOCONSTANTS.CSBHASCERTIFICATE THEN
                
                SBPROCESSID := 'El contrato ' || INUCONTRACTID ||
                           ' no puede ser eliminado ya que tiene actas asociadas.';

                GE_BOTMP_MESSAGE_PROC.INSERTINMESSAGETEMPTABLE
                (
                    INUPROCESSID,
                    SBPROCESSID
                );

                GE_BCFWTMP_MESSAGE_PROC.SAVEANSWEROFPROCESS
                (
                    SBPROCESSID,
                    -1,
                    NULL
                );
                OSBCANDELETED:= GE_BOCONSTANTS.CSBNO;
                RETURN;
           ELSIF SBTYPECONTRAC = CT_BOCONSTANTS.CSBHASLISTCOST THEN
                
                SBPROCESSID := 'El contrato ' || INUCONTRACTID ||
                           ' no puede ser eliminado ya que tiene lista de costos asociadas.';

                GE_BOTMP_MESSAGE_PROC.INSERTINMESSAGETEMPTABLE
                (
                    INUPROCESSID,
                    SBPROCESSID
                );

                GE_BCFWTMP_MESSAGE_PROC.SAVEANSWEROFPROCESS
                (
                    SBPROCESSID,
                    -1,
                    NULL
                );
                OSBCANDELETED:= GE_BOCONSTANTS.CSBNO;
                RETURN;
           END IF;

           OSBCANDELETED:= GE_BOCONSTANTS.CSBYES;

      	   
           DAGE_CONTRATO.DELRECORD(INUCONTRACTID);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END DELCONTRACT;


    















    PROCEDURE GETSTATUSLOV
    (
       ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
         
         CT_BCCONTRACT.GETSTATUSLOV(ORFREFCURSOR);
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END GETSTATUSLOV;

    














    PROCEDURE VALIDATEDELCONTRACT
    (
      INUCONTRACTID  IN GE_CONTRATO.ID_CONTRATO%TYPE,
      OSBTYPECONTRAC OUT VARCHAR2
    )
    IS
       RFREFCURSOR  CONSTANTS.TYREFCURSOR;
       TBLISTCOST   DAGE_LIST_UNITARY_COST.TYTBGE_LIST_UNITARY_COST;
       NUINDEXLIST  BINARY_INTEGER;
    BEGIN

         
        IF (GE_BCCONTRATO.FBLCONTRATOTIENEACTAS(INUCONTRACTID))THEN
           OSBTYPECONTRAC := CT_BOCONSTANTS.CSBHASCERTIFICATE;
           RETURN;
        END IF;

        
        RFREFCURSOR:=DAGE_LIST_UNITARY_COST.FRFGETRECORDS('Contract_Id = '||INUCONTRACTID);

        FETCH RFREFCURSOR BULK COLLECT INTO TBLISTCOST;
        CLOSE RFREFCURSOR;

        IF (TBLISTCOST.COUNT>0)THEN
           OSBTYPECONTRAC:=CT_BOCONSTANTS.CSBHASLISTCOST;
           RETURN;

         END IF;

         EXCEPTION
             WHEN EX.CONTROLLED_ERROR THEN
                 RAISE EX.CONTROLLED_ERROR;
             WHEN OTHERS THEN
                 ERRORS.SETERROR;
                 RAISE EX.CONTROLLED_ERROR;
    END VALIDATEDELCONTRACT;

    














    FUNCTION FBLCONTRACTWITHOBLIGCERTIF
    (
        INUIDCONTRATO   IN GE_CONTRATO.ID_CONTRATO%TYPE
    )
    RETURN BOOLEAN
    IS
    BEGIN
        
        RETURN (GE_BCCONTRATO.FBLCONTRACTWITHOBLIGCERTIF(INUIDCONTRATO));

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLCONTRACTWITHOBLIGCERTIF;


    














    FUNCTION FBLVALIDATECONTRACTTYPE
    (
        INUCONTRACTID     IN GE_CONTRATO.ID_CONTRATO%TYPE,
        INUCONTRACTTYPEID IN GE_TIPO_CONTRATO.ID_TIPO_CONTRATO%TYPE
    )
    RETURN BOOLEAN
    IS
        SBVARIABLE        VARCHAR2(200);
    BEGIN
        
        
        IF CT_BCCONDITIONS.CUVALPLANCONDISVENDORBYCONT%ISOPEN THEN
            CLOSE CT_BCCONDITIONS.CUVALPLANCONDISVENDORBYCONT;
        END IF;

        OPEN CT_BCCONDITIONS.CUVALPLANCONDISVENDORBYCONT(INUCONTRACTID);
        FETCH CT_BCCONDITIONS.CUVALPLANCONDISVENDORBYCONT INTO SBVARIABLE;
        CLOSE CT_BCCONDITIONS.CUVALPLANCONDISVENDORBYCONT;

        IF (SBVARIABLE IS NOT NULL) THEN
            
            
            SBVARIABLE := NULL;

            IF CT_BCCONDITIONS.CUVALCONTTYHASDIFCERT%ISOPEN THEN
                CLOSE CT_BCCONDITIONS.CUVALCONTTYHASDIFCERT;
            END IF;

            OPEN CT_BCCONDITIONS.CUVALCONTTYHASDIFCERT(INUCONTRACTTYPEID);
            FETCH CT_BCCONDITIONS.CUVALCONTTYHASDIFCERT INTO SBVARIABLE;
            CLOSE CT_BCCONDITIONS.CUVALCONTTYHASDIFCERT;

            IF (SBVARIABLE IS NOT NULL) THEN
               
               
               
               RETURN TRUE;
               END IF;
        END IF;
        RETURN FALSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF CT_BCCONDITIONS.CUVALPLANCONDISVENDORBYCONT%ISOPEN THEN
                CLOSE CT_BCCONDITIONS.CUVALPLANCONDISVENDORBYCONT;
            END IF;
            IF CT_BCCONDITIONS.CUVALCONTTYHASDIFCERT%ISOPEN THEN
                CLOSE CT_BCCONDITIONS.CUVALCONTTYHASDIFCERT;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF CT_BCCONDITIONS.CUVALPLANCONDISVENDORBYCONT%ISOPEN THEN
                CLOSE CT_BCCONDITIONS.CUVALPLANCONDISVENDORBYCONT;
            END IF;
            IF CT_BCCONDITIONS.CUVALCONTTYHASDIFCERT%ISOPEN THEN
                CLOSE CT_BCCONDITIONS.CUVALCONTTYHASDIFCERT;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLVALIDATECONTRACTTYPE;

    























    PROCEDURE GETCONTRACTTOLIQORDER
    (
        INUORDERID          IN      OR_ORDER.ORDER_ID%TYPE,
        ONUCONTRACTORID     OUT     GE_CONTRATO.ID_CONTRATISTA%TYPE,
        ONUCONTRACTID       OUT     GE_CONTRATO.ID_CONTRATO%TYPE
    )
    IS

        NUOPERUNIT          OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        NUTASKTYPE          OR_ORDER.TASK_TYPE_ID%TYPE;

        TBCONTRACTS     DAGE_CONTRATO.TYTBGE_CONTRATO;

        NUINDICE        NUMBER;

        DTDATE          DATE;

        DTLEGALDATE      OR_ORDER.LEGALIZATION_DATE%TYPE;

    BEGIN

        ONUCONTRACTID:= NULL;

        
        CT_BOCONTRACTOR.GETCONTRACTORIDBYORDER
        (
            INUORDERID,
            NUOPERUNIT,
            ONUCONTRACTORID
        );

        
        NUTASKTYPE := DAOR_ORDER.FNUGETTASK_TYPE_ID(INUORDERID);

        
        DTLEGALDATE := DAOR_ORDER.FDTGETLEGALIZATION_DATE(INUORDERID);



        
        DTLEGALDATE := NVL(DTLEGALDATE, UT_DATE.FDTSYSDATE);


        
        CT_BCCONTRACT.GETOPENACTIVECONTRACTS
        (
            ONUCONTRACTORID,
            DTLEGALDATE,
            TBCONTRACTS
        );

  








        
        IF TBCONTRACTS.COUNT > 0 THEN

            
            NUINDICE := TBCONTRACTS.FIRST;
            
            
            LOOP
                
                IF  CT_BCCONTRACT.FBLHASCONTRACTTASKTYPES(TBCONTRACTS(NUINDICE).ID_CONTRATO) AND
                    TBCONTRACTS(NUINDICE).STATUS != CT_BOCONSTANTS.FSBGETCLOSEDSTATUS()
                THEN
                    
                    IF CT_BCCONTRACT.FBLAPPLYCONTBYTASKTYPE( TBCONTRACTS(NUINDICE).ID_CONTRATO, NUTASKTYPE) THEN
                        
                        ONUCONTRACTID := TBCONTRACTS(NUINDICE).ID_CONTRATO;
                        RETURN;
                    END IF;
                
                ELSIF CT_BCCONTRACT.FBLHASCONTTYPETASKTYPES(TBCONTRACTS(NUINDICE).ID_TIPO_CONTRATO) AND
                      TBCONTRACTS(NUINDICE).STATUS != CT_BOCONSTANTS.FSBGETCLOSEDSTATUS()
                THEN
                    
                    IF CT_BCCONTRACT.FBLAPPLYCONTTYPEBYTSKTYPE(TBCONTRACTS(NUINDICE).ID_TIPO_CONTRATO,NUTASKTYPE) THEN
                        
                        ONUCONTRACTID := TBCONTRACTS(NUINDICE).ID_CONTRATO;
                        RETURN;
                    END IF;
                ELSE
                    IF ONUCONTRACTID IS NULL THEN
                        
                        ONUCONTRACTID := TBCONTRACTS(NUINDICE).ID_CONTRATO;
                    END IF;

                END IF;

                
                NUINDICE := TBCONTRACTS.NEXT(NUINDICE);
                
                IF NUINDICE IS NULL THEN EXIT; END IF;
            END LOOP;

        END IF;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCONTRACTTOLIQORDER;


    






















    PROCEDURE GETORDERCONTRACT
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUOPERUNIT         IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUTASKTYPE         IN  OR_ORDER.TASK_TYPE_ID%TYPE,
        IDTLEGALDATE        IN  OR_ORDER.LEGALIZATION_DATE%TYPE,
        INUCONTRACTORID     IN  GE_CONTRATO.ID_CONTRATISTA%TYPE,
        IONUORDERCOST       IN OUT OR_ORDER.ESTIMATED_COST%TYPE,
        ONUCONTRACTID       OUT GE_CONTRATO.ID_CONTRATO%TYPE
    )
    IS

        TBCONTRACTS     DAGE_CONTRATO.TYTBGE_CONTRATO;
        NUINDICE        NUMBER;
        DTLEGALDATE     OR_ORDER.LEGALIZATION_DATE%TYPE;

    BEGIN

        ONUCONTRACTID:= NULL;

        IF (NVL(IONUORDERCOST, 0) = 0 ) THEN
        
            IF (NOT DAOR_TASKTYPE_AVG_COST.FBLEXIST(INUTASKTYPE)) THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(2741, 'No se encuentra definido el costo promedio para el tipo de trabajo ['||INUTASKTYPE||'].');
            END IF;
            
            IONUORDERCOST := DAOR_TASKTYPE_AVG_COST.FNUGETAVERAGE_COST(INUTASKTYPE);
        END IF;



        
        DTLEGALDATE := NVL(IDTLEGALDATE, UT_DATE.FDTSYSDATE);


        
        
        CT_BCCONTRACT.GETOPENCONTRACTBYVAL
        (
            INUCONTRACTORID,
            DTLEGALDATE,
            IONUORDERCOST,
            TBCONTRACTS
        );

  









        
        IF TBCONTRACTS.COUNT > 0 THEN

            
            NUINDICE := TBCONTRACTS.FIRST;
            
            
            LOOP
                
                IF  CT_BCCONTRACT.FBLHASCONTRACTTASKTYPES(TBCONTRACTS(NUINDICE).ID_CONTRATO) AND
                    TBCONTRACTS(NUINDICE).STATUS != CT_BOCONSTANTS.FSBGETCLOSEDSTATUS()
                THEN
                    
                    IF CT_BCCONTRACT.FBLAPPLYCONTBYTASKTYPE( TBCONTRACTS(NUINDICE).ID_CONTRATO, INUTASKTYPE) THEN
                        
                        ONUCONTRACTID := TBCONTRACTS(NUINDICE).ID_CONTRATO;
                        RETURN;
                    END IF;
                
                ELSIF CT_BCCONTRACT.FBLHASCONTTYPETASKTYPES(TBCONTRACTS(NUINDICE).ID_TIPO_CONTRATO) AND
                      TBCONTRACTS(NUINDICE).STATUS != CT_BOCONSTANTS.FSBGETCLOSEDSTATUS()
                THEN
                    
                    IF CT_BCCONTRACT.FBLAPPLYCONTTYPEBYTSKTYPE(TBCONTRACTS(NUINDICE).ID_TIPO_CONTRATO,INUTASKTYPE) THEN
                        
                        ONUCONTRACTID := TBCONTRACTS(NUINDICE).ID_CONTRATO;
                        RETURN;
                    END IF;
                ELSE
                    IF ONUCONTRACTID IS NULL THEN
                        
                        ONUCONTRACTID := TBCONTRACTS(NUINDICE).ID_CONTRATO;
                    END IF;

                END IF;

                
                NUINDICE := TBCONTRACTS.NEXT(NUINDICE);
                
                IF NUINDICE IS NULL THEN EXIT; END IF;
            END LOOP;

        END IF;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETORDERCONTRACT;


    



















    FUNCTION FNUGETCONTRACT
    (
        INUCONTRACTOR   IN  GE_CONTRATISTA.ID_CONTRATISTA%TYPE,
        INUTASKTYPEID   IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        IDTDATE         IN  OR_ORDER.EXECUTION_FINAL_DATE%TYPE DEFAULT UT_DATE.FDTSYSDATE
    ) RETURN GE_CONTRATO.ID_CONTRATO%TYPE
    IS
        TBCONTRACTS     DAGE_CONTRATO.TYTBGE_CONTRATO;
        NUINDICE        NUMBER;
        NUCONTRACTID    GE_CONTRATO.ID_CONTRATO%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIO CT_BOContract.fnuGetContract. inuContractor: '
                        ||TO_CHAR(INUCONTRACTOR)    ||' inuTasktypeId: '
                        ||TO_CHAR(INUTASKTYPEID)    , 2 );

        
        CT_BCCONTRACT.GETACTIVECONTRACTS
        (
            INUCONTRACTOR,
            IDTDATE,
            TBCONTRACTS
        );

        
        IF TBCONTRACTS.COUNT > 0 THEN

            
            NUINDICE := TBCONTRACTS.FIRST;
            
            
            LOOP
                
                IF CT_BCCONTRACT.FBLHASCONTRACTTASKTYPES(TBCONTRACTS(NUINDICE).ID_CONTRATO) THEN
                    
                    IF CT_BCCONTRACT.FBLAPPLYCONTBYTASKTYPE( TBCONTRACTS(NUINDICE).ID_CONTRATO, INUTASKTYPEID) THEN
                        
                        NUCONTRACTID := TBCONTRACTS(NUINDICE).ID_CONTRATO;
                        RETURN NUCONTRACTID;
                    END IF;
                
                ELSIF CT_BCCONTRACT.FBLHASCONTTYPETASKTYPES(TBCONTRACTS(NUINDICE).ID_TIPO_CONTRATO) THEN
                    
                    IF CT_BCCONTRACT.FBLAPPLYCONTTYPEBYTSKTYPE(TBCONTRACTS(NUINDICE).ID_TIPO_CONTRATO,INUTASKTYPEID) THEN
                        
                        NUCONTRACTID := TBCONTRACTS(NUINDICE).ID_CONTRATO;
                        RETURN NUCONTRACTID;
                    END IF;
                ELSE
                    IF NUCONTRACTID IS NULL THEN
                        
                        NUCONTRACTID := TBCONTRACTS(NUINDICE).ID_CONTRATO;
                    END IF;
                END IF;
                
                NUINDICE := TBCONTRACTS.NEXT(NUINDICE);
                
                IF NUINDICE IS NULL THEN EXIT; END IF;
            END LOOP;

        END IF;
        UT_TRACE.TRACE('FIN CT_BOContract.fnuGetContract. nuContractId: '||TO_CHAR(NUCONTRACTID), 2 );

        RETURN NUCONTRACTID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETCONTRACT;

    














    PROCEDURE GETACCOUNTCLASSIFLOV
    (
        ORFREFCURSOR OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN CT_BOContract.GetAccountClassifLoV', 1);

        CT_BCCONTRACT.GETACCOUNTCLASSIFLOV(ORFREFCURSOR);

        UT_TRACE.TRACE('END CT_BOContract.GetAccountClassifLoV', 1);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACCOUNTCLASSIFLOV;


    







































    PROCEDURE VALCONTRACTOVERRUN
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        INUCONTRACTID   IN  GE_CONTRATO.ID_CONTRATO%TYPE,
        INUOLDCONTRACT  IN  GE_CONTRATO.ID_CONTRATO%TYPE,
        INUORDERCOST    IN  OR_ORDER.ESTIMATED_COST%TYPE,
        INUORDERSTATUS  IN  OR_ORDER.ORDER_STATUS_ID%TYPE,
        INUPREVSTATUS   IN  OR_ORDER.ORDER_STATUS_ID%TYPE,
        INUCAUSALID     IN  OR_ORDER.CAUSAL_ID%TYPE,
        ONUREALCOST     OUT OR_ORDER.ESTIMATED_COST%TYPE
    )
    IS
        RCCONTRATO DAGE_CONTRATO.STYGE_CONTRATO;
        NUOLDCONTCOST   GE_CONTRATO.VALOR_ASIGNADO%TYPE;

        
        PROCEDURE VALASSIGNPROCESS
        IS
            CNUERROR_ASSIGN_CONTRACT GE_MESSAGE.MESSAGE_ID%TYPE := 904784;
        BEGIN
                
                IF(NVL(INUORDERCOST,0) = 0) THEN
                    RETURN;
                END IF;

                IF (INUCONTRACTID IS NULL) THEN
                    GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_ASSIGN_CONTRACT,INUORDERID);
                END IF;
                
                ONUREALCOST := INUORDERCOST;
                
                
                IF (INUCONTRACTID <> INUOLDCONTRACT AND  INUPREVSTATUS= 5) THEN
                    
                    UPDATE GE_CONTRATO
                    SET VALOR_ASIGNADO =  NVL(VALOR_ASIGNADO,0) - NVL(INUORDERCOST,0)
                        WHERE ID_CONTRATO= INUOLDCONTRACT;
                END IF;


                DAGE_CONTRATO.GETRECORD(INUCONTRACTID, RCCONTRATO);

                IF (RCCONTRATO.VALOR_TOTAL_CONTRATO < INUORDERCOST +
                    (NVL(RCCONTRATO.VALOR_NO_LIQUIDADO,0) + NVL(RCCONTRATO.VALOR_LIQUIDADO,0) + NVL(RCCONTRATO.VALOR_ASIGNADO,0) ) )
                    THEN

                    GE_BOERRORS.SETERRORCODEARGUMENT(CNUERROR_ASSIGN_CONTRACT,INUORDERID);

                END IF;

                
                RCCONTRATO.VALOR_ASIGNADO := NVL(RCCONTRATO.VALOR_ASIGNADO,0) + INUORDERCOST ;
                
                DAGE_CONTRATO.UPDRECORD(RCCONTRATO);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALASSIGNPROCESS;


        
        PROCEDURE VALLEGALPROCESS
        IS
            CNUNULL_CONTRACT_LEG GE_MESSAGE.MESSAGE_ID%TYPE := 904783;
            CNUERROR_CONTRACT_LEG GE_MESSAGE.MESSAGE_ID%TYPE := 904785;
            
        BEGIN
            ONUREALCOST := 0;
            
            
            IF( INUPREVSTATUS = 0) THEN
                ONUREALCOST := 0;
                RETURN;
            END IF;
            
            
            IF ( GE_BOCAUSAL.FBLGETSUCESSFULLCLASSCAUSAL(INUCAUSALID) ) THEN

                IF (INUCONTRACTID IS NULL) THEN
                    GE_BOERRORS.SETERRORCODE(CNUNULL_CONTRACT_LEG);
                END IF;

                
                ONUREALCOST := OR_BCORDERITEMS.FNUGETTOTALITEMVALUE(INUORDERID);

                DAGE_CONTRATO.GETRECORD(INUCONTRACTID, RCCONTRATO);

                
                
                IF (RCCONTRATO.VALOR_TOTAL_CONTRATO*(1+CNUCONTRACTOVERRUN/100) < NVL(ONUREALCOST,0) +
                    (NVL(RCCONTRATO.VALOR_NO_LIQUIDADO,0) + NVL(RCCONTRATO.VALOR_LIQUIDADO,0) ))
                    THEN

                    GE_BOERRORS.SETERRORCODE(CNUERROR_CONTRACT_LEG);

                END IF;

                IF (INUPREVSTATUS = 8) THEN
                    
                    IF (INUCONTRACTID <> INUOLDCONTRACT AND ONUREALCOST > 0 ) THEN

                        
                        UPDATE GE_CONTRATO SET  VALOR_NO_LIQUIDADO = VALOR_NO_LIQUIDADO - ONUREALCOST
                            WHERE ID_CONTRATO = INUOLDCONTRACT;
                            
                    END IF;
                ELSIF (INUPREVSTATUS = 5 OR INUPREVSTATUS = 6 OR INUPREVSTATUS = 7) THEN
                    
                    RCCONTRATO.VALOR_ASIGNADO := NVL(RCCONTRATO.VALOR_ASIGNADO,0) - NVL(INUORDERCOST,0) ;
                END IF;

                
                RCCONTRATO.VALOR_NO_LIQUIDADO := NVL(RCCONTRATO.VALOR_NO_LIQUIDADO,0) + NVL(ONUREALCOST,0) ;

                
                DAGE_CONTRATO.UPDRECORD(RCCONTRATO);
            ELSE

                IF (INUCONTRACTID IS NOT NULL) AND (INUPREVSTATUS = 5) THEN

                    
                    UPDATE GE_CONTRATO
                    SET VALOR_ASIGNADO =  NVL(VALOR_ASIGNADO,0) - NVL(INUORDERCOST,0)
                        WHERE ID_CONTRATO= INUCONTRACTID;
                    
                END IF;

            END IF;

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END VALLEGALPROCESS;

    BEGIN
        UT_TRACE.TRACE('init ValContractOverrun-inuOrderCost='||INUORDERCOST,15);
        
        IF(NVL(CNUCONTRACTOVERRUN,-1) < 0 OR  (INUORDERCOST IS NULL)) THEN
            RETURN;
        END IF;

        
        UT_TRACE.TRACE('init ValContractOverrun',15);
        UT_TRACE.TRACE(INUORDERID||'-'||INUCONTRACTID||'-'||INUOLDCONTRACT, 15);
        UT_TRACE.TRACE(INUORDERSTATUS||'-'||INUPREVSTATUS||'-'||INUCAUSALID, 15);


        
        IF (INUORDERSTATUS = 5) THEN
        
            VALASSIGNPROCESS;

        
        ELSIF (INUORDERSTATUS = 8) THEN

            VALLEGALPROCESS;

        END IF;


    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALCONTRACTOVERRUN;
    
    


















    PROCEDURE UPDATEORDERSBYCONTRACT
    (
        IDTBREAKDATE        IN         GE_ACTA.FECHA_FIN%TYPE,
        INUCONTRACTID       IN         GE_CONTRATO.ID_CONTRATO%TYPE,
        INUCONTRACTORID     IN         GE_CONTRATO.ID_CONTRATISTA%TYPE,
        INUCONTRACTTYPEID   IN         GE_CONTRATO.ID_TIPO_CONTRATO%TYPE,
        ISBTYPETOGETORDERS  IN         CT_TASKTYPE_CONTYPE.FLAG_TYPE%TYPE
    )
    IS
    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BOContract.updateOrdersByContract',10);

        
        IF ISBTYPETOGETORDERS = CT_BOCONSTANTS.CSBISCONTRACT THEN
            
            CT_BCCONTRACT.UPDATEORDERSBYCONTRACT
            (
                IDTBREAKDATE,
                INUCONTRACTID,
                INUCONTRACTORID
            );

        
        ELSIF ISBTYPETOGETORDERS = CT_BOCONSTANTS.CSBISCONTRACTTYPE THEN
            
            CT_BCCONTRACT.UPDATEORDERSBYCONTRACTTYPE
            (
                IDTBREAKDATE,
                INUCONTRACTID,
                INUCONTRACTORID,
                INUCONTRACTTYPEID
            );

        
        ELSE
            
            CT_BCCONTRACT.UPDATEORDERSBYGENERICCONTRACT
            (
                IDTBREAKDATE,
                INUCONTRACTID,
                INUCONTRACTORID
            );
        END IF;

        UT_TRACE.TRACE('FIN CT_BOContract.updateOrdersByContract',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ERROR - CONTROLLED_ERROR CT_BOContract.updateOrdersByContract',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('ERROR - OTHERS CT_BOContract.updateOrdersByContract',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDATEORDERSBYCONTRACT;

    














    PROCEDURE MASSASSIGNCONTRACT
    (
        INUCONTRACTID     IN  GE_CONTRATO.ID_CONTRATO%TYPE
    )
    IS
        SBTYPETOGETORDERS   CT_TASKTYPE_CONTYPE.FLAG_TYPE%TYPE;
        RCCONTRACT          DAGE_CONTRATO.STYGE_CONTRATO;
    BEGIN
        
        UT_TRACE.TRACE('INICIO CT_BOContract.MassAssignContract',10);

        
        RCCONTRACT := DAGE_CONTRATO.FRCGETRECORD(INUCONTRACTID);

        
        SBTYPETOGETORDERS := CT_BOLIQUIDATIONSUPPORT.FSBGETTYPETOGETORDERS
                             (
                                INUCONTRACTID,
                                RCCONTRACT.ID_TIPO_CONTRATO
                             );

        
        CT_BOCONTRACT.UPDATEORDERSBYCONTRACT
        (
            RCCONTRACT.FECHA_FINAL,
            RCCONTRACT.ID_CONTRATO,
            RCCONTRACT.ID_CONTRATISTA,
            RCCONTRACT.ID_TIPO_CONTRATO,
            SBTYPETOGETORDERS
        );

        UT_TRACE.TRACE('FIN CT_BOContract.MassAssignContract',10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ERROR - CONTROLLED_ERROR CT_BOContract.MassAssignContract',10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('ERROR - OTHERS CT_BOContract.MassAssignContract',10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END MASSASSIGNCONTRACT;


END CT_BOCONTRACT;