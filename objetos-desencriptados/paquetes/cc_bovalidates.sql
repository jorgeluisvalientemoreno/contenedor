CREATE OR REPLACE PACKAGE BODY CC_BOVALIDATES IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO154181';
   CURSOR CUVALIDATE( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, INUATTRIBUTECLASSID IN GE_ATTRIBUTE_CLASS.ATTRIBUTE_CLASS_ID%TYPE ) IS
SELECT /*+ leading(a) INDEX (A PK_PS_PACKAGE_TYPE_PARAM) */
            A.ATTRIBUTE_ID, B.VALID_EXPRESSION, A.CLASS, B.DEFAULT_VALUE
        FROM PS_PACK_TYPE_PARAM A, GE_ATTRIBUTES B
        WHERE A.PACKAGE_TYPE_ID = inuPackageTypeId
        AND A.VALUE != 'N'
        AND A.ATTRIBUTE_ID = B.ATTRIBUTE_ID
        AND B.ATTRIBUTE_CLASS_ID + 0 = nvl(inuAttributeClassId,B.ATTRIBUTE_CLASS_ID)
        AND B.VALID_EXPRESSION IS NOT NULL
        ORDER BY PARAMETER_ORDER;
   RCVALIDATE CUVALIDATE%ROWTYPE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE VALIDATES( INUATTRIBUTECLASSID IN GE_ATTRIBUTE_CLASS.ATTRIBUTE_CLASS_ID%TYPE, INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE := NULL, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
      SBERROR VARCHAR2( 32000 ) := NULL;
      NUERRORCODE GE_MESSAGE.MESSAGE_ID%TYPE;
      SBERRORMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
      NUMENSAJE GE_MESSAGE.MESSAGE_ID%TYPE;
    BEGIN
      IF ( INUPACKAGETYPEID IS NULL ) THEN
         RETURN;
      END IF;
      OPEN CUVALIDATE( INUPACKAGETYPEID, INUATTRIBUTECLASSID );
      LOOP
         FETCH CUVALIDATE
            INTO RCVALIDATE;
         EXIT WHEN CUVALIDATE%NOTFOUND;
         UT_TRACE.TRACE( 'Atributo:[' || RCVALIDATE.ATTRIBUTE_ID || ']Regla:[' || RCVALIDATE.VALID_EXPRESSION || ']Clase:[' || RCVALIDATE.CLASS || ']', 15 );
         IF ( NVL( RCVALIDATE.CLASS, 'E' ) != 'M' ) OR IBLINCLUDEDWARNING THEN
            GR_BOCONFIG_EXPRESSION.EXECUTE( RCVALIDATE.VALID_EXPRESSION, NUERRORCODE, SBERRORMSG );
            IF ( NUERRORCODE != GE_BOCONSTANTS.CNUSUCCESS ) THEN
               IF ( RCVALIDATE.CLASS = 'M' ) THEN
                  NUMENSAJE := NVL( RCVALIDATE.DEFAULT_VALUE, NUERRORCODE );
                  SBERROR := SBERROR || '[' || TO_CHAR( NUMENSAJE ) || '-' || SBERRORMSG || ']';
                ELSE
                  RAISE EX.CONTROLLED_ERROR;
               END IF;
            END IF;
         END IF;
      END LOOP;
      CLOSE CUVALIDATE;
      IF ( SBERROR IS NOT NULL ) THEN
         ERRORS.SETERROR( NUMENSAJE );
         ERRORS.SETMESSAGE( SBERROR );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUVALIDATE%ISOPEN ) THEN
            CLOSE CUVALIDATE;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUVALIDATE%ISOPEN ) THEN
            CLOSE CUVALIDATE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END VALIDATES;
   PROCEDURE CUSTOMERVALIDATES( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
    BEGIN
      IF ( INUPACKAGETYPEID IS NULL ) THEN
         RETURN;
      END IF;
      VALIDATES( CNUVAL_CUSTOMER, INUPACKAGETYPEID, IBLINCLUDEDWARNING );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CUSTOMERVALIDATES;
   PROCEDURE SUBSCRIPTIONVALIDATES( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
    BEGIN
      IF ( INUPACKAGETYPEID IS NULL ) THEN
         RETURN;
      END IF;
      VALIDATES( CNUVAL_SUBSCRIPTION, INUPACKAGETYPEID, IBLINCLUDEDWARNING );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SUBSCRIPTIONVALIDATES;
   PROCEDURE PRODUCTVALIDATES( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
    BEGIN
      IF ( INUPACKAGETYPEID IS NULL ) THEN
         RETURN;
      END IF;
      VALIDATES( CNUVAL_PRODUCT, INUPACKAGETYPEID, IBLINCLUDEDWARNING );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PRODUCTVALIDATES;
   PROCEDURE REQUESTVALIDATES( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
    BEGIN
      IF ( INUPACKAGETYPEID IS NULL ) THEN
         RETURN;
      END IF;
      VALIDATES( CNUVAL_REQUEST, INUPACKAGETYPEID, IBLINCLUDEDWARNING );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END REQUESTVALIDATES;
   PROCEDURE PENDREQVALBYPRODUCT( INUPACKAGETYPE IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE )
    IS
      SBRESPONSE VARCHAR2( 1 );
    BEGIN
      IF ( INUPACKAGETYPE IS NULL ) THEN
         RETURN;
      END IF;
      PS_BOPACKTYPEVALIDATE.VALPENDPACKTYPEPROD( INUPACKAGETYPE, INUPRODUCTID, GE_BOCONSTANTS.CSBYES, SBRESPONSE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PENDREQVALBYPRODUCT;
   PROCEDURE PENDREQVALBYCONTRACT( INUPACKAGETYPE IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, INUSUBSCRIPTIONID IN PR_PRODUCT.SUBSCRIPTION_ID%TYPE )
    IS
      SBPACKTYPETOVAL VARCHAR2( 10000 );
      SBRESPONSE VARCHAR2( 1 );
    BEGIN
      IF ( INUPACKAGETYPE IS NULL ) THEN
         RETURN;
      END IF;
      PS_BOPACKTYPEVALIDATE.VALPENDREQBYCONTRACT( INUPACKAGETYPE, INUSUBSCRIPTIONID, GE_BOCONSTANTS.CSBYES, SBRESPONSE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE COMPONENTVALIDATES( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
    BEGIN
      VALIDATES( CNUVAL_COMPONENT, INUPACKAGETYPEID, IBLINCLUDEDWARNING );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END COMPONENTVALIDATES;
   PROCEDURE RESTRICTIONVALIDATES( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
    BEGIN
      IF ( INUPACKAGETYPEID IS NULL ) THEN
         RETURN;
      END IF;
      VALIDATES( CNUVAL_RESTRICTION, INUPACKAGETYPEID, IBLINCLUDEDWARNING );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END RESTRICTIONVALIDATES;
   PROCEDURE PLANNEDITEMSVALIDATES( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
    BEGIN
      IF ( INUPACKAGETYPEID IS NULL ) THEN
         RETURN;
      END IF;
      VALIDATES( CNUVAL_PLANNEDITEMS, INUPACKAGETYPEID, IBLINCLUDEDWARNING );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PLANNEDITEMSVALIDATES;
   PROCEDURE PREREGISTERVALIDATES( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
    BEGIN
      IF ( INUPACKAGETYPEID IS NULL ) THEN
         RETURN;
      END IF;
      VALIDATES( CNUVAL_PRE_REGISTER, INUPACKAGETYPEID, IBLINCLUDEDWARNING );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END PREREGISTERVALIDATES;
   PROCEDURE POSTREGISTERVALIDATES( INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, IBLINCLUDEDWARNING IN BOOLEAN := TRUE )
    IS
    BEGIN
      IF ( INUPACKAGETYPEID IS NULL ) THEN
         RETURN;
      END IF;
      VALIDATES( CNUVAL_POST_REGISTER, INUPACKAGETYPEID, IBLINCLUDEDWARNING );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END POSTREGISTERVALIDATES;
END CC_BOVALIDATES;
/


