PACKAGE BODY GE_BOITemsDocumento
IS













































    
    
    
    
    CSBVERSION          CONSTANT VARCHAR2(20)               := 'SAO210555';

	
    CNUINVALID_DOCUMENT CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 143740;
    CNUNULL_DOCUMENT    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 143741;
    CNUINVALID_STATUS   CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 143744;
    CNUITEMSTRANSITO    CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 143780;

    CSBENTRADA_EXECUTABLE         CONSTANT SA_EXECUTABLE.NAME%TYPE := 'ORAJI_ENTRADA';
    CSBSALIDA_EXECUTABLE          CONSTANT SA_EXECUTABLE.NAME%TYPE := 'ORAJI_SALIDA';
    CSBRECLASIFICACION_EXECUTABLE CONSTANT SA_EXECUTABLE.NAME%TYPE := 'ORAJI_RECLASIFICACION';


    
    
    
    
    CNUCAUSALPORROBO            CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 625;
    CNUCAUSALPORPERDIDA         CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 626;
    CNUCAUSALDARDEBAJA          CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 627;

    
    CNUCAUSALOBSOLESCENCIA      CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 624;
    CNUCAUSALREUSO              CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 628;
    CNUCAUSALDESCARTE           CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 629;
    CNUCAUSALRECLAREC           CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 630;
    CNUCAUSALALISTADO           CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 631;

    
    CNUCAUSALINGRESO            CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 632;
    CNUCAUSALENTRADAREC         CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 633;
    CNUCAUSALCHATARRA           CONSTANT GE_CAUSAL.CAUSAL_ID%TYPE   := 634;


    

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    




















    PROCEDURE REGISTRARDOCUMENTO
    (
        INUTIPODOCUMENTO            IN  GE_ITEMS_DOCUMENTO.DOCUMENT_TYPE_ID%TYPE,
        INUUNIDADOPERATIVA          IN  GE_ITEMS_DOCUMENTO.OPERATING_UNIT_ID%TYPE,
        INUUNIDADOPERATIVADESTINO   IN  GE_ITEMS_DOCUMENTO.DESTINO_OPER_UNI_ID%TYPE,
        IDTFECHA                    IN  GE_ITEMS_DOCUMENTO.FECHA%TYPE,
        ISBDOCUMENTOEXTERNO         IN  GE_ITEMS_DOCUMENTO.DOCUMENTO_EXTERNO%TYPE,
        ISBESTADO                   IN  GE_ITEMS_DOCUMENTO.ESTADO%TYPE,
        ISBCOMENTARIO               IN  GE_ITEMS_DOCUMENTO.COMENTARIO%TYPE,
        ONUIDITEMSDOCUMENTO         OUT GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE,
        INUPACKAGE_ID               IN  GE_ITEMS_DOCUMENTO.PACKAGE_ID%TYPE DEFAULT NULL,
        INUCAUSAL                   IN  GE_ITEMS_DOCUMENTO.CAUSAL_ID%TYPE DEFAULT NULL
    )
    IS

        SBDOCDESC   GE_DOCUMENT_TYPE.DESCRIPTION%TYPE;
        SBNAME      OR_OPERATING_UNIT.NAME%TYPE;
        
        RCITEMSDOCUMENTO DAGE_ITEMS_DOCUMENTO.STYGE_ITEMS_DOCUMENTO;
        
    BEGIN
        DAGE_DOCUMENT_TYPE.ACCKEY(INUTIPODOCUMENTO);
        DAOR_OPERATING_UNIT.ACCKEY(INUUNIDADOPERATIVA);
        DAOR_OPERATING_UNIT.ACCKEY(INUUNIDADOPERATIVADESTINO);
        
        IF ISBDOCUMENTOEXTERNO IS NOT NULL THEN
            IF GE_BCITEMSDOCUMENTO.FNUGETITEMSDOCBYDOCEXT(INUTIPODOCUMENTO,INUUNIDADOPERATIVA,ISBDOCUMENTOEXTERNO) IS NOT NULL THEN
                SBDOCDESC := DAGE_DOCUMENT_TYPE.FSBGETDESCRIPTION(INUTIPODOCUMENTO);
                SBNAME := DAOR_OPERATING_UNIT.FSBGETNAME(INUUNIDADOPERATIVA);

                ERRORS.SETERROR(CNUINVALID_DOCUMENT,ISBDOCUMENTOEXTERNO||'|'||SBDOCDESC||'|'||SBNAME );
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        RCITEMSDOCUMENTO.DOCUMENT_TYPE_ID       :=  INUTIPODOCUMENTO;
        RCITEMSDOCUMENTO.OPERATING_UNIT_ID      :=  INUUNIDADOPERATIVA;
        RCITEMSDOCUMENTO.DESTINO_OPER_UNI_ID    :=  INUUNIDADOPERATIVADESTINO;
        RCITEMSDOCUMENTO.FECHA                  :=  NVL(IDTFECHA, SYSDATE);
        RCITEMSDOCUMENTO.DOCUMENTO_EXTERNO      :=  ISBDOCUMENTOEXTERNO;
        RCITEMSDOCUMENTO.ESTADO                 :=  ISBESTADO;
        RCITEMSDOCUMENTO.COMENTARIO             :=  ISBCOMENTARIO;

        RCITEMSDOCUMENTO.USER_ID                :=  SA_BOUSER.FNUGETUSERID(UT_SESSION.GETUSER) ;
        RCITEMSDOCUMENTO.TERMINAL_ID            :=  UT_SESSION.GETTERMINAL;
        RCITEMSDOCUMENTO.CAUSAL_ID              :=  INUCAUSAL;
        RCITEMSDOCUMENTO.PACKAGE_ID             :=  INUPACKAGE_ID;

        ONUIDITEMSDOCUMENTO                     :=  GE_BOITEMSSEQUENCE.NEXTGE_ITEMS_DOCUMENTO;

        RCITEMSDOCUMENTO.ID_ITEMS_DOCUMENTO     :=  ONUIDITEMSDOCUMENTO;

        DAGE_ITEMS_DOCUMENTO.INSRECORD(RCITEMSDOCUMENTO);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGISTRARDOCUMENTO;


    
















    PROCEDURE RELACIONARDOCUMENTO
    (
        INUIDITEMSDOCORIGEN     IN  GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE,
        INUIDITEMSDOCDESTINO    IN  GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE,
        ONUIDITEMSDOCRELACION   OUT GE_ITEMS_DOC_REL.ID_ITEMS_DOC_RELACION%TYPE
    )
    IS
       RCGEITEMSDOCREL  DAGE_ITEMS_DOC_REL.STYGE_ITEMS_DOC_REL;
    BEGIN
        DAGE_ITEMS_DOCUMENTO.ACCKEY(INUIDITEMSDOCORIGEN);
        DAGE_ITEMS_DOCUMENTO.ACCKEY(INUIDITEMSDOCDESTINO);
        
        ONUIDITEMSDOCRELACION := GE_BCITEMSDOCUMENTO.FNUGETITEMSDOCREL(INUIDITEMSDOCORIGEN, INUIDITEMSDOCDESTINO);
        
        IF ONUIDITEMSDOCRELACION IS NULL THEN
            RCGEITEMSDOCREL.ID_ITEMS_DOC_ORIGEN     := INUIDITEMSDOCORIGEN;
            RCGEITEMSDOCREL.ID_ITEMS_DOC_DESTINO    := INUIDITEMSDOCDESTINO;

            ONUIDITEMSDOCRELACION := GE_BOITEMSSEQUENCE.NEXTGE_ITEMS_DOC_REL;

            RCGEITEMSDOCREL.ID_ITEMS_DOC_RELACION   := ONUIDITEMSDOCRELACION;
            DAGE_ITEMS_DOC_REL.INSRECORD(RCGEITEMSDOCREL);
        END IF;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END RELACIONARDOCUMENTO;
    
    
    
















    PROCEDURE CAMBIARESTADO
    (
        INUIDITEMSDOCUMENTO IN  GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE,
        ISBESTADO           IN  GE_ITEMS_DOCUMENTO.ESTADO%TYPE
    )
    IS

    BEGIN

        DAGE_ITEMS_DOCUMENTO.ACCKEY(INUIDITEMSDOCUMENTO);
        
        IF ISBESTADO
            NOT IN (
                    GE_BOITEMSCONSTANTS.CSBESTADOABIERTO,
                    GE_BOITEMSCONSTANTS.CSBESTADOCERRADO,
                    GE_BOITEMSCONSTANTS.CSBESTADOEXPORTADO
                    )
        THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUINVALID_STATUS ,ISBESTADO);
        END IF;
        

        DAGE_ITEMS_DOCUMENTO.UPDESTADO(INUIDITEMSDOCUMENTO,ISBESTADO);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CAMBIARESTADO;
    
    




















    PROCEDURE GETVALIDDOCTYPELOV
    (
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    
        SBQUERY        VARCHAR(4000);
        SBDOCTYPES     VARCHAR(4000);


        FUNCTION EXECUTABLEENABLED
        (
            ISBEXECUTABLENAME     IN      SA_EXECUTABLE.NAME%TYPE
        )
        RETURN BOOLEAN
        IS
            NUEXECUTABLEID SA_EXECUTABLE.EXECUTABLE_ID%TYPE;
        BEGIN
            NUEXECUTABLEID := SA_BOUSER.ISENABLEDTOEXECUTEBYNAME(ISBEXECUTABLENAME);
            RETURN TRUE;
        EXCEPTION
            WHEN OTHERS THEN
                RETURN FALSE;
        END;

    BEGIN
        SBQUERY :=
           'SELECT  document_type_id,
                    description
            FROM    ge_document_type ';


        IF EXECUTABLEENABLED(CSBENTRADA_EXECUTABLE) THEN
            SBDOCTYPES := ''||GE_BOITEMSCONSTANTS.CNUTIPOAJUSTEENTRADA;
        END IF;

        IF EXECUTABLEENABLED(CSBSALIDA_EXECUTABLE) THEN
            IF SBDOCTYPES IS NOT NULL THEN
                SBDOCTYPES := SBDOCTYPES||', ';
            END IF;
            SBDOCTYPES := SBDOCTYPES||GE_BOITEMSCONSTANTS.CNUTIPOAJUSTESALIDA;
        END IF;

        IF EXECUTABLEENABLED(CSBRECLASIFICACION_EXECUTABLE) THEN
            IF SBDOCTYPES IS NOT NULL THEN
                SBDOCTYPES := SBDOCTYPES||', ';
            END IF;
            SBDOCTYPES := SBDOCTYPES||GE_BOITEMSCONSTANTS.CNUTIPOAJUSTERECLASIFICACION;
        END IF;

        IF SBDOCTYPES IS NOT NULL THEN
            SBQUERY := SBQUERY ||'WHERE document_type_id IN ('||SBDOCTYPES||')';
        ELSE
            SBQUERY := SBQUERY ||'WHERE -1 = 1';
        END IF;

        UT_TRACE.TRACE('SQL ['||SBQUERY||']', 15);

        OPEN ORFDATACURSOR FOR SBQUERY;

        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            RAISE EX.CONTROLLED_ERROR;
    END GETVALIDDOCTYPELOV;
    

    

























    PROCEDURE CREATEDOCTRANSLATE
    (
        INUORIGINOPERUNITID     IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUTARGETOPERUNITID     IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBDOCUMENTOEXTERNO     IN  GE_ITEMS_DOCUMENTO.DOCUMENTO_EXTERNO%TYPE,
        ISBCOMENTARIO           IN  GE_ITEMS_DOCUMENTO.COMENTARIO%TYPE,
        ISBTRANSITO             IN  VARCHAR2,
        ONUITEMSDOCUMENTO       OUT GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE,
        INUCAUSAL               IN  GE_ITEMS_DOCUMENTO.CAUSAL_ID%TYPE DEFAULT NULL
    )
    IS
        SBESTADO                GE_ITEMS_DOCUMENTO.ESTADO%TYPE;
        NUDOCRELATION           GE_ITEMS_DOC_REL.ID_ITEMS_DOC_RELACION%TYPE;
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOItemsDocumento.CreateDocTranslate', 6);
        UT_TRACE.TRACE('inuOriginOperUnitId: [' || INUORIGINOPERUNITID
            || '] - inuTargetOperUnitId: [' || INUTARGETOPERUNITID
            || '] - isbDocumentoExterno: [' || ISBDOCUMENTOEXTERNO
            || '] - isbComentario: [' || ISBCOMENTARIO
            || '] - isbTransito: [' || ISBTRANSITO
            || '] - inuCausal: [' || INUCAUSAL || '] ' , 7);

        
        IF (ISBTRANSITO = GE_BOCONSTANTS.CSBYES) THEN
            SBESTADO    := GE_BOITEMSCONSTANTS.CSBESTADOABIERTO;  
        ELSE
            SBESTADO    := GE_BOITEMSCONSTANTS.CSBESTADOCERRADO;  
        END IF;

        
        REGISTRARDOCUMENTO
        (
            INUTIPODOCUMENTO          =>  GE_BOITEMSCONSTANTS.CNUTIPOTRASLADOITEMS, 
            INUUNIDADOPERATIVA        =>  INUORIGINOPERUNITID,
            INUUNIDADOPERATIVADESTINO =>  INUTARGETOPERUNITID,
            IDTFECHA                  =>  UT_DATE.FDTSYSDATE,
            ISBDOCUMENTOEXTERNO       =>  ISBDOCUMENTOEXTERNO,
            ISBESTADO                 =>  SBESTADO,
            ISBCOMENTARIO             =>  ISBCOMENTARIO,
            ONUIDITEMSDOCUMENTO       =>  ONUITEMSDOCUMENTO,
            INUCAUSAL                 =>  INUCAUSAL
        );

        
        
        RELACIONARDOCUMENTO
        (
            ONUITEMSDOCUMENTO,
            ONUITEMSDOCUMENTO,
            NUDOCRELATION
        );

        UT_TRACE.TRACE('Documento: ['||ONUITEMSDOCUMENTO||'] - Relacion: ['||NUDOCRELATION||']', 7);

        UT_TRACE.TRACE('--[FIN] GE_BOItemsDocumento.CreateDocTranslate', 7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
  	























    PROCEDURE CREATEDOCRECEPCION
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBDOCUMENTOEXTERNO     IN  GE_ITEMS_DOCUMENTO.DOCUMENTO_EXTERNO%TYPE,
        ISBCOMENTARIO           IN  GE_ITEMS_DOCUMENTO.COMENTARIO%TYPE,
        ONUITEMSDOCUMENTO       OUT GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE,
        INUCAUSAL               IN  GE_ITEMS_DOCUMENTO.CAUSAL_ID%TYPE DEFAULT NULL
    )
    IS
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOItemsDocumento.CreateDocRecepcion', 6);
        UT_TRACE.TRACE('inuOperatingUnitId: [' || INUOPERATINGUNITID
            || '] - isbDocumentoExterno: [' || ISBDOCUMENTOEXTERNO
            || '] - isbComentario: [' || ISBCOMENTARIO
            || '] - inuCausal: [' || INUCAUSAL || ']' , 7);

        
        REGISTRARDOCUMENTO
        (
            INUTIPODOCUMENTO          =>  GE_BOITEMSCONSTANTS.CNUTIPORECEPCIONINTE, 
            INUUNIDADOPERATIVA        =>  INUOPERATINGUNITID,
            INUUNIDADOPERATIVADESTINO =>  INUOPERATINGUNITID,
            IDTFECHA                  =>  UT_DATE.FDTSYSDATE,
            ISBDOCUMENTOEXTERNO       =>  ISBDOCUMENTOEXTERNO,
            ISBESTADO                 =>  GE_BOITEMSCONSTANTS.CSBESTADOCERRADO,
            ISBCOMENTARIO             =>  ISBCOMENTARIO,
            ONUIDITEMSDOCUMENTO       =>  ONUITEMSDOCUMENTO,
            INUCAUSAL                 =>  INUCAUSAL
        );

        UT_TRACE.TRACE('Documento: ['||ONUITEMSDOCUMENTO||']', 7);

        UT_TRACE.TRACE('--[FIN] GE_BOItemsDocumento.CreateDocRecepcion', 6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

  	

























    PROCEDURE CREATEDOCRECLAMO
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUTARGETOPERUNITID     IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBCOMENTARIO           IN  GE_ITEMS_DOCUMENTO.COMENTARIO%TYPE,
        ONUITEMSDOCUMENTO       OUT GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE,
        INUCAUSAL               IN  GE_ITEMS_DOCUMENTO.CAUSAL_ID%TYPE DEFAULT NULL,
        ISBDOCUMENTOEXTERNO     IN  GE_ITEMS_DOCUMENTO.DOCUMENTO_EXTERNO%TYPE DEFAULT NULL
    )
    IS
        NUTIPODOCUMENTO         GE_ITEMS_DOCUMENTO.DOCUMENT_TYPE_ID%TYPE;
        NUOPERUNITCLASSIF       OR_OPERATING_UNIT.OPER_UNIT_CLASSIF_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOItemsDocumento.CreateDocReclamo', 6);
        UT_TRACE.TRACE('inuOperatingUnitId: [' || INUOPERATINGUNITID
            || '] - inuTargetOperUnitId: [' || INUTARGETOPERUNITID
            || '] - isbComentario: [' || ISBCOMENTARIO
            || '] - inuCausal: [' || INUCAUSAL || ']' , 7);

        
        NUOPERUNITCLASSIF := DAOR_OPERATING_UNIT.FNUGETOPER_UNIT_CLASSIF_ID(INUTARGETOPERUNITID);

        
        
        IF ( (NUOPERUNITCLASSIF = GE_BOITEMSCONSTANTS.CNUUNID_OP_PROVEEDORA)
            OR (NUOPERUNITCLASSIF = GE_BOITEMSCONSTANTS.CNUUNID_OP_CENTRO_REPARA) ) THEN
            
            NUTIPODOCUMENTO := GE_BOITEMSCONSTANTS.CNUTIPORECLAMOAPROVE;  
        ELSE
            
            NUTIPODOCUMENTO := GE_BOITEMSCONSTANTS.CNUTIPODEVTRASLADO; 
        END IF;

        
        REGISTRARDOCUMENTO
        (
            INUTIPODOCUMENTO          =>  NUTIPODOCUMENTO,
            INUUNIDADOPERATIVA        =>  INUOPERATINGUNITID,
            INUUNIDADOPERATIVADESTINO =>  INUTARGETOPERUNITID,
            IDTFECHA                  =>  UT_DATE.FDTSYSDATE,
            ISBDOCUMENTOEXTERNO       =>  ISBDOCUMENTOEXTERNO,
            ISBESTADO                 =>  GE_BOITEMSCONSTANTS.CSBESTADOCERRADO,
            ISBCOMENTARIO             =>  ISBCOMENTARIO,
            ONUIDITEMSDOCUMENTO       =>  ONUITEMSDOCUMENTO,
            INUCAUSAL                 =>  INUCAUSAL
        );

        UT_TRACE.TRACE('Documento: ['||ONUITEMSDOCUMENTO||']', 7);

        UT_TRACE.TRACE('--[FIN] GE_BOItemsDocumento.CreateDocReclamo', 6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

  	























    PROCEDURE CREATEDOCAJUSTE
    (
        INUOPERATINGUNITID      IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INUDOCUMENTTYPEID       IN  GE_ITEMS_DOCUMENTO.DOCUMENT_TYPE_ID%TYPE,
        ISBDOCUMENTOEXTERNO     IN  GE_ITEMS_DOCUMENTO.DOCUMENTO_EXTERNO%TYPE,
        IDTFECHA                IN  GE_ITEMS_DOCUMENTO.FECHA%TYPE,
        ISBCOMENTARIO           IN  GE_ITEMS_DOCUMENTO.COMENTARIO%TYPE,
        INUCAUSAL                   IN  GE_ITEMS_DOCUMENTO.CAUSAL_ID%TYPE,
        ONUITEMSDOCUMENTO       OUT GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOItemsDocumento.CreateDocAjuste', 6);
        UT_TRACE.TRACE('inuOperatingUnitId: [' || INUOPERATINGUNITID
            || '] - inuDocumentTypeId: [' || INUDOCUMENTTYPEID
            || '] - isbDocumentoExterno: [' || ISBDOCUMENTOEXTERNO
            || '] - idtFecha: [' || IDTFECHA
            || '] - isbComentario: [' || ISBCOMENTARIO || '] ' , 7);

        
        CREATEDOCUMENT
        (
            INUDOCUMENTTYPEID,
            INUOPERATINGUNITID,
            INUOPERATINGUNITID,
            IDTFECHA,
            ISBDOCUMENTOEXTERNO,
            GE_BOITEMSCONSTANTS.CSBESTADOCERRADO,
            ISBCOMENTARIO,
            INUCAUSAL,
            ONUITEMSDOCUMENTO
        );

        UT_TRACE.TRACE('Documento: ['||ONUITEMSDOCUMENTO||']', 7);

        UT_TRACE.TRACE('--[FIN] GE_BOItemsDocumento.CreateDocAjuste', 6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    





















    PROCEDURE GENERARLOGRECEPCION
    (
        INUDOCRECEPCION         IN  GE_ITEMS_DOC_LOG.ID_ITEMS_DOCUMENTO%TYPE,
        ISBITEM                 IN  GE_ITEMS_DOC_LOG.ITEM%TYPE,
        ISBCLASE                IN  GE_ITEMS_DOC_LOG.CLASE%TYPE,
        ISBCOMENTARIO           IN  GE_ITEMS_DOC_LOG.OBSERVACION%TYPE
    )
    IS
        RCITEMSDOCLOG           DAGE_ITEMS_DOC_LOG.STYGE_ITEMS_DOC_LOG;
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOItemsDocumento.GenerarLogRecepcion', 6);
        UT_TRACE.TRACE('inuDocRecepcion: [' || INUDOCRECEPCION || '] - '
            || 'isbItem: [' || ISBITEM || ']'
            || 'isbClase: [' || ISBCLASE || ']'
            || 'isbComentario: [' || ISBCOMENTARIO || ']', 7);

        
        DAGE_ITEMS_DOCUMENTO.ACCKEY(INUDOCRECEPCION);

        
        RCITEMSDOCLOG.ID_ITEMS_DOC_LOG      := GE_BOITEMSSEQUENCE.NEXTGE_ITEMS_DOC_LOG;
        RCITEMSDOCLOG.ID_ITEMS_DOCUMENTO    := INUDOCRECEPCION;
        RCITEMSDOCLOG.ITEM                  := UT_STRING.FSBSUBSTR(ISBITEM, 0, 100);
        RCITEMSDOCLOG.CLASE                 := UT_STRING.FSBSUBSTR(ISBCLASE, 0, 20);
        RCITEMSDOCLOG.ESTADO                := GE_BOITEMSCONSTANTS.CSBDOCSTATUS_REGIST; 
        RCITEMSDOCLOG.OBSERVACION           := ISBCOMENTARIO;

        
        DAGE_ITEMS_DOC_LOG.INSRECORD(RCITEMSDOCLOG);

        UT_TRACE.TRACE('--[FIN] GE_BOItemsDocumento.GenerarLogRecepcion', 6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE GETLOGBYDOCUMENT
    (
        INUDOCUMENT         IN  GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE,
        ORFLOGDOCS          OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('--[INICIO] mf_packagetemp.GetLogByDocument', 6);
        GE_BCITEMSDOCUMENTO.GETLOGBYDOCUMENT(INUDOCUMENT, ORFLOGDOCS);
        UT_TRACE.TRACE('--[FIN] mf_packagetemp.GetLogByDocument', 6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFLOGDOCS);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFLOGDOCS);
            RAISE EX.CONTROLLED_ERROR;
    END;

    



















    PROCEDURE TOACTUALIZARLOGRECEPCION
    (
        INUITEMDOCLOG           IN  GE_ITEMS_DOC_LOG.ID_ITEMS_DOC_LOG%TYPE,
        ISBESTADO               IN  GE_ITEMS_DOC_LOG.ESTADO%TYPE,
        ISBCOMENTARIO           IN  GE_ITEMS_DOC_LOG.OBSERVACION%TYPE,
        ONUERRORCODE            OUT NUMBER,
        OSBERRORMESSAGE         OUT VARCHAR2
    )
    IS
        RCITEMSDOCLOG           DAGE_ITEMS_DOC_LOG.STYGE_ITEMS_DOC_LOG;
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOItemsDocumento.ToActualizarLogRecepcion', 7);
        UT_TRACE.TRACE('inuItemDocLog: [' || INUITEMDOCLOG || '] - '
            || 'isbEstado: [' || ISBESTADO || ']'
            || 'isbComentario: [' || ISBCOMENTARIO || ']', 7);

        
        GE_BOUTILITIES.INITIALIZEOUTPUT(ONUERRORCODE, OSBERRORMESSAGE);

        SAVEPOINT SP_UPDATE;

        
        DAGE_ITEMS_DOC_LOG.GETRECORD(INUITEMDOCLOG, RCITEMSDOCLOG);

        
        RCITEMSDOCLOG.ESTADO                := ISBESTADO;
        RCITEMSDOCLOG.OBSERVACION           := ISBCOMENTARIO;

        
        DAGE_ITEMS_DOC_LOG.UPDRECORD(RCITEMSDOCLOG);

        UT_TRACE.TRACE('--[FIN] GE_BOItemsDocumento.ToActualizarLogRecepcion', 7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK TO SP_UPDATE;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
			UT_TRACE.TRACE('--[FIN] GE_BOItemsDocumento.ToActualizarLogRecepcion EXCEPTION: CONTROLLED_ERROR ', 7);
		WHEN OTHERS THEN
    		ROLLBACK TO SP_UPDATE;
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
			UT_TRACE.TRACE('--[FIN] GE_BOItemsDocumento.ToActualizarLogRecepcion EXCEPTION: OTHERS_ERROR ', 7);
    END;

    



















    PROCEDURE ACTUALIZARLOGRECEPCION
    (
        INUITEMDOCLOG           IN  GE_ITEMS_DOC_LOG.ID_ITEMS_DOC_LOG%TYPE,
        ISBESTADO               IN  GE_ITEMS_DOC_LOG.ESTADO%TYPE,
        ISBCOMENTARIO           IN  GE_ITEMS_DOC_LOG.OBSERVACION%TYPE
    )
    IS
        NUERRORCODE             NUMBER;
        SBERRORMESSAGE          VARCHAR2(200);
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOItemsDocumento.ActualizarLogRecepcion', 7);

        TOACTUALIZARLOGRECEPCION
        (
            INUITEMDOCLOG,
            ISBESTADO,
            ISBCOMENTARIO,
            NUERRORCODE,
            SBERRORMESSAGE
        );

        
        
        GE_BCFWTMP_MESSAGE_PROC.SAVEANSWEROFPROCESS
        (
            TO_CHAR(INUITEMDOCLOG),
            NVL(NUERRORCODE, GE_BOCONSTANTS.CNUSUCCESS),
            SBERRORMESSAGE
        );

        UT_TRACE.TRACE('--[FIN] GE_BOItemsDocumento.ActualizarLogRecepcion', 7);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    




















    PROCEDURE GETMOVEMENTTYPEBYDOCTYPE
    (
        INUDOCUMENTTYPE         IN  GE_DOCUMENT_TYPE.DOCUMENT_TYPE_ID%TYPE,
        OSBMOVEMENTTYPE         OUT OR_UNI_ITEM_BALA_MOV.MOVEMENT_TYPE%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('--[INICIO] GE_BOItems.getMovementTypeByDocType', 6);
        UT_TRACE.TRACE('inuDocumentType: [' || INUDOCUMENTTYPE || ']', 7);

        IF (INUDOCUMENTTYPE = GE_BOITEMSCONSTANTS.CNUTIPOAJUSTEENTRADA) THEN
            OSBMOVEMENTTYPE := OR_BOITEMSMOVE.CSBINCREASEMOVETYPE;
            RETURN;
        END IF;

        IF (INUDOCUMENTTYPE = GE_BOITEMSCONSTANTS.CNUTIPOAJUSTESALIDA) THEN
            OSBMOVEMENTTYPE := OR_BOITEMSMOVE.CSBDECREASEMOVETYPE;
            RETURN;
        END IF;

        IF (INUDOCUMENTTYPE = GE_BOITEMSCONSTANTS.CNUTIPOFACTURACOMPRA) THEN
            OSBMOVEMENTTYPE := OR_BOITEMSMOVE.CSBINCREASEMOVETYPE;
            RETURN;
        END IF;

        IF (INUDOCUMENTTYPE = GE_BOITEMSCONSTANTS.CNUTIPOFACTURAVENTA ) THEN
            OSBMOVEMENTTYPE := OR_BOITEMSMOVE.CSBDECREASEMOVETYPE;
            RETURN;
        END IF;

        IF (INUDOCUMENTTYPE = GE_BOITEMSCONSTANTS.CNUTIPORECEPCIONINTE ) THEN
            OSBMOVEMENTTYPE := OR_BOITEMSMOVE.CSBINCREASEMOVETYPE;
            RETURN;
        END IF;

        IF (INUDOCUMENTTYPE = GE_BOITEMSCONSTANTS.CNUTIPORECLAMOAPROVE ) THEN
            OSBMOVEMENTTYPE := OR_BOITEMSMOVE.CSBDECREASEMOVETYPE;
            RETURN;
        END IF;

        
        OSBMOVEMENTTYPE := OR_BOITEMSMOVE.CSBNEUTRALMOVETYPE;

        UT_TRACE.TRACE('--[FIN] GE_BOItems.getMovementTypeByDocType', 6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    




















    PROCEDURE OBTENERFACTURASPORORDEN
    (
        INUORDENCOMPRA      IN   GE_ITEMS_DOC_REL.ID_ITEMS_DOC_DESTINO%TYPE,
        OTBFACTURAS         OUT  GE_BCITEMSDOCUMENTO.TBFACTURAS
    )
    IS

        
        
        
        PROCEDURE CLEARMEMORY
        IS
        BEGIN
            
            OTBFACTURAS.DELETE;
        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
        END CLEARMEMORY;

    BEGIN

        
        CLEARMEMORY;

        
        GE_BCITEMSDOCUMENTO.OBTENERFACTURASPORORDEN(INUORDENCOMPRA,OTBFACTURAS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END OBTENERFACTURASPORORDEN;


    





















    FUNCTION FBLVERIFITEMSTRANS
    (
        INUORDENCOMPRA   IN GE_ITEMS_DOC_REL.ID_ITEMS_DOC_DESTINO%TYPE,
        INUOPERUNIT      IN GE_ITEMS_DOCUMENTO.OPERATING_UNIT_ID%TYPE
    )RETURN BOOLEAN
    IS
        
        NUCANTDOCUM NUMBER;

        
        BLTRANSITO BOOLEAN := TRUE;

    BEGIN

        
        NUCANTDOCUM := 0;

        
        NUCANTDOCUM := GE_BCITEMSDOCUMENTO.FNUOBTCANTDOCUMTRANSITO(
                            INUORDENCOMPRA,
                            INUOPERUNIT
                        );

        IF NUCANTDOCUM >= 1 THEN
            ERRORS.SETERROR(CNUITEMSTRANSITO);
            BLTRANSITO := TRUE;
        ELSE
            BLTRANSITO := FALSE;
        END IF;

        
        RETURN BLTRANSITO;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBLVERIFITEMSTRANS;

    





















    FUNCTION FNUTOTREGEXTDOCXDOCTYP
    (
        ISBEXTERDOC     IN  GE_ITEMS_DOCUMENTO.DOCUMENTO_EXTERNO%TYPE,
        INUDOCTYPE      IN  GE_ITEMS_DOCUMENTO.DOCUMENT_TYPE_ID%TYPE
    ) RETURN NUMBER
    IS
    BEGIN
        RETURN  GE_BCITEMSDOCUMENTO.FNUTOTREGEXTDOCXDOCTYP(ISBEXTERDOC,INUDOCTYPE);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FNUTOTREGEXTDOCXDOCTYP;
    
    























    PROCEDURE GETVALCAUSALBYDOCTYP
    (
        ISBDOCTYPE      IN  GE_DOCUMENT_TYPE.DOCUMENT_TYPE_ID%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUCAUSALTYPE        NUMBER;
    BEGIN
        
        
        
        IF(ISBDOCTYPE = GE_BOITEMSCONSTANTS.CNUTIPOAJUSTESALIDA) THEN
            NUCAUSALTYPE := GE_BOITEMSCONSTANTS.CNUCAUSALAJUSTESALIDA;
        ELSIF (ISBDOCTYPE = GE_BOITEMSCONSTANTS.CNUTIPOAJUSTERECLASIFICACION) THEN
            NUCAUSALTYPE := GE_BOITEMSCONSTANTS.CNUCAUSALAJUSTERECLASIF;
        ELSIF (ISBDOCTYPE = GE_BOITEMSCONSTANTS.CNUTIPOAJUSTEENTRADA) THEN
            NUCAUSALTYPE := GE_BOITEMSCONSTANTS.CNUCAUSALAJUSTEENTRADA;
        ELSE
            
            
            NUCAUSALTYPE := -1;
        END IF;
        
        UT_TRACE.TRACE('nuCausalType '||NUCAUSALTYPE,15);
        GE_BOCAUSAL.GETCAUSALBYCAUSALTYPE(NUCAUSALTYPE,ORFDATACURSOR);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            RAISE EX.CONTROLLED_ERROR;
    END GETVALCAUSALBYDOCTYP;
    
    
























    FUNCTION GETNEWSTATE
    (
        INUDOCTYPE      IN  GE_ITEMS_DOCUMENTO.DOCUMENT_TYPE_ID%TYPE,
        INUCAUSAL       IN  GE_ITEMS_DOCUMENTO.CAUSAL_ID%TYPE,
        INUSTATEINI     IN  GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE
    )RETURN GE_ITEMS_SERIADO.ID_ITEMS_ESTADO_INV%TYPE
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOITemsDocumento.GetNewState', 6);
        UT_TRACE.TRACE('inuDocumentType: [' || INUDOCTYPE || ']', 7);

        IF INUDOCTYPE = GE_BOITEMSCONSTANTS.CNUTIPOAJUSTESALIDA THEN
            RETURN GE_BOITEMSCONSTANTS.CNUSTATUS_DADO_BAJA;
        END IF;

        IF INUDOCTYPE = GE_BOITEMSCONSTANTS.CNUTIPOAJUSTERECLASIFICACION THEN
            
            IF      (INUCAUSAL = CNUCAUSALREUSO AND INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO )
                OR  (INUCAUSAL = CNUCAUSALALISTADO AND INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_EN_AISLAMIENTO )
            THEN
                RETURN GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE;
            END IF;

            
            IF      (INUCAUSAL = CNUCAUSALOBSOLESCENCIA AND (  INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO
                                                            OR INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA ))
            THEN
                RETURN GE_BOITEMSCONSTANTS.CNUSTATUS_OBSOLETO;
            END IF;

            
            IF      (INUCAUSAL = CNUCAUSALDESCARTE AND ( INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO
                                                     OR  INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_EN_REPARA
                                                     OR  INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE
                                                     OR INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_POR_RECUPERAR  ))
            THEN
                RETURN GE_BOITEMSCONSTANTS.CNUSTATUS_CHATARRA;
            END IF;

            
            IF      (INUCAUSAL = CNUCAUSALRECLAREC AND (  INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE
                                                       OR INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_OBSOLETO
                                                       OR INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_CHATARRA
                                                       ))
            THEN
                RETURN GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO;
            END IF;

        END IF;
        
        IF INUDOCTYPE = GE_BOITEMSCONSTANTS.CNUTIPOAJUSTEENTRADA THEN
            IF      (INUCAUSAL = CNUCAUSALENTRADAREC AND (  INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_CHATARRA
                                                       OR INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_DADO_BAJA ))
            THEN
                RETURN GE_BOITEMSCONSTANTS.CNUSTATUS_RECUPERADO;
            END IF;

            IF      (INUCAUSAL = CNUCAUSALCHATARRA AND INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_DADO_BAJA)
            THEN
                RETURN GE_BOITEMSCONSTANTS.CNUSTATUS_CHATARRA;
            END IF;

            IF INUCAUSAL = CNUCAUSALINGRESO THEN
                IF INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE THEN
                    RETURN GE_BOITEMSCONSTANTS.CNUSTATUS_DISPONIBLE;
                ELSIF INUSTATEINI = GE_BOITEMSCONSTANTS.CNUSTATUS_DADO_BAJA THEN
                    RETURN -1;
                END IF;
            END IF;

        END IF;
        
        
        GE_BOERRORS.SETERRORCODEARGUMENT(147070, INUSTATEINI||' - '||DAGE_ITEMS_ESTADO_INV.FSBGETDESCRIPCION (INUSTATEINI)||'|'||INUCAUSAL||' - '||DAGE_CAUSAL.FSBGETDESCRIPTION(INUCAUSAL) );

        RETURN NULL;
        
        UT_TRACE.TRACE('Finaliza GE_BOITemsDocumento.GetNewState', 6);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNEWSTATE;

    


















    PROCEDURE CREATEDOCUMENT
    (
        INUDOCUMENTTYPE             IN  GE_ITEMS_DOCUMENTO.DOCUMENT_TYPE_ID%TYPE,
        INUWORKUNIT                 IN  GE_ITEMS_DOCUMENTO.OPERATING_UNIT_ID%TYPE,
        INUTARGETWORKUNIT           IN  GE_ITEMS_DOCUMENTO.DESTINO_OPER_UNI_ID%TYPE,
        IDTDATE                     IN  GE_ITEMS_DOCUMENTO.FECHA%TYPE,
        ISBEXTERNDOCUMENT           IN  GE_ITEMS_DOCUMENTO.DOCUMENTO_EXTERNO%TYPE,
        ISBSTATE                    IN  GE_ITEMS_DOCUMENTO.ESTADO%TYPE,
        ISBCOMMENT                  IN  GE_ITEMS_DOCUMENTO.COMENTARIO%TYPE,
        INUCAUSAL                   IN  GE_ITEMS_DOCUMENTO.CAUSAL_ID%TYPE,
        ONUIDITEMSDOCUMENTO         OUT GE_ITEMS_DOCUMENTO.ID_ITEMS_DOCUMENTO%TYPE,
        INUPACKAGE_ID               IN  GE_ITEMS_DOCUMENTO.PACKAGE_ID%TYPE DEFAULT NULL
    )
    IS

        SBDOCDESC   GE_DOCUMENT_TYPE.DESCRIPTION%TYPE;
        SBNAME      OR_OPERATING_UNIT.NAME%TYPE;

        RCITEMSDOCUMENTO DAGE_ITEMS_DOCUMENTO.STYGE_ITEMS_DOCUMENTO;

    BEGIN
        UT_TRACE.TRACE('Inicia GE_BOITemsDocumento.CreateDocument',15);
        DAGE_DOCUMENT_TYPE.ACCKEY(INUDOCUMENTTYPE);
        DAOR_OPERATING_UNIT.ACCKEY(INUWORKUNIT);
        DAOR_OPERATING_UNIT.ACCKEY(INUTARGETWORKUNIT);

        IF ISBEXTERNDOCUMENT IS NOT NULL THEN
            IF GE_BCITEMSDOCUMENTO.FNUGETITEMSDOCBYDOCEXT(INUDOCUMENTTYPE,INUWORKUNIT,ISBEXTERNDOCUMENT) IS NOT NULL THEN
                SBDOCDESC := DAGE_DOCUMENT_TYPE.FSBGETDESCRIPTION(INUDOCUMENTTYPE);
                SBNAME := DAOR_OPERATING_UNIT.FSBGETNAME(INUWORKUNIT);

                ERRORS.SETERROR(CNUINVALID_DOCUMENT,ISBEXTERNDOCUMENT||'|'||SBDOCDESC||'|'||SBNAME );
                RAISE EX.CONTROLLED_ERROR;
            END IF;
        END IF;

        RCITEMSDOCUMENTO.DOCUMENT_TYPE_ID       :=  INUDOCUMENTTYPE;
        RCITEMSDOCUMENTO.OPERATING_UNIT_ID      :=  INUWORKUNIT;
        RCITEMSDOCUMENTO.DESTINO_OPER_UNI_ID    :=  INUTARGETWORKUNIT;
        RCITEMSDOCUMENTO.FECHA                  :=  NVL(IDTDATE, SYSDATE);
        RCITEMSDOCUMENTO.DOCUMENTO_EXTERNO      :=  ISBEXTERNDOCUMENT;
        RCITEMSDOCUMENTO.ESTADO                 :=  ISBSTATE;
        RCITEMSDOCUMENTO.COMENTARIO             :=  ISBCOMMENT;

        RCITEMSDOCUMENTO.USER_ID                :=  SA_BOUSER.FNUGETUSERID_NULL(UT_SESSION.GETUSER) ;
        RCITEMSDOCUMENTO.TERMINAL_ID            :=  UT_SESSION.GETTERMINAL;
        ONUIDITEMSDOCUMENTO                     :=  GE_BOITEMSSEQUENCE.NEXTGE_ITEMS_DOCUMENTO;
        RCITEMSDOCUMENTO.CAUSAL_ID              :=  INUCAUSAL;
        RCITEMSDOCUMENTO.PACKAGE_ID             :=  INUPACKAGE_ID;
        
        RCITEMSDOCUMENTO.ID_ITEMS_DOCUMENTO     :=  ONUIDITEMSDOCUMENTO;

        DAGE_ITEMS_DOCUMENTO.INSRECORD(RCITEMSDOCUMENTO);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEDOCUMENT;

END GE_BOITEMSDOCUMENTO;