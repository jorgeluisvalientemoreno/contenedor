PACKAGE BODY FM_BORegister
IS
    




























    
    
    
    CSBVERSION                  CONSTANT VARCHAR2(10) := 'SAO211558';

    
    
    

    
    
    

    
    
    
    
    























    PROCEDURE GENERATENTLORDER
    (
        IRCPOSSIBLENTL      IN      DAFM_POSSIBLE_NTL.STYFM_POSSIBLE_NTL,  
        INUACTIVITYID       IN      GE_ITEMS.ITEMS_ID%TYPE,
        ONUORDERID          OUT     OR_ORDER.ORDER_ID%TYPE
    )
    IS
        NUSUBSCRIPTION      SUSCRIPC.SUSCCODI%TYPE;
        NUSUBSCRIBER        GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE;
        
        NUORDERACTIVITY     OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('INICIA FM_BORegister.GenerateNTLOrder inuActivityId='||INUACTIVITYID,15);
        IF IRCPOSSIBLENTL.PRODUCT_ID IS NOT NULL THEN
            NUSUBSCRIPTION := DAPR_PRODUCT.FNUGETSUBSCRIPTION_ID(IRCPOSSIBLENTL.PRODUCT_ID);
            NUSUBSCRIBER := PKTBLSUSCRIPC.FNUGETCUSTOMER(NUSUBSCRIPTION);
        END IF;

        OR_BOORDERACTIVITIES.CREATEACTIVITY
        (
            INUACTIVITYID,
            NULL,
            NULL,
            NULL,
            NULL,
            IRCPOSSIBLENTL.ADDRESS_ID,
            NULL,
            NUSUBSCRIBER,
            NUSUBSCRIPTION,
            IRCPOSSIBLENTL.PRODUCT_ID,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            FALSE,
            NULL,
            ONUORDERID,
            NUORDERACTIVITY,
            NULL, 
            NULL, 
            NULL, 
            NULL, 
            NULL, 
            0 
        );
        UT_TRACE.TRACE('FINALIZA FM_BORegister.GenerateNTLOrder onuOrderId='||ONUORDERID,15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    

































    PROCEDURE REGISTER
    (
        INUPRODUCT              IN      FM_POSSIBLE_NTL.PRODUCT_ID%TYPE,
        INUGEOGRALOCATION       IN      FM_POSSIBLE_NTL.GEOGRAP_LOCATION_ID%TYPE,
        INUADDRESSID            IN      FM_POSSIBLE_NTL.ADDRESS_ID%TYPE,
        INUPRODUCTTYPE          IN      FM_POSSIBLE_NTL.PRODUCT_TYPE_ID%TYPE,
        ISBCOMMENT              IN      FM_POSSIBLE_NTL.COMMENT_%TYPE,
        INUDISCOVERYTYPE        IN      FM_POSSIBLE_NTL.DISCOVERY_TYPE_ID%TYPE,
        INUVALUE                IN      FM_POSSIBLE_NTL.VALUE_%TYPE,
        ISBINFORMER             IN      FM_POSSIBLE_NTL.INFORMER_SUBS_ID%TYPE,
        ISBSTATUS               IN      FM_POSSIBLE_NTL.STATUS%TYPE,
        INUACTIVITYID           IN      GE_ITEMS.ITEMS_ID%TYPE,
        INUPERSONID             IN      FM_POSSIBLE_NTL.PERSON_ID%TYPE,
        ONUID                   OUT     FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE,
        ONUORDERID              OUT     OR_ORDER.ORDER_ID%TYPE,
        ONUPACKAGEID            OUT     MO_PACKAGES.PACKAGE_ID%TYPE
    )
    IS
        RCPOSSIBLENTL       DAFM_POSSIBLE_NTL.STYFM_POSSIBLE_NTL;
        
        NUPRODUCTTYPE       FM_POSSIBLE_NTL.PRODUCT_TYPE_ID%TYPE;
        NUADDRESS           FM_POSSIBLE_NTL.ADDRESS_ID%TYPE;
        NUGEOGRAPHLOCATION  FM_POSSIBLE_NTL.GEOGRAP_LOCATION_ID%TYPE;
        
        CSBNTL_ENTITYNAME   CONSTANT    GE_ENTITY.NAME_%TYPE        := 'FM_POSSIBLE_NTL';
        CSBNTL_SEQNAME      CONSTANT    VARCHAR2(2000)              := 'SEQ_FM_POSSIBLE_NTL_123873';
        CNURECORDEXISTS     CONSTANT    GE_MESSAGE.MESSAGE_ID%TYPE  := 900255;

    BEGIN
    
        NUPRODUCTTYPE := INUPRODUCTTYPE;
        NUADDRESS := INUADDRESSID;
        NUGEOGRAPHLOCATION := INUGEOGRALOCATION;
        


        IF INUPRODUCT IS NOT NULL THEN

            ONUID := FM_BCREGISTER.FNUPENDNTLBYPROD(INUPRODUCT);
            IF ONUID IS NOT NULL THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNURECORDEXISTS, TO_CHAR(ONUID));
            END IF;
            NUPRODUCTTYPE := DAPR_PRODUCT.FNUGETPRODUCT_TYPE_ID(INUPRODUCT);
            NUADDRESS := DAPR_PRODUCT.FNUGETADDRESS_ID(INUPRODUCT);

        END IF;
        
        IF NUADDRESS IS NOT NULL AND NUADDRESS <> -1 AND NUPRODUCTTYPE IS NOT NULL THEN
            ONUID := FM_BCREGISTER.FNUPENDNTLBYADDR(NUADDRESS, NUPRODUCTTYPE);
            IF ONUID IS NOT NULL THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNURECORDEXISTS, TO_CHAR(ONUID));
            END IF;
        END IF;
        
        IF NUADDRESS IS NOT NULL AND NUADDRESS <> -1 THEN
            NUGEOGRAPHLOCATION := DAAB_ADDRESS.FNUGETGEOGRAP_LOCATION_ID(NUADDRESS);
        END IF;

        IF NUGEOGRAPHLOCATION IS NOT NULL
            AND NUPRODUCTTYPE IS NOT NULL
            AND (NUADDRESS IS NULL OR INUADDRESSID = -1) THEN
            ONUID := FM_BCREGISTER.FNUPENDNTLBYGEOLOC(NUGEOGRAPHLOCATION, NUPRODUCTTYPE);
            IF ONUID IS NOT NULL THEN
                GE_BOERRORS.SETERRORCODEARGUMENT(CNURECORDEXISTS, TO_CHAR(ONUID));
            END IF;
        END IF;

        RCPOSSIBLENTL.POSSIBLE_NTL_ID       :=  GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE(CSBNTL_ENTITYNAME, CSBNTL_SEQNAME);
        RCPOSSIBLENTL.STATUS                :=  ISBSTATUS;
        RCPOSSIBLENTL.PRODUCT_ID            :=  INUPRODUCT;
        RCPOSSIBLENTL.PRODUCT_TYPE_ID       :=	NUPRODUCTTYPE;
        RCPOSSIBLENTL.GEOGRAP_LOCATION_ID   :=	NUGEOGRAPHLOCATION;
        RCPOSSIBLENTL.ADDRESS_ID            :=	NUADDRESS;
        RCPOSSIBLENTL.REGISTER_DATE         :=	UT_DATE.FDTSYSDATE;
        RCPOSSIBLENTL.DISCOVERY_TYPE_ID     :=	INUDISCOVERYTYPE;
        RCPOSSIBLENTL.INFORMER_SUBS_ID      :=	ISBINFORMER;
        RCPOSSIBLENTL.COMMENT_              :=  ISBCOMMENT;
        RCPOSSIBLENTL.VALUE_                :=	INUVALUE;
        RCPOSSIBLENTL.PERSON_ID             :=  INUPERSONID;

        IF INUACTIVITYID IS NOT NULL AND
           ISBSTATUS = FM_BOCONSTANTS.CSBPENDINGNTLSTATUS THEN
           
            IF DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(INUACTIVITYID) NOT IN
                (
                    OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY,
                    OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF
                ) THEN
                ERRORS.SETERROR(901275, DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(INUACTIVITYID)||' - '|| DAGE_ITEMS.FSBGETDESCRIPTION(INUACTIVITYID) );
                RAISE EX.CONTROLLED_ERROR;
            END IF;
           
            GENERATENTLORDER(RCPOSSIBLENTL, INUACTIVITYID, ONUORDERID);
            RCPOSSIBLENTL.STATUS := FM_BOCONSTANTS.CSBPROJECTNTLSTATUS;
            RCPOSSIBLENTL.ORDER_ID := ONUORDERID;
        END IF;
        
        DAFM_POSSIBLE_NTL.INSRECORD(RCPOSSIBLENTL);

        IF ISBSTATUS = FM_BOCONSTANTS.CSBPOSITIVENTLSTATUS THEN
           FM_BOREQUEST.GENERATEREQUEST(RCPOSSIBLENTL.POSSIBLE_NTL_ID, ONUPACKAGEID);
        END IF;
        
        ONUID := RCPOSSIBLENTL.POSSIBLE_NTL_ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END REGISTER;


    




























    PROCEDURE MANUALREGISTER
    (
        INUGEOGRALOCATION       IN      FM_POSSIBLE_NTL.GEOGRAP_LOCATION_ID%TYPE,
        ISBADDRESS              IN      AB_ADDRESS.ADDRESS%TYPE,
        INUPRODUCTTYPE          IN      FM_POSSIBLE_NTL.PRODUCT_TYPE_ID%TYPE,
        ISBCOMMENT              IN      FM_POSSIBLE_NTL.COMMENT_%TYPE,
        ISBINFORMER             IN      FM_POSSIBLE_NTL.INFORMER_SUBS_ID%TYPE,
        ONUID                   OUT     FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE
    )
    IS
        NUERRORCODE       NUMBER;
        SBERRORMESSAGE    VARCHAR2(10000);
        NUADDRESS         FM_POSSIBLE_NTL.ADDRESS_ID%TYPE;
        NUPRODUCT         FM_POSSIBLE_NTL.PRODUCT_ID%TYPE;
        SBCOMMENT         FM_POSSIBLE_NTL.COMMENT_%TYPE;
        
        NUORDERID         OR_ORDER.ORDER_ID%TYPE;
        NUPACKAGEID       MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN

        
        NUADDRESS := AB_BOPARSER.CHECKIFADDRESSEXISTSINDB
        (
            ISBADDRESS,
            INUGEOGRALOCATION,
            NUERRORCODE,
            SBERRORMESSAGE
        );

        UT_TRACE.TRACE('nuAddress := '||NUADDRESS, 15);
        
        SBCOMMENT := ISBCOMMENT;
        
        IF NVL(NUADDRESS, -1) <> -1 THEN
            NUPRODUCT := PR_BOPRODUCT.FNUPRINADDRBYPRODTY(NUADDRESS, INUPRODUCTTYPE);
        ELSE
            SBCOMMENT := 'Direcciï¿½n de posible fraude: '||ISBADDRESS||'. '||SBCOMMENT;
        END IF;

        REGISTER
        (
            NUPRODUCT,
            INUGEOGRALOCATION,
            NUADDRESS,
            INUPRODUCTTYPE,
            SBCOMMENT,
            FM_BOCONSTANTS.CSBMANUALREGISTRY,
            NULL,
            ISBINFORMER,
            FM_BOCONSTANTS.CSBPENDINGNTLSTATUS,
            NULL,
            GE_BOPERSONAL.FNUGETPERSONID,
            ONUID,
            NUORDERID,
            NUPACKAGEID
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END MANUALREGISTER;
    
    

















    PROCEDURE FWMANUALREGISTER
    IS

        CNUNULL_ATTRIBUTE CONSTANT NUMBER := 2126;

        SBGEOGRAP_LOCATION_ID GE_BOINSTANCECONTROL.STYSBVALUE;
        SBADDRESS GE_BOINSTANCECONTROL.STYSBVALUE;
        SBPRODUCT_TYPE_ID GE_BOINSTANCECONTROL.STYSBVALUE;
        SBCOMMENT_ GE_BOINSTANCECONTROL.STYSBVALUE;
        SBINFORMER GE_BOINSTANCECONTROL.STYSBVALUE;

        NUID FM_POSSIBLE_NTL.POSSIBLE_NTL_ID%TYPE;

        PRAGMA AUTONOMOUS_TRANSACTION;

    BEGIN
        SBGEOGRAP_LOCATION_ID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('FM_POSSIBLE_NTL', 'GEOGRAP_LOCATION_ID');
        SBADDRESS := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('AB_ADDRESS', 'ADDRESS');
        SBPRODUCT_TYPE_ID := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('FM_POSSIBLE_NTL', 'PRODUCT_TYPE_ID');
        SBCOMMENT_ := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('FM_POSSIBLE_NTL', 'COMMENT_');
        SBINFORMER := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE ('FM_POSSIBLE_NTL', 'INFORMER_SUBS_ID');

        
        
        

        IF (SBGEOGRAP_LOCATION_ID IS NULL) THEN
            ERRORS.SETERROR (CNUNULL_ATTRIBUTE, 'Ubicaciï¿½n Geogrï¿½fica');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        IF (SBADDRESS IS NULL) THEN
            ERRORS.SETERROR (CNUNULL_ATTRIBUTE, 'Direcciï¿½n');
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        IF (SBPRODUCT_TYPE_ID IS NULL) THEN
            ERRORS.SETERROR (CNUNULL_ATTRIBUTE, 'Tipo De Producto');
            RAISE EX.CONTROLLED_ERROR;
        END IF;


        
        
        
        
        MANUALREGISTER
        (
            TO_NUMBER(SBGEOGRAP_LOCATION_ID),
            SBADDRESS,
            TO_NUMBER(SBPRODUCT_TYPE_ID),
            SBCOMMENT_,
            SBINFORMER,
            NUID
        );

        
        
        
        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE('WORK_INSTANCE',
                                          NULL,
                                          'SUCCESS_MESSAGE_ENTITY',
                                          'SUCCESS_MESSAGE_ATTRIBUTE',
                                          900232);
                                          
        GE_BOINSTANCECONTROL.ADDATTRIBUTE('WORK_INSTANCE',
                                          NULL,
                                          'SUCCESS_MESSAGE_ARGUMENTS_ENTITY',
                                          'SUCCESS_MESSAGE_ARGUMENTS_ATTRIBUTE',
                                          TO_CHAR(NUID));

        COMMIT;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE;

        WHEN OTHERS THEN
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
    













    FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

END FM_BOREGISTER;