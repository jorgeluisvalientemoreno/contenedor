CREATE OR REPLACE PACKAGE BODY GE_BOUNITCOSTITELIS IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO190047';
   CNU_ERR_NEGATIVE_COST CONSTANT NUMBER := 10768;
   CNU_ERR_NO_ITEM CONSTANT NUMBER := 10750;
   CNU_ERR_NO_LIST CONSTANT NUMBER := 10751;
   CNU_WRG_ITEM_CLASSIF CONSTANT NUMBER := 10752;
   CNU_ERR_NO_PRICE CONSTANT NUMBER := 5446;
   CNU_ERR_NEGATIVE_SALESVAL CONSTANT NUMBER := 5437;
   CNU_ERR_BAD_ITEM CONSTANT NUMBER := 640;
   CNU_ERR_PRICE_LIST_NOTFOUND CONSTANT NUMBER := 717;
   CNUERRORCODE CONSTANT NUMBER := CONSTANTS.CNUSUCCESS;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   FUNCTION FBLVALIDUNITARYCOSTLIST( INULISTUNITARYCOSTID IN GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE )
    RETURN BOOLEAN
    IS
      SBSQL VARCHAR2( 2000 );
      RFPRICELIST CONSTANTS.TYREFCURSOR;
      NUPRICELIST GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE;
      TBPRICELISTID DAGE_LIST_UNITARY_COST.TYTBLIST_UNITARY_COST_ID;
      NUINDEX BINARY_INTEGER := 1;
    BEGIN
      UT_TRACE.TRACE( 'Lista a validar[' || INULISTUNITARYCOSTID || ']', 5 );
      OPEN GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE( INULISTUNITARYCOSTID, SYSDATE );
      FETCH GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE
         INTO NUPRICELIST;
      IF ( GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE%NOTFOUND ) THEN
         IF ( GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE%ISOPEN ) THEN
            CLOSE GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE;
         END IF;
         RETURN FALSE;
      END IF;
      IF ( GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE%ISOPEN ) THEN
         CLOSE GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE;
      END IF;
      RETURN TRUE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE%ISOPEN ) THEN
            CLOSE GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE%ISOPEN ) THEN
            CLOSE GE_BCLISTUNITARYCOST.CUCOSTLISTTODATE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBLVALIDUNITARYCOSTLIST;
   PROCEDURE VALIDATEITEMLISTDATA( INUUNITARYCOSTLISTID IN GE_UNIT_COST_ITE_LIS.LIST_UNITARY_COST_ID%TYPE, INUITEMSID IN GE_UNIT_COST_ITE_LIS.ITEMS_ID%TYPE, INUPRICE IN GE_UNIT_COST_ITE_LIS.PRICE%TYPE, INUSALESVALUE IN GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE, ONUERROR OUT NUMBER, OSBERROR OUT VARCHAR2 )
    IS
      NUCLASSIFITEM GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( '[GE_BOUnitCostIteLis.validateItemListData] INICIO', 2 );
      ONUERROR := CNUERRORCODE;
      IF INUPRICE < 0 THEN
         ONUERROR := CNU_ERR_NEGATIVE_COST;
         ERRORS.SETERROR( ONUERROR, TO_CHAR( INUITEMSID ) );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF INUSALESVALUE < 0 THEN
         ONUERROR := CNU_ERR_NEGATIVE_SALESVAL;
         ERRORS.SETERROR( ONUERROR, TO_CHAR( INUITEMSID ) );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( NOT DAGE_LIST_UNITARY_COST.FBLEXIST( INUUNITARYCOSTLISTID ) ) THEN
         ONUERROR := CNU_ERR_NO_LIST;
         ERRORS.SETERROR( ONUERROR, TO_CHAR( INUUNITARYCOSTLISTID ) );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( NOT DAGE_ITEMS.FBLEXIST( INUITEMSID ) ) THEN
         ONUERROR := CNU_ERR_NO_ITEM;
         ERRORS.SETERROR( ONUERROR, TO_CHAR( INUITEMSID ) );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF NOT FBLVALIDUNITARYCOSTLIST( INUUNITARYCOSTLISTID ) THEN
         ONUERROR := CNU_ERR_PRICE_LIST_NOTFOUND;
         ERRORS.SETERROR( ONUERROR, SYSDATE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( '[GE_BOUnitCostIteLis.validateItemListData] FIN', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERROR, OSBERROR );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERROR, OSBERROR );
   END;
   PROCEDURE INSERTITEMCOSTINLIST( INUUNITARYCOSTLISTID IN GE_UNIT_COST_ITE_LIS.LIST_UNITARY_COST_ID%TYPE, INUITEMSID IN GE_UNIT_COST_ITE_LIS.ITEMS_ID%TYPE, INUPRICE IN GE_UNIT_COST_ITE_LIS.PRICE%TYPE, INUSALESVALUE IN GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE, ONUERROR OUT NUMBER, OSBERROR OUT VARCHAR2 )
    IS
      RCITEMLISTCOST DAGE_UNIT_COST_ITE_LIS.STYGE_UNIT_COST_ITE_LIS;
      NUCLASSIFITEM GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
    BEGIN
      UT_TRACE.TRACE( '[GE_BOUnitCostIteLis.insertItemCostInList] INICIO', 2 );
      VALIDATEITEMLISTDATA( INUUNITARYCOSTLISTID, INUITEMSID, INUPRICE, INUSALESVALUE, ONUERROR, OSBERROR );
      IF ( ONUERROR = CNUERRORCODE ) THEN
         RCITEMLISTCOST.LIST_UNITARY_COST_ID := INUUNITARYCOSTLISTID;
         RCITEMLISTCOST.ITEMS_ID := INUITEMSID;
         RCITEMLISTCOST.PRICE := INUPRICE;
         RCITEMLISTCOST.SALES_VALUE := INUSALESVALUE;
         RCITEMLISTCOST.LAST_UPDATE_DATE := UT_DATE.FDTSYSDATE;
         RCITEMLISTCOST.USER_ID := UT_SESSION.GETUSER;
         RCITEMLISTCOST.TERMINAL := UT_SESSION.GETTERMINAL;
         DAGE_UNIT_COST_ITE_LIS.INSRECORD( RCITEMLISTCOST );
      END IF;
      UT_TRACE.TRACE( '[GE_BOUnitCostIteLis.insertItemCostInList] FIN', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERROR, OSBERROR );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERROR, OSBERROR );
   END;
   PROCEDURE UPDATEITEMCOSTINLIST( INUUNITARYCOSTLISTID IN GE_UNIT_COST_ITE_LIS.LIST_UNITARY_COST_ID%TYPE, INUITEMSID IN GE_UNIT_COST_ITE_LIS.ITEMS_ID%TYPE, INUPRICE IN GE_UNIT_COST_ITE_LIS.PRICE%TYPE, INUSALESVALUE IN GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE, ONUERROR OUT NUMBER, OSBERROR OUT VARCHAR2 )
    IS
      RCITEMLISTCOST DAGE_UNIT_COST_ITE_LIS.STYGE_UNIT_COST_ITE_LIS;
    BEGIN
      UT_TRACE.TRACE( '[GE_BOUnitCostIteLis.updateItemCostInList] INICIO', 2 );
      VALIDATEITEMLISTDATA( INUUNITARYCOSTLISTID, INUITEMSID, INUPRICE, INUSALESVALUE, ONUERROR, OSBERROR );
      IF ( ONUERROR = CNUERRORCODE ) THEN
         IF ( DAGE_UNIT_COST_ITE_LIS.FBLEXIST( INUITEMSID, INUUNITARYCOSTLISTID ) ) THEN
            RCITEMLISTCOST.LIST_UNITARY_COST_ID := INUUNITARYCOSTLISTID;
            RCITEMLISTCOST.ITEMS_ID := INUITEMSID;
            RCITEMLISTCOST.PRICE := INUPRICE;
            RCITEMLISTCOST.SALES_VALUE := INUSALESVALUE;
            RCITEMLISTCOST.LAST_UPDATE_DATE := UT_DATE.FDTSYSDATE;
            RCITEMLISTCOST.USER_ID := UT_SESSION.GETUSER;
            RCITEMLISTCOST.TERMINAL := UT_SESSION.GETTERMINAL;
            DAGE_UNIT_COST_ITE_LIS.UPDRECORD( RCITEMLISTCOST );
          ELSE
            INSERTITEMCOSTINLIST( INUUNITARYCOSTLISTID, INUITEMSID, INUPRICE, INUSALESVALUE, ONUERROR, OSBERROR );
         END IF;
      END IF;
      UT_TRACE.TRACE( '[GE_BOUnitCostIteLis.updateItemCostInList] FIN', 2 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERROR, OSBERROR );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERROR, OSBERROR );
   END;
   PROCEDURE INSERTORUPDATEITEMCOSTINLIST( INUUNITARYCOSTLISTID IN GE_UNIT_COST_ITE_LIS.LIST_UNITARY_COST_ID%TYPE, INUITEMSID IN GE_UNIT_COST_ITE_LIS.ITEMS_ID%TYPE, INUPRICE IN GE_UNIT_COST_ITE_LIS.PRICE%TYPE, INUSALESVALUE IN GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE, ONUERROR OUT NUMBER, OSBERROR OUT VARCHAR2 )
    IS
      RCLISTUNITARYCOST DAGE_LIST_UNITARY_COST.STYGE_LIST_UNITARY_COST;
      NUOPERATINGUNITID GE_LIST_UNITARY_COST.OPERATING_UNIT_ID%TYPE;
      NUCONTRACT GE_LIST_UNITARY_COST.CONTRACT_ID%TYPE;
      NUCONTRACTOR GE_LIST_UNITARY_COST.CONTRACTOR_ID%TYPE;
      NUGEOLOCATION GE_LIST_UNITARY_COST.GEOGRAP_LOCATION_ID%TYPE;
      NUCOUNT NUMBER;
      TBPRICELISTS GE_BCLISTUNITARYCOST.TYTBPRICELISTS;
      NUINDEX BINARY_INTEGER;
      NUERROR NUMBER;
      SBERROR VARCHAR2( 2000 );
    BEGIN
      UT_TRACE.TRACE( 'GE_BOUnitCostIteLis.InsertOrupdateItemCostInList INICIO', 1 );
      IF NOT FBLVALIDUNITARYCOSTLIST( INUUNITARYCOSTLISTID ) THEN
         ERRORS.SETERROR( CNU_ERR_PRICE_LIST_NOTFOUND, SYSDATE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      GE_BOCERTCONTRATISTA.VALIDARACTUALIZARLISTA( INUUNITARYCOSTLISTID );
      RCLISTUNITARYCOST := DAGE_LIST_UNITARY_COST.FRCGETRECORD( INUUNITARYCOSTLISTID );
      NUOPERATINGUNITID := RCLISTUNITARYCOST.OPERATING_UNIT_ID;
      NUCONTRACT := RCLISTUNITARYCOST.CONTRACT_ID;
      NUCONTRACTOR := RCLISTUNITARYCOST.CONTRACTOR_ID;
      NUGEOLOCATION := RCLISTUNITARYCOST.GEOGRAP_LOCATION_ID;
      GE_BCLISTUNITARYCOST.GETPRICELISTOPERUNIORGEN( NUOPERATINGUNITID, NUCONTRACT, NUCONTRACTOR, NUGEOLOCATION, DAGE_LIST_UNITARY_COST.FDTGETVALIDITY_FINAL_DATE( INUUNITARYCOSTLISTID ), TBPRICELISTS, NUCOUNT );
      IF ( NUCOUNT > 0 ) THEN
         NUINDEX := TBPRICELISTS.FIRST;
         LOOP
            UPDATEITEMCOSTINLIST( TBPRICELISTS( NUINDEX ).NULISTUNITARYCOSTID, INUITEMSID, INUPRICE, INUSALESVALUE, NUERROR, SBERROR );
            ERRORS.CHECKERROR( NUERROR );
            EXIT WHEN NUINDEX = TBPRICELISTS.LAST;
            NUINDEX := TBPRICELISTS.NEXT( NUINDEX );
         END LOOP;
      END IF;
      UT_TRACE.TRACE( 'GE_BOUnitCostIteLis.InsertOrupdateItemCostInList FIN', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         ERRORS.GETERROR( ONUERROR, OSBERROR );
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         ERRORS.GETERROR( ONUERROR, OSBERROR );
   END;
   PROCEDURE GETITEMSALEVALUE( INUITEMSID IN GE_ITEMS.ITEMS_ID%TYPE, INUOPERATINGUNITID IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE, ONUITEMSALEVALUE OUT GE_UNIT_COST_ITE_LIS.SALES_VALUE%TYPE, IDTREFDATE IN GE_LIST_UNITARY_COST.VALIDITY_START_DATE%TYPE := SYSDATE )
    IS
      NUPRICELISTID GE_LIST_UNITARY_COST.LIST_UNITARY_COST_ID%TYPE;
      RCITEMPRICES DAGE_UNIT_COST_ITE_LIS.STYGE_UNIT_COST_ITE_LIS;
    BEGIN
      UT_TRACE.TRACE( 'GE_BOUnitCostIteLis.GetItemSaleValue INICIO', 1 );
      NUPRICELISTID := GE_BCLISTUNITARYCOST.FNUGETVALIDPRLSTBYOPERUNIT( INUOPERATINGUNITID, IDTREFDATE );
      UT_TRACE.TRACE( 'nuPriceListId: ' || NUPRICELISTID, 2 );
      IF ( NUPRICELISTID IS NULL ) THEN
         NUPRICELISTID := GE_BCLISTUNITARYCOST.FNUGETGENERICPRICELIST( IDTREFDATE );
         UT_TRACE.TRACE( 'nuPriceListId: ' || NUPRICELISTID, 2 );
         IF ( NUPRICELISTID IS NULL ) THEN
            ERRORS.SETERROR( CNU_ERR_NO_PRICE, INUITEMSID );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
      RCITEMPRICES := DAGE_UNIT_COST_ITE_LIS.FRCGETRECORD( INUITEMSID, NUPRICELISTID );
      ONUITEMSALEVALUE := RCITEMPRICES.SALES_VALUE;
      UT_TRACE.TRACE( 'onuItemSaleValue: ' || ONUITEMSALEVALUE, 2 );
      IF ( ONUITEMSALEVALUE IS NULL ) THEN
         ERRORS.SETERROR( CNU_ERR_NO_PRICE, INUITEMSID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      UT_TRACE.TRACE( 'GE_BOUnitCostIteLis.GetItemSaleValue FIN', 1 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END GE_BOUNITCOSTITELIS;
/



