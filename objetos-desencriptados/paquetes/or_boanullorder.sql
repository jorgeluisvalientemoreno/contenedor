PACKAGE BODY Or_BOAnullOrder AS












































































































































































    CSBVERSION      CONSTANT VARCHAR2(20) := 'SAO388059';
    CSBFINISHSTATUS CONSTANT VARCHAR2(1) := OR_BOCONSTANTS.CSBFINISHSTATUS;
    
	
    
    CNUERR_121782 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 121782;
    
    CNUERR_113406 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 113406;
    
    CNUERR_113323 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 113323;
    
    CNUERR_122902 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 122902;
    
    CNUERR_10779 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 10779;
    
    CNUERR_122142 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 122142;
    
    CNUERR_147081 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 147081;
    
    CNUERR_147080 CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 147080;

    
    CBLANULL_ORDER_ASIGN CONSTANT BOOLEAN := GE_BOPARAMETER.FSBGET(OR_BOPARAMETER.CSBANULL_ORDER_ASIGN) =
                                           GE_BOCONSTANTS.CSBYES;

    
    CSBCANANULLDIAGORDERS CONSTANT GE_PARAMETER.PARAMETER_ID%TYPE := 'ANULAR_DIAGNOSTICO';

    
    CNUERR_PROGCHANGED          CONSTANT    NUMBER := 3355;

    
    
    CNUERR_ORDNOVALANULL    CONSTANT    NUMBER := 113406;

  FUNCTION FSBVERSION RETURN VARCHAR2 IS
  BEGIN
    RETURN CSBVERSION;
  END;

  




















  PROCEDURE TRYNOTIFYWFBYANULL(INUORDERID    IN OR_ORDER_ACTIVITY.ORDER_ID%TYPE,
                               INUINSTANCEID IN OR_ORDER_ACTIVITY.INSTANCE_ID%TYPE) IS
    NUCAUSALWFID GE_CAUSAL.CAUSAL_ID%TYPE;
  BEGIN
    UT_TRACE.TRACE('Init Or_BOAnullOrder.tryNotifyWFbyAnull', 15);
    
    IF (INUINSTANCEID IS NOT NULL AND INUORDERID IS NOT NULL) THEN
      
      
      
      IF (NOT OR_BCORDERACTIVITIES.FBLHASPENDINGACTIVITIES(INUINSTANCEID)) THEN
        
        
        NUCAUSALWFID := GE_BOEQUIVALENCVALUES.FNUGETTARGETVALUE
                            (
                                OR_BOCONSTANTS.CNUEQ_GROUP_NOTI_ORD_WF,
                                OR_BOCONSTANTS.CNUSUCCESCAUSAL
                            );

        
        WF_BOANSWER_RECEPTOR.ANSWERRECEPTOR(INUINSTANCEID, NUCAUSALWFID);
        
      END IF;
      
    END IF;

    UT_TRACE.TRACE('Fin Or_BOAnullOrder.tryNotifyWFbyAnull', 15);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END TRYNOTIFYWFBYANULL;

  




















  FUNCTION FBLISVALIDFORANULL(IRCORDER IN DAOR_ORDER.STYOR_ORDER)
    RETURN BOOLEAN IS
  BEGIN
    
    RETURN( 
           IRCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_PLANNED OR
           
            DAOR_TASK_TYPE.FSBGETIS_ANULL(IRCORDER.TASK_TYPE_ID) =
            GE_BOCONSTANTS.CSBYES)
    
    AND OR_BOORDERTRANSITION.FBLEXISTSORDERTRANSITION(OR_BOCONSTANTS.CNUORDER_ACTION_CANCEL,
                                                      IRCORDER.ORDER_STATUS_ID)
    
    AND(
        
        IRCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING
        
         OR
         IRCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING
        
         AND CBLANULL_ORDER_ASIGN);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END FBLISVALIDFORANULL;

    




















  PROCEDURE ANULLACTIVITY(IORCACTIVITY IN OUT NOCOPY DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY)
  IS
    
    NUOPERATINGUNIT  OR_ORDER.OPERATING_UNIT_ID%TYPE;
    SBORDERASSTYPE   OR_ORDER.ASSIGNED_WITH%TYPE;
    SBOPERUNITASSTYPE OR_OPERATING_UNIT.ASSIGN_TYPE%TYPE;
    NUACTIVITYTIME    NUMBER;
    NUTOTALUSEDCAPACITY NUMBER;
  BEGIN
    
    IF (IORCACTIVITY.ORDER_ITEM_ID IS NOT NULL) THEN
      DAOR_ORDER_ITEMS.UPDLEGAL_ITEM_AMOUNT(IORCACTIVITY.ORDER_ITEM_ID, -1);
    END IF;

    IORCACTIVITY.STATUS     := OR_BOCONSTANTS.CSBFINISHSTATUS;
    IORCACTIVITY.FINAL_DATE := SYSDATE;
    DAOR_ORDER_ACTIVITY.UPDRECORD(IORCACTIVITY);

    
    IF (IORCACTIVITY.ORDER_ID IS NOT NULL) THEN
        NUOPERATINGUNIT := DAOR_ORDER.FNUGETOPERATING_UNIT_ID(IORCACTIVITY.ORDER_ID);
        IF (NUOPERATINGUNIT IS NOT NULL) THEN  
            
            SBORDERASSTYPE := DAOR_ORDER.FSBGETASSIGNED_WITH(IORCACTIVITY.ORDER_ID);
            
            SBOPERUNITASSTYPE := DAOR_OPERATING_UNIT.FSBGETASSIGN_TYPE(NUOPERATINGUNIT);
            
            IF (SBORDERASSTYPE = OR_BCORDEROPERATINGUNIT.CSBASSIGN_CAPACITY AND
                SBOPERUNITASSTYPE = OR_BCORDEROPERATINGUNIT.CSBASSIGN_CAPACITY) THEN
                
                IF (OR_BCGENORDINSPECC.FBLESORDENINSP(IORCACTIVITY.ORDER_ID)) THEN
                    NUACTIVITYTIME := NVL(DAOR_ACT_INSP_POR_ACT.FNUGETTIEMPO_INSPECCION(IORCACTIVITY.ACTIVITY_ID)/60,0);
                ELSE
                    NUACTIVITYTIME := NVL(DAGE_ITEMS.FNUGETSTANDARD_TIME(IORCACTIVITY.ACTIVITY_ID)/60,0);
                END IF;
                UT_TRACE.TRACE('Tiempo de la actividad: '||NUACTIVITYTIME,15);
                NUTOTALUSEDCAPACITY := DAOR_OPERATING_UNIT.FNUGETUSED_ASSIGN_CAP(NUOPERATINGUNIT)- NUACTIVITYTIME;
                DAOR_OPERATING_UNIT.UPDUSED_ASSIGN_CAP(NUOPERATINGUNIT,NUTOTALUSEDCAPACITY);
                UT_TRACE.TRACE('Actividad Anulada. Actualiza capacidad a: '||NUTOTALUSEDCAPACITY,15);
            END IF;
        END IF;
    END IF;
  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END ANULLACTIVITY;

  
































    PROCEDURE ANULLORDERRECORD
    (
        IORCORDER IN OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
        NUERR       OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
        SBERR       OUT NOCOPY GE_ERROR_LOG.DESCRIPTION%TYPE
    ) IS
    TBORDERACTIVITIES OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
    NUINDEX           BINARY_INTEGER;
    NUMAINT_PROCESS   GE_PROCESS.PROCESS_ID%TYPE := OR_BOCONSTANTS.CNUPROCESS_PREVENT_MAINT;
  BEGIN
    NUERR := GE_BOCONSTANTS.CNUSUCCESS;
    SBERR := NULL;

    
    IF IORCORDER.ORDER_STATUS_ID = OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED OR
       IORCORDER.ASSIGNED_WITH = OR_BCORDEROPERATINGUNIT.CSBASSIGN_SCHED THEN
      OR_BOPROGRAMING.ANULLORDERSCHEDULER(IORCORDER.ORDER_ID);
    END IF;

    
    

    IF (IORCORDER.OPERATING_UNIT_ID IS NOT NULL AND
       (IORCORDER.ASSIGNED_WITH =
       OR_BCORDEROPERATINGUNIT.CSBASSIGN_CAPACITY)) THEN
      
      OR_BOOPERATINGUNIT.UPDATEUSEDCAPACITY(IORCORDER.ORDER_ID,
                                            IORCORDER.OPERATING_UNIT_ID);
    END IF;

    IF (IORCORDER.STAGE_ID IS NOT NULL) THEN
      
      PM_BORELATEDORDER.UPDATERELATEDORDERS(IORCORDER.ORDER_ID, TRUE);
    END IF;

    OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER(IORCORDER.ORDER_ID,
                                              TBORDERACTIVITIES);
    NUINDEX := TBORDERACTIVITIES.FIRST;

    WHILE (NUINDEX IS NOT NULL)
    LOOP

      IF (TBORDERACTIVITIES(NUINDEX).NUPROCESSID = NUMAINT_PROCESS) THEN
        OR_BOLEGALIPREVENTMAINTENACE.ANULLACTIVITY(TBORDERACTIVITIES(NUINDEX)
                                                   .NUORDERACTIVITY);
      END IF;
      NUINDEX := TBORDERACTIVITIES.NEXT(NUINDEX);
    END LOOP;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      ERRORS.GETERROR(NUERR, SBERR);
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      ERRORS.GETERROR(NUERR, SBERR);

  END ANULLORDERRECORD;

  





















  PROCEDURE FINISHANULLORDERRECORD(IORCORDER IN OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
                                   NUERR     OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
                                   SBERR     OUT NOCOPY GE_ERROR_LOG.DESCRIPTION%TYPE,
                                   INUCOMMTYPEID IN OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
                                   IDTCHANGEDATE IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
                                   ) IS
    TBACTIVITIES        OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
    TBPLANNEDACTIVITIES DAOR_ORDER_ACTIVITY.TYTBORDER_ACTIVITY_ID;
    RCORDERACTIVITY     DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
    NUORDER_ACTIVITY_ID OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    NUINDEX             BINARY_INTEGER;
    NUPLINDEX           BINARY_INTEGER;
    NUESTADOINI         OR_ORDER.ORDER_STATUS_ID%TYPE;

  BEGIN
    NUERR := GE_BOCONSTANTS.CNUSUCCESS;
    SBERR := NULL;

    
    
    
    OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER(IORCORDER.ORDER_ID,
                                              TBACTIVITIES);
    NUINDEX := TBACTIVITIES.FIRST;
    WHILE NUINDEX IS NOT NULL
    LOOP
      NUORDER_ACTIVITY_ID := TBACTIVITIES(NUINDEX).NUORDERACTIVITY;

      
      RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(NUORDER_ACTIVITY_ID);
      IF RCORDERACTIVITY.STATUS <> OR_BOCONSTANTS.CSBFINISHSTATUS THEN
        ANULLACTIVITY(RCORDERACTIVITY);
      END IF;

      

      OR_BCPLANNINGACTIVIT.GETPLANACTIVBYACTORI(RCORDERACTIVITY.ORDER_ACTIVITY_ID,
                                                NULL,
                                                TBPLANNEDACTIVITIES);
      NUPLINDEX := TBPLANNEDACTIVITIES.FIRST;
      WHILE NUPLINDEX IS NOT NULL
      LOOP
        RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(TBPLANNEDACTIVITIES(NUPLINDEX));

        
        IF RCORDERACTIVITY.STATUS = OR_BOCONSTANTS.CSBPLANNEDSTATUS THEN
          ANULLACTIVITY(RCORDERACTIVITY);
        END IF;

        NUPLINDEX := TBPLANNEDACTIVITIES.NEXT(NUPLINDEX);
      END LOOP;

      NUINDEX := TBACTIVITIES.NEXT(NUINDEX);
    END LOOP;

    
    NUESTADOINI := IORCORDER.ORDER_STATUS_ID;

    
    OR_BOORDERTRANSITION.CHANGESTATUS
    (
        IORCORDER,
        OR_BOCONSTANTS.CNUORDER_ACTION_CANCEL,
        OR_BOCONSTANTS.CNUORDER_STAT_CANCELED,
        NULL,
        NULL,
        NULL,
        NULL,
        IORCORDER.OPERATING_UNIT_ID,
        NULL,
        INUCOMMTYPEID,
        NULL,
        IDTCHANGEDATE
    );
    
    
        IF(IORCORDER.ADM_PENDING IS NOT NULL) THEN
            IORCORDER.ADM_PENDING := NULL;
            DAOR_ORDER.UPDADM_PENDING(IORCORDER.ORDER_ID, IORCORDER.ADM_PENDING);
        END IF;

    
    
    
    DAOR_ORDER.UPDORDER_STATUS_ID(IORCORDER.ORDER_ID, IORCORDER.ORDER_STATUS_ID);

    
    GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER, NUESTADOINI);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      ERRORS.GETERROR(NUERR, SBERR);
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      ERRORS.GETERROR(NUERR, SBERR);

  END FINISHANULLORDERRECORD;

  






















  PROCEDURE FINANULLSTANDORSUPPORDER
    (
     IORCORDER IN OUT NOCOPY DAOR_ORDER.STYOR_ORDER,
     NUERR     OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
     SBERR     OUT NOCOPY GE_ERROR_LOG.DESCRIPTION%TYPE,
     INUCOMMTYPEID IN OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL
    )
    IS
    TBACTIVITIES        OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;
    TBGROUPACTIVITIES   DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;
    RCORDERACTIVITY     DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
    NUORDER_ACTIVITY_ID OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
    NUINDEX             BINARY_INTEGER;
    NUGRINDEX           BINARY_INTEGER;
    NUESTADOINI         OR_ORDER.ORDER_STATUS_ID%TYPE;

  BEGIN
    NUERR := GE_BOCONSTANTS.CNUSUCCESS;
    SBERR := NULL;

    
    
    
    OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER(IORCORDER.ORDER_ID, TBACTIVITIES);
    NUINDEX := TBACTIVITIES.FIRST;
    
    WHILE NUINDEX IS NOT NULL LOOP
      
      NUORDER_ACTIVITY_ID := TBACTIVITIES(NUINDEX).NUORDERACTIVITY;

      
      RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(NUORDER_ACTIVITY_ID);
      IF RCORDERACTIVITY.STATUS <> OR_BOCONSTANTS.CSBFINISHSTATUS THEN
        ANULLACTIVITY(RCORDERACTIVITY);
      END IF;

      

      TBGROUPACTIVITIES := OR_BCPLANNINGACTIVIT.FTBGETACTIVITIESINGROUP(RCORDERACTIVITY.ACTIVITY_GROUP_ID);
      NUGRINDEX         := TBGROUPACTIVITIES.FIRST;
      WHILE NUGRINDEX IS NOT NULL LOOP 
        RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(TBGROUPACTIVITIES(NUGRINDEX).ORDER_ACTIVITY_ID);

        
        IF RCORDERACTIVITY.STATUS = OR_BOCONSTANTS.CSBPLANNEDSTATUS THEN
          ANULLACTIVITY(RCORDERACTIVITY);
        END IF;

        NUGRINDEX := TBGROUPACTIVITIES.NEXT(NUGRINDEX);
      END LOOP;

      NUINDEX := TBACTIVITIES.NEXT(NUINDEX);
    END LOOP;

    
    NUESTADOINI := IORCORDER.ORDER_STATUS_ID;

    
    OR_BOORDERTRANSITION.CHANGESTATUS
    (
    IORCORDER,
    OR_BOCONSTANTS.CNUORDER_ACTION_CANCEL,
    OR_BOCONSTANTS.CNUORDER_STAT_CANCELED,
    NULL,
    NULL,
    NULL,
    NULL,
    IORCORDER.OPERATING_UNIT_ID,
    NULL,
    INUCOMMTYPEID,
    NULL 
    );



    
    DAOR_ORDER.UPDRECORD(IORCORDER);

    
    GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(IORCORDER, NUESTADOINI);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      ERRORS.GETERROR(NUERR, SBERR);
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      ERRORS.GETERROR(NUERR, SBERR);

  END FINANULLSTANDORSUPPORDER;

  






















  PROCEDURE ANULLORDER
    (
    INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
    NUERR       OUT GE_ERROR_LOG.MESSAGE_ID%TYPE,
    SBERR       OUT NOCOPY GE_ERROR_LOG.DESCRIPTION%TYPE,
    INUCOMMTYPEID IN OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL
    ) 
   IS
    RCORDER DAOR_ORDER.STYOR_ORDER;

  BEGIN
    
    RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDER_ID);

    
    IF NOT FBLISVALIDFORANULL(RCORDER) THEN
      GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_121782, RCORDER.ORDER_ID);
    END IF;

    
    ANULLORDERRECORD(RCORDER, NUERR, SBERR);
    ERRORS.CHECKERROR(NUERR);

    
    FINISHANULLORDERRECORD(RCORDER, NUERR, SBERR,INUCOMMTYPEID);
    ERRORS.CHECKERROR(NUERR);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      ERRORS.GETERROR(NUERR, SBERR);
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      ERRORS.GETERROR(NUERR, SBERR);

  END ANULLORDER;

  
  PROCEDURE FINISHANULLORDER(INUORDER IN OR_ORDER.ORDER_ID%TYPE) IS
    RCORDER DAOR_ORDER.STYOR_ORDER;
    NUERR   GE_ERROR_LOG.MESSAGE_ID%TYPE;
    SBERR   GE_ERROR_LOG.DESCRIPTION%TYPE;

  BEGIN
    RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDER);
    FINISHANULLORDERRECORD(RCORDER, NUERR, SBERR);
    ERRORS.CHECKERROR(NUERR);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END FINISHANULLORDER;

  
  PROCEDURE ANULLORDER(INUORDER IN OR_ORDER.ORDER_ID%TYPE) IS
    RCORDER DAOR_ORDER.STYOR_ORDER;
    NUERR   GE_ERROR_LOG.MESSAGE_ID%TYPE;
    SBERR   GE_ERROR_LOG.DESCRIPTION%TYPE;

  BEGIN
    
    RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDER);

    
    ANULLORDERRECORD(RCORDER, NUERR, SBERR);
    ERRORS.CHECKERROR(NUERR);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END ANULLORDER;

  
  PROCEDURE ANNULORDEREXTERNAL(INUORDER IN OR_ORDER.ORDER_ID%TYPE,
                               OBLANULL OUT BOOLEAN) IS
    RCORDER DAOR_ORDER.STYOR_ORDER;
    NUERR   GE_ERROR_LOG.MESSAGE_ID%TYPE;
    SBERR   GE_ERROR_LOG.DESCRIPTION%TYPE;

  BEGIN
    OBLANULL := FALSE;

    
    RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDER);

    
    ANULLORDER(INUORDER, NUERR, SBERR);
    ERRORS.CHECKERROR(NUERR);

    OBLANULL := TRUE;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RETURN;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END ANNULORDEREXTERNAL;

  
  PROCEDURE ANNULCOLLMNGORDER(INUPRODUCTID IN PR_PRODUCT.PRODUCT_ID%TYPE,
                              OBLANULL     OUT BOOLEAN) IS
    TBORDERS DAOR_ORDER.TYTBORDER_ID;
    NUERR    GE_ERROR_LOG.MESSAGE_ID%TYPE;
    SBERR    GE_ERROR_LOG.DESCRIPTION%TYPE;
    NUINDEX  BINARY_INTEGER;

  BEGIN
    OBLANULL := TRUE;

    TBORDERS := OR_BCCOLLMNGORDER.FTBORDERACTIVBYCOLLMNG(INUPRODUCTID);
    NUINDEX  := TBORDERS.FIRST;
    WHILE NUINDEX IS NOT NULL
    LOOP

      
      ANULLORDER(TBORDERS(NUINDEX), NUERR, SBERR);
      ERRORS.CHECKERROR(NUERR);

      NUINDEX := TBORDERS.NEXT(NUINDEX);
    END LOOP;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END ANNULCOLLMNGORDER;

  
  PROCEDURE ANNULASSIGNORDER(INUORDER        IN OR_ORDER.ORDER_ID%TYPE,
                             OBLANULL        OUT BOOLEAN,
                             ONUERRORCODE    OUT NUMBER,
                             OSBERRORMESSAGE OUT NOCOPY VARCHAR2) IS

  BEGIN
    OBLANULL := FALSE;

    
    ANULLORDER(INUORDER, ONUERRORCODE, OSBERRORMESSAGE);
    ERRORS.CHECKERROR(ONUERRORCODE);

    OBLANULL := TRUE;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END ANNULASSIGNORDER;

  






























  PROCEDURE ANNULORSTANDSUPPORT
    (
    INUORDER       IN OR_ORDER.ORDER_ID%TYPE,
    INUCOMMENTTYPE IN OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL,
    ISBCOMMENT     IN OR_ORDER_COMMENT.ORDER_COMMENT%TYPE DEFAULT NULL
    ) 
    IS
    RCORDER DAOR_ORDER.STYOR_ORDER;
    NUERR   GE_ERROR_LOG.MESSAGE_ID%TYPE;
    SBERR   GE_ERROR_LOG.DESCRIPTION%TYPE;

  BEGIN
    
    

    IF (NOT OR_BCANULLORDER.FBLISSUPPORTORDER(INUORDER) AND
         NOT OR_BCANULLORDER.FBLISAUTONOMORDER(INUORDER) AND
         NOT OR_BCANULLORDER.FBLISELEMENTORDER(INUORDER) AND
         NOT OR_BCANULLORDER.FLBISPROJECTORDER(INUORDER) AND
         NOT OR_BCANULLORDER.FBOISREREADINGORDER(INUORDER) AND
         NOT OR_BORELATEDORDER.FLBGETORDERRELATED(INUORDER)) 
    THEN

      GE_BOERRORS.SETERRORCODE(CNUERR_113406);

    END IF;

    
    RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDER);

    
    IF NOT FBLISVALIDFORANULL(RCORDER) THEN
      GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_121782, RCORDER.ORDER_ID);
    END IF;

    
    ANULLORDERRECORD(RCORDER, NUERR, SBERR);
    ERRORS.CHECKERROR(NUERR);

    
    FINANULLSTANDORSUPPORDER(RCORDER, NUERR, SBERR,INUCOMMENTTYPE);
    ERRORS.CHECKERROR(NUERR);

    
    
    IF NOT (INUCOMMENTTYPE IS NULL) THEN
      
      OR_BOORDERCOMMENT.ADDCOMMENT
      (
      RCORDER.ORDER_ID,
      INUCOMMENTTYPE,
      ISBCOMMENT
      );
    END IF;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END ANNULORSTANDSUPPORT;

  
  PROCEDURE ANULLORDERPROCESS
    (
    INUORDER IN OR_ORDER.ORDER_ID%TYPE,
    INUCOMMTYPEID IN OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL     
    )
     IS
    NUERR GE_ERROR_LOG.MESSAGE_ID%TYPE;
    SBERR GE_ERROR_LOG.DESCRIPTION%TYPE;

  BEGIN
    
    OR_BOVALIDATOR.VALIDATEANULLDATA(INUORDER);

    
    ANULLORDER(INUORDER, NUERR, SBERR,INUCOMMTYPEID);
    ERRORS.CHECKERROR(NUERR);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END ANULLORDERPROCESS;

  
  PROCEDURE ANULLORDERBYWORKFLOW(INUINSTANCEID IN OR_ORDER_ACTIVITY.INSTANCE_ID%TYPE,
                                 INUANNULID    IN NUMBER) IS
    RCACTIVITY   DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
    TBACTIVITIES DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;

    TBORDERID DAOR_ORDER_ACTIVITY.TYTBORDER_ID;
    NUORDERID OR_ORDER.ORDER_ID%TYPE;

    TBFAILEDORDERS DAOR_ORDER_ACTIVITY.TYTBORDER_ID;
    SBFAILEDORDERS GE_BOUTILITIES.STYSTATEMENT;

    NUINDEX BINARY_INTEGER;

  BEGIN
    
    OR_BCORDERACTIVITIES.GETACTIVITIESBYINSTANCE(INUINSTANCEID,
                                                 TBACTIVITIES);
    NUINDEX := TBACTIVITIES.FIRST;
    WHILE NUINDEX IS NOT NULL
    LOOP
      RCACTIVITY := TBACTIVITIES(NUINDEX);

      
      IF RCACTIVITY.STATUS = OR_BOORDERACTIVITIES.CSBPLANNEDSTATUS THEN
        ANULLACTIVITY(RCACTIVITY);
      END IF;

      NUINDEX := TBACTIVITIES.NEXT(NUINDEX);
    END LOOP;

    
    OR_BCORDERACTIVITIES.GETPENDIORDERBYINSTANCE(INUINSTANCEID, TBORDERID);
    NUINDEX := TBORDERID.FIRST;
    WHILE NUINDEX IS NOT NULL
    LOOP
      NUORDERID := TBORDERID(NUINDEX);

      BEGIN
        
        IF OR_BCORDERACTIVITIES.FNUGETPACKAGCOUNTBYORDER(NUORDERID) > 1 THEN
          GE_BOERRORS.SETERRORCODE(CNUERR_113323);
        END IF;

        
        OR_BOANULLORDER.ANULLORDERPROCESS(NUORDERID);

      EXCEPTION
        WHEN OTHERS THEN
          TBFAILEDORDERS(TBFAILEDORDERS.COUNT + 1) := NUORDERID;
      END;

      NUINDEX := TBORDERID.NEXT(NUINDEX);
    END LOOP;

    
    IF TBFAILEDORDERS.COUNT = 0 THEN
      RETURN;
    END IF;

    
    SBFAILEDORDERS := TBFAILEDORDERS(1);
    FOR I IN 2 .. TBFAILEDORDERS.LAST
    LOOP
      SBFAILEDORDERS := SBFAILEDORDERS || ', ' || TBFAILEDORDERS(I);
    END LOOP;

    GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_122902, SBFAILEDORDERS);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END ANULLORDERBYWORKFLOW;

  














  FUNCTION FBLANULLORDERPROCESS(INUORDER IN OR_ORDER.ORDER_ID%TYPE)
    RETURN BOOLEAN IS
    NUERRORCODE    GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
    SBERRORMESSAGE GE_ERROR_LOG.DESCRIPTION%TYPE;
  BEGIN
    OR_BOANULLORDER.ANULLORDERPROCESS(INUORDER);
    RETURN TRUE;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      ERRORS.SETERROR;
      ERRORS.GETERROR(NUERRORCODE, SBERRORMESSAGE);
      UT_TRACE.TRACE('No se pudo anular la orden [' || NUERRORCODE ||
                     ' - ' || SBERRORMESSAGE || ']',
                     15);
      RETURN FALSE;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END;

  
  PROCEDURE ANULORDERBYPACKWITHOUTWF(INUPACKAGE_ID IN MO_PACKAGES.PACKAGE_ID%TYPE) IS
    TYPE TYTBORDERS IS TABLE OF NUMBER(1) INDEX BY VARCHAR2(20);

    TBACTIVITIES  DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;
    TBREADYORDERS TYTBORDERS;
    NUINDEX       BINARY_INTEGER;

    RCACTIVITY  DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
    RCORDER     DAOR_ORDER.STYOR_ORDER;
    NUORDERITEM OR_ORDER_ITEMS.ORDER_ITEMS_ID%TYPE;

    NUERR GE_ERROR_LOG.MESSAGE_ID%TYPE;
    SBERR GE_ERROR_LOG.DESCRIPTION%TYPE;

  BEGIN
    
    
    
    PREPROCESSORDERS(INUPACKAGE_ID);

    
    OR_BCORDERACTIVITIES.GETPENDACTIVBYPACKWITHOUTWF(INUPACKAGE_ID,
                                                     TBACTIVITIES);

    NUINDEX := TBACTIVITIES.FIRST;
    WHILE NUINDEX IS NOT NULL
    LOOP
      RCACTIVITY := TBACTIVITIES(NUINDEX);

      
      IF NOT TBREADYORDERS.EXISTS(RCACTIVITY.ORDER_ID) THEN

        
        IF OR_BCORDERACTIVITIES.FNUGETPACKAGCOUNTBYORDER(RCACTIVITY.ORDER_ID) = 1 THEN
          RCORDER := DAOR_ORDER.FRCGETRECORD(RCACTIVITY.ORDER_ID);
          
          OR_BOVALIDATOR.VALIDATEANULLDATA(RCORDER.ORDER_ID);
          ANULLORDERRECORD(RCORDER, NUERR, SBERR);
          FINISHANULLORDERRECORD(RCORDER, NUERR, SBERR);
          
          TBREADYORDERS(RCACTIVITY.ORDER_ID) := 1;

          
        ELSE
          NUORDERITEM              := RCACTIVITY.ORDER_ITEM_ID;
          RCACTIVITY.ORDER_ITEM_ID := NULL;
          RCACTIVITY.ORDER_ID      := NULL;
          ANULLACTIVITY(RCACTIVITY);
          DAOR_ORDER_ITEMS.DELRECORD(NUORDERITEM);

        END IF;

      END IF;

      NUINDEX := TBACTIVITIES.NEXT(NUINDEX);
    END LOOP;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END ANULORDERBYPACKWITHOUTWF;

  
  
  
  PROCEDURE PREPROCESSORDERS(INUPACKAGEID IN OR_ORDER_ACTIVITY.PACKAGE_ID%TYPE) IS
  BEGIN
    UT_TRACE.TRACE('Init Or_BOAnullOrder.preProcessOrders', 15);

    
    OR_BOUNGROUPACTIVITY.INDEPENDOTHERPACKSACT(INUPACKAGEID);

    
    

    
    
    
    

    UPDATE WF_INSTANCE
       SET MODULE_ID = 4
     WHERE MODULE_ID != 4
       AND INSTANCE_ID IN
           (SELECT INSTANCE_ID
              FROM OR_ORDER_ACTIVITY
             WHERE OR_ORDER_ACTIVITY.PACKAGE_ID = INUPACKAGEID
               AND OR_ORDER_ACTIVITY.STATUS <> CSBFINISHSTATUS);

    UT_TRACE.TRACE('End Or_BOAnullOrder.preProcessOrders', 15);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END PREPROCESSORDERS;

  



















  FUNCTION FBLORDENVALANUL(INUORDER IN OR_ORDER.ORDER_ID%TYPE) RETURN BOOLEAN IS
  BEGIN
    UT_TRACE.TRACE('Inicio de OR_BoAnullOrder.fblOrdenValAnul Orden[' ||
                   INUORDER || ']',
                   5);

    
    IF ((OR_BCANULLORDER.FBLESORDENREPARACION(INUORDER)) OR
        (OR_BCANULLORDER.FBLISSUPPORTORDER(INUORDER)) OR
        (OR_BCANULLORDER.FBLISAUTONOMORDER(INUORDER)) OR
        (OR_BCANULLORDER.FBLISELEMENTORDER(INUORDER)) OR
        (OR_BCANULLORDER.FBOISREREADINGORDER(INUORDER)) OR
        (OR_BCANULLORDER.FLBISPROJECTORDER(INUORDER)) OR
        (OR_BORELATEDORDER.FLBGETORDERRELATED(INUORDER)) OR
        (DAOR_ORDER.FSBGETADM_PENDING(INUORDER) = GE_BOCONSTANTS.CSBYES)) THEN
      
      OR_BOVALIDATOR.VALIDATEANULLDATA(INUORDER);
      
      UT_TRACE.TRACE('Fin de OR_BoAnullOrder.fblOrdenValAnul -> TRUE', 5);
      RETURN TRUE;
    ELSE
      
      UT_TRACE.TRACE('Fin de OR_BoAnullOrder.fblOrdenValAnul -> FALSE', 5);
      RETURN FALSE;
    END IF;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RETURN FALSE;
      
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END FBLORDENVALANUL;

    



















    PROCEDURE DAMAGEORDERANULL
    (
    INUORDER IN OR_ORDER.ORDER_ID%TYPE,
    INUCOMMTYPEID IN OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE DEFAULT NULL
    )
    IS
    
    NUPACKAGEID MO_PACKAGES.PACKAGE_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio de OR_BoAnullOrder.DamageOrderAnull Orden[' || INUORDER || ']', 5);

        
        
        IF (OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE%ISOPEN) THEN
          CLOSE OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE;
        END IF;
        OPEN OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE(INUORDER);
        FETCH OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE INTO NUPACKAGEID;
        CLOSE OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE;
        UT_TRACE.TRACE('Solicitud ' || NUPACKAGEID, 6);

        IF (NUPACKAGEID IS NOT NULL) THEN

            
            
            TT_BOORDERDAMAGEUTILITIES.TRASLADARACTIVIDADESORDEN(INUORDER, NUPACKAGEID);

            IF ( DATT_DAMAGE.FSBGETREG_DAMAGE_STATUS(NUPACKAGEID) = TT_BCCONSTANTS.CSBREGISTEREDDAMAGESTATUS ) THEN
                
                TT_BODAMAGE.UPDDAMAGESTATUS(NUPACKAGEID);
            END IF;
        END IF;

        
        OR_BOANULLORDER.ANULLORDERPROCESS(INUORDER,INUCOMMTYPEID);

        UT_TRACE.TRACE('Fin de OR_BoAnullOrder.DamageOrderAnull', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE%ISOPEN) THEN
                CLOSE OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE;
            END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            IF (OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE%ISOPEN) THEN
                CLOSE OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE;
            END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DAMAGEORDERANULL;
  
      
























































  

    









































































































  
    












    PROCEDURE DECREASECONTASSIVAL
    (
        IRCORDER        IN  DAOR_ORDER.STYOR_ORDER
    )
    IS
        NUVALASIGCONTRATO       GE_CONTRATO.VALOR_ASIGNADO%TYPE;

    BEGIN
        UT_TRACE.TRACE('Begin Or_BOAnullOrder.DecreaseContAssiVal',2);

        
        IF IRCORDER.ESTIMATED_COST > 0 THEN
            
            
            IF IRCORDER.DEFINED_CONTRACT_ID IS NOT NULL THEN

                NUVALASIGCONTRATO := DAGE_CONTRATO.FNUGETVALOR_ASIGNADO(IRCORDER.DEFINED_CONTRACT_ID,0);

                NUVALASIGCONTRATO := NUVALASIGCONTRATO - IRCORDER.ESTIMATED_COST;

                
                DAGE_CONTRATO.UPDVALOR_ASIGNADO(IRCORDER.DEFINED_CONTRACT_ID, NUVALASIGCONTRATO);

                
                DAOR_ORDER.UPDDEFINED_CONTRACT_ID(IRCORDER.ORDER_ID, NULL);
            END IF;

            
            DAOR_ORDER.UPDESTIMATED_COST(IRCORDER.ORDER_ID, 0);
        END IF;

        UT_TRACE.TRACE('End Or_BOAnullOrder.DecreaseContAssiVal',2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
    END DECREASECONTASSIVAL;
  
  



























  PROCEDURE ANULLORDEROFDAMAGE
    (
    INUORDER         IN OR_ORDER.ORDER_ID%TYPE,
    INUCOMMENTTYPEID IN OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE,
    ISBCOMMENT       IN OR_ORDER_COMMENT.ORDER_COMMENT%TYPE
    )
   IS

    SBCANANULLDIAGORDER VARCHAR2(1);
    RCORDER             DAOR_ORDER.STYOR_ORDER;
    RCSCHEDPROGRAMING   DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
    RCSCHEDDISPATCH     DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
    RCSCHEDAVAILABLE    DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
    SBASSIGNTYPE        OR_OPERATING_UNIT.ASSIGN_TYPE%TYPE;
    CSBSCHED_ASS_TYPE   CONSTANT VARCHAR2(1) := 'S';
    BLTOP               BOOLEAN := TRUE;
  BEGIN
    UT_TRACE.TRACE('Inicio de OR_BoAnullOrder.AnullOrderOfDamage Orden[' || INUORDER || ']', 5);
    UT_TRACE.TRACE('Tipo de comentario [' || INUCOMMENTTYPEID || '] Comentario [' || ISBCOMMENT || ']', 5);

    
    DAOR_ORDER.LOCKBYPK(INUORDER, RCORDER);

    
    IF (NVL(RCORDER.ADM_PENDING,GE_BOCONSTANTS.CSBNO) = GE_BOCONSTANTS.CSBNO) THEN
        IF (NOT OR_BOANULLORDER.FBLORDENVALANUL(INUORDER)) THEN
            GE_BOERRORS.SETERRORCODE(CNUERR_ORDNOVALANULL);
        END IF;
    END IF;

    IF (OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(INUORDER, RCSCHEDPROGRAMING)) THEN
        OR_BCSCHED.GETAVAILABLEBYPKBLOQ(RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID, RCSCHEDAVAILABLE);
        IF (RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID IS NULL) THEN
            UT_TRACE.TRACE('No se encontr� la disponibilidad: ['||RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID||']');
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;
    ELSIF (OR_BCDISPATCH.FBLEXISTDISPBYORDER(INUORDER, RCSCHEDDISPATCH)) THEN
        OR_BCSCHED.GETAVAILABLEBYUDXBLOQ(
            RCSCHEDDISPATCH.SCHEDULER_ID,
            RCSCHEDDISPATCH.OPERATING_UNIT_ID,
            RCSCHEDDISPATCH.OPERATING_ZONE_ID,
            RCSCHEDDISPATCH.DATE_,
            RCSCHEDAVAILABLE
        );
        IF (RCSCHEDAVAILABLE.SCHED_AVAILABLE_ID IS NULL) THEN
            UT_TRACE.TRACE('No se encontr� la disponibilidad: ['||RCSCHEDDISPATCH.SCHEDULER_ID
                ||']['||RCSCHEDDISPATCH.OPERATING_UNIT_ID
                ||']['||RCSCHEDDISPATCH.OPERATING_ZONE_ID
                ||']['||RCSCHEDDISPATCH.DATE_
                ||']');
            GE_BOERRORS.SETERRORCODE(CNUERR_PROGCHANGED);
        END IF;
    END IF;

    
    SBCANANULLDIAGORDER := GE_BOPARAMETER.FSBGET(CSBCANANULLDIAGORDERS);
    IF ((SBCANANULLDIAGORDER IS NULL) OR
       ((SBCANANULLDIAGORDER <> GE_BOCONSTANTS.CSBYES) AND
       (SBCANANULLDIAGORDER <> GE_BOCONSTANTS.CSBNO))) THEN
      ERRORS.SETERROR(CNUERR_122142, CSBCANANULLDIAGORDERS);
      RAISE EX.CONTROLLED_ERROR;
    END IF;

    
    IF ((OR_BCANULLORDER.FBLESORDENDIAGNOSTICO(INUORDER)) AND
       (SBCANANULLDIAGORDER = GE_BOCONSTANTS.CSBNO)) THEN
      ERRORS.SETERROR(CNUERR_10779);
      RAISE EX.CONTROLLED_ERROR;
    END IF;

    
    IF RCORDER.ADM_PENDING = GE_BOCONSTANTS.CSBYES THEN

      OR_BOADMINORDER.CHANGESTATUS
                                                        (
                                                        RCORDER,
                                                        OR_BOCONSTANTS.CNUORDER_STAT_CANCELED,
                                                        INUCOMMENTTYPEID,
                                                        ISBCOMMENT
                                                        );

      
    ELSIF ((OR_BCANULLORDER.FBLESORDENREPARACION(INUORDER)) OR
          (OR_BCANULLORDER.FBLESORDENDIAGNOSTICO(INUORDER))) THEN
      
      OR_BOANULLORDER.DAMAGEORDERANULL(INUORDER,INUCOMMENTTYPEID);

      
      
      IF ((INUCOMMENTTYPEID IS NOT NULL) AND (ISBCOMMENT IS NOT NULL)) THEN
        OR_BOORDERCOMMENT.ADDCOMMENT
        (
         INUORDER,
         INUCOMMENTTYPEID,
         ISBCOMMENT
         )
         ;
      END IF;
      
    
    ELSE
      
      OR_BOANULLORDER.ANNULORSTANDSUPPORT(INUORDER,
                                          INUCOMMENTTYPEID,
                                          ISBCOMMENT);
    END IF;
    
    SBASSIGNTYPE := CSBSCHED_ASS_TYPE;
    IF (RCORDER.OPERATING_UNIT_ID IS NOT NULL) THEN

        SBASSIGNTYPE := DAOR_OPERATING_UNIT.FSBGETASSIGN_TYPE(RCORDER.OPERATING_UNIT_ID);

    END IF;

    IF(SBASSIGNTYPE = CSBSCHED_ASS_TYPE) THEN
        
        BLTOP := FALSE;
    END IF;

    
    
    IF BLTOP THEN

        
        
        DECREASECONTASSIVAL
        (
            RCORDER
        );

    END IF;

    UT_TRACE.TRACE('Fin de OR_BoAnullOrder.AnullOrderOfDamage', 5);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      IF (OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE%ISOPEN) THEN
        CLOSE OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE;
      END IF;
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      IF (OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE%ISOPEN) THEN
        CLOSE OR_BCORDERACTIVITIES.CUGETACTIVITYPACKAGE;
      END IF;
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END ANULLORDEROFDAMAGE;

  




  FUNCTION FSBORDENVALANUL(INUORDER IN OR_ORDER.ORDER_ID%TYPE)
    RETURN VARCHAR2 IS
  BEGIN
    UT_TRACE.TRACE('Inicio de OR_BoAnullOrder.fsbOrdenValAnul Orden[' ||
                   INUORDER || ']',
                   5);

    IF (FBLORDENVALANUL(INUORDER)) THEN
      UT_TRACE.TRACE('Fin de OR_BoAnullOrder.fsbOrdenValAnul ->'||GE_BOCONSTANTS.CSBYES, 5);
      RETURN GE_BOCONSTANTS.CSBYES;
    ELSE
      UT_TRACE.TRACE('Fin de OR_BoAnullOrder.fsbOrdenValAnul ->'||GE_BOCONSTANTS.CSBNO, 5);
      RETURN GE_BOCONSTANTS.CSBNO;
    END IF;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END FSBORDENVALANUL;

  








































  PROCEDURE ANNULORDERBYACTIVCOMPEN(INUORDERID IN OR_ORDER.ORDER_ID%TYPE) IS

    
    
    BOANULLORDER BOOLEAN := FALSE;

    
    NUNOTCOMPENORDACTNUM NUMBER;

    
    TBORDERACTIVITIES OR_BCORDERACTIVITIES.TYTBORDERACTIVITIES;

    
    NUORDERACTIDX BINARY_INTEGER;

    
    NUCAUSALWFID GE_CAUSAL.CAUSAL_ID%TYPE;

    
    NUIDOBJCOMPENSACION OR_ACTIVIDAD.OBJETO_COMPENSACION%TYPE;

    
    SBNOMBOBJCOMPENSACION GE_OBJECT.NAME_%TYPE;

    TBINSTANCE DAOR_ORDER_ACTIVITY.TYTBINSTANCE_ID;
    
    SBISACTGROUPFINISHED VARCHAR2(1);

  BEGIN
    
    UT_TRACE.TRACE('Inicio [Or_BOAnullOrder.AnnulOrderByActivCompen]', 5);

    
    OR_BCORDERACTIVITIES.GETACTIVITIESBYORDER(INUORDERID,
                                              TBORDERACTIVITIES);

    
    
    NUORDERACTIDX := TBORDERACTIVITIES.FIRST;

    LOOP
      
      
      EXIT WHEN NUORDERACTIDX IS NULL;

      
      IF (TBORDERACTIVITIES(NUORDERACTIDX)
         .SBISCOMPENSATE = GE_BOCONSTANTS.CSBYES) THEN

        
        NUIDOBJCOMPENSACION := DAOR_ACTIVIDAD.FNUGETOBJETO_COMPENSACION(TBORDERACTIVITIES(NUORDERACTIDX)
                                                                        .NUACTIVITYID);

        
        
        IF (NUIDOBJCOMPENSACION IS NOT NULL) THEN
          
          UT_TRACE.TRACE('Ejecutando objeto de compensaci�n para la actividad de orden [' || TBORDERACTIVITIES(NUORDERACTIDX)
                         .NUORDERACTIVITY || ']',
                         6);

          
          
          OR_BOLEGALIZEACTIVITIES.SETCURRENTACTIVITYRECORD(TBORDERACTIVITIES(NUORDERACTIDX));

          
          SBNOMBOBJCOMPENSACION := DAGE_OBJECT.FSBGETNAME_(NUIDOBJCOMPENSACION);

          
          GE_BOOBJECT.EXECOBJECTBYNAME_IMMEDIATE(SBNOMBOBJCOMPENSACION);

          
          OR_BOLEGALIZEACTIVITIES.CLEARACTIVITYRECORD;
          
        END IF;

        SBISACTGROUPFINISHED := GE_BOCONSTANTS.GETYES;
        
        IF TBORDERACTIVITIES(NUORDERACTIDX).NUACTIVITYGROUPID IS NOT NULL THEN
          OR_BOPLANNINGACTIVIT.GENNEXTEXECUTION(TBORDERACTIVITIES   (NUORDERACTIDX)
                                                .NUACTIVITYGROUPID,
                                                TBORDERACTIVITIES   (NUORDERACTIDX)
                                                .NUACTIVITYSEQUENCE,
                                                SBISACTGROUPFINISHED);
          UT_TRACE.TRACE('Group[' || TBORDERACTIVITIES(NUORDERACTIDX)
                         .NUACTIVITYGROUPID || ']Finish=' ||
                         SBISACTGROUPFINISHED,
                         15);
        END IF;

        IF (SBISACTGROUPFINISHED = GE_BOCONSTANTS.GETYES) THEN
          
          TRYNOTIFYWFBYANULL(INUORDERID,
                             TBORDERACTIVITIES(NUORDERACTIDX).NUINSTANCEID);
        END IF;
      END IF;

      
      NUORDERACTIDX := TBORDERACTIVITIES.NEXT(NUORDERACTIDX);
      
    END LOOP;

    
    FINISHANULLORDER(INUORDERID);


    UT_TRACE.TRACE('Fin [Or_BOAnullOrder.AnnulOrderByActivCompen]', 5);

  EXCEPTION

    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;

    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
      
  END ANNULORDERBYACTIVCOMPEN;

  















  PROCEDURE VALCHILDSCOMPONENTS(INUCOMPONENT   IN MO_COMPONENT.COMPONENT_ID%TYPE,
                                ISBORDERSTATUS IN VARCHAR2) IS
    CURFGETCHILDCOMPONENT CONSTANTS.TYREFCURSOR;
    RCGETCHILDCOMPONENT   MO_BCCOMPONENT.STYRCGETCHILDCOMPONENT;
    RFREFCURSOR           CONSTANTS.TYREFCURSOR;

    NUORDERID OR_ORDER.ORDER_ID%TYPE;

    PROCEDURE CLOSECURSORS IS
    BEGIN
      IF CURFGETCHILDCOMPONENT%ISOPEN THEN
        CLOSE CURFGETCHILDCOMPONENT;
      END IF;
      IF RFREFCURSOR%ISOPEN THEN
        CLOSE RFREFCURSOR;
      END IF;
    END;
  BEGIN
    IF CURFGETCHILDCOMPONENT%ISOPEN THEN
      CLOSE CURFGETCHILDCOMPONENT;
    END IF;

    
    CURFGETCHILDCOMPONENT := MO_BCCOMPONENT.FRFGETCHILDCOMPONENT(INUCOMPONENT);

    FETCH CURFGETCHILDCOMPONENT
      INTO RCGETCHILDCOMPONENT;

    WHILE CURFGETCHILDCOMPONENT%FOUND
    LOOP

      
      IF (OR_BCORDER.FSBEXISTSORDERS(NULL,
                                     NULL,
                                     RCGETCHILDCOMPONENT.COMPONENT_ID,
                                     ISBORDERSTATUS) =
         GE_BOCONSTANTS.CSBYES) THEN
        
        GE_BOERRORS.SETERRORCODE(CNUERR_147081);
      END IF;

      IF RFREFCURSOR%ISOPEN THEN
        CLOSE RFREFCURSOR;
      END IF;
      
      OR_BCORDER.GETORDERSFORANULL(NULL,
                                   NULL,
                                   RCGETCHILDCOMPONENT.COMPONENT_ID,
                                   ISBORDERSTATUS,
                                   RFREFCURSOR);

      FETCH RFREFCURSOR
        INTO NUORDERID;

      WHILE RFREFCURSOR%FOUND
      LOOP
        UT_TRACE.TRACE('Se valida la orden: ' || NUORDERID, 15);
        
        OR_BOVALIDATOR.VALIDATEANULLDATA(NUORDERID,
                                         OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED);
        FETCH RFREFCURSOR
          INTO NUORDERID;
      END LOOP;

      CLOSE RFREFCURSOR;

      FETCH CURFGETCHILDCOMPONENT
        INTO RCGETCHILDCOMPONENT;
    END LOOP;

    CLOSE CURFGETCHILDCOMPONENT;
  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      CLOSECURSORS;
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      CLOSECURSORS;
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END VALCHILDSCOMPONENTS;

  






















  PROCEDURE VALANULLPROCESS(INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE,
                            INUMOTIVEID  IN MO_MOTIVE.MOTIVE_ID%TYPE,
                            INUCOMPONENT IN MO_COMPONENT.COMPONENT_ID%TYPE) IS
    SBORDERSTATUS    VARCHAR2(50);
    SBRESULT         VARCHAR2(1);
    SBPARAMETERVALUE GE_PARAMETER.VALUE%TYPE;
    RFCURSOR         CONSTANTS.TYREFCURSOR;
    NUORDERID        OR_ORDER.ORDER_ID%TYPE;
  BEGIN
    UT_TRACE.TRACE('Inicia Or_BOAnullOrder.valAnullProcess', 15);

    
    SBORDERSTATUS := OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING || ', ' ||
                     OR_BOCONSTANTS.CNUORDER_STAT_CLOSED || ', ' ||
                     OR_BOCONSTANTS.CNUORDER_STAT_MOVILIZING;

    
    SBPARAMETERVALUE := GE_BOPARAMETER.FSBGET(OR_BOPARAMETER.CSBANULL_ORDER_ASIGN);

    IF (SBPARAMETERVALUE IS NULL) THEN
      GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_122142,
                                       OR_BOPARAMETER.CSBANULL_ORDER_ASIGN ||
                                       ' - ' ||
                                       DAGE_PARAMETER.FSBGETDESCRIPTION(OR_BOPARAMETER.CSBANULL_ORDER_ASIGN));
    ELSIF (SBPARAMETERVALUE = GE_BOCONSTANTS.CSBNO) THEN
      SBORDERSTATUS := SBORDERSTATUS || ', ' ||
                       OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED;
    END IF;

    
    IF (OR_BCORDER.FSBEXISTSORDERS(INUPACKAGEID,
                                   INUMOTIVEID,
                                   INUCOMPONENT,
                                   SBORDERSTATUS) = GE_BOCONSTANTS.CSBYES) THEN
      
      GE_BOERRORS.SETERRORCODE(CNUERR_147081);
    END IF;

    IF RFCURSOR%ISOPEN THEN
      CLOSE RFCURSOR;
    END IF;

    
    OR_BCORDER.GETORDERSFORANULL(INUPACKAGEID,
                                 INUMOTIVEID,
                                 INUCOMPONENT,
                                 SBORDERSTATUS,
                                 RFCURSOR);

    FETCH RFCURSOR
      INTO NUORDERID;

    WHILE RFCURSOR%FOUND
    LOOP
      UT_TRACE.TRACE('Se valida la orden: ' || NUORDERID, 15);
      
      OR_BOVALIDATOR.VALIDATEANULLDATA(NUORDERID,
                                       OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED);
      FETCH RFCURSOR
        INTO NUORDERID;
    END LOOP;
    CLOSE RFCURSOR;

    
    VALCHILDSCOMPONENTS(INUCOMPONENT, SBORDERSTATUS);

    
    IF (INUPACKAGEID IS NOT NULL) THEN
      SBRESULT := OR_BCCOMPENSACIONACTIVIDADES.FSBTIENEACTICOMPEPORSOL(INUPACKAGEID);
    END IF;

    
    IF (INUMOTIVEID IS NOT NULL) THEN
      SBRESULT := OR_BCCOMPENSACIONACTIVIDADES.FSBACTIVCOMPBYMOT(INUMOTIVEID);
    END IF;

    
    IF (INUCOMPONENT IS NOT NULL) THEN
      SBRESULT := OR_BCCOMPENSACIONACTIVIDADES.FSBTIENEACTCOMPPORCOMPO(INUCOMPONENT);
    END IF;

    IF (SBRESULT = GE_BOCONSTANTS.CSBYES) THEN
      
      GE_BOERRORS.SETERRORCODE(CNUERR_147080);
    END IF;

    UT_TRACE.TRACE('Finaliza Or_BOAnullOrder.valAnullProcess', 15);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR', 15);
      RAISE;

    WHEN OTHERS THEN
      UT_TRACE.TRACE('Error : OTHERS', 15);
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END;

  
































  PROCEDURE ANULLACTIVITIES(INUPACKAGEID IN MO_PACKAGES.PACKAGE_ID%TYPE,
                            INUMOTIVEID  IN MO_MOTIVE.MOTIVE_ID%TYPE,
                            INUCOMPONENT IN MO_COMPONENT.COMPONENT_ID%TYPE,
                            IBLNOTIFYWF  IN BOOLEAN DEFAULT TRUE) IS

    OTBORDERACTIVITIES OR_BCORDERACTIVITIES.TYTBORDERANDACTIVITY;
    RCACTIVITY         DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
    TBORDERACTIVITIES  DAOR_ORDER_ACTIVITY.TYTBOR_ORDER_ACTIVITY;
    TBORDERS           DAOR_ORDER.TYTBORDER_ID;
    NUINDEX            NUMBER;
    BLISANULL          BOOLEAN := TRUE;
    NUERR              GE_ERROR_LOG.MESSAGE_ID%TYPE;
    SBERR              GE_ERROR_LOG.DESCRIPTION%TYPE;

    PROCEDURE ADJUSTPROGRAMMING(INUORDERID IN OR_ORDER.ORDER_ID%TYPE) IS
      RCSCHEDPROGRAMING DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
      RCSCHEDDISPATCH   DAOR_SCHED_DISPATCH.STYOR_SCHED_DISPATCH;
      NUREALDURATION    OR_SCHED_PROGRAMING.DURATION%TYPE := 0;
      NUORDERSTATUSID   OR_ORDER.ORDER_STATUS_ID%TYPE;
      BLPROGRAM         BOOLEAN := FALSE;

    BEGIN
      UT_TRACE.TRACE('Inicia Or_BOAnullOrder.AdjustProgramming IrderId=' ||
                     INUORDERID,
                     15);
      NUORDERSTATUSID := DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDERID);

      
      IF (NUORDERSTATUSID NOT IN
         (OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
           OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED)) THEN
        RETURN;
      END IF;

      IF (NUORDERSTATUSID = OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED) THEN
        BLPROGRAM := OR_BCDISPATCH.FBLEXISTDISPBYORDER(INUORDERID,
                                                       RCSCHEDDISPATCH);
        IF (RCSCHEDDISPATCH.DATE_ <> TRUNC(SYSDATE)) THEN
          DAOR_ORDER.UPDORDER_STATUS_ID(INUORDERID,
                                        OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED);
        END IF;
      END IF;

      
      BLPROGRAM := OR_BOPROGRAMING.FBLPROGAUTOMATICA(INUORDERID);

      
      IF (RCSCHEDDISPATCH.DATE_ <> TRUNC(SYSDATE)) THEN
        IF (OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(INUORDERID,
                                                 RCSCHEDPROGRAMING) AND
           BLPROGRAM) THEN

          OR_BOPROGRAMING.GETSTANDARDTIMEBYORDER(INUORDERID,
                                                 NUREALDURATION);

          RCSCHEDDISPATCH.DURATION_REQUIRED := NUREALDURATION;
          RCSCHEDDISPATCH.DURATION          := RCSCHEDPROGRAMING.DURATION;
          RCSCHEDDISPATCH.HOUR_END          := RCSCHEDPROGRAMING.HOUR_END;

          DAOR_SCHED_DISPATCH.UPDRECORD(RCSCHEDDISPATCH);
        END IF;
        
        DAOR_ORDER.UPDORDER_STATUS_ID(INUORDERID,
                                      OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED);
      END IF;

      UT_TRACE.TRACE('Fin Or_BOAnullOrder.AdjustProgramming', 15);

    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
        RAISE;
      WHEN OTHERS THEN
        ERRORS.SETERROR;
        RAISE EX.CONTROLLED_ERROR;
    END ADJUSTPROGRAMMING;

  BEGIN
    UT_TRACE.TRACE('Inicia Or_BOAnullOrder.AnullActivities', 15);

    IF (INUPACKAGEID IS NOT NULL) THEN
      OR_BCORDERACTIVITIES.GETPENDORDACTBYPACK(INUPACKAGEID,
                                               OTBORDERACTIVITIES);
    ELSIF (INUMOTIVEID IS NOT NULL) THEN
      OR_BCORDERACTIVITIES.GETPENDORDACTBYMOT(INUMOTIVEID,
                                              OTBORDERACTIVITIES);
    ELSIF (INUCOMPONENT IS NOT NULL) THEN
      OR_BCORDERACTIVITIES.GETPENDORDACTBYCOMP(INUCOMPONENT,
                                               OTBORDERACTIVITIES);
    END IF;

    IF (OTBORDERACTIVITIES.COUNT > 0) THEN
      NUINDEX := OTBORDERACTIVITIES.FIRST;

      WHILE NUINDEX IS NOT NULL
      LOOP
        BLISANULL := TRUE;
        
        RCACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(OTBORDERACTIVITIES(NUINDEX)
                                                       .NUORDERACTIVITY);
        IF (OTBORDERACTIVITIES(NUINDEX).NUORDERID IS NOT NULL) THEN
            
            IF (NOT TBORDERS.EXISTS(OTBORDERACTIVITIES(NUINDEX).NUORDERID)) THEN
              
              IF (DAOR_TASK_TYPE.FSBGETIS_ANULL(DAOR_ORDER.FNUGETTASK_TYPE_ID(OTBORDERACTIVITIES(NUINDEX).NUORDERID)) = GE_BOCONSTANTS.CSBNO) THEN
                
                BLISANULL := FALSE;
              ELSE
                TBORDERS(OTBORDERACTIVITIES(NUINDEX).NUORDERID) := OTBORDERACTIVITIES(NUINDEX).NUORDERID;
              END IF;
            END IF;

            IF (BLISANULL) THEN
              
              IF (DAOR_ORDER.FNUGETORDER_STATUS_ID(RCACTIVITY.ORDER_ID) = OR_BOCONSTANTS.CNUORDER_STAT_EXECUTED) THEN

                DAOR_ORDER_ACTIVITY.UPDINSTANCE_ID(RCACTIVITY.ORDER_ACTIVITY_ID,NULL);
              ELSE
                IF (OR_BOVALIDATOR.FSBCANBEANNULED(OTBORDERACTIVITIES(NUINDEX).NUORDERID) =GE_BOCONSTANTS.CSBYES) THEN
                  
                  ANULLACTIVITY(RCACTIVITY);
                END IF;
              END IF;
            END IF;
        ELSE
            ANULLACTIVITY(RCACTIVITY);
        END IF;

        
        IF (IBLNOTIFYWF) THEN
          TRYNOTIFYWFBYANULL(RCACTIVITY.ORDER_ID, RCACTIVITY.INSTANCE_ID);
        END IF;

        NUINDEX := OTBORDERACTIVITIES.NEXT(NUINDEX);
      END LOOP;
    END IF;

    
    IF (TBORDERS.COUNT > 0) THEN
      NUINDEX := TBORDERS.FIRST;

      WHILE NUINDEX IS NOT NULL
      LOOP
        
        IF (OR_BOVALIDATOR.FSBCANBEANNULED(NUINDEX) = GE_BOCONSTANTS.CSBYES) THEN
          
          OR_BCORDERACTIVITIES.GETPENDACTBYORDER( NUINDEX, TBORDERACTIVITIES );

          
          IF TBORDERACTIVITIES.FIRST IS NULL THEN
              OR_BOANULLORDER.ANULLORDER(NUINDEX, NUERR, SBERR);
          ELSE
              
              
              ADJUSTPROGRAMMING(NUINDEX);
          END IF;
        END IF;
        NUINDEX := TBORDERS.NEXT(NUINDEX);
      END LOOP;
    END IF;

    UT_TRACE.TRACE('Finaliza Or_BOAnullOrder.AnullActivities', 15);
  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR', 15);
      RAISE;

    WHEN OTHERS THEN
      UT_TRACE.TRACE('Error : OTHERS', 15);
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END ANULLACTIVITIES;

  




















  PROCEDURE ANULLORDERWITHOUTVAL(INUORDERID IN OR_ORDER.ORDER_ID%TYPE,
                                 IDTCHANGEDATE IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL)
  IS
    RCORDER DAOR_ORDER.STYOR_ORDER;
    NUERR   GE_ERROR_LOG.MESSAGE_ID%TYPE;
    SBERR   GE_ERROR_LOG.DESCRIPTION%TYPE;
    SBASSIGNTYPE        OR_OPERATING_UNIT.ASSIGN_TYPE%TYPE;
    CSBSCHED_ASS_TYPE   CONSTANT VARCHAR2(1) := 'S';
    BLTOP               BOOLEAN := TRUE;

  BEGIN
    UT_TRACE.TRACE('Inicia Or_BOAnullOrder.AnullOrderWithOutVal', 15);

    
    RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);

    
    ANULLORDERRECORD(RCORDER, NUERR, SBERR);
    ERRORS.CHECKERROR(NUERR);

    
    FINISHANULLORDERRECORD(RCORDER, NUERR, SBERR,NULL,IDTCHANGEDATE);
    ERRORS.CHECKERROR(NUERR);
    
    SBASSIGNTYPE := CSBSCHED_ASS_TYPE;
    IF (RCORDER.OPERATING_UNIT_ID IS NOT NULL) THEN

        SBASSIGNTYPE := DAOR_OPERATING_UNIT.FSBGETASSIGN_TYPE(RCORDER.OPERATING_UNIT_ID);

    END IF;

    IF(SBASSIGNTYPE = CSBSCHED_ASS_TYPE) THEN
        
        BLTOP := FALSE;
    END IF;

    
    
    IF BLTOP THEN

        
        
        DECREASECONTASSIVAL
        (
            RCORDER
        );

    END IF;

    UT_TRACE.TRACE('Finaliza Or_BOAnullOrder.AnullOrderWithOutVal', 15);
  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR', 15);
      RAISE;

    WHEN OTHERS THEN
      UT_TRACE.TRACE('Error : others', 15);
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END;

  












  FUNCTION FSBGETISAMOUNTTOANULACT(INUAMOUNTTOLEG IN OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE)
    RETURN VARCHAR2 IS

  BEGIN
    IF (INUAMOUNTTOLEG = OR_BOCONSTANTS.CNUANULACTIVITY) THEN
      RETURN OR_BOCONSTANTS.CSBSI;
    ELSE
      RETURN OR_BOCONSTANTS.CSBNO;
    END IF;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END FSBGETISAMOUNTTOANULACT;

  












  FUNCTION FSBGETISANULACT(INUACTIVITYID IN OR_ORDER_ACTIVITY.ACTIVITY_ID%TYPE)
    RETURN VARCHAR2 IS

  BEGIN
    IF (NVL(DAOR_ACTIVIDAD.FSBGETANULABLE(INUACTIVITYID),
            OR_BOCONSTANTS.CSBNO) = OR_BOCONSTANTS.CSBSI) THEN
      RETURN OR_BOCONSTANTS.CSBSI;
    ELSE
      RETURN OR_BOCONSTANTS.CSBNO;
    END IF;

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;

  END FSBGETISANULACT;

  



  PROCEDURE ANULLORDERACTIVITY(INUORDERACTIVITYID IN OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE) IS
    RCORDERACTIVITY DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
  BEGIN

    UT_TRACE.TRACE('INICIO - Or_BOAnullOrder.anullOrderActivity - inuOrderActivityId [' ||
                   INUORDERACTIVITYID || ']',
                   15);

    DAOR_ORDER_ACTIVITY.ACCKEY(INUORDERACTIVITYID);

    RCORDERACTIVITY := DAOR_ORDER_ACTIVITY.FRCGETRECORD(INUORDERACTIVITYID);

    ANULLACTIVITY(RCORDERACTIVITY);

    UT_TRACE.TRACE('FIN - Or_BOAnullOrder.anullOrderActivity', 15);

  EXCEPTION
    WHEN EX.CONTROLLED_ERROR THEN
      RAISE EX.CONTROLLED_ERROR;
    WHEN OTHERS THEN
      ERRORS.SETERROR;
      RAISE EX.CONTROLLED_ERROR;
  END;

END OR_BOANULLORDER;