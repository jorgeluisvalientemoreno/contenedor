PACKAGE GE_BOStatementExplainPlan   AS

























    
    
    

    
    
    
    
    
    
    FUNCTION FSBVERSION RETURN VARCHAR2;
    
    




















    PROCEDURE VALIDATEFULLSCAN
    (
        ISBSTATEMENT        IN VARCHAR2
    );

    
























    PROCEDURE GETCOLUMNSTYPE
    (
        ISBSQLSTATEMENT     IN      VARCHAR2,
        ORFATTRIBUTESTYPE   OUT     CONSTANTS.TYREFCURSOR
    );

END GE_BOSTATEMENTEXPLAINPLAN;

PACKAGE GE_BOStatementExplainPlan   AS

























    
    
    

    
    
    
    
    
    
    FUNCTION FSBVERSION RETURN VARCHAR2;
    
    




















    PROCEDURE VALIDATEFULLSCAN
    (
        ISBSTATEMENT        IN VARCHAR2
    );

    
























    PROCEDURE GETCOLUMNSTYPE
    (
        ISBSQLSTATEMENT     IN      VARCHAR2,
        ORFATTRIBUTESTYPE   OUT     CONSTANTS.TYREFCURSOR
    );

END GE_BOSTATEMENTEXPLAINPLAN;
/
PACKAGE BODY GE_BOStatementExplainPlan AS

















    
    
    
    
    CNUMESS_COLUMNS CONSTANT NUMBER(4) := 2515;
    
    
    CSBVERSION VARCHAR2(24) := 'SAO207256';
    
    
    
    
    TYPE TYTBATTRIBUTESTYPE IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
    GTBATTRIBUTETYPE  TYTBATTRIBUTESTYPE;
    
    CURSOR CUATTRIBUTESTYPE IS
    SELECT INTERNAL_TYPE, DESCRIPTION
    FROM   GE_ATTRIBUTES_TYPE;
    
    
    
    
    
    FUNCTION FSBVERSION RETURN VARCHAR2 IS
    BEGIN
        RETURN  CSBVERSION;
    END FSBVERSION;

    














    PROCEDURE FILLINTERNALTABLE
    IS
    BEGIN
    
        IF GTBATTRIBUTETYPE.COUNT = 0 THEN
        
            FOR RCATTRIBUTESTYPE IN CUATTRIBUTESTYPE LOOP
            
                GTBATTRIBUTETYPE(RCATTRIBUTESTYPE.INTERNAL_TYPE) := RCATTRIBUTESTYPE.DESCRIPTION;
            
            END LOOP;
        
        END IF;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
        	IF CUATTRIBUTESTYPE%ISOPEN THEN
        		CLOSE CUATTRIBUTESTYPE;
        	END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
        	IF CUATTRIBUTESTYPE%ISOPEN THEN
        		CLOSE CUATTRIBUTESTYPE;
        	END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FILLINTERNALTABLE;
    
    
    
    PROCEDURE SELINDEXCOLUMNS
    (
        ISBTABLENAME IN VARCHAR2,
        IOSBCOLUMNS  IN OUT VARCHAR2
    )
    IS
        CURSOR CUUSERINDCOLUMNS
        (
            ISBTABLE IN VARCHAR2
        )
        IS
        SELECT UNIQUE(COLUMN_NAME) COLUMN_NAME
          FROM USER_IND_COLUMNS
         WHERE TABLE_NAME = ISBTABLE;
         SBCOLUMNNAME GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE;
         CSBCOLON CONSTANT VARCHAR2(2) := ', ';
         RCCOLUMNNAME CUUSERINDCOLUMNS%ROWTYPE;
         SBSTRING VARCHAR2(1000);
         RCENTITYATTRIBUTES DAGE_ENTITY_ATTRIBUTES.STYGE_ENTITY_ATTRIBUTES;
    BEGIN
        
        
        FOR RCCOLUMNNAME IN CUUSERINDCOLUMNS(ISBTABLENAME)
        LOOP
            IF IOSBCOLUMNS IS NOT NULL THEN
                IOSBCOLUMNS := IOSBCOLUMNS||CSBCOLON;
            END IF;
            



            RCENTITYATTRIBUTES := GE_BOENTITYATTRIBUTES.FRCGETENTITYATRIBUTES(ISBTABLENAME,RCCOLUMNNAME.COLUMN_NAME);
            SBSTRING := RCENTITYATTRIBUTES.DISPLAY_NAME;
            IOSBCOLUMNS := IOSBCOLUMNS ||TRIM(SBSTRING);
        END LOOP;

        IF CUUSERINDCOLUMNS%ISOPEN THEN
            CLOSE CUUSERINDCOLUMNS;
        END IF;
		
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
			IF CUUSERINDCOLUMNS%ISOPEN THEN
				CLOSE CUUSERINDCOLUMNS;
			END IF;
            RAISE;
        WHEN OTHERS THEN
			IF CUUSERINDCOLUMNS%ISOPEN THEN
				CLOSE CUUSERINDCOLUMNS;
			END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    PROCEDURE VALIDATEFULLSCAN
    (
        ISBSTATEMENT        IN VARCHAR2
    )
    IS
        SBWHERE VARCHAR2(100) := 'OPTIONS like '||CHR(39)||CHR(37)||'FULL'||CHR(37)||CHR(39)||
                                 'AND OPERATION = '||CHR(39)||'TABLE ACCESS'||CHR(39);
        TYRFEXPLAINPLAN CONSTANTS.TYREFCURSOR;
        RCEXPLAINPLAN GE_EXPLAIN_PLAN%ROWTYPE;
        HAVEFULLSCANNOTALLOWED BOOLEAN := FALSE;
    BEGIN
        
        UT_TRACE.TRACE(ISBSTATEMENT,10);
        
        DELETE GE_EXPLAIN_PLAN;
        
        
        UT_STATEMENT.CREATEEXPLAINTPLAN(ISBSTATEMENT);
        
        
        
        TYRFEXPLAINPLAN := UT_STATEMENT.FRFGETEXPLAINPLAN (SBWHERE);
        
        HAVEFULLSCANNOTALLOWED := FALSE;
        LOOP
            FETCH TYRFEXPLAINPLAN INTO RCEXPLAINPLAN;
            
            EXIT WHEN TYRFEXPLAINPLAN%NOTFOUND;
            
            
            IF ( NOT GE_BOENTITY.FBLISALLOWEDFULLSCAN(RCEXPLAINPLAN.OBJECT_NAME) ) THEN
                
                HAVEFULLSCANNOTALLOWED := TRUE;
                
            END IF;
            
            
        END LOOP;

        
        
        IF  ( HAVEFULLSCANNOTALLOWED ) THEN
            ERRORS.SETERROR(CNUMESS_COLUMNS);
            RAISE EX.CONTROLLED_ERROR;
        END IF;

        IF TYRFEXPLAINPLAN%ISOPEN THEN
            CLOSE TYRFEXPLAINPLAN;
        END IF;

        DELETE GE_EXPLAIN_PLAN;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF TYRFEXPLAINPLAN%ISOPEN THEN
                CLOSE TYRFEXPLAINPLAN;
            END IF;
            DELETE GE_EXPLAIN_PLAN;
            RAISE;
        WHEN OTHERS THEN
            IF TYRFEXPLAINPLAN%ISOPEN THEN
                CLOSE TYRFEXPLAINPLAN;
            END IF;
            DELETE GE_EXPLAIN_PLAN;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
























    PROCEDURE GETCOLUMNSTYPE
    (
        ISBSQLSTATEMENT     IN      VARCHAR2,
        ORFATTRIBUTESTYPE   OUT     CONSTANTS.TYREFCURSOR
    )
    IS
        NUCURSORID          NUMBER;
        NUCOLUMNCOUNT       NUMBER;
        NUTABLEINDEX        NUMBER;
        COLUMNTABLE         DBMS_SQL.DESC_TAB;
        TBLISTCOLUMNSTYPE   GE_TYTBSTRING;
    BEGIN
    
        FILLINTERNALTABLE;
        



        NUCURSORID := DBMS_SQL.OPEN_CURSOR;
        DBMS_SQL.PARSE(NUCURSORID, ISBSQLSTATEMENT, DBMS_SQL.NATIVE);
        DBMS_SQL.DESCRIBE_COLUMNS(NUCURSORID, NUCOLUMNCOUNT, COLUMNTABLE);
        DBMS_SQL.CLOSE_CURSOR(NUCURSORID);

        IF(COLUMNTABLE.FIRST IS NOT NULL)THEN
        
            NUTABLEINDEX := COLUMNTABLE.FIRST;
            TBLISTCOLUMNSTYPE := GE_TYTBSTRING();
            LOOP
            
                




                EXIT WHEN NUTABLEINDEX IS NULL;
                
                TBLISTCOLUMNSTYPE.EXTEND(1);
                
    		    TBLISTCOLUMNSTYPE(TBLISTCOLUMNSTYPE.COUNT) := NUTABLEINDEX	|| '|'||
    												GTBATTRIBUTETYPE(COLUMNTABLE(NUTABLEINDEX).COL_TYPE);
                NUTABLEINDEX := COLUMNTABLE.NEXT(NUTABLEINDEX);
            
            END LOOP;

            OPEN ORFATTRIBUTESTYPE FOR
                   SELECT UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',1) COLUMN_POSITION,
                          UT_STRING.EXTSTRFIELD(COLUMN_VALUE,'|',2) COLUMN_TYPE
                   FROM TABLE(CAST(TBLISTCOLUMNSTYPE AS GE_TYTBSTRING)) A;
        
        END IF;
    
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GR_BOOBJECT.CLOSE(NUCURSORID);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GR_BOOBJECT.CLOSE(NUCURSORID);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

END GE_BOSTATEMENTEXPLAINPLAN;