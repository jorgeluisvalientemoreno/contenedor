
CREATE OR REPLACE PACKAGE IN_BOINSTANCEGENERAL IS
   SUBTYPE STYIN_INTERFACE_MESSAGE IS DAIN_INTERFACE_MESSAGE.STYIN_INTERFACE_MESSAGE;
   PROCEDURE CLEARMEMORY;
   PROCEDURE SETORIGINRESPONSE( INUGLOBALREQUESTNUMBERORIGIN IN IN_INTERFACE_HISTORY.REQUEST_NUMBER_ORIGI%TYPE, INUGLOBALANSWERMESSAGECODE IN IN_INTERFACE_HISTORY.MESS_CODE_ERROR_ORIG%TYPE, ISBGLOBALANSWERMESSAGE IN IN_INTERFACE_HISTORY.MESS_DESC_ERROR_ORIG%TYPE );
   PROCEDURE GETREQUESTNUMBERORIGIN( ONUGLOBALREQUESTNUMBERORIGIN OUT IN_INTERFACE_HISTORY.REQUEST_NUMBER_ORIGI%TYPE );
   PROCEDURE GETANSWERMESSAGECODE( ONUGLOBALANSWERMESSAGECODE OUT IN_INTERFACE_HISTORY.MESS_CODE_ERROR_ORIG%TYPE );
   PROCEDURE GETANSWERMESSAGE( OSBGLOBALANSWERMESSAGE OUT IN_INTERFACE_HISTORY.MESS_DESC_ERROR_ORIG%TYPE );
   PROCEDURE SETTRANSITION( INUACTION IN IN_STATUS_TRANSITION.ACTION_ID%TYPE, INUINITIALSTATUS IN IN_INITI_STATU_ACTIO.INITIAL_STATUS_ID%TYPE );
   PROCEDURE SETERRORMESSAGE( INUERRORCODE IN NUMBER, ISBERRORMESSAGE IN VARCHAR2 );
   PROCEDURE GETTRANSITION( ONUACTION OUT IN_STATUS_TRANSITION.ACTION_ID%TYPE, ONUINITIALSTATUS OUT IN_INITI_STATU_ACTIO.INITIAL_STATUS_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 );
   PROCEDURE GETACTION( ONUACTION OUT IN_STATUS_TRANSITION.ACTION_ID%TYPE );
   PROCEDURE GETERROR( ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 );
   PROCEDURE SETRECORDINTERFACEMESSAGE( INUINTERFACEMESSAGE IN IN_INTERFACE_MESSAGE.INTERFACE_MESSAGE_ID%TYPE );
   PROCEDURE SETRECORDINTERFACEMESSAGE( IRCINTERFACEMESSAGE IN STYIN_INTERFACE_MESSAGE );
   PROCEDURE GETRECORDINTERFACEMESSAGE( ORCINTERFACEMESSAGE OUT STYIN_INTERFACE_MESSAGE );
   PROCEDURE SETMESSAGEHISTORY( INUMESSAGEHISTORYID IN IN_INTERFACE_HISTORY.ASSOC_INTER_HISTO_ID%TYPE, INUCURRENTSTATUS IN IN_STATUS.STATUS_ID%TYPE );
   PROCEDURE SETMESSAGESTRUCT( ITYOBMESSAGESTRUCT IN OUT IN_TYOBMESSAGESTRUCT );
   PROCEDURE GETMESSAGESTRUCT( OTYOBMESSAGESTRUCT OUT IN_TYOBMESSAGESTRUCT, ONUMESSAGEHISTORYID OUT IN_INTERFACE_HISTORY.ASSOC_INTER_HISTO_ID%TYPE, ONUCURRENTSTATUS OUT IN_STATUS.STATUS_ID%TYPE );
   PROCEDURE SETEXECWITHDOM( INUDOMID IN NUMBER, INUVALIDADOCUMESELECT IN IN_INTERFACE_HISTORY.VALIDA_DOCUME_SELECT%TYPE );
   PROCEDURE GETDOM_ID( ONUDOMID OUT NUMBER );
   PROCEDURE GETPACKAGETYPE( ONUVALIDADOCUMESELECT OUT IN_INTERFACE_HISTORY.VALIDA_DOCUME_SELECT%TYPE );
   PROCEDURE SETINTERFACEDATA( ISBINTERFACEDATA IN IN_INTERFACE_HISTORY.INTERFACE_DATA%TYPE );
   PROCEDURE SETINTERFACEDATA( IOCLINTERFACEDATA_C IN OUT IN_INTERFACE_HISTORY.INTERFACE_DATA_C%TYPE );
   PROCEDURE GETINTERFACEDATA( OSBINTERFACEDATA OUT IN_INTERFACE_HISTORY.INTERFACE_DATA%TYPE );
   PROCEDURE GETINTERFACEDATA( IOCLINTERFACEDATA OUT IN_INTERFACE_HISTORY.INTERFACE_DATA_C%TYPE );
   PROCEDURE SETGLOBALRULEEXECOK( IBLGLOBALRULEEXECOK IN BOOLEAN );
   PROCEDURE GETGLOBALRULEEXECOK( OBLGLOBALRULEEXECOK OUT BOOLEAN );
   PROCEDURE SETGLOBALRESPONSEERROR( IBLGLOBALRESPONSEERROR IN BOOLEAN );
   PROCEDURE GETGLOBALRESPONSEERROR( OBLGLOBALRESPONSEERROR OUT BOOLEAN );
   PROCEDURE SETOPERAMODEPROCESS( INUOPERAMODEPROCESS IN IN_OPERATION_MODE.OPERATION_MODE_ID%TYPE );
   PROCEDURE GETOPERAMODEPROCESS( ONUOPERAMODEPROCESS OUT IN_OPERATION_MODE.OPERATION_MODE_ID%TYPE );
   PROCEDURE SETDATACONTENTTYPE( ISBDATATYPE IN VARCHAR2, ISBCONTENTTYPE IN IN_INTERFACE_MESSAGE.CONTENT_TYPE%TYPE );
   PROCEDURE GETDATATYPE( OSBDATATYPE OUT VARCHAR2 );
   PROCEDURE GETCONTENTTYPE( OSBCONTENTTYPE OUT IN_INTERFACE_MESSAGE.CONTENT_TYPE%TYPE );
   PROCEDURE SETREQUEST( INUGLOBALREQUESTNUMBERORIGIN IN IN_INTERFACE_HISTORY.REQUEST_NUMBER_ORIGI%TYPE );
   PROCEDURE GETREQUEST( ONUGLOBALREQUESTNUMBERORIGIN OUT IN_INTERFACE_HISTORY.REQUEST_NUMBER_ORIGI%TYPE );
   PROCEDURE SETORIGINMODULE( INUORIGINMODULE IN IN_INTERFACE_MESSAGE.ORIGIN_MODULE_ID%TYPE );
   PROCEDURE GETORIGINMODULE( ONUORIGINMODULE OUT IN_INTERFACE_MESSAGE.ORIGIN_MODULE_ID%TYPE );
END IN_BOINSTANCEGENERAL;
/


CREATE OR REPLACE PACKAGE BODY IN_BOINSTANCEGENERAL IS
   CNUNOT_INSTACE_TRANSITION CONSTANT NUMBER( 4 ) := 4331;
   CNUNOT_INSTACE_ACTION CONSTANT NUMBER( 4 ) := 2060;
   CNUNOT_EXIST_INS_INTER_MESSA CONSTANT NUMBER( 4 ) := 3959;
   CNUNOT_EXIST_INTER_MESSA CONSTANT NUMBER( 4 ) := 4291;
   CNUNOT_EXIST_INS_STRUCT CONSTANT NUMBER( 4 ) := 3990;
   CNUNOT_EXIST_DOM CONSTANT NUMBER( 4 ) := 4450;
   CNUNOT_EXIST_PACKAGE_TYPE CONSTANT NUMBER( 4 ) := 7771;
   CNUNOT_EXIST_INTERFACE_DATA CONSTANT NUMBER( 4 ) := 4451;
   CNUNOT_EXIST_RESPONSE_ORIGIN CONSTANT NUMBER( 4 ) := 6110;
   CNUNOT_EXIST_OPERA_MODE_PROCE CONSTANT NUMBER( 4 ) := 7952;
   CNUNOT_EXIST_DATA_TYPE CONSTANT NUMBER( 4 ) := 8112;
   CNUNOT_EXIST_CONTENT_TYPE CONSTANT NUMBER( 4 ) := 8113;
   CNUNOT_EXIST_REQUEST CONSTANT NUMBER( 4 ) := 9291;
   CNUNOT_EXIST_ORIGIN_MODULE CONSTANT NUMBER( 4 ) := 1240;
   NUACTION IN_STATUS_TRANSITION.ACTION_ID%TYPE;
   NUINITIALSTATUS IN_INITI_STATU_ACTIO.INITIAL_STATUS_ID%TYPE;
   NUERRORCODE NUMBER;
   SBERRORMESSAGE VARCHAR2( 2000 );
   RCINTERFACEMESSAGE STYIN_INTERFACE_MESSAGE;
   NUMESSAGEHISTORYID IN_INTERFACE_HISTORY.ASSOC_INTER_HISTO_ID%TYPE;
   TYOBMESSAGESTRUCT IN_TYOBMESSAGESTRUCT;
   NUDOMID NUMBER;
   NUVALIDADOCUMESELECT IN_INTERFACE_HISTORY.VALIDA_DOCUME_SELECT%TYPE;
   SBINTERFACEDATA IN_INTERFACE_HISTORY.INTERFACE_DATA%TYPE;
   CLINTERFACEDATA IN_INTERFACE_HISTORY.INTERFACE_DATA_C%TYPE;
   NUCURRENTSTATUS IN_STATUS.STATUS_ID%TYPE;
   NUOPERAMODEPROCESS IN_OPERATION_MODE.OPERATION_MODE_ID%TYPE;
   SBDATATYPE VARCHAR2( 1 );
   SBCONTENTTYPE IN_INTERFACE_MESSAGE.CONTENT_TYPE%TYPE;
   BLGLOBALRULEEXECOK BOOLEAN;
   BLGLOBALRESPONSEERROR BOOLEAN;
   NUGLOBALREQUESTNUMBERORIGIN IN_INTERFACE_HISTORY.REQUEST_NUMBER_ORIGI%TYPE;
   NUGLOBALANSWERMESSAGECODE IN_INTERFACE_HISTORY.MESS_CODE_ERROR_ORIG%TYPE;
   SBGLOBALANSWERMESSAGE IN_INTERFACE_HISTORY.MESS_DESC_ERROR_ORIG%TYPE;
   NUORIGINMODULE IN_INTERFACE_MESSAGE.ORIGIN_MODULE_ID%TYPE;
   PROCEDURE CLEARMEMORY
    IS
      TYOBMESSAGESTRUCTNULL IN_TYOBMESSAGESTRUCT;
      RCINTERFACEMESSAGENULL STYIN_INTERFACE_MESSAGE;
    BEGIN
      RCINTERFACEMESSAGE := RCINTERFACEMESSAGENULL;
      TYOBMESSAGESTRUCT := TYOBMESSAGESTRUCTNULL;
      NUACTION := NULL;
      NUINITIALSTATUS := NULL;
      NUERRORCODE := NULL;
      SBERRORMESSAGE := NULL;
      RCINTERFACEMESSAGE := NULL;
      NUMESSAGEHISTORYID := NULL;
      NUDOMID := NULL;
      NUVALIDADOCUMESELECT := NULL;
      SBINTERFACEDATA := NULL;
      NUCURRENTSTATUS := NULL;
      NUOPERAMODEPROCESS := NULL;
      SBDATATYPE := NULL;
      SBCONTENTTYPE := NULL;
      BLGLOBALRULEEXECOK := NULL;
      BLGLOBALRESPONSEERROR := NULL;
      SBGLOBALANSWERMESSAGE := NULL;
      NUORIGINMODULE := NULL;
      NUGLOBALREQUESTNUMBERORIGIN := NULL;
      NUGLOBALANSWERMESSAGECODE := NULL;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END CLEARMEMORY;
   PROCEDURE SETORIGINRESPONSE( INUGLOBALREQUESTNUMBERORIGIN IN IN_INTERFACE_HISTORY.REQUEST_NUMBER_ORIGI%TYPE, INUGLOBALANSWERMESSAGECODE IN IN_INTERFACE_HISTORY.MESS_CODE_ERROR_ORIG%TYPE, ISBGLOBALANSWERMESSAGE IN IN_INTERFACE_HISTORY.MESS_DESC_ERROR_ORIG%TYPE )
    IS
    BEGIN
      NUGLOBALREQUESTNUMBERORIGIN := INUGLOBALREQUESTNUMBERORIGIN;
      NUGLOBALANSWERMESSAGECODE := INUGLOBALANSWERMESSAGECODE;
      SBGLOBALANSWERMESSAGE := ISBGLOBALANSWERMESSAGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETORIGINRESPONSE;
   PROCEDURE GETREQUESTNUMBERORIGIN( ONUGLOBALREQUESTNUMBERORIGIN OUT IN_INTERFACE_HISTORY.REQUEST_NUMBER_ORIGI%TYPE )
    IS
    BEGIN
      IF ( NUGLOBALREQUESTNUMBERORIGIN IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_RESPONSE_ORIGIN );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      ONUGLOBALREQUESTNUMBERORIGIN := NUGLOBALREQUESTNUMBERORIGIN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETREQUESTNUMBERORIGIN;
   PROCEDURE GETANSWERMESSAGECODE( ONUGLOBALANSWERMESSAGECODE OUT IN_INTERFACE_HISTORY.MESS_CODE_ERROR_ORIG%TYPE )
    IS
    BEGIN
      ONUGLOBALANSWERMESSAGECODE := NUGLOBALANSWERMESSAGECODE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETANSWERMESSAGECODE;
   PROCEDURE GETANSWERMESSAGE( OSBGLOBALANSWERMESSAGE OUT IN_INTERFACE_HISTORY.MESS_DESC_ERROR_ORIG%TYPE )
    IS
    BEGIN
      OSBGLOBALANSWERMESSAGE := SBGLOBALANSWERMESSAGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETANSWERMESSAGE;
   PROCEDURE SETRECORDINTERFACEMESSAGE( INUINTERFACEMESSAGE IN IN_INTERFACE_MESSAGE.INTERFACE_MESSAGE_ID%TYPE )
    IS
      RCINTERFACEMESSAGE_NULL STYIN_INTERFACE_MESSAGE;
    BEGIN
      RCINTERFACEMESSAGE := RCINTERFACEMESSAGE_NULL;
      IF NOT ( DAIN_INTERFACE_MESSAGE.FBLEXIST( INUINTERFACEMESSAGE ) ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_INTER_MESSA );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      RCINTERFACEMESSAGE := DAIN_INTERFACE_MESSAGE.FRCGETRECORD( INUINTERFACEMESSAGE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETRECORDINTERFACEMESSAGE;
   PROCEDURE SETRECORDINTERFACEMESSAGE( IRCINTERFACEMESSAGE IN STYIN_INTERFACE_MESSAGE )
    IS
      RCINTERFACEMESSAGE_NULL STYIN_INTERFACE_MESSAGE;
    BEGIN
      RCINTERFACEMESSAGE := RCINTERFACEMESSAGE_NULL;
      RCINTERFACEMESSAGE := IRCINTERFACEMESSAGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END SETRECORDINTERFACEMESSAGE;
   PROCEDURE GETRECORDINTERFACEMESSAGE( ORCINTERFACEMESSAGE OUT STYIN_INTERFACE_MESSAGE )
    IS
      RCINTERFACEMESSAGE_NULL STYIN_INTERFACE_MESSAGE;
    BEGIN
      IF ( RCINTERFACEMESSAGE.INTERFACE_MESSAGE_ID IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_INS_INTER_MESSA );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      ORCINTERFACEMESSAGE := IN_BOINSTANCEGENERAL.RCINTERFACEMESSAGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETRECORDINTERFACEMESSAGE;
   PROCEDURE SETTRANSITION( INUACTION IN IN_STATUS_TRANSITION.ACTION_ID%TYPE, INUINITIALSTATUS IN IN_INITI_STATU_ACTIO.INITIAL_STATUS_ID%TYPE )
    IS
    BEGIN
      NUACTION := INUACTION;
      NUINITIALSTATUS := INUINITIALSTATUS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETERRORMESSAGE( INUERRORCODE IN NUMBER, ISBERRORMESSAGE IN VARCHAR2 )
    IS
    BEGIN
      NUERRORCODE := INUERRORCODE;
      SBERRORMESSAGE := ISBERRORMESSAGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETTRANSITION( ONUACTION OUT IN_STATUS_TRANSITION.ACTION_ID%TYPE, ONUINITIALSTATUS OUT IN_INITI_STATU_ACTIO.INITIAL_STATUS_ID%TYPE, ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      IF ( NUACTION IS NULL OR NUINITIALSTATUS IS NULL OR NUERRORCODE IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_INSTACE_TRANSITION );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      ONUACTION := NUACTION;
      ONUINITIALSTATUS := NUINITIALSTATUS;
      ONUERRORCODE := NUERRORCODE;
      OSBERRORMESSAGE := SBERRORMESSAGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETACTION( ONUACTION OUT IN_STATUS_TRANSITION.ACTION_ID%TYPE )
    IS
    BEGIN
      IF ( NUACTION IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_INSTACE_ACTION );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      ONUACTION := NUACTION;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETERROR( ONUERRORCODE OUT NUMBER, OSBERRORMESSAGE OUT VARCHAR2 )
    IS
    BEGIN
      IF ( NUERRORCODE IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_INSTACE_TRANSITION );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      ONUERRORCODE := NUERRORCODE;
      OSBERRORMESSAGE := SBERRORMESSAGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETMESSAGEHISTORY( INUMESSAGEHISTORYID IN IN_INTERFACE_HISTORY.ASSOC_INTER_HISTO_ID%TYPE, INUCURRENTSTATUS IN IN_STATUS.STATUS_ID%TYPE )
    IS
    BEGIN
      NUMESSAGEHISTORYID := INUMESSAGEHISTORYID;
      NUCURRENTSTATUS := INUCURRENTSTATUS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETMESSAGESTRUCT( ITYOBMESSAGESTRUCT IN OUT IN_TYOBMESSAGESTRUCT )
    IS
    BEGIN
      IN_BOMESSAGESTRUCT.INITIALIZESTRUCT( TYOBMESSAGESTRUCT );
      TYOBMESSAGESTRUCT := ITYOBMESSAGESTRUCT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETMESSAGESTRUCT( OTYOBMESSAGESTRUCT OUT IN_TYOBMESSAGESTRUCT, ONUMESSAGEHISTORYID OUT IN_INTERFACE_HISTORY.ASSOC_INTER_HISTO_ID%TYPE, ONUCURRENTSTATUS OUT IN_STATUS.STATUS_ID%TYPE )
    IS
    BEGIN
      IF ( TYOBMESSAGESTRUCT.INTERFACE_MESSAGE_ID IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_INS_STRUCT );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      OTYOBMESSAGESTRUCT := TYOBMESSAGESTRUCT;
      ONUMESSAGEHISTORYID := NUMESSAGEHISTORYID;
      ONUCURRENTSTATUS := NUCURRENTSTATUS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETEXECWITHDOM( INUDOMID IN NUMBER, INUVALIDADOCUMESELECT IN IN_INTERFACE_HISTORY.VALIDA_DOCUME_SELECT%TYPE )
    IS
    BEGIN
      NUDOMID := INUDOMID;
      NUVALIDADOCUMESELECT := INUVALIDADOCUMESELECT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETDOM_ID( ONUDOMID OUT NUMBER )
    IS
    BEGIN
      IF ( NUDOMID IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_DOM );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      ONUDOMID := NUDOMID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETPACKAGETYPE( ONUVALIDADOCUMESELECT OUT IN_INTERFACE_HISTORY.VALIDA_DOCUME_SELECT%TYPE )
    IS
    BEGIN
      ONUVALIDADOCUMESELECT := NUVALIDADOCUMESELECT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETINTERFACEDATA( ISBINTERFACEDATA IN IN_INTERFACE_HISTORY.INTERFACE_DATA%TYPE )
    IS
    BEGIN
      SBINTERFACEDATA := NULL;
      SBINTERFACEDATA := ISBINTERFACEDATA;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETINTERFACEDATA( IOCLINTERFACEDATA_C IN OUT IN_INTERFACE_HISTORY.INTERFACE_DATA_C%TYPE )
    IS
    BEGIN
      CLINTERFACEDATA := EMPTY_CLOB();
      CLINTERFACEDATA := IOCLINTERFACEDATA_C;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETINTERFACEDATA( OSBINTERFACEDATA OUT IN_INTERFACE_HISTORY.INTERFACE_DATA%TYPE )
    IS
    BEGIN
      IF ( SBINTERFACEDATA IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_INTERFACE_DATA );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      OSBINTERFACEDATA := SBINTERFACEDATA;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETINTERFACEDATA( IOCLINTERFACEDATA OUT IN_INTERFACE_HISTORY.INTERFACE_DATA_C%TYPE )
    IS
    BEGIN
      IF ( UT_LOB.BLLOBCLOB_ISNULL( CLINTERFACEDATA ) ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_INTERFACE_DATA );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IOCLINTERFACEDATA := CLINTERFACEDATA;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETGLOBALRULEEXECOK( IBLGLOBALRULEEXECOK IN BOOLEAN )
    IS
    BEGIN
      BLGLOBALRULEEXECOK := IBLGLOBALRULEEXECOK;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETGLOBALRULEEXECOK( OBLGLOBALRULEEXECOK OUT BOOLEAN )
    IS
    BEGIN
      OBLGLOBALRULEEXECOK := BLGLOBALRULEEXECOK;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETGLOBALRESPONSEERROR( IBLGLOBALRESPONSEERROR IN BOOLEAN )
    IS
    BEGIN
      BLGLOBALRESPONSEERROR := IBLGLOBALRESPONSEERROR;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETGLOBALRESPONSEERROR( OBLGLOBALRESPONSEERROR OUT BOOLEAN )
    IS
    BEGIN
      OBLGLOBALRESPONSEERROR := BLGLOBALRESPONSEERROR;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETOPERAMODEPROCESS( INUOPERAMODEPROCESS IN IN_OPERATION_MODE.OPERATION_MODE_ID%TYPE )
    IS
    BEGIN
      NUOPERAMODEPROCESS := INUOPERAMODEPROCESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETOPERAMODEPROCESS( ONUOPERAMODEPROCESS OUT IN_OPERATION_MODE.OPERATION_MODE_ID%TYPE )
    IS
    BEGIN
      IF ( NUOPERAMODEPROCESS IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_OPERA_MODE_PROCE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      ONUOPERAMODEPROCESS := NUOPERAMODEPROCESS;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETDATACONTENTTYPE( ISBDATATYPE IN VARCHAR2, ISBCONTENTTYPE IN IN_INTERFACE_MESSAGE.CONTENT_TYPE%TYPE )
    IS
    BEGIN
      SBDATATYPE := ISBDATATYPE;
      SBCONTENTTYPE := ISBCONTENTTYPE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETDATATYPE( OSBDATATYPE OUT VARCHAR2 )
    IS
    BEGIN
      IF ( SBDATATYPE IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_DATA_TYPE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      OSBDATATYPE := SBDATATYPE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETCONTENTTYPE( OSBCONTENTTYPE OUT IN_INTERFACE_MESSAGE.CONTENT_TYPE%TYPE )
    IS
    BEGIN
      IF ( SBCONTENTTYPE IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_CONTENT_TYPE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      OSBCONTENTTYPE := SBCONTENTTYPE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETREQUEST( INUGLOBALREQUESTNUMBERORIGIN IN IN_INTERFACE_HISTORY.REQUEST_NUMBER_ORIGI%TYPE )
    IS
    BEGIN
      NUGLOBALREQUESTNUMBERORIGIN := INUGLOBALREQUESTNUMBERORIGIN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETREQUEST( ONUGLOBALREQUESTNUMBERORIGIN OUT IN_INTERFACE_HISTORY.REQUEST_NUMBER_ORIGI%TYPE )
    IS
    BEGIN
      IF ( NUGLOBALREQUESTNUMBERORIGIN IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_REQUEST );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      ONUGLOBALREQUESTNUMBERORIGIN := NUGLOBALREQUESTNUMBERORIGIN;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETORIGINMODULE( INUORIGINMODULE IN IN_INTERFACE_MESSAGE.ORIGIN_MODULE_ID%TYPE )
    IS
    BEGIN
      NUORIGINMODULE := INUORIGINMODULE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETORIGINMODULE( ONUORIGINMODULE OUT IN_INTERFACE_MESSAGE.ORIGIN_MODULE_ID%TYPE )
    IS
    BEGIN
      IF ( NUORIGINMODULE IS NULL ) THEN
         ERRORS.SETERROR( CNUNOT_EXIST_ORIGIN_MODULE );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      ONUORIGINMODULE := NUORIGINMODULE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END IN_BOINSTANCEGENERAL;
/


