
PACKAGE CC_BOSalesChannel
IS










































































































	

	

    
	FUNCTION FSBVERSION  RETURN VARCHAR2;
    
    





    PROCEDURE HASCHILDREN
    (
        INUSALECHANNEL     IN  GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        OSBHASSELLERS      OUT VARCHAR2,
        OSBHASCHILDCHANNEL OUT VARCHAR2
    );
    
    





























	FUNCTION FBLVALCHANNELBYPACK
	(
		INUPERSONID       IN  GE_PERSON.PERSON_ID%TYPE,
		ISBTAGNAME        IN  CC_PACK_TYPE_SALE_CANAL.TAG_NAME%TYPE
	)
	RETURN BOOLEAN;
	
    
















	PROCEDURE GETNEXTSALECHANNELID
	(
	    ONUSALECHANNELID OUT NUMBER
	);
	
    















	FUNCTION INTERNALCHANNEL(
	    INUSALECHANNELID  IN   GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
	) RETURN VARCHAR2 ;
	
    

    















	FUNCTION FRFGETSELLERS
    RETURN CC_BCSALESCHANNEL.TYRFSELLERS;


    
















    FUNCTION FRFGETPERSONALFROMORGAAREA
    (
        INUORGAAREAID IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN CC_BCSALESCHANNEL.TYRFSELLERS;

    
















    PROCEDURE DELSELLFROMSALESCHAN
    (
        INUPERSONID     IN GE_PERSON.PERSON_ID%TYPE,
        INUORGAAREAID   IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    );
    
    





















    FUNCTION FBLVALPACKSALCHANPR
    (
        INUORGAAREAID IN    GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        ISBTAGNAME    IN    CC_PACK_TYPE_SALE_CANAL.TAG_NAME%TYPE,
        INUPRODTYPE   IN    CC_PACK_TYPE_SALE_CANAL.PRODUCT_TYPE_ID%TYPE
    )
	RETURN BOOLEAN;

    




















    FUNCTION FRFPACKTYBYSELLER
    (
        INUPERSONID IN GE_PERSON.PERSON_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;
    
    
    





















    FUNCTION FBLVALPACKSELLERPROD
    (
        INUSELLERID   IN    CC_PACK_TYPE_SELLER.PERSON_ID%TYPE,
        ISBTAGNAME    IN    CC_PACK_TYPE_SELLER.TAG_NAME%TYPE,
        INUPRODTYPE   IN    CC_PACK_TYPE_SELLER.PRODUCT_TYPE_ID%TYPE
    )
	RETURN BOOLEAN;


    



















    PROCEDURE INSSELLERSALCHAN
    (
        INUORGAAREAID IN CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE,
        INUPERSONID   IN CC_ORGA_AREA_SELLER.PERSON_ID%TYPE
    );
    

    

















    FUNCTION FRFGETSALCHANALLCHILD
    (
        INUSALECHANID IN CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;




    
























    PROCEDURE DELPACKTYPESALECANAL
    (
        ISBTAGNAME          IN CC_COMMERCIAL_PLAN.TAG_NAME%TYPE,
        INUPRODTYPEID       IN CC_COMMERCIAL_PLAN.PRODUCT_TYPE_ID%TYPE,
        INUORGANIZATAREA    IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        INUPACKTYSALCAN     IN CC_PACK_TYPE_SALE_CANAL.PACK_TY_SALE_CANAL_ID%TYPE
    );
    

    























    PROCEDURE DELPACKTYPESELLER
    (
        ISBTAGNAME          IN CC_COMMERCIAL_PLAN.TAG_NAME%TYPE,
        INUPRODTYPEID       IN CC_COMMERCIAL_PLAN.PRODUCT_TYPE_ID%TYPE,
        INUPERSONID         IN GE_PERSON.PERSON_ID%TYPE,
        INUPACKTYSELLER     IN CC_PACK_TYPE_SELLER.PACK_TYPE_SELLER_ID%TYPE
    );

    




















    PROCEDURE INHFATHERPACKTYPES
    (
        INUNEWSALCANAL    IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        INUPARENTSALCAN   IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    );
    
    






















    PROCEDURE INSPACTTYFORSALECHAN
    (
        INUSALCANAL    IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        ISBTAGNAME     IN CC_PACK_TYPE_SALE_CANAL.TAG_NAME%TYPE,
        INUPRODTYPE    IN CC_PACK_TYPE_SALE_CANAL.PRODUCT_TYPE_ID%TYPE
    );

    
    

























    PROCEDURE DELINHPACKTYSALCANAL
    (
        ISBTAGNAME          IN CC_COMMERCIAL_PLAN.TAG_NAME%TYPE,
        INUPRODTYPEID       IN CC_COMMERCIAL_PLAN.PRODUCT_TYPE_ID%TYPE,
        INUORGANIZATAREA    IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        INUPACKTYSALCAN     IN CC_PACK_TYPE_SALE_CANAL.PACK_TY_SALE_CANAL_ID%TYPE
    );

    
    


















    FUNCTION FRFGETCHANNELSBYSELLER
    (
        INUSELLERID IN GE_PERSON.PERSON_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;
    
    
















    FUNCTION FRFGETSALECHANELS
    RETURN CONSTANTS.TYREFCURSOR;
    
    




















    PROCEDURE SETCHANNELASCURRENT
    (
        INUSELLERID          IN      GE_PERSON.PERSON_ID%TYPE,
        INUCHANNELID         IN      GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    );
    
    

















    FUNCTION FRFGETSUPERVFROMORGAREA
    (
        INUSALESCHANNID IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;


    

















    FUNCTION FRFGETSUPERVTOORGAREA
    (
        INUSALESCHANNID IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR;


    


















    PROCEDURE INSSUPERVTOORGAAREA
    (
        INUORGAAREAID IN GE_ORGA_AREA_SUPERV.ORGANIZAT_AREA_ID%TYPE,
        INUPERSONID   IN GE_ORGA_AREA_SUPERV.PERSON_ID%TYPE
    );


    

















    FUNCTION FRFGETSALCHORGAREATY
    RETURN CONSTANTS.TYREFCURSOR;
    
    

















    FUNCTION  FNUGETCHANNELINTTYPE
    RETURN NUMBER;
    
    
















    FUNCTION  FNUGETSALEPERSONTYPE
    RETURN NUMBER;
    
    
















    FUNCTION FRFGETORGAREABYSALESCHANEL
    RETURN CONSTANTS.TYREFCURSOR;
    
    
    PROCEDURE VALCHANNELANDSELLER
    (
        INUPERSONID     IN CC_ORGA_AREA_SELLER.PERSON_ID%TYPE,
        INUORGAREAID    IN CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE
    );
    
    

    


    PROCEDURE DELOPERUNIRECETYPE
    (
        INUOPERATINGUNIT     IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INURECEPTYPE         IN  OR_OPE_UNI_RECE_TYPE.RECEPTION_TYPE_ID%TYPE,
        INUOPERUNIDRECETYPE  IN  OR_OPE_UNI_RECE_TYPE.OPE_UNI_RECE_TYPE_ID%TYPE
    );
    
    
    


    PROCEDURE INSUNIOPETIPRECEPCION
    (
        INUOPERATINGUNIT     IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INURECEPTYPE         IN  OR_OPE_UNI_RECE_TYPE.RECEPTION_TYPE_ID%TYPE
    );

    PROCEDURE GETCOMMPLANSALESCHANNEL
    (
        INUSALESCHANNELID   IN  CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE,
        OCUCURSOR           OUT CONSTANTS.TYREFCURSOR
    );
    
    PROCEDURE SETCOMMPLANSALESCHANNEL
    (
        INUSALESCHANNELID       IN CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE,
        INUCOMMERCIALPLANID     IN CC_COM_PLAN_SALE_CHAN.COMMERCIAL_PLAN_ID%TYPE,
        ONUCOMMPLANSALCHANID    OUT CC_COM_PLAN_SALE_CHAN.COM_PLAN_SAL_CHAN_ID%TYPE
    );
    
    PROCEDURE UPDCOMMPLANSALESCHANNEL
    (
        INUCOMMPLANSALESCHANID  IN CC_COM_PLAN_SALE_CHAN.COM_PLAN_SAL_CHAN_ID%TYPE,
        INUSALESCHANNELID       IN CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE,
        INUCOMMERCIALPLANID     IN CC_COM_PLAN_SALE_CHAN.COMMERCIAL_PLAN_ID%TYPE
    );

    PROCEDURE DELCOMMPLANSALESCHANNEL
    (
        INUCOMMPLANSALESCHANID  IN CC_COM_PLAN_SALE_CHAN.COM_PLAN_SAL_CHAN_ID%TYPE
    );
    
    PROCEDURE COPYCONFIGSALESCHANNELCHILD
    (
        INUSALERCHANNELID  IN CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE
    );
    
    PROCEDURE GETCOMMERCIALPLANS
    (
        INUSALERCHANNELID  IN CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE,
        OTBCOMMERCIALPLANS OUT CC_BCSEGMENTCONSTANTS.TYTBCOMMERCIALPLANOFFER
    );
    
     PROCEDURE GETSALESCHANNELBYSELLER
    (
        INUPERSONID     GE_PERSON.PERSON_ID%TYPE,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    );
    
    FUNCTION FBOVALCHANNEL
    (
        INUORGAREAID IN  GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN BOOLEAN;
    
    PROCEDURE VALIDATECHANNEL
    (
        INUORGAREAID IN  GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    );
    
    PROCEDURE SETCURRENTSALECHANNEL;
    
    PROCEDURE INITCCCPAAFIELDS;

END CC_BOSALESCHANNEL;

PACKAGE BODY CC_BOSalesChannel
IS
    




























































































    
    CSBVERSION   CONSTANT VARCHAR2(20) := 'SAO207196';
    
    
    
    
    GNUSALECHANEORGAAREATYPE    GE_ORGANIZAT_AREA.ORGANIZAT_AREA_TYPE%TYPE;
	GNUSALECHANNELINTERNALTYPE  GE_ORGANIZAT_AREA.ORGANIZAT_AREA_TYPE%TYPE;
    GNUSALEPERSONTYPE           GE_PERSON.PERSONAL_TYPE%TYPE;

	
	CNUERROR_CANAL             CONSTANT NUMBER:= 832;
	
	CNUERROR_PACK_PROD_CANAL   CONSTANT NUMBER:= 116460;
	
	CNUERROR_PACK_PROD_SELLER  CONSTANT NUMBER:= 116540;
	
	CNUERR_SELLER_CHANNEL      CONSTANT NUMBER:= 5682;
	
    CNUNO_OPER_UNIT         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE := 902095;

	
	FUNCTION FSBVERSION  RETURN VARCHAR2  IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    


















	PROCEDURE LOADPARAMETERS
	IS
	BEGIN
	    GNUSALECHANEORGAAREATYPE := CC_BOCONSTANTS.CNUCHANNEL_INTERNAL;
	    GNUSALECHANNELINTERNALTYPE := CC_BOCONSTANTS.CNUCHANNEL_INTERNAL;
        GNUSALEPERSONTYPE := CC_BOCONSTANTS.CNUSELLERPERSONTYPE;
	EXCEPTION
	    WHEN EX.CONTROLLED_ERROR THEN
	        RAISE;
	    WHEN OTHERS THEN
	        ERRORS.SETERROR;
	        RAISE EX.CONTROLLED_ERROR;
	END LOADPARAMETERS;
	
    


























    PROCEDURE HASCHILDREN
    (
        INUSALECHANNEL     IN  GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        OSBHASSELLERS      OUT VARCHAR2,
        OSBHASCHILDCHANNEL OUT VARCHAR2
    )
    IS
        
        
        
        NUCOUNTER    NUMBER := 0;
        SBSQL        VARCHAR2(2000);
        RFCURSOR     CONSTANTS.TYREFCURSOR;
        
        CURSOR CU_SELLERS
        IS
           SELECT COUNT(*)
           FROM   GE_PERSON
           WHERE  ORGANIZAT_AREA_ID = INUSALECHANNEL;
    BEGIN
        OSBHASSELLERS := GE_BOCONSTANTS.CSBNO;
        OSBHASCHILDCHANNEL := GE_BOCONSTANTS.CSBNO;
        OPEN CU_SELLERS;
        FETCH CU_SELLERS INTO NUCOUNTER;
        CLOSE CU_SELLERS;
        IF (NUCOUNTER <> 0) THEN
            OSBHASSELLERS := GE_BOCONSTANTS.CSBYES;
        END IF;
        NUCOUNTER := 0;
        SBSQL := ' SELECT count(*) '||
                 ' FROM   Ge_Organizat_Area '||
                 ' WHERE  Organizat_Area_Type = :OrgaAreaType ';
        IF (INUSALECHANNEL IS NULL) THEN
            SBSQL := SBSQL || ' AND Geo_Area_Father_Id is null ';
            OPEN RFCURSOR FOR SBSQL USING GNUSALECHANEORGAAREATYPE;
        ELSE
            SBSQL := SBSQL || ' AND Geo_Area_Father_Id = :nuSaleChannel ';
            OPEN RFCURSOR FOR SBSQL USING GNUSALECHANEORGAAREATYPE,
                                          INUSALECHANNEL;
        END IF;
        FETCH RFCURSOR INTO NUCOUNTER;
        CLOSE RFCURSOR;
        IF (NUCOUNTER <> 0) THEN
            OSBHASCHILDCHANNEL := GE_BOCONSTANTS.CSBYES;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END HASCHILDREN;

	FUNCTION FBLVALCHANNELBYPACK
	(
		INUPERSONID       IN  GE_PERSON.PERSON_ID%TYPE,
        ISBTAGNAME        IN  CC_PACK_TYPE_SALE_CANAL.TAG_NAME%TYPE
	)
	RETURN BOOLEAN IS
		
		ORGANIZATIONID GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE;
		BLEXIST        BOOLEAN := TRUE;
	BEGIN
		
		ORGANIZATIONID := DAGE_PERSON.FNUGETORGANIZAT_AREA_ID(INUPERSONID);

		
		IF NOT (CC_BCSALESCHANNEL.FBLVALSALCHANBYPACK(ORGANIZATIONID,ISBTAGNAME)) THEN
			ERRORS.SETERROR(CNUERROR_CANAL, ORGANIZATIONID||'|'||ISBTAGNAME);
            RAISE EX.CONTROLLED_ERROR;
            RETURN (FALSE);
		ELSE
			RETURN(TRUE);
		END IF;		
						
		
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END FBLVALCHANNELBYPACK;
	
	
    PROCEDURE GETNEXTSALECHANNELID
	(
	    ONUSALECHANNELID OUT NUMBER
	)
	IS
	BEGIN
	    ONUSALECHANNELID := GE_BOSEQUENCE.NEXTGE_ORGANIZAT_AREA;
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END GETNEXTSALECHANNELID;

	FUNCTION INTERNALCHANNEL(
	    INUSALECHANNELID  IN   GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
	) RETURN VARCHAR2
	IS
	    NUTIPO  NUMBER;
	BEGIN
	
	    DAGE_ORGANIZAT_AREA.ACCKEY( INUSALECHANNELID );
	    
	    NUTIPO :=  DAGE_ORGANIZAT_AREA.FNUGETORGANIZAT_AREA_TYPE( INUSALECHANNELID );
	    
	    IF (NUTIPO =  GNUSALECHANNELINTERNALTYPE ) THEN
	        RETURN GE_BOCONSTANTS.CSBYES;
	    ELSE
	        RETURN GE_BOCONSTANTS.CSBNO;
	    END IF;
	    
	    
	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END INTERNALCHANNEL;	
	
	


	
  	FUNCTION FRFGETSELLERS
    RETURN CC_BCSALESCHANNEL.TYRFSELLERS
    IS
     RFSELLERS CC_BCSALESCHANNEL.TYRFSELLERS;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfGetSellers', 5);
        
        RFSELLERS := CC_BCSALESCHANNEL.FRFGETSELLERS;
        RETURN  RFSELLERS;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfGetSellers', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;
    


    
	


    
    FUNCTION FRFGETPERSONALFROMORGAAREA
    (
        INUORGAAREAID IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN CC_BCSALESCHANNEL.TYRFSELLERS
    IS
        
        
        
        RFPERSONCURSOR   CC_BCSALESCHANNEL.TYRFSELLERS;

    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfGetPersonalFromOrgaArea Canal ['||INUORGAAREAID||']', 5);
        
        RFPERSONCURSOR := CC_BCSALESCHANNEL.FRFGETSELLBYSALCHAN(INUORGAAREAID);
        RETURN  RFPERSONCURSOR;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfGetPersonalFromOrgaArea', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;


	



    PROCEDURE DELSELLFROMSALESCHAN
    (
        INUPERSONID     IN GE_PERSON.PERSON_ID%TYPE,
        INUORGAAREAID   IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    IS
        
        
        
        RFORGAAREASELLER   DACC_ORGA_AREA_SELLER.TYREFCURSOR;
        SBCRITERIA VARCHAR2(2000);
        RCORGAAREASELLER   DACC_ORGA_AREA_SELLER.STYCC_ORGA_AREA_SELLER;

    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.DelSellFromSalesChan Vendedor ['||INUPERSONID||'] Canal ['||INUORGAAREAID||']', 5);

        
        SBCRITERIA := 'Person_Id = '||INUPERSONID||' AND Organizat_Area_Id = '||INUORGAAREAID;
        UT_TRACE.TRACE('Criterio de consulta ['||SBCRITERIA||']', 6);

        RFORGAAREASELLER := DACC_ORGA_AREA_SELLER.FRFGETRECORDS(SBCRITERIA);
        
        
        FETCH RFORGAAREASELLER INTO RCORGAAREASELLER;

        
        IF RFORGAAREASELLER%FOUND THEN
            UT_TRACE.TRACE('Registro a borrar ['||RCORGAAREASELLER.ORGA_AREA_SELLER_ID||']', 6);
            DACC_ORGA_AREA_SELLER.DELRECORD(RCORGAAREASELLER.ORGA_AREA_SELLER_ID);
        END IF;
        
        CLOSE RFORGAAREASELLER;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.DelSellFromSalesChan', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;


    



    FUNCTION FBLVALPACKSALCHANPR
    (
        INUORGAAREAID IN    GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        ISBTAGNAME    IN    CC_PACK_TYPE_SALE_CANAL.TAG_NAME%TYPE,
        INUPRODTYPE   IN    CC_PACK_TYPE_SALE_CANAL.PRODUCT_TYPE_ID%TYPE
    )
	RETURN BOOLEAN
    IS
		
		BLEXIST        BOOLEAN := TRUE;
	BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.fblValPackSalChanPr Canal ['||INUORGAAREAID||'] Tag Name ['||ISBTAGNAME||'] Tipo Producto ['||INUPRODTYPE||']', 5);

		
		IF NOT (CC_BCSALESCHANNEL.FBLVALPACKSALCHANPR(INUORGAAREAID,ISBTAGNAME, INUPRODTYPE)) THEN
			ERRORS.SETERROR(CNUERROR_PACK_PROD_CANAL, ISBTAGNAME||'|'||INUORGAAREAID||'|'||INUPRODTYPE);
            RAISE EX.CONTROLLED_ERROR;
            RETURN (FALSE);
		ELSE
			RETURN(TRUE);
		END IF;

        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.fblValPackSalChanPr', 5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END FBLVALPACKSALCHANPR;

	



    FUNCTION FRFPACKTYBYSELLER
    (
        INUPERSONID IN GE_PERSON.PERSON_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        RFPACKTYBYSELLER   CONSTANTS.TYREFCURSOR;

    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfPackTyBySeller Vendedor ['||INUPERSONID||']', 5);
        
        RFPACKTYBYSELLER := CC_BCSALESCHANNEL.FRFPACKTYBYSELLER(INUPERSONID);
        RETURN  RFPACKTYBYSELLER;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfPackTyBySeller', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;


    



    FUNCTION FBLVALPACKSELLERPROD
    (
        INUSELLERID   IN    CC_PACK_TYPE_SELLER.PERSON_ID%TYPE,
        ISBTAGNAME    IN    CC_PACK_TYPE_SELLER.TAG_NAME%TYPE,
        INUPRODTYPE   IN    CC_PACK_TYPE_SELLER.PRODUCT_TYPE_ID%TYPE
    )
	RETURN BOOLEAN
    IS
		
		BLEXIST        BOOLEAN := TRUE;
	BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.fblValPackSellerProd Vendedor ['||INUSELLERID||'] Tag Name ['||ISBTAGNAME||'] Tipo Producto ['||INUPRODTYPE||']', 5);

		
		IF NOT (CC_BCSALESCHANNEL.FBLVALPACKSELLERPROD(INUSELLERID, ISBTAGNAME, INUPRODTYPE)) THEN
			ERRORS.SETERROR(CNUERROR_PACK_PROD_SELLER, ISBTAGNAME||'|'||INUSELLERID||'|'||INUPRODTYPE);
            RAISE EX.CONTROLLED_ERROR;
            RETURN (FALSE);
		ELSE
			RETURN(TRUE);
		END IF;

        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.fblValPackSellerProd', 5);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
	END FBLVALPACKSELLERPROD;



	


    PROCEDURE INSSELLERSALCHAN
    (
        INUORGAAREAID IN CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE,
        INUPERSONID   IN CC_ORGA_AREA_SELLER.PERSON_ID%TYPE
    )
    IS
        
        
        
        RCORGAAREASELLER    DACC_ORGA_AREA_SELLER.STYCC_ORGA_AREA_SELLER;
        NUNEXTORGAREASELLER CC_ORGA_AREA_SELLER.ORGA_AREA_SELLER_ID%TYPE;
        NUFIRSTSALCHANN     CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE := NULL;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.InsSellerSalChan Canal ['||INUORGAAREAID||'] Vendedor ['||INUPERSONID||']', 5);

        
        NUNEXTORGAREASELLER := CC_BOSEQUENCE.FNUNEXTCC_ORGA_AREA_SELLER;

        
        RCORGAAREASELLER.ORGA_AREA_SELLER_ID := NUNEXTORGAREASELLER;
        RCORGAAREASELLER.PERSON_ID := INUPERSONID;
        RCORGAAREASELLER.ORGANIZAT_AREA_ID := INUORGAAREAID;

        
        NUFIRSTSALCHANN := CC_BCSALESCHANNEL.FNUFIRSTCHANNBYPERSON(INUPERSONID);
        IF (NUFIRSTSALCHANN IS NULL) THEN
            RCORGAAREASELLER.IS_CURRENT := GE_BOCONSTANTS.CSBYES;
        ELSE
            RCORGAAREASELLER.IS_CURRENT := GE_BOCONSTANTS.CSBNO;
        END IF;
        
        
        DACC_ORGA_AREA_SELLER.INSRECORD(RCORGAAREASELLER);

        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.InsSellerSalChan', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;



    



    FUNCTION FRFGETSALCHANALLCHILD
    (
        INUSALECHANID IN CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
      RFSALCHANALLCHILD CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfGetSalChanAllChild Canal ['||INUSALECHANID||']', 5);
        
        RFSALCHANALLCHILD := CC_BCSALESCHANNEL.FRFGETSALCHANALLCHILD(INUSALECHANID);
        RETURN  RFSALCHANALLCHILD;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfGetSalChanAllChild', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;



    




    PROCEDURE DELPACKTYPESALECANAL
    (
        ISBTAGNAME          IN CC_COMMERCIAL_PLAN.TAG_NAME%TYPE,
        INUPRODTYPEID       IN CC_COMMERCIAL_PLAN.PRODUCT_TYPE_ID%TYPE,
        INUORGANIZATAREA    IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        INUPACKTYSALCAN     IN CC_PACK_TYPE_SALE_CANAL.PACK_TY_SALE_CANAL_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.DelPackTypeSaleCanal', 5);
        UT_TRACE.TRACE('Tipo Paquete ['||ISBTAGNAME||'] Tipo Producto ['||INUPRODTYPEID||'] Canal ['||INUORGANIZATAREA||'] Tipo de Paquete por Canal ['||INUPACKTYSALCAN||']', 5);

        

        
        DACC_PACK_TYPE_SALE_CANAL.DELRECORD(INUPACKTYSALCAN);
        
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.DelPackTypeSaleCanal', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
            ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;


    




    PROCEDURE DELPACKTYPESELLER
    (
        ISBTAGNAME          IN CC_COMMERCIAL_PLAN.TAG_NAME%TYPE,
        INUPRODTYPEID       IN CC_COMMERCIAL_PLAN.PRODUCT_TYPE_ID%TYPE,
        INUPERSONID         IN GE_PERSON.PERSON_ID%TYPE,
        INUPACKTYSELLER     IN CC_PACK_TYPE_SELLER.PACK_TYPE_SELLER_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.DelPackTypeSeller', 5);
        UT_TRACE.TRACE('Tipo Paquete ['||ISBTAGNAME||'] Tipo Producto ['||INUPRODTYPEID||'] Vendedor ['||INUPERSONID||'] Tipo de Paquete por Vendedor ['||INUPACKTYSELLER||']', 5);

        
        
        DACC_PACK_TYPE_SELLER.DELRECORD(INUPACKTYSELLER);

        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.DelPackTypeSeller', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
            ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;


    



    PROCEDURE INHFATHERPACKTYPES
    (
        INUNEWSALCANAL    IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        INUPARENTSALCAN   IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    IS
        RCPACTYPSALECANAL       DACC_PACK_TYPE_SALE_CANAL.STYCC_PACK_TYPE_SALE_CANAL;     
        RCNEWPACTYPESALECANAL   DACC_PACK_TYPE_SALE_CANAL.STYCC_PACK_TYPE_SALE_CANAL;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.InhFatherPackTypes', 5);
        UT_TRACE.TRACE('Canal nuevo ['||INUNEWSALCANAL||'] Canal Padre ['||INUPARENTSALCAN||']', 5);

        
        
        FOR RCPACTYPSALECANAL IN CC_BCSALESCHANNEL.CUGETPACKTYBYSALCHAN(INUPARENTSALCAN) LOOP
            UT_TRACE.TRACE('Tag Name del Tipo de solicitud ['||RCPACTYPSALECANAL.TAG_NAME||']', 5);
            
            RCNEWPACTYPESALECANAL.PACK_TY_SALE_CANAL_ID := CC_BOSEQUENCE.FNUNEXTCC_PACK_TY_SALE_CANAL;
            RCNEWPACTYPESALECANAL.ORGANIZAT_AREA_ID := INUNEWSALCANAL;
            RCNEWPACTYPESALECANAL.TAG_NAME := RCPACTYPSALECANAL.TAG_NAME;
            RCNEWPACTYPESALECANAL.PRODUCT_TYPE_ID := RCPACTYPSALECANAL.PRODUCT_TYPE_ID;
            DACC_PACK_TYPE_SALE_CANAL.INSRECORD(RCNEWPACTYPESALECANAL);
        END LOOP;

        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.InhFatherPackTypes', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
            ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;




    



    PROCEDURE INSPACTTYFORSALECHAN
    (
        INUSALCANAL    IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        ISBTAGNAME     IN CC_PACK_TYPE_SALE_CANAL.TAG_NAME%TYPE,
        INUPRODTYPE    IN CC_PACK_TYPE_SALE_CANAL.PRODUCT_TYPE_ID%TYPE
    )
    IS
        TBCHILDSSALESCANAL      CC_BCSALESCHANNEL.TYTBSALCANID;
        NUINDEX                 BINARY_INTEGER;
        RCCCPACKTYPESALECANAL   DACC_PACK_TYPE_SALE_CANAL.STYCC_PACK_TYPE_SALE_CANAL;
        NUSALCHANPACKTYID       CC_PACK_TYPE_SALE_CANAL.PACK_TY_SALE_CANAL_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.InsPactTyForSaleChan', 5);
        UT_TRACE.TRACE('Canal de ventas ['||INUSALCANAL||'] Tipo paquete ['||ISBTAGNAME||'] Tipo producto ['||INUPRODTYPE||']', 5);

        
        
        CC_BCSALESCHANNEL.GETCHILDSSALESCHAN(INUSALCANAL, TBCHILDSSALESCANAL);
        
        IF TBCHILDSSALESCANAL.COUNT > GE_BOCONSTANTS.CNUNULLNUM THEN
            FOR NUINDEX IN TBCHILDSSALESCANAL.FIRST..TBCHILDSSALESCANAL.LAST LOOP
                UT_TRACE.TRACE('Canal hijo ['||TBCHILDSSALESCANAL(NUINDEX).ORGANIZAT_AREA_ID||']', 5);
                
                INSPACTTYFORSALECHAN(TBCHILDSSALESCANAL(NUINDEX).ORGANIZAT_AREA_ID,
                                     ISBTAGNAME,
                                     INUPRODTYPE);
            END LOOP;
        END IF;

        UT_TRACE.TRACE('Se valida la creaci�n de la asociaci�n', 5);
        IF (CC_BCSALESCHANNEL.FBLVALPACKSALCHANPR(INUSALCANAL,
                                                  ISBTAGNAME,
                                                  INUPRODTYPE)) THEN
            RCCCPACKTYPESALECANAL.ORGANIZAT_AREA_ID := INUSALCANAL;
            RCCCPACKTYPESALECANAL.TAG_NAME := ISBTAGNAME;
            RCCCPACKTYPESALECANAL.PRODUCT_TYPE_ID := INUPRODTYPE;
            RCCCPACKTYPESALECANAL.PACK_TY_SALE_CANAL_ID := CC_BOSEQUENCE.FNUNEXTCC_PACK_TY_SALE_CANAL;
            DACC_PACK_TYPE_SALE_CANAL.INSRECORD(RCCCPACKTYPESALECANAL);

            UT_TRACE.TRACE('Se asocia Canal ['||INUSALCANAL||'] Tipo Paquete ['||ISBTAGNAME||'] Tipo Producto['||INUPRODTYPE||']', 5);
        ELSE
            UT_TRACE.TRACE('Ya existe asociaci�n entre el canal de venta y el tipo de solicitud para el tipo de producto', 5);
            
            IF (INUPRODTYPE IS NULL) THEN
                
                NUSALCHANPACKTYID := CC_BCSALESCHANNEL.FNUGETPACKSALCHANPR(INUSALCANAL, ISBTAGNAME, INUPRODTYPE);
                UT_TRACE.TRACE('Asociaci�n a actualizar a todos los tipos de paquetes ['||NUSALCHANPACKTYID||']', 5);
                IF (NUSALCHANPACKTYID IS NOT NULL) THEN
                    DACC_PACK_TYPE_SALE_CANAL.UPDPRODUCT_TYPE_ID(NUSALCHANPACKTYID, NULL);
                END IF;
            END IF;
        END IF;


        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.InsPactTyForSaleChan', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
            ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;
    
    
    





    PROCEDURE DELINHPACKTYSALCANAL
    (
        ISBTAGNAME          IN CC_COMMERCIAL_PLAN.TAG_NAME%TYPE,
        INUPRODTYPEID       IN CC_COMMERCIAL_PLAN.PRODUCT_TYPE_ID%TYPE,
        INUORGANIZATAREA    IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE,
        INUPACKTYSALCAN     IN CC_PACK_TYPE_SALE_CANAL.PACK_TY_SALE_CANAL_ID%TYPE
    )
    IS
        TBCHILDSSALESCANAL      CC_BCSALESCHANNEL.TYTBSALCANID;
        NUINDEX                 BINARY_INTEGER;
        
        NUPACKTYSALCANALID      CC_PACK_TYPE_SALE_CANAL.PACK_TY_SALE_CANAL_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.DelInhPackTySalCanal', 5);
        UT_TRACE.TRACE('Tipo Paquete ['||ISBTAGNAME||'] Tipo Producto ['||INUPRODTYPEID||'] Canal ['||INUORGANIZATAREA||'] Tipo de Paquete por Canal ['||INUPACKTYSALCAN||']', 5);

        
        
        CC_BCSALESCHANNEL.GETCHILDSSALESCHAN(INUORGANIZATAREA, TBCHILDSSALESCANAL);

        
        IF TBCHILDSSALESCANAL.COUNT > GE_BOCONSTANTS.CNUNULLNUM THEN
            FOR NUINDEX IN TBCHILDSSALESCANAL.FIRST..TBCHILDSSALESCANAL.LAST LOOP
                UT_TRACE.TRACE('Canal hijo ['||TBCHILDSSALESCANAL(NUINDEX).ORGANIZAT_AREA_ID||']', 5);
                
                NUPACKTYSALCANALID := CC_BCSALESCHANNEL.FNUGETPACKSALCHANPR(TBCHILDSSALESCANAL(NUINDEX).ORGANIZAT_AREA_ID,
                                                                            ISBTAGNAME,
                                                                            INUPRODTYPEID);
                
                DELINHPACKTYSALCANAL(ISBTAGNAME,
                                     INUPRODTYPEID,
                                     TBCHILDSSALESCANAL(NUINDEX).ORGANIZAT_AREA_ID,
                                     NUPACKTYSALCANALID
                                     );
            END LOOP;
        END IF;

        
        
        
        
        
        IF (INUPACKTYSALCAN IS NOT NULL) THEN
            DELPACKTYPESALECANAL(ISBTAGNAME, INUPRODTYPEID, INUORGANIZATAREA, INUPACKTYSALCAN);
        END IF;
        
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.DelPackTypeSaleCanal', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;
    	WHEN OTHERS THEN
            ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;

    FUNCTION FRFGETCHANNELSBYSELLER
    (
        INUSELLERID IN GE_PERSON.PERSON_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
      RFCHANNELS CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfGetChannelsBySeller Vendedor ['||INUSELLERID||']', 5);
        
        RFCHANNELS := CC_BCSALESCHANNEL.FRFCHANNELSBYPERSON(INUSELLERID);
        RETURN  RFCHANNELS;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfGetChannelsBySeller', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;
    
    FUNCTION FRFGETSALECHANELS
    RETURN CONSTANTS.TYREFCURSOR
    IS
      RFCHANNELS CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfGetSalesChanel', 5);
        
        RFCHANNELS := CC_BCSALESCHANNEL.FRFGETSALECHANELS();
        RETURN  RFCHANNELS;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfGetSalesChanel', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;
    
    PROCEDURE SETCHANNELASCURRENT
    (
        INUSELLERID          IN      GE_PERSON.PERSON_ID%TYPE,
        INUCHANNELID         IN      GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    IS

    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.setChannelAsCurren', 5);
        
        CC_BCSALESCHANNEL.SETISCURRENBYSELLER(INUSELLERID, 'N');
        CC_BCSALESCHANNEL.SETISCURRENBYSELLERANDCHANNEL(INUSELLERID, INUCHANNELID, 'Y');

        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.setChannelAsCurren', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;
    
    



    FUNCTION FRFGETSUPERVFROMORGAREA
    (
        INUSALESCHANNID IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        RFSUPERVISORSCURSOR   CONSTANTS.TYREFCURSOR;

    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfGetSupervFromOrgArea Canal ['||INUSALESCHANNID||']', 5);
        
        RFSUPERVISORSCURSOR := CC_BCSALESCHANNEL.FRFGETSUPERVFROMORGAREA(INUSALESCHANNID);
        RETURN  RFSUPERVISORSCURSOR;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfGetSupervFromOrgArea', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;
    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;


    



    FUNCTION FRFGETSUPERVTOORGAREA
    (
        INUSALESCHANNID IN GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        RFSUPERVISORSCURSOR   CONSTANTS.TYREFCURSOR;

    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfGetSupervToOrgArea Canal ['||INUSALESCHANNID||']', 5);
        
        RFSUPERVISORSCURSOR := CC_BCSALESCHANNEL.FRFGETSUPERVTOORGAREA(INUSALESCHANNID);
        RETURN  RFSUPERVISORSCURSOR;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfGetSupervToOrgArea', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;
    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;


	


    PROCEDURE INSSUPERVTOORGAAREA
    (
        INUORGAAREAID IN GE_ORGA_AREA_SUPERV.ORGANIZAT_AREA_ID%TYPE,
        INUPERSONID   IN GE_ORGA_AREA_SUPERV.PERSON_ID%TYPE
    )
    IS
        
        
        
        RCORGAAREASUPERV    DAGE_ORGA_AREA_SUPERV.STYGE_ORGA_AREA_SUPERV;
        NUNEXTORGAREASUPERV GE_ORGA_AREA_SUPERV.ORGA_AREA_SUPERV_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.InsSupervToOrgaArea Canal ['||INUORGAAREAID||'] Supervisor ['||INUPERSONID||']', 5);

        
        NUNEXTORGAREASUPERV := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('GE_ORGA_AREA_SUPERV', 'SEQ_GE_ORGA_AREA_SUPERV');

        
        RCORGAAREASUPERV.ORGA_AREA_SUPERV_ID := NUNEXTORGAREASUPERV;
        RCORGAAREASUPERV.PERSON_ID := INUPERSONID;
        RCORGAAREASUPERV.ORGANIZAT_AREA_ID := INUORGAAREAID;

        
        DAGE_ORGA_AREA_SUPERV.INSRECORD(RCORGAAREASUPERV);

        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.InsSupervToOrgaArea', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;

    
    



    FUNCTION FRFGETSALCHORGAREATY
    RETURN CONSTANTS.TYREFCURSOR
    IS
        
        
        
        RFSALCHORGAREATY   CONSTANTS.TYREFCURSOR;

    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfGetSalChOrgAreaTy', 5);
        
        RFSALCHORGAREATY := CC_BCSALESCHANNEL.FRFGETSALCHORGAREATY;
        RETURN  RFSALCHORGAREATY;
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfGetSalChOrgAreaTy', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;
    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;

    
    FUNCTION  FNUGETCHANNELINTTYPE
    RETURN NUMBER
    IS
    BEGIN
        RETURN  GNUSALECHANNELINTERNALTYPE;
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;
    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;
    
    FUNCTION  FNUGETSALEPERSONTYPE
    RETURN NUMBER
    IS
    BEGIN
        RETURN  GNUSALEPERSONTYPE;
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;
    	WHEN OTHERS THEN
        	ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;

    FUNCTION FRFGETORGAREABYSALESCHANEL
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFORGANIZATAREA CONSTANTS.TYREFCURSOR;
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.frfGetOrgAreaBySalesChanel', 5);
        RFORGANIZATAREA := CC_BCSALESCHANNEL.FRFGETORGAREABYSALESCHANEL();
        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.frfGetOrgAreaBySalesChanel', 5);
        RETURN RFORGANIZATAREA;
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;
    	WHEN OTHERS THEN
            ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END;

    

















    PROCEDURE VALCHANNELANDSELLER
    (
        INUPERSONID     IN CC_ORGA_AREA_SELLER.PERSON_ID%TYPE,
        INUORGAREAID    IN CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE
    )
    IS
        RCORGAREASELLER     DACC_ORGA_AREA_SELLER.STYCC_ORGA_AREA_SELLER;
    BEGIN
        
        RCORGAREASELLER := CC_BCSALESCHANNEL.FRCGETORG_AREA_SELLER(INUPERSONID, INUORGAREAID);
        
        
        IF (RCORGAREASELLER.ORGA_AREA_SELLER_ID IS NULL) THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_SELLER_CHANNEL, INUPERSONID||GE_BOCONSTANTS.CSBDELIMITERBLOCKS||INUORGAREAID);
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALCHANNELANDSELLER;
    
    
    
    





















    
    PROCEDURE DELOPERUNIRECETYPE
    (
        INUOPERATINGUNIT     IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INURECEPTYPE         IN  OR_OPE_UNI_RECE_TYPE.RECEPTION_TYPE_ID%TYPE,
        INUOPERUNIDRECETYPE  IN  OR_OPE_UNI_RECE_TYPE.OPE_UNI_RECE_TYPE_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicio de CC_BOSalesChannel.DelOperUniReceType', 5);
        UT_TRACE.TRACE('Canal ['||INUOPERATINGUNIT||'] Tipo de Medio de recepci�n por Canal ['||INURECEPTYPE||']', 5);

        
        DAOR_OPE_UNI_RECE_TYPE.DELRECORD(INUOPERUNIDRECETYPE);

        UT_TRACE.TRACE('Fin de CC_BOSalesChannel.DelOperUniReceType', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
            ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END;

    
    
























    PROCEDURE INSUNIOPETIPRECEPCION
    (
        INUOPERATINGUNIT     IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        INURECEPTYPE         IN  OR_OPE_UNI_RECE_TYPE.RECEPTION_TYPE_ID%TYPE
    )
    IS

        RCOR_OPE_UNI_RECE_TYPE   DAOR_OPE_UNI_RECE_TYPE.STYOR_OPE_UNI_RECE_TYPE;

    BEGIN
        UT_TRACE.TRACE('INICIO CC_BOSalesChannel.InsUniOpeTipRecepcion', 5);
        UT_TRACE.TRACE('Unidad Operativa ['||INUOPERATINGUNIT||'] Tipo medio de recepci�n ['||INURECEPTYPE||']', 5);

        UT_TRACE.TRACE('Se valida la creaci�n de la asociaci�n', 5);

        IF (CC_BCSALESCHANNEL.FBLVALUNIOPERRECETYPE(INUOPERATINGUNIT,INURECEPTYPE)) THEN

            RCOR_OPE_UNI_RECE_TYPE.OPERATING_UNIT_ID := INUOPERATINGUNIT;
            RCOR_OPE_UNI_RECE_TYPE.RECEPTION_TYPE_ID := INURECEPTYPE;
            RCOR_OPE_UNI_RECE_TYPE.OPE_UNI_RECE_TYPE_ID := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE('OR_OPE_UNI_RECE_TYPE','SEQ_OR_OPE_UNI_RECE_155334');
            DAOR_OPE_UNI_RECE_TYPE.INSRECORD(RCOR_OPE_UNI_RECE_TYPE);

            UT_TRACE.TRACE('Se asocia a la Unidad Operativa ['||INUOPERATINGUNIT||'] el medio de recepci�n ['||INURECEPTYPE||']', 5);
        END IF;


        UT_TRACE.TRACE('FIN CC_BOSalesChannel.InsUniOpeTipRecepcion', 5);
   	EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
        	RAISE EX.CONTROLLED_ERROR ;

    	WHEN OTHERS THEN
            ERRORS.SETERROR;
        	RAISE EX.CONTROLLED_ERROR;
    END ;

    














    PROCEDURE GETCOMMPLANSALESCHANNEL
    (
        INUSALESCHANNELID   IN   CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE,
        OCUCURSOR           OUT  CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO CC_BOSalesChannel.GetCommPlanSalesChannel', 3);

        OCUCURSOR := CC_BCSALESCHANNEL.FRFGETCOMMPLANSALESCHANNEL(INUSALESCHANNELID);

        UT_TRACE.TRACE('FIN CC_BOSalesChannel.GetCommPlanSalesChannel', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCOMMPLANSALESCHANNEL;

    














    PROCEDURE SETCOMMPLANSALESCHANNEL
    (
        INUSALESCHANNELID       IN CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE,
        INUCOMMERCIALPLANID     IN CC_COM_PLAN_SALE_CHAN.COMMERCIAL_PLAN_ID%TYPE,
        ONUCOMMPLANSALCHANID    OUT CC_COM_PLAN_SALE_CHAN.COM_PLAN_SAL_CHAN_ID%TYPE
    )
    IS
        RCCOMMPLANSALESCHANNEL  DACC_COM_PLAN_SALE_CHAN.STYCC_COM_PLAN_SALE_CHAN;
    BEGIN
        UT_TRACE.TRACE('INICIO CC_BOSalesChannel.SetCommPlanSalesChannel inuSalesChannelId['||INUSALESCHANNELID||'] inuCommercialPlanId['||INUCOMMERCIALPLANID||']' , 3);

        RCCOMMPLANSALESCHANNEL.SALER_CHANNEL_ID := INUSALESCHANNELID;
        RCCOMMPLANSALESCHANNEL.COMMERCIAL_PLAN_ID := INUCOMMERCIALPLANID;
        
        IF NOT CC_BCSALESCHANNEL.FBOEXISTSCOMMPLANSALESCHANNEL(RCCOMMPLANSALESCHANNEL) THEN
            
            ONUCOMMPLANSALCHANID := CC_BOSEQUENCE.FNUNEXTCC_COMM_PLAN_SALE_CHAN;

            
            RCCOMMPLANSALESCHANNEL.COM_PLAN_SAL_CHAN_ID := ONUCOMMPLANSALCHANID;

            
            DACC_COM_PLAN_SALE_CHAN.INSRECORD(RCCOMMPLANSALESCHANNEL);
        END IF;

        UT_TRACE.TRACE('FIN CC_BOSalesChannel.SetCommPlanSalesChannel onuCommPlanSalChanId['||ONUCOMMPLANSALCHANID||']', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETCOMMPLANSALESCHANNEL;

    


















    PROCEDURE UPDCOMMPLANSALESCHANNEL
    (
        INUCOMMPLANSALESCHANID  IN CC_COM_PLAN_SALE_CHAN.COM_PLAN_SAL_CHAN_ID%TYPE,
        INUSALESCHANNELID       IN CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE,
        INUCOMMERCIALPLANID     IN CC_COM_PLAN_SALE_CHAN.COMMERCIAL_PLAN_ID%TYPE
    )
    IS
        RCCOMMPLANSALESCHANNEL  DACC_COM_PLAN_SALE_CHAN.STYCC_COM_PLAN_SALE_CHAN;
    BEGIN
        UT_TRACE.TRACE('INICIO CC_BOSalesChannel.UpdCommPlanSalesChannel', 3);

        DACC_COM_PLAN_SALE_CHAN.GETRECORD(INUCOMMPLANSALESCHANID, RCCOMMPLANSALESCHANNEL);
        
        RCCOMMPLANSALESCHANNEL.SALER_CHANNEL_ID := INUSALESCHANNELID;
        RCCOMMPLANSALESCHANNEL.COMMERCIAL_PLAN_ID := INUCOMMERCIALPLANID;
        
        DACC_COM_PLAN_SALE_CHAN.UPDRECORD(RCCOMMPLANSALESCHANNEL);

        UT_TRACE.TRACE('FIN CC_BOSalesChannel.UpdCommPlanSalesChannel', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPDCOMMPLANSALESCHANNEL;

    














    PROCEDURE DELCOMMPLANSALESCHANNEL
    (
        INUCOMMPLANSALESCHANID  IN CC_COM_PLAN_SALE_CHAN.COM_PLAN_SAL_CHAN_ID%TYPE
    ) IS
    BEGIN
        UT_TRACE.TRACE('INICIO CC_BOSalesChannel.DelCommPlanSalesChannel', 3);

        DACC_COM_PLAN_SALE_CHAN.DELRECORD(INUCOMMPLANSALESCHANID);

        UT_TRACE.TRACE('FIN CC_BOSalesChannel.DelCommPlanSalesChannel', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END DELCOMMPLANSALESCHANNEL;

    













    PROCEDURE COPYCONFIGSALESCHANNELCHILD
    (
        INUSALERCHANNELID  IN CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE
    ) IS
    BEGIN
        UT_TRACE.TRACE('INICIO CC_BOSalesChannel.CopyConfigSalesChannelChild', 3);

        CC_BCSALESCHANNEL.COPYCONFIGSALESCHANNELCHILD(INUSALERCHANNELID);

        UT_TRACE.TRACE('FIN CC_BOSalesChannel.CopyConfigSalesChannelChild', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END COPYCONFIGSALESCHANNELCHILD;

    
















    PROCEDURE GETCOMMERCIALPLANS
    (
        INUSALERCHANNELID  IN CC_COM_PLAN_SALE_CHAN.SALER_CHANNEL_ID%TYPE,
        OTBCOMMERCIALPLANS OUT CC_BCSEGMENTCONSTANTS.TYTBCOMMERCIALPLANOFFER
    ) IS

        RCCOMMERCIALOFFER CC_BCSEGMENTCONSTANTS.TYRCCOMMERCIALPLANOFFER;
    BEGIN
        UT_TRACE.TRACE('INICIO CC_BOSalesChannel.GetCommercialPlans', 3);

        FOR REG IN CC_BCSALESCHANNEL.CUGETCOMMERCIALPLANS(INUSALERCHANNELID)
        LOOP
            RCCOMMERCIALOFFER.COMMERCIAL_PLAN_ID := REG.COMMERCIAL_PLAN_ID;
            RCCOMMERCIALOFFER.PRODUCT_TYPE_ID := REG.PRODUCT_TYPE_ID;
            RCCOMMERCIALOFFER.CURRENTLY := UT_DATE.ISDATEBETWEEN(REG.INITIAL_DATE, REG.FINAL_DATE, SYSDATE);
            
            OTBCOMMERCIALPLANS(REG.COMMERCIAL_PLAN_ID) := RCCOMMERCIALOFFER;
            UT_TRACE.TRACE('Plan comercial: ' || REG.COMMERCIAL_PLAN_ID , 5);
        END LOOP;

        UT_TRACE.TRACE('FIN CC_BOSalesChannel.GetCommercialPlans', 3);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETCOMMERCIALPLANS;





  















  PROCEDURE GETSALESCHANNELBYSELLER
    (
        INUPERSONID     GE_PERSON.PERSON_ID%TYPE,
        ORFREFCURSOR    OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia CC_BOSalesChannel.GetSalesChannelBySeller vendedor ['||INUPERSONID||']', 5);

        ORFREFCURSOR:= CC_BCSALESCHANNEL.FRFGETSALESCHANNELSBYPERSON(INUPERSONID);

        UT_TRACE.TRACE('Fin CC_BOSalesChannel.GetSalesChannelBySeller', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETSALESCHANNELBYSELLER;


    

















     FUNCTION FBOVALCHANNEL
    (
        INUORGAREAID    IN      GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    RETURN BOOLEAN
    IS
        BOEXISTOPERATINGUNIT  BOOLEAN := TRUE;
        RCOPERUNIT            DAOR_OPERATING_UNIT.STYOR_OPERATING_UNIT;
    BEGIN
        UT_TRACE.TRACE('Inicia cc_bosaleschannel.fboValChannel', 10);

        
        RCOPERUNIT := OR_BCOPERATINGUNIT.FRCGETUNITBYORGAREA(INUORGAREAID);

        
        IF( (RCOPERUNIT.OPERATING_UNIT_ID IS NULL) OR (INUORGAREAID != RCOPERUNIT.OPERATING_UNIT_ID) ) THEN
            BOEXISTOPERATINGUNIT := FALSE;
        END IF;

        UT_TRACE.TRACE('Fin cc_bosaleschannel.fboValChannel', 10);
        RETURN BOEXISTOPERATINGUNIT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOVALCHANNEL;
    
    
    
















    PROCEDURE VALIDATECHANNEL
    (
        INUORGAREAID IN  GE_ORGANIZAT_AREA.ORGANIZAT_AREA_ID%TYPE
    )
    IS
        SBCHANNELINFO         VARCHAR2(500) := NULL;
    BEGIN
        UT_TRACE.TRACE('Inicia cc_bosaleschannel.ValidateChannel', 5);

        
        SBCHANNELINFO := INUORGAREAID||' - '||DAGE_ORGANIZAT_AREA.FSBGETNAME_(INUORGAREAID);

        UT_TRACE.TRACE('Punto de Atencion: ['||SBCHANNELINFO||']', 5);

        IF(FBOVALCHANNEL(INUORGAREAID) = FALSE) THEN
            ERRORS.SETERROR(CNUNO_OPER_UNIT, SBCHANNELINFO);
            RAISE EX.CONTROLLED_ERROR;
        END IF;
        UT_TRACE.TRACE('Fin cc_bosaleschannel.ValidateChannel', 5);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END VALIDATECHANNEL;


    














    PROCEDURE SETCURRENTSALECHANNEL
    IS
        NUUSERID            CC_ORGA_AREA_SELLER.PERSON_ID%TYPE;
        NUNEWORGAREAID      CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE;
        NUCURRENTORGAREAID  CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE;
        NUORGAREASELLERID   CC_ORGA_AREA_SELLER.ORGA_AREA_SELLER_ID%TYPE;
    BEGIN

        UT_TRACE.TRACE('Incia cc_bosaleschannel.SetCurrentSaleChannel', 2);

        
        NUUSERID        := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('CC_ORGA_AREA_SELLER', 'PERSON_ID');
        NUNEWORGAREAID  := GE_BOINSTANCECONTROL.FSBGETFIELDVALUE('CC_ORGA_AREA_SELLER', 'ORGANIZAT_AREA_ID');
        
        

        
        IF ( CC_BCORGA_AREA_SELLER.CUGETCHANNELCURRENT%ISOPEN ) THEN
            CLOSE CC_BCORGA_AREA_SELLER.CUGETCHANNELCURRENT;
        END IF;
        
        
        OPEN CC_BCORGA_AREA_SELLER.CUGETCHANNELCURRENT(NUUSERID);
        FETCH CC_BCORGA_AREA_SELLER.CUGETCHANNELCURRENT INTO NUCURRENTORGAREAID;
        CLOSE CC_BCORGA_AREA_SELLER.CUGETCHANNELCURRENT;
        
        UT_TRACE.TRACE('Id Ejecutivo ['||NUUSERID||'], Punto de Atencion Current ['||NUCURRENTORGAREAID||'], Nuevo Punto de Atencion Current ['||NUNEWORGAREAID||']', 5);
        
        IF(NUCURRENTORGAREAID IS NOT NULL) THEN
            
            
            IF(NUCURRENTORGAREAID = NUNEWORGAREAID) THEN
                RETURN;
            END IF;
            
            

            IF ( CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID%ISOPEN ) THEN
                CLOSE CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID;
            END IF;
            
            
            OPEN CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID(NUUSERID, NUCURRENTORGAREAID);
            FETCH CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID INTO NUORGAREASELLERID;
            CLOSE CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID;

            UT_TRACE.TRACE('Id de la relacion Ejecutivo - Punto de Atencion Current ['||NUORGAREASELLERID||']', 5);

            
            DACC_ORGA_AREA_SELLER.UPDIS_CURRENT(NUORGAREASELLERID, GE_BOCONSTANTS.CSBNO);
            UT_TRACE.TRACE('Punto de Atencion ['||NUCURRENTORGAREAID||'] marcado como NO current para ejecutivo ['||NUUSERID||']', 2);
        END IF;
        
        

        IF ( CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID%ISOPEN ) THEN
            CLOSE CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID;
        END IF;
        
        

        OPEN CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID(NUUSERID, NUNEWORGAREAID);
        FETCH CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID INTO NUORGAREASELLERID;
        CLOSE CC_BCORGA_AREA_SELLER.CUGETORGAREASELLERID;
        
        UT_TRACE.TRACE('Id de la relacion Ejecutivo - Nuevo Punto de Atencion Current ['||NUORGAREASELLERID||']', 5);
        
        
        DACC_ORGA_AREA_SELLER.UPDIS_CURRENT(NUORGAREASELLERID, GE_BOCONSTANTS.CSBYES);

        UT_TRACE.TRACE('Punto de Atencion ['||NUNEWORGAREAID||'] marcado como current para ejecutivo ['||NUUSERID||']', 2);

        
        COMMIT;
        UT_TRACE.TRACE('FIN cc_bosaleschannel.SetCurrentSaleChannel', 2);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR cc_bosaleschannel.SetCurrentSaleChannel', 2);
            ROLLBACK;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHER ERROR cc_bosaleschannel.SetCurrentSaleChannel', 2);
            ROLLBACK;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END SETCURRENTSALECHANNEL;
    
    
    
    















    PROCEDURE INITCCCPAAFIELDS
    IS
        SBUSERID    GE_BOINSTANCECONTROL.STYSBVALUE;
        SBINSTANCE  GE_BOINSTANCECONTROL.STYSBVALUE;
        NUCHANNELID CC_ORGA_AREA_SELLER.ORGANIZAT_AREA_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia cc_bosaleschannel.InitCCCPAAFields', 2);
        
        
        GE_BOINSTANCECONTROL.GETATTRIBUTENEWVALUE(GI_BOINSTANCECONSTANT.CSBWORKINSTANCE, NULL, 'GE_PERSON', 'PERSON_ID', SBUSERID);
        
        
        NUCHANNELID := GE_BOPERSONAL.FNUGETCURRENTCHANNEL(SBUSERID, FALSE);
        
        
        GE_BOINSTANCECONTROL.GETCURRENTINSTANCE(SBINSTANCE);

        
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBINSTANCE, NULL, 'CC_ORGA_AREA_SELLER','PERSON_ID', SBUSERID, TRUE);
        GE_BOINSTANCECONTROL.ADDATTRIBUTE(SBINSTANCE, NULL, 'CC_ORGA_AREA_SELLER', 'ORGANIZAT_AREA_ID', NUCHANNELID, TRUE);
        
        UT_TRACE.TRACE('Id Ejecutivo ['||SBUSERID||'], Punto de Atencion Current ['||NUCHANNELID||']', 5);
        
        UT_TRACE.TRACE('FIN cc_bosaleschannel.InitCCCPAAFields', 2);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('Error : ex.CONTROLLED_ERROR',15);
            RAISE;

        WHEN OTHERS THEN
            UT_TRACE.TRACE('Error : others',15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INITCCCPAAFIELDS;
        
        
        
    

BEGIN
    LOADPARAMETERS;
    
END CC_BOSALESCHANNEL;