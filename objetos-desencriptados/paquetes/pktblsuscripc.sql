PACKAGE BODY pktblSuscripc
IS

   
   
   
   
   RCSUSCRIPC CUSUSCRIPC%ROWTYPE;
   
   RCRECORDNULL SUSCRIPC%ROWTYPE;
   
   
   
	CSBVERSION CONSTANT VARCHAR2(20) := 'SAO197502';
	CACHE CONSTANT NUMBER := 1; 
	
	
	
   CNURECORD_NO_EXISTE CONSTANT NUMBER(1) := 1; 
	CNURECORD_YA_EXISTE CONSTANT NUMBER(1) := 2; 
	CBSTABLE      CONSTANT VARCHAR2(30) := 'SUSCRIPC'; 
	CNUGEENTITYID CONSTANT VARCHAR2(30) := 91; 


	
	
	
	FUNCTION FSBGETMESSAGEDESCRIPTION
	(
		INUMENSCODI	IN NUMBER
	)
	RETURN VARCHAR2
	IS 
	      SBMESSAGE VARCHAR2(32000);
	      SBTABLEDESCRIPTION VARCHAR2(32000);
	BEGIN
	    IF (CNUGEENTITYID > 0 AND DAGE_ENTITY.FBLEXIST (CNUGEENTITYID))  THEN
	          SBTABLEDESCRIPTION:= DAGE_ENTITY.FSBGETDISPLAY_NAME(CNUGEENTITYID);
	    END IF;

		SBMESSAGE := DAGE_MESSAGE.FSBGETDESCRIPTION(INUMENSCODI);
	    IF SBTABLEDESCRIPTION IS NULL THEN
	          SBMESSAGE := REPLACE(SBMESSAGE,'%s1',CBSTABLE);
	    ELSE
	          SBMESSAGE := REPLACE(SBMESSAGE,'%s1','(' ||CBSTABLE||' - '||SBTABLEDESCRIPTION ||')');
	    END IF;
		RETURN SBMESSAGE ;
	END FSBGETMESSAGEDESCRIPTION;

	FUNCTION FBLINMEMORY
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE
	)
	RETURN BOOLEAN IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fblInMemory');
		IF(
			RCSUSCRIPC.SUSCCODI = INUSUSCCODI
		) THEN
			PKERRORS.POP;
			RETURN(TRUE);
		END IF;
		PKERRORS.POP;
		RETURN( FALSE );
	END FBLINMEMORY;

	PROCEDURE LOADRECORD
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE
	) IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.LoadRecord');
		IF CUSUSCRIPC%ISOPEN THEN
			CLOSE CUSUSCRIPC;
		END IF;
		
		OPEN CUSUSCRIPC
		(
			INUSUSCCODI
		);

		FETCH CUSUSCRIPC INTO RCSUSCRIPC;
		IF ( CUSUSCRIPC%NOTFOUND ) THEN 
			CLOSE CUSUSCRIPC;
			PKERRORS.POP;
			RCSUSCRIPC := RCRECORDNULL;
			RETURN;
		END IF;
		CLOSE CUSUSCRIPC;
		PKERRORS.POP;
	END LOADRECORD;

	PROCEDURE LOAD
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE
	) IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.Load');
		LOADRECORD
		(
			INUSUSCCODI
		);

		
		IF ( RCSUSCRIPC.SUSCCODI IS NULL ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END LOAD;

    FUNCTION FSBVERSION
    RETURN VARCHAR2
	IS
	BEGIN
		RETURN CSBVERSION;
	END FSBVERSION;

	PROCEDURE ACCKEY
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.AccKey');
		
		IF ( INUCACHE = CACHE ) THEN
            IF ( FBLINMEMORY
			(
                INUSUSCCODI
			)) THEN
				PKERRORS.POP;
				RETURN;
			END IF;
		END IF;

		LOAD
		(
                INUSUSCCODI
		);
		PKERRORS.POP;
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END ACCKEY;

	PROCEDURE CLEARMEMORY IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.ClearMemory');
		RCSUSCRIPC := RCRECORDNULL;
		PKERRORS.POP;
	END CLEARMEMORY;

	PROCEDURE DELRECORD
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE
	)	 IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.DelRecord');
		
		DELETE SUSCRIPC
		WHERE
       		SUSCCODI=INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END DELRECORD;

	PROCEDURE DELRECORDS
	(
		INUSUSCCODI IN OUT NOCOPY TYSUSCCODI
	) IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.DelRecords');
		
		FORALL INDX IN INUSUSCCODI.FIRST .. INUSUSCCODI.LAST
		DELETE SUSCRIPC
		WHERE 
            SUSCCODI = INUSUSCCODI(INDX);
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END DELRECORDS;

	PROCEDURE INSFOREACHCOLUMN
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCTISU IN SUSCRIPC.SUSCTISU%TYPE,
		INUSUSCCICL IN SUSCRIPC.SUSCCICL%TYPE,
		INUSUSCNUPR IN SUSCRIPC.SUSCNUPR%TYPE,
		INUSUSCIDDI IN SUSCRIPC.SUSCIDDI%TYPE,
		ISBSUSCTIMO IN SUSCRIPC.SUSCTIMO%TYPE,
		ISBSUSCDETA IN SUSCRIPC.SUSCDETA%TYPE,
		ISBSUSCCECO IN SUSCRIPC.SUSCCECO%TYPE,
		INUSUSCCEMF IN SUSCRIPC.SUSCCEMF%TYPE,
		INUSUSCCEMD IN SUSCRIPC.SUSCCEMD%TYPE,
		ISBSUSCTDCO IN SUSCRIPC.SUSCTDCO%TYPE,
		INUSUSCBANC IN SUSCRIPC.SUSCBANC%TYPE,
		ISBSUSCSUBA IN SUSCRIPC.SUSCSUBA%TYPE,
		ISBSUSCCUCO IN SUSCRIPC.SUSCCUCO%TYPE,
		INUSUSCTCBA IN SUSCRIPC.SUSCTCBA%TYPE,
		IDTSUSCVETC IN SUSCRIPC.SUSCVETC%TYPE,
		ISBSUSCTTPA IN SUSCRIPC.SUSCTTPA%TYPE,
		INUSUSCBAPA IN SUSCRIPC.SUSCBAPA%TYPE,
		ISBSUSCSBBP IN SUSCRIPC.SUSCSBBP%TYPE,
		INUSUSCTCBP IN SUSCRIPC.SUSCTCBP%TYPE,
		ISBSUSCCUBP IN SUSCRIPC.SUSCCUBP%TYPE,
		ISBSUSCDECO IN SUSCRIPC.SUSCDECO%TYPE,
		INUSUSCCLIE IN SUSCRIPC.SUSCCLIE%TYPE,
		INUSUSCSIST IN SUSCRIPC.SUSCSIST%TYPE,
		ISBSUSCEFCE IN SUSCRIPC.SUSCEFCE%TYPE,
		INUSUSCTITT IN SUSCRIPC.SUSCTITT%TYPE,
		ISBSUSCIDTT IN SUSCRIPC.SUSCIDTT%TYPE,
		ISBSUSCMAIL IN SUSCRIPC.SUSCMAIL%TYPE,
		INUSUSCENCO IN SUSCRIPC.SUSCENCO%TYPE,
		INUSUSCPRCA IN SUSCRIPC.SUSCPRCA%TYPE,
		INUSUSCSAFA IN SUSCRIPC.SUSCSAFA%TYPE,
		INUSUSCCOEM IN SUSCRIPC.SUSCCOEM%TYPE
	) IS
	   RCRECORD SUSCRIPC%ROWTYPE;
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.InsForEachColumn');
		RCRECORD.SUSCCODI := INUSUSCCODI;
		RCRECORD.SUSCTISU := INUSUSCTISU;
		RCRECORD.SUSCCICL := INUSUSCCICL;
		RCRECORD.SUSCNUPR := INUSUSCNUPR;
		RCRECORD.SUSCIDDI := INUSUSCIDDI;
		RCRECORD.SUSCTIMO := ISBSUSCTIMO;
		RCRECORD.SUSCDETA := ISBSUSCDETA;
		RCRECORD.SUSCCECO := ISBSUSCCECO;
		RCRECORD.SUSCCEMF := INUSUSCCEMF;
		RCRECORD.SUSCCEMD := INUSUSCCEMD;
		RCRECORD.SUSCTDCO := ISBSUSCTDCO;
		RCRECORD.SUSCBANC := INUSUSCBANC;
		RCRECORD.SUSCSUBA := ISBSUSCSUBA;
		RCRECORD.SUSCCUCO := ISBSUSCCUCO;
		RCRECORD.SUSCTCBA := INUSUSCTCBA;
		RCRECORD.SUSCVETC := IDTSUSCVETC;
		RCRECORD.SUSCTTPA := ISBSUSCTTPA;
		RCRECORD.SUSCBAPA := INUSUSCBAPA;
		RCRECORD.SUSCSBBP := ISBSUSCSBBP;
		RCRECORD.SUSCTCBP := INUSUSCTCBP;
		RCRECORD.SUSCCUBP := ISBSUSCCUBP;
		RCRECORD.SUSCDECO := ISBSUSCDECO;
		RCRECORD.SUSCCLIE := INUSUSCCLIE;
		RCRECORD.SUSCSIST := INUSUSCSIST;
		RCRECORD.SUSCEFCE := ISBSUSCEFCE;
		RCRECORD.SUSCTITT := INUSUSCTITT;
		RCRECORD.SUSCIDTT := ISBSUSCIDTT;
		RCRECORD.SUSCMAIL := ISBSUSCMAIL;
		RCRECORD.SUSCENCO := INUSUSCENCO;
		RCRECORD.SUSCPRCA := INUSUSCPRCA;
		RCRECORD.SUSCSAFA := INUSUSCSAFA;
		RCRECORD.SUSCCOEM := INUSUSCCOEM;
		INSRECORD( RCRECORD );
		PKERRORS.POP;
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END INSFOREACHCOLUMN;

	PROCEDURE INSFOREACHCOLUMNBULK
	(
		INUSUSCCODI IN OUT NOCOPY TYSUSCCODI,
		INUSUSCTISU IN OUT NOCOPY TYSUSCTISU,
		INUSUSCCICL IN OUT NOCOPY TYSUSCCICL,
		INUSUSCNUPR IN OUT NOCOPY TYSUSCNUPR,
		INUSUSCIDDI IN OUT NOCOPY TYSUSCIDDI,
		ISBSUSCTIMO IN OUT NOCOPY TYSUSCTIMO,
		ISBSUSCDETA IN OUT NOCOPY TYSUSCDETA,
		ISBSUSCCECO IN OUT NOCOPY TYSUSCCECO,
		INUSUSCCEMF IN OUT NOCOPY TYSUSCCEMF,
		INUSUSCCEMD IN OUT NOCOPY TYSUSCCEMD,
		ISBSUSCTDCO IN OUT NOCOPY TYSUSCTDCO,
		INUSUSCBANC IN OUT NOCOPY TYSUSCBANC,
		ISBSUSCSUBA IN OUT NOCOPY TYSUSCSUBA,
		ISBSUSCCUCO IN OUT NOCOPY TYSUSCCUCO,
		INUSUSCTCBA IN OUT NOCOPY TYSUSCTCBA,
		IDTSUSCVETC IN OUT NOCOPY TYSUSCVETC,
		ISBSUSCTTPA IN OUT NOCOPY TYSUSCTTPA,
		INUSUSCBAPA IN OUT NOCOPY TYSUSCBAPA,
		ISBSUSCSBBP IN OUT NOCOPY TYSUSCSBBP,
		INUSUSCTCBP IN OUT NOCOPY TYSUSCTCBP,
		ISBSUSCCUBP IN OUT NOCOPY TYSUSCCUBP,
		ISBSUSCDECO IN OUT NOCOPY TYSUSCDECO,
		INUSUSCCLIE IN OUT NOCOPY TYSUSCCLIE,
		INUSUSCSIST IN OUT NOCOPY TYSUSCSIST,
		ISBSUSCEFCE IN OUT NOCOPY TYSUSCEFCE,
		INUSUSCTITT IN OUT NOCOPY TYSUSCTITT,
		ISBSUSCIDTT IN OUT NOCOPY TYSUSCIDTT,
		ISBSUSCMAIL IN OUT NOCOPY TYSUSCMAIL,
		INUSUSCENCO IN OUT NOCOPY TYSUSCENCO,
		INUSUSCPRCA IN OUT NOCOPY TYSUSCPRCA,
		INUSUSCSAFA IN OUT NOCOPY TYSUSCSAFA,
		INUSUSCCOEM IN OUT NOCOPY TYSUSCCOEM
	) IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.InsForEachColumnBulk');
		FORALL INDX IN INUSUSCCODI.FIRST .. INUSUSCCODI.LAST
		INSERT INTO SUSCRIPC
		(
			SUSCCODI,
			SUSCTISU,
			SUSCCICL,
			SUSCNUPR,
			SUSCIDDI,
			SUSCTIMO,
			SUSCDETA,
			SUSCCECO,
			SUSCCEMF,
			SUSCCEMD,
			SUSCTDCO,
			SUSCBANC,
			SUSCSUBA,
			SUSCCUCO,
			SUSCTCBA,
			SUSCVETC,
			SUSCTTPA,
			SUSCBAPA,
			SUSCSBBP,
			SUSCTCBP,
			SUSCCUBP,
			SUSCDECO,
			SUSCCLIE,
			SUSCSIST,
			SUSCEFCE,
			SUSCTITT,
			SUSCIDTT,
			SUSCMAIL,
			SUSCENCO,
			SUSCPRCA,
			SUSCSAFA,
			SUSCCOEM
		)
		VALUES
		(
			INUSUSCCODI(INDX),
			INUSUSCTISU(INDX),
			INUSUSCCICL(INDX),
			INUSUSCNUPR(INDX),
			INUSUSCIDDI(INDX),
			ISBSUSCTIMO(INDX),
			ISBSUSCDETA(INDX),
			ISBSUSCCECO(INDX),
			INUSUSCCEMF(INDX),
			INUSUSCCEMD(INDX),
			ISBSUSCTDCO(INDX),
			INUSUSCBANC(INDX),
			ISBSUSCSUBA(INDX),
			ISBSUSCCUCO(INDX),
			INUSUSCTCBA(INDX),
			IDTSUSCVETC(INDX),
			ISBSUSCTTPA(INDX),
			INUSUSCBAPA(INDX),
			ISBSUSCSBBP(INDX),
			INUSUSCTCBP(INDX),
			ISBSUSCCUBP(INDX),
			ISBSUSCDECO(INDX),
			INUSUSCCLIE(INDX),
			INUSUSCSIST(INDX),
			ISBSUSCEFCE(INDX),
			INUSUSCTITT(INDX),
			ISBSUSCIDTT(INDX),
			ISBSUSCMAIL(INDX),
			INUSUSCENCO(INDX),
			INUSUSCPRCA(INDX),
			INUSUSCSAFA(INDX),
			INUSUSCCOEM(INDX)
		);
		PKERRORS.POP;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			ERRORS.SETBSSERROR(CNURECORD_YA_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_YA_EXISTE));
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END INSFOREACHCOLUMNBULK;

	PROCEDURE INSRECORD
	(
		IRCRECORD IN SUSCRIPC%ROWTYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.InsRecord');
		INSERT INTO SUSCRIPC
		(
			SUSCCODI,
			SUSCTISU,
			SUSCCICL,
			SUSCNUPR,
			SUSCIDDI,
			SUSCTIMO,
			SUSCDETA,
			SUSCCECO,
			SUSCCEMF,
			SUSCCEMD,
			SUSCTDCO,
			SUSCBANC,
			SUSCSUBA,
			SUSCCUCO,
			SUSCTCBA,
			SUSCVETC,
			SUSCTTPA,
			SUSCBAPA,
			SUSCSBBP,
			SUSCTCBP,
			SUSCCUBP,
			SUSCDECO,
			SUSCCLIE,
			SUSCSIST,
			SUSCEFCE,
			SUSCTITT,
			SUSCIDTT,
			SUSCMAIL,
			SUSCENCO,
			SUSCPRCA,
			SUSCSAFA,
			SUSCCOEM
		)
		VALUES
		(
			IRCRECORD.SUSCCODI,
			IRCRECORD.SUSCTISU,
			IRCRECORD.SUSCCICL,
			IRCRECORD.SUSCNUPR,
			IRCRECORD.SUSCIDDI,
			IRCRECORD.SUSCTIMO,
			IRCRECORD.SUSCDETA,
			IRCRECORD.SUSCCECO,
			IRCRECORD.SUSCCEMF,
			IRCRECORD.SUSCCEMD,
			IRCRECORD.SUSCTDCO,
			IRCRECORD.SUSCBANC,
			IRCRECORD.SUSCSUBA,
			IRCRECORD.SUSCCUCO,
			IRCRECORD.SUSCTCBA,
			IRCRECORD.SUSCVETC,
			IRCRECORD.SUSCTTPA,
			IRCRECORD.SUSCBAPA,
			IRCRECORD.SUSCSBBP,
			IRCRECORD.SUSCTCBP,
			IRCRECORD.SUSCCUBP,
			IRCRECORD.SUSCDECO,
			IRCRECORD.SUSCCLIE,
			IRCRECORD.SUSCSIST,
			IRCRECORD.SUSCEFCE,
			IRCRECORD.SUSCTITT,
			IRCRECORD.SUSCIDTT,
			IRCRECORD.SUSCMAIL,
			IRCRECORD.SUSCENCO,
			IRCRECORD.SUSCPRCA,
			IRCRECORD.SUSCSAFA,
			IRCRECORD.SUSCCOEM
		);
		PKERRORS.POP;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			ERRORS.SETBSSERROR(CNURECORD_YA_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_YA_EXISTE));
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END INSRECORD;

	PROCEDURE INSRECORDS
	(
		IRCTBRECORD IN OUT NOCOPY TYTBSUSCRIPC
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.InsRecords');
		FORALL INDX IN IRCTBRECORD.SUSCCODI.FIRST .. IRCTBRECORD.SUSCCODI.LAST
		INSERT INTO SUSCRIPC
		(
			SUSCCODI,
			SUSCTISU,
			SUSCCICL,
			SUSCNUPR,
			SUSCIDDI,
			SUSCTIMO,
			SUSCDETA,
			SUSCCECO,
			SUSCCEMF,
			SUSCCEMD,
			SUSCTDCO,
			SUSCBANC,
			SUSCSUBA,
			SUSCCUCO,
			SUSCTCBA,
			SUSCVETC,
			SUSCTTPA,
			SUSCBAPA,
			SUSCSBBP,
			SUSCTCBP,
			SUSCCUBP,
			SUSCDECO,
			SUSCCLIE,
			SUSCSIST,
			SUSCEFCE,
			SUSCTITT,
			SUSCIDTT,
			SUSCMAIL,
			SUSCENCO,
			SUSCPRCA,
			SUSCSAFA,
			SUSCCOEM
		)
		VALUES
		(
			IRCTBRECORD.SUSCCODI(INDX),
			IRCTBRECORD.SUSCTISU(INDX),
			IRCTBRECORD.SUSCCICL(INDX),
			IRCTBRECORD.SUSCNUPR(INDX),
			IRCTBRECORD.SUSCIDDI(INDX),
			IRCTBRECORD.SUSCTIMO(INDX),
			IRCTBRECORD.SUSCDETA(INDX),
			IRCTBRECORD.SUSCCECO(INDX),
			IRCTBRECORD.SUSCCEMF(INDX),
			IRCTBRECORD.SUSCCEMD(INDX),
			IRCTBRECORD.SUSCTDCO(INDX),
			IRCTBRECORD.SUSCBANC(INDX),
			IRCTBRECORD.SUSCSUBA(INDX),
			IRCTBRECORD.SUSCCUCO(INDX),
			IRCTBRECORD.SUSCTCBA(INDX),
			IRCTBRECORD.SUSCVETC(INDX),
			IRCTBRECORD.SUSCTTPA(INDX),
			IRCTBRECORD.SUSCBAPA(INDX),
			IRCTBRECORD.SUSCSBBP(INDX),
			IRCTBRECORD.SUSCTCBP(INDX),
			IRCTBRECORD.SUSCCUBP(INDX),
			IRCTBRECORD.SUSCDECO(INDX),
			IRCTBRECORD.SUSCCLIE(INDX),
			IRCTBRECORD.SUSCSIST(INDX),
			IRCTBRECORD.SUSCEFCE(INDX),
			IRCTBRECORD.SUSCTITT(INDX),
			IRCTBRECORD.SUSCIDTT(INDX),
			IRCTBRECORD.SUSCMAIL(INDX),
			IRCTBRECORD.SUSCENCO(INDX),
			IRCTBRECORD.SUSCPRCA(INDX),
			IRCTBRECORD.SUSCSAFA(INDX),
			IRCTBRECORD.SUSCCOEM(INDX)
		);
		PKERRORS.POP;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			ERRORS.SETBSSERROR(CNURECORD_YA_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_YA_EXISTE));
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END INSRECORDS;

	PROCEDURE UPRECORD
	(
		IRCRECORD IN SUSCRIPC%ROWTYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpRecord');
		UPDATE SUSCRIPC
		SET
				SUSCTISU = IRCRECORD.SUSCTISU,
				SUSCCICL = IRCRECORD.SUSCCICL,
				SUSCNUPR = IRCRECORD.SUSCNUPR,
				SUSCIDDI = IRCRECORD.SUSCIDDI,
				SUSCTIMO = IRCRECORD.SUSCTIMO,
				SUSCDETA = IRCRECORD.SUSCDETA,
				SUSCCECO = IRCRECORD.SUSCCECO,
				SUSCCEMF = IRCRECORD.SUSCCEMF,
				SUSCCEMD = IRCRECORD.SUSCCEMD,
				SUSCTDCO = IRCRECORD.SUSCTDCO,
				SUSCBANC = IRCRECORD.SUSCBANC,
				SUSCSUBA = IRCRECORD.SUSCSUBA,
				SUSCCUCO = IRCRECORD.SUSCCUCO,
				SUSCTCBA = IRCRECORD.SUSCTCBA,
				SUSCVETC = IRCRECORD.SUSCVETC,
				SUSCTTPA = IRCRECORD.SUSCTTPA,
				SUSCBAPA = IRCRECORD.SUSCBAPA,
				SUSCSBBP = IRCRECORD.SUSCSBBP,
				SUSCTCBP = IRCRECORD.SUSCTCBP,
				SUSCCUBP = IRCRECORD.SUSCCUBP,
				SUSCDECO = IRCRECORD.SUSCDECO,
				SUSCCLIE = IRCRECORD.SUSCCLIE,
				SUSCSIST = IRCRECORD.SUSCSIST,
				SUSCEFCE = IRCRECORD.SUSCEFCE,
				SUSCTITT = IRCRECORD.SUSCTITT,
				SUSCIDTT = IRCRECORD.SUSCIDTT,
				SUSCMAIL = IRCRECORD.SUSCMAIL,
				SUSCENCO = IRCRECORD.SUSCENCO,
				SUSCPRCA = IRCRECORD.SUSCPRCA,
				SUSCSAFA = IRCRECORD.SUSCSAFA,
				SUSCCOEM = IRCRECORD.SUSCCOEM
		WHERE	SUSCCODI = IRCRECORD.SUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPRECORD;

	PROCEDURE VALIDATEDUPVALUES
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.ValidateDupValues');
		
		IF ( FBLEXIST( INUSUSCCODI, INUCACHE ) ) THEN
			ERRORS.SETBSSERROR(CNURECORD_YA_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_YA_EXISTE));
			RAISE LOGIN_DENIED;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END VALIDATEDUPVALUES;

	FUNCTION FBLEXIST
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN BOOLEAN IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fblExist');
		
		IF ( INUCACHE = CACHE ) THEN
			IF ( FBLINMEMORY( INUSUSCCODI) )
			THEN
				PKERRORS.POP;
				RETURN( TRUE );
			END IF;
		END IF;
		LOADRECORD( INUSUSCCODI);
		IF ( RCSUSCRIPC.SUSCCODI IS NULL ) THEN
			PKERRORS.POP;
			RETURN( FALSE );
		END IF;
		PKERRORS.POP;
		RETURN( TRUE );
	END FBLEXIST;

	FUNCTION FRCGETRECORD
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC%ROWTYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.frcGetRecord');
		ACCKEY ( INUSUSCCODI, INUCACHE);
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC );
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FRCGETRECORD;

	PROCEDURE UPDSUSCTISU
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCTISU$ IN SUSCRIPC.SUSCTISU%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusctisu');
		UPDATE SUSCRIPC
		SET
			SUSCTISU = INUSUSCTISU$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCTISU;
	PROCEDURE UPDSUSCCICL
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCCICL$ IN SUSCRIPC.SUSCCICL%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusccicl');
		UPDATE SUSCRIPC
		SET
			SUSCCICL = INUSUSCCICL$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCCICL;
	PROCEDURE UPDSUSCNUPR
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCNUPR$ IN SUSCRIPC.SUSCNUPR%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscnupr');
		UPDATE SUSCRIPC
		SET
			SUSCNUPR = INUSUSCNUPR$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCNUPR;
	PROCEDURE UPDSUSCIDDI
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCIDDI$ IN SUSCRIPC.SUSCIDDI%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusciddi');
		UPDATE SUSCRIPC
		SET
			SUSCIDDI = INUSUSCIDDI$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCIDDI;
	PROCEDURE UPDSUSCTIMO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCTIMO$ IN SUSCRIPC.SUSCTIMO%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusctimo');
		UPDATE SUSCRIPC
		SET
			SUSCTIMO = ISBSUSCTIMO$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCTIMO;
	PROCEDURE UPDSUSCDETA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCDETA$ IN SUSCRIPC.SUSCDETA%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscdeta');
		UPDATE SUSCRIPC
		SET
			SUSCDETA = ISBSUSCDETA$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCDETA;
	PROCEDURE UPDSUSCCECO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCCECO$ IN SUSCRIPC.SUSCCECO%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscceco');
		UPDATE SUSCRIPC
		SET
			SUSCCECO = ISBSUSCCECO$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCCECO;
	PROCEDURE UPDSUSCCEMF
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCCEMF$ IN SUSCRIPC.SUSCCEMF%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusccemf');
		UPDATE SUSCRIPC
		SET
			SUSCCEMF = INUSUSCCEMF$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCCEMF;
	PROCEDURE UPDSUSCCEMD
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCCEMD$ IN SUSCRIPC.SUSCCEMD%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusccemd');
		UPDATE SUSCRIPC
		SET
			SUSCCEMD = INUSUSCCEMD$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCCEMD;
	PROCEDURE UPDSUSCTDCO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCTDCO$ IN SUSCRIPC.SUSCTDCO%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusctdco');
		UPDATE SUSCRIPC
		SET
			SUSCTDCO = ISBSUSCTDCO$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCTDCO;
	PROCEDURE UPDSUSCBANC
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCBANC$ IN SUSCRIPC.SUSCBANC%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscbanc');
		UPDATE SUSCRIPC
		SET
			SUSCBANC = INUSUSCBANC$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCBANC;
	PROCEDURE UPDSUSCSUBA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCSUBA$ IN SUSCRIPC.SUSCSUBA%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscsuba');
		UPDATE SUSCRIPC
		SET
			SUSCSUBA = ISBSUSCSUBA$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCSUBA;
	PROCEDURE UPDSUSCCUCO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCCUCO$ IN SUSCRIPC.SUSCCUCO%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusccuco');
		UPDATE SUSCRIPC
		SET
			SUSCCUCO = ISBSUSCCUCO$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCCUCO;
	PROCEDURE UPDSUSCTCBA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCTCBA$ IN SUSCRIPC.SUSCTCBA%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusctcba');
		UPDATE SUSCRIPC
		SET
			SUSCTCBA = INUSUSCTCBA$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCTCBA;
	PROCEDURE UPDSUSCVETC
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		IDTSUSCVETC$ IN SUSCRIPC.SUSCVETC%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscvetc');
		UPDATE SUSCRIPC
		SET
			SUSCVETC = IDTSUSCVETC$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCVETC;
	PROCEDURE UPDSUSCTTPA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCTTPA$ IN SUSCRIPC.SUSCTTPA%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscttpa');
		UPDATE SUSCRIPC
		SET
			SUSCTTPA = ISBSUSCTTPA$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCTTPA;
	PROCEDURE UPDSUSCBAPA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCBAPA$ IN SUSCRIPC.SUSCBAPA%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscbapa');
		UPDATE SUSCRIPC
		SET
			SUSCBAPA = INUSUSCBAPA$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCBAPA;
	PROCEDURE UPDSUSCSBBP
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCSBBP$ IN SUSCRIPC.SUSCSBBP%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscsbbp');
		UPDATE SUSCRIPC
		SET
			SUSCSBBP = ISBSUSCSBBP$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCSBBP;
	PROCEDURE UPDSUSCTCBP
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCTCBP$ IN SUSCRIPC.SUSCTCBP%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusctcbp');
		UPDATE SUSCRIPC
		SET
			SUSCTCBP = INUSUSCTCBP$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCTCBP;
	PROCEDURE UPDSUSCCUBP
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCCUBP$ IN SUSCRIPC.SUSCCUBP%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusccubp');
		UPDATE SUSCRIPC
		SET
			SUSCCUBP = ISBSUSCCUBP$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCCUBP;
	PROCEDURE UPDSUSCDECO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCDECO$ IN SUSCRIPC.SUSCDECO%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscdeco');
		UPDATE SUSCRIPC
		SET
			SUSCDECO = ISBSUSCDECO$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCDECO;
	PROCEDURE UPDSUSCCLIE
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCCLIE$ IN SUSCRIPC.SUSCCLIE%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscclie');
		UPDATE SUSCRIPC
		SET
			SUSCCLIE = INUSUSCCLIE$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCCLIE;
	PROCEDURE UPDSUSCSIST
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCSIST$ IN SUSCRIPC.SUSCSIST%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscsist');
		UPDATE SUSCRIPC
		SET
			SUSCSIST = INUSUSCSIST$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCSIST;
	PROCEDURE UPDSUSCEFCE
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCEFCE$ IN SUSCRIPC.SUSCEFCE%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscefce');
		UPDATE SUSCRIPC
		SET
			SUSCEFCE = ISBSUSCEFCE$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCEFCE;
	PROCEDURE UPDSUSCTITT
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCTITT$ IN SUSCRIPC.SUSCTITT%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusctitt');
		UPDATE SUSCRIPC
		SET
			SUSCTITT = INUSUSCTITT$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCTITT;
	PROCEDURE UPDSUSCIDTT
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCIDTT$ IN SUSCRIPC.SUSCIDTT%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscidtt');
		UPDATE SUSCRIPC
		SET
			SUSCIDTT = ISBSUSCIDTT$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCIDTT;
	PROCEDURE UPDSUSCMAIL
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		ISBSUSCMAIL$ IN SUSCRIPC.SUSCMAIL%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscmail');
		UPDATE SUSCRIPC
		SET
			SUSCMAIL = ISBSUSCMAIL$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCMAIL;
	PROCEDURE UPDSUSCENCO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCENCO$ IN SUSCRIPC.SUSCENCO%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscenco');
		UPDATE SUSCRIPC
		SET
			SUSCENCO = INUSUSCENCO$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCENCO;
	PROCEDURE UPDSUSCPRCA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCPRCA$ IN SUSCRIPC.SUSCPRCA%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscprca');
		UPDATE SUSCRIPC
		SET
			SUSCPRCA = INUSUSCPRCA$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCPRCA;
	PROCEDURE UPDSUSCSAFA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCSAFA$ IN SUSCRIPC.SUSCSAFA%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSuscsafa');
		UPDATE SUSCRIPC
		SET
			SUSCSAFA = INUSUSCSAFA$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCSAFA;
	PROCEDURE UPDSUSCCOEM
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUSUSCCOEM$ IN SUSCRIPC.SUSCCOEM%TYPE
	)
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.UpdSusccoem');
		UPDATE SUSCRIPC
		SET
			SUSCCOEM = INUSUSCCOEM$
		WHERE  SUSCCODI = INUSUSCCODI;
		IF ( SQL%NOTFOUND ) THEN
			PKERRORS.POP;
			RAISE NO_DATA_FOUND;
		END IF;
		PKERRORS.POP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
			RAISE LOGIN_DENIED;
	END UPDSUSCCOEM;
	FUNCTION FNUGETSUSCCODI
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCCODI%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusccodi');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCCODI);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCCODI;
	FUNCTION FNUGETSUSCTISU
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCTISU%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusctisu');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCTISU);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCTISU;
	FUNCTION FNUGETSUSCCICL
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCCICL%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusccicl');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCCICL);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCCICL;
	FUNCTION FNUGETSUSCNUPR
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCNUPR%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSuscnupr');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCNUPR);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCNUPR;
	FUNCTION FNUGETSUSCIDDI
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCIDDI%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusciddi');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCIDDI);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCIDDI;
	FUNCTION FSBGETSUSCTIMO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCTIMO%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSusctimo');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCTIMO);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCTIMO;
	FUNCTION FSBGETSUSCDETA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCDETA%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSuscdeta');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCDETA);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCDETA;
	FUNCTION FSBGETSUSCCECO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCCECO%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSuscceco');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCCECO);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCCECO;
	FUNCTION FNUGETSUSCCEMF
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCCEMF%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusccemf');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCCEMF);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCCEMF;
	FUNCTION FNUGETSUSCCEMD
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCCEMD%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusccemd');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCCEMD);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCCEMD;
	FUNCTION FSBGETSUSCTDCO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCTDCO%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSusctdco');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCTDCO);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCTDCO;
	FUNCTION FNUGETSUSCBANC
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCBANC%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSuscbanc');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCBANC);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCBANC;
	FUNCTION FSBGETSUSCSUBA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCSUBA%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSuscsuba');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCSUBA);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCSUBA;
	FUNCTION FSBGETSUSCCUCO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCCUCO%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSusccuco');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCCUCO);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCCUCO;
	FUNCTION FNUGETSUSCTCBA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCTCBA%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusctcba');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCTCBA);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCTCBA;
	FUNCTION FDTGETSUSCVETC
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCVETC%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fdtGetSuscvetc');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCVETC);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FDTGETSUSCVETC;
	FUNCTION FSBGETSUSCTTPA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCTTPA%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSuscttpa');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCTTPA);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCTTPA;
	FUNCTION FNUGETSUSCBAPA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCBAPA%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSuscbapa');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCBAPA);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCBAPA;
	FUNCTION FSBGETSUSCSBBP
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCSBBP%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSuscsbbp');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCSBBP);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCSBBP;
	FUNCTION FNUGETSUSCTCBP
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCTCBP%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusctcbp');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCTCBP);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCTCBP;
	FUNCTION FSBGETSUSCCUBP
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCCUBP%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSusccubp');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCCUBP);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCCUBP;
	FUNCTION FSBGETSUSCDECO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCDECO%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSuscdeco');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCDECO);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCDECO;
	FUNCTION FNUGETSUSCCLIE
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCCLIE%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSuscclie');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCCLIE);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCCLIE;
	FUNCTION FNUGETSUSCSIST
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCSIST%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSuscsist');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCSIST);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCSIST;
	FUNCTION FSBGETSUSCEFCE
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCEFCE%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSuscefce');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCEFCE);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCEFCE;
	FUNCTION FNUGETSUSCTITT
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCTITT%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusctitt');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCTITT);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCTITT;
	FUNCTION FSBGETSUSCIDTT
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCIDTT%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSuscidtt');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCIDTT);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCIDTT;
	FUNCTION FSBGETSUSCMAIL
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCMAIL%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fsbGetSuscmail');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCMAIL);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FSBGETSUSCMAIL;
	FUNCTION FNUGETSUSCENCO
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCENCO%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSuscenco');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCENCO);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCENCO;
	FUNCTION FNUGETSUSCPRCA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCPRCA%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSuscprca');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCPRCA);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCPRCA;
	FUNCTION FNUGETSUSCSAFA
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCSAFA%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSuscsafa');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCSAFA);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCSAFA;
	FUNCTION FNUGETSUSCCOEM
	(
		INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
		INUCACHE IN NUMBER DEFAULT 1
	)
	RETURN SUSCRIPC.SUSCCOEM%TYPE
	IS
	BEGIN
		PKERRORS.PUSH('pktblSuscripc.fnuGetSusccoem');
		ACCKEY ( INUSUSCCODI, INUCACHE );
		PKERRORS.POP;
		RETURN ( RCSUSCRIPC.SUSCCOEM);
	EXCEPTION
		WHEN LOGIN_DENIED THEN
			PKERRORS.POP;
			RAISE LOGIN_DENIED;
	END FNUGETSUSCCOEM;
FUNCTION FNUGETBILLINGCYCLE
     (
         INUSUSCRIPCION	IN	SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE	IN	NUMBER DEFAULT 1
     )
     RETURN NUMBER IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.fnuGetBillingCycle');
     ACCKEY( INUSUSCRIPCION, INUCACHE );
     PKERRORS.POP;
     RETURN( RCSUSCRIPC.SUSCCICL );
     EXCEPTION
     WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE;
 END FNUGETBILLINGCYCLE;


FUNCTION FNUGETPOSITIVEBAL
     (
         INUSUSC		IN	SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE	IN	NUMBER DEFAULT 1
     )
     RETURN NUMBER IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.fnuGetPositiveBal');
     ACCKEY( INUSUSC, INUCACHE );
     PKERRORS.POP;
     RETURN( NVL( RCSUSCRIPC.SUSCSAFA, PKBILLCONST.CERO ) );
     EXCEPTION
     WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE;
 END FNUGETPOSITIVEBAL;


FUNCTION FNUGETCUSTOMER
     (
         INUSUSCCODI        IN	SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE           IN	NUMBER DEFAULT 1
     )
 RETURN NUMBER
 IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.fsbGetCustomer');
     ACCKEY ( INUSUSCCODI ,INUCACHE );
     PKERRORS.POP;
     RETURN ( RCSUSCRIPC.SUSCCLIE);
     EXCEPTION
         WHEN LOGIN_DENIED THEN
             PKERRORS.POP;
             RAISE;
 END FNUGETCUSTOMER;


PROCEDURE UPCYCLE
     (
         INUSUSCCODI	IN	SUSCRIPC.SUSCCODI%TYPE,
         INUSUSCCICL	IN	SUSCRIPC.SUSCCICL%TYPE
 )
     IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.UpCycle');
     UPDATE SUSCRIPC
     SET SUSCCICL=INUSUSCCICL
     WHERE  SUSCCODI = INUSUSCCODI;
     IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
     END IF;
     PKERRORS.POP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
         RAISE LOGIN_DENIED;
 END  UPCYCLE;


FUNCTION FNUGETTYPESUSCRIPTION
     (
         INUSUSCCODI        IN	SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE           IN	NUMBER DEFAULT 1
     )
 RETURN NUMBER
 IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.fnuGetTypeSuscription');
     ACCKEY ( INUSUSCCODI ,INUCACHE );
     PKERRORS.POP;
     RETURN ( RCSUSCRIPC.SUSCTISU);
     EXCEPTION
         WHEN LOGIN_DENIED THEN
             PKERRORS.POP;
             RAISE;
 END FNUGETTYPESUSCRIPTION;


PROCEDURE UPCLIENT
     (
         INUSUSCCODI	IN	SUSCRIPC.SUSCCODI%TYPE,
         INUSUSCCLIE	IN	SUSCRIPC.SUSCCLIE%TYPE
     )
     IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.UpClient');
     UPDATE SUSCRIPC
     SET SUSCCLIE=INUSUSCCLIE
     WHERE  SUSCCODI = INUSUSCCODI;
     IF SQL%NOTFOUND THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
     END IF;
     PKERRORS.POP;
     EXCEPTION
         WHEN NO_DATA_FOUND THEN
             PKERRORS.SETERRORCODE( CNURECORD_NO_EXISTE );
             RAISE LOGIN_DENIED;
 END  UPCLIENT;


PROCEDURE UPACCORECEIV
     (
         INUSUSC		IN	SUSCRIPC.SUSCCODI%TYPE,
         INUSALDFAV	IN	SUSCRIPC.SUSCSAFA%TYPE
     )
     IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.UpAccoReceiv');
     UPDATE SUSCRIPC
     SET    SUSCSAFA = INUSALDFAV
     WHERE  SUSCCODI = INUSUSC;
     IF ( SQL%NOTFOUND ) THEN
 	PKERRORS.POP;
 	RAISE NO_DATA_FOUND;
     END IF;
     PKERRORS.POP;
     EXCEPTION
     	WHEN NO_DATA_FOUND THEN
         PKERRORS.SETERRORCODE( CNURECORD_NO_EXISTE );
         RAISE LOGIN_DENIED;
 END UPACCORECEIV;


PROCEDURE UPPROCESSNUMBER
     (
         INUSUSCCODI	IN	SUSCRIPC.SUSCCODI%TYPE,
         INUSUSCNUPR	IN	SUSCRIPC.SUSCNUPR%TYPE
     )
     IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.UpProcessNumber');
     UPDATE SUSCRIPC
     SET    SUSCNUPR = INUSUSCNUPR
     WHERE  SUSCCODI = INUSUSCCODI;
     IF ( SQL%NOTFOUND ) THEN
         PKERRORS.POP;
         RAISE NO_DATA_FOUND;
     END IF;
     PKERRORS.POP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
 	PKERRORS.SETERRORCODE( CNURECORD_NO_EXISTE );
 	RAISE LOGIN_DENIED;
 END UPPROCESSNUMBER;


FUNCTION FNUGETPROCESSNUMBER
     (
         INUSUSC		IN	SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE	IN	NUMBER DEFAULT 1
     )
     RETURN NUMBER
     IS

 BEGIN

     PKERRORS.PUSH('pktblSuscripc.fnuGetProcessNumber');

     ACCKEY (INUSUSC, INUCACHE);

     PKERRORS.POP;
     RETURN (RCSUSCRIPC.SUSCNUPR);

 EXCEPTION
     WHEN LOGIN_DENIED THEN
 	PKERRORS.POP;
 	RAISE LOGIN_DENIED;

 END FNUGETPROCESSNUMBER;


PROCEDURE LOCKACCKEY
     (
 	INUSUSCRIPCION 	IN	SUSCRIPC.SUSCCODI%TYPE
     )
     IS
         CURSOR CULCKACCKEY
     (
 	NUSUSCRIPCION	IN	SUSCRIPC.SUSCCODI%TYPE
     )
     IS
     SELECT *
     FROM   SUSCRIPC
     WHERE  SUSCCODI = NUSUSCRIPCION
     FOR UPDATE;
     RCLOCKRECORD	SUSCRIPC%ROWTYPE;
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.LockAccKey');
         OPEN CULCKACCKEY (INUSUSCRIPCION);
     FETCH CULCKACCKEY INTO RCLOCKRECORD;
     IF (CULCKACCKEY%NOTFOUND) THEN
 	CLOSE CULCKACCKEY;
 	RAISE NO_DATA_FOUND;
     END IF;
     CLOSE CULCKACCKEY;
     PKERRORS.POP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
 	PKERRORS.POP;
         RAISE LOGIN_DENIED;
 END LOCKACCKEY;


FUNCTION FNUGETADDRESS_ID
     (
         INUSUSCCODI        IN	SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE           IN	NUMBER DEFAULT 1
     )
 RETURN NUMBER
 IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.fnuGetAddress_id');
     ACCKEY ( INUSUSCCODI ,INUCACHE );
     PKERRORS.POP;
     RETURN ( RCSUSCRIPC.SUSCIDDI);
     EXCEPTION
         WHEN LOGIN_DENIED THEN
             PKERRORS.POP;
             RAISE;
 END FNUGETADDRESS_ID;


FUNCTION FSBGETCOLLECTTYPEADDRESS
     (
         INUSUSCCODI        IN	SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE           IN	NUMBER DEFAULT 1
     )
 RETURN VARCHAR2
 IS
 BEGIN
     PKERRORS.PUSH('pktblDicocobr.fsbGetCollectTypeAddress');
     ACCKEY ( INUSUSCCODI ,INUCACHE );
     PKERRORS.POP;
     RETURN ( RCSUSCRIPC.SUSCTDCO);
     EXCEPTION
         WHEN LOGIN_DENIED THEN
             PKERRORS.POP;
             RAISE LOGIN_DENIED;
 END FSBGETCOLLECTTYPEADDRESS;


PROCEDURE UPADDRESSTYPE
     (
         INUDCCOCODI IN SUSCRIPC.SUSCCODI%TYPE,
         ISBDCCOTDCO IN SUSCRIPC.SUSCTDCO%TYPE
 )
     IS
 BEGIN
     PKERRORS.PUSH('pktblDicocobr.UpAddressType');

     UPDATE SUSCRIPC
        SET SUSCTDCO = ISBDCCOTDCO
      WHERE SUSCCODI = INUDCCOCODI;

     IF ( SQL%NOTFOUND ) THEN
             PKERRORS.POP;
         RAISE NO_DATA_FOUND;
         END IF;
     PKERRORS.POP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
         RAISE LOGIN_DENIED;
 END  UPADDRESSTYPE;


PROCEDURE UPSUBSCRIPTIONTYPE
 (
     INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
     INUSUSCTISU IN SUSCRIPC.SUSCTISU%TYPE
 )
     IS
 BEGIN
     PKERRORS.PUSH('pktblDicocobr.UpSubscriptionType');

     UPDATE SUSCRIPC
        SET SUSCTISU = INUSUSCTISU
      WHERE SUSCCODI = INUSUSCCODI;

     IF ( SQL%NOTFOUND ) THEN
             PKERRORS.POP;
         RAISE NO_DATA_FOUND;
         END IF;
     PKERRORS.POP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
         RAISE LOGIN_DENIED;
 END  UPSUBSCRIPTIONTYPE;


PROCEDURE UPMONEYTYPE
 (
     INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
     INUSUSCTIMO IN SUSCRIPC.SUSCTIMO%TYPE
 )
     IS
 BEGIN
     PKERRORS.PUSH('pktblDicocobr.UpMoneyType');

     UPDATE SUSCRIPC
        SET SUSCTIMO = INUSUSCTIMO
      WHERE SUSCCODI = INUSUSCCODI;

     IF ( SQL%NOTFOUND ) THEN
             PKERRORS.POP;
         RAISE NO_DATA_FOUND;
         END IF;
     PKERRORS.POP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
         RAISE LOGIN_DENIED;
 END  UPMONEYTYPE;


PROCEDURE UPCUSTOMERBANK
 (
     INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
     INUSUSCBANC IN SUSCRIPC.SUSCBANC%TYPE
 )
     IS
 BEGIN
     PKERRORS.PUSH('pktblDicocobr.UpCustomerBank');

     UPDATE SUSCRIPC
        SET SUSCBANC = INUSUSCBANC
      WHERE SUSCCODI = INUSUSCCODI;

     IF ( SQL%NOTFOUND ) THEN
             PKERRORS.POP;
         RAISE NO_DATA_FOUND;
         END IF;
     PKERRORS.POP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
         RAISE LOGIN_DENIED;
 END  UPCUSTOMERBANK;


PROCEDURE UPBANKBRANCH
 (
     INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
     INUSUSCBANC IN SUSCRIPC.SUSCBANC%TYPE,
     INUSUSCSUBA IN SUSCRIPC.SUSCSUBA%TYPE
 )
     IS
 BEGIN
     PKERRORS.PUSH('pktblDicocobr.UpBankBranch');

     UPDATE SUSCRIPC
        SET SUSCSUBA = INUSUSCSUBA,
            SUSCBANC = INUSUSCBANC
      WHERE SUSCCODI = INUSUSCCODI;

     IF ( SQL%NOTFOUND ) THEN
             PKERRORS.POP;
         RAISE NO_DATA_FOUND;
         END IF;
     PKERRORS.POP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
         RAISE LOGIN_DENIED;
 END  UPBANKBRANCH;


PROCEDURE UPCOLLECTADDRESS
 (
     INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
     INUSUSCIDDI IN SUSCRIPC.SUSCIDDI%TYPE
 )
     IS
 BEGIN
     PKERRORS.PUSH('pktblDicocobr.UpCollectAddress');

     UPDATE SUSCRIPC
        SET SUSCIDDI = INUSUSCIDDI
      WHERE SUSCCODI = INUSUSCCODI;

     IF ( SQL%NOTFOUND ) THEN
             PKERRORS.POP;
         RAISE NO_DATA_FOUND;
         END IF;
     PKERRORS.POP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
         ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
         RAISE LOGIN_DENIED;
 END  UPCOLLECTADDRESS;


FUNCTION FSBGETMONEYTYPE
     (
         INUSUSCCODI        IN	SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE           IN	NUMBER DEFAULT 1
     )
 RETURN VARCHAR2
 IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.fsbGetMoneyType');
     ACCKEY ( INUSUSCCODI ,INUCACHE );
     PKERRORS.POP;
     RETURN ( RCSUSCRIPC.SUSCTIMO);
     EXCEPTION
         WHEN LOGIN_DENIED THEN
             PKERRORS.POP;
             RAISE;
 END FSBGETMONEYTYPE;


FUNCTION FNUGETCOMPANY
     (
         INUSUSCCODI        IN	SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE           IN	NUMBER DEFAULT 1
     )
 RETURN NUMBER
 IS
 BEGIN
     PKERRORS.PUSH('pktblSuscripc.fnuGetCompany');
     ACCKEY ( INUSUSCCODI ,INUCACHE );
     PKERRORS.POP;
     RETURN ( RCSUSCRIPC.SUSCSIST);
     EXCEPTION
         WHEN LOGIN_DENIED THEN
             PKERRORS.POP;
             RAISE;
 END FNUGETCOMPANY;


FUNCTION FNUOBTENERBANCORECAUDO
     (
         INUSUSCRIPCION  IN  SUSCRIPC.SUSCCODI%TYPE
     )
         RETURN SUSCRIPC.SUSCBANC%TYPE
     IS


                 CURSOR CUBANCORECAUDO
         (
             INUSUSCRIPCION  IN  SUSCRIPC.SUSCCODI%TYPE
         )
         IS
             SELECT                      SUSCBANC
             FROM    SUSCRIPC
             WHERE   SUSCCODI = INUSUSCRIPCION;


                 NUBANCORECAUDO  SUSCRIPC.SUSCBANC%TYPE;

     BEGIN

         PKERRORS.PUSH
         (
             'pktblSuscripc.fnuObtenerBancoRecaudo'
         );

         IF( CUBANCORECAUDO%ISOPEN ) THEN
                     CLOSE CUBANCORECAUDO;
                 END IF;

         OPEN    CUBANCORECAUDO
                 (
                     INUSUSCRIPCION
                 );

                 FETCH   CUBANCORECAUDO
         INTO    NUBANCORECAUDO;

                 IF( CUBANCORECAUDO%NOTFOUND ) THEN
                     CLOSE CUBANCORECAUDO;
             PKERRORS.POP;
             RAISE NO_DATA_FOUND;
                 END IF;

         CLOSE CUBANCORECAUDO;

         PKERRORS.POP;

         RETURN NUBANCORECAUDO;

     EXCEPTION
         WHEN NO_DATA_FOUND THEN
            ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
            RAISE LOGIN_DENIED;
    END FNUOBTENERBANCORECAUDO;


PROCEDURE UPDATECOLLECTIONPROGRAM
     (
         INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
         INUSUSCPRCA IN SUSCRIPC.SUSCPRCA%TYPE
     )
         IS
     BEGIN
             PKERRORS.PUSH('pktblDicocobr.UpDateCollectionProgram');

         UPDATE SUSCRIPC
            SET SUSCPRCA = INUSUSCPRCA
          WHERE SUSCCODI = INUSUSCCODI;

         IF ( SQL%NOTFOUND ) THEN
                     PKERRORS.POP;
             RAISE NO_DATA_FOUND;
                 END IF;
         PKERRORS.POP;
     EXCEPTION
         WHEN NO_DATA_FOUND THEN
             ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
             RAISE LOGIN_DENIED;
         END  UPDATECOLLECTIONPROGRAM;


PROCEDURE GETACCOUNTCOLLECTOR
     (
         INUSUSCCODI IN SUSCRIPC.SUSCCODI%TYPE,
         ONUSUSCENCO OUT SUSCRIPC.SUSCENCO%TYPE
     )
     IS
     BEGIN
         PKERRORS.PUSH('pktblServsusc.GetAccountCollector');
                 ACCKEY ( INUSUSCCODI );
         ONUSUSCENCO := RCSUSCRIPC.SUSCENCO;
         PKERRORS.POP;
     EXCEPTION
         WHEN LOGIN_DENIED THEN
     	PKERRORS.POP;
     	RAISE LOGIN_DENIED;
     END GETACCOUNTCOLLECTOR;


FUNCTION FNUGETCOLLECTPROGRAM
     (
         INUSUSCCODI     IN       SUSCRIPC.SUSCCODI%TYPE,
         INUCACHE        IN       NUMBER DEFAULT 1
     )
     RETURN SUSCRIPC.SUSCPRCA%TYPE
     IS
        NUSUSCPRCA	SUSCRIPC.SUSCPRCA%TYPE;
     BEGIN
         PKERRORS.PUSH('pktblSuscripc.fnuGetCollectProgram');
                 ACCKEY (INUSUSCCODI, INUCACHE );
                 NUSUSCPRCA := RCSUSCRIPC.SUSCPRCA;
                         IF ( NUSUSCPRCA IS NULL ) THEN
                         
             PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
                                    PKCONSTANTE.CSBMOD_ARE,
                                    PKCONSTACCOUNTRECEIV.CNUSUSC_OUTOF_COLLE_PROGR );
             RAISE LOGIN_DENIED;
         END IF;
         PKERRORS.POP;
         RETURN ( NUSUSCPRCA );
     EXCEPTION
         WHEN LOGIN_DENIED THEN
     	PKERRORS.POP;
     	RAISE LOGIN_DENIED;
     END FNUGETCOLLECTPROGRAM;


PROCEDURE UPDATEACTNCOLLECTOR
         (
             INUSUSCCODI        IN   SUSCRIPC.SUSCCODI%TYPE,
             INUSUSCENCO        IN   SUSCRIPC.SUSCENCO%TYPE,
             INUCACHE           IN   NUMBER DEFAULT 1
         )
     IS
     BEGIN
             PKERRORS.PUSH('pktblSuscripc.UpDateActnCollector');
         UPDATE  SUSCRIPC
         SET     SUSCENCO = INUSUSCENCO
         WHERE   SUSCCODI = INUSUSCCODI;
         IF ( SQL%NOTFOUND ) THEN
     	PKERRORS.POP;
     	RAISE NO_DATA_FOUND;
         END IF;
         PKERRORS.POP;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
     	          ERRORS.SETBSSERROR(CNURECORD_NO_EXISTE,FSBGETMESSAGEDESCRIPTION(CNURECORD_NO_EXISTE));
     	RAISE LOGIN_DENIED;
         END UPDATEACTNCOLLECTOR;





END PKTBLSUSCRIPC;