
CREATE OR REPLACE PACKAGE BODY OR_BONOTIFYORDER IS
   CSBVERSION CONSTANT VARCHAR2( 50 ) := 'SAO234144';
   GNUORDERMODULE GE_MODULE.MODULE_ID%TYPE;
   CNUDEFAULT_NOTIFICATION CONSTANT VARCHAR2( 50 ) := 'DEFAULT_NOTIFICATION';
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE LOADPARAMETER
    IS
      CSBPARM_ORDERMODULE CONSTANT VARCHAR2( 40 ) := 'ORDERS_MODULE';
    BEGIN
      GNUORDERMODULE := GE_BOPARAMETER.FNUGET( CSBPARM_ORDERMODULE );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END LOADPARAMETER;
   FUNCTION FNUGETFEFAULTNOTIFIED
    RETURN NUMBER
    IS
      NUFEFAULTNOTIFIED GE_NOTIFICATION.NOTIFICATION_ID%TYPE := NULL;
    BEGIN
      IF DAGE_PARAMETER.FBLEXIST( CNUDEFAULT_NOTIFICATION ) THEN
         NUFEFAULTNOTIFIED := GE_BOPARAMETER.FNUGET( CNUDEFAULT_NOTIFICATION );
      END IF;
      RETURN NUFEFAULTNOTIFIED;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETFEFAULTNOTIFIED;
   FUNCTION FNUGETRECNUMBERCONFIG( INUTASKTYPE IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE, INUOPERUNIT IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE )
    RETURN NUMBER
    IS
      NUCOUNTER NUMBER := 0;
      CURSOR CU_RECORDNUMBER( NUTASKTYPE IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE, NUOPERUNIT IN OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE ) IS
SELECT count(*) 
            FROM   Or_OpUni_TskTyp_Noti 
            WHERE  Task_Type_Id = nuTaskType 
              AND  Operating_Unit_Id = nuOperUnit;
    BEGIN
      OPEN CU_RECORDNUMBER( INUTASKTYPE, INUOPERUNIT );
      FETCH CU_RECORDNUMBER
         INTO NUCOUNTER;
      CLOSE CU_RECORDNUMBER;
      RETURN NUCOUNTER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CU_RECORDNUMBER%ISOPEN ) THEN
            CLOSE CU_RECORDNUMBER;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( CU_RECORDNUMBER%ISOPEN ) THEN
            CLOSE CU_RECORDNUMBER;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUGETRECNUMBERCONFIG;
   FUNCTION FNUDECIDEEXPRESSIONTOEXECUTE( IRCORDER IN DAOR_ORDER.STYOR_ORDER, IRCEXTSYSID IN DAOR_EXTERN_SYSTEMS_ID.STYOR_EXTERN_SYSTEMS_ID )
    RETURN NUMBER
    IS
      RCEXPRDATAINST OR_BOINSTANCE.TYRCEXPRESSDATAINSTANCE := NULL;
      RCOPEUNITASTYPNOT OR_OPUNI_TSKTYP_NOTI%ROWTYPE;
      NUREGCOUNTER NUMBER := 0;
      NUREGNULLCOUNTER NUMBER := 0;
      TBNOTICONFEXPR TYTBOPEUNITASTYPCONFEXPR;
      TBNOTTASCONFEXPR TYTBTASTYPCONFEXPR;
      NUPOSITION NUMBER;
      TBCONFEXPR DAGR_CONFIG_EXPRESSION.TYTBCONFIG_EXPRESSION_ID;
      NUINSTANCEID OR_WF_INTERFACE.WF_TASK_ID%TYPE;
      NUNOTIFICA OR_NOTIF_TIPO_TRABA.ID_NOTIFICACION%TYPE;
      RCTASTYPNOT OR_NOTIF_TIPO_TRABA%ROWTYPE;
      OSBRESULT VARCHAR2( 250 );
      CURSOR CU_NOTIFEXPRESSION( NUTASKTYPE IN OR_OPUNI_TSKTYP_NOTI.TASK_TYPE_ID%TYPE, NUOPERUNIT IN OR_OPUNI_TSKTYP_NOTI.OPERATING_UNIT_ID%TYPE ) IS
SELECT /*+ INDEX (Or_OpUni_TskTyp_Noti PK_OR_OPUNI_TSKTYP_NOTI)*/*
            FROM   Or_OpUni_TskTyp_Noti
            WHERE  Task_Type_Id = nuTaskType
              AND  Operating_Unit_Id = nuOperUnit;
      CURSOR CU_NOTIFEXPRTASKTYPE( NUTASKTYPE IN OR_NOTIF_TIPO_TRABA.ID_TIPO_TRABAJO%TYPE ) IS
SELECT /*+ INDEX (or_notif_tipo_traba UX_OR_NOTIF_TIPO_TRABA01)*/
                    *
            FROM   or_notif_tipo_traba
            WHERE  id_tipo_trabajo = nuTaskType;
      CNUERR_DOTNOEXISTCONF CONSTANT NUMBER := 2789;
      CNUERR_EXISMORENULLCONF CONSTANT NUMBER := 1280;
      CNUERR_NULLCONFFOUND CONSTANT NUMBER := 2801;
      CNUERR_NOTHINGRETURNSUCCESS CONSTANT NUMBER := 2820;
      NUFEFAULTNOTIFIED GE_NOTIFICATION.NOTIFICATION_ID%TYPE;
    BEGIN
      IF DAOR_WF_INTERFACE.FBLEXIST( IRCORDER.ORDER_ID ) THEN
         NUINSTANCEID := DAOR_WF_INTERFACE.FNUGETWF_TASK_ID( IRCORDER.ORDER_ID );
      END IF;
      RCEXPRDATAINST.ORDER_ID := IRCORDER.ORDER_ID;
      RCEXPRDATAINST.TASK_TYPE_ID := IRCORDER.TASK_TYPE_ID;
      RCEXPRDATAINST.EXTERN_SYSTEM_ID := IRCEXTSYSID.EXTERN_SYSTEM_ID;
      RCEXPRDATAINST.EXTE_SYST_TYPE_ID := IRCEXTSYSID.EXTE_SYST_TYPE_ID;
      RCEXPRDATAINST.FATHE_EXTER_SYSTE_ID := IRCEXTSYSID.FATHE_EXTER_SYSTE_ID;
      RCEXPRDATAINST.FAT_EXT_SYS_TYP_ID := IRCEXTSYSID.FAT_EXT_SYS_TYP_ID;
      RCEXPRDATAINST.INSTANCE_ID := NUINSTANCEID;
      OPEN CU_NOTIFEXPRESSION( IRCORDER.TASK_TYPE_ID, IRCORDER.OPERATING_UNIT_ID );
      FETCH CU_NOTIFEXPRESSION
         INTO RCOPEUNITASTYPNOT;
      IF ( CU_NOTIFEXPRESSION%NOTFOUND ) THEN
         IF ( CU_NOTIFEXPRESSION%ISOPEN ) THEN
            CLOSE CU_NOTIFEXPRESSION;
         END IF;
         IF ( CU_NOTIFEXPRTASKTYPE%ISOPEN ) THEN
            CLOSE CU_NOTIFEXPRTASKTYPE;
         END IF;
         OPEN CU_NOTIFEXPRTASKTYPE( IRCORDER.TASK_TYPE_ID );
         FETCH CU_NOTIFEXPRTASKTYPE
            INTO RCTASTYPNOT;
         IF RCTASTYPNOT.ID_NOTIFICACION IS NOT NULL THEN
            IF RCTASTYPNOT.CONFIG_EXPRESSION_ID IS NOT NULL THEN
               TBNOTICONFEXPR( 0 ).NOTIFICATION_ID := RCTASTYPNOT.ID_NOTIFICACION;
               TBNOTICONFEXPR( 0 ).CONFIG_EXPRESSION_ID := RCTASTYPNOT.CONFIG_EXPRESSION_ID;
               TBCONFEXPR := OR_BOEXPRESSIONS.FTBCONFEXPRTABLE( TBNOTICONFEXPR );
               OR_BOEXPRESSIONS.RESOLVERESULTFROMEXPRESSIONS( RCEXPRDATAINST, TBCONFEXPR, NUPOSITION, OSBRESULT );
               IF ( NUPOSITION = OR_BOCONSTANTS.CNUUNSUCCESS ) THEN
                  ERRORS.SETERROR( CNUERR_NOTHINGRETURNSUCCESS, TO_CHAR( IRCORDER.OPERATING_UNIT_ID ) || '|' || TO_CHAR( IRCORDER.TASK_TYPE_ID ) );
                  RAISE EX.CONTROLLED_ERROR;
               END IF;
               IF ( NUPOSITION = OR_BOCONSTANTS.CNUSUCCESS ) AND OSBRESULT IS NOT NULL THEN
                  RETURN OSBRESULT;
                ELSE
                  RETURN RCTASTYPNOT.ID_NOTIFICACION;
               END IF;
             ELSE
               RETURN RCTASTYPNOT.ID_NOTIFICACION;
            END IF;
          ELSE
            NUFEFAULTNOTIFIED := FNUGETFEFAULTNOTIFIED;
            IF NUFEFAULTNOTIFIED IS NOT NULL THEN
               RETURN NUFEFAULTNOTIFIED;
            END IF;
            ERRORS.SETERROR( CNUERR_DOTNOEXISTCONF, TO_CHAR( IRCORDER.OPERATING_UNIT_ID ) || '|' || TO_CHAR( IRCORDER.TASK_TYPE_ID ) );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
      END IF;
      WHILE ( CU_NOTIFEXPRESSION%FOUND )
       LOOP
         IF ( RCOPEUNITASTYPNOT.CONFIG_EXPRESSION_ID IS NULL ) THEN
            NUREGNULLCOUNTER := NUREGNULLCOUNTER + 1;
          ELSE
            NUREGCOUNTER := NUREGCOUNTER + 1;
            TBNOTICONFEXPR( NUREGCOUNTER ).CONFIG_EXPRESSION_ID := RCOPEUNITASTYPNOT.CONFIG_EXPRESSION_ID;
            TBNOTICONFEXPR( NUREGCOUNTER ).NOTIFICATION_ID := RCOPEUNITASTYPNOT.NOTIFICATION_ID;
         END IF;
         IF ( NUREGNULLCOUNTER > 1 ) THEN
            ERRORS.SETERROR( CNUERR_EXISMORENULLCONF, TO_CHAR( IRCORDER.OPERATING_UNIT_ID ) || '|' || TO_CHAR( IRCORDER.TASK_TYPE_ID ) );
            RAISE EX.CONTROLLED_ERROR;
         END IF;
         FETCH CU_NOTIFEXPRESSION
            INTO RCOPEUNITASTYPNOT;
      END LOOP;
      CLOSE CU_NOTIFEXPRESSION;
      IF ( NUREGNULLCOUNTER = 1 ) AND ( TBNOTICONFEXPR.COUNT > 0 ) THEN
         ERRORS.SETERROR( CNUERR_NULLCONFFOUND, TO_CHAR( IRCORDER.OPERATING_UNIT_ID ) || '|' || TO_CHAR( IRCORDER.TASK_TYPE_ID ) );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( NUREGNULLCOUNTER = 1 ) AND ( TBNOTICONFEXPR.COUNT = 0 ) THEN
         RETURN RCOPEUNITASTYPNOT.NOTIFICATION_ID;
      END IF;
      TBCONFEXPR := OR_BOEXPRESSIONS.FTBCONFEXPRTABLE( TBNOTICONFEXPR );
      OR_BOEXPRESSIONS.RESOLVERESULTFROMEXPRESSIONS( RCEXPRDATAINST, TBCONFEXPR, NUPOSITION, OSBRESULT );
      IF ( NUPOSITION = OR_BOCONSTANTS.CNUUNSUCCESS ) THEN
         ERRORS.SETERROR( CNUERR_NOTHINGRETURNSUCCESS, TO_CHAR( IRCORDER.OPERATING_UNIT_ID ) || '|' || TO_CHAR( IRCORDER.TASK_TYPE_ID ) );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( NUPOSITION = OR_BOCONSTANTS.CNUSUCCESS ) AND OSBRESULT IS NOT NULL THEN
         RETURN OSBRESULT;
      END IF;
      RETURN ( TBNOTICONFEXPR( NUPOSITION ).NOTIFICATION_ID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CU_NOTIFEXPRESSION%ISOPEN ) THEN
            CLOSE CU_NOTIFEXPRESSION;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( CU_NOTIFEXPRESSION%ISOPEN ) THEN
            CLOSE CU_NOTIFEXPRESSION;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FNUDECIDEEXPRESSIONTOEXECUTE;
   PROCEDURE NOTIFYORDER( INUORDER IN OR_ORDER.ORDER_ID%TYPE )
    IS
      NUNOTIFYID OR_OPUNI_TSKTYP_NOTI.NOTIFICATION_ID%TYPE;
      RCORDER DAOR_ORDER.STYOR_ORDER;
      RCEXTSYSID DAOR_EXTERN_SYSTEMS_ID.STYOR_EXTERN_SYSTEMS_ID;
      RCORDERDOCU DAOR_ORDER_DOCUMENT.STYOR_ORDER_DOCUMENT;
      NUORDERID OR_ORDER.ORDER_ID%TYPE;
      RFCUORDEROPERUNIT OR_BOORDER.TYRFORDEROPERUNIT;
      NUNOTILOGID GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE := 0;
      BLFOUND BOOLEAN := FALSE;
      NUERRORCODE NUMBER;
      SBERRORTEXT VARCHAR2( 2000 );
      SBPARAMSTRING VARCHAR2( 2000 );
      NUIDXTBNOTIFYIDS NUMBER;
      CNUERR_NOTICONFNOTFOUND CONSTANT NUMBER := 1280;
    BEGIN
      RCORDER := DAOR_ORDER.FRCGETRECORD( INUORDER );
      IF DAOR_EXTERN_SYSTEMS_ID.FBLEXIST( INUORDER ) THEN
         RCEXTSYSID := DAOR_EXTERN_SYSTEMS_ID.FRCGETRECORD( INUORDER );
      END IF;
      OR_BOINSTANCE.INITNOTIFYPARAMINSTANCE( RCORDER, RCEXTSYSID, SBPARAMSTRING );
      NUNOTIFYID := FNUDECIDEEXPRESSIONTOEXECUTE( RCORDER, RCEXTSYSID );
      GE_BONOTIFICATION.SENDNOTIFY( NUNOTIFYID, GNUORDERMODULE, SBPARAMSTRING, INUORDER, NUNOTILOGID, NUERRORCODE, SBERRORTEXT );
      ERRORS.CHECKERROR( NUERRORCODE );
      NUIDXTBNOTIFYIDS := NVL( GE_BONOTIFICATION_LOG.GTBNOTIFYIDS.LAST, 0 ) + 1;
      GE_BONOTIFICATION_LOG.GTBNOTIFYIDS( NUIDXTBNOTIFYIDS ) := TO_CHAR( NUNOTILOGID );
      RCORDERDOCU.ORDER_ID := INUORDER;
      RCORDERDOCU.NOTIFICATION_LOG_ID := NUNOTILOGID;
      RCORDERDOCU.CREATE_DATE := UT_DATE.FDTSYSDATE;
      RCORDERDOCU.DOCUMENT_NAME := 'OR_' || TO_CHAR( INUORDER );
      DAOR_ORDER_DOCUMENT.INSRECORD( RCORDERDOCU );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( RFCUORDEROPERUNIT%ISOPEN ) THEN
            CLOSE RFCUORDEROPERUNIT;
         END IF;
         RAISE;
      WHEN OTHERS THEN
         IF ( RFCUORDEROPERUNIT%ISOPEN ) THEN
            CLOSE RFCUORDEROPERUNIT;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END NOTIFYORDER;
   FUNCTION FNUVALIDATENOTIFYORDER( INUORDERID IN OR_ORDER.ORDER_ID%TYPE )
    RETURN NUMBER
    IS
      TBRESULT DAOR_ORDER_DOCUMENT.TYTBOR_ORDER_DOCUMENT;
      SBQUERY GE_BOUTILITIES.STYSTATEMENT;
      NUINDEX BINARY_INTEGER;
      NUNOTIFICATIONLOGID GE_NOTIFICATION_LOG.NOTIFICATION_LOG_ID%TYPE;
    BEGIN
      NUNOTIFICATIONLOGID := 0;
      SBQUERY := 'ORDER_id =' || TO_CHAR( INUORDERID ) || ' ORDER BY create_date desc';
      DAOR_ORDER_DOCUMENT.GETRECORDS( SBQUERY, TBRESULT );
      NUINDEX := TBRESULT.FIRST;
      IF ( TBRESULT.COUNT > 0 ) THEN
         NUNOTIFICATIONLOGID := TBRESULT( NUINDEX ).NOTIFICATION_LOG_ID;
      END IF;
      RETURN NUNOTIFICATIONLOGID;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RETURN NUNOTIFICATIONLOGID;
      WHEN OTHERS THEN
         RETURN NUNOTIFICATIONLOGID;
   END FNUVALIDATENOTIFYORDER;
 BEGIN
   LOADPARAMETER;
END OR_BONOTIFYORDER;
/


