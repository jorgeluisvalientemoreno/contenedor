
CREATE OR REPLACE PACKAGE GR_BOINTERFACE_BODY IS
   TYPE TYCONFIGEXPRESSION IS RECORD
    (
      NUCONFIGEXPRESSIONID GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE,
      SBDESCRIPTION GR_CONFIG_EXPRESSION.DESCRIPTION%TYPE
    );
   TYPE TYRFCONFIGEXPRESSION IS REF CURSOR
    RETURN TYCONFIGEXPRESSION;
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   PROCEDURE GENERATERULE( ISBEXPRESSION IN GR_CONFIG_EXPRESSION.EXPRESSION%TYPE, INUFUNCTIONALITY IN GR_CONFIG_EXPRESSION.CONFIGURA_TYPE_ID%TYPE, ISBDESCRIPTION IN GR_CONFIG_EXPRESSION.DESCRIPTION%TYPE, INUEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ONUEXPRESSIONID IN OUT GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ISBOBJECTTYPE IN VARCHAR2 := 'PP' );
   PROCEDURE GENERATERULEAUTINSUPD( ISBEXPRESSION IN GR_CONFIG_EXPRESSION.EXPRESSION%TYPE, INUFUNCTIONALITY IN GR_CONFIG_EXPRESSION.CONFIGURA_TYPE_ID%TYPE, ISBDESCRIPTION IN GR_CONFIG_EXPRESSION.DESCRIPTION%TYPE, INUEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ONUEXPRESSIONID IN OUT GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ISBOBJECTTYPE IN VARCHAR2 := 'PP' );
   PROCEDURE DROPSTPRBYNAME( ISBPROCEDURE IN VARCHAR2 );
   PROCEDURE EXECSQL( ISBSTATEMENT IN VARCHAR2 );
   PROCEDURE CREATESTPRBYCONFEXPREID( INUCONFIGEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE );
   PROCEDURE DELETERULE( ISBTABLENAME IN VARCHAR2, ISBFIELDNAME IN VARCHAR2, INUCONFIGEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ISBSTPRNAME IN OUT VARCHAR2 );
   FUNCTION FSBOBJECT_NAME( IRCR IN DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION )
    RETURN VARCHAR2;
   PROCEDURE GETCONFIGEXPREBYMODULE( IORFCONFIGEXPRESSION IN OUT TYRFCONFIGEXPRESSION, INUMODULEID IN GE_MODULE.MODULE_ID%TYPE );
   PROCEDURE DROPEXPRESSION( INUEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE );
   PROCEDURE MAKEEXPRESSION( INUEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE );
END GR_BOINTERFACE_BODY;
/


CREATE OR REPLACE PACKAGE BODY GR_BOINTERFACE_BODY IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO164711';
   EXERROR_PARSER EXCEPTION;
   CNUMAXLENGTH CONSTANT NUMBER := 4000;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE DROPSTPRBYNAME( ISBPROCEDURE IN VARCHAR2 )
    IS
      BLDROPSTPR BOOLEAN;
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      IF ( UT_OBJECT.FBOEXISTOBJECT( ISBPROCEDURE ) ) THEN
         BLDROPSTPR := UT_OBJECT.FBODELETEOBJECT( ISBPROCEDURE );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE EXECSQL( ISBSTATEMENT IN VARCHAR2 )
    IS
      EX_COMPILATION_ERROR EXCEPTION;
      PRAGMA EXCEPTION_INIT( EX_COMPILATION_ERROR, -24344 );
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      EXECUTE IMMEDIATE ISBSTATEMENT;
    EXCEPTION
      WHEN EX_COMPILATION_ERROR THEN
         ERRORS.SETERROR( 1011 );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FSBOBJECT_NAME( IRCR IN DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION )
    RETURN VARCHAR2
    IS
      SBMODULE GE_MODULE.MNEMONIC%TYPE;
      SBOBJECTNAME GR_CONFIG_EXPRESSION.OBJECT_NAME%TYPE;
      CNUDASH CONSTANT VARCHAR2( 1 ) := '-';
      CNUUNDERLINE CONSTANT VARCHAR2( 2 ) := 'C_';
    BEGIN
      SBMODULE := DAGE_MODULE.FSBGETMNEMONIC( DAGR_CONFIGURA_TYPE.FNUGETMODULE_ID( IRCR.CONFIGURA_TYPE_ID ) );
      SBOBJECTNAME := ( SBMODULE || DAGR_CONFIGURA_TYPE.FSBGETGENERATION_MASK( IRCR.CONFIGURA_TYPE_ID ) || 'CT' || TO_CHAR( IRCR.CONFIGURA_TYPE_ID ) || 'E' || TO_CHAR( IRCR.CONFIG_EXPRESSION_ID ) );
      SBOBJECTNAME := REPLACE( SBOBJECTNAME, CNUDASH, CNUUNDERLINE );
      RETURN SBOBJECTNAME;
   END;
   PROCEDURE INIT_EXPRESSION( ONUEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ISBEXPRESSION IN GR_CONFIG_EXPRESSION.EXPRESSION%TYPE, INUFUNCTIONALITY IN GR_CONFIG_EXPRESSION.CONFIGURA_TYPE_ID%TYPE, ISBDESCRIPTION IN GR_CONFIG_EXPRESSION.DESCRIPTION%TYPE, ISBOBJECTTYPE IN GR_CONFIG_EXPRESSION.OBJECT_TYPE%TYPE, ORCR OUT DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION )
    IS
    BEGIN
      ORCR.CONFIG_EXPRESSION_ID := ONUEXPRESSIONID;
      ORCR.CONFIGURA_TYPE_ID := INUFUNCTIONALITY;
      ORCR.EXPRESSION := ISBEXPRESSION;
      ORCR.DESCRIPTION := ISBDESCRIPTION;
      ORCR.AUTHOR := USER;
      ORCR.CREATION_DATE := SYSDATE;
      ORCR.GENERATION_DATE := SYSDATE;
      ORCR.LAST_MODIFI_DATE := SYSDATE;
      ORCR.STATUS := 'R';
      ORCR.USED_OTHER_EXPRESION := 'N';
      ORCR.MODIFICATION_TYPE := 'PU';
      ORCR.OBJECT_NAME := FSBOBJECT_NAME( ORCR );
      ORCR.OBJECT_TYPE := ISBOBJECTTYPE;
      ORCR.EXECUTION_TYPE := DAGR_CONFIGURA_TYPE.FSBGETCALL_TYPE( INUFUNCTIONALITY );
   END;
   PROCEDURE DROPIFCHANGETYPE( ISBOBJECT_NAME IN GR_CONFIG_EXPRESSION.OBJECT_NAME%TYPE, ISBOLDOBJECTTYPE IN GR_CONFIG_EXPRESSION.OBJECT_TYPE%TYPE, ISBNEWOBJECTTYPE IN GR_CONFIG_EXPRESSION.OBJECT_TYPE%TYPE )
    IS
    BEGIN
      IF ISBOLDOBJECTTYPE = ISBNEWOBJECTTYPE THEN
         RETURN;
      END IF;
      DROPSTPRBYNAME( ISBOBJECT_NAME );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END DROPIFCHANGETYPE;
   PROCEDURE GENERATERULE( ISBEXPRESSION IN GR_CONFIG_EXPRESSION.EXPRESSION%TYPE, INUFUNCTIONALITY IN GR_CONFIG_EXPRESSION.CONFIGURA_TYPE_ID%TYPE, ISBDESCRIPTION IN GR_CONFIG_EXPRESSION.DESCRIPTION%TYPE, INUEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ONUEXPRESSIONID IN OUT GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ISBOBJECTTYPE IN VARCHAR2 := 'PP' )
    IS
      NUPOS NUMBER( 10 );
      NUERROR NUMBER( 10 );
      NUERRORCODE NUMBER( 10 ) := 0;
      SBERRORMESSAGE VARCHAR2( 2000 );
      RCEXPRESSION DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION;
      SBCODE VARCHAR2( 32767 ) := NULL;
      BLOBJECTNEW BOOLEAN := FALSE;
    BEGIN
      IF INUEXPRESSIONID IS NULL THEN
         ONUEXPRESSIONID := GR_BOSEQUENCE.NEXTGR_CONFIG_EXPRESSION;
       ELSE
         ONUEXPRESSIONID := INUEXPRESSIONID;
      END IF;
      IF DAGR_CONFIG_EXPRESSION.FBLEXIST( ONUEXPRESSIONID ) THEN
         RCEXPRESSION := DAGR_CONFIG_EXPRESSION.FRCGETRCDATA( ONUEXPRESSIONID );
         DROPIFCHANGETYPE( RCEXPRESSION.OBJECT_NAME, RCEXPRESSION.OBJECT_TYPE, ISBOBJECTTYPE );
         RCEXPRESSION.EXPRESSION := ISBEXPRESSION;
         RCEXPRESSION.DESCRIPTION := ISBDESCRIPTION;
         RCEXPRESSION.GENERATION_DATE := SYSDATE;
         RCEXPRESSION.LAST_MODIFI_DATE := SYSDATE;
         RCEXPRESSION.OBJECT_NAME := FSBOBJECT_NAME( RCEXPRESSION );
         RCEXPRESSION.OBJECT_TYPE := ISBOBJECTTYPE;
       ELSE
         INIT_EXPRESSION( ONUEXPRESSIONID, ISBEXPRESSION, INUFUNCTIONALITY, ISBDESCRIPTION, ISBOBJECTTYPE, RCEXPRESSION );
         BLOBJECTNEW := TRUE;
      END IF;
      IF DAGR_INTERFACE_BODY.FBLEXIST( ONUEXPRESSIONID ) THEN
         DAGR_INTERFACE_BODY.DELRECORD( ONUEXPRESSIONID );
      END IF;
      NUERROR := GR_BSCODEGENERATOR.CONVERTEXPRESSION( ONUEXPRESSIONID, ISBEXPRESSION, ISBOBJECTTYPE, '', '', RCEXPRESSION.OBJECT_NAME, SBCODE, NUERRORCODE, SBERRORMESSAGE, NUPOS );
      UT_TRACE.TRACE( 'Salida ConvertExpression[' || NUERRORCODE || SBERRORMESSAGE || ']', 10 );
      IF LENGTH( SBCODE ) > CNUMAXLENGTH THEN
         SBCODE := NULL;
      END IF;
      RCEXPRESSION.CODE := SBCODE;
      RCEXPRESSION.STATUS := 'R';
      IF BLOBJECTNEW THEN
         DAGR_CONFIG_EXPRESSION.INSRECORD( RCEXPRESSION );
       ELSE
         DAGR_CONFIG_EXPRESSION.UPDRECORD( RCEXPRESSION, CONSTANTS.CNUFALSE );
      END IF;
      IF NUERROR != 0 THEN
         RAISE EXERROR_PARSER;
      END IF;
    EXCEPTION
      WHEN EXERROR_PARSER THEN
         ERRORS.SETERROR( NUERRORCODE, SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSERTEXPRESSIONAT( IRCEXPRESSION IN DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      DAGR_CONFIG_EXPRESSION.INSRECORD( IRCEXPRESSION );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDATEEXPRESSIONAT( IRCEXPRESSION IN DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      DAGR_CONFIG_EXPRESSION.UPDRECORD( IRCEXPRESSION, CONSTANTS.CNUFALSE );
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELETEINTERFACEBODYAT( INUEXPRESSIONID IN GR_INTERFACE_BODY.INTERFACE_BODY_ID%TYPE )
    IS
      PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      IF DAGR_INTERFACE_BODY.FBLEXIST( INUEXPRESSIONID ) THEN
         DAGR_INTERFACE_BODY.DELRECORD( INUEXPRESSIONID );
      END IF;
      COMMIT;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GENERATERULEAUTINSUPD( ISBEXPRESSION IN GR_CONFIG_EXPRESSION.EXPRESSION%TYPE, INUFUNCTIONALITY IN GR_CONFIG_EXPRESSION.CONFIGURA_TYPE_ID%TYPE, ISBDESCRIPTION IN GR_CONFIG_EXPRESSION.DESCRIPTION%TYPE, INUEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ONUEXPRESSIONID IN OUT GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ISBOBJECTTYPE IN VARCHAR2 := 'PP' )
    IS
      NUPOS NUMBER( 10 );
      NUERROR NUMBER( 10 );
      NUERRORCODE NUMBER( 10 ) := 0;
      SBERRORMESSAGE VARCHAR2( 2000 );
      RCEXPRESSION DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION;
      SBCODE VARCHAR2( 32767 ) := NULL;
      BLOBJECTNEW BOOLEAN := FALSE;
    BEGIN
      IF INUEXPRESSIONID IS NULL THEN
         ONUEXPRESSIONID := GR_BOSEQUENCE.NEXTGR_CONFIG_EXPRESSION;
       ELSE
         ONUEXPRESSIONID := INUEXPRESSIONID;
      END IF;
      IF DAGR_CONFIG_EXPRESSION.FBLEXIST( ONUEXPRESSIONID ) THEN
         RCEXPRESSION := DAGR_CONFIG_EXPRESSION.FRCGETRCDATA( ONUEXPRESSIONID );
         DROPIFCHANGETYPE( RCEXPRESSION.OBJECT_NAME, RCEXPRESSION.OBJECT_TYPE, ISBOBJECTTYPE );
         RCEXPRESSION.EXPRESSION := ISBEXPRESSION;
         RCEXPRESSION.DESCRIPTION := ISBDESCRIPTION;
         RCEXPRESSION.GENERATION_DATE := SYSDATE;
         RCEXPRESSION.LAST_MODIFI_DATE := SYSDATE;
         RCEXPRESSION.OBJECT_NAME := FSBOBJECT_NAME( RCEXPRESSION );
         RCEXPRESSION.OBJECT_TYPE := ISBOBJECTTYPE;
       ELSE
         INIT_EXPRESSION( ONUEXPRESSIONID, ISBEXPRESSION, INUFUNCTIONALITY, ISBDESCRIPTION, ISBOBJECTTYPE, RCEXPRESSION );
         BLOBJECTNEW := TRUE;
      END IF;
      DELETEINTERFACEBODYAT( ONUEXPRESSIONID );
      NUERROR := GR_BSCODEGENERATOR.CONVERTEXPRESSION( ONUEXPRESSIONID, ISBEXPRESSION, ISBOBJECTTYPE, '', '', RCEXPRESSION.OBJECT_NAME, SBCODE, NUERRORCODE, SBERRORMESSAGE, NUPOS );
      UT_TRACE.TRACE( 'Salida ConvertExpression[' || NUERRORCODE || SBERRORMESSAGE || ']', 10 );
      IF LENGTH( SBCODE ) > CNUMAXLENGTH THEN
         SBCODE := NULL;
      END IF;
      RCEXPRESSION.CODE := SBCODE;
      RCEXPRESSION.STATUS := 'R';
      IF NUERROR = 0 THEN
         IF BLOBJECTNEW THEN
            INSERTEXPRESSIONAT( RCEXPRESSION );
          ELSE
            UPDATEEXPRESSIONAT( RCEXPRESSION );
         END IF;
      END IF;
      IF NUERROR != 0 THEN
         RAISE EXERROR_PARSER;
      END IF;
    EXCEPTION
      WHEN EXERROR_PARSER THEN
         ERRORS.SETERROR( NUERRORCODE, SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE CREATESTPRBYCONFEXPREID( INUCONFIGEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE )
    IS
      SBCODE VARCHAR2( 32767 ) := '';
      RCEXPRESSION DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION;
      NUPOS NUMBER( 10 );
      NUERROR NUMBER( 10 );
      NUERRORCODE NUMBER( 10 ) := 0;
      SBERRORMESSAGE VARCHAR2( 4000 );
    BEGIN
      UT_TRACE.TRACE( '-- Dentro de CreateStprByConfExpreId ', 10 );
      DAGR_CONFIG_EXPRESSION.GETRECORD( INUCONFIGEXPRESSIONID, RCEXPRESSION );
      IF ( RCEXPRESSION.OBJECT_TYPE IS NULL ) THEN
         UT_TRACE.TRACE( '-- No se Crea procedimiento para ' || RCEXPRESSION.OBJECT_NAME, 10 );
         RETURN;
      END IF;
      IF ( RCEXPRESSION.CODE IS NULL ) THEN
         UT_TRACE.TRACE( 'Generando Regla ' || RCEXPRESSION.CONFIG_EXPRESSION_ID || ' desde Cero', 15 );
         NUERROR := GR_BSCODEGENERATOR.CONVERTEXPRESSION( RCEXPRESSION.CONFIG_EXPRESSION_ID, RCEXPRESSION.EXPRESSION, RCEXPRESSION.OBJECT_TYPE, '', '', RCEXPRESSION.OBJECT_NAME, SBCODE, NUERRORCODE, SBERRORMESSAGE, NUPOS );
         IF NUERRORCODE != 0 THEN
            RAISE EXERROR_PARSER;
         END IF;
         UT_TRACE.TRACE( 'Tama?o de Regla[' || LENGTH( SBCODE ) || ']', 15 );
         IF LENGTH( SBCODE ) <= CNUMAXLENGTH THEN
            RCEXPRESSION.CODE := SBCODE;
         END IF;
       ELSE
         UT_TRACE.TRACE( '-- La regla ' || INUCONFIGEXPRESSIONID || ' Ya existe en Code', 15 );
         SBCODE := RCEXPRESSION.CODE;
      END IF;
      EXECSQL( SBCODE );
      RCEXPRESSION.STATUS := 'G';
      DAGR_CONFIG_EXPRESSION.UPDRECORD( RCEXPRESSION );
    EXCEPTION
      WHEN EXERROR_PARSER THEN
         ERRORS.SETERROR( NUERRORCODE, SBERRORMESSAGE );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELETERULE( ISBTABLENAME IN VARCHAR2, ISBFIELDNAME IN VARCHAR2, INUCONFIGEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE, ISBSTPRNAME IN OUT VARCHAR2 )
    IS
      RCEXPRESSION DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION;
    BEGIN
      RCEXPRESSION := DAGR_CONFIG_EXPRESSION.FRCGETRCDATA( INUCONFIGEXPRESSIONID );
      ISBSTPRNAME := GR_BOINTERFACE_BODY.FSBOBJECT_NAME( RCEXPRESSION );
      EXECSQL( 'UPDATE ' || ISBTABLENAME || ' SET ' || ISBFIELDNAME || '= NULL WHERE ' || ISBFIELDNAME || ' = ' || INUCONFIGEXPRESSIONID );
      DAGR_CONFIG_EXPRESSION.DELRECORD( INUCONFIGEXPRESSIONID );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETCONFIGEXPREBYMODULE( IORFCONFIGEXPRESSION IN OUT TYRFCONFIGEXPRESSION, INUMODULEID IN GE_MODULE.MODULE_ID%TYPE )
    IS
    BEGIN
      OPEN IORFCONFIGEXPRESSION FOR SELECT gr_config_expression.config_expression_id ,
					   gr_config_expression.description
				FROM   gr_config_expression, gr_configura_type
                WHERE  gr_configura_type.Module_id = inuModuleId
                  AND  gr_config_expression.configura_type_id =  gr_configura_type.configura_type_id;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DROPEXPRESSION( INUEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE )
    IS
    BEGIN
      DROPSTPRBYNAME( DAGR_CONFIG_EXPRESSION.FSBGETOBJECT_NAME( INUEXPRESSIONID ) );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE MAKEEXPRESSION( INUEXPRESSIONID IN GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE )
    IS
      RCEXPRESSION DAGR_CONFIG_EXPRESSION.STYGR_CONFIG_EXPRESSION;
      NUEXPRESSIONID GR_CONFIG_EXPRESSION.CONFIG_EXPRESSION_ID%TYPE;
    BEGIN
      NUEXPRESSIONID := INUEXPRESSIONID;
      IF ( DAGR_CONFIG_EXPRESSION.FBLEXIST( INUEXPRESSIONID ) ) THEN
         RCEXPRESSION := DAGR_CONFIG_EXPRESSION.FRCGETRCDATA( INUEXPRESSIONID );
         IF ( RCEXPRESSION.OBJECT_TYPE IS NULL ) THEN
            UT_TRACE.TRACE( '-- No se Crea procedimiento para ' || RCEXPRESSION.OBJECT_NAME, 10 );
            RETURN;
         END IF;
         GR_BOINTERFACE_BODY.GENERATERULE( RCEXPRESSION.EXPRESSION, RCEXPRESSION.CONFIGURA_TYPE_ID, RCEXPRESSION.DESCRIPTION, RCEXPRESSION.CONFIG_EXPRESSION_ID, NUEXPRESSIONID, RCEXPRESSION.OBJECT_TYPE );
         GR_BOINTERFACE_BODY.CREATESTPRBYCONFEXPREID( INUEXPRESSIONID );
         UT_TRACE.TRACE( 'Generada Regla : ' || INUEXPRESSIONID );
       ELSE
         ERRORS.SETERROR( 4630, INUEXPRESSIONID );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
END GR_BOINTERFACE_BODY;
/


