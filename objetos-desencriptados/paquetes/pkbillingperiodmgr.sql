PACKAGE BODY pkBillingPeriodMgr AS






































































































































    
    
    
	
    CNUNO_HAY_PERIODO_CURRENT	CONSTANT NUMBER := 901916;
	
    CNUVARIOS_PERIODOS_CURRENT	CONSTANT NUMBER := 9190;
	
    CNUEND_DATE_INVALID CONSTANT NUMBER := 9044;
    
    
    CNUMOVE_INI_DATE_INVALID CONSTANT NUMBER := 9197;
    
    
    CNUMOVE_END_DATE_INVALID CONSTANT NUMBER := 10206;
    
    
    CNUMOVE_END_DATE_INV CONSTANT NUMBER := 10214;
    
    
    CNUPAY_DATE_INVALID CONSTANT NUMBER := 10223;
    
    CNUEXPIRATION_DATE_INV CONSTANT NUMBER := 10224;
    
    CNUNO_OPENED_PERIOD    CONSTANT MENSAJE.MENSCODI%TYPE := 10095;
    
    CNUCLOSEPEFA  CONSTANT NUMBER := 10102;
    
    
    CNUFECHA_INVALIDA    CONSTANT NUMBER := 901943;    
    CNUFECHA_NO_VALIDA   CONSTANT NUMBER := 901957;     

    CNURECORD_NO_EXISTE         CONSTANT NUMBER :=9019; 
    CSBDIVISION                 CONSTANT VARCHAR2(20) :=PKCONSTANTE.CSBDIVISION;
    CSBMODULE                   CONSTANT VARCHAR2(20) := PKCONSTANTE.CSBMOD_SAT;
    
    CSBVERSION          		CONSTANT VARCHAR2(250) := 'SAO199632';
    
    
    
    
    SBERRMSG		VARCHAR2(2000);	
    GNUCACHE        NUMBER;         

    
    
    
    SUBTYPE STYCURRPERIDX IS VARCHAR2(5);
    TYPE TYTBCURRPERIFACT IS TABLE OF PERIFACT%ROWTYPE INDEX BY STYCURRPERIDX;
    GBOPERIODSLOADED        BOOLEAN := FALSE;   
    GTBIDXCURRPERIODS       TYTBCURRPERIFACT;   

    
    TYPE TYPERIFACT IS TABLE OF PERIFACT%ROWTYPE INDEX BY BINARY_INTEGER;

    GTRCPREVPEFA     TYPERIFACT;

    
    GTNUPEFACODI     PKTBLPERIFACT.TYPEFACODI;
    GTNUPEFAANO      PKTBLPERIFACT.TYPEFAANO;
    GTNUPEFAMES      PKTBLPERIFACT.TYPEFAMES;
    GTNUPEFASACA     PKTBLPERIFACT.TYPEFASACA;
    GTDTPEFAFIMO     PKTBLPERIFACT.TYPEFAFIMO;
    GTDTPEFAFFMO     PKTBLPERIFACT.TYPEFAFFMO;
    GTDTPEFAFECO     PKTBLPERIFACT.TYPEFAFECO;
    GTDTPEFAFEPA     PKTBLPERIFACT.TYPEFAFEPA;
    GTDTPEFAFFPA     PKTBLPERIFACT.TYPEFAFFPA;
    GTDTPEFAFEGE     PKTBLPERIFACT.TYPEFAFEGE;
    GTVCPEFAOBSE     PKTBLPERIFACT.TYPEFAOBSE;
    GTNUPEFACICL     PKTBLPERIFACT.TYPEFACICL;
    GTVCPEFADESC     PKTBLPERIFACT.TYPEFADESC;
    GTDTPEFAFCCO     PKTBLPERIFACT.TYPEFAFCCO;
    GTDTPEFAFGCI     PKTBLPERIFACT.TYPEFAFGCI;
    GTVCPEFAACTU     PKTBLPERIFACT.TYPEFAACTU;
    GTDTPEFAFEEM     PKTBLPERIFACT.TYPEFAFEEM;
    
    GTNUCURRPEFACODI     PKTBLPERIFACT.TYPEFACODI;
    GTNUCURRPEFAANO      PKTBLPERIFACT.TYPEFAANO;
    GTNUCURRPEFAMES      PKTBLPERIFACT.TYPEFAMES;
    GTNUCURRPEFASACA     PKTBLPERIFACT.TYPEFASACA;
    GTDTCURRPEFAFIMO     PKTBLPERIFACT.TYPEFAFIMO;
    GTDTCURRPEFAFFMO     PKTBLPERIFACT.TYPEFAFFMO;
    GTDTCURRPEFAFECO     PKTBLPERIFACT.TYPEFAFECO;
    GTDTCURRPEFAFEPA     PKTBLPERIFACT.TYPEFAFEPA;
    GTDTCURRPEFAFFPA     PKTBLPERIFACT.TYPEFAFFPA;
    GTDTCURRPEFAFEGE     PKTBLPERIFACT.TYPEFAFEGE;
    GTVCCURRPEFAOBSE     PKTBLPERIFACT.TYPEFAOBSE;
    GTNUCURRPEFACICL     PKTBLPERIFACT.TYPEFACICL;
    GTVCCURRPEFADESC     PKTBLPERIFACT.TYPEFADESC;
    GTDTCURRPEFAFCCO     PKTBLPERIFACT.TYPEFAFCCO;
    GTDTCURRPEFAFGCI     PKTBLPERIFACT.TYPEFAFGCI;
    GTVCCURRPEFAACTU     PKTBLPERIFACT.TYPEFAACTU;

    
    TYPE TYRCPERIFACT IS RECORD (
                                   NUYEAR   		PERIFACT.PEFAANO%TYPE,
                                   NUMONTH  		PERIFACT.PEFAMES%TYPE,
                                   NUPERIOD 		PERIFACT.PEFACODI%TYPE,
                                   DTENDMOVEMENT	PERIFACT.PEFAFFMO%TYPE
                                );

    
    TYPE TYTBPERIFACT IS TABLE OF TYRCPERIFACT INDEX BY BINARY_INTEGER;

    
    GTBPERIFACT TYTBPERIFACT;

    
    GTNUPERIODO PKTBLPERIFACT.TYPEFACODI;
    
    
    GRCPERIFACT    PERIFACT%ROWTYPE;

    
    
    
    
    
    CURSOR CUPERIFACT (  INUPEFACODI PERIFACT.PEFACODI%TYPE )
    IS
        SELECT  PEFACODI, PEFAANO,  PEFAMES,  PEFASACA,
                PEFAFIMO, PEFAFFMO, PEFAFECO, PEFAFEPA,
                PEFAFFPA, PEFAFEGE, PEFAOBSE,
                PEFACICL, PEFADESC, PEFAFCCO, PEFAFGCI, PEFAACTU,
                PEFAFEEM
        FROM    PERIFACT
        WHERE   PEFACODI = INUPEFACODI ;


    
    
    
    CURSOR CUPEFACURR ( INUCICLO PERIFACT.PEFACICL%TYPE )
    IS
        SELECT  PEFACODI, PEFAANO,  PEFAMES,  PEFASACA,
                PEFAFIMO, PEFAFFMO, PEFAFECO, PEFAFEPA,
                PEFAFFPA, PEFAFEGE, PEFAOBSE,
                PEFACICL, PEFADESC, PEFAFCCO, PEFAFGCI, PEFAACTU
        FROM    PERIFACT
        WHERE   PEFAACTU || '' = 'S'
        AND     PEFACICL = INUCICLO;

    RCPEFACURR  CUPEFACURR%ROWTYPE;

    
    
    
    PROCEDURE LOAD
    (
        INUPEFACODI PERIFACT.PEFACODI%TYPE
    ) ;
    
    PROCEDURE LOADCURR
    (
        INUPEFACICL PERIFACT.PEFACICL%TYPE
    ) ;
    
    
    

















































PROCEDURE ACCCURRENTPERIOD
(
    INUCICLO	IN	PERIFACT.PEFACICL%TYPE,
    ONUPERIODO	OUT	PERIFACT.PEFACODI%TYPE
)
IS

    

    CURSOR CUPERIFACT (NUCICLO CICLO.CICLCODI%TYPE) IS
    SELECT PEFACODI
    FROM   PERIFACT
    WHERE  PEFACICL = NUCICLO
    AND    PEFAACTU = PKCONSTANTE.SI;

    NUPERIODO	PERIFACT.PEFACODI%TYPE;	

BEGIN

    PKERRORS.PUSH ('pkBillingPeriodMgr.AccCurrentPeriod');
    
    
    
    IF ( (GNUCACHE = PKCONSTANTE.CACHE OR GNUCACHE IS NULL) AND
         GTNUPERIODO.EXISTS(INUCICLO) )
    THEN
    
        ONUPERIODO := GTNUPERIODO(INUCICLO);
        PKERRORS.POP;
        RETURN;
    
    END IF;

    

    OPEN CUPERIFACT (INUCICLO);
    FETCH CUPERIFACT INTO ONUPERIODO;

    IF (CUPERIFACT%NOTFOUND) THEN
    
        
        ERRORS.SETERROR( CNUNO_HAY_PERIODO_CURRENT, INUCICLO );
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    
    END IF;

    
    
    FETCH CUPERIFACT INTO NUPERIODO;

    IF (CUPERIFACT%FOUND) THEN
    
        
        PKERRORS.SETERRORCODE (CNUVARIOS_PERIODOS_CURRENT);
        RAISE LOGIN_DENIED;
    
    END IF;

    
    
    IF (GNUCACHE = PKCONSTANTE.CACHE OR GNUCACHE IS NULL) THEN
    
        GTNUPERIODO(INUCICLO) := ONUPERIODO;
    
    END IF;
    
    CLOSE CUPERIFACT;
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END ACCCURRENTPERIOD;



















FUNCTION FRCGETBILLPERIOD
(
    IDTEVENTDATE IN  DATE,
    INUCYCLE     IN  CICLO.CICLCODI%TYPE
)   RETURN PERIFACT%ROWTYPE
IS
    
    CURSOR  CUPERIFACT
    IS
        SELECT --+ INDEX_ASC (perifact IX_PEFA_CICL_FFMO)
    	*
        FROM  PERIFACT
        WHERE PEFACICL = INUCYCLE
        AND   PEFAFFMO >= IDTEVENTDATE
          AND ROWNUM = 1;

BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.frcGetBillPeriod');

    
	IF ( GRCPERIFACT.PEFAFFMO >= IDTEVENTDATE AND
         GRCPERIFACT.PEFAFIMO <= IDTEVENTDATE AND
         INUCYCLE = GRCPERIFACT.PEFACICL) THEN
        RETURN (GRCPERIFACT);
    END IF;

    GRCPERIFACT := NULL;

    
    OPEN  CUPERIFACT;
    FETCH CUPERIFACT INTO GRCPERIFACT;

    
    IF ( CUPERIFACT%NOTFOUND ) THEN
        CLOSE CUPERIFACT;
        OPEN  CUPERIFACT;
        FETCH CUPERIFACT INTO GRCPERIFACT;
    	
        IF ( CUPERIFACT%NOTFOUND ) THEN
            PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
                                   PKCONSTANTE.CSBMOD_LIQ,
                                   CNUNO_OPENED_PERIOD );
            CLOSE CUPERIFACT;
            RAISE LOGIN_DENIED;
        END IF;
    END IF;

    PKERRORS.POP;

    RETURN (GRCPERIFACT);

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FRCGETBILLPERIOD;

























































PROCEDURE ACCCURRENTPERIOD
(
    INUCICLO	IN	PERIFACT.PEFACICL%TYPE,
    ONUANO		OUT	PERIFACT.PEFAANO%TYPE,
    ONUMES		OUT	PERIFACT.PEFAMES%TYPE,
    ONUPERIODO	OUT	PERIFACT.PEFACODI%TYPE
)
IS

    

    CURSOR CUPERIFACT (NUCICLO CICLO.CICLCODI%TYPE) IS
    SELECT PEFAANO, PEFAMES, PEFACODI, PEFAFFMO
    FROM   PERIFACT
    WHERE  PEFACICL = NUCICLO
    AND    PEFAACTU = PKCONSTANTE.SI;

    NUANO		PERIFACT.PEFAANO%TYPE;	
    NUMES		PERIFACT.PEFAMES%TYPE;	
    NUPERIODO	PERIFACT.PEFACODI%TYPE; 
    DTFINALMOV	PERIFACT.PEFAFFMO%TYPE; 
    DTFINALMOVTMP PERIFACT.PEFAFFMO%TYPE;

BEGIN

    PKERRORS.PUSH ('pkBillingPeriodMgr.AccCurrentPeriod');

    

    IF ( (GNUCACHE = PKCONSTANTE.CACHE OR GNUCACHE IS NULL) AND
         GTBPERIFACT.EXISTS(INUCICLO) )
    THEN
    
        ONUANO     := GTBPERIFACT(INUCICLO).NUYEAR;
        ONUMES     := GTBPERIFACT(INUCICLO).NUMONTH;
        ONUPERIODO := GTBPERIFACT(INUCICLO).NUPERIOD;
        PKERRORS.POP;
        RETURN;
    
    END IF;

    

    OPEN CUPERIFACT (INUCICLO);
    FETCH CUPERIFACT INTO ONUANO, ONUMES, ONUPERIODO, DTFINALMOV;

    IF (CUPERIFACT%NOTFOUND) THEN
    
        
        ERRORS.SETERROR( CNUNO_HAY_PERIODO_CURRENT, INUCICLO );
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    
    END IF;

    
    
    FETCH CUPERIFACT INTO NUANO, NUMES, NUPERIODO, DTFINALMOVTMP;

    IF (CUPERIFACT%FOUND) THEN
    
        
        PKERRORS.SETERRORCODE (CNUVARIOS_PERIODOS_CURRENT);
        RAISE LOGIN_DENIED;
    
    END IF;

    

    IF (GNUCACHE = PKCONSTANTE.CACHE OR GNUCACHE IS NULL) THEN
    
        GTBPERIFACT(INUCICLO).NUYEAR   := ONUANO;
        GTBPERIFACT(INUCICLO).NUMONTH  := ONUMES;
        GTBPERIFACT(INUCICLO).NUPERIOD := ONUPERIODO;
        GTBPERIFACT(INUCICLO).DTENDMOVEMENT := DTFINALMOV;

    
    END IF;

    CLOSE CUPERIFACT;
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END ACCCURRENTPERIOD;


















PROCEDURE CHANGETOCURRENTPERIOD 
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE
    ) 
    IS
    NUCICLO	PERIFACT.PEFACICL%TYPE;	
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ChangeToCurrentPeriod');
    
    NUCICLO := PKTBLPERIFACT.FNUGETCYCLE
		(
		    INUPERIODO,
		    PKCONSTANTE.NOCACHE
		);
    
    
    
    UPDATE PERIFACT
    SET    PEFAACTU  = PKCONSTANTE.NO
    WHERE  PEFACODI != INUPERIODO
    AND    PEFACICL  = NUCICLO
    AND    PEFAACTU || '' = PKCONSTANTE.SI;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
       PKERRORS.POP;
       RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
       PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       PKERRORS.POP;
       RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END CHANGETOCURRENTPERIOD;
































PROCEDURE GETDATESPERIODNEWCYCLE
    (
        INUCICLOCURR    IN   PERIFACT.PEFACICL%TYPE,
        INUCICLONEW     IN   PERIFACT.PEFACICL%TYPE,
        ODTFECHINITIAL  OUT  PERIFACT.PEFAFIMO%TYPE,
        ODTFECHFINAL    OUT  PERIFACT.PEFAFFMO%TYPE
    )
    IS
    RCPERIFACT     PERIFACT%ROWTYPE;	
BEGIN
    PKERRORS.PUSH ('pkBillingPeriodMgr.GetDatesPeriodNewCycle');
    
    RCPERIFACT :=  FRCGETACCCURRENTPERIOD (INUCICLONEW);
    
    ODTFECHINITIAL  :=  RCPERIFACT.PEFAFIMO;
    ODTFECHFINAL    :=  RCPERIFACT.PEFAFFMO;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETDATESPERIODNEWCYCLE;


































PROCEDURE GETNEXTBILLPERIOD
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE,
	ONUPERIODOSIG	OUT	PERIFACT.PEFACODI%TYPE
    )
    IS
    
       CURSOR CUPERIODOSIG (
                            IDTFECHAFINMOV PERIFACT.PEFAFFMO%TYPE,
	               		    INUCICLO CICLO.CICLCODI%TYPE
                            ) IS
	    SELECT /*+ INDEX_ASC (PERIFACT IX_PEFA_CICL_FFMO) */ PEFACODI
              FROM PERIFACT /*+ pkBillingPeriodMgr.GetNextBillPeriod */
             WHERE PEFAFIMO > IDTFECHAFINMOV
               AND PEFACICL = INUCICLO
               AND ROWNUM = 1;

    
    DTFECHAFMO  PERIFACT.PEFAFFMO%TYPE;
    
    RCPERIODOACTUAL	PERIFACT%ROWTYPE;
    NUIDPERIODOSIG	PERIFACT.PEFACODI%TYPE;	

	
    CNUNO_HAY_PERIODO_SIGUIENTE		CONSTANT NUMBER := 12003;

BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.GetNextBillPeriod');
    
    RCPERIODOACTUAL := PKTBLPERIFACT.FRCGETRECORD
			(
			    INUPERIODO,
			    PKCONSTANTE.NOCACHE
			);
	
    DTFECHAFMO := RCPERIODOACTUAL.PEFAFFMO;

    
    OPEN CUPERIODOSIG (DTFECHAFMO, RCPERIODOACTUAL.PEFACICL);
    
    FETCH CUPERIODOSIG INTO NUIDPERIODOSIG;

    
    IF ( CUPERIODOSIG%NOTFOUND ) THEN
	CLOSE CUPERIODOSIG;
	PKERRORS.SETERRORCODE
	    (
		PKCONSTANTE.CSBDIVISION,
		PKCONSTANTE.CSBMOD_BIL,
		CNUNO_HAY_PERIODO_SIGUIENTE
	    );
	RAISE LOGIN_DENIED;
    END IF;

    
    CLOSE CUPERIODOSIG;
    
    ONUPERIODOSIG := NUIDPERIODOSIG;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        
       IF (CUPERIODOSIG%ISOPEN) THEN
            CLOSE CUPERIODOSIG;
       END IF;
	   PKERRORS.POP;
       RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
        IF (CUPERIODOSIG%ISOPEN) THEN
            CLOSE CUPERIODOSIG;
        END IF;
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        
        IF (CUPERIODOSIG%ISOPEN) THEN
            CLOSE CUPERIODOSIG;
        END IF;
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETNEXTBILLPERIOD;

















PROCEDURE GETPREVIOUSBILLPERIOD
    (
	INUPERIODO	    IN	PERIFACT.PEFACODI%TYPE,
	ONUPERIODOANT	OUT	PERIFACT.PEFACODI%TYPE
    )
    IS
    
    RCPERIODOANT	PERIFACT%ROWTYPE;
    
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.GetPreviousBillPeriod');
    
    PKBILLINGPERIODMGR.GETPREVIOUSBILLPERIOD( INUPERIODO, RCPERIODOANT);
    ONUPERIODOANT := RCPERIODOANT.PEFACODI;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETPREVIOUSBILLPERIOD;















PROCEDURE SETCLOSEDPERIOD 
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE
    ) 
    IS
BEGIN
  PKERRORS.PUSH('pkBillingPeriodMgr.SetClosedPeriod');
  PKTBLPERIFACT.UPCURRENTFLAG
    (
	INUPERIODO,
	PKBILLCONST.CSBPERIODO_CERRADO_GRAL
    );
  PKERRORS.POP;
EXCEPTION
  WHEN LOGIN_DENIED THEN
       PKERRORS.POP;
       RAISE LOGIN_DENIED;
  WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
       PKERRORS.POP;
       RAISE PKCONSTANTE.EXERROR_LEVEL2;
  WHEN OTHERS THEN
       PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       PKERRORS.POP;
       RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETCLOSEDPERIOD;














PROCEDURE SETCURRENTPERIOD 
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE
    ) 
    IS
BEGIN
  PKERRORS.PUSH('pkBillingPeriodMgr.SetCurrentPeriod');
  PKTBLPERIFACT.UPCURRENTFLAG
    (
	INUPERIODO,
	PKCONSTANTE.SI
    );
  PKERRORS.POP;
EXCEPTION
  WHEN LOGIN_DENIED THEN
       PKERRORS.POP;
       RAISE LOGIN_DENIED;
  WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
       PKERRORS.POP;
       RAISE PKCONSTANTE.EXERROR_LEVEL2;
  WHEN OTHERS THEN
       PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       PKERRORS.POP;
       RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETCURRENTPERIOD;














PROCEDURE SETNOCURRENTPERIOD 
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE
    ) 
    IS
BEGIN
  PKERRORS.PUSH('pkBillingPeriodMgr.SetNoCurrentPeriod');
  PKTBLPERIFACT.UPCURRENTFLAG
    (
	INUPERIODO,
	PKCONSTANTE.NO
    );
  PKERRORS.POP;
EXCEPTION
  WHEN LOGIN_DENIED THEN
       PKERRORS.POP;
       RAISE LOGIN_DENIED;
  WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
       PKERRORS.POP;
       RAISE PKCONSTANTE.EXERROR_LEVEL2;
  WHEN OTHERS THEN
       PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       PKERRORS.POP;
       RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END SETNOCURRENTPERIOD;


















PROCEDURE VALBASICDATA ( INUPERIODO	IN	PERIFACT.PEFACODI%TYPE ) 
    IS
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValBasicData');
    
    PKBILLINGPERIODMGR.VALIDATENULL ( INUPERIODO );
    
    PKBILLINGPERIODMGR.VALIDATENULLAPP ( INUPERIODO );
    
    PKTBLPERIFACT.ACCKEY ( INUPERIODO );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALBASICDATA;

























PROCEDURE VALEXISTCLOSEPERIODE
    (
	INUCICLO	IN	SUSCRIPC.SUSCCICL%TYPE,
	INUANO		IN	FECHVESU.FEVSANO%TYPE,
	INUMES		IN	FECHVESU.FEVSMES%TYPE
    )
IS
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValExistClosePeriode');
    IF ( PKBILLINGPERIODMGR.FBLEXISTCLOSEPERIODE ( INUCICLO, INUANO, INUMES ) )
    THEN
          PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION,
                                  PKCONSTANTE.CSBMOD_BIL,
                                  CNUCLOSEPEFA );
          RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALEXISTCLOSEPERIODE;






















PROCEDURE VALEXPIRATIONDATE
    (
	IDTFECHAPAGO	IN	PERIFACT.PEFAFEPA%TYPE,
	IDTFECRECARGO	IN	PERIFACT.PEFAFFPA%TYPE
    )
IS
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValExpirationDate');
    IF ( TRUNC(IDTFECRECARGO) <= TRUNC(IDTFECHAPAGO) ) THEN
	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
			       PKCONSTANTE.CSBMOD_BIL,
			       CNUEXPIRATION_DATE_INV );
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALEXPIRATIONDATE;



















PROCEDURE VALISBETWEENDATEMOV 
    (
	   INUSUSCCODI	IN	SUSCRIPC.SUSCCODI%TYPE,
	   IDTDATE		IN	DATE
    ) 
    IS
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValIsBetweenDateMov');
    
    
    IF ( NOT FBLISBETWEENDATEMOV ( INUSUSCCODI, IDTDATE ) ) THEN
    ERRORS.SETERROR(CNUFECHA_INVALIDA);
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALISBETWEENDATEMOV;
































PROCEDURE VALBETWEENDATEMOV
    (
	   INUSUSCCODI	IN	SUSCRIPC.SUSCCODI%TYPE,
	   IDTDATE		IN	DATE
    )
    IS
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValBetweenDateMov');
    
    
    IF ( NOT FBLISBETWEENDATEMOV ( INUSUSCCODI, IDTDATE ) ) THEN
        ERRORS.SETERROR(CNUFECHA_NO_VALIDA);
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALBETWEENDATEMOV;























PROCEDURE VALISBETWEENDATEMOV 
    (
	   IDTFECHAMOVINI	IN	PERIFACT.PEFAFIMO%TYPE,
	   IDTFECHAMOVFIN	IN	PERIFACT.PEFAFFMO%TYPE,
	   IDTDATE		IN	DATE
    ) 
    IS
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValIsBetweenDateMov_memory');
    
    
    IF (NOT FBLISBETWEENDATEMOV (IDTFECHAMOVINI, IDTFECHAMOVFIN, IDTDATE)) THEN
    ERRORS.SETERROR(CNUFECHA_INVALIDA);
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALISBETWEENDATEMOV;


























PROCEDURE VALMOVEENDDATE
    (
	IDTFECINIMOV	IN	PERIFACT.PEFAFIMO%TYPE,
	IDTFECFINMOV	IN	PERIFACT.PEFAFFMO%TYPE
	)
IS
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValMoveEndDate');
    IF ( TRUNC(IDTFECFINMOV) < TRUNC(IDTFECINIMOV) ) THEN
	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
			       PKCONSTANTE.CSBMOD_BIL,
			       CNUMOVE_END_DATE_INVALID );
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALMOVEENDDATE;























PROCEDURE VALPAYMENTDATE
    (
	IDTFECHAPAGO	IN	PERIFACT.PEFAFEPA%TYPE,
	IDTFECFINMOV	IN	PERIFACT.PEFAFIMO%TYPE
    )
IS
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValPaymentDate');
    IF ( TRUNC(IDTFECHAPAGO) <= TRUNC(IDTFECFINMOV) ) THEN
	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
			       PKCONSTANTE.CSBMOD_BIL,
			       CNUPAY_DATE_INVALID );
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALPAYMENTDATE;


















PROCEDURE VALIDATEDATE 
    (
	INUSUSCCODI	IN	SUSCRIPC.SUSCCODI%TYPE, 
	IDTDATE		IN	DATE
    ) 
    IS
    
    
    CNUDATE_MUST_BE_GREATER	CONSTANT	MENSAJE.MENSCODI%TYPE:=9188;
    DTINITDATE 	CONCFESU.COFSFECH%TYPE;
    RCPERIFACT	PERIFACT%ROWTYPE;
BEGIN
  PKERRORS.PUSH('pkBillingPeriodMgr.ValidateDate');
  PKSUBSCRIBERMGR.ACCCURRENTPERIOD( INUSUSCCODI, RCPERIFACT );
  
  
  IF ( RCPERIFACT.PEFAFIMO > IDTDATE ) THEN
     PKERRORS.SETERRORCODE ( CNUDATE_MUST_BE_GREATER );
     RAISE LOGIN_DENIED;
  END IF;
  PKERRORS.POP;
EXCEPTION
  WHEN LOGIN_DENIED THEN
       PKERRORS.POP;
       RAISE LOGIN_DENIED;
  WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
       PKERRORS.POP;
       RAISE PKCONSTANTE.EXERROR_LEVEL2;
  WHEN OTHERS THEN
       PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       PKERRORS.POP;
       RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALIDATEDATE;
















PROCEDURE VALIDATENULL 
    (
	INUPERIODO         IN    PERIFACT.PEFACODI%TYPE,
	INUYEAR            IN    PERIFACT.PEFAANO%TYPE,
	INUMONTH           IN    PERIFACT.PEFAMES%TYPE,
	INUCYCLE           IN    PERIFACT.PEFACICL%TYPE
    )
    IS
    
    CNUBILLINGPERIOD_NULL   CONSTANT NUMBER :=10093;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValidateNull_a');
    IF ( INUPERIODO IS NULL OR
	 INUYEAR    IS NULL OR 
	 INUMONTH   IS NULL OR
	 INUCYCLE   IS NULL ) 
    THEN 
	PKERRORS.SETERRORCODE(  PKCONSTANTE.CSBDIVISION, 
				PKCONSTANTE.CSBMOD_BIL, 
			        CNUBILLINGPERIOD_NULL );
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALIDATENULL;














PROCEDURE VALIDATENULL 
    (
	INUPERIODO         IN    PERIFACT.PEFACODI%TYPE
    )
    IS
    
    CNUBILLINGPERIOD_NULL   CONSTANT NUMBER :=10093;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValidateNull');
    IF ( INUPERIODO IS NULL ) 
    THEN 
	PKERRORS.SETERRORCODE(  PKCONSTANTE.CSBDIVISION, 
				PKCONSTANTE.CSBMOD_BIL, 
			        CNUBILLINGPERIOD_NULL );
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALIDATENULL;

















PROCEDURE VALIDATENULLAPP
    (
	INUCICLO	IN	PERIFACT.PEFACICL%TYPE,
	INUANO		IN	PERIFACT.PEFAANO%TYPE,
	INUMES		IN	PERIFACT.PEFAMES%TYPE,
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE
    )
    IS
		    
    CNUPERIODO_NULO_APLICACION	CONSTANT NUMBER := 10100;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValidateNullApp_a');
    
    
    IF ( INUCICLO     = PKCONSTANTE.NULLNUM AND
	 INUANO       = PKCONSTANTE.NULLNUM AND
	 INUMES       = PKCONSTANTE.NULLNUM AND
	 INUPERIODO   = PKCONSTANTE.NULLNUM  )
    THEN 
	PKERRORS.SETERRORCODE(  PKCONSTANTE.CSBDIVISION, 
				PKCONSTANTE.CSBMOD_BIL, 
			        CNUPERIODO_NULO_APLICACION );
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALIDATENULLAPP;














PROCEDURE VALIDATENULLAPP
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE
    )
    IS
		    
    CNUPERIODO_NULO_APLICACION	CONSTANT NUMBER := 10100;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValidateNullApp_b');
    
    
    IF ( INUPERIODO   = PKCONSTANTE.NULLNUM )
    THEN 
	PKERRORS.SETERRORCODE(  PKCONSTANTE.CSBDIVISION, 
				PKCONSTANTE.CSBMOD_BIL, 
			        CNUPERIODO_NULO_APLICACION );
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALIDATENULLAPP;





















PROCEDURE VALIDATEPERIOD
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE,
	INUCICLO	IN	PERIFACT.PEFACICL%TYPE
    )
IS
    
    
    
	
    CNUINVALID_PERIOD	CONSTANT NUMBER := 11;
    
    
    
    NURECORDS	NUMBER; 
    
    
    
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.ValidatePeriod');
    
    IF ( NOT FBLISVALIDPERIOD( INUPERIODO, INUCICLO ) ) THEN
	PKERRORS.SETERRORCODE( PKCONSTANTE.CSBDIVISION,
			       PKCONSTANTE.CSBMOD_BIL,
			       CNUINVALID_PERIOD );
					
	RAISE LOGIN_DENIED;
    END IF;
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END VALIDATEPERIOD;



























FUNCTION FBLEXISTCLOSEPERIODE
    (
	INUCICLO	IN	SUSCRIPC.SUSCCICL%TYPE,
	INUANO		IN	FECHVESU.FEVSANO%TYPE,
	INUMES		IN	FECHVESU.FEVSMES%TYPE
    )
RETURN BOOLEAN
IS
    
    
    
    NUCONTADOR	NUMBER := 0;
    
    
    
    CURSOR CUPERIODOS IS
        SELECT COUNT(*)
	FROM   PERIFACT
	WHERE  PEFACICL = INUCICLO
	AND    PEFAANO  = INUANO
	AND    PEFAMES  = INUMES
        AND    PEFAACTU || '' = PKCONSTANTE.NULLSB
	AND    ROWNUM = 1;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fblExistClosePeriode');
    OPEN CUPERIODOS;
    FETCH CUPERIODOS INTO NUCONTADOR;
    CLOSE CUPERIODOS;
    PKERRORS.POP;
    RETURN ( NVL( NUCONTADOR, PKBILLCONST.CERO ) != PKBILLCONST.CERO );
	
END FBLEXISTCLOSEPERIODE;















FUNCTION FBLEXISTPREVBILLPERIOD
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE
    ) 
    RETURN BOOLEAN
    IS
    
    CURSOR CUPERIODOANT (   NUCICLO	PERIFACT.PEFACICL%TYPE,
			    NUANO	PERIFACT.PEFAANO%TYPE,
			    NUMES	PERIFACT.PEFAMES%TYPE
			) IS
    SELECT PEFACODI
    FROM   PERIFACT
    WHERE  PEFACICL = NUCICLO
    AND    PEFAANO  = NUANO
    AND    PEFAMES  = NUMES;
	
    RCPERIODOACTUAL	PERIFACT%ROWTYPE;
    NUIDPERIODOANT	PERIFACT.PEFACODI%TYPE;	
    NUANO		PERIFACT.PEFAANO%TYPE;	
    NUMES		PERIFACT.PEFAMES%TYPE;	
	
    CNUNO_HAY_PERIODO_ANTERIOR		CONSTANT NUMBER := 36;
	
    CNUVARIOS_PERIODOS_ANTERIORES	CONSTANT NUMBER := 37;
	
    CNUPRIMER_MES	CONSTANT NUMBER := 1;
	
    CNUULTIMO_MES	CONSTANT NUMBER := 12;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fblExistPrevBillPeriod');
    
    IF ( NOT PKTBLPERIFACT.FBLEXIST ( INUPERIODO, PKCONSTANTE.NOCACHE ) ) THEN
       PKERRORS.POP;
       RETURN ( FALSE );
    END IF;
    
    RCPERIODOACTUAL := PKTBLPERIFACT.FRCGETRECORD
			(
			    INUPERIODO,
			    PKCONSTANTE.CACHE
			);
    
    IF ( RCPERIODOACTUAL.PEFAMES = CNUPRIMER_MES ) THEN
	NUANO := RCPERIODOACTUAL.PEFAANO - 1;
	NUMES := CNUULTIMO_MES;
    ELSE
	NUANO := RCPERIODOACTUAL.PEFAANO;
	NUMES := RCPERIODOACTUAL.PEFAMES - 1;
    END IF;
    
    OPEN CUPERIODOANT (RCPERIODOACTUAL.PEFACICL, NUANO, NUMES);
    FETCH CUPERIODOANT INTO NUIDPERIODOANT;
    
    IF ( CUPERIODOANT%NOTFOUND ) THEN
	CLOSE CUPERIODOANT;
        PKERRORS.POP;
        RETURN ( FALSE );
    END IF;
    
    FETCH CUPERIODOANT INTO NUIDPERIODOANT;
    IF ( CUPERIODOANT%FOUND ) THEN
	CLOSE CUPERIODOANT;
        PKERRORS.POP;
        RETURN ( FALSE );
    END IF;
    
    CLOSE CUPERIODOANT;
    RETURN ( TRUE );
    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FBLEXISTPREVBILLPERIOD;














FUNCTION FBLHASCURPERIODCYCLE
    (
        INUCICLO	IN	PERIFACT.PEFACICL%TYPE
    ) 
    RETURN BOOLEAN
    IS
    
    CURSOR CUPERIODOS( NUCICLO	CICLO.CICLCODI%TYPE ) IS
    SELECT COUNT(*)
    FROM   PERIFACT
    WHERE  PEFACICL = NUCICLO
    AND    PEFAACTU || '' = PKCONSTANTE.SI;
    NUNUMPERIODOS	NUMBER(3);	
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fblHasCurPeriodCycle');
    IF ( CUPERIODOS%ISOPEN ) THEN
         CLOSE CUPERIODOS;
    END IF;
    OPEN  CUPERIODOS( INUCICLO );
    FETCH CUPERIODOS INTO NUNUMPERIODOS;
    CLOSE CUPERIODOS;
    
    
    IF ( NUNUMPERIODOS != 1 ) THEN
        PKERRORS.POP;
        RETURN ( FALSE );
    END IF;
    PKERRORS.POP;
    RETURN ( TRUE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FBLHASCURPERIODCYCLE;













FUNCTION FBLHASCURPERIODSERV
    (
        INUNUMESERV    IN  SERVSUSC.SESUNUSE%TYPE
    )
RETURN BOOLEAN
IS
    NUCICLO         PERIFACT.PEFACICL%TYPE;
    NUSUSCRIPC      SERVSUSC.SESUSUSC%TYPE;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fblHasCurPeriodServ');
    IF ( NOT  PKTBLSERVSUSC.FBLEXIST ( INUNUMESERV ) ) THEN 
       PKERRORS.POP;
       RETURN ( FALSE );
    END IF;
    
    NUSUSCRIPC := PKTBLSERVSUSC.FNUGETSUSCRIPTION
                        (
                            INUNUMESERV,
                            PKCONSTANTE.CACHE
                        );
    
    NUCICLO :=   PKTBLSUSCRIPC.FNUGETBILLINGCYCLE
                        (
                            NUSUSCRIPC,
                            PKCONSTANTE.NOCACHE
                        );
    IF (NOT FBLHASCURPERIODCYCLE ( NUCICLO ) ) THEN
       PKERRORS.POP;
       RETURN ( FALSE );
    END IF;
    PKERRORS.POP;
    RETURN ( TRUE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RETURN (FALSE);
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
	PKERRORS.POP;
	RETURN (FALSE);
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FBLHASCURPERIODSERV;























FUNCTION FBLHASRECORDSCYCLE 
    (
	INUCICLO	IN	PERIFACT.PEFACICL%TYPE
    )
RETURN BOOLEAN IS
    SBWHERE	VARCHAR2(1000);
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fblHasRecordsCycle');
    SBWHERE := 'FROM perifact WHERE pefacicl = ' || INUCICLO;
    PKERRORS.POP;
    RETURN(PKGENERALSERVICES.FBOHASRECORDS( SBWHERE ));
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FBLHASRECORDSCYCLE;












FUNCTION FBLISBETWEENDATEMOV 
    (
	INUSUSCCODI	IN	SUSCRIPC.SUSCCODI%TYPE, 
	IDTDATE		IN	DATE
    ) 
RETURN BOOLEAN
IS
    RCPERIFACT	PERIFACT%ROWTYPE;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fblIsBetweenDateMov');
    
    PKSUBSCRIBERMGR.ACCCURRENTPERIOD( INUSUSCCODI, RCPERIFACT );
    
    
    IF ( TRUNC ( IDTDATE ) BETWEEN TRUNC ( RCPERIFACT.PEFAFIMO ) AND
	 			   TRUNC ( RCPERIFACT.PEFAFFMO ) ) 
    THEN
	PKERRORS.POP;
	RETURN ( TRUE );
    END IF;
    PKERRORS.POP;
    RETURN ( FALSE );
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FBLISBETWEENDATEMOV;



















FUNCTION FBLISBETWEENDATEMOV 
    (
	IDTFECHAMOVINI	IN	PERIFACT.PEFAFIMO%TYPE,
	IDTFECHAMOVFIN	IN	PERIFACT.PEFAFFMO%TYPE,
	IDTDATE		IN	DATE
    ) 
    RETURN BOOLEAN
    IS
BEGIN
    PKERRORS.PUSH ('pkBillingPeriodMgr.fblIsBetweenDateMov_memory');
    
    
    IF ( TRUNC (IDTDATE) BETWEEN TRUNC (IDTFECHAMOVINI) AND
	 			 TRUNC (IDTFECHAMOVFIN) ) 
    THEN
	PKERRORS.POP;
	RETURN (TRUE);
    END IF;
    PKERRORS.POP;
    RETURN (FALSE);
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FBLISBETWEENDATEMOV;






















FUNCTION FBLISVALIDPERIOD
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE,
	INUCICLO	IN	PERIFACT.PEFACICL%TYPE
    )
RETURN BOOLEAN IS
    
    
    
    
    
    
    NURECORDS	NUMBER; 
    
    
    
    CURSOR CUPERIOD 
    IS
	SELECT COUNT(*) FROM PERIFACT
	 WHERE PEFACODI = INUPERIODO
	   AND PEFACICL = INUCICLO;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fblIsValidPeriod');
    IF ( CUPERIOD%ISOPEN ) THEN
	CLOSE CUPERIOD;
    END IF;
    OPEN CUPERIOD;
    FETCH CUPERIOD INTO NURECORDS;
    CLOSE CUPERIOD;
    PKERRORS.POP;
    RETURN( NURECORDS > 0);
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	IF ( CUPERIOD%ISOPEN ) THEN
	    CLOSE CUPERIOD;
	END IF;
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FBLISVALIDPERIOD;






















FUNCTION FNUGETPERIOD
    (
	INUPERIODYEAR	IN	PERIFACT.PEFAANO%TYPE,
	INUPERIODMONTH	IN	PERIFACT.PEFAMES%TYPE,
	INUPERIODCYCLE	IN	PERIFACT.PEFACICL%TYPE
    ) 
    RETURN PERIFACT.PEFACODI%TYPE
    IS
    
    
    CURSOR CUGETPERIOD(INUPERIODYEAR	IN	PERIFACT.PEFAANO%TYPE,
		       INUPERIODMONTH	IN	PERIFACT.PEFAMES%TYPE,
		       INUPERIODCYCLE	IN	PERIFACT.PEFACICL%TYPE) 
    IS
      SELECT  --+ index_desc (perifact ux_perifact01)
	 	PEFACODI
       FROM PERIFACT
      WHERE PEFACICL = INUPERIODCYCLE
	AND PEFAANO  = INUPERIODYEAR
	AND PEFAMES  = INUPERIODMONTH;
    
    NUPERIOD	PERIFACT.PEFACODI%TYPE := NULL;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fnuGetPeriod');
    
    IF ( CUGETPERIOD%ISOPEN ) THEN
	CLOSE  CUGETPERIOD;
    END IF;
    OPEN  CUGETPERIOD (INUPERIODYEAR, INUPERIODMONTH, INUPERIODCYCLE );
    FETCH CUGETPERIOD INTO NUPERIOD;
    CLOSE CUGETPERIOD;
    
    PKGENERALSERVICES.TRACEDATA ('Periodo = '||NUPERIOD);
    PKERRORS.POP;
    RETURN ( NVL ( NUPERIOD , PKCONSTANTE.NULLNUM ) );
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FNUGETPERIOD;













































FUNCTION FRCGETACCCURRENTPERIOD
    (
        INUCICLO	IN	PERIFACT.PEFACICL%TYPE
    ) 
    RETURN PERIFACT%ROWTYPE 
    IS

    
    CURSOR CUPERIFACT (NUCICLO CICLO.CICLCODI%TYPE) IS
    SELECT /*+ index(PERIFACT IX_PEFA_ACTU)*/
           *
    FROM   PERIFACT
    WHERE  PEFACICL+0 = NUCICLO
    AND    PEFAACTU = PKCONSTANTE.SI;

    RCPERIFACT		CUPERIFACT%ROWTYPE ;    

BEGIN


    PKERRORS.PUSH ('pkBillingPeriodMgr.frcGetAccCurrentPeriod');

    
    OPEN CUPERIFACT (INUCICLO) ;
    FETCH CUPERIFACT INTO RCPERIFACT ;

    
    IF (CUPERIFACT%NOTFOUND) THEN
    	CLOSE CUPERIFACT ;
        ERRORS.SETERROR( CNUNO_HAY_PERIODO_CURRENT, INUCICLO );
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    END IF;

    
    FETCH CUPERIFACT INTO RCPERIFACT ;

    
    IF (CUPERIFACT%FOUND) THEN
	CLOSE CUPERIFACT ;
	PKERRORS.SETERRORCODE (CNUVARIOS_PERIODOS_CURRENT);
	RAISE LOGIN_DENIED;
    END IF;

    CLOSE CUPERIFACT;

    PKERRORS.POP;
    RETURN (RCPERIFACT);

EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN

	IF ( CUPERIFACT%ISOPEN) THEN
	    CLOSE CUPERIFACT ;
	END IF;

	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );


END FRCGETACCCURRENTPERIOD;















FUNCTION FRCGETCURPERIODSERV
    (
        INUNUMESERV    IN  SERVSUSC.SESUNUSE%TYPE
    ) 
    RETURN PERIFACT%ROWTYPE
    IS
    NUCICLO         PERIFACT.PEFACICL%TYPE;
    NUSUSCRIPC      SERVSUSC.SESUSUSC%TYPE;
    NUPERIODO       PERIFACT.PEFACODI%TYPE;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.frcGetCurPeriodServ');
    
    NUSUSCRIPC := PKTBLSERVSUSC.FNUGETSUSCRIPTION
                        (
                            INUNUMESERV,
                            PKCONSTANTE.NOCACHE
                        );
    
    NUCICLO :=   PKTBLSUSCRIPC.FNUGETBILLINGCYCLE
                        (
                            NUSUSCRIPC,
                            PKCONSTANTE.NOCACHE
                        );
    
    ACCCURRENTPERIOD ( NUCICLO, NUPERIODO ) ;
    PKERRORS.POP;
    RETURN ( PKTBLPERIFACT.FRCGETRECORD ( NUPERIODO ) );
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FRCGETCURPERIODSERV;

















FUNCTION FRCGETOPENPERIODSERV
    (
        IDTEVENTDATE   IN  DATE,
        INUNUMESERV    IN  SERVSUSC.SESUNUSE%TYPE
    )
    RETURN PERIFACT%ROWTYPE
    IS
    NUCICLO         PERIFACT.PEFACICL%TYPE;
    NUSUSCRIPC      SERVSUSC.SESUSUSC%TYPE;
    NUPERIODO       PERIFACT.PEFACODI%TYPE;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.frcGetCurPeriodServ');
    
    NUSUSCRIPC := PKTBLSERVSUSC.FNUGETSUSCRIPTION
                        (
                            INUNUMESERV,
                            PKCONSTANTE.NOCACHE
                        );
    
    NUCICLO :=   PKTBLSUSCRIPC.FNUGETBILLINGCYCLE
                        (
                            NUSUSCRIPC,
                            PKCONSTANTE.NOCACHE
                        );
    
    PKERRORS.POP;
    RETURN ( FRCGETPERIODFORCYCLE(NUCICLO,IDTEVENTDATE) );
    
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FRCGETOPENPERIODSERV;

























PROCEDURE LOAD
    (
        INUPEFACODI PERIFACT.PEFACODI%TYPE
    )
IS
    
    
    
    
    
    

    RCPERIFACT  CUPERIFACT%ROWTYPE := NULL;
    NUINDICE    NUMBER := 0;
    NUINDX      NUMBER := 0;

    
    
    

BEGIN


    PKERRORS.PUSH('pkBillingPeriodMgr.Load');

    IF (CUPERIFACT%ISOPEN) THEN
        CLOSE CUPERIFACT;
    END IF;

    OPEN CUPERIFACT( INUPEFACODI );

    FETCH CUPERIFACT  INTO  RCPERIFACT ;

    IF ( CUPERIFACT%NOTFOUND ) THEN
        CLOSE CUPERIFACT;
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    END IF ;

    GTNUPEFACODI(INUPEFACODI) := RCPERIFACT.PEFACODI;
    GTNUPEFAANO(INUPEFACODI) := RCPERIFACT.PEFAANO;
    GTNUPEFAMES(INUPEFACODI) := RCPERIFACT.PEFAMES;
    GTNUPEFASACA(INUPEFACODI) := RCPERIFACT.PEFASACA;
    GTDTPEFAFIMO(INUPEFACODI) := RCPERIFACT.PEFAFIMO;
    GTDTPEFAFFMO(INUPEFACODI) := RCPERIFACT.PEFAFFMO;
    GTDTPEFAFECO(INUPEFACODI) := RCPERIFACT.PEFAFECO;
    GTDTPEFAFEPA(INUPEFACODI) := RCPERIFACT.PEFAFEPA;
    GTDTPEFAFFPA(INUPEFACODI) := RCPERIFACT.PEFAFFPA;
    GTDTPEFAFEGE(INUPEFACODI) := RCPERIFACT.PEFAFEGE;
    GTVCPEFAOBSE(INUPEFACODI) := RCPERIFACT.PEFAOBSE;
    GTNUPEFACICL(INUPEFACODI) := RCPERIFACT.PEFACICL;
    GTVCPEFADESC(INUPEFACODI) := RCPERIFACT.PEFADESC;
    GTDTPEFAFCCO(INUPEFACODI) := RCPERIFACT.PEFAFCCO;
    GTDTPEFAFGCI(INUPEFACODI) := RCPERIFACT.PEFAFGCI;
    GTVCPEFAACTU(INUPEFACODI) := RCPERIFACT.PEFAACTU;
    GTDTPEFAFEEM(INUPEFACODI) := RCPERIFACT.PEFAFEEM;

    CLOSE CUPERIFACT;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );


END LOAD;

























PROCEDURE GETRECORD
    (
        INUPEFACODI     IN              PERIFACT.PEFACODI%TYPE,
        ORCPERIFACT     IN OUT NOCOPY   PERIFACT%ROWTYPE
    )
IS
    
    
    
    
    
    
    
    
    
BEGIN


    PKERRORS.PUSH('pkBillingPeriodMgr.GetRecord');

    ORCPERIFACT :=  NULL;

    IF ( NOT GTNUPEFACODI.EXISTS(INUPEFACODI) ) THEN
        
        PKBILLINGPERIODMGR.LOAD(INUPEFACODI);
    END IF;

    ORCPERIFACT.PEFACODI := GTNUPEFACODI(INUPEFACODI);
    ORCPERIFACT.PEFAANO  := GTNUPEFAANO(INUPEFACODI);
    ORCPERIFACT.PEFAMES  := GTNUPEFAMES(INUPEFACODI);
    ORCPERIFACT.PEFASACA := GTNUPEFASACA(INUPEFACODI);
    ORCPERIFACT.PEFAFIMO := GTDTPEFAFIMO(INUPEFACODI);
    ORCPERIFACT.PEFAFFMO := GTDTPEFAFFMO(INUPEFACODI);
    ORCPERIFACT.PEFAFECO := GTDTPEFAFECO(INUPEFACODI);
    ORCPERIFACT.PEFAFEPA := GTDTPEFAFEPA(INUPEFACODI);
    ORCPERIFACT.PEFAFFPA := GTDTPEFAFFPA(INUPEFACODI);
    ORCPERIFACT.PEFAFEGE := GTDTPEFAFEGE(INUPEFACODI);
    ORCPERIFACT.PEFAOBSE := GTVCPEFAOBSE(INUPEFACODI);
    ORCPERIFACT.PEFACICL := GTNUPEFACICL(INUPEFACODI);
    ORCPERIFACT.PEFADESC := GTVCPEFADESC(INUPEFACODI);
    ORCPERIFACT.PEFAFCCO := GTDTPEFAFCCO(INUPEFACODI);
    ORCPERIFACT.PEFAFGCI := GTDTPEFAFGCI(INUPEFACODI);
    ORCPERIFACT.PEFAACTU := GTVCPEFAACTU(INUPEFACODI);
    ORCPERIFACT.PEFAFEEM := GTDTPEFAFEEM(INUPEFACODI);

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        PKERRORS.SETERRORCODE( CSBDIVISION, CSBMODULE, CNURECORD_NO_EXISTE );
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );


END GETRECORD;




































PROCEDURE GETPREVIOUSBILLPERIOD
    (
	INUPERIODO	IN	PERIFACT.PEFACODI%TYPE,
	ORCPERIFACT	OUT	PERIFACT%ROWTYPE
    )
    IS

	
    CNUNO_HAY_PERIODO_ANTERIOR		CONSTANT NUMBER := 36;

        
        CURSOR CUPERIODOANT (
                            IDTFECHAINIMOV PERIFACT.PEFAFFMO%TYPE,
	               		    INUCICLO CICLO.CICLCODI%TYPE
                            ) IS
            SELECT /*+ INDEX_DESC (PERIFACT IX_PEFA_CICL_FFMO) */ *
              FROM PERIFACT /*+ pkBillingPeriodMgr.GetPreviousBillPeriod */
             WHERE PEFAFFMO < IDTFECHAINIMOV
               AND PEFACICL = INUCICLO
               AND ROWNUM = 1;

	
    RCPERIODOACTUAL	PERIFACT%ROWTYPE;
    RCPERIODOANT	PERIFACT%ROWTYPE;	

BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.GetPreviousBillPeriod');

        
    IF ( NOT GTRCPREVPEFA.EXISTS(INUPERIODO) ) THEN
        
        
        RCPERIODOACTUAL := PKTBLPERIFACT.FRCGETRECORD
			(
			    INUPERIODO,
			    PKCONSTANTE.CACHE
			);

        
        OPEN CUPERIODOANT (RCPERIODOACTUAL.PEFAFIMO, RCPERIODOACTUAL.PEFACICL);
        FETCH CUPERIODOANT INTO RCPERIODOANT;

        
        IF ( CUPERIODOANT%NOTFOUND ) THEN
	        CLOSE CUPERIODOANT;

	        PKERRORS.SETERRORCODE ( PKCONSTANTE.CSBDIVISION,
		                            PKCONSTANTE.CSBMOD_BIL,
		                            CNUNO_HAY_PERIODO_ANTERIOR );
	        RAISE LOGIN_DENIED;
        END IF;

        
        CLOSE CUPERIODOANT;

        
        GTRCPREVPEFA(INUPERIODO) := RCPERIODOANT;

    END IF;

    ORCPERIFACT := GTRCPREVPEFA(INUPERIODO);
    PKGENERALSERVICES.TRACEDATA('==========================');
	PKGENERALSERVICES.TRACEDATA('Periodo anterior:'||ORCPERIFACT.PEFACODI);
    PKGENERALSERVICES.TRACEDATA('==========================');

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
       
       IF (CUPERIODOANT%ISOPEN) THEN
            CLOSE CUPERIODOANT;
       END IF;
	   PKERRORS.POP;
	   RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
       
       IF (CUPERIODOANT%ISOPEN) THEN
            CLOSE CUPERIODOANT;
       END IF;
       PKERRORS.POP;
       RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
       
       IF (CUPERIODOANT%ISOPEN) THEN
            CLOSE CUPERIODOANT;
       END IF;
	   PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       PKERRORS.POP;
	   RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETPREVIOUSBILLPERIOD;






















PROCEDURE LOADCURR
    (
        INUPEFACICL PERIFACT.PEFACICL%TYPE
    )
IS
    
    
    
    
    
    

    RCPERIFACT  CUPEFACURR%ROWTYPE := NULL;
    NUINDICE    NUMBER := 0;
    NUINDX      NUMBER := 0;
						
    CNUPERIFACTINVAL	MENSAJE.MENSCODI%TYPE :=  9189;
    
    
    

BEGIN


    PKERRORS.PUSH('pkBillingPeriodMgr.LoadCurr');

    IF (CUPEFACURR%ISOPEN) THEN
        CLOSE CUPEFACURR;
    END IF;

    OPEN CUPEFACURR( INUPEFACICL );

    FETCH CUPEFACURR  INTO  RCPERIFACT ;

    IF ( CUPEFACURR%NOTFOUND ) THEN
        CLOSE CUPEFACURR;
	PKERRORS.SETERRORCODE (
				    CSBDIVISION,
				    PKCONSTANTE.CSBMOD_SAT,
				    CNUPERIFACTINVAL
			      );

        RAISE LOGIN_DENIED;
    END IF ;

    GTNUCURRPEFACODI(INUPEFACICL) := RCPERIFACT.PEFACODI;
    GTNUCURRPEFAANO(INUPEFACICL) := RCPERIFACT.PEFAANO;
    GTNUCURRPEFAMES(INUPEFACICL) := RCPERIFACT.PEFAMES;
    GTNUCURRPEFASACA(INUPEFACICL) := RCPERIFACT.PEFASACA;
    GTDTCURRPEFAFIMO(INUPEFACICL) := RCPERIFACT.PEFAFIMO;
    GTDTCURRPEFAFFMO (INUPEFACICL) := RCPERIFACT.PEFAFFMO;
    GTDTCURRPEFAFECO(INUPEFACICL) := RCPERIFACT.PEFAFECO;
    GTDTCURRPEFAFEPA(INUPEFACICL) := RCPERIFACT.PEFAFEPA;
    GTDTCURRPEFAFFPA(INUPEFACICL) := RCPERIFACT.PEFAFFPA;
    GTDTCURRPEFAFEGE(INUPEFACICL) := RCPERIFACT.PEFAFEGE;
    GTVCCURRPEFAOBSE(INUPEFACICL) := RCPERIFACT.PEFAOBSE;
    GTNUCURRPEFACICL(INUPEFACICL) := RCPERIFACT.PEFACICL;
    GTVCCURRPEFADESC(INUPEFACICL) := RCPERIFACT.PEFADESC;
    GTDTCURRPEFAFCCO(INUPEFACICL) := RCPERIFACT.PEFAFCCO;
    GTDTCURRPEFAFGCI(INUPEFACICL) := RCPERIFACT.PEFAFGCI;
    GTVCCURRPEFAACTU(INUPEFACICL) := RCPERIFACT.PEFAACTU;

    CLOSE CUPEFACURR;

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );


END LOADCURR;






















PROCEDURE GETRECORDCURRENT
    (
        INUPEFACICL     IN              PERIFACT.PEFACICL%TYPE,
        ORCPERIFACT     IN OUT NOCOPY   PERIFACT%ROWTYPE
    )
IS
    
    
    
    
    
    
    
    
    
BEGIN


    PKERRORS.PUSH('pkBillingPeriodMgr.GetRecordCurrent');

    ORCPERIFACT :=  NULL;

    IF ( NOT GTNUCURRPEFACODI.EXISTS(INUPEFACICL) ) THEN
        
        PKBILLINGPERIODMGR.LOADCURR(INUPEFACICL);
    END IF;

    ORCPERIFACT.PEFACODI := GTNUCURRPEFACODI(INUPEFACICL);
    ORCPERIFACT.PEFAANO := GTNUCURRPEFAANO(INUPEFACICL);
    ORCPERIFACT.PEFAMES := GTNUCURRPEFAMES(INUPEFACICL);
    ORCPERIFACT.PEFASACA := GTNUCURRPEFASACA(INUPEFACICL);
    ORCPERIFACT.PEFAFIMO := GTDTCURRPEFAFIMO(INUPEFACICL);
    ORCPERIFACT.PEFAFFMO := GTDTCURRPEFAFFMO (INUPEFACICL);
    ORCPERIFACT.PEFAFECO := GTDTCURRPEFAFECO(INUPEFACICL);
    ORCPERIFACT.PEFAFEPA := GTDTCURRPEFAFEPA(INUPEFACICL);
    ORCPERIFACT.PEFAFFPA := GTDTCURRPEFAFFPA(INUPEFACICL);
    ORCPERIFACT.PEFAFEGE := GTDTCURRPEFAFEGE(INUPEFACICL);
    ORCPERIFACT.PEFAOBSE := GTVCCURRPEFAOBSE(INUPEFACICL);
    ORCPERIFACT.PEFACICL := GTNUCURRPEFACICL(INUPEFACICL);
    ORCPERIFACT.PEFADESC := GTVCCURRPEFADESC(INUPEFACICL);
    ORCPERIFACT.PEFAFCCO := GTDTCURRPEFAFCCO(INUPEFACICL);
    ORCPERIFACT.PEFAFGCI := GTDTCURRPEFAFGCI(INUPEFACICL);
    ORCPERIFACT.PEFAACTU := GTVCCURRPEFAACTU(INUPEFACICL);

    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        PKERRORS.SETERRORCODE( CSBDIVISION, CSBMODULE, CNURECORD_NO_EXISTE );
        RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );


END GETRECORDCURRENT;
























PROCEDURE INITMEMTABLES IS
BEGIN

    PKERRORS.PUSH ('pkBillingPeriodMgr.InitMemTables');

    
    
    GTBPERIFACT.DELETE;
    GTNUPERIODO.DELETE;
    GTRCPREVPEFA.DELETE;

    PKERRORS.POP;
    
EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
        
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
        
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END INITMEMTABLES;



















PROCEDURE SETCACHECURRPERON IS
BEGIN

    PKERRORS.PUSH ('pkBillingPeriodMgr.SetCacheCurrPerOn');
    GNUCACHE := PKCONSTANTE.CACHE;
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END SETCACHECURRPERON;



















PROCEDURE SETCACHECURRPEROFF IS
BEGIN

    PKERRORS.PUSH ('pkBillingPeriodMgr.SetCacheCurrPerOff');
    GNUCACHE := PKCONSTANTE.NOCACHE;
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END SETCACHECURRPEROFF;






















FUNCTION FRCGETPERIODFORCYCLE
(
        INUCYCLE        IN   PERIFACT.PEFACICL%TYPE,
        INUDATE         IN   DATE
) RETURN PERIFACT%ROWTYPE
IS
    CURSOR CUPERIFACT IS
        SELECT --+ INDEX_DESC(perifact ix_pefa_fimo_cicl)
            *
          FROM PERIFACT
         WHERE PEFAFIMO <= INUDATE
           AND PEFACICL = INUCYCLE
           AND ROWNUM = 1 ;

    RCPERIFACT     PERIFACT%ROWTYPE;	

BEGIN
    PKERRORS.PUSH ('pkBillingPeriodMgr.frcGetPeriodForCycle');
    
    OPEN CUPERIFACT;
    FETCH CUPERIFACT INTO RCPERIFACT;
    
    IF RCPERIFACT.PEFACODI IS NULL THEN
        
        PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_SAT, 9019);
        RAISE LOGIN_DENIED;
    END IF;
    
    IF RCPERIFACT.PEFAFFMO < INUDATE THEN
        
        PKERRORS.SETERRORCODE(PKCONSTANTE.CSBDIVISION, PKCONSTANTE.CSBMOD_SAT, 9019);
        RAISE LOGIN_DENIED;
    END IF;

    PKERRORS.POP;

    RETURN RCPERIFACT;
    
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
	    RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
	    RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FRCGETPERIODFORCYCLE;






















FUNCTION FNUGETNEXTPEREXPCYCLE
RETURN PERIFACT.PEFACICL%TYPE
IS
  NUCICLO  PERIFACT.PEFACICL%TYPE;
  
  CURSOR CU_CICLO IS
    SELECT PEFACICL
    FROM   PERIFACT
    WHERE  PEFAFFMO >= SYSDATE
    AND    PEFAFIMO <= SYSDATE
    AND    PEFACICL != PKCONSTANTE.NULLNUM
    ORDER BY PEFAFFMO ASC;
BEGIN

  PKERRORS.PUSH ('pkBillingPeriodMgr.fnuGetNextPerExpCycle');
  OPEN CU_CICLO;
  FETCH CU_CICLO INTO NUCICLO;
  CLOSE CU_CICLO;
  
	PKERRORS.POP;
  RETURN (NUCICLO);
EXCEPTION
    WHEN LOGIN_DENIED THEN
    	PKERRORS.POP;
	    RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
	    RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END FNUGETNEXTPEREXPCYCLE;




















FUNCTION FSBVERSION  RETURN VARCHAR2 IS
BEGIN
    RETURN CSBVERSION;
END;






































PROCEDURE GETMOVEDATESCURRPER
(
    INUCICLO		IN	PERIFACT.PEFACICL%TYPE,
    ONUANO			OUT	PERIFACT.PEFAANO%TYPE,
    ONUMES			OUT	PERIFACT.PEFAMES%TYPE,
    ONUPERIODO		OUT	PERIFACT.PEFACODI%TYPE,
	ODTFINALMOVIM	OUT PERIFACT.PEFAFFMO%TYPE
)
IS
    
    CURSOR CUPERIFACT (NUCICLO CICLO.CICLCODI%TYPE) IS
	    SELECT PEFAANO, PEFAMES, PEFACODI, PEFAFFMO
	    FROM   PERIFACT
	    WHERE  PEFACICL = NUCICLO
	    AND    PEFAACTU = PKCONSTANTE.SI;

    NUANO		PERIFACT.PEFAANO%TYPE;	
    NUMES		PERIFACT.PEFAMES%TYPE;	
    NUPERIODO	PERIFACT.PEFACODI%TYPE; 
    DTFINALMOV	PERIFACT.PEFAFFMO%TYPE; 

BEGIN
    PKERRORS.PUSH ('pkBillingPeriodMgr.GetMoveDatesCurrPer');

	
    IF ( (GNUCACHE = PKCONSTANTE.CACHE OR GNUCACHE IS NULL) AND
         GTBPERIFACT.EXISTS(INUCICLO) )
    THEN
        ONUANO     := GTBPERIFACT(INUCICLO).NUYEAR;
        ONUMES     := GTBPERIFACT(INUCICLO).NUMONTH;
        ONUPERIODO := GTBPERIFACT(INUCICLO).NUPERIOD;
        ODTFINALMOVIM := GTBPERIFACT(INUCICLO).DTENDMOVEMENT;
        PKERRORS.POP;
        RETURN;
    END IF;

    
    OPEN CUPERIFACT (INUCICLO);
    FETCH CUPERIFACT INTO ONUANO, ONUMES, ONUPERIODO, ODTFINALMOVIM;

    IF (CUPERIFACT%NOTFOUND) THEN
        
        ERRORS.SETERROR( CNUNO_HAY_PERIODO_CURRENT, INUCICLO );
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    END IF;

    
    
    FETCH CUPERIFACT INTO NUANO, NUMES, NUPERIODO, DTFINALMOV;

    IF (CUPERIFACT%FOUND) THEN
        
        PKERRORS.SETERRORCODE (CNUVARIOS_PERIODOS_CURRENT);
        RAISE LOGIN_DENIED;
    END IF;

    
    IF (GNUCACHE = PKCONSTANTE.CACHE OR GNUCACHE IS NULL) THEN
        GTBPERIFACT(INUCICLO).NUYEAR   := ONUANO;
        GTBPERIFACT(INUCICLO).NUMONTH  := ONUMES;
        GTBPERIFACT(INUCICLO).NUPERIOD := ONUPERIODO;
        GTBPERIFACT(INUCICLO).DTENDMOVEMENT := ODTFINALMOVIM;
    END IF;

    CLOSE CUPERIFACT;
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END GETMOVEDATESCURRPER;






































PROCEDURE GETENDDATESCURRPER
(
    INUCICLO		IN	PERIFACT.PEFACICL%TYPE,
    ONUANO			OUT	PERIFACT.PEFAANO%TYPE,
    ONUMES			OUT	PERIFACT.PEFAMES%TYPE,
    ONUPERIODO		OUT	PERIFACT.PEFACODI%TYPE,
	ODTFINAL		OUT PERIFACT.PEFAFFMO%TYPE
)
IS
    
    CURSOR CUPERIFACT (NUCICLO CICLO.CICLCODI%TYPE) IS
	    SELECT PEFAANO, PEFAMES, PEFACODI, PEFAFFMO
	    FROM   PERIFACT
	    WHERE  PEFACICL = NUCICLO
	    AND    PEFAACTU = PKCONSTANTE.SI;

    NUANO		PERIFACT.PEFAANO%TYPE;	
    NUMES		PERIFACT.PEFAMES%TYPE;	
    NUPERIODO	PERIFACT.PEFACODI%TYPE; 
    DTFINALMOV	PERIFACT.PEFAFFMO%TYPE; 
    DTFINALMOVTMP	PERIFACT.PEFAFFMO%TYPE;

BEGIN
    PKERRORS.PUSH ('pkBillingPeriodMgr.GetEndDatesCurrPer');

	
    IF ( (GNUCACHE = PKCONSTANTE.CACHE OR GNUCACHE IS NULL) AND
         GTBPERIFACT.EXISTS(INUCICLO) )
    THEN
        ONUANO     := GTBPERIFACT(INUCICLO).NUYEAR;
        ONUMES     := GTBPERIFACT(INUCICLO).NUMONTH;
        ONUPERIODO := GTBPERIFACT(INUCICLO).NUPERIOD;
        ODTFINAL   := GTBPERIFACT(INUCICLO).DTENDMOVEMENT;
        PKERRORS.POP;
        RETURN;
    END IF;

    
    OPEN CUPERIFACT (INUCICLO);
    FETCH CUPERIFACT INTO ONUANO, ONUMES, ONUPERIODO, ODTFINAL;

    IF (CUPERIFACT%NOTFOUND) THEN
        
        ERRORS.SETERROR( CNUNO_HAY_PERIODO_CURRENT, INUCICLO );
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    END IF;

    
    
    FETCH CUPERIFACT INTO NUANO, NUMES, NUPERIODO, DTFINALMOVTMP;

    IF (CUPERIFACT%FOUND) THEN
        
        PKERRORS.SETERRORCODE (CNUVARIOS_PERIODOS_CURRENT);
        RAISE LOGIN_DENIED;
    END IF;

    
    IF (GNUCACHE = PKCONSTANTE.CACHE OR GNUCACHE IS NULL) THEN
        GTBPERIFACT(INUCICLO).NUYEAR   := ONUANO;
        GTBPERIFACT(INUCICLO).NUMONTH  := ONUMES;
        GTBPERIFACT(INUCICLO).NUPERIOD := ONUPERIODO;
        GTBPERIFACT(INUCICLO).DTENDMOVEMENT := ODTFINAL;
    END IF;

    CLOSE CUPERIFACT;
    PKERRORS.POP;

EXCEPTION
    WHEN LOGIN_DENIED THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.POP;
        RAISE LOGIN_DENIED;

    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;

    WHEN OTHERS THEN
        IF (CUPERIFACT%ISOPEN) THEN
            CLOSE CUPERIFACT;
        END IF;

        PKERRORS.NOTIFYERROR (PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        RAISE_APPLICATION_ERROR (PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END GETENDDATESCURRPER;


	



















FUNCTION FDTGETDATETAXCHANGE
    (
        IDTFECHEMIS IN  DATE
    )   RETURN DATE
    IS
     RCPERIFACT PERIFACT%ROWTYPE;
     DTFECHEMIS DATE;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fdtGetDateTaxChange');

    
    PKINSTANCEDATAMGR.GETCG_BILLPERIODRECORD(RCPERIFACT);
	IF ( RCPERIFACT.PEFAFEEM IS NULL ) THEN
        DTFECHEMIS := SYSDATE;
     ELSE
        DTFECHEMIS := RCPERIFACT.PEFAFEEM;
    END IF;

    PKERRORS.POP;

    RETURN (DTFECHEMIS);

EXCEPTION
    WHEN LOGIN_DENIED THEN
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FDTGETDATETAXCHANGE;

















FUNCTION FNUGETPERIODPREVIOUS
    (
    INUPERIODO	    IN	PERIFACT.PEFACODI%TYPE
    )
    RETURN PERIFACT.PEFACODI%TYPE
    IS
    NUPREVIOUSPERIOD PERIFACT.PEFACODI%TYPE;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.fnuGetPeriodPrevious');
    PKBILLINGPERIODMGR.GETPREVIOUSBILLPERIOD
	(
	    INUPERIODO,
        NUPREVIOUSPERIOD
	);
    PKERRORS.POP;
    RETURN (NUPREVIOUSPERIOD);
EXCEPTION
    WHEN LOGIN_DENIED THEN
	PKERRORS.POP;
	RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
        RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FNUGETPERIODPREVIOUS;

    


















    PROCEDURE VALCURRNTBILLNGPERIOD
    (
        INUPERIODO  IN  PERIFACT.PEFACODI%TYPE
    )
    IS
    
        
        
        

        
        CSBMENSPERINOACT    CONSTANT MENSAJE.MENSCODI%TYPE := 17362;
    
        
        
        

        
        RCPERIFACT          PERIFACT%ROWTYPE;
    
    BEGIN

        PKERRORS.PUSH
        (
            'pkBillingPeriodMgr.ValCurrntBillngPeriod'
        );
        
        
        RCPERIFACT :=   PKTBLPERIFACT.FRCGETRECORD
                        (
                            INUPERIODO
                        );
                        
        
        IF( RCPERIFACT.PEFAACTU <> PKCONSTANTE.SI ) THEN

            
            PKERRORS.SETERRORCODE
            (
                PKCONSTANTE.CSBDIVISION,
                PKCONSTANTE.CSBMOD_BIL ,
                CSBMENSPERINOACT
            );

            PKERRORS.CHANGEMESSAGE
            (
                '%s1'     ,
                INUPERIODO
            );

            
            RAISE LOGIN_DENIED;

        END IF;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR
            (
                PKERRORS.FSBLASTOBJECT     ,
                SQLERRM                    ,
                PKBILLINGPERIODMGR.SBERRMSG
            );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR
            (
                PKCONSTANTE.NUERROR_LEVEL2 ,
                PKBILLINGPERIODMGR.SBERRMSG
            );
    END;




















PROCEDURE GETPREVBILLPERIODBYDATE
(
 INUPERIODO IN PERIFACT.PEFACODI%TYPE,
 ORCPERIFACT OUT PERIFACT%ROWTYPE
)
IS
    NUPEFACODI      PERIFACT.PEFACODI%TYPE;
    RCPERIFACTACT   PERIFACT%ROWTYPE;
    DTFECHA         PERIFACT.PEFAFIMO%TYPE;

    CURSOR CUPERIODOANT
    (
        INUCICLO    IN  PERIFACT.PEFACICL%TYPE,
        IDTFECHA    IN  PERIFACT.PEFAFIMO%TYPE
    )
    IS
        SELECT  /*+ index_desc(perifact IX_PEFA_FIMO_CICL) */ *
        FROM    PERIFACT
        WHERE   PEFACICL = INUCICLO
        AND     PEFAFIMO < IDTFECHA
        AND     ROWNUM = 1;

BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.GetPrevBillPeriodByDate');

    RCPERIFACTACT := PKTBLPERIFACT.FRCGETRECORD(INUPERIODO);
    DTFECHA := RCPERIFACTACT.PEFAFIMO;

    IF (CUPERIODOANT%ISOPEN) THEN
        CLOSE CUPERIODOANT;
 END IF;

    OPEN CUPERIODOANT(RCPERIFACTACT.PEFACICL, DTFECHA);
    FETCH CUPERIODOANT INTO ORCPERIFACT;
    CLOSE CUPERIODOANT;

    PKERRORS.POP;

EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR
            (
                PKERRORS.FSBLASTOBJECT     ,
                SQLERRM                    ,
                PKBILLINGPERIODMGR.SBERRMSG
            );
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR
            (
                PKCONSTANTE.NUERROR_LEVEL2 ,
                PKBILLINGPERIODMGR.SBERRMSG
            );
END GETPREVBILLPERIODBYDATE;

    
























    FUNCTION FNUGETMONTHSBYPERIOD
    (
        INUBILLPERIODID     IN      PERIFACT.PEFACODI%TYPE
    ) RETURN NUMBER
    IS

        
        CNUMONTH_DAYS       CONSTANT NUMBER := 30;

        
        RCBILLPERIOD        PERIFACT%ROWTYPE;

        
        NUMONTHSBYPERIOD    NUMBER;

    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [pkBillingPeriodMgr.fnuGetMonthsByPeriod( '
            || TO_CHAR( INUBILLPERIODID ) || ' )]', 5 );

        
        GETRECORD( INUBILLPERIODID, RCBILLPERIOD );

        
        NUMONTHSBYPERIOD := ROUND( ( ( RCBILLPERIOD.PEFAFFMO - RCBILLPERIOD.PEFAFIMO ) / CNUMONTH_DAYS ), 0 );

        UT_TRACE.TRACE( 'Fin: [pkBillingPeriodMgr.fnuGetMonthsByPeriod]', 5 );
        RETURN NUMONTHSBYPERIOD;

    EXCEPTION

        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END FNUGETMONTHSBYPERIOD;


































FUNCTION FRCGETCACHEDCURRENTPER
(
    INUCICLE	IN	PERIFACT.PEFACICL%TYPE
)
RETURN PERIFACT%ROWTYPE
IS
    
    
    
    TBCURRENTPERIODS       TYPERIFACT;          

    
    
    
    CURSOR CUCURRPERIODS
    IS
        SELECT  /*+ index(perifact IX_PEFA_ACTU) */
                *
        FROM    PERIFACT /*+ pkBillingPeriodMgr.frcGetCachedCurrentPer */
        WHERE   PEFAACTU = PKCONSTANTE.SI;

    
    
    

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        PROCEDURE LOADCURRPERIODS
        IS
            
            
            
            NUIDX   NUMBER;

        BEGIN
            PKERRORS.PUSH('pkBillingPeriodMgr.frcGetCachedCurrentPer.LoadCurrPeriods');

            IF ( NOT GBOPERIODSLOADED ) THEN
            
                TD('Loading Current Periods...');
                TBCURRENTPERIODS.DELETE;
                GTBIDXCURRPERIODS.DELETE;

                
                OPEN CUCURRPERIODS;
                FETCH CUCURRPERIODS BULK COLLECT INTO TBCURRENTPERIODS;
                CLOSE CUCURRPERIODS;

                
                NUIDX := TBCURRENTPERIODS.FIRST;
                LOOP
                EXIT WHEN ( NUIDX IS NULL );

                    GTBIDXCURRPERIODS( TBCURRENTPERIODS(NUIDX).PEFACICL ) :=
                    TBCURRENTPERIODS(NUIDX);

                    NUIDX := TBCURRENTPERIODS.NEXT( NUIDX );
                END LOOP;

                GBOPERIODSLOADED := TRUE;
                TBCURRENTPERIODS.DELETE;
                TD('Current Periods Count ['||GTBIDXCURRPERIODS.COUNT||']');
            
            END IF;

            PKERRORS.POP;
        EXCEPTION
            WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
                PKERRORS.POP;
                RAISE;
            WHEN OTHERS THEN
                PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
                PKERRORS.POP;
                RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

        END LOADCURRPERIODS;
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.frcGetCachedCurrentPer');

    
    
    
    LOADCURRPERIODS;

    
    
    
    IF ( GTBIDXCURRPERIODS.EXISTS(INUCICLE) ) THEN
    
        PKERRORS.POP;
        RETURN GTBIDXCURRPERIODS(INUCICLE);

    ELSE
        ERRORS.SETERROR( CNUNO_HAY_PERIODO_CURRENT, INUCICLE );
        PKERRORS.POP;
        RAISE LOGIN_DENIED;
    
    END IF;

EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END FRCGETCACHEDCURRENTPER;






















PROCEDURE FLUSHCACHEDCURRPERIODS
IS
BEGIN
    PKERRORS.PUSH('pkBillingPeriodMgr.FlushCachedCurrPeriods');

    TD('Current Periods: Flushed!');
    GBOPERIODSLOADED := FALSE;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        PKERRORS.POP;
        RAISE;
    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        PKERRORS.POP;
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG);

END FLUSHCACHEDCURRPERIODS;

    


















    PROCEDURE GETPREVPERBYCYCLDATE
    (
        INUCYCLE        IN  PERIFACT.PEFACICL%TYPE,
        IDTENDMOVDATE   IN  PERIFACT.PEFAFFMO%TYPE,
        ORCBILLPERIOD   OUT PERIFACT%ROWTYPE
    )
    IS
        
        
        
        CURSOR CUPREVPERIOD
        IS  SELECT  /*+ index_desc( perifact IX_PEFA_CICL_FFMO ) */
                    *
            FROM    PERIFACT
            WHERE   PEFACICL = INUCYCLE
            AND     PEFAFFMO < IDTENDMOVDATE
            AND     ROWNUM = 1;
    BEGIN

        UT_TRACE.TRACE( 'pkBillingPeriodMgr.GetPrevPerByCyclDate', 15 );

        
        OPEN  CUPREVPERIOD;
        FETCH CUPREVPERIOD INTO ORCBILLPERIOD;
        CLOSE CUPREVPERIOD;

        UT_TRACE.TRACE( 'Fin pkBillingPeriodMgr.GetPrevPerByCyclDate', 15 );

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 OR EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPREVPERBYCYCLDATE;

BEGIN

















    
    INITMEMTABLES;

END PKBILLINGPERIODMGR;