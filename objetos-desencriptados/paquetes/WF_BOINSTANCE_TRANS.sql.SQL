
CREATE OR REPLACE PACKAGE WF_BOINSTANCE_TRANS IS
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   PROCEDURE INSRECORD( IRCWF_INSTANCE_TRANS IN OUT NOCOPY DAWF_INSTANCE_TRANS.STYWF_INSTANCE_TRANS );
   FUNCTION FRFGETTRANSBYPROCESS( INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE )
    RETURN DAWF_INSTANCE_TRANS.TYRFRECORDS;
   PROCEDURE SETGROUPTRANSTONEXTTASKS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE );
   FUNCTION FNUGETNEXTTASKS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE )
    RETURN NUMBER;
   PROCEDURE DELTRANSITIONS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE );
   PROCEDURE FUNCTIONALVALIDATEPBX( INUIDINSTANCIA IN WF_INSTANCE.INSTANCE_ID%TYPE, INUACCOMPLISHAMOUNT IN NUMBER, ISBCHECKPRODUCT IN VARCHAR2 );
   FUNCTION FNUGETBEFORETASKS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE )
    RETURN NUMBER;
   FUNCTION FNUMINCOMPSPBXBYTASKCLONES( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUATTRIBUTE IN WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE, ISBVALUE IN WF_INSTANCE_ATTRIB.VALUE%TYPE )
    RETURN VARCHAR;
   PROCEDURE DELEXCEPTIONLOGS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE );
   PROCEDURE SETINSTATTRIBUTESVALUES( INUSOURCEINSTID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUTARGETINSTID IN WF_INSTANCE.INSTANCE_ID%TYPE );
   PROCEDURE FUNCTIONALVALIDATELN( INUIDINSTANCIA IN WF_INSTANCE.INSTANCE_ID%TYPE, INUACCOMPLISHAMOUNT IN NUMBER );
   FUNCTION FNUGETTRANSTYPETOINST( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUTRANSTYPEID IN WF_INSTANCE_TRANS.TRANSITION_TYPE_ID%TYPE )
    RETURN NUMBER;
   PROCEDURE UPDINCOMINGTRANSSTATUS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUSTATUSID IN WF_INSTANCE_TRANS.STATUS%TYPE );
   FUNCTION FNUGETNEXTTASKWITHCONDITION( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE, INUSTATUS IN WF_INSTANCE.STATUS_ID%TYPE, INUMAXPERMIT IN NUMBER := NULL )
    RETURN NUMBER;
   PROCEDURE GETTRANSITIONS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE, ISBLIST IN VARCHAR, OTBNUINST_TRAN_ID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBINST_TRAN_ID, OTBORIGIN_ID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBORIGIN_ID, OTBNUTARGET_ID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBTARGET_ID, OTBSBGEOMETRY OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBGEOMETRY, OTBNUGROUPID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBGROUP_ID, OTBSBEXPRESSION OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBEXPRESSION, OTBNUEXPRESSION_TYPE OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBEXPRESSION_TYPE, OTBSBDESCRIPTION OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBDESCRIPTION, OTBNUTRANSITION_TYPE_ID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBTRANSITION_TYPE_ID, OTBSBORIGINAL OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBORIGINAL, OTBNUSTATUS OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBSTATUS, ONUISGROUPREJECTION OUT NOCOPY NUMBER );
   FUNCTION FBOISGROUPEXECUTED( INUTRANSID IN WF_INSTANCE_TRANS.INST_TRAN_ID%TYPE, INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE, INUGROUPID IN WF_INSTANCE.GROUP_ID%TYPE )
    RETURN BOOLEAN;
   PROCEDURE UPDACTIVITYTRANS( INUORIGINACTID IN WF_INSTANCE_TRANS.ORIGIN_ID%TYPE, INUNEWSTATUSID IN WF_INSTANCE_TRANS.STATUS%TYPE );
   FUNCTION FBOGROUPEXISTS( INUGROUPID IN WF_INSTANCE_TRANS.GROUP_ID%TYPE )
    RETURN BOOLEAN;
END WF_BOINSTANCE_TRANS;
/


CREATE OR REPLACE PACKAGE BODY WF_BOINSTANCE_TRANS IS
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO154184';
   CNUNOTNEXTTASK CONSTANT NUMBER := 975;
   CNUOVERMAXPERMIT CONSTANT NUMBER := 976;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE INSRECORD( IRCWF_INSTANCE_TRANS IN OUT NOCOPY DAWF_INSTANCE_TRANS.STYWF_INSTANCE_TRANS )
    IS
    BEGIN
      IRCWF_INSTANCE_TRANS.INST_TRAN_ID := WF_BOSEQUENCES.FNUSEQ_WF_INSTANCE_TRANS;
      DAWF_INSTANCE_TRANS.INSRECORD( IRCWF_INSTANCE_TRANS );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSRECORD;
   FUNCTION FRFGETTRANSBYPROCESS( INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE )
    RETURN DAWF_INSTANCE_TRANS.TYRFRECORDS
    IS
      RFQUERY DAWF_INSTANCE_TRANS.TYRFRECORDS;
    BEGIN
      OPEN RFQUERY FOR SELECT WF_Instance_Trans.*, WF_Instance_Trans.RowID
                    FROM WF_Instance_Trans, WF_Instance
                    WHERE WF_Instance_Trans.Origin_ID = WF_Instance.instance_id AND
                    WF_Instance.parent_id = inuParentID
                    ORDER BY status;
      RETURN ( RFQUERY );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETGROUPTRANSTONEXTTASKS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE )
    IS
      CURSOR CUINSTBYUNITTYPE( INUORIGINALTASK IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE ) IS
SELECT it.target_id targetId
	          FROM wf_instance_trans it,wf_instance i
	         WHERE it.origin_id = inuOriginalTask
	           AND it.target_id = i.instance_id
			   AND i.unit_type_id = inuUnitTypeId;
      CURSOR CUGETTRANFROMCOPIESTOTARGET( INUORIGINALTASK IN WF_INSTANCE.INSTANCE_ID%TYPE, INUTARGET IN WF_INSTANCE.INSTANCE_ID%TYPE ) IS
SELECT inst_tran_id, nvl(GROUP_id, 0) groupId
	      FROM wf_instance_trans it
	     WHERE ORigin_id in (
		           SELECT instance_id FROM wf_instance
				   WHERE original_task = inuOriginalTask
				      OR instance_id = inuOriginalTask)
	       AND target_id = inuTarget
		   for UPDATE;
      NUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE;
      NUGROUP WF_INSTANCE_TRANS.GROUP_ID%TYPE;
      NUFLAGSEQ NUMBER;
    BEGIN
      NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK( INUINSTANCEID );
      NUORIGINAL := NVL( NUORIGINAL, INUINSTANCEID );
      FOR RC IN CUINSTBYUNITTYPE( NUORIGINAL, INUUNITTYPEID )
       LOOP
         NUFLAGSEQ := 0;
         FOR RC2 IN CUGETTRANFROMCOPIESTOTARGET( NUORIGINAL, RC.TARGETID )
          LOOP
            IF NUFLAGSEQ = 0 THEN
               IF RC2.GROUPID != 0 THEN
                  EXIT;
                ELSE
                  NUGROUP := WF_BOSEQUENCES.FNUSEQ_WF_INSTANCE_TRANS_GROUP;
                  NUFLAGSEQ := 1;
               END IF;
            END IF;
            DAWF_INSTANCE_TRANS.UPDGROUP_ID( RC2.INST_TRAN_ID, NUGROUP, 0 );
         END LOOP;
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETNEXTTASKS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE )
    RETURN NUMBER
    IS
      CURSOR CUNEXTTASKS( INUTASK IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE ) IS
SELECT it.target_id targetId
	          FROM wf_instance_trans it,wf_instance i
	         WHERE it.origin_id = inuTask
	           AND it.target_id = i.instance_id
			   AND i.unit_type_id = inuUnitTypeId;
      NEXTTASK WF_INSTANCE.INSTANCE_ID%TYPE;
    BEGIN
      OPEN CUNEXTTASKS( INUINSTANCEID, INUUNITTYPEID );
      FETCH CUNEXTTASKS
         INTO NEXTTASK;
      CLOSE CUNEXTTASKS;
      RETURN NEXTTASK;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELTRANSITIONS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE )
    IS
    BEGIN
      DELETE wf_instance_trans
        WHERE origin_id = inuInstanceId
           OR target_id = inuInstanceId;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE FUNCTIONALVALIDATEPBX( INUIDINSTANCIA IN WF_INSTANCE.INSTANCE_ID%TYPE, INUACCOMPLISHAMOUNT IN NUMBER, ISBCHECKPRODUCT IN VARCHAR2 )
    IS
      NUIDORIGINALINST WF_INSTANCE.INSTANCE_ID%TYPE;
      NUIDINTPILOT WF_INSTANCE.INSTANCE_ID%TYPE;
      NUIDINSTCOMP WF_INSTANCE.INSTANCE_ID%TYPE;
      NUIDSTATUSCOMP WF_INSTANCE.INSTANCE_ID%TYPE;
      NUIDINSTPROD WF_INSTANCE.INSTANCE_ID%TYPE;
      NUIDSTATUSPROD WF_INSTANCE.INSTANCE_ID%TYPE;
      SBCUMPLIDA VARCHAR2( 2 );
      SBELIMINADA VARCHAR2( 2 );
      SBCOMPTYPE VARCHAR2( 10 );
      NUMIN_COMPONENTS NUMBER;
      NUATTFLAG_VALIDATE NUMBER;
      NUATTMIN_COMPONENTS NUMBER;
      NUATTCOMPONENT_TYPE NUMBER;
    BEGIN
      NUATTCOMPONENT_TYPE := 20012;
      NUATTFLAG_VALIDATE := 442;
      NUATTMIN_COMPONENTS := 404;
      SBCUMPLIDA := WF_BOINSTANCE.FSBISTASKSETACCOMPLISHED( INUIDINSTANCIA, INUACCOMPLISHAMOUNT );
      IF ( SBCUMPLIDA = GE_BOCONSTANTS.CSBNO ) THEN
         WF_BODISPATCHER.CANCEL_DISPATCH();
         WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( INUIDINSTANCIA, NUATTFLAG_VALIDATE, '0' );
         WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( INUIDINSTANCIA, NUATTMIN_COMPONENTS, '0' );
         DAWF_INSTANCE.UPDSTATUS_ID( INUIDINSTANCIA, WF_BOCONSTANTS.CNUCANCELED );
       ELSE
         IF ( ISBCHECKPRODUCT = GE_BOCONSTANTS.CSBYES ) THEN
            NUIDINSTCOMP := WF_BOINSTANCE_TRANS.FNUGETNEXTTASKS( INUIDINSTANCIA, 287 );
            NUIDSTATUSCOMP := DAWF_INSTANCE.FNUGETSTATUS_ID( NUIDINSTCOMP );
            NUIDINSTPROD := WF_BOINSTANCE_TRANS.FNUGETNEXTTASKS( INUIDINSTANCIA, 2381 );
            NUIDSTATUSPROD := DAWF_INSTANCE.FNUGETSTATUS_ID( NUIDINSTPROD );
         END IF;
         SBCOMPTYPE := WF_BOINSTANCE_ATTRIB.FSBGETATTRIBVALUE( INUIDINSTANCIA, NUATTCOMPONENT_TYPE );
         NUIDORIGINALINST := DAWF_INSTANCE.FNUGETORIGINAL_TASK( INUIDINSTANCIA );
         NUIDORIGINALINST := NVL( NUIDORIGINALINST, INUIDINSTANCIA );
         NUIDINTPILOT := WF_BOINSTANCE.FNUGETINSTANCEBYCOMPONENT( NUIDORIGINALINST, WF_BOCONSTANTS.CNUPILOT );
         NUIDINTPILOT := NVL( NUIDINTPILOT, WF_BOCONSTANTS.CNUNUMERIC_NULL );
         IF ( NUIDINTPILOT != WF_BOCONSTANTS.CNUNUMERIC_NULL ) THEN
            WF_BOINSTANCE.LOCKINSTANCE( NUIDINTPILOT );
         END IF;
         NUMIN_COMPONENTS := WF_BOINSTANCE.FNUTASKSWITHATTRINGIVENSTATUS( NUIDORIGINALINST, WF_BOCONSTANTS.CNUTRUNK, NUATTMIN_COMPONENTS, '1' );
         IF ( NUMIN_COMPONENTS = 0 ) THEN
            NUMIN_COMPONENTS := WF_BOINSTANCE.FNUTASKSWITHATTRINGIVENSTATUS( NUIDORIGINALINST, WF_BOCONSTANTS.CNUPILOT, NUATTMIN_COMPONENTS, '1' );
         END IF;
         IF ( INUACCOMPLISHAMOUNT > 1 ) THEN
            SBELIMINADA := WF_BOINSTANCE.FSBDELETECOPIESBYEXTERNALID( INUIDINSTANCIA );
          ELSE
            SBELIMINADA := GE_BOCONSTANTS.CSBYES;
         END IF;
         IF ( SBELIMINADA = GE_BOCONSTANTS.CSBNO ) THEN
            WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( NUIDORIGINALINST, NUATTFLAG_VALIDATE, '1' );
            WF_BODISPATCHER.CANCEL_DISPATCH();
            DAWF_INSTANCE.UPDSTATUS_ID( INUIDINSTANCIA, WF_BOCONSTANTS.CNUFINISHED );
            WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( INUIDINSTANCIA, NUATTFLAG_VALIDATE, '0' );
            WF_BOINSTANCE_TRANS.DELTRANSITIONS( INUIDINSTANCIA );
            WF_BOINSTANCE_TRANS.DELEXCEPTIONLOGS( INUIDINSTANCIA );
            WF_BOINSTANCE.DELRECORD( INUIDINSTANCIA );
            IF ( NUMIN_COMPONENTS = 0 ) THEN
               IF ( WF_BOINSTANCE_TRANS.FNUMINCOMPSPBXBYTASKCLONES( NUIDORIGINALINST, NUATTFLAG_VALIDATE, '1' ) = GE_BOCONSTANTS.CSBYES ) THEN
                  NUIDINTPILOT := WF_BOINSTANCE.FNUGETINSTANCEBYCOMPONENT( NUIDORIGINALINST, WF_BOCONSTANTS.CNUPILOT );
                  WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( NUIDINTPILOT, NUATTMIN_COMPONENTS, '1' );
                  IF ( INUACCOMPLISHAMOUNT > 1 ) THEN
                     UPDINCOMINGTRANSSTATUS( NUIDINTPILOT, WF_BOCONSTANTS.CNUTRANS_USED );
                  END IF;
                  WF_BODISPATCHER.RETRY_DISPATCH( NUIDINTPILOT );
                ELSE
                  WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( NUIDORIGINALINST, NUATTMIN_COMPONENTS, '0' );
               END IF;
             ELSE
               WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( NUIDORIGINALINST, NUATTMIN_COMPONENTS, '1' );
               IF ( ISBCHECKPRODUCT = GE_BOCONSTANTS.CSBYES ) THEN
                  IF ( NUIDSTATUSPROD != WF_BOCONSTANTS.CNUFINISHED OR ( NUIDSTATUSPROD = WF_BOCONSTANTS.CNUFINISHED AND NUIDSTATUSCOMP = WF_BOCONSTANTS.CNUCREATED ) ) THEN
                     DAWF_INSTANCE.UPDSTATUS_ID( NUIDORIGINALINST, WF_BOCONSTANTS.CNUCANCELED );
                   ELSE
                     IF ( INUACCOMPLISHAMOUNT > 1 ) THEN
                        UPDINCOMINGTRANSSTATUS( NUIDORIGINALINST, WF_BOCONSTANTS.CNUTRANS_USED );
                     END IF;
                     WF_BODISPATCHER.RETRY_DISPATCH( NUIDORIGINALINST );
                  END IF;
                ELSE
                  IF ( INUACCOMPLISHAMOUNT > 1 ) THEN
                     UPDINCOMINGTRANSSTATUS( NUIDORIGINALINST, WF_BOCONSTANTS.CNUTRANS_USED );
                  END IF;
                  WF_BODISPATCHER.RETRY_DISPATCH( NUIDORIGINALINST );
               END IF;
            END IF;
          ELSE
            WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( INUIDINSTANCIA, NUATTFLAG_VALIDATE, '1' );
            IF ( NUMIN_COMPONENTS = 0 ) THEN
               IF ( WF_BOINSTANCE_TRANS.FNUMINCOMPSPBXBYTASKCLONES( NUIDORIGINALINST, NUATTFLAG_VALIDATE, '1' ) = GE_BOCONSTANTS.CSBYES ) THEN
                  IF SBCOMPTYPE != '21' THEN
                     WF_BODISPATCHER.CANCEL_DISPATCH();
                     DAWF_INSTANCE.UPDSTATUS_ID( INUIDINSTANCIA, WF_BOCONSTANTS.CNUCANCELED );
                     NUIDINTPILOT := WF_BOINSTANCE.FNUGETINSTANCEBYCOMPONENT( INUIDINSTANCIA, WF_BOCONSTANTS.CNUPILOT );
                     WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( NUIDINTPILOT, NUATTMIN_COMPONENTS, '1' );
                     IF ( INUACCOMPLISHAMOUNT > 1 ) THEN
                        UPDINCOMINGTRANSSTATUS( NUIDINTPILOT, WF_BOCONSTANTS.CNUTRANS_USED );
                     END IF;
                     WF_BODISPATCHER.RETRY_DISPATCH( NUIDINTPILOT );
                   ELSE
                     WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( INUIDINSTANCIA, NUATTMIN_COMPONENTS, '1' );
                  END IF;
                ELSE
                  WF_BODISPATCHER.CANCEL_DISPATCH();
                  DAWF_INSTANCE.UPDSTATUS_ID( INUIDINSTANCIA, 8 );
                  WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( INUIDINSTANCIA, NUATTMIN_COMPONENTS, '0' );
               END IF;
             ELSE
               WF_BOINSTANCE_ATTRIB.UPDINSATTVAL( INUIDINSTANCIA, NUATTMIN_COMPONENTS, '1' );
               IF ( ISBCHECKPRODUCT = GE_BOCONSTANTS.CSBYES ) THEN
                  IF ( NUIDSTATUSPROD != 6 OR ( NUIDSTATUSPROD = 6 AND NUIDSTATUSCOMP = 1 ) ) THEN
                     WF_BODISPATCHER.CANCEL_DISPATCH();
                     DAWF_INSTANCE.UPDSTATUS_ID( INUIDINSTANCIA, 8 );
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETBEFORETASKS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE )
    RETURN NUMBER
    IS
      CURSOR CUBEFORETASKS( INUTASK IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE ) IS
SELECT it.origin_id ORiginId
	        	FROM wf_instance_trans it,wf_instance i
	        WHERE  it.target_id = inuTask
				AND	it.origin_id = i.instance_id
			   	AND i.unit_type_id = inuUnitTypeId;
      BEFORETASK WF_INSTANCE.INSTANCE_ID%TYPE;
      NUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE;
    BEGIN
      NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK( INUINSTANCEID );
      NUORIGINAL := NVL( NUORIGINAL, INUINSTANCEID );
      OPEN CUBEFORETASKS( NUORIGINAL, INUUNITTYPEID );
      FETCH CUBEFORETASKS
         INTO BEFORETASK;
      CLOSE CUBEFORETASKS;
      RETURN BEFORETASK;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUMINCOMPSPBXBYTASKCLONES( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUATTRIBUTE IN WF_INSTANCE_ATTRIB.ATTRIBUTE_ID%TYPE, ISBVALUE IN WF_INSTANCE_ATTRIB.VALUE%TYPE )
    RETURN VARCHAR
    IS
      NUNUMTRONCAL NUMBER;
      NUNUMPILOTO NUMBER;
      NUVALTRUNKMININNUMBER NUMBER;
    BEGIN
      NUNUMTRONCAL := WF_BOINSTANCE.FNUTASKSWITHATTRINGIVENSTATUS( INUINSTANCEID, 22, INUATTRIBUTE, ISBVALUE );
      NUNUMPILOTO := WF_BOINSTANCE.FNUTASKSWITHATTRINGIVENSTATUS( INUINSTANCEID, 21, INUATTRIBUTE, ISBVALUE );
      NUVALTRUNKMININNUMBER := GE_BOPARAMETER.FNUGET( 'TRUNK_MINIM_NUMBER' );
      IF ( NUNUMPILOTO = 1 AND NUNUMTRONCAL >= NUVALTRUNKMININNUMBER ) THEN
         RETURN GE_BOCONSTANTS.CSBYES;
       ELSE
         RETURN GE_BOCONSTANTS.CSBNO;
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELEXCEPTIONLOGS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE )
    IS
    BEGIN
      DELETE wf_exception_log
        WHERE instance_id = inuInstanceId;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE SETINSTATTRIBUTESVALUES( INUSOURCEINSTID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUTARGETINSTID IN WF_INSTANCE.INSTANCE_ID%TYPE )
    IS
      CURSOR CUVALIDATTRIBUTES( NUSOURCEINSTID IN WF_INSTANCE.INSTANCE_ID%TYPE, NUTARGETINSTID IN WF_INSTANCE.INSTANCE_ID%TYPE ) IS
SELECT ias.attribute_id, ias.value
	        	FROM wf_instance_attrib ias
	        WHERE  ias.instance_id = nuSourceInstId
	        	AND ias.attribute_id in
	        		(select iat.attribute_id
						FROM wf_instance_attrib iat
					 WHERE iat.instance_id = nuTargetInstId
	        		);
    BEGIN
      FOR RC IN CUVALIDATTRIBUTES( INUSOURCEINSTID, INUTARGETINSTID )
       LOOP
         UPDATE wf_instance_attrib
				SET value = rc.value
			WHERE instance_id = inuTargetInstId
				AND attribute_id = rc.attribute_id;
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE FUNCTIONALVALIDATELN( INUIDINSTANCIA IN WF_INSTANCE.INSTANCE_ID%TYPE, INUACCOMPLISHAMOUNT IN NUMBER )
    IS
      NUIDORIGINALINST WF_INSTANCE.INSTANCE_ID%TYPE;
      SBELIMINADA VARCHAR2( 2 );
      SBCUMPLIDA VARCHAR2( 2 );
    BEGIN
      SBCUMPLIDA := WF_BOINSTANCE.FSBISTASKSETACCOMPLISHED( INUIDINSTANCIA, INUACCOMPLISHAMOUNT );
      IF ( SBCUMPLIDA = GE_BOCONSTANTS.CSBYES ) THEN
         SBELIMINADA := WF_BOINSTANCE.FSBDELETECOPIESBYEXTERNALID( INUIDINSTANCIA );
         IF ( SBELIMINADA = GE_BOCONSTANTS.CSBNO ) THEN
            WF_BODISPATCHER.CANCEL_DISPATCH();
            DAWF_INSTANCE.UPDSTATUS_ID( INUIDINSTANCIA, WF_BOCONSTANTS.CNUCANCELED );
            NUIDORIGINALINST := DAWF_INSTANCE.FNUGETORIGINAL_TASK( INUIDINSTANCIA );
            NUIDORIGINALINST := NVL( NUIDORIGINALINST, INUIDINSTANCIA );
            SBELIMINADA := WF_BOINSTANCE.FSBDELETECOPIESBYEXTERNALID( NUIDORIGINALINST );
            IF ( INUACCOMPLISHAMOUNT > 1 ) THEN
               UPDINCOMINGTRANSSTATUS( NUIDORIGINALINST, WF_BOCONSTANTS.CNUTRANS_USED );
            END IF;
            DAWF_INSTANCE.UPDSTATUS_ID( NUIDORIGINALINST, WF_BOCONSTANTS.CNUCANCELED );
            WF_BODISPATCHER.RETRY_DISPATCH( NUIDORIGINALINST );
         END IF;
       ELSE
         WF_BODISPATCHER.CANCEL_DISPATCH();
         DAWF_INSTANCE.UPDSTATUS_ID( INUIDINSTANCIA, WF_BOCONSTANTS.CNUCANCELED );
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETTRANSTYPETOINST( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUTRANSTYPEID IN WF_INSTANCE_TRANS.TRANSITION_TYPE_ID%TYPE )
    RETURN NUMBER
    IS
      CURSOR CUTRANS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUTRANSTYPEID IN WF_INSTANCE_TRANS.TRANSITION_TYPE_ID%TYPE ) IS
SELECT count(*)
	          FROM wf_instance_trans
	         WHERE target_id = inuInstanceId
			   AND transition_type_id = inuTransTypeId
			   AND status = wf_boconstants.cnuTRANS_USED;
      NUCOUNTER NUMBER := 0;
    BEGIN
      OPEN CUTRANS( INUINSTANCEID, INUTRANSTYPEID );
      FETCH CUTRANS
         INTO NUCOUNTER;
      CLOSE CUTRANS;
      RETURN NUCOUNTER;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDINCOMINGTRANSSTATUS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUSTATUSID IN WF_INSTANCE_TRANS.STATUS%TYPE )
    IS
    BEGIN
      UPDATE wf_instance_trans
		 	SET status = inuStatusId
		WHERE target_id = inuInstanceId
			AND status != inuStatusId;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETNEXTTASKWITHCONDITION( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE, INUSTATUS IN WF_INSTANCE.STATUS_ID%TYPE, INUMAXPERMIT IN NUMBER := NULL )
    RETURN NUMBER
    IS
      CURSOR CUBROTHINS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUUNITTYPEID IN WF_INSTANCE.UNIT_TYPE_ID%TYPE, INUSTATUS IN WF_INSTANCE.STATUS_ID%TYPE ) IS
SELECT  min(instance_id), count(distinct instance_id)
        FROM wf_instance
        WHERE (instance_id = inuInstanceId OR original_task = inuInstanceId)
           AND unit_type_id = inuUnitTypeId
           AND status_id = inuStatus;
      NEXTTASK WF_INSTANCE.INSTANCE_ID%TYPE;
      RESULTTASK WF_INSTANCE.INSTANCE_ID%TYPE;
      AMOUNTNEXTTASK NUMBER;
      NUORIGINAL WF_INSTANCE.INSTANCE_ID%TYPE;
    BEGIN
      DAWF_INSTANCE.ACCKEY( INUINSTANCEID );
      DAWF_UNIT_TYPE.ACCKEY( INUUNITTYPEID );
      DAWF_INSTANCE_STATUS.ACCKEY( INUSTATUS );
      NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK( INUINSTANCEID );
      NUORIGINAL := NVL( NUORIGINAL, INUINSTANCEID );
      NEXTTASK := WF_BOINSTANCE_TRANS.FNUGETNEXTTASKS( NUORIGINAL, INUUNITTYPEID );
      IF NEXTTASK IS NULL THEN
         AMOUNTNEXTTASK := 0;
       ELSE
         NUORIGINAL := DAWF_INSTANCE.FNUGETORIGINAL_TASK( NEXTTASK );
         NUORIGINAL := NVL( NUORIGINAL, NEXTTASK );
         OPEN CUBROTHINS( NUORIGINAL, INUUNITTYPEID, INUSTATUS );
         FETCH CUBROTHINS
            INTO RESULTTASK, AMOUNTNEXTTASK;
         CLOSE CUBROTHINS;
      END IF;
      IF ( AMOUNTNEXTTASK = 0 ) THEN
         NEXTTASK := NULL;
         ERRORS.SETERROR( CNUNOTNEXTTASK, INUINSTANCEID || '|' || INUUNITTYPEID || '|' || INUSTATUS );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      IF ( AMOUNTNEXTTASK != INUMAXPERMIT ) THEN
         RESULTTASK := NULL;
         ERRORS.SETERROR( CNUOVERMAXPERMIT, AMOUNTNEXTTASK || '|' || INUINSTANCEID || '|' || INUUNITTYPEID || '|' || INUSTATUS || '|' || INUMAXPERMIT );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      RETURN RESULTTASK;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE GETTRANSITIONS( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE, ISBLIST IN VARCHAR, OTBNUINST_TRAN_ID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBINST_TRAN_ID, OTBORIGIN_ID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBORIGIN_ID, OTBNUTARGET_ID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBTARGET_ID, OTBSBGEOMETRY OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBGEOMETRY, OTBNUGROUPID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBGROUP_ID, OTBSBEXPRESSION OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBEXPRESSION, OTBNUEXPRESSION_TYPE OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBEXPRESSION_TYPE, OTBSBDESCRIPTION OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBDESCRIPTION, OTBNUTRANSITION_TYPE_ID OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBTRANSITION_TYPE_ID, OTBSBORIGINAL OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBORIGINAL, OTBNUSTATUS OUT NOCOPY DAWF_INSTANCE_TRANS.TYTBSTATUS, ONUISGROUPREJECTION OUT NOCOPY NUMBER )
    IS
      CNUNOTNEXTTASK CONSTANT NUMBER := 3645;
      NUIND NUMBER( 4 ) := 0;
      CURSOR CUTRANSITION( INUINSTANCEID IN WF_INSTANCE.INSTANCE_ID%TYPE, ISBORIGINAL_TRANS IN VARCHAR2 ) IS
SELECT  inst_tran_id,
		origin_id,
		target_id,
		geometry,
		group_id,
		expression,
		expression_type,
		description,
		original,
		status,
		transition_type_id,
		rowid
	FROM    wf_instance_trans
	WHERE   origin_id = inuInstanceId
	AND     original  = isbOriginal_trans;
      SBYES GE_PARAMETER.VALUE%TYPE;
      NURETURN NUMBER;
      NURESULT NUMBER;
    BEGIN
      SBYES := GE_BOPARAMETER.FSBGET( 'YES' );
      ONUISGROUPREJECTION := GE_BOCONSTANTS.CNUFALSE;
      FOR RCREC IN CUTRANSITION( INUINSTANCEID, SBYES )
       LOOP
         NURETURN := GE_BOCONSTANTS.CNUTRUE;
         IF ( RCREC.EXPRESSION IS NOT NULL ) THEN
            NURESULT := WF_BOLOGICALPARSER.EXECUTE( RCREC.EXPRESSION, ISBLIST, NURETURN );
         END IF;
         NUIND := NUIND + 1;
         OTBNUSTATUS( NUIND ) := RCREC.STATUS;
         IF ( NURETURN = GE_BOCONSTANTS.CNUFALSE ) THEN
            OTBNUSTATUS( NUIND ) := WF_BOCONSTANTS.CNUTRANS_REJECTED;
         END IF;
         UT_TRACE.TRACE( 'TransAgent.getNext groupId= ' || RCREC.GROUP_ID, 7 );
         UT_TRACE.TRACE( 'TransAgent.transId= ' || RCREC.INST_TRAN_ID, 7 );
         ONUISGROUPREJECTION := GE_BOCONSTANTS.CNUFALSE;
         IF ( ( RCREC.GROUP_ID > 0 ) AND NOT ( WF_BOINSTANCE_TRANS.FBOISGROUPEXECUTED( RCREC.INST_TRAN_ID, INUPARENTID, RCREC.GROUP_ID ) ) ) THEN
            ONUISGROUPREJECTION := GE_BOCONSTANTS.CNUTRUE;
            OTBNUSTATUS( NUIND ) := WF_BOCONSTANTS.CNUTRANS_WAITING;
         END IF;
         OTBNUINST_TRAN_ID( NUIND ) := RCREC.INST_TRAN_ID;
         OTBORIGIN_ID( NUIND ) := RCREC.ORIGIN_ID;
         OTBNUTARGET_ID( NUIND ) := RCREC.TARGET_ID;
         OTBSBGEOMETRY( NUIND ) := RCREC.GEOMETRY;
         OTBNUGROUPID( NUIND ) := RCREC.GROUP_ID;
         OTBSBEXPRESSION( NUIND ) := RCREC.EXPRESSION;
         OTBNUEXPRESSION_TYPE( NUIND ) := RCREC.EXPRESSION_TYPE;
         OTBSBDESCRIPTION( NUIND ) := RCREC.DESCRIPTION;
         OTBNUTRANSITION_TYPE_ID( NUIND ) := RCREC.TRANSITION_TYPE_ID;
         OTBSBORIGINAL( NUIND ) := RCREC.ORIGINAL;
         UT_TRACE.TRACE( 'pransAgent.getNext ia = ' || NUIND, 7 );
         UT_TRACE.TRACE( 'GetTransitions inst = ' || OTBORIGIN_ID( NUIND ) || ' estado ' || OTBNUSTATUS( NUIND ) );
      END LOOP;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END GETTRANSITIONS;
   FUNCTION FBOISGROUPEXECUTED( INUTRANSID IN WF_INSTANCE_TRANS.INST_TRAN_ID%TYPE, INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE, INUGROUPID IN WF_INSTANCE.GROUP_ID%TYPE )
    RETURN BOOLEAN
    IS
      CURSOR CUTRANSITIONS( INUPARENTID IN WF_INSTANCE.PARENT_ID%TYPE, INUGROUPID IN WF_INSTANCE.GROUP_ID%TYPE ) IS
SELECT inst_tran_id
        FROM   wf_instance_trans it
        WHERE  it.origin_id in (SELECT i.instance_id
			        FROM   wf_instance i
			        WHERE  i.parent_id = inuParentId
			        AND    it.group_id = inuGroupId
			        AND   (it.status  in 
					(WF_BOConstants.cnuTRANS_CREATED,
			        	 WF_BOConstants.cnuTRANS_REJECTED))) 
        FOR UPDATE;
    BEGIN
      UT_TRACE.TRACE( 'TransitionDB.isGroupExecuted(groupId=' || INUGROUPID || ')', 3 );
      FOR RCRECORD IN CUTRANSITIONS( INUPARENTID, INUGROUPID )
       LOOP
         BEGIN
            IF ( RCRECORD.INST_TRAN_ID = INUTRANSID ) THEN
               RAISE EX.CONTROLLED_ERROR;
            END IF;
            UT_TRACE.TRACE( 'Existe al menos un registro diferente de la' || ' transicion ' || RCRECORD.INST_TRAN_ID || ' que todavia espera', 1 );
            RETURN FALSE;
          EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
               NULL;
         END;
      END LOOP;
      RETURN TRUE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBOISGROUPEXECUTED;
   PROCEDURE UPDACTIVITYTRANS( INUORIGINACTID IN WF_INSTANCE_TRANS.ORIGIN_ID%TYPE, INUNEWSTATUSID IN WF_INSTANCE_TRANS.STATUS%TYPE )
    IS
    BEGIN
      UT_TRACE.TRACE( 'INICIO WF_BOInstance_Trans.UpdActivityTrans', 5 );
      UPDATE wf_instance_trans
        SET status = inuNewStatusId
        WHERE origin_id = inuOriginActId
        AND status in (wf_boConstants.cnuTRANS_CREATED,
                       wf_boConstants.cnuTRANS_REJECTED);
      UT_TRACE.TRACE( 'FIN WF_BOInstance_Trans.UpdActivityTrans - OK', 5 );
    EXCEPTION
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDACTIVITYTRANS;
   FUNCTION FBOGROUPEXISTS( INUGROUPID IN WF_INSTANCE_TRANS.GROUP_ID%TYPE )
    RETURN BOOLEAN
    IS
      NUGROUPID NUMBER;
      CURSOR CUGROUP IS
SELECT group_id
            FROM wf_instance_trans
            WHERE group_id = inuGroupId;
      PROCEDURE CLOSECURSOR
       IS
       BEGIN
         IF ( CUGROUP%ISOPEN ) THEN
            CLOSE CUGROUP;
         END IF;
       EXCEPTION
         WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
      END CLOSECURSOR;
    BEGIN
      UT_TRACE.TRACE( 'INICIO WF_BOInstance_Trans.fboGroupExists', 15 );
      CLOSECURSOR;
      OPEN CUGROUP;
      FETCH CUGROUP
         INTO NUGROUPID;
      CLOSE CUGROUP;
      UT_TRACE.TRACE( 'FIN WF_BOInstance_Trans.fboGroupExists - OK', 15 );
      RETURN ( NUGROUPID IS NOT NULL );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         CLOSECURSOR;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         CLOSECURSOR;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FBOGROUPEXISTS;
END WF_BOINSTANCE_TRANS;
/


