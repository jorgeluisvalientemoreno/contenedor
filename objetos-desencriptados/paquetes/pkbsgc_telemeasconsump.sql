
CREATE OR REPLACE PACKAGE PKBSGC_TELEMEASCONSUMP IS
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   PROCEDURE REGISTERCONSUMPTION( ISBCODEELME IN ELEMMEDI.ELMECODI%TYPE, INUCOTMTCON IN GC_CONSTEME.COTMTCON%TYPE, IDTCOTMFECO IN GC_CONSTEME.COTMFECO%TYPE, INUCOTMUNCO IN GC_CONSTEME.COTMUNCO%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE );
   PROCEDURE UPDATECONSUMPTION( ISBCODEELME IN ELEMMEDI.ELMECODI%TYPE, INUCOTMTCON IN GC_CONSTEME.COTMTCON%TYPE, IDTCOTMFECO IN GC_CONSTEME.COTMFECO%TYPE, INUCOTMUNCO IN GC_CONSTEME.COTMUNCO%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE );
   PROCEDURE DELETECONSUMPTION( ISBCODEELME IN ELEMMEDI.ELMECODI%TYPE, INUCOTMTCON IN GC_CONSTEME.COTMTCON%TYPE, IDTCOTMFECO IN GC_CONSTEME.COTMFECO%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE );
END PKBSGC_TELEMEASCONSUMP;
/


CREATE OR REPLACE PACKAGE BODY PKBSGC_TELEMEASCONSUMP IS
   CSBVERSION CONSTANT VARCHAR2( 250 ) := 'SAO192580';
   SBERRMSG GE_ERROR_LOG.DESCRIPTION%TYPE;
   BLISLOADED BOOLEAN := FALSE;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.fsbVersion' );
      PKERRORS.POP;
      RETURN ( CSBVERSION );
    EXCEPTION
      WHEN LOGIN_DENIED THEN
         PKERRORS.POP;
         RAISE LOGIN_DENIED;
      WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         RAISE PKCONSTANTE.EXERROR_LEVEL2;
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
   END FSBVERSION;
   PROCEDURE REGISTERCONSUMPTION( ISBCODEELME IN ELEMMEDI.ELMECODI%TYPE, INUCOTMTCON IN GC_CONSTEME.COTMTCON%TYPE, IDTCOTMFECO IN GC_CONSTEME.COTMFECO%TYPE, INUCOTMUNCO IN GC_CONSTEME.COTMUNCO%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
      RCCONSTEME GC_CONSTEME%ROWTYPE;
      NUIDELME GC_CONSTEME.COTMELME%TYPE;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.RegisterConsumption.Initialize' );
         PKERRORS.INITIALIZE;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.RegisterConsumption.ClearMemory' );
         PKTBLGC_CONSTEME.CLEARMEMORY;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END CLEARMEMORY;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.RegisterConsumption.ValInputData' );
         PKMEASUREMENTELEMENMGR.VALBASICDATA( ISBCODEELME );
         PKCONSUMPTIONTYPEMGR.VALBASICDATA( INUCOTMTCON );
         PKBOGC_TELEMEASCONSUMP.VALCONSUMPTIONDATE( IDTCOTMFECO );
         PKBOGC_TELEMEASCONSUMP.VALCONSUMPTIONUNITS( INUCOTMUNCO );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALINPUTDATA;
      PROCEDURE VALBASICDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.RegisterConsumption.ValBasicData' );
         PKBOGC_TELEMEASCONSUMP.VALDUPLCONSTELEME( ISBCODEELME, INUCOTMTCON, IDTCOTMFECO );
         PKBOGC_TELEMEASCONSUMP.VALREGISTERBASICDATA( ISBCODEELME, IDTCOTMFECO, INUCOTMTCON );
         PKBOGC_TELEMEASCONSUMP.VALMEASURERCONSUMTYPE( ISBCODEELME, INUCOTMTCON );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALBASICDATA;
    BEGIN
      PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.RegisterConsumption' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA;
      VALBASICDATA;
      PKBOGC_TELEMEASCONSUMP.REGREADCONSUMPTION( ISBCODEELME, INUCOTMTCON, IDTCOTMFECO, INUCOTMUNCO );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END REGISTERCONSUMPTION;
   PROCEDURE UPDATECONSUMPTION( ISBCODEELME IN ELEMMEDI.ELMECODI%TYPE, INUCOTMTCON IN GC_CONSTEME.COTMTCON%TYPE, IDTCOTMFECO IN GC_CONSTEME.COTMFECO%TYPE, INUCOTMUNCO IN GC_CONSTEME.COTMUNCO%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
      RCCONSTEME GC_CONSTEME%ROWTYPE;
      NUIDELME GC_CONSTEME.COTMELME%TYPE;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.UpdateConsumption.Initialize' );
         PKERRORS.INITIALIZE;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.UpdateConsumption.ClearMemory' );
         PKTBLGC_CONSTEME.CLEARMEMORY;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END CLEARMEMORY;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.UpdateConsumption.ValInputData' );
         PKMEASUREMENTELEMENMGR.VALBASICDATA( ISBCODEELME );
         PKCONSUMPTIONTYPEMGR.VALBASICDATA( INUCOTMTCON );
         PKBOGC_TELEMEASCONSUMP.VALCONSUMPTIONDATE( IDTCOTMFECO );
         PKBOGC_TELEMEASCONSUMP.VALCONSUMPTIONUNITS( INUCOTMUNCO );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALINPUTDATA;
      PROCEDURE VALBASICDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.UpdateConsumption.ValBasicData' );
         PKBOGC_TELEMEASCONSUMP.VALCNSMPTIONEXISTS( ISBCODEELME, IDTCOTMFECO, INUCOTMTCON );
         PKBOGC_TELEMEASCONSUMP.VALUPDATEBASICDATA( ISBCODEELME, IDTCOTMFECO );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALBASICDATA;
    BEGIN
      PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.UpdateConsumption' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA;
      VALBASICDATA;
      PKBOGC_TELEMEASCONSUMP.REGCORRECTCONSUMPTION( ISBCODEELME, INUCOTMTCON, IDTCOTMFECO, INUCOTMUNCO );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END UPDATECONSUMPTION;
   PROCEDURE DELETECONSUMPTION( ISBCODEELME IN ELEMMEDI.ELMECODI%TYPE, INUCOTMTCON IN GC_CONSTEME.COTMTCON%TYPE, IDTCOTMFECO IN GC_CONSTEME.COTMFECO%TYPE, ONUERRORCODE OUT GE_ERROR_LOG.ERROR_LOG_ID%TYPE, OSBERRORMESSAGE OUT GE_ERROR_LOG.DESCRIPTION%TYPE )
    IS
      RCCONSTEME GC_CONSTEME%ROWTYPE;
      NUIDELME GC_CONSTEME.COTMELME%TYPE;
      PROCEDURE INITIALIZE
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.DeleteConsumption.Initialize' );
         PKERRORS.INITIALIZE;
         ONUERRORCODE := PKCONSTANTE.EXITO;
         OSBERRORMESSAGE := PKCONSTANTE.NULLSB;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END INITIALIZE;
      PROCEDURE CLEARMEMORY
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.DeleteConsumption.ClearMemory' );
         PKTBLGC_CONSTEME.CLEARMEMORY;
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END CLEARMEMORY;
      PROCEDURE VALINPUTDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.DeleteConsumption.ValInputData' );
         PKMEASUREMENTELEMENMGR.VALBASICDATA( ISBCODEELME );
         PKCONSUMPTIONTYPEMGR.VALBASICDATA( INUCOTMTCON );
         PKBOGC_TELEMEASCONSUMP.VALCONSUMPTIONDATE( IDTCOTMFECO );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALINPUTDATA;
      PROCEDURE VALBASICDATA
       IS
       BEGIN
         PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.DeleteConsumption.ValBasicData' );
         PKBOGC_TELEMEASCONSUMP.VALDELETEBASICDATA( ISBCODEELME, IDTCOTMFECO, INUCOTMTCON );
         PKERRORS.POP;
       EXCEPTION
         WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
         WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
         WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
      END VALBASICDATA;
    BEGIN
      PKERRORS.PUSH( 'pkBSGC_TeleMeasConsump.DeleteConsumption' );
      INITIALIZE;
      CLEARMEMORY;
      VALINPUTDATA;
      VALBASICDATA;
      PKBOGC_TELEMEASCONSUMP.DELETECONSUMPTION( ISBCODEELME, INUCOTMTCON, IDTCOTMFECO );
      PKERRORS.POP;
    EXCEPTION
      WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
      WHEN OTHERS THEN
         PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
         PKERRORS.POP;
         PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
   END DELETECONSUMPTION;
END PKBSGC_TELEMEASCONSUMP;
/


