PACKAGE BODY OR_boCreateActSupport
IS

























    
    
    
    
    CSBVERSION  CONSTANT VARCHAR2(20)  := 'SAO213492';

	
    
    

    
    
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

  











































    PROCEDURE  CREATEACTIVITSUPPORT
    (
        INUORDERACIVITYID   IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUITEMSUPPORTID    IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUOPERATINGUNITID  IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBCOMMENT          IN  OR_ORDER_ACTIVITY.COMMENT_%TYPE,
        IONUORDERID         IN OUT OR_ORDER.ORDER_ID%TYPE,
        INUPROCESSID        IN  OR_ORDER_ACTIVITY.PROCESS_ID%TYPE,
        ONUORDERACTIVITYID  OUT OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        ONUORDERITEMID      OUT OR_ORDER_ACTIVITY.ORDER_ITEM_ID%TYPE
    )
    IS
        RCORDER                 DAOR_ORDER.STYOR_ORDER;
        RCORDERACTIVITYORIG     DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        RCORDERACTIVITYNEW      DAOR_ORDER_ACTIVITY.STYOR_ORDER_ACTIVITY;
        BLASSIGN                BOOLEAN;
    BEGIN
        UT_TRACE.TRACE('inicio or_bocreateactsupport.CreateActivitSupport',15);
        
        RCORDERACTIVITYORIG := DAOR_ORDER_ACTIVITY.FRCGETRCDATA(INUORDERACIVITYID);
        
        BLASSIGN := IONUORDERID IS NULL;

        OR_BOORDERACTIVITIES.CREATEACTIVITY
        (
            INUITEMSUPPORTID,
            RCORDERACTIVITYORIG.PACKAGE_ID,
            RCORDERACTIVITYORIG.MOTIVE_ID,
            RCORDERACTIVITYORIG.COMPONENT_ID,
            RCORDERACTIVITYORIG.INSTANCE_ID,
            RCORDERACTIVITYORIG.ADDRESS_ID,
            RCORDERACTIVITYORIG.ELEMENT_ID,
            RCORDERACTIVITYORIG.SUBSCRIBER_ID,
            RCORDERACTIVITYORIG.SUBSCRIPTION_ID,
            RCORDERACTIVITYORIG.PRODUCT_ID,
            NULL,
            INUOPERATINGUNITID,
            NULL,
            INUPROCESSID,
            ISBCOMMENT,
            FALSE,
            NULL, 
            IONUORDERID,
            ONUORDERACTIVITYID
        );


        IF OR_BOORDERACTIVITIES.SBUPDATEORDER != GE_BOCONSTANTS.CSBNO THEN
            
            
            
            IF(RCORDERACTIVITYORIG.ORDER_ID != IONUORDERID AND INUOPERATINGUNITID IS NOT NULL) THEN
                IF(DAOR_ORDER.FNUGETORDER_STATUS_ID(IONUORDERID) = OR_BOCONSTANTS.CNUORDER_STAT_REGISTERED AND BLASSIGN) THEN
                   UT_TRACE.TRACE('inicio OR_BOProcessOrder.ProcessOrder (Asignaci?n de Unidad operativa)',15);
                   OR_BOPROCESSORDER.PROCESSORDER(
                        IONUORDERID,
                        NULL,
                        INUOPERATINGUNITID
                   );
                END IF;
            ELSE
                UT_TRACE.TRACE('Asigna Numerador y secuencia',15);
                RCORDER := DAOR_ORDER.FRCGETRECORD(IONUORDERID);
                OR_BOORDERNUMERATOR.SETORDERNUMBER(RCORDER);
                DAOR_ORDER.UPDRECORD(RCORDER);
            END IF;
        END IF;
        
        
        RCORDERACTIVITYNEW := DAOR_ORDER_ACTIVITY.FRCGETRCDATA(ONUORDERACTIVITYID);

        RCORDERACTIVITYNEW.SEQUENCE_            := RCORDERACTIVITYORIG.SEQUENCE_;
        RCORDERACTIVITYNEW.ORIGIN_ACTIVITY_ID   := RCORDERACTIVITYORIG.ORDER_ACTIVITY_ID;
        RCORDERACTIVITYNEW.ACTIVITY_GROUP_ID    := RCORDERACTIVITYORIG.ACTIVITY_GROUP_ID;
        
        
        DAOR_ORDER_ACTIVITY.UPDRECORD(RCORDERACTIVITYNEW);
        
        ONUORDERITEMID := RCORDERACTIVITYNEW.ORDER_ITEM_ID;
        UT_TRACE.TRACE('Fin or_bocreateactsupport.CreateActivitSupport',15);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEACTIVITSUPPORT;

    




    PROCEDURE  CREATEACTIVITY
    (
        INUORDERACIVITYID   IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUITEMSUPPORTID    IN  GE_ITEMS.ITEMS_ID%TYPE,
        INUOPERATINGUNITID  IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ISBCOMMENT          IN  OR_ORDER_ACTIVITY.COMMENT_%TYPE,
        ONUORDERID          OUT OR_ORDER.ORDER_ID%TYPE
    )
    IS
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUORDERITEMID       OR_ORDER_ACTIVITY.ORDER_ITEM_ID%TYPE;
    BEGIN


        CREATEACTIVITSUPPORT(
                            INUORDERACIVITYID,
                            INUITEMSUPPORTID,
                            INUOPERATINGUNITID,
                            ISBCOMMENT,
                            ONUORDERID,
                            NULL,
                            NUORDERACTIVITYID,
                            NUORDERITEMID
                            );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;

        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END CREATEACTIVITY;
    
    




















    PROCEDURE GETACTSUPPORTINFO
    (
        INUORDERACTID       IN  OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        INUACTIVITYID       IN  OR_ACTIVIDAD.ID_ACTIVIDAD%TYPE,
        OSBMULTILEGAL       OUT OR_ACTIVIDAD.LEGALIZA_MULTIPLE%TYPE,
        ONULEGALITEMAMOUNT  OUT OR_ACTIVIDAD.CANTIDAD_DEFECTO%TYPE,
        ONUPRODUCTID        OUT OR_ORDER_ACTIVITY.PRODUCT_ID%TYPE
        
    )IS

        
        RCACTRECORD DAOR_ACTIVIDAD.STYOR_ACTIVIDAD;
    BEGIN
        UT_TRACE.TRACE('-- INICIO OR_boCreateActSupport.getActSupportInfo', 2);

        
        
        OR_BCORDERACTIVITIES.GETACTSUPPORTINFO(INUACTIVITYID, OSBMULTILEGAL, ONULEGALITEMAMOUNT);
        
        ONUPRODUCTID := DAOR_ORDER_ACTIVITY.FNUGETPRODUCT_ID(INUORDERACTID);

        UT_TRACE.TRACE('-- FIN OR_boCreateActSupport.getActSupportInfo', 2);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTSUPPORTINFO;


END OR_BOCREATEACTSUPPORT;