PACKAGE BODY OR_BCTask_Type_Admin
IS






















































































    
    CSBVERSION          CONSTANT VARCHAR2(20) := 'SAO200693';
    CNUMODULE           CONSTANT NUMBER       := 4; 
    CNUMAIL             CONSTANT NUMBER(4)    := 2; 
    CNUIMPRESION        CONSTANT NUMBER(4)    := 3; 
    CNUCONFIGEXPTYPE    CONSTANT NUMBER(4)    := 403;
    
    CNUTIPOIMPRESIONORDENES CONSTANT GE_DOCUMENT_TYPE.DOCUMENT_TYPE_ID%TYPE := GE_BOITEMSCONSTANTS.CNUTIPOIMPRESIONORDENES;
    
    
    CNUITEMS_CLASS_TO_ACTIVITY CONSTANT NUMBER(4) := OR_BOCONSTANTS.CNUITEMS_CLASS_TO_ACTIVITY;
    
    CNUADMIN_ACTIV_CLASSIF CONSTANT NUMBER(4) := OR_BOCONSTANTS.CNUADMIN_ACTIV_CLASSIF;

    

	

	
	
	
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    
















    FUNCTION FRFGETTASKTYPEGROUP
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR   CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT TASK_TYPE_GROUP_ID ID,
                   DESCRIPTION
            FROM OR_TASK_TYPE_GROUP;

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    






















    FUNCTION FRFGETACTIVITY
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR   CONSTANTS.TYREFCURSOR;
        SBPREFIX        I18N_STRING.PROMPT_TEXT%TYPE;
    BEGIN
    
        SBPREFIX := GE_BOI18N.FSBGETTRASLATION('AdminActivityPrefix');
        OPEN ORFDATACURSOR FOR
            SELECT
                ITEMS_ID,
                DECODE(ITEM_CLASSIF_ID, CNUADMIN_ACTIV_CLASSIF, SBPREFIX||DESCRIPTION, DESCRIPTION) DESCRIPTION,
                ITEM_CLASSIF_ID,
                MEASURE_UNIT_ID,
                TECH_CARD_ITEM_ID,
                CONCEPT,
                OBJECT_ID,
                USE_,
                ELEMENT_TYPE_ID,
                ELEMENT_CLASS_ID,
                STANDARD_TIME,
                WARRANTY_DAYS,
                DISCOUNT_CONCEPT,
                ID_ITEMS_TIPO,
                OBSOLETO,
                PROVISIONING_TYPE,
                PLATFORM,
                RECOVERY,
                RECOVERY_ITEM_ID,
                INIT_INV_STATUS_ID,
                SHARED
            FROM
                GE_ITEMS
                /*+ frfGetActivity.OR_BCTask_Type_Admin*/
            WHERE
                ITEM_CLASSIF_ID IN (CNUITEMS_CLASS_TO_ACTIVITY,
                                    CNUADMIN_ACTIV_CLASSIF);

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETACTIVITY;


   






















    FUNCTION FRFGETITEMSCLASSIF
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR   CONSTANTS.TYREFCURSOR;
        
    BEGIN

        OPEN ORFDATACURSOR FOR
            SELECT
                ITEM_CLASSIF_ID CODE,
                DESCRIPTION
            FROM
                GE_ITEM_CLASSIF
                /*+ OR_BCTask_Type_Admin.frfGetItemsClassif*/
            WHERE
                ITEM_CLASSIF_ID NOT IN (CNUITEMS_CLASS_TO_ACTIVITY,
                                        CNUADMIN_ACTIV_CLASSIF);
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETITEMSCLASSIF;

   




















    FUNCTION FRFGETCOMMENTCLASS
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                COMMENT_CLASS_ID CODE,
                DESCRIPTION
            FROM
                GE_COMMENT_CLASS
            /*+ OR_BCTask_Type_Admin.frfGetCommentClass SAO182730 */
            WHERE
                GE_COMMENT_CLASS.COMMENT_CLASS_ID <> SA_BOCONSTANT.CNUUSERS_COMMENT_CLASS
            AND GE_COMMENT_CLASS.COMMENT_CLASS_ID <> OR_BOCONSTANTS.CNUCONTACTAFTER
            AND GE_COMMENT_CLASS.COMMENT_CLASS_ID <> OR_BOCONSTANTS.CNUCLIENTNOANSWER;
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   




















    FUNCTION FRFGETCAUSALTYPE
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                CAUSAL_TYPE_ID CODE,
                DESCRIPTION
            FROM
                GE_CAUSAL_TYPE
            WHERE
               GE_CAUSAL_TYPE.CAUSAL_TYPE_ID IN (CNUCOMPLETECAUSALTYPE , CNUINCOMPLETECAUSALTYPE);

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   





    FUNCTION FRFGETCAUSALCLASS
     RETURN CONSTANTS.TYREFCURSOR
     IS
         ORFDATACURSOR CONSTANTS.TYREFCURSOR;
     BEGIN
         OPEN ORFDATACURSOR FOR
             SELECT
                 CLASS_CAUSAL_ID CODE,
                 DESCRIPTION
             FROM

                 GE_CLASS_CAUSAL
             WHERE

                GE_CLASS_CAUSAL.CLASS_CAUSAL_ID IN (CNUSUCESFULLCAUSALCLASS,CNUFAILCAUSALCLASS);
         RETURN ORFDATACURSOR;
     EXCEPTION
         WHEN EX.CONTROLLED_ERROR THEN
             RAISE;
         WHEN OTHERS THEN
             ERRORS.SETERROR;
             RAISE EX.CONTROLLED_ERROR;
     END;

  

















    FUNCTION FRFGETITEMSBYCLASSIF
    (
        INUITEMCLASSIFID        IN GE_ITEM_CLASSIF.ITEM_CLASSIF_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                *
            FROM
                GE_ITEMS
            WHERE
                ITEM_CLASSIF_ID = NVL(INUITEMCLASSIFID,ITEM_CLASSIF_ID);

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


   

















    FUNCTION FRFGETCAUSALSBYTYPE
    (
        INUCAUSALTYPEID     IN GE_CAUSAL.CAUSAL_TYPE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                *
            FROM
                GE_CAUSAL
            WHERE
                CAUSAL_TYPE_ID = NVL(INUCAUSALTYPEID,CAUSAL_TYPE_ID);

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   
















	FUNCTION FRFGETCAUSALSBYCLASS
    (
        INUCAUSALCLASSID     IN GE_CAUSAL.CLASS_CAUSAL_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                *
            FROM
                GE_CAUSAL
            WHERE
                CLASS_CAUSAL_ID = NVL(INUCAUSALCLASSID,CLASS_CAUSAL_ID);


        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   


















    FUNCTION FRFGETCOMMENTSBYCLASS
    (
        INUCOMMENTCLASSID   IN GE_COMMENT_TYPE.COMMENT_CLASS_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                *
            FROM
                GE_COMMENT_TYPE
            WHERE
                COMMENT_CLASS_ID = NVL(INUCOMMENTCLASSID,COMMENT_CLASS_ID)
            AND COMMENT_CLASS_ID <> SA_BOCONSTANT.CNUUSERS_COMMENT_CLASS;

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   
















    FUNCTION FRFGETTASKTYPEDATA
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
         SELECT
                A.*,
                B.ID_NOT_TI_TRA,
                B.ID_NOTIFICACION,
                B.ORDERS_PER_PAGE,
                B.CONFIG_EXPRESSION_ID
            FROM
                OR_TASK_TYPE  A, OR_NOTIF_TIPO_TRABA B
            WHERE
                A.TASK_TYPE_ID = INUTASKTYPEID
            AND A.TASK_TYPE_ID = B.ID_TIPO_TRABAJO(+);
                
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
	
       



















    FUNCTION FRFGETALLTASKTYPEDATA
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
               TASK_TYPE_ID CODE,
               DESCRIPTION ||' ('||TASK_TYPE_ID||')' DESCRIPTION
            FROM
                OR_TASK_TYPE;

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
















    FUNCTION FRFGETTASKTYPESCLASSIF
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                GE_TASK_CLASS.TASK_CLASS_ID CODE,
                GE_TASK_CLASS.DESCRIPTION
            FROM
                GE_TASK_CLASS;

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   

















    FUNCTION FRFGETCONCEPT
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                CONCCODI CODE,
                CONCDESC DESCRIPTION
            FROM
                CONCEPTO;
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
















	
    FUNCTION FRFGETGEOBJECT
    (
        INUTASKTYPEOBJ   IN NUMBER
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR   CONSTANTS.TYREFCURSOR;
        NUMODULE        NUMBER;
    BEGIN
        NUMODULE :=GE_BOPARAMETER.FNUGET('ORDERS_MODULE');
        OPEN ORFDATACURSOR FOR
            SELECT OBJECT_ID CODE, OBJECT_ID || ' - ' || DESCRIPTION DESCRIPTION
            FROM GE_OBJECT
            WHERE MODULE_ID = NUMODULE
            AND OBJECT_TYPE_ID= INUTASKTYPEOBJ;
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   





















    FUNCTION FRFGETTASKTYPEITEMS
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN

        OPEN ORFDATACURSOR FOR
            SELECT
                TO_CHAR(TTIT.TASK_TYPE_ID) TASK_TYPE_ID,
                TO_CHAR(TTIT.ITEMS_ID) ITEMS_ID,
                GI.CODE || ' - ' || GI.DESCRIPTION DESCRIPTION,
                GI.CODE,
                TO_CHAR(TTIT.DISPLAY_ORDER) DISPLAY_ORDER,
                TO_CHAR(TTIT.IS_LEGALIZE_VISIBLE) IS_LEGALIZE_VISIBLE,
                TTIT.ITEM_AMOUNT ITEM_AMOUNT
            FROM
                OR_TASK_TYPES_ITEMS TTIT,
                GE_ITEMS GI
                /*+ OR_BCTask_Type_Admin.frfGetTaskTypeItems*/
            WHERE
                TTIT.TASK_TYPE_ID = INUTASKTYPEID
                AND GI.ITEMS_ID = TTIT.ITEMS_ID
                AND GI.ITEM_CLASSIF_ID NOT IN (CNUITEMS_CLASS_TO_ACTIVITY,
                                               CNUADMIN_ACTIV_CLASSIF);
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   



















    FUNCTION FRFGETTASKTYPEACTIVITY
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR   CONSTANTS.TYREFCURSOR;
        SBPREFIX        I18N_STRING.PROMPT_TEXT%TYPE;
    BEGIN

        SBPREFIX := GE_BOI18N.FSBGETTRASLATION('AdminActivityPrefix');
        
        OPEN ORFDATACURSOR FOR
            SELECT
                TO_CHAR(TTIT.TASK_TYPE_ID) TASK_TYPE_ID,
                TO_CHAR(TTIT.ITEMS_ID) ITEMS_ID,
                TTIT.ITEMS_ID || ' - ' ||
                DECODE(GI.ITEM_CLASSIF_ID, CNUADMIN_ACTIV_CLASSIF, SBPREFIX||GI.DESCRIPTION, GI.DESCRIPTION) DESCRIPTION,
                TO_CHAR(TTIT.DISPLAY_ORDER) DISPLAY_ORDER,
                TO_CHAR(TTIT.IS_LEGALIZE_VISIBLE) IS_LEGALIZE_VISIBLE,
                TTIT.ITEM_AMOUNT ITEM_AMOUNT
            FROM
                OR_TASK_TYPES_ITEMS TTIT,
                GE_ITEMS GI
                /*+ OR_BCTask_Type_Admin.frfGetTaskTypeActivity */
            WHERE
                TTIT.TASK_TYPE_ID = INUTASKTYPEID
                AND GI.ITEMS_ID = TTIT.ITEMS_ID
                AND GI.ITEM_CLASSIF_ID IN (CNUITEMS_CLASS_TO_ACTIVITY,
                                           CNUADMIN_ACTIV_CLASSIF);
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    

















    FUNCTION FRFGETTASKTYPECAUSALS
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                TO_CHAR(OR_TASK_TYPE_CAUSAL.CAUSAL_ID) CAUSAL_ID,
                TO_CHAR(OR_TASK_TYPE_CAUSAL.TASK_TYPE_ID) TASK_TYPE_ID,
                OR_TASK_TYPE_CAUSAL.CAUSAL_ID || ' - ' || GE_CAUSAL.DESCRIPTION DESCRIPTION
            FROM
                OR_TASK_TYPE_CAUSAL,
                GE_CAUSAL
            WHERE
                OR_TASK_TYPE_CAUSAL.TASK_TYPE_ID = INUTASKTYPEID
                AND GE_CAUSAL.CAUSAL_ID = OR_TASK_TYPE_CAUSAL.CAUSAL_ID;

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    


















    FUNCTION FRFGETTASKTYPECOMMENTS
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                TO_CHAR(OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID) COMMENT_TYPE_ID,
                TO_CHAR(OR_TASK_TYPE_COMMENT.TASK_TYPE_ID) TASK_TYPE_ID,
                OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID || ' - ' || GE_COMMENT_TYPE.DESCRIPTION DESCRIPTION
            FROM
                OR_TASK_TYPE_COMMENT,
                GE_COMMENT_TYPE
            WHERE
                OR_TASK_TYPE_COMMENT.TASK_TYPE_ID = INUTASKTYPEID
                AND GE_COMMENT_TYPE.COMMENT_TYPE_ID = OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID
                AND GE_COMMENT_TYPE.COMMENT_CLASS_ID <> SA_BOCONSTANT.CNUUSERS_COMMENT_CLASS;

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
















    FUNCTION FRFGETTASKTYPENUMERATOR
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                TO_CHAR(TT.NUMCON_TASKTYPE_ID) NUMCON_TASKTYPE_ID,
                TO_CHAR(TT.TASK_TYPE_ID) TASK_TYPE_ID,
                TO_CHAR(TT.NUMERATOR_CONFIG_ID) NUMERATOR_CONFIG_ID,
                TT.NUMERATOR_CONFIG_ID || ' - ' || NC.DESCRIPTION DESCRIPTION,
                ASE.ATTRIBUTE_SET_ID || ' - ' || ASE.DESCRIPTION GROUP_ATTRIBUTE
            FROM
                OR_NUMCON_TASKTYPE TT,
                GE_NUMER_CONFIG_SET NC,
                GE_ATTRIBUTES_SET ASE
            WHERE  TASK_TYPE_ID =INUTASKTYPEID
            AND ASE.ATTRIBUTE_SET_ID = NC.ATTRIBUTE_SET_ID
            AND TT.NUMERATOR_CONFIG_ID = NC.NUMERATOR_CONFIG_ID;
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
















    FUNCTION FRFNETACTION
    (
        ISBTECNAME      IN GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE,
        ISBTABLENAME    IN GE_ENTITY.NAME_%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT A.VALUE_ CODE, A.DESCRIPTION DESCRIPTION
            FROM GE_ATTR_ALLOWED_VALUES A,
            GE_ENTITY_ATTRIBUTES B, GE_ENTITY C
            WHERE B.TECHNICAL_NAME =ISBTECNAME
            AND C.NAME_=ISBTABLENAME
            AND B.ENTITY_ID =C.ENTITY_ID
            AND A.ENTITY_ATTRIBUTE_ID =B.ENTITY_ATTRIBUTE_ID;
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
















    FUNCTION FRFGETACTIONLOV
    (
        INUTASKTYPE     IN      OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        NUMODULE        NUMBER;
        ORFDATACURSOR   CONSTANTS.TYREFCURSOR;
    BEGIN
        NUMODULE :=  GE_BOPARAMETER.FNUGET('ORDERS_MODULE');
        OPEN ORFDATACURSOR FOR
            SELECT ALL GE_ACTION_MODULE.ACTION_ID,GE_ACTION_MODULE.DESCRIPTION
            FROM  GE_ACTION_MODULE
            WHERE GE_ACTION_MODULE.MODULE_ID = NUMODULE;
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   















    FUNCTION FRFGETATTSET
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT ALL ATTRIBUTE_SET_ID, DESCRIPTION
            FROM GE_ATTRIBUTES_SET
            WHERE MODULE_ID = GE_BOPARAMETER.FNUGET('ORDERS_MODULE');
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
















    FUNCTION FRFGETNUMERATOR
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT ALL NUMERATOR_CONFIG_ID, DESCRIPTION
            FROM GE_NUMER_CONFIG_SET;
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   
















    FUNCTION FRFGETGROUPATT
    (
        INUNUMCONF   IN GE_NUMER_CONFIG_SET.NUMERATOR_CONFIG_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
        OPEN ORFDATACURSOR FOR
            SELECT
                TO_CHAR(ASA.ATTRIBUTE_ID) ATTRIBUTE_ID,
                TO_CHAR(GA.NAME_ATTRIBUTE) NAME_ATTRIBUTE
            FROM
                GE_NUMER_CONFIG_SET NC,
                GE_ATTRIB_SET_ATTRIB ASA,
                GE_ATTRIBUTES GA
            WHERE NC.NUMERATOR_CONFIG_ID=INUNUMCONF
            AND NC.ATTRIBUTE_SET_ID=ASA.ATTRIBUTE_SET_ID
            AND GA.ATTRIBUTE_ID=ASA.ATTRIBUTE_ID;
        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   















    FUNCTION FNUGETITEMTASTYP
    (
        INUITEMSID            IN  OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE
    )
    RETURN NUMBER
    IS
        TASKTYPEID      NUMBER;
    BEGIN
       SELECT TASK_TYPE_ID INTO TASKTYPEID
       FROM OR_TASK_TYPES_ITEMS
       WHERE ITEMS_ID=INUITEMSID;
       RETURN TASKTYPEID;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   















    FUNCTION FRFGETNUMATT
    (
        INUNUMCONF          IN      GE_NUMER_CONFIG_SET.NUMERATOR_CONFIG_ID%TYPE
    )
    RETURN VARCHAR2
    IS
        ODESCGROUP VARCHAR2(1000);
    BEGIN

            SELECT
                ASE.ATTRIBUTE_SET_ID || ' - ' || ASE.DESCRIPTION GROUP_ATTRIBUTE INTO ODESCGROUP
            FROM
                GE_NUMER_CONFIG_SET NC,
                GE_ATTRIBUTES_SET ASE
            WHERE NC.NUMERATOR_CONFIG_ID = INUNUMCONF
            AND ASE.ATTRIBUTE_SET_ID = NC.ATTRIBUTE_SET_ID;
        RETURN ODESCGROUP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    FUNCTION FRFGETTASKNOTIF
    (
       INUTASKTYPE_ID   IN   OR_NOTIF_TIPO_TRABA.ID_TIPO_TRABAJO%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
         OPEN ORFDATACURSOR FOR
            SELECT
                *
            FROM
                OR_NOTIF_TIPO_TRABA
            WHERE
                ID_TIPO_TRABAJO = INUTASKTYPE_ID ;
        RETURN ORFDATACURSOR;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETTASKNOTIF;
    
    













    FUNCTION FRFGETNOTRULELOV
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
         OPEN ORFDATACURSOR FOR
           SELECT
               CONFIG_EXPRESSION_ID ID,
               DESCRIPTION  DESCRIPCION
           FROM  GR_CONFIG_EXPRESSION
           WHERE CONFIGURA_TYPE_ID = CNUCONFIGEXPTYPE ;
        RETURN ORFDATACURSOR;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETNOTRULELOV;

    













    FUNCTION FRFGETNOTIFILOV
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR CONSTANTS.TYREFCURSOR;
    BEGIN
         OPEN ORFDATACURSOR FOR
           SELECT
               NOTIFICATION_ID ID,
               DESCRIPTION  DESCRIPCION
           FROM  GE_NOTIFICATION
           WHERE ORIGIN_MODULE_ID = CNUMODULE
           AND   TARGET_MODULE_ID = CNUMODULE
           AND   NOTIFICATION_TYPE_ID IN (CNUMAIL,CNUIMPRESION);
        RETURN ORFDATACURSOR;
     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETNOTIFILOV;
    
    

















  PROCEDURE GETREGENORDERS
   (
      INUTASKTYPEID  IN    OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
      OCUREGENORDERS OUT   CONSTANTS.TYREFCURSOR
   )
   IS
      SBQUERY  VARCHAR2(2000);
   BEGIN
      SBQUERY := 'SELECT to_char(A.task_type_id) task_type_id,
                         to_char(A.task_type_id||'''||' - '||'''||C.description) ttdescription,
                         to_char(B.causal_id) causal_id,
                         to_char(B.causal_id||'''||' - '||'''||B.description) cdescription,
                         to_char(A.regen_task_type_id) regen_task_type_id,
                         to_char(A.regen_task_type_id||'''||' - '||'''||D.description) rdescription
                  FROM OR_order_regen A, ge_causal B, OR_task_type C, OR_task_type D
                  WHERE A.causal_id = B.causal_id
                  AND A.task_type_id = C.task_type_id
                  AND A.regen_task_type_id = D.task_type_id
                  AND A.task_type_id = '||INUTASKTYPEID;
                  
      OPEN OCUREGENORDERS FOR SBQUERY;
      
   EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
           RAISE EX.CONTROLLED_ERROR;
       WHEN OTHERS THEN
           ERRORS.SETERROR;
           RAISE EX.CONTROLLED_ERROR;

   END GETREGENORDERS;
   
   














   PROCEDURE GETCAUSALITEMS
   (
      OCUCAUSAL OUT CONSTANTS.TYREFCURSOR
   )
   IS
      SBQUERY VARCHAR2(2000);
   BEGIN
   
      SBQUERY := 'SELECT causal_id,
                         causal_id||'''||' - '||'''||description description
                  FROM ge_causal';
                  
      OPEN OCUCAUSAL FOR SBQUERY;

   EXCEPTION
     WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
     WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
         
   END GETCAUSALITEMS;
   
    

















   PROCEDURE GETTASKTYPEREGEN
   (
      OCUTASKTYPEREGEN OUT CONSTANTS.TYREFCURSOR
   )
   IS
      SBQUERY VARCHAR2(2000);
   BEGIN
      SBQUERY := 'SELECT task_type_id,
                         task_type_id||'''||' - '||'''||description description
                  FROM or_task_type';
                  
      OPEN OCUTASKTYPEREGEN FOR SBQUERY;
   EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
           RAISE EX.CONTROLLED_ERROR;
       WHEN OTHERS THEN
           ERRORS.SETERROR;
           RAISE EX.CONTROLLED_ERROR;
   END GETTASKTYPEREGEN;
   
    

















   PROCEDURE GETADDDATA
   (
      INUTASKTYPEID IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
      OCUADDDATA    OUT CONSTANTS.TYREFCURSOR
   )
   IS
   BEGIN
      OPEN OCUADDDATA FOR
            SELECT TO_CHAR(OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID) TASK_TYPE_ID,
                   TO_CHAR(OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID) ATTRIBUTE_SET_ID,
                   OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID ||' - '||
                            GE_ATTRIBUTES_SET.DESCRIPTION ATTRIBUTE_SET_ID_SHOWN,
                   OR_TASKTYPE_ADD_DATA.USE_,
                   TO_CHAR(OR_TASKTYPE_ADD_DATA.ORDER_) ORDER_,
                   OR_TASKTYPE_ADD_DATA.ACTIVE
            FROM OR_TASKTYPE_ADD_DATA,
                 GE_ATTRIBUTES_SET
            WHERE OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID = INUTASKTYPEID
              AND GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID = OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID;

   EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
           RAISE EX.CONTROLLED_ERROR;
       WHEN OTHERS THEN
           ERRORS.SETERROR;
           RAISE EX.CONTROLLED_ERROR;
   END GETADDDATA;
   
    




















   PROCEDURE GETATTRIBUTESSET
   (
      SBUSE      IN  OR_TASKTYPE_ADD_DATA.USE_%TYPE,
      OCUATTSET  OUT CONSTANTS.TYREFCURSOR
   )
   IS
   BEGIN
      IF (SBUSE = 'Q') THEN
          OPEN OCUATTSET FOR
            SELECT TO_CHAR(GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID) ID,
                   GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID ||' - '||
                        GE_ATTRIBUTES_SET.DESCRIPTION SA_EXECUTABLE_250
            FROM GE_ATTRIBUTES_SET
            WHERE GE_ATTRIBUTES_SET.STATEMENT_ID<>0;
      ELSE
          OPEN OCUATTSET FOR
            SELECT TO_CHAR(GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID) ID,
                   GE_ATTRIBUTES_SET.ATTRIBUTE_SET_ID ||' - '||
                        GE_ATTRIBUTES_SET.DESCRIPTION SA_EXECUTABLE_250
            FROM GE_ATTRIBUTES_SET
            WHERE GE_ATTRIBUTES_SET.STATEMENT_ID=0;
      END IF;
   EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
           RAISE EX.CONTROLLED_ERROR;
       WHEN OTHERS THEN
           ERRORS.SETERROR;
           RAISE EX.CONTROLLED_ERROR;
   END GETATTRIBUTESSET;
   
    

















    FUNCTION FRFGETPRINTINGFORMATS
    RETURN CONSTANTS.TYREFCURSOR
    IS
        ORFDATACURSOR   CONSTANTS.TYREFCURSOR;
    BEGIN

        OPEN ORFDATACURSOR FOR
            SELECT COEMCODI ID,
                   COEMDESC DESCRIPTION
            FROM   ED_CONFEXME
            WHERE  COEMTIDO = CNUTIPOIMPRESIONORDENES;

        RETURN ORFDATACURSOR;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FRFGETPRINTINGFORMATS;
    
    















     PROCEDURE UPTASKTYPEADDDATA
    (
        INUTASKTYPEIDOLD            IN      OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID%TYPE,
        INUATTRIBSET_IDOLD          IN      OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID%TYPE,
        INUTASKTYPEIDNEW            IN      OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID%TYPE,
        INUATTRIBSET_IDNEW          IN      OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID%TYPE,
        INUUSE                      IN      OR_TASKTYPE_ADD_DATA.USE_%TYPE,
        INUORDER                    IN      OR_TASKTYPE_ADD_DATA.ORDER_%TYPE,
        INUACTIVE                   IN      OR_TASKTYPE_ADD_DATA.ACTIVE%TYPE
    )
    IS

    BEGIN
        UPDATE OR_TASKTYPE_ADD_DATA
            SET TASK_TYPE_ID = INUTASKTYPEIDNEW , ATTRIBUTE_SET_ID = INUATTRIBSET_IDNEW, ORDER_ = INUORDER,USE_ = INUUSE , ACTIVE = INUACTIVE
            WHERE   TASK_TYPE_ID=INUTASKTYPEIDOLD
            AND     ATTRIBUTE_SET_ID=INUATTRIBSET_IDOLD;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END UPTASKTYPEADDDATA;

    

















    PROCEDURE GETEXCHANGETASKTYPES
    (
        INUTASKTYPEID       IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFRELATEDTASKTYPES OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
    
        GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRELATEDTASKTYPES);

        OPEN ORFRELATEDTASKTYPES
        FOR
            SELECT  /*+ index(OR_EXCHANGE_TASKTYPE UX_OR_EXCHANGE_TASKTYPE01)  */
                    TASK_TYPE_CHANGEABLE, OR_TASK_TYPE.DESCRIPTION
            FROM    OR_EXCHANGE_TASKTYPE, OR_TASK_TYPE /*+ OR_BCTask_Type_Admin.GetExchangeTaskTypes SAO182391*/
            WHERE   OR_EXCHANGE_TASKTYPE.TASK_TYPE_CHANGEABLE = OR_TASK_TYPE.TASK_TYPE_ID
            AND     OR_EXCHANGE_TASKTYPE.TASK_TYPE_ID = INUTASKTYPEID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRELATEDTASKTYPES);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRELATEDTASKTYPES);
            RAISE EX.CONTROLLED_ERROR;
    END;

    

















    PROCEDURE GETEXCHGTASKTYPEBYUNIT
    (
        INUTASKTYPEID       IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        INUOPERUNITID       IN  OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE,
        ORFRELATEDTASKTYPES OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN

        OPEN ORFRELATEDTASKTYPES
        FOR
            SELECT  /*+ index(OR_EXCHANGE_TASKTYPE UX_OR_EXCHANGE_TASKTYPE01)  */
                    TASK_TYPE_CHANGEABLE, OR_TASK_TYPE.DESCRIPTION
            FROM    OR_EXCHANGE_TASKTYPE, OR_TASK_TYPE, OR_OPE_UNI_TASK_TYPE /*+ OR_BCTask_Type_Admin.GetExchgTaskTypeByUnit SAO182660*/
            WHERE   OR_EXCHANGE_TASKTYPE.TASK_TYPE_ID = INUTASKTYPEID
            AND     OR_OPE_UNI_TASK_TYPE.OPERATING_UNIT_ID = INUOPERUNITID
            AND     OR_EXCHANGE_TASKTYPE.TASK_TYPE_CHANGEABLE = OR_TASK_TYPE.TASK_TYPE_ID
            AND     OR_EXCHANGE_TASKTYPE.TASK_TYPE_CHANGEABLE = OR_OPE_UNI_TASK_TYPE.TASK_TYPE_ID;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    




















    FUNCTION FNUEXITITEMTASTYPBYORDER
    (
        INUITEMSID            IN  OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        INUTASKTYPEID         IN  OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE
    )
    RETURN NUMBER
    IS

        NUEXIST      NUMBER;

        CURSOR CUORDERACTIVITY IS
         SELECT /*+ INDEX(or_order_activity IDX_OR_ORDER_ACTIVITY18) */
            1
            FROM OR_ORDER_ACTIVITY, OR_ORDER
            /*+ OR_BCTask_Type_Admin.fnuExitItemTasTypbyOrder SAO200693 */
            WHERE OR_ORDER_ACTIVITY.TASK_TYPE_ID =INUTASKTYPEID
            AND   OR_ORDER_ACTIVITY.ACTIVITY_ID = INUITEMSID
            AND ROWNUM = 1
            AND OR_ORDER.ORDER_ID = OR_ORDER_ACTIVITY.ORDER_ID
            AND OR_ORDER.ORDER_STATUS_ID IN
                    (
                        OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED,
                        OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED,
                        OR_BOCONSTANTS.CNUORDER_STAT_EXECUTING
                    )
            AND OR_ORDER.ASSIGNED_WITH = OR_BOCONSTANTS.CNUASSIGNBYSCHEDULE;

    BEGIN
        UT_TRACE.TRACE('INICIO OR_BCTask_Type_Admin.fnuExitItemTasTypbyOrder. inuItemsId: '||TO_CHAR(INUITEMSID)||'. inuTaskTypeId: '||TO_CHAR(INUTASKTYPEID), 2 );
       
    IF (CUORDERACTIVITY%ISOPEN) THEN
        CLOSE CUORDERACTIVITY;
	END IF;

    
    OPEN  CUORDERACTIVITY;
    
    FETCH CUORDERACTIVITY INTO NUEXIST;
    CLOSE CUORDERACTIVITY;

    UT_TRACE.TRACE('FIN OR_BCTask_Type_Admin.fnuExitItemTasTypbyOrder. nuExist: '||TO_CHAR(NUEXIST), 2 );
    RETURN NUEXIST;

     EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            IF (CUORDERACTIVITY%ISOPEN) THEN
                CLOSE CUORDERACTIVITY;
        	END IF;
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            IF (CUORDERACTIVITY%ISOPEN) THEN
             CLOSE CUORDERACTIVITY;
        	END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FNUEXITITEMTASTYPBYORDER;

END OR_BCTASK_TYPE_ADMIN;