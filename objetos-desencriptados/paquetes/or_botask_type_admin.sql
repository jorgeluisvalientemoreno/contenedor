PACKAGE BODY OR_BOTask_Type_Admin
IS






















































































































    
    CSBVERSION          CONSTANT VARCHAR2(20) := 'SAO206507';
    CSBENTINOTTSKTY     CONSTANT VARCHAR2(25) := 'OR_NOTIF_TIPO_TRABA';
    CSBSEQNOTTSKTY      CONSTANT VARCHAR2(25) := 'SEQ_OR_NOTIF_TIPO_TRABA';

    

	

	
	
	
    
    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    
	
    PROCEDURE GETTASKTYPEGROUP
    (
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETTASKTYPEGROUP();
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
	
	
    PROCEDURE GETACTIVITY
    (
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETACTIVITY();
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
	
     PROCEDURE GETITEMSCLASSIF
    (
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETITEMSCLASSIF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
  	
	
	
    PROCEDURE GETCOMMENTCLASS
    (
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETCOMMENTCLASS();
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   	
	
	
    PROCEDURE GETCAUSALTYPE
    (
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETCAUSALTYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

	
	

    PROCEDURE GETCAUSALCLASS
    (
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETCAUSALCLASS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
	
	
	
    PROCEDURE GETITEMSBYCLASSIF
    (
        INUITEMCLASSIFID        IN GE_ITEMS.ITEM_CLASSIF_ID%TYPE,
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETITEMSBYCLASSIF(INUITEMCLASSIFID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
	
	
	
    PROCEDURE GETCAUSALSBYTYPE
    (
        INUCAUSALTYPEID     IN GE_CAUSAL.CAUSAL_TYPE_ID%TYPE,
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETCAUSALSBYTYPE(INUCAUSALTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
	
	

    PROCEDURE GETCAUSALSBYCLASS
    (
        INUCAUSALCLASSID     IN GE_CAUSAL.CLASS_CAUSAL_ID%TYPE,
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETCAUSALSBYCLASS(INUCAUSALCLASSID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
  	
	

    PROCEDURE GETCOMMENTSBYCLASS
    (
        INUCOMMENTCLASSID   IN GE_COMMENT_TYPE.COMMENT_CLASS_ID%TYPE,
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETCOMMENTSBYCLASS(INUCOMMENTCLASSID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

	
	
    
    PROCEDURE GETTASKTYPEDATA
    (
        INUTASKTYPEID       IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETTASKTYPEDATA(INUTASKTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   	
	

    PROCEDURE GETALLTASKTYPEDATA
    (
         ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETALLTASKTYPEDATA;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

	
	
    
    PROCEDURE GETTASKTYPESCLASSIF
    (
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETTASKTYPESCLASSIF();
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	
    
    PROCEDURE GETCONCEPT
    (
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETCONCEPT();
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
	
	
    PROCEDURE GETGEOBJECT
    (
        INUOBJECTTYPE          IN  NUMBER,
        ORFDATACURSOR          OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR :=  OR_BCTASK_TYPE_ADMIN.FRFGETGEOBJECT(INUOBJECTTYPE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
	
	
	
    PROCEDURE GETTASKTYPEITEMS
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETTASKTYPEITEMS(INUTASKTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	
	
    PROCEDURE GETTASKTYPEACTIVITY
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETTASKTYPEACTIVITY(INUTASKTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	
	
    PROCEDURE GETTASKTYPECAUSALS
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETTASKTYPECAUSALS(INUTASKTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	
	
    PROCEDURE GETTASKTYPECOMMENTS
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFDATACURSOR       OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETTASKTYPECOMMENTS(INUTASKTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   
	
	
    PROCEDURE GETTASKTYPENUMERATOR
    (
        INUTASKTYPEID   IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR :=  OR_BCTASK_TYPE_ADMIN.FRFGETTASKTYPENUMERATOR(INUTASKTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   
	
	
    PROCEDURE GETNETACTION
    (
        ISBTECNAME      IN GE_ENTITY_ATTRIBUTES.TECHNICAL_NAME%TYPE,
        ISBTABLENAME    IN GE_ENTITY.NAME_%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR :=  OR_BCTASK_TYPE_ADMIN.FRFNETACTION(ISBTECNAME,ISBTABLENAME);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	

    PROCEDURE GETACTIONLOV
    (
        INUTASKTYPE     IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETACTIONLOV(INUTASKTYPE);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	

    PROCEDURE GETATTSET
    (
        ORFDATACURSOR          OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETATTSET();
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	

    PROCEDURE GETNUMERATOR
    (
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR:=OR_BCTASK_TYPE_ADMIN.FRFGETNUMERATOR();
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	

    PROCEDURE GETGROUPATT
    (
        INUNUMCONF      IN OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFDATACURSOR   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR :=  OR_BCTASK_TYPE_ADMIN.FRFGETGROUPATT(INUNUMCONF);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	

    PROCEDURE GETITEMTASTYP
    (
        INUITEMSID            IN  OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        ONUTASKTYPEID         OUT OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE
    )
    IS
    BEGIN
        ONUTASKTYPEID :=  OR_BCTASK_TYPE_ADMIN.FNUGETITEMTASTYP(INUITEMSID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

   
	

    PROCEDURE DELROWACTION
    (
        INUTASKTYPEID       IN  OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE,
        INUITEMSID          IN  OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE
    )
    IS
    BEGIN
    
        
        OR_BCROLUNIDADTRAB.DELOPSEOPUNTASKTYPE(INUITEMSID, INUTASKTYPEID);

        
        OR_BCROLUNIDADTRAB.DELOPEUNITASTYPBYACT(INUITEMSID, INUTASKTYPEID);

        DAOR_TASK_TYPES_ITEMS.DELRECORD(INUTASKTYPEID,INUITEMSID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	

    PROCEDURE GETNUMATT
    (
        INUNUMCONF          IN      GE_NUMER_CONFIG_SET.NUMERATOR_CONFIG_ID%TYPE,
        ODESCGROUP          OUT     VARCHAR2
    )
    IS
    BEGIN
        ODESCGROUP:=OR_BCTASK_TYPE_ADMIN.FRFGETNUMATT(INUNUMCONF);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
   
	

    PROCEDURE GETNEXTNUM
    (
        ODESCGROUP          OUT     NUMBER
    )
    IS
    BEGIN
        ODESCGROUP:=OR_BOSEQUENCES.FNUNEXTOR_NUMCON_TASKTYPE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
	
   








































    PROCEDURE INSREGISTTASKTYPES
    (
        ISBDESC             IN      OR_TASK_TYPE.DESCRIPTION%TYPE,
        ISBNULL             IN      OR_TASK_TYPE.IS_ANULL%TYPE,
        ISBUSES             IN      OR_TASK_TYPE.USES_OPER_SECTOR%TYPE,
        INUCLASIF           IN      OR_TASK_TYPE.TASK_TYPE_CLASSIF%TYPE,
        ISBADDITEMSALLOW    IN      OR_TASK_TYPE.ADD_ITEMS_ALLOWED%TYPE,
        ISBADDNETALLOW      IN      OR_TASK_TYPE.ADD_NET_ALLOWED%TYPE,
        ISBCOMREQ           IN      OR_TASK_TYPE.COMMENT_REQUIRED%TYPE,
        INUWARRANTY         IN      OR_TASK_TYPE.WARRANTY_PERIOD%TYPE,
        INUCONCEPT          IN      OR_TASK_TYPE.CONCEPT%TYPE,
        ISBSOLDENG          IN      OR_TASK_TYPE.SOLD_ENGINEERING_SER%TYPE,
        INUPRIOR            IN      OR_TASK_TYPE.PRIORITY%TYPE,
        ISBNODALCHANGE      IN      OR_TASK_TYPE.NODAL_CHANGE%TYPE,
        ISBARRALLOW         IN      OR_TASK_TYPE.ARRANGED_HOUR_ALLOWED%TYPE,
        ISBOBJECTID         IN      OR_TASK_TYPE.OBJECT_ID%TYPE,
        ISBSHORTNAME        IN      OR_TASK_TYPE.SHORT_NAME%TYPE,
        INUGROUPID          IN      OR_TASK_TYPE.TASK_TYPE_GROUP_ID%TYPE,
        ISBWORKDAYS         IN      OR_TASK_TYPE.WORK_DAYS%TYPE,
        IONUTASKTYNOT       IN OUT  OR_NOTIF_TIPO_TRABA.ID_NOT_TI_TRA%TYPE,
        INUNOTIFYID         IN      OR_NOTIF_TIPO_TRABA.ID_NOTIFICACION%TYPE,
        INUORDERSPP         IN      OR_NOTIF_TIPO_TRABA.ORDERS_PER_PAGE%TYPE,
        INUCONFIGEXPID      IN      OR_NOTIF_TIPO_TRABA.CONFIG_EXPRESSION_ID%TYPE,
        ISBCOMPROMICRM      IN      OR_TASK_TYPE.COMPROMISE_CRM%TYPE,
        ISBNOTIFICABLE      IN      OR_TASK_TYPE.NOTIFICABLE%TYPE,
        ISBUSE              IN      OR_TASK_TYPE.USE_%TYPE,
        ISBGENADMORDER      IN      OR_TASK_TYPE.GEN_ADMIN_ORDER%TYPE,
        ONUTASKTYPEID       OUT     OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ISBUPDITEMSALLO     IN      OR_TASK_TYPE.UPD_ITEMS_ALLOWED%TYPE,
        INUPRINTFORMAT      IN      OR_TASK_TYPE.PRINT_FORMAT_ID%TYPE
    )
    IS
        TBOR_TASK_TYPE     DAOR_TASK_TYPE.STYOR_TASK_TYPE;
        TBOR_TASKTYNOTI    DAOR_NOTIF_TIPO_TRABA.STYOR_NOTIF_TIPO_TRABA;
    BEGIN

        ONUTASKTYPEID := OR_BOSEQUENCES.FNUNEXTOR_TASK_TYPE;

        TBOR_TASK_TYPE.TASK_TYPE_ID          := ONUTASKTYPEID;
        TBOR_TASK_TYPE.DESCRIPTION           := ISBDESC;
        TBOR_TASK_TYPE.IS_ANULL              := ISBNULL;
        TBOR_TASK_TYPE.TRY_AUTOM_ASSIGMENT   := GE_BOCONSTANTS.CSBNO;
        TBOR_TASK_TYPE.USES_OPER_SECTOR      := ISBUSES;
        TBOR_TASK_TYPE.TASK_TYPE_CLASSIF     := INUCLASIF;
        TBOR_TASK_TYPE.ADD_ITEMS_ALLOWED     := ISBADDITEMSALLOW;
        TBOR_TASK_TYPE.ADD_NET_ALLOWED       := ISBADDNETALLOW;
        TBOR_TASK_TYPE.COMMENT_REQUIRED      := ISBCOMREQ;
        TBOR_TASK_TYPE.WARRANTY_PERIOD       := INUWARRANTY;
        TBOR_TASK_TYPE.CONCEPT               := INUCONCEPT;
        TBOR_TASK_TYPE.SOLD_ENGINEERING_SER  := ISBSOLDENG;
        TBOR_TASK_TYPE.PRIORITY              := INUPRIOR;
        TBOR_TASK_TYPE.NODAL_CHANGE          := ISBNODALCHANGE;
        TBOR_TASK_TYPE.ARRANGED_HOUR_ALLOWED := ISBARRALLOW;
        TBOR_TASK_TYPE.OBJECT_ID             := ISBOBJECTID;
        TBOR_TASK_TYPE.SHORT_NAME            := ISBSHORTNAME;
        TBOR_TASK_TYPE.TASK_TYPE_GROUP_ID    := INUGROUPID;
        TBOR_TASK_TYPE.WORK_DAYS             := ISBWORKDAYS;
        TBOR_TASK_TYPE.COMPROMISE_CRM        := ISBCOMPROMICRM;
        TBOR_TASK_TYPE.NOTIFICABLE           := ISBNOTIFICABLE;
        TBOR_TASK_TYPE.USE_                  := ISBUSE;
        TBOR_TASK_TYPE.GEN_ADMIN_ORDER       := ISBGENADMORDER;
        TBOR_TASK_TYPE.UPD_ITEMS_ALLOWED     := ISBUPDITEMSALLO;
        TBOR_TASK_TYPE.PRINT_FORMAT_ID       := INUPRINTFORMAT;
        
        DAOR_TASK_TYPE.INSRECORD(TBOR_TASK_TYPE);

        IF INUNOTIFYID IS NOT NULL THEN
                TBOR_TASKTYNOTI.ID_NOT_TI_TRA := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE(CSBENTINOTTSKTY,CSBSEQNOTTSKTY);

                TBOR_TASKTYNOTI.ID_NOTIFICACION      := INUNOTIFYID;
                TBOR_TASKTYNOTI.ID_TIPO_TRABAJO      := ONUTASKTYPEID;
                TBOR_TASKTYNOTI.ORDERS_PER_PAGE      := INUORDERSPP;
                TBOR_TASKTYNOTI.CONFIG_EXPRESSION_ID := INUCONFIGEXPID;

                DAOR_NOTIF_TIPO_TRABA.INSRECORD(TBOR_TASKTYNOTI);
                
                IONUTASKTYNOT :=   TBOR_TASKTYNOTI.ID_NOT_TI_TRA;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    








































    PROCEDURE UPREGISTTASKTYPES
    (
        INUTASKTYPEID       IN      OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ISBDESC             IN      OR_TASK_TYPE.DESCRIPTION%TYPE,
        ISBNULL             IN      OR_TASK_TYPE.IS_ANULL%TYPE,
        ISBUSES             IN      OR_TASK_TYPE.USES_OPER_SECTOR%TYPE,
        INUCLASIF           IN      OR_TASK_TYPE.TASK_TYPE_CLASSIF%TYPE,
        ISBADDITEMSALLOW    IN      OR_TASK_TYPE.ADD_ITEMS_ALLOWED%TYPE,
        ISBADDNETALLOW      IN      OR_TASK_TYPE.ADD_NET_ALLOWED%TYPE,
        ISBCOMREQ           IN      OR_TASK_TYPE.COMMENT_REQUIRED%TYPE,
        INUWARRANTY         IN      OR_TASK_TYPE.WARRANTY_PERIOD%TYPE,
        INUCONCEPT          IN      OR_TASK_TYPE.CONCEPT%TYPE,
        ISBSOLDENG          IN      OR_TASK_TYPE.SOLD_ENGINEERING_SER%TYPE,
        INUPRIOR            IN      OR_TASK_TYPE.PRIORITY%TYPE,
        ISBNODALCHANGE      IN      OR_TASK_TYPE.NODAL_CHANGE%TYPE,
        ISBARRALLOW         IN      OR_TASK_TYPE.ARRANGED_HOUR_ALLOWED%TYPE,
        INUOBJECTID         IN      OR_TASK_TYPE.OBJECT_ID%TYPE,
        ISBSHORTNAME        IN      OR_TASK_TYPE.SHORT_NAME%TYPE,
        INUGROUPID          IN      OR_TASK_TYPE.TASK_TYPE_GROUP_ID%TYPE,
        ISBWORKDAYS         IN      OR_TASK_TYPE.WORK_DAYS%TYPE,
        IONUTASKTYNOT       IN OUT  OR_NOTIF_TIPO_TRABA.ID_NOT_TI_TRA%TYPE,
        INUNOTIFYID         IN      OR_NOTIF_TIPO_TRABA.ID_NOTIFICACION%TYPE,
        INUORDERSPP         IN      OR_NOTIF_TIPO_TRABA.ORDERS_PER_PAGE%TYPE,
        INUCONFIGEXPID      IN      OR_NOTIF_TIPO_TRABA.CONFIG_EXPRESSION_ID%TYPE,
        ISBCOMPROMICRM      IN      OR_TASK_TYPE.COMPROMISE_CRM%TYPE,
        ISBNOTIFICABLE      IN      OR_TASK_TYPE.NOTIFICABLE%TYPE,
        ISBUSE              IN      OR_TASK_TYPE.USE_%TYPE,
        ISBGENADMORDER      IN      OR_TASK_TYPE.GEN_ADMIN_ORDER%TYPE,
        ISBUPDITEMSALLO     IN      OR_TASK_TYPE.UPD_ITEMS_ALLOWED%TYPE,
        INUPRINTFORMAT      IN      OR_TASK_TYPE.PRINT_FORMAT_ID%TYPE
    )
    IS
        TBOR_TASK_TYPE     DAOR_TASK_TYPE.STYOR_TASK_TYPE;
        TBOR_TASKTYNOTI    DAOR_NOTIF_TIPO_TRABA.STYOR_NOTIF_TIPO_TRABA;
    BEGIN
        DAOR_TASK_TYPE.GETRECORD(INUTASKTYPEID,
                                 TBOR_TASK_TYPE);
                                 
        TBOR_TASK_TYPE.TASK_TYPE_ID          := INUTASKTYPEID;
        TBOR_TASK_TYPE.DESCRIPTION           := ISBDESC;
        TBOR_TASK_TYPE.IS_ANULL              := ISBNULL;
        TBOR_TASK_TYPE.TRY_AUTOM_ASSIGMENT   := GE_BOCONSTANTS.CSBNO;
        TBOR_TASK_TYPE.USES_OPER_SECTOR      := ISBUSES;
        TBOR_TASK_TYPE.TASK_TYPE_CLASSIF     := INUCLASIF;
        TBOR_TASK_TYPE.ADD_ITEMS_ALLOWED     := ISBADDITEMSALLOW;
        TBOR_TASK_TYPE.ADD_NET_ALLOWED       := ISBADDNETALLOW;
        TBOR_TASK_TYPE.COMMENT_REQUIRED      := ISBCOMREQ;
        TBOR_TASK_TYPE.CONCEPT               := INUCONCEPT;
        TBOR_TASK_TYPE.PRIORITY              := INUPRIOR;
        TBOR_TASK_TYPE.NODAL_CHANGE          := ISBNODALCHANGE;
        TBOR_TASK_TYPE.ARRANGED_HOUR_ALLOWED := ISBARRALLOW;
        TBOR_TASK_TYPE.OBJECT_ID             := INUOBJECTID;
        TBOR_TASK_TYPE.SHORT_NAME            := ISBSHORTNAME;
        TBOR_TASK_TYPE.TASK_TYPE_GROUP_ID    := INUGROUPID;
        TBOR_TASK_TYPE.WORK_DAYS             :=   ISBWORKDAYS;
        TBOR_TASK_TYPE.USE_                  :=  ISBUSE;
        TBOR_TASK_TYPE.COMPROMISE_CRM        := ISBCOMPROMICRM;
        TBOR_TASK_TYPE.NOTIFICABLE           := ISBNOTIFICABLE;
        TBOR_TASK_TYPE.GEN_ADMIN_ORDER       := ISBGENADMORDER;
        TBOR_TASK_TYPE.UPD_ITEMS_ALLOWED     := ISBUPDITEMSALLO;
        TBOR_TASK_TYPE.PRINT_FORMAT_ID       := INUPRINTFORMAT;

        DAOR_TASK_TYPE.UPDRECORD(TBOR_TASK_TYPE);

        IF IONUTASKTYNOT IS NOT NULL THEN

           IF INUNOTIFYID IS NOT NULL THEN
                DAOR_NOTIF_TIPO_TRABA.GETRECORD(IONUTASKTYNOT, TBOR_TASKTYNOTI);

                TBOR_TASKTYNOTI.ID_NOTIFICACION      := INUNOTIFYID;
                TBOR_TASKTYNOTI.ID_TIPO_TRABAJO      := INUTASKTYPEID;
                TBOR_TASKTYNOTI.ORDERS_PER_PAGE      := INUORDERSPP;
                TBOR_TASKTYNOTI.CONFIG_EXPRESSION_ID := INUCONFIGEXPID;

                DAOR_NOTIF_TIPO_TRABA.UPDRECORD(TBOR_TASKTYNOTI);
           ELSE

                DAOR_NOTIF_TIPO_TRABA.DELRECORD(IONUTASKTYNOT);
                IONUTASKTYNOT :=  NULL;
           END IF;
        ELSE

           IF INUNOTIFYID IS NOT NULL THEN
                TBOR_TASKTYNOTI.ID_NOT_TI_TRA := GE_BOSEQUENCE.FNUGETNEXTVALSEQUENCE(CSBENTINOTTSKTY,CSBSEQNOTTSKTY);

                TBOR_TASKTYNOTI.ID_NOTIFICACION      := INUNOTIFYID;
                TBOR_TASKTYNOTI.ID_TIPO_TRABAJO      := INUTASKTYPEID;
                TBOR_TASKTYNOTI.ORDERS_PER_PAGE      := INUORDERSPP;
                TBOR_TASKTYNOTI.CONFIG_EXPRESSION_ID := INUCONFIGEXPID;

                DAOR_NOTIF_TIPO_TRABA.INSRECORD(TBOR_TASKTYNOTI);
                
                IONUTASKTYNOT :=  TBOR_TASKTYNOTI.ID_NOT_TI_TRA;
           END IF;
        END IF;
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
	
    
    PROCEDURE INSACTIVITYTASKTYPES
    (
        INUITEMID       IN      OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        INUTASKTYPEID   IN      OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE
    )
    IS
        RCOR_TASK_TYPE_ITEMS     DAOR_TASK_TYPES_ITEMS.STYOR_TASK_TYPES_ITEMS;
    BEGIN

        
        OR_BCROLUNIDADTRAB.INSOPEUNITASTYPBYACT(INUITEMID, INUTASKTYPEID);

        RCOR_TASK_TYPE_ITEMS.TASK_TYPE_ID := INUTASKTYPEID;
        RCOR_TASK_TYPE_ITEMS.ITEMS_ID:= INUITEMID;
        RCOR_TASK_TYPE_ITEMS.ITEM_AMOUNT:= 0;
        RCOR_TASK_TYPE_ITEMS.DISPLAY_ORDER := 1;
        RCOR_TASK_TYPE_ITEMS.IS_LEGALIZE_VISIBLE := 'Y';
        DAOR_TASK_TYPES_ITEMS.INSRECORD(RCOR_TASK_TYPE_ITEMS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    PROCEDURE DELTASKTYPE
    (
        INUTASKTYPEID   IN      OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE,
        IONUTASKTYNOT   IN      OR_NOTIF_TIPO_TRABA.ID_NOT_TI_TRA%TYPE
    )
    IS
    BEGIN

        IF IONUTASKTYNOT IS NOT NULL THEN
           DAOR_NOTIF_TIPO_TRABA.DELRECORD(IONUTASKTYNOT);
        END IF;
        DAOR_TASK_TYPE.DELRECORD(INUTASKTYPEID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    

    
	

   
   PROCEDURE GETREGENORDERS
   (
      INUTASKTYPEID  IN    OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
      OCUREGENORDERS OUT   CONSTANTS.TYREFCURSOR
   )
   IS
   BEGIN
      
      OR_BCTASK_TYPE_ADMIN.GETREGENORDERS(INUTASKTYPEID,OCUREGENORDERS);
   EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
           RAISE EX.CONTROLLED_ERROR;
       WHEN OTHERS THEN
           ERRORS.SETERROR;
           RAISE EX.CONTROLLED_ERROR;
           
   END GETREGENORDERS;
   
    
    PROCEDURE GETCAUSALITEMS
    (
      OCUCAUSAL OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
      
      OR_BCTASK_TYPE_ADMIN.GETCAUSALITEMS(OCUCAUSAL);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETCAUSALITEMS;
    
    
    PROCEDURE GETTASKTYPEREGEN
    (
      OCUTASKTYPEREGEN OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
      
      OR_BCTASK_TYPE_ADMIN.GETTASKTYPEREGEN(OCUTASKTYPEREGEN);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETTASKTYPEREGEN;
    
    
    PROCEDURE GETADDDATA
    (
      INUTASKTYPEID  IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
      OCUADDDATA     OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
      
      OR_BCTASK_TYPE_ADMIN.GETADDDATA(INUTASKTYPEID,
                                      OCUADDDATA);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END GETADDDATA;
    
    
    PROCEDURE GETATTRIBUTESSET
    (
      SBUSE      IN  OR_TASKTYPE_ADD_DATA.USE_%TYPE,
      OCUATTSET  OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
       OR_BCTASK_TYPE_ADMIN.GETATTRIBUTESSET(SBUSE,
                                             OCUATTSET);
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
           RAISE EX.CONTROLLED_ERROR;
       WHEN OTHERS THEN
           ERRORS.SETERROR;
           RAISE EX.CONTROLLED_ERROR;
    END GETATTRIBUTESSET;
    
	
	

    PROCEDURE GETTASKNOTIF
    (
       INUTASKTYPE_ID   IN   OR_NOTIF_TIPO_TRABA.ID_TIPO_TRABAJO%TYPE,
       ORFDATACURSOR    OUT  CONSTANTS.TYREFCURSOR
    )IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETTASKNOTIF(INUTASKTYPE_ID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            RAISE;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETTASKNOTIF;
    
    
	
	

    PROCEDURE GETNOTRULELOV
    (
       ORFDATACURSOR    OUT  CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETNOTRULELOV;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
             GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            RAISE;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNOTRULELOV;
    
    
	
	

    PROCEDURE GETNOTIFILOV
    (
       ORFDATACURSOR    OUT  CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETNOTIFILOV;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            RAISE;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETNOTIFILOV;
    
    















    PROCEDURE INSTASKTYPESNUMERATOR
    (
        INUTASKTYPEID               IN      OR_NUMCON_TASKTYPE.TASK_TYPE_ID%TYPE,
        INUNUMCON_TASKTYPE_ID       IN      OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID%TYPE,
        INUNUMERATOR_CONFIG_ID      IN      OR_NUMCON_TASKTYPE.NUMERATOR_CONFIG_ID%TYPE
    )
    IS
        RCOR_TASK_TYPE_NUMERATOR    DAOR_NUMCON_TASKTYPE.STYOR_NUMCON_TASKTYPE;
    BEGIN

        RCOR_TASK_TYPE_NUMERATOR.TASK_TYPE_ID := INUTASKTYPEID;
        RCOR_TASK_TYPE_NUMERATOR.NUMCON_TASKTYPE_ID:= INUNUMCON_TASKTYPE_ID;
        RCOR_TASK_TYPE_NUMERATOR.NUMERATOR_CONFIG_ID:= INUNUMERATOR_CONFIG_ID;

        DAOR_NUMCON_TASKTYPE.INSRECORD(RCOR_TASK_TYPE_NUMERATOR);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    















     PROCEDURE UPTASKTYPEADDDATA
    (
        INUTASKTYPEID           IN      OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID%TYPE,
        INUATTRIBSET_ID         IN      OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID%TYPE,
        INUUSE                  IN      OR_TASKTYPE_ADD_DATA.USE_%TYPE,
        INUORDER                IN      OR_TASKTYPE_ADD_DATA.ORDER_%TYPE,
        INUACTIVE               IN      OR_TASKTYPE_ADD_DATA.ACTIVE%TYPE
    )
    IS
        RCOR_TASK_TYPE_ADD_DATA     DAOR_TASKTYPE_ADD_DATA.STYOR_TASKTYPE_ADD_DATA;
    BEGIN
        RCOR_TASK_TYPE_ADD_DATA.TASK_TYPE_ID := INUTASKTYPEID;
        RCOR_TASK_TYPE_ADD_DATA.ATTRIBUTE_SET_ID:= INUATTRIBSET_ID;
        RCOR_TASK_TYPE_ADD_DATA.USE_:= INUUSE;
        RCOR_TASK_TYPE_ADD_DATA.ORDER_ := INUORDER;
        RCOR_TASK_TYPE_ADD_DATA.ACTIVE := INUACTIVE;
        DAOR_TASKTYPE_ADD_DATA.UPDRECORD(RCOR_TASK_TYPE_ADD_DATA);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE UPTASKTYPENUMERATOR
    (
        INUNUMCONTASKTYPEID     IN      OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID%TYPE,
        INUTASKTYPEID           IN      OR_NUMCON_TASKTYPE.TASK_TYPE_ID%TYPE,
        INUNUMERATORCONFIG      IN      OR_NUMCON_TASKTYPE.NUMERATOR_CONFIG_ID%TYPE

    )
    IS
        RCOR_TASK_TYPE_NUMERATOR        DAOR_NUMCON_TASKTYPE.STYOR_NUMCON_TASKTYPE;
    BEGIN
        RCOR_TASK_TYPE_NUMERATOR.NUMCON_TASKTYPE_ID:=INUNUMCONTASKTYPEID;
        RCOR_TASK_TYPE_NUMERATOR.TASK_TYPE_ID:=INUTASKTYPEID;
        RCOR_TASK_TYPE_NUMERATOR.NUMERATOR_CONFIG_ID:=INUNUMERATORCONFIG;

        DAOR_NUMCON_TASKTYPE.UPDRECORD(RCOR_TASK_TYPE_NUMERATOR);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE UPTASKTYPEITEM
    (
        INUITEMID               IN      OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        INUTASKTYPEID           IN      OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE,
        INUITEMAMOUNT           IN      OR_TASK_TYPES_ITEMS.ITEM_AMOUNT%TYPE,
        ISBISLEGALIZEVISIBLE    IN      OR_TASK_TYPES_ITEMS.IS_LEGALIZE_VISIBLE%TYPE,
        INUDISPLAYORDER         IN      OR_TASK_TYPES_ITEMS.DISPLAY_ORDER%TYPE
    )
    IS
        RCOR_TASK_TYPE_ITEMS     DAOR_TASK_TYPES_ITEMS.STYOR_TASK_TYPES_ITEMS;
    BEGIN
        RCOR_TASK_TYPE_ITEMS.TASK_TYPE_ID := INUTASKTYPEID;
        RCOR_TASK_TYPE_ITEMS.ITEMS_ID:= INUITEMID;
        RCOR_TASK_TYPE_ITEMS.ITEM_AMOUNT:= INUITEMAMOUNT;
        RCOR_TASK_TYPE_ITEMS.DISPLAY_ORDER := INUDISPLAYORDER;
        RCOR_TASK_TYPE_ITEMS.IS_LEGALIZE_VISIBLE := ISBISLEGALIZEVISIBLE;
        RCOR_TASK_TYPE_ITEMS.COMPANY_KEY := SA_BOSYSTEM.FNUGETUSERCOMPANYID;
        DAOR_TASK_TYPES_ITEMS.UPDRECORD(RCOR_TASK_TYPE_ITEMS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE INSTASKTYPEITEM
    (
        INUITEMID               IN      OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        INUTASKTYPEID           IN      OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE,
        INUITEMAMOUNT           IN      OR_TASK_TYPES_ITEMS.ITEM_AMOUNT%TYPE,
        ISBISLEGALIZEVISIBLE    IN      OR_TASK_TYPES_ITEMS.IS_LEGALIZE_VISIBLE%TYPE,
        INUDISPLAYORDER         IN      OR_TASK_TYPES_ITEMS.DISPLAY_ORDER%TYPE
    )
    IS

        RCOR_TASK_TYPE_ITEMS     DAOR_TASK_TYPES_ITEMS.STYOR_TASK_TYPES_ITEMS;

    BEGIN

        RCOR_TASK_TYPE_ITEMS.TASK_TYPE_ID := INUTASKTYPEID;
        RCOR_TASK_TYPE_ITEMS.ITEMS_ID:= INUITEMID;
        RCOR_TASK_TYPE_ITEMS.ITEM_AMOUNT:= INUITEMAMOUNT;
        RCOR_TASK_TYPE_ITEMS.DISPLAY_ORDER := INUDISPLAYORDER;
        RCOR_TASK_TYPE_ITEMS.IS_LEGALIZE_VISIBLE := ISBISLEGALIZEVISIBLE;
        RCOR_TASK_TYPE_ITEMS.COMPANY_KEY := SA_BOSYSTEM.FNUGETUSERCOMPANYID;
        DAOR_TASK_TYPES_ITEMS.INSRECORD(RCOR_TASK_TYPE_ITEMS);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE INSTASKTYPESADDDATA
    (
        INUTASKTYPEID           IN      OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID%TYPE,
        INUATTRIBSET_ID         IN      OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID%TYPE,
        INUUSE                  IN      OR_TASKTYPE_ADD_DATA.USE_%TYPE,
        INUORDER                IN      OR_TASKTYPE_ADD_DATA.ORDER_%TYPE,
        INUACTIVE               IN      OR_TASKTYPE_ADD_DATA.ACTIVE%TYPE
    )
    IS

        RCOR_TASK_TYPE_ADD_DATA     DAOR_TASKTYPE_ADD_DATA.STYOR_TASKTYPE_ADD_DATA;

    BEGIN

        RCOR_TASK_TYPE_ADD_DATA.TASK_TYPE_ID := INUTASKTYPEID;
        RCOR_TASK_TYPE_ADD_DATA.ATTRIBUTE_SET_ID:= INUATTRIBSET_ID;
        RCOR_TASK_TYPE_ADD_DATA.USE_:= INUUSE;
        RCOR_TASK_TYPE_ADD_DATA.ORDER_ := INUORDER;
        RCOR_TASK_TYPE_ADD_DATA.ACTIVE := INUACTIVE;

        DAOR_TASKTYPE_ADD_DATA.INSRECORD(RCOR_TASK_TYPE_ADD_DATA);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE INSTASKTYPECOMMENT
    (
        INUTASKTYPEID       IN  OR_TASK_TYPE_COMMENT.TASK_TYPE_ID%TYPE,
        INUTASKCOMMENTID    IN  OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID%TYPE
    )
    IS
    RCOR_TASK_TYPE_COMMENT     DAOR_TASK_TYPE_COMMENT.STYOR_TASK_TYPE_COMMENT;

    BEGIN
        RCOR_TASK_TYPE_COMMENT.TASK_TYPE_ID := INUTASKTYPEID;
        RCOR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID := INUTASKCOMMENTID;
        DAOR_TASK_TYPE_COMMENT.INSRECORD(RCOR_TASK_TYPE_COMMENT);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

     















    PROCEDURE INSTASKTYPECAUSAL
    (
        INUTASKTYPEID       IN  OR_TASK_TYPE_CAUSAL.TASK_TYPE_ID%TYPE,
        INUCAUSALID         IN  OR_TASK_TYPE_CAUSAL.CAUSAL_ID%TYPE
    )
    IS
        RCOR_TASK_TYPE_CAUSAL     DAOR_TASK_TYPE_CAUSAL.STYOR_TASK_TYPE_CAUSAL;
    BEGIN
        RCOR_TASK_TYPE_CAUSAL.TASK_TYPE_ID := INUTASKTYPEID;
        RCOR_TASK_TYPE_CAUSAL.CAUSAL_ID := INUCAUSALID;
        DAOR_TASK_TYPE_CAUSAL.INSRECORD(RCOR_TASK_TYPE_CAUSAL);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE DELTASKTYPECOMMENT
    (
        INUTASKTYPEID           IN      OR_TASK_TYPE_COMMENT.TASK_TYPE_ID%TYPE,
        INUTASKTYPECOMMENT      IN      OR_TASK_TYPE_COMMENT.COMMENT_TYPE_ID%TYPE
    )
    IS

    BEGIN
        DAOR_TASK_TYPE_COMMENT.DELRECORD(INUTASKTYPEID, INUTASKTYPECOMMENT);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE DELTASKTYPENUMERATOR
    (
        INUNUMCON_TASKTYPE_ID   IN  OR_NUMCON_TASKTYPE.NUMCON_TASKTYPE_ID%TYPE
    )
    IS

    BEGIN
        DAOR_NUMCON_TASKTYPE.DELRECORD(INUNUMCON_TASKTYPE_ID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    
















    PROCEDURE DELTASKTYPECAUSAL
    (
        INUTASKTYPEID    IN      OR_TASK_TYPE_CAUSAL.TASK_TYPE_ID%TYPE,
        INUCAUSALID      IN      OR_TASK_TYPE_CAUSAL.CAUSAL_ID%TYPE
    )
    IS

    BEGIN
        DAOR_TASK_TYPE_CAUSAL.DELRECORD(INUTASKTYPEID, INUCAUSALID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE DELTASKTYPEADDDATA
    (
        INUTASKTYPEID           IN      OR_TASKTYPE_ADD_DATA.TASK_TYPE_ID%TYPE,
        INUATTRIBSET_ID         IN      OR_TASKTYPE_ADD_DATA.ATTRIBUTE_SET_ID%TYPE
    )
    IS

    BEGIN
        DAOR_TASKTYPE_ADD_DATA.DELRECORD(INUTASKTYPEID, INUATTRIBSET_ID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE DELTASKTYPEITEM
    (
        INUITEMID               IN      OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        INUTASKTYPEID           IN      OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE
    )
    IS

    BEGIN
        DAOR_TASK_TYPES_ITEMS.DELRECORD(INUTASKTYPEID, INUITEMID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    















    PROCEDURE DELTASKTYPEACTIVITY
    (
        INUITEMID               IN      OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        INUTASKTYPEID           IN      OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE
    )
    IS

    BEGIN
        DAOR_TASK_TYPES_ITEMS.DELRECORD(INUTASKTYPEID, INUITEMID);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

    



















    PROCEDURE GETPRINTINGFORMATS
    (
       ORFDATACURSOR    OUT  CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        ORFDATACURSOR := OR_BCTASK_TYPE_ADMIN.FRFGETPRINTINGFORMATS;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            RAISE;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFDATACURSOR);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETPRINTINGFORMATS;
    
    




    PROCEDURE GETEXCHANGETASKTYPES
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        ORFRELATEDTASKTYPES OUT CONSTANTS.TYREFCURSOR
    )
    IS
        NUTASKTYPEID    OR_TASK_TYPE.TASK_TYPE_ID%TYPE;
    BEGIN
    
        UT_TRACE.TRACE('INICIA - OR_BOTask_Type_Admin.GetExchangeTaskTypes - inuOrderId['||INUORDERID||']',15);
    
        NUTASKTYPEID := DAOR_ORDER.FNUGETTASK_TYPE_ID(INUORDERID);
    
        
        OR_BCTASK_TYPE_ADMIN.GETEXCHANGETASKTYPES
        (
            NUTASKTYPEID,
            ORFRELATEDTASKTYPES
        );
        
        UT_TRACE.TRACE('FIN - OR_BOTask_Type_Admin.GetExchangeTaskTypes - nuTaskTypeId['||NUTASKTYPEID||']',15);
        
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRELATEDTASKTYPES);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(ORFRELATEDTASKTYPES);
            RAISE EX.CONTROLLED_ERROR;
    END GETEXCHANGETASKTYPES;
    
    



    PROCEDURE GETACTIVITIESBYTSKTYP
    (
        INUTASKTYPEID   IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFACTIVITIES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
    BEGIN
        OR_BCTASK_TYPES_ITEMS.GETACTIVITIESBYTSKTYP
        (
            INUTASKTYPEID,
            ORFACTIVITIES
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTIVITIESBYTSKTYP;

    




    FUNCTION FRFEXCHANGETASKTYPES
    (
        INUTASKTYPEID          IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE
    )
    RETURN CONSTANTS.TYREFCURSOR
    IS
        RFRELATEDTASKTYPES      CONSTANTS.TYREFCURSOR;
    BEGIN

        UT_TRACE.TRACE('INICIA - OR_BOTask_Type_Admin.frfExchangeTaskTypes - inuTaskTypeId['||INUTASKTYPEID||']',15);

        
        OR_BCTASK_TYPE_ADMIN.GETEXCHANGETASKTYPES
        (
            INUTASKTYPEID,
            RFRELATEDTASKTYPES
        );

        RETURN RFRELATEDTASKTYPES;

        UT_TRACE.TRACE('FIN - OR_BOTask_Type_Admin.frfExchangeTaskTypes - nuTaskTypeId['||INUTASKTYPEID||']',15);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFRELATEDTASKTYPES);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(RFRELATEDTASKTYPES);
            RAISE EX.CONTROLLED_ERROR;
    END FRFEXCHANGETASKTYPES;

    




    PROCEDURE GETEXCHGTASKTYPEBYUNIT
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        ORFRELATEDTASKTYPES OUT CONSTANTS.TYREFCURSOR
    )
    IS
        RCORDER     DAOR_ORDER.STYOR_ORDER;
    BEGIN
    
        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);

        

        OR_BCTASK_TYPE_ADMIN.GETEXCHGTASKTYPEBYUNIT
        (
            RCORDER.TASK_TYPE_ID,
            RCORDER.OPERATING_UNIT_ID,
            ORFRELATEDTASKTYPES
        );

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETEXCHGTASKTYPEBYUNIT;

    




    PROCEDURE GETACTIVTSKTYPBYUNIT
    (
        INUORDERID      IN  OR_ORDER.ORDER_ID%TYPE,
        INUTASKTYPEID   IN  OR_TASK_TYPE.TASK_TYPE_ID%TYPE,
        ORFACTIVITIES   OUT CONSTANTS.TYREFCURSOR
    )
    IS
        RCORDER     DAOR_ORDER.STYOR_ORDER;
    BEGIN

        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);

        OR_BCTASK_TYPES_ITEMS.GETACTIVTSKTYPBYUNIT
        (
            INUTASKTYPEID,
            RCORDER.OPERATING_UNIT_ID,
            ORFACTIVITIES
        );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETACTIVTSKTYPBYUNIT;
    

     
















    PROCEDURE GETEXITITEMTASTYEBYORDER
    (
        INUITEMSID            IN  OR_TASK_TYPES_ITEMS.ITEMS_ID%TYPE,
        INUTASKTYPEID         IN  OR_TASK_TYPES_ITEMS.TASK_TYPE_ID%TYPE,
        ONUEXISTORDER         OUT NUMBER
    )
    IS
    BEGIN
        UT_TRACE.TRACE('INICIO OR_BOTask_Type_Admin.GetExitItemTasTyebyOrder. inuItemsId: '||TO_CHAR(INUITEMSID)||'. inuTaskTypeId: '||TO_CHAR(INUTASKTYPEID), 2 );

        ONUEXISTORDER :=  OR_BCTASK_TYPE_ADMIN.FNUEXITITEMTASTYPBYORDER(INUITEMSID,INUTASKTYPEID);

        UT_TRACE.TRACE('FIN OR_BOTask_Type_Admin.GetExitItemTasTyebyOrder. onuExistOrder: '||TO_CHAR(ONUEXISTORDER), 2 );
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETEXITITEMTASTYEBYORDER;

END OR_BOTASK_TYPE_ADMIN;