PACKAGE BODY BI_BSSuspConnWithDraw
IS
    
    CSBVERSION  CONSTANT VARCHAR2(250)  := 'SAO211487';



























































































































































































    
    
    
    SBERRMSG      	     VARCHAR2(2000); 
    RCCONFESCO	         CONFESCO%ROWTYPE ;	
    RCBI_PACKAGE_SEND    BI_PACKAGE_SEND%ROWTYPE ; 
    SBFAILUREOSS         VARCHAR2(1);  
    SBFAILUREBIL         VARCHAR2(1);  
    SBPROCESSEDBIL       VARCHAR2(1);  
    SBPROCESSEDOSS       VARCHAR2(1);  
    SBPACKPROCESSBIL     VARCHAR2(1);  
    SBPACKPROCESSOSS     VARCHAR2(1);  
    SBPACKSENDOSS        VARCHAR2(1);  
    NUINDICE             NUMBER :=0;
    

    NUORDERNUMBER       SUSPCONE.SUCONUOR%TYPE;     
    NUSERVCODI		    CONFESCO.COECSERV%TYPE;     
    NUEVENAPLI		    CONFESCO.COECCODI%TYPE;     
    NUSESUNUSE		    SERVSUSC.SESUNUSE%TYPE;     
    DTSUSPCONWITHDRAW   SERVSUSC.SESUFECO%TYPE;     
    NUEXTERNALMODULE    BI_PACKAGE_SEND.EXTERNAL_MODULE_ID%TYPE; 
                                                                 
    NUMOTIVO_RETIRO_POR_NO_PAGO     GE_RETIRE_TYPE.RETIRE_TYPE_ID%TYPE; 

    NUTELEF_RETIRO ESTACORT.ESCOCODI%TYPE;
    
    TYPE TYSUSPCONEROWID IS TABLE OF ROWID  
    INDEX BY BINARY_INTEGER;
    
    
    
    

    CSBACTIVIDAD_CAMPO     CONSTANT VARCHAR2(1) :=  PKCONSTANTE.SI;  
                                                                     
                                                                     
    CNUSIN_DATOS     	   CONSTANT NUMBER := 11509;
    CNUNO_EXIST_CHANG_STAT CONSTANT NUMBER := 1530;
    CNUNO_VAL_EXI_CHA_STAT CONSTANT NUMBER := 1040;
    CSBDIV          	   CONSTANT VARCHAR2(20) := PKCONSTANTE.CSBDIVISION;
    CSBMOD_BIL      	   CONSTANT VARCHAR2(20) := PKCONSTANTE.CSBMOD_BIL;
    CSBMOD_SAT      	   CONSTANT VARCHAR2(20) := PKCONSTANTE.CSBMOD_SAT;
    CNUNUM_REC_FETCHED     CONSTANT NUMBER :=1000;                  

    
    
    
    
    

    CURSOR CUSUSPAPPLYSTATUS (
                               INUSERVSUSC             SERVSUSC.SESUNUSE%TYPE,
                               INUSTATUS               SERVSUSC.SESUESCO%TYPE
                             ) IS
    SELECT RCECCOEC, SESUSERV
    FROM SERVSUSC, RECAESCO
    WHERE SESUNUSE = INUSERVSUSC AND
          SESUSERV = RCECSERV AND
          SESUESCO = RCECCOER AND
          RCECCOEC = INUSTATUS AND
          ROWNUM = 1;

    
    

    CURSOR CUSUSPCONWITHDRAWSERV (
                               INUSERVSUSC             SERVSUSC.SESUNUSE%TYPE,
                               INUORDERNUM             SUSPCONE.SUCONUOR%TYPE,
                               INUAPPLYSTATUS          RECAESCO.RCECCOEC%TYPE,
                               ISBPROCESSSTATUS        SUSPCONE.PROCESS_STATUS%TYPE,
			                   ISBPACKPROCESSSTATUS    BI_PACKAGE_SEND.PROCESS_STATUS%TYPE
			                 ) IS
    SELECT /*+ ordered
            index(suspcone IX_SUSPCONE03)
            index(servsusc PK_SERVSUSC)
            index(confesco PK_CONFESCO)
            index(bi_package_send PK_BI_PACKAGE_SEND) */
            SUSPCONE.ROWID, SUCOIDSC, SUCONUSE, SUCOFEAT, SESUFECO, SUCOTIPO,
            COECSERV, COECCODI, COECFUFA, COECFACT, COECDICO,
            COECGECA, COECREDA, COECTECS, COECREGE, COECREGL
    FROM    SUSPCONE, SERVSUSC, CONFESCO, BI_PACKAGE_SEND /*+ BI_BSSuspConnWithDraw.cuSuspConWithDrawServ */
    WHERE   SUCONUOR = INUORDERNUM AND
            SUSPCONE.PROCESS_STATUS = ISBPROCESSSTATUS AND
            SUCONUSE = DECODE(INUSERVSUSC, NULL, SUCONUSE, INUSERVSUSC) AND
            SUCOSERV = COECSERV AND
            COECCODI = INUAPPLYSTATUS AND
            PACKAGE_SEND_ID = SUCONUOR AND
            SUCONUSE = SESUNUSE;
			
    
    
    
    CURSOR CUWITHDRAWSERVSUSC (
                               INUSERVSUSC             SERVSUSC.SESUNUSE%TYPE,
                               INUSTATUSPRE            SERVSUSC.SESUESCO%TYPE,
                               INUAPPLYSTATUS          RECAESCO.RCECCOEC%TYPE,
                               ISBPROCESSSTATUS        SUSPCONE.PROCESS_STATUS%TYPE,
                               ISBWITHDRAWTYPE         SUSPCONE.SUCOTIPO%TYPE
    		                 ) IS
    SELECT /*+ Ordered
            index(suspcone IX_SUSPCONE05)
            index(servsusc PK_SERVSUSC)
            index(confesco PK_CONFESCO) */
            SUSPCONE.ROWID, SUCOIDSC, SUCONUSE, SUCOFEAT, SESUFECO, SUCOTIPO,
            COECSERV, COECCODI, COECFUFA, COECFACT, COECDICO,
            COECGECA, COECREDA, COECTECS, COECREGE, COECREGL
    FROM    SUSPCONE, SERVSUSC, CONFESCO /*+ BI_BSSuspConnWithDraw.cuSuspConWithDrawServ */
    WHERE   SUCONUSE = SESUNUSE AND
            SERVSUSC.SESUESCO = INUSTATUSPRE AND
            SUSPCONE.PROCESS_STATUS = ISBPROCESSSTATUS AND
            SUSPCONE.SUCOTIPO = ISBWITHDRAWTYPE  AND
            SUSPCONE.SUCONUSE = INUSERVSUSC AND
            SUSPCONE.SUCOSERV = CONFESCO.COECSERV AND
            CONFESCO.COECCODI = INUAPPLYSTATUS;




    
  	
  	
    TRWSUSPCONENUMBULK      TYSUSPCONEROWID;
  	TNUSUCOIDSCNUMBULK      PKTBLSUSPCONE.TYSUCOIDSC; 
	TNUSERVSUSCNUMBULK   	PKTBLSERVSUSC.TYSESUNUSE; 
	TDTSUCOFEATNUMBULK      PKTBLSUSPCONE.TYSUCOFEAT; 
	TDTSESUFECONUMBULK      PKTBLSERVSUSC.TYSESUFECO; 
	TNUSUCOTIPONUMBULK      PKTBLSUSPCONE.TYSUCOTIPO; 
	TNUCOECSERVNUMBULK      PKTBLCONFESCO.TYCOECSERV; 
	TNUCOECCODINUMBULK      PKTBLCONFESCO.TYCOECCODI; 
    TNUCOECFUFANUMBULK      PKTBLCONFESCO.TYCOECFUFA; 
    TCHCOECFACTNUMBULK      PKTBLCONFESCO.TYCOECFACT; 
    TNUCOECDICONUMBULK      PKTBLCONFESCO.TYCOECDICO; 
    TCHCOECGECANUMBULK      PKTBLCONFESCO.TYCOECGECA; 
    TCHCOECREDANUMBULK      PKTBLCONFESCO.TYCOECREDA; 
    TNUCOECTECSNUMBULK      PKTBLCONFESCO.TYCOECTECS; 
    TNUCOECREGENUMBULK      PKTBLCONFESCO.TYCOECREGE; 
    TNUCOECREGLNUMBULK      PKTBLCONFESCO.TYCOECREGL; 

    
    
    
    












PROCEDURE CLEARMEMORY IS
    BEGIN
	PKERRORS.PUSH('BI_BSSuspConnWithDraw.ClearMemory');
	
    PKTBLSERVSUSC.CLEARMEMORY;
    PKTBLCONFCOSE.CLEARMEMORY;
    PKTBLRECAESCO.CLEARMEMORY;
    PKTBLCONFESCO.CLEARMEMORY;
    PKTBLSUSPCONE.CLEARMEMORY;
    DAGE_RETIRE_TYPE.CLEARMEMORY;
    
	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END CLEARMEMORY;

    



    FUNCTION FSBVERSION  RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;

    
    





















PROCEDURE GETPARAMETERS
    IS
    BEGIN
        PKERRORS.PUSH('BI_BSSuspConnWithDraw.GetParameters');

        
        
        SBFAILUREBIL :=     BI_BOCONSTANTS.CSBSUSPENSION_FAILURE_BILLING;
        SBPROCESSEDBIL :=   BI_BOCONSTANTS.CSBSUSPENSION_PROCESSED_BILL;
        SBPROCESSEDOSS :=   BI_BOCONSTANTS.CSBSUSPENSION_PROCESSED_OSS;
        
        SBPACKPROCESSOSS := BI_BOCONSTANTS.CSBPACKAGE_PROCESSED_OSS;
        SBPACKPROCESSBIL := BI_BOCONSTANTS.CSBPACKAGE_PROCESSED_BILL;
        SBPACKSENDOSS :=    BI_BOCONSTANTS.CSBPACKAGE_SENDING_OSS;

        
        NUMOTIVO_RETIRO_POR_NO_PAGO := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
                                        ('MOTIVO_RETIRO_POR_NO_PAGO' );

        
        NUTELEF_RETIRO :=PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
						    ('TELEF_RETIRO');
        
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END GETPARAMETERS;
    
    












PROCEDURE VALINPUTDATA
        (
           INUSESUNUSE	IN      SERVSUSC.SESUNUSE%TYPE
        )
    IS
    BEGIN
        PKERRORS.PUSH ('BI_BSSuspConnWithDraw.ValInputData');
        
        PKTBLSERVSUSC.ACCKEY ( INUSESUNUSE, PKCONSTANTE.NOCACHE );
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END VALINPUTDATA;

    
    











PROCEDURE INITIALIZE
    (
           ISBPROGRAMA      IN      VARCHAR2
    )
    IS
    BEGIN
	PKERRORS.PUSH('BI_BSSuspConnWithDraw.Initialize');
	
   	PKERRORS.INITIALIZE;	
    
	PKERRORS.SETAPPLICATION(ISBPROGRAMA);
			
	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END INITIALIZE;
    
    














PROCEDURE INITIALIZE
        (
           INUEXTERNALMOD	IN      BI_PACKAGE_SEND.EXTERNAL_MODULE_ID%TYPE,
           ISBPROGRAMA      IN      VARCHAR2
        )
    IS
    BEGIN
	PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentSuspConnServ.Initialize');
	
    	PKERRORS.INITIALIZE;
	
	    PKERRORS.SETAPPLICATION(ISBPROGRAMA);  
	
	    RCBI_PACKAGE_SEND   := BI_BOSUSPCONNWITHDRAW.FRCGETPACKAGEBYEXMODULE(INUEXTERNALMOD);
	    NUORDERNUMBER       := RCBI_PACKAGE_SEND.PACKAGE_SEND_ID;
	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END INITIALIZE;
    
    
    
















PROCEDURE FILLCONFESCORECORD
        (
	    INUCOECSERVNUM      IN  SERVSUSC.SESUNUSE%TYPE,
        INUCOECCODINUM      IN  CONFESCO.COECCODI%TYPE,
        INUCOECFUFANUM      IN  CONFESCO.COECFUFA%TYPE,
        ICHCOECFACTNUM      IN  CONFESCO.COECFACT%TYPE,
        INUCOECDICONUM      IN  CONFESCO.COECDICO%TYPE,
        ICHCOECGECANUM      IN  CONFESCO.COECGECA%TYPE,
        ICHCOECREDANUM      IN  CONFESCO.COECREDA%TYPE,
        INUCOECTECSNUM      IN  CONFESCO.COECTECS%TYPE,
        INUCOECREGENUM      IN  CONFESCO.COECREGE%TYPE,
        INUCOECREGLNUM      IN  CONFESCO.COECREGL%TYPE

        )
     IS
     BEGIN
        PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentSuspConnServ.FillConfEscoRecord');

	    RCCONFESCO.COECSERV := INUCOECSERVNUM;
        RCCONFESCO.COECCODI := INUCOECCODINUM;
        RCCONFESCO.COECFUFA := INUCOECFUFANUM;
        RCCONFESCO.COECFACT := ICHCOECFACTNUM;
        RCCONFESCO.COECDICO := INUCOECDICONUM;
        RCCONFESCO.COECGECA := ICHCOECGECANUM;
        RCCONFESCO.COECREDA := ICHCOECREDANUM;
        RCCONFESCO.COECTECS := INUCOECTECSNUM;
        RCCONFESCO.COECREGE := INUCOECREGENUM;
        RCCONFESCO.COECREGL := INUCOECREGLNUM;

        PKERRORS.POP;
     EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END FILLCONFESCORECORD ;
    
    






























PROCEDURE NOTIFYERROR
        (
           INUSUCOID            IN  SUSPCONE.SUCOIDSC%TYPE,
           ISBSTATUSFAILBILL    IN  SUSPCONE.PROCESS_STATUS%TYPE
        )
     IS
        PRAGMA AUTONOMOUS_TRANSACTION;
     BEGIN
            PKERRORS.PUSH ('BI_BSSuspConnWithDraw.AttentSuspConnServ.NotifyError');
            
            
      		PKGENERALSERVICES.TRACEDATA ('Se genera error para el ID SuspCone : ' || TO_CHAR(INUSUCOID));
	       	PKGENERALSERVICES.TRACEDATA ('Por la causa .. : ' || PKERRORS.FSBGETERRORMESSAGE );
       		
            
            BI_BOSUSPCONNWITHDRAW.PRUPDATESUSPFAILUREBILL (
                                                           INUSUCOID,
                                                           ISBSTATUSFAILBILL,
                                                           PKERRORS.FSBGETERRORMESSAGE
                                                           );

        	
            COMMIT;

     EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
END NOTIFYERROR ;

    
    












PROCEDURE EXECUTEFUNCTIONAPPLY
    (
        INUSERVCODI	IN      SERVSUSC.SESUSERV%TYPE,
    	INUCOECCODI	IN	    CONFESCO.COECCODI%TYPE
    )
    IS
    BEGIN
    
        PKERRORS.PUSH('BI_BSSuspConnWithDraw.ExecuteFunctionApply');
        

        UT_TRACE.TRACE('Servicio :'  || INUSERVCODI);
        UT_TRACE.TRACE('Evento   :'  || INUCOECCODI);

        PKGENERALSERVICES.TRACEDATA('Servicio :'  || INUSERVCODI);
        PKGENERALSERVICES.TRACEDATA('Evento   :'  || INUCOECCODI);
        PKSUSPCONNSERVICEMGR.EXECUTEFUNCTIONAPPLY ( INUSERVCODI, INUCOECCODI );
        PKERRORS.POP;
        
    EXCEPTION
        WHEN LOGIN_DENIED THEN
          	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
END EXECUTEFUNCTIONAPPLY;

    
    
























PROCEDURE EXESUSPCONWITHDRAWEVENT
    (
        INUSERVSUSC         IN   SERVSUSC.SESUNUSE%TYPE,
        INUEXTERNALMODULE   IN   BI_PACKAGE_SEND.EXTERNAL_MODULE_ID%TYPE,
        INUSTATUS           IN   SERVSUSC.SESUESCO%TYPE,
        IDTSUSPCONWITHDRAW  IN   SERVSUSC.SESUFECO%TYPE,
        ONUERRORCODE        OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE     OUT  MENSAJE.MENSDESC%TYPE
    )
    IS
    
    
    
    




    PROCEDURE GETDATA IS
    BEGIN
	PKERRORS.PUSH('BI_BSSuspConnWithDraw.ExeSuspConWithDrawEvent.GetData');


    IF ( CUSUSPAPPLYSTATUS%ISOPEN) THEN
         CLOSE CUSUSPAPPLYSTATUS ;
    END IF;
	
    OPEN CUSUSPAPPLYSTATUS ( INUSERVSUSC, INUSTATUS );

	
    FETCH CUSUSPAPPLYSTATUS INTO NUEVENAPLI, NUSERVCODI;

    IF ( CUSUSPAPPLYSTATUS%NOTFOUND ) THEN
    
       	CLOSE CUSUSPAPPLYSTATUS ;
       	PKERRORS.SETERRORCODE(  CSBDIV,
	                      		CSBMOD_SAT,
                   				CNUNO_EXIST_CHANG_STAT );
        RAISE LOGIN_DENIED;
    END IF;

	
	NUSESUNUSE := INUSERVSUSC;
	NUEXTERNALMODULE := INUEXTERNALMODULE;
	DTSUSPCONWITHDRAW := IDTSUSPCONWITHDRAW;
	
	
	PKGENERALSERVICES.TRACEDATA (' ****************************************** ');    			
	PKGENERALSERVICES.TRACEDATA (' Servicio Suscrito .. : ' || NUSESUNUSE );
	PKGENERALSERVICES.TRACEDATA (' External ID .. :       ' || NUEXTERNALMODULE );	
	PKGENERALSERVICES.TRACEDATA (' Estado a Aplicar .. :  ' || NUEVENAPLI );		
	PKGENERALSERVICES.TRACEDATA (' Servicio .. :          ' || NUSERVCODI );	
	PKGENERALSERVICES.TRACEDATA (' Fecha de Atencion .. : ' || DTSUSPCONWITHDRAW );
	PKGENERALSERVICES.TRACEDATA (' ****************************************** ');    		
	
	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETDATA;
BEGIN
    PKERRORS.PUSH('BI_BSSuspConnWithDraw.ExeSuspConWithDrawEvent');
    
    INITIALIZE (CSBPROGSUSPCONN) ;
    
    GETDATA;
    
    CLEARMEMORY;
    
    UT_TRACE.TRACE('nuServCodi['||NUSERVCODI||'] nuEvenApli['||NUEVENAPLI||']');
    EXECUTEFUNCTIONAPPLY ( NUSERVCODI, NUEVENAPLI );
    PKERRORS.POP;
EXCEPTION
        WHEN LOGIN_DENIED THEN
        
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
END EXESUSPCONWITHDRAWEVENT;
    
    
    


















































PROCEDURE ATTENTSUSPCONNSERV
    IS
    
    SBERRORDIV		  MENSAJE.MENSDIVI%TYPE ;
    SBERRORMOD		  MENSAJE.MENSMODU%TYPE ;
    NUERRORCOD		  MENSAJE.MENSCODI%TYPE ;
    SBERRORMES		  MENSAJE.MENSDESC%TYPE ;

    
     
     
     
     PROCEDURE ATTENPROCESS
     IS
     BEGIN

     PKERRORS.PUSH ('BI_BSSuspConnWithDraw.AttentSuspConnServ.AttenProcess');
     
     PKSUSPCONNSERVICEMGR.ATTENINDIVSUSPECONNE (
    	   			TNUSERVSUSCNUMBULK( NUINDICE ),
                	TRWSUSPCONENUMBULK( NUINDICE ),
                	NVL(DTSUSPCONWITHDRAW, SYSDATE),
                	TDTSESUFECONUMBULK( NUINDICE ),
                	TNUSUCOTIPONUMBULK( NUINDICE ),
                    CSBACTIVIDAD_CAMPO,
                	RCCONFESCO
    	   		);

     
     PKSUSPCONNSERVICEMGR.UPDISCHARGEDFLAG ( TNUSERVSUSCNUMBULK( NUINDICE ) ) ;

     
     
     BI_BOSUSPCONNWITHDRAW.PRUPDATESUSPPROCESSBILL ( TNUSUCOIDSCNUMBULK (NUINDICE),
                                                   SBPROCESSEDBIL);

     PKERRORS.POP ;
    	   		
     EXCEPTION
     WHEN LOGIN_DENIED THEN
      	    PKERRORS.POP ;
      	    
       	    
            RAISE LOGIN_DENIED;
            
     WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
       	    PKERRORS.POP ;
      	    
       	    
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;

     WHEN OTHERS THEN
       	    
       	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
       	    PKERRORS.POP ;
       	    
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);        	

    END ATTENPROCESS;
     
     PROCEDURE GENSUSPCONNPROCESS
     IS
     BEGIN
        PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentSuspConnServ.GenSuspConnProcess');

        
        OPEN CUSUSPCONWITHDRAWSERV ( NUSESUNUSE, NUORDERNUMBER, NUEVENAPLI,
                                     SBPROCESSEDOSS, SBPACKPROCESSOSS );

        
  	    LOOP
          FETCH CUSUSPCONWITHDRAWSERV BULK COLLECT INTO    TRWSUSPCONENUMBULK,
                                                       TNUSUCOIDSCNUMBULK,
                                                       TNUSERVSUSCNUMBULK,
                                                       TDTSUCOFEATNUMBULK,
                                                       TDTSESUFECONUMBULK,
                                                       TNUSUCOTIPONUMBULK,
                                                       TNUCOECSERVNUMBULK,
  	                                                   TNUCOECCODINUMBULK,
                                                       TNUCOECFUFANUMBULK,
                                                       TCHCOECFACTNUMBULK,
                                                       TNUCOECDICONUMBULK,
                                                       TCHCOECGECANUMBULK,
                                                       TCHCOECREDANUMBULK,
  	                                                   TNUCOECTECSNUMBULK,
                                                       TNUCOECREGENUMBULK,
                                                       TNUCOECREGLNUMBULK
    	   	LIMIT CNUNUM_REC_FETCHED;

	       	NUINDICE := TNUSERVSUSCNUMBULK.FIRST;	
        	
    		IF ( TNUSERVSUSCNUMBULK.FIRST IS NULL ) THEN
	   	       
	   	       
	   	       PKERRORS.SETERRORCODE(CSBDIV, CSBMOD_BIL, CNUSIN_DATOS);
		       RAISE LOGIN_DENIED;
		       EXIT ;
     		END IF ;
		
		    
      		PKGENERALSERVICES.TRACEDATA ('Posicion  : ' || NUINDICE);
	       	PKGENERALSERVICES.TRACEDATA ('Primer Servicio Suscrito a procesar .. : '
                                          || TNUSERVSUSCNUMBULK ( NUINDICE ));
       		
       		
	     	
            
            LOOP
            	EXIT WHEN NUINDICE IS NULL;
                
                FILLCONFESCORECORD(TNUCOECSERVNUMBULK (NUINDICE),
                                   TNUCOECCODINUMBULK (NUINDICE),
                                   TNUCOECFUFANUMBULK (NUINDICE),
                                   TCHCOECFACTNUMBULK (NUINDICE),
                                   TNUCOECDICONUMBULK (NUINDICE),
                                   TCHCOECGECANUMBULK (NUINDICE),
                                   TCHCOECREDANUMBULK (NUINDICE),
                                   TNUCOECTECSNUMBULK (NUINDICE),
                                   TNUCOECREGENUMBULK (NUINDICE),
                                   TNUCOECREGLNUMBULK (NUINDICE) );
                
                ATTENPROCESS;
                
	       		NUINDICE := TNUSERVSUSCNUMBULK.NEXT (NUINDICE);	
    			PKGENERALSERVICES.TRACEDATA ('Nueva Posicion: ' || NUINDICE);
        	END LOOP;

		    TRWSUSPCONENUMBULK.DELETE;
		    TNUSUCOIDSCNUMBULK.DELETE;
            TNUSERVSUSCNUMBULK.DELETE;
            TDTSUCOFEATNUMBULK.DELETE;
            TDTSESUFECONUMBULK.DELETE;
	        TNUSUCOTIPONUMBULK.DELETE;
            TNUCOECCODINUMBULK.DELETE;
            TNUCOECFUFANUMBULK.DELETE;
            TCHCOECFACTNUMBULK.DELETE;
            TNUCOECDICONUMBULK.DELETE;
            TCHCOECGECANUMBULK.DELETE;
            TCHCOECREDANUMBULK.DELETE;
            TNUCOECTECSNUMBULK.DELETE;
            TNUCOECREGENUMBULK.DELETE;
            TNUCOECREGLNUMBULK.DELETE;

    	    EXIT WHEN CUSUSPCONWITHDRAWSERV%NOTFOUND;
    	
	   END LOOP;
	
	   CLOSE CUSUSPCONWITHDRAWSERV;
	   
  	   PKGENERALSERVICES.TRACEDATA (' TERMINA LOOP ... ');
	
       PKERRORS.POP;

    EXCEPTION
    WHEN LOGIN_DENIED THEN
        IF ( CUSUSPCONWITHDRAWSERV%ISOPEN) THEN
	    CLOSE CUSUSPCONWITHDRAWSERV ;
        END IF;
     	PKERRORS.POP;
	   RAISE LOGIN_DENIED;
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        IF ( CUSUSPCONWITHDRAWSERV%ISOPEN) THEN
	    CLOSE CUSUSPCONWITHDRAWSERV ;
        END IF;
	    PKERRORS.POP;
	    RAISE PKCONSTANTE.EXERROR_LEVEL2;
    WHEN OTHERS THEN
        IF ( CUSUSPCONWITHDRAWSERV%ISOPEN) THEN
	    CLOSE CUSUSPCONWITHDRAWSERV ;
        END IF;
	    PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
 	    PKERRORS.POP;
	    RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GENSUSPCONNPROCESS;

    
BEGIN
    PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentSuspConnServ');

    
    INITIALIZE(NUEXTERNALMODULE, CSBPROGSUSPCONN );
    
    VALINPUTDATA(NUSESUNUSE);
    
    CLEARMEMORY;
    
    GETPARAMETERS ;
    
    GENSUSPCONNPROCESS;

    PKERRORS.POP;

    EXCEPTION
    WHEN LOGIN_DENIED THEN
    	
    	PKERRORS.POP;
    	RAISE LOGIN_DENIED;    	
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	PKERRORS.POP;
	    RAISE PKCONSTANTE.EXERROR_LEVEL2;    	
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );    	
END ATTENTSUSPCONNSERV;

    
    





















































































PROCEDURE ATTENTWITHDRAWSERV
IS

    
    
    
    PROCEDURE ATTENPROCESS
    (
        IRCSUSPCONE  IN CUWITHDRAWSERVSUSC%ROWTYPE
    )
    IS
    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [BI_BSSuspConnWithDraw.AttentWithDrawServ.AttenProcess]', 6 );
        
        
        PKSUSPCONNSERVICEMGR.ATTENINDIVWITHDRAW
        (
        	IRCSUSPCONE.SUCONUSE,
        	IRCSUSPCONE.SUCOIDSC,
           	NVL( DTSUSPCONWITHDRAW, SYSDATE ),
        	IRCSUSPCONE.SESUFECO,
        	NUMOTIVO_RETIRO_POR_NO_PAGO,
        	RCCONFESCO
        );
        
        
        
        BI_BOSUSPCONNWITHDRAW.PRUPDATESUSPPROCESSBILL
        (
            IRCSUSPCONE.SUCOIDSC,
            SBPROCESSEDBIL
        );
        
        UT_TRACE.TRACE( 'Fin: [BI_BSSuspConnWithDraw.AttentWithDrawServ.AttenProcess]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            UT_TRACE.TRACE( 'Error: [BI_BSSuspConnWithDraw.AttentWithDrawServ.AttenProcess]', 6 );
            RAISE;

        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [BI_BSSuspConnWithDraw.AttentWithDrawServ.AttenProcess]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;
     
    PROCEDURE GENWITHDRAWPROCESS
    IS

        RCSUSPCONE      CUWITHDRAWSERVSUSC%ROWTYPE;

    BEGIN
    
        UT_TRACE.TRACE( 'Inicio: [BI_BSSuspConnWithDraw.AttentWithDrawServ.GenWithDrawProcess]', 6 );
        
        
        OPEN CUWITHDRAWSERVSUSC
        (
            NUSESUNUSE,
            NUTELEF_RETIRO,
            NUEVENAPLI,
            SBPROCESSEDOSS,
            PKSUSPCONNSERVICE.CSBRETIRO
        );

        FETCH CUWITHDRAWSERVSUSC INTO RCSUSPCONE;

        IF ( CUWITHDRAWSERVSUSC%NOTFOUND ) THEN
        
            
            
            PKERRORS.SETERRORCODE( CSBDIV, CSBMOD_BIL, CNUSIN_DATOS );
            RAISE LOGIN_DENIED;
        
        END IF;

        
        FILLCONFESCORECORD
        (
            RCSUSPCONE.COECSERV,
            RCSUSPCONE.COECCODI,
            RCSUSPCONE.COECFUFA,
            RCSUSPCONE.COECFACT,
            RCSUSPCONE.COECDICO,
            RCSUSPCONE.COECGECA,
            RCSUSPCONE.COECREDA,
            RCSUSPCONE.COECTECS,
            RCSUSPCONE.COECREGE,
            RCSUSPCONE.COECREGL
        );

        
        ATTENPROCESS( RCSUSPCONE );

        CLOSE CUWITHDRAWSERVSUSC;

        UT_TRACE.TRACE( 'Fin: [BI_BSSuspConnWithDraw.AttentWithDrawServ.GenWithDrawProcess]', 6 );

    EXCEPTION

        WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            IF ( CUWITHDRAWSERVSUSC%ISOPEN ) THEN
    	       CLOSE CUWITHDRAWSERVSUSC;
            END IF;
            UT_TRACE.TRACE( 'Error: [BI_BSSuspConnWithDraw.AttentWithDrawServ.GenWithDrawProcess]', 6 );
            RAISE;

        WHEN OTHERS THEN
            IF ( CUWITHDRAWSERVSUSC%ISOPEN ) THEN
    	       CLOSE CUWITHDRAWSERVSUSC;
            END IF;
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            UT_TRACE.TRACE( 'Error: [BI_BSSuspConnWithDraw.AttentWithDrawServ.GenWithDrawProcess]', 6 );
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END;

    
BEGIN

    UT_TRACE.TRACE( 'Inicio: [BI_BSSuspConnWithDraw.AttentWithDrawServ]', 5 );
    
    
    VALINPUTDATA( NUSESUNUSE );
    
    
    CLEARMEMORY;
    
    
    GETPARAMETERS;
    
    
    GENWITHDRAWPROCESS;

    UT_TRACE.TRACE( 'Fin: [BI_BSSuspConnWithDraw.AttentWithDrawServ]', 5 );

EXCEPTION

    WHEN LOGIN_DENIED OR EX.CONTROLLED_ERROR OR PKCONSTANTE.EXERROR_LEVEL2 THEN
        UT_TRACE.TRACE( 'Error: [BI_BSSuspConnWithDraw.AttentWithDrawServ]', 5 );
        RAISE;

    WHEN OTHERS THEN
        PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        UT_TRACE.TRACE( 'Error: [BI_BSSuspConnWithDraw.AttentWithDrawServ]', 5 );
        RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );

END;


    
    























PROCEDURE PACKAGERESENDPROCESS
    (
        INUORDERNUMBER      IN   BI_PACKAGE_SEND.PACKAGE_SEND_ID%TYPE,
        INUSTATUS           IN   BI_PACKAGE_SEND.PROCESS_STATUS%TYPE,
        ONUERRORCODE        OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE     OUT  MENSAJE.MENSDESC%TYPE
    )
    IS
BEGIN

        PKERRORS.PUSH('BI_BSSuspConnWithDraw.PackageResendProcess');

        
        GETPARAMETERS;
        
          
        IF ( INUSTATUS = BI_BOCONSTANTS.CSBPACK_PARTIAL_FAILURE_OSS ) THEN
             BI_BOSUSPCONNWITHDRAW.ATTENTPACKPARTIALFAILOSS (INUORDERNUMBER);
        ELSE
             
             BI_BOSUSPCONNWITHDRAW.ATTENTPACKTOTALFAILOSS (INUORDERNUMBER);
        END IF;

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE,
        			              OSBERRORMESSAGE );
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE,
        			              OSBERRORMESSAGE );
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE,
        			              OSBERRORMESSAGE );
END PACKAGERESENDPROCESS;
    
    
    






















PROCEDURE INSERTPACKAGE
    (
        INUORDERNUMBER  IN   SUSPCONE.SUCONUOR%TYPE,
        INUTIPOORDEN    IN   BI_PACKAGE_SEND.ORDER_TYPE%TYPE,
        ONUERRORCODE    OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE OUT  MENSAJE.MENSDESC%TYPE
    )
    IS


    BEGIN

        BI_BOSUSPCONNWITHDRAW.INSERTPACKAGE( INUORDERNUMBER,
                                             INUTIPOORDEN   );

	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
END INSERTPACKAGE;

    
    






















PROCEDURE INSERTPACKAGE
    (
        INUORDERNUMBER    IN SUSPCONE.SUCONUOR%TYPE,
        INUBILLSTATUS     IN SERVSUSC.SESUESCO%TYPE,
        ISBPROCESSSTATUS  IN BI_PACKAGE_SEND.PROCESS_STATUS%TYPE,
        ONUERRORCODE    OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE OUT  MENSAJE.MENSDESC%TYPE
    )
    IS

    BEGIN

        PKERRORS.PUSH('BI_BSSuspConnWithDraw.InsertPackage');

        BI_BOSUSPCONNWITHDRAW.INSERTPACKAGE( INUORDERNUMBER,
                                             INUBILLSTATUS,
                                             ISBPROCESSSTATUS  );
        PKERRORS.POP;

	EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
END INSERTPACKAGE;

    
    















    PROCEDURE UPDSTATATUSPACKAGESENDING
    (
        INUORDERNUMBER  IN   SUSPCONE.SUCONUOR%TYPE,
        ONUERRORCODE    OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE OUT  MENSAJE.MENSDESC%TYPE

    )
    IS
    BEGIN
        PKERRORS.PUSH('BI_BSSuspConnWithDraw.UpdStatatusPackageSending');
        
        BI_BOSUSPCONNWITHDRAW.UPDSTATATUSPACKAGESENDING(INUORDERNUMBER);
        PKERRORS.POP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
    END UPDSTATATUSPACKAGESENDING;
    
    














    PROCEDURE DELETEPACKAGE
    (
        INUORDERNUMBER  IN   SUSPCONE.SUCONUOR%TYPE,
        ONUERRORCODE    OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE OUT  MENSAJE.MENSDESC%TYPE
    )
    IS
    BEGIN
        PKERRORS.PUSH('BI_BSSuspConnWithDraw.DeletePackage');
        
        BI_BOSUSPCONNWITHDRAW.DELETEPACKAGE(INUORDERNUMBER);
        PKERRORS.POP;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
		WHEN OTHERS THEN
			ERRORS.SETERROR;
			ERRORS.GETERROR(ONUERRORCODE, OSBERRORMESSAGE);
    END DELETEPACKAGE;

    
    



























    
    
    

























































































PROCEDURE ATTENTVOLUNTARYWITHDRAW
(
    INUSERVSUSC     IN  SERVSUSC.SESUNUSE%TYPE,
    INUMOTISUSP     IN  HISTRETI.HSREMOSU%TYPE,
    ISBACTARETI     IN  HISTRETI.HSREACRE%TYPE,
    IDTWITHDRAWDATE IN  SERVSUSC.SESUFECO%TYPE,
    ONUERRORCODE    OUT MENSAJE.MENSCODI%TYPE ,
    OSBERRORMESSAGE OUT MENSAJE.MENSDESC%TYPE
) IS

    
    
    DTSUBSSERVLASTREAD  LECTELME.LEEMFELE%TYPE;
    
    RCSUBSSERVLASTREAD  LECTELME%ROWTYPE;

    
    
    

    




    PROCEDURE VALINPUTDATA IS
    BEGIN

        PKERRORS.PUSH ('BI_BSSuspConnWithDraw.AttentVoluntaryWithDraw.ValInputData');

        
        
        
        IF (IDTWITHDRAWDATE IS NULL) THEN

            BEGIN
                 RCSUBSSERVLASTREAD :=
                    PKSUBSSERVCOMPONENTMGR.FRCGETLASTREADINGCOMP(INUSERVSUSC);
                    
                 DTSUBSSERVLASTREAD := RCSUBSSERVLASTREAD.LEEMFELE;
            EXCEPTION
                WHEN LOGIN_DENIED THEN
                	DTSUBSSERVLASTREAD := PKGENERALSERVICES.FDTGETSYSTEMDATE;
            END;

        ELSE
            DTSUBSSERVLASTREAD := IDTWITHDRAWDATE;
        END IF;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END VALINPUTDATA;
    




    PROCEDURE PROCESS IS
    BEGIN
    	PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentVoluntaryWithDraw.Process');
    	
        
        
        
        PKWITHDRAWSERVNUMBER.EXECUTEWITHDRAW
        (
            INUSERVSUSC,
            INUMOTISUSP,
            ISBACTARETI,
            DTSUBSSERVLASTREAD,
            TRUE        
        );

    	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END PROCESS;

BEGIN
    PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentVoluntaryWithDraw');

    
    INITIALIZE (CSBPROGWITHDRAW) ;

    
    VALINPUTDATA;

    
    PROCESS;

    PKERRORS.POP;
EXCEPTION
    WHEN LOGIN_DENIED THEN
        
    	PKERRORS.POP;
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        
    	PKERRORS.POP;
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    WHEN OTHERS THEN
    	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
    	PKERRORS.POP;
    	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
END ATTENTVOLUNTARYWITHDRAW;

    
    



























    
    
    





















































    
    






















PROCEDURE GETREQUIREDDAYSSTATUS
    (
        INUSERVICE      IN   CONFESCO.COECSERV%TYPE,
        INUSTATUS       IN   CONFESCO.COECCODI%TYPE,
        ONUDAYSSTATUS   OUT   CONFESCO.COECDICO%TYPE,
        ONUERRORCODE    OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE OUT  MENSAJE.MENSDESC%TYPE
    )
    IS
BEGIN

    PKERRORS.PUSH('BI_BSSuspConnWithDraw.GetRequiredDaysStatus');
    
    ONUDAYSSTATUS := PKTBLCONFESCO.FNUGETDAYSSUSPENSION( INUSERVICE, INUSTATUS );

    PKERRORS.POP;
    EXCEPTION
         WHEN LOGIN_DENIED THEN
        
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
END GETREQUIREDDAYSSTATUS;
    
    
    































PROCEDURE ATTENREINSTACUSTOMCARE
    (
        INUSERVSUSC         IN   SERVSUSC.SESUNUSE%TYPE,
	    IDTCONNDATE         IN   SERVSUSC.SESUFEIN%TYPE,
	    INUBILLPLAN         IN   SERVSUSC.SESUPLFA%TYPE,
        ONUERRORCODE        OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE     OUT  MENSAJE.MENSDESC%TYPE
    )
    IS
        
        NUCONNSTATUSSERV     SERVSUSC.SESUESCO%TYPE;
        NUCONNSTATUSCOMP     COMPSESU.CMSSESCM%TYPE;
        DTCONNECTIONDATE     SERVSUSC.SESUFEIN%TYPE; 
        DTWITHDRAW           SERVSUSC.SESUFERE%TYPE; 

    
    
    
    





    PROCEDURE VALINPUTDATA IS
    BEGIN
        PKERRORS.PUSH ('BI_BSSuspConnWithDraw.AttenReinstaCustomCare.ValInputData');
        
        
        IF (IDTCONNDATE IS NULL) THEN
           	DTCONNECTIONDATE := PKGENERALSERVICES.FDTGETSYSTEMDATE;
        ELSE
            DTCONNECTIONDATE := IDTCONNDATE;
        END IF;
        
        PKGENERALSERVICES.TRACEDATA('Fecha para Reinstalaci�n : ' || DTCONNECTIONDATE);						
        

        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        	PKERRORS.POP;
        	RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
        	
        	PKERRORS.POP;
        	RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR(PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG);
        	PKERRORS.POP;
        	RAISE_APPLICATION_ERROR(PKCONSTANTE.NUERROR_LEVEL2,SBERRMSG);
    END VALINPUTDATA;
    




    PROCEDURE INITIALIZE
    IS
    BEGIN
	PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttenReinstaCustomCare.Initialize');
	
   	PKERRORS.INITIALIZE;	
    
	PKERRORS.SETAPPLICATION(CSBPROGREINSTALL);
	
	DTWITHDRAW := PKGENERALSERVICES.FDTGETMAXDATE;
    
    PKGENERALSERVICES.TRACEDATA('Fecha Maxima del sistema : ' || DTWITHDRAW);						
    
	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END INITIALIZE;
    




    PROCEDURE GETPARAMETERS
    IS
    BEGIN
        PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttenReinstaCustomCare.GetParameters');

        
        NUCONNSTATUSSERV := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE
						      ('EST_SERVICIO_SIN_CORTE');

        NUCONNSTATUSCOMP := PKGENERALPARAMETERSMGR.FNUGETNUMBERVALUE('CONEXION');						
        
        PKGENERALSERVICES.TRACEDATA('Valor del parametro [EST_SERVICIO_SIN_CORTE] : ' || TO_CHAR(NUCONNSTATUSSERV));						
        PKGENERALSERVICES.TRACEDATA('Valor del parametro [CONEXION] : ' || TO_CHAR(NUCONNSTATUSCOMP));						
        
        PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE LOGIN_DENIED;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE PKCONSTANTE.EXERROR_LEVEL2;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END GETPARAMETERS;
    




    PROCEDURE PROCESS IS
    BEGIN
	PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttenReinstaCustomCare.Process');


    
    
    PKSUBSSERVCOMPONENTMGR.UPDDATESTATUSCOMPONENTS(INUSERVSUSC,
                                                   NUCONNSTATUSCOMP,
                                                   DTWITHDRAW,
                                                   DTCONNECTIONDATE);

    
    
    
    PKSERVNUMBERMGR.UPDATESTATUSSUBSSERV ( INUSERVSUSC,
	                                   INUBILLPLAN,
                                    	   NUCONNSTATUSSERV,
                                    	   NULL,
                                           DTWITHDRAW,
                                           DTCONNECTIONDATE);

	PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END PROCESS;

BEGIN
    PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttenReinstaCustomCare');

    
    INITIALIZE;
    
    VALINPUTDATA;
    
    GETPARAMETERS;
    
    PROCESS;

    PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
END ATTENREINSTACUSTOMCARE;

    
    














    PROCEDURE VALIDTRANSITIONSTATE(
        INUSERVSUSC         IN   SERVSUSC.SESUNUSE%TYPE,
        INUSTATUSCOEC       IN   SERVSUSC.SESUESCO%TYPE,
        INUSTATUSCOER       IN   SERVSUSC.SESUESCO%TYPE,
        ONUERRORCODE        OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE     OUT  MENSAJE.MENSDESC%TYPE
    ) IS

        CURSOR CUSTATUS (
                                   INUSERVSUSC             SERVSUSC.SESUNUSE%TYPE,
                                   INUSTATUSCOEC           SERVSUSC.SESUESCO%TYPE,
                                   INUSTATUSCOER           SERVSUSC.SESUESCO%TYPE
                                 ) IS
        SELECT RCECSERV
        FROM SERVSUSC, RECAESCO
        WHERE SESUNUSE = INUSERVSUSC AND
              SESUSERV = RCECSERV AND
              RCECCOER = INUSTATUSCOER AND
              RCECCOEC = INUSTATUSCOEC AND
              ROWNUM = 1;

        NUDUMMY RECAESCO.RCECSERV%TYPE;

    BEGIN

        IF ( CUSTATUS%ISOPEN) THEN
             CLOSE CUSTATUS ;
        END IF;

        OPEN CUSTATUS ( INUSERVSUSC, INUSTATUSCOEC, INUSTATUSCOER );

        FETCH CUSTATUS INTO NUDUMMY;

        IF ( CUSTATUS%NOTFOUND ) THEN
            
           	CLOSE CUSTATUS ;
           	PKERRORS.SETERRORCODE(  PKCONSTANTE.CSBDIVISION,
                                    PKCONSTANTE.CSBMOD_BIL,
                       				CNUNO_VAL_EXI_CHA_STAT );
            PKERRORS.CHANGEMESSAGE('%s1',INUSTATUSCOER);
            PKERRORS.CHANGEMESSAGE('%s2',INUSTATUSCOEC);
            RAISE LOGIN_DENIED;
        END IF;

    EXCEPTION
        WHEN LOGIN_DENIED THEN
        
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
	END VALIDTRANSITIONSTATE;
	
	PROCEDURE ATTENTFINALSUSPCONN
        (
        INUSERVSUSC         IN   SERVSUSC.SESUNUSE%TYPE,
        INUCOECCODI	        IN	 CONFESCO.COECCODI%TYPE,
        DTSESUFECO	        IN   SERVSUSC.SESUFECO%TYPE,
        ONUERRORCODE        OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE     OUT  MENSAJE.MENSDESC%TYPE
        )
    IS
    
        RCSERVSUSC              SERVSUSC%ROWTYPE ;		
         
        
        
        NUACCOUNTSTATUS         FACTURA.FACTCODI%TYPE;

    
    
    
    





	PROCEDURE GETDATA IS
    BEGIN
        
        PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentFinalSuspConn.GetData');

        
        RCSERVSUSC := PKTBLSERVSUSC.FRCGETRECORD ( INUSERVSUSC ) ;

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END GETDATA;

    



    PROCEDURE VALINPUTDATA IS
    BEGIN
        

        PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentFinalSuspConn.ValInputData');

        
        PKTBLCONFESCO.ACCKEY(RCSERVSUSC.SESUSERV,INUCOECCODI,PKCONSTANTE.NOCACHE);

        
        VALIDTRANSITIONSTATE(INUSERVSUSC,INUCOECCODI,RCSERVSUSC.SESUESCO,ONUERRORCODE, OSBERRORMESSAGE);

        PKERRORS.POP;

    EXCEPTION
        WHEN LOGIN_DENIED OR PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    
    END VALINPUTDATA;
    




    PROCEDURE PROCESS IS
    BEGIN
	   PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentFinalSuspConn.Process');

        
        
        IF (PKCHARGEMGR.FBLEXISTCHARGBILLNULLSERVICE(INUSERVSUSC)) THEN
            
            PKGENERATEBILL.GENBYPRODUCTWITHDRAW( INUSERVSUSC, NUACCOUNTSTATUS );
        END IF;

        
        PKTBLSERVSUSC.UPSUSPENSIONSTATUS (  INUSERVSUSC,
                                            INUCOECCODI,
                                            NVL(DTSESUFECO,PKGENERALSERVICES.FDTGETSYSTEMDATE)
                                         );

	   PKERRORS.POP;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
            PKERRORS.POP;
            RAISE;
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
            PKERRORS.POP;
            RAISE;
        WHEN OTHERS THEN
            PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
            PKERRORS.POP;
            RAISE_APPLICATION_ERROR( PKCONSTANTE.NUERROR_LEVEL2, SBERRMSG );
    END PROCESS;

    BEGIN
        PKERRORS.PUSH('BI_BSSuspConnWithDraw.AttentFinalSuspConn.');

        
        INITIALIZE (CSBPROGSUSPCONN);

        
        CLEARMEMORY;

        
        GETDATA;

        
        VALINPUTDATA;

        
        PROCESS;

        PKERRORS.POP;

    EXCEPTION
         WHEN LOGIN_DENIED THEN
        
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
    END ATTENTFINALSUSPCONN;
    
    PROCEDURE GETNEXTSTATE(
        INUSERVSUSC         IN   SERVSUSC.SESUNUSE%TYPE,
        INUSTATUSCOER       IN   SERVSUSC.SESUESCO%TYPE,
        ONUSTATUSCOEC       OUT  SERVSUSC.SESUESCO%TYPE,
        ONUERRORCODE        OUT  MENSAJE.MENSCODI%TYPE,
        OSBERRORMESSAGE     OUT  MENSAJE.MENSDESC%TYPE
    )
    IS

        CURSOR CUSTATUS (
                                   INUSERVSUSC             SERVSUSC.SESUNUSE%TYPE,
                                   INUSTATUSCOER           SERVSUSC.SESUESCO%TYPE
                        ) IS
        SELECT RCECCOEC
        FROM SERVSUSC, RECAESCO
        WHERE SESUNUSE = INUSERVSUSC AND
              SESUSERV = RCECSERV AND
              RCECCOER = INUSTATUSCOER AND
              ROWNUM = 1;

        NUDUMMY RECAESCO.RCECCOEC%TYPE;

    BEGIN

        IF ( CUSTATUS%ISOPEN) THEN
             CLOSE CUSTATUS ;
        END IF;

        OPEN CUSTATUS ( INUSERVSUSC, INUSTATUSCOER );

        FETCH CUSTATUS INTO NUDUMMY;

        ONUSTATUSCOEC := NUDUMMY;

        IF ( CUSTATUS%NOTFOUND ) THEN
            
           	CLOSE CUSTATUS ;
           	PKERRORS.SETERRORCODE(  CSBDIV,
    	                      		CSBMOD_SAT,
                       				CNUNO_EXIST_CHANG_STAT );
            RAISE LOGIN_DENIED;
        END IF;
    EXCEPTION
        WHEN LOGIN_DENIED THEN
        
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN PKCONSTANTE.EXERROR_LEVEL2 THEN
    	
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
        WHEN OTHERS THEN
        	PKERRORS.NOTIFYERROR( PKERRORS.FSBLASTOBJECT, SQLERRM, SBERRMSG );
        	PKERRORS.POP;
        	PKERRORS.GETERRORVAR( ONUERRORCODE, OSBERRORMESSAGE );
	END GETNEXTSTATE;

BEGIN

    PKERRORS.PUSH('BI_BSSuspConnWithDraw.BI_BSSuspConnWithDraw.bdy');

    PKGRLPARAMEXTENDEDMGR.SETCACHEON;

    PKERRORS.POP;


END BI_BSSUSPCONNWITHDRAW;