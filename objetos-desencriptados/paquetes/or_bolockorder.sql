PACKAGE BODY OR_boLockOrder IS









































    CSBVERSION      CONSTANT VARCHAR2(20) := 'SAO388059';
    
    CNUERR_121762   CONSTANT GE_ERROR_LOG.MESSAGE_ID%TYPE := 121762;
    
	FUNCTION FSBVERSION RETURN VARCHAR2 IS
    BEGIN
        RETURN CSBVERSION;
    END;
    
    


























    PROCEDURE LOCKORDER
    (
        INUORDER_ID IN OR_ORDER.ORDER_ID%TYPE,
        INUCOMMENTTYPEID    IN OR_ORDER_STAT_CHANGE.COMMENT_TYPE_ID%TYPE,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        RCORDER         DAOR_ORDER.STYOR_ORDER;
        NUESTADOINI     OR_ORDER.ORDER_STATUS_ID%TYPE;
        DTDATELTCHGE    DATE;
        SBASSIGNTYPE        OR_OPERATING_UNIT.ASSIGN_TYPE%TYPE;
        CSBSCHED_ASS_TYPE   CONSTANT VARCHAR2(1) := 'S';
        BLTOP               BOOLEAN := TRUE;
    BEGIN
        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDER_ID);
        
        
        IF RCORDER.STAGE_ID IS NOT NULL THEN
            
            PM_BOORDERTRANSITION.VALIDATESTATUSORDER(RCORDER.ORDER_ID,RCORDER.STAGE_ID,OR_BOCONSTANTS.CNUORDER_STAT_LOCK);
        END IF;


        
        IF NOT OR_BOORDERTRANSITION.FBLEXISTSORDERTRANSITION(
            OR_BOCONSTANTS.CNUORDER_ACTION_LOCK, RCORDER.ORDER_STATUS_ID)
        THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(OR_BOCONSTANTS.CNUERR_121742,
                OR_BOCONSTANTS.CNUORDER_ACTION_LOCK
                || OR_BOCONSTANTS.CSBERRPARASEPA || RCORDER.ORDER_ID
                || OR_BOCONSTANTS.CSBERRPARASEPA || RCORDER.ORDER_STATUS_ID);
        END IF;

        
        RCORDER.PREV_ORDER_STATUS_ID := RCORDER.ORDER_STATUS_ID;
        RCORDER.ORDER_STATUS_ID      := OR_BOCONSTANTS.CNUORDER_STAT_LOCK;

        
        NUESTADOINI := RCORDER.ORDER_STATUS_ID;
        
        IF (IDTCHANGEDATE IS NOT NULL) THEN
                DTDATELTCHGE := OR_BCORDERSTATCHANG.FDTGETCHANGEDATE(RCORDER.ORDER_ID,RCORDER.PREV_ORDER_STATUS_ID);
                IF (DTDATELTCHGE IS NOT NULL) THEN
                        OR_BOFWLEGALIZEORDER.VALIDATEFINALDATE(DTDATELTCHGE,IDTCHANGEDATE);
                ELSE
                        OR_BOFWLEGALIZEORDERUTIL.VALIDFINALDATEOFSYSDATE(IDTCHANGEDATE);
                END IF;
        END IF;
        
        
        DAOR_ORDER.UPDRECORD(RCORDER);
        
        
        OR_BCORDERSTATCHANG.INSRECORD(
            RCORDER.ORDER_ID,
            OR_BOCONSTANTS.CNUORDER_ACTION_LOCK,
            RCORDER.PREV_ORDER_STATUS_ID, RCORDER.ORDER_STATUS_ID,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            INUCOMMENTTYPEID,
            NULL,
            IDTCHANGEDATE
        );
        
        SBASSIGNTYPE := CSBSCHED_ASS_TYPE;
        IF (RCORDER.OPERATING_UNIT_ID IS NOT NULL) THEN

            SBASSIGNTYPE := DAOR_OPERATING_UNIT.FSBGETASSIGN_TYPE(RCORDER.OPERATING_UNIT_ID);

        END IF;

        IF(SBASSIGNTYPE = CSBSCHED_ASS_TYPE) THEN
            
            BLTOP := FALSE;
        END IF;

        
        
        IF BLTOP THEN

            
            
            OR_BOANULLORDER.DECREASECONTASSIVAL
            (
                RCORDER
            );

        END IF;
            
        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(RCORDER, NUESTADOINI);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END LOCKORDER;
    
    




























    PROCEDURE UNLOCKORDER
    (
        INUORDER_ID         IN OR_ORDER.ORDER_ID%TYPE,
        INUCOMMENTTYPEID    IN OR_ORDER_STAT_CHANGE.COMMENT_TYPE_ID%TYPE,
        IDTCHANGEDATE       IN OR_ORDER_STAT_CHANGE.STAT_CHG_DATE%TYPE DEFAULT NULL
    )
    IS
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        NUESTADOINI         OR_ORDER.ORDER_STATUS_ID%TYPE;
        RCSCHEDPROGRAMING   DAOR_SCHED_PROGRAMING.STYOR_SCHED_PROGRAMING;
        BLEXISTPROGRAMING   BOOLEAN := FALSE;
        RCSCHEDAVAILABLE    DAOR_SCHED_AVAILABLE.STYOR_SCHED_AVAILABLE;
        SBRANGEDESCRIPTION  OR_ORDER_STAT_CHANGE.RANGE_DESCRIPTION%TYPE;
        DTDATELTCHGE        DATE;
        NUPREVORDERSTATUS   OR_ORDER.PREV_ORDER_STATUS_ID%TYPE;
        SBEXTERNA           OR_OPERATING_UNIT.ES_EXTERNA%TYPE;
    BEGIN
        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDER_ID);
        
        
        NUPREVORDERSTATUS := RCORDER.PREV_ORDER_STATUS_ID;

        
        IF RCORDER.STAGE_ID IS NOT NULL THEN
            
            PM_BOORDERTRANSITION.VALIDATESTATUSORDER(RCORDER.ORDER_ID,RCORDER.STAGE_ID,RCORDER.PREV_ORDER_STATUS_ID);
        END IF;

        
        IF RCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_LOCK THEN
            GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_121762, INUORDER_ID);
        END IF;
            
        
        RCORDER.ORDER_STATUS_ID      := RCORDER.PREV_ORDER_STATUS_ID;
        RCORDER.PREV_ORDER_STATUS_ID := NULL;

        
        NUESTADOINI := RCORDER.ORDER_STATUS_ID;
        
        IF (RCORDER.ORDER_STATUS_ID IN (OR_BOCONSTANTS.CNUORDER_STAT_PROGRAMMED)) THEN
            
            BLEXISTPROGRAMING := OR_BCPROGRAMING.FBLEXISTSPROGBYORDER(RCORDER.ORDER_ID, RCSCHEDPROGRAMING);
            IF (BLEXISTPROGRAMING) THEN
                
                DAOR_SCHED_AVAILABLE.GETRECORD(RCSCHEDPROGRAMING.SCHED_AVAILABLE_ID,
                                               RCSCHEDAVAILABLE);
                
                SBRANGEDESCRIPTION := OR_BOSCHED.FSBGETAVAILRANGEDESC(
                    RCORDER.ORDER_ID,
                    RCSCHEDPROGRAMING.PROGRAMING_CLASS_ID,
                    RCSCHEDAVAILABLE.DATE_,
                    RCSCHEDAVAILABLE.OPERATING_ZONE_ID,
                    RCSCHEDAVAILABLE.HOUR_ENTRANCE,
                    RCSCHEDAVAILABLE.HOUR_EXIT,
                    RCSCHEDPROGRAMING.HOUR_START,
                    RCSCHEDPROGRAMING.HOUR_END
                );
                
                IF (IDTCHANGEDATE IS NOT NULL) THEN
                    DTDATELTCHGE := OR_BCORDERSTATCHANG.FDTGETCHANGEDATE(RCORDER.ORDER_ID,NUESTADOINI);
                    IF (DTDATELTCHGE IS NOT NULL) THEN
                        OR_BOFWLEGALIZEORDER.VALIDATEFINALDATE(DTDATELTCHGE,IDTCHANGEDATE);
                    ELSE
                        OR_BOFWLEGALIZEORDERUTIL.VALIDFINALDATEOFSYSDATE(IDTCHANGEDATE);
                    END IF;
                END IF;
                
                OR_BCORDERSTATCHANG.INSRECORD(
                    RCORDER.ORDER_ID,
                    OR_BOCONSTANTS.CNUORDER_ACTION_UNLOCK,
                    OR_BOCONSTANTS.CNUORDER_STAT_LOCK,
                    RCORDER.ORDER_STATUS_ID,
                    RCORDER.EXEC_ESTIMATE_DATE,
                    SBRANGEDESCRIPTION,
                    RCSCHEDPROGRAMING.PROGRAMING_CLASS_ID,
                    NULL,
                    RCSCHEDAVAILABLE.OPERATING_UNIT_ID,
                    INUCOMMENTTYPEID,
                    NULL,
                    IDTCHANGEDATE
                );
            END IF;
        END IF;
        
        
        IF (NOT BLEXISTPROGRAMING) THEN

            IF (IDTCHANGEDATE IS NOT NULL) THEN
                    DTDATELTCHGE := OR_BCORDERSTATCHANG.FDTGETCHANGEDATE(RCORDER.ORDER_ID,NUESTADOINI);
                    IF (DTDATELTCHGE IS NOT NULL) THEN
                        OR_BOFWLEGALIZEORDER.VALIDATEFINALDATE(DTDATELTCHGE,IDTCHANGEDATE);
                    ELSE
                        OR_BOFWLEGALIZEORDERUTIL.VALIDFINALDATEOFSYSDATE(IDTCHANGEDATE);
                    END IF;
            END IF;
           
            OR_BCORDERSTATCHANG.INSRECORD(
                RCORDER.ORDER_ID,
                OR_BOCONSTANTS.CNUORDER_ACTION_UNLOCK,
                OR_BOCONSTANTS.CNUORDER_STAT_LOCK,
                RCORDER.ORDER_STATUS_ID,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                INUCOMMENTTYPEID,
                NULL,
                IDTCHANGEDATE
            );
            
        END IF;
        
        
        IF NUPREVORDERSTATUS = OR_BOCONSTANTS.CNUORDER_STAT_ASSIGNED THEN
            
            RCORDER.ORDER_STATUS_ID      := 0;
            
            
            DAOR_ORDER.UPDRECORD(RCORDER);
        
            
            SBEXTERNA := DAOR_OPERATING_UNIT.FSBGETES_EXTERNA(RCORDER.OPERATING_UNIT_ID, 0);
            
            IF SBEXTERNA = GE_BOCONSTANTS.GETYES THEN
                OR_BOPROCESSORDER.ASSIGN(RCORDER, RCORDER.OPERATING_UNIT_ID, RCORDER.EXEC_ESTIMATE_DATE, FALSE, TRUE);
            END IF;
        ELSE
            
            DAOR_ORDER.UPDRECORD(RCORDER);
        END IF;
        
        GE_BONOTIFMESGALERT.PROCSTAORDERFORALERT(RCORDER, NUESTADOINI);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END UNLOCKORDER;
    

    














    PROCEDURE UNLOCKORDERATTDAM
    (
        INUORDERID          IN  OR_ORDER.ORDER_ID%TYPE,
        INUCOMMENTTYPEID    IN  OR_ORDER_COMMENT.COMMENT_TYPE_ID%TYPE,
        ISBCOMMENT          IN  OR_ORDER_COMMENT.ORDER_COMMENT%TYPE
    )
    IS
        RCORDER         DAOR_ORDER.STYOR_ORDER;

    BEGIN
        UT_TRACE.TRACE('Inicio OR_boLockOrder.unlockOrderAttDam',2);
        
        OR_BCORDERPROCESS.LOCKORDER(INUORDERID);

        
        RCORDER := DAOR_ORDER.FRCGETRECORD(INUORDERID);
        IF RCORDER.ORDER_STATUS_ID <> OR_BOCONSTANTS.CNUORDER_STAT_LOCK THEN
            GE_BOERRORS.SETERRORCODE(OR_BOCONSTANTS.CNUERR_122462);
        END IF;

        
        OR_BOORDERCOMMENT.ADDCOMMENT(INUORDERID,INUCOMMENTTYPEID,ISBCOMMENT);

        
        OR_BOLOCKORDER.UNLOCKORDER(INUORDERID,INUCOMMENTTYPEID);

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;

    END UNLOCKORDERATTDAM;



    
    














    FUNCTION FBLLOCKEDORDER
    (
        INUORDERID  IN  OR_ORDER.ORDER_ID%TYPE
    )
    RETURN BOOLEAN
    IS
    BEGIN
      UT_TRACE.TRACE('INICIO [OR_BOLOCKORDER.FBLLOCKEDORDER]',10);
        IF DAOR_ORDER.FNUGETORDER_STATUS_ID(INUORDERID) = OR_BOCONSTANTS.CNUORDER_STAT_LOCK THEN
        UT_TRACE.TRACE('FIN TRUE [OR_BOLOCKORDER.FBLLOCKEDORDER]',10);
           RETURN TRUE;
        END IF;
        UT_TRACE.TRACE('FIN FALSE [OR_BOLOCKORDER.FBLLOCKEDORDER]',10);
        RETURN FALSE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RETURN FALSE;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;

END OR_BOLOCKORDER;